// starting begin ResetFog ;
   0: CALL_OW 335
// AnimateTrees ( true ) ;
   4: LD_INT 1
   6: PPUSH
   7: CALL_OW 573
// InitSettings ;
  11: CALL 51 0 0
// if debug then
  15: LD_EXP 1
  19: IFFALSE 38
// begin PlaceSeeing ( 1 , 1 , 1 , - 372963 ) ;
  21: LD_INT 1
  23: PPUSH
  24: LD_INT 1
  26: PPUSH
  27: LD_INT 1
  29: PPUSH
  30: LD_INT 372963
  32: NEG
  33: PPUSH
  34: CALL_OW 330
// end ; SetTechnologies ;
  38: CALL 602 0 0
// SetDiplomacy ;
  42: CALL 814 0 0
// PrepareGame ;
  46: CALL 896 0 0
// end ;
  50: END
// export debug , GameType , game , disableGlobalTimer ; export mc_amer , mc_leg , mc_rus_1 , mc_rus_2 ; export playerCommander , playerForces , allyCommander , Powell , Farmer , ruOutpost , ruEscape , staticMines , baseCaptured , legDestCounter , cratesSpawns , legOfferAccepted , legChangeSide , allyDestCounter , sibBombAllowed , reinforceAllowed , commander , cratesSpawn , outpostEscape , dialogueMineDetected ; end_of_file export function InitSettings ; begin
  51: LD_INT 0
  53: PPUSH
// debug := 0 ;
  54: LD_ADDR_EXP 1
  58: PUSH
  59: LD_INT 0
  61: ST_TO_ADDR
// GameType := 1 ;
  62: LD_ADDR_EXP 2
  66: PUSH
  67: LD_INT 1
  69: ST_TO_ADDR
// Difficulty := GetMultiplayerSetting ( 0 ) ;
  70: LD_ADDR_OWVAR 67
  74: PUSH
  75: LD_INT 0
  77: PPUSH
  78: CALL_OW 426
  82: ST_TO_ADDR
// sibBombAllowed := GetMultiPlayerSetting ( 1 ) - 1 ;
  83: LD_ADDR_EXP 23
  87: PUSH
  88: LD_INT 1
  90: PPUSH
  91: CALL_OW 426
  95: PUSH
  96: LD_INT 1
  98: MINUS
  99: ST_TO_ADDR
// reinforceAllowed := GetMultiPlayerSetting ( 2 ) - 1 ;
 100: LD_ADDR_EXP 24
 104: PUSH
 105: LD_INT 2
 107: PPUSH
 108: CALL_OW 426
 112: PUSH
 113: LD_INT 1
 115: MINUS
 116: ST_TO_ADDR
// cratesSpawn := GetMultiPlayerSetting ( 3 ) ;
 117: LD_ADDR_EXP 26
 121: PUSH
 122: LD_INT 3
 124: PPUSH
 125: CALL_OW 426
 129: ST_TO_ADDR
// commander := GetMultiPlayerSetting ( 4 ) ;
 130: LD_ADDR_EXP 25
 134: PUSH
 135: LD_INT 4
 137: PPUSH
 138: CALL_OW 426
 142: ST_TO_ADDR
// if not commander then
 143: LD_EXP 25
 147: NOT
 148: IFFALSE 158
// commander := 3 ;
 150: LD_ADDR_EXP 25
 154: PUSH
 155: LD_INT 3
 157: ST_TO_ADDR
// if not debug then
 158: LD_EXP 1
 162: NOT
 163: IFFALSE 167
// exit ;
 165: GO 224
// display_strings := [ Difficulty:  & Difficulty , sibBomb:  & sibBombAllowed , reinforceAllowed:  & reinforceAllowed , cratesSpawn:  & cratesSpawn , commander:  & commander ] ;
 167: LD_ADDR_OWVAR 47
 171: PUSH
 172: LD_STRING Difficulty: 
 174: PUSH
 175: LD_OWVAR 67
 179: STR
 180: PUSH
 181: LD_STRING sibBomb: 
 183: PUSH
 184: LD_EXP 23
 188: STR
 189: PUSH
 190: LD_STRING reinforceAllowed: 
 192: PUSH
 193: LD_EXP 24
 197: STR
 198: PUSH
 199: LD_STRING cratesSpawn: 
 201: PUSH
 202: LD_EXP 26
 206: STR
 207: PUSH
 208: LD_STRING commander: 
 210: PUSH
 211: LD_EXP 25
 215: STR
 216: PUSH
 217: EMPTY
 218: LIST
 219: LIST
 220: LIST
 221: LIST
 222: LIST
 223: ST_TO_ADDR
// end ;
 224: LD_VAR 0 1
 228: RET
// every 0 0$1 trigger game and GameType = 1 and not disableGlobalTimer do
 229: LD_EXP 3
 233: PUSH
 234: LD_EXP 2
 238: PUSH
 239: LD_INT 1
 241: EQUAL
 242: AND
 243: PUSH
 244: LD_EXP 4
 248: NOT
 249: AND
 250: IFFALSE 273
 252: GO 254
 254: DISABLE
// begin enable ;
 255: ENABLE
// display_strings := [ #SkrTime , tick ] ;
 256: LD_ADDR_OWVAR 47
 260: PUSH
 261: LD_STRING #SkrTime
 263: PUSH
 264: LD_OWVAR 1
 268: PUSH
 269: EMPTY
 270: LIST
 271: LIST
 272: ST_TO_ADDR
// end ;
 273: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 274: LD_EXP 19
 278: PUSH
 279: LD_EXP 3
 283: AND
 284: PUSH
 285: LD_EXP 2
 289: PUSH
 290: LD_INT 1
 292: EQUAL
 293: AND
 294: IFFALSE 355
 296: GO 298
 298: DISABLE
// Crates ( cratesSpawns [ 1 ] [ 1 ] , cratesSpawns [ 1 ] [ 2 ] , cratesSpawns [ 1 ] [ 3 ] , cratesSpawns [ 1 ] [ 4 ] ) ;
 299: LD_EXP 19
 303: PUSH
 304: LD_INT 1
 306: ARRAY
 307: PUSH
 308: LD_INT 1
 310: ARRAY
 311: PPUSH
 312: LD_EXP 19
 316: PUSH
 317: LD_INT 1
 319: ARRAY
 320: PUSH
 321: LD_INT 2
 323: ARRAY
 324: PPUSH
 325: LD_EXP 19
 329: PUSH
 330: LD_INT 1
 332: ARRAY
 333: PUSH
 334: LD_INT 3
 336: ARRAY
 337: PPUSH
 338: LD_EXP 19
 342: PUSH
 343: LD_INT 1
 345: ARRAY
 346: PUSH
 347: LD_INT 4
 349: ARRAY
 350: PPUSH
 351: CALL 55891 0 4
 355: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 356: LD_EXP 19
 360: PUSH
 361: LD_EXP 3
 365: AND
 366: PUSH
 367: LD_EXP 2
 371: PUSH
 372: LD_INT 1
 374: EQUAL
 375: AND
 376: IFFALSE 437
 378: GO 380
 380: DISABLE
// Crates ( cratesSpawns [ 2 ] [ 1 ] , cratesSpawns [ 2 ] [ 2 ] , cratesSpawns [ 2 ] [ 3 ] , cratesSpawns [ 2 ] [ 4 ] ) ;
 381: LD_EXP 19
 385: PUSH
 386: LD_INT 2
 388: ARRAY
 389: PUSH
 390: LD_INT 1
 392: ARRAY
 393: PPUSH
 394: LD_EXP 19
 398: PUSH
 399: LD_INT 2
 401: ARRAY
 402: PUSH
 403: LD_INT 2
 405: ARRAY
 406: PPUSH
 407: LD_EXP 19
 411: PUSH
 412: LD_INT 2
 414: ARRAY
 415: PUSH
 416: LD_INT 3
 418: ARRAY
 419: PPUSH
 420: LD_EXP 19
 424: PUSH
 425: LD_INT 2
 427: ARRAY
 428: PUSH
 429: LD_INT 4
 431: ARRAY
 432: PPUSH
 433: CALL 55891 0 4
 437: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 438: LD_EXP 19
 442: PUSH
 443: LD_EXP 3
 447: AND
 448: PUSH
 449: LD_EXP 2
 453: PUSH
 454: LD_INT 1
 456: EQUAL
 457: AND
 458: IFFALSE 519
 460: GO 462
 462: DISABLE
// Crates ( cratesSpawns [ 3 ] [ 1 ] , cratesSpawns [ 3 ] [ 2 ] , cratesSpawns [ 3 ] [ 3 ] , cratesSpawns [ 3 ] [ 4 ] ) ;
 463: LD_EXP 19
 467: PUSH
 468: LD_INT 3
 470: ARRAY
 471: PUSH
 472: LD_INT 1
 474: ARRAY
 475: PPUSH
 476: LD_EXP 19
 480: PUSH
 481: LD_INT 3
 483: ARRAY
 484: PUSH
 485: LD_INT 2
 487: ARRAY
 488: PPUSH
 489: LD_EXP 19
 493: PUSH
 494: LD_INT 3
 496: ARRAY
 497: PUSH
 498: LD_INT 3
 500: ARRAY
 501: PPUSH
 502: LD_EXP 19
 506: PUSH
 507: LD_INT 3
 509: ARRAY
 510: PUSH
 511: LD_INT 4
 513: ARRAY
 514: PPUSH
 515: CALL 55891 0 4
 519: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 520: LD_EXP 19
 524: PUSH
 525: LD_EXP 3
 529: AND
 530: PUSH
 531: LD_EXP 2
 535: PUSH
 536: LD_INT 1
 538: EQUAL
 539: AND
 540: IFFALSE 601
 542: GO 544
 544: DISABLE
// Crates ( cratesSpawns [ 4 ] [ 1 ] , cratesSpawns [ 4 ] [ 2 ] , cratesSpawns [ 4 ] [ 3 ] , cratesSpawns [ 4 ] [ 4 ] ) ;
 545: LD_EXP 19
 549: PUSH
 550: LD_INT 4
 552: ARRAY
 553: PUSH
 554: LD_INT 1
 556: ARRAY
 557: PPUSH
 558: LD_EXP 19
 562: PUSH
 563: LD_INT 4
 565: ARRAY
 566: PUSH
 567: LD_INT 2
 569: ARRAY
 570: PPUSH
 571: LD_EXP 19
 575: PUSH
 576: LD_INT 4
 578: ARRAY
 579: PUSH
 580: LD_INT 3
 582: ARRAY
 583: PPUSH
 584: LD_EXP 19
 588: PUSH
 589: LD_INT 4
 591: ARRAY
 592: PUSH
 593: LD_INT 4
 595: ARRAY
 596: PPUSH
 597: CALL 55891 0 4
 601: END
// export function SetTechnologies ; var i , j , ban_techs , res_techs ; begin
 602: LD_INT 0
 604: PPUSH
 605: PPUSH
 606: PPUSH
 607: PPUSH
 608: PPUSH
// if GameType = 1 then
 609: LD_EXP 2
 613: PUSH
 614: LD_INT 1
 616: EQUAL
 617: IFFALSE 686
// begin ban_techs := [ ] ;
 619: LD_ADDR_VAR 0 4
 623: PUSH
 624: EMPTY
 625: ST_TO_ADDR
// if sibBombAllowed < 2 then
 626: LD_EXP 23
 630: PUSH
 631: LD_INT 2
 633: LESS
 634: IFFALSE 647
// ban_techs := [ tech_sibFiss ] ;
 636: LD_ADDR_VAR 0 4
 640: PUSH
 641: LD_INT 25
 643: PUSH
 644: EMPTY
 645: LIST
 646: ST_TO_ADDR
// res_techs := [ tech_oilPow , tech_oilEng , tech_tech1 , tech_tech2 , tech_tech3 , tech_gun , tech_gatling , tech_rocket ] ;
 647: LD_ADDR_VAR 0 5
 651: PUSH
 652: LD_INT 46
 654: PUSH
 655: LD_INT 47
 657: PUSH
 658: LD_INT 48
 660: PUSH
 661: LD_INT 49
 663: PUSH
 664: LD_INT 50
 666: PUSH
 667: LD_INT 39
 669: PUSH
 670: LD_INT 69
 672: PUSH
 673: LD_INT 40
 675: PUSH
 676: EMPTY
 677: LIST
 678: LIST
 679: LIST
 680: LIST
 681: LIST
 682: LIST
 683: LIST
 684: LIST
 685: ST_TO_ADDR
// end ; for i = 1 to 8 do
 686: LD_ADDR_VAR 0 2
 690: PUSH
 691: DOUBLE
 692: LD_INT 1
 694: DEC
 695: ST_TO_ADDR
 696: LD_INT 8
 698: PUSH
 699: FOR_TO
 700: IFFALSE 784
// begin if res_techs then
 702: LD_VAR 0 5
 706: IFFALSE 742
// for j in res_techs do
 708: LD_ADDR_VAR 0 3
 712: PUSH
 713: LD_VAR 0 5
 717: PUSH
 718: FOR_IN
 719: IFFALSE 740
// SetTech ( j , i , state_researched ) ;
 721: LD_VAR 0 3
 725: PPUSH
 726: LD_VAR 0 2
 730: PPUSH
 731: LD_INT 2
 733: PPUSH
 734: CALL_OW 322
 738: GO 718
 740: POP
 741: POP
// if ban_techs then
 742: LD_VAR 0 4
 746: IFFALSE 782
// for j in ban_techs do
 748: LD_ADDR_VAR 0 3
 752: PUSH
 753: LD_VAR 0 4
 757: PUSH
 758: FOR_IN
 759: IFFALSE 780
// SetTech ( j , i , state_disabled ) ;
 761: LD_VAR 0 3
 765: PPUSH
 766: LD_VAR 0 2
 770: PPUSH
 771: LD_INT 0
 773: PPUSH
 774: CALL_OW 322
 778: GO 758
 780: POP
 781: POP
// end ;
 782: GO 699
 784: POP
 785: POP
// if sibBombAllowed = 1 then
 786: LD_EXP 23
 790: PUSH
 791: LD_INT 1
 793: EQUAL
 794: IFFALSE 809
// SetTech ( tech_sibFiss , 3 , state_enabled ) ;
 796: LD_INT 25
 798: PPUSH
 799: LD_INT 3
 801: PPUSH
 802: LD_INT 1
 804: PPUSH
 805: CALL_OW 322
// end ;
 809: LD_VAR 0 1
 813: RET
// export function SetDiplomacy ; begin
 814: LD_INT 0
 816: PPUSH
// if GameType = 1 then
 817: LD_EXP 2
 821: PUSH
 822: LD_INT 1
 824: EQUAL
 825: IFFALSE 891
// begin SetAttitude ( 1 , 4 , att_friend , true ) ;
 827: LD_INT 1
 829: PPUSH
 830: LD_INT 4
 832: PPUSH
 833: LD_INT 1
 835: PPUSH
 836: LD_INT 1
 838: PPUSH
 839: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 843: LD_INT 3
 845: PPUSH
 846: LD_INT 6
 848: PPUSH
 849: LD_INT 1
 851: PPUSH
 852: LD_INT 1
 854: PPUSH
 855: CALL_OW 80
// SetAttitude ( 3 , 8 , att_friend , true ) ;
 859: LD_INT 3
 861: PPUSH
 862: LD_INT 8
 864: PPUSH
 865: LD_INT 1
 867: PPUSH
 868: LD_INT 1
 870: PPUSH
 871: CALL_OW 80
// SetAttitude ( 6 , 8 , att_friend , true ) ;
 875: LD_INT 6
 877: PPUSH
 878: LD_INT 8
 880: PPUSH
 881: LD_INT 1
 883: PPUSH
 884: LD_INT 1
 886: PPUSH
 887: CALL_OW 80
// end ; end ;
 891: LD_VAR 0 1
 895: RET
// export function PrepareGame ; var i , tmp , sources ; begin
 896: LD_INT 0
 898: PPUSH
 899: PPUSH
 900: PPUSH
 901: PPUSH
// if GameType = 1 then
 902: LD_EXP 2
 906: PUSH
 907: LD_INT 1
 909: EQUAL
 910: IFFALSE 1406
// begin game := false ;
 912: LD_ADDR_EXP 3
 916: PUSH
 917: LD_INT 0
 919: ST_TO_ADDR
// your_side := 1 ;
 920: LD_ADDR_OWVAR 2
 924: PUSH
 925: LD_INT 1
 927: ST_TO_ADDR
// mc_amer := 1 ;
 928: LD_ADDR_EXP 5
 932: PUSH
 933: LD_INT 1
 935: ST_TO_ADDR
// mc_leg := 2 ;
 936: LD_ADDR_EXP 6
 940: PUSH
 941: LD_INT 2
 943: ST_TO_ADDR
// mc_rus_1 := 3 ;
 944: LD_ADDR_EXP 7
 948: PUSH
 949: LD_INT 3
 951: ST_TO_ADDR
// mc_rus_2 := 4 ;
 952: LD_ADDR_EXP 8
 956: PUSH
 957: LD_INT 4
 959: ST_TO_ADDR
// cratesSpawns := [ [ amerCrates , 1 , 0 , [ 200 , 250 , 300 ] [ cratesSpawn ] ] , [ rusCrates , 8 , 50 , 500 ] , [ legCrates , 5 , 50 , 300 ] , [ playerCrates , [ 4 , 5 , 6 ] [ cratesSpawn ] , 30 , [ 300 , 450 , 500 ] [ cratesSpawn ] ] ] ;
 960: LD_ADDR_EXP 19
 964: PUSH
 965: LD_INT 5
 967: PUSH
 968: LD_INT 1
 970: PUSH
 971: LD_INT 0
 973: PUSH
 974: LD_INT 200
 976: PUSH
 977: LD_INT 250
 979: PUSH
 980: LD_INT 300
 982: PUSH
 983: EMPTY
 984: LIST
 985: LIST
 986: LIST
 987: PUSH
 988: LD_EXP 26
 992: ARRAY
 993: PUSH
 994: EMPTY
 995: LIST
 996: LIST
 997: LIST
 998: LIST
 999: PUSH
1000: LD_INT 13
1002: PUSH
1003: LD_INT 8
1005: PUSH
1006: LD_INT 50
1008: PUSH
1009: LD_INT 500
1011: PUSH
1012: EMPTY
1013: LIST
1014: LIST
1015: LIST
1016: LIST
1017: PUSH
1018: LD_INT 17
1020: PUSH
1021: LD_INT 5
1023: PUSH
1024: LD_INT 50
1026: PUSH
1027: LD_INT 300
1029: PUSH
1030: EMPTY
1031: LIST
1032: LIST
1033: LIST
1034: LIST
1035: PUSH
1036: LD_INT 18
1038: PUSH
1039: LD_INT 4
1041: PUSH
1042: LD_INT 5
1044: PUSH
1045: LD_INT 6
1047: PUSH
1048: EMPTY
1049: LIST
1050: LIST
1051: LIST
1052: PUSH
1053: LD_EXP 26
1057: ARRAY
1058: PUSH
1059: LD_INT 30
1061: PUSH
1062: LD_INT 300
1064: PUSH
1065: LD_INT 450
1067: PUSH
1068: LD_INT 500
1070: PUSH
1071: EMPTY
1072: LIST
1073: LIST
1074: LIST
1075: PUSH
1076: LD_EXP 26
1080: ARRAY
1081: PUSH
1082: EMPTY
1083: LIST
1084: LIST
1085: LIST
1086: LIST
1087: PUSH
1088: EMPTY
1089: LIST
1090: LIST
1091: LIST
1092: LIST
1093: ST_TO_ADDR
// sources := [ [ 190 , 193 , mat_siberit ] , [ 182 , 117 , mat_siberit ] , [ 43 , 2 , mat_siberit ] , [ 114 , 152 , mat_oil ] , [ 85 , 38 , mat_oil ] ] ;
1094: LD_ADDR_VAR 0 4
1098: PUSH
1099: LD_INT 190
1101: PUSH
1102: LD_INT 193
1104: PUSH
1105: LD_INT 3
1107: PUSH
1108: EMPTY
1109: LIST
1110: LIST
1111: LIST
1112: PUSH
1113: LD_INT 182
1115: PUSH
1116: LD_INT 117
1118: PUSH
1119: LD_INT 3
1121: PUSH
1122: EMPTY
1123: LIST
1124: LIST
1125: LIST
1126: PUSH
1127: LD_INT 43
1129: PUSH
1130: LD_INT 2
1132: PUSH
1133: LD_INT 3
1135: PUSH
1136: EMPTY
1137: LIST
1138: LIST
1139: LIST
1140: PUSH
1141: LD_INT 114
1143: PUSH
1144: LD_INT 152
1146: PUSH
1147: LD_INT 2
1149: PUSH
1150: EMPTY
1151: LIST
1152: LIST
1153: LIST
1154: PUSH
1155: LD_INT 85
1157: PUSH
1158: LD_INT 38
1160: PUSH
1161: LD_INT 2
1163: PUSH
1164: EMPTY
1165: LIST
1166: LIST
1167: LIST
1168: PUSH
1169: EMPTY
1170: LIST
1171: LIST
1172: LIST
1173: LIST
1174: LIST
1175: ST_TO_ADDR
// for i in sources do
1176: LD_ADDR_VAR 0 2
1180: PUSH
1181: LD_VAR 0 4
1185: PUSH
1186: FOR_IN
1187: IFFALSE 1222
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
1189: LD_VAR 0 2
1193: PUSH
1194: LD_INT 1
1196: ARRAY
1197: PPUSH
1198: LD_VAR 0 2
1202: PUSH
1203: LD_INT 2
1205: ARRAY
1206: PPUSH
1207: LD_VAR 0 2
1211: PUSH
1212: LD_INT 3
1214: ARRAY
1215: PPUSH
1216: CALL_OW 62
1220: GO 1186
1222: POP
1223: POP
// disableGlobalTimer := false ;
1224: LD_ADDR_EXP 4
1228: PUSH
1229: LD_INT 0
1231: ST_TO_ADDR
// ruEscape := [ 0 , [ 5 , 6 , 7 ] [ Difficulty ] ] ;
1232: LD_ADDR_EXP 15
1236: PUSH
1237: LD_INT 0
1239: PUSH
1240: LD_INT 5
1242: PUSH
1243: LD_INT 6
1245: PUSH
1246: LD_INT 7
1248: PUSH
1249: EMPTY
1250: LIST
1251: LIST
1252: LIST
1253: PUSH
1254: LD_OWVAR 67
1258: ARRAY
1259: PUSH
1260: EMPTY
1261: LIST
1262: LIST
1263: ST_TO_ADDR
// ruOutpost := [ ] ;
1264: LD_ADDR_EXP 14
1268: PUSH
1269: EMPTY
1270: ST_TO_ADDR
// staticMines := [ ] ;
1271: LD_ADDR_EXP 16
1275: PUSH
1276: EMPTY
1277: ST_TO_ADDR
// baseCaptured := false ;
1278: LD_ADDR_EXP 17
1282: PUSH
1283: LD_INT 0
1285: ST_TO_ADDR
// legDestCounter := 0 ;
1286: LD_ADDR_EXP 18
1290: PUSH
1291: LD_INT 0
1293: ST_TO_ADDR
// legOfferAccepted := false ;
1294: LD_ADDR_EXP 20
1298: PUSH
1299: LD_INT 0
1301: ST_TO_ADDR
// legChangeSide := false ;
1302: LD_ADDR_EXP 21
1306: PUSH
1307: LD_INT 0
1309: ST_TO_ADDR
// allyDestCounter := 0 ;
1310: LD_ADDR_EXP 22
1314: PUSH
1315: LD_INT 0
1317: ST_TO_ADDR
// outpostEscape := false ;
1318: LD_ADDR_EXP 27
1322: PUSH
1323: LD_INT 0
1325: ST_TO_ADDR
// dialogueMineDetected := false ;
1326: LD_ADDR_EXP 28
1330: PUSH
1331: LD_INT 0
1333: ST_TO_ADDR
// PrepareAmericans ;
1334: CALL 7606 0 0
// PrepareLegion ;
1338: CALL 5540 0 0
// PrepareRussians ;
1342: CALL 2506 0 0
// playerForces := PreparePlayer ;
1346: LD_ADDR_EXP 10
1350: PUSH
1351: CALL 8849 0 0
1355: ST_TO_ADDR
// AnimateTrees ( true ) ;
1356: LD_INT 1
1358: PPUSH
1359: CALL_OW 573
// PrepareNature ( 4 , 3 , 8 , 5 , 3 , 1 , 8 , natureGroundArea , natureWaterArea ) ;
1363: LD_INT 4
1365: PPUSH
1366: LD_INT 3
1368: PPUSH
1369: LD_INT 8
1371: PPUSH
1372: LD_INT 5
1374: PPUSH
1375: LD_INT 3
1377: PPUSH
1378: LD_INT 1
1380: PPUSH
1381: LD_INT 8
1383: PPUSH
1384: LD_INT 2
1386: PPUSH
1387: LD_INT 1
1389: PPUSH
1390: CALL 53249 0 9
// MC_Start ;
1394: CALL 62254 0 0
// SetAdditionalRussianForces ;
1398: CALL 7275 0 0
// Action ;
1402: CALL 11206 0 0
// end ; end ;
1406: LD_VAR 0 1
1410: RET
// export function CustomInitMacro ; begin
1411: LD_INT 0
1413: PPUSH
// if GameType <> 1 then
1414: LD_EXP 2
1418: PUSH
1419: LD_INT 1
1421: NONEQUAL
1422: IFFALSE 1426
// exit ;
1424: GO 2501
// MC_SetScanArea ( mc_amer , amerBase ) ;
1426: LD_EXP 5
1430: PPUSH
1431: LD_INT 3
1433: PPUSH
1434: CALL 85582 0 2
// MC_SetParkingArea ( mc_amer , amerParking ) ;
1438: LD_EXP 5
1442: PPUSH
1443: LD_INT 4
1445: PPUSH
1446: CALL 85526 0 2
// MC_SetAllowedTurretWeapons ( mc_amer , [ us_radar , us_heavy_gun , us_rocket_launcher , us_laser , us_double_laser ] ) ;
1450: LD_EXP 5
1454: PPUSH
1455: LD_INT 11
1457: PUSH
1458: LD_INT 6
1460: PUSH
1461: LD_INT 7
1463: PUSH
1464: LD_INT 9
1466: PUSH
1467: LD_INT 10
1469: PUSH
1470: EMPTY
1471: LIST
1472: LIST
1473: LIST
1474: LIST
1475: LIST
1476: PPUSH
1477: CALL 85414 0 2
// MC_SetCratesArea ( mc_amer , amerCrates ) ;
1481: LD_EXP 5
1485: PPUSH
1486: LD_INT 5
1488: PPUSH
1489: CALL 85096 0 2
// MC_SetTame ( mc_amer , amerBase ) ;
1493: LD_EXP 5
1497: PPUSH
1498: LD_INT 3
1500: PPUSH
1501: CALL 84827 0 2
// MC_SetDefenderLimit ( mc_amer , 4 ) ;
1505: LD_EXP 5
1509: PPUSH
1510: LD_INT 4
1512: PPUSH
1513: CALL 84446 0 2
// MC_SetProduceList ( mc_amer , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_solar , control_remote , us_laser ] , [ us_heavy_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , ] ) ;
1517: LD_EXP 5
1521: PPUSH
1522: LD_INT 3
1524: PUSH
1525: LD_INT 1
1527: PUSH
1528: LD_INT 2
1530: PUSH
1531: LD_INT 5
1533: PUSH
1534: EMPTY
1535: LIST
1536: LIST
1537: LIST
1538: LIST
1539: PUSH
1540: LD_INT 3
1542: PUSH
1543: LD_INT 2
1545: PUSH
1546: LD_INT 2
1548: PUSH
1549: LD_INT 9
1551: PUSH
1552: EMPTY
1553: LIST
1554: LIST
1555: LIST
1556: LIST
1557: PUSH
1558: LD_INT 4
1560: PUSH
1561: LD_INT 1
1563: PUSH
1564: LD_INT 2
1566: PUSH
1567: LD_INT 7
1569: PUSH
1570: EMPTY
1571: LIST
1572: LIST
1573: LIST
1574: LIST
1575: PUSH
1576: LD_INT 4
1578: PUSH
1579: LD_INT 1
1581: PUSH
1582: LD_INT 2
1584: PUSH
1585: LD_INT 6
1587: PUSH
1588: EMPTY
1589: LIST
1590: LIST
1591: LIST
1592: LIST
1593: PUSH
1594: EMPTY
1595: LIST
1596: LIST
1597: LIST
1598: LIST
1599: PPUSH
1600: CALL 84261 0 2
// MC_SetBuildingList ( mc_amer , [ [ b_turret , 114 , 16 , 0 ] , [ b_bunker , 110 , 12 , 0 ] ] ) ;
1604: LD_EXP 5
1608: PPUSH
1609: LD_INT 33
1611: PUSH
1612: LD_INT 114
1614: PUSH
1615: LD_INT 16
1617: PUSH
1618: LD_INT 0
1620: PUSH
1621: EMPTY
1622: LIST
1623: LIST
1624: LIST
1625: LIST
1626: PUSH
1627: LD_INT 32
1629: PUSH
1630: LD_INT 110
1632: PUSH
1633: LD_INT 12
1635: PUSH
1636: LD_INT 0
1638: PUSH
1639: EMPTY
1640: LIST
1641: LIST
1642: LIST
1643: LIST
1644: PUSH
1645: EMPTY
1646: LIST
1647: LIST
1648: PPUSH
1649: CALL 84153 0 2
// MC_SetLabKind ( mc_amer , [ b_lab_weapon , b_lab_opto , b_lab_computer , b_lab_siberium ] ) ;
1653: LD_EXP 5
1657: PPUSH
1658: LD_INT 10
1660: PUSH
1661: LD_INT 15
1663: PUSH
1664: LD_INT 12
1666: PUSH
1667: LD_INT 11
1669: PUSH
1670: EMPTY
1671: LIST
1672: LIST
1673: LIST
1674: LIST
1675: PPUSH
1676: CALL 85003 0 2
// MC_SetScanArea ( mc_leg , legBase ) ;
1680: LD_EXP 6
1684: PPUSH
1685: LD_INT 6
1687: PPUSH
1688: CALL 85582 0 2
// MC_SetParkingArea ( mc_leg , legParking ) ;
1692: LD_EXP 6
1696: PPUSH
1697: LD_INT 7
1699: PPUSH
1700: CALL 85526 0 2
// MC_SetAllowedTurretWeapons ( mc_leg , [ ar_radar , ar_gun , ar_rocket_launcher , ar_gatling_gun ] ) ;
1704: LD_EXP 6
1708: PPUSH
1709: LD_INT 30
1711: PUSH
1712: LD_INT 27
1714: PUSH
1715: LD_INT 28
1717: PUSH
1718: LD_INT 25
1720: PUSH
1721: EMPTY
1722: LIST
1723: LIST
1724: LIST
1725: LIST
1726: PPUSH
1727: CALL 85414 0 2
// MC_SetCratesArea ( mc_leg , legCrates ) ;
1731: LD_EXP 6
1735: PPUSH
1736: LD_INT 17
1738: PPUSH
1739: CALL 85096 0 2
// MC_SetTame ( mc_leg , legBase ) ;
1743: LD_EXP 6
1747: PPUSH
1748: LD_INT 6
1750: PPUSH
1751: CALL 84827 0 2
// MC_SetDefenderLimit ( mc_leg , 5 ) ;
1755: LD_EXP 6
1759: PPUSH
1760: LD_INT 5
1762: PPUSH
1763: CALL 84446 0 2
// MC_SetMinesField ( mc_leg , 10 , legMines ) ;
1767: LD_EXP 6
1771: PPUSH
1772: LD_INT 10
1774: PPUSH
1775: LD_INT 9
1777: PPUSH
1778: CALL 83943 0 3
// MC_SetBuildingList ( mc_leg , [ [ b_armoury , 157 , 144 , 0 ] , [ b_bunker , 151 , 142 , 0 ] , [ b_bunker , 161 , 144 , 0 ] , [ b_bunker , 140 , 133 , 0 ] ] ) ;
1782: LD_EXP 6
1786: PPUSH
1787: LD_INT 4
1789: PUSH
1790: LD_INT 157
1792: PUSH
1793: LD_INT 144
1795: PUSH
1796: LD_INT 0
1798: PUSH
1799: EMPTY
1800: LIST
1801: LIST
1802: LIST
1803: LIST
1804: PUSH
1805: LD_INT 32
1807: PUSH
1808: LD_INT 151
1810: PUSH
1811: LD_INT 142
1813: PUSH
1814: LD_INT 0
1816: PUSH
1817: EMPTY
1818: LIST
1819: LIST
1820: LIST
1821: LIST
1822: PUSH
1823: LD_INT 32
1825: PUSH
1826: LD_INT 161
1828: PUSH
1829: LD_INT 144
1831: PUSH
1832: LD_INT 0
1834: PUSH
1835: EMPTY
1836: LIST
1837: LIST
1838: LIST
1839: LIST
1840: PUSH
1841: LD_INT 32
1843: PUSH
1844: LD_INT 140
1846: PUSH
1847: LD_INT 133
1849: PUSH
1850: LD_INT 0
1852: PUSH
1853: EMPTY
1854: LIST
1855: LIST
1856: LIST
1857: LIST
1858: PUSH
1859: EMPTY
1860: LIST
1861: LIST
1862: LIST
1863: LIST
1864: PPUSH
1865: CALL 84153 0 2
// MC_SetProduceList ( mc_leg , [ [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] , [ ar_medium_trike , engine_combustion , control_remote , ar_crane ] ] ) ;
1869: LD_EXP 6
1873: PPUSH
1874: LD_INT 13
1876: PUSH
1877: LD_INT 2
1879: PUSH
1880: LD_INT 1
1882: PUSH
1883: LD_INT 31
1885: PUSH
1886: EMPTY
1887: LIST
1888: LIST
1889: LIST
1890: LIST
1891: PUSH
1892: LD_INT 13
1894: PUSH
1895: LD_INT 2
1897: PUSH
1898: LD_INT 1
1900: PUSH
1901: LD_INT 31
1903: PUSH
1904: EMPTY
1905: LIST
1906: LIST
1907: LIST
1908: LIST
1909: PUSH
1910: LD_INT 13
1912: PUSH
1913: LD_INT 1
1915: PUSH
1916: LD_INT 1
1918: PUSH
1919: LD_INT 27
1921: PUSH
1922: EMPTY
1923: LIST
1924: LIST
1925: LIST
1926: LIST
1927: PUSH
1928: LD_INT 13
1930: PUSH
1931: LD_INT 1
1933: PUSH
1934: LD_INT 2
1936: PUSH
1937: LD_INT 27
1939: PUSH
1940: EMPTY
1941: LIST
1942: LIST
1943: LIST
1944: LIST
1945: PUSH
1946: LD_INT 13
1948: PUSH
1949: LD_INT 1
1951: PUSH
1952: LD_INT 2
1954: PUSH
1955: LD_INT 27
1957: PUSH
1958: EMPTY
1959: LIST
1960: LIST
1961: LIST
1962: LIST
1963: PUSH
1964: LD_INT 13
1966: PUSH
1967: LD_INT 1
1969: PUSH
1970: LD_INT 2
1972: PUSH
1973: LD_INT 28
1975: PUSH
1976: EMPTY
1977: LIST
1978: LIST
1979: LIST
1980: LIST
1981: PUSH
1982: LD_INT 13
1984: PUSH
1985: LD_INT 1
1987: PUSH
1988: LD_INT 2
1990: PUSH
1991: LD_INT 28
1993: PUSH
1994: EMPTY
1995: LIST
1996: LIST
1997: LIST
1998: LIST
1999: PUSH
2000: LD_INT 13
2002: PUSH
2003: LD_INT 1
2005: PUSH
2006: LD_INT 2
2008: PUSH
2009: LD_INT 32
2011: PUSH
2012: EMPTY
2013: LIST
2014: LIST
2015: LIST
2016: LIST
2017: PUSH
2018: LD_INT 13
2020: PUSH
2021: LD_INT 1
2023: PUSH
2024: LD_INT 2
2026: PUSH
2027: LD_EXP 35
2031: PUSH
2032: EMPTY
2033: LIST
2034: LIST
2035: LIST
2036: LIST
2037: PUSH
2038: EMPTY
2039: LIST
2040: LIST
2041: LIST
2042: LIST
2043: LIST
2044: LIST
2045: LIST
2046: LIST
2047: LIST
2048: PPUSH
2049: CALL 84261 0 2
// HiddenCamera ( 165 , 156 , 8 ) ;
2053: LD_INT 165
2055: PPUSH
2056: LD_INT 156
2058: PPUSH
2059: LD_INT 8
2061: PPUSH
2062: CALL_OW 244
// MC_SetScanArea ( mc_rus_1 , rus1Base ) ;
2066: LD_EXP 7
2070: PPUSH
2071: LD_INT 15
2073: PPUSH
2074: CALL 85582 0 2
// MC_SetParkingArea ( mc_rus_1 , rus1Parking ) ;
2078: LD_EXP 7
2082: PPUSH
2083: LD_INT 16
2085: PPUSH
2086: CALL 85526 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_1 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2090: LD_EXP 7
2094: PPUSH
2095: LD_INT 43
2097: PUSH
2098: LD_INT 47
2100: PUSH
2101: LD_INT 45
2103: PUSH
2104: LD_INT 49
2106: PUSH
2107: LD_INT 46
2109: PUSH
2110: EMPTY
2111: LIST
2112: LIST
2113: LIST
2114: LIST
2115: LIST
2116: PPUSH
2117: CALL 85414 0 2
// MC_SetCratesArea ( mc_rus_1 , rusCrates ) ;
2121: LD_EXP 7
2125: PPUSH
2126: LD_INT 13
2128: PPUSH
2129: CALL 85096 0 2
// MC_SetTame ( mc_rus_1 , rus1Base ) ;
2133: LD_EXP 7
2137: PPUSH
2138: LD_INT 15
2140: PPUSH
2141: CALL 84827 0 2
// MC_SetDefenderLimit ( mc_rus_1 , 5 ) ;
2145: LD_EXP 7
2149: PPUSH
2150: LD_INT 5
2152: PPUSH
2153: CALL 84446 0 2
// MC_SetProduceList ( mc_rus_1 , [ [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_rocket ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_crane ] , ] ) ;
2157: LD_EXP 7
2161: PPUSH
2162: LD_INT 23
2164: PUSH
2165: LD_INT 1
2167: PUSH
2168: LD_INT 3
2170: PUSH
2171: LD_INT 46
2173: PUSH
2174: EMPTY
2175: LIST
2176: LIST
2177: LIST
2178: LIST
2179: PUSH
2180: LD_INT 23
2182: PUSH
2183: LD_INT 1
2185: PUSH
2186: LD_INT 1
2188: PUSH
2189: LD_INT 46
2191: PUSH
2192: EMPTY
2193: LIST
2194: LIST
2195: LIST
2196: LIST
2197: PUSH
2198: LD_INT 23
2200: PUSH
2201: LD_INT 1
2203: PUSH
2204: LD_INT 3
2206: PUSH
2207: LD_INT 45
2209: PUSH
2210: EMPTY
2211: LIST
2212: LIST
2213: LIST
2214: LIST
2215: PUSH
2216: LD_INT 23
2218: PUSH
2219: LD_INT 1
2221: PUSH
2222: LD_INT 1
2224: PUSH
2225: LD_INT 47
2227: PUSH
2228: EMPTY
2229: LIST
2230: LIST
2231: LIST
2232: LIST
2233: PUSH
2234: LD_INT 23
2236: PUSH
2237: LD_INT 1
2239: PUSH
2240: LD_INT 3
2242: PUSH
2243: LD_INT 46
2245: PUSH
2246: EMPTY
2247: LIST
2248: LIST
2249: LIST
2250: LIST
2251: PUSH
2252: LD_INT 21
2254: PUSH
2255: LD_INT 1
2257: PUSH
2258: LD_INT 3
2260: PUSH
2261: LD_INT 51
2263: PUSH
2264: EMPTY
2265: LIST
2266: LIST
2267: LIST
2268: LIST
2269: PUSH
2270: LD_INT 21
2272: PUSH
2273: LD_INT 1
2275: PUSH
2276: LD_INT 3
2278: PUSH
2279: LD_INT 52
2281: PUSH
2282: EMPTY
2283: LIST
2284: LIST
2285: LIST
2286: LIST
2287: PUSH
2288: EMPTY
2289: LIST
2290: LIST
2291: LIST
2292: LIST
2293: LIST
2294: LIST
2295: LIST
2296: PPUSH
2297: CALL 84261 0 2
// MC_SetScanArea ( mc_rus_2 , rus2Base ) ;
2301: LD_EXP 8
2305: PPUSH
2306: LD_INT 11
2308: PPUSH
2309: CALL 85582 0 2
// MC_SetParkingArea ( mc_rus_2 , rus2Parking ) ;
2313: LD_EXP 8
2317: PPUSH
2318: LD_INT 12
2320: PPUSH
2321: CALL 85526 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_2 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2325: LD_EXP 8
2329: PPUSH
2330: LD_INT 43
2332: PUSH
2333: LD_INT 47
2335: PUSH
2336: LD_INT 45
2338: PUSH
2339: LD_INT 49
2341: PUSH
2342: LD_INT 46
2344: PUSH
2345: EMPTY
2346: LIST
2347: LIST
2348: LIST
2349: LIST
2350: LIST
2351: PPUSH
2352: CALL 85414 0 2
// MC_SetCratesArea ( mc_rus_2 , rusCrates ) ;
2356: LD_EXP 8
2360: PPUSH
2361: LD_INT 13
2363: PPUSH
2364: CALL 85096 0 2
// MC_SetTame ( mc_rus_2 , rus2Base ) ;
2368: LD_EXP 8
2372: PPUSH
2373: LD_INT 11
2375: PPUSH
2376: CALL 84827 0 2
// MC_SetDefenderLimit ( mc_rus_2 , 4 ) ;
2380: LD_EXP 8
2384: PPUSH
2385: LD_INT 4
2387: PPUSH
2388: CALL 84446 0 2
// MC_SetTeleportExit ( mc_rus_2 , [ [ 115 , 201 ] ] ) ;
2392: LD_EXP 8
2396: PPUSH
2397: LD_INT 115
2399: PUSH
2400: LD_INT 201
2402: PUSH
2403: EMPTY
2404: LIST
2405: LIST
2406: PUSH
2407: EMPTY
2408: LIST
2409: PPUSH
2410: CALL 85152 0 2
// MC_SetProduceList ( mc_rus_2 , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
2414: LD_EXP 8
2418: PPUSH
2419: LD_INT 24
2421: PUSH
2422: LD_INT 3
2424: PUSH
2425: LD_INT 3
2427: PUSH
2428: LD_INT 46
2430: PUSH
2431: EMPTY
2432: LIST
2433: LIST
2434: LIST
2435: LIST
2436: PUSH
2437: LD_INT 24
2439: PUSH
2440: LD_INT 3
2442: PUSH
2443: LD_INT 3
2445: PUSH
2446: LD_INT 46
2448: PUSH
2449: EMPTY
2450: LIST
2451: LIST
2452: LIST
2453: LIST
2454: PUSH
2455: LD_INT 24
2457: PUSH
2458: LD_INT 3
2460: PUSH
2461: LD_INT 3
2463: PUSH
2464: LD_INT 46
2466: PUSH
2467: EMPTY
2468: LIST
2469: LIST
2470: LIST
2471: LIST
2472: PUSH
2473: LD_INT 24
2475: PUSH
2476: LD_INT 3
2478: PUSH
2479: LD_INT 3
2481: PUSH
2482: LD_INT 46
2484: PUSH
2485: EMPTY
2486: LIST
2487: LIST
2488: LIST
2489: LIST
2490: PUSH
2491: EMPTY
2492: LIST
2493: LIST
2494: LIST
2495: LIST
2496: PPUSH
2497: CALL 84261 0 2
// end ;
2501: LD_VAR 0 1
2505: RET
// export function PrepareRussians ; var i , b , tmp , side , sr , depot , base ; begin
2506: LD_INT 0
2508: PPUSH
2509: PPUSH
2510: PPUSH
2511: PPUSH
2512: PPUSH
2513: PPUSH
2514: PPUSH
2515: PPUSH
// PrepareNature ( 0 , 0 , 3 , 0 , 0 , 0 , 0 , rusApe , 0 ) ;
2516: LD_INT 0
2518: PPUSH
2519: LD_INT 0
2521: PPUSH
2522: LD_INT 3
2524: PPUSH
2525: LD_INT 0
2527: PPUSH
2528: LD_INT 0
2530: PPUSH
2531: LD_INT 0
2533: PPUSH
2534: LD_INT 0
2536: PPUSH
2537: LD_INT 14
2539: PPUSH
2540: LD_INT 0
2542: PPUSH
2543: CALL 53249 0 9
// side := 3 ;
2547: LD_ADDR_VAR 0 5
2551: PUSH
2552: LD_INT 3
2554: ST_TO_ADDR
// SetTech ( tech_targTeleport , side , state_researched ) ;
2555: LD_INT 38
2557: PPUSH
2558: LD_VAR 0 5
2562: PPUSH
2563: LD_INT 2
2565: PPUSH
2566: CALL_OW 322
// SetTech ( tech_gun , side , state_researched ) ;
2570: LD_INT 39
2572: PPUSH
2573: LD_VAR 0 5
2577: PPUSH
2578: LD_INT 2
2580: PPUSH
2581: CALL_OW 322
// SetTech ( tech_advMet , side , state_researched ) ;
2585: LD_INT 34
2587: PPUSH
2588: LD_VAR 0 5
2592: PPUSH
2593: LD_INT 2
2595: PPUSH
2596: CALL_OW 322
// tmp := [ [ 0 , 208 , 163 , 4 , 0 , 0 ] , [ 3 , 194 , 161 , 1 , 0 , 0 ] , [ 17 , 190 , 161 , 1 , 0 , 0 ] , [ 5 , 200 , 145 , 3 , 0 , 0 ] , [ 32 , 192 , 144 , 3 , 0 , 0 ] , [ 26 , 216 , 172 , 3 , 0 , 0 ] , [ 26 , 218 , 176 , 3 , 0 , 0 ] , [ 29 , 182 , 149 , 3 , 0 , 0 ] , [ 8 , 201 , 171 , 0 , 10 , 11 ] , [ 32 , 188 , 167 , 0 , 0 , 0 ] , [ 32 , 202 , 179 , 0 , 0 , 0 ] , [ 32 , 209 , 182 , 0 , 0 , 0 ] , [ 32 , 220 , 183 , 5 , 0 , 0 ] , [ 32 , 225 , 181 , 5 , 0 , 0 ] , [ 26 , 220 , 174 , 5 , 0 , 0 ] , [ 1 , 84 , 128 , 4 , 0 , 0 ] , [ 3 , 68 , 121 , 1 , 0 , 0 ] , [ 19 , 72 , 125 , 5 , 0 , 0 ] , [ 18 , 68 , 124 , 0 , 0 , 0 ] , [ 24 , 64 , 121 , 1 , 0 , 0 ] , [ 17 , 65 , 118 , 2 , 0 , 0 ] , [ 21 , 68 , 117 , 3 , 0 , 0 ] , [ 8 , 68 , 130 , 1 , 14 , 10 ] , [ 8 , 67 , 110 , 2 , 11 , 12 ] , [ 28 , 85 , 108 , 2 , 0 , 0 ] , [ 28 , 85 , 124 , 2 , 0 , 0 ] , [ 30 , 97 , 119 , 2 , 0 , 0 ] , [ 5 , 111 , 138 , 4 , 0 , 0 ] , [ 33 , 104 , 130 , 3 , 0 , 0 ] , [ 33 , 110 , 142 , 5 , 0 , 0 ] , [ 33 , 91 , 131 , 5 , 0 , 0 ] , [ 33 , 107 , 157 , 5 , 0 , 0 ] , [ 33 , 104 , 160 , 5 , 0 , 0 ] , [ 33 , 101 , 162 , 5 , 0 , 0 ] , [ 32 , 87 , 157 , 5 , 0 , 0 ] , [ 32 , 105 , 158 , 5 , 0 , 0 ] , [ 33 , 91 , 118 , 4 , 0 , 0 ] , [ 33 , 89 , 107 , 4 , 0 , 0 ] , [ 5 , 86 , 96 , 3 , 0 , 0 ] , [ 33 , 91 , 102 , 4 , 0 , 0 ] , [ 32 , 80 , 95 , 3 , 0 , 0 ] , [ 28 , 77 , 105 , 3 , 0 , 0 ] , [ 28 , 85 , 113 , 3 , 0 , 0 ] , [ 28 , 55 , 97 , 3 , 0 , 0 ] , [ 28 , 88 , 128 , 3 , 0 , 0 ] , [ 32 , 69 , 101 , 2 , 0 , 0 ] , [ 1 , 34 , 23 , 4 , 0 , 0 ] , [ 8 , 25 , 4 , 3 , 11 , 10 ] , [ 8 , 15 , 4 , 2 , 14 , 12 ] , [ 29 , 55 , 35 , 2 , 0 , 0 ] , [ 29 , 24 , 44 , 2 , 0 , 0 ] , [ 34 , 34 , 32 , 4 , 0 , 0 ] , [ 3 , 14 , 16 , 1 , 0 , 0 ] , [ 24 , 10 , 16 , 1 , 0 , 0 ] , [ 21 , 11 , 13 , 2 , 0 , 0 ] , [ 18 , 14 , 12 , 3 , 0 , 0 ] , [ 16 , 14 , 19 , 0 , 0 , 0 ] , [ 17 , 18 , 20 , 5 , 0 , 0 ] , [ 28 , 10 , 5 , 1 , 0 , 0 ] , [ 28 , 8 , 8 , 1 , 0 , 0 ] , [ 26 , 19 , 2 , 1 , 0 , 0 ] , [ 26 , 30 , 2 , 1 , 0 , 0 ] , [ 5 , 59 , 20 , 4 , 0 , 0 ] , [ 32 , 60 , 24 , 4 , 0 , 0 ] , [ 32 , 61 , 45 , 5 , 0 , 0 ] , [ 32 , 52 , 51 , 5 , 0 , 0 ] , [ 33 , 56 , 51 , 5 , 0 , 0 ] , [ 33 , 62 , 49 , 5 , 0 , 0 ] , [ 33 , 41 , 47 , 5 , 0 , 0 ] , [ 33 , 33 , 52 , 5 , 0 , 0 ] , [ 5 , 31 , 40 , 0 , 0 , 0 ] , [ 33 , 65 , 37 , 5 , 0 , 0 ] , [ 33 , 63 , 29 , 4 , 0 , 0 ] , [ 33 , 54 , 11 , 4 , 0 , 0 ] , [ 33 , 56 , 15 , 4 , 0 , 0 ] , [ 33 , 51 , 6 , 4 , 0 , 0 ] , [ 26 , 39 , 25 , 0 , 0 , 0 ] , [ 26 , 37 , 21 , 0 , 0 , 0 ] , [ 32 , 35 , 17 , 4 , 0 , 0 ] , [ 33 , 35 , 28 , 4 , 0 , 0 ] , [ 33 , 28 , 46 , 5 , 0 , 0 ] , [ 33 , 31 , 6 , 4 , 0 , 0 ] , [ 26 , 54 , 38 , 4 , 0 , 0 ] , [ 33 , 207 , 167 , 3 , 0 , 0 ] , [ 30 , 43 , 2 , 4 , 0 , 0 ] ] ;
2600: LD_ADDR_VAR 0 4
2604: PUSH
2605: LD_INT 0
2607: PUSH
2608: LD_INT 208
2610: PUSH
2611: LD_INT 163
2613: PUSH
2614: LD_INT 4
2616: PUSH
2617: LD_INT 0
2619: PUSH
2620: LD_INT 0
2622: PUSH
2623: EMPTY
2624: LIST
2625: LIST
2626: LIST
2627: LIST
2628: LIST
2629: LIST
2630: PUSH
2631: LD_INT 3
2633: PUSH
2634: LD_INT 194
2636: PUSH
2637: LD_INT 161
2639: PUSH
2640: LD_INT 1
2642: PUSH
2643: LD_INT 0
2645: PUSH
2646: LD_INT 0
2648: PUSH
2649: EMPTY
2650: LIST
2651: LIST
2652: LIST
2653: LIST
2654: LIST
2655: LIST
2656: PUSH
2657: LD_INT 17
2659: PUSH
2660: LD_INT 190
2662: PUSH
2663: LD_INT 161
2665: PUSH
2666: LD_INT 1
2668: PUSH
2669: LD_INT 0
2671: PUSH
2672: LD_INT 0
2674: PUSH
2675: EMPTY
2676: LIST
2677: LIST
2678: LIST
2679: LIST
2680: LIST
2681: LIST
2682: PUSH
2683: LD_INT 5
2685: PUSH
2686: LD_INT 200
2688: PUSH
2689: LD_INT 145
2691: PUSH
2692: LD_INT 3
2694: PUSH
2695: LD_INT 0
2697: PUSH
2698: LD_INT 0
2700: PUSH
2701: EMPTY
2702: LIST
2703: LIST
2704: LIST
2705: LIST
2706: LIST
2707: LIST
2708: PUSH
2709: LD_INT 32
2711: PUSH
2712: LD_INT 192
2714: PUSH
2715: LD_INT 144
2717: PUSH
2718: LD_INT 3
2720: PUSH
2721: LD_INT 0
2723: PUSH
2724: LD_INT 0
2726: PUSH
2727: EMPTY
2728: LIST
2729: LIST
2730: LIST
2731: LIST
2732: LIST
2733: LIST
2734: PUSH
2735: LD_INT 26
2737: PUSH
2738: LD_INT 216
2740: PUSH
2741: LD_INT 172
2743: PUSH
2744: LD_INT 3
2746: PUSH
2747: LD_INT 0
2749: PUSH
2750: LD_INT 0
2752: PUSH
2753: EMPTY
2754: LIST
2755: LIST
2756: LIST
2757: LIST
2758: LIST
2759: LIST
2760: PUSH
2761: LD_INT 26
2763: PUSH
2764: LD_INT 218
2766: PUSH
2767: LD_INT 176
2769: PUSH
2770: LD_INT 3
2772: PUSH
2773: LD_INT 0
2775: PUSH
2776: LD_INT 0
2778: PUSH
2779: EMPTY
2780: LIST
2781: LIST
2782: LIST
2783: LIST
2784: LIST
2785: LIST
2786: PUSH
2787: LD_INT 29
2789: PUSH
2790: LD_INT 182
2792: PUSH
2793: LD_INT 149
2795: PUSH
2796: LD_INT 3
2798: PUSH
2799: LD_INT 0
2801: PUSH
2802: LD_INT 0
2804: PUSH
2805: EMPTY
2806: LIST
2807: LIST
2808: LIST
2809: LIST
2810: LIST
2811: LIST
2812: PUSH
2813: LD_INT 8
2815: PUSH
2816: LD_INT 201
2818: PUSH
2819: LD_INT 171
2821: PUSH
2822: LD_INT 0
2824: PUSH
2825: LD_INT 10
2827: PUSH
2828: LD_INT 11
2830: PUSH
2831: EMPTY
2832: LIST
2833: LIST
2834: LIST
2835: LIST
2836: LIST
2837: LIST
2838: PUSH
2839: LD_INT 32
2841: PUSH
2842: LD_INT 188
2844: PUSH
2845: LD_INT 167
2847: PUSH
2848: LD_INT 0
2850: PUSH
2851: LD_INT 0
2853: PUSH
2854: LD_INT 0
2856: PUSH
2857: EMPTY
2858: LIST
2859: LIST
2860: LIST
2861: LIST
2862: LIST
2863: LIST
2864: PUSH
2865: LD_INT 32
2867: PUSH
2868: LD_INT 202
2870: PUSH
2871: LD_INT 179
2873: PUSH
2874: LD_INT 0
2876: PUSH
2877: LD_INT 0
2879: PUSH
2880: LD_INT 0
2882: PUSH
2883: EMPTY
2884: LIST
2885: LIST
2886: LIST
2887: LIST
2888: LIST
2889: LIST
2890: PUSH
2891: LD_INT 32
2893: PUSH
2894: LD_INT 209
2896: PUSH
2897: LD_INT 182
2899: PUSH
2900: LD_INT 0
2902: PUSH
2903: LD_INT 0
2905: PUSH
2906: LD_INT 0
2908: PUSH
2909: EMPTY
2910: LIST
2911: LIST
2912: LIST
2913: LIST
2914: LIST
2915: LIST
2916: PUSH
2917: LD_INT 32
2919: PUSH
2920: LD_INT 220
2922: PUSH
2923: LD_INT 183
2925: PUSH
2926: LD_INT 5
2928: PUSH
2929: LD_INT 0
2931: PUSH
2932: LD_INT 0
2934: PUSH
2935: EMPTY
2936: LIST
2937: LIST
2938: LIST
2939: LIST
2940: LIST
2941: LIST
2942: PUSH
2943: LD_INT 32
2945: PUSH
2946: LD_INT 225
2948: PUSH
2949: LD_INT 181
2951: PUSH
2952: LD_INT 5
2954: PUSH
2955: LD_INT 0
2957: PUSH
2958: LD_INT 0
2960: PUSH
2961: EMPTY
2962: LIST
2963: LIST
2964: LIST
2965: LIST
2966: LIST
2967: LIST
2968: PUSH
2969: LD_INT 26
2971: PUSH
2972: LD_INT 220
2974: PUSH
2975: LD_INT 174
2977: PUSH
2978: LD_INT 5
2980: PUSH
2981: LD_INT 0
2983: PUSH
2984: LD_INT 0
2986: PUSH
2987: EMPTY
2988: LIST
2989: LIST
2990: LIST
2991: LIST
2992: LIST
2993: LIST
2994: PUSH
2995: LD_INT 1
2997: PUSH
2998: LD_INT 84
3000: PUSH
3001: LD_INT 128
3003: PUSH
3004: LD_INT 4
3006: PUSH
3007: LD_INT 0
3009: PUSH
3010: LD_INT 0
3012: PUSH
3013: EMPTY
3014: LIST
3015: LIST
3016: LIST
3017: LIST
3018: LIST
3019: LIST
3020: PUSH
3021: LD_INT 3
3023: PUSH
3024: LD_INT 68
3026: PUSH
3027: LD_INT 121
3029: PUSH
3030: LD_INT 1
3032: PUSH
3033: LD_INT 0
3035: PUSH
3036: LD_INT 0
3038: PUSH
3039: EMPTY
3040: LIST
3041: LIST
3042: LIST
3043: LIST
3044: LIST
3045: LIST
3046: PUSH
3047: LD_INT 19
3049: PUSH
3050: LD_INT 72
3052: PUSH
3053: LD_INT 125
3055: PUSH
3056: LD_INT 5
3058: PUSH
3059: LD_INT 0
3061: PUSH
3062: LD_INT 0
3064: PUSH
3065: EMPTY
3066: LIST
3067: LIST
3068: LIST
3069: LIST
3070: LIST
3071: LIST
3072: PUSH
3073: LD_INT 18
3075: PUSH
3076: LD_INT 68
3078: PUSH
3079: LD_INT 124
3081: PUSH
3082: LD_INT 0
3084: PUSH
3085: LD_INT 0
3087: PUSH
3088: LD_INT 0
3090: PUSH
3091: EMPTY
3092: LIST
3093: LIST
3094: LIST
3095: LIST
3096: LIST
3097: LIST
3098: PUSH
3099: LD_INT 24
3101: PUSH
3102: LD_INT 64
3104: PUSH
3105: LD_INT 121
3107: PUSH
3108: LD_INT 1
3110: PUSH
3111: LD_INT 0
3113: PUSH
3114: LD_INT 0
3116: PUSH
3117: EMPTY
3118: LIST
3119: LIST
3120: LIST
3121: LIST
3122: LIST
3123: LIST
3124: PUSH
3125: LD_INT 17
3127: PUSH
3128: LD_INT 65
3130: PUSH
3131: LD_INT 118
3133: PUSH
3134: LD_INT 2
3136: PUSH
3137: LD_INT 0
3139: PUSH
3140: LD_INT 0
3142: PUSH
3143: EMPTY
3144: LIST
3145: LIST
3146: LIST
3147: LIST
3148: LIST
3149: LIST
3150: PUSH
3151: LD_INT 21
3153: PUSH
3154: LD_INT 68
3156: PUSH
3157: LD_INT 117
3159: PUSH
3160: LD_INT 3
3162: PUSH
3163: LD_INT 0
3165: PUSH
3166: LD_INT 0
3168: PUSH
3169: EMPTY
3170: LIST
3171: LIST
3172: LIST
3173: LIST
3174: LIST
3175: LIST
3176: PUSH
3177: LD_INT 8
3179: PUSH
3180: LD_INT 68
3182: PUSH
3183: LD_INT 130
3185: PUSH
3186: LD_INT 1
3188: PUSH
3189: LD_INT 14
3191: PUSH
3192: LD_INT 10
3194: PUSH
3195: EMPTY
3196: LIST
3197: LIST
3198: LIST
3199: LIST
3200: LIST
3201: LIST
3202: PUSH
3203: LD_INT 8
3205: PUSH
3206: LD_INT 67
3208: PUSH
3209: LD_INT 110
3211: PUSH
3212: LD_INT 2
3214: PUSH
3215: LD_INT 11
3217: PUSH
3218: LD_INT 12
3220: PUSH
3221: EMPTY
3222: LIST
3223: LIST
3224: LIST
3225: LIST
3226: LIST
3227: LIST
3228: PUSH
3229: LD_INT 28
3231: PUSH
3232: LD_INT 85
3234: PUSH
3235: LD_INT 108
3237: PUSH
3238: LD_INT 2
3240: PUSH
3241: LD_INT 0
3243: PUSH
3244: LD_INT 0
3246: PUSH
3247: EMPTY
3248: LIST
3249: LIST
3250: LIST
3251: LIST
3252: LIST
3253: LIST
3254: PUSH
3255: LD_INT 28
3257: PUSH
3258: LD_INT 85
3260: PUSH
3261: LD_INT 124
3263: PUSH
3264: LD_INT 2
3266: PUSH
3267: LD_INT 0
3269: PUSH
3270: LD_INT 0
3272: PUSH
3273: EMPTY
3274: LIST
3275: LIST
3276: LIST
3277: LIST
3278: LIST
3279: LIST
3280: PUSH
3281: LD_INT 30
3283: PUSH
3284: LD_INT 97
3286: PUSH
3287: LD_INT 119
3289: PUSH
3290: LD_INT 2
3292: PUSH
3293: LD_INT 0
3295: PUSH
3296: LD_INT 0
3298: PUSH
3299: EMPTY
3300: LIST
3301: LIST
3302: LIST
3303: LIST
3304: LIST
3305: LIST
3306: PUSH
3307: LD_INT 5
3309: PUSH
3310: LD_INT 111
3312: PUSH
3313: LD_INT 138
3315: PUSH
3316: LD_INT 4
3318: PUSH
3319: LD_INT 0
3321: PUSH
3322: LD_INT 0
3324: PUSH
3325: EMPTY
3326: LIST
3327: LIST
3328: LIST
3329: LIST
3330: LIST
3331: LIST
3332: PUSH
3333: LD_INT 33
3335: PUSH
3336: LD_INT 104
3338: PUSH
3339: LD_INT 130
3341: PUSH
3342: LD_INT 3
3344: PUSH
3345: LD_INT 0
3347: PUSH
3348: LD_INT 0
3350: PUSH
3351: EMPTY
3352: LIST
3353: LIST
3354: LIST
3355: LIST
3356: LIST
3357: LIST
3358: PUSH
3359: LD_INT 33
3361: PUSH
3362: LD_INT 110
3364: PUSH
3365: LD_INT 142
3367: PUSH
3368: LD_INT 5
3370: PUSH
3371: LD_INT 0
3373: PUSH
3374: LD_INT 0
3376: PUSH
3377: EMPTY
3378: LIST
3379: LIST
3380: LIST
3381: LIST
3382: LIST
3383: LIST
3384: PUSH
3385: LD_INT 33
3387: PUSH
3388: LD_INT 91
3390: PUSH
3391: LD_INT 131
3393: PUSH
3394: LD_INT 5
3396: PUSH
3397: LD_INT 0
3399: PUSH
3400: LD_INT 0
3402: PUSH
3403: EMPTY
3404: LIST
3405: LIST
3406: LIST
3407: LIST
3408: LIST
3409: LIST
3410: PUSH
3411: LD_INT 33
3413: PUSH
3414: LD_INT 107
3416: PUSH
3417: LD_INT 157
3419: PUSH
3420: LD_INT 5
3422: PUSH
3423: LD_INT 0
3425: PUSH
3426: LD_INT 0
3428: PUSH
3429: EMPTY
3430: LIST
3431: LIST
3432: LIST
3433: LIST
3434: LIST
3435: LIST
3436: PUSH
3437: LD_INT 33
3439: PUSH
3440: LD_INT 104
3442: PUSH
3443: LD_INT 160
3445: PUSH
3446: LD_INT 5
3448: PUSH
3449: LD_INT 0
3451: PUSH
3452: LD_INT 0
3454: PUSH
3455: EMPTY
3456: LIST
3457: LIST
3458: LIST
3459: LIST
3460: LIST
3461: LIST
3462: PUSH
3463: LD_INT 33
3465: PUSH
3466: LD_INT 101
3468: PUSH
3469: LD_INT 162
3471: PUSH
3472: LD_INT 5
3474: PUSH
3475: LD_INT 0
3477: PUSH
3478: LD_INT 0
3480: PUSH
3481: EMPTY
3482: LIST
3483: LIST
3484: LIST
3485: LIST
3486: LIST
3487: LIST
3488: PUSH
3489: LD_INT 32
3491: PUSH
3492: LD_INT 87
3494: PUSH
3495: LD_INT 157
3497: PUSH
3498: LD_INT 5
3500: PUSH
3501: LD_INT 0
3503: PUSH
3504: LD_INT 0
3506: PUSH
3507: EMPTY
3508: LIST
3509: LIST
3510: LIST
3511: LIST
3512: LIST
3513: LIST
3514: PUSH
3515: LD_INT 32
3517: PUSH
3518: LD_INT 105
3520: PUSH
3521: LD_INT 158
3523: PUSH
3524: LD_INT 5
3526: PUSH
3527: LD_INT 0
3529: PUSH
3530: LD_INT 0
3532: PUSH
3533: EMPTY
3534: LIST
3535: LIST
3536: LIST
3537: LIST
3538: LIST
3539: LIST
3540: PUSH
3541: LD_INT 33
3543: PUSH
3544: LD_INT 91
3546: PUSH
3547: LD_INT 118
3549: PUSH
3550: LD_INT 4
3552: PUSH
3553: LD_INT 0
3555: PUSH
3556: LD_INT 0
3558: PUSH
3559: EMPTY
3560: LIST
3561: LIST
3562: LIST
3563: LIST
3564: LIST
3565: LIST
3566: PUSH
3567: LD_INT 33
3569: PUSH
3570: LD_INT 89
3572: PUSH
3573: LD_INT 107
3575: PUSH
3576: LD_INT 4
3578: PUSH
3579: LD_INT 0
3581: PUSH
3582: LD_INT 0
3584: PUSH
3585: EMPTY
3586: LIST
3587: LIST
3588: LIST
3589: LIST
3590: LIST
3591: LIST
3592: PUSH
3593: LD_INT 5
3595: PUSH
3596: LD_INT 86
3598: PUSH
3599: LD_INT 96
3601: PUSH
3602: LD_INT 3
3604: PUSH
3605: LD_INT 0
3607: PUSH
3608: LD_INT 0
3610: PUSH
3611: EMPTY
3612: LIST
3613: LIST
3614: LIST
3615: LIST
3616: LIST
3617: LIST
3618: PUSH
3619: LD_INT 33
3621: PUSH
3622: LD_INT 91
3624: PUSH
3625: LD_INT 102
3627: PUSH
3628: LD_INT 4
3630: PUSH
3631: LD_INT 0
3633: PUSH
3634: LD_INT 0
3636: PUSH
3637: EMPTY
3638: LIST
3639: LIST
3640: LIST
3641: LIST
3642: LIST
3643: LIST
3644: PUSH
3645: LD_INT 32
3647: PUSH
3648: LD_INT 80
3650: PUSH
3651: LD_INT 95
3653: PUSH
3654: LD_INT 3
3656: PUSH
3657: LD_INT 0
3659: PUSH
3660: LD_INT 0
3662: PUSH
3663: EMPTY
3664: LIST
3665: LIST
3666: LIST
3667: LIST
3668: LIST
3669: LIST
3670: PUSH
3671: LD_INT 28
3673: PUSH
3674: LD_INT 77
3676: PUSH
3677: LD_INT 105
3679: PUSH
3680: LD_INT 3
3682: PUSH
3683: LD_INT 0
3685: PUSH
3686: LD_INT 0
3688: PUSH
3689: EMPTY
3690: LIST
3691: LIST
3692: LIST
3693: LIST
3694: LIST
3695: LIST
3696: PUSH
3697: LD_INT 28
3699: PUSH
3700: LD_INT 85
3702: PUSH
3703: LD_INT 113
3705: PUSH
3706: LD_INT 3
3708: PUSH
3709: LD_INT 0
3711: PUSH
3712: LD_INT 0
3714: PUSH
3715: EMPTY
3716: LIST
3717: LIST
3718: LIST
3719: LIST
3720: LIST
3721: LIST
3722: PUSH
3723: LD_INT 28
3725: PUSH
3726: LD_INT 55
3728: PUSH
3729: LD_INT 97
3731: PUSH
3732: LD_INT 3
3734: PUSH
3735: LD_INT 0
3737: PUSH
3738: LD_INT 0
3740: PUSH
3741: EMPTY
3742: LIST
3743: LIST
3744: LIST
3745: LIST
3746: LIST
3747: LIST
3748: PUSH
3749: LD_INT 28
3751: PUSH
3752: LD_INT 88
3754: PUSH
3755: LD_INT 128
3757: PUSH
3758: LD_INT 3
3760: PUSH
3761: LD_INT 0
3763: PUSH
3764: LD_INT 0
3766: PUSH
3767: EMPTY
3768: LIST
3769: LIST
3770: LIST
3771: LIST
3772: LIST
3773: LIST
3774: PUSH
3775: LD_INT 32
3777: PUSH
3778: LD_INT 69
3780: PUSH
3781: LD_INT 101
3783: PUSH
3784: LD_INT 2
3786: PUSH
3787: LD_INT 0
3789: PUSH
3790: LD_INT 0
3792: PUSH
3793: EMPTY
3794: LIST
3795: LIST
3796: LIST
3797: LIST
3798: LIST
3799: LIST
3800: PUSH
3801: LD_INT 1
3803: PUSH
3804: LD_INT 34
3806: PUSH
3807: LD_INT 23
3809: PUSH
3810: LD_INT 4
3812: PUSH
3813: LD_INT 0
3815: PUSH
3816: LD_INT 0
3818: PUSH
3819: EMPTY
3820: LIST
3821: LIST
3822: LIST
3823: LIST
3824: LIST
3825: LIST
3826: PUSH
3827: LD_INT 8
3829: PUSH
3830: LD_INT 25
3832: PUSH
3833: LD_INT 4
3835: PUSH
3836: LD_INT 3
3838: PUSH
3839: LD_INT 11
3841: PUSH
3842: LD_INT 10
3844: PUSH
3845: EMPTY
3846: LIST
3847: LIST
3848: LIST
3849: LIST
3850: LIST
3851: LIST
3852: PUSH
3853: LD_INT 8
3855: PUSH
3856: LD_INT 15
3858: PUSH
3859: LD_INT 4
3861: PUSH
3862: LD_INT 2
3864: PUSH
3865: LD_INT 14
3867: PUSH
3868: LD_INT 12
3870: PUSH
3871: EMPTY
3872: LIST
3873: LIST
3874: LIST
3875: LIST
3876: LIST
3877: LIST
3878: PUSH
3879: LD_INT 29
3881: PUSH
3882: LD_INT 55
3884: PUSH
3885: LD_INT 35
3887: PUSH
3888: LD_INT 2
3890: PUSH
3891: LD_INT 0
3893: PUSH
3894: LD_INT 0
3896: PUSH
3897: EMPTY
3898: LIST
3899: LIST
3900: LIST
3901: LIST
3902: LIST
3903: LIST
3904: PUSH
3905: LD_INT 29
3907: PUSH
3908: LD_INT 24
3910: PUSH
3911: LD_INT 44
3913: PUSH
3914: LD_INT 2
3916: PUSH
3917: LD_INT 0
3919: PUSH
3920: LD_INT 0
3922: PUSH
3923: EMPTY
3924: LIST
3925: LIST
3926: LIST
3927: LIST
3928: LIST
3929: LIST
3930: PUSH
3931: LD_INT 34
3933: PUSH
3934: LD_INT 34
3936: PUSH
3937: LD_INT 32
3939: PUSH
3940: LD_INT 4
3942: PUSH
3943: LD_INT 0
3945: PUSH
3946: LD_INT 0
3948: PUSH
3949: EMPTY
3950: LIST
3951: LIST
3952: LIST
3953: LIST
3954: LIST
3955: LIST
3956: PUSH
3957: LD_INT 3
3959: PUSH
3960: LD_INT 14
3962: PUSH
3963: LD_INT 16
3965: PUSH
3966: LD_INT 1
3968: PUSH
3969: LD_INT 0
3971: PUSH
3972: LD_INT 0
3974: PUSH
3975: EMPTY
3976: LIST
3977: LIST
3978: LIST
3979: LIST
3980: LIST
3981: LIST
3982: PUSH
3983: LD_INT 24
3985: PUSH
3986: LD_INT 10
3988: PUSH
3989: LD_INT 16
3991: PUSH
3992: LD_INT 1
3994: PUSH
3995: LD_INT 0
3997: PUSH
3998: LD_INT 0
4000: PUSH
4001: EMPTY
4002: LIST
4003: LIST
4004: LIST
4005: LIST
4006: LIST
4007: LIST
4008: PUSH
4009: LD_INT 21
4011: PUSH
4012: LD_INT 11
4014: PUSH
4015: LD_INT 13
4017: PUSH
4018: LD_INT 2
4020: PUSH
4021: LD_INT 0
4023: PUSH
4024: LD_INT 0
4026: PUSH
4027: EMPTY
4028: LIST
4029: LIST
4030: LIST
4031: LIST
4032: LIST
4033: LIST
4034: PUSH
4035: LD_INT 18
4037: PUSH
4038: LD_INT 14
4040: PUSH
4041: LD_INT 12
4043: PUSH
4044: LD_INT 3
4046: PUSH
4047: LD_INT 0
4049: PUSH
4050: LD_INT 0
4052: PUSH
4053: EMPTY
4054: LIST
4055: LIST
4056: LIST
4057: LIST
4058: LIST
4059: LIST
4060: PUSH
4061: LD_INT 16
4063: PUSH
4064: LD_INT 14
4066: PUSH
4067: LD_INT 19
4069: PUSH
4070: LD_INT 0
4072: PUSH
4073: LD_INT 0
4075: PUSH
4076: LD_INT 0
4078: PUSH
4079: EMPTY
4080: LIST
4081: LIST
4082: LIST
4083: LIST
4084: LIST
4085: LIST
4086: PUSH
4087: LD_INT 17
4089: PUSH
4090: LD_INT 18
4092: PUSH
4093: LD_INT 20
4095: PUSH
4096: LD_INT 5
4098: PUSH
4099: LD_INT 0
4101: PUSH
4102: LD_INT 0
4104: PUSH
4105: EMPTY
4106: LIST
4107: LIST
4108: LIST
4109: LIST
4110: LIST
4111: LIST
4112: PUSH
4113: LD_INT 28
4115: PUSH
4116: LD_INT 10
4118: PUSH
4119: LD_INT 5
4121: PUSH
4122: LD_INT 1
4124: PUSH
4125: LD_INT 0
4127: PUSH
4128: LD_INT 0
4130: PUSH
4131: EMPTY
4132: LIST
4133: LIST
4134: LIST
4135: LIST
4136: LIST
4137: LIST
4138: PUSH
4139: LD_INT 28
4141: PUSH
4142: LD_INT 8
4144: PUSH
4145: LD_INT 8
4147: PUSH
4148: LD_INT 1
4150: PUSH
4151: LD_INT 0
4153: PUSH
4154: LD_INT 0
4156: PUSH
4157: EMPTY
4158: LIST
4159: LIST
4160: LIST
4161: LIST
4162: LIST
4163: LIST
4164: PUSH
4165: LD_INT 26
4167: PUSH
4168: LD_INT 19
4170: PUSH
4171: LD_INT 2
4173: PUSH
4174: LD_INT 1
4176: PUSH
4177: LD_INT 0
4179: PUSH
4180: LD_INT 0
4182: PUSH
4183: EMPTY
4184: LIST
4185: LIST
4186: LIST
4187: LIST
4188: LIST
4189: LIST
4190: PUSH
4191: LD_INT 26
4193: PUSH
4194: LD_INT 30
4196: PUSH
4197: LD_INT 2
4199: PUSH
4200: LD_INT 1
4202: PUSH
4203: LD_INT 0
4205: PUSH
4206: LD_INT 0
4208: PUSH
4209: EMPTY
4210: LIST
4211: LIST
4212: LIST
4213: LIST
4214: LIST
4215: LIST
4216: PUSH
4217: LD_INT 5
4219: PUSH
4220: LD_INT 59
4222: PUSH
4223: LD_INT 20
4225: PUSH
4226: LD_INT 4
4228: PUSH
4229: LD_INT 0
4231: PUSH
4232: LD_INT 0
4234: PUSH
4235: EMPTY
4236: LIST
4237: LIST
4238: LIST
4239: LIST
4240: LIST
4241: LIST
4242: PUSH
4243: LD_INT 32
4245: PUSH
4246: LD_INT 60
4248: PUSH
4249: LD_INT 24
4251: PUSH
4252: LD_INT 4
4254: PUSH
4255: LD_INT 0
4257: PUSH
4258: LD_INT 0
4260: PUSH
4261: EMPTY
4262: LIST
4263: LIST
4264: LIST
4265: LIST
4266: LIST
4267: LIST
4268: PUSH
4269: LD_INT 32
4271: PUSH
4272: LD_INT 61
4274: PUSH
4275: LD_INT 45
4277: PUSH
4278: LD_INT 5
4280: PUSH
4281: LD_INT 0
4283: PUSH
4284: LD_INT 0
4286: PUSH
4287: EMPTY
4288: LIST
4289: LIST
4290: LIST
4291: LIST
4292: LIST
4293: LIST
4294: PUSH
4295: LD_INT 32
4297: PUSH
4298: LD_INT 52
4300: PUSH
4301: LD_INT 51
4303: PUSH
4304: LD_INT 5
4306: PUSH
4307: LD_INT 0
4309: PUSH
4310: LD_INT 0
4312: PUSH
4313: EMPTY
4314: LIST
4315: LIST
4316: LIST
4317: LIST
4318: LIST
4319: LIST
4320: PUSH
4321: LD_INT 33
4323: PUSH
4324: LD_INT 56
4326: PUSH
4327: LD_INT 51
4329: PUSH
4330: LD_INT 5
4332: PUSH
4333: LD_INT 0
4335: PUSH
4336: LD_INT 0
4338: PUSH
4339: EMPTY
4340: LIST
4341: LIST
4342: LIST
4343: LIST
4344: LIST
4345: LIST
4346: PUSH
4347: LD_INT 33
4349: PUSH
4350: LD_INT 62
4352: PUSH
4353: LD_INT 49
4355: PUSH
4356: LD_INT 5
4358: PUSH
4359: LD_INT 0
4361: PUSH
4362: LD_INT 0
4364: PUSH
4365: EMPTY
4366: LIST
4367: LIST
4368: LIST
4369: LIST
4370: LIST
4371: LIST
4372: PUSH
4373: LD_INT 33
4375: PUSH
4376: LD_INT 41
4378: PUSH
4379: LD_INT 47
4381: PUSH
4382: LD_INT 5
4384: PUSH
4385: LD_INT 0
4387: PUSH
4388: LD_INT 0
4390: PUSH
4391: EMPTY
4392: LIST
4393: LIST
4394: LIST
4395: LIST
4396: LIST
4397: LIST
4398: PUSH
4399: LD_INT 33
4401: PUSH
4402: LD_INT 33
4404: PUSH
4405: LD_INT 52
4407: PUSH
4408: LD_INT 5
4410: PUSH
4411: LD_INT 0
4413: PUSH
4414: LD_INT 0
4416: PUSH
4417: EMPTY
4418: LIST
4419: LIST
4420: LIST
4421: LIST
4422: LIST
4423: LIST
4424: PUSH
4425: LD_INT 5
4427: PUSH
4428: LD_INT 31
4430: PUSH
4431: LD_INT 40
4433: PUSH
4434: LD_INT 0
4436: PUSH
4437: LD_INT 0
4439: PUSH
4440: LD_INT 0
4442: PUSH
4443: EMPTY
4444: LIST
4445: LIST
4446: LIST
4447: LIST
4448: LIST
4449: LIST
4450: PUSH
4451: LD_INT 33
4453: PUSH
4454: LD_INT 65
4456: PUSH
4457: LD_INT 37
4459: PUSH
4460: LD_INT 5
4462: PUSH
4463: LD_INT 0
4465: PUSH
4466: LD_INT 0
4468: PUSH
4469: EMPTY
4470: LIST
4471: LIST
4472: LIST
4473: LIST
4474: LIST
4475: LIST
4476: PUSH
4477: LD_INT 33
4479: PUSH
4480: LD_INT 63
4482: PUSH
4483: LD_INT 29
4485: PUSH
4486: LD_INT 4
4488: PUSH
4489: LD_INT 0
4491: PUSH
4492: LD_INT 0
4494: PUSH
4495: EMPTY
4496: LIST
4497: LIST
4498: LIST
4499: LIST
4500: LIST
4501: LIST
4502: PUSH
4503: LD_INT 33
4505: PUSH
4506: LD_INT 54
4508: PUSH
4509: LD_INT 11
4511: PUSH
4512: LD_INT 4
4514: PUSH
4515: LD_INT 0
4517: PUSH
4518: LD_INT 0
4520: PUSH
4521: EMPTY
4522: LIST
4523: LIST
4524: LIST
4525: LIST
4526: LIST
4527: LIST
4528: PUSH
4529: LD_INT 33
4531: PUSH
4532: LD_INT 56
4534: PUSH
4535: LD_INT 15
4537: PUSH
4538: LD_INT 4
4540: PUSH
4541: LD_INT 0
4543: PUSH
4544: LD_INT 0
4546: PUSH
4547: EMPTY
4548: LIST
4549: LIST
4550: LIST
4551: LIST
4552: LIST
4553: LIST
4554: PUSH
4555: LD_INT 33
4557: PUSH
4558: LD_INT 51
4560: PUSH
4561: LD_INT 6
4563: PUSH
4564: LD_INT 4
4566: PUSH
4567: LD_INT 0
4569: PUSH
4570: LD_INT 0
4572: PUSH
4573: EMPTY
4574: LIST
4575: LIST
4576: LIST
4577: LIST
4578: LIST
4579: LIST
4580: PUSH
4581: LD_INT 26
4583: PUSH
4584: LD_INT 39
4586: PUSH
4587: LD_INT 25
4589: PUSH
4590: LD_INT 0
4592: PUSH
4593: LD_INT 0
4595: PUSH
4596: LD_INT 0
4598: PUSH
4599: EMPTY
4600: LIST
4601: LIST
4602: LIST
4603: LIST
4604: LIST
4605: LIST
4606: PUSH
4607: LD_INT 26
4609: PUSH
4610: LD_INT 37
4612: PUSH
4613: LD_INT 21
4615: PUSH
4616: LD_INT 0
4618: PUSH
4619: LD_INT 0
4621: PUSH
4622: LD_INT 0
4624: PUSH
4625: EMPTY
4626: LIST
4627: LIST
4628: LIST
4629: LIST
4630: LIST
4631: LIST
4632: PUSH
4633: LD_INT 32
4635: PUSH
4636: LD_INT 35
4638: PUSH
4639: LD_INT 17
4641: PUSH
4642: LD_INT 4
4644: PUSH
4645: LD_INT 0
4647: PUSH
4648: LD_INT 0
4650: PUSH
4651: EMPTY
4652: LIST
4653: LIST
4654: LIST
4655: LIST
4656: LIST
4657: LIST
4658: PUSH
4659: LD_INT 33
4661: PUSH
4662: LD_INT 35
4664: PUSH
4665: LD_INT 28
4667: PUSH
4668: LD_INT 4
4670: PUSH
4671: LD_INT 0
4673: PUSH
4674: LD_INT 0
4676: PUSH
4677: EMPTY
4678: LIST
4679: LIST
4680: LIST
4681: LIST
4682: LIST
4683: LIST
4684: PUSH
4685: LD_INT 33
4687: PUSH
4688: LD_INT 28
4690: PUSH
4691: LD_INT 46
4693: PUSH
4694: LD_INT 5
4696: PUSH
4697: LD_INT 0
4699: PUSH
4700: LD_INT 0
4702: PUSH
4703: EMPTY
4704: LIST
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: PUSH
4711: LD_INT 33
4713: PUSH
4714: LD_INT 31
4716: PUSH
4717: LD_INT 6
4719: PUSH
4720: LD_INT 4
4722: PUSH
4723: LD_INT 0
4725: PUSH
4726: LD_INT 0
4728: PUSH
4729: EMPTY
4730: LIST
4731: LIST
4732: LIST
4733: LIST
4734: LIST
4735: LIST
4736: PUSH
4737: LD_INT 26
4739: PUSH
4740: LD_INT 54
4742: PUSH
4743: LD_INT 38
4745: PUSH
4746: LD_INT 4
4748: PUSH
4749: LD_INT 0
4751: PUSH
4752: LD_INT 0
4754: PUSH
4755: EMPTY
4756: LIST
4757: LIST
4758: LIST
4759: LIST
4760: LIST
4761: LIST
4762: PUSH
4763: LD_INT 33
4765: PUSH
4766: LD_INT 207
4768: PUSH
4769: LD_INT 167
4771: PUSH
4772: LD_INT 3
4774: PUSH
4775: LD_INT 0
4777: PUSH
4778: LD_INT 0
4780: PUSH
4781: EMPTY
4782: LIST
4783: LIST
4784: LIST
4785: LIST
4786: LIST
4787: LIST
4788: PUSH
4789: LD_INT 30
4791: PUSH
4792: LD_INT 43
4794: PUSH
4795: LD_INT 2
4797: PUSH
4798: LD_INT 4
4800: PUSH
4801: LD_INT 0
4803: PUSH
4804: LD_INT 0
4806: PUSH
4807: EMPTY
4808: LIST
4809: LIST
4810: LIST
4811: LIST
4812: LIST
4813: LIST
4814: PUSH
4815: EMPTY
4816: LIST
4817: LIST
4818: LIST
4819: LIST
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: LIST
4828: LIST
4829: LIST
4830: LIST
4831: LIST
4832: LIST
4833: LIST
4834: LIST
4835: LIST
4836: LIST
4837: LIST
4838: LIST
4839: LIST
4840: LIST
4841: LIST
4842: LIST
4843: LIST
4844: LIST
4845: LIST
4846: LIST
4847: LIST
4848: LIST
4849: LIST
4850: LIST
4851: LIST
4852: LIST
4853: LIST
4854: LIST
4855: LIST
4856: LIST
4857: LIST
4858: LIST
4859: LIST
4860: LIST
4861: LIST
4862: LIST
4863: LIST
4864: LIST
4865: LIST
4866: LIST
4867: LIST
4868: LIST
4869: LIST
4870: LIST
4871: LIST
4872: LIST
4873: LIST
4874: LIST
4875: LIST
4876: LIST
4877: LIST
4878: LIST
4879: LIST
4880: LIST
4881: LIST
4882: LIST
4883: LIST
4884: LIST
4885: LIST
4886: LIST
4887: LIST
4888: LIST
4889: LIST
4890: LIST
4891: LIST
4892: LIST
4893: LIST
4894: LIST
4895: LIST
4896: LIST
4897: LIST
4898: LIST
4899: LIST
4900: LIST
4901: ST_TO_ADDR
// for i in tmp do
4902: LD_ADDR_VAR 0 2
4906: PUSH
4907: LD_VAR 0 4
4911: PUSH
4912: FOR_IN
4913: IFFALSE 5144
// begin uc_side := side ;
4915: LD_ADDR_OWVAR 20
4919: PUSH
4920: LD_VAR 0 5
4924: ST_TO_ADDR
// uc_nation := nation_russian ;
4925: LD_ADDR_OWVAR 21
4929: PUSH
4930: LD_INT 3
4932: ST_TO_ADDR
// bc_type := i [ 1 ] ;
4933: LD_ADDR_OWVAR 42
4937: PUSH
4938: LD_VAR 0 2
4942: PUSH
4943: LD_INT 1
4945: ARRAY
4946: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
4947: LD_ADDR_OWVAR 43
4951: PUSH
4952: LD_INT 5
4954: PPUSH
4955: LD_INT 6
4957: PPUSH
4958: CALL_OW 12
4962: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
4963: LD_ADDR_OWVAR 44
4967: PUSH
4968: LD_VAR 0 2
4972: PUSH
4973: LD_INT 5
4975: ARRAY
4976: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
4977: LD_ADDR_OWVAR 45
4981: PUSH
4982: LD_VAR 0 2
4986: PUSH
4987: LD_INT 6
4989: ARRAY
4990: ST_TO_ADDR
// sr := 0 ;
4991: LD_ADDR_VAR 0 6
4995: PUSH
4996: LD_INT 0
4998: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
4999: LD_VAR 0 2
5003: PUSH
5004: LD_INT 1
5006: ARRAY
5007: PUSH
5008: LD_INT 29
5010: EQUAL
5011: IFFALSE 5023
// sr := mat_oil else
5013: LD_ADDR_VAR 0 6
5017: PUSH
5018: LD_INT 2
5020: ST_TO_ADDR
5021: GO 5045
// if i [ 1 ] = b_siberite_mine then
5023: LD_VAR 0 2
5027: PUSH
5028: LD_INT 1
5030: ARRAY
5031: PUSH
5032: LD_INT 30
5034: EQUAL
5035: IFFALSE 5045
// sr := mat_siberit ;
5037: LD_ADDR_VAR 0 6
5041: PUSH
5042: LD_INT 3
5044: ST_TO_ADDR
// if sr then
5045: LD_VAR 0 6
5049: IFFALSE 5105
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
5051: LD_VAR 0 2
5055: PUSH
5056: LD_INT 2
5058: ARRAY
5059: PPUSH
5060: LD_VAR 0 2
5064: PUSH
5065: LD_INT 3
5067: ARRAY
5068: PPUSH
5069: LD_VAR 0 6
5073: PPUSH
5074: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
5078: LD_VAR 0 2
5082: PUSH
5083: LD_INT 2
5085: ARRAY
5086: PPUSH
5087: LD_VAR 0 2
5091: PUSH
5092: LD_INT 3
5094: ARRAY
5095: PPUSH
5096: LD_VAR 0 5
5100: PPUSH
5101: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
5105: LD_ADDR_VAR 0 3
5109: PUSH
5110: LD_VAR 0 2
5114: PUSH
5115: LD_INT 2
5117: ARRAY
5118: PPUSH
5119: LD_VAR 0 2
5123: PUSH
5124: LD_INT 3
5126: ARRAY
5127: PPUSH
5128: LD_VAR 0 2
5132: PUSH
5133: LD_INT 4
5135: ARRAY
5136: PPUSH
5137: CALL_OW 47
5141: ST_TO_ADDR
// end ;
5142: GO 4912
5144: POP
5145: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
5146: LD_ADDR_VAR 0 7
5150: PUSH
5151: LD_INT 22
5153: PUSH
5154: LD_VAR 0 5
5158: PUSH
5159: EMPTY
5160: LIST
5161: LIST
5162: PUSH
5163: LD_INT 30
5165: PUSH
5166: LD_INT 1
5168: PUSH
5169: EMPTY
5170: LIST
5171: LIST
5172: PUSH
5173: EMPTY
5174: LIST
5175: LIST
5176: PPUSH
5177: CALL_OW 69
5181: ST_TO_ADDR
// if not depot then
5182: LD_VAR 0 7
5186: NOT
5187: IFFALSE 5191
// exit ;
5189: GO 5535
// base := PrepareBase ( HexInfo ( 84 , 128 ) , rus1Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 12 , 6 , 6 , 4 ] ) ;
5191: LD_ADDR_VAR 0 8
5195: PUSH
5196: LD_INT 84
5198: PPUSH
5199: LD_INT 128
5201: PPUSH
5202: CALL_OW 428
5206: PPUSH
5207: LD_INT 15
5209: PPUSH
5210: LD_INT 0
5212: PPUSH
5213: LD_INT 6
5215: PUSH
5216: LD_INT 7
5218: PUSH
5219: LD_INT 8
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: LIST
5226: PUSH
5227: LD_OWVAR 67
5231: ARRAY
5232: PPUSH
5233: LD_INT 3000
5235: PUSH
5236: LD_INT 300
5238: PUSH
5239: LD_INT 100
5241: PUSH
5242: EMPTY
5243: LIST
5244: LIST
5245: LIST
5246: PPUSH
5247: LD_INT 12
5249: PUSH
5250: LD_INT 6
5252: PUSH
5253: LD_INT 6
5255: PUSH
5256: LD_INT 4
5258: PUSH
5259: EMPTY
5260: LIST
5261: LIST
5262: LIST
5263: LIST
5264: PPUSH
5265: CALL 28196 0 6
5269: ST_TO_ADDR
// if not base then
5270: LD_VAR 0 8
5274: NOT
5275: IFFALSE 5279
// exit ;
5277: GO 5535
// mc_bases := Replace ( mc_bases , mc_rus_1 , base ) ;
5279: LD_ADDR_EXP 50
5283: PUSH
5284: LD_EXP 50
5288: PPUSH
5289: LD_EXP 7
5293: PPUSH
5294: LD_VAR 0 8
5298: PPUSH
5299: CALL_OW 1
5303: ST_TO_ADDR
// base := PrepareBase ( HexInfo ( 34 , 23 ) , rus2Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 20000 , 3000 , 1000 ] , [ 12 , 6 , 6 , 4 ] ) ;
5304: LD_ADDR_VAR 0 8
5308: PUSH
5309: LD_INT 34
5311: PPUSH
5312: LD_INT 23
5314: PPUSH
5315: CALL_OW 428
5319: PPUSH
5320: LD_INT 11
5322: PPUSH
5323: LD_INT 0
5325: PPUSH
5326: LD_INT 6
5328: PUSH
5329: LD_INT 7
5331: PUSH
5332: LD_INT 8
5334: PUSH
5335: EMPTY
5336: LIST
5337: LIST
5338: LIST
5339: PUSH
5340: LD_OWVAR 67
5344: ARRAY
5345: PPUSH
5346: LD_INT 20000
5348: PUSH
5349: LD_INT 3000
5351: PUSH
5352: LD_INT 1000
5354: PUSH
5355: EMPTY
5356: LIST
5357: LIST
5358: LIST
5359: PPUSH
5360: LD_INT 12
5362: PUSH
5363: LD_INT 6
5365: PUSH
5366: LD_INT 6
5368: PUSH
5369: LD_INT 4
5371: PUSH
5372: EMPTY
5373: LIST
5374: LIST
5375: LIST
5376: LIST
5377: PPUSH
5378: CALL 28196 0 6
5382: ST_TO_ADDR
// if not base then
5383: LD_VAR 0 8
5387: NOT
5388: IFFALSE 5392
// exit ;
5390: GO 5535
// mc_bases := Replace ( mc_bases , mc_rus_2 , base ) ;
5392: LD_ADDR_EXP 50
5396: PUSH
5397: LD_EXP 50
5401: PPUSH
5402: LD_EXP 8
5406: PPUSH
5407: LD_VAR 0 8
5411: PPUSH
5412: CALL_OW 1
5416: ST_TO_ADDR
// ruOutpost := PrepareBase ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] , ruOutpostArea , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 500 , 100 , 10 ] , [ [ 6 , 7 , 8 ] [ Difficulty ] , 2 , 0 , 1 ] ) ;
5417: LD_ADDR_EXP 14
5421: PUSH
5422: LD_INT 22
5424: PUSH
5425: LD_INT 3
5427: PUSH
5428: EMPTY
5429: LIST
5430: LIST
5431: PUSH
5432: LD_INT 30
5434: PUSH
5435: LD_INT 0
5437: PUSH
5438: EMPTY
5439: LIST
5440: LIST
5441: PUSH
5442: EMPTY
5443: LIST
5444: LIST
5445: PPUSH
5446: CALL_OW 69
5450: PUSH
5451: LD_INT 1
5453: ARRAY
5454: PPUSH
5455: LD_INT 25
5457: PPUSH
5458: LD_INT 0
5460: PPUSH
5461: LD_INT 6
5463: PUSH
5464: LD_INT 7
5466: PUSH
5467: LD_INT 8
5469: PUSH
5470: EMPTY
5471: LIST
5472: LIST
5473: LIST
5474: PUSH
5475: LD_OWVAR 67
5479: ARRAY
5480: PPUSH
5481: LD_INT 500
5483: PUSH
5484: LD_INT 100
5486: PUSH
5487: LD_INT 10
5489: PUSH
5490: EMPTY
5491: LIST
5492: LIST
5493: LIST
5494: PPUSH
5495: LD_INT 6
5497: PUSH
5498: LD_INT 7
5500: PUSH
5501: LD_INT 8
5503: PUSH
5504: EMPTY
5505: LIST
5506: LIST
5507: LIST
5508: PUSH
5509: LD_OWVAR 67
5513: ARRAY
5514: PUSH
5515: LD_INT 2
5517: PUSH
5518: LD_INT 0
5520: PUSH
5521: LD_INT 1
5523: PUSH
5524: EMPTY
5525: LIST
5526: LIST
5527: LIST
5528: LIST
5529: PPUSH
5530: CALL 28196 0 6
5534: ST_TO_ADDR
// end ;
5535: LD_VAR 0 1
5539: RET
// export function PrepareLegion ; var i , b , veh , tmp , tmp2 , cameras , side , sr , depot , base ; begin
5540: LD_INT 0
5542: PPUSH
5543: PPUSH
5544: PPUSH
5545: PPUSH
5546: PPUSH
5547: PPUSH
5548: PPUSH
5549: PPUSH
5550: PPUSH
5551: PPUSH
5552: PPUSH
// PrepareNature ( 0 , 0 , 6 , 0 , 0 , 0 , 0 , legApe , 0 ) ;
5553: LD_INT 0
5555: PPUSH
5556: LD_INT 0
5558: PPUSH
5559: LD_INT 6
5561: PPUSH
5562: LD_INT 0
5564: PPUSH
5565: LD_INT 0
5567: PPUSH
5568: LD_INT 0
5570: PPUSH
5571: LD_INT 0
5573: PPUSH
5574: LD_INT 8
5576: PPUSH
5577: LD_INT 0
5579: PPUSH
5580: CALL 53249 0 9
// side := 8 ;
5584: LD_ADDR_VAR 0 8
5588: PUSH
5589: LD_INT 8
5591: ST_TO_ADDR
// tmp := AreaToList ( minesArea , 0 ) ;
5592: LD_ADDR_VAR 0 5
5596: PUSH
5597: LD_INT 20
5599: PPUSH
5600: LD_INT 0
5602: PPUSH
5603: CALL_OW 517
5607: ST_TO_ADDR
// if Difficulty > 2 then
5608: LD_OWVAR 67
5612: PUSH
5613: LD_INT 2
5615: GREATER
5616: IFFALSE 5760
// begin tmp2 := AreaToList ( minesArea2 , 0 ) ;
5618: LD_ADDR_VAR 0 6
5622: PUSH
5623: LD_INT 27
5625: PPUSH
5626: LD_INT 0
5628: PPUSH
5629: CALL_OW 517
5633: ST_TO_ADDR
// for i = 1 to tmp2 [ 1 ] do
5634: LD_ADDR_VAR 0 2
5638: PUSH
5639: DOUBLE
5640: LD_INT 1
5642: DEC
5643: ST_TO_ADDR
5644: LD_VAR 0 6
5648: PUSH
5649: LD_INT 1
5651: ARRAY
5652: PUSH
5653: FOR_TO
5654: IFFALSE 5758
// begin tmp := ReplaceIn ( tmp , [ 1 , tmp [ 1 ] + 1 ] , tmp2 [ 1 ] [ i ] ) ;
5656: LD_ADDR_VAR 0 5
5660: PUSH
5661: LD_VAR 0 5
5665: PPUSH
5666: LD_INT 1
5668: PUSH
5669: LD_VAR 0 5
5673: PUSH
5674: LD_INT 1
5676: ARRAY
5677: PUSH
5678: LD_INT 1
5680: PLUS
5681: PUSH
5682: EMPTY
5683: LIST
5684: LIST
5685: PPUSH
5686: LD_VAR 0 6
5690: PUSH
5691: LD_INT 1
5693: ARRAY
5694: PUSH
5695: LD_VAR 0 2
5699: ARRAY
5700: PPUSH
5701: CALL 24872 0 3
5705: ST_TO_ADDR
// tmp := ReplaceIn ( tmp , [ 2 , tmp [ 2 ] + 1 ] , tmp2 [ 2 ] [ i ] ) ;
5706: LD_ADDR_VAR 0 5
5710: PUSH
5711: LD_VAR 0 5
5715: PPUSH
5716: LD_INT 2
5718: PUSH
5719: LD_VAR 0 5
5723: PUSH
5724: LD_INT 2
5726: ARRAY
5727: PUSH
5728: LD_INT 1
5730: PLUS
5731: PUSH
5732: EMPTY
5733: LIST
5734: LIST
5735: PPUSH
5736: LD_VAR 0 6
5740: PUSH
5741: LD_INT 2
5743: ARRAY
5744: PUSH
5745: LD_VAR 0 2
5749: ARRAY
5750: PPUSH
5751: CALL 24872 0 3
5755: ST_TO_ADDR
// end ;
5756: GO 5653
5758: POP
5759: POP
// end ; if tmp then
5760: LD_VAR 0 5
5764: IFFALSE 5892
// begin for i = 1 to tmp [ 1 ] do
5766: LD_ADDR_VAR 0 2
5770: PUSH
5771: DOUBLE
5772: LD_INT 1
5774: DEC
5775: ST_TO_ADDR
5776: LD_VAR 0 5
5780: PUSH
5781: LD_INT 1
5783: ARRAY
5784: PUSH
5785: FOR_TO
5786: IFFALSE 5890
// begin PlaceMine ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side , 0 ) ;
5788: LD_VAR 0 5
5792: PUSH
5793: LD_INT 1
5795: ARRAY
5796: PUSH
5797: LD_VAR 0 2
5801: ARRAY
5802: PPUSH
5803: LD_VAR 0 5
5807: PUSH
5808: LD_INT 2
5810: ARRAY
5811: PUSH
5812: LD_VAR 0 2
5816: ARRAY
5817: PPUSH
5818: LD_VAR 0 8
5822: PPUSH
5823: LD_INT 0
5825: PPUSH
5826: CALL_OW 454
// staticMines := Insert ( staticMines , staticMines + 1 , [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ) ;
5830: LD_ADDR_EXP 16
5834: PUSH
5835: LD_EXP 16
5839: PPUSH
5840: LD_EXP 16
5844: PUSH
5845: LD_INT 1
5847: PLUS
5848: PPUSH
5849: LD_VAR 0 5
5853: PUSH
5854: LD_INT 1
5856: ARRAY
5857: PUSH
5858: LD_VAR 0 2
5862: ARRAY
5863: PUSH
5864: LD_VAR 0 5
5868: PUSH
5869: LD_INT 2
5871: ARRAY
5872: PUSH
5873: LD_VAR 0 2
5877: ARRAY
5878: PUSH
5879: EMPTY
5880: LIST
5881: LIST
5882: PPUSH
5883: CALL_OW 2
5887: ST_TO_ADDR
// end ;
5888: GO 5785
5890: POP
5891: POP
// end ; cameras := [ [ 165 , 156 ] , [ 143 , 145 ] , [ 152 , 165 ] , [ 123 , 153 ] , [ 161 , 215 ] , [ 172 , 100 ] , [ 148 , 83 ] , [ 122 , 68 ] , [ 105 , 74 ] , [ 113 , 97 ] ] ;
5892: LD_ADDR_VAR 0 7
5896: PUSH
5897: LD_INT 165
5899: PUSH
5900: LD_INT 156
5902: PUSH
5903: EMPTY
5904: LIST
5905: LIST
5906: PUSH
5907: LD_INT 143
5909: PUSH
5910: LD_INT 145
5912: PUSH
5913: EMPTY
5914: LIST
5915: LIST
5916: PUSH
5917: LD_INT 152
5919: PUSH
5920: LD_INT 165
5922: PUSH
5923: EMPTY
5924: LIST
5925: LIST
5926: PUSH
5927: LD_INT 123
5929: PUSH
5930: LD_INT 153
5932: PUSH
5933: EMPTY
5934: LIST
5935: LIST
5936: PUSH
5937: LD_INT 161
5939: PUSH
5940: LD_INT 215
5942: PUSH
5943: EMPTY
5944: LIST
5945: LIST
5946: PUSH
5947: LD_INT 172
5949: PUSH
5950: LD_INT 100
5952: PUSH
5953: EMPTY
5954: LIST
5955: LIST
5956: PUSH
5957: LD_INT 148
5959: PUSH
5960: LD_INT 83
5962: PUSH
5963: EMPTY
5964: LIST
5965: LIST
5966: PUSH
5967: LD_INT 122
5969: PUSH
5970: LD_INT 68
5972: PUSH
5973: EMPTY
5974: LIST
5975: LIST
5976: PUSH
5977: LD_INT 105
5979: PUSH
5980: LD_INT 74
5982: PUSH
5983: EMPTY
5984: LIST
5985: LIST
5986: PUSH
5987: LD_INT 113
5989: PUSH
5990: LD_INT 97
5992: PUSH
5993: EMPTY
5994: LIST
5995: LIST
5996: PUSH
5997: EMPTY
5998: LIST
5999: LIST
6000: LIST
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: LIST
6006: LIST
6007: LIST
6008: ST_TO_ADDR
// for i in cameras do
6009: LD_ADDR_VAR 0 2
6013: PUSH
6014: LD_VAR 0 7
6018: PUSH
6019: FOR_IN
6020: IFFALSE 6051
// HiddenCamera ( i [ 1 ] , i [ 2 ] , side ) ;
6022: LD_VAR 0 2
6026: PUSH
6027: LD_INT 1
6029: ARRAY
6030: PPUSH
6031: LD_VAR 0 2
6035: PUSH
6036: LD_INT 2
6038: ARRAY
6039: PPUSH
6040: LD_VAR 0 8
6044: PPUSH
6045: CALL_OW 244
6049: GO 6019
6051: POP
6052: POP
// tmp := [ [ 1 , 144 , 110 , 1 , 0 , 0 ] , [ 3 , 151 , 118 , 0 , 0 , 0 ] , [ 8 , 158 , 110 , 4 , 10 , 15 ] , [ 23 , 154 , 121 , 5 , 0 , 0 ] , [ 22 , 155 , 118 , 4 , 0 , 0 ] , [ 21 , 151 , 122 , 0 , 0 , 0 ] , [ 18 , 148 , 118 , 1 , 0 , 0 ] , [ 17 , 147 , 114 , 2 , 0 , 0 ] , [ 29 , 163 , 120 , 5 , 0 , 0 ] , [ 27 , 137 , 116 , 3 , 0 , 0 ] , [ 27 , 133 , 111 , 1 , 0 , 0 ] , [ 27 , 132 , 106 , 4 , 0 , 0 ] , [ 26 , 137 , 111 , 0 , 0 , 0 ] , [ 8 , 141 , 117 , 1 , 13 , 11 ] , [ 30 , 140 , 128 , 1 , 0 , 0 ] , [ 5 , 146 , 96 , 3 , 0 , 0 ] , [ 32 , 150 , 98 , 3 , 0 , 0 ] , [ 32 , 142 , 95 , 3 , 0 , 0 ] , [ 32 , 159 , 104 , 3 , 0 , 0 ] , [ 32 , 133 , 95 , 3 , 0 , 0 ] , [ 32 , 131 , 102 , 2 , 0 , 0 ] , [ 32 , 164 , 144 , 0 , 0 , 0 ] , [ 32 , 146 , 139 , 0 , 0 , 0 ] , [ 26 , 143 , 122 , 4 , 0 , 0 ] , [ 26 , 164 , 116 , 2 , 0 , 0 ] , ] ;
6053: LD_ADDR_VAR 0 5
6057: PUSH
6058: LD_INT 1
6060: PUSH
6061: LD_INT 144
6063: PUSH
6064: LD_INT 110
6066: PUSH
6067: LD_INT 1
6069: PUSH
6070: LD_INT 0
6072: PUSH
6073: LD_INT 0
6075: PUSH
6076: EMPTY
6077: LIST
6078: LIST
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: PUSH
6084: LD_INT 3
6086: PUSH
6087: LD_INT 151
6089: PUSH
6090: LD_INT 118
6092: PUSH
6093: LD_INT 0
6095: PUSH
6096: LD_INT 0
6098: PUSH
6099: LD_INT 0
6101: PUSH
6102: EMPTY
6103: LIST
6104: LIST
6105: LIST
6106: LIST
6107: LIST
6108: LIST
6109: PUSH
6110: LD_INT 8
6112: PUSH
6113: LD_INT 158
6115: PUSH
6116: LD_INT 110
6118: PUSH
6119: LD_INT 4
6121: PUSH
6122: LD_INT 10
6124: PUSH
6125: LD_INT 15
6127: PUSH
6128: EMPTY
6129: LIST
6130: LIST
6131: LIST
6132: LIST
6133: LIST
6134: LIST
6135: PUSH
6136: LD_INT 23
6138: PUSH
6139: LD_INT 154
6141: PUSH
6142: LD_INT 121
6144: PUSH
6145: LD_INT 5
6147: PUSH
6148: LD_INT 0
6150: PUSH
6151: LD_INT 0
6153: PUSH
6154: EMPTY
6155: LIST
6156: LIST
6157: LIST
6158: LIST
6159: LIST
6160: LIST
6161: PUSH
6162: LD_INT 22
6164: PUSH
6165: LD_INT 155
6167: PUSH
6168: LD_INT 118
6170: PUSH
6171: LD_INT 4
6173: PUSH
6174: LD_INT 0
6176: PUSH
6177: LD_INT 0
6179: PUSH
6180: EMPTY
6181: LIST
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: PUSH
6188: LD_INT 21
6190: PUSH
6191: LD_INT 151
6193: PUSH
6194: LD_INT 122
6196: PUSH
6197: LD_INT 0
6199: PUSH
6200: LD_INT 0
6202: PUSH
6203: LD_INT 0
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: PUSH
6214: LD_INT 18
6216: PUSH
6217: LD_INT 148
6219: PUSH
6220: LD_INT 118
6222: PUSH
6223: LD_INT 1
6225: PUSH
6226: LD_INT 0
6228: PUSH
6229: LD_INT 0
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: LIST
6236: LIST
6237: LIST
6238: LIST
6239: PUSH
6240: LD_INT 17
6242: PUSH
6243: LD_INT 147
6245: PUSH
6246: LD_INT 114
6248: PUSH
6249: LD_INT 2
6251: PUSH
6252: LD_INT 0
6254: PUSH
6255: LD_INT 0
6257: PUSH
6258: EMPTY
6259: LIST
6260: LIST
6261: LIST
6262: LIST
6263: LIST
6264: LIST
6265: PUSH
6266: LD_INT 29
6268: PUSH
6269: LD_INT 163
6271: PUSH
6272: LD_INT 120
6274: PUSH
6275: LD_INT 5
6277: PUSH
6278: LD_INT 0
6280: PUSH
6281: LD_INT 0
6283: PUSH
6284: EMPTY
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: PUSH
6292: LD_INT 27
6294: PUSH
6295: LD_INT 137
6297: PUSH
6298: LD_INT 116
6300: PUSH
6301: LD_INT 3
6303: PUSH
6304: LD_INT 0
6306: PUSH
6307: LD_INT 0
6309: PUSH
6310: EMPTY
6311: LIST
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: PUSH
6318: LD_INT 27
6320: PUSH
6321: LD_INT 133
6323: PUSH
6324: LD_INT 111
6326: PUSH
6327: LD_INT 1
6329: PUSH
6330: LD_INT 0
6332: PUSH
6333: LD_INT 0
6335: PUSH
6336: EMPTY
6337: LIST
6338: LIST
6339: LIST
6340: LIST
6341: LIST
6342: LIST
6343: PUSH
6344: LD_INT 27
6346: PUSH
6347: LD_INT 132
6349: PUSH
6350: LD_INT 106
6352: PUSH
6353: LD_INT 4
6355: PUSH
6356: LD_INT 0
6358: PUSH
6359: LD_INT 0
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: LIST
6366: LIST
6367: LIST
6368: LIST
6369: PUSH
6370: LD_INT 26
6372: PUSH
6373: LD_INT 137
6375: PUSH
6376: LD_INT 111
6378: PUSH
6379: LD_INT 0
6381: PUSH
6382: LD_INT 0
6384: PUSH
6385: LD_INT 0
6387: PUSH
6388: EMPTY
6389: LIST
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: PUSH
6396: LD_INT 8
6398: PUSH
6399: LD_INT 141
6401: PUSH
6402: LD_INT 117
6404: PUSH
6405: LD_INT 1
6407: PUSH
6408: LD_INT 13
6410: PUSH
6411: LD_INT 11
6413: PUSH
6414: EMPTY
6415: LIST
6416: LIST
6417: LIST
6418: LIST
6419: LIST
6420: LIST
6421: PUSH
6422: LD_INT 30
6424: PUSH
6425: LD_INT 140
6427: PUSH
6428: LD_INT 128
6430: PUSH
6431: LD_INT 1
6433: PUSH
6434: LD_INT 0
6436: PUSH
6437: LD_INT 0
6439: PUSH
6440: EMPTY
6441: LIST
6442: LIST
6443: LIST
6444: LIST
6445: LIST
6446: LIST
6447: PUSH
6448: LD_INT 5
6450: PUSH
6451: LD_INT 146
6453: PUSH
6454: LD_INT 96
6456: PUSH
6457: LD_INT 3
6459: PUSH
6460: LD_INT 0
6462: PUSH
6463: LD_INT 0
6465: PUSH
6466: EMPTY
6467: LIST
6468: LIST
6469: LIST
6470: LIST
6471: LIST
6472: LIST
6473: PUSH
6474: LD_INT 32
6476: PUSH
6477: LD_INT 150
6479: PUSH
6480: LD_INT 98
6482: PUSH
6483: LD_INT 3
6485: PUSH
6486: LD_INT 0
6488: PUSH
6489: LD_INT 0
6491: PUSH
6492: EMPTY
6493: LIST
6494: LIST
6495: LIST
6496: LIST
6497: LIST
6498: LIST
6499: PUSH
6500: LD_INT 32
6502: PUSH
6503: LD_INT 142
6505: PUSH
6506: LD_INT 95
6508: PUSH
6509: LD_INT 3
6511: PUSH
6512: LD_INT 0
6514: PUSH
6515: LD_INT 0
6517: PUSH
6518: EMPTY
6519: LIST
6520: LIST
6521: LIST
6522: LIST
6523: LIST
6524: LIST
6525: PUSH
6526: LD_INT 32
6528: PUSH
6529: LD_INT 159
6531: PUSH
6532: LD_INT 104
6534: PUSH
6535: LD_INT 3
6537: PUSH
6538: LD_INT 0
6540: PUSH
6541: LD_INT 0
6543: PUSH
6544: EMPTY
6545: LIST
6546: LIST
6547: LIST
6548: LIST
6549: LIST
6550: LIST
6551: PUSH
6552: LD_INT 32
6554: PUSH
6555: LD_INT 133
6557: PUSH
6558: LD_INT 95
6560: PUSH
6561: LD_INT 3
6563: PUSH
6564: LD_INT 0
6566: PUSH
6567: LD_INT 0
6569: PUSH
6570: EMPTY
6571: LIST
6572: LIST
6573: LIST
6574: LIST
6575: LIST
6576: LIST
6577: PUSH
6578: LD_INT 32
6580: PUSH
6581: LD_INT 131
6583: PUSH
6584: LD_INT 102
6586: PUSH
6587: LD_INT 2
6589: PUSH
6590: LD_INT 0
6592: PUSH
6593: LD_INT 0
6595: PUSH
6596: EMPTY
6597: LIST
6598: LIST
6599: LIST
6600: LIST
6601: LIST
6602: LIST
6603: PUSH
6604: LD_INT 32
6606: PUSH
6607: LD_INT 164
6609: PUSH
6610: LD_INT 144
6612: PUSH
6613: LD_INT 0
6615: PUSH
6616: LD_INT 0
6618: PUSH
6619: LD_INT 0
6621: PUSH
6622: EMPTY
6623: LIST
6624: LIST
6625: LIST
6626: LIST
6627: LIST
6628: LIST
6629: PUSH
6630: LD_INT 32
6632: PUSH
6633: LD_INT 146
6635: PUSH
6636: LD_INT 139
6638: PUSH
6639: LD_INT 0
6641: PUSH
6642: LD_INT 0
6644: PUSH
6645: LD_INT 0
6647: PUSH
6648: EMPTY
6649: LIST
6650: LIST
6651: LIST
6652: LIST
6653: LIST
6654: LIST
6655: PUSH
6656: LD_INT 26
6658: PUSH
6659: LD_INT 143
6661: PUSH
6662: LD_INT 122
6664: PUSH
6665: LD_INT 4
6667: PUSH
6668: LD_INT 0
6670: PUSH
6671: LD_INT 0
6673: PUSH
6674: EMPTY
6675: LIST
6676: LIST
6677: LIST
6678: LIST
6679: LIST
6680: LIST
6681: PUSH
6682: LD_INT 26
6684: PUSH
6685: LD_INT 164
6687: PUSH
6688: LD_INT 116
6690: PUSH
6691: LD_INT 2
6693: PUSH
6694: LD_INT 0
6696: PUSH
6697: LD_INT 0
6699: PUSH
6700: EMPTY
6701: LIST
6702: LIST
6703: LIST
6704: LIST
6705: LIST
6706: LIST
6707: PUSH
6708: EMPTY
6709: LIST
6710: LIST
6711: LIST
6712: LIST
6713: LIST
6714: LIST
6715: LIST
6716: LIST
6717: LIST
6718: LIST
6719: LIST
6720: LIST
6721: LIST
6722: LIST
6723: LIST
6724: LIST
6725: LIST
6726: LIST
6727: LIST
6728: LIST
6729: LIST
6730: LIST
6731: LIST
6732: LIST
6733: LIST
6734: ST_TO_ADDR
// for i in tmp do
6735: LD_ADDR_VAR 0 2
6739: PUSH
6740: LD_VAR 0 5
6744: PUSH
6745: FOR_IN
6746: IFFALSE 6977
// begin uc_side := side ;
6748: LD_ADDR_OWVAR 20
6752: PUSH
6753: LD_VAR 0 8
6757: ST_TO_ADDR
// uc_nation := nation_arabian ;
6758: LD_ADDR_OWVAR 21
6762: PUSH
6763: LD_INT 2
6765: ST_TO_ADDR
// bc_type := i [ 1 ] ;
6766: LD_ADDR_OWVAR 42
6770: PUSH
6771: LD_VAR 0 2
6775: PUSH
6776: LD_INT 1
6778: ARRAY
6779: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
6780: LD_ADDR_OWVAR 43
6784: PUSH
6785: LD_INT 5
6787: PPUSH
6788: LD_INT 6
6790: PPUSH
6791: CALL_OW 12
6795: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
6796: LD_ADDR_OWVAR 44
6800: PUSH
6801: LD_VAR 0 2
6805: PUSH
6806: LD_INT 5
6808: ARRAY
6809: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
6810: LD_ADDR_OWVAR 45
6814: PUSH
6815: LD_VAR 0 2
6819: PUSH
6820: LD_INT 6
6822: ARRAY
6823: ST_TO_ADDR
// sr := 0 ;
6824: LD_ADDR_VAR 0 9
6828: PUSH
6829: LD_INT 0
6831: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
6832: LD_VAR 0 2
6836: PUSH
6837: LD_INT 1
6839: ARRAY
6840: PUSH
6841: LD_INT 29
6843: EQUAL
6844: IFFALSE 6856
// sr := mat_oil else
6846: LD_ADDR_VAR 0 9
6850: PUSH
6851: LD_INT 2
6853: ST_TO_ADDR
6854: GO 6878
// if i [ 1 ] = b_siberite_mine then
6856: LD_VAR 0 2
6860: PUSH
6861: LD_INT 1
6863: ARRAY
6864: PUSH
6865: LD_INT 30
6867: EQUAL
6868: IFFALSE 6878
// sr := mat_siberit ;
6870: LD_ADDR_VAR 0 9
6874: PUSH
6875: LD_INT 3
6877: ST_TO_ADDR
// if sr then
6878: LD_VAR 0 9
6882: IFFALSE 6938
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
6884: LD_VAR 0 2
6888: PUSH
6889: LD_INT 2
6891: ARRAY
6892: PPUSH
6893: LD_VAR 0 2
6897: PUSH
6898: LD_INT 3
6900: ARRAY
6901: PPUSH
6902: LD_VAR 0 9
6906: PPUSH
6907: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
6911: LD_VAR 0 2
6915: PUSH
6916: LD_INT 2
6918: ARRAY
6919: PPUSH
6920: LD_VAR 0 2
6924: PUSH
6925: LD_INT 3
6927: ARRAY
6928: PPUSH
6929: LD_VAR 0 8
6933: PPUSH
6934: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
6938: LD_ADDR_VAR 0 3
6942: PUSH
6943: LD_VAR 0 2
6947: PUSH
6948: LD_INT 2
6950: ARRAY
6951: PPUSH
6952: LD_VAR 0 2
6956: PUSH
6957: LD_INT 3
6959: ARRAY
6960: PPUSH
6961: LD_VAR 0 2
6965: PUSH
6966: LD_INT 4
6968: ARRAY
6969: PPUSH
6970: CALL_OW 47
6974: ST_TO_ADDR
// end ;
6975: GO 6745
6977: POP
6978: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
6979: LD_ADDR_VAR 0 10
6983: PUSH
6984: LD_INT 22
6986: PUSH
6987: LD_VAR 0 8
6991: PUSH
6992: EMPTY
6993: LIST
6994: LIST
6995: PUSH
6996: LD_INT 30
6998: PUSH
6999: LD_INT 1
7001: PUSH
7002: EMPTY
7003: LIST
7004: LIST
7005: PUSH
7006: EMPTY
7007: LIST
7008: LIST
7009: PPUSH
7010: CALL_OW 69
7014: ST_TO_ADDR
// if not depot then
7015: LD_VAR 0 10
7019: NOT
7020: IFFALSE 7024
// exit ;
7022: GO 7270
// base := PrepareBase ( depot [ 1 ] , legBase , 0 , [ 7 , 8 , 10 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 14 , 6 , 6 , 5 ] ) ;
7024: LD_ADDR_VAR 0 11
7028: PUSH
7029: LD_VAR 0 10
7033: PUSH
7034: LD_INT 1
7036: ARRAY
7037: PPUSH
7038: LD_INT 6
7040: PPUSH
7041: LD_INT 0
7043: PPUSH
7044: LD_INT 7
7046: PUSH
7047: LD_INT 8
7049: PUSH
7050: LD_INT 10
7052: PUSH
7053: EMPTY
7054: LIST
7055: LIST
7056: LIST
7057: PUSH
7058: LD_OWVAR 67
7062: ARRAY
7063: PPUSH
7064: LD_INT 3000
7066: PUSH
7067: LD_INT 300
7069: PUSH
7070: LD_INT 100
7072: PUSH
7073: EMPTY
7074: LIST
7075: LIST
7076: LIST
7077: PPUSH
7078: LD_INT 14
7080: PUSH
7081: LD_INT 6
7083: PUSH
7084: LD_INT 6
7086: PUSH
7087: LD_INT 5
7089: PUSH
7090: EMPTY
7091: LIST
7092: LIST
7093: LIST
7094: LIST
7095: PPUSH
7096: CALL 28196 0 6
7100: ST_TO_ADDR
// if not base then
7101: LD_VAR 0 11
7105: NOT
7106: IFFALSE 7110
// exit ;
7108: GO 7270
// if Difficulty > 1 then
7110: LD_OWVAR 67
7114: PUSH
7115: LD_INT 1
7117: GREATER
7118: IFFALSE 7191
// begin InitHc ;
7120: CALL_OW 19
// PrepareHuman ( sex_male , class_sniper , [ 5 , 8 ] [ Difficulty - 1 ] ) ;
7124: LD_INT 1
7126: PPUSH
7127: LD_INT 5
7129: PPUSH
7130: LD_INT 5
7132: PUSH
7133: LD_INT 8
7135: PUSH
7136: EMPTY
7137: LIST
7138: LIST
7139: PUSH
7140: LD_OWVAR 67
7144: PUSH
7145: LD_INT 1
7147: MINUS
7148: ARRAY
7149: PPUSH
7150: CALL_OW 380
// for i = 1 to Difficulty do
7154: LD_ADDR_VAR 0 2
7158: PUSH
7159: DOUBLE
7160: LD_INT 1
7162: DEC
7163: ST_TO_ADDR
7164: LD_OWVAR 67
7168: PUSH
7169: FOR_TO
7170: IFFALSE 7189
// PlaceUnitArea ( CreateHuman , sniperGuardArea , false ) ;
7172: CALL_OW 44
7176: PPUSH
7177: LD_INT 24
7179: PPUSH
7180: LD_INT 0
7182: PPUSH
7183: CALL_OW 49
7187: GO 7169
7189: POP
7190: POP
// end ; mc_bases := Replace ( mc_bases , mc_leg , base ) ;
7191: LD_ADDR_EXP 50
7195: PUSH
7196: LD_EXP 50
7200: PPUSH
7201: LD_EXP 6
7205: PPUSH
7206: LD_VAR 0 11
7210: PPUSH
7211: CALL_OW 1
7215: ST_TO_ADDR
// hc_gallery := ru ;
7216: LD_ADDR_OWVAR 33
7220: PUSH
7221: LD_STRING ru
7223: ST_TO_ADDR
// hc_face_number := 44 ;
7224: LD_ADDR_OWVAR 34
7228: PUSH
7229: LD_INT 44
7231: ST_TO_ADDR
// hc_name := Robert Farmer ;
7232: LD_ADDR_OWVAR 26
7236: PUSH
7237: LD_STRING Robert Farmer
7239: ST_TO_ADDR
// hc_sex := sex_male ;
7240: LD_ADDR_OWVAR 27
7244: PUSH
7245: LD_INT 1
7247: ST_TO_ADDR
// hc_class := 1 ;
7248: LD_ADDR_OWVAR 28
7252: PUSH
7253: LD_INT 1
7255: ST_TO_ADDR
// Farmer := CreateHuman ;
7256: LD_ADDR_EXP 13
7260: PUSH
7261: CALL_OW 44
7265: ST_TO_ADDR
// InitHc ;
7266: CALL_OW 19
// end ;
7270: LD_VAR 0 1
7274: RET
// export function SetAdditionalRussianForces ; var i , tmp , veh ; begin
7275: LD_INT 0
7277: PPUSH
7278: PPUSH
7279: PPUSH
7280: PPUSH
// tmp := [ ] ;
7281: LD_ADDR_VAR 0 3
7285: PUSH
7286: EMPTY
7287: ST_TO_ADDR
// for i := 1 to 3 do
7288: LD_ADDR_VAR 0 2
7292: PUSH
7293: DOUBLE
7294: LD_INT 1
7296: DEC
7297: ST_TO_ADDR
7298: LD_INT 3
7300: PUSH
7301: FOR_TO
7302: IFFALSE 7414
// begin uc_side := 3 ;
7304: LD_ADDR_OWVAR 20
7308: PUSH
7309: LD_INT 3
7311: ST_TO_ADDR
// uc_nation := 3 ;
7312: LD_ADDR_OWVAR 21
7316: PUSH
7317: LD_INT 3
7319: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
7320: LD_ADDR_OWVAR 37
7324: PUSH
7325: LD_INT 22
7327: ST_TO_ADDR
// vc_engine := engine_siberite ;
7328: LD_ADDR_OWVAR 39
7332: PUSH
7333: LD_INT 3
7335: ST_TO_ADDR
// vc_control := control_computer ;
7336: LD_ADDR_OWVAR 38
7340: PUSH
7341: LD_INT 3
7343: ST_TO_ADDR
// vc_weapon := ru_crane ;
7344: LD_ADDR_OWVAR 40
7348: PUSH
7349: LD_INT 52
7351: ST_TO_ADDR
// veh := CreateVehicle ;
7352: LD_ADDR_VAR 0 4
7356: PUSH
7357: CALL_OW 45
7361: ST_TO_ADDR
// PlaceUnitXYR ( veh , 73 , 122 , 3 , false ) ;
7362: LD_VAR 0 4
7366: PPUSH
7367: LD_INT 73
7369: PPUSH
7370: LD_INT 122
7372: PPUSH
7373: LD_INT 3
7375: PPUSH
7376: LD_INT 0
7378: PPUSH
7379: CALL_OW 50
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
7383: LD_ADDR_VAR 0 3
7387: PUSH
7388: LD_VAR 0 3
7392: PPUSH
7393: LD_VAR 0 3
7397: PUSH
7398: LD_INT 1
7400: PLUS
7401: PPUSH
7402: LD_VAR 0 4
7406: PPUSH
7407: CALL_OW 1
7411: ST_TO_ADDR
// end ;
7412: GO 7301
7414: POP
7415: POP
// mc_vehicles := Replace ( mc_vehicles , mc_rus_1 , tmp ) ;
7416: LD_ADDR_EXP 69
7420: PUSH
7421: LD_EXP 69
7425: PPUSH
7426: LD_EXP 7
7430: PPUSH
7431: LD_VAR 0 3
7435: PPUSH
7436: CALL_OW 1
7440: ST_TO_ADDR
// tmp := [ ] ;
7441: LD_ADDR_VAR 0 3
7445: PUSH
7446: EMPTY
7447: ST_TO_ADDR
// for i := 1 to 3 do
7448: LD_ADDR_VAR 0 2
7452: PUSH
7453: DOUBLE
7454: LD_INT 1
7456: DEC
7457: ST_TO_ADDR
7458: LD_INT 3
7460: PUSH
7461: FOR_TO
7462: IFFALSE 7574
// begin uc_side := 3 ;
7464: LD_ADDR_OWVAR 20
7468: PUSH
7469: LD_INT 3
7471: ST_TO_ADDR
// uc_nation := 3 ;
7472: LD_ADDR_OWVAR 21
7476: PUSH
7477: LD_INT 3
7479: ST_TO_ADDR
// vc_chassis := ru_medium_tracked ;
7480: LD_ADDR_OWVAR 37
7484: PUSH
7485: LD_INT 22
7487: ST_TO_ADDR
// vc_engine := engine_siberite ;
7488: LD_ADDR_OWVAR 39
7492: PUSH
7493: LD_INT 3
7495: ST_TO_ADDR
// vc_control := control_computer ;
7496: LD_ADDR_OWVAR 38
7500: PUSH
7501: LD_INT 3
7503: ST_TO_ADDR
// vc_weapon := ru_crane ;
7504: LD_ADDR_OWVAR 40
7508: PUSH
7509: LD_INT 52
7511: ST_TO_ADDR
// veh := CreateVehicle ;
7512: LD_ADDR_VAR 0 4
7516: PUSH
7517: CALL_OW 45
7521: ST_TO_ADDR
// PlaceUnitXYR ( veh , 22 , 28 , 3 , false ) ;
7522: LD_VAR 0 4
7526: PPUSH
7527: LD_INT 22
7529: PPUSH
7530: LD_INT 28
7532: PPUSH
7533: LD_INT 3
7535: PPUSH
7536: LD_INT 0
7538: PPUSH
7539: CALL_OW 50
// tmp := Replace ( tmp , tmp + 1 , veh ) ;
7543: LD_ADDR_VAR 0 3
7547: PUSH
7548: LD_VAR 0 3
7552: PPUSH
7553: LD_VAR 0 3
7557: PUSH
7558: LD_INT 1
7560: PLUS
7561: PPUSH
7562: LD_VAR 0 4
7566: PPUSH
7567: CALL_OW 1
7571: ST_TO_ADDR
// end ;
7572: GO 7461
7574: POP
7575: POP
// mc_vehicles := Replace ( mc_vehicles , mc_rus_2 , tmp ) ;
7576: LD_ADDR_EXP 69
7580: PUSH
7581: LD_EXP 69
7585: PPUSH
7586: LD_EXP 8
7590: PPUSH
7591: LD_VAR 0 3
7595: PPUSH
7596: CALL_OW 1
7600: ST_TO_ADDR
// end ;
7601: LD_VAR 0 1
7605: RET
// export function PrepareAmericans ; var i , b , tmp , side , sr , base , depot ; begin
7606: LD_INT 0
7608: PPUSH
7609: PPUSH
7610: PPUSH
7611: PPUSH
7612: PPUSH
7613: PPUSH
7614: PPUSH
7615: PPUSH
// PrepareNature ( 0 , 0 , 4 , 0 , 0 , 0 , 0 , amerApe , 0 ) ;
7616: LD_INT 0
7618: PPUSH
7619: LD_INT 0
7621: PPUSH
7622: LD_INT 4
7624: PPUSH
7625: LD_INT 0
7627: PPUSH
7628: LD_INT 0
7630: PPUSH
7631: LD_INT 0
7633: PPUSH
7634: LD_INT 0
7636: PPUSH
7637: LD_INT 10
7639: PPUSH
7640: LD_INT 0
7642: PPUSH
7643: CALL 53249 0 9
// side := 4 ;
7647: LD_ADDR_VAR 0 5
7651: PUSH
7652: LD_INT 4
7654: ST_TO_ADDR
// tmp := [ [ 1 , 144 , 18 , 4 , 0 , 0 ] , [ 3 , 137 , 8 , 4 , 0 , 0 ] , [ 22 , 141 , 8 , 4 , 0 , 0 ] , [ 25 , 137 , 5 , 3 , 0 , 0 ] , [ 18 , 137 , 12 , 0 , 0 , 0 ] , [ 17 , 133 , 4 , 2 , 0 , 0 ] , [ 16 , 140 , 11 , 5 , 0 , 0 ] , [ 8 , 149 , 26 , 4 , 10 , 15 ] , [ 8 , 142 , 26 , 1 , 11 , 12 ] , [ 27 , 153 , 32 , 5 , 0 , 0 ] , [ 27 , 145 , 32 , 3 , 0 , 0 ] , [ 27 , 138 , 2 , 4 , 0 , 0 ] , [ 27 , 144 , 13 , 0 , 0 , 0 ] , [ 26 , 124 , 2 , 4 , 0 , 0 ] , [ 26 , 121 , 2 , 2 , 0 , 0 ] , [ 26 , 118 , 2 , 1 , 0 , 0 ] , [ 29 , 159 , 47 , 2 , 0 , 0 ] , [ 32 , 146 , 41 , 0 , 0 , 0 ] , [ 33 , 136 , 37 , 0 , 0 , 0 ] , [ 33 , 132 , 34 , 0 , 0 , 0 ] , [ 36 , 124 , 7 , 1 , 0 , 0 ] , [ 5 , 124 , 19 , 0 , 0 , 0 ] , [ 32 , 127 , 23 , 0 , 0 , 0 ] ] ;
7655: LD_ADDR_VAR 0 4
7659: PUSH
7660: LD_INT 1
7662: PUSH
7663: LD_INT 144
7665: PUSH
7666: LD_INT 18
7668: PUSH
7669: LD_INT 4
7671: PUSH
7672: LD_INT 0
7674: PUSH
7675: LD_INT 0
7677: PUSH
7678: EMPTY
7679: LIST
7680: LIST
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: PUSH
7686: LD_INT 3
7688: PUSH
7689: LD_INT 137
7691: PUSH
7692: LD_INT 8
7694: PUSH
7695: LD_INT 4
7697: PUSH
7698: LD_INT 0
7700: PUSH
7701: LD_INT 0
7703: PUSH
7704: EMPTY
7705: LIST
7706: LIST
7707: LIST
7708: LIST
7709: LIST
7710: LIST
7711: PUSH
7712: LD_INT 22
7714: PUSH
7715: LD_INT 141
7717: PUSH
7718: LD_INT 8
7720: PUSH
7721: LD_INT 4
7723: PUSH
7724: LD_INT 0
7726: PUSH
7727: LD_INT 0
7729: PUSH
7730: EMPTY
7731: LIST
7732: LIST
7733: LIST
7734: LIST
7735: LIST
7736: LIST
7737: PUSH
7738: LD_INT 25
7740: PUSH
7741: LD_INT 137
7743: PUSH
7744: LD_INT 5
7746: PUSH
7747: LD_INT 3
7749: PUSH
7750: LD_INT 0
7752: PUSH
7753: LD_INT 0
7755: PUSH
7756: EMPTY
7757: LIST
7758: LIST
7759: LIST
7760: LIST
7761: LIST
7762: LIST
7763: PUSH
7764: LD_INT 18
7766: PUSH
7767: LD_INT 137
7769: PUSH
7770: LD_INT 12
7772: PUSH
7773: LD_INT 0
7775: PUSH
7776: LD_INT 0
7778: PUSH
7779: LD_INT 0
7781: PUSH
7782: EMPTY
7783: LIST
7784: LIST
7785: LIST
7786: LIST
7787: LIST
7788: LIST
7789: PUSH
7790: LD_INT 17
7792: PUSH
7793: LD_INT 133
7795: PUSH
7796: LD_INT 4
7798: PUSH
7799: LD_INT 2
7801: PUSH
7802: LD_INT 0
7804: PUSH
7805: LD_INT 0
7807: PUSH
7808: EMPTY
7809: LIST
7810: LIST
7811: LIST
7812: LIST
7813: LIST
7814: LIST
7815: PUSH
7816: LD_INT 16
7818: PUSH
7819: LD_INT 140
7821: PUSH
7822: LD_INT 11
7824: PUSH
7825: LD_INT 5
7827: PUSH
7828: LD_INT 0
7830: PUSH
7831: LD_INT 0
7833: PUSH
7834: EMPTY
7835: LIST
7836: LIST
7837: LIST
7838: LIST
7839: LIST
7840: LIST
7841: PUSH
7842: LD_INT 8
7844: PUSH
7845: LD_INT 149
7847: PUSH
7848: LD_INT 26
7850: PUSH
7851: LD_INT 4
7853: PUSH
7854: LD_INT 10
7856: PUSH
7857: LD_INT 15
7859: PUSH
7860: EMPTY
7861: LIST
7862: LIST
7863: LIST
7864: LIST
7865: LIST
7866: LIST
7867: PUSH
7868: LD_INT 8
7870: PUSH
7871: LD_INT 142
7873: PUSH
7874: LD_INT 26
7876: PUSH
7877: LD_INT 1
7879: PUSH
7880: LD_INT 11
7882: PUSH
7883: LD_INT 12
7885: PUSH
7886: EMPTY
7887: LIST
7888: LIST
7889: LIST
7890: LIST
7891: LIST
7892: LIST
7893: PUSH
7894: LD_INT 27
7896: PUSH
7897: LD_INT 153
7899: PUSH
7900: LD_INT 32
7902: PUSH
7903: LD_INT 5
7905: PUSH
7906: LD_INT 0
7908: PUSH
7909: LD_INT 0
7911: PUSH
7912: EMPTY
7913: LIST
7914: LIST
7915: LIST
7916: LIST
7917: LIST
7918: LIST
7919: PUSH
7920: LD_INT 27
7922: PUSH
7923: LD_INT 145
7925: PUSH
7926: LD_INT 32
7928: PUSH
7929: LD_INT 3
7931: PUSH
7932: LD_INT 0
7934: PUSH
7935: LD_INT 0
7937: PUSH
7938: EMPTY
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: LIST
7944: LIST
7945: PUSH
7946: LD_INT 27
7948: PUSH
7949: LD_INT 138
7951: PUSH
7952: LD_INT 2
7954: PUSH
7955: LD_INT 4
7957: PUSH
7958: LD_INT 0
7960: PUSH
7961: LD_INT 0
7963: PUSH
7964: EMPTY
7965: LIST
7966: LIST
7967: LIST
7968: LIST
7969: LIST
7970: LIST
7971: PUSH
7972: LD_INT 27
7974: PUSH
7975: LD_INT 144
7977: PUSH
7978: LD_INT 13
7980: PUSH
7981: LD_INT 0
7983: PUSH
7984: LD_INT 0
7986: PUSH
7987: LD_INT 0
7989: PUSH
7990: EMPTY
7991: LIST
7992: LIST
7993: LIST
7994: LIST
7995: LIST
7996: LIST
7997: PUSH
7998: LD_INT 26
8000: PUSH
8001: LD_INT 124
8003: PUSH
8004: LD_INT 2
8006: PUSH
8007: LD_INT 4
8009: PUSH
8010: LD_INT 0
8012: PUSH
8013: LD_INT 0
8015: PUSH
8016: EMPTY
8017: LIST
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: LIST
8023: PUSH
8024: LD_INT 26
8026: PUSH
8027: LD_INT 121
8029: PUSH
8030: LD_INT 2
8032: PUSH
8033: LD_INT 2
8035: PUSH
8036: LD_INT 0
8038: PUSH
8039: LD_INT 0
8041: PUSH
8042: EMPTY
8043: LIST
8044: LIST
8045: LIST
8046: LIST
8047: LIST
8048: LIST
8049: PUSH
8050: LD_INT 26
8052: PUSH
8053: LD_INT 118
8055: PUSH
8056: LD_INT 2
8058: PUSH
8059: LD_INT 1
8061: PUSH
8062: LD_INT 0
8064: PUSH
8065: LD_INT 0
8067: PUSH
8068: EMPTY
8069: LIST
8070: LIST
8071: LIST
8072: LIST
8073: LIST
8074: LIST
8075: PUSH
8076: LD_INT 29
8078: PUSH
8079: LD_INT 159
8081: PUSH
8082: LD_INT 47
8084: PUSH
8085: LD_INT 2
8087: PUSH
8088: LD_INT 0
8090: PUSH
8091: LD_INT 0
8093: PUSH
8094: EMPTY
8095: LIST
8096: LIST
8097: LIST
8098: LIST
8099: LIST
8100: LIST
8101: PUSH
8102: LD_INT 32
8104: PUSH
8105: LD_INT 146
8107: PUSH
8108: LD_INT 41
8110: PUSH
8111: LD_INT 0
8113: PUSH
8114: LD_INT 0
8116: PUSH
8117: LD_INT 0
8119: PUSH
8120: EMPTY
8121: LIST
8122: LIST
8123: LIST
8124: LIST
8125: LIST
8126: LIST
8127: PUSH
8128: LD_INT 33
8130: PUSH
8131: LD_INT 136
8133: PUSH
8134: LD_INT 37
8136: PUSH
8137: LD_INT 0
8139: PUSH
8140: LD_INT 0
8142: PUSH
8143: LD_INT 0
8145: PUSH
8146: EMPTY
8147: LIST
8148: LIST
8149: LIST
8150: LIST
8151: LIST
8152: LIST
8153: PUSH
8154: LD_INT 33
8156: PUSH
8157: LD_INT 132
8159: PUSH
8160: LD_INT 34
8162: PUSH
8163: LD_INT 0
8165: PUSH
8166: LD_INT 0
8168: PUSH
8169: LD_INT 0
8171: PUSH
8172: EMPTY
8173: LIST
8174: LIST
8175: LIST
8176: LIST
8177: LIST
8178: LIST
8179: PUSH
8180: LD_INT 36
8182: PUSH
8183: LD_INT 124
8185: PUSH
8186: LD_INT 7
8188: PUSH
8189: LD_INT 1
8191: PUSH
8192: LD_INT 0
8194: PUSH
8195: LD_INT 0
8197: PUSH
8198: EMPTY
8199: LIST
8200: LIST
8201: LIST
8202: LIST
8203: LIST
8204: LIST
8205: PUSH
8206: LD_INT 5
8208: PUSH
8209: LD_INT 124
8211: PUSH
8212: LD_INT 19
8214: PUSH
8215: LD_INT 0
8217: PUSH
8218: LD_INT 0
8220: PUSH
8221: LD_INT 0
8223: PUSH
8224: EMPTY
8225: LIST
8226: LIST
8227: LIST
8228: LIST
8229: LIST
8230: LIST
8231: PUSH
8232: LD_INT 32
8234: PUSH
8235: LD_INT 127
8237: PUSH
8238: LD_INT 23
8240: PUSH
8241: LD_INT 0
8243: PUSH
8244: LD_INT 0
8246: PUSH
8247: LD_INT 0
8249: PUSH
8250: EMPTY
8251: LIST
8252: LIST
8253: LIST
8254: LIST
8255: LIST
8256: LIST
8257: PUSH
8258: EMPTY
8259: LIST
8260: LIST
8261: LIST
8262: LIST
8263: LIST
8264: LIST
8265: LIST
8266: LIST
8267: LIST
8268: LIST
8269: LIST
8270: LIST
8271: LIST
8272: LIST
8273: LIST
8274: LIST
8275: LIST
8276: LIST
8277: LIST
8278: LIST
8279: LIST
8280: LIST
8281: LIST
8282: ST_TO_ADDR
// for i in tmp do
8283: LD_ADDR_VAR 0 2
8287: PUSH
8288: LD_VAR 0 4
8292: PUSH
8293: FOR_IN
8294: IFFALSE 8525
// begin uc_side := side ;
8296: LD_ADDR_OWVAR 20
8300: PUSH
8301: LD_VAR 0 5
8305: ST_TO_ADDR
// uc_nation := nation_american ;
8306: LD_ADDR_OWVAR 21
8310: PUSH
8311: LD_INT 1
8313: ST_TO_ADDR
// bc_type := i [ 1 ] ;
8314: LD_ADDR_OWVAR 42
8318: PUSH
8319: LD_VAR 0 2
8323: PUSH
8324: LD_INT 1
8326: ARRAY
8327: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
8328: LD_ADDR_OWVAR 43
8332: PUSH
8333: LD_INT 5
8335: PPUSH
8336: LD_INT 6
8338: PPUSH
8339: CALL_OW 12
8343: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
8344: LD_ADDR_OWVAR 44
8348: PUSH
8349: LD_VAR 0 2
8353: PUSH
8354: LD_INT 5
8356: ARRAY
8357: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
8358: LD_ADDR_OWVAR 45
8362: PUSH
8363: LD_VAR 0 2
8367: PUSH
8368: LD_INT 6
8370: ARRAY
8371: ST_TO_ADDR
// sr := 0 ;
8372: LD_ADDR_VAR 0 6
8376: PUSH
8377: LD_INT 0
8379: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
8380: LD_VAR 0 2
8384: PUSH
8385: LD_INT 1
8387: ARRAY
8388: PUSH
8389: LD_INT 29
8391: EQUAL
8392: IFFALSE 8404
// sr := mat_oil else
8394: LD_ADDR_VAR 0 6
8398: PUSH
8399: LD_INT 2
8401: ST_TO_ADDR
8402: GO 8426
// if i [ 1 ] = b_siberite_mine then
8404: LD_VAR 0 2
8408: PUSH
8409: LD_INT 1
8411: ARRAY
8412: PUSH
8413: LD_INT 30
8415: EQUAL
8416: IFFALSE 8426
// sr := mat_siberit ;
8418: LD_ADDR_VAR 0 6
8422: PUSH
8423: LD_INT 3
8425: ST_TO_ADDR
// if sr then
8426: LD_VAR 0 6
8430: IFFALSE 8486
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
8432: LD_VAR 0 2
8436: PUSH
8437: LD_INT 2
8439: ARRAY
8440: PPUSH
8441: LD_VAR 0 2
8445: PUSH
8446: LD_INT 3
8448: ARRAY
8449: PPUSH
8450: LD_VAR 0 6
8454: PPUSH
8455: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
8459: LD_VAR 0 2
8463: PUSH
8464: LD_INT 2
8466: ARRAY
8467: PPUSH
8468: LD_VAR 0 2
8472: PUSH
8473: LD_INT 3
8475: ARRAY
8476: PPUSH
8477: LD_VAR 0 5
8481: PPUSH
8482: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
8486: LD_ADDR_VAR 0 3
8490: PUSH
8491: LD_VAR 0 2
8495: PUSH
8496: LD_INT 2
8498: ARRAY
8499: PPUSH
8500: LD_VAR 0 2
8504: PUSH
8505: LD_INT 3
8507: ARRAY
8508: PPUSH
8509: LD_VAR 0 2
8513: PUSH
8514: LD_INT 4
8516: ARRAY
8517: PPUSH
8518: CALL_OW 47
8522: ST_TO_ADDR
// end ;
8523: GO 8293
8525: POP
8526: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
8527: LD_ADDR_VAR 0 8
8531: PUSH
8532: LD_INT 22
8534: PUSH
8535: LD_VAR 0 5
8539: PUSH
8540: EMPTY
8541: LIST
8542: LIST
8543: PUSH
8544: LD_INT 30
8546: PUSH
8547: LD_INT 1
8549: PUSH
8550: EMPTY
8551: LIST
8552: LIST
8553: PUSH
8554: EMPTY
8555: LIST
8556: LIST
8557: PPUSH
8558: CALL_OW 69
8562: ST_TO_ADDR
// if not depot then
8563: LD_VAR 0 8
8567: NOT
8568: IFFALSE 8572
// exit ;
8570: GO 8844
// base := PrepareBase ( depot [ 1 ] , amerBase , theta3 , [ 8 , 7 , 6 ] [ Difficulty ] , [ [ 2500 , 2000 , 1750 ] [ Difficulty ] , [ 300 , 250 , 200 ] [ Difficulty ] , [ 80 , 60 , 50 ] [ Difficulty ] ] , [ 7 , 6 , 5 , 5 ] ) ;
8572: LD_ADDR_VAR 0 7
8576: PUSH
8577: LD_VAR 0 8
8581: PUSH
8582: LD_INT 1
8584: ARRAY
8585: PPUSH
8586: LD_INT 3
8588: PPUSH
8589: LD_STRING theta3
8591: PPUSH
8592: LD_INT 8
8594: PUSH
8595: LD_INT 7
8597: PUSH
8598: LD_INT 6
8600: PUSH
8601: EMPTY
8602: LIST
8603: LIST
8604: LIST
8605: PUSH
8606: LD_OWVAR 67
8610: ARRAY
8611: PPUSH
8612: LD_INT 2500
8614: PUSH
8615: LD_INT 2000
8617: PUSH
8618: LD_INT 1750
8620: PUSH
8621: EMPTY
8622: LIST
8623: LIST
8624: LIST
8625: PUSH
8626: LD_OWVAR 67
8630: ARRAY
8631: PUSH
8632: LD_INT 300
8634: PUSH
8635: LD_INT 250
8637: PUSH
8638: LD_INT 200
8640: PUSH
8641: EMPTY
8642: LIST
8643: LIST
8644: LIST
8645: PUSH
8646: LD_OWVAR 67
8650: ARRAY
8651: PUSH
8652: LD_INT 80
8654: PUSH
8655: LD_INT 60
8657: PUSH
8658: LD_INT 50
8660: PUSH
8661: EMPTY
8662: LIST
8663: LIST
8664: LIST
8665: PUSH
8666: LD_OWVAR 67
8670: ARRAY
8671: PUSH
8672: EMPTY
8673: LIST
8674: LIST
8675: LIST
8676: PPUSH
8677: LD_INT 7
8679: PUSH
8680: LD_INT 6
8682: PUSH
8683: LD_INT 5
8685: PUSH
8686: LD_INT 5
8688: PUSH
8689: EMPTY
8690: LIST
8691: LIST
8692: LIST
8693: LIST
8694: PPUSH
8695: CALL 28196 0 6
8699: ST_TO_ADDR
// if not base then
8700: LD_VAR 0 7
8704: NOT
8705: IFFALSE 8709
// exit ;
8707: GO 8844
// mc_bases := Replace ( mc_bases , mc_amer , base ) ;
8709: LD_ADDR_EXP 50
8713: PUSH
8714: LD_EXP 50
8718: PPUSH
8719: LD_EXP 5
8723: PPUSH
8724: LD_VAR 0 7
8728: PPUSH
8729: CALL_OW 1
8733: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
8734: LD_INT 1
8736: PPUSH
8737: LD_INT 1
8739: PPUSH
8740: LD_INT 7
8742: PPUSH
8743: CALL_OW 380
// allyCommander := CreateHuman ;
8747: LD_ADDR_EXP 11
8751: PUSH
8752: CALL_OW 44
8756: ST_TO_ADDR
// PlaceUnitXY ( allyCommander , 139 , 15 , false ) ;
8757: LD_EXP 11
8761: PPUSH
8762: LD_INT 139
8764: PPUSH
8765: LD_INT 15
8767: PPUSH
8768: LD_INT 0
8770: PPUSH
8771: CALL_OW 48
// ComTurnXY ( allyCommander , 137 , 15 ) ;
8775: LD_EXP 11
8779: PPUSH
8780: LD_INT 137
8782: PPUSH
8783: LD_INT 15
8785: PPUSH
8786: CALL_OW 118
// hc_gallery := us ;
8790: LD_ADDR_OWVAR 33
8794: PUSH
8795: LD_STRING us
8797: ST_TO_ADDR
// hc_face_number := 7 ;
8798: LD_ADDR_OWVAR 34
8802: PUSH
8803: LD_INT 7
8805: ST_TO_ADDR
// hc_name := Arthur Powell ;
8806: LD_ADDR_OWVAR 26
8810: PUSH
8811: LD_STRING Arthur Powell
8813: ST_TO_ADDR
// hc_sex := sex_male ;
8814: LD_ADDR_OWVAR 27
8818: PUSH
8819: LD_INT 1
8821: ST_TO_ADDR
// hc_class := 1 ;
8822: LD_ADDR_OWVAR 28
8826: PUSH
8827: LD_INT 1
8829: ST_TO_ADDR
// Powell := CreateHuman ;
8830: LD_ADDR_EXP 12
8834: PUSH
8835: CALL_OW 44
8839: ST_TO_ADDR
// InitHc ;
8840: CALL_OW 19
// end ;
8844: LD_VAR 0 1
8848: RET
// export function PreparePlayer ; var i , side , techs , tanks , cl , chassis , engines , weapons ; begin
8849: LD_INT 0
8851: PPUSH
8852: PPUSH
8853: PPUSH
8854: PPUSH
8855: PPUSH
8856: PPUSH
8857: PPUSH
8858: PPUSH
8859: PPUSH
// side := 1 ;
8860: LD_ADDR_VAR 0 3
8864: PUSH
8865: LD_INT 1
8867: ST_TO_ADDR
// result := [ [ ] , [ ] ] ;
8868: LD_ADDR_VAR 0 1
8872: PUSH
8873: EMPTY
8874: PUSH
8875: EMPTY
8876: PUSH
8877: EMPTY
8878: LIST
8879: LIST
8880: ST_TO_ADDR
// uc_side := side ;
8881: LD_ADDR_OWVAR 20
8885: PUSH
8886: LD_VAR 0 3
8890: ST_TO_ADDR
// uc_nation := nation_american ;
8891: LD_ADDR_OWVAR 21
8895: PUSH
8896: LD_INT 1
8898: ST_TO_ADDR
// InitHc ;
8899: CALL_OW 19
// InitVc ;
8903: CALL_OW 20
// hc_importance := 0 ;
8907: LD_ADDR_OWVAR 32
8911: PUSH
8912: LD_INT 0
8914: ST_TO_ADDR
// chassis := [ us_medium_wheeled , us_medium_tracked , us_medium_tracked ] ;
8915: LD_ADDR_VAR 0 7
8919: PUSH
8920: LD_INT 2
8922: PUSH
8923: LD_INT 3
8925: PUSH
8926: LD_INT 3
8928: PUSH
8929: EMPTY
8930: LIST
8931: LIST
8932: LIST
8933: ST_TO_ADDR
// if commander = 2 then
8934: LD_EXP 25
8938: PUSH
8939: LD_INT 2
8941: EQUAL
8942: IFFALSE 8963
// chassis := [ us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] ;
8944: LD_ADDR_VAR 0 7
8948: PUSH
8949: LD_INT 3
8951: PUSH
8952: LD_INT 4
8954: PUSH
8955: LD_INT 4
8957: PUSH
8958: EMPTY
8959: LIST
8960: LIST
8961: LIST
8962: ST_TO_ADDR
// if commander = 3 then
8963: LD_EXP 25
8967: PUSH
8968: LD_INT 3
8970: EQUAL
8971: IFFALSE 8992
// chassis := [ us_medium_wheeled , us_morphling , us_morphling ] ;
8973: LD_ADDR_VAR 0 7
8977: PUSH
8978: LD_INT 2
8980: PUSH
8981: LD_INT 5
8983: PUSH
8984: LD_INT 5
8986: PUSH
8987: EMPTY
8988: LIST
8989: LIST
8990: LIST
8991: ST_TO_ADDR
// engines := [ engine_solar , engine_solar , engine_combustion ] ;
8992: LD_ADDR_VAR 0 8
8996: PUSH
8997: LD_INT 2
8999: PUSH
9000: LD_INT 2
9002: PUSH
9003: LD_INT 1
9005: PUSH
9006: EMPTY
9007: LIST
9008: LIST
9009: LIST
9010: ST_TO_ADDR
// if commander = 2 then
9011: LD_EXP 25
9015: PUSH
9016: LD_INT 2
9018: EQUAL
9019: IFFALSE 9040
// engines := [ engine_combustion , engine_combustion , engine_siberite ] ;
9021: LD_ADDR_VAR 0 8
9025: PUSH
9026: LD_INT 1
9028: PUSH
9029: LD_INT 1
9031: PUSH
9032: LD_INT 3
9034: PUSH
9035: EMPTY
9036: LIST
9037: LIST
9038: LIST
9039: ST_TO_ADDR
// if commander = 3 then
9040: LD_EXP 25
9044: PUSH
9045: LD_INT 3
9047: EQUAL
9048: IFFALSE 9069
// engines := [ engine_siberite , engine_siberite , engine_combustion ] ;
9050: LD_ADDR_VAR 0 8
9054: PUSH
9055: LD_INT 3
9057: PUSH
9058: LD_INT 3
9060: PUSH
9061: LD_INT 1
9063: PUSH
9064: EMPTY
9065: LIST
9066: LIST
9067: LIST
9068: ST_TO_ADDR
// weapons := [ us_double_gun , us_light_gun , us_gatling_gun ] ;
9069: LD_ADDR_VAR 0 9
9073: PUSH
9074: LD_INT 5
9076: PUSH
9077: LD_INT 3
9079: PUSH
9080: LD_INT 4
9082: PUSH
9083: EMPTY
9084: LIST
9085: LIST
9086: LIST
9087: ST_TO_ADDR
// if commander = 2 then
9088: LD_EXP 25
9092: PUSH
9093: LD_INT 2
9095: EQUAL
9096: IFFALSE 9117
// weapons := [ us_rocket_launcher , us_double_gun , us_heavy_gun ] ;
9098: LD_ADDR_VAR 0 9
9102: PUSH
9103: LD_INT 7
9105: PUSH
9106: LD_INT 5
9108: PUSH
9109: LD_INT 6
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: LIST
9116: ST_TO_ADDR
// if commander = 3 then
9117: LD_EXP 25
9121: PUSH
9122: LD_INT 3
9124: EQUAL
9125: IFFALSE 9146
// weapons := [ us_laser , us_double_laser , us_rocket_launcher ] ;
9127: LD_ADDR_VAR 0 9
9131: PUSH
9132: LD_INT 9
9134: PUSH
9135: LD_INT 10
9137: PUSH
9138: LD_INT 7
9140: PUSH
9141: EMPTY
9142: LIST
9143: LIST
9144: LIST
9145: ST_TO_ADDR
// tanks := [ 5 , 5 , 4 ] [ Difficulty ] ;
9146: LD_ADDR_VAR 0 5
9150: PUSH
9151: LD_INT 5
9153: PUSH
9154: LD_INT 5
9156: PUSH
9157: LD_INT 4
9159: PUSH
9160: EMPTY
9161: LIST
9162: LIST
9163: LIST
9164: PUSH
9165: LD_OWVAR 67
9169: ARRAY
9170: ST_TO_ADDR
// if commander = 2 then
9171: LD_EXP 25
9175: PUSH
9176: LD_INT 2
9178: EQUAL
9179: IFFALSE 9195
// tanks := tanks + 3 ;
9181: LD_ADDR_VAR 0 5
9185: PUSH
9186: LD_VAR 0 5
9190: PUSH
9191: LD_INT 3
9193: PLUS
9194: ST_TO_ADDR
// for i = 1 to tanks do
9195: LD_ADDR_VAR 0 2
9199: PUSH
9200: DOUBLE
9201: LD_INT 1
9203: DEC
9204: ST_TO_ADDR
9205: LD_VAR 0 5
9209: PUSH
9210: FOR_TO
9211: IFFALSE 9321
// begin PrepareVehicle ( chassis [ i mod 3 + 1 ] , engines [ rand ( 1 , 3 ) ] , control_manual , weapons [ i mod 3 + 1 ] , rand ( 60 , 70 ) ) ;
9213: LD_VAR 0 7
9217: PUSH
9218: LD_VAR 0 2
9222: PUSH
9223: LD_INT 3
9225: MOD
9226: PUSH
9227: LD_INT 1
9229: PLUS
9230: ARRAY
9231: PPUSH
9232: LD_VAR 0 8
9236: PUSH
9237: LD_INT 1
9239: PPUSH
9240: LD_INT 3
9242: PPUSH
9243: CALL_OW 12
9247: ARRAY
9248: PPUSH
9249: LD_INT 1
9251: PPUSH
9252: LD_VAR 0 9
9256: PUSH
9257: LD_VAR 0 2
9261: PUSH
9262: LD_INT 3
9264: MOD
9265: PUSH
9266: LD_INT 1
9268: PLUS
9269: ARRAY
9270: PPUSH
9271: LD_INT 60
9273: PPUSH
9274: LD_INT 70
9276: PPUSH
9277: CALL_OW 12
9281: PPUSH
9282: CALL 24750 0 5
// result := Replace ( result , 1 , result [ 1 ] ^ CreateVehicle ) ;
9286: LD_ADDR_VAR 0 1
9290: PUSH
9291: LD_VAR 0 1
9295: PPUSH
9296: LD_INT 1
9298: PPUSH
9299: LD_VAR 0 1
9303: PUSH
9304: LD_INT 1
9306: ARRAY
9307: PUSH
9308: CALL_OW 45
9312: ADD
9313: PPUSH
9314: CALL_OW 1
9318: ST_TO_ADDR
// end ;
9319: GO 9210
9321: POP
9322: POP
// cl := 1 ;
9323: LD_ADDR_VAR 0 6
9327: PUSH
9328: LD_INT 1
9330: ST_TO_ADDR
// for i = 1 to 10 do
9331: LD_ADDR_VAR 0 2
9335: PUSH
9336: DOUBLE
9337: LD_INT 1
9339: DEC
9340: ST_TO_ADDR
9341: LD_INT 10
9343: PUSH
9344: FOR_TO
9345: IFFALSE 9460
// begin if i mod 4 = 0 then
9347: LD_VAR 0 2
9351: PUSH
9352: LD_INT 4
9354: MOD
9355: PUSH
9356: LD_INT 0
9358: EQUAL
9359: IFFALSE 9375
// cl := cl + 1 ;
9361: LD_ADDR_VAR 0 6
9365: PUSH
9366: LD_VAR 0 6
9370: PUSH
9371: LD_INT 1
9373: PLUS
9374: ST_TO_ADDR
// if cl = 2 then
9375: LD_VAR 0 6
9379: PUSH
9380: LD_INT 2
9382: EQUAL
9383: IFFALSE 9393
// cl := 3 ;
9385: LD_ADDR_VAR 0 6
9389: PUSH
9390: LD_INT 3
9392: ST_TO_ADDR
// PrepareHuman ( false , cl , [ 6 , 6 , 5 ] [ Difficulty ] ) ;
9393: LD_INT 0
9395: PPUSH
9396: LD_VAR 0 6
9400: PPUSH
9401: LD_INT 6
9403: PUSH
9404: LD_INT 6
9406: PUSH
9407: LD_INT 5
9409: PUSH
9410: EMPTY
9411: LIST
9412: LIST
9413: LIST
9414: PUSH
9415: LD_OWVAR 67
9419: ARRAY
9420: PPUSH
9421: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
9425: LD_ADDR_VAR 0 1
9429: PUSH
9430: LD_VAR 0 1
9434: PPUSH
9435: LD_INT 2
9437: PPUSH
9438: LD_VAR 0 1
9442: PUSH
9443: LD_INT 2
9445: ARRAY
9446: PUSH
9447: CALL_OW 44
9451: ADD
9452: PPUSH
9453: CALL_OW 1
9457: ST_TO_ADDR
// end ;
9458: GO 9344
9460: POP
9461: POP
// if commander = 1 then
9462: LD_EXP 25
9466: PUSH
9467: LD_INT 1
9469: EQUAL
9470: IFFALSE 9538
// for i = 1 to 4 do
9472: LD_ADDR_VAR 0 2
9476: PUSH
9477: DOUBLE
9478: LD_INT 1
9480: DEC
9481: ST_TO_ADDR
9482: LD_INT 4
9484: PUSH
9485: FOR_TO
9486: IFFALSE 9536
// begin PrepareHuman ( false , class_soldier , 8 ) ;
9488: LD_INT 0
9490: PPUSH
9491: LD_INT 1
9493: PPUSH
9494: LD_INT 8
9496: PPUSH
9497: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
9501: LD_ADDR_VAR 0 1
9505: PUSH
9506: LD_VAR 0 1
9510: PPUSH
9511: LD_INT 2
9513: PPUSH
9514: LD_VAR 0 1
9518: PUSH
9519: LD_INT 2
9521: ARRAY
9522: PUSH
9523: CALL_OW 44
9527: ADD
9528: PPUSH
9529: CALL_OW 1
9533: ST_TO_ADDR
// end ;
9534: GO 9485
9536: POP
9537: POP
// techs := [ ] ;
9538: LD_ADDR_VAR 0 4
9542: PUSH
9543: EMPTY
9544: ST_TO_ADDR
// if commander = 1 then
9545: LD_EXP 25
9549: PUSH
9550: LD_INT 1
9552: EQUAL
9553: IFFALSE 9578
// techs := [ tech_weap1 , tech_weap2 , tech_weap3 , tech_lasSight ] ;
9555: LD_ADDR_VAR 0 4
9559: PUSH
9560: LD_INT 51
9562: PUSH
9563: LD_INT 52
9565: PUSH
9566: LD_INT 53
9568: PUSH
9569: LD_INT 12
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: ST_TO_ADDR
// if commander = 2 then
9578: LD_EXP 25
9582: PUSH
9583: LD_INT 2
9585: EQUAL
9586: IFFALSE 9623
// techs := [ tech_tech1 , tech_oilEng , tech_oilPow , tech_solEng , tech_solPow , tech_opto1 , tech_radar ] ;
9588: LD_ADDR_VAR 0 4
9592: PUSH
9593: LD_INT 48
9595: PUSH
9596: LD_INT 47
9598: PUSH
9599: LD_INT 46
9601: PUSH
9602: LD_INT 45
9604: PUSH
9605: LD_INT 35
9607: PUSH
9608: LD_INT 60
9610: PUSH
9611: LD_INT 6
9613: PUSH
9614: EMPTY
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: ST_TO_ADDR
// if commander = 3 then
9623: LD_EXP 25
9627: PUSH
9628: LD_INT 3
9630: EQUAL
9631: IFFALSE 9680
// techs := [ tech_advAI , tech_advchassis , tech_ai , tech_comp1 , tech_comp2 , tech_oilEng , tech_oilPow , tech_weap1 , tech_gatling , tech_gun ] ;
9633: LD_ADDR_VAR 0 4
9637: PUSH
9638: LD_INT 27
9640: PUSH
9641: LD_INT 36
9643: PUSH
9644: LD_INT 32
9646: PUSH
9647: LD_INT 57
9649: PUSH
9650: LD_INT 58
9652: PUSH
9653: LD_INT 47
9655: PUSH
9656: LD_INT 46
9658: PUSH
9659: LD_INT 51
9661: PUSH
9662: LD_INT 69
9664: PUSH
9665: LD_INT 39
9667: PUSH
9668: EMPTY
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: LIST
9676: LIST
9677: LIST
9678: LIST
9679: ST_TO_ADDR
// if techs then
9680: LD_VAR 0 4
9684: IFFALSE 9718
// for i in techs do
9686: LD_ADDR_VAR 0 2
9690: PUSH
9691: LD_VAR 0 4
9695: PUSH
9696: FOR_IN
9697: IFFALSE 9716
// SetTech ( i , 1 , state_researched ) ;
9699: LD_VAR 0 2
9703: PPUSH
9704: LD_INT 1
9706: PPUSH
9707: LD_INT 2
9709: PPUSH
9710: CALL_OW 322
9714: GO 9696
9716: POP
9717: POP
// hc_gallery := skirmish ;
9718: LD_ADDR_OWVAR 33
9722: PUSH
9723: LD_STRING skirmish
9725: ST_TO_ADDR
// hc_face_number := commander ;
9726: LD_ADDR_OWVAR 34
9730: PUSH
9731: LD_EXP 25
9735: ST_TO_ADDR
// hc_importance := 100 ;
9736: LD_ADDR_OWVAR 32
9740: PUSH
9741: LD_INT 100
9743: ST_TO_ADDR
// case commander of 1 :
9744: LD_EXP 25
9748: PUSH
9749: LD_INT 1
9751: DOUBLE
9752: EQUAL
9753: IFTRUE 9757
9755: GO 9781
9757: POP
// begin hc_name := Jeff Ironside ;
9758: LD_ADDR_OWVAR 26
9762: PUSH
9763: LD_STRING Jeff Ironside
9765: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
9766: LD_INT 1
9768: PPUSH
9769: LD_INT 1
9771: PPUSH
9772: LD_INT 7
9774: PPUSH
9775: CALL_OW 380
// end ; 2 :
9779: GO 9846
9781: LD_INT 2
9783: DOUBLE
9784: EQUAL
9785: IFTRUE 9789
9787: GO 9813
9789: POP
// begin hc_name := Paul Johnson ;
9790: LD_ADDR_OWVAR 26
9794: PUSH
9795: LD_STRING Paul Johnson
9797: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 7 ) ;
9798: LD_INT 1
9800: PPUSH
9801: LD_INT 3
9803: PPUSH
9804: LD_INT 7
9806: PPUSH
9807: CALL_OW 380
// end ; 3 :
9811: GO 9846
9813: LD_INT 3
9815: DOUBLE
9816: EQUAL
9817: IFTRUE 9821
9819: GO 9845
9821: POP
// begin hc_name := Lisa Stuart ;
9822: LD_ADDR_OWVAR 26
9826: PUSH
9827: LD_STRING Lisa Stuart
9829: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , 7 ) ;
9830: LD_INT 2
9832: PPUSH
9833: LD_INT 4
9835: PPUSH
9836: LD_INT 7
9838: PPUSH
9839: CALL_OW 380
// end ; end ;
9843: GO 9846
9845: POP
// playerCommander := CreateHuman ;
9846: LD_ADDR_EXP 9
9850: PUSH
9851: CALL_OW 44
9855: ST_TO_ADDR
// hc_importance := 0 ;
9856: LD_ADDR_OWVAR 32
9860: PUSH
9861: LD_INT 0
9863: ST_TO_ADDR
// hc_gallery :=  ;
9864: LD_ADDR_OWVAR 33
9868: PUSH
9869: LD_STRING 
9871: ST_TO_ADDR
// result := Replace ( result , 2 , result [ 2 ] ^ playerCommander ) ;
9872: LD_ADDR_VAR 0 1
9876: PUSH
9877: LD_VAR 0 1
9881: PPUSH
9882: LD_INT 2
9884: PPUSH
9885: LD_VAR 0 1
9889: PUSH
9890: LD_INT 2
9892: ARRAY
9893: PUSH
9894: LD_EXP 9
9898: ADD
9899: PPUSH
9900: CALL_OW 1
9904: ST_TO_ADDR
// end ;
9905: LD_VAR 0 1
9909: RET
// export function PrepareReinforcements ; var i , peopleAmount , tmp , un , veh ; begin
9910: LD_INT 0
9912: PPUSH
9913: PPUSH
9914: PPUSH
9915: PPUSH
9916: PPUSH
9917: PPUSH
// uc_side := 1 ;
9918: LD_ADDR_OWVAR 20
9922: PUSH
9923: LD_INT 1
9925: ST_TO_ADDR
// uc_nation := 1 ;
9926: LD_ADDR_OWVAR 21
9930: PUSH
9931: LD_INT 1
9933: ST_TO_ADDR
// InitHc ;
9934: CALL_OW 19
// peopleAmount := [ 3 , 3 , 2 ] [ Difficulty ] ;
9938: LD_ADDR_VAR 0 3
9942: PUSH
9943: LD_INT 3
9945: PUSH
9946: LD_INT 3
9948: PUSH
9949: LD_INT 2
9951: PUSH
9952: EMPTY
9953: LIST
9954: LIST
9955: LIST
9956: PUSH
9957: LD_OWVAR 67
9961: ARRAY
9962: ST_TO_ADDR
// for i = 1 to peopleAmount do
9963: LD_ADDR_VAR 0 2
9967: PUSH
9968: DOUBLE
9969: LD_INT 1
9971: DEC
9972: ST_TO_ADDR
9973: LD_VAR 0 3
9977: PUSH
9978: FOR_TO
9979: IFFALSE 10028
// begin PrepareHuman ( false , 2 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
9981: LD_INT 0
9983: PPUSH
9984: LD_INT 2
9986: PPUSH
9987: LD_INT 7
9989: PUSH
9990: LD_INT 6
9992: PUSH
9993: LD_INT 5
9995: PUSH
9996: EMPTY
9997: LIST
9998: LIST
9999: LIST
10000: PUSH
10001: LD_OWVAR 67
10005: ARRAY
10006: PPUSH
10007: CALL_OW 380
// PlaceUnitInArea ( CreateHuman , startArea , false ) ;
10011: CALL_OW 44
10015: PPUSH
10016: LD_INT 19
10018: PPUSH
10019: LD_INT 0
10021: PPUSH
10022: CALL 55484 0 3
// end ;
10026: GO 9978
10028: POP
10029: POP
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_crane , 58 ) ;
10030: LD_INT 2
10032: PPUSH
10033: LD_INT 1
10035: PPUSH
10036: LD_INT 3
10038: PPUSH
10039: LD_INT 13
10041: PPUSH
10042: LD_INT 58
10044: PPUSH
10045: CALL 24750 0 5
// PlaceUnitInArea ( CreateVehicle , startArea , false ) ;
10049: CALL_OW 45
10053: PPUSH
10054: LD_INT 19
10056: PPUSH
10057: LD_INT 0
10059: PPUSH
10060: CALL 55484 0 3
// if commander = 1 then
10064: LD_EXP 25
10068: PUSH
10069: LD_INT 1
10071: EQUAL
10072: IFFALSE 10083
// wait ( 6 6$00 ) else
10074: LD_INT 12600
10076: PPUSH
10077: CALL_OW 67
10081: GO 10090
// wait ( 8 8$00 ) ;
10083: LD_INT 16800
10085: PPUSH
10086: CALL_OW 67
// uc_side := 1 ;
10090: LD_ADDR_OWVAR 20
10094: PUSH
10095: LD_INT 1
10097: ST_TO_ADDR
// uc_nation := 1 ;
10098: LD_ADDR_OWVAR 21
10102: PUSH
10103: LD_INT 1
10105: ST_TO_ADDR
// InitVc ;
10106: CALL_OW 20
// InitHc ;
10110: CALL_OW 19
// for i = 1 to 5 do
10114: LD_ADDR_VAR 0 2
10118: PUSH
10119: DOUBLE
10120: LD_INT 1
10122: DEC
10123: ST_TO_ADDR
10124: LD_INT 5
10126: PUSH
10127: FOR_TO
10128: IFFALSE 10372
// begin PrepareVehicle ( [ us_heavy_tracked , us_medium_tracked , us_light_wheeled ] [ i mod 3 + 1 ] , engine_combustion , [ control_manual , control_computer , control_computer ] [ i mod 3 + 1 ] , [ us_heavy_gun , us_cargo_bay , us_radar ] [ i mod 3 + 1 ] , rand ( 40 , 55 ) ) ;
10130: LD_INT 4
10132: PUSH
10133: LD_INT 3
10135: PUSH
10136: LD_INT 1
10138: PUSH
10139: EMPTY
10140: LIST
10141: LIST
10142: LIST
10143: PUSH
10144: LD_VAR 0 2
10148: PUSH
10149: LD_INT 3
10151: MOD
10152: PUSH
10153: LD_INT 1
10155: PLUS
10156: ARRAY
10157: PPUSH
10158: LD_INT 1
10160: PPUSH
10161: LD_INT 1
10163: PUSH
10164: LD_INT 3
10166: PUSH
10167: LD_INT 3
10169: PUSH
10170: EMPTY
10171: LIST
10172: LIST
10173: LIST
10174: PUSH
10175: LD_VAR 0 2
10179: PUSH
10180: LD_INT 3
10182: MOD
10183: PUSH
10184: LD_INT 1
10186: PLUS
10187: ARRAY
10188: PPUSH
10189: LD_INT 6
10191: PUSH
10192: LD_INT 12
10194: PUSH
10195: LD_INT 11
10197: PUSH
10198: EMPTY
10199: LIST
10200: LIST
10201: LIST
10202: PUSH
10203: LD_VAR 0 2
10207: PUSH
10208: LD_INT 3
10210: MOD
10211: PUSH
10212: LD_INT 1
10214: PLUS
10215: ARRAY
10216: PPUSH
10217: LD_INT 40
10219: PPUSH
10220: LD_INT 55
10222: PPUSH
10223: CALL_OW 12
10227: PPUSH
10228: CALL 24750 0 5
// veh := CreateVehicle ;
10232: LD_ADDR_VAR 0 6
10236: PUSH
10237: CALL_OW 45
10241: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
10242: LD_VAR 0 6
10246: PPUSH
10247: LD_INT 19
10249: PPUSH
10250: LD_INT 0
10252: PPUSH
10253: CALL 55484 0 3
// if GetWeapon ( veh ) = us_cargo_bay then
10257: LD_VAR 0 6
10261: PPUSH
10262: CALL_OW 264
10266: PUSH
10267: LD_INT 12
10269: EQUAL
10270: IFFALSE 10302
// begin AddCargo ( veh , mat_cans , 70 ) ;
10272: LD_VAR 0 6
10276: PPUSH
10277: LD_INT 1
10279: PPUSH
10280: LD_INT 70
10282: PPUSH
10283: CALL_OW 291
// AddCargo ( veh , mat_siberit , 30 ) ;
10287: LD_VAR 0 6
10291: PPUSH
10292: LD_INT 3
10294: PPUSH
10295: LD_INT 30
10297: PPUSH
10298: CALL_OW 291
// end ; if GetControl ( veh ) = control_manual then
10302: LD_VAR 0 6
10306: PPUSH
10307: CALL_OW 263
10311: PUSH
10312: LD_INT 1
10314: EQUAL
10315: IFFALSE 10370
// begin PrepareHuman ( sex_male , 3 , 6 ) ;
10317: LD_INT 1
10319: PPUSH
10320: LD_INT 3
10322: PPUSH
10323: LD_INT 6
10325: PPUSH
10326: CALL_OW 380
// un := CreateHuman ;
10330: LD_ADDR_VAR 0 5
10334: PUSH
10335: CALL_OW 44
10339: ST_TO_ADDR
// tmp := tmp ^ un ;
10340: LD_ADDR_VAR 0 4
10344: PUSH
10345: LD_VAR 0 4
10349: PUSH
10350: LD_VAR 0 5
10354: ADD
10355: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
10356: LD_VAR 0 5
10360: PPUSH
10361: LD_VAR 0 6
10365: PPUSH
10366: CALL_OW 52
// end ; end ;
10370: GO 10127
10372: POP
10373: POP
// if tmp then
10374: LD_VAR 0 4
10378: IFFALSE 10442
// begin CenterNowOnUnits ( tmp ) ;
10380: LD_VAR 0 4
10384: PPUSH
10385: CALL_OW 87
// Say ( tmp [ 1 ] , DAR-1 ) ;
10389: LD_VAR 0 4
10393: PUSH
10394: LD_INT 1
10396: ARRAY
10397: PPUSH
10398: LD_STRING DAR-1
10400: PPUSH
10401: CALL_OW 88
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-DAR ) ;
10405: LD_EXP 9
10409: PPUSH
10410: LD_STRING D
10412: PUSH
10413: LD_STRING I
10415: PUSH
10416: LD_STRING J
10418: PUSH
10419: LD_STRING S
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: LIST
10426: PUSH
10427: LD_EXP 25
10431: ARRAY
10432: STR
10433: PUSH
10434: LD_STRING -1-DAR
10436: STR
10437: PPUSH
10438: CALL_OW 88
// end ; if not reinforceAllowed then
10442: LD_EXP 24
10446: NOT
10447: IFFALSE 10451
// exit ;
10449: GO 10605
// wait ( 25 25$00 ) ;
10451: LD_INT 52500
10453: PPUSH
10454: CALL_OW 67
// uc_side := 1 ;
10458: LD_ADDR_OWVAR 20
10462: PUSH
10463: LD_INT 1
10465: ST_TO_ADDR
// uc_nation := 1 ;
10466: LD_ADDR_OWVAR 21
10470: PUSH
10471: LD_INT 1
10473: ST_TO_ADDR
// InitVc ;
10474: CALL_OW 20
// InitHc ;
10478: CALL_OW 19
// for i = 1 to 4 do
10482: LD_ADDR_VAR 0 2
10486: PUSH
10487: DOUBLE
10488: LD_INT 1
10490: DEC
10491: ST_TO_ADDR
10492: LD_INT 4
10494: PUSH
10495: FOR_TO
10496: IFFALSE 10603
// begin PrepareVehicle ( us_morphling , engine_siberite , control_manual , us_heavy_gun , 1 ) ;
10498: LD_INT 5
10500: PPUSH
10501: LD_INT 3
10503: PPUSH
10504: LD_INT 1
10506: PPUSH
10507: LD_INT 6
10509: PPUSH
10510: LD_INT 1
10512: PPUSH
10513: CALL 24750 0 5
// veh := CreateVehicle ;
10517: LD_ADDR_VAR 0 6
10521: PUSH
10522: CALL_OW 45
10526: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
10527: LD_VAR 0 6
10531: PPUSH
10532: LD_INT 19
10534: PPUSH
10535: LD_INT 0
10537: PPUSH
10538: CALL 55484 0 3
// if GetControl ( veh ) = control_manual then
10542: LD_VAR 0 6
10546: PPUSH
10547: CALL_OW 263
10551: PUSH
10552: LD_INT 1
10554: EQUAL
10555: IFFALSE 10601
// begin PrepareHuman ( false , 3 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
10557: LD_INT 0
10559: PPUSH
10560: LD_INT 3
10562: PPUSH
10563: LD_INT 7
10565: PUSH
10566: LD_INT 6
10568: PUSH
10569: LD_INT 5
10571: PUSH
10572: EMPTY
10573: LIST
10574: LIST
10575: LIST
10576: PUSH
10577: LD_OWVAR 67
10581: ARRAY
10582: PPUSH
10583: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10587: CALL_OW 44
10591: PPUSH
10592: LD_VAR 0 6
10596: PPUSH
10597: CALL_OW 52
// end ; end ;
10601: GO 10495
10603: POP
10604: POP
// end ;
10605: LD_VAR 0 1
10609: RET
// export function PrepareLegionReinforcements ; var i , un , j , tmp ; begin
10610: LD_INT 0
10612: PPUSH
10613: PPUSH
10614: PPUSH
10615: PPUSH
10616: PPUSH
// uc_side := 8 ;
10617: LD_ADDR_OWVAR 20
10621: PUSH
10622: LD_INT 8
10624: ST_TO_ADDR
// uc_nation := nation_arabian ;
10625: LD_ADDR_OWVAR 21
10629: PUSH
10630: LD_INT 2
10632: ST_TO_ADDR
// for i = 1 to 2 do
10633: LD_ADDR_VAR 0 2
10637: PUSH
10638: DOUBLE
10639: LD_INT 1
10641: DEC
10642: ST_TO_ADDR
10643: LD_INT 2
10645: PUSH
10646: FOR_TO
10647: IFFALSE 10727
// for j = 1 to 4 do
10649: LD_ADDR_VAR 0 4
10653: PUSH
10654: DOUBLE
10655: LD_INT 1
10657: DEC
10658: ST_TO_ADDR
10659: LD_INT 4
10661: PUSH
10662: FOR_TO
10663: IFFALSE 10723
// begin PrepareHuman ( false , j , 8 ) ;
10665: LD_INT 0
10667: PPUSH
10668: LD_VAR 0 4
10672: PPUSH
10673: LD_INT 8
10675: PPUSH
10676: CALL_OW 380
// un := CreateHuman ;
10680: LD_ADDR_VAR 0 3
10684: PUSH
10685: CALL_OW 44
10689: ST_TO_ADDR
// PlaceUnitArea ( un , legionSpawn , false ) ;
10690: LD_VAR 0 3
10694: PPUSH
10695: LD_INT 23
10697: PPUSH
10698: LD_INT 0
10700: PPUSH
10701: CALL_OW 49
// tmp := tmp union un ;
10705: LD_ADDR_VAR 0 5
10709: PUSH
10710: LD_VAR 0 5
10714: PUSH
10715: LD_VAR 0 3
10719: UNION
10720: ST_TO_ADDR
// end ;
10721: GO 10662
10723: POP
10724: POP
10725: GO 10646
10727: POP
10728: POP
// for i in tmp do
10729: LD_ADDR_VAR 0 2
10733: PUSH
10734: LD_VAR 0 5
10738: PUSH
10739: FOR_IN
10740: IFFALSE 10759
// ComMoveXY ( i , 150 , 136 ) ;
10742: LD_VAR 0 2
10746: PPUSH
10747: LD_INT 150
10749: PPUSH
10750: LD_INT 136
10752: PPUSH
10753: CALL_OW 111
10757: GO 10739
10759: POP
10760: POP
// mc_bases := Replace ( mc_bases , mc_leg , mc_bases [ mc_leg ] union tmp ) ;
10761: LD_ADDR_EXP 50
10765: PUSH
10766: LD_EXP 50
10770: PPUSH
10771: LD_EXP 6
10775: PPUSH
10776: LD_EXP 50
10780: PUSH
10781: LD_EXP 6
10785: ARRAY
10786: PUSH
10787: LD_VAR 0 5
10791: UNION
10792: PPUSH
10793: CALL_OW 1
10797: ST_TO_ADDR
// end ;
10798: LD_VAR 0 1
10802: RET
// every 0 0$10 trigger Difficulty > 1 and GetTech ( tech_lapser , 3 ) = state_researched do
10803: LD_OWVAR 67
10807: PUSH
10808: LD_INT 1
10810: GREATER
10811: PUSH
10812: LD_INT 31
10814: PPUSH
10815: LD_INT 3
10817: PPUSH
10818: CALL_OW 321
10822: PUSH
10823: LD_INT 2
10825: EQUAL
10826: AND
10827: IFFALSE 11044
10829: GO 10831
10831: DISABLE
// begin MC_InsertBuildingList ( mc_rus_1 , [ [ b_turret , 101 , 159 , 5 ] , [ b_turret , 105 , 158 , 5 ] , [ b_turret , 96 , 136 , 5 ] , [ b_turret , 94 , 133 , 4 ] , [ b_turret , 84 , 102 , 4 ] ] ) ;
10832: LD_EXP 7
10836: PPUSH
10837: LD_INT 33
10839: PUSH
10840: LD_INT 101
10842: PUSH
10843: LD_INT 159
10845: PUSH
10846: LD_INT 5
10848: PUSH
10849: EMPTY
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: PUSH
10855: LD_INT 33
10857: PUSH
10858: LD_INT 105
10860: PUSH
10861: LD_INT 158
10863: PUSH
10864: LD_INT 5
10866: PUSH
10867: EMPTY
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: PUSH
10873: LD_INT 33
10875: PUSH
10876: LD_INT 96
10878: PUSH
10879: LD_INT 136
10881: PUSH
10882: LD_INT 5
10884: PUSH
10885: EMPTY
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: PUSH
10891: LD_INT 33
10893: PUSH
10894: LD_INT 94
10896: PUSH
10897: LD_INT 133
10899: PUSH
10900: LD_INT 4
10902: PUSH
10903: EMPTY
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: PUSH
10909: LD_INT 33
10911: PUSH
10912: LD_INT 84
10914: PUSH
10915: LD_INT 102
10917: PUSH
10918: LD_INT 4
10920: PUSH
10921: EMPTY
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: PUSH
10927: EMPTY
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: PPUSH
10934: CALL 84201 0 2
// MC_InsertBuildingList ( mc_rus_2 , [ [ b_turret , 50 , 17 , 4 ] , [ b_turret , 52 , 20 , 4 ] , [ b_turret , 53 , 23 , 4 ] , [ b_turret , 45 , 32 , 4 ] , [ b_turret , 45 , 39 , 4 ] ] ) ;
10938: LD_EXP 8
10942: PPUSH
10943: LD_INT 33
10945: PUSH
10946: LD_INT 50
10948: PUSH
10949: LD_INT 17
10951: PUSH
10952: LD_INT 4
10954: PUSH
10955: EMPTY
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: PUSH
10961: LD_INT 33
10963: PUSH
10964: LD_INT 52
10966: PUSH
10967: LD_INT 20
10969: PUSH
10970: LD_INT 4
10972: PUSH
10973: EMPTY
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: PUSH
10979: LD_INT 33
10981: PUSH
10982: LD_INT 53
10984: PUSH
10985: LD_INT 23
10987: PUSH
10988: LD_INT 4
10990: PUSH
10991: EMPTY
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: PUSH
10997: LD_INT 33
10999: PUSH
11000: LD_INT 45
11002: PUSH
11003: LD_INT 32
11005: PUSH
11006: LD_INT 4
11008: PUSH
11009: EMPTY
11010: LIST
11011: LIST
11012: LIST
11013: LIST
11014: PUSH
11015: LD_INT 33
11017: PUSH
11018: LD_INT 45
11020: PUSH
11021: LD_INT 39
11023: PUSH
11024: LD_INT 4
11026: PUSH
11027: EMPTY
11028: LIST
11029: LIST
11030: LIST
11031: LIST
11032: PUSH
11033: EMPTY
11034: LIST
11035: LIST
11036: LIST
11037: LIST
11038: LIST
11039: PPUSH
11040: CALL 84201 0 2
// end ;
11044: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_not , [ f_side , your_side ] ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) do var i , tmp ;
11045: LD_INT 3
11047: PUSH
11048: LD_INT 22
11050: PUSH
11051: LD_OWVAR 2
11055: PUSH
11056: EMPTY
11057: LIST
11058: LIST
11059: PUSH
11060: EMPTY
11061: LIST
11062: LIST
11063: PUSH
11064: LD_INT 33
11066: PUSH
11067: LD_INT 2
11069: PUSH
11070: EMPTY
11071: LIST
11072: LIST
11073: PUSH
11074: LD_INT 50
11076: PUSH
11077: EMPTY
11078: LIST
11079: PUSH
11080: LD_INT 3
11082: PUSH
11083: LD_INT 61
11085: PUSH
11086: EMPTY
11087: LIST
11088: PUSH
11089: EMPTY
11090: LIST
11091: LIST
11092: PUSH
11093: EMPTY
11094: LIST
11095: LIST
11096: LIST
11097: LIST
11098: PPUSH
11099: CALL_OW 69
11103: IFFALSE 11203
11105: GO 11107
11107: DISABLE
11108: LD_INT 0
11110: PPUSH
11111: PPUSH
// begin enable ;
11112: ENABLE
// tmp := FilterAllUnits ( [ [ f_not , [ f_side , your_side ] ] , [ f_control , control_remote ] , [ f_ok ] , [ f_not , [ f_linked ] ] ] ) ;
11113: LD_ADDR_VAR 0 2
11117: PUSH
11118: LD_INT 3
11120: PUSH
11121: LD_INT 22
11123: PUSH
11124: LD_OWVAR 2
11128: PUSH
11129: EMPTY
11130: LIST
11131: LIST
11132: PUSH
11133: EMPTY
11134: LIST
11135: LIST
11136: PUSH
11137: LD_INT 33
11139: PUSH
11140: LD_INT 2
11142: PUSH
11143: EMPTY
11144: LIST
11145: LIST
11146: PUSH
11147: LD_INT 50
11149: PUSH
11150: EMPTY
11151: LIST
11152: PUSH
11153: LD_INT 3
11155: PUSH
11156: LD_INT 61
11158: PUSH
11159: EMPTY
11160: LIST
11161: PUSH
11162: EMPTY
11163: LIST
11164: LIST
11165: PUSH
11166: EMPTY
11167: LIST
11168: LIST
11169: LIST
11170: LIST
11171: PPUSH
11172: CALL_OW 69
11176: ST_TO_ADDR
// for i in tmp do
11177: LD_ADDR_VAR 0 1
11181: PUSH
11182: LD_VAR 0 2
11186: PUSH
11187: FOR_IN
11188: IFFALSE 11201
// Connect ( i ) ;
11190: LD_VAR 0 1
11194: PPUSH
11195: CALL 27843 0 1
11199: GO 11187
11201: POP
11202: POP
// end ; end_of_file
11203: PPOPN 2
11205: END
// export function Action ; var i , tmp ; begin
11206: LD_INT 0
11208: PPUSH
11209: PPUSH
11210: PPUSH
// InGameOn ;
11211: CALL_OW 8
// CenterNowOnXY ( 225 , 217 ) ;
11215: LD_INT 225
11217: PPUSH
11218: LD_INT 217
11220: PPUSH
11221: CALL_OW 86
// for i in playerForces [ 2 ] do
11225: LD_ADDR_VAR 0 2
11229: PUSH
11230: LD_EXP 10
11234: PUSH
11235: LD_INT 2
11237: ARRAY
11238: PUSH
11239: FOR_IN
11240: IFFALSE 11373
// begin if playerForces [ 1 ] and GetClass ( i ) in [ 3 , 4 ] then
11242: LD_EXP 10
11246: PUSH
11247: LD_INT 1
11249: ARRAY
11250: PUSH
11251: LD_VAR 0 2
11255: PPUSH
11256: CALL_OW 257
11260: PUSH
11261: LD_INT 3
11263: PUSH
11264: LD_INT 4
11266: PUSH
11267: EMPTY
11268: LIST
11269: LIST
11270: IN
11271: AND
11272: IFFALSE 11356
// begin PlaceUnitInArea ( playerForces [ 1 ] [ 1 ] , startArea , false ) ;
11274: LD_EXP 10
11278: PUSH
11279: LD_INT 1
11281: ARRAY
11282: PUSH
11283: LD_INT 1
11285: ARRAY
11286: PPUSH
11287: LD_INT 19
11289: PPUSH
11290: LD_INT 0
11292: PPUSH
11293: CALL 55484 0 3
// PlaceHumanInUnit ( i , playerForces [ 1 ] [ 1 ] ) ;
11297: LD_VAR 0 2
11301: PPUSH
11302: LD_EXP 10
11306: PUSH
11307: LD_INT 1
11309: ARRAY
11310: PUSH
11311: LD_INT 1
11313: ARRAY
11314: PPUSH
11315: CALL_OW 52
// playerForces := Replace ( playerForces , 1 , Delete ( playerForces [ 1 ] , 1 ) ) ;
11319: LD_ADDR_EXP 10
11323: PUSH
11324: LD_EXP 10
11328: PPUSH
11329: LD_INT 1
11331: PPUSH
11332: LD_EXP 10
11336: PUSH
11337: LD_INT 1
11339: ARRAY
11340: PPUSH
11341: LD_INT 1
11343: PPUSH
11344: CALL_OW 3
11348: PPUSH
11349: CALL_OW 1
11353: ST_TO_ADDR
// end else
11354: GO 11371
// PlaceUnitInArea ( i , startArea , false ) ;
11356: LD_VAR 0 2
11360: PPUSH
11361: LD_INT 19
11363: PPUSH
11364: LD_INT 0
11366: PPUSH
11367: CALL 55484 0 3
// end ;
11371: GO 11239
11373: POP
11374: POP
// wait ( 0 0$2 ) ;
11375: LD_INT 70
11377: PPUSH
11378: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1 ) ;
11382: LD_EXP 9
11386: PPUSH
11387: LD_STRING D
11389: PUSH
11390: LD_STRING I
11392: PUSH
11393: LD_STRING J
11395: PUSH
11396: LD_STRING S
11398: PUSH
11399: EMPTY
11400: LIST
11401: LIST
11402: LIST
11403: PUSH
11404: LD_EXP 25
11408: ARRAY
11409: STR
11410: PUSH
11411: LD_STRING -1
11413: STR
11414: PPUSH
11415: CALL_OW 88
// SayRadio ( Powell , DP-1 ) ;
11419: LD_EXP 12
11423: PPUSH
11424: LD_STRING DP-1
11426: PPUSH
11427: CALL_OW 94
// SayRadio ( Powell , DP-2 ) ;
11431: LD_EXP 12
11435: PPUSH
11436: LD_STRING DP-2
11438: PPUSH
11439: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2 ) ;
11443: LD_EXP 9
11447: PPUSH
11448: LD_STRING D
11450: PUSH
11451: LD_STRING I
11453: PUSH
11454: LD_STRING J
11456: PUSH
11457: LD_STRING S
11459: PUSH
11460: EMPTY
11461: LIST
11462: LIST
11463: LIST
11464: PUSH
11465: LD_EXP 25
11469: ARRAY
11470: STR
11471: PUSH
11472: LD_STRING -2
11474: STR
11475: PPUSH
11476: CALL_OW 88
// InGameOff ;
11480: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
11484: LD_STRING O1
11486: PPUSH
11487: CALL_OW 337
// game := true ;
11491: LD_ADDR_EXP 3
11495: PUSH
11496: LD_INT 1
11498: ST_TO_ADDR
// SaveForQuickRestart ;
11499: CALL_OW 22
// wait ( 0 0$5 ) ;
11503: LD_INT 175
11505: PPUSH
11506: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3 ) ;
11510: LD_EXP 9
11514: PPUSH
11515: LD_STRING D
11517: PUSH
11518: LD_STRING I
11520: PUSH
11521: LD_STRING J
11523: PUSH
11524: LD_STRING S
11526: PUSH
11527: EMPTY
11528: LIST
11529: LIST
11530: LIST
11531: PUSH
11532: LD_EXP 25
11536: ARRAY
11537: STR
11538: PUSH
11539: LD_STRING -3
11541: STR
11542: PPUSH
11543: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
11547: LD_INT 35
11549: PPUSH
11550: CALL_OW 67
// until ruEscape [ 1 ] >= ruEscape [ 2 ] ;
11554: LD_EXP 15
11558: PUSH
11559: LD_INT 1
11561: ARRAY
11562: PUSH
11563: LD_EXP 15
11567: PUSH
11568: LD_INT 2
11570: ARRAY
11571: GREATEREQUAL
11572: IFFALSE 11547
// outpostEscape := true ;
11574: LD_ADDR_EXP 27
11578: PUSH
11579: LD_INT 1
11581: ST_TO_ADDR
// tmp := UnitFilter ( ruOutpost , [ f_sex , sex_male ] ) ;
11582: LD_ADDR_VAR 0 3
11586: PUSH
11587: LD_EXP 14
11591: PPUSH
11592: LD_INT 26
11594: PUSH
11595: LD_INT 1
11597: PUSH
11598: EMPTY
11599: LIST
11600: LIST
11601: PPUSH
11602: CALL_OW 72
11606: ST_TO_ADDR
// if tmp then
11607: LD_VAR 0 3
11611: IFFALSE 11629
// Say ( tmp [ 1 ] , DR-1-Escape ) ;
11613: LD_VAR 0 3
11617: PUSH
11618: LD_INT 1
11620: ARRAY
11621: PPUSH
11622: LD_STRING DR-1-Escape
11624: PPUSH
11625: CALL_OW 88
// wait ( 0 0$1 ) ;
11629: LD_INT 35
11631: PPUSH
11632: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Escape ) ;
11636: LD_EXP 9
11640: PPUSH
11641: LD_STRING D
11643: PUSH
11644: LD_STRING I
11646: PUSH
11647: LD_STRING J
11649: PUSH
11650: LD_STRING S
11652: PUSH
11653: EMPTY
11654: LIST
11655: LIST
11656: LIST
11657: PUSH
11658: LD_EXP 25
11662: ARRAY
11663: STR
11664: PUSH
11665: LD_STRING -1-Escape
11667: STR
11668: PPUSH
11669: CALL_OW 88
// for i in ruOutpost do
11673: LD_ADDR_VAR 0 2
11677: PUSH
11678: LD_EXP 14
11682: PUSH
11683: FOR_IN
11684: IFFALSE 11738
// begin if IsInUnit ( i ) then
11686: LD_VAR 0 2
11690: PPUSH
11691: CALL_OW 310
11695: IFFALSE 11706
// ComExitBuilding ( i ) ;
11697: LD_VAR 0 2
11701: PPUSH
11702: CALL_OW 122
// AddComMoveXY ( i , 179 , 102 ) ;
11706: LD_VAR 0 2
11710: PPUSH
11711: LD_INT 179
11713: PPUSH
11714: LD_INT 102
11716: PPUSH
11717: CALL_OW 171
// AddComMoveXY ( i , 28 , 20 ) ;
11721: LD_VAR 0 2
11725: PPUSH
11726: LD_INT 28
11728: PPUSH
11729: LD_INT 20
11731: PPUSH
11732: CALL_OW 171
// end ;
11736: GO 11683
11738: POP
11739: POP
// tmp := [ ] ;
11740: LD_ADDR_VAR 0 3
11744: PUSH
11745: EMPTY
11746: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
11747: LD_INT 35
11749: PPUSH
11750: CALL_OW 67
// tmp := UnitFilter ( ruOutpost , [ f_inarea , rus2Base ] ) ;
11754: LD_ADDR_VAR 0 3
11758: PUSH
11759: LD_EXP 14
11763: PPUSH
11764: LD_INT 95
11766: PUSH
11767: LD_INT 11
11769: PUSH
11770: EMPTY
11771: LIST
11772: LIST
11773: PPUSH
11774: CALL_OW 72
11778: ST_TO_ADDR
// if tmp then
11779: LD_VAR 0 3
11783: IFFALSE 11862
// for i in tmp do
11785: LD_ADDR_VAR 0 2
11789: PUSH
11790: LD_VAR 0 3
11794: PUSH
11795: FOR_IN
11796: IFFALSE 11860
// begin ruOutpost := ruOutpost diff i ;
11798: LD_ADDR_EXP 14
11802: PUSH
11803: LD_EXP 14
11807: PUSH
11808: LD_VAR 0 2
11812: DIFF
11813: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ mc_rus_2 , mc_bases [ mc_rus_2 ] + 1 ] , i ) ;
11814: LD_ADDR_EXP 50
11818: PUSH
11819: LD_EXP 50
11823: PPUSH
11824: LD_EXP 8
11828: PUSH
11829: LD_EXP 50
11833: PUSH
11834: LD_EXP 8
11838: ARRAY
11839: PUSH
11840: LD_INT 1
11842: PLUS
11843: PUSH
11844: EMPTY
11845: LIST
11846: LIST
11847: PPUSH
11848: LD_VAR 0 2
11852: PPUSH
11853: CALL 24872 0 3
11857: ST_TO_ADDR
// end ;
11858: GO 11795
11860: POP
11861: POP
// until not UnitFilter ( ruOutpost , [ f_type , unit_human ] ) ;
11862: LD_EXP 14
11866: PPUSH
11867: LD_INT 21
11869: PUSH
11870: LD_INT 1
11872: PUSH
11873: EMPTY
11874: LIST
11875: LIST
11876: PPUSH
11877: CALL_OW 72
11881: NOT
11882: IFFALSE 11747
// ruOutpost := [ ] ;
11884: LD_ADDR_EXP 14
11888: PUSH
11889: EMPTY
11890: ST_TO_ADDR
// end ;
11891: LD_VAR 0 1
11895: RET
// every 0 0$1 trigger outpostEscape do var i , tmp ;
11896: LD_EXP 27
11900: IFFALSE 12089
11902: GO 11904
11904: DISABLE
11905: LD_INT 0
11907: PPUSH
11908: PPUSH
// begin wait ( rand ( 0 0$25 , 0 0$35 ) ) ;
11909: LD_INT 875
11911: PPUSH
11912: LD_INT 1225
11914: PPUSH
11915: CALL_OW 12
11919: PPUSH
11920: CALL_OW 67
// tmp := [ [ 208 , 166 ] , [ 218 , 174 ] , [ 201 , 173 ] , [ 189 , 167 ] , [ 191 , 160 ] , [ 209 , 181 ] , [ 192 , 162 ] , [ 197 , 166 ] ] ;
11924: LD_ADDR_VAR 0 2
11928: PUSH
11929: LD_INT 208
11931: PUSH
11932: LD_INT 166
11934: PUSH
11935: EMPTY
11936: LIST
11937: LIST
11938: PUSH
11939: LD_INT 218
11941: PUSH
11942: LD_INT 174
11944: PUSH
11945: EMPTY
11946: LIST
11947: LIST
11948: PUSH
11949: LD_INT 201
11951: PUSH
11952: LD_INT 173
11954: PUSH
11955: EMPTY
11956: LIST
11957: LIST
11958: PUSH
11959: LD_INT 189
11961: PUSH
11962: LD_INT 167
11964: PUSH
11965: EMPTY
11966: LIST
11967: LIST
11968: PUSH
11969: LD_INT 191
11971: PUSH
11972: LD_INT 160
11974: PUSH
11975: EMPTY
11976: LIST
11977: LIST
11978: PUSH
11979: LD_INT 209
11981: PUSH
11982: LD_INT 181
11984: PUSH
11985: EMPTY
11986: LIST
11987: LIST
11988: PUSH
11989: LD_INT 192
11991: PUSH
11992: LD_INT 162
11994: PUSH
11995: EMPTY
11996: LIST
11997: LIST
11998: PUSH
11999: LD_INT 197
12001: PUSH
12002: LD_INT 166
12004: PUSH
12005: EMPTY
12006: LIST
12007: LIST
12008: PUSH
12009: EMPTY
12010: LIST
12011: LIST
12012: LIST
12013: LIST
12014: LIST
12015: LIST
12016: LIST
12017: LIST
12018: ST_TO_ADDR
// for i = 1 to 5 + Difficulty do
12019: LD_ADDR_VAR 0 1
12023: PUSH
12024: DOUBLE
12025: LD_INT 1
12027: DEC
12028: ST_TO_ADDR
12029: LD_INT 5
12031: PUSH
12032: LD_OWVAR 67
12036: PLUS
12037: PUSH
12038: FOR_TO
12039: IFFALSE 12087
// begin MineExplosion ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , 1 ) ;
12041: LD_VAR 0 2
12045: PUSH
12046: LD_VAR 0 1
12050: ARRAY
12051: PUSH
12052: LD_INT 1
12054: ARRAY
12055: PPUSH
12056: LD_VAR 0 2
12060: PUSH
12061: LD_VAR 0 1
12065: ARRAY
12066: PUSH
12067: LD_INT 2
12069: ARRAY
12070: PPUSH
12071: LD_INT 1
12073: PPUSH
12074: CALL_OW 453
// wait ( 0 0$0.8 ) ;
12078: LD_INT 28
12080: PPUSH
12081: CALL_OW 67
// end ;
12085: GO 12038
12087: POP
12088: POP
// end ;
12089: PPOPN 2
12091: END
// every 0 0$3 trigger not outpostEscape do var tmp , engs , buildings , empty , i , j , k ;
12092: LD_EXP 27
12096: NOT
12097: IFFALSE 12751
12099: GO 12101
12101: DISABLE
12102: LD_INT 0
12104: PPUSH
12105: PPUSH
12106: PPUSH
12107: PPUSH
12108: PPUSH
12109: PPUSH
12110: PPUSH
// begin enable ;
12111: ENABLE
// tmp := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_class , 1 ] ] ) ;
12112: LD_ADDR_VAR 0 1
12116: PUSH
12117: LD_EXP 14
12121: PPUSH
12122: LD_INT 22
12124: PUSH
12125: LD_INT 3
12127: PUSH
12128: EMPTY
12129: LIST
12130: LIST
12131: PUSH
12132: LD_INT 25
12134: PUSH
12135: LD_INT 1
12137: PUSH
12138: EMPTY
12139: LIST
12140: LIST
12141: PUSH
12142: EMPTY
12143: LIST
12144: LIST
12145: PPUSH
12146: CALL_OW 72
12150: ST_TO_ADDR
// engs := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_class , 2 ] ] ) ;
12151: LD_ADDR_VAR 0 2
12155: PUSH
12156: LD_EXP 14
12160: PPUSH
12161: LD_INT 22
12163: PUSH
12164: LD_INT 3
12166: PUSH
12167: EMPTY
12168: LIST
12169: LIST
12170: PUSH
12171: LD_INT 25
12173: PUSH
12174: LD_INT 2
12176: PUSH
12177: EMPTY
12178: LIST
12179: LIST
12180: PUSH
12181: EMPTY
12182: LIST
12183: LIST
12184: PPUSH
12185: CALL_OW 72
12189: ST_TO_ADDR
// buildings := UnitFilter ( ruOutpost , [ [ f_side , 3 ] , [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
12190: LD_ADDR_VAR 0 3
12194: PUSH
12195: LD_EXP 14
12199: PPUSH
12200: LD_INT 22
12202: PUSH
12203: LD_INT 3
12205: PUSH
12206: EMPTY
12207: LIST
12208: LIST
12209: PUSH
12210: LD_INT 21
12212: PUSH
12213: LD_INT 3
12215: PUSH
12216: EMPTY
12217: LIST
12218: LIST
12219: PUSH
12220: LD_INT 3
12222: PUSH
12223: LD_INT 24
12225: PUSH
12226: LD_INT 1000
12228: PUSH
12229: EMPTY
12230: LIST
12231: LIST
12232: PUSH
12233: EMPTY
12234: LIST
12235: LIST
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: LIST
12241: PPUSH
12242: CALL_OW 72
12246: ST_TO_ADDR
// if engs and buildings then
12247: LD_VAR 0 2
12251: PUSH
12252: LD_VAR 0 3
12256: AND
12257: IFFALSE 12330
// begin for i in engs do
12259: LD_ADDR_VAR 0 5
12263: PUSH
12264: LD_VAR 0 2
12268: PUSH
12269: FOR_IN
12270: IFFALSE 12326
// if IsInUnit ( i ) then
12272: LD_VAR 0 5
12276: PPUSH
12277: CALL_OW 310
12281: IFFALSE 12294
// ComExitBuilding ( i ) else
12283: LD_VAR 0 5
12287: PPUSH
12288: CALL_OW 122
12292: GO 12324
// if not HasTask ( i ) then
12294: LD_VAR 0 5
12298: PPUSH
12299: CALL_OW 314
12303: NOT
12304: IFFALSE 12324
// ComRepairBuilding ( i , buildings [ 1 ] ) ;
12306: LD_VAR 0 5
12310: PPUSH
12311: LD_VAR 0 3
12315: PUSH
12316: LD_INT 1
12318: ARRAY
12319: PPUSH
12320: CALL_OW 130
12324: GO 12269
12326: POP
12327: POP
// end else
12328: GO 12433
// if not buildings and UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) and UnitFilter ( engs , [ f_not , [ f_inside ] ] ) then
12330: LD_VAR 0 3
12334: NOT
12335: PUSH
12336: LD_EXP 14
12340: PPUSH
12341: LD_INT 30
12343: PUSH
12344: LD_INT 0
12346: PUSH
12347: EMPTY
12348: LIST
12349: LIST
12350: PPUSH
12351: CALL_OW 72
12355: AND
12356: PUSH
12357: LD_VAR 0 2
12361: PPUSH
12362: LD_INT 3
12364: PUSH
12365: LD_INT 54
12367: PUSH
12368: EMPTY
12369: LIST
12370: PUSH
12371: EMPTY
12372: LIST
12373: LIST
12374: PPUSH
12375: CALL_OW 72
12379: AND
12380: IFFALSE 12433
// ComEnterUnit ( UnitFilter ( engs , [ f_not , [ f_inside ] ] ) , UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) [ 1 ] ) ;
12382: LD_VAR 0 2
12386: PPUSH
12387: LD_INT 3
12389: PUSH
12390: LD_INT 54
12392: PUSH
12393: EMPTY
12394: LIST
12395: PUSH
12396: EMPTY
12397: LIST
12398: LIST
12399: PPUSH
12400: CALL_OW 72
12404: PPUSH
12405: LD_EXP 14
12409: PPUSH
12410: LD_INT 30
12412: PUSH
12413: LD_INT 0
12415: PUSH
12416: EMPTY
12417: LIST
12418: LIST
12419: PPUSH
12420: CALL_OW 72
12424: PUSH
12425: LD_INT 1
12427: ARRAY
12428: PPUSH
12429: CALL_OW 120
// if not tmp then
12433: LD_VAR 0 1
12437: NOT
12438: IFFALSE 12442
// exit ;
12440: GO 12751
// if FilterUnitsInArea ( ruOutpostCenterArea , [ f_enemy , 3 ] ) > 1 then
12442: LD_INT 26
12444: PPUSH
12445: LD_INT 81
12447: PUSH
12448: LD_INT 3
12450: PUSH
12451: EMPTY
12452: LIST
12453: LIST
12454: PPUSH
12455: CALL_OW 70
12459: PUSH
12460: LD_INT 1
12462: GREATER
12463: IFFALSE 12519
// begin for i in tmp do
12465: LD_ADDR_VAR 0 5
12469: PUSH
12470: LD_VAR 0 1
12474: PUSH
12475: FOR_IN
12476: IFFALSE 12515
// begin if IsInUnit ( i ) then
12478: LD_VAR 0 5
12482: PPUSH
12483: CALL_OW 310
12487: IFFALSE 12498
// ComExitBuilding ( i ) ;
12489: LD_VAR 0 5
12493: PPUSH
12494: CALL_OW 122
// AddComAgressiveMove ( i , 204 , 164 ) ;
12498: LD_VAR 0 5
12502: PPUSH
12503: LD_INT 204
12505: PPUSH
12506: LD_INT 164
12508: PPUSH
12509: CALL_OW 174
// end ;
12513: GO 12475
12515: POP
12516: POP
// end else
12517: GO 12751
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
12519: LD_VAR 0 1
12523: PPUSH
12524: LD_INT 3
12526: PUSH
12527: LD_INT 54
12529: PUSH
12530: EMPTY
12531: LIST
12532: PUSH
12533: EMPTY
12534: LIST
12535: LIST
12536: PPUSH
12537: CALL_OW 72
12541: IFFALSE 12751
// begin empty := UnitFilter ( ruOutpost , [ [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
12543: LD_ADDR_VAR 0 4
12547: PUSH
12548: LD_EXP 14
12552: PPUSH
12553: LD_INT 30
12555: PUSH
12556: LD_INT 32
12558: PUSH
12559: EMPTY
12560: LIST
12561: LIST
12562: PUSH
12563: LD_INT 58
12565: PUSH
12566: EMPTY
12567: LIST
12568: PUSH
12569: EMPTY
12570: LIST
12571: LIST
12572: PPUSH
12573: CALL_OW 72
12577: ST_TO_ADDR
// if not empty and UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) then
12578: LD_VAR 0 4
12582: NOT
12583: PUSH
12584: LD_EXP 14
12588: PPUSH
12589: LD_INT 30
12591: PUSH
12592: LD_INT 5
12594: PUSH
12595: EMPTY
12596: LIST
12597: LIST
12598: PPUSH
12599: CALL_OW 72
12603: AND
12604: IFFALSE 12641
// begin ComEnterUnit ( tmp , UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) [ 1 ] ) ;
12606: LD_VAR 0 1
12610: PPUSH
12611: LD_EXP 14
12615: PPUSH
12616: LD_INT 30
12618: PUSH
12619: LD_INT 5
12621: PUSH
12622: EMPTY
12623: LIST
12624: LIST
12625: PPUSH
12626: CALL_OW 72
12630: PUSH
12631: LD_INT 1
12633: ARRAY
12634: PPUSH
12635: CALL_OW 120
// exit ;
12639: GO 12751
// end ; j := UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) ;
12641: LD_ADDR_VAR 0 6
12645: PUSH
12646: LD_VAR 0 1
12650: PPUSH
12651: LD_INT 3
12653: PUSH
12654: LD_INT 54
12656: PUSH
12657: EMPTY
12658: LIST
12659: PUSH
12660: EMPTY
12661: LIST
12662: LIST
12663: PPUSH
12664: CALL_OW 72
12668: ST_TO_ADDR
// if j < empty then
12669: LD_VAR 0 6
12673: PUSH
12674: LD_VAR 0 4
12678: LESS
12679: IFFALSE 12693
// k := j else
12681: LD_ADDR_VAR 0 7
12685: PUSH
12686: LD_VAR 0 6
12690: ST_TO_ADDR
12691: GO 12703
// k := empty ;
12693: LD_ADDR_VAR 0 7
12697: PUSH
12698: LD_VAR 0 4
12702: ST_TO_ADDR
// for i = 1 to k do
12703: LD_ADDR_VAR 0 5
12707: PUSH
12708: DOUBLE
12709: LD_INT 1
12711: DEC
12712: ST_TO_ADDR
12713: LD_VAR 0 7
12717: PUSH
12718: FOR_TO
12719: IFFALSE 12749
// ComEnterUnit ( j [ i ] , empty [ i ] ) ;
12721: LD_VAR 0 6
12725: PUSH
12726: LD_VAR 0 5
12730: ARRAY
12731: PPUSH
12732: LD_VAR 0 4
12736: PUSH
12737: LD_VAR 0 5
12741: ARRAY
12742: PPUSH
12743: CALL_OW 120
12747: GO 12718
12749: POP
12750: POP
// end ; end ;
12751: PPOPN 7
12753: END
// every 0 0$2 trigger GameType = 1 and outpostEscape and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , 208 , 163 , 8 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 208 , 163 , 14 ] ] ) do var i ;
12754: LD_EXP 2
12758: PUSH
12759: LD_INT 1
12761: EQUAL
12762: PUSH
12763: LD_EXP 27
12767: AND
12768: PUSH
12769: LD_INT 22
12771: PUSH
12772: LD_INT 1
12774: PUSH
12775: EMPTY
12776: LIST
12777: LIST
12778: PUSH
12779: LD_INT 92
12781: PUSH
12782: LD_INT 208
12784: PUSH
12785: LD_INT 163
12787: PUSH
12788: LD_INT 8
12790: PUSH
12791: EMPTY
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: PUSH
12797: EMPTY
12798: LIST
12799: LIST
12800: PPUSH
12801: CALL_OW 69
12805: AND
12806: PUSH
12807: LD_INT 22
12809: PUSH
12810: LD_INT 3
12812: PUSH
12813: EMPTY
12814: LIST
12815: LIST
12816: PUSH
12817: LD_INT 21
12819: PUSH
12820: LD_INT 1
12822: PUSH
12823: EMPTY
12824: LIST
12825: LIST
12826: PUSH
12827: LD_INT 92
12829: PUSH
12830: LD_INT 208
12832: PUSH
12833: LD_INT 163
12835: PUSH
12836: LD_INT 14
12838: PUSH
12839: EMPTY
12840: LIST
12841: LIST
12842: LIST
12843: LIST
12844: PUSH
12845: EMPTY
12846: LIST
12847: LIST
12848: LIST
12849: PPUSH
12850: CALL_OW 69
12854: NOT
12855: AND
12856: IFFALSE 13161
12858: GO 12860
12860: DISABLE
12861: LD_INT 0
12863: PPUSH
// begin InGameOn ;
12864: CALL_OW 8
// CenterNowOnUnits ( playerCommander ) ;
12868: LD_EXP 9
12872: PPUSH
12873: CALL_OW 87
// wait ( 0 0$1 ) ;
12877: LD_INT 35
12879: PPUSH
12880: CALL_OW 67
// DialogueOn ;
12884: CALL_OW 6
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-BaseCaptured ) ;
12888: LD_EXP 9
12892: PPUSH
12893: LD_STRING D
12895: PUSH
12896: LD_STRING I
12898: PUSH
12899: LD_STRING J
12901: PUSH
12902: LD_STRING S
12904: PUSH
12905: EMPTY
12906: LIST
12907: LIST
12908: LIST
12909: PUSH
12910: LD_EXP 25
12914: ARRAY
12915: STR
12916: PUSH
12917: LD_STRING -1-BaseCaptured
12919: STR
12920: PPUSH
12921: CALL_OW 88
// SayRadio ( Powell , DP-1-BaseCaptured ) ;
12925: LD_EXP 12
12929: PPUSH
12930: LD_STRING DP-1-BaseCaptured
12932: PPUSH
12933: CALL_OW 94
// if sibBombAllowed then
12937: LD_EXP 23
12941: IFFALSE 13083
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-BaseCaptured ) ;
12943: LD_EXP 9
12947: PPUSH
12948: LD_STRING D
12950: PUSH
12951: LD_STRING I
12953: PUSH
12954: LD_STRING J
12956: PUSH
12957: LD_STRING S
12959: PUSH
12960: EMPTY
12961: LIST
12962: LIST
12963: LIST
12964: PUSH
12965: LD_EXP 25
12969: ARRAY
12970: STR
12971: PUSH
12972: LD_STRING -2-BaseCaptured
12974: STR
12975: PPUSH
12976: CALL_OW 88
// if commander = 1 then
12980: LD_EXP 25
12984: PUSH
12985: LD_INT 1
12987: EQUAL
12988: IFFALSE 13002
// SayRadio ( Powell , DP-2b-BaseCaptured ) ;
12990: LD_EXP 12
12994: PPUSH
12995: LD_STRING DP-2b-BaseCaptured
12997: PPUSH
12998: CALL_OW 94
// if commander = 2 then
13002: LD_EXP 25
13006: PUSH
13007: LD_INT 2
13009: EQUAL
13010: IFFALSE 13024
// SayRadio ( Powell , DP-2-BaseCaptured ) ;
13012: LD_EXP 12
13016: PPUSH
13017: LD_STRING DP-2-BaseCaptured
13019: PPUSH
13020: CALL_OW 94
// if commander = 3 then
13024: LD_EXP 25
13028: PUSH
13029: LD_INT 3
13031: EQUAL
13032: IFFALSE 13046
// SayRadio ( Powell , DP-2a-BaseCaptured ) ;
13034: LD_EXP 12
13038: PPUSH
13039: LD_STRING DP-2a-BaseCaptured
13041: PPUSH
13042: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3-BaseCaptured ) ;
13046: LD_EXP 9
13050: PPUSH
13051: LD_STRING D
13053: PUSH
13054: LD_STRING I
13056: PUSH
13057: LD_STRING J
13059: PUSH
13060: LD_STRING S
13062: PUSH
13063: EMPTY
13064: LIST
13065: LIST
13066: LIST
13067: PUSH
13068: LD_EXP 25
13072: ARRAY
13073: STR
13074: PUSH
13075: LD_STRING -3-BaseCaptured
13077: STR
13078: PPUSH
13079: CALL_OW 88
// end ; DialogueOff ;
13083: CALL_OW 7
// InGameOff ;
13087: CALL_OW 9
// ChangeMissionObjectives ( O2 ) ;
13091: LD_STRING O2
13093: PPUSH
13094: CALL_OW 337
// for i in UnitFilter ( ruOutpost , [ f_type , unit_building ] ) do
13098: LD_ADDR_VAR 0 1
13102: PUSH
13103: LD_EXP 14
13107: PPUSH
13108: LD_INT 21
13110: PUSH
13111: LD_INT 3
13113: PUSH
13114: EMPTY
13115: LIST
13116: LIST
13117: PPUSH
13118: CALL_OW 72
13122: PUSH
13123: FOR_IN
13124: IFFALSE 13140
// SetSide ( i , 1 ) ;
13126: LD_VAR 0 1
13130: PPUSH
13131: LD_INT 1
13133: PPUSH
13134: CALL_OW 235
13138: GO 13123
13140: POP
13141: POP
// baseCaptured := true ;
13142: LD_ADDR_EXP 17
13146: PUSH
13147: LD_INT 1
13149: ST_TO_ADDR
// wait ( 0 0$35 ) ;
13150: LD_INT 1225
13152: PPUSH
13153: CALL_OW 67
// PrepareReinforcements ;
13157: CALL 9910 0 0
// end ;
13161: PPOPN 1
13163: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 167 , 197 , 20 ] ] ) > 3 do
13164: LD_INT 22
13166: PUSH
13167: LD_INT 3
13169: PUSH
13170: EMPTY
13171: LIST
13172: LIST
13173: PUSH
13174: LD_INT 92
13176: PUSH
13177: LD_INT 167
13179: PUSH
13180: LD_INT 197
13182: PUSH
13183: LD_INT 20
13185: PUSH
13186: EMPTY
13187: LIST
13188: LIST
13189: LIST
13190: LIST
13191: PUSH
13192: EMPTY
13193: LIST
13194: LIST
13195: PPUSH
13196: CALL_OW 69
13200: PUSH
13201: LD_INT 3
13203: GREATER
13204: IFFALSE 13221
13206: GO 13208
13208: DISABLE
// SayRadio ( Powell , DP-RuAttack ) ;
13209: LD_EXP 12
13213: PPUSH
13214: LD_STRING DP-RuAttack
13216: PPUSH
13217: CALL_OW 94
13221: END
// every 0 0$2 trigger not debug and SeeXY ( 1 , 168 , 74 ) and GetEnvironmentType ( 168 , 72 ) do
13222: LD_EXP 1
13226: NOT
13227: PUSH
13228: LD_INT 1
13230: PPUSH
13231: LD_INT 168
13233: PPUSH
13234: LD_INT 74
13236: PPUSH
13237: CALL_OW 293
13241: AND
13242: PUSH
13243: LD_INT 168
13245: PPUSH
13246: LD_INT 72
13248: PPUSH
13249: CALL_OW 553
13253: AND
13254: IFFALSE 13306
13256: GO 13258
13258: DISABLE
// begin CenterOnXY ( 168 , 72 ) ;
13259: LD_INT 168
13261: PPUSH
13262: LD_INT 72
13264: PPUSH
13265: CALL_OW 84
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Blockade ) ;
13269: LD_EXP 9
13273: PPUSH
13274: LD_STRING D
13276: PUSH
13277: LD_STRING I
13279: PUSH
13280: LD_STRING J
13282: PUSH
13283: LD_STRING S
13285: PUSH
13286: EMPTY
13287: LIST
13288: LIST
13289: LIST
13290: PUSH
13291: LD_EXP 25
13295: ARRAY
13296: STR
13297: PUSH
13298: LD_STRING -1-Blockade
13300: STR
13301: PPUSH
13302: CALL_OW 88
// end ;
13306: END
// every 0 0$2 trigger GameType = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 4 ] ] ) do
13307: LD_EXP 2
13311: PUSH
13312: LD_INT 1
13314: EQUAL
13315: PUSH
13316: LD_INT 22
13318: PUSH
13319: LD_INT 1
13321: PUSH
13322: EMPTY
13323: LIST
13324: LIST
13325: PUSH
13326: LD_INT 101
13328: PUSH
13329: LD_INT 4
13331: PUSH
13332: EMPTY
13333: LIST
13334: LIST
13335: PUSH
13336: EMPTY
13337: LIST
13338: LIST
13339: PPUSH
13340: CALL_OW 69
13344: AND
13345: IFFALSE 13877
13347: GO 13349
13349: DISABLE
// begin ChangeSideFog ( 4 , 1 ) ;
13350: LD_INT 4
13352: PPUSH
13353: LD_INT 1
13355: PPUSH
13356: CALL_OW 343
// DialogueOn ;
13360: CALL_OW 6
// CenterNowOnUnits ( allyCommander ) ;
13364: LD_EXP 11
13368: PPUSH
13369: CALL_OW 87
// SayRadio ( allyCommander , DM-1-Contact ) ;
13373: LD_EXP 11
13377: PPUSH
13378: LD_STRING DM-1-Contact
13380: PPUSH
13381: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Contact ) ;
13385: LD_EXP 9
13389: PPUSH
13390: LD_STRING D
13392: PUSH
13393: LD_STRING I
13395: PUSH
13396: LD_STRING J
13398: PUSH
13399: LD_STRING S
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: LIST
13406: PUSH
13407: LD_EXP 25
13411: ARRAY
13412: STR
13413: PUSH
13414: LD_STRING -1-Contact
13416: STR
13417: PPUSH
13418: CALL_OW 88
// if commander = 1 then
13422: LD_EXP 25
13426: PUSH
13427: LD_INT 1
13429: EQUAL
13430: IFFALSE 13562
// begin SayRadio ( allyCommander , DM-2-Contact ) ;
13432: LD_EXP 11
13436: PPUSH
13437: LD_STRING DM-2-Contact
13439: PPUSH
13440: CALL_OW 94
// Say ( playerCommander , DI-2-Contact ) ;
13444: LD_EXP 9
13448: PPUSH
13449: LD_STRING DI-2-Contact
13451: PPUSH
13452: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13456: LD_INT 22
13458: PUSH
13459: LD_INT 8
13461: PUSH
13462: EMPTY
13463: LIST
13464: LIST
13465: PUSH
13466: LD_INT 21
13468: PUSH
13469: LD_INT 1
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: PPUSH
13480: CALL_OW 69
13484: PUSH
13485: LD_INT 8
13487: PPUSH
13488: LD_INT 1
13490: PPUSH
13491: CALL_OW 81
13495: PUSH
13496: LD_INT 2
13498: EQUAL
13499: AND
13500: IFFALSE 13526
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13502: LD_EXP 11
13506: PPUSH
13507: LD_STRING DM-3-Contact
13509: PPUSH
13510: CALL_OW 94
// Say ( playerCommander , DI-3-Contact ) ;
13514: LD_EXP 9
13518: PPUSH
13519: LD_STRING DI-3-Contact
13521: PPUSH
13522: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13526: LD_EXP 11
13530: PPUSH
13531: LD_STRING DM-4-Contact
13533: PPUSH
13534: CALL_OW 94
// Say ( playerCommander , DI-4-Contact ) ;
13538: LD_EXP 9
13542: PPUSH
13543: LD_STRING DI-4-Contact
13545: PPUSH
13546: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
13550: LD_EXP 11
13554: PPUSH
13555: LD_STRING DM-5-Contact
13557: PPUSH
13558: CALL_OW 94
// end ; if commander = 2 then
13562: LD_EXP 25
13566: PUSH
13567: LD_INT 2
13569: EQUAL
13570: IFFALSE 13702
// begin SayRadio ( allyCommander , DM-2c-Contact ) ;
13572: LD_EXP 11
13576: PPUSH
13577: LD_STRING DM-2c-Contact
13579: PPUSH
13580: CALL_OW 94
// Say ( playerCommander , DJ-2-Contact ) ;
13584: LD_EXP 9
13588: PPUSH
13589: LD_STRING DJ-2-Contact
13591: PPUSH
13592: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13596: LD_INT 22
13598: PUSH
13599: LD_INT 8
13601: PUSH
13602: EMPTY
13603: LIST
13604: LIST
13605: PUSH
13606: LD_INT 21
13608: PUSH
13609: LD_INT 1
13611: PUSH
13612: EMPTY
13613: LIST
13614: LIST
13615: PUSH
13616: EMPTY
13617: LIST
13618: LIST
13619: PPUSH
13620: CALL_OW 69
13624: PUSH
13625: LD_INT 8
13627: PPUSH
13628: LD_INT 1
13630: PPUSH
13631: CALL_OW 81
13635: PUSH
13636: LD_INT 2
13638: EQUAL
13639: AND
13640: IFFALSE 13666
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13642: LD_EXP 11
13646: PPUSH
13647: LD_STRING DM-3-Contact
13649: PPUSH
13650: CALL_OW 94
// Say ( playerCommander , DJ-3-Contact ) ;
13654: LD_EXP 9
13658: PPUSH
13659: LD_STRING DJ-3-Contact
13661: PPUSH
13662: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13666: LD_EXP 11
13670: PPUSH
13671: LD_STRING DM-4-Contact
13673: PPUSH
13674: CALL_OW 94
// Say ( playerCommander , DJ-4-Contact ) ;
13678: LD_EXP 9
13682: PPUSH
13683: LD_STRING DJ-4-Contact
13685: PPUSH
13686: CALL_OW 88
// SayRadio ( allyCommander , DM-5a-Contact ) ;
13690: LD_EXP 11
13694: PPUSH
13695: LD_STRING DM-5a-Contact
13697: PPUSH
13698: CALL_OW 94
// end ; if commander = 3 then
13702: LD_EXP 25
13706: PUSH
13707: LD_INT 3
13709: EQUAL
13710: IFFALSE 13866
// begin SayRadio ( allyCommander , DM-2a-Contact ) ;
13712: LD_EXP 11
13716: PPUSH
13717: LD_STRING DM-2a-Contact
13719: PPUSH
13720: CALL_OW 94
// Say ( playerCommander , DS-2a-Contact ) ;
13724: LD_EXP 9
13728: PPUSH
13729: LD_STRING DS-2a-Contact
13731: PPUSH
13732: CALL_OW 88
// SayRadio ( allyCommander , DM-2b-Contact ) ;
13736: LD_EXP 11
13740: PPUSH
13741: LD_STRING DM-2b-Contact
13743: PPUSH
13744: CALL_OW 94
// Say ( playerCommander , DS-2b-Contact ) ;
13748: LD_EXP 9
13752: PPUSH
13753: LD_STRING DS-2b-Contact
13755: PPUSH
13756: CALL_OW 88
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) and GetAttitude ( 8 , 1 ) = att_enemy then
13760: LD_INT 22
13762: PUSH
13763: LD_INT 8
13765: PUSH
13766: EMPTY
13767: LIST
13768: LIST
13769: PUSH
13770: LD_INT 21
13772: PUSH
13773: LD_INT 1
13775: PUSH
13776: EMPTY
13777: LIST
13778: LIST
13779: PUSH
13780: EMPTY
13781: LIST
13782: LIST
13783: PPUSH
13784: CALL_OW 69
13788: PUSH
13789: LD_INT 8
13791: PPUSH
13792: LD_INT 1
13794: PPUSH
13795: CALL_OW 81
13799: PUSH
13800: LD_INT 2
13802: EQUAL
13803: AND
13804: IFFALSE 13830
// begin SayRadio ( allyCommander , DM-3-Contact ) ;
13806: LD_EXP 11
13810: PPUSH
13811: LD_STRING DM-3-Contact
13813: PPUSH
13814: CALL_OW 94
// Say ( playerCommander , DS-3-Contact ) ;
13818: LD_EXP 9
13822: PPUSH
13823: LD_STRING DS-3-Contact
13825: PPUSH
13826: CALL_OW 88
// end ; SayRadio ( allyCommander , DM-4-Contact ) ;
13830: LD_EXP 11
13834: PPUSH
13835: LD_STRING DM-4-Contact
13837: PPUSH
13838: CALL_OW 94
// Say ( playerCommander , DS-4-Contact ) ;
13842: LD_EXP 9
13846: PPUSH
13847: LD_STRING DS-4-Contact
13849: PPUSH
13850: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
13854: LD_EXP 11
13858: PPUSH
13859: LD_STRING DM-5-Contact
13861: PPUSH
13862: CALL_OW 94
// end ; DialogueOff ;
13866: CALL_OW 7
// ChangeMissionObjectives ( O3 ) ;
13870: LD_STRING O3
13872: PPUSH
13873: CALL_OW 337
// end ;
13877: END
// every 0 0$10 trigger GameType = 1 and legDestCounter >= [ 15 , 20 , 25 ] [ Difficulty ] and FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) >= 5 do var time , sib , sources , i ;
13878: LD_EXP 2
13882: PUSH
13883: LD_INT 1
13885: EQUAL
13886: PUSH
13887: LD_EXP 18
13891: PUSH
13892: LD_INT 15
13894: PUSH
13895: LD_INT 20
13897: PUSH
13898: LD_INT 25
13900: PUSH
13901: EMPTY
13902: LIST
13903: LIST
13904: LIST
13905: PUSH
13906: LD_OWVAR 67
13910: ARRAY
13911: GREATEREQUAL
13912: AND
13913: PUSH
13914: LD_INT 22
13916: PUSH
13917: LD_INT 8
13919: PUSH
13920: EMPTY
13921: LIST
13922: LIST
13923: PUSH
13924: LD_INT 30
13926: PUSH
13927: LD_INT 1
13929: PUSH
13930: EMPTY
13931: LIST
13932: LIST
13933: PUSH
13934: EMPTY
13935: LIST
13936: LIST
13937: PPUSH
13938: CALL_OW 69
13942: AND
13943: PUSH
13944: LD_INT 22
13946: PUSH
13947: LD_INT 8
13949: PUSH
13950: EMPTY
13951: LIST
13952: LIST
13953: PUSH
13954: LD_INT 21
13956: PUSH
13957: LD_INT 3
13959: PUSH
13960: EMPTY
13961: LIST
13962: LIST
13963: PUSH
13964: EMPTY
13965: LIST
13966: LIST
13967: PPUSH
13968: CALL_OW 69
13972: PUSH
13973: LD_INT 5
13975: GREATEREQUAL
13976: AND
13977: IFFALSE 14500
13979: GO 13981
13981: DISABLE
13982: LD_INT 0
13984: PPUSH
13985: PPUSH
13986: PPUSH
13987: PPUSH
// begin DialogueOn ;
13988: CALL_OW 6
// SayRadio ( Farmer , DF-1-Leg ) ;
13992: LD_EXP 13
13996: PPUSH
13997: LD_STRING DF-1-Leg
13999: PPUSH
14000: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Leg ) ;
14004: LD_EXP 9
14008: PPUSH
14009: LD_STRING D
14011: PUSH
14012: LD_STRING I
14014: PUSH
14015: LD_STRING J
14017: PUSH
14018: LD_STRING S
14020: PUSH
14021: EMPTY
14022: LIST
14023: LIST
14024: LIST
14025: PUSH
14026: LD_EXP 25
14030: ARRAY
14031: STR
14032: PUSH
14033: LD_STRING -1-Leg
14035: STR
14036: PPUSH
14037: CALL_OW 88
// SayRadio ( Farmer , DF-2-Leg ) ;
14041: LD_EXP 13
14045: PPUSH
14046: LD_STRING DF-2-Leg
14048: PPUSH
14049: CALL_OW 94
// DialogueOff ;
14053: CALL_OW 7
// case Query ( QLegionOffer ) of 1 :
14057: LD_STRING QLegionOffer
14059: PPUSH
14060: CALL_OW 97
14064: PUSH
14065: LD_INT 1
14067: DOUBLE
14068: EQUAL
14069: IFTRUE 14073
14071: GO 14076
14073: POP
// ; 2 :
14074: GO 14090
14076: LD_INT 2
14078: DOUBLE
14079: EQUAL
14080: IFTRUE 14084
14082: GO 14089
14084: POP
// exit ; end ;
14085: GO 14500
14087: GO 14090
14089: POP
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-Leg ) ;
14090: LD_EXP 9
14094: PPUSH
14095: LD_STRING D
14097: PUSH
14098: LD_STRING I
14100: PUSH
14101: LD_STRING J
14103: PUSH
14104: LD_STRING S
14106: PUSH
14107: EMPTY
14108: LIST
14109: LIST
14110: LIST
14111: PUSH
14112: LD_EXP 25
14116: ARRAY
14117: STR
14118: PUSH
14119: LD_STRING -2-Leg
14121: STR
14122: PPUSH
14123: CALL_OW 88
// legOfferAccepted := true ;
14127: LD_ADDR_EXP 20
14131: PUSH
14132: LD_INT 1
14134: ST_TO_ADDR
// SetAreaMapShow ( legOfferArea , 1 ) ;
14135: LD_INT 21
14137: PPUSH
14138: LD_INT 1
14140: PPUSH
14141: CALL_OW 424
// CenterOnXY ( 190 , 227 ) ;
14145: LD_INT 190
14147: PPUSH
14148: LD_INT 227
14150: PPUSH
14151: CALL_OW 84
// time := [ 8 8$00 , 7 7$00 , 6 6$00 ] [ Difficulty ] ;
14155: LD_ADDR_VAR 0 1
14159: PUSH
14160: LD_INT 16800
14162: PUSH
14163: LD_INT 14700
14165: PUSH
14166: LD_INT 12600
14168: PUSH
14169: EMPTY
14170: LIST
14171: LIST
14172: LIST
14173: PUSH
14174: LD_OWVAR 67
14178: ARRAY
14179: ST_TO_ADDR
// sib := 100 ;
14180: LD_ADDR_VAR 0 2
14184: PUSH
14185: LD_INT 100
14187: ST_TO_ADDR
// disableGlobalTimer := true ;
14188: LD_ADDR_EXP 4
14192: PUSH
14193: LD_INT 1
14195: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
14196: LD_INT 35
14198: PPUSH
14199: CALL_OW 67
// time := time - 0 0$1 ;
14203: LD_ADDR_VAR 0 1
14207: PUSH
14208: LD_VAR 0 1
14212: PUSH
14213: LD_INT 35
14215: MINUS
14216: ST_TO_ADDR
// sources := GetResourceArea ( legOfferArea , mat_siberit ) ;
14217: LD_ADDR_VAR 0 3
14221: PUSH
14222: LD_INT 21
14224: PPUSH
14225: LD_INT 3
14227: PPUSH
14228: CALL_OW 287
14232: ST_TO_ADDR
// display_strings := [ #SkrTime , tick , #Skr-LegOffer , sib , time ] ;
14233: LD_ADDR_OWVAR 47
14237: PUSH
14238: LD_STRING #SkrTime
14240: PUSH
14241: LD_OWVAR 1
14245: PUSH
14246: LD_STRING #Skr-LegOffer
14248: PUSH
14249: LD_VAR 0 2
14253: PUSH
14254: LD_VAR 0 1
14258: PUSH
14259: EMPTY
14260: LIST
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: ST_TO_ADDR
// if sources then
14266: LD_VAR 0 3
14270: IFFALSE 14302
// begin sib := sib - sources * 10 ;
14272: LD_ADDR_VAR 0 2
14276: PUSH
14277: LD_VAR 0 2
14281: PUSH
14282: LD_VAR 0 3
14286: PUSH
14287: LD_INT 10
14289: MUL
14290: MINUS
14291: ST_TO_ADDR
// EraseResourceArea ( legOfferArea , mat_siberit ) ;
14292: LD_INT 21
14294: PPUSH
14295: LD_INT 3
14297: PPUSH
14298: CALL_OW 286
// end ; until time = 0 0$00 or sib <= 0 or not FilterAllUnits ( [ f_side , 8 ] ) ;
14302: LD_VAR 0 1
14306: PUSH
14307: LD_INT 0
14309: EQUAL
14310: PUSH
14311: LD_VAR 0 2
14315: PUSH
14316: LD_INT 0
14318: LESSEQUAL
14319: OR
14320: PUSH
14321: LD_INT 22
14323: PUSH
14324: LD_INT 8
14326: PUSH
14327: EMPTY
14328: LIST
14329: LIST
14330: PPUSH
14331: CALL_OW 69
14335: NOT
14336: OR
14337: IFFALSE 14196
// SetAreaMapShow ( legOfferArea , 0 ) ;
14339: LD_INT 21
14341: PPUSH
14342: LD_INT 0
14344: PPUSH
14345: CALL_OW 424
// disableGlobalTimer := false ;
14349: LD_ADDR_EXP 4
14353: PUSH
14354: LD_INT 0
14356: ST_TO_ADDR
// if sib <= 0 then
14357: LD_VAR 0 2
14361: PUSH
14362: LD_INT 0
14364: LESSEQUAL
14365: IFFALSE 14481
// begin legChangeSide := true ;
14367: LD_ADDR_EXP 21
14371: PUSH
14372: LD_INT 1
14374: ST_TO_ADDR
// SayRadio ( Farmer , DF-4y-Leg ) ;
14375: LD_EXP 13
14379: PPUSH
14380: LD_STRING DF-4y-Leg
14382: PPUSH
14383: CALL_OW 94
// ChangeMissionObjectives ( O3a ) ;
14387: LD_STRING O3a
14389: PPUSH
14390: CALL_OW 337
// ChangeSideFog ( 8 , 1 ) ;
14394: LD_INT 8
14396: PPUSH
14397: LD_INT 1
14399: PPUSH
14400: CALL_OW 343
// SetAttitude ( 8 , 1 , att_friend , true ) ;
14404: LD_INT 8
14406: PPUSH
14407: LD_INT 1
14409: PPUSH
14410: LD_INT 1
14412: PPUSH
14413: LD_INT 1
14415: PPUSH
14416: CALL_OW 80
// SetAttitude ( 8 , 4 , att_friend , true ) ;
14420: LD_INT 8
14422: PPUSH
14423: LD_INT 4
14425: PPUSH
14426: LD_INT 1
14428: PPUSH
14429: LD_INT 1
14431: PPUSH
14432: CALL_OW 80
// SetAttitude ( 8 , 6 , att_enemy , true ) ;
14436: LD_INT 8
14438: PPUSH
14439: LD_INT 6
14441: PPUSH
14442: LD_INT 2
14444: PPUSH
14445: LD_INT 1
14447: PPUSH
14448: CALL_OW 80
// SetAttitude ( 8 , 3 , att_enemy , true ) ;
14452: LD_INT 8
14454: PPUSH
14455: LD_INT 3
14457: PPUSH
14458: LD_INT 2
14460: PPUSH
14461: LD_INT 1
14463: PPUSH
14464: CALL_OW 80
// wait ( 0 0$30 ) ;
14468: LD_INT 1050
14470: PPUSH
14471: CALL_OW 67
// PrepareLegionReinforcements ;
14475: CALL 10610 0 0
// end else
14479: GO 14500
// begin ChangeMissionObjectives ( O3a ) ;
14481: LD_STRING O3a
14483: PPUSH
14484: CALL_OW 337
// SayRadio ( Farmer , DF-4n-Leg ) ;
14488: LD_EXP 13
14492: PPUSH
14493: LD_STRING DF-4n-Leg
14495: PPUSH
14496: CALL_OW 94
// end ; end ;
14500: PPOPN 4
14502: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 and GetAttitude ( 8 , 1 ) = att_enemy do
14503: LD_INT 22
14505: PUSH
14506: LD_INT 8
14508: PUSH
14509: EMPTY
14510: LIST
14511: LIST
14512: PUSH
14513: LD_INT 21
14515: PUSH
14516: LD_INT 1
14518: PUSH
14519: EMPTY
14520: LIST
14521: LIST
14522: PUSH
14523: EMPTY
14524: LIST
14525: LIST
14526: PPUSH
14527: CALL_OW 69
14531: PUSH
14532: LD_INT 0
14534: EQUAL
14535: PUSH
14536: LD_INT 8
14538: PPUSH
14539: LD_INT 1
14541: PPUSH
14542: CALL_OW 81
14546: PUSH
14547: LD_INT 2
14549: EQUAL
14550: AND
14551: IFFALSE 14563
14553: GO 14555
14555: DISABLE
// ChangeMissionObjectives ( O3a ) ;
14556: LD_STRING O3a
14558: PPUSH
14559: CALL_OW 337
14563: END
// every 0 0$1 trigger GameType = 1 and game and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) = 0 do
14564: LD_EXP 2
14568: PUSH
14569: LD_INT 1
14571: EQUAL
14572: PUSH
14573: LD_EXP 3
14577: AND
14578: PUSH
14579: LD_INT 22
14581: PUSH
14582: LD_INT 3
14584: PUSH
14585: EMPTY
14586: LIST
14587: LIST
14588: PUSH
14589: LD_INT 21
14591: PUSH
14592: LD_INT 1
14594: PUSH
14595: EMPTY
14596: LIST
14597: LIST
14598: PUSH
14599: EMPTY
14600: LIST
14601: LIST
14602: PPUSH
14603: CALL_OW 69
14607: PUSH
14608: LD_INT 0
14610: EQUAL
14611: AND
14612: PUSH
14613: LD_INT 22
14615: PUSH
14616: LD_INT 3
14618: PUSH
14619: EMPTY
14620: LIST
14621: LIST
14622: PUSH
14623: LD_INT 30
14625: PUSH
14626: LD_INT 1
14628: PUSH
14629: EMPTY
14630: LIST
14631: LIST
14632: PUSH
14633: EMPTY
14634: LIST
14635: LIST
14636: PPUSH
14637: CALL_OW 69
14641: PUSH
14642: LD_INT 0
14644: EQUAL
14645: AND
14646: IFFALSE 14884
14648: GO 14650
14650: DISABLE
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Win ) ;
14651: LD_EXP 9
14655: PPUSH
14656: LD_STRING D
14658: PUSH
14659: LD_STRING I
14661: PUSH
14662: LD_STRING J
14664: PUSH
14665: LD_STRING S
14667: PUSH
14668: EMPTY
14669: LIST
14670: LIST
14671: LIST
14672: PUSH
14673: LD_EXP 25
14677: ARRAY
14678: STR
14679: PUSH
14680: LD_STRING -1-Win
14682: STR
14683: PPUSH
14684: CALL_OW 88
// if tick >= [ 150 150$0 , 130 130$0 , 110 110$0 ] [ Difficulty ] then
14688: LD_OWVAR 1
14692: PUSH
14693: LD_INT 315000
14695: PUSH
14696: LD_INT 273000
14698: PUSH
14699: LD_INT 231000
14701: PUSH
14702: EMPTY
14703: LIST
14704: LIST
14705: LIST
14706: PUSH
14707: LD_OWVAR 67
14711: ARRAY
14712: GREATEREQUAL
14713: IFFALSE 14728
// AddMedal ( med1 , - 1 ) else
14715: LD_STRING med1
14717: PPUSH
14718: LD_INT 1
14720: NEG
14721: PPUSH
14722: CALL_OW 101
14726: GO 14738
// AddMedal ( med1 , 1 ) ;
14728: LD_STRING med1
14730: PPUSH
14731: LD_INT 1
14733: PPUSH
14734: CALL_OW 101
// if allyDestCounter >= [ 20 , 15 , 10 ] [ Difficulty ] then
14738: LD_EXP 22
14742: PUSH
14743: LD_INT 20
14745: PUSH
14746: LD_INT 15
14748: PUSH
14749: LD_INT 10
14751: PUSH
14752: EMPTY
14753: LIST
14754: LIST
14755: LIST
14756: PUSH
14757: LD_OWVAR 67
14761: ARRAY
14762: GREATEREQUAL
14763: IFFALSE 14778
// AddMedal ( med2 , - 1 ) else
14765: LD_STRING med2
14767: PPUSH
14768: LD_INT 1
14770: NEG
14771: PPUSH
14772: CALL_OW 101
14776: GO 14788
// AddMedal ( med2 , 1 ) ;
14778: LD_STRING med2
14780: PPUSH
14781: LD_INT 1
14783: PPUSH
14784: CALL_OW 101
// if GetAttitude ( 8 , 1 ) = att_friend then
14788: LD_INT 8
14790: PPUSH
14791: LD_INT 1
14793: PPUSH
14794: CALL_OW 81
14798: PUSH
14799: LD_INT 1
14801: EQUAL
14802: IFFALSE 14816
// AddMedal ( med3 , 1 ) else
14804: LD_STRING med3
14806: PPUSH
14807: LD_INT 1
14809: PPUSH
14810: CALL_OW 101
14814: GO 14873
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 then
14816: LD_INT 22
14818: PUSH
14819: LD_INT 8
14821: PUSH
14822: EMPTY
14823: LIST
14824: LIST
14825: PUSH
14826: LD_INT 21
14828: PUSH
14829: LD_INT 1
14831: PUSH
14832: EMPTY
14833: LIST
14834: LIST
14835: PUSH
14836: EMPTY
14837: LIST
14838: LIST
14839: PPUSH
14840: CALL_OW 69
14844: PUSH
14845: LD_INT 0
14847: EQUAL
14848: IFFALSE 14862
// AddMedal ( med3 , 2 ) else
14850: LD_STRING med3
14852: PPUSH
14853: LD_INT 2
14855: PPUSH
14856: CALL_OW 101
14860: GO 14873
// AddMedal ( med3 , - 1 ) ;
14862: LD_STRING med3
14864: PPUSH
14865: LD_INT 1
14867: NEG
14868: PPUSH
14869: CALL_OW 101
// GiveMedals ( MAIN ) ;
14873: LD_STRING MAIN
14875: PPUSH
14876: CALL_OW 102
// YouWin ;
14880: CALL_OW 103
// end ;
14884: END
// every 10 trigger GameType = 1 and staticMines and FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) do var i , j , tmp , x , y ;
14885: LD_EXP 2
14889: PUSH
14890: LD_INT 1
14892: EQUAL
14893: PUSH
14894: LD_EXP 16
14898: AND
14899: PUSH
14900: LD_INT 20
14902: PPUSH
14903: LD_INT 81
14905: PUSH
14906: LD_INT 8
14908: PUSH
14909: EMPTY
14910: LIST
14911: LIST
14912: PPUSH
14913: CALL_OW 70
14917: AND
14918: IFFALSE 15197
14920: GO 14922
14922: DISABLE
14923: LD_INT 0
14925: PPUSH
14926: PPUSH
14927: PPUSH
14928: PPUSH
14929: PPUSH
// begin enable ;
14930: ENABLE
// tmp := FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) ;
14931: LD_ADDR_VAR 0 3
14935: PUSH
14936: LD_INT 20
14938: PPUSH
14939: LD_INT 81
14941: PUSH
14942: LD_INT 8
14944: PUSH
14945: EMPTY
14946: LIST
14947: LIST
14948: PPUSH
14949: CALL_OW 70
14953: ST_TO_ADDR
// if not tmp then
14954: LD_VAR 0 3
14958: NOT
14959: IFFALSE 14963
// exit ;
14961: GO 15197
// for i in tmp do
14963: LD_ADDR_VAR 0 1
14967: PUSH
14968: LD_VAR 0 3
14972: PUSH
14973: FOR_IN
14974: IFFALSE 15195
// begin x := GetX ( i ) ;
14976: LD_ADDR_VAR 0 4
14980: PUSH
14981: LD_VAR 0 1
14985: PPUSH
14986: CALL_OW 250
14990: ST_TO_ADDR
// y := GetY ( i ) ;
14991: LD_ADDR_VAR 0 5
14995: PUSH
14996: LD_VAR 0 1
15000: PPUSH
15001: CALL_OW 251
15005: ST_TO_ADDR
// if MineAtPos ( x , y ) then
15006: LD_VAR 0 4
15010: PPUSH
15011: LD_VAR 0 5
15015: PPUSH
15016: CALL_OW 458
15020: IFFALSE 15193
// begin LaunchMineAtPos ( x , y , 8 ) ;
15022: LD_VAR 0 4
15026: PPUSH
15027: LD_VAR 0 5
15031: PPUSH
15032: LD_INT 8
15034: PPUSH
15035: CALL_OW 456
// if not dialogueMineDetected then
15039: LD_EXP 28
15043: NOT
15044: IFFALSE 15105
// begin CenterNowOnXY ( x , y ) ;
15046: LD_VAR 0 4
15050: PPUSH
15051: LD_VAR 0 5
15055: PPUSH
15056: CALL_OW 86
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Mine ) ;
15060: LD_EXP 9
15064: PPUSH
15065: LD_STRING D
15067: PUSH
15068: LD_STRING I
15070: PUSH
15071: LD_STRING J
15073: PUSH
15074: LD_STRING S
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: LIST
15081: PUSH
15082: LD_EXP 25
15086: ARRAY
15087: STR
15088: PUSH
15089: LD_STRING -1-Mine
15091: STR
15092: PPUSH
15093: CALL_OW 88
// dialogueMineDetected := true ;
15097: LD_ADDR_EXP 28
15101: PUSH
15102: LD_INT 1
15104: ST_TO_ADDR
// end ; for j = 1 to staticMines do
15105: LD_ADDR_VAR 0 2
15109: PUSH
15110: DOUBLE
15111: LD_INT 1
15113: DEC
15114: ST_TO_ADDR
15115: LD_EXP 16
15119: PUSH
15120: FOR_TO
15121: IFFALSE 15191
// if staticMines [ j ] [ 1 ] = x and staticMines [ j ] [ 2 ] = y then
15123: LD_EXP 16
15127: PUSH
15128: LD_VAR 0 2
15132: ARRAY
15133: PUSH
15134: LD_INT 1
15136: ARRAY
15137: PUSH
15138: LD_VAR 0 4
15142: EQUAL
15143: PUSH
15144: LD_EXP 16
15148: PUSH
15149: LD_VAR 0 2
15153: ARRAY
15154: PUSH
15155: LD_INT 2
15157: ARRAY
15158: PUSH
15159: LD_VAR 0 5
15163: EQUAL
15164: AND
15165: IFFALSE 15189
// begin staticMines := Delete ( staticMines , j ) ;
15167: LD_ADDR_EXP 16
15171: PUSH
15172: LD_EXP 16
15176: PPUSH
15177: LD_VAR 0 2
15181: PPUSH
15182: CALL_OW 3
15186: ST_TO_ADDR
// break ;
15187: GO 15191
// end ;
15189: GO 15120
15191: POP
15192: POP
// end ; end ;
15193: GO 14973
15195: POP
15196: POP
// end ;
15197: PPOPN 5
15199: END
// every 30 30$00 + 50 50$00 trigger GameType = 1 and game and sibBombAllowed and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_btype , b_factory ] ) do var bomb , e ;
15200: LD_EXP 2
15204: PUSH
15205: LD_INT 1
15207: EQUAL
15208: PUSH
15209: LD_EXP 3
15213: AND
15214: PUSH
15215: LD_EXP 23
15219: AND
15220: PUSH
15221: LD_EXP 50
15225: PUSH
15226: LD_EXP 7
15230: ARRAY
15231: PPUSH
15232: LD_INT 30
15234: PUSH
15235: LD_INT 3
15237: PUSH
15238: EMPTY
15239: LIST
15240: LIST
15241: PPUSH
15242: CALL_OW 72
15246: AND
15247: IFFALSE 15451
15249: GO 15251
15251: DISABLE
15252: LD_INT 0
15254: PPUSH
15255: PPUSH
// begin enable ;
15256: ENABLE
// MC_InsertProduceList ( mc_rus_1 , [ [ ru_heavy_wheeled , engine_siberite , control_computer , ru_siberium_rocket ] ] ) ;
15257: LD_EXP 7
15261: PPUSH
15262: LD_INT 23
15264: PUSH
15265: LD_INT 3
15267: PUSH
15268: LD_INT 3
15270: PUSH
15271: LD_INT 48
15273: PUSH
15274: EMPTY
15275: LIST
15276: LIST
15277: LIST
15278: LIST
15279: PUSH
15280: EMPTY
15281: LIST
15282: PPUSH
15283: CALL 84309 0 2
// repeat wait ( 0 0$1 ) ;
15287: LD_INT 35
15289: PPUSH
15290: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
15294: LD_INT 22
15296: PUSH
15297: LD_INT 3
15299: PUSH
15300: EMPTY
15301: LIST
15302: LIST
15303: PUSH
15304: LD_INT 34
15306: PUSH
15307: LD_INT 48
15309: PUSH
15310: EMPTY
15311: LIST
15312: LIST
15313: PUSH
15314: EMPTY
15315: LIST
15316: LIST
15317: PPUSH
15318: CALL_OW 69
15322: IFFALSE 15287
// bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
15324: LD_ADDR_VAR 0 1
15328: PUSH
15329: LD_INT 22
15331: PUSH
15332: LD_INT 3
15334: PUSH
15335: EMPTY
15336: LIST
15337: LIST
15338: PUSH
15339: LD_INT 34
15341: PUSH
15342: LD_INT 48
15344: PUSH
15345: EMPTY
15346: LIST
15347: LIST
15348: PUSH
15349: EMPTY
15350: LIST
15351: LIST
15352: PPUSH
15353: CALL_OW 69
15357: ST_TO_ADDR
// e := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_type , unit_building ] ] ) ;
15358: LD_ADDR_VAR 0 2
15362: PUSH
15363: LD_INT 81
15365: PUSH
15366: LD_INT 3
15368: PUSH
15369: EMPTY
15370: LIST
15371: LIST
15372: PUSH
15373: LD_INT 21
15375: PUSH
15376: LD_INT 3
15378: PUSH
15379: EMPTY
15380: LIST
15381: LIST
15382: PUSH
15383: EMPTY
15384: LIST
15385: LIST
15386: PPUSH
15387: CALL_OW 69
15391: ST_TO_ADDR
// if e then
15392: LD_VAR 0 2
15396: IFFALSE 15422
// e := NearestUnitToUnit ( e , bomb [ 1 ] ) ;
15398: LD_ADDR_VAR 0 2
15402: PUSH
15403: LD_VAR 0 2
15407: PPUSH
15408: LD_VAR 0 1
15412: PUSH
15413: LD_INT 1
15415: ARRAY
15416: PPUSH
15417: CALL_OW 74
15421: ST_TO_ADDR
// ComAttackPlace ( bomb , GetX ( e ) , GetY ( e ) ) ;
15422: LD_VAR 0 1
15426: PPUSH
15427: LD_VAR 0 2
15431: PPUSH
15432: CALL_OW 250
15436: PPUSH
15437: LD_VAR 0 2
15441: PPUSH
15442: CALL_OW 251
15446: PPUSH
15447: CALL_OW 116
// end ;
15451: PPOPN 2
15453: END
// every 0 0$2 trigger Difficulty > 1 and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_class , 3 ] ) and GameType = 1 and game and GetTech ( tech_Behemoth , 3 ) = state_researched do var tmp , i ;
15454: LD_OWVAR 67
15458: PUSH
15459: LD_INT 1
15461: GREATER
15462: PUSH
15463: LD_EXP 50
15467: PUSH
15468: LD_EXP 7
15472: ARRAY
15473: PPUSH
15474: LD_INT 25
15476: PUSH
15477: LD_INT 3
15479: PUSH
15480: EMPTY
15481: LIST
15482: LIST
15483: PPUSH
15484: CALL_OW 72
15488: AND
15489: PUSH
15490: LD_EXP 2
15494: PUSH
15495: LD_INT 1
15497: EQUAL
15498: AND
15499: PUSH
15500: LD_EXP 3
15504: AND
15505: PUSH
15506: LD_INT 23
15508: PPUSH
15509: LD_INT 3
15511: PPUSH
15512: CALL_OW 321
15516: PUSH
15517: LD_INT 2
15519: EQUAL
15520: AND
15521: IFFALSE 15648
15523: GO 15525
15525: DISABLE
15526: LD_INT 0
15528: PPUSH
15529: PPUSH
// begin tmp := UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_class , 3 ] ) ;
15530: LD_ADDR_VAR 0 1
15534: PUSH
15535: LD_EXP 50
15539: PUSH
15540: LD_EXP 7
15544: ARRAY
15545: PPUSH
15546: LD_INT 25
15548: PUSH
15549: LD_INT 3
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: PPUSH
15556: CALL_OW 72
15560: ST_TO_ADDR
// if not tmp then
15561: LD_VAR 0 1
15565: NOT
15566: IFFALSE 15570
// exit ;
15568: GO 15648
// for i in tmp do
15570: LD_ADDR_VAR 0 2
15574: PUSH
15575: LD_VAR 0 1
15579: PUSH
15580: FOR_IN
15581: IFFALSE 15627
// begin SetTag ( i , 29 ) ;
15583: LD_VAR 0 2
15587: PPUSH
15588: LD_INT 29
15590: PPUSH
15591: CALL_OW 109
// ComExitBuilding ( i ) ;
15595: LD_VAR 0 2
15599: PPUSH
15600: CALL_OW 122
// AddComBuildBehemoth ( i , b_behemoth , 97 , 133 , 0 ) ;
15604: LD_VAR 0 2
15608: PPUSH
15609: LD_INT 37
15611: PPUSH
15612: LD_INT 97
15614: PPUSH
15615: LD_INT 133
15617: PPUSH
15618: LD_INT 0
15620: PPUSH
15621: CALL_OW 230
// end ;
15625: GO 15580
15627: POP
15628: POP
// wait ( 1 1$00 ) ;
15629: LD_INT 2100
15631: PPUSH
15632: CALL_OW 67
// MC_Reset ( mc_rus_1 , 29 ) ;
15636: LD_EXP 7
15640: PPUSH
15641: LD_INT 29
15643: PPUSH
15644: CALL 64243 0 2
// end ;
15648: PPOPN 2
15650: END
// every 7 7$00 trigger GameType = 1 and GetBType ( HexInfo ( 84 , 128 ) ) = b_warehouse and GetSide ( HexInfo ( 84 , 128 ) ) = 3 do var veh , depot ;
15651: LD_EXP 2
15655: PUSH
15656: LD_INT 1
15658: EQUAL
15659: PUSH
15660: LD_INT 84
15662: PPUSH
15663: LD_INT 128
15665: PPUSH
15666: CALL_OW 428
15670: PPUSH
15671: CALL_OW 266
15675: PUSH
15676: LD_INT 1
15678: EQUAL
15679: AND
15680: PUSH
15681: LD_INT 84
15683: PPUSH
15684: LD_INT 128
15686: PPUSH
15687: CALL_OW 428
15691: PPUSH
15692: CALL_OW 255
15696: PUSH
15697: LD_INT 3
15699: EQUAL
15700: AND
15701: IFFALSE 15874
15703: GO 15705
15705: DISABLE
15706: LD_INT 0
15708: PPUSH
15709: PPUSH
// begin enable ;
15710: ENABLE
// depot := HexInfo ( 84 , 128 ) ;
15711: LD_ADDR_VAR 0 2
15715: PUSH
15716: LD_INT 84
15718: PPUSH
15719: LD_INT 128
15721: PPUSH
15722: CALL_OW 428
15726: ST_TO_ADDR
// uc_side := 3 ;
15727: LD_ADDR_OWVAR 20
15731: PUSH
15732: LD_INT 3
15734: ST_TO_ADDR
// uc_nation := 3 ;
15735: LD_ADDR_OWVAR 21
15739: PUSH
15740: LD_INT 3
15742: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_computer , ru_cargo_bay , 0 ) ;
15743: LD_INT 21
15745: PPUSH
15746: LD_INT 3
15748: PPUSH
15749: LD_INT 3
15751: PPUSH
15752: LD_INT 51
15754: PPUSH
15755: LD_INT 0
15757: PPUSH
15758: CALL 24750 0 5
// veh := CreateVehicle ;
15762: LD_ADDR_VAR 0 1
15766: PUSH
15767: CALL_OW 45
15771: ST_TO_ADDR
// PlaceUnitXY ( veh , 126 , 227 , false ) ;
15772: LD_VAR 0 1
15776: PPUSH
15777: LD_INT 126
15779: PPUSH
15780: LD_INT 227
15782: PPUSH
15783: LD_INT 0
15785: PPUSH
15786: CALL_OW 48
// SetCargo ( veh , mat_oil , 100 ) ;
15790: LD_VAR 0 1
15794: PPUSH
15795: LD_INT 2
15797: PPUSH
15798: LD_INT 100
15800: PPUSH
15801: CALL_OW 290
// ComGive ( veh , depot ) ;
15805: LD_VAR 0 1
15809: PPUSH
15810: LD_VAR 0 2
15814: PPUSH
15815: CALL_OW 161
// AddComMoveXY ( veh , 126 , 227 ) ;
15819: LD_VAR 0 1
15823: PPUSH
15824: LD_INT 126
15826: PPUSH
15827: LD_INT 227
15829: PPUSH
15830: CALL_OW 171
// wait ( 0 0$10 ) ;
15834: LD_INT 350
15836: PPUSH
15837: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
15841: LD_INT 35
15843: PPUSH
15844: CALL_OW 67
// until IsAt ( veh , 126 , 227 ) ;
15848: LD_VAR 0 1
15852: PPUSH
15853: LD_INT 126
15855: PPUSH
15856: LD_INT 227
15858: PPUSH
15859: CALL_OW 307
15863: IFFALSE 15841
// RemoveUnit ( veh ) ;
15865: LD_VAR 0 1
15869: PPUSH
15870: CALL_OW 64
// end ;
15874: PPOPN 2
15876: END
// every 9 9$00 trigger GameType = 1 and outpostEscape and commander = 2 do var veh , depot ;
15877: LD_EXP 2
15881: PUSH
15882: LD_INT 1
15884: EQUAL
15885: PUSH
15886: LD_EXP 27
15890: AND
15891: PUSH
15892: LD_EXP 25
15896: PUSH
15897: LD_INT 2
15899: EQUAL
15900: AND
15901: IFFALSE 16093
15903: GO 15905
15905: DISABLE
15906: LD_INT 0
15908: PPUSH
15909: PPUSH
// begin enable ;
15910: ENABLE
// if tick >= [ 50 50$00 , 40 40$00 , 30 30$00 ] [ Difficulty ] then
15911: LD_OWVAR 1
15915: PUSH
15916: LD_INT 105000
15918: PUSH
15919: LD_INT 84000
15921: PUSH
15922: LD_INT 63000
15924: PUSH
15925: EMPTY
15926: LIST
15927: LIST
15928: LIST
15929: PUSH
15930: LD_OWVAR 67
15934: ARRAY
15935: GREATEREQUAL
15936: IFFALSE 15939
// disable ;
15938: DISABLE
// uc_side := 4 ;
15939: LD_ADDR_OWVAR 20
15943: PUSH
15944: LD_INT 4
15946: ST_TO_ADDR
// uc_nation := 1 ;
15947: LD_ADDR_OWVAR 21
15951: PUSH
15952: LD_INT 1
15954: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 0 ) ;
15955: LD_INT 2
15957: PPUSH
15958: LD_INT 3
15960: PPUSH
15961: LD_INT 3
15963: PPUSH
15964: LD_INT 12
15966: PPUSH
15967: LD_INT 0
15969: PPUSH
15970: CALL 24750 0 5
// veh := CreateVehicle ;
15974: LD_ADDR_VAR 0 1
15978: PUSH
15979: CALL_OW 45
15983: ST_TO_ADDR
// PlaceUnitXY ( veh , 229 , 226 , false ) ;
15984: LD_VAR 0 1
15988: PPUSH
15989: LD_INT 229
15991: PPUSH
15992: LD_INT 226
15994: PPUSH
15995: LD_INT 0
15997: PPUSH
15998: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
16002: LD_VAR 0 1
16006: PPUSH
16007: LD_INT 1
16009: PPUSH
16010: LD_INT 100
16012: PPUSH
16013: CALL_OW 290
// AddComMoveToArea ( veh , ruOutpostArea ) ;
16017: LD_VAR 0 1
16021: PPUSH
16022: LD_INT 25
16024: PPUSH
16025: CALL_OW 173
// AddComUnload ( veh ) ;
16029: LD_VAR 0 1
16033: PPUSH
16034: CALL_OW 219
// AddComMoveXY ( veh , 229 , 226 ) ;
16038: LD_VAR 0 1
16042: PPUSH
16043: LD_INT 229
16045: PPUSH
16046: LD_INT 226
16048: PPUSH
16049: CALL_OW 171
// wait ( 0 0$10 ) ;
16053: LD_INT 350
16055: PPUSH
16056: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
16060: LD_INT 35
16062: PPUSH
16063: CALL_OW 67
// until IsAt ( veh , 229 , 226 ) ;
16067: LD_VAR 0 1
16071: PPUSH
16072: LD_INT 229
16074: PPUSH
16075: LD_INT 226
16077: PPUSH
16078: CALL_OW 307
16082: IFFALSE 16060
// RemoveUnit ( veh ) ;
16084: LD_VAR 0 1
16088: PPUSH
16089: CALL_OW 64
// end ;
16093: PPOPN 2
16095: END
// every 15 15$00 trigger GameType = 1 and game and reinforceAllowed do var i , j , veh , tmp , amount ;
16096: LD_EXP 2
16100: PUSH
16101: LD_INT 1
16103: EQUAL
16104: PUSH
16105: LD_EXP 3
16109: AND
16110: PUSH
16111: LD_EXP 24
16115: AND
16116: IFFALSE 16449
16118: GO 16120
16120: DISABLE
16121: LD_INT 0
16123: PPUSH
16124: PPUSH
16125: PPUSH
16126: PPUSH
16127: PPUSH
// begin enable ;
16128: ENABLE
// tmp := [ ] ;
16129: LD_ADDR_VAR 0 4
16133: PUSH
16134: EMPTY
16135: ST_TO_ADDR
// if commander = 1 then
16136: LD_EXP 25
16140: PUSH
16141: LD_INT 1
16143: EQUAL
16144: IFFALSE 16156
// amount := 3 else
16146: LD_ADDR_VAR 0 5
16150: PUSH
16151: LD_INT 3
16153: ST_TO_ADDR
16154: GO 16164
// amount := 2 ;
16156: LD_ADDR_VAR 0 5
16160: PUSH
16161: LD_INT 2
16163: ST_TO_ADDR
// for i = 1 to amount do
16164: LD_ADDR_VAR 0 1
16168: PUSH
16169: DOUBLE
16170: LD_INT 1
16172: DEC
16173: ST_TO_ADDR
16174: LD_VAR 0 5
16178: PUSH
16179: FOR_TO
16180: IFFALSE 16344
// begin wait ( 0 0$5 ) ;
16182: LD_INT 175
16184: PPUSH
16185: CALL_OW 67
// for j = 1 to 3 do
16189: LD_ADDR_VAR 0 2
16193: PUSH
16194: DOUBLE
16195: LD_INT 1
16197: DEC
16198: ST_TO_ADDR
16199: LD_INT 3
16201: PUSH
16202: FOR_TO
16203: IFFALSE 16340
// begin uc_side := 4 ;
16205: LD_ADDR_OWVAR 20
16209: PUSH
16210: LD_INT 4
16212: ST_TO_ADDR
// uc_nation := 1 ;
16213: LD_ADDR_OWVAR 21
16217: PUSH
16218: LD_INT 1
16220: ST_TO_ADDR
// PrepareVehicle ( [ us_medium_tracked , us_morphling ] [ rand ( 1 , 2 ) ] , engine_siberite , control_computer , [ us_laser , us_double_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
16221: LD_INT 3
16223: PUSH
16224: LD_INT 5
16226: PUSH
16227: EMPTY
16228: LIST
16229: LIST
16230: PUSH
16231: LD_INT 1
16233: PPUSH
16234: LD_INT 2
16236: PPUSH
16237: CALL_OW 12
16241: ARRAY
16242: PPUSH
16243: LD_INT 3
16245: PPUSH
16246: LD_INT 3
16248: PPUSH
16249: LD_INT 9
16251: PUSH
16252: LD_INT 5
16254: PUSH
16255: LD_INT 7
16257: PUSH
16258: EMPTY
16259: LIST
16260: LIST
16261: LIST
16262: PUSH
16263: LD_INT 1
16265: PPUSH
16266: LD_INT 3
16268: PPUSH
16269: CALL_OW 12
16273: ARRAY
16274: PPUSH
16275: LD_INT 100
16277: PPUSH
16278: CALL 24750 0 5
// veh := CreateVehicle ;
16282: LD_ADDR_VAR 0 3
16286: PUSH
16287: CALL_OW 45
16291: ST_TO_ADDR
// tmp := tmp ^ veh ;
16292: LD_ADDR_VAR 0 4
16296: PUSH
16297: LD_VAR 0 4
16301: PUSH
16302: LD_VAR 0 3
16306: ADD
16307: ST_TO_ADDR
// PlaceUnitArea ( veh , westSpawn , false ) ;
16308: LD_VAR 0 3
16312: PPUSH
16313: LD_INT 22
16315: PPUSH
16316: LD_INT 0
16318: PPUSH
16319: CALL_OW 49
// ComMoveXY ( veh , 119 , 215 ) ;
16323: LD_VAR 0 3
16327: PPUSH
16328: LD_INT 119
16330: PPUSH
16331: LD_INT 215
16333: PPUSH
16334: CALL_OW 111
// end ;
16338: GO 16202
16340: POP
16341: POP
// end ;
16342: GO 16179
16344: POP
16345: POP
// wait ( 0 0$3 ) ;
16346: LD_INT 105
16348: PPUSH
16349: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
16353: LD_INT 35
16355: PPUSH
16356: CALL_OW 67
// for i in tmp do
16360: LD_ADDR_VAR 0 1
16364: PUSH
16365: LD_VAR 0 4
16369: PUSH
16370: FOR_IN
16371: IFFALSE 16438
// if IsDead ( i ) then
16373: LD_VAR 0 1
16377: PPUSH
16378: CALL_OW 301
16382: IFFALSE 16402
// tmp := tmp diff i else
16384: LD_ADDR_VAR 0 4
16388: PUSH
16389: LD_VAR 0 4
16393: PUSH
16394: LD_VAR 0 1
16398: DIFF
16399: ST_TO_ADDR
16400: GO 16436
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) ;
16402: LD_VAR 0 1
16406: PPUSH
16407: LD_INT 81
16409: PUSH
16410: LD_INT 4
16412: PUSH
16413: EMPTY
16414: LIST
16415: LIST
16416: PPUSH
16417: CALL_OW 69
16421: PPUSH
16422: LD_VAR 0 1
16426: PPUSH
16427: CALL_OW 74
16431: PPUSH
16432: CALL_OW 115
16436: GO 16370
16438: POP
16439: POP
// until tmp = [ ] ;
16440: LD_VAR 0 4
16444: PUSH
16445: EMPTY
16446: EQUAL
16447: IFFALSE 16353
// end ;
16449: PPOPN 5
16451: END
// every 0 0$1 trigger GameType = 1 and game do var i , tmp ;
16452: LD_EXP 2
16456: PUSH
16457: LD_INT 1
16459: EQUAL
16460: PUSH
16461: LD_EXP 3
16465: AND
16466: IFFALSE 16567
16468: GO 16470
16470: DISABLE
16471: LD_INT 0
16473: PPUSH
16474: PPUSH
// begin enable ;
16475: ENABLE
// tmp := FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) ;
16476: LD_ADDR_VAR 0 2
16480: PUSH
16481: LD_INT 3
16483: PUSH
16484: LD_INT 22
16486: PUSH
16487: LD_INT 1
16489: PUSH
16490: EMPTY
16491: LIST
16492: LIST
16493: PUSH
16494: EMPTY
16495: LIST
16496: LIST
16497: PUSH
16498: LD_INT 32
16500: PUSH
16501: LD_INT 1
16503: PUSH
16504: EMPTY
16505: LIST
16506: LIST
16507: PUSH
16508: EMPTY
16509: LIST
16510: LIST
16511: PPUSH
16512: CALL_OW 69
16516: ST_TO_ADDR
// if tmp then
16517: LD_VAR 0 2
16521: IFFALSE 16567
// for i in tmp do
16523: LD_ADDR_VAR 0 1
16527: PUSH
16528: LD_VAR 0 2
16532: PUSH
16533: FOR_IN
16534: IFFALSE 16565
// if GetFuel ( i ) < 3 then
16536: LD_VAR 0 1
16540: PPUSH
16541: CALL_OW 261
16545: PUSH
16546: LD_INT 3
16548: LESS
16549: IFFALSE 16563
// SetFuel ( i , 3 ) ;
16551: LD_VAR 0 1
16555: PPUSH
16556: LD_INT 3
16558: PPUSH
16559: CALL_OW 240
16563: GO 16533
16565: POP
16566: POP
// end ;
16567: PPOPN 2
16569: END
// every 15 15$00 trigger game and GetAttitude ( 8 , 4 ) = att_enemy do var i , un , tmp ;
16570: LD_EXP 3
16574: PUSH
16575: LD_INT 8
16577: PPUSH
16578: LD_INT 4
16580: PPUSH
16581: CALL_OW 81
16585: PUSH
16586: LD_INT 2
16588: EQUAL
16589: AND
16590: IFFALSE 16800
16592: GO 16594
16594: DISABLE
16595: LD_INT 0
16597: PPUSH
16598: PPUSH
16599: PPUSH
// begin enable ;
16600: ENABLE
// tmp := [ ] ;
16601: LD_ADDR_VAR 0 3
16605: PUSH
16606: EMPTY
16607: ST_TO_ADDR
// for i = 1 to 4 do
16608: LD_ADDR_VAR 0 1
16612: PUSH
16613: DOUBLE
16614: LD_INT 1
16616: DEC
16617: ST_TO_ADDR
16618: LD_INT 4
16620: PUSH
16621: FOR_TO
16622: IFFALSE 16766
// begin uc_side := 8 ;
16624: LD_ADDR_OWVAR 20
16628: PUSH
16629: LD_INT 8
16631: ST_TO_ADDR
// uc_nation := nation_arabian ;
16632: LD_ADDR_OWVAR 21
16636: PUSH
16637: LD_INT 2
16639: ST_TO_ADDR
// PrepareVehicle ( ar_hovercraft , engine_combustion , control_apeman , [ ar_double_machine_gun , ar_light_gun ] [ rand ( 1 , 2 ) ] , rand ( 60 , 80 ) ) ;
16640: LD_INT 11
16642: PPUSH
16643: LD_INT 1
16645: PPUSH
16646: LD_INT 5
16648: PPUSH
16649: LD_INT 24
16651: PUSH
16652: LD_INT 23
16654: PUSH
16655: EMPTY
16656: LIST
16657: LIST
16658: PUSH
16659: LD_INT 1
16661: PPUSH
16662: LD_INT 2
16664: PPUSH
16665: CALL_OW 12
16669: ARRAY
16670: PPUSH
16671: LD_INT 60
16673: PPUSH
16674: LD_INT 80
16676: PPUSH
16677: CALL_OW 12
16681: PPUSH
16682: CALL 24750 0 5
// un := CreateVehicle ;
16686: LD_ADDR_VAR 0 2
16690: PUSH
16691: CALL_OW 45
16695: ST_TO_ADDR
// SetDir ( un , 2 ) ;
16696: LD_VAR 0 2
16700: PPUSH
16701: LD_INT 2
16703: PPUSH
16704: CALL_OW 233
// tmp := tmp ^ un ;
16708: LD_ADDR_VAR 0 3
16712: PUSH
16713: LD_VAR 0 3
16717: PUSH
16718: LD_VAR 0 2
16722: ADD
16723: ST_TO_ADDR
// PlaceUnitXY ( un , 88 , 2 , false ) ;
16724: LD_VAR 0 2
16728: PPUSH
16729: LD_INT 88
16731: PPUSH
16732: LD_INT 2
16734: PPUSH
16735: LD_INT 0
16737: PPUSH
16738: CALL_OW 48
// ComMoveXY ( un , 93 , 13 ) ;
16742: LD_VAR 0 2
16746: PPUSH
16747: LD_INT 93
16749: PPUSH
16750: LD_INT 13
16752: PPUSH
16753: CALL_OW 111
// wait ( 0 0$2 ) ;
16757: LD_INT 70
16759: PPUSH
16760: CALL_OW 67
// end ;
16764: GO 16621
16766: POP
16767: POP
// for i in tmp do
16768: LD_ADDR_VAR 0 1
16772: PUSH
16773: LD_VAR 0 3
16777: PUSH
16778: FOR_IN
16779: IFFALSE 16798
// AddComMoveXY ( i , 136 , 19 ) ;
16781: LD_VAR 0 1
16785: PPUSH
16786: LD_INT 136
16788: PPUSH
16789: LD_INT 19
16791: PPUSH
16792: CALL_OW 171
16796: GO 16778
16798: POP
16799: POP
// end ;
16800: PPOPN 3
16802: END
// every 7 7$30 + 7 7$30 trigger game do var i , base , tmp , target ;
16803: LD_EXP 3
16807: IFFALSE 17726
16809: GO 16811
16811: DISABLE
16812: LD_INT 0
16814: PPUSH
16815: PPUSH
16816: PPUSH
16817: PPUSH
// begin enable ;
16818: ENABLE
// base := mc_leg ;
16819: LD_ADDR_VAR 0 2
16823: PUSH
16824: LD_EXP 6
16828: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 8 ] , [ f_nation , 2 ] , [ f_btype , b_factory ] ] ) then
16829: LD_INT 22
16831: PUSH
16832: LD_INT 8
16834: PUSH
16835: EMPTY
16836: LIST
16837: LIST
16838: PUSH
16839: LD_INT 23
16841: PUSH
16842: LD_INT 2
16844: PUSH
16845: EMPTY
16846: LIST
16847: LIST
16848: PUSH
16849: LD_INT 30
16851: PUSH
16852: LD_INT 3
16854: PUSH
16855: EMPTY
16856: LIST
16857: LIST
16858: PUSH
16859: EMPTY
16860: LIST
16861: LIST
16862: LIST
16863: PPUSH
16864: CALL_OW 69
16868: NOT
16869: IFFALSE 16873
// exit ;
16871: GO 17726
// if Prob ( 40 ) then
16873: LD_INT 40
16875: PPUSH
16876: CALL_OW 13
16880: IFFALSE 17009
// begin MC_InsertProduceList ( base , [ [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
16882: LD_VAR 0 2
16886: PPUSH
16887: LD_INT 13
16889: PUSH
16890: LD_INT 1
16892: PUSH
16893: LD_INT 2
16895: PUSH
16896: LD_INT 28
16898: PUSH
16899: EMPTY
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: PUSH
16905: LD_INT 13
16907: PUSH
16908: LD_INT 1
16910: PUSH
16911: LD_INT 2
16913: PUSH
16914: LD_INT 28
16916: PUSH
16917: EMPTY
16918: LIST
16919: LIST
16920: LIST
16921: LIST
16922: PUSH
16923: LD_INT 13
16925: PUSH
16926: LD_INT 1
16928: PUSH
16929: LD_INT 2
16931: PUSH
16932: LD_INT 28
16934: PUSH
16935: EMPTY
16936: LIST
16937: LIST
16938: LIST
16939: LIST
16940: PUSH
16941: LD_INT 13
16943: PUSH
16944: LD_INT 1
16946: PUSH
16947: LD_INT 2
16949: PUSH
16950: LD_INT 28
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: LIST
16957: LIST
16958: PUSH
16959: LD_INT 13
16961: PUSH
16962: LD_INT 1
16964: PUSH
16965: LD_INT 2
16967: PUSH
16968: LD_INT 28
16970: PUSH
16971: EMPTY
16972: LIST
16973: LIST
16974: LIST
16975: LIST
16976: PUSH
16977: LD_INT 13
16979: PUSH
16980: LD_INT 1
16982: PUSH
16983: LD_INT 2
16985: PUSH
16986: LD_INT 26
16988: PUSH
16989: EMPTY
16990: LIST
16991: LIST
16992: LIST
16993: LIST
16994: PUSH
16995: EMPTY
16996: LIST
16997: LIST
16998: LIST
16999: LIST
17000: LIST
17001: LIST
17002: PPUSH
17003: CALL 84309 0 2
// end else
17007: GO 17226
// begin MC_InsertProduceList ( base , [ [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_gun , ar_flame_thrower , ar_flame_thrower ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_flame_thrower , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , [ ar_flame_thrower , ar_selfpropelled_bomb , ar_selfpropelled_bomb ] [ rand ( 1 , 3 ) ] ] , [ ar_medium_trike , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_medium_trike , engine_combustion , control_remote , ar_flame_thrower ] , ] ) ;
17009: LD_VAR 0 2
17013: PPUSH
17014: LD_INT 13
17016: PUSH
17017: LD_INT 1
17019: PUSH
17020: LD_INT 2
17022: PUSH
17023: LD_INT 27
17025: PUSH
17026: LD_INT 26
17028: PUSH
17029: LD_INT 26
17031: PUSH
17032: EMPTY
17033: LIST
17034: LIST
17035: LIST
17036: PUSH
17037: LD_INT 1
17039: PPUSH
17040: LD_INT 3
17042: PPUSH
17043: CALL_OW 12
17047: ARRAY
17048: PUSH
17049: EMPTY
17050: LIST
17051: LIST
17052: LIST
17053: LIST
17054: PUSH
17055: LD_INT 13
17057: PUSH
17058: LD_INT 1
17060: PUSH
17061: LD_INT 2
17063: PUSH
17064: LD_INT 27
17066: PUSH
17067: LD_INT 26
17069: PUSH
17070: LD_INT 26
17072: PUSH
17073: EMPTY
17074: LIST
17075: LIST
17076: LIST
17077: PUSH
17078: LD_INT 1
17080: PPUSH
17081: LD_INT 3
17083: PPUSH
17084: CALL_OW 12
17088: ARRAY
17089: PUSH
17090: EMPTY
17091: LIST
17092: LIST
17093: LIST
17094: LIST
17095: PUSH
17096: LD_INT 13
17098: PUSH
17099: LD_INT 1
17101: PUSH
17102: LD_INT 2
17104: PUSH
17105: LD_INT 26
17107: PUSH
17108: LD_INT 26
17110: PUSH
17111: LD_INT 29
17113: PUSH
17114: EMPTY
17115: LIST
17116: LIST
17117: LIST
17118: PUSH
17119: LD_INT 1
17121: PPUSH
17122: LD_INT 3
17124: PPUSH
17125: CALL_OW 12
17129: ARRAY
17130: PUSH
17131: EMPTY
17132: LIST
17133: LIST
17134: LIST
17135: LIST
17136: PUSH
17137: LD_INT 13
17139: PUSH
17140: LD_INT 1
17142: PUSH
17143: LD_INT 2
17145: PUSH
17146: LD_INT 26
17148: PUSH
17149: LD_INT 29
17151: PUSH
17152: LD_INT 29
17154: PUSH
17155: EMPTY
17156: LIST
17157: LIST
17158: LIST
17159: PUSH
17160: LD_INT 1
17162: PPUSH
17163: LD_INT 3
17165: PPUSH
17166: CALL_OW 12
17170: ARRAY
17171: PUSH
17172: EMPTY
17173: LIST
17174: LIST
17175: LIST
17176: LIST
17177: PUSH
17178: LD_INT 13
17180: PUSH
17181: LD_INT 1
17183: PUSH
17184: LD_INT 2
17186: PUSH
17187: LD_INT 29
17189: PUSH
17190: EMPTY
17191: LIST
17192: LIST
17193: LIST
17194: LIST
17195: PUSH
17196: LD_INT 13
17198: PUSH
17199: LD_INT 1
17201: PUSH
17202: LD_INT 2
17204: PUSH
17205: LD_INT 26
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: LIST
17212: LIST
17213: PUSH
17214: EMPTY
17215: LIST
17216: LIST
17217: LIST
17218: LIST
17219: LIST
17220: LIST
17221: PPUSH
17222: CALL 84309 0 2
// end ; repeat wait ( 0 0$1 ) ;
17226: LD_INT 35
17228: PPUSH
17229: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 6 or tick mod 10 10$00 = 0 ;
17233: LD_VAR 0 2
17237: PPUSH
17238: LD_INT 1
17240: PPUSH
17241: CALL 85727 0 2
17245: PUSH
17246: LD_INT 6
17248: GREATEREQUAL
17249: PUSH
17250: LD_OWVAR 1
17254: PUSH
17255: LD_INT 21000
17257: MOD
17258: PUSH
17259: LD_INT 0
17261: EQUAL
17262: OR
17263: IFFALSE 17226
// wait ( 0 0$30 ) ;
17265: LD_INT 1050
17267: PPUSH
17268: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
17272: LD_ADDR_VAR 0 3
17276: PUSH
17277: LD_VAR 0 2
17281: PPUSH
17282: LD_INT 1
17284: PPUSH
17285: CALL 85727 0 2
17289: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
17290: LD_ADDR_EXP 69
17294: PUSH
17295: LD_EXP 69
17299: PPUSH
17300: LD_VAR 0 2
17304: PPUSH
17305: LD_EXP 69
17309: PUSH
17310: LD_VAR 0 2
17314: ARRAY
17315: PUSH
17316: LD_VAR 0 3
17320: DIFF
17321: PPUSH
17322: CALL_OW 1
17326: ST_TO_ADDR
// target := rand ( 0 , 2 ) ;
17327: LD_ADDR_VAR 0 4
17331: PUSH
17332: LD_INT 0
17334: PPUSH
17335: LD_INT 2
17337: PPUSH
17338: CALL_OW 12
17342: ST_TO_ADDR
// if legChangeSide then
17343: LD_EXP 21
17347: IFFALSE 17357
// target := 2 ;
17349: LD_ADDR_VAR 0 4
17353: PUSH
17354: LD_INT 2
17356: ST_TO_ADDR
// if target = 2 then
17357: LD_VAR 0 4
17361: PUSH
17362: LD_INT 2
17364: EQUAL
17365: IFFALSE 17493
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
17367: LD_ADDR_VAR 0 3
17371: PUSH
17372: LD_VAR 0 3
17376: PPUSH
17377: LD_INT 24
17379: PUSH
17380: LD_INT 250
17382: PUSH
17383: EMPTY
17384: LIST
17385: LIST
17386: PPUSH
17387: CALL_OW 72
17391: ST_TO_ADDR
// for i in tmp do
17392: LD_ADDR_VAR 0 1
17396: PUSH
17397: LD_VAR 0 3
17401: PUSH
17402: FOR_IN
17403: IFFALSE 17443
// if GetDistUnitXY ( i , 112 , 64 ) > 9 then
17405: LD_VAR 0 1
17409: PPUSH
17410: LD_INT 112
17412: PPUSH
17413: LD_INT 64
17415: PPUSH
17416: CALL_OW 297
17420: PUSH
17421: LD_INT 9
17423: GREATER
17424: IFFALSE 17441
// ComMoveXY ( i , 112 , 64 ) ;
17426: LD_VAR 0 1
17430: PPUSH
17431: LD_INT 112
17433: PPUSH
17434: LD_INT 64
17436: PPUSH
17437: CALL_OW 111
17441: GO 17402
17443: POP
17444: POP
// wait ( 0 0$1 ) ;
17445: LD_INT 35
17447: PPUSH
17448: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 112 , 64 , 9 ] ) >= ( tmp - 1 ) ;
17452: LD_VAR 0 3
17456: PPUSH
17457: LD_INT 92
17459: PUSH
17460: LD_INT 112
17462: PUSH
17463: LD_INT 64
17465: PUSH
17466: LD_INT 9
17468: PUSH
17469: EMPTY
17470: LIST
17471: LIST
17472: LIST
17473: LIST
17474: PPUSH
17475: CALL_OW 72
17479: PUSH
17480: LD_VAR 0 3
17484: PUSH
17485: LD_INT 1
17487: MINUS
17488: GREATEREQUAL
17489: IFFALSE 17367
// end else
17491: GO 17617
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
17493: LD_ADDR_VAR 0 3
17497: PUSH
17498: LD_VAR 0 3
17502: PPUSH
17503: LD_INT 24
17505: PUSH
17506: LD_INT 250
17508: PUSH
17509: EMPTY
17510: LIST
17511: LIST
17512: PPUSH
17513: CALL_OW 72
17517: ST_TO_ADDR
// for i in tmp do
17518: LD_ADDR_VAR 0 1
17522: PUSH
17523: LD_VAR 0 3
17527: PUSH
17528: FOR_IN
17529: IFFALSE 17569
// if GetDistUnitXY ( i , 174 , 94 ) > 9 then
17531: LD_VAR 0 1
17535: PPUSH
17536: LD_INT 174
17538: PPUSH
17539: LD_INT 94
17541: PPUSH
17542: CALL_OW 297
17546: PUSH
17547: LD_INT 9
17549: GREATER
17550: IFFALSE 17567
// ComMoveXY ( i , 174 , 94 ) ;
17552: LD_VAR 0 1
17556: PPUSH
17557: LD_INT 174
17559: PPUSH
17560: LD_INT 94
17562: PPUSH
17563: CALL_OW 111
17567: GO 17528
17569: POP
17570: POP
// wait ( 0 0$1 ) ;
17571: LD_INT 35
17573: PPUSH
17574: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 174 , 94 , 9 ] ) >= ( tmp - 1 ) ;
17578: LD_VAR 0 3
17582: PPUSH
17583: LD_INT 92
17585: PUSH
17586: LD_INT 174
17588: PUSH
17589: LD_INT 94
17591: PUSH
17592: LD_INT 9
17594: PUSH
17595: EMPTY
17596: LIST
17597: LIST
17598: LIST
17599: LIST
17600: PPUSH
17601: CALL_OW 72
17605: PUSH
17606: LD_VAR 0 3
17610: PUSH
17611: LD_INT 1
17613: MINUS
17614: GREATEREQUAL
17615: IFFALSE 17493
// end ; repeat wait ( 0 0$1 ) ;
17617: LD_INT 35
17619: PPUSH
17620: CALL_OW 67
// for i in tmp do
17624: LD_ADDR_VAR 0 1
17628: PUSH
17629: LD_VAR 0 3
17633: PUSH
17634: FOR_IN
17635: IFFALSE 17717
// begin if GetLives ( i ) > 251 then
17637: LD_VAR 0 1
17641: PPUSH
17642: CALL_OW 256
17646: PUSH
17647: LD_INT 251
17649: GREATER
17650: IFFALSE 17688
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 8 ] ) , i ) ) else
17652: LD_VAR 0 1
17656: PPUSH
17657: LD_INT 81
17659: PUSH
17660: LD_INT 8
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: PPUSH
17667: CALL_OW 69
17671: PPUSH
17672: LD_VAR 0 1
17676: PPUSH
17677: CALL_OW 74
17681: PPUSH
17682: CALL_OW 115
17686: GO 17715
// if IsDead ( i ) then
17688: LD_VAR 0 1
17692: PPUSH
17693: CALL_OW 301
17697: IFFALSE 17715
// tmp := tmp diff i ;
17699: LD_ADDR_VAR 0 3
17703: PUSH
17704: LD_VAR 0 3
17708: PUSH
17709: LD_VAR 0 1
17713: DIFF
17714: ST_TO_ADDR
// end ;
17715: GO 17634
17717: POP
17718: POP
// until not tmp ;
17719: LD_VAR 0 3
17723: NOT
17724: IFFALSE 17617
// end ;
17726: PPOPN 4
17728: END
// every 7 7$30 trigger game do var i , base , tmp , target , teleport ;
17729: LD_EXP 3
17733: IFFALSE 18721
17735: GO 17737
17737: DISABLE
17738: LD_INT 0
17740: PPUSH
17741: PPUSH
17742: PPUSH
17743: PPUSH
17744: PPUSH
// begin enable ;
17745: ENABLE
// if not UnitFilter ( mc_bases [ mc_rus_2 ] , [ [ f_side , 3 ] , [ f_btype , b_factory ] ] ) then
17746: LD_EXP 50
17750: PUSH
17751: LD_EXP 8
17755: ARRAY
17756: PPUSH
17757: LD_INT 22
17759: PUSH
17760: LD_INT 3
17762: PUSH
17763: EMPTY
17764: LIST
17765: LIST
17766: PUSH
17767: LD_INT 30
17769: PUSH
17770: LD_INT 3
17772: PUSH
17773: EMPTY
17774: LIST
17775: LIST
17776: PUSH
17777: EMPTY
17778: LIST
17779: LIST
17780: PPUSH
17781: CALL_OW 72
17785: NOT
17786: IFFALSE 17790
// exit ;
17788: GO 18721
// base := mc_rus_2 ;
17790: LD_ADDR_VAR 0 2
17794: PUSH
17795: LD_EXP 8
17799: ST_TO_ADDR
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
17800: LD_ADDR_VAR 0 5
17804: PUSH
17805: LD_INT 22
17807: PUSH
17808: LD_INT 3
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: PUSH
17815: LD_INT 30
17817: PUSH
17818: LD_INT 34
17820: PUSH
17821: EMPTY
17822: LIST
17823: LIST
17824: PUSH
17825: EMPTY
17826: LIST
17827: LIST
17828: PPUSH
17829: CALL_OW 69
17833: ST_TO_ADDR
// if Prob ( 40 ) then
17834: LD_INT 40
17836: PPUSH
17837: CALL_OW 13
17841: IFFALSE 17970
// begin MC_InsertProduceList ( base , [ [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_medium_tracked , engine_siberite , control_computer , ru_time_lapser ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
17843: LD_VAR 0 2
17847: PPUSH
17848: LD_INT 22
17850: PUSH
17851: LD_INT 3
17853: PUSH
17854: LD_INT 3
17856: PUSH
17857: LD_INT 49
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: LIST
17864: LIST
17865: PUSH
17866: LD_INT 22
17868: PUSH
17869: LD_INT 3
17871: PUSH
17872: LD_INT 3
17874: PUSH
17875: LD_INT 49
17877: PUSH
17878: EMPTY
17879: LIST
17880: LIST
17881: LIST
17882: LIST
17883: PUSH
17884: LD_INT 22
17886: PUSH
17887: LD_INT 3
17889: PUSH
17890: LD_INT 3
17892: PUSH
17893: LD_INT 49
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: LIST
17900: LIST
17901: PUSH
17902: LD_INT 24
17904: PUSH
17905: LD_INT 3
17907: PUSH
17908: LD_INT 3
17910: PUSH
17911: LD_INT 46
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: LIST
17918: LIST
17919: PUSH
17920: LD_INT 24
17922: PUSH
17923: LD_INT 3
17925: PUSH
17926: LD_INT 3
17928: PUSH
17929: LD_INT 46
17931: PUSH
17932: EMPTY
17933: LIST
17934: LIST
17935: LIST
17936: LIST
17937: PUSH
17938: LD_INT 24
17940: PUSH
17941: LD_INT 3
17943: PUSH
17944: LD_INT 3
17946: PUSH
17947: LD_INT 46
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: LIST
17954: LIST
17955: PUSH
17956: EMPTY
17957: LIST
17958: LIST
17959: LIST
17960: LIST
17961: LIST
17962: LIST
17963: PPUSH
17964: CALL 84309 0 2
// end else
17968: GO 18095
// begin MC_InsertProduceList ( base , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_siberite , control_computer , ru_heavy_gun ] ] ) ;
17970: LD_VAR 0 2
17974: PPUSH
17975: LD_INT 24
17977: PUSH
17978: LD_INT 3
17980: PUSH
17981: LD_INT 3
17983: PUSH
17984: LD_INT 47
17986: PUSH
17987: EMPTY
17988: LIST
17989: LIST
17990: LIST
17991: LIST
17992: PUSH
17993: LD_INT 24
17995: PUSH
17996: LD_INT 3
17998: PUSH
17999: LD_INT 3
18001: PUSH
18002: LD_INT 47
18004: PUSH
18005: EMPTY
18006: LIST
18007: LIST
18008: LIST
18009: LIST
18010: PUSH
18011: LD_INT 24
18013: PUSH
18014: LD_INT 3
18016: PUSH
18017: LD_INT 3
18019: PUSH
18020: LD_INT 47
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: LIST
18027: LIST
18028: PUSH
18029: LD_INT 24
18031: PUSH
18032: LD_INT 3
18034: PUSH
18035: LD_INT 3
18037: PUSH
18038: LD_INT 46
18040: PUSH
18041: EMPTY
18042: LIST
18043: LIST
18044: LIST
18045: LIST
18046: PUSH
18047: LD_INT 24
18049: PUSH
18050: LD_INT 3
18052: PUSH
18053: LD_INT 3
18055: PUSH
18056: LD_INT 46
18058: PUSH
18059: EMPTY
18060: LIST
18061: LIST
18062: LIST
18063: LIST
18064: PUSH
18065: LD_INT 24
18067: PUSH
18068: LD_INT 3
18070: PUSH
18071: LD_INT 3
18073: PUSH
18074: LD_INT 46
18076: PUSH
18077: EMPTY
18078: LIST
18079: LIST
18080: LIST
18081: LIST
18082: PUSH
18083: EMPTY
18084: LIST
18085: LIST
18086: LIST
18087: LIST
18088: LIST
18089: LIST
18090: PPUSH
18091: CALL 84309 0 2
// end ; if Difficulty > 1 then
18095: LD_OWVAR 67
18099: PUSH
18100: LD_INT 1
18102: GREATER
18103: IFFALSE 18135
// MC_InsertProduceList ( base , [ [ ru_heavy_tracked , engine_siberite , control_computer , ru_rocket ] ] ) ;
18105: LD_VAR 0 2
18109: PPUSH
18110: LD_INT 24
18112: PUSH
18113: LD_INT 3
18115: PUSH
18116: LD_INT 3
18118: PUSH
18119: LD_INT 47
18121: PUSH
18122: EMPTY
18123: LIST
18124: LIST
18125: LIST
18126: LIST
18127: PUSH
18128: EMPTY
18129: LIST
18130: PPUSH
18131: CALL 84309 0 2
// repeat wait ( 0 0$1 ) ;
18135: LD_INT 35
18137: PPUSH
18138: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= [ 6 , 7 , 7 ] [ Difficulty ] or tick mod 10 10$00 = 0 ;
18142: LD_VAR 0 2
18146: PPUSH
18147: LD_INT 1
18149: PPUSH
18150: CALL 85727 0 2
18154: PUSH
18155: LD_INT 6
18157: PUSH
18158: LD_INT 7
18160: PUSH
18161: LD_INT 7
18163: PUSH
18164: EMPTY
18165: LIST
18166: LIST
18167: LIST
18168: PUSH
18169: LD_OWVAR 67
18173: ARRAY
18174: GREATEREQUAL
18175: PUSH
18176: LD_OWVAR 1
18180: PUSH
18181: LD_INT 21000
18183: MOD
18184: PUSH
18185: LD_INT 0
18187: EQUAL
18188: OR
18189: IFFALSE 18135
// wait ( 0 0$45 ) ;
18191: LD_INT 1575
18193: PPUSH
18194: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
18198: LD_ADDR_VAR 0 3
18202: PUSH
18203: LD_VAR 0 2
18207: PPUSH
18208: LD_INT 1
18210: PPUSH
18211: CALL 85727 0 2
18215: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
18216: LD_ADDR_EXP 69
18220: PUSH
18221: LD_EXP 69
18225: PPUSH
18226: LD_VAR 0 2
18230: PPUSH
18231: LD_EXP 69
18235: PUSH
18236: LD_VAR 0 2
18240: ARRAY
18241: PUSH
18242: LD_VAR 0 3
18246: DIFF
18247: PPUSH
18248: CALL_OW 1
18252: ST_TO_ADDR
// target := rand ( 0 , 1 ) ;
18253: LD_ADDR_VAR 0 4
18257: PUSH
18258: LD_INT 0
18260: PPUSH
18261: LD_INT 1
18263: PPUSH
18264: CALL_OW 12
18268: ST_TO_ADDR
// if target then
18269: LD_VAR 0 4
18273: IFFALSE 18401
// begin repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
18275: LD_ADDR_VAR 0 3
18279: PUSH
18280: LD_VAR 0 3
18284: PPUSH
18285: LD_INT 24
18287: PUSH
18288: LD_INT 250
18290: PUSH
18291: EMPTY
18292: LIST
18293: LIST
18294: PPUSH
18295: CALL_OW 72
18299: ST_TO_ADDR
// for i in tmp do
18300: LD_ADDR_VAR 0 1
18304: PUSH
18305: LD_VAR 0 3
18309: PUSH
18310: FOR_IN
18311: IFFALSE 18351
// if GetDistUnitXY ( i , 84 , 32 ) > 9 then
18313: LD_VAR 0 1
18317: PPUSH
18318: LD_INT 84
18320: PPUSH
18321: LD_INT 32
18323: PPUSH
18324: CALL_OW 297
18328: PUSH
18329: LD_INT 9
18331: GREATER
18332: IFFALSE 18349
// ComMoveXY ( i , 84 , 32 ) ;
18334: LD_VAR 0 1
18338: PPUSH
18339: LD_INT 84
18341: PPUSH
18342: LD_INT 32
18344: PPUSH
18345: CALL_OW 111
18349: GO 18310
18351: POP
18352: POP
// wait ( 0 0$1 ) ;
18353: LD_INT 35
18355: PPUSH
18356: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 84 , 32 , 9 ] ) >= ( tmp - 1 ) ;
18360: LD_VAR 0 3
18364: PPUSH
18365: LD_INT 92
18367: PUSH
18368: LD_INT 84
18370: PUSH
18371: LD_INT 32
18373: PUSH
18374: LD_INT 9
18376: PUSH
18377: EMPTY
18378: LIST
18379: LIST
18380: LIST
18381: LIST
18382: PPUSH
18383: CALL_OW 72
18387: PUSH
18388: LD_VAR 0 3
18392: PUSH
18393: LD_INT 1
18395: MINUS
18396: GREATEREQUAL
18397: IFFALSE 18275
// end else
18399: GO 18561
// begin if teleport then
18401: LD_VAR 0 5
18405: IFFALSE 18425
// ComEnterUnit ( tmp , teleport [ 1 ] ) ;
18407: LD_VAR 0 3
18411: PPUSH
18412: LD_VAR 0 5
18416: PUSH
18417: LD_INT 1
18419: ARRAY
18420: PPUSH
18421: CALL_OW 120
// repeat tmp := UnitFilter ( tmp , [ f_lives , 250 ] ) ;
18425: LD_ADDR_VAR 0 3
18429: PUSH
18430: LD_VAR 0 3
18434: PPUSH
18435: LD_INT 24
18437: PUSH
18438: LD_INT 250
18440: PUSH
18441: EMPTY
18442: LIST
18443: LIST
18444: PPUSH
18445: CALL_OW 72
18449: ST_TO_ADDR
// for i in tmp do
18450: LD_ADDR_VAR 0 1
18454: PUSH
18455: LD_VAR 0 3
18459: PUSH
18460: FOR_IN
18461: IFFALSE 18513
// if GetDistUnitXY ( i , 140 , 219 ) > 9 and not HasTask ( i ) then
18463: LD_VAR 0 1
18467: PPUSH
18468: LD_INT 140
18470: PPUSH
18471: LD_INT 219
18473: PPUSH
18474: CALL_OW 297
18478: PUSH
18479: LD_INT 9
18481: GREATER
18482: PUSH
18483: LD_VAR 0 1
18487: PPUSH
18488: CALL_OW 314
18492: NOT
18493: AND
18494: IFFALSE 18511
// AddComMoveXY ( i , 140 , 219 ) ;
18496: LD_VAR 0 1
18500: PPUSH
18501: LD_INT 140
18503: PPUSH
18504: LD_INT 219
18506: PPUSH
18507: CALL_OW 171
18511: GO 18460
18513: POP
18514: POP
// wait ( 0 0$1 ) ;
18515: LD_INT 35
18517: PPUSH
18518: CALL_OW 67
// until UnitFilter ( tmp , [ f_distxy , 140 , 219 , 9 ] ) >= ( tmp - 1 ) ;
18522: LD_VAR 0 3
18526: PPUSH
18527: LD_INT 92
18529: PUSH
18530: LD_INT 140
18532: PUSH
18533: LD_INT 219
18535: PUSH
18536: LD_INT 9
18538: PUSH
18539: EMPTY
18540: LIST
18541: LIST
18542: LIST
18543: LIST
18544: PPUSH
18545: CALL_OW 72
18549: PUSH
18550: LD_VAR 0 3
18554: PUSH
18555: LD_INT 1
18557: MINUS
18558: GREATEREQUAL
18559: IFFALSE 18425
// end ; repeat wait ( 0 0$1 ) ;
18561: LD_INT 35
18563: PPUSH
18564: CALL_OW 67
// for i in tmp do
18568: LD_ADDR_VAR 0 1
18572: PUSH
18573: LD_VAR 0 3
18577: PUSH
18578: FOR_IN
18579: IFFALSE 18712
// begin if GetLives ( i ) > 251 then
18581: LD_VAR 0 1
18585: PPUSH
18586: CALL_OW 256
18590: PUSH
18591: LD_INT 251
18593: GREATER
18594: IFFALSE 18683
// begin if GetWeapon ( i ) = ru_time_lapser then
18596: LD_VAR 0 1
18600: PPUSH
18601: CALL_OW 264
18605: PUSH
18606: LD_INT 49
18608: EQUAL
18609: IFFALSE 18647
// ComMoveUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) else
18611: LD_VAR 0 1
18615: PPUSH
18616: LD_INT 81
18618: PUSH
18619: LD_INT 3
18621: PUSH
18622: EMPTY
18623: LIST
18624: LIST
18625: PPUSH
18626: CALL_OW 69
18630: PPUSH
18631: LD_VAR 0 1
18635: PPUSH
18636: CALL_OW 74
18640: PPUSH
18641: CALL_OW 112
18645: GO 18681
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ) ;
18647: LD_VAR 0 1
18651: PPUSH
18652: LD_INT 81
18654: PUSH
18655: LD_INT 3
18657: PUSH
18658: EMPTY
18659: LIST
18660: LIST
18661: PPUSH
18662: CALL_OW 69
18666: PPUSH
18667: LD_VAR 0 1
18671: PPUSH
18672: CALL_OW 74
18676: PPUSH
18677: CALL_OW 115
// end else
18681: GO 18710
// if IsDead ( i ) then
18683: LD_VAR 0 1
18687: PPUSH
18688: CALL_OW 301
18692: IFFALSE 18710
// tmp := tmp diff i ;
18694: LD_ADDR_VAR 0 3
18698: PUSH
18699: LD_VAR 0 3
18703: PUSH
18704: LD_VAR 0 1
18708: DIFF
18709: ST_TO_ADDR
// end ;
18710: GO 18578
18712: POP
18713: POP
// until not tmp ;
18714: LD_VAR 0 3
18718: NOT
18719: IFFALSE 18561
// end ;
18721: PPOPN 5
18723: END
// every 12 12$30 + 11 11$30 trigger game do var i , base , tmp , target ;
18724: LD_EXP 3
18728: IFFALSE 19110
18730: GO 18732
18732: DISABLE
18733: LD_INT 0
18735: PPUSH
18736: PPUSH
18737: PPUSH
18738: PPUSH
// begin enable ;
18739: ENABLE
// base := mc_amer ;
18740: LD_ADDR_VAR 0 2
18744: PUSH
18745: LD_EXP 5
18749: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 4 ] , [ f_nation , 1 ] , [ f_btype , b_factory ] ] ) then
18750: LD_INT 22
18752: PUSH
18753: LD_INT 4
18755: PUSH
18756: EMPTY
18757: LIST
18758: LIST
18759: PUSH
18760: LD_INT 23
18762: PUSH
18763: LD_INT 1
18765: PUSH
18766: EMPTY
18767: LIST
18768: LIST
18769: PUSH
18770: LD_INT 30
18772: PUSH
18773: LD_INT 3
18775: PUSH
18776: EMPTY
18777: LIST
18778: LIST
18779: PUSH
18780: EMPTY
18781: LIST
18782: LIST
18783: LIST
18784: PPUSH
18785: CALL_OW 69
18789: NOT
18790: IFFALSE 18794
// exit ;
18792: GO 19110
// MC_InsertProduceList ( base , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_medium_tracked , engine_combustion , control_remote , us_laser ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_tracked , engine_combustion , control_remote , us_rocket_launcher ] ] ) ;
18794: LD_VAR 0 2
18798: PPUSH
18799: LD_INT 3
18801: PUSH
18802: LD_INT 1
18804: PUSH
18805: LD_INT 2
18807: PUSH
18808: LD_INT 5
18810: PUSH
18811: EMPTY
18812: LIST
18813: LIST
18814: LIST
18815: LIST
18816: PUSH
18817: LD_INT 3
18819: PUSH
18820: LD_INT 1
18822: PUSH
18823: LD_INT 2
18825: PUSH
18826: LD_INT 9
18828: PUSH
18829: EMPTY
18830: LIST
18831: LIST
18832: LIST
18833: LIST
18834: PUSH
18835: LD_INT 3
18837: PUSH
18838: LD_INT 1
18840: PUSH
18841: LD_INT 2
18843: PUSH
18844: LD_INT 7
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: LIST
18851: LIST
18852: PUSH
18853: LD_INT 3
18855: PUSH
18856: LD_INT 1
18858: PUSH
18859: LD_INT 2
18861: PUSH
18862: LD_INT 7
18864: PUSH
18865: EMPTY
18866: LIST
18867: LIST
18868: LIST
18869: LIST
18870: PUSH
18871: LD_INT 3
18873: PUSH
18874: LD_INT 1
18876: PUSH
18877: LD_INT 2
18879: PUSH
18880: LD_INT 7
18882: PUSH
18883: EMPTY
18884: LIST
18885: LIST
18886: LIST
18887: LIST
18888: PUSH
18889: EMPTY
18890: LIST
18891: LIST
18892: LIST
18893: LIST
18894: LIST
18895: PPUSH
18896: CALL 84309 0 2
// repeat wait ( 0 0$1 ) ;
18900: LD_INT 35
18902: PPUSH
18903: CALL_OW 67
// until MC_GetVehicles ( base , true ) >= 5 or tick mod 10 10$00 = 0 ;
18907: LD_VAR 0 2
18911: PPUSH
18912: LD_INT 1
18914: PPUSH
18915: CALL 85727 0 2
18919: PUSH
18920: LD_INT 5
18922: GREATEREQUAL
18923: PUSH
18924: LD_OWVAR 1
18928: PUSH
18929: LD_INT 21000
18931: MOD
18932: PUSH
18933: LD_INT 0
18935: EQUAL
18936: OR
18937: IFFALSE 18900
// wait ( 0 0$30 ) ;
18939: LD_INT 1050
18941: PPUSH
18942: CALL_OW 67
// tmp := MC_GetVehicles ( base , true ) ;
18946: LD_ADDR_VAR 0 3
18950: PUSH
18951: LD_VAR 0 2
18955: PPUSH
18956: LD_INT 1
18958: PPUSH
18959: CALL 85727 0 2
18963: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff tmp ) ;
18964: LD_ADDR_EXP 69
18968: PUSH
18969: LD_EXP 69
18973: PPUSH
18974: LD_VAR 0 2
18978: PPUSH
18979: LD_EXP 69
18983: PUSH
18984: LD_VAR 0 2
18988: ARRAY
18989: PUSH
18990: LD_VAR 0 3
18994: DIFF
18995: PPUSH
18996: CALL_OW 1
19000: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19001: LD_INT 35
19003: PPUSH
19004: CALL_OW 67
// for i in tmp do
19008: LD_ADDR_VAR 0 1
19012: PUSH
19013: LD_VAR 0 3
19017: PUSH
19018: FOR_IN
19019: IFFALSE 19101
// begin if GetLives ( i ) > 251 then
19021: LD_VAR 0 1
19025: PPUSH
19026: CALL_OW 256
19030: PUSH
19031: LD_INT 251
19033: GREATER
19034: IFFALSE 19072
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) else
19036: LD_VAR 0 1
19040: PPUSH
19041: LD_INT 81
19043: PUSH
19044: LD_INT 4
19046: PUSH
19047: EMPTY
19048: LIST
19049: LIST
19050: PPUSH
19051: CALL_OW 69
19055: PPUSH
19056: LD_VAR 0 1
19060: PPUSH
19061: CALL_OW 74
19065: PPUSH
19066: CALL_OW 115
19070: GO 19099
// if IsDead ( i ) then
19072: LD_VAR 0 1
19076: PPUSH
19077: CALL_OW 301
19081: IFFALSE 19099
// tmp := tmp diff i ;
19083: LD_ADDR_VAR 0 3
19087: PUSH
19088: LD_VAR 0 3
19092: PUSH
19093: LD_VAR 0 1
19097: DIFF
19098: ST_TO_ADDR
// end ;
19099: GO 19018
19101: POP
19102: POP
// until not tmp ;
19103: LD_VAR 0 3
19107: NOT
19108: IFFALSE 19001
// end ; end_of_file
19110: PPOPN 4
19112: END
// export function CustomEvent ( event ) ; begin
19113: LD_INT 0
19115: PPUSH
// end ;
19116: LD_VAR 0 2
19120: RET
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 4 then
19121: LD_VAR 0 1
19125: PUSH
19126: LD_INT 1
19128: EQUAL
19129: PUSH
19130: LD_VAR 0 2
19134: PUSH
19135: LD_INT 4
19137: EQUAL
19138: AND
19139: IFFALSE 19167
// begin SayRadio ( Powell , DP-Lost ) ;
19141: LD_EXP 12
19145: PPUSH
19146: LD_STRING DP-Lost
19148: PPUSH
19149: CALL_OW 94
// wait ( 0 0$2 ) ;
19153: LD_INT 70
19155: PPUSH
19156: CALL_OW 67
// YouLost ( FriendlyFire ) ;
19160: LD_STRING FriendlyFire
19162: PPUSH
19163: CALL_OW 104
// end ; end ;
19167: PPOPN 2
19169: END
// on UnitDestroyed ( un ) do begin SOS_UnitDestroyed ( un ) ;
19170: LD_VAR 0 1
19174: PPUSH
19175: CALL 105049 0 1
// if GameType = 1 then
19179: LD_EXP 2
19183: PUSH
19184: LD_INT 1
19186: EQUAL
19187: IFFALSE 19422
// begin if un = playerCommander then
19189: LD_VAR 0 1
19193: PUSH
19194: LD_EXP 9
19198: EQUAL
19199: IFFALSE 19208
// YouLost ( commanderDied ) ;
19201: LD_STRING commanderDied
19203: PPUSH
19204: CALL_OW 104
// if un = allyCommander then
19208: LD_VAR 0 1
19212: PUSH
19213: LD_EXP 11
19217: EQUAL
19218: IFFALSE 19227
// YouLost ( Theta ) ;
19220: LD_STRING Theta
19222: PPUSH
19223: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
19227: LD_VAR 0 1
19231: PUSH
19232: LD_INT 22
19234: PUSH
19235: LD_INT 8
19237: PUSH
19238: EMPTY
19239: LIST
19240: LIST
19241: PUSH
19242: LD_INT 2
19244: PUSH
19245: LD_INT 21
19247: PUSH
19248: LD_INT 1
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: PUSH
19255: LD_INT 21
19257: PUSH
19258: LD_INT 3
19260: PUSH
19261: EMPTY
19262: LIST
19263: LIST
19264: PUSH
19265: EMPTY
19266: LIST
19267: LIST
19268: LIST
19269: PUSH
19270: EMPTY
19271: LIST
19272: LIST
19273: PPUSH
19274: CALL_OW 69
19278: IN
19279: IFFALSE 19295
// legDestCounter := legDestCounter + 1 ;
19281: LD_ADDR_EXP 18
19285: PUSH
19286: LD_EXP 18
19290: PUSH
19291: LD_INT 1
19293: PLUS
19294: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
19295: LD_VAR 0 1
19299: PUSH
19300: LD_INT 22
19302: PUSH
19303: LD_INT 4
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: PUSH
19310: LD_INT 2
19312: PUSH
19313: LD_INT 21
19315: PUSH
19316: LD_INT 1
19318: PUSH
19319: EMPTY
19320: LIST
19321: LIST
19322: PUSH
19323: LD_INT 21
19325: PUSH
19326: LD_INT 3
19328: PUSH
19329: EMPTY
19330: LIST
19331: LIST
19332: PUSH
19333: EMPTY
19334: LIST
19335: LIST
19336: LIST
19337: PUSH
19338: EMPTY
19339: LIST
19340: LIST
19341: PPUSH
19342: CALL_OW 69
19346: IN
19347: IFFALSE 19363
// allyDestCounter := allyDestCounter + 1 ;
19349: LD_ADDR_EXP 22
19353: PUSH
19354: LD_EXP 22
19358: PUSH
19359: LD_INT 1
19361: PLUS
19362: ST_TO_ADDR
// if un in ruOutpost then
19363: LD_VAR 0 1
19367: PUSH
19368: LD_EXP 14
19372: IN
19373: IFFALSE 19422
// begin ruOutpost := ruOutpost diff un ;
19375: LD_ADDR_EXP 14
19379: PUSH
19380: LD_EXP 14
19384: PUSH
19385: LD_VAR 0 1
19389: DIFF
19390: ST_TO_ADDR
// ruEscape := Replace ( ruEscape , 1 , ruEscape [ 1 ] + 1 ) ;
19391: LD_ADDR_EXP 15
19395: PUSH
19396: LD_EXP 15
19400: PPUSH
19401: LD_INT 1
19403: PPUSH
19404: LD_EXP 15
19408: PUSH
19409: LD_INT 1
19411: ARRAY
19412: PUSH
19413: LD_INT 1
19415: PLUS
19416: PPUSH
19417: CALL_OW 1
19421: ST_TO_ADDR
// end ; end ; MCE_UnitDestroyed ( un ) ;
19422: LD_VAR 0 1
19426: PPUSH
19427: CALL 87729 0 1
// end ;
19431: PPOPN 1
19433: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
19434: LD_VAR 0 1
19438: PPUSH
19439: LD_VAR 0 2
19443: PPUSH
19444: CALL 90063 0 2
// end ;
19448: PPOPN 2
19450: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
19451: LD_VAR 0 1
19455: PPUSH
19456: CALL 89131 0 1
// end ;
19460: PPOPN 1
19462: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
19463: LD_VAR 0 1
19467: PPUSH
19468: CALL 89372 0 1
// end ;
19472: PPOPN 1
19474: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_LasDouble and GetSide ( lab ) = 1 then
19475: LD_VAR 0 1
19479: PUSH
19480: LD_INT 14
19482: EQUAL
19483: PUSH
19484: LD_VAR 0 2
19488: PPUSH
19489: CALL_OW 255
19493: PUSH
19494: LD_INT 1
19496: EQUAL
19497: AND
19498: IFFALSE 19539
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Laser ) ;
19500: LD_EXP 9
19504: PPUSH
19505: LD_STRING D
19507: PUSH
19508: LD_STRING I
19510: PUSH
19511: LD_STRING J
19513: PUSH
19514: LD_STRING S
19516: PUSH
19517: EMPTY
19518: LIST
19519: LIST
19520: LIST
19521: PUSH
19522: LD_EXP 25
19526: ARRAY
19527: STR
19528: PUSH
19529: LD_STRING -1-Laser
19531: STR
19532: PPUSH
19533: CALL_OW 88
// exit ;
19537: GO 19681
// end ; if tech = tech_MatDet and GetSide ( lab ) = 1 then
19539: LD_VAR 0 1
19543: PUSH
19544: LD_INT 7
19546: EQUAL
19547: PUSH
19548: LD_VAR 0 2
19552: PPUSH
19553: CALL_OW 255
19557: PUSH
19558: LD_INT 1
19560: EQUAL
19561: AND
19562: IFFALSE 19603
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Materialization ) ;
19564: LD_EXP 9
19568: PPUSH
19569: LD_STRING D
19571: PUSH
19572: LD_STRING I
19574: PUSH
19575: LD_STRING J
19577: PUSH
19578: LD_STRING S
19580: PUSH
19581: EMPTY
19582: LIST
19583: LIST
19584: LIST
19585: PUSH
19586: LD_EXP 25
19590: ARRAY
19591: STR
19592: PUSH
19593: LD_STRING -1-Materialization
19595: STR
19596: PPUSH
19597: CALL_OW 88
// exit ;
19601: GO 19681
// end ; if tech = tech_SibFiss and GetSide ( lab ) = 1 then
19603: LD_VAR 0 1
19607: PUSH
19608: LD_INT 25
19610: EQUAL
19611: PUSH
19612: LD_VAR 0 2
19616: PPUSH
19617: CALL_OW 255
19621: PUSH
19622: LD_INT 1
19624: EQUAL
19625: AND
19626: IFFALSE 19667
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Rocket ) ;
19628: LD_EXP 9
19632: PPUSH
19633: LD_STRING D
19635: PUSH
19636: LD_STRING I
19638: PUSH
19639: LD_STRING J
19641: PUSH
19642: LD_STRING S
19644: PUSH
19645: EMPTY
19646: LIST
19647: LIST
19648: LIST
19649: PUSH
19650: LD_EXP 25
19654: ARRAY
19655: STR
19656: PUSH
19657: LD_STRING -1-Rocket
19659: STR
19660: PPUSH
19661: CALL_OW 88
// exit ;
19665: GO 19681
// end ; MCE_ResearchComplete ( tech , lab ) ;
19667: LD_VAR 0 1
19671: PPUSH
19672: LD_VAR 0 2
19676: PPUSH
19677: CALL 87425 0 2
// end ;
19681: PPOPN 2
19683: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
19684: LD_VAR 0 1
19688: PPUSH
19689: LD_VAR 0 2
19693: PPUSH
19694: LD_VAR 0 3
19698: PPUSH
19699: LD_VAR 0 4
19703: PPUSH
19704: LD_VAR 0 5
19708: PPUSH
19709: CALL 87045 0 5
// end ;
19713: PPOPN 5
19715: END
// on VehicleConstructed ( vehicle , factory ) do begin SOS_VehicleConstructed ( vehicle , factory ) ;
19716: LD_VAR 0 1
19720: PPUSH
19721: LD_VAR 0 2
19725: PPUSH
19726: CALL 105171 0 2
// MCE_VehicleConstructed ( vehicle , factory ) ;
19730: LD_VAR 0 1
19734: PPUSH
19735: LD_VAR 0 2
19739: PPUSH
19740: CALL 86626 0 2
// end ;
19744: PPOPN 2
19746: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
19747: LD_VAR 0 1
19751: PPUSH
19752: LD_VAR 0 2
19756: PPUSH
19757: LD_VAR 0 3
19761: PPUSH
19762: LD_VAR 0 4
19766: PPUSH
19767: CALL 86464 0 4
// end ;
19771: PPOPN 4
19773: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
19774: LD_VAR 0 1
19778: PPUSH
19779: LD_VAR 0 2
19783: PPUSH
19784: LD_VAR 0 3
19788: PPUSH
19789: CALL 86239 0 3
// end ;
19793: PPOPN 3
19795: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
19796: LD_VAR 0 1
19800: PPUSH
19801: LD_VAR 0 2
19805: PPUSH
19806: CALL 86124 0 2
// end ;
19810: PPOPN 2
19812: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
19813: LD_VAR 0 1
19817: PPUSH
19818: LD_VAR 0 2
19822: PPUSH
19823: CALL 90358 0 2
// end ;
19827: PPOPN 2
19829: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
19830: LD_VAR 0 1
19834: PPUSH
19835: LD_VAR 0 2
19839: PPUSH
19840: LD_VAR 0 3
19844: PPUSH
19845: LD_VAR 0 4
19849: PPUSH
19850: CALL 90574 0 4
// end ;
19854: PPOPN 4
19856: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
19857: LD_VAR 0 1
19861: PPUSH
19862: LD_VAR 0 2
19866: PPUSH
19867: CALL 85933 0 2
// end ;
19871: PPOPN 2
19873: END
// on Command ( cmd ) do begin SOS_Command ( cmd ) ;
19874: LD_VAR 0 1
19878: PPUSH
19879: CALL 105155 0 1
// end ; end_of_file
19883: PPOPN 1
19885: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
19886: LD_INT 0
19888: PPUSH
19889: PPUSH
// if exist_mode then
19890: LD_VAR 0 2
19894: IFFALSE 19919
// unit := CreateCharacter ( prefix & ident ) else
19896: LD_ADDR_VAR 0 5
19900: PUSH
19901: LD_VAR 0 3
19905: PUSH
19906: LD_VAR 0 1
19910: STR
19911: PPUSH
19912: CALL_OW 34
19916: ST_TO_ADDR
19917: GO 19934
// unit := NewCharacter ( ident ) ;
19919: LD_ADDR_VAR 0 5
19923: PUSH
19924: LD_VAR 0 1
19928: PPUSH
19929: CALL_OW 25
19933: ST_TO_ADDR
// result := unit ;
19934: LD_ADDR_VAR 0 4
19938: PUSH
19939: LD_VAR 0 5
19943: ST_TO_ADDR
// end ;
19944: LD_VAR 0 4
19948: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
19949: LD_INT 0
19951: PPUSH
19952: PPUSH
// if not side or not nation then
19953: LD_VAR 0 1
19957: NOT
19958: PUSH
19959: LD_VAR 0 2
19963: NOT
19964: OR
19965: IFFALSE 19969
// exit ;
19967: GO 20737
// case nation of nation_american :
19969: LD_VAR 0 2
19973: PUSH
19974: LD_INT 1
19976: DOUBLE
19977: EQUAL
19978: IFTRUE 19982
19980: GO 20196
19982: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
19983: LD_ADDR_VAR 0 4
19987: PUSH
19988: LD_INT 35
19990: PUSH
19991: LD_INT 45
19993: PUSH
19994: LD_INT 46
19996: PUSH
19997: LD_INT 47
19999: PUSH
20000: LD_INT 82
20002: PUSH
20003: LD_INT 83
20005: PUSH
20006: LD_INT 84
20008: PUSH
20009: LD_INT 85
20011: PUSH
20012: LD_INT 86
20014: PUSH
20015: LD_INT 1
20017: PUSH
20018: LD_INT 2
20020: PUSH
20021: LD_INT 6
20023: PUSH
20024: LD_INT 15
20026: PUSH
20027: LD_INT 16
20029: PUSH
20030: LD_INT 7
20032: PUSH
20033: LD_INT 12
20035: PUSH
20036: LD_INT 13
20038: PUSH
20039: LD_INT 10
20041: PUSH
20042: LD_INT 14
20044: PUSH
20045: LD_INT 20
20047: PUSH
20048: LD_INT 21
20050: PUSH
20051: LD_INT 22
20053: PUSH
20054: LD_INT 25
20056: PUSH
20057: LD_INT 32
20059: PUSH
20060: LD_INT 27
20062: PUSH
20063: LD_INT 36
20065: PUSH
20066: LD_INT 69
20068: PUSH
20069: LD_INT 39
20071: PUSH
20072: LD_INT 34
20074: PUSH
20075: LD_INT 40
20077: PUSH
20078: LD_INT 48
20080: PUSH
20081: LD_INT 49
20083: PUSH
20084: LD_INT 50
20086: PUSH
20087: LD_INT 51
20089: PUSH
20090: LD_INT 52
20092: PUSH
20093: LD_INT 53
20095: PUSH
20096: LD_INT 54
20098: PUSH
20099: LD_INT 55
20101: PUSH
20102: LD_INT 56
20104: PUSH
20105: LD_INT 57
20107: PUSH
20108: LD_INT 58
20110: PUSH
20111: LD_INT 59
20113: PUSH
20114: LD_INT 60
20116: PUSH
20117: LD_INT 61
20119: PUSH
20120: LD_INT 62
20122: PUSH
20123: LD_INT 80
20125: PUSH
20126: LD_INT 82
20128: PUSH
20129: LD_INT 83
20131: PUSH
20132: LD_INT 84
20134: PUSH
20135: LD_INT 85
20137: PUSH
20138: LD_INT 86
20140: PUSH
20141: EMPTY
20142: LIST
20143: LIST
20144: LIST
20145: LIST
20146: LIST
20147: LIST
20148: LIST
20149: LIST
20150: LIST
20151: LIST
20152: LIST
20153: LIST
20154: LIST
20155: LIST
20156: LIST
20157: LIST
20158: LIST
20159: LIST
20160: LIST
20161: LIST
20162: LIST
20163: LIST
20164: LIST
20165: LIST
20166: LIST
20167: LIST
20168: LIST
20169: LIST
20170: LIST
20171: LIST
20172: LIST
20173: LIST
20174: LIST
20175: LIST
20176: LIST
20177: LIST
20178: LIST
20179: LIST
20180: LIST
20181: LIST
20182: LIST
20183: LIST
20184: LIST
20185: LIST
20186: LIST
20187: LIST
20188: LIST
20189: LIST
20190: LIST
20191: LIST
20192: LIST
20193: ST_TO_ADDR
20194: GO 20661
20196: LD_INT 2
20198: DOUBLE
20199: EQUAL
20200: IFTRUE 20204
20202: GO 20430
20204: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
20205: LD_ADDR_VAR 0 4
20209: PUSH
20210: LD_INT 35
20212: PUSH
20213: LD_INT 45
20215: PUSH
20216: LD_INT 46
20218: PUSH
20219: LD_INT 47
20221: PUSH
20222: LD_INT 82
20224: PUSH
20225: LD_INT 83
20227: PUSH
20228: LD_INT 84
20230: PUSH
20231: LD_INT 85
20233: PUSH
20234: LD_INT 87
20236: PUSH
20237: LD_INT 70
20239: PUSH
20240: LD_INT 1
20242: PUSH
20243: LD_INT 11
20245: PUSH
20246: LD_INT 3
20248: PUSH
20249: LD_INT 4
20251: PUSH
20252: LD_INT 5
20254: PUSH
20255: LD_INT 6
20257: PUSH
20258: LD_INT 15
20260: PUSH
20261: LD_INT 18
20263: PUSH
20264: LD_INT 7
20266: PUSH
20267: LD_INT 17
20269: PUSH
20270: LD_INT 8
20272: PUSH
20273: LD_INT 20
20275: PUSH
20276: LD_INT 21
20278: PUSH
20279: LD_INT 22
20281: PUSH
20282: LD_INT 72
20284: PUSH
20285: LD_INT 26
20287: PUSH
20288: LD_INT 69
20290: PUSH
20291: LD_INT 39
20293: PUSH
20294: LD_INT 40
20296: PUSH
20297: LD_INT 41
20299: PUSH
20300: LD_INT 42
20302: PUSH
20303: LD_INT 43
20305: PUSH
20306: LD_INT 48
20308: PUSH
20309: LD_INT 49
20311: PUSH
20312: LD_INT 50
20314: PUSH
20315: LD_INT 51
20317: PUSH
20318: LD_INT 52
20320: PUSH
20321: LD_INT 53
20323: PUSH
20324: LD_INT 54
20326: PUSH
20327: LD_INT 55
20329: PUSH
20330: LD_INT 56
20332: PUSH
20333: LD_INT 60
20335: PUSH
20336: LD_INT 61
20338: PUSH
20339: LD_INT 62
20341: PUSH
20342: LD_INT 66
20344: PUSH
20345: LD_INT 67
20347: PUSH
20348: LD_INT 68
20350: PUSH
20351: LD_INT 81
20353: PUSH
20354: LD_INT 82
20356: PUSH
20357: LD_INT 83
20359: PUSH
20360: LD_INT 84
20362: PUSH
20363: LD_INT 85
20365: PUSH
20366: LD_INT 87
20368: PUSH
20369: LD_INT 88
20371: PUSH
20372: EMPTY
20373: LIST
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: LIST
20381: LIST
20382: LIST
20383: LIST
20384: LIST
20385: LIST
20386: LIST
20387: LIST
20388: LIST
20389: LIST
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: LIST
20395: LIST
20396: LIST
20397: LIST
20398: LIST
20399: LIST
20400: LIST
20401: LIST
20402: LIST
20403: LIST
20404: LIST
20405: LIST
20406: LIST
20407: LIST
20408: LIST
20409: LIST
20410: LIST
20411: LIST
20412: LIST
20413: LIST
20414: LIST
20415: LIST
20416: LIST
20417: LIST
20418: LIST
20419: LIST
20420: LIST
20421: LIST
20422: LIST
20423: LIST
20424: LIST
20425: LIST
20426: LIST
20427: ST_TO_ADDR
20428: GO 20661
20430: LD_INT 3
20432: DOUBLE
20433: EQUAL
20434: IFTRUE 20438
20436: GO 20660
20438: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
20439: LD_ADDR_VAR 0 4
20443: PUSH
20444: LD_INT 46
20446: PUSH
20447: LD_INT 47
20449: PUSH
20450: LD_INT 1
20452: PUSH
20453: LD_INT 2
20455: PUSH
20456: LD_INT 82
20458: PUSH
20459: LD_INT 83
20461: PUSH
20462: LD_INT 84
20464: PUSH
20465: LD_INT 85
20467: PUSH
20468: LD_INT 86
20470: PUSH
20471: LD_INT 11
20473: PUSH
20474: LD_INT 9
20476: PUSH
20477: LD_INT 20
20479: PUSH
20480: LD_INT 19
20482: PUSH
20483: LD_INT 21
20485: PUSH
20486: LD_INT 24
20488: PUSH
20489: LD_INT 22
20491: PUSH
20492: LD_INT 25
20494: PUSH
20495: LD_INT 28
20497: PUSH
20498: LD_INT 29
20500: PUSH
20501: LD_INT 30
20503: PUSH
20504: LD_INT 31
20506: PUSH
20507: LD_INT 37
20509: PUSH
20510: LD_INT 38
20512: PUSH
20513: LD_INT 32
20515: PUSH
20516: LD_INT 27
20518: PUSH
20519: LD_INT 33
20521: PUSH
20522: LD_INT 69
20524: PUSH
20525: LD_INT 39
20527: PUSH
20528: LD_INT 34
20530: PUSH
20531: LD_INT 40
20533: PUSH
20534: LD_INT 71
20536: PUSH
20537: LD_INT 23
20539: PUSH
20540: LD_INT 44
20542: PUSH
20543: LD_INT 48
20545: PUSH
20546: LD_INT 49
20548: PUSH
20549: LD_INT 50
20551: PUSH
20552: LD_INT 51
20554: PUSH
20555: LD_INT 52
20557: PUSH
20558: LD_INT 53
20560: PUSH
20561: LD_INT 54
20563: PUSH
20564: LD_INT 55
20566: PUSH
20567: LD_INT 56
20569: PUSH
20570: LD_INT 57
20572: PUSH
20573: LD_INT 58
20575: PUSH
20576: LD_INT 59
20578: PUSH
20579: LD_INT 63
20581: PUSH
20582: LD_INT 64
20584: PUSH
20585: LD_INT 65
20587: PUSH
20588: LD_INT 82
20590: PUSH
20591: LD_INT 83
20593: PUSH
20594: LD_INT 84
20596: PUSH
20597: LD_INT 85
20599: PUSH
20600: LD_INT 86
20602: PUSH
20603: EMPTY
20604: LIST
20605: LIST
20606: LIST
20607: LIST
20608: LIST
20609: LIST
20610: LIST
20611: LIST
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: LIST
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: LIST
20625: LIST
20626: LIST
20627: LIST
20628: LIST
20629: LIST
20630: LIST
20631: LIST
20632: LIST
20633: LIST
20634: LIST
20635: LIST
20636: LIST
20637: LIST
20638: LIST
20639: LIST
20640: LIST
20641: LIST
20642: LIST
20643: LIST
20644: LIST
20645: LIST
20646: LIST
20647: LIST
20648: LIST
20649: LIST
20650: LIST
20651: LIST
20652: LIST
20653: LIST
20654: LIST
20655: LIST
20656: LIST
20657: ST_TO_ADDR
20658: GO 20661
20660: POP
// if state > - 1 and state < 3 then
20661: LD_VAR 0 3
20665: PUSH
20666: LD_INT 1
20668: NEG
20669: GREATER
20670: PUSH
20671: LD_VAR 0 3
20675: PUSH
20676: LD_INT 3
20678: LESS
20679: AND
20680: IFFALSE 20737
// for i in result do
20682: LD_ADDR_VAR 0 5
20686: PUSH
20687: LD_VAR 0 4
20691: PUSH
20692: FOR_IN
20693: IFFALSE 20735
// if GetTech ( i , side ) <> state then
20695: LD_VAR 0 5
20699: PPUSH
20700: LD_VAR 0 1
20704: PPUSH
20705: CALL_OW 321
20709: PUSH
20710: LD_VAR 0 3
20714: NONEQUAL
20715: IFFALSE 20733
// result := result diff i ;
20717: LD_ADDR_VAR 0 4
20721: PUSH
20722: LD_VAR 0 4
20726: PUSH
20727: LD_VAR 0 5
20731: DIFF
20732: ST_TO_ADDR
20733: GO 20692
20735: POP
20736: POP
// end ;
20737: LD_VAR 0 4
20741: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20742: LD_INT 0
20744: PPUSH
20745: PPUSH
20746: PPUSH
// result := true ;
20747: LD_ADDR_VAR 0 3
20751: PUSH
20752: LD_INT 1
20754: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20755: LD_ADDR_VAR 0 5
20759: PUSH
20760: LD_VAR 0 2
20764: PPUSH
20765: CALL_OW 480
20769: ST_TO_ADDR
// if not tmp then
20770: LD_VAR 0 5
20774: NOT
20775: IFFALSE 20779
// exit ;
20777: GO 20828
// for i in tmp do
20779: LD_ADDR_VAR 0 4
20783: PUSH
20784: LD_VAR 0 5
20788: PUSH
20789: FOR_IN
20790: IFFALSE 20826
// if GetTech ( i , side ) <> state_researched then
20792: LD_VAR 0 4
20796: PPUSH
20797: LD_VAR 0 1
20801: PPUSH
20802: CALL_OW 321
20806: PUSH
20807: LD_INT 2
20809: NONEQUAL
20810: IFFALSE 20824
// begin result := false ;
20812: LD_ADDR_VAR 0 3
20816: PUSH
20817: LD_INT 0
20819: ST_TO_ADDR
// exit ;
20820: POP
20821: POP
20822: GO 20828
// end ;
20824: GO 20789
20826: POP
20827: POP
// end ;
20828: LD_VAR 0 3
20832: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20833: LD_INT 0
20835: PPUSH
20836: PPUSH
20837: PPUSH
20838: PPUSH
20839: PPUSH
20840: PPUSH
20841: PPUSH
20842: PPUSH
20843: PPUSH
20844: PPUSH
20845: PPUSH
20846: PPUSH
20847: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20848: LD_VAR 0 1
20852: NOT
20853: PUSH
20854: LD_VAR 0 1
20858: PPUSH
20859: CALL_OW 257
20863: PUSH
20864: LD_INT 9
20866: NONEQUAL
20867: OR
20868: IFFALSE 20872
// exit ;
20870: GO 21445
// side := GetSide ( unit ) ;
20872: LD_ADDR_VAR 0 9
20876: PUSH
20877: LD_VAR 0 1
20881: PPUSH
20882: CALL_OW 255
20886: ST_TO_ADDR
// tech_space := tech_spacanom ;
20887: LD_ADDR_VAR 0 12
20891: PUSH
20892: LD_INT 29
20894: ST_TO_ADDR
// tech_time := tech_taurad ;
20895: LD_ADDR_VAR 0 13
20899: PUSH
20900: LD_INT 28
20902: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
20903: LD_ADDR_VAR 0 11
20907: PUSH
20908: LD_VAR 0 1
20912: PPUSH
20913: CALL_OW 310
20917: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
20918: LD_VAR 0 11
20922: PPUSH
20923: CALL_OW 247
20927: PUSH
20928: LD_INT 2
20930: EQUAL
20931: IFFALSE 20935
// exit ;
20933: GO 21445
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20935: LD_ADDR_VAR 0 8
20939: PUSH
20940: LD_INT 81
20942: PUSH
20943: LD_VAR 0 9
20947: PUSH
20948: EMPTY
20949: LIST
20950: LIST
20951: PUSH
20952: LD_INT 3
20954: PUSH
20955: LD_INT 21
20957: PUSH
20958: LD_INT 3
20960: PUSH
20961: EMPTY
20962: LIST
20963: LIST
20964: PUSH
20965: EMPTY
20966: LIST
20967: LIST
20968: PUSH
20969: EMPTY
20970: LIST
20971: LIST
20972: PPUSH
20973: CALL_OW 69
20977: ST_TO_ADDR
// if not tmp then
20978: LD_VAR 0 8
20982: NOT
20983: IFFALSE 20987
// exit ;
20985: GO 21445
// if in_unit then
20987: LD_VAR 0 11
20991: IFFALSE 21015
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
20993: LD_ADDR_VAR 0 10
20997: PUSH
20998: LD_VAR 0 8
21002: PPUSH
21003: LD_VAR 0 11
21007: PPUSH
21008: CALL_OW 74
21012: ST_TO_ADDR
21013: GO 21035
// enemy := NearestUnitToUnit ( tmp , unit ) ;
21015: LD_ADDR_VAR 0 10
21019: PUSH
21020: LD_VAR 0 8
21024: PPUSH
21025: LD_VAR 0 1
21029: PPUSH
21030: CALL_OW 74
21034: ST_TO_ADDR
// if not enemy then
21035: LD_VAR 0 10
21039: NOT
21040: IFFALSE 21044
// exit ;
21042: GO 21445
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
21044: LD_VAR 0 11
21048: PUSH
21049: LD_VAR 0 11
21053: PPUSH
21054: LD_VAR 0 10
21058: PPUSH
21059: CALL_OW 296
21063: PUSH
21064: LD_INT 13
21066: GREATER
21067: AND
21068: PUSH
21069: LD_VAR 0 1
21073: PPUSH
21074: LD_VAR 0 10
21078: PPUSH
21079: CALL_OW 296
21083: PUSH
21084: LD_INT 12
21086: GREATER
21087: OR
21088: IFFALSE 21092
// exit ;
21090: GO 21445
// missile := [ 1 ] ;
21092: LD_ADDR_VAR 0 14
21096: PUSH
21097: LD_INT 1
21099: PUSH
21100: EMPTY
21101: LIST
21102: ST_TO_ADDR
// if Researched ( side , tech_space ) then
21103: LD_VAR 0 9
21107: PPUSH
21108: LD_VAR 0 12
21112: PPUSH
21113: CALL_OW 325
21117: IFFALSE 21146
// missile := Replace ( missile , missile + 1 , 2 ) ;
21119: LD_ADDR_VAR 0 14
21123: PUSH
21124: LD_VAR 0 14
21128: PPUSH
21129: LD_VAR 0 14
21133: PUSH
21134: LD_INT 1
21136: PLUS
21137: PPUSH
21138: LD_INT 2
21140: PPUSH
21141: CALL_OW 1
21145: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
21146: LD_VAR 0 9
21150: PPUSH
21151: LD_VAR 0 13
21155: PPUSH
21156: CALL_OW 325
21160: PUSH
21161: LD_VAR 0 10
21165: PPUSH
21166: CALL_OW 255
21170: PPUSH
21171: LD_VAR 0 13
21175: PPUSH
21176: CALL_OW 325
21180: NOT
21181: AND
21182: IFFALSE 21211
// missile := Replace ( missile , missile + 1 , 3 ) ;
21184: LD_ADDR_VAR 0 14
21188: PUSH
21189: LD_VAR 0 14
21193: PPUSH
21194: LD_VAR 0 14
21198: PUSH
21199: LD_INT 1
21201: PLUS
21202: PPUSH
21203: LD_INT 3
21205: PPUSH
21206: CALL_OW 1
21210: ST_TO_ADDR
// if missile < 2 then
21211: LD_VAR 0 14
21215: PUSH
21216: LD_INT 2
21218: LESS
21219: IFFALSE 21223
// exit ;
21221: GO 21445
// x := GetX ( enemy ) ;
21223: LD_ADDR_VAR 0 4
21227: PUSH
21228: LD_VAR 0 10
21232: PPUSH
21233: CALL_OW 250
21237: ST_TO_ADDR
// y := GetY ( enemy ) ;
21238: LD_ADDR_VAR 0 5
21242: PUSH
21243: LD_VAR 0 10
21247: PPUSH
21248: CALL_OW 251
21252: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
21253: LD_ADDR_VAR 0 6
21257: PUSH
21258: LD_VAR 0 4
21262: PUSH
21263: LD_INT 1
21265: NEG
21266: PPUSH
21267: LD_INT 1
21269: PPUSH
21270: CALL_OW 12
21274: PLUS
21275: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
21276: LD_ADDR_VAR 0 7
21280: PUSH
21281: LD_VAR 0 5
21285: PUSH
21286: LD_INT 1
21288: NEG
21289: PPUSH
21290: LD_INT 1
21292: PPUSH
21293: CALL_OW 12
21297: PLUS
21298: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21299: LD_VAR 0 6
21303: PPUSH
21304: LD_VAR 0 7
21308: PPUSH
21309: CALL_OW 488
21313: NOT
21314: IFFALSE 21336
// begin _x := x ;
21316: LD_ADDR_VAR 0 6
21320: PUSH
21321: LD_VAR 0 4
21325: ST_TO_ADDR
// _y := y ;
21326: LD_ADDR_VAR 0 7
21330: PUSH
21331: LD_VAR 0 5
21335: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
21336: LD_ADDR_VAR 0 3
21340: PUSH
21341: LD_INT 1
21343: PPUSH
21344: LD_VAR 0 14
21348: PPUSH
21349: CALL_OW 12
21353: ST_TO_ADDR
// case i of 1 :
21354: LD_VAR 0 3
21358: PUSH
21359: LD_INT 1
21361: DOUBLE
21362: EQUAL
21363: IFTRUE 21367
21365: GO 21384
21367: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
21368: LD_VAR 0 1
21372: PPUSH
21373: LD_VAR 0 10
21377: PPUSH
21378: CALL_OW 115
21382: GO 21445
21384: LD_INT 2
21386: DOUBLE
21387: EQUAL
21388: IFTRUE 21392
21390: GO 21414
21392: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
21393: LD_VAR 0 1
21397: PPUSH
21398: LD_VAR 0 6
21402: PPUSH
21403: LD_VAR 0 7
21407: PPUSH
21408: CALL_OW 153
21412: GO 21445
21414: LD_INT 3
21416: DOUBLE
21417: EQUAL
21418: IFTRUE 21422
21420: GO 21444
21422: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
21423: LD_VAR 0 1
21427: PPUSH
21428: LD_VAR 0 6
21432: PPUSH
21433: LD_VAR 0 7
21437: PPUSH
21438: CALL_OW 154
21442: GO 21445
21444: POP
// end ;
21445: LD_VAR 0 2
21449: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
21450: LD_INT 0
21452: PPUSH
21453: PPUSH
21454: PPUSH
21455: PPUSH
21456: PPUSH
21457: PPUSH
// if not unit or not building then
21458: LD_VAR 0 1
21462: NOT
21463: PUSH
21464: LD_VAR 0 2
21468: NOT
21469: OR
21470: IFFALSE 21474
// exit ;
21472: GO 21632
// x := GetX ( building ) ;
21474: LD_ADDR_VAR 0 5
21478: PUSH
21479: LD_VAR 0 2
21483: PPUSH
21484: CALL_OW 250
21488: ST_TO_ADDR
// y := GetY ( building ) ;
21489: LD_ADDR_VAR 0 6
21493: PUSH
21494: LD_VAR 0 2
21498: PPUSH
21499: CALL_OW 251
21503: ST_TO_ADDR
// for i = 0 to 5 do
21504: LD_ADDR_VAR 0 4
21508: PUSH
21509: DOUBLE
21510: LD_INT 0
21512: DEC
21513: ST_TO_ADDR
21514: LD_INT 5
21516: PUSH
21517: FOR_TO
21518: IFFALSE 21630
// begin _x := ShiftX ( x , i , 3 ) ;
21520: LD_ADDR_VAR 0 7
21524: PUSH
21525: LD_VAR 0 5
21529: PPUSH
21530: LD_VAR 0 4
21534: PPUSH
21535: LD_INT 3
21537: PPUSH
21538: CALL_OW 272
21542: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
21543: LD_ADDR_VAR 0 8
21547: PUSH
21548: LD_VAR 0 6
21552: PPUSH
21553: LD_VAR 0 4
21557: PPUSH
21558: LD_INT 3
21560: PPUSH
21561: CALL_OW 273
21565: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21566: LD_VAR 0 7
21570: PPUSH
21571: LD_VAR 0 8
21575: PPUSH
21576: CALL_OW 488
21580: NOT
21581: IFFALSE 21585
// continue ;
21583: GO 21517
// if HexInfo ( _x , _y ) = 0 then
21585: LD_VAR 0 7
21589: PPUSH
21590: LD_VAR 0 8
21594: PPUSH
21595: CALL_OW 428
21599: PUSH
21600: LD_INT 0
21602: EQUAL
21603: IFFALSE 21628
// begin ComMoveXY ( unit , _x , _y ) ;
21605: LD_VAR 0 1
21609: PPUSH
21610: LD_VAR 0 7
21614: PPUSH
21615: LD_VAR 0 8
21619: PPUSH
21620: CALL_OW 111
// exit ;
21624: POP
21625: POP
21626: GO 21632
// end ; end ;
21628: GO 21517
21630: POP
21631: POP
// end ;
21632: LD_VAR 0 3
21636: RET
// export function ScanBase ( side , base_area ) ; begin
21637: LD_INT 0
21639: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
21640: LD_ADDR_VAR 0 3
21644: PUSH
21645: LD_VAR 0 2
21649: PPUSH
21650: LD_INT 81
21652: PUSH
21653: LD_VAR 0 1
21657: PUSH
21658: EMPTY
21659: LIST
21660: LIST
21661: PPUSH
21662: CALL_OW 70
21666: ST_TO_ADDR
// end ;
21667: LD_VAR 0 3
21671: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
21672: LD_INT 0
21674: PPUSH
21675: PPUSH
21676: PPUSH
21677: PPUSH
// result := false ;
21678: LD_ADDR_VAR 0 2
21682: PUSH
21683: LD_INT 0
21685: ST_TO_ADDR
// side := GetSide ( unit ) ;
21686: LD_ADDR_VAR 0 3
21690: PUSH
21691: LD_VAR 0 1
21695: PPUSH
21696: CALL_OW 255
21700: ST_TO_ADDR
// nat := GetNation ( unit ) ;
21701: LD_ADDR_VAR 0 4
21705: PUSH
21706: LD_VAR 0 1
21710: PPUSH
21711: CALL_OW 248
21715: ST_TO_ADDR
// case nat of 1 :
21716: LD_VAR 0 4
21720: PUSH
21721: LD_INT 1
21723: DOUBLE
21724: EQUAL
21725: IFTRUE 21729
21727: GO 21740
21729: POP
// tech := tech_lassight ; 2 :
21730: LD_ADDR_VAR 0 5
21734: PUSH
21735: LD_INT 12
21737: ST_TO_ADDR
21738: GO 21779
21740: LD_INT 2
21742: DOUBLE
21743: EQUAL
21744: IFTRUE 21748
21746: GO 21759
21748: POP
// tech := tech_mortar ; 3 :
21749: LD_ADDR_VAR 0 5
21753: PUSH
21754: LD_INT 41
21756: ST_TO_ADDR
21757: GO 21779
21759: LD_INT 3
21761: DOUBLE
21762: EQUAL
21763: IFTRUE 21767
21765: GO 21778
21767: POP
// tech := tech_bazooka ; end ;
21768: LD_ADDR_VAR 0 5
21772: PUSH
21773: LD_INT 44
21775: ST_TO_ADDR
21776: GO 21779
21778: POP
// if Researched ( side , tech ) then
21779: LD_VAR 0 3
21783: PPUSH
21784: LD_VAR 0 5
21788: PPUSH
21789: CALL_OW 325
21793: IFFALSE 21820
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
21795: LD_ADDR_VAR 0 2
21799: PUSH
21800: LD_INT 5
21802: PUSH
21803: LD_INT 8
21805: PUSH
21806: LD_INT 9
21808: PUSH
21809: EMPTY
21810: LIST
21811: LIST
21812: LIST
21813: PUSH
21814: LD_VAR 0 4
21818: ARRAY
21819: ST_TO_ADDR
// end ;
21820: LD_VAR 0 2
21824: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
21825: LD_INT 0
21827: PPUSH
21828: PPUSH
21829: PPUSH
// if not mines then
21830: LD_VAR 0 2
21834: NOT
21835: IFFALSE 21839
// exit ;
21837: GO 21983
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21839: LD_ADDR_VAR 0 5
21843: PUSH
21844: LD_INT 81
21846: PUSH
21847: LD_VAR 0 1
21851: PUSH
21852: EMPTY
21853: LIST
21854: LIST
21855: PUSH
21856: LD_INT 3
21858: PUSH
21859: LD_INT 21
21861: PUSH
21862: LD_INT 3
21864: PUSH
21865: EMPTY
21866: LIST
21867: LIST
21868: PUSH
21869: EMPTY
21870: LIST
21871: LIST
21872: PUSH
21873: EMPTY
21874: LIST
21875: LIST
21876: PPUSH
21877: CALL_OW 69
21881: ST_TO_ADDR
// for i in mines do
21882: LD_ADDR_VAR 0 4
21886: PUSH
21887: LD_VAR 0 2
21891: PUSH
21892: FOR_IN
21893: IFFALSE 21981
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
21895: LD_VAR 0 4
21899: PUSH
21900: LD_INT 1
21902: ARRAY
21903: PPUSH
21904: LD_VAR 0 4
21908: PUSH
21909: LD_INT 2
21911: ARRAY
21912: PPUSH
21913: CALL_OW 458
21917: NOT
21918: IFFALSE 21922
// continue ;
21920: GO 21892
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
21922: LD_VAR 0 4
21926: PUSH
21927: LD_INT 1
21929: ARRAY
21930: PPUSH
21931: LD_VAR 0 4
21935: PUSH
21936: LD_INT 2
21938: ARRAY
21939: PPUSH
21940: CALL_OW 428
21944: PUSH
21945: LD_VAR 0 5
21949: IN
21950: IFFALSE 21979
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
21952: LD_VAR 0 4
21956: PUSH
21957: LD_INT 1
21959: ARRAY
21960: PPUSH
21961: LD_VAR 0 4
21965: PUSH
21966: LD_INT 2
21968: ARRAY
21969: PPUSH
21970: LD_VAR 0 1
21974: PPUSH
21975: CALL_OW 456
// end ;
21979: GO 21892
21981: POP
21982: POP
// end ;
21983: LD_VAR 0 3
21987: RET
// export function Count ( array ) ; var i ; begin
21988: LD_INT 0
21990: PPUSH
21991: PPUSH
// result := 0 ;
21992: LD_ADDR_VAR 0 2
21996: PUSH
21997: LD_INT 0
21999: ST_TO_ADDR
// for i in array do
22000: LD_ADDR_VAR 0 3
22004: PUSH
22005: LD_VAR 0 1
22009: PUSH
22010: FOR_IN
22011: IFFALSE 22035
// if i then
22013: LD_VAR 0 3
22017: IFFALSE 22033
// result := result + 1 ;
22019: LD_ADDR_VAR 0 2
22023: PUSH
22024: LD_VAR 0 2
22028: PUSH
22029: LD_INT 1
22031: PLUS
22032: ST_TO_ADDR
22033: GO 22010
22035: POP
22036: POP
// end ;
22037: LD_VAR 0 2
22041: RET
// export function IsEmpty ( building ) ; begin
22042: LD_INT 0
22044: PPUSH
// if not building then
22045: LD_VAR 0 1
22049: NOT
22050: IFFALSE 22054
// exit ;
22052: GO 22097
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
22054: LD_ADDR_VAR 0 2
22058: PUSH
22059: LD_VAR 0 1
22063: PUSH
22064: LD_INT 22
22066: PUSH
22067: LD_VAR 0 1
22071: PPUSH
22072: CALL_OW 255
22076: PUSH
22077: EMPTY
22078: LIST
22079: LIST
22080: PUSH
22081: LD_INT 58
22083: PUSH
22084: EMPTY
22085: LIST
22086: PUSH
22087: EMPTY
22088: LIST
22089: LIST
22090: PPUSH
22091: CALL_OW 69
22095: IN
22096: ST_TO_ADDR
// end ;
22097: LD_VAR 0 2
22101: RET
// export function IsNotFull ( building ) ; begin
22102: LD_INT 0
22104: PPUSH
// if not building then
22105: LD_VAR 0 1
22109: NOT
22110: IFFALSE 22114
// exit ;
22112: GO 22133
// result := UnitsInside ( building ) < 6 ;
22114: LD_ADDR_VAR 0 2
22118: PUSH
22119: LD_VAR 0 1
22123: PPUSH
22124: CALL_OW 313
22128: PUSH
22129: LD_INT 6
22131: LESS
22132: ST_TO_ADDR
// end ;
22133: LD_VAR 0 2
22137: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
22138: LD_INT 0
22140: PPUSH
22141: PPUSH
22142: PPUSH
22143: PPUSH
// tmp := [ ] ;
22144: LD_ADDR_VAR 0 3
22148: PUSH
22149: EMPTY
22150: ST_TO_ADDR
// list := [ ] ;
22151: LD_ADDR_VAR 0 5
22155: PUSH
22156: EMPTY
22157: ST_TO_ADDR
// for i = 16 to 25 do
22158: LD_ADDR_VAR 0 4
22162: PUSH
22163: DOUBLE
22164: LD_INT 16
22166: DEC
22167: ST_TO_ADDR
22168: LD_INT 25
22170: PUSH
22171: FOR_TO
22172: IFFALSE 22245
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
22174: LD_ADDR_VAR 0 3
22178: PUSH
22179: LD_VAR 0 3
22183: PUSH
22184: LD_INT 22
22186: PUSH
22187: LD_VAR 0 1
22191: PPUSH
22192: CALL_OW 255
22196: PUSH
22197: EMPTY
22198: LIST
22199: LIST
22200: PUSH
22201: LD_INT 91
22203: PUSH
22204: LD_VAR 0 1
22208: PUSH
22209: LD_INT 6
22211: PUSH
22212: EMPTY
22213: LIST
22214: LIST
22215: LIST
22216: PUSH
22217: LD_INT 30
22219: PUSH
22220: LD_VAR 0 4
22224: PUSH
22225: EMPTY
22226: LIST
22227: LIST
22228: PUSH
22229: EMPTY
22230: LIST
22231: LIST
22232: LIST
22233: PUSH
22234: EMPTY
22235: LIST
22236: PPUSH
22237: CALL_OW 69
22241: ADD
22242: ST_TO_ADDR
22243: GO 22171
22245: POP
22246: POP
// for i = 1 to tmp do
22247: LD_ADDR_VAR 0 4
22251: PUSH
22252: DOUBLE
22253: LD_INT 1
22255: DEC
22256: ST_TO_ADDR
22257: LD_VAR 0 3
22261: PUSH
22262: FOR_TO
22263: IFFALSE 22351
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
22265: LD_ADDR_VAR 0 5
22269: PUSH
22270: LD_VAR 0 5
22274: PUSH
22275: LD_VAR 0 3
22279: PUSH
22280: LD_VAR 0 4
22284: ARRAY
22285: PPUSH
22286: CALL_OW 266
22290: PUSH
22291: LD_VAR 0 3
22295: PUSH
22296: LD_VAR 0 4
22300: ARRAY
22301: PPUSH
22302: CALL_OW 250
22306: PUSH
22307: LD_VAR 0 3
22311: PUSH
22312: LD_VAR 0 4
22316: ARRAY
22317: PPUSH
22318: CALL_OW 251
22322: PUSH
22323: LD_VAR 0 3
22327: PUSH
22328: LD_VAR 0 4
22332: ARRAY
22333: PPUSH
22334: CALL_OW 254
22338: PUSH
22339: EMPTY
22340: LIST
22341: LIST
22342: LIST
22343: LIST
22344: PUSH
22345: EMPTY
22346: LIST
22347: ADD
22348: ST_TO_ADDR
22349: GO 22262
22351: POP
22352: POP
// result := list ;
22353: LD_ADDR_VAR 0 2
22357: PUSH
22358: LD_VAR 0 5
22362: ST_TO_ADDR
// end ;
22363: LD_VAR 0 2
22367: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
22368: LD_INT 0
22370: PPUSH
22371: PPUSH
22372: PPUSH
22373: PPUSH
22374: PPUSH
22375: PPUSH
22376: PPUSH
// if not factory then
22377: LD_VAR 0 1
22381: NOT
22382: IFFALSE 22386
// exit ;
22384: GO 22979
// if control = control_apeman then
22386: LD_VAR 0 4
22390: PUSH
22391: LD_INT 5
22393: EQUAL
22394: IFFALSE 22503
// begin tmp := UnitsInside ( factory ) ;
22396: LD_ADDR_VAR 0 8
22400: PUSH
22401: LD_VAR 0 1
22405: PPUSH
22406: CALL_OW 313
22410: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
22411: LD_VAR 0 8
22415: PPUSH
22416: LD_INT 25
22418: PUSH
22419: LD_INT 12
22421: PUSH
22422: EMPTY
22423: LIST
22424: LIST
22425: PPUSH
22426: CALL_OW 72
22430: NOT
22431: IFFALSE 22441
// control := control_manual ;
22433: LD_ADDR_VAR 0 4
22437: PUSH
22438: LD_INT 1
22440: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
22441: LD_ADDR_VAR 0 8
22445: PUSH
22446: LD_VAR 0 1
22450: PPUSH
22451: CALL 22138 0 1
22455: ST_TO_ADDR
// if tmp then
22456: LD_VAR 0 8
22460: IFFALSE 22503
// begin for i in tmp do
22462: LD_ADDR_VAR 0 7
22466: PUSH
22467: LD_VAR 0 8
22471: PUSH
22472: FOR_IN
22473: IFFALSE 22501
// if i [ 1 ] = b_ext_radio then
22475: LD_VAR 0 7
22479: PUSH
22480: LD_INT 1
22482: ARRAY
22483: PUSH
22484: LD_INT 22
22486: EQUAL
22487: IFFALSE 22499
// begin control := control_remote ;
22489: LD_ADDR_VAR 0 4
22493: PUSH
22494: LD_INT 2
22496: ST_TO_ADDR
// break ;
22497: GO 22501
// end ;
22499: GO 22472
22501: POP
22502: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22503: LD_VAR 0 1
22507: PPUSH
22508: LD_VAR 0 2
22512: PPUSH
22513: LD_VAR 0 3
22517: PPUSH
22518: LD_VAR 0 4
22522: PPUSH
22523: LD_VAR 0 5
22527: PPUSH
22528: CALL_OW 448
22532: IFFALSE 22567
// begin result := [ chassis , engine , control , weapon ] ;
22534: LD_ADDR_VAR 0 6
22538: PUSH
22539: LD_VAR 0 2
22543: PUSH
22544: LD_VAR 0 3
22548: PUSH
22549: LD_VAR 0 4
22553: PUSH
22554: LD_VAR 0 5
22558: PUSH
22559: EMPTY
22560: LIST
22561: LIST
22562: LIST
22563: LIST
22564: ST_TO_ADDR
// exit ;
22565: GO 22979
// end ; _chassis := AvailableChassisList ( factory ) ;
22567: LD_ADDR_VAR 0 9
22571: PUSH
22572: LD_VAR 0 1
22576: PPUSH
22577: CALL_OW 475
22581: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
22582: LD_ADDR_VAR 0 11
22586: PUSH
22587: LD_VAR 0 1
22591: PPUSH
22592: CALL_OW 476
22596: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
22597: LD_ADDR_VAR 0 12
22601: PUSH
22602: LD_VAR 0 1
22606: PPUSH
22607: CALL_OW 477
22611: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
22612: LD_ADDR_VAR 0 10
22616: PUSH
22617: LD_VAR 0 1
22621: PPUSH
22622: CALL_OW 478
22626: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
22627: LD_VAR 0 9
22631: NOT
22632: PUSH
22633: LD_VAR 0 11
22637: NOT
22638: OR
22639: PUSH
22640: LD_VAR 0 12
22644: NOT
22645: OR
22646: PUSH
22647: LD_VAR 0 10
22651: NOT
22652: OR
22653: IFFALSE 22688
// begin result := [ chassis , engine , control , weapon ] ;
22655: LD_ADDR_VAR 0 6
22659: PUSH
22660: LD_VAR 0 2
22664: PUSH
22665: LD_VAR 0 3
22669: PUSH
22670: LD_VAR 0 4
22674: PUSH
22675: LD_VAR 0 5
22679: PUSH
22680: EMPTY
22681: LIST
22682: LIST
22683: LIST
22684: LIST
22685: ST_TO_ADDR
// exit ;
22686: GO 22979
// end ; if not chassis in _chassis then
22688: LD_VAR 0 2
22692: PUSH
22693: LD_VAR 0 9
22697: IN
22698: NOT
22699: IFFALSE 22725
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
22701: LD_ADDR_VAR 0 2
22705: PUSH
22706: LD_VAR 0 9
22710: PUSH
22711: LD_INT 1
22713: PPUSH
22714: LD_VAR 0 9
22718: PPUSH
22719: CALL_OW 12
22723: ARRAY
22724: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
22725: LD_VAR 0 2
22729: PPUSH
22730: LD_VAR 0 3
22734: PPUSH
22735: CALL 22984 0 2
22739: NOT
22740: IFFALSE 22799
// repeat engine := _engine [ 1 ] ;
22742: LD_ADDR_VAR 0 3
22746: PUSH
22747: LD_VAR 0 11
22751: PUSH
22752: LD_INT 1
22754: ARRAY
22755: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
22756: LD_ADDR_VAR 0 11
22760: PUSH
22761: LD_VAR 0 11
22765: PPUSH
22766: LD_INT 1
22768: PPUSH
22769: CALL_OW 3
22773: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
22774: LD_VAR 0 2
22778: PPUSH
22779: LD_VAR 0 3
22783: PPUSH
22784: CALL 22984 0 2
22788: PUSH
22789: LD_VAR 0 11
22793: PUSH
22794: EMPTY
22795: EQUAL
22796: OR
22797: IFFALSE 22742
// if not control in _control then
22799: LD_VAR 0 4
22803: PUSH
22804: LD_VAR 0 12
22808: IN
22809: NOT
22810: IFFALSE 22836
// control := _control [ rand ( 1 , _control ) ] ;
22812: LD_ADDR_VAR 0 4
22816: PUSH
22817: LD_VAR 0 12
22821: PUSH
22822: LD_INT 1
22824: PPUSH
22825: LD_VAR 0 12
22829: PPUSH
22830: CALL_OW 12
22834: ARRAY
22835: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
22836: LD_VAR 0 2
22840: PPUSH
22841: LD_VAR 0 5
22845: PPUSH
22846: CALL 23204 0 2
22850: NOT
22851: IFFALSE 22910
// repeat weapon := _weapon [ 1 ] ;
22853: LD_ADDR_VAR 0 5
22857: PUSH
22858: LD_VAR 0 10
22862: PUSH
22863: LD_INT 1
22865: ARRAY
22866: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
22867: LD_ADDR_VAR 0 10
22871: PUSH
22872: LD_VAR 0 10
22876: PPUSH
22877: LD_INT 1
22879: PPUSH
22880: CALL_OW 3
22884: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
22885: LD_VAR 0 2
22889: PPUSH
22890: LD_VAR 0 5
22894: PPUSH
22895: CALL 23204 0 2
22899: PUSH
22900: LD_VAR 0 10
22904: PUSH
22905: EMPTY
22906: EQUAL
22907: OR
22908: IFFALSE 22853
// result := [ ] ;
22910: LD_ADDR_VAR 0 6
22914: PUSH
22915: EMPTY
22916: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
22917: LD_VAR 0 1
22921: PPUSH
22922: LD_VAR 0 2
22926: PPUSH
22927: LD_VAR 0 3
22931: PPUSH
22932: LD_VAR 0 4
22936: PPUSH
22937: LD_VAR 0 5
22941: PPUSH
22942: CALL_OW 448
22946: IFFALSE 22979
// result := [ chassis , engine , control , weapon ] ;
22948: LD_ADDR_VAR 0 6
22952: PUSH
22953: LD_VAR 0 2
22957: PUSH
22958: LD_VAR 0 3
22962: PUSH
22963: LD_VAR 0 4
22967: PUSH
22968: LD_VAR 0 5
22972: PUSH
22973: EMPTY
22974: LIST
22975: LIST
22976: LIST
22977: LIST
22978: ST_TO_ADDR
// end ;
22979: LD_VAR 0 6
22983: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
22984: LD_INT 0
22986: PPUSH
// if not chassis or not engine then
22987: LD_VAR 0 1
22991: NOT
22992: PUSH
22993: LD_VAR 0 2
22997: NOT
22998: OR
22999: IFFALSE 23003
// exit ;
23001: GO 23199
// case engine of engine_solar :
23003: LD_VAR 0 2
23007: PUSH
23008: LD_INT 2
23010: DOUBLE
23011: EQUAL
23012: IFTRUE 23016
23014: GO 23054
23016: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
23017: LD_ADDR_VAR 0 3
23021: PUSH
23022: LD_INT 11
23024: PUSH
23025: LD_INT 12
23027: PUSH
23028: LD_INT 13
23030: PUSH
23031: LD_INT 14
23033: PUSH
23034: LD_INT 1
23036: PUSH
23037: LD_INT 2
23039: PUSH
23040: LD_INT 3
23042: PUSH
23043: EMPTY
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: ST_TO_ADDR
23052: GO 23183
23054: LD_INT 1
23056: DOUBLE
23057: EQUAL
23058: IFTRUE 23062
23060: GO 23124
23062: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
23063: LD_ADDR_VAR 0 3
23067: PUSH
23068: LD_INT 11
23070: PUSH
23071: LD_INT 12
23073: PUSH
23074: LD_INT 13
23076: PUSH
23077: LD_INT 14
23079: PUSH
23080: LD_INT 1
23082: PUSH
23083: LD_INT 2
23085: PUSH
23086: LD_INT 3
23088: PUSH
23089: LD_INT 4
23091: PUSH
23092: LD_INT 5
23094: PUSH
23095: LD_INT 21
23097: PUSH
23098: LD_INT 23
23100: PUSH
23101: LD_INT 22
23103: PUSH
23104: LD_INT 24
23106: PUSH
23107: EMPTY
23108: LIST
23109: LIST
23110: LIST
23111: LIST
23112: LIST
23113: LIST
23114: LIST
23115: LIST
23116: LIST
23117: LIST
23118: LIST
23119: LIST
23120: LIST
23121: ST_TO_ADDR
23122: GO 23183
23124: LD_INT 3
23126: DOUBLE
23127: EQUAL
23128: IFTRUE 23132
23130: GO 23182
23132: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23133: LD_ADDR_VAR 0 3
23137: PUSH
23138: LD_INT 13
23140: PUSH
23141: LD_INT 14
23143: PUSH
23144: LD_INT 2
23146: PUSH
23147: LD_INT 3
23149: PUSH
23150: LD_INT 4
23152: PUSH
23153: LD_INT 5
23155: PUSH
23156: LD_INT 21
23158: PUSH
23159: LD_INT 22
23161: PUSH
23162: LD_INT 23
23164: PUSH
23165: LD_INT 24
23167: PUSH
23168: EMPTY
23169: LIST
23170: LIST
23171: LIST
23172: LIST
23173: LIST
23174: LIST
23175: LIST
23176: LIST
23177: LIST
23178: LIST
23179: ST_TO_ADDR
23180: GO 23183
23182: POP
// result := ( chassis in result ) ;
23183: LD_ADDR_VAR 0 3
23187: PUSH
23188: LD_VAR 0 1
23192: PUSH
23193: LD_VAR 0 3
23197: IN
23198: ST_TO_ADDR
// end ;
23199: LD_VAR 0 3
23203: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
23204: LD_INT 0
23206: PPUSH
// if not chassis or not weapon then
23207: LD_VAR 0 1
23211: NOT
23212: PUSH
23213: LD_VAR 0 2
23217: NOT
23218: OR
23219: IFFALSE 23223
// exit ;
23221: GO 24285
// case weapon of us_machine_gun :
23223: LD_VAR 0 2
23227: PUSH
23228: LD_INT 2
23230: DOUBLE
23231: EQUAL
23232: IFTRUE 23236
23234: GO 23266
23236: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
23237: LD_ADDR_VAR 0 3
23241: PUSH
23242: LD_INT 1
23244: PUSH
23245: LD_INT 2
23247: PUSH
23248: LD_INT 3
23250: PUSH
23251: LD_INT 4
23253: PUSH
23254: LD_INT 5
23256: PUSH
23257: EMPTY
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: ST_TO_ADDR
23264: GO 24269
23266: LD_INT 3
23268: DOUBLE
23269: EQUAL
23270: IFTRUE 23274
23272: GO 23304
23274: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
23275: LD_ADDR_VAR 0 3
23279: PUSH
23280: LD_INT 1
23282: PUSH
23283: LD_INT 2
23285: PUSH
23286: LD_INT 3
23288: PUSH
23289: LD_INT 4
23291: PUSH
23292: LD_INT 5
23294: PUSH
23295: EMPTY
23296: LIST
23297: LIST
23298: LIST
23299: LIST
23300: LIST
23301: ST_TO_ADDR
23302: GO 24269
23304: LD_INT 11
23306: DOUBLE
23307: EQUAL
23308: IFTRUE 23312
23310: GO 23342
23312: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
23313: LD_ADDR_VAR 0 3
23317: PUSH
23318: LD_INT 1
23320: PUSH
23321: LD_INT 2
23323: PUSH
23324: LD_INT 3
23326: PUSH
23327: LD_INT 4
23329: PUSH
23330: LD_INT 5
23332: PUSH
23333: EMPTY
23334: LIST
23335: LIST
23336: LIST
23337: LIST
23338: LIST
23339: ST_TO_ADDR
23340: GO 24269
23342: LD_INT 4
23344: DOUBLE
23345: EQUAL
23346: IFTRUE 23350
23348: GO 23376
23350: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
23351: LD_ADDR_VAR 0 3
23355: PUSH
23356: LD_INT 2
23358: PUSH
23359: LD_INT 3
23361: PUSH
23362: LD_INT 4
23364: PUSH
23365: LD_INT 5
23367: PUSH
23368: EMPTY
23369: LIST
23370: LIST
23371: LIST
23372: LIST
23373: ST_TO_ADDR
23374: GO 24269
23376: LD_INT 5
23378: DOUBLE
23379: EQUAL
23380: IFTRUE 23384
23382: GO 23410
23384: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
23385: LD_ADDR_VAR 0 3
23389: PUSH
23390: LD_INT 2
23392: PUSH
23393: LD_INT 3
23395: PUSH
23396: LD_INT 4
23398: PUSH
23399: LD_INT 5
23401: PUSH
23402: EMPTY
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: ST_TO_ADDR
23408: GO 24269
23410: LD_INT 9
23412: DOUBLE
23413: EQUAL
23414: IFTRUE 23418
23416: GO 23444
23418: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
23419: LD_ADDR_VAR 0 3
23423: PUSH
23424: LD_INT 2
23426: PUSH
23427: LD_INT 3
23429: PUSH
23430: LD_INT 4
23432: PUSH
23433: LD_INT 5
23435: PUSH
23436: EMPTY
23437: LIST
23438: LIST
23439: LIST
23440: LIST
23441: ST_TO_ADDR
23442: GO 24269
23444: LD_INT 7
23446: DOUBLE
23447: EQUAL
23448: IFTRUE 23452
23450: GO 23478
23452: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
23453: LD_ADDR_VAR 0 3
23457: PUSH
23458: LD_INT 2
23460: PUSH
23461: LD_INT 3
23463: PUSH
23464: LD_INT 4
23466: PUSH
23467: LD_INT 5
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: LIST
23474: LIST
23475: ST_TO_ADDR
23476: GO 24269
23478: LD_INT 12
23480: DOUBLE
23481: EQUAL
23482: IFTRUE 23486
23484: GO 23512
23486: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
23487: LD_ADDR_VAR 0 3
23491: PUSH
23492: LD_INT 2
23494: PUSH
23495: LD_INT 3
23497: PUSH
23498: LD_INT 4
23500: PUSH
23501: LD_INT 5
23503: PUSH
23504: EMPTY
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: ST_TO_ADDR
23510: GO 24269
23512: LD_INT 13
23514: DOUBLE
23515: EQUAL
23516: IFTRUE 23520
23518: GO 23546
23520: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
23521: LD_ADDR_VAR 0 3
23525: PUSH
23526: LD_INT 2
23528: PUSH
23529: LD_INT 3
23531: PUSH
23532: LD_INT 4
23534: PUSH
23535: LD_INT 5
23537: PUSH
23538: EMPTY
23539: LIST
23540: LIST
23541: LIST
23542: LIST
23543: ST_TO_ADDR
23544: GO 24269
23546: LD_INT 14
23548: DOUBLE
23549: EQUAL
23550: IFTRUE 23554
23552: GO 23572
23554: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
23555: LD_ADDR_VAR 0 3
23559: PUSH
23560: LD_INT 4
23562: PUSH
23563: LD_INT 5
23565: PUSH
23566: EMPTY
23567: LIST
23568: LIST
23569: ST_TO_ADDR
23570: GO 24269
23572: LD_INT 6
23574: DOUBLE
23575: EQUAL
23576: IFTRUE 23580
23578: GO 23598
23580: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
23581: LD_ADDR_VAR 0 3
23585: PUSH
23586: LD_INT 4
23588: PUSH
23589: LD_INT 5
23591: PUSH
23592: EMPTY
23593: LIST
23594: LIST
23595: ST_TO_ADDR
23596: GO 24269
23598: LD_INT 10
23600: DOUBLE
23601: EQUAL
23602: IFTRUE 23606
23604: GO 23624
23606: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
23607: LD_ADDR_VAR 0 3
23611: PUSH
23612: LD_INT 4
23614: PUSH
23615: LD_INT 5
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: ST_TO_ADDR
23622: GO 24269
23624: LD_INT 22
23626: DOUBLE
23627: EQUAL
23628: IFTRUE 23632
23630: GO 23658
23632: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
23633: LD_ADDR_VAR 0 3
23637: PUSH
23638: LD_INT 11
23640: PUSH
23641: LD_INT 12
23643: PUSH
23644: LD_INT 13
23646: PUSH
23647: LD_INT 14
23649: PUSH
23650: EMPTY
23651: LIST
23652: LIST
23653: LIST
23654: LIST
23655: ST_TO_ADDR
23656: GO 24269
23658: LD_INT 23
23660: DOUBLE
23661: EQUAL
23662: IFTRUE 23666
23664: GO 23692
23666: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
23667: LD_ADDR_VAR 0 3
23671: PUSH
23672: LD_INT 11
23674: PUSH
23675: LD_INT 12
23677: PUSH
23678: LD_INT 13
23680: PUSH
23681: LD_INT 14
23683: PUSH
23684: EMPTY
23685: LIST
23686: LIST
23687: LIST
23688: LIST
23689: ST_TO_ADDR
23690: GO 24269
23692: LD_INT 24
23694: DOUBLE
23695: EQUAL
23696: IFTRUE 23700
23698: GO 23726
23700: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
23701: LD_ADDR_VAR 0 3
23705: PUSH
23706: LD_INT 11
23708: PUSH
23709: LD_INT 12
23711: PUSH
23712: LD_INT 13
23714: PUSH
23715: LD_INT 14
23717: PUSH
23718: EMPTY
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: ST_TO_ADDR
23724: GO 24269
23726: LD_INT 30
23728: DOUBLE
23729: EQUAL
23730: IFTRUE 23734
23732: GO 23760
23734: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
23735: LD_ADDR_VAR 0 3
23739: PUSH
23740: LD_INT 11
23742: PUSH
23743: LD_INT 12
23745: PUSH
23746: LD_INT 13
23748: PUSH
23749: LD_INT 14
23751: PUSH
23752: EMPTY
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: ST_TO_ADDR
23758: GO 24269
23760: LD_INT 25
23762: DOUBLE
23763: EQUAL
23764: IFTRUE 23768
23766: GO 23786
23768: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
23769: LD_ADDR_VAR 0 3
23773: PUSH
23774: LD_INT 13
23776: PUSH
23777: LD_INT 14
23779: PUSH
23780: EMPTY
23781: LIST
23782: LIST
23783: ST_TO_ADDR
23784: GO 24269
23786: LD_INT 27
23788: DOUBLE
23789: EQUAL
23790: IFTRUE 23794
23792: GO 23812
23794: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
23795: LD_ADDR_VAR 0 3
23799: PUSH
23800: LD_INT 13
23802: PUSH
23803: LD_INT 14
23805: PUSH
23806: EMPTY
23807: LIST
23808: LIST
23809: ST_TO_ADDR
23810: GO 24269
23812: LD_EXP 34
23816: DOUBLE
23817: EQUAL
23818: IFTRUE 23822
23820: GO 23848
23822: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
23823: LD_ADDR_VAR 0 3
23827: PUSH
23828: LD_INT 11
23830: PUSH
23831: LD_INT 12
23833: PUSH
23834: LD_INT 13
23836: PUSH
23837: LD_INT 14
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: ST_TO_ADDR
23846: GO 24269
23848: LD_INT 28
23850: DOUBLE
23851: EQUAL
23852: IFTRUE 23856
23854: GO 23874
23856: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
23857: LD_ADDR_VAR 0 3
23861: PUSH
23862: LD_INT 13
23864: PUSH
23865: LD_INT 14
23867: PUSH
23868: EMPTY
23869: LIST
23870: LIST
23871: ST_TO_ADDR
23872: GO 24269
23874: LD_INT 29
23876: DOUBLE
23877: EQUAL
23878: IFTRUE 23882
23880: GO 23900
23882: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
23883: LD_ADDR_VAR 0 3
23887: PUSH
23888: LD_INT 13
23890: PUSH
23891: LD_INT 14
23893: PUSH
23894: EMPTY
23895: LIST
23896: LIST
23897: ST_TO_ADDR
23898: GO 24269
23900: LD_INT 31
23902: DOUBLE
23903: EQUAL
23904: IFTRUE 23908
23906: GO 23926
23908: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
23909: LD_ADDR_VAR 0 3
23913: PUSH
23914: LD_INT 13
23916: PUSH
23917: LD_INT 14
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: ST_TO_ADDR
23924: GO 24269
23926: LD_INT 26
23928: DOUBLE
23929: EQUAL
23930: IFTRUE 23934
23932: GO 23952
23934: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
23935: LD_ADDR_VAR 0 3
23939: PUSH
23940: LD_INT 13
23942: PUSH
23943: LD_INT 14
23945: PUSH
23946: EMPTY
23947: LIST
23948: LIST
23949: ST_TO_ADDR
23950: GO 24269
23952: LD_INT 42
23954: DOUBLE
23955: EQUAL
23956: IFTRUE 23960
23958: GO 23986
23960: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
23961: LD_ADDR_VAR 0 3
23965: PUSH
23966: LD_INT 21
23968: PUSH
23969: LD_INT 22
23971: PUSH
23972: LD_INT 23
23974: PUSH
23975: LD_INT 24
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: ST_TO_ADDR
23984: GO 24269
23986: LD_INT 43
23988: DOUBLE
23989: EQUAL
23990: IFTRUE 23994
23992: GO 24020
23994: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
23995: LD_ADDR_VAR 0 3
23999: PUSH
24000: LD_INT 21
24002: PUSH
24003: LD_INT 22
24005: PUSH
24006: LD_INT 23
24008: PUSH
24009: LD_INT 24
24011: PUSH
24012: EMPTY
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: ST_TO_ADDR
24018: GO 24269
24020: LD_INT 44
24022: DOUBLE
24023: EQUAL
24024: IFTRUE 24028
24026: GO 24054
24028: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
24029: LD_ADDR_VAR 0 3
24033: PUSH
24034: LD_INT 21
24036: PUSH
24037: LD_INT 22
24039: PUSH
24040: LD_INT 23
24042: PUSH
24043: LD_INT 24
24045: PUSH
24046: EMPTY
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: ST_TO_ADDR
24052: GO 24269
24054: LD_INT 45
24056: DOUBLE
24057: EQUAL
24058: IFTRUE 24062
24060: GO 24088
24062: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
24063: LD_ADDR_VAR 0 3
24067: PUSH
24068: LD_INT 21
24070: PUSH
24071: LD_INT 22
24073: PUSH
24074: LD_INT 23
24076: PUSH
24077: LD_INT 24
24079: PUSH
24080: EMPTY
24081: LIST
24082: LIST
24083: LIST
24084: LIST
24085: ST_TO_ADDR
24086: GO 24269
24088: LD_INT 49
24090: DOUBLE
24091: EQUAL
24092: IFTRUE 24096
24094: GO 24122
24096: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
24097: LD_ADDR_VAR 0 3
24101: PUSH
24102: LD_INT 21
24104: PUSH
24105: LD_INT 22
24107: PUSH
24108: LD_INT 23
24110: PUSH
24111: LD_INT 24
24113: PUSH
24114: EMPTY
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: ST_TO_ADDR
24120: GO 24269
24122: LD_INT 51
24124: DOUBLE
24125: EQUAL
24126: IFTRUE 24130
24128: GO 24156
24130: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
24131: LD_ADDR_VAR 0 3
24135: PUSH
24136: LD_INT 21
24138: PUSH
24139: LD_INT 22
24141: PUSH
24142: LD_INT 23
24144: PUSH
24145: LD_INT 24
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: ST_TO_ADDR
24154: GO 24269
24156: LD_INT 52
24158: DOUBLE
24159: EQUAL
24160: IFTRUE 24164
24162: GO 24190
24164: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
24165: LD_ADDR_VAR 0 3
24169: PUSH
24170: LD_INT 21
24172: PUSH
24173: LD_INT 22
24175: PUSH
24176: LD_INT 23
24178: PUSH
24179: LD_INT 24
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: ST_TO_ADDR
24188: GO 24269
24190: LD_INT 53
24192: DOUBLE
24193: EQUAL
24194: IFTRUE 24198
24196: GO 24216
24198: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
24199: LD_ADDR_VAR 0 3
24203: PUSH
24204: LD_INT 23
24206: PUSH
24207: LD_INT 24
24209: PUSH
24210: EMPTY
24211: LIST
24212: LIST
24213: ST_TO_ADDR
24214: GO 24269
24216: LD_INT 46
24218: DOUBLE
24219: EQUAL
24220: IFTRUE 24224
24222: GO 24242
24224: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
24225: LD_ADDR_VAR 0 3
24229: PUSH
24230: LD_INT 23
24232: PUSH
24233: LD_INT 24
24235: PUSH
24236: EMPTY
24237: LIST
24238: LIST
24239: ST_TO_ADDR
24240: GO 24269
24242: LD_INT 47
24244: DOUBLE
24245: EQUAL
24246: IFTRUE 24250
24248: GO 24268
24250: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24251: LD_ADDR_VAR 0 3
24255: PUSH
24256: LD_INT 23
24258: PUSH
24259: LD_INT 24
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: ST_TO_ADDR
24266: GO 24269
24268: POP
// result := ( chassis in result ) ;
24269: LD_ADDR_VAR 0 3
24273: PUSH
24274: LD_VAR 0 1
24278: PUSH
24279: LD_VAR 0 3
24283: IN
24284: ST_TO_ADDR
// end ;
24285: LD_VAR 0 3
24289: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
24290: LD_INT 0
24292: PPUSH
24293: PPUSH
24294: PPUSH
24295: PPUSH
24296: PPUSH
24297: PPUSH
24298: PPUSH
// result := array ;
24299: LD_ADDR_VAR 0 5
24303: PUSH
24304: LD_VAR 0 1
24308: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
24309: LD_VAR 0 1
24313: NOT
24314: PUSH
24315: LD_VAR 0 2
24319: NOT
24320: OR
24321: PUSH
24322: LD_VAR 0 3
24326: NOT
24327: OR
24328: PUSH
24329: LD_VAR 0 2
24333: PUSH
24334: LD_VAR 0 1
24338: GREATER
24339: OR
24340: PUSH
24341: LD_VAR 0 3
24345: PUSH
24346: LD_VAR 0 1
24350: GREATER
24351: OR
24352: IFFALSE 24356
// exit ;
24354: GO 24652
// if direction then
24356: LD_VAR 0 4
24360: IFFALSE 24424
// begin d := 1 ;
24362: LD_ADDR_VAR 0 9
24366: PUSH
24367: LD_INT 1
24369: ST_TO_ADDR
// if i_from > i_to then
24370: LD_VAR 0 2
24374: PUSH
24375: LD_VAR 0 3
24379: GREATER
24380: IFFALSE 24406
// length := ( array - i_from ) + i_to else
24382: LD_ADDR_VAR 0 11
24386: PUSH
24387: LD_VAR 0 1
24391: PUSH
24392: LD_VAR 0 2
24396: MINUS
24397: PUSH
24398: LD_VAR 0 3
24402: PLUS
24403: ST_TO_ADDR
24404: GO 24422
// length := i_to - i_from ;
24406: LD_ADDR_VAR 0 11
24410: PUSH
24411: LD_VAR 0 3
24415: PUSH
24416: LD_VAR 0 2
24420: MINUS
24421: ST_TO_ADDR
// end else
24422: GO 24485
// begin d := - 1 ;
24424: LD_ADDR_VAR 0 9
24428: PUSH
24429: LD_INT 1
24431: NEG
24432: ST_TO_ADDR
// if i_from > i_to then
24433: LD_VAR 0 2
24437: PUSH
24438: LD_VAR 0 3
24442: GREATER
24443: IFFALSE 24463
// length := i_from - i_to else
24445: LD_ADDR_VAR 0 11
24449: PUSH
24450: LD_VAR 0 2
24454: PUSH
24455: LD_VAR 0 3
24459: MINUS
24460: ST_TO_ADDR
24461: GO 24485
// length := ( array - i_to ) + i_from ;
24463: LD_ADDR_VAR 0 11
24467: PUSH
24468: LD_VAR 0 1
24472: PUSH
24473: LD_VAR 0 3
24477: MINUS
24478: PUSH
24479: LD_VAR 0 2
24483: PLUS
24484: ST_TO_ADDR
// end ; if not length then
24485: LD_VAR 0 11
24489: NOT
24490: IFFALSE 24494
// exit ;
24492: GO 24652
// tmp := array ;
24494: LD_ADDR_VAR 0 10
24498: PUSH
24499: LD_VAR 0 1
24503: ST_TO_ADDR
// for i = 1 to length do
24504: LD_ADDR_VAR 0 6
24508: PUSH
24509: DOUBLE
24510: LD_INT 1
24512: DEC
24513: ST_TO_ADDR
24514: LD_VAR 0 11
24518: PUSH
24519: FOR_TO
24520: IFFALSE 24640
// begin for j = 1 to array do
24522: LD_ADDR_VAR 0 7
24526: PUSH
24527: DOUBLE
24528: LD_INT 1
24530: DEC
24531: ST_TO_ADDR
24532: LD_VAR 0 1
24536: PUSH
24537: FOR_TO
24538: IFFALSE 24626
// begin k := j + d ;
24540: LD_ADDR_VAR 0 8
24544: PUSH
24545: LD_VAR 0 7
24549: PUSH
24550: LD_VAR 0 9
24554: PLUS
24555: ST_TO_ADDR
// if k > array then
24556: LD_VAR 0 8
24560: PUSH
24561: LD_VAR 0 1
24565: GREATER
24566: IFFALSE 24576
// k := 1 ;
24568: LD_ADDR_VAR 0 8
24572: PUSH
24573: LD_INT 1
24575: ST_TO_ADDR
// if not k then
24576: LD_VAR 0 8
24580: NOT
24581: IFFALSE 24593
// k := array ;
24583: LD_ADDR_VAR 0 8
24587: PUSH
24588: LD_VAR 0 1
24592: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
24593: LD_ADDR_VAR 0 10
24597: PUSH
24598: LD_VAR 0 10
24602: PPUSH
24603: LD_VAR 0 8
24607: PPUSH
24608: LD_VAR 0 1
24612: PUSH
24613: LD_VAR 0 7
24617: ARRAY
24618: PPUSH
24619: CALL_OW 1
24623: ST_TO_ADDR
// end ;
24624: GO 24537
24626: POP
24627: POP
// array := tmp ;
24628: LD_ADDR_VAR 0 1
24632: PUSH
24633: LD_VAR 0 10
24637: ST_TO_ADDR
// end ;
24638: GO 24519
24640: POP
24641: POP
// result := array ;
24642: LD_ADDR_VAR 0 5
24646: PUSH
24647: LD_VAR 0 1
24651: ST_TO_ADDR
// end ;
24652: LD_VAR 0 5
24656: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
24657: LD_INT 0
24659: PPUSH
24660: PPUSH
// result := 0 ;
24661: LD_ADDR_VAR 0 3
24665: PUSH
24666: LD_INT 0
24668: ST_TO_ADDR
// if not array or not value in array then
24669: LD_VAR 0 1
24673: NOT
24674: PUSH
24675: LD_VAR 0 2
24679: PUSH
24680: LD_VAR 0 1
24684: IN
24685: NOT
24686: OR
24687: IFFALSE 24691
// exit ;
24689: GO 24745
// for i = 1 to array do
24691: LD_ADDR_VAR 0 4
24695: PUSH
24696: DOUBLE
24697: LD_INT 1
24699: DEC
24700: ST_TO_ADDR
24701: LD_VAR 0 1
24705: PUSH
24706: FOR_TO
24707: IFFALSE 24743
// if value = array [ i ] then
24709: LD_VAR 0 2
24713: PUSH
24714: LD_VAR 0 1
24718: PUSH
24719: LD_VAR 0 4
24723: ARRAY
24724: EQUAL
24725: IFFALSE 24741
// begin result := i ;
24727: LD_ADDR_VAR 0 3
24731: PUSH
24732: LD_VAR 0 4
24736: ST_TO_ADDR
// exit ;
24737: POP
24738: POP
24739: GO 24745
// end ;
24741: GO 24706
24743: POP
24744: POP
// end ;
24745: LD_VAR 0 3
24749: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
24750: LD_INT 0
24752: PPUSH
// vc_chassis := chassis ;
24753: LD_ADDR_OWVAR 37
24757: PUSH
24758: LD_VAR 0 1
24762: ST_TO_ADDR
// vc_engine := engine ;
24763: LD_ADDR_OWVAR 39
24767: PUSH
24768: LD_VAR 0 2
24772: ST_TO_ADDR
// vc_control := control ;
24773: LD_ADDR_OWVAR 38
24777: PUSH
24778: LD_VAR 0 3
24782: ST_TO_ADDR
// vc_weapon := weapon ;
24783: LD_ADDR_OWVAR 40
24787: PUSH
24788: LD_VAR 0 4
24792: ST_TO_ADDR
// vc_fuel_battery := fuel ;
24793: LD_ADDR_OWVAR 41
24797: PUSH
24798: LD_VAR 0 5
24802: ST_TO_ADDR
// end ;
24803: LD_VAR 0 6
24807: RET
// export function WantPlant ( unit ) ; var task ; begin
24808: LD_INT 0
24810: PPUSH
24811: PPUSH
// result := false ;
24812: LD_ADDR_VAR 0 2
24816: PUSH
24817: LD_INT 0
24819: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
24820: LD_ADDR_VAR 0 3
24824: PUSH
24825: LD_VAR 0 1
24829: PPUSH
24830: CALL_OW 437
24834: ST_TO_ADDR
// if task then
24835: LD_VAR 0 3
24839: IFFALSE 24867
// if task [ 1 ] [ 1 ] = p then
24841: LD_VAR 0 3
24845: PUSH
24846: LD_INT 1
24848: ARRAY
24849: PUSH
24850: LD_INT 1
24852: ARRAY
24853: PUSH
24854: LD_STRING p
24856: EQUAL
24857: IFFALSE 24867
// result := true ;
24859: LD_ADDR_VAR 0 2
24863: PUSH
24864: LD_INT 1
24866: ST_TO_ADDR
// end ;
24867: LD_VAR 0 2
24871: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
24872: LD_INT 0
24874: PPUSH
24875: PPUSH
24876: PPUSH
24877: PPUSH
// if pos < 1 then
24878: LD_VAR 0 2
24882: PUSH
24883: LD_INT 1
24885: LESS
24886: IFFALSE 24890
// exit ;
24888: GO 25193
// if pos = 1 then
24890: LD_VAR 0 2
24894: PUSH
24895: LD_INT 1
24897: EQUAL
24898: IFFALSE 24931
// result := Replace ( arr , pos [ 1 ] , value ) else
24900: LD_ADDR_VAR 0 4
24904: PUSH
24905: LD_VAR 0 1
24909: PPUSH
24910: LD_VAR 0 2
24914: PUSH
24915: LD_INT 1
24917: ARRAY
24918: PPUSH
24919: LD_VAR 0 3
24923: PPUSH
24924: CALL_OW 1
24928: ST_TO_ADDR
24929: GO 25193
// begin tmp := arr ;
24931: LD_ADDR_VAR 0 6
24935: PUSH
24936: LD_VAR 0 1
24940: ST_TO_ADDR
// s_arr := [ tmp ] ;
24941: LD_ADDR_VAR 0 7
24945: PUSH
24946: LD_VAR 0 6
24950: PUSH
24951: EMPTY
24952: LIST
24953: ST_TO_ADDR
// for i = 1 to pos - 1 do
24954: LD_ADDR_VAR 0 5
24958: PUSH
24959: DOUBLE
24960: LD_INT 1
24962: DEC
24963: ST_TO_ADDR
24964: LD_VAR 0 2
24968: PUSH
24969: LD_INT 1
24971: MINUS
24972: PUSH
24973: FOR_TO
24974: IFFALSE 25019
// begin tmp := tmp [ pos [ i ] ] ;
24976: LD_ADDR_VAR 0 6
24980: PUSH
24981: LD_VAR 0 6
24985: PUSH
24986: LD_VAR 0 2
24990: PUSH
24991: LD_VAR 0 5
24995: ARRAY
24996: ARRAY
24997: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
24998: LD_ADDR_VAR 0 7
25002: PUSH
25003: LD_VAR 0 7
25007: PUSH
25008: LD_VAR 0 6
25012: PUSH
25013: EMPTY
25014: LIST
25015: ADD
25016: ST_TO_ADDR
// end ;
25017: GO 24973
25019: POP
25020: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
25021: LD_ADDR_VAR 0 6
25025: PUSH
25026: LD_VAR 0 6
25030: PPUSH
25031: LD_VAR 0 2
25035: PUSH
25036: LD_VAR 0 2
25040: ARRAY
25041: PPUSH
25042: LD_VAR 0 3
25046: PPUSH
25047: CALL_OW 1
25051: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
25052: LD_ADDR_VAR 0 7
25056: PUSH
25057: LD_VAR 0 7
25061: PPUSH
25062: LD_VAR 0 7
25066: PPUSH
25067: LD_VAR 0 6
25071: PPUSH
25072: CALL_OW 1
25076: ST_TO_ADDR
// for i = s_arr downto 2 do
25077: LD_ADDR_VAR 0 5
25081: PUSH
25082: DOUBLE
25083: LD_VAR 0 7
25087: INC
25088: ST_TO_ADDR
25089: LD_INT 2
25091: PUSH
25092: FOR_DOWNTO
25093: IFFALSE 25177
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
25095: LD_ADDR_VAR 0 6
25099: PUSH
25100: LD_VAR 0 7
25104: PUSH
25105: LD_VAR 0 5
25109: PUSH
25110: LD_INT 1
25112: MINUS
25113: ARRAY
25114: PPUSH
25115: LD_VAR 0 2
25119: PUSH
25120: LD_VAR 0 5
25124: PUSH
25125: LD_INT 1
25127: MINUS
25128: ARRAY
25129: PPUSH
25130: LD_VAR 0 7
25134: PUSH
25135: LD_VAR 0 5
25139: ARRAY
25140: PPUSH
25141: CALL_OW 1
25145: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
25146: LD_ADDR_VAR 0 7
25150: PUSH
25151: LD_VAR 0 7
25155: PPUSH
25156: LD_VAR 0 5
25160: PUSH
25161: LD_INT 1
25163: MINUS
25164: PPUSH
25165: LD_VAR 0 6
25169: PPUSH
25170: CALL_OW 1
25174: ST_TO_ADDR
// end ;
25175: GO 25092
25177: POP
25178: POP
// result := s_arr [ 1 ] ;
25179: LD_ADDR_VAR 0 4
25183: PUSH
25184: LD_VAR 0 7
25188: PUSH
25189: LD_INT 1
25191: ARRAY
25192: ST_TO_ADDR
// end ; end ;
25193: LD_VAR 0 4
25197: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
25198: LD_INT 0
25200: PPUSH
25201: PPUSH
// if not list then
25202: LD_VAR 0 1
25206: NOT
25207: IFFALSE 25211
// exit ;
25209: GO 25302
// i := list [ pos1 ] ;
25211: LD_ADDR_VAR 0 5
25215: PUSH
25216: LD_VAR 0 1
25220: PUSH
25221: LD_VAR 0 2
25225: ARRAY
25226: ST_TO_ADDR
// if not i then
25227: LD_VAR 0 5
25231: NOT
25232: IFFALSE 25236
// exit ;
25234: GO 25302
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
25236: LD_ADDR_VAR 0 1
25240: PUSH
25241: LD_VAR 0 1
25245: PPUSH
25246: LD_VAR 0 2
25250: PPUSH
25251: LD_VAR 0 1
25255: PUSH
25256: LD_VAR 0 3
25260: ARRAY
25261: PPUSH
25262: CALL_OW 1
25266: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
25267: LD_ADDR_VAR 0 1
25271: PUSH
25272: LD_VAR 0 1
25276: PPUSH
25277: LD_VAR 0 3
25281: PPUSH
25282: LD_VAR 0 5
25286: PPUSH
25287: CALL_OW 1
25291: ST_TO_ADDR
// result := list ;
25292: LD_ADDR_VAR 0 4
25296: PUSH
25297: LD_VAR 0 1
25301: ST_TO_ADDR
// end ;
25302: LD_VAR 0 4
25306: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
25307: LD_INT 0
25309: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
25310: LD_ADDR_VAR 0 5
25314: PUSH
25315: LD_VAR 0 1
25319: PPUSH
25320: CALL_OW 250
25324: PPUSH
25325: LD_VAR 0 1
25329: PPUSH
25330: CALL_OW 251
25334: PPUSH
25335: LD_VAR 0 2
25339: PPUSH
25340: LD_VAR 0 3
25344: PPUSH
25345: LD_VAR 0 4
25349: PPUSH
25350: CALL 25360 0 5
25354: ST_TO_ADDR
// end ;
25355: LD_VAR 0 5
25359: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
25360: LD_INT 0
25362: PPUSH
25363: PPUSH
25364: PPUSH
25365: PPUSH
// if not list then
25366: LD_VAR 0 3
25370: NOT
25371: IFFALSE 25375
// exit ;
25373: GO 25763
// result := [ ] ;
25375: LD_ADDR_VAR 0 6
25379: PUSH
25380: EMPTY
25381: ST_TO_ADDR
// for i in list do
25382: LD_ADDR_VAR 0 7
25386: PUSH
25387: LD_VAR 0 3
25391: PUSH
25392: FOR_IN
25393: IFFALSE 25595
// begin tmp := GetDistUnitXY ( i , x , y ) ;
25395: LD_ADDR_VAR 0 9
25399: PUSH
25400: LD_VAR 0 7
25404: PPUSH
25405: LD_VAR 0 1
25409: PPUSH
25410: LD_VAR 0 2
25414: PPUSH
25415: CALL_OW 297
25419: ST_TO_ADDR
// if not result then
25420: LD_VAR 0 6
25424: NOT
25425: IFFALSE 25451
// result := [ [ i , tmp ] ] else
25427: LD_ADDR_VAR 0 6
25431: PUSH
25432: LD_VAR 0 7
25436: PUSH
25437: LD_VAR 0 9
25441: PUSH
25442: EMPTY
25443: LIST
25444: LIST
25445: PUSH
25446: EMPTY
25447: LIST
25448: ST_TO_ADDR
25449: GO 25593
// begin if result [ result ] [ 2 ] < tmp then
25451: LD_VAR 0 6
25455: PUSH
25456: LD_VAR 0 6
25460: ARRAY
25461: PUSH
25462: LD_INT 2
25464: ARRAY
25465: PUSH
25466: LD_VAR 0 9
25470: LESS
25471: IFFALSE 25513
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
25473: LD_ADDR_VAR 0 6
25477: PUSH
25478: LD_VAR 0 6
25482: PPUSH
25483: LD_VAR 0 6
25487: PUSH
25488: LD_INT 1
25490: PLUS
25491: PPUSH
25492: LD_VAR 0 7
25496: PUSH
25497: LD_VAR 0 9
25501: PUSH
25502: EMPTY
25503: LIST
25504: LIST
25505: PPUSH
25506: CALL_OW 2
25510: ST_TO_ADDR
25511: GO 25593
// for j = 1 to result do
25513: LD_ADDR_VAR 0 8
25517: PUSH
25518: DOUBLE
25519: LD_INT 1
25521: DEC
25522: ST_TO_ADDR
25523: LD_VAR 0 6
25527: PUSH
25528: FOR_TO
25529: IFFALSE 25591
// begin if tmp < result [ j ] [ 2 ] then
25531: LD_VAR 0 9
25535: PUSH
25536: LD_VAR 0 6
25540: PUSH
25541: LD_VAR 0 8
25545: ARRAY
25546: PUSH
25547: LD_INT 2
25549: ARRAY
25550: LESS
25551: IFFALSE 25589
// begin result := Insert ( result , j , [ i , tmp ] ) ;
25553: LD_ADDR_VAR 0 6
25557: PUSH
25558: LD_VAR 0 6
25562: PPUSH
25563: LD_VAR 0 8
25567: PPUSH
25568: LD_VAR 0 7
25572: PUSH
25573: LD_VAR 0 9
25577: PUSH
25578: EMPTY
25579: LIST
25580: LIST
25581: PPUSH
25582: CALL_OW 2
25586: ST_TO_ADDR
// break ;
25587: GO 25591
// end ; end ;
25589: GO 25528
25591: POP
25592: POP
// end ; end ;
25593: GO 25392
25595: POP
25596: POP
// if result and not asc then
25597: LD_VAR 0 6
25601: PUSH
25602: LD_VAR 0 4
25606: NOT
25607: AND
25608: IFFALSE 25683
// begin tmp := result ;
25610: LD_ADDR_VAR 0 9
25614: PUSH
25615: LD_VAR 0 6
25619: ST_TO_ADDR
// for i = tmp downto 1 do
25620: LD_ADDR_VAR 0 7
25624: PUSH
25625: DOUBLE
25626: LD_VAR 0 9
25630: INC
25631: ST_TO_ADDR
25632: LD_INT 1
25634: PUSH
25635: FOR_DOWNTO
25636: IFFALSE 25681
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
25638: LD_ADDR_VAR 0 6
25642: PUSH
25643: LD_VAR 0 6
25647: PPUSH
25648: LD_VAR 0 9
25652: PUSH
25653: LD_VAR 0 7
25657: MINUS
25658: PUSH
25659: LD_INT 1
25661: PLUS
25662: PPUSH
25663: LD_VAR 0 9
25667: PUSH
25668: LD_VAR 0 7
25672: ARRAY
25673: PPUSH
25674: CALL_OW 1
25678: ST_TO_ADDR
25679: GO 25635
25681: POP
25682: POP
// end ; tmp := [ ] ;
25683: LD_ADDR_VAR 0 9
25687: PUSH
25688: EMPTY
25689: ST_TO_ADDR
// if mode then
25690: LD_VAR 0 5
25694: IFFALSE 25763
// begin for i = 1 to result do
25696: LD_ADDR_VAR 0 7
25700: PUSH
25701: DOUBLE
25702: LD_INT 1
25704: DEC
25705: ST_TO_ADDR
25706: LD_VAR 0 6
25710: PUSH
25711: FOR_TO
25712: IFFALSE 25751
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
25714: LD_ADDR_VAR 0 9
25718: PUSH
25719: LD_VAR 0 9
25723: PPUSH
25724: LD_VAR 0 7
25728: PPUSH
25729: LD_VAR 0 6
25733: PUSH
25734: LD_VAR 0 7
25738: ARRAY
25739: PUSH
25740: LD_INT 1
25742: ARRAY
25743: PPUSH
25744: CALL_OW 1
25748: ST_TO_ADDR
25749: GO 25711
25751: POP
25752: POP
// result := tmp ;
25753: LD_ADDR_VAR 0 6
25757: PUSH
25758: LD_VAR 0 9
25762: ST_TO_ADDR
// end ; end ;
25763: LD_VAR 0 6
25767: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
25768: LD_INT 0
25770: PPUSH
25771: PPUSH
25772: PPUSH
25773: PPUSH
25774: PPUSH
25775: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
25776: LD_ADDR_VAR 0 5
25780: PUSH
25781: LD_INT 0
25783: PUSH
25784: LD_INT 0
25786: PUSH
25787: LD_INT 0
25789: PUSH
25790: EMPTY
25791: PUSH
25792: EMPTY
25793: LIST
25794: LIST
25795: LIST
25796: LIST
25797: ST_TO_ADDR
// if not x or not y then
25798: LD_VAR 0 2
25802: NOT
25803: PUSH
25804: LD_VAR 0 3
25808: NOT
25809: OR
25810: IFFALSE 25814
// exit ;
25812: GO 27466
// if not range then
25814: LD_VAR 0 4
25818: NOT
25819: IFFALSE 25829
// range := 10 ;
25821: LD_ADDR_VAR 0 4
25825: PUSH
25826: LD_INT 10
25828: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25829: LD_ADDR_VAR 0 8
25833: PUSH
25834: LD_INT 81
25836: PUSH
25837: LD_VAR 0 1
25841: PUSH
25842: EMPTY
25843: LIST
25844: LIST
25845: PUSH
25846: LD_INT 92
25848: PUSH
25849: LD_VAR 0 2
25853: PUSH
25854: LD_VAR 0 3
25858: PUSH
25859: LD_VAR 0 4
25863: PUSH
25864: EMPTY
25865: LIST
25866: LIST
25867: LIST
25868: LIST
25869: PUSH
25870: LD_INT 3
25872: PUSH
25873: LD_INT 21
25875: PUSH
25876: LD_INT 3
25878: PUSH
25879: EMPTY
25880: LIST
25881: LIST
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: LIST
25891: PPUSH
25892: CALL_OW 69
25896: ST_TO_ADDR
// if not tmp then
25897: LD_VAR 0 8
25901: NOT
25902: IFFALSE 25906
// exit ;
25904: GO 27466
// for i in tmp do
25906: LD_ADDR_VAR 0 6
25910: PUSH
25911: LD_VAR 0 8
25915: PUSH
25916: FOR_IN
25917: IFFALSE 27441
// begin points := [ 0 , 0 , 0 ] ;
25919: LD_ADDR_VAR 0 9
25923: PUSH
25924: LD_INT 0
25926: PUSH
25927: LD_INT 0
25929: PUSH
25930: LD_INT 0
25932: PUSH
25933: EMPTY
25934: LIST
25935: LIST
25936: LIST
25937: ST_TO_ADDR
// bpoints := 1 ;
25938: LD_ADDR_VAR 0 10
25942: PUSH
25943: LD_INT 1
25945: ST_TO_ADDR
// case GetType ( i ) of unit_human :
25946: LD_VAR 0 6
25950: PPUSH
25951: CALL_OW 247
25955: PUSH
25956: LD_INT 1
25958: DOUBLE
25959: EQUAL
25960: IFTRUE 25964
25962: GO 26542
25964: POP
// begin if GetClass ( i ) = 1 then
25965: LD_VAR 0 6
25969: PPUSH
25970: CALL_OW 257
25974: PUSH
25975: LD_INT 1
25977: EQUAL
25978: IFFALSE 25999
// points := [ 10 , 5 , 3 ] ;
25980: LD_ADDR_VAR 0 9
25984: PUSH
25985: LD_INT 10
25987: PUSH
25988: LD_INT 5
25990: PUSH
25991: LD_INT 3
25993: PUSH
25994: EMPTY
25995: LIST
25996: LIST
25997: LIST
25998: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
25999: LD_VAR 0 6
26003: PPUSH
26004: CALL_OW 257
26008: PUSH
26009: LD_INT 2
26011: PUSH
26012: LD_INT 3
26014: PUSH
26015: LD_INT 4
26017: PUSH
26018: EMPTY
26019: LIST
26020: LIST
26021: LIST
26022: IN
26023: IFFALSE 26044
// points := [ 3 , 2 , 1 ] ;
26025: LD_ADDR_VAR 0 9
26029: PUSH
26030: LD_INT 3
26032: PUSH
26033: LD_INT 2
26035: PUSH
26036: LD_INT 1
26038: PUSH
26039: EMPTY
26040: LIST
26041: LIST
26042: LIST
26043: ST_TO_ADDR
// if GetClass ( i ) = 5 then
26044: LD_VAR 0 6
26048: PPUSH
26049: CALL_OW 257
26053: PUSH
26054: LD_INT 5
26056: EQUAL
26057: IFFALSE 26078
// points := [ 130 , 5 , 2 ] ;
26059: LD_ADDR_VAR 0 9
26063: PUSH
26064: LD_INT 130
26066: PUSH
26067: LD_INT 5
26069: PUSH
26070: LD_INT 2
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: LIST
26077: ST_TO_ADDR
// if GetClass ( i ) = 8 then
26078: LD_VAR 0 6
26082: PPUSH
26083: CALL_OW 257
26087: PUSH
26088: LD_INT 8
26090: EQUAL
26091: IFFALSE 26112
// points := [ 35 , 35 , 30 ] ;
26093: LD_ADDR_VAR 0 9
26097: PUSH
26098: LD_INT 35
26100: PUSH
26101: LD_INT 35
26103: PUSH
26104: LD_INT 30
26106: PUSH
26107: EMPTY
26108: LIST
26109: LIST
26110: LIST
26111: ST_TO_ADDR
// if GetClass ( i ) = 9 then
26112: LD_VAR 0 6
26116: PPUSH
26117: CALL_OW 257
26121: PUSH
26122: LD_INT 9
26124: EQUAL
26125: IFFALSE 26146
// points := [ 20 , 55 , 40 ] ;
26127: LD_ADDR_VAR 0 9
26131: PUSH
26132: LD_INT 20
26134: PUSH
26135: LD_INT 55
26137: PUSH
26138: LD_INT 40
26140: PUSH
26141: EMPTY
26142: LIST
26143: LIST
26144: LIST
26145: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
26146: LD_VAR 0 6
26150: PPUSH
26151: CALL_OW 257
26155: PUSH
26156: LD_INT 12
26158: PUSH
26159: LD_INT 16
26161: PUSH
26162: EMPTY
26163: LIST
26164: LIST
26165: IN
26166: IFFALSE 26187
// points := [ 5 , 3 , 2 ] ;
26168: LD_ADDR_VAR 0 9
26172: PUSH
26173: LD_INT 5
26175: PUSH
26176: LD_INT 3
26178: PUSH
26179: LD_INT 2
26181: PUSH
26182: EMPTY
26183: LIST
26184: LIST
26185: LIST
26186: ST_TO_ADDR
// if GetClass ( i ) = 17 then
26187: LD_VAR 0 6
26191: PPUSH
26192: CALL_OW 257
26196: PUSH
26197: LD_INT 17
26199: EQUAL
26200: IFFALSE 26221
// points := [ 100 , 50 , 75 ] ;
26202: LD_ADDR_VAR 0 9
26206: PUSH
26207: LD_INT 100
26209: PUSH
26210: LD_INT 50
26212: PUSH
26213: LD_INT 75
26215: PUSH
26216: EMPTY
26217: LIST
26218: LIST
26219: LIST
26220: ST_TO_ADDR
// if GetClass ( i ) = 15 then
26221: LD_VAR 0 6
26225: PPUSH
26226: CALL_OW 257
26230: PUSH
26231: LD_INT 15
26233: EQUAL
26234: IFFALSE 26255
// points := [ 10 , 5 , 3 ] ;
26236: LD_ADDR_VAR 0 9
26240: PUSH
26241: LD_INT 10
26243: PUSH
26244: LD_INT 5
26246: PUSH
26247: LD_INT 3
26249: PUSH
26250: EMPTY
26251: LIST
26252: LIST
26253: LIST
26254: ST_TO_ADDR
// if GetClass ( i ) = 14 then
26255: LD_VAR 0 6
26259: PPUSH
26260: CALL_OW 257
26264: PUSH
26265: LD_INT 14
26267: EQUAL
26268: IFFALSE 26289
// points := [ 10 , 0 , 0 ] ;
26270: LD_ADDR_VAR 0 9
26274: PUSH
26275: LD_INT 10
26277: PUSH
26278: LD_INT 0
26280: PUSH
26281: LD_INT 0
26283: PUSH
26284: EMPTY
26285: LIST
26286: LIST
26287: LIST
26288: ST_TO_ADDR
// if GetClass ( i ) = 11 then
26289: LD_VAR 0 6
26293: PPUSH
26294: CALL_OW 257
26298: PUSH
26299: LD_INT 11
26301: EQUAL
26302: IFFALSE 26323
// points := [ 30 , 10 , 5 ] ;
26304: LD_ADDR_VAR 0 9
26308: PUSH
26309: LD_INT 30
26311: PUSH
26312: LD_INT 10
26314: PUSH
26315: LD_INT 5
26317: PUSH
26318: EMPTY
26319: LIST
26320: LIST
26321: LIST
26322: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
26323: LD_VAR 0 1
26327: PPUSH
26328: LD_INT 5
26330: PPUSH
26331: CALL_OW 321
26335: PUSH
26336: LD_INT 2
26338: EQUAL
26339: IFFALSE 26356
// bpoints := bpoints * 1.8 ;
26341: LD_ADDR_VAR 0 10
26345: PUSH
26346: LD_VAR 0 10
26350: PUSH
26351: LD_REAL  1.80000000000000E+0000
26354: MUL
26355: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
26356: LD_VAR 0 6
26360: PPUSH
26361: CALL_OW 257
26365: PUSH
26366: LD_INT 1
26368: PUSH
26369: LD_INT 2
26371: PUSH
26372: LD_INT 3
26374: PUSH
26375: LD_INT 4
26377: PUSH
26378: EMPTY
26379: LIST
26380: LIST
26381: LIST
26382: LIST
26383: IN
26384: PUSH
26385: LD_VAR 0 1
26389: PPUSH
26390: LD_INT 51
26392: PPUSH
26393: CALL_OW 321
26397: PUSH
26398: LD_INT 2
26400: EQUAL
26401: AND
26402: IFFALSE 26419
// bpoints := bpoints * 1.2 ;
26404: LD_ADDR_VAR 0 10
26408: PUSH
26409: LD_VAR 0 10
26413: PUSH
26414: LD_REAL  1.20000000000000E+0000
26417: MUL
26418: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
26419: LD_VAR 0 6
26423: PPUSH
26424: CALL_OW 257
26428: PUSH
26429: LD_INT 5
26431: PUSH
26432: LD_INT 7
26434: PUSH
26435: LD_INT 9
26437: PUSH
26438: EMPTY
26439: LIST
26440: LIST
26441: LIST
26442: IN
26443: PUSH
26444: LD_VAR 0 1
26448: PPUSH
26449: LD_INT 52
26451: PPUSH
26452: CALL_OW 321
26456: PUSH
26457: LD_INT 2
26459: EQUAL
26460: AND
26461: IFFALSE 26478
// bpoints := bpoints * 1.5 ;
26463: LD_ADDR_VAR 0 10
26467: PUSH
26468: LD_VAR 0 10
26472: PUSH
26473: LD_REAL  1.50000000000000E+0000
26476: MUL
26477: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
26478: LD_VAR 0 1
26482: PPUSH
26483: LD_INT 66
26485: PPUSH
26486: CALL_OW 321
26490: PUSH
26491: LD_INT 2
26493: EQUAL
26494: IFFALSE 26511
// bpoints := bpoints * 1.1 ;
26496: LD_ADDR_VAR 0 10
26500: PUSH
26501: LD_VAR 0 10
26505: PUSH
26506: LD_REAL  1.10000000000000E+0000
26509: MUL
26510: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
26511: LD_ADDR_VAR 0 10
26515: PUSH
26516: LD_VAR 0 10
26520: PUSH
26521: LD_VAR 0 6
26525: PPUSH
26526: LD_INT 1
26528: PPUSH
26529: CALL_OW 259
26533: PUSH
26534: LD_REAL  1.15000000000000E+0000
26537: MUL
26538: MUL
26539: ST_TO_ADDR
// end ; unit_vehicle :
26540: GO 27370
26542: LD_INT 2
26544: DOUBLE
26545: EQUAL
26546: IFTRUE 26550
26548: GO 27358
26550: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
26551: LD_VAR 0 6
26555: PPUSH
26556: CALL_OW 264
26560: PUSH
26561: LD_INT 2
26563: PUSH
26564: LD_INT 42
26566: PUSH
26567: LD_INT 24
26569: PUSH
26570: EMPTY
26571: LIST
26572: LIST
26573: LIST
26574: IN
26575: IFFALSE 26596
// points := [ 25 , 5 , 3 ] ;
26577: LD_ADDR_VAR 0 9
26581: PUSH
26582: LD_INT 25
26584: PUSH
26585: LD_INT 5
26587: PUSH
26588: LD_INT 3
26590: PUSH
26591: EMPTY
26592: LIST
26593: LIST
26594: LIST
26595: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
26596: LD_VAR 0 6
26600: PPUSH
26601: CALL_OW 264
26605: PUSH
26606: LD_INT 4
26608: PUSH
26609: LD_INT 43
26611: PUSH
26612: LD_INT 25
26614: PUSH
26615: EMPTY
26616: LIST
26617: LIST
26618: LIST
26619: IN
26620: IFFALSE 26641
// points := [ 40 , 15 , 5 ] ;
26622: LD_ADDR_VAR 0 9
26626: PUSH
26627: LD_INT 40
26629: PUSH
26630: LD_INT 15
26632: PUSH
26633: LD_INT 5
26635: PUSH
26636: EMPTY
26637: LIST
26638: LIST
26639: LIST
26640: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
26641: LD_VAR 0 6
26645: PPUSH
26646: CALL_OW 264
26650: PUSH
26651: LD_INT 3
26653: PUSH
26654: LD_INT 23
26656: PUSH
26657: EMPTY
26658: LIST
26659: LIST
26660: IN
26661: IFFALSE 26682
// points := [ 7 , 25 , 8 ] ;
26663: LD_ADDR_VAR 0 9
26667: PUSH
26668: LD_INT 7
26670: PUSH
26671: LD_INT 25
26673: PUSH
26674: LD_INT 8
26676: PUSH
26677: EMPTY
26678: LIST
26679: LIST
26680: LIST
26681: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
26682: LD_VAR 0 6
26686: PPUSH
26687: CALL_OW 264
26691: PUSH
26692: LD_INT 5
26694: PUSH
26695: LD_INT 27
26697: PUSH
26698: LD_INT 44
26700: PUSH
26701: EMPTY
26702: LIST
26703: LIST
26704: LIST
26705: IN
26706: IFFALSE 26727
// points := [ 14 , 50 , 16 ] ;
26708: LD_ADDR_VAR 0 9
26712: PUSH
26713: LD_INT 14
26715: PUSH
26716: LD_INT 50
26718: PUSH
26719: LD_INT 16
26721: PUSH
26722: EMPTY
26723: LIST
26724: LIST
26725: LIST
26726: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
26727: LD_VAR 0 6
26731: PPUSH
26732: CALL_OW 264
26736: PUSH
26737: LD_INT 6
26739: PUSH
26740: LD_INT 46
26742: PUSH
26743: EMPTY
26744: LIST
26745: LIST
26746: IN
26747: IFFALSE 26768
// points := [ 32 , 120 , 70 ] ;
26749: LD_ADDR_VAR 0 9
26753: PUSH
26754: LD_INT 32
26756: PUSH
26757: LD_INT 120
26759: PUSH
26760: LD_INT 70
26762: PUSH
26763: EMPTY
26764: LIST
26765: LIST
26766: LIST
26767: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
26768: LD_VAR 0 6
26772: PPUSH
26773: CALL_OW 264
26777: PUSH
26778: LD_INT 7
26780: PUSH
26781: LD_INT 28
26783: PUSH
26784: LD_INT 45
26786: PUSH
26787: LD_EXP 34
26791: PUSH
26792: EMPTY
26793: LIST
26794: LIST
26795: LIST
26796: LIST
26797: IN
26798: IFFALSE 26819
// points := [ 35 , 20 , 45 ] ;
26800: LD_ADDR_VAR 0 9
26804: PUSH
26805: LD_INT 35
26807: PUSH
26808: LD_INT 20
26810: PUSH
26811: LD_INT 45
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: LIST
26818: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
26819: LD_VAR 0 6
26823: PPUSH
26824: CALL_OW 264
26828: PUSH
26829: LD_INT 47
26831: PUSH
26832: EMPTY
26833: LIST
26834: IN
26835: IFFALSE 26856
// points := [ 67 , 45 , 75 ] ;
26837: LD_ADDR_VAR 0 9
26841: PUSH
26842: LD_INT 67
26844: PUSH
26845: LD_INT 45
26847: PUSH
26848: LD_INT 75
26850: PUSH
26851: EMPTY
26852: LIST
26853: LIST
26854: LIST
26855: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
26856: LD_VAR 0 6
26860: PPUSH
26861: CALL_OW 264
26865: PUSH
26866: LD_INT 26
26868: PUSH
26869: EMPTY
26870: LIST
26871: IN
26872: IFFALSE 26893
// points := [ 120 , 30 , 80 ] ;
26874: LD_ADDR_VAR 0 9
26878: PUSH
26879: LD_INT 120
26881: PUSH
26882: LD_INT 30
26884: PUSH
26885: LD_INT 80
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: LIST
26892: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
26893: LD_VAR 0 6
26897: PPUSH
26898: CALL_OW 264
26902: PUSH
26903: LD_INT 22
26905: PUSH
26906: EMPTY
26907: LIST
26908: IN
26909: IFFALSE 26930
// points := [ 40 , 1 , 1 ] ;
26911: LD_ADDR_VAR 0 9
26915: PUSH
26916: LD_INT 40
26918: PUSH
26919: LD_INT 1
26921: PUSH
26922: LD_INT 1
26924: PUSH
26925: EMPTY
26926: LIST
26927: LIST
26928: LIST
26929: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
26930: LD_VAR 0 6
26934: PPUSH
26935: CALL_OW 264
26939: PUSH
26940: LD_INT 29
26942: PUSH
26943: EMPTY
26944: LIST
26945: IN
26946: IFFALSE 26967
// points := [ 70 , 200 , 400 ] ;
26948: LD_ADDR_VAR 0 9
26952: PUSH
26953: LD_INT 70
26955: PUSH
26956: LD_INT 200
26958: PUSH
26959: LD_INT 400
26961: PUSH
26962: EMPTY
26963: LIST
26964: LIST
26965: LIST
26966: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
26967: LD_VAR 0 6
26971: PPUSH
26972: CALL_OW 264
26976: PUSH
26977: LD_INT 14
26979: PUSH
26980: LD_INT 53
26982: PUSH
26983: EMPTY
26984: LIST
26985: LIST
26986: IN
26987: IFFALSE 27008
// points := [ 40 , 10 , 20 ] ;
26989: LD_ADDR_VAR 0 9
26993: PUSH
26994: LD_INT 40
26996: PUSH
26997: LD_INT 10
26999: PUSH
27000: LD_INT 20
27002: PUSH
27003: EMPTY
27004: LIST
27005: LIST
27006: LIST
27007: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
27008: LD_VAR 0 6
27012: PPUSH
27013: CALL_OW 264
27017: PUSH
27018: LD_INT 9
27020: PUSH
27021: EMPTY
27022: LIST
27023: IN
27024: IFFALSE 27045
// points := [ 5 , 70 , 20 ] ;
27026: LD_ADDR_VAR 0 9
27030: PUSH
27031: LD_INT 5
27033: PUSH
27034: LD_INT 70
27036: PUSH
27037: LD_INT 20
27039: PUSH
27040: EMPTY
27041: LIST
27042: LIST
27043: LIST
27044: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
27045: LD_VAR 0 6
27049: PPUSH
27050: CALL_OW 264
27054: PUSH
27055: LD_INT 10
27057: PUSH
27058: EMPTY
27059: LIST
27060: IN
27061: IFFALSE 27082
// points := [ 35 , 110 , 70 ] ;
27063: LD_ADDR_VAR 0 9
27067: PUSH
27068: LD_INT 35
27070: PUSH
27071: LD_INT 110
27073: PUSH
27074: LD_INT 70
27076: PUSH
27077: EMPTY
27078: LIST
27079: LIST
27080: LIST
27081: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
27082: LD_VAR 0 6
27086: PPUSH
27087: CALL_OW 265
27091: PUSH
27092: LD_INT 25
27094: EQUAL
27095: IFFALSE 27116
// points := [ 80 , 65 , 100 ] ;
27097: LD_ADDR_VAR 0 9
27101: PUSH
27102: LD_INT 80
27104: PUSH
27105: LD_INT 65
27107: PUSH
27108: LD_INT 100
27110: PUSH
27111: EMPTY
27112: LIST
27113: LIST
27114: LIST
27115: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
27116: LD_VAR 0 6
27120: PPUSH
27121: CALL_OW 263
27125: PUSH
27126: LD_INT 1
27128: EQUAL
27129: IFFALSE 27164
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
27131: LD_ADDR_VAR 0 10
27135: PUSH
27136: LD_VAR 0 10
27140: PUSH
27141: LD_VAR 0 6
27145: PPUSH
27146: CALL_OW 311
27150: PPUSH
27151: LD_INT 3
27153: PPUSH
27154: CALL_OW 259
27158: PUSH
27159: LD_INT 4
27161: MUL
27162: MUL
27163: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
27164: LD_VAR 0 6
27168: PPUSH
27169: CALL_OW 263
27173: PUSH
27174: LD_INT 2
27176: EQUAL
27177: IFFALSE 27228
// begin j := IsControledBy ( i ) ;
27179: LD_ADDR_VAR 0 7
27183: PUSH
27184: LD_VAR 0 6
27188: PPUSH
27189: CALL_OW 312
27193: ST_TO_ADDR
// if j then
27194: LD_VAR 0 7
27198: IFFALSE 27228
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
27200: LD_ADDR_VAR 0 10
27204: PUSH
27205: LD_VAR 0 10
27209: PUSH
27210: LD_VAR 0 7
27214: PPUSH
27215: LD_INT 3
27217: PPUSH
27218: CALL_OW 259
27222: PUSH
27223: LD_INT 3
27225: MUL
27226: MUL
27227: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
27228: LD_VAR 0 6
27232: PPUSH
27233: CALL_OW 264
27237: PUSH
27238: LD_INT 5
27240: PUSH
27241: LD_INT 6
27243: PUSH
27244: LD_INT 46
27246: PUSH
27247: LD_INT 44
27249: PUSH
27250: LD_INT 47
27252: PUSH
27253: LD_INT 45
27255: PUSH
27256: LD_INT 28
27258: PUSH
27259: LD_INT 7
27261: PUSH
27262: LD_INT 27
27264: PUSH
27265: LD_INT 29
27267: PUSH
27268: EMPTY
27269: LIST
27270: LIST
27271: LIST
27272: LIST
27273: LIST
27274: LIST
27275: LIST
27276: LIST
27277: LIST
27278: LIST
27279: IN
27280: PUSH
27281: LD_VAR 0 1
27285: PPUSH
27286: LD_INT 52
27288: PPUSH
27289: CALL_OW 321
27293: PUSH
27294: LD_INT 2
27296: EQUAL
27297: AND
27298: IFFALSE 27315
// bpoints := bpoints * 1.2 ;
27300: LD_ADDR_VAR 0 10
27304: PUSH
27305: LD_VAR 0 10
27309: PUSH
27310: LD_REAL  1.20000000000000E+0000
27313: MUL
27314: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
27315: LD_VAR 0 6
27319: PPUSH
27320: CALL_OW 264
27324: PUSH
27325: LD_INT 6
27327: PUSH
27328: LD_INT 46
27330: PUSH
27331: LD_INT 47
27333: PUSH
27334: EMPTY
27335: LIST
27336: LIST
27337: LIST
27338: IN
27339: IFFALSE 27356
// bpoints := bpoints * 1.2 ;
27341: LD_ADDR_VAR 0 10
27345: PUSH
27346: LD_VAR 0 10
27350: PUSH
27351: LD_REAL  1.20000000000000E+0000
27354: MUL
27355: ST_TO_ADDR
// end ; unit_building :
27356: GO 27370
27358: LD_INT 3
27360: DOUBLE
27361: EQUAL
27362: IFTRUE 27366
27364: GO 27369
27366: POP
// ; end ;
27367: GO 27370
27369: POP
// for j = 1 to 3 do
27370: LD_ADDR_VAR 0 7
27374: PUSH
27375: DOUBLE
27376: LD_INT 1
27378: DEC
27379: ST_TO_ADDR
27380: LD_INT 3
27382: PUSH
27383: FOR_TO
27384: IFFALSE 27437
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
27386: LD_ADDR_VAR 0 5
27390: PUSH
27391: LD_VAR 0 5
27395: PPUSH
27396: LD_VAR 0 7
27400: PPUSH
27401: LD_VAR 0 5
27405: PUSH
27406: LD_VAR 0 7
27410: ARRAY
27411: PUSH
27412: LD_VAR 0 9
27416: PUSH
27417: LD_VAR 0 7
27421: ARRAY
27422: PUSH
27423: LD_VAR 0 10
27427: MUL
27428: PLUS
27429: PPUSH
27430: CALL_OW 1
27434: ST_TO_ADDR
27435: GO 27383
27437: POP
27438: POP
// end ;
27439: GO 25916
27441: POP
27442: POP
// result := Replace ( result , 4 , tmp ) ;
27443: LD_ADDR_VAR 0 5
27447: PUSH
27448: LD_VAR 0 5
27452: PPUSH
27453: LD_INT 4
27455: PPUSH
27456: LD_VAR 0 8
27460: PPUSH
27461: CALL_OW 1
27465: ST_TO_ADDR
// end ;
27466: LD_VAR 0 5
27470: RET
// export function DangerAtRange ( unit , range ) ; begin
27471: LD_INT 0
27473: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
27474: LD_ADDR_VAR 0 3
27478: PUSH
27479: LD_VAR 0 1
27483: PPUSH
27484: CALL_OW 255
27488: PPUSH
27489: LD_VAR 0 1
27493: PPUSH
27494: CALL_OW 250
27498: PPUSH
27499: LD_VAR 0 1
27503: PPUSH
27504: CALL_OW 251
27508: PPUSH
27509: LD_VAR 0 2
27513: PPUSH
27514: CALL 25768 0 4
27518: ST_TO_ADDR
// end ;
27519: LD_VAR 0 3
27523: RET
// export function DangerInArea ( side , area ) ; begin
27524: LD_INT 0
27526: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
27527: LD_ADDR_VAR 0 3
27531: PUSH
27532: LD_VAR 0 2
27536: PPUSH
27537: LD_INT 81
27539: PUSH
27540: LD_VAR 0 1
27544: PUSH
27545: EMPTY
27546: LIST
27547: LIST
27548: PPUSH
27549: CALL_OW 70
27553: ST_TO_ADDR
// end ;
27554: LD_VAR 0 3
27558: RET
// export function IsExtension ( b ) ; begin
27559: LD_INT 0
27561: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
27562: LD_ADDR_VAR 0 2
27566: PUSH
27567: LD_VAR 0 1
27571: PUSH
27572: LD_INT 23
27574: PUSH
27575: LD_INT 20
27577: PUSH
27578: LD_INT 22
27580: PUSH
27581: LD_INT 17
27583: PUSH
27584: LD_INT 24
27586: PUSH
27587: LD_INT 21
27589: PUSH
27590: LD_INT 19
27592: PUSH
27593: LD_INT 16
27595: PUSH
27596: LD_INT 25
27598: PUSH
27599: LD_INT 18
27601: PUSH
27602: EMPTY
27603: LIST
27604: LIST
27605: LIST
27606: LIST
27607: LIST
27608: LIST
27609: LIST
27610: LIST
27611: LIST
27612: LIST
27613: IN
27614: ST_TO_ADDR
// end ;
27615: LD_VAR 0 2
27619: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
27620: LD_INT 0
27622: PPUSH
27623: PPUSH
27624: PPUSH
// result := [ ] ;
27625: LD_ADDR_VAR 0 4
27629: PUSH
27630: EMPTY
27631: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
27632: LD_ADDR_VAR 0 5
27636: PUSH
27637: LD_VAR 0 2
27641: PPUSH
27642: LD_INT 21
27644: PUSH
27645: LD_INT 3
27647: PUSH
27648: EMPTY
27649: LIST
27650: LIST
27651: PPUSH
27652: CALL_OW 70
27656: ST_TO_ADDR
// if not tmp then
27657: LD_VAR 0 5
27661: NOT
27662: IFFALSE 27666
// exit ;
27664: GO 27730
// if checkLink then
27666: LD_VAR 0 3
27670: IFFALSE 27720
// begin for i in tmp do
27672: LD_ADDR_VAR 0 6
27676: PUSH
27677: LD_VAR 0 5
27681: PUSH
27682: FOR_IN
27683: IFFALSE 27718
// if GetBase ( i ) <> base then
27685: LD_VAR 0 6
27689: PPUSH
27690: CALL_OW 274
27694: PUSH
27695: LD_VAR 0 1
27699: NONEQUAL
27700: IFFALSE 27716
// ComLinkToBase ( base , i ) ;
27702: LD_VAR 0 1
27706: PPUSH
27707: LD_VAR 0 6
27711: PPUSH
27712: CALL_OW 169
27716: GO 27682
27718: POP
27719: POP
// end ; result := tmp ;
27720: LD_ADDR_VAR 0 4
27724: PUSH
27725: LD_VAR 0 5
27729: ST_TO_ADDR
// end ;
27730: LD_VAR 0 4
27734: RET
// export function ComComplete ( units , b ) ; var i ; begin
27735: LD_INT 0
27737: PPUSH
27738: PPUSH
// if not units then
27739: LD_VAR 0 1
27743: NOT
27744: IFFALSE 27748
// exit ;
27746: GO 27838
// for i in units do
27748: LD_ADDR_VAR 0 4
27752: PUSH
27753: LD_VAR 0 1
27757: PUSH
27758: FOR_IN
27759: IFFALSE 27836
// if BuildingStatus ( b ) = bs_build then
27761: LD_VAR 0 2
27765: PPUSH
27766: CALL_OW 461
27770: PUSH
27771: LD_INT 1
27773: EQUAL
27774: IFFALSE 27834
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
27776: LD_VAR 0 4
27780: PPUSH
27781: LD_STRING h
27783: PUSH
27784: LD_VAR 0 2
27788: PPUSH
27789: CALL_OW 250
27793: PUSH
27794: LD_VAR 0 2
27798: PPUSH
27799: CALL_OW 251
27803: PUSH
27804: LD_VAR 0 2
27808: PUSH
27809: LD_INT 0
27811: PUSH
27812: LD_INT 0
27814: PUSH
27815: LD_INT 0
27817: PUSH
27818: EMPTY
27819: LIST
27820: LIST
27821: LIST
27822: LIST
27823: LIST
27824: LIST
27825: LIST
27826: PUSH
27827: EMPTY
27828: LIST
27829: PPUSH
27830: CALL_OW 446
27834: GO 27758
27836: POP
27837: POP
// end ;
27838: LD_VAR 0 3
27842: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
27843: LD_INT 0
27845: PPUSH
27846: PPUSH
27847: PPUSH
27848: PPUSH
27849: PPUSH
27850: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
27851: LD_VAR 0 1
27855: NOT
27856: PUSH
27857: LD_VAR 0 1
27861: PPUSH
27862: CALL_OW 263
27866: PUSH
27867: LD_INT 2
27869: NONEQUAL
27870: OR
27871: IFFALSE 27875
// exit ;
27873: GO 28191
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
27875: LD_ADDR_VAR 0 6
27879: PUSH
27880: LD_INT 22
27882: PUSH
27883: LD_VAR 0 1
27887: PPUSH
27888: CALL_OW 255
27892: PUSH
27893: EMPTY
27894: LIST
27895: LIST
27896: PUSH
27897: LD_INT 2
27899: PUSH
27900: LD_INT 30
27902: PUSH
27903: LD_INT 36
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: PUSH
27910: LD_INT 34
27912: PUSH
27913: LD_INT 31
27915: PUSH
27916: EMPTY
27917: LIST
27918: LIST
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: LIST
27924: PUSH
27925: EMPTY
27926: LIST
27927: LIST
27928: PPUSH
27929: CALL_OW 69
27933: ST_TO_ADDR
// if not tmp then
27934: LD_VAR 0 6
27938: NOT
27939: IFFALSE 27943
// exit ;
27941: GO 28191
// result := [ ] ;
27943: LD_ADDR_VAR 0 2
27947: PUSH
27948: EMPTY
27949: ST_TO_ADDR
// for i in tmp do
27950: LD_ADDR_VAR 0 3
27954: PUSH
27955: LD_VAR 0 6
27959: PUSH
27960: FOR_IN
27961: IFFALSE 28032
// begin t := UnitsInside ( i ) ;
27963: LD_ADDR_VAR 0 4
27967: PUSH
27968: LD_VAR 0 3
27972: PPUSH
27973: CALL_OW 313
27977: ST_TO_ADDR
// if t then
27978: LD_VAR 0 4
27982: IFFALSE 28030
// for j in t do
27984: LD_ADDR_VAR 0 7
27988: PUSH
27989: LD_VAR 0 4
27993: PUSH
27994: FOR_IN
27995: IFFALSE 28028
// result := Replace ( result , result + 1 , j ) ;
27997: LD_ADDR_VAR 0 2
28001: PUSH
28002: LD_VAR 0 2
28006: PPUSH
28007: LD_VAR 0 2
28011: PUSH
28012: LD_INT 1
28014: PLUS
28015: PPUSH
28016: LD_VAR 0 7
28020: PPUSH
28021: CALL_OW 1
28025: ST_TO_ADDR
28026: GO 27994
28028: POP
28029: POP
// end ;
28030: GO 27960
28032: POP
28033: POP
// if not result then
28034: LD_VAR 0 2
28038: NOT
28039: IFFALSE 28043
// exit ;
28041: GO 28191
// mech := result [ 1 ] ;
28043: LD_ADDR_VAR 0 5
28047: PUSH
28048: LD_VAR 0 2
28052: PUSH
28053: LD_INT 1
28055: ARRAY
28056: ST_TO_ADDR
// if result > 1 then
28057: LD_VAR 0 2
28061: PUSH
28062: LD_INT 1
28064: GREATER
28065: IFFALSE 28177
// begin for i = 2 to result do
28067: LD_ADDR_VAR 0 3
28071: PUSH
28072: DOUBLE
28073: LD_INT 2
28075: DEC
28076: ST_TO_ADDR
28077: LD_VAR 0 2
28081: PUSH
28082: FOR_TO
28083: IFFALSE 28175
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
28085: LD_ADDR_VAR 0 4
28089: PUSH
28090: LD_VAR 0 2
28094: PUSH
28095: LD_VAR 0 3
28099: ARRAY
28100: PPUSH
28101: LD_INT 3
28103: PPUSH
28104: CALL_OW 259
28108: PUSH
28109: LD_VAR 0 2
28113: PUSH
28114: LD_VAR 0 3
28118: ARRAY
28119: PPUSH
28120: CALL_OW 432
28124: MINUS
28125: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
28126: LD_VAR 0 4
28130: PUSH
28131: LD_VAR 0 5
28135: PPUSH
28136: LD_INT 3
28138: PPUSH
28139: CALL_OW 259
28143: PUSH
28144: LD_VAR 0 5
28148: PPUSH
28149: CALL_OW 432
28153: MINUS
28154: GREATEREQUAL
28155: IFFALSE 28173
// mech := result [ i ] ;
28157: LD_ADDR_VAR 0 5
28161: PUSH
28162: LD_VAR 0 2
28166: PUSH
28167: LD_VAR 0 3
28171: ARRAY
28172: ST_TO_ADDR
// end ;
28173: GO 28082
28175: POP
28176: POP
// end ; ComLinkTo ( vehicle , mech ) ;
28177: LD_VAR 0 1
28181: PPUSH
28182: LD_VAR 0 5
28186: PPUSH
28187: CALL_OW 135
// end ;
28191: LD_VAR 0 2
28195: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
28196: LD_INT 0
28198: PPUSH
28199: PPUSH
28200: PPUSH
28201: PPUSH
28202: PPUSH
28203: PPUSH
28204: PPUSH
28205: PPUSH
28206: PPUSH
28207: PPUSH
28208: PPUSH
28209: PPUSH
28210: PPUSH
// result := [ ] ;
28211: LD_ADDR_VAR 0 7
28215: PUSH
28216: EMPTY
28217: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
28218: LD_VAR 0 1
28222: PPUSH
28223: CALL_OW 266
28227: PUSH
28228: LD_INT 0
28230: PUSH
28231: LD_INT 1
28233: PUSH
28234: EMPTY
28235: LIST
28236: LIST
28237: IN
28238: NOT
28239: IFFALSE 28243
// exit ;
28241: GO 29877
// if name then
28243: LD_VAR 0 3
28247: IFFALSE 28263
// SetBName ( base_dep , name ) ;
28249: LD_VAR 0 1
28253: PPUSH
28254: LD_VAR 0 3
28258: PPUSH
28259: CALL_OW 500
// base := GetBase ( base_dep ) ;
28263: LD_ADDR_VAR 0 15
28267: PUSH
28268: LD_VAR 0 1
28272: PPUSH
28273: CALL_OW 274
28277: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
28278: LD_ADDR_VAR 0 16
28282: PUSH
28283: LD_VAR 0 1
28287: PPUSH
28288: CALL_OW 255
28292: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
28293: LD_ADDR_VAR 0 17
28297: PUSH
28298: LD_VAR 0 1
28302: PPUSH
28303: CALL_OW 248
28307: ST_TO_ADDR
// if sources then
28308: LD_VAR 0 5
28312: IFFALSE 28359
// for i = 1 to 3 do
28314: LD_ADDR_VAR 0 8
28318: PUSH
28319: DOUBLE
28320: LD_INT 1
28322: DEC
28323: ST_TO_ADDR
28324: LD_INT 3
28326: PUSH
28327: FOR_TO
28328: IFFALSE 28357
// AddResourceType ( base , i , sources [ i ] ) ;
28330: LD_VAR 0 15
28334: PPUSH
28335: LD_VAR 0 8
28339: PPUSH
28340: LD_VAR 0 5
28344: PUSH
28345: LD_VAR 0 8
28349: ARRAY
28350: PPUSH
28351: CALL_OW 276
28355: GO 28327
28357: POP
28358: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
28359: LD_ADDR_VAR 0 18
28363: PUSH
28364: LD_VAR 0 15
28368: PPUSH
28369: LD_VAR 0 2
28373: PPUSH
28374: LD_INT 1
28376: PPUSH
28377: CALL 27620 0 3
28381: ST_TO_ADDR
// InitHc ;
28382: CALL_OW 19
// InitUc ;
28386: CALL_OW 18
// uc_side := side ;
28390: LD_ADDR_OWVAR 20
28394: PUSH
28395: LD_VAR 0 16
28399: ST_TO_ADDR
// uc_nation := nation ;
28400: LD_ADDR_OWVAR 21
28404: PUSH
28405: LD_VAR 0 17
28409: ST_TO_ADDR
// if buildings then
28410: LD_VAR 0 18
28414: IFFALSE 29736
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
28416: LD_ADDR_VAR 0 19
28420: PUSH
28421: LD_VAR 0 18
28425: PPUSH
28426: LD_INT 2
28428: PUSH
28429: LD_INT 30
28431: PUSH
28432: LD_INT 29
28434: PUSH
28435: EMPTY
28436: LIST
28437: LIST
28438: PUSH
28439: LD_INT 30
28441: PUSH
28442: LD_INT 30
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: LIST
28453: PPUSH
28454: CALL_OW 72
28458: ST_TO_ADDR
// if tmp then
28459: LD_VAR 0 19
28463: IFFALSE 28511
// for i in tmp do
28465: LD_ADDR_VAR 0 8
28469: PUSH
28470: LD_VAR 0 19
28474: PUSH
28475: FOR_IN
28476: IFFALSE 28509
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
28478: LD_VAR 0 8
28482: PPUSH
28483: CALL_OW 250
28487: PPUSH
28488: LD_VAR 0 8
28492: PPUSH
28493: CALL_OW 251
28497: PPUSH
28498: LD_VAR 0 16
28502: PPUSH
28503: CALL_OW 441
28507: GO 28475
28509: POP
28510: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
28511: LD_VAR 0 18
28515: PPUSH
28516: LD_INT 2
28518: PUSH
28519: LD_INT 30
28521: PUSH
28522: LD_INT 32
28524: PUSH
28525: EMPTY
28526: LIST
28527: LIST
28528: PUSH
28529: LD_INT 30
28531: PUSH
28532: LD_INT 33
28534: PUSH
28535: EMPTY
28536: LIST
28537: LIST
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: LIST
28543: PPUSH
28544: CALL_OW 72
28548: IFFALSE 28636
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
28550: LD_ADDR_VAR 0 8
28554: PUSH
28555: LD_VAR 0 18
28559: PPUSH
28560: LD_INT 2
28562: PUSH
28563: LD_INT 30
28565: PUSH
28566: LD_INT 32
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: LD_INT 30
28575: PUSH
28576: LD_INT 33
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: PUSH
28583: EMPTY
28584: LIST
28585: LIST
28586: LIST
28587: PPUSH
28588: CALL_OW 72
28592: PUSH
28593: FOR_IN
28594: IFFALSE 28634
// begin if not GetBWeapon ( i ) then
28596: LD_VAR 0 8
28600: PPUSH
28601: CALL_OW 269
28605: NOT
28606: IFFALSE 28632
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
28608: LD_VAR 0 8
28612: PPUSH
28613: LD_VAR 0 8
28617: PPUSH
28618: LD_VAR 0 2
28622: PPUSH
28623: CALL 29882 0 2
28627: PPUSH
28628: CALL_OW 431
// end ;
28632: GO 28593
28634: POP
28635: POP
// end ; for i = 1 to personel do
28636: LD_ADDR_VAR 0 8
28640: PUSH
28641: DOUBLE
28642: LD_INT 1
28644: DEC
28645: ST_TO_ADDR
28646: LD_VAR 0 6
28650: PUSH
28651: FOR_TO
28652: IFFALSE 29716
// begin if i > 4 then
28654: LD_VAR 0 8
28658: PUSH
28659: LD_INT 4
28661: GREATER
28662: IFFALSE 28666
// break ;
28664: GO 29716
// case i of 1 :
28666: LD_VAR 0 8
28670: PUSH
28671: LD_INT 1
28673: DOUBLE
28674: EQUAL
28675: IFTRUE 28679
28677: GO 28759
28679: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
28680: LD_ADDR_VAR 0 12
28684: PUSH
28685: LD_VAR 0 18
28689: PPUSH
28690: LD_INT 22
28692: PUSH
28693: LD_VAR 0 16
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: PUSH
28702: LD_INT 58
28704: PUSH
28705: EMPTY
28706: LIST
28707: PUSH
28708: LD_INT 2
28710: PUSH
28711: LD_INT 30
28713: PUSH
28714: LD_INT 32
28716: PUSH
28717: EMPTY
28718: LIST
28719: LIST
28720: PUSH
28721: LD_INT 30
28723: PUSH
28724: LD_INT 4
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: PUSH
28731: LD_INT 30
28733: PUSH
28734: LD_INT 5
28736: PUSH
28737: EMPTY
28738: LIST
28739: LIST
28740: PUSH
28741: EMPTY
28742: LIST
28743: LIST
28744: LIST
28745: LIST
28746: PUSH
28747: EMPTY
28748: LIST
28749: LIST
28750: LIST
28751: PPUSH
28752: CALL_OW 72
28756: ST_TO_ADDR
28757: GO 28981
28759: LD_INT 2
28761: DOUBLE
28762: EQUAL
28763: IFTRUE 28767
28765: GO 28829
28767: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
28768: LD_ADDR_VAR 0 12
28772: PUSH
28773: LD_VAR 0 18
28777: PPUSH
28778: LD_INT 22
28780: PUSH
28781: LD_VAR 0 16
28785: PUSH
28786: EMPTY
28787: LIST
28788: LIST
28789: PUSH
28790: LD_INT 2
28792: PUSH
28793: LD_INT 30
28795: PUSH
28796: LD_INT 0
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: PUSH
28803: LD_INT 30
28805: PUSH
28806: LD_INT 1
28808: PUSH
28809: EMPTY
28810: LIST
28811: LIST
28812: PUSH
28813: EMPTY
28814: LIST
28815: LIST
28816: LIST
28817: PUSH
28818: EMPTY
28819: LIST
28820: LIST
28821: PPUSH
28822: CALL_OW 72
28826: ST_TO_ADDR
28827: GO 28981
28829: LD_INT 3
28831: DOUBLE
28832: EQUAL
28833: IFTRUE 28837
28835: GO 28899
28837: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
28838: LD_ADDR_VAR 0 12
28842: PUSH
28843: LD_VAR 0 18
28847: PPUSH
28848: LD_INT 22
28850: PUSH
28851: LD_VAR 0 16
28855: PUSH
28856: EMPTY
28857: LIST
28858: LIST
28859: PUSH
28860: LD_INT 2
28862: PUSH
28863: LD_INT 30
28865: PUSH
28866: LD_INT 2
28868: PUSH
28869: EMPTY
28870: LIST
28871: LIST
28872: PUSH
28873: LD_INT 30
28875: PUSH
28876: LD_INT 3
28878: PUSH
28879: EMPTY
28880: LIST
28881: LIST
28882: PUSH
28883: EMPTY
28884: LIST
28885: LIST
28886: LIST
28887: PUSH
28888: EMPTY
28889: LIST
28890: LIST
28891: PPUSH
28892: CALL_OW 72
28896: ST_TO_ADDR
28897: GO 28981
28899: LD_INT 4
28901: DOUBLE
28902: EQUAL
28903: IFTRUE 28907
28905: GO 28980
28907: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
28908: LD_ADDR_VAR 0 12
28912: PUSH
28913: LD_VAR 0 18
28917: PPUSH
28918: LD_INT 22
28920: PUSH
28921: LD_VAR 0 16
28925: PUSH
28926: EMPTY
28927: LIST
28928: LIST
28929: PUSH
28930: LD_INT 2
28932: PUSH
28933: LD_INT 30
28935: PUSH
28936: LD_INT 6
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: PUSH
28943: LD_INT 30
28945: PUSH
28946: LD_INT 7
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PUSH
28953: LD_INT 30
28955: PUSH
28956: LD_INT 8
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: PUSH
28963: EMPTY
28964: LIST
28965: LIST
28966: LIST
28967: LIST
28968: PUSH
28969: EMPTY
28970: LIST
28971: LIST
28972: PPUSH
28973: CALL_OW 72
28977: ST_TO_ADDR
28978: GO 28981
28980: POP
// if i = 1 then
28981: LD_VAR 0 8
28985: PUSH
28986: LD_INT 1
28988: EQUAL
28989: IFFALSE 29100
// begin tmp := [ ] ;
28991: LD_ADDR_VAR 0 19
28995: PUSH
28996: EMPTY
28997: ST_TO_ADDR
// for j in f do
28998: LD_ADDR_VAR 0 9
29002: PUSH
29003: LD_VAR 0 12
29007: PUSH
29008: FOR_IN
29009: IFFALSE 29082
// if GetBType ( j ) = b_bunker then
29011: LD_VAR 0 9
29015: PPUSH
29016: CALL_OW 266
29020: PUSH
29021: LD_INT 32
29023: EQUAL
29024: IFFALSE 29051
// tmp := Insert ( tmp , 1 , j ) else
29026: LD_ADDR_VAR 0 19
29030: PUSH
29031: LD_VAR 0 19
29035: PPUSH
29036: LD_INT 1
29038: PPUSH
29039: LD_VAR 0 9
29043: PPUSH
29044: CALL_OW 2
29048: ST_TO_ADDR
29049: GO 29080
// tmp := Insert ( tmp , tmp + 1 , j ) ;
29051: LD_ADDR_VAR 0 19
29055: PUSH
29056: LD_VAR 0 19
29060: PPUSH
29061: LD_VAR 0 19
29065: PUSH
29066: LD_INT 1
29068: PLUS
29069: PPUSH
29070: LD_VAR 0 9
29074: PPUSH
29075: CALL_OW 2
29079: ST_TO_ADDR
29080: GO 29008
29082: POP
29083: POP
// if tmp then
29084: LD_VAR 0 19
29088: IFFALSE 29100
// f := tmp ;
29090: LD_ADDR_VAR 0 12
29094: PUSH
29095: LD_VAR 0 19
29099: ST_TO_ADDR
// end ; x := personel [ i ] ;
29100: LD_ADDR_VAR 0 13
29104: PUSH
29105: LD_VAR 0 6
29109: PUSH
29110: LD_VAR 0 8
29114: ARRAY
29115: ST_TO_ADDR
// if x = - 1 then
29116: LD_VAR 0 13
29120: PUSH
29121: LD_INT 1
29123: NEG
29124: EQUAL
29125: IFFALSE 29334
// begin for j in f do
29127: LD_ADDR_VAR 0 9
29131: PUSH
29132: LD_VAR 0 12
29136: PUSH
29137: FOR_IN
29138: IFFALSE 29330
// repeat InitHc ;
29140: CALL_OW 19
// if GetBType ( j ) = b_barracks then
29144: LD_VAR 0 9
29148: PPUSH
29149: CALL_OW 266
29153: PUSH
29154: LD_INT 5
29156: EQUAL
29157: IFFALSE 29227
// begin if UnitsInside ( j ) < 3 then
29159: LD_VAR 0 9
29163: PPUSH
29164: CALL_OW 313
29168: PUSH
29169: LD_INT 3
29171: LESS
29172: IFFALSE 29208
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29174: LD_INT 0
29176: PPUSH
29177: LD_INT 5
29179: PUSH
29180: LD_INT 8
29182: PUSH
29183: LD_INT 9
29185: PUSH
29186: EMPTY
29187: LIST
29188: LIST
29189: LIST
29190: PUSH
29191: LD_VAR 0 17
29195: ARRAY
29196: PPUSH
29197: LD_VAR 0 4
29201: PPUSH
29202: CALL_OW 380
29206: GO 29225
// PrepareHuman ( false , i , skill ) ;
29208: LD_INT 0
29210: PPUSH
29211: LD_VAR 0 8
29215: PPUSH
29216: LD_VAR 0 4
29220: PPUSH
29221: CALL_OW 380
// end else
29225: GO 29244
// PrepareHuman ( false , i , skill ) ;
29227: LD_INT 0
29229: PPUSH
29230: LD_VAR 0 8
29234: PPUSH
29235: LD_VAR 0 4
29239: PPUSH
29240: CALL_OW 380
// un := CreateHuman ;
29244: LD_ADDR_VAR 0 14
29248: PUSH
29249: CALL_OW 44
29253: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29254: LD_ADDR_VAR 0 7
29258: PUSH
29259: LD_VAR 0 7
29263: PPUSH
29264: LD_INT 1
29266: PPUSH
29267: LD_VAR 0 14
29271: PPUSH
29272: CALL_OW 2
29276: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
29277: LD_VAR 0 14
29281: PPUSH
29282: LD_VAR 0 9
29286: PPUSH
29287: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
29291: LD_VAR 0 9
29295: PPUSH
29296: CALL_OW 313
29300: PUSH
29301: LD_INT 6
29303: EQUAL
29304: PUSH
29305: LD_VAR 0 9
29309: PPUSH
29310: CALL_OW 266
29314: PUSH
29315: LD_INT 32
29317: PUSH
29318: LD_INT 31
29320: PUSH
29321: EMPTY
29322: LIST
29323: LIST
29324: IN
29325: OR
29326: IFFALSE 29140
29328: GO 29137
29330: POP
29331: POP
// end else
29332: GO 29714
// for j = 1 to x do
29334: LD_ADDR_VAR 0 9
29338: PUSH
29339: DOUBLE
29340: LD_INT 1
29342: DEC
29343: ST_TO_ADDR
29344: LD_VAR 0 13
29348: PUSH
29349: FOR_TO
29350: IFFALSE 29712
// begin InitHc ;
29352: CALL_OW 19
// if not f then
29356: LD_VAR 0 12
29360: NOT
29361: IFFALSE 29450
// begin PrepareHuman ( false , i , skill ) ;
29363: LD_INT 0
29365: PPUSH
29366: LD_VAR 0 8
29370: PPUSH
29371: LD_VAR 0 4
29375: PPUSH
29376: CALL_OW 380
// un := CreateHuman ;
29380: LD_ADDR_VAR 0 14
29384: PUSH
29385: CALL_OW 44
29389: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29390: LD_ADDR_VAR 0 7
29394: PUSH
29395: LD_VAR 0 7
29399: PPUSH
29400: LD_INT 1
29402: PPUSH
29403: LD_VAR 0 14
29407: PPUSH
29408: CALL_OW 2
29412: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29413: LD_VAR 0 14
29417: PPUSH
29418: LD_VAR 0 1
29422: PPUSH
29423: CALL_OW 250
29427: PPUSH
29428: LD_VAR 0 1
29432: PPUSH
29433: CALL_OW 251
29437: PPUSH
29438: LD_INT 10
29440: PPUSH
29441: LD_INT 0
29443: PPUSH
29444: CALL_OW 50
// continue ;
29448: GO 29349
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
29450: LD_VAR 0 12
29454: PUSH
29455: LD_INT 1
29457: ARRAY
29458: PPUSH
29459: CALL_OW 313
29463: PUSH
29464: LD_VAR 0 12
29468: PUSH
29469: LD_INT 1
29471: ARRAY
29472: PPUSH
29473: CALL_OW 266
29477: PUSH
29478: LD_INT 32
29480: PUSH
29481: LD_INT 31
29483: PUSH
29484: EMPTY
29485: LIST
29486: LIST
29487: IN
29488: AND
29489: PUSH
29490: LD_VAR 0 12
29494: PUSH
29495: LD_INT 1
29497: ARRAY
29498: PPUSH
29499: CALL_OW 313
29503: PUSH
29504: LD_INT 6
29506: EQUAL
29507: OR
29508: IFFALSE 29528
// f := Delete ( f , 1 ) ;
29510: LD_ADDR_VAR 0 12
29514: PUSH
29515: LD_VAR 0 12
29519: PPUSH
29520: LD_INT 1
29522: PPUSH
29523: CALL_OW 3
29527: ST_TO_ADDR
// if not f then
29528: LD_VAR 0 12
29532: NOT
29533: IFFALSE 29551
// begin x := x + 2 ;
29535: LD_ADDR_VAR 0 13
29539: PUSH
29540: LD_VAR 0 13
29544: PUSH
29545: LD_INT 2
29547: PLUS
29548: ST_TO_ADDR
// continue ;
29549: GO 29349
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
29551: LD_VAR 0 12
29555: PUSH
29556: LD_INT 1
29558: ARRAY
29559: PPUSH
29560: CALL_OW 266
29564: PUSH
29565: LD_INT 5
29567: EQUAL
29568: IFFALSE 29642
// begin if UnitsInside ( f [ 1 ] ) < 3 then
29570: LD_VAR 0 12
29574: PUSH
29575: LD_INT 1
29577: ARRAY
29578: PPUSH
29579: CALL_OW 313
29583: PUSH
29584: LD_INT 3
29586: LESS
29587: IFFALSE 29623
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29589: LD_INT 0
29591: PPUSH
29592: LD_INT 5
29594: PUSH
29595: LD_INT 8
29597: PUSH
29598: LD_INT 9
29600: PUSH
29601: EMPTY
29602: LIST
29603: LIST
29604: LIST
29605: PUSH
29606: LD_VAR 0 17
29610: ARRAY
29611: PPUSH
29612: LD_VAR 0 4
29616: PPUSH
29617: CALL_OW 380
29621: GO 29640
// PrepareHuman ( false , i , skill ) ;
29623: LD_INT 0
29625: PPUSH
29626: LD_VAR 0 8
29630: PPUSH
29631: LD_VAR 0 4
29635: PPUSH
29636: CALL_OW 380
// end else
29640: GO 29659
// PrepareHuman ( false , i , skill ) ;
29642: LD_INT 0
29644: PPUSH
29645: LD_VAR 0 8
29649: PPUSH
29650: LD_VAR 0 4
29654: PPUSH
29655: CALL_OW 380
// un := CreateHuman ;
29659: LD_ADDR_VAR 0 14
29663: PUSH
29664: CALL_OW 44
29668: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
29669: LD_ADDR_VAR 0 7
29673: PUSH
29674: LD_VAR 0 7
29678: PPUSH
29679: LD_INT 1
29681: PPUSH
29682: LD_VAR 0 14
29686: PPUSH
29687: CALL_OW 2
29691: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
29692: LD_VAR 0 14
29696: PPUSH
29697: LD_VAR 0 12
29701: PUSH
29702: LD_INT 1
29704: ARRAY
29705: PPUSH
29706: CALL_OW 52
// end ;
29710: GO 29349
29712: POP
29713: POP
// end ;
29714: GO 28651
29716: POP
29717: POP
// result := result ^ buildings ;
29718: LD_ADDR_VAR 0 7
29722: PUSH
29723: LD_VAR 0 7
29727: PUSH
29728: LD_VAR 0 18
29732: ADD
29733: ST_TO_ADDR
// end else
29734: GO 29877
// begin for i = 1 to personel do
29736: LD_ADDR_VAR 0 8
29740: PUSH
29741: DOUBLE
29742: LD_INT 1
29744: DEC
29745: ST_TO_ADDR
29746: LD_VAR 0 6
29750: PUSH
29751: FOR_TO
29752: IFFALSE 29875
// begin if i > 4 then
29754: LD_VAR 0 8
29758: PUSH
29759: LD_INT 4
29761: GREATER
29762: IFFALSE 29766
// break ;
29764: GO 29875
// x := personel [ i ] ;
29766: LD_ADDR_VAR 0 13
29770: PUSH
29771: LD_VAR 0 6
29775: PUSH
29776: LD_VAR 0 8
29780: ARRAY
29781: ST_TO_ADDR
// if x = - 1 then
29782: LD_VAR 0 13
29786: PUSH
29787: LD_INT 1
29789: NEG
29790: EQUAL
29791: IFFALSE 29795
// continue ;
29793: GO 29751
// PrepareHuman ( false , i , skill ) ;
29795: LD_INT 0
29797: PPUSH
29798: LD_VAR 0 8
29802: PPUSH
29803: LD_VAR 0 4
29807: PPUSH
29808: CALL_OW 380
// un := CreateHuman ;
29812: LD_ADDR_VAR 0 14
29816: PUSH
29817: CALL_OW 44
29821: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
29822: LD_VAR 0 14
29826: PPUSH
29827: LD_VAR 0 1
29831: PPUSH
29832: CALL_OW 250
29836: PPUSH
29837: LD_VAR 0 1
29841: PPUSH
29842: CALL_OW 251
29846: PPUSH
29847: LD_INT 10
29849: PPUSH
29850: LD_INT 0
29852: PPUSH
29853: CALL_OW 50
// result := result ^ un ;
29857: LD_ADDR_VAR 0 7
29861: PUSH
29862: LD_VAR 0 7
29866: PUSH
29867: LD_VAR 0 14
29871: ADD
29872: ST_TO_ADDR
// end ;
29873: GO 29751
29875: POP
29876: POP
// end ; end ;
29877: LD_VAR 0 7
29881: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
29882: LD_INT 0
29884: PPUSH
29885: PPUSH
29886: PPUSH
29887: PPUSH
29888: PPUSH
29889: PPUSH
29890: PPUSH
29891: PPUSH
29892: PPUSH
29893: PPUSH
29894: PPUSH
29895: PPUSH
29896: PPUSH
29897: PPUSH
29898: PPUSH
29899: PPUSH
// result := false ;
29900: LD_ADDR_VAR 0 3
29904: PUSH
29905: LD_INT 0
29907: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
29908: LD_VAR 0 1
29912: NOT
29913: PUSH
29914: LD_VAR 0 1
29918: PPUSH
29919: CALL_OW 266
29923: PUSH
29924: LD_INT 32
29926: PUSH
29927: LD_INT 33
29929: PUSH
29930: EMPTY
29931: LIST
29932: LIST
29933: IN
29934: NOT
29935: OR
29936: IFFALSE 29940
// exit ;
29938: GO 31049
// nat := GetNation ( tower ) ;
29940: LD_ADDR_VAR 0 12
29944: PUSH
29945: LD_VAR 0 1
29949: PPUSH
29950: CALL_OW 248
29954: ST_TO_ADDR
// side := GetSide ( tower ) ;
29955: LD_ADDR_VAR 0 16
29959: PUSH
29960: LD_VAR 0 1
29964: PPUSH
29965: CALL_OW 255
29969: ST_TO_ADDR
// x := GetX ( tower ) ;
29970: LD_ADDR_VAR 0 10
29974: PUSH
29975: LD_VAR 0 1
29979: PPUSH
29980: CALL_OW 250
29984: ST_TO_ADDR
// y := GetY ( tower ) ;
29985: LD_ADDR_VAR 0 11
29989: PUSH
29990: LD_VAR 0 1
29994: PPUSH
29995: CALL_OW 251
29999: ST_TO_ADDR
// if not x or not y then
30000: LD_VAR 0 10
30004: NOT
30005: PUSH
30006: LD_VAR 0 11
30010: NOT
30011: OR
30012: IFFALSE 30016
// exit ;
30014: GO 31049
// weapon := 0 ;
30016: LD_ADDR_VAR 0 18
30020: PUSH
30021: LD_INT 0
30023: ST_TO_ADDR
// fac_list := [ ] ;
30024: LD_ADDR_VAR 0 17
30028: PUSH
30029: EMPTY
30030: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
30031: LD_ADDR_VAR 0 6
30035: PUSH
30036: LD_VAR 0 1
30040: PPUSH
30041: CALL_OW 274
30045: PPUSH
30046: LD_VAR 0 2
30050: PPUSH
30051: LD_INT 0
30053: PPUSH
30054: CALL 27620 0 3
30058: PPUSH
30059: LD_INT 30
30061: PUSH
30062: LD_INT 3
30064: PUSH
30065: EMPTY
30066: LIST
30067: LIST
30068: PPUSH
30069: CALL_OW 72
30073: ST_TO_ADDR
// if not factories then
30074: LD_VAR 0 6
30078: NOT
30079: IFFALSE 30083
// exit ;
30081: GO 31049
// for i in factories do
30083: LD_ADDR_VAR 0 8
30087: PUSH
30088: LD_VAR 0 6
30092: PUSH
30093: FOR_IN
30094: IFFALSE 30119
// fac_list := fac_list union AvailableWeaponList ( i ) ;
30096: LD_ADDR_VAR 0 17
30100: PUSH
30101: LD_VAR 0 17
30105: PUSH
30106: LD_VAR 0 8
30110: PPUSH
30111: CALL_OW 478
30115: UNION
30116: ST_TO_ADDR
30117: GO 30093
30119: POP
30120: POP
// if not fac_list then
30121: LD_VAR 0 17
30125: NOT
30126: IFFALSE 30130
// exit ;
30128: GO 31049
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
30130: LD_ADDR_VAR 0 5
30134: PUSH
30135: LD_INT 4
30137: PUSH
30138: LD_INT 5
30140: PUSH
30141: LD_INT 9
30143: PUSH
30144: LD_INT 10
30146: PUSH
30147: LD_INT 6
30149: PUSH
30150: LD_INT 7
30152: PUSH
30153: LD_INT 11
30155: PUSH
30156: EMPTY
30157: LIST
30158: LIST
30159: LIST
30160: LIST
30161: LIST
30162: LIST
30163: LIST
30164: PUSH
30165: LD_INT 27
30167: PUSH
30168: LD_INT 28
30170: PUSH
30171: LD_INT 26
30173: PUSH
30174: LD_INT 30
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: LIST
30181: LIST
30182: PUSH
30183: LD_INT 43
30185: PUSH
30186: LD_INT 44
30188: PUSH
30189: LD_INT 46
30191: PUSH
30192: LD_INT 45
30194: PUSH
30195: LD_INT 47
30197: PUSH
30198: LD_INT 49
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: LIST
30205: LIST
30206: LIST
30207: LIST
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: LIST
30213: PUSH
30214: LD_VAR 0 12
30218: ARRAY
30219: ST_TO_ADDR
// list := list isect fac_list ;
30220: LD_ADDR_VAR 0 5
30224: PUSH
30225: LD_VAR 0 5
30229: PUSH
30230: LD_VAR 0 17
30234: ISECT
30235: ST_TO_ADDR
// if not list then
30236: LD_VAR 0 5
30240: NOT
30241: IFFALSE 30245
// exit ;
30243: GO 31049
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
30245: LD_VAR 0 12
30249: PUSH
30250: LD_INT 3
30252: EQUAL
30253: PUSH
30254: LD_INT 49
30256: PUSH
30257: LD_VAR 0 5
30261: IN
30262: AND
30263: PUSH
30264: LD_INT 31
30266: PPUSH
30267: LD_VAR 0 16
30271: PPUSH
30272: CALL_OW 321
30276: PUSH
30277: LD_INT 2
30279: EQUAL
30280: AND
30281: IFFALSE 30341
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
30283: LD_INT 22
30285: PUSH
30286: LD_VAR 0 16
30290: PUSH
30291: EMPTY
30292: LIST
30293: LIST
30294: PUSH
30295: LD_INT 35
30297: PUSH
30298: LD_INT 49
30300: PUSH
30301: EMPTY
30302: LIST
30303: LIST
30304: PUSH
30305: LD_INT 91
30307: PUSH
30308: LD_VAR 0 1
30312: PUSH
30313: LD_INT 10
30315: PUSH
30316: EMPTY
30317: LIST
30318: LIST
30319: LIST
30320: PUSH
30321: EMPTY
30322: LIST
30323: LIST
30324: LIST
30325: PPUSH
30326: CALL_OW 69
30330: NOT
30331: IFFALSE 30341
// weapon := ru_time_lapser ;
30333: LD_ADDR_VAR 0 18
30337: PUSH
30338: LD_INT 49
30340: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
30341: LD_VAR 0 12
30345: PUSH
30346: LD_INT 1
30348: PUSH
30349: LD_INT 2
30351: PUSH
30352: EMPTY
30353: LIST
30354: LIST
30355: IN
30356: PUSH
30357: LD_INT 11
30359: PUSH
30360: LD_VAR 0 5
30364: IN
30365: PUSH
30366: LD_INT 30
30368: PUSH
30369: LD_VAR 0 5
30373: IN
30374: OR
30375: AND
30376: PUSH
30377: LD_INT 6
30379: PPUSH
30380: LD_VAR 0 16
30384: PPUSH
30385: CALL_OW 321
30389: PUSH
30390: LD_INT 2
30392: EQUAL
30393: AND
30394: IFFALSE 30559
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
30396: LD_INT 22
30398: PUSH
30399: LD_VAR 0 16
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: PUSH
30408: LD_INT 2
30410: PUSH
30411: LD_INT 35
30413: PUSH
30414: LD_INT 11
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PUSH
30421: LD_INT 35
30423: PUSH
30424: LD_INT 30
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: LIST
30435: PUSH
30436: LD_INT 91
30438: PUSH
30439: LD_VAR 0 1
30443: PUSH
30444: LD_INT 18
30446: PUSH
30447: EMPTY
30448: LIST
30449: LIST
30450: LIST
30451: PUSH
30452: EMPTY
30453: LIST
30454: LIST
30455: LIST
30456: PPUSH
30457: CALL_OW 69
30461: NOT
30462: PUSH
30463: LD_INT 22
30465: PUSH
30466: LD_VAR 0 16
30470: PUSH
30471: EMPTY
30472: LIST
30473: LIST
30474: PUSH
30475: LD_INT 2
30477: PUSH
30478: LD_INT 30
30480: PUSH
30481: LD_INT 32
30483: PUSH
30484: EMPTY
30485: LIST
30486: LIST
30487: PUSH
30488: LD_INT 30
30490: PUSH
30491: LD_INT 33
30493: PUSH
30494: EMPTY
30495: LIST
30496: LIST
30497: PUSH
30498: EMPTY
30499: LIST
30500: LIST
30501: LIST
30502: PUSH
30503: LD_INT 91
30505: PUSH
30506: LD_VAR 0 1
30510: PUSH
30511: LD_INT 12
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: LIST
30518: PUSH
30519: EMPTY
30520: LIST
30521: LIST
30522: LIST
30523: PUSH
30524: EMPTY
30525: LIST
30526: PPUSH
30527: CALL_OW 69
30531: PUSH
30532: LD_INT 2
30534: GREATER
30535: AND
30536: IFFALSE 30559
// weapon := [ us_radar , ar_radar ] [ nat ] ;
30538: LD_ADDR_VAR 0 18
30542: PUSH
30543: LD_INT 11
30545: PUSH
30546: LD_INT 30
30548: PUSH
30549: EMPTY
30550: LIST
30551: LIST
30552: PUSH
30553: LD_VAR 0 12
30557: ARRAY
30558: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
30559: LD_VAR 0 18
30563: NOT
30564: PUSH
30565: LD_INT 40
30567: PPUSH
30568: LD_VAR 0 16
30572: PPUSH
30573: CALL_OW 321
30577: PUSH
30578: LD_INT 2
30580: EQUAL
30581: AND
30582: PUSH
30583: LD_INT 7
30585: PUSH
30586: LD_VAR 0 5
30590: IN
30591: PUSH
30592: LD_INT 28
30594: PUSH
30595: LD_VAR 0 5
30599: IN
30600: OR
30601: PUSH
30602: LD_INT 45
30604: PUSH
30605: LD_VAR 0 5
30609: IN
30610: OR
30611: AND
30612: IFFALSE 30866
// begin hex := GetHexInfo ( x , y ) ;
30614: LD_ADDR_VAR 0 4
30618: PUSH
30619: LD_VAR 0 10
30623: PPUSH
30624: LD_VAR 0 11
30628: PPUSH
30629: CALL_OW 546
30633: ST_TO_ADDR
// if hex [ 1 ] then
30634: LD_VAR 0 4
30638: PUSH
30639: LD_INT 1
30641: ARRAY
30642: IFFALSE 30646
// exit ;
30644: GO 31049
// height := hex [ 2 ] ;
30646: LD_ADDR_VAR 0 15
30650: PUSH
30651: LD_VAR 0 4
30655: PUSH
30656: LD_INT 2
30658: ARRAY
30659: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
30660: LD_ADDR_VAR 0 14
30664: PUSH
30665: LD_INT 0
30667: PUSH
30668: LD_INT 2
30670: PUSH
30671: LD_INT 3
30673: PUSH
30674: LD_INT 5
30676: PUSH
30677: EMPTY
30678: LIST
30679: LIST
30680: LIST
30681: LIST
30682: ST_TO_ADDR
// for i in tmp do
30683: LD_ADDR_VAR 0 8
30687: PUSH
30688: LD_VAR 0 14
30692: PUSH
30693: FOR_IN
30694: IFFALSE 30864
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
30696: LD_ADDR_VAR 0 9
30700: PUSH
30701: LD_VAR 0 10
30705: PPUSH
30706: LD_VAR 0 8
30710: PPUSH
30711: LD_INT 5
30713: PPUSH
30714: CALL_OW 272
30718: PUSH
30719: LD_VAR 0 11
30723: PPUSH
30724: LD_VAR 0 8
30728: PPUSH
30729: LD_INT 5
30731: PPUSH
30732: CALL_OW 273
30736: PUSH
30737: EMPTY
30738: LIST
30739: LIST
30740: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
30741: LD_VAR 0 9
30745: PUSH
30746: LD_INT 1
30748: ARRAY
30749: PPUSH
30750: LD_VAR 0 9
30754: PUSH
30755: LD_INT 2
30757: ARRAY
30758: PPUSH
30759: CALL_OW 488
30763: IFFALSE 30862
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
30765: LD_ADDR_VAR 0 4
30769: PUSH
30770: LD_VAR 0 9
30774: PUSH
30775: LD_INT 1
30777: ARRAY
30778: PPUSH
30779: LD_VAR 0 9
30783: PUSH
30784: LD_INT 2
30786: ARRAY
30787: PPUSH
30788: CALL_OW 546
30792: ST_TO_ADDR
// if hex [ 1 ] then
30793: LD_VAR 0 4
30797: PUSH
30798: LD_INT 1
30800: ARRAY
30801: IFFALSE 30805
// continue ;
30803: GO 30693
// h := hex [ 2 ] ;
30805: LD_ADDR_VAR 0 13
30809: PUSH
30810: LD_VAR 0 4
30814: PUSH
30815: LD_INT 2
30817: ARRAY
30818: ST_TO_ADDR
// if h + 7 < height then
30819: LD_VAR 0 13
30823: PUSH
30824: LD_INT 7
30826: PLUS
30827: PUSH
30828: LD_VAR 0 15
30832: LESS
30833: IFFALSE 30862
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
30835: LD_ADDR_VAR 0 18
30839: PUSH
30840: LD_INT 7
30842: PUSH
30843: LD_INT 28
30845: PUSH
30846: LD_INT 45
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: LIST
30853: PUSH
30854: LD_VAR 0 12
30858: ARRAY
30859: ST_TO_ADDR
// break ;
30860: GO 30864
// end ; end ; end ;
30862: GO 30693
30864: POP
30865: POP
// end ; if not weapon then
30866: LD_VAR 0 18
30870: NOT
30871: IFFALSE 30931
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
30873: LD_ADDR_VAR 0 5
30877: PUSH
30878: LD_VAR 0 5
30882: PUSH
30883: LD_INT 11
30885: PUSH
30886: LD_INT 30
30888: PUSH
30889: LD_INT 49
30891: PUSH
30892: EMPTY
30893: LIST
30894: LIST
30895: LIST
30896: DIFF
30897: ST_TO_ADDR
// if not list then
30898: LD_VAR 0 5
30902: NOT
30903: IFFALSE 30907
// exit ;
30905: GO 31049
// weapon := list [ rand ( 1 , list ) ] ;
30907: LD_ADDR_VAR 0 18
30911: PUSH
30912: LD_VAR 0 5
30916: PUSH
30917: LD_INT 1
30919: PPUSH
30920: LD_VAR 0 5
30924: PPUSH
30925: CALL_OW 12
30929: ARRAY
30930: ST_TO_ADDR
// end ; if weapon then
30931: LD_VAR 0 18
30935: IFFALSE 31049
// begin tmp := CostOfWeapon ( weapon ) ;
30937: LD_ADDR_VAR 0 14
30941: PUSH
30942: LD_VAR 0 18
30946: PPUSH
30947: CALL_OW 451
30951: ST_TO_ADDR
// j := GetBase ( tower ) ;
30952: LD_ADDR_VAR 0 9
30956: PUSH
30957: LD_VAR 0 1
30961: PPUSH
30962: CALL_OW 274
30966: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
30967: LD_VAR 0 9
30971: PPUSH
30972: LD_INT 1
30974: PPUSH
30975: CALL_OW 275
30979: PUSH
30980: LD_VAR 0 14
30984: PUSH
30985: LD_INT 1
30987: ARRAY
30988: GREATEREQUAL
30989: PUSH
30990: LD_VAR 0 9
30994: PPUSH
30995: LD_INT 2
30997: PPUSH
30998: CALL_OW 275
31002: PUSH
31003: LD_VAR 0 14
31007: PUSH
31008: LD_INT 2
31010: ARRAY
31011: GREATEREQUAL
31012: AND
31013: PUSH
31014: LD_VAR 0 9
31018: PPUSH
31019: LD_INT 3
31021: PPUSH
31022: CALL_OW 275
31026: PUSH
31027: LD_VAR 0 14
31031: PUSH
31032: LD_INT 3
31034: ARRAY
31035: GREATEREQUAL
31036: AND
31037: IFFALSE 31049
// result := weapon ;
31039: LD_ADDR_VAR 0 3
31043: PUSH
31044: LD_VAR 0 18
31048: ST_TO_ADDR
// end ; end ;
31049: LD_VAR 0 3
31053: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
31054: LD_INT 0
31056: PPUSH
31057: PPUSH
// result := true ;
31058: LD_ADDR_VAR 0 3
31062: PUSH
31063: LD_INT 1
31065: ST_TO_ADDR
// if array1 = array2 then
31066: LD_VAR 0 1
31070: PUSH
31071: LD_VAR 0 2
31075: EQUAL
31076: IFFALSE 31136
// begin for i = 1 to array1 do
31078: LD_ADDR_VAR 0 4
31082: PUSH
31083: DOUBLE
31084: LD_INT 1
31086: DEC
31087: ST_TO_ADDR
31088: LD_VAR 0 1
31092: PUSH
31093: FOR_TO
31094: IFFALSE 31132
// if array1 [ i ] <> array2 [ i ] then
31096: LD_VAR 0 1
31100: PUSH
31101: LD_VAR 0 4
31105: ARRAY
31106: PUSH
31107: LD_VAR 0 2
31111: PUSH
31112: LD_VAR 0 4
31116: ARRAY
31117: NONEQUAL
31118: IFFALSE 31130
// begin result := false ;
31120: LD_ADDR_VAR 0 3
31124: PUSH
31125: LD_INT 0
31127: ST_TO_ADDR
// break ;
31128: GO 31132
// end ;
31130: GO 31093
31132: POP
31133: POP
// end else
31134: GO 31144
// result := false ;
31136: LD_ADDR_VAR 0 3
31140: PUSH
31141: LD_INT 0
31143: ST_TO_ADDR
// end ;
31144: LD_VAR 0 3
31148: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
31149: LD_INT 0
31151: PPUSH
31152: PPUSH
// if not array1 or not array2 then
31153: LD_VAR 0 1
31157: NOT
31158: PUSH
31159: LD_VAR 0 2
31163: NOT
31164: OR
31165: IFFALSE 31169
// exit ;
31167: GO 31233
// result := true ;
31169: LD_ADDR_VAR 0 3
31173: PUSH
31174: LD_INT 1
31176: ST_TO_ADDR
// for i = 1 to array1 do
31177: LD_ADDR_VAR 0 4
31181: PUSH
31182: DOUBLE
31183: LD_INT 1
31185: DEC
31186: ST_TO_ADDR
31187: LD_VAR 0 1
31191: PUSH
31192: FOR_TO
31193: IFFALSE 31231
// if array1 [ i ] <> array2 [ i ] then
31195: LD_VAR 0 1
31199: PUSH
31200: LD_VAR 0 4
31204: ARRAY
31205: PUSH
31206: LD_VAR 0 2
31210: PUSH
31211: LD_VAR 0 4
31215: ARRAY
31216: NONEQUAL
31217: IFFALSE 31229
// begin result := false ;
31219: LD_ADDR_VAR 0 3
31223: PUSH
31224: LD_INT 0
31226: ST_TO_ADDR
// break ;
31227: GO 31231
// end ;
31229: GO 31192
31231: POP
31232: POP
// end ;
31233: LD_VAR 0 3
31237: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
31238: LD_INT 0
31240: PPUSH
31241: PPUSH
31242: PPUSH
// pom := GetBase ( fac ) ;
31243: LD_ADDR_VAR 0 5
31247: PUSH
31248: LD_VAR 0 1
31252: PPUSH
31253: CALL_OW 274
31257: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
31258: LD_ADDR_VAR 0 4
31262: PUSH
31263: LD_VAR 0 2
31267: PUSH
31268: LD_INT 1
31270: ARRAY
31271: PPUSH
31272: LD_VAR 0 2
31276: PUSH
31277: LD_INT 2
31279: ARRAY
31280: PPUSH
31281: LD_VAR 0 2
31285: PUSH
31286: LD_INT 3
31288: ARRAY
31289: PPUSH
31290: LD_VAR 0 2
31294: PUSH
31295: LD_INT 4
31297: ARRAY
31298: PPUSH
31299: CALL_OW 449
31303: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31304: LD_ADDR_VAR 0 3
31308: PUSH
31309: LD_VAR 0 5
31313: PPUSH
31314: LD_INT 1
31316: PPUSH
31317: CALL_OW 275
31321: PUSH
31322: LD_VAR 0 4
31326: PUSH
31327: LD_INT 1
31329: ARRAY
31330: GREATEREQUAL
31331: PUSH
31332: LD_VAR 0 5
31336: PPUSH
31337: LD_INT 2
31339: PPUSH
31340: CALL_OW 275
31344: PUSH
31345: LD_VAR 0 4
31349: PUSH
31350: LD_INT 2
31352: ARRAY
31353: GREATEREQUAL
31354: AND
31355: PUSH
31356: LD_VAR 0 5
31360: PPUSH
31361: LD_INT 3
31363: PPUSH
31364: CALL_OW 275
31368: PUSH
31369: LD_VAR 0 4
31373: PUSH
31374: LD_INT 3
31376: ARRAY
31377: GREATEREQUAL
31378: AND
31379: ST_TO_ADDR
// end ;
31380: LD_VAR 0 3
31384: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
31385: LD_INT 0
31387: PPUSH
31388: PPUSH
31389: PPUSH
31390: PPUSH
// pom := GetBase ( building ) ;
31391: LD_ADDR_VAR 0 3
31395: PUSH
31396: LD_VAR 0 1
31400: PPUSH
31401: CALL_OW 274
31405: ST_TO_ADDR
// if not pom then
31406: LD_VAR 0 3
31410: NOT
31411: IFFALSE 31415
// exit ;
31413: GO 31585
// btype := GetBType ( building ) ;
31415: LD_ADDR_VAR 0 5
31419: PUSH
31420: LD_VAR 0 1
31424: PPUSH
31425: CALL_OW 266
31429: ST_TO_ADDR
// if btype = b_armoury then
31430: LD_VAR 0 5
31434: PUSH
31435: LD_INT 4
31437: EQUAL
31438: IFFALSE 31448
// btype := b_barracks ;
31440: LD_ADDR_VAR 0 5
31444: PUSH
31445: LD_INT 5
31447: ST_TO_ADDR
// if btype = b_depot then
31448: LD_VAR 0 5
31452: PUSH
31453: LD_INT 0
31455: EQUAL
31456: IFFALSE 31466
// btype := b_warehouse ;
31458: LD_ADDR_VAR 0 5
31462: PUSH
31463: LD_INT 1
31465: ST_TO_ADDR
// if btype = b_workshop then
31466: LD_VAR 0 5
31470: PUSH
31471: LD_INT 2
31473: EQUAL
31474: IFFALSE 31484
// btype := b_factory ;
31476: LD_ADDR_VAR 0 5
31480: PUSH
31481: LD_INT 3
31483: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31484: LD_ADDR_VAR 0 4
31488: PUSH
31489: LD_VAR 0 5
31493: PPUSH
31494: LD_VAR 0 1
31498: PPUSH
31499: CALL_OW 248
31503: PPUSH
31504: CALL_OW 450
31508: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31509: LD_ADDR_VAR 0 2
31513: PUSH
31514: LD_VAR 0 3
31518: PPUSH
31519: LD_INT 1
31521: PPUSH
31522: CALL_OW 275
31526: PUSH
31527: LD_VAR 0 4
31531: PUSH
31532: LD_INT 1
31534: ARRAY
31535: GREATEREQUAL
31536: PUSH
31537: LD_VAR 0 3
31541: PPUSH
31542: LD_INT 2
31544: PPUSH
31545: CALL_OW 275
31549: PUSH
31550: LD_VAR 0 4
31554: PUSH
31555: LD_INT 2
31557: ARRAY
31558: GREATEREQUAL
31559: AND
31560: PUSH
31561: LD_VAR 0 3
31565: PPUSH
31566: LD_INT 3
31568: PPUSH
31569: CALL_OW 275
31573: PUSH
31574: LD_VAR 0 4
31578: PUSH
31579: LD_INT 3
31581: ARRAY
31582: GREATEREQUAL
31583: AND
31584: ST_TO_ADDR
// end ;
31585: LD_VAR 0 2
31589: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
31590: LD_INT 0
31592: PPUSH
31593: PPUSH
31594: PPUSH
// pom := GetBase ( building ) ;
31595: LD_ADDR_VAR 0 4
31599: PUSH
31600: LD_VAR 0 1
31604: PPUSH
31605: CALL_OW 274
31609: ST_TO_ADDR
// if not pom then
31610: LD_VAR 0 4
31614: NOT
31615: IFFALSE 31619
// exit ;
31617: GO 31720
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
31619: LD_ADDR_VAR 0 5
31623: PUSH
31624: LD_VAR 0 2
31628: PPUSH
31629: LD_VAR 0 1
31633: PPUSH
31634: CALL_OW 248
31638: PPUSH
31639: CALL_OW 450
31643: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
31644: LD_ADDR_VAR 0 3
31648: PUSH
31649: LD_VAR 0 4
31653: PPUSH
31654: LD_INT 1
31656: PPUSH
31657: CALL_OW 275
31661: PUSH
31662: LD_VAR 0 5
31666: PUSH
31667: LD_INT 1
31669: ARRAY
31670: GREATEREQUAL
31671: PUSH
31672: LD_VAR 0 4
31676: PPUSH
31677: LD_INT 2
31679: PPUSH
31680: CALL_OW 275
31684: PUSH
31685: LD_VAR 0 5
31689: PUSH
31690: LD_INT 2
31692: ARRAY
31693: GREATEREQUAL
31694: AND
31695: PUSH
31696: LD_VAR 0 4
31700: PPUSH
31701: LD_INT 3
31703: PPUSH
31704: CALL_OW 275
31708: PUSH
31709: LD_VAR 0 5
31713: PUSH
31714: LD_INT 3
31716: ARRAY
31717: GREATEREQUAL
31718: AND
31719: ST_TO_ADDR
// end ;
31720: LD_VAR 0 3
31724: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
31725: LD_INT 0
31727: PPUSH
31728: PPUSH
31729: PPUSH
31730: PPUSH
31731: PPUSH
31732: PPUSH
31733: PPUSH
31734: PPUSH
31735: PPUSH
31736: PPUSH
31737: PPUSH
// result := false ;
31738: LD_ADDR_VAR 0 8
31742: PUSH
31743: LD_INT 0
31745: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
31746: LD_VAR 0 5
31750: NOT
31751: PUSH
31752: LD_VAR 0 1
31756: NOT
31757: OR
31758: PUSH
31759: LD_VAR 0 2
31763: NOT
31764: OR
31765: PUSH
31766: LD_VAR 0 3
31770: NOT
31771: OR
31772: IFFALSE 31776
// exit ;
31774: GO 32590
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
31776: LD_ADDR_VAR 0 14
31780: PUSH
31781: LD_VAR 0 1
31785: PPUSH
31786: LD_VAR 0 2
31790: PPUSH
31791: LD_VAR 0 3
31795: PPUSH
31796: LD_VAR 0 4
31800: PPUSH
31801: LD_VAR 0 5
31805: PUSH
31806: LD_INT 1
31808: ARRAY
31809: PPUSH
31810: CALL_OW 248
31814: PPUSH
31815: LD_INT 0
31817: PPUSH
31818: CALL 33827 0 6
31822: ST_TO_ADDR
// if not hexes then
31823: LD_VAR 0 14
31827: NOT
31828: IFFALSE 31832
// exit ;
31830: GO 32590
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
31832: LD_ADDR_VAR 0 17
31836: PUSH
31837: LD_VAR 0 5
31841: PPUSH
31842: LD_INT 22
31844: PUSH
31845: LD_VAR 0 13
31849: PPUSH
31850: CALL_OW 255
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: PUSH
31859: LD_INT 2
31861: PUSH
31862: LD_INT 30
31864: PUSH
31865: LD_INT 0
31867: PUSH
31868: EMPTY
31869: LIST
31870: LIST
31871: PUSH
31872: LD_INT 30
31874: PUSH
31875: LD_INT 1
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: PUSH
31882: EMPTY
31883: LIST
31884: LIST
31885: LIST
31886: PUSH
31887: EMPTY
31888: LIST
31889: LIST
31890: PPUSH
31891: CALL_OW 72
31895: ST_TO_ADDR
// for i = 1 to hexes do
31896: LD_ADDR_VAR 0 9
31900: PUSH
31901: DOUBLE
31902: LD_INT 1
31904: DEC
31905: ST_TO_ADDR
31906: LD_VAR 0 14
31910: PUSH
31911: FOR_TO
31912: IFFALSE 32588
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
31914: LD_ADDR_VAR 0 13
31918: PUSH
31919: LD_VAR 0 14
31923: PUSH
31924: LD_VAR 0 9
31928: ARRAY
31929: PUSH
31930: LD_INT 1
31932: ARRAY
31933: PPUSH
31934: LD_VAR 0 14
31938: PUSH
31939: LD_VAR 0 9
31943: ARRAY
31944: PUSH
31945: LD_INT 2
31947: ARRAY
31948: PPUSH
31949: CALL_OW 428
31953: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
31954: LD_VAR 0 14
31958: PUSH
31959: LD_VAR 0 9
31963: ARRAY
31964: PUSH
31965: LD_INT 1
31967: ARRAY
31968: PPUSH
31969: LD_VAR 0 14
31973: PUSH
31974: LD_VAR 0 9
31978: ARRAY
31979: PUSH
31980: LD_INT 2
31982: ARRAY
31983: PPUSH
31984: CALL_OW 351
31988: PUSH
31989: LD_VAR 0 14
31993: PUSH
31994: LD_VAR 0 9
31998: ARRAY
31999: PUSH
32000: LD_INT 1
32002: ARRAY
32003: PPUSH
32004: LD_VAR 0 14
32008: PUSH
32009: LD_VAR 0 9
32013: ARRAY
32014: PUSH
32015: LD_INT 2
32017: ARRAY
32018: PPUSH
32019: CALL_OW 488
32023: NOT
32024: OR
32025: PUSH
32026: LD_VAR 0 13
32030: PPUSH
32031: CALL_OW 247
32035: PUSH
32036: LD_INT 3
32038: EQUAL
32039: OR
32040: IFFALSE 32046
// exit ;
32042: POP
32043: POP
32044: GO 32590
// if not tmp then
32046: LD_VAR 0 13
32050: NOT
32051: IFFALSE 32055
// continue ;
32053: GO 31911
// result := true ;
32055: LD_ADDR_VAR 0 8
32059: PUSH
32060: LD_INT 1
32062: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
32063: LD_VAR 0 6
32067: PUSH
32068: LD_VAR 0 13
32072: PPUSH
32073: CALL_OW 247
32077: PUSH
32078: LD_INT 2
32080: EQUAL
32081: AND
32082: PUSH
32083: LD_VAR 0 13
32087: PPUSH
32088: CALL_OW 263
32092: PUSH
32093: LD_INT 1
32095: EQUAL
32096: AND
32097: IFFALSE 32261
// begin if IsDrivenBy ( tmp ) then
32099: LD_VAR 0 13
32103: PPUSH
32104: CALL_OW 311
32108: IFFALSE 32112
// continue ;
32110: GO 31911
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
32112: LD_VAR 0 6
32116: PPUSH
32117: LD_INT 3
32119: PUSH
32120: LD_INT 60
32122: PUSH
32123: EMPTY
32124: LIST
32125: PUSH
32126: EMPTY
32127: LIST
32128: LIST
32129: PUSH
32130: LD_INT 3
32132: PUSH
32133: LD_INT 55
32135: PUSH
32136: EMPTY
32137: LIST
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: PUSH
32143: EMPTY
32144: LIST
32145: LIST
32146: PPUSH
32147: CALL_OW 72
32151: IFFALSE 32259
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
32153: LD_ADDR_VAR 0 18
32157: PUSH
32158: LD_VAR 0 6
32162: PPUSH
32163: LD_INT 3
32165: PUSH
32166: LD_INT 60
32168: PUSH
32169: EMPTY
32170: LIST
32171: PUSH
32172: EMPTY
32173: LIST
32174: LIST
32175: PUSH
32176: LD_INT 3
32178: PUSH
32179: LD_INT 55
32181: PUSH
32182: EMPTY
32183: LIST
32184: PUSH
32185: EMPTY
32186: LIST
32187: LIST
32188: PUSH
32189: EMPTY
32190: LIST
32191: LIST
32192: PPUSH
32193: CALL_OW 72
32197: PUSH
32198: LD_INT 1
32200: ARRAY
32201: ST_TO_ADDR
// if IsInUnit ( driver ) then
32202: LD_VAR 0 18
32206: PPUSH
32207: CALL_OW 310
32211: IFFALSE 32222
// ComExit ( driver ) ;
32213: LD_VAR 0 18
32217: PPUSH
32218: CALL 56955 0 1
// AddComEnterUnit ( driver , tmp ) ;
32222: LD_VAR 0 18
32226: PPUSH
32227: LD_VAR 0 13
32231: PPUSH
32232: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
32236: LD_VAR 0 18
32240: PPUSH
32241: LD_VAR 0 7
32245: PPUSH
32246: CALL_OW 173
// AddComExitVehicle ( driver ) ;
32250: LD_VAR 0 18
32254: PPUSH
32255: CALL_OW 181
// end ; continue ;
32259: GO 31911
// end ; if not cleaners or not tmp in cleaners then
32261: LD_VAR 0 6
32265: NOT
32266: PUSH
32267: LD_VAR 0 13
32271: PUSH
32272: LD_VAR 0 6
32276: IN
32277: NOT
32278: OR
32279: IFFALSE 32586
// begin if dep then
32281: LD_VAR 0 17
32285: IFFALSE 32421
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
32287: LD_ADDR_VAR 0 16
32291: PUSH
32292: LD_VAR 0 17
32296: PUSH
32297: LD_INT 1
32299: ARRAY
32300: PPUSH
32301: CALL_OW 250
32305: PPUSH
32306: LD_VAR 0 17
32310: PUSH
32311: LD_INT 1
32313: ARRAY
32314: PPUSH
32315: CALL_OW 254
32319: PPUSH
32320: LD_INT 5
32322: PPUSH
32323: CALL_OW 272
32327: PUSH
32328: LD_VAR 0 17
32332: PUSH
32333: LD_INT 1
32335: ARRAY
32336: PPUSH
32337: CALL_OW 251
32341: PPUSH
32342: LD_VAR 0 17
32346: PUSH
32347: LD_INT 1
32349: ARRAY
32350: PPUSH
32351: CALL_OW 254
32355: PPUSH
32356: LD_INT 5
32358: PPUSH
32359: CALL_OW 273
32363: PUSH
32364: EMPTY
32365: LIST
32366: LIST
32367: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
32368: LD_VAR 0 16
32372: PUSH
32373: LD_INT 1
32375: ARRAY
32376: PPUSH
32377: LD_VAR 0 16
32381: PUSH
32382: LD_INT 2
32384: ARRAY
32385: PPUSH
32386: CALL_OW 488
32390: IFFALSE 32421
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
32392: LD_VAR 0 13
32396: PPUSH
32397: LD_VAR 0 16
32401: PUSH
32402: LD_INT 1
32404: ARRAY
32405: PPUSH
32406: LD_VAR 0 16
32410: PUSH
32411: LD_INT 2
32413: ARRAY
32414: PPUSH
32415: CALL_OW 111
// continue ;
32419: GO 31911
// end ; end ; r := GetDir ( tmp ) ;
32421: LD_ADDR_VAR 0 15
32425: PUSH
32426: LD_VAR 0 13
32430: PPUSH
32431: CALL_OW 254
32435: ST_TO_ADDR
// if r = 5 then
32436: LD_VAR 0 15
32440: PUSH
32441: LD_INT 5
32443: EQUAL
32444: IFFALSE 32454
// r := 0 ;
32446: LD_ADDR_VAR 0 15
32450: PUSH
32451: LD_INT 0
32453: ST_TO_ADDR
// for j = r to 5 do
32454: LD_ADDR_VAR 0 10
32458: PUSH
32459: DOUBLE
32460: LD_VAR 0 15
32464: DEC
32465: ST_TO_ADDR
32466: LD_INT 5
32468: PUSH
32469: FOR_TO
32470: IFFALSE 32584
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
32472: LD_ADDR_VAR 0 11
32476: PUSH
32477: LD_VAR 0 13
32481: PPUSH
32482: CALL_OW 250
32486: PPUSH
32487: LD_VAR 0 10
32491: PPUSH
32492: LD_INT 2
32494: PPUSH
32495: CALL_OW 272
32499: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
32500: LD_ADDR_VAR 0 12
32504: PUSH
32505: LD_VAR 0 13
32509: PPUSH
32510: CALL_OW 251
32514: PPUSH
32515: LD_VAR 0 10
32519: PPUSH
32520: LD_INT 2
32522: PPUSH
32523: CALL_OW 273
32527: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
32528: LD_VAR 0 11
32532: PPUSH
32533: LD_VAR 0 12
32537: PPUSH
32538: CALL_OW 488
32542: PUSH
32543: LD_VAR 0 11
32547: PPUSH
32548: LD_VAR 0 12
32552: PPUSH
32553: CALL_OW 428
32557: NOT
32558: AND
32559: IFFALSE 32582
// begin ComMoveXY ( tmp , _x , _y ) ;
32561: LD_VAR 0 13
32565: PPUSH
32566: LD_VAR 0 11
32570: PPUSH
32571: LD_VAR 0 12
32575: PPUSH
32576: CALL_OW 111
// break ;
32580: GO 32584
// end ; end ;
32582: GO 32469
32584: POP
32585: POP
// end ; end ;
32586: GO 31911
32588: POP
32589: POP
// end ;
32590: LD_VAR 0 8
32594: RET
// export function BuildingTechInvented ( side , btype ) ; begin
32595: LD_INT 0
32597: PPUSH
// result := true ;
32598: LD_ADDR_VAR 0 3
32602: PUSH
32603: LD_INT 1
32605: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
32606: LD_VAR 0 2
32610: PUSH
32611: LD_INT 24
32613: DOUBLE
32614: EQUAL
32615: IFTRUE 32625
32617: LD_INT 33
32619: DOUBLE
32620: EQUAL
32621: IFTRUE 32625
32623: GO 32650
32625: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
32626: LD_ADDR_VAR 0 3
32630: PUSH
32631: LD_INT 32
32633: PPUSH
32634: LD_VAR 0 1
32638: PPUSH
32639: CALL_OW 321
32643: PUSH
32644: LD_INT 2
32646: EQUAL
32647: ST_TO_ADDR
32648: GO 32970
32650: LD_INT 20
32652: DOUBLE
32653: EQUAL
32654: IFTRUE 32658
32656: GO 32683
32658: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
32659: LD_ADDR_VAR 0 3
32663: PUSH
32664: LD_INT 6
32666: PPUSH
32667: LD_VAR 0 1
32671: PPUSH
32672: CALL_OW 321
32676: PUSH
32677: LD_INT 2
32679: EQUAL
32680: ST_TO_ADDR
32681: GO 32970
32683: LD_INT 22
32685: DOUBLE
32686: EQUAL
32687: IFTRUE 32697
32689: LD_INT 36
32691: DOUBLE
32692: EQUAL
32693: IFTRUE 32697
32695: GO 32722
32697: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
32698: LD_ADDR_VAR 0 3
32702: PUSH
32703: LD_INT 15
32705: PPUSH
32706: LD_VAR 0 1
32710: PPUSH
32711: CALL_OW 321
32715: PUSH
32716: LD_INT 2
32718: EQUAL
32719: ST_TO_ADDR
32720: GO 32970
32722: LD_INT 30
32724: DOUBLE
32725: EQUAL
32726: IFTRUE 32730
32728: GO 32755
32730: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
32731: LD_ADDR_VAR 0 3
32735: PUSH
32736: LD_INT 20
32738: PPUSH
32739: LD_VAR 0 1
32743: PPUSH
32744: CALL_OW 321
32748: PUSH
32749: LD_INT 2
32751: EQUAL
32752: ST_TO_ADDR
32753: GO 32970
32755: LD_INT 28
32757: DOUBLE
32758: EQUAL
32759: IFTRUE 32769
32761: LD_INT 21
32763: DOUBLE
32764: EQUAL
32765: IFTRUE 32769
32767: GO 32794
32769: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
32770: LD_ADDR_VAR 0 3
32774: PUSH
32775: LD_INT 21
32777: PPUSH
32778: LD_VAR 0 1
32782: PPUSH
32783: CALL_OW 321
32787: PUSH
32788: LD_INT 2
32790: EQUAL
32791: ST_TO_ADDR
32792: GO 32970
32794: LD_INT 16
32796: DOUBLE
32797: EQUAL
32798: IFTRUE 32802
32800: GO 32829
32802: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
32803: LD_ADDR_VAR 0 3
32807: PUSH
32808: LD_EXP 41
32812: PPUSH
32813: LD_VAR 0 1
32817: PPUSH
32818: CALL_OW 321
32822: PUSH
32823: LD_INT 2
32825: EQUAL
32826: ST_TO_ADDR
32827: GO 32970
32829: LD_INT 19
32831: DOUBLE
32832: EQUAL
32833: IFTRUE 32843
32835: LD_INT 23
32837: DOUBLE
32838: EQUAL
32839: IFTRUE 32843
32841: GO 32870
32843: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
32844: LD_ADDR_VAR 0 3
32848: PUSH
32849: LD_EXP 40
32853: PPUSH
32854: LD_VAR 0 1
32858: PPUSH
32859: CALL_OW 321
32863: PUSH
32864: LD_INT 2
32866: EQUAL
32867: ST_TO_ADDR
32868: GO 32970
32870: LD_INT 17
32872: DOUBLE
32873: EQUAL
32874: IFTRUE 32878
32876: GO 32903
32878: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
32879: LD_ADDR_VAR 0 3
32883: PUSH
32884: LD_INT 39
32886: PPUSH
32887: LD_VAR 0 1
32891: PPUSH
32892: CALL_OW 321
32896: PUSH
32897: LD_INT 2
32899: EQUAL
32900: ST_TO_ADDR
32901: GO 32970
32903: LD_INT 18
32905: DOUBLE
32906: EQUAL
32907: IFTRUE 32911
32909: GO 32936
32911: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
32912: LD_ADDR_VAR 0 3
32916: PUSH
32917: LD_INT 40
32919: PPUSH
32920: LD_VAR 0 1
32924: PPUSH
32925: CALL_OW 321
32929: PUSH
32930: LD_INT 2
32932: EQUAL
32933: ST_TO_ADDR
32934: GO 32970
32936: LD_INT 27
32938: DOUBLE
32939: EQUAL
32940: IFTRUE 32944
32942: GO 32969
32944: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
32945: LD_ADDR_VAR 0 3
32949: PUSH
32950: LD_INT 35
32952: PPUSH
32953: LD_VAR 0 1
32957: PPUSH
32958: CALL_OW 321
32962: PUSH
32963: LD_INT 2
32965: EQUAL
32966: ST_TO_ADDR
32967: GO 32970
32969: POP
// end ;
32970: LD_VAR 0 3
32974: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
32975: LD_INT 0
32977: PPUSH
32978: PPUSH
32979: PPUSH
32980: PPUSH
32981: PPUSH
32982: PPUSH
32983: PPUSH
32984: PPUSH
32985: PPUSH
32986: PPUSH
32987: PPUSH
// result := false ;
32988: LD_ADDR_VAR 0 6
32992: PUSH
32993: LD_INT 0
32995: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
32996: LD_VAR 0 1
33000: NOT
33001: PUSH
33002: LD_VAR 0 1
33006: PPUSH
33007: CALL_OW 266
33011: PUSH
33012: LD_INT 0
33014: PUSH
33015: LD_INT 1
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: IN
33022: NOT
33023: OR
33024: PUSH
33025: LD_VAR 0 2
33029: NOT
33030: OR
33031: PUSH
33032: LD_VAR 0 5
33036: PUSH
33037: LD_INT 0
33039: PUSH
33040: LD_INT 1
33042: PUSH
33043: LD_INT 2
33045: PUSH
33046: LD_INT 3
33048: PUSH
33049: LD_INT 4
33051: PUSH
33052: LD_INT 5
33054: PUSH
33055: EMPTY
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: IN
33063: NOT
33064: OR
33065: PUSH
33066: LD_VAR 0 3
33070: PPUSH
33071: LD_VAR 0 4
33075: PPUSH
33076: CALL_OW 488
33080: NOT
33081: OR
33082: IFFALSE 33086
// exit ;
33084: GO 33822
// side := GetSide ( depot ) ;
33086: LD_ADDR_VAR 0 9
33090: PUSH
33091: LD_VAR 0 1
33095: PPUSH
33096: CALL_OW 255
33100: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
33101: LD_VAR 0 9
33105: PPUSH
33106: LD_VAR 0 2
33110: PPUSH
33111: CALL 32595 0 2
33115: NOT
33116: IFFALSE 33120
// exit ;
33118: GO 33822
// pom := GetBase ( depot ) ;
33120: LD_ADDR_VAR 0 10
33124: PUSH
33125: LD_VAR 0 1
33129: PPUSH
33130: CALL_OW 274
33134: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
33135: LD_ADDR_VAR 0 11
33139: PUSH
33140: LD_VAR 0 2
33144: PPUSH
33145: LD_VAR 0 1
33149: PPUSH
33150: CALL_OW 248
33154: PPUSH
33155: CALL_OW 450
33159: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
33160: LD_VAR 0 10
33164: PPUSH
33165: LD_INT 1
33167: PPUSH
33168: CALL_OW 275
33172: PUSH
33173: LD_VAR 0 11
33177: PUSH
33178: LD_INT 1
33180: ARRAY
33181: GREATEREQUAL
33182: PUSH
33183: LD_VAR 0 10
33187: PPUSH
33188: LD_INT 2
33190: PPUSH
33191: CALL_OW 275
33195: PUSH
33196: LD_VAR 0 11
33200: PUSH
33201: LD_INT 2
33203: ARRAY
33204: GREATEREQUAL
33205: AND
33206: PUSH
33207: LD_VAR 0 10
33211: PPUSH
33212: LD_INT 3
33214: PPUSH
33215: CALL_OW 275
33219: PUSH
33220: LD_VAR 0 11
33224: PUSH
33225: LD_INT 3
33227: ARRAY
33228: GREATEREQUAL
33229: AND
33230: NOT
33231: IFFALSE 33235
// exit ;
33233: GO 33822
// if GetBType ( depot ) = b_depot then
33235: LD_VAR 0 1
33239: PPUSH
33240: CALL_OW 266
33244: PUSH
33245: LD_INT 0
33247: EQUAL
33248: IFFALSE 33260
// dist := 28 else
33250: LD_ADDR_VAR 0 14
33254: PUSH
33255: LD_INT 28
33257: ST_TO_ADDR
33258: GO 33268
// dist := 36 ;
33260: LD_ADDR_VAR 0 14
33264: PUSH
33265: LD_INT 36
33267: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
33268: LD_VAR 0 1
33272: PPUSH
33273: LD_VAR 0 3
33277: PPUSH
33278: LD_VAR 0 4
33282: PPUSH
33283: CALL_OW 297
33287: PUSH
33288: LD_VAR 0 14
33292: GREATER
33293: IFFALSE 33297
// exit ;
33295: GO 33822
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
33297: LD_ADDR_VAR 0 12
33301: PUSH
33302: LD_VAR 0 2
33306: PPUSH
33307: LD_VAR 0 3
33311: PPUSH
33312: LD_VAR 0 4
33316: PPUSH
33317: LD_VAR 0 5
33321: PPUSH
33322: LD_VAR 0 1
33326: PPUSH
33327: CALL_OW 248
33331: PPUSH
33332: LD_INT 0
33334: PPUSH
33335: CALL 33827 0 6
33339: ST_TO_ADDR
// if not hexes then
33340: LD_VAR 0 12
33344: NOT
33345: IFFALSE 33349
// exit ;
33347: GO 33822
// hex := GetHexInfo ( x , y ) ;
33349: LD_ADDR_VAR 0 15
33353: PUSH
33354: LD_VAR 0 3
33358: PPUSH
33359: LD_VAR 0 4
33363: PPUSH
33364: CALL_OW 546
33368: ST_TO_ADDR
// if hex [ 1 ] then
33369: LD_VAR 0 15
33373: PUSH
33374: LD_INT 1
33376: ARRAY
33377: IFFALSE 33381
// exit ;
33379: GO 33822
// height := hex [ 2 ] ;
33381: LD_ADDR_VAR 0 13
33385: PUSH
33386: LD_VAR 0 15
33390: PUSH
33391: LD_INT 2
33393: ARRAY
33394: ST_TO_ADDR
// for i = 1 to hexes do
33395: LD_ADDR_VAR 0 7
33399: PUSH
33400: DOUBLE
33401: LD_INT 1
33403: DEC
33404: ST_TO_ADDR
33405: LD_VAR 0 12
33409: PUSH
33410: FOR_TO
33411: IFFALSE 33741
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
33413: LD_VAR 0 12
33417: PUSH
33418: LD_VAR 0 7
33422: ARRAY
33423: PUSH
33424: LD_INT 1
33426: ARRAY
33427: PPUSH
33428: LD_VAR 0 12
33432: PUSH
33433: LD_VAR 0 7
33437: ARRAY
33438: PUSH
33439: LD_INT 2
33441: ARRAY
33442: PPUSH
33443: CALL_OW 488
33447: NOT
33448: PUSH
33449: LD_VAR 0 12
33453: PUSH
33454: LD_VAR 0 7
33458: ARRAY
33459: PUSH
33460: LD_INT 1
33462: ARRAY
33463: PPUSH
33464: LD_VAR 0 12
33468: PUSH
33469: LD_VAR 0 7
33473: ARRAY
33474: PUSH
33475: LD_INT 2
33477: ARRAY
33478: PPUSH
33479: CALL_OW 428
33483: PUSH
33484: LD_INT 0
33486: GREATER
33487: OR
33488: PUSH
33489: LD_VAR 0 12
33493: PUSH
33494: LD_VAR 0 7
33498: ARRAY
33499: PUSH
33500: LD_INT 1
33502: ARRAY
33503: PPUSH
33504: LD_VAR 0 12
33508: PUSH
33509: LD_VAR 0 7
33513: ARRAY
33514: PUSH
33515: LD_INT 2
33517: ARRAY
33518: PPUSH
33519: CALL_OW 351
33523: OR
33524: IFFALSE 33530
// exit ;
33526: POP
33527: POP
33528: GO 33822
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33530: LD_ADDR_VAR 0 8
33534: PUSH
33535: LD_VAR 0 12
33539: PUSH
33540: LD_VAR 0 7
33544: ARRAY
33545: PUSH
33546: LD_INT 1
33548: ARRAY
33549: PPUSH
33550: LD_VAR 0 12
33554: PUSH
33555: LD_VAR 0 7
33559: ARRAY
33560: PUSH
33561: LD_INT 2
33563: ARRAY
33564: PPUSH
33565: CALL_OW 546
33569: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
33570: LD_VAR 0 8
33574: PUSH
33575: LD_INT 1
33577: ARRAY
33578: PUSH
33579: LD_VAR 0 8
33583: PUSH
33584: LD_INT 2
33586: ARRAY
33587: PUSH
33588: LD_VAR 0 13
33592: PUSH
33593: LD_INT 2
33595: PLUS
33596: GREATER
33597: OR
33598: PUSH
33599: LD_VAR 0 8
33603: PUSH
33604: LD_INT 2
33606: ARRAY
33607: PUSH
33608: LD_VAR 0 13
33612: PUSH
33613: LD_INT 2
33615: MINUS
33616: LESS
33617: OR
33618: PUSH
33619: LD_VAR 0 8
33623: PUSH
33624: LD_INT 3
33626: ARRAY
33627: PUSH
33628: LD_INT 0
33630: PUSH
33631: LD_INT 8
33633: PUSH
33634: LD_INT 9
33636: PUSH
33637: LD_INT 10
33639: PUSH
33640: LD_INT 11
33642: PUSH
33643: LD_INT 12
33645: PUSH
33646: LD_INT 13
33648: PUSH
33649: LD_INT 16
33651: PUSH
33652: LD_INT 17
33654: PUSH
33655: LD_INT 18
33657: PUSH
33658: LD_INT 19
33660: PUSH
33661: LD_INT 20
33663: PUSH
33664: LD_INT 21
33666: PUSH
33667: EMPTY
33668: LIST
33669: LIST
33670: LIST
33671: LIST
33672: LIST
33673: LIST
33674: LIST
33675: LIST
33676: LIST
33677: LIST
33678: LIST
33679: LIST
33680: LIST
33681: IN
33682: NOT
33683: OR
33684: PUSH
33685: LD_VAR 0 8
33689: PUSH
33690: LD_INT 5
33692: ARRAY
33693: NOT
33694: OR
33695: PUSH
33696: LD_VAR 0 8
33700: PUSH
33701: LD_INT 6
33703: ARRAY
33704: PUSH
33705: LD_INT 1
33707: PUSH
33708: LD_INT 2
33710: PUSH
33711: LD_INT 7
33713: PUSH
33714: LD_INT 9
33716: PUSH
33717: LD_INT 10
33719: PUSH
33720: LD_INT 11
33722: PUSH
33723: EMPTY
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: IN
33731: NOT
33732: OR
33733: IFFALSE 33739
// exit ;
33735: POP
33736: POP
33737: GO 33822
// end ;
33739: GO 33410
33741: POP
33742: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
33743: LD_VAR 0 9
33747: PPUSH
33748: LD_VAR 0 3
33752: PPUSH
33753: LD_VAR 0 4
33757: PPUSH
33758: LD_INT 20
33760: PPUSH
33761: CALL 25768 0 4
33765: PUSH
33766: LD_INT 4
33768: ARRAY
33769: IFFALSE 33773
// exit ;
33771: GO 33822
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
33773: LD_VAR 0 2
33777: PUSH
33778: LD_INT 29
33780: PUSH
33781: LD_INT 30
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: IN
33788: PUSH
33789: LD_VAR 0 3
33793: PPUSH
33794: LD_VAR 0 4
33798: PPUSH
33799: LD_VAR 0 9
33803: PPUSH
33804: CALL_OW 440
33808: NOT
33809: AND
33810: IFFALSE 33814
// exit ;
33812: GO 33822
// result := true ;
33814: LD_ADDR_VAR 0 6
33818: PUSH
33819: LD_INT 1
33821: ST_TO_ADDR
// end ;
33822: LD_VAR 0 6
33826: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
33827: LD_INT 0
33829: PPUSH
33830: PPUSH
33831: PPUSH
33832: PPUSH
33833: PPUSH
33834: PPUSH
33835: PPUSH
33836: PPUSH
33837: PPUSH
33838: PPUSH
33839: PPUSH
33840: PPUSH
33841: PPUSH
33842: PPUSH
33843: PPUSH
33844: PPUSH
33845: PPUSH
33846: PPUSH
33847: PPUSH
33848: PPUSH
33849: PPUSH
33850: PPUSH
33851: PPUSH
33852: PPUSH
33853: PPUSH
33854: PPUSH
33855: PPUSH
33856: PPUSH
33857: PPUSH
33858: PPUSH
33859: PPUSH
33860: PPUSH
33861: PPUSH
33862: PPUSH
33863: PPUSH
33864: PPUSH
33865: PPUSH
33866: PPUSH
33867: PPUSH
33868: PPUSH
33869: PPUSH
33870: PPUSH
33871: PPUSH
33872: PPUSH
33873: PPUSH
33874: PPUSH
33875: PPUSH
33876: PPUSH
33877: PPUSH
33878: PPUSH
33879: PPUSH
33880: PPUSH
33881: PPUSH
33882: PPUSH
33883: PPUSH
33884: PPUSH
33885: PPUSH
33886: PPUSH
// result = [ ] ;
33887: LD_ADDR_VAR 0 7
33891: PUSH
33892: EMPTY
33893: ST_TO_ADDR
// temp_list = [ ] ;
33894: LD_ADDR_VAR 0 9
33898: PUSH
33899: EMPTY
33900: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
33901: LD_VAR 0 4
33905: PUSH
33906: LD_INT 0
33908: PUSH
33909: LD_INT 1
33911: PUSH
33912: LD_INT 2
33914: PUSH
33915: LD_INT 3
33917: PUSH
33918: LD_INT 4
33920: PUSH
33921: LD_INT 5
33923: PUSH
33924: EMPTY
33925: LIST
33926: LIST
33927: LIST
33928: LIST
33929: LIST
33930: LIST
33931: IN
33932: NOT
33933: PUSH
33934: LD_VAR 0 1
33938: PUSH
33939: LD_INT 0
33941: PUSH
33942: LD_INT 1
33944: PUSH
33945: EMPTY
33946: LIST
33947: LIST
33948: IN
33949: PUSH
33950: LD_VAR 0 5
33954: PUSH
33955: LD_INT 1
33957: PUSH
33958: LD_INT 2
33960: PUSH
33961: LD_INT 3
33963: PUSH
33964: EMPTY
33965: LIST
33966: LIST
33967: LIST
33968: IN
33969: NOT
33970: AND
33971: OR
33972: IFFALSE 33976
// exit ;
33974: GO 52367
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
33976: LD_VAR 0 1
33980: PUSH
33981: LD_INT 6
33983: PUSH
33984: LD_INT 7
33986: PUSH
33987: LD_INT 8
33989: PUSH
33990: LD_INT 13
33992: PUSH
33993: LD_INT 12
33995: PUSH
33996: LD_INT 15
33998: PUSH
33999: LD_INT 11
34001: PUSH
34002: LD_INT 14
34004: PUSH
34005: LD_INT 10
34007: PUSH
34008: EMPTY
34009: LIST
34010: LIST
34011: LIST
34012: LIST
34013: LIST
34014: LIST
34015: LIST
34016: LIST
34017: LIST
34018: IN
34019: IFFALSE 34029
// btype = b_lab ;
34021: LD_ADDR_VAR 0 1
34025: PUSH
34026: LD_INT 6
34028: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
34029: LD_VAR 0 6
34033: PUSH
34034: LD_INT 0
34036: PUSH
34037: LD_INT 1
34039: PUSH
34040: LD_INT 2
34042: PUSH
34043: EMPTY
34044: LIST
34045: LIST
34046: LIST
34047: IN
34048: NOT
34049: PUSH
34050: LD_VAR 0 1
34054: PUSH
34055: LD_INT 0
34057: PUSH
34058: LD_INT 1
34060: PUSH
34061: LD_INT 2
34063: PUSH
34064: LD_INT 3
34066: PUSH
34067: LD_INT 6
34069: PUSH
34070: LD_INT 36
34072: PUSH
34073: LD_INT 4
34075: PUSH
34076: LD_INT 5
34078: PUSH
34079: LD_INT 31
34081: PUSH
34082: LD_INT 32
34084: PUSH
34085: LD_INT 33
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: LIST
34092: LIST
34093: LIST
34094: LIST
34095: LIST
34096: LIST
34097: LIST
34098: LIST
34099: LIST
34100: IN
34101: NOT
34102: PUSH
34103: LD_VAR 0 6
34107: PUSH
34108: LD_INT 1
34110: EQUAL
34111: AND
34112: OR
34113: PUSH
34114: LD_VAR 0 1
34118: PUSH
34119: LD_INT 2
34121: PUSH
34122: LD_INT 3
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: IN
34129: NOT
34130: PUSH
34131: LD_VAR 0 6
34135: PUSH
34136: LD_INT 2
34138: EQUAL
34139: AND
34140: OR
34141: IFFALSE 34151
// mode = 0 ;
34143: LD_ADDR_VAR 0 6
34147: PUSH
34148: LD_INT 0
34150: ST_TO_ADDR
// case mode of 0 :
34151: LD_VAR 0 6
34155: PUSH
34156: LD_INT 0
34158: DOUBLE
34159: EQUAL
34160: IFTRUE 34164
34162: GO 45617
34164: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34165: LD_ADDR_VAR 0 11
34169: PUSH
34170: LD_INT 0
34172: PUSH
34173: LD_INT 0
34175: PUSH
34176: EMPTY
34177: LIST
34178: LIST
34179: PUSH
34180: LD_INT 0
34182: PUSH
34183: LD_INT 1
34185: NEG
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 1
34193: PUSH
34194: LD_INT 0
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: PUSH
34201: LD_INT 1
34203: PUSH
34204: LD_INT 1
34206: PUSH
34207: EMPTY
34208: LIST
34209: LIST
34210: PUSH
34211: LD_INT 0
34213: PUSH
34214: LD_INT 1
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: PUSH
34221: LD_INT 1
34223: NEG
34224: PUSH
34225: LD_INT 0
34227: PUSH
34228: EMPTY
34229: LIST
34230: LIST
34231: PUSH
34232: LD_INT 1
34234: NEG
34235: PUSH
34236: LD_INT 1
34238: NEG
34239: PUSH
34240: EMPTY
34241: LIST
34242: LIST
34243: PUSH
34244: LD_INT 1
34246: NEG
34247: PUSH
34248: LD_INT 2
34250: NEG
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: PUSH
34256: LD_INT 0
34258: PUSH
34259: LD_INT 2
34261: NEG
34262: PUSH
34263: EMPTY
34264: LIST
34265: LIST
34266: PUSH
34267: LD_INT 1
34269: PUSH
34270: LD_INT 1
34272: NEG
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: PUSH
34278: LD_INT 1
34280: PUSH
34281: LD_INT 2
34283: PUSH
34284: EMPTY
34285: LIST
34286: LIST
34287: PUSH
34288: LD_INT 0
34290: PUSH
34291: LD_INT 2
34293: PUSH
34294: EMPTY
34295: LIST
34296: LIST
34297: PUSH
34298: LD_INT 1
34300: NEG
34301: PUSH
34302: LD_INT 1
34304: PUSH
34305: EMPTY
34306: LIST
34307: LIST
34308: PUSH
34309: LD_INT 1
34311: PUSH
34312: LD_INT 3
34314: PUSH
34315: EMPTY
34316: LIST
34317: LIST
34318: PUSH
34319: LD_INT 0
34321: PUSH
34322: LD_INT 3
34324: PUSH
34325: EMPTY
34326: LIST
34327: LIST
34328: PUSH
34329: LD_INT 1
34331: NEG
34332: PUSH
34333: LD_INT 2
34335: PUSH
34336: EMPTY
34337: LIST
34338: LIST
34339: PUSH
34340: EMPTY
34341: LIST
34342: LIST
34343: LIST
34344: LIST
34345: LIST
34346: LIST
34347: LIST
34348: LIST
34349: LIST
34350: LIST
34351: LIST
34352: LIST
34353: LIST
34354: LIST
34355: LIST
34356: LIST
34357: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34358: LD_ADDR_VAR 0 12
34362: PUSH
34363: LD_INT 0
34365: PUSH
34366: LD_INT 0
34368: PUSH
34369: EMPTY
34370: LIST
34371: LIST
34372: PUSH
34373: LD_INT 0
34375: PUSH
34376: LD_INT 1
34378: NEG
34379: PUSH
34380: EMPTY
34381: LIST
34382: LIST
34383: PUSH
34384: LD_INT 1
34386: PUSH
34387: LD_INT 0
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: PUSH
34394: LD_INT 1
34396: PUSH
34397: LD_INT 1
34399: PUSH
34400: EMPTY
34401: LIST
34402: LIST
34403: PUSH
34404: LD_INT 0
34406: PUSH
34407: LD_INT 1
34409: PUSH
34410: EMPTY
34411: LIST
34412: LIST
34413: PUSH
34414: LD_INT 1
34416: NEG
34417: PUSH
34418: LD_INT 0
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: PUSH
34425: LD_INT 1
34427: NEG
34428: PUSH
34429: LD_INT 1
34431: NEG
34432: PUSH
34433: EMPTY
34434: LIST
34435: LIST
34436: PUSH
34437: LD_INT 1
34439: PUSH
34440: LD_INT 1
34442: NEG
34443: PUSH
34444: EMPTY
34445: LIST
34446: LIST
34447: PUSH
34448: LD_INT 2
34450: PUSH
34451: LD_INT 0
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: PUSH
34458: LD_INT 2
34460: PUSH
34461: LD_INT 1
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: PUSH
34468: LD_INT 1
34470: NEG
34471: PUSH
34472: LD_INT 1
34474: PUSH
34475: EMPTY
34476: LIST
34477: LIST
34478: PUSH
34479: LD_INT 2
34481: NEG
34482: PUSH
34483: LD_INT 0
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: PUSH
34490: LD_INT 2
34492: NEG
34493: PUSH
34494: LD_INT 1
34496: NEG
34497: PUSH
34498: EMPTY
34499: LIST
34500: LIST
34501: PUSH
34502: LD_INT 2
34504: NEG
34505: PUSH
34506: LD_INT 1
34508: PUSH
34509: EMPTY
34510: LIST
34511: LIST
34512: PUSH
34513: LD_INT 3
34515: NEG
34516: PUSH
34517: LD_INT 0
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: PUSH
34524: LD_INT 3
34526: NEG
34527: PUSH
34528: LD_INT 1
34530: NEG
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: LIST
34540: LIST
34541: LIST
34542: LIST
34543: LIST
34544: LIST
34545: LIST
34546: LIST
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: LIST
34552: LIST
34553: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34554: LD_ADDR_VAR 0 13
34558: PUSH
34559: LD_INT 0
34561: PUSH
34562: LD_INT 0
34564: PUSH
34565: EMPTY
34566: LIST
34567: LIST
34568: PUSH
34569: LD_INT 0
34571: PUSH
34572: LD_INT 1
34574: NEG
34575: PUSH
34576: EMPTY
34577: LIST
34578: LIST
34579: PUSH
34580: LD_INT 1
34582: PUSH
34583: LD_INT 0
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: PUSH
34590: LD_INT 1
34592: PUSH
34593: LD_INT 1
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PUSH
34600: LD_INT 0
34602: PUSH
34603: LD_INT 1
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: PUSH
34610: LD_INT 1
34612: NEG
34613: PUSH
34614: LD_INT 0
34616: PUSH
34617: EMPTY
34618: LIST
34619: LIST
34620: PUSH
34621: LD_INT 1
34623: NEG
34624: PUSH
34625: LD_INT 1
34627: NEG
34628: PUSH
34629: EMPTY
34630: LIST
34631: LIST
34632: PUSH
34633: LD_INT 1
34635: NEG
34636: PUSH
34637: LD_INT 2
34639: NEG
34640: PUSH
34641: EMPTY
34642: LIST
34643: LIST
34644: PUSH
34645: LD_INT 2
34647: PUSH
34648: LD_INT 1
34650: PUSH
34651: EMPTY
34652: LIST
34653: LIST
34654: PUSH
34655: LD_INT 2
34657: PUSH
34658: LD_INT 2
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: PUSH
34665: LD_INT 1
34667: PUSH
34668: LD_INT 2
34670: PUSH
34671: EMPTY
34672: LIST
34673: LIST
34674: PUSH
34675: LD_INT 2
34677: NEG
34678: PUSH
34679: LD_INT 1
34681: NEG
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PUSH
34687: LD_INT 2
34689: NEG
34690: PUSH
34691: LD_INT 2
34693: NEG
34694: PUSH
34695: EMPTY
34696: LIST
34697: LIST
34698: PUSH
34699: LD_INT 2
34701: NEG
34702: PUSH
34703: LD_INT 3
34705: NEG
34706: PUSH
34707: EMPTY
34708: LIST
34709: LIST
34710: PUSH
34711: LD_INT 3
34713: NEG
34714: PUSH
34715: LD_INT 2
34717: NEG
34718: PUSH
34719: EMPTY
34720: LIST
34721: LIST
34722: PUSH
34723: LD_INT 3
34725: NEG
34726: PUSH
34727: LD_INT 3
34729: NEG
34730: PUSH
34731: EMPTY
34732: LIST
34733: LIST
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: LIST
34752: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
34753: LD_ADDR_VAR 0 14
34757: PUSH
34758: LD_INT 0
34760: PUSH
34761: LD_INT 0
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: PUSH
34768: LD_INT 0
34770: PUSH
34771: LD_INT 1
34773: NEG
34774: PUSH
34775: EMPTY
34776: LIST
34777: LIST
34778: PUSH
34779: LD_INT 1
34781: PUSH
34782: LD_INT 0
34784: PUSH
34785: EMPTY
34786: LIST
34787: LIST
34788: PUSH
34789: LD_INT 1
34791: PUSH
34792: LD_INT 1
34794: PUSH
34795: EMPTY
34796: LIST
34797: LIST
34798: PUSH
34799: LD_INT 0
34801: PUSH
34802: LD_INT 1
34804: PUSH
34805: EMPTY
34806: LIST
34807: LIST
34808: PUSH
34809: LD_INT 1
34811: NEG
34812: PUSH
34813: LD_INT 0
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: PUSH
34820: LD_INT 1
34822: NEG
34823: PUSH
34824: LD_INT 1
34826: NEG
34827: PUSH
34828: EMPTY
34829: LIST
34830: LIST
34831: PUSH
34832: LD_INT 1
34834: NEG
34835: PUSH
34836: LD_INT 2
34838: NEG
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: PUSH
34844: LD_INT 0
34846: PUSH
34847: LD_INT 2
34849: NEG
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: PUSH
34855: LD_INT 1
34857: PUSH
34858: LD_INT 1
34860: NEG
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: PUSH
34866: LD_INT 1
34868: PUSH
34869: LD_INT 2
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: PUSH
34876: LD_INT 0
34878: PUSH
34879: LD_INT 2
34881: PUSH
34882: EMPTY
34883: LIST
34884: LIST
34885: PUSH
34886: LD_INT 1
34888: NEG
34889: PUSH
34890: LD_INT 1
34892: PUSH
34893: EMPTY
34894: LIST
34895: LIST
34896: PUSH
34897: LD_INT 1
34899: NEG
34900: PUSH
34901: LD_INT 3
34903: NEG
34904: PUSH
34905: EMPTY
34906: LIST
34907: LIST
34908: PUSH
34909: LD_INT 0
34911: PUSH
34912: LD_INT 3
34914: NEG
34915: PUSH
34916: EMPTY
34917: LIST
34918: LIST
34919: PUSH
34920: LD_INT 1
34922: PUSH
34923: LD_INT 2
34925: NEG
34926: PUSH
34927: EMPTY
34928: LIST
34929: LIST
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: LIST
34946: LIST
34947: LIST
34948: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
34949: LD_ADDR_VAR 0 15
34953: PUSH
34954: LD_INT 0
34956: PUSH
34957: LD_INT 0
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: PUSH
34964: LD_INT 0
34966: PUSH
34967: LD_INT 1
34969: NEG
34970: PUSH
34971: EMPTY
34972: LIST
34973: LIST
34974: PUSH
34975: LD_INT 1
34977: PUSH
34978: LD_INT 0
34980: PUSH
34981: EMPTY
34982: LIST
34983: LIST
34984: PUSH
34985: LD_INT 1
34987: PUSH
34988: LD_INT 1
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 0
34997: PUSH
34998: LD_INT 1
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: PUSH
35005: LD_INT 1
35007: NEG
35008: PUSH
35009: LD_INT 0
35011: PUSH
35012: EMPTY
35013: LIST
35014: LIST
35015: PUSH
35016: LD_INT 1
35018: NEG
35019: PUSH
35020: LD_INT 1
35022: NEG
35023: PUSH
35024: EMPTY
35025: LIST
35026: LIST
35027: PUSH
35028: LD_INT 1
35030: PUSH
35031: LD_INT 1
35033: NEG
35034: PUSH
35035: EMPTY
35036: LIST
35037: LIST
35038: PUSH
35039: LD_INT 2
35041: PUSH
35042: LD_INT 0
35044: PUSH
35045: EMPTY
35046: LIST
35047: LIST
35048: PUSH
35049: LD_INT 2
35051: PUSH
35052: LD_INT 1
35054: PUSH
35055: EMPTY
35056: LIST
35057: LIST
35058: PUSH
35059: LD_INT 1
35061: NEG
35062: PUSH
35063: LD_INT 1
35065: PUSH
35066: EMPTY
35067: LIST
35068: LIST
35069: PUSH
35070: LD_INT 2
35072: NEG
35073: PUSH
35074: LD_INT 0
35076: PUSH
35077: EMPTY
35078: LIST
35079: LIST
35080: PUSH
35081: LD_INT 2
35083: NEG
35084: PUSH
35085: LD_INT 1
35087: NEG
35088: PUSH
35089: EMPTY
35090: LIST
35091: LIST
35092: PUSH
35093: LD_INT 2
35095: PUSH
35096: LD_INT 1
35098: NEG
35099: PUSH
35100: EMPTY
35101: LIST
35102: LIST
35103: PUSH
35104: LD_INT 3
35106: PUSH
35107: LD_INT 0
35109: PUSH
35110: EMPTY
35111: LIST
35112: LIST
35113: PUSH
35114: LD_INT 3
35116: PUSH
35117: LD_INT 1
35119: PUSH
35120: EMPTY
35121: LIST
35122: LIST
35123: PUSH
35124: EMPTY
35125: LIST
35126: LIST
35127: LIST
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: LIST
35135: LIST
35136: LIST
35137: LIST
35138: LIST
35139: LIST
35140: LIST
35141: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35142: LD_ADDR_VAR 0 16
35146: PUSH
35147: LD_INT 0
35149: PUSH
35150: LD_INT 0
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: PUSH
35157: LD_INT 0
35159: PUSH
35160: LD_INT 1
35162: NEG
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: PUSH
35168: LD_INT 1
35170: PUSH
35171: LD_INT 0
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: PUSH
35178: LD_INT 1
35180: PUSH
35181: LD_INT 1
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: PUSH
35188: LD_INT 0
35190: PUSH
35191: LD_INT 1
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: PUSH
35198: LD_INT 1
35200: NEG
35201: PUSH
35202: LD_INT 0
35204: PUSH
35205: EMPTY
35206: LIST
35207: LIST
35208: PUSH
35209: LD_INT 1
35211: NEG
35212: PUSH
35213: LD_INT 1
35215: NEG
35216: PUSH
35217: EMPTY
35218: LIST
35219: LIST
35220: PUSH
35221: LD_INT 1
35223: NEG
35224: PUSH
35225: LD_INT 2
35227: NEG
35228: PUSH
35229: EMPTY
35230: LIST
35231: LIST
35232: PUSH
35233: LD_INT 2
35235: PUSH
35236: LD_INT 1
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: PUSH
35243: LD_INT 2
35245: PUSH
35246: LD_INT 2
35248: PUSH
35249: EMPTY
35250: LIST
35251: LIST
35252: PUSH
35253: LD_INT 1
35255: PUSH
35256: LD_INT 2
35258: PUSH
35259: EMPTY
35260: LIST
35261: LIST
35262: PUSH
35263: LD_INT 2
35265: NEG
35266: PUSH
35267: LD_INT 1
35269: NEG
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: PUSH
35275: LD_INT 2
35277: NEG
35278: PUSH
35279: LD_INT 2
35281: NEG
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: PUSH
35287: LD_INT 3
35289: PUSH
35290: LD_INT 2
35292: PUSH
35293: EMPTY
35294: LIST
35295: LIST
35296: PUSH
35297: LD_INT 3
35299: PUSH
35300: LD_INT 3
35302: PUSH
35303: EMPTY
35304: LIST
35305: LIST
35306: PUSH
35307: LD_INT 2
35309: PUSH
35310: LD_INT 3
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: LIST
35321: LIST
35322: LIST
35323: LIST
35324: LIST
35325: LIST
35326: LIST
35327: LIST
35328: LIST
35329: LIST
35330: LIST
35331: LIST
35332: LIST
35333: LIST
35334: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35335: LD_ADDR_VAR 0 17
35339: PUSH
35340: LD_INT 0
35342: PUSH
35343: LD_INT 0
35345: PUSH
35346: EMPTY
35347: LIST
35348: LIST
35349: PUSH
35350: LD_INT 0
35352: PUSH
35353: LD_INT 1
35355: NEG
35356: PUSH
35357: EMPTY
35358: LIST
35359: LIST
35360: PUSH
35361: LD_INT 1
35363: PUSH
35364: LD_INT 0
35366: PUSH
35367: EMPTY
35368: LIST
35369: LIST
35370: PUSH
35371: LD_INT 1
35373: PUSH
35374: LD_INT 1
35376: PUSH
35377: EMPTY
35378: LIST
35379: LIST
35380: PUSH
35381: LD_INT 0
35383: PUSH
35384: LD_INT 1
35386: PUSH
35387: EMPTY
35388: LIST
35389: LIST
35390: PUSH
35391: LD_INT 1
35393: NEG
35394: PUSH
35395: LD_INT 0
35397: PUSH
35398: EMPTY
35399: LIST
35400: LIST
35401: PUSH
35402: LD_INT 1
35404: NEG
35405: PUSH
35406: LD_INT 1
35408: NEG
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: PUSH
35414: LD_INT 1
35416: NEG
35417: PUSH
35418: LD_INT 2
35420: NEG
35421: PUSH
35422: EMPTY
35423: LIST
35424: LIST
35425: PUSH
35426: LD_INT 0
35428: PUSH
35429: LD_INT 2
35431: NEG
35432: PUSH
35433: EMPTY
35434: LIST
35435: LIST
35436: PUSH
35437: LD_INT 1
35439: PUSH
35440: LD_INT 1
35442: NEG
35443: PUSH
35444: EMPTY
35445: LIST
35446: LIST
35447: PUSH
35448: LD_INT 2
35450: PUSH
35451: LD_INT 0
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: PUSH
35458: LD_INT 2
35460: PUSH
35461: LD_INT 1
35463: PUSH
35464: EMPTY
35465: LIST
35466: LIST
35467: PUSH
35468: LD_INT 2
35470: PUSH
35471: LD_INT 2
35473: PUSH
35474: EMPTY
35475: LIST
35476: LIST
35477: PUSH
35478: LD_INT 1
35480: PUSH
35481: LD_INT 2
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: PUSH
35488: LD_INT 0
35490: PUSH
35491: LD_INT 2
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: PUSH
35498: LD_INT 1
35500: NEG
35501: PUSH
35502: LD_INT 1
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PUSH
35509: LD_INT 2
35511: NEG
35512: PUSH
35513: LD_INT 0
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: LD_INT 2
35522: NEG
35523: PUSH
35524: LD_INT 1
35526: NEG
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: PUSH
35532: LD_INT 2
35534: NEG
35535: PUSH
35536: LD_INT 2
35538: NEG
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: LIST
35548: LIST
35549: LIST
35550: LIST
35551: LIST
35552: LIST
35553: LIST
35554: LIST
35555: LIST
35556: LIST
35557: LIST
35558: LIST
35559: LIST
35560: LIST
35561: LIST
35562: LIST
35563: LIST
35564: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35565: LD_ADDR_VAR 0 18
35569: PUSH
35570: LD_INT 0
35572: PUSH
35573: LD_INT 0
35575: PUSH
35576: EMPTY
35577: LIST
35578: LIST
35579: PUSH
35580: LD_INT 0
35582: PUSH
35583: LD_INT 1
35585: NEG
35586: PUSH
35587: EMPTY
35588: LIST
35589: LIST
35590: PUSH
35591: LD_INT 1
35593: PUSH
35594: LD_INT 0
35596: PUSH
35597: EMPTY
35598: LIST
35599: LIST
35600: PUSH
35601: LD_INT 1
35603: PUSH
35604: LD_INT 1
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: PUSH
35611: LD_INT 0
35613: PUSH
35614: LD_INT 1
35616: PUSH
35617: EMPTY
35618: LIST
35619: LIST
35620: PUSH
35621: LD_INT 1
35623: NEG
35624: PUSH
35625: LD_INT 0
35627: PUSH
35628: EMPTY
35629: LIST
35630: LIST
35631: PUSH
35632: LD_INT 1
35634: NEG
35635: PUSH
35636: LD_INT 1
35638: NEG
35639: PUSH
35640: EMPTY
35641: LIST
35642: LIST
35643: PUSH
35644: LD_INT 1
35646: NEG
35647: PUSH
35648: LD_INT 2
35650: NEG
35651: PUSH
35652: EMPTY
35653: LIST
35654: LIST
35655: PUSH
35656: LD_INT 0
35658: PUSH
35659: LD_INT 2
35661: NEG
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: PUSH
35667: LD_INT 1
35669: PUSH
35670: LD_INT 1
35672: NEG
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: PUSH
35678: LD_INT 2
35680: PUSH
35681: LD_INT 0
35683: PUSH
35684: EMPTY
35685: LIST
35686: LIST
35687: PUSH
35688: LD_INT 2
35690: PUSH
35691: LD_INT 1
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: PUSH
35698: LD_INT 2
35700: PUSH
35701: LD_INT 2
35703: PUSH
35704: EMPTY
35705: LIST
35706: LIST
35707: PUSH
35708: LD_INT 1
35710: PUSH
35711: LD_INT 2
35713: PUSH
35714: EMPTY
35715: LIST
35716: LIST
35717: PUSH
35718: LD_INT 0
35720: PUSH
35721: LD_INT 2
35723: PUSH
35724: EMPTY
35725: LIST
35726: LIST
35727: PUSH
35728: LD_INT 1
35730: NEG
35731: PUSH
35732: LD_INT 1
35734: PUSH
35735: EMPTY
35736: LIST
35737: LIST
35738: PUSH
35739: LD_INT 2
35741: NEG
35742: PUSH
35743: LD_INT 0
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: PUSH
35750: LD_INT 2
35752: NEG
35753: PUSH
35754: LD_INT 1
35756: NEG
35757: PUSH
35758: EMPTY
35759: LIST
35760: LIST
35761: PUSH
35762: LD_INT 2
35764: NEG
35765: PUSH
35766: LD_INT 2
35768: NEG
35769: PUSH
35770: EMPTY
35771: LIST
35772: LIST
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: LIST
35778: LIST
35779: LIST
35780: LIST
35781: LIST
35782: LIST
35783: LIST
35784: LIST
35785: LIST
35786: LIST
35787: LIST
35788: LIST
35789: LIST
35790: LIST
35791: LIST
35792: LIST
35793: LIST
35794: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35795: LD_ADDR_VAR 0 19
35799: PUSH
35800: LD_INT 0
35802: PUSH
35803: LD_INT 0
35805: PUSH
35806: EMPTY
35807: LIST
35808: LIST
35809: PUSH
35810: LD_INT 0
35812: PUSH
35813: LD_INT 1
35815: NEG
35816: PUSH
35817: EMPTY
35818: LIST
35819: LIST
35820: PUSH
35821: LD_INT 1
35823: PUSH
35824: LD_INT 0
35826: PUSH
35827: EMPTY
35828: LIST
35829: LIST
35830: PUSH
35831: LD_INT 1
35833: PUSH
35834: LD_INT 1
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: PUSH
35841: LD_INT 0
35843: PUSH
35844: LD_INT 1
35846: PUSH
35847: EMPTY
35848: LIST
35849: LIST
35850: PUSH
35851: LD_INT 1
35853: NEG
35854: PUSH
35855: LD_INT 0
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: PUSH
35862: LD_INT 1
35864: NEG
35865: PUSH
35866: LD_INT 1
35868: NEG
35869: PUSH
35870: EMPTY
35871: LIST
35872: LIST
35873: PUSH
35874: LD_INT 1
35876: NEG
35877: PUSH
35878: LD_INT 2
35880: NEG
35881: PUSH
35882: EMPTY
35883: LIST
35884: LIST
35885: PUSH
35886: LD_INT 0
35888: PUSH
35889: LD_INT 2
35891: NEG
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: LD_INT 1
35899: PUSH
35900: LD_INT 1
35902: NEG
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: LD_INT 2
35910: PUSH
35911: LD_INT 0
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: PUSH
35918: LD_INT 2
35920: PUSH
35921: LD_INT 1
35923: PUSH
35924: EMPTY
35925: LIST
35926: LIST
35927: PUSH
35928: LD_INT 2
35930: PUSH
35931: LD_INT 2
35933: PUSH
35934: EMPTY
35935: LIST
35936: LIST
35937: PUSH
35938: LD_INT 1
35940: PUSH
35941: LD_INT 2
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: LD_INT 0
35950: PUSH
35951: LD_INT 2
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: PUSH
35958: LD_INT 1
35960: NEG
35961: PUSH
35962: LD_INT 1
35964: PUSH
35965: EMPTY
35966: LIST
35967: LIST
35968: PUSH
35969: LD_INT 2
35971: NEG
35972: PUSH
35973: LD_INT 0
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: PUSH
35980: LD_INT 2
35982: NEG
35983: PUSH
35984: LD_INT 1
35986: NEG
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: PUSH
35992: LD_INT 2
35994: NEG
35995: PUSH
35996: LD_INT 2
35998: NEG
35999: PUSH
36000: EMPTY
36001: LIST
36002: LIST
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: LIST
36008: LIST
36009: LIST
36010: LIST
36011: LIST
36012: LIST
36013: LIST
36014: LIST
36015: LIST
36016: LIST
36017: LIST
36018: LIST
36019: LIST
36020: LIST
36021: LIST
36022: LIST
36023: LIST
36024: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36025: LD_ADDR_VAR 0 20
36029: PUSH
36030: LD_INT 0
36032: PUSH
36033: LD_INT 0
36035: PUSH
36036: EMPTY
36037: LIST
36038: LIST
36039: PUSH
36040: LD_INT 0
36042: PUSH
36043: LD_INT 1
36045: NEG
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: PUSH
36051: LD_INT 1
36053: PUSH
36054: LD_INT 0
36056: PUSH
36057: EMPTY
36058: LIST
36059: LIST
36060: PUSH
36061: LD_INT 1
36063: PUSH
36064: LD_INT 1
36066: PUSH
36067: EMPTY
36068: LIST
36069: LIST
36070: PUSH
36071: LD_INT 0
36073: PUSH
36074: LD_INT 1
36076: PUSH
36077: EMPTY
36078: LIST
36079: LIST
36080: PUSH
36081: LD_INT 1
36083: NEG
36084: PUSH
36085: LD_INT 0
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: PUSH
36092: LD_INT 1
36094: NEG
36095: PUSH
36096: LD_INT 1
36098: NEG
36099: PUSH
36100: EMPTY
36101: LIST
36102: LIST
36103: PUSH
36104: LD_INT 1
36106: NEG
36107: PUSH
36108: LD_INT 2
36110: NEG
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: PUSH
36116: LD_INT 0
36118: PUSH
36119: LD_INT 2
36121: NEG
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: PUSH
36127: LD_INT 1
36129: PUSH
36130: LD_INT 1
36132: NEG
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: PUSH
36138: LD_INT 2
36140: PUSH
36141: LD_INT 0
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: PUSH
36148: LD_INT 2
36150: PUSH
36151: LD_INT 1
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: PUSH
36158: LD_INT 2
36160: PUSH
36161: LD_INT 2
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PUSH
36168: LD_INT 1
36170: PUSH
36171: LD_INT 2
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: PUSH
36178: LD_INT 0
36180: PUSH
36181: LD_INT 2
36183: PUSH
36184: EMPTY
36185: LIST
36186: LIST
36187: PUSH
36188: LD_INT 1
36190: NEG
36191: PUSH
36192: LD_INT 1
36194: PUSH
36195: EMPTY
36196: LIST
36197: LIST
36198: PUSH
36199: LD_INT 2
36201: NEG
36202: PUSH
36203: LD_INT 0
36205: PUSH
36206: EMPTY
36207: LIST
36208: LIST
36209: PUSH
36210: LD_INT 2
36212: NEG
36213: PUSH
36214: LD_INT 1
36216: NEG
36217: PUSH
36218: EMPTY
36219: LIST
36220: LIST
36221: PUSH
36222: LD_INT 2
36224: NEG
36225: PUSH
36226: LD_INT 2
36228: NEG
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: LIST
36242: LIST
36243: LIST
36244: LIST
36245: LIST
36246: LIST
36247: LIST
36248: LIST
36249: LIST
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36255: LD_ADDR_VAR 0 21
36259: PUSH
36260: LD_INT 0
36262: PUSH
36263: LD_INT 0
36265: PUSH
36266: EMPTY
36267: LIST
36268: LIST
36269: PUSH
36270: LD_INT 0
36272: PUSH
36273: LD_INT 1
36275: NEG
36276: PUSH
36277: EMPTY
36278: LIST
36279: LIST
36280: PUSH
36281: LD_INT 1
36283: PUSH
36284: LD_INT 0
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: PUSH
36291: LD_INT 1
36293: PUSH
36294: LD_INT 1
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: PUSH
36301: LD_INT 0
36303: PUSH
36304: LD_INT 1
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: PUSH
36311: LD_INT 1
36313: NEG
36314: PUSH
36315: LD_INT 0
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: PUSH
36322: LD_INT 1
36324: NEG
36325: PUSH
36326: LD_INT 1
36328: NEG
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: PUSH
36334: LD_INT 1
36336: NEG
36337: PUSH
36338: LD_INT 2
36340: NEG
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: PUSH
36346: LD_INT 0
36348: PUSH
36349: LD_INT 2
36351: NEG
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: PUSH
36357: LD_INT 1
36359: PUSH
36360: LD_INT 1
36362: NEG
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: PUSH
36368: LD_INT 2
36370: PUSH
36371: LD_INT 0
36373: PUSH
36374: EMPTY
36375: LIST
36376: LIST
36377: PUSH
36378: LD_INT 2
36380: PUSH
36381: LD_INT 1
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: PUSH
36388: LD_INT 2
36390: PUSH
36391: LD_INT 2
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: PUSH
36398: LD_INT 1
36400: PUSH
36401: LD_INT 2
36403: PUSH
36404: EMPTY
36405: LIST
36406: LIST
36407: PUSH
36408: LD_INT 0
36410: PUSH
36411: LD_INT 2
36413: PUSH
36414: EMPTY
36415: LIST
36416: LIST
36417: PUSH
36418: LD_INT 1
36420: NEG
36421: PUSH
36422: LD_INT 1
36424: PUSH
36425: EMPTY
36426: LIST
36427: LIST
36428: PUSH
36429: LD_INT 2
36431: NEG
36432: PUSH
36433: LD_INT 0
36435: PUSH
36436: EMPTY
36437: LIST
36438: LIST
36439: PUSH
36440: LD_INT 2
36442: NEG
36443: PUSH
36444: LD_INT 1
36446: NEG
36447: PUSH
36448: EMPTY
36449: LIST
36450: LIST
36451: PUSH
36452: LD_INT 2
36454: NEG
36455: PUSH
36456: LD_INT 2
36458: NEG
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: PUSH
36464: EMPTY
36465: LIST
36466: LIST
36467: LIST
36468: LIST
36469: LIST
36470: LIST
36471: LIST
36472: LIST
36473: LIST
36474: LIST
36475: LIST
36476: LIST
36477: LIST
36478: LIST
36479: LIST
36480: LIST
36481: LIST
36482: LIST
36483: LIST
36484: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36485: LD_ADDR_VAR 0 22
36489: PUSH
36490: LD_INT 0
36492: PUSH
36493: LD_INT 0
36495: PUSH
36496: EMPTY
36497: LIST
36498: LIST
36499: PUSH
36500: LD_INT 0
36502: PUSH
36503: LD_INT 1
36505: NEG
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: PUSH
36511: LD_INT 1
36513: PUSH
36514: LD_INT 0
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: PUSH
36521: LD_INT 1
36523: PUSH
36524: LD_INT 1
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: PUSH
36531: LD_INT 0
36533: PUSH
36534: LD_INT 1
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: LD_INT 1
36543: NEG
36544: PUSH
36545: LD_INT 0
36547: PUSH
36548: EMPTY
36549: LIST
36550: LIST
36551: PUSH
36552: LD_INT 1
36554: NEG
36555: PUSH
36556: LD_INT 1
36558: NEG
36559: PUSH
36560: EMPTY
36561: LIST
36562: LIST
36563: PUSH
36564: LD_INT 1
36566: NEG
36567: PUSH
36568: LD_INT 2
36570: NEG
36571: PUSH
36572: EMPTY
36573: LIST
36574: LIST
36575: PUSH
36576: LD_INT 0
36578: PUSH
36579: LD_INT 2
36581: NEG
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: PUSH
36587: LD_INT 1
36589: PUSH
36590: LD_INT 1
36592: NEG
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: PUSH
36598: LD_INT 2
36600: PUSH
36601: LD_INT 0
36603: PUSH
36604: EMPTY
36605: LIST
36606: LIST
36607: PUSH
36608: LD_INT 2
36610: PUSH
36611: LD_INT 1
36613: PUSH
36614: EMPTY
36615: LIST
36616: LIST
36617: PUSH
36618: LD_INT 2
36620: PUSH
36621: LD_INT 2
36623: PUSH
36624: EMPTY
36625: LIST
36626: LIST
36627: PUSH
36628: LD_INT 1
36630: PUSH
36631: LD_INT 2
36633: PUSH
36634: EMPTY
36635: LIST
36636: LIST
36637: PUSH
36638: LD_INT 0
36640: PUSH
36641: LD_INT 2
36643: PUSH
36644: EMPTY
36645: LIST
36646: LIST
36647: PUSH
36648: LD_INT 1
36650: NEG
36651: PUSH
36652: LD_INT 1
36654: PUSH
36655: EMPTY
36656: LIST
36657: LIST
36658: PUSH
36659: LD_INT 2
36661: NEG
36662: PUSH
36663: LD_INT 0
36665: PUSH
36666: EMPTY
36667: LIST
36668: LIST
36669: PUSH
36670: LD_INT 2
36672: NEG
36673: PUSH
36674: LD_INT 1
36676: NEG
36677: PUSH
36678: EMPTY
36679: LIST
36680: LIST
36681: PUSH
36682: LD_INT 2
36684: NEG
36685: PUSH
36686: LD_INT 2
36688: NEG
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PUSH
36694: EMPTY
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: LIST
36703: LIST
36704: LIST
36705: LIST
36706: LIST
36707: LIST
36708: LIST
36709: LIST
36710: LIST
36711: LIST
36712: LIST
36713: LIST
36714: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
36715: LD_ADDR_VAR 0 23
36719: PUSH
36720: LD_INT 0
36722: PUSH
36723: LD_INT 0
36725: PUSH
36726: EMPTY
36727: LIST
36728: LIST
36729: PUSH
36730: LD_INT 0
36732: PUSH
36733: LD_INT 1
36735: NEG
36736: PUSH
36737: EMPTY
36738: LIST
36739: LIST
36740: PUSH
36741: LD_INT 1
36743: PUSH
36744: LD_INT 0
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: PUSH
36751: LD_INT 1
36753: PUSH
36754: LD_INT 1
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: PUSH
36761: LD_INT 0
36763: PUSH
36764: LD_INT 1
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: LD_INT 1
36773: NEG
36774: PUSH
36775: LD_INT 0
36777: PUSH
36778: EMPTY
36779: LIST
36780: LIST
36781: PUSH
36782: LD_INT 1
36784: NEG
36785: PUSH
36786: LD_INT 1
36788: NEG
36789: PUSH
36790: EMPTY
36791: LIST
36792: LIST
36793: PUSH
36794: LD_INT 1
36796: NEG
36797: PUSH
36798: LD_INT 2
36800: NEG
36801: PUSH
36802: EMPTY
36803: LIST
36804: LIST
36805: PUSH
36806: LD_INT 0
36808: PUSH
36809: LD_INT 2
36811: NEG
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: PUSH
36817: LD_INT 1
36819: PUSH
36820: LD_INT 1
36822: NEG
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: PUSH
36828: LD_INT 2
36830: PUSH
36831: LD_INT 0
36833: PUSH
36834: EMPTY
36835: LIST
36836: LIST
36837: PUSH
36838: LD_INT 2
36840: PUSH
36841: LD_INT 1
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: LD_INT 2
36850: PUSH
36851: LD_INT 2
36853: PUSH
36854: EMPTY
36855: LIST
36856: LIST
36857: PUSH
36858: LD_INT 1
36860: PUSH
36861: LD_INT 2
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: PUSH
36868: LD_INT 0
36870: PUSH
36871: LD_INT 2
36873: PUSH
36874: EMPTY
36875: LIST
36876: LIST
36877: PUSH
36878: LD_INT 1
36880: NEG
36881: PUSH
36882: LD_INT 1
36884: PUSH
36885: EMPTY
36886: LIST
36887: LIST
36888: PUSH
36889: LD_INT 2
36891: NEG
36892: PUSH
36893: LD_INT 0
36895: PUSH
36896: EMPTY
36897: LIST
36898: LIST
36899: PUSH
36900: LD_INT 2
36902: NEG
36903: PUSH
36904: LD_INT 1
36906: NEG
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: PUSH
36912: LD_INT 2
36914: NEG
36915: PUSH
36916: LD_INT 2
36918: NEG
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: PUSH
36924: LD_INT 2
36926: NEG
36927: PUSH
36928: LD_INT 3
36930: NEG
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: PUSH
36936: LD_INT 1
36938: NEG
36939: PUSH
36940: LD_INT 3
36942: NEG
36943: PUSH
36944: EMPTY
36945: LIST
36946: LIST
36947: PUSH
36948: LD_INT 1
36950: PUSH
36951: LD_INT 2
36953: NEG
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: PUSH
36959: LD_INT 2
36961: PUSH
36962: LD_INT 1
36964: NEG
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: PUSH
36970: EMPTY
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: LIST
36980: LIST
36981: LIST
36982: LIST
36983: LIST
36984: LIST
36985: LIST
36986: LIST
36987: LIST
36988: LIST
36989: LIST
36990: LIST
36991: LIST
36992: LIST
36993: LIST
36994: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
36995: LD_ADDR_VAR 0 24
36999: PUSH
37000: LD_INT 0
37002: PUSH
37003: LD_INT 0
37005: PUSH
37006: EMPTY
37007: LIST
37008: LIST
37009: PUSH
37010: LD_INT 0
37012: PUSH
37013: LD_INT 1
37015: NEG
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: PUSH
37021: LD_INT 1
37023: PUSH
37024: LD_INT 0
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PUSH
37031: LD_INT 1
37033: PUSH
37034: LD_INT 1
37036: PUSH
37037: EMPTY
37038: LIST
37039: LIST
37040: PUSH
37041: LD_INT 0
37043: PUSH
37044: LD_INT 1
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: PUSH
37051: LD_INT 1
37053: NEG
37054: PUSH
37055: LD_INT 0
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: PUSH
37062: LD_INT 1
37064: NEG
37065: PUSH
37066: LD_INT 1
37068: NEG
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: PUSH
37074: LD_INT 1
37076: NEG
37077: PUSH
37078: LD_INT 2
37080: NEG
37081: PUSH
37082: EMPTY
37083: LIST
37084: LIST
37085: PUSH
37086: LD_INT 0
37088: PUSH
37089: LD_INT 2
37091: NEG
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: PUSH
37097: LD_INT 1
37099: PUSH
37100: LD_INT 1
37102: NEG
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: LD_INT 2
37110: PUSH
37111: LD_INT 0
37113: PUSH
37114: EMPTY
37115: LIST
37116: LIST
37117: PUSH
37118: LD_INT 2
37120: PUSH
37121: LD_INT 1
37123: PUSH
37124: EMPTY
37125: LIST
37126: LIST
37127: PUSH
37128: LD_INT 2
37130: PUSH
37131: LD_INT 2
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: PUSH
37138: LD_INT 1
37140: PUSH
37141: LD_INT 2
37143: PUSH
37144: EMPTY
37145: LIST
37146: LIST
37147: PUSH
37148: LD_INT 0
37150: PUSH
37151: LD_INT 2
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: PUSH
37158: LD_INT 1
37160: NEG
37161: PUSH
37162: LD_INT 1
37164: PUSH
37165: EMPTY
37166: LIST
37167: LIST
37168: PUSH
37169: LD_INT 2
37171: NEG
37172: PUSH
37173: LD_INT 0
37175: PUSH
37176: EMPTY
37177: LIST
37178: LIST
37179: PUSH
37180: LD_INT 2
37182: NEG
37183: PUSH
37184: LD_INT 1
37186: NEG
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: PUSH
37192: LD_INT 2
37194: NEG
37195: PUSH
37196: LD_INT 2
37198: NEG
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: PUSH
37204: LD_INT 1
37206: PUSH
37207: LD_INT 2
37209: NEG
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: PUSH
37215: LD_INT 2
37217: PUSH
37218: LD_INT 1
37220: NEG
37221: PUSH
37222: EMPTY
37223: LIST
37224: LIST
37225: PUSH
37226: LD_INT 3
37228: PUSH
37229: LD_INT 1
37231: PUSH
37232: EMPTY
37233: LIST
37234: LIST
37235: PUSH
37236: LD_INT 3
37238: PUSH
37239: LD_INT 2
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: PUSH
37246: EMPTY
37247: LIST
37248: LIST
37249: LIST
37250: LIST
37251: LIST
37252: LIST
37253: LIST
37254: LIST
37255: LIST
37256: LIST
37257: LIST
37258: LIST
37259: LIST
37260: LIST
37261: LIST
37262: LIST
37263: LIST
37264: LIST
37265: LIST
37266: LIST
37267: LIST
37268: LIST
37269: LIST
37270: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
37271: LD_ADDR_VAR 0 25
37275: PUSH
37276: LD_INT 0
37278: PUSH
37279: LD_INT 0
37281: PUSH
37282: EMPTY
37283: LIST
37284: LIST
37285: PUSH
37286: LD_INT 0
37288: PUSH
37289: LD_INT 1
37291: NEG
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: PUSH
37297: LD_INT 1
37299: PUSH
37300: LD_INT 0
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: PUSH
37307: LD_INT 1
37309: PUSH
37310: LD_INT 1
37312: PUSH
37313: EMPTY
37314: LIST
37315: LIST
37316: PUSH
37317: LD_INT 0
37319: PUSH
37320: LD_INT 1
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: LD_INT 1
37329: NEG
37330: PUSH
37331: LD_INT 0
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: PUSH
37338: LD_INT 1
37340: NEG
37341: PUSH
37342: LD_INT 1
37344: NEG
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: PUSH
37350: LD_INT 1
37352: NEG
37353: PUSH
37354: LD_INT 2
37356: NEG
37357: PUSH
37358: EMPTY
37359: LIST
37360: LIST
37361: PUSH
37362: LD_INT 0
37364: PUSH
37365: LD_INT 2
37367: NEG
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: PUSH
37373: LD_INT 1
37375: PUSH
37376: LD_INT 1
37378: NEG
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PUSH
37384: LD_INT 2
37386: PUSH
37387: LD_INT 0
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: PUSH
37394: LD_INT 2
37396: PUSH
37397: LD_INT 1
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: PUSH
37404: LD_INT 2
37406: PUSH
37407: LD_INT 2
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: PUSH
37414: LD_INT 1
37416: PUSH
37417: LD_INT 2
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: PUSH
37424: LD_INT 0
37426: PUSH
37427: LD_INT 2
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: PUSH
37434: LD_INT 1
37436: NEG
37437: PUSH
37438: LD_INT 1
37440: PUSH
37441: EMPTY
37442: LIST
37443: LIST
37444: PUSH
37445: LD_INT 2
37447: NEG
37448: PUSH
37449: LD_INT 0
37451: PUSH
37452: EMPTY
37453: LIST
37454: LIST
37455: PUSH
37456: LD_INT 2
37458: NEG
37459: PUSH
37460: LD_INT 1
37462: NEG
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: PUSH
37468: LD_INT 2
37470: NEG
37471: PUSH
37472: LD_INT 2
37474: NEG
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PUSH
37480: LD_INT 3
37482: PUSH
37483: LD_INT 1
37485: PUSH
37486: EMPTY
37487: LIST
37488: LIST
37489: PUSH
37490: LD_INT 3
37492: PUSH
37493: LD_INT 2
37495: PUSH
37496: EMPTY
37497: LIST
37498: LIST
37499: PUSH
37500: LD_INT 2
37502: PUSH
37503: LD_INT 3
37505: PUSH
37506: EMPTY
37507: LIST
37508: LIST
37509: PUSH
37510: LD_INT 1
37512: PUSH
37513: LD_INT 3
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: PUSH
37520: EMPTY
37521: LIST
37522: LIST
37523: LIST
37524: LIST
37525: LIST
37526: LIST
37527: LIST
37528: LIST
37529: LIST
37530: LIST
37531: LIST
37532: LIST
37533: LIST
37534: LIST
37535: LIST
37536: LIST
37537: LIST
37538: LIST
37539: LIST
37540: LIST
37541: LIST
37542: LIST
37543: LIST
37544: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37545: LD_ADDR_VAR 0 26
37549: PUSH
37550: LD_INT 0
37552: PUSH
37553: LD_INT 0
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: LD_INT 0
37562: PUSH
37563: LD_INT 1
37565: NEG
37566: PUSH
37567: EMPTY
37568: LIST
37569: LIST
37570: PUSH
37571: LD_INT 1
37573: PUSH
37574: LD_INT 0
37576: PUSH
37577: EMPTY
37578: LIST
37579: LIST
37580: PUSH
37581: LD_INT 1
37583: PUSH
37584: LD_INT 1
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PUSH
37591: LD_INT 0
37593: PUSH
37594: LD_INT 1
37596: PUSH
37597: EMPTY
37598: LIST
37599: LIST
37600: PUSH
37601: LD_INT 1
37603: NEG
37604: PUSH
37605: LD_INT 0
37607: PUSH
37608: EMPTY
37609: LIST
37610: LIST
37611: PUSH
37612: LD_INT 1
37614: NEG
37615: PUSH
37616: LD_INT 1
37618: NEG
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PUSH
37624: LD_INT 1
37626: NEG
37627: PUSH
37628: LD_INT 2
37630: NEG
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PUSH
37636: LD_INT 0
37638: PUSH
37639: LD_INT 2
37641: NEG
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: PUSH
37647: LD_INT 1
37649: PUSH
37650: LD_INT 1
37652: NEG
37653: PUSH
37654: EMPTY
37655: LIST
37656: LIST
37657: PUSH
37658: LD_INT 2
37660: PUSH
37661: LD_INT 0
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PUSH
37668: LD_INT 2
37670: PUSH
37671: LD_INT 1
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: PUSH
37678: LD_INT 2
37680: PUSH
37681: LD_INT 2
37683: PUSH
37684: EMPTY
37685: LIST
37686: LIST
37687: PUSH
37688: LD_INT 1
37690: PUSH
37691: LD_INT 2
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: PUSH
37698: LD_INT 0
37700: PUSH
37701: LD_INT 2
37703: PUSH
37704: EMPTY
37705: LIST
37706: LIST
37707: PUSH
37708: LD_INT 1
37710: NEG
37711: PUSH
37712: LD_INT 1
37714: PUSH
37715: EMPTY
37716: LIST
37717: LIST
37718: PUSH
37719: LD_INT 2
37721: NEG
37722: PUSH
37723: LD_INT 0
37725: PUSH
37726: EMPTY
37727: LIST
37728: LIST
37729: PUSH
37730: LD_INT 2
37732: NEG
37733: PUSH
37734: LD_INT 1
37736: NEG
37737: PUSH
37738: EMPTY
37739: LIST
37740: LIST
37741: PUSH
37742: LD_INT 2
37744: NEG
37745: PUSH
37746: LD_INT 2
37748: NEG
37749: PUSH
37750: EMPTY
37751: LIST
37752: LIST
37753: PUSH
37754: LD_INT 2
37756: PUSH
37757: LD_INT 3
37759: PUSH
37760: EMPTY
37761: LIST
37762: LIST
37763: PUSH
37764: LD_INT 1
37766: PUSH
37767: LD_INT 3
37769: PUSH
37770: EMPTY
37771: LIST
37772: LIST
37773: PUSH
37774: LD_INT 1
37776: NEG
37777: PUSH
37778: LD_INT 2
37780: PUSH
37781: EMPTY
37782: LIST
37783: LIST
37784: PUSH
37785: LD_INT 2
37787: NEG
37788: PUSH
37789: LD_INT 1
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: LIST
37800: LIST
37801: LIST
37802: LIST
37803: LIST
37804: LIST
37805: LIST
37806: LIST
37807: LIST
37808: LIST
37809: LIST
37810: LIST
37811: LIST
37812: LIST
37813: LIST
37814: LIST
37815: LIST
37816: LIST
37817: LIST
37818: LIST
37819: LIST
37820: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37821: LD_ADDR_VAR 0 27
37825: PUSH
37826: LD_INT 0
37828: PUSH
37829: LD_INT 0
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: PUSH
37836: LD_INT 0
37838: PUSH
37839: LD_INT 1
37841: NEG
37842: PUSH
37843: EMPTY
37844: LIST
37845: LIST
37846: PUSH
37847: LD_INT 1
37849: PUSH
37850: LD_INT 0
37852: PUSH
37853: EMPTY
37854: LIST
37855: LIST
37856: PUSH
37857: LD_INT 1
37859: PUSH
37860: LD_INT 1
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: PUSH
37867: LD_INT 0
37869: PUSH
37870: LD_INT 1
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: PUSH
37877: LD_INT 1
37879: NEG
37880: PUSH
37881: LD_INT 0
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: PUSH
37888: LD_INT 1
37890: NEG
37891: PUSH
37892: LD_INT 1
37894: NEG
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: PUSH
37900: LD_INT 1
37902: NEG
37903: PUSH
37904: LD_INT 2
37906: NEG
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: PUSH
37912: LD_INT 0
37914: PUSH
37915: LD_INT 2
37917: NEG
37918: PUSH
37919: EMPTY
37920: LIST
37921: LIST
37922: PUSH
37923: LD_INT 1
37925: PUSH
37926: LD_INT 1
37928: NEG
37929: PUSH
37930: EMPTY
37931: LIST
37932: LIST
37933: PUSH
37934: LD_INT 2
37936: PUSH
37937: LD_INT 0
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: PUSH
37944: LD_INT 2
37946: PUSH
37947: LD_INT 1
37949: PUSH
37950: EMPTY
37951: LIST
37952: LIST
37953: PUSH
37954: LD_INT 2
37956: PUSH
37957: LD_INT 2
37959: PUSH
37960: EMPTY
37961: LIST
37962: LIST
37963: PUSH
37964: LD_INT 1
37966: PUSH
37967: LD_INT 2
37969: PUSH
37970: EMPTY
37971: LIST
37972: LIST
37973: PUSH
37974: LD_INT 0
37976: PUSH
37977: LD_INT 2
37979: PUSH
37980: EMPTY
37981: LIST
37982: LIST
37983: PUSH
37984: LD_INT 1
37986: NEG
37987: PUSH
37988: LD_INT 1
37990: PUSH
37991: EMPTY
37992: LIST
37993: LIST
37994: PUSH
37995: LD_INT 2
37997: NEG
37998: PUSH
37999: LD_INT 0
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: PUSH
38006: LD_INT 2
38008: NEG
38009: PUSH
38010: LD_INT 1
38012: NEG
38013: PUSH
38014: EMPTY
38015: LIST
38016: LIST
38017: PUSH
38018: LD_INT 2
38020: NEG
38021: PUSH
38022: LD_INT 2
38024: NEG
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 1
38032: NEG
38033: PUSH
38034: LD_INT 2
38036: PUSH
38037: EMPTY
38038: LIST
38039: LIST
38040: PUSH
38041: LD_INT 2
38043: NEG
38044: PUSH
38045: LD_INT 1
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: PUSH
38052: LD_INT 3
38054: NEG
38055: PUSH
38056: LD_INT 1
38058: NEG
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: PUSH
38064: LD_INT 3
38066: NEG
38067: PUSH
38068: LD_INT 2
38070: NEG
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: LIST
38080: LIST
38081: LIST
38082: LIST
38083: LIST
38084: LIST
38085: LIST
38086: LIST
38087: LIST
38088: LIST
38089: LIST
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: LIST
38095: LIST
38096: LIST
38097: LIST
38098: LIST
38099: LIST
38100: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38101: LD_ADDR_VAR 0 28
38105: PUSH
38106: LD_INT 0
38108: PUSH
38109: LD_INT 0
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: PUSH
38116: LD_INT 0
38118: PUSH
38119: LD_INT 1
38121: NEG
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: PUSH
38127: LD_INT 1
38129: PUSH
38130: LD_INT 0
38132: PUSH
38133: EMPTY
38134: LIST
38135: LIST
38136: PUSH
38137: LD_INT 1
38139: PUSH
38140: LD_INT 1
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: LD_INT 0
38149: PUSH
38150: LD_INT 1
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: PUSH
38157: LD_INT 1
38159: NEG
38160: PUSH
38161: LD_INT 0
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: PUSH
38168: LD_INT 1
38170: NEG
38171: PUSH
38172: LD_INT 1
38174: NEG
38175: PUSH
38176: EMPTY
38177: LIST
38178: LIST
38179: PUSH
38180: LD_INT 1
38182: NEG
38183: PUSH
38184: LD_INT 2
38186: NEG
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: PUSH
38192: LD_INT 0
38194: PUSH
38195: LD_INT 2
38197: NEG
38198: PUSH
38199: EMPTY
38200: LIST
38201: LIST
38202: PUSH
38203: LD_INT 1
38205: PUSH
38206: LD_INT 1
38208: NEG
38209: PUSH
38210: EMPTY
38211: LIST
38212: LIST
38213: PUSH
38214: LD_INT 2
38216: PUSH
38217: LD_INT 0
38219: PUSH
38220: EMPTY
38221: LIST
38222: LIST
38223: PUSH
38224: LD_INT 2
38226: PUSH
38227: LD_INT 1
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PUSH
38234: LD_INT 2
38236: PUSH
38237: LD_INT 2
38239: PUSH
38240: EMPTY
38241: LIST
38242: LIST
38243: PUSH
38244: LD_INT 1
38246: PUSH
38247: LD_INT 2
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: PUSH
38254: LD_INT 0
38256: PUSH
38257: LD_INT 2
38259: PUSH
38260: EMPTY
38261: LIST
38262: LIST
38263: PUSH
38264: LD_INT 1
38266: NEG
38267: PUSH
38268: LD_INT 1
38270: PUSH
38271: EMPTY
38272: LIST
38273: LIST
38274: PUSH
38275: LD_INT 2
38277: NEG
38278: PUSH
38279: LD_INT 0
38281: PUSH
38282: EMPTY
38283: LIST
38284: LIST
38285: PUSH
38286: LD_INT 2
38288: NEG
38289: PUSH
38290: LD_INT 1
38292: NEG
38293: PUSH
38294: EMPTY
38295: LIST
38296: LIST
38297: PUSH
38298: LD_INT 2
38300: NEG
38301: PUSH
38302: LD_INT 2
38304: NEG
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: PUSH
38310: LD_INT 2
38312: NEG
38313: PUSH
38314: LD_INT 3
38316: NEG
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: PUSH
38322: LD_INT 1
38324: NEG
38325: PUSH
38326: LD_INT 3
38328: NEG
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: PUSH
38334: LD_INT 3
38336: NEG
38337: PUSH
38338: LD_INT 1
38340: NEG
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: PUSH
38346: LD_INT 3
38348: NEG
38349: PUSH
38350: LD_INT 2
38352: NEG
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: LIST
38362: LIST
38363: LIST
38364: LIST
38365: LIST
38366: LIST
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38383: LD_ADDR_VAR 0 29
38387: PUSH
38388: LD_INT 0
38390: PUSH
38391: LD_INT 0
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: PUSH
38398: LD_INT 0
38400: PUSH
38401: LD_INT 1
38403: NEG
38404: PUSH
38405: EMPTY
38406: LIST
38407: LIST
38408: PUSH
38409: LD_INT 1
38411: PUSH
38412: LD_INT 0
38414: PUSH
38415: EMPTY
38416: LIST
38417: LIST
38418: PUSH
38419: LD_INT 1
38421: PUSH
38422: LD_INT 1
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 0
38431: PUSH
38432: LD_INT 1
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: PUSH
38439: LD_INT 1
38441: NEG
38442: PUSH
38443: LD_INT 0
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: PUSH
38450: LD_INT 1
38452: NEG
38453: PUSH
38454: LD_INT 1
38456: NEG
38457: PUSH
38458: EMPTY
38459: LIST
38460: LIST
38461: PUSH
38462: LD_INT 1
38464: NEG
38465: PUSH
38466: LD_INT 2
38468: NEG
38469: PUSH
38470: EMPTY
38471: LIST
38472: LIST
38473: PUSH
38474: LD_INT 0
38476: PUSH
38477: LD_INT 2
38479: NEG
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PUSH
38485: LD_INT 1
38487: PUSH
38488: LD_INT 1
38490: NEG
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: PUSH
38496: LD_INT 2
38498: PUSH
38499: LD_INT 0
38501: PUSH
38502: EMPTY
38503: LIST
38504: LIST
38505: PUSH
38506: LD_INT 2
38508: PUSH
38509: LD_INT 1
38511: PUSH
38512: EMPTY
38513: LIST
38514: LIST
38515: PUSH
38516: LD_INT 1
38518: PUSH
38519: LD_INT 2
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PUSH
38526: LD_INT 0
38528: PUSH
38529: LD_INT 2
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 1
38538: NEG
38539: PUSH
38540: LD_INT 1
38542: PUSH
38543: EMPTY
38544: LIST
38545: LIST
38546: PUSH
38547: LD_INT 2
38549: NEG
38550: PUSH
38551: LD_INT 1
38553: NEG
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: LD_INT 2
38561: NEG
38562: PUSH
38563: LD_INT 2
38565: NEG
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: PUSH
38571: LD_INT 2
38573: NEG
38574: PUSH
38575: LD_INT 3
38577: NEG
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PUSH
38583: LD_INT 2
38585: PUSH
38586: LD_INT 1
38588: NEG
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: PUSH
38594: LD_INT 3
38596: PUSH
38597: LD_INT 1
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: LD_INT 1
38606: PUSH
38607: LD_INT 3
38609: PUSH
38610: EMPTY
38611: LIST
38612: LIST
38613: PUSH
38614: LD_INT 1
38616: NEG
38617: PUSH
38618: LD_INT 2
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: PUSH
38625: LD_INT 3
38627: NEG
38628: PUSH
38629: LD_INT 2
38631: NEG
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: LIST
38647: LIST
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: LIST
38656: LIST
38657: LIST
38658: LIST
38659: LIST
38660: LIST
38661: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
38662: LD_ADDR_VAR 0 30
38666: PUSH
38667: LD_INT 0
38669: PUSH
38670: LD_INT 0
38672: PUSH
38673: EMPTY
38674: LIST
38675: LIST
38676: PUSH
38677: LD_INT 0
38679: PUSH
38680: LD_INT 1
38682: NEG
38683: PUSH
38684: EMPTY
38685: LIST
38686: LIST
38687: PUSH
38688: LD_INT 1
38690: PUSH
38691: LD_INT 0
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: LD_INT 1
38700: PUSH
38701: LD_INT 1
38703: PUSH
38704: EMPTY
38705: LIST
38706: LIST
38707: PUSH
38708: LD_INT 0
38710: PUSH
38711: LD_INT 1
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: PUSH
38718: LD_INT 1
38720: NEG
38721: PUSH
38722: LD_INT 0
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: LD_INT 1
38731: NEG
38732: PUSH
38733: LD_INT 1
38735: NEG
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: PUSH
38741: LD_INT 1
38743: NEG
38744: PUSH
38745: LD_INT 2
38747: NEG
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: LD_INT 0
38755: PUSH
38756: LD_INT 2
38758: NEG
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: PUSH
38764: LD_INT 1
38766: PUSH
38767: LD_INT 1
38769: NEG
38770: PUSH
38771: EMPTY
38772: LIST
38773: LIST
38774: PUSH
38775: LD_INT 2
38777: PUSH
38778: LD_INT 0
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: PUSH
38785: LD_INT 2
38787: PUSH
38788: LD_INT 1
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: PUSH
38795: LD_INT 2
38797: PUSH
38798: LD_INT 2
38800: PUSH
38801: EMPTY
38802: LIST
38803: LIST
38804: PUSH
38805: LD_INT 1
38807: PUSH
38808: LD_INT 2
38810: PUSH
38811: EMPTY
38812: LIST
38813: LIST
38814: PUSH
38815: LD_INT 1
38817: NEG
38818: PUSH
38819: LD_INT 1
38821: PUSH
38822: EMPTY
38823: LIST
38824: LIST
38825: PUSH
38826: LD_INT 2
38828: NEG
38829: PUSH
38830: LD_INT 0
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 2
38839: NEG
38840: PUSH
38841: LD_INT 1
38843: NEG
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: LD_INT 1
38851: NEG
38852: PUSH
38853: LD_INT 3
38855: NEG
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 1
38863: PUSH
38864: LD_INT 2
38866: NEG
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: LD_INT 3
38874: PUSH
38875: LD_INT 2
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 2
38884: PUSH
38885: LD_INT 3
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: PUSH
38892: LD_INT 2
38894: NEG
38895: PUSH
38896: LD_INT 1
38898: PUSH
38899: EMPTY
38900: LIST
38901: LIST
38902: PUSH
38903: LD_INT 3
38905: NEG
38906: PUSH
38907: LD_INT 1
38909: NEG
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: LIST
38919: LIST
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38940: LD_ADDR_VAR 0 31
38944: PUSH
38945: LD_INT 0
38947: PUSH
38948: LD_INT 0
38950: PUSH
38951: EMPTY
38952: LIST
38953: LIST
38954: PUSH
38955: LD_INT 0
38957: PUSH
38958: LD_INT 1
38960: NEG
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: PUSH
38966: LD_INT 1
38968: PUSH
38969: LD_INT 0
38971: PUSH
38972: EMPTY
38973: LIST
38974: LIST
38975: PUSH
38976: LD_INT 1
38978: PUSH
38979: LD_INT 1
38981: PUSH
38982: EMPTY
38983: LIST
38984: LIST
38985: PUSH
38986: LD_INT 0
38988: PUSH
38989: LD_INT 1
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: LD_INT 1
38998: NEG
38999: PUSH
39000: LD_INT 0
39002: PUSH
39003: EMPTY
39004: LIST
39005: LIST
39006: PUSH
39007: LD_INT 1
39009: NEG
39010: PUSH
39011: LD_INT 1
39013: NEG
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 1
39021: NEG
39022: PUSH
39023: LD_INT 2
39025: NEG
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: PUSH
39031: LD_INT 1
39033: PUSH
39034: LD_INT 1
39036: NEG
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: PUSH
39042: LD_INT 2
39044: PUSH
39045: LD_INT 0
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: PUSH
39052: LD_INT 2
39054: PUSH
39055: LD_INT 1
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: PUSH
39062: LD_INT 2
39064: PUSH
39065: LD_INT 2
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: PUSH
39072: LD_INT 1
39074: PUSH
39075: LD_INT 2
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: PUSH
39082: LD_INT 0
39084: PUSH
39085: LD_INT 2
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: LD_INT 1
39094: NEG
39095: PUSH
39096: LD_INT 1
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PUSH
39103: LD_INT 2
39105: NEG
39106: PUSH
39107: LD_INT 1
39109: NEG
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: PUSH
39115: LD_INT 2
39117: NEG
39118: PUSH
39119: LD_INT 2
39121: NEG
39122: PUSH
39123: EMPTY
39124: LIST
39125: LIST
39126: PUSH
39127: LD_INT 2
39129: NEG
39130: PUSH
39131: LD_INT 3
39133: NEG
39134: PUSH
39135: EMPTY
39136: LIST
39137: LIST
39138: PUSH
39139: LD_INT 2
39141: PUSH
39142: LD_INT 1
39144: NEG
39145: PUSH
39146: EMPTY
39147: LIST
39148: LIST
39149: PUSH
39150: LD_INT 3
39152: PUSH
39153: LD_INT 1
39155: PUSH
39156: EMPTY
39157: LIST
39158: LIST
39159: PUSH
39160: LD_INT 1
39162: PUSH
39163: LD_INT 3
39165: PUSH
39166: EMPTY
39167: LIST
39168: LIST
39169: PUSH
39170: LD_INT 1
39172: NEG
39173: PUSH
39174: LD_INT 2
39176: PUSH
39177: EMPTY
39178: LIST
39179: LIST
39180: PUSH
39181: LD_INT 3
39183: NEG
39184: PUSH
39185: LD_INT 2
39187: NEG
39188: PUSH
39189: EMPTY
39190: LIST
39191: LIST
39192: PUSH
39193: EMPTY
39194: LIST
39195: LIST
39196: LIST
39197: LIST
39198: LIST
39199: LIST
39200: LIST
39201: LIST
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: LIST
39207: LIST
39208: LIST
39209: LIST
39210: LIST
39211: LIST
39212: LIST
39213: LIST
39214: LIST
39215: LIST
39216: LIST
39217: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39218: LD_ADDR_VAR 0 32
39222: PUSH
39223: LD_INT 0
39225: PUSH
39226: LD_INT 0
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: PUSH
39233: LD_INT 0
39235: PUSH
39236: LD_INT 1
39238: NEG
39239: PUSH
39240: EMPTY
39241: LIST
39242: LIST
39243: PUSH
39244: LD_INT 1
39246: PUSH
39247: LD_INT 0
39249: PUSH
39250: EMPTY
39251: LIST
39252: LIST
39253: PUSH
39254: LD_INT 1
39256: PUSH
39257: LD_INT 1
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: PUSH
39264: LD_INT 0
39266: PUSH
39267: LD_INT 1
39269: PUSH
39270: EMPTY
39271: LIST
39272: LIST
39273: PUSH
39274: LD_INT 1
39276: NEG
39277: PUSH
39278: LD_INT 0
39280: PUSH
39281: EMPTY
39282: LIST
39283: LIST
39284: PUSH
39285: LD_INT 1
39287: NEG
39288: PUSH
39289: LD_INT 1
39291: NEG
39292: PUSH
39293: EMPTY
39294: LIST
39295: LIST
39296: PUSH
39297: LD_INT 1
39299: NEG
39300: PUSH
39301: LD_INT 2
39303: NEG
39304: PUSH
39305: EMPTY
39306: LIST
39307: LIST
39308: PUSH
39309: LD_INT 0
39311: PUSH
39312: LD_INT 2
39314: NEG
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: PUSH
39320: LD_INT 1
39322: PUSH
39323: LD_INT 1
39325: NEG
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: PUSH
39331: LD_INT 2
39333: PUSH
39334: LD_INT 1
39336: PUSH
39337: EMPTY
39338: LIST
39339: LIST
39340: PUSH
39341: LD_INT 2
39343: PUSH
39344: LD_INT 2
39346: PUSH
39347: EMPTY
39348: LIST
39349: LIST
39350: PUSH
39351: LD_INT 1
39353: PUSH
39354: LD_INT 2
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 0
39363: PUSH
39364: LD_INT 2
39366: PUSH
39367: EMPTY
39368: LIST
39369: LIST
39370: PUSH
39371: LD_INT 1
39373: NEG
39374: PUSH
39375: LD_INT 1
39377: PUSH
39378: EMPTY
39379: LIST
39380: LIST
39381: PUSH
39382: LD_INT 2
39384: NEG
39385: PUSH
39386: LD_INT 0
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PUSH
39393: LD_INT 2
39395: NEG
39396: PUSH
39397: LD_INT 1
39399: NEG
39400: PUSH
39401: EMPTY
39402: LIST
39403: LIST
39404: PUSH
39405: LD_INT 1
39407: NEG
39408: PUSH
39409: LD_INT 3
39411: NEG
39412: PUSH
39413: EMPTY
39414: LIST
39415: LIST
39416: PUSH
39417: LD_INT 1
39419: PUSH
39420: LD_INT 2
39422: NEG
39423: PUSH
39424: EMPTY
39425: LIST
39426: LIST
39427: PUSH
39428: LD_INT 3
39430: PUSH
39431: LD_INT 2
39433: PUSH
39434: EMPTY
39435: LIST
39436: LIST
39437: PUSH
39438: LD_INT 2
39440: PUSH
39441: LD_INT 3
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 2
39450: NEG
39451: PUSH
39452: LD_INT 1
39454: PUSH
39455: EMPTY
39456: LIST
39457: LIST
39458: PUSH
39459: LD_INT 3
39461: NEG
39462: PUSH
39463: LD_INT 1
39465: NEG
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: LIST
39475: LIST
39476: LIST
39477: LIST
39478: LIST
39479: LIST
39480: LIST
39481: LIST
39482: LIST
39483: LIST
39484: LIST
39485: LIST
39486: LIST
39487: LIST
39488: LIST
39489: LIST
39490: LIST
39491: LIST
39492: LIST
39493: LIST
39494: LIST
39495: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39496: LD_ADDR_VAR 0 33
39500: PUSH
39501: LD_INT 0
39503: PUSH
39504: LD_INT 0
39506: PUSH
39507: EMPTY
39508: LIST
39509: LIST
39510: PUSH
39511: LD_INT 0
39513: PUSH
39514: LD_INT 1
39516: NEG
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: PUSH
39522: LD_INT 1
39524: PUSH
39525: LD_INT 0
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 1
39534: PUSH
39535: LD_INT 1
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: PUSH
39542: LD_INT 0
39544: PUSH
39545: LD_INT 1
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: PUSH
39552: LD_INT 1
39554: NEG
39555: PUSH
39556: LD_INT 0
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 1
39565: NEG
39566: PUSH
39567: LD_INT 1
39569: NEG
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: PUSH
39575: LD_INT 1
39577: NEG
39578: PUSH
39579: LD_INT 2
39581: NEG
39582: PUSH
39583: EMPTY
39584: LIST
39585: LIST
39586: PUSH
39587: LD_INT 1
39589: PUSH
39590: LD_INT 1
39592: NEG
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: PUSH
39598: LD_INT 2
39600: PUSH
39601: LD_INT 0
39603: PUSH
39604: EMPTY
39605: LIST
39606: LIST
39607: PUSH
39608: LD_INT 2
39610: PUSH
39611: LD_INT 1
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: PUSH
39618: LD_INT 1
39620: PUSH
39621: LD_INT 2
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: PUSH
39628: LD_INT 0
39630: PUSH
39631: LD_INT 2
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 1
39640: NEG
39641: PUSH
39642: LD_INT 1
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: LD_INT 2
39651: NEG
39652: PUSH
39653: LD_INT 0
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 2
39662: NEG
39663: PUSH
39664: LD_INT 1
39666: NEG
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: PUSH
39672: LD_INT 2
39674: NEG
39675: PUSH
39676: LD_INT 2
39678: NEG
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: PUSH
39684: LD_INT 2
39686: NEG
39687: PUSH
39688: LD_INT 3
39690: NEG
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: LD_INT 2
39698: PUSH
39699: LD_INT 1
39701: NEG
39702: PUSH
39703: EMPTY
39704: LIST
39705: LIST
39706: PUSH
39707: LD_INT 3
39709: PUSH
39710: LD_INT 1
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 1
39719: PUSH
39720: LD_INT 3
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: PUSH
39727: LD_INT 1
39729: NEG
39730: PUSH
39731: LD_INT 2
39733: PUSH
39734: EMPTY
39735: LIST
39736: LIST
39737: PUSH
39738: LD_INT 3
39740: NEG
39741: PUSH
39742: LD_INT 2
39744: NEG
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: LIST
39754: LIST
39755: LIST
39756: LIST
39757: LIST
39758: LIST
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39775: LD_ADDR_VAR 0 34
39779: PUSH
39780: LD_INT 0
39782: PUSH
39783: LD_INT 0
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: LD_INT 0
39792: PUSH
39793: LD_INT 1
39795: NEG
39796: PUSH
39797: EMPTY
39798: LIST
39799: LIST
39800: PUSH
39801: LD_INT 1
39803: PUSH
39804: LD_INT 0
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 1
39813: PUSH
39814: LD_INT 1
39816: PUSH
39817: EMPTY
39818: LIST
39819: LIST
39820: PUSH
39821: LD_INT 0
39823: PUSH
39824: LD_INT 1
39826: PUSH
39827: EMPTY
39828: LIST
39829: LIST
39830: PUSH
39831: LD_INT 1
39833: NEG
39834: PUSH
39835: LD_INT 0
39837: PUSH
39838: EMPTY
39839: LIST
39840: LIST
39841: PUSH
39842: LD_INT 1
39844: NEG
39845: PUSH
39846: LD_INT 1
39848: NEG
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: PUSH
39854: LD_INT 1
39856: NEG
39857: PUSH
39858: LD_INT 2
39860: NEG
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: PUSH
39866: LD_INT 0
39868: PUSH
39869: LD_INT 2
39871: NEG
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: LD_INT 1
39879: PUSH
39880: LD_INT 1
39882: NEG
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: PUSH
39888: LD_INT 2
39890: PUSH
39891: LD_INT 1
39893: PUSH
39894: EMPTY
39895: LIST
39896: LIST
39897: PUSH
39898: LD_INT 2
39900: PUSH
39901: LD_INT 2
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: LD_INT 1
39910: PUSH
39911: LD_INT 2
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: LD_INT 1
39920: NEG
39921: PUSH
39922: LD_INT 1
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: PUSH
39929: LD_INT 2
39931: NEG
39932: PUSH
39933: LD_INT 0
39935: PUSH
39936: EMPTY
39937: LIST
39938: LIST
39939: PUSH
39940: LD_INT 2
39942: NEG
39943: PUSH
39944: LD_INT 1
39946: NEG
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: LD_INT 2
39954: NEG
39955: PUSH
39956: LD_INT 2
39958: NEG
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 1
39966: NEG
39967: PUSH
39968: LD_INT 3
39970: NEG
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: PUSH
39976: LD_INT 1
39978: PUSH
39979: LD_INT 2
39981: NEG
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: LD_INT 3
39989: PUSH
39990: LD_INT 2
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 2
39999: PUSH
40000: LD_INT 3
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: LD_INT 2
40009: NEG
40010: PUSH
40011: LD_INT 1
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: PUSH
40018: LD_INT 3
40020: NEG
40021: PUSH
40022: LD_INT 1
40024: NEG
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: PUSH
40030: EMPTY
40031: LIST
40032: LIST
40033: LIST
40034: LIST
40035: LIST
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40055: LD_ADDR_VAR 0 35
40059: PUSH
40060: LD_INT 0
40062: PUSH
40063: LD_INT 0
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 0
40072: PUSH
40073: LD_INT 1
40075: NEG
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PUSH
40081: LD_INT 1
40083: PUSH
40084: LD_INT 0
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: LD_INT 1
40093: PUSH
40094: LD_INT 1
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: LD_INT 0
40103: PUSH
40104: LD_INT 1
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: PUSH
40111: LD_INT 1
40113: NEG
40114: PUSH
40115: LD_INT 0
40117: PUSH
40118: EMPTY
40119: LIST
40120: LIST
40121: PUSH
40122: LD_INT 1
40124: NEG
40125: PUSH
40126: LD_INT 1
40128: NEG
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: PUSH
40134: LD_INT 2
40136: PUSH
40137: LD_INT 1
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: PUSH
40144: LD_INT 2
40146: NEG
40147: PUSH
40148: LD_INT 1
40150: NEG
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PUSH
40156: EMPTY
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: LIST
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40167: LD_ADDR_VAR 0 36
40171: PUSH
40172: LD_INT 0
40174: PUSH
40175: LD_INT 0
40177: PUSH
40178: EMPTY
40179: LIST
40180: LIST
40181: PUSH
40182: LD_INT 0
40184: PUSH
40185: LD_INT 1
40187: NEG
40188: PUSH
40189: EMPTY
40190: LIST
40191: LIST
40192: PUSH
40193: LD_INT 1
40195: PUSH
40196: LD_INT 0
40198: PUSH
40199: EMPTY
40200: LIST
40201: LIST
40202: PUSH
40203: LD_INT 1
40205: PUSH
40206: LD_INT 1
40208: PUSH
40209: EMPTY
40210: LIST
40211: LIST
40212: PUSH
40213: LD_INT 0
40215: PUSH
40216: LD_INT 1
40218: PUSH
40219: EMPTY
40220: LIST
40221: LIST
40222: PUSH
40223: LD_INT 1
40225: NEG
40226: PUSH
40227: LD_INT 0
40229: PUSH
40230: EMPTY
40231: LIST
40232: LIST
40233: PUSH
40234: LD_INT 1
40236: NEG
40237: PUSH
40238: LD_INT 1
40240: NEG
40241: PUSH
40242: EMPTY
40243: LIST
40244: LIST
40245: PUSH
40246: LD_INT 1
40248: NEG
40249: PUSH
40250: LD_INT 2
40252: NEG
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: LD_INT 1
40260: PUSH
40261: LD_INT 2
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: LIST
40272: LIST
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40279: LD_ADDR_VAR 0 37
40283: PUSH
40284: LD_INT 0
40286: PUSH
40287: LD_INT 0
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: LD_INT 0
40296: PUSH
40297: LD_INT 1
40299: NEG
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 1
40307: PUSH
40308: LD_INT 0
40310: PUSH
40311: EMPTY
40312: LIST
40313: LIST
40314: PUSH
40315: LD_INT 1
40317: PUSH
40318: LD_INT 1
40320: PUSH
40321: EMPTY
40322: LIST
40323: LIST
40324: PUSH
40325: LD_INT 0
40327: PUSH
40328: LD_INT 1
40330: PUSH
40331: EMPTY
40332: LIST
40333: LIST
40334: PUSH
40335: LD_INT 1
40337: NEG
40338: PUSH
40339: LD_INT 0
40341: PUSH
40342: EMPTY
40343: LIST
40344: LIST
40345: PUSH
40346: LD_INT 1
40348: NEG
40349: PUSH
40350: LD_INT 1
40352: NEG
40353: PUSH
40354: EMPTY
40355: LIST
40356: LIST
40357: PUSH
40358: LD_INT 1
40360: PUSH
40361: LD_INT 1
40363: NEG
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 1
40371: NEG
40372: PUSH
40373: LD_INT 1
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40391: LD_ADDR_VAR 0 38
40395: PUSH
40396: LD_INT 0
40398: PUSH
40399: LD_INT 0
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: LD_INT 0
40408: PUSH
40409: LD_INT 1
40411: NEG
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 1
40419: PUSH
40420: LD_INT 0
40422: PUSH
40423: EMPTY
40424: LIST
40425: LIST
40426: PUSH
40427: LD_INT 1
40429: PUSH
40430: LD_INT 1
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PUSH
40437: LD_INT 0
40439: PUSH
40440: LD_INT 1
40442: PUSH
40443: EMPTY
40444: LIST
40445: LIST
40446: PUSH
40447: LD_INT 1
40449: NEG
40450: PUSH
40451: LD_INT 0
40453: PUSH
40454: EMPTY
40455: LIST
40456: LIST
40457: PUSH
40458: LD_INT 1
40460: NEG
40461: PUSH
40462: LD_INT 1
40464: NEG
40465: PUSH
40466: EMPTY
40467: LIST
40468: LIST
40469: PUSH
40470: LD_INT 2
40472: PUSH
40473: LD_INT 1
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: PUSH
40480: LD_INT 2
40482: NEG
40483: PUSH
40484: LD_INT 1
40486: NEG
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: LIST
40496: LIST
40497: LIST
40498: LIST
40499: LIST
40500: LIST
40501: LIST
40502: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40503: LD_ADDR_VAR 0 39
40507: PUSH
40508: LD_INT 0
40510: PUSH
40511: LD_INT 0
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 0
40520: PUSH
40521: LD_INT 1
40523: NEG
40524: PUSH
40525: EMPTY
40526: LIST
40527: LIST
40528: PUSH
40529: LD_INT 1
40531: PUSH
40532: LD_INT 0
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: PUSH
40539: LD_INT 1
40541: PUSH
40542: LD_INT 1
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: PUSH
40549: LD_INT 0
40551: PUSH
40552: LD_INT 1
40554: PUSH
40555: EMPTY
40556: LIST
40557: LIST
40558: PUSH
40559: LD_INT 1
40561: NEG
40562: PUSH
40563: LD_INT 0
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: PUSH
40570: LD_INT 1
40572: NEG
40573: PUSH
40574: LD_INT 1
40576: NEG
40577: PUSH
40578: EMPTY
40579: LIST
40580: LIST
40581: PUSH
40582: LD_INT 1
40584: NEG
40585: PUSH
40586: LD_INT 2
40588: NEG
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: LD_INT 1
40596: PUSH
40597: LD_INT 2
40599: PUSH
40600: EMPTY
40601: LIST
40602: LIST
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40615: LD_ADDR_VAR 0 40
40619: PUSH
40620: LD_INT 0
40622: PUSH
40623: LD_INT 0
40625: PUSH
40626: EMPTY
40627: LIST
40628: LIST
40629: PUSH
40630: LD_INT 0
40632: PUSH
40633: LD_INT 1
40635: NEG
40636: PUSH
40637: EMPTY
40638: LIST
40639: LIST
40640: PUSH
40641: LD_INT 1
40643: PUSH
40644: LD_INT 0
40646: PUSH
40647: EMPTY
40648: LIST
40649: LIST
40650: PUSH
40651: LD_INT 1
40653: PUSH
40654: LD_INT 1
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: LD_INT 0
40663: PUSH
40664: LD_INT 1
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: LD_INT 1
40673: NEG
40674: PUSH
40675: LD_INT 0
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: PUSH
40682: LD_INT 1
40684: NEG
40685: PUSH
40686: LD_INT 1
40688: NEG
40689: PUSH
40690: EMPTY
40691: LIST
40692: LIST
40693: PUSH
40694: LD_INT 1
40696: PUSH
40697: LD_INT 1
40699: NEG
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: PUSH
40705: LD_INT 1
40707: NEG
40708: PUSH
40709: LD_INT 1
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: EMPTY
40717: LIST
40718: LIST
40719: LIST
40720: LIST
40721: LIST
40722: LIST
40723: LIST
40724: LIST
40725: LIST
40726: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
40727: LD_ADDR_VAR 0 41
40731: PUSH
40732: LD_INT 0
40734: PUSH
40735: LD_INT 0
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: LD_INT 0
40744: PUSH
40745: LD_INT 1
40747: NEG
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 1
40755: PUSH
40756: LD_INT 0
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 1
40765: PUSH
40766: LD_INT 1
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 0
40775: PUSH
40776: LD_INT 1
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 1
40785: NEG
40786: PUSH
40787: LD_INT 0
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 1
40796: NEG
40797: PUSH
40798: LD_INT 1
40800: NEG
40801: PUSH
40802: EMPTY
40803: LIST
40804: LIST
40805: PUSH
40806: LD_INT 1
40808: NEG
40809: PUSH
40810: LD_INT 2
40812: NEG
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: LD_INT 1
40820: PUSH
40821: LD_INT 1
40823: NEG
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: PUSH
40829: LD_INT 2
40831: PUSH
40832: LD_INT 0
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: LD_INT 2
40841: PUSH
40842: LD_INT 1
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: LD_INT 2
40851: PUSH
40852: LD_INT 2
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: PUSH
40859: LD_INT 1
40861: PUSH
40862: LD_INT 2
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PUSH
40869: LD_INT 1
40871: NEG
40872: PUSH
40873: LD_INT 1
40875: PUSH
40876: EMPTY
40877: LIST
40878: LIST
40879: PUSH
40880: LD_INT 2
40882: NEG
40883: PUSH
40884: LD_INT 0
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: LD_INT 2
40893: NEG
40894: PUSH
40895: LD_INT 1
40897: NEG
40898: PUSH
40899: EMPTY
40900: LIST
40901: LIST
40902: PUSH
40903: LD_INT 2
40905: NEG
40906: PUSH
40907: LD_INT 2
40909: NEG
40910: PUSH
40911: EMPTY
40912: LIST
40913: LIST
40914: PUSH
40915: LD_INT 2
40917: NEG
40918: PUSH
40919: LD_INT 3
40921: NEG
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 2
40929: PUSH
40930: LD_INT 1
40932: NEG
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 3
40940: PUSH
40941: LD_INT 0
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 3
40950: PUSH
40951: LD_INT 1
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 3
40960: PUSH
40961: LD_INT 2
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 3
40970: PUSH
40971: LD_INT 3
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PUSH
40978: LD_INT 2
40980: PUSH
40981: LD_INT 3
40983: PUSH
40984: EMPTY
40985: LIST
40986: LIST
40987: PUSH
40988: LD_INT 2
40990: NEG
40991: PUSH
40992: LD_INT 1
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: PUSH
40999: LD_INT 3
41001: NEG
41002: PUSH
41003: LD_INT 0
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 3
41012: NEG
41013: PUSH
41014: LD_INT 1
41016: NEG
41017: PUSH
41018: EMPTY
41019: LIST
41020: LIST
41021: PUSH
41022: LD_INT 3
41024: NEG
41025: PUSH
41026: LD_INT 2
41028: NEG
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 3
41036: NEG
41037: PUSH
41038: LD_INT 3
41040: NEG
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: LIST
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: LIST
41063: LIST
41064: LIST
41065: LIST
41066: LIST
41067: LIST
41068: LIST
41069: LIST
41070: LIST
41071: LIST
41072: LIST
41073: LIST
41074: LIST
41075: LIST
41076: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41077: LD_ADDR_VAR 0 42
41081: PUSH
41082: LD_INT 0
41084: PUSH
41085: LD_INT 0
41087: PUSH
41088: EMPTY
41089: LIST
41090: LIST
41091: PUSH
41092: LD_INT 0
41094: PUSH
41095: LD_INT 1
41097: NEG
41098: PUSH
41099: EMPTY
41100: LIST
41101: LIST
41102: PUSH
41103: LD_INT 1
41105: PUSH
41106: LD_INT 0
41108: PUSH
41109: EMPTY
41110: LIST
41111: LIST
41112: PUSH
41113: LD_INT 1
41115: PUSH
41116: LD_INT 1
41118: PUSH
41119: EMPTY
41120: LIST
41121: LIST
41122: PUSH
41123: LD_INT 0
41125: PUSH
41126: LD_INT 1
41128: PUSH
41129: EMPTY
41130: LIST
41131: LIST
41132: PUSH
41133: LD_INT 1
41135: NEG
41136: PUSH
41137: LD_INT 0
41139: PUSH
41140: EMPTY
41141: LIST
41142: LIST
41143: PUSH
41144: LD_INT 1
41146: NEG
41147: PUSH
41148: LD_INT 1
41150: NEG
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: LD_INT 1
41158: NEG
41159: PUSH
41160: LD_INT 2
41162: NEG
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: PUSH
41168: LD_INT 0
41170: PUSH
41171: LD_INT 2
41173: NEG
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 1
41181: PUSH
41182: LD_INT 1
41184: NEG
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PUSH
41190: LD_INT 2
41192: PUSH
41193: LD_INT 1
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: PUSH
41200: LD_INT 2
41202: PUSH
41203: LD_INT 2
41205: PUSH
41206: EMPTY
41207: LIST
41208: LIST
41209: PUSH
41210: LD_INT 1
41212: PUSH
41213: LD_INT 2
41215: PUSH
41216: EMPTY
41217: LIST
41218: LIST
41219: PUSH
41220: LD_INT 0
41222: PUSH
41223: LD_INT 2
41225: PUSH
41226: EMPTY
41227: LIST
41228: LIST
41229: PUSH
41230: LD_INT 1
41232: NEG
41233: PUSH
41234: LD_INT 1
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: LD_INT 2
41243: NEG
41244: PUSH
41245: LD_INT 1
41247: NEG
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 2
41255: NEG
41256: PUSH
41257: LD_INT 2
41259: NEG
41260: PUSH
41261: EMPTY
41262: LIST
41263: LIST
41264: PUSH
41265: LD_INT 2
41267: NEG
41268: PUSH
41269: LD_INT 3
41271: NEG
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 1
41279: NEG
41280: PUSH
41281: LD_INT 3
41283: NEG
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 0
41291: PUSH
41292: LD_INT 3
41294: NEG
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: LD_INT 1
41302: PUSH
41303: LD_INT 2
41305: NEG
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: PUSH
41311: LD_INT 3
41313: PUSH
41314: LD_INT 2
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: LD_INT 3
41323: PUSH
41324: LD_INT 3
41326: PUSH
41327: EMPTY
41328: LIST
41329: LIST
41330: PUSH
41331: LD_INT 2
41333: PUSH
41334: LD_INT 3
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 1
41343: PUSH
41344: LD_INT 3
41346: PUSH
41347: EMPTY
41348: LIST
41349: LIST
41350: PUSH
41351: LD_INT 0
41353: PUSH
41354: LD_INT 3
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 1
41363: NEG
41364: PUSH
41365: LD_INT 2
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PUSH
41372: LD_INT 3
41374: NEG
41375: PUSH
41376: LD_INT 2
41378: NEG
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: LD_INT 3
41386: NEG
41387: PUSH
41388: LD_INT 3
41390: NEG
41391: PUSH
41392: EMPTY
41393: LIST
41394: LIST
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: LIST
41400: LIST
41401: LIST
41402: LIST
41403: LIST
41404: LIST
41405: LIST
41406: LIST
41407: LIST
41408: LIST
41409: LIST
41410: LIST
41411: LIST
41412: LIST
41413: LIST
41414: LIST
41415: LIST
41416: LIST
41417: LIST
41418: LIST
41419: LIST
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41427: LD_ADDR_VAR 0 43
41431: PUSH
41432: LD_INT 0
41434: PUSH
41435: LD_INT 0
41437: PUSH
41438: EMPTY
41439: LIST
41440: LIST
41441: PUSH
41442: LD_INT 0
41444: PUSH
41445: LD_INT 1
41447: NEG
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 1
41455: PUSH
41456: LD_INT 0
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 1
41465: PUSH
41466: LD_INT 1
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 0
41475: PUSH
41476: LD_INT 1
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 1
41485: NEG
41486: PUSH
41487: LD_INT 0
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 1
41496: NEG
41497: PUSH
41498: LD_INT 1
41500: NEG
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: LD_INT 1
41508: NEG
41509: PUSH
41510: LD_INT 2
41512: NEG
41513: PUSH
41514: EMPTY
41515: LIST
41516: LIST
41517: PUSH
41518: LD_INT 0
41520: PUSH
41521: LD_INT 2
41523: NEG
41524: PUSH
41525: EMPTY
41526: LIST
41527: LIST
41528: PUSH
41529: LD_INT 1
41531: PUSH
41532: LD_INT 1
41534: NEG
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: LD_INT 2
41542: PUSH
41543: LD_INT 0
41545: PUSH
41546: EMPTY
41547: LIST
41548: LIST
41549: PUSH
41550: LD_INT 2
41552: PUSH
41553: LD_INT 1
41555: PUSH
41556: EMPTY
41557: LIST
41558: LIST
41559: PUSH
41560: LD_INT 1
41562: PUSH
41563: LD_INT 2
41565: PUSH
41566: EMPTY
41567: LIST
41568: LIST
41569: PUSH
41570: LD_INT 0
41572: PUSH
41573: LD_INT 2
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 1
41582: NEG
41583: PUSH
41584: LD_INT 1
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 2
41593: NEG
41594: PUSH
41595: LD_INT 0
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 2
41604: NEG
41605: PUSH
41606: LD_INT 1
41608: NEG
41609: PUSH
41610: EMPTY
41611: LIST
41612: LIST
41613: PUSH
41614: LD_INT 1
41616: NEG
41617: PUSH
41618: LD_INT 3
41620: NEG
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 0
41628: PUSH
41629: LD_INT 3
41631: NEG
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 1
41639: PUSH
41640: LD_INT 2
41642: NEG
41643: PUSH
41644: EMPTY
41645: LIST
41646: LIST
41647: PUSH
41648: LD_INT 2
41650: PUSH
41651: LD_INT 1
41653: NEG
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 3
41661: PUSH
41662: LD_INT 0
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: LD_INT 3
41671: PUSH
41672: LD_INT 1
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: PUSH
41679: LD_INT 1
41681: PUSH
41682: LD_INT 3
41684: PUSH
41685: EMPTY
41686: LIST
41687: LIST
41688: PUSH
41689: LD_INT 0
41691: PUSH
41692: LD_INT 3
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: LD_INT 1
41701: NEG
41702: PUSH
41703: LD_INT 2
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: LD_INT 2
41712: NEG
41713: PUSH
41714: LD_INT 1
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: PUSH
41721: LD_INT 3
41723: NEG
41724: PUSH
41725: LD_INT 0
41727: PUSH
41728: EMPTY
41729: LIST
41730: LIST
41731: PUSH
41732: LD_INT 3
41734: NEG
41735: PUSH
41736: LD_INT 1
41738: NEG
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: EMPTY
41745: LIST
41746: LIST
41747: LIST
41748: LIST
41749: LIST
41750: LIST
41751: LIST
41752: LIST
41753: LIST
41754: LIST
41755: LIST
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: LIST
41766: LIST
41767: LIST
41768: LIST
41769: LIST
41770: LIST
41771: LIST
41772: LIST
41773: LIST
41774: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41775: LD_ADDR_VAR 0 44
41779: PUSH
41780: LD_INT 0
41782: PUSH
41783: LD_INT 0
41785: PUSH
41786: EMPTY
41787: LIST
41788: LIST
41789: PUSH
41790: LD_INT 0
41792: PUSH
41793: LD_INT 1
41795: NEG
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 1
41803: PUSH
41804: LD_INT 0
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 1
41813: PUSH
41814: LD_INT 1
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 0
41823: PUSH
41824: LD_INT 1
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: LD_INT 1
41833: NEG
41834: PUSH
41835: LD_INT 0
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 1
41844: NEG
41845: PUSH
41846: LD_INT 1
41848: NEG
41849: PUSH
41850: EMPTY
41851: LIST
41852: LIST
41853: PUSH
41854: LD_INT 1
41856: NEG
41857: PUSH
41858: LD_INT 2
41860: NEG
41861: PUSH
41862: EMPTY
41863: LIST
41864: LIST
41865: PUSH
41866: LD_INT 1
41868: PUSH
41869: LD_INT 1
41871: NEG
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 2
41879: PUSH
41880: LD_INT 0
41882: PUSH
41883: EMPTY
41884: LIST
41885: LIST
41886: PUSH
41887: LD_INT 2
41889: PUSH
41890: LD_INT 1
41892: PUSH
41893: EMPTY
41894: LIST
41895: LIST
41896: PUSH
41897: LD_INT 2
41899: PUSH
41900: LD_INT 2
41902: PUSH
41903: EMPTY
41904: LIST
41905: LIST
41906: PUSH
41907: LD_INT 1
41909: PUSH
41910: LD_INT 2
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: PUSH
41917: LD_INT 1
41919: NEG
41920: PUSH
41921: LD_INT 1
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 2
41930: NEG
41931: PUSH
41932: LD_INT 0
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PUSH
41939: LD_INT 2
41941: NEG
41942: PUSH
41943: LD_INT 1
41945: NEG
41946: PUSH
41947: EMPTY
41948: LIST
41949: LIST
41950: PUSH
41951: LD_INT 2
41953: NEG
41954: PUSH
41955: LD_INT 2
41957: NEG
41958: PUSH
41959: EMPTY
41960: LIST
41961: LIST
41962: PUSH
41963: LD_INT 2
41965: NEG
41966: PUSH
41967: LD_INT 3
41969: NEG
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 2
41977: PUSH
41978: LD_INT 1
41980: NEG
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 3
41988: PUSH
41989: LD_INT 0
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 3
41998: PUSH
41999: LD_INT 1
42001: PUSH
42002: EMPTY
42003: LIST
42004: LIST
42005: PUSH
42006: LD_INT 3
42008: PUSH
42009: LD_INT 2
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 3
42018: PUSH
42019: LD_INT 3
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 2
42028: PUSH
42029: LD_INT 3
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 2
42038: NEG
42039: PUSH
42040: LD_INT 1
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: LD_INT 3
42049: NEG
42050: PUSH
42051: LD_INT 0
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 3
42060: NEG
42061: PUSH
42062: LD_INT 1
42064: NEG
42065: PUSH
42066: EMPTY
42067: LIST
42068: LIST
42069: PUSH
42070: LD_INT 3
42072: NEG
42073: PUSH
42074: LD_INT 2
42076: NEG
42077: PUSH
42078: EMPTY
42079: LIST
42080: LIST
42081: PUSH
42082: LD_INT 3
42084: NEG
42085: PUSH
42086: LD_INT 3
42088: NEG
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: LIST
42116: LIST
42117: LIST
42118: LIST
42119: LIST
42120: LIST
42121: LIST
42122: LIST
42123: LIST
42124: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42125: LD_ADDR_VAR 0 45
42129: PUSH
42130: LD_INT 0
42132: PUSH
42133: LD_INT 0
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 0
42142: PUSH
42143: LD_INT 1
42145: NEG
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 1
42153: PUSH
42154: LD_INT 0
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 1
42163: PUSH
42164: LD_INT 1
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: PUSH
42171: LD_INT 0
42173: PUSH
42174: LD_INT 1
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: LD_INT 1
42183: NEG
42184: PUSH
42185: LD_INT 0
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 1
42194: NEG
42195: PUSH
42196: LD_INT 1
42198: NEG
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 1
42206: NEG
42207: PUSH
42208: LD_INT 2
42210: NEG
42211: PUSH
42212: EMPTY
42213: LIST
42214: LIST
42215: PUSH
42216: LD_INT 0
42218: PUSH
42219: LD_INT 2
42221: NEG
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 1
42229: PUSH
42230: LD_INT 1
42232: NEG
42233: PUSH
42234: EMPTY
42235: LIST
42236: LIST
42237: PUSH
42238: LD_INT 2
42240: PUSH
42241: LD_INT 1
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 2
42250: PUSH
42251: LD_INT 2
42253: PUSH
42254: EMPTY
42255: LIST
42256: LIST
42257: PUSH
42258: LD_INT 1
42260: PUSH
42261: LD_INT 2
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 0
42270: PUSH
42271: LD_INT 2
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: LD_INT 1
42280: NEG
42281: PUSH
42282: LD_INT 1
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 2
42291: NEG
42292: PUSH
42293: LD_INT 1
42295: NEG
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_INT 2
42303: NEG
42304: PUSH
42305: LD_INT 2
42307: NEG
42308: PUSH
42309: EMPTY
42310: LIST
42311: LIST
42312: PUSH
42313: LD_INT 2
42315: NEG
42316: PUSH
42317: LD_INT 3
42319: NEG
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 1
42327: NEG
42328: PUSH
42329: LD_INT 3
42331: NEG
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 0
42339: PUSH
42340: LD_INT 3
42342: NEG
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: LD_INT 1
42350: PUSH
42351: LD_INT 2
42353: NEG
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 3
42361: PUSH
42362: LD_INT 2
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 3
42371: PUSH
42372: LD_INT 3
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PUSH
42379: LD_INT 2
42381: PUSH
42382: LD_INT 3
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: LD_INT 1
42391: PUSH
42392: LD_INT 3
42394: PUSH
42395: EMPTY
42396: LIST
42397: LIST
42398: PUSH
42399: LD_INT 0
42401: PUSH
42402: LD_INT 3
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: LD_INT 1
42411: NEG
42412: PUSH
42413: LD_INT 2
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: PUSH
42420: LD_INT 3
42422: NEG
42423: PUSH
42424: LD_INT 2
42426: NEG
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 3
42434: NEG
42435: PUSH
42436: LD_INT 3
42438: NEG
42439: PUSH
42440: EMPTY
42441: LIST
42442: LIST
42443: PUSH
42444: EMPTY
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42475: LD_ADDR_VAR 0 46
42479: PUSH
42480: LD_INT 0
42482: PUSH
42483: LD_INT 0
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 0
42492: PUSH
42493: LD_INT 1
42495: NEG
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: LD_INT 1
42503: PUSH
42504: LD_INT 0
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 1
42513: PUSH
42514: LD_INT 1
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 0
42523: PUSH
42524: LD_INT 1
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 1
42533: NEG
42534: PUSH
42535: LD_INT 0
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 1
42544: NEG
42545: PUSH
42546: LD_INT 1
42548: NEG
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 1
42556: NEG
42557: PUSH
42558: LD_INT 2
42560: NEG
42561: PUSH
42562: EMPTY
42563: LIST
42564: LIST
42565: PUSH
42566: LD_INT 0
42568: PUSH
42569: LD_INT 2
42571: NEG
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 1
42579: PUSH
42580: LD_INT 1
42582: NEG
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: LD_INT 2
42590: PUSH
42591: LD_INT 0
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 2
42600: PUSH
42601: LD_INT 1
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: LD_INT 1
42610: PUSH
42611: LD_INT 2
42613: PUSH
42614: EMPTY
42615: LIST
42616: LIST
42617: PUSH
42618: LD_INT 0
42620: PUSH
42621: LD_INT 2
42623: PUSH
42624: EMPTY
42625: LIST
42626: LIST
42627: PUSH
42628: LD_INT 1
42630: NEG
42631: PUSH
42632: LD_INT 1
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: LD_INT 2
42641: NEG
42642: PUSH
42643: LD_INT 0
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 2
42652: NEG
42653: PUSH
42654: LD_INT 1
42656: NEG
42657: PUSH
42658: EMPTY
42659: LIST
42660: LIST
42661: PUSH
42662: LD_INT 1
42664: NEG
42665: PUSH
42666: LD_INT 3
42668: NEG
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: PUSH
42674: LD_INT 0
42676: PUSH
42677: LD_INT 3
42679: NEG
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: PUSH
42685: LD_INT 1
42687: PUSH
42688: LD_INT 2
42690: NEG
42691: PUSH
42692: EMPTY
42693: LIST
42694: LIST
42695: PUSH
42696: LD_INT 2
42698: PUSH
42699: LD_INT 1
42701: NEG
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 3
42709: PUSH
42710: LD_INT 0
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 3
42719: PUSH
42720: LD_INT 1
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 1
42729: PUSH
42730: LD_INT 3
42732: PUSH
42733: EMPTY
42734: LIST
42735: LIST
42736: PUSH
42737: LD_INT 0
42739: PUSH
42740: LD_INT 3
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 1
42749: NEG
42750: PUSH
42751: LD_INT 2
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 2
42760: NEG
42761: PUSH
42762: LD_INT 1
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 3
42771: NEG
42772: PUSH
42773: LD_INT 0
42775: PUSH
42776: EMPTY
42777: LIST
42778: LIST
42779: PUSH
42780: LD_INT 3
42782: NEG
42783: PUSH
42784: LD_INT 1
42786: NEG
42787: PUSH
42788: EMPTY
42789: LIST
42790: LIST
42791: PUSH
42792: EMPTY
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: LIST
42806: LIST
42807: LIST
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
42823: LD_ADDR_VAR 0 47
42827: PUSH
42828: LD_INT 0
42830: PUSH
42831: LD_INT 0
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 0
42840: PUSH
42841: LD_INT 1
42843: NEG
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 1
42851: PUSH
42852: LD_INT 0
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: LD_INT 1
42861: PUSH
42862: LD_INT 1
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 0
42871: PUSH
42872: LD_INT 1
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 1
42881: NEG
42882: PUSH
42883: LD_INT 0
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 1
42892: NEG
42893: PUSH
42894: LD_INT 1
42896: NEG
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 1
42904: NEG
42905: PUSH
42906: LD_INT 2
42908: NEG
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: LD_INT 0
42916: PUSH
42917: LD_INT 2
42919: NEG
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 1
42927: PUSH
42928: LD_INT 1
42930: NEG
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 2
42938: NEG
42939: PUSH
42940: LD_INT 1
42942: NEG
42943: PUSH
42944: EMPTY
42945: LIST
42946: LIST
42947: PUSH
42948: LD_INT 2
42950: NEG
42951: PUSH
42952: LD_INT 2
42954: NEG
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: LIST
42968: LIST
42969: LIST
42970: LIST
42971: LIST
42972: LIST
42973: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
42974: LD_ADDR_VAR 0 48
42978: PUSH
42979: LD_INT 0
42981: PUSH
42982: LD_INT 0
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 0
42991: PUSH
42992: LD_INT 1
42994: NEG
42995: PUSH
42996: EMPTY
42997: LIST
42998: LIST
42999: PUSH
43000: LD_INT 1
43002: PUSH
43003: LD_INT 0
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 1
43012: PUSH
43013: LD_INT 1
43015: PUSH
43016: EMPTY
43017: LIST
43018: LIST
43019: PUSH
43020: LD_INT 0
43022: PUSH
43023: LD_INT 1
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 1
43032: NEG
43033: PUSH
43034: LD_INT 0
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 1
43043: NEG
43044: PUSH
43045: LD_INT 1
43047: NEG
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: PUSH
43053: LD_INT 1
43055: NEG
43056: PUSH
43057: LD_INT 2
43059: NEG
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 0
43067: PUSH
43068: LD_INT 2
43070: NEG
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: LD_INT 1
43078: PUSH
43079: LD_INT 1
43081: NEG
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 2
43089: PUSH
43090: LD_INT 0
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: LD_INT 2
43099: PUSH
43100: LD_INT 1
43102: PUSH
43103: EMPTY
43104: LIST
43105: LIST
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: LIST
43111: LIST
43112: LIST
43113: LIST
43114: LIST
43115: LIST
43116: LIST
43117: LIST
43118: LIST
43119: LIST
43120: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43121: LD_ADDR_VAR 0 49
43125: PUSH
43126: LD_INT 0
43128: PUSH
43129: LD_INT 0
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: PUSH
43136: LD_INT 0
43138: PUSH
43139: LD_INT 1
43141: NEG
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 1
43149: PUSH
43150: LD_INT 0
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: LD_INT 1
43159: PUSH
43160: LD_INT 1
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: LD_INT 0
43169: PUSH
43170: LD_INT 1
43172: PUSH
43173: EMPTY
43174: LIST
43175: LIST
43176: PUSH
43177: LD_INT 1
43179: NEG
43180: PUSH
43181: LD_INT 0
43183: PUSH
43184: EMPTY
43185: LIST
43186: LIST
43187: PUSH
43188: LD_INT 1
43190: NEG
43191: PUSH
43192: LD_INT 1
43194: NEG
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 1
43202: PUSH
43203: LD_INT 1
43205: NEG
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 2
43213: PUSH
43214: LD_INT 0
43216: PUSH
43217: EMPTY
43218: LIST
43219: LIST
43220: PUSH
43221: LD_INT 2
43223: PUSH
43224: LD_INT 1
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 2
43233: PUSH
43234: LD_INT 2
43236: PUSH
43237: EMPTY
43238: LIST
43239: LIST
43240: PUSH
43241: LD_INT 1
43243: PUSH
43244: LD_INT 2
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: LIST
43255: LIST
43256: LIST
43257: LIST
43258: LIST
43259: LIST
43260: LIST
43261: LIST
43262: LIST
43263: LIST
43264: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43265: LD_ADDR_VAR 0 50
43269: PUSH
43270: LD_INT 0
43272: PUSH
43273: LD_INT 0
43275: PUSH
43276: EMPTY
43277: LIST
43278: LIST
43279: PUSH
43280: LD_INT 0
43282: PUSH
43283: LD_INT 1
43285: NEG
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: PUSH
43291: LD_INT 1
43293: PUSH
43294: LD_INT 0
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: LD_INT 1
43303: PUSH
43304: LD_INT 1
43306: PUSH
43307: EMPTY
43308: LIST
43309: LIST
43310: PUSH
43311: LD_INT 0
43313: PUSH
43314: LD_INT 1
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: PUSH
43321: LD_INT 1
43323: NEG
43324: PUSH
43325: LD_INT 0
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: PUSH
43332: LD_INT 1
43334: NEG
43335: PUSH
43336: LD_INT 1
43338: NEG
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 2
43346: PUSH
43347: LD_INT 1
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: LD_INT 2
43356: PUSH
43357: LD_INT 2
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: LD_INT 1
43366: PUSH
43367: LD_INT 2
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: LD_INT 0
43376: PUSH
43377: LD_INT 2
43379: PUSH
43380: EMPTY
43381: LIST
43382: LIST
43383: PUSH
43384: LD_INT 1
43386: NEG
43387: PUSH
43388: LD_INT 1
43390: PUSH
43391: EMPTY
43392: LIST
43393: LIST
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: LIST
43399: LIST
43400: LIST
43401: LIST
43402: LIST
43403: LIST
43404: LIST
43405: LIST
43406: LIST
43407: LIST
43408: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43409: LD_ADDR_VAR 0 51
43413: PUSH
43414: LD_INT 0
43416: PUSH
43417: LD_INT 0
43419: PUSH
43420: EMPTY
43421: LIST
43422: LIST
43423: PUSH
43424: LD_INT 0
43426: PUSH
43427: LD_INT 1
43429: NEG
43430: PUSH
43431: EMPTY
43432: LIST
43433: LIST
43434: PUSH
43435: LD_INT 1
43437: PUSH
43438: LD_INT 0
43440: PUSH
43441: EMPTY
43442: LIST
43443: LIST
43444: PUSH
43445: LD_INT 1
43447: PUSH
43448: LD_INT 1
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: LD_INT 0
43457: PUSH
43458: LD_INT 1
43460: PUSH
43461: EMPTY
43462: LIST
43463: LIST
43464: PUSH
43465: LD_INT 1
43467: NEG
43468: PUSH
43469: LD_INT 0
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: PUSH
43476: LD_INT 1
43478: NEG
43479: PUSH
43480: LD_INT 1
43482: NEG
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 1
43490: PUSH
43491: LD_INT 2
43493: PUSH
43494: EMPTY
43495: LIST
43496: LIST
43497: PUSH
43498: LD_INT 0
43500: PUSH
43501: LD_INT 2
43503: PUSH
43504: EMPTY
43505: LIST
43506: LIST
43507: PUSH
43508: LD_INT 1
43510: NEG
43511: PUSH
43512: LD_INT 1
43514: PUSH
43515: EMPTY
43516: LIST
43517: LIST
43518: PUSH
43519: LD_INT 2
43521: NEG
43522: PUSH
43523: LD_INT 0
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 2
43532: NEG
43533: PUSH
43534: LD_INT 1
43536: NEG
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: LIST
43548: LIST
43549: LIST
43550: LIST
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43556: LD_ADDR_VAR 0 52
43560: PUSH
43561: LD_INT 0
43563: PUSH
43564: LD_INT 0
43566: PUSH
43567: EMPTY
43568: LIST
43569: LIST
43570: PUSH
43571: LD_INT 0
43573: PUSH
43574: LD_INT 1
43576: NEG
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_INT 1
43584: PUSH
43585: LD_INT 0
43587: PUSH
43588: EMPTY
43589: LIST
43590: LIST
43591: PUSH
43592: LD_INT 1
43594: PUSH
43595: LD_INT 1
43597: PUSH
43598: EMPTY
43599: LIST
43600: LIST
43601: PUSH
43602: LD_INT 0
43604: PUSH
43605: LD_INT 1
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 1
43614: NEG
43615: PUSH
43616: LD_INT 0
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 1
43625: NEG
43626: PUSH
43627: LD_INT 1
43629: NEG
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 1
43637: NEG
43638: PUSH
43639: LD_INT 2
43641: NEG
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 1
43649: NEG
43650: PUSH
43651: LD_INT 1
43653: PUSH
43654: EMPTY
43655: LIST
43656: LIST
43657: PUSH
43658: LD_INT 2
43660: NEG
43661: PUSH
43662: LD_INT 0
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 2
43671: NEG
43672: PUSH
43673: LD_INT 1
43675: NEG
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 2
43683: NEG
43684: PUSH
43685: LD_INT 2
43687: NEG
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: LIST
43702: LIST
43703: LIST
43704: LIST
43705: LIST
43706: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43707: LD_ADDR_VAR 0 53
43711: PUSH
43712: LD_INT 0
43714: PUSH
43715: LD_INT 0
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 0
43724: PUSH
43725: LD_INT 1
43727: NEG
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 1
43735: PUSH
43736: LD_INT 0
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 1
43745: PUSH
43746: LD_INT 1
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 0
43755: PUSH
43756: LD_INT 1
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 1
43765: NEG
43766: PUSH
43767: LD_INT 0
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 1
43776: NEG
43777: PUSH
43778: LD_INT 1
43780: NEG
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 1
43788: NEG
43789: PUSH
43790: LD_INT 2
43792: NEG
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: PUSH
43798: LD_INT 0
43800: PUSH
43801: LD_INT 2
43803: NEG
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: PUSH
43809: LD_INT 1
43811: PUSH
43812: LD_INT 1
43814: NEG
43815: PUSH
43816: EMPTY
43817: LIST
43818: LIST
43819: PUSH
43820: LD_INT 2
43822: PUSH
43823: LD_INT 0
43825: PUSH
43826: EMPTY
43827: LIST
43828: LIST
43829: PUSH
43830: LD_INT 2
43832: PUSH
43833: LD_INT 1
43835: PUSH
43836: EMPTY
43837: LIST
43838: LIST
43839: PUSH
43840: LD_INT 2
43842: PUSH
43843: LD_INT 2
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 1
43852: PUSH
43853: LD_INT 2
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 0
43862: PUSH
43863: LD_INT 2
43865: PUSH
43866: EMPTY
43867: LIST
43868: LIST
43869: PUSH
43870: LD_INT 1
43872: NEG
43873: PUSH
43874: LD_INT 1
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: PUSH
43881: LD_INT 2
43883: NEG
43884: PUSH
43885: LD_INT 0
43887: PUSH
43888: EMPTY
43889: LIST
43890: LIST
43891: PUSH
43892: LD_INT 2
43894: NEG
43895: PUSH
43896: LD_INT 1
43898: NEG
43899: PUSH
43900: EMPTY
43901: LIST
43902: LIST
43903: PUSH
43904: LD_INT 2
43906: NEG
43907: PUSH
43908: LD_INT 2
43910: NEG
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: PUSH
43916: EMPTY
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43937: LD_ADDR_VAR 0 54
43941: PUSH
43942: LD_INT 0
43944: PUSH
43945: LD_INT 0
43947: PUSH
43948: EMPTY
43949: LIST
43950: LIST
43951: PUSH
43952: LD_INT 0
43954: PUSH
43955: LD_INT 1
43957: NEG
43958: PUSH
43959: EMPTY
43960: LIST
43961: LIST
43962: PUSH
43963: LD_INT 1
43965: PUSH
43966: LD_INT 0
43968: PUSH
43969: EMPTY
43970: LIST
43971: LIST
43972: PUSH
43973: LD_INT 1
43975: PUSH
43976: LD_INT 1
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 0
43985: PUSH
43986: LD_INT 1
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 1
43995: NEG
43996: PUSH
43997: LD_INT 0
43999: PUSH
44000: EMPTY
44001: LIST
44002: LIST
44003: PUSH
44004: LD_INT 1
44006: NEG
44007: PUSH
44008: LD_INT 1
44010: NEG
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: PUSH
44016: LD_INT 1
44018: NEG
44019: PUSH
44020: LD_INT 2
44022: NEG
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: LD_INT 0
44030: PUSH
44031: LD_INT 2
44033: NEG
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 1
44041: PUSH
44042: LD_INT 1
44044: NEG
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 2
44052: PUSH
44053: LD_INT 0
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PUSH
44060: LD_INT 2
44062: PUSH
44063: LD_INT 1
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: LD_INT 2
44072: PUSH
44073: LD_INT 2
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 1
44082: PUSH
44083: LD_INT 2
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 0
44092: PUSH
44093: LD_INT 2
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 1
44102: NEG
44103: PUSH
44104: LD_INT 1
44106: PUSH
44107: EMPTY
44108: LIST
44109: LIST
44110: PUSH
44111: LD_INT 2
44113: NEG
44114: PUSH
44115: LD_INT 0
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PUSH
44122: LD_INT 2
44124: NEG
44125: PUSH
44126: LD_INT 1
44128: NEG
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: PUSH
44134: LD_INT 2
44136: NEG
44137: PUSH
44138: LD_INT 2
44140: NEG
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: LIST
44160: LIST
44161: LIST
44162: LIST
44163: LIST
44164: LIST
44165: LIST
44166: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44167: LD_ADDR_VAR 0 55
44171: PUSH
44172: LD_INT 0
44174: PUSH
44175: LD_INT 0
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: LD_INT 0
44184: PUSH
44185: LD_INT 1
44187: NEG
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 1
44195: PUSH
44196: LD_INT 0
44198: PUSH
44199: EMPTY
44200: LIST
44201: LIST
44202: PUSH
44203: LD_INT 1
44205: PUSH
44206: LD_INT 1
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: LD_INT 0
44215: PUSH
44216: LD_INT 1
44218: PUSH
44219: EMPTY
44220: LIST
44221: LIST
44222: PUSH
44223: LD_INT 1
44225: NEG
44226: PUSH
44227: LD_INT 0
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 1
44236: NEG
44237: PUSH
44238: LD_INT 1
44240: NEG
44241: PUSH
44242: EMPTY
44243: LIST
44244: LIST
44245: PUSH
44246: LD_INT 1
44248: NEG
44249: PUSH
44250: LD_INT 2
44252: NEG
44253: PUSH
44254: EMPTY
44255: LIST
44256: LIST
44257: PUSH
44258: LD_INT 0
44260: PUSH
44261: LD_INT 2
44263: NEG
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 1
44271: PUSH
44272: LD_INT 1
44274: NEG
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 2
44282: PUSH
44283: LD_INT 0
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: LD_INT 2
44292: PUSH
44293: LD_INT 1
44295: PUSH
44296: EMPTY
44297: LIST
44298: LIST
44299: PUSH
44300: LD_INT 2
44302: PUSH
44303: LD_INT 2
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 1
44312: PUSH
44313: LD_INT 2
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 0
44322: PUSH
44323: LD_INT 2
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 1
44332: NEG
44333: PUSH
44334: LD_INT 1
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 2
44343: NEG
44344: PUSH
44345: LD_INT 0
44347: PUSH
44348: EMPTY
44349: LIST
44350: LIST
44351: PUSH
44352: LD_INT 2
44354: NEG
44355: PUSH
44356: LD_INT 1
44358: NEG
44359: PUSH
44360: EMPTY
44361: LIST
44362: LIST
44363: PUSH
44364: LD_INT 2
44366: NEG
44367: PUSH
44368: LD_INT 2
44370: NEG
44371: PUSH
44372: EMPTY
44373: LIST
44374: LIST
44375: PUSH
44376: EMPTY
44377: LIST
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44397: LD_ADDR_VAR 0 56
44401: PUSH
44402: LD_INT 0
44404: PUSH
44405: LD_INT 0
44407: PUSH
44408: EMPTY
44409: LIST
44410: LIST
44411: PUSH
44412: LD_INT 0
44414: PUSH
44415: LD_INT 1
44417: NEG
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 1
44425: PUSH
44426: LD_INT 0
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 1
44435: PUSH
44436: LD_INT 1
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 0
44445: PUSH
44446: LD_INT 1
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 1
44455: NEG
44456: PUSH
44457: LD_INT 0
44459: PUSH
44460: EMPTY
44461: LIST
44462: LIST
44463: PUSH
44464: LD_INT 1
44466: NEG
44467: PUSH
44468: LD_INT 1
44470: NEG
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 1
44478: NEG
44479: PUSH
44480: LD_INT 2
44482: NEG
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: LD_INT 0
44490: PUSH
44491: LD_INT 2
44493: NEG
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 1
44501: PUSH
44502: LD_INT 1
44504: NEG
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 2
44512: PUSH
44513: LD_INT 0
44515: PUSH
44516: EMPTY
44517: LIST
44518: LIST
44519: PUSH
44520: LD_INT 2
44522: PUSH
44523: LD_INT 1
44525: PUSH
44526: EMPTY
44527: LIST
44528: LIST
44529: PUSH
44530: LD_INT 2
44532: PUSH
44533: LD_INT 2
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: PUSH
44540: LD_INT 1
44542: PUSH
44543: LD_INT 2
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 0
44552: PUSH
44553: LD_INT 2
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 1
44562: NEG
44563: PUSH
44564: LD_INT 1
44566: PUSH
44567: EMPTY
44568: LIST
44569: LIST
44570: PUSH
44571: LD_INT 2
44573: NEG
44574: PUSH
44575: LD_INT 0
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 2
44584: NEG
44585: PUSH
44586: LD_INT 1
44588: NEG
44589: PUSH
44590: EMPTY
44591: LIST
44592: LIST
44593: PUSH
44594: LD_INT 2
44596: NEG
44597: PUSH
44598: LD_INT 2
44600: NEG
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: LIST
44610: LIST
44611: LIST
44612: LIST
44613: LIST
44614: LIST
44615: LIST
44616: LIST
44617: LIST
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44627: LD_ADDR_VAR 0 57
44631: PUSH
44632: LD_INT 0
44634: PUSH
44635: LD_INT 0
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 0
44644: PUSH
44645: LD_INT 1
44647: NEG
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: LD_INT 1
44655: PUSH
44656: LD_INT 0
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 1
44665: PUSH
44666: LD_INT 1
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 0
44675: PUSH
44676: LD_INT 1
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 1
44685: NEG
44686: PUSH
44687: LD_INT 0
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 1
44696: NEG
44697: PUSH
44698: LD_INT 1
44700: NEG
44701: PUSH
44702: EMPTY
44703: LIST
44704: LIST
44705: PUSH
44706: LD_INT 1
44708: NEG
44709: PUSH
44710: LD_INT 2
44712: NEG
44713: PUSH
44714: EMPTY
44715: LIST
44716: LIST
44717: PUSH
44718: LD_INT 0
44720: PUSH
44721: LD_INT 2
44723: NEG
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 1
44731: PUSH
44732: LD_INT 1
44734: NEG
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 2
44742: PUSH
44743: LD_INT 0
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: LD_INT 2
44752: PUSH
44753: LD_INT 1
44755: PUSH
44756: EMPTY
44757: LIST
44758: LIST
44759: PUSH
44760: LD_INT 2
44762: PUSH
44763: LD_INT 2
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 1
44772: PUSH
44773: LD_INT 2
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: PUSH
44780: LD_INT 0
44782: PUSH
44783: LD_INT 2
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 1
44792: NEG
44793: PUSH
44794: LD_INT 1
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 2
44803: NEG
44804: PUSH
44805: LD_INT 0
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 2
44814: NEG
44815: PUSH
44816: LD_INT 1
44818: NEG
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 2
44826: NEG
44827: PUSH
44828: LD_INT 2
44830: NEG
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: EMPTY
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44857: LD_ADDR_VAR 0 58
44861: PUSH
44862: LD_INT 0
44864: PUSH
44865: LD_INT 0
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 0
44874: PUSH
44875: LD_INT 1
44877: NEG
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 1
44885: PUSH
44886: LD_INT 0
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 1
44895: PUSH
44896: LD_INT 1
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 0
44905: PUSH
44906: LD_INT 1
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 1
44915: NEG
44916: PUSH
44917: LD_INT 0
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 1
44926: NEG
44927: PUSH
44928: LD_INT 1
44930: NEG
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 1
44938: NEG
44939: PUSH
44940: LD_INT 2
44942: NEG
44943: PUSH
44944: EMPTY
44945: LIST
44946: LIST
44947: PUSH
44948: LD_INT 0
44950: PUSH
44951: LD_INT 2
44953: NEG
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 1
44961: PUSH
44962: LD_INT 1
44964: NEG
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 2
44972: PUSH
44973: LD_INT 0
44975: PUSH
44976: EMPTY
44977: LIST
44978: LIST
44979: PUSH
44980: LD_INT 2
44982: PUSH
44983: LD_INT 1
44985: PUSH
44986: EMPTY
44987: LIST
44988: LIST
44989: PUSH
44990: LD_INT 2
44992: PUSH
44993: LD_INT 2
44995: PUSH
44996: EMPTY
44997: LIST
44998: LIST
44999: PUSH
45000: LD_INT 1
45002: PUSH
45003: LD_INT 2
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 0
45012: PUSH
45013: LD_INT 2
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 1
45022: NEG
45023: PUSH
45024: LD_INT 1
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 2
45033: NEG
45034: PUSH
45035: LD_INT 0
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 2
45044: NEG
45045: PUSH
45046: LD_INT 1
45048: NEG
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 2
45056: NEG
45057: PUSH
45058: LD_INT 2
45060: NEG
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: LIST
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45087: LD_ADDR_VAR 0 59
45091: PUSH
45092: LD_INT 0
45094: PUSH
45095: LD_INT 0
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: PUSH
45102: LD_INT 0
45104: PUSH
45105: LD_INT 1
45107: NEG
45108: PUSH
45109: EMPTY
45110: LIST
45111: LIST
45112: PUSH
45113: LD_INT 1
45115: PUSH
45116: LD_INT 0
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 1
45125: PUSH
45126: LD_INT 1
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 0
45135: PUSH
45136: LD_INT 1
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 1
45145: NEG
45146: PUSH
45147: LD_INT 0
45149: PUSH
45150: EMPTY
45151: LIST
45152: LIST
45153: PUSH
45154: LD_INT 1
45156: NEG
45157: PUSH
45158: LD_INT 1
45160: NEG
45161: PUSH
45162: EMPTY
45163: LIST
45164: LIST
45165: PUSH
45166: EMPTY
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: LIST
45174: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45175: LD_ADDR_VAR 0 60
45179: PUSH
45180: LD_INT 0
45182: PUSH
45183: LD_INT 0
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 0
45192: PUSH
45193: LD_INT 1
45195: NEG
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 1
45203: PUSH
45204: LD_INT 0
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 1
45213: PUSH
45214: LD_INT 1
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 0
45223: PUSH
45224: LD_INT 1
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 1
45233: NEG
45234: PUSH
45235: LD_INT 0
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 1
45244: NEG
45245: PUSH
45246: LD_INT 1
45248: NEG
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: EMPTY
45255: LIST
45256: LIST
45257: LIST
45258: LIST
45259: LIST
45260: LIST
45261: LIST
45262: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45263: LD_ADDR_VAR 0 61
45267: PUSH
45268: LD_INT 0
45270: PUSH
45271: LD_INT 0
45273: PUSH
45274: EMPTY
45275: LIST
45276: LIST
45277: PUSH
45278: LD_INT 0
45280: PUSH
45281: LD_INT 1
45283: NEG
45284: PUSH
45285: EMPTY
45286: LIST
45287: LIST
45288: PUSH
45289: LD_INT 1
45291: PUSH
45292: LD_INT 0
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 1
45301: PUSH
45302: LD_INT 1
45304: PUSH
45305: EMPTY
45306: LIST
45307: LIST
45308: PUSH
45309: LD_INT 0
45311: PUSH
45312: LD_INT 1
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 1
45321: NEG
45322: PUSH
45323: LD_INT 0
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 1
45332: NEG
45333: PUSH
45334: LD_INT 1
45336: NEG
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45351: LD_ADDR_VAR 0 62
45355: PUSH
45356: LD_INT 0
45358: PUSH
45359: LD_INT 0
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: PUSH
45366: LD_INT 0
45368: PUSH
45369: LD_INT 1
45371: NEG
45372: PUSH
45373: EMPTY
45374: LIST
45375: LIST
45376: PUSH
45377: LD_INT 1
45379: PUSH
45380: LD_INT 0
45382: PUSH
45383: EMPTY
45384: LIST
45385: LIST
45386: PUSH
45387: LD_INT 1
45389: PUSH
45390: LD_INT 1
45392: PUSH
45393: EMPTY
45394: LIST
45395: LIST
45396: PUSH
45397: LD_INT 0
45399: PUSH
45400: LD_INT 1
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 1
45409: NEG
45410: PUSH
45411: LD_INT 0
45413: PUSH
45414: EMPTY
45415: LIST
45416: LIST
45417: PUSH
45418: LD_INT 1
45420: NEG
45421: PUSH
45422: LD_INT 1
45424: NEG
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: EMPTY
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45439: LD_ADDR_VAR 0 63
45443: PUSH
45444: LD_INT 0
45446: PUSH
45447: LD_INT 0
45449: PUSH
45450: EMPTY
45451: LIST
45452: LIST
45453: PUSH
45454: LD_INT 0
45456: PUSH
45457: LD_INT 1
45459: NEG
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 1
45467: PUSH
45468: LD_INT 0
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 1
45477: PUSH
45478: LD_INT 1
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 0
45487: PUSH
45488: LD_INT 1
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 1
45497: NEG
45498: PUSH
45499: LD_INT 0
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 1
45508: NEG
45509: PUSH
45510: LD_INT 1
45512: NEG
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: LIST
45522: LIST
45523: LIST
45524: LIST
45525: LIST
45526: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45527: LD_ADDR_VAR 0 64
45531: PUSH
45532: LD_INT 0
45534: PUSH
45535: LD_INT 0
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 0
45544: PUSH
45545: LD_INT 1
45547: NEG
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 1
45555: PUSH
45556: LD_INT 0
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 1
45565: PUSH
45566: LD_INT 1
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 0
45575: PUSH
45576: LD_INT 1
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 1
45585: NEG
45586: PUSH
45587: LD_INT 0
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 1
45596: NEG
45597: PUSH
45598: LD_INT 1
45600: NEG
45601: PUSH
45602: EMPTY
45603: LIST
45604: LIST
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: LIST
45613: LIST
45614: ST_TO_ADDR
// end ; 1 :
45615: GO 51512
45617: LD_INT 1
45619: DOUBLE
45620: EQUAL
45621: IFTRUE 45625
45623: GO 48248
45625: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45626: LD_ADDR_VAR 0 11
45630: PUSH
45631: LD_INT 1
45633: NEG
45634: PUSH
45635: LD_INT 3
45637: NEG
45638: PUSH
45639: EMPTY
45640: LIST
45641: LIST
45642: PUSH
45643: LD_INT 0
45645: PUSH
45646: LD_INT 3
45648: NEG
45649: PUSH
45650: EMPTY
45651: LIST
45652: LIST
45653: PUSH
45654: LD_INT 1
45656: PUSH
45657: LD_INT 2
45659: NEG
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: LIST
45669: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45670: LD_ADDR_VAR 0 12
45674: PUSH
45675: LD_INT 2
45677: PUSH
45678: LD_INT 1
45680: NEG
45681: PUSH
45682: EMPTY
45683: LIST
45684: LIST
45685: PUSH
45686: LD_INT 3
45688: PUSH
45689: LD_INT 0
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 3
45698: PUSH
45699: LD_INT 1
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: EMPTY
45707: LIST
45708: LIST
45709: LIST
45710: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45711: LD_ADDR_VAR 0 13
45715: PUSH
45716: LD_INT 3
45718: PUSH
45719: LD_INT 2
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 3
45728: PUSH
45729: LD_INT 3
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 2
45738: PUSH
45739: LD_INT 3
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: EMPTY
45747: LIST
45748: LIST
45749: LIST
45750: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
45751: LD_ADDR_VAR 0 14
45755: PUSH
45756: LD_INT 1
45758: PUSH
45759: LD_INT 3
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 0
45768: PUSH
45769: LD_INT 3
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 1
45778: NEG
45779: PUSH
45780: LD_INT 2
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: LIST
45791: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45792: LD_ADDR_VAR 0 15
45796: PUSH
45797: LD_INT 2
45799: NEG
45800: PUSH
45801: LD_INT 1
45803: PUSH
45804: EMPTY
45805: LIST
45806: LIST
45807: PUSH
45808: LD_INT 3
45810: NEG
45811: PUSH
45812: LD_INT 0
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 3
45821: NEG
45822: PUSH
45823: LD_INT 1
45825: NEG
45826: PUSH
45827: EMPTY
45828: LIST
45829: LIST
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: LIST
45835: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45836: LD_ADDR_VAR 0 16
45840: PUSH
45841: LD_INT 2
45843: NEG
45844: PUSH
45845: LD_INT 3
45847: NEG
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 3
45855: NEG
45856: PUSH
45857: LD_INT 2
45859: NEG
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 3
45867: NEG
45868: PUSH
45869: LD_INT 3
45871: NEG
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: EMPTY
45878: LIST
45879: LIST
45880: LIST
45881: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
45882: LD_ADDR_VAR 0 17
45886: PUSH
45887: LD_INT 1
45889: NEG
45890: PUSH
45891: LD_INT 3
45893: NEG
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 0
45901: PUSH
45902: LD_INT 3
45904: NEG
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 1
45912: PUSH
45913: LD_INT 2
45915: NEG
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: LIST
45925: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
45926: LD_ADDR_VAR 0 18
45930: PUSH
45931: LD_INT 2
45933: PUSH
45934: LD_INT 1
45936: NEG
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 3
45944: PUSH
45945: LD_INT 0
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 3
45954: PUSH
45955: LD_INT 1
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: LIST
45966: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
45967: LD_ADDR_VAR 0 19
45971: PUSH
45972: LD_INT 3
45974: PUSH
45975: LD_INT 2
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 3
45984: PUSH
45985: LD_INT 3
45987: PUSH
45988: EMPTY
45989: LIST
45990: LIST
45991: PUSH
45992: LD_INT 2
45994: PUSH
45995: LD_INT 3
45997: PUSH
45998: EMPTY
45999: LIST
46000: LIST
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: LIST
46006: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46007: LD_ADDR_VAR 0 20
46011: PUSH
46012: LD_INT 1
46014: PUSH
46015: LD_INT 3
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 0
46024: PUSH
46025: LD_INT 3
46027: PUSH
46028: EMPTY
46029: LIST
46030: LIST
46031: PUSH
46032: LD_INT 1
46034: NEG
46035: PUSH
46036: LD_INT 2
46038: PUSH
46039: EMPTY
46040: LIST
46041: LIST
46042: PUSH
46043: EMPTY
46044: LIST
46045: LIST
46046: LIST
46047: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46048: LD_ADDR_VAR 0 21
46052: PUSH
46053: LD_INT 2
46055: NEG
46056: PUSH
46057: LD_INT 1
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 3
46066: NEG
46067: PUSH
46068: LD_INT 0
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 3
46077: NEG
46078: PUSH
46079: LD_INT 1
46081: NEG
46082: PUSH
46083: EMPTY
46084: LIST
46085: LIST
46086: PUSH
46087: EMPTY
46088: LIST
46089: LIST
46090: LIST
46091: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46092: LD_ADDR_VAR 0 22
46096: PUSH
46097: LD_INT 2
46099: NEG
46100: PUSH
46101: LD_INT 3
46103: NEG
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 3
46111: NEG
46112: PUSH
46113: LD_INT 2
46115: NEG
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 3
46123: NEG
46124: PUSH
46125: LD_INT 3
46127: NEG
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: LIST
46137: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
46138: LD_ADDR_VAR 0 23
46142: PUSH
46143: LD_INT 0
46145: PUSH
46146: LD_INT 3
46148: NEG
46149: PUSH
46150: EMPTY
46151: LIST
46152: LIST
46153: PUSH
46154: LD_INT 1
46156: NEG
46157: PUSH
46158: LD_INT 4
46160: NEG
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 1
46168: PUSH
46169: LD_INT 3
46171: NEG
46172: PUSH
46173: EMPTY
46174: LIST
46175: LIST
46176: PUSH
46177: EMPTY
46178: LIST
46179: LIST
46180: LIST
46181: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
46182: LD_ADDR_VAR 0 24
46186: PUSH
46187: LD_INT 3
46189: PUSH
46190: LD_INT 0
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 3
46199: PUSH
46200: LD_INT 1
46202: NEG
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 4
46210: PUSH
46211: LD_INT 1
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: LIST
46222: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
46223: LD_ADDR_VAR 0 25
46227: PUSH
46228: LD_INT 3
46230: PUSH
46231: LD_INT 3
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 4
46240: PUSH
46241: LD_INT 3
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 3
46250: PUSH
46251: LD_INT 4
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: LIST
46262: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
46263: LD_ADDR_VAR 0 26
46267: PUSH
46268: LD_INT 0
46270: PUSH
46271: LD_INT 3
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 1
46280: PUSH
46281: LD_INT 4
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 1
46290: NEG
46291: PUSH
46292: LD_INT 3
46294: PUSH
46295: EMPTY
46296: LIST
46297: LIST
46298: PUSH
46299: EMPTY
46300: LIST
46301: LIST
46302: LIST
46303: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
46304: LD_ADDR_VAR 0 27
46308: PUSH
46309: LD_INT 3
46311: NEG
46312: PUSH
46313: LD_INT 0
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 3
46322: NEG
46323: PUSH
46324: LD_INT 1
46326: PUSH
46327: EMPTY
46328: LIST
46329: LIST
46330: PUSH
46331: LD_INT 4
46333: NEG
46334: PUSH
46335: LD_INT 1
46337: NEG
46338: PUSH
46339: EMPTY
46340: LIST
46341: LIST
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: LIST
46347: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
46348: LD_ADDR_VAR 0 28
46352: PUSH
46353: LD_INT 3
46355: NEG
46356: PUSH
46357: LD_INT 3
46359: NEG
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: PUSH
46365: LD_INT 3
46367: NEG
46368: PUSH
46369: LD_INT 4
46371: NEG
46372: PUSH
46373: EMPTY
46374: LIST
46375: LIST
46376: PUSH
46377: LD_INT 4
46379: NEG
46380: PUSH
46381: LD_INT 3
46383: NEG
46384: PUSH
46385: EMPTY
46386: LIST
46387: LIST
46388: PUSH
46389: EMPTY
46390: LIST
46391: LIST
46392: LIST
46393: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
46394: LD_ADDR_VAR 0 29
46398: PUSH
46399: LD_INT 1
46401: NEG
46402: PUSH
46403: LD_INT 3
46405: NEG
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 0
46413: PUSH
46414: LD_INT 3
46416: NEG
46417: PUSH
46418: EMPTY
46419: LIST
46420: LIST
46421: PUSH
46422: LD_INT 1
46424: PUSH
46425: LD_INT 2
46427: NEG
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 1
46435: NEG
46436: PUSH
46437: LD_INT 4
46439: NEG
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 0
46447: PUSH
46448: LD_INT 4
46450: NEG
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 1
46458: PUSH
46459: LD_INT 3
46461: NEG
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 1
46469: NEG
46470: PUSH
46471: LD_INT 5
46473: NEG
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 0
46481: PUSH
46482: LD_INT 5
46484: NEG
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 1
46492: PUSH
46493: LD_INT 4
46495: NEG
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 1
46503: NEG
46504: PUSH
46505: LD_INT 6
46507: NEG
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: LD_INT 0
46515: PUSH
46516: LD_INT 6
46518: NEG
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 1
46526: PUSH
46527: LD_INT 5
46529: NEG
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
46549: LD_ADDR_VAR 0 30
46553: PUSH
46554: LD_INT 2
46556: PUSH
46557: LD_INT 1
46559: NEG
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 3
46567: PUSH
46568: LD_INT 0
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 3
46577: PUSH
46578: LD_INT 1
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 3
46587: PUSH
46588: LD_INT 1
46590: NEG
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 4
46598: PUSH
46599: LD_INT 0
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 4
46608: PUSH
46609: LD_INT 1
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: PUSH
46616: LD_INT 4
46618: PUSH
46619: LD_INT 1
46621: NEG
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 5
46629: PUSH
46630: LD_INT 0
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 5
46639: PUSH
46640: LD_INT 1
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 5
46649: PUSH
46650: LD_INT 1
46652: NEG
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 6
46660: PUSH
46661: LD_INT 0
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 6
46670: PUSH
46671: LD_INT 1
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
46692: LD_ADDR_VAR 0 31
46696: PUSH
46697: LD_INT 3
46699: PUSH
46700: LD_INT 2
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 3
46709: PUSH
46710: LD_INT 3
46712: PUSH
46713: EMPTY
46714: LIST
46715: LIST
46716: PUSH
46717: LD_INT 2
46719: PUSH
46720: LD_INT 3
46722: PUSH
46723: EMPTY
46724: LIST
46725: LIST
46726: PUSH
46727: LD_INT 4
46729: PUSH
46730: LD_INT 3
46732: PUSH
46733: EMPTY
46734: LIST
46735: LIST
46736: PUSH
46737: LD_INT 4
46739: PUSH
46740: LD_INT 4
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 3
46749: PUSH
46750: LD_INT 4
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 5
46759: PUSH
46760: LD_INT 4
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 5
46769: PUSH
46770: LD_INT 5
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 4
46779: PUSH
46780: LD_INT 5
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 6
46789: PUSH
46790: LD_INT 5
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 6
46799: PUSH
46800: LD_INT 6
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 5
46809: PUSH
46810: LD_INT 6
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: LIST
46821: LIST
46822: LIST
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
46831: LD_ADDR_VAR 0 32
46835: PUSH
46836: LD_INT 1
46838: PUSH
46839: LD_INT 3
46841: PUSH
46842: EMPTY
46843: LIST
46844: LIST
46845: PUSH
46846: LD_INT 0
46848: PUSH
46849: LD_INT 3
46851: PUSH
46852: EMPTY
46853: LIST
46854: LIST
46855: PUSH
46856: LD_INT 1
46858: NEG
46859: PUSH
46860: LD_INT 2
46862: PUSH
46863: EMPTY
46864: LIST
46865: LIST
46866: PUSH
46867: LD_INT 1
46869: PUSH
46870: LD_INT 4
46872: PUSH
46873: EMPTY
46874: LIST
46875: LIST
46876: PUSH
46877: LD_INT 0
46879: PUSH
46880: LD_INT 4
46882: PUSH
46883: EMPTY
46884: LIST
46885: LIST
46886: PUSH
46887: LD_INT 1
46889: NEG
46890: PUSH
46891: LD_INT 3
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 1
46900: PUSH
46901: LD_INT 5
46903: PUSH
46904: EMPTY
46905: LIST
46906: LIST
46907: PUSH
46908: LD_INT 0
46910: PUSH
46911: LD_INT 5
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 1
46920: NEG
46921: PUSH
46922: LD_INT 4
46924: PUSH
46925: EMPTY
46926: LIST
46927: LIST
46928: PUSH
46929: LD_INT 1
46931: PUSH
46932: LD_INT 6
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 0
46941: PUSH
46942: LD_INT 6
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 1
46951: NEG
46952: PUSH
46953: LD_INT 5
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: LIST
46964: LIST
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
46974: LD_ADDR_VAR 0 33
46978: PUSH
46979: LD_INT 2
46981: NEG
46982: PUSH
46983: LD_INT 1
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: PUSH
46990: LD_INT 3
46992: NEG
46993: PUSH
46994: LD_INT 0
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: LD_INT 3
47003: NEG
47004: PUSH
47005: LD_INT 1
47007: NEG
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 3
47015: NEG
47016: PUSH
47017: LD_INT 1
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 4
47026: NEG
47027: PUSH
47028: LD_INT 0
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 4
47037: NEG
47038: PUSH
47039: LD_INT 1
47041: NEG
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 4
47049: NEG
47050: PUSH
47051: LD_INT 1
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 5
47060: NEG
47061: PUSH
47062: LD_INT 0
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 5
47071: NEG
47072: PUSH
47073: LD_INT 1
47075: NEG
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 5
47083: NEG
47084: PUSH
47085: LD_INT 1
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 6
47094: NEG
47095: PUSH
47096: LD_INT 0
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 6
47105: NEG
47106: PUSH
47107: LD_INT 1
47109: NEG
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: PUSH
47115: EMPTY
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
47129: LD_ADDR_VAR 0 34
47133: PUSH
47134: LD_INT 2
47136: NEG
47137: PUSH
47138: LD_INT 3
47140: NEG
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 3
47148: NEG
47149: PUSH
47150: LD_INT 2
47152: NEG
47153: PUSH
47154: EMPTY
47155: LIST
47156: LIST
47157: PUSH
47158: LD_INT 3
47160: NEG
47161: PUSH
47162: LD_INT 3
47164: NEG
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 3
47172: NEG
47173: PUSH
47174: LD_INT 4
47176: NEG
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: LD_INT 4
47184: NEG
47185: PUSH
47186: LD_INT 3
47188: NEG
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 4
47196: NEG
47197: PUSH
47198: LD_INT 4
47200: NEG
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 4
47208: NEG
47209: PUSH
47210: LD_INT 5
47212: NEG
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 5
47220: NEG
47221: PUSH
47222: LD_INT 4
47224: NEG
47225: PUSH
47226: EMPTY
47227: LIST
47228: LIST
47229: PUSH
47230: LD_INT 5
47232: NEG
47233: PUSH
47234: LD_INT 5
47236: NEG
47237: PUSH
47238: EMPTY
47239: LIST
47240: LIST
47241: PUSH
47242: LD_INT 5
47244: NEG
47245: PUSH
47246: LD_INT 6
47248: NEG
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 6
47256: NEG
47257: PUSH
47258: LD_INT 5
47260: NEG
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 6
47268: NEG
47269: PUSH
47270: LD_INT 6
47272: NEG
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: EMPTY
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: LIST
47285: LIST
47286: LIST
47287: LIST
47288: LIST
47289: LIST
47290: LIST
47291: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
47292: LD_ADDR_VAR 0 41
47296: PUSH
47297: LD_INT 0
47299: PUSH
47300: LD_INT 2
47302: NEG
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 1
47310: NEG
47311: PUSH
47312: LD_INT 3
47314: NEG
47315: PUSH
47316: EMPTY
47317: LIST
47318: LIST
47319: PUSH
47320: LD_INT 1
47322: PUSH
47323: LD_INT 2
47325: NEG
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: EMPTY
47332: LIST
47333: LIST
47334: LIST
47335: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
47336: LD_ADDR_VAR 0 42
47340: PUSH
47341: LD_INT 2
47343: PUSH
47344: LD_INT 0
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 2
47353: PUSH
47354: LD_INT 1
47356: NEG
47357: PUSH
47358: EMPTY
47359: LIST
47360: LIST
47361: PUSH
47362: LD_INT 3
47364: PUSH
47365: LD_INT 1
47367: PUSH
47368: EMPTY
47369: LIST
47370: LIST
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: LIST
47376: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
47377: LD_ADDR_VAR 0 43
47381: PUSH
47382: LD_INT 2
47384: PUSH
47385: LD_INT 2
47387: PUSH
47388: EMPTY
47389: LIST
47390: LIST
47391: PUSH
47392: LD_INT 3
47394: PUSH
47395: LD_INT 2
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 2
47404: PUSH
47405: LD_INT 3
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: LIST
47416: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
47417: LD_ADDR_VAR 0 44
47421: PUSH
47422: LD_INT 0
47424: PUSH
47425: LD_INT 2
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: PUSH
47432: LD_INT 1
47434: PUSH
47435: LD_INT 3
47437: PUSH
47438: EMPTY
47439: LIST
47440: LIST
47441: PUSH
47442: LD_INT 1
47444: NEG
47445: PUSH
47446: LD_INT 2
47448: PUSH
47449: EMPTY
47450: LIST
47451: LIST
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: LIST
47457: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47458: LD_ADDR_VAR 0 45
47462: PUSH
47463: LD_INT 2
47465: NEG
47466: PUSH
47467: LD_INT 0
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 2
47476: NEG
47477: PUSH
47478: LD_INT 1
47480: PUSH
47481: EMPTY
47482: LIST
47483: LIST
47484: PUSH
47485: LD_INT 3
47487: NEG
47488: PUSH
47489: LD_INT 1
47491: NEG
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: LIST
47501: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
47502: LD_ADDR_VAR 0 46
47506: PUSH
47507: LD_INT 2
47509: NEG
47510: PUSH
47511: LD_INT 2
47513: NEG
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 2
47521: NEG
47522: PUSH
47523: LD_INT 3
47525: NEG
47526: PUSH
47527: EMPTY
47528: LIST
47529: LIST
47530: PUSH
47531: LD_INT 3
47533: NEG
47534: PUSH
47535: LD_INT 2
47537: NEG
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: EMPTY
47544: LIST
47545: LIST
47546: LIST
47547: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
47548: LD_ADDR_VAR 0 47
47552: PUSH
47553: LD_INT 2
47555: NEG
47556: PUSH
47557: LD_INT 3
47559: NEG
47560: PUSH
47561: EMPTY
47562: LIST
47563: LIST
47564: PUSH
47565: LD_INT 1
47567: NEG
47568: PUSH
47569: LD_INT 3
47571: NEG
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47581: LD_ADDR_VAR 0 48
47585: PUSH
47586: LD_INT 1
47588: PUSH
47589: LD_INT 2
47591: NEG
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 2
47599: PUSH
47600: LD_INT 1
47602: NEG
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
47612: LD_ADDR_VAR 0 49
47616: PUSH
47617: LD_INT 3
47619: PUSH
47620: LD_INT 1
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: PUSH
47627: LD_INT 3
47629: PUSH
47630: LD_INT 2
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
47641: LD_ADDR_VAR 0 50
47645: PUSH
47646: LD_INT 2
47648: PUSH
47649: LD_INT 3
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 1
47658: PUSH
47659: LD_INT 3
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: EMPTY
47667: LIST
47668: LIST
47669: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
47670: LD_ADDR_VAR 0 51
47674: PUSH
47675: LD_INT 1
47677: NEG
47678: PUSH
47679: LD_INT 2
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 2
47688: NEG
47689: PUSH
47690: LD_INT 1
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: EMPTY
47698: LIST
47699: LIST
47700: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
47701: LD_ADDR_VAR 0 52
47705: PUSH
47706: LD_INT 3
47708: NEG
47709: PUSH
47710: LD_INT 1
47712: NEG
47713: PUSH
47714: EMPTY
47715: LIST
47716: LIST
47717: PUSH
47718: LD_INT 3
47720: NEG
47721: PUSH
47722: LD_INT 2
47724: NEG
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47734: LD_ADDR_VAR 0 53
47738: PUSH
47739: LD_INT 1
47741: NEG
47742: PUSH
47743: LD_INT 3
47745: NEG
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 0
47753: PUSH
47754: LD_INT 3
47756: NEG
47757: PUSH
47758: EMPTY
47759: LIST
47760: LIST
47761: PUSH
47762: LD_INT 1
47764: PUSH
47765: LD_INT 2
47767: NEG
47768: PUSH
47769: EMPTY
47770: LIST
47771: LIST
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: LIST
47777: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47778: LD_ADDR_VAR 0 54
47782: PUSH
47783: LD_INT 2
47785: PUSH
47786: LD_INT 1
47788: NEG
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 3
47796: PUSH
47797: LD_INT 0
47799: PUSH
47800: EMPTY
47801: LIST
47802: LIST
47803: PUSH
47804: LD_INT 3
47806: PUSH
47807: LD_INT 1
47809: PUSH
47810: EMPTY
47811: LIST
47812: LIST
47813: PUSH
47814: EMPTY
47815: LIST
47816: LIST
47817: LIST
47818: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47819: LD_ADDR_VAR 0 55
47823: PUSH
47824: LD_INT 3
47826: PUSH
47827: LD_INT 2
47829: PUSH
47830: EMPTY
47831: LIST
47832: LIST
47833: PUSH
47834: LD_INT 3
47836: PUSH
47837: LD_INT 3
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 2
47846: PUSH
47847: LD_INT 3
47849: PUSH
47850: EMPTY
47851: LIST
47852: LIST
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: LIST
47858: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47859: LD_ADDR_VAR 0 56
47863: PUSH
47864: LD_INT 1
47866: PUSH
47867: LD_INT 3
47869: PUSH
47870: EMPTY
47871: LIST
47872: LIST
47873: PUSH
47874: LD_INT 0
47876: PUSH
47877: LD_INT 3
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 1
47886: NEG
47887: PUSH
47888: LD_INT 2
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: EMPTY
47896: LIST
47897: LIST
47898: LIST
47899: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47900: LD_ADDR_VAR 0 57
47904: PUSH
47905: LD_INT 2
47907: NEG
47908: PUSH
47909: LD_INT 1
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 3
47918: NEG
47919: PUSH
47920: LD_INT 0
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: LD_INT 3
47929: NEG
47930: PUSH
47931: LD_INT 1
47933: NEG
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: EMPTY
47940: LIST
47941: LIST
47942: LIST
47943: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47944: LD_ADDR_VAR 0 58
47948: PUSH
47949: LD_INT 2
47951: NEG
47952: PUSH
47953: LD_INT 3
47955: NEG
47956: PUSH
47957: EMPTY
47958: LIST
47959: LIST
47960: PUSH
47961: LD_INT 3
47963: NEG
47964: PUSH
47965: LD_INT 2
47967: NEG
47968: PUSH
47969: EMPTY
47970: LIST
47971: LIST
47972: PUSH
47973: LD_INT 3
47975: NEG
47976: PUSH
47977: LD_INT 3
47979: NEG
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: LIST
47989: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
47990: LD_ADDR_VAR 0 59
47994: PUSH
47995: LD_INT 1
47997: NEG
47998: PUSH
47999: LD_INT 2
48001: NEG
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: LD_INT 0
48009: PUSH
48010: LD_INT 2
48012: NEG
48013: PUSH
48014: EMPTY
48015: LIST
48016: LIST
48017: PUSH
48018: LD_INT 1
48020: PUSH
48021: LD_INT 1
48023: NEG
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: LIST
48033: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48034: LD_ADDR_VAR 0 60
48038: PUSH
48039: LD_INT 1
48041: PUSH
48042: LD_INT 1
48044: NEG
48045: PUSH
48046: EMPTY
48047: LIST
48048: LIST
48049: PUSH
48050: LD_INT 2
48052: PUSH
48053: LD_INT 0
48055: PUSH
48056: EMPTY
48057: LIST
48058: LIST
48059: PUSH
48060: LD_INT 2
48062: PUSH
48063: LD_INT 1
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: LIST
48074: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48075: LD_ADDR_VAR 0 61
48079: PUSH
48080: LD_INT 2
48082: PUSH
48083: LD_INT 1
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 2
48092: PUSH
48093: LD_INT 2
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 1
48102: PUSH
48103: LD_INT 2
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: LIST
48114: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48115: LD_ADDR_VAR 0 62
48119: PUSH
48120: LD_INT 1
48122: PUSH
48123: LD_INT 2
48125: PUSH
48126: EMPTY
48127: LIST
48128: LIST
48129: PUSH
48130: LD_INT 0
48132: PUSH
48133: LD_INT 2
48135: PUSH
48136: EMPTY
48137: LIST
48138: LIST
48139: PUSH
48140: LD_INT 1
48142: NEG
48143: PUSH
48144: LD_INT 1
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: EMPTY
48152: LIST
48153: LIST
48154: LIST
48155: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48156: LD_ADDR_VAR 0 63
48160: PUSH
48161: LD_INT 1
48163: NEG
48164: PUSH
48165: LD_INT 1
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 2
48174: NEG
48175: PUSH
48176: LD_INT 0
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 2
48185: NEG
48186: PUSH
48187: LD_INT 1
48189: NEG
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: EMPTY
48196: LIST
48197: LIST
48198: LIST
48199: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48200: LD_ADDR_VAR 0 64
48204: PUSH
48205: LD_INT 1
48207: NEG
48208: PUSH
48209: LD_INT 2
48211: NEG
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: PUSH
48217: LD_INT 2
48219: NEG
48220: PUSH
48221: LD_INT 1
48223: NEG
48224: PUSH
48225: EMPTY
48226: LIST
48227: LIST
48228: PUSH
48229: LD_INT 2
48231: NEG
48232: PUSH
48233: LD_INT 2
48235: NEG
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: LIST
48245: ST_TO_ADDR
// end ; 2 :
48246: GO 51512
48248: LD_INT 2
48250: DOUBLE
48251: EQUAL
48252: IFTRUE 48256
48254: GO 51511
48256: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
48257: LD_ADDR_VAR 0 29
48261: PUSH
48262: LD_INT 4
48264: PUSH
48265: LD_INT 0
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 4
48274: PUSH
48275: LD_INT 1
48277: NEG
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 5
48285: PUSH
48286: LD_INT 0
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 5
48295: PUSH
48296: LD_INT 1
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 4
48305: PUSH
48306: LD_INT 1
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 3
48315: PUSH
48316: LD_INT 0
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 3
48325: PUSH
48326: LD_INT 1
48328: NEG
48329: PUSH
48330: EMPTY
48331: LIST
48332: LIST
48333: PUSH
48334: LD_INT 3
48336: PUSH
48337: LD_INT 2
48339: NEG
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 5
48347: PUSH
48348: LD_INT 2
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 3
48357: PUSH
48358: LD_INT 3
48360: PUSH
48361: EMPTY
48362: LIST
48363: LIST
48364: PUSH
48365: LD_INT 3
48367: PUSH
48368: LD_INT 2
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 4
48377: PUSH
48378: LD_INT 3
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 4
48387: PUSH
48388: LD_INT 4
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 3
48397: PUSH
48398: LD_INT 4
48400: PUSH
48401: EMPTY
48402: LIST
48403: LIST
48404: PUSH
48405: LD_INT 2
48407: PUSH
48408: LD_INT 3
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 2
48417: PUSH
48418: LD_INT 2
48420: PUSH
48421: EMPTY
48422: LIST
48423: LIST
48424: PUSH
48425: LD_INT 4
48427: PUSH
48428: LD_INT 2
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 2
48437: PUSH
48438: LD_INT 4
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 0
48447: PUSH
48448: LD_INT 4
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 0
48457: PUSH
48458: LD_INT 3
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 1
48467: PUSH
48468: LD_INT 4
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 1
48477: PUSH
48478: LD_INT 5
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 0
48487: PUSH
48488: LD_INT 5
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 1
48497: NEG
48498: PUSH
48499: LD_INT 4
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 1
48508: NEG
48509: PUSH
48510: LD_INT 3
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 2
48519: PUSH
48520: LD_INT 5
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 2
48529: NEG
48530: PUSH
48531: LD_INT 3
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 3
48540: NEG
48541: PUSH
48542: LD_INT 0
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 3
48551: NEG
48552: PUSH
48553: LD_INT 1
48555: NEG
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 2
48563: NEG
48564: PUSH
48565: LD_INT 0
48567: PUSH
48568: EMPTY
48569: LIST
48570: LIST
48571: PUSH
48572: LD_INT 2
48574: NEG
48575: PUSH
48576: LD_INT 1
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: LD_INT 3
48585: NEG
48586: PUSH
48587: LD_INT 1
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 4
48596: NEG
48597: PUSH
48598: LD_INT 0
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 4
48607: NEG
48608: PUSH
48609: LD_INT 1
48611: NEG
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 4
48619: NEG
48620: PUSH
48621: LD_INT 2
48623: NEG
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 2
48631: NEG
48632: PUSH
48633: LD_INT 2
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 4
48642: NEG
48643: PUSH
48644: LD_INT 4
48646: NEG
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 4
48654: NEG
48655: PUSH
48656: LD_INT 5
48658: NEG
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 3
48666: NEG
48667: PUSH
48668: LD_INT 4
48670: NEG
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 3
48678: NEG
48679: PUSH
48680: LD_INT 3
48682: NEG
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 4
48690: NEG
48691: PUSH
48692: LD_INT 3
48694: NEG
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 5
48702: NEG
48703: PUSH
48704: LD_INT 4
48706: NEG
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 5
48714: NEG
48715: PUSH
48716: LD_INT 5
48718: NEG
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: LD_INT 3
48726: NEG
48727: PUSH
48728: LD_INT 5
48730: NEG
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 5
48738: NEG
48739: PUSH
48740: LD_INT 3
48742: NEG
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: LIST
48760: LIST
48761: LIST
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: LIST
48782: LIST
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
48795: LD_ADDR_VAR 0 30
48799: PUSH
48800: LD_INT 4
48802: PUSH
48803: LD_INT 4
48805: PUSH
48806: EMPTY
48807: LIST
48808: LIST
48809: PUSH
48810: LD_INT 4
48812: PUSH
48813: LD_INT 3
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 5
48822: PUSH
48823: LD_INT 4
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 5
48832: PUSH
48833: LD_INT 5
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: LD_INT 4
48842: PUSH
48843: LD_INT 5
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 3
48852: PUSH
48853: LD_INT 4
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 3
48862: PUSH
48863: LD_INT 3
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 5
48872: PUSH
48873: LD_INT 3
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 3
48882: PUSH
48883: LD_INT 5
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 0
48892: PUSH
48893: LD_INT 3
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 0
48902: PUSH
48903: LD_INT 2
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 1
48912: PUSH
48913: LD_INT 3
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 1
48922: PUSH
48923: LD_INT 4
48925: PUSH
48926: EMPTY
48927: LIST
48928: LIST
48929: PUSH
48930: LD_INT 0
48932: PUSH
48933: LD_INT 4
48935: PUSH
48936: EMPTY
48937: LIST
48938: LIST
48939: PUSH
48940: LD_INT 1
48942: NEG
48943: PUSH
48944: LD_INT 3
48946: PUSH
48947: EMPTY
48948: LIST
48949: LIST
48950: PUSH
48951: LD_INT 1
48953: NEG
48954: PUSH
48955: LD_INT 2
48957: PUSH
48958: EMPTY
48959: LIST
48960: LIST
48961: PUSH
48962: LD_INT 2
48964: PUSH
48965: LD_INT 4
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: PUSH
48972: LD_INT 2
48974: NEG
48975: PUSH
48976: LD_INT 2
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 4
48985: NEG
48986: PUSH
48987: LD_INT 0
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: LD_INT 4
48996: NEG
48997: PUSH
48998: LD_INT 1
49000: NEG
49001: PUSH
49002: EMPTY
49003: LIST
49004: LIST
49005: PUSH
49006: LD_INT 3
49008: NEG
49009: PUSH
49010: LD_INT 0
49012: PUSH
49013: EMPTY
49014: LIST
49015: LIST
49016: PUSH
49017: LD_INT 3
49019: NEG
49020: PUSH
49021: LD_INT 1
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 4
49030: NEG
49031: PUSH
49032: LD_INT 1
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 5
49041: NEG
49042: PUSH
49043: LD_INT 0
49045: PUSH
49046: EMPTY
49047: LIST
49048: LIST
49049: PUSH
49050: LD_INT 5
49052: NEG
49053: PUSH
49054: LD_INT 1
49056: NEG
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: PUSH
49062: LD_INT 5
49064: NEG
49065: PUSH
49066: LD_INT 2
49068: NEG
49069: PUSH
49070: EMPTY
49071: LIST
49072: LIST
49073: PUSH
49074: LD_INT 3
49076: NEG
49077: PUSH
49078: LD_INT 2
49080: PUSH
49081: EMPTY
49082: LIST
49083: LIST
49084: PUSH
49085: LD_INT 3
49087: NEG
49088: PUSH
49089: LD_INT 3
49091: NEG
49092: PUSH
49093: EMPTY
49094: LIST
49095: LIST
49096: PUSH
49097: LD_INT 3
49099: NEG
49100: PUSH
49101: LD_INT 4
49103: NEG
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: LD_INT 2
49111: NEG
49112: PUSH
49113: LD_INT 3
49115: NEG
49116: PUSH
49117: EMPTY
49118: LIST
49119: LIST
49120: PUSH
49121: LD_INT 2
49123: NEG
49124: PUSH
49125: LD_INT 2
49127: NEG
49128: PUSH
49129: EMPTY
49130: LIST
49131: LIST
49132: PUSH
49133: LD_INT 3
49135: NEG
49136: PUSH
49137: LD_INT 2
49139: NEG
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 4
49147: NEG
49148: PUSH
49149: LD_INT 3
49151: NEG
49152: PUSH
49153: EMPTY
49154: LIST
49155: LIST
49156: PUSH
49157: LD_INT 4
49159: NEG
49160: PUSH
49161: LD_INT 4
49163: NEG
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 2
49171: NEG
49172: PUSH
49173: LD_INT 4
49175: NEG
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 4
49183: NEG
49184: PUSH
49185: LD_INT 2
49187: NEG
49188: PUSH
49189: EMPTY
49190: LIST
49191: LIST
49192: PUSH
49193: LD_INT 0
49195: PUSH
49196: LD_INT 4
49198: NEG
49199: PUSH
49200: EMPTY
49201: LIST
49202: LIST
49203: PUSH
49204: LD_INT 0
49206: PUSH
49207: LD_INT 5
49209: NEG
49210: PUSH
49211: EMPTY
49212: LIST
49213: LIST
49214: PUSH
49215: LD_INT 1
49217: PUSH
49218: LD_INT 4
49220: NEG
49221: PUSH
49222: EMPTY
49223: LIST
49224: LIST
49225: PUSH
49226: LD_INT 1
49228: PUSH
49229: LD_INT 3
49231: NEG
49232: PUSH
49233: EMPTY
49234: LIST
49235: LIST
49236: PUSH
49237: LD_INT 0
49239: PUSH
49240: LD_INT 3
49242: NEG
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 1
49250: NEG
49251: PUSH
49252: LD_INT 4
49254: NEG
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: LD_INT 1
49262: NEG
49263: PUSH
49264: LD_INT 5
49266: NEG
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 2
49274: PUSH
49275: LD_INT 3
49277: NEG
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 2
49285: NEG
49286: PUSH
49287: LD_INT 5
49289: NEG
49290: PUSH
49291: EMPTY
49292: LIST
49293: LIST
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: LIST
49299: LIST
49300: LIST
49301: LIST
49302: LIST
49303: LIST
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: LIST
49317: LIST
49318: LIST
49319: LIST
49320: LIST
49321: LIST
49322: LIST
49323: LIST
49324: LIST
49325: LIST
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: LIST
49336: LIST
49337: LIST
49338: LIST
49339: LIST
49340: LIST
49341: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
49342: LD_ADDR_VAR 0 31
49346: PUSH
49347: LD_INT 0
49349: PUSH
49350: LD_INT 4
49352: PUSH
49353: EMPTY
49354: LIST
49355: LIST
49356: PUSH
49357: LD_INT 0
49359: PUSH
49360: LD_INT 3
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: PUSH
49367: LD_INT 1
49369: PUSH
49370: LD_INT 4
49372: PUSH
49373: EMPTY
49374: LIST
49375: LIST
49376: PUSH
49377: LD_INT 1
49379: PUSH
49380: LD_INT 5
49382: PUSH
49383: EMPTY
49384: LIST
49385: LIST
49386: PUSH
49387: LD_INT 0
49389: PUSH
49390: LD_INT 5
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 1
49399: NEG
49400: PUSH
49401: LD_INT 4
49403: PUSH
49404: EMPTY
49405: LIST
49406: LIST
49407: PUSH
49408: LD_INT 1
49410: NEG
49411: PUSH
49412: LD_INT 3
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 2
49421: PUSH
49422: LD_INT 5
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 2
49431: NEG
49432: PUSH
49433: LD_INT 3
49435: PUSH
49436: EMPTY
49437: LIST
49438: LIST
49439: PUSH
49440: LD_INT 3
49442: NEG
49443: PUSH
49444: LD_INT 0
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: LD_INT 3
49453: NEG
49454: PUSH
49455: LD_INT 1
49457: NEG
49458: PUSH
49459: EMPTY
49460: LIST
49461: LIST
49462: PUSH
49463: LD_INT 2
49465: NEG
49466: PUSH
49467: LD_INT 0
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 2
49476: NEG
49477: PUSH
49478: LD_INT 1
49480: PUSH
49481: EMPTY
49482: LIST
49483: LIST
49484: PUSH
49485: LD_INT 3
49487: NEG
49488: PUSH
49489: LD_INT 1
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 4
49498: NEG
49499: PUSH
49500: LD_INT 0
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 4
49509: NEG
49510: PUSH
49511: LD_INT 1
49513: NEG
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 4
49521: NEG
49522: PUSH
49523: LD_INT 2
49525: NEG
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 2
49533: NEG
49534: PUSH
49535: LD_INT 2
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: PUSH
49542: LD_INT 4
49544: NEG
49545: PUSH
49546: LD_INT 4
49548: NEG
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 4
49556: NEG
49557: PUSH
49558: LD_INT 5
49560: NEG
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 3
49568: NEG
49569: PUSH
49570: LD_INT 4
49572: NEG
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: LD_INT 3
49580: NEG
49581: PUSH
49582: LD_INT 3
49584: NEG
49585: PUSH
49586: EMPTY
49587: LIST
49588: LIST
49589: PUSH
49590: LD_INT 4
49592: NEG
49593: PUSH
49594: LD_INT 3
49596: NEG
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: PUSH
49602: LD_INT 5
49604: NEG
49605: PUSH
49606: LD_INT 4
49608: NEG
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 5
49616: NEG
49617: PUSH
49618: LD_INT 5
49620: NEG
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 3
49628: NEG
49629: PUSH
49630: LD_INT 5
49632: NEG
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 5
49640: NEG
49641: PUSH
49642: LD_INT 3
49644: NEG
49645: PUSH
49646: EMPTY
49647: LIST
49648: LIST
49649: PUSH
49650: LD_INT 0
49652: PUSH
49653: LD_INT 3
49655: NEG
49656: PUSH
49657: EMPTY
49658: LIST
49659: LIST
49660: PUSH
49661: LD_INT 0
49663: PUSH
49664: LD_INT 4
49666: NEG
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 1
49674: PUSH
49675: LD_INT 3
49677: NEG
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 1
49685: PUSH
49686: LD_INT 2
49688: NEG
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 0
49696: PUSH
49697: LD_INT 2
49699: NEG
49700: PUSH
49701: EMPTY
49702: LIST
49703: LIST
49704: PUSH
49705: LD_INT 1
49707: NEG
49708: PUSH
49709: LD_INT 3
49711: NEG
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 1
49719: NEG
49720: PUSH
49721: LD_INT 4
49723: NEG
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 2
49731: PUSH
49732: LD_INT 2
49734: NEG
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 2
49742: NEG
49743: PUSH
49744: LD_INT 4
49746: NEG
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: PUSH
49752: LD_INT 4
49754: PUSH
49755: LD_INT 0
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 4
49764: PUSH
49765: LD_INT 1
49767: NEG
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 5
49775: PUSH
49776: LD_INT 0
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 5
49785: PUSH
49786: LD_INT 1
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: PUSH
49793: LD_INT 4
49795: PUSH
49796: LD_INT 1
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 3
49805: PUSH
49806: LD_INT 0
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 3
49815: PUSH
49816: LD_INT 1
49818: NEG
49819: PUSH
49820: EMPTY
49821: LIST
49822: LIST
49823: PUSH
49824: LD_INT 3
49826: PUSH
49827: LD_INT 2
49829: NEG
49830: PUSH
49831: EMPTY
49832: LIST
49833: LIST
49834: PUSH
49835: LD_INT 5
49837: PUSH
49838: LD_INT 2
49840: PUSH
49841: EMPTY
49842: LIST
49843: LIST
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: LIST
49849: LIST
49850: LIST
49851: LIST
49852: LIST
49853: LIST
49854: LIST
49855: LIST
49856: LIST
49857: LIST
49858: LIST
49859: LIST
49860: LIST
49861: LIST
49862: LIST
49863: LIST
49864: LIST
49865: LIST
49866: LIST
49867: LIST
49868: LIST
49869: LIST
49870: LIST
49871: LIST
49872: LIST
49873: LIST
49874: LIST
49875: LIST
49876: LIST
49877: LIST
49878: LIST
49879: LIST
49880: LIST
49881: LIST
49882: LIST
49883: LIST
49884: LIST
49885: LIST
49886: LIST
49887: LIST
49888: LIST
49889: LIST
49890: LIST
49891: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
49892: LD_ADDR_VAR 0 32
49896: PUSH
49897: LD_INT 4
49899: NEG
49900: PUSH
49901: LD_INT 0
49903: PUSH
49904: EMPTY
49905: LIST
49906: LIST
49907: PUSH
49908: LD_INT 4
49910: NEG
49911: PUSH
49912: LD_INT 1
49914: NEG
49915: PUSH
49916: EMPTY
49917: LIST
49918: LIST
49919: PUSH
49920: LD_INT 3
49922: NEG
49923: PUSH
49924: LD_INT 0
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 3
49933: NEG
49934: PUSH
49935: LD_INT 1
49937: PUSH
49938: EMPTY
49939: LIST
49940: LIST
49941: PUSH
49942: LD_INT 4
49944: NEG
49945: PUSH
49946: LD_INT 1
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 5
49955: NEG
49956: PUSH
49957: LD_INT 0
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 5
49966: NEG
49967: PUSH
49968: LD_INT 1
49970: NEG
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 5
49978: NEG
49979: PUSH
49980: LD_INT 2
49982: NEG
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 3
49990: NEG
49991: PUSH
49992: LD_INT 2
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 3
50001: NEG
50002: PUSH
50003: LD_INT 3
50005: NEG
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 3
50013: NEG
50014: PUSH
50015: LD_INT 4
50017: NEG
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 2
50025: NEG
50026: PUSH
50027: LD_INT 3
50029: NEG
50030: PUSH
50031: EMPTY
50032: LIST
50033: LIST
50034: PUSH
50035: LD_INT 2
50037: NEG
50038: PUSH
50039: LD_INT 2
50041: NEG
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 3
50049: NEG
50050: PUSH
50051: LD_INT 2
50053: NEG
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: LD_INT 4
50061: NEG
50062: PUSH
50063: LD_INT 3
50065: NEG
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 4
50073: NEG
50074: PUSH
50075: LD_INT 4
50077: NEG
50078: PUSH
50079: EMPTY
50080: LIST
50081: LIST
50082: PUSH
50083: LD_INT 2
50085: NEG
50086: PUSH
50087: LD_INT 4
50089: NEG
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 4
50097: NEG
50098: PUSH
50099: LD_INT 2
50101: NEG
50102: PUSH
50103: EMPTY
50104: LIST
50105: LIST
50106: PUSH
50107: LD_INT 0
50109: PUSH
50110: LD_INT 4
50112: NEG
50113: PUSH
50114: EMPTY
50115: LIST
50116: LIST
50117: PUSH
50118: LD_INT 0
50120: PUSH
50121: LD_INT 5
50123: NEG
50124: PUSH
50125: EMPTY
50126: LIST
50127: LIST
50128: PUSH
50129: LD_INT 1
50131: PUSH
50132: LD_INT 4
50134: NEG
50135: PUSH
50136: EMPTY
50137: LIST
50138: LIST
50139: PUSH
50140: LD_INT 1
50142: PUSH
50143: LD_INT 3
50145: NEG
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 0
50153: PUSH
50154: LD_INT 3
50156: NEG
50157: PUSH
50158: EMPTY
50159: LIST
50160: LIST
50161: PUSH
50162: LD_INT 1
50164: NEG
50165: PUSH
50166: LD_INT 4
50168: NEG
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 1
50176: NEG
50177: PUSH
50178: LD_INT 5
50180: NEG
50181: PUSH
50182: EMPTY
50183: LIST
50184: LIST
50185: PUSH
50186: LD_INT 2
50188: PUSH
50189: LD_INT 3
50191: NEG
50192: PUSH
50193: EMPTY
50194: LIST
50195: LIST
50196: PUSH
50197: LD_INT 2
50199: NEG
50200: PUSH
50201: LD_INT 5
50203: NEG
50204: PUSH
50205: EMPTY
50206: LIST
50207: LIST
50208: PUSH
50209: LD_INT 3
50211: PUSH
50212: LD_INT 0
50214: PUSH
50215: EMPTY
50216: LIST
50217: LIST
50218: PUSH
50219: LD_INT 3
50221: PUSH
50222: LD_INT 1
50224: NEG
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 4
50232: PUSH
50233: LD_INT 0
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 4
50242: PUSH
50243: LD_INT 1
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 3
50252: PUSH
50253: LD_INT 1
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: PUSH
50260: LD_INT 2
50262: PUSH
50263: LD_INT 0
50265: PUSH
50266: EMPTY
50267: LIST
50268: LIST
50269: PUSH
50270: LD_INT 2
50272: PUSH
50273: LD_INT 1
50275: NEG
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 2
50283: PUSH
50284: LD_INT 2
50286: NEG
50287: PUSH
50288: EMPTY
50289: LIST
50290: LIST
50291: PUSH
50292: LD_INT 4
50294: PUSH
50295: LD_INT 2
50297: PUSH
50298: EMPTY
50299: LIST
50300: LIST
50301: PUSH
50302: LD_INT 4
50304: PUSH
50305: LD_INT 4
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 4
50314: PUSH
50315: LD_INT 3
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 5
50324: PUSH
50325: LD_INT 4
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 5
50334: PUSH
50335: LD_INT 5
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: PUSH
50342: LD_INT 4
50344: PUSH
50345: LD_INT 5
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 3
50354: PUSH
50355: LD_INT 4
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 3
50364: PUSH
50365: LD_INT 3
50367: PUSH
50368: EMPTY
50369: LIST
50370: LIST
50371: PUSH
50372: LD_INT 5
50374: PUSH
50375: LD_INT 3
50377: PUSH
50378: EMPTY
50379: LIST
50380: LIST
50381: PUSH
50382: LD_INT 3
50384: PUSH
50385: LD_INT 5
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: LIST
50413: LIST
50414: LIST
50415: LIST
50416: LIST
50417: LIST
50418: LIST
50419: LIST
50420: LIST
50421: LIST
50422: LIST
50423: LIST
50424: LIST
50425: LIST
50426: LIST
50427: LIST
50428: LIST
50429: LIST
50430: LIST
50431: LIST
50432: LIST
50433: LIST
50434: LIST
50435: LIST
50436: LIST
50437: LIST
50438: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
50439: LD_ADDR_VAR 0 33
50443: PUSH
50444: LD_INT 4
50446: NEG
50447: PUSH
50448: LD_INT 4
50450: NEG
50451: PUSH
50452: EMPTY
50453: LIST
50454: LIST
50455: PUSH
50456: LD_INT 4
50458: NEG
50459: PUSH
50460: LD_INT 5
50462: NEG
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 3
50470: NEG
50471: PUSH
50472: LD_INT 4
50474: NEG
50475: PUSH
50476: EMPTY
50477: LIST
50478: LIST
50479: PUSH
50480: LD_INT 3
50482: NEG
50483: PUSH
50484: LD_INT 3
50486: NEG
50487: PUSH
50488: EMPTY
50489: LIST
50490: LIST
50491: PUSH
50492: LD_INT 4
50494: NEG
50495: PUSH
50496: LD_INT 3
50498: NEG
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: LD_INT 5
50506: NEG
50507: PUSH
50508: LD_INT 4
50510: NEG
50511: PUSH
50512: EMPTY
50513: LIST
50514: LIST
50515: PUSH
50516: LD_INT 5
50518: NEG
50519: PUSH
50520: LD_INT 5
50522: NEG
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 3
50530: NEG
50531: PUSH
50532: LD_INT 5
50534: NEG
50535: PUSH
50536: EMPTY
50537: LIST
50538: LIST
50539: PUSH
50540: LD_INT 5
50542: NEG
50543: PUSH
50544: LD_INT 3
50546: NEG
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 0
50554: PUSH
50555: LD_INT 3
50557: NEG
50558: PUSH
50559: EMPTY
50560: LIST
50561: LIST
50562: PUSH
50563: LD_INT 0
50565: PUSH
50566: LD_INT 4
50568: NEG
50569: PUSH
50570: EMPTY
50571: LIST
50572: LIST
50573: PUSH
50574: LD_INT 1
50576: PUSH
50577: LD_INT 3
50579: NEG
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 1
50587: PUSH
50588: LD_INT 2
50590: NEG
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 0
50598: PUSH
50599: LD_INT 2
50601: NEG
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: PUSH
50607: LD_INT 1
50609: NEG
50610: PUSH
50611: LD_INT 3
50613: NEG
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 1
50621: NEG
50622: PUSH
50623: LD_INT 4
50625: NEG
50626: PUSH
50627: EMPTY
50628: LIST
50629: LIST
50630: PUSH
50631: LD_INT 2
50633: PUSH
50634: LD_INT 2
50636: NEG
50637: PUSH
50638: EMPTY
50639: LIST
50640: LIST
50641: PUSH
50642: LD_INT 2
50644: NEG
50645: PUSH
50646: LD_INT 4
50648: NEG
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: LD_INT 4
50656: PUSH
50657: LD_INT 0
50659: PUSH
50660: EMPTY
50661: LIST
50662: LIST
50663: PUSH
50664: LD_INT 4
50666: PUSH
50667: LD_INT 1
50669: NEG
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 5
50677: PUSH
50678: LD_INT 0
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 5
50687: PUSH
50688: LD_INT 1
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: LD_INT 4
50697: PUSH
50698: LD_INT 1
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 3
50707: PUSH
50708: LD_INT 0
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 3
50717: PUSH
50718: LD_INT 1
50720: NEG
50721: PUSH
50722: EMPTY
50723: LIST
50724: LIST
50725: PUSH
50726: LD_INT 3
50728: PUSH
50729: LD_INT 2
50731: NEG
50732: PUSH
50733: EMPTY
50734: LIST
50735: LIST
50736: PUSH
50737: LD_INT 5
50739: PUSH
50740: LD_INT 2
50742: PUSH
50743: EMPTY
50744: LIST
50745: LIST
50746: PUSH
50747: LD_INT 3
50749: PUSH
50750: LD_INT 3
50752: PUSH
50753: EMPTY
50754: LIST
50755: LIST
50756: PUSH
50757: LD_INT 3
50759: PUSH
50760: LD_INT 2
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: PUSH
50767: LD_INT 4
50769: PUSH
50770: LD_INT 3
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 4
50779: PUSH
50780: LD_INT 4
50782: PUSH
50783: EMPTY
50784: LIST
50785: LIST
50786: PUSH
50787: LD_INT 3
50789: PUSH
50790: LD_INT 4
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 2
50799: PUSH
50800: LD_INT 3
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 2
50809: PUSH
50810: LD_INT 2
50812: PUSH
50813: EMPTY
50814: LIST
50815: LIST
50816: PUSH
50817: LD_INT 4
50819: PUSH
50820: LD_INT 2
50822: PUSH
50823: EMPTY
50824: LIST
50825: LIST
50826: PUSH
50827: LD_INT 2
50829: PUSH
50830: LD_INT 4
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 0
50839: PUSH
50840: LD_INT 4
50842: PUSH
50843: EMPTY
50844: LIST
50845: LIST
50846: PUSH
50847: LD_INT 0
50849: PUSH
50850: LD_INT 3
50852: PUSH
50853: EMPTY
50854: LIST
50855: LIST
50856: PUSH
50857: LD_INT 1
50859: PUSH
50860: LD_INT 4
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 1
50869: PUSH
50870: LD_INT 5
50872: PUSH
50873: EMPTY
50874: LIST
50875: LIST
50876: PUSH
50877: LD_INT 0
50879: PUSH
50880: LD_INT 5
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 1
50889: NEG
50890: PUSH
50891: LD_INT 4
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 1
50900: NEG
50901: PUSH
50902: LD_INT 3
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 2
50911: PUSH
50912: LD_INT 5
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 2
50921: NEG
50922: PUSH
50923: LD_INT 3
50925: PUSH
50926: EMPTY
50927: LIST
50928: LIST
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: LIST
50934: LIST
50935: LIST
50936: LIST
50937: LIST
50938: LIST
50939: LIST
50940: LIST
50941: LIST
50942: LIST
50943: LIST
50944: LIST
50945: LIST
50946: LIST
50947: LIST
50948: LIST
50949: LIST
50950: LIST
50951: LIST
50952: LIST
50953: LIST
50954: LIST
50955: LIST
50956: LIST
50957: LIST
50958: LIST
50959: LIST
50960: LIST
50961: LIST
50962: LIST
50963: LIST
50964: LIST
50965: LIST
50966: LIST
50967: LIST
50968: LIST
50969: LIST
50970: LIST
50971: LIST
50972: LIST
50973: LIST
50974: LIST
50975: LIST
50976: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
50977: LD_ADDR_VAR 0 34
50981: PUSH
50982: LD_INT 0
50984: PUSH
50985: LD_INT 4
50987: NEG
50988: PUSH
50989: EMPTY
50990: LIST
50991: LIST
50992: PUSH
50993: LD_INT 0
50995: PUSH
50996: LD_INT 5
50998: NEG
50999: PUSH
51000: EMPTY
51001: LIST
51002: LIST
51003: PUSH
51004: LD_INT 1
51006: PUSH
51007: LD_INT 4
51009: NEG
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 1
51017: PUSH
51018: LD_INT 3
51020: NEG
51021: PUSH
51022: EMPTY
51023: LIST
51024: LIST
51025: PUSH
51026: LD_INT 0
51028: PUSH
51029: LD_INT 3
51031: NEG
51032: PUSH
51033: EMPTY
51034: LIST
51035: LIST
51036: PUSH
51037: LD_INT 1
51039: NEG
51040: PUSH
51041: LD_INT 4
51043: NEG
51044: PUSH
51045: EMPTY
51046: LIST
51047: LIST
51048: PUSH
51049: LD_INT 1
51051: NEG
51052: PUSH
51053: LD_INT 5
51055: NEG
51056: PUSH
51057: EMPTY
51058: LIST
51059: LIST
51060: PUSH
51061: LD_INT 2
51063: PUSH
51064: LD_INT 3
51066: NEG
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 2
51074: NEG
51075: PUSH
51076: LD_INT 5
51078: NEG
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 3
51086: PUSH
51087: LD_INT 0
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 3
51096: PUSH
51097: LD_INT 1
51099: NEG
51100: PUSH
51101: EMPTY
51102: LIST
51103: LIST
51104: PUSH
51105: LD_INT 4
51107: PUSH
51108: LD_INT 0
51110: PUSH
51111: EMPTY
51112: LIST
51113: LIST
51114: PUSH
51115: LD_INT 4
51117: PUSH
51118: LD_INT 1
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 3
51127: PUSH
51128: LD_INT 1
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 2
51137: PUSH
51138: LD_INT 0
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 2
51147: PUSH
51148: LD_INT 1
51150: NEG
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 2
51158: PUSH
51159: LD_INT 2
51161: NEG
51162: PUSH
51163: EMPTY
51164: LIST
51165: LIST
51166: PUSH
51167: LD_INT 4
51169: PUSH
51170: LD_INT 2
51172: PUSH
51173: EMPTY
51174: LIST
51175: LIST
51176: PUSH
51177: LD_INT 4
51179: PUSH
51180: LD_INT 4
51182: PUSH
51183: EMPTY
51184: LIST
51185: LIST
51186: PUSH
51187: LD_INT 4
51189: PUSH
51190: LD_INT 3
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 5
51199: PUSH
51200: LD_INT 4
51202: PUSH
51203: EMPTY
51204: LIST
51205: LIST
51206: PUSH
51207: LD_INT 5
51209: PUSH
51210: LD_INT 5
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: PUSH
51217: LD_INT 4
51219: PUSH
51220: LD_INT 5
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 3
51229: PUSH
51230: LD_INT 4
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: LD_INT 3
51239: PUSH
51240: LD_INT 3
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 5
51249: PUSH
51250: LD_INT 3
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 3
51259: PUSH
51260: LD_INT 5
51262: PUSH
51263: EMPTY
51264: LIST
51265: LIST
51266: PUSH
51267: LD_INT 0
51269: PUSH
51270: LD_INT 3
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 0
51279: PUSH
51280: LD_INT 2
51282: PUSH
51283: EMPTY
51284: LIST
51285: LIST
51286: PUSH
51287: LD_INT 1
51289: PUSH
51290: LD_INT 3
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 1
51299: PUSH
51300: LD_INT 4
51302: PUSH
51303: EMPTY
51304: LIST
51305: LIST
51306: PUSH
51307: LD_INT 0
51309: PUSH
51310: LD_INT 4
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: PUSH
51317: LD_INT 1
51319: NEG
51320: PUSH
51321: LD_INT 3
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: PUSH
51328: LD_INT 1
51330: NEG
51331: PUSH
51332: LD_INT 2
51334: PUSH
51335: EMPTY
51336: LIST
51337: LIST
51338: PUSH
51339: LD_INT 2
51341: PUSH
51342: LD_INT 4
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 2
51351: NEG
51352: PUSH
51353: LD_INT 2
51355: PUSH
51356: EMPTY
51357: LIST
51358: LIST
51359: PUSH
51360: LD_INT 4
51362: NEG
51363: PUSH
51364: LD_INT 0
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 4
51373: NEG
51374: PUSH
51375: LD_INT 1
51377: NEG
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 3
51385: NEG
51386: PUSH
51387: LD_INT 0
51389: PUSH
51390: EMPTY
51391: LIST
51392: LIST
51393: PUSH
51394: LD_INT 3
51396: NEG
51397: PUSH
51398: LD_INT 1
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 4
51407: NEG
51408: PUSH
51409: LD_INT 1
51411: PUSH
51412: EMPTY
51413: LIST
51414: LIST
51415: PUSH
51416: LD_INT 5
51418: NEG
51419: PUSH
51420: LD_INT 0
51422: PUSH
51423: EMPTY
51424: LIST
51425: LIST
51426: PUSH
51427: LD_INT 5
51429: NEG
51430: PUSH
51431: LD_INT 1
51433: NEG
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 5
51441: NEG
51442: PUSH
51443: LD_INT 2
51445: NEG
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: LD_INT 3
51453: NEG
51454: PUSH
51455: LD_INT 2
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: LIST
51478: LIST
51479: LIST
51480: LIST
51481: LIST
51482: LIST
51483: LIST
51484: LIST
51485: LIST
51486: LIST
51487: LIST
51488: LIST
51489: LIST
51490: LIST
51491: LIST
51492: LIST
51493: LIST
51494: LIST
51495: LIST
51496: LIST
51497: LIST
51498: LIST
51499: LIST
51500: LIST
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: ST_TO_ADDR
// end ; end ;
51509: GO 51512
51511: POP
// case btype of b_depot , b_warehouse :
51512: LD_VAR 0 1
51516: PUSH
51517: LD_INT 0
51519: DOUBLE
51520: EQUAL
51521: IFTRUE 51531
51523: LD_INT 1
51525: DOUBLE
51526: EQUAL
51527: IFTRUE 51531
51529: GO 51732
51531: POP
// case nation of nation_american :
51532: LD_VAR 0 5
51536: PUSH
51537: LD_INT 1
51539: DOUBLE
51540: EQUAL
51541: IFTRUE 51545
51543: GO 51601
51545: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
51546: LD_ADDR_VAR 0 9
51550: PUSH
51551: LD_VAR 0 11
51555: PUSH
51556: LD_VAR 0 12
51560: PUSH
51561: LD_VAR 0 13
51565: PUSH
51566: LD_VAR 0 14
51570: PUSH
51571: LD_VAR 0 15
51575: PUSH
51576: LD_VAR 0 16
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: LIST
51585: LIST
51586: LIST
51587: LIST
51588: PUSH
51589: LD_VAR 0 4
51593: PUSH
51594: LD_INT 1
51596: PLUS
51597: ARRAY
51598: ST_TO_ADDR
51599: GO 51730
51601: LD_INT 2
51603: DOUBLE
51604: EQUAL
51605: IFTRUE 51609
51607: GO 51665
51609: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
51610: LD_ADDR_VAR 0 9
51614: PUSH
51615: LD_VAR 0 17
51619: PUSH
51620: LD_VAR 0 18
51624: PUSH
51625: LD_VAR 0 19
51629: PUSH
51630: LD_VAR 0 20
51634: PUSH
51635: LD_VAR 0 21
51639: PUSH
51640: LD_VAR 0 22
51644: PUSH
51645: EMPTY
51646: LIST
51647: LIST
51648: LIST
51649: LIST
51650: LIST
51651: LIST
51652: PUSH
51653: LD_VAR 0 4
51657: PUSH
51658: LD_INT 1
51660: PLUS
51661: ARRAY
51662: ST_TO_ADDR
51663: GO 51730
51665: LD_INT 3
51667: DOUBLE
51668: EQUAL
51669: IFTRUE 51673
51671: GO 51729
51673: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
51674: LD_ADDR_VAR 0 9
51678: PUSH
51679: LD_VAR 0 23
51683: PUSH
51684: LD_VAR 0 24
51688: PUSH
51689: LD_VAR 0 25
51693: PUSH
51694: LD_VAR 0 26
51698: PUSH
51699: LD_VAR 0 27
51703: PUSH
51704: LD_VAR 0 28
51708: PUSH
51709: EMPTY
51710: LIST
51711: LIST
51712: LIST
51713: LIST
51714: LIST
51715: LIST
51716: PUSH
51717: LD_VAR 0 4
51721: PUSH
51722: LD_INT 1
51724: PLUS
51725: ARRAY
51726: ST_TO_ADDR
51727: GO 51730
51729: POP
51730: GO 52285
51732: LD_INT 2
51734: DOUBLE
51735: EQUAL
51736: IFTRUE 51746
51738: LD_INT 3
51740: DOUBLE
51741: EQUAL
51742: IFTRUE 51746
51744: GO 51802
51746: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
51747: LD_ADDR_VAR 0 9
51751: PUSH
51752: LD_VAR 0 29
51756: PUSH
51757: LD_VAR 0 30
51761: PUSH
51762: LD_VAR 0 31
51766: PUSH
51767: LD_VAR 0 32
51771: PUSH
51772: LD_VAR 0 33
51776: PUSH
51777: LD_VAR 0 34
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: PUSH
51790: LD_VAR 0 4
51794: PUSH
51795: LD_INT 1
51797: PLUS
51798: ARRAY
51799: ST_TO_ADDR
51800: GO 52285
51802: LD_INT 16
51804: DOUBLE
51805: EQUAL
51806: IFTRUE 51864
51808: LD_INT 17
51810: DOUBLE
51811: EQUAL
51812: IFTRUE 51864
51814: LD_INT 18
51816: DOUBLE
51817: EQUAL
51818: IFTRUE 51864
51820: LD_INT 19
51822: DOUBLE
51823: EQUAL
51824: IFTRUE 51864
51826: LD_INT 22
51828: DOUBLE
51829: EQUAL
51830: IFTRUE 51864
51832: LD_INT 20
51834: DOUBLE
51835: EQUAL
51836: IFTRUE 51864
51838: LD_INT 21
51840: DOUBLE
51841: EQUAL
51842: IFTRUE 51864
51844: LD_INT 23
51846: DOUBLE
51847: EQUAL
51848: IFTRUE 51864
51850: LD_INT 24
51852: DOUBLE
51853: EQUAL
51854: IFTRUE 51864
51856: LD_INT 25
51858: DOUBLE
51859: EQUAL
51860: IFTRUE 51864
51862: GO 51920
51864: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
51865: LD_ADDR_VAR 0 9
51869: PUSH
51870: LD_VAR 0 35
51874: PUSH
51875: LD_VAR 0 36
51879: PUSH
51880: LD_VAR 0 37
51884: PUSH
51885: LD_VAR 0 38
51889: PUSH
51890: LD_VAR 0 39
51894: PUSH
51895: LD_VAR 0 40
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: PUSH
51908: LD_VAR 0 4
51912: PUSH
51913: LD_INT 1
51915: PLUS
51916: ARRAY
51917: ST_TO_ADDR
51918: GO 52285
51920: LD_INT 6
51922: DOUBLE
51923: EQUAL
51924: IFTRUE 51976
51926: LD_INT 7
51928: DOUBLE
51929: EQUAL
51930: IFTRUE 51976
51932: LD_INT 8
51934: DOUBLE
51935: EQUAL
51936: IFTRUE 51976
51938: LD_INT 13
51940: DOUBLE
51941: EQUAL
51942: IFTRUE 51976
51944: LD_INT 12
51946: DOUBLE
51947: EQUAL
51948: IFTRUE 51976
51950: LD_INT 15
51952: DOUBLE
51953: EQUAL
51954: IFTRUE 51976
51956: LD_INT 11
51958: DOUBLE
51959: EQUAL
51960: IFTRUE 51976
51962: LD_INT 14
51964: DOUBLE
51965: EQUAL
51966: IFTRUE 51976
51968: LD_INT 10
51970: DOUBLE
51971: EQUAL
51972: IFTRUE 51976
51974: GO 52032
51976: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
51977: LD_ADDR_VAR 0 9
51981: PUSH
51982: LD_VAR 0 41
51986: PUSH
51987: LD_VAR 0 42
51991: PUSH
51992: LD_VAR 0 43
51996: PUSH
51997: LD_VAR 0 44
52001: PUSH
52002: LD_VAR 0 45
52006: PUSH
52007: LD_VAR 0 46
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: LIST
52016: LIST
52017: LIST
52018: LIST
52019: PUSH
52020: LD_VAR 0 4
52024: PUSH
52025: LD_INT 1
52027: PLUS
52028: ARRAY
52029: ST_TO_ADDR
52030: GO 52285
52032: LD_INT 36
52034: DOUBLE
52035: EQUAL
52036: IFTRUE 52040
52038: GO 52096
52040: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
52041: LD_ADDR_VAR 0 9
52045: PUSH
52046: LD_VAR 0 47
52050: PUSH
52051: LD_VAR 0 48
52055: PUSH
52056: LD_VAR 0 49
52060: PUSH
52061: LD_VAR 0 50
52065: PUSH
52066: LD_VAR 0 51
52070: PUSH
52071: LD_VAR 0 52
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: LIST
52080: LIST
52081: LIST
52082: LIST
52083: PUSH
52084: LD_VAR 0 4
52088: PUSH
52089: LD_INT 1
52091: PLUS
52092: ARRAY
52093: ST_TO_ADDR
52094: GO 52285
52096: LD_INT 4
52098: DOUBLE
52099: EQUAL
52100: IFTRUE 52122
52102: LD_INT 5
52104: DOUBLE
52105: EQUAL
52106: IFTRUE 52122
52108: LD_INT 34
52110: DOUBLE
52111: EQUAL
52112: IFTRUE 52122
52114: LD_INT 37
52116: DOUBLE
52117: EQUAL
52118: IFTRUE 52122
52120: GO 52178
52122: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
52123: LD_ADDR_VAR 0 9
52127: PUSH
52128: LD_VAR 0 53
52132: PUSH
52133: LD_VAR 0 54
52137: PUSH
52138: LD_VAR 0 55
52142: PUSH
52143: LD_VAR 0 56
52147: PUSH
52148: LD_VAR 0 57
52152: PUSH
52153: LD_VAR 0 58
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: LIST
52162: LIST
52163: LIST
52164: LIST
52165: PUSH
52166: LD_VAR 0 4
52170: PUSH
52171: LD_INT 1
52173: PLUS
52174: ARRAY
52175: ST_TO_ADDR
52176: GO 52285
52178: LD_INT 31
52180: DOUBLE
52181: EQUAL
52182: IFTRUE 52228
52184: LD_INT 32
52186: DOUBLE
52187: EQUAL
52188: IFTRUE 52228
52190: LD_INT 33
52192: DOUBLE
52193: EQUAL
52194: IFTRUE 52228
52196: LD_INT 27
52198: DOUBLE
52199: EQUAL
52200: IFTRUE 52228
52202: LD_INT 26
52204: DOUBLE
52205: EQUAL
52206: IFTRUE 52228
52208: LD_INT 28
52210: DOUBLE
52211: EQUAL
52212: IFTRUE 52228
52214: LD_INT 29
52216: DOUBLE
52217: EQUAL
52218: IFTRUE 52228
52220: LD_INT 30
52222: DOUBLE
52223: EQUAL
52224: IFTRUE 52228
52226: GO 52284
52228: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
52229: LD_ADDR_VAR 0 9
52233: PUSH
52234: LD_VAR 0 59
52238: PUSH
52239: LD_VAR 0 60
52243: PUSH
52244: LD_VAR 0 61
52248: PUSH
52249: LD_VAR 0 62
52253: PUSH
52254: LD_VAR 0 63
52258: PUSH
52259: LD_VAR 0 64
52263: PUSH
52264: EMPTY
52265: LIST
52266: LIST
52267: LIST
52268: LIST
52269: LIST
52270: LIST
52271: PUSH
52272: LD_VAR 0 4
52276: PUSH
52277: LD_INT 1
52279: PLUS
52280: ARRAY
52281: ST_TO_ADDR
52282: GO 52285
52284: POP
// temp_list2 = [ ] ;
52285: LD_ADDR_VAR 0 10
52289: PUSH
52290: EMPTY
52291: ST_TO_ADDR
// for i in temp_list do
52292: LD_ADDR_VAR 0 8
52296: PUSH
52297: LD_VAR 0 9
52301: PUSH
52302: FOR_IN
52303: IFFALSE 52355
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
52305: LD_ADDR_VAR 0 10
52309: PUSH
52310: LD_VAR 0 10
52314: PUSH
52315: LD_VAR 0 8
52319: PUSH
52320: LD_INT 1
52322: ARRAY
52323: PUSH
52324: LD_VAR 0 2
52328: PLUS
52329: PUSH
52330: LD_VAR 0 8
52334: PUSH
52335: LD_INT 2
52337: ARRAY
52338: PUSH
52339: LD_VAR 0 3
52343: PLUS
52344: PUSH
52345: EMPTY
52346: LIST
52347: LIST
52348: PUSH
52349: EMPTY
52350: LIST
52351: ADD
52352: ST_TO_ADDR
52353: GO 52302
52355: POP
52356: POP
// result = temp_list2 ;
52357: LD_ADDR_VAR 0 7
52361: PUSH
52362: LD_VAR 0 10
52366: ST_TO_ADDR
// end ;
52367: LD_VAR 0 7
52371: RET
// export function EnemyInRange ( unit , dist ) ; begin
52372: LD_INT 0
52374: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
52375: LD_ADDR_VAR 0 3
52379: PUSH
52380: LD_VAR 0 1
52384: PPUSH
52385: CALL_OW 255
52389: PPUSH
52390: LD_VAR 0 1
52394: PPUSH
52395: CALL_OW 250
52399: PPUSH
52400: LD_VAR 0 1
52404: PPUSH
52405: CALL_OW 251
52409: PPUSH
52410: LD_VAR 0 2
52414: PPUSH
52415: CALL 25768 0 4
52419: PUSH
52420: LD_INT 4
52422: ARRAY
52423: ST_TO_ADDR
// end ;
52424: LD_VAR 0 3
52428: RET
// export function PlayerSeeMe ( unit ) ; begin
52429: LD_INT 0
52431: PPUSH
// result := See ( your_side , unit ) ;
52432: LD_ADDR_VAR 0 2
52436: PUSH
52437: LD_OWVAR 2
52441: PPUSH
52442: LD_VAR 0 1
52446: PPUSH
52447: CALL_OW 292
52451: ST_TO_ADDR
// end ;
52452: LD_VAR 0 2
52456: RET
// export function ReverseDir ( unit ) ; begin
52457: LD_INT 0
52459: PPUSH
// if not unit then
52460: LD_VAR 0 1
52464: NOT
52465: IFFALSE 52469
// exit ;
52467: GO 52492
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
52469: LD_ADDR_VAR 0 2
52473: PUSH
52474: LD_VAR 0 1
52478: PPUSH
52479: CALL_OW 254
52483: PUSH
52484: LD_INT 3
52486: PLUS
52487: PUSH
52488: LD_INT 6
52490: MOD
52491: ST_TO_ADDR
// end ;
52492: LD_VAR 0 2
52496: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
52497: LD_INT 0
52499: PPUSH
52500: PPUSH
52501: PPUSH
52502: PPUSH
52503: PPUSH
// if not hexes then
52504: LD_VAR 0 2
52508: NOT
52509: IFFALSE 52513
// exit ;
52511: GO 52661
// dist := 9999 ;
52513: LD_ADDR_VAR 0 5
52517: PUSH
52518: LD_INT 9999
52520: ST_TO_ADDR
// for i = 1 to hexes do
52521: LD_ADDR_VAR 0 4
52525: PUSH
52526: DOUBLE
52527: LD_INT 1
52529: DEC
52530: ST_TO_ADDR
52531: LD_VAR 0 2
52535: PUSH
52536: FOR_TO
52537: IFFALSE 52649
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
52539: LD_VAR 0 1
52543: PPUSH
52544: LD_VAR 0 2
52548: PUSH
52549: LD_VAR 0 4
52553: ARRAY
52554: PUSH
52555: LD_INT 1
52557: ARRAY
52558: PPUSH
52559: LD_VAR 0 2
52563: PUSH
52564: LD_VAR 0 4
52568: ARRAY
52569: PUSH
52570: LD_INT 2
52572: ARRAY
52573: PPUSH
52574: CALL_OW 297
52578: PUSH
52579: LD_VAR 0 5
52583: LESS
52584: IFFALSE 52647
// begin hex := hexes [ i ] ;
52586: LD_ADDR_VAR 0 7
52590: PUSH
52591: LD_VAR 0 2
52595: PUSH
52596: LD_VAR 0 4
52600: ARRAY
52601: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
52602: LD_ADDR_VAR 0 5
52606: PUSH
52607: LD_VAR 0 1
52611: PPUSH
52612: LD_VAR 0 2
52616: PUSH
52617: LD_VAR 0 4
52621: ARRAY
52622: PUSH
52623: LD_INT 1
52625: ARRAY
52626: PPUSH
52627: LD_VAR 0 2
52631: PUSH
52632: LD_VAR 0 4
52636: ARRAY
52637: PUSH
52638: LD_INT 2
52640: ARRAY
52641: PPUSH
52642: CALL_OW 297
52646: ST_TO_ADDR
// end ; end ;
52647: GO 52536
52649: POP
52650: POP
// result := hex ;
52651: LD_ADDR_VAR 0 3
52655: PUSH
52656: LD_VAR 0 7
52660: ST_TO_ADDR
// end ;
52661: LD_VAR 0 3
52665: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
52666: LD_INT 0
52668: PPUSH
52669: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
52670: LD_VAR 0 1
52674: NOT
52675: PUSH
52676: LD_VAR 0 1
52680: PUSH
52681: LD_INT 21
52683: PUSH
52684: LD_INT 2
52686: PUSH
52687: EMPTY
52688: LIST
52689: LIST
52690: PUSH
52691: LD_INT 23
52693: PUSH
52694: LD_INT 2
52696: PUSH
52697: EMPTY
52698: LIST
52699: LIST
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PPUSH
52705: CALL_OW 69
52709: IN
52710: NOT
52711: OR
52712: IFFALSE 52716
// exit ;
52714: GO 52763
// for i = 1 to 3 do
52716: LD_ADDR_VAR 0 3
52720: PUSH
52721: DOUBLE
52722: LD_INT 1
52724: DEC
52725: ST_TO_ADDR
52726: LD_INT 3
52728: PUSH
52729: FOR_TO
52730: IFFALSE 52761
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
52732: LD_VAR 0 1
52736: PPUSH
52737: CALL_OW 250
52741: PPUSH
52742: LD_VAR 0 1
52746: PPUSH
52747: CALL_OW 251
52751: PPUSH
52752: LD_INT 1
52754: PPUSH
52755: CALL_OW 453
52759: GO 52729
52761: POP
52762: POP
// end ;
52763: LD_VAR 0 2
52767: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
52768: LD_INT 0
52770: PPUSH
52771: PPUSH
52772: PPUSH
52773: PPUSH
52774: PPUSH
52775: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
52776: LD_VAR 0 1
52780: NOT
52781: PUSH
52782: LD_VAR 0 2
52786: NOT
52787: OR
52788: PUSH
52789: LD_VAR 0 1
52793: PPUSH
52794: CALL_OW 314
52798: OR
52799: IFFALSE 52803
// exit ;
52801: GO 53244
// x := GetX ( enemy_unit ) ;
52803: LD_ADDR_VAR 0 7
52807: PUSH
52808: LD_VAR 0 2
52812: PPUSH
52813: CALL_OW 250
52817: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
52818: LD_ADDR_VAR 0 8
52822: PUSH
52823: LD_VAR 0 2
52827: PPUSH
52828: CALL_OW 251
52832: ST_TO_ADDR
// if not x or not y then
52833: LD_VAR 0 7
52837: NOT
52838: PUSH
52839: LD_VAR 0 8
52843: NOT
52844: OR
52845: IFFALSE 52849
// exit ;
52847: GO 53244
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
52849: LD_ADDR_VAR 0 6
52853: PUSH
52854: LD_VAR 0 7
52858: PPUSH
52859: LD_INT 0
52861: PPUSH
52862: LD_INT 4
52864: PPUSH
52865: CALL_OW 272
52869: PUSH
52870: LD_VAR 0 8
52874: PPUSH
52875: LD_INT 0
52877: PPUSH
52878: LD_INT 4
52880: PPUSH
52881: CALL_OW 273
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_VAR 0 7
52894: PPUSH
52895: LD_INT 1
52897: PPUSH
52898: LD_INT 4
52900: PPUSH
52901: CALL_OW 272
52905: PUSH
52906: LD_VAR 0 8
52910: PPUSH
52911: LD_INT 1
52913: PPUSH
52914: LD_INT 4
52916: PPUSH
52917: CALL_OW 273
52921: PUSH
52922: EMPTY
52923: LIST
52924: LIST
52925: PUSH
52926: LD_VAR 0 7
52930: PPUSH
52931: LD_INT 2
52933: PPUSH
52934: LD_INT 4
52936: PPUSH
52937: CALL_OW 272
52941: PUSH
52942: LD_VAR 0 8
52946: PPUSH
52947: LD_INT 2
52949: PPUSH
52950: LD_INT 4
52952: PPUSH
52953: CALL_OW 273
52957: PUSH
52958: EMPTY
52959: LIST
52960: LIST
52961: PUSH
52962: LD_VAR 0 7
52966: PPUSH
52967: LD_INT 3
52969: PPUSH
52970: LD_INT 4
52972: PPUSH
52973: CALL_OW 272
52977: PUSH
52978: LD_VAR 0 8
52982: PPUSH
52983: LD_INT 3
52985: PPUSH
52986: LD_INT 4
52988: PPUSH
52989: CALL_OW 273
52993: PUSH
52994: EMPTY
52995: LIST
52996: LIST
52997: PUSH
52998: LD_VAR 0 7
53002: PPUSH
53003: LD_INT 4
53005: PPUSH
53006: LD_INT 4
53008: PPUSH
53009: CALL_OW 272
53013: PUSH
53014: LD_VAR 0 8
53018: PPUSH
53019: LD_INT 4
53021: PPUSH
53022: LD_INT 4
53024: PPUSH
53025: CALL_OW 273
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_VAR 0 7
53038: PPUSH
53039: LD_INT 5
53041: PPUSH
53042: LD_INT 4
53044: PPUSH
53045: CALL_OW 272
53049: PUSH
53050: LD_VAR 0 8
53054: PPUSH
53055: LD_INT 5
53057: PPUSH
53058: LD_INT 4
53060: PPUSH
53061: CALL_OW 273
53065: PUSH
53066: EMPTY
53067: LIST
53068: LIST
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: LIST
53074: LIST
53075: LIST
53076: LIST
53077: ST_TO_ADDR
// for i = tmp downto 1 do
53078: LD_ADDR_VAR 0 4
53082: PUSH
53083: DOUBLE
53084: LD_VAR 0 6
53088: INC
53089: ST_TO_ADDR
53090: LD_INT 1
53092: PUSH
53093: FOR_DOWNTO
53094: IFFALSE 53195
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
53096: LD_VAR 0 6
53100: PUSH
53101: LD_VAR 0 4
53105: ARRAY
53106: PUSH
53107: LD_INT 1
53109: ARRAY
53110: PPUSH
53111: LD_VAR 0 6
53115: PUSH
53116: LD_VAR 0 4
53120: ARRAY
53121: PUSH
53122: LD_INT 2
53124: ARRAY
53125: PPUSH
53126: CALL_OW 488
53130: NOT
53131: PUSH
53132: LD_VAR 0 6
53136: PUSH
53137: LD_VAR 0 4
53141: ARRAY
53142: PUSH
53143: LD_INT 1
53145: ARRAY
53146: PPUSH
53147: LD_VAR 0 6
53151: PUSH
53152: LD_VAR 0 4
53156: ARRAY
53157: PUSH
53158: LD_INT 2
53160: ARRAY
53161: PPUSH
53162: CALL_OW 428
53166: PUSH
53167: LD_INT 0
53169: NONEQUAL
53170: OR
53171: IFFALSE 53193
// tmp := Delete ( tmp , i ) ;
53173: LD_ADDR_VAR 0 6
53177: PUSH
53178: LD_VAR 0 6
53182: PPUSH
53183: LD_VAR 0 4
53187: PPUSH
53188: CALL_OW 3
53192: ST_TO_ADDR
53193: GO 53093
53195: POP
53196: POP
// j := GetClosestHex ( unit , tmp ) ;
53197: LD_ADDR_VAR 0 5
53201: PUSH
53202: LD_VAR 0 1
53206: PPUSH
53207: LD_VAR 0 6
53211: PPUSH
53212: CALL 52497 0 2
53216: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
53217: LD_VAR 0 1
53221: PPUSH
53222: LD_VAR 0 5
53226: PUSH
53227: LD_INT 1
53229: ARRAY
53230: PPUSH
53231: LD_VAR 0 5
53235: PUSH
53236: LD_INT 2
53238: ARRAY
53239: PPUSH
53240: CALL_OW 111
// end ;
53244: LD_VAR 0 3
53248: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
53249: LD_INT 0
53251: PPUSH
53252: PPUSH
53253: PPUSH
// uc_side = 0 ;
53254: LD_ADDR_OWVAR 20
53258: PUSH
53259: LD_INT 0
53261: ST_TO_ADDR
// uc_nation = 0 ;
53262: LD_ADDR_OWVAR 21
53266: PUSH
53267: LD_INT 0
53269: ST_TO_ADDR
// InitHc_All ( ) ;
53270: CALL_OW 584
// InitVc ;
53274: CALL_OW 20
// if mastodonts then
53278: LD_VAR 0 6
53282: IFFALSE 53349
// for i = 1 to mastodonts do
53284: LD_ADDR_VAR 0 11
53288: PUSH
53289: DOUBLE
53290: LD_INT 1
53292: DEC
53293: ST_TO_ADDR
53294: LD_VAR 0 6
53298: PUSH
53299: FOR_TO
53300: IFFALSE 53347
// begin vc_chassis := 31 ;
53302: LD_ADDR_OWVAR 37
53306: PUSH
53307: LD_INT 31
53309: ST_TO_ADDR
// vc_control := control_rider ;
53310: LD_ADDR_OWVAR 38
53314: PUSH
53315: LD_INT 4
53317: ST_TO_ADDR
// animal := CreateVehicle ;
53318: LD_ADDR_VAR 0 12
53322: PUSH
53323: CALL_OW 45
53327: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53328: LD_VAR 0 12
53332: PPUSH
53333: LD_VAR 0 8
53337: PPUSH
53338: LD_INT 0
53340: PPUSH
53341: CALL 55484 0 3
// end ;
53345: GO 53299
53347: POP
53348: POP
// if horses then
53349: LD_VAR 0 5
53353: IFFALSE 53420
// for i = 1 to horses do
53355: LD_ADDR_VAR 0 11
53359: PUSH
53360: DOUBLE
53361: LD_INT 1
53363: DEC
53364: ST_TO_ADDR
53365: LD_VAR 0 5
53369: PUSH
53370: FOR_TO
53371: IFFALSE 53418
// begin hc_class := 21 ;
53373: LD_ADDR_OWVAR 28
53377: PUSH
53378: LD_INT 21
53380: ST_TO_ADDR
// hc_gallery :=  ;
53381: LD_ADDR_OWVAR 33
53385: PUSH
53386: LD_STRING 
53388: ST_TO_ADDR
// animal := CreateHuman ;
53389: LD_ADDR_VAR 0 12
53393: PUSH
53394: CALL_OW 44
53398: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53399: LD_VAR 0 12
53403: PPUSH
53404: LD_VAR 0 8
53408: PPUSH
53409: LD_INT 0
53411: PPUSH
53412: CALL 55484 0 3
// end ;
53416: GO 53370
53418: POP
53419: POP
// if birds then
53420: LD_VAR 0 1
53424: IFFALSE 53491
// for i = 1 to birds do
53426: LD_ADDR_VAR 0 11
53430: PUSH
53431: DOUBLE
53432: LD_INT 1
53434: DEC
53435: ST_TO_ADDR
53436: LD_VAR 0 1
53440: PUSH
53441: FOR_TO
53442: IFFALSE 53489
// begin hc_class = 18 ;
53444: LD_ADDR_OWVAR 28
53448: PUSH
53449: LD_INT 18
53451: ST_TO_ADDR
// hc_gallery =  ;
53452: LD_ADDR_OWVAR 33
53456: PUSH
53457: LD_STRING 
53459: ST_TO_ADDR
// animal := CreateHuman ;
53460: LD_ADDR_VAR 0 12
53464: PUSH
53465: CALL_OW 44
53469: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53470: LD_VAR 0 12
53474: PPUSH
53475: LD_VAR 0 8
53479: PPUSH
53480: LD_INT 0
53482: PPUSH
53483: CALL 55484 0 3
// end ;
53487: GO 53441
53489: POP
53490: POP
// if tigers then
53491: LD_VAR 0 2
53495: IFFALSE 53579
// for i = 1 to tigers do
53497: LD_ADDR_VAR 0 11
53501: PUSH
53502: DOUBLE
53503: LD_INT 1
53505: DEC
53506: ST_TO_ADDR
53507: LD_VAR 0 2
53511: PUSH
53512: FOR_TO
53513: IFFALSE 53577
// begin hc_class = class_tiger ;
53515: LD_ADDR_OWVAR 28
53519: PUSH
53520: LD_INT 14
53522: ST_TO_ADDR
// hc_gallery =  ;
53523: LD_ADDR_OWVAR 33
53527: PUSH
53528: LD_STRING 
53530: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
53531: LD_ADDR_OWVAR 35
53535: PUSH
53536: LD_INT 7
53538: NEG
53539: PPUSH
53540: LD_INT 7
53542: PPUSH
53543: CALL_OW 12
53547: ST_TO_ADDR
// animal := CreateHuman ;
53548: LD_ADDR_VAR 0 12
53552: PUSH
53553: CALL_OW 44
53557: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53558: LD_VAR 0 12
53562: PPUSH
53563: LD_VAR 0 8
53567: PPUSH
53568: LD_INT 0
53570: PPUSH
53571: CALL 55484 0 3
// end ;
53575: GO 53512
53577: POP
53578: POP
// if apemans then
53579: LD_VAR 0 3
53583: IFFALSE 53706
// for i = 1 to apemans do
53585: LD_ADDR_VAR 0 11
53589: PUSH
53590: DOUBLE
53591: LD_INT 1
53593: DEC
53594: ST_TO_ADDR
53595: LD_VAR 0 3
53599: PUSH
53600: FOR_TO
53601: IFFALSE 53704
// begin hc_class = class_apeman ;
53603: LD_ADDR_OWVAR 28
53607: PUSH
53608: LD_INT 12
53610: ST_TO_ADDR
// hc_gallery =  ;
53611: LD_ADDR_OWVAR 33
53615: PUSH
53616: LD_STRING 
53618: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
53619: LD_ADDR_OWVAR 35
53623: PUSH
53624: LD_INT 2
53626: NEG
53627: PPUSH
53628: LD_INT 2
53630: PPUSH
53631: CALL_OW 12
53635: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
53636: LD_ADDR_OWVAR 31
53640: PUSH
53641: LD_INT 1
53643: PPUSH
53644: LD_INT 3
53646: PPUSH
53647: CALL_OW 12
53651: PUSH
53652: LD_INT 1
53654: PPUSH
53655: LD_INT 3
53657: PPUSH
53658: CALL_OW 12
53662: PUSH
53663: LD_INT 0
53665: PUSH
53666: LD_INT 0
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: LIST
53673: LIST
53674: ST_TO_ADDR
// animal := CreateHuman ;
53675: LD_ADDR_VAR 0 12
53679: PUSH
53680: CALL_OW 44
53684: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53685: LD_VAR 0 12
53689: PPUSH
53690: LD_VAR 0 8
53694: PPUSH
53695: LD_INT 0
53697: PPUSH
53698: CALL 55484 0 3
// end ;
53702: GO 53600
53704: POP
53705: POP
// if enchidnas then
53706: LD_VAR 0 4
53710: IFFALSE 53777
// for i = 1 to enchidnas do
53712: LD_ADDR_VAR 0 11
53716: PUSH
53717: DOUBLE
53718: LD_INT 1
53720: DEC
53721: ST_TO_ADDR
53722: LD_VAR 0 4
53726: PUSH
53727: FOR_TO
53728: IFFALSE 53775
// begin hc_class = 13 ;
53730: LD_ADDR_OWVAR 28
53734: PUSH
53735: LD_INT 13
53737: ST_TO_ADDR
// hc_gallery =  ;
53738: LD_ADDR_OWVAR 33
53742: PUSH
53743: LD_STRING 
53745: ST_TO_ADDR
// animal := CreateHuman ;
53746: LD_ADDR_VAR 0 12
53750: PUSH
53751: CALL_OW 44
53755: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53756: LD_VAR 0 12
53760: PPUSH
53761: LD_VAR 0 8
53765: PPUSH
53766: LD_INT 0
53768: PPUSH
53769: CALL 55484 0 3
// end ;
53773: GO 53727
53775: POP
53776: POP
// if fishes then
53777: LD_VAR 0 7
53781: IFFALSE 53848
// for i = 1 to fishes do
53783: LD_ADDR_VAR 0 11
53787: PUSH
53788: DOUBLE
53789: LD_INT 1
53791: DEC
53792: ST_TO_ADDR
53793: LD_VAR 0 7
53797: PUSH
53798: FOR_TO
53799: IFFALSE 53846
// begin hc_class = 20 ;
53801: LD_ADDR_OWVAR 28
53805: PUSH
53806: LD_INT 20
53808: ST_TO_ADDR
// hc_gallery =  ;
53809: LD_ADDR_OWVAR 33
53813: PUSH
53814: LD_STRING 
53816: ST_TO_ADDR
// animal := CreateHuman ;
53817: LD_ADDR_VAR 0 12
53821: PUSH
53822: CALL_OW 44
53826: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
53827: LD_VAR 0 12
53831: PPUSH
53832: LD_VAR 0 9
53836: PPUSH
53837: LD_INT 0
53839: PPUSH
53840: CALL 55484 0 3
// end ;
53844: GO 53798
53846: POP
53847: POP
// end ;
53848: LD_VAR 0 10
53852: RET
// export function WantHeal ( sci , unit ) ; begin
53853: LD_INT 0
53855: PPUSH
// if GetTaskList ( sci ) > 0 then
53856: LD_VAR 0 1
53860: PPUSH
53861: CALL_OW 437
53865: PUSH
53866: LD_INT 0
53868: GREATER
53869: IFFALSE 53939
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
53871: LD_VAR 0 1
53875: PPUSH
53876: CALL_OW 437
53880: PUSH
53881: LD_INT 1
53883: ARRAY
53884: PUSH
53885: LD_INT 1
53887: ARRAY
53888: PUSH
53889: LD_STRING l
53891: EQUAL
53892: PUSH
53893: LD_VAR 0 1
53897: PPUSH
53898: CALL_OW 437
53902: PUSH
53903: LD_INT 1
53905: ARRAY
53906: PUSH
53907: LD_INT 4
53909: ARRAY
53910: PUSH
53911: LD_VAR 0 2
53915: EQUAL
53916: AND
53917: IFFALSE 53929
// result := true else
53919: LD_ADDR_VAR 0 3
53923: PUSH
53924: LD_INT 1
53926: ST_TO_ADDR
53927: GO 53937
// result := false ;
53929: LD_ADDR_VAR 0 3
53933: PUSH
53934: LD_INT 0
53936: ST_TO_ADDR
// end else
53937: GO 53947
// result := false ;
53939: LD_ADDR_VAR 0 3
53943: PUSH
53944: LD_INT 0
53946: ST_TO_ADDR
// end ;
53947: LD_VAR 0 3
53951: RET
// export function HealTarget ( sci ) ; begin
53952: LD_INT 0
53954: PPUSH
// if not sci then
53955: LD_VAR 0 1
53959: NOT
53960: IFFALSE 53964
// exit ;
53962: GO 54029
// result := 0 ;
53964: LD_ADDR_VAR 0 2
53968: PUSH
53969: LD_INT 0
53971: ST_TO_ADDR
// if GetTaskList ( sci ) then
53972: LD_VAR 0 1
53976: PPUSH
53977: CALL_OW 437
53981: IFFALSE 54029
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
53983: LD_VAR 0 1
53987: PPUSH
53988: CALL_OW 437
53992: PUSH
53993: LD_INT 1
53995: ARRAY
53996: PUSH
53997: LD_INT 1
53999: ARRAY
54000: PUSH
54001: LD_STRING l
54003: EQUAL
54004: IFFALSE 54029
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
54006: LD_ADDR_VAR 0 2
54010: PUSH
54011: LD_VAR 0 1
54015: PPUSH
54016: CALL_OW 437
54020: PUSH
54021: LD_INT 1
54023: ARRAY
54024: PUSH
54025: LD_INT 4
54027: ARRAY
54028: ST_TO_ADDR
// end ;
54029: LD_VAR 0 2
54033: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
54034: LD_INT 0
54036: PPUSH
54037: PPUSH
54038: PPUSH
54039: PPUSH
// if not base_units then
54040: LD_VAR 0 1
54044: NOT
54045: IFFALSE 54049
// exit ;
54047: GO 54136
// result := false ;
54049: LD_ADDR_VAR 0 2
54053: PUSH
54054: LD_INT 0
54056: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
54057: LD_ADDR_VAR 0 5
54061: PUSH
54062: LD_VAR 0 1
54066: PPUSH
54067: LD_INT 21
54069: PUSH
54070: LD_INT 3
54072: PUSH
54073: EMPTY
54074: LIST
54075: LIST
54076: PPUSH
54077: CALL_OW 72
54081: ST_TO_ADDR
// if not tmp then
54082: LD_VAR 0 5
54086: NOT
54087: IFFALSE 54091
// exit ;
54089: GO 54136
// for i in tmp do
54091: LD_ADDR_VAR 0 3
54095: PUSH
54096: LD_VAR 0 5
54100: PUSH
54101: FOR_IN
54102: IFFALSE 54134
// begin result := EnemyInRange ( i , 22 ) ;
54104: LD_ADDR_VAR 0 2
54108: PUSH
54109: LD_VAR 0 3
54113: PPUSH
54114: LD_INT 22
54116: PPUSH
54117: CALL 52372 0 2
54121: ST_TO_ADDR
// if result then
54122: LD_VAR 0 2
54126: IFFALSE 54132
// exit ;
54128: POP
54129: POP
54130: GO 54136
// end ;
54132: GO 54101
54134: POP
54135: POP
// end ;
54136: LD_VAR 0 2
54140: RET
// export function FilterByTag ( units , tag ) ; begin
54141: LD_INT 0
54143: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
54144: LD_ADDR_VAR 0 3
54148: PUSH
54149: LD_VAR 0 1
54153: PPUSH
54154: LD_INT 120
54156: PUSH
54157: LD_VAR 0 2
54161: PUSH
54162: EMPTY
54163: LIST
54164: LIST
54165: PPUSH
54166: CALL_OW 72
54170: ST_TO_ADDR
// end ;
54171: LD_VAR 0 3
54175: RET
// export function IsDriver ( un ) ; begin
54176: LD_INT 0
54178: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
54179: LD_ADDR_VAR 0 2
54183: PUSH
54184: LD_VAR 0 1
54188: PUSH
54189: LD_INT 55
54191: PUSH
54192: EMPTY
54193: LIST
54194: PPUSH
54195: CALL_OW 69
54199: IN
54200: ST_TO_ADDR
// end ;
54201: LD_VAR 0 2
54205: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
54206: LD_INT 0
54208: PPUSH
54209: PPUSH
// list := [ ] ;
54210: LD_ADDR_VAR 0 5
54214: PUSH
54215: EMPTY
54216: ST_TO_ADDR
// case d of 0 :
54217: LD_VAR 0 3
54221: PUSH
54222: LD_INT 0
54224: DOUBLE
54225: EQUAL
54226: IFTRUE 54230
54228: GO 54363
54230: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
54231: LD_ADDR_VAR 0 5
54235: PUSH
54236: LD_VAR 0 1
54240: PUSH
54241: LD_INT 4
54243: MINUS
54244: PUSH
54245: LD_VAR 0 2
54249: PUSH
54250: LD_INT 4
54252: MINUS
54253: PUSH
54254: LD_INT 2
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: LIST
54261: PUSH
54262: LD_VAR 0 1
54266: PUSH
54267: LD_INT 3
54269: MINUS
54270: PUSH
54271: LD_VAR 0 2
54275: PUSH
54276: LD_INT 1
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: LIST
54283: PUSH
54284: LD_VAR 0 1
54288: PUSH
54289: LD_INT 4
54291: PLUS
54292: PUSH
54293: LD_VAR 0 2
54297: PUSH
54298: LD_INT 4
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: LIST
54305: PUSH
54306: LD_VAR 0 1
54310: PUSH
54311: LD_INT 3
54313: PLUS
54314: PUSH
54315: LD_VAR 0 2
54319: PUSH
54320: LD_INT 3
54322: PLUS
54323: PUSH
54324: LD_INT 5
54326: PUSH
54327: EMPTY
54328: LIST
54329: LIST
54330: LIST
54331: PUSH
54332: LD_VAR 0 1
54336: PUSH
54337: LD_VAR 0 2
54341: PUSH
54342: LD_INT 4
54344: PLUS
54345: PUSH
54346: LD_INT 0
54348: PUSH
54349: EMPTY
54350: LIST
54351: LIST
54352: LIST
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: LIST
54358: LIST
54359: LIST
54360: ST_TO_ADDR
// end ; 1 :
54361: GO 55061
54363: LD_INT 1
54365: DOUBLE
54366: EQUAL
54367: IFTRUE 54371
54369: GO 54504
54371: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
54372: LD_ADDR_VAR 0 5
54376: PUSH
54377: LD_VAR 0 1
54381: PUSH
54382: LD_VAR 0 2
54386: PUSH
54387: LD_INT 4
54389: MINUS
54390: PUSH
54391: LD_INT 3
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: LIST
54398: PUSH
54399: LD_VAR 0 1
54403: PUSH
54404: LD_INT 3
54406: MINUS
54407: PUSH
54408: LD_VAR 0 2
54412: PUSH
54413: LD_INT 3
54415: MINUS
54416: PUSH
54417: LD_INT 2
54419: PUSH
54420: EMPTY
54421: LIST
54422: LIST
54423: LIST
54424: PUSH
54425: LD_VAR 0 1
54429: PUSH
54430: LD_INT 4
54432: MINUS
54433: PUSH
54434: LD_VAR 0 2
54438: PUSH
54439: LD_INT 1
54441: PUSH
54442: EMPTY
54443: LIST
54444: LIST
54445: LIST
54446: PUSH
54447: LD_VAR 0 1
54451: PUSH
54452: LD_VAR 0 2
54456: PUSH
54457: LD_INT 3
54459: PLUS
54460: PUSH
54461: LD_INT 0
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: LIST
54468: PUSH
54469: LD_VAR 0 1
54473: PUSH
54474: LD_INT 4
54476: PLUS
54477: PUSH
54478: LD_VAR 0 2
54482: PUSH
54483: LD_INT 4
54485: PLUS
54486: PUSH
54487: LD_INT 5
54489: PUSH
54490: EMPTY
54491: LIST
54492: LIST
54493: LIST
54494: PUSH
54495: EMPTY
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: ST_TO_ADDR
// end ; 2 :
54502: GO 55061
54504: LD_INT 2
54506: DOUBLE
54507: EQUAL
54508: IFTRUE 54512
54510: GO 54641
54512: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
54513: LD_ADDR_VAR 0 5
54517: PUSH
54518: LD_VAR 0 1
54522: PUSH
54523: LD_VAR 0 2
54527: PUSH
54528: LD_INT 3
54530: MINUS
54531: PUSH
54532: LD_INT 3
54534: PUSH
54535: EMPTY
54536: LIST
54537: LIST
54538: LIST
54539: PUSH
54540: LD_VAR 0 1
54544: PUSH
54545: LD_INT 4
54547: PLUS
54548: PUSH
54549: LD_VAR 0 2
54553: PUSH
54554: LD_INT 4
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: LIST
54561: PUSH
54562: LD_VAR 0 1
54566: PUSH
54567: LD_VAR 0 2
54571: PUSH
54572: LD_INT 4
54574: PLUS
54575: PUSH
54576: LD_INT 0
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: LIST
54583: PUSH
54584: LD_VAR 0 1
54588: PUSH
54589: LD_INT 3
54591: MINUS
54592: PUSH
54593: LD_VAR 0 2
54597: PUSH
54598: LD_INT 1
54600: PUSH
54601: EMPTY
54602: LIST
54603: LIST
54604: LIST
54605: PUSH
54606: LD_VAR 0 1
54610: PUSH
54611: LD_INT 4
54613: MINUS
54614: PUSH
54615: LD_VAR 0 2
54619: PUSH
54620: LD_INT 4
54622: MINUS
54623: PUSH
54624: LD_INT 2
54626: PUSH
54627: EMPTY
54628: LIST
54629: LIST
54630: LIST
54631: PUSH
54632: EMPTY
54633: LIST
54634: LIST
54635: LIST
54636: LIST
54637: LIST
54638: ST_TO_ADDR
// end ; 3 :
54639: GO 55061
54641: LD_INT 3
54643: DOUBLE
54644: EQUAL
54645: IFTRUE 54649
54647: GO 54782
54649: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
54650: LD_ADDR_VAR 0 5
54654: PUSH
54655: LD_VAR 0 1
54659: PUSH
54660: LD_INT 3
54662: PLUS
54663: PUSH
54664: LD_VAR 0 2
54668: PUSH
54669: LD_INT 4
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: LIST
54676: PUSH
54677: LD_VAR 0 1
54681: PUSH
54682: LD_INT 4
54684: PLUS
54685: PUSH
54686: LD_VAR 0 2
54690: PUSH
54691: LD_INT 4
54693: PLUS
54694: PUSH
54695: LD_INT 5
54697: PUSH
54698: EMPTY
54699: LIST
54700: LIST
54701: LIST
54702: PUSH
54703: LD_VAR 0 1
54707: PUSH
54708: LD_INT 4
54710: MINUS
54711: PUSH
54712: LD_VAR 0 2
54716: PUSH
54717: LD_INT 1
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: LIST
54724: PUSH
54725: LD_VAR 0 1
54729: PUSH
54730: LD_VAR 0 2
54734: PUSH
54735: LD_INT 4
54737: MINUS
54738: PUSH
54739: LD_INT 3
54741: PUSH
54742: EMPTY
54743: LIST
54744: LIST
54745: LIST
54746: PUSH
54747: LD_VAR 0 1
54751: PUSH
54752: LD_INT 3
54754: MINUS
54755: PUSH
54756: LD_VAR 0 2
54760: PUSH
54761: LD_INT 3
54763: MINUS
54764: PUSH
54765: LD_INT 2
54767: PUSH
54768: EMPTY
54769: LIST
54770: LIST
54771: LIST
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: LIST
54777: LIST
54778: LIST
54779: ST_TO_ADDR
// end ; 4 :
54780: GO 55061
54782: LD_INT 4
54784: DOUBLE
54785: EQUAL
54786: IFTRUE 54790
54788: GO 54923
54790: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
54791: LD_ADDR_VAR 0 5
54795: PUSH
54796: LD_VAR 0 1
54800: PUSH
54801: LD_VAR 0 2
54805: PUSH
54806: LD_INT 4
54808: PLUS
54809: PUSH
54810: LD_INT 0
54812: PUSH
54813: EMPTY
54814: LIST
54815: LIST
54816: LIST
54817: PUSH
54818: LD_VAR 0 1
54822: PUSH
54823: LD_INT 3
54825: PLUS
54826: PUSH
54827: LD_VAR 0 2
54831: PUSH
54832: LD_INT 3
54834: PLUS
54835: PUSH
54836: LD_INT 5
54838: PUSH
54839: EMPTY
54840: LIST
54841: LIST
54842: LIST
54843: PUSH
54844: LD_VAR 0 1
54848: PUSH
54849: LD_INT 4
54851: PLUS
54852: PUSH
54853: LD_VAR 0 2
54857: PUSH
54858: LD_INT 4
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: LIST
54865: PUSH
54866: LD_VAR 0 1
54870: PUSH
54871: LD_VAR 0 2
54875: PUSH
54876: LD_INT 3
54878: MINUS
54879: PUSH
54880: LD_INT 3
54882: PUSH
54883: EMPTY
54884: LIST
54885: LIST
54886: LIST
54887: PUSH
54888: LD_VAR 0 1
54892: PUSH
54893: LD_INT 4
54895: MINUS
54896: PUSH
54897: LD_VAR 0 2
54901: PUSH
54902: LD_INT 4
54904: MINUS
54905: PUSH
54906: LD_INT 2
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: LIST
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: LIST
54918: LIST
54919: LIST
54920: ST_TO_ADDR
// end ; 5 :
54921: GO 55061
54923: LD_INT 5
54925: DOUBLE
54926: EQUAL
54927: IFTRUE 54931
54929: GO 55060
54931: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
54932: LD_ADDR_VAR 0 5
54936: PUSH
54937: LD_VAR 0 1
54941: PUSH
54942: LD_INT 4
54944: MINUS
54945: PUSH
54946: LD_VAR 0 2
54950: PUSH
54951: LD_INT 1
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: LIST
54958: PUSH
54959: LD_VAR 0 1
54963: PUSH
54964: LD_VAR 0 2
54968: PUSH
54969: LD_INT 4
54971: MINUS
54972: PUSH
54973: LD_INT 3
54975: PUSH
54976: EMPTY
54977: LIST
54978: LIST
54979: LIST
54980: PUSH
54981: LD_VAR 0 1
54985: PUSH
54986: LD_INT 4
54988: PLUS
54989: PUSH
54990: LD_VAR 0 2
54994: PUSH
54995: LD_INT 4
54997: PLUS
54998: PUSH
54999: LD_INT 5
55001: PUSH
55002: EMPTY
55003: LIST
55004: LIST
55005: LIST
55006: PUSH
55007: LD_VAR 0 1
55011: PUSH
55012: LD_INT 3
55014: PLUS
55015: PUSH
55016: LD_VAR 0 2
55020: PUSH
55021: LD_INT 4
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: LIST
55028: PUSH
55029: LD_VAR 0 1
55033: PUSH
55034: LD_VAR 0 2
55038: PUSH
55039: LD_INT 3
55041: PLUS
55042: PUSH
55043: LD_INT 0
55045: PUSH
55046: EMPTY
55047: LIST
55048: LIST
55049: LIST
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: ST_TO_ADDR
// end ; end ;
55058: GO 55061
55060: POP
// result := list ;
55061: LD_ADDR_VAR 0 4
55065: PUSH
55066: LD_VAR 0 5
55070: ST_TO_ADDR
// end ;
55071: LD_VAR 0 4
55075: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
55076: LD_INT 0
55078: PPUSH
55079: PPUSH
55080: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
55081: LD_VAR 0 1
55085: NOT
55086: PUSH
55087: LD_VAR 0 2
55091: PUSH
55092: LD_INT 1
55094: PUSH
55095: LD_INT 2
55097: PUSH
55098: LD_INT 3
55100: PUSH
55101: LD_INT 4
55103: PUSH
55104: EMPTY
55105: LIST
55106: LIST
55107: LIST
55108: LIST
55109: IN
55110: NOT
55111: OR
55112: IFFALSE 55116
// exit ;
55114: GO 55208
// tmp := [ ] ;
55116: LD_ADDR_VAR 0 5
55120: PUSH
55121: EMPTY
55122: ST_TO_ADDR
// for i in units do
55123: LD_ADDR_VAR 0 4
55127: PUSH
55128: LD_VAR 0 1
55132: PUSH
55133: FOR_IN
55134: IFFALSE 55177
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
55136: LD_ADDR_VAR 0 5
55140: PUSH
55141: LD_VAR 0 5
55145: PPUSH
55146: LD_VAR 0 5
55150: PUSH
55151: LD_INT 1
55153: PLUS
55154: PPUSH
55155: LD_VAR 0 4
55159: PPUSH
55160: LD_VAR 0 2
55164: PPUSH
55165: CALL_OW 259
55169: PPUSH
55170: CALL_OW 2
55174: ST_TO_ADDR
55175: GO 55133
55177: POP
55178: POP
// if not tmp then
55179: LD_VAR 0 5
55183: NOT
55184: IFFALSE 55188
// exit ;
55186: GO 55208
// result := SortListByListDesc ( units , tmp ) ;
55188: LD_ADDR_VAR 0 3
55192: PUSH
55193: LD_VAR 0 1
55197: PPUSH
55198: LD_VAR 0 5
55202: PPUSH
55203: CALL_OW 77
55207: ST_TO_ADDR
// end ;
55208: LD_VAR 0 3
55212: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
55213: LD_INT 0
55215: PPUSH
55216: PPUSH
55217: PPUSH
// result := false ;
55218: LD_ADDR_VAR 0 3
55222: PUSH
55223: LD_INT 0
55225: ST_TO_ADDR
// x := GetX ( building ) ;
55226: LD_ADDR_VAR 0 4
55230: PUSH
55231: LD_VAR 0 2
55235: PPUSH
55236: CALL_OW 250
55240: ST_TO_ADDR
// y := GetY ( building ) ;
55241: LD_ADDR_VAR 0 5
55245: PUSH
55246: LD_VAR 0 2
55250: PPUSH
55251: CALL_OW 251
55255: ST_TO_ADDR
// if not building or not x or not y then
55256: LD_VAR 0 2
55260: NOT
55261: PUSH
55262: LD_VAR 0 4
55266: NOT
55267: OR
55268: PUSH
55269: LD_VAR 0 5
55273: NOT
55274: OR
55275: IFFALSE 55279
// exit ;
55277: GO 55371
// if GetTaskList ( unit ) then
55279: LD_VAR 0 1
55283: PPUSH
55284: CALL_OW 437
55288: IFFALSE 55371
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
55290: LD_STRING e
55292: PUSH
55293: LD_VAR 0 1
55297: PPUSH
55298: CALL_OW 437
55302: PUSH
55303: LD_INT 1
55305: ARRAY
55306: PUSH
55307: LD_INT 1
55309: ARRAY
55310: EQUAL
55311: PUSH
55312: LD_VAR 0 4
55316: PUSH
55317: LD_VAR 0 1
55321: PPUSH
55322: CALL_OW 437
55326: PUSH
55327: LD_INT 1
55329: ARRAY
55330: PUSH
55331: LD_INT 2
55333: ARRAY
55334: EQUAL
55335: AND
55336: PUSH
55337: LD_VAR 0 5
55341: PUSH
55342: LD_VAR 0 1
55346: PPUSH
55347: CALL_OW 437
55351: PUSH
55352: LD_INT 1
55354: ARRAY
55355: PUSH
55356: LD_INT 3
55358: ARRAY
55359: EQUAL
55360: AND
55361: IFFALSE 55371
// result := true end ;
55363: LD_ADDR_VAR 0 3
55367: PUSH
55368: LD_INT 1
55370: ST_TO_ADDR
// end ;
55371: LD_VAR 0 3
55375: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
55376: LD_INT 0
55378: PPUSH
// result := false ;
55379: LD_ADDR_VAR 0 4
55383: PUSH
55384: LD_INT 0
55386: ST_TO_ADDR
// if GetTaskList ( unit ) then
55387: LD_VAR 0 1
55391: PPUSH
55392: CALL_OW 437
55396: IFFALSE 55479
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
55398: LD_STRING M
55400: PUSH
55401: LD_VAR 0 1
55405: PPUSH
55406: CALL_OW 437
55410: PUSH
55411: LD_INT 1
55413: ARRAY
55414: PUSH
55415: LD_INT 1
55417: ARRAY
55418: EQUAL
55419: PUSH
55420: LD_VAR 0 2
55424: PUSH
55425: LD_VAR 0 1
55429: PPUSH
55430: CALL_OW 437
55434: PUSH
55435: LD_INT 1
55437: ARRAY
55438: PUSH
55439: LD_INT 2
55441: ARRAY
55442: EQUAL
55443: AND
55444: PUSH
55445: LD_VAR 0 3
55449: PUSH
55450: LD_VAR 0 1
55454: PPUSH
55455: CALL_OW 437
55459: PUSH
55460: LD_INT 1
55462: ARRAY
55463: PUSH
55464: LD_INT 3
55466: ARRAY
55467: EQUAL
55468: AND
55469: IFFALSE 55479
// result := true ;
55471: LD_ADDR_VAR 0 4
55475: PUSH
55476: LD_INT 1
55478: ST_TO_ADDR
// end ; end ;
55479: LD_VAR 0 4
55483: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
55484: LD_INT 0
55486: PPUSH
55487: PPUSH
55488: PPUSH
55489: PPUSH
// if not unit or not area then
55490: LD_VAR 0 1
55494: NOT
55495: PUSH
55496: LD_VAR 0 2
55500: NOT
55501: OR
55502: IFFALSE 55506
// exit ;
55504: GO 55670
// tmp := AreaToList ( area , i ) ;
55506: LD_ADDR_VAR 0 6
55510: PUSH
55511: LD_VAR 0 2
55515: PPUSH
55516: LD_VAR 0 5
55520: PPUSH
55521: CALL_OW 517
55525: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
55526: LD_ADDR_VAR 0 5
55530: PUSH
55531: DOUBLE
55532: LD_INT 1
55534: DEC
55535: ST_TO_ADDR
55536: LD_VAR 0 6
55540: PUSH
55541: LD_INT 1
55543: ARRAY
55544: PUSH
55545: FOR_TO
55546: IFFALSE 55668
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
55548: LD_ADDR_VAR 0 7
55552: PUSH
55553: LD_VAR 0 6
55557: PUSH
55558: LD_INT 1
55560: ARRAY
55561: PUSH
55562: LD_VAR 0 5
55566: ARRAY
55567: PUSH
55568: LD_VAR 0 6
55572: PUSH
55573: LD_INT 2
55575: ARRAY
55576: PUSH
55577: LD_VAR 0 5
55581: ARRAY
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
55587: LD_VAR 0 7
55591: PUSH
55592: LD_INT 1
55594: ARRAY
55595: PPUSH
55596: LD_VAR 0 7
55600: PUSH
55601: LD_INT 2
55603: ARRAY
55604: PPUSH
55605: CALL_OW 428
55609: PUSH
55610: LD_INT 0
55612: EQUAL
55613: IFFALSE 55666
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
55615: LD_VAR 0 1
55619: PPUSH
55620: LD_VAR 0 7
55624: PUSH
55625: LD_INT 1
55627: ARRAY
55628: PPUSH
55629: LD_VAR 0 7
55633: PUSH
55634: LD_INT 2
55636: ARRAY
55637: PPUSH
55638: LD_VAR 0 3
55642: PPUSH
55643: CALL_OW 48
// result := IsPlaced ( unit ) ;
55647: LD_ADDR_VAR 0 4
55651: PUSH
55652: LD_VAR 0 1
55656: PPUSH
55657: CALL_OW 305
55661: ST_TO_ADDR
// exit ;
55662: POP
55663: POP
55664: GO 55670
// end ; end ;
55666: GO 55545
55668: POP
55669: POP
// end ;
55670: LD_VAR 0 4
55674: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
55675: LD_INT 0
55677: PPUSH
55678: PPUSH
55679: PPUSH
// if not side or side > 8 then
55680: LD_VAR 0 1
55684: NOT
55685: PUSH
55686: LD_VAR 0 1
55690: PUSH
55691: LD_INT 8
55693: GREATER
55694: OR
55695: IFFALSE 55699
// exit ;
55697: GO 55886
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
55699: LD_ADDR_VAR 0 4
55703: PUSH
55704: LD_INT 22
55706: PUSH
55707: LD_VAR 0 1
55711: PUSH
55712: EMPTY
55713: LIST
55714: LIST
55715: PUSH
55716: LD_INT 21
55718: PUSH
55719: LD_INT 3
55721: PUSH
55722: EMPTY
55723: LIST
55724: LIST
55725: PUSH
55726: EMPTY
55727: LIST
55728: LIST
55729: PPUSH
55730: CALL_OW 69
55734: ST_TO_ADDR
// if not tmp then
55735: LD_VAR 0 4
55739: NOT
55740: IFFALSE 55744
// exit ;
55742: GO 55886
// enable_addtolog := true ;
55744: LD_ADDR_OWVAR 81
55748: PUSH
55749: LD_INT 1
55751: ST_TO_ADDR
// AddToLog ( [ ) ;
55752: LD_STRING [
55754: PPUSH
55755: CALL_OW 561
// for i in tmp do
55759: LD_ADDR_VAR 0 3
55763: PUSH
55764: LD_VAR 0 4
55768: PUSH
55769: FOR_IN
55770: IFFALSE 55877
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
55772: LD_STRING [
55774: PUSH
55775: LD_VAR 0 3
55779: PPUSH
55780: CALL_OW 266
55784: STR
55785: PUSH
55786: LD_STRING , 
55788: STR
55789: PUSH
55790: LD_VAR 0 3
55794: PPUSH
55795: CALL_OW 250
55799: STR
55800: PUSH
55801: LD_STRING , 
55803: STR
55804: PUSH
55805: LD_VAR 0 3
55809: PPUSH
55810: CALL_OW 251
55814: STR
55815: PUSH
55816: LD_STRING , 
55818: STR
55819: PUSH
55820: LD_VAR 0 3
55824: PPUSH
55825: CALL_OW 254
55829: STR
55830: PUSH
55831: LD_STRING , 
55833: STR
55834: PUSH
55835: LD_VAR 0 3
55839: PPUSH
55840: LD_INT 1
55842: PPUSH
55843: CALL_OW 268
55847: STR
55848: PUSH
55849: LD_STRING , 
55851: STR
55852: PUSH
55853: LD_VAR 0 3
55857: PPUSH
55858: LD_INT 2
55860: PPUSH
55861: CALL_OW 268
55865: STR
55866: PUSH
55867: LD_STRING ],
55869: STR
55870: PPUSH
55871: CALL_OW 561
// end ;
55875: GO 55769
55877: POP
55878: POP
// AddToLog ( ]; ) ;
55879: LD_STRING ];
55881: PPUSH
55882: CALL_OW 561
// end ;
55886: LD_VAR 0 2
55890: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
55891: LD_INT 0
55893: PPUSH
55894: PPUSH
55895: PPUSH
55896: PPUSH
55897: PPUSH
// if not area or not rate or not max then
55898: LD_VAR 0 1
55902: NOT
55903: PUSH
55904: LD_VAR 0 2
55908: NOT
55909: OR
55910: PUSH
55911: LD_VAR 0 4
55915: NOT
55916: OR
55917: IFFALSE 55921
// exit ;
55919: GO 56110
// while 1 do
55921: LD_INT 1
55923: IFFALSE 56110
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
55925: LD_ADDR_VAR 0 9
55929: PUSH
55930: LD_VAR 0 1
55934: PPUSH
55935: LD_INT 1
55937: PPUSH
55938: CALL_OW 287
55942: PUSH
55943: LD_INT 10
55945: MUL
55946: ST_TO_ADDR
// r := rate / 10 ;
55947: LD_ADDR_VAR 0 7
55951: PUSH
55952: LD_VAR 0 2
55956: PUSH
55957: LD_INT 10
55959: DIVREAL
55960: ST_TO_ADDR
// time := 1 1$00 ;
55961: LD_ADDR_VAR 0 8
55965: PUSH
55966: LD_INT 2100
55968: ST_TO_ADDR
// if amount < min then
55969: LD_VAR 0 9
55973: PUSH
55974: LD_VAR 0 3
55978: LESS
55979: IFFALSE 55997
// r := r * 2 else
55981: LD_ADDR_VAR 0 7
55985: PUSH
55986: LD_VAR 0 7
55990: PUSH
55991: LD_INT 2
55993: MUL
55994: ST_TO_ADDR
55995: GO 56023
// if amount > max then
55997: LD_VAR 0 9
56001: PUSH
56002: LD_VAR 0 4
56006: GREATER
56007: IFFALSE 56023
// r := r / 2 ;
56009: LD_ADDR_VAR 0 7
56013: PUSH
56014: LD_VAR 0 7
56018: PUSH
56019: LD_INT 2
56021: DIVREAL
56022: ST_TO_ADDR
// time := time / r ;
56023: LD_ADDR_VAR 0 8
56027: PUSH
56028: LD_VAR 0 8
56032: PUSH
56033: LD_VAR 0 7
56037: DIVREAL
56038: ST_TO_ADDR
// if time < 0 then
56039: LD_VAR 0 8
56043: PUSH
56044: LD_INT 0
56046: LESS
56047: IFFALSE 56064
// time := time * - 1 ;
56049: LD_ADDR_VAR 0 8
56053: PUSH
56054: LD_VAR 0 8
56058: PUSH
56059: LD_INT 1
56061: NEG
56062: MUL
56063: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
56064: LD_VAR 0 8
56068: PUSH
56069: LD_INT 35
56071: PPUSH
56072: LD_INT 875
56074: PPUSH
56075: CALL_OW 12
56079: PLUS
56080: PPUSH
56081: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
56085: LD_INT 1
56087: PPUSH
56088: LD_INT 5
56090: PPUSH
56091: CALL_OW 12
56095: PPUSH
56096: LD_VAR 0 1
56100: PPUSH
56101: LD_INT 1
56103: PPUSH
56104: CALL_OW 55
// end ;
56108: GO 55921
// end ;
56110: LD_VAR 0 5
56114: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
56115: LD_INT 0
56117: PPUSH
56118: PPUSH
56119: PPUSH
56120: PPUSH
56121: PPUSH
56122: PPUSH
56123: PPUSH
56124: PPUSH
// if not turrets or not factories then
56125: LD_VAR 0 1
56129: NOT
56130: PUSH
56131: LD_VAR 0 2
56135: NOT
56136: OR
56137: IFFALSE 56141
// exit ;
56139: GO 56448
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
56141: LD_ADDR_VAR 0 10
56145: PUSH
56146: LD_INT 5
56148: PUSH
56149: LD_INT 6
56151: PUSH
56152: EMPTY
56153: LIST
56154: LIST
56155: PUSH
56156: LD_INT 2
56158: PUSH
56159: LD_INT 4
56161: PUSH
56162: EMPTY
56163: LIST
56164: LIST
56165: PUSH
56166: LD_INT 3
56168: PUSH
56169: LD_INT 5
56171: PUSH
56172: EMPTY
56173: LIST
56174: LIST
56175: PUSH
56176: EMPTY
56177: LIST
56178: LIST
56179: LIST
56180: PUSH
56181: LD_INT 24
56183: PUSH
56184: LD_INT 25
56186: PUSH
56187: EMPTY
56188: LIST
56189: LIST
56190: PUSH
56191: LD_INT 23
56193: PUSH
56194: LD_INT 27
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: PUSH
56201: EMPTY
56202: LIST
56203: LIST
56204: PUSH
56205: LD_INT 42
56207: PUSH
56208: LD_INT 43
56210: PUSH
56211: EMPTY
56212: LIST
56213: LIST
56214: PUSH
56215: LD_INT 44
56217: PUSH
56218: LD_INT 46
56220: PUSH
56221: EMPTY
56222: LIST
56223: LIST
56224: PUSH
56225: LD_INT 45
56227: PUSH
56228: LD_INT 47
56230: PUSH
56231: EMPTY
56232: LIST
56233: LIST
56234: PUSH
56235: EMPTY
56236: LIST
56237: LIST
56238: LIST
56239: PUSH
56240: EMPTY
56241: LIST
56242: LIST
56243: LIST
56244: ST_TO_ADDR
// result := [ ] ;
56245: LD_ADDR_VAR 0 3
56249: PUSH
56250: EMPTY
56251: ST_TO_ADDR
// for i in turrets do
56252: LD_ADDR_VAR 0 4
56256: PUSH
56257: LD_VAR 0 1
56261: PUSH
56262: FOR_IN
56263: IFFALSE 56446
// begin nat := GetNation ( i ) ;
56265: LD_ADDR_VAR 0 7
56269: PUSH
56270: LD_VAR 0 4
56274: PPUSH
56275: CALL_OW 248
56279: ST_TO_ADDR
// weapon := 0 ;
56280: LD_ADDR_VAR 0 8
56284: PUSH
56285: LD_INT 0
56287: ST_TO_ADDR
// if not nat then
56288: LD_VAR 0 7
56292: NOT
56293: IFFALSE 56297
// continue ;
56295: GO 56262
// for j in list [ nat ] do
56297: LD_ADDR_VAR 0 5
56301: PUSH
56302: LD_VAR 0 10
56306: PUSH
56307: LD_VAR 0 7
56311: ARRAY
56312: PUSH
56313: FOR_IN
56314: IFFALSE 56355
// if GetBWeapon ( i ) = j [ 1 ] then
56316: LD_VAR 0 4
56320: PPUSH
56321: CALL_OW 269
56325: PUSH
56326: LD_VAR 0 5
56330: PUSH
56331: LD_INT 1
56333: ARRAY
56334: EQUAL
56335: IFFALSE 56353
// begin weapon := j [ 2 ] ;
56337: LD_ADDR_VAR 0 8
56341: PUSH
56342: LD_VAR 0 5
56346: PUSH
56347: LD_INT 2
56349: ARRAY
56350: ST_TO_ADDR
// break ;
56351: GO 56355
// end ;
56353: GO 56313
56355: POP
56356: POP
// if not weapon then
56357: LD_VAR 0 8
56361: NOT
56362: IFFALSE 56366
// continue ;
56364: GO 56262
// for k in factories do
56366: LD_ADDR_VAR 0 6
56370: PUSH
56371: LD_VAR 0 2
56375: PUSH
56376: FOR_IN
56377: IFFALSE 56442
// begin weapons := AvailableWeaponList ( k ) ;
56379: LD_ADDR_VAR 0 9
56383: PUSH
56384: LD_VAR 0 6
56388: PPUSH
56389: CALL_OW 478
56393: ST_TO_ADDR
// if not weapons then
56394: LD_VAR 0 9
56398: NOT
56399: IFFALSE 56403
// continue ;
56401: GO 56376
// if weapon in weapons then
56403: LD_VAR 0 8
56407: PUSH
56408: LD_VAR 0 9
56412: IN
56413: IFFALSE 56440
// begin result := [ i , weapon ] ;
56415: LD_ADDR_VAR 0 3
56419: PUSH
56420: LD_VAR 0 4
56424: PUSH
56425: LD_VAR 0 8
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: ST_TO_ADDR
// exit ;
56434: POP
56435: POP
56436: POP
56437: POP
56438: GO 56448
// end ; end ;
56440: GO 56376
56442: POP
56443: POP
// end ;
56444: GO 56262
56446: POP
56447: POP
// end ;
56448: LD_VAR 0 3
56452: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
56453: LD_INT 0
56455: PPUSH
// if not side or side > 8 then
56456: LD_VAR 0 3
56460: NOT
56461: PUSH
56462: LD_VAR 0 3
56466: PUSH
56467: LD_INT 8
56469: GREATER
56470: OR
56471: IFFALSE 56475
// exit ;
56473: GO 56534
// if not range then
56475: LD_VAR 0 4
56479: NOT
56480: IFFALSE 56491
// range := - 12 ;
56482: LD_ADDR_VAR 0 4
56486: PUSH
56487: LD_INT 12
56489: NEG
56490: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
56491: LD_VAR 0 1
56495: PPUSH
56496: LD_VAR 0 2
56500: PPUSH
56501: LD_VAR 0 3
56505: PPUSH
56506: LD_VAR 0 4
56510: PPUSH
56511: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
56515: LD_VAR 0 1
56519: PPUSH
56520: LD_VAR 0 2
56524: PPUSH
56525: LD_VAR 0 3
56529: PPUSH
56530: CALL_OW 331
// end ;
56534: LD_VAR 0 5
56538: RET
// export function Video ( mode ) ; begin
56539: LD_INT 0
56541: PPUSH
// ingame_video = mode ;
56542: LD_ADDR_OWVAR 52
56546: PUSH
56547: LD_VAR 0 1
56551: ST_TO_ADDR
// interface_hidden = mode ;
56552: LD_ADDR_OWVAR 54
56556: PUSH
56557: LD_VAR 0 1
56561: ST_TO_ADDR
// end ;
56562: LD_VAR 0 2
56566: RET
// export function Join ( array , element ) ; begin
56567: LD_INT 0
56569: PPUSH
// result := Replace ( array , array + 1 , element ) ;
56570: LD_ADDR_VAR 0 3
56574: PUSH
56575: LD_VAR 0 1
56579: PPUSH
56580: LD_VAR 0 1
56584: PUSH
56585: LD_INT 1
56587: PLUS
56588: PPUSH
56589: LD_VAR 0 2
56593: PPUSH
56594: CALL_OW 1
56598: ST_TO_ADDR
// end ;
56599: LD_VAR 0 3
56603: RET
// export function JoinUnion ( array , element ) ; begin
56604: LD_INT 0
56606: PPUSH
// result := array union element ;
56607: LD_ADDR_VAR 0 3
56611: PUSH
56612: LD_VAR 0 1
56616: PUSH
56617: LD_VAR 0 2
56621: UNION
56622: ST_TO_ADDR
// end ;
56623: LD_VAR 0 3
56627: RET
// export function GetBehemoths ( side ) ; begin
56628: LD_INT 0
56630: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
56631: LD_ADDR_VAR 0 2
56635: PUSH
56636: LD_INT 22
56638: PUSH
56639: LD_VAR 0 1
56643: PUSH
56644: EMPTY
56645: LIST
56646: LIST
56647: PUSH
56648: LD_INT 31
56650: PUSH
56651: LD_INT 25
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: EMPTY
56659: LIST
56660: LIST
56661: PPUSH
56662: CALL_OW 69
56666: ST_TO_ADDR
// end ;
56667: LD_VAR 0 2
56671: RET
// export function Shuffle ( array ) ; var i , index ; begin
56672: LD_INT 0
56674: PPUSH
56675: PPUSH
56676: PPUSH
// result := [ ] ;
56677: LD_ADDR_VAR 0 2
56681: PUSH
56682: EMPTY
56683: ST_TO_ADDR
// if not array then
56684: LD_VAR 0 1
56688: NOT
56689: IFFALSE 56693
// exit ;
56691: GO 56792
// Randomize ;
56693: CALL_OW 10
// for i = array downto 1 do
56697: LD_ADDR_VAR 0 3
56701: PUSH
56702: DOUBLE
56703: LD_VAR 0 1
56707: INC
56708: ST_TO_ADDR
56709: LD_INT 1
56711: PUSH
56712: FOR_DOWNTO
56713: IFFALSE 56790
// begin index := rand ( 1 , array ) ;
56715: LD_ADDR_VAR 0 4
56719: PUSH
56720: LD_INT 1
56722: PPUSH
56723: LD_VAR 0 1
56727: PPUSH
56728: CALL_OW 12
56732: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
56733: LD_ADDR_VAR 0 2
56737: PUSH
56738: LD_VAR 0 2
56742: PPUSH
56743: LD_VAR 0 2
56747: PUSH
56748: LD_INT 1
56750: PLUS
56751: PPUSH
56752: LD_VAR 0 1
56756: PUSH
56757: LD_VAR 0 4
56761: ARRAY
56762: PPUSH
56763: CALL_OW 2
56767: ST_TO_ADDR
// array := Delete ( array , index ) ;
56768: LD_ADDR_VAR 0 1
56772: PUSH
56773: LD_VAR 0 1
56777: PPUSH
56778: LD_VAR 0 4
56782: PPUSH
56783: CALL_OW 3
56787: ST_TO_ADDR
// end ;
56788: GO 56712
56790: POP
56791: POP
// end ;
56792: LD_VAR 0 2
56796: RET
// export function GetBaseMaterials ( base ) ; begin
56797: LD_INT 0
56799: PPUSH
// result := [ 0 , 0 , 0 ] ;
56800: LD_ADDR_VAR 0 2
56804: PUSH
56805: LD_INT 0
56807: PUSH
56808: LD_INT 0
56810: PUSH
56811: LD_INT 0
56813: PUSH
56814: EMPTY
56815: LIST
56816: LIST
56817: LIST
56818: ST_TO_ADDR
// if not base then
56819: LD_VAR 0 1
56823: NOT
56824: IFFALSE 56828
// exit ;
56826: GO 56877
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
56828: LD_ADDR_VAR 0 2
56832: PUSH
56833: LD_VAR 0 1
56837: PPUSH
56838: LD_INT 1
56840: PPUSH
56841: CALL_OW 275
56845: PUSH
56846: LD_VAR 0 1
56850: PPUSH
56851: LD_INT 2
56853: PPUSH
56854: CALL_OW 275
56858: PUSH
56859: LD_VAR 0 1
56863: PPUSH
56864: LD_INT 3
56866: PPUSH
56867: CALL_OW 275
56871: PUSH
56872: EMPTY
56873: LIST
56874: LIST
56875: LIST
56876: ST_TO_ADDR
// end ;
56877: LD_VAR 0 2
56881: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
56882: LD_INT 0
56884: PPUSH
56885: PPUSH
// result := array ;
56886: LD_ADDR_VAR 0 3
56890: PUSH
56891: LD_VAR 0 1
56895: ST_TO_ADDR
// if size > 0 then
56896: LD_VAR 0 2
56900: PUSH
56901: LD_INT 0
56903: GREATER
56904: IFFALSE 56950
// for i := array downto size do
56906: LD_ADDR_VAR 0 4
56910: PUSH
56911: DOUBLE
56912: LD_VAR 0 1
56916: INC
56917: ST_TO_ADDR
56918: LD_VAR 0 2
56922: PUSH
56923: FOR_DOWNTO
56924: IFFALSE 56948
// result := Delete ( result , result ) ;
56926: LD_ADDR_VAR 0 3
56930: PUSH
56931: LD_VAR 0 3
56935: PPUSH
56936: LD_VAR 0 3
56940: PPUSH
56941: CALL_OW 3
56945: ST_TO_ADDR
56946: GO 56923
56948: POP
56949: POP
// end ;
56950: LD_VAR 0 3
56954: RET
// export function ComExit ( unit ) ; var tmp ; begin
56955: LD_INT 0
56957: PPUSH
56958: PPUSH
// if not IsInUnit ( unit ) then
56959: LD_VAR 0 1
56963: PPUSH
56964: CALL_OW 310
56968: NOT
56969: IFFALSE 56973
// exit ;
56971: GO 57033
// tmp := IsInUnit ( unit ) ;
56973: LD_ADDR_VAR 0 3
56977: PUSH
56978: LD_VAR 0 1
56982: PPUSH
56983: CALL_OW 310
56987: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
56988: LD_VAR 0 3
56992: PPUSH
56993: CALL_OW 247
56997: PUSH
56998: LD_INT 2
57000: EQUAL
57001: IFFALSE 57014
// ComExitVehicle ( unit ) else
57003: LD_VAR 0 1
57007: PPUSH
57008: CALL_OW 121
57012: GO 57023
// ComExitBuilding ( unit ) ;
57014: LD_VAR 0 1
57018: PPUSH
57019: CALL_OW 122
// result := tmp ;
57023: LD_ADDR_VAR 0 2
57027: PUSH
57028: LD_VAR 0 3
57032: ST_TO_ADDR
// end ;
57033: LD_VAR 0 2
57037: RET
// export function ComExitAll ( units ) ; var i ; begin
57038: LD_INT 0
57040: PPUSH
57041: PPUSH
// if not units then
57042: LD_VAR 0 1
57046: NOT
57047: IFFALSE 57051
// exit ;
57049: GO 57077
// for i in units do
57051: LD_ADDR_VAR 0 3
57055: PUSH
57056: LD_VAR 0 1
57060: PUSH
57061: FOR_IN
57062: IFFALSE 57075
// ComExit ( i ) ;
57064: LD_VAR 0 3
57068: PPUSH
57069: CALL 56955 0 1
57073: GO 57061
57075: POP
57076: POP
// end ;
57077: LD_VAR 0 2
57081: RET
// export function ResetHc ; begin
57082: LD_INT 0
57084: PPUSH
// InitHc ;
57085: CALL_OW 19
// hc_importance := 0 ;
57089: LD_ADDR_OWVAR 32
57093: PUSH
57094: LD_INT 0
57096: ST_TO_ADDR
// end ;
57097: LD_VAR 0 1
57101: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
57102: LD_INT 0
57104: PPUSH
57105: PPUSH
57106: PPUSH
// _x := ( x1 + x2 ) div 2 ;
57107: LD_ADDR_VAR 0 6
57111: PUSH
57112: LD_VAR 0 1
57116: PUSH
57117: LD_VAR 0 3
57121: PLUS
57122: PUSH
57123: LD_INT 2
57125: DIV
57126: ST_TO_ADDR
// if _x < 0 then
57127: LD_VAR 0 6
57131: PUSH
57132: LD_INT 0
57134: LESS
57135: IFFALSE 57152
// _x := _x * - 1 ;
57137: LD_ADDR_VAR 0 6
57141: PUSH
57142: LD_VAR 0 6
57146: PUSH
57147: LD_INT 1
57149: NEG
57150: MUL
57151: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
57152: LD_ADDR_VAR 0 7
57156: PUSH
57157: LD_VAR 0 2
57161: PUSH
57162: LD_VAR 0 4
57166: PLUS
57167: PUSH
57168: LD_INT 2
57170: DIV
57171: ST_TO_ADDR
// if _y < 0 then
57172: LD_VAR 0 7
57176: PUSH
57177: LD_INT 0
57179: LESS
57180: IFFALSE 57197
// _y := _y * - 1 ;
57182: LD_ADDR_VAR 0 7
57186: PUSH
57187: LD_VAR 0 7
57191: PUSH
57192: LD_INT 1
57194: NEG
57195: MUL
57196: ST_TO_ADDR
// result := [ _x , _y ] ;
57197: LD_ADDR_VAR 0 5
57201: PUSH
57202: LD_VAR 0 6
57206: PUSH
57207: LD_VAR 0 7
57211: PUSH
57212: EMPTY
57213: LIST
57214: LIST
57215: ST_TO_ADDR
// end ;
57216: LD_VAR 0 5
57220: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
57221: LD_INT 0
57223: PPUSH
57224: PPUSH
57225: PPUSH
57226: PPUSH
// task := GetTaskList ( unit ) ;
57227: LD_ADDR_VAR 0 7
57231: PUSH
57232: LD_VAR 0 1
57236: PPUSH
57237: CALL_OW 437
57241: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
57242: LD_VAR 0 7
57246: NOT
57247: PUSH
57248: LD_VAR 0 1
57252: PPUSH
57253: LD_VAR 0 2
57257: PPUSH
57258: CALL_OW 308
57262: NOT
57263: AND
57264: IFFALSE 57268
// exit ;
57266: GO 57386
// if IsInArea ( unit , area ) then
57268: LD_VAR 0 1
57272: PPUSH
57273: LD_VAR 0 2
57277: PPUSH
57278: CALL_OW 308
57282: IFFALSE 57300
// begin ComMoveToArea ( unit , goAway ) ;
57284: LD_VAR 0 1
57288: PPUSH
57289: LD_VAR 0 3
57293: PPUSH
57294: CALL_OW 113
// exit ;
57298: GO 57386
// end ; if task [ 1 ] [ 1 ] <> M then
57300: LD_VAR 0 7
57304: PUSH
57305: LD_INT 1
57307: ARRAY
57308: PUSH
57309: LD_INT 1
57311: ARRAY
57312: PUSH
57313: LD_STRING M
57315: NONEQUAL
57316: IFFALSE 57320
// exit ;
57318: GO 57386
// x := task [ 1 ] [ 2 ] ;
57320: LD_ADDR_VAR 0 5
57324: PUSH
57325: LD_VAR 0 7
57329: PUSH
57330: LD_INT 1
57332: ARRAY
57333: PUSH
57334: LD_INT 2
57336: ARRAY
57337: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
57338: LD_ADDR_VAR 0 6
57342: PUSH
57343: LD_VAR 0 7
57347: PUSH
57348: LD_INT 1
57350: ARRAY
57351: PUSH
57352: LD_INT 3
57354: ARRAY
57355: ST_TO_ADDR
// if InArea ( x , y , area ) then
57356: LD_VAR 0 5
57360: PPUSH
57361: LD_VAR 0 6
57365: PPUSH
57366: LD_VAR 0 2
57370: PPUSH
57371: CALL_OW 309
57375: IFFALSE 57386
// ComStop ( unit ) ;
57377: LD_VAR 0 1
57381: PPUSH
57382: CALL_OW 141
// end ;
57386: LD_VAR 0 4
57390: RET
// export function Abs ( value ) ; begin
57391: LD_INT 0
57393: PPUSH
// result := value ;
57394: LD_ADDR_VAR 0 2
57398: PUSH
57399: LD_VAR 0 1
57403: ST_TO_ADDR
// if value < 0 then
57404: LD_VAR 0 1
57408: PUSH
57409: LD_INT 0
57411: LESS
57412: IFFALSE 57429
// result := value * - 1 ;
57414: LD_ADDR_VAR 0 2
57418: PUSH
57419: LD_VAR 0 1
57423: PUSH
57424: LD_INT 1
57426: NEG
57427: MUL
57428: ST_TO_ADDR
// end ;
57429: LD_VAR 0 2
57433: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
57434: LD_INT 0
57436: PPUSH
57437: PPUSH
57438: PPUSH
57439: PPUSH
57440: PPUSH
57441: PPUSH
57442: PPUSH
57443: PPUSH
// if not unit or not building then
57444: LD_VAR 0 1
57448: NOT
57449: PUSH
57450: LD_VAR 0 2
57454: NOT
57455: OR
57456: IFFALSE 57460
// exit ;
57458: GO 57686
// x := GetX ( building ) ;
57460: LD_ADDR_VAR 0 4
57464: PUSH
57465: LD_VAR 0 2
57469: PPUSH
57470: CALL_OW 250
57474: ST_TO_ADDR
// y := GetY ( building ) ;
57475: LD_ADDR_VAR 0 6
57479: PUSH
57480: LD_VAR 0 2
57484: PPUSH
57485: CALL_OW 251
57489: ST_TO_ADDR
// d := GetDir ( building ) ;
57490: LD_ADDR_VAR 0 8
57494: PUSH
57495: LD_VAR 0 2
57499: PPUSH
57500: CALL_OW 254
57504: ST_TO_ADDR
// r := 4 ;
57505: LD_ADDR_VAR 0 9
57509: PUSH
57510: LD_INT 4
57512: ST_TO_ADDR
// for i := 1 to 5 do
57513: LD_ADDR_VAR 0 10
57517: PUSH
57518: DOUBLE
57519: LD_INT 1
57521: DEC
57522: ST_TO_ADDR
57523: LD_INT 5
57525: PUSH
57526: FOR_TO
57527: IFFALSE 57684
// begin _x := ShiftX ( x , d , r + i ) ;
57529: LD_ADDR_VAR 0 5
57533: PUSH
57534: LD_VAR 0 4
57538: PPUSH
57539: LD_VAR 0 8
57543: PPUSH
57544: LD_VAR 0 9
57548: PUSH
57549: LD_VAR 0 10
57553: PLUS
57554: PPUSH
57555: CALL_OW 272
57559: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
57560: LD_ADDR_VAR 0 7
57564: PUSH
57565: LD_VAR 0 6
57569: PPUSH
57570: LD_VAR 0 8
57574: PPUSH
57575: LD_VAR 0 9
57579: PUSH
57580: LD_VAR 0 10
57584: PLUS
57585: PPUSH
57586: CALL_OW 273
57590: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
57591: LD_VAR 0 5
57595: PPUSH
57596: LD_VAR 0 7
57600: PPUSH
57601: CALL_OW 488
57605: PUSH
57606: LD_VAR 0 5
57610: PPUSH
57611: LD_VAR 0 7
57615: PPUSH
57616: CALL_OW 428
57620: PPUSH
57621: CALL_OW 247
57625: PUSH
57626: LD_INT 3
57628: PUSH
57629: LD_INT 2
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: IN
57636: NOT
57637: AND
57638: IFFALSE 57682
// begin ComMoveXY ( unit , _x , _y ) ;
57640: LD_VAR 0 1
57644: PPUSH
57645: LD_VAR 0 5
57649: PPUSH
57650: LD_VAR 0 7
57654: PPUSH
57655: CALL_OW 111
// result := [ _x , _y ] ;
57659: LD_ADDR_VAR 0 3
57663: PUSH
57664: LD_VAR 0 5
57668: PUSH
57669: LD_VAR 0 7
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: ST_TO_ADDR
// exit ;
57678: POP
57679: POP
57680: GO 57686
// end ; end ;
57682: GO 57526
57684: POP
57685: POP
// end ;
57686: LD_VAR 0 3
57690: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
57691: LD_INT 0
57693: PPUSH
57694: PPUSH
57695: PPUSH
// result := 0 ;
57696: LD_ADDR_VAR 0 3
57700: PUSH
57701: LD_INT 0
57703: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
57704: LD_VAR 0 1
57708: PUSH
57709: LD_INT 0
57711: LESS
57712: PUSH
57713: LD_VAR 0 1
57717: PUSH
57718: LD_INT 8
57720: GREATER
57721: OR
57722: PUSH
57723: LD_VAR 0 2
57727: PUSH
57728: LD_INT 0
57730: LESS
57731: OR
57732: PUSH
57733: LD_VAR 0 2
57737: PUSH
57738: LD_INT 8
57740: GREATER
57741: OR
57742: IFFALSE 57746
// exit ;
57744: GO 57821
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
57746: LD_ADDR_VAR 0 4
57750: PUSH
57751: LD_INT 22
57753: PUSH
57754: LD_VAR 0 2
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: PPUSH
57763: CALL_OW 69
57767: PUSH
57768: FOR_IN
57769: IFFALSE 57819
// begin un := UnitShoot ( i ) ;
57771: LD_ADDR_VAR 0 5
57775: PUSH
57776: LD_VAR 0 4
57780: PPUSH
57781: CALL_OW 504
57785: ST_TO_ADDR
// if GetSide ( un ) = side1 then
57786: LD_VAR 0 5
57790: PPUSH
57791: CALL_OW 255
57795: PUSH
57796: LD_VAR 0 1
57800: EQUAL
57801: IFFALSE 57817
// begin result := un ;
57803: LD_ADDR_VAR 0 3
57807: PUSH
57808: LD_VAR 0 5
57812: ST_TO_ADDR
// exit ;
57813: POP
57814: POP
57815: GO 57821
// end ; end ;
57817: GO 57768
57819: POP
57820: POP
// end ;
57821: LD_VAR 0 3
57825: RET
// export function GetCargoBay ( units ) ; begin
57826: LD_INT 0
57828: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
57829: LD_ADDR_VAR 0 2
57833: PUSH
57834: LD_VAR 0 1
57838: PPUSH
57839: LD_INT 2
57841: PUSH
57842: LD_INT 34
57844: PUSH
57845: LD_INT 12
57847: PUSH
57848: EMPTY
57849: LIST
57850: LIST
57851: PUSH
57852: LD_INT 34
57854: PUSH
57855: LD_INT 51
57857: PUSH
57858: EMPTY
57859: LIST
57860: LIST
57861: PUSH
57862: LD_INT 34
57864: PUSH
57865: LD_INT 32
57867: PUSH
57868: EMPTY
57869: LIST
57870: LIST
57871: PUSH
57872: LD_INT 34
57874: PUSH
57875: LD_EXP 30
57879: PUSH
57880: EMPTY
57881: LIST
57882: LIST
57883: PUSH
57884: EMPTY
57885: LIST
57886: LIST
57887: LIST
57888: LIST
57889: LIST
57890: PPUSH
57891: CALL_OW 72
57895: ST_TO_ADDR
// end ;
57896: LD_VAR 0 2
57900: RET
// export function Negate ( value ) ; begin
57901: LD_INT 0
57903: PPUSH
// result := not value ;
57904: LD_ADDR_VAR 0 2
57908: PUSH
57909: LD_VAR 0 1
57913: NOT
57914: ST_TO_ADDR
// end ;
57915: LD_VAR 0 2
57919: RET
// export function Inc ( value ) ; begin
57920: LD_INT 0
57922: PPUSH
// result := value + 1 ;
57923: LD_ADDR_VAR 0 2
57927: PUSH
57928: LD_VAR 0 1
57932: PUSH
57933: LD_INT 1
57935: PLUS
57936: ST_TO_ADDR
// end ;
57937: LD_VAR 0 2
57941: RET
// export function Dec ( value ) ; begin
57942: LD_INT 0
57944: PPUSH
// result := value - 1 ;
57945: LD_ADDR_VAR 0 2
57949: PUSH
57950: LD_VAR 0 1
57954: PUSH
57955: LD_INT 1
57957: MINUS
57958: ST_TO_ADDR
// end ;
57959: LD_VAR 0 2
57963: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
57964: LD_INT 0
57966: PPUSH
57967: PPUSH
57968: PPUSH
57969: PPUSH
57970: PPUSH
57971: PPUSH
57972: PPUSH
57973: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
57974: LD_VAR 0 1
57978: PPUSH
57979: LD_VAR 0 2
57983: PPUSH
57984: CALL_OW 488
57988: NOT
57989: PUSH
57990: LD_VAR 0 3
57994: PPUSH
57995: LD_VAR 0 4
57999: PPUSH
58000: CALL_OW 488
58004: NOT
58005: OR
58006: IFFALSE 58019
// begin result := - 1 ;
58008: LD_ADDR_VAR 0 5
58012: PUSH
58013: LD_INT 1
58015: NEG
58016: ST_TO_ADDR
// exit ;
58017: GO 58254
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
58019: LD_ADDR_VAR 0 12
58023: PUSH
58024: LD_VAR 0 1
58028: PPUSH
58029: LD_VAR 0 2
58033: PPUSH
58034: LD_VAR 0 3
58038: PPUSH
58039: LD_VAR 0 4
58043: PPUSH
58044: CALL 57102 0 4
58048: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
58049: LD_ADDR_VAR 0 11
58053: PUSH
58054: LD_VAR 0 1
58058: PPUSH
58059: LD_VAR 0 2
58063: PPUSH
58064: LD_VAR 0 12
58068: PUSH
58069: LD_INT 1
58071: ARRAY
58072: PPUSH
58073: LD_VAR 0 12
58077: PUSH
58078: LD_INT 2
58080: ARRAY
58081: PPUSH
58082: CALL_OW 298
58086: ST_TO_ADDR
// distance := 9999 ;
58087: LD_ADDR_VAR 0 10
58091: PUSH
58092: LD_INT 9999
58094: ST_TO_ADDR
// for i := 0 to 5 do
58095: LD_ADDR_VAR 0 6
58099: PUSH
58100: DOUBLE
58101: LD_INT 0
58103: DEC
58104: ST_TO_ADDR
58105: LD_INT 5
58107: PUSH
58108: FOR_TO
58109: IFFALSE 58252
// begin _x := ShiftX ( x1 , i , centerDist ) ;
58111: LD_ADDR_VAR 0 7
58115: PUSH
58116: LD_VAR 0 1
58120: PPUSH
58121: LD_VAR 0 6
58125: PPUSH
58126: LD_VAR 0 11
58130: PPUSH
58131: CALL_OW 272
58135: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
58136: LD_ADDR_VAR 0 8
58140: PUSH
58141: LD_VAR 0 2
58145: PPUSH
58146: LD_VAR 0 6
58150: PPUSH
58151: LD_VAR 0 11
58155: PPUSH
58156: CALL_OW 273
58160: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
58161: LD_VAR 0 7
58165: PPUSH
58166: LD_VAR 0 8
58170: PPUSH
58171: CALL_OW 488
58175: NOT
58176: IFFALSE 58180
// continue ;
58178: GO 58108
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
58180: LD_ADDR_VAR 0 9
58184: PUSH
58185: LD_VAR 0 12
58189: PUSH
58190: LD_INT 1
58192: ARRAY
58193: PPUSH
58194: LD_VAR 0 12
58198: PUSH
58199: LD_INT 2
58201: ARRAY
58202: PPUSH
58203: LD_VAR 0 7
58207: PPUSH
58208: LD_VAR 0 8
58212: PPUSH
58213: CALL_OW 298
58217: ST_TO_ADDR
// if tmp < distance then
58218: LD_VAR 0 9
58222: PUSH
58223: LD_VAR 0 10
58227: LESS
58228: IFFALSE 58250
// begin result := i ;
58230: LD_ADDR_VAR 0 5
58234: PUSH
58235: LD_VAR 0 6
58239: ST_TO_ADDR
// distance := tmp ;
58240: LD_ADDR_VAR 0 10
58244: PUSH
58245: LD_VAR 0 9
58249: ST_TO_ADDR
// end ; end ;
58250: GO 58108
58252: POP
58253: POP
// end ;
58254: LD_VAR 0 5
58258: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
58259: LD_INT 0
58261: PPUSH
58262: PPUSH
// if not driver or not IsInUnit ( driver ) then
58263: LD_VAR 0 1
58267: NOT
58268: PUSH
58269: LD_VAR 0 1
58273: PPUSH
58274: CALL_OW 310
58278: NOT
58279: OR
58280: IFFALSE 58284
// exit ;
58282: GO 58374
// vehicle := IsInUnit ( driver ) ;
58284: LD_ADDR_VAR 0 3
58288: PUSH
58289: LD_VAR 0 1
58293: PPUSH
58294: CALL_OW 310
58298: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
58299: LD_VAR 0 1
58303: PPUSH
58304: LD_STRING \
58306: PUSH
58307: LD_INT 0
58309: PUSH
58310: LD_INT 0
58312: PUSH
58313: LD_INT 0
58315: PUSH
58316: LD_INT 0
58318: PUSH
58319: LD_INT 0
58321: PUSH
58322: LD_INT 0
58324: PUSH
58325: EMPTY
58326: LIST
58327: LIST
58328: LIST
58329: LIST
58330: LIST
58331: LIST
58332: LIST
58333: PUSH
58334: LD_STRING E
58336: PUSH
58337: LD_INT 0
58339: PUSH
58340: LD_INT 0
58342: PUSH
58343: LD_VAR 0 3
58347: PUSH
58348: LD_INT 0
58350: PUSH
58351: LD_INT 0
58353: PUSH
58354: LD_INT 0
58356: PUSH
58357: EMPTY
58358: LIST
58359: LIST
58360: LIST
58361: LIST
58362: LIST
58363: LIST
58364: LIST
58365: PUSH
58366: EMPTY
58367: LIST
58368: LIST
58369: PPUSH
58370: CALL_OW 446
// end ;
58374: LD_VAR 0 2
58378: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
58379: LD_INT 0
58381: PPUSH
58382: PPUSH
// if not driver or not IsInUnit ( driver ) then
58383: LD_VAR 0 1
58387: NOT
58388: PUSH
58389: LD_VAR 0 1
58393: PPUSH
58394: CALL_OW 310
58398: NOT
58399: OR
58400: IFFALSE 58404
// exit ;
58402: GO 58494
// vehicle := IsInUnit ( driver ) ;
58404: LD_ADDR_VAR 0 3
58408: PUSH
58409: LD_VAR 0 1
58413: PPUSH
58414: CALL_OW 310
58418: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
58419: LD_VAR 0 1
58423: PPUSH
58424: LD_STRING \
58426: PUSH
58427: LD_INT 0
58429: PUSH
58430: LD_INT 0
58432: PUSH
58433: LD_INT 0
58435: PUSH
58436: LD_INT 0
58438: PUSH
58439: LD_INT 0
58441: PUSH
58442: LD_INT 0
58444: PUSH
58445: EMPTY
58446: LIST
58447: LIST
58448: LIST
58449: LIST
58450: LIST
58451: LIST
58452: LIST
58453: PUSH
58454: LD_STRING E
58456: PUSH
58457: LD_INT 0
58459: PUSH
58460: LD_INT 0
58462: PUSH
58463: LD_VAR 0 3
58467: PUSH
58468: LD_INT 0
58470: PUSH
58471: LD_INT 0
58473: PUSH
58474: LD_INT 0
58476: PUSH
58477: EMPTY
58478: LIST
58479: LIST
58480: LIST
58481: LIST
58482: LIST
58483: LIST
58484: LIST
58485: PUSH
58486: EMPTY
58487: LIST
58488: LIST
58489: PPUSH
58490: CALL_OW 447
// end ;
58494: LD_VAR 0 2
58498: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
58499: LD_INT 0
58501: PPUSH
58502: PPUSH
58503: PPUSH
// tmp := [ ] ;
58504: LD_ADDR_VAR 0 5
58508: PUSH
58509: EMPTY
58510: ST_TO_ADDR
// for i in units do
58511: LD_ADDR_VAR 0 4
58515: PUSH
58516: LD_VAR 0 1
58520: PUSH
58521: FOR_IN
58522: IFFALSE 58560
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
58524: LD_ADDR_VAR 0 5
58528: PUSH
58529: LD_VAR 0 5
58533: PPUSH
58534: LD_VAR 0 5
58538: PUSH
58539: LD_INT 1
58541: PLUS
58542: PPUSH
58543: LD_VAR 0 4
58547: PPUSH
58548: CALL_OW 256
58552: PPUSH
58553: CALL_OW 2
58557: ST_TO_ADDR
58558: GO 58521
58560: POP
58561: POP
// if not tmp then
58562: LD_VAR 0 5
58566: NOT
58567: IFFALSE 58571
// exit ;
58569: GO 58619
// if asc then
58571: LD_VAR 0 2
58575: IFFALSE 58599
// result := SortListByListAsc ( units , tmp ) else
58577: LD_ADDR_VAR 0 3
58581: PUSH
58582: LD_VAR 0 1
58586: PPUSH
58587: LD_VAR 0 5
58591: PPUSH
58592: CALL_OW 76
58596: ST_TO_ADDR
58597: GO 58619
// result := SortListByListDesc ( units , tmp ) ;
58599: LD_ADDR_VAR 0 3
58603: PUSH
58604: LD_VAR 0 1
58608: PPUSH
58609: LD_VAR 0 5
58613: PPUSH
58614: CALL_OW 77
58618: ST_TO_ADDR
// end ;
58619: LD_VAR 0 3
58623: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
58624: LD_INT 0
58626: PPUSH
58627: PPUSH
// task := GetTaskList ( mech ) ;
58628: LD_ADDR_VAR 0 4
58632: PUSH
58633: LD_VAR 0 1
58637: PPUSH
58638: CALL_OW 437
58642: ST_TO_ADDR
// if not task then
58643: LD_VAR 0 4
58647: NOT
58648: IFFALSE 58652
// exit ;
58650: GO 58694
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
58652: LD_ADDR_VAR 0 3
58656: PUSH
58657: LD_VAR 0 4
58661: PUSH
58662: LD_INT 1
58664: ARRAY
58665: PUSH
58666: LD_INT 1
58668: ARRAY
58669: PUSH
58670: LD_STRING r
58672: EQUAL
58673: PUSH
58674: LD_VAR 0 4
58678: PUSH
58679: LD_INT 1
58681: ARRAY
58682: PUSH
58683: LD_INT 4
58685: ARRAY
58686: PUSH
58687: LD_VAR 0 2
58691: EQUAL
58692: AND
58693: ST_TO_ADDR
// end ;
58694: LD_VAR 0 3
58698: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
58699: LD_INT 0
58701: PPUSH
// SetDir ( unit , d ) ;
58702: LD_VAR 0 1
58706: PPUSH
58707: LD_VAR 0 4
58711: PPUSH
58712: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
58716: LD_VAR 0 1
58720: PPUSH
58721: LD_VAR 0 2
58725: PPUSH
58726: LD_VAR 0 3
58730: PPUSH
58731: LD_VAR 0 5
58735: PPUSH
58736: CALL_OW 48
// end ;
58740: LD_VAR 0 6
58744: RET
// export function ToNaturalNumber ( number ) ; begin
58745: LD_INT 0
58747: PPUSH
// result := number div 1 ;
58748: LD_ADDR_VAR 0 2
58752: PUSH
58753: LD_VAR 0 1
58757: PUSH
58758: LD_INT 1
58760: DIV
58761: ST_TO_ADDR
// if number < 0 then
58762: LD_VAR 0 1
58766: PUSH
58767: LD_INT 0
58769: LESS
58770: IFFALSE 58780
// result := 0 ;
58772: LD_ADDR_VAR 0 2
58776: PUSH
58777: LD_INT 0
58779: ST_TO_ADDR
// end ;
58780: LD_VAR 0 2
58784: RET
// export function SortByClass ( units , class ) ; var un ; begin
58785: LD_INT 0
58787: PPUSH
58788: PPUSH
// if not units or not class then
58789: LD_VAR 0 1
58793: NOT
58794: PUSH
58795: LD_VAR 0 2
58799: NOT
58800: OR
58801: IFFALSE 58805
// exit ;
58803: GO 58900
// result := [ ] ;
58805: LD_ADDR_VAR 0 3
58809: PUSH
58810: EMPTY
58811: ST_TO_ADDR
// for un in units do
58812: LD_ADDR_VAR 0 4
58816: PUSH
58817: LD_VAR 0 1
58821: PUSH
58822: FOR_IN
58823: IFFALSE 58898
// if GetClass ( un ) = class then
58825: LD_VAR 0 4
58829: PPUSH
58830: CALL_OW 257
58834: PUSH
58835: LD_VAR 0 2
58839: EQUAL
58840: IFFALSE 58867
// result := Insert ( result , 1 , un ) else
58842: LD_ADDR_VAR 0 3
58846: PUSH
58847: LD_VAR 0 3
58851: PPUSH
58852: LD_INT 1
58854: PPUSH
58855: LD_VAR 0 4
58859: PPUSH
58860: CALL_OW 2
58864: ST_TO_ADDR
58865: GO 58896
// result := Replace ( result , result + 1 , un ) ;
58867: LD_ADDR_VAR 0 3
58871: PUSH
58872: LD_VAR 0 3
58876: PPUSH
58877: LD_VAR 0 3
58881: PUSH
58882: LD_INT 1
58884: PLUS
58885: PPUSH
58886: LD_VAR 0 4
58890: PPUSH
58891: CALL_OW 1
58895: ST_TO_ADDR
58896: GO 58822
58898: POP
58899: POP
// end ;
58900: LD_VAR 0 3
58904: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
58905: LD_INT 0
58907: PPUSH
58908: PPUSH
58909: PPUSH
58910: PPUSH
58911: PPUSH
58912: PPUSH
58913: PPUSH
// result := [ ] ;
58914: LD_ADDR_VAR 0 4
58918: PUSH
58919: EMPTY
58920: ST_TO_ADDR
// if x - r < 0 then
58921: LD_VAR 0 1
58925: PUSH
58926: LD_VAR 0 3
58930: MINUS
58931: PUSH
58932: LD_INT 0
58934: LESS
58935: IFFALSE 58947
// min_x := 0 else
58937: LD_ADDR_VAR 0 8
58941: PUSH
58942: LD_INT 0
58944: ST_TO_ADDR
58945: GO 58963
// min_x := x - r ;
58947: LD_ADDR_VAR 0 8
58951: PUSH
58952: LD_VAR 0 1
58956: PUSH
58957: LD_VAR 0 3
58961: MINUS
58962: ST_TO_ADDR
// if y - r < 0 then
58963: LD_VAR 0 2
58967: PUSH
58968: LD_VAR 0 3
58972: MINUS
58973: PUSH
58974: LD_INT 0
58976: LESS
58977: IFFALSE 58989
// min_y := 0 else
58979: LD_ADDR_VAR 0 7
58983: PUSH
58984: LD_INT 0
58986: ST_TO_ADDR
58987: GO 59005
// min_y := y - r ;
58989: LD_ADDR_VAR 0 7
58993: PUSH
58994: LD_VAR 0 2
58998: PUSH
58999: LD_VAR 0 3
59003: MINUS
59004: ST_TO_ADDR
// max_x := x + r ;
59005: LD_ADDR_VAR 0 9
59009: PUSH
59010: LD_VAR 0 1
59014: PUSH
59015: LD_VAR 0 3
59019: PLUS
59020: ST_TO_ADDR
// max_y := y + r ;
59021: LD_ADDR_VAR 0 10
59025: PUSH
59026: LD_VAR 0 2
59030: PUSH
59031: LD_VAR 0 3
59035: PLUS
59036: ST_TO_ADDR
// for _x = min_x to max_x do
59037: LD_ADDR_VAR 0 5
59041: PUSH
59042: DOUBLE
59043: LD_VAR 0 8
59047: DEC
59048: ST_TO_ADDR
59049: LD_VAR 0 9
59053: PUSH
59054: FOR_TO
59055: IFFALSE 59156
// for _y = min_y to max_y do
59057: LD_ADDR_VAR 0 6
59061: PUSH
59062: DOUBLE
59063: LD_VAR 0 7
59067: DEC
59068: ST_TO_ADDR
59069: LD_VAR 0 10
59073: PUSH
59074: FOR_TO
59075: IFFALSE 59152
// begin if not ValidHex ( _x , _y ) then
59077: LD_VAR 0 5
59081: PPUSH
59082: LD_VAR 0 6
59086: PPUSH
59087: CALL_OW 488
59091: NOT
59092: IFFALSE 59096
// continue ;
59094: GO 59074
// if GetResourceTypeXY ( _x , _y ) then
59096: LD_VAR 0 5
59100: PPUSH
59101: LD_VAR 0 6
59105: PPUSH
59106: CALL_OW 283
59110: IFFALSE 59150
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
59112: LD_ADDR_VAR 0 4
59116: PUSH
59117: LD_VAR 0 4
59121: PPUSH
59122: LD_VAR 0 4
59126: PUSH
59127: LD_INT 1
59129: PLUS
59130: PPUSH
59131: LD_VAR 0 5
59135: PUSH
59136: LD_VAR 0 6
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: PPUSH
59145: CALL_OW 1
59149: ST_TO_ADDR
// end ;
59150: GO 59074
59152: POP
59153: POP
59154: GO 59054
59156: POP
59157: POP
// end ;
59158: LD_VAR 0 4
59162: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
59163: LD_INT 0
59165: PPUSH
59166: PPUSH
59167: PPUSH
59168: PPUSH
59169: PPUSH
59170: PPUSH
59171: PPUSH
59172: PPUSH
// if not units then
59173: LD_VAR 0 1
59177: NOT
59178: IFFALSE 59182
// exit ;
59180: GO 59607
// result := UnitFilter ( units , [ f_ok ] ) ;
59182: LD_ADDR_VAR 0 3
59186: PUSH
59187: LD_VAR 0 1
59191: PPUSH
59192: LD_INT 50
59194: PUSH
59195: EMPTY
59196: LIST
59197: PPUSH
59198: CALL_OW 72
59202: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
59203: LD_ADDR_VAR 0 8
59207: PUSH
59208: LD_VAR 0 1
59212: PUSH
59213: LD_INT 1
59215: ARRAY
59216: PPUSH
59217: CALL_OW 255
59221: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
59222: LD_ADDR_VAR 0 10
59226: PUSH
59227: LD_INT 29
59229: PUSH
59230: LD_EXP 33
59234: PUSH
59235: EMPTY
59236: LIST
59237: LIST
59238: ST_TO_ADDR
// if not result then
59239: LD_VAR 0 3
59243: NOT
59244: IFFALSE 59248
// exit ;
59246: GO 59607
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
59248: LD_ADDR_VAR 0 5
59252: PUSH
59253: LD_INT 81
59255: PUSH
59256: LD_VAR 0 8
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PPUSH
59265: CALL_OW 69
59269: ST_TO_ADDR
// for i in result do
59270: LD_ADDR_VAR 0 4
59274: PUSH
59275: LD_VAR 0 3
59279: PUSH
59280: FOR_IN
59281: IFFALSE 59605
// begin tag := GetTag ( i ) + 1 ;
59283: LD_ADDR_VAR 0 9
59287: PUSH
59288: LD_VAR 0 4
59292: PPUSH
59293: CALL_OW 110
59297: PUSH
59298: LD_INT 1
59300: PLUS
59301: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
59302: LD_ADDR_VAR 0 7
59306: PUSH
59307: LD_VAR 0 4
59311: PPUSH
59312: CALL_OW 250
59316: PPUSH
59317: LD_VAR 0 4
59321: PPUSH
59322: CALL_OW 251
59326: PPUSH
59327: LD_INT 6
59329: PPUSH
59330: CALL 58905 0 3
59334: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
59335: LD_VAR 0 7
59339: PUSH
59340: LD_VAR 0 4
59344: PPUSH
59345: CALL_OW 264
59349: PUSH
59350: LD_VAR 0 10
59354: IN
59355: NOT
59356: AND
59357: IFFALSE 59396
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
59359: LD_VAR 0 4
59363: PPUSH
59364: LD_VAR 0 7
59368: PUSH
59369: LD_INT 1
59371: ARRAY
59372: PUSH
59373: LD_INT 1
59375: ARRAY
59376: PPUSH
59377: LD_VAR 0 7
59381: PUSH
59382: LD_INT 1
59384: ARRAY
59385: PUSH
59386: LD_INT 2
59388: ARRAY
59389: PPUSH
59390: CALL_OW 116
59394: GO 59603
// if path > tag then
59396: LD_VAR 0 2
59400: PUSH
59401: LD_VAR 0 9
59405: GREATER
59406: IFFALSE 59573
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
59408: LD_ADDR_VAR 0 6
59412: PUSH
59413: LD_VAR 0 5
59417: PPUSH
59418: LD_INT 91
59420: PUSH
59421: LD_VAR 0 4
59425: PUSH
59426: LD_INT 12
59428: PUSH
59429: EMPTY
59430: LIST
59431: LIST
59432: LIST
59433: PPUSH
59434: CALL_OW 72
59438: ST_TO_ADDR
// if nearEnemy then
59439: LD_VAR 0 6
59443: IFFALSE 59471
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
59445: LD_VAR 0 4
59449: PPUSH
59450: LD_VAR 0 6
59454: PPUSH
59455: LD_VAR 0 4
59459: PPUSH
59460: CALL_OW 74
59464: PPUSH
59465: CALL_OW 115
59469: GO 59571
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
59471: LD_VAR 0 4
59475: PPUSH
59476: LD_VAR 0 2
59480: PUSH
59481: LD_VAR 0 9
59485: ARRAY
59486: PUSH
59487: LD_INT 1
59489: ARRAY
59490: PPUSH
59491: LD_VAR 0 2
59495: PUSH
59496: LD_VAR 0 9
59500: ARRAY
59501: PUSH
59502: LD_INT 2
59504: ARRAY
59505: PPUSH
59506: CALL_OW 297
59510: PUSH
59511: LD_INT 6
59513: GREATER
59514: IFFALSE 59557
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
59516: LD_VAR 0 4
59520: PPUSH
59521: LD_VAR 0 2
59525: PUSH
59526: LD_VAR 0 9
59530: ARRAY
59531: PUSH
59532: LD_INT 1
59534: ARRAY
59535: PPUSH
59536: LD_VAR 0 2
59540: PUSH
59541: LD_VAR 0 9
59545: ARRAY
59546: PUSH
59547: LD_INT 2
59549: ARRAY
59550: PPUSH
59551: CALL_OW 114
59555: GO 59571
// SetTag ( i , tag ) ;
59557: LD_VAR 0 4
59561: PPUSH
59562: LD_VAR 0 9
59566: PPUSH
59567: CALL_OW 109
// end else
59571: GO 59603
// if enemy then
59573: LD_VAR 0 5
59577: IFFALSE 59603
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
59579: LD_VAR 0 4
59583: PPUSH
59584: LD_VAR 0 5
59588: PPUSH
59589: LD_VAR 0 4
59593: PPUSH
59594: CALL_OW 74
59598: PPUSH
59599: CALL_OW 115
// end ;
59603: GO 59280
59605: POP
59606: POP
// end ;
59607: LD_VAR 0 3
59611: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
59612: LD_INT 0
59614: PPUSH
59615: PPUSH
59616: PPUSH
// if not unit or IsInUnit ( unit ) then
59617: LD_VAR 0 1
59621: NOT
59622: PUSH
59623: LD_VAR 0 1
59627: PPUSH
59628: CALL_OW 310
59632: OR
59633: IFFALSE 59637
// exit ;
59635: GO 59728
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
59637: LD_ADDR_VAR 0 4
59641: PUSH
59642: LD_VAR 0 1
59646: PPUSH
59647: CALL_OW 250
59651: PPUSH
59652: LD_VAR 0 2
59656: PPUSH
59657: LD_INT 1
59659: PPUSH
59660: CALL_OW 272
59664: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
59665: LD_ADDR_VAR 0 5
59669: PUSH
59670: LD_VAR 0 1
59674: PPUSH
59675: CALL_OW 251
59679: PPUSH
59680: LD_VAR 0 2
59684: PPUSH
59685: LD_INT 1
59687: PPUSH
59688: CALL_OW 273
59692: ST_TO_ADDR
// if ValidHex ( x , y ) then
59693: LD_VAR 0 4
59697: PPUSH
59698: LD_VAR 0 5
59702: PPUSH
59703: CALL_OW 488
59707: IFFALSE 59728
// ComTurnXY ( unit , x , y ) ;
59709: LD_VAR 0 1
59713: PPUSH
59714: LD_VAR 0 4
59718: PPUSH
59719: LD_VAR 0 5
59723: PPUSH
59724: CALL_OW 118
// end ;
59728: LD_VAR 0 3
59732: RET
// export function SeeUnits ( side , units ) ; var i ; begin
59733: LD_INT 0
59735: PPUSH
59736: PPUSH
// result := false ;
59737: LD_ADDR_VAR 0 3
59741: PUSH
59742: LD_INT 0
59744: ST_TO_ADDR
// if not units then
59745: LD_VAR 0 2
59749: NOT
59750: IFFALSE 59754
// exit ;
59752: GO 59799
// for i in units do
59754: LD_ADDR_VAR 0 4
59758: PUSH
59759: LD_VAR 0 2
59763: PUSH
59764: FOR_IN
59765: IFFALSE 59797
// if See ( side , i ) then
59767: LD_VAR 0 1
59771: PPUSH
59772: LD_VAR 0 4
59776: PPUSH
59777: CALL_OW 292
59781: IFFALSE 59795
// begin result := true ;
59783: LD_ADDR_VAR 0 3
59787: PUSH
59788: LD_INT 1
59790: ST_TO_ADDR
// exit ;
59791: POP
59792: POP
59793: GO 59799
// end ;
59795: GO 59764
59797: POP
59798: POP
// end ;
59799: LD_VAR 0 3
59803: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
59804: LD_INT 0
59806: PPUSH
59807: PPUSH
59808: PPUSH
59809: PPUSH
// if not unit or not points then
59810: LD_VAR 0 1
59814: NOT
59815: PUSH
59816: LD_VAR 0 2
59820: NOT
59821: OR
59822: IFFALSE 59826
// exit ;
59824: GO 59916
// dist := 99999 ;
59826: LD_ADDR_VAR 0 5
59830: PUSH
59831: LD_INT 99999
59833: ST_TO_ADDR
// for i in points do
59834: LD_ADDR_VAR 0 4
59838: PUSH
59839: LD_VAR 0 2
59843: PUSH
59844: FOR_IN
59845: IFFALSE 59914
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
59847: LD_ADDR_VAR 0 6
59851: PUSH
59852: LD_VAR 0 1
59856: PPUSH
59857: LD_VAR 0 4
59861: PUSH
59862: LD_INT 1
59864: ARRAY
59865: PPUSH
59866: LD_VAR 0 4
59870: PUSH
59871: LD_INT 2
59873: ARRAY
59874: PPUSH
59875: CALL_OW 297
59879: ST_TO_ADDR
// if tmpDist < dist then
59880: LD_VAR 0 6
59884: PUSH
59885: LD_VAR 0 5
59889: LESS
59890: IFFALSE 59912
// begin result := i ;
59892: LD_ADDR_VAR 0 3
59896: PUSH
59897: LD_VAR 0 4
59901: ST_TO_ADDR
// dist := tmpDist ;
59902: LD_ADDR_VAR 0 5
59906: PUSH
59907: LD_VAR 0 6
59911: ST_TO_ADDR
// end ; end ;
59912: GO 59844
59914: POP
59915: POP
// end ; end_of_file
59916: LD_VAR 0 3
59920: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
59921: LD_INT 0
59923: PPUSH
// ar_miner := 81 ;
59924: LD_ADDR_EXP 36
59928: PUSH
59929: LD_INT 81
59931: ST_TO_ADDR
// ar_crane := 88 ;
59932: LD_ADDR_EXP 35
59936: PUSH
59937: LD_INT 88
59939: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
59940: LD_ADDR_EXP 30
59944: PUSH
59945: LD_INT 89
59947: ST_TO_ADDR
// us_hack := 99 ;
59948: LD_ADDR_EXP 31
59952: PUSH
59953: LD_INT 99
59955: ST_TO_ADDR
// us_artillery := 97 ;
59956: LD_ADDR_EXP 32
59960: PUSH
59961: LD_INT 97
59963: ST_TO_ADDR
// ar_bio_bomb := 91 ;
59964: LD_ADDR_EXP 33
59968: PUSH
59969: LD_INT 91
59971: ST_TO_ADDR
// ar_mortar := 92 ;
59972: LD_ADDR_EXP 34
59976: PUSH
59977: LD_INT 92
59979: ST_TO_ADDR
// ru_radar := 98 ;
59980: LD_ADDR_EXP 29
59984: PUSH
59985: LD_INT 98
59987: ST_TO_ADDR
// tech_Artillery := 80 ;
59988: LD_ADDR_EXP 37
59992: PUSH
59993: LD_INT 80
59995: ST_TO_ADDR
// tech_RadMat := 81 ;
59996: LD_ADDR_EXP 38
60000: PUSH
60001: LD_INT 81
60003: ST_TO_ADDR
// tech_BasicTools := 82 ;
60004: LD_ADDR_EXP 39
60008: PUSH
60009: LD_INT 82
60011: ST_TO_ADDR
// tech_Cargo := 83 ;
60012: LD_ADDR_EXP 40
60016: PUSH
60017: LD_INT 83
60019: ST_TO_ADDR
// tech_Track := 84 ;
60020: LD_ADDR_EXP 41
60024: PUSH
60025: LD_INT 84
60027: ST_TO_ADDR
// tech_Crane := 85 ;
60028: LD_ADDR_EXP 42
60032: PUSH
60033: LD_INT 85
60035: ST_TO_ADDR
// tech_Bulldozer := 86 ;
60036: LD_ADDR_EXP 43
60040: PUSH
60041: LD_INT 86
60043: ST_TO_ADDR
// tech_Hovercraft := 87 ;
60044: LD_ADDR_EXP 44
60048: PUSH
60049: LD_INT 87
60051: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
60052: LD_ADDR_EXP 45
60056: PUSH
60057: LD_INT 88
60059: ST_TO_ADDR
// class_mastodont := 31 ;
60060: LD_ADDR_EXP 46
60064: PUSH
60065: LD_INT 31
60067: ST_TO_ADDR
// class_horse := 21 ;
60068: LD_ADDR_EXP 47
60072: PUSH
60073: LD_INT 21
60075: ST_TO_ADDR
// end ;
60076: LD_VAR 0 1
60080: RET
// every 1 do
60081: GO 60083
60083: DISABLE
// InitGlobalVariables ; end_of_file
60084: CALL 59921 0 0
60088: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use , mc_is_defending ; export function InitMacro ; var i ; begin
60089: LD_INT 0
60091: PPUSH
60092: PPUSH
// skirmish := false ;
60093: LD_ADDR_EXP 48
60097: PUSH
60098: LD_INT 0
60100: ST_TO_ADDR
// debug_mc := false ;
60101: LD_ADDR_EXP 49
60105: PUSH
60106: LD_INT 0
60108: ST_TO_ADDR
// mc_bases := [ ] ;
60109: LD_ADDR_EXP 50
60113: PUSH
60114: EMPTY
60115: ST_TO_ADDR
// mc_sides := [ ] ;
60116: LD_ADDR_EXP 76
60120: PUSH
60121: EMPTY
60122: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
60123: LD_ADDR_EXP 51
60127: PUSH
60128: EMPTY
60129: ST_TO_ADDR
// mc_building_repairs := [ ] ;
60130: LD_ADDR_EXP 52
60134: PUSH
60135: EMPTY
60136: ST_TO_ADDR
// mc_need_heal := [ ] ;
60137: LD_ADDR_EXP 53
60141: PUSH
60142: EMPTY
60143: ST_TO_ADDR
// mc_healers := [ ] ;
60144: LD_ADDR_EXP 54
60148: PUSH
60149: EMPTY
60150: ST_TO_ADDR
// mc_build_list := [ ] ;
60151: LD_ADDR_EXP 55
60155: PUSH
60156: EMPTY
60157: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
60158: LD_ADDR_EXP 82
60162: PUSH
60163: EMPTY
60164: ST_TO_ADDR
// mc_builders := [ ] ;
60165: LD_ADDR_EXP 56
60169: PUSH
60170: EMPTY
60171: ST_TO_ADDR
// mc_construct_list := [ ] ;
60172: LD_ADDR_EXP 57
60176: PUSH
60177: EMPTY
60178: ST_TO_ADDR
// mc_turret_list := [ ] ;
60179: LD_ADDR_EXP 58
60183: PUSH
60184: EMPTY
60185: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
60186: LD_ADDR_EXP 59
60190: PUSH
60191: EMPTY
60192: ST_TO_ADDR
// mc_miners := [ ] ;
60193: LD_ADDR_EXP 64
60197: PUSH
60198: EMPTY
60199: ST_TO_ADDR
// mc_mines := [ ] ;
60200: LD_ADDR_EXP 63
60204: PUSH
60205: EMPTY
60206: ST_TO_ADDR
// mc_minefields := [ ] ;
60207: LD_ADDR_EXP 65
60211: PUSH
60212: EMPTY
60213: ST_TO_ADDR
// mc_crates := [ ] ;
60214: LD_ADDR_EXP 66
60218: PUSH
60219: EMPTY
60220: ST_TO_ADDR
// mc_crates_collector := [ ] ;
60221: LD_ADDR_EXP 67
60225: PUSH
60226: EMPTY
60227: ST_TO_ADDR
// mc_crates_area := [ ] ;
60228: LD_ADDR_EXP 68
60232: PUSH
60233: EMPTY
60234: ST_TO_ADDR
// mc_vehicles := [ ] ;
60235: LD_ADDR_EXP 69
60239: PUSH
60240: EMPTY
60241: ST_TO_ADDR
// mc_attack := [ ] ;
60242: LD_ADDR_EXP 70
60246: PUSH
60247: EMPTY
60248: ST_TO_ADDR
// mc_produce := [ ] ;
60249: LD_ADDR_EXP 71
60253: PUSH
60254: EMPTY
60255: ST_TO_ADDR
// mc_defender := [ ] ;
60256: LD_ADDR_EXP 72
60260: PUSH
60261: EMPTY
60262: ST_TO_ADDR
// mc_parking := [ ] ;
60263: LD_ADDR_EXP 74
60267: PUSH
60268: EMPTY
60269: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
60270: LD_ADDR_EXP 60
60274: PUSH
60275: EMPTY
60276: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
60277: LD_ADDR_EXP 62
60281: PUSH
60282: EMPTY
60283: ST_TO_ADDR
// mc_scan := [ ] ;
60284: LD_ADDR_EXP 73
60288: PUSH
60289: EMPTY
60290: ST_TO_ADDR
// mc_scan_area := [ ] ;
60291: LD_ADDR_EXP 75
60295: PUSH
60296: EMPTY
60297: ST_TO_ADDR
// mc_tech := [ ] ;
60298: LD_ADDR_EXP 77
60302: PUSH
60303: EMPTY
60304: ST_TO_ADDR
// mc_class := [ ] ;
60305: LD_ADDR_EXP 91
60309: PUSH
60310: EMPTY
60311: ST_TO_ADDR
// mc_class_case_use := [ ] ;
60312: LD_ADDR_EXP 92
60316: PUSH
60317: EMPTY
60318: ST_TO_ADDR
// mc_is_defending := [ ] ;
60319: LD_ADDR_EXP 93
60323: PUSH
60324: EMPTY
60325: ST_TO_ADDR
// end ;
60326: LD_VAR 0 1
60330: RET
// export function MC_Kill ( base ) ; begin
60331: LD_INT 0
60333: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
60334: LD_ADDR_EXP 50
60338: PUSH
60339: LD_EXP 50
60343: PPUSH
60344: LD_VAR 0 1
60348: PPUSH
60349: EMPTY
60350: PPUSH
60351: CALL_OW 1
60355: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
60356: LD_ADDR_EXP 51
60360: PUSH
60361: LD_EXP 51
60365: PPUSH
60366: LD_VAR 0 1
60370: PPUSH
60371: EMPTY
60372: PPUSH
60373: CALL_OW 1
60377: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
60378: LD_ADDR_EXP 52
60382: PUSH
60383: LD_EXP 52
60387: PPUSH
60388: LD_VAR 0 1
60392: PPUSH
60393: EMPTY
60394: PPUSH
60395: CALL_OW 1
60399: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
60400: LD_ADDR_EXP 53
60404: PUSH
60405: LD_EXP 53
60409: PPUSH
60410: LD_VAR 0 1
60414: PPUSH
60415: EMPTY
60416: PPUSH
60417: CALL_OW 1
60421: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
60422: LD_ADDR_EXP 54
60426: PUSH
60427: LD_EXP 54
60431: PPUSH
60432: LD_VAR 0 1
60436: PPUSH
60437: EMPTY
60438: PPUSH
60439: CALL_OW 1
60443: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
60444: LD_ADDR_EXP 55
60448: PUSH
60449: LD_EXP 55
60453: PPUSH
60454: LD_VAR 0 1
60458: PPUSH
60459: EMPTY
60460: PPUSH
60461: CALL_OW 1
60465: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
60466: LD_ADDR_EXP 56
60470: PUSH
60471: LD_EXP 56
60475: PPUSH
60476: LD_VAR 0 1
60480: PPUSH
60481: EMPTY
60482: PPUSH
60483: CALL_OW 1
60487: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
60488: LD_ADDR_EXP 57
60492: PUSH
60493: LD_EXP 57
60497: PPUSH
60498: LD_VAR 0 1
60502: PPUSH
60503: EMPTY
60504: PPUSH
60505: CALL_OW 1
60509: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
60510: LD_ADDR_EXP 58
60514: PUSH
60515: LD_EXP 58
60519: PPUSH
60520: LD_VAR 0 1
60524: PPUSH
60525: EMPTY
60526: PPUSH
60527: CALL_OW 1
60531: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
60532: LD_ADDR_EXP 59
60536: PUSH
60537: LD_EXP 59
60541: PPUSH
60542: LD_VAR 0 1
60546: PPUSH
60547: EMPTY
60548: PPUSH
60549: CALL_OW 1
60553: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
60554: LD_ADDR_EXP 60
60558: PUSH
60559: LD_EXP 60
60563: PPUSH
60564: LD_VAR 0 1
60568: PPUSH
60569: EMPTY
60570: PPUSH
60571: CALL_OW 1
60575: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
60576: LD_ADDR_EXP 61
60580: PUSH
60581: LD_EXP 61
60585: PPUSH
60586: LD_VAR 0 1
60590: PPUSH
60591: LD_INT 0
60593: PPUSH
60594: CALL_OW 1
60598: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
60599: LD_ADDR_EXP 62
60603: PUSH
60604: LD_EXP 62
60608: PPUSH
60609: LD_VAR 0 1
60613: PPUSH
60614: EMPTY
60615: PPUSH
60616: CALL_OW 1
60620: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
60621: LD_ADDR_EXP 63
60625: PUSH
60626: LD_EXP 63
60630: PPUSH
60631: LD_VAR 0 1
60635: PPUSH
60636: EMPTY
60637: PPUSH
60638: CALL_OW 1
60642: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
60643: LD_ADDR_EXP 64
60647: PUSH
60648: LD_EXP 64
60652: PPUSH
60653: LD_VAR 0 1
60657: PPUSH
60658: EMPTY
60659: PPUSH
60660: CALL_OW 1
60664: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
60665: LD_ADDR_EXP 65
60669: PUSH
60670: LD_EXP 65
60674: PPUSH
60675: LD_VAR 0 1
60679: PPUSH
60680: EMPTY
60681: PPUSH
60682: CALL_OW 1
60686: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
60687: LD_ADDR_EXP 66
60691: PUSH
60692: LD_EXP 66
60696: PPUSH
60697: LD_VAR 0 1
60701: PPUSH
60702: EMPTY
60703: PPUSH
60704: CALL_OW 1
60708: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
60709: LD_ADDR_EXP 67
60713: PUSH
60714: LD_EXP 67
60718: PPUSH
60719: LD_VAR 0 1
60723: PPUSH
60724: EMPTY
60725: PPUSH
60726: CALL_OW 1
60730: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
60731: LD_ADDR_EXP 68
60735: PUSH
60736: LD_EXP 68
60740: PPUSH
60741: LD_VAR 0 1
60745: PPUSH
60746: EMPTY
60747: PPUSH
60748: CALL_OW 1
60752: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
60753: LD_ADDR_EXP 69
60757: PUSH
60758: LD_EXP 69
60762: PPUSH
60763: LD_VAR 0 1
60767: PPUSH
60768: EMPTY
60769: PPUSH
60770: CALL_OW 1
60774: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
60775: LD_ADDR_EXP 70
60779: PUSH
60780: LD_EXP 70
60784: PPUSH
60785: LD_VAR 0 1
60789: PPUSH
60790: EMPTY
60791: PPUSH
60792: CALL_OW 1
60796: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
60797: LD_ADDR_EXP 71
60801: PUSH
60802: LD_EXP 71
60806: PPUSH
60807: LD_VAR 0 1
60811: PPUSH
60812: EMPTY
60813: PPUSH
60814: CALL_OW 1
60818: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
60819: LD_ADDR_EXP 72
60823: PUSH
60824: LD_EXP 72
60828: PPUSH
60829: LD_VAR 0 1
60833: PPUSH
60834: EMPTY
60835: PPUSH
60836: CALL_OW 1
60840: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
60841: LD_ADDR_EXP 73
60845: PUSH
60846: LD_EXP 73
60850: PPUSH
60851: LD_VAR 0 1
60855: PPUSH
60856: EMPTY
60857: PPUSH
60858: CALL_OW 1
60862: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
60863: LD_ADDR_EXP 74
60867: PUSH
60868: LD_EXP 74
60872: PPUSH
60873: LD_VAR 0 1
60877: PPUSH
60878: EMPTY
60879: PPUSH
60880: CALL_OW 1
60884: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
60885: LD_ADDR_EXP 75
60889: PUSH
60890: LD_EXP 75
60894: PPUSH
60895: LD_VAR 0 1
60899: PPUSH
60900: EMPTY
60901: PPUSH
60902: CALL_OW 1
60906: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
60907: LD_ADDR_EXP 77
60911: PUSH
60912: LD_EXP 77
60916: PPUSH
60917: LD_VAR 0 1
60921: PPUSH
60922: EMPTY
60923: PPUSH
60924: CALL_OW 1
60928: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
60929: LD_ADDR_EXP 79
60933: PUSH
60934: LD_EXP 79
60938: PPUSH
60939: LD_VAR 0 1
60943: PPUSH
60944: EMPTY
60945: PPUSH
60946: CALL_OW 1
60950: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
60951: LD_ADDR_EXP 80
60955: PUSH
60956: LD_EXP 80
60960: PPUSH
60961: LD_VAR 0 1
60965: PPUSH
60966: EMPTY
60967: PPUSH
60968: CALL_OW 1
60972: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
60973: LD_ADDR_EXP 81
60977: PUSH
60978: LD_EXP 81
60982: PPUSH
60983: LD_VAR 0 1
60987: PPUSH
60988: EMPTY
60989: PPUSH
60990: CALL_OW 1
60994: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
60995: LD_ADDR_EXP 82
60999: PUSH
61000: LD_EXP 82
61004: PPUSH
61005: LD_VAR 0 1
61009: PPUSH
61010: EMPTY
61011: PPUSH
61012: CALL_OW 1
61016: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
61017: LD_ADDR_EXP 83
61021: PUSH
61022: LD_EXP 83
61026: PPUSH
61027: LD_VAR 0 1
61031: PPUSH
61032: EMPTY
61033: PPUSH
61034: CALL_OW 1
61038: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
61039: LD_ADDR_EXP 84
61043: PUSH
61044: LD_EXP 84
61048: PPUSH
61049: LD_VAR 0 1
61053: PPUSH
61054: EMPTY
61055: PPUSH
61056: CALL_OW 1
61060: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
61061: LD_ADDR_EXP 85
61065: PUSH
61066: LD_EXP 85
61070: PPUSH
61071: LD_VAR 0 1
61075: PPUSH
61076: EMPTY
61077: PPUSH
61078: CALL_OW 1
61082: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
61083: LD_ADDR_EXP 86
61087: PUSH
61088: LD_EXP 86
61092: PPUSH
61093: LD_VAR 0 1
61097: PPUSH
61098: EMPTY
61099: PPUSH
61100: CALL_OW 1
61104: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
61105: LD_ADDR_EXP 87
61109: PUSH
61110: LD_EXP 87
61114: PPUSH
61115: LD_VAR 0 1
61119: PPUSH
61120: EMPTY
61121: PPUSH
61122: CALL_OW 1
61126: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
61127: LD_ADDR_EXP 88
61131: PUSH
61132: LD_EXP 88
61136: PPUSH
61137: LD_VAR 0 1
61141: PPUSH
61142: EMPTY
61143: PPUSH
61144: CALL_OW 1
61148: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
61149: LD_ADDR_EXP 89
61153: PUSH
61154: LD_EXP 89
61158: PPUSH
61159: LD_VAR 0 1
61163: PPUSH
61164: EMPTY
61165: PPUSH
61166: CALL_OW 1
61170: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
61171: LD_ADDR_EXP 90
61175: PUSH
61176: LD_EXP 90
61180: PPUSH
61181: LD_VAR 0 1
61185: PPUSH
61186: EMPTY
61187: PPUSH
61188: CALL_OW 1
61192: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
61193: LD_ADDR_EXP 91
61197: PUSH
61198: LD_EXP 91
61202: PPUSH
61203: LD_VAR 0 1
61207: PPUSH
61208: EMPTY
61209: PPUSH
61210: CALL_OW 1
61214: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
61215: LD_ADDR_EXP 92
61219: PUSH
61220: LD_EXP 92
61224: PPUSH
61225: LD_VAR 0 1
61229: PPUSH
61230: LD_INT 0
61232: PPUSH
61233: CALL_OW 1
61237: ST_TO_ADDR
// mc_is_defending := Replace ( mc_is_defending , base , false ) ;
61238: LD_ADDR_EXP 93
61242: PUSH
61243: LD_EXP 93
61247: PPUSH
61248: LD_VAR 0 1
61252: PPUSH
61253: LD_INT 0
61255: PPUSH
61256: CALL_OW 1
61260: ST_TO_ADDR
// end ;
61261: LD_VAR 0 2
61265: RET
// export function MC_Add ( side , units ) ; var base ; begin
61266: LD_INT 0
61268: PPUSH
61269: PPUSH
// base := mc_bases + 1 ;
61270: LD_ADDR_VAR 0 4
61274: PUSH
61275: LD_EXP 50
61279: PUSH
61280: LD_INT 1
61282: PLUS
61283: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
61284: LD_ADDR_EXP 76
61288: PUSH
61289: LD_EXP 76
61293: PPUSH
61294: LD_VAR 0 4
61298: PPUSH
61299: LD_VAR 0 1
61303: PPUSH
61304: CALL_OW 1
61308: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
61309: LD_ADDR_EXP 50
61313: PUSH
61314: LD_EXP 50
61318: PPUSH
61319: LD_VAR 0 4
61323: PPUSH
61324: LD_VAR 0 2
61328: PPUSH
61329: CALL_OW 1
61333: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
61334: LD_ADDR_EXP 51
61338: PUSH
61339: LD_EXP 51
61343: PPUSH
61344: LD_VAR 0 4
61348: PPUSH
61349: EMPTY
61350: PPUSH
61351: CALL_OW 1
61355: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
61356: LD_ADDR_EXP 52
61360: PUSH
61361: LD_EXP 52
61365: PPUSH
61366: LD_VAR 0 4
61370: PPUSH
61371: EMPTY
61372: PPUSH
61373: CALL_OW 1
61377: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
61378: LD_ADDR_EXP 53
61382: PUSH
61383: LD_EXP 53
61387: PPUSH
61388: LD_VAR 0 4
61392: PPUSH
61393: EMPTY
61394: PPUSH
61395: CALL_OW 1
61399: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
61400: LD_ADDR_EXP 54
61404: PUSH
61405: LD_EXP 54
61409: PPUSH
61410: LD_VAR 0 4
61414: PPUSH
61415: EMPTY
61416: PPUSH
61417: CALL_OW 1
61421: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
61422: LD_ADDR_EXP 55
61426: PUSH
61427: LD_EXP 55
61431: PPUSH
61432: LD_VAR 0 4
61436: PPUSH
61437: EMPTY
61438: PPUSH
61439: CALL_OW 1
61443: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
61444: LD_ADDR_EXP 56
61448: PUSH
61449: LD_EXP 56
61453: PPUSH
61454: LD_VAR 0 4
61458: PPUSH
61459: EMPTY
61460: PPUSH
61461: CALL_OW 1
61465: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
61466: LD_ADDR_EXP 57
61470: PUSH
61471: LD_EXP 57
61475: PPUSH
61476: LD_VAR 0 4
61480: PPUSH
61481: EMPTY
61482: PPUSH
61483: CALL_OW 1
61487: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
61488: LD_ADDR_EXP 58
61492: PUSH
61493: LD_EXP 58
61497: PPUSH
61498: LD_VAR 0 4
61502: PPUSH
61503: EMPTY
61504: PPUSH
61505: CALL_OW 1
61509: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
61510: LD_ADDR_EXP 59
61514: PUSH
61515: LD_EXP 59
61519: PPUSH
61520: LD_VAR 0 4
61524: PPUSH
61525: EMPTY
61526: PPUSH
61527: CALL_OW 1
61531: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
61532: LD_ADDR_EXP 60
61536: PUSH
61537: LD_EXP 60
61541: PPUSH
61542: LD_VAR 0 4
61546: PPUSH
61547: EMPTY
61548: PPUSH
61549: CALL_OW 1
61553: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
61554: LD_ADDR_EXP 61
61558: PUSH
61559: LD_EXP 61
61563: PPUSH
61564: LD_VAR 0 4
61568: PPUSH
61569: LD_INT 0
61571: PPUSH
61572: CALL_OW 1
61576: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
61577: LD_ADDR_EXP 62
61581: PUSH
61582: LD_EXP 62
61586: PPUSH
61587: LD_VAR 0 4
61591: PPUSH
61592: EMPTY
61593: PPUSH
61594: CALL_OW 1
61598: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
61599: LD_ADDR_EXP 63
61603: PUSH
61604: LD_EXP 63
61608: PPUSH
61609: LD_VAR 0 4
61613: PPUSH
61614: EMPTY
61615: PPUSH
61616: CALL_OW 1
61620: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
61621: LD_ADDR_EXP 64
61625: PUSH
61626: LD_EXP 64
61630: PPUSH
61631: LD_VAR 0 4
61635: PPUSH
61636: EMPTY
61637: PPUSH
61638: CALL_OW 1
61642: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
61643: LD_ADDR_EXP 65
61647: PUSH
61648: LD_EXP 65
61652: PPUSH
61653: LD_VAR 0 4
61657: PPUSH
61658: EMPTY
61659: PPUSH
61660: CALL_OW 1
61664: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
61665: LD_ADDR_EXP 66
61669: PUSH
61670: LD_EXP 66
61674: PPUSH
61675: LD_VAR 0 4
61679: PPUSH
61680: EMPTY
61681: PPUSH
61682: CALL_OW 1
61686: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
61687: LD_ADDR_EXP 67
61691: PUSH
61692: LD_EXP 67
61696: PPUSH
61697: LD_VAR 0 4
61701: PPUSH
61702: EMPTY
61703: PPUSH
61704: CALL_OW 1
61708: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
61709: LD_ADDR_EXP 68
61713: PUSH
61714: LD_EXP 68
61718: PPUSH
61719: LD_VAR 0 4
61723: PPUSH
61724: EMPTY
61725: PPUSH
61726: CALL_OW 1
61730: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
61731: LD_ADDR_EXP 69
61735: PUSH
61736: LD_EXP 69
61740: PPUSH
61741: LD_VAR 0 4
61745: PPUSH
61746: EMPTY
61747: PPUSH
61748: CALL_OW 1
61752: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
61753: LD_ADDR_EXP 70
61757: PUSH
61758: LD_EXP 70
61762: PPUSH
61763: LD_VAR 0 4
61767: PPUSH
61768: EMPTY
61769: PPUSH
61770: CALL_OW 1
61774: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
61775: LD_ADDR_EXP 71
61779: PUSH
61780: LD_EXP 71
61784: PPUSH
61785: LD_VAR 0 4
61789: PPUSH
61790: EMPTY
61791: PPUSH
61792: CALL_OW 1
61796: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
61797: LD_ADDR_EXP 72
61801: PUSH
61802: LD_EXP 72
61806: PPUSH
61807: LD_VAR 0 4
61811: PPUSH
61812: EMPTY
61813: PPUSH
61814: CALL_OW 1
61818: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
61819: LD_ADDR_EXP 73
61823: PUSH
61824: LD_EXP 73
61828: PPUSH
61829: LD_VAR 0 4
61833: PPUSH
61834: EMPTY
61835: PPUSH
61836: CALL_OW 1
61840: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
61841: LD_ADDR_EXP 74
61845: PUSH
61846: LD_EXP 74
61850: PPUSH
61851: LD_VAR 0 4
61855: PPUSH
61856: EMPTY
61857: PPUSH
61858: CALL_OW 1
61862: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
61863: LD_ADDR_EXP 75
61867: PUSH
61868: LD_EXP 75
61872: PPUSH
61873: LD_VAR 0 4
61877: PPUSH
61878: EMPTY
61879: PPUSH
61880: CALL_OW 1
61884: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
61885: LD_ADDR_EXP 77
61889: PUSH
61890: LD_EXP 77
61894: PPUSH
61895: LD_VAR 0 4
61899: PPUSH
61900: EMPTY
61901: PPUSH
61902: CALL_OW 1
61906: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
61907: LD_ADDR_EXP 79
61911: PUSH
61912: LD_EXP 79
61916: PPUSH
61917: LD_VAR 0 4
61921: PPUSH
61922: EMPTY
61923: PPUSH
61924: CALL_OW 1
61928: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
61929: LD_ADDR_EXP 80
61933: PUSH
61934: LD_EXP 80
61938: PPUSH
61939: LD_VAR 0 4
61943: PPUSH
61944: EMPTY
61945: PPUSH
61946: CALL_OW 1
61950: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
61951: LD_ADDR_EXP 81
61955: PUSH
61956: LD_EXP 81
61960: PPUSH
61961: LD_VAR 0 4
61965: PPUSH
61966: EMPTY
61967: PPUSH
61968: CALL_OW 1
61972: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
61973: LD_ADDR_EXP 82
61977: PUSH
61978: LD_EXP 82
61982: PPUSH
61983: LD_VAR 0 4
61987: PPUSH
61988: EMPTY
61989: PPUSH
61990: CALL_OW 1
61994: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
61995: LD_ADDR_EXP 83
61999: PUSH
62000: LD_EXP 83
62004: PPUSH
62005: LD_VAR 0 4
62009: PPUSH
62010: EMPTY
62011: PPUSH
62012: CALL_OW 1
62016: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
62017: LD_ADDR_EXP 84
62021: PUSH
62022: LD_EXP 84
62026: PPUSH
62027: LD_VAR 0 4
62031: PPUSH
62032: EMPTY
62033: PPUSH
62034: CALL_OW 1
62038: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
62039: LD_ADDR_EXP 85
62043: PUSH
62044: LD_EXP 85
62048: PPUSH
62049: LD_VAR 0 4
62053: PPUSH
62054: EMPTY
62055: PPUSH
62056: CALL_OW 1
62060: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
62061: LD_ADDR_EXP 86
62065: PUSH
62066: LD_EXP 86
62070: PPUSH
62071: LD_VAR 0 4
62075: PPUSH
62076: EMPTY
62077: PPUSH
62078: CALL_OW 1
62082: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
62083: LD_ADDR_EXP 87
62087: PUSH
62088: LD_EXP 87
62092: PPUSH
62093: LD_VAR 0 4
62097: PPUSH
62098: EMPTY
62099: PPUSH
62100: CALL_OW 1
62104: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
62105: LD_ADDR_EXP 88
62109: PUSH
62110: LD_EXP 88
62114: PPUSH
62115: LD_VAR 0 4
62119: PPUSH
62120: EMPTY
62121: PPUSH
62122: CALL_OW 1
62126: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
62127: LD_ADDR_EXP 89
62131: PUSH
62132: LD_EXP 89
62136: PPUSH
62137: LD_VAR 0 4
62141: PPUSH
62142: EMPTY
62143: PPUSH
62144: CALL_OW 1
62148: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
62149: LD_ADDR_EXP 90
62153: PUSH
62154: LD_EXP 90
62158: PPUSH
62159: LD_VAR 0 4
62163: PPUSH
62164: EMPTY
62165: PPUSH
62166: CALL_OW 1
62170: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
62171: LD_ADDR_EXP 91
62175: PUSH
62176: LD_EXP 91
62180: PPUSH
62181: LD_VAR 0 4
62185: PPUSH
62186: EMPTY
62187: PPUSH
62188: CALL_OW 1
62192: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
62193: LD_ADDR_EXP 92
62197: PUSH
62198: LD_EXP 92
62202: PPUSH
62203: LD_VAR 0 4
62207: PPUSH
62208: LD_INT 0
62210: PPUSH
62211: CALL_OW 1
62215: ST_TO_ADDR
// mc_is_defending := Replace ( mc_is_defending , base , false ) ;
62216: LD_ADDR_EXP 93
62220: PUSH
62221: LD_EXP 93
62225: PPUSH
62226: LD_VAR 0 4
62230: PPUSH
62231: LD_INT 0
62233: PPUSH
62234: CALL_OW 1
62238: ST_TO_ADDR
// result := base ;
62239: LD_ADDR_VAR 0 3
62243: PUSH
62244: LD_VAR 0 4
62248: ST_TO_ADDR
// end ;
62249: LD_VAR 0 3
62253: RET
// export function MC_Start ( ) ; var i ; begin
62254: LD_INT 0
62256: PPUSH
62257: PPUSH
// for i = 1 to mc_bases do
62258: LD_ADDR_VAR 0 2
62262: PUSH
62263: DOUBLE
62264: LD_INT 1
62266: DEC
62267: ST_TO_ADDR
62268: LD_EXP 50
62272: PUSH
62273: FOR_TO
62274: IFFALSE 63374
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
62276: LD_ADDR_EXP 50
62280: PUSH
62281: LD_EXP 50
62285: PPUSH
62286: LD_VAR 0 2
62290: PPUSH
62291: LD_EXP 50
62295: PUSH
62296: LD_VAR 0 2
62300: ARRAY
62301: PUSH
62302: LD_INT 0
62304: DIFF
62305: PPUSH
62306: CALL_OW 1
62310: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
62311: LD_ADDR_EXP 51
62315: PUSH
62316: LD_EXP 51
62320: PPUSH
62321: LD_VAR 0 2
62325: PPUSH
62326: EMPTY
62327: PPUSH
62328: CALL_OW 1
62332: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
62333: LD_ADDR_EXP 52
62337: PUSH
62338: LD_EXP 52
62342: PPUSH
62343: LD_VAR 0 2
62347: PPUSH
62348: EMPTY
62349: PPUSH
62350: CALL_OW 1
62354: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
62355: LD_ADDR_EXP 53
62359: PUSH
62360: LD_EXP 53
62364: PPUSH
62365: LD_VAR 0 2
62369: PPUSH
62370: EMPTY
62371: PPUSH
62372: CALL_OW 1
62376: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
62377: LD_ADDR_EXP 54
62381: PUSH
62382: LD_EXP 54
62386: PPUSH
62387: LD_VAR 0 2
62391: PPUSH
62392: EMPTY
62393: PUSH
62394: EMPTY
62395: PUSH
62396: EMPTY
62397: LIST
62398: LIST
62399: PPUSH
62400: CALL_OW 1
62404: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
62405: LD_ADDR_EXP 55
62409: PUSH
62410: LD_EXP 55
62414: PPUSH
62415: LD_VAR 0 2
62419: PPUSH
62420: EMPTY
62421: PPUSH
62422: CALL_OW 1
62426: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
62427: LD_ADDR_EXP 82
62431: PUSH
62432: LD_EXP 82
62436: PPUSH
62437: LD_VAR 0 2
62441: PPUSH
62442: EMPTY
62443: PPUSH
62444: CALL_OW 1
62448: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
62449: LD_ADDR_EXP 56
62453: PUSH
62454: LD_EXP 56
62458: PPUSH
62459: LD_VAR 0 2
62463: PPUSH
62464: EMPTY
62465: PPUSH
62466: CALL_OW 1
62470: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
62471: LD_ADDR_EXP 57
62475: PUSH
62476: LD_EXP 57
62480: PPUSH
62481: LD_VAR 0 2
62485: PPUSH
62486: EMPTY
62487: PPUSH
62488: CALL_OW 1
62492: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
62493: LD_ADDR_EXP 58
62497: PUSH
62498: LD_EXP 58
62502: PPUSH
62503: LD_VAR 0 2
62507: PPUSH
62508: LD_EXP 50
62512: PUSH
62513: LD_VAR 0 2
62517: ARRAY
62518: PPUSH
62519: LD_INT 2
62521: PUSH
62522: LD_INT 30
62524: PUSH
62525: LD_INT 32
62527: PUSH
62528: EMPTY
62529: LIST
62530: LIST
62531: PUSH
62532: LD_INT 30
62534: PUSH
62535: LD_INT 33
62537: PUSH
62538: EMPTY
62539: LIST
62540: LIST
62541: PUSH
62542: EMPTY
62543: LIST
62544: LIST
62545: LIST
62546: PPUSH
62547: CALL_OW 72
62551: PPUSH
62552: CALL_OW 1
62556: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
62557: LD_ADDR_EXP 59
62561: PUSH
62562: LD_EXP 59
62566: PPUSH
62567: LD_VAR 0 2
62571: PPUSH
62572: LD_EXP 50
62576: PUSH
62577: LD_VAR 0 2
62581: ARRAY
62582: PPUSH
62583: LD_INT 2
62585: PUSH
62586: LD_INT 30
62588: PUSH
62589: LD_INT 32
62591: PUSH
62592: EMPTY
62593: LIST
62594: LIST
62595: PUSH
62596: LD_INT 30
62598: PUSH
62599: LD_INT 31
62601: PUSH
62602: EMPTY
62603: LIST
62604: LIST
62605: PUSH
62606: EMPTY
62607: LIST
62608: LIST
62609: LIST
62610: PUSH
62611: LD_INT 58
62613: PUSH
62614: EMPTY
62615: LIST
62616: PUSH
62617: EMPTY
62618: LIST
62619: LIST
62620: PPUSH
62621: CALL_OW 72
62625: PPUSH
62626: CALL_OW 1
62630: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
62631: LD_ADDR_EXP 60
62635: PUSH
62636: LD_EXP 60
62640: PPUSH
62641: LD_VAR 0 2
62645: PPUSH
62646: EMPTY
62647: PPUSH
62648: CALL_OW 1
62652: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
62653: LD_ADDR_EXP 64
62657: PUSH
62658: LD_EXP 64
62662: PPUSH
62663: LD_VAR 0 2
62667: PPUSH
62668: EMPTY
62669: PPUSH
62670: CALL_OW 1
62674: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
62675: LD_ADDR_EXP 63
62679: PUSH
62680: LD_EXP 63
62684: PPUSH
62685: LD_VAR 0 2
62689: PPUSH
62690: EMPTY
62691: PPUSH
62692: CALL_OW 1
62696: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
62697: LD_ADDR_EXP 65
62701: PUSH
62702: LD_EXP 65
62706: PPUSH
62707: LD_VAR 0 2
62711: PPUSH
62712: EMPTY
62713: PPUSH
62714: CALL_OW 1
62718: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
62719: LD_ADDR_EXP 66
62723: PUSH
62724: LD_EXP 66
62728: PPUSH
62729: LD_VAR 0 2
62733: PPUSH
62734: EMPTY
62735: PPUSH
62736: CALL_OW 1
62740: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
62741: LD_ADDR_EXP 67
62745: PUSH
62746: LD_EXP 67
62750: PPUSH
62751: LD_VAR 0 2
62755: PPUSH
62756: EMPTY
62757: PPUSH
62758: CALL_OW 1
62762: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
62763: LD_ADDR_EXP 68
62767: PUSH
62768: LD_EXP 68
62772: PPUSH
62773: LD_VAR 0 2
62777: PPUSH
62778: EMPTY
62779: PPUSH
62780: CALL_OW 1
62784: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
62785: LD_ADDR_EXP 69
62789: PUSH
62790: LD_EXP 69
62794: PPUSH
62795: LD_VAR 0 2
62799: PPUSH
62800: EMPTY
62801: PPUSH
62802: CALL_OW 1
62806: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
62807: LD_ADDR_EXP 70
62811: PUSH
62812: LD_EXP 70
62816: PPUSH
62817: LD_VAR 0 2
62821: PPUSH
62822: EMPTY
62823: PPUSH
62824: CALL_OW 1
62828: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
62829: LD_ADDR_EXP 71
62833: PUSH
62834: LD_EXP 71
62838: PPUSH
62839: LD_VAR 0 2
62843: PPUSH
62844: EMPTY
62845: PPUSH
62846: CALL_OW 1
62850: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
62851: LD_ADDR_EXP 72
62855: PUSH
62856: LD_EXP 72
62860: PPUSH
62861: LD_VAR 0 2
62865: PPUSH
62866: EMPTY
62867: PPUSH
62868: CALL_OW 1
62872: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
62873: LD_ADDR_EXP 61
62877: PUSH
62878: LD_EXP 61
62882: PPUSH
62883: LD_VAR 0 2
62887: PPUSH
62888: LD_INT 0
62890: PPUSH
62891: CALL_OW 1
62895: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
62896: LD_ADDR_EXP 74
62900: PUSH
62901: LD_EXP 74
62905: PPUSH
62906: LD_VAR 0 2
62910: PPUSH
62911: LD_INT 0
62913: PPUSH
62914: CALL_OW 1
62918: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
62919: LD_ADDR_EXP 62
62923: PUSH
62924: LD_EXP 62
62928: PPUSH
62929: LD_VAR 0 2
62933: PPUSH
62934: EMPTY
62935: PPUSH
62936: CALL_OW 1
62940: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
62941: LD_ADDR_EXP 73
62945: PUSH
62946: LD_EXP 73
62950: PPUSH
62951: LD_VAR 0 2
62955: PPUSH
62956: LD_INT 0
62958: PPUSH
62959: CALL_OW 1
62963: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
62964: LD_ADDR_EXP 75
62968: PUSH
62969: LD_EXP 75
62973: PPUSH
62974: LD_VAR 0 2
62978: PPUSH
62979: EMPTY
62980: PPUSH
62981: CALL_OW 1
62985: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
62986: LD_ADDR_EXP 78
62990: PUSH
62991: LD_EXP 78
62995: PPUSH
62996: LD_VAR 0 2
63000: PPUSH
63001: LD_INT 0
63003: PPUSH
63004: CALL_OW 1
63008: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
63009: LD_ADDR_EXP 79
63013: PUSH
63014: LD_EXP 79
63018: PPUSH
63019: LD_VAR 0 2
63023: PPUSH
63024: EMPTY
63025: PPUSH
63026: CALL_OW 1
63030: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
63031: LD_ADDR_EXP 80
63035: PUSH
63036: LD_EXP 80
63040: PPUSH
63041: LD_VAR 0 2
63045: PPUSH
63046: EMPTY
63047: PPUSH
63048: CALL_OW 1
63052: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
63053: LD_ADDR_EXP 81
63057: PUSH
63058: LD_EXP 81
63062: PPUSH
63063: LD_VAR 0 2
63067: PPUSH
63068: EMPTY
63069: PPUSH
63070: CALL_OW 1
63074: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
63075: LD_ADDR_EXP 83
63079: PUSH
63080: LD_EXP 83
63084: PPUSH
63085: LD_VAR 0 2
63089: PPUSH
63090: LD_EXP 50
63094: PUSH
63095: LD_VAR 0 2
63099: ARRAY
63100: PPUSH
63101: LD_INT 2
63103: PUSH
63104: LD_INT 30
63106: PUSH
63107: LD_INT 6
63109: PUSH
63110: EMPTY
63111: LIST
63112: LIST
63113: PUSH
63114: LD_INT 30
63116: PUSH
63117: LD_INT 7
63119: PUSH
63120: EMPTY
63121: LIST
63122: LIST
63123: PUSH
63124: LD_INT 30
63126: PUSH
63127: LD_INT 8
63129: PUSH
63130: EMPTY
63131: LIST
63132: LIST
63133: PUSH
63134: EMPTY
63135: LIST
63136: LIST
63137: LIST
63138: LIST
63139: PPUSH
63140: CALL_OW 72
63144: PPUSH
63145: CALL_OW 1
63149: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
63150: LD_ADDR_EXP 84
63154: PUSH
63155: LD_EXP 84
63159: PPUSH
63160: LD_VAR 0 2
63164: PPUSH
63165: EMPTY
63166: PPUSH
63167: CALL_OW 1
63171: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
63172: LD_ADDR_EXP 85
63176: PUSH
63177: LD_EXP 85
63181: PPUSH
63182: LD_VAR 0 2
63186: PPUSH
63187: EMPTY
63188: PPUSH
63189: CALL_OW 1
63193: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
63194: LD_ADDR_EXP 86
63198: PUSH
63199: LD_EXP 86
63203: PPUSH
63204: LD_VAR 0 2
63208: PPUSH
63209: EMPTY
63210: PPUSH
63211: CALL_OW 1
63215: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
63216: LD_ADDR_EXP 87
63220: PUSH
63221: LD_EXP 87
63225: PPUSH
63226: LD_VAR 0 2
63230: PPUSH
63231: EMPTY
63232: PPUSH
63233: CALL_OW 1
63237: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
63238: LD_ADDR_EXP 88
63242: PUSH
63243: LD_EXP 88
63247: PPUSH
63248: LD_VAR 0 2
63252: PPUSH
63253: EMPTY
63254: PPUSH
63255: CALL_OW 1
63259: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
63260: LD_ADDR_EXP 89
63264: PUSH
63265: LD_EXP 89
63269: PPUSH
63270: LD_VAR 0 2
63274: PPUSH
63275: EMPTY
63276: PPUSH
63277: CALL_OW 1
63281: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
63282: LD_ADDR_EXP 90
63286: PUSH
63287: LD_EXP 90
63291: PPUSH
63292: LD_VAR 0 2
63296: PPUSH
63297: EMPTY
63298: PPUSH
63299: CALL_OW 1
63303: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
63304: LD_ADDR_EXP 91
63308: PUSH
63309: LD_EXP 91
63313: PPUSH
63314: LD_VAR 0 2
63318: PPUSH
63319: EMPTY
63320: PPUSH
63321: CALL_OW 1
63325: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
63326: LD_ADDR_EXP 92
63330: PUSH
63331: LD_EXP 92
63335: PPUSH
63336: LD_VAR 0 2
63340: PPUSH
63341: LD_INT 0
63343: PPUSH
63344: CALL_OW 1
63348: ST_TO_ADDR
// mc_is_defending := Replace ( mc_is_defending , i , false ) ;
63349: LD_ADDR_EXP 93
63353: PUSH
63354: LD_EXP 93
63358: PPUSH
63359: LD_VAR 0 2
63363: PPUSH
63364: LD_INT 0
63366: PPUSH
63367: CALL_OW 1
63371: ST_TO_ADDR
// end ;
63372: GO 62273
63374: POP
63375: POP
// MC_InitSides ( ) ;
63376: CALL 63662 0 0
// MC_InitResearch ( ) ;
63380: CALL 63401 0 0
// CustomInitMacro ( ) ;
63384: CALL 1411 0 0
// skirmish := true ;
63388: LD_ADDR_EXP 48
63392: PUSH
63393: LD_INT 1
63395: ST_TO_ADDR
// end ;
63396: LD_VAR 0 1
63400: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
63401: LD_INT 0
63403: PPUSH
63404: PPUSH
63405: PPUSH
63406: PPUSH
63407: PPUSH
63408: PPUSH
// if not mc_bases then
63409: LD_EXP 50
63413: NOT
63414: IFFALSE 63418
// exit ;
63416: GO 63657
// for i = 1 to 8 do
63418: LD_ADDR_VAR 0 2
63422: PUSH
63423: DOUBLE
63424: LD_INT 1
63426: DEC
63427: ST_TO_ADDR
63428: LD_INT 8
63430: PUSH
63431: FOR_TO
63432: IFFALSE 63458
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
63434: LD_ADDR_EXP 77
63438: PUSH
63439: LD_EXP 77
63443: PPUSH
63444: LD_VAR 0 2
63448: PPUSH
63449: EMPTY
63450: PPUSH
63451: CALL_OW 1
63455: ST_TO_ADDR
63456: GO 63431
63458: POP
63459: POP
// tmp := [ ] ;
63460: LD_ADDR_VAR 0 5
63464: PUSH
63465: EMPTY
63466: ST_TO_ADDR
// for i = 1 to mc_sides do
63467: LD_ADDR_VAR 0 2
63471: PUSH
63472: DOUBLE
63473: LD_INT 1
63475: DEC
63476: ST_TO_ADDR
63477: LD_EXP 76
63481: PUSH
63482: FOR_TO
63483: IFFALSE 63541
// if not mc_sides [ i ] in tmp then
63485: LD_EXP 76
63489: PUSH
63490: LD_VAR 0 2
63494: ARRAY
63495: PUSH
63496: LD_VAR 0 5
63500: IN
63501: NOT
63502: IFFALSE 63539
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
63504: LD_ADDR_VAR 0 5
63508: PUSH
63509: LD_VAR 0 5
63513: PPUSH
63514: LD_VAR 0 5
63518: PUSH
63519: LD_INT 1
63521: PLUS
63522: PPUSH
63523: LD_EXP 76
63527: PUSH
63528: LD_VAR 0 2
63532: ARRAY
63533: PPUSH
63534: CALL_OW 2
63538: ST_TO_ADDR
63539: GO 63482
63541: POP
63542: POP
// if not tmp then
63543: LD_VAR 0 5
63547: NOT
63548: IFFALSE 63552
// exit ;
63550: GO 63657
// for j in tmp do
63552: LD_ADDR_VAR 0 3
63556: PUSH
63557: LD_VAR 0 5
63561: PUSH
63562: FOR_IN
63563: IFFALSE 63655
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
63565: LD_ADDR_VAR 0 6
63569: PUSH
63570: LD_INT 22
63572: PUSH
63573: LD_VAR 0 3
63577: PUSH
63578: EMPTY
63579: LIST
63580: LIST
63581: PPUSH
63582: CALL_OW 69
63586: ST_TO_ADDR
// if not un then
63587: LD_VAR 0 6
63591: NOT
63592: IFFALSE 63596
// continue ;
63594: GO 63562
// nation := GetNation ( un [ 1 ] ) ;
63596: LD_ADDR_VAR 0 4
63600: PUSH
63601: LD_VAR 0 6
63605: PUSH
63606: LD_INT 1
63608: ARRAY
63609: PPUSH
63610: CALL_OW 248
63614: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
63615: LD_ADDR_EXP 77
63619: PUSH
63620: LD_EXP 77
63624: PPUSH
63625: LD_VAR 0 3
63629: PPUSH
63630: LD_VAR 0 3
63634: PPUSH
63635: LD_VAR 0 4
63639: PPUSH
63640: LD_INT 1
63642: PPUSH
63643: CALL 19949 0 3
63647: PPUSH
63648: CALL_OW 1
63652: ST_TO_ADDR
// end ;
63653: GO 63562
63655: POP
63656: POP
// end ;
63657: LD_VAR 0 1
63661: RET
// export function MC_InitSides ( ) ; var i ; begin
63662: LD_INT 0
63664: PPUSH
63665: PPUSH
// if not mc_bases then
63666: LD_EXP 50
63670: NOT
63671: IFFALSE 63675
// exit ;
63673: GO 63749
// for i = 1 to mc_bases do
63675: LD_ADDR_VAR 0 2
63679: PUSH
63680: DOUBLE
63681: LD_INT 1
63683: DEC
63684: ST_TO_ADDR
63685: LD_EXP 50
63689: PUSH
63690: FOR_TO
63691: IFFALSE 63747
// if mc_bases [ i ] then
63693: LD_EXP 50
63697: PUSH
63698: LD_VAR 0 2
63702: ARRAY
63703: IFFALSE 63745
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
63705: LD_ADDR_EXP 76
63709: PUSH
63710: LD_EXP 76
63714: PPUSH
63715: LD_VAR 0 2
63719: PPUSH
63720: LD_EXP 50
63724: PUSH
63725: LD_VAR 0 2
63729: ARRAY
63730: PUSH
63731: LD_INT 1
63733: ARRAY
63734: PPUSH
63735: CALL_OW 255
63739: PPUSH
63740: CALL_OW 1
63744: ST_TO_ADDR
63745: GO 63690
63747: POP
63748: POP
// end ;
63749: LD_VAR 0 1
63753: RET
// every 0 0$03 trigger skirmish do
63754: LD_EXP 48
63758: IFFALSE 63912
63760: GO 63762
63762: DISABLE
// begin enable ;
63763: ENABLE
// MC_CheckBuildings ( ) ;
63764: CALL 68410 0 0
// MC_CheckPeopleLife ( ) ;
63768: CALL 68571 0 0
// RaiseSailEvent ( 100 ) ;
63772: LD_INT 100
63774: PPUSH
63775: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
63779: LD_INT 103
63781: PPUSH
63782: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
63786: LD_INT 104
63788: PPUSH
63789: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
63793: LD_INT 105
63795: PPUSH
63796: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
63800: LD_INT 106
63802: PPUSH
63803: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
63807: LD_INT 107
63809: PPUSH
63810: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
63814: LD_INT 108
63816: PPUSH
63817: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
63821: LD_INT 109
63823: PPUSH
63824: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
63828: LD_INT 110
63830: PPUSH
63831: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
63835: LD_INT 111
63837: PPUSH
63838: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
63842: LD_INT 112
63844: PPUSH
63845: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
63849: LD_INT 113
63851: PPUSH
63852: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
63856: LD_INT 120
63858: PPUSH
63859: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
63863: LD_INT 121
63865: PPUSH
63866: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
63870: LD_INT 122
63872: PPUSH
63873: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
63877: LD_INT 123
63879: PPUSH
63880: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
63884: LD_INT 124
63886: PPUSH
63887: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
63891: LD_INT 125
63893: PPUSH
63894: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
63898: LD_INT 126
63900: PPUSH
63901: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
63905: LD_INT 200
63907: PPUSH
63908: CALL_OW 427
// end ;
63912: END
// on SailEvent ( event ) do begin if event < 100 then
63913: LD_VAR 0 1
63917: PUSH
63918: LD_INT 100
63920: LESS
63921: IFFALSE 63932
// CustomEvent ( event ) ;
63923: LD_VAR 0 1
63927: PPUSH
63928: CALL 19113 0 1
// if event = 100 then
63932: LD_VAR 0 1
63936: PUSH
63937: LD_INT 100
63939: EQUAL
63940: IFFALSE 63946
// MC_ClassManager ( ) ;
63942: CALL 64338 0 0
// if event = 101 then
63946: LD_VAR 0 1
63950: PUSH
63951: LD_INT 101
63953: EQUAL
63954: IFFALSE 63960
// MC_RepairBuildings ( ) ;
63956: CALL 69156 0 0
// if event = 102 then
63960: LD_VAR 0 1
63964: PUSH
63965: LD_INT 102
63967: EQUAL
63968: IFFALSE 63974
// MC_Heal ( ) ;
63970: CALL 70063 0 0
// if event = 103 then
63974: LD_VAR 0 1
63978: PUSH
63979: LD_INT 103
63981: EQUAL
63982: IFFALSE 63988
// MC_Build ( ) ;
63984: CALL 70485 0 0
// if event = 104 then
63988: LD_VAR 0 1
63992: PUSH
63993: LD_INT 104
63995: EQUAL
63996: IFFALSE 64002
// MC_TurretWeapon ( ) ;
63998: CALL 72126 0 0
// if event = 105 then
64002: LD_VAR 0 1
64006: PUSH
64007: LD_INT 105
64009: EQUAL
64010: IFFALSE 64016
// MC_BuildUpgrade ( ) ;
64012: CALL 71677 0 0
// if event = 106 then
64016: LD_VAR 0 1
64020: PUSH
64021: LD_INT 106
64023: EQUAL
64024: IFFALSE 64030
// MC_PlantMines ( ) ;
64026: CALL 72556 0 0
// if event = 107 then
64030: LD_VAR 0 1
64034: PUSH
64035: LD_INT 107
64037: EQUAL
64038: IFFALSE 64044
// MC_CollectCrates ( ) ;
64040: CALL 73347 0 0
// if event = 108 then
64044: LD_VAR 0 1
64048: PUSH
64049: LD_INT 108
64051: EQUAL
64052: IFFALSE 64058
// MC_LinkRemoteControl ( ) ;
64054: CALL 75197 0 0
// if event = 109 then
64058: LD_VAR 0 1
64062: PUSH
64063: LD_INT 109
64065: EQUAL
64066: IFFALSE 64072
// MC_ProduceVehicle ( ) ;
64068: CALL 75378 0 0
// if event = 110 then
64072: LD_VAR 0 1
64076: PUSH
64077: LD_INT 110
64079: EQUAL
64080: IFFALSE 64086
// MC_SendAttack ( ) ;
64082: CALL 75844 0 0
// if event = 111 then
64086: LD_VAR 0 1
64090: PUSH
64091: LD_INT 111
64093: EQUAL
64094: IFFALSE 64100
// MC_Defend ( ) ;
64096: CALL 75952 0 0
// if event = 112 then
64100: LD_VAR 0 1
64104: PUSH
64105: LD_INT 112
64107: EQUAL
64108: IFFALSE 64114
// MC_Research ( ) ;
64110: CALL 76832 0 0
// if event = 113 then
64114: LD_VAR 0 1
64118: PUSH
64119: LD_INT 113
64121: EQUAL
64122: IFFALSE 64128
// MC_MinesTrigger ( ) ;
64124: CALL 77946 0 0
// if event = 120 then
64128: LD_VAR 0 1
64132: PUSH
64133: LD_INT 120
64135: EQUAL
64136: IFFALSE 64142
// MC_RepairVehicle ( ) ;
64138: CALL 78045 0 0
// if event = 121 then
64142: LD_VAR 0 1
64146: PUSH
64147: LD_INT 121
64149: EQUAL
64150: IFFALSE 64156
// MC_TameApe ( ) ;
64152: CALL 78786 0 0
// if event = 122 then
64156: LD_VAR 0 1
64160: PUSH
64161: LD_INT 122
64163: EQUAL
64164: IFFALSE 64170
// MC_ChangeApeClass ( ) ;
64166: CALL 79615 0 0
// if event = 123 then
64170: LD_VAR 0 1
64174: PUSH
64175: LD_INT 123
64177: EQUAL
64178: IFFALSE 64184
// MC_Bazooka ( ) ;
64180: CALL 80265 0 0
// if event = 124 then
64184: LD_VAR 0 1
64188: PUSH
64189: LD_INT 124
64191: EQUAL
64192: IFFALSE 64198
// MC_TeleportExit ( ) ;
64194: CALL 80463 0 0
// if event = 125 then
64198: LD_VAR 0 1
64202: PUSH
64203: LD_INT 125
64205: EQUAL
64206: IFFALSE 64212
// MC_Deposits ( ) ;
64208: CALL 81110 0 0
// if event = 126 then
64212: LD_VAR 0 1
64216: PUSH
64217: LD_INT 126
64219: EQUAL
64220: IFFALSE 64226
// MC_RemoteDriver ( ) ;
64222: CALL 81735 0 0
// if event = 200 then
64226: LD_VAR 0 1
64230: PUSH
64231: LD_INT 200
64233: EQUAL
64234: IFFALSE 64240
// MC_Idle ( ) ;
64236: CALL 83684 0 0
// end ;
64240: PPOPN 1
64242: END
// export function MC_Reset ( base , tag ) ; var i ; begin
64243: LD_INT 0
64245: PPUSH
64246: PPUSH
// if not mc_bases [ base ] or not tag then
64247: LD_EXP 50
64251: PUSH
64252: LD_VAR 0 1
64256: ARRAY
64257: NOT
64258: PUSH
64259: LD_VAR 0 2
64263: NOT
64264: OR
64265: IFFALSE 64269
// exit ;
64267: GO 64333
// for i in mc_bases [ base ] union mc_ape [ base ] do
64269: LD_ADDR_VAR 0 4
64273: PUSH
64274: LD_EXP 50
64278: PUSH
64279: LD_VAR 0 1
64283: ARRAY
64284: PUSH
64285: LD_EXP 79
64289: PUSH
64290: LD_VAR 0 1
64294: ARRAY
64295: UNION
64296: PUSH
64297: FOR_IN
64298: IFFALSE 64331
// if GetTag ( i ) = tag then
64300: LD_VAR 0 4
64304: PPUSH
64305: CALL_OW 110
64309: PUSH
64310: LD_VAR 0 2
64314: EQUAL
64315: IFFALSE 64329
// SetTag ( i , 0 ) ;
64317: LD_VAR 0 4
64321: PPUSH
64322: LD_INT 0
64324: PPUSH
64325: CALL_OW 109
64329: GO 64297
64331: POP
64332: POP
// end ;
64333: LD_VAR 0 3
64337: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
64338: LD_INT 0
64340: PPUSH
64341: PPUSH
64342: PPUSH
64343: PPUSH
64344: PPUSH
64345: PPUSH
64346: PPUSH
64347: PPUSH
// if not mc_bases then
64348: LD_EXP 50
64352: NOT
64353: IFFALSE 64357
// exit ;
64355: GO 64815
// for i = 1 to mc_bases do
64357: LD_ADDR_VAR 0 2
64361: PUSH
64362: DOUBLE
64363: LD_INT 1
64365: DEC
64366: ST_TO_ADDR
64367: LD_EXP 50
64371: PUSH
64372: FOR_TO
64373: IFFALSE 64813
// begin tmp := MC_ClassCheckReq ( i ) ;
64375: LD_ADDR_VAR 0 4
64379: PUSH
64380: LD_VAR 0 2
64384: PPUSH
64385: CALL 64820 0 1
64389: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
64390: LD_ADDR_EXP 91
64394: PUSH
64395: LD_EXP 91
64399: PPUSH
64400: LD_VAR 0 2
64404: PPUSH
64405: LD_VAR 0 4
64409: PPUSH
64410: CALL_OW 1
64414: ST_TO_ADDR
// if not tmp then
64415: LD_VAR 0 4
64419: NOT
64420: IFFALSE 64424
// continue ;
64422: GO 64372
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
64424: LD_ADDR_VAR 0 6
64428: PUSH
64429: LD_EXP 50
64433: PUSH
64434: LD_VAR 0 2
64438: ARRAY
64439: PPUSH
64440: LD_INT 2
64442: PUSH
64443: LD_INT 30
64445: PUSH
64446: LD_INT 4
64448: PUSH
64449: EMPTY
64450: LIST
64451: LIST
64452: PUSH
64453: LD_INT 30
64455: PUSH
64456: LD_INT 5
64458: PUSH
64459: EMPTY
64460: LIST
64461: LIST
64462: PUSH
64463: EMPTY
64464: LIST
64465: LIST
64466: LIST
64467: PPUSH
64468: CALL_OW 72
64472: PUSH
64473: LD_EXP 50
64477: PUSH
64478: LD_VAR 0 2
64482: ARRAY
64483: PPUSH
64484: LD_INT 2
64486: PUSH
64487: LD_INT 30
64489: PUSH
64490: LD_INT 0
64492: PUSH
64493: EMPTY
64494: LIST
64495: LIST
64496: PUSH
64497: LD_INT 30
64499: PUSH
64500: LD_INT 1
64502: PUSH
64503: EMPTY
64504: LIST
64505: LIST
64506: PUSH
64507: EMPTY
64508: LIST
64509: LIST
64510: LIST
64511: PPUSH
64512: CALL_OW 72
64516: PUSH
64517: LD_EXP 50
64521: PUSH
64522: LD_VAR 0 2
64526: ARRAY
64527: PPUSH
64528: LD_INT 30
64530: PUSH
64531: LD_INT 3
64533: PUSH
64534: EMPTY
64535: LIST
64536: LIST
64537: PPUSH
64538: CALL_OW 72
64542: PUSH
64543: LD_EXP 50
64547: PUSH
64548: LD_VAR 0 2
64552: ARRAY
64553: PPUSH
64554: LD_INT 2
64556: PUSH
64557: LD_INT 30
64559: PUSH
64560: LD_INT 6
64562: PUSH
64563: EMPTY
64564: LIST
64565: LIST
64566: PUSH
64567: LD_INT 30
64569: PUSH
64570: LD_INT 7
64572: PUSH
64573: EMPTY
64574: LIST
64575: LIST
64576: PUSH
64577: LD_INT 30
64579: PUSH
64580: LD_INT 8
64582: PUSH
64583: EMPTY
64584: LIST
64585: LIST
64586: PUSH
64587: EMPTY
64588: LIST
64589: LIST
64590: LIST
64591: LIST
64592: PPUSH
64593: CALL_OW 72
64597: PUSH
64598: EMPTY
64599: LIST
64600: LIST
64601: LIST
64602: LIST
64603: ST_TO_ADDR
// for j = 1 to 4 do
64604: LD_ADDR_VAR 0 3
64608: PUSH
64609: DOUBLE
64610: LD_INT 1
64612: DEC
64613: ST_TO_ADDR
64614: LD_INT 4
64616: PUSH
64617: FOR_TO
64618: IFFALSE 64809
// begin if not tmp [ j ] then
64620: LD_VAR 0 4
64624: PUSH
64625: LD_VAR 0 3
64629: ARRAY
64630: NOT
64631: IFFALSE 64635
// continue ;
64633: GO 64617
// for p in tmp [ j ] do
64635: LD_ADDR_VAR 0 5
64639: PUSH
64640: LD_VAR 0 4
64644: PUSH
64645: LD_VAR 0 3
64649: ARRAY
64650: PUSH
64651: FOR_IN
64652: IFFALSE 64805
// begin if not b [ j ] then
64654: LD_VAR 0 6
64658: PUSH
64659: LD_VAR 0 3
64663: ARRAY
64664: NOT
64665: IFFALSE 64669
// break ;
64667: GO 64805
// e := 0 ;
64669: LD_ADDR_VAR 0 7
64673: PUSH
64674: LD_INT 0
64676: ST_TO_ADDR
// for k in b [ j ] do
64677: LD_ADDR_VAR 0 8
64681: PUSH
64682: LD_VAR 0 6
64686: PUSH
64687: LD_VAR 0 3
64691: ARRAY
64692: PUSH
64693: FOR_IN
64694: IFFALSE 64721
// if IsNotFull ( k ) then
64696: LD_VAR 0 8
64700: PPUSH
64701: CALL 22102 0 1
64705: IFFALSE 64719
// begin e := k ;
64707: LD_ADDR_VAR 0 7
64711: PUSH
64712: LD_VAR 0 8
64716: ST_TO_ADDR
// break ;
64717: GO 64721
// end ;
64719: GO 64693
64721: POP
64722: POP
// if e and not UnitGoingToBuilding ( p , e ) then
64723: LD_VAR 0 7
64727: PUSH
64728: LD_VAR 0 5
64732: PPUSH
64733: LD_VAR 0 7
64737: PPUSH
64738: CALL 55213 0 2
64742: NOT
64743: AND
64744: IFFALSE 64803
// begin if IsInUnit ( p ) then
64746: LD_VAR 0 5
64750: PPUSH
64751: CALL_OW 310
64755: IFFALSE 64766
// ComExitBuilding ( p ) ;
64757: LD_VAR 0 5
64761: PPUSH
64762: CALL_OW 122
// ComEnterUnit ( p , e ) ;
64766: LD_VAR 0 5
64770: PPUSH
64771: LD_VAR 0 7
64775: PPUSH
64776: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
64780: LD_VAR 0 5
64784: PPUSH
64785: LD_VAR 0 3
64789: PPUSH
64790: CALL_OW 183
// AddComExitBuilding ( p ) ;
64794: LD_VAR 0 5
64798: PPUSH
64799: CALL_OW 182
// end ; end ;
64803: GO 64651
64805: POP
64806: POP
// end ;
64807: GO 64617
64809: POP
64810: POP
// end ;
64811: GO 64372
64813: POP
64814: POP
// end ;
64815: LD_VAR 0 1
64819: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
64820: LD_INT 0
64822: PPUSH
64823: PPUSH
64824: PPUSH
64825: PPUSH
64826: PPUSH
64827: PPUSH
64828: PPUSH
64829: PPUSH
64830: PPUSH
64831: PPUSH
64832: PPUSH
64833: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
64834: LD_VAR 0 1
64838: NOT
64839: PUSH
64840: LD_EXP 50
64844: PUSH
64845: LD_VAR 0 1
64849: ARRAY
64850: NOT
64851: OR
64852: PUSH
64853: LD_EXP 50
64857: PUSH
64858: LD_VAR 0 1
64862: ARRAY
64863: PPUSH
64864: LD_INT 2
64866: PUSH
64867: LD_INT 30
64869: PUSH
64870: LD_INT 0
64872: PUSH
64873: EMPTY
64874: LIST
64875: LIST
64876: PUSH
64877: LD_INT 30
64879: PUSH
64880: LD_INT 1
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: PUSH
64887: EMPTY
64888: LIST
64889: LIST
64890: LIST
64891: PPUSH
64892: CALL_OW 72
64896: NOT
64897: OR
64898: IFFALSE 64902
// exit ;
64900: GO 68405
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
64902: LD_ADDR_VAR 0 4
64906: PUSH
64907: LD_EXP 50
64911: PUSH
64912: LD_VAR 0 1
64916: ARRAY
64917: PPUSH
64918: LD_INT 2
64920: PUSH
64921: LD_INT 25
64923: PUSH
64924: LD_INT 1
64926: PUSH
64927: EMPTY
64928: LIST
64929: LIST
64930: PUSH
64931: LD_INT 25
64933: PUSH
64934: LD_INT 2
64936: PUSH
64937: EMPTY
64938: LIST
64939: LIST
64940: PUSH
64941: LD_INT 25
64943: PUSH
64944: LD_INT 3
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: PUSH
64951: LD_INT 25
64953: PUSH
64954: LD_INT 4
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: PUSH
64961: LD_INT 25
64963: PUSH
64964: LD_INT 5
64966: PUSH
64967: EMPTY
64968: LIST
64969: LIST
64970: PUSH
64971: LD_INT 25
64973: PUSH
64974: LD_INT 8
64976: PUSH
64977: EMPTY
64978: LIST
64979: LIST
64980: PUSH
64981: LD_INT 25
64983: PUSH
64984: LD_INT 9
64986: PUSH
64987: EMPTY
64988: LIST
64989: LIST
64990: PUSH
64991: EMPTY
64992: LIST
64993: LIST
64994: LIST
64995: LIST
64996: LIST
64997: LIST
64998: LIST
64999: LIST
65000: PPUSH
65001: CALL_OW 72
65005: ST_TO_ADDR
// if not tmp then
65006: LD_VAR 0 4
65010: NOT
65011: IFFALSE 65015
// exit ;
65013: GO 68405
// for i in tmp do
65015: LD_ADDR_VAR 0 3
65019: PUSH
65020: LD_VAR 0 4
65024: PUSH
65025: FOR_IN
65026: IFFALSE 65057
// if GetTag ( i ) then
65028: LD_VAR 0 3
65032: PPUSH
65033: CALL_OW 110
65037: IFFALSE 65055
// tmp := tmp diff i ;
65039: LD_ADDR_VAR 0 4
65043: PUSH
65044: LD_VAR 0 4
65048: PUSH
65049: LD_VAR 0 3
65053: DIFF
65054: ST_TO_ADDR
65055: GO 65025
65057: POP
65058: POP
// if not tmp then
65059: LD_VAR 0 4
65063: NOT
65064: IFFALSE 65068
// exit ;
65066: GO 68405
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
65068: LD_ADDR_VAR 0 5
65072: PUSH
65073: LD_EXP 50
65077: PUSH
65078: LD_VAR 0 1
65082: ARRAY
65083: PPUSH
65084: LD_INT 2
65086: PUSH
65087: LD_INT 25
65089: PUSH
65090: LD_INT 1
65092: PUSH
65093: EMPTY
65094: LIST
65095: LIST
65096: PUSH
65097: LD_INT 25
65099: PUSH
65100: LD_INT 5
65102: PUSH
65103: EMPTY
65104: LIST
65105: LIST
65106: PUSH
65107: LD_INT 25
65109: PUSH
65110: LD_INT 8
65112: PUSH
65113: EMPTY
65114: LIST
65115: LIST
65116: PUSH
65117: LD_INT 25
65119: PUSH
65120: LD_INT 9
65122: PUSH
65123: EMPTY
65124: LIST
65125: LIST
65126: PUSH
65127: EMPTY
65128: LIST
65129: LIST
65130: LIST
65131: LIST
65132: LIST
65133: PPUSH
65134: CALL_OW 72
65138: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
65139: LD_ADDR_VAR 0 6
65143: PUSH
65144: LD_EXP 50
65148: PUSH
65149: LD_VAR 0 1
65153: ARRAY
65154: PPUSH
65155: LD_INT 25
65157: PUSH
65158: LD_INT 2
65160: PUSH
65161: EMPTY
65162: LIST
65163: LIST
65164: PPUSH
65165: CALL_OW 72
65169: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
65170: LD_ADDR_VAR 0 7
65174: PUSH
65175: LD_EXP 50
65179: PUSH
65180: LD_VAR 0 1
65184: ARRAY
65185: PPUSH
65186: LD_INT 25
65188: PUSH
65189: LD_INT 3
65191: PUSH
65192: EMPTY
65193: LIST
65194: LIST
65195: PPUSH
65196: CALL_OW 72
65200: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
65201: LD_ADDR_VAR 0 8
65205: PUSH
65206: LD_EXP 50
65210: PUSH
65211: LD_VAR 0 1
65215: ARRAY
65216: PPUSH
65217: LD_INT 25
65219: PUSH
65220: LD_INT 4
65222: PUSH
65223: EMPTY
65224: LIST
65225: LIST
65226: PUSH
65227: LD_INT 24
65229: PUSH
65230: LD_INT 251
65232: PUSH
65233: EMPTY
65234: LIST
65235: LIST
65236: PUSH
65237: EMPTY
65238: LIST
65239: LIST
65240: PPUSH
65241: CALL_OW 72
65245: ST_TO_ADDR
// if mc_is_defending [ base ] then
65246: LD_EXP 93
65250: PUSH
65251: LD_VAR 0 1
65255: ARRAY
65256: IFFALSE 65717
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
65258: LD_ADDR_EXP 92
65262: PUSH
65263: LD_EXP 92
65267: PPUSH
65268: LD_VAR 0 1
65272: PPUSH
65273: LD_INT 4
65275: PPUSH
65276: CALL_OW 1
65280: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
65281: LD_ADDR_VAR 0 12
65285: PUSH
65286: LD_EXP 50
65290: PUSH
65291: LD_VAR 0 1
65295: ARRAY
65296: PPUSH
65297: LD_INT 2
65299: PUSH
65300: LD_INT 30
65302: PUSH
65303: LD_INT 4
65305: PUSH
65306: EMPTY
65307: LIST
65308: LIST
65309: PUSH
65310: LD_INT 30
65312: PUSH
65313: LD_INT 5
65315: PUSH
65316: EMPTY
65317: LIST
65318: LIST
65319: PUSH
65320: EMPTY
65321: LIST
65322: LIST
65323: LIST
65324: PPUSH
65325: CALL_OW 72
65329: ST_TO_ADDR
// if not b then
65330: LD_VAR 0 12
65334: NOT
65335: IFFALSE 65339
// exit ;
65337: GO 68405
// p := [ ] ;
65339: LD_ADDR_VAR 0 11
65343: PUSH
65344: EMPTY
65345: ST_TO_ADDR
// if sci >= 2 then
65346: LD_VAR 0 8
65350: PUSH
65351: LD_INT 2
65353: GREATEREQUAL
65354: IFFALSE 65385
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
65356: LD_ADDR_VAR 0 8
65360: PUSH
65361: LD_VAR 0 8
65365: PUSH
65366: LD_INT 1
65368: ARRAY
65369: PUSH
65370: LD_VAR 0 8
65374: PUSH
65375: LD_INT 2
65377: ARRAY
65378: PUSH
65379: EMPTY
65380: LIST
65381: LIST
65382: ST_TO_ADDR
65383: GO 65446
// if sci = 1 then
65385: LD_VAR 0 8
65389: PUSH
65390: LD_INT 1
65392: EQUAL
65393: IFFALSE 65414
// sci := [ sci [ 1 ] ] else
65395: LD_ADDR_VAR 0 8
65399: PUSH
65400: LD_VAR 0 8
65404: PUSH
65405: LD_INT 1
65407: ARRAY
65408: PUSH
65409: EMPTY
65410: LIST
65411: ST_TO_ADDR
65412: GO 65446
// if sci = 0 then
65414: LD_VAR 0 8
65418: PUSH
65419: LD_INT 0
65421: EQUAL
65422: IFFALSE 65446
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
65424: LD_ADDR_VAR 0 11
65428: PUSH
65429: LD_VAR 0 4
65433: PPUSH
65434: LD_INT 4
65436: PPUSH
65437: CALL 55076 0 2
65441: PUSH
65442: LD_INT 1
65444: ARRAY
65445: ST_TO_ADDR
// if eng > 4 then
65446: LD_VAR 0 6
65450: PUSH
65451: LD_INT 4
65453: GREATER
65454: IFFALSE 65500
// for i = eng downto 4 do
65456: LD_ADDR_VAR 0 3
65460: PUSH
65461: DOUBLE
65462: LD_VAR 0 6
65466: INC
65467: ST_TO_ADDR
65468: LD_INT 4
65470: PUSH
65471: FOR_DOWNTO
65472: IFFALSE 65498
// eng := eng diff eng [ i ] ;
65474: LD_ADDR_VAR 0 6
65478: PUSH
65479: LD_VAR 0 6
65483: PUSH
65484: LD_VAR 0 6
65488: PUSH
65489: LD_VAR 0 3
65493: ARRAY
65494: DIFF
65495: ST_TO_ADDR
65496: GO 65471
65498: POP
65499: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
65500: LD_ADDR_VAR 0 4
65504: PUSH
65505: LD_VAR 0 4
65509: PUSH
65510: LD_VAR 0 5
65514: PUSH
65515: LD_VAR 0 6
65519: UNION
65520: PUSH
65521: LD_VAR 0 7
65525: UNION
65526: PUSH
65527: LD_VAR 0 8
65531: UNION
65532: DIFF
65533: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
65534: LD_ADDR_VAR 0 13
65538: PUSH
65539: LD_EXP 50
65543: PUSH
65544: LD_VAR 0 1
65548: ARRAY
65549: PPUSH
65550: LD_INT 2
65552: PUSH
65553: LD_INT 30
65555: PUSH
65556: LD_INT 32
65558: PUSH
65559: EMPTY
65560: LIST
65561: LIST
65562: PUSH
65563: LD_INT 30
65565: PUSH
65566: LD_INT 31
65568: PUSH
65569: EMPTY
65570: LIST
65571: LIST
65572: PUSH
65573: EMPTY
65574: LIST
65575: LIST
65576: LIST
65577: PPUSH
65578: CALL_OW 72
65582: PUSH
65583: LD_EXP 50
65587: PUSH
65588: LD_VAR 0 1
65592: ARRAY
65593: PPUSH
65594: LD_INT 2
65596: PUSH
65597: LD_INT 30
65599: PUSH
65600: LD_INT 4
65602: PUSH
65603: EMPTY
65604: LIST
65605: LIST
65606: PUSH
65607: LD_INT 30
65609: PUSH
65610: LD_INT 5
65612: PUSH
65613: EMPTY
65614: LIST
65615: LIST
65616: PUSH
65617: EMPTY
65618: LIST
65619: LIST
65620: LIST
65621: PPUSH
65622: CALL_OW 72
65626: PUSH
65627: LD_INT 6
65629: MUL
65630: PLUS
65631: ST_TO_ADDR
// if bcount < tmp then
65632: LD_VAR 0 13
65636: PUSH
65637: LD_VAR 0 4
65641: LESS
65642: IFFALSE 65688
// for i = tmp downto bcount do
65644: LD_ADDR_VAR 0 3
65648: PUSH
65649: DOUBLE
65650: LD_VAR 0 4
65654: INC
65655: ST_TO_ADDR
65656: LD_VAR 0 13
65660: PUSH
65661: FOR_DOWNTO
65662: IFFALSE 65686
// tmp := Delete ( tmp , tmp ) ;
65664: LD_ADDR_VAR 0 4
65668: PUSH
65669: LD_VAR 0 4
65673: PPUSH
65674: LD_VAR 0 4
65678: PPUSH
65679: CALL_OW 3
65683: ST_TO_ADDR
65684: GO 65661
65686: POP
65687: POP
// result := [ tmp , 0 , 0 , p ] ;
65688: LD_ADDR_VAR 0 2
65692: PUSH
65693: LD_VAR 0 4
65697: PUSH
65698: LD_INT 0
65700: PUSH
65701: LD_INT 0
65703: PUSH
65704: LD_VAR 0 11
65708: PUSH
65709: EMPTY
65710: LIST
65711: LIST
65712: LIST
65713: LIST
65714: ST_TO_ADDR
// exit ;
65715: GO 68405
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
65717: LD_EXP 50
65721: PUSH
65722: LD_VAR 0 1
65726: ARRAY
65727: PPUSH
65728: LD_INT 2
65730: PUSH
65731: LD_INT 30
65733: PUSH
65734: LD_INT 6
65736: PUSH
65737: EMPTY
65738: LIST
65739: LIST
65740: PUSH
65741: LD_INT 30
65743: PUSH
65744: LD_INT 7
65746: PUSH
65747: EMPTY
65748: LIST
65749: LIST
65750: PUSH
65751: LD_INT 30
65753: PUSH
65754: LD_INT 8
65756: PUSH
65757: EMPTY
65758: LIST
65759: LIST
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: LIST
65765: LIST
65766: PPUSH
65767: CALL_OW 72
65771: NOT
65772: PUSH
65773: LD_EXP 50
65777: PUSH
65778: LD_VAR 0 1
65782: ARRAY
65783: PPUSH
65784: LD_INT 30
65786: PUSH
65787: LD_INT 3
65789: PUSH
65790: EMPTY
65791: LIST
65792: LIST
65793: PPUSH
65794: CALL_OW 72
65798: NOT
65799: AND
65800: IFFALSE 65872
// begin if eng = tmp then
65802: LD_VAR 0 6
65806: PUSH
65807: LD_VAR 0 4
65811: EQUAL
65812: IFFALSE 65816
// exit ;
65814: GO 68405
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
65816: LD_ADDR_EXP 92
65820: PUSH
65821: LD_EXP 92
65825: PPUSH
65826: LD_VAR 0 1
65830: PPUSH
65831: LD_INT 1
65833: PPUSH
65834: CALL_OW 1
65838: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
65839: LD_ADDR_VAR 0 2
65843: PUSH
65844: LD_INT 0
65846: PUSH
65847: LD_VAR 0 4
65851: PUSH
65852: LD_VAR 0 6
65856: DIFF
65857: PUSH
65858: LD_INT 0
65860: PUSH
65861: LD_INT 0
65863: PUSH
65864: EMPTY
65865: LIST
65866: LIST
65867: LIST
65868: LIST
65869: ST_TO_ADDR
// exit ;
65870: GO 68405
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
65872: LD_EXP 77
65876: PUSH
65877: LD_EXP 76
65881: PUSH
65882: LD_VAR 0 1
65886: ARRAY
65887: ARRAY
65888: PUSH
65889: LD_EXP 50
65893: PUSH
65894: LD_VAR 0 1
65898: ARRAY
65899: PPUSH
65900: LD_INT 2
65902: PUSH
65903: LD_INT 30
65905: PUSH
65906: LD_INT 6
65908: PUSH
65909: EMPTY
65910: LIST
65911: LIST
65912: PUSH
65913: LD_INT 30
65915: PUSH
65916: LD_INT 7
65918: PUSH
65919: EMPTY
65920: LIST
65921: LIST
65922: PUSH
65923: LD_INT 30
65925: PUSH
65926: LD_INT 8
65928: PUSH
65929: EMPTY
65930: LIST
65931: LIST
65932: PUSH
65933: EMPTY
65934: LIST
65935: LIST
65936: LIST
65937: LIST
65938: PPUSH
65939: CALL_OW 72
65943: AND
65944: PUSH
65945: LD_EXP 50
65949: PUSH
65950: LD_VAR 0 1
65954: ARRAY
65955: PPUSH
65956: LD_INT 30
65958: PUSH
65959: LD_INT 3
65961: PUSH
65962: EMPTY
65963: LIST
65964: LIST
65965: PPUSH
65966: CALL_OW 72
65970: NOT
65971: AND
65972: IFFALSE 66186
// begin if sci >= 6 then
65974: LD_VAR 0 8
65978: PUSH
65979: LD_INT 6
65981: GREATEREQUAL
65982: IFFALSE 65986
// exit ;
65984: GO 68405
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
65986: LD_ADDR_EXP 92
65990: PUSH
65991: LD_EXP 92
65995: PPUSH
65996: LD_VAR 0 1
66000: PPUSH
66001: LD_INT 2
66003: PPUSH
66004: CALL_OW 1
66008: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
66009: LD_ADDR_VAR 0 9
66013: PUSH
66014: LD_VAR 0 4
66018: PUSH
66019: LD_VAR 0 8
66023: DIFF
66024: PPUSH
66025: LD_INT 4
66027: PPUSH
66028: CALL 55076 0 2
66032: ST_TO_ADDR
// p := [ ] ;
66033: LD_ADDR_VAR 0 11
66037: PUSH
66038: EMPTY
66039: ST_TO_ADDR
// if sci < 6 and sort > 6 then
66040: LD_VAR 0 8
66044: PUSH
66045: LD_INT 6
66047: LESS
66048: PUSH
66049: LD_VAR 0 9
66053: PUSH
66054: LD_INT 6
66056: GREATER
66057: AND
66058: IFFALSE 66139
// begin for i = 1 to 6 - sci do
66060: LD_ADDR_VAR 0 3
66064: PUSH
66065: DOUBLE
66066: LD_INT 1
66068: DEC
66069: ST_TO_ADDR
66070: LD_INT 6
66072: PUSH
66073: LD_VAR 0 8
66077: MINUS
66078: PUSH
66079: FOR_TO
66080: IFFALSE 66135
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
66082: LD_ADDR_VAR 0 11
66086: PUSH
66087: LD_VAR 0 11
66091: PPUSH
66092: LD_VAR 0 11
66096: PUSH
66097: LD_INT 1
66099: PLUS
66100: PPUSH
66101: LD_VAR 0 9
66105: PUSH
66106: LD_INT 1
66108: ARRAY
66109: PPUSH
66110: CALL_OW 2
66114: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
66115: LD_ADDR_VAR 0 9
66119: PUSH
66120: LD_VAR 0 9
66124: PPUSH
66125: LD_INT 1
66127: PPUSH
66128: CALL_OW 3
66132: ST_TO_ADDR
// end ;
66133: GO 66079
66135: POP
66136: POP
// end else
66137: GO 66159
// if sort then
66139: LD_VAR 0 9
66143: IFFALSE 66159
// p := sort [ 1 ] ;
66145: LD_ADDR_VAR 0 11
66149: PUSH
66150: LD_VAR 0 9
66154: PUSH
66155: LD_INT 1
66157: ARRAY
66158: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
66159: LD_ADDR_VAR 0 2
66163: PUSH
66164: LD_INT 0
66166: PUSH
66167: LD_INT 0
66169: PUSH
66170: LD_INT 0
66172: PUSH
66173: LD_VAR 0 11
66177: PUSH
66178: EMPTY
66179: LIST
66180: LIST
66181: LIST
66182: LIST
66183: ST_TO_ADDR
// exit ;
66184: GO 68405
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
66186: LD_EXP 77
66190: PUSH
66191: LD_EXP 76
66195: PUSH
66196: LD_VAR 0 1
66200: ARRAY
66201: ARRAY
66202: PUSH
66203: LD_EXP 50
66207: PUSH
66208: LD_VAR 0 1
66212: ARRAY
66213: PPUSH
66214: LD_INT 2
66216: PUSH
66217: LD_INT 30
66219: PUSH
66220: LD_INT 6
66222: PUSH
66223: EMPTY
66224: LIST
66225: LIST
66226: PUSH
66227: LD_INT 30
66229: PUSH
66230: LD_INT 7
66232: PUSH
66233: EMPTY
66234: LIST
66235: LIST
66236: PUSH
66237: LD_INT 30
66239: PUSH
66240: LD_INT 8
66242: PUSH
66243: EMPTY
66244: LIST
66245: LIST
66246: PUSH
66247: EMPTY
66248: LIST
66249: LIST
66250: LIST
66251: LIST
66252: PPUSH
66253: CALL_OW 72
66257: AND
66258: PUSH
66259: LD_EXP 50
66263: PUSH
66264: LD_VAR 0 1
66268: ARRAY
66269: PPUSH
66270: LD_INT 30
66272: PUSH
66273: LD_INT 3
66275: PUSH
66276: EMPTY
66277: LIST
66278: LIST
66279: PPUSH
66280: CALL_OW 72
66284: AND
66285: IFFALSE 67019
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
66287: LD_ADDR_EXP 92
66291: PUSH
66292: LD_EXP 92
66296: PPUSH
66297: LD_VAR 0 1
66301: PPUSH
66302: LD_INT 3
66304: PPUSH
66305: CALL_OW 1
66309: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
66310: LD_ADDR_VAR 0 2
66314: PUSH
66315: LD_INT 0
66317: PUSH
66318: LD_INT 0
66320: PUSH
66321: LD_INT 0
66323: PUSH
66324: LD_INT 0
66326: PUSH
66327: EMPTY
66328: LIST
66329: LIST
66330: LIST
66331: LIST
66332: ST_TO_ADDR
// if not eng then
66333: LD_VAR 0 6
66337: NOT
66338: IFFALSE 66401
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
66340: LD_ADDR_VAR 0 11
66344: PUSH
66345: LD_VAR 0 4
66349: PPUSH
66350: LD_INT 2
66352: PPUSH
66353: CALL 55076 0 2
66357: PUSH
66358: LD_INT 1
66360: ARRAY
66361: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
66362: LD_ADDR_VAR 0 2
66366: PUSH
66367: LD_VAR 0 2
66371: PPUSH
66372: LD_INT 2
66374: PPUSH
66375: LD_VAR 0 11
66379: PPUSH
66380: CALL_OW 1
66384: ST_TO_ADDR
// tmp := tmp diff p ;
66385: LD_ADDR_VAR 0 4
66389: PUSH
66390: LD_VAR 0 4
66394: PUSH
66395: LD_VAR 0 11
66399: DIFF
66400: ST_TO_ADDR
// end ; if tmp and sci < 6 then
66401: LD_VAR 0 4
66405: PUSH
66406: LD_VAR 0 8
66410: PUSH
66411: LD_INT 6
66413: LESS
66414: AND
66415: IFFALSE 66603
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
66417: LD_ADDR_VAR 0 9
66421: PUSH
66422: LD_VAR 0 4
66426: PUSH
66427: LD_VAR 0 8
66431: PUSH
66432: LD_VAR 0 7
66436: UNION
66437: DIFF
66438: PPUSH
66439: LD_INT 4
66441: PPUSH
66442: CALL 55076 0 2
66446: ST_TO_ADDR
// p := [ ] ;
66447: LD_ADDR_VAR 0 11
66451: PUSH
66452: EMPTY
66453: ST_TO_ADDR
// if sort then
66454: LD_VAR 0 9
66458: IFFALSE 66574
// for i = 1 to 6 - sci do
66460: LD_ADDR_VAR 0 3
66464: PUSH
66465: DOUBLE
66466: LD_INT 1
66468: DEC
66469: ST_TO_ADDR
66470: LD_INT 6
66472: PUSH
66473: LD_VAR 0 8
66477: MINUS
66478: PUSH
66479: FOR_TO
66480: IFFALSE 66572
// begin if i = sort then
66482: LD_VAR 0 3
66486: PUSH
66487: LD_VAR 0 9
66491: EQUAL
66492: IFFALSE 66496
// break ;
66494: GO 66572
// if GetClass ( i ) = 4 then
66496: LD_VAR 0 3
66500: PPUSH
66501: CALL_OW 257
66505: PUSH
66506: LD_INT 4
66508: EQUAL
66509: IFFALSE 66513
// continue ;
66511: GO 66479
// p := Insert ( p , p + 1 , sort [ i ] ) ;
66513: LD_ADDR_VAR 0 11
66517: PUSH
66518: LD_VAR 0 11
66522: PPUSH
66523: LD_VAR 0 11
66527: PUSH
66528: LD_INT 1
66530: PLUS
66531: PPUSH
66532: LD_VAR 0 9
66536: PUSH
66537: LD_VAR 0 3
66541: ARRAY
66542: PPUSH
66543: CALL_OW 2
66547: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
66548: LD_ADDR_VAR 0 4
66552: PUSH
66553: LD_VAR 0 4
66557: PUSH
66558: LD_VAR 0 9
66562: PUSH
66563: LD_VAR 0 3
66567: ARRAY
66568: DIFF
66569: ST_TO_ADDR
// end ;
66570: GO 66479
66572: POP
66573: POP
// if p then
66574: LD_VAR 0 11
66578: IFFALSE 66603
// result := Replace ( result , 4 , p ) ;
66580: LD_ADDR_VAR 0 2
66584: PUSH
66585: LD_VAR 0 2
66589: PPUSH
66590: LD_INT 4
66592: PPUSH
66593: LD_VAR 0 11
66597: PPUSH
66598: CALL_OW 1
66602: ST_TO_ADDR
// end ; if tmp and mech < 6 then
66603: LD_VAR 0 4
66607: PUSH
66608: LD_VAR 0 7
66612: PUSH
66613: LD_INT 6
66615: LESS
66616: AND
66617: IFFALSE 66805
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
66619: LD_ADDR_VAR 0 9
66623: PUSH
66624: LD_VAR 0 4
66628: PUSH
66629: LD_VAR 0 8
66633: PUSH
66634: LD_VAR 0 7
66638: UNION
66639: DIFF
66640: PPUSH
66641: LD_INT 3
66643: PPUSH
66644: CALL 55076 0 2
66648: ST_TO_ADDR
// p := [ ] ;
66649: LD_ADDR_VAR 0 11
66653: PUSH
66654: EMPTY
66655: ST_TO_ADDR
// if sort then
66656: LD_VAR 0 9
66660: IFFALSE 66776
// for i = 1 to 6 - mech do
66662: LD_ADDR_VAR 0 3
66666: PUSH
66667: DOUBLE
66668: LD_INT 1
66670: DEC
66671: ST_TO_ADDR
66672: LD_INT 6
66674: PUSH
66675: LD_VAR 0 7
66679: MINUS
66680: PUSH
66681: FOR_TO
66682: IFFALSE 66774
// begin if i = sort then
66684: LD_VAR 0 3
66688: PUSH
66689: LD_VAR 0 9
66693: EQUAL
66694: IFFALSE 66698
// break ;
66696: GO 66774
// if GetClass ( i ) = 3 then
66698: LD_VAR 0 3
66702: PPUSH
66703: CALL_OW 257
66707: PUSH
66708: LD_INT 3
66710: EQUAL
66711: IFFALSE 66715
// continue ;
66713: GO 66681
// p := Insert ( p , p + 1 , sort [ i ] ) ;
66715: LD_ADDR_VAR 0 11
66719: PUSH
66720: LD_VAR 0 11
66724: PPUSH
66725: LD_VAR 0 11
66729: PUSH
66730: LD_INT 1
66732: PLUS
66733: PPUSH
66734: LD_VAR 0 9
66738: PUSH
66739: LD_VAR 0 3
66743: ARRAY
66744: PPUSH
66745: CALL_OW 2
66749: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
66750: LD_ADDR_VAR 0 4
66754: PUSH
66755: LD_VAR 0 4
66759: PUSH
66760: LD_VAR 0 9
66764: PUSH
66765: LD_VAR 0 3
66769: ARRAY
66770: DIFF
66771: ST_TO_ADDR
// end ;
66772: GO 66681
66774: POP
66775: POP
// if p then
66776: LD_VAR 0 11
66780: IFFALSE 66805
// result := Replace ( result , 3 , p ) ;
66782: LD_ADDR_VAR 0 2
66786: PUSH
66787: LD_VAR 0 2
66791: PPUSH
66792: LD_INT 3
66794: PPUSH
66795: LD_VAR 0 11
66799: PPUSH
66800: CALL_OW 1
66804: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
66805: LD_VAR 0 4
66809: PUSH
66810: LD_INT 6
66812: GREATER
66813: PUSH
66814: LD_VAR 0 6
66818: PUSH
66819: LD_INT 6
66821: LESS
66822: AND
66823: IFFALSE 67017
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
66825: LD_ADDR_VAR 0 9
66829: PUSH
66830: LD_VAR 0 4
66834: PUSH
66835: LD_VAR 0 8
66839: PUSH
66840: LD_VAR 0 7
66844: UNION
66845: PUSH
66846: LD_VAR 0 6
66850: UNION
66851: DIFF
66852: PPUSH
66853: LD_INT 2
66855: PPUSH
66856: CALL 55076 0 2
66860: ST_TO_ADDR
// p := [ ] ;
66861: LD_ADDR_VAR 0 11
66865: PUSH
66866: EMPTY
66867: ST_TO_ADDR
// if sort then
66868: LD_VAR 0 9
66872: IFFALSE 66988
// for i = 1 to 6 - eng do
66874: LD_ADDR_VAR 0 3
66878: PUSH
66879: DOUBLE
66880: LD_INT 1
66882: DEC
66883: ST_TO_ADDR
66884: LD_INT 6
66886: PUSH
66887: LD_VAR 0 6
66891: MINUS
66892: PUSH
66893: FOR_TO
66894: IFFALSE 66986
// begin if i = sort then
66896: LD_VAR 0 3
66900: PUSH
66901: LD_VAR 0 9
66905: EQUAL
66906: IFFALSE 66910
// break ;
66908: GO 66986
// if GetClass ( i ) = 2 then
66910: LD_VAR 0 3
66914: PPUSH
66915: CALL_OW 257
66919: PUSH
66920: LD_INT 2
66922: EQUAL
66923: IFFALSE 66927
// continue ;
66925: GO 66893
// p := Insert ( p , p + 1 , sort [ i ] ) ;
66927: LD_ADDR_VAR 0 11
66931: PUSH
66932: LD_VAR 0 11
66936: PPUSH
66937: LD_VAR 0 11
66941: PUSH
66942: LD_INT 1
66944: PLUS
66945: PPUSH
66946: LD_VAR 0 9
66950: PUSH
66951: LD_VAR 0 3
66955: ARRAY
66956: PPUSH
66957: CALL_OW 2
66961: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
66962: LD_ADDR_VAR 0 4
66966: PUSH
66967: LD_VAR 0 4
66971: PUSH
66972: LD_VAR 0 9
66976: PUSH
66977: LD_VAR 0 3
66981: ARRAY
66982: DIFF
66983: ST_TO_ADDR
// end ;
66984: GO 66893
66986: POP
66987: POP
// if p then
66988: LD_VAR 0 11
66992: IFFALSE 67017
// result := Replace ( result , 2 , p ) ;
66994: LD_ADDR_VAR 0 2
66998: PUSH
66999: LD_VAR 0 2
67003: PPUSH
67004: LD_INT 2
67006: PPUSH
67007: LD_VAR 0 11
67011: PPUSH
67012: CALL_OW 1
67016: ST_TO_ADDR
// end ; exit ;
67017: GO 68405
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
67019: LD_EXP 77
67023: PUSH
67024: LD_EXP 76
67028: PUSH
67029: LD_VAR 0 1
67033: ARRAY
67034: ARRAY
67035: NOT
67036: PUSH
67037: LD_EXP 50
67041: PUSH
67042: LD_VAR 0 1
67046: ARRAY
67047: PPUSH
67048: LD_INT 30
67050: PUSH
67051: LD_INT 3
67053: PUSH
67054: EMPTY
67055: LIST
67056: LIST
67057: PPUSH
67058: CALL_OW 72
67062: AND
67063: PUSH
67064: LD_EXP 55
67068: PUSH
67069: LD_VAR 0 1
67073: ARRAY
67074: AND
67075: IFFALSE 67683
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
67077: LD_ADDR_EXP 92
67081: PUSH
67082: LD_EXP 92
67086: PPUSH
67087: LD_VAR 0 1
67091: PPUSH
67092: LD_INT 5
67094: PPUSH
67095: CALL_OW 1
67099: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
67100: LD_ADDR_VAR 0 2
67104: PUSH
67105: LD_INT 0
67107: PUSH
67108: LD_INT 0
67110: PUSH
67111: LD_INT 0
67113: PUSH
67114: LD_INT 0
67116: PUSH
67117: EMPTY
67118: LIST
67119: LIST
67120: LIST
67121: LIST
67122: ST_TO_ADDR
// if sci > 1 then
67123: LD_VAR 0 8
67127: PUSH
67128: LD_INT 1
67130: GREATER
67131: IFFALSE 67159
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
67133: LD_ADDR_VAR 0 4
67137: PUSH
67138: LD_VAR 0 4
67142: PUSH
67143: LD_VAR 0 8
67147: PUSH
67148: LD_VAR 0 8
67152: PUSH
67153: LD_INT 1
67155: ARRAY
67156: DIFF
67157: DIFF
67158: ST_TO_ADDR
// if tmp and not sci then
67159: LD_VAR 0 4
67163: PUSH
67164: LD_VAR 0 8
67168: NOT
67169: AND
67170: IFFALSE 67239
// begin sort := SortBySkill ( tmp , 4 ) ;
67172: LD_ADDR_VAR 0 9
67176: PUSH
67177: LD_VAR 0 4
67181: PPUSH
67182: LD_INT 4
67184: PPUSH
67185: CALL 55076 0 2
67189: ST_TO_ADDR
// if sort then
67190: LD_VAR 0 9
67194: IFFALSE 67210
// p := sort [ 1 ] ;
67196: LD_ADDR_VAR 0 11
67200: PUSH
67201: LD_VAR 0 9
67205: PUSH
67206: LD_INT 1
67208: ARRAY
67209: ST_TO_ADDR
// if p then
67210: LD_VAR 0 11
67214: IFFALSE 67239
// result := Replace ( result , 4 , p ) ;
67216: LD_ADDR_VAR 0 2
67220: PUSH
67221: LD_VAR 0 2
67225: PPUSH
67226: LD_INT 4
67228: PPUSH
67229: LD_VAR 0 11
67233: PPUSH
67234: CALL_OW 1
67238: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
67239: LD_ADDR_VAR 0 4
67243: PUSH
67244: LD_VAR 0 4
67248: PUSH
67249: LD_VAR 0 7
67253: DIFF
67254: ST_TO_ADDR
// if tmp and mech < 6 then
67255: LD_VAR 0 4
67259: PUSH
67260: LD_VAR 0 7
67264: PUSH
67265: LD_INT 6
67267: LESS
67268: AND
67269: IFFALSE 67457
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
67271: LD_ADDR_VAR 0 9
67275: PUSH
67276: LD_VAR 0 4
67280: PUSH
67281: LD_VAR 0 8
67285: PUSH
67286: LD_VAR 0 7
67290: UNION
67291: DIFF
67292: PPUSH
67293: LD_INT 3
67295: PPUSH
67296: CALL 55076 0 2
67300: ST_TO_ADDR
// p := [ ] ;
67301: LD_ADDR_VAR 0 11
67305: PUSH
67306: EMPTY
67307: ST_TO_ADDR
// if sort then
67308: LD_VAR 0 9
67312: IFFALSE 67428
// for i = 1 to 6 - mech do
67314: LD_ADDR_VAR 0 3
67318: PUSH
67319: DOUBLE
67320: LD_INT 1
67322: DEC
67323: ST_TO_ADDR
67324: LD_INT 6
67326: PUSH
67327: LD_VAR 0 7
67331: MINUS
67332: PUSH
67333: FOR_TO
67334: IFFALSE 67426
// begin if i = sort then
67336: LD_VAR 0 3
67340: PUSH
67341: LD_VAR 0 9
67345: EQUAL
67346: IFFALSE 67350
// break ;
67348: GO 67426
// if GetClass ( i ) = 3 then
67350: LD_VAR 0 3
67354: PPUSH
67355: CALL_OW 257
67359: PUSH
67360: LD_INT 3
67362: EQUAL
67363: IFFALSE 67367
// continue ;
67365: GO 67333
// p := Insert ( p , p + 1 , sort [ i ] ) ;
67367: LD_ADDR_VAR 0 11
67371: PUSH
67372: LD_VAR 0 11
67376: PPUSH
67377: LD_VAR 0 11
67381: PUSH
67382: LD_INT 1
67384: PLUS
67385: PPUSH
67386: LD_VAR 0 9
67390: PUSH
67391: LD_VAR 0 3
67395: ARRAY
67396: PPUSH
67397: CALL_OW 2
67401: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
67402: LD_ADDR_VAR 0 4
67406: PUSH
67407: LD_VAR 0 4
67411: PUSH
67412: LD_VAR 0 9
67416: PUSH
67417: LD_VAR 0 3
67421: ARRAY
67422: DIFF
67423: ST_TO_ADDR
// end ;
67424: GO 67333
67426: POP
67427: POP
// if p then
67428: LD_VAR 0 11
67432: IFFALSE 67457
// result := Replace ( result , 3 , p ) ;
67434: LD_ADDR_VAR 0 2
67438: PUSH
67439: LD_VAR 0 2
67443: PPUSH
67444: LD_INT 3
67446: PPUSH
67447: LD_VAR 0 11
67451: PPUSH
67452: CALL_OW 1
67456: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
67457: LD_ADDR_VAR 0 4
67461: PUSH
67462: LD_VAR 0 4
67466: PUSH
67467: LD_VAR 0 6
67471: DIFF
67472: ST_TO_ADDR
// if tmp and eng < 6 then
67473: LD_VAR 0 4
67477: PUSH
67478: LD_VAR 0 6
67482: PUSH
67483: LD_INT 6
67485: LESS
67486: AND
67487: IFFALSE 67681
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
67489: LD_ADDR_VAR 0 9
67493: PUSH
67494: LD_VAR 0 4
67498: PUSH
67499: LD_VAR 0 8
67503: PUSH
67504: LD_VAR 0 7
67508: UNION
67509: PUSH
67510: LD_VAR 0 6
67514: UNION
67515: DIFF
67516: PPUSH
67517: LD_INT 2
67519: PPUSH
67520: CALL 55076 0 2
67524: ST_TO_ADDR
// p := [ ] ;
67525: LD_ADDR_VAR 0 11
67529: PUSH
67530: EMPTY
67531: ST_TO_ADDR
// if sort then
67532: LD_VAR 0 9
67536: IFFALSE 67652
// for i = 1 to 6 - eng do
67538: LD_ADDR_VAR 0 3
67542: PUSH
67543: DOUBLE
67544: LD_INT 1
67546: DEC
67547: ST_TO_ADDR
67548: LD_INT 6
67550: PUSH
67551: LD_VAR 0 6
67555: MINUS
67556: PUSH
67557: FOR_TO
67558: IFFALSE 67650
// begin if i = sort then
67560: LD_VAR 0 3
67564: PUSH
67565: LD_VAR 0 9
67569: EQUAL
67570: IFFALSE 67574
// break ;
67572: GO 67650
// if GetClass ( i ) = 2 then
67574: LD_VAR 0 3
67578: PPUSH
67579: CALL_OW 257
67583: PUSH
67584: LD_INT 2
67586: EQUAL
67587: IFFALSE 67591
// continue ;
67589: GO 67557
// p := Insert ( p , p + 1 , sort [ i ] ) ;
67591: LD_ADDR_VAR 0 11
67595: PUSH
67596: LD_VAR 0 11
67600: PPUSH
67601: LD_VAR 0 11
67605: PUSH
67606: LD_INT 1
67608: PLUS
67609: PPUSH
67610: LD_VAR 0 9
67614: PUSH
67615: LD_VAR 0 3
67619: ARRAY
67620: PPUSH
67621: CALL_OW 2
67625: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
67626: LD_ADDR_VAR 0 4
67630: PUSH
67631: LD_VAR 0 4
67635: PUSH
67636: LD_VAR 0 9
67640: PUSH
67641: LD_VAR 0 3
67645: ARRAY
67646: DIFF
67647: ST_TO_ADDR
// end ;
67648: GO 67557
67650: POP
67651: POP
// if p then
67652: LD_VAR 0 11
67656: IFFALSE 67681
// result := Replace ( result , 2 , p ) ;
67658: LD_ADDR_VAR 0 2
67662: PUSH
67663: LD_VAR 0 2
67667: PPUSH
67668: LD_INT 2
67670: PPUSH
67671: LD_VAR 0 11
67675: PPUSH
67676: CALL_OW 1
67680: ST_TO_ADDR
// end ; exit ;
67681: GO 68405
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
67683: LD_EXP 77
67687: PUSH
67688: LD_EXP 76
67692: PUSH
67693: LD_VAR 0 1
67697: ARRAY
67698: ARRAY
67699: NOT
67700: PUSH
67701: LD_EXP 50
67705: PUSH
67706: LD_VAR 0 1
67710: ARRAY
67711: PPUSH
67712: LD_INT 30
67714: PUSH
67715: LD_INT 3
67717: PUSH
67718: EMPTY
67719: LIST
67720: LIST
67721: PPUSH
67722: CALL_OW 72
67726: AND
67727: PUSH
67728: LD_EXP 55
67732: PUSH
67733: LD_VAR 0 1
67737: ARRAY
67738: NOT
67739: AND
67740: IFFALSE 68405
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
67742: LD_ADDR_EXP 92
67746: PUSH
67747: LD_EXP 92
67751: PPUSH
67752: LD_VAR 0 1
67756: PPUSH
67757: LD_INT 6
67759: PPUSH
67760: CALL_OW 1
67764: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
67765: LD_ADDR_VAR 0 2
67769: PUSH
67770: LD_INT 0
67772: PUSH
67773: LD_INT 0
67775: PUSH
67776: LD_INT 0
67778: PUSH
67779: LD_INT 0
67781: PUSH
67782: EMPTY
67783: LIST
67784: LIST
67785: LIST
67786: LIST
67787: ST_TO_ADDR
// if sci >= 1 then
67788: LD_VAR 0 8
67792: PUSH
67793: LD_INT 1
67795: GREATEREQUAL
67796: IFFALSE 67818
// tmp := tmp diff sci [ 1 ] ;
67798: LD_ADDR_VAR 0 4
67802: PUSH
67803: LD_VAR 0 4
67807: PUSH
67808: LD_VAR 0 8
67812: PUSH
67813: LD_INT 1
67815: ARRAY
67816: DIFF
67817: ST_TO_ADDR
// if tmp and not sci then
67818: LD_VAR 0 4
67822: PUSH
67823: LD_VAR 0 8
67827: NOT
67828: AND
67829: IFFALSE 67898
// begin sort := SortBySkill ( tmp , 4 ) ;
67831: LD_ADDR_VAR 0 9
67835: PUSH
67836: LD_VAR 0 4
67840: PPUSH
67841: LD_INT 4
67843: PPUSH
67844: CALL 55076 0 2
67848: ST_TO_ADDR
// if sort then
67849: LD_VAR 0 9
67853: IFFALSE 67869
// p := sort [ 1 ] ;
67855: LD_ADDR_VAR 0 11
67859: PUSH
67860: LD_VAR 0 9
67864: PUSH
67865: LD_INT 1
67867: ARRAY
67868: ST_TO_ADDR
// if p then
67869: LD_VAR 0 11
67873: IFFALSE 67898
// result := Replace ( result , 4 , p ) ;
67875: LD_ADDR_VAR 0 2
67879: PUSH
67880: LD_VAR 0 2
67884: PPUSH
67885: LD_INT 4
67887: PPUSH
67888: LD_VAR 0 11
67892: PPUSH
67893: CALL_OW 1
67897: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
67898: LD_ADDR_VAR 0 4
67902: PUSH
67903: LD_VAR 0 4
67907: PUSH
67908: LD_VAR 0 7
67912: DIFF
67913: ST_TO_ADDR
// if tmp and mech < 6 then
67914: LD_VAR 0 4
67918: PUSH
67919: LD_VAR 0 7
67923: PUSH
67924: LD_INT 6
67926: LESS
67927: AND
67928: IFFALSE 68110
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
67930: LD_ADDR_VAR 0 9
67934: PUSH
67935: LD_VAR 0 4
67939: PUSH
67940: LD_VAR 0 7
67944: DIFF
67945: PPUSH
67946: LD_INT 3
67948: PPUSH
67949: CALL 55076 0 2
67953: ST_TO_ADDR
// p := [ ] ;
67954: LD_ADDR_VAR 0 11
67958: PUSH
67959: EMPTY
67960: ST_TO_ADDR
// if sort then
67961: LD_VAR 0 9
67965: IFFALSE 68081
// for i = 1 to 6 - mech do
67967: LD_ADDR_VAR 0 3
67971: PUSH
67972: DOUBLE
67973: LD_INT 1
67975: DEC
67976: ST_TO_ADDR
67977: LD_INT 6
67979: PUSH
67980: LD_VAR 0 7
67984: MINUS
67985: PUSH
67986: FOR_TO
67987: IFFALSE 68079
// begin if i = sort then
67989: LD_VAR 0 3
67993: PUSH
67994: LD_VAR 0 9
67998: EQUAL
67999: IFFALSE 68003
// break ;
68001: GO 68079
// if GetClass ( i ) = 3 then
68003: LD_VAR 0 3
68007: PPUSH
68008: CALL_OW 257
68012: PUSH
68013: LD_INT 3
68015: EQUAL
68016: IFFALSE 68020
// continue ;
68018: GO 67986
// p := Insert ( p , p + 1 , sort [ i ] ) ;
68020: LD_ADDR_VAR 0 11
68024: PUSH
68025: LD_VAR 0 11
68029: PPUSH
68030: LD_VAR 0 11
68034: PUSH
68035: LD_INT 1
68037: PLUS
68038: PPUSH
68039: LD_VAR 0 9
68043: PUSH
68044: LD_VAR 0 3
68048: ARRAY
68049: PPUSH
68050: CALL_OW 2
68054: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
68055: LD_ADDR_VAR 0 4
68059: PUSH
68060: LD_VAR 0 4
68064: PUSH
68065: LD_VAR 0 9
68069: PUSH
68070: LD_VAR 0 3
68074: ARRAY
68075: DIFF
68076: ST_TO_ADDR
// end ;
68077: GO 67986
68079: POP
68080: POP
// if p then
68081: LD_VAR 0 11
68085: IFFALSE 68110
// result := Replace ( result , 3 , p ) ;
68087: LD_ADDR_VAR 0 2
68091: PUSH
68092: LD_VAR 0 2
68096: PPUSH
68097: LD_INT 3
68099: PPUSH
68100: LD_VAR 0 11
68104: PPUSH
68105: CALL_OW 1
68109: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
68110: LD_ADDR_VAR 0 4
68114: PUSH
68115: LD_VAR 0 4
68119: PUSH
68120: LD_VAR 0 6
68124: DIFF
68125: ST_TO_ADDR
// if tmp and eng < 4 then
68126: LD_VAR 0 4
68130: PUSH
68131: LD_VAR 0 6
68135: PUSH
68136: LD_INT 4
68138: LESS
68139: AND
68140: IFFALSE 68330
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
68142: LD_ADDR_VAR 0 9
68146: PUSH
68147: LD_VAR 0 4
68151: PUSH
68152: LD_VAR 0 7
68156: PUSH
68157: LD_VAR 0 6
68161: UNION
68162: DIFF
68163: PPUSH
68164: LD_INT 2
68166: PPUSH
68167: CALL 55076 0 2
68171: ST_TO_ADDR
// p := [ ] ;
68172: LD_ADDR_VAR 0 11
68176: PUSH
68177: EMPTY
68178: ST_TO_ADDR
// if sort then
68179: LD_VAR 0 9
68183: IFFALSE 68299
// for i = 1 to 4 - eng do
68185: LD_ADDR_VAR 0 3
68189: PUSH
68190: DOUBLE
68191: LD_INT 1
68193: DEC
68194: ST_TO_ADDR
68195: LD_INT 4
68197: PUSH
68198: LD_VAR 0 6
68202: MINUS
68203: PUSH
68204: FOR_TO
68205: IFFALSE 68297
// begin if i = sort then
68207: LD_VAR 0 3
68211: PUSH
68212: LD_VAR 0 9
68216: EQUAL
68217: IFFALSE 68221
// break ;
68219: GO 68297
// if GetClass ( i ) = 2 then
68221: LD_VAR 0 3
68225: PPUSH
68226: CALL_OW 257
68230: PUSH
68231: LD_INT 2
68233: EQUAL
68234: IFFALSE 68238
// continue ;
68236: GO 68204
// p := Insert ( p , p + 1 , sort [ i ] ) ;
68238: LD_ADDR_VAR 0 11
68242: PUSH
68243: LD_VAR 0 11
68247: PPUSH
68248: LD_VAR 0 11
68252: PUSH
68253: LD_INT 1
68255: PLUS
68256: PPUSH
68257: LD_VAR 0 9
68261: PUSH
68262: LD_VAR 0 3
68266: ARRAY
68267: PPUSH
68268: CALL_OW 2
68272: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
68273: LD_ADDR_VAR 0 4
68277: PUSH
68278: LD_VAR 0 4
68282: PUSH
68283: LD_VAR 0 9
68287: PUSH
68288: LD_VAR 0 3
68292: ARRAY
68293: DIFF
68294: ST_TO_ADDR
// end ;
68295: GO 68204
68297: POP
68298: POP
// if p then
68299: LD_VAR 0 11
68303: IFFALSE 68328
// result := Replace ( result , 2 , p ) ;
68305: LD_ADDR_VAR 0 2
68309: PUSH
68310: LD_VAR 0 2
68314: PPUSH
68315: LD_INT 2
68317: PPUSH
68318: LD_VAR 0 11
68322: PPUSH
68323: CALL_OW 1
68327: ST_TO_ADDR
// end else
68328: GO 68374
// for i = eng downto 5 do
68330: LD_ADDR_VAR 0 3
68334: PUSH
68335: DOUBLE
68336: LD_VAR 0 6
68340: INC
68341: ST_TO_ADDR
68342: LD_INT 5
68344: PUSH
68345: FOR_DOWNTO
68346: IFFALSE 68372
// tmp := tmp union eng [ i ] ;
68348: LD_ADDR_VAR 0 4
68352: PUSH
68353: LD_VAR 0 4
68357: PUSH
68358: LD_VAR 0 6
68362: PUSH
68363: LD_VAR 0 3
68367: ARRAY
68368: UNION
68369: ST_TO_ADDR
68370: GO 68345
68372: POP
68373: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
68374: LD_ADDR_VAR 0 2
68378: PUSH
68379: LD_VAR 0 2
68383: PPUSH
68384: LD_INT 1
68386: PPUSH
68387: LD_VAR 0 4
68391: PUSH
68392: LD_VAR 0 5
68396: DIFF
68397: PPUSH
68398: CALL_OW 1
68402: ST_TO_ADDR
// exit ;
68403: GO 68405
// end ; end ;
68405: LD_VAR 0 2
68409: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
68410: LD_INT 0
68412: PPUSH
68413: PPUSH
68414: PPUSH
// if not mc_bases then
68415: LD_EXP 50
68419: NOT
68420: IFFALSE 68424
// exit ;
68422: GO 68566
// for i = 1 to mc_bases do
68424: LD_ADDR_VAR 0 2
68428: PUSH
68429: DOUBLE
68430: LD_INT 1
68432: DEC
68433: ST_TO_ADDR
68434: LD_EXP 50
68438: PUSH
68439: FOR_TO
68440: IFFALSE 68557
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
68442: LD_ADDR_VAR 0 3
68446: PUSH
68447: LD_EXP 50
68451: PUSH
68452: LD_VAR 0 2
68456: ARRAY
68457: PPUSH
68458: LD_INT 21
68460: PUSH
68461: LD_INT 3
68463: PUSH
68464: EMPTY
68465: LIST
68466: LIST
68467: PUSH
68468: LD_INT 3
68470: PUSH
68471: LD_INT 2
68473: PUSH
68474: LD_INT 30
68476: PUSH
68477: LD_INT 29
68479: PUSH
68480: EMPTY
68481: LIST
68482: LIST
68483: PUSH
68484: LD_INT 30
68486: PUSH
68487: LD_INT 30
68489: PUSH
68490: EMPTY
68491: LIST
68492: LIST
68493: PUSH
68494: EMPTY
68495: LIST
68496: LIST
68497: LIST
68498: PUSH
68499: EMPTY
68500: LIST
68501: LIST
68502: PUSH
68503: LD_INT 3
68505: PUSH
68506: LD_INT 24
68508: PUSH
68509: LD_INT 1000
68511: PUSH
68512: EMPTY
68513: LIST
68514: LIST
68515: PUSH
68516: EMPTY
68517: LIST
68518: LIST
68519: PUSH
68520: EMPTY
68521: LIST
68522: LIST
68523: LIST
68524: PPUSH
68525: CALL_OW 72
68529: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
68530: LD_ADDR_EXP 51
68534: PUSH
68535: LD_EXP 51
68539: PPUSH
68540: LD_VAR 0 2
68544: PPUSH
68545: LD_VAR 0 3
68549: PPUSH
68550: CALL_OW 1
68554: ST_TO_ADDR
// end ;
68555: GO 68439
68557: POP
68558: POP
// RaiseSailEvent ( 101 ) ;
68559: LD_INT 101
68561: PPUSH
68562: CALL_OW 427
// end ;
68566: LD_VAR 0 1
68570: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
68571: LD_INT 0
68573: PPUSH
68574: PPUSH
68575: PPUSH
68576: PPUSH
68577: PPUSH
68578: PPUSH
68579: PPUSH
// if not mc_bases then
68580: LD_EXP 50
68584: NOT
68585: IFFALSE 68589
// exit ;
68587: GO 69151
// for i = 1 to mc_bases do
68589: LD_ADDR_VAR 0 2
68593: PUSH
68594: DOUBLE
68595: LD_INT 1
68597: DEC
68598: ST_TO_ADDR
68599: LD_EXP 50
68603: PUSH
68604: FOR_TO
68605: IFFALSE 69142
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 1000 ] ] ] ] ) ;
68607: LD_ADDR_VAR 0 5
68611: PUSH
68612: LD_EXP 50
68616: PUSH
68617: LD_VAR 0 2
68621: ARRAY
68622: PUSH
68623: LD_EXP 79
68627: PUSH
68628: LD_VAR 0 2
68632: ARRAY
68633: UNION
68634: PPUSH
68635: LD_INT 21
68637: PUSH
68638: LD_INT 1
68640: PUSH
68641: EMPTY
68642: LIST
68643: LIST
68644: PUSH
68645: LD_INT 1
68647: PUSH
68648: LD_INT 3
68650: PUSH
68651: LD_INT 54
68653: PUSH
68654: EMPTY
68655: LIST
68656: PUSH
68657: EMPTY
68658: LIST
68659: LIST
68660: PUSH
68661: LD_INT 3
68663: PUSH
68664: LD_INT 24
68666: PUSH
68667: LD_INT 1000
68669: PUSH
68670: EMPTY
68671: LIST
68672: LIST
68673: PUSH
68674: EMPTY
68675: LIST
68676: LIST
68677: PUSH
68678: EMPTY
68679: LIST
68680: LIST
68681: LIST
68682: PUSH
68683: EMPTY
68684: LIST
68685: LIST
68686: PPUSH
68687: CALL_OW 72
68691: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
68692: LD_ADDR_VAR 0 6
68696: PUSH
68697: LD_EXP 50
68701: PUSH
68702: LD_VAR 0 2
68706: ARRAY
68707: PPUSH
68708: LD_INT 21
68710: PUSH
68711: LD_INT 1
68713: PUSH
68714: EMPTY
68715: LIST
68716: LIST
68717: PUSH
68718: LD_INT 1
68720: PUSH
68721: LD_INT 3
68723: PUSH
68724: LD_INT 54
68726: PUSH
68727: EMPTY
68728: LIST
68729: PUSH
68730: EMPTY
68731: LIST
68732: LIST
68733: PUSH
68734: LD_INT 3
68736: PUSH
68737: LD_INT 24
68739: PUSH
68740: LD_INT 250
68742: PUSH
68743: EMPTY
68744: LIST
68745: LIST
68746: PUSH
68747: EMPTY
68748: LIST
68749: LIST
68750: PUSH
68751: EMPTY
68752: LIST
68753: LIST
68754: LIST
68755: PUSH
68756: EMPTY
68757: LIST
68758: LIST
68759: PPUSH
68760: CALL_OW 72
68764: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
68765: LD_ADDR_VAR 0 7
68769: PUSH
68770: LD_VAR 0 5
68774: PUSH
68775: LD_VAR 0 6
68779: DIFF
68780: ST_TO_ADDR
// if not need_heal_1 then
68781: LD_VAR 0 6
68785: NOT
68786: IFFALSE 68819
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
68788: LD_ADDR_EXP 53
68792: PUSH
68793: LD_EXP 53
68797: PPUSH
68798: LD_VAR 0 2
68802: PUSH
68803: LD_INT 1
68805: PUSH
68806: EMPTY
68807: LIST
68808: LIST
68809: PPUSH
68810: EMPTY
68811: PPUSH
68812: CALL 24872 0 3
68816: ST_TO_ADDR
68817: GO 68889
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
68819: LD_ADDR_EXP 53
68823: PUSH
68824: LD_EXP 53
68828: PPUSH
68829: LD_VAR 0 2
68833: PUSH
68834: LD_INT 1
68836: PUSH
68837: EMPTY
68838: LIST
68839: LIST
68840: PPUSH
68841: LD_EXP 53
68845: PUSH
68846: LD_VAR 0 2
68850: ARRAY
68851: PUSH
68852: LD_INT 1
68854: ARRAY
68855: PPUSH
68856: LD_INT 3
68858: PUSH
68859: LD_INT 24
68861: PUSH
68862: LD_INT 1000
68864: PUSH
68865: EMPTY
68866: LIST
68867: LIST
68868: PUSH
68869: EMPTY
68870: LIST
68871: LIST
68872: PPUSH
68873: CALL_OW 72
68877: PUSH
68878: LD_VAR 0 6
68882: UNION
68883: PPUSH
68884: CALL 24872 0 3
68888: ST_TO_ADDR
// if not need_heal_2 then
68889: LD_VAR 0 7
68893: NOT
68894: IFFALSE 68927
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
68896: LD_ADDR_EXP 53
68900: PUSH
68901: LD_EXP 53
68905: PPUSH
68906: LD_VAR 0 2
68910: PUSH
68911: LD_INT 2
68913: PUSH
68914: EMPTY
68915: LIST
68916: LIST
68917: PPUSH
68918: EMPTY
68919: PPUSH
68920: CALL 24872 0 3
68924: ST_TO_ADDR
68925: GO 68959
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
68927: LD_ADDR_EXP 53
68931: PUSH
68932: LD_EXP 53
68936: PPUSH
68937: LD_VAR 0 2
68941: PUSH
68942: LD_INT 2
68944: PUSH
68945: EMPTY
68946: LIST
68947: LIST
68948: PPUSH
68949: LD_VAR 0 7
68953: PPUSH
68954: CALL 24872 0 3
68958: ST_TO_ADDR
// if need_heal_2 then
68959: LD_VAR 0 7
68963: IFFALSE 69124
// for j in need_heal_2 do
68965: LD_ADDR_VAR 0 3
68969: PUSH
68970: LD_VAR 0 7
68974: PUSH
68975: FOR_IN
68976: IFFALSE 69122
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
68978: LD_ADDR_VAR 0 5
68982: PUSH
68983: LD_EXP 50
68987: PUSH
68988: LD_VAR 0 2
68992: ARRAY
68993: PPUSH
68994: LD_INT 2
68996: PUSH
68997: LD_INT 30
68999: PUSH
69000: LD_INT 6
69002: PUSH
69003: EMPTY
69004: LIST
69005: LIST
69006: PUSH
69007: LD_INT 30
69009: PUSH
69010: LD_INT 7
69012: PUSH
69013: EMPTY
69014: LIST
69015: LIST
69016: PUSH
69017: LD_INT 30
69019: PUSH
69020: LD_INT 8
69022: PUSH
69023: EMPTY
69024: LIST
69025: LIST
69026: PUSH
69027: LD_INT 30
69029: PUSH
69030: LD_INT 0
69032: PUSH
69033: EMPTY
69034: LIST
69035: LIST
69036: PUSH
69037: LD_INT 30
69039: PUSH
69040: LD_INT 1
69042: PUSH
69043: EMPTY
69044: LIST
69045: LIST
69046: PUSH
69047: EMPTY
69048: LIST
69049: LIST
69050: LIST
69051: LIST
69052: LIST
69053: LIST
69054: PPUSH
69055: CALL_OW 72
69059: ST_TO_ADDR
// if tmp then
69060: LD_VAR 0 5
69064: IFFALSE 69120
// begin k := NearestUnitToUnit ( tmp , j ) ;
69066: LD_ADDR_VAR 0 4
69070: PUSH
69071: LD_VAR 0 5
69075: PPUSH
69076: LD_VAR 0 3
69080: PPUSH
69081: CALL_OW 74
69085: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 5 then
69086: LD_VAR 0 3
69090: PPUSH
69091: LD_VAR 0 4
69095: PPUSH
69096: CALL_OW 296
69100: PUSH
69101: LD_INT 5
69103: GREATER
69104: IFFALSE 69120
// ComMoveToNearbyEntrance ( j , k ) ;
69106: LD_VAR 0 3
69110: PPUSH
69111: LD_VAR 0 4
69115: PPUSH
69116: CALL 57434 0 2
// end ; end ;
69120: GO 68975
69122: POP
69123: POP
// if not need_heal_1 and not need_heal_2 then
69124: LD_VAR 0 6
69128: NOT
69129: PUSH
69130: LD_VAR 0 7
69134: NOT
69135: AND
69136: IFFALSE 69140
// continue ;
69138: GO 68604
// end ;
69140: GO 68604
69142: POP
69143: POP
// RaiseSailEvent ( 102 ) ;
69144: LD_INT 102
69146: PPUSH
69147: CALL_OW 427
// end ;
69151: LD_VAR 0 1
69155: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp , cranes , to_repair_tmp , to_repair ; begin
69156: LD_INT 0
69158: PPUSH
69159: PPUSH
69160: PPUSH
69161: PPUSH
69162: PPUSH
69163: PPUSH
69164: PPUSH
69165: PPUSH
// if not mc_bases then
69166: LD_EXP 50
69170: NOT
69171: IFFALSE 69175
// exit ;
69173: GO 70058
// for i = 1 to mc_bases do
69175: LD_ADDR_VAR 0 2
69179: PUSH
69180: DOUBLE
69181: LD_INT 1
69183: DEC
69184: ST_TO_ADDR
69185: LD_EXP 50
69189: PUSH
69190: FOR_TO
69191: IFFALSE 70056
// begin if not mc_building_need_repair [ i ] then
69193: LD_EXP 51
69197: PUSH
69198: LD_VAR 0 2
69202: ARRAY
69203: NOT
69204: IFFALSE 69391
// begin cranes := UnitFilter ( mc_vehicles [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , ar_crane ] ] ] ) ;
69206: LD_ADDR_VAR 0 6
69210: PUSH
69211: LD_EXP 69
69215: PUSH
69216: LD_VAR 0 2
69220: ARRAY
69221: PPUSH
69222: LD_INT 3
69224: PUSH
69225: LD_INT 24
69227: PUSH
69228: LD_INT 1000
69230: PUSH
69231: EMPTY
69232: LIST
69233: LIST
69234: PUSH
69235: EMPTY
69236: LIST
69237: LIST
69238: PUSH
69239: LD_INT 2
69241: PUSH
69242: LD_INT 34
69244: PUSH
69245: LD_INT 13
69247: PUSH
69248: EMPTY
69249: LIST
69250: LIST
69251: PUSH
69252: LD_INT 34
69254: PUSH
69255: LD_INT 52
69257: PUSH
69258: EMPTY
69259: LIST
69260: LIST
69261: PUSH
69262: LD_INT 34
69264: PUSH
69265: LD_EXP 35
69269: PUSH
69270: EMPTY
69271: LIST
69272: LIST
69273: PUSH
69274: EMPTY
69275: LIST
69276: LIST
69277: LIST
69278: LIST
69279: PUSH
69280: EMPTY
69281: LIST
69282: LIST
69283: PPUSH
69284: CALL_OW 72
69288: ST_TO_ADDR
// if cranes then
69289: LD_VAR 0 6
69293: IFFALSE 69355
// for j in cranes do
69295: LD_ADDR_VAR 0 3
69299: PUSH
69300: LD_VAR 0 6
69304: PUSH
69305: FOR_IN
69306: IFFALSE 69353
// if not IsInArea ( j , mc_parking [ i ] ) then
69308: LD_VAR 0 3
69312: PPUSH
69313: LD_EXP 74
69317: PUSH
69318: LD_VAR 0 2
69322: ARRAY
69323: PPUSH
69324: CALL_OW 308
69328: NOT
69329: IFFALSE 69351
// ComMoveToArea ( j , mc_parking [ i ] ) ;
69331: LD_VAR 0 3
69335: PPUSH
69336: LD_EXP 74
69340: PUSH
69341: LD_VAR 0 2
69345: ARRAY
69346: PPUSH
69347: CALL_OW 113
69351: GO 69305
69353: POP
69354: POP
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
69355: LD_ADDR_EXP 52
69359: PUSH
69360: LD_EXP 52
69364: PPUSH
69365: LD_VAR 0 2
69369: PPUSH
69370: EMPTY
69371: PPUSH
69372: CALL_OW 1
69376: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
69377: LD_VAR 0 2
69381: PPUSH
69382: LD_INT 101
69384: PPUSH
69385: CALL 64243 0 2
// continue ;
69389: GO 69190
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
69391: LD_ADDR_EXP 56
69395: PUSH
69396: LD_EXP 56
69400: PPUSH
69401: LD_VAR 0 2
69405: PPUSH
69406: EMPTY
69407: PPUSH
69408: CALL_OW 1
69412: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
69413: LD_VAR 0 2
69417: PPUSH
69418: LD_INT 103
69420: PPUSH
69421: CALL 64243 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
69425: LD_ADDR_VAR 0 5
69429: PUSH
69430: LD_EXP 50
69434: PUSH
69435: LD_VAR 0 2
69439: ARRAY
69440: PUSH
69441: LD_EXP 79
69445: PUSH
69446: LD_VAR 0 2
69450: ARRAY
69451: UNION
69452: PPUSH
69453: LD_INT 2
69455: PUSH
69456: LD_INT 25
69458: PUSH
69459: LD_INT 2
69461: PUSH
69462: EMPTY
69463: LIST
69464: LIST
69465: PUSH
69466: LD_INT 25
69468: PUSH
69469: LD_INT 16
69471: PUSH
69472: EMPTY
69473: LIST
69474: LIST
69475: PUSH
69476: EMPTY
69477: LIST
69478: LIST
69479: LIST
69480: PUSH
69481: EMPTY
69482: LIST
69483: PPUSH
69484: CALL_OW 72
69488: ST_TO_ADDR
// if mc_need_heal [ i ] then
69489: LD_EXP 53
69493: PUSH
69494: LD_VAR 0 2
69498: ARRAY
69499: IFFALSE 69543
// tmp := tmp diff ( mc_need_heal [ i ] [ 1 ] union mc_need_heal [ i ] [ 2 ] ) ;
69501: LD_ADDR_VAR 0 5
69505: PUSH
69506: LD_VAR 0 5
69510: PUSH
69511: LD_EXP 53
69515: PUSH
69516: LD_VAR 0 2
69520: ARRAY
69521: PUSH
69522: LD_INT 1
69524: ARRAY
69525: PUSH
69526: LD_EXP 53
69530: PUSH
69531: LD_VAR 0 2
69535: ARRAY
69536: PUSH
69537: LD_INT 2
69539: ARRAY
69540: UNION
69541: DIFF
69542: ST_TO_ADDR
// cranes := UnitFilter ( mc_vehicles [ i ] , [ f_or , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , ar_crane ] ] ) ;
69543: LD_ADDR_VAR 0 6
69547: PUSH
69548: LD_EXP 69
69552: PUSH
69553: LD_VAR 0 2
69557: ARRAY
69558: PPUSH
69559: LD_INT 2
69561: PUSH
69562: LD_INT 34
69564: PUSH
69565: LD_INT 13
69567: PUSH
69568: EMPTY
69569: LIST
69570: LIST
69571: PUSH
69572: LD_INT 34
69574: PUSH
69575: LD_INT 52
69577: PUSH
69578: EMPTY
69579: LIST
69580: LIST
69581: PUSH
69582: LD_INT 34
69584: PUSH
69585: LD_EXP 35
69589: PUSH
69590: EMPTY
69591: LIST
69592: LIST
69593: PUSH
69594: EMPTY
69595: LIST
69596: LIST
69597: LIST
69598: LIST
69599: PPUSH
69600: CALL_OW 72
69604: ST_TO_ADDR
// if cranes then
69605: LD_VAR 0 6
69609: IFFALSE 69745
// begin for j in cranes do
69611: LD_ADDR_VAR 0 3
69615: PUSH
69616: LD_VAR 0 6
69620: PUSH
69621: FOR_IN
69622: IFFALSE 69743
// begin if GetLives ( j ) = 1000 and not HasTask ( j ) then
69624: LD_VAR 0 3
69628: PPUSH
69629: CALL_OW 256
69633: PUSH
69634: LD_INT 1000
69636: EQUAL
69637: PUSH
69638: LD_VAR 0 3
69642: PPUSH
69643: CALL_OW 314
69647: NOT
69648: AND
69649: IFFALSE 69683
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) else
69651: LD_VAR 0 3
69655: PPUSH
69656: LD_EXP 51
69660: PUSH
69661: LD_VAR 0 2
69665: ARRAY
69666: PPUSH
69667: LD_VAR 0 3
69671: PPUSH
69672: CALL_OW 74
69676: PPUSH
69677: CALL_OW 130
69681: GO 69741
// if GetLives ( j ) < 500 and not IsInArea ( j , mc_parking [ i ] ) then
69683: LD_VAR 0 3
69687: PPUSH
69688: CALL_OW 256
69692: PUSH
69693: LD_INT 500
69695: LESS
69696: PUSH
69697: LD_VAR 0 3
69701: PPUSH
69702: LD_EXP 74
69706: PUSH
69707: LD_VAR 0 2
69711: ARRAY
69712: PPUSH
69713: CALL_OW 308
69717: NOT
69718: AND
69719: IFFALSE 69741
// ComMoveToArea ( j , mc_parking [ i ] ) ;
69721: LD_VAR 0 3
69725: PPUSH
69726: LD_EXP 74
69730: PUSH
69731: LD_VAR 0 2
69735: ARRAY
69736: PPUSH
69737: CALL_OW 113
// end ;
69741: GO 69621
69743: POP
69744: POP
// end ; if tmp > 3 then
69745: LD_VAR 0 5
69749: PUSH
69750: LD_INT 3
69752: GREATER
69753: IFFALSE 69773
// tmp := ShrinkArray ( tmp , 4 ) ;
69755: LD_ADDR_VAR 0 5
69759: PUSH
69760: LD_VAR 0 5
69764: PPUSH
69765: LD_INT 4
69767: PPUSH
69768: CALL 56882 0 2
69772: ST_TO_ADDR
// if not tmp then
69773: LD_VAR 0 5
69777: NOT
69778: IFFALSE 69782
// continue ;
69780: GO 69190
// for j in tmp do
69782: LD_ADDR_VAR 0 3
69786: PUSH
69787: LD_VAR 0 5
69791: PUSH
69792: FOR_IN
69793: IFFALSE 70052
// begin if IsInUnit ( j ) then
69795: LD_VAR 0 3
69799: PPUSH
69800: CALL_OW 310
69804: IFFALSE 69815
// ComExitBuilding ( j ) ;
69806: LD_VAR 0 3
69810: PPUSH
69811: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
69815: LD_VAR 0 3
69819: PUSH
69820: LD_EXP 52
69824: PUSH
69825: LD_VAR 0 2
69829: ARRAY
69830: IN
69831: NOT
69832: IFFALSE 69890
// begin SetTag ( j , 101 ) ;
69834: LD_VAR 0 3
69838: PPUSH
69839: LD_INT 101
69841: PPUSH
69842: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
69846: LD_ADDR_EXP 52
69850: PUSH
69851: LD_EXP 52
69855: PPUSH
69856: LD_VAR 0 2
69860: PUSH
69861: LD_EXP 52
69865: PUSH
69866: LD_VAR 0 2
69870: ARRAY
69871: PUSH
69872: LD_INT 1
69874: PLUS
69875: PUSH
69876: EMPTY
69877: LIST
69878: LIST
69879: PPUSH
69880: LD_VAR 0 3
69884: PPUSH
69885: CALL 24872 0 3
69889: ST_TO_ADDR
// end ; wait ( 1 ) ;
69890: LD_INT 1
69892: PPUSH
69893: CALL_OW 67
// to_repair_tmp := mc_building_need_repair [ i ] ;
69897: LD_ADDR_VAR 0 7
69901: PUSH
69902: LD_EXP 51
69906: PUSH
69907: LD_VAR 0 2
69911: ARRAY
69912: ST_TO_ADDR
// if mc_scan [ i ] then
69913: LD_EXP 73
69917: PUSH
69918: LD_VAR 0 2
69922: ARRAY
69923: IFFALSE 69985
// to_repair_tmp := UnitFilter ( mc_building_need_repair [ i ] , [ f_not , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_breastwork ] ] ) ;
69925: LD_ADDR_VAR 0 7
69929: PUSH
69930: LD_EXP 51
69934: PUSH
69935: LD_VAR 0 2
69939: ARRAY
69940: PPUSH
69941: LD_INT 3
69943: PUSH
69944: LD_INT 30
69946: PUSH
69947: LD_INT 32
69949: PUSH
69950: EMPTY
69951: LIST
69952: LIST
69953: PUSH
69954: LD_INT 30
69956: PUSH
69957: LD_INT 33
69959: PUSH
69960: EMPTY
69961: LIST
69962: LIST
69963: PUSH
69964: LD_INT 30
69966: PUSH
69967: LD_INT 31
69969: PUSH
69970: EMPTY
69971: LIST
69972: LIST
69973: PUSH
69974: EMPTY
69975: LIST
69976: LIST
69977: LIST
69978: LIST
69979: PPUSH
69980: CALL_OW 72
69984: ST_TO_ADDR
// if not to_repair_tmp then
69985: LD_VAR 0 7
69989: NOT
69990: IFFALSE 69994
// continue ;
69992: GO 69792
// to_repair := NearestUnitToUnit ( to_repair_tmp , j ) ;
69994: LD_ADDR_VAR 0 8
69998: PUSH
69999: LD_VAR 0 7
70003: PPUSH
70004: LD_VAR 0 3
70008: PPUSH
70009: CALL_OW 74
70013: ST_TO_ADDR
// if DangerAtRange ( to_repair , 16 ) [ 4 ] < 10 then
70014: LD_VAR 0 8
70018: PPUSH
70019: LD_INT 16
70021: PPUSH
70022: CALL 27471 0 2
70026: PUSH
70027: LD_INT 4
70029: ARRAY
70030: PUSH
70031: LD_INT 10
70033: LESS
70034: IFFALSE 70050
// ComRepairBuilding ( j , to_repair ) ;
70036: LD_VAR 0 3
70040: PPUSH
70041: LD_VAR 0 8
70045: PPUSH
70046: CALL_OW 130
// end ;
70050: GO 69792
70052: POP
70053: POP
// end ;
70054: GO 69190
70056: POP
70057: POP
// end ;
70058: LD_VAR 0 1
70062: RET
// export function MC_Heal ; var i , j , tmp ; begin
70063: LD_INT 0
70065: PPUSH
70066: PPUSH
70067: PPUSH
70068: PPUSH
// if not mc_bases then
70069: LD_EXP 50
70073: NOT
70074: IFFALSE 70078
// exit ;
70076: GO 70480
// for i = 1 to mc_bases do
70078: LD_ADDR_VAR 0 2
70082: PUSH
70083: DOUBLE
70084: LD_INT 1
70086: DEC
70087: ST_TO_ADDR
70088: LD_EXP 50
70092: PUSH
70093: FOR_TO
70094: IFFALSE 70478
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
70096: LD_EXP 53
70100: PUSH
70101: LD_VAR 0 2
70105: ARRAY
70106: PUSH
70107: LD_INT 1
70109: ARRAY
70110: NOT
70111: PUSH
70112: LD_EXP 53
70116: PUSH
70117: LD_VAR 0 2
70121: ARRAY
70122: PUSH
70123: LD_INT 2
70125: ARRAY
70126: NOT
70127: AND
70128: IFFALSE 70166
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
70130: LD_ADDR_EXP 54
70134: PUSH
70135: LD_EXP 54
70139: PPUSH
70140: LD_VAR 0 2
70144: PPUSH
70145: EMPTY
70146: PPUSH
70147: CALL_OW 1
70151: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
70152: LD_VAR 0 2
70156: PPUSH
70157: LD_INT 102
70159: PPUSH
70160: CALL 64243 0 2
// continue ;
70164: GO 70093
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
70166: LD_ADDR_VAR 0 4
70170: PUSH
70171: LD_EXP 50
70175: PUSH
70176: LD_VAR 0 2
70180: ARRAY
70181: PPUSH
70182: LD_INT 25
70184: PUSH
70185: LD_INT 4
70187: PUSH
70188: EMPTY
70189: LIST
70190: LIST
70191: PPUSH
70192: CALL_OW 72
70196: ST_TO_ADDR
// if not tmp then
70197: LD_VAR 0 4
70201: NOT
70202: IFFALSE 70206
// continue ;
70204: GO 70093
// if mc_taming [ i ] then
70206: LD_EXP 81
70210: PUSH
70211: LD_VAR 0 2
70215: ARRAY
70216: IFFALSE 70240
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
70218: LD_ADDR_EXP 81
70222: PUSH
70223: LD_EXP 81
70227: PPUSH
70228: LD_VAR 0 2
70232: PPUSH
70233: EMPTY
70234: PPUSH
70235: CALL_OW 1
70239: ST_TO_ADDR
// for j in tmp do
70240: LD_ADDR_VAR 0 3
70244: PUSH
70245: LD_VAR 0 4
70249: PUSH
70250: FOR_IN
70251: IFFALSE 70474
// begin if IsInUnit ( j ) then
70253: LD_VAR 0 3
70257: PPUSH
70258: CALL_OW 310
70262: IFFALSE 70273
// ComExitBuilding ( j ) ;
70264: LD_VAR 0 3
70268: PPUSH
70269: CALL_OW 122
// if not j in mc_healers [ i ] then
70273: LD_VAR 0 3
70277: PUSH
70278: LD_EXP 54
70282: PUSH
70283: LD_VAR 0 2
70287: ARRAY
70288: IN
70289: NOT
70290: IFFALSE 70336
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
70292: LD_ADDR_EXP 54
70296: PUSH
70297: LD_EXP 54
70301: PPUSH
70302: LD_VAR 0 2
70306: PUSH
70307: LD_EXP 54
70311: PUSH
70312: LD_VAR 0 2
70316: ARRAY
70317: PUSH
70318: LD_INT 1
70320: PLUS
70321: PUSH
70322: EMPTY
70323: LIST
70324: LIST
70325: PPUSH
70326: LD_VAR 0 3
70330: PPUSH
70331: CALL 24872 0 3
70335: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
70336: LD_VAR 0 3
70340: PPUSH
70341: CALL_OW 110
70345: PUSH
70346: LD_INT 102
70348: NONEQUAL
70349: IFFALSE 70363
// SetTag ( j , 102 ) ;
70351: LD_VAR 0 3
70355: PPUSH
70356: LD_INT 102
70358: PPUSH
70359: CALL_OW 109
// Wait ( 3 ) ;
70363: LD_INT 3
70365: PPUSH
70366: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
70370: LD_EXP 53
70374: PUSH
70375: LD_VAR 0 2
70379: ARRAY
70380: PUSH
70381: LD_INT 1
70383: ARRAY
70384: IFFALSE 70416
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
70386: LD_VAR 0 3
70390: PPUSH
70391: LD_EXP 53
70395: PUSH
70396: LD_VAR 0 2
70400: ARRAY
70401: PUSH
70402: LD_INT 1
70404: ARRAY
70405: PUSH
70406: LD_INT 1
70408: ARRAY
70409: PPUSH
70410: CALL_OW 128
70414: GO 70472
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
70416: LD_VAR 0 3
70420: PPUSH
70421: CALL_OW 314
70425: NOT
70426: PUSH
70427: LD_EXP 53
70431: PUSH
70432: LD_VAR 0 2
70436: ARRAY
70437: PUSH
70438: LD_INT 2
70440: ARRAY
70441: AND
70442: IFFALSE 70472
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
70444: LD_VAR 0 3
70448: PPUSH
70449: LD_EXP 53
70453: PUSH
70454: LD_VAR 0 2
70458: ARRAY
70459: PUSH
70460: LD_INT 2
70462: ARRAY
70463: PUSH
70464: LD_INT 1
70466: ARRAY
70467: PPUSH
70468: CALL_OW 128
// end ;
70472: GO 70250
70474: POP
70475: POP
// end ;
70476: GO 70093
70478: POP
70479: POP
// end ;
70480: LD_VAR 0 1
70484: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
70485: LD_INT 0
70487: PPUSH
70488: PPUSH
70489: PPUSH
70490: PPUSH
70491: PPUSH
// if not mc_bases then
70492: LD_EXP 50
70496: NOT
70497: IFFALSE 70501
// exit ;
70499: GO 71672
// for i = 1 to mc_bases do
70501: LD_ADDR_VAR 0 2
70505: PUSH
70506: DOUBLE
70507: LD_INT 1
70509: DEC
70510: ST_TO_ADDR
70511: LD_EXP 50
70515: PUSH
70516: FOR_TO
70517: IFFALSE 71670
// begin if mc_scan [ i ] then
70519: LD_EXP 73
70523: PUSH
70524: LD_VAR 0 2
70528: ARRAY
70529: IFFALSE 70533
// continue ;
70531: GO 70516
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
70533: LD_EXP 55
70537: PUSH
70538: LD_VAR 0 2
70542: ARRAY
70543: NOT
70544: PUSH
70545: LD_EXP 57
70549: PUSH
70550: LD_VAR 0 2
70554: ARRAY
70555: NOT
70556: AND
70557: PUSH
70558: LD_EXP 56
70562: PUSH
70563: LD_VAR 0 2
70567: ARRAY
70568: AND
70569: IFFALSE 70607
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
70571: LD_ADDR_EXP 56
70575: PUSH
70576: LD_EXP 56
70580: PPUSH
70581: LD_VAR 0 2
70585: PPUSH
70586: EMPTY
70587: PPUSH
70588: CALL_OW 1
70592: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
70593: LD_VAR 0 2
70597: PPUSH
70598: LD_INT 103
70600: PPUSH
70601: CALL 64243 0 2
// continue ;
70605: GO 70516
// end ; if mc_construct_list [ i ] then
70607: LD_EXP 57
70611: PUSH
70612: LD_VAR 0 2
70616: ARRAY
70617: IFFALSE 70837
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
70619: LD_ADDR_VAR 0 4
70623: PUSH
70624: LD_EXP 50
70628: PUSH
70629: LD_VAR 0 2
70633: ARRAY
70634: PPUSH
70635: LD_INT 25
70637: PUSH
70638: LD_INT 2
70640: PUSH
70641: EMPTY
70642: LIST
70643: LIST
70644: PPUSH
70645: CALL_OW 72
70649: PUSH
70650: LD_EXP 52
70654: PUSH
70655: LD_VAR 0 2
70659: ARRAY
70660: DIFF
70661: ST_TO_ADDR
// if not tmp then
70662: LD_VAR 0 4
70666: NOT
70667: IFFALSE 70671
// continue ;
70669: GO 70516
// for j in tmp do
70671: LD_ADDR_VAR 0 3
70675: PUSH
70676: LD_VAR 0 4
70680: PUSH
70681: FOR_IN
70682: IFFALSE 70833
// begin if not mc_builders [ i ] then
70684: LD_EXP 56
70688: PUSH
70689: LD_VAR 0 2
70693: ARRAY
70694: NOT
70695: IFFALSE 70753
// begin SetTag ( j , 103 ) ;
70697: LD_VAR 0 3
70701: PPUSH
70702: LD_INT 103
70704: PPUSH
70705: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
70709: LD_ADDR_EXP 56
70713: PUSH
70714: LD_EXP 56
70718: PPUSH
70719: LD_VAR 0 2
70723: PUSH
70724: LD_EXP 56
70728: PUSH
70729: LD_VAR 0 2
70733: ARRAY
70734: PUSH
70735: LD_INT 1
70737: PLUS
70738: PUSH
70739: EMPTY
70740: LIST
70741: LIST
70742: PPUSH
70743: LD_VAR 0 3
70747: PPUSH
70748: CALL 24872 0 3
70752: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
70753: LD_VAR 0 3
70757: PPUSH
70758: CALL_OW 310
70762: IFFALSE 70773
// ComExitBuilding ( j ) ;
70764: LD_VAR 0 3
70768: PPUSH
70769: CALL_OW 122
// wait ( 3 ) ;
70773: LD_INT 3
70775: PPUSH
70776: CALL_OW 67
// if not mc_construct_list [ i ] then
70780: LD_EXP 57
70784: PUSH
70785: LD_VAR 0 2
70789: ARRAY
70790: NOT
70791: IFFALSE 70795
// break ;
70793: GO 70833
// if not HasTask ( j ) then
70795: LD_VAR 0 3
70799: PPUSH
70800: CALL_OW 314
70804: NOT
70805: IFFALSE 70831
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
70807: LD_VAR 0 3
70811: PPUSH
70812: LD_EXP 57
70816: PUSH
70817: LD_VAR 0 2
70821: ARRAY
70822: PUSH
70823: LD_INT 1
70825: ARRAY
70826: PPUSH
70827: CALL 27735 0 2
// end ;
70831: GO 70681
70833: POP
70834: POP
// end else
70835: GO 71668
// if mc_build_list [ i ] then
70837: LD_EXP 55
70841: PUSH
70842: LD_VAR 0 2
70846: ARRAY
70847: IFFALSE 71668
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
70849: LD_ADDR_VAR 0 5
70853: PUSH
70854: LD_EXP 50
70858: PUSH
70859: LD_VAR 0 2
70863: ARRAY
70864: PPUSH
70865: LD_INT 2
70867: PUSH
70868: LD_INT 30
70870: PUSH
70871: LD_INT 0
70873: PUSH
70874: EMPTY
70875: LIST
70876: LIST
70877: PUSH
70878: LD_INT 30
70880: PUSH
70881: LD_INT 1
70883: PUSH
70884: EMPTY
70885: LIST
70886: LIST
70887: PUSH
70888: EMPTY
70889: LIST
70890: LIST
70891: LIST
70892: PPUSH
70893: CALL_OW 72
70897: ST_TO_ADDR
// if depot then
70898: LD_VAR 0 5
70902: IFFALSE 70920
// depot := depot [ 1 ] else
70904: LD_ADDR_VAR 0 5
70908: PUSH
70909: LD_VAR 0 5
70913: PUSH
70914: LD_INT 1
70916: ARRAY
70917: ST_TO_ADDR
70918: GO 70928
// depot := 0 ;
70920: LD_ADDR_VAR 0 5
70924: PUSH
70925: LD_INT 0
70927: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
70928: LD_EXP 55
70932: PUSH
70933: LD_VAR 0 2
70937: ARRAY
70938: PUSH
70939: LD_INT 1
70941: ARRAY
70942: PUSH
70943: LD_INT 1
70945: ARRAY
70946: PPUSH
70947: CALL 27559 0 1
70951: PUSH
70952: LD_EXP 50
70956: PUSH
70957: LD_VAR 0 2
70961: ARRAY
70962: PPUSH
70963: LD_INT 2
70965: PUSH
70966: LD_INT 30
70968: PUSH
70969: LD_INT 2
70971: PUSH
70972: EMPTY
70973: LIST
70974: LIST
70975: PUSH
70976: LD_INT 30
70978: PUSH
70979: LD_INT 3
70981: PUSH
70982: EMPTY
70983: LIST
70984: LIST
70985: PUSH
70986: EMPTY
70987: LIST
70988: LIST
70989: LIST
70990: PPUSH
70991: CALL_OW 72
70995: NOT
70996: AND
70997: IFFALSE 71102
// begin for j = 1 to mc_build_list [ i ] do
70999: LD_ADDR_VAR 0 3
71003: PUSH
71004: DOUBLE
71005: LD_INT 1
71007: DEC
71008: ST_TO_ADDR
71009: LD_EXP 55
71013: PUSH
71014: LD_VAR 0 2
71018: ARRAY
71019: PUSH
71020: FOR_TO
71021: IFFALSE 71100
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
71023: LD_EXP 55
71027: PUSH
71028: LD_VAR 0 2
71032: ARRAY
71033: PUSH
71034: LD_VAR 0 3
71038: ARRAY
71039: PUSH
71040: LD_INT 1
71042: ARRAY
71043: PUSH
71044: LD_INT 2
71046: EQUAL
71047: IFFALSE 71098
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
71049: LD_ADDR_EXP 55
71053: PUSH
71054: LD_EXP 55
71058: PPUSH
71059: LD_VAR 0 2
71063: PPUSH
71064: LD_EXP 55
71068: PUSH
71069: LD_VAR 0 2
71073: ARRAY
71074: PPUSH
71075: LD_VAR 0 3
71079: PPUSH
71080: LD_INT 1
71082: PPUSH
71083: LD_INT 0
71085: PPUSH
71086: CALL 24290 0 4
71090: PPUSH
71091: CALL_OW 1
71095: ST_TO_ADDR
// break ;
71096: GO 71100
// end ;
71098: GO 71020
71100: POP
71101: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
71102: LD_EXP 55
71106: PUSH
71107: LD_VAR 0 2
71111: ARRAY
71112: PUSH
71113: LD_INT 1
71115: ARRAY
71116: PUSH
71117: LD_INT 1
71119: ARRAY
71120: PUSH
71121: LD_INT 0
71123: EQUAL
71124: PUSH
71125: LD_VAR 0 5
71129: PUSH
71130: LD_VAR 0 5
71134: PPUSH
71135: LD_EXP 55
71139: PUSH
71140: LD_VAR 0 2
71144: ARRAY
71145: PUSH
71146: LD_INT 1
71148: ARRAY
71149: PUSH
71150: LD_INT 1
71152: ARRAY
71153: PPUSH
71154: LD_EXP 55
71158: PUSH
71159: LD_VAR 0 2
71163: ARRAY
71164: PUSH
71165: LD_INT 1
71167: ARRAY
71168: PUSH
71169: LD_INT 2
71171: ARRAY
71172: PPUSH
71173: LD_EXP 55
71177: PUSH
71178: LD_VAR 0 2
71182: ARRAY
71183: PUSH
71184: LD_INT 1
71186: ARRAY
71187: PUSH
71188: LD_INT 3
71190: ARRAY
71191: PPUSH
71192: LD_EXP 55
71196: PUSH
71197: LD_VAR 0 2
71201: ARRAY
71202: PUSH
71203: LD_INT 1
71205: ARRAY
71206: PUSH
71207: LD_INT 4
71209: ARRAY
71210: PPUSH
71211: CALL 32975 0 5
71215: AND
71216: OR
71217: IFFALSE 71498
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
71219: LD_ADDR_VAR 0 4
71223: PUSH
71224: LD_EXP 50
71228: PUSH
71229: LD_VAR 0 2
71233: ARRAY
71234: PPUSH
71235: LD_INT 25
71237: PUSH
71238: LD_INT 2
71240: PUSH
71241: EMPTY
71242: LIST
71243: LIST
71244: PPUSH
71245: CALL_OW 72
71249: PUSH
71250: LD_EXP 52
71254: PUSH
71255: LD_VAR 0 2
71259: ARRAY
71260: DIFF
71261: ST_TO_ADDR
// if not tmp then
71262: LD_VAR 0 4
71266: NOT
71267: IFFALSE 71271
// continue ;
71269: GO 70516
// for j in tmp do
71271: LD_ADDR_VAR 0 3
71275: PUSH
71276: LD_VAR 0 4
71280: PUSH
71281: FOR_IN
71282: IFFALSE 71494
// begin if not mc_builders [ i ] then
71284: LD_EXP 56
71288: PUSH
71289: LD_VAR 0 2
71293: ARRAY
71294: NOT
71295: IFFALSE 71353
// begin SetTag ( j , 103 ) ;
71297: LD_VAR 0 3
71301: PPUSH
71302: LD_INT 103
71304: PPUSH
71305: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
71309: LD_ADDR_EXP 56
71313: PUSH
71314: LD_EXP 56
71318: PPUSH
71319: LD_VAR 0 2
71323: PUSH
71324: LD_EXP 56
71328: PUSH
71329: LD_VAR 0 2
71333: ARRAY
71334: PUSH
71335: LD_INT 1
71337: PLUS
71338: PUSH
71339: EMPTY
71340: LIST
71341: LIST
71342: PPUSH
71343: LD_VAR 0 3
71347: PPUSH
71348: CALL 24872 0 3
71352: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
71353: LD_VAR 0 3
71357: PPUSH
71358: CALL_OW 310
71362: IFFALSE 71373
// ComExitBuilding ( j ) ;
71364: LD_VAR 0 3
71368: PPUSH
71369: CALL_OW 122
// wait ( 3 ) ;
71373: LD_INT 3
71375: PPUSH
71376: CALL_OW 67
// if not mc_build_list [ i ] then
71380: LD_EXP 55
71384: PUSH
71385: LD_VAR 0 2
71389: ARRAY
71390: NOT
71391: IFFALSE 71395
// break ;
71393: GO 71494
// if not HasTask ( j ) then
71395: LD_VAR 0 3
71399: PPUSH
71400: CALL_OW 314
71404: NOT
71405: IFFALSE 71492
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
71407: LD_VAR 0 3
71411: PPUSH
71412: LD_EXP 55
71416: PUSH
71417: LD_VAR 0 2
71421: ARRAY
71422: PUSH
71423: LD_INT 1
71425: ARRAY
71426: PUSH
71427: LD_INT 1
71429: ARRAY
71430: PPUSH
71431: LD_EXP 55
71435: PUSH
71436: LD_VAR 0 2
71440: ARRAY
71441: PUSH
71442: LD_INT 1
71444: ARRAY
71445: PUSH
71446: LD_INT 2
71448: ARRAY
71449: PPUSH
71450: LD_EXP 55
71454: PUSH
71455: LD_VAR 0 2
71459: ARRAY
71460: PUSH
71461: LD_INT 1
71463: ARRAY
71464: PUSH
71465: LD_INT 3
71467: ARRAY
71468: PPUSH
71469: LD_EXP 55
71473: PUSH
71474: LD_VAR 0 2
71478: ARRAY
71479: PUSH
71480: LD_INT 1
71482: ARRAY
71483: PUSH
71484: LD_INT 4
71486: ARRAY
71487: PPUSH
71488: CALL_OW 145
// end ;
71492: GO 71281
71494: POP
71495: POP
// end else
71496: GO 71668
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] , UnitFilter ( mc_bases [ i ] , [ f_type , unit_building ] ) , [ ] ) then
71498: LD_EXP 50
71502: PUSH
71503: LD_VAR 0 2
71507: ARRAY
71508: PPUSH
71509: LD_EXP 55
71513: PUSH
71514: LD_VAR 0 2
71518: ARRAY
71519: PUSH
71520: LD_INT 1
71522: ARRAY
71523: PUSH
71524: LD_INT 1
71526: ARRAY
71527: PPUSH
71528: LD_EXP 55
71532: PUSH
71533: LD_VAR 0 2
71537: ARRAY
71538: PUSH
71539: LD_INT 1
71541: ARRAY
71542: PUSH
71543: LD_INT 2
71545: ARRAY
71546: PPUSH
71547: LD_EXP 55
71551: PUSH
71552: LD_VAR 0 2
71556: ARRAY
71557: PUSH
71558: LD_INT 1
71560: ARRAY
71561: PUSH
71562: LD_INT 3
71564: ARRAY
71565: PPUSH
71566: LD_EXP 55
71570: PUSH
71571: LD_VAR 0 2
71575: ARRAY
71576: PUSH
71577: LD_INT 1
71579: ARRAY
71580: PUSH
71581: LD_INT 4
71583: ARRAY
71584: PPUSH
71585: LD_EXP 50
71589: PUSH
71590: LD_VAR 0 2
71594: ARRAY
71595: PPUSH
71596: LD_INT 21
71598: PUSH
71599: LD_INT 3
71601: PUSH
71602: EMPTY
71603: LIST
71604: LIST
71605: PPUSH
71606: CALL_OW 72
71610: PPUSH
71611: EMPTY
71612: PPUSH
71613: CALL 31725 0 7
71617: NOT
71618: IFFALSE 71668
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
71620: LD_ADDR_EXP 55
71624: PUSH
71625: LD_EXP 55
71629: PPUSH
71630: LD_VAR 0 2
71634: PPUSH
71635: LD_EXP 55
71639: PUSH
71640: LD_VAR 0 2
71644: ARRAY
71645: PPUSH
71646: LD_INT 1
71648: PPUSH
71649: LD_INT 1
71651: NEG
71652: PPUSH
71653: LD_INT 0
71655: PPUSH
71656: CALL 24290 0 4
71660: PPUSH
71661: CALL_OW 1
71665: ST_TO_ADDR
// continue ;
71666: GO 70516
// end ; end ; end ;
71668: GO 70516
71670: POP
71671: POP
// end ;
71672: LD_VAR 0 1
71676: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
71677: LD_INT 0
71679: PPUSH
71680: PPUSH
71681: PPUSH
71682: PPUSH
71683: PPUSH
71684: PPUSH
// if not mc_bases then
71685: LD_EXP 50
71689: NOT
71690: IFFALSE 71694
// exit ;
71692: GO 72121
// for i = 1 to mc_bases do
71694: LD_ADDR_VAR 0 2
71698: PUSH
71699: DOUBLE
71700: LD_INT 1
71702: DEC
71703: ST_TO_ADDR
71704: LD_EXP 50
71708: PUSH
71709: FOR_TO
71710: IFFALSE 72119
// begin tmp := mc_build_upgrade [ i ] ;
71712: LD_ADDR_VAR 0 4
71716: PUSH
71717: LD_EXP 82
71721: PUSH
71722: LD_VAR 0 2
71726: ARRAY
71727: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
71728: LD_ADDR_VAR 0 6
71732: PUSH
71733: LD_EXP 83
71737: PUSH
71738: LD_VAR 0 2
71742: ARRAY
71743: PPUSH
71744: LD_INT 2
71746: PUSH
71747: LD_INT 30
71749: PUSH
71750: LD_INT 6
71752: PUSH
71753: EMPTY
71754: LIST
71755: LIST
71756: PUSH
71757: LD_INT 30
71759: PUSH
71760: LD_INT 7
71762: PUSH
71763: EMPTY
71764: LIST
71765: LIST
71766: PUSH
71767: EMPTY
71768: LIST
71769: LIST
71770: LIST
71771: PPUSH
71772: CALL_OW 72
71776: ST_TO_ADDR
// if not tmp and not lab then
71777: LD_VAR 0 4
71781: NOT
71782: PUSH
71783: LD_VAR 0 6
71787: NOT
71788: AND
71789: IFFALSE 71793
// continue ;
71791: GO 71709
// if tmp then
71793: LD_VAR 0 4
71797: IFFALSE 71917
// for j in tmp do
71799: LD_ADDR_VAR 0 3
71803: PUSH
71804: LD_VAR 0 4
71808: PUSH
71809: FOR_IN
71810: IFFALSE 71915
// begin if UpgradeCost ( j ) then
71812: LD_VAR 0 3
71816: PPUSH
71817: CALL 31385 0 1
71821: IFFALSE 71913
// begin ComUpgrade ( j ) ;
71823: LD_VAR 0 3
71827: PPUSH
71828: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
71832: LD_ADDR_EXP 82
71836: PUSH
71837: LD_EXP 82
71841: PPUSH
71842: LD_VAR 0 2
71846: PPUSH
71847: LD_EXP 82
71851: PUSH
71852: LD_VAR 0 2
71856: ARRAY
71857: PUSH
71858: LD_VAR 0 3
71862: DIFF
71863: PPUSH
71864: CALL_OW 1
71868: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
71869: LD_ADDR_EXP 57
71873: PUSH
71874: LD_EXP 57
71878: PPUSH
71879: LD_VAR 0 2
71883: PUSH
71884: LD_EXP 57
71888: PUSH
71889: LD_VAR 0 2
71893: ARRAY
71894: PUSH
71895: LD_INT 1
71897: PLUS
71898: PUSH
71899: EMPTY
71900: LIST
71901: LIST
71902: PPUSH
71903: LD_VAR 0 3
71907: PPUSH
71908: CALL 24872 0 3
71912: ST_TO_ADDR
// end ; end ;
71913: GO 71809
71915: POP
71916: POP
// if not lab or not mc_lab_upgrade [ i ] then
71917: LD_VAR 0 6
71921: NOT
71922: PUSH
71923: LD_EXP 84
71927: PUSH
71928: LD_VAR 0 2
71932: ARRAY
71933: NOT
71934: OR
71935: IFFALSE 71939
// continue ;
71937: GO 71709
// for j in lab do
71939: LD_ADDR_VAR 0 3
71943: PUSH
71944: LD_VAR 0 6
71948: PUSH
71949: FOR_IN
71950: IFFALSE 72115
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
71952: LD_VAR 0 3
71956: PPUSH
71957: CALL_OW 266
71961: PUSH
71962: LD_INT 6
71964: PUSH
71965: LD_INT 7
71967: PUSH
71968: EMPTY
71969: LIST
71970: LIST
71971: IN
71972: PUSH
71973: LD_VAR 0 3
71977: PPUSH
71978: CALL_OW 461
71982: PUSH
71983: LD_INT 1
71985: NONEQUAL
71986: AND
71987: IFFALSE 72113
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
71989: LD_VAR 0 3
71993: PPUSH
71994: LD_EXP 84
71998: PUSH
71999: LD_VAR 0 2
72003: ARRAY
72004: PUSH
72005: LD_INT 1
72007: ARRAY
72008: PPUSH
72009: CALL 31590 0 2
72013: IFFALSE 72113
// begin ComCancel ( j ) ;
72015: LD_VAR 0 3
72019: PPUSH
72020: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
72024: LD_VAR 0 3
72028: PPUSH
72029: LD_EXP 84
72033: PUSH
72034: LD_VAR 0 2
72038: ARRAY
72039: PUSH
72040: LD_INT 1
72042: ARRAY
72043: PPUSH
72044: CALL_OW 207
// if not j in mc_construct_list [ i ] then
72048: LD_VAR 0 3
72052: PUSH
72053: LD_EXP 57
72057: PUSH
72058: LD_VAR 0 2
72062: ARRAY
72063: IN
72064: NOT
72065: IFFALSE 72111
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
72067: LD_ADDR_EXP 57
72071: PUSH
72072: LD_EXP 57
72076: PPUSH
72077: LD_VAR 0 2
72081: PUSH
72082: LD_EXP 57
72086: PUSH
72087: LD_VAR 0 2
72091: ARRAY
72092: PUSH
72093: LD_INT 1
72095: PLUS
72096: PUSH
72097: EMPTY
72098: LIST
72099: LIST
72100: PPUSH
72101: LD_VAR 0 3
72105: PPUSH
72106: CALL 24872 0 3
72110: ST_TO_ADDR
// break ;
72111: GO 72115
// end ; end ; end ;
72113: GO 71949
72115: POP
72116: POP
// end ;
72117: GO 71709
72119: POP
72120: POP
// end ;
72121: LD_VAR 0 1
72125: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
72126: LD_INT 0
72128: PPUSH
72129: PPUSH
72130: PPUSH
72131: PPUSH
72132: PPUSH
72133: PPUSH
72134: PPUSH
72135: PPUSH
72136: PPUSH
// if not mc_bases then
72137: LD_EXP 50
72141: NOT
72142: IFFALSE 72146
// exit ;
72144: GO 72551
// for i = 1 to mc_bases do
72146: LD_ADDR_VAR 0 2
72150: PUSH
72151: DOUBLE
72152: LD_INT 1
72154: DEC
72155: ST_TO_ADDR
72156: LD_EXP 50
72160: PUSH
72161: FOR_TO
72162: IFFALSE 72549
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
72164: LD_EXP 58
72168: PUSH
72169: LD_VAR 0 2
72173: ARRAY
72174: NOT
72175: PUSH
72176: LD_EXP 50
72180: PUSH
72181: LD_VAR 0 2
72185: ARRAY
72186: PPUSH
72187: LD_INT 30
72189: PUSH
72190: LD_INT 3
72192: PUSH
72193: EMPTY
72194: LIST
72195: LIST
72196: PPUSH
72197: CALL_OW 72
72201: NOT
72202: OR
72203: IFFALSE 72207
// continue ;
72205: GO 72161
// busy := false ;
72207: LD_ADDR_VAR 0 8
72211: PUSH
72212: LD_INT 0
72214: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
72215: LD_ADDR_VAR 0 4
72219: PUSH
72220: LD_EXP 50
72224: PUSH
72225: LD_VAR 0 2
72229: ARRAY
72230: PPUSH
72231: LD_INT 30
72233: PUSH
72234: LD_INT 3
72236: PUSH
72237: EMPTY
72238: LIST
72239: LIST
72240: PPUSH
72241: CALL_OW 72
72245: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
72246: LD_ADDR_VAR 0 6
72250: PUSH
72251: LD_EXP 58
72255: PUSH
72256: LD_VAR 0 2
72260: ARRAY
72261: PPUSH
72262: LD_INT 2
72264: PUSH
72265: LD_INT 30
72267: PUSH
72268: LD_INT 32
72270: PUSH
72271: EMPTY
72272: LIST
72273: LIST
72274: PUSH
72275: LD_INT 30
72277: PUSH
72278: LD_INT 33
72280: PUSH
72281: EMPTY
72282: LIST
72283: LIST
72284: PUSH
72285: EMPTY
72286: LIST
72287: LIST
72288: LIST
72289: PPUSH
72290: CALL_OW 72
72294: ST_TO_ADDR
// if not t then
72295: LD_VAR 0 6
72299: NOT
72300: IFFALSE 72304
// continue ;
72302: GO 72161
// for j in tmp do
72304: LD_ADDR_VAR 0 3
72308: PUSH
72309: LD_VAR 0 4
72313: PUSH
72314: FOR_IN
72315: IFFALSE 72345
// if not BuildingStatus ( j ) = bs_idle then
72317: LD_VAR 0 3
72321: PPUSH
72322: CALL_OW 461
72326: PUSH
72327: LD_INT 2
72329: EQUAL
72330: NOT
72331: IFFALSE 72343
// begin busy := true ;
72333: LD_ADDR_VAR 0 8
72337: PUSH
72338: LD_INT 1
72340: ST_TO_ADDR
// break ;
72341: GO 72345
// end ;
72343: GO 72314
72345: POP
72346: POP
// if busy then
72347: LD_VAR 0 8
72351: IFFALSE 72355
// continue ;
72353: GO 72161
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
72355: LD_ADDR_VAR 0 7
72359: PUSH
72360: LD_VAR 0 6
72364: PPUSH
72365: LD_INT 35
72367: PUSH
72368: LD_INT 0
72370: PUSH
72371: EMPTY
72372: LIST
72373: LIST
72374: PPUSH
72375: CALL_OW 72
72379: ST_TO_ADDR
// if tw then
72380: LD_VAR 0 7
72384: IFFALSE 72461
// begin tw := tw [ 1 ] ;
72386: LD_ADDR_VAR 0 7
72390: PUSH
72391: LD_VAR 0 7
72395: PUSH
72396: LD_INT 1
72398: ARRAY
72399: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
72400: LD_ADDR_VAR 0 9
72404: PUSH
72405: LD_VAR 0 7
72409: PPUSH
72410: LD_EXP 75
72414: PUSH
72415: LD_VAR 0 2
72419: ARRAY
72420: PPUSH
72421: CALL 29882 0 2
72425: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
72426: LD_EXP 89
72430: PUSH
72431: LD_VAR 0 2
72435: ARRAY
72436: IFFALSE 72459
// if not weapon in mc_allowed_tower_weapons [ i ] then
72438: LD_VAR 0 9
72442: PUSH
72443: LD_EXP 89
72447: PUSH
72448: LD_VAR 0 2
72452: ARRAY
72453: IN
72454: NOT
72455: IFFALSE 72459
// continue ;
72457: GO 72161
// end else
72459: GO 72524
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
72461: LD_ADDR_VAR 0 5
72465: PUSH
72466: LD_EXP 58
72470: PUSH
72471: LD_VAR 0 2
72475: ARRAY
72476: PPUSH
72477: LD_VAR 0 4
72481: PPUSH
72482: CALL 56115 0 2
72486: ST_TO_ADDR
// if not tmp2 then
72487: LD_VAR 0 5
72491: NOT
72492: IFFALSE 72496
// continue ;
72494: GO 72161
// tw := tmp2 [ 1 ] ;
72496: LD_ADDR_VAR 0 7
72500: PUSH
72501: LD_VAR 0 5
72505: PUSH
72506: LD_INT 1
72508: ARRAY
72509: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
72510: LD_ADDR_VAR 0 9
72514: PUSH
72515: LD_VAR 0 5
72519: PUSH
72520: LD_INT 2
72522: ARRAY
72523: ST_TO_ADDR
// end ; if not weapon then
72524: LD_VAR 0 9
72528: NOT
72529: IFFALSE 72533
// continue ;
72531: GO 72161
// ComPlaceWeapon ( tw , weapon ) ;
72533: LD_VAR 0 7
72537: PPUSH
72538: LD_VAR 0 9
72542: PPUSH
72543: CALL_OW 148
// end ;
72547: GO 72161
72549: POP
72550: POP
// end ;
72551: LD_VAR 0 1
72555: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list , r ; begin
72556: LD_INT 0
72558: PPUSH
72559: PPUSH
72560: PPUSH
72561: PPUSH
72562: PPUSH
72563: PPUSH
72564: PPUSH
// if not mc_bases then
72565: LD_EXP 50
72569: NOT
72570: IFFALSE 72574
// exit ;
72572: GO 73342
// for i = 1 to mc_bases do
72574: LD_ADDR_VAR 0 2
72578: PUSH
72579: DOUBLE
72580: LD_INT 1
72582: DEC
72583: ST_TO_ADDR
72584: LD_EXP 50
72588: PUSH
72589: FOR_TO
72590: IFFALSE 73340
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] or mc_scan [ i ] then
72592: LD_EXP 63
72596: PUSH
72597: LD_VAR 0 2
72601: ARRAY
72602: NOT
72603: PUSH
72604: LD_EXP 63
72608: PUSH
72609: LD_VAR 0 2
72613: ARRAY
72614: PUSH
72615: LD_EXP 64
72619: PUSH
72620: LD_VAR 0 2
72624: ARRAY
72625: EQUAL
72626: OR
72627: PUSH
72628: LD_EXP 73
72632: PUSH
72633: LD_VAR 0 2
72637: ARRAY
72638: OR
72639: IFFALSE 72643
// continue ;
72641: GO 72589
// if mc_miners [ i ] then
72643: LD_EXP 64
72647: PUSH
72648: LD_VAR 0 2
72652: ARRAY
72653: IFFALSE 73027
// begin for j = mc_miners [ i ] downto 1 do
72655: LD_ADDR_VAR 0 3
72659: PUSH
72660: DOUBLE
72661: LD_EXP 64
72665: PUSH
72666: LD_VAR 0 2
72670: ARRAY
72671: INC
72672: ST_TO_ADDR
72673: LD_INT 1
72675: PUSH
72676: FOR_DOWNTO
72677: IFFALSE 73025
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
72679: LD_EXP 64
72683: PUSH
72684: LD_VAR 0 2
72688: ARRAY
72689: PUSH
72690: LD_VAR 0 3
72694: ARRAY
72695: PPUSH
72696: CALL_OW 301
72700: PUSH
72701: LD_EXP 64
72705: PUSH
72706: LD_VAR 0 2
72710: ARRAY
72711: PUSH
72712: LD_VAR 0 3
72716: ARRAY
72717: PPUSH
72718: CALL_OW 257
72722: PUSH
72723: LD_INT 1
72725: NONEQUAL
72726: OR
72727: IFFALSE 72790
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
72729: LD_ADDR_VAR 0 5
72733: PUSH
72734: LD_EXP 64
72738: PUSH
72739: LD_VAR 0 2
72743: ARRAY
72744: PUSH
72745: LD_EXP 64
72749: PUSH
72750: LD_VAR 0 2
72754: ARRAY
72755: PUSH
72756: LD_VAR 0 3
72760: ARRAY
72761: DIFF
72762: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
72763: LD_ADDR_EXP 64
72767: PUSH
72768: LD_EXP 64
72772: PPUSH
72773: LD_VAR 0 2
72777: PPUSH
72778: LD_VAR 0 5
72782: PPUSH
72783: CALL_OW 1
72787: ST_TO_ADDR
// continue ;
72788: GO 72676
// end ; if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and not HasTask ( mc_miners [ i ] [ j ] ) then
72790: LD_EXP 64
72794: PUSH
72795: LD_VAR 0 2
72799: ARRAY
72800: PUSH
72801: LD_VAR 0 3
72805: ARRAY
72806: PPUSH
72807: CALL_OW 257
72811: PUSH
72812: LD_INT 1
72814: EQUAL
72815: PUSH
72816: LD_EXP 64
72820: PUSH
72821: LD_VAR 0 2
72825: ARRAY
72826: PUSH
72827: LD_VAR 0 3
72831: ARRAY
72832: PPUSH
72833: CALL_OW 459
72837: NOT
72838: AND
72839: PUSH
72840: LD_EXP 64
72844: PUSH
72845: LD_VAR 0 2
72849: ARRAY
72850: PUSH
72851: LD_VAR 0 3
72855: ARRAY
72856: PPUSH
72857: CALL_OW 314
72861: NOT
72862: AND
72863: IFFALSE 73023
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
72865: LD_EXP 64
72869: PUSH
72870: LD_VAR 0 2
72874: ARRAY
72875: PUSH
72876: LD_VAR 0 3
72880: ARRAY
72881: PPUSH
72882: CALL_OW 310
72886: IFFALSE 72909
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
72888: LD_EXP 64
72892: PUSH
72893: LD_VAR 0 2
72897: ARRAY
72898: PUSH
72899: LD_VAR 0 3
72903: ARRAY
72904: PPUSH
72905: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
72909: LD_EXP 64
72913: PUSH
72914: LD_VAR 0 2
72918: ARRAY
72919: PUSH
72920: LD_VAR 0 3
72924: ARRAY
72925: PPUSH
72926: CALL_OW 314
72930: NOT
72931: IFFALSE 73023
// begin r := rand ( 1 , mc_mines [ i ] ) ;
72933: LD_ADDR_VAR 0 7
72937: PUSH
72938: LD_INT 1
72940: PPUSH
72941: LD_EXP 63
72945: PUSH
72946: LD_VAR 0 2
72950: ARRAY
72951: PPUSH
72952: CALL_OW 12
72956: ST_TO_ADDR
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ r ] [ 1 ] , mc_mines [ i ] [ r ] [ 2 ] , 0 ) ;
72957: LD_EXP 64
72961: PUSH
72962: LD_VAR 0 2
72966: ARRAY
72967: PUSH
72968: LD_VAR 0 3
72972: ARRAY
72973: PPUSH
72974: LD_EXP 63
72978: PUSH
72979: LD_VAR 0 2
72983: ARRAY
72984: PUSH
72985: LD_VAR 0 7
72989: ARRAY
72990: PUSH
72991: LD_INT 1
72993: ARRAY
72994: PPUSH
72995: LD_EXP 63
72999: PUSH
73000: LD_VAR 0 2
73004: ARRAY
73005: PUSH
73006: LD_VAR 0 7
73010: ARRAY
73011: PUSH
73012: LD_INT 2
73014: ARRAY
73015: PPUSH
73016: LD_INT 0
73018: PPUSH
73019: CALL_OW 193
// end ; end ; end ;
73023: GO 72676
73025: POP
73026: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
73027: LD_ADDR_VAR 0 5
73031: PUSH
73032: LD_EXP 50
73036: PUSH
73037: LD_VAR 0 2
73041: ARRAY
73042: PPUSH
73043: LD_INT 2
73045: PUSH
73046: LD_INT 30
73048: PUSH
73049: LD_INT 4
73051: PUSH
73052: EMPTY
73053: LIST
73054: LIST
73055: PUSH
73056: LD_INT 30
73058: PUSH
73059: LD_INT 5
73061: PUSH
73062: EMPTY
73063: LIST
73064: LIST
73065: PUSH
73066: LD_INT 30
73068: PUSH
73069: LD_INT 32
73071: PUSH
73072: EMPTY
73073: LIST
73074: LIST
73075: PUSH
73076: EMPTY
73077: LIST
73078: LIST
73079: LIST
73080: LIST
73081: PPUSH
73082: CALL_OW 72
73086: ST_TO_ADDR
// if not tmp then
73087: LD_VAR 0 5
73091: NOT
73092: IFFALSE 73096
// continue ;
73094: GO 72589
// list := [ ] ;
73096: LD_ADDR_VAR 0 6
73100: PUSH
73101: EMPTY
73102: ST_TO_ADDR
// for j in tmp do
73103: LD_ADDR_VAR 0 3
73107: PUSH
73108: LD_VAR 0 5
73112: PUSH
73113: FOR_IN
73114: IFFALSE 73183
// begin for k in UnitsInside ( j ) do
73116: LD_ADDR_VAR 0 4
73120: PUSH
73121: LD_VAR 0 3
73125: PPUSH
73126: CALL_OW 313
73130: PUSH
73131: FOR_IN
73132: IFFALSE 73179
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
73134: LD_VAR 0 4
73138: PPUSH
73139: CALL_OW 257
73143: PUSH
73144: LD_INT 1
73146: EQUAL
73147: PUSH
73148: LD_VAR 0 4
73152: PPUSH
73153: CALL_OW 459
73157: NOT
73158: AND
73159: IFFALSE 73177
// list := list ^ k ;
73161: LD_ADDR_VAR 0 6
73165: PUSH
73166: LD_VAR 0 6
73170: PUSH
73171: LD_VAR 0 4
73175: ADD
73176: ST_TO_ADDR
73177: GO 73131
73179: POP
73180: POP
// end ;
73181: GO 73113
73183: POP
73184: POP
// list := list diff mc_miners [ i ] ;
73185: LD_ADDR_VAR 0 6
73189: PUSH
73190: LD_VAR 0 6
73194: PUSH
73195: LD_EXP 64
73199: PUSH
73200: LD_VAR 0 2
73204: ARRAY
73205: DIFF
73206: ST_TO_ADDR
// if not list then
73207: LD_VAR 0 6
73211: NOT
73212: IFFALSE 73216
// continue ;
73214: GO 72589
// k := mc_mines [ i ] - mc_miners [ i ] ;
73216: LD_ADDR_VAR 0 4
73220: PUSH
73221: LD_EXP 63
73225: PUSH
73226: LD_VAR 0 2
73230: ARRAY
73231: PUSH
73232: LD_EXP 64
73236: PUSH
73237: LD_VAR 0 2
73241: ARRAY
73242: MINUS
73243: ST_TO_ADDR
// if k > list then
73244: LD_VAR 0 4
73248: PUSH
73249: LD_VAR 0 6
73253: GREATER
73254: IFFALSE 73266
// k := list ;
73256: LD_ADDR_VAR 0 4
73260: PUSH
73261: LD_VAR 0 6
73265: ST_TO_ADDR
// for j = 1 to k do
73266: LD_ADDR_VAR 0 3
73270: PUSH
73271: DOUBLE
73272: LD_INT 1
73274: DEC
73275: ST_TO_ADDR
73276: LD_VAR 0 4
73280: PUSH
73281: FOR_TO
73282: IFFALSE 73336
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
73284: LD_ADDR_EXP 64
73288: PUSH
73289: LD_EXP 64
73293: PPUSH
73294: LD_VAR 0 2
73298: PUSH
73299: LD_EXP 64
73303: PUSH
73304: LD_VAR 0 2
73308: ARRAY
73309: PUSH
73310: LD_INT 1
73312: PLUS
73313: PUSH
73314: EMPTY
73315: LIST
73316: LIST
73317: PPUSH
73318: LD_VAR 0 6
73322: PUSH
73323: LD_VAR 0 3
73327: ARRAY
73328: PPUSH
73329: CALL 24872 0 3
73333: ST_TO_ADDR
73334: GO 73281
73336: POP
73337: POP
// end ;
73338: GO 72589
73340: POP
73341: POP
// end ;
73342: LD_VAR 0 1
73346: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , side , target , cargo , depot , fac , components ; begin
73347: LD_INT 0
73349: PPUSH
73350: PPUSH
73351: PPUSH
73352: PPUSH
73353: PPUSH
73354: PPUSH
73355: PPUSH
73356: PPUSH
73357: PPUSH
73358: PPUSH
73359: PPUSH
// if not mc_bases then
73360: LD_EXP 50
73364: NOT
73365: IFFALSE 73369
// exit ;
73367: GO 75192
// for i = 1 to mc_bases do
73369: LD_ADDR_VAR 0 2
73373: PUSH
73374: DOUBLE
73375: LD_INT 1
73377: DEC
73378: ST_TO_ADDR
73379: LD_EXP 50
73383: PUSH
73384: FOR_TO
73385: IFFALSE 75190
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
73387: LD_EXP 50
73391: PUSH
73392: LD_VAR 0 2
73396: ARRAY
73397: NOT
73398: PUSH
73399: LD_EXP 57
73403: PUSH
73404: LD_VAR 0 2
73408: ARRAY
73409: OR
73410: IFFALSE 73414
// continue ;
73412: GO 73384
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
73414: LD_EXP 66
73418: PUSH
73419: LD_VAR 0 2
73423: ARRAY
73424: NOT
73425: PUSH
73426: LD_EXP 67
73430: PUSH
73431: LD_VAR 0 2
73435: ARRAY
73436: AND
73437: IFFALSE 73475
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
73439: LD_ADDR_EXP 67
73443: PUSH
73444: LD_EXP 67
73448: PPUSH
73449: LD_VAR 0 2
73453: PPUSH
73454: EMPTY
73455: PPUSH
73456: CALL_OW 1
73460: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
73461: LD_VAR 0 2
73465: PPUSH
73466: LD_INT 107
73468: PPUSH
73469: CALL 64243 0 2
// continue ;
73473: GO 73384
// end ; target := [ ] ;
73475: LD_ADDR_VAR 0 7
73479: PUSH
73480: EMPTY
73481: ST_TO_ADDR
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
73482: LD_ADDR_VAR 0 6
73486: PUSH
73487: LD_EXP 50
73491: PUSH
73492: LD_VAR 0 2
73496: ARRAY
73497: PUSH
73498: LD_INT 1
73500: ARRAY
73501: PPUSH
73502: CALL_OW 255
73506: ST_TO_ADDR
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
73507: LD_ADDR_VAR 0 9
73511: PUSH
73512: LD_EXP 50
73516: PUSH
73517: LD_VAR 0 2
73521: ARRAY
73522: PPUSH
73523: LD_INT 2
73525: PUSH
73526: LD_INT 30
73528: PUSH
73529: LD_INT 0
73531: PUSH
73532: EMPTY
73533: LIST
73534: LIST
73535: PUSH
73536: LD_INT 30
73538: PUSH
73539: LD_INT 1
73541: PUSH
73542: EMPTY
73543: LIST
73544: LIST
73545: PUSH
73546: EMPTY
73547: LIST
73548: LIST
73549: LIST
73550: PPUSH
73551: CALL_OW 72
73555: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
73556: LD_ADDR_VAR 0 3
73560: PUSH
73561: DOUBLE
73562: LD_EXP 66
73566: PUSH
73567: LD_VAR 0 2
73571: ARRAY
73572: INC
73573: ST_TO_ADDR
73574: LD_INT 1
73576: PUSH
73577: FOR_DOWNTO
73578: IFFALSE 73823
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
73580: LD_EXP 66
73584: PUSH
73585: LD_VAR 0 2
73589: ARRAY
73590: PUSH
73591: LD_VAR 0 3
73595: ARRAY
73596: PUSH
73597: LD_INT 2
73599: ARRAY
73600: PPUSH
73601: LD_EXP 66
73605: PUSH
73606: LD_VAR 0 2
73610: ARRAY
73611: PUSH
73612: LD_VAR 0 3
73616: ARRAY
73617: PUSH
73618: LD_INT 3
73620: ARRAY
73621: PPUSH
73622: CALL_OW 488
73626: PUSH
73627: LD_EXP 66
73631: PUSH
73632: LD_VAR 0 2
73636: ARRAY
73637: PUSH
73638: LD_VAR 0 3
73642: ARRAY
73643: PUSH
73644: LD_INT 2
73646: ARRAY
73647: PPUSH
73648: LD_EXP 66
73652: PUSH
73653: LD_VAR 0 2
73657: ARRAY
73658: PUSH
73659: LD_VAR 0 3
73663: ARRAY
73664: PUSH
73665: LD_INT 3
73667: ARRAY
73668: PPUSH
73669: CALL_OW 284
73673: PUSH
73674: LD_INT 0
73676: EQUAL
73677: AND
73678: IFFALSE 73733
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
73680: LD_ADDR_VAR 0 5
73684: PUSH
73685: LD_EXP 66
73689: PUSH
73690: LD_VAR 0 2
73694: ARRAY
73695: PPUSH
73696: LD_VAR 0 3
73700: PPUSH
73701: CALL_OW 3
73705: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
73706: LD_ADDR_EXP 66
73710: PUSH
73711: LD_EXP 66
73715: PPUSH
73716: LD_VAR 0 2
73720: PPUSH
73721: LD_VAR 0 5
73725: PPUSH
73726: CALL_OW 1
73730: ST_TO_ADDR
// continue ;
73731: GO 73577
// end ; if DangerAtRangeXY ( side , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
73733: LD_VAR 0 6
73737: PPUSH
73738: LD_EXP 66
73742: PUSH
73743: LD_VAR 0 2
73747: ARRAY
73748: PUSH
73749: LD_VAR 0 3
73753: ARRAY
73754: PUSH
73755: LD_INT 2
73757: ARRAY
73758: PPUSH
73759: LD_EXP 66
73763: PUSH
73764: LD_VAR 0 2
73768: ARRAY
73769: PUSH
73770: LD_VAR 0 3
73774: ARRAY
73775: PUSH
73776: LD_INT 3
73778: ARRAY
73779: PPUSH
73780: LD_INT 30
73782: PPUSH
73783: CALL 25768 0 4
73787: PUSH
73788: LD_INT 4
73790: ARRAY
73791: PUSH
73792: LD_INT 0
73794: EQUAL
73795: IFFALSE 73821
// begin target := mc_crates [ i ] [ j ] ;
73797: LD_ADDR_VAR 0 7
73801: PUSH
73802: LD_EXP 66
73806: PUSH
73807: LD_VAR 0 2
73811: ARRAY
73812: PUSH
73813: LD_VAR 0 3
73817: ARRAY
73818: ST_TO_ADDR
// break ;
73819: GO 73823
// end ; end ;
73821: GO 73577
73823: POP
73824: POP
// if not target then
73825: LD_VAR 0 7
73829: NOT
73830: IFFALSE 73834
// continue ;
73832: GO 73384
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
73834: LD_ADDR_VAR 0 8
73838: PUSH
73839: LD_EXP 69
73843: PUSH
73844: LD_VAR 0 2
73848: ARRAY
73849: PPUSH
73850: LD_INT 2
73852: PUSH
73853: LD_INT 3
73855: PUSH
73856: LD_INT 58
73858: PUSH
73859: EMPTY
73860: LIST
73861: PUSH
73862: EMPTY
73863: LIST
73864: LIST
73865: PUSH
73866: LD_INT 61
73868: PUSH
73869: EMPTY
73870: LIST
73871: PUSH
73872: LD_INT 33
73874: PUSH
73875: LD_INT 5
73877: PUSH
73878: EMPTY
73879: LIST
73880: LIST
73881: PUSH
73882: LD_INT 33
73884: PUSH
73885: LD_INT 3
73887: PUSH
73888: EMPTY
73889: LIST
73890: LIST
73891: PUSH
73892: EMPTY
73893: LIST
73894: LIST
73895: LIST
73896: LIST
73897: LIST
73898: PUSH
73899: LD_INT 2
73901: PUSH
73902: LD_INT 34
73904: PUSH
73905: LD_INT 32
73907: PUSH
73908: EMPTY
73909: LIST
73910: LIST
73911: PUSH
73912: LD_INT 34
73914: PUSH
73915: LD_INT 51
73917: PUSH
73918: EMPTY
73919: LIST
73920: LIST
73921: PUSH
73922: LD_INT 34
73924: PUSH
73925: LD_INT 12
73927: PUSH
73928: EMPTY
73929: LIST
73930: LIST
73931: PUSH
73932: EMPTY
73933: LIST
73934: LIST
73935: LIST
73936: LIST
73937: PUSH
73938: EMPTY
73939: LIST
73940: LIST
73941: PPUSH
73942: CALL_OW 72
73946: ST_TO_ADDR
// if not cargo then
73947: LD_VAR 0 8
73951: NOT
73952: IFFALSE 74658
// begin if mc_crates_collector [ i ] < 5 then
73954: LD_EXP 67
73958: PUSH
73959: LD_VAR 0 2
73963: ARRAY
73964: PUSH
73965: LD_INT 5
73967: LESS
73968: IFFALSE 74334
// begin if mc_ape [ i ] then
73970: LD_EXP 79
73974: PUSH
73975: LD_VAR 0 2
73979: ARRAY
73980: IFFALSE 74027
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
73982: LD_ADDR_VAR 0 5
73986: PUSH
73987: LD_EXP 79
73991: PUSH
73992: LD_VAR 0 2
73996: ARRAY
73997: PPUSH
73998: LD_INT 25
74000: PUSH
74001: LD_INT 16
74003: PUSH
74004: EMPTY
74005: LIST
74006: LIST
74007: PUSH
74008: LD_INT 24
74010: PUSH
74011: LD_INT 750
74013: PUSH
74014: EMPTY
74015: LIST
74016: LIST
74017: PUSH
74018: EMPTY
74019: LIST
74020: LIST
74021: PPUSH
74022: CALL_OW 72
74026: ST_TO_ADDR
// if not tmp then
74027: LD_VAR 0 5
74031: NOT
74032: IFFALSE 74079
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
74034: LD_ADDR_VAR 0 5
74038: PUSH
74039: LD_EXP 50
74043: PUSH
74044: LD_VAR 0 2
74048: ARRAY
74049: PPUSH
74050: LD_INT 25
74052: PUSH
74053: LD_INT 2
74055: PUSH
74056: EMPTY
74057: LIST
74058: LIST
74059: PUSH
74060: LD_INT 24
74062: PUSH
74063: LD_INT 750
74065: PUSH
74066: EMPTY
74067: LIST
74068: LIST
74069: PUSH
74070: EMPTY
74071: LIST
74072: LIST
74073: PPUSH
74074: CALL_OW 72
74078: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
74079: LD_EXP 79
74083: PUSH
74084: LD_VAR 0 2
74088: ARRAY
74089: PUSH
74090: LD_EXP 50
74094: PUSH
74095: LD_VAR 0 2
74099: ARRAY
74100: PPUSH
74101: LD_INT 25
74103: PUSH
74104: LD_INT 2
74106: PUSH
74107: EMPTY
74108: LIST
74109: LIST
74110: PUSH
74111: LD_INT 24
74113: PUSH
74114: LD_INT 750
74116: PUSH
74117: EMPTY
74118: LIST
74119: LIST
74120: PUSH
74121: EMPTY
74122: LIST
74123: LIST
74124: PPUSH
74125: CALL_OW 72
74129: AND
74130: PUSH
74131: LD_VAR 0 5
74135: PUSH
74136: LD_INT 5
74138: LESS
74139: AND
74140: IFFALSE 74222
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
74142: LD_ADDR_VAR 0 3
74146: PUSH
74147: LD_EXP 50
74151: PUSH
74152: LD_VAR 0 2
74156: ARRAY
74157: PPUSH
74158: LD_INT 25
74160: PUSH
74161: LD_INT 2
74163: PUSH
74164: EMPTY
74165: LIST
74166: LIST
74167: PUSH
74168: LD_INT 24
74170: PUSH
74171: LD_INT 750
74173: PUSH
74174: EMPTY
74175: LIST
74176: LIST
74177: PUSH
74178: EMPTY
74179: LIST
74180: LIST
74181: PPUSH
74182: CALL_OW 72
74186: PUSH
74187: FOR_IN
74188: IFFALSE 74220
// begin tmp := tmp union j ;
74190: LD_ADDR_VAR 0 5
74194: PUSH
74195: LD_VAR 0 5
74199: PUSH
74200: LD_VAR 0 3
74204: UNION
74205: ST_TO_ADDR
// if tmp >= 5 then
74206: LD_VAR 0 5
74210: PUSH
74211: LD_INT 5
74213: GREATEREQUAL
74214: IFFALSE 74218
// break ;
74216: GO 74220
// end ;
74218: GO 74187
74220: POP
74221: POP
// end ; if not tmp then
74222: LD_VAR 0 5
74226: NOT
74227: IFFALSE 74231
// continue ;
74229: GO 73384
// for j in tmp do
74231: LD_ADDR_VAR 0 3
74235: PUSH
74236: LD_VAR 0 5
74240: PUSH
74241: FOR_IN
74242: IFFALSE 74332
// if not GetTag ( j ) then
74244: LD_VAR 0 3
74248: PPUSH
74249: CALL_OW 110
74253: NOT
74254: IFFALSE 74330
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
74256: LD_ADDR_EXP 67
74260: PUSH
74261: LD_EXP 67
74265: PPUSH
74266: LD_VAR 0 2
74270: PUSH
74271: LD_EXP 67
74275: PUSH
74276: LD_VAR 0 2
74280: ARRAY
74281: PUSH
74282: LD_INT 1
74284: PLUS
74285: PUSH
74286: EMPTY
74287: LIST
74288: LIST
74289: PPUSH
74290: LD_VAR 0 3
74294: PPUSH
74295: CALL 24872 0 3
74299: ST_TO_ADDR
// SetTag ( j , 107 ) ;
74300: LD_VAR 0 3
74304: PPUSH
74305: LD_INT 107
74307: PPUSH
74308: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
74312: LD_EXP 67
74316: PUSH
74317: LD_VAR 0 2
74321: ARRAY
74322: PUSH
74323: LD_INT 5
74325: GREATEREQUAL
74326: IFFALSE 74330
// break ;
74328: GO 74332
// end ;
74330: GO 74241
74332: POP
74333: POP
// end ; if mc_crates_collector [ i ] and target then
74334: LD_EXP 67
74338: PUSH
74339: LD_VAR 0 2
74343: ARRAY
74344: PUSH
74345: LD_VAR 0 7
74349: AND
74350: IFFALSE 74656
// begin if mc_crates_collector [ i ] < target [ 1 ] then
74352: LD_EXP 67
74356: PUSH
74357: LD_VAR 0 2
74361: ARRAY
74362: PUSH
74363: LD_VAR 0 7
74367: PUSH
74368: LD_INT 1
74370: ARRAY
74371: LESS
74372: IFFALSE 74392
// tmp := mc_crates_collector [ i ] else
74374: LD_ADDR_VAR 0 5
74378: PUSH
74379: LD_EXP 67
74383: PUSH
74384: LD_VAR 0 2
74388: ARRAY
74389: ST_TO_ADDR
74390: GO 74406
// tmp := target [ 1 ] ;
74392: LD_ADDR_VAR 0 5
74396: PUSH
74397: LD_VAR 0 7
74401: PUSH
74402: LD_INT 1
74404: ARRAY
74405: ST_TO_ADDR
// k := 0 ;
74406: LD_ADDR_VAR 0 4
74410: PUSH
74411: LD_INT 0
74413: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
74414: LD_ADDR_VAR 0 3
74418: PUSH
74419: LD_EXP 67
74423: PUSH
74424: LD_VAR 0 2
74428: ARRAY
74429: PUSH
74430: FOR_IN
74431: IFFALSE 74654
// begin k := k + 1 ;
74433: LD_ADDR_VAR 0 4
74437: PUSH
74438: LD_VAR 0 4
74442: PUSH
74443: LD_INT 1
74445: PLUS
74446: ST_TO_ADDR
// if k > tmp then
74447: LD_VAR 0 4
74451: PUSH
74452: LD_VAR 0 5
74456: GREATER
74457: IFFALSE 74461
// break ;
74459: GO 74654
// if not GetClass ( j ) in [ 2 , 16 ] then
74461: LD_VAR 0 3
74465: PPUSH
74466: CALL_OW 257
74470: PUSH
74471: LD_INT 2
74473: PUSH
74474: LD_INT 16
74476: PUSH
74477: EMPTY
74478: LIST
74479: LIST
74480: IN
74481: NOT
74482: IFFALSE 74535
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
74484: LD_ADDR_EXP 67
74488: PUSH
74489: LD_EXP 67
74493: PPUSH
74494: LD_VAR 0 2
74498: PPUSH
74499: LD_EXP 67
74503: PUSH
74504: LD_VAR 0 2
74508: ARRAY
74509: PUSH
74510: LD_VAR 0 3
74514: DIFF
74515: PPUSH
74516: CALL_OW 1
74520: ST_TO_ADDR
// SetTag ( j , 0 ) ;
74521: LD_VAR 0 3
74525: PPUSH
74526: LD_INT 0
74528: PPUSH
74529: CALL_OW 109
// continue ;
74533: GO 74430
// end ; if IsInUnit ( j ) then
74535: LD_VAR 0 3
74539: PPUSH
74540: CALL_OW 310
74544: IFFALSE 74555
// ComExitBuilding ( j ) ;
74546: LD_VAR 0 3
74550: PPUSH
74551: CALL_OW 122
// wait ( 3 ) ;
74555: LD_INT 3
74557: PPUSH
74558: CALL_OW 67
// if HasTask ( j ) and DangerAtRangeXY ( side , target [ 2 ] , target [ 3 ] , 30 ) [ 4 ] then
74562: LD_VAR 0 3
74566: PPUSH
74567: CALL_OW 314
74571: PUSH
74572: LD_VAR 0 6
74576: PPUSH
74577: LD_VAR 0 7
74581: PUSH
74582: LD_INT 2
74584: ARRAY
74585: PPUSH
74586: LD_VAR 0 7
74590: PUSH
74591: LD_INT 3
74593: ARRAY
74594: PPUSH
74595: LD_INT 30
74597: PPUSH
74598: CALL 25768 0 4
74602: PUSH
74603: LD_INT 4
74605: ARRAY
74606: AND
74607: IFFALSE 74625
// ComStandNearbyBuilding ( j , depot ) else
74609: LD_VAR 0 3
74613: PPUSH
74614: LD_VAR 0 9
74618: PPUSH
74619: CALL 21450 0 2
74623: GO 74652
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
74625: LD_VAR 0 3
74629: PPUSH
74630: LD_VAR 0 7
74634: PUSH
74635: LD_INT 2
74637: ARRAY
74638: PPUSH
74639: LD_VAR 0 7
74643: PUSH
74644: LD_INT 3
74646: ARRAY
74647: PPUSH
74648: CALL_OW 117
// end ;
74652: GO 74430
74654: POP
74655: POP
// end ; end else
74656: GO 75188
// begin for j in cargo do
74658: LD_ADDR_VAR 0 3
74662: PUSH
74663: LD_VAR 0 8
74667: PUSH
74668: FOR_IN
74669: IFFALSE 75186
// begin if GetTag ( j ) <> 0 then
74671: LD_VAR 0 3
74675: PPUSH
74676: CALL_OW 110
74680: PUSH
74681: LD_INT 0
74683: NONEQUAL
74684: IFFALSE 74688
// continue ;
74686: GO 74668
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
74688: LD_VAR 0 3
74692: PPUSH
74693: CALL_OW 256
74697: PUSH
74698: LD_INT 1000
74700: LESS
74701: PUSH
74702: LD_VAR 0 3
74706: PPUSH
74707: LD_EXP 74
74711: PUSH
74712: LD_VAR 0 2
74716: ARRAY
74717: PPUSH
74718: CALL_OW 308
74722: NOT
74723: AND
74724: IFFALSE 74746
// ComMoveToArea ( j , mc_parking [ i ] ) ;
74726: LD_VAR 0 3
74730: PPUSH
74731: LD_EXP 74
74735: PUSH
74736: LD_VAR 0 2
74740: ARRAY
74741: PPUSH
74742: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
74746: LD_VAR 0 3
74750: PPUSH
74751: CALL_OW 256
74755: PUSH
74756: LD_INT 1000
74758: LESS
74759: PUSH
74760: LD_VAR 0 3
74764: PPUSH
74765: LD_EXP 74
74769: PUSH
74770: LD_VAR 0 2
74774: ARRAY
74775: PPUSH
74776: CALL_OW 308
74780: AND
74781: IFFALSE 74785
// continue ;
74783: GO 74668
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
74785: LD_VAR 0 3
74789: PPUSH
74790: CALL_OW 262
74794: PUSH
74795: LD_INT 2
74797: EQUAL
74798: PUSH
74799: LD_VAR 0 3
74803: PPUSH
74804: CALL_OW 261
74808: PUSH
74809: LD_INT 15
74811: LESS
74812: AND
74813: IFFALSE 74817
// continue ;
74815: GO 74668
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
74817: LD_VAR 0 3
74821: PPUSH
74822: CALL_OW 262
74826: PUSH
74827: LD_INT 1
74829: EQUAL
74830: PUSH
74831: LD_VAR 0 3
74835: PPUSH
74836: CALL_OW 261
74840: PUSH
74841: LD_INT 10
74843: LESS
74844: AND
74845: IFFALSE 75125
// begin if not depot then
74847: LD_VAR 0 9
74851: NOT
74852: IFFALSE 74856
// continue ;
74854: GO 74668
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
74856: LD_VAR 0 3
74860: PPUSH
74861: LD_VAR 0 9
74865: PPUSH
74866: LD_VAR 0 3
74870: PPUSH
74871: CALL_OW 74
74875: PPUSH
74876: CALL_OW 296
74880: PUSH
74881: LD_INT 6
74883: LESS
74884: IFFALSE 74900
// SetFuel ( j , 100 ) else
74886: LD_VAR 0 3
74890: PPUSH
74891: LD_INT 100
74893: PPUSH
74894: CALL_OW 240
74898: GO 75125
// if GetFuel ( j ) = 0 then
74900: LD_VAR 0 3
74904: PPUSH
74905: CALL_OW 261
74909: PUSH
74910: LD_INT 0
74912: EQUAL
74913: IFFALSE 75125
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
74915: LD_ADDR_EXP 69
74919: PUSH
74920: LD_EXP 69
74924: PPUSH
74925: LD_VAR 0 2
74929: PPUSH
74930: LD_EXP 69
74934: PUSH
74935: LD_VAR 0 2
74939: ARRAY
74940: PUSH
74941: LD_VAR 0 3
74945: DIFF
74946: PPUSH
74947: CALL_OW 1
74951: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
74952: LD_VAR 0 3
74956: PPUSH
74957: CALL_OW 263
74961: PUSH
74962: LD_INT 1
74964: EQUAL
74965: IFFALSE 74981
// ComExitVehicle ( IsInUnit ( j ) ) ;
74967: LD_VAR 0 3
74971: PPUSH
74972: CALL_OW 310
74976: PPUSH
74977: CALL_OW 121
// if GetControl ( j ) = control_remote then
74981: LD_VAR 0 3
74985: PPUSH
74986: CALL_OW 263
74990: PUSH
74991: LD_INT 2
74993: EQUAL
74994: IFFALSE 75005
// ComUnlink ( j ) ;
74996: LD_VAR 0 3
75000: PPUSH
75001: CALL_OW 136
// fac := MC_GetBuildings ( i , b_factory ) ;
75005: LD_ADDR_VAR 0 10
75009: PUSH
75010: LD_VAR 0 2
75014: PPUSH
75015: LD_INT 3
75017: PPUSH
75018: CALL 84764 0 2
75022: ST_TO_ADDR
// if fac then
75023: LD_VAR 0 10
75027: IFFALSE 75123
// begin for k in fac do
75029: LD_ADDR_VAR 0 4
75033: PUSH
75034: LD_VAR 0 10
75038: PUSH
75039: FOR_IN
75040: IFFALSE 75121
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
75042: LD_ADDR_VAR 0 11
75046: PUSH
75047: LD_VAR 0 10
75051: PPUSH
75052: LD_VAR 0 3
75056: PPUSH
75057: CALL_OW 265
75061: PPUSH
75062: LD_VAR 0 3
75066: PPUSH
75067: CALL_OW 262
75071: PPUSH
75072: LD_VAR 0 3
75076: PPUSH
75077: CALL_OW 263
75081: PPUSH
75082: LD_VAR 0 3
75086: PPUSH
75087: CALL_OW 264
75091: PPUSH
75092: CALL 22368 0 5
75096: ST_TO_ADDR
// if components then
75097: LD_VAR 0 11
75101: IFFALSE 75119
// begin MC_InsertProduceList ( i , components ) ;
75103: LD_VAR 0 2
75107: PPUSH
75108: LD_VAR 0 11
75112: PPUSH
75113: CALL 84309 0 2
// break ;
75117: GO 75121
// end ; end ;
75119: GO 75039
75121: POP
75122: POP
// end ; continue ;
75123: GO 74668
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
75125: LD_VAR 0 3
75129: PPUSH
75130: LD_INT 1
75132: PPUSH
75133: CALL_OW 289
75137: PUSH
75138: LD_INT 100
75140: LESS
75141: PUSH
75142: LD_VAR 0 3
75146: PPUSH
75147: CALL_OW 314
75151: NOT
75152: AND
75153: IFFALSE 75182
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
75155: LD_VAR 0 3
75159: PPUSH
75160: LD_VAR 0 7
75164: PUSH
75165: LD_INT 2
75167: ARRAY
75168: PPUSH
75169: LD_VAR 0 7
75173: PUSH
75174: LD_INT 3
75176: ARRAY
75177: PPUSH
75178: CALL_OW 117
// break ;
75182: GO 75186
// end ;
75184: GO 74668
75186: POP
75187: POP
// end ; end ;
75188: GO 73384
75190: POP
75191: POP
// end ;
75192: LD_VAR 0 1
75196: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
75197: LD_INT 0
75199: PPUSH
75200: PPUSH
75201: PPUSH
75202: PPUSH
// if not mc_bases then
75203: LD_EXP 50
75207: NOT
75208: IFFALSE 75212
// exit ;
75210: GO 75373
// for i = 1 to mc_bases do
75212: LD_ADDR_VAR 0 2
75216: PUSH
75217: DOUBLE
75218: LD_INT 1
75220: DEC
75221: ST_TO_ADDR
75222: LD_EXP 50
75226: PUSH
75227: FOR_TO
75228: IFFALSE 75371
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
75230: LD_ADDR_VAR 0 4
75234: PUSH
75235: LD_EXP 69
75239: PUSH
75240: LD_VAR 0 2
75244: ARRAY
75245: PUSH
75246: LD_EXP 72
75250: PUSH
75251: LD_VAR 0 2
75255: ARRAY
75256: UNION
75257: PPUSH
75258: LD_INT 33
75260: PUSH
75261: LD_INT 2
75263: PUSH
75264: EMPTY
75265: LIST
75266: LIST
75267: PPUSH
75268: CALL_OW 72
75272: ST_TO_ADDR
// if tmp then
75273: LD_VAR 0 4
75277: IFFALSE 75369
// for j in tmp do
75279: LD_ADDR_VAR 0 3
75283: PUSH
75284: LD_VAR 0 4
75288: PUSH
75289: FOR_IN
75290: IFFALSE 75367
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
75292: LD_VAR 0 3
75296: PPUSH
75297: CALL_OW 312
75301: NOT
75302: PUSH
75303: LD_VAR 0 3
75307: PPUSH
75308: CALL_OW 256
75312: PUSH
75313: LD_INT 250
75315: GREATEREQUAL
75316: AND
75317: IFFALSE 75330
// Connect ( j ) else
75319: LD_VAR 0 3
75323: PPUSH
75324: CALL 27843 0 1
75328: GO 75365
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
75330: LD_VAR 0 3
75334: PPUSH
75335: CALL_OW 256
75339: PUSH
75340: LD_INT 250
75342: LESS
75343: PUSH
75344: LD_VAR 0 3
75348: PPUSH
75349: CALL_OW 312
75353: AND
75354: IFFALSE 75365
// ComUnlink ( j ) ;
75356: LD_VAR 0 3
75360: PPUSH
75361: CALL_OW 136
75365: GO 75289
75367: POP
75368: POP
// end ;
75369: GO 75227
75371: POP
75372: POP
// end ;
75373: LD_VAR 0 1
75377: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
75378: LD_INT 0
75380: PPUSH
75381: PPUSH
75382: PPUSH
75383: PPUSH
75384: PPUSH
// if not mc_bases then
75385: LD_EXP 50
75389: NOT
75390: IFFALSE 75394
// exit ;
75392: GO 75839
// for i = 1 to mc_bases do
75394: LD_ADDR_VAR 0 2
75398: PUSH
75399: DOUBLE
75400: LD_INT 1
75402: DEC
75403: ST_TO_ADDR
75404: LD_EXP 50
75408: PUSH
75409: FOR_TO
75410: IFFALSE 75837
// begin if not mc_produce [ i ] then
75412: LD_EXP 71
75416: PUSH
75417: LD_VAR 0 2
75421: ARRAY
75422: NOT
75423: IFFALSE 75427
// continue ;
75425: GO 75409
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
75427: LD_ADDR_VAR 0 5
75431: PUSH
75432: LD_EXP 50
75436: PUSH
75437: LD_VAR 0 2
75441: ARRAY
75442: PPUSH
75443: LD_INT 30
75445: PUSH
75446: LD_INT 3
75448: PUSH
75449: EMPTY
75450: LIST
75451: LIST
75452: PPUSH
75453: CALL_OW 72
75457: ST_TO_ADDR
// if not fac then
75458: LD_VAR 0 5
75462: NOT
75463: IFFALSE 75467
// continue ;
75465: GO 75409
// for j in fac do
75467: LD_ADDR_VAR 0 3
75471: PUSH
75472: LD_VAR 0 5
75476: PUSH
75477: FOR_IN
75478: IFFALSE 75833
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] then
75480: LD_VAR 0 3
75484: PPUSH
75485: CALL_OW 461
75489: PUSH
75490: LD_INT 2
75492: NONEQUAL
75493: PUSH
75494: LD_VAR 0 3
75498: PPUSH
75499: LD_INT 15
75501: PPUSH
75502: CALL 27471 0 2
75506: PUSH
75507: LD_INT 4
75509: ARRAY
75510: OR
75511: IFFALSE 75515
// continue ;
75513: GO 75477
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
75515: LD_VAR 0 3
75519: PPUSH
75520: LD_EXP 71
75524: PUSH
75525: LD_VAR 0 2
75529: ARRAY
75530: PUSH
75531: LD_INT 1
75533: ARRAY
75534: PUSH
75535: LD_INT 1
75537: ARRAY
75538: PPUSH
75539: LD_EXP 71
75543: PUSH
75544: LD_VAR 0 2
75548: ARRAY
75549: PUSH
75550: LD_INT 1
75552: ARRAY
75553: PUSH
75554: LD_INT 2
75556: ARRAY
75557: PPUSH
75558: LD_EXP 71
75562: PUSH
75563: LD_VAR 0 2
75567: ARRAY
75568: PUSH
75569: LD_INT 1
75571: ARRAY
75572: PUSH
75573: LD_INT 3
75575: ARRAY
75576: PPUSH
75577: LD_EXP 71
75581: PUSH
75582: LD_VAR 0 2
75586: ARRAY
75587: PUSH
75588: LD_INT 1
75590: ARRAY
75591: PUSH
75592: LD_INT 4
75594: ARRAY
75595: PPUSH
75596: CALL_OW 448
75600: PUSH
75601: LD_VAR 0 3
75605: PPUSH
75606: LD_EXP 71
75610: PUSH
75611: LD_VAR 0 2
75615: ARRAY
75616: PUSH
75617: LD_INT 1
75619: ARRAY
75620: PUSH
75621: LD_INT 1
75623: ARRAY
75624: PUSH
75625: LD_EXP 71
75629: PUSH
75630: LD_VAR 0 2
75634: ARRAY
75635: PUSH
75636: LD_INT 1
75638: ARRAY
75639: PUSH
75640: LD_INT 2
75642: ARRAY
75643: PUSH
75644: LD_EXP 71
75648: PUSH
75649: LD_VAR 0 2
75653: ARRAY
75654: PUSH
75655: LD_INT 1
75657: ARRAY
75658: PUSH
75659: LD_INT 3
75661: ARRAY
75662: PUSH
75663: LD_EXP 71
75667: PUSH
75668: LD_VAR 0 2
75672: ARRAY
75673: PUSH
75674: LD_INT 1
75676: ARRAY
75677: PUSH
75678: LD_INT 4
75680: ARRAY
75681: PUSH
75682: EMPTY
75683: LIST
75684: LIST
75685: LIST
75686: LIST
75687: PPUSH
75688: CALL 31238 0 2
75692: AND
75693: IFFALSE 75831
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
75695: LD_VAR 0 3
75699: PPUSH
75700: LD_EXP 71
75704: PUSH
75705: LD_VAR 0 2
75709: ARRAY
75710: PUSH
75711: LD_INT 1
75713: ARRAY
75714: PUSH
75715: LD_INT 1
75717: ARRAY
75718: PPUSH
75719: LD_EXP 71
75723: PUSH
75724: LD_VAR 0 2
75728: ARRAY
75729: PUSH
75730: LD_INT 1
75732: ARRAY
75733: PUSH
75734: LD_INT 2
75736: ARRAY
75737: PPUSH
75738: LD_EXP 71
75742: PUSH
75743: LD_VAR 0 2
75747: ARRAY
75748: PUSH
75749: LD_INT 1
75751: ARRAY
75752: PUSH
75753: LD_INT 3
75755: ARRAY
75756: PPUSH
75757: LD_EXP 71
75761: PUSH
75762: LD_VAR 0 2
75766: ARRAY
75767: PUSH
75768: LD_INT 1
75770: ARRAY
75771: PUSH
75772: LD_INT 4
75774: ARRAY
75775: PPUSH
75776: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
75780: LD_ADDR_VAR 0 4
75784: PUSH
75785: LD_EXP 71
75789: PUSH
75790: LD_VAR 0 2
75794: ARRAY
75795: PPUSH
75796: LD_INT 1
75798: PPUSH
75799: CALL_OW 3
75803: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
75804: LD_ADDR_EXP 71
75808: PUSH
75809: LD_EXP 71
75813: PPUSH
75814: LD_VAR 0 2
75818: PPUSH
75819: LD_VAR 0 4
75823: PPUSH
75824: CALL_OW 1
75828: ST_TO_ADDR
// break ;
75829: GO 75833
// end ; end ;
75831: GO 75477
75833: POP
75834: POP
// end ;
75835: GO 75409
75837: POP
75838: POP
// end ;
75839: LD_VAR 0 1
75843: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
75844: LD_INT 0
75846: PPUSH
75847: PPUSH
75848: PPUSH
// if not mc_bases then
75849: LD_EXP 50
75853: NOT
75854: IFFALSE 75858
// exit ;
75856: GO 75947
// for i = 1 to mc_bases do
75858: LD_ADDR_VAR 0 2
75862: PUSH
75863: DOUBLE
75864: LD_INT 1
75866: DEC
75867: ST_TO_ADDR
75868: LD_EXP 50
75872: PUSH
75873: FOR_TO
75874: IFFALSE 75945
// begin if mc_attack [ i ] then
75876: LD_EXP 70
75880: PUSH
75881: LD_VAR 0 2
75885: ARRAY
75886: IFFALSE 75943
// begin tmp := mc_attack [ i ] [ 1 ] ;
75888: LD_ADDR_VAR 0 3
75892: PUSH
75893: LD_EXP 70
75897: PUSH
75898: LD_VAR 0 2
75902: ARRAY
75903: PUSH
75904: LD_INT 1
75906: ARRAY
75907: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
75908: LD_ADDR_EXP 70
75912: PUSH
75913: LD_EXP 70
75917: PPUSH
75918: LD_VAR 0 2
75922: PPUSH
75923: EMPTY
75924: PPUSH
75925: CALL_OW 1
75929: ST_TO_ADDR
// Attack ( tmp ) ;
75930: LD_VAR 0 3
75934: PPUSH
75935: CALL 109689 0 1
// exit ;
75939: POP
75940: POP
75941: GO 75947
// end ; end ;
75943: GO 75873
75945: POP
75946: POP
// end ;
75947: LD_VAR 0 1
75951: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
75952: LD_INT 0
75954: PPUSH
75955: PPUSH
75956: PPUSH
75957: PPUSH
75958: PPUSH
75959: PPUSH
75960: PPUSH
// if not mc_bases then
75961: LD_EXP 50
75965: NOT
75966: IFFALSE 75970
// exit ;
75968: GO 76827
// for i = 1 to mc_bases do
75970: LD_ADDR_VAR 0 2
75974: PUSH
75975: DOUBLE
75976: LD_INT 1
75978: DEC
75979: ST_TO_ADDR
75980: LD_EXP 50
75984: PUSH
75985: FOR_TO
75986: IFFALSE 76825
// begin if not mc_bases [ i ] then
75988: LD_EXP 50
75992: PUSH
75993: LD_VAR 0 2
75997: ARRAY
75998: NOT
75999: IFFALSE 76003
// continue ;
76001: GO 75985
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
76003: LD_ADDR_VAR 0 7
76007: PUSH
76008: LD_EXP 50
76012: PUSH
76013: LD_VAR 0 2
76017: ARRAY
76018: PUSH
76019: LD_INT 1
76021: ARRAY
76022: PPUSH
76023: CALL 21672 0 1
76027: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
76028: LD_ADDR_EXP 73
76032: PUSH
76033: LD_EXP 73
76037: PPUSH
76038: LD_VAR 0 2
76042: PPUSH
76043: LD_EXP 50
76047: PUSH
76048: LD_VAR 0 2
76052: ARRAY
76053: PUSH
76054: LD_INT 1
76056: ARRAY
76057: PPUSH
76058: CALL_OW 255
76062: PPUSH
76063: LD_EXP 75
76067: PUSH
76068: LD_VAR 0 2
76072: ARRAY
76073: PPUSH
76074: CALL 21637 0 2
76078: PPUSH
76079: CALL_OW 1
76083: ST_TO_ADDR
// if not mc_scan [ i ] then
76084: LD_EXP 73
76088: PUSH
76089: LD_VAR 0 2
76093: ARRAY
76094: NOT
76095: IFFALSE 76273
// begin mc_is_defending := Replace ( mc_is_defending , i , false ) ;
76097: LD_ADDR_EXP 93
76101: PUSH
76102: LD_EXP 93
76106: PPUSH
76107: LD_VAR 0 2
76111: PPUSH
76112: LD_INT 0
76114: PPUSH
76115: CALL_OW 1
76119: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
76120: LD_ADDR_VAR 0 4
76124: PUSH
76125: LD_EXP 50
76129: PUSH
76130: LD_VAR 0 2
76134: ARRAY
76135: PPUSH
76136: LD_INT 2
76138: PUSH
76139: LD_INT 25
76141: PUSH
76142: LD_INT 5
76144: PUSH
76145: EMPTY
76146: LIST
76147: LIST
76148: PUSH
76149: LD_INT 25
76151: PUSH
76152: LD_INT 8
76154: PUSH
76155: EMPTY
76156: LIST
76157: LIST
76158: PUSH
76159: LD_INT 25
76161: PUSH
76162: LD_INT 9
76164: PUSH
76165: EMPTY
76166: LIST
76167: LIST
76168: PUSH
76169: EMPTY
76170: LIST
76171: LIST
76172: LIST
76173: LIST
76174: PPUSH
76175: CALL_OW 72
76179: ST_TO_ADDR
// if not tmp then
76180: LD_VAR 0 4
76184: NOT
76185: IFFALSE 76189
// continue ;
76187: GO 75985
// for j in tmp do
76189: LD_ADDR_VAR 0 3
76193: PUSH
76194: LD_VAR 0 4
76198: PUSH
76199: FOR_IN
76200: IFFALSE 76271
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
76202: LD_VAR 0 3
76206: PPUSH
76207: CALL_OW 310
76211: PPUSH
76212: CALL_OW 266
76216: PUSH
76217: LD_INT 5
76219: EQUAL
76220: PUSH
76221: LD_VAR 0 3
76225: PPUSH
76226: CALL_OW 257
76230: PUSH
76231: LD_INT 1
76233: EQUAL
76234: AND
76235: PUSH
76236: LD_VAR 0 3
76240: PPUSH
76241: CALL_OW 459
76245: NOT
76246: AND
76247: PUSH
76248: LD_VAR 0 7
76252: AND
76253: IFFALSE 76269
// ComChangeProfession ( j , class ) ;
76255: LD_VAR 0 3
76259: PPUSH
76260: LD_VAR 0 7
76264: PPUSH
76265: CALL_OW 123
76269: GO 76199
76271: POP
76272: POP
// end ; if mc_scan [ i ] and not mc_is_defending [ i ] and not mc_defender [ i ] and ( UnitFilter ( mc_bases [ i ] , [ [ f_ok ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) < 4 or UnitFilter ( mc_bases [ i ] , [ [ f_not , [ f_lives , 1000 ] ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ) then
76273: LD_EXP 73
76277: PUSH
76278: LD_VAR 0 2
76282: ARRAY
76283: PUSH
76284: LD_EXP 93
76288: PUSH
76289: LD_VAR 0 2
76293: ARRAY
76294: NOT
76295: AND
76296: PUSH
76297: LD_EXP 72
76301: PUSH
76302: LD_VAR 0 2
76306: ARRAY
76307: NOT
76308: AND
76309: PUSH
76310: LD_EXP 50
76314: PUSH
76315: LD_VAR 0 2
76319: ARRAY
76320: PPUSH
76321: LD_INT 50
76323: PUSH
76324: EMPTY
76325: LIST
76326: PUSH
76327: LD_INT 2
76329: PUSH
76330: LD_INT 30
76332: PUSH
76333: LD_INT 32
76335: PUSH
76336: EMPTY
76337: LIST
76338: LIST
76339: PUSH
76340: LD_INT 30
76342: PUSH
76343: LD_INT 33
76345: PUSH
76346: EMPTY
76347: LIST
76348: LIST
76349: PUSH
76350: LD_INT 30
76352: PUSH
76353: LD_INT 4
76355: PUSH
76356: EMPTY
76357: LIST
76358: LIST
76359: PUSH
76360: LD_INT 30
76362: PUSH
76363: LD_INT 5
76365: PUSH
76366: EMPTY
76367: LIST
76368: LIST
76369: PUSH
76370: EMPTY
76371: LIST
76372: LIST
76373: LIST
76374: LIST
76375: LIST
76376: PUSH
76377: EMPTY
76378: LIST
76379: LIST
76380: PPUSH
76381: CALL_OW 72
76385: PUSH
76386: LD_INT 4
76388: LESS
76389: PUSH
76390: LD_EXP 50
76394: PUSH
76395: LD_VAR 0 2
76399: ARRAY
76400: PPUSH
76401: LD_INT 3
76403: PUSH
76404: LD_INT 24
76406: PUSH
76407: LD_INT 1000
76409: PUSH
76410: EMPTY
76411: LIST
76412: LIST
76413: PUSH
76414: EMPTY
76415: LIST
76416: LIST
76417: PUSH
76418: LD_INT 2
76420: PUSH
76421: LD_INT 30
76423: PUSH
76424: LD_INT 0
76426: PUSH
76427: EMPTY
76428: LIST
76429: LIST
76430: PUSH
76431: LD_INT 30
76433: PUSH
76434: LD_INT 1
76436: PUSH
76437: EMPTY
76438: LIST
76439: LIST
76440: PUSH
76441: EMPTY
76442: LIST
76443: LIST
76444: LIST
76445: PUSH
76446: EMPTY
76447: LIST
76448: LIST
76449: PPUSH
76450: CALL_OW 72
76454: OR
76455: AND
76456: IFFALSE 76707
// begin mc_is_defending := Replace ( mc_is_defending , i , true ) ;
76458: LD_ADDR_EXP 93
76462: PUSH
76463: LD_EXP 93
76467: PPUSH
76468: LD_VAR 0 2
76472: PPUSH
76473: LD_INT 1
76475: PPUSH
76476: CALL_OW 1
76480: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
76481: LD_ADDR_VAR 0 4
76485: PUSH
76486: LD_EXP 50
76490: PUSH
76491: LD_VAR 0 2
76495: ARRAY
76496: PPUSH
76497: LD_INT 2
76499: PUSH
76500: LD_INT 25
76502: PUSH
76503: LD_INT 1
76505: PUSH
76506: EMPTY
76507: LIST
76508: LIST
76509: PUSH
76510: LD_INT 25
76512: PUSH
76513: LD_INT 5
76515: PUSH
76516: EMPTY
76517: LIST
76518: LIST
76519: PUSH
76520: LD_INT 25
76522: PUSH
76523: LD_INT 8
76525: PUSH
76526: EMPTY
76527: LIST
76528: LIST
76529: PUSH
76530: LD_INT 25
76532: PUSH
76533: LD_INT 9
76535: PUSH
76536: EMPTY
76537: LIST
76538: LIST
76539: PUSH
76540: EMPTY
76541: LIST
76542: LIST
76543: LIST
76544: LIST
76545: LIST
76546: PPUSH
76547: CALL_OW 72
76551: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
76552: LD_ADDR_VAR 0 4
76556: PUSH
76557: LD_VAR 0 4
76561: PUSH
76562: LD_VAR 0 4
76566: PPUSH
76567: LD_INT 18
76569: PPUSH
76570: CALL 54141 0 2
76574: DIFF
76575: ST_TO_ADDR
// if not tmp and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
76576: LD_VAR 0 4
76580: NOT
76581: PUSH
76582: LD_EXP 50
76586: PUSH
76587: LD_VAR 0 2
76591: ARRAY
76592: PPUSH
76593: LD_INT 2
76595: PUSH
76596: LD_INT 30
76598: PUSH
76599: LD_INT 4
76601: PUSH
76602: EMPTY
76603: LIST
76604: LIST
76605: PUSH
76606: LD_INT 30
76608: PUSH
76609: LD_INT 5
76611: PUSH
76612: EMPTY
76613: LIST
76614: LIST
76615: PUSH
76616: EMPTY
76617: LIST
76618: LIST
76619: LIST
76620: PPUSH
76621: CALL_OW 72
76625: NOT
76626: AND
76627: IFFALSE 76689
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] ] ) ;
76629: LD_ADDR_VAR 0 4
76633: PUSH
76634: LD_EXP 50
76638: PUSH
76639: LD_VAR 0 2
76643: ARRAY
76644: PPUSH
76645: LD_INT 2
76647: PUSH
76648: LD_INT 25
76650: PUSH
76651: LD_INT 2
76653: PUSH
76654: EMPTY
76655: LIST
76656: LIST
76657: PUSH
76658: LD_INT 25
76660: PUSH
76661: LD_INT 3
76663: PUSH
76664: EMPTY
76665: LIST
76666: LIST
76667: PUSH
76668: LD_INT 25
76670: PUSH
76671: LD_INT 4
76673: PUSH
76674: EMPTY
76675: LIST
76676: LIST
76677: PUSH
76678: EMPTY
76679: LIST
76680: LIST
76681: LIST
76682: LIST
76683: PPUSH
76684: CALL_OW 72
76688: ST_TO_ADDR
// BasicDefend ( i , tmp ) ;
76689: LD_VAR 0 2
76693: PPUSH
76694: LD_VAR 0 4
76698: PPUSH
76699: CALL 114398 0 2
// exit ;
76703: POP
76704: POP
76705: GO 76827
// end ; if mc_scan [ i ] and not mc_is_defending [ i ] and mc_defender [ i ] then
76707: LD_EXP 73
76711: PUSH
76712: LD_VAR 0 2
76716: ARRAY
76717: PUSH
76718: LD_EXP 93
76722: PUSH
76723: LD_VAR 0 2
76727: ARRAY
76728: NOT
76729: AND
76730: PUSH
76731: LD_EXP 72
76735: PUSH
76736: LD_VAR 0 2
76740: ARRAY
76741: AND
76742: IFFALSE 76823
// begin mc_is_defending := Replace ( mc_is_defending , i , true ) ;
76744: LD_ADDR_EXP 93
76748: PUSH
76749: LD_EXP 93
76753: PPUSH
76754: LD_VAR 0 2
76758: PPUSH
76759: LD_INT 1
76761: PPUSH
76762: CALL_OW 1
76766: ST_TO_ADDR
// tmp := mc_defender [ i ] ;
76767: LD_ADDR_VAR 0 4
76771: PUSH
76772: LD_EXP 72
76776: PUSH
76777: LD_VAR 0 2
76781: ARRAY
76782: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
76783: LD_ADDR_EXP 72
76787: PUSH
76788: LD_EXP 72
76792: PPUSH
76793: LD_VAR 0 2
76797: PPUSH
76798: EMPTY
76799: PPUSH
76800: CALL_OW 1
76804: ST_TO_ADDR
// Defend ( i , tmp ) ;
76805: LD_VAR 0 2
76809: PPUSH
76810: LD_VAR 0 4
76814: PPUSH
76815: CALL 114994 0 2
// exit ;
76819: POP
76820: POP
76821: GO 76827
// end ; end ;
76823: GO 75985
76825: POP
76826: POP
// end ;
76827: LD_VAR 0 1
76831: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
76832: LD_INT 0
76834: PPUSH
76835: PPUSH
76836: PPUSH
76837: PPUSH
76838: PPUSH
76839: PPUSH
76840: PPUSH
76841: PPUSH
76842: PPUSH
76843: PPUSH
76844: PPUSH
// if not mc_bases then
76845: LD_EXP 50
76849: NOT
76850: IFFALSE 76854
// exit ;
76852: GO 77941
// for i = 1 to mc_bases do
76854: LD_ADDR_VAR 0 2
76858: PUSH
76859: DOUBLE
76860: LD_INT 1
76862: DEC
76863: ST_TO_ADDR
76864: LD_EXP 50
76868: PUSH
76869: FOR_TO
76870: IFFALSE 77939
// begin tmp := mc_lab [ i ] ;
76872: LD_ADDR_VAR 0 6
76876: PUSH
76877: LD_EXP 83
76881: PUSH
76882: LD_VAR 0 2
76886: ARRAY
76887: ST_TO_ADDR
// if not tmp then
76888: LD_VAR 0 6
76892: NOT
76893: IFFALSE 76897
// continue ;
76895: GO 76869
// idle_lab := 0 ;
76897: LD_ADDR_VAR 0 11
76901: PUSH
76902: LD_INT 0
76904: ST_TO_ADDR
// for j in tmp do
76905: LD_ADDR_VAR 0 3
76909: PUSH
76910: LD_VAR 0 6
76914: PUSH
76915: FOR_IN
76916: IFFALSE 77935
// begin researching := false ;
76918: LD_ADDR_VAR 0 10
76922: PUSH
76923: LD_INT 0
76925: ST_TO_ADDR
// side := GetSide ( j ) ;
76926: LD_ADDR_VAR 0 4
76930: PUSH
76931: LD_VAR 0 3
76935: PPUSH
76936: CALL_OW 255
76940: ST_TO_ADDR
// if not mc_tech [ side ] then
76941: LD_EXP 77
76945: PUSH
76946: LD_VAR 0 4
76950: ARRAY
76951: NOT
76952: IFFALSE 76956
// continue ;
76954: GO 76915
// if BuildingStatus ( j ) = bs_idle then
76956: LD_VAR 0 3
76960: PPUSH
76961: CALL_OW 461
76965: PUSH
76966: LD_INT 2
76968: EQUAL
76969: IFFALSE 77157
// begin if idle_lab and UnitsInside ( j ) < 6 then
76971: LD_VAR 0 11
76975: PUSH
76976: LD_VAR 0 3
76980: PPUSH
76981: CALL_OW 313
76985: PUSH
76986: LD_INT 6
76988: LESS
76989: AND
76990: IFFALSE 77061
// begin tmp2 := UnitsInside ( idle_lab ) ;
76992: LD_ADDR_VAR 0 9
76996: PUSH
76997: LD_VAR 0 11
77001: PPUSH
77002: CALL_OW 313
77006: ST_TO_ADDR
// if tmp2 then
77007: LD_VAR 0 9
77011: IFFALSE 77053
// for x in tmp2 do
77013: LD_ADDR_VAR 0 7
77017: PUSH
77018: LD_VAR 0 9
77022: PUSH
77023: FOR_IN
77024: IFFALSE 77051
// begin ComExitBuilding ( x ) ;
77026: LD_VAR 0 7
77030: PPUSH
77031: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
77035: LD_VAR 0 7
77039: PPUSH
77040: LD_VAR 0 3
77044: PPUSH
77045: CALL_OW 180
// end ;
77049: GO 77023
77051: POP
77052: POP
// idle_lab := 0 ;
77053: LD_ADDR_VAR 0 11
77057: PUSH
77058: LD_INT 0
77060: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
77061: LD_ADDR_VAR 0 5
77065: PUSH
77066: LD_EXP 77
77070: PUSH
77071: LD_VAR 0 4
77075: ARRAY
77076: PUSH
77077: FOR_IN
77078: IFFALSE 77138
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
77080: LD_VAR 0 3
77084: PPUSH
77085: LD_VAR 0 5
77089: PPUSH
77090: CALL_OW 430
77094: PUSH
77095: LD_VAR 0 4
77099: PPUSH
77100: LD_VAR 0 5
77104: PPUSH
77105: CALL 20742 0 2
77109: AND
77110: IFFALSE 77136
// begin researching := true ;
77112: LD_ADDR_VAR 0 10
77116: PUSH
77117: LD_INT 1
77119: ST_TO_ADDR
// ComResearch ( j , t ) ;
77120: LD_VAR 0 3
77124: PPUSH
77125: LD_VAR 0 5
77129: PPUSH
77130: CALL_OW 124
// break ;
77134: GO 77138
// end ;
77136: GO 77077
77138: POP
77139: POP
// if not researching then
77140: LD_VAR 0 10
77144: NOT
77145: IFFALSE 77157
// idle_lab := j ;
77147: LD_ADDR_VAR 0 11
77151: PUSH
77152: LD_VAR 0 3
77156: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
77157: LD_VAR 0 3
77161: PPUSH
77162: CALL_OW 461
77166: PUSH
77167: LD_INT 10
77169: EQUAL
77170: IFFALSE 77758
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
77172: LD_EXP 79
77176: PUSH
77177: LD_VAR 0 2
77181: ARRAY
77182: NOT
77183: PUSH
77184: LD_EXP 80
77188: PUSH
77189: LD_VAR 0 2
77193: ARRAY
77194: NOT
77195: AND
77196: PUSH
77197: LD_EXP 77
77201: PUSH
77202: LD_VAR 0 4
77206: ARRAY
77207: PUSH
77208: LD_INT 1
77210: GREATER
77211: AND
77212: IFFALSE 77343
// begin ComCancel ( j ) ;
77214: LD_VAR 0 3
77218: PPUSH
77219: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
77223: LD_ADDR_EXP 77
77227: PUSH
77228: LD_EXP 77
77232: PPUSH
77233: LD_VAR 0 4
77237: PPUSH
77238: LD_EXP 77
77242: PUSH
77243: LD_VAR 0 4
77247: ARRAY
77248: PPUSH
77249: LD_EXP 77
77253: PUSH
77254: LD_VAR 0 4
77258: ARRAY
77259: PUSH
77260: LD_INT 1
77262: MINUS
77263: PPUSH
77264: LD_EXP 77
77268: PUSH
77269: LD_VAR 0 4
77273: ARRAY
77274: PPUSH
77275: LD_INT 0
77277: PPUSH
77278: CALL 24290 0 4
77282: PPUSH
77283: CALL_OW 1
77287: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
77288: LD_ADDR_EXP 77
77292: PUSH
77293: LD_EXP 77
77297: PPUSH
77298: LD_VAR 0 4
77302: PPUSH
77303: LD_EXP 77
77307: PUSH
77308: LD_VAR 0 4
77312: ARRAY
77313: PPUSH
77314: LD_EXP 77
77318: PUSH
77319: LD_VAR 0 4
77323: ARRAY
77324: PPUSH
77325: LD_INT 1
77327: PPUSH
77328: LD_INT 0
77330: PPUSH
77331: CALL 24290 0 4
77335: PPUSH
77336: CALL_OW 1
77340: ST_TO_ADDR
// continue ;
77341: GO 76915
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
77343: LD_EXP 79
77347: PUSH
77348: LD_VAR 0 2
77352: ARRAY
77353: PUSH
77354: LD_EXP 80
77358: PUSH
77359: LD_VAR 0 2
77363: ARRAY
77364: NOT
77365: AND
77366: IFFALSE 77493
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
77368: LD_ADDR_EXP 80
77372: PUSH
77373: LD_EXP 80
77377: PPUSH
77378: LD_VAR 0 2
77382: PUSH
77383: LD_EXP 80
77387: PUSH
77388: LD_VAR 0 2
77392: ARRAY
77393: PUSH
77394: LD_INT 1
77396: PLUS
77397: PUSH
77398: EMPTY
77399: LIST
77400: LIST
77401: PPUSH
77402: LD_EXP 79
77406: PUSH
77407: LD_VAR 0 2
77411: ARRAY
77412: PUSH
77413: LD_INT 1
77415: ARRAY
77416: PPUSH
77417: CALL 24872 0 3
77421: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
77422: LD_EXP 79
77426: PUSH
77427: LD_VAR 0 2
77431: ARRAY
77432: PUSH
77433: LD_INT 1
77435: ARRAY
77436: PPUSH
77437: LD_INT 112
77439: PPUSH
77440: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
77444: LD_ADDR_VAR 0 9
77448: PUSH
77449: LD_EXP 79
77453: PUSH
77454: LD_VAR 0 2
77458: ARRAY
77459: PPUSH
77460: LD_INT 1
77462: PPUSH
77463: CALL_OW 3
77467: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
77468: LD_ADDR_EXP 79
77472: PUSH
77473: LD_EXP 79
77477: PPUSH
77478: LD_VAR 0 2
77482: PPUSH
77483: LD_VAR 0 9
77487: PPUSH
77488: CALL_OW 1
77492: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
77493: LD_EXP 79
77497: PUSH
77498: LD_VAR 0 2
77502: ARRAY
77503: PUSH
77504: LD_EXP 80
77508: PUSH
77509: LD_VAR 0 2
77513: ARRAY
77514: AND
77515: PUSH
77516: LD_EXP 80
77520: PUSH
77521: LD_VAR 0 2
77525: ARRAY
77526: PUSH
77527: LD_INT 1
77529: ARRAY
77530: PPUSH
77531: CALL_OW 310
77535: NOT
77536: AND
77537: PUSH
77538: LD_VAR 0 3
77542: PPUSH
77543: CALL_OW 313
77547: PUSH
77548: LD_INT 6
77550: EQUAL
77551: AND
77552: IFFALSE 77608
// begin tmp2 := UnitsInside ( j ) ;
77554: LD_ADDR_VAR 0 9
77558: PUSH
77559: LD_VAR 0 3
77563: PPUSH
77564: CALL_OW 313
77568: ST_TO_ADDR
// if tmp2 = 6 then
77569: LD_VAR 0 9
77573: PUSH
77574: LD_INT 6
77576: EQUAL
77577: IFFALSE 77608
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
77579: LD_VAR 0 9
77583: PUSH
77584: LD_INT 1
77586: ARRAY
77587: PPUSH
77588: LD_INT 112
77590: PPUSH
77591: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
77595: LD_VAR 0 9
77599: PUSH
77600: LD_INT 1
77602: ARRAY
77603: PPUSH
77604: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
77608: LD_EXP 80
77612: PUSH
77613: LD_VAR 0 2
77617: ARRAY
77618: PUSH
77619: LD_EXP 80
77623: PUSH
77624: LD_VAR 0 2
77628: ARRAY
77629: PUSH
77630: LD_INT 1
77632: ARRAY
77633: PPUSH
77634: CALL_OW 314
77638: NOT
77639: AND
77640: PUSH
77641: LD_EXP 80
77645: PUSH
77646: LD_VAR 0 2
77650: ARRAY
77651: PUSH
77652: LD_INT 1
77654: ARRAY
77655: PPUSH
77656: CALL_OW 310
77660: NOT
77661: AND
77662: IFFALSE 77688
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
77664: LD_EXP 80
77668: PUSH
77669: LD_VAR 0 2
77673: ARRAY
77674: PUSH
77675: LD_INT 1
77677: ARRAY
77678: PPUSH
77679: LD_VAR 0 3
77683: PPUSH
77684: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
77688: LD_EXP 80
77692: PUSH
77693: LD_VAR 0 2
77697: ARRAY
77698: PUSH
77699: LD_INT 1
77701: ARRAY
77702: PPUSH
77703: CALL_OW 310
77707: PUSH
77708: LD_EXP 80
77712: PUSH
77713: LD_VAR 0 2
77717: ARRAY
77718: PUSH
77719: LD_INT 1
77721: ARRAY
77722: PPUSH
77723: CALL_OW 310
77727: PPUSH
77728: CALL_OW 461
77732: PUSH
77733: LD_INT 3
77735: NONEQUAL
77736: AND
77737: IFFALSE 77758
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
77739: LD_EXP 80
77743: PUSH
77744: LD_VAR 0 2
77748: ARRAY
77749: PUSH
77750: LD_INT 1
77752: ARRAY
77753: PPUSH
77754: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
77758: LD_VAR 0 3
77762: PPUSH
77763: CALL_OW 461
77767: PUSH
77768: LD_INT 6
77770: EQUAL
77771: PUSH
77772: LD_VAR 0 6
77776: PUSH
77777: LD_INT 1
77779: GREATER
77780: AND
77781: IFFALSE 77933
// begin sci := [ ] ;
77783: LD_ADDR_VAR 0 8
77787: PUSH
77788: EMPTY
77789: ST_TO_ADDR
// for x in ( tmp diff j ) do
77790: LD_ADDR_VAR 0 7
77794: PUSH
77795: LD_VAR 0 6
77799: PUSH
77800: LD_VAR 0 3
77804: DIFF
77805: PUSH
77806: FOR_IN
77807: IFFALSE 77859
// begin if sci = 6 then
77809: LD_VAR 0 8
77813: PUSH
77814: LD_INT 6
77816: EQUAL
77817: IFFALSE 77821
// break ;
77819: GO 77859
// if BuildingStatus ( x ) = bs_idle then
77821: LD_VAR 0 7
77825: PPUSH
77826: CALL_OW 461
77830: PUSH
77831: LD_INT 2
77833: EQUAL
77834: IFFALSE 77857
// sci := sci ^ UnitsInside ( x ) ;
77836: LD_ADDR_VAR 0 8
77840: PUSH
77841: LD_VAR 0 8
77845: PUSH
77846: LD_VAR 0 7
77850: PPUSH
77851: CALL_OW 313
77855: ADD
77856: ST_TO_ADDR
// end ;
77857: GO 77806
77859: POP
77860: POP
// if not sci then
77861: LD_VAR 0 8
77865: NOT
77866: IFFALSE 77870
// continue ;
77868: GO 76915
// for x in sci do
77870: LD_ADDR_VAR 0 7
77874: PUSH
77875: LD_VAR 0 8
77879: PUSH
77880: FOR_IN
77881: IFFALSE 77931
// if IsInUnit ( x ) and not HasTask ( x ) then
77883: LD_VAR 0 7
77887: PPUSH
77888: CALL_OW 310
77892: PUSH
77893: LD_VAR 0 7
77897: PPUSH
77898: CALL_OW 314
77902: NOT
77903: AND
77904: IFFALSE 77929
// begin ComExitBuilding ( x ) ;
77906: LD_VAR 0 7
77910: PPUSH
77911: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
77915: LD_VAR 0 7
77919: PPUSH
77920: LD_VAR 0 3
77924: PPUSH
77925: CALL_OW 180
// end ;
77929: GO 77880
77931: POP
77932: POP
// end ; end ;
77933: GO 76915
77935: POP
77936: POP
// end ;
77937: GO 76869
77939: POP
77940: POP
// end ;
77941: LD_VAR 0 1
77945: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
77946: LD_INT 0
77948: PPUSH
77949: PPUSH
// if not mc_bases then
77950: LD_EXP 50
77954: NOT
77955: IFFALSE 77959
// exit ;
77957: GO 78040
// for i = 1 to mc_bases do
77959: LD_ADDR_VAR 0 2
77963: PUSH
77964: DOUBLE
77965: LD_INT 1
77967: DEC
77968: ST_TO_ADDR
77969: LD_EXP 50
77973: PUSH
77974: FOR_TO
77975: IFFALSE 78038
// if mc_mines [ i ] and mc_miners [ i ] then
77977: LD_EXP 63
77981: PUSH
77982: LD_VAR 0 2
77986: ARRAY
77987: PUSH
77988: LD_EXP 64
77992: PUSH
77993: LD_VAR 0 2
77997: ARRAY
77998: AND
77999: IFFALSE 78036
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
78001: LD_EXP 64
78005: PUSH
78006: LD_VAR 0 2
78010: ARRAY
78011: PUSH
78012: LD_INT 1
78014: ARRAY
78015: PPUSH
78016: CALL_OW 255
78020: PPUSH
78021: LD_EXP 63
78025: PUSH
78026: LD_VAR 0 2
78030: ARRAY
78031: PPUSH
78032: CALL 21825 0 2
78036: GO 77974
78038: POP
78039: POP
// end ;
78040: LD_VAR 0 1
78044: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
78045: LD_INT 0
78047: PPUSH
78048: PPUSH
78049: PPUSH
78050: PPUSH
78051: PPUSH
78052: PPUSH
78053: PPUSH
78054: PPUSH
// if not mc_bases or not mc_parking then
78055: LD_EXP 50
78059: NOT
78060: PUSH
78061: LD_EXP 74
78065: NOT
78066: OR
78067: IFFALSE 78071
// exit ;
78069: GO 78781
// for i = 1 to mc_bases do
78071: LD_ADDR_VAR 0 2
78075: PUSH
78076: DOUBLE
78077: LD_INT 1
78079: DEC
78080: ST_TO_ADDR
78081: LD_EXP 50
78085: PUSH
78086: FOR_TO
78087: IFFALSE 78779
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
78089: LD_EXP 50
78093: PUSH
78094: LD_VAR 0 2
78098: ARRAY
78099: NOT
78100: PUSH
78101: LD_EXP 74
78105: PUSH
78106: LD_VAR 0 2
78110: ARRAY
78111: NOT
78112: OR
78113: IFFALSE 78117
// continue ;
78115: GO 78086
// side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
78117: LD_ADDR_VAR 0 5
78121: PUSH
78122: LD_EXP 50
78126: PUSH
78127: LD_VAR 0 2
78131: ARRAY
78132: PUSH
78133: LD_INT 1
78135: ARRAY
78136: PPUSH
78137: CALL_OW 255
78141: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
78142: LD_ADDR_VAR 0 6
78146: PUSH
78147: LD_EXP 50
78151: PUSH
78152: LD_VAR 0 2
78156: ARRAY
78157: PPUSH
78158: LD_INT 30
78160: PUSH
78161: LD_INT 3
78163: PUSH
78164: EMPTY
78165: LIST
78166: LIST
78167: PPUSH
78168: CALL_OW 72
78172: ST_TO_ADDR
// if not fac then
78173: LD_VAR 0 6
78177: NOT
78178: IFFALSE 78229
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
78180: LD_ADDR_VAR 0 6
78184: PUSH
78185: LD_EXP 50
78189: PUSH
78190: LD_VAR 0 2
78194: ARRAY
78195: PPUSH
78196: LD_INT 2
78198: PUSH
78199: LD_INT 30
78201: PUSH
78202: LD_INT 0
78204: PUSH
78205: EMPTY
78206: LIST
78207: LIST
78208: PUSH
78209: LD_INT 30
78211: PUSH
78212: LD_INT 1
78214: PUSH
78215: EMPTY
78216: LIST
78217: LIST
78218: PUSH
78219: EMPTY
78220: LIST
78221: LIST
78222: LIST
78223: PPUSH
78224: CALL_OW 72
78228: ST_TO_ADDR
// if not fac then
78229: LD_VAR 0 6
78233: NOT
78234: IFFALSE 78238
// continue ;
78236: GO 78086
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
78238: LD_ADDR_VAR 0 7
78242: PUSH
78243: LD_EXP 74
78247: PUSH
78248: LD_VAR 0 2
78252: ARRAY
78253: PPUSH
78254: LD_INT 22
78256: PUSH
78257: LD_VAR 0 5
78261: PUSH
78262: EMPTY
78263: LIST
78264: LIST
78265: PUSH
78266: LD_INT 21
78268: PUSH
78269: LD_INT 2
78271: PUSH
78272: EMPTY
78273: LIST
78274: LIST
78275: PUSH
78276: LD_INT 3
78278: PUSH
78279: LD_INT 24
78281: PUSH
78282: LD_INT 1000
78284: PUSH
78285: EMPTY
78286: LIST
78287: LIST
78288: PUSH
78289: EMPTY
78290: LIST
78291: LIST
78292: PUSH
78293: EMPTY
78294: LIST
78295: LIST
78296: LIST
78297: PPUSH
78298: CALL_OW 70
78302: ST_TO_ADDR
// for j in fac do
78303: LD_ADDR_VAR 0 3
78307: PUSH
78308: LD_VAR 0 6
78312: PUSH
78313: FOR_IN
78314: IFFALSE 78395
// vehs := vehs union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , j , 15 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
78316: LD_ADDR_VAR 0 7
78320: PUSH
78321: LD_VAR 0 7
78325: PUSH
78326: LD_INT 22
78328: PUSH
78329: LD_VAR 0 5
78333: PUSH
78334: EMPTY
78335: LIST
78336: LIST
78337: PUSH
78338: LD_INT 91
78340: PUSH
78341: LD_VAR 0 3
78345: PUSH
78346: LD_INT 15
78348: PUSH
78349: EMPTY
78350: LIST
78351: LIST
78352: LIST
78353: PUSH
78354: LD_INT 21
78356: PUSH
78357: LD_INT 2
78359: PUSH
78360: EMPTY
78361: LIST
78362: LIST
78363: PUSH
78364: LD_INT 3
78366: PUSH
78367: LD_INT 24
78369: PUSH
78370: LD_INT 1000
78372: PUSH
78373: EMPTY
78374: LIST
78375: LIST
78376: PUSH
78377: EMPTY
78378: LIST
78379: LIST
78380: PUSH
78381: EMPTY
78382: LIST
78383: LIST
78384: LIST
78385: LIST
78386: PPUSH
78387: CALL_OW 69
78391: UNION
78392: ST_TO_ADDR
78393: GO 78313
78395: POP
78396: POP
// if not vehs then
78397: LD_VAR 0 7
78401: NOT
78402: IFFALSE 78428
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
78404: LD_ADDR_EXP 62
78408: PUSH
78409: LD_EXP 62
78413: PPUSH
78414: LD_VAR 0 2
78418: PPUSH
78419: EMPTY
78420: PPUSH
78421: CALL_OW 1
78425: ST_TO_ADDR
// continue ;
78426: GO 78086
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
78428: LD_ADDR_VAR 0 8
78432: PUSH
78433: LD_EXP 50
78437: PUSH
78438: LD_VAR 0 2
78442: ARRAY
78443: PPUSH
78444: LD_INT 30
78446: PUSH
78447: LD_INT 3
78449: PUSH
78450: EMPTY
78451: LIST
78452: LIST
78453: PPUSH
78454: CALL_OW 72
78458: ST_TO_ADDR
// if tmp then
78459: LD_VAR 0 8
78463: IFFALSE 78566
// begin for j in tmp do
78465: LD_ADDR_VAR 0 3
78469: PUSH
78470: LD_VAR 0 8
78474: PUSH
78475: FOR_IN
78476: IFFALSE 78564
// for k in UnitsInside ( j ) do
78478: LD_ADDR_VAR 0 4
78482: PUSH
78483: LD_VAR 0 3
78487: PPUSH
78488: CALL_OW 313
78492: PUSH
78493: FOR_IN
78494: IFFALSE 78560
// if k then
78496: LD_VAR 0 4
78500: IFFALSE 78558
// if not k in mc_repair_vehicle [ i ] then
78502: LD_VAR 0 4
78506: PUSH
78507: LD_EXP 62
78511: PUSH
78512: LD_VAR 0 2
78516: ARRAY
78517: IN
78518: NOT
78519: IFFALSE 78558
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
78521: LD_ADDR_EXP 62
78525: PUSH
78526: LD_EXP 62
78530: PPUSH
78531: LD_VAR 0 2
78535: PPUSH
78536: LD_EXP 62
78540: PUSH
78541: LD_VAR 0 2
78545: ARRAY
78546: PUSH
78547: LD_VAR 0 4
78551: UNION
78552: PPUSH
78553: CALL_OW 1
78557: ST_TO_ADDR
78558: GO 78493
78560: POP
78561: POP
78562: GO 78475
78564: POP
78565: POP
// end ; if not mc_repair_vehicle [ i ] then
78566: LD_EXP 62
78570: PUSH
78571: LD_VAR 0 2
78575: ARRAY
78576: NOT
78577: IFFALSE 78581
// continue ;
78579: GO 78086
// for j in mc_repair_vehicle [ i ] do
78581: LD_ADDR_VAR 0 3
78585: PUSH
78586: LD_EXP 62
78590: PUSH
78591: LD_VAR 0 2
78595: ARRAY
78596: PUSH
78597: FOR_IN
78598: IFFALSE 78775
// begin if GetClass ( j ) <> 3 then
78600: LD_VAR 0 3
78604: PPUSH
78605: CALL_OW 257
78609: PUSH
78610: LD_INT 3
78612: NONEQUAL
78613: IFFALSE 78654
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
78615: LD_ADDR_EXP 62
78619: PUSH
78620: LD_EXP 62
78624: PPUSH
78625: LD_VAR 0 2
78629: PPUSH
78630: LD_EXP 62
78634: PUSH
78635: LD_VAR 0 2
78639: ARRAY
78640: PUSH
78641: LD_VAR 0 3
78645: DIFF
78646: PPUSH
78647: CALL_OW 1
78651: ST_TO_ADDR
// continue ;
78652: GO 78597
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
78654: LD_VAR 0 3
78658: PPUSH
78659: CALL_OW 311
78663: NOT
78664: PUSH
78665: LD_VAR 0 3
78669: PUSH
78670: LD_EXP 53
78674: PUSH
78675: LD_VAR 0 2
78679: ARRAY
78680: PUSH
78681: LD_INT 1
78683: ARRAY
78684: IN
78685: NOT
78686: AND
78687: PUSH
78688: LD_VAR 0 3
78692: PUSH
78693: LD_EXP 53
78697: PUSH
78698: LD_VAR 0 2
78702: ARRAY
78703: PUSH
78704: LD_INT 2
78706: ARRAY
78707: IN
78708: NOT
78709: AND
78710: IFFALSE 78773
// begin if IsInUnit ( j ) then
78712: LD_VAR 0 3
78716: PPUSH
78717: CALL_OW 310
78721: IFFALSE 78734
// ComExitBuilding ( j ) else
78723: LD_VAR 0 3
78727: PPUSH
78728: CALL_OW 122
78732: GO 78773
// if not WantToRepairVehicle ( j , vehs [ 1 ] ) then
78734: LD_VAR 0 3
78738: PPUSH
78739: LD_VAR 0 7
78743: PUSH
78744: LD_INT 1
78746: ARRAY
78747: PPUSH
78748: CALL 58624 0 2
78752: NOT
78753: IFFALSE 78773
// ComRepairVehicle ( j , vehs [ 1 ] ) ;
78755: LD_VAR 0 3
78759: PPUSH
78760: LD_VAR 0 7
78764: PUSH
78765: LD_INT 1
78767: ARRAY
78768: PPUSH
78769: CALL_OW 129
// end ; end ;
78773: GO 78597
78775: POP
78776: POP
// end ;
78777: GO 78086
78779: POP
78780: POP
// end ;
78781: LD_VAR 0 1
78785: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
78786: LD_INT 0
78788: PPUSH
78789: PPUSH
78790: PPUSH
78791: PPUSH
78792: PPUSH
78793: PPUSH
78794: PPUSH
78795: PPUSH
78796: PPUSH
78797: PPUSH
78798: PPUSH
// if not mc_bases then
78799: LD_EXP 50
78803: NOT
78804: IFFALSE 78808
// exit ;
78806: GO 79610
// for i = 1 to mc_bases do
78808: LD_ADDR_VAR 0 2
78812: PUSH
78813: DOUBLE
78814: LD_INT 1
78816: DEC
78817: ST_TO_ADDR
78818: LD_EXP 50
78822: PUSH
78823: FOR_TO
78824: IFFALSE 79608
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
78826: LD_EXP 78
78830: PUSH
78831: LD_VAR 0 2
78835: ARRAY
78836: NOT
78837: PUSH
78838: LD_EXP 53
78842: PUSH
78843: LD_VAR 0 2
78847: ARRAY
78848: PUSH
78849: LD_INT 1
78851: ARRAY
78852: OR
78853: PUSH
78854: LD_EXP 53
78858: PUSH
78859: LD_VAR 0 2
78863: ARRAY
78864: PUSH
78865: LD_INT 2
78867: ARRAY
78868: OR
78869: PUSH
78870: LD_EXP 76
78874: PUSH
78875: LD_VAR 0 2
78879: ARRAY
78880: PPUSH
78881: LD_INT 1
78883: PPUSH
78884: CALL_OW 325
78888: NOT
78889: OR
78890: PUSH
78891: LD_EXP 73
78895: PUSH
78896: LD_VAR 0 2
78900: ARRAY
78901: OR
78902: IFFALSE 78906
// continue ;
78904: GO 78823
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
78906: LD_ADDR_VAR 0 8
78910: PUSH
78911: LD_EXP 50
78915: PUSH
78916: LD_VAR 0 2
78920: ARRAY
78921: PPUSH
78922: LD_INT 25
78924: PUSH
78925: LD_INT 4
78927: PUSH
78928: EMPTY
78929: LIST
78930: LIST
78931: PUSH
78932: LD_INT 50
78934: PUSH
78935: EMPTY
78936: LIST
78937: PUSH
78938: LD_INT 3
78940: PUSH
78941: LD_INT 60
78943: PUSH
78944: EMPTY
78945: LIST
78946: PUSH
78947: EMPTY
78948: LIST
78949: LIST
78950: PUSH
78951: EMPTY
78952: LIST
78953: LIST
78954: LIST
78955: PPUSH
78956: CALL_OW 72
78960: PUSH
78961: LD_EXP 54
78965: PUSH
78966: LD_VAR 0 2
78970: ARRAY
78971: DIFF
78972: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
78973: LD_ADDR_VAR 0 9
78977: PUSH
78978: LD_EXP 50
78982: PUSH
78983: LD_VAR 0 2
78987: ARRAY
78988: PPUSH
78989: LD_INT 2
78991: PUSH
78992: LD_INT 30
78994: PUSH
78995: LD_INT 0
78997: PUSH
78998: EMPTY
78999: LIST
79000: LIST
79001: PUSH
79002: LD_INT 30
79004: PUSH
79005: LD_INT 1
79007: PUSH
79008: EMPTY
79009: LIST
79010: LIST
79011: PUSH
79012: EMPTY
79013: LIST
79014: LIST
79015: LIST
79016: PPUSH
79017: CALL_OW 72
79021: ST_TO_ADDR
// if not tmp or not dep then
79022: LD_VAR 0 8
79026: NOT
79027: PUSH
79028: LD_VAR 0 9
79032: NOT
79033: OR
79034: IFFALSE 79038
// continue ;
79036: GO 78823
// side := GetSide ( tmp [ 1 ] ) ;
79038: LD_ADDR_VAR 0 11
79042: PUSH
79043: LD_VAR 0 8
79047: PUSH
79048: LD_INT 1
79050: ARRAY
79051: PPUSH
79052: CALL_OW 255
79056: ST_TO_ADDR
// dep := dep [ 1 ] ;
79057: LD_ADDR_VAR 0 9
79061: PUSH
79062: LD_VAR 0 9
79066: PUSH
79067: LD_INT 1
79069: ARRAY
79070: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
79071: LD_ADDR_VAR 0 7
79075: PUSH
79076: LD_EXP 78
79080: PUSH
79081: LD_VAR 0 2
79085: ARRAY
79086: PPUSH
79087: LD_INT 22
79089: PUSH
79090: LD_INT 0
79092: PUSH
79093: EMPTY
79094: LIST
79095: LIST
79096: PUSH
79097: LD_INT 25
79099: PUSH
79100: LD_INT 12
79102: PUSH
79103: EMPTY
79104: LIST
79105: LIST
79106: PUSH
79107: EMPTY
79108: LIST
79109: LIST
79110: PPUSH
79111: CALL_OW 70
79115: PUSH
79116: LD_INT 22
79118: PUSH
79119: LD_INT 0
79121: PUSH
79122: EMPTY
79123: LIST
79124: LIST
79125: PUSH
79126: LD_INT 25
79128: PUSH
79129: LD_INT 12
79131: PUSH
79132: EMPTY
79133: LIST
79134: LIST
79135: PUSH
79136: LD_INT 91
79138: PUSH
79139: LD_VAR 0 9
79143: PUSH
79144: LD_INT 20
79146: PUSH
79147: EMPTY
79148: LIST
79149: LIST
79150: LIST
79151: PUSH
79152: EMPTY
79153: LIST
79154: LIST
79155: LIST
79156: PPUSH
79157: CALL_OW 69
79161: UNION
79162: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
79163: LD_ADDR_VAR 0 10
79167: PUSH
79168: LD_EXP 78
79172: PUSH
79173: LD_VAR 0 2
79177: ARRAY
79178: PPUSH
79179: LD_INT 81
79181: PUSH
79182: LD_VAR 0 11
79186: PUSH
79187: EMPTY
79188: LIST
79189: LIST
79190: PPUSH
79191: CALL_OW 70
79195: ST_TO_ADDR
// if not apes or danger_at_area then
79196: LD_VAR 0 7
79200: NOT
79201: PUSH
79202: LD_VAR 0 10
79206: OR
79207: IFFALSE 79257
// begin if mc_taming [ i ] then
79209: LD_EXP 81
79213: PUSH
79214: LD_VAR 0 2
79218: ARRAY
79219: IFFALSE 79255
// begin MC_Reset ( i , 121 ) ;
79221: LD_VAR 0 2
79225: PPUSH
79226: LD_INT 121
79228: PPUSH
79229: CALL 64243 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
79233: LD_ADDR_EXP 81
79237: PUSH
79238: LD_EXP 81
79242: PPUSH
79243: LD_VAR 0 2
79247: PPUSH
79248: EMPTY
79249: PPUSH
79250: CALL_OW 1
79254: ST_TO_ADDR
// end ; continue ;
79255: GO 78823
// end ; for j in tmp do
79257: LD_ADDR_VAR 0 3
79261: PUSH
79262: LD_VAR 0 8
79266: PUSH
79267: FOR_IN
79268: IFFALSE 79604
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
79270: LD_VAR 0 3
79274: PUSH
79275: LD_EXP 81
79279: PUSH
79280: LD_VAR 0 2
79284: ARRAY
79285: IN
79286: NOT
79287: PUSH
79288: LD_EXP 81
79292: PUSH
79293: LD_VAR 0 2
79297: ARRAY
79298: PUSH
79299: LD_INT 3
79301: LESS
79302: AND
79303: IFFALSE 79361
// begin SetTag ( j , 121 ) ;
79305: LD_VAR 0 3
79309: PPUSH
79310: LD_INT 121
79312: PPUSH
79313: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
79317: LD_ADDR_EXP 81
79321: PUSH
79322: LD_EXP 81
79326: PPUSH
79327: LD_VAR 0 2
79331: PUSH
79332: LD_EXP 81
79336: PUSH
79337: LD_VAR 0 2
79341: ARRAY
79342: PUSH
79343: LD_INT 1
79345: PLUS
79346: PUSH
79347: EMPTY
79348: LIST
79349: LIST
79350: PPUSH
79351: LD_VAR 0 3
79355: PPUSH
79356: CALL 24872 0 3
79360: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
79361: LD_VAR 0 3
79365: PUSH
79366: LD_EXP 81
79370: PUSH
79371: LD_VAR 0 2
79375: ARRAY
79376: IN
79377: IFFALSE 79602
// begin if GetClass ( j ) <> 4 then
79379: LD_VAR 0 3
79383: PPUSH
79384: CALL_OW 257
79388: PUSH
79389: LD_INT 4
79391: NONEQUAL
79392: IFFALSE 79445
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
79394: LD_ADDR_EXP 81
79398: PUSH
79399: LD_EXP 81
79403: PPUSH
79404: LD_VAR 0 2
79408: PPUSH
79409: LD_EXP 81
79413: PUSH
79414: LD_VAR 0 2
79418: ARRAY
79419: PUSH
79420: LD_VAR 0 3
79424: DIFF
79425: PPUSH
79426: CALL_OW 1
79430: ST_TO_ADDR
// SetTag ( j , 0 ) ;
79431: LD_VAR 0 3
79435: PPUSH
79436: LD_INT 0
79438: PPUSH
79439: CALL_OW 109
// continue ;
79443: GO 79267
// end ; if IsInUnit ( j ) then
79445: LD_VAR 0 3
79449: PPUSH
79450: CALL_OW 310
79454: IFFALSE 79465
// ComExitBuilding ( j ) ;
79456: LD_VAR 0 3
79460: PPUSH
79461: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
79465: LD_ADDR_VAR 0 6
79469: PUSH
79470: LD_VAR 0 7
79474: PPUSH
79475: LD_VAR 0 3
79479: PPUSH
79480: CALL_OW 74
79484: ST_TO_ADDR
// if not ape then
79485: LD_VAR 0 6
79489: NOT
79490: IFFALSE 79494
// break ;
79492: GO 79604
// x := GetX ( ape ) ;
79494: LD_ADDR_VAR 0 4
79498: PUSH
79499: LD_VAR 0 6
79503: PPUSH
79504: CALL_OW 250
79508: ST_TO_ADDR
// y := GetY ( ape ) ;
79509: LD_ADDR_VAR 0 5
79513: PUSH
79514: LD_VAR 0 6
79518: PPUSH
79519: CALL_OW 251
79523: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
79524: LD_VAR 0 4
79528: PPUSH
79529: LD_VAR 0 5
79533: PPUSH
79534: CALL_OW 488
79538: NOT
79539: PUSH
79540: LD_VAR 0 11
79544: PPUSH
79545: LD_VAR 0 4
79549: PPUSH
79550: LD_VAR 0 5
79554: PPUSH
79555: LD_INT 20
79557: PPUSH
79558: CALL 25768 0 4
79562: PUSH
79563: LD_INT 4
79565: ARRAY
79566: OR
79567: IFFALSE 79571
// break ;
79569: GO 79604
// if not HasTask ( j ) then
79571: LD_VAR 0 3
79575: PPUSH
79576: CALL_OW 314
79580: NOT
79581: IFFALSE 79602
// ComTameXY ( j , x , y ) ;
79583: LD_VAR 0 3
79587: PPUSH
79588: LD_VAR 0 4
79592: PPUSH
79593: LD_VAR 0 5
79597: PPUSH
79598: CALL_OW 131
// end ; end ;
79602: GO 79267
79604: POP
79605: POP
// end ;
79606: GO 78823
79608: POP
79609: POP
// end ;
79610: LD_VAR 0 1
79614: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
79615: LD_INT 0
79617: PPUSH
79618: PPUSH
79619: PPUSH
79620: PPUSH
79621: PPUSH
79622: PPUSH
79623: PPUSH
79624: PPUSH
// if not mc_bases then
79625: LD_EXP 50
79629: NOT
79630: IFFALSE 79634
// exit ;
79632: GO 80260
// for i = 1 to mc_bases do
79634: LD_ADDR_VAR 0 2
79638: PUSH
79639: DOUBLE
79640: LD_INT 1
79642: DEC
79643: ST_TO_ADDR
79644: LD_EXP 50
79648: PUSH
79649: FOR_TO
79650: IFFALSE 80258
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
79652: LD_EXP 79
79656: PUSH
79657: LD_VAR 0 2
79661: ARRAY
79662: NOT
79663: PUSH
79664: LD_EXP 79
79668: PUSH
79669: LD_VAR 0 2
79673: ARRAY
79674: PPUSH
79675: LD_INT 25
79677: PUSH
79678: LD_INT 12
79680: PUSH
79681: EMPTY
79682: LIST
79683: LIST
79684: PPUSH
79685: CALL_OW 72
79689: NOT
79690: OR
79691: IFFALSE 79695
// continue ;
79693: GO 79649
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
79695: LD_ADDR_VAR 0 5
79699: PUSH
79700: LD_EXP 79
79704: PUSH
79705: LD_VAR 0 2
79709: ARRAY
79710: PUSH
79711: LD_INT 1
79713: ARRAY
79714: PPUSH
79715: CALL_OW 255
79719: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
79720: LD_VAR 0 5
79724: PPUSH
79725: LD_INT 2
79727: PPUSH
79728: CALL_OW 325
79732: IFFALSE 79985
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
79734: LD_ADDR_VAR 0 4
79738: PUSH
79739: LD_EXP 79
79743: PUSH
79744: LD_VAR 0 2
79748: ARRAY
79749: PPUSH
79750: LD_INT 25
79752: PUSH
79753: LD_INT 16
79755: PUSH
79756: EMPTY
79757: LIST
79758: LIST
79759: PPUSH
79760: CALL_OW 72
79764: ST_TO_ADDR
// if tmp < 6 then
79765: LD_VAR 0 4
79769: PUSH
79770: LD_INT 6
79772: LESS
79773: IFFALSE 79985
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
79775: LD_ADDR_VAR 0 6
79779: PUSH
79780: LD_EXP 50
79784: PUSH
79785: LD_VAR 0 2
79789: ARRAY
79790: PPUSH
79791: LD_INT 2
79793: PUSH
79794: LD_INT 30
79796: PUSH
79797: LD_INT 0
79799: PUSH
79800: EMPTY
79801: LIST
79802: LIST
79803: PUSH
79804: LD_INT 30
79806: PUSH
79807: LD_INT 1
79809: PUSH
79810: EMPTY
79811: LIST
79812: LIST
79813: PUSH
79814: EMPTY
79815: LIST
79816: LIST
79817: LIST
79818: PPUSH
79819: CALL_OW 72
79823: ST_TO_ADDR
// if depot then
79824: LD_VAR 0 6
79828: IFFALSE 79985
// begin selected := 0 ;
79830: LD_ADDR_VAR 0 7
79834: PUSH
79835: LD_INT 0
79837: ST_TO_ADDR
// for j in depot do
79838: LD_ADDR_VAR 0 3
79842: PUSH
79843: LD_VAR 0 6
79847: PUSH
79848: FOR_IN
79849: IFFALSE 79880
// begin if UnitsInside ( j ) < 6 then
79851: LD_VAR 0 3
79855: PPUSH
79856: CALL_OW 313
79860: PUSH
79861: LD_INT 6
79863: LESS
79864: IFFALSE 79878
// begin selected := j ;
79866: LD_ADDR_VAR 0 7
79870: PUSH
79871: LD_VAR 0 3
79875: ST_TO_ADDR
// break ;
79876: GO 79880
// end ; end ;
79878: GO 79848
79880: POP
79881: POP
// if selected then
79882: LD_VAR 0 7
79886: IFFALSE 79985
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
79888: LD_ADDR_VAR 0 3
79892: PUSH
79893: LD_EXP 79
79897: PUSH
79898: LD_VAR 0 2
79902: ARRAY
79903: PPUSH
79904: LD_INT 25
79906: PUSH
79907: LD_INT 12
79909: PUSH
79910: EMPTY
79911: LIST
79912: LIST
79913: PPUSH
79914: CALL_OW 72
79918: PUSH
79919: FOR_IN
79920: IFFALSE 79983
// if not HasTask ( j ) then
79922: LD_VAR 0 3
79926: PPUSH
79927: CALL_OW 314
79931: NOT
79932: IFFALSE 79981
// begin if not IsInUnit ( j ) then
79934: LD_VAR 0 3
79938: PPUSH
79939: CALL_OW 310
79943: NOT
79944: IFFALSE 79960
// ComEnterUnit ( j , selected ) ;
79946: LD_VAR 0 3
79950: PPUSH
79951: LD_VAR 0 7
79955: PPUSH
79956: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
79960: LD_VAR 0 3
79964: PPUSH
79965: LD_INT 16
79967: PPUSH
79968: CALL_OW 183
// AddComExitBuilding ( j ) ;
79972: LD_VAR 0 3
79976: PPUSH
79977: CALL_OW 182
// end ;
79981: GO 79919
79983: POP
79984: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
79985: LD_VAR 0 5
79989: PPUSH
79990: LD_INT 11
79992: PPUSH
79993: CALL_OW 325
79997: IFFALSE 80256
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
79999: LD_ADDR_VAR 0 4
80003: PUSH
80004: LD_EXP 79
80008: PUSH
80009: LD_VAR 0 2
80013: ARRAY
80014: PPUSH
80015: LD_INT 25
80017: PUSH
80018: LD_INT 16
80020: PUSH
80021: EMPTY
80022: LIST
80023: LIST
80024: PPUSH
80025: CALL_OW 72
80029: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
80030: LD_VAR 0 4
80034: PUSH
80035: LD_INT 6
80037: GREATEREQUAL
80038: PUSH
80039: LD_VAR 0 5
80043: PPUSH
80044: LD_INT 2
80046: PPUSH
80047: CALL_OW 325
80051: NOT
80052: OR
80053: IFFALSE 80256
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
80055: LD_ADDR_VAR 0 8
80059: PUSH
80060: LD_EXP 50
80064: PUSH
80065: LD_VAR 0 2
80069: ARRAY
80070: PPUSH
80071: LD_INT 2
80073: PUSH
80074: LD_INT 30
80076: PUSH
80077: LD_INT 4
80079: PUSH
80080: EMPTY
80081: LIST
80082: LIST
80083: PUSH
80084: LD_INT 30
80086: PUSH
80087: LD_INT 5
80089: PUSH
80090: EMPTY
80091: LIST
80092: LIST
80093: PUSH
80094: EMPTY
80095: LIST
80096: LIST
80097: LIST
80098: PPUSH
80099: CALL_OW 72
80103: ST_TO_ADDR
// if barracks then
80104: LD_VAR 0 8
80108: IFFALSE 80256
// begin selected := 0 ;
80110: LD_ADDR_VAR 0 7
80114: PUSH
80115: LD_INT 0
80117: ST_TO_ADDR
// for j in barracks do
80118: LD_ADDR_VAR 0 3
80122: PUSH
80123: LD_VAR 0 8
80127: PUSH
80128: FOR_IN
80129: IFFALSE 80160
// begin if UnitsInside ( j ) < 6 then
80131: LD_VAR 0 3
80135: PPUSH
80136: CALL_OW 313
80140: PUSH
80141: LD_INT 6
80143: LESS
80144: IFFALSE 80158
// begin selected := j ;
80146: LD_ADDR_VAR 0 7
80150: PUSH
80151: LD_VAR 0 3
80155: ST_TO_ADDR
// break ;
80156: GO 80160
// end ; end ;
80158: GO 80128
80160: POP
80161: POP
// if selected then
80162: LD_VAR 0 7
80166: IFFALSE 80256
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
80168: LD_ADDR_VAR 0 3
80172: PUSH
80173: LD_EXP 79
80177: PUSH
80178: LD_VAR 0 2
80182: ARRAY
80183: PPUSH
80184: LD_INT 25
80186: PUSH
80187: LD_INT 12
80189: PUSH
80190: EMPTY
80191: LIST
80192: LIST
80193: PPUSH
80194: CALL_OW 72
80198: PUSH
80199: FOR_IN
80200: IFFALSE 80254
// if not IsInUnit ( j ) and not HasTask ( j ) then
80202: LD_VAR 0 3
80206: PPUSH
80207: CALL_OW 310
80211: NOT
80212: PUSH
80213: LD_VAR 0 3
80217: PPUSH
80218: CALL_OW 314
80222: NOT
80223: AND
80224: IFFALSE 80252
// begin ComEnterUnit ( j , selected ) ;
80226: LD_VAR 0 3
80230: PPUSH
80231: LD_VAR 0 7
80235: PPUSH
80236: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
80240: LD_VAR 0 3
80244: PPUSH
80245: LD_INT 15
80247: PPUSH
80248: CALL_OW 183
// end ;
80252: GO 80199
80254: POP
80255: POP
// end ; end ; end ; end ; end ;
80256: GO 79649
80258: POP
80259: POP
// end ;
80260: LD_VAR 0 1
80264: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
80265: LD_INT 0
80267: PPUSH
80268: PPUSH
80269: PPUSH
80270: PPUSH
// if not mc_bases then
80271: LD_EXP 50
80275: NOT
80276: IFFALSE 80280
// exit ;
80278: GO 80458
// for i = 1 to mc_bases do
80280: LD_ADDR_VAR 0 2
80284: PUSH
80285: DOUBLE
80286: LD_INT 1
80288: DEC
80289: ST_TO_ADDR
80290: LD_EXP 50
80294: PUSH
80295: FOR_TO
80296: IFFALSE 80456
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
80298: LD_ADDR_VAR 0 4
80302: PUSH
80303: LD_EXP 50
80307: PUSH
80308: LD_VAR 0 2
80312: ARRAY
80313: PPUSH
80314: LD_INT 25
80316: PUSH
80317: LD_INT 9
80319: PUSH
80320: EMPTY
80321: LIST
80322: LIST
80323: PPUSH
80324: CALL_OW 72
80328: ST_TO_ADDR
// if not tmp then
80329: LD_VAR 0 4
80333: NOT
80334: IFFALSE 80338
// continue ;
80336: GO 80295
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
80338: LD_EXP 76
80342: PUSH
80343: LD_VAR 0 2
80347: ARRAY
80348: PPUSH
80349: LD_INT 29
80351: PPUSH
80352: CALL_OW 325
80356: NOT
80357: PUSH
80358: LD_EXP 76
80362: PUSH
80363: LD_VAR 0 2
80367: ARRAY
80368: PPUSH
80369: LD_INT 28
80371: PPUSH
80372: CALL_OW 325
80376: NOT
80377: AND
80378: IFFALSE 80382
// continue ;
80380: GO 80295
// for j in tmp do
80382: LD_ADDR_VAR 0 3
80386: PUSH
80387: LD_VAR 0 4
80391: PUSH
80392: FOR_IN
80393: IFFALSE 80452
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
80395: LD_VAR 0 3
80399: PUSH
80400: LD_EXP 53
80404: PUSH
80405: LD_VAR 0 2
80409: ARRAY
80410: PUSH
80411: LD_INT 1
80413: ARRAY
80414: IN
80415: NOT
80416: PUSH
80417: LD_VAR 0 3
80421: PUSH
80422: LD_EXP 53
80426: PUSH
80427: LD_VAR 0 2
80431: ARRAY
80432: PUSH
80433: LD_INT 2
80435: ARRAY
80436: IN
80437: NOT
80438: AND
80439: IFFALSE 80450
// ComSpaceTimeShoot ( j ) ;
80441: LD_VAR 0 3
80445: PPUSH
80446: CALL 20833 0 1
80450: GO 80392
80452: POP
80453: POP
// end ;
80454: GO 80295
80456: POP
80457: POP
// end ;
80458: LD_VAR 0 1
80462: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
80463: LD_INT 0
80465: PPUSH
80466: PPUSH
80467: PPUSH
80468: PPUSH
80469: PPUSH
80470: PPUSH
80471: PPUSH
80472: PPUSH
80473: PPUSH
// if not mc_bases then
80474: LD_EXP 50
80478: NOT
80479: IFFALSE 80483
// exit ;
80481: GO 81105
// for i = 1 to mc_bases do
80483: LD_ADDR_VAR 0 2
80487: PUSH
80488: DOUBLE
80489: LD_INT 1
80491: DEC
80492: ST_TO_ADDR
80493: LD_EXP 50
80497: PUSH
80498: FOR_TO
80499: IFFALSE 81103
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
80501: LD_EXP 85
80505: PUSH
80506: LD_VAR 0 2
80510: ARRAY
80511: NOT
80512: PUSH
80513: LD_INT 38
80515: PPUSH
80516: LD_EXP 76
80520: PUSH
80521: LD_VAR 0 2
80525: ARRAY
80526: PPUSH
80527: CALL_OW 321
80531: PUSH
80532: LD_INT 2
80534: NONEQUAL
80535: OR
80536: IFFALSE 80540
// continue ;
80538: GO 80498
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
80540: LD_ADDR_VAR 0 8
80544: PUSH
80545: LD_EXP 50
80549: PUSH
80550: LD_VAR 0 2
80554: ARRAY
80555: PPUSH
80556: LD_INT 30
80558: PUSH
80559: LD_INT 34
80561: PUSH
80562: EMPTY
80563: LIST
80564: LIST
80565: PPUSH
80566: CALL_OW 72
80570: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
80571: LD_ADDR_VAR 0 9
80575: PUSH
80576: LD_EXP 50
80580: PUSH
80581: LD_VAR 0 2
80585: ARRAY
80586: PPUSH
80587: LD_INT 25
80589: PUSH
80590: LD_INT 4
80592: PUSH
80593: EMPTY
80594: LIST
80595: LIST
80596: PPUSH
80597: CALL_OW 72
80601: PPUSH
80602: LD_INT 0
80604: PPUSH
80605: CALL 54141 0 2
80609: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
80610: LD_VAR 0 9
80614: NOT
80615: PUSH
80616: LD_VAR 0 8
80620: NOT
80621: OR
80622: PUSH
80623: LD_EXP 50
80627: PUSH
80628: LD_VAR 0 2
80632: ARRAY
80633: PPUSH
80634: LD_INT 124
80636: PPUSH
80637: CALL 54141 0 2
80641: OR
80642: IFFALSE 80646
// continue ;
80644: GO 80498
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
80646: LD_EXP 86
80650: PUSH
80651: LD_VAR 0 2
80655: ARRAY
80656: PUSH
80657: LD_EXP 85
80661: PUSH
80662: LD_VAR 0 2
80666: ARRAY
80667: LESS
80668: PUSH
80669: LD_EXP 86
80673: PUSH
80674: LD_VAR 0 2
80678: ARRAY
80679: PUSH
80680: LD_VAR 0 8
80684: LESS
80685: AND
80686: IFFALSE 81101
// begin tmp := sci [ 1 ] ;
80688: LD_ADDR_VAR 0 7
80692: PUSH
80693: LD_VAR 0 9
80697: PUSH
80698: LD_INT 1
80700: ARRAY
80701: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
80702: LD_VAR 0 7
80706: PPUSH
80707: LD_INT 124
80709: PPUSH
80710: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
80714: LD_ADDR_VAR 0 3
80718: PUSH
80719: DOUBLE
80720: LD_EXP 85
80724: PUSH
80725: LD_VAR 0 2
80729: ARRAY
80730: INC
80731: ST_TO_ADDR
80732: LD_EXP 85
80736: PUSH
80737: LD_VAR 0 2
80741: ARRAY
80742: PUSH
80743: FOR_DOWNTO
80744: IFFALSE 81087
// begin if IsInUnit ( tmp ) then
80746: LD_VAR 0 7
80750: PPUSH
80751: CALL_OW 310
80755: IFFALSE 80766
// ComExitBuilding ( tmp ) ;
80757: LD_VAR 0 7
80761: PPUSH
80762: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
80766: LD_INT 35
80768: PPUSH
80769: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
80773: LD_VAR 0 7
80777: PPUSH
80778: CALL_OW 310
80782: NOT
80783: PUSH
80784: LD_VAR 0 7
80788: PPUSH
80789: CALL_OW 314
80793: NOT
80794: AND
80795: IFFALSE 80766
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
80797: LD_ADDR_VAR 0 6
80801: PUSH
80802: LD_VAR 0 7
80806: PPUSH
80807: CALL_OW 250
80811: PUSH
80812: LD_VAR 0 7
80816: PPUSH
80817: CALL_OW 251
80821: PUSH
80822: EMPTY
80823: LIST
80824: LIST
80825: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
80826: LD_INT 35
80828: PPUSH
80829: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
80833: LD_ADDR_VAR 0 4
80837: PUSH
80838: LD_EXP 85
80842: PUSH
80843: LD_VAR 0 2
80847: ARRAY
80848: PUSH
80849: LD_VAR 0 3
80853: ARRAY
80854: PUSH
80855: LD_INT 1
80857: ARRAY
80858: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
80859: LD_ADDR_VAR 0 5
80863: PUSH
80864: LD_EXP 85
80868: PUSH
80869: LD_VAR 0 2
80873: ARRAY
80874: PUSH
80875: LD_VAR 0 3
80879: ARRAY
80880: PUSH
80881: LD_INT 2
80883: ARRAY
80884: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
80885: LD_VAR 0 7
80889: PPUSH
80890: LD_INT 10
80892: PPUSH
80893: CALL 27471 0 2
80897: PUSH
80898: LD_INT 4
80900: ARRAY
80901: IFFALSE 80939
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
80903: LD_VAR 0 7
80907: PPUSH
80908: LD_VAR 0 6
80912: PUSH
80913: LD_INT 1
80915: ARRAY
80916: PPUSH
80917: LD_VAR 0 6
80921: PUSH
80922: LD_INT 2
80924: ARRAY
80925: PPUSH
80926: CALL_OW 111
// wait ( 0 0$10 ) ;
80930: LD_INT 350
80932: PPUSH
80933: CALL_OW 67
// end else
80937: GO 80965
// begin ComMoveXY ( tmp , x , y ) ;
80939: LD_VAR 0 7
80943: PPUSH
80944: LD_VAR 0 4
80948: PPUSH
80949: LD_VAR 0 5
80953: PPUSH
80954: CALL_OW 111
// wait ( 0 0$3 ) ;
80958: LD_INT 105
80960: PPUSH
80961: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
80965: LD_VAR 0 7
80969: PPUSH
80970: LD_VAR 0 4
80974: PPUSH
80975: LD_VAR 0 5
80979: PPUSH
80980: CALL_OW 307
80984: IFFALSE 80826
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
80986: LD_VAR 0 7
80990: PPUSH
80991: LD_VAR 0 4
80995: PPUSH
80996: LD_VAR 0 5
81000: PPUSH
81001: LD_VAR 0 8
81005: PUSH
81006: LD_VAR 0 3
81010: ARRAY
81011: PPUSH
81012: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
81016: LD_INT 35
81018: PPUSH
81019: CALL_OW 67
// until not HasTask ( tmp ) ;
81023: LD_VAR 0 7
81027: PPUSH
81028: CALL_OW 314
81032: NOT
81033: IFFALSE 81016
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
81035: LD_ADDR_EXP 86
81039: PUSH
81040: LD_EXP 86
81044: PPUSH
81045: LD_VAR 0 2
81049: PUSH
81050: LD_EXP 86
81054: PUSH
81055: LD_VAR 0 2
81059: ARRAY
81060: PUSH
81061: LD_INT 1
81063: PLUS
81064: PUSH
81065: EMPTY
81066: LIST
81067: LIST
81068: PPUSH
81069: LD_VAR 0 8
81073: PUSH
81074: LD_VAR 0 3
81078: ARRAY
81079: PPUSH
81080: CALL 24872 0 3
81084: ST_TO_ADDR
// end ;
81085: GO 80743
81087: POP
81088: POP
// MC_Reset ( i , 124 ) ;
81089: LD_VAR 0 2
81093: PPUSH
81094: LD_INT 124
81096: PPUSH
81097: CALL 64243 0 2
// end ; end ;
81101: GO 80498
81103: POP
81104: POP
// end ;
81105: LD_VAR 0 1
81109: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
81110: LD_INT 0
81112: PPUSH
81113: PPUSH
81114: PPUSH
// if not mc_bases then
81115: LD_EXP 50
81119: NOT
81120: IFFALSE 81124
// exit ;
81122: GO 81730
// for i = 1 to mc_bases do
81124: LD_ADDR_VAR 0 2
81128: PUSH
81129: DOUBLE
81130: LD_INT 1
81132: DEC
81133: ST_TO_ADDR
81134: LD_EXP 50
81138: PUSH
81139: FOR_TO
81140: IFFALSE 81728
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
81142: LD_ADDR_VAR 0 3
81146: PUSH
81147: LD_EXP 50
81151: PUSH
81152: LD_VAR 0 2
81156: ARRAY
81157: PPUSH
81158: LD_INT 25
81160: PUSH
81161: LD_INT 4
81163: PUSH
81164: EMPTY
81165: LIST
81166: LIST
81167: PPUSH
81168: CALL_OW 72
81172: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
81173: LD_VAR 0 3
81177: NOT
81178: PUSH
81179: LD_EXP 87
81183: PUSH
81184: LD_VAR 0 2
81188: ARRAY
81189: NOT
81190: OR
81191: PUSH
81192: LD_EXP 50
81196: PUSH
81197: LD_VAR 0 2
81201: ARRAY
81202: PPUSH
81203: LD_INT 2
81205: PUSH
81206: LD_INT 30
81208: PUSH
81209: LD_INT 0
81211: PUSH
81212: EMPTY
81213: LIST
81214: LIST
81215: PUSH
81216: LD_INT 30
81218: PUSH
81219: LD_INT 1
81221: PUSH
81222: EMPTY
81223: LIST
81224: LIST
81225: PUSH
81226: EMPTY
81227: LIST
81228: LIST
81229: LIST
81230: PPUSH
81231: CALL_OW 72
81235: NOT
81236: OR
81237: IFFALSE 81287
// begin if mc_deposits_finder [ i ] then
81239: LD_EXP 88
81243: PUSH
81244: LD_VAR 0 2
81248: ARRAY
81249: IFFALSE 81285
// begin MC_Reset ( i , 125 ) ;
81251: LD_VAR 0 2
81255: PPUSH
81256: LD_INT 125
81258: PPUSH
81259: CALL 64243 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
81263: LD_ADDR_EXP 88
81267: PUSH
81268: LD_EXP 88
81272: PPUSH
81273: LD_VAR 0 2
81277: PPUSH
81278: EMPTY
81279: PPUSH
81280: CALL_OW 1
81284: ST_TO_ADDR
// end ; continue ;
81285: GO 81139
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
81287: LD_EXP 87
81291: PUSH
81292: LD_VAR 0 2
81296: ARRAY
81297: PUSH
81298: LD_INT 1
81300: ARRAY
81301: PUSH
81302: LD_INT 3
81304: ARRAY
81305: PUSH
81306: LD_INT 1
81308: EQUAL
81309: PUSH
81310: LD_INT 20
81312: PPUSH
81313: LD_EXP 76
81317: PUSH
81318: LD_VAR 0 2
81322: ARRAY
81323: PPUSH
81324: CALL_OW 321
81328: PUSH
81329: LD_INT 2
81331: NONEQUAL
81332: AND
81333: IFFALSE 81383
// begin if mc_deposits_finder [ i ] then
81335: LD_EXP 88
81339: PUSH
81340: LD_VAR 0 2
81344: ARRAY
81345: IFFALSE 81381
// begin MC_Reset ( i , 125 ) ;
81347: LD_VAR 0 2
81351: PPUSH
81352: LD_INT 125
81354: PPUSH
81355: CALL 64243 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
81359: LD_ADDR_EXP 88
81363: PUSH
81364: LD_EXP 88
81368: PPUSH
81369: LD_VAR 0 2
81373: PPUSH
81374: EMPTY
81375: PPUSH
81376: CALL_OW 1
81380: ST_TO_ADDR
// end ; continue ;
81381: GO 81139
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
81383: LD_EXP 87
81387: PUSH
81388: LD_VAR 0 2
81392: ARRAY
81393: PUSH
81394: LD_INT 1
81396: ARRAY
81397: PUSH
81398: LD_INT 1
81400: ARRAY
81401: PPUSH
81402: LD_EXP 87
81406: PUSH
81407: LD_VAR 0 2
81411: ARRAY
81412: PUSH
81413: LD_INT 1
81415: ARRAY
81416: PUSH
81417: LD_INT 2
81419: ARRAY
81420: PPUSH
81421: LD_EXP 76
81425: PUSH
81426: LD_VAR 0 2
81430: ARRAY
81431: PPUSH
81432: CALL_OW 440
81436: IFFALSE 81479
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
81438: LD_ADDR_EXP 87
81442: PUSH
81443: LD_EXP 87
81447: PPUSH
81448: LD_VAR 0 2
81452: PPUSH
81453: LD_EXP 87
81457: PUSH
81458: LD_VAR 0 2
81462: ARRAY
81463: PPUSH
81464: LD_INT 1
81466: PPUSH
81467: CALL_OW 3
81471: PPUSH
81472: CALL_OW 1
81476: ST_TO_ADDR
81477: GO 81726
// begin if not mc_deposits_finder [ i ] then
81479: LD_EXP 88
81483: PUSH
81484: LD_VAR 0 2
81488: ARRAY
81489: NOT
81490: IFFALSE 81542
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
81492: LD_ADDR_EXP 88
81496: PUSH
81497: LD_EXP 88
81501: PPUSH
81502: LD_VAR 0 2
81506: PPUSH
81507: LD_VAR 0 3
81511: PUSH
81512: LD_INT 1
81514: ARRAY
81515: PUSH
81516: EMPTY
81517: LIST
81518: PPUSH
81519: CALL_OW 1
81523: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
81524: LD_VAR 0 3
81528: PUSH
81529: LD_INT 1
81531: ARRAY
81532: PPUSH
81533: LD_INT 125
81535: PPUSH
81536: CALL_OW 109
// end else
81540: GO 81726
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
81542: LD_EXP 88
81546: PUSH
81547: LD_VAR 0 2
81551: ARRAY
81552: PUSH
81553: LD_INT 1
81555: ARRAY
81556: PPUSH
81557: CALL_OW 310
81561: IFFALSE 81584
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
81563: LD_EXP 88
81567: PUSH
81568: LD_VAR 0 2
81572: ARRAY
81573: PUSH
81574: LD_INT 1
81576: ARRAY
81577: PPUSH
81578: CALL_OW 122
81582: GO 81726
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
81584: LD_EXP 88
81588: PUSH
81589: LD_VAR 0 2
81593: ARRAY
81594: PUSH
81595: LD_INT 1
81597: ARRAY
81598: PPUSH
81599: CALL_OW 314
81603: NOT
81604: PUSH
81605: LD_EXP 88
81609: PUSH
81610: LD_VAR 0 2
81614: ARRAY
81615: PUSH
81616: LD_INT 1
81618: ARRAY
81619: PPUSH
81620: LD_EXP 87
81624: PUSH
81625: LD_VAR 0 2
81629: ARRAY
81630: PUSH
81631: LD_INT 1
81633: ARRAY
81634: PUSH
81635: LD_INT 1
81637: ARRAY
81638: PPUSH
81639: LD_EXP 87
81643: PUSH
81644: LD_VAR 0 2
81648: ARRAY
81649: PUSH
81650: LD_INT 1
81652: ARRAY
81653: PUSH
81654: LD_INT 2
81656: ARRAY
81657: PPUSH
81658: CALL_OW 297
81662: PUSH
81663: LD_INT 6
81665: GREATER
81666: AND
81667: IFFALSE 81726
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
81669: LD_EXP 88
81673: PUSH
81674: LD_VAR 0 2
81678: ARRAY
81679: PUSH
81680: LD_INT 1
81682: ARRAY
81683: PPUSH
81684: LD_EXP 87
81688: PUSH
81689: LD_VAR 0 2
81693: ARRAY
81694: PUSH
81695: LD_INT 1
81697: ARRAY
81698: PUSH
81699: LD_INT 1
81701: ARRAY
81702: PPUSH
81703: LD_EXP 87
81707: PUSH
81708: LD_VAR 0 2
81712: ARRAY
81713: PUSH
81714: LD_INT 1
81716: ARRAY
81717: PUSH
81718: LD_INT 2
81720: ARRAY
81721: PPUSH
81722: CALL_OW 111
// end ; end ; end ;
81726: GO 81139
81728: POP
81729: POP
// end ;
81730: LD_VAR 0 1
81734: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
81735: LD_INT 0
81737: PPUSH
81738: PPUSH
81739: PPUSH
81740: PPUSH
81741: PPUSH
81742: PPUSH
81743: PPUSH
81744: PPUSH
81745: PPUSH
81746: PPUSH
81747: PPUSH
// if not mc_bases then
81748: LD_EXP 50
81752: NOT
81753: IFFALSE 81757
// exit ;
81755: GO 82697
// for i = 1 to mc_bases do
81757: LD_ADDR_VAR 0 2
81761: PUSH
81762: DOUBLE
81763: LD_INT 1
81765: DEC
81766: ST_TO_ADDR
81767: LD_EXP 50
81771: PUSH
81772: FOR_TO
81773: IFFALSE 82695
// begin if not mc_bases [ i ] or mc_scan [ i ] then
81775: LD_EXP 50
81779: PUSH
81780: LD_VAR 0 2
81784: ARRAY
81785: NOT
81786: PUSH
81787: LD_EXP 73
81791: PUSH
81792: LD_VAR 0 2
81796: ARRAY
81797: OR
81798: IFFALSE 81802
// continue ;
81800: GO 81772
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
81802: LD_ADDR_VAR 0 7
81806: PUSH
81807: LD_EXP 50
81811: PUSH
81812: LD_VAR 0 2
81816: ARRAY
81817: PUSH
81818: LD_INT 1
81820: ARRAY
81821: PPUSH
81822: CALL_OW 248
81826: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
81827: LD_VAR 0 7
81831: PUSH
81832: LD_INT 3
81834: EQUAL
81835: PUSH
81836: LD_EXP 69
81840: PUSH
81841: LD_VAR 0 2
81845: ARRAY
81846: PUSH
81847: LD_EXP 72
81851: PUSH
81852: LD_VAR 0 2
81856: ARRAY
81857: UNION
81858: PPUSH
81859: LD_INT 33
81861: PUSH
81862: LD_INT 2
81864: PUSH
81865: EMPTY
81866: LIST
81867: LIST
81868: PPUSH
81869: CALL_OW 72
81873: NOT
81874: OR
81875: IFFALSE 81879
// continue ;
81877: GO 81772
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
81879: LD_ADDR_VAR 0 9
81883: PUSH
81884: LD_EXP 50
81888: PUSH
81889: LD_VAR 0 2
81893: ARRAY
81894: PPUSH
81895: LD_INT 30
81897: PUSH
81898: LD_INT 36
81900: PUSH
81901: EMPTY
81902: LIST
81903: LIST
81904: PPUSH
81905: CALL_OW 72
81909: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
81910: LD_ADDR_VAR 0 10
81914: PUSH
81915: LD_EXP 69
81919: PUSH
81920: LD_VAR 0 2
81924: ARRAY
81925: PPUSH
81926: LD_INT 34
81928: PUSH
81929: LD_INT 31
81931: PUSH
81932: EMPTY
81933: LIST
81934: LIST
81935: PPUSH
81936: CALL_OW 72
81940: ST_TO_ADDR
// if not cts and not mcts then
81941: LD_VAR 0 9
81945: NOT
81946: PUSH
81947: LD_VAR 0 10
81951: NOT
81952: AND
81953: IFFALSE 81957
// continue ;
81955: GO 81772
// x := cts ;
81957: LD_ADDR_VAR 0 11
81961: PUSH
81962: LD_VAR 0 9
81966: ST_TO_ADDR
// if not x then
81967: LD_VAR 0 11
81971: NOT
81972: IFFALSE 81984
// x := mcts ;
81974: LD_ADDR_VAR 0 11
81978: PUSH
81979: LD_VAR 0 10
81983: ST_TO_ADDR
// if not x then
81984: LD_VAR 0 11
81988: NOT
81989: IFFALSE 81993
// continue ;
81991: GO 81772
// if mc_remote_driver [ i ] then
81993: LD_EXP 90
81997: PUSH
81998: LD_VAR 0 2
82002: ARRAY
82003: IFFALSE 82390
// for j in mc_remote_driver [ i ] do
82005: LD_ADDR_VAR 0 3
82009: PUSH
82010: LD_EXP 90
82014: PUSH
82015: LD_VAR 0 2
82019: ARRAY
82020: PUSH
82021: FOR_IN
82022: IFFALSE 82388
// begin if GetClass ( j ) <> 3 then
82024: LD_VAR 0 3
82028: PPUSH
82029: CALL_OW 257
82033: PUSH
82034: LD_INT 3
82036: NONEQUAL
82037: IFFALSE 82090
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
82039: LD_ADDR_EXP 90
82043: PUSH
82044: LD_EXP 90
82048: PPUSH
82049: LD_VAR 0 2
82053: PPUSH
82054: LD_EXP 90
82058: PUSH
82059: LD_VAR 0 2
82063: ARRAY
82064: PUSH
82065: LD_VAR 0 3
82069: DIFF
82070: PPUSH
82071: CALL_OW 1
82075: ST_TO_ADDR
// SetTag ( j , 0 ) ;
82076: LD_VAR 0 3
82080: PPUSH
82081: LD_INT 0
82083: PPUSH
82084: CALL_OW 109
// continue ;
82088: GO 82021
// end ; if UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) and not IsDriver ( j ) then
82090: LD_EXP 69
82094: PUSH
82095: LD_VAR 0 2
82099: ARRAY
82100: PPUSH
82101: LD_INT 34
82103: PUSH
82104: LD_INT 31
82106: PUSH
82107: EMPTY
82108: LIST
82109: LIST
82110: PUSH
82111: LD_INT 58
82113: PUSH
82114: EMPTY
82115: LIST
82116: PUSH
82117: EMPTY
82118: LIST
82119: LIST
82120: PPUSH
82121: CALL_OW 72
82125: PUSH
82126: LD_VAR 0 3
82130: PPUSH
82131: CALL 54176 0 1
82135: NOT
82136: AND
82137: IFFALSE 82208
// begin if IsInUnit ( j ) then
82139: LD_VAR 0 3
82143: PPUSH
82144: CALL_OW 310
82148: IFFALSE 82159
// ComExitBuilding ( j ) ;
82150: LD_VAR 0 3
82154: PPUSH
82155: CALL_OW 122
// AddComEnterUnit ( j , UnitFilter ( mc_vehicles [ i ] , [ [ f_weapon , ar_control_tower ] , [ f_empty ] ] ) [ 1 ] ) ;
82159: LD_VAR 0 3
82163: PPUSH
82164: LD_EXP 69
82168: PUSH
82169: LD_VAR 0 2
82173: ARRAY
82174: PPUSH
82175: LD_INT 34
82177: PUSH
82178: LD_INT 31
82180: PUSH
82181: EMPTY
82182: LIST
82183: LIST
82184: PUSH
82185: LD_INT 58
82187: PUSH
82188: EMPTY
82189: LIST
82190: PUSH
82191: EMPTY
82192: LIST
82193: LIST
82194: PPUSH
82195: CALL_OW 72
82199: PUSH
82200: LD_INT 1
82202: ARRAY
82203: PPUSH
82204: CALL_OW 180
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
82208: LD_VAR 0 3
82212: PPUSH
82213: CALL_OW 310
82217: NOT
82218: PUSH
82219: LD_VAR 0 3
82223: PPUSH
82224: CALL_OW 310
82228: PPUSH
82229: CALL_OW 266
82233: PUSH
82234: LD_INT 36
82236: NONEQUAL
82237: PUSH
82238: LD_VAR 0 3
82242: PPUSH
82243: CALL 54176 0 1
82247: NOT
82248: AND
82249: OR
82250: IFFALSE 82386
// begin if IsInUnit ( j ) then
82252: LD_VAR 0 3
82256: PPUSH
82257: CALL_OW 310
82261: IFFALSE 82272
// ComExitBuilding ( j ) ;
82263: LD_VAR 0 3
82267: PPUSH
82268: CALL_OW 122
// ct := 0 ;
82272: LD_ADDR_VAR 0 8
82276: PUSH
82277: LD_INT 0
82279: ST_TO_ADDR
// for k in x do
82280: LD_ADDR_VAR 0 4
82284: PUSH
82285: LD_VAR 0 11
82289: PUSH
82290: FOR_IN
82291: IFFALSE 82364
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
82293: LD_VAR 0 4
82297: PPUSH
82298: CALL_OW 264
82302: PUSH
82303: LD_INT 31
82305: EQUAL
82306: PUSH
82307: LD_VAR 0 4
82311: PPUSH
82312: CALL_OW 311
82316: NOT
82317: AND
82318: PUSH
82319: LD_VAR 0 4
82323: PPUSH
82324: CALL_OW 266
82328: PUSH
82329: LD_INT 36
82331: EQUAL
82332: PUSH
82333: LD_VAR 0 4
82337: PPUSH
82338: CALL_OW 313
82342: PUSH
82343: LD_INT 3
82345: LESS
82346: AND
82347: OR
82348: IFFALSE 82362
// begin ct := k ;
82350: LD_ADDR_VAR 0 8
82354: PUSH
82355: LD_VAR 0 4
82359: ST_TO_ADDR
// break ;
82360: GO 82364
// end ;
82362: GO 82290
82364: POP
82365: POP
// if ct then
82366: LD_VAR 0 8
82370: IFFALSE 82386
// ComEnterUnit ( j , ct ) ;
82372: LD_VAR 0 3
82376: PPUSH
82377: LD_VAR 0 8
82381: PPUSH
82382: CALL_OW 120
// end ; end ;
82386: GO 82021
82388: POP
82389: POP
// places := 0 ;
82390: LD_ADDR_VAR 0 5
82394: PUSH
82395: LD_INT 0
82397: ST_TO_ADDR
// for j = 1 to x do
82398: LD_ADDR_VAR 0 3
82402: PUSH
82403: DOUBLE
82404: LD_INT 1
82406: DEC
82407: ST_TO_ADDR
82408: LD_VAR 0 11
82412: PUSH
82413: FOR_TO
82414: IFFALSE 82490
// if GetWeapon ( x [ j ] ) = ar_control_tower then
82416: LD_VAR 0 11
82420: PUSH
82421: LD_VAR 0 3
82425: ARRAY
82426: PPUSH
82427: CALL_OW 264
82431: PUSH
82432: LD_INT 31
82434: EQUAL
82435: IFFALSE 82453
// places := places + 1 else
82437: LD_ADDR_VAR 0 5
82441: PUSH
82442: LD_VAR 0 5
82446: PUSH
82447: LD_INT 1
82449: PLUS
82450: ST_TO_ADDR
82451: GO 82488
// if GetBType ( x [ j ] ) = b_control_tower then
82453: LD_VAR 0 11
82457: PUSH
82458: LD_VAR 0 3
82462: ARRAY
82463: PPUSH
82464: CALL_OW 266
82468: PUSH
82469: LD_INT 36
82471: EQUAL
82472: IFFALSE 82488
// places := places + 3 ;
82474: LD_ADDR_VAR 0 5
82478: PUSH
82479: LD_VAR 0 5
82483: PUSH
82484: LD_INT 3
82486: PLUS
82487: ST_TO_ADDR
82488: GO 82413
82490: POP
82491: POP
// if places = 0 or places <= mc_remote_driver [ i ] then
82492: LD_VAR 0 5
82496: PUSH
82497: LD_INT 0
82499: EQUAL
82500: PUSH
82501: LD_VAR 0 5
82505: PUSH
82506: LD_EXP 90
82510: PUSH
82511: LD_VAR 0 2
82515: ARRAY
82516: LESSEQUAL
82517: OR
82518: IFFALSE 82522
// continue ;
82520: GO 81772
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
82522: LD_ADDR_VAR 0 6
82526: PUSH
82527: LD_EXP 50
82531: PUSH
82532: LD_VAR 0 2
82536: ARRAY
82537: PPUSH
82538: LD_INT 25
82540: PUSH
82541: LD_INT 3
82543: PUSH
82544: EMPTY
82545: LIST
82546: LIST
82547: PPUSH
82548: CALL_OW 72
82552: PUSH
82553: LD_EXP 90
82557: PUSH
82558: LD_VAR 0 2
82562: ARRAY
82563: DIFF
82564: PPUSH
82565: LD_INT 3
82567: PPUSH
82568: CALL 55076 0 2
82572: ST_TO_ADDR
// for j in tmp do
82573: LD_ADDR_VAR 0 3
82577: PUSH
82578: LD_VAR 0 6
82582: PUSH
82583: FOR_IN
82584: IFFALSE 82619
// if GetTag ( j ) > 0 then
82586: LD_VAR 0 3
82590: PPUSH
82591: CALL_OW 110
82595: PUSH
82596: LD_INT 0
82598: GREATER
82599: IFFALSE 82617
// tmp := tmp diff j ;
82601: LD_ADDR_VAR 0 6
82605: PUSH
82606: LD_VAR 0 6
82610: PUSH
82611: LD_VAR 0 3
82615: DIFF
82616: ST_TO_ADDR
82617: GO 82583
82619: POP
82620: POP
// if not tmp then
82621: LD_VAR 0 6
82625: NOT
82626: IFFALSE 82630
// continue ;
82628: GO 81772
// if places then
82630: LD_VAR 0 5
82634: IFFALSE 82693
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
82636: LD_ADDR_EXP 90
82640: PUSH
82641: LD_EXP 90
82645: PPUSH
82646: LD_VAR 0 2
82650: PPUSH
82651: LD_EXP 90
82655: PUSH
82656: LD_VAR 0 2
82660: ARRAY
82661: PUSH
82662: LD_VAR 0 6
82666: PUSH
82667: LD_INT 1
82669: ARRAY
82670: UNION
82671: PPUSH
82672: CALL_OW 1
82676: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
82677: LD_VAR 0 6
82681: PUSH
82682: LD_INT 1
82684: ARRAY
82685: PPUSH
82686: LD_INT 126
82688: PPUSH
82689: CALL_OW 109
// end ; end ;
82693: GO 81772
82695: POP
82696: POP
// end ;
82697: LD_VAR 0 1
82701: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
82702: LD_INT 0
82704: PPUSH
82705: PPUSH
82706: PPUSH
82707: PPUSH
82708: PPUSH
82709: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
82710: LD_VAR 0 1
82714: NOT
82715: PUSH
82716: LD_VAR 0 2
82720: NOT
82721: OR
82722: PUSH
82723: LD_VAR 0 3
82727: NOT
82728: OR
82729: PUSH
82730: LD_VAR 0 4
82734: PUSH
82735: LD_INT 1
82737: PUSH
82738: LD_INT 2
82740: PUSH
82741: LD_INT 3
82743: PUSH
82744: LD_INT 4
82746: PUSH
82747: LD_INT 5
82749: PUSH
82750: LD_INT 8
82752: PUSH
82753: LD_INT 9
82755: PUSH
82756: LD_INT 15
82758: PUSH
82759: LD_INT 16
82761: PUSH
82762: EMPTY
82763: LIST
82764: LIST
82765: LIST
82766: LIST
82767: LIST
82768: LIST
82769: LIST
82770: LIST
82771: LIST
82772: IN
82773: NOT
82774: OR
82775: IFFALSE 82779
// exit ;
82777: GO 83679
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
82779: LD_ADDR_VAR 0 2
82783: PUSH
82784: LD_VAR 0 2
82788: PPUSH
82789: LD_INT 21
82791: PUSH
82792: LD_INT 3
82794: PUSH
82795: EMPTY
82796: LIST
82797: LIST
82798: PUSH
82799: LD_INT 24
82801: PUSH
82802: LD_INT 250
82804: PUSH
82805: EMPTY
82806: LIST
82807: LIST
82808: PUSH
82809: EMPTY
82810: LIST
82811: LIST
82812: PPUSH
82813: CALL_OW 72
82817: ST_TO_ADDR
// case class of 1 , 15 :
82818: LD_VAR 0 4
82822: PUSH
82823: LD_INT 1
82825: DOUBLE
82826: EQUAL
82827: IFTRUE 82837
82829: LD_INT 15
82831: DOUBLE
82832: EQUAL
82833: IFTRUE 82837
82835: GO 82922
82837: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
82838: LD_ADDR_VAR 0 8
82842: PUSH
82843: LD_VAR 0 2
82847: PPUSH
82848: LD_INT 2
82850: PUSH
82851: LD_INT 30
82853: PUSH
82854: LD_INT 32
82856: PUSH
82857: EMPTY
82858: LIST
82859: LIST
82860: PUSH
82861: LD_INT 30
82863: PUSH
82864: LD_INT 31
82866: PUSH
82867: EMPTY
82868: LIST
82869: LIST
82870: PUSH
82871: EMPTY
82872: LIST
82873: LIST
82874: LIST
82875: PPUSH
82876: CALL_OW 72
82880: PUSH
82881: LD_VAR 0 2
82885: PPUSH
82886: LD_INT 2
82888: PUSH
82889: LD_INT 30
82891: PUSH
82892: LD_INT 4
82894: PUSH
82895: EMPTY
82896: LIST
82897: LIST
82898: PUSH
82899: LD_INT 30
82901: PUSH
82902: LD_INT 5
82904: PUSH
82905: EMPTY
82906: LIST
82907: LIST
82908: PUSH
82909: EMPTY
82910: LIST
82911: LIST
82912: LIST
82913: PPUSH
82914: CALL_OW 72
82918: ADD
82919: ST_TO_ADDR
82920: GO 83168
82922: LD_INT 2
82924: DOUBLE
82925: EQUAL
82926: IFTRUE 82936
82928: LD_INT 16
82930: DOUBLE
82931: EQUAL
82932: IFTRUE 82936
82934: GO 82982
82936: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
82937: LD_ADDR_VAR 0 8
82941: PUSH
82942: LD_VAR 0 2
82946: PPUSH
82947: LD_INT 2
82949: PUSH
82950: LD_INT 30
82952: PUSH
82953: LD_INT 0
82955: PUSH
82956: EMPTY
82957: LIST
82958: LIST
82959: PUSH
82960: LD_INT 30
82962: PUSH
82963: LD_INT 1
82965: PUSH
82966: EMPTY
82967: LIST
82968: LIST
82969: PUSH
82970: EMPTY
82971: LIST
82972: LIST
82973: LIST
82974: PPUSH
82975: CALL_OW 72
82979: ST_TO_ADDR
82980: GO 83168
82982: LD_INT 3
82984: DOUBLE
82985: EQUAL
82986: IFTRUE 82990
82988: GO 83036
82990: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
82991: LD_ADDR_VAR 0 8
82995: PUSH
82996: LD_VAR 0 2
83000: PPUSH
83001: LD_INT 2
83003: PUSH
83004: LD_INT 30
83006: PUSH
83007: LD_INT 2
83009: PUSH
83010: EMPTY
83011: LIST
83012: LIST
83013: PUSH
83014: LD_INT 30
83016: PUSH
83017: LD_INT 3
83019: PUSH
83020: EMPTY
83021: LIST
83022: LIST
83023: PUSH
83024: EMPTY
83025: LIST
83026: LIST
83027: LIST
83028: PPUSH
83029: CALL_OW 72
83033: ST_TO_ADDR
83034: GO 83168
83036: LD_INT 4
83038: DOUBLE
83039: EQUAL
83040: IFTRUE 83044
83042: GO 83101
83044: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
83045: LD_ADDR_VAR 0 8
83049: PUSH
83050: LD_VAR 0 2
83054: PPUSH
83055: LD_INT 2
83057: PUSH
83058: LD_INT 30
83060: PUSH
83061: LD_INT 6
83063: PUSH
83064: EMPTY
83065: LIST
83066: LIST
83067: PUSH
83068: LD_INT 30
83070: PUSH
83071: LD_INT 7
83073: PUSH
83074: EMPTY
83075: LIST
83076: LIST
83077: PUSH
83078: LD_INT 30
83080: PUSH
83081: LD_INT 8
83083: PUSH
83084: EMPTY
83085: LIST
83086: LIST
83087: PUSH
83088: EMPTY
83089: LIST
83090: LIST
83091: LIST
83092: LIST
83093: PPUSH
83094: CALL_OW 72
83098: ST_TO_ADDR
83099: GO 83168
83101: LD_INT 5
83103: DOUBLE
83104: EQUAL
83105: IFTRUE 83121
83107: LD_INT 8
83109: DOUBLE
83110: EQUAL
83111: IFTRUE 83121
83113: LD_INT 9
83115: DOUBLE
83116: EQUAL
83117: IFTRUE 83121
83119: GO 83167
83121: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
83122: LD_ADDR_VAR 0 8
83126: PUSH
83127: LD_VAR 0 2
83131: PPUSH
83132: LD_INT 2
83134: PUSH
83135: LD_INT 30
83137: PUSH
83138: LD_INT 4
83140: PUSH
83141: EMPTY
83142: LIST
83143: LIST
83144: PUSH
83145: LD_INT 30
83147: PUSH
83148: LD_INT 5
83150: PUSH
83151: EMPTY
83152: LIST
83153: LIST
83154: PUSH
83155: EMPTY
83156: LIST
83157: LIST
83158: LIST
83159: PPUSH
83160: CALL_OW 72
83164: ST_TO_ADDR
83165: GO 83168
83167: POP
// if not tmp then
83168: LD_VAR 0 8
83172: NOT
83173: IFFALSE 83177
// exit ;
83175: GO 83679
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
83177: LD_VAR 0 4
83181: PUSH
83182: LD_INT 1
83184: PUSH
83185: LD_INT 15
83187: PUSH
83188: EMPTY
83189: LIST
83190: LIST
83191: IN
83192: PUSH
83193: LD_EXP 59
83197: PUSH
83198: LD_VAR 0 1
83202: ARRAY
83203: AND
83204: IFFALSE 83360
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
83206: LD_ADDR_VAR 0 9
83210: PUSH
83211: LD_EXP 59
83215: PUSH
83216: LD_VAR 0 1
83220: ARRAY
83221: PUSH
83222: LD_INT 1
83224: ARRAY
83225: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
83226: LD_VAR 0 9
83230: PUSH
83231: LD_EXP 60
83235: PUSH
83236: LD_VAR 0 1
83240: ARRAY
83241: IN
83242: NOT
83243: IFFALSE 83358
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
83245: LD_ADDR_EXP 60
83249: PUSH
83250: LD_EXP 60
83254: PPUSH
83255: LD_VAR 0 1
83259: PUSH
83260: LD_EXP 60
83264: PUSH
83265: LD_VAR 0 1
83269: ARRAY
83270: PUSH
83271: LD_INT 1
83273: PLUS
83274: PUSH
83275: EMPTY
83276: LIST
83277: LIST
83278: PPUSH
83279: LD_VAR 0 9
83283: PPUSH
83284: CALL 24872 0 3
83288: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
83289: LD_ADDR_EXP 59
83293: PUSH
83294: LD_EXP 59
83298: PPUSH
83299: LD_VAR 0 1
83303: PPUSH
83304: LD_EXP 59
83308: PUSH
83309: LD_VAR 0 1
83313: ARRAY
83314: PUSH
83315: LD_VAR 0 9
83319: DIFF
83320: PPUSH
83321: CALL_OW 1
83325: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
83326: LD_VAR 0 3
83330: PPUSH
83331: LD_EXP 60
83335: PUSH
83336: LD_VAR 0 1
83340: ARRAY
83341: PUSH
83342: LD_EXP 60
83346: PUSH
83347: LD_VAR 0 1
83351: ARRAY
83352: ARRAY
83353: PPUSH
83354: CALL_OW 120
// end ; exit ;
83358: GO 83679
// end ; if tmp > 1 then
83360: LD_VAR 0 8
83364: PUSH
83365: LD_INT 1
83367: GREATER
83368: IFFALSE 83472
// for i = 2 to tmp do
83370: LD_ADDR_VAR 0 6
83374: PUSH
83375: DOUBLE
83376: LD_INT 2
83378: DEC
83379: ST_TO_ADDR
83380: LD_VAR 0 8
83384: PUSH
83385: FOR_TO
83386: IFFALSE 83470
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
83388: LD_VAR 0 8
83392: PUSH
83393: LD_VAR 0 6
83397: ARRAY
83398: PPUSH
83399: CALL_OW 461
83403: PUSH
83404: LD_INT 6
83406: EQUAL
83407: IFFALSE 83468
// begin x := tmp [ i ] ;
83409: LD_ADDR_VAR 0 9
83413: PUSH
83414: LD_VAR 0 8
83418: PUSH
83419: LD_VAR 0 6
83423: ARRAY
83424: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
83425: LD_ADDR_VAR 0 8
83429: PUSH
83430: LD_VAR 0 8
83434: PPUSH
83435: LD_VAR 0 6
83439: PPUSH
83440: CALL_OW 3
83444: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
83445: LD_ADDR_VAR 0 8
83449: PUSH
83450: LD_VAR 0 8
83454: PPUSH
83455: LD_INT 1
83457: PPUSH
83458: LD_VAR 0 9
83462: PPUSH
83463: CALL_OW 2
83467: ST_TO_ADDR
// end ;
83468: GO 83385
83470: POP
83471: POP
// for i in tmp do
83472: LD_ADDR_VAR 0 6
83476: PUSH
83477: LD_VAR 0 8
83481: PUSH
83482: FOR_IN
83483: IFFALSE 83552
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
83485: LD_VAR 0 6
83489: PPUSH
83490: CALL_OW 313
83494: PUSH
83495: LD_INT 6
83497: LESS
83498: PUSH
83499: LD_VAR 0 6
83503: PPUSH
83504: CALL_OW 266
83508: PUSH
83509: LD_INT 31
83511: PUSH
83512: LD_INT 32
83514: PUSH
83515: EMPTY
83516: LIST
83517: LIST
83518: IN
83519: NOT
83520: AND
83521: PUSH
83522: LD_VAR 0 6
83526: PPUSH
83527: CALL_OW 313
83531: PUSH
83532: LD_INT 0
83534: EQUAL
83535: OR
83536: IFFALSE 83550
// begin j := i ;
83538: LD_ADDR_VAR 0 7
83542: PUSH
83543: LD_VAR 0 6
83547: ST_TO_ADDR
// break ;
83548: GO 83552
// end ; end ;
83550: GO 83482
83552: POP
83553: POP
// if j then
83554: LD_VAR 0 7
83558: IFFALSE 83576
// ComEnterUnit ( unit , j ) else
83560: LD_VAR 0 3
83564: PPUSH
83565: LD_VAR 0 7
83569: PPUSH
83570: CALL_OW 120
83574: GO 83679
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
83576: LD_ADDR_VAR 0 10
83580: PUSH
83581: LD_VAR 0 2
83585: PPUSH
83586: LD_INT 2
83588: PUSH
83589: LD_INT 30
83591: PUSH
83592: LD_INT 0
83594: PUSH
83595: EMPTY
83596: LIST
83597: LIST
83598: PUSH
83599: LD_INT 30
83601: PUSH
83602: LD_INT 1
83604: PUSH
83605: EMPTY
83606: LIST
83607: LIST
83608: PUSH
83609: EMPTY
83610: LIST
83611: LIST
83612: LIST
83613: PPUSH
83614: CALL_OW 72
83618: ST_TO_ADDR
// if depot then
83619: LD_VAR 0 10
83623: IFFALSE 83679
// begin depot := NearestUnitToUnit ( depot , unit ) ;
83625: LD_ADDR_VAR 0 10
83629: PUSH
83630: LD_VAR 0 10
83634: PPUSH
83635: LD_VAR 0 3
83639: PPUSH
83640: CALL_OW 74
83644: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
83645: LD_VAR 0 3
83649: PPUSH
83650: LD_VAR 0 10
83654: PPUSH
83655: CALL_OW 296
83659: PUSH
83660: LD_INT 10
83662: GREATER
83663: IFFALSE 83679
// ComStandNearbyBuilding ( unit , depot ) ;
83665: LD_VAR 0 3
83669: PPUSH
83670: LD_VAR 0 10
83674: PPUSH
83675: CALL 21450 0 2
// end ; end ; end ;
83679: LD_VAR 0 5
83683: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
83684: LD_INT 0
83686: PPUSH
83687: PPUSH
83688: PPUSH
83689: PPUSH
// if not mc_bases then
83690: LD_EXP 50
83694: NOT
83695: IFFALSE 83699
// exit ;
83697: GO 83938
// for i = 1 to mc_bases do
83699: LD_ADDR_VAR 0 2
83703: PUSH
83704: DOUBLE
83705: LD_INT 1
83707: DEC
83708: ST_TO_ADDR
83709: LD_EXP 50
83713: PUSH
83714: FOR_TO
83715: IFFALSE 83936
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
83717: LD_ADDR_VAR 0 4
83721: PUSH
83722: LD_EXP 50
83726: PUSH
83727: LD_VAR 0 2
83731: ARRAY
83732: PPUSH
83733: LD_INT 21
83735: PUSH
83736: LD_INT 1
83738: PUSH
83739: EMPTY
83740: LIST
83741: LIST
83742: PPUSH
83743: CALL_OW 72
83747: PUSH
83748: LD_EXP 79
83752: PUSH
83753: LD_VAR 0 2
83757: ARRAY
83758: UNION
83759: ST_TO_ADDR
// if not tmp then
83760: LD_VAR 0 4
83764: NOT
83765: IFFALSE 83769
// continue ;
83767: GO 83714
// for j in tmp do
83769: LD_ADDR_VAR 0 3
83773: PUSH
83774: LD_VAR 0 4
83778: PUSH
83779: FOR_IN
83780: IFFALSE 83932
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
83782: LD_VAR 0 3
83786: PPUSH
83787: CALL_OW 110
83791: NOT
83792: PUSH
83793: LD_VAR 0 3
83797: PPUSH
83798: CALL_OW 314
83802: NOT
83803: AND
83804: PUSH
83805: LD_VAR 0 3
83809: PPUSH
83810: CALL_OW 311
83814: NOT
83815: AND
83816: PUSH
83817: LD_VAR 0 3
83821: PPUSH
83822: CALL_OW 310
83826: NOT
83827: AND
83828: PUSH
83829: LD_VAR 0 3
83833: PUSH
83834: LD_EXP 53
83838: PUSH
83839: LD_VAR 0 2
83843: ARRAY
83844: PUSH
83845: LD_INT 1
83847: ARRAY
83848: IN
83849: NOT
83850: AND
83851: PUSH
83852: LD_VAR 0 3
83856: PUSH
83857: LD_EXP 53
83861: PUSH
83862: LD_VAR 0 2
83866: ARRAY
83867: PUSH
83868: LD_INT 2
83870: ARRAY
83871: IN
83872: NOT
83873: AND
83874: PUSH
83875: LD_VAR 0 3
83879: PUSH
83880: LD_EXP 62
83884: PUSH
83885: LD_VAR 0 2
83889: ARRAY
83890: IN
83891: NOT
83892: AND
83893: IFFALSE 83930
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
83895: LD_VAR 0 2
83899: PPUSH
83900: LD_EXP 50
83904: PUSH
83905: LD_VAR 0 2
83909: ARRAY
83910: PPUSH
83911: LD_VAR 0 3
83915: PPUSH
83916: LD_VAR 0 3
83920: PPUSH
83921: CALL_OW 257
83925: PPUSH
83926: CALL 82702 0 4
// end ;
83930: GO 83779
83932: POP
83933: POP
// end ;
83934: GO 83714
83936: POP
83937: POP
// end ;
83938: LD_VAR 0 1
83942: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
83943: LD_INT 0
83945: PPUSH
83946: PPUSH
83947: PPUSH
83948: PPUSH
83949: PPUSH
83950: PPUSH
// if not mc_bases [ base ] then
83951: LD_EXP 50
83955: PUSH
83956: LD_VAR 0 1
83960: ARRAY
83961: NOT
83962: IFFALSE 83966
// exit ;
83964: GO 84148
// tmp := [ ] ;
83966: LD_ADDR_VAR 0 6
83970: PUSH
83971: EMPTY
83972: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
83973: LD_ADDR_VAR 0 7
83977: PUSH
83978: LD_VAR 0 3
83982: PPUSH
83983: LD_INT 0
83985: PPUSH
83986: CALL_OW 517
83990: ST_TO_ADDR
// if not list then
83991: LD_VAR 0 7
83995: NOT
83996: IFFALSE 84000
// exit ;
83998: GO 84148
// for i = 1 to amount do
84000: LD_ADDR_VAR 0 5
84004: PUSH
84005: DOUBLE
84006: LD_INT 1
84008: DEC
84009: ST_TO_ADDR
84010: LD_VAR 0 2
84014: PUSH
84015: FOR_TO
84016: IFFALSE 84096
// begin x := rand ( 1 , list [ 1 ] ) ;
84018: LD_ADDR_VAR 0 8
84022: PUSH
84023: LD_INT 1
84025: PPUSH
84026: LD_VAR 0 7
84030: PUSH
84031: LD_INT 1
84033: ARRAY
84034: PPUSH
84035: CALL_OW 12
84039: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
84040: LD_ADDR_VAR 0 6
84044: PUSH
84045: LD_VAR 0 6
84049: PPUSH
84050: LD_VAR 0 5
84054: PPUSH
84055: LD_VAR 0 7
84059: PUSH
84060: LD_INT 1
84062: ARRAY
84063: PUSH
84064: LD_VAR 0 8
84068: ARRAY
84069: PUSH
84070: LD_VAR 0 7
84074: PUSH
84075: LD_INT 2
84077: ARRAY
84078: PUSH
84079: LD_VAR 0 8
84083: ARRAY
84084: PUSH
84085: EMPTY
84086: LIST
84087: LIST
84088: PPUSH
84089: CALL_OW 1
84093: ST_TO_ADDR
// end ;
84094: GO 84015
84096: POP
84097: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
84098: LD_ADDR_EXP 63
84102: PUSH
84103: LD_EXP 63
84107: PPUSH
84108: LD_VAR 0 1
84112: PPUSH
84113: LD_VAR 0 6
84117: PPUSH
84118: CALL_OW 1
84122: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
84123: LD_ADDR_EXP 65
84127: PUSH
84128: LD_EXP 65
84132: PPUSH
84133: LD_VAR 0 1
84137: PPUSH
84138: LD_VAR 0 3
84142: PPUSH
84143: CALL_OW 1
84147: ST_TO_ADDR
// end ;
84148: LD_VAR 0 4
84152: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
84153: LD_INT 0
84155: PPUSH
// if not mc_bases [ base ] then
84156: LD_EXP 50
84160: PUSH
84161: LD_VAR 0 1
84165: ARRAY
84166: NOT
84167: IFFALSE 84171
// exit ;
84169: GO 84196
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
84171: LD_ADDR_EXP 55
84175: PUSH
84176: LD_EXP 55
84180: PPUSH
84181: LD_VAR 0 1
84185: PPUSH
84186: LD_VAR 0 2
84190: PPUSH
84191: CALL_OW 1
84195: ST_TO_ADDR
// end ;
84196: LD_VAR 0 3
84200: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
84201: LD_INT 0
84203: PPUSH
// if not mc_bases [ base ] then
84204: LD_EXP 50
84208: PUSH
84209: LD_VAR 0 1
84213: ARRAY
84214: NOT
84215: IFFALSE 84219
// exit ;
84217: GO 84256
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
84219: LD_ADDR_EXP 55
84223: PUSH
84224: LD_EXP 55
84228: PPUSH
84229: LD_VAR 0 1
84233: PPUSH
84234: LD_EXP 55
84238: PUSH
84239: LD_VAR 0 1
84243: ARRAY
84244: PUSH
84245: LD_VAR 0 2
84249: UNION
84250: PPUSH
84251: CALL_OW 1
84255: ST_TO_ADDR
// end ;
84256: LD_VAR 0 3
84260: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
84261: LD_INT 0
84263: PPUSH
// if not mc_bases [ base ] then
84264: LD_EXP 50
84268: PUSH
84269: LD_VAR 0 1
84273: ARRAY
84274: NOT
84275: IFFALSE 84279
// exit ;
84277: GO 84304
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
84279: LD_ADDR_EXP 71
84283: PUSH
84284: LD_EXP 71
84288: PPUSH
84289: LD_VAR 0 1
84293: PPUSH
84294: LD_VAR 0 2
84298: PPUSH
84299: CALL_OW 1
84303: ST_TO_ADDR
// end ;
84304: LD_VAR 0 3
84308: RET
// export function MC_InsertProduceList ( base , components ) ; begin
84309: LD_INT 0
84311: PPUSH
// if not mc_bases [ base ] then
84312: LD_EXP 50
84316: PUSH
84317: LD_VAR 0 1
84321: ARRAY
84322: NOT
84323: IFFALSE 84327
// exit ;
84325: GO 84364
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
84327: LD_ADDR_EXP 71
84331: PUSH
84332: LD_EXP 71
84336: PPUSH
84337: LD_VAR 0 1
84341: PPUSH
84342: LD_EXP 71
84346: PUSH
84347: LD_VAR 0 1
84351: ARRAY
84352: PUSH
84353: LD_VAR 0 2
84357: ADD
84358: PPUSH
84359: CALL_OW 1
84363: ST_TO_ADDR
// end ;
84364: LD_VAR 0 3
84368: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
84369: LD_INT 0
84371: PPUSH
// if not mc_bases [ base ] then
84372: LD_EXP 50
84376: PUSH
84377: LD_VAR 0 1
84381: ARRAY
84382: NOT
84383: IFFALSE 84387
// exit ;
84385: GO 84441
// mc_defender := Replace ( mc_defender , base , deflist ) ;
84387: LD_ADDR_EXP 72
84391: PUSH
84392: LD_EXP 72
84396: PPUSH
84397: LD_VAR 0 1
84401: PPUSH
84402: LD_VAR 0 2
84406: PPUSH
84407: CALL_OW 1
84411: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
84412: LD_ADDR_EXP 61
84416: PUSH
84417: LD_EXP 61
84421: PPUSH
84422: LD_VAR 0 1
84426: PPUSH
84427: LD_VAR 0 2
84431: PUSH
84432: LD_INT 0
84434: PLUS
84435: PPUSH
84436: CALL_OW 1
84440: ST_TO_ADDR
// end ;
84441: LD_VAR 0 3
84445: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
84446: LD_INT 0
84448: PPUSH
// if not mc_bases [ base ] then
84449: LD_EXP 50
84453: PUSH
84454: LD_VAR 0 1
84458: ARRAY
84459: NOT
84460: IFFALSE 84464
// exit ;
84462: GO 84489
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
84464: LD_ADDR_EXP 61
84468: PUSH
84469: LD_EXP 61
84473: PPUSH
84474: LD_VAR 0 1
84478: PPUSH
84479: LD_VAR 0 2
84483: PPUSH
84484: CALL_OW 1
84488: ST_TO_ADDR
// end ;
84489: LD_VAR 0 3
84493: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
84494: LD_INT 0
84496: PPUSH
84497: PPUSH
84498: PPUSH
84499: PPUSH
// if not mc_bases [ base ] then
84500: LD_EXP 50
84504: PUSH
84505: LD_VAR 0 1
84509: ARRAY
84510: NOT
84511: IFFALSE 84515
// exit ;
84513: GO 84580
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
84515: LD_ADDR_EXP 70
84519: PUSH
84520: LD_EXP 70
84524: PPUSH
84525: LD_VAR 0 1
84529: PUSH
84530: LD_EXP 70
84534: PUSH
84535: LD_VAR 0 1
84539: ARRAY
84540: PUSH
84541: LD_INT 1
84543: PLUS
84544: PUSH
84545: EMPTY
84546: LIST
84547: LIST
84548: PPUSH
84549: LD_VAR 0 1
84553: PUSH
84554: LD_VAR 0 2
84558: PUSH
84559: LD_VAR 0 3
84563: PUSH
84564: LD_VAR 0 4
84568: PUSH
84569: EMPTY
84570: LIST
84571: LIST
84572: LIST
84573: LIST
84574: PPUSH
84575: CALL 24872 0 3
84579: ST_TO_ADDR
// end ;
84580: LD_VAR 0 5
84584: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
84585: LD_INT 0
84587: PPUSH
// if not mc_bases [ base ] then
84588: LD_EXP 50
84592: PUSH
84593: LD_VAR 0 1
84597: ARRAY
84598: NOT
84599: IFFALSE 84603
// exit ;
84601: GO 84628
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
84603: LD_ADDR_EXP 87
84607: PUSH
84608: LD_EXP 87
84612: PPUSH
84613: LD_VAR 0 1
84617: PPUSH
84618: LD_VAR 0 2
84622: PPUSH
84623: CALL_OW 1
84627: ST_TO_ADDR
// end ;
84628: LD_VAR 0 3
84632: RET
// export function MC_GetMinesField ( base ) ; begin
84633: LD_INT 0
84635: PPUSH
// result := mc_mines [ base ] ;
84636: LD_ADDR_VAR 0 2
84640: PUSH
84641: LD_EXP 63
84645: PUSH
84646: LD_VAR 0 1
84650: ARRAY
84651: ST_TO_ADDR
// end ;
84652: LD_VAR 0 2
84656: RET
// export function MC_GetProduceList ( base ) ; begin
84657: LD_INT 0
84659: PPUSH
// result := mc_produce [ base ] ;
84660: LD_ADDR_VAR 0 2
84664: PUSH
84665: LD_EXP 71
84669: PUSH
84670: LD_VAR 0 1
84674: ARRAY
84675: ST_TO_ADDR
// end ;
84676: LD_VAR 0 2
84680: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
84681: LD_INT 0
84683: PPUSH
84684: PPUSH
// if not mc_bases then
84685: LD_EXP 50
84689: NOT
84690: IFFALSE 84694
// exit ;
84692: GO 84759
// if mc_bases [ base ] then
84694: LD_EXP 50
84698: PUSH
84699: LD_VAR 0 1
84703: ARRAY
84704: IFFALSE 84759
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
84706: LD_ADDR_VAR 0 3
84710: PUSH
84711: LD_EXP 50
84715: PUSH
84716: LD_VAR 0 1
84720: ARRAY
84721: PPUSH
84722: LD_INT 30
84724: PUSH
84725: LD_VAR 0 2
84729: PUSH
84730: EMPTY
84731: LIST
84732: LIST
84733: PPUSH
84734: CALL_OW 72
84738: ST_TO_ADDR
// if result then
84739: LD_VAR 0 3
84743: IFFALSE 84759
// result := result [ 1 ] ;
84745: LD_ADDR_VAR 0 3
84749: PUSH
84750: LD_VAR 0 3
84754: PUSH
84755: LD_INT 1
84757: ARRAY
84758: ST_TO_ADDR
// end ; end ;
84759: LD_VAR 0 3
84763: RET
// export function MC_GetBuildings ( base , btype ) ; var i ; begin
84764: LD_INT 0
84766: PPUSH
84767: PPUSH
// if not mc_bases then
84768: LD_EXP 50
84772: NOT
84773: IFFALSE 84777
// exit ;
84775: GO 84822
// if mc_bases [ base ] then
84777: LD_EXP 50
84781: PUSH
84782: LD_VAR 0 1
84786: ARRAY
84787: IFFALSE 84822
// result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
84789: LD_ADDR_VAR 0 3
84793: PUSH
84794: LD_EXP 50
84798: PUSH
84799: LD_VAR 0 1
84803: ARRAY
84804: PPUSH
84805: LD_INT 30
84807: PUSH
84808: LD_VAR 0 2
84812: PUSH
84813: EMPTY
84814: LIST
84815: LIST
84816: PPUSH
84817: CALL_OW 72
84821: ST_TO_ADDR
// end ;
84822: LD_VAR 0 3
84826: RET
// export function MC_SetTame ( base , area ) ; begin
84827: LD_INT 0
84829: PPUSH
// if not mc_bases or not base then
84830: LD_EXP 50
84834: NOT
84835: PUSH
84836: LD_VAR 0 1
84840: NOT
84841: OR
84842: IFFALSE 84846
// exit ;
84844: GO 84871
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
84846: LD_ADDR_EXP 78
84850: PUSH
84851: LD_EXP 78
84855: PPUSH
84856: LD_VAR 0 1
84860: PPUSH
84861: LD_VAR 0 2
84865: PPUSH
84866: CALL_OW 1
84870: ST_TO_ADDR
// end ;
84871: LD_VAR 0 3
84875: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
84876: LD_INT 0
84878: PPUSH
84879: PPUSH
// if not mc_bases or not base then
84880: LD_EXP 50
84884: NOT
84885: PUSH
84886: LD_VAR 0 1
84890: NOT
84891: OR
84892: IFFALSE 84896
// exit ;
84894: GO 84998
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
84896: LD_ADDR_VAR 0 4
84900: PUSH
84901: LD_EXP 50
84905: PUSH
84906: LD_VAR 0 1
84910: ARRAY
84911: PPUSH
84912: LD_INT 30
84914: PUSH
84915: LD_VAR 0 2
84919: PUSH
84920: EMPTY
84921: LIST
84922: LIST
84923: PPUSH
84924: CALL_OW 72
84928: ST_TO_ADDR
// if not tmp then
84929: LD_VAR 0 4
84933: NOT
84934: IFFALSE 84938
// exit ;
84936: GO 84998
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
84938: LD_ADDR_EXP 82
84942: PUSH
84943: LD_EXP 82
84947: PPUSH
84948: LD_VAR 0 1
84952: PPUSH
84953: LD_EXP 82
84957: PUSH
84958: LD_VAR 0 1
84962: ARRAY
84963: PPUSH
84964: LD_EXP 82
84968: PUSH
84969: LD_VAR 0 1
84973: ARRAY
84974: PUSH
84975: LD_INT 1
84977: PLUS
84978: PPUSH
84979: LD_VAR 0 4
84983: PUSH
84984: LD_INT 1
84986: ARRAY
84987: PPUSH
84988: CALL_OW 2
84992: PPUSH
84993: CALL_OW 1
84997: ST_TO_ADDR
// end ;
84998: LD_VAR 0 3
85002: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
85003: LD_INT 0
85005: PPUSH
85006: PPUSH
// if not mc_bases or not base or not kinds then
85007: LD_EXP 50
85011: NOT
85012: PUSH
85013: LD_VAR 0 1
85017: NOT
85018: OR
85019: PUSH
85020: LD_VAR 0 2
85024: NOT
85025: OR
85026: IFFALSE 85030
// exit ;
85028: GO 85091
// for i in kinds do
85030: LD_ADDR_VAR 0 4
85034: PUSH
85035: LD_VAR 0 2
85039: PUSH
85040: FOR_IN
85041: IFFALSE 85089
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
85043: LD_ADDR_EXP 84
85047: PUSH
85048: LD_EXP 84
85052: PPUSH
85053: LD_VAR 0 1
85057: PUSH
85058: LD_EXP 84
85062: PUSH
85063: LD_VAR 0 1
85067: ARRAY
85068: PUSH
85069: LD_INT 1
85071: PLUS
85072: PUSH
85073: EMPTY
85074: LIST
85075: LIST
85076: PPUSH
85077: LD_VAR 0 4
85081: PPUSH
85082: CALL 24872 0 3
85086: ST_TO_ADDR
85087: GO 85040
85089: POP
85090: POP
// end ;
85091: LD_VAR 0 3
85095: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
85096: LD_INT 0
85098: PPUSH
// if not mc_bases or not base or not areas then
85099: LD_EXP 50
85103: NOT
85104: PUSH
85105: LD_VAR 0 1
85109: NOT
85110: OR
85111: PUSH
85112: LD_VAR 0 2
85116: NOT
85117: OR
85118: IFFALSE 85122
// exit ;
85120: GO 85147
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
85122: LD_ADDR_EXP 68
85126: PUSH
85127: LD_EXP 68
85131: PPUSH
85132: LD_VAR 0 1
85136: PPUSH
85137: LD_VAR 0 2
85141: PPUSH
85142: CALL_OW 1
85146: ST_TO_ADDR
// end ;
85147: LD_VAR 0 3
85151: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
85152: LD_INT 0
85154: PPUSH
// if not mc_bases or not base or not teleports_exit then
85155: LD_EXP 50
85159: NOT
85160: PUSH
85161: LD_VAR 0 1
85165: NOT
85166: OR
85167: PUSH
85168: LD_VAR 0 2
85172: NOT
85173: OR
85174: IFFALSE 85178
// exit ;
85176: GO 85203
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
85178: LD_ADDR_EXP 85
85182: PUSH
85183: LD_EXP 85
85187: PPUSH
85188: LD_VAR 0 1
85192: PPUSH
85193: LD_VAR 0 2
85197: PPUSH
85198: CALL_OW 1
85202: ST_TO_ADDR
// end ;
85203: LD_VAR 0 3
85207: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
85208: LD_INT 0
85210: PPUSH
85211: PPUSH
85212: PPUSH
// if not mc_bases or not base or not ext_list then
85213: LD_EXP 50
85217: NOT
85218: PUSH
85219: LD_VAR 0 1
85223: NOT
85224: OR
85225: PUSH
85226: LD_VAR 0 5
85230: NOT
85231: OR
85232: IFFALSE 85236
// exit ;
85234: GO 85409
// tmp := GetFacExtXYD ( x , y , d ) ;
85236: LD_ADDR_VAR 0 8
85240: PUSH
85241: LD_VAR 0 2
85245: PPUSH
85246: LD_VAR 0 3
85250: PPUSH
85251: LD_VAR 0 4
85255: PPUSH
85256: CALL 54206 0 3
85260: ST_TO_ADDR
// if not tmp then
85261: LD_VAR 0 8
85265: NOT
85266: IFFALSE 85270
// exit ;
85268: GO 85409
// for i in tmp do
85270: LD_ADDR_VAR 0 7
85274: PUSH
85275: LD_VAR 0 8
85279: PUSH
85280: FOR_IN
85281: IFFALSE 85407
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
85283: LD_ADDR_EXP 55
85287: PUSH
85288: LD_EXP 55
85292: PPUSH
85293: LD_VAR 0 1
85297: PPUSH
85298: LD_EXP 55
85302: PUSH
85303: LD_VAR 0 1
85307: ARRAY
85308: PPUSH
85309: LD_EXP 55
85313: PUSH
85314: LD_VAR 0 1
85318: ARRAY
85319: PUSH
85320: LD_INT 1
85322: PLUS
85323: PPUSH
85324: LD_VAR 0 5
85328: PUSH
85329: LD_INT 1
85331: ARRAY
85332: PUSH
85333: LD_VAR 0 7
85337: PUSH
85338: LD_INT 1
85340: ARRAY
85341: PUSH
85342: LD_VAR 0 7
85346: PUSH
85347: LD_INT 2
85349: ARRAY
85350: PUSH
85351: LD_VAR 0 7
85355: PUSH
85356: LD_INT 3
85358: ARRAY
85359: PUSH
85360: EMPTY
85361: LIST
85362: LIST
85363: LIST
85364: LIST
85365: PPUSH
85366: CALL_OW 2
85370: PPUSH
85371: CALL_OW 1
85375: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
85376: LD_ADDR_VAR 0 5
85380: PUSH
85381: LD_VAR 0 5
85385: PPUSH
85386: LD_INT 1
85388: PPUSH
85389: CALL_OW 3
85393: ST_TO_ADDR
// if not ext_list then
85394: LD_VAR 0 5
85398: NOT
85399: IFFALSE 85405
// exit ;
85401: POP
85402: POP
85403: GO 85409
// end ;
85405: GO 85280
85407: POP
85408: POP
// end ;
85409: LD_VAR 0 6
85413: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
85414: LD_INT 0
85416: PPUSH
// if not mc_bases or not base or not weapon_list then
85417: LD_EXP 50
85421: NOT
85422: PUSH
85423: LD_VAR 0 1
85427: NOT
85428: OR
85429: PUSH
85430: LD_VAR 0 2
85434: NOT
85435: OR
85436: IFFALSE 85440
// exit ;
85438: GO 85465
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
85440: LD_ADDR_EXP 89
85444: PUSH
85445: LD_EXP 89
85449: PPUSH
85450: LD_VAR 0 1
85454: PPUSH
85455: LD_VAR 0 2
85459: PPUSH
85460: CALL_OW 1
85464: ST_TO_ADDR
// end ;
85465: LD_VAR 0 3
85469: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
85470: LD_INT 0
85472: PPUSH
// if not mc_bases or not base or not tech_list then
85473: LD_EXP 50
85477: NOT
85478: PUSH
85479: LD_VAR 0 1
85483: NOT
85484: OR
85485: PUSH
85486: LD_VAR 0 2
85490: NOT
85491: OR
85492: IFFALSE 85496
// exit ;
85494: GO 85521
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
85496: LD_ADDR_EXP 77
85500: PUSH
85501: LD_EXP 77
85505: PPUSH
85506: LD_VAR 0 1
85510: PPUSH
85511: LD_VAR 0 2
85515: PPUSH
85516: CALL_OW 1
85520: ST_TO_ADDR
// end ;
85521: LD_VAR 0 3
85525: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
85526: LD_INT 0
85528: PPUSH
// if not mc_bases or not parking_area or not base then
85529: LD_EXP 50
85533: NOT
85534: PUSH
85535: LD_VAR 0 2
85539: NOT
85540: OR
85541: PUSH
85542: LD_VAR 0 1
85546: NOT
85547: OR
85548: IFFALSE 85552
// exit ;
85550: GO 85577
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
85552: LD_ADDR_EXP 74
85556: PUSH
85557: LD_EXP 74
85561: PPUSH
85562: LD_VAR 0 1
85566: PPUSH
85567: LD_VAR 0 2
85571: PPUSH
85572: CALL_OW 1
85576: ST_TO_ADDR
// end ;
85577: LD_VAR 0 3
85581: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
85582: LD_INT 0
85584: PPUSH
// if not mc_bases or not base or not scan_area then
85585: LD_EXP 50
85589: NOT
85590: PUSH
85591: LD_VAR 0 1
85595: NOT
85596: OR
85597: PUSH
85598: LD_VAR 0 2
85602: NOT
85603: OR
85604: IFFALSE 85608
// exit ;
85606: GO 85633
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
85608: LD_ADDR_EXP 75
85612: PUSH
85613: LD_EXP 75
85617: PPUSH
85618: LD_VAR 0 1
85622: PPUSH
85623: LD_VAR 0 2
85627: PPUSH
85628: CALL_OW 1
85632: ST_TO_ADDR
// end ;
85633: LD_VAR 0 3
85637: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
85638: LD_INT 0
85640: PPUSH
85641: PPUSH
// if not mc_bases or not base then
85642: LD_EXP 50
85646: NOT
85647: PUSH
85648: LD_VAR 0 1
85652: NOT
85653: OR
85654: IFFALSE 85658
// exit ;
85656: GO 85722
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
85658: LD_ADDR_VAR 0 3
85662: PUSH
85663: LD_INT 1
85665: PUSH
85666: LD_INT 2
85668: PUSH
85669: LD_INT 3
85671: PUSH
85672: LD_INT 4
85674: PUSH
85675: LD_INT 11
85677: PUSH
85678: EMPTY
85679: LIST
85680: LIST
85681: LIST
85682: LIST
85683: LIST
85684: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
85685: LD_ADDR_EXP 77
85689: PUSH
85690: LD_EXP 77
85694: PPUSH
85695: LD_VAR 0 1
85699: PPUSH
85700: LD_EXP 77
85704: PUSH
85705: LD_VAR 0 1
85709: ARRAY
85710: PUSH
85711: LD_VAR 0 3
85715: DIFF
85716: PPUSH
85717: CALL_OW 1
85721: ST_TO_ADDR
// end ;
85722: LD_VAR 0 2
85726: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
85727: LD_INT 0
85729: PPUSH
// result := mc_vehicles [ base ] ;
85730: LD_ADDR_VAR 0 3
85734: PUSH
85735: LD_EXP 69
85739: PUSH
85740: LD_VAR 0 1
85744: ARRAY
85745: ST_TO_ADDR
// if onlyCombat then
85746: LD_VAR 0 2
85750: IFFALSE 85928
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , ar_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
85752: LD_ADDR_VAR 0 3
85756: PUSH
85757: LD_VAR 0 3
85761: PUSH
85762: LD_VAR 0 3
85766: PPUSH
85767: LD_INT 2
85769: PUSH
85770: LD_INT 34
85772: PUSH
85773: LD_INT 12
85775: PUSH
85776: EMPTY
85777: LIST
85778: LIST
85779: PUSH
85780: LD_INT 34
85782: PUSH
85783: LD_INT 51
85785: PUSH
85786: EMPTY
85787: LIST
85788: LIST
85789: PUSH
85790: LD_INT 34
85792: PUSH
85793: LD_EXP 30
85797: PUSH
85798: EMPTY
85799: LIST
85800: LIST
85801: PUSH
85802: LD_INT 34
85804: PUSH
85805: LD_INT 32
85807: PUSH
85808: EMPTY
85809: LIST
85810: LIST
85811: PUSH
85812: LD_INT 34
85814: PUSH
85815: LD_INT 13
85817: PUSH
85818: EMPTY
85819: LIST
85820: LIST
85821: PUSH
85822: LD_INT 34
85824: PUSH
85825: LD_INT 52
85827: PUSH
85828: EMPTY
85829: LIST
85830: LIST
85831: PUSH
85832: LD_INT 34
85834: PUSH
85835: LD_EXP 35
85839: PUSH
85840: EMPTY
85841: LIST
85842: LIST
85843: PUSH
85844: LD_INT 34
85846: PUSH
85847: LD_INT 14
85849: PUSH
85850: EMPTY
85851: LIST
85852: LIST
85853: PUSH
85854: LD_INT 34
85856: PUSH
85857: LD_INT 53
85859: PUSH
85860: EMPTY
85861: LIST
85862: LIST
85863: PUSH
85864: LD_INT 34
85866: PUSH
85867: LD_EXP 29
85871: PUSH
85872: EMPTY
85873: LIST
85874: LIST
85875: PUSH
85876: LD_INT 34
85878: PUSH
85879: LD_INT 31
85881: PUSH
85882: EMPTY
85883: LIST
85884: LIST
85885: PUSH
85886: LD_INT 34
85888: PUSH
85889: LD_INT 48
85891: PUSH
85892: EMPTY
85893: LIST
85894: LIST
85895: PUSH
85896: LD_INT 34
85898: PUSH
85899: LD_INT 8
85901: PUSH
85902: EMPTY
85903: LIST
85904: LIST
85905: PUSH
85906: EMPTY
85907: LIST
85908: LIST
85909: LIST
85910: LIST
85911: LIST
85912: LIST
85913: LIST
85914: LIST
85915: LIST
85916: LIST
85917: LIST
85918: LIST
85919: LIST
85920: LIST
85921: PPUSH
85922: CALL_OW 72
85926: DIFF
85927: ST_TO_ADDR
// end ; end_of_file
85928: LD_VAR 0 3
85932: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
85933: LD_INT 0
85935: PPUSH
85936: PPUSH
85937: PPUSH
// if not mc_bases or not skirmish then
85938: LD_EXP 50
85942: NOT
85943: PUSH
85944: LD_EXP 48
85948: NOT
85949: OR
85950: IFFALSE 85954
// exit ;
85952: GO 86119
// for i = 1 to mc_bases do
85954: LD_ADDR_VAR 0 4
85958: PUSH
85959: DOUBLE
85960: LD_INT 1
85962: DEC
85963: ST_TO_ADDR
85964: LD_EXP 50
85968: PUSH
85969: FOR_TO
85970: IFFALSE 86117
// begin if sci in mc_bases [ i ] then
85972: LD_VAR 0 2
85976: PUSH
85977: LD_EXP 50
85981: PUSH
85982: LD_VAR 0 4
85986: ARRAY
85987: IN
85988: IFFALSE 86115
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
85990: LD_ADDR_EXP 79
85994: PUSH
85995: LD_EXP 79
85999: PPUSH
86000: LD_VAR 0 4
86004: PUSH
86005: LD_EXP 79
86009: PUSH
86010: LD_VAR 0 4
86014: ARRAY
86015: PUSH
86016: LD_INT 1
86018: PLUS
86019: PUSH
86020: EMPTY
86021: LIST
86022: LIST
86023: PPUSH
86024: LD_VAR 0 1
86028: PPUSH
86029: CALL 24872 0 3
86033: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
86034: LD_ADDR_VAR 0 5
86038: PUSH
86039: LD_EXP 50
86043: PUSH
86044: LD_VAR 0 4
86048: ARRAY
86049: PPUSH
86050: LD_INT 2
86052: PUSH
86053: LD_INT 30
86055: PUSH
86056: LD_INT 0
86058: PUSH
86059: EMPTY
86060: LIST
86061: LIST
86062: PUSH
86063: LD_INT 30
86065: PUSH
86066: LD_INT 1
86068: PUSH
86069: EMPTY
86070: LIST
86071: LIST
86072: PUSH
86073: EMPTY
86074: LIST
86075: LIST
86076: LIST
86077: PPUSH
86078: CALL_OW 72
86082: PPUSH
86083: LD_VAR 0 1
86087: PPUSH
86088: CALL_OW 74
86092: ST_TO_ADDR
// if tmp then
86093: LD_VAR 0 5
86097: IFFALSE 86113
// ComStandNearbyBuilding ( ape , tmp ) ;
86099: LD_VAR 0 1
86103: PPUSH
86104: LD_VAR 0 5
86108: PPUSH
86109: CALL 21450 0 2
// break ;
86113: GO 86117
// end ; end ;
86115: GO 85969
86117: POP
86118: POP
// end ;
86119: LD_VAR 0 3
86123: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
86124: LD_INT 0
86126: PPUSH
86127: PPUSH
86128: PPUSH
// if not mc_bases or not skirmish then
86129: LD_EXP 50
86133: NOT
86134: PUSH
86135: LD_EXP 48
86139: NOT
86140: OR
86141: IFFALSE 86145
// exit ;
86143: GO 86234
// for i = 1 to mc_bases do
86145: LD_ADDR_VAR 0 4
86149: PUSH
86150: DOUBLE
86151: LD_INT 1
86153: DEC
86154: ST_TO_ADDR
86155: LD_EXP 50
86159: PUSH
86160: FOR_TO
86161: IFFALSE 86232
// begin if building in mc_busy_turret_list [ i ] then
86163: LD_VAR 0 1
86167: PUSH
86168: LD_EXP 60
86172: PUSH
86173: LD_VAR 0 4
86177: ARRAY
86178: IN
86179: IFFALSE 86230
// begin tmp := mc_busy_turret_list [ i ] diff building ;
86181: LD_ADDR_VAR 0 5
86185: PUSH
86186: LD_EXP 60
86190: PUSH
86191: LD_VAR 0 4
86195: ARRAY
86196: PUSH
86197: LD_VAR 0 1
86201: DIFF
86202: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
86203: LD_ADDR_EXP 60
86207: PUSH
86208: LD_EXP 60
86212: PPUSH
86213: LD_VAR 0 4
86217: PPUSH
86218: LD_VAR 0 5
86222: PPUSH
86223: CALL_OW 1
86227: ST_TO_ADDR
// break ;
86228: GO 86232
// end ; end ;
86230: GO 86160
86232: POP
86233: POP
// end ;
86234: LD_VAR 0 3
86238: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
86239: LD_INT 0
86241: PPUSH
86242: PPUSH
86243: PPUSH
// if not mc_bases or not skirmish then
86244: LD_EXP 50
86248: NOT
86249: PUSH
86250: LD_EXP 48
86254: NOT
86255: OR
86256: IFFALSE 86260
// exit ;
86258: GO 86459
// for i = 1 to mc_bases do
86260: LD_ADDR_VAR 0 5
86264: PUSH
86265: DOUBLE
86266: LD_INT 1
86268: DEC
86269: ST_TO_ADDR
86270: LD_EXP 50
86274: PUSH
86275: FOR_TO
86276: IFFALSE 86457
// if building in mc_bases [ i ] then
86278: LD_VAR 0 1
86282: PUSH
86283: LD_EXP 50
86287: PUSH
86288: LD_VAR 0 5
86292: ARRAY
86293: IN
86294: IFFALSE 86455
// begin tmp := mc_bases [ i ] diff building ;
86296: LD_ADDR_VAR 0 6
86300: PUSH
86301: LD_EXP 50
86305: PUSH
86306: LD_VAR 0 5
86310: ARRAY
86311: PUSH
86312: LD_VAR 0 1
86316: DIFF
86317: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
86318: LD_ADDR_EXP 50
86322: PUSH
86323: LD_EXP 50
86327: PPUSH
86328: LD_VAR 0 5
86332: PPUSH
86333: LD_VAR 0 6
86337: PPUSH
86338: CALL_OW 1
86342: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
86343: LD_VAR 0 1
86347: PUSH
86348: LD_EXP 58
86352: PUSH
86353: LD_VAR 0 5
86357: ARRAY
86358: IN
86359: IFFALSE 86398
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
86361: LD_ADDR_EXP 58
86365: PUSH
86366: LD_EXP 58
86370: PPUSH
86371: LD_VAR 0 5
86375: PPUSH
86376: LD_EXP 58
86380: PUSH
86381: LD_VAR 0 5
86385: ARRAY
86386: PUSH
86387: LD_VAR 0 1
86391: DIFF
86392: PPUSH
86393: CALL_OW 1
86397: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
86398: LD_VAR 0 1
86402: PUSH
86403: LD_EXP 59
86407: PUSH
86408: LD_VAR 0 5
86412: ARRAY
86413: IN
86414: IFFALSE 86453
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
86416: LD_ADDR_EXP 59
86420: PUSH
86421: LD_EXP 59
86425: PPUSH
86426: LD_VAR 0 5
86430: PPUSH
86431: LD_EXP 59
86435: PUSH
86436: LD_VAR 0 5
86440: ARRAY
86441: PUSH
86442: LD_VAR 0 1
86446: DIFF
86447: PPUSH
86448: CALL_OW 1
86452: ST_TO_ADDR
// break ;
86453: GO 86457
// end ;
86455: GO 86275
86457: POP
86458: POP
// end ;
86459: LD_VAR 0 4
86463: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
86464: LD_INT 0
86466: PPUSH
86467: PPUSH
86468: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
86469: LD_EXP 50
86473: NOT
86474: PUSH
86475: LD_EXP 48
86479: NOT
86480: OR
86481: PUSH
86482: LD_VAR 0 3
86486: PUSH
86487: LD_EXP 76
86491: IN
86492: NOT
86493: OR
86494: IFFALSE 86498
// exit ;
86496: GO 86621
// for i = 1 to mc_vehicles do
86498: LD_ADDR_VAR 0 6
86502: PUSH
86503: DOUBLE
86504: LD_INT 1
86506: DEC
86507: ST_TO_ADDR
86508: LD_EXP 69
86512: PUSH
86513: FOR_TO
86514: IFFALSE 86619
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
86516: LD_VAR 0 2
86520: PUSH
86521: LD_EXP 69
86525: PUSH
86526: LD_VAR 0 6
86530: ARRAY
86531: IN
86532: PUSH
86533: LD_VAR 0 1
86537: PUSH
86538: LD_EXP 69
86542: PUSH
86543: LD_VAR 0 6
86547: ARRAY
86548: IN
86549: OR
86550: IFFALSE 86617
// begin tmp := mc_vehicles [ i ] diff old ;
86552: LD_ADDR_VAR 0 7
86556: PUSH
86557: LD_EXP 69
86561: PUSH
86562: LD_VAR 0 6
86566: ARRAY
86567: PUSH
86568: LD_VAR 0 2
86572: DIFF
86573: ST_TO_ADDR
// tmp := tmp diff new ;
86574: LD_ADDR_VAR 0 7
86578: PUSH
86579: LD_VAR 0 7
86583: PUSH
86584: LD_VAR 0 1
86588: DIFF
86589: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
86590: LD_ADDR_EXP 69
86594: PUSH
86595: LD_EXP 69
86599: PPUSH
86600: LD_VAR 0 6
86604: PPUSH
86605: LD_VAR 0 7
86609: PPUSH
86610: CALL_OW 1
86614: ST_TO_ADDR
// break ;
86615: GO 86619
// end ;
86617: GO 86513
86619: POP
86620: POP
// end ;
86621: LD_VAR 0 5
86625: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
86626: LD_INT 0
86628: PPUSH
86629: PPUSH
86630: PPUSH
86631: PPUSH
// if not mc_bases or not skirmish then
86632: LD_EXP 50
86636: NOT
86637: PUSH
86638: LD_EXP 48
86642: NOT
86643: OR
86644: IFFALSE 86648
// exit ;
86646: GO 87040
// side := GetSide ( vehicle ) ;
86648: LD_ADDR_VAR 0 5
86652: PUSH
86653: LD_VAR 0 1
86657: PPUSH
86658: CALL_OW 255
86662: ST_TO_ADDR
// for i = 1 to mc_bases do
86663: LD_ADDR_VAR 0 4
86667: PUSH
86668: DOUBLE
86669: LD_INT 1
86671: DEC
86672: ST_TO_ADDR
86673: LD_EXP 50
86677: PUSH
86678: FOR_TO
86679: IFFALSE 87038
// begin if factory in mc_bases [ i ] then
86681: LD_VAR 0 2
86685: PUSH
86686: LD_EXP 50
86690: PUSH
86691: LD_VAR 0 4
86695: ARRAY
86696: IN
86697: IFFALSE 87036
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ar_crane , ru_siberium_rocket , us_siberium_rocket ] then
86699: LD_EXP 72
86703: PUSH
86704: LD_VAR 0 4
86708: ARRAY
86709: PUSH
86710: LD_EXP 61
86714: PUSH
86715: LD_VAR 0 4
86719: ARRAY
86720: LESS
86721: PUSH
86722: LD_VAR 0 1
86726: PPUSH
86727: CALL_OW 264
86731: PUSH
86732: LD_INT 31
86734: PUSH
86735: LD_INT 32
86737: PUSH
86738: LD_INT 51
86740: PUSH
86741: LD_EXP 30
86745: PUSH
86746: LD_INT 12
86748: PUSH
86749: LD_INT 30
86751: PUSH
86752: LD_EXP 29
86756: PUSH
86757: LD_INT 11
86759: PUSH
86760: LD_INT 53
86762: PUSH
86763: LD_INT 14
86765: PUSH
86766: LD_EXP 33
86770: PUSH
86771: LD_INT 29
86773: PUSH
86774: LD_EXP 31
86778: PUSH
86779: LD_INT 13
86781: PUSH
86782: LD_INT 52
86784: PUSH
86785: LD_EXP 35
86789: PUSH
86790: LD_INT 48
86792: PUSH
86793: LD_INT 8
86795: PUSH
86796: EMPTY
86797: LIST
86798: LIST
86799: LIST
86800: LIST
86801: LIST
86802: LIST
86803: LIST
86804: LIST
86805: LIST
86806: LIST
86807: LIST
86808: LIST
86809: LIST
86810: LIST
86811: LIST
86812: LIST
86813: LIST
86814: LIST
86815: IN
86816: NOT
86817: AND
86818: IFFALSE 86866
// mc_defender := ReplaceIn ( mc_defender , [ i , mc_defender [ i ] + 1 ] , vehicle ) else
86820: LD_ADDR_EXP 72
86824: PUSH
86825: LD_EXP 72
86829: PPUSH
86830: LD_VAR 0 4
86834: PUSH
86835: LD_EXP 72
86839: PUSH
86840: LD_VAR 0 4
86844: ARRAY
86845: PUSH
86846: LD_INT 1
86848: PLUS
86849: PUSH
86850: EMPTY
86851: LIST
86852: LIST
86853: PPUSH
86854: LD_VAR 0 1
86858: PPUSH
86859: CALL 24872 0 3
86863: ST_TO_ADDR
86864: GO 86910
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
86866: LD_ADDR_EXP 69
86870: PUSH
86871: LD_EXP 69
86875: PPUSH
86876: LD_VAR 0 4
86880: PUSH
86881: LD_EXP 69
86885: PUSH
86886: LD_VAR 0 4
86890: ARRAY
86891: PUSH
86892: LD_INT 1
86894: PLUS
86895: PUSH
86896: EMPTY
86897: LIST
86898: LIST
86899: PPUSH
86900: LD_VAR 0 1
86904: PPUSH
86905: CALL 24872 0 3
86909: ST_TO_ADDR
// if GetControl ( vehicle ) = control_remote then
86910: LD_VAR 0 1
86914: PPUSH
86915: CALL_OW 263
86919: PUSH
86920: LD_INT 2
86922: EQUAL
86923: IFFALSE 86952
// begin repeat wait ( 0 0$3 ) ;
86925: LD_INT 105
86927: PPUSH
86928: CALL_OW 67
// Connect ( vehicle ) ;
86932: LD_VAR 0 1
86936: PPUSH
86937: CALL 27843 0 1
// until IsControledBy ( vehicle ) ;
86941: LD_VAR 0 1
86945: PPUSH
86946: CALL_OW 312
86950: IFFALSE 86925
// end ; ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
86952: LD_VAR 0 1
86956: PPUSH
86957: LD_EXP 74
86961: PUSH
86962: LD_VAR 0 4
86966: ARRAY
86967: PPUSH
86968: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
86972: LD_VAR 0 1
86976: PPUSH
86977: CALL_OW 263
86981: PUSH
86982: LD_INT 1
86984: NONEQUAL
86985: IFFALSE 86989
// break ;
86987: GO 87038
// repeat wait ( 0 0$1 ) ;
86989: LD_INT 35
86991: PPUSH
86992: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
86996: LD_VAR 0 1
87000: PPUSH
87001: LD_EXP 74
87005: PUSH
87006: LD_VAR 0 4
87010: ARRAY
87011: PPUSH
87012: CALL_OW 308
87016: IFFALSE 86989
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
87018: LD_VAR 0 1
87022: PPUSH
87023: CALL_OW 311
87027: PPUSH
87028: CALL_OW 121
// exit ;
87032: POP
87033: POP
87034: GO 87040
// end ; end ;
87036: GO 86678
87038: POP
87039: POP
// end ;
87040: LD_VAR 0 3
87044: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
87045: LD_INT 0
87047: PPUSH
87048: PPUSH
87049: PPUSH
87050: PPUSH
// if not mc_bases or not skirmish then
87051: LD_EXP 50
87055: NOT
87056: PUSH
87057: LD_EXP 48
87061: NOT
87062: OR
87063: IFFALSE 87067
// exit ;
87065: GO 87420
// repeat wait ( 0 0$1 ) ;
87067: LD_INT 35
87069: PPUSH
87070: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
87074: LD_VAR 0 2
87078: PPUSH
87079: LD_VAR 0 3
87083: PPUSH
87084: CALL_OW 284
87088: IFFALSE 87067
// if GetResourceTypeXY ( x , y ) = mat_artefact then
87090: LD_VAR 0 2
87094: PPUSH
87095: LD_VAR 0 3
87099: PPUSH
87100: CALL_OW 283
87104: PUSH
87105: LD_INT 4
87107: EQUAL
87108: IFFALSE 87112
// exit ;
87110: GO 87420
// for i = 1 to mc_bases do
87112: LD_ADDR_VAR 0 7
87116: PUSH
87117: DOUBLE
87118: LD_INT 1
87120: DEC
87121: ST_TO_ADDR
87122: LD_EXP 50
87126: PUSH
87127: FOR_TO
87128: IFFALSE 87418
// begin if mc_crates_area [ i ] then
87130: LD_EXP 68
87134: PUSH
87135: LD_VAR 0 7
87139: ARRAY
87140: IFFALSE 87251
// for j in mc_crates_area [ i ] do
87142: LD_ADDR_VAR 0 8
87146: PUSH
87147: LD_EXP 68
87151: PUSH
87152: LD_VAR 0 7
87156: ARRAY
87157: PUSH
87158: FOR_IN
87159: IFFALSE 87249
// if InArea ( x , y , j ) then
87161: LD_VAR 0 2
87165: PPUSH
87166: LD_VAR 0 3
87170: PPUSH
87171: LD_VAR 0 8
87175: PPUSH
87176: CALL_OW 309
87180: IFFALSE 87247
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
87182: LD_ADDR_EXP 66
87186: PUSH
87187: LD_EXP 66
87191: PPUSH
87192: LD_VAR 0 7
87196: PUSH
87197: LD_EXP 66
87201: PUSH
87202: LD_VAR 0 7
87206: ARRAY
87207: PUSH
87208: LD_INT 1
87210: PLUS
87211: PUSH
87212: EMPTY
87213: LIST
87214: LIST
87215: PPUSH
87216: LD_VAR 0 4
87220: PUSH
87221: LD_VAR 0 2
87225: PUSH
87226: LD_VAR 0 3
87230: PUSH
87231: EMPTY
87232: LIST
87233: LIST
87234: LIST
87235: PPUSH
87236: CALL 24872 0 3
87240: ST_TO_ADDR
// exit ;
87241: POP
87242: POP
87243: POP
87244: POP
87245: GO 87420
// end ;
87247: GO 87158
87249: POP
87250: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
87251: LD_ADDR_VAR 0 9
87255: PUSH
87256: LD_EXP 50
87260: PUSH
87261: LD_VAR 0 7
87265: ARRAY
87266: PPUSH
87267: LD_INT 2
87269: PUSH
87270: LD_INT 30
87272: PUSH
87273: LD_INT 0
87275: PUSH
87276: EMPTY
87277: LIST
87278: LIST
87279: PUSH
87280: LD_INT 30
87282: PUSH
87283: LD_INT 1
87285: PUSH
87286: EMPTY
87287: LIST
87288: LIST
87289: PUSH
87290: EMPTY
87291: LIST
87292: LIST
87293: LIST
87294: PPUSH
87295: CALL_OW 72
87299: ST_TO_ADDR
// if not depot then
87300: LD_VAR 0 9
87304: NOT
87305: IFFALSE 87309
// continue ;
87307: GO 87127
// for j in depot do
87309: LD_ADDR_VAR 0 8
87313: PUSH
87314: LD_VAR 0 9
87318: PUSH
87319: FOR_IN
87320: IFFALSE 87414
// if GetDistUnitXY ( j , x , y ) < 30 then
87322: LD_VAR 0 8
87326: PPUSH
87327: LD_VAR 0 2
87331: PPUSH
87332: LD_VAR 0 3
87336: PPUSH
87337: CALL_OW 297
87341: PUSH
87342: LD_INT 30
87344: LESS
87345: IFFALSE 87412
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
87347: LD_ADDR_EXP 66
87351: PUSH
87352: LD_EXP 66
87356: PPUSH
87357: LD_VAR 0 7
87361: PUSH
87362: LD_EXP 66
87366: PUSH
87367: LD_VAR 0 7
87371: ARRAY
87372: PUSH
87373: LD_INT 1
87375: PLUS
87376: PUSH
87377: EMPTY
87378: LIST
87379: LIST
87380: PPUSH
87381: LD_VAR 0 4
87385: PUSH
87386: LD_VAR 0 2
87390: PUSH
87391: LD_VAR 0 3
87395: PUSH
87396: EMPTY
87397: LIST
87398: LIST
87399: LIST
87400: PPUSH
87401: CALL 24872 0 3
87405: ST_TO_ADDR
// exit ;
87406: POP
87407: POP
87408: POP
87409: POP
87410: GO 87420
// end ;
87412: GO 87319
87414: POP
87415: POP
// end ;
87416: GO 87127
87418: POP
87419: POP
// end ;
87420: LD_VAR 0 6
87424: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
87425: LD_INT 0
87427: PPUSH
87428: PPUSH
87429: PPUSH
87430: PPUSH
// if not mc_bases or not skirmish then
87431: LD_EXP 50
87435: NOT
87436: PUSH
87437: LD_EXP 48
87441: NOT
87442: OR
87443: IFFALSE 87447
// exit ;
87445: GO 87724
// side := GetSide ( lab ) ;
87447: LD_ADDR_VAR 0 4
87451: PUSH
87452: LD_VAR 0 2
87456: PPUSH
87457: CALL_OW 255
87461: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
87462: LD_VAR 0 4
87466: PUSH
87467: LD_EXP 76
87471: IN
87472: NOT
87473: PUSH
87474: LD_EXP 77
87478: NOT
87479: OR
87480: PUSH
87481: LD_EXP 50
87485: NOT
87486: OR
87487: IFFALSE 87491
// exit ;
87489: GO 87724
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
87491: LD_ADDR_EXP 77
87495: PUSH
87496: LD_EXP 77
87500: PPUSH
87501: LD_VAR 0 4
87505: PPUSH
87506: LD_EXP 77
87510: PUSH
87511: LD_VAR 0 4
87515: ARRAY
87516: PUSH
87517: LD_VAR 0 1
87521: DIFF
87522: PPUSH
87523: CALL_OW 1
87527: ST_TO_ADDR
// for i = 1 to mc_bases do
87528: LD_ADDR_VAR 0 5
87532: PUSH
87533: DOUBLE
87534: LD_INT 1
87536: DEC
87537: ST_TO_ADDR
87538: LD_EXP 50
87542: PUSH
87543: FOR_TO
87544: IFFALSE 87722
// begin if lab in mc_bases [ i ] then
87546: LD_VAR 0 2
87550: PUSH
87551: LD_EXP 50
87555: PUSH
87556: LD_VAR 0 5
87560: ARRAY
87561: IN
87562: IFFALSE 87720
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
87564: LD_VAR 0 1
87568: PUSH
87569: LD_INT 11
87571: PUSH
87572: LD_INT 4
87574: PUSH
87575: LD_INT 3
87577: PUSH
87578: LD_INT 2
87580: PUSH
87581: EMPTY
87582: LIST
87583: LIST
87584: LIST
87585: LIST
87586: IN
87587: PUSH
87588: LD_EXP 80
87592: PUSH
87593: LD_VAR 0 5
87597: ARRAY
87598: AND
87599: IFFALSE 87720
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
87601: LD_ADDR_VAR 0 6
87605: PUSH
87606: LD_EXP 80
87610: PUSH
87611: LD_VAR 0 5
87615: ARRAY
87616: PUSH
87617: LD_INT 1
87619: ARRAY
87620: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
87621: LD_ADDR_EXP 80
87625: PUSH
87626: LD_EXP 80
87630: PPUSH
87631: LD_VAR 0 5
87635: PPUSH
87636: EMPTY
87637: PPUSH
87638: CALL_OW 1
87642: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
87643: LD_VAR 0 6
87647: PPUSH
87648: LD_INT 0
87650: PPUSH
87651: CALL_OW 109
// ComExitBuilding ( tmp ) ;
87655: LD_VAR 0 6
87659: PPUSH
87660: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
87664: LD_ADDR_EXP 79
87668: PUSH
87669: LD_EXP 79
87673: PPUSH
87674: LD_VAR 0 5
87678: PPUSH
87679: LD_EXP 79
87683: PUSH
87684: LD_VAR 0 5
87688: ARRAY
87689: PPUSH
87690: LD_INT 1
87692: PPUSH
87693: LD_VAR 0 6
87697: PPUSH
87698: CALL_OW 2
87702: PPUSH
87703: CALL_OW 1
87707: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
87708: LD_VAR 0 5
87712: PPUSH
87713: LD_INT 112
87715: PPUSH
87716: CALL 64243 0 2
// end ; end ; end ;
87720: GO 87543
87722: POP
87723: POP
// end ;
87724: LD_VAR 0 3
87728: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
87729: LD_INT 0
87731: PPUSH
87732: PPUSH
87733: PPUSH
87734: PPUSH
87735: PPUSH
87736: PPUSH
87737: PPUSH
87738: PPUSH
// if not mc_bases or not skirmish then
87739: LD_EXP 50
87743: NOT
87744: PUSH
87745: LD_EXP 48
87749: NOT
87750: OR
87751: IFFALSE 87755
// exit ;
87753: GO 89126
// for i = 1 to mc_bases do
87755: LD_ADDR_VAR 0 3
87759: PUSH
87760: DOUBLE
87761: LD_INT 1
87763: DEC
87764: ST_TO_ADDR
87765: LD_EXP 50
87769: PUSH
87770: FOR_TO
87771: IFFALSE 89124
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_defender [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
87773: LD_VAR 0 1
87777: PUSH
87778: LD_EXP 50
87782: PUSH
87783: LD_VAR 0 3
87787: ARRAY
87788: IN
87789: PUSH
87790: LD_VAR 0 1
87794: PUSH
87795: LD_EXP 57
87799: PUSH
87800: LD_VAR 0 3
87804: ARRAY
87805: IN
87806: OR
87807: PUSH
87808: LD_VAR 0 1
87812: PUSH
87813: LD_EXP 72
87817: PUSH
87818: LD_VAR 0 3
87822: ARRAY
87823: IN
87824: OR
87825: PUSH
87826: LD_VAR 0 1
87830: PUSH
87831: LD_EXP 69
87835: PUSH
87836: LD_VAR 0 3
87840: ARRAY
87841: IN
87842: OR
87843: PUSH
87844: LD_VAR 0 1
87848: PUSH
87849: LD_EXP 79
87853: PUSH
87854: LD_VAR 0 3
87858: ARRAY
87859: IN
87860: OR
87861: PUSH
87862: LD_VAR 0 1
87866: PUSH
87867: LD_EXP 80
87871: PUSH
87872: LD_VAR 0 3
87876: ARRAY
87877: IN
87878: OR
87879: IFFALSE 89122
// begin if un in mc_ape [ i ] then
87881: LD_VAR 0 1
87885: PUSH
87886: LD_EXP 79
87890: PUSH
87891: LD_VAR 0 3
87895: ARRAY
87896: IN
87897: IFFALSE 87936
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
87899: LD_ADDR_EXP 79
87903: PUSH
87904: LD_EXP 79
87908: PPUSH
87909: LD_VAR 0 3
87913: PPUSH
87914: LD_EXP 79
87918: PUSH
87919: LD_VAR 0 3
87923: ARRAY
87924: PUSH
87925: LD_VAR 0 1
87929: DIFF
87930: PPUSH
87931: CALL_OW 1
87935: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
87936: LD_VAR 0 1
87940: PUSH
87941: LD_EXP 80
87945: PUSH
87946: LD_VAR 0 3
87950: ARRAY
87951: IN
87952: IFFALSE 87976
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
87954: LD_ADDR_EXP 80
87958: PUSH
87959: LD_EXP 80
87963: PPUSH
87964: LD_VAR 0 3
87968: PPUSH
87969: EMPTY
87970: PPUSH
87971: CALL_OW 1
87975: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] or GetWeapon ( un ) in [ us_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , ar_cargo_bay , us_crane , ru_crane , ar_control_tower ] ) then
87976: LD_VAR 0 1
87980: PPUSH
87981: CALL_OW 247
87985: PUSH
87986: LD_INT 2
87988: EQUAL
87989: PUSH
87990: LD_VAR 0 1
87994: PPUSH
87995: CALL_OW 110
87999: PUSH
88000: LD_INT 20
88002: EQUAL
88003: PUSH
88004: LD_VAR 0 1
88008: PUSH
88009: LD_EXP 72
88013: PUSH
88014: LD_VAR 0 3
88018: ARRAY
88019: IN
88020: OR
88021: PUSH
88022: LD_VAR 0 1
88026: PPUSH
88027: CALL_OW 264
88031: PUSH
88032: LD_INT 12
88034: PUSH
88035: LD_INT 51
88037: PUSH
88038: LD_EXP 30
88042: PUSH
88043: LD_INT 32
88045: PUSH
88046: LD_INT 13
88048: PUSH
88049: LD_INT 52
88051: PUSH
88052: LD_INT 31
88054: PUSH
88055: EMPTY
88056: LIST
88057: LIST
88058: LIST
88059: LIST
88060: LIST
88061: LIST
88062: LIST
88063: IN
88064: OR
88065: AND
88066: IFFALSE 88374
// begin if un in mc_defender [ i ] then
88068: LD_VAR 0 1
88072: PUSH
88073: LD_EXP 72
88077: PUSH
88078: LD_VAR 0 3
88082: ARRAY
88083: IN
88084: IFFALSE 88123
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
88086: LD_ADDR_EXP 72
88090: PUSH
88091: LD_EXP 72
88095: PPUSH
88096: LD_VAR 0 3
88100: PPUSH
88101: LD_EXP 72
88105: PUSH
88106: LD_VAR 0 3
88110: ARRAY
88111: PUSH
88112: LD_VAR 0 1
88116: DIFF
88117: PPUSH
88118: CALL_OW 1
88122: ST_TO_ADDR
// fac := MC_GetBuildings ( i , b_factory ) ;
88123: LD_ADDR_VAR 0 8
88127: PUSH
88128: LD_VAR 0 3
88132: PPUSH
88133: LD_INT 3
88135: PPUSH
88136: CALL 84764 0 2
88140: ST_TO_ADDR
// if fac then
88141: LD_VAR 0 8
88145: IFFALSE 88374
// begin for j in fac do
88147: LD_ADDR_VAR 0 4
88151: PUSH
88152: LD_VAR 0 8
88156: PUSH
88157: FOR_IN
88158: IFFALSE 88372
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
88160: LD_ADDR_VAR 0 9
88164: PUSH
88165: LD_VAR 0 8
88169: PPUSH
88170: LD_VAR 0 1
88174: PPUSH
88175: CALL_OW 265
88179: PPUSH
88180: LD_VAR 0 1
88184: PPUSH
88185: CALL_OW 262
88189: PPUSH
88190: LD_VAR 0 1
88194: PPUSH
88195: CALL_OW 263
88199: PPUSH
88200: LD_VAR 0 1
88204: PPUSH
88205: CALL_OW 264
88209: PPUSH
88210: CALL 22368 0 5
88214: ST_TO_ADDR
// if components then
88215: LD_VAR 0 9
88219: IFFALSE 88370
// begin if GetWeapon ( un ) = ar_control_tower then
88221: LD_VAR 0 1
88225: PPUSH
88226: CALL_OW 264
88230: PUSH
88231: LD_INT 31
88233: EQUAL
88234: IFFALSE 88351
// begin SetTag ( IsDrivenBy ( un ) , 0 ) ;
88236: LD_VAR 0 1
88240: PPUSH
88241: CALL_OW 311
88245: PPUSH
88246: LD_INT 0
88248: PPUSH
88249: CALL_OW 109
// mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff IsDrivenBy ( un ) ) ;
88253: LD_ADDR_EXP 90
88257: PUSH
88258: LD_EXP 90
88262: PPUSH
88263: LD_VAR 0 3
88267: PPUSH
88268: LD_EXP 90
88272: PUSH
88273: LD_VAR 0 3
88277: ARRAY
88278: PUSH
88279: LD_VAR 0 1
88283: PPUSH
88284: CALL_OW 311
88288: DIFF
88289: PPUSH
88290: CALL_OW 1
88294: ST_TO_ADDR
// tmp := Insert ( mc_produce [ i ] , 1 , components ) ;
88295: LD_ADDR_VAR 0 7
88299: PUSH
88300: LD_EXP 71
88304: PUSH
88305: LD_VAR 0 3
88309: ARRAY
88310: PPUSH
88311: LD_INT 1
88313: PPUSH
88314: LD_VAR 0 9
88318: PPUSH
88319: CALL_OW 2
88323: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
88324: LD_ADDR_EXP 71
88328: PUSH
88329: LD_EXP 71
88333: PPUSH
88334: LD_VAR 0 3
88338: PPUSH
88339: LD_VAR 0 7
88343: PPUSH
88344: CALL_OW 1
88348: ST_TO_ADDR
// end else
88349: GO 88368
// MC_InsertProduceList ( i , [ components ] ) ;
88351: LD_VAR 0 3
88355: PPUSH
88356: LD_VAR 0 9
88360: PUSH
88361: EMPTY
88362: LIST
88363: PPUSH
88364: CALL 84309 0 2
// break ;
88368: GO 88372
// end ; end ;
88370: GO 88157
88372: POP
88373: POP
// end ; end ; if GetType ( un ) = unit_building then
88374: LD_VAR 0 1
88378: PPUSH
88379: CALL_OW 247
88383: PUSH
88384: LD_INT 3
88386: EQUAL
88387: IFFALSE 88790
// begin btype := GetBType ( un ) ;
88389: LD_ADDR_VAR 0 5
88393: PUSH
88394: LD_VAR 0 1
88398: PPUSH
88399: CALL_OW 266
88403: ST_TO_ADDR
// if btype in [ b_oil_mine , b_siberite_mine ] then
88404: LD_VAR 0 5
88408: PUSH
88409: LD_INT 29
88411: PUSH
88412: LD_INT 30
88414: PUSH
88415: EMPTY
88416: LIST
88417: LIST
88418: IN
88419: IFFALSE 88492
// begin if not GetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) then
88421: LD_VAR 0 1
88425: PPUSH
88426: CALL_OW 250
88430: PPUSH
88431: LD_VAR 0 1
88435: PPUSH
88436: CALL_OW 251
88440: PPUSH
88441: LD_VAR 0 1
88445: PPUSH
88446: CALL_OW 255
88450: PPUSH
88451: CALL_OW 440
88455: NOT
88456: IFFALSE 88492
// SetResourceVisibility ( GetX ( un ) , GetY ( un ) , GetSide ( un ) ) ;
88458: LD_VAR 0 1
88462: PPUSH
88463: CALL_OW 250
88467: PPUSH
88468: LD_VAR 0 1
88472: PPUSH
88473: CALL_OW 251
88477: PPUSH
88478: LD_VAR 0 1
88482: PPUSH
88483: CALL_OW 255
88487: PPUSH
88488: CALL_OW 441
// end ; if btype = b_warehouse then
88492: LD_VAR 0 5
88496: PUSH
88497: LD_INT 1
88499: EQUAL
88500: IFFALSE 88518
// begin btype := b_depot ;
88502: LD_ADDR_VAR 0 5
88506: PUSH
88507: LD_INT 0
88509: ST_TO_ADDR
// pos := 1 ;
88510: LD_ADDR_VAR 0 6
88514: PUSH
88515: LD_INT 1
88517: ST_TO_ADDR
// end ; if btype = b_factory then
88518: LD_VAR 0 5
88522: PUSH
88523: LD_INT 3
88525: EQUAL
88526: IFFALSE 88544
// begin btype := b_workshop ;
88528: LD_ADDR_VAR 0 5
88532: PUSH
88533: LD_INT 2
88535: ST_TO_ADDR
// pos := 1 ;
88536: LD_ADDR_VAR 0 6
88540: PUSH
88541: LD_INT 1
88543: ST_TO_ADDR
// end ; if btype = b_barracks then
88544: LD_VAR 0 5
88548: PUSH
88549: LD_INT 5
88551: EQUAL
88552: IFFALSE 88562
// btype := b_armoury ;
88554: LD_ADDR_VAR 0 5
88558: PUSH
88559: LD_INT 4
88561: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
88562: LD_VAR 0 5
88566: PUSH
88567: LD_INT 7
88569: PUSH
88570: LD_INT 8
88572: PUSH
88573: EMPTY
88574: LIST
88575: LIST
88576: IN
88577: IFFALSE 88587
// btype := b_lab ;
88579: LD_ADDR_VAR 0 5
88583: PUSH
88584: LD_INT 6
88586: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
88587: LD_ADDR_EXP 55
88591: PUSH
88592: LD_EXP 55
88596: PPUSH
88597: LD_VAR 0 3
88601: PUSH
88602: LD_EXP 55
88606: PUSH
88607: LD_VAR 0 3
88611: ARRAY
88612: PUSH
88613: LD_INT 1
88615: PLUS
88616: PUSH
88617: EMPTY
88618: LIST
88619: LIST
88620: PPUSH
88621: LD_VAR 0 5
88625: PUSH
88626: LD_VAR 0 1
88630: PPUSH
88631: CALL_OW 250
88635: PUSH
88636: LD_VAR 0 1
88640: PPUSH
88641: CALL_OW 251
88645: PUSH
88646: LD_VAR 0 1
88650: PPUSH
88651: CALL_OW 254
88655: PUSH
88656: EMPTY
88657: LIST
88658: LIST
88659: LIST
88660: LIST
88661: PPUSH
88662: CALL 24872 0 3
88666: ST_TO_ADDR
// if pos = 1 then
88667: LD_VAR 0 6
88671: PUSH
88672: LD_INT 1
88674: EQUAL
88675: IFFALSE 88790
// begin tmp := mc_build_list [ i ] ;
88677: LD_ADDR_VAR 0 7
88681: PUSH
88682: LD_EXP 55
88686: PUSH
88687: LD_VAR 0 3
88691: ARRAY
88692: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
88693: LD_VAR 0 7
88697: PPUSH
88698: LD_INT 2
88700: PUSH
88701: LD_INT 30
88703: PUSH
88704: LD_INT 0
88706: PUSH
88707: EMPTY
88708: LIST
88709: LIST
88710: PUSH
88711: LD_INT 30
88713: PUSH
88714: LD_INT 1
88716: PUSH
88717: EMPTY
88718: LIST
88719: LIST
88720: PUSH
88721: EMPTY
88722: LIST
88723: LIST
88724: LIST
88725: PPUSH
88726: CALL_OW 72
88730: IFFALSE 88740
// pos := 2 ;
88732: LD_ADDR_VAR 0 6
88736: PUSH
88737: LD_INT 2
88739: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
88740: LD_ADDR_VAR 0 7
88744: PUSH
88745: LD_VAR 0 7
88749: PPUSH
88750: LD_VAR 0 6
88754: PPUSH
88755: LD_VAR 0 7
88759: PPUSH
88760: CALL 25198 0 3
88764: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
88765: LD_ADDR_EXP 55
88769: PUSH
88770: LD_EXP 55
88774: PPUSH
88775: LD_VAR 0 3
88779: PPUSH
88780: LD_VAR 0 7
88784: PPUSH
88785: CALL_OW 1
88789: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
88790: LD_VAR 0 1
88794: PUSH
88795: LD_EXP 50
88799: PUSH
88800: LD_VAR 0 3
88804: ARRAY
88805: IN
88806: IFFALSE 88845
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
88808: LD_ADDR_EXP 50
88812: PUSH
88813: LD_EXP 50
88817: PPUSH
88818: LD_VAR 0 3
88822: PPUSH
88823: LD_EXP 50
88827: PUSH
88828: LD_VAR 0 3
88832: ARRAY
88833: PUSH
88834: LD_VAR 0 1
88838: DIFF
88839: PPUSH
88840: CALL_OW 1
88844: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
88845: LD_VAR 0 1
88849: PUSH
88850: LD_EXP 57
88854: PUSH
88855: LD_VAR 0 3
88859: ARRAY
88860: IN
88861: IFFALSE 88900
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
88863: LD_ADDR_EXP 57
88867: PUSH
88868: LD_EXP 57
88872: PPUSH
88873: LD_VAR 0 3
88877: PPUSH
88878: LD_EXP 57
88882: PUSH
88883: LD_VAR 0 3
88887: ARRAY
88888: PUSH
88889: LD_VAR 0 1
88893: DIFF
88894: PPUSH
88895: CALL_OW 1
88899: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
88900: LD_VAR 0 1
88904: PUSH
88905: LD_EXP 69
88909: PUSH
88910: LD_VAR 0 3
88914: ARRAY
88915: IN
88916: IFFALSE 88955
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
88918: LD_ADDR_EXP 69
88922: PUSH
88923: LD_EXP 69
88927: PPUSH
88928: LD_VAR 0 3
88932: PPUSH
88933: LD_EXP 69
88937: PUSH
88938: LD_VAR 0 3
88942: ARRAY
88943: PUSH
88944: LD_VAR 0 1
88948: DIFF
88949: PPUSH
88950: CALL_OW 1
88954: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
88955: LD_VAR 0 1
88959: PUSH
88960: LD_EXP 72
88964: PUSH
88965: LD_VAR 0 3
88969: ARRAY
88970: IN
88971: IFFALSE 89010
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
88973: LD_ADDR_EXP 72
88977: PUSH
88978: LD_EXP 72
88982: PPUSH
88983: LD_VAR 0 3
88987: PPUSH
88988: LD_EXP 72
88992: PUSH
88993: LD_VAR 0 3
88997: ARRAY
88998: PUSH
88999: LD_VAR 0 1
89003: DIFF
89004: PPUSH
89005: CALL_OW 1
89009: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
89010: LD_VAR 0 1
89014: PUSH
89015: LD_EXP 59
89019: PUSH
89020: LD_VAR 0 3
89024: ARRAY
89025: IN
89026: IFFALSE 89065
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
89028: LD_ADDR_EXP 59
89032: PUSH
89033: LD_EXP 59
89037: PPUSH
89038: LD_VAR 0 3
89042: PPUSH
89043: LD_EXP 59
89047: PUSH
89048: LD_VAR 0 3
89052: ARRAY
89053: PUSH
89054: LD_VAR 0 1
89058: DIFF
89059: PPUSH
89060: CALL_OW 1
89064: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
89065: LD_VAR 0 1
89069: PUSH
89070: LD_EXP 58
89074: PUSH
89075: LD_VAR 0 3
89079: ARRAY
89080: IN
89081: IFFALSE 89120
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
89083: LD_ADDR_EXP 58
89087: PUSH
89088: LD_EXP 58
89092: PPUSH
89093: LD_VAR 0 3
89097: PPUSH
89098: LD_EXP 58
89102: PUSH
89103: LD_VAR 0 3
89107: ARRAY
89108: PUSH
89109: LD_VAR 0 1
89113: DIFF
89114: PPUSH
89115: CALL_OW 1
89119: ST_TO_ADDR
// end ; break ;
89120: GO 89124
// end ;
89122: GO 87770
89124: POP
89125: POP
// end ;
89126: LD_VAR 0 2
89130: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
89131: LD_INT 0
89133: PPUSH
89134: PPUSH
89135: PPUSH
// if not mc_bases or not skirmish then
89136: LD_EXP 50
89140: NOT
89141: PUSH
89142: LD_EXP 48
89146: NOT
89147: OR
89148: IFFALSE 89152
// exit ;
89150: GO 89367
// for i = 1 to mc_bases do
89152: LD_ADDR_VAR 0 3
89156: PUSH
89157: DOUBLE
89158: LD_INT 1
89160: DEC
89161: ST_TO_ADDR
89162: LD_EXP 50
89166: PUSH
89167: FOR_TO
89168: IFFALSE 89365
// begin if building in mc_construct_list [ i ] then
89170: LD_VAR 0 1
89174: PUSH
89175: LD_EXP 57
89179: PUSH
89180: LD_VAR 0 3
89184: ARRAY
89185: IN
89186: IFFALSE 89363
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
89188: LD_ADDR_EXP 57
89192: PUSH
89193: LD_EXP 57
89197: PPUSH
89198: LD_VAR 0 3
89202: PPUSH
89203: LD_EXP 57
89207: PUSH
89208: LD_VAR 0 3
89212: ARRAY
89213: PUSH
89214: LD_VAR 0 1
89218: DIFF
89219: PPUSH
89220: CALL_OW 1
89224: ST_TO_ADDR
// if building in mc_lab [ i ] then
89225: LD_VAR 0 1
89229: PUSH
89230: LD_EXP 83
89234: PUSH
89235: LD_VAR 0 3
89239: ARRAY
89240: IN
89241: IFFALSE 89296
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
89243: LD_ADDR_EXP 84
89247: PUSH
89248: LD_EXP 84
89252: PPUSH
89253: LD_VAR 0 3
89257: PPUSH
89258: LD_EXP 84
89262: PUSH
89263: LD_VAR 0 3
89267: ARRAY
89268: PPUSH
89269: LD_INT 1
89271: PPUSH
89272: LD_EXP 84
89276: PUSH
89277: LD_VAR 0 3
89281: ARRAY
89282: PPUSH
89283: LD_INT 0
89285: PPUSH
89286: CALL 24290 0 4
89290: PPUSH
89291: CALL_OW 1
89295: ST_TO_ADDR
// if not building in mc_bases [ i ] then
89296: LD_VAR 0 1
89300: PUSH
89301: LD_EXP 50
89305: PUSH
89306: LD_VAR 0 3
89310: ARRAY
89311: IN
89312: NOT
89313: IFFALSE 89359
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
89315: LD_ADDR_EXP 50
89319: PUSH
89320: LD_EXP 50
89324: PPUSH
89325: LD_VAR 0 3
89329: PUSH
89330: LD_EXP 50
89334: PUSH
89335: LD_VAR 0 3
89339: ARRAY
89340: PUSH
89341: LD_INT 1
89343: PLUS
89344: PUSH
89345: EMPTY
89346: LIST
89347: LIST
89348: PPUSH
89349: LD_VAR 0 1
89353: PPUSH
89354: CALL 24872 0 3
89358: ST_TO_ADDR
// exit ;
89359: POP
89360: POP
89361: GO 89367
// end ; end ;
89363: GO 89167
89365: POP
89366: POP
// end ;
89367: LD_VAR 0 2
89371: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
89372: LD_INT 0
89374: PPUSH
89375: PPUSH
89376: PPUSH
89377: PPUSH
89378: PPUSH
89379: PPUSH
89380: PPUSH
// if not mc_bases or not skirmish then
89381: LD_EXP 50
89385: NOT
89386: PUSH
89387: LD_EXP 48
89391: NOT
89392: OR
89393: IFFALSE 89397
// exit ;
89395: GO 90058
// for i = 1 to mc_bases do
89397: LD_ADDR_VAR 0 3
89401: PUSH
89402: DOUBLE
89403: LD_INT 1
89405: DEC
89406: ST_TO_ADDR
89407: LD_EXP 50
89411: PUSH
89412: FOR_TO
89413: IFFALSE 90056
// begin if building in mc_construct_list [ i ] then
89415: LD_VAR 0 1
89419: PUSH
89420: LD_EXP 57
89424: PUSH
89425: LD_VAR 0 3
89429: ARRAY
89430: IN
89431: IFFALSE 90054
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
89433: LD_ADDR_EXP 57
89437: PUSH
89438: LD_EXP 57
89442: PPUSH
89443: LD_VAR 0 3
89447: PPUSH
89448: LD_EXP 57
89452: PUSH
89453: LD_VAR 0 3
89457: ARRAY
89458: PUSH
89459: LD_VAR 0 1
89463: DIFF
89464: PPUSH
89465: CALL_OW 1
89469: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
89470: LD_ADDR_EXP 50
89474: PUSH
89475: LD_EXP 50
89479: PPUSH
89480: LD_VAR 0 3
89484: PUSH
89485: LD_EXP 50
89489: PUSH
89490: LD_VAR 0 3
89494: ARRAY
89495: PUSH
89496: LD_INT 1
89498: PLUS
89499: PUSH
89500: EMPTY
89501: LIST
89502: LIST
89503: PPUSH
89504: LD_VAR 0 1
89508: PPUSH
89509: CALL 24872 0 3
89513: ST_TO_ADDR
// btype := GetBType ( building ) ;
89514: LD_ADDR_VAR 0 5
89518: PUSH
89519: LD_VAR 0 1
89523: PPUSH
89524: CALL_OW 266
89528: ST_TO_ADDR
// side := GetSide ( building ) ;
89529: LD_ADDR_VAR 0 8
89533: PUSH
89534: LD_VAR 0 1
89538: PPUSH
89539: CALL_OW 255
89543: ST_TO_ADDR
// if btype = b_lab then
89544: LD_VAR 0 5
89548: PUSH
89549: LD_INT 6
89551: EQUAL
89552: IFFALSE 89602
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
89554: LD_ADDR_EXP 83
89558: PUSH
89559: LD_EXP 83
89563: PPUSH
89564: LD_VAR 0 3
89568: PUSH
89569: LD_EXP 83
89573: PUSH
89574: LD_VAR 0 3
89578: ARRAY
89579: PUSH
89580: LD_INT 1
89582: PLUS
89583: PUSH
89584: EMPTY
89585: LIST
89586: LIST
89587: PPUSH
89588: LD_VAR 0 1
89592: PPUSH
89593: CALL 24872 0 3
89597: ST_TO_ADDR
// exit ;
89598: POP
89599: POP
89600: GO 90058
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
89602: LD_VAR 0 5
89606: PUSH
89607: LD_INT 0
89609: PUSH
89610: LD_INT 2
89612: PUSH
89613: LD_INT 4
89615: PUSH
89616: EMPTY
89617: LIST
89618: LIST
89619: LIST
89620: IN
89621: IFFALSE 89745
// begin if btype = b_armoury then
89623: LD_VAR 0 5
89627: PUSH
89628: LD_INT 4
89630: EQUAL
89631: IFFALSE 89641
// btype := b_barracks ;
89633: LD_ADDR_VAR 0 5
89637: PUSH
89638: LD_INT 5
89640: ST_TO_ADDR
// if btype = b_depot then
89641: LD_VAR 0 5
89645: PUSH
89646: LD_INT 0
89648: EQUAL
89649: IFFALSE 89659
// btype := b_warehouse ;
89651: LD_ADDR_VAR 0 5
89655: PUSH
89656: LD_INT 1
89658: ST_TO_ADDR
// if btype = b_workshop then
89659: LD_VAR 0 5
89663: PUSH
89664: LD_INT 2
89666: EQUAL
89667: IFFALSE 89677
// btype := b_factory ;
89669: LD_ADDR_VAR 0 5
89673: PUSH
89674: LD_INT 3
89676: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
89677: LD_VAR 0 5
89681: PPUSH
89682: LD_VAR 0 8
89686: PPUSH
89687: CALL_OW 323
89691: PUSH
89692: LD_INT 1
89694: EQUAL
89695: IFFALSE 89741
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
89697: LD_ADDR_EXP 82
89701: PUSH
89702: LD_EXP 82
89706: PPUSH
89707: LD_VAR 0 3
89711: PUSH
89712: LD_EXP 82
89716: PUSH
89717: LD_VAR 0 3
89721: ARRAY
89722: PUSH
89723: LD_INT 1
89725: PLUS
89726: PUSH
89727: EMPTY
89728: LIST
89729: LIST
89730: PPUSH
89731: LD_VAR 0 1
89735: PPUSH
89736: CALL 24872 0 3
89740: ST_TO_ADDR
// exit ;
89741: POP
89742: POP
89743: GO 90058
// end ; if btype in [ b_bunker , b_turret ] then
89745: LD_VAR 0 5
89749: PUSH
89750: LD_INT 32
89752: PUSH
89753: LD_INT 33
89755: PUSH
89756: EMPTY
89757: LIST
89758: LIST
89759: IN
89760: IFFALSE 90050
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
89762: LD_ADDR_EXP 58
89766: PUSH
89767: LD_EXP 58
89771: PPUSH
89772: LD_VAR 0 3
89776: PUSH
89777: LD_EXP 58
89781: PUSH
89782: LD_VAR 0 3
89786: ARRAY
89787: PUSH
89788: LD_INT 1
89790: PLUS
89791: PUSH
89792: EMPTY
89793: LIST
89794: LIST
89795: PPUSH
89796: LD_VAR 0 1
89800: PPUSH
89801: CALL 24872 0 3
89805: ST_TO_ADDR
// if btype = b_bunker then
89806: LD_VAR 0 5
89810: PUSH
89811: LD_INT 32
89813: EQUAL
89814: IFFALSE 90050
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
89816: LD_ADDR_EXP 59
89820: PUSH
89821: LD_EXP 59
89825: PPUSH
89826: LD_VAR 0 3
89830: PUSH
89831: LD_EXP 59
89835: PUSH
89836: LD_VAR 0 3
89840: ARRAY
89841: PUSH
89842: LD_INT 1
89844: PLUS
89845: PUSH
89846: EMPTY
89847: LIST
89848: LIST
89849: PPUSH
89850: LD_VAR 0 1
89854: PPUSH
89855: CALL 24872 0 3
89859: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
89860: LD_ADDR_VAR 0 6
89864: PUSH
89865: LD_EXP 50
89869: PUSH
89870: LD_VAR 0 3
89874: ARRAY
89875: PPUSH
89876: LD_INT 25
89878: PUSH
89879: LD_INT 1
89881: PUSH
89882: EMPTY
89883: LIST
89884: LIST
89885: PUSH
89886: LD_INT 3
89888: PUSH
89889: LD_INT 54
89891: PUSH
89892: EMPTY
89893: LIST
89894: PUSH
89895: EMPTY
89896: LIST
89897: LIST
89898: PUSH
89899: EMPTY
89900: LIST
89901: LIST
89902: PPUSH
89903: CALL_OW 72
89907: ST_TO_ADDR
// if tmp then
89908: LD_VAR 0 6
89912: IFFALSE 89918
// exit ;
89914: POP
89915: POP
89916: GO 90058
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
89918: LD_ADDR_VAR 0 6
89922: PUSH
89923: LD_EXP 50
89927: PUSH
89928: LD_VAR 0 3
89932: ARRAY
89933: PPUSH
89934: LD_INT 2
89936: PUSH
89937: LD_INT 30
89939: PUSH
89940: LD_INT 4
89942: PUSH
89943: EMPTY
89944: LIST
89945: LIST
89946: PUSH
89947: LD_INT 30
89949: PUSH
89950: LD_INT 5
89952: PUSH
89953: EMPTY
89954: LIST
89955: LIST
89956: PUSH
89957: EMPTY
89958: LIST
89959: LIST
89960: LIST
89961: PPUSH
89962: CALL_OW 72
89966: ST_TO_ADDR
// if not tmp then
89967: LD_VAR 0 6
89971: NOT
89972: IFFALSE 89978
// exit ;
89974: POP
89975: POP
89976: GO 90058
// for j in tmp do
89978: LD_ADDR_VAR 0 4
89982: PUSH
89983: LD_VAR 0 6
89987: PUSH
89988: FOR_IN
89989: IFFALSE 90048
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
89991: LD_ADDR_VAR 0 7
89995: PUSH
89996: LD_VAR 0 4
90000: PPUSH
90001: CALL_OW 313
90005: PPUSH
90006: LD_INT 25
90008: PUSH
90009: LD_INT 1
90011: PUSH
90012: EMPTY
90013: LIST
90014: LIST
90015: PPUSH
90016: CALL_OW 72
90020: ST_TO_ADDR
// if units then
90021: LD_VAR 0 7
90025: IFFALSE 90046
// begin ComExitBuilding ( units [ 1 ] ) ;
90027: LD_VAR 0 7
90031: PUSH
90032: LD_INT 1
90034: ARRAY
90035: PPUSH
90036: CALL_OW 122
// exit ;
90040: POP
90041: POP
90042: POP
90043: POP
90044: GO 90058
// end ; end ;
90046: GO 89988
90048: POP
90049: POP
// end ; end ; exit ;
90050: POP
90051: POP
90052: GO 90058
// end ; end ;
90054: GO 89412
90056: POP
90057: POP
// end ;
90058: LD_VAR 0 2
90062: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
90063: LD_INT 0
90065: PPUSH
90066: PPUSH
90067: PPUSH
90068: PPUSH
90069: PPUSH
90070: PPUSH
90071: PPUSH
// if not mc_bases or not skirmish then
90072: LD_EXP 50
90076: NOT
90077: PUSH
90078: LD_EXP 48
90082: NOT
90083: OR
90084: IFFALSE 90088
// exit ;
90086: GO 90353
// btype := GetBType ( building ) ;
90088: LD_ADDR_VAR 0 6
90092: PUSH
90093: LD_VAR 0 1
90097: PPUSH
90098: CALL_OW 266
90102: ST_TO_ADDR
// x := GetX ( building ) ;
90103: LD_ADDR_VAR 0 7
90107: PUSH
90108: LD_VAR 0 1
90112: PPUSH
90113: CALL_OW 250
90117: ST_TO_ADDR
// y := GetY ( building ) ;
90118: LD_ADDR_VAR 0 8
90122: PUSH
90123: LD_VAR 0 1
90127: PPUSH
90128: CALL_OW 251
90132: ST_TO_ADDR
// d := GetDir ( building ) ;
90133: LD_ADDR_VAR 0 9
90137: PUSH
90138: LD_VAR 0 1
90142: PPUSH
90143: CALL_OW 254
90147: ST_TO_ADDR
// for i = 1 to mc_bases do
90148: LD_ADDR_VAR 0 4
90152: PUSH
90153: DOUBLE
90154: LD_INT 1
90156: DEC
90157: ST_TO_ADDR
90158: LD_EXP 50
90162: PUSH
90163: FOR_TO
90164: IFFALSE 90351
// begin if not mc_build_list [ i ] then
90166: LD_EXP 55
90170: PUSH
90171: LD_VAR 0 4
90175: ARRAY
90176: NOT
90177: IFFALSE 90181
// continue ;
90179: GO 90163
// for j := 1 to mc_build_list [ i ] do
90181: LD_ADDR_VAR 0 5
90185: PUSH
90186: DOUBLE
90187: LD_INT 1
90189: DEC
90190: ST_TO_ADDR
90191: LD_EXP 55
90195: PUSH
90196: LD_VAR 0 4
90200: ARRAY
90201: PUSH
90202: FOR_TO
90203: IFFALSE 90347
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ j ] ) then
90205: LD_VAR 0 6
90209: PUSH
90210: LD_VAR 0 7
90214: PUSH
90215: LD_VAR 0 8
90219: PUSH
90220: LD_VAR 0 9
90224: PUSH
90225: EMPTY
90226: LIST
90227: LIST
90228: LIST
90229: LIST
90230: PPUSH
90231: LD_EXP 55
90235: PUSH
90236: LD_VAR 0 4
90240: ARRAY
90241: PUSH
90242: LD_VAR 0 5
90246: ARRAY
90247: PPUSH
90248: CALL 31054 0 2
90252: IFFALSE 90345
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , j ) ) ;
90254: LD_ADDR_EXP 55
90258: PUSH
90259: LD_EXP 55
90263: PPUSH
90264: LD_VAR 0 4
90268: PPUSH
90269: LD_EXP 55
90273: PUSH
90274: LD_VAR 0 4
90278: ARRAY
90279: PPUSH
90280: LD_VAR 0 5
90284: PPUSH
90285: CALL_OW 3
90289: PPUSH
90290: CALL_OW 1
90294: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
90295: LD_ADDR_EXP 57
90299: PUSH
90300: LD_EXP 57
90304: PPUSH
90305: LD_VAR 0 4
90309: PUSH
90310: LD_EXP 57
90314: PUSH
90315: LD_VAR 0 4
90319: ARRAY
90320: PUSH
90321: LD_INT 1
90323: PLUS
90324: PUSH
90325: EMPTY
90326: LIST
90327: LIST
90328: PPUSH
90329: LD_VAR 0 1
90333: PPUSH
90334: CALL 24872 0 3
90338: ST_TO_ADDR
// exit ;
90339: POP
90340: POP
90341: POP
90342: POP
90343: GO 90353
// end ;
90345: GO 90202
90347: POP
90348: POP
// end ;
90349: GO 90163
90351: POP
90352: POP
// end ;
90353: LD_VAR 0 3
90357: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
90358: LD_INT 0
90360: PPUSH
90361: PPUSH
90362: PPUSH
// if not mc_bases or not skirmish then
90363: LD_EXP 50
90367: NOT
90368: PUSH
90369: LD_EXP 48
90373: NOT
90374: OR
90375: IFFALSE 90379
// exit ;
90377: GO 90569
// for i = 1 to mc_bases do
90379: LD_ADDR_VAR 0 4
90383: PUSH
90384: DOUBLE
90385: LD_INT 1
90387: DEC
90388: ST_TO_ADDR
90389: LD_EXP 50
90393: PUSH
90394: FOR_TO
90395: IFFALSE 90482
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
90397: LD_VAR 0 1
90401: PUSH
90402: LD_EXP 58
90406: PUSH
90407: LD_VAR 0 4
90411: ARRAY
90412: IN
90413: PUSH
90414: LD_VAR 0 1
90418: PUSH
90419: LD_EXP 59
90423: PUSH
90424: LD_VAR 0 4
90428: ARRAY
90429: IN
90430: NOT
90431: AND
90432: IFFALSE 90480
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
90434: LD_ADDR_EXP 59
90438: PUSH
90439: LD_EXP 59
90443: PPUSH
90444: LD_VAR 0 4
90448: PUSH
90449: LD_EXP 59
90453: PUSH
90454: LD_VAR 0 4
90458: ARRAY
90459: PUSH
90460: LD_INT 1
90462: PLUS
90463: PUSH
90464: EMPTY
90465: LIST
90466: LIST
90467: PPUSH
90468: LD_VAR 0 1
90472: PPUSH
90473: CALL 24872 0 3
90477: ST_TO_ADDR
// break ;
90478: GO 90482
// end ; end ;
90480: GO 90394
90482: POP
90483: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
90484: LD_VAR 0 1
90488: PPUSH
90489: CALL_OW 257
90493: PUSH
90494: LD_EXP 76
90498: IN
90499: PUSH
90500: LD_VAR 0 1
90504: PPUSH
90505: CALL_OW 266
90509: PUSH
90510: LD_INT 5
90512: EQUAL
90513: AND
90514: PUSH
90515: LD_VAR 0 2
90519: PPUSH
90520: CALL_OW 110
90524: PUSH
90525: LD_INT 18
90527: NONEQUAL
90528: AND
90529: IFFALSE 90569
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
90531: LD_VAR 0 2
90535: PPUSH
90536: CALL_OW 257
90540: PUSH
90541: LD_INT 5
90543: PUSH
90544: LD_INT 8
90546: PUSH
90547: LD_INT 9
90549: PUSH
90550: EMPTY
90551: LIST
90552: LIST
90553: LIST
90554: IN
90555: IFFALSE 90569
// SetClass ( unit , 1 ) ;
90557: LD_VAR 0 2
90561: PPUSH
90562: LD_INT 1
90564: PPUSH
90565: CALL_OW 336
// end ;
90569: LD_VAR 0 3
90573: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
90574: LD_INT 0
90576: PPUSH
90577: PPUSH
// if not mc_bases or not skirmish then
90578: LD_EXP 50
90582: NOT
90583: PUSH
90584: LD_EXP 48
90588: NOT
90589: OR
90590: IFFALSE 90594
// exit ;
90592: GO 90710
// if GetLives ( abandoned_vehicle ) > 250 then
90594: LD_VAR 0 2
90598: PPUSH
90599: CALL_OW 256
90603: PUSH
90604: LD_INT 250
90606: GREATER
90607: IFFALSE 90611
// exit ;
90609: GO 90710
// for i = 1 to mc_bases do
90611: LD_ADDR_VAR 0 6
90615: PUSH
90616: DOUBLE
90617: LD_INT 1
90619: DEC
90620: ST_TO_ADDR
90621: LD_EXP 50
90625: PUSH
90626: FOR_TO
90627: IFFALSE 90708
// begin if driver in mc_bases [ i ] then
90629: LD_VAR 0 1
90633: PUSH
90634: LD_EXP 50
90638: PUSH
90639: LD_VAR 0 6
90643: ARRAY
90644: IN
90645: IFFALSE 90706
// begin ComMoveToNearbyEntrance ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
90647: LD_VAR 0 1
90651: PPUSH
90652: LD_EXP 50
90656: PUSH
90657: LD_VAR 0 6
90661: ARRAY
90662: PPUSH
90663: LD_INT 2
90665: PUSH
90666: LD_INT 30
90668: PUSH
90669: LD_INT 0
90671: PUSH
90672: EMPTY
90673: LIST
90674: LIST
90675: PUSH
90676: LD_INT 30
90678: PUSH
90679: LD_INT 1
90681: PUSH
90682: EMPTY
90683: LIST
90684: LIST
90685: PUSH
90686: EMPTY
90687: LIST
90688: LIST
90689: LIST
90690: PPUSH
90691: CALL_OW 72
90695: PUSH
90696: LD_INT 1
90698: ARRAY
90699: PPUSH
90700: CALL 57434 0 2
// break ;
90704: GO 90708
// end ; end ;
90706: GO 90626
90708: POP
90709: POP
// end ; end_of_file end_of_file
90710: LD_VAR 0 5
90714: RET
// every 0 0$1 do
90715: GO 90717
90717: DISABLE
// begin enable ;
90718: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
90719: LD_STRING updateTimer(
90721: PUSH
90722: LD_OWVAR 1
90726: STR
90727: PUSH
90728: LD_STRING );
90730: STR
90731: PPUSH
90732: CALL_OW 559
// end ;
90736: END
// export function SOS_MapStart ( ) ; begin
90737: LD_INT 0
90739: PPUSH
// if streamModeActive then
90740: LD_EXP 94
90744: IFFALSE 90753
// DefineStreamItems ( true ) ;
90746: LD_INT 1
90748: PPUSH
90749: CALL 92403 0 1
// UpdateFactoryWaypoints ( ) ;
90753: CALL 105987 0 0
// end ;
90757: LD_VAR 0 1
90761: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
90762: LD_INT 0
90764: PPUSH
// if p2 = 100 then
90765: LD_VAR 0 2
90769: PUSH
90770: LD_INT 100
90772: EQUAL
90773: IFFALSE 91776
// begin if not StreamModeActive then
90775: LD_EXP 94
90779: NOT
90780: IFFALSE 90790
// StreamModeActive := true ;
90782: LD_ADDR_EXP 94
90786: PUSH
90787: LD_INT 1
90789: ST_TO_ADDR
// if p3 = 0 then
90790: LD_VAR 0 3
90794: PUSH
90795: LD_INT 0
90797: EQUAL
90798: IFFALSE 90804
// InitStreamMode ;
90800: CALL 91939 0 0
// if p3 = 1 then
90804: LD_VAR 0 3
90808: PUSH
90809: LD_INT 1
90811: EQUAL
90812: IFFALSE 90822
// sRocket := true ;
90814: LD_ADDR_EXP 99
90818: PUSH
90819: LD_INT 1
90821: ST_TO_ADDR
// if p3 = 2 then
90822: LD_VAR 0 3
90826: PUSH
90827: LD_INT 2
90829: EQUAL
90830: IFFALSE 90840
// sSpeed := true ;
90832: LD_ADDR_EXP 98
90836: PUSH
90837: LD_INT 1
90839: ST_TO_ADDR
// if p3 = 3 then
90840: LD_VAR 0 3
90844: PUSH
90845: LD_INT 3
90847: EQUAL
90848: IFFALSE 90858
// sEngine := true ;
90850: LD_ADDR_EXP 100
90854: PUSH
90855: LD_INT 1
90857: ST_TO_ADDR
// if p3 = 4 then
90858: LD_VAR 0 3
90862: PUSH
90863: LD_INT 4
90865: EQUAL
90866: IFFALSE 90876
// sSpec := true ;
90868: LD_ADDR_EXP 97
90872: PUSH
90873: LD_INT 1
90875: ST_TO_ADDR
// if p3 = 5 then
90876: LD_VAR 0 3
90880: PUSH
90881: LD_INT 5
90883: EQUAL
90884: IFFALSE 90894
// sLevel := true ;
90886: LD_ADDR_EXP 101
90890: PUSH
90891: LD_INT 1
90893: ST_TO_ADDR
// if p3 = 6 then
90894: LD_VAR 0 3
90898: PUSH
90899: LD_INT 6
90901: EQUAL
90902: IFFALSE 90912
// sArmoury := true ;
90904: LD_ADDR_EXP 102
90908: PUSH
90909: LD_INT 1
90911: ST_TO_ADDR
// if p3 = 7 then
90912: LD_VAR 0 3
90916: PUSH
90917: LD_INT 7
90919: EQUAL
90920: IFFALSE 90930
// sRadar := true ;
90922: LD_ADDR_EXP 103
90926: PUSH
90927: LD_INT 1
90929: ST_TO_ADDR
// if p3 = 8 then
90930: LD_VAR 0 3
90934: PUSH
90935: LD_INT 8
90937: EQUAL
90938: IFFALSE 90948
// sBunker := true ;
90940: LD_ADDR_EXP 104
90944: PUSH
90945: LD_INT 1
90947: ST_TO_ADDR
// if p3 = 9 then
90948: LD_VAR 0 3
90952: PUSH
90953: LD_INT 9
90955: EQUAL
90956: IFFALSE 90966
// sHack := true ;
90958: LD_ADDR_EXP 105
90962: PUSH
90963: LD_INT 1
90965: ST_TO_ADDR
// if p3 = 10 then
90966: LD_VAR 0 3
90970: PUSH
90971: LD_INT 10
90973: EQUAL
90974: IFFALSE 90984
// sFire := true ;
90976: LD_ADDR_EXP 106
90980: PUSH
90981: LD_INT 1
90983: ST_TO_ADDR
// if p3 = 11 then
90984: LD_VAR 0 3
90988: PUSH
90989: LD_INT 11
90991: EQUAL
90992: IFFALSE 91002
// sRefresh := true ;
90994: LD_ADDR_EXP 107
90998: PUSH
90999: LD_INT 1
91001: ST_TO_ADDR
// if p3 = 12 then
91002: LD_VAR 0 3
91006: PUSH
91007: LD_INT 12
91009: EQUAL
91010: IFFALSE 91020
// sExp := true ;
91012: LD_ADDR_EXP 108
91016: PUSH
91017: LD_INT 1
91019: ST_TO_ADDR
// if p3 = 13 then
91020: LD_VAR 0 3
91024: PUSH
91025: LD_INT 13
91027: EQUAL
91028: IFFALSE 91038
// sDepot := true ;
91030: LD_ADDR_EXP 109
91034: PUSH
91035: LD_INT 1
91037: ST_TO_ADDR
// if p3 = 14 then
91038: LD_VAR 0 3
91042: PUSH
91043: LD_INT 14
91045: EQUAL
91046: IFFALSE 91056
// sFlag := true ;
91048: LD_ADDR_EXP 110
91052: PUSH
91053: LD_INT 1
91055: ST_TO_ADDR
// if p3 = 15 then
91056: LD_VAR 0 3
91060: PUSH
91061: LD_INT 15
91063: EQUAL
91064: IFFALSE 91074
// sKamikadze := true ;
91066: LD_ADDR_EXP 118
91070: PUSH
91071: LD_INT 1
91073: ST_TO_ADDR
// if p3 = 16 then
91074: LD_VAR 0 3
91078: PUSH
91079: LD_INT 16
91081: EQUAL
91082: IFFALSE 91092
// sTroll := true ;
91084: LD_ADDR_EXP 119
91088: PUSH
91089: LD_INT 1
91091: ST_TO_ADDR
// if p3 = 17 then
91092: LD_VAR 0 3
91096: PUSH
91097: LD_INT 17
91099: EQUAL
91100: IFFALSE 91110
// sSlow := true ;
91102: LD_ADDR_EXP 120
91106: PUSH
91107: LD_INT 1
91109: ST_TO_ADDR
// if p3 = 18 then
91110: LD_VAR 0 3
91114: PUSH
91115: LD_INT 18
91117: EQUAL
91118: IFFALSE 91128
// sLack := true ;
91120: LD_ADDR_EXP 121
91124: PUSH
91125: LD_INT 1
91127: ST_TO_ADDR
// if p3 = 19 then
91128: LD_VAR 0 3
91132: PUSH
91133: LD_INT 19
91135: EQUAL
91136: IFFALSE 91146
// sTank := true ;
91138: LD_ADDR_EXP 123
91142: PUSH
91143: LD_INT 1
91145: ST_TO_ADDR
// if p3 = 20 then
91146: LD_VAR 0 3
91150: PUSH
91151: LD_INT 20
91153: EQUAL
91154: IFFALSE 91164
// sRemote := true ;
91156: LD_ADDR_EXP 124
91160: PUSH
91161: LD_INT 1
91163: ST_TO_ADDR
// if p3 = 21 then
91164: LD_VAR 0 3
91168: PUSH
91169: LD_INT 21
91171: EQUAL
91172: IFFALSE 91182
// sPowell := true ;
91174: LD_ADDR_EXP 125
91178: PUSH
91179: LD_INT 1
91181: ST_TO_ADDR
// if p3 = 22 then
91182: LD_VAR 0 3
91186: PUSH
91187: LD_INT 22
91189: EQUAL
91190: IFFALSE 91200
// sTeleport := true ;
91192: LD_ADDR_EXP 128
91196: PUSH
91197: LD_INT 1
91199: ST_TO_ADDR
// if p3 = 23 then
91200: LD_VAR 0 3
91204: PUSH
91205: LD_INT 23
91207: EQUAL
91208: IFFALSE 91218
// sOilTower := true ;
91210: LD_ADDR_EXP 130
91214: PUSH
91215: LD_INT 1
91217: ST_TO_ADDR
// if p3 = 24 then
91218: LD_VAR 0 3
91222: PUSH
91223: LD_INT 24
91225: EQUAL
91226: IFFALSE 91236
// sShovel := true ;
91228: LD_ADDR_EXP 131
91232: PUSH
91233: LD_INT 1
91235: ST_TO_ADDR
// if p3 = 25 then
91236: LD_VAR 0 3
91240: PUSH
91241: LD_INT 25
91243: EQUAL
91244: IFFALSE 91254
// sSheik := true ;
91246: LD_ADDR_EXP 132
91250: PUSH
91251: LD_INT 1
91253: ST_TO_ADDR
// if p3 = 26 then
91254: LD_VAR 0 3
91258: PUSH
91259: LD_INT 26
91261: EQUAL
91262: IFFALSE 91272
// sEarthquake := true ;
91264: LD_ADDR_EXP 134
91268: PUSH
91269: LD_INT 1
91271: ST_TO_ADDR
// if p3 = 27 then
91272: LD_VAR 0 3
91276: PUSH
91277: LD_INT 27
91279: EQUAL
91280: IFFALSE 91290
// sAI := true ;
91282: LD_ADDR_EXP 135
91286: PUSH
91287: LD_INT 1
91289: ST_TO_ADDR
// if p3 = 28 then
91290: LD_VAR 0 3
91294: PUSH
91295: LD_INT 28
91297: EQUAL
91298: IFFALSE 91308
// sCargo := true ;
91300: LD_ADDR_EXP 138
91304: PUSH
91305: LD_INT 1
91307: ST_TO_ADDR
// if p3 = 29 then
91308: LD_VAR 0 3
91312: PUSH
91313: LD_INT 29
91315: EQUAL
91316: IFFALSE 91326
// sDLaser := true ;
91318: LD_ADDR_EXP 139
91322: PUSH
91323: LD_INT 1
91325: ST_TO_ADDR
// if p3 = 30 then
91326: LD_VAR 0 3
91330: PUSH
91331: LD_INT 30
91333: EQUAL
91334: IFFALSE 91344
// sExchange := true ;
91336: LD_ADDR_EXP 140
91340: PUSH
91341: LD_INT 1
91343: ST_TO_ADDR
// if p3 = 31 then
91344: LD_VAR 0 3
91348: PUSH
91349: LD_INT 31
91351: EQUAL
91352: IFFALSE 91362
// sFac := true ;
91354: LD_ADDR_EXP 141
91358: PUSH
91359: LD_INT 1
91361: ST_TO_ADDR
// if p3 = 32 then
91362: LD_VAR 0 3
91366: PUSH
91367: LD_INT 32
91369: EQUAL
91370: IFFALSE 91380
// sPower := true ;
91372: LD_ADDR_EXP 142
91376: PUSH
91377: LD_INT 1
91379: ST_TO_ADDR
// if p3 = 33 then
91380: LD_VAR 0 3
91384: PUSH
91385: LD_INT 33
91387: EQUAL
91388: IFFALSE 91398
// sRandom := true ;
91390: LD_ADDR_EXP 143
91394: PUSH
91395: LD_INT 1
91397: ST_TO_ADDR
// if p3 = 34 then
91398: LD_VAR 0 3
91402: PUSH
91403: LD_INT 34
91405: EQUAL
91406: IFFALSE 91416
// sShield := true ;
91408: LD_ADDR_EXP 144
91412: PUSH
91413: LD_INT 1
91415: ST_TO_ADDR
// if p3 = 35 then
91416: LD_VAR 0 3
91420: PUSH
91421: LD_INT 35
91423: EQUAL
91424: IFFALSE 91434
// sTime := true ;
91426: LD_ADDR_EXP 145
91430: PUSH
91431: LD_INT 1
91433: ST_TO_ADDR
// if p3 = 36 then
91434: LD_VAR 0 3
91438: PUSH
91439: LD_INT 36
91441: EQUAL
91442: IFFALSE 91452
// sTools := true ;
91444: LD_ADDR_EXP 146
91448: PUSH
91449: LD_INT 1
91451: ST_TO_ADDR
// if p3 = 101 then
91452: LD_VAR 0 3
91456: PUSH
91457: LD_INT 101
91459: EQUAL
91460: IFFALSE 91470
// sSold := true ;
91462: LD_ADDR_EXP 111
91466: PUSH
91467: LD_INT 1
91469: ST_TO_ADDR
// if p3 = 102 then
91470: LD_VAR 0 3
91474: PUSH
91475: LD_INT 102
91477: EQUAL
91478: IFFALSE 91488
// sDiff := true ;
91480: LD_ADDR_EXP 112
91484: PUSH
91485: LD_INT 1
91487: ST_TO_ADDR
// if p3 = 103 then
91488: LD_VAR 0 3
91492: PUSH
91493: LD_INT 103
91495: EQUAL
91496: IFFALSE 91506
// sFog := true ;
91498: LD_ADDR_EXP 115
91502: PUSH
91503: LD_INT 1
91505: ST_TO_ADDR
// if p3 = 104 then
91506: LD_VAR 0 3
91510: PUSH
91511: LD_INT 104
91513: EQUAL
91514: IFFALSE 91524
// sReset := true ;
91516: LD_ADDR_EXP 116
91520: PUSH
91521: LD_INT 1
91523: ST_TO_ADDR
// if p3 = 105 then
91524: LD_VAR 0 3
91528: PUSH
91529: LD_INT 105
91531: EQUAL
91532: IFFALSE 91542
// sSun := true ;
91534: LD_ADDR_EXP 117
91538: PUSH
91539: LD_INT 1
91541: ST_TO_ADDR
// if p3 = 106 then
91542: LD_VAR 0 3
91546: PUSH
91547: LD_INT 106
91549: EQUAL
91550: IFFALSE 91560
// sTiger := true ;
91552: LD_ADDR_EXP 113
91556: PUSH
91557: LD_INT 1
91559: ST_TO_ADDR
// if p3 = 107 then
91560: LD_VAR 0 3
91564: PUSH
91565: LD_INT 107
91567: EQUAL
91568: IFFALSE 91578
// sBomb := true ;
91570: LD_ADDR_EXP 114
91574: PUSH
91575: LD_INT 1
91577: ST_TO_ADDR
// if p3 = 108 then
91578: LD_VAR 0 3
91582: PUSH
91583: LD_INT 108
91585: EQUAL
91586: IFFALSE 91596
// sWound := true ;
91588: LD_ADDR_EXP 122
91592: PUSH
91593: LD_INT 1
91595: ST_TO_ADDR
// if p3 = 109 then
91596: LD_VAR 0 3
91600: PUSH
91601: LD_INT 109
91603: EQUAL
91604: IFFALSE 91614
// sBetray := true ;
91606: LD_ADDR_EXP 126
91610: PUSH
91611: LD_INT 1
91613: ST_TO_ADDR
// if p3 = 110 then
91614: LD_VAR 0 3
91618: PUSH
91619: LD_INT 110
91621: EQUAL
91622: IFFALSE 91632
// sContamin := true ;
91624: LD_ADDR_EXP 127
91628: PUSH
91629: LD_INT 1
91631: ST_TO_ADDR
// if p3 = 111 then
91632: LD_VAR 0 3
91636: PUSH
91637: LD_INT 111
91639: EQUAL
91640: IFFALSE 91650
// sOil := true ;
91642: LD_ADDR_EXP 129
91646: PUSH
91647: LD_INT 1
91649: ST_TO_ADDR
// if p3 = 112 then
91650: LD_VAR 0 3
91654: PUSH
91655: LD_INT 112
91657: EQUAL
91658: IFFALSE 91668
// sStu := true ;
91660: LD_ADDR_EXP 133
91664: PUSH
91665: LD_INT 1
91667: ST_TO_ADDR
// if p3 = 113 then
91668: LD_VAR 0 3
91672: PUSH
91673: LD_INT 113
91675: EQUAL
91676: IFFALSE 91686
// sBazooka := true ;
91678: LD_ADDR_EXP 136
91682: PUSH
91683: LD_INT 1
91685: ST_TO_ADDR
// if p3 = 114 then
91686: LD_VAR 0 3
91690: PUSH
91691: LD_INT 114
91693: EQUAL
91694: IFFALSE 91704
// sMortar := true ;
91696: LD_ADDR_EXP 137
91700: PUSH
91701: LD_INT 1
91703: ST_TO_ADDR
// if p3 = 115 then
91704: LD_VAR 0 3
91708: PUSH
91709: LD_INT 115
91711: EQUAL
91712: IFFALSE 91722
// sRanger := true ;
91714: LD_ADDR_EXP 147
91718: PUSH
91719: LD_INT 1
91721: ST_TO_ADDR
// if p3 = 116 then
91722: LD_VAR 0 3
91726: PUSH
91727: LD_INT 116
91729: EQUAL
91730: IFFALSE 91740
// sComputer := true ;
91732: LD_ADDR_EXP 148
91736: PUSH
91737: LD_INT 1
91739: ST_TO_ADDR
// if p3 = 117 then
91740: LD_VAR 0 3
91744: PUSH
91745: LD_INT 117
91747: EQUAL
91748: IFFALSE 91758
// s30 := true ;
91750: LD_ADDR_EXP 149
91754: PUSH
91755: LD_INT 1
91757: ST_TO_ADDR
// if p3 = 118 then
91758: LD_VAR 0 3
91762: PUSH
91763: LD_INT 118
91765: EQUAL
91766: IFFALSE 91776
// s60 := true ;
91768: LD_ADDR_EXP 150
91772: PUSH
91773: LD_INT 1
91775: ST_TO_ADDR
// end ; if p2 = 101 then
91776: LD_VAR 0 2
91780: PUSH
91781: LD_INT 101
91783: EQUAL
91784: IFFALSE 91912
// begin case p3 of 1 :
91786: LD_VAR 0 3
91790: PUSH
91791: LD_INT 1
91793: DOUBLE
91794: EQUAL
91795: IFTRUE 91799
91797: GO 91806
91799: POP
// hHackUnlimitedResources ; 2 :
91800: CALL 104010 0 0
91804: GO 91912
91806: LD_INT 2
91808: DOUBLE
91809: EQUAL
91810: IFTRUE 91814
91812: GO 91821
91814: POP
// hHackSetLevel10 ; 3 :
91815: CALL 104143 0 0
91819: GO 91912
91821: LD_INT 3
91823: DOUBLE
91824: EQUAL
91825: IFTRUE 91829
91827: GO 91836
91829: POP
// hHackSetLevel10YourUnits ; 4 :
91830: CALL 104228 0 0
91834: GO 91912
91836: LD_INT 4
91838: DOUBLE
91839: EQUAL
91840: IFTRUE 91844
91842: GO 91851
91844: POP
// hHackInvincible ; 5 :
91845: CALL 104676 0 0
91849: GO 91912
91851: LD_INT 5
91853: DOUBLE
91854: EQUAL
91855: IFTRUE 91859
91857: GO 91866
91859: POP
// hHackInvisible ; 6 :
91860: CALL 104787 0 0
91864: GO 91912
91866: LD_INT 6
91868: DOUBLE
91869: EQUAL
91870: IFTRUE 91874
91872: GO 91881
91874: POP
// hHackChangeYourSide ; 7 :
91875: CALL 104844 0 0
91879: GO 91912
91881: LD_INT 7
91883: DOUBLE
91884: EQUAL
91885: IFTRUE 91889
91887: GO 91896
91889: POP
// hHackChangeUnitSide ; 8 :
91890: CALL 104886 0 0
91894: GO 91912
91896: LD_INT 8
91898: DOUBLE
91899: EQUAL
91900: IFTRUE 91904
91902: GO 91911
91904: POP
// hHackFog ; end ;
91905: CALL 104987 0 0
91909: GO 91912
91911: POP
// end ; end ;
91912: LD_VAR 0 7
91916: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
91917: GO 91919
91919: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
91920: LD_STRING initStreamRollete();
91922: PPUSH
91923: CALL_OW 559
// InitStreamMode ;
91927: CALL 91939 0 0
// DefineStreamItems ( false ) ;
91931: LD_INT 0
91933: PPUSH
91934: CALL 92403 0 1
// end ;
91938: END
// function InitStreamMode ; begin
91939: LD_INT 0
91941: PPUSH
// streamModeActive := false ;
91942: LD_ADDR_EXP 94
91946: PUSH
91947: LD_INT 0
91949: ST_TO_ADDR
// normalCounter := 36 ;
91950: LD_ADDR_EXP 95
91954: PUSH
91955: LD_INT 36
91957: ST_TO_ADDR
// hardcoreCounter := 18 ;
91958: LD_ADDR_EXP 96
91962: PUSH
91963: LD_INT 18
91965: ST_TO_ADDR
// sRocket := false ;
91966: LD_ADDR_EXP 99
91970: PUSH
91971: LD_INT 0
91973: ST_TO_ADDR
// sSpeed := false ;
91974: LD_ADDR_EXP 98
91978: PUSH
91979: LD_INT 0
91981: ST_TO_ADDR
// sEngine := false ;
91982: LD_ADDR_EXP 100
91986: PUSH
91987: LD_INT 0
91989: ST_TO_ADDR
// sSpec := false ;
91990: LD_ADDR_EXP 97
91994: PUSH
91995: LD_INT 0
91997: ST_TO_ADDR
// sLevel := false ;
91998: LD_ADDR_EXP 101
92002: PUSH
92003: LD_INT 0
92005: ST_TO_ADDR
// sArmoury := false ;
92006: LD_ADDR_EXP 102
92010: PUSH
92011: LD_INT 0
92013: ST_TO_ADDR
// sRadar := false ;
92014: LD_ADDR_EXP 103
92018: PUSH
92019: LD_INT 0
92021: ST_TO_ADDR
// sBunker := false ;
92022: LD_ADDR_EXP 104
92026: PUSH
92027: LD_INT 0
92029: ST_TO_ADDR
// sHack := false ;
92030: LD_ADDR_EXP 105
92034: PUSH
92035: LD_INT 0
92037: ST_TO_ADDR
// sFire := false ;
92038: LD_ADDR_EXP 106
92042: PUSH
92043: LD_INT 0
92045: ST_TO_ADDR
// sRefresh := false ;
92046: LD_ADDR_EXP 107
92050: PUSH
92051: LD_INT 0
92053: ST_TO_ADDR
// sExp := false ;
92054: LD_ADDR_EXP 108
92058: PUSH
92059: LD_INT 0
92061: ST_TO_ADDR
// sDepot := false ;
92062: LD_ADDR_EXP 109
92066: PUSH
92067: LD_INT 0
92069: ST_TO_ADDR
// sFlag := false ;
92070: LD_ADDR_EXP 110
92074: PUSH
92075: LD_INT 0
92077: ST_TO_ADDR
// sKamikadze := false ;
92078: LD_ADDR_EXP 118
92082: PUSH
92083: LD_INT 0
92085: ST_TO_ADDR
// sTroll := false ;
92086: LD_ADDR_EXP 119
92090: PUSH
92091: LD_INT 0
92093: ST_TO_ADDR
// sSlow := false ;
92094: LD_ADDR_EXP 120
92098: PUSH
92099: LD_INT 0
92101: ST_TO_ADDR
// sLack := false ;
92102: LD_ADDR_EXP 121
92106: PUSH
92107: LD_INT 0
92109: ST_TO_ADDR
// sTank := false ;
92110: LD_ADDR_EXP 123
92114: PUSH
92115: LD_INT 0
92117: ST_TO_ADDR
// sRemote := false ;
92118: LD_ADDR_EXP 124
92122: PUSH
92123: LD_INT 0
92125: ST_TO_ADDR
// sPowell := false ;
92126: LD_ADDR_EXP 125
92130: PUSH
92131: LD_INT 0
92133: ST_TO_ADDR
// sTeleport := false ;
92134: LD_ADDR_EXP 128
92138: PUSH
92139: LD_INT 0
92141: ST_TO_ADDR
// sOilTower := false ;
92142: LD_ADDR_EXP 130
92146: PUSH
92147: LD_INT 0
92149: ST_TO_ADDR
// sShovel := false ;
92150: LD_ADDR_EXP 131
92154: PUSH
92155: LD_INT 0
92157: ST_TO_ADDR
// sSheik := false ;
92158: LD_ADDR_EXP 132
92162: PUSH
92163: LD_INT 0
92165: ST_TO_ADDR
// sEarthquake := false ;
92166: LD_ADDR_EXP 134
92170: PUSH
92171: LD_INT 0
92173: ST_TO_ADDR
// sAI := false ;
92174: LD_ADDR_EXP 135
92178: PUSH
92179: LD_INT 0
92181: ST_TO_ADDR
// sCargo := false ;
92182: LD_ADDR_EXP 138
92186: PUSH
92187: LD_INT 0
92189: ST_TO_ADDR
// sDLaser := false ;
92190: LD_ADDR_EXP 139
92194: PUSH
92195: LD_INT 0
92197: ST_TO_ADDR
// sExchange := false ;
92198: LD_ADDR_EXP 140
92202: PUSH
92203: LD_INT 0
92205: ST_TO_ADDR
// sFac := false ;
92206: LD_ADDR_EXP 141
92210: PUSH
92211: LD_INT 0
92213: ST_TO_ADDR
// sPower := false ;
92214: LD_ADDR_EXP 142
92218: PUSH
92219: LD_INT 0
92221: ST_TO_ADDR
// sRandom := false ;
92222: LD_ADDR_EXP 143
92226: PUSH
92227: LD_INT 0
92229: ST_TO_ADDR
// sShield := false ;
92230: LD_ADDR_EXP 144
92234: PUSH
92235: LD_INT 0
92237: ST_TO_ADDR
// sTime := false ;
92238: LD_ADDR_EXP 145
92242: PUSH
92243: LD_INT 0
92245: ST_TO_ADDR
// sTools := false ;
92246: LD_ADDR_EXP 146
92250: PUSH
92251: LD_INT 0
92253: ST_TO_ADDR
// sSold := false ;
92254: LD_ADDR_EXP 111
92258: PUSH
92259: LD_INT 0
92261: ST_TO_ADDR
// sDiff := false ;
92262: LD_ADDR_EXP 112
92266: PUSH
92267: LD_INT 0
92269: ST_TO_ADDR
// sFog := false ;
92270: LD_ADDR_EXP 115
92274: PUSH
92275: LD_INT 0
92277: ST_TO_ADDR
// sReset := false ;
92278: LD_ADDR_EXP 116
92282: PUSH
92283: LD_INT 0
92285: ST_TO_ADDR
// sSun := false ;
92286: LD_ADDR_EXP 117
92290: PUSH
92291: LD_INT 0
92293: ST_TO_ADDR
// sTiger := false ;
92294: LD_ADDR_EXP 113
92298: PUSH
92299: LD_INT 0
92301: ST_TO_ADDR
// sBomb := false ;
92302: LD_ADDR_EXP 114
92306: PUSH
92307: LD_INT 0
92309: ST_TO_ADDR
// sWound := false ;
92310: LD_ADDR_EXP 122
92314: PUSH
92315: LD_INT 0
92317: ST_TO_ADDR
// sBetray := false ;
92318: LD_ADDR_EXP 126
92322: PUSH
92323: LD_INT 0
92325: ST_TO_ADDR
// sContamin := false ;
92326: LD_ADDR_EXP 127
92330: PUSH
92331: LD_INT 0
92333: ST_TO_ADDR
// sOil := false ;
92334: LD_ADDR_EXP 129
92338: PUSH
92339: LD_INT 0
92341: ST_TO_ADDR
// sStu := false ;
92342: LD_ADDR_EXP 133
92346: PUSH
92347: LD_INT 0
92349: ST_TO_ADDR
// sBazooka := false ;
92350: LD_ADDR_EXP 136
92354: PUSH
92355: LD_INT 0
92357: ST_TO_ADDR
// sMortar := false ;
92358: LD_ADDR_EXP 137
92362: PUSH
92363: LD_INT 0
92365: ST_TO_ADDR
// sRanger := false ;
92366: LD_ADDR_EXP 147
92370: PUSH
92371: LD_INT 0
92373: ST_TO_ADDR
// sComputer := false ;
92374: LD_ADDR_EXP 148
92378: PUSH
92379: LD_INT 0
92381: ST_TO_ADDR
// s30 := false ;
92382: LD_ADDR_EXP 149
92386: PUSH
92387: LD_INT 0
92389: ST_TO_ADDR
// s60 := false ;
92390: LD_ADDR_EXP 150
92394: PUSH
92395: LD_INT 0
92397: ST_TO_ADDR
// end ;
92398: LD_VAR 0 1
92402: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
92403: LD_INT 0
92405: PPUSH
92406: PPUSH
92407: PPUSH
92408: PPUSH
92409: PPUSH
92410: PPUSH
92411: PPUSH
// result := [ ] ;
92412: LD_ADDR_VAR 0 2
92416: PUSH
92417: EMPTY
92418: ST_TO_ADDR
// if campaign_id = 1 then
92419: LD_OWVAR 69
92423: PUSH
92424: LD_INT 1
92426: EQUAL
92427: IFFALSE 95593
// begin case mission_number of 1 :
92429: LD_OWVAR 70
92433: PUSH
92434: LD_INT 1
92436: DOUBLE
92437: EQUAL
92438: IFTRUE 92442
92440: GO 92518
92442: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
92443: LD_ADDR_VAR 0 2
92447: PUSH
92448: LD_INT 2
92450: PUSH
92451: LD_INT 4
92453: PUSH
92454: LD_INT 11
92456: PUSH
92457: LD_INT 12
92459: PUSH
92460: LD_INT 15
92462: PUSH
92463: LD_INT 16
92465: PUSH
92466: LD_INT 22
92468: PUSH
92469: LD_INT 23
92471: PUSH
92472: LD_INT 26
92474: PUSH
92475: EMPTY
92476: LIST
92477: LIST
92478: LIST
92479: LIST
92480: LIST
92481: LIST
92482: LIST
92483: LIST
92484: LIST
92485: PUSH
92486: LD_INT 101
92488: PUSH
92489: LD_INT 102
92491: PUSH
92492: LD_INT 106
92494: PUSH
92495: LD_INT 116
92497: PUSH
92498: LD_INT 117
92500: PUSH
92501: LD_INT 118
92503: PUSH
92504: EMPTY
92505: LIST
92506: LIST
92507: LIST
92508: LIST
92509: LIST
92510: LIST
92511: PUSH
92512: EMPTY
92513: LIST
92514: LIST
92515: ST_TO_ADDR
92516: GO 95591
92518: LD_INT 2
92520: DOUBLE
92521: EQUAL
92522: IFTRUE 92526
92524: GO 92610
92526: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
92527: LD_ADDR_VAR 0 2
92531: PUSH
92532: LD_INT 2
92534: PUSH
92535: LD_INT 4
92537: PUSH
92538: LD_INT 11
92540: PUSH
92541: LD_INT 12
92543: PUSH
92544: LD_INT 15
92546: PUSH
92547: LD_INT 16
92549: PUSH
92550: LD_INT 22
92552: PUSH
92553: LD_INT 23
92555: PUSH
92556: LD_INT 26
92558: PUSH
92559: EMPTY
92560: LIST
92561: LIST
92562: LIST
92563: LIST
92564: LIST
92565: LIST
92566: LIST
92567: LIST
92568: LIST
92569: PUSH
92570: LD_INT 101
92572: PUSH
92573: LD_INT 102
92575: PUSH
92576: LD_INT 105
92578: PUSH
92579: LD_INT 106
92581: PUSH
92582: LD_INT 108
92584: PUSH
92585: LD_INT 116
92587: PUSH
92588: LD_INT 117
92590: PUSH
92591: LD_INT 118
92593: PUSH
92594: EMPTY
92595: LIST
92596: LIST
92597: LIST
92598: LIST
92599: LIST
92600: LIST
92601: LIST
92602: LIST
92603: PUSH
92604: EMPTY
92605: LIST
92606: LIST
92607: ST_TO_ADDR
92608: GO 95591
92610: LD_INT 3
92612: DOUBLE
92613: EQUAL
92614: IFTRUE 92618
92616: GO 92706
92618: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
92619: LD_ADDR_VAR 0 2
92623: PUSH
92624: LD_INT 2
92626: PUSH
92627: LD_INT 4
92629: PUSH
92630: LD_INT 5
92632: PUSH
92633: LD_INT 11
92635: PUSH
92636: LD_INT 12
92638: PUSH
92639: LD_INT 15
92641: PUSH
92642: LD_INT 16
92644: PUSH
92645: LD_INT 22
92647: PUSH
92648: LD_INT 26
92650: PUSH
92651: LD_INT 36
92653: PUSH
92654: EMPTY
92655: LIST
92656: LIST
92657: LIST
92658: LIST
92659: LIST
92660: LIST
92661: LIST
92662: LIST
92663: LIST
92664: LIST
92665: PUSH
92666: LD_INT 101
92668: PUSH
92669: LD_INT 102
92671: PUSH
92672: LD_INT 105
92674: PUSH
92675: LD_INT 106
92677: PUSH
92678: LD_INT 108
92680: PUSH
92681: LD_INT 116
92683: PUSH
92684: LD_INT 117
92686: PUSH
92687: LD_INT 118
92689: PUSH
92690: EMPTY
92691: LIST
92692: LIST
92693: LIST
92694: LIST
92695: LIST
92696: LIST
92697: LIST
92698: LIST
92699: PUSH
92700: EMPTY
92701: LIST
92702: LIST
92703: ST_TO_ADDR
92704: GO 95591
92706: LD_INT 4
92708: DOUBLE
92709: EQUAL
92710: IFTRUE 92714
92712: GO 92810
92714: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
92715: LD_ADDR_VAR 0 2
92719: PUSH
92720: LD_INT 2
92722: PUSH
92723: LD_INT 4
92725: PUSH
92726: LD_INT 5
92728: PUSH
92729: LD_INT 8
92731: PUSH
92732: LD_INT 11
92734: PUSH
92735: LD_INT 12
92737: PUSH
92738: LD_INT 15
92740: PUSH
92741: LD_INT 16
92743: PUSH
92744: LD_INT 22
92746: PUSH
92747: LD_INT 23
92749: PUSH
92750: LD_INT 26
92752: PUSH
92753: LD_INT 36
92755: PUSH
92756: EMPTY
92757: LIST
92758: LIST
92759: LIST
92760: LIST
92761: LIST
92762: LIST
92763: LIST
92764: LIST
92765: LIST
92766: LIST
92767: LIST
92768: LIST
92769: PUSH
92770: LD_INT 101
92772: PUSH
92773: LD_INT 102
92775: PUSH
92776: LD_INT 105
92778: PUSH
92779: LD_INT 106
92781: PUSH
92782: LD_INT 108
92784: PUSH
92785: LD_INT 116
92787: PUSH
92788: LD_INT 117
92790: PUSH
92791: LD_INT 118
92793: PUSH
92794: EMPTY
92795: LIST
92796: LIST
92797: LIST
92798: LIST
92799: LIST
92800: LIST
92801: LIST
92802: LIST
92803: PUSH
92804: EMPTY
92805: LIST
92806: LIST
92807: ST_TO_ADDR
92808: GO 95591
92810: LD_INT 5
92812: DOUBLE
92813: EQUAL
92814: IFTRUE 92818
92816: GO 92930
92818: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
92819: LD_ADDR_VAR 0 2
92823: PUSH
92824: LD_INT 2
92826: PUSH
92827: LD_INT 4
92829: PUSH
92830: LD_INT 5
92832: PUSH
92833: LD_INT 6
92835: PUSH
92836: LD_INT 8
92838: PUSH
92839: LD_INT 11
92841: PUSH
92842: LD_INT 12
92844: PUSH
92845: LD_INT 15
92847: PUSH
92848: LD_INT 16
92850: PUSH
92851: LD_INT 22
92853: PUSH
92854: LD_INT 23
92856: PUSH
92857: LD_INT 25
92859: PUSH
92860: LD_INT 26
92862: PUSH
92863: LD_INT 36
92865: PUSH
92866: EMPTY
92867: LIST
92868: LIST
92869: LIST
92870: LIST
92871: LIST
92872: LIST
92873: LIST
92874: LIST
92875: LIST
92876: LIST
92877: LIST
92878: LIST
92879: LIST
92880: LIST
92881: PUSH
92882: LD_INT 101
92884: PUSH
92885: LD_INT 102
92887: PUSH
92888: LD_INT 105
92890: PUSH
92891: LD_INT 106
92893: PUSH
92894: LD_INT 108
92896: PUSH
92897: LD_INT 109
92899: PUSH
92900: LD_INT 112
92902: PUSH
92903: LD_INT 116
92905: PUSH
92906: LD_INT 117
92908: PUSH
92909: LD_INT 118
92911: PUSH
92912: EMPTY
92913: LIST
92914: LIST
92915: LIST
92916: LIST
92917: LIST
92918: LIST
92919: LIST
92920: LIST
92921: LIST
92922: LIST
92923: PUSH
92924: EMPTY
92925: LIST
92926: LIST
92927: ST_TO_ADDR
92928: GO 95591
92930: LD_INT 6
92932: DOUBLE
92933: EQUAL
92934: IFTRUE 92938
92936: GO 93070
92938: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
92939: LD_ADDR_VAR 0 2
92943: PUSH
92944: LD_INT 2
92946: PUSH
92947: LD_INT 4
92949: PUSH
92950: LD_INT 5
92952: PUSH
92953: LD_INT 6
92955: PUSH
92956: LD_INT 8
92958: PUSH
92959: LD_INT 11
92961: PUSH
92962: LD_INT 12
92964: PUSH
92965: LD_INT 15
92967: PUSH
92968: LD_INT 16
92970: PUSH
92971: LD_INT 20
92973: PUSH
92974: LD_INT 21
92976: PUSH
92977: LD_INT 22
92979: PUSH
92980: LD_INT 23
92982: PUSH
92983: LD_INT 25
92985: PUSH
92986: LD_INT 26
92988: PUSH
92989: LD_INT 30
92991: PUSH
92992: LD_INT 31
92994: PUSH
92995: LD_INT 32
92997: PUSH
92998: LD_INT 36
93000: PUSH
93001: EMPTY
93002: LIST
93003: LIST
93004: LIST
93005: LIST
93006: LIST
93007: LIST
93008: LIST
93009: LIST
93010: LIST
93011: LIST
93012: LIST
93013: LIST
93014: LIST
93015: LIST
93016: LIST
93017: LIST
93018: LIST
93019: LIST
93020: LIST
93021: PUSH
93022: LD_INT 101
93024: PUSH
93025: LD_INT 102
93027: PUSH
93028: LD_INT 105
93030: PUSH
93031: LD_INT 106
93033: PUSH
93034: LD_INT 108
93036: PUSH
93037: LD_INT 109
93039: PUSH
93040: LD_INT 112
93042: PUSH
93043: LD_INT 116
93045: PUSH
93046: LD_INT 117
93048: PUSH
93049: LD_INT 118
93051: PUSH
93052: EMPTY
93053: LIST
93054: LIST
93055: LIST
93056: LIST
93057: LIST
93058: LIST
93059: LIST
93060: LIST
93061: LIST
93062: LIST
93063: PUSH
93064: EMPTY
93065: LIST
93066: LIST
93067: ST_TO_ADDR
93068: GO 95591
93070: LD_INT 7
93072: DOUBLE
93073: EQUAL
93074: IFTRUE 93078
93076: GO 93190
93078: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
93079: LD_ADDR_VAR 0 2
93083: PUSH
93084: LD_INT 2
93086: PUSH
93087: LD_INT 4
93089: PUSH
93090: LD_INT 5
93092: PUSH
93093: LD_INT 7
93095: PUSH
93096: LD_INT 11
93098: PUSH
93099: LD_INT 12
93101: PUSH
93102: LD_INT 15
93104: PUSH
93105: LD_INT 16
93107: PUSH
93108: LD_INT 20
93110: PUSH
93111: LD_INT 21
93113: PUSH
93114: LD_INT 22
93116: PUSH
93117: LD_INT 23
93119: PUSH
93120: LD_INT 25
93122: PUSH
93123: LD_INT 26
93125: PUSH
93126: EMPTY
93127: LIST
93128: LIST
93129: LIST
93130: LIST
93131: LIST
93132: LIST
93133: LIST
93134: LIST
93135: LIST
93136: LIST
93137: LIST
93138: LIST
93139: LIST
93140: LIST
93141: PUSH
93142: LD_INT 101
93144: PUSH
93145: LD_INT 102
93147: PUSH
93148: LD_INT 103
93150: PUSH
93151: LD_INT 105
93153: PUSH
93154: LD_INT 106
93156: PUSH
93157: LD_INT 108
93159: PUSH
93160: LD_INT 112
93162: PUSH
93163: LD_INT 116
93165: PUSH
93166: LD_INT 117
93168: PUSH
93169: LD_INT 118
93171: PUSH
93172: EMPTY
93173: LIST
93174: LIST
93175: LIST
93176: LIST
93177: LIST
93178: LIST
93179: LIST
93180: LIST
93181: LIST
93182: LIST
93183: PUSH
93184: EMPTY
93185: LIST
93186: LIST
93187: ST_TO_ADDR
93188: GO 95591
93190: LD_INT 8
93192: DOUBLE
93193: EQUAL
93194: IFTRUE 93198
93196: GO 93338
93198: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
93199: LD_ADDR_VAR 0 2
93203: PUSH
93204: LD_INT 2
93206: PUSH
93207: LD_INT 4
93209: PUSH
93210: LD_INT 5
93212: PUSH
93213: LD_INT 6
93215: PUSH
93216: LD_INT 7
93218: PUSH
93219: LD_INT 8
93221: PUSH
93222: LD_INT 11
93224: PUSH
93225: LD_INT 12
93227: PUSH
93228: LD_INT 15
93230: PUSH
93231: LD_INT 16
93233: PUSH
93234: LD_INT 20
93236: PUSH
93237: LD_INT 21
93239: PUSH
93240: LD_INT 22
93242: PUSH
93243: LD_INT 23
93245: PUSH
93246: LD_INT 25
93248: PUSH
93249: LD_INT 26
93251: PUSH
93252: LD_INT 30
93254: PUSH
93255: LD_INT 31
93257: PUSH
93258: LD_INT 32
93260: PUSH
93261: LD_INT 36
93263: PUSH
93264: EMPTY
93265: LIST
93266: LIST
93267: LIST
93268: LIST
93269: LIST
93270: LIST
93271: LIST
93272: LIST
93273: LIST
93274: LIST
93275: LIST
93276: LIST
93277: LIST
93278: LIST
93279: LIST
93280: LIST
93281: LIST
93282: LIST
93283: LIST
93284: LIST
93285: PUSH
93286: LD_INT 101
93288: PUSH
93289: LD_INT 102
93291: PUSH
93292: LD_INT 103
93294: PUSH
93295: LD_INT 105
93297: PUSH
93298: LD_INT 106
93300: PUSH
93301: LD_INT 108
93303: PUSH
93304: LD_INT 109
93306: PUSH
93307: LD_INT 112
93309: PUSH
93310: LD_INT 116
93312: PUSH
93313: LD_INT 117
93315: PUSH
93316: LD_INT 118
93318: PUSH
93319: EMPTY
93320: LIST
93321: LIST
93322: LIST
93323: LIST
93324: LIST
93325: LIST
93326: LIST
93327: LIST
93328: LIST
93329: LIST
93330: LIST
93331: PUSH
93332: EMPTY
93333: LIST
93334: LIST
93335: ST_TO_ADDR
93336: GO 95591
93338: LD_INT 9
93340: DOUBLE
93341: EQUAL
93342: IFTRUE 93346
93344: GO 93494
93346: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
93347: LD_ADDR_VAR 0 2
93351: PUSH
93352: LD_INT 2
93354: PUSH
93355: LD_INT 4
93357: PUSH
93358: LD_INT 5
93360: PUSH
93361: LD_INT 6
93363: PUSH
93364: LD_INT 7
93366: PUSH
93367: LD_INT 8
93369: PUSH
93370: LD_INT 11
93372: PUSH
93373: LD_INT 12
93375: PUSH
93376: LD_INT 15
93378: PUSH
93379: LD_INT 16
93381: PUSH
93382: LD_INT 20
93384: PUSH
93385: LD_INT 21
93387: PUSH
93388: LD_INT 22
93390: PUSH
93391: LD_INT 23
93393: PUSH
93394: LD_INT 25
93396: PUSH
93397: LD_INT 26
93399: PUSH
93400: LD_INT 28
93402: PUSH
93403: LD_INT 30
93405: PUSH
93406: LD_INT 31
93408: PUSH
93409: LD_INT 32
93411: PUSH
93412: LD_INT 36
93414: PUSH
93415: EMPTY
93416: LIST
93417: LIST
93418: LIST
93419: LIST
93420: LIST
93421: LIST
93422: LIST
93423: LIST
93424: LIST
93425: LIST
93426: LIST
93427: LIST
93428: LIST
93429: LIST
93430: LIST
93431: LIST
93432: LIST
93433: LIST
93434: LIST
93435: LIST
93436: LIST
93437: PUSH
93438: LD_INT 101
93440: PUSH
93441: LD_INT 102
93443: PUSH
93444: LD_INT 103
93446: PUSH
93447: LD_INT 105
93449: PUSH
93450: LD_INT 106
93452: PUSH
93453: LD_INT 108
93455: PUSH
93456: LD_INT 109
93458: PUSH
93459: LD_INT 112
93461: PUSH
93462: LD_INT 114
93464: PUSH
93465: LD_INT 116
93467: PUSH
93468: LD_INT 117
93470: PUSH
93471: LD_INT 118
93473: PUSH
93474: EMPTY
93475: LIST
93476: LIST
93477: LIST
93478: LIST
93479: LIST
93480: LIST
93481: LIST
93482: LIST
93483: LIST
93484: LIST
93485: LIST
93486: LIST
93487: PUSH
93488: EMPTY
93489: LIST
93490: LIST
93491: ST_TO_ADDR
93492: GO 95591
93494: LD_INT 10
93496: DOUBLE
93497: EQUAL
93498: IFTRUE 93502
93500: GO 93698
93502: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
93503: LD_ADDR_VAR 0 2
93507: PUSH
93508: LD_INT 2
93510: PUSH
93511: LD_INT 4
93513: PUSH
93514: LD_INT 5
93516: PUSH
93517: LD_INT 6
93519: PUSH
93520: LD_INT 7
93522: PUSH
93523: LD_INT 8
93525: PUSH
93526: LD_INT 9
93528: PUSH
93529: LD_INT 10
93531: PUSH
93532: LD_INT 11
93534: PUSH
93535: LD_INT 12
93537: PUSH
93538: LD_INT 13
93540: PUSH
93541: LD_INT 14
93543: PUSH
93544: LD_INT 15
93546: PUSH
93547: LD_INT 16
93549: PUSH
93550: LD_INT 17
93552: PUSH
93553: LD_INT 18
93555: PUSH
93556: LD_INT 19
93558: PUSH
93559: LD_INT 20
93561: PUSH
93562: LD_INT 21
93564: PUSH
93565: LD_INT 22
93567: PUSH
93568: LD_INT 23
93570: PUSH
93571: LD_INT 24
93573: PUSH
93574: LD_INT 25
93576: PUSH
93577: LD_INT 26
93579: PUSH
93580: LD_INT 28
93582: PUSH
93583: LD_INT 30
93585: PUSH
93586: LD_INT 31
93588: PUSH
93589: LD_INT 32
93591: PUSH
93592: LD_INT 36
93594: PUSH
93595: EMPTY
93596: LIST
93597: LIST
93598: LIST
93599: LIST
93600: LIST
93601: LIST
93602: LIST
93603: LIST
93604: LIST
93605: LIST
93606: LIST
93607: LIST
93608: LIST
93609: LIST
93610: LIST
93611: LIST
93612: LIST
93613: LIST
93614: LIST
93615: LIST
93616: LIST
93617: LIST
93618: LIST
93619: LIST
93620: LIST
93621: LIST
93622: LIST
93623: LIST
93624: LIST
93625: PUSH
93626: LD_INT 101
93628: PUSH
93629: LD_INT 102
93631: PUSH
93632: LD_INT 103
93634: PUSH
93635: LD_INT 104
93637: PUSH
93638: LD_INT 105
93640: PUSH
93641: LD_INT 106
93643: PUSH
93644: LD_INT 107
93646: PUSH
93647: LD_INT 108
93649: PUSH
93650: LD_INT 109
93652: PUSH
93653: LD_INT 110
93655: PUSH
93656: LD_INT 111
93658: PUSH
93659: LD_INT 112
93661: PUSH
93662: LD_INT 114
93664: PUSH
93665: LD_INT 116
93667: PUSH
93668: LD_INT 117
93670: PUSH
93671: LD_INT 118
93673: PUSH
93674: EMPTY
93675: LIST
93676: LIST
93677: LIST
93678: LIST
93679: LIST
93680: LIST
93681: LIST
93682: LIST
93683: LIST
93684: LIST
93685: LIST
93686: LIST
93687: LIST
93688: LIST
93689: LIST
93690: LIST
93691: PUSH
93692: EMPTY
93693: LIST
93694: LIST
93695: ST_TO_ADDR
93696: GO 95591
93698: LD_INT 11
93700: DOUBLE
93701: EQUAL
93702: IFTRUE 93706
93704: GO 93910
93706: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
93707: LD_ADDR_VAR 0 2
93711: PUSH
93712: LD_INT 2
93714: PUSH
93715: LD_INT 3
93717: PUSH
93718: LD_INT 4
93720: PUSH
93721: LD_INT 5
93723: PUSH
93724: LD_INT 6
93726: PUSH
93727: LD_INT 7
93729: PUSH
93730: LD_INT 8
93732: PUSH
93733: LD_INT 9
93735: PUSH
93736: LD_INT 10
93738: PUSH
93739: LD_INT 11
93741: PUSH
93742: LD_INT 12
93744: PUSH
93745: LD_INT 13
93747: PUSH
93748: LD_INT 14
93750: PUSH
93751: LD_INT 15
93753: PUSH
93754: LD_INT 16
93756: PUSH
93757: LD_INT 17
93759: PUSH
93760: LD_INT 18
93762: PUSH
93763: LD_INT 19
93765: PUSH
93766: LD_INT 20
93768: PUSH
93769: LD_INT 21
93771: PUSH
93772: LD_INT 22
93774: PUSH
93775: LD_INT 23
93777: PUSH
93778: LD_INT 24
93780: PUSH
93781: LD_INT 25
93783: PUSH
93784: LD_INT 26
93786: PUSH
93787: LD_INT 28
93789: PUSH
93790: LD_INT 30
93792: PUSH
93793: LD_INT 31
93795: PUSH
93796: LD_INT 32
93798: PUSH
93799: LD_INT 34
93801: PUSH
93802: LD_INT 36
93804: PUSH
93805: EMPTY
93806: LIST
93807: LIST
93808: LIST
93809: LIST
93810: LIST
93811: LIST
93812: LIST
93813: LIST
93814: LIST
93815: LIST
93816: LIST
93817: LIST
93818: LIST
93819: LIST
93820: LIST
93821: LIST
93822: LIST
93823: LIST
93824: LIST
93825: LIST
93826: LIST
93827: LIST
93828: LIST
93829: LIST
93830: LIST
93831: LIST
93832: LIST
93833: LIST
93834: LIST
93835: LIST
93836: LIST
93837: PUSH
93838: LD_INT 101
93840: PUSH
93841: LD_INT 102
93843: PUSH
93844: LD_INT 103
93846: PUSH
93847: LD_INT 104
93849: PUSH
93850: LD_INT 105
93852: PUSH
93853: LD_INT 106
93855: PUSH
93856: LD_INT 107
93858: PUSH
93859: LD_INT 108
93861: PUSH
93862: LD_INT 109
93864: PUSH
93865: LD_INT 110
93867: PUSH
93868: LD_INT 111
93870: PUSH
93871: LD_INT 112
93873: PUSH
93874: LD_INT 114
93876: PUSH
93877: LD_INT 116
93879: PUSH
93880: LD_INT 117
93882: PUSH
93883: LD_INT 118
93885: PUSH
93886: EMPTY
93887: LIST
93888: LIST
93889: LIST
93890: LIST
93891: LIST
93892: LIST
93893: LIST
93894: LIST
93895: LIST
93896: LIST
93897: LIST
93898: LIST
93899: LIST
93900: LIST
93901: LIST
93902: LIST
93903: PUSH
93904: EMPTY
93905: LIST
93906: LIST
93907: ST_TO_ADDR
93908: GO 95591
93910: LD_INT 12
93912: DOUBLE
93913: EQUAL
93914: IFTRUE 93918
93916: GO 94138
93918: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
93919: LD_ADDR_VAR 0 2
93923: PUSH
93924: LD_INT 1
93926: PUSH
93927: LD_INT 2
93929: PUSH
93930: LD_INT 3
93932: PUSH
93933: LD_INT 4
93935: PUSH
93936: LD_INT 5
93938: PUSH
93939: LD_INT 6
93941: PUSH
93942: LD_INT 7
93944: PUSH
93945: LD_INT 8
93947: PUSH
93948: LD_INT 9
93950: PUSH
93951: LD_INT 10
93953: PUSH
93954: LD_INT 11
93956: PUSH
93957: LD_INT 12
93959: PUSH
93960: LD_INT 13
93962: PUSH
93963: LD_INT 14
93965: PUSH
93966: LD_INT 15
93968: PUSH
93969: LD_INT 16
93971: PUSH
93972: LD_INT 17
93974: PUSH
93975: LD_INT 18
93977: PUSH
93978: LD_INT 19
93980: PUSH
93981: LD_INT 20
93983: PUSH
93984: LD_INT 21
93986: PUSH
93987: LD_INT 22
93989: PUSH
93990: LD_INT 23
93992: PUSH
93993: LD_INT 24
93995: PUSH
93996: LD_INT 25
93998: PUSH
93999: LD_INT 26
94001: PUSH
94002: LD_INT 27
94004: PUSH
94005: LD_INT 28
94007: PUSH
94008: LD_INT 30
94010: PUSH
94011: LD_INT 31
94013: PUSH
94014: LD_INT 32
94016: PUSH
94017: LD_INT 33
94019: PUSH
94020: LD_INT 34
94022: PUSH
94023: LD_INT 36
94025: PUSH
94026: EMPTY
94027: LIST
94028: LIST
94029: LIST
94030: LIST
94031: LIST
94032: LIST
94033: LIST
94034: LIST
94035: LIST
94036: LIST
94037: LIST
94038: LIST
94039: LIST
94040: LIST
94041: LIST
94042: LIST
94043: LIST
94044: LIST
94045: LIST
94046: LIST
94047: LIST
94048: LIST
94049: LIST
94050: LIST
94051: LIST
94052: LIST
94053: LIST
94054: LIST
94055: LIST
94056: LIST
94057: LIST
94058: LIST
94059: LIST
94060: LIST
94061: PUSH
94062: LD_INT 101
94064: PUSH
94065: LD_INT 102
94067: PUSH
94068: LD_INT 103
94070: PUSH
94071: LD_INT 104
94073: PUSH
94074: LD_INT 105
94076: PUSH
94077: LD_INT 106
94079: PUSH
94080: LD_INT 107
94082: PUSH
94083: LD_INT 108
94085: PUSH
94086: LD_INT 109
94088: PUSH
94089: LD_INT 110
94091: PUSH
94092: LD_INT 111
94094: PUSH
94095: LD_INT 112
94097: PUSH
94098: LD_INT 113
94100: PUSH
94101: LD_INT 114
94103: PUSH
94104: LD_INT 116
94106: PUSH
94107: LD_INT 117
94109: PUSH
94110: LD_INT 118
94112: PUSH
94113: EMPTY
94114: LIST
94115: LIST
94116: LIST
94117: LIST
94118: LIST
94119: LIST
94120: LIST
94121: LIST
94122: LIST
94123: LIST
94124: LIST
94125: LIST
94126: LIST
94127: LIST
94128: LIST
94129: LIST
94130: LIST
94131: PUSH
94132: EMPTY
94133: LIST
94134: LIST
94135: ST_TO_ADDR
94136: GO 95591
94138: LD_INT 13
94140: DOUBLE
94141: EQUAL
94142: IFTRUE 94146
94144: GO 94354
94146: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
94147: LD_ADDR_VAR 0 2
94151: PUSH
94152: LD_INT 1
94154: PUSH
94155: LD_INT 2
94157: PUSH
94158: LD_INT 3
94160: PUSH
94161: LD_INT 4
94163: PUSH
94164: LD_INT 5
94166: PUSH
94167: LD_INT 8
94169: PUSH
94170: LD_INT 9
94172: PUSH
94173: LD_INT 10
94175: PUSH
94176: LD_INT 11
94178: PUSH
94179: LD_INT 12
94181: PUSH
94182: LD_INT 14
94184: PUSH
94185: LD_INT 15
94187: PUSH
94188: LD_INT 16
94190: PUSH
94191: LD_INT 17
94193: PUSH
94194: LD_INT 18
94196: PUSH
94197: LD_INT 19
94199: PUSH
94200: LD_INT 20
94202: PUSH
94203: LD_INT 21
94205: PUSH
94206: LD_INT 22
94208: PUSH
94209: LD_INT 23
94211: PUSH
94212: LD_INT 24
94214: PUSH
94215: LD_INT 25
94217: PUSH
94218: LD_INT 26
94220: PUSH
94221: LD_INT 27
94223: PUSH
94224: LD_INT 28
94226: PUSH
94227: LD_INT 30
94229: PUSH
94230: LD_INT 31
94232: PUSH
94233: LD_INT 32
94235: PUSH
94236: LD_INT 33
94238: PUSH
94239: LD_INT 34
94241: PUSH
94242: LD_INT 36
94244: PUSH
94245: EMPTY
94246: LIST
94247: LIST
94248: LIST
94249: LIST
94250: LIST
94251: LIST
94252: LIST
94253: LIST
94254: LIST
94255: LIST
94256: LIST
94257: LIST
94258: LIST
94259: LIST
94260: LIST
94261: LIST
94262: LIST
94263: LIST
94264: LIST
94265: LIST
94266: LIST
94267: LIST
94268: LIST
94269: LIST
94270: LIST
94271: LIST
94272: LIST
94273: LIST
94274: LIST
94275: LIST
94276: LIST
94277: PUSH
94278: LD_INT 101
94280: PUSH
94281: LD_INT 102
94283: PUSH
94284: LD_INT 103
94286: PUSH
94287: LD_INT 104
94289: PUSH
94290: LD_INT 105
94292: PUSH
94293: LD_INT 106
94295: PUSH
94296: LD_INT 107
94298: PUSH
94299: LD_INT 108
94301: PUSH
94302: LD_INT 109
94304: PUSH
94305: LD_INT 110
94307: PUSH
94308: LD_INT 111
94310: PUSH
94311: LD_INT 112
94313: PUSH
94314: LD_INT 113
94316: PUSH
94317: LD_INT 114
94319: PUSH
94320: LD_INT 116
94322: PUSH
94323: LD_INT 117
94325: PUSH
94326: LD_INT 118
94328: PUSH
94329: EMPTY
94330: LIST
94331: LIST
94332: LIST
94333: LIST
94334: LIST
94335: LIST
94336: LIST
94337: LIST
94338: LIST
94339: LIST
94340: LIST
94341: LIST
94342: LIST
94343: LIST
94344: LIST
94345: LIST
94346: LIST
94347: PUSH
94348: EMPTY
94349: LIST
94350: LIST
94351: ST_TO_ADDR
94352: GO 95591
94354: LD_INT 14
94356: DOUBLE
94357: EQUAL
94358: IFTRUE 94362
94360: GO 94586
94362: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
94363: LD_ADDR_VAR 0 2
94367: PUSH
94368: LD_INT 1
94370: PUSH
94371: LD_INT 2
94373: PUSH
94374: LD_INT 3
94376: PUSH
94377: LD_INT 4
94379: PUSH
94380: LD_INT 5
94382: PUSH
94383: LD_INT 6
94385: PUSH
94386: LD_INT 7
94388: PUSH
94389: LD_INT 8
94391: PUSH
94392: LD_INT 9
94394: PUSH
94395: LD_INT 10
94397: PUSH
94398: LD_INT 11
94400: PUSH
94401: LD_INT 12
94403: PUSH
94404: LD_INT 13
94406: PUSH
94407: LD_INT 14
94409: PUSH
94410: LD_INT 15
94412: PUSH
94413: LD_INT 16
94415: PUSH
94416: LD_INT 17
94418: PUSH
94419: LD_INT 18
94421: PUSH
94422: LD_INT 19
94424: PUSH
94425: LD_INT 20
94427: PUSH
94428: LD_INT 21
94430: PUSH
94431: LD_INT 22
94433: PUSH
94434: LD_INT 23
94436: PUSH
94437: LD_INT 24
94439: PUSH
94440: LD_INT 25
94442: PUSH
94443: LD_INT 26
94445: PUSH
94446: LD_INT 27
94448: PUSH
94449: LD_INT 28
94451: PUSH
94452: LD_INT 29
94454: PUSH
94455: LD_INT 30
94457: PUSH
94458: LD_INT 31
94460: PUSH
94461: LD_INT 32
94463: PUSH
94464: LD_INT 33
94466: PUSH
94467: LD_INT 34
94469: PUSH
94470: LD_INT 36
94472: PUSH
94473: EMPTY
94474: LIST
94475: LIST
94476: LIST
94477: LIST
94478: LIST
94479: LIST
94480: LIST
94481: LIST
94482: LIST
94483: LIST
94484: LIST
94485: LIST
94486: LIST
94487: LIST
94488: LIST
94489: LIST
94490: LIST
94491: LIST
94492: LIST
94493: LIST
94494: LIST
94495: LIST
94496: LIST
94497: LIST
94498: LIST
94499: LIST
94500: LIST
94501: LIST
94502: LIST
94503: LIST
94504: LIST
94505: LIST
94506: LIST
94507: LIST
94508: LIST
94509: PUSH
94510: LD_INT 101
94512: PUSH
94513: LD_INT 102
94515: PUSH
94516: LD_INT 103
94518: PUSH
94519: LD_INT 104
94521: PUSH
94522: LD_INT 105
94524: PUSH
94525: LD_INT 106
94527: PUSH
94528: LD_INT 107
94530: PUSH
94531: LD_INT 108
94533: PUSH
94534: LD_INT 109
94536: PUSH
94537: LD_INT 110
94539: PUSH
94540: LD_INT 111
94542: PUSH
94543: LD_INT 112
94545: PUSH
94546: LD_INT 113
94548: PUSH
94549: LD_INT 114
94551: PUSH
94552: LD_INT 116
94554: PUSH
94555: LD_INT 117
94557: PUSH
94558: LD_INT 118
94560: PUSH
94561: EMPTY
94562: LIST
94563: LIST
94564: LIST
94565: LIST
94566: LIST
94567: LIST
94568: LIST
94569: LIST
94570: LIST
94571: LIST
94572: LIST
94573: LIST
94574: LIST
94575: LIST
94576: LIST
94577: LIST
94578: LIST
94579: PUSH
94580: EMPTY
94581: LIST
94582: LIST
94583: ST_TO_ADDR
94584: GO 95591
94586: LD_INT 15
94588: DOUBLE
94589: EQUAL
94590: IFTRUE 94594
94592: GO 94818
94594: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
94595: LD_ADDR_VAR 0 2
94599: PUSH
94600: LD_INT 1
94602: PUSH
94603: LD_INT 2
94605: PUSH
94606: LD_INT 3
94608: PUSH
94609: LD_INT 4
94611: PUSH
94612: LD_INT 5
94614: PUSH
94615: LD_INT 6
94617: PUSH
94618: LD_INT 7
94620: PUSH
94621: LD_INT 8
94623: PUSH
94624: LD_INT 9
94626: PUSH
94627: LD_INT 10
94629: PUSH
94630: LD_INT 11
94632: PUSH
94633: LD_INT 12
94635: PUSH
94636: LD_INT 13
94638: PUSH
94639: LD_INT 14
94641: PUSH
94642: LD_INT 15
94644: PUSH
94645: LD_INT 16
94647: PUSH
94648: LD_INT 17
94650: PUSH
94651: LD_INT 18
94653: PUSH
94654: LD_INT 19
94656: PUSH
94657: LD_INT 20
94659: PUSH
94660: LD_INT 21
94662: PUSH
94663: LD_INT 22
94665: PUSH
94666: LD_INT 23
94668: PUSH
94669: LD_INT 24
94671: PUSH
94672: LD_INT 25
94674: PUSH
94675: LD_INT 26
94677: PUSH
94678: LD_INT 27
94680: PUSH
94681: LD_INT 28
94683: PUSH
94684: LD_INT 29
94686: PUSH
94687: LD_INT 30
94689: PUSH
94690: LD_INT 31
94692: PUSH
94693: LD_INT 32
94695: PUSH
94696: LD_INT 33
94698: PUSH
94699: LD_INT 34
94701: PUSH
94702: LD_INT 36
94704: PUSH
94705: EMPTY
94706: LIST
94707: LIST
94708: LIST
94709: LIST
94710: LIST
94711: LIST
94712: LIST
94713: LIST
94714: LIST
94715: LIST
94716: LIST
94717: LIST
94718: LIST
94719: LIST
94720: LIST
94721: LIST
94722: LIST
94723: LIST
94724: LIST
94725: LIST
94726: LIST
94727: LIST
94728: LIST
94729: LIST
94730: LIST
94731: LIST
94732: LIST
94733: LIST
94734: LIST
94735: LIST
94736: LIST
94737: LIST
94738: LIST
94739: LIST
94740: LIST
94741: PUSH
94742: LD_INT 101
94744: PUSH
94745: LD_INT 102
94747: PUSH
94748: LD_INT 103
94750: PUSH
94751: LD_INT 104
94753: PUSH
94754: LD_INT 105
94756: PUSH
94757: LD_INT 106
94759: PUSH
94760: LD_INT 107
94762: PUSH
94763: LD_INT 108
94765: PUSH
94766: LD_INT 109
94768: PUSH
94769: LD_INT 110
94771: PUSH
94772: LD_INT 111
94774: PUSH
94775: LD_INT 112
94777: PUSH
94778: LD_INT 113
94780: PUSH
94781: LD_INT 114
94783: PUSH
94784: LD_INT 116
94786: PUSH
94787: LD_INT 117
94789: PUSH
94790: LD_INT 118
94792: PUSH
94793: EMPTY
94794: LIST
94795: LIST
94796: LIST
94797: LIST
94798: LIST
94799: LIST
94800: LIST
94801: LIST
94802: LIST
94803: LIST
94804: LIST
94805: LIST
94806: LIST
94807: LIST
94808: LIST
94809: LIST
94810: LIST
94811: PUSH
94812: EMPTY
94813: LIST
94814: LIST
94815: ST_TO_ADDR
94816: GO 95591
94818: LD_INT 16
94820: DOUBLE
94821: EQUAL
94822: IFTRUE 94826
94824: GO 94962
94826: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
94827: LD_ADDR_VAR 0 2
94831: PUSH
94832: LD_INT 2
94834: PUSH
94835: LD_INT 4
94837: PUSH
94838: LD_INT 5
94840: PUSH
94841: LD_INT 7
94843: PUSH
94844: LD_INT 11
94846: PUSH
94847: LD_INT 12
94849: PUSH
94850: LD_INT 15
94852: PUSH
94853: LD_INT 16
94855: PUSH
94856: LD_INT 20
94858: PUSH
94859: LD_INT 21
94861: PUSH
94862: LD_INT 22
94864: PUSH
94865: LD_INT 23
94867: PUSH
94868: LD_INT 25
94870: PUSH
94871: LD_INT 26
94873: PUSH
94874: LD_INT 30
94876: PUSH
94877: LD_INT 31
94879: PUSH
94880: LD_INT 32
94882: PUSH
94883: LD_INT 33
94885: PUSH
94886: LD_INT 34
94888: PUSH
94889: EMPTY
94890: LIST
94891: LIST
94892: LIST
94893: LIST
94894: LIST
94895: LIST
94896: LIST
94897: LIST
94898: LIST
94899: LIST
94900: LIST
94901: LIST
94902: LIST
94903: LIST
94904: LIST
94905: LIST
94906: LIST
94907: LIST
94908: LIST
94909: PUSH
94910: LD_INT 101
94912: PUSH
94913: LD_INT 102
94915: PUSH
94916: LD_INT 103
94918: PUSH
94919: LD_INT 106
94921: PUSH
94922: LD_INT 108
94924: PUSH
94925: LD_INT 112
94927: PUSH
94928: LD_INT 113
94930: PUSH
94931: LD_INT 114
94933: PUSH
94934: LD_INT 116
94936: PUSH
94937: LD_INT 117
94939: PUSH
94940: LD_INT 118
94942: PUSH
94943: EMPTY
94944: LIST
94945: LIST
94946: LIST
94947: LIST
94948: LIST
94949: LIST
94950: LIST
94951: LIST
94952: LIST
94953: LIST
94954: LIST
94955: PUSH
94956: EMPTY
94957: LIST
94958: LIST
94959: ST_TO_ADDR
94960: GO 95591
94962: LD_INT 17
94964: DOUBLE
94965: EQUAL
94966: IFTRUE 94970
94968: GO 95194
94970: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
94971: LD_ADDR_VAR 0 2
94975: PUSH
94976: LD_INT 1
94978: PUSH
94979: LD_INT 2
94981: PUSH
94982: LD_INT 3
94984: PUSH
94985: LD_INT 4
94987: PUSH
94988: LD_INT 5
94990: PUSH
94991: LD_INT 6
94993: PUSH
94994: LD_INT 7
94996: PUSH
94997: LD_INT 8
94999: PUSH
95000: LD_INT 9
95002: PUSH
95003: LD_INT 10
95005: PUSH
95006: LD_INT 11
95008: PUSH
95009: LD_INT 12
95011: PUSH
95012: LD_INT 13
95014: PUSH
95015: LD_INT 14
95017: PUSH
95018: LD_INT 15
95020: PUSH
95021: LD_INT 16
95023: PUSH
95024: LD_INT 17
95026: PUSH
95027: LD_INT 18
95029: PUSH
95030: LD_INT 19
95032: PUSH
95033: LD_INT 20
95035: PUSH
95036: LD_INT 21
95038: PUSH
95039: LD_INT 22
95041: PUSH
95042: LD_INT 23
95044: PUSH
95045: LD_INT 24
95047: PUSH
95048: LD_INT 25
95050: PUSH
95051: LD_INT 26
95053: PUSH
95054: LD_INT 27
95056: PUSH
95057: LD_INT 28
95059: PUSH
95060: LD_INT 29
95062: PUSH
95063: LD_INT 30
95065: PUSH
95066: LD_INT 31
95068: PUSH
95069: LD_INT 32
95071: PUSH
95072: LD_INT 33
95074: PUSH
95075: LD_INT 34
95077: PUSH
95078: LD_INT 36
95080: PUSH
95081: EMPTY
95082: LIST
95083: LIST
95084: LIST
95085: LIST
95086: LIST
95087: LIST
95088: LIST
95089: LIST
95090: LIST
95091: LIST
95092: LIST
95093: LIST
95094: LIST
95095: LIST
95096: LIST
95097: LIST
95098: LIST
95099: LIST
95100: LIST
95101: LIST
95102: LIST
95103: LIST
95104: LIST
95105: LIST
95106: LIST
95107: LIST
95108: LIST
95109: LIST
95110: LIST
95111: LIST
95112: LIST
95113: LIST
95114: LIST
95115: LIST
95116: LIST
95117: PUSH
95118: LD_INT 101
95120: PUSH
95121: LD_INT 102
95123: PUSH
95124: LD_INT 103
95126: PUSH
95127: LD_INT 104
95129: PUSH
95130: LD_INT 105
95132: PUSH
95133: LD_INT 106
95135: PUSH
95136: LD_INT 107
95138: PUSH
95139: LD_INT 108
95141: PUSH
95142: LD_INT 109
95144: PUSH
95145: LD_INT 110
95147: PUSH
95148: LD_INT 111
95150: PUSH
95151: LD_INT 112
95153: PUSH
95154: LD_INT 113
95156: PUSH
95157: LD_INT 114
95159: PUSH
95160: LD_INT 116
95162: PUSH
95163: LD_INT 117
95165: PUSH
95166: LD_INT 118
95168: PUSH
95169: EMPTY
95170: LIST
95171: LIST
95172: LIST
95173: LIST
95174: LIST
95175: LIST
95176: LIST
95177: LIST
95178: LIST
95179: LIST
95180: LIST
95181: LIST
95182: LIST
95183: LIST
95184: LIST
95185: LIST
95186: LIST
95187: PUSH
95188: EMPTY
95189: LIST
95190: LIST
95191: ST_TO_ADDR
95192: GO 95591
95194: LD_INT 18
95196: DOUBLE
95197: EQUAL
95198: IFTRUE 95202
95200: GO 95350
95202: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
95203: LD_ADDR_VAR 0 2
95207: PUSH
95208: LD_INT 2
95210: PUSH
95211: LD_INT 4
95213: PUSH
95214: LD_INT 5
95216: PUSH
95217: LD_INT 7
95219: PUSH
95220: LD_INT 11
95222: PUSH
95223: LD_INT 12
95225: PUSH
95226: LD_INT 15
95228: PUSH
95229: LD_INT 16
95231: PUSH
95232: LD_INT 20
95234: PUSH
95235: LD_INT 21
95237: PUSH
95238: LD_INT 22
95240: PUSH
95241: LD_INT 23
95243: PUSH
95244: LD_INT 25
95246: PUSH
95247: LD_INT 26
95249: PUSH
95250: LD_INT 30
95252: PUSH
95253: LD_INT 31
95255: PUSH
95256: LD_INT 32
95258: PUSH
95259: LD_INT 33
95261: PUSH
95262: LD_INT 34
95264: PUSH
95265: LD_INT 35
95267: PUSH
95268: LD_INT 36
95270: PUSH
95271: EMPTY
95272: LIST
95273: LIST
95274: LIST
95275: LIST
95276: LIST
95277: LIST
95278: LIST
95279: LIST
95280: LIST
95281: LIST
95282: LIST
95283: LIST
95284: LIST
95285: LIST
95286: LIST
95287: LIST
95288: LIST
95289: LIST
95290: LIST
95291: LIST
95292: LIST
95293: PUSH
95294: LD_INT 101
95296: PUSH
95297: LD_INT 102
95299: PUSH
95300: LD_INT 103
95302: PUSH
95303: LD_INT 106
95305: PUSH
95306: LD_INT 108
95308: PUSH
95309: LD_INT 112
95311: PUSH
95312: LD_INT 113
95314: PUSH
95315: LD_INT 114
95317: PUSH
95318: LD_INT 115
95320: PUSH
95321: LD_INT 116
95323: PUSH
95324: LD_INT 117
95326: PUSH
95327: LD_INT 118
95329: PUSH
95330: EMPTY
95331: LIST
95332: LIST
95333: LIST
95334: LIST
95335: LIST
95336: LIST
95337: LIST
95338: LIST
95339: LIST
95340: LIST
95341: LIST
95342: LIST
95343: PUSH
95344: EMPTY
95345: LIST
95346: LIST
95347: ST_TO_ADDR
95348: GO 95591
95350: LD_INT 19
95352: DOUBLE
95353: EQUAL
95354: IFTRUE 95358
95356: GO 95590
95358: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
95359: LD_ADDR_VAR 0 2
95363: PUSH
95364: LD_INT 1
95366: PUSH
95367: LD_INT 2
95369: PUSH
95370: LD_INT 3
95372: PUSH
95373: LD_INT 4
95375: PUSH
95376: LD_INT 5
95378: PUSH
95379: LD_INT 6
95381: PUSH
95382: LD_INT 7
95384: PUSH
95385: LD_INT 8
95387: PUSH
95388: LD_INT 9
95390: PUSH
95391: LD_INT 10
95393: PUSH
95394: LD_INT 11
95396: PUSH
95397: LD_INT 12
95399: PUSH
95400: LD_INT 13
95402: PUSH
95403: LD_INT 14
95405: PUSH
95406: LD_INT 15
95408: PUSH
95409: LD_INT 16
95411: PUSH
95412: LD_INT 17
95414: PUSH
95415: LD_INT 18
95417: PUSH
95418: LD_INT 19
95420: PUSH
95421: LD_INT 20
95423: PUSH
95424: LD_INT 21
95426: PUSH
95427: LD_INT 22
95429: PUSH
95430: LD_INT 23
95432: PUSH
95433: LD_INT 24
95435: PUSH
95436: LD_INT 25
95438: PUSH
95439: LD_INT 26
95441: PUSH
95442: LD_INT 27
95444: PUSH
95445: LD_INT 28
95447: PUSH
95448: LD_INT 29
95450: PUSH
95451: LD_INT 30
95453: PUSH
95454: LD_INT 31
95456: PUSH
95457: LD_INT 32
95459: PUSH
95460: LD_INT 33
95462: PUSH
95463: LD_INT 34
95465: PUSH
95466: LD_INT 35
95468: PUSH
95469: LD_INT 36
95471: PUSH
95472: EMPTY
95473: LIST
95474: LIST
95475: LIST
95476: LIST
95477: LIST
95478: LIST
95479: LIST
95480: LIST
95481: LIST
95482: LIST
95483: LIST
95484: LIST
95485: LIST
95486: LIST
95487: LIST
95488: LIST
95489: LIST
95490: LIST
95491: LIST
95492: LIST
95493: LIST
95494: LIST
95495: LIST
95496: LIST
95497: LIST
95498: LIST
95499: LIST
95500: LIST
95501: LIST
95502: LIST
95503: LIST
95504: LIST
95505: LIST
95506: LIST
95507: LIST
95508: LIST
95509: PUSH
95510: LD_INT 101
95512: PUSH
95513: LD_INT 102
95515: PUSH
95516: LD_INT 103
95518: PUSH
95519: LD_INT 104
95521: PUSH
95522: LD_INT 105
95524: PUSH
95525: LD_INT 106
95527: PUSH
95528: LD_INT 107
95530: PUSH
95531: LD_INT 108
95533: PUSH
95534: LD_INT 109
95536: PUSH
95537: LD_INT 110
95539: PUSH
95540: LD_INT 111
95542: PUSH
95543: LD_INT 112
95545: PUSH
95546: LD_INT 113
95548: PUSH
95549: LD_INT 114
95551: PUSH
95552: LD_INT 115
95554: PUSH
95555: LD_INT 116
95557: PUSH
95558: LD_INT 117
95560: PUSH
95561: LD_INT 118
95563: PUSH
95564: EMPTY
95565: LIST
95566: LIST
95567: LIST
95568: LIST
95569: LIST
95570: LIST
95571: LIST
95572: LIST
95573: LIST
95574: LIST
95575: LIST
95576: LIST
95577: LIST
95578: LIST
95579: LIST
95580: LIST
95581: LIST
95582: LIST
95583: PUSH
95584: EMPTY
95585: LIST
95586: LIST
95587: ST_TO_ADDR
95588: GO 95591
95590: POP
// end else
95591: GO 95822
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
95593: LD_ADDR_VAR 0 2
95597: PUSH
95598: LD_INT 1
95600: PUSH
95601: LD_INT 2
95603: PUSH
95604: LD_INT 3
95606: PUSH
95607: LD_INT 4
95609: PUSH
95610: LD_INT 5
95612: PUSH
95613: LD_INT 6
95615: PUSH
95616: LD_INT 7
95618: PUSH
95619: LD_INT 8
95621: PUSH
95622: LD_INT 9
95624: PUSH
95625: LD_INT 10
95627: PUSH
95628: LD_INT 11
95630: PUSH
95631: LD_INT 12
95633: PUSH
95634: LD_INT 13
95636: PUSH
95637: LD_INT 14
95639: PUSH
95640: LD_INT 15
95642: PUSH
95643: LD_INT 16
95645: PUSH
95646: LD_INT 17
95648: PUSH
95649: LD_INT 18
95651: PUSH
95652: LD_INT 19
95654: PUSH
95655: LD_INT 20
95657: PUSH
95658: LD_INT 21
95660: PUSH
95661: LD_INT 22
95663: PUSH
95664: LD_INT 23
95666: PUSH
95667: LD_INT 24
95669: PUSH
95670: LD_INT 25
95672: PUSH
95673: LD_INT 26
95675: PUSH
95676: LD_INT 27
95678: PUSH
95679: LD_INT 28
95681: PUSH
95682: LD_INT 29
95684: PUSH
95685: LD_INT 30
95687: PUSH
95688: LD_INT 31
95690: PUSH
95691: LD_INT 32
95693: PUSH
95694: LD_INT 33
95696: PUSH
95697: LD_INT 34
95699: PUSH
95700: LD_INT 35
95702: PUSH
95703: LD_INT 36
95705: PUSH
95706: EMPTY
95707: LIST
95708: LIST
95709: LIST
95710: LIST
95711: LIST
95712: LIST
95713: LIST
95714: LIST
95715: LIST
95716: LIST
95717: LIST
95718: LIST
95719: LIST
95720: LIST
95721: LIST
95722: LIST
95723: LIST
95724: LIST
95725: LIST
95726: LIST
95727: LIST
95728: LIST
95729: LIST
95730: LIST
95731: LIST
95732: LIST
95733: LIST
95734: LIST
95735: LIST
95736: LIST
95737: LIST
95738: LIST
95739: LIST
95740: LIST
95741: LIST
95742: LIST
95743: PUSH
95744: LD_INT 101
95746: PUSH
95747: LD_INT 102
95749: PUSH
95750: LD_INT 103
95752: PUSH
95753: LD_INT 104
95755: PUSH
95756: LD_INT 105
95758: PUSH
95759: LD_INT 106
95761: PUSH
95762: LD_INT 107
95764: PUSH
95765: LD_INT 108
95767: PUSH
95768: LD_INT 109
95770: PUSH
95771: LD_INT 110
95773: PUSH
95774: LD_INT 111
95776: PUSH
95777: LD_INT 112
95779: PUSH
95780: LD_INT 113
95782: PUSH
95783: LD_INT 114
95785: PUSH
95786: LD_INT 115
95788: PUSH
95789: LD_INT 116
95791: PUSH
95792: LD_INT 117
95794: PUSH
95795: LD_INT 118
95797: PUSH
95798: EMPTY
95799: LIST
95800: LIST
95801: LIST
95802: LIST
95803: LIST
95804: LIST
95805: LIST
95806: LIST
95807: LIST
95808: LIST
95809: LIST
95810: LIST
95811: LIST
95812: LIST
95813: LIST
95814: LIST
95815: LIST
95816: LIST
95817: PUSH
95818: EMPTY
95819: LIST
95820: LIST
95821: ST_TO_ADDR
// if result then
95822: LD_VAR 0 2
95826: IFFALSE 96612
// begin normal :=  ;
95828: LD_ADDR_VAR 0 5
95832: PUSH
95833: LD_STRING 
95835: ST_TO_ADDR
// hardcore :=  ;
95836: LD_ADDR_VAR 0 6
95840: PUSH
95841: LD_STRING 
95843: ST_TO_ADDR
// active :=  ;
95844: LD_ADDR_VAR 0 7
95848: PUSH
95849: LD_STRING 
95851: ST_TO_ADDR
// for i = 1 to normalCounter do
95852: LD_ADDR_VAR 0 8
95856: PUSH
95857: DOUBLE
95858: LD_INT 1
95860: DEC
95861: ST_TO_ADDR
95862: LD_EXP 95
95866: PUSH
95867: FOR_TO
95868: IFFALSE 95969
// begin tmp := 0 ;
95870: LD_ADDR_VAR 0 3
95874: PUSH
95875: LD_STRING 0
95877: ST_TO_ADDR
// if result [ 1 ] then
95878: LD_VAR 0 2
95882: PUSH
95883: LD_INT 1
95885: ARRAY
95886: IFFALSE 95951
// if result [ 1 ] [ 1 ] = i then
95888: LD_VAR 0 2
95892: PUSH
95893: LD_INT 1
95895: ARRAY
95896: PUSH
95897: LD_INT 1
95899: ARRAY
95900: PUSH
95901: LD_VAR 0 8
95905: EQUAL
95906: IFFALSE 95951
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
95908: LD_ADDR_VAR 0 2
95912: PUSH
95913: LD_VAR 0 2
95917: PPUSH
95918: LD_INT 1
95920: PPUSH
95921: LD_VAR 0 2
95925: PUSH
95926: LD_INT 1
95928: ARRAY
95929: PPUSH
95930: LD_INT 1
95932: PPUSH
95933: CALL_OW 3
95937: PPUSH
95938: CALL_OW 1
95942: ST_TO_ADDR
// tmp := 1 ;
95943: LD_ADDR_VAR 0 3
95947: PUSH
95948: LD_STRING 1
95950: ST_TO_ADDR
// end ; normal := normal & tmp ;
95951: LD_ADDR_VAR 0 5
95955: PUSH
95956: LD_VAR 0 5
95960: PUSH
95961: LD_VAR 0 3
95965: STR
95966: ST_TO_ADDR
// end ;
95967: GO 95867
95969: POP
95970: POP
// for i = 1 to hardcoreCounter do
95971: LD_ADDR_VAR 0 8
95975: PUSH
95976: DOUBLE
95977: LD_INT 1
95979: DEC
95980: ST_TO_ADDR
95981: LD_EXP 96
95985: PUSH
95986: FOR_TO
95987: IFFALSE 96092
// begin tmp := 0 ;
95989: LD_ADDR_VAR 0 3
95993: PUSH
95994: LD_STRING 0
95996: ST_TO_ADDR
// if result [ 2 ] then
95997: LD_VAR 0 2
96001: PUSH
96002: LD_INT 2
96004: ARRAY
96005: IFFALSE 96074
// if result [ 2 ] [ 1 ] = 100 + i then
96007: LD_VAR 0 2
96011: PUSH
96012: LD_INT 2
96014: ARRAY
96015: PUSH
96016: LD_INT 1
96018: ARRAY
96019: PUSH
96020: LD_INT 100
96022: PUSH
96023: LD_VAR 0 8
96027: PLUS
96028: EQUAL
96029: IFFALSE 96074
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
96031: LD_ADDR_VAR 0 2
96035: PUSH
96036: LD_VAR 0 2
96040: PPUSH
96041: LD_INT 2
96043: PPUSH
96044: LD_VAR 0 2
96048: PUSH
96049: LD_INT 2
96051: ARRAY
96052: PPUSH
96053: LD_INT 1
96055: PPUSH
96056: CALL_OW 3
96060: PPUSH
96061: CALL_OW 1
96065: ST_TO_ADDR
// tmp := 1 ;
96066: LD_ADDR_VAR 0 3
96070: PUSH
96071: LD_STRING 1
96073: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
96074: LD_ADDR_VAR 0 6
96078: PUSH
96079: LD_VAR 0 6
96083: PUSH
96084: LD_VAR 0 3
96088: STR
96089: ST_TO_ADDR
// end ;
96090: GO 95986
96092: POP
96093: POP
// if isGameLoad then
96094: LD_VAR 0 1
96098: IFFALSE 96573
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
96100: LD_ADDR_VAR 0 4
96104: PUSH
96105: LD_EXP 99
96109: PUSH
96110: LD_EXP 98
96114: PUSH
96115: LD_EXP 100
96119: PUSH
96120: LD_EXP 97
96124: PUSH
96125: LD_EXP 101
96129: PUSH
96130: LD_EXP 102
96134: PUSH
96135: LD_EXP 103
96139: PUSH
96140: LD_EXP 104
96144: PUSH
96145: LD_EXP 105
96149: PUSH
96150: LD_EXP 106
96154: PUSH
96155: LD_EXP 107
96159: PUSH
96160: LD_EXP 108
96164: PUSH
96165: LD_EXP 109
96169: PUSH
96170: LD_EXP 110
96174: PUSH
96175: LD_EXP 118
96179: PUSH
96180: LD_EXP 119
96184: PUSH
96185: LD_EXP 120
96189: PUSH
96190: LD_EXP 121
96194: PUSH
96195: LD_EXP 123
96199: PUSH
96200: LD_EXP 124
96204: PUSH
96205: LD_EXP 125
96209: PUSH
96210: LD_EXP 128
96214: PUSH
96215: LD_EXP 130
96219: PUSH
96220: LD_EXP 131
96224: PUSH
96225: LD_EXP 132
96229: PUSH
96230: LD_EXP 134
96234: PUSH
96235: LD_EXP 135
96239: PUSH
96240: LD_EXP 138
96244: PUSH
96245: LD_EXP 139
96249: PUSH
96250: LD_EXP 140
96254: PUSH
96255: LD_EXP 141
96259: PUSH
96260: LD_EXP 142
96264: PUSH
96265: LD_EXP 143
96269: PUSH
96270: LD_EXP 144
96274: PUSH
96275: LD_EXP 145
96279: PUSH
96280: LD_EXP 146
96284: PUSH
96285: LD_EXP 111
96289: PUSH
96290: LD_EXP 112
96294: PUSH
96295: LD_EXP 115
96299: PUSH
96300: LD_EXP 116
96304: PUSH
96305: LD_EXP 117
96309: PUSH
96310: LD_EXP 113
96314: PUSH
96315: LD_EXP 114
96319: PUSH
96320: LD_EXP 122
96324: PUSH
96325: LD_EXP 126
96329: PUSH
96330: LD_EXP 127
96334: PUSH
96335: LD_EXP 129
96339: PUSH
96340: LD_EXP 133
96344: PUSH
96345: LD_EXP 136
96349: PUSH
96350: LD_EXP 137
96354: PUSH
96355: LD_EXP 147
96359: PUSH
96360: LD_EXP 148
96364: PUSH
96365: LD_EXP 149
96369: PUSH
96370: LD_EXP 150
96374: PUSH
96375: EMPTY
96376: LIST
96377: LIST
96378: LIST
96379: LIST
96380: LIST
96381: LIST
96382: LIST
96383: LIST
96384: LIST
96385: LIST
96386: LIST
96387: LIST
96388: LIST
96389: LIST
96390: LIST
96391: LIST
96392: LIST
96393: LIST
96394: LIST
96395: LIST
96396: LIST
96397: LIST
96398: LIST
96399: LIST
96400: LIST
96401: LIST
96402: LIST
96403: LIST
96404: LIST
96405: LIST
96406: LIST
96407: LIST
96408: LIST
96409: LIST
96410: LIST
96411: LIST
96412: LIST
96413: LIST
96414: LIST
96415: LIST
96416: LIST
96417: LIST
96418: LIST
96419: LIST
96420: LIST
96421: LIST
96422: LIST
96423: LIST
96424: LIST
96425: LIST
96426: LIST
96427: LIST
96428: LIST
96429: LIST
96430: ST_TO_ADDR
// tmp :=  ;
96431: LD_ADDR_VAR 0 3
96435: PUSH
96436: LD_STRING 
96438: ST_TO_ADDR
// for i = 1 to normalCounter do
96439: LD_ADDR_VAR 0 8
96443: PUSH
96444: DOUBLE
96445: LD_INT 1
96447: DEC
96448: ST_TO_ADDR
96449: LD_EXP 95
96453: PUSH
96454: FOR_TO
96455: IFFALSE 96491
// begin if flags [ i ] then
96457: LD_VAR 0 4
96461: PUSH
96462: LD_VAR 0 8
96466: ARRAY
96467: IFFALSE 96489
// tmp := tmp & i & ; ;
96469: LD_ADDR_VAR 0 3
96473: PUSH
96474: LD_VAR 0 3
96478: PUSH
96479: LD_VAR 0 8
96483: STR
96484: PUSH
96485: LD_STRING ;
96487: STR
96488: ST_TO_ADDR
// end ;
96489: GO 96454
96491: POP
96492: POP
// for i = 1 to hardcoreCounter do
96493: LD_ADDR_VAR 0 8
96497: PUSH
96498: DOUBLE
96499: LD_INT 1
96501: DEC
96502: ST_TO_ADDR
96503: LD_EXP 96
96507: PUSH
96508: FOR_TO
96509: IFFALSE 96555
// begin if flags [ normalCounter + i ] then
96511: LD_VAR 0 4
96515: PUSH
96516: LD_EXP 95
96520: PUSH
96521: LD_VAR 0 8
96525: PLUS
96526: ARRAY
96527: IFFALSE 96553
// tmp := tmp & ( 100 + i ) & ; ;
96529: LD_ADDR_VAR 0 3
96533: PUSH
96534: LD_VAR 0 3
96538: PUSH
96539: LD_INT 100
96541: PUSH
96542: LD_VAR 0 8
96546: PLUS
96547: STR
96548: PUSH
96549: LD_STRING ;
96551: STR
96552: ST_TO_ADDR
// end ;
96553: GO 96508
96555: POP
96556: POP
// if tmp then
96557: LD_VAR 0 3
96561: IFFALSE 96573
// active := tmp ;
96563: LD_ADDR_VAR 0 7
96567: PUSH
96568: LD_VAR 0 3
96572: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
96573: LD_STRING getStreamItemsFromMission("
96575: PUSH
96576: LD_VAR 0 5
96580: STR
96581: PUSH
96582: LD_STRING ","
96584: STR
96585: PUSH
96586: LD_VAR 0 6
96590: STR
96591: PUSH
96592: LD_STRING ","
96594: STR
96595: PUSH
96596: LD_VAR 0 7
96600: STR
96601: PUSH
96602: LD_STRING ")
96604: STR
96605: PPUSH
96606: CALL_OW 559
// end else
96610: GO 96619
// ToLua ( getStreamItemsFromMission("","","") ) ;
96612: LD_STRING getStreamItemsFromMission("","","")
96614: PPUSH
96615: CALL_OW 559
// end ;
96619: LD_VAR 0 2
96623: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
96624: LD_EXP 94
96628: PUSH
96629: LD_EXP 99
96633: AND
96634: IFFALSE 96758
96636: GO 96638
96638: DISABLE
96639: LD_INT 0
96641: PPUSH
96642: PPUSH
// begin enable ;
96643: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
96644: LD_ADDR_VAR 0 2
96648: PUSH
96649: LD_INT 22
96651: PUSH
96652: LD_OWVAR 2
96656: PUSH
96657: EMPTY
96658: LIST
96659: LIST
96660: PUSH
96661: LD_INT 2
96663: PUSH
96664: LD_INT 34
96666: PUSH
96667: LD_INT 7
96669: PUSH
96670: EMPTY
96671: LIST
96672: LIST
96673: PUSH
96674: LD_INT 34
96676: PUSH
96677: LD_INT 45
96679: PUSH
96680: EMPTY
96681: LIST
96682: LIST
96683: PUSH
96684: LD_INT 34
96686: PUSH
96687: LD_INT 28
96689: PUSH
96690: EMPTY
96691: LIST
96692: LIST
96693: PUSH
96694: LD_INT 34
96696: PUSH
96697: LD_INT 47
96699: PUSH
96700: EMPTY
96701: LIST
96702: LIST
96703: PUSH
96704: EMPTY
96705: LIST
96706: LIST
96707: LIST
96708: LIST
96709: LIST
96710: PUSH
96711: EMPTY
96712: LIST
96713: LIST
96714: PPUSH
96715: CALL_OW 69
96719: ST_TO_ADDR
// if not tmp then
96720: LD_VAR 0 2
96724: NOT
96725: IFFALSE 96729
// exit ;
96727: GO 96758
// for i in tmp do
96729: LD_ADDR_VAR 0 1
96733: PUSH
96734: LD_VAR 0 2
96738: PUSH
96739: FOR_IN
96740: IFFALSE 96756
// begin SetLives ( i , 0 ) ;
96742: LD_VAR 0 1
96746: PPUSH
96747: LD_INT 0
96749: PPUSH
96750: CALL_OW 234
// end ;
96754: GO 96739
96756: POP
96757: POP
// end ;
96758: PPOPN 2
96760: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
96761: LD_EXP 94
96765: PUSH
96766: LD_EXP 100
96770: AND
96771: IFFALSE 96855
96773: GO 96775
96775: DISABLE
96776: LD_INT 0
96778: PPUSH
96779: PPUSH
// begin enable ;
96780: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
96781: LD_ADDR_VAR 0 2
96785: PUSH
96786: LD_INT 22
96788: PUSH
96789: LD_OWVAR 2
96793: PUSH
96794: EMPTY
96795: LIST
96796: LIST
96797: PUSH
96798: LD_INT 32
96800: PUSH
96801: LD_INT 3
96803: PUSH
96804: EMPTY
96805: LIST
96806: LIST
96807: PUSH
96808: EMPTY
96809: LIST
96810: LIST
96811: PPUSH
96812: CALL_OW 69
96816: ST_TO_ADDR
// if not tmp then
96817: LD_VAR 0 2
96821: NOT
96822: IFFALSE 96826
// exit ;
96824: GO 96855
// for i in tmp do
96826: LD_ADDR_VAR 0 1
96830: PUSH
96831: LD_VAR 0 2
96835: PUSH
96836: FOR_IN
96837: IFFALSE 96853
// begin SetLives ( i , 0 ) ;
96839: LD_VAR 0 1
96843: PPUSH
96844: LD_INT 0
96846: PPUSH
96847: CALL_OW 234
// end ;
96851: GO 96836
96853: POP
96854: POP
// end ;
96855: PPOPN 2
96857: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
96858: LD_EXP 94
96862: PUSH
96863: LD_EXP 97
96867: AND
96868: IFFALSE 96961
96870: GO 96872
96872: DISABLE
96873: LD_INT 0
96875: PPUSH
// begin enable ;
96876: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
96877: LD_ADDR_VAR 0 1
96881: PUSH
96882: LD_INT 22
96884: PUSH
96885: LD_OWVAR 2
96889: PUSH
96890: EMPTY
96891: LIST
96892: LIST
96893: PUSH
96894: LD_INT 2
96896: PUSH
96897: LD_INT 25
96899: PUSH
96900: LD_INT 5
96902: PUSH
96903: EMPTY
96904: LIST
96905: LIST
96906: PUSH
96907: LD_INT 25
96909: PUSH
96910: LD_INT 9
96912: PUSH
96913: EMPTY
96914: LIST
96915: LIST
96916: PUSH
96917: LD_INT 25
96919: PUSH
96920: LD_INT 8
96922: PUSH
96923: EMPTY
96924: LIST
96925: LIST
96926: PUSH
96927: EMPTY
96928: LIST
96929: LIST
96930: LIST
96931: LIST
96932: PUSH
96933: EMPTY
96934: LIST
96935: LIST
96936: PPUSH
96937: CALL_OW 69
96941: PUSH
96942: FOR_IN
96943: IFFALSE 96959
// begin SetClass ( i , 1 ) ;
96945: LD_VAR 0 1
96949: PPUSH
96950: LD_INT 1
96952: PPUSH
96953: CALL_OW 336
// end ;
96957: GO 96942
96959: POP
96960: POP
// end ;
96961: PPOPN 1
96963: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
96964: LD_EXP 94
96968: PUSH
96969: LD_EXP 98
96973: AND
96974: PUSH
96975: LD_OWVAR 65
96979: PUSH
96980: LD_INT 7
96982: LESS
96983: AND
96984: IFFALSE 96998
96986: GO 96988
96988: DISABLE
// begin enable ;
96989: ENABLE
// game_speed := 7 ;
96990: LD_ADDR_OWVAR 65
96994: PUSH
96995: LD_INT 7
96997: ST_TO_ADDR
// end ;
96998: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
96999: LD_EXP 94
97003: PUSH
97004: LD_EXP 101
97008: AND
97009: IFFALSE 97211
97011: GO 97013
97013: DISABLE
97014: LD_INT 0
97016: PPUSH
97017: PPUSH
97018: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
97019: LD_ADDR_VAR 0 3
97023: PUSH
97024: LD_INT 81
97026: PUSH
97027: LD_OWVAR 2
97031: PUSH
97032: EMPTY
97033: LIST
97034: LIST
97035: PUSH
97036: LD_INT 21
97038: PUSH
97039: LD_INT 1
97041: PUSH
97042: EMPTY
97043: LIST
97044: LIST
97045: PUSH
97046: EMPTY
97047: LIST
97048: LIST
97049: PPUSH
97050: CALL_OW 69
97054: ST_TO_ADDR
// if not tmp then
97055: LD_VAR 0 3
97059: NOT
97060: IFFALSE 97064
// exit ;
97062: GO 97211
// if tmp > 5 then
97064: LD_VAR 0 3
97068: PUSH
97069: LD_INT 5
97071: GREATER
97072: IFFALSE 97084
// k := 5 else
97074: LD_ADDR_VAR 0 2
97078: PUSH
97079: LD_INT 5
97081: ST_TO_ADDR
97082: GO 97094
// k := tmp ;
97084: LD_ADDR_VAR 0 2
97088: PUSH
97089: LD_VAR 0 3
97093: ST_TO_ADDR
// for i := 1 to k do
97094: LD_ADDR_VAR 0 1
97098: PUSH
97099: DOUBLE
97100: LD_INT 1
97102: DEC
97103: ST_TO_ADDR
97104: LD_VAR 0 2
97108: PUSH
97109: FOR_TO
97110: IFFALSE 97209
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
97112: LD_VAR 0 3
97116: PUSH
97117: LD_VAR 0 1
97121: ARRAY
97122: PPUSH
97123: LD_VAR 0 1
97127: PUSH
97128: LD_INT 4
97130: MOD
97131: PUSH
97132: LD_INT 1
97134: PLUS
97135: PPUSH
97136: CALL_OW 259
97140: PUSH
97141: LD_INT 10
97143: LESS
97144: IFFALSE 97207
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
97146: LD_VAR 0 3
97150: PUSH
97151: LD_VAR 0 1
97155: ARRAY
97156: PPUSH
97157: LD_VAR 0 1
97161: PUSH
97162: LD_INT 4
97164: MOD
97165: PUSH
97166: LD_INT 1
97168: PLUS
97169: PPUSH
97170: LD_VAR 0 3
97174: PUSH
97175: LD_VAR 0 1
97179: ARRAY
97180: PPUSH
97181: LD_VAR 0 1
97185: PUSH
97186: LD_INT 4
97188: MOD
97189: PUSH
97190: LD_INT 1
97192: PLUS
97193: PPUSH
97194: CALL_OW 259
97198: PUSH
97199: LD_INT 1
97201: PLUS
97202: PPUSH
97203: CALL_OW 237
97207: GO 97109
97209: POP
97210: POP
// end ;
97211: PPOPN 3
97213: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
97214: LD_EXP 94
97218: PUSH
97219: LD_EXP 102
97223: AND
97224: IFFALSE 97244
97226: GO 97228
97228: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
97229: LD_INT 4
97231: PPUSH
97232: LD_OWVAR 2
97236: PPUSH
97237: LD_INT 0
97239: PPUSH
97240: CALL_OW 324
97244: END
// every 0 0$1 trigger StreamModeActive and sShovel do
97245: LD_EXP 94
97249: PUSH
97250: LD_EXP 131
97254: AND
97255: IFFALSE 97275
97257: GO 97259
97259: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
97260: LD_INT 19
97262: PPUSH
97263: LD_OWVAR 2
97267: PPUSH
97268: LD_INT 0
97270: PPUSH
97271: CALL_OW 324
97275: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
97276: LD_EXP 94
97280: PUSH
97281: LD_EXP 103
97285: AND
97286: IFFALSE 97388
97288: GO 97290
97290: DISABLE
97291: LD_INT 0
97293: PPUSH
97294: PPUSH
// begin enable ;
97295: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
97296: LD_ADDR_VAR 0 2
97300: PUSH
97301: LD_INT 22
97303: PUSH
97304: LD_OWVAR 2
97308: PUSH
97309: EMPTY
97310: LIST
97311: LIST
97312: PUSH
97313: LD_INT 2
97315: PUSH
97316: LD_INT 34
97318: PUSH
97319: LD_INT 11
97321: PUSH
97322: EMPTY
97323: LIST
97324: LIST
97325: PUSH
97326: LD_INT 34
97328: PUSH
97329: LD_INT 30
97331: PUSH
97332: EMPTY
97333: LIST
97334: LIST
97335: PUSH
97336: EMPTY
97337: LIST
97338: LIST
97339: LIST
97340: PUSH
97341: EMPTY
97342: LIST
97343: LIST
97344: PPUSH
97345: CALL_OW 69
97349: ST_TO_ADDR
// if not tmp then
97350: LD_VAR 0 2
97354: NOT
97355: IFFALSE 97359
// exit ;
97357: GO 97388
// for i in tmp do
97359: LD_ADDR_VAR 0 1
97363: PUSH
97364: LD_VAR 0 2
97368: PUSH
97369: FOR_IN
97370: IFFALSE 97386
// begin SetLives ( i , 0 ) ;
97372: LD_VAR 0 1
97376: PPUSH
97377: LD_INT 0
97379: PPUSH
97380: CALL_OW 234
// end ;
97384: GO 97369
97386: POP
97387: POP
// end ;
97388: PPOPN 2
97390: END
// every 0 0$1 trigger StreamModeActive and sBunker do
97391: LD_EXP 94
97395: PUSH
97396: LD_EXP 104
97400: AND
97401: IFFALSE 97421
97403: GO 97405
97405: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
97406: LD_INT 32
97408: PPUSH
97409: LD_OWVAR 2
97413: PPUSH
97414: LD_INT 0
97416: PPUSH
97417: CALL_OW 324
97421: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
97422: LD_EXP 94
97426: PUSH
97427: LD_EXP 105
97431: AND
97432: IFFALSE 97613
97434: GO 97436
97436: DISABLE
97437: LD_INT 0
97439: PPUSH
97440: PPUSH
97441: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
97442: LD_ADDR_VAR 0 2
97446: PUSH
97447: LD_INT 22
97449: PUSH
97450: LD_OWVAR 2
97454: PUSH
97455: EMPTY
97456: LIST
97457: LIST
97458: PUSH
97459: LD_INT 33
97461: PUSH
97462: LD_INT 3
97464: PUSH
97465: EMPTY
97466: LIST
97467: LIST
97468: PUSH
97469: EMPTY
97470: LIST
97471: LIST
97472: PPUSH
97473: CALL_OW 69
97477: ST_TO_ADDR
// if not tmp then
97478: LD_VAR 0 2
97482: NOT
97483: IFFALSE 97487
// exit ;
97485: GO 97613
// side := 0 ;
97487: LD_ADDR_VAR 0 3
97491: PUSH
97492: LD_INT 0
97494: ST_TO_ADDR
// for i := 1 to 8 do
97495: LD_ADDR_VAR 0 1
97499: PUSH
97500: DOUBLE
97501: LD_INT 1
97503: DEC
97504: ST_TO_ADDR
97505: LD_INT 8
97507: PUSH
97508: FOR_TO
97509: IFFALSE 97557
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
97511: LD_OWVAR 2
97515: PUSH
97516: LD_VAR 0 1
97520: NONEQUAL
97521: PUSH
97522: LD_OWVAR 2
97526: PPUSH
97527: LD_VAR 0 1
97531: PPUSH
97532: CALL_OW 81
97536: PUSH
97537: LD_INT 2
97539: EQUAL
97540: AND
97541: IFFALSE 97555
// begin side := i ;
97543: LD_ADDR_VAR 0 3
97547: PUSH
97548: LD_VAR 0 1
97552: ST_TO_ADDR
// break ;
97553: GO 97557
// end ;
97555: GO 97508
97557: POP
97558: POP
// if not side then
97559: LD_VAR 0 3
97563: NOT
97564: IFFALSE 97568
// exit ;
97566: GO 97613
// for i := 1 to tmp do
97568: LD_ADDR_VAR 0 1
97572: PUSH
97573: DOUBLE
97574: LD_INT 1
97576: DEC
97577: ST_TO_ADDR
97578: LD_VAR 0 2
97582: PUSH
97583: FOR_TO
97584: IFFALSE 97611
// if Prob ( 60 ) then
97586: LD_INT 60
97588: PPUSH
97589: CALL_OW 13
97593: IFFALSE 97609
// SetSide ( i , side ) ;
97595: LD_VAR 0 1
97599: PPUSH
97600: LD_VAR 0 3
97604: PPUSH
97605: CALL_OW 235
97609: GO 97583
97611: POP
97612: POP
// end ;
97613: PPOPN 3
97615: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
97616: LD_EXP 94
97620: PUSH
97621: LD_EXP 107
97625: AND
97626: IFFALSE 97745
97628: GO 97630
97630: DISABLE
97631: LD_INT 0
97633: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
97634: LD_ADDR_VAR 0 1
97638: PUSH
97639: LD_INT 22
97641: PUSH
97642: LD_OWVAR 2
97646: PUSH
97647: EMPTY
97648: LIST
97649: LIST
97650: PUSH
97651: LD_INT 21
97653: PUSH
97654: LD_INT 1
97656: PUSH
97657: EMPTY
97658: LIST
97659: LIST
97660: PUSH
97661: LD_INT 3
97663: PUSH
97664: LD_INT 23
97666: PUSH
97667: LD_INT 0
97669: PUSH
97670: EMPTY
97671: LIST
97672: LIST
97673: PUSH
97674: EMPTY
97675: LIST
97676: LIST
97677: PUSH
97678: EMPTY
97679: LIST
97680: LIST
97681: LIST
97682: PPUSH
97683: CALL_OW 69
97687: PUSH
97688: FOR_IN
97689: IFFALSE 97743
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
97691: LD_VAR 0 1
97695: PPUSH
97696: CALL_OW 257
97700: PUSH
97701: LD_INT 1
97703: PUSH
97704: LD_INT 2
97706: PUSH
97707: LD_INT 3
97709: PUSH
97710: LD_INT 4
97712: PUSH
97713: EMPTY
97714: LIST
97715: LIST
97716: LIST
97717: LIST
97718: IN
97719: IFFALSE 97741
// SetClass ( un , rand ( 1 , 4 ) ) ;
97721: LD_VAR 0 1
97725: PPUSH
97726: LD_INT 1
97728: PPUSH
97729: LD_INT 4
97731: PPUSH
97732: CALL_OW 12
97736: PPUSH
97737: CALL_OW 336
97741: GO 97688
97743: POP
97744: POP
// end ;
97745: PPOPN 1
97747: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
97748: LD_EXP 94
97752: PUSH
97753: LD_EXP 106
97757: AND
97758: IFFALSE 97837
97760: GO 97762
97762: DISABLE
97763: LD_INT 0
97765: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
97766: LD_ADDR_VAR 0 1
97770: PUSH
97771: LD_INT 22
97773: PUSH
97774: LD_OWVAR 2
97778: PUSH
97779: EMPTY
97780: LIST
97781: LIST
97782: PUSH
97783: LD_INT 21
97785: PUSH
97786: LD_INT 3
97788: PUSH
97789: EMPTY
97790: LIST
97791: LIST
97792: PUSH
97793: EMPTY
97794: LIST
97795: LIST
97796: PPUSH
97797: CALL_OW 69
97801: ST_TO_ADDR
// if not tmp then
97802: LD_VAR 0 1
97806: NOT
97807: IFFALSE 97811
// exit ;
97809: GO 97837
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
97811: LD_VAR 0 1
97815: PUSH
97816: LD_INT 1
97818: PPUSH
97819: LD_VAR 0 1
97823: PPUSH
97824: CALL_OW 12
97828: ARRAY
97829: PPUSH
97830: LD_INT 100
97832: PPUSH
97833: CALL_OW 234
// end ;
97837: PPOPN 1
97839: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
97840: LD_EXP 94
97844: PUSH
97845: LD_EXP 108
97849: AND
97850: IFFALSE 97948
97852: GO 97854
97854: DISABLE
97855: LD_INT 0
97857: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
97858: LD_ADDR_VAR 0 1
97862: PUSH
97863: LD_INT 22
97865: PUSH
97866: LD_OWVAR 2
97870: PUSH
97871: EMPTY
97872: LIST
97873: LIST
97874: PUSH
97875: LD_INT 21
97877: PUSH
97878: LD_INT 1
97880: PUSH
97881: EMPTY
97882: LIST
97883: LIST
97884: PUSH
97885: EMPTY
97886: LIST
97887: LIST
97888: PPUSH
97889: CALL_OW 69
97893: ST_TO_ADDR
// if not tmp then
97894: LD_VAR 0 1
97898: NOT
97899: IFFALSE 97903
// exit ;
97901: GO 97948
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
97903: LD_VAR 0 1
97907: PUSH
97908: LD_INT 1
97910: PPUSH
97911: LD_VAR 0 1
97915: PPUSH
97916: CALL_OW 12
97920: ARRAY
97921: PPUSH
97922: LD_INT 1
97924: PPUSH
97925: LD_INT 4
97927: PPUSH
97928: CALL_OW 12
97932: PPUSH
97933: LD_INT 3000
97935: PPUSH
97936: LD_INT 9000
97938: PPUSH
97939: CALL_OW 12
97943: PPUSH
97944: CALL_OW 492
// end ;
97948: PPOPN 1
97950: END
// every 0 0$1 trigger StreamModeActive and sDepot do
97951: LD_EXP 94
97955: PUSH
97956: LD_EXP 109
97960: AND
97961: IFFALSE 97981
97963: GO 97965
97965: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
97966: LD_INT 1
97968: PPUSH
97969: LD_OWVAR 2
97973: PPUSH
97974: LD_INT 0
97976: PPUSH
97977: CALL_OW 324
97981: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
97982: LD_EXP 94
97986: PUSH
97987: LD_EXP 110
97991: AND
97992: IFFALSE 98075
97994: GO 97996
97996: DISABLE
97997: LD_INT 0
97999: PPUSH
98000: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
98001: LD_ADDR_VAR 0 2
98005: PUSH
98006: LD_INT 22
98008: PUSH
98009: LD_OWVAR 2
98013: PUSH
98014: EMPTY
98015: LIST
98016: LIST
98017: PUSH
98018: LD_INT 21
98020: PUSH
98021: LD_INT 3
98023: PUSH
98024: EMPTY
98025: LIST
98026: LIST
98027: PUSH
98028: EMPTY
98029: LIST
98030: LIST
98031: PPUSH
98032: CALL_OW 69
98036: ST_TO_ADDR
// if not tmp then
98037: LD_VAR 0 2
98041: NOT
98042: IFFALSE 98046
// exit ;
98044: GO 98075
// for i in tmp do
98046: LD_ADDR_VAR 0 1
98050: PUSH
98051: LD_VAR 0 2
98055: PUSH
98056: FOR_IN
98057: IFFALSE 98073
// SetBLevel ( i , 10 ) ;
98059: LD_VAR 0 1
98063: PPUSH
98064: LD_INT 10
98066: PPUSH
98067: CALL_OW 241
98071: GO 98056
98073: POP
98074: POP
// end ;
98075: PPOPN 2
98077: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
98078: LD_EXP 94
98082: PUSH
98083: LD_EXP 111
98087: AND
98088: IFFALSE 98199
98090: GO 98092
98092: DISABLE
98093: LD_INT 0
98095: PPUSH
98096: PPUSH
98097: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
98098: LD_ADDR_VAR 0 3
98102: PUSH
98103: LD_INT 22
98105: PUSH
98106: LD_OWVAR 2
98110: PUSH
98111: EMPTY
98112: LIST
98113: LIST
98114: PUSH
98115: LD_INT 25
98117: PUSH
98118: LD_INT 1
98120: PUSH
98121: EMPTY
98122: LIST
98123: LIST
98124: PUSH
98125: EMPTY
98126: LIST
98127: LIST
98128: PPUSH
98129: CALL_OW 69
98133: ST_TO_ADDR
// if not tmp then
98134: LD_VAR 0 3
98138: NOT
98139: IFFALSE 98143
// exit ;
98141: GO 98199
// un := tmp [ rand ( 1 , tmp ) ] ;
98143: LD_ADDR_VAR 0 2
98147: PUSH
98148: LD_VAR 0 3
98152: PUSH
98153: LD_INT 1
98155: PPUSH
98156: LD_VAR 0 3
98160: PPUSH
98161: CALL_OW 12
98165: ARRAY
98166: ST_TO_ADDR
// if Crawls ( un ) then
98167: LD_VAR 0 2
98171: PPUSH
98172: CALL_OW 318
98176: IFFALSE 98187
// ComWalk ( un ) ;
98178: LD_VAR 0 2
98182: PPUSH
98183: CALL_OW 138
// SetClass ( un , class_sniper ) ;
98187: LD_VAR 0 2
98191: PPUSH
98192: LD_INT 5
98194: PPUSH
98195: CALL_OW 336
// end ;
98199: PPOPN 3
98201: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
98202: LD_EXP 94
98206: PUSH
98207: LD_EXP 112
98211: AND
98212: PUSH
98213: LD_OWVAR 67
98217: PUSH
98218: LD_INT 4
98220: LESS
98221: AND
98222: IFFALSE 98241
98224: GO 98226
98226: DISABLE
// begin Difficulty := Difficulty + 1 ;
98227: LD_ADDR_OWVAR 67
98231: PUSH
98232: LD_OWVAR 67
98236: PUSH
98237: LD_INT 1
98239: PLUS
98240: ST_TO_ADDR
// end ;
98241: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
98242: LD_EXP 94
98246: PUSH
98247: LD_EXP 113
98251: AND
98252: IFFALSE 98355
98254: GO 98256
98256: DISABLE
98257: LD_INT 0
98259: PPUSH
// begin for i := 1 to 5 do
98260: LD_ADDR_VAR 0 1
98264: PUSH
98265: DOUBLE
98266: LD_INT 1
98268: DEC
98269: ST_TO_ADDR
98270: LD_INT 5
98272: PUSH
98273: FOR_TO
98274: IFFALSE 98353
// begin uc_nation := nation_nature ;
98276: LD_ADDR_OWVAR 21
98280: PUSH
98281: LD_INT 0
98283: ST_TO_ADDR
// uc_side := 0 ;
98284: LD_ADDR_OWVAR 20
98288: PUSH
98289: LD_INT 0
98291: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
98292: LD_ADDR_OWVAR 29
98296: PUSH
98297: LD_INT 12
98299: PUSH
98300: LD_INT 12
98302: PUSH
98303: EMPTY
98304: LIST
98305: LIST
98306: ST_TO_ADDR
// hc_agressivity := 20 ;
98307: LD_ADDR_OWVAR 35
98311: PUSH
98312: LD_INT 20
98314: ST_TO_ADDR
// hc_class := class_tiger ;
98315: LD_ADDR_OWVAR 28
98319: PUSH
98320: LD_INT 14
98322: ST_TO_ADDR
// hc_gallery :=  ;
98323: LD_ADDR_OWVAR 33
98327: PUSH
98328: LD_STRING 
98330: ST_TO_ADDR
// hc_name :=  ;
98331: LD_ADDR_OWVAR 26
98335: PUSH
98336: LD_STRING 
98338: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
98339: CALL_OW 44
98343: PPUSH
98344: LD_INT 0
98346: PPUSH
98347: CALL_OW 51
// end ;
98351: GO 98273
98353: POP
98354: POP
// end ;
98355: PPOPN 1
98357: END
// every 0 0$1 trigger StreamModeActive and sBomb do
98358: LD_EXP 94
98362: PUSH
98363: LD_EXP 114
98367: AND
98368: IFFALSE 98377
98370: GO 98372
98372: DISABLE
// StreamSibBomb ;
98373: CALL 98378 0 0
98377: END
// export function StreamSibBomb ; var i , x , y ; begin
98378: LD_INT 0
98380: PPUSH
98381: PPUSH
98382: PPUSH
98383: PPUSH
// result := false ;
98384: LD_ADDR_VAR 0 1
98388: PUSH
98389: LD_INT 0
98391: ST_TO_ADDR
// for i := 1 to 16 do
98392: LD_ADDR_VAR 0 2
98396: PUSH
98397: DOUBLE
98398: LD_INT 1
98400: DEC
98401: ST_TO_ADDR
98402: LD_INT 16
98404: PUSH
98405: FOR_TO
98406: IFFALSE 98605
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
98408: LD_ADDR_VAR 0 3
98412: PUSH
98413: LD_INT 10
98415: PUSH
98416: LD_INT 20
98418: PUSH
98419: LD_INT 30
98421: PUSH
98422: LD_INT 40
98424: PUSH
98425: LD_INT 50
98427: PUSH
98428: LD_INT 60
98430: PUSH
98431: LD_INT 70
98433: PUSH
98434: LD_INT 80
98436: PUSH
98437: LD_INT 90
98439: PUSH
98440: LD_INT 100
98442: PUSH
98443: LD_INT 110
98445: PUSH
98446: LD_INT 120
98448: PUSH
98449: LD_INT 130
98451: PUSH
98452: LD_INT 140
98454: PUSH
98455: LD_INT 150
98457: PUSH
98458: EMPTY
98459: LIST
98460: LIST
98461: LIST
98462: LIST
98463: LIST
98464: LIST
98465: LIST
98466: LIST
98467: LIST
98468: LIST
98469: LIST
98470: LIST
98471: LIST
98472: LIST
98473: LIST
98474: PUSH
98475: LD_INT 1
98477: PPUSH
98478: LD_INT 15
98480: PPUSH
98481: CALL_OW 12
98485: ARRAY
98486: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
98487: LD_ADDR_VAR 0 4
98491: PUSH
98492: LD_INT 10
98494: PUSH
98495: LD_INT 20
98497: PUSH
98498: LD_INT 30
98500: PUSH
98501: LD_INT 40
98503: PUSH
98504: LD_INT 50
98506: PUSH
98507: LD_INT 60
98509: PUSH
98510: LD_INT 70
98512: PUSH
98513: LD_INT 80
98515: PUSH
98516: LD_INT 90
98518: PUSH
98519: LD_INT 100
98521: PUSH
98522: LD_INT 110
98524: PUSH
98525: LD_INT 120
98527: PUSH
98528: LD_INT 130
98530: PUSH
98531: LD_INT 140
98533: PUSH
98534: LD_INT 150
98536: PUSH
98537: EMPTY
98538: LIST
98539: LIST
98540: LIST
98541: LIST
98542: LIST
98543: LIST
98544: LIST
98545: LIST
98546: LIST
98547: LIST
98548: LIST
98549: LIST
98550: LIST
98551: LIST
98552: LIST
98553: PUSH
98554: LD_INT 1
98556: PPUSH
98557: LD_INT 15
98559: PPUSH
98560: CALL_OW 12
98564: ARRAY
98565: ST_TO_ADDR
// if ValidHex ( x , y ) then
98566: LD_VAR 0 3
98570: PPUSH
98571: LD_VAR 0 4
98575: PPUSH
98576: CALL_OW 488
98580: IFFALSE 98603
// begin result := [ x , y ] ;
98582: LD_ADDR_VAR 0 1
98586: PUSH
98587: LD_VAR 0 3
98591: PUSH
98592: LD_VAR 0 4
98596: PUSH
98597: EMPTY
98598: LIST
98599: LIST
98600: ST_TO_ADDR
// break ;
98601: GO 98605
// end ; end ;
98603: GO 98405
98605: POP
98606: POP
// if result then
98607: LD_VAR 0 1
98611: IFFALSE 98671
// begin ToLua ( playSibBomb() ) ;
98613: LD_STRING playSibBomb()
98615: PPUSH
98616: CALL_OW 559
// wait ( 0 0$14 ) ;
98620: LD_INT 490
98622: PPUSH
98623: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
98627: LD_VAR 0 1
98631: PUSH
98632: LD_INT 1
98634: ARRAY
98635: PPUSH
98636: LD_VAR 0 1
98640: PUSH
98641: LD_INT 2
98643: ARRAY
98644: PPUSH
98645: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
98649: LD_VAR 0 1
98653: PUSH
98654: LD_INT 1
98656: ARRAY
98657: PPUSH
98658: LD_VAR 0 1
98662: PUSH
98663: LD_INT 2
98665: ARRAY
98666: PPUSH
98667: CALL_OW 429
// end ; end ;
98671: LD_VAR 0 1
98675: RET
// every 0 0$1 trigger StreamModeActive and sReset do
98676: LD_EXP 94
98680: PUSH
98681: LD_EXP 116
98685: AND
98686: IFFALSE 98698
98688: GO 98690
98690: DISABLE
// YouLost (  ) ;
98691: LD_STRING 
98693: PPUSH
98694: CALL_OW 104
98698: END
// every 0 0$1 trigger StreamModeActive and sFog do
98699: LD_EXP 94
98703: PUSH
98704: LD_EXP 115
98708: AND
98709: IFFALSE 98723
98711: GO 98713
98713: DISABLE
// FogOff ( your_side ) ;
98714: LD_OWVAR 2
98718: PPUSH
98719: CALL_OW 344
98723: END
// every 0 0$1 trigger StreamModeActive and sSun do
98724: LD_EXP 94
98728: PUSH
98729: LD_EXP 117
98733: AND
98734: IFFALSE 98762
98736: GO 98738
98738: DISABLE
// begin solar_recharge_percent := 0 ;
98739: LD_ADDR_OWVAR 79
98743: PUSH
98744: LD_INT 0
98746: ST_TO_ADDR
// wait ( 5 5$00 ) ;
98747: LD_INT 10500
98749: PPUSH
98750: CALL_OW 67
// solar_recharge_percent := 100 ;
98754: LD_ADDR_OWVAR 79
98758: PUSH
98759: LD_INT 100
98761: ST_TO_ADDR
// end ;
98762: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
98763: LD_EXP 94
98767: PUSH
98768: LD_EXP 118
98772: AND
98773: IFFALSE 99012
98775: GO 98777
98777: DISABLE
98778: LD_INT 0
98780: PPUSH
98781: PPUSH
98782: PPUSH
// begin tmp := [ ] ;
98783: LD_ADDR_VAR 0 3
98787: PUSH
98788: EMPTY
98789: ST_TO_ADDR
// for i := 1 to 6 do
98790: LD_ADDR_VAR 0 1
98794: PUSH
98795: DOUBLE
98796: LD_INT 1
98798: DEC
98799: ST_TO_ADDR
98800: LD_INT 6
98802: PUSH
98803: FOR_TO
98804: IFFALSE 98909
// begin uc_nation := nation_nature ;
98806: LD_ADDR_OWVAR 21
98810: PUSH
98811: LD_INT 0
98813: ST_TO_ADDR
// uc_side := 0 ;
98814: LD_ADDR_OWVAR 20
98818: PUSH
98819: LD_INT 0
98821: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
98822: LD_ADDR_OWVAR 29
98826: PUSH
98827: LD_INT 12
98829: PUSH
98830: LD_INT 12
98832: PUSH
98833: EMPTY
98834: LIST
98835: LIST
98836: ST_TO_ADDR
// hc_agressivity := 20 ;
98837: LD_ADDR_OWVAR 35
98841: PUSH
98842: LD_INT 20
98844: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
98845: LD_ADDR_OWVAR 28
98849: PUSH
98850: LD_INT 17
98852: ST_TO_ADDR
// hc_gallery :=  ;
98853: LD_ADDR_OWVAR 33
98857: PUSH
98858: LD_STRING 
98860: ST_TO_ADDR
// hc_name :=  ;
98861: LD_ADDR_OWVAR 26
98865: PUSH
98866: LD_STRING 
98868: ST_TO_ADDR
// un := CreateHuman ;
98869: LD_ADDR_VAR 0 2
98873: PUSH
98874: CALL_OW 44
98878: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
98879: LD_VAR 0 2
98883: PPUSH
98884: LD_INT 1
98886: PPUSH
98887: CALL_OW 51
// tmp := tmp ^ un ;
98891: LD_ADDR_VAR 0 3
98895: PUSH
98896: LD_VAR 0 3
98900: PUSH
98901: LD_VAR 0 2
98905: ADD
98906: ST_TO_ADDR
// end ;
98907: GO 98803
98909: POP
98910: POP
// repeat wait ( 0 0$1 ) ;
98911: LD_INT 35
98913: PPUSH
98914: CALL_OW 67
// for un in tmp do
98918: LD_ADDR_VAR 0 2
98922: PUSH
98923: LD_VAR 0 3
98927: PUSH
98928: FOR_IN
98929: IFFALSE 99003
// begin if IsDead ( un ) then
98931: LD_VAR 0 2
98935: PPUSH
98936: CALL_OW 301
98940: IFFALSE 98960
// begin tmp := tmp diff un ;
98942: LD_ADDR_VAR 0 3
98946: PUSH
98947: LD_VAR 0 3
98951: PUSH
98952: LD_VAR 0 2
98956: DIFF
98957: ST_TO_ADDR
// continue ;
98958: GO 98928
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
98960: LD_VAR 0 2
98964: PPUSH
98965: LD_INT 3
98967: PUSH
98968: LD_INT 22
98970: PUSH
98971: LD_INT 0
98973: PUSH
98974: EMPTY
98975: LIST
98976: LIST
98977: PUSH
98978: EMPTY
98979: LIST
98980: LIST
98981: PPUSH
98982: CALL_OW 69
98986: PPUSH
98987: LD_VAR 0 2
98991: PPUSH
98992: CALL_OW 74
98996: PPUSH
98997: CALL_OW 115
// end ;
99001: GO 98928
99003: POP
99004: POP
// until not tmp ;
99005: LD_VAR 0 3
99009: NOT
99010: IFFALSE 98911
// end ;
99012: PPOPN 3
99014: END
// every 0 0$1 trigger StreamModeActive and sTroll do
99015: LD_EXP 94
99019: PUSH
99020: LD_EXP 119
99024: AND
99025: IFFALSE 99079
99027: GO 99029
99029: DISABLE
// begin ToLua ( displayTroll(); ) ;
99030: LD_STRING displayTroll();
99032: PPUSH
99033: CALL_OW 559
// wait ( 3 3$00 ) ;
99037: LD_INT 6300
99039: PPUSH
99040: CALL_OW 67
// ToLua ( hideTroll(); ) ;
99044: LD_STRING hideTroll();
99046: PPUSH
99047: CALL_OW 559
// wait ( 1 1$00 ) ;
99051: LD_INT 2100
99053: PPUSH
99054: CALL_OW 67
// ToLua ( displayTroll(); ) ;
99058: LD_STRING displayTroll();
99060: PPUSH
99061: CALL_OW 559
// wait ( 1 1$00 ) ;
99065: LD_INT 2100
99067: PPUSH
99068: CALL_OW 67
// ToLua ( hideTroll(); ) ;
99072: LD_STRING hideTroll();
99074: PPUSH
99075: CALL_OW 559
// end ;
99079: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
99080: LD_EXP 94
99084: PUSH
99085: LD_EXP 120
99089: AND
99090: IFFALSE 99153
99092: GO 99094
99094: DISABLE
99095: LD_INT 0
99097: PPUSH
// begin p := 0 ;
99098: LD_ADDR_VAR 0 1
99102: PUSH
99103: LD_INT 0
99105: ST_TO_ADDR
// repeat game_speed := 1 ;
99106: LD_ADDR_OWVAR 65
99110: PUSH
99111: LD_INT 1
99113: ST_TO_ADDR
// wait ( 0 0$1 ) ;
99114: LD_INT 35
99116: PPUSH
99117: CALL_OW 67
// p := p + 1 ;
99121: LD_ADDR_VAR 0 1
99125: PUSH
99126: LD_VAR 0 1
99130: PUSH
99131: LD_INT 1
99133: PLUS
99134: ST_TO_ADDR
// until p >= 60 ;
99135: LD_VAR 0 1
99139: PUSH
99140: LD_INT 60
99142: GREATEREQUAL
99143: IFFALSE 99106
// game_speed := 4 ;
99145: LD_ADDR_OWVAR 65
99149: PUSH
99150: LD_INT 4
99152: ST_TO_ADDR
// end ;
99153: PPOPN 1
99155: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
99156: LD_EXP 94
99160: PUSH
99161: LD_EXP 121
99165: AND
99166: IFFALSE 99312
99168: GO 99170
99170: DISABLE
99171: LD_INT 0
99173: PPUSH
99174: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
99175: LD_ADDR_VAR 0 1
99179: PUSH
99180: LD_INT 22
99182: PUSH
99183: LD_OWVAR 2
99187: PUSH
99188: EMPTY
99189: LIST
99190: LIST
99191: PUSH
99192: LD_INT 2
99194: PUSH
99195: LD_INT 30
99197: PUSH
99198: LD_INT 0
99200: PUSH
99201: EMPTY
99202: LIST
99203: LIST
99204: PUSH
99205: LD_INT 30
99207: PUSH
99208: LD_INT 1
99210: PUSH
99211: EMPTY
99212: LIST
99213: LIST
99214: PUSH
99215: EMPTY
99216: LIST
99217: LIST
99218: LIST
99219: PUSH
99220: EMPTY
99221: LIST
99222: LIST
99223: PPUSH
99224: CALL_OW 69
99228: ST_TO_ADDR
// if not depot then
99229: LD_VAR 0 1
99233: NOT
99234: IFFALSE 99238
// exit ;
99236: GO 99312
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
99238: LD_ADDR_VAR 0 2
99242: PUSH
99243: LD_VAR 0 1
99247: PUSH
99248: LD_INT 1
99250: PPUSH
99251: LD_VAR 0 1
99255: PPUSH
99256: CALL_OW 12
99260: ARRAY
99261: PPUSH
99262: CALL_OW 274
99266: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
99267: LD_VAR 0 2
99271: PPUSH
99272: LD_INT 1
99274: PPUSH
99275: LD_INT 0
99277: PPUSH
99278: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
99282: LD_VAR 0 2
99286: PPUSH
99287: LD_INT 2
99289: PPUSH
99290: LD_INT 0
99292: PPUSH
99293: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
99297: LD_VAR 0 2
99301: PPUSH
99302: LD_INT 3
99304: PPUSH
99305: LD_INT 0
99307: PPUSH
99308: CALL_OW 277
// end ;
99312: PPOPN 2
99314: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
99315: LD_EXP 94
99319: PUSH
99320: LD_EXP 122
99324: AND
99325: IFFALSE 99422
99327: GO 99329
99329: DISABLE
99330: LD_INT 0
99332: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
99333: LD_ADDR_VAR 0 1
99337: PUSH
99338: LD_INT 22
99340: PUSH
99341: LD_OWVAR 2
99345: PUSH
99346: EMPTY
99347: LIST
99348: LIST
99349: PUSH
99350: LD_INT 21
99352: PUSH
99353: LD_INT 1
99355: PUSH
99356: EMPTY
99357: LIST
99358: LIST
99359: PUSH
99360: LD_INT 3
99362: PUSH
99363: LD_INT 23
99365: PUSH
99366: LD_INT 0
99368: PUSH
99369: EMPTY
99370: LIST
99371: LIST
99372: PUSH
99373: EMPTY
99374: LIST
99375: LIST
99376: PUSH
99377: EMPTY
99378: LIST
99379: LIST
99380: LIST
99381: PPUSH
99382: CALL_OW 69
99386: ST_TO_ADDR
// if not tmp then
99387: LD_VAR 0 1
99391: NOT
99392: IFFALSE 99396
// exit ;
99394: GO 99422
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
99396: LD_VAR 0 1
99400: PUSH
99401: LD_INT 1
99403: PPUSH
99404: LD_VAR 0 1
99408: PPUSH
99409: CALL_OW 12
99413: ARRAY
99414: PPUSH
99415: LD_INT 200
99417: PPUSH
99418: CALL_OW 234
// end ;
99422: PPOPN 1
99424: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
99425: LD_EXP 94
99429: PUSH
99430: LD_EXP 123
99434: AND
99435: IFFALSE 99514
99437: GO 99439
99439: DISABLE
99440: LD_INT 0
99442: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
99443: LD_ADDR_VAR 0 1
99447: PUSH
99448: LD_INT 22
99450: PUSH
99451: LD_OWVAR 2
99455: PUSH
99456: EMPTY
99457: LIST
99458: LIST
99459: PUSH
99460: LD_INT 21
99462: PUSH
99463: LD_INT 2
99465: PUSH
99466: EMPTY
99467: LIST
99468: LIST
99469: PUSH
99470: EMPTY
99471: LIST
99472: LIST
99473: PPUSH
99474: CALL_OW 69
99478: ST_TO_ADDR
// if not tmp then
99479: LD_VAR 0 1
99483: NOT
99484: IFFALSE 99488
// exit ;
99486: GO 99514
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
99488: LD_VAR 0 1
99492: PUSH
99493: LD_INT 1
99495: PPUSH
99496: LD_VAR 0 1
99500: PPUSH
99501: CALL_OW 12
99505: ARRAY
99506: PPUSH
99507: LD_INT 60
99509: PPUSH
99510: CALL_OW 234
// end ;
99514: PPOPN 1
99516: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
99517: LD_EXP 94
99521: PUSH
99522: LD_EXP 124
99526: AND
99527: IFFALSE 99626
99529: GO 99531
99531: DISABLE
99532: LD_INT 0
99534: PPUSH
99535: PPUSH
// begin enable ;
99536: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
99537: LD_ADDR_VAR 0 1
99541: PUSH
99542: LD_INT 22
99544: PUSH
99545: LD_OWVAR 2
99549: PUSH
99550: EMPTY
99551: LIST
99552: LIST
99553: PUSH
99554: LD_INT 61
99556: PUSH
99557: EMPTY
99558: LIST
99559: PUSH
99560: LD_INT 33
99562: PUSH
99563: LD_INT 2
99565: PUSH
99566: EMPTY
99567: LIST
99568: LIST
99569: PUSH
99570: EMPTY
99571: LIST
99572: LIST
99573: LIST
99574: PPUSH
99575: CALL_OW 69
99579: ST_TO_ADDR
// if not tmp then
99580: LD_VAR 0 1
99584: NOT
99585: IFFALSE 99589
// exit ;
99587: GO 99626
// for i in tmp do
99589: LD_ADDR_VAR 0 2
99593: PUSH
99594: LD_VAR 0 1
99598: PUSH
99599: FOR_IN
99600: IFFALSE 99624
// if IsControledBy ( i ) then
99602: LD_VAR 0 2
99606: PPUSH
99607: CALL_OW 312
99611: IFFALSE 99622
// ComUnlink ( i ) ;
99613: LD_VAR 0 2
99617: PPUSH
99618: CALL_OW 136
99622: GO 99599
99624: POP
99625: POP
// end ;
99626: PPOPN 2
99628: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
99629: LD_EXP 94
99633: PUSH
99634: LD_EXP 125
99638: AND
99639: IFFALSE 99779
99641: GO 99643
99643: DISABLE
99644: LD_INT 0
99646: PPUSH
99647: PPUSH
// begin ToLua ( displayPowell(); ) ;
99648: LD_STRING displayPowell();
99650: PPUSH
99651: CALL_OW 559
// uc_side := 0 ;
99655: LD_ADDR_OWVAR 20
99659: PUSH
99660: LD_INT 0
99662: ST_TO_ADDR
// uc_nation := 2 ;
99663: LD_ADDR_OWVAR 21
99667: PUSH
99668: LD_INT 2
99670: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
99671: LD_ADDR_OWVAR 37
99675: PUSH
99676: LD_INT 14
99678: ST_TO_ADDR
// vc_engine := engine_siberite ;
99679: LD_ADDR_OWVAR 39
99683: PUSH
99684: LD_INT 3
99686: ST_TO_ADDR
// vc_control := control_apeman ;
99687: LD_ADDR_OWVAR 38
99691: PUSH
99692: LD_INT 5
99694: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
99695: LD_ADDR_OWVAR 40
99699: PUSH
99700: LD_INT 29
99702: ST_TO_ADDR
// un := CreateVehicle ;
99703: LD_ADDR_VAR 0 2
99707: PUSH
99708: CALL_OW 45
99712: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
99713: LD_VAR 0 2
99717: PPUSH
99718: LD_INT 1
99720: PPUSH
99721: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
99725: LD_INT 35
99727: PPUSH
99728: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
99732: LD_VAR 0 2
99736: PPUSH
99737: LD_INT 22
99739: PUSH
99740: LD_OWVAR 2
99744: PUSH
99745: EMPTY
99746: LIST
99747: LIST
99748: PPUSH
99749: CALL_OW 69
99753: PPUSH
99754: LD_VAR 0 2
99758: PPUSH
99759: CALL_OW 74
99763: PPUSH
99764: CALL_OW 115
// until IsDead ( un ) ;
99768: LD_VAR 0 2
99772: PPUSH
99773: CALL_OW 301
99777: IFFALSE 99725
// end ;
99779: PPOPN 2
99781: END
// every 0 0$1 trigger StreamModeActive and sStu do
99782: LD_EXP 94
99786: PUSH
99787: LD_EXP 133
99791: AND
99792: IFFALSE 99808
99794: GO 99796
99796: DISABLE
// begin ToLua ( displayStucuk(); ) ;
99797: LD_STRING displayStucuk();
99799: PPUSH
99800: CALL_OW 559
// ResetFog ;
99804: CALL_OW 335
// end ;
99808: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
99809: LD_EXP 94
99813: PUSH
99814: LD_EXP 126
99818: AND
99819: IFFALSE 99960
99821: GO 99823
99823: DISABLE
99824: LD_INT 0
99826: PPUSH
99827: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
99828: LD_ADDR_VAR 0 2
99832: PUSH
99833: LD_INT 22
99835: PUSH
99836: LD_OWVAR 2
99840: PUSH
99841: EMPTY
99842: LIST
99843: LIST
99844: PUSH
99845: LD_INT 21
99847: PUSH
99848: LD_INT 1
99850: PUSH
99851: EMPTY
99852: LIST
99853: LIST
99854: PUSH
99855: EMPTY
99856: LIST
99857: LIST
99858: PPUSH
99859: CALL_OW 69
99863: ST_TO_ADDR
// if not tmp then
99864: LD_VAR 0 2
99868: NOT
99869: IFFALSE 99873
// exit ;
99871: GO 99960
// un := tmp [ rand ( 1 , tmp ) ] ;
99873: LD_ADDR_VAR 0 1
99877: PUSH
99878: LD_VAR 0 2
99882: PUSH
99883: LD_INT 1
99885: PPUSH
99886: LD_VAR 0 2
99890: PPUSH
99891: CALL_OW 12
99895: ARRAY
99896: ST_TO_ADDR
// SetSide ( un , 0 ) ;
99897: LD_VAR 0 1
99901: PPUSH
99902: LD_INT 0
99904: PPUSH
99905: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
99909: LD_VAR 0 1
99913: PPUSH
99914: LD_OWVAR 3
99918: PUSH
99919: LD_VAR 0 1
99923: DIFF
99924: PPUSH
99925: LD_VAR 0 1
99929: PPUSH
99930: CALL_OW 74
99934: PPUSH
99935: CALL_OW 115
// wait ( 0 0$20 ) ;
99939: LD_INT 700
99941: PPUSH
99942: CALL_OW 67
// SetSide ( un , your_side ) ;
99946: LD_VAR 0 1
99950: PPUSH
99951: LD_OWVAR 2
99955: PPUSH
99956: CALL_OW 235
// end ;
99960: PPOPN 2
99962: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
99963: LD_EXP 94
99967: PUSH
99968: LD_EXP 127
99972: AND
99973: IFFALSE 100079
99975: GO 99977
99977: DISABLE
99978: LD_INT 0
99980: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
99981: LD_ADDR_VAR 0 1
99985: PUSH
99986: LD_INT 22
99988: PUSH
99989: LD_OWVAR 2
99993: PUSH
99994: EMPTY
99995: LIST
99996: LIST
99997: PUSH
99998: LD_INT 2
100000: PUSH
100001: LD_INT 30
100003: PUSH
100004: LD_INT 0
100006: PUSH
100007: EMPTY
100008: LIST
100009: LIST
100010: PUSH
100011: LD_INT 30
100013: PUSH
100014: LD_INT 1
100016: PUSH
100017: EMPTY
100018: LIST
100019: LIST
100020: PUSH
100021: EMPTY
100022: LIST
100023: LIST
100024: LIST
100025: PUSH
100026: EMPTY
100027: LIST
100028: LIST
100029: PPUSH
100030: CALL_OW 69
100034: ST_TO_ADDR
// if not depot then
100035: LD_VAR 0 1
100039: NOT
100040: IFFALSE 100044
// exit ;
100042: GO 100079
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
100044: LD_VAR 0 1
100048: PUSH
100049: LD_INT 1
100051: ARRAY
100052: PPUSH
100053: CALL_OW 250
100057: PPUSH
100058: LD_VAR 0 1
100062: PUSH
100063: LD_INT 1
100065: ARRAY
100066: PPUSH
100067: CALL_OW 251
100071: PPUSH
100072: LD_INT 70
100074: PPUSH
100075: CALL_OW 495
// end ;
100079: PPOPN 1
100081: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
100082: LD_EXP 94
100086: PUSH
100087: LD_EXP 128
100091: AND
100092: IFFALSE 100303
100094: GO 100096
100096: DISABLE
100097: LD_INT 0
100099: PPUSH
100100: PPUSH
100101: PPUSH
100102: PPUSH
100103: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
100104: LD_ADDR_VAR 0 5
100108: PUSH
100109: LD_INT 22
100111: PUSH
100112: LD_OWVAR 2
100116: PUSH
100117: EMPTY
100118: LIST
100119: LIST
100120: PUSH
100121: LD_INT 21
100123: PUSH
100124: LD_INT 1
100126: PUSH
100127: EMPTY
100128: LIST
100129: LIST
100130: PUSH
100131: EMPTY
100132: LIST
100133: LIST
100134: PPUSH
100135: CALL_OW 69
100139: ST_TO_ADDR
// if not tmp then
100140: LD_VAR 0 5
100144: NOT
100145: IFFALSE 100149
// exit ;
100147: GO 100303
// for i in tmp do
100149: LD_ADDR_VAR 0 1
100153: PUSH
100154: LD_VAR 0 5
100158: PUSH
100159: FOR_IN
100160: IFFALSE 100301
// begin d := rand ( 0 , 5 ) ;
100162: LD_ADDR_VAR 0 4
100166: PUSH
100167: LD_INT 0
100169: PPUSH
100170: LD_INT 5
100172: PPUSH
100173: CALL_OW 12
100177: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
100178: LD_ADDR_VAR 0 2
100182: PUSH
100183: LD_VAR 0 1
100187: PPUSH
100188: CALL_OW 250
100192: PPUSH
100193: LD_VAR 0 4
100197: PPUSH
100198: LD_INT 3
100200: PPUSH
100201: LD_INT 12
100203: PPUSH
100204: CALL_OW 12
100208: PPUSH
100209: CALL_OW 272
100213: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
100214: LD_ADDR_VAR 0 3
100218: PUSH
100219: LD_VAR 0 1
100223: PPUSH
100224: CALL_OW 251
100228: PPUSH
100229: LD_VAR 0 4
100233: PPUSH
100234: LD_INT 3
100236: PPUSH
100237: LD_INT 12
100239: PPUSH
100240: CALL_OW 12
100244: PPUSH
100245: CALL_OW 273
100249: ST_TO_ADDR
// if ValidHex ( x , y ) then
100250: LD_VAR 0 2
100254: PPUSH
100255: LD_VAR 0 3
100259: PPUSH
100260: CALL_OW 488
100264: IFFALSE 100299
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
100266: LD_VAR 0 1
100270: PPUSH
100271: LD_VAR 0 2
100275: PPUSH
100276: LD_VAR 0 3
100280: PPUSH
100281: LD_INT 3
100283: PPUSH
100284: LD_INT 6
100286: PPUSH
100287: CALL_OW 12
100291: PPUSH
100292: LD_INT 1
100294: PPUSH
100295: CALL_OW 483
// end ;
100299: GO 100159
100301: POP
100302: POP
// end ;
100303: PPOPN 5
100305: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
100306: LD_EXP 94
100310: PUSH
100311: LD_EXP 129
100315: AND
100316: IFFALSE 100410
100318: GO 100320
100320: DISABLE
100321: LD_INT 0
100323: PPUSH
100324: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
100325: LD_ADDR_VAR 0 2
100329: PUSH
100330: LD_INT 22
100332: PUSH
100333: LD_OWVAR 2
100337: PUSH
100338: EMPTY
100339: LIST
100340: LIST
100341: PUSH
100342: LD_INT 32
100344: PUSH
100345: LD_INT 1
100347: PUSH
100348: EMPTY
100349: LIST
100350: LIST
100351: PUSH
100352: LD_INT 21
100354: PUSH
100355: LD_INT 2
100357: PUSH
100358: EMPTY
100359: LIST
100360: LIST
100361: PUSH
100362: EMPTY
100363: LIST
100364: LIST
100365: LIST
100366: PPUSH
100367: CALL_OW 69
100371: ST_TO_ADDR
// if not tmp then
100372: LD_VAR 0 2
100376: NOT
100377: IFFALSE 100381
// exit ;
100379: GO 100410
// for i in tmp do
100381: LD_ADDR_VAR 0 1
100385: PUSH
100386: LD_VAR 0 2
100390: PUSH
100391: FOR_IN
100392: IFFALSE 100408
// SetFuel ( i , 0 ) ;
100394: LD_VAR 0 1
100398: PPUSH
100399: LD_INT 0
100401: PPUSH
100402: CALL_OW 240
100406: GO 100391
100408: POP
100409: POP
// end ;
100410: PPOPN 2
100412: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
100413: LD_EXP 94
100417: PUSH
100418: LD_EXP 130
100422: AND
100423: IFFALSE 100489
100425: GO 100427
100427: DISABLE
100428: LD_INT 0
100430: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
100431: LD_ADDR_VAR 0 1
100435: PUSH
100436: LD_INT 22
100438: PUSH
100439: LD_OWVAR 2
100443: PUSH
100444: EMPTY
100445: LIST
100446: LIST
100447: PUSH
100448: LD_INT 30
100450: PUSH
100451: LD_INT 29
100453: PUSH
100454: EMPTY
100455: LIST
100456: LIST
100457: PUSH
100458: EMPTY
100459: LIST
100460: LIST
100461: PPUSH
100462: CALL_OW 69
100466: ST_TO_ADDR
// if not tmp then
100467: LD_VAR 0 1
100471: NOT
100472: IFFALSE 100476
// exit ;
100474: GO 100489
// DestroyUnit ( tmp [ 1 ] ) ;
100476: LD_VAR 0 1
100480: PUSH
100481: LD_INT 1
100483: ARRAY
100484: PPUSH
100485: CALL_OW 65
// end ;
100489: PPOPN 1
100491: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
100492: LD_EXP 94
100496: PUSH
100497: LD_EXP 132
100501: AND
100502: IFFALSE 100631
100504: GO 100506
100506: DISABLE
100507: LD_INT 0
100509: PPUSH
// begin uc_side := 0 ;
100510: LD_ADDR_OWVAR 20
100514: PUSH
100515: LD_INT 0
100517: ST_TO_ADDR
// uc_nation := nation_arabian ;
100518: LD_ADDR_OWVAR 21
100522: PUSH
100523: LD_INT 2
100525: ST_TO_ADDR
// hc_gallery :=  ;
100526: LD_ADDR_OWVAR 33
100530: PUSH
100531: LD_STRING 
100533: ST_TO_ADDR
// hc_name :=  ;
100534: LD_ADDR_OWVAR 26
100538: PUSH
100539: LD_STRING 
100541: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
100542: LD_INT 1
100544: PPUSH
100545: LD_INT 11
100547: PPUSH
100548: LD_INT 10
100550: PPUSH
100551: CALL_OW 380
// un := CreateHuman ;
100555: LD_ADDR_VAR 0 1
100559: PUSH
100560: CALL_OW 44
100564: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
100565: LD_VAR 0 1
100569: PPUSH
100570: LD_INT 1
100572: PPUSH
100573: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
100577: LD_INT 35
100579: PPUSH
100580: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
100584: LD_VAR 0 1
100588: PPUSH
100589: LD_INT 22
100591: PUSH
100592: LD_OWVAR 2
100596: PUSH
100597: EMPTY
100598: LIST
100599: LIST
100600: PPUSH
100601: CALL_OW 69
100605: PPUSH
100606: LD_VAR 0 1
100610: PPUSH
100611: CALL_OW 74
100615: PPUSH
100616: CALL_OW 115
// until IsDead ( un ) ;
100620: LD_VAR 0 1
100624: PPUSH
100625: CALL_OW 301
100629: IFFALSE 100577
// end ;
100631: PPOPN 1
100633: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
100634: LD_EXP 94
100638: PUSH
100639: LD_EXP 134
100643: AND
100644: IFFALSE 100656
100646: GO 100648
100648: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
100649: LD_STRING earthquake(getX(game), 0, 32)
100651: PPUSH
100652: CALL_OW 559
100656: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
100657: LD_EXP 94
100661: PUSH
100662: LD_EXP 135
100666: AND
100667: IFFALSE 100758
100669: GO 100671
100671: DISABLE
100672: LD_INT 0
100674: PPUSH
// begin enable ;
100675: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
100676: LD_ADDR_VAR 0 1
100680: PUSH
100681: LD_INT 22
100683: PUSH
100684: LD_OWVAR 2
100688: PUSH
100689: EMPTY
100690: LIST
100691: LIST
100692: PUSH
100693: LD_INT 21
100695: PUSH
100696: LD_INT 2
100698: PUSH
100699: EMPTY
100700: LIST
100701: LIST
100702: PUSH
100703: LD_INT 33
100705: PUSH
100706: LD_INT 3
100708: PUSH
100709: EMPTY
100710: LIST
100711: LIST
100712: PUSH
100713: EMPTY
100714: LIST
100715: LIST
100716: LIST
100717: PPUSH
100718: CALL_OW 69
100722: ST_TO_ADDR
// if not tmp then
100723: LD_VAR 0 1
100727: NOT
100728: IFFALSE 100732
// exit ;
100730: GO 100758
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
100732: LD_VAR 0 1
100736: PUSH
100737: LD_INT 1
100739: PPUSH
100740: LD_VAR 0 1
100744: PPUSH
100745: CALL_OW 12
100749: ARRAY
100750: PPUSH
100751: LD_INT 1
100753: PPUSH
100754: CALL_OW 234
// end ;
100758: PPOPN 1
100760: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
100761: LD_EXP 94
100765: PUSH
100766: LD_EXP 136
100770: AND
100771: IFFALSE 100912
100773: GO 100775
100775: DISABLE
100776: LD_INT 0
100778: PPUSH
100779: PPUSH
100780: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
100781: LD_ADDR_VAR 0 3
100785: PUSH
100786: LD_INT 22
100788: PUSH
100789: LD_OWVAR 2
100793: PUSH
100794: EMPTY
100795: LIST
100796: LIST
100797: PUSH
100798: LD_INT 25
100800: PUSH
100801: LD_INT 1
100803: PUSH
100804: EMPTY
100805: LIST
100806: LIST
100807: PUSH
100808: EMPTY
100809: LIST
100810: LIST
100811: PPUSH
100812: CALL_OW 69
100816: ST_TO_ADDR
// if not tmp then
100817: LD_VAR 0 3
100821: NOT
100822: IFFALSE 100826
// exit ;
100824: GO 100912
// un := tmp [ rand ( 1 , tmp ) ] ;
100826: LD_ADDR_VAR 0 2
100830: PUSH
100831: LD_VAR 0 3
100835: PUSH
100836: LD_INT 1
100838: PPUSH
100839: LD_VAR 0 3
100843: PPUSH
100844: CALL_OW 12
100848: ARRAY
100849: ST_TO_ADDR
// if Crawls ( un ) then
100850: LD_VAR 0 2
100854: PPUSH
100855: CALL_OW 318
100859: IFFALSE 100870
// ComWalk ( un ) ;
100861: LD_VAR 0 2
100865: PPUSH
100866: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
100870: LD_VAR 0 2
100874: PPUSH
100875: LD_INT 9
100877: PPUSH
100878: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
100882: LD_INT 28
100884: PPUSH
100885: LD_OWVAR 2
100889: PPUSH
100890: LD_INT 2
100892: PPUSH
100893: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
100897: LD_INT 29
100899: PPUSH
100900: LD_OWVAR 2
100904: PPUSH
100905: LD_INT 2
100907: PPUSH
100908: CALL_OW 322
// end ;
100912: PPOPN 3
100914: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
100915: LD_EXP 94
100919: PUSH
100920: LD_EXP 137
100924: AND
100925: IFFALSE 101036
100927: GO 100929
100929: DISABLE
100930: LD_INT 0
100932: PPUSH
100933: PPUSH
100934: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
100935: LD_ADDR_VAR 0 3
100939: PUSH
100940: LD_INT 22
100942: PUSH
100943: LD_OWVAR 2
100947: PUSH
100948: EMPTY
100949: LIST
100950: LIST
100951: PUSH
100952: LD_INT 25
100954: PUSH
100955: LD_INT 1
100957: PUSH
100958: EMPTY
100959: LIST
100960: LIST
100961: PUSH
100962: EMPTY
100963: LIST
100964: LIST
100965: PPUSH
100966: CALL_OW 69
100970: ST_TO_ADDR
// if not tmp then
100971: LD_VAR 0 3
100975: NOT
100976: IFFALSE 100980
// exit ;
100978: GO 101036
// un := tmp [ rand ( 1 , tmp ) ] ;
100980: LD_ADDR_VAR 0 2
100984: PUSH
100985: LD_VAR 0 3
100989: PUSH
100990: LD_INT 1
100992: PPUSH
100993: LD_VAR 0 3
100997: PPUSH
100998: CALL_OW 12
101002: ARRAY
101003: ST_TO_ADDR
// if Crawls ( un ) then
101004: LD_VAR 0 2
101008: PPUSH
101009: CALL_OW 318
101013: IFFALSE 101024
// ComWalk ( un ) ;
101015: LD_VAR 0 2
101019: PPUSH
101020: CALL_OW 138
// SetClass ( un , class_mortar ) ;
101024: LD_VAR 0 2
101028: PPUSH
101029: LD_INT 8
101031: PPUSH
101032: CALL_OW 336
// end ;
101036: PPOPN 3
101038: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
101039: LD_EXP 94
101043: PUSH
101044: LD_EXP 138
101048: AND
101049: IFFALSE 101193
101051: GO 101053
101053: DISABLE
101054: LD_INT 0
101056: PPUSH
101057: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
101058: LD_ADDR_VAR 0 2
101062: PUSH
101063: LD_INT 22
101065: PUSH
101066: LD_OWVAR 2
101070: PUSH
101071: EMPTY
101072: LIST
101073: LIST
101074: PUSH
101075: LD_INT 21
101077: PUSH
101078: LD_INT 2
101080: PUSH
101081: EMPTY
101082: LIST
101083: LIST
101084: PUSH
101085: LD_INT 2
101087: PUSH
101088: LD_INT 34
101090: PUSH
101091: LD_INT 12
101093: PUSH
101094: EMPTY
101095: LIST
101096: LIST
101097: PUSH
101098: LD_INT 34
101100: PUSH
101101: LD_INT 51
101103: PUSH
101104: EMPTY
101105: LIST
101106: LIST
101107: PUSH
101108: LD_INT 34
101110: PUSH
101111: LD_INT 32
101113: PUSH
101114: EMPTY
101115: LIST
101116: LIST
101117: PUSH
101118: EMPTY
101119: LIST
101120: LIST
101121: LIST
101122: LIST
101123: PUSH
101124: EMPTY
101125: LIST
101126: LIST
101127: LIST
101128: PPUSH
101129: CALL_OW 69
101133: ST_TO_ADDR
// if not tmp then
101134: LD_VAR 0 2
101138: NOT
101139: IFFALSE 101143
// exit ;
101141: GO 101193
// for i in tmp do
101143: LD_ADDR_VAR 0 1
101147: PUSH
101148: LD_VAR 0 2
101152: PUSH
101153: FOR_IN
101154: IFFALSE 101191
// if GetCargo ( i , mat_artifact ) = 0 then
101156: LD_VAR 0 1
101160: PPUSH
101161: LD_INT 4
101163: PPUSH
101164: CALL_OW 289
101168: PUSH
101169: LD_INT 0
101171: EQUAL
101172: IFFALSE 101189
// SetCargo ( i , mat_siberit , 100 ) ;
101174: LD_VAR 0 1
101178: PPUSH
101179: LD_INT 3
101181: PPUSH
101182: LD_INT 100
101184: PPUSH
101185: CALL_OW 290
101189: GO 101153
101191: POP
101192: POP
// end ;
101193: PPOPN 2
101195: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
101196: LD_EXP 94
101200: PUSH
101201: LD_EXP 139
101205: AND
101206: IFFALSE 101389
101208: GO 101210
101210: DISABLE
101211: LD_INT 0
101213: PPUSH
101214: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
101215: LD_ADDR_VAR 0 2
101219: PUSH
101220: LD_INT 22
101222: PUSH
101223: LD_OWVAR 2
101227: PUSH
101228: EMPTY
101229: LIST
101230: LIST
101231: PPUSH
101232: CALL_OW 69
101236: ST_TO_ADDR
// if not tmp then
101237: LD_VAR 0 2
101241: NOT
101242: IFFALSE 101246
// exit ;
101244: GO 101389
// for i := 1 to 2 do
101246: LD_ADDR_VAR 0 1
101250: PUSH
101251: DOUBLE
101252: LD_INT 1
101254: DEC
101255: ST_TO_ADDR
101256: LD_INT 2
101258: PUSH
101259: FOR_TO
101260: IFFALSE 101387
// begin uc_side := your_side ;
101262: LD_ADDR_OWVAR 20
101266: PUSH
101267: LD_OWVAR 2
101271: ST_TO_ADDR
// uc_nation := nation_american ;
101272: LD_ADDR_OWVAR 21
101276: PUSH
101277: LD_INT 1
101279: ST_TO_ADDR
// vc_chassis := us_morphling ;
101280: LD_ADDR_OWVAR 37
101284: PUSH
101285: LD_INT 5
101287: ST_TO_ADDR
// vc_engine := engine_siberite ;
101288: LD_ADDR_OWVAR 39
101292: PUSH
101293: LD_INT 3
101295: ST_TO_ADDR
// vc_control := control_computer ;
101296: LD_ADDR_OWVAR 38
101300: PUSH
101301: LD_INT 3
101303: ST_TO_ADDR
// vc_weapon := us_double_laser ;
101304: LD_ADDR_OWVAR 40
101308: PUSH
101309: LD_INT 10
101311: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
101312: LD_VAR 0 2
101316: PUSH
101317: LD_INT 1
101319: ARRAY
101320: PPUSH
101321: CALL_OW 310
101325: NOT
101326: IFFALSE 101373
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
101328: CALL_OW 45
101332: PPUSH
101333: LD_VAR 0 2
101337: PUSH
101338: LD_INT 1
101340: ARRAY
101341: PPUSH
101342: CALL_OW 250
101346: PPUSH
101347: LD_VAR 0 2
101351: PUSH
101352: LD_INT 1
101354: ARRAY
101355: PPUSH
101356: CALL_OW 251
101360: PPUSH
101361: LD_INT 12
101363: PPUSH
101364: LD_INT 1
101366: PPUSH
101367: CALL_OW 50
101371: GO 101385
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
101373: CALL_OW 45
101377: PPUSH
101378: LD_INT 1
101380: PPUSH
101381: CALL_OW 51
// end ;
101385: GO 101259
101387: POP
101388: POP
// end ;
101389: PPOPN 2
101391: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
101392: LD_EXP 94
101396: PUSH
101397: LD_EXP 140
101401: AND
101402: IFFALSE 101624
101404: GO 101406
101406: DISABLE
101407: LD_INT 0
101409: PPUSH
101410: PPUSH
101411: PPUSH
101412: PPUSH
101413: PPUSH
101414: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
101415: LD_ADDR_VAR 0 6
101419: PUSH
101420: LD_INT 22
101422: PUSH
101423: LD_OWVAR 2
101427: PUSH
101428: EMPTY
101429: LIST
101430: LIST
101431: PUSH
101432: LD_INT 21
101434: PUSH
101435: LD_INT 1
101437: PUSH
101438: EMPTY
101439: LIST
101440: LIST
101441: PUSH
101442: LD_INT 3
101444: PUSH
101445: LD_INT 23
101447: PUSH
101448: LD_INT 0
101450: PUSH
101451: EMPTY
101452: LIST
101453: LIST
101454: PUSH
101455: EMPTY
101456: LIST
101457: LIST
101458: PUSH
101459: EMPTY
101460: LIST
101461: LIST
101462: LIST
101463: PPUSH
101464: CALL_OW 69
101468: ST_TO_ADDR
// if not tmp then
101469: LD_VAR 0 6
101473: NOT
101474: IFFALSE 101478
// exit ;
101476: GO 101624
// s1 := rand ( 1 , 4 ) ;
101478: LD_ADDR_VAR 0 2
101482: PUSH
101483: LD_INT 1
101485: PPUSH
101486: LD_INT 4
101488: PPUSH
101489: CALL_OW 12
101493: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
101494: LD_ADDR_VAR 0 4
101498: PUSH
101499: LD_VAR 0 6
101503: PUSH
101504: LD_INT 1
101506: ARRAY
101507: PPUSH
101508: LD_VAR 0 2
101512: PPUSH
101513: CALL_OW 259
101517: ST_TO_ADDR
// if s1 = 1 then
101518: LD_VAR 0 2
101522: PUSH
101523: LD_INT 1
101525: EQUAL
101526: IFFALSE 101546
// s2 := rand ( 2 , 4 ) else
101528: LD_ADDR_VAR 0 3
101532: PUSH
101533: LD_INT 2
101535: PPUSH
101536: LD_INT 4
101538: PPUSH
101539: CALL_OW 12
101543: ST_TO_ADDR
101544: GO 101554
// s2 := 1 ;
101546: LD_ADDR_VAR 0 3
101550: PUSH
101551: LD_INT 1
101553: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
101554: LD_ADDR_VAR 0 5
101558: PUSH
101559: LD_VAR 0 6
101563: PUSH
101564: LD_INT 1
101566: ARRAY
101567: PPUSH
101568: LD_VAR 0 3
101572: PPUSH
101573: CALL_OW 259
101577: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
101578: LD_VAR 0 6
101582: PUSH
101583: LD_INT 1
101585: ARRAY
101586: PPUSH
101587: LD_VAR 0 2
101591: PPUSH
101592: LD_VAR 0 5
101596: PPUSH
101597: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
101601: LD_VAR 0 6
101605: PUSH
101606: LD_INT 1
101608: ARRAY
101609: PPUSH
101610: LD_VAR 0 3
101614: PPUSH
101615: LD_VAR 0 4
101619: PPUSH
101620: CALL_OW 237
// end ;
101624: PPOPN 6
101626: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
101627: LD_EXP 94
101631: PUSH
101632: LD_EXP 141
101636: AND
101637: IFFALSE 101716
101639: GO 101641
101641: DISABLE
101642: LD_INT 0
101644: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
101645: LD_ADDR_VAR 0 1
101649: PUSH
101650: LD_INT 22
101652: PUSH
101653: LD_OWVAR 2
101657: PUSH
101658: EMPTY
101659: LIST
101660: LIST
101661: PUSH
101662: LD_INT 30
101664: PUSH
101665: LD_INT 3
101667: PUSH
101668: EMPTY
101669: LIST
101670: LIST
101671: PUSH
101672: EMPTY
101673: LIST
101674: LIST
101675: PPUSH
101676: CALL_OW 69
101680: ST_TO_ADDR
// if not tmp then
101681: LD_VAR 0 1
101685: NOT
101686: IFFALSE 101690
// exit ;
101688: GO 101716
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
101690: LD_VAR 0 1
101694: PUSH
101695: LD_INT 1
101697: PPUSH
101698: LD_VAR 0 1
101702: PPUSH
101703: CALL_OW 12
101707: ARRAY
101708: PPUSH
101709: LD_INT 1
101711: PPUSH
101712: CALL_OW 234
// end ;
101716: PPOPN 1
101718: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
101719: LD_EXP 94
101723: PUSH
101724: LD_EXP 142
101728: AND
101729: IFFALSE 101841
101731: GO 101733
101733: DISABLE
101734: LD_INT 0
101736: PPUSH
101737: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
101738: LD_ADDR_VAR 0 2
101742: PUSH
101743: LD_INT 22
101745: PUSH
101746: LD_OWVAR 2
101750: PUSH
101751: EMPTY
101752: LIST
101753: LIST
101754: PUSH
101755: LD_INT 2
101757: PUSH
101758: LD_INT 30
101760: PUSH
101761: LD_INT 27
101763: PUSH
101764: EMPTY
101765: LIST
101766: LIST
101767: PUSH
101768: LD_INT 30
101770: PUSH
101771: LD_INT 26
101773: PUSH
101774: EMPTY
101775: LIST
101776: LIST
101777: PUSH
101778: LD_INT 30
101780: PUSH
101781: LD_INT 28
101783: PUSH
101784: EMPTY
101785: LIST
101786: LIST
101787: PUSH
101788: EMPTY
101789: LIST
101790: LIST
101791: LIST
101792: LIST
101793: PUSH
101794: EMPTY
101795: LIST
101796: LIST
101797: PPUSH
101798: CALL_OW 69
101802: ST_TO_ADDR
// if not tmp then
101803: LD_VAR 0 2
101807: NOT
101808: IFFALSE 101812
// exit ;
101810: GO 101841
// for i in tmp do
101812: LD_ADDR_VAR 0 1
101816: PUSH
101817: LD_VAR 0 2
101821: PUSH
101822: FOR_IN
101823: IFFALSE 101839
// SetLives ( i , 1 ) ;
101825: LD_VAR 0 1
101829: PPUSH
101830: LD_INT 1
101832: PPUSH
101833: CALL_OW 234
101837: GO 101822
101839: POP
101840: POP
// end ;
101841: PPOPN 2
101843: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
101844: LD_EXP 94
101848: PUSH
101849: LD_EXP 143
101853: AND
101854: IFFALSE 102141
101856: GO 101858
101858: DISABLE
101859: LD_INT 0
101861: PPUSH
101862: PPUSH
101863: PPUSH
// begin i := rand ( 1 , 7 ) ;
101864: LD_ADDR_VAR 0 1
101868: PUSH
101869: LD_INT 1
101871: PPUSH
101872: LD_INT 7
101874: PPUSH
101875: CALL_OW 12
101879: ST_TO_ADDR
// case i of 1 :
101880: LD_VAR 0 1
101884: PUSH
101885: LD_INT 1
101887: DOUBLE
101888: EQUAL
101889: IFTRUE 101893
101891: GO 101903
101893: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
101894: LD_STRING earthquake(getX(game), 0, 32)
101896: PPUSH
101897: CALL_OW 559
101901: GO 102141
101903: LD_INT 2
101905: DOUBLE
101906: EQUAL
101907: IFTRUE 101911
101909: GO 101925
101911: POP
// begin ToLua ( displayStucuk(); ) ;
101912: LD_STRING displayStucuk();
101914: PPUSH
101915: CALL_OW 559
// ResetFog ;
101919: CALL_OW 335
// end ; 3 :
101923: GO 102141
101925: LD_INT 3
101927: DOUBLE
101928: EQUAL
101929: IFTRUE 101933
101931: GO 102037
101933: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
101934: LD_ADDR_VAR 0 2
101938: PUSH
101939: LD_INT 22
101941: PUSH
101942: LD_OWVAR 2
101946: PUSH
101947: EMPTY
101948: LIST
101949: LIST
101950: PUSH
101951: LD_INT 25
101953: PUSH
101954: LD_INT 1
101956: PUSH
101957: EMPTY
101958: LIST
101959: LIST
101960: PUSH
101961: EMPTY
101962: LIST
101963: LIST
101964: PPUSH
101965: CALL_OW 69
101969: ST_TO_ADDR
// if not tmp then
101970: LD_VAR 0 2
101974: NOT
101975: IFFALSE 101979
// exit ;
101977: GO 102141
// un := tmp [ rand ( 1 , tmp ) ] ;
101979: LD_ADDR_VAR 0 3
101983: PUSH
101984: LD_VAR 0 2
101988: PUSH
101989: LD_INT 1
101991: PPUSH
101992: LD_VAR 0 2
101996: PPUSH
101997: CALL_OW 12
102001: ARRAY
102002: ST_TO_ADDR
// if Crawls ( un ) then
102003: LD_VAR 0 3
102007: PPUSH
102008: CALL_OW 318
102012: IFFALSE 102023
// ComWalk ( un ) ;
102014: LD_VAR 0 3
102018: PPUSH
102019: CALL_OW 138
// SetClass ( un , class_mortar ) ;
102023: LD_VAR 0 3
102027: PPUSH
102028: LD_INT 8
102030: PPUSH
102031: CALL_OW 336
// end ; 4 :
102035: GO 102141
102037: LD_INT 4
102039: DOUBLE
102040: EQUAL
102041: IFTRUE 102045
102043: GO 102119
102045: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
102046: LD_ADDR_VAR 0 2
102050: PUSH
102051: LD_INT 22
102053: PUSH
102054: LD_OWVAR 2
102058: PUSH
102059: EMPTY
102060: LIST
102061: LIST
102062: PUSH
102063: LD_INT 30
102065: PUSH
102066: LD_INT 29
102068: PUSH
102069: EMPTY
102070: LIST
102071: LIST
102072: PUSH
102073: EMPTY
102074: LIST
102075: LIST
102076: PPUSH
102077: CALL_OW 69
102081: ST_TO_ADDR
// if not tmp then
102082: LD_VAR 0 2
102086: NOT
102087: IFFALSE 102091
// exit ;
102089: GO 102141
// CenterNowOnUnits ( tmp [ 1 ] ) ;
102091: LD_VAR 0 2
102095: PUSH
102096: LD_INT 1
102098: ARRAY
102099: PPUSH
102100: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
102104: LD_VAR 0 2
102108: PUSH
102109: LD_INT 1
102111: ARRAY
102112: PPUSH
102113: CALL_OW 65
// end ; 5 .. 7 :
102117: GO 102141
102119: LD_INT 5
102121: DOUBLE
102122: GREATEREQUAL
102123: IFFALSE 102131
102125: LD_INT 7
102127: DOUBLE
102128: LESSEQUAL
102129: IFTRUE 102133
102131: GO 102140
102133: POP
// StreamSibBomb ; end ;
102134: CALL 98378 0 0
102138: GO 102141
102140: POP
// end ;
102141: PPOPN 3
102143: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
102144: LD_EXP 94
102148: PUSH
102149: LD_EXP 144
102153: AND
102154: IFFALSE 102310
102156: GO 102158
102158: DISABLE
102159: LD_INT 0
102161: PPUSH
102162: PPUSH
102163: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
102164: LD_ADDR_VAR 0 2
102168: PUSH
102169: LD_INT 81
102171: PUSH
102172: LD_OWVAR 2
102176: PUSH
102177: EMPTY
102178: LIST
102179: LIST
102180: PUSH
102181: LD_INT 2
102183: PUSH
102184: LD_INT 21
102186: PUSH
102187: LD_INT 1
102189: PUSH
102190: EMPTY
102191: LIST
102192: LIST
102193: PUSH
102194: LD_INT 21
102196: PUSH
102197: LD_INT 2
102199: PUSH
102200: EMPTY
102201: LIST
102202: LIST
102203: PUSH
102204: EMPTY
102205: LIST
102206: LIST
102207: LIST
102208: PUSH
102209: EMPTY
102210: LIST
102211: LIST
102212: PPUSH
102213: CALL_OW 69
102217: ST_TO_ADDR
// if not tmp then
102218: LD_VAR 0 2
102222: NOT
102223: IFFALSE 102227
// exit ;
102225: GO 102310
// p := 0 ;
102227: LD_ADDR_VAR 0 3
102231: PUSH
102232: LD_INT 0
102234: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
102235: LD_INT 35
102237: PPUSH
102238: CALL_OW 67
// p := p + 1 ;
102242: LD_ADDR_VAR 0 3
102246: PUSH
102247: LD_VAR 0 3
102251: PUSH
102252: LD_INT 1
102254: PLUS
102255: ST_TO_ADDR
// for i in tmp do
102256: LD_ADDR_VAR 0 1
102260: PUSH
102261: LD_VAR 0 2
102265: PUSH
102266: FOR_IN
102267: IFFALSE 102298
// if GetLives ( i ) < 1000 then
102269: LD_VAR 0 1
102273: PPUSH
102274: CALL_OW 256
102278: PUSH
102279: LD_INT 1000
102281: LESS
102282: IFFALSE 102296
// SetLives ( i , 1000 ) ;
102284: LD_VAR 0 1
102288: PPUSH
102289: LD_INT 1000
102291: PPUSH
102292: CALL_OW 234
102296: GO 102266
102298: POP
102299: POP
// until p > 20 ;
102300: LD_VAR 0 3
102304: PUSH
102305: LD_INT 20
102307: GREATER
102308: IFFALSE 102235
// end ;
102310: PPOPN 3
102312: END
// every 0 0$1 trigger StreamModeActive and sTime do
102313: LD_EXP 94
102317: PUSH
102318: LD_EXP 145
102322: AND
102323: IFFALSE 102358
102325: GO 102327
102327: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
102328: LD_INT 28
102330: PPUSH
102331: LD_OWVAR 2
102335: PPUSH
102336: LD_INT 2
102338: PPUSH
102339: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
102343: LD_INT 30
102345: PPUSH
102346: LD_OWVAR 2
102350: PPUSH
102351: LD_INT 2
102353: PPUSH
102354: CALL_OW 322
// end ;
102358: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
102359: LD_EXP 94
102363: PUSH
102364: LD_EXP 146
102368: AND
102369: IFFALSE 102490
102371: GO 102373
102373: DISABLE
102374: LD_INT 0
102376: PPUSH
102377: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
102378: LD_ADDR_VAR 0 2
102382: PUSH
102383: LD_INT 22
102385: PUSH
102386: LD_OWVAR 2
102390: PUSH
102391: EMPTY
102392: LIST
102393: LIST
102394: PUSH
102395: LD_INT 21
102397: PUSH
102398: LD_INT 1
102400: PUSH
102401: EMPTY
102402: LIST
102403: LIST
102404: PUSH
102405: LD_INT 3
102407: PUSH
102408: LD_INT 23
102410: PUSH
102411: LD_INT 0
102413: PUSH
102414: EMPTY
102415: LIST
102416: LIST
102417: PUSH
102418: EMPTY
102419: LIST
102420: LIST
102421: PUSH
102422: EMPTY
102423: LIST
102424: LIST
102425: LIST
102426: PPUSH
102427: CALL_OW 69
102431: ST_TO_ADDR
// if not tmp then
102432: LD_VAR 0 2
102436: NOT
102437: IFFALSE 102441
// exit ;
102439: GO 102490
// for i in tmp do
102441: LD_ADDR_VAR 0 1
102445: PUSH
102446: LD_VAR 0 2
102450: PUSH
102451: FOR_IN
102452: IFFALSE 102488
// begin if Crawls ( i ) then
102454: LD_VAR 0 1
102458: PPUSH
102459: CALL_OW 318
102463: IFFALSE 102474
// ComWalk ( i ) ;
102465: LD_VAR 0 1
102469: PPUSH
102470: CALL_OW 138
// SetClass ( i , 2 ) ;
102474: LD_VAR 0 1
102478: PPUSH
102479: LD_INT 2
102481: PPUSH
102482: CALL_OW 336
// end ;
102486: GO 102451
102488: POP
102489: POP
// end ;
102490: PPOPN 2
102492: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
102493: LD_EXP 94
102497: PUSH
102498: LD_EXP 147
102502: AND
102503: IFFALSE 102791
102505: GO 102507
102507: DISABLE
102508: LD_INT 0
102510: PPUSH
102511: PPUSH
102512: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
102513: LD_OWVAR 2
102517: PPUSH
102518: LD_INT 9
102520: PPUSH
102521: LD_INT 1
102523: PPUSH
102524: LD_INT 1
102526: PPUSH
102527: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
102531: LD_INT 9
102533: PPUSH
102534: LD_OWVAR 2
102538: PPUSH
102539: CALL_OW 343
// uc_side := 9 ;
102543: LD_ADDR_OWVAR 20
102547: PUSH
102548: LD_INT 9
102550: ST_TO_ADDR
// uc_nation := 2 ;
102551: LD_ADDR_OWVAR 21
102555: PUSH
102556: LD_INT 2
102558: ST_TO_ADDR
// hc_name := Dark Warrior ;
102559: LD_ADDR_OWVAR 26
102563: PUSH
102564: LD_STRING Dark Warrior
102566: ST_TO_ADDR
// hc_gallery :=  ;
102567: LD_ADDR_OWVAR 33
102571: PUSH
102572: LD_STRING 
102574: ST_TO_ADDR
// hc_noskilllimit := true ;
102575: LD_ADDR_OWVAR 76
102579: PUSH
102580: LD_INT 1
102582: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
102583: LD_ADDR_OWVAR 31
102587: PUSH
102588: LD_INT 30
102590: PUSH
102591: LD_INT 30
102593: PUSH
102594: LD_INT 30
102596: PUSH
102597: LD_INT 30
102599: PUSH
102600: EMPTY
102601: LIST
102602: LIST
102603: LIST
102604: LIST
102605: ST_TO_ADDR
// un := CreateHuman ;
102606: LD_ADDR_VAR 0 3
102610: PUSH
102611: CALL_OW 44
102615: ST_TO_ADDR
// hc_noskilllimit := false ;
102616: LD_ADDR_OWVAR 76
102620: PUSH
102621: LD_INT 0
102623: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
102624: LD_VAR 0 3
102628: PPUSH
102629: LD_INT 1
102631: PPUSH
102632: CALL_OW 51
// ToLua ( playRanger() ) ;
102636: LD_STRING playRanger()
102638: PPUSH
102639: CALL_OW 559
// p := 0 ;
102643: LD_ADDR_VAR 0 2
102647: PUSH
102648: LD_INT 0
102650: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
102651: LD_INT 35
102653: PPUSH
102654: CALL_OW 67
// p := p + 1 ;
102658: LD_ADDR_VAR 0 2
102662: PUSH
102663: LD_VAR 0 2
102667: PUSH
102668: LD_INT 1
102670: PLUS
102671: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
102672: LD_VAR 0 3
102676: PPUSH
102677: CALL_OW 256
102681: PUSH
102682: LD_INT 1000
102684: LESS
102685: IFFALSE 102699
// SetLives ( un , 1000 ) ;
102687: LD_VAR 0 3
102691: PPUSH
102692: LD_INT 1000
102694: PPUSH
102695: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
102699: LD_VAR 0 3
102703: PPUSH
102704: LD_INT 81
102706: PUSH
102707: LD_OWVAR 2
102711: PUSH
102712: EMPTY
102713: LIST
102714: LIST
102715: PUSH
102716: LD_INT 91
102718: PUSH
102719: LD_VAR 0 3
102723: PUSH
102724: LD_INT 30
102726: PUSH
102727: EMPTY
102728: LIST
102729: LIST
102730: LIST
102731: PUSH
102732: EMPTY
102733: LIST
102734: LIST
102735: PPUSH
102736: CALL_OW 69
102740: PPUSH
102741: LD_VAR 0 3
102745: PPUSH
102746: CALL_OW 74
102750: PPUSH
102751: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
102755: LD_VAR 0 2
102759: PUSH
102760: LD_INT 80
102762: GREATER
102763: PUSH
102764: LD_VAR 0 3
102768: PPUSH
102769: CALL_OW 301
102773: OR
102774: IFFALSE 102651
// if un then
102776: LD_VAR 0 3
102780: IFFALSE 102791
// RemoveUnit ( un ) ;
102782: LD_VAR 0 3
102786: PPUSH
102787: CALL_OW 64
// end ;
102791: PPOPN 3
102793: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
102794: LD_EXP 148
102798: IFFALSE 102914
102800: GO 102802
102802: DISABLE
102803: LD_INT 0
102805: PPUSH
102806: PPUSH
102807: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
102808: LD_ADDR_VAR 0 2
102812: PUSH
102813: LD_INT 81
102815: PUSH
102816: LD_OWVAR 2
102820: PUSH
102821: EMPTY
102822: LIST
102823: LIST
102824: PUSH
102825: LD_INT 21
102827: PUSH
102828: LD_INT 1
102830: PUSH
102831: EMPTY
102832: LIST
102833: LIST
102834: PUSH
102835: EMPTY
102836: LIST
102837: LIST
102838: PPUSH
102839: CALL_OW 69
102843: ST_TO_ADDR
// ToLua ( playComputer() ) ;
102844: LD_STRING playComputer()
102846: PPUSH
102847: CALL_OW 559
// if not tmp then
102851: LD_VAR 0 2
102855: NOT
102856: IFFALSE 102860
// exit ;
102858: GO 102914
// for i in tmp do
102860: LD_ADDR_VAR 0 1
102864: PUSH
102865: LD_VAR 0 2
102869: PUSH
102870: FOR_IN
102871: IFFALSE 102912
// for j := 1 to 4 do
102873: LD_ADDR_VAR 0 3
102877: PUSH
102878: DOUBLE
102879: LD_INT 1
102881: DEC
102882: ST_TO_ADDR
102883: LD_INT 4
102885: PUSH
102886: FOR_TO
102887: IFFALSE 102908
// SetSkill ( i , j , 10 ) ;
102889: LD_VAR 0 1
102893: PPUSH
102894: LD_VAR 0 3
102898: PPUSH
102899: LD_INT 10
102901: PPUSH
102902: CALL_OW 237
102906: GO 102886
102908: POP
102909: POP
102910: GO 102870
102912: POP
102913: POP
// end ;
102914: PPOPN 3
102916: END
// every 0 0$1 trigger s30 do var i , tmp ;
102917: LD_EXP 149
102921: IFFALSE 102990
102923: GO 102925
102925: DISABLE
102926: LD_INT 0
102928: PPUSH
102929: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
102930: LD_ADDR_VAR 0 2
102934: PUSH
102935: LD_INT 22
102937: PUSH
102938: LD_OWVAR 2
102942: PUSH
102943: EMPTY
102944: LIST
102945: LIST
102946: PPUSH
102947: CALL_OW 69
102951: ST_TO_ADDR
// if not tmp then
102952: LD_VAR 0 2
102956: NOT
102957: IFFALSE 102961
// exit ;
102959: GO 102990
// for i in tmp do
102961: LD_ADDR_VAR 0 1
102965: PUSH
102966: LD_VAR 0 2
102970: PUSH
102971: FOR_IN
102972: IFFALSE 102988
// SetLives ( i , 300 ) ;
102974: LD_VAR 0 1
102978: PPUSH
102979: LD_INT 300
102981: PPUSH
102982: CALL_OW 234
102986: GO 102971
102988: POP
102989: POP
// end ;
102990: PPOPN 2
102992: END
// every 0 0$1 trigger s60 do var i , tmp ;
102993: LD_EXP 150
102997: IFFALSE 103066
102999: GO 103001
103001: DISABLE
103002: LD_INT 0
103004: PPUSH
103005: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
103006: LD_ADDR_VAR 0 2
103010: PUSH
103011: LD_INT 22
103013: PUSH
103014: LD_OWVAR 2
103018: PUSH
103019: EMPTY
103020: LIST
103021: LIST
103022: PPUSH
103023: CALL_OW 69
103027: ST_TO_ADDR
// if not tmp then
103028: LD_VAR 0 2
103032: NOT
103033: IFFALSE 103037
// exit ;
103035: GO 103066
// for i in tmp do
103037: LD_ADDR_VAR 0 1
103041: PUSH
103042: LD_VAR 0 2
103046: PUSH
103047: FOR_IN
103048: IFFALSE 103064
// SetLives ( i , 600 ) ;
103050: LD_VAR 0 1
103054: PPUSH
103055: LD_INT 600
103057: PPUSH
103058: CALL_OW 234
103062: GO 103047
103064: POP
103065: POP
// end ;
103066: PPOPN 2
103068: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
103069: LD_INT 0
103071: PPUSH
// case cmd of 301 :
103072: LD_VAR 0 1
103076: PUSH
103077: LD_INT 301
103079: DOUBLE
103080: EQUAL
103081: IFTRUE 103085
103083: GO 103117
103085: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
103086: LD_VAR 0 6
103090: PPUSH
103091: LD_VAR 0 7
103095: PPUSH
103096: LD_VAR 0 8
103100: PPUSH
103101: LD_VAR 0 4
103105: PPUSH
103106: LD_VAR 0 5
103110: PPUSH
103111: CALL 104318 0 5
103115: GO 103238
103117: LD_INT 302
103119: DOUBLE
103120: EQUAL
103121: IFTRUE 103125
103123: GO 103162
103125: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
103126: LD_VAR 0 6
103130: PPUSH
103131: LD_VAR 0 7
103135: PPUSH
103136: LD_VAR 0 8
103140: PPUSH
103141: LD_VAR 0 9
103145: PPUSH
103146: LD_VAR 0 4
103150: PPUSH
103151: LD_VAR 0 5
103155: PPUSH
103156: CALL 104409 0 6
103160: GO 103238
103162: LD_INT 303
103164: DOUBLE
103165: EQUAL
103166: IFTRUE 103170
103168: GO 103207
103170: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
103171: LD_VAR 0 6
103175: PPUSH
103176: LD_VAR 0 7
103180: PPUSH
103181: LD_VAR 0 8
103185: PPUSH
103186: LD_VAR 0 9
103190: PPUSH
103191: LD_VAR 0 4
103195: PPUSH
103196: LD_VAR 0 5
103200: PPUSH
103201: CALL 103243 0 6
103205: GO 103238
103207: LD_INT 304
103209: DOUBLE
103210: EQUAL
103211: IFTRUE 103215
103213: GO 103237
103215: POP
// hHackTeleport ( unit , x , y ) ; end ;
103216: LD_VAR 0 2
103220: PPUSH
103221: LD_VAR 0 4
103225: PPUSH
103226: LD_VAR 0 5
103230: PPUSH
103231: CALL 105002 0 3
103235: GO 103238
103237: POP
// end ;
103238: LD_VAR 0 12
103242: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
103243: LD_INT 0
103245: PPUSH
103246: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
103247: LD_VAR 0 1
103251: PUSH
103252: LD_INT 1
103254: LESS
103255: PUSH
103256: LD_VAR 0 1
103260: PUSH
103261: LD_INT 3
103263: GREATER
103264: OR
103265: PUSH
103266: LD_VAR 0 5
103270: PPUSH
103271: LD_VAR 0 6
103275: PPUSH
103276: CALL_OW 428
103280: OR
103281: IFFALSE 103285
// exit ;
103283: GO 104005
// uc_side := your_side ;
103285: LD_ADDR_OWVAR 20
103289: PUSH
103290: LD_OWVAR 2
103294: ST_TO_ADDR
// uc_nation := nation ;
103295: LD_ADDR_OWVAR 21
103299: PUSH
103300: LD_VAR 0 1
103304: ST_TO_ADDR
// bc_level = 1 ;
103305: LD_ADDR_OWVAR 43
103309: PUSH
103310: LD_INT 1
103312: ST_TO_ADDR
// case btype of 1 :
103313: LD_VAR 0 2
103317: PUSH
103318: LD_INT 1
103320: DOUBLE
103321: EQUAL
103322: IFTRUE 103326
103324: GO 103337
103326: POP
// bc_type := b_depot ; 2 :
103327: LD_ADDR_OWVAR 42
103331: PUSH
103332: LD_INT 0
103334: ST_TO_ADDR
103335: GO 103949
103337: LD_INT 2
103339: DOUBLE
103340: EQUAL
103341: IFTRUE 103345
103343: GO 103356
103345: POP
// bc_type := b_warehouse ; 3 :
103346: LD_ADDR_OWVAR 42
103350: PUSH
103351: LD_INT 1
103353: ST_TO_ADDR
103354: GO 103949
103356: LD_INT 3
103358: DOUBLE
103359: EQUAL
103360: IFTRUE 103364
103362: GO 103375
103364: POP
// bc_type := b_lab ; 4 .. 9 :
103365: LD_ADDR_OWVAR 42
103369: PUSH
103370: LD_INT 6
103372: ST_TO_ADDR
103373: GO 103949
103375: LD_INT 4
103377: DOUBLE
103378: GREATEREQUAL
103379: IFFALSE 103387
103381: LD_INT 9
103383: DOUBLE
103384: LESSEQUAL
103385: IFTRUE 103389
103387: GO 103441
103389: POP
// begin bc_type := b_lab_half ;
103390: LD_ADDR_OWVAR 42
103394: PUSH
103395: LD_INT 7
103397: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
103398: LD_ADDR_OWVAR 44
103402: PUSH
103403: LD_INT 10
103405: PUSH
103406: LD_INT 11
103408: PUSH
103409: LD_INT 12
103411: PUSH
103412: LD_INT 15
103414: PUSH
103415: LD_INT 14
103417: PUSH
103418: LD_INT 13
103420: PUSH
103421: EMPTY
103422: LIST
103423: LIST
103424: LIST
103425: LIST
103426: LIST
103427: LIST
103428: PUSH
103429: LD_VAR 0 2
103433: PUSH
103434: LD_INT 3
103436: MINUS
103437: ARRAY
103438: ST_TO_ADDR
// end ; 10 .. 13 :
103439: GO 103949
103441: LD_INT 10
103443: DOUBLE
103444: GREATEREQUAL
103445: IFFALSE 103453
103447: LD_INT 13
103449: DOUBLE
103450: LESSEQUAL
103451: IFTRUE 103455
103453: GO 103532
103455: POP
// begin bc_type := b_lab_full ;
103456: LD_ADDR_OWVAR 42
103460: PUSH
103461: LD_INT 8
103463: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
103464: LD_ADDR_OWVAR 44
103468: PUSH
103469: LD_INT 10
103471: PUSH
103472: LD_INT 12
103474: PUSH
103475: LD_INT 14
103477: PUSH
103478: LD_INT 13
103480: PUSH
103481: EMPTY
103482: LIST
103483: LIST
103484: LIST
103485: LIST
103486: PUSH
103487: LD_VAR 0 2
103491: PUSH
103492: LD_INT 9
103494: MINUS
103495: ARRAY
103496: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
103497: LD_ADDR_OWVAR 45
103501: PUSH
103502: LD_INT 11
103504: PUSH
103505: LD_INT 15
103507: PUSH
103508: LD_INT 12
103510: PUSH
103511: LD_INT 15
103513: PUSH
103514: EMPTY
103515: LIST
103516: LIST
103517: LIST
103518: LIST
103519: PUSH
103520: LD_VAR 0 2
103524: PUSH
103525: LD_INT 9
103527: MINUS
103528: ARRAY
103529: ST_TO_ADDR
// end ; 14 :
103530: GO 103949
103532: LD_INT 14
103534: DOUBLE
103535: EQUAL
103536: IFTRUE 103540
103538: GO 103551
103540: POP
// bc_type := b_workshop ; 15 :
103541: LD_ADDR_OWVAR 42
103545: PUSH
103546: LD_INT 2
103548: ST_TO_ADDR
103549: GO 103949
103551: LD_INT 15
103553: DOUBLE
103554: EQUAL
103555: IFTRUE 103559
103557: GO 103570
103559: POP
// bc_type := b_factory ; 16 :
103560: LD_ADDR_OWVAR 42
103564: PUSH
103565: LD_INT 3
103567: ST_TO_ADDR
103568: GO 103949
103570: LD_INT 16
103572: DOUBLE
103573: EQUAL
103574: IFTRUE 103578
103576: GO 103589
103578: POP
// bc_type := b_ext_gun ; 17 :
103579: LD_ADDR_OWVAR 42
103583: PUSH
103584: LD_INT 17
103586: ST_TO_ADDR
103587: GO 103949
103589: LD_INT 17
103591: DOUBLE
103592: EQUAL
103593: IFTRUE 103597
103595: GO 103625
103597: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
103598: LD_ADDR_OWVAR 42
103602: PUSH
103603: LD_INT 19
103605: PUSH
103606: LD_INT 23
103608: PUSH
103609: LD_INT 19
103611: PUSH
103612: EMPTY
103613: LIST
103614: LIST
103615: LIST
103616: PUSH
103617: LD_VAR 0 1
103621: ARRAY
103622: ST_TO_ADDR
103623: GO 103949
103625: LD_INT 18
103627: DOUBLE
103628: EQUAL
103629: IFTRUE 103633
103631: GO 103644
103633: POP
// bc_type := b_ext_radar ; 19 :
103634: LD_ADDR_OWVAR 42
103638: PUSH
103639: LD_INT 20
103641: ST_TO_ADDR
103642: GO 103949
103644: LD_INT 19
103646: DOUBLE
103647: EQUAL
103648: IFTRUE 103652
103650: GO 103663
103652: POP
// bc_type := b_ext_radio ; 20 :
103653: LD_ADDR_OWVAR 42
103657: PUSH
103658: LD_INT 22
103660: ST_TO_ADDR
103661: GO 103949
103663: LD_INT 20
103665: DOUBLE
103666: EQUAL
103667: IFTRUE 103671
103669: GO 103682
103671: POP
// bc_type := b_ext_siberium ; 21 :
103672: LD_ADDR_OWVAR 42
103676: PUSH
103677: LD_INT 21
103679: ST_TO_ADDR
103680: GO 103949
103682: LD_INT 21
103684: DOUBLE
103685: EQUAL
103686: IFTRUE 103690
103688: GO 103701
103690: POP
// bc_type := b_ext_computer ; 22 :
103691: LD_ADDR_OWVAR 42
103695: PUSH
103696: LD_INT 24
103698: ST_TO_ADDR
103699: GO 103949
103701: LD_INT 22
103703: DOUBLE
103704: EQUAL
103705: IFTRUE 103709
103707: GO 103720
103709: POP
// bc_type := b_ext_track ; 23 :
103710: LD_ADDR_OWVAR 42
103714: PUSH
103715: LD_INT 16
103717: ST_TO_ADDR
103718: GO 103949
103720: LD_INT 23
103722: DOUBLE
103723: EQUAL
103724: IFTRUE 103728
103726: GO 103739
103728: POP
// bc_type := b_ext_laser ; 24 :
103729: LD_ADDR_OWVAR 42
103733: PUSH
103734: LD_INT 25
103736: ST_TO_ADDR
103737: GO 103949
103739: LD_INT 24
103741: DOUBLE
103742: EQUAL
103743: IFTRUE 103747
103745: GO 103758
103747: POP
// bc_type := b_control_tower ; 25 :
103748: LD_ADDR_OWVAR 42
103752: PUSH
103753: LD_INT 36
103755: ST_TO_ADDR
103756: GO 103949
103758: LD_INT 25
103760: DOUBLE
103761: EQUAL
103762: IFTRUE 103766
103764: GO 103777
103766: POP
// bc_type := b_breastwork ; 26 :
103767: LD_ADDR_OWVAR 42
103771: PUSH
103772: LD_INT 31
103774: ST_TO_ADDR
103775: GO 103949
103777: LD_INT 26
103779: DOUBLE
103780: EQUAL
103781: IFTRUE 103785
103783: GO 103796
103785: POP
// bc_type := b_bunker ; 27 :
103786: LD_ADDR_OWVAR 42
103790: PUSH
103791: LD_INT 32
103793: ST_TO_ADDR
103794: GO 103949
103796: LD_INT 27
103798: DOUBLE
103799: EQUAL
103800: IFTRUE 103804
103802: GO 103815
103804: POP
// bc_type := b_turret ; 28 :
103805: LD_ADDR_OWVAR 42
103809: PUSH
103810: LD_INT 33
103812: ST_TO_ADDR
103813: GO 103949
103815: LD_INT 28
103817: DOUBLE
103818: EQUAL
103819: IFTRUE 103823
103821: GO 103834
103823: POP
// bc_type := b_armoury ; 29 :
103824: LD_ADDR_OWVAR 42
103828: PUSH
103829: LD_INT 4
103831: ST_TO_ADDR
103832: GO 103949
103834: LD_INT 29
103836: DOUBLE
103837: EQUAL
103838: IFTRUE 103842
103840: GO 103853
103842: POP
// bc_type := b_barracks ; 30 :
103843: LD_ADDR_OWVAR 42
103847: PUSH
103848: LD_INT 5
103850: ST_TO_ADDR
103851: GO 103949
103853: LD_INT 30
103855: DOUBLE
103856: EQUAL
103857: IFTRUE 103861
103859: GO 103872
103861: POP
// bc_type := b_solar_power ; 31 :
103862: LD_ADDR_OWVAR 42
103866: PUSH
103867: LD_INT 27
103869: ST_TO_ADDR
103870: GO 103949
103872: LD_INT 31
103874: DOUBLE
103875: EQUAL
103876: IFTRUE 103880
103878: GO 103891
103880: POP
// bc_type := b_oil_power ; 32 :
103881: LD_ADDR_OWVAR 42
103885: PUSH
103886: LD_INT 26
103888: ST_TO_ADDR
103889: GO 103949
103891: LD_INT 32
103893: DOUBLE
103894: EQUAL
103895: IFTRUE 103899
103897: GO 103910
103899: POP
// bc_type := b_siberite_power ; 33 :
103900: LD_ADDR_OWVAR 42
103904: PUSH
103905: LD_INT 28
103907: ST_TO_ADDR
103908: GO 103949
103910: LD_INT 33
103912: DOUBLE
103913: EQUAL
103914: IFTRUE 103918
103916: GO 103929
103918: POP
// bc_type := b_oil_mine ; 34 :
103919: LD_ADDR_OWVAR 42
103923: PUSH
103924: LD_INT 29
103926: ST_TO_ADDR
103927: GO 103949
103929: LD_INT 34
103931: DOUBLE
103932: EQUAL
103933: IFTRUE 103937
103935: GO 103948
103937: POP
// bc_type := b_siberite_mine ; end ;
103938: LD_ADDR_OWVAR 42
103942: PUSH
103943: LD_INT 30
103945: ST_TO_ADDR
103946: GO 103949
103948: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
103949: LD_ADDR_VAR 0 8
103953: PUSH
103954: LD_VAR 0 5
103958: PPUSH
103959: LD_VAR 0 6
103963: PPUSH
103964: LD_VAR 0 3
103968: PPUSH
103969: CALL_OW 47
103973: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
103974: LD_OWVAR 42
103978: PUSH
103979: LD_INT 32
103981: PUSH
103982: LD_INT 33
103984: PUSH
103985: EMPTY
103986: LIST
103987: LIST
103988: IN
103989: IFFALSE 104005
// PlaceWeaponTurret ( b , weapon ) ;
103991: LD_VAR 0 8
103995: PPUSH
103996: LD_VAR 0 4
104000: PPUSH
104001: CALL_OW 431
// end ;
104005: LD_VAR 0 7
104009: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
104010: LD_INT 0
104012: PPUSH
104013: PPUSH
104014: PPUSH
104015: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
104016: LD_ADDR_VAR 0 4
104020: PUSH
104021: LD_INT 22
104023: PUSH
104024: LD_OWVAR 2
104028: PUSH
104029: EMPTY
104030: LIST
104031: LIST
104032: PUSH
104033: LD_INT 2
104035: PUSH
104036: LD_INT 30
104038: PUSH
104039: LD_INT 0
104041: PUSH
104042: EMPTY
104043: LIST
104044: LIST
104045: PUSH
104046: LD_INT 30
104048: PUSH
104049: LD_INT 1
104051: PUSH
104052: EMPTY
104053: LIST
104054: LIST
104055: PUSH
104056: EMPTY
104057: LIST
104058: LIST
104059: LIST
104060: PUSH
104061: EMPTY
104062: LIST
104063: LIST
104064: PPUSH
104065: CALL_OW 69
104069: ST_TO_ADDR
// if not tmp then
104070: LD_VAR 0 4
104074: NOT
104075: IFFALSE 104079
// exit ;
104077: GO 104138
// for i in tmp do
104079: LD_ADDR_VAR 0 2
104083: PUSH
104084: LD_VAR 0 4
104088: PUSH
104089: FOR_IN
104090: IFFALSE 104136
// for j = 1 to 3 do
104092: LD_ADDR_VAR 0 3
104096: PUSH
104097: DOUBLE
104098: LD_INT 1
104100: DEC
104101: ST_TO_ADDR
104102: LD_INT 3
104104: PUSH
104105: FOR_TO
104106: IFFALSE 104132
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
104108: LD_VAR 0 2
104112: PPUSH
104113: CALL_OW 274
104117: PPUSH
104118: LD_VAR 0 3
104122: PPUSH
104123: LD_INT 99999
104125: PPUSH
104126: CALL_OW 277
104130: GO 104105
104132: POP
104133: POP
104134: GO 104089
104136: POP
104137: POP
// end ;
104138: LD_VAR 0 1
104142: RET
// export function hHackSetLevel10 ; var i , j ; begin
104143: LD_INT 0
104145: PPUSH
104146: PPUSH
104147: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
104148: LD_ADDR_VAR 0 2
104152: PUSH
104153: LD_INT 21
104155: PUSH
104156: LD_INT 1
104158: PUSH
104159: EMPTY
104160: LIST
104161: LIST
104162: PPUSH
104163: CALL_OW 69
104167: PUSH
104168: FOR_IN
104169: IFFALSE 104221
// if IsSelected ( i ) then
104171: LD_VAR 0 2
104175: PPUSH
104176: CALL_OW 306
104180: IFFALSE 104219
// begin for j := 1 to 4 do
104182: LD_ADDR_VAR 0 3
104186: PUSH
104187: DOUBLE
104188: LD_INT 1
104190: DEC
104191: ST_TO_ADDR
104192: LD_INT 4
104194: PUSH
104195: FOR_TO
104196: IFFALSE 104217
// SetSkill ( i , j , 10 ) ;
104198: LD_VAR 0 2
104202: PPUSH
104203: LD_VAR 0 3
104207: PPUSH
104208: LD_INT 10
104210: PPUSH
104211: CALL_OW 237
104215: GO 104195
104217: POP
104218: POP
// end ;
104219: GO 104168
104221: POP
104222: POP
// end ;
104223: LD_VAR 0 1
104227: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
104228: LD_INT 0
104230: PPUSH
104231: PPUSH
104232: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
104233: LD_ADDR_VAR 0 2
104237: PUSH
104238: LD_INT 22
104240: PUSH
104241: LD_OWVAR 2
104245: PUSH
104246: EMPTY
104247: LIST
104248: LIST
104249: PUSH
104250: LD_INT 21
104252: PUSH
104253: LD_INT 1
104255: PUSH
104256: EMPTY
104257: LIST
104258: LIST
104259: PUSH
104260: EMPTY
104261: LIST
104262: LIST
104263: PPUSH
104264: CALL_OW 69
104268: PUSH
104269: FOR_IN
104270: IFFALSE 104311
// begin for j := 1 to 4 do
104272: LD_ADDR_VAR 0 3
104276: PUSH
104277: DOUBLE
104278: LD_INT 1
104280: DEC
104281: ST_TO_ADDR
104282: LD_INT 4
104284: PUSH
104285: FOR_TO
104286: IFFALSE 104307
// SetSkill ( i , j , 10 ) ;
104288: LD_VAR 0 2
104292: PPUSH
104293: LD_VAR 0 3
104297: PPUSH
104298: LD_INT 10
104300: PPUSH
104301: CALL_OW 237
104305: GO 104285
104307: POP
104308: POP
// end ;
104309: GO 104269
104311: POP
104312: POP
// end ;
104313: LD_VAR 0 1
104317: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
104318: LD_INT 0
104320: PPUSH
// uc_side := your_side ;
104321: LD_ADDR_OWVAR 20
104325: PUSH
104326: LD_OWVAR 2
104330: ST_TO_ADDR
// uc_nation := nation ;
104331: LD_ADDR_OWVAR 21
104335: PUSH
104336: LD_VAR 0 1
104340: ST_TO_ADDR
// InitHc ;
104341: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
104345: LD_INT 0
104347: PPUSH
104348: LD_VAR 0 2
104352: PPUSH
104353: LD_VAR 0 3
104357: PPUSH
104358: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
104362: LD_VAR 0 4
104366: PPUSH
104367: LD_VAR 0 5
104371: PPUSH
104372: CALL_OW 428
104376: PUSH
104377: LD_INT 0
104379: EQUAL
104380: IFFALSE 104404
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
104382: CALL_OW 44
104386: PPUSH
104387: LD_VAR 0 4
104391: PPUSH
104392: LD_VAR 0 5
104396: PPUSH
104397: LD_INT 1
104399: PPUSH
104400: CALL_OW 48
// end ;
104404: LD_VAR 0 6
104408: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
104409: LD_INT 0
104411: PPUSH
104412: PPUSH
// uc_side := your_side ;
104413: LD_ADDR_OWVAR 20
104417: PUSH
104418: LD_OWVAR 2
104422: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
104423: LD_VAR 0 1
104427: PUSH
104428: LD_INT 1
104430: PUSH
104431: LD_INT 2
104433: PUSH
104434: LD_INT 3
104436: PUSH
104437: LD_INT 4
104439: PUSH
104440: LD_INT 5
104442: PUSH
104443: EMPTY
104444: LIST
104445: LIST
104446: LIST
104447: LIST
104448: LIST
104449: IN
104450: IFFALSE 104462
// uc_nation := nation_american else
104452: LD_ADDR_OWVAR 21
104456: PUSH
104457: LD_INT 1
104459: ST_TO_ADDR
104460: GO 104505
// if chassis in [ 11 , 12 , 13 , 14 ] then
104462: LD_VAR 0 1
104466: PUSH
104467: LD_INT 11
104469: PUSH
104470: LD_INT 12
104472: PUSH
104473: LD_INT 13
104475: PUSH
104476: LD_INT 14
104478: PUSH
104479: EMPTY
104480: LIST
104481: LIST
104482: LIST
104483: LIST
104484: IN
104485: IFFALSE 104497
// uc_nation := nation_arabian else
104487: LD_ADDR_OWVAR 21
104491: PUSH
104492: LD_INT 2
104494: ST_TO_ADDR
104495: GO 104505
// uc_nation := nation_russian ;
104497: LD_ADDR_OWVAR 21
104501: PUSH
104502: LD_INT 3
104504: ST_TO_ADDR
// vc_chassis := chassis ;
104505: LD_ADDR_OWVAR 37
104509: PUSH
104510: LD_VAR 0 1
104514: ST_TO_ADDR
// vc_engine := engine ;
104515: LD_ADDR_OWVAR 39
104519: PUSH
104520: LD_VAR 0 2
104524: ST_TO_ADDR
// vc_control := control ;
104525: LD_ADDR_OWVAR 38
104529: PUSH
104530: LD_VAR 0 3
104534: ST_TO_ADDR
// vc_weapon := weapon ;
104535: LD_ADDR_OWVAR 40
104539: PUSH
104540: LD_VAR 0 4
104544: ST_TO_ADDR
// un := CreateVehicle ;
104545: LD_ADDR_VAR 0 8
104549: PUSH
104550: CALL_OW 45
104554: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
104555: LD_VAR 0 8
104559: PPUSH
104560: LD_INT 0
104562: PPUSH
104563: LD_INT 5
104565: PPUSH
104566: CALL_OW 12
104570: PPUSH
104571: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
104575: LD_VAR 0 8
104579: PPUSH
104580: LD_VAR 0 5
104584: PPUSH
104585: LD_VAR 0 6
104589: PPUSH
104590: LD_INT 1
104592: PPUSH
104593: CALL_OW 48
// end ;
104597: LD_VAR 0 7
104601: RET
// export hInvincible ; every 1 do
104602: GO 104604
104604: DISABLE
// hInvincible := [ ] ;
104605: LD_ADDR_EXP 151
104609: PUSH
104610: EMPTY
104611: ST_TO_ADDR
104612: END
// every 10 do var i ;
104613: GO 104615
104615: DISABLE
104616: LD_INT 0
104618: PPUSH
// begin enable ;
104619: ENABLE
// if not hInvincible then
104620: LD_EXP 151
104624: NOT
104625: IFFALSE 104629
// exit ;
104627: GO 104673
// for i in hInvincible do
104629: LD_ADDR_VAR 0 1
104633: PUSH
104634: LD_EXP 151
104638: PUSH
104639: FOR_IN
104640: IFFALSE 104671
// if GetLives ( i ) < 1000 then
104642: LD_VAR 0 1
104646: PPUSH
104647: CALL_OW 256
104651: PUSH
104652: LD_INT 1000
104654: LESS
104655: IFFALSE 104669
// SetLives ( i , 1000 ) ;
104657: LD_VAR 0 1
104661: PPUSH
104662: LD_INT 1000
104664: PPUSH
104665: CALL_OW 234
104669: GO 104639
104671: POP
104672: POP
// end ;
104673: PPOPN 1
104675: END
// export function hHackInvincible ; var i ; begin
104676: LD_INT 0
104678: PPUSH
104679: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
104680: LD_ADDR_VAR 0 2
104684: PUSH
104685: LD_INT 2
104687: PUSH
104688: LD_INT 21
104690: PUSH
104691: LD_INT 1
104693: PUSH
104694: EMPTY
104695: LIST
104696: LIST
104697: PUSH
104698: LD_INT 21
104700: PUSH
104701: LD_INT 2
104703: PUSH
104704: EMPTY
104705: LIST
104706: LIST
104707: PUSH
104708: EMPTY
104709: LIST
104710: LIST
104711: LIST
104712: PPUSH
104713: CALL_OW 69
104717: PUSH
104718: FOR_IN
104719: IFFALSE 104780
// if IsSelected ( i ) then
104721: LD_VAR 0 2
104725: PPUSH
104726: CALL_OW 306
104730: IFFALSE 104778
// begin if i in hInvincible then
104732: LD_VAR 0 2
104736: PUSH
104737: LD_EXP 151
104741: IN
104742: IFFALSE 104762
// hInvincible := hInvincible diff i else
104744: LD_ADDR_EXP 151
104748: PUSH
104749: LD_EXP 151
104753: PUSH
104754: LD_VAR 0 2
104758: DIFF
104759: ST_TO_ADDR
104760: GO 104778
// hInvincible := hInvincible union i ;
104762: LD_ADDR_EXP 151
104766: PUSH
104767: LD_EXP 151
104771: PUSH
104772: LD_VAR 0 2
104776: UNION
104777: ST_TO_ADDR
// end ;
104778: GO 104718
104780: POP
104781: POP
// end ;
104782: LD_VAR 0 1
104786: RET
// export function hHackInvisible ; var i , j ; begin
104787: LD_INT 0
104789: PPUSH
104790: PPUSH
104791: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
104792: LD_ADDR_VAR 0 2
104796: PUSH
104797: LD_INT 21
104799: PUSH
104800: LD_INT 1
104802: PUSH
104803: EMPTY
104804: LIST
104805: LIST
104806: PPUSH
104807: CALL_OW 69
104811: PUSH
104812: FOR_IN
104813: IFFALSE 104837
// if IsSelected ( i ) then
104815: LD_VAR 0 2
104819: PPUSH
104820: CALL_OW 306
104824: IFFALSE 104835
// ComForceInvisible ( i ) ;
104826: LD_VAR 0 2
104830: PPUSH
104831: CALL_OW 496
104835: GO 104812
104837: POP
104838: POP
// end ;
104839: LD_VAR 0 1
104843: RET
// export function hHackChangeYourSide ; begin
104844: LD_INT 0
104846: PPUSH
// if your_side = 8 then
104847: LD_OWVAR 2
104851: PUSH
104852: LD_INT 8
104854: EQUAL
104855: IFFALSE 104867
// your_side := 0 else
104857: LD_ADDR_OWVAR 2
104861: PUSH
104862: LD_INT 0
104864: ST_TO_ADDR
104865: GO 104881
// your_side := your_side + 1 ;
104867: LD_ADDR_OWVAR 2
104871: PUSH
104872: LD_OWVAR 2
104876: PUSH
104877: LD_INT 1
104879: PLUS
104880: ST_TO_ADDR
// end ;
104881: LD_VAR 0 1
104885: RET
// export function hHackChangeUnitSide ; var i , j ; begin
104886: LD_INT 0
104888: PPUSH
104889: PPUSH
104890: PPUSH
// for i in all_units do
104891: LD_ADDR_VAR 0 2
104895: PUSH
104896: LD_OWVAR 3
104900: PUSH
104901: FOR_IN
104902: IFFALSE 104980
// if IsSelected ( i ) then
104904: LD_VAR 0 2
104908: PPUSH
104909: CALL_OW 306
104913: IFFALSE 104978
// begin j := GetSide ( i ) ;
104915: LD_ADDR_VAR 0 3
104919: PUSH
104920: LD_VAR 0 2
104924: PPUSH
104925: CALL_OW 255
104929: ST_TO_ADDR
// if j = 8 then
104930: LD_VAR 0 3
104934: PUSH
104935: LD_INT 8
104937: EQUAL
104938: IFFALSE 104950
// j := 0 else
104940: LD_ADDR_VAR 0 3
104944: PUSH
104945: LD_INT 0
104947: ST_TO_ADDR
104948: GO 104964
// j := j + 1 ;
104950: LD_ADDR_VAR 0 3
104954: PUSH
104955: LD_VAR 0 3
104959: PUSH
104960: LD_INT 1
104962: PLUS
104963: ST_TO_ADDR
// SetSide ( i , j ) ;
104964: LD_VAR 0 2
104968: PPUSH
104969: LD_VAR 0 3
104973: PPUSH
104974: CALL_OW 235
// end ;
104978: GO 104901
104980: POP
104981: POP
// end ;
104982: LD_VAR 0 1
104986: RET
// export function hHackFog ; begin
104987: LD_INT 0
104989: PPUSH
// FogOff ( true ) ;
104990: LD_INT 1
104992: PPUSH
104993: CALL_OW 344
// end ;
104997: LD_VAR 0 1
105001: RET
// export function hHackTeleport ( unit , x , y ) ; begin
105002: LD_INT 0
105004: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
105005: LD_VAR 0 1
105009: PPUSH
105010: LD_VAR 0 2
105014: PPUSH
105015: LD_VAR 0 3
105019: PPUSH
105020: LD_INT 1
105022: PPUSH
105023: LD_INT 1
105025: PPUSH
105026: CALL_OW 483
// CenterOnXY ( x , y ) ;
105030: LD_VAR 0 2
105034: PPUSH
105035: LD_VAR 0 3
105039: PPUSH
105040: CALL_OW 84
// end ; end_of_file
105044: LD_VAR 0 4
105048: RET
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
105049: LD_INT 0
105051: PPUSH
105052: PPUSH
105053: PPUSH
105054: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
105055: LD_VAR 0 1
105059: PPUSH
105060: CALL_OW 264
105064: PUSH
105065: LD_EXP 33
105069: EQUAL
105070: IFFALSE 105142
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
105072: LD_INT 68
105074: PPUSH
105075: LD_VAR 0 1
105079: PPUSH
105080: CALL_OW 255
105084: PPUSH
105085: CALL_OW 321
105089: PUSH
105090: LD_INT 2
105092: EQUAL
105093: IFFALSE 105105
// eff := 70 else
105095: LD_ADDR_VAR 0 4
105099: PUSH
105100: LD_INT 70
105102: ST_TO_ADDR
105103: GO 105113
// eff := 30 ;
105105: LD_ADDR_VAR 0 4
105109: PUSH
105110: LD_INT 30
105112: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
105113: LD_VAR 0 1
105117: PPUSH
105118: CALL_OW 250
105122: PPUSH
105123: LD_VAR 0 1
105127: PPUSH
105128: CALL_OW 251
105132: PPUSH
105133: LD_VAR 0 4
105137: PPUSH
105138: CALL_OW 495
// end ; end ;
105142: LD_VAR 0 2
105146: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
105147: LD_INT 0
105149: PPUSH
// end ;
105150: LD_VAR 0 4
105154: RET
// export function SOS_Command ( cmd ) ; begin
105155: LD_INT 0
105157: PPUSH
// end ;
105158: LD_VAR 0 2
105162: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
105163: LD_INT 0
105165: PPUSH
// end ;
105166: LD_VAR 0 6
105170: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
105171: LD_INT 0
105173: PPUSH
105174: PPUSH
// if not vehicle or not factory then
105175: LD_VAR 0 1
105179: NOT
105180: PUSH
105181: LD_VAR 0 2
105185: NOT
105186: OR
105187: IFFALSE 105191
// exit ;
105189: GO 105422
// if factoryWaypoints >= factory then
105191: LD_EXP 152
105195: PUSH
105196: LD_VAR 0 2
105200: GREATEREQUAL
105201: IFFALSE 105422
// if factoryWaypoints [ factory ] then
105203: LD_EXP 152
105207: PUSH
105208: LD_VAR 0 2
105212: ARRAY
105213: IFFALSE 105422
// begin if GetControl ( vehicle ) = control_manual then
105215: LD_VAR 0 1
105219: PPUSH
105220: CALL_OW 263
105224: PUSH
105225: LD_INT 1
105227: EQUAL
105228: IFFALSE 105309
// begin driver := IsDrivenBy ( vehicle ) ;
105230: LD_ADDR_VAR 0 4
105234: PUSH
105235: LD_VAR 0 1
105239: PPUSH
105240: CALL_OW 311
105244: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
105245: LD_VAR 0 4
105249: PPUSH
105250: LD_EXP 152
105254: PUSH
105255: LD_VAR 0 2
105259: ARRAY
105260: PUSH
105261: LD_INT 3
105263: ARRAY
105264: PPUSH
105265: LD_EXP 152
105269: PUSH
105270: LD_VAR 0 2
105274: ARRAY
105275: PUSH
105276: LD_INT 4
105278: ARRAY
105279: PPUSH
105280: CALL_OW 171
// AddComExitVehicle ( driver ) ;
105284: LD_VAR 0 4
105288: PPUSH
105289: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
105293: LD_VAR 0 4
105297: PPUSH
105298: LD_VAR 0 2
105302: PPUSH
105303: CALL_OW 180
// end else
105307: GO 105422
// if GetControl ( vehicle ) = control_remote then
105309: LD_VAR 0 1
105313: PPUSH
105314: CALL_OW 263
105318: PUSH
105319: LD_INT 2
105321: EQUAL
105322: IFFALSE 105383
// begin wait ( 0 0$2 ) ;
105324: LD_INT 70
105326: PPUSH
105327: CALL_OW 67
// if Connect ( vehicle ) then
105331: LD_VAR 0 1
105335: PPUSH
105336: CALL 27843 0 1
105340: IFFALSE 105381
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
105342: LD_VAR 0 1
105346: PPUSH
105347: LD_EXP 152
105351: PUSH
105352: LD_VAR 0 2
105356: ARRAY
105357: PUSH
105358: LD_INT 3
105360: ARRAY
105361: PPUSH
105362: LD_EXP 152
105366: PUSH
105367: LD_VAR 0 2
105371: ARRAY
105372: PUSH
105373: LD_INT 4
105375: ARRAY
105376: PPUSH
105377: CALL_OW 171
// end else
105381: GO 105422
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
105383: LD_VAR 0 1
105387: PPUSH
105388: LD_EXP 152
105392: PUSH
105393: LD_VAR 0 2
105397: ARRAY
105398: PUSH
105399: LD_INT 3
105401: ARRAY
105402: PPUSH
105403: LD_EXP 152
105407: PUSH
105408: LD_VAR 0 2
105412: ARRAY
105413: PUSH
105414: LD_INT 4
105416: ARRAY
105417: PPUSH
105418: CALL_OW 171
// end ; end ;
105422: LD_VAR 0 3
105426: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
105427: LD_INT 0
105429: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
105430: LD_VAR 0 1
105434: PUSH
105435: LD_INT 250
105437: EQUAL
105438: PUSH
105439: LD_VAR 0 2
105443: PPUSH
105444: CALL_OW 264
105448: PUSH
105449: LD_EXP 36
105453: EQUAL
105454: AND
105455: IFFALSE 105476
// MinerPlaceMine ( unit , x , y ) ;
105457: LD_VAR 0 2
105461: PPUSH
105462: LD_VAR 0 4
105466: PPUSH
105467: LD_VAR 0 5
105471: PPUSH
105472: CALL 108204 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
105476: LD_VAR 0 1
105480: PUSH
105481: LD_INT 251
105483: EQUAL
105484: PUSH
105485: LD_VAR 0 2
105489: PPUSH
105490: CALL_OW 264
105494: PUSH
105495: LD_EXP 36
105499: EQUAL
105500: AND
105501: IFFALSE 105522
// MinerDetonateMine ( unit , x , y ) ;
105503: LD_VAR 0 2
105507: PPUSH
105508: LD_VAR 0 4
105512: PPUSH
105513: LD_VAR 0 5
105517: PPUSH
105518: CALL 108481 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
105522: LD_VAR 0 1
105526: PUSH
105527: LD_INT 252
105529: EQUAL
105530: PUSH
105531: LD_VAR 0 2
105535: PPUSH
105536: CALL_OW 264
105540: PUSH
105541: LD_EXP 36
105545: EQUAL
105546: AND
105547: IFFALSE 105568
// MinerCreateMinefield ( unit , x , y ) ;
105549: LD_VAR 0 2
105553: PPUSH
105554: LD_VAR 0 4
105558: PPUSH
105559: LD_VAR 0 5
105563: PPUSH
105564: CALL 108898 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
105568: LD_VAR 0 1
105572: PUSH
105573: LD_INT 253
105575: EQUAL
105576: PUSH
105577: LD_VAR 0 2
105581: PPUSH
105582: CALL_OW 257
105586: PUSH
105587: LD_INT 5
105589: EQUAL
105590: AND
105591: IFFALSE 105612
// ComBinocular ( unit , x , y ) ;
105593: LD_VAR 0 2
105597: PPUSH
105598: LD_VAR 0 4
105602: PPUSH
105603: LD_VAR 0 5
105607: PPUSH
105608: CALL 109269 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
105612: LD_VAR 0 1
105616: PUSH
105617: LD_INT 254
105619: EQUAL
105620: PUSH
105621: LD_VAR 0 2
105625: PPUSH
105626: CALL_OW 264
105630: PUSH
105631: LD_EXP 31
105635: EQUAL
105636: AND
105637: PUSH
105638: LD_VAR 0 3
105642: PPUSH
105643: CALL_OW 263
105647: PUSH
105648: LD_INT 3
105650: EQUAL
105651: AND
105652: IFFALSE 105668
// HackDestroyVehicle ( unit , selectedUnit ) ;
105654: LD_VAR 0 2
105658: PPUSH
105659: LD_VAR 0 3
105663: PPUSH
105664: CALL 107564 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
105668: LD_VAR 0 1
105672: PUSH
105673: LD_INT 255
105675: EQUAL
105676: PUSH
105677: LD_VAR 0 2
105681: PPUSH
105682: CALL_OW 264
105686: PUSH
105687: LD_INT 14
105689: PUSH
105690: LD_INT 53
105692: PUSH
105693: EMPTY
105694: LIST
105695: LIST
105696: IN
105697: AND
105698: PUSH
105699: LD_VAR 0 4
105703: PPUSH
105704: LD_VAR 0 5
105708: PPUSH
105709: CALL_OW 488
105713: AND
105714: IFFALSE 105738
// CutTreeXYR ( unit , x , y , 12 ) ;
105716: LD_VAR 0 2
105720: PPUSH
105721: LD_VAR 0 4
105725: PPUSH
105726: LD_VAR 0 5
105730: PPUSH
105731: LD_INT 12
105733: PPUSH
105734: CALL 106130 0 4
// if cmd = 256 then
105738: LD_VAR 0 1
105742: PUSH
105743: LD_INT 256
105745: EQUAL
105746: IFFALSE 105767
// SetFactoryWaypoint ( unit , x , y ) ;
105748: LD_VAR 0 2
105752: PPUSH
105753: LD_VAR 0 4
105757: PPUSH
105758: LD_VAR 0 5
105762: PPUSH
105763: CALL 105772 0 3
// end ;
105767: LD_VAR 0 6
105771: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
105772: LD_INT 0
105774: PPUSH
105775: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
105776: LD_VAR 0 1
105780: NOT
105781: PUSH
105782: LD_VAR 0 2
105786: PPUSH
105787: LD_VAR 0 3
105791: PPUSH
105792: CALL_OW 488
105796: NOT
105797: OR
105798: PUSH
105799: LD_VAR 0 1
105803: PPUSH
105804: CALL_OW 266
105808: PUSH
105809: LD_INT 3
105811: NONEQUAL
105812: PUSH
105813: LD_VAR 0 1
105817: PPUSH
105818: CALL_OW 247
105822: PUSH
105823: LD_INT 1
105825: EQUAL
105826: NOT
105827: AND
105828: OR
105829: IFFALSE 105833
// exit ;
105831: GO 105982
// if GetType ( factory ) = unit_human then
105833: LD_VAR 0 1
105837: PPUSH
105838: CALL_OW 247
105842: PUSH
105843: LD_INT 1
105845: EQUAL
105846: IFFALSE 105863
// factory := IsInUnit ( factory ) ;
105848: LD_ADDR_VAR 0 1
105852: PUSH
105853: LD_VAR 0 1
105857: PPUSH
105858: CALL_OW 310
105862: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
105863: LD_VAR 0 1
105867: PPUSH
105868: CALL_OW 266
105872: PUSH
105873: LD_INT 3
105875: NONEQUAL
105876: IFFALSE 105880
// exit ;
105878: GO 105982
// if HexInfo ( x , y ) = factory then
105880: LD_VAR 0 2
105884: PPUSH
105885: LD_VAR 0 3
105889: PPUSH
105890: CALL_OW 428
105894: PUSH
105895: LD_VAR 0 1
105899: EQUAL
105900: IFFALSE 105927
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
105902: LD_ADDR_EXP 152
105906: PUSH
105907: LD_EXP 152
105911: PPUSH
105912: LD_VAR 0 1
105916: PPUSH
105917: LD_INT 0
105919: PPUSH
105920: CALL_OW 1
105924: ST_TO_ADDR
105925: GO 105978
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
105927: LD_ADDR_EXP 152
105931: PUSH
105932: LD_EXP 152
105936: PPUSH
105937: LD_VAR 0 1
105941: PPUSH
105942: LD_VAR 0 1
105946: PPUSH
105947: CALL_OW 255
105951: PUSH
105952: LD_VAR 0 1
105956: PUSH
105957: LD_VAR 0 2
105961: PUSH
105962: LD_VAR 0 3
105966: PUSH
105967: EMPTY
105968: LIST
105969: LIST
105970: LIST
105971: LIST
105972: PPUSH
105973: CALL_OW 1
105977: ST_TO_ADDR
// UpdateFactoryWaypoints ;
105978: CALL 105987 0 0
// end ;
105982: LD_VAR 0 4
105986: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
105987: LD_INT 0
105989: PPUSH
105990: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
105991: LD_STRING resetFactoryWaypoint();
105993: PPUSH
105994: CALL_OW 559
// if factoryWaypoints then
105998: LD_EXP 152
106002: IFFALSE 106125
// begin for i := 1 to factoryWaypoints do
106004: LD_ADDR_VAR 0 2
106008: PUSH
106009: DOUBLE
106010: LD_INT 1
106012: DEC
106013: ST_TO_ADDR
106014: LD_EXP 152
106018: PUSH
106019: FOR_TO
106020: IFFALSE 106123
// if factoryWaypoints [ i ] then
106022: LD_EXP 152
106026: PUSH
106027: LD_VAR 0 2
106031: ARRAY
106032: IFFALSE 106121
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
106034: LD_STRING setFactoryWaypointXY(
106036: PUSH
106037: LD_EXP 152
106041: PUSH
106042: LD_VAR 0 2
106046: ARRAY
106047: PUSH
106048: LD_INT 1
106050: ARRAY
106051: STR
106052: PUSH
106053: LD_STRING ,
106055: STR
106056: PUSH
106057: LD_EXP 152
106061: PUSH
106062: LD_VAR 0 2
106066: ARRAY
106067: PUSH
106068: LD_INT 2
106070: ARRAY
106071: STR
106072: PUSH
106073: LD_STRING ,
106075: STR
106076: PUSH
106077: LD_EXP 152
106081: PUSH
106082: LD_VAR 0 2
106086: ARRAY
106087: PUSH
106088: LD_INT 3
106090: ARRAY
106091: STR
106092: PUSH
106093: LD_STRING ,
106095: STR
106096: PUSH
106097: LD_EXP 152
106101: PUSH
106102: LD_VAR 0 2
106106: ARRAY
106107: PUSH
106108: LD_INT 4
106110: ARRAY
106111: STR
106112: PUSH
106113: LD_STRING )
106115: STR
106116: PPUSH
106117: CALL_OW 559
106121: GO 106019
106123: POP
106124: POP
// end ; end ;
106125: LD_VAR 0 1
106129: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
106130: LD_INT 0
106132: PPUSH
106133: PPUSH
106134: PPUSH
106135: PPUSH
106136: PPUSH
106137: PPUSH
106138: PPUSH
106139: PPUSH
106140: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
106141: LD_VAR 0 1
106145: NOT
106146: PUSH
106147: LD_VAR 0 2
106151: PPUSH
106152: LD_VAR 0 3
106156: PPUSH
106157: CALL_OW 488
106161: NOT
106162: OR
106163: PUSH
106164: LD_VAR 0 4
106168: NOT
106169: OR
106170: IFFALSE 106174
// exit ;
106172: GO 106514
// list := [ ] ;
106174: LD_ADDR_VAR 0 13
106178: PUSH
106179: EMPTY
106180: ST_TO_ADDR
// if x - r < 0 then
106181: LD_VAR 0 2
106185: PUSH
106186: LD_VAR 0 4
106190: MINUS
106191: PUSH
106192: LD_INT 0
106194: LESS
106195: IFFALSE 106207
// min_x := 0 else
106197: LD_ADDR_VAR 0 7
106201: PUSH
106202: LD_INT 0
106204: ST_TO_ADDR
106205: GO 106223
// min_x := x - r ;
106207: LD_ADDR_VAR 0 7
106211: PUSH
106212: LD_VAR 0 2
106216: PUSH
106217: LD_VAR 0 4
106221: MINUS
106222: ST_TO_ADDR
// if y - r < 0 then
106223: LD_VAR 0 3
106227: PUSH
106228: LD_VAR 0 4
106232: MINUS
106233: PUSH
106234: LD_INT 0
106236: LESS
106237: IFFALSE 106249
// min_y := 0 else
106239: LD_ADDR_VAR 0 8
106243: PUSH
106244: LD_INT 0
106246: ST_TO_ADDR
106247: GO 106265
// min_y := y - r ;
106249: LD_ADDR_VAR 0 8
106253: PUSH
106254: LD_VAR 0 3
106258: PUSH
106259: LD_VAR 0 4
106263: MINUS
106264: ST_TO_ADDR
// max_x := x + r ;
106265: LD_ADDR_VAR 0 9
106269: PUSH
106270: LD_VAR 0 2
106274: PUSH
106275: LD_VAR 0 4
106279: PLUS
106280: ST_TO_ADDR
// max_y := y + r ;
106281: LD_ADDR_VAR 0 10
106285: PUSH
106286: LD_VAR 0 3
106290: PUSH
106291: LD_VAR 0 4
106295: PLUS
106296: ST_TO_ADDR
// for _x = min_x to max_x do
106297: LD_ADDR_VAR 0 11
106301: PUSH
106302: DOUBLE
106303: LD_VAR 0 7
106307: DEC
106308: ST_TO_ADDR
106309: LD_VAR 0 9
106313: PUSH
106314: FOR_TO
106315: IFFALSE 106432
// for _y = min_y to max_y do
106317: LD_ADDR_VAR 0 12
106321: PUSH
106322: DOUBLE
106323: LD_VAR 0 8
106327: DEC
106328: ST_TO_ADDR
106329: LD_VAR 0 10
106333: PUSH
106334: FOR_TO
106335: IFFALSE 106428
// begin if not ValidHex ( _x , _y ) then
106337: LD_VAR 0 11
106341: PPUSH
106342: LD_VAR 0 12
106346: PPUSH
106347: CALL_OW 488
106351: NOT
106352: IFFALSE 106356
// continue ;
106354: GO 106334
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
106356: LD_VAR 0 11
106360: PPUSH
106361: LD_VAR 0 12
106365: PPUSH
106366: CALL_OW 351
106370: PUSH
106371: LD_VAR 0 11
106375: PPUSH
106376: LD_VAR 0 12
106380: PPUSH
106381: CALL_OW 554
106385: AND
106386: IFFALSE 106426
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
106388: LD_ADDR_VAR 0 13
106392: PUSH
106393: LD_VAR 0 13
106397: PPUSH
106398: LD_VAR 0 13
106402: PUSH
106403: LD_INT 1
106405: PLUS
106406: PPUSH
106407: LD_VAR 0 11
106411: PUSH
106412: LD_VAR 0 12
106416: PUSH
106417: EMPTY
106418: LIST
106419: LIST
106420: PPUSH
106421: CALL_OW 2
106425: ST_TO_ADDR
// end ;
106426: GO 106334
106428: POP
106429: POP
106430: GO 106314
106432: POP
106433: POP
// if not list then
106434: LD_VAR 0 13
106438: NOT
106439: IFFALSE 106443
// exit ;
106441: GO 106514
// for i in list do
106443: LD_ADDR_VAR 0 6
106447: PUSH
106448: LD_VAR 0 13
106452: PUSH
106453: FOR_IN
106454: IFFALSE 106512
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
106456: LD_VAR 0 1
106460: PPUSH
106461: LD_STRING M
106463: PUSH
106464: LD_VAR 0 6
106468: PUSH
106469: LD_INT 1
106471: ARRAY
106472: PUSH
106473: LD_VAR 0 6
106477: PUSH
106478: LD_INT 2
106480: ARRAY
106481: PUSH
106482: LD_INT 0
106484: PUSH
106485: LD_INT 0
106487: PUSH
106488: LD_INT 0
106490: PUSH
106491: LD_INT 0
106493: PUSH
106494: EMPTY
106495: LIST
106496: LIST
106497: LIST
106498: LIST
106499: LIST
106500: LIST
106501: LIST
106502: PUSH
106503: EMPTY
106504: LIST
106505: PPUSH
106506: CALL_OW 447
106510: GO 106453
106512: POP
106513: POP
// end ;
106514: LD_VAR 0 5
106518: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
106519: LD_EXP 153
106523: NOT
106524: IFFALSE 106574
106526: GO 106528
106528: DISABLE
// begin initHack := true ;
106529: LD_ADDR_EXP 153
106533: PUSH
106534: LD_INT 1
106536: ST_TO_ADDR
// hackTanks := [ ] ;
106537: LD_ADDR_EXP 154
106541: PUSH
106542: EMPTY
106543: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
106544: LD_ADDR_EXP 155
106548: PUSH
106549: EMPTY
106550: ST_TO_ADDR
// hackLimit := 3 ;
106551: LD_ADDR_EXP 156
106555: PUSH
106556: LD_INT 3
106558: ST_TO_ADDR
// hackDist := 12 ;
106559: LD_ADDR_EXP 157
106563: PUSH
106564: LD_INT 12
106566: ST_TO_ADDR
// hackCounter := [ ] ;
106567: LD_ADDR_EXP 158
106571: PUSH
106572: EMPTY
106573: ST_TO_ADDR
// end ;
106574: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
106575: LD_EXP 153
106579: PUSH
106580: LD_INT 34
106582: PUSH
106583: LD_EXP 31
106587: PUSH
106588: EMPTY
106589: LIST
106590: LIST
106591: PPUSH
106592: CALL_OW 69
106596: AND
106597: IFFALSE 106852
106599: GO 106601
106601: DISABLE
106602: LD_INT 0
106604: PPUSH
106605: PPUSH
// begin enable ;
106606: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
106607: LD_ADDR_VAR 0 1
106611: PUSH
106612: LD_INT 34
106614: PUSH
106615: LD_EXP 31
106619: PUSH
106620: EMPTY
106621: LIST
106622: LIST
106623: PPUSH
106624: CALL_OW 69
106628: PUSH
106629: FOR_IN
106630: IFFALSE 106850
// begin if not i in hackTanks then
106632: LD_VAR 0 1
106636: PUSH
106637: LD_EXP 154
106641: IN
106642: NOT
106643: IFFALSE 106726
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
106645: LD_ADDR_EXP 154
106649: PUSH
106650: LD_EXP 154
106654: PPUSH
106655: LD_EXP 154
106659: PUSH
106660: LD_INT 1
106662: PLUS
106663: PPUSH
106664: LD_VAR 0 1
106668: PPUSH
106669: CALL_OW 1
106673: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
106674: LD_ADDR_EXP 155
106678: PUSH
106679: LD_EXP 155
106683: PPUSH
106684: LD_EXP 155
106688: PUSH
106689: LD_INT 1
106691: PLUS
106692: PPUSH
106693: EMPTY
106694: PPUSH
106695: CALL_OW 1
106699: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
106700: LD_ADDR_EXP 158
106704: PUSH
106705: LD_EXP 158
106709: PPUSH
106710: LD_EXP 158
106714: PUSH
106715: LD_INT 1
106717: PLUS
106718: PPUSH
106719: EMPTY
106720: PPUSH
106721: CALL_OW 1
106725: ST_TO_ADDR
// end ; if not IsOk ( i ) then
106726: LD_VAR 0 1
106730: PPUSH
106731: CALL_OW 302
106735: NOT
106736: IFFALSE 106749
// begin HackUnlinkAll ( i ) ;
106738: LD_VAR 0 1
106742: PPUSH
106743: CALL 106855 0 1
// continue ;
106747: GO 106629
// end ; HackCheckCapturedStatus ( i ) ;
106749: LD_VAR 0 1
106753: PPUSH
106754: CALL 107298 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
106758: LD_ADDR_VAR 0 2
106762: PUSH
106763: LD_INT 81
106765: PUSH
106766: LD_VAR 0 1
106770: PPUSH
106771: CALL_OW 255
106775: PUSH
106776: EMPTY
106777: LIST
106778: LIST
106779: PUSH
106780: LD_INT 33
106782: PUSH
106783: LD_INT 3
106785: PUSH
106786: EMPTY
106787: LIST
106788: LIST
106789: PUSH
106790: LD_INT 91
106792: PUSH
106793: LD_VAR 0 1
106797: PUSH
106798: LD_EXP 157
106802: PUSH
106803: EMPTY
106804: LIST
106805: LIST
106806: LIST
106807: PUSH
106808: LD_INT 50
106810: PUSH
106811: EMPTY
106812: LIST
106813: PUSH
106814: EMPTY
106815: LIST
106816: LIST
106817: LIST
106818: LIST
106819: PPUSH
106820: CALL_OW 69
106824: ST_TO_ADDR
// if not tmp then
106825: LD_VAR 0 2
106829: NOT
106830: IFFALSE 106834
// continue ;
106832: GO 106629
// HackLink ( i , tmp ) ;
106834: LD_VAR 0 1
106838: PPUSH
106839: LD_VAR 0 2
106843: PPUSH
106844: CALL 106991 0 2
// end ;
106848: GO 106629
106850: POP
106851: POP
// end ;
106852: PPOPN 2
106854: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
106855: LD_INT 0
106857: PPUSH
106858: PPUSH
106859: PPUSH
// if not hack in hackTanks then
106860: LD_VAR 0 1
106864: PUSH
106865: LD_EXP 154
106869: IN
106870: NOT
106871: IFFALSE 106875
// exit ;
106873: GO 106986
// index := GetElementIndex ( hackTanks , hack ) ;
106875: LD_ADDR_VAR 0 4
106879: PUSH
106880: LD_EXP 154
106884: PPUSH
106885: LD_VAR 0 1
106889: PPUSH
106890: CALL 24657 0 2
106894: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
106895: LD_EXP 155
106899: PUSH
106900: LD_VAR 0 4
106904: ARRAY
106905: IFFALSE 106986
// begin for i in hackTanksCaptured [ index ] do
106907: LD_ADDR_VAR 0 3
106911: PUSH
106912: LD_EXP 155
106916: PUSH
106917: LD_VAR 0 4
106921: ARRAY
106922: PUSH
106923: FOR_IN
106924: IFFALSE 106950
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
106926: LD_VAR 0 3
106930: PUSH
106931: LD_INT 1
106933: ARRAY
106934: PPUSH
106935: LD_VAR 0 3
106939: PUSH
106940: LD_INT 2
106942: ARRAY
106943: PPUSH
106944: CALL_OW 235
106948: GO 106923
106950: POP
106951: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
106952: LD_ADDR_EXP 155
106956: PUSH
106957: LD_EXP 155
106961: PPUSH
106962: LD_VAR 0 4
106966: PPUSH
106967: EMPTY
106968: PPUSH
106969: CALL_OW 1
106973: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
106974: LD_VAR 0 1
106978: PPUSH
106979: LD_INT 0
106981: PPUSH
106982: CALL_OW 505
// end ; end ;
106986: LD_VAR 0 2
106990: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
106991: LD_INT 0
106993: PPUSH
106994: PPUSH
106995: PPUSH
// if not hack in hackTanks or not vehicles then
106996: LD_VAR 0 1
107000: PUSH
107001: LD_EXP 154
107005: IN
107006: NOT
107007: PUSH
107008: LD_VAR 0 2
107012: NOT
107013: OR
107014: IFFALSE 107018
// exit ;
107016: GO 107293
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
107018: LD_ADDR_VAR 0 2
107022: PUSH
107023: LD_VAR 0 1
107027: PPUSH
107028: LD_VAR 0 2
107032: PPUSH
107033: LD_INT 1
107035: PPUSH
107036: LD_INT 1
107038: PPUSH
107039: CALL 25307 0 4
107043: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
107044: LD_ADDR_VAR 0 5
107048: PUSH
107049: LD_EXP 154
107053: PPUSH
107054: LD_VAR 0 1
107058: PPUSH
107059: CALL 24657 0 2
107063: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
107064: LD_EXP 155
107068: PUSH
107069: LD_VAR 0 5
107073: ARRAY
107074: PUSH
107075: LD_EXP 156
107079: LESS
107080: IFFALSE 107269
// begin for i := 1 to vehicles do
107082: LD_ADDR_VAR 0 4
107086: PUSH
107087: DOUBLE
107088: LD_INT 1
107090: DEC
107091: ST_TO_ADDR
107092: LD_VAR 0 2
107096: PUSH
107097: FOR_TO
107098: IFFALSE 107267
// begin if hackTanksCaptured [ index ] = hackLimit then
107100: LD_EXP 155
107104: PUSH
107105: LD_VAR 0 5
107109: ARRAY
107110: PUSH
107111: LD_EXP 156
107115: EQUAL
107116: IFFALSE 107120
// break ;
107118: GO 107267
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
107120: LD_ADDR_EXP 158
107124: PUSH
107125: LD_EXP 158
107129: PPUSH
107130: LD_VAR 0 5
107134: PPUSH
107135: LD_EXP 158
107139: PUSH
107140: LD_VAR 0 5
107144: ARRAY
107145: PUSH
107146: LD_INT 1
107148: PLUS
107149: PPUSH
107150: CALL_OW 1
107154: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
107155: LD_ADDR_EXP 155
107159: PUSH
107160: LD_EXP 155
107164: PPUSH
107165: LD_VAR 0 5
107169: PUSH
107170: LD_EXP 155
107174: PUSH
107175: LD_VAR 0 5
107179: ARRAY
107180: PUSH
107181: LD_INT 1
107183: PLUS
107184: PUSH
107185: EMPTY
107186: LIST
107187: LIST
107188: PPUSH
107189: LD_VAR 0 2
107193: PUSH
107194: LD_VAR 0 4
107198: ARRAY
107199: PUSH
107200: LD_VAR 0 2
107204: PUSH
107205: LD_VAR 0 4
107209: ARRAY
107210: PPUSH
107211: CALL_OW 255
107215: PUSH
107216: EMPTY
107217: LIST
107218: LIST
107219: PPUSH
107220: CALL 24872 0 3
107224: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
107225: LD_VAR 0 2
107229: PUSH
107230: LD_VAR 0 4
107234: ARRAY
107235: PPUSH
107236: LD_VAR 0 1
107240: PPUSH
107241: CALL_OW 255
107245: PPUSH
107246: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
107250: LD_VAR 0 2
107254: PUSH
107255: LD_VAR 0 4
107259: ARRAY
107260: PPUSH
107261: CALL_OW 141
// end ;
107265: GO 107097
107267: POP
107268: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
107269: LD_VAR 0 1
107273: PPUSH
107274: LD_EXP 155
107278: PUSH
107279: LD_VAR 0 5
107283: ARRAY
107284: PUSH
107285: LD_INT 0
107287: PLUS
107288: PPUSH
107289: CALL_OW 505
// end ;
107293: LD_VAR 0 3
107297: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
107298: LD_INT 0
107300: PPUSH
107301: PPUSH
107302: PPUSH
107303: PPUSH
// if not hack in hackTanks then
107304: LD_VAR 0 1
107308: PUSH
107309: LD_EXP 154
107313: IN
107314: NOT
107315: IFFALSE 107319
// exit ;
107317: GO 107559
// index := GetElementIndex ( hackTanks , hack ) ;
107319: LD_ADDR_VAR 0 4
107323: PUSH
107324: LD_EXP 154
107328: PPUSH
107329: LD_VAR 0 1
107333: PPUSH
107334: CALL 24657 0 2
107338: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
107339: LD_ADDR_VAR 0 3
107343: PUSH
107344: DOUBLE
107345: LD_EXP 155
107349: PUSH
107350: LD_VAR 0 4
107354: ARRAY
107355: INC
107356: ST_TO_ADDR
107357: LD_INT 1
107359: PUSH
107360: FOR_DOWNTO
107361: IFFALSE 107533
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
107363: LD_ADDR_VAR 0 5
107367: PUSH
107368: LD_EXP 155
107372: PUSH
107373: LD_VAR 0 4
107377: ARRAY
107378: PUSH
107379: LD_VAR 0 3
107383: ARRAY
107384: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
107385: LD_VAR 0 5
107389: PUSH
107390: LD_INT 1
107392: ARRAY
107393: PPUSH
107394: CALL_OW 302
107398: NOT
107399: PUSH
107400: LD_VAR 0 5
107404: PUSH
107405: LD_INT 1
107407: ARRAY
107408: PPUSH
107409: CALL_OW 255
107413: PUSH
107414: LD_VAR 0 1
107418: PPUSH
107419: CALL_OW 255
107423: NONEQUAL
107424: OR
107425: IFFALSE 107531
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
107427: LD_VAR 0 5
107431: PUSH
107432: LD_INT 1
107434: ARRAY
107435: PPUSH
107436: CALL_OW 305
107440: PUSH
107441: LD_VAR 0 5
107445: PUSH
107446: LD_INT 1
107448: ARRAY
107449: PPUSH
107450: CALL_OW 255
107454: PUSH
107455: LD_VAR 0 1
107459: PPUSH
107460: CALL_OW 255
107464: EQUAL
107465: AND
107466: IFFALSE 107490
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
107468: LD_VAR 0 5
107472: PUSH
107473: LD_INT 1
107475: ARRAY
107476: PPUSH
107477: LD_VAR 0 5
107481: PUSH
107482: LD_INT 2
107484: ARRAY
107485: PPUSH
107486: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
107490: LD_ADDR_EXP 155
107494: PUSH
107495: LD_EXP 155
107499: PPUSH
107500: LD_VAR 0 4
107504: PPUSH
107505: LD_EXP 155
107509: PUSH
107510: LD_VAR 0 4
107514: ARRAY
107515: PPUSH
107516: LD_VAR 0 3
107520: PPUSH
107521: CALL_OW 3
107525: PPUSH
107526: CALL_OW 1
107530: ST_TO_ADDR
// end ; end ;
107531: GO 107360
107533: POP
107534: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
107535: LD_VAR 0 1
107539: PPUSH
107540: LD_EXP 155
107544: PUSH
107545: LD_VAR 0 4
107549: ARRAY
107550: PUSH
107551: LD_INT 0
107553: PLUS
107554: PPUSH
107555: CALL_OW 505
// end ;
107559: LD_VAR 0 2
107563: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
107564: LD_INT 0
107566: PPUSH
107567: PPUSH
107568: PPUSH
107569: PPUSH
// if not hack in hackTanks then
107570: LD_VAR 0 1
107574: PUSH
107575: LD_EXP 154
107579: IN
107580: NOT
107581: IFFALSE 107585
// exit ;
107583: GO 107670
// index := GetElementIndex ( hackTanks , hack ) ;
107585: LD_ADDR_VAR 0 5
107589: PUSH
107590: LD_EXP 154
107594: PPUSH
107595: LD_VAR 0 1
107599: PPUSH
107600: CALL 24657 0 2
107604: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
107605: LD_ADDR_VAR 0 4
107609: PUSH
107610: DOUBLE
107611: LD_INT 1
107613: DEC
107614: ST_TO_ADDR
107615: LD_EXP 155
107619: PUSH
107620: LD_VAR 0 5
107624: ARRAY
107625: PUSH
107626: FOR_TO
107627: IFFALSE 107668
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
107629: LD_EXP 155
107633: PUSH
107634: LD_VAR 0 5
107638: ARRAY
107639: PUSH
107640: LD_VAR 0 4
107644: ARRAY
107645: PUSH
107646: LD_INT 1
107648: ARRAY
107649: PUSH
107650: LD_VAR 0 2
107654: EQUAL
107655: IFFALSE 107666
// KillUnit ( vehicle ) ;
107657: LD_VAR 0 2
107661: PPUSH
107662: CALL_OW 66
107666: GO 107626
107668: POP
107669: POP
// end ;
107670: LD_VAR 0 3
107674: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
107675: LD_EXP 159
107679: NOT
107680: IFFALSE 107715
107682: GO 107684
107684: DISABLE
// begin initMiner := true ;
107685: LD_ADDR_EXP 159
107689: PUSH
107690: LD_INT 1
107692: ST_TO_ADDR
// minersList := [ ] ;
107693: LD_ADDR_EXP 160
107697: PUSH
107698: EMPTY
107699: ST_TO_ADDR
// minerMinesList := [ ] ;
107700: LD_ADDR_EXP 161
107704: PUSH
107705: EMPTY
107706: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
107707: LD_ADDR_EXP 162
107711: PUSH
107712: LD_INT 5
107714: ST_TO_ADDR
// end ;
107715: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
107716: LD_EXP 159
107720: PUSH
107721: LD_INT 34
107723: PUSH
107724: LD_EXP 36
107728: PUSH
107729: EMPTY
107730: LIST
107731: LIST
107732: PPUSH
107733: CALL_OW 69
107737: AND
107738: IFFALSE 108201
107740: GO 107742
107742: DISABLE
107743: LD_INT 0
107745: PPUSH
107746: PPUSH
107747: PPUSH
107748: PPUSH
// begin enable ;
107749: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
107750: LD_ADDR_VAR 0 1
107754: PUSH
107755: LD_INT 34
107757: PUSH
107758: LD_EXP 36
107762: PUSH
107763: EMPTY
107764: LIST
107765: LIST
107766: PPUSH
107767: CALL_OW 69
107771: PUSH
107772: FOR_IN
107773: IFFALSE 107845
// begin if not i in minersList then
107775: LD_VAR 0 1
107779: PUSH
107780: LD_EXP 160
107784: IN
107785: NOT
107786: IFFALSE 107843
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
107788: LD_ADDR_EXP 160
107792: PUSH
107793: LD_EXP 160
107797: PPUSH
107798: LD_EXP 160
107802: PUSH
107803: LD_INT 1
107805: PLUS
107806: PPUSH
107807: LD_VAR 0 1
107811: PPUSH
107812: CALL_OW 1
107816: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
107817: LD_ADDR_EXP 161
107821: PUSH
107822: LD_EXP 161
107826: PPUSH
107827: LD_EXP 161
107831: PUSH
107832: LD_INT 1
107834: PLUS
107835: PPUSH
107836: EMPTY
107837: PPUSH
107838: CALL_OW 1
107842: ST_TO_ADDR
// end end ;
107843: GO 107772
107845: POP
107846: POP
// for i := minerMinesList downto 1 do
107847: LD_ADDR_VAR 0 1
107851: PUSH
107852: DOUBLE
107853: LD_EXP 161
107857: INC
107858: ST_TO_ADDR
107859: LD_INT 1
107861: PUSH
107862: FOR_DOWNTO
107863: IFFALSE 108199
// begin if IsLive ( minersList [ i ] ) then
107865: LD_EXP 160
107869: PUSH
107870: LD_VAR 0 1
107874: ARRAY
107875: PPUSH
107876: CALL_OW 300
107880: IFFALSE 107908
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
107882: LD_EXP 160
107886: PUSH
107887: LD_VAR 0 1
107891: ARRAY
107892: PPUSH
107893: LD_EXP 161
107897: PUSH
107898: LD_VAR 0 1
107902: ARRAY
107903: PPUSH
107904: CALL_OW 505
// if not minerMinesList [ i ] then
107908: LD_EXP 161
107912: PUSH
107913: LD_VAR 0 1
107917: ARRAY
107918: NOT
107919: IFFALSE 107923
// continue ;
107921: GO 107862
// for j := minerMinesList [ i ] downto 1 do
107923: LD_ADDR_VAR 0 2
107927: PUSH
107928: DOUBLE
107929: LD_EXP 161
107933: PUSH
107934: LD_VAR 0 1
107938: ARRAY
107939: INC
107940: ST_TO_ADDR
107941: LD_INT 1
107943: PUSH
107944: FOR_DOWNTO
107945: IFFALSE 108195
// begin side := GetSide ( minersList [ i ] ) ;
107947: LD_ADDR_VAR 0 3
107951: PUSH
107952: LD_EXP 160
107956: PUSH
107957: LD_VAR 0 1
107961: ARRAY
107962: PPUSH
107963: CALL_OW 255
107967: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
107968: LD_ADDR_VAR 0 4
107972: PUSH
107973: LD_EXP 161
107977: PUSH
107978: LD_VAR 0 1
107982: ARRAY
107983: PUSH
107984: LD_VAR 0 2
107988: ARRAY
107989: PUSH
107990: LD_INT 1
107992: ARRAY
107993: PPUSH
107994: LD_EXP 161
107998: PUSH
107999: LD_VAR 0 1
108003: ARRAY
108004: PUSH
108005: LD_VAR 0 2
108009: ARRAY
108010: PUSH
108011: LD_INT 2
108013: ARRAY
108014: PPUSH
108015: CALL_OW 428
108019: ST_TO_ADDR
// if not tmp then
108020: LD_VAR 0 4
108024: NOT
108025: IFFALSE 108029
// continue ;
108027: GO 107944
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
108029: LD_VAR 0 4
108033: PUSH
108034: LD_INT 81
108036: PUSH
108037: LD_VAR 0 3
108041: PUSH
108042: EMPTY
108043: LIST
108044: LIST
108045: PPUSH
108046: CALL_OW 69
108050: IN
108051: PUSH
108052: LD_EXP 161
108056: PUSH
108057: LD_VAR 0 1
108061: ARRAY
108062: PUSH
108063: LD_VAR 0 2
108067: ARRAY
108068: PUSH
108069: LD_INT 1
108071: ARRAY
108072: PPUSH
108073: LD_EXP 161
108077: PUSH
108078: LD_VAR 0 1
108082: ARRAY
108083: PUSH
108084: LD_VAR 0 2
108088: ARRAY
108089: PUSH
108090: LD_INT 2
108092: ARRAY
108093: PPUSH
108094: CALL_OW 458
108098: AND
108099: IFFALSE 108193
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
108101: LD_EXP 161
108105: PUSH
108106: LD_VAR 0 1
108110: ARRAY
108111: PUSH
108112: LD_VAR 0 2
108116: ARRAY
108117: PUSH
108118: LD_INT 1
108120: ARRAY
108121: PPUSH
108122: LD_EXP 161
108126: PUSH
108127: LD_VAR 0 1
108131: ARRAY
108132: PUSH
108133: LD_VAR 0 2
108137: ARRAY
108138: PUSH
108139: LD_INT 2
108141: ARRAY
108142: PPUSH
108143: LD_VAR 0 3
108147: PPUSH
108148: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
108152: LD_ADDR_EXP 161
108156: PUSH
108157: LD_EXP 161
108161: PPUSH
108162: LD_VAR 0 1
108166: PPUSH
108167: LD_EXP 161
108171: PUSH
108172: LD_VAR 0 1
108176: ARRAY
108177: PPUSH
108178: LD_VAR 0 2
108182: PPUSH
108183: CALL_OW 3
108187: PPUSH
108188: CALL_OW 1
108192: ST_TO_ADDR
// end ; end ;
108193: GO 107944
108195: POP
108196: POP
// end ;
108197: GO 107862
108199: POP
108200: POP
// end ;
108201: PPOPN 4
108203: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
108204: LD_INT 0
108206: PPUSH
108207: PPUSH
// result := false ;
108208: LD_ADDR_VAR 0 4
108212: PUSH
108213: LD_INT 0
108215: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
108216: LD_VAR 0 1
108220: PPUSH
108221: CALL_OW 264
108225: PUSH
108226: LD_EXP 36
108230: EQUAL
108231: NOT
108232: IFFALSE 108236
// exit ;
108234: GO 108476
// index := GetElementIndex ( minersList , unit ) ;
108236: LD_ADDR_VAR 0 5
108240: PUSH
108241: LD_EXP 160
108245: PPUSH
108246: LD_VAR 0 1
108250: PPUSH
108251: CALL 24657 0 2
108255: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
108256: LD_EXP 161
108260: PUSH
108261: LD_VAR 0 5
108265: ARRAY
108266: PUSH
108267: LD_EXP 162
108271: GREATEREQUAL
108272: IFFALSE 108276
// exit ;
108274: GO 108476
// ComMoveXY ( unit , x , y ) ;
108276: LD_VAR 0 1
108280: PPUSH
108281: LD_VAR 0 2
108285: PPUSH
108286: LD_VAR 0 3
108290: PPUSH
108291: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
108295: LD_INT 35
108297: PPUSH
108298: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
108302: LD_VAR 0 1
108306: PPUSH
108307: LD_VAR 0 2
108311: PPUSH
108312: LD_VAR 0 3
108316: PPUSH
108317: CALL 55376 0 3
108321: NOT
108322: PUSH
108323: LD_VAR 0 1
108327: PPUSH
108328: CALL_OW 314
108332: AND
108333: IFFALSE 108337
// exit ;
108335: GO 108476
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
108337: LD_VAR 0 2
108341: PPUSH
108342: LD_VAR 0 3
108346: PPUSH
108347: CALL_OW 428
108351: PUSH
108352: LD_VAR 0 1
108356: EQUAL
108357: PUSH
108358: LD_VAR 0 1
108362: PPUSH
108363: CALL_OW 314
108367: NOT
108368: AND
108369: IFFALSE 108295
// PlaySoundXY ( x , y , PlantMine ) ;
108371: LD_VAR 0 2
108375: PPUSH
108376: LD_VAR 0 3
108380: PPUSH
108381: LD_STRING PlantMine
108383: PPUSH
108384: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
108388: LD_VAR 0 2
108392: PPUSH
108393: LD_VAR 0 3
108397: PPUSH
108398: LD_VAR 0 1
108402: PPUSH
108403: CALL_OW 255
108407: PPUSH
108408: LD_INT 0
108410: PPUSH
108411: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
108415: LD_ADDR_EXP 161
108419: PUSH
108420: LD_EXP 161
108424: PPUSH
108425: LD_VAR 0 5
108429: PUSH
108430: LD_EXP 161
108434: PUSH
108435: LD_VAR 0 5
108439: ARRAY
108440: PUSH
108441: LD_INT 1
108443: PLUS
108444: PUSH
108445: EMPTY
108446: LIST
108447: LIST
108448: PPUSH
108449: LD_VAR 0 2
108453: PUSH
108454: LD_VAR 0 3
108458: PUSH
108459: EMPTY
108460: LIST
108461: LIST
108462: PPUSH
108463: CALL 24872 0 3
108467: ST_TO_ADDR
// result := true ;
108468: LD_ADDR_VAR 0 4
108472: PUSH
108473: LD_INT 1
108475: ST_TO_ADDR
// end ;
108476: LD_VAR 0 4
108480: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
108481: LD_INT 0
108483: PPUSH
108484: PPUSH
108485: PPUSH
// if not unit in minersList then
108486: LD_VAR 0 1
108490: PUSH
108491: LD_EXP 160
108495: IN
108496: NOT
108497: IFFALSE 108501
// exit ;
108499: GO 108893
// index := GetElementIndex ( minersList , unit ) ;
108501: LD_ADDR_VAR 0 6
108505: PUSH
108506: LD_EXP 160
108510: PPUSH
108511: LD_VAR 0 1
108515: PPUSH
108516: CALL 24657 0 2
108520: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
108521: LD_ADDR_VAR 0 5
108525: PUSH
108526: DOUBLE
108527: LD_EXP 161
108531: PUSH
108532: LD_VAR 0 6
108536: ARRAY
108537: INC
108538: ST_TO_ADDR
108539: LD_INT 1
108541: PUSH
108542: FOR_DOWNTO
108543: IFFALSE 108704
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
108545: LD_EXP 161
108549: PUSH
108550: LD_VAR 0 6
108554: ARRAY
108555: PUSH
108556: LD_VAR 0 5
108560: ARRAY
108561: PUSH
108562: LD_INT 1
108564: ARRAY
108565: PUSH
108566: LD_VAR 0 2
108570: EQUAL
108571: PUSH
108572: LD_EXP 161
108576: PUSH
108577: LD_VAR 0 6
108581: ARRAY
108582: PUSH
108583: LD_VAR 0 5
108587: ARRAY
108588: PUSH
108589: LD_INT 2
108591: ARRAY
108592: PUSH
108593: LD_VAR 0 3
108597: EQUAL
108598: AND
108599: IFFALSE 108702
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
108601: LD_EXP 161
108605: PUSH
108606: LD_VAR 0 6
108610: ARRAY
108611: PUSH
108612: LD_VAR 0 5
108616: ARRAY
108617: PUSH
108618: LD_INT 1
108620: ARRAY
108621: PPUSH
108622: LD_EXP 161
108626: PUSH
108627: LD_VAR 0 6
108631: ARRAY
108632: PUSH
108633: LD_VAR 0 5
108637: ARRAY
108638: PUSH
108639: LD_INT 2
108641: ARRAY
108642: PPUSH
108643: LD_VAR 0 1
108647: PPUSH
108648: CALL_OW 255
108652: PPUSH
108653: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
108657: LD_ADDR_EXP 161
108661: PUSH
108662: LD_EXP 161
108666: PPUSH
108667: LD_VAR 0 6
108671: PPUSH
108672: LD_EXP 161
108676: PUSH
108677: LD_VAR 0 6
108681: ARRAY
108682: PPUSH
108683: LD_VAR 0 5
108687: PPUSH
108688: CALL_OW 3
108692: PPUSH
108693: CALL_OW 1
108697: ST_TO_ADDR
// exit ;
108698: POP
108699: POP
108700: GO 108893
// end ; end ;
108702: GO 108542
108704: POP
108705: POP
// for i := minerMinesList [ index ] downto 1 do
108706: LD_ADDR_VAR 0 5
108710: PUSH
108711: DOUBLE
108712: LD_EXP 161
108716: PUSH
108717: LD_VAR 0 6
108721: ARRAY
108722: INC
108723: ST_TO_ADDR
108724: LD_INT 1
108726: PUSH
108727: FOR_DOWNTO
108728: IFFALSE 108891
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
108730: LD_EXP 161
108734: PUSH
108735: LD_VAR 0 6
108739: ARRAY
108740: PUSH
108741: LD_VAR 0 5
108745: ARRAY
108746: PUSH
108747: LD_INT 1
108749: ARRAY
108750: PPUSH
108751: LD_EXP 161
108755: PUSH
108756: LD_VAR 0 6
108760: ARRAY
108761: PUSH
108762: LD_VAR 0 5
108766: ARRAY
108767: PUSH
108768: LD_INT 2
108770: ARRAY
108771: PPUSH
108772: LD_VAR 0 2
108776: PPUSH
108777: LD_VAR 0 3
108781: PPUSH
108782: CALL_OW 298
108786: PUSH
108787: LD_INT 6
108789: LESS
108790: IFFALSE 108889
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
108792: LD_EXP 161
108796: PUSH
108797: LD_VAR 0 6
108801: ARRAY
108802: PUSH
108803: LD_VAR 0 5
108807: ARRAY
108808: PUSH
108809: LD_INT 1
108811: ARRAY
108812: PPUSH
108813: LD_EXP 161
108817: PUSH
108818: LD_VAR 0 6
108822: ARRAY
108823: PUSH
108824: LD_VAR 0 5
108828: ARRAY
108829: PUSH
108830: LD_INT 2
108832: ARRAY
108833: PPUSH
108834: LD_VAR 0 1
108838: PPUSH
108839: CALL_OW 255
108843: PPUSH
108844: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
108848: LD_ADDR_EXP 161
108852: PUSH
108853: LD_EXP 161
108857: PPUSH
108858: LD_VAR 0 6
108862: PPUSH
108863: LD_EXP 161
108867: PUSH
108868: LD_VAR 0 6
108872: ARRAY
108873: PPUSH
108874: LD_VAR 0 5
108878: PPUSH
108879: CALL_OW 3
108883: PPUSH
108884: CALL_OW 1
108888: ST_TO_ADDR
// end ; end ;
108889: GO 108727
108891: POP
108892: POP
// end ;
108893: LD_VAR 0 4
108897: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
108898: LD_INT 0
108900: PPUSH
108901: PPUSH
108902: PPUSH
108903: PPUSH
108904: PPUSH
108905: PPUSH
108906: PPUSH
108907: PPUSH
108908: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
108909: LD_VAR 0 1
108913: PPUSH
108914: CALL_OW 264
108918: PUSH
108919: LD_EXP 36
108923: EQUAL
108924: NOT
108925: PUSH
108926: LD_VAR 0 1
108930: PUSH
108931: LD_EXP 160
108935: IN
108936: NOT
108937: OR
108938: IFFALSE 108942
// exit ;
108940: GO 109264
// index := GetElementIndex ( minersList , unit ) ;
108942: LD_ADDR_VAR 0 6
108946: PUSH
108947: LD_EXP 160
108951: PPUSH
108952: LD_VAR 0 1
108956: PPUSH
108957: CALL 24657 0 2
108961: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
108962: LD_ADDR_VAR 0 8
108966: PUSH
108967: LD_EXP 162
108971: PUSH
108972: LD_EXP 161
108976: PUSH
108977: LD_VAR 0 6
108981: ARRAY
108982: MINUS
108983: ST_TO_ADDR
// if not minesFreeAmount then
108984: LD_VAR 0 8
108988: NOT
108989: IFFALSE 108993
// exit ;
108991: GO 109264
// tmp := [ ] ;
108993: LD_ADDR_VAR 0 7
108997: PUSH
108998: EMPTY
108999: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
109000: LD_ADDR_VAR 0 5
109004: PUSH
109005: DOUBLE
109006: LD_INT 1
109008: DEC
109009: ST_TO_ADDR
109010: LD_VAR 0 8
109014: PUSH
109015: FOR_TO
109016: IFFALSE 109211
// begin _d := rand ( 0 , 5 ) ;
109018: LD_ADDR_VAR 0 11
109022: PUSH
109023: LD_INT 0
109025: PPUSH
109026: LD_INT 5
109028: PPUSH
109029: CALL_OW 12
109033: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
109034: LD_ADDR_VAR 0 12
109038: PUSH
109039: LD_INT 2
109041: PPUSH
109042: LD_INT 6
109044: PPUSH
109045: CALL_OW 12
109049: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
109050: LD_ADDR_VAR 0 9
109054: PUSH
109055: LD_VAR 0 2
109059: PPUSH
109060: LD_VAR 0 11
109064: PPUSH
109065: LD_VAR 0 12
109069: PPUSH
109070: CALL_OW 272
109074: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
109075: LD_ADDR_VAR 0 10
109079: PUSH
109080: LD_VAR 0 3
109084: PPUSH
109085: LD_VAR 0 11
109089: PPUSH
109090: LD_VAR 0 12
109094: PPUSH
109095: CALL_OW 273
109099: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
109100: LD_VAR 0 9
109104: PPUSH
109105: LD_VAR 0 10
109109: PPUSH
109110: CALL_OW 488
109114: PUSH
109115: LD_VAR 0 9
109119: PUSH
109120: LD_VAR 0 10
109124: PUSH
109125: EMPTY
109126: LIST
109127: LIST
109128: PUSH
109129: LD_VAR 0 7
109133: IN
109134: NOT
109135: AND
109136: PUSH
109137: LD_VAR 0 9
109141: PPUSH
109142: LD_VAR 0 10
109146: PPUSH
109147: CALL_OW 458
109151: NOT
109152: AND
109153: IFFALSE 109195
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
109155: LD_ADDR_VAR 0 7
109159: PUSH
109160: LD_VAR 0 7
109164: PPUSH
109165: LD_VAR 0 7
109169: PUSH
109170: LD_INT 1
109172: PLUS
109173: PPUSH
109174: LD_VAR 0 9
109178: PUSH
109179: LD_VAR 0 10
109183: PUSH
109184: EMPTY
109185: LIST
109186: LIST
109187: PPUSH
109188: CALL_OW 1
109192: ST_TO_ADDR
109193: GO 109209
// i := i - 1 ;
109195: LD_ADDR_VAR 0 5
109199: PUSH
109200: LD_VAR 0 5
109204: PUSH
109205: LD_INT 1
109207: MINUS
109208: ST_TO_ADDR
// end ;
109209: GO 109015
109211: POP
109212: POP
// for i in tmp do
109213: LD_ADDR_VAR 0 5
109217: PUSH
109218: LD_VAR 0 7
109222: PUSH
109223: FOR_IN
109224: IFFALSE 109262
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
109226: LD_VAR 0 1
109230: PPUSH
109231: LD_VAR 0 5
109235: PUSH
109236: LD_INT 1
109238: ARRAY
109239: PPUSH
109240: LD_VAR 0 5
109244: PUSH
109245: LD_INT 2
109247: ARRAY
109248: PPUSH
109249: CALL 108204 0 3
109253: NOT
109254: IFFALSE 109260
// exit ;
109256: POP
109257: POP
109258: GO 109264
109260: GO 109223
109262: POP
109263: POP
// end ;
109264: LD_VAR 0 4
109268: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
109269: LD_INT 0
109271: PPUSH
109272: PPUSH
109273: PPUSH
109274: PPUSH
109275: PPUSH
109276: PPUSH
109277: PPUSH
// if not GetClass ( unit ) = class_sniper then
109278: LD_VAR 0 1
109282: PPUSH
109283: CALL_OW 257
109287: PUSH
109288: LD_INT 5
109290: EQUAL
109291: NOT
109292: IFFALSE 109296
// exit ;
109294: GO 109684
// dist := 8 ;
109296: LD_ADDR_VAR 0 5
109300: PUSH
109301: LD_INT 8
109303: ST_TO_ADDR
// viewRange := 12 ;
109304: LD_ADDR_VAR 0 7
109308: PUSH
109309: LD_INT 12
109311: ST_TO_ADDR
// side := GetSide ( unit ) ;
109312: LD_ADDR_VAR 0 6
109316: PUSH
109317: LD_VAR 0 1
109321: PPUSH
109322: CALL_OW 255
109326: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
109327: LD_INT 61
109329: PPUSH
109330: LD_VAR 0 6
109334: PPUSH
109335: CALL_OW 321
109339: PUSH
109340: LD_INT 2
109342: EQUAL
109343: IFFALSE 109353
// viewRange := 16 ;
109345: LD_ADDR_VAR 0 7
109349: PUSH
109350: LD_INT 16
109352: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
109353: LD_VAR 0 1
109357: PPUSH
109358: LD_VAR 0 2
109362: PPUSH
109363: LD_VAR 0 3
109367: PPUSH
109368: CALL_OW 297
109372: PUSH
109373: LD_VAR 0 5
109377: GREATER
109378: IFFALSE 109457
// begin ComMoveXY ( unit , x , y ) ;
109380: LD_VAR 0 1
109384: PPUSH
109385: LD_VAR 0 2
109389: PPUSH
109390: LD_VAR 0 3
109394: PPUSH
109395: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
109399: LD_INT 35
109401: PPUSH
109402: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
109406: LD_VAR 0 1
109410: PPUSH
109411: LD_VAR 0 2
109415: PPUSH
109416: LD_VAR 0 3
109420: PPUSH
109421: CALL 55376 0 3
109425: NOT
109426: IFFALSE 109430
// exit ;
109428: GO 109684
// until GetDistUnitXY ( unit , x , y ) < dist ;
109430: LD_VAR 0 1
109434: PPUSH
109435: LD_VAR 0 2
109439: PPUSH
109440: LD_VAR 0 3
109444: PPUSH
109445: CALL_OW 297
109449: PUSH
109450: LD_VAR 0 5
109454: LESS
109455: IFFALSE 109399
// end ; ComTurnXY ( unit , x , y ) ;
109457: LD_VAR 0 1
109461: PPUSH
109462: LD_VAR 0 2
109466: PPUSH
109467: LD_VAR 0 3
109471: PPUSH
109472: CALL_OW 118
// wait ( 5 ) ;
109476: LD_INT 5
109478: PPUSH
109479: CALL_OW 67
// _d := GetDir ( unit ) ;
109483: LD_ADDR_VAR 0 10
109487: PUSH
109488: LD_VAR 0 1
109492: PPUSH
109493: CALL_OW 254
109497: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
109498: LD_ADDR_VAR 0 8
109502: PUSH
109503: LD_VAR 0 1
109507: PPUSH
109508: CALL_OW 250
109512: PPUSH
109513: LD_VAR 0 10
109517: PPUSH
109518: LD_VAR 0 5
109522: PPUSH
109523: CALL_OW 272
109527: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
109528: LD_ADDR_VAR 0 9
109532: PUSH
109533: LD_VAR 0 1
109537: PPUSH
109538: CALL_OW 251
109542: PPUSH
109543: LD_VAR 0 10
109547: PPUSH
109548: LD_VAR 0 5
109552: PPUSH
109553: CALL_OW 273
109557: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
109558: LD_VAR 0 8
109562: PPUSH
109563: LD_VAR 0 9
109567: PPUSH
109568: CALL_OW 488
109572: NOT
109573: IFFALSE 109577
// exit ;
109575: GO 109684
// ComAnimCustom ( unit , 1 ) ;
109577: LD_VAR 0 1
109581: PPUSH
109582: LD_INT 1
109584: PPUSH
109585: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
109589: LD_VAR 0 8
109593: PPUSH
109594: LD_VAR 0 9
109598: PPUSH
109599: LD_VAR 0 6
109603: PPUSH
109604: LD_VAR 0 7
109608: PPUSH
109609: CALL_OW 330
// repeat wait ( 1 ) ;
109613: LD_INT 1
109615: PPUSH
109616: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
109620: LD_VAR 0 1
109624: PPUSH
109625: CALL_OW 316
109629: PUSH
109630: LD_VAR 0 1
109634: PPUSH
109635: CALL_OW 314
109639: OR
109640: PUSH
109641: LD_VAR 0 1
109645: PPUSH
109646: CALL_OW 302
109650: NOT
109651: OR
109652: PUSH
109653: LD_VAR 0 1
109657: PPUSH
109658: CALL_OW 301
109662: OR
109663: IFFALSE 109613
// RemoveSeeing ( _x , _y , side ) ;
109665: LD_VAR 0 8
109669: PPUSH
109670: LD_VAR 0 9
109674: PPUSH
109675: LD_VAR 0 6
109679: PPUSH
109680: CALL_OW 331
// end ; end_of_file
109684: LD_VAR 0 4
109688: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
109689: LD_INT 0
109691: PPUSH
109692: PPUSH
109693: PPUSH
109694: PPUSH
109695: PPUSH
109696: PPUSH
109697: PPUSH
109698: PPUSH
109699: PPUSH
109700: PPUSH
109701: PPUSH
109702: PPUSH
109703: PPUSH
109704: PPUSH
109705: PPUSH
109706: PPUSH
109707: PPUSH
109708: PPUSH
109709: PPUSH
109710: PPUSH
109711: PPUSH
109712: PPUSH
109713: PPUSH
109714: PPUSH
109715: PPUSH
109716: PPUSH
109717: PPUSH
109718: PPUSH
109719: PPUSH
109720: PPUSH
109721: PPUSH
109722: PPUSH
109723: PPUSH
109724: PPUSH
// if not list then
109725: LD_VAR 0 1
109729: NOT
109730: IFFALSE 109734
// exit ;
109732: GO 114393
// base := list [ 1 ] ;
109734: LD_ADDR_VAR 0 3
109738: PUSH
109739: LD_VAR 0 1
109743: PUSH
109744: LD_INT 1
109746: ARRAY
109747: ST_TO_ADDR
// group := list [ 2 ] ;
109748: LD_ADDR_VAR 0 4
109752: PUSH
109753: LD_VAR 0 1
109757: PUSH
109758: LD_INT 2
109760: ARRAY
109761: ST_TO_ADDR
// path := list [ 3 ] ;
109762: LD_ADDR_VAR 0 5
109766: PUSH
109767: LD_VAR 0 1
109771: PUSH
109772: LD_INT 3
109774: ARRAY
109775: ST_TO_ADDR
// flags := list [ 4 ] ;
109776: LD_ADDR_VAR 0 6
109780: PUSH
109781: LD_VAR 0 1
109785: PUSH
109786: LD_INT 4
109788: ARRAY
109789: ST_TO_ADDR
// mined := [ ] ;
109790: LD_ADDR_VAR 0 27
109794: PUSH
109795: EMPTY
109796: ST_TO_ADDR
// bombed := [ ] ;
109797: LD_ADDR_VAR 0 28
109801: PUSH
109802: EMPTY
109803: ST_TO_ADDR
// healers := [ ] ;
109804: LD_ADDR_VAR 0 31
109808: PUSH
109809: EMPTY
109810: ST_TO_ADDR
// to_heal := [ ] ;
109811: LD_ADDR_VAR 0 30
109815: PUSH
109816: EMPTY
109817: ST_TO_ADDR
// repairs := [ ] ;
109818: LD_ADDR_VAR 0 33
109822: PUSH
109823: EMPTY
109824: ST_TO_ADDR
// to_repair := [ ] ;
109825: LD_ADDR_VAR 0 32
109829: PUSH
109830: EMPTY
109831: ST_TO_ADDR
// if not group or not path then
109832: LD_VAR 0 4
109836: NOT
109837: PUSH
109838: LD_VAR 0 5
109842: NOT
109843: OR
109844: IFFALSE 109848
// exit ;
109846: GO 114393
// side := GetSide ( group [ 1 ] ) ;
109848: LD_ADDR_VAR 0 35
109852: PUSH
109853: LD_VAR 0 4
109857: PUSH
109858: LD_INT 1
109860: ARRAY
109861: PPUSH
109862: CALL_OW 255
109866: ST_TO_ADDR
// if flags then
109867: LD_VAR 0 6
109871: IFFALSE 110015
// begin f_ignore_area := flags [ 1 ] ;
109873: LD_ADDR_VAR 0 17
109877: PUSH
109878: LD_VAR 0 6
109882: PUSH
109883: LD_INT 1
109885: ARRAY
109886: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
109887: LD_ADDR_VAR 0 18
109891: PUSH
109892: LD_VAR 0 6
109896: PUSH
109897: LD_INT 2
109899: ARRAY
109900: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
109901: LD_ADDR_VAR 0 19
109905: PUSH
109906: LD_VAR 0 6
109910: PUSH
109911: LD_INT 3
109913: ARRAY
109914: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
109915: LD_ADDR_VAR 0 20
109919: PUSH
109920: LD_VAR 0 6
109924: PUSH
109925: LD_INT 4
109927: ARRAY
109928: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
109929: LD_ADDR_VAR 0 21
109933: PUSH
109934: LD_VAR 0 6
109938: PUSH
109939: LD_INT 5
109941: ARRAY
109942: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
109943: LD_ADDR_VAR 0 22
109947: PUSH
109948: LD_VAR 0 6
109952: PUSH
109953: LD_INT 6
109955: ARRAY
109956: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
109957: LD_ADDR_VAR 0 23
109961: PUSH
109962: LD_VAR 0 6
109966: PUSH
109967: LD_INT 7
109969: ARRAY
109970: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
109971: LD_ADDR_VAR 0 24
109975: PUSH
109976: LD_VAR 0 6
109980: PUSH
109981: LD_INT 8
109983: ARRAY
109984: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
109985: LD_ADDR_VAR 0 25
109989: PUSH
109990: LD_VAR 0 6
109994: PUSH
109995: LD_INT 9
109997: ARRAY
109998: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
109999: LD_ADDR_VAR 0 26
110003: PUSH
110004: LD_VAR 0 6
110008: PUSH
110009: LD_INT 10
110011: ARRAY
110012: ST_TO_ADDR
// end else
110013: GO 110095
// begin f_ignore_area := false ;
110015: LD_ADDR_VAR 0 17
110019: PUSH
110020: LD_INT 0
110022: ST_TO_ADDR
// f_capture := false ;
110023: LD_ADDR_VAR 0 18
110027: PUSH
110028: LD_INT 0
110030: ST_TO_ADDR
// f_ignore_civ := false ;
110031: LD_ADDR_VAR 0 19
110035: PUSH
110036: LD_INT 0
110038: ST_TO_ADDR
// f_murder := false ;
110039: LD_ADDR_VAR 0 20
110043: PUSH
110044: LD_INT 0
110046: ST_TO_ADDR
// f_mines := false ;
110047: LD_ADDR_VAR 0 21
110051: PUSH
110052: LD_INT 0
110054: ST_TO_ADDR
// f_repair := false ;
110055: LD_ADDR_VAR 0 22
110059: PUSH
110060: LD_INT 0
110062: ST_TO_ADDR
// f_heal := false ;
110063: LD_ADDR_VAR 0 23
110067: PUSH
110068: LD_INT 0
110070: ST_TO_ADDR
// f_spacetime := false ;
110071: LD_ADDR_VAR 0 24
110075: PUSH
110076: LD_INT 0
110078: ST_TO_ADDR
// f_attack_depot := false ;
110079: LD_ADDR_VAR 0 25
110083: PUSH
110084: LD_INT 0
110086: ST_TO_ADDR
// f_crawl := false ;
110087: LD_ADDR_VAR 0 26
110091: PUSH
110092: LD_INT 0
110094: ST_TO_ADDR
// end ; if f_heal then
110095: LD_VAR 0 23
110099: IFFALSE 110126
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
110101: LD_ADDR_VAR 0 31
110105: PUSH
110106: LD_VAR 0 4
110110: PPUSH
110111: LD_INT 25
110113: PUSH
110114: LD_INT 4
110116: PUSH
110117: EMPTY
110118: LIST
110119: LIST
110120: PPUSH
110121: CALL_OW 72
110125: ST_TO_ADDR
// if f_repair then
110126: LD_VAR 0 22
110130: IFFALSE 110157
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
110132: LD_ADDR_VAR 0 33
110136: PUSH
110137: LD_VAR 0 4
110141: PPUSH
110142: LD_INT 25
110144: PUSH
110145: LD_INT 3
110147: PUSH
110148: EMPTY
110149: LIST
110150: LIST
110151: PPUSH
110152: CALL_OW 72
110156: ST_TO_ADDR
// units_path := [ ] ;
110157: LD_ADDR_VAR 0 16
110161: PUSH
110162: EMPTY
110163: ST_TO_ADDR
// for i = 1 to group do
110164: LD_ADDR_VAR 0 7
110168: PUSH
110169: DOUBLE
110170: LD_INT 1
110172: DEC
110173: ST_TO_ADDR
110174: LD_VAR 0 4
110178: PUSH
110179: FOR_TO
110180: IFFALSE 110209
// units_path := Replace ( units_path , i , path ) ;
110182: LD_ADDR_VAR 0 16
110186: PUSH
110187: LD_VAR 0 16
110191: PPUSH
110192: LD_VAR 0 7
110196: PPUSH
110197: LD_VAR 0 5
110201: PPUSH
110202: CALL_OW 1
110206: ST_TO_ADDR
110207: GO 110179
110209: POP
110210: POP
// repeat for i = group downto 1 do
110211: LD_ADDR_VAR 0 7
110215: PUSH
110216: DOUBLE
110217: LD_VAR 0 4
110221: INC
110222: ST_TO_ADDR
110223: LD_INT 1
110225: PUSH
110226: FOR_DOWNTO
110227: IFFALSE 114349
// begin wait ( 5 ) ;
110229: LD_INT 5
110231: PPUSH
110232: CALL_OW 67
// tmp := [ ] ;
110236: LD_ADDR_VAR 0 14
110240: PUSH
110241: EMPTY
110242: ST_TO_ADDR
// attacking := false ;
110243: LD_ADDR_VAR 0 29
110247: PUSH
110248: LD_INT 0
110250: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
110251: LD_VAR 0 4
110255: PUSH
110256: LD_VAR 0 7
110260: ARRAY
110261: PPUSH
110262: CALL_OW 301
110266: PUSH
110267: LD_VAR 0 4
110271: PUSH
110272: LD_VAR 0 7
110276: ARRAY
110277: NOT
110278: OR
110279: IFFALSE 110388
// begin if GetType ( group [ i ] ) = unit_human then
110281: LD_VAR 0 4
110285: PUSH
110286: LD_VAR 0 7
110290: ARRAY
110291: PPUSH
110292: CALL_OW 247
110296: PUSH
110297: LD_INT 1
110299: EQUAL
110300: IFFALSE 110346
// begin to_heal := to_heal diff group [ i ] ;
110302: LD_ADDR_VAR 0 30
110306: PUSH
110307: LD_VAR 0 30
110311: PUSH
110312: LD_VAR 0 4
110316: PUSH
110317: LD_VAR 0 7
110321: ARRAY
110322: DIFF
110323: ST_TO_ADDR
// healers := healers diff group [ i ] ;
110324: LD_ADDR_VAR 0 31
110328: PUSH
110329: LD_VAR 0 31
110333: PUSH
110334: LD_VAR 0 4
110338: PUSH
110339: LD_VAR 0 7
110343: ARRAY
110344: DIFF
110345: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
110346: LD_ADDR_VAR 0 4
110350: PUSH
110351: LD_VAR 0 4
110355: PPUSH
110356: LD_VAR 0 7
110360: PPUSH
110361: CALL_OW 3
110365: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
110366: LD_ADDR_VAR 0 16
110370: PUSH
110371: LD_VAR 0 16
110375: PPUSH
110376: LD_VAR 0 7
110380: PPUSH
110381: CALL_OW 3
110385: ST_TO_ADDR
// continue ;
110386: GO 110226
// end ; if f_repair then
110388: LD_VAR 0 22
110392: IFFALSE 110881
// begin if GetType ( group [ i ] ) = unit_vehicle then
110394: LD_VAR 0 4
110398: PUSH
110399: LD_VAR 0 7
110403: ARRAY
110404: PPUSH
110405: CALL_OW 247
110409: PUSH
110410: LD_INT 2
110412: EQUAL
110413: IFFALSE 110603
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
110415: LD_VAR 0 4
110419: PUSH
110420: LD_VAR 0 7
110424: ARRAY
110425: PPUSH
110426: CALL_OW 256
110430: PUSH
110431: LD_INT 700
110433: LESS
110434: PUSH
110435: LD_VAR 0 4
110439: PUSH
110440: LD_VAR 0 7
110444: ARRAY
110445: PUSH
110446: LD_VAR 0 32
110450: IN
110451: NOT
110452: AND
110453: IFFALSE 110477
// to_repair := to_repair union group [ i ] ;
110455: LD_ADDR_VAR 0 32
110459: PUSH
110460: LD_VAR 0 32
110464: PUSH
110465: LD_VAR 0 4
110469: PUSH
110470: LD_VAR 0 7
110474: ARRAY
110475: UNION
110476: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
110477: LD_VAR 0 4
110481: PUSH
110482: LD_VAR 0 7
110486: ARRAY
110487: PPUSH
110488: CALL_OW 256
110492: PUSH
110493: LD_INT 1000
110495: EQUAL
110496: PUSH
110497: LD_VAR 0 4
110501: PUSH
110502: LD_VAR 0 7
110506: ARRAY
110507: PUSH
110508: LD_VAR 0 32
110512: IN
110513: AND
110514: IFFALSE 110538
// to_repair := to_repair diff group [ i ] ;
110516: LD_ADDR_VAR 0 32
110520: PUSH
110521: LD_VAR 0 32
110525: PUSH
110526: LD_VAR 0 4
110530: PUSH
110531: LD_VAR 0 7
110535: ARRAY
110536: DIFF
110537: ST_TO_ADDR
// if group [ i ] in to_repair then
110538: LD_VAR 0 4
110542: PUSH
110543: LD_VAR 0 7
110547: ARRAY
110548: PUSH
110549: LD_VAR 0 32
110553: IN
110554: IFFALSE 110601
// begin if not IsInArea ( group [ i ] , f_repair ) then
110556: LD_VAR 0 4
110560: PUSH
110561: LD_VAR 0 7
110565: ARRAY
110566: PPUSH
110567: LD_VAR 0 22
110571: PPUSH
110572: CALL_OW 308
110576: NOT
110577: IFFALSE 110599
// ComMoveToArea ( group [ i ] , f_repair ) ;
110579: LD_VAR 0 4
110583: PUSH
110584: LD_VAR 0 7
110588: ARRAY
110589: PPUSH
110590: LD_VAR 0 22
110594: PPUSH
110595: CALL_OW 113
// continue ;
110599: GO 110226
// end ; end else
110601: GO 110881
// if group [ i ] in repairs then
110603: LD_VAR 0 4
110607: PUSH
110608: LD_VAR 0 7
110612: ARRAY
110613: PUSH
110614: LD_VAR 0 33
110618: IN
110619: IFFALSE 110881
// begin if IsInUnit ( group [ i ] ) then
110621: LD_VAR 0 4
110625: PUSH
110626: LD_VAR 0 7
110630: ARRAY
110631: PPUSH
110632: CALL_OW 310
110636: IFFALSE 110704
// begin z := IsInUnit ( group [ i ] ) ;
110638: LD_ADDR_VAR 0 13
110642: PUSH
110643: LD_VAR 0 4
110647: PUSH
110648: LD_VAR 0 7
110652: ARRAY
110653: PPUSH
110654: CALL_OW 310
110658: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
110659: LD_VAR 0 13
110663: PUSH
110664: LD_VAR 0 32
110668: IN
110669: PUSH
110670: LD_VAR 0 13
110674: PPUSH
110675: LD_VAR 0 22
110679: PPUSH
110680: CALL_OW 308
110684: AND
110685: IFFALSE 110702
// ComExitVehicle ( group [ i ] ) ;
110687: LD_VAR 0 4
110691: PUSH
110692: LD_VAR 0 7
110696: ARRAY
110697: PPUSH
110698: CALL_OW 121
// end else
110702: GO 110881
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
110704: LD_ADDR_VAR 0 13
110708: PUSH
110709: LD_VAR 0 4
110713: PPUSH
110714: LD_INT 95
110716: PUSH
110717: LD_VAR 0 22
110721: PUSH
110722: EMPTY
110723: LIST
110724: LIST
110725: PUSH
110726: LD_INT 58
110728: PUSH
110729: EMPTY
110730: LIST
110731: PUSH
110732: EMPTY
110733: LIST
110734: LIST
110735: PPUSH
110736: CALL_OW 72
110740: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
110741: LD_VAR 0 4
110745: PUSH
110746: LD_VAR 0 7
110750: ARRAY
110751: PPUSH
110752: CALL_OW 314
110756: NOT
110757: IFFALSE 110879
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
110759: LD_ADDR_VAR 0 10
110763: PUSH
110764: LD_VAR 0 13
110768: PPUSH
110769: LD_VAR 0 4
110773: PUSH
110774: LD_VAR 0 7
110778: ARRAY
110779: PPUSH
110780: CALL_OW 74
110784: ST_TO_ADDR
// if not x then
110785: LD_VAR 0 10
110789: NOT
110790: IFFALSE 110794
// continue ;
110792: GO 110226
// if GetLives ( x ) < 1000 then
110794: LD_VAR 0 10
110798: PPUSH
110799: CALL_OW 256
110803: PUSH
110804: LD_INT 1000
110806: LESS
110807: IFFALSE 110831
// ComRepairVehicle ( group [ i ] , x ) else
110809: LD_VAR 0 4
110813: PUSH
110814: LD_VAR 0 7
110818: ARRAY
110819: PPUSH
110820: LD_VAR 0 10
110824: PPUSH
110825: CALL_OW 129
110829: GO 110879
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
110831: LD_VAR 0 23
110835: PUSH
110836: LD_VAR 0 4
110840: PUSH
110841: LD_VAR 0 7
110845: ARRAY
110846: PPUSH
110847: CALL_OW 256
110851: PUSH
110852: LD_INT 1000
110854: LESS
110855: AND
110856: NOT
110857: IFFALSE 110879
// ComEnterUnit ( group [ i ] , x ) ;
110859: LD_VAR 0 4
110863: PUSH
110864: LD_VAR 0 7
110868: ARRAY
110869: PPUSH
110870: LD_VAR 0 10
110874: PPUSH
110875: CALL_OW 120
// end ; continue ;
110879: GO 110226
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
110881: LD_VAR 0 23
110885: PUSH
110886: LD_VAR 0 4
110890: PUSH
110891: LD_VAR 0 7
110895: ARRAY
110896: PPUSH
110897: CALL_OW 247
110901: PUSH
110902: LD_INT 1
110904: EQUAL
110905: AND
110906: IFFALSE 111384
// begin if group [ i ] in healers then
110908: LD_VAR 0 4
110912: PUSH
110913: LD_VAR 0 7
110917: ARRAY
110918: PUSH
110919: LD_VAR 0 31
110923: IN
110924: IFFALSE 111197
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
110926: LD_VAR 0 4
110930: PUSH
110931: LD_VAR 0 7
110935: ARRAY
110936: PPUSH
110937: LD_VAR 0 23
110941: PPUSH
110942: CALL_OW 308
110946: NOT
110947: PUSH
110948: LD_VAR 0 4
110952: PUSH
110953: LD_VAR 0 7
110957: ARRAY
110958: PPUSH
110959: CALL_OW 314
110963: NOT
110964: AND
110965: IFFALSE 110989
// ComMoveToArea ( group [ i ] , f_heal ) else
110967: LD_VAR 0 4
110971: PUSH
110972: LD_VAR 0 7
110976: ARRAY
110977: PPUSH
110978: LD_VAR 0 23
110982: PPUSH
110983: CALL_OW 113
110987: GO 111195
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
110989: LD_VAR 0 4
110993: PUSH
110994: LD_VAR 0 7
110998: ARRAY
110999: PPUSH
111000: CALL 53952 0 1
111004: PPUSH
111005: CALL_OW 256
111009: PUSH
111010: LD_INT 1000
111012: EQUAL
111013: IFFALSE 111032
// ComStop ( group [ i ] ) else
111015: LD_VAR 0 4
111019: PUSH
111020: LD_VAR 0 7
111024: ARRAY
111025: PPUSH
111026: CALL_OW 141
111030: GO 111195
// if not HasTask ( group [ i ] ) and to_heal then
111032: LD_VAR 0 4
111036: PUSH
111037: LD_VAR 0 7
111041: ARRAY
111042: PPUSH
111043: CALL_OW 314
111047: NOT
111048: PUSH
111049: LD_VAR 0 30
111053: AND
111054: IFFALSE 111195
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
111056: LD_ADDR_VAR 0 13
111060: PUSH
111061: LD_VAR 0 30
111065: PPUSH
111066: LD_INT 3
111068: PUSH
111069: LD_INT 54
111071: PUSH
111072: EMPTY
111073: LIST
111074: PUSH
111075: EMPTY
111076: LIST
111077: LIST
111078: PPUSH
111079: CALL_OW 72
111083: PPUSH
111084: LD_VAR 0 4
111088: PUSH
111089: LD_VAR 0 7
111093: ARRAY
111094: PPUSH
111095: CALL_OW 74
111099: ST_TO_ADDR
// if z then
111100: LD_VAR 0 13
111104: IFFALSE 111195
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
111106: LD_INT 91
111108: PUSH
111109: LD_VAR 0 13
111113: PUSH
111114: LD_INT 10
111116: PUSH
111117: EMPTY
111118: LIST
111119: LIST
111120: LIST
111121: PUSH
111122: LD_INT 81
111124: PUSH
111125: LD_VAR 0 13
111129: PPUSH
111130: CALL_OW 255
111134: PUSH
111135: EMPTY
111136: LIST
111137: LIST
111138: PUSH
111139: EMPTY
111140: LIST
111141: LIST
111142: PPUSH
111143: CALL_OW 69
111147: PUSH
111148: LD_INT 0
111150: EQUAL
111151: IFFALSE 111175
// ComHeal ( group [ i ] , z ) else
111153: LD_VAR 0 4
111157: PUSH
111158: LD_VAR 0 7
111162: ARRAY
111163: PPUSH
111164: LD_VAR 0 13
111168: PPUSH
111169: CALL_OW 128
111173: GO 111195
// ComMoveToArea ( group [ i ] , f_heal ) ;
111175: LD_VAR 0 4
111179: PUSH
111180: LD_VAR 0 7
111184: ARRAY
111185: PPUSH
111186: LD_VAR 0 23
111190: PPUSH
111191: CALL_OW 113
// end ; continue ;
111195: GO 110226
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
111197: LD_VAR 0 4
111201: PUSH
111202: LD_VAR 0 7
111206: ARRAY
111207: PPUSH
111208: CALL_OW 256
111212: PUSH
111213: LD_INT 700
111215: LESS
111216: PUSH
111217: LD_VAR 0 4
111221: PUSH
111222: LD_VAR 0 7
111226: ARRAY
111227: PUSH
111228: LD_VAR 0 30
111232: IN
111233: NOT
111234: AND
111235: IFFALSE 111259
// to_heal := to_heal union group [ i ] ;
111237: LD_ADDR_VAR 0 30
111241: PUSH
111242: LD_VAR 0 30
111246: PUSH
111247: LD_VAR 0 4
111251: PUSH
111252: LD_VAR 0 7
111256: ARRAY
111257: UNION
111258: ST_TO_ADDR
// if group [ i ] in to_heal then
111259: LD_VAR 0 4
111263: PUSH
111264: LD_VAR 0 7
111268: ARRAY
111269: PUSH
111270: LD_VAR 0 30
111274: IN
111275: IFFALSE 111384
// begin if GetLives ( group [ i ] ) = 1000 then
111277: LD_VAR 0 4
111281: PUSH
111282: LD_VAR 0 7
111286: ARRAY
111287: PPUSH
111288: CALL_OW 256
111292: PUSH
111293: LD_INT 1000
111295: EQUAL
111296: IFFALSE 111322
// to_heal := to_heal diff group [ i ] else
111298: LD_ADDR_VAR 0 30
111302: PUSH
111303: LD_VAR 0 30
111307: PUSH
111308: LD_VAR 0 4
111312: PUSH
111313: LD_VAR 0 7
111317: ARRAY
111318: DIFF
111319: ST_TO_ADDR
111320: GO 111384
// begin if not IsInArea ( group [ i ] , to_heal ) then
111322: LD_VAR 0 4
111326: PUSH
111327: LD_VAR 0 7
111331: ARRAY
111332: PPUSH
111333: LD_VAR 0 30
111337: PPUSH
111338: CALL_OW 308
111342: NOT
111343: IFFALSE 111367
// ComMoveToArea ( group [ i ] , f_heal ) else
111345: LD_VAR 0 4
111349: PUSH
111350: LD_VAR 0 7
111354: ARRAY
111355: PPUSH
111356: LD_VAR 0 23
111360: PPUSH
111361: CALL_OW 113
111365: GO 111382
// ComHold ( group [ i ] ) ;
111367: LD_VAR 0 4
111371: PUSH
111372: LD_VAR 0 7
111376: ARRAY
111377: PPUSH
111378: CALL_OW 140
// continue ;
111382: GO 110226
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
111384: LD_VAR 0 4
111388: PUSH
111389: LD_VAR 0 7
111393: ARRAY
111394: PPUSH
111395: LD_INT 10
111397: PPUSH
111398: CALL 52372 0 2
111402: NOT
111403: PUSH
111404: LD_VAR 0 16
111408: PUSH
111409: LD_VAR 0 7
111413: ARRAY
111414: PUSH
111415: EMPTY
111416: EQUAL
111417: NOT
111418: AND
111419: IFFALSE 111685
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
111421: LD_VAR 0 4
111425: PUSH
111426: LD_VAR 0 7
111430: ARRAY
111431: PPUSH
111432: CALL_OW 262
111436: PUSH
111437: LD_INT 1
111439: PUSH
111440: LD_INT 2
111442: PUSH
111443: EMPTY
111444: LIST
111445: LIST
111446: IN
111447: IFFALSE 111488
// if GetFuel ( group [ i ] ) < 10 then
111449: LD_VAR 0 4
111453: PUSH
111454: LD_VAR 0 7
111458: ARRAY
111459: PPUSH
111460: CALL_OW 261
111464: PUSH
111465: LD_INT 10
111467: LESS
111468: IFFALSE 111488
// SetFuel ( group [ i ] , 12 ) ;
111470: LD_VAR 0 4
111474: PUSH
111475: LD_VAR 0 7
111479: ARRAY
111480: PPUSH
111481: LD_INT 12
111483: PPUSH
111484: CALL_OW 240
// if units_path [ i ] then
111488: LD_VAR 0 16
111492: PUSH
111493: LD_VAR 0 7
111497: ARRAY
111498: IFFALSE 111683
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
111500: LD_VAR 0 4
111504: PUSH
111505: LD_VAR 0 7
111509: ARRAY
111510: PPUSH
111511: LD_VAR 0 16
111515: PUSH
111516: LD_VAR 0 7
111520: ARRAY
111521: PUSH
111522: LD_INT 1
111524: ARRAY
111525: PUSH
111526: LD_INT 1
111528: ARRAY
111529: PPUSH
111530: LD_VAR 0 16
111534: PUSH
111535: LD_VAR 0 7
111539: ARRAY
111540: PUSH
111541: LD_INT 1
111543: ARRAY
111544: PUSH
111545: LD_INT 2
111547: ARRAY
111548: PPUSH
111549: CALL_OW 297
111553: PUSH
111554: LD_INT 6
111556: GREATER
111557: IFFALSE 111632
// begin if not HasTask ( group [ i ] ) then
111559: LD_VAR 0 4
111563: PUSH
111564: LD_VAR 0 7
111568: ARRAY
111569: PPUSH
111570: CALL_OW 314
111574: NOT
111575: IFFALSE 111630
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
111577: LD_VAR 0 4
111581: PUSH
111582: LD_VAR 0 7
111586: ARRAY
111587: PPUSH
111588: LD_VAR 0 16
111592: PUSH
111593: LD_VAR 0 7
111597: ARRAY
111598: PUSH
111599: LD_INT 1
111601: ARRAY
111602: PUSH
111603: LD_INT 1
111605: ARRAY
111606: PPUSH
111607: LD_VAR 0 16
111611: PUSH
111612: LD_VAR 0 7
111616: ARRAY
111617: PUSH
111618: LD_INT 1
111620: ARRAY
111621: PUSH
111622: LD_INT 2
111624: ARRAY
111625: PPUSH
111626: CALL_OW 114
// end else
111630: GO 111683
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
111632: LD_ADDR_VAR 0 15
111636: PUSH
111637: LD_VAR 0 16
111641: PUSH
111642: LD_VAR 0 7
111646: ARRAY
111647: PPUSH
111648: LD_INT 1
111650: PPUSH
111651: CALL_OW 3
111655: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
111656: LD_ADDR_VAR 0 16
111660: PUSH
111661: LD_VAR 0 16
111665: PPUSH
111666: LD_VAR 0 7
111670: PPUSH
111671: LD_VAR 0 15
111675: PPUSH
111676: CALL_OW 1
111680: ST_TO_ADDR
// continue ;
111681: GO 110226
// end ; end ; end else
111683: GO 114347
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
111685: LD_ADDR_VAR 0 14
111689: PUSH
111690: LD_INT 81
111692: PUSH
111693: LD_VAR 0 4
111697: PUSH
111698: LD_VAR 0 7
111702: ARRAY
111703: PPUSH
111704: CALL_OW 255
111708: PUSH
111709: EMPTY
111710: LIST
111711: LIST
111712: PPUSH
111713: CALL_OW 69
111717: ST_TO_ADDR
// if not tmp then
111718: LD_VAR 0 14
111722: NOT
111723: IFFALSE 111727
// continue ;
111725: GO 110226
// if f_ignore_area then
111727: LD_VAR 0 17
111731: IFFALSE 111819
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
111733: LD_ADDR_VAR 0 15
111737: PUSH
111738: LD_VAR 0 14
111742: PPUSH
111743: LD_INT 3
111745: PUSH
111746: LD_INT 92
111748: PUSH
111749: LD_VAR 0 17
111753: PUSH
111754: LD_INT 1
111756: ARRAY
111757: PUSH
111758: LD_VAR 0 17
111762: PUSH
111763: LD_INT 2
111765: ARRAY
111766: PUSH
111767: LD_VAR 0 17
111771: PUSH
111772: LD_INT 3
111774: ARRAY
111775: PUSH
111776: EMPTY
111777: LIST
111778: LIST
111779: LIST
111780: LIST
111781: PUSH
111782: EMPTY
111783: LIST
111784: LIST
111785: PPUSH
111786: CALL_OW 72
111790: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
111791: LD_VAR 0 14
111795: PUSH
111796: LD_VAR 0 15
111800: DIFF
111801: IFFALSE 111819
// tmp := tmp diff tmp2 ;
111803: LD_ADDR_VAR 0 14
111807: PUSH
111808: LD_VAR 0 14
111812: PUSH
111813: LD_VAR 0 15
111817: DIFF
111818: ST_TO_ADDR
// end ; if not f_murder then
111819: LD_VAR 0 20
111823: NOT
111824: IFFALSE 111882
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
111826: LD_ADDR_VAR 0 15
111830: PUSH
111831: LD_VAR 0 14
111835: PPUSH
111836: LD_INT 3
111838: PUSH
111839: LD_INT 50
111841: PUSH
111842: EMPTY
111843: LIST
111844: PUSH
111845: EMPTY
111846: LIST
111847: LIST
111848: PPUSH
111849: CALL_OW 72
111853: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
111854: LD_VAR 0 14
111858: PUSH
111859: LD_VAR 0 15
111863: DIFF
111864: IFFALSE 111882
// tmp := tmp diff tmp2 ;
111866: LD_ADDR_VAR 0 14
111870: PUSH
111871: LD_VAR 0 14
111875: PUSH
111876: LD_VAR 0 15
111880: DIFF
111881: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
111882: LD_ADDR_VAR 0 14
111886: PUSH
111887: LD_VAR 0 4
111891: PUSH
111892: LD_VAR 0 7
111896: ARRAY
111897: PPUSH
111898: LD_VAR 0 14
111902: PPUSH
111903: LD_INT 1
111905: PPUSH
111906: LD_INT 1
111908: PPUSH
111909: CALL 25307 0 4
111913: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
111914: LD_VAR 0 4
111918: PUSH
111919: LD_VAR 0 7
111923: ARRAY
111924: PPUSH
111925: CALL_OW 257
111929: PUSH
111930: LD_INT 1
111932: EQUAL
111933: IFFALSE 112381
// begin if WantPlant ( group [ i ] ) then
111935: LD_VAR 0 4
111939: PUSH
111940: LD_VAR 0 7
111944: ARRAY
111945: PPUSH
111946: CALL 24808 0 1
111950: IFFALSE 111954
// continue ;
111952: GO 110226
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
111954: LD_VAR 0 18
111958: PUSH
111959: LD_VAR 0 4
111963: PUSH
111964: LD_VAR 0 7
111968: ARRAY
111969: PPUSH
111970: CALL_OW 310
111974: NOT
111975: AND
111976: PUSH
111977: LD_VAR 0 14
111981: PUSH
111982: LD_INT 1
111984: ARRAY
111985: PUSH
111986: LD_VAR 0 14
111990: PPUSH
111991: LD_INT 21
111993: PUSH
111994: LD_INT 2
111996: PUSH
111997: EMPTY
111998: LIST
111999: LIST
112000: PUSH
112001: LD_INT 58
112003: PUSH
112004: EMPTY
112005: LIST
112006: PUSH
112007: EMPTY
112008: LIST
112009: LIST
112010: PPUSH
112011: CALL_OW 72
112015: IN
112016: AND
112017: IFFALSE 112053
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
112019: LD_VAR 0 4
112023: PUSH
112024: LD_VAR 0 7
112028: ARRAY
112029: PPUSH
112030: LD_VAR 0 14
112034: PUSH
112035: LD_INT 1
112037: ARRAY
112038: PPUSH
112039: CALL_OW 120
// attacking := true ;
112043: LD_ADDR_VAR 0 29
112047: PUSH
112048: LD_INT 1
112050: ST_TO_ADDR
// continue ;
112051: GO 110226
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
112053: LD_VAR 0 26
112057: PUSH
112058: LD_VAR 0 4
112062: PUSH
112063: LD_VAR 0 7
112067: ARRAY
112068: PPUSH
112069: CALL_OW 257
112073: PUSH
112074: LD_INT 1
112076: EQUAL
112077: AND
112078: PUSH
112079: LD_VAR 0 4
112083: PUSH
112084: LD_VAR 0 7
112088: ARRAY
112089: PPUSH
112090: CALL_OW 256
112094: PUSH
112095: LD_INT 800
112097: LESS
112098: AND
112099: PUSH
112100: LD_VAR 0 4
112104: PUSH
112105: LD_VAR 0 7
112109: ARRAY
112110: PPUSH
112111: CALL_OW 318
112115: NOT
112116: AND
112117: IFFALSE 112134
// ComCrawl ( group [ i ] ) ;
112119: LD_VAR 0 4
112123: PUSH
112124: LD_VAR 0 7
112128: ARRAY
112129: PPUSH
112130: CALL_OW 137
// if f_mines then
112134: LD_VAR 0 21
112138: IFFALSE 112381
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
112140: LD_VAR 0 14
112144: PUSH
112145: LD_INT 1
112147: ARRAY
112148: PPUSH
112149: CALL_OW 247
112153: PUSH
112154: LD_INT 3
112156: EQUAL
112157: PUSH
112158: LD_VAR 0 14
112162: PUSH
112163: LD_INT 1
112165: ARRAY
112166: PUSH
112167: LD_VAR 0 27
112171: IN
112172: NOT
112173: AND
112174: IFFALSE 112381
// begin x := GetX ( tmp [ 1 ] ) ;
112176: LD_ADDR_VAR 0 10
112180: PUSH
112181: LD_VAR 0 14
112185: PUSH
112186: LD_INT 1
112188: ARRAY
112189: PPUSH
112190: CALL_OW 250
112194: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
112195: LD_ADDR_VAR 0 11
112199: PUSH
112200: LD_VAR 0 14
112204: PUSH
112205: LD_INT 1
112207: ARRAY
112208: PPUSH
112209: CALL_OW 251
112213: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
112214: LD_ADDR_VAR 0 12
112218: PUSH
112219: LD_VAR 0 4
112223: PUSH
112224: LD_VAR 0 7
112228: ARRAY
112229: PPUSH
112230: CALL 52457 0 1
112234: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
112235: LD_VAR 0 4
112239: PUSH
112240: LD_VAR 0 7
112244: ARRAY
112245: PPUSH
112246: LD_VAR 0 10
112250: PPUSH
112251: LD_VAR 0 11
112255: PPUSH
112256: LD_VAR 0 14
112260: PUSH
112261: LD_INT 1
112263: ARRAY
112264: PPUSH
112265: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
112269: LD_VAR 0 4
112273: PUSH
112274: LD_VAR 0 7
112278: ARRAY
112279: PPUSH
112280: LD_VAR 0 10
112284: PPUSH
112285: LD_VAR 0 12
112289: PPUSH
112290: LD_INT 7
112292: PPUSH
112293: CALL_OW 272
112297: PPUSH
112298: LD_VAR 0 11
112302: PPUSH
112303: LD_VAR 0 12
112307: PPUSH
112308: LD_INT 7
112310: PPUSH
112311: CALL_OW 273
112315: PPUSH
112316: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
112320: LD_VAR 0 4
112324: PUSH
112325: LD_VAR 0 7
112329: ARRAY
112330: PPUSH
112331: LD_INT 71
112333: PPUSH
112334: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
112338: LD_ADDR_VAR 0 27
112342: PUSH
112343: LD_VAR 0 27
112347: PPUSH
112348: LD_VAR 0 27
112352: PUSH
112353: LD_INT 1
112355: PLUS
112356: PPUSH
112357: LD_VAR 0 14
112361: PUSH
112362: LD_INT 1
112364: ARRAY
112365: PPUSH
112366: CALL_OW 1
112370: ST_TO_ADDR
// attacking := true ;
112371: LD_ADDR_VAR 0 29
112375: PUSH
112376: LD_INT 1
112378: ST_TO_ADDR
// continue ;
112379: GO 110226
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
112381: LD_VAR 0 4
112385: PUSH
112386: LD_VAR 0 7
112390: ARRAY
112391: PPUSH
112392: CALL_OW 257
112396: PUSH
112397: LD_INT 17
112399: EQUAL
112400: PUSH
112401: LD_VAR 0 4
112405: PUSH
112406: LD_VAR 0 7
112410: ARRAY
112411: PPUSH
112412: CALL_OW 110
112416: PUSH
112417: LD_INT 71
112419: EQUAL
112420: NOT
112421: AND
112422: IFFALSE 112568
// begin attacking := false ;
112424: LD_ADDR_VAR 0 29
112428: PUSH
112429: LD_INT 0
112431: ST_TO_ADDR
// k := 5 ;
112432: LD_ADDR_VAR 0 9
112436: PUSH
112437: LD_INT 5
112439: ST_TO_ADDR
// if tmp < k then
112440: LD_VAR 0 14
112444: PUSH
112445: LD_VAR 0 9
112449: LESS
112450: IFFALSE 112462
// k := tmp ;
112452: LD_ADDR_VAR 0 9
112456: PUSH
112457: LD_VAR 0 14
112461: ST_TO_ADDR
// for j = 1 to k do
112462: LD_ADDR_VAR 0 8
112466: PUSH
112467: DOUBLE
112468: LD_INT 1
112470: DEC
112471: ST_TO_ADDR
112472: LD_VAR 0 9
112476: PUSH
112477: FOR_TO
112478: IFFALSE 112566
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
112480: LD_VAR 0 14
112484: PUSH
112485: LD_VAR 0 8
112489: ARRAY
112490: PUSH
112491: LD_VAR 0 14
112495: PPUSH
112496: LD_INT 58
112498: PUSH
112499: EMPTY
112500: LIST
112501: PPUSH
112502: CALL_OW 72
112506: IN
112507: NOT
112508: IFFALSE 112564
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
112510: LD_VAR 0 4
112514: PUSH
112515: LD_VAR 0 7
112519: ARRAY
112520: PPUSH
112521: LD_VAR 0 14
112525: PUSH
112526: LD_VAR 0 8
112530: ARRAY
112531: PPUSH
112532: CALL_OW 115
// attacking := true ;
112536: LD_ADDR_VAR 0 29
112540: PUSH
112541: LD_INT 1
112543: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
112544: LD_VAR 0 4
112548: PUSH
112549: LD_VAR 0 7
112553: ARRAY
112554: PPUSH
112555: LD_INT 71
112557: PPUSH
112558: CALL_OW 109
// continue ;
112562: GO 112477
// end ; end ;
112564: GO 112477
112566: POP
112567: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
112568: LD_VAR 0 4
112572: PUSH
112573: LD_VAR 0 7
112577: ARRAY
112578: PPUSH
112579: CALL_OW 257
112583: PUSH
112584: LD_INT 8
112586: EQUAL
112587: PUSH
112588: LD_VAR 0 4
112592: PUSH
112593: LD_VAR 0 7
112597: ARRAY
112598: PPUSH
112599: CALL_OW 264
112603: PUSH
112604: LD_INT 28
112606: PUSH
112607: LD_INT 45
112609: PUSH
112610: LD_INT 7
112612: PUSH
112613: LD_INT 47
112615: PUSH
112616: EMPTY
112617: LIST
112618: LIST
112619: LIST
112620: LIST
112621: IN
112622: OR
112623: IFFALSE 112879
// begin attacking := false ;
112625: LD_ADDR_VAR 0 29
112629: PUSH
112630: LD_INT 0
112632: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
112633: LD_VAR 0 14
112637: PUSH
112638: LD_INT 1
112640: ARRAY
112641: PPUSH
112642: CALL_OW 266
112646: PUSH
112647: LD_INT 32
112649: PUSH
112650: LD_INT 31
112652: PUSH
112653: LD_INT 33
112655: PUSH
112656: LD_INT 4
112658: PUSH
112659: LD_INT 5
112661: PUSH
112662: EMPTY
112663: LIST
112664: LIST
112665: LIST
112666: LIST
112667: LIST
112668: IN
112669: IFFALSE 112855
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
112671: LD_ADDR_VAR 0 9
112675: PUSH
112676: LD_VAR 0 14
112680: PUSH
112681: LD_INT 1
112683: ARRAY
112684: PPUSH
112685: CALL_OW 266
112689: PPUSH
112690: LD_VAR 0 14
112694: PUSH
112695: LD_INT 1
112697: ARRAY
112698: PPUSH
112699: CALL_OW 250
112703: PPUSH
112704: LD_VAR 0 14
112708: PUSH
112709: LD_INT 1
112711: ARRAY
112712: PPUSH
112713: CALL_OW 251
112717: PPUSH
112718: LD_VAR 0 14
112722: PUSH
112723: LD_INT 1
112725: ARRAY
112726: PPUSH
112727: CALL_OW 254
112731: PPUSH
112732: LD_VAR 0 14
112736: PUSH
112737: LD_INT 1
112739: ARRAY
112740: PPUSH
112741: CALL_OW 248
112745: PPUSH
112746: LD_INT 0
112748: PPUSH
112749: CALL 33827 0 6
112753: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
112754: LD_ADDR_VAR 0 8
112758: PUSH
112759: LD_VAR 0 4
112763: PUSH
112764: LD_VAR 0 7
112768: ARRAY
112769: PPUSH
112770: LD_VAR 0 9
112774: PPUSH
112775: CALL 52497 0 2
112779: ST_TO_ADDR
// if j then
112780: LD_VAR 0 8
112784: IFFALSE 112853
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
112786: LD_VAR 0 8
112790: PUSH
112791: LD_INT 1
112793: ARRAY
112794: PPUSH
112795: LD_VAR 0 8
112799: PUSH
112800: LD_INT 2
112802: ARRAY
112803: PPUSH
112804: CALL_OW 488
112808: IFFALSE 112853
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
112810: LD_VAR 0 4
112814: PUSH
112815: LD_VAR 0 7
112819: ARRAY
112820: PPUSH
112821: LD_VAR 0 8
112825: PUSH
112826: LD_INT 1
112828: ARRAY
112829: PPUSH
112830: LD_VAR 0 8
112834: PUSH
112835: LD_INT 2
112837: ARRAY
112838: PPUSH
112839: CALL_OW 116
// attacking := true ;
112843: LD_ADDR_VAR 0 29
112847: PUSH
112848: LD_INT 1
112850: ST_TO_ADDR
// continue ;
112851: GO 110226
// end ; end else
112853: GO 112879
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
112855: LD_VAR 0 4
112859: PUSH
112860: LD_VAR 0 7
112864: ARRAY
112865: PPUSH
112866: LD_VAR 0 14
112870: PUSH
112871: LD_INT 1
112873: ARRAY
112874: PPUSH
112875: CALL_OW 115
// end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
112879: LD_VAR 0 4
112883: PUSH
112884: LD_VAR 0 7
112888: ARRAY
112889: PPUSH
112890: CALL_OW 265
112894: PUSH
112895: LD_INT 11
112897: EQUAL
112898: IFFALSE 113176
// begin k := 10 ;
112900: LD_ADDR_VAR 0 9
112904: PUSH
112905: LD_INT 10
112907: ST_TO_ADDR
// x := 0 ;
112908: LD_ADDR_VAR 0 10
112912: PUSH
112913: LD_INT 0
112915: ST_TO_ADDR
// if tmp < k then
112916: LD_VAR 0 14
112920: PUSH
112921: LD_VAR 0 9
112925: LESS
112926: IFFALSE 112938
// k := tmp ;
112928: LD_ADDR_VAR 0 9
112932: PUSH
112933: LD_VAR 0 14
112937: ST_TO_ADDR
// for j = k downto 1 do
112938: LD_ADDR_VAR 0 8
112942: PUSH
112943: DOUBLE
112944: LD_VAR 0 9
112948: INC
112949: ST_TO_ADDR
112950: LD_INT 1
112952: PUSH
112953: FOR_DOWNTO
112954: IFFALSE 113029
// begin if GetType ( tmp [ j ] ) = unit_human then
112956: LD_VAR 0 14
112960: PUSH
112961: LD_VAR 0 8
112965: ARRAY
112966: PPUSH
112967: CALL_OW 247
112971: PUSH
112972: LD_INT 1
112974: EQUAL
112975: IFFALSE 113027
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
112977: LD_VAR 0 4
112981: PUSH
112982: LD_VAR 0 7
112986: ARRAY
112987: PPUSH
112988: LD_VAR 0 14
112992: PUSH
112993: LD_VAR 0 8
112997: ARRAY
112998: PPUSH
112999: CALL 52768 0 2
// x := tmp [ j ] ;
113003: LD_ADDR_VAR 0 10
113007: PUSH
113008: LD_VAR 0 14
113012: PUSH
113013: LD_VAR 0 8
113017: ARRAY
113018: ST_TO_ADDR
// attacking := true ;
113019: LD_ADDR_VAR 0 29
113023: PUSH
113024: LD_INT 1
113026: ST_TO_ADDR
// end ; end ;
113027: GO 112953
113029: POP
113030: POP
// if not x then
113031: LD_VAR 0 10
113035: NOT
113036: IFFALSE 113176
// begin attacking := true ;
113038: LD_ADDR_VAR 0 29
113042: PUSH
113043: LD_INT 1
113045: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
113046: LD_VAR 0 4
113050: PUSH
113051: LD_VAR 0 7
113055: ARRAY
113056: PPUSH
113057: CALL_OW 250
113061: PPUSH
113062: LD_VAR 0 4
113066: PUSH
113067: LD_VAR 0 7
113071: ARRAY
113072: PPUSH
113073: CALL_OW 251
113077: PPUSH
113078: CALL_OW 546
113082: PUSH
113083: LD_INT 2
113085: ARRAY
113086: PUSH
113087: LD_VAR 0 14
113091: PUSH
113092: LD_INT 1
113094: ARRAY
113095: PPUSH
113096: CALL_OW 250
113100: PPUSH
113101: LD_VAR 0 14
113105: PUSH
113106: LD_INT 1
113108: ARRAY
113109: PPUSH
113110: CALL_OW 251
113114: PPUSH
113115: CALL_OW 546
113119: PUSH
113120: LD_INT 2
113122: ARRAY
113123: EQUAL
113124: IFFALSE 113152
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
113126: LD_VAR 0 4
113130: PUSH
113131: LD_VAR 0 7
113135: ARRAY
113136: PPUSH
113137: LD_VAR 0 14
113141: PUSH
113142: LD_INT 1
113144: ARRAY
113145: PPUSH
113146: CALL 52768 0 2
113150: GO 113176
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
113152: LD_VAR 0 4
113156: PUSH
113157: LD_VAR 0 7
113161: ARRAY
113162: PPUSH
113163: LD_VAR 0 14
113167: PUSH
113168: LD_INT 1
113170: ARRAY
113171: PPUSH
113172: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
113176: LD_VAR 0 4
113180: PUSH
113181: LD_VAR 0 7
113185: ARRAY
113186: PPUSH
113187: CALL_OW 264
113191: PUSH
113192: LD_INT 29
113194: EQUAL
113195: IFFALSE 113561
// begin if WantsToAttack ( group [ i ] ) in bombed then
113197: LD_VAR 0 4
113201: PUSH
113202: LD_VAR 0 7
113206: ARRAY
113207: PPUSH
113208: CALL_OW 319
113212: PUSH
113213: LD_VAR 0 28
113217: IN
113218: IFFALSE 113222
// continue ;
113220: GO 110226
// k := 8 ;
113222: LD_ADDR_VAR 0 9
113226: PUSH
113227: LD_INT 8
113229: ST_TO_ADDR
// x := 0 ;
113230: LD_ADDR_VAR 0 10
113234: PUSH
113235: LD_INT 0
113237: ST_TO_ADDR
// if tmp < k then
113238: LD_VAR 0 14
113242: PUSH
113243: LD_VAR 0 9
113247: LESS
113248: IFFALSE 113260
// k := tmp ;
113250: LD_ADDR_VAR 0 9
113254: PUSH
113255: LD_VAR 0 14
113259: ST_TO_ADDR
// for j = 1 to k do
113260: LD_ADDR_VAR 0 8
113264: PUSH
113265: DOUBLE
113266: LD_INT 1
113268: DEC
113269: ST_TO_ADDR
113270: LD_VAR 0 9
113274: PUSH
113275: FOR_TO
113276: IFFALSE 113408
// begin if GetType ( tmp [ j ] ) = unit_building then
113278: LD_VAR 0 14
113282: PUSH
113283: LD_VAR 0 8
113287: ARRAY
113288: PPUSH
113289: CALL_OW 247
113293: PUSH
113294: LD_INT 3
113296: EQUAL
113297: IFFALSE 113406
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
113299: LD_VAR 0 14
113303: PUSH
113304: LD_VAR 0 8
113308: ARRAY
113309: PUSH
113310: LD_VAR 0 28
113314: IN
113315: NOT
113316: PUSH
113317: LD_VAR 0 14
113321: PUSH
113322: LD_VAR 0 8
113326: ARRAY
113327: PPUSH
113328: CALL_OW 313
113332: AND
113333: IFFALSE 113406
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
113335: LD_VAR 0 4
113339: PUSH
113340: LD_VAR 0 7
113344: ARRAY
113345: PPUSH
113346: LD_VAR 0 14
113350: PUSH
113351: LD_VAR 0 8
113355: ARRAY
113356: PPUSH
113357: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
113361: LD_ADDR_VAR 0 28
113365: PUSH
113366: LD_VAR 0 28
113370: PPUSH
113371: LD_VAR 0 28
113375: PUSH
113376: LD_INT 1
113378: PLUS
113379: PPUSH
113380: LD_VAR 0 14
113384: PUSH
113385: LD_VAR 0 8
113389: ARRAY
113390: PPUSH
113391: CALL_OW 1
113395: ST_TO_ADDR
// attacking := true ;
113396: LD_ADDR_VAR 0 29
113400: PUSH
113401: LD_INT 1
113403: ST_TO_ADDR
// break ;
113404: GO 113408
// end ; end ;
113406: GO 113275
113408: POP
113409: POP
// if not attacking and f_attack_depot then
113410: LD_VAR 0 29
113414: NOT
113415: PUSH
113416: LD_VAR 0 25
113420: AND
113421: IFFALSE 113516
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
113423: LD_ADDR_VAR 0 13
113427: PUSH
113428: LD_VAR 0 14
113432: PPUSH
113433: LD_INT 2
113435: PUSH
113436: LD_INT 30
113438: PUSH
113439: LD_INT 0
113441: PUSH
113442: EMPTY
113443: LIST
113444: LIST
113445: PUSH
113446: LD_INT 30
113448: PUSH
113449: LD_INT 1
113451: PUSH
113452: EMPTY
113453: LIST
113454: LIST
113455: PUSH
113456: EMPTY
113457: LIST
113458: LIST
113459: LIST
113460: PPUSH
113461: CALL_OW 72
113465: ST_TO_ADDR
// if z then
113466: LD_VAR 0 13
113470: IFFALSE 113516
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
113472: LD_VAR 0 4
113476: PUSH
113477: LD_VAR 0 7
113481: ARRAY
113482: PPUSH
113483: LD_VAR 0 13
113487: PPUSH
113488: LD_VAR 0 4
113492: PUSH
113493: LD_VAR 0 7
113497: ARRAY
113498: PPUSH
113499: CALL_OW 74
113503: PPUSH
113504: CALL_OW 115
// attacking := true ;
113508: LD_ADDR_VAR 0 29
113512: PUSH
113513: LD_INT 1
113515: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
113516: LD_VAR 0 4
113520: PUSH
113521: LD_VAR 0 7
113525: ARRAY
113526: PPUSH
113527: CALL_OW 256
113531: PUSH
113532: LD_INT 500
113534: LESS
113535: IFFALSE 113561
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
113537: LD_VAR 0 4
113541: PUSH
113542: LD_VAR 0 7
113546: ARRAY
113547: PPUSH
113548: LD_VAR 0 14
113552: PUSH
113553: LD_INT 1
113555: ARRAY
113556: PPUSH
113557: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
113561: LD_VAR 0 4
113565: PUSH
113566: LD_VAR 0 7
113570: ARRAY
113571: PPUSH
113572: CALL_OW 264
113576: PUSH
113577: LD_INT 49
113579: EQUAL
113580: IFFALSE 113701
// begin if not HasTask ( group [ i ] ) then
113582: LD_VAR 0 4
113586: PUSH
113587: LD_VAR 0 7
113591: ARRAY
113592: PPUSH
113593: CALL_OW 314
113597: NOT
113598: IFFALSE 113701
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
113600: LD_ADDR_VAR 0 9
113604: PUSH
113605: LD_INT 81
113607: PUSH
113608: LD_VAR 0 4
113612: PUSH
113613: LD_VAR 0 7
113617: ARRAY
113618: PPUSH
113619: CALL_OW 255
113623: PUSH
113624: EMPTY
113625: LIST
113626: LIST
113627: PPUSH
113628: CALL_OW 69
113632: PPUSH
113633: LD_VAR 0 4
113637: PUSH
113638: LD_VAR 0 7
113642: ARRAY
113643: PPUSH
113644: CALL_OW 74
113648: ST_TO_ADDR
// if k then
113649: LD_VAR 0 9
113653: IFFALSE 113701
// if GetDistUnits ( group [ i ] , k ) > 10 then
113655: LD_VAR 0 4
113659: PUSH
113660: LD_VAR 0 7
113664: ARRAY
113665: PPUSH
113666: LD_VAR 0 9
113670: PPUSH
113671: CALL_OW 296
113675: PUSH
113676: LD_INT 10
113678: GREATER
113679: IFFALSE 113701
// ComMoveUnit ( group [ i ] , k ) ;
113681: LD_VAR 0 4
113685: PUSH
113686: LD_VAR 0 7
113690: ARRAY
113691: PPUSH
113692: LD_VAR 0 9
113696: PPUSH
113697: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
113701: LD_VAR 0 4
113705: PUSH
113706: LD_VAR 0 7
113710: ARRAY
113711: PPUSH
113712: CALL_OW 256
113716: PUSH
113717: LD_INT 250
113719: LESS
113720: PUSH
113721: LD_VAR 0 4
113725: PUSH
113726: LD_VAR 0 7
113730: ARRAY
113731: PUSH
113732: LD_INT 21
113734: PUSH
113735: LD_INT 2
113737: PUSH
113738: EMPTY
113739: LIST
113740: LIST
113741: PUSH
113742: LD_INT 23
113744: PUSH
113745: LD_INT 2
113747: PUSH
113748: EMPTY
113749: LIST
113750: LIST
113751: PUSH
113752: EMPTY
113753: LIST
113754: LIST
113755: PPUSH
113756: CALL_OW 69
113760: IN
113761: AND
113762: IFFALSE 113887
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
113764: LD_ADDR_VAR 0 9
113768: PUSH
113769: LD_OWVAR 3
113773: PUSH
113774: LD_VAR 0 4
113778: PUSH
113779: LD_VAR 0 7
113783: ARRAY
113784: DIFF
113785: PPUSH
113786: LD_VAR 0 4
113790: PUSH
113791: LD_VAR 0 7
113795: ARRAY
113796: PPUSH
113797: CALL_OW 74
113801: ST_TO_ADDR
// if not k then
113802: LD_VAR 0 9
113806: NOT
113807: IFFALSE 113811
// continue ;
113809: GO 110226
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
113811: LD_VAR 0 9
113815: PUSH
113816: LD_INT 81
113818: PUSH
113819: LD_VAR 0 4
113823: PUSH
113824: LD_VAR 0 7
113828: ARRAY
113829: PPUSH
113830: CALL_OW 255
113834: PUSH
113835: EMPTY
113836: LIST
113837: LIST
113838: PPUSH
113839: CALL_OW 69
113843: IN
113844: PUSH
113845: LD_VAR 0 9
113849: PPUSH
113850: LD_VAR 0 4
113854: PUSH
113855: LD_VAR 0 7
113859: ARRAY
113860: PPUSH
113861: CALL_OW 296
113865: PUSH
113866: LD_INT 5
113868: LESS
113869: AND
113870: IFFALSE 113887
// ComAutodestruct ( group [ i ] ) ;
113872: LD_VAR 0 4
113876: PUSH
113877: LD_VAR 0 7
113881: ARRAY
113882: PPUSH
113883: CALL 52666 0 1
// end ; if f_attack_depot then
113887: LD_VAR 0 25
113891: IFFALSE 114003
// begin k := 6 ;
113893: LD_ADDR_VAR 0 9
113897: PUSH
113898: LD_INT 6
113900: ST_TO_ADDR
// if tmp < k then
113901: LD_VAR 0 14
113905: PUSH
113906: LD_VAR 0 9
113910: LESS
113911: IFFALSE 113923
// k := tmp ;
113913: LD_ADDR_VAR 0 9
113917: PUSH
113918: LD_VAR 0 14
113922: ST_TO_ADDR
// for j = 1 to k do
113923: LD_ADDR_VAR 0 8
113927: PUSH
113928: DOUBLE
113929: LD_INT 1
113931: DEC
113932: ST_TO_ADDR
113933: LD_VAR 0 9
113937: PUSH
113938: FOR_TO
113939: IFFALSE 114001
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
113941: LD_VAR 0 8
113945: PPUSH
113946: CALL_OW 266
113950: PUSH
113951: LD_INT 0
113953: PUSH
113954: LD_INT 1
113956: PUSH
113957: EMPTY
113958: LIST
113959: LIST
113960: IN
113961: IFFALSE 113999
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
113963: LD_VAR 0 4
113967: PUSH
113968: LD_VAR 0 7
113972: ARRAY
113973: PPUSH
113974: LD_VAR 0 14
113978: PUSH
113979: LD_VAR 0 8
113983: ARRAY
113984: PPUSH
113985: CALL_OW 115
// attacking := true ;
113989: LD_ADDR_VAR 0 29
113993: PUSH
113994: LD_INT 1
113996: ST_TO_ADDR
// break ;
113997: GO 114001
// end ;
113999: GO 113938
114001: POP
114002: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
114003: LD_VAR 0 4
114007: PUSH
114008: LD_VAR 0 7
114012: ARRAY
114013: PPUSH
114014: CALL_OW 302
114018: PUSH
114019: LD_VAR 0 29
114023: NOT
114024: AND
114025: IFFALSE 114347
// begin if GetTag ( group [ i ] ) = 71 then
114027: LD_VAR 0 4
114031: PUSH
114032: LD_VAR 0 7
114036: ARRAY
114037: PPUSH
114038: CALL_OW 110
114042: PUSH
114043: LD_INT 71
114045: EQUAL
114046: IFFALSE 114087
// begin if HasTask ( group [ i ] ) then
114048: LD_VAR 0 4
114052: PUSH
114053: LD_VAR 0 7
114057: ARRAY
114058: PPUSH
114059: CALL_OW 314
114063: IFFALSE 114069
// continue else
114065: GO 110226
114067: GO 114087
// SetTag ( group [ i ] , 0 ) ;
114069: LD_VAR 0 4
114073: PUSH
114074: LD_VAR 0 7
114078: ARRAY
114079: PPUSH
114080: LD_INT 0
114082: PPUSH
114083: CALL_OW 109
// end ; k := 8 ;
114087: LD_ADDR_VAR 0 9
114091: PUSH
114092: LD_INT 8
114094: ST_TO_ADDR
// x := 0 ;
114095: LD_ADDR_VAR 0 10
114099: PUSH
114100: LD_INT 0
114102: ST_TO_ADDR
// if tmp < k then
114103: LD_VAR 0 14
114107: PUSH
114108: LD_VAR 0 9
114112: LESS
114113: IFFALSE 114125
// k := tmp ;
114115: LD_ADDR_VAR 0 9
114119: PUSH
114120: LD_VAR 0 14
114124: ST_TO_ADDR
// for j = 1 to k do
114125: LD_ADDR_VAR 0 8
114129: PUSH
114130: DOUBLE
114131: LD_INT 1
114133: DEC
114134: ST_TO_ADDR
114135: LD_VAR 0 9
114139: PUSH
114140: FOR_TO
114141: IFFALSE 114239
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
114143: LD_VAR 0 14
114147: PUSH
114148: LD_VAR 0 8
114152: ARRAY
114153: PPUSH
114154: CALL_OW 247
114158: PUSH
114159: LD_INT 1
114161: EQUAL
114162: PUSH
114163: LD_VAR 0 14
114167: PUSH
114168: LD_VAR 0 8
114172: ARRAY
114173: PPUSH
114174: CALL_OW 256
114178: PUSH
114179: LD_INT 250
114181: LESS
114182: PUSH
114183: LD_VAR 0 20
114187: AND
114188: PUSH
114189: LD_VAR 0 20
114193: NOT
114194: PUSH
114195: LD_VAR 0 14
114199: PUSH
114200: LD_VAR 0 8
114204: ARRAY
114205: PPUSH
114206: CALL_OW 256
114210: PUSH
114211: LD_INT 250
114213: GREATEREQUAL
114214: AND
114215: OR
114216: AND
114217: IFFALSE 114237
// begin x := tmp [ j ] ;
114219: LD_ADDR_VAR 0 10
114223: PUSH
114224: LD_VAR 0 14
114228: PUSH
114229: LD_VAR 0 8
114233: ARRAY
114234: ST_TO_ADDR
// break ;
114235: GO 114239
// end ;
114237: GO 114140
114239: POP
114240: POP
// if x then
114241: LD_VAR 0 10
114245: IFFALSE 114269
// ComAttackUnit ( group [ i ] , x ) else
114247: LD_VAR 0 4
114251: PUSH
114252: LD_VAR 0 7
114256: ARRAY
114257: PPUSH
114258: LD_VAR 0 10
114262: PPUSH
114263: CALL_OW 115
114267: GO 114293
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
114269: LD_VAR 0 4
114273: PUSH
114274: LD_VAR 0 7
114278: ARRAY
114279: PPUSH
114280: LD_VAR 0 14
114284: PUSH
114285: LD_INT 1
114287: ARRAY
114288: PPUSH
114289: CALL_OW 115
// if not HasTask ( group [ i ] ) then
114293: LD_VAR 0 4
114297: PUSH
114298: LD_VAR 0 7
114302: ARRAY
114303: PPUSH
114304: CALL_OW 314
114308: NOT
114309: IFFALSE 114347
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
114311: LD_VAR 0 4
114315: PUSH
114316: LD_VAR 0 7
114320: ARRAY
114321: PPUSH
114322: LD_VAR 0 14
114326: PPUSH
114327: LD_VAR 0 4
114331: PUSH
114332: LD_VAR 0 7
114336: ARRAY
114337: PPUSH
114338: CALL_OW 74
114342: PPUSH
114343: CALL_OW 115
// end ; end ; end ;
114347: GO 110226
114349: POP
114350: POP
// wait ( 0 0$2 ) ;
114351: LD_INT 70
114353: PPUSH
114354: CALL_OW 67
// until not group or group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
114358: LD_VAR 0 4
114362: NOT
114363: PUSH
114364: LD_VAR 0 4
114368: PUSH
114369: EMPTY
114370: EQUAL
114371: OR
114372: PUSH
114373: LD_INT 81
114375: PUSH
114376: LD_VAR 0 35
114380: PUSH
114381: EMPTY
114382: LIST
114383: LIST
114384: PPUSH
114385: CALL_OW 69
114389: NOT
114390: OR
114391: IFFALSE 110211
// end ;
114393: LD_VAR 0 2
114397: RET
// export function BasicDefend ( base , solds ) ; var enemy , e , side , i , hex ; begin
114398: LD_INT 0
114400: PPUSH
114401: PPUSH
114402: PPUSH
114403: PPUSH
114404: PPUSH
114405: PPUSH
// if not base or not mc_bases [ base ] or not solds then
114406: LD_VAR 0 1
114410: NOT
114411: PUSH
114412: LD_EXP 50
114416: PUSH
114417: LD_VAR 0 1
114421: ARRAY
114422: NOT
114423: OR
114424: PUSH
114425: LD_VAR 0 2
114429: NOT
114430: OR
114431: IFFALSE 114435
// exit ;
114433: GO 114989
// side := mc_sides [ base ] ;
114435: LD_ADDR_VAR 0 6
114439: PUSH
114440: LD_EXP 76
114444: PUSH
114445: LD_VAR 0 1
114449: ARRAY
114450: ST_TO_ADDR
// if not side then
114451: LD_VAR 0 6
114455: NOT
114456: IFFALSE 114460
// exit ;
114458: GO 114989
// for i in solds do
114460: LD_ADDR_VAR 0 7
114464: PUSH
114465: LD_VAR 0 2
114469: PUSH
114470: FOR_IN
114471: IFFALSE 114532
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
114473: LD_VAR 0 7
114477: PPUSH
114478: CALL_OW 310
114482: PPUSH
114483: CALL_OW 266
114487: PUSH
114488: LD_INT 32
114490: PUSH
114491: LD_INT 31
114493: PUSH
114494: EMPTY
114495: LIST
114496: LIST
114497: IN
114498: IFFALSE 114518
// solds := solds diff i else
114500: LD_ADDR_VAR 0 2
114504: PUSH
114505: LD_VAR 0 2
114509: PUSH
114510: LD_VAR 0 7
114514: DIFF
114515: ST_TO_ADDR
114516: GO 114530
// SetTag ( i , 18 ) ;
114518: LD_VAR 0 7
114522: PPUSH
114523: LD_INT 18
114525: PPUSH
114526: CALL_OW 109
114530: GO 114470
114532: POP
114533: POP
// if not solds then
114534: LD_VAR 0 2
114538: NOT
114539: IFFALSE 114543
// exit ;
114541: GO 114989
// repeat wait ( 0 0$2 ) ;
114543: LD_INT 70
114545: PPUSH
114546: CALL_OW 67
// enemy := mc_scan [ base ] ;
114550: LD_ADDR_VAR 0 4
114554: PUSH
114555: LD_EXP 73
114559: PUSH
114560: LD_VAR 0 1
114564: ARRAY
114565: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
114566: LD_EXP 50
114570: PUSH
114571: LD_VAR 0 1
114575: ARRAY
114576: NOT
114577: PUSH
114578: LD_EXP 50
114582: PUSH
114583: LD_VAR 0 1
114587: ARRAY
114588: PUSH
114589: EMPTY
114590: EQUAL
114591: OR
114592: IFFALSE 114629
// begin for i in solds do
114594: LD_ADDR_VAR 0 7
114598: PUSH
114599: LD_VAR 0 2
114603: PUSH
114604: FOR_IN
114605: IFFALSE 114618
// ComStop ( i ) ;
114607: LD_VAR 0 7
114611: PPUSH
114612: CALL_OW 141
114616: GO 114604
114618: POP
114619: POP
// solds := [ ] ;
114620: LD_ADDR_VAR 0 2
114624: PUSH
114625: EMPTY
114626: ST_TO_ADDR
// exit ;
114627: GO 114989
// end ; for i in solds do
114629: LD_ADDR_VAR 0 7
114633: PUSH
114634: LD_VAR 0 2
114638: PUSH
114639: FOR_IN
114640: IFFALSE 114961
// begin if IsInUnit ( i ) then
114642: LD_VAR 0 7
114646: PPUSH
114647: CALL_OW 310
114651: IFFALSE 114662
// ComExitBuilding ( i ) ;
114653: LD_VAR 0 7
114657: PPUSH
114658: CALL_OW 122
// if GetLives ( i ) > 500 then
114662: LD_VAR 0 7
114666: PPUSH
114667: CALL_OW 256
114671: PUSH
114672: LD_INT 500
114674: GREATER
114675: IFFALSE 114728
// begin e := NearestUnitToUnit ( enemy , i ) ;
114677: LD_ADDR_VAR 0 5
114681: PUSH
114682: LD_VAR 0 4
114686: PPUSH
114687: LD_VAR 0 7
114691: PPUSH
114692: CALL_OW 74
114696: ST_TO_ADDR
// ComAgressiveMove ( i , GetX ( e ) , GetY ( e ) ) ;
114697: LD_VAR 0 7
114701: PPUSH
114702: LD_VAR 0 5
114706: PPUSH
114707: CALL_OW 250
114711: PPUSH
114712: LD_VAR 0 5
114716: PPUSH
114717: CALL_OW 251
114721: PPUSH
114722: CALL_OW 114
// end else
114726: GO 114959
// if GetDistUnits ( i , NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ) > 10 then
114728: LD_VAR 0 7
114732: PPUSH
114733: LD_EXP 50
114737: PUSH
114738: LD_VAR 0 1
114742: ARRAY
114743: PPUSH
114744: LD_INT 2
114746: PUSH
114747: LD_INT 30
114749: PUSH
114750: LD_INT 0
114752: PUSH
114753: EMPTY
114754: LIST
114755: LIST
114756: PUSH
114757: LD_INT 30
114759: PUSH
114760: LD_INT 1
114762: PUSH
114763: EMPTY
114764: LIST
114765: LIST
114766: PUSH
114767: LD_INT 30
114769: PUSH
114770: LD_INT 6
114772: PUSH
114773: EMPTY
114774: LIST
114775: LIST
114776: PUSH
114777: EMPTY
114778: LIST
114779: LIST
114780: LIST
114781: LIST
114782: PPUSH
114783: CALL_OW 72
114787: PPUSH
114788: LD_VAR 0 7
114792: PPUSH
114793: CALL_OW 74
114797: PPUSH
114798: CALL_OW 296
114802: PUSH
114803: LD_INT 10
114805: GREATER
114806: IFFALSE 114959
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
114808: LD_ADDR_VAR 0 8
114812: PUSH
114813: LD_EXP 50
114817: PUSH
114818: LD_VAR 0 1
114822: ARRAY
114823: PPUSH
114824: LD_INT 2
114826: PUSH
114827: LD_INT 30
114829: PUSH
114830: LD_INT 0
114832: PUSH
114833: EMPTY
114834: LIST
114835: LIST
114836: PUSH
114837: LD_INT 30
114839: PUSH
114840: LD_INT 1
114842: PUSH
114843: EMPTY
114844: LIST
114845: LIST
114846: PUSH
114847: LD_INT 30
114849: PUSH
114850: LD_INT 6
114852: PUSH
114853: EMPTY
114854: LIST
114855: LIST
114856: PUSH
114857: EMPTY
114858: LIST
114859: LIST
114860: LIST
114861: LIST
114862: PPUSH
114863: CALL_OW 72
114867: PPUSH
114868: LD_VAR 0 7
114872: PPUSH
114873: CALL_OW 74
114877: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
114878: LD_VAR 0 7
114882: PPUSH
114883: LD_VAR 0 8
114887: PPUSH
114888: CALL_OW 250
114892: PPUSH
114893: LD_INT 3
114895: PPUSH
114896: LD_INT 5
114898: PPUSH
114899: CALL_OW 272
114903: PPUSH
114904: LD_VAR 0 8
114908: PPUSH
114909: CALL_OW 251
114913: PPUSH
114914: LD_INT 3
114916: PPUSH
114917: LD_INT 5
114919: PPUSH
114920: CALL_OW 273
114924: PPUSH
114925: CALL_OW 111
// SetTag ( i , 0 ) ;
114929: LD_VAR 0 7
114933: PPUSH
114934: LD_INT 0
114936: PPUSH
114937: CALL_OW 109
// solds := solds diff i ;
114941: LD_ADDR_VAR 0 2
114945: PUSH
114946: LD_VAR 0 2
114950: PUSH
114951: LD_VAR 0 7
114955: DIFF
114956: ST_TO_ADDR
// continue ;
114957: GO 114639
// end ; end ;
114959: GO 114639
114961: POP
114962: POP
// until not solds or not enemy ;
114963: LD_VAR 0 2
114967: NOT
114968: PUSH
114969: LD_VAR 0 4
114973: NOT
114974: OR
114975: IFFALSE 114543
// MC_Reset ( base , 18 ) ;
114977: LD_VAR 0 1
114981: PPUSH
114982: LD_INT 18
114984: PPUSH
114985: CALL 64243 0 2
// end ;
114989: LD_VAR 0 3
114993: RET
// export function Defend ( base , defenders ) ; var i , j , x , depot , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend , class , enemy ; begin
114994: LD_INT 0
114996: PPUSH
114997: PPUSH
114998: PPUSH
114999: PPUSH
115000: PPUSH
115001: PPUSH
115002: PPUSH
115003: PPUSH
115004: PPUSH
115005: PPUSH
115006: PPUSH
115007: PPUSH
115008: PPUSH
115009: PPUSH
115010: PPUSH
115011: PPUSH
115012: PPUSH
115013: PPUSH
115014: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
115015: LD_ADDR_VAR 0 12
115019: PUSH
115020: LD_EXP 50
115024: PUSH
115025: LD_VAR 0 1
115029: ARRAY
115030: PPUSH
115031: LD_INT 25
115033: PUSH
115034: LD_INT 3
115036: PUSH
115037: EMPTY
115038: LIST
115039: LIST
115040: PPUSH
115041: CALL_OW 72
115045: ST_TO_ADDR
// if mc_remote_driver [ base ] then
115046: LD_EXP 90
115050: PUSH
115051: LD_VAR 0 1
115055: ARRAY
115056: IFFALSE 115080
// mechs := mechs diff mc_remote_driver [ base ] ;
115058: LD_ADDR_VAR 0 12
115062: PUSH
115063: LD_VAR 0 12
115067: PUSH
115068: LD_EXP 90
115072: PUSH
115073: LD_VAR 0 1
115077: ARRAY
115078: DIFF
115079: ST_TO_ADDR
// for i in mechs do
115080: LD_ADDR_VAR 0 4
115084: PUSH
115085: LD_VAR 0 12
115089: PUSH
115090: FOR_IN
115091: IFFALSE 115126
// if GetTag ( i ) > 0 then
115093: LD_VAR 0 4
115097: PPUSH
115098: CALL_OW 110
115102: PUSH
115103: LD_INT 0
115105: GREATER
115106: IFFALSE 115124
// mechs := mechs diff i ;
115108: LD_ADDR_VAR 0 12
115112: PUSH
115113: LD_VAR 0 12
115117: PUSH
115118: LD_VAR 0 4
115122: DIFF
115123: ST_TO_ADDR
115124: GO 115090
115126: POP
115127: POP
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
115128: LD_ADDR_VAR 0 8
115132: PUSH
115133: LD_EXP 50
115137: PUSH
115138: LD_VAR 0 1
115142: ARRAY
115143: PPUSH
115144: LD_INT 2
115146: PUSH
115147: LD_INT 25
115149: PUSH
115150: LD_INT 1
115152: PUSH
115153: EMPTY
115154: LIST
115155: LIST
115156: PUSH
115157: LD_INT 25
115159: PUSH
115160: LD_INT 5
115162: PUSH
115163: EMPTY
115164: LIST
115165: LIST
115166: PUSH
115167: LD_INT 25
115169: PUSH
115170: LD_INT 8
115172: PUSH
115173: EMPTY
115174: LIST
115175: LIST
115176: PUSH
115177: LD_INT 25
115179: PUSH
115180: LD_INT 9
115182: PUSH
115183: EMPTY
115184: LIST
115185: LIST
115186: PUSH
115187: EMPTY
115188: LIST
115189: LIST
115190: LIST
115191: LIST
115192: LIST
115193: PPUSH
115194: CALL_OW 72
115198: ST_TO_ADDR
// if not defenders and not solds then
115199: LD_VAR 0 2
115203: NOT
115204: PUSH
115205: LD_VAR 0 8
115209: NOT
115210: AND
115211: IFFALSE 115215
// exit ;
115213: GO 116985
// depot_under_attack := false ;
115215: LD_ADDR_VAR 0 16
115219: PUSH
115220: LD_INT 0
115222: ST_TO_ADDR
// sold_defenders := [ ] ;
115223: LD_ADDR_VAR 0 17
115227: PUSH
115228: EMPTY
115229: ST_TO_ADDR
// if mechs then
115230: LD_VAR 0 12
115234: IFFALSE 115387
// for i in UnitFilter ( defenders , [ f_type , unit_vehicle ] ) do
115236: LD_ADDR_VAR 0 4
115240: PUSH
115241: LD_VAR 0 2
115245: PPUSH
115246: LD_INT 21
115248: PUSH
115249: LD_INT 2
115251: PUSH
115252: EMPTY
115253: LIST
115254: LIST
115255: PPUSH
115256: CALL_OW 72
115260: PUSH
115261: FOR_IN
115262: IFFALSE 115385
// begin if GetTag ( i ) <> 20 then
115264: LD_VAR 0 4
115268: PPUSH
115269: CALL_OW 110
115273: PUSH
115274: LD_INT 20
115276: NONEQUAL
115277: IFFALSE 115291
// SetTag ( i , 20 ) ;
115279: LD_VAR 0 4
115283: PPUSH
115284: LD_INT 20
115286: PPUSH
115287: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) then
115291: LD_VAR 0 4
115295: PPUSH
115296: CALL_OW 263
115300: PUSH
115301: LD_INT 1
115303: EQUAL
115304: PUSH
115305: LD_VAR 0 4
115309: PPUSH
115310: CALL_OW 311
115314: NOT
115315: AND
115316: IFFALSE 115383
// begin un := mechs [ 1 ] ;
115318: LD_ADDR_VAR 0 10
115322: PUSH
115323: LD_VAR 0 12
115327: PUSH
115328: LD_INT 1
115330: ARRAY
115331: ST_TO_ADDR
// ComExit ( un ) ;
115332: LD_VAR 0 10
115336: PPUSH
115337: CALL 56955 0 1
// AddComEnterUnit ( un , i ) ;
115341: LD_VAR 0 10
115345: PPUSH
115346: LD_VAR 0 4
115350: PPUSH
115351: CALL_OW 180
// SetTag ( un , 19 ) ;
115355: LD_VAR 0 10
115359: PPUSH
115360: LD_INT 19
115362: PPUSH
115363: CALL_OW 109
// mechs := mechs diff un ;
115367: LD_ADDR_VAR 0 12
115371: PUSH
115372: LD_VAR 0 12
115376: PUSH
115377: LD_VAR 0 10
115381: DIFF
115382: ST_TO_ADDR
// end ; end ;
115383: GO 115261
115385: POP
115386: POP
// if solds then
115387: LD_VAR 0 8
115391: IFFALSE 115450
// for i in solds do
115393: LD_ADDR_VAR 0 4
115397: PUSH
115398: LD_VAR 0 8
115402: PUSH
115403: FOR_IN
115404: IFFALSE 115448
// if not GetTag ( i ) then
115406: LD_VAR 0 4
115410: PPUSH
115411: CALL_OW 110
115415: NOT
115416: IFFALSE 115446
// begin defenders := defenders union i ;
115418: LD_ADDR_VAR 0 2
115422: PUSH
115423: LD_VAR 0 2
115427: PUSH
115428: LD_VAR 0 4
115432: UNION
115433: ST_TO_ADDR
// SetTag ( i , 18 ) ;
115434: LD_VAR 0 4
115438: PPUSH
115439: LD_INT 18
115441: PPUSH
115442: CALL_OW 109
// end ;
115446: GO 115403
115448: POP
115449: POP
// repeat wait ( 0 0$2 ) ;
115450: LD_INT 70
115452: PPUSH
115453: CALL_OW 67
// enemy := mc_scan [ base ] ;
115457: LD_ADDR_VAR 0 21
115461: PUSH
115462: LD_EXP 73
115466: PUSH
115467: LD_VAR 0 1
115471: ARRAY
115472: ST_TO_ADDR
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
115473: LD_EXP 50
115477: PUSH
115478: LD_VAR 0 1
115482: ARRAY
115483: NOT
115484: PUSH
115485: LD_EXP 50
115489: PUSH
115490: LD_VAR 0 1
115494: ARRAY
115495: PUSH
115496: EMPTY
115497: EQUAL
115498: OR
115499: IFFALSE 115536
// begin for i in defenders do
115501: LD_ADDR_VAR 0 4
115505: PUSH
115506: LD_VAR 0 2
115510: PUSH
115511: FOR_IN
115512: IFFALSE 115525
// ComStop ( i ) ;
115514: LD_VAR 0 4
115518: PPUSH
115519: CALL_OW 141
115523: GO 115511
115525: POP
115526: POP
// defenders := [ ] ;
115527: LD_ADDR_VAR 0 2
115531: PUSH
115532: EMPTY
115533: ST_TO_ADDR
// exit ;
115534: GO 116985
// end ; for i in defenders do
115536: LD_ADDR_VAR 0 4
115540: PUSH
115541: LD_VAR 0 2
115545: PUSH
115546: FOR_IN
115547: IFFALSE 116445
// begin e := NearestUnitToUnit ( enemy , i ) ;
115549: LD_ADDR_VAR 0 13
115553: PUSH
115554: LD_VAR 0 21
115558: PPUSH
115559: LD_VAR 0 4
115563: PPUSH
115564: CALL_OW 74
115568: ST_TO_ADDR
// depot := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
115569: LD_ADDR_VAR 0 7
115573: PUSH
115574: LD_EXP 50
115578: PUSH
115579: LD_VAR 0 1
115583: ARRAY
115584: PPUSH
115585: LD_INT 2
115587: PUSH
115588: LD_INT 30
115590: PUSH
115591: LD_INT 0
115593: PUSH
115594: EMPTY
115595: LIST
115596: LIST
115597: PUSH
115598: LD_INT 30
115600: PUSH
115601: LD_INT 1
115603: PUSH
115604: EMPTY
115605: LIST
115606: LIST
115607: PUSH
115608: EMPTY
115609: LIST
115610: LIST
115611: LIST
115612: PPUSH
115613: CALL_OW 72
115617: ST_TO_ADDR
// depot_under_attack := ( not depot or UnitFilter ( depot , [ f_not , [ f_lives , 600 ] ] ) ) ;
115618: LD_ADDR_VAR 0 16
115622: PUSH
115623: LD_VAR 0 7
115627: NOT
115628: PUSH
115629: LD_VAR 0 7
115633: PPUSH
115634: LD_INT 3
115636: PUSH
115637: LD_INT 24
115639: PUSH
115640: LD_INT 600
115642: PUSH
115643: EMPTY
115644: LIST
115645: LIST
115646: PUSH
115647: EMPTY
115648: LIST
115649: LIST
115650: PPUSH
115651: CALL_OW 72
115655: OR
115656: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
115657: LD_VAR 0 4
115661: PPUSH
115662: CALL_OW 247
115666: PUSH
115667: LD_INT 2
115669: DOUBLE
115670: EQUAL
115671: IFTRUE 115675
115673: GO 116071
115675: POP
// begin if GetLives ( i ) = 1000 and ( GetDistUnits ( i , e ) < 40 or IsInArea ( e , mc_scan_area [ base ] ) ) then
115676: LD_VAR 0 4
115680: PPUSH
115681: CALL_OW 256
115685: PUSH
115686: LD_INT 1000
115688: EQUAL
115689: PUSH
115690: LD_VAR 0 4
115694: PPUSH
115695: LD_VAR 0 13
115699: PPUSH
115700: CALL_OW 296
115704: PUSH
115705: LD_INT 40
115707: LESS
115708: PUSH
115709: LD_VAR 0 13
115713: PPUSH
115714: LD_EXP 75
115718: PUSH
115719: LD_VAR 0 1
115723: ARRAY
115724: PPUSH
115725: CALL_OW 308
115729: OR
115730: AND
115731: IFFALSE 115853
// begin if GetEngine ( i ) = engine_combustion and GetFuel ( i ) < 30 and depot then
115733: LD_VAR 0 4
115737: PPUSH
115738: CALL_OW 262
115742: PUSH
115743: LD_INT 1
115745: EQUAL
115746: PUSH
115747: LD_VAR 0 4
115751: PPUSH
115752: CALL_OW 261
115756: PUSH
115757: LD_INT 30
115759: LESS
115760: AND
115761: PUSH
115762: LD_VAR 0 7
115766: AND
115767: IFFALSE 115837
// begin ComMoveUnit ( i , NearestUnitToUnit ( depot , i ) ) ;
115769: LD_VAR 0 4
115773: PPUSH
115774: LD_VAR 0 7
115778: PPUSH
115779: LD_VAR 0 4
115783: PPUSH
115784: CALL_OW 74
115788: PPUSH
115789: CALL_OW 112
// if GetDistUnits ( i , NearestUnitToUnit ( depot , i ) ) < 6 then
115793: LD_VAR 0 4
115797: PPUSH
115798: LD_VAR 0 7
115802: PPUSH
115803: LD_VAR 0 4
115807: PPUSH
115808: CALL_OW 74
115812: PPUSH
115813: CALL_OW 296
115817: PUSH
115818: LD_INT 6
115820: LESS
115821: IFFALSE 115835
// SetFuel ( i , 100 ) ;
115823: LD_VAR 0 4
115827: PPUSH
115828: LD_INT 100
115830: PPUSH
115831: CALL_OW 240
// end else
115835: GO 115851
// ComAttackUnit ( i , e ) ;
115837: LD_VAR 0 4
115841: PPUSH
115842: LD_VAR 0 13
115846: PPUSH
115847: CALL_OW 115
// end else
115851: GO 115954
// if ( ( not IsInArea ( e , mc_scan_area [ base ] ) and GetDistUnits ( i , e ) >= 40 ) or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
115853: LD_VAR 0 13
115857: PPUSH
115858: LD_EXP 75
115862: PUSH
115863: LD_VAR 0 1
115867: ARRAY
115868: PPUSH
115869: CALL_OW 308
115873: NOT
115874: PUSH
115875: LD_VAR 0 4
115879: PPUSH
115880: LD_VAR 0 13
115884: PPUSH
115885: CALL_OW 296
115889: PUSH
115890: LD_INT 40
115892: GREATEREQUAL
115893: AND
115894: PUSH
115895: LD_VAR 0 4
115899: PPUSH
115900: CALL_OW 256
115904: PUSH
115905: LD_INT 650
115907: LESSEQUAL
115908: OR
115909: PUSH
115910: LD_VAR 0 4
115914: PPUSH
115915: LD_EXP 74
115919: PUSH
115920: LD_VAR 0 1
115924: ARRAY
115925: PPUSH
115926: CALL_OW 308
115930: NOT
115931: AND
115932: IFFALSE 115954
// ComMoveToArea ( i , mc_parking [ base ] ) ;
115934: LD_VAR 0 4
115938: PPUSH
115939: LD_EXP 74
115943: PUSH
115944: LD_VAR 0 1
115948: ARRAY
115949: PPUSH
115950: CALL_OW 113
// if GetLives ( i ) < 1000 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
115954: LD_VAR 0 4
115958: PPUSH
115959: CALL_OW 256
115963: PUSH
115964: LD_INT 1000
115966: LESS
115967: PUSH
115968: LD_VAR 0 4
115972: PPUSH
115973: CALL_OW 263
115977: PUSH
115978: LD_INT 1
115980: EQUAL
115981: AND
115982: PUSH
115983: LD_VAR 0 4
115987: PPUSH
115988: CALL_OW 311
115992: AND
115993: PUSH
115994: LD_VAR 0 4
115998: PPUSH
115999: LD_EXP 74
116003: PUSH
116004: LD_VAR 0 1
116008: ARRAY
116009: PPUSH
116010: CALL_OW 308
116014: AND
116015: IFFALSE 116069
// begin mech := IsDrivenBy ( i ) ;
116017: LD_ADDR_VAR 0 9
116021: PUSH
116022: LD_VAR 0 4
116026: PPUSH
116027: CALL_OW 311
116031: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
116032: LD_VAR 0 9
116036: PPUSH
116037: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
116041: LD_VAR 0 9
116045: PPUSH
116046: LD_VAR 0 4
116050: PPUSH
116051: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
116055: LD_VAR 0 9
116059: PPUSH
116060: LD_VAR 0 4
116064: PPUSH
116065: CALL_OW 180
// end ; end ; unit_human :
116069: GO 116416
116071: LD_INT 1
116073: DOUBLE
116074: EQUAL
116075: IFTRUE 116079
116077: GO 116415
116079: POP
// begin b := IsInUnit ( i ) ;
116080: LD_ADDR_VAR 0 18
116084: PUSH
116085: LD_VAR 0 4
116089: PPUSH
116090: CALL_OW 310
116094: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
116095: LD_ADDR_VAR 0 19
116099: PUSH
116100: LD_VAR 0 18
116104: NOT
116105: PUSH
116106: LD_VAR 0 18
116110: PPUSH
116111: CALL_OW 266
116115: PUSH
116116: LD_INT 32
116118: PUSH
116119: LD_INT 31
116121: PUSH
116122: EMPTY
116123: LIST
116124: LIST
116125: IN
116126: OR
116127: ST_TO_ADDR
// if GetBType ( b ) = b_barracks and GetClass ( i ) in [ 1 , 2 , 3 , 4 ] then
116128: LD_VAR 0 18
116132: PPUSH
116133: CALL_OW 266
116137: PUSH
116138: LD_INT 5
116140: EQUAL
116141: PUSH
116142: LD_VAR 0 4
116146: PPUSH
116147: CALL_OW 257
116151: PUSH
116152: LD_INT 1
116154: PUSH
116155: LD_INT 2
116157: PUSH
116158: LD_INT 3
116160: PUSH
116161: LD_INT 4
116163: PUSH
116164: EMPTY
116165: LIST
116166: LIST
116167: LIST
116168: LIST
116169: IN
116170: AND
116171: IFFALSE 116208
// begin class := AllowSpecClass ( i ) ;
116173: LD_ADDR_VAR 0 20
116177: PUSH
116178: LD_VAR 0 4
116182: PPUSH
116183: CALL 21672 0 1
116187: ST_TO_ADDR
// if class then
116188: LD_VAR 0 20
116192: IFFALSE 116208
// ComChangeProfession ( i , class ) ;
116194: LD_VAR 0 4
116198: PPUSH
116199: LD_VAR 0 20
116203: PPUSH
116204: CALL_OW 123
// end ; if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
116208: LD_VAR 0 16
116212: PUSH
116213: LD_VAR 0 2
116217: PPUSH
116218: LD_INT 21
116220: PUSH
116221: LD_INT 2
116223: PUSH
116224: EMPTY
116225: LIST
116226: LIST
116227: PPUSH
116228: CALL_OW 72
116232: PUSH
116233: LD_INT 1
116235: LESSEQUAL
116236: OR
116237: PUSH
116238: LD_VAR 0 19
116242: AND
116243: PUSH
116244: LD_VAR 0 4
116248: PUSH
116249: LD_VAR 0 17
116253: IN
116254: NOT
116255: AND
116256: IFFALSE 116349
// begin if b then
116258: LD_VAR 0 18
116262: IFFALSE 116311
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
116264: LD_VAR 0 18
116268: PPUSH
116269: LD_VAR 0 21
116273: PPUSH
116274: LD_VAR 0 18
116278: PPUSH
116279: CALL_OW 74
116283: PPUSH
116284: CALL_OW 296
116288: PUSH
116289: LD_INT 10
116291: LESS
116292: PUSH
116293: LD_VAR 0 18
116297: PPUSH
116298: CALL_OW 461
116302: PUSH
116303: LD_INT 7
116305: NONEQUAL
116306: AND
116307: IFFALSE 116311
// continue ;
116309: GO 115546
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
116311: LD_ADDR_VAR 0 17
116315: PUSH
116316: LD_VAR 0 17
116320: PPUSH
116321: LD_VAR 0 17
116325: PUSH
116326: LD_INT 1
116328: PLUS
116329: PPUSH
116330: LD_VAR 0 4
116334: PPUSH
116335: CALL_OW 1
116339: ST_TO_ADDR
// ComExitBuilding ( i ) ;
116340: LD_VAR 0 4
116344: PPUSH
116345: CALL_OW 122
// end ; if sold_defenders then
116349: LD_VAR 0 17
116353: IFFALSE 116413
// if i in sold_defenders then
116355: LD_VAR 0 4
116359: PUSH
116360: LD_VAR 0 17
116364: IN
116365: IFFALSE 116413
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
116367: LD_VAR 0 4
116371: PPUSH
116372: CALL_OW 314
116376: NOT
116377: PUSH
116378: LD_VAR 0 4
116382: PPUSH
116383: LD_VAR 0 13
116387: PPUSH
116388: CALL_OW 296
116392: PUSH
116393: LD_INT 30
116395: LESS
116396: AND
116397: IFFALSE 116413
// ComAttackUnit ( i , e ) ;
116399: LD_VAR 0 4
116403: PPUSH
116404: LD_VAR 0 13
116408: PPUSH
116409: CALL_OW 115
// end ; end ; end ;
116413: GO 116416
116415: POP
// if IsDead ( i ) then
116416: LD_VAR 0 4
116420: PPUSH
116421: CALL_OW 301
116425: IFFALSE 116443
// defenders := defenders diff i ;
116427: LD_ADDR_VAR 0 2
116431: PUSH
116432: LD_VAR 0 2
116436: PUSH
116437: LD_VAR 0 4
116441: DIFF
116442: ST_TO_ADDR
// end ;
116443: GO 115546
116445: POP
116446: POP
// until not enemy or not defenders or not mc_bases [ base ] ;
116447: LD_VAR 0 21
116451: NOT
116452: PUSH
116453: LD_VAR 0 2
116457: NOT
116458: OR
116459: PUSH
116460: LD_EXP 50
116464: PUSH
116465: LD_VAR 0 1
116469: ARRAY
116470: NOT
116471: OR
116472: IFFALSE 115450
// MC_Reset ( base , 18 ) ;
116474: LD_VAR 0 1
116478: PPUSH
116479: LD_INT 18
116481: PPUSH
116482: CALL 64243 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
116486: LD_ADDR_VAR 0 2
116490: PUSH
116491: LD_VAR 0 2
116495: PUSH
116496: LD_VAR 0 2
116500: PPUSH
116501: LD_INT 2
116503: PUSH
116504: LD_INT 25
116506: PUSH
116507: LD_INT 1
116509: PUSH
116510: EMPTY
116511: LIST
116512: LIST
116513: PUSH
116514: LD_INT 25
116516: PUSH
116517: LD_INT 5
116519: PUSH
116520: EMPTY
116521: LIST
116522: LIST
116523: PUSH
116524: LD_INT 25
116526: PUSH
116527: LD_INT 8
116529: PUSH
116530: EMPTY
116531: LIST
116532: LIST
116533: PUSH
116534: LD_INT 25
116536: PUSH
116537: LD_INT 9
116539: PUSH
116540: EMPTY
116541: LIST
116542: LIST
116543: PUSH
116544: EMPTY
116545: LIST
116546: LIST
116547: LIST
116548: LIST
116549: LIST
116550: PPUSH
116551: CALL_OW 72
116555: DIFF
116556: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
116557: LD_VAR 0 21
116561: NOT
116562: PUSH
116563: LD_VAR 0 2
116567: PPUSH
116568: LD_INT 21
116570: PUSH
116571: LD_INT 2
116573: PUSH
116574: EMPTY
116575: LIST
116576: LIST
116577: PPUSH
116578: CALL_OW 72
116582: AND
116583: IFFALSE 116921
// begin tmp := FilterByTag ( defenders , 19 ) ;
116585: LD_ADDR_VAR 0 11
116589: PUSH
116590: LD_VAR 0 2
116594: PPUSH
116595: LD_INT 19
116597: PPUSH
116598: CALL 54141 0 2
116602: ST_TO_ADDR
// if tmp then
116603: LD_VAR 0 11
116607: IFFALSE 116677
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
116609: LD_ADDR_VAR 0 11
116613: PUSH
116614: LD_VAR 0 11
116618: PPUSH
116619: LD_INT 25
116621: PUSH
116622: LD_INT 3
116624: PUSH
116625: EMPTY
116626: LIST
116627: LIST
116628: PPUSH
116629: CALL_OW 72
116633: ST_TO_ADDR
// if tmp then
116634: LD_VAR 0 11
116638: IFFALSE 116677
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
116640: LD_ADDR_EXP 62
116644: PUSH
116645: LD_EXP 62
116649: PPUSH
116650: LD_VAR 0 1
116654: PPUSH
116655: LD_EXP 62
116659: PUSH
116660: LD_VAR 0 1
116664: ARRAY
116665: PUSH
116666: LD_VAR 0 11
116670: UNION
116671: PPUSH
116672: CALL_OW 1
116676: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
116677: LD_VAR 0 1
116681: PPUSH
116682: LD_INT 19
116684: PPUSH
116685: CALL 64243 0 2
// repeat wait ( 0 0$1 ) ;
116689: LD_INT 35
116691: PPUSH
116692: CALL_OW 67
// if not mc_bases [ base ] or mc_bases [ base ] = [ ] then
116696: LD_EXP 50
116700: PUSH
116701: LD_VAR 0 1
116705: ARRAY
116706: NOT
116707: PUSH
116708: LD_EXP 50
116712: PUSH
116713: LD_VAR 0 1
116717: ARRAY
116718: PUSH
116719: EMPTY
116720: EQUAL
116721: OR
116722: IFFALSE 116759
// begin for i in defenders do
116724: LD_ADDR_VAR 0 4
116728: PUSH
116729: LD_VAR 0 2
116733: PUSH
116734: FOR_IN
116735: IFFALSE 116748
// ComStop ( i ) ;
116737: LD_VAR 0 4
116741: PPUSH
116742: CALL_OW 141
116746: GO 116734
116748: POP
116749: POP
// defenders := [ ] ;
116750: LD_ADDR_VAR 0 2
116754: PUSH
116755: EMPTY
116756: ST_TO_ADDR
// exit ;
116757: GO 116985
// end ; for i in defenders do
116759: LD_ADDR_VAR 0 4
116763: PUSH
116764: LD_VAR 0 2
116768: PUSH
116769: FOR_IN
116770: IFFALSE 116859
// begin if not IsInArea ( i , mc_parking [ base ] ) then
116772: LD_VAR 0 4
116776: PPUSH
116777: LD_EXP 74
116781: PUSH
116782: LD_VAR 0 1
116786: ARRAY
116787: PPUSH
116788: CALL_OW 308
116792: NOT
116793: IFFALSE 116817
// ComMoveToArea ( i , mc_parking [ base ] ) else
116795: LD_VAR 0 4
116799: PPUSH
116800: LD_EXP 74
116804: PUSH
116805: LD_VAR 0 1
116809: ARRAY
116810: PPUSH
116811: CALL_OW 113
116815: GO 116857
// if GetControl ( i ) = control_manual then
116817: LD_VAR 0 4
116821: PPUSH
116822: CALL_OW 263
116826: PUSH
116827: LD_INT 1
116829: EQUAL
116830: IFFALSE 116857
// if IsDrivenBy ( i ) then
116832: LD_VAR 0 4
116836: PPUSH
116837: CALL_OW 311
116841: IFFALSE 116857
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
116843: LD_VAR 0 4
116847: PPUSH
116848: CALL_OW 311
116852: PPUSH
116853: CALL_OW 121
// end ;
116857: GO 116769
116859: POP
116860: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] or not mc_bases [ base ] ;
116861: LD_VAR 0 2
116865: PPUSH
116866: LD_INT 95
116868: PUSH
116869: LD_EXP 74
116873: PUSH
116874: LD_VAR 0 1
116878: ARRAY
116879: PUSH
116880: EMPTY
116881: LIST
116882: LIST
116883: PPUSH
116884: CALL_OW 72
116888: PUSH
116889: LD_VAR 0 2
116893: EQUAL
116894: PUSH
116895: LD_EXP 73
116899: PUSH
116900: LD_VAR 0 1
116904: ARRAY
116905: OR
116906: PUSH
116907: LD_EXP 50
116911: PUSH
116912: LD_VAR 0 1
116916: ARRAY
116917: NOT
116918: OR
116919: IFFALSE 116689
// end ; mc_defender := Replace ( mc_defender , base , UnitFilter ( defenders , [ f_type , unit_vehicle ] ) ) ;
116921: LD_ADDR_EXP 72
116925: PUSH
116926: LD_EXP 72
116930: PPUSH
116931: LD_VAR 0 1
116935: PPUSH
116936: LD_VAR 0 2
116940: PPUSH
116941: LD_INT 21
116943: PUSH
116944: LD_INT 2
116946: PUSH
116947: EMPTY
116948: LIST
116949: LIST
116950: PPUSH
116951: CALL_OW 72
116955: PPUSH
116956: CALL_OW 1
116960: ST_TO_ADDR
// MC_Reset ( base , 19 ) ;
116961: LD_VAR 0 1
116965: PPUSH
116966: LD_INT 19
116968: PPUSH
116969: CALL 64243 0 2
// MC_Reset ( base , 20 ) ;
116973: LD_VAR 0 1
116977: PPUSH
116978: LD_INT 20
116980: PPUSH
116981: CALL 64243 0 2
// end ; end_of_file
116985: LD_VAR 0 3
116989: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
116990: LD_VAR 0 1
116994: PUSH
116995: LD_INT 200
116997: DOUBLE
116998: GREATEREQUAL
116999: IFFALSE 117007
117001: LD_INT 299
117003: DOUBLE
117004: LESSEQUAL
117005: IFTRUE 117009
117007: GO 117041
117009: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
117010: LD_VAR 0 1
117014: PPUSH
117015: LD_VAR 0 2
117019: PPUSH
117020: LD_VAR 0 3
117024: PPUSH
117025: LD_VAR 0 4
117029: PPUSH
117030: LD_VAR 0 5
117034: PPUSH
117035: CALL 105427 0 5
117039: GO 117118
117041: LD_INT 300
117043: DOUBLE
117044: GREATEREQUAL
117045: IFFALSE 117053
117047: LD_INT 399
117049: DOUBLE
117050: LESSEQUAL
117051: IFTRUE 117055
117053: GO 117117
117055: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
117056: LD_VAR 0 1
117060: PPUSH
117061: LD_VAR 0 2
117065: PPUSH
117066: LD_VAR 0 3
117070: PPUSH
117071: LD_VAR 0 4
117075: PPUSH
117076: LD_VAR 0 5
117080: PPUSH
117081: LD_VAR 0 6
117085: PPUSH
117086: LD_VAR 0 7
117090: PPUSH
117091: LD_VAR 0 8
117095: PPUSH
117096: LD_VAR 0 9
117100: PPUSH
117101: LD_VAR 0 10
117105: PPUSH
117106: LD_VAR 0 11
117110: PPUSH
117111: CALL 103069 0 11
117115: GO 117118
117117: POP
// end ;
117118: PPOPN 11
117120: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
117121: LD_VAR 0 1
117125: PPUSH
117126: LD_VAR 0 2
117130: PPUSH
117131: LD_VAR 0 3
117135: PPUSH
117136: LD_VAR 0 4
117140: PPUSH
117141: LD_VAR 0 5
117145: PPUSH
117146: CALL 105163 0 5
// end ; end_of_file
117150: PPOPN 5
117152: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
117153: LD_VAR 0 1
117157: PPUSH
117158: LD_VAR 0 2
117162: PPUSH
117163: LD_VAR 0 3
117167: PPUSH
117168: LD_VAR 0 4
117172: PPUSH
117173: LD_VAR 0 5
117177: PPUSH
117178: LD_VAR 0 6
117182: PPUSH
117183: CALL 90762 0 6
// end ;
117187: PPOPN 6
117189: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
117190: CALL 90737 0 0
// end ;
117194: PPOPN 1
117196: END
