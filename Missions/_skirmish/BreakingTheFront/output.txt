// starting begin ResetFog ;
   0: CALL_OW 335
// InitSettings ;
   4: CALL 44 0 0
// if debug then
   8: LD_EXP 1
  12: IFFALSE 31
// begin PlaceSeeing ( 1 , 1 , 1 , - 372963 ) ;
  14: LD_INT 1
  16: PPUSH
  17: LD_INT 1
  19: PPUSH
  20: LD_INT 1
  22: PPUSH
  23: LD_INT 372963
  25: NEG
  26: PPUSH
  27: CALL_OW 330
// end ; SetTechnologies ;
  31: CALL 618 0 0
// SetDiplomacy ;
  35: CALL 830 0 0
// PrepareGame ;
  39: CALL 912 0 0
// end ;
  43: END
// export debug , GameType , game , disableGlobalTimer ; export mc_amer , mc_leg , mc_rus_1 , mc_rus_2 ; export playerCommander , playerForces , allyCommander , Powell , Farmer , ruOutpost , ruEscape , staticMines , baseCaptured , legDestCounter , cratesSpawns , legOfferAccepted , legChangeSide , allyDestCounter , sibBombAllowed , reinforceAllowed , commander , cratesSpawn , outpostEscape , dialogueMineDetected ; end_of_file export function InitSettings ; begin
  44: LD_INT 0
  46: PPUSH
// debug := 0 ;
  47: LD_ADDR_EXP 1
  51: PUSH
  52: LD_INT 0
  54: ST_TO_ADDR
// GameType := 1 ;
  55: LD_ADDR_EXP 2
  59: PUSH
  60: LD_INT 1
  62: ST_TO_ADDR
// Difficulty := GetMultiplayerSetting ( 0 ) + 1 ;
  63: LD_ADDR_OWVAR 67
  67: PUSH
  68: LD_INT 0
  70: PPUSH
  71: CALL_OW 426
  75: PUSH
  76: LD_INT 1
  78: PLUS
  79: ST_TO_ADDR
// if not Difficulty or debug then
  80: LD_OWVAR 67
  84: NOT
  85: PUSH
  86: LD_EXP 1
  90: OR
  91: IFFALSE 101
// Difficulty := 2 ;
  93: LD_ADDR_OWVAR 67
  97: PUSH
  98: LD_INT 2
 100: ST_TO_ADDR
// sibBombAllowed := GetMultiPlayerSetting ( 1 ) ;
 101: LD_ADDR_EXP 23
 105: PUSH
 106: LD_INT 1
 108: PPUSH
 109: CALL_OW 426
 113: ST_TO_ADDR
// reinforceAllowed := GetMultiPlayerSetting ( 2 ) ;
 114: LD_ADDR_EXP 24
 118: PUSH
 119: LD_INT 2
 121: PPUSH
 122: CALL_OW 426
 126: ST_TO_ADDR
// cratesSpawn := GetMultiPlayerSetting ( 3 ) + 1 ;
 127: LD_ADDR_EXP 26
 131: PUSH
 132: LD_INT 3
 134: PPUSH
 135: CALL_OW 426
 139: PUSH
 140: LD_INT 1
 142: PLUS
 143: ST_TO_ADDR
// if not cratesSpawn then
 144: LD_EXP 26
 148: NOT
 149: IFFALSE 159
// cratesSpawn := 2 ;
 151: LD_ADDR_EXP 26
 155: PUSH
 156: LD_INT 2
 158: ST_TO_ADDR
// if not commander then
 159: LD_EXP 25
 163: NOT
 164: IFFALSE 174
// commander := 3 ;
 166: LD_ADDR_EXP 25
 170: PUSH
 171: LD_INT 3
 173: ST_TO_ADDR
// if not debug then
 174: LD_EXP 1
 178: NOT
 179: IFFALSE 183
// exit ;
 181: GO 240
// display_strings := [ Difficulty:  & Difficulty , sibBomb:  & sibBombAllowed , reinforceAllowed:  & reinforceAllowed , cratesSpawn:  & cratesSpawn , commander:  & commander ] ;
 183: LD_ADDR_OWVAR 47
 187: PUSH
 188: LD_STRING Difficulty: 
 190: PUSH
 191: LD_OWVAR 67
 195: STR
 196: PUSH
 197: LD_STRING sibBomb: 
 199: PUSH
 200: LD_EXP 23
 204: STR
 205: PUSH
 206: LD_STRING reinforceAllowed: 
 208: PUSH
 209: LD_EXP 24
 213: STR
 214: PUSH
 215: LD_STRING cratesSpawn: 
 217: PUSH
 218: LD_EXP 26
 222: STR
 223: PUSH
 224: LD_STRING commander: 
 226: PUSH
 227: LD_EXP 25
 231: STR
 232: PUSH
 233: EMPTY
 234: LIST
 235: LIST
 236: LIST
 237: LIST
 238: LIST
 239: ST_TO_ADDR
// end ;
 240: LD_VAR 0 1
 244: RET
// every 0 0$1 trigger game and GameType = 1 and not disableGlobalTimer do
 245: LD_EXP 3
 249: PUSH
 250: LD_EXP 2
 254: PUSH
 255: LD_INT 1
 257: EQUAL
 258: AND
 259: PUSH
 260: LD_EXP 4
 264: NOT
 265: AND
 266: IFFALSE 289
 268: GO 270
 270: DISABLE
// begin enable ;
 271: ENABLE
// display_strings := [ #SkrTime , tick ] ;
 272: LD_ADDR_OWVAR 47
 276: PUSH
 277: LD_STRING #SkrTime
 279: PUSH
 280: LD_OWVAR 1
 284: PUSH
 285: EMPTY
 286: LIST
 287: LIST
 288: ST_TO_ADDR
// end ;
 289: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 290: LD_EXP 19
 294: PUSH
 295: LD_EXP 3
 299: AND
 300: PUSH
 301: LD_EXP 2
 305: PUSH
 306: LD_INT 1
 308: EQUAL
 309: AND
 310: IFFALSE 371
 312: GO 314
 314: DISABLE
// Crates ( cratesSpawns [ 1 ] [ 1 ] , cratesSpawns [ 1 ] [ 2 ] , cratesSpawns [ 1 ] [ 3 ] , cratesSpawns [ 1 ] [ 4 ] ) ;
 315: LD_EXP 19
 319: PUSH
 320: LD_INT 1
 322: ARRAY
 323: PUSH
 324: LD_INT 1
 326: ARRAY
 327: PPUSH
 328: LD_EXP 19
 332: PUSH
 333: LD_INT 1
 335: ARRAY
 336: PUSH
 337: LD_INT 2
 339: ARRAY
 340: PPUSH
 341: LD_EXP 19
 345: PUSH
 346: LD_INT 1
 348: ARRAY
 349: PUSH
 350: LD_INT 3
 352: ARRAY
 353: PPUSH
 354: LD_EXP 19
 358: PUSH
 359: LD_INT 1
 361: ARRAY
 362: PUSH
 363: LD_INT 4
 365: ARRAY
 366: PPUSH
 367: CALL 61557 0 4
 371: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 372: LD_EXP 19
 376: PUSH
 377: LD_EXP 3
 381: AND
 382: PUSH
 383: LD_EXP 2
 387: PUSH
 388: LD_INT 1
 390: EQUAL
 391: AND
 392: IFFALSE 453
 394: GO 396
 396: DISABLE
// Crates ( cratesSpawns [ 2 ] [ 1 ] , cratesSpawns [ 2 ] [ 2 ] , cratesSpawns [ 2 ] [ 3 ] , cratesSpawns [ 2 ] [ 4 ] ) ;
 397: LD_EXP 19
 401: PUSH
 402: LD_INT 2
 404: ARRAY
 405: PUSH
 406: LD_INT 1
 408: ARRAY
 409: PPUSH
 410: LD_EXP 19
 414: PUSH
 415: LD_INT 2
 417: ARRAY
 418: PUSH
 419: LD_INT 2
 421: ARRAY
 422: PPUSH
 423: LD_EXP 19
 427: PUSH
 428: LD_INT 2
 430: ARRAY
 431: PUSH
 432: LD_INT 3
 434: ARRAY
 435: PPUSH
 436: LD_EXP 19
 440: PUSH
 441: LD_INT 2
 443: ARRAY
 444: PUSH
 445: LD_INT 4
 447: ARRAY
 448: PPUSH
 449: CALL 61557 0 4
 453: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 454: LD_EXP 19
 458: PUSH
 459: LD_EXP 3
 463: AND
 464: PUSH
 465: LD_EXP 2
 469: PUSH
 470: LD_INT 1
 472: EQUAL
 473: AND
 474: IFFALSE 535
 476: GO 478
 478: DISABLE
// Crates ( cratesSpawns [ 3 ] [ 1 ] , cratesSpawns [ 3 ] [ 2 ] , cratesSpawns [ 3 ] [ 3 ] , cratesSpawns [ 3 ] [ 4 ] ) ;
 479: LD_EXP 19
 483: PUSH
 484: LD_INT 3
 486: ARRAY
 487: PUSH
 488: LD_INT 1
 490: ARRAY
 491: PPUSH
 492: LD_EXP 19
 496: PUSH
 497: LD_INT 3
 499: ARRAY
 500: PUSH
 501: LD_INT 2
 503: ARRAY
 504: PPUSH
 505: LD_EXP 19
 509: PUSH
 510: LD_INT 3
 512: ARRAY
 513: PUSH
 514: LD_INT 3
 516: ARRAY
 517: PPUSH
 518: LD_EXP 19
 522: PUSH
 523: LD_INT 3
 525: ARRAY
 526: PUSH
 527: LD_INT 4
 529: ARRAY
 530: PPUSH
 531: CALL 61557 0 4
 535: END
// every 1 trigger cratesSpawns and game and GameType = 1 do
 536: LD_EXP 19
 540: PUSH
 541: LD_EXP 3
 545: AND
 546: PUSH
 547: LD_EXP 2
 551: PUSH
 552: LD_INT 1
 554: EQUAL
 555: AND
 556: IFFALSE 617
 558: GO 560
 560: DISABLE
// Crates ( cratesSpawns [ 4 ] [ 1 ] , cratesSpawns [ 4 ] [ 2 ] , cratesSpawns [ 4 ] [ 3 ] , cratesSpawns [ 4 ] [ 4 ] ) ;
 561: LD_EXP 19
 565: PUSH
 566: LD_INT 4
 568: ARRAY
 569: PUSH
 570: LD_INT 1
 572: ARRAY
 573: PPUSH
 574: LD_EXP 19
 578: PUSH
 579: LD_INT 4
 581: ARRAY
 582: PUSH
 583: LD_INT 2
 585: ARRAY
 586: PPUSH
 587: LD_EXP 19
 591: PUSH
 592: LD_INT 4
 594: ARRAY
 595: PUSH
 596: LD_INT 3
 598: ARRAY
 599: PPUSH
 600: LD_EXP 19
 604: PUSH
 605: LD_INT 4
 607: ARRAY
 608: PUSH
 609: LD_INT 4
 611: ARRAY
 612: PPUSH
 613: CALL 61557 0 4
 617: END
// export function SetTechnologies ; var i , j , ban_techs , res_techs ; begin
 618: LD_INT 0
 620: PPUSH
 621: PPUSH
 622: PPUSH
 623: PPUSH
 624: PPUSH
// if GameType = 1 then
 625: LD_EXP 2
 629: PUSH
 630: LD_INT 1
 632: EQUAL
 633: IFFALSE 702
// begin ban_techs := [ ] ;
 635: LD_ADDR_VAR 0 4
 639: PUSH
 640: EMPTY
 641: ST_TO_ADDR
// if sibBombAllowed < 2 then
 642: LD_EXP 23
 646: PUSH
 647: LD_INT 2
 649: LESS
 650: IFFALSE 663
// ban_techs := [ tech_sibFiss ] ;
 652: LD_ADDR_VAR 0 4
 656: PUSH
 657: LD_INT 25
 659: PUSH
 660: EMPTY
 661: LIST
 662: ST_TO_ADDR
// res_techs := [ tech_oilPow , tech_oilEng , tech_tech1 , tech_tech2 , tech_tech3 , tech_gun , tech_gatling , tech_rocket ] ;
 663: LD_ADDR_VAR 0 5
 667: PUSH
 668: LD_INT 46
 670: PUSH
 671: LD_INT 47
 673: PUSH
 674: LD_INT 48
 676: PUSH
 677: LD_INT 49
 679: PUSH
 680: LD_INT 50
 682: PUSH
 683: LD_INT 39
 685: PUSH
 686: LD_INT 69
 688: PUSH
 689: LD_INT 40
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: LIST
 696: LIST
 697: LIST
 698: LIST
 699: LIST
 700: LIST
 701: ST_TO_ADDR
// end ; for i = 1 to 8 do
 702: LD_ADDR_VAR 0 2
 706: PUSH
 707: DOUBLE
 708: LD_INT 1
 710: DEC
 711: ST_TO_ADDR
 712: LD_INT 8
 714: PUSH
 715: FOR_TO
 716: IFFALSE 800
// begin if res_techs then
 718: LD_VAR 0 5
 722: IFFALSE 758
// for j in res_techs do
 724: LD_ADDR_VAR 0 3
 728: PUSH
 729: LD_VAR 0 5
 733: PUSH
 734: FOR_IN
 735: IFFALSE 756
// SetTech ( j , i , state_researched ) ;
 737: LD_VAR 0 3
 741: PPUSH
 742: LD_VAR 0 2
 746: PPUSH
 747: LD_INT 2
 749: PPUSH
 750: CALL_OW 322
 754: GO 734
 756: POP
 757: POP
// if ban_techs then
 758: LD_VAR 0 4
 762: IFFALSE 798
// for j in ban_techs do
 764: LD_ADDR_VAR 0 3
 768: PUSH
 769: LD_VAR 0 4
 773: PUSH
 774: FOR_IN
 775: IFFALSE 796
// SetTech ( j , i , state_disabled ) ;
 777: LD_VAR 0 3
 781: PPUSH
 782: LD_VAR 0 2
 786: PPUSH
 787: LD_INT 0
 789: PPUSH
 790: CALL_OW 322
 794: GO 774
 796: POP
 797: POP
// end ;
 798: GO 715
 800: POP
 801: POP
// if sibBombAllowed = 1 then
 802: LD_EXP 23
 806: PUSH
 807: LD_INT 1
 809: EQUAL
 810: IFFALSE 825
// SetTech ( tech_sibFiss , 3 , state_enabled ) ;
 812: LD_INT 25
 814: PPUSH
 815: LD_INT 3
 817: PPUSH
 818: LD_INT 1
 820: PPUSH
 821: CALL_OW 322
// end ;
 825: LD_VAR 0 1
 829: RET
// export function SetDiplomacy ; begin
 830: LD_INT 0
 832: PPUSH
// if GameType = 1 then
 833: LD_EXP 2
 837: PUSH
 838: LD_INT 1
 840: EQUAL
 841: IFFALSE 907
// begin SetAttitude ( 1 , 4 , att_friend , true ) ;
 843: LD_INT 1
 845: PPUSH
 846: LD_INT 4
 848: PPUSH
 849: LD_INT 1
 851: PPUSH
 852: LD_INT 1
 854: PPUSH
 855: CALL_OW 80
// SetAttitude ( 3 , 6 , att_friend , true ) ;
 859: LD_INT 3
 861: PPUSH
 862: LD_INT 6
 864: PPUSH
 865: LD_INT 1
 867: PPUSH
 868: LD_INT 1
 870: PPUSH
 871: CALL_OW 80
// SetAttitude ( 3 , 8 , att_friend , true ) ;
 875: LD_INT 3
 877: PPUSH
 878: LD_INT 8
 880: PPUSH
 881: LD_INT 1
 883: PPUSH
 884: LD_INT 1
 886: PPUSH
 887: CALL_OW 80
// SetAttitude ( 6 , 8 , att_friend , true ) ;
 891: LD_INT 6
 893: PPUSH
 894: LD_INT 8
 896: PPUSH
 897: LD_INT 1
 899: PPUSH
 900: LD_INT 1
 902: PPUSH
 903: CALL_OW 80
// end ; end ;
 907: LD_VAR 0 1
 911: RET
// export function PrepareGame ; var i , tmp , sources ; begin
 912: LD_INT 0
 914: PPUSH
 915: PPUSH
 916: PPUSH
 917: PPUSH
// if GameType = 1 then
 918: LD_EXP 2
 922: PUSH
 923: LD_INT 1
 925: EQUAL
 926: IFFALSE 1403
// begin game := false ;
 928: LD_ADDR_EXP 3
 932: PUSH
 933: LD_INT 0
 935: ST_TO_ADDR
// your_side := 1 ;
 936: LD_ADDR_OWVAR 2
 940: PUSH
 941: LD_INT 1
 943: ST_TO_ADDR
// mc_amer := 1 ;
 944: LD_ADDR_EXP 5
 948: PUSH
 949: LD_INT 1
 951: ST_TO_ADDR
// mc_leg := 2 ;
 952: LD_ADDR_EXP 6
 956: PUSH
 957: LD_INT 2
 959: ST_TO_ADDR
// mc_rus_1 := 3 ;
 960: LD_ADDR_EXP 7
 964: PUSH
 965: LD_INT 3
 967: ST_TO_ADDR
// mc_rus_2 := 4 ;
 968: LD_ADDR_EXP 8
 972: PUSH
 973: LD_INT 4
 975: ST_TO_ADDR
// cratesSpawns := [ [ amerCrates , 1 , 0 , [ 200 , 250 , 300 ] [ cratesSpawn ] ] , [ rusCrates , 8 , 50 , 500 ] , [ legCrates , 5 , 50 , 300 ] , [ playerCrates , [ 4 , 5 , 6 ] [ cratesSpawn ] , 30 , [ 300 , 450 , 500 ] [ cratesSpawn ] ] ] ;
 976: LD_ADDR_EXP 19
 980: PUSH
 981: LD_INT 5
 983: PUSH
 984: LD_INT 1
 986: PUSH
 987: LD_INT 0
 989: PUSH
 990: LD_INT 200
 992: PUSH
 993: LD_INT 250
 995: PUSH
 996: LD_INT 300
 998: PUSH
 999: EMPTY
1000: LIST
1001: LIST
1002: LIST
1003: PUSH
1004: LD_EXP 26
1008: ARRAY
1009: PUSH
1010: EMPTY
1011: LIST
1012: LIST
1013: LIST
1014: LIST
1015: PUSH
1016: LD_INT 13
1018: PUSH
1019: LD_INT 8
1021: PUSH
1022: LD_INT 50
1024: PUSH
1025: LD_INT 500
1027: PUSH
1028: EMPTY
1029: LIST
1030: LIST
1031: LIST
1032: LIST
1033: PUSH
1034: LD_INT 17
1036: PUSH
1037: LD_INT 5
1039: PUSH
1040: LD_INT 50
1042: PUSH
1043: LD_INT 300
1045: PUSH
1046: EMPTY
1047: LIST
1048: LIST
1049: LIST
1050: LIST
1051: PUSH
1052: LD_INT 18
1054: PUSH
1055: LD_INT 4
1057: PUSH
1058: LD_INT 5
1060: PUSH
1061: LD_INT 6
1063: PUSH
1064: EMPTY
1065: LIST
1066: LIST
1067: LIST
1068: PUSH
1069: LD_EXP 26
1073: ARRAY
1074: PUSH
1075: LD_INT 30
1077: PUSH
1078: LD_INT 300
1080: PUSH
1081: LD_INT 450
1083: PUSH
1084: LD_INT 500
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: LIST
1091: PUSH
1092: LD_EXP 26
1096: ARRAY
1097: PUSH
1098: EMPTY
1099: LIST
1100: LIST
1101: LIST
1102: LIST
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: LIST
1108: LIST
1109: ST_TO_ADDR
// sources := [ [ 190 , 193 , mat_siberit ] , [ 182 , 117 , mat_siberit ] , [ 114 , 152 , mat_oil ] , [ 85 , 38 , mat_oil ] ] ;
1110: LD_ADDR_VAR 0 4
1114: PUSH
1115: LD_INT 190
1117: PUSH
1118: LD_INT 193
1120: PUSH
1121: LD_INT 3
1123: PUSH
1124: EMPTY
1125: LIST
1126: LIST
1127: LIST
1128: PUSH
1129: LD_INT 182
1131: PUSH
1132: LD_INT 117
1134: PUSH
1135: LD_INT 3
1137: PUSH
1138: EMPTY
1139: LIST
1140: LIST
1141: LIST
1142: PUSH
1143: LD_INT 114
1145: PUSH
1146: LD_INT 152
1148: PUSH
1149: LD_INT 2
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: LIST
1156: PUSH
1157: LD_INT 85
1159: PUSH
1160: LD_INT 38
1162: PUSH
1163: LD_INT 2
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: LIST
1170: PUSH
1171: EMPTY
1172: LIST
1173: LIST
1174: LIST
1175: LIST
1176: ST_TO_ADDR
// for i in sources do
1177: LD_ADDR_VAR 0 2
1181: PUSH
1182: LD_VAR 0 4
1186: PUSH
1187: FOR_IN
1188: IFFALSE 1223
// CreateDepositXY ( i [ 1 ] , i [ 2 ] , i [ 3 ] ) ;
1190: LD_VAR 0 2
1194: PUSH
1195: LD_INT 1
1197: ARRAY
1198: PPUSH
1199: LD_VAR 0 2
1203: PUSH
1204: LD_INT 2
1206: ARRAY
1207: PPUSH
1208: LD_VAR 0 2
1212: PUSH
1213: LD_INT 3
1215: ARRAY
1216: PPUSH
1217: CALL_OW 62
1221: GO 1187
1223: POP
1224: POP
// disableGlobalTimer := false ;
1225: LD_ADDR_EXP 4
1229: PUSH
1230: LD_INT 0
1232: ST_TO_ADDR
// ruEscape := [ 0 , [ 5 , 6 , 7 ] [ Difficulty ] ] ;
1233: LD_ADDR_EXP 15
1237: PUSH
1238: LD_INT 0
1240: PUSH
1241: LD_INT 5
1243: PUSH
1244: LD_INT 6
1246: PUSH
1247: LD_INT 7
1249: PUSH
1250: EMPTY
1251: LIST
1252: LIST
1253: LIST
1254: PUSH
1255: LD_OWVAR 67
1259: ARRAY
1260: PUSH
1261: EMPTY
1262: LIST
1263: LIST
1264: ST_TO_ADDR
// ruOutpost := [ ] ;
1265: LD_ADDR_EXP 14
1269: PUSH
1270: EMPTY
1271: ST_TO_ADDR
// staticMines := [ ] ;
1272: LD_ADDR_EXP 16
1276: PUSH
1277: EMPTY
1278: ST_TO_ADDR
// baseCaptured := false ;
1279: LD_ADDR_EXP 17
1283: PUSH
1284: LD_INT 0
1286: ST_TO_ADDR
// legDestCounter := 0 ;
1287: LD_ADDR_EXP 18
1291: PUSH
1292: LD_INT 0
1294: ST_TO_ADDR
// legOfferAccepted := false ;
1295: LD_ADDR_EXP 20
1299: PUSH
1300: LD_INT 0
1302: ST_TO_ADDR
// legChangeSide := false ;
1303: LD_ADDR_EXP 21
1307: PUSH
1308: LD_INT 0
1310: ST_TO_ADDR
// allyDestCounter := 0 ;
1311: LD_ADDR_EXP 22
1315: PUSH
1316: LD_INT 0
1318: ST_TO_ADDR
// outpostEscape := false ;
1319: LD_ADDR_EXP 27
1323: PUSH
1324: LD_INT 0
1326: ST_TO_ADDR
// dialogueMineDetected := false ;
1327: LD_ADDR_EXP 28
1331: PUSH
1332: LD_INT 0
1334: ST_TO_ADDR
// PrepareAmericans ;
1335: CALL 6989 0 0
// PrepareLegion ;
1339: CALL 5407 0 0
// PrepareRussians ;
1343: CALL 2431 0 0
// playerForces := PreparePlayer ;
1347: LD_ADDR_EXP 10
1351: PUSH
1352: CALL 8262 0 0
1356: ST_TO_ADDR
// AnimateTrees ( true ) ;
1357: LD_INT 1
1359: PPUSH
1360: CALL_OW 573
// PrepareNature ( 4 , 3 , 8 , 5 , 3 , 1 , 8 , natureGroundArea , natureWaterArea ) ;
1364: LD_INT 4
1366: PPUSH
1367: LD_INT 3
1369: PPUSH
1370: LD_INT 8
1372: PPUSH
1373: LD_INT 5
1375: PPUSH
1376: LD_INT 3
1378: PPUSH
1379: LD_INT 1
1381: PPUSH
1382: LD_INT 8
1384: PPUSH
1385: LD_INT 2
1387: PPUSH
1388: LD_INT 1
1390: PPUSH
1391: CALL 54305 0 9
// MC_Start ;
1395: CALL 64609 0 0
// Action ;
1399: CALL 10361 0 0
// end ; end ;
1403: LD_VAR 0 1
1407: RET
// export function CustomInitMacro ; begin
1408: LD_INT 0
1410: PPUSH
// if GameType <> 1 then
1411: LD_EXP 2
1415: PUSH
1416: LD_INT 1
1418: NONEQUAL
1419: IFFALSE 1423
// exit ;
1421: GO 2426
// MC_SetScanArea ( mc_amer , amerBase ) ;
1423: LD_EXP 5
1427: PPUSH
1428: LD_INT 3
1430: PPUSH
1431: CALL 86986 0 2
// MC_SetParkingArea ( mc_amer , amerParking ) ;
1435: LD_EXP 5
1439: PPUSH
1440: LD_INT 4
1442: PPUSH
1443: CALL 86930 0 2
// MC_SetAllowedTurretWeapons ( mc_amer , [ us_radar , us_heavy_gun , us_rocket_launcher , us_laser , us_double_laser ] ) ;
1447: LD_EXP 5
1451: PPUSH
1452: LD_INT 11
1454: PUSH
1455: LD_INT 6
1457: PUSH
1458: LD_INT 7
1460: PUSH
1461: LD_INT 9
1463: PUSH
1464: LD_INT 10
1466: PUSH
1467: EMPTY
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: LIST
1473: PPUSH
1474: CALL 86818 0 2
// MC_SetCratesArea ( mc_amer , amerCrates ) ;
1478: LD_EXP 5
1482: PPUSH
1483: LD_INT 5
1485: PPUSH
1486: CALL 86500 0 2
// MC_SetTame ( mc_amer , amerBase ) ;
1490: LD_EXP 5
1494: PPUSH
1495: LD_INT 3
1497: PPUSH
1498: CALL 86231 0 2
// MC_SetDefenderLimit ( mc_amer , 3 ) ;
1502: LD_EXP 5
1506: PPUSH
1507: LD_INT 3
1509: PPUSH
1510: CALL 85913 0 2
// MC_SetProduceList ( mc_amer , [ [ us_medium_tracked , engine_combustion , control_remote , us_double_gun ] , [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , [ us_heavy_tracked , engine_combustion , control_remote , us_rocket_launcher ] , [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , [ us_medium_wheeled , engine_combustion , control_remote , us_cargo_bay ] ] ) ;
1514: LD_EXP 5
1518: PPUSH
1519: LD_INT 3
1521: PUSH
1522: LD_INT 1
1524: PUSH
1525: LD_INT 2
1527: PUSH
1528: LD_INT 5
1530: PUSH
1531: EMPTY
1532: LIST
1533: LIST
1534: LIST
1535: LIST
1536: PUSH
1537: LD_INT 4
1539: PUSH
1540: LD_INT 1
1542: PUSH
1543: LD_INT 2
1545: PUSH
1546: LD_INT 6
1548: PUSH
1549: EMPTY
1550: LIST
1551: LIST
1552: LIST
1553: LIST
1554: PUSH
1555: LD_INT 4
1557: PUSH
1558: LD_INT 1
1560: PUSH
1561: LD_INT 2
1563: PUSH
1564: LD_INT 7
1566: PUSH
1567: EMPTY
1568: LIST
1569: LIST
1570: LIST
1571: LIST
1572: PUSH
1573: LD_INT 4
1575: PUSH
1576: LD_INT 1
1578: PUSH
1579: LD_INT 2
1581: PUSH
1582: LD_INT 6
1584: PUSH
1585: EMPTY
1586: LIST
1587: LIST
1588: LIST
1589: LIST
1590: PUSH
1591: LD_INT 2
1593: PUSH
1594: LD_INT 1
1596: PUSH
1597: LD_INT 2
1599: PUSH
1600: LD_INT 12
1602: PUSH
1603: EMPTY
1604: LIST
1605: LIST
1606: LIST
1607: LIST
1608: PUSH
1609: EMPTY
1610: LIST
1611: LIST
1612: LIST
1613: LIST
1614: LIST
1615: PPUSH
1616: CALL 85728 0 2
// MC_SetBuildingList ( mc_amer , [ [ b_turret , 114 , 16 , 0 ] , [ b_bunker , 110 , 12 , 0 ] ] ) ;
1620: LD_EXP 5
1624: PPUSH
1625: LD_INT 33
1627: PUSH
1628: LD_INT 114
1630: PUSH
1631: LD_INT 16
1633: PUSH
1634: LD_INT 0
1636: PUSH
1637: EMPTY
1638: LIST
1639: LIST
1640: LIST
1641: LIST
1642: PUSH
1643: LD_INT 32
1645: PUSH
1646: LD_INT 110
1648: PUSH
1649: LD_INT 12
1651: PUSH
1652: LD_INT 0
1654: PUSH
1655: EMPTY
1656: LIST
1657: LIST
1658: LIST
1659: LIST
1660: PUSH
1661: EMPTY
1662: LIST
1663: LIST
1664: PPUSH
1665: CALL 85620 0 2
// MC_SetLabKind ( mc_amer , [ b_lab_weapon , b_lab_opto , b_lab_computer , b_lab_siberium ] ) ;
1669: LD_EXP 5
1673: PPUSH
1674: LD_INT 10
1676: PUSH
1677: LD_INT 15
1679: PUSH
1680: LD_INT 12
1682: PUSH
1683: LD_INT 11
1685: PUSH
1686: EMPTY
1687: LIST
1688: LIST
1689: LIST
1690: LIST
1691: PPUSH
1692: CALL 86407 0 2
// MC_SetScanArea ( mc_leg , legBase ) ;
1696: LD_EXP 6
1700: PPUSH
1701: LD_INT 6
1703: PPUSH
1704: CALL 86986 0 2
// MC_SetParkingArea ( mc_leg , legParking ) ;
1708: LD_EXP 6
1712: PPUSH
1713: LD_INT 7
1715: PPUSH
1716: CALL 86930 0 2
// MC_SetAllowedTurretWeapons ( mc_leg , [ ar_radar , ar_gun , ar_rocket_launcher , ar_gatling_gun ] ) ;
1720: LD_EXP 6
1724: PPUSH
1725: LD_INT 30
1727: PUSH
1728: LD_INT 27
1730: PUSH
1731: LD_INT 28
1733: PUSH
1734: LD_INT 25
1736: PUSH
1737: EMPTY
1738: LIST
1739: LIST
1740: LIST
1741: LIST
1742: PPUSH
1743: CALL 86818 0 2
// MC_SetCratesArea ( mc_leg , legCrates ) ;
1747: LD_EXP 6
1751: PPUSH
1752: LD_INT 17
1754: PPUSH
1755: CALL 86500 0 2
// MC_SetTame ( mc_leg , legBase ) ;
1759: LD_EXP 6
1763: PPUSH
1764: LD_INT 6
1766: PPUSH
1767: CALL 86231 0 2
// MC_SetDefenderLimit ( mc_leg , 5 ) ;
1771: LD_EXP 6
1775: PPUSH
1776: LD_INT 5
1778: PPUSH
1779: CALL 85913 0 2
// MC_SetMinesField ( mc_leg , 10 , legMines ) ;
1783: LD_EXP 6
1787: PPUSH
1788: LD_INT 10
1790: PPUSH
1791: LD_INT 9
1793: PPUSH
1794: CALL 85410 0 3
// MC_SetBuildingList ( mc_leg , [ [ b_armoury , 155 , 133 , 0 ] ] ) ;
1798: LD_EXP 6
1802: PPUSH
1803: LD_INT 4
1805: PUSH
1806: LD_INT 155
1808: PUSH
1809: LD_INT 133
1811: PUSH
1812: LD_INT 0
1814: PUSH
1815: EMPTY
1816: LIST
1817: LIST
1818: LIST
1819: LIST
1820: PUSH
1821: EMPTY
1822: LIST
1823: PPUSH
1824: CALL 85620 0 2
// MC_SetProduceList ( mc_leg , [ [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_solar , control_manual , ar_control_tower ] , [ ar_medium_trike , engine_combustion , control_manual , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_cargo_bay ] ] ) ;
1828: LD_EXP 6
1832: PPUSH
1833: LD_INT 13
1835: PUSH
1836: LD_INT 2
1838: PUSH
1839: LD_INT 1
1841: PUSH
1842: LD_INT 31
1844: PUSH
1845: EMPTY
1846: LIST
1847: LIST
1848: LIST
1849: LIST
1850: PUSH
1851: LD_INT 13
1853: PUSH
1854: LD_INT 2
1856: PUSH
1857: LD_INT 1
1859: PUSH
1860: LD_INT 31
1862: PUSH
1863: EMPTY
1864: LIST
1865: LIST
1866: LIST
1867: LIST
1868: PUSH
1869: LD_INT 13
1871: PUSH
1872: LD_INT 1
1874: PUSH
1875: LD_INT 1
1877: PUSH
1878: LD_INT 27
1880: PUSH
1881: EMPTY
1882: LIST
1883: LIST
1884: LIST
1885: LIST
1886: PUSH
1887: LD_INT 13
1889: PUSH
1890: LD_INT 1
1892: PUSH
1893: LD_INT 2
1895: PUSH
1896: LD_INT 27
1898: PUSH
1899: EMPTY
1900: LIST
1901: LIST
1902: LIST
1903: LIST
1904: PUSH
1905: LD_INT 13
1907: PUSH
1908: LD_INT 1
1910: PUSH
1911: LD_INT 2
1913: PUSH
1914: LD_INT 27
1916: PUSH
1917: EMPTY
1918: LIST
1919: LIST
1920: LIST
1921: LIST
1922: PUSH
1923: LD_INT 13
1925: PUSH
1926: LD_INT 1
1928: PUSH
1929: LD_INT 2
1931: PUSH
1932: LD_INT 28
1934: PUSH
1935: EMPTY
1936: LIST
1937: LIST
1938: LIST
1939: LIST
1940: PUSH
1941: LD_INT 13
1943: PUSH
1944: LD_INT 1
1946: PUSH
1947: LD_INT 2
1949: PUSH
1950: LD_INT 28
1952: PUSH
1953: EMPTY
1954: LIST
1955: LIST
1956: LIST
1957: LIST
1958: PUSH
1959: LD_INT 13
1961: PUSH
1962: LD_INT 1
1964: PUSH
1965: LD_INT 2
1967: PUSH
1968: LD_INT 32
1970: PUSH
1971: EMPTY
1972: LIST
1973: LIST
1974: LIST
1975: LIST
1976: PUSH
1977: EMPTY
1978: LIST
1979: LIST
1980: LIST
1981: LIST
1982: LIST
1983: LIST
1984: LIST
1985: LIST
1986: PPUSH
1987: CALL 85728 0 2
// MC_SetScanArea ( mc_rus_1 , rus1Base ) ;
1991: LD_EXP 7
1995: PPUSH
1996: LD_INT 11
1998: PPUSH
1999: CALL 86986 0 2
// MC_SetParkingArea ( mc_rus_1 , rus1Parking ) ;
2003: LD_EXP 7
2007: PPUSH
2008: LD_INT 12
2010: PPUSH
2011: CALL 86930 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_1 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2015: LD_EXP 7
2019: PPUSH
2020: LD_INT 43
2022: PUSH
2023: LD_INT 47
2025: PUSH
2026: LD_INT 45
2028: PUSH
2029: LD_INT 49
2031: PUSH
2032: LD_INT 46
2034: PUSH
2035: EMPTY
2036: LIST
2037: LIST
2038: LIST
2039: LIST
2040: LIST
2041: PPUSH
2042: CALL 86818 0 2
// MC_SetCratesArea ( mc_rus_1 , rusCrates ) ;
2046: LD_EXP 7
2050: PPUSH
2051: LD_INT 13
2053: PPUSH
2054: CALL 86500 0 2
// MC_SetTame ( mc_rus_1 , rus1Base ) ;
2058: LD_EXP 7
2062: PPUSH
2063: LD_INT 11
2065: PPUSH
2066: CALL 86231 0 2
// MC_SetDefenderLimit ( mc_rus_1 , 5 ) ;
2070: LD_EXP 7
2074: PPUSH
2075: LD_INT 5
2077: PPUSH
2078: CALL 85913 0 2
// MC_SetProduceList ( mc_rus_1 , [ [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_tracked , engine_combustion , control_computer , ru_cargo_bay ] ] ) ;
2082: LD_EXP 7
2086: PPUSH
2087: LD_INT 24
2089: PUSH
2090: LD_INT 1
2092: PUSH
2093: LD_INT 3
2095: PUSH
2096: LD_INT 46
2098: PUSH
2099: EMPTY
2100: LIST
2101: LIST
2102: LIST
2103: LIST
2104: PUSH
2105: LD_INT 24
2107: PUSH
2108: LD_INT 1
2110: PUSH
2111: LD_INT 3
2113: PUSH
2114: LD_INT 46
2116: PUSH
2117: EMPTY
2118: LIST
2119: LIST
2120: LIST
2121: LIST
2122: PUSH
2123: LD_INT 24
2125: PUSH
2126: LD_INT 1
2128: PUSH
2129: LD_INT 3
2131: PUSH
2132: LD_INT 46
2134: PUSH
2135: EMPTY
2136: LIST
2137: LIST
2138: LIST
2139: LIST
2140: PUSH
2141: LD_INT 24
2143: PUSH
2144: LD_INT 1
2146: PUSH
2147: LD_INT 3
2149: PUSH
2150: LD_INT 46
2152: PUSH
2153: EMPTY
2154: LIST
2155: LIST
2156: LIST
2157: LIST
2158: PUSH
2159: LD_INT 24
2161: PUSH
2162: LD_INT 1
2164: PUSH
2165: LD_INT 3
2167: PUSH
2168: LD_INT 46
2170: PUSH
2171: EMPTY
2172: LIST
2173: LIST
2174: LIST
2175: LIST
2176: PUSH
2177: LD_INT 22
2179: PUSH
2180: LD_INT 1
2182: PUSH
2183: LD_INT 3
2185: PUSH
2186: LD_INT 51
2188: PUSH
2189: EMPTY
2190: LIST
2191: LIST
2192: LIST
2193: LIST
2194: PUSH
2195: EMPTY
2196: LIST
2197: LIST
2198: LIST
2199: LIST
2200: LIST
2201: LIST
2202: PPUSH
2203: CALL 85728 0 2
// MC_SetTeleportExit ( mc_rus_1 , [ [ 115 , 201 ] ] ) ;
2207: LD_EXP 7
2211: PPUSH
2212: LD_INT 115
2214: PUSH
2215: LD_INT 201
2217: PUSH
2218: EMPTY
2219: LIST
2220: LIST
2221: PUSH
2222: EMPTY
2223: LIST
2224: PPUSH
2225: CALL 86556 0 2
// MC_SetScanArea ( mc_rus_2 , rus2Base ) ;
2229: LD_EXP 8
2233: PPUSH
2234: LD_INT 15
2236: PPUSH
2237: CALL 86986 0 2
// MC_SetParkingArea ( mc_rus_2 , rus2Parking ) ;
2241: LD_EXP 8
2245: PPUSH
2246: LD_INT 16
2248: PPUSH
2249: CALL 86930 0 2
// MC_SetAllowedTurretWeapons ( mc_rus_2 , [ ru_gatling_gun , ru_rocket , ru_rocket_launcher , ru_time_lapser , ru_heavy_gun ] ) ;
2253: LD_EXP 8
2257: PPUSH
2258: LD_INT 43
2260: PUSH
2261: LD_INT 47
2263: PUSH
2264: LD_INT 45
2266: PUSH
2267: LD_INT 49
2269: PUSH
2270: LD_INT 46
2272: PUSH
2273: EMPTY
2274: LIST
2275: LIST
2276: LIST
2277: LIST
2278: LIST
2279: PPUSH
2280: CALL 86818 0 2
// MC_SetCratesArea ( mc_rus_2 , rusCrates ) ;
2284: LD_EXP 8
2288: PPUSH
2289: LD_INT 13
2291: PPUSH
2292: CALL 86500 0 2
// MC_SetTame ( mc_rus_2 , rus2Base ) ;
2296: LD_EXP 8
2300: PPUSH
2301: LD_INT 15
2303: PPUSH
2304: CALL 86231 0 2
// MC_SetDefenderLimit ( mc_rus_2 , 4 ) ;
2308: LD_EXP 8
2312: PPUSH
2313: LD_INT 4
2315: PPUSH
2316: CALL 85913 0 2
// MC_SetProduceList ( mc_rus_2 , [ [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_rocket_launcher ] , [ ru_heavy_wheeled , engine_combustion , control_manual , ru_rocket ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_cargo_bay ] ] ) ;
2320: LD_EXP 8
2324: PPUSH
2325: LD_INT 23
2327: PUSH
2328: LD_INT 1
2330: PUSH
2331: LD_INT 3
2333: PUSH
2334: LD_INT 46
2336: PUSH
2337: EMPTY
2338: LIST
2339: LIST
2340: LIST
2341: LIST
2342: PUSH
2343: LD_INT 23
2345: PUSH
2346: LD_INT 1
2348: PUSH
2349: LD_INT 1
2351: PUSH
2352: LD_INT 46
2354: PUSH
2355: EMPTY
2356: LIST
2357: LIST
2358: LIST
2359: LIST
2360: PUSH
2361: LD_INT 23
2363: PUSH
2364: LD_INT 1
2366: PUSH
2367: LD_INT 3
2369: PUSH
2370: LD_INT 45
2372: PUSH
2373: EMPTY
2374: LIST
2375: LIST
2376: LIST
2377: LIST
2378: PUSH
2379: LD_INT 23
2381: PUSH
2382: LD_INT 1
2384: PUSH
2385: LD_INT 1
2387: PUSH
2388: LD_INT 47
2390: PUSH
2391: EMPTY
2392: LIST
2393: LIST
2394: LIST
2395: LIST
2396: PUSH
2397: LD_INT 21
2399: PUSH
2400: LD_INT 1
2402: PUSH
2403: LD_INT 3
2405: PUSH
2406: LD_INT 51
2408: PUSH
2409: EMPTY
2410: LIST
2411: LIST
2412: LIST
2413: LIST
2414: PUSH
2415: EMPTY
2416: LIST
2417: LIST
2418: LIST
2419: LIST
2420: LIST
2421: PPUSH
2422: CALL 85728 0 2
// end ;
2426: LD_VAR 0 1
2430: RET
// export function PrepareRussians ; var i , b , tmp , side , sr , depot , base ; begin
2431: LD_INT 0
2433: PPUSH
2434: PPUSH
2435: PPUSH
2436: PPUSH
2437: PPUSH
2438: PPUSH
2439: PPUSH
2440: PPUSH
// PrepareNature ( 0 , 0 , 3 , 0 , 0 , 0 , 0 , rusApe , 0 ) ;
2441: LD_INT 0
2443: PPUSH
2444: LD_INT 0
2446: PPUSH
2447: LD_INT 3
2449: PPUSH
2450: LD_INT 0
2452: PPUSH
2453: LD_INT 0
2455: PPUSH
2456: LD_INT 0
2458: PPUSH
2459: LD_INT 0
2461: PPUSH
2462: LD_INT 14
2464: PPUSH
2465: LD_INT 0
2467: PPUSH
2468: CALL 54305 0 9
// side := 3 ;
2472: LD_ADDR_VAR 0 5
2476: PUSH
2477: LD_INT 3
2479: ST_TO_ADDR
// SetTech ( tech_targTeleport , side , state_researched ) ;
2480: LD_INT 38
2482: PPUSH
2483: LD_VAR 0 5
2487: PPUSH
2488: LD_INT 2
2490: PPUSH
2491: CALL_OW 322
// SetTech ( tech_gun , side , state_researched ) ;
2495: LD_INT 39
2497: PPUSH
2498: LD_VAR 0 5
2502: PPUSH
2503: LD_INT 2
2505: PPUSH
2506: CALL_OW 322
// SetTech ( tech_advMet , side , state_researched ) ;
2510: LD_INT 34
2512: PPUSH
2513: LD_VAR 0 5
2517: PPUSH
2518: LD_INT 2
2520: PPUSH
2521: CALL_OW 322
// tmp := [ [ 0 , 208 , 163 , 4 , 0 , 0 ] , [ 3 , 194 , 161 , 1 , 0 , 0 ] , [ 17 , 190 , 161 , 1 , 0 , 0 ] , [ 5 , 200 , 145 , 3 , 0 , 0 ] , [ 32 , 192 , 144 , 3 , 0 , 0 ] , [ 26 , 216 , 172 , 3 , 0 , 0 ] , [ 26 , 218 , 176 , 3 , 0 , 0 ] , [ 29 , 182 , 149 , 3 , 0 , 0 ] , [ 8 , 201 , 171 , 0 , 10 , 11 ] , [ 32 , 188 , 167 , 0 , 0 , 0 ] , [ 32 , 202 , 179 , 0 , 0 , 0 ] , [ 32 , 209 , 182 , 0 , 0 , 0 ] , [ 32 , 220 , 183 , 5 , 0 , 0 ] , [ 32 , 225 , 181 , 5 , 0 , 0 ] , [ 26 , 220 , 174 , 5 , 0 , 0 ] , [ 1 , 84 , 128 , 4 , 0 , 0 ] , [ 3 , 68 , 121 , 1 , 0 , 0 ] , [ 19 , 72 , 125 , 5 , 0 , 0 ] , [ 18 , 68 , 124 , 0 , 0 , 0 ] , [ 24 , 64 , 121 , 1 , 0 , 0 ] , [ 17 , 65 , 118 , 2 , 0 , 0 ] , [ 21 , 68 , 117 , 3 , 0 , 0 ] , [ 8 , 68 , 130 , 1 , 14 , 10 ] , [ 8 , 67 , 110 , 2 , 11 , 12 ] , [ 28 , 71 , 136 , 2 , 0 , 0 ] , [ 28 , 73 , 141 , 2 , 0 , 0 ] , [ 30 , 75 , 145 , 2 , 0 , 0 ] , [ 5 , 111 , 138 , 4 , 0 , 0 ] , [ 33 , 104 , 130 , 3 , 0 , 0 ] , [ 33 , 110 , 142 , 5 , 0 , 0 ] , [ 33 , 91 , 131 , 5 , 0 , 0 ] , [ 33 , 107 , 157 , 5 , 0 , 0 ] , [ 33 , 104 , 160 , 5 , 0 , 0 ] , [ 33 , 101 , 162 , 5 , 0 , 0 ] , [ 32 , 87 , 157 , 5 , 0 , 0 ] , [ 32 , 82 , 158 , 5 , 0 , 0 ] , [ 33 , 91 , 118 , 4 , 0 , 0 ] , [ 33 , 89 , 107 , 4 , 0 , 0 ] , [ 5 , 86 , 96 , 3 , 0 , 0 ] , [ 33 , 91 , 102 , 4 , 0 , 0 ] , [ 32 , 80 , 95 , 3 , 0 , 0 ] , [ 28 , 77 , 105 , 3 , 0 , 0 ] , [ 28 , 85 , 113 , 3 , 0 , 0 ] , [ 28 , 55 , 97 , 3 , 0 , 0 ] , [ 28 , 88 , 128 , 3 , 0 , 0 ] , [ 32 , 69 , 101 , 2 , 0 , 0 ] , [ 1 , 34 , 23 , 4 , 0 , 0 ] , [ 8 , 25 , 4 , 3 , 11 , 10 ] , [ 8 , 15 , 4 , 2 , 14 , 12 ] , [ 29 , 55 , 35 , 2 , 0 , 0 ] , [ 29 , 24 , 44 , 2 , 0 , 0 ] , [ 34 , 34 , 32 , 4 , 0 , 0 ] , [ 3 , 14 , 16 , 1 , 0 , 0 ] , [ 24 , 10 , 16 , 1 , 0 , 0 ] , [ 19 , 11 , 13 , 2 , 0 , 0 ] , [ 18 , 14 , 12 , 3 , 0 , 0 ] , [ 16 , 14 , 19 , 0 , 0 , 0 ] , [ 17 , 18 , 20 , 5 , 0 , 0 ] , [ 28 , 10 , 5 , 1 , 0 , 0 ] , [ 28 , 8 , 8 , 1 , 0 , 0 ] , [ 26 , 19 , 2 , 1 , 0 , 0 ] , [ 26 , 30 , 2 , 1 , 0 , 0 ] , [ 5 , 53 , 20 , 4 , 0 , 0 ] , [ 32 , 55 , 24 , 4 , 0 , 0 ] , [ 32 , 61 , 45 , 5 , 0 , 0 ] , [ 32 , 52 , 51 , 5 , 0 , 0 ] , [ 33 , 56 , 51 , 5 , 0 , 0 ] , [ 33 , 62 , 49 , 5 , 0 , 0 ] , [ 33 , 41 , 47 , 5 , 0 , 0 ] , [ 33 , 33 , 52 , 5 , 0 , 0 ] , [ 5 , 31 , 40 , 0 , 0 , 0 ] , [ 33 , 65 , 37 , 5 , 0 , 0 ] , [ 33 , 63 , 29 , 4 , 0 , 0 ] , [ 33 , 54 , 11 , 4 , 0 , 0 ] , [ 33 , 51 , 6 , 4 , 0 , 0 ] , [ 26 , 39 , 25 , 0 , 0 , 0 ] , [ 26 , 37 , 21 , 0 , 0 , 0 ] , [ 32 , 35 , 17 , 4 , 0 , 0 ] , [ 33 , 35 , 28 , 4 , 0 , 0 ] , [ 33 , 28 , 46 , 5 , 0 , 0 ] , [ 33 , 31 , 6 , 4 , 0 , 0 ] , [ 26 , 54 , 38 , 4 , 0 , 0 ] , [ 33 , 207 , 167 , 3 , 0 , 0 ] ] ;
2525: LD_ADDR_VAR 0 4
2529: PUSH
2530: LD_INT 0
2532: PUSH
2533: LD_INT 208
2535: PUSH
2536: LD_INT 163
2538: PUSH
2539: LD_INT 4
2541: PUSH
2542: LD_INT 0
2544: PUSH
2545: LD_INT 0
2547: PUSH
2548: EMPTY
2549: LIST
2550: LIST
2551: LIST
2552: LIST
2553: LIST
2554: LIST
2555: PUSH
2556: LD_INT 3
2558: PUSH
2559: LD_INT 194
2561: PUSH
2562: LD_INT 161
2564: PUSH
2565: LD_INT 1
2567: PUSH
2568: LD_INT 0
2570: PUSH
2571: LD_INT 0
2573: PUSH
2574: EMPTY
2575: LIST
2576: LIST
2577: LIST
2578: LIST
2579: LIST
2580: LIST
2581: PUSH
2582: LD_INT 17
2584: PUSH
2585: LD_INT 190
2587: PUSH
2588: LD_INT 161
2590: PUSH
2591: LD_INT 1
2593: PUSH
2594: LD_INT 0
2596: PUSH
2597: LD_INT 0
2599: PUSH
2600: EMPTY
2601: LIST
2602: LIST
2603: LIST
2604: LIST
2605: LIST
2606: LIST
2607: PUSH
2608: LD_INT 5
2610: PUSH
2611: LD_INT 200
2613: PUSH
2614: LD_INT 145
2616: PUSH
2617: LD_INT 3
2619: PUSH
2620: LD_INT 0
2622: PUSH
2623: LD_INT 0
2625: PUSH
2626: EMPTY
2627: LIST
2628: LIST
2629: LIST
2630: LIST
2631: LIST
2632: LIST
2633: PUSH
2634: LD_INT 32
2636: PUSH
2637: LD_INT 192
2639: PUSH
2640: LD_INT 144
2642: PUSH
2643: LD_INT 3
2645: PUSH
2646: LD_INT 0
2648: PUSH
2649: LD_INT 0
2651: PUSH
2652: EMPTY
2653: LIST
2654: LIST
2655: LIST
2656: LIST
2657: LIST
2658: LIST
2659: PUSH
2660: LD_INT 26
2662: PUSH
2663: LD_INT 216
2665: PUSH
2666: LD_INT 172
2668: PUSH
2669: LD_INT 3
2671: PUSH
2672: LD_INT 0
2674: PUSH
2675: LD_INT 0
2677: PUSH
2678: EMPTY
2679: LIST
2680: LIST
2681: LIST
2682: LIST
2683: LIST
2684: LIST
2685: PUSH
2686: LD_INT 26
2688: PUSH
2689: LD_INT 218
2691: PUSH
2692: LD_INT 176
2694: PUSH
2695: LD_INT 3
2697: PUSH
2698: LD_INT 0
2700: PUSH
2701: LD_INT 0
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: LIST
2708: LIST
2709: LIST
2710: LIST
2711: PUSH
2712: LD_INT 29
2714: PUSH
2715: LD_INT 182
2717: PUSH
2718: LD_INT 149
2720: PUSH
2721: LD_INT 3
2723: PUSH
2724: LD_INT 0
2726: PUSH
2727: LD_INT 0
2729: PUSH
2730: EMPTY
2731: LIST
2732: LIST
2733: LIST
2734: LIST
2735: LIST
2736: LIST
2737: PUSH
2738: LD_INT 8
2740: PUSH
2741: LD_INT 201
2743: PUSH
2744: LD_INT 171
2746: PUSH
2747: LD_INT 0
2749: PUSH
2750: LD_INT 10
2752: PUSH
2753: LD_INT 11
2755: PUSH
2756: EMPTY
2757: LIST
2758: LIST
2759: LIST
2760: LIST
2761: LIST
2762: LIST
2763: PUSH
2764: LD_INT 32
2766: PUSH
2767: LD_INT 188
2769: PUSH
2770: LD_INT 167
2772: PUSH
2773: LD_INT 0
2775: PUSH
2776: LD_INT 0
2778: PUSH
2779: LD_INT 0
2781: PUSH
2782: EMPTY
2783: LIST
2784: LIST
2785: LIST
2786: LIST
2787: LIST
2788: LIST
2789: PUSH
2790: LD_INT 32
2792: PUSH
2793: LD_INT 202
2795: PUSH
2796: LD_INT 179
2798: PUSH
2799: LD_INT 0
2801: PUSH
2802: LD_INT 0
2804: PUSH
2805: LD_INT 0
2807: PUSH
2808: EMPTY
2809: LIST
2810: LIST
2811: LIST
2812: LIST
2813: LIST
2814: LIST
2815: PUSH
2816: LD_INT 32
2818: PUSH
2819: LD_INT 209
2821: PUSH
2822: LD_INT 182
2824: PUSH
2825: LD_INT 0
2827: PUSH
2828: LD_INT 0
2830: PUSH
2831: LD_INT 0
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: LIST
2838: LIST
2839: LIST
2840: LIST
2841: PUSH
2842: LD_INT 32
2844: PUSH
2845: LD_INT 220
2847: PUSH
2848: LD_INT 183
2850: PUSH
2851: LD_INT 5
2853: PUSH
2854: LD_INT 0
2856: PUSH
2857: LD_INT 0
2859: PUSH
2860: EMPTY
2861: LIST
2862: LIST
2863: LIST
2864: LIST
2865: LIST
2866: LIST
2867: PUSH
2868: LD_INT 32
2870: PUSH
2871: LD_INT 225
2873: PUSH
2874: LD_INT 181
2876: PUSH
2877: LD_INT 5
2879: PUSH
2880: LD_INT 0
2882: PUSH
2883: LD_INT 0
2885: PUSH
2886: EMPTY
2887: LIST
2888: LIST
2889: LIST
2890: LIST
2891: LIST
2892: LIST
2893: PUSH
2894: LD_INT 26
2896: PUSH
2897: LD_INT 220
2899: PUSH
2900: LD_INT 174
2902: PUSH
2903: LD_INT 5
2905: PUSH
2906: LD_INT 0
2908: PUSH
2909: LD_INT 0
2911: PUSH
2912: EMPTY
2913: LIST
2914: LIST
2915: LIST
2916: LIST
2917: LIST
2918: LIST
2919: PUSH
2920: LD_INT 1
2922: PUSH
2923: LD_INT 84
2925: PUSH
2926: LD_INT 128
2928: PUSH
2929: LD_INT 4
2931: PUSH
2932: LD_INT 0
2934: PUSH
2935: LD_INT 0
2937: PUSH
2938: EMPTY
2939: LIST
2940: LIST
2941: LIST
2942: LIST
2943: LIST
2944: LIST
2945: PUSH
2946: LD_INT 3
2948: PUSH
2949: LD_INT 68
2951: PUSH
2952: LD_INT 121
2954: PUSH
2955: LD_INT 1
2957: PUSH
2958: LD_INT 0
2960: PUSH
2961: LD_INT 0
2963: PUSH
2964: EMPTY
2965: LIST
2966: LIST
2967: LIST
2968: LIST
2969: LIST
2970: LIST
2971: PUSH
2972: LD_INT 19
2974: PUSH
2975: LD_INT 72
2977: PUSH
2978: LD_INT 125
2980: PUSH
2981: LD_INT 5
2983: PUSH
2984: LD_INT 0
2986: PUSH
2987: LD_INT 0
2989: PUSH
2990: EMPTY
2991: LIST
2992: LIST
2993: LIST
2994: LIST
2995: LIST
2996: LIST
2997: PUSH
2998: LD_INT 18
3000: PUSH
3001: LD_INT 68
3003: PUSH
3004: LD_INT 124
3006: PUSH
3007: LD_INT 0
3009: PUSH
3010: LD_INT 0
3012: PUSH
3013: LD_INT 0
3015: PUSH
3016: EMPTY
3017: LIST
3018: LIST
3019: LIST
3020: LIST
3021: LIST
3022: LIST
3023: PUSH
3024: LD_INT 24
3026: PUSH
3027: LD_INT 64
3029: PUSH
3030: LD_INT 121
3032: PUSH
3033: LD_INT 1
3035: PUSH
3036: LD_INT 0
3038: PUSH
3039: LD_INT 0
3041: PUSH
3042: EMPTY
3043: LIST
3044: LIST
3045: LIST
3046: LIST
3047: LIST
3048: LIST
3049: PUSH
3050: LD_INT 17
3052: PUSH
3053: LD_INT 65
3055: PUSH
3056: LD_INT 118
3058: PUSH
3059: LD_INT 2
3061: PUSH
3062: LD_INT 0
3064: PUSH
3065: LD_INT 0
3067: PUSH
3068: EMPTY
3069: LIST
3070: LIST
3071: LIST
3072: LIST
3073: LIST
3074: LIST
3075: PUSH
3076: LD_INT 21
3078: PUSH
3079: LD_INT 68
3081: PUSH
3082: LD_INT 117
3084: PUSH
3085: LD_INT 3
3087: PUSH
3088: LD_INT 0
3090: PUSH
3091: LD_INT 0
3093: PUSH
3094: EMPTY
3095: LIST
3096: LIST
3097: LIST
3098: LIST
3099: LIST
3100: LIST
3101: PUSH
3102: LD_INT 8
3104: PUSH
3105: LD_INT 68
3107: PUSH
3108: LD_INT 130
3110: PUSH
3111: LD_INT 1
3113: PUSH
3114: LD_INT 14
3116: PUSH
3117: LD_INT 10
3119: PUSH
3120: EMPTY
3121: LIST
3122: LIST
3123: LIST
3124: LIST
3125: LIST
3126: LIST
3127: PUSH
3128: LD_INT 8
3130: PUSH
3131: LD_INT 67
3133: PUSH
3134: LD_INT 110
3136: PUSH
3137: LD_INT 2
3139: PUSH
3140: LD_INT 11
3142: PUSH
3143: LD_INT 12
3145: PUSH
3146: EMPTY
3147: LIST
3148: LIST
3149: LIST
3150: LIST
3151: LIST
3152: LIST
3153: PUSH
3154: LD_INT 28
3156: PUSH
3157: LD_INT 71
3159: PUSH
3160: LD_INT 136
3162: PUSH
3163: LD_INT 2
3165: PUSH
3166: LD_INT 0
3168: PUSH
3169: LD_INT 0
3171: PUSH
3172: EMPTY
3173: LIST
3174: LIST
3175: LIST
3176: LIST
3177: LIST
3178: LIST
3179: PUSH
3180: LD_INT 28
3182: PUSH
3183: LD_INT 73
3185: PUSH
3186: LD_INT 141
3188: PUSH
3189: LD_INT 2
3191: PUSH
3192: LD_INT 0
3194: PUSH
3195: LD_INT 0
3197: PUSH
3198: EMPTY
3199: LIST
3200: LIST
3201: LIST
3202: LIST
3203: LIST
3204: LIST
3205: PUSH
3206: LD_INT 30
3208: PUSH
3209: LD_INT 75
3211: PUSH
3212: LD_INT 145
3214: PUSH
3215: LD_INT 2
3217: PUSH
3218: LD_INT 0
3220: PUSH
3221: LD_INT 0
3223: PUSH
3224: EMPTY
3225: LIST
3226: LIST
3227: LIST
3228: LIST
3229: LIST
3230: LIST
3231: PUSH
3232: LD_INT 5
3234: PUSH
3235: LD_INT 111
3237: PUSH
3238: LD_INT 138
3240: PUSH
3241: LD_INT 4
3243: PUSH
3244: LD_INT 0
3246: PUSH
3247: LD_INT 0
3249: PUSH
3250: EMPTY
3251: LIST
3252: LIST
3253: LIST
3254: LIST
3255: LIST
3256: LIST
3257: PUSH
3258: LD_INT 33
3260: PUSH
3261: LD_INT 104
3263: PUSH
3264: LD_INT 130
3266: PUSH
3267: LD_INT 3
3269: PUSH
3270: LD_INT 0
3272: PUSH
3273: LD_INT 0
3275: PUSH
3276: EMPTY
3277: LIST
3278: LIST
3279: LIST
3280: LIST
3281: LIST
3282: LIST
3283: PUSH
3284: LD_INT 33
3286: PUSH
3287: LD_INT 110
3289: PUSH
3290: LD_INT 142
3292: PUSH
3293: LD_INT 5
3295: PUSH
3296: LD_INT 0
3298: PUSH
3299: LD_INT 0
3301: PUSH
3302: EMPTY
3303: LIST
3304: LIST
3305: LIST
3306: LIST
3307: LIST
3308: LIST
3309: PUSH
3310: LD_INT 33
3312: PUSH
3313: LD_INT 91
3315: PUSH
3316: LD_INT 131
3318: PUSH
3319: LD_INT 5
3321: PUSH
3322: LD_INT 0
3324: PUSH
3325: LD_INT 0
3327: PUSH
3328: EMPTY
3329: LIST
3330: LIST
3331: LIST
3332: LIST
3333: LIST
3334: LIST
3335: PUSH
3336: LD_INT 33
3338: PUSH
3339: LD_INT 107
3341: PUSH
3342: LD_INT 157
3344: PUSH
3345: LD_INT 5
3347: PUSH
3348: LD_INT 0
3350: PUSH
3351: LD_INT 0
3353: PUSH
3354: EMPTY
3355: LIST
3356: LIST
3357: LIST
3358: LIST
3359: LIST
3360: LIST
3361: PUSH
3362: LD_INT 33
3364: PUSH
3365: LD_INT 104
3367: PUSH
3368: LD_INT 160
3370: PUSH
3371: LD_INT 5
3373: PUSH
3374: LD_INT 0
3376: PUSH
3377: LD_INT 0
3379: PUSH
3380: EMPTY
3381: LIST
3382: LIST
3383: LIST
3384: LIST
3385: LIST
3386: LIST
3387: PUSH
3388: LD_INT 33
3390: PUSH
3391: LD_INT 101
3393: PUSH
3394: LD_INT 162
3396: PUSH
3397: LD_INT 5
3399: PUSH
3400: LD_INT 0
3402: PUSH
3403: LD_INT 0
3405: PUSH
3406: EMPTY
3407: LIST
3408: LIST
3409: LIST
3410: LIST
3411: LIST
3412: LIST
3413: PUSH
3414: LD_INT 32
3416: PUSH
3417: LD_INT 87
3419: PUSH
3420: LD_INT 157
3422: PUSH
3423: LD_INT 5
3425: PUSH
3426: LD_INT 0
3428: PUSH
3429: LD_INT 0
3431: PUSH
3432: EMPTY
3433: LIST
3434: LIST
3435: LIST
3436: LIST
3437: LIST
3438: LIST
3439: PUSH
3440: LD_INT 32
3442: PUSH
3443: LD_INT 82
3445: PUSH
3446: LD_INT 158
3448: PUSH
3449: LD_INT 5
3451: PUSH
3452: LD_INT 0
3454: PUSH
3455: LD_INT 0
3457: PUSH
3458: EMPTY
3459: LIST
3460: LIST
3461: LIST
3462: LIST
3463: LIST
3464: LIST
3465: PUSH
3466: LD_INT 33
3468: PUSH
3469: LD_INT 91
3471: PUSH
3472: LD_INT 118
3474: PUSH
3475: LD_INT 4
3477: PUSH
3478: LD_INT 0
3480: PUSH
3481: LD_INT 0
3483: PUSH
3484: EMPTY
3485: LIST
3486: LIST
3487: LIST
3488: LIST
3489: LIST
3490: LIST
3491: PUSH
3492: LD_INT 33
3494: PUSH
3495: LD_INT 89
3497: PUSH
3498: LD_INT 107
3500: PUSH
3501: LD_INT 4
3503: PUSH
3504: LD_INT 0
3506: PUSH
3507: LD_INT 0
3509: PUSH
3510: EMPTY
3511: LIST
3512: LIST
3513: LIST
3514: LIST
3515: LIST
3516: LIST
3517: PUSH
3518: LD_INT 5
3520: PUSH
3521: LD_INT 86
3523: PUSH
3524: LD_INT 96
3526: PUSH
3527: LD_INT 3
3529: PUSH
3530: LD_INT 0
3532: PUSH
3533: LD_INT 0
3535: PUSH
3536: EMPTY
3537: LIST
3538: LIST
3539: LIST
3540: LIST
3541: LIST
3542: LIST
3543: PUSH
3544: LD_INT 33
3546: PUSH
3547: LD_INT 91
3549: PUSH
3550: LD_INT 102
3552: PUSH
3553: LD_INT 4
3555: PUSH
3556: LD_INT 0
3558: PUSH
3559: LD_INT 0
3561: PUSH
3562: EMPTY
3563: LIST
3564: LIST
3565: LIST
3566: LIST
3567: LIST
3568: LIST
3569: PUSH
3570: LD_INT 32
3572: PUSH
3573: LD_INT 80
3575: PUSH
3576: LD_INT 95
3578: PUSH
3579: LD_INT 3
3581: PUSH
3582: LD_INT 0
3584: PUSH
3585: LD_INT 0
3587: PUSH
3588: EMPTY
3589: LIST
3590: LIST
3591: LIST
3592: LIST
3593: LIST
3594: LIST
3595: PUSH
3596: LD_INT 28
3598: PUSH
3599: LD_INT 77
3601: PUSH
3602: LD_INT 105
3604: PUSH
3605: LD_INT 3
3607: PUSH
3608: LD_INT 0
3610: PUSH
3611: LD_INT 0
3613: PUSH
3614: EMPTY
3615: LIST
3616: LIST
3617: LIST
3618: LIST
3619: LIST
3620: LIST
3621: PUSH
3622: LD_INT 28
3624: PUSH
3625: LD_INT 85
3627: PUSH
3628: LD_INT 113
3630: PUSH
3631: LD_INT 3
3633: PUSH
3634: LD_INT 0
3636: PUSH
3637: LD_INT 0
3639: PUSH
3640: EMPTY
3641: LIST
3642: LIST
3643: LIST
3644: LIST
3645: LIST
3646: LIST
3647: PUSH
3648: LD_INT 28
3650: PUSH
3651: LD_INT 55
3653: PUSH
3654: LD_INT 97
3656: PUSH
3657: LD_INT 3
3659: PUSH
3660: LD_INT 0
3662: PUSH
3663: LD_INT 0
3665: PUSH
3666: EMPTY
3667: LIST
3668: LIST
3669: LIST
3670: LIST
3671: LIST
3672: LIST
3673: PUSH
3674: LD_INT 28
3676: PUSH
3677: LD_INT 88
3679: PUSH
3680: LD_INT 128
3682: PUSH
3683: LD_INT 3
3685: PUSH
3686: LD_INT 0
3688: PUSH
3689: LD_INT 0
3691: PUSH
3692: EMPTY
3693: LIST
3694: LIST
3695: LIST
3696: LIST
3697: LIST
3698: LIST
3699: PUSH
3700: LD_INT 32
3702: PUSH
3703: LD_INT 69
3705: PUSH
3706: LD_INT 101
3708: PUSH
3709: LD_INT 2
3711: PUSH
3712: LD_INT 0
3714: PUSH
3715: LD_INT 0
3717: PUSH
3718: EMPTY
3719: LIST
3720: LIST
3721: LIST
3722: LIST
3723: LIST
3724: LIST
3725: PUSH
3726: LD_INT 1
3728: PUSH
3729: LD_INT 34
3731: PUSH
3732: LD_INT 23
3734: PUSH
3735: LD_INT 4
3737: PUSH
3738: LD_INT 0
3740: PUSH
3741: LD_INT 0
3743: PUSH
3744: EMPTY
3745: LIST
3746: LIST
3747: LIST
3748: LIST
3749: LIST
3750: LIST
3751: PUSH
3752: LD_INT 8
3754: PUSH
3755: LD_INT 25
3757: PUSH
3758: LD_INT 4
3760: PUSH
3761: LD_INT 3
3763: PUSH
3764: LD_INT 11
3766: PUSH
3767: LD_INT 10
3769: PUSH
3770: EMPTY
3771: LIST
3772: LIST
3773: LIST
3774: LIST
3775: LIST
3776: LIST
3777: PUSH
3778: LD_INT 8
3780: PUSH
3781: LD_INT 15
3783: PUSH
3784: LD_INT 4
3786: PUSH
3787: LD_INT 2
3789: PUSH
3790: LD_INT 14
3792: PUSH
3793: LD_INT 12
3795: PUSH
3796: EMPTY
3797: LIST
3798: LIST
3799: LIST
3800: LIST
3801: LIST
3802: LIST
3803: PUSH
3804: LD_INT 29
3806: PUSH
3807: LD_INT 55
3809: PUSH
3810: LD_INT 35
3812: PUSH
3813: LD_INT 2
3815: PUSH
3816: LD_INT 0
3818: PUSH
3819: LD_INT 0
3821: PUSH
3822: EMPTY
3823: LIST
3824: LIST
3825: LIST
3826: LIST
3827: LIST
3828: LIST
3829: PUSH
3830: LD_INT 29
3832: PUSH
3833: LD_INT 24
3835: PUSH
3836: LD_INT 44
3838: PUSH
3839: LD_INT 2
3841: PUSH
3842: LD_INT 0
3844: PUSH
3845: LD_INT 0
3847: PUSH
3848: EMPTY
3849: LIST
3850: LIST
3851: LIST
3852: LIST
3853: LIST
3854: LIST
3855: PUSH
3856: LD_INT 34
3858: PUSH
3859: LD_INT 34
3861: PUSH
3862: LD_INT 32
3864: PUSH
3865: LD_INT 4
3867: PUSH
3868: LD_INT 0
3870: PUSH
3871: LD_INT 0
3873: PUSH
3874: EMPTY
3875: LIST
3876: LIST
3877: LIST
3878: LIST
3879: LIST
3880: LIST
3881: PUSH
3882: LD_INT 3
3884: PUSH
3885: LD_INT 14
3887: PUSH
3888: LD_INT 16
3890: PUSH
3891: LD_INT 1
3893: PUSH
3894: LD_INT 0
3896: PUSH
3897: LD_INT 0
3899: PUSH
3900: EMPTY
3901: LIST
3902: LIST
3903: LIST
3904: LIST
3905: LIST
3906: LIST
3907: PUSH
3908: LD_INT 24
3910: PUSH
3911: LD_INT 10
3913: PUSH
3914: LD_INT 16
3916: PUSH
3917: LD_INT 1
3919: PUSH
3920: LD_INT 0
3922: PUSH
3923: LD_INT 0
3925: PUSH
3926: EMPTY
3927: LIST
3928: LIST
3929: LIST
3930: LIST
3931: LIST
3932: LIST
3933: PUSH
3934: LD_INT 19
3936: PUSH
3937: LD_INT 11
3939: PUSH
3940: LD_INT 13
3942: PUSH
3943: LD_INT 2
3945: PUSH
3946: LD_INT 0
3948: PUSH
3949: LD_INT 0
3951: PUSH
3952: EMPTY
3953: LIST
3954: LIST
3955: LIST
3956: LIST
3957: LIST
3958: LIST
3959: PUSH
3960: LD_INT 18
3962: PUSH
3963: LD_INT 14
3965: PUSH
3966: LD_INT 12
3968: PUSH
3969: LD_INT 3
3971: PUSH
3972: LD_INT 0
3974: PUSH
3975: LD_INT 0
3977: PUSH
3978: EMPTY
3979: LIST
3980: LIST
3981: LIST
3982: LIST
3983: LIST
3984: LIST
3985: PUSH
3986: LD_INT 16
3988: PUSH
3989: LD_INT 14
3991: PUSH
3992: LD_INT 19
3994: PUSH
3995: LD_INT 0
3997: PUSH
3998: LD_INT 0
4000: PUSH
4001: LD_INT 0
4003: PUSH
4004: EMPTY
4005: LIST
4006: LIST
4007: LIST
4008: LIST
4009: LIST
4010: LIST
4011: PUSH
4012: LD_INT 17
4014: PUSH
4015: LD_INT 18
4017: PUSH
4018: LD_INT 20
4020: PUSH
4021: LD_INT 5
4023: PUSH
4024: LD_INT 0
4026: PUSH
4027: LD_INT 0
4029: PUSH
4030: EMPTY
4031: LIST
4032: LIST
4033: LIST
4034: LIST
4035: LIST
4036: LIST
4037: PUSH
4038: LD_INT 28
4040: PUSH
4041: LD_INT 10
4043: PUSH
4044: LD_INT 5
4046: PUSH
4047: LD_INT 1
4049: PUSH
4050: LD_INT 0
4052: PUSH
4053: LD_INT 0
4055: PUSH
4056: EMPTY
4057: LIST
4058: LIST
4059: LIST
4060: LIST
4061: LIST
4062: LIST
4063: PUSH
4064: LD_INT 28
4066: PUSH
4067: LD_INT 8
4069: PUSH
4070: LD_INT 8
4072: PUSH
4073: LD_INT 1
4075: PUSH
4076: LD_INT 0
4078: PUSH
4079: LD_INT 0
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: LIST
4086: LIST
4087: LIST
4088: LIST
4089: PUSH
4090: LD_INT 26
4092: PUSH
4093: LD_INT 19
4095: PUSH
4096: LD_INT 2
4098: PUSH
4099: LD_INT 1
4101: PUSH
4102: LD_INT 0
4104: PUSH
4105: LD_INT 0
4107: PUSH
4108: EMPTY
4109: LIST
4110: LIST
4111: LIST
4112: LIST
4113: LIST
4114: LIST
4115: PUSH
4116: LD_INT 26
4118: PUSH
4119: LD_INT 30
4121: PUSH
4122: LD_INT 2
4124: PUSH
4125: LD_INT 1
4127: PUSH
4128: LD_INT 0
4130: PUSH
4131: LD_INT 0
4133: PUSH
4134: EMPTY
4135: LIST
4136: LIST
4137: LIST
4138: LIST
4139: LIST
4140: LIST
4141: PUSH
4142: LD_INT 5
4144: PUSH
4145: LD_INT 53
4147: PUSH
4148: LD_INT 20
4150: PUSH
4151: LD_INT 4
4153: PUSH
4154: LD_INT 0
4156: PUSH
4157: LD_INT 0
4159: PUSH
4160: EMPTY
4161: LIST
4162: LIST
4163: LIST
4164: LIST
4165: LIST
4166: LIST
4167: PUSH
4168: LD_INT 32
4170: PUSH
4171: LD_INT 55
4173: PUSH
4174: LD_INT 24
4176: PUSH
4177: LD_INT 4
4179: PUSH
4180: LD_INT 0
4182: PUSH
4183: LD_INT 0
4185: PUSH
4186: EMPTY
4187: LIST
4188: LIST
4189: LIST
4190: LIST
4191: LIST
4192: LIST
4193: PUSH
4194: LD_INT 32
4196: PUSH
4197: LD_INT 61
4199: PUSH
4200: LD_INT 45
4202: PUSH
4203: LD_INT 5
4205: PUSH
4206: LD_INT 0
4208: PUSH
4209: LD_INT 0
4211: PUSH
4212: EMPTY
4213: LIST
4214: LIST
4215: LIST
4216: LIST
4217: LIST
4218: LIST
4219: PUSH
4220: LD_INT 32
4222: PUSH
4223: LD_INT 52
4225: PUSH
4226: LD_INT 51
4228: PUSH
4229: LD_INT 5
4231: PUSH
4232: LD_INT 0
4234: PUSH
4235: LD_INT 0
4237: PUSH
4238: EMPTY
4239: LIST
4240: LIST
4241: LIST
4242: LIST
4243: LIST
4244: LIST
4245: PUSH
4246: LD_INT 33
4248: PUSH
4249: LD_INT 56
4251: PUSH
4252: LD_INT 51
4254: PUSH
4255: LD_INT 5
4257: PUSH
4258: LD_INT 0
4260: PUSH
4261: LD_INT 0
4263: PUSH
4264: EMPTY
4265: LIST
4266: LIST
4267: LIST
4268: LIST
4269: LIST
4270: LIST
4271: PUSH
4272: LD_INT 33
4274: PUSH
4275: LD_INT 62
4277: PUSH
4278: LD_INT 49
4280: PUSH
4281: LD_INT 5
4283: PUSH
4284: LD_INT 0
4286: PUSH
4287: LD_INT 0
4289: PUSH
4290: EMPTY
4291: LIST
4292: LIST
4293: LIST
4294: LIST
4295: LIST
4296: LIST
4297: PUSH
4298: LD_INT 33
4300: PUSH
4301: LD_INT 41
4303: PUSH
4304: LD_INT 47
4306: PUSH
4307: LD_INT 5
4309: PUSH
4310: LD_INT 0
4312: PUSH
4313: LD_INT 0
4315: PUSH
4316: EMPTY
4317: LIST
4318: LIST
4319: LIST
4320: LIST
4321: LIST
4322: LIST
4323: PUSH
4324: LD_INT 33
4326: PUSH
4327: LD_INT 33
4329: PUSH
4330: LD_INT 52
4332: PUSH
4333: LD_INT 5
4335: PUSH
4336: LD_INT 0
4338: PUSH
4339: LD_INT 0
4341: PUSH
4342: EMPTY
4343: LIST
4344: LIST
4345: LIST
4346: LIST
4347: LIST
4348: LIST
4349: PUSH
4350: LD_INT 5
4352: PUSH
4353: LD_INT 31
4355: PUSH
4356: LD_INT 40
4358: PUSH
4359: LD_INT 0
4361: PUSH
4362: LD_INT 0
4364: PUSH
4365: LD_INT 0
4367: PUSH
4368: EMPTY
4369: LIST
4370: LIST
4371: LIST
4372: LIST
4373: LIST
4374: LIST
4375: PUSH
4376: LD_INT 33
4378: PUSH
4379: LD_INT 65
4381: PUSH
4382: LD_INT 37
4384: PUSH
4385: LD_INT 5
4387: PUSH
4388: LD_INT 0
4390: PUSH
4391: LD_INT 0
4393: PUSH
4394: EMPTY
4395: LIST
4396: LIST
4397: LIST
4398: LIST
4399: LIST
4400: LIST
4401: PUSH
4402: LD_INT 33
4404: PUSH
4405: LD_INT 63
4407: PUSH
4408: LD_INT 29
4410: PUSH
4411: LD_INT 4
4413: PUSH
4414: LD_INT 0
4416: PUSH
4417: LD_INT 0
4419: PUSH
4420: EMPTY
4421: LIST
4422: LIST
4423: LIST
4424: LIST
4425: LIST
4426: LIST
4427: PUSH
4428: LD_INT 33
4430: PUSH
4431: LD_INT 54
4433: PUSH
4434: LD_INT 11
4436: PUSH
4437: LD_INT 4
4439: PUSH
4440: LD_INT 0
4442: PUSH
4443: LD_INT 0
4445: PUSH
4446: EMPTY
4447: LIST
4448: LIST
4449: LIST
4450: LIST
4451: LIST
4452: LIST
4453: PUSH
4454: LD_INT 33
4456: PUSH
4457: LD_INT 51
4459: PUSH
4460: LD_INT 6
4462: PUSH
4463: LD_INT 4
4465: PUSH
4466: LD_INT 0
4468: PUSH
4469: LD_INT 0
4471: PUSH
4472: EMPTY
4473: LIST
4474: LIST
4475: LIST
4476: LIST
4477: LIST
4478: LIST
4479: PUSH
4480: LD_INT 26
4482: PUSH
4483: LD_INT 39
4485: PUSH
4486: LD_INT 25
4488: PUSH
4489: LD_INT 0
4491: PUSH
4492: LD_INT 0
4494: PUSH
4495: LD_INT 0
4497: PUSH
4498: EMPTY
4499: LIST
4500: LIST
4501: LIST
4502: LIST
4503: LIST
4504: LIST
4505: PUSH
4506: LD_INT 26
4508: PUSH
4509: LD_INT 37
4511: PUSH
4512: LD_INT 21
4514: PUSH
4515: LD_INT 0
4517: PUSH
4518: LD_INT 0
4520: PUSH
4521: LD_INT 0
4523: PUSH
4524: EMPTY
4525: LIST
4526: LIST
4527: LIST
4528: LIST
4529: LIST
4530: LIST
4531: PUSH
4532: LD_INT 32
4534: PUSH
4535: LD_INT 35
4537: PUSH
4538: LD_INT 17
4540: PUSH
4541: LD_INT 4
4543: PUSH
4544: LD_INT 0
4546: PUSH
4547: LD_INT 0
4549: PUSH
4550: EMPTY
4551: LIST
4552: LIST
4553: LIST
4554: LIST
4555: LIST
4556: LIST
4557: PUSH
4558: LD_INT 33
4560: PUSH
4561: LD_INT 35
4563: PUSH
4564: LD_INT 28
4566: PUSH
4567: LD_INT 4
4569: PUSH
4570: LD_INT 0
4572: PUSH
4573: LD_INT 0
4575: PUSH
4576: EMPTY
4577: LIST
4578: LIST
4579: LIST
4580: LIST
4581: LIST
4582: LIST
4583: PUSH
4584: LD_INT 33
4586: PUSH
4587: LD_INT 28
4589: PUSH
4590: LD_INT 46
4592: PUSH
4593: LD_INT 5
4595: PUSH
4596: LD_INT 0
4598: PUSH
4599: LD_INT 0
4601: PUSH
4602: EMPTY
4603: LIST
4604: LIST
4605: LIST
4606: LIST
4607: LIST
4608: LIST
4609: PUSH
4610: LD_INT 33
4612: PUSH
4613: LD_INT 31
4615: PUSH
4616: LD_INT 6
4618: PUSH
4619: LD_INT 4
4621: PUSH
4622: LD_INT 0
4624: PUSH
4625: LD_INT 0
4627: PUSH
4628: EMPTY
4629: LIST
4630: LIST
4631: LIST
4632: LIST
4633: LIST
4634: LIST
4635: PUSH
4636: LD_INT 26
4638: PUSH
4639: LD_INT 54
4641: PUSH
4642: LD_INT 38
4644: PUSH
4645: LD_INT 4
4647: PUSH
4648: LD_INT 0
4650: PUSH
4651: LD_INT 0
4653: PUSH
4654: EMPTY
4655: LIST
4656: LIST
4657: LIST
4658: LIST
4659: LIST
4660: LIST
4661: PUSH
4662: LD_INT 33
4664: PUSH
4665: LD_INT 207
4667: PUSH
4668: LD_INT 167
4670: PUSH
4671: LD_INT 3
4673: PUSH
4674: LD_INT 0
4676: PUSH
4677: LD_INT 0
4679: PUSH
4680: EMPTY
4681: LIST
4682: LIST
4683: LIST
4684: LIST
4685: LIST
4686: LIST
4687: PUSH
4688: EMPTY
4689: LIST
4690: LIST
4691: LIST
4692: LIST
4693: LIST
4694: LIST
4695: LIST
4696: LIST
4697: LIST
4698: LIST
4699: LIST
4700: LIST
4701: LIST
4702: LIST
4703: LIST
4704: LIST
4705: LIST
4706: LIST
4707: LIST
4708: LIST
4709: LIST
4710: LIST
4711: LIST
4712: LIST
4713: LIST
4714: LIST
4715: LIST
4716: LIST
4717: LIST
4718: LIST
4719: LIST
4720: LIST
4721: LIST
4722: LIST
4723: LIST
4724: LIST
4725: LIST
4726: LIST
4727: LIST
4728: LIST
4729: LIST
4730: LIST
4731: LIST
4732: LIST
4733: LIST
4734: LIST
4735: LIST
4736: LIST
4737: LIST
4738: LIST
4739: LIST
4740: LIST
4741: LIST
4742: LIST
4743: LIST
4744: LIST
4745: LIST
4746: LIST
4747: LIST
4748: LIST
4749: LIST
4750: LIST
4751: LIST
4752: LIST
4753: LIST
4754: LIST
4755: LIST
4756: LIST
4757: LIST
4758: LIST
4759: LIST
4760: LIST
4761: LIST
4762: LIST
4763: LIST
4764: LIST
4765: LIST
4766: LIST
4767: LIST
4768: LIST
4769: LIST
4770: LIST
4771: LIST
4772: ST_TO_ADDR
// for i in tmp do
4773: LD_ADDR_VAR 0 2
4777: PUSH
4778: LD_VAR 0 4
4782: PUSH
4783: FOR_IN
4784: IFFALSE 5015
// begin uc_side := side ;
4786: LD_ADDR_OWVAR 20
4790: PUSH
4791: LD_VAR 0 5
4795: ST_TO_ADDR
// uc_nation := nation_russian ;
4796: LD_ADDR_OWVAR 21
4800: PUSH
4801: LD_INT 3
4803: ST_TO_ADDR
// bc_type := i [ 1 ] ;
4804: LD_ADDR_OWVAR 42
4808: PUSH
4809: LD_VAR 0 2
4813: PUSH
4814: LD_INT 1
4816: ARRAY
4817: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
4818: LD_ADDR_OWVAR 43
4822: PUSH
4823: LD_INT 5
4825: PPUSH
4826: LD_INT 6
4828: PPUSH
4829: CALL_OW 12
4833: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
4834: LD_ADDR_OWVAR 44
4838: PUSH
4839: LD_VAR 0 2
4843: PUSH
4844: LD_INT 5
4846: ARRAY
4847: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
4848: LD_ADDR_OWVAR 45
4852: PUSH
4853: LD_VAR 0 2
4857: PUSH
4858: LD_INT 6
4860: ARRAY
4861: ST_TO_ADDR
// sr := 0 ;
4862: LD_ADDR_VAR 0 6
4866: PUSH
4867: LD_INT 0
4869: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
4870: LD_VAR 0 2
4874: PUSH
4875: LD_INT 1
4877: ARRAY
4878: PUSH
4879: LD_INT 29
4881: EQUAL
4882: IFFALSE 4894
// sr := mat_oil else
4884: LD_ADDR_VAR 0 6
4888: PUSH
4889: LD_INT 2
4891: ST_TO_ADDR
4892: GO 4916
// if i [ 1 ] = b_siberite_mine then
4894: LD_VAR 0 2
4898: PUSH
4899: LD_INT 1
4901: ARRAY
4902: PUSH
4903: LD_INT 30
4905: EQUAL
4906: IFFALSE 4916
// sr := mat_siberit ;
4908: LD_ADDR_VAR 0 6
4912: PUSH
4913: LD_INT 3
4915: ST_TO_ADDR
// if sr then
4916: LD_VAR 0 6
4920: IFFALSE 4976
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
4922: LD_VAR 0 2
4926: PUSH
4927: LD_INT 2
4929: ARRAY
4930: PPUSH
4931: LD_VAR 0 2
4935: PUSH
4936: LD_INT 3
4938: ARRAY
4939: PPUSH
4940: LD_VAR 0 6
4944: PPUSH
4945: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
4949: LD_VAR 0 2
4953: PUSH
4954: LD_INT 2
4956: ARRAY
4957: PPUSH
4958: LD_VAR 0 2
4962: PUSH
4963: LD_INT 3
4965: ARRAY
4966: PPUSH
4967: LD_VAR 0 5
4971: PPUSH
4972: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
4976: LD_ADDR_VAR 0 3
4980: PUSH
4981: LD_VAR 0 2
4985: PUSH
4986: LD_INT 2
4988: ARRAY
4989: PPUSH
4990: LD_VAR 0 2
4994: PUSH
4995: LD_INT 3
4997: ARRAY
4998: PPUSH
4999: LD_VAR 0 2
5003: PUSH
5004: LD_INT 4
5006: ARRAY
5007: PPUSH
5008: CALL_OW 47
5012: ST_TO_ADDR
// end ;
5013: GO 4783
5015: POP
5016: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
5017: LD_ADDR_VAR 0 7
5021: PUSH
5022: LD_INT 22
5024: PUSH
5025: LD_VAR 0 5
5029: PUSH
5030: EMPTY
5031: LIST
5032: LIST
5033: PUSH
5034: LD_INT 30
5036: PUSH
5037: LD_INT 1
5039: PUSH
5040: EMPTY
5041: LIST
5042: LIST
5043: PUSH
5044: EMPTY
5045: LIST
5046: LIST
5047: PPUSH
5048: CALL_OW 69
5052: ST_TO_ADDR
// if not depot then
5053: LD_VAR 0 7
5057: NOT
5058: IFFALSE 5062
// exit ;
5060: GO 5402
// base := PrepareBase ( depot [ 2 ] , rus2Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 12 , 6 , 6 , 4 ] ) ;
5062: LD_ADDR_VAR 0 8
5066: PUSH
5067: LD_VAR 0 7
5071: PUSH
5072: LD_INT 2
5074: ARRAY
5075: PPUSH
5076: LD_INT 15
5078: PPUSH
5079: LD_INT 0
5081: PPUSH
5082: LD_INT 6
5084: PUSH
5085: LD_INT 7
5087: PUSH
5088: LD_INT 8
5090: PUSH
5091: EMPTY
5092: LIST
5093: LIST
5094: LIST
5095: PUSH
5096: LD_OWVAR 67
5100: ARRAY
5101: PPUSH
5102: LD_INT 3000
5104: PUSH
5105: LD_INT 300
5107: PUSH
5108: LD_INT 100
5110: PUSH
5111: EMPTY
5112: LIST
5113: LIST
5114: LIST
5115: PPUSH
5116: LD_INT 12
5118: PUSH
5119: LD_INT 6
5121: PUSH
5122: LD_INT 6
5124: PUSH
5125: LD_INT 4
5127: PUSH
5128: EMPTY
5129: LIST
5130: LIST
5131: LIST
5132: LIST
5133: PPUSH
5134: CALL 29924 0 6
5138: ST_TO_ADDR
// if not base then
5139: LD_VAR 0 8
5143: NOT
5144: IFFALSE 5148
// exit ;
5146: GO 5402
// mc_bases := Replace ( mc_bases , mc_rus_1 , base ) ;
5148: LD_ADDR_EXP 36
5152: PUSH
5153: LD_EXP 36
5157: PPUSH
5158: LD_EXP 7
5162: PPUSH
5163: LD_VAR 0 8
5167: PPUSH
5168: CALL_OW 1
5172: ST_TO_ADDR
// base := PrepareBase ( depot [ 1 ] , rus1Base , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 12 , 6 , 6 , 4 ] ) ;
5173: LD_ADDR_VAR 0 8
5177: PUSH
5178: LD_VAR 0 7
5182: PUSH
5183: LD_INT 1
5185: ARRAY
5186: PPUSH
5187: LD_INT 11
5189: PPUSH
5190: LD_INT 0
5192: PPUSH
5193: LD_INT 6
5195: PUSH
5196: LD_INT 7
5198: PUSH
5199: LD_INT 8
5201: PUSH
5202: EMPTY
5203: LIST
5204: LIST
5205: LIST
5206: PUSH
5207: LD_OWVAR 67
5211: ARRAY
5212: PPUSH
5213: LD_INT 3000
5215: PUSH
5216: LD_INT 300
5218: PUSH
5219: LD_INT 100
5221: PUSH
5222: EMPTY
5223: LIST
5224: LIST
5225: LIST
5226: PPUSH
5227: LD_INT 12
5229: PUSH
5230: LD_INT 6
5232: PUSH
5233: LD_INT 6
5235: PUSH
5236: LD_INT 4
5238: PUSH
5239: EMPTY
5240: LIST
5241: LIST
5242: LIST
5243: LIST
5244: PPUSH
5245: CALL 29924 0 6
5249: ST_TO_ADDR
// if not base then
5250: LD_VAR 0 8
5254: NOT
5255: IFFALSE 5259
// exit ;
5257: GO 5402
// mc_bases := Replace ( mc_bases , mc_rus_2 , base ) ;
5259: LD_ADDR_EXP 36
5263: PUSH
5264: LD_EXP 36
5268: PPUSH
5269: LD_EXP 8
5273: PPUSH
5274: LD_VAR 0 8
5278: PPUSH
5279: CALL_OW 1
5283: ST_TO_ADDR
// ruOutpost := PrepareBase ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_depot ] ] ) [ 1 ] , ruOutpostArea , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 500 , 100 , 10 ] , [ [ 6 , 7 , 8 ] [ Difficulty ] , 2 , 0 , 1 ] ) ;
5284: LD_ADDR_EXP 14
5288: PUSH
5289: LD_INT 22
5291: PUSH
5292: LD_INT 3
5294: PUSH
5295: EMPTY
5296: LIST
5297: LIST
5298: PUSH
5299: LD_INT 30
5301: PUSH
5302: LD_INT 0
5304: PUSH
5305: EMPTY
5306: LIST
5307: LIST
5308: PUSH
5309: EMPTY
5310: LIST
5311: LIST
5312: PPUSH
5313: CALL_OW 69
5317: PUSH
5318: LD_INT 1
5320: ARRAY
5321: PPUSH
5322: LD_INT 25
5324: PPUSH
5325: LD_INT 0
5327: PPUSH
5328: LD_INT 6
5330: PUSH
5331: LD_INT 7
5333: PUSH
5334: LD_INT 8
5336: PUSH
5337: EMPTY
5338: LIST
5339: LIST
5340: LIST
5341: PUSH
5342: LD_OWVAR 67
5346: ARRAY
5347: PPUSH
5348: LD_INT 500
5350: PUSH
5351: LD_INT 100
5353: PUSH
5354: LD_INT 10
5356: PUSH
5357: EMPTY
5358: LIST
5359: LIST
5360: LIST
5361: PPUSH
5362: LD_INT 6
5364: PUSH
5365: LD_INT 7
5367: PUSH
5368: LD_INT 8
5370: PUSH
5371: EMPTY
5372: LIST
5373: LIST
5374: LIST
5375: PUSH
5376: LD_OWVAR 67
5380: ARRAY
5381: PUSH
5382: LD_INT 2
5384: PUSH
5385: LD_INT 0
5387: PUSH
5388: LD_INT 1
5390: PUSH
5391: EMPTY
5392: LIST
5393: LIST
5394: LIST
5395: LIST
5396: PPUSH
5397: CALL 29924 0 6
5401: ST_TO_ADDR
// end ;
5402: LD_VAR 0 1
5406: RET
// export function PrepareLegion ; var i , b , veh , tmp , cameras , side , sr , depot , base ; begin
5407: LD_INT 0
5409: PPUSH
5410: PPUSH
5411: PPUSH
5412: PPUSH
5413: PPUSH
5414: PPUSH
5415: PPUSH
5416: PPUSH
5417: PPUSH
5418: PPUSH
// PrepareNature ( 0 , 0 , 6 , 0 , 0 , 0 , 0 , legApe , 0 ) ;
5419: LD_INT 0
5421: PPUSH
5422: LD_INT 0
5424: PPUSH
5425: LD_INT 6
5427: PPUSH
5428: LD_INT 0
5430: PPUSH
5431: LD_INT 0
5433: PPUSH
5434: LD_INT 0
5436: PPUSH
5437: LD_INT 0
5439: PPUSH
5440: LD_INT 8
5442: PPUSH
5443: LD_INT 0
5445: PPUSH
5446: CALL 54305 0 9
// side := 8 ;
5450: LD_ADDR_VAR 0 7
5454: PUSH
5455: LD_INT 8
5457: ST_TO_ADDR
// tmp := AreaToList ( minesArea , 0 ) ;
5458: LD_ADDR_VAR 0 5
5462: PUSH
5463: LD_INT 20
5465: PPUSH
5466: LD_INT 0
5468: PPUSH
5469: CALL_OW 517
5473: ST_TO_ADDR
// if tmp then
5474: LD_VAR 0 5
5478: IFFALSE 5606
// begin for i = 1 to tmp [ 1 ] do
5480: LD_ADDR_VAR 0 2
5484: PUSH
5485: DOUBLE
5486: LD_INT 1
5488: DEC
5489: ST_TO_ADDR
5490: LD_VAR 0 5
5494: PUSH
5495: LD_INT 1
5497: ARRAY
5498: PUSH
5499: FOR_TO
5500: IFFALSE 5604
// begin PlaceMine ( tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] , side , 0 ) ;
5502: LD_VAR 0 5
5506: PUSH
5507: LD_INT 1
5509: ARRAY
5510: PUSH
5511: LD_VAR 0 2
5515: ARRAY
5516: PPUSH
5517: LD_VAR 0 5
5521: PUSH
5522: LD_INT 2
5524: ARRAY
5525: PUSH
5526: LD_VAR 0 2
5530: ARRAY
5531: PPUSH
5532: LD_VAR 0 7
5536: PPUSH
5537: LD_INT 0
5539: PPUSH
5540: CALL_OW 454
// staticMines := Insert ( staticMines , staticMines + 1 , [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ) ;
5544: LD_ADDR_EXP 16
5548: PUSH
5549: LD_EXP 16
5553: PPUSH
5554: LD_EXP 16
5558: PUSH
5559: LD_INT 1
5561: PLUS
5562: PPUSH
5563: LD_VAR 0 5
5567: PUSH
5568: LD_INT 1
5570: ARRAY
5571: PUSH
5572: LD_VAR 0 2
5576: ARRAY
5577: PUSH
5578: LD_VAR 0 5
5582: PUSH
5583: LD_INT 2
5585: ARRAY
5586: PUSH
5587: LD_VAR 0 2
5591: ARRAY
5592: PUSH
5593: EMPTY
5594: LIST
5595: LIST
5596: PPUSH
5597: CALL_OW 2
5601: ST_TO_ADDR
// end ;
5602: GO 5499
5604: POP
5605: POP
// end ; cameras := [ [ 165 , 156 ] , [ 143 , 145 ] , [ 152 , 165 ] , [ 123 , 153 ] , [ 161 , 215 ] , [ 172 , 100 ] , [ 148 , 83 ] , [ 122 , 68 ] , [ 105 , 74 ] , [ 113 , 97 ] ] ;
5606: LD_ADDR_VAR 0 6
5610: PUSH
5611: LD_INT 165
5613: PUSH
5614: LD_INT 156
5616: PUSH
5617: EMPTY
5618: LIST
5619: LIST
5620: PUSH
5621: LD_INT 143
5623: PUSH
5624: LD_INT 145
5626: PUSH
5627: EMPTY
5628: LIST
5629: LIST
5630: PUSH
5631: LD_INT 152
5633: PUSH
5634: LD_INT 165
5636: PUSH
5637: EMPTY
5638: LIST
5639: LIST
5640: PUSH
5641: LD_INT 123
5643: PUSH
5644: LD_INT 153
5646: PUSH
5647: EMPTY
5648: LIST
5649: LIST
5650: PUSH
5651: LD_INT 161
5653: PUSH
5654: LD_INT 215
5656: PUSH
5657: EMPTY
5658: LIST
5659: LIST
5660: PUSH
5661: LD_INT 172
5663: PUSH
5664: LD_INT 100
5666: PUSH
5667: EMPTY
5668: LIST
5669: LIST
5670: PUSH
5671: LD_INT 148
5673: PUSH
5674: LD_INT 83
5676: PUSH
5677: EMPTY
5678: LIST
5679: LIST
5680: PUSH
5681: LD_INT 122
5683: PUSH
5684: LD_INT 68
5686: PUSH
5687: EMPTY
5688: LIST
5689: LIST
5690: PUSH
5691: LD_INT 105
5693: PUSH
5694: LD_INT 74
5696: PUSH
5697: EMPTY
5698: LIST
5699: LIST
5700: PUSH
5701: LD_INT 113
5703: PUSH
5704: LD_INT 97
5706: PUSH
5707: EMPTY
5708: LIST
5709: LIST
5710: PUSH
5711: EMPTY
5712: LIST
5713: LIST
5714: LIST
5715: LIST
5716: LIST
5717: LIST
5718: LIST
5719: LIST
5720: LIST
5721: LIST
5722: ST_TO_ADDR
// for i in cameras do
5723: LD_ADDR_VAR 0 2
5727: PUSH
5728: LD_VAR 0 6
5732: PUSH
5733: FOR_IN
5734: IFFALSE 5765
// HiddenCamera ( i [ 1 ] , i [ 2 ] , side ) ;
5736: LD_VAR 0 2
5740: PUSH
5741: LD_INT 1
5743: ARRAY
5744: PPUSH
5745: LD_VAR 0 2
5749: PUSH
5750: LD_INT 2
5752: ARRAY
5753: PPUSH
5754: LD_VAR 0 7
5758: PPUSH
5759: CALL_OW 244
5763: GO 5733
5765: POP
5766: POP
// tmp := [ [ 1 , 144 , 110 , 1 , 0 , 0 ] , [ 3 , 151 , 118 , 0 , 0 , 0 ] , [ 8 , 158 , 110 , 4 , 10 , 15 ] , [ 23 , 154 , 121 , 5 , 0 , 0 ] , [ 20 , 155 , 118 , 4 , 0 , 0 ] , [ 21 , 151 , 122 , 0 , 0 , 0 ] , [ 18 , 148 , 118 , 1 , 0 , 0 ] , [ 17 , 147 , 114 , 2 , 0 , 0 ] , [ 29 , 163 , 120 , 5 , 0 , 0 ] , [ 27 , 137 , 116 , 3 , 0 , 0 ] , [ 27 , 133 , 111 , 1 , 0 , 0 ] , [ 27 , 132 , 106 , 4 , 0 , 0 ] , [ 26 , 137 , 111 , 0 , 0 , 0 ] , [ 8 , 141 , 117 , 1 , 13 , 11 ] , [ 30 , 140 , 128 , 1 , 0 , 0 ] , [ 5 , 146 , 96 , 3 , 0 , 0 ] , [ 32 , 150 , 98 , 3 , 0 , 0 ] , [ 32 , 142 , 95 , 3 , 0 , 0 ] , [ 32 , 159 , 104 , 3 , 0 , 0 ] , [ 32 , 133 , 95 , 3 , 0 , 0 ] , [ 32 , 131 , 102 , 2 , 0 , 0 ] , [ 32 , 162 , 134 , 0 , 0 , 0 ] , [ 32 , 149 , 132 , 0 , 0 , 0 ] , [ 26 , 143 , 122 , 4 , 0 , 0 ] , [ 26 , 164 , 116 , 2 , 0 , 0 ] , ] ;
5767: LD_ADDR_VAR 0 5
5771: PUSH
5772: LD_INT 1
5774: PUSH
5775: LD_INT 144
5777: PUSH
5778: LD_INT 110
5780: PUSH
5781: LD_INT 1
5783: PUSH
5784: LD_INT 0
5786: PUSH
5787: LD_INT 0
5789: PUSH
5790: EMPTY
5791: LIST
5792: LIST
5793: LIST
5794: LIST
5795: LIST
5796: LIST
5797: PUSH
5798: LD_INT 3
5800: PUSH
5801: LD_INT 151
5803: PUSH
5804: LD_INT 118
5806: PUSH
5807: LD_INT 0
5809: PUSH
5810: LD_INT 0
5812: PUSH
5813: LD_INT 0
5815: PUSH
5816: EMPTY
5817: LIST
5818: LIST
5819: LIST
5820: LIST
5821: LIST
5822: LIST
5823: PUSH
5824: LD_INT 8
5826: PUSH
5827: LD_INT 158
5829: PUSH
5830: LD_INT 110
5832: PUSH
5833: LD_INT 4
5835: PUSH
5836: LD_INT 10
5838: PUSH
5839: LD_INT 15
5841: PUSH
5842: EMPTY
5843: LIST
5844: LIST
5845: LIST
5846: LIST
5847: LIST
5848: LIST
5849: PUSH
5850: LD_INT 23
5852: PUSH
5853: LD_INT 154
5855: PUSH
5856: LD_INT 121
5858: PUSH
5859: LD_INT 5
5861: PUSH
5862: LD_INT 0
5864: PUSH
5865: LD_INT 0
5867: PUSH
5868: EMPTY
5869: LIST
5870: LIST
5871: LIST
5872: LIST
5873: LIST
5874: LIST
5875: PUSH
5876: LD_INT 20
5878: PUSH
5879: LD_INT 155
5881: PUSH
5882: LD_INT 118
5884: PUSH
5885: LD_INT 4
5887: PUSH
5888: LD_INT 0
5890: PUSH
5891: LD_INT 0
5893: PUSH
5894: EMPTY
5895: LIST
5896: LIST
5897: LIST
5898: LIST
5899: LIST
5900: LIST
5901: PUSH
5902: LD_INT 21
5904: PUSH
5905: LD_INT 151
5907: PUSH
5908: LD_INT 122
5910: PUSH
5911: LD_INT 0
5913: PUSH
5914: LD_INT 0
5916: PUSH
5917: LD_INT 0
5919: PUSH
5920: EMPTY
5921: LIST
5922: LIST
5923: LIST
5924: LIST
5925: LIST
5926: LIST
5927: PUSH
5928: LD_INT 18
5930: PUSH
5931: LD_INT 148
5933: PUSH
5934: LD_INT 118
5936: PUSH
5937: LD_INT 1
5939: PUSH
5940: LD_INT 0
5942: PUSH
5943: LD_INT 0
5945: PUSH
5946: EMPTY
5947: LIST
5948: LIST
5949: LIST
5950: LIST
5951: LIST
5952: LIST
5953: PUSH
5954: LD_INT 17
5956: PUSH
5957: LD_INT 147
5959: PUSH
5960: LD_INT 114
5962: PUSH
5963: LD_INT 2
5965: PUSH
5966: LD_INT 0
5968: PUSH
5969: LD_INT 0
5971: PUSH
5972: EMPTY
5973: LIST
5974: LIST
5975: LIST
5976: LIST
5977: LIST
5978: LIST
5979: PUSH
5980: LD_INT 29
5982: PUSH
5983: LD_INT 163
5985: PUSH
5986: LD_INT 120
5988: PUSH
5989: LD_INT 5
5991: PUSH
5992: LD_INT 0
5994: PUSH
5995: LD_INT 0
5997: PUSH
5998: EMPTY
5999: LIST
6000: LIST
6001: LIST
6002: LIST
6003: LIST
6004: LIST
6005: PUSH
6006: LD_INT 27
6008: PUSH
6009: LD_INT 137
6011: PUSH
6012: LD_INT 116
6014: PUSH
6015: LD_INT 3
6017: PUSH
6018: LD_INT 0
6020: PUSH
6021: LD_INT 0
6023: PUSH
6024: EMPTY
6025: LIST
6026: LIST
6027: LIST
6028: LIST
6029: LIST
6030: LIST
6031: PUSH
6032: LD_INT 27
6034: PUSH
6035: LD_INT 133
6037: PUSH
6038: LD_INT 111
6040: PUSH
6041: LD_INT 1
6043: PUSH
6044: LD_INT 0
6046: PUSH
6047: LD_INT 0
6049: PUSH
6050: EMPTY
6051: LIST
6052: LIST
6053: LIST
6054: LIST
6055: LIST
6056: LIST
6057: PUSH
6058: LD_INT 27
6060: PUSH
6061: LD_INT 132
6063: PUSH
6064: LD_INT 106
6066: PUSH
6067: LD_INT 4
6069: PUSH
6070: LD_INT 0
6072: PUSH
6073: LD_INT 0
6075: PUSH
6076: EMPTY
6077: LIST
6078: LIST
6079: LIST
6080: LIST
6081: LIST
6082: LIST
6083: PUSH
6084: LD_INT 26
6086: PUSH
6087: LD_INT 137
6089: PUSH
6090: LD_INT 111
6092: PUSH
6093: LD_INT 0
6095: PUSH
6096: LD_INT 0
6098: PUSH
6099: LD_INT 0
6101: PUSH
6102: EMPTY
6103: LIST
6104: LIST
6105: LIST
6106: LIST
6107: LIST
6108: LIST
6109: PUSH
6110: LD_INT 8
6112: PUSH
6113: LD_INT 141
6115: PUSH
6116: LD_INT 117
6118: PUSH
6119: LD_INT 1
6121: PUSH
6122: LD_INT 13
6124: PUSH
6125: LD_INT 11
6127: PUSH
6128: EMPTY
6129: LIST
6130: LIST
6131: LIST
6132: LIST
6133: LIST
6134: LIST
6135: PUSH
6136: LD_INT 30
6138: PUSH
6139: LD_INT 140
6141: PUSH
6142: LD_INT 128
6144: PUSH
6145: LD_INT 1
6147: PUSH
6148: LD_INT 0
6150: PUSH
6151: LD_INT 0
6153: PUSH
6154: EMPTY
6155: LIST
6156: LIST
6157: LIST
6158: LIST
6159: LIST
6160: LIST
6161: PUSH
6162: LD_INT 5
6164: PUSH
6165: LD_INT 146
6167: PUSH
6168: LD_INT 96
6170: PUSH
6171: LD_INT 3
6173: PUSH
6174: LD_INT 0
6176: PUSH
6177: LD_INT 0
6179: PUSH
6180: EMPTY
6181: LIST
6182: LIST
6183: LIST
6184: LIST
6185: LIST
6186: LIST
6187: PUSH
6188: LD_INT 32
6190: PUSH
6191: LD_INT 150
6193: PUSH
6194: LD_INT 98
6196: PUSH
6197: LD_INT 3
6199: PUSH
6200: LD_INT 0
6202: PUSH
6203: LD_INT 0
6205: PUSH
6206: EMPTY
6207: LIST
6208: LIST
6209: LIST
6210: LIST
6211: LIST
6212: LIST
6213: PUSH
6214: LD_INT 32
6216: PUSH
6217: LD_INT 142
6219: PUSH
6220: LD_INT 95
6222: PUSH
6223: LD_INT 3
6225: PUSH
6226: LD_INT 0
6228: PUSH
6229: LD_INT 0
6231: PUSH
6232: EMPTY
6233: LIST
6234: LIST
6235: LIST
6236: LIST
6237: LIST
6238: LIST
6239: PUSH
6240: LD_INT 32
6242: PUSH
6243: LD_INT 159
6245: PUSH
6246: LD_INT 104
6248: PUSH
6249: LD_INT 3
6251: PUSH
6252: LD_INT 0
6254: PUSH
6255: LD_INT 0
6257: PUSH
6258: EMPTY
6259: LIST
6260: LIST
6261: LIST
6262: LIST
6263: LIST
6264: LIST
6265: PUSH
6266: LD_INT 32
6268: PUSH
6269: LD_INT 133
6271: PUSH
6272: LD_INT 95
6274: PUSH
6275: LD_INT 3
6277: PUSH
6278: LD_INT 0
6280: PUSH
6281: LD_INT 0
6283: PUSH
6284: EMPTY
6285: LIST
6286: LIST
6287: LIST
6288: LIST
6289: LIST
6290: LIST
6291: PUSH
6292: LD_INT 32
6294: PUSH
6295: LD_INT 131
6297: PUSH
6298: LD_INT 102
6300: PUSH
6301: LD_INT 2
6303: PUSH
6304: LD_INT 0
6306: PUSH
6307: LD_INT 0
6309: PUSH
6310: EMPTY
6311: LIST
6312: LIST
6313: LIST
6314: LIST
6315: LIST
6316: LIST
6317: PUSH
6318: LD_INT 32
6320: PUSH
6321: LD_INT 162
6323: PUSH
6324: LD_INT 134
6326: PUSH
6327: LD_INT 0
6329: PUSH
6330: LD_INT 0
6332: PUSH
6333: LD_INT 0
6335: PUSH
6336: EMPTY
6337: LIST
6338: LIST
6339: LIST
6340: LIST
6341: LIST
6342: LIST
6343: PUSH
6344: LD_INT 32
6346: PUSH
6347: LD_INT 149
6349: PUSH
6350: LD_INT 132
6352: PUSH
6353: LD_INT 0
6355: PUSH
6356: LD_INT 0
6358: PUSH
6359: LD_INT 0
6361: PUSH
6362: EMPTY
6363: LIST
6364: LIST
6365: LIST
6366: LIST
6367: LIST
6368: LIST
6369: PUSH
6370: LD_INT 26
6372: PUSH
6373: LD_INT 143
6375: PUSH
6376: LD_INT 122
6378: PUSH
6379: LD_INT 4
6381: PUSH
6382: LD_INT 0
6384: PUSH
6385: LD_INT 0
6387: PUSH
6388: EMPTY
6389: LIST
6390: LIST
6391: LIST
6392: LIST
6393: LIST
6394: LIST
6395: PUSH
6396: LD_INT 26
6398: PUSH
6399: LD_INT 164
6401: PUSH
6402: LD_INT 116
6404: PUSH
6405: LD_INT 2
6407: PUSH
6408: LD_INT 0
6410: PUSH
6411: LD_INT 0
6413: PUSH
6414: EMPTY
6415: LIST
6416: LIST
6417: LIST
6418: LIST
6419: LIST
6420: LIST
6421: PUSH
6422: EMPTY
6423: LIST
6424: LIST
6425: LIST
6426: LIST
6427: LIST
6428: LIST
6429: LIST
6430: LIST
6431: LIST
6432: LIST
6433: LIST
6434: LIST
6435: LIST
6436: LIST
6437: LIST
6438: LIST
6439: LIST
6440: LIST
6441: LIST
6442: LIST
6443: LIST
6444: LIST
6445: LIST
6446: LIST
6447: LIST
6448: ST_TO_ADDR
// for i in tmp do
6449: LD_ADDR_VAR 0 2
6453: PUSH
6454: LD_VAR 0 5
6458: PUSH
6459: FOR_IN
6460: IFFALSE 6691
// begin uc_side := side ;
6462: LD_ADDR_OWVAR 20
6466: PUSH
6467: LD_VAR 0 7
6471: ST_TO_ADDR
// uc_nation := nation_arabian ;
6472: LD_ADDR_OWVAR 21
6476: PUSH
6477: LD_INT 2
6479: ST_TO_ADDR
// bc_type := i [ 1 ] ;
6480: LD_ADDR_OWVAR 42
6484: PUSH
6485: LD_VAR 0 2
6489: PUSH
6490: LD_INT 1
6492: ARRAY
6493: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
6494: LD_ADDR_OWVAR 43
6498: PUSH
6499: LD_INT 5
6501: PPUSH
6502: LD_INT 6
6504: PPUSH
6505: CALL_OW 12
6509: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
6510: LD_ADDR_OWVAR 44
6514: PUSH
6515: LD_VAR 0 2
6519: PUSH
6520: LD_INT 5
6522: ARRAY
6523: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
6524: LD_ADDR_OWVAR 45
6528: PUSH
6529: LD_VAR 0 2
6533: PUSH
6534: LD_INT 6
6536: ARRAY
6537: ST_TO_ADDR
// sr := 0 ;
6538: LD_ADDR_VAR 0 8
6542: PUSH
6543: LD_INT 0
6545: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
6546: LD_VAR 0 2
6550: PUSH
6551: LD_INT 1
6553: ARRAY
6554: PUSH
6555: LD_INT 29
6557: EQUAL
6558: IFFALSE 6570
// sr := mat_oil else
6560: LD_ADDR_VAR 0 8
6564: PUSH
6565: LD_INT 2
6567: ST_TO_ADDR
6568: GO 6592
// if i [ 1 ] = b_siberite_mine then
6570: LD_VAR 0 2
6574: PUSH
6575: LD_INT 1
6577: ARRAY
6578: PUSH
6579: LD_INT 30
6581: EQUAL
6582: IFFALSE 6592
// sr := mat_siberit ;
6584: LD_ADDR_VAR 0 8
6588: PUSH
6589: LD_INT 3
6591: ST_TO_ADDR
// if sr then
6592: LD_VAR 0 8
6596: IFFALSE 6652
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
6598: LD_VAR 0 2
6602: PUSH
6603: LD_INT 2
6605: ARRAY
6606: PPUSH
6607: LD_VAR 0 2
6611: PUSH
6612: LD_INT 3
6614: ARRAY
6615: PPUSH
6616: LD_VAR 0 8
6620: PPUSH
6621: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
6625: LD_VAR 0 2
6629: PUSH
6630: LD_INT 2
6632: ARRAY
6633: PPUSH
6634: LD_VAR 0 2
6638: PUSH
6639: LD_INT 3
6641: ARRAY
6642: PPUSH
6643: LD_VAR 0 7
6647: PPUSH
6648: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
6652: LD_ADDR_VAR 0 3
6656: PUSH
6657: LD_VAR 0 2
6661: PUSH
6662: LD_INT 2
6664: ARRAY
6665: PPUSH
6666: LD_VAR 0 2
6670: PUSH
6671: LD_INT 3
6673: ARRAY
6674: PPUSH
6675: LD_VAR 0 2
6679: PUSH
6680: LD_INT 4
6682: ARRAY
6683: PPUSH
6684: CALL_OW 47
6688: ST_TO_ADDR
// end ;
6689: GO 6459
6691: POP
6692: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
6693: LD_ADDR_VAR 0 9
6697: PUSH
6698: LD_INT 22
6700: PUSH
6701: LD_VAR 0 7
6705: PUSH
6706: EMPTY
6707: LIST
6708: LIST
6709: PUSH
6710: LD_INT 30
6712: PUSH
6713: LD_INT 1
6715: PUSH
6716: EMPTY
6717: LIST
6718: LIST
6719: PUSH
6720: EMPTY
6721: LIST
6722: LIST
6723: PPUSH
6724: CALL_OW 69
6728: ST_TO_ADDR
// if not depot then
6729: LD_VAR 0 9
6733: NOT
6734: IFFALSE 6738
// exit ;
6736: GO 6984
// base := PrepareBase ( depot [ 1 ] , legBase , 0 , [ 6 , 7 , 8 ] [ Difficulty ] , [ 3000 , 300 , 100 ] , [ 12 , 6 , 6 , 5 ] ) ;
6738: LD_ADDR_VAR 0 10
6742: PUSH
6743: LD_VAR 0 9
6747: PUSH
6748: LD_INT 1
6750: ARRAY
6751: PPUSH
6752: LD_INT 6
6754: PPUSH
6755: LD_INT 0
6757: PPUSH
6758: LD_INT 6
6760: PUSH
6761: LD_INT 7
6763: PUSH
6764: LD_INT 8
6766: PUSH
6767: EMPTY
6768: LIST
6769: LIST
6770: LIST
6771: PUSH
6772: LD_OWVAR 67
6776: ARRAY
6777: PPUSH
6778: LD_INT 3000
6780: PUSH
6781: LD_INT 300
6783: PUSH
6784: LD_INT 100
6786: PUSH
6787: EMPTY
6788: LIST
6789: LIST
6790: LIST
6791: PPUSH
6792: LD_INT 12
6794: PUSH
6795: LD_INT 6
6797: PUSH
6798: LD_INT 6
6800: PUSH
6801: LD_INT 5
6803: PUSH
6804: EMPTY
6805: LIST
6806: LIST
6807: LIST
6808: LIST
6809: PPUSH
6810: CALL 29924 0 6
6814: ST_TO_ADDR
// if not base then
6815: LD_VAR 0 10
6819: NOT
6820: IFFALSE 6824
// exit ;
6822: GO 6984
// if Difficulty > 1 then
6824: LD_OWVAR 67
6828: PUSH
6829: LD_INT 1
6831: GREATER
6832: IFFALSE 6905
// begin InitHc ;
6834: CALL_OW 19
// PrepareHuman ( sex_male , class_sniper , [ 5 , 8 ] [ Difficulty - 1 ] ) ;
6838: LD_INT 1
6840: PPUSH
6841: LD_INT 5
6843: PPUSH
6844: LD_INT 5
6846: PUSH
6847: LD_INT 8
6849: PUSH
6850: EMPTY
6851: LIST
6852: LIST
6853: PUSH
6854: LD_OWVAR 67
6858: PUSH
6859: LD_INT 1
6861: MINUS
6862: ARRAY
6863: PPUSH
6864: CALL_OW 380
// for i = 1 to Difficulty do
6868: LD_ADDR_VAR 0 2
6872: PUSH
6873: DOUBLE
6874: LD_INT 1
6876: DEC
6877: ST_TO_ADDR
6878: LD_OWVAR 67
6882: PUSH
6883: FOR_TO
6884: IFFALSE 6903
// PlaceUnitArea ( CreateHuman , sniperGuardArea , false ) ;
6886: CALL_OW 44
6890: PPUSH
6891: LD_INT 24
6893: PPUSH
6894: LD_INT 0
6896: PPUSH
6897: CALL_OW 49
6901: GO 6883
6903: POP
6904: POP
// end ; mc_bases := Replace ( mc_bases , mc_leg , base ) ;
6905: LD_ADDR_EXP 36
6909: PUSH
6910: LD_EXP 36
6914: PPUSH
6915: LD_EXP 6
6919: PPUSH
6920: LD_VAR 0 10
6924: PPUSH
6925: CALL_OW 1
6929: ST_TO_ADDR
// hc_gallery := ru ;
6930: LD_ADDR_OWVAR 33
6934: PUSH
6935: LD_STRING ru
6937: ST_TO_ADDR
// hc_face_number := 44 ;
6938: LD_ADDR_OWVAR 34
6942: PUSH
6943: LD_INT 44
6945: ST_TO_ADDR
// hc_name := Robert Farmer ;
6946: LD_ADDR_OWVAR 26
6950: PUSH
6951: LD_STRING Robert Farmer
6953: ST_TO_ADDR
// hc_sex := sex_male ;
6954: LD_ADDR_OWVAR 27
6958: PUSH
6959: LD_INT 1
6961: ST_TO_ADDR
// hc_class := 1 ;
6962: LD_ADDR_OWVAR 28
6966: PUSH
6967: LD_INT 1
6969: ST_TO_ADDR
// Farmer := CreateHuman ;
6970: LD_ADDR_EXP 13
6974: PUSH
6975: CALL_OW 44
6979: ST_TO_ADDR
// InitHc ;
6980: CALL_OW 19
// end ;
6984: LD_VAR 0 1
6988: RET
// export function PrepareAmericans ; var i , b , tmp , side , sr , base , depot ; begin
6989: LD_INT 0
6991: PPUSH
6992: PPUSH
6993: PPUSH
6994: PPUSH
6995: PPUSH
6996: PPUSH
6997: PPUSH
6998: PPUSH
// PrepareNature ( 0 , 0 , 4 , 0 , 0 , 0 , 0 , amerApe , 0 ) ;
6999: LD_INT 0
7001: PPUSH
7002: LD_INT 0
7004: PPUSH
7005: LD_INT 4
7007: PPUSH
7008: LD_INT 0
7010: PPUSH
7011: LD_INT 0
7013: PPUSH
7014: LD_INT 0
7016: PPUSH
7017: LD_INT 0
7019: PPUSH
7020: LD_INT 10
7022: PPUSH
7023: LD_INT 0
7025: PPUSH
7026: CALL 54305 0 9
// side := 4 ;
7030: LD_ADDR_VAR 0 5
7034: PUSH
7035: LD_INT 4
7037: ST_TO_ADDR
// SetTech ( tech_gun , side , state_researched ) ;
7038: LD_INT 39
7040: PPUSH
7041: LD_VAR 0 5
7045: PPUSH
7046: LD_INT 2
7048: PPUSH
7049: CALL_OW 322
// SetTech ( tech_advMet , side , state_researched ) ;
7053: LD_INT 34
7055: PPUSH
7056: LD_VAR 0 5
7060: PPUSH
7061: LD_INT 2
7063: PPUSH
7064: CALL_OW 322
// tmp := [ [ 1 , 144 , 18 , 4 , 0 , 0 ] , [ 3 , 137 , 8 , 4 , 0 , 0 ] , [ 20 , 141 , 8 , 4 , 0 , 0 ] , [ 19 , 137 , 5 , 3 , 0 , 0 ] , [ 18 , 137 , 12 , 0 , 0 , 0 ] , [ 17 , 133 , 4 , 2 , 0 , 0 ] , [ 16 , 140 , 11 , 5 , 0 , 0 ] , [ 8 , 149 , 26 , 4 , 10 , 15 ] , [ 8 , 142 , 26 , 1 , 11 , 12 ] , [ 27 , 153 , 32 , 5 , 0 , 0 ] , [ 27 , 145 , 32 , 3 , 0 , 0 ] , [ 27 , 138 , 2 , 4 , 0 , 0 ] , [ 27 , 144 , 13 , 0 , 0 , 0 ] , [ 26 , 124 , 2 , 4 , 0 , 0 ] , [ 26 , 121 , 2 , 2 , 0 , 0 ] , [ 26 , 118 , 2 , 1 , 0 , 0 ] , [ 29 , 159 , 47 , 2 , 0 , 0 ] , [ 32 , 146 , 41 , 0 , 0 , 0 ] , [ 33 , 136 , 37 , 0 , 0 , 0 ] , [ 33 , 132 , 34 , 0 , 0 , 0 ] , [ 36 , 124 , 7 , 1 , 0 , 0 ] , [ 5 , 124 , 19 , 0 , 0 , 0 ] , [ 32 , 127 , 23 , 0 , 0 , 0 ] ] ;
7068: LD_ADDR_VAR 0 4
7072: PUSH
7073: LD_INT 1
7075: PUSH
7076: LD_INT 144
7078: PUSH
7079: LD_INT 18
7081: PUSH
7082: LD_INT 4
7084: PUSH
7085: LD_INT 0
7087: PUSH
7088: LD_INT 0
7090: PUSH
7091: EMPTY
7092: LIST
7093: LIST
7094: LIST
7095: LIST
7096: LIST
7097: LIST
7098: PUSH
7099: LD_INT 3
7101: PUSH
7102: LD_INT 137
7104: PUSH
7105: LD_INT 8
7107: PUSH
7108: LD_INT 4
7110: PUSH
7111: LD_INT 0
7113: PUSH
7114: LD_INT 0
7116: PUSH
7117: EMPTY
7118: LIST
7119: LIST
7120: LIST
7121: LIST
7122: LIST
7123: LIST
7124: PUSH
7125: LD_INT 20
7127: PUSH
7128: LD_INT 141
7130: PUSH
7131: LD_INT 8
7133: PUSH
7134: LD_INT 4
7136: PUSH
7137: LD_INT 0
7139: PUSH
7140: LD_INT 0
7142: PUSH
7143: EMPTY
7144: LIST
7145: LIST
7146: LIST
7147: LIST
7148: LIST
7149: LIST
7150: PUSH
7151: LD_INT 19
7153: PUSH
7154: LD_INT 137
7156: PUSH
7157: LD_INT 5
7159: PUSH
7160: LD_INT 3
7162: PUSH
7163: LD_INT 0
7165: PUSH
7166: LD_INT 0
7168: PUSH
7169: EMPTY
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: LIST
7176: PUSH
7177: LD_INT 18
7179: PUSH
7180: LD_INT 137
7182: PUSH
7183: LD_INT 12
7185: PUSH
7186: LD_INT 0
7188: PUSH
7189: LD_INT 0
7191: PUSH
7192: LD_INT 0
7194: PUSH
7195: EMPTY
7196: LIST
7197: LIST
7198: LIST
7199: LIST
7200: LIST
7201: LIST
7202: PUSH
7203: LD_INT 17
7205: PUSH
7206: LD_INT 133
7208: PUSH
7209: LD_INT 4
7211: PUSH
7212: LD_INT 2
7214: PUSH
7215: LD_INT 0
7217: PUSH
7218: LD_INT 0
7220: PUSH
7221: EMPTY
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: LIST
7227: LIST
7228: PUSH
7229: LD_INT 16
7231: PUSH
7232: LD_INT 140
7234: PUSH
7235: LD_INT 11
7237: PUSH
7238: LD_INT 5
7240: PUSH
7241: LD_INT 0
7243: PUSH
7244: LD_INT 0
7246: PUSH
7247: EMPTY
7248: LIST
7249: LIST
7250: LIST
7251: LIST
7252: LIST
7253: LIST
7254: PUSH
7255: LD_INT 8
7257: PUSH
7258: LD_INT 149
7260: PUSH
7261: LD_INT 26
7263: PUSH
7264: LD_INT 4
7266: PUSH
7267: LD_INT 10
7269: PUSH
7270: LD_INT 15
7272: PUSH
7273: EMPTY
7274: LIST
7275: LIST
7276: LIST
7277: LIST
7278: LIST
7279: LIST
7280: PUSH
7281: LD_INT 8
7283: PUSH
7284: LD_INT 142
7286: PUSH
7287: LD_INT 26
7289: PUSH
7290: LD_INT 1
7292: PUSH
7293: LD_INT 11
7295: PUSH
7296: LD_INT 12
7298: PUSH
7299: EMPTY
7300: LIST
7301: LIST
7302: LIST
7303: LIST
7304: LIST
7305: LIST
7306: PUSH
7307: LD_INT 27
7309: PUSH
7310: LD_INT 153
7312: PUSH
7313: LD_INT 32
7315: PUSH
7316: LD_INT 5
7318: PUSH
7319: LD_INT 0
7321: PUSH
7322: LD_INT 0
7324: PUSH
7325: EMPTY
7326: LIST
7327: LIST
7328: LIST
7329: LIST
7330: LIST
7331: LIST
7332: PUSH
7333: LD_INT 27
7335: PUSH
7336: LD_INT 145
7338: PUSH
7339: LD_INT 32
7341: PUSH
7342: LD_INT 3
7344: PUSH
7345: LD_INT 0
7347: PUSH
7348: LD_INT 0
7350: PUSH
7351: EMPTY
7352: LIST
7353: LIST
7354: LIST
7355: LIST
7356: LIST
7357: LIST
7358: PUSH
7359: LD_INT 27
7361: PUSH
7362: LD_INT 138
7364: PUSH
7365: LD_INT 2
7367: PUSH
7368: LD_INT 4
7370: PUSH
7371: LD_INT 0
7373: PUSH
7374: LD_INT 0
7376: PUSH
7377: EMPTY
7378: LIST
7379: LIST
7380: LIST
7381: LIST
7382: LIST
7383: LIST
7384: PUSH
7385: LD_INT 27
7387: PUSH
7388: LD_INT 144
7390: PUSH
7391: LD_INT 13
7393: PUSH
7394: LD_INT 0
7396: PUSH
7397: LD_INT 0
7399: PUSH
7400: LD_INT 0
7402: PUSH
7403: EMPTY
7404: LIST
7405: LIST
7406: LIST
7407: LIST
7408: LIST
7409: LIST
7410: PUSH
7411: LD_INT 26
7413: PUSH
7414: LD_INT 124
7416: PUSH
7417: LD_INT 2
7419: PUSH
7420: LD_INT 4
7422: PUSH
7423: LD_INT 0
7425: PUSH
7426: LD_INT 0
7428: PUSH
7429: EMPTY
7430: LIST
7431: LIST
7432: LIST
7433: LIST
7434: LIST
7435: LIST
7436: PUSH
7437: LD_INT 26
7439: PUSH
7440: LD_INT 121
7442: PUSH
7443: LD_INT 2
7445: PUSH
7446: LD_INT 2
7448: PUSH
7449: LD_INT 0
7451: PUSH
7452: LD_INT 0
7454: PUSH
7455: EMPTY
7456: LIST
7457: LIST
7458: LIST
7459: LIST
7460: LIST
7461: LIST
7462: PUSH
7463: LD_INT 26
7465: PUSH
7466: LD_INT 118
7468: PUSH
7469: LD_INT 2
7471: PUSH
7472: LD_INT 1
7474: PUSH
7475: LD_INT 0
7477: PUSH
7478: LD_INT 0
7480: PUSH
7481: EMPTY
7482: LIST
7483: LIST
7484: LIST
7485: LIST
7486: LIST
7487: LIST
7488: PUSH
7489: LD_INT 29
7491: PUSH
7492: LD_INT 159
7494: PUSH
7495: LD_INT 47
7497: PUSH
7498: LD_INT 2
7500: PUSH
7501: LD_INT 0
7503: PUSH
7504: LD_INT 0
7506: PUSH
7507: EMPTY
7508: LIST
7509: LIST
7510: LIST
7511: LIST
7512: LIST
7513: LIST
7514: PUSH
7515: LD_INT 32
7517: PUSH
7518: LD_INT 146
7520: PUSH
7521: LD_INT 41
7523: PUSH
7524: LD_INT 0
7526: PUSH
7527: LD_INT 0
7529: PUSH
7530: LD_INT 0
7532: PUSH
7533: EMPTY
7534: LIST
7535: LIST
7536: LIST
7537: LIST
7538: LIST
7539: LIST
7540: PUSH
7541: LD_INT 33
7543: PUSH
7544: LD_INT 136
7546: PUSH
7547: LD_INT 37
7549: PUSH
7550: LD_INT 0
7552: PUSH
7553: LD_INT 0
7555: PUSH
7556: LD_INT 0
7558: PUSH
7559: EMPTY
7560: LIST
7561: LIST
7562: LIST
7563: LIST
7564: LIST
7565: LIST
7566: PUSH
7567: LD_INT 33
7569: PUSH
7570: LD_INT 132
7572: PUSH
7573: LD_INT 34
7575: PUSH
7576: LD_INT 0
7578: PUSH
7579: LD_INT 0
7581: PUSH
7582: LD_INT 0
7584: PUSH
7585: EMPTY
7586: LIST
7587: LIST
7588: LIST
7589: LIST
7590: LIST
7591: LIST
7592: PUSH
7593: LD_INT 36
7595: PUSH
7596: LD_INT 124
7598: PUSH
7599: LD_INT 7
7601: PUSH
7602: LD_INT 1
7604: PUSH
7605: LD_INT 0
7607: PUSH
7608: LD_INT 0
7610: PUSH
7611: EMPTY
7612: LIST
7613: LIST
7614: LIST
7615: LIST
7616: LIST
7617: LIST
7618: PUSH
7619: LD_INT 5
7621: PUSH
7622: LD_INT 124
7624: PUSH
7625: LD_INT 19
7627: PUSH
7628: LD_INT 0
7630: PUSH
7631: LD_INT 0
7633: PUSH
7634: LD_INT 0
7636: PUSH
7637: EMPTY
7638: LIST
7639: LIST
7640: LIST
7641: LIST
7642: LIST
7643: LIST
7644: PUSH
7645: LD_INT 32
7647: PUSH
7648: LD_INT 127
7650: PUSH
7651: LD_INT 23
7653: PUSH
7654: LD_INT 0
7656: PUSH
7657: LD_INT 0
7659: PUSH
7660: LD_INT 0
7662: PUSH
7663: EMPTY
7664: LIST
7665: LIST
7666: LIST
7667: LIST
7668: LIST
7669: LIST
7670: PUSH
7671: EMPTY
7672: LIST
7673: LIST
7674: LIST
7675: LIST
7676: LIST
7677: LIST
7678: LIST
7679: LIST
7680: LIST
7681: LIST
7682: LIST
7683: LIST
7684: LIST
7685: LIST
7686: LIST
7687: LIST
7688: LIST
7689: LIST
7690: LIST
7691: LIST
7692: LIST
7693: LIST
7694: LIST
7695: ST_TO_ADDR
// for i in tmp do
7696: LD_ADDR_VAR 0 2
7700: PUSH
7701: LD_VAR 0 4
7705: PUSH
7706: FOR_IN
7707: IFFALSE 7938
// begin uc_side := side ;
7709: LD_ADDR_OWVAR 20
7713: PUSH
7714: LD_VAR 0 5
7718: ST_TO_ADDR
// uc_nation := nation_american ;
7719: LD_ADDR_OWVAR 21
7723: PUSH
7724: LD_INT 1
7726: ST_TO_ADDR
// bc_type := i [ 1 ] ;
7727: LD_ADDR_OWVAR 42
7731: PUSH
7732: LD_VAR 0 2
7736: PUSH
7737: LD_INT 1
7739: ARRAY
7740: ST_TO_ADDR
// bc_level := rand ( 5 , 6 ) ;
7741: LD_ADDR_OWVAR 43
7745: PUSH
7746: LD_INT 5
7748: PPUSH
7749: LD_INT 6
7751: PPUSH
7752: CALL_OW 12
7756: ST_TO_ADDR
// bc_kind1 := i [ 5 ] ;
7757: LD_ADDR_OWVAR 44
7761: PUSH
7762: LD_VAR 0 2
7766: PUSH
7767: LD_INT 5
7769: ARRAY
7770: ST_TO_ADDR
// bc_kind2 := i [ 6 ] ;
7771: LD_ADDR_OWVAR 45
7775: PUSH
7776: LD_VAR 0 2
7780: PUSH
7781: LD_INT 6
7783: ARRAY
7784: ST_TO_ADDR
// sr := 0 ;
7785: LD_ADDR_VAR 0 6
7789: PUSH
7790: LD_INT 0
7792: ST_TO_ADDR
// if i [ 1 ] = b_oil_mine then
7793: LD_VAR 0 2
7797: PUSH
7798: LD_INT 1
7800: ARRAY
7801: PUSH
7802: LD_INT 29
7804: EQUAL
7805: IFFALSE 7817
// sr := mat_oil else
7807: LD_ADDR_VAR 0 6
7811: PUSH
7812: LD_INT 2
7814: ST_TO_ADDR
7815: GO 7839
// if i [ 1 ] = b_siberite_mine then
7817: LD_VAR 0 2
7821: PUSH
7822: LD_INT 1
7824: ARRAY
7825: PUSH
7826: LD_INT 30
7828: EQUAL
7829: IFFALSE 7839
// sr := mat_siberit ;
7831: LD_ADDR_VAR 0 6
7835: PUSH
7836: LD_INT 3
7838: ST_TO_ADDR
// if sr then
7839: LD_VAR 0 6
7843: IFFALSE 7899
// begin CreateDepositXY ( i [ 2 ] , i [ 3 ] , sr ) ;
7845: LD_VAR 0 2
7849: PUSH
7850: LD_INT 2
7852: ARRAY
7853: PPUSH
7854: LD_VAR 0 2
7858: PUSH
7859: LD_INT 3
7861: ARRAY
7862: PPUSH
7863: LD_VAR 0 6
7867: PPUSH
7868: CALL_OW 62
// SetResourceVisibility ( i [ 2 ] , i [ 3 ] , side ) ;
7872: LD_VAR 0 2
7876: PUSH
7877: LD_INT 2
7879: ARRAY
7880: PPUSH
7881: LD_VAR 0 2
7885: PUSH
7886: LD_INT 3
7888: ARRAY
7889: PPUSH
7890: LD_VAR 0 5
7894: PPUSH
7895: CALL_OW 441
// end ; b := CreateAndPlaceBuildingXYD ( i [ 2 ] , i [ 3 ] , i [ 4 ] ) ;
7899: LD_ADDR_VAR 0 3
7903: PUSH
7904: LD_VAR 0 2
7908: PUSH
7909: LD_INT 2
7911: ARRAY
7912: PPUSH
7913: LD_VAR 0 2
7917: PUSH
7918: LD_INT 3
7920: ARRAY
7921: PPUSH
7922: LD_VAR 0 2
7926: PUSH
7927: LD_INT 4
7929: ARRAY
7930: PPUSH
7931: CALL_OW 47
7935: ST_TO_ADDR
// end ;
7936: GO 7706
7938: POP
7939: POP
// depot := FilterAllUnits ( [ [ f_side , side ] , [ f_btype , b_warehouse ] ] ) ;
7940: LD_ADDR_VAR 0 8
7944: PUSH
7945: LD_INT 22
7947: PUSH
7948: LD_VAR 0 5
7952: PUSH
7953: EMPTY
7954: LIST
7955: LIST
7956: PUSH
7957: LD_INT 30
7959: PUSH
7960: LD_INT 1
7962: PUSH
7963: EMPTY
7964: LIST
7965: LIST
7966: PUSH
7967: EMPTY
7968: LIST
7969: LIST
7970: PPUSH
7971: CALL_OW 69
7975: ST_TO_ADDR
// if not depot then
7976: LD_VAR 0 8
7980: NOT
7981: IFFALSE 7985
// exit ;
7983: GO 8257
// base := PrepareBase ( depot [ 1 ] , amerBase , theta3 , [ 8 , 7 , 6 ] [ Difficulty ] , [ [ 2500 , 2000 , 1750 ] [ Difficulty ] , [ 300 , 250 , 200 ] [ Difficulty ] , [ 50 , 50 , 40 ] [ Difficulty ] ] , [ 7 , 6 , 5 , 5 ] ) ;
7985: LD_ADDR_VAR 0 7
7989: PUSH
7990: LD_VAR 0 8
7994: PUSH
7995: LD_INT 1
7997: ARRAY
7998: PPUSH
7999: LD_INT 3
8001: PPUSH
8002: LD_STRING theta3
8004: PPUSH
8005: LD_INT 8
8007: PUSH
8008: LD_INT 7
8010: PUSH
8011: LD_INT 6
8013: PUSH
8014: EMPTY
8015: LIST
8016: LIST
8017: LIST
8018: PUSH
8019: LD_OWVAR 67
8023: ARRAY
8024: PPUSH
8025: LD_INT 2500
8027: PUSH
8028: LD_INT 2000
8030: PUSH
8031: LD_INT 1750
8033: PUSH
8034: EMPTY
8035: LIST
8036: LIST
8037: LIST
8038: PUSH
8039: LD_OWVAR 67
8043: ARRAY
8044: PUSH
8045: LD_INT 300
8047: PUSH
8048: LD_INT 250
8050: PUSH
8051: LD_INT 200
8053: PUSH
8054: EMPTY
8055: LIST
8056: LIST
8057: LIST
8058: PUSH
8059: LD_OWVAR 67
8063: ARRAY
8064: PUSH
8065: LD_INT 50
8067: PUSH
8068: LD_INT 50
8070: PUSH
8071: LD_INT 40
8073: PUSH
8074: EMPTY
8075: LIST
8076: LIST
8077: LIST
8078: PUSH
8079: LD_OWVAR 67
8083: ARRAY
8084: PUSH
8085: EMPTY
8086: LIST
8087: LIST
8088: LIST
8089: PPUSH
8090: LD_INT 7
8092: PUSH
8093: LD_INT 6
8095: PUSH
8096: LD_INT 5
8098: PUSH
8099: LD_INT 5
8101: PUSH
8102: EMPTY
8103: LIST
8104: LIST
8105: LIST
8106: LIST
8107: PPUSH
8108: CALL 29924 0 6
8112: ST_TO_ADDR
// if not base then
8113: LD_VAR 0 7
8117: NOT
8118: IFFALSE 8122
// exit ;
8120: GO 8257
// mc_bases := Replace ( mc_bases , mc_amer , base ) ;
8122: LD_ADDR_EXP 36
8126: PUSH
8127: LD_EXP 36
8131: PPUSH
8132: LD_EXP 5
8136: PPUSH
8137: LD_VAR 0 7
8141: PPUSH
8142: CALL_OW 1
8146: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
8147: LD_INT 1
8149: PPUSH
8150: LD_INT 1
8152: PPUSH
8153: LD_INT 7
8155: PPUSH
8156: CALL_OW 380
// allyCommander := CreateHuman ;
8160: LD_ADDR_EXP 11
8164: PUSH
8165: CALL_OW 44
8169: ST_TO_ADDR
// PlaceUnitXY ( allyCommander , 139 , 15 , false ) ;
8170: LD_EXP 11
8174: PPUSH
8175: LD_INT 139
8177: PPUSH
8178: LD_INT 15
8180: PPUSH
8181: LD_INT 0
8183: PPUSH
8184: CALL_OW 48
// ComTurnXY ( allyCommander , 137 , 15 ) ;
8188: LD_EXP 11
8192: PPUSH
8193: LD_INT 137
8195: PPUSH
8196: LD_INT 15
8198: PPUSH
8199: CALL_OW 118
// hc_gallery := us ;
8203: LD_ADDR_OWVAR 33
8207: PUSH
8208: LD_STRING us
8210: ST_TO_ADDR
// hc_face_number := 7 ;
8211: LD_ADDR_OWVAR 34
8215: PUSH
8216: LD_INT 7
8218: ST_TO_ADDR
// hc_name := Arthur Powell ;
8219: LD_ADDR_OWVAR 26
8223: PUSH
8224: LD_STRING Arthur Powell
8226: ST_TO_ADDR
// hc_sex := sex_male ;
8227: LD_ADDR_OWVAR 27
8231: PUSH
8232: LD_INT 1
8234: ST_TO_ADDR
// hc_class := 1 ;
8235: LD_ADDR_OWVAR 28
8239: PUSH
8240: LD_INT 1
8242: ST_TO_ADDR
// Powell := CreateHuman ;
8243: LD_ADDR_EXP 12
8247: PUSH
8248: CALL_OW 44
8252: ST_TO_ADDR
// InitHc ;
8253: CALL_OW 19
// end ;
8257: LD_VAR 0 1
8261: RET
// export function PreparePlayer ; var i , side , techs , tanks , cl , chassis , engines , weapons ; begin
8262: LD_INT 0
8264: PPUSH
8265: PPUSH
8266: PPUSH
8267: PPUSH
8268: PPUSH
8269: PPUSH
8270: PPUSH
8271: PPUSH
8272: PPUSH
// side := 1 ;
8273: LD_ADDR_VAR 0 3
8277: PUSH
8278: LD_INT 1
8280: ST_TO_ADDR
// result := [ [ ] , [ ] ] ;
8281: LD_ADDR_VAR 0 1
8285: PUSH
8286: EMPTY
8287: PUSH
8288: EMPTY
8289: PUSH
8290: EMPTY
8291: LIST
8292: LIST
8293: ST_TO_ADDR
// uc_side := side ;
8294: LD_ADDR_OWVAR 20
8298: PUSH
8299: LD_VAR 0 3
8303: ST_TO_ADDR
// uc_nation := nation_american ;
8304: LD_ADDR_OWVAR 21
8308: PUSH
8309: LD_INT 1
8311: ST_TO_ADDR
// InitHc ;
8312: CALL_OW 19
// InitVc ;
8316: CALL_OW 20
// hc_importance := 0 ;
8320: LD_ADDR_OWVAR 32
8324: PUSH
8325: LD_INT 0
8327: ST_TO_ADDR
// chassis := [ us_medium_wheeled , us_medium_tracked , us_medium_tracked ] ;
8328: LD_ADDR_VAR 0 7
8332: PUSH
8333: LD_INT 2
8335: PUSH
8336: LD_INT 3
8338: PUSH
8339: LD_INT 3
8341: PUSH
8342: EMPTY
8343: LIST
8344: LIST
8345: LIST
8346: ST_TO_ADDR
// if commander = 2 then
8347: LD_EXP 25
8351: PUSH
8352: LD_INT 2
8354: EQUAL
8355: IFFALSE 8376
// chassis := [ us_medium_tracked , us_heavy_tracked , us_heavy_tracked ] ;
8357: LD_ADDR_VAR 0 7
8361: PUSH
8362: LD_INT 3
8364: PUSH
8365: LD_INT 4
8367: PUSH
8368: LD_INT 4
8370: PUSH
8371: EMPTY
8372: LIST
8373: LIST
8374: LIST
8375: ST_TO_ADDR
// if commander = 3 then
8376: LD_EXP 25
8380: PUSH
8381: LD_INT 3
8383: EQUAL
8384: IFFALSE 8405
// chassis := [ us_medium_wheeled , us_morphling , us_morphling ] ;
8386: LD_ADDR_VAR 0 7
8390: PUSH
8391: LD_INT 2
8393: PUSH
8394: LD_INT 5
8396: PUSH
8397: LD_INT 5
8399: PUSH
8400: EMPTY
8401: LIST
8402: LIST
8403: LIST
8404: ST_TO_ADDR
// engines := [ engine_solar , engine_solar , engine_combustion ] ;
8405: LD_ADDR_VAR 0 8
8409: PUSH
8410: LD_INT 2
8412: PUSH
8413: LD_INT 2
8415: PUSH
8416: LD_INT 1
8418: PUSH
8419: EMPTY
8420: LIST
8421: LIST
8422: LIST
8423: ST_TO_ADDR
// if commander = 2 then
8424: LD_EXP 25
8428: PUSH
8429: LD_INT 2
8431: EQUAL
8432: IFFALSE 8453
// engines := [ engine_combustion , engine_combustion , engine_siberite ] ;
8434: LD_ADDR_VAR 0 8
8438: PUSH
8439: LD_INT 1
8441: PUSH
8442: LD_INT 1
8444: PUSH
8445: LD_INT 3
8447: PUSH
8448: EMPTY
8449: LIST
8450: LIST
8451: LIST
8452: ST_TO_ADDR
// if commander = 3 then
8453: LD_EXP 25
8457: PUSH
8458: LD_INT 3
8460: EQUAL
8461: IFFALSE 8482
// engines := [ engine_siberite , engine_siberite , engine_combustion ] ;
8463: LD_ADDR_VAR 0 8
8467: PUSH
8468: LD_INT 3
8470: PUSH
8471: LD_INT 3
8473: PUSH
8474: LD_INT 1
8476: PUSH
8477: EMPTY
8478: LIST
8479: LIST
8480: LIST
8481: ST_TO_ADDR
// weapons := [ us_double_gun , us_light_gun , us_gatling_gun ] ;
8482: LD_ADDR_VAR 0 9
8486: PUSH
8487: LD_INT 5
8489: PUSH
8490: LD_INT 3
8492: PUSH
8493: LD_INT 4
8495: PUSH
8496: EMPTY
8497: LIST
8498: LIST
8499: LIST
8500: ST_TO_ADDR
// if commander = 2 then
8501: LD_EXP 25
8505: PUSH
8506: LD_INT 2
8508: EQUAL
8509: IFFALSE 8530
// weapons := [ us_rocket_launcher , us_double_gun , us_heavy_gun ] ;
8511: LD_ADDR_VAR 0 9
8515: PUSH
8516: LD_INT 7
8518: PUSH
8519: LD_INT 5
8521: PUSH
8522: LD_INT 6
8524: PUSH
8525: EMPTY
8526: LIST
8527: LIST
8528: LIST
8529: ST_TO_ADDR
// if commander = 3 then
8530: LD_EXP 25
8534: PUSH
8535: LD_INT 3
8537: EQUAL
8538: IFFALSE 8559
// weapons := [ us_laser , us_double_laser , us_rocket_launcher ] ;
8540: LD_ADDR_VAR 0 9
8544: PUSH
8545: LD_INT 9
8547: PUSH
8548: LD_INT 10
8550: PUSH
8551: LD_INT 7
8553: PUSH
8554: EMPTY
8555: LIST
8556: LIST
8557: LIST
8558: ST_TO_ADDR
// tanks := [ 5 , 5 , 4 ] [ Difficulty ] ;
8559: LD_ADDR_VAR 0 5
8563: PUSH
8564: LD_INT 5
8566: PUSH
8567: LD_INT 5
8569: PUSH
8570: LD_INT 4
8572: PUSH
8573: EMPTY
8574: LIST
8575: LIST
8576: LIST
8577: PUSH
8578: LD_OWVAR 67
8582: ARRAY
8583: ST_TO_ADDR
// if commander = 2 then
8584: LD_EXP 25
8588: PUSH
8589: LD_INT 2
8591: EQUAL
8592: IFFALSE 8608
// tanks := tanks + 3 ;
8594: LD_ADDR_VAR 0 5
8598: PUSH
8599: LD_VAR 0 5
8603: PUSH
8604: LD_INT 3
8606: PLUS
8607: ST_TO_ADDR
// for i = 1 to tanks do
8608: LD_ADDR_VAR 0 2
8612: PUSH
8613: DOUBLE
8614: LD_INT 1
8616: DEC
8617: ST_TO_ADDR
8618: LD_VAR 0 5
8622: PUSH
8623: FOR_TO
8624: IFFALSE 8734
// begin PrepareVehicle ( chassis [ i mod 3 + 1 ] , engines [ rand ( 1 , 3 ) ] , control_manual , weapons [ i mod 3 + 1 ] , rand ( 60 , 70 ) ) ;
8626: LD_VAR 0 7
8630: PUSH
8631: LD_VAR 0 2
8635: PUSH
8636: LD_INT 3
8638: MOD
8639: PUSH
8640: LD_INT 1
8642: PLUS
8643: ARRAY
8644: PPUSH
8645: LD_VAR 0 8
8649: PUSH
8650: LD_INT 1
8652: PPUSH
8653: LD_INT 3
8655: PPUSH
8656: CALL_OW 12
8660: ARRAY
8661: PPUSH
8662: LD_INT 1
8664: PPUSH
8665: LD_VAR 0 9
8669: PUSH
8670: LD_VAR 0 2
8674: PUSH
8675: LD_INT 3
8677: MOD
8678: PUSH
8679: LD_INT 1
8681: PLUS
8682: ARRAY
8683: PPUSH
8684: LD_INT 60
8686: PPUSH
8687: LD_INT 70
8689: PPUSH
8690: CALL_OW 12
8694: PPUSH
8695: CALL 26515 0 5
// result := Replace ( result , 1 , result [ 1 ] ^ CreateVehicle ) ;
8699: LD_ADDR_VAR 0 1
8703: PUSH
8704: LD_VAR 0 1
8708: PPUSH
8709: LD_INT 1
8711: PPUSH
8712: LD_VAR 0 1
8716: PUSH
8717: LD_INT 1
8719: ARRAY
8720: PUSH
8721: CALL_OW 45
8725: ADD
8726: PPUSH
8727: CALL_OW 1
8731: ST_TO_ADDR
// end ;
8732: GO 8623
8734: POP
8735: POP
// cl := 1 ;
8736: LD_ADDR_VAR 0 6
8740: PUSH
8741: LD_INT 1
8743: ST_TO_ADDR
// for i = 1 to 10 do
8744: LD_ADDR_VAR 0 2
8748: PUSH
8749: DOUBLE
8750: LD_INT 1
8752: DEC
8753: ST_TO_ADDR
8754: LD_INT 10
8756: PUSH
8757: FOR_TO
8758: IFFALSE 8873
// begin if i mod 4 = 0 then
8760: LD_VAR 0 2
8764: PUSH
8765: LD_INT 4
8767: MOD
8768: PUSH
8769: LD_INT 0
8771: EQUAL
8772: IFFALSE 8788
// cl := cl + 1 ;
8774: LD_ADDR_VAR 0 6
8778: PUSH
8779: LD_VAR 0 6
8783: PUSH
8784: LD_INT 1
8786: PLUS
8787: ST_TO_ADDR
// if cl = 2 then
8788: LD_VAR 0 6
8792: PUSH
8793: LD_INT 2
8795: EQUAL
8796: IFFALSE 8806
// cl := 3 ;
8798: LD_ADDR_VAR 0 6
8802: PUSH
8803: LD_INT 3
8805: ST_TO_ADDR
// PrepareHuman ( false , cl , [ 6 , 6 , 5 ] [ Difficulty ] ) ;
8806: LD_INT 0
8808: PPUSH
8809: LD_VAR 0 6
8813: PPUSH
8814: LD_INT 6
8816: PUSH
8817: LD_INT 6
8819: PUSH
8820: LD_INT 5
8822: PUSH
8823: EMPTY
8824: LIST
8825: LIST
8826: LIST
8827: PUSH
8828: LD_OWVAR 67
8832: ARRAY
8833: PPUSH
8834: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
8838: LD_ADDR_VAR 0 1
8842: PUSH
8843: LD_VAR 0 1
8847: PPUSH
8848: LD_INT 2
8850: PPUSH
8851: LD_VAR 0 1
8855: PUSH
8856: LD_INT 2
8858: ARRAY
8859: PUSH
8860: CALL_OW 44
8864: ADD
8865: PPUSH
8866: CALL_OW 1
8870: ST_TO_ADDR
// end ;
8871: GO 8757
8873: POP
8874: POP
// if commander = 1 then
8875: LD_EXP 25
8879: PUSH
8880: LD_INT 1
8882: EQUAL
8883: IFFALSE 8951
// for i = 1 to 4 do
8885: LD_ADDR_VAR 0 2
8889: PUSH
8890: DOUBLE
8891: LD_INT 1
8893: DEC
8894: ST_TO_ADDR
8895: LD_INT 4
8897: PUSH
8898: FOR_TO
8899: IFFALSE 8949
// begin PrepareHuman ( false , class_soldier , 8 ) ;
8901: LD_INT 0
8903: PPUSH
8904: LD_INT 1
8906: PPUSH
8907: LD_INT 8
8909: PPUSH
8910: CALL_OW 380
// result := Replace ( result , 2 , result [ 2 ] ^ CreateHuman ) ;
8914: LD_ADDR_VAR 0 1
8918: PUSH
8919: LD_VAR 0 1
8923: PPUSH
8924: LD_INT 2
8926: PPUSH
8927: LD_VAR 0 1
8931: PUSH
8932: LD_INT 2
8934: ARRAY
8935: PUSH
8936: CALL_OW 44
8940: ADD
8941: PPUSH
8942: CALL_OW 1
8946: ST_TO_ADDR
// end ;
8947: GO 8898
8949: POP
8950: POP
// techs := [ ] ;
8951: LD_ADDR_VAR 0 4
8955: PUSH
8956: EMPTY
8957: ST_TO_ADDR
// if commander = 1 then
8958: LD_EXP 25
8962: PUSH
8963: LD_INT 1
8965: EQUAL
8966: IFFALSE 8991
// techs := [ tech_weap1 , tech_weap2 , tech_weap3 , tech_lasSight ] ;
8968: LD_ADDR_VAR 0 4
8972: PUSH
8973: LD_INT 51
8975: PUSH
8976: LD_INT 52
8978: PUSH
8979: LD_INT 53
8981: PUSH
8982: LD_INT 12
8984: PUSH
8985: EMPTY
8986: LIST
8987: LIST
8988: LIST
8989: LIST
8990: ST_TO_ADDR
// if commander = 2 then
8991: LD_EXP 25
8995: PUSH
8996: LD_INT 2
8998: EQUAL
8999: IFFALSE 9036
// techs := [ tech_tech1 , tech_oilEng , tech_oilPow , tech_solEng , tech_solPow , tech_opto1 , tech_radar ] ;
9001: LD_ADDR_VAR 0 4
9005: PUSH
9006: LD_INT 48
9008: PUSH
9009: LD_INT 47
9011: PUSH
9012: LD_INT 46
9014: PUSH
9015: LD_INT 45
9017: PUSH
9018: LD_INT 35
9020: PUSH
9021: LD_INT 60
9023: PUSH
9024: LD_INT 6
9026: PUSH
9027: EMPTY
9028: LIST
9029: LIST
9030: LIST
9031: LIST
9032: LIST
9033: LIST
9034: LIST
9035: ST_TO_ADDR
// if commander = 3 then
9036: LD_EXP 25
9040: PUSH
9041: LD_INT 3
9043: EQUAL
9044: IFFALSE 9093
// techs := [ tech_advAI , tech_advchassis , tech_ai , tech_comp1 , tech_comp2 , tech_oilEng , tech_oilPow , tech_weap1 , tech_gatling , tech_gun ] ;
9046: LD_ADDR_VAR 0 4
9050: PUSH
9051: LD_INT 27
9053: PUSH
9054: LD_INT 36
9056: PUSH
9057: LD_INT 32
9059: PUSH
9060: LD_INT 57
9062: PUSH
9063: LD_INT 58
9065: PUSH
9066: LD_INT 47
9068: PUSH
9069: LD_INT 46
9071: PUSH
9072: LD_INT 51
9074: PUSH
9075: LD_INT 69
9077: PUSH
9078: LD_INT 39
9080: PUSH
9081: EMPTY
9082: LIST
9083: LIST
9084: LIST
9085: LIST
9086: LIST
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: ST_TO_ADDR
// if techs then
9093: LD_VAR 0 4
9097: IFFALSE 9131
// for i in techs do
9099: LD_ADDR_VAR 0 2
9103: PUSH
9104: LD_VAR 0 4
9108: PUSH
9109: FOR_IN
9110: IFFALSE 9129
// SetTech ( i , 1 , state_researched ) ;
9112: LD_VAR 0 2
9116: PPUSH
9117: LD_INT 1
9119: PPUSH
9120: LD_INT 2
9122: PPUSH
9123: CALL_OW 322
9127: GO 9109
9129: POP
9130: POP
// hc_gallery := skirmish ;
9131: LD_ADDR_OWVAR 33
9135: PUSH
9136: LD_STRING skirmish
9138: ST_TO_ADDR
// hc_face_number := commander ;
9139: LD_ADDR_OWVAR 34
9143: PUSH
9144: LD_EXP 25
9148: ST_TO_ADDR
// hc_importance := 100 ;
9149: LD_ADDR_OWVAR 32
9153: PUSH
9154: LD_INT 100
9156: ST_TO_ADDR
// case commander of 1 :
9157: LD_EXP 25
9161: PUSH
9162: LD_INT 1
9164: DOUBLE
9165: EQUAL
9166: IFTRUE 9170
9168: GO 9194
9170: POP
// begin hc_name := Jeff Ironside ;
9171: LD_ADDR_OWVAR 26
9175: PUSH
9176: LD_STRING Jeff Ironside
9178: ST_TO_ADDR
// PrepareHuman ( sex_male , 1 , 7 ) ;
9179: LD_INT 1
9181: PPUSH
9182: LD_INT 1
9184: PPUSH
9185: LD_INT 7
9187: PPUSH
9188: CALL_OW 380
// end ; 2 :
9192: GO 9259
9194: LD_INT 2
9196: DOUBLE
9197: EQUAL
9198: IFTRUE 9202
9200: GO 9226
9202: POP
// begin hc_name := Paul Johnson ;
9203: LD_ADDR_OWVAR 26
9207: PUSH
9208: LD_STRING Paul Johnson
9210: ST_TO_ADDR
// PrepareHuman ( sex_male , 3 , 7 ) ;
9211: LD_INT 1
9213: PPUSH
9214: LD_INT 3
9216: PPUSH
9217: LD_INT 7
9219: PPUSH
9220: CALL_OW 380
// end ; 3 :
9224: GO 9259
9226: LD_INT 3
9228: DOUBLE
9229: EQUAL
9230: IFTRUE 9234
9232: GO 9258
9234: POP
// begin hc_name := Lisa Stuart ;
9235: LD_ADDR_OWVAR 26
9239: PUSH
9240: LD_STRING Lisa Stuart
9242: ST_TO_ADDR
// PrepareHuman ( sex_female , 4 , 7 ) ;
9243: LD_INT 2
9245: PPUSH
9246: LD_INT 4
9248: PPUSH
9249: LD_INT 7
9251: PPUSH
9252: CALL_OW 380
// end ; end ;
9256: GO 9259
9258: POP
// playerCommander := CreateHuman ;
9259: LD_ADDR_EXP 9
9263: PUSH
9264: CALL_OW 44
9268: ST_TO_ADDR
// hc_importance := 0 ;
9269: LD_ADDR_OWVAR 32
9273: PUSH
9274: LD_INT 0
9276: ST_TO_ADDR
// hc_gallery :=  ;
9277: LD_ADDR_OWVAR 33
9281: PUSH
9282: LD_STRING 
9284: ST_TO_ADDR
// result := Replace ( result , 2 , result [ 2 ] ^ playerCommander ) ;
9285: LD_ADDR_VAR 0 1
9289: PUSH
9290: LD_VAR 0 1
9294: PPUSH
9295: LD_INT 2
9297: PPUSH
9298: LD_VAR 0 1
9302: PUSH
9303: LD_INT 2
9305: ARRAY
9306: PUSH
9307: LD_EXP 9
9311: ADD
9312: PPUSH
9313: CALL_OW 1
9317: ST_TO_ADDR
// end ;
9318: LD_VAR 0 1
9322: RET
// export function PrepareReinforcements ; var i , peopleAmount , tmp , un , veh ; begin
9323: LD_INT 0
9325: PPUSH
9326: PPUSH
9327: PPUSH
9328: PPUSH
9329: PPUSH
9330: PPUSH
// uc_side := 1 ;
9331: LD_ADDR_OWVAR 20
9335: PUSH
9336: LD_INT 1
9338: ST_TO_ADDR
// uc_nation := 1 ;
9339: LD_ADDR_OWVAR 21
9343: PUSH
9344: LD_INT 1
9346: ST_TO_ADDR
// InitHc ;
9347: CALL_OW 19
// peopleAmount := [ 3 , 3 , 2 ] [ Difficulty ] ;
9351: LD_ADDR_VAR 0 3
9355: PUSH
9356: LD_INT 3
9358: PUSH
9359: LD_INT 3
9361: PUSH
9362: LD_INT 2
9364: PUSH
9365: EMPTY
9366: LIST
9367: LIST
9368: LIST
9369: PUSH
9370: LD_OWVAR 67
9374: ARRAY
9375: ST_TO_ADDR
// for i = 1 to peopleAmount do
9376: LD_ADDR_VAR 0 2
9380: PUSH
9381: DOUBLE
9382: LD_INT 1
9384: DEC
9385: ST_TO_ADDR
9386: LD_VAR 0 3
9390: PUSH
9391: FOR_TO
9392: IFFALSE 9441
// begin PrepareHuman ( false , 2 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
9394: LD_INT 0
9396: PPUSH
9397: LD_INT 2
9399: PPUSH
9400: LD_INT 7
9402: PUSH
9403: LD_INT 6
9405: PUSH
9406: LD_INT 5
9408: PUSH
9409: EMPTY
9410: LIST
9411: LIST
9412: LIST
9413: PUSH
9414: LD_OWVAR 67
9418: ARRAY
9419: PPUSH
9420: CALL_OW 380
// PlaceUnitInArea ( CreateHuman , startArea , false ) ;
9424: CALL_OW 44
9428: PPUSH
9429: LD_INT 19
9431: PPUSH
9432: LD_INT 0
9434: PPUSH
9435: CALL 61150 0 3
// end ;
9439: GO 9391
9441: POP
9442: POP
// PrepareVehicle ( us_medium_wheeled , engine_combustion , control_computer , us_crane , 58 ) ;
9443: LD_INT 2
9445: PPUSH
9446: LD_INT 1
9448: PPUSH
9449: LD_INT 3
9451: PPUSH
9452: LD_INT 13
9454: PPUSH
9455: LD_INT 58
9457: PPUSH
9458: CALL 26515 0 5
// PlaceUnitInArea ( CreateVehicle , startArea , false ) ;
9462: CALL_OW 45
9466: PPUSH
9467: LD_INT 19
9469: PPUSH
9470: LD_INT 0
9472: PPUSH
9473: CALL 61150 0 3
// if commander = 1 then
9477: LD_EXP 25
9481: PUSH
9482: LD_INT 1
9484: EQUAL
9485: IFFALSE 9496
// wait ( 6 6$00 ) else
9487: LD_INT 12600
9489: PPUSH
9490: CALL_OW 67
9494: GO 9503
// wait ( 8 8$00 ) ;
9496: LD_INT 16800
9498: PPUSH
9499: CALL_OW 67
// uc_side := 1 ;
9503: LD_ADDR_OWVAR 20
9507: PUSH
9508: LD_INT 1
9510: ST_TO_ADDR
// uc_nation := 1 ;
9511: LD_ADDR_OWVAR 21
9515: PUSH
9516: LD_INT 1
9518: ST_TO_ADDR
// InitVc ;
9519: CALL_OW 20
// InitHc ;
9523: CALL_OW 19
// for i = 1 to 5 do
9527: LD_ADDR_VAR 0 2
9531: PUSH
9532: DOUBLE
9533: LD_INT 1
9535: DEC
9536: ST_TO_ADDR
9537: LD_INT 5
9539: PUSH
9540: FOR_TO
9541: IFFALSE 9785
// begin PrepareVehicle ( [ us_heavy_tracked , us_medium_tracked , us_light_wheeled ] [ i mod 3 + 1 ] , engine_combustion , [ control_manual , control_computer , control_computer ] [ i mod 3 + 1 ] , [ us_heavy_gun , us_cargo_bay , us_radar ] [ i mod 3 + 1 ] , rand ( 40 , 55 ) ) ;
9543: LD_INT 4
9545: PUSH
9546: LD_INT 3
9548: PUSH
9549: LD_INT 1
9551: PUSH
9552: EMPTY
9553: LIST
9554: LIST
9555: LIST
9556: PUSH
9557: LD_VAR 0 2
9561: PUSH
9562: LD_INT 3
9564: MOD
9565: PUSH
9566: LD_INT 1
9568: PLUS
9569: ARRAY
9570: PPUSH
9571: LD_INT 1
9573: PPUSH
9574: LD_INT 1
9576: PUSH
9577: LD_INT 3
9579: PUSH
9580: LD_INT 3
9582: PUSH
9583: EMPTY
9584: LIST
9585: LIST
9586: LIST
9587: PUSH
9588: LD_VAR 0 2
9592: PUSH
9593: LD_INT 3
9595: MOD
9596: PUSH
9597: LD_INT 1
9599: PLUS
9600: ARRAY
9601: PPUSH
9602: LD_INT 6
9604: PUSH
9605: LD_INT 12
9607: PUSH
9608: LD_INT 11
9610: PUSH
9611: EMPTY
9612: LIST
9613: LIST
9614: LIST
9615: PUSH
9616: LD_VAR 0 2
9620: PUSH
9621: LD_INT 3
9623: MOD
9624: PUSH
9625: LD_INT 1
9627: PLUS
9628: ARRAY
9629: PPUSH
9630: LD_INT 40
9632: PPUSH
9633: LD_INT 55
9635: PPUSH
9636: CALL_OW 12
9640: PPUSH
9641: CALL 26515 0 5
// veh := CreateVehicle ;
9645: LD_ADDR_VAR 0 6
9649: PUSH
9650: CALL_OW 45
9654: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
9655: LD_VAR 0 6
9659: PPUSH
9660: LD_INT 19
9662: PPUSH
9663: LD_INT 0
9665: PPUSH
9666: CALL 61150 0 3
// if GetWeapon ( veh ) = us_cargo_bay then
9670: LD_VAR 0 6
9674: PPUSH
9675: CALL_OW 264
9679: PUSH
9680: LD_INT 12
9682: EQUAL
9683: IFFALSE 9715
// begin AddCargo ( veh , mat_cans , 70 ) ;
9685: LD_VAR 0 6
9689: PPUSH
9690: LD_INT 1
9692: PPUSH
9693: LD_INT 70
9695: PPUSH
9696: CALL_OW 291
// AddCargo ( veh , mat_siberit , 30 ) ;
9700: LD_VAR 0 6
9704: PPUSH
9705: LD_INT 3
9707: PPUSH
9708: LD_INT 30
9710: PPUSH
9711: CALL_OW 291
// end ; if GetControl ( veh ) = control_manual then
9715: LD_VAR 0 6
9719: PPUSH
9720: CALL_OW 263
9724: PUSH
9725: LD_INT 1
9727: EQUAL
9728: IFFALSE 9783
// begin PrepareHuman ( sex_male , 3 , 6 ) ;
9730: LD_INT 1
9732: PPUSH
9733: LD_INT 3
9735: PPUSH
9736: LD_INT 6
9738: PPUSH
9739: CALL_OW 380
// un := CreateHuman ;
9743: LD_ADDR_VAR 0 5
9747: PUSH
9748: CALL_OW 44
9752: ST_TO_ADDR
// tmp := tmp ^ un ;
9753: LD_ADDR_VAR 0 4
9757: PUSH
9758: LD_VAR 0 4
9762: PUSH
9763: LD_VAR 0 5
9767: ADD
9768: ST_TO_ADDR
// PlaceHumanInUnit ( un , veh ) ;
9769: LD_VAR 0 5
9773: PPUSH
9774: LD_VAR 0 6
9778: PPUSH
9779: CALL_OW 52
// end ; end ;
9783: GO 9540
9785: POP
9786: POP
// if tmp then
9787: LD_VAR 0 4
9791: IFFALSE 9855
// begin CenterNowOnUnits ( tmp ) ;
9793: LD_VAR 0 4
9797: PPUSH
9798: CALL_OW 87
// Say ( tmp [ 1 ] , DAR-1 ) ;
9802: LD_VAR 0 4
9806: PUSH
9807: LD_INT 1
9809: ARRAY
9810: PPUSH
9811: LD_STRING DAR-1
9813: PPUSH
9814: CALL_OW 88
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-DAR ) ;
9818: LD_EXP 9
9822: PPUSH
9823: LD_STRING D
9825: PUSH
9826: LD_STRING I
9828: PUSH
9829: LD_STRING J
9831: PUSH
9832: LD_STRING S
9834: PUSH
9835: EMPTY
9836: LIST
9837: LIST
9838: LIST
9839: PUSH
9840: LD_EXP 25
9844: ARRAY
9845: STR
9846: PUSH
9847: LD_STRING -1-DAR
9849: STR
9850: PPUSH
9851: CALL_OW 88
// end ; if not reinforceAllowed then
9855: LD_EXP 24
9859: NOT
9860: IFFALSE 9864
// exit ;
9862: GO 10018
// wait ( 25 25$00 ) ;
9864: LD_INT 52500
9866: PPUSH
9867: CALL_OW 67
// uc_side := 1 ;
9871: LD_ADDR_OWVAR 20
9875: PUSH
9876: LD_INT 1
9878: ST_TO_ADDR
// uc_nation := 1 ;
9879: LD_ADDR_OWVAR 21
9883: PUSH
9884: LD_INT 1
9886: ST_TO_ADDR
// InitVc ;
9887: CALL_OW 20
// InitHc ;
9891: CALL_OW 19
// for i = 1 to 4 do
9895: LD_ADDR_VAR 0 2
9899: PUSH
9900: DOUBLE
9901: LD_INT 1
9903: DEC
9904: ST_TO_ADDR
9905: LD_INT 4
9907: PUSH
9908: FOR_TO
9909: IFFALSE 10016
// begin PrepareVehicle ( us_morphling , engine_siberite , control_manual , us_heavy_gun , 1 ) ;
9911: LD_INT 5
9913: PPUSH
9914: LD_INT 3
9916: PPUSH
9917: LD_INT 1
9919: PPUSH
9920: LD_INT 6
9922: PPUSH
9923: LD_INT 1
9925: PPUSH
9926: CALL 26515 0 5
// veh := CreateVehicle ;
9930: LD_ADDR_VAR 0 6
9934: PUSH
9935: CALL_OW 45
9939: ST_TO_ADDR
// PlaceUnitInArea ( veh , startArea , false ) ;
9940: LD_VAR 0 6
9944: PPUSH
9945: LD_INT 19
9947: PPUSH
9948: LD_INT 0
9950: PPUSH
9951: CALL 61150 0 3
// if GetControl ( veh ) = control_manual then
9955: LD_VAR 0 6
9959: PPUSH
9960: CALL_OW 263
9964: PUSH
9965: LD_INT 1
9967: EQUAL
9968: IFFALSE 10014
// begin PrepareHuman ( false , 3 , [ 7 , 6 , 5 ] [ Difficulty ] ) ;
9970: LD_INT 0
9972: PPUSH
9973: LD_INT 3
9975: PPUSH
9976: LD_INT 7
9978: PUSH
9979: LD_INT 6
9981: PUSH
9982: LD_INT 5
9984: PUSH
9985: EMPTY
9986: LIST
9987: LIST
9988: LIST
9989: PUSH
9990: LD_OWVAR 67
9994: ARRAY
9995: PPUSH
9996: CALL_OW 380
// PlaceHumanInUnit ( CreateHuman , veh ) ;
10000: CALL_OW 44
10004: PPUSH
10005: LD_VAR 0 6
10009: PPUSH
10010: CALL_OW 52
// end ; end ;
10014: GO 9908
10016: POP
10017: POP
// end ;
10018: LD_VAR 0 1
10022: RET
// export function PrepareLegionReinforcements ; var i , un , j , tmp ; begin
10023: LD_INT 0
10025: PPUSH
10026: PPUSH
10027: PPUSH
10028: PPUSH
10029: PPUSH
// uc_side := 8 ;
10030: LD_ADDR_OWVAR 20
10034: PUSH
10035: LD_INT 8
10037: ST_TO_ADDR
// uc_nation := nation_arabian ;
10038: LD_ADDR_OWVAR 21
10042: PUSH
10043: LD_INT 2
10045: ST_TO_ADDR
// for i = 1 to 2 do
10046: LD_ADDR_VAR 0 2
10050: PUSH
10051: DOUBLE
10052: LD_INT 1
10054: DEC
10055: ST_TO_ADDR
10056: LD_INT 2
10058: PUSH
10059: FOR_TO
10060: IFFALSE 10140
// for j = 1 to 4 do
10062: LD_ADDR_VAR 0 4
10066: PUSH
10067: DOUBLE
10068: LD_INT 1
10070: DEC
10071: ST_TO_ADDR
10072: LD_INT 4
10074: PUSH
10075: FOR_TO
10076: IFFALSE 10136
// begin PrepareHuman ( false , j , 8 ) ;
10078: LD_INT 0
10080: PPUSH
10081: LD_VAR 0 4
10085: PPUSH
10086: LD_INT 8
10088: PPUSH
10089: CALL_OW 380
// un := CreateHuman ;
10093: LD_ADDR_VAR 0 3
10097: PUSH
10098: CALL_OW 44
10102: ST_TO_ADDR
// PlaceUnitArea ( un , legionSpawn , false ) ;
10103: LD_VAR 0 3
10107: PPUSH
10108: LD_INT 23
10110: PPUSH
10111: LD_INT 0
10113: PPUSH
10114: CALL_OW 49
// tmp := tmp union un ;
10118: LD_ADDR_VAR 0 5
10122: PUSH
10123: LD_VAR 0 5
10127: PUSH
10128: LD_VAR 0 3
10132: UNION
10133: ST_TO_ADDR
// end ;
10134: GO 10075
10136: POP
10137: POP
10138: GO 10059
10140: POP
10141: POP
// for i in tmp do
10142: LD_ADDR_VAR 0 2
10146: PUSH
10147: LD_VAR 0 5
10151: PUSH
10152: FOR_IN
10153: IFFALSE 10172
// ComMoveXY ( i , 150 , 136 ) ;
10155: LD_VAR 0 2
10159: PPUSH
10160: LD_INT 150
10162: PPUSH
10163: LD_INT 136
10165: PPUSH
10166: CALL_OW 111
10170: GO 10152
10172: POP
10173: POP
// mc_bases := Replace ( mc_bases , mc_leg , mc_bases [ mc_leg ] union tmp ) ;
10174: LD_ADDR_EXP 36
10178: PUSH
10179: LD_EXP 36
10183: PPUSH
10184: LD_EXP 6
10188: PPUSH
10189: LD_EXP 36
10193: PUSH
10194: LD_EXP 6
10198: ARRAY
10199: PUSH
10200: LD_VAR 0 5
10204: UNION
10205: PPUSH
10206: CALL_OW 1
10210: ST_TO_ADDR
// end ;
10211: LD_VAR 0 1
10215: RET
// every 0 0$10 trigger GetTech ( tech_lapser , 3 ) = state_researched do
10216: LD_INT 31
10218: PPUSH
10219: LD_INT 3
10221: PPUSH
10222: CALL_OW 321
10226: PUSH
10227: LD_INT 2
10229: EQUAL
10230: IFFALSE 10360
10232: GO 10234
10234: DISABLE
// begin MC_InsertBuildingList ( mc_rus_2 , [ [ b_turret , 78 , 151 , 5 ] , [ b_turret , 101 , 159 , 5 ] , [ b_turret , 105 , 158 , 5 ] , [ b_turret , 96 , 136 , 5 ] , [ b_turret , 94 , 133 , 4 ] , [ b_turret , 84 , 102 , 4 ] ] ) ;
10235: LD_EXP 8
10239: PPUSH
10240: LD_INT 33
10242: PUSH
10243: LD_INT 78
10245: PUSH
10246: LD_INT 151
10248: PUSH
10249: LD_INT 5
10251: PUSH
10252: EMPTY
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: PUSH
10258: LD_INT 33
10260: PUSH
10261: LD_INT 101
10263: PUSH
10264: LD_INT 159
10266: PUSH
10267: LD_INT 5
10269: PUSH
10270: EMPTY
10271: LIST
10272: LIST
10273: LIST
10274: LIST
10275: PUSH
10276: LD_INT 33
10278: PUSH
10279: LD_INT 105
10281: PUSH
10282: LD_INT 158
10284: PUSH
10285: LD_INT 5
10287: PUSH
10288: EMPTY
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: PUSH
10294: LD_INT 33
10296: PUSH
10297: LD_INT 96
10299: PUSH
10300: LD_INT 136
10302: PUSH
10303: LD_INT 5
10305: PUSH
10306: EMPTY
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: PUSH
10312: LD_INT 33
10314: PUSH
10315: LD_INT 94
10317: PUSH
10318: LD_INT 133
10320: PUSH
10321: LD_INT 4
10323: PUSH
10324: EMPTY
10325: LIST
10326: LIST
10327: LIST
10328: LIST
10329: PUSH
10330: LD_INT 33
10332: PUSH
10333: LD_INT 84
10335: PUSH
10336: LD_INT 102
10338: PUSH
10339: LD_INT 4
10341: PUSH
10342: EMPTY
10343: LIST
10344: LIST
10345: LIST
10346: LIST
10347: PUSH
10348: EMPTY
10349: LIST
10350: LIST
10351: LIST
10352: LIST
10353: LIST
10354: LIST
10355: PPUSH
10356: CALL 85668 0 2
// end ; end_of_file
10360: END
// export function Action ; var i , tmp ; begin
10361: LD_INT 0
10363: PPUSH
10364: PPUSH
10365: PPUSH
// InGameOn ;
10366: CALL_OW 8
// CenterNowOnXY ( 225 , 217 ) ;
10370: LD_INT 225
10372: PPUSH
10373: LD_INT 217
10375: PPUSH
10376: CALL_OW 86
// for i in playerForces [ 2 ] do
10380: LD_ADDR_VAR 0 2
10384: PUSH
10385: LD_EXP 10
10389: PUSH
10390: LD_INT 2
10392: ARRAY
10393: PUSH
10394: FOR_IN
10395: IFFALSE 10528
// begin if playerForces [ 1 ] and GetClass ( i ) in [ 3 , 4 ] then
10397: LD_EXP 10
10401: PUSH
10402: LD_INT 1
10404: ARRAY
10405: PUSH
10406: LD_VAR 0 2
10410: PPUSH
10411: CALL_OW 257
10415: PUSH
10416: LD_INT 3
10418: PUSH
10419: LD_INT 4
10421: PUSH
10422: EMPTY
10423: LIST
10424: LIST
10425: IN
10426: AND
10427: IFFALSE 10511
// begin PlaceUnitInArea ( playerForces [ 1 ] [ 1 ] , startArea , false ) ;
10429: LD_EXP 10
10433: PUSH
10434: LD_INT 1
10436: ARRAY
10437: PUSH
10438: LD_INT 1
10440: ARRAY
10441: PPUSH
10442: LD_INT 19
10444: PPUSH
10445: LD_INT 0
10447: PPUSH
10448: CALL 61150 0 3
// PlaceHumanInUnit ( i , playerForces [ 1 ] [ 1 ] ) ;
10452: LD_VAR 0 2
10456: PPUSH
10457: LD_EXP 10
10461: PUSH
10462: LD_INT 1
10464: ARRAY
10465: PUSH
10466: LD_INT 1
10468: ARRAY
10469: PPUSH
10470: CALL_OW 52
// playerForces := Replace ( playerForces , 1 , Delete ( playerForces [ 1 ] , 1 ) ) ;
10474: LD_ADDR_EXP 10
10478: PUSH
10479: LD_EXP 10
10483: PPUSH
10484: LD_INT 1
10486: PPUSH
10487: LD_EXP 10
10491: PUSH
10492: LD_INT 1
10494: ARRAY
10495: PPUSH
10496: LD_INT 1
10498: PPUSH
10499: CALL_OW 3
10503: PPUSH
10504: CALL_OW 1
10508: ST_TO_ADDR
// end else
10509: GO 10526
// PlaceUnitInArea ( i , startArea , false ) ;
10511: LD_VAR 0 2
10515: PPUSH
10516: LD_INT 19
10518: PPUSH
10519: LD_INT 0
10521: PPUSH
10522: CALL 61150 0 3
// end ;
10526: GO 10394
10528: POP
10529: POP
// wait ( 0 0$2 ) ;
10530: LD_INT 70
10532: PPUSH
10533: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1 ) ;
10537: LD_EXP 9
10541: PPUSH
10542: LD_STRING D
10544: PUSH
10545: LD_STRING I
10547: PUSH
10548: LD_STRING J
10550: PUSH
10551: LD_STRING S
10553: PUSH
10554: EMPTY
10555: LIST
10556: LIST
10557: LIST
10558: PUSH
10559: LD_EXP 25
10563: ARRAY
10564: STR
10565: PUSH
10566: LD_STRING -1
10568: STR
10569: PPUSH
10570: CALL_OW 88
// SayRadio ( Powell , DP-1 ) ;
10574: LD_EXP 12
10578: PPUSH
10579: LD_STRING DP-1
10581: PPUSH
10582: CALL_OW 94
// SayRadio ( Powell , DP-2 ) ;
10586: LD_EXP 12
10590: PPUSH
10591: LD_STRING DP-2
10593: PPUSH
10594: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2 ) ;
10598: LD_EXP 9
10602: PPUSH
10603: LD_STRING D
10605: PUSH
10606: LD_STRING I
10608: PUSH
10609: LD_STRING J
10611: PUSH
10612: LD_STRING S
10614: PUSH
10615: EMPTY
10616: LIST
10617: LIST
10618: LIST
10619: PUSH
10620: LD_EXP 25
10624: ARRAY
10625: STR
10626: PUSH
10627: LD_STRING -2
10629: STR
10630: PPUSH
10631: CALL_OW 88
// InGameOff ;
10635: CALL_OW 9
// ChangeMissionObjectives ( O1 ) ;
10639: LD_STRING O1
10641: PPUSH
10642: CALL_OW 337
// game := true ;
10646: LD_ADDR_EXP 3
10650: PUSH
10651: LD_INT 1
10653: ST_TO_ADDR
// wait ( 0 0$5 ) ;
10654: LD_INT 175
10656: PPUSH
10657: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3 ) ;
10661: LD_EXP 9
10665: PPUSH
10666: LD_STRING D
10668: PUSH
10669: LD_STRING I
10671: PUSH
10672: LD_STRING J
10674: PUSH
10675: LD_STRING S
10677: PUSH
10678: EMPTY
10679: LIST
10680: LIST
10681: LIST
10682: PUSH
10683: LD_EXP 25
10687: ARRAY
10688: STR
10689: PUSH
10690: LD_STRING -3
10692: STR
10693: PPUSH
10694: CALL_OW 88
// repeat wait ( 0 0$1 ) ;
10698: LD_INT 35
10700: PPUSH
10701: CALL_OW 67
// until ruEscape [ 1 ] >= ruEscape [ 2 ] ;
10705: LD_EXP 15
10709: PUSH
10710: LD_INT 1
10712: ARRAY
10713: PUSH
10714: LD_EXP 15
10718: PUSH
10719: LD_INT 2
10721: ARRAY
10722: GREATEREQUAL
10723: IFFALSE 10698
// outpostEscape := true ;
10725: LD_ADDR_EXP 27
10729: PUSH
10730: LD_INT 1
10732: ST_TO_ADDR
// tmp := UnitFilter ( ruOutpost , [ f_sex , sex_male ] ) ;
10733: LD_ADDR_VAR 0 3
10737: PUSH
10738: LD_EXP 14
10742: PPUSH
10743: LD_INT 26
10745: PUSH
10746: LD_INT 1
10748: PUSH
10749: EMPTY
10750: LIST
10751: LIST
10752: PPUSH
10753: CALL_OW 72
10757: ST_TO_ADDR
// if tmp then
10758: LD_VAR 0 3
10762: IFFALSE 10780
// Say ( tmp [ 1 ] , DR-1-Escape ) ;
10764: LD_VAR 0 3
10768: PUSH
10769: LD_INT 1
10771: ARRAY
10772: PPUSH
10773: LD_STRING DR-1-Escape
10775: PPUSH
10776: CALL_OW 88
// wait ( 0 0$1 ) ;
10780: LD_INT 35
10782: PPUSH
10783: CALL_OW 67
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Escape ) ;
10787: LD_EXP 9
10791: PPUSH
10792: LD_STRING D
10794: PUSH
10795: LD_STRING I
10797: PUSH
10798: LD_STRING J
10800: PUSH
10801: LD_STRING S
10803: PUSH
10804: EMPTY
10805: LIST
10806: LIST
10807: LIST
10808: PUSH
10809: LD_EXP 25
10813: ARRAY
10814: STR
10815: PUSH
10816: LD_STRING -1-Escape
10818: STR
10819: PPUSH
10820: CALL_OW 88
// for i in ruOutpost do
10824: LD_ADDR_VAR 0 2
10828: PUSH
10829: LD_EXP 14
10833: PUSH
10834: FOR_IN
10835: IFFALSE 10889
// begin if IsInUnit ( i ) then
10837: LD_VAR 0 2
10841: PPUSH
10842: CALL_OW 310
10846: IFFALSE 10857
// ComExitBuilding ( i ) ;
10848: LD_VAR 0 2
10852: PPUSH
10853: CALL_OW 122
// AddComMoveXY ( i , 179 , 102 ) ;
10857: LD_VAR 0 2
10861: PPUSH
10862: LD_INT 179
10864: PPUSH
10865: LD_INT 102
10867: PPUSH
10868: CALL_OW 171
// AddComMoveXY ( i , 28 , 20 ) ;
10872: LD_VAR 0 2
10876: PPUSH
10877: LD_INT 28
10879: PPUSH
10880: LD_INT 20
10882: PPUSH
10883: CALL_OW 171
// end ;
10887: GO 10834
10889: POP
10890: POP
// tmp := [ ] ;
10891: LD_ADDR_VAR 0 3
10895: PUSH
10896: EMPTY
10897: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
10898: LD_INT 35
10900: PPUSH
10901: CALL_OW 67
// tmp := UnitFilter ( ruOutpost , [ f_inarea , rus1Base ] ) ;
10905: LD_ADDR_VAR 0 3
10909: PUSH
10910: LD_EXP 14
10914: PPUSH
10915: LD_INT 95
10917: PUSH
10918: LD_INT 11
10920: PUSH
10921: EMPTY
10922: LIST
10923: LIST
10924: PPUSH
10925: CALL_OW 72
10929: ST_TO_ADDR
// if tmp then
10930: LD_VAR 0 3
10934: IFFALSE 11006
// for i in tmp do
10936: LD_ADDR_VAR 0 2
10940: PUSH
10941: LD_VAR 0 3
10945: PUSH
10946: FOR_IN
10947: IFFALSE 11004
// begin ruOutpost := ruOutpost diff i ;
10949: LD_ADDR_EXP 14
10953: PUSH
10954: LD_EXP 14
10958: PUSH
10959: LD_VAR 0 2
10963: DIFF
10964: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , mc_rus_1 , mc_bases [ mc_rus_1 ] union i ) ;
10965: LD_ADDR_EXP 36
10969: PUSH
10970: LD_EXP 36
10974: PPUSH
10975: LD_EXP 7
10979: PPUSH
10980: LD_EXP 36
10984: PUSH
10985: LD_EXP 7
10989: ARRAY
10990: PUSH
10991: LD_VAR 0 2
10995: UNION
10996: PPUSH
10997: CALL_OW 1
11001: ST_TO_ADDR
// end ;
11002: GO 10946
11004: POP
11005: POP
// until not ruOutpost ;
11006: LD_EXP 14
11010: NOT
11011: IFFALSE 10898
// end ;
11013: LD_VAR 0 1
11017: RET
// every 0 0$1 trigger outpostEscape do var i , tmp ;
11018: LD_EXP 27
11022: IFFALSE 11211
11024: GO 11026
11026: DISABLE
11027: LD_INT 0
11029: PPUSH
11030: PPUSH
// begin wait ( rand ( 0 0$25 , 0 0$35 ) ) ;
11031: LD_INT 875
11033: PPUSH
11034: LD_INT 1225
11036: PPUSH
11037: CALL_OW 12
11041: PPUSH
11042: CALL_OW 67
// tmp := [ [ 208 , 166 ] , [ 218 , 174 ] , [ 201 , 173 ] , [ 189 , 167 ] , [ 191 , 160 ] , [ 209 , 181 ] , [ 192 , 162 ] , [ 197 , 166 ] ] ;
11046: LD_ADDR_VAR 0 2
11050: PUSH
11051: LD_INT 208
11053: PUSH
11054: LD_INT 166
11056: PUSH
11057: EMPTY
11058: LIST
11059: LIST
11060: PUSH
11061: LD_INT 218
11063: PUSH
11064: LD_INT 174
11066: PUSH
11067: EMPTY
11068: LIST
11069: LIST
11070: PUSH
11071: LD_INT 201
11073: PUSH
11074: LD_INT 173
11076: PUSH
11077: EMPTY
11078: LIST
11079: LIST
11080: PUSH
11081: LD_INT 189
11083: PUSH
11084: LD_INT 167
11086: PUSH
11087: EMPTY
11088: LIST
11089: LIST
11090: PUSH
11091: LD_INT 191
11093: PUSH
11094: LD_INT 160
11096: PUSH
11097: EMPTY
11098: LIST
11099: LIST
11100: PUSH
11101: LD_INT 209
11103: PUSH
11104: LD_INT 181
11106: PUSH
11107: EMPTY
11108: LIST
11109: LIST
11110: PUSH
11111: LD_INT 192
11113: PUSH
11114: LD_INT 162
11116: PUSH
11117: EMPTY
11118: LIST
11119: LIST
11120: PUSH
11121: LD_INT 197
11123: PUSH
11124: LD_INT 166
11126: PUSH
11127: EMPTY
11128: LIST
11129: LIST
11130: PUSH
11131: EMPTY
11132: LIST
11133: LIST
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: ST_TO_ADDR
// for i = 1 to 5 + Difficulty do
11141: LD_ADDR_VAR 0 1
11145: PUSH
11146: DOUBLE
11147: LD_INT 1
11149: DEC
11150: ST_TO_ADDR
11151: LD_INT 5
11153: PUSH
11154: LD_OWVAR 67
11158: PLUS
11159: PUSH
11160: FOR_TO
11161: IFFALSE 11209
// begin MineExplosion ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] , 1 ) ;
11163: LD_VAR 0 2
11167: PUSH
11168: LD_VAR 0 1
11172: ARRAY
11173: PUSH
11174: LD_INT 1
11176: ARRAY
11177: PPUSH
11178: LD_VAR 0 2
11182: PUSH
11183: LD_VAR 0 1
11187: ARRAY
11188: PUSH
11189: LD_INT 2
11191: ARRAY
11192: PPUSH
11193: LD_INT 1
11195: PPUSH
11196: CALL_OW 453
// wait ( 0 0$0.8 ) ;
11200: LD_INT 28
11202: PPUSH
11203: CALL_OW 67
// end ;
11207: GO 11160
11209: POP
11210: POP
// end ;
11211: PPOPN 2
11213: END
// every 0 0$3 trigger not outpostEscape do var tmp , engs , buildings , empty , i , j , k ;
11214: LD_EXP 27
11218: NOT
11219: IFFALSE 11834
11221: GO 11223
11223: DISABLE
11224: LD_INT 0
11226: PPUSH
11227: PPUSH
11228: PPUSH
11229: PPUSH
11230: PPUSH
11231: PPUSH
11232: PPUSH
// begin enable ;
11233: ENABLE
// tmp := UnitFilter ( ruOutpost , [ f_class , 1 ] ) ;
11234: LD_ADDR_VAR 0 1
11238: PUSH
11239: LD_EXP 14
11243: PPUSH
11244: LD_INT 25
11246: PUSH
11247: LD_INT 1
11249: PUSH
11250: EMPTY
11251: LIST
11252: LIST
11253: PPUSH
11254: CALL_OW 72
11258: ST_TO_ADDR
// engs := UnitFilter ( ruOutpost , [ f_class , 2 ] ) ;
11259: LD_ADDR_VAR 0 2
11263: PUSH
11264: LD_EXP 14
11268: PPUSH
11269: LD_INT 25
11271: PUSH
11272: LD_INT 2
11274: PUSH
11275: EMPTY
11276: LIST
11277: LIST
11278: PPUSH
11279: CALL_OW 72
11283: ST_TO_ADDR
// buildings := UnitFilter ( ruOutpost , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
11284: LD_ADDR_VAR 0 3
11288: PUSH
11289: LD_EXP 14
11293: PPUSH
11294: LD_INT 21
11296: PUSH
11297: LD_INT 3
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: PUSH
11304: LD_INT 3
11306: PUSH
11307: LD_INT 24
11309: PUSH
11310: LD_INT 1000
11312: PUSH
11313: EMPTY
11314: LIST
11315: LIST
11316: PUSH
11317: EMPTY
11318: LIST
11319: LIST
11320: PUSH
11321: EMPTY
11322: LIST
11323: LIST
11324: PPUSH
11325: CALL_OW 72
11329: ST_TO_ADDR
// if engs and buildings then
11330: LD_VAR 0 2
11334: PUSH
11335: LD_VAR 0 3
11339: AND
11340: IFFALSE 11413
// begin for i in engs do
11342: LD_ADDR_VAR 0 5
11346: PUSH
11347: LD_VAR 0 2
11351: PUSH
11352: FOR_IN
11353: IFFALSE 11409
// if IsInUnit ( i ) then
11355: LD_VAR 0 5
11359: PPUSH
11360: CALL_OW 310
11364: IFFALSE 11377
// ComExitBuilding ( i ) else
11366: LD_VAR 0 5
11370: PPUSH
11371: CALL_OW 122
11375: GO 11407
// if not HasTask ( i ) then
11377: LD_VAR 0 5
11381: PPUSH
11382: CALL_OW 314
11386: NOT
11387: IFFALSE 11407
// ComRepairBuilding ( i , buildings [ 1 ] ) ;
11389: LD_VAR 0 5
11393: PPUSH
11394: LD_VAR 0 3
11398: PUSH
11399: LD_INT 1
11401: ARRAY
11402: PPUSH
11403: CALL_OW 130
11407: GO 11352
11409: POP
11410: POP
// end else
11411: GO 11516
// if not buildings and UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) and UnitFilter ( engs , [ f_not , [ f_inside ] ] ) then
11413: LD_VAR 0 3
11417: NOT
11418: PUSH
11419: LD_EXP 14
11423: PPUSH
11424: LD_INT 30
11426: PUSH
11427: LD_INT 0
11429: PUSH
11430: EMPTY
11431: LIST
11432: LIST
11433: PPUSH
11434: CALL_OW 72
11438: AND
11439: PUSH
11440: LD_VAR 0 2
11444: PPUSH
11445: LD_INT 3
11447: PUSH
11448: LD_INT 54
11450: PUSH
11451: EMPTY
11452: LIST
11453: PUSH
11454: EMPTY
11455: LIST
11456: LIST
11457: PPUSH
11458: CALL_OW 72
11462: AND
11463: IFFALSE 11516
// ComEnterUnit ( UnitFilter ( engs , [ f_not , [ f_inside ] ] ) , UnitFilter ( ruOutpost , [ f_btype , b_depot ] ) [ 1 ] ) ;
11465: LD_VAR 0 2
11469: PPUSH
11470: LD_INT 3
11472: PUSH
11473: LD_INT 54
11475: PUSH
11476: EMPTY
11477: LIST
11478: PUSH
11479: EMPTY
11480: LIST
11481: LIST
11482: PPUSH
11483: CALL_OW 72
11487: PPUSH
11488: LD_EXP 14
11492: PPUSH
11493: LD_INT 30
11495: PUSH
11496: LD_INT 0
11498: PUSH
11499: EMPTY
11500: LIST
11501: LIST
11502: PPUSH
11503: CALL_OW 72
11507: PUSH
11508: LD_INT 1
11510: ARRAY
11511: PPUSH
11512: CALL_OW 120
// if not tmp then
11516: LD_VAR 0 1
11520: NOT
11521: IFFALSE 11525
// exit ;
11523: GO 11834
// if FilterUnitsInArea ( ruOutpostArea , [ f_enemy , 3 ] ) > 1 then
11525: LD_INT 25
11527: PPUSH
11528: LD_INT 81
11530: PUSH
11531: LD_INT 3
11533: PUSH
11534: EMPTY
11535: LIST
11536: LIST
11537: PPUSH
11538: CALL_OW 70
11542: PUSH
11543: LD_INT 1
11545: GREATER
11546: IFFALSE 11602
// begin for i in tmp do
11548: LD_ADDR_VAR 0 5
11552: PUSH
11553: LD_VAR 0 1
11557: PUSH
11558: FOR_IN
11559: IFFALSE 11598
// begin if IsInUnit ( i ) then
11561: LD_VAR 0 5
11565: PPUSH
11566: CALL_OW 310
11570: IFFALSE 11581
// ComExitBuilding ( i ) ;
11572: LD_VAR 0 5
11576: PPUSH
11577: CALL_OW 122
// AddComAgressiveMove ( i , 204 , 164 ) ;
11581: LD_VAR 0 5
11585: PPUSH
11586: LD_INT 204
11588: PPUSH
11589: LD_INT 164
11591: PPUSH
11592: CALL_OW 174
// end ;
11596: GO 11558
11598: POP
11599: POP
// end else
11600: GO 11834
// if UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) then
11602: LD_VAR 0 1
11606: PPUSH
11607: LD_INT 3
11609: PUSH
11610: LD_INT 54
11612: PUSH
11613: EMPTY
11614: LIST
11615: PUSH
11616: EMPTY
11617: LIST
11618: LIST
11619: PPUSH
11620: CALL_OW 72
11624: IFFALSE 11834
// begin empty := UnitFilter ( ruOutpost , [ [ f_btype , b_bunker ] , [ f_empty ] ] ) ;
11626: LD_ADDR_VAR 0 4
11630: PUSH
11631: LD_EXP 14
11635: PPUSH
11636: LD_INT 30
11638: PUSH
11639: LD_INT 32
11641: PUSH
11642: EMPTY
11643: LIST
11644: LIST
11645: PUSH
11646: LD_INT 58
11648: PUSH
11649: EMPTY
11650: LIST
11651: PUSH
11652: EMPTY
11653: LIST
11654: LIST
11655: PPUSH
11656: CALL_OW 72
11660: ST_TO_ADDR
// if not empty and UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) then
11661: LD_VAR 0 4
11665: NOT
11666: PUSH
11667: LD_EXP 14
11671: PPUSH
11672: LD_INT 30
11674: PUSH
11675: LD_INT 5
11677: PUSH
11678: EMPTY
11679: LIST
11680: LIST
11681: PPUSH
11682: CALL_OW 72
11686: AND
11687: IFFALSE 11724
// begin ComEnterUnit ( tmp , UnitFilter ( ruOutpost , [ f_btype , b_barracks ] ) [ 1 ] ) ;
11689: LD_VAR 0 1
11693: PPUSH
11694: LD_EXP 14
11698: PPUSH
11699: LD_INT 30
11701: PUSH
11702: LD_INT 5
11704: PUSH
11705: EMPTY
11706: LIST
11707: LIST
11708: PPUSH
11709: CALL_OW 72
11713: PUSH
11714: LD_INT 1
11716: ARRAY
11717: PPUSH
11718: CALL_OW 120
// exit ;
11722: GO 11834
// end ; j := UnitFilter ( tmp , [ f_not , [ f_inside ] ] ) ;
11724: LD_ADDR_VAR 0 6
11728: PUSH
11729: LD_VAR 0 1
11733: PPUSH
11734: LD_INT 3
11736: PUSH
11737: LD_INT 54
11739: PUSH
11740: EMPTY
11741: LIST
11742: PUSH
11743: EMPTY
11744: LIST
11745: LIST
11746: PPUSH
11747: CALL_OW 72
11751: ST_TO_ADDR
// if j < empty then
11752: LD_VAR 0 6
11756: PUSH
11757: LD_VAR 0 4
11761: LESS
11762: IFFALSE 11776
// k := j else
11764: LD_ADDR_VAR 0 7
11768: PUSH
11769: LD_VAR 0 6
11773: ST_TO_ADDR
11774: GO 11786
// k := empty ;
11776: LD_ADDR_VAR 0 7
11780: PUSH
11781: LD_VAR 0 4
11785: ST_TO_ADDR
// for i = 1 to k do
11786: LD_ADDR_VAR 0 5
11790: PUSH
11791: DOUBLE
11792: LD_INT 1
11794: DEC
11795: ST_TO_ADDR
11796: LD_VAR 0 7
11800: PUSH
11801: FOR_TO
11802: IFFALSE 11832
// ComEnterUnit ( j [ i ] , empty [ i ] ) ;
11804: LD_VAR 0 6
11808: PUSH
11809: LD_VAR 0 5
11813: ARRAY
11814: PPUSH
11815: LD_VAR 0 4
11819: PUSH
11820: LD_VAR 0 5
11824: ARRAY
11825: PPUSH
11826: CALL_OW 120
11830: GO 11801
11832: POP
11833: POP
// end ; end ;
11834: PPOPN 7
11836: END
// every 0 0$2 trigger GameType = 1 and outpostEscape and FilterAllUnits ( [ [ f_side , 1 ] , [ f_distxy , 208 , 163 , 8 ] ] ) and not FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] , [ f_distxy , 208 , 163 , 14 ] ] ) do var i ;
11837: LD_EXP 2
11841: PUSH
11842: LD_INT 1
11844: EQUAL
11845: PUSH
11846: LD_EXP 27
11850: AND
11851: PUSH
11852: LD_INT 22
11854: PUSH
11855: LD_INT 1
11857: PUSH
11858: EMPTY
11859: LIST
11860: LIST
11861: PUSH
11862: LD_INT 92
11864: PUSH
11865: LD_INT 208
11867: PUSH
11868: LD_INT 163
11870: PUSH
11871: LD_INT 8
11873: PUSH
11874: EMPTY
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: PUSH
11880: EMPTY
11881: LIST
11882: LIST
11883: PPUSH
11884: CALL_OW 69
11888: AND
11889: PUSH
11890: LD_INT 22
11892: PUSH
11893: LD_INT 3
11895: PUSH
11896: EMPTY
11897: LIST
11898: LIST
11899: PUSH
11900: LD_INT 21
11902: PUSH
11903: LD_INT 1
11905: PUSH
11906: EMPTY
11907: LIST
11908: LIST
11909: PUSH
11910: LD_INT 92
11912: PUSH
11913: LD_INT 208
11915: PUSH
11916: LD_INT 163
11918: PUSH
11919: LD_INT 14
11921: PUSH
11922: EMPTY
11923: LIST
11924: LIST
11925: LIST
11926: LIST
11927: PUSH
11928: EMPTY
11929: LIST
11930: LIST
11931: LIST
11932: PPUSH
11933: CALL_OW 69
11937: NOT
11938: AND
11939: IFFALSE 12184
11941: GO 11943
11943: DISABLE
11944: LD_INT 0
11946: PPUSH
// begin InGameOn ;
11947: CALL_OW 8
// CenterNowOnUnits ( playerCommander ) ;
11951: LD_EXP 9
11955: PPUSH
11956: CALL_OW 87
// wait ( 0 0$1 ) ;
11960: LD_INT 35
11962: PPUSH
11963: CALL_OW 67
// DialogueOn ;
11967: CALL_OW 6
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-BaseCaptured ) ;
11971: LD_EXP 9
11975: PPUSH
11976: LD_STRING D
11978: PUSH
11979: LD_STRING I
11981: PUSH
11982: LD_STRING J
11984: PUSH
11985: LD_STRING S
11987: PUSH
11988: EMPTY
11989: LIST
11990: LIST
11991: LIST
11992: PUSH
11993: LD_EXP 25
11997: ARRAY
11998: STR
11999: PUSH
12000: LD_STRING -1-BaseCaptured
12002: STR
12003: PPUSH
12004: CALL_OW 88
// SayRadio ( Powell , DP-1-BaseCaptured ) ;
12008: LD_EXP 12
12012: PPUSH
12013: LD_STRING DP-1-BaseCaptured
12015: PPUSH
12016: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-BaseCaptured ) ;
12020: LD_EXP 9
12024: PPUSH
12025: LD_STRING D
12027: PUSH
12028: LD_STRING I
12030: PUSH
12031: LD_STRING J
12033: PUSH
12034: LD_STRING S
12036: PUSH
12037: EMPTY
12038: LIST
12039: LIST
12040: LIST
12041: PUSH
12042: LD_EXP 25
12046: ARRAY
12047: STR
12048: PUSH
12049: LD_STRING -2-BaseCaptured
12051: STR
12052: PPUSH
12053: CALL_OW 88
// SayRadio ( Powell , DP-2-BaseCaptured ) ;
12057: LD_EXP 12
12061: PPUSH
12062: LD_STRING DP-2-BaseCaptured
12064: PPUSH
12065: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -3-BaseCaptured ) ;
12069: LD_EXP 9
12073: PPUSH
12074: LD_STRING D
12076: PUSH
12077: LD_STRING I
12079: PUSH
12080: LD_STRING J
12082: PUSH
12083: LD_STRING S
12085: PUSH
12086: EMPTY
12087: LIST
12088: LIST
12089: LIST
12090: PUSH
12091: LD_EXP 25
12095: ARRAY
12096: STR
12097: PUSH
12098: LD_STRING -3-BaseCaptured
12100: STR
12101: PPUSH
12102: CALL_OW 88
// DialogueOff ;
12106: CALL_OW 7
// InGameOff ;
12110: CALL_OW 9
// ChangeMissionObjectives ( O2 ) ;
12114: LD_STRING O2
12116: PPUSH
12117: CALL_OW 337
// for i in UnitFilter ( ruOutpost , [ f_type , unit_building ] ) do
12121: LD_ADDR_VAR 0 1
12125: PUSH
12126: LD_EXP 14
12130: PPUSH
12131: LD_INT 21
12133: PUSH
12134: LD_INT 3
12136: PUSH
12137: EMPTY
12138: LIST
12139: LIST
12140: PPUSH
12141: CALL_OW 72
12145: PUSH
12146: FOR_IN
12147: IFFALSE 12163
// SetSide ( i , 1 ) ;
12149: LD_VAR 0 1
12153: PPUSH
12154: LD_INT 1
12156: PPUSH
12157: CALL_OW 235
12161: GO 12146
12163: POP
12164: POP
// baseCaptured := true ;
12165: LD_ADDR_EXP 17
12169: PUSH
12170: LD_INT 1
12172: ST_TO_ADDR
// wait ( 0 0$35 ) ;
12173: LD_INT 1225
12175: PPUSH
12176: CALL_OW 67
// PrepareReinforcements ;
12180: CALL 9323 0 0
// end ;
12184: PPOPN 1
12186: END
// every 0 0$2 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_distxy , 167 , 197 , 20 ] ] ) > 3 do
12187: LD_INT 22
12189: PUSH
12190: LD_INT 3
12192: PUSH
12193: EMPTY
12194: LIST
12195: LIST
12196: PUSH
12197: LD_INT 92
12199: PUSH
12200: LD_INT 167
12202: PUSH
12203: LD_INT 197
12205: PUSH
12206: LD_INT 20
12208: PUSH
12209: EMPTY
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: PUSH
12215: EMPTY
12216: LIST
12217: LIST
12218: PPUSH
12219: CALL_OW 69
12223: PUSH
12224: LD_INT 3
12226: GREATER
12227: IFFALSE 12244
12229: GO 12231
12231: DISABLE
// begin SayRadio ( Powell , DP-RuAttack ) ;
12232: LD_EXP 12
12236: PPUSH
12237: LD_STRING DP-RuAttack
12239: PPUSH
12240: CALL_OW 94
// end ;
12244: END
// every 0 0$2 trigger SeeXY ( 1 , 168 , 74 ) and GetEnvironmentType ( 168 , 72 ) do
12245: LD_INT 1
12247: PPUSH
12248: LD_INT 168
12250: PPUSH
12251: LD_INT 74
12253: PPUSH
12254: CALL_OW 293
12258: PUSH
12259: LD_INT 168
12261: PPUSH
12262: LD_INT 72
12264: PPUSH
12265: CALL_OW 553
12269: AND
12270: IFFALSE 12322
12272: GO 12274
12274: DISABLE
// begin CenterOnXY ( 168 , 72 ) ;
12275: LD_INT 168
12277: PPUSH
12278: LD_INT 72
12280: PPUSH
12281: CALL_OW 84
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Blockade ) ;
12285: LD_EXP 9
12289: PPUSH
12290: LD_STRING D
12292: PUSH
12293: LD_STRING I
12295: PUSH
12296: LD_STRING J
12298: PUSH
12299: LD_STRING S
12301: PUSH
12302: EMPTY
12303: LIST
12304: LIST
12305: LIST
12306: PUSH
12307: LD_EXP 25
12311: ARRAY
12312: STR
12313: PUSH
12314: LD_STRING -1-Blockade
12316: STR
12317: PPUSH
12318: CALL_OW 88
// end ;
12322: END
// every 0 0$2 trigger GameType = 1 and FilterAllUnits ( [ [ f_side , 1 ] , [ f_see , 4 ] ] ) do
12323: LD_EXP 2
12327: PUSH
12328: LD_INT 1
12330: EQUAL
12331: PUSH
12332: LD_INT 22
12334: PUSH
12335: LD_INT 1
12337: PUSH
12338: EMPTY
12339: LIST
12340: LIST
12341: PUSH
12342: LD_INT 101
12344: PUSH
12345: LD_INT 4
12347: PUSH
12348: EMPTY
12349: LIST
12350: LIST
12351: PUSH
12352: EMPTY
12353: LIST
12354: LIST
12355: PPUSH
12356: CALL_OW 69
12360: AND
12361: IFFALSE 12755
12363: GO 12365
12365: DISABLE
// begin ChangeSideFog ( 4 , 1 ) ;
12366: LD_INT 4
12368: PPUSH
12369: LD_INT 1
12371: PPUSH
12372: CALL_OW 343
// DialogueOn ;
12376: CALL_OW 6
// CenterNowOnUnits ( allyCommander ) ;
12380: LD_EXP 11
12384: PPUSH
12385: CALL_OW 87
// SayRadio ( allyCommander , DM-1-Contact ) ;
12389: LD_EXP 11
12393: PPUSH
12394: LD_STRING DM-1-Contact
12396: PPUSH
12397: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Contact ) ;
12401: LD_EXP 9
12405: PPUSH
12406: LD_STRING D
12408: PUSH
12409: LD_STRING I
12411: PUSH
12412: LD_STRING J
12414: PUSH
12415: LD_STRING S
12417: PUSH
12418: EMPTY
12419: LIST
12420: LIST
12421: LIST
12422: PUSH
12423: LD_EXP 25
12427: ARRAY
12428: STR
12429: PUSH
12430: LD_STRING -1-Contact
12432: STR
12433: PPUSH
12434: CALL_OW 88
// if commander = 1 then
12438: LD_EXP 25
12442: PUSH
12443: LD_INT 1
12445: EQUAL
12446: IFFALSE 12532
// begin SayRadio ( allyCommander , DM-2-Contact ) ;
12448: LD_EXP 11
12452: PPUSH
12453: LD_STRING DM-2-Contact
12455: PPUSH
12456: CALL_OW 94
// Say ( playerCommander , DI-2-Contact ) ;
12460: LD_EXP 9
12464: PPUSH
12465: LD_STRING DI-2-Contact
12467: PPUSH
12468: CALL_OW 88
// SayRadio ( allyCommander , DM-3-Contact ) ;
12472: LD_EXP 11
12476: PPUSH
12477: LD_STRING DM-3-Contact
12479: PPUSH
12480: CALL_OW 94
// Say ( playerCommander , DI-3-Contact ) ;
12484: LD_EXP 9
12488: PPUSH
12489: LD_STRING DI-3-Contact
12491: PPUSH
12492: CALL_OW 88
// SayRadio ( allyCommander , DM-4-Contact ) ;
12496: LD_EXP 11
12500: PPUSH
12501: LD_STRING DM-4-Contact
12503: PPUSH
12504: CALL_OW 94
// Say ( playerCommander , DI-4-Contact ) ;
12508: LD_EXP 9
12512: PPUSH
12513: LD_STRING DI-4-Contact
12515: PPUSH
12516: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
12520: LD_EXP 11
12524: PPUSH
12525: LD_STRING DM-5-Contact
12527: PPUSH
12528: CALL_OW 94
// end ; if commander = 2 then
12532: LD_EXP 25
12536: PUSH
12537: LD_INT 2
12539: EQUAL
12540: IFFALSE 12626
// begin SayRadio ( allyCommander , DM-2c-Contact ) ;
12542: LD_EXP 11
12546: PPUSH
12547: LD_STRING DM-2c-Contact
12549: PPUSH
12550: CALL_OW 94
// Say ( playerCommander , DJ-2-Contact ) ;
12554: LD_EXP 9
12558: PPUSH
12559: LD_STRING DJ-2-Contact
12561: PPUSH
12562: CALL_OW 88
// SayRadio ( allyCommander , DM-3-Contact ) ;
12566: LD_EXP 11
12570: PPUSH
12571: LD_STRING DM-3-Contact
12573: PPUSH
12574: CALL_OW 94
// Say ( playerCommander , DJ-3-Contact ) ;
12578: LD_EXP 9
12582: PPUSH
12583: LD_STRING DJ-3-Contact
12585: PPUSH
12586: CALL_OW 88
// SayRadio ( allyCommander , DM-4-Contact ) ;
12590: LD_EXP 11
12594: PPUSH
12595: LD_STRING DM-4-Contact
12597: PPUSH
12598: CALL_OW 94
// Say ( playerCommander , DJ-4-Contact ) ;
12602: LD_EXP 9
12606: PPUSH
12607: LD_STRING DJ-4-Contact
12609: PPUSH
12610: CALL_OW 88
// SayRadio ( allyCommander , DM-5a-Contact ) ;
12614: LD_EXP 11
12618: PPUSH
12619: LD_STRING DM-5a-Contact
12621: PPUSH
12622: CALL_OW 94
// end ; if commander = 3 then
12626: LD_EXP 25
12630: PUSH
12631: LD_INT 3
12633: EQUAL
12634: IFFALSE 12744
// begin SayRadio ( allyCommander , DM-2a-Contact ) ;
12636: LD_EXP 11
12640: PPUSH
12641: LD_STRING DM-2a-Contact
12643: PPUSH
12644: CALL_OW 94
// Say ( playerCommander , DS-2a-Contact ) ;
12648: LD_EXP 9
12652: PPUSH
12653: LD_STRING DS-2a-Contact
12655: PPUSH
12656: CALL_OW 88
// SayRadio ( allyCommander , DM-2b-Contact ) ;
12660: LD_EXP 11
12664: PPUSH
12665: LD_STRING DM-2b-Contact
12667: PPUSH
12668: CALL_OW 94
// Say ( playerCommander , DS-2b-Contact ) ;
12672: LD_EXP 9
12676: PPUSH
12677: LD_STRING DS-2b-Contact
12679: PPUSH
12680: CALL_OW 88
// SayRadio ( allyCommander , DM-3-Contact ) ;
12684: LD_EXP 11
12688: PPUSH
12689: LD_STRING DM-3-Contact
12691: PPUSH
12692: CALL_OW 94
// Say ( playerCommander , DS-3-Contact ) ;
12696: LD_EXP 9
12700: PPUSH
12701: LD_STRING DS-3-Contact
12703: PPUSH
12704: CALL_OW 88
// SayRadio ( allyCommander , DM-4-Contact ) ;
12708: LD_EXP 11
12712: PPUSH
12713: LD_STRING DM-4-Contact
12715: PPUSH
12716: CALL_OW 94
// Say ( playerCommander , DS-4-Contact ) ;
12720: LD_EXP 9
12724: PPUSH
12725: LD_STRING DS-4-Contact
12727: PPUSH
12728: CALL_OW 88
// SayRadio ( allyCommander , DM-5-Contact ) ;
12732: LD_EXP 11
12736: PPUSH
12737: LD_STRING DM-5-Contact
12739: PPUSH
12740: CALL_OW 94
// end ; DialogueOff ;
12744: CALL_OW 7
// ChangeMissionObjectives ( O3 ) ;
12748: LD_STRING O3
12750: PPUSH
12751: CALL_OW 337
// end ;
12755: END
// every 0 0$10 trigger GameType = 1 and legDestCounter >= [ 15 , 20 , 25 ] [ Difficulty ] and FilterAllUnits ( [ [ f_side , 8 ] , [ f_btype , b_warehouse ] ] ) and FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_building ] ] ) >= 5 do var time , sib , sources , i ;
12756: LD_EXP 2
12760: PUSH
12761: LD_INT 1
12763: EQUAL
12764: PUSH
12765: LD_EXP 18
12769: PUSH
12770: LD_INT 15
12772: PUSH
12773: LD_INT 20
12775: PUSH
12776: LD_INT 25
12778: PUSH
12779: EMPTY
12780: LIST
12781: LIST
12782: LIST
12783: PUSH
12784: LD_OWVAR 67
12788: ARRAY
12789: GREATEREQUAL
12790: AND
12791: PUSH
12792: LD_INT 22
12794: PUSH
12795: LD_INT 8
12797: PUSH
12798: EMPTY
12799: LIST
12800: LIST
12801: PUSH
12802: LD_INT 30
12804: PUSH
12805: LD_INT 1
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: PUSH
12812: EMPTY
12813: LIST
12814: LIST
12815: PPUSH
12816: CALL_OW 69
12820: AND
12821: PUSH
12822: LD_INT 22
12824: PUSH
12825: LD_INT 8
12827: PUSH
12828: EMPTY
12829: LIST
12830: LIST
12831: PUSH
12832: LD_INT 21
12834: PUSH
12835: LD_INT 3
12837: PUSH
12838: EMPTY
12839: LIST
12840: LIST
12841: PUSH
12842: EMPTY
12843: LIST
12844: LIST
12845: PPUSH
12846: CALL_OW 69
12850: PUSH
12851: LD_INT 5
12853: GREATEREQUAL
12854: AND
12855: IFFALSE 13378
12857: GO 12859
12859: DISABLE
12860: LD_INT 0
12862: PPUSH
12863: PPUSH
12864: PPUSH
12865: PPUSH
// begin DialogueOn ;
12866: CALL_OW 6
// SayRadio ( Farmer , DF-1-Leg ) ;
12870: LD_EXP 13
12874: PPUSH
12875: LD_STRING DF-1-Leg
12877: PPUSH
12878: CALL_OW 94
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Leg ) ;
12882: LD_EXP 9
12886: PPUSH
12887: LD_STRING D
12889: PUSH
12890: LD_STRING I
12892: PUSH
12893: LD_STRING J
12895: PUSH
12896: LD_STRING S
12898: PUSH
12899: EMPTY
12900: LIST
12901: LIST
12902: LIST
12903: PUSH
12904: LD_EXP 25
12908: ARRAY
12909: STR
12910: PUSH
12911: LD_STRING -1-Leg
12913: STR
12914: PPUSH
12915: CALL_OW 88
// SayRadio ( Farmer , DF-2-Leg ) ;
12919: LD_EXP 13
12923: PPUSH
12924: LD_STRING DF-2-Leg
12926: PPUSH
12927: CALL_OW 94
// DialogueOff ;
12931: CALL_OW 7
// case Query ( QLegionOffer ) of 1 :
12935: LD_STRING QLegionOffer
12937: PPUSH
12938: CALL_OW 97
12942: PUSH
12943: LD_INT 1
12945: DOUBLE
12946: EQUAL
12947: IFTRUE 12951
12949: GO 12954
12951: POP
// ; 2 :
12952: GO 12968
12954: LD_INT 2
12956: DOUBLE
12957: EQUAL
12958: IFTRUE 12962
12960: GO 12967
12962: POP
// exit ; end ;
12963: GO 13378
12965: GO 12968
12967: POP
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -2-Leg ) ;
12968: LD_EXP 9
12972: PPUSH
12973: LD_STRING D
12975: PUSH
12976: LD_STRING I
12978: PUSH
12979: LD_STRING J
12981: PUSH
12982: LD_STRING S
12984: PUSH
12985: EMPTY
12986: LIST
12987: LIST
12988: LIST
12989: PUSH
12990: LD_EXP 25
12994: ARRAY
12995: STR
12996: PUSH
12997: LD_STRING -2-Leg
12999: STR
13000: PPUSH
13001: CALL_OW 88
// legOfferAccepted := true ;
13005: LD_ADDR_EXP 20
13009: PUSH
13010: LD_INT 1
13012: ST_TO_ADDR
// SetAreaMapShow ( legOfferArea , 1 ) ;
13013: LD_INT 21
13015: PPUSH
13016: LD_INT 1
13018: PPUSH
13019: CALL_OW 424
// CenterOnXY ( 190 , 227 ) ;
13023: LD_INT 190
13025: PPUSH
13026: LD_INT 227
13028: PPUSH
13029: CALL_OW 84
// time := [ 8 8$00 , 7 7$00 , 6 6$00 ] [ Difficulty ] ;
13033: LD_ADDR_VAR 0 1
13037: PUSH
13038: LD_INT 16800
13040: PUSH
13041: LD_INT 14700
13043: PUSH
13044: LD_INT 12600
13046: PUSH
13047: EMPTY
13048: LIST
13049: LIST
13050: LIST
13051: PUSH
13052: LD_OWVAR 67
13056: ARRAY
13057: ST_TO_ADDR
// sib := 100 ;
13058: LD_ADDR_VAR 0 2
13062: PUSH
13063: LD_INT 100
13065: ST_TO_ADDR
// disableGlobalTimer := true ;
13066: LD_ADDR_EXP 4
13070: PUSH
13071: LD_INT 1
13073: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
13074: LD_INT 35
13076: PPUSH
13077: CALL_OW 67
// time := time - 0 0$1 ;
13081: LD_ADDR_VAR 0 1
13085: PUSH
13086: LD_VAR 0 1
13090: PUSH
13091: LD_INT 35
13093: MINUS
13094: ST_TO_ADDR
// sources := GetResourceArea ( legOfferArea , mat_siberit ) ;
13095: LD_ADDR_VAR 0 3
13099: PUSH
13100: LD_INT 21
13102: PPUSH
13103: LD_INT 3
13105: PPUSH
13106: CALL_OW 287
13110: ST_TO_ADDR
// display_strings := [ #SkrTime , tick , #Skr-LegOffer , sib , time ] ;
13111: LD_ADDR_OWVAR 47
13115: PUSH
13116: LD_STRING #SkrTime
13118: PUSH
13119: LD_OWVAR 1
13123: PUSH
13124: LD_STRING #Skr-LegOffer
13126: PUSH
13127: LD_VAR 0 2
13131: PUSH
13132: LD_VAR 0 1
13136: PUSH
13137: EMPTY
13138: LIST
13139: LIST
13140: LIST
13141: LIST
13142: LIST
13143: ST_TO_ADDR
// if sources then
13144: LD_VAR 0 3
13148: IFFALSE 13180
// begin sib := sib - sources * 10 ;
13150: LD_ADDR_VAR 0 2
13154: PUSH
13155: LD_VAR 0 2
13159: PUSH
13160: LD_VAR 0 3
13164: PUSH
13165: LD_INT 10
13167: MUL
13168: MINUS
13169: ST_TO_ADDR
// EraseResourceArea ( legOfferArea , mat_siberit ) ;
13170: LD_INT 21
13172: PPUSH
13173: LD_INT 3
13175: PPUSH
13176: CALL_OW 286
// end ; until time = 0 0$00 or sib <= 0 or not FilterAllUnits ( [ f_side , 8 ] ) ;
13180: LD_VAR 0 1
13184: PUSH
13185: LD_INT 0
13187: EQUAL
13188: PUSH
13189: LD_VAR 0 2
13193: PUSH
13194: LD_INT 0
13196: LESSEQUAL
13197: OR
13198: PUSH
13199: LD_INT 22
13201: PUSH
13202: LD_INT 8
13204: PUSH
13205: EMPTY
13206: LIST
13207: LIST
13208: PPUSH
13209: CALL_OW 69
13213: NOT
13214: OR
13215: IFFALSE 13074
// SetAreaMapShow ( legOfferArea , 0 ) ;
13217: LD_INT 21
13219: PPUSH
13220: LD_INT 0
13222: PPUSH
13223: CALL_OW 424
// disableGlobalTimer := false ;
13227: LD_ADDR_EXP 4
13231: PUSH
13232: LD_INT 0
13234: ST_TO_ADDR
// if sib <= 0 then
13235: LD_VAR 0 2
13239: PUSH
13240: LD_INT 0
13242: LESSEQUAL
13243: IFFALSE 13359
// begin legChangeSide := true ;
13245: LD_ADDR_EXP 21
13249: PUSH
13250: LD_INT 1
13252: ST_TO_ADDR
// SayRadio ( Farmer , DF-4y-Leg ) ;
13253: LD_EXP 13
13257: PPUSH
13258: LD_STRING DF-4y-Leg
13260: PPUSH
13261: CALL_OW 94
// ChangeMissionObjectives ( O3a ) ;
13265: LD_STRING O3a
13267: PPUSH
13268: CALL_OW 337
// ChangeSideFog ( 8 , 1 ) ;
13272: LD_INT 8
13274: PPUSH
13275: LD_INT 1
13277: PPUSH
13278: CALL_OW 343
// SetAttitude ( 8 , 1 , att_friend , true ) ;
13282: LD_INT 8
13284: PPUSH
13285: LD_INT 1
13287: PPUSH
13288: LD_INT 1
13290: PPUSH
13291: LD_INT 1
13293: PPUSH
13294: CALL_OW 80
// SetAttitude ( 8 , 4 , att_friend , true ) ;
13298: LD_INT 8
13300: PPUSH
13301: LD_INT 4
13303: PPUSH
13304: LD_INT 1
13306: PPUSH
13307: LD_INT 1
13309: PPUSH
13310: CALL_OW 80
// SetAttitude ( 8 , 6 , att_enemy , true ) ;
13314: LD_INT 8
13316: PPUSH
13317: LD_INT 6
13319: PPUSH
13320: LD_INT 2
13322: PPUSH
13323: LD_INT 1
13325: PPUSH
13326: CALL_OW 80
// SetAttitude ( 8 , 3 , att_enemy , true ) ;
13330: LD_INT 8
13332: PPUSH
13333: LD_INT 3
13335: PPUSH
13336: LD_INT 2
13338: PPUSH
13339: LD_INT 1
13341: PPUSH
13342: CALL_OW 80
// wait ( 0 0$30 ) ;
13346: LD_INT 1050
13348: PPUSH
13349: CALL_OW 67
// PrepareLegionReinforcements ;
13353: CALL 10023 0 0
// end else
13357: GO 13378
// begin ChangeMissionObjectives ( O3a ) ;
13359: LD_STRING O3a
13361: PPUSH
13362: CALL_OW 337
// SayRadio ( Farmer , DF-4n-Leg ) ;
13366: LD_EXP 13
13370: PPUSH
13371: LD_STRING DF-4n-Leg
13373: PPUSH
13374: CALL_OW 94
// end ; end ;
13378: PPOPN 4
13380: END
// every 0 0$1 trigger GameType = 1 and game and FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_human ] ] ) = 0 and FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_warehouse ] ] ) = 0 do
13381: LD_EXP 2
13385: PUSH
13386: LD_INT 1
13388: EQUAL
13389: PUSH
13390: LD_EXP 3
13394: AND
13395: PUSH
13396: LD_INT 22
13398: PUSH
13399: LD_INT 3
13401: PUSH
13402: EMPTY
13403: LIST
13404: LIST
13405: PUSH
13406: LD_INT 21
13408: PUSH
13409: LD_INT 1
13411: PUSH
13412: EMPTY
13413: LIST
13414: LIST
13415: PUSH
13416: EMPTY
13417: LIST
13418: LIST
13419: PPUSH
13420: CALL_OW 69
13424: PUSH
13425: LD_INT 0
13427: EQUAL
13428: AND
13429: PUSH
13430: LD_INT 22
13432: PUSH
13433: LD_INT 3
13435: PUSH
13436: EMPTY
13437: LIST
13438: LIST
13439: PUSH
13440: LD_INT 30
13442: PUSH
13443: LD_INT 1
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: PUSH
13450: EMPTY
13451: LIST
13452: LIST
13453: PPUSH
13454: CALL_OW 69
13458: PUSH
13459: LD_INT 0
13461: EQUAL
13462: AND
13463: IFFALSE 13707
13465: GO 13467
13467: DISABLE
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Win ) ;
13468: LD_EXP 9
13472: PPUSH
13473: LD_STRING D
13475: PUSH
13476: LD_STRING I
13478: PUSH
13479: LD_STRING J
13481: PUSH
13482: LD_STRING S
13484: PUSH
13485: EMPTY
13486: LIST
13487: LIST
13488: LIST
13489: PUSH
13490: LD_EXP 25
13494: ARRAY
13495: STR
13496: PUSH
13497: LD_STRING -1-Win
13499: STR
13500: PPUSH
13501: CALL_OW 88
// if tick >= [ 150 150$0 , 130 130$0 , 110 110$0 ] [ Difficulty ] then
13505: LD_OWVAR 1
13509: PUSH
13510: LD_INT 315000
13512: PUSH
13513: LD_INT 273000
13515: PUSH
13516: LD_INT 231000
13518: PUSH
13519: EMPTY
13520: LIST
13521: LIST
13522: LIST
13523: PUSH
13524: LD_OWVAR 67
13528: ARRAY
13529: GREATEREQUAL
13530: IFFALSE 13545
// AddMedal ( med1 , - 1 ) else
13532: LD_STRING med1
13534: PPUSH
13535: LD_INT 1
13537: NEG
13538: PPUSH
13539: CALL_OW 101
13543: GO 13555
// AddMedal ( med1 , 1 ) ;
13545: LD_STRING med1
13547: PPUSH
13548: LD_INT 1
13550: PPUSH
13551: CALL_OW 101
// if allyDestCounter >= [ 20 , 15 , 10 ] [ Difficulty ] then
13555: LD_EXP 22
13559: PUSH
13560: LD_INT 20
13562: PUSH
13563: LD_INT 15
13565: PUSH
13566: LD_INT 10
13568: PUSH
13569: EMPTY
13570: LIST
13571: LIST
13572: LIST
13573: PUSH
13574: LD_OWVAR 67
13578: ARRAY
13579: GREATEREQUAL
13580: IFFALSE 13595
// AddMedal ( med2 , - 1 ) else
13582: LD_STRING med2
13584: PPUSH
13585: LD_INT 1
13587: NEG
13588: PPUSH
13589: CALL_OW 101
13593: GO 13605
// AddMedal ( med2 , 1 ) ;
13595: LD_STRING med2
13597: PPUSH
13598: LD_INT 1
13600: PPUSH
13601: CALL_OW 101
// if legChangeSide and GetAttitude ( 8 , 1 ) = att_friend then
13605: LD_EXP 21
13609: PUSH
13610: LD_INT 8
13612: PPUSH
13613: LD_INT 1
13615: PPUSH
13616: CALL_OW 81
13620: PUSH
13621: LD_INT 1
13623: EQUAL
13624: AND
13625: IFFALSE 13639
// AddMedal ( med3 , 2 ) else
13627: LD_STRING med3
13629: PPUSH
13630: LD_INT 2
13632: PPUSH
13633: CALL_OW 101
13637: GO 13696
// if FilterAllUnits ( [ [ f_side , 8 ] , [ f_type , unit_human ] ] ) = 0 then
13639: LD_INT 22
13641: PUSH
13642: LD_INT 8
13644: PUSH
13645: EMPTY
13646: LIST
13647: LIST
13648: PUSH
13649: LD_INT 21
13651: PUSH
13652: LD_INT 1
13654: PUSH
13655: EMPTY
13656: LIST
13657: LIST
13658: PUSH
13659: EMPTY
13660: LIST
13661: LIST
13662: PPUSH
13663: CALL_OW 69
13667: PUSH
13668: LD_INT 0
13670: EQUAL
13671: IFFALSE 13685
// AddMedal ( med3 , 1 ) else
13673: LD_STRING med3
13675: PPUSH
13676: LD_INT 1
13678: PPUSH
13679: CALL_OW 101
13683: GO 13696
// AddMedal ( med3 , - 1 ) ;
13685: LD_STRING med3
13687: PPUSH
13688: LD_INT 1
13690: NEG
13691: PPUSH
13692: CALL_OW 101
// GiveMedals ( MAIN ) ;
13696: LD_STRING MAIN
13698: PPUSH
13699: CALL_OW 102
// YouWin ;
13703: CALL_OW 103
// end ;
13707: END
// every 10 trigger GameType = 1 and staticMines and FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) do var i , j , tmp , x , y ;
13708: LD_EXP 2
13712: PUSH
13713: LD_INT 1
13715: EQUAL
13716: PUSH
13717: LD_EXP 16
13721: AND
13722: PUSH
13723: LD_INT 20
13725: PPUSH
13726: LD_INT 81
13728: PUSH
13729: LD_INT 8
13731: PUSH
13732: EMPTY
13733: LIST
13734: LIST
13735: PPUSH
13736: CALL_OW 70
13740: AND
13741: IFFALSE 14020
13743: GO 13745
13745: DISABLE
13746: LD_INT 0
13748: PPUSH
13749: PPUSH
13750: PPUSH
13751: PPUSH
13752: PPUSH
// begin enable ;
13753: ENABLE
// tmp := FilterUnitsInArea ( minesArea , [ f_enemy , 8 ] ) ;
13754: LD_ADDR_VAR 0 3
13758: PUSH
13759: LD_INT 20
13761: PPUSH
13762: LD_INT 81
13764: PUSH
13765: LD_INT 8
13767: PUSH
13768: EMPTY
13769: LIST
13770: LIST
13771: PPUSH
13772: CALL_OW 70
13776: ST_TO_ADDR
// if not tmp then
13777: LD_VAR 0 3
13781: NOT
13782: IFFALSE 13786
// exit ;
13784: GO 14020
// for i in tmp do
13786: LD_ADDR_VAR 0 1
13790: PUSH
13791: LD_VAR 0 3
13795: PUSH
13796: FOR_IN
13797: IFFALSE 14018
// begin x := GetX ( i ) ;
13799: LD_ADDR_VAR 0 4
13803: PUSH
13804: LD_VAR 0 1
13808: PPUSH
13809: CALL_OW 250
13813: ST_TO_ADDR
// y := GetY ( i ) ;
13814: LD_ADDR_VAR 0 5
13818: PUSH
13819: LD_VAR 0 1
13823: PPUSH
13824: CALL_OW 251
13828: ST_TO_ADDR
// if MineAtPos ( x , y ) then
13829: LD_VAR 0 4
13833: PPUSH
13834: LD_VAR 0 5
13838: PPUSH
13839: CALL_OW 458
13843: IFFALSE 14016
// begin LaunchMineAtPos ( x , y , 8 ) ;
13845: LD_VAR 0 4
13849: PPUSH
13850: LD_VAR 0 5
13854: PPUSH
13855: LD_INT 8
13857: PPUSH
13858: CALL_OW 456
// if not dialogueMineDetected then
13862: LD_EXP 28
13866: NOT
13867: IFFALSE 13928
// begin CenterNowOnXY ( x , y ) ;
13869: LD_VAR 0 4
13873: PPUSH
13874: LD_VAR 0 5
13878: PPUSH
13879: CALL_OW 86
// Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Mine ) ;
13883: LD_EXP 9
13887: PPUSH
13888: LD_STRING D
13890: PUSH
13891: LD_STRING I
13893: PUSH
13894: LD_STRING J
13896: PUSH
13897: LD_STRING S
13899: PUSH
13900: EMPTY
13901: LIST
13902: LIST
13903: LIST
13904: PUSH
13905: LD_EXP 25
13909: ARRAY
13910: STR
13911: PUSH
13912: LD_STRING -1-Mine
13914: STR
13915: PPUSH
13916: CALL_OW 88
// dialogueMineDetected := true ;
13920: LD_ADDR_EXP 28
13924: PUSH
13925: LD_INT 1
13927: ST_TO_ADDR
// end ; for j = 1 to staticMines do
13928: LD_ADDR_VAR 0 2
13932: PUSH
13933: DOUBLE
13934: LD_INT 1
13936: DEC
13937: ST_TO_ADDR
13938: LD_EXP 16
13942: PUSH
13943: FOR_TO
13944: IFFALSE 14014
// if staticMines [ j ] [ 1 ] = x and staticMines [ j ] [ 2 ] = y then
13946: LD_EXP 16
13950: PUSH
13951: LD_VAR 0 2
13955: ARRAY
13956: PUSH
13957: LD_INT 1
13959: ARRAY
13960: PUSH
13961: LD_VAR 0 4
13965: EQUAL
13966: PUSH
13967: LD_EXP 16
13971: PUSH
13972: LD_VAR 0 2
13976: ARRAY
13977: PUSH
13978: LD_INT 2
13980: ARRAY
13981: PUSH
13982: LD_VAR 0 5
13986: EQUAL
13987: AND
13988: IFFALSE 14012
// begin staticMines := Delete ( staticMines , j ) ;
13990: LD_ADDR_EXP 16
13994: PUSH
13995: LD_EXP 16
13999: PPUSH
14000: LD_VAR 0 2
14004: PPUSH
14005: CALL_OW 3
14009: ST_TO_ADDR
// break ;
14010: GO 14014
// end ;
14012: GO 13943
14014: POP
14015: POP
// end ; end ;
14016: GO 13796
14018: POP
14019: POP
// end ;
14020: PPOPN 5
14022: END
// every 1 1$00 trigger GameType = 1 and game and UnitFilter ( mc_bases [ mc_rus_1 ] , [ f_btype , b_factory ] ) do var i , base , tmp , _target , _targetAlt , attackers , e ;
14023: LD_EXP 2
14027: PUSH
14028: LD_INT 1
14030: EQUAL
14031: PUSH
14032: LD_EXP 3
14036: AND
14037: PUSH
14038: LD_EXP 36
14042: PUSH
14043: LD_EXP 7
14047: ARRAY
14048: PPUSH
14049: LD_INT 30
14051: PUSH
14052: LD_INT 3
14054: PUSH
14055: EMPTY
14056: LIST
14057: LIST
14058: PPUSH
14059: CALL_OW 72
14063: AND
14064: IFFALSE 14768
14066: GO 14068
14068: DISABLE
14069: LD_INT 0
14071: PPUSH
14072: PPUSH
14073: PPUSH
14074: PPUSH
14075: PPUSH
14076: PPUSH
14077: PPUSH
// begin repeat wait ( 9 9$00 ) ;
14078: LD_INT 18900
14080: PPUSH
14081: CALL_OW 67
// base := mc_rus_1 ;
14085: LD_ADDR_VAR 0 2
14089: PUSH
14090: LD_EXP 7
14094: ST_TO_ADDR
// if not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
14095: LD_EXP 36
14099: PUSH
14100: LD_VAR 0 2
14104: ARRAY
14105: PPUSH
14106: LD_INT 30
14108: PUSH
14109: LD_INT 3
14111: PUSH
14112: EMPTY
14113: LIST
14114: LIST
14115: PPUSH
14116: CALL_OW 72
14120: NOT
14121: IFFALSE 14125
// continue ;
14123: GO 14078
// tmp := [ [ ru_heavy_tracked , engine_combustion , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_rocket ] , [ ru_heavy_tracked , engine_combustion , control_computer , ru_heavy_gun ] ] ;
14125: LD_ADDR_VAR 0 3
14129: PUSH
14130: LD_INT 24
14132: PUSH
14133: LD_INT 1
14135: PUSH
14136: LD_INT 3
14138: PUSH
14139: LD_INT 47
14141: PUSH
14142: EMPTY
14143: LIST
14144: LIST
14145: LIST
14146: LIST
14147: PUSH
14148: LD_INT 24
14150: PUSH
14151: LD_INT 1
14153: PUSH
14154: LD_INT 3
14156: PUSH
14157: LD_INT 47
14159: PUSH
14160: EMPTY
14161: LIST
14162: LIST
14163: LIST
14164: LIST
14165: PUSH
14166: LD_INT 24
14168: PUSH
14169: LD_INT 1
14171: PUSH
14172: LD_INT 3
14174: PUSH
14175: LD_INT 47
14177: PUSH
14178: EMPTY
14179: LIST
14180: LIST
14181: LIST
14182: LIST
14183: PUSH
14184: LD_INT 24
14186: PUSH
14187: LD_INT 1
14189: PUSH
14190: LD_INT 3
14192: PUSH
14193: LD_INT 46
14195: PUSH
14196: EMPTY
14197: LIST
14198: LIST
14199: LIST
14200: LIST
14201: PUSH
14202: EMPTY
14203: LIST
14204: LIST
14205: LIST
14206: LIST
14207: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
14208: LD_VAR 0 2
14212: PPUSH
14213: LD_VAR 0 3
14217: PPUSH
14218: CALL 85776 0 2
// repeat wait ( 0 0$1 ) ;
14222: LD_INT 35
14224: PPUSH
14225: CALL_OW 67
// until MC_GetProduceList ( base ) < 2 ;
14229: LD_VAR 0 2
14233: PPUSH
14234: CALL 86124 0 1
14238: PUSH
14239: LD_INT 2
14241: LESS
14242: IFFALSE 14222
// wait ( 0 0$30 ) ;
14244: LD_INT 1050
14246: PPUSH
14247: CALL_OW 67
// if legChangeSide and FilterAllUnits ( [ f_side , 8 ] ) then
14251: LD_EXP 21
14255: PUSH
14256: LD_INT 22
14258: PUSH
14259: LD_INT 8
14261: PUSH
14262: EMPTY
14263: LIST
14264: LIST
14265: PPUSH
14266: CALL_OW 69
14270: AND
14271: IFFALSE 14302
// _targetAlt := [ [ 107 , 58 ] , [ 128 , 79 ] ] ;
14273: LD_ADDR_VAR 0 5
14277: PUSH
14278: LD_INT 107
14280: PUSH
14281: LD_INT 58
14283: PUSH
14284: EMPTY
14285: LIST
14286: LIST
14287: PUSH
14288: LD_INT 128
14290: PUSH
14291: LD_INT 79
14293: PUSH
14294: EMPTY
14295: LIST
14296: LIST
14297: PUSH
14298: EMPTY
14299: LIST
14300: LIST
14301: ST_TO_ADDR
// _target := [ [ 99 , 35 ] , [ 111 , 29 ] , [ 122 , 22 ] ] ;
14302: LD_ADDR_VAR 0 4
14306: PUSH
14307: LD_INT 99
14309: PUSH
14310: LD_INT 35
14312: PUSH
14313: EMPTY
14314: LIST
14315: LIST
14316: PUSH
14317: LD_INT 111
14319: PUSH
14320: LD_INT 29
14322: PUSH
14323: EMPTY
14324: LIST
14325: LIST
14326: PUSH
14327: LD_INT 122
14329: PUSH
14330: LD_INT 22
14332: PUSH
14333: EMPTY
14334: LIST
14335: LIST
14336: PUSH
14337: EMPTY
14338: LIST
14339: LIST
14340: LIST
14341: ST_TO_ADDR
// if _targetAlt then
14342: LD_VAR 0 5
14346: IFFALSE 14379
// _target := [ _target , _targetAlt ] [ rand ( 1 , 2 ) ] ;
14348: LD_ADDR_VAR 0 4
14352: PUSH
14353: LD_VAR 0 4
14357: PUSH
14358: LD_VAR 0 5
14362: PUSH
14363: EMPTY
14364: LIST
14365: LIST
14366: PUSH
14367: LD_INT 1
14369: PPUSH
14370: LD_INT 2
14372: PPUSH
14373: CALL_OW 12
14377: ARRAY
14378: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] union UnitFilter ( mc_vehicles [ base ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_crane ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_siberium_rocket ] ] ) ) ;
14379: LD_ADDR_VAR 0 6
14383: PUSH
14384: LD_EXP 55
14388: PUSH
14389: LD_VAR 0 2
14393: ARRAY
14394: PUSH
14395: LD_EXP 58
14399: PUSH
14400: LD_VAR 0 2
14404: ARRAY
14405: PUSH
14406: LD_EXP 55
14410: PUSH
14411: LD_VAR 0 2
14415: ARRAY
14416: PPUSH
14417: LD_INT 2
14419: PUSH
14420: LD_INT 34
14422: PUSH
14423: LD_INT 51
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: PUSH
14430: LD_INT 34
14432: PUSH
14433: LD_INT 52
14435: PUSH
14436: EMPTY
14437: LIST
14438: LIST
14439: PUSH
14440: LD_INT 34
14442: PUSH
14443: LD_INT 53
14445: PUSH
14446: EMPTY
14447: LIST
14448: LIST
14449: PUSH
14450: LD_INT 34
14452: PUSH
14453: LD_INT 48
14455: PUSH
14456: EMPTY
14457: LIST
14458: LIST
14459: PUSH
14460: EMPTY
14461: LIST
14462: LIST
14463: LIST
14464: LIST
14465: LIST
14466: PPUSH
14467: CALL_OW 72
14471: UNION
14472: DIFF
14473: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
14474: LD_ADDR_EXP 55
14478: PUSH
14479: LD_EXP 55
14483: PPUSH
14484: LD_VAR 0 2
14488: PPUSH
14489: LD_EXP 55
14493: PUSH
14494: LD_VAR 0 2
14498: ARRAY
14499: PUSH
14500: LD_VAR 0 6
14504: DIFF
14505: PPUSH
14506: CALL_OW 1
14510: ST_TO_ADDR
// if not attackers then
14511: LD_VAR 0 6
14515: NOT
14516: IFFALSE 14520
// continue ;
14518: GO 14078
// ComAgressiveMove ( attackers , 84 , 36 ) ;
14520: LD_VAR 0 6
14524: PPUSH
14525: LD_INT 84
14527: PPUSH
14528: LD_INT 36
14530: PPUSH
14531: CALL_OW 114
// for i = 1 to _target do
14535: LD_ADDR_VAR 0 1
14539: PUSH
14540: DOUBLE
14541: LD_INT 1
14543: DEC
14544: ST_TO_ADDR
14545: LD_VAR 0 4
14549: PUSH
14550: FOR_TO
14551: IFFALSE 14594
// AddComAgressiveMove ( attackers , _target [ i ] [ 1 ] , _target [ i ] [ 2 ] ) ;
14553: LD_VAR 0 6
14557: PPUSH
14558: LD_VAR 0 4
14562: PUSH
14563: LD_VAR 0 1
14567: ARRAY
14568: PUSH
14569: LD_INT 1
14571: ARRAY
14572: PPUSH
14573: LD_VAR 0 4
14577: PUSH
14578: LD_VAR 0 1
14582: ARRAY
14583: PUSH
14584: LD_INT 2
14586: ARRAY
14587: PPUSH
14588: CALL_OW 174
14592: GO 14550
14594: POP
14595: POP
// repeat wait ( 0 0$1 ) ;
14596: LD_INT 35
14598: PPUSH
14599: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
14603: LD_VAR 0 6
14607: PPUSH
14608: LD_INT 60
14610: PUSH
14611: EMPTY
14612: LIST
14613: PPUSH
14614: CALL_OW 72
14618: NOT
14619: IFFALSE 14596
// repeat wait ( 0 0$1 ) ;
14621: LD_INT 35
14623: PPUSH
14624: CALL_OW 67
// for i in attackers do
14628: LD_ADDR_VAR 0 1
14632: PUSH
14633: LD_VAR 0 6
14637: PUSH
14638: FOR_IN
14639: IFFALSE 14735
// begin if IsDead ( i ) then
14641: LD_VAR 0 1
14645: PPUSH
14646: CALL_OW 301
14650: IFFALSE 14670
// begin attackers := attackers diff i ;
14652: LD_ADDR_VAR 0 6
14656: PUSH
14657: LD_VAR 0 6
14661: PUSH
14662: LD_VAR 0 1
14666: DIFF
14667: ST_TO_ADDR
// continue ;
14668: GO 14638
// end ; if HasTask ( i ) then
14670: LD_VAR 0 1
14674: PPUSH
14675: CALL_OW 314
14679: IFFALSE 14683
// continue ;
14681: GO 14638
// e := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ;
14683: LD_ADDR_VAR 0 7
14687: PUSH
14688: LD_INT 81
14690: PUSH
14691: LD_INT 3
14693: PUSH
14694: EMPTY
14695: LIST
14696: LIST
14697: PPUSH
14698: CALL_OW 69
14702: PPUSH
14703: LD_VAR 0 1
14707: PPUSH
14708: CALL_OW 74
14712: ST_TO_ADDR
// if e then
14713: LD_VAR 0 7
14717: IFFALSE 14733
// ComAttackUnit ( i , e ) ;
14719: LD_VAR 0 1
14723: PPUSH
14724: LD_VAR 0 7
14728: PPUSH
14729: CALL_OW 115
// end ;
14733: GO 14638
14735: POP
14736: POP
// until not attackers ;
14737: LD_VAR 0 6
14741: NOT
14742: IFFALSE 14621
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
14744: LD_EXP 36
14748: PUSH
14749: LD_VAR 0 2
14753: ARRAY
14754: PPUSH
14755: LD_INT 50
14757: PUSH
14758: EMPTY
14759: LIST
14760: PPUSH
14761: CALL_OW 72
14765: NOT
14766: IFFALSE 14078
// end ;
14768: PPOPN 7
14770: END
// every 1 1$00 trigger GameType = 1 and game and UnitFilter ( mc_bases [ mc_rus_2 ] , [ f_btype , b_factory ] ) do var i , base , tmp , _target , attackers , teleport , e ;
14771: LD_EXP 2
14775: PUSH
14776: LD_INT 1
14778: EQUAL
14779: PUSH
14780: LD_EXP 3
14784: AND
14785: PUSH
14786: LD_EXP 36
14790: PUSH
14791: LD_EXP 8
14795: ARRAY
14796: PPUSH
14797: LD_INT 30
14799: PUSH
14800: LD_INT 3
14802: PUSH
14803: EMPTY
14804: LIST
14805: LIST
14806: PPUSH
14807: CALL_OW 72
14811: AND
14812: IFFALSE 15553
14814: GO 14816
14816: DISABLE
14817: LD_INT 0
14819: PPUSH
14820: PPUSH
14821: PPUSH
14822: PPUSH
14823: PPUSH
14824: PPUSH
14825: PPUSH
// begin repeat wait ( 9 9$00 ) ;
14826: LD_INT 18900
14828: PPUSH
14829: CALL_OW 67
// base := mc_rus_2 ;
14833: LD_ADDR_VAR 0 2
14837: PUSH
14838: LD_EXP 8
14842: ST_TO_ADDR
// if not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
14843: LD_EXP 36
14847: PUSH
14848: LD_VAR 0 2
14852: ARRAY
14853: PPUSH
14854: LD_INT 30
14856: PUSH
14857: LD_INT 3
14859: PUSH
14860: EMPTY
14861: LIST
14862: LIST
14863: PPUSH
14864: CALL_OW 72
14868: NOT
14869: IFFALSE 14873
// continue ;
14871: GO 14826
// tmp := [ [ ru_heavy_wheeled , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_wheeled , engine_siberite , control_computer , ru_rocket ] , [ ru_heavy_wheeled , engine_siberite , control_computer , ru_heavy_gun ] , [ ru_heavy_wheeled , engine_combustion , control_computer , ru_heavy_gun ] , [ ru_medium_wheeled , engine_combustion , control_computer , ru_time_lapser ] ] ;
14873: LD_ADDR_VAR 0 3
14877: PUSH
14878: LD_INT 23
14880: PUSH
14881: LD_INT 3
14883: PUSH
14884: LD_INT 3
14886: PUSH
14887: LD_INT 47
14889: PUSH
14890: EMPTY
14891: LIST
14892: LIST
14893: LIST
14894: LIST
14895: PUSH
14896: LD_INT 23
14898: PUSH
14899: LD_INT 3
14901: PUSH
14902: LD_INT 3
14904: PUSH
14905: LD_INT 47
14907: PUSH
14908: EMPTY
14909: LIST
14910: LIST
14911: LIST
14912: LIST
14913: PUSH
14914: LD_INT 23
14916: PUSH
14917: LD_INT 3
14919: PUSH
14920: LD_INT 3
14922: PUSH
14923: LD_INT 46
14925: PUSH
14926: EMPTY
14927: LIST
14928: LIST
14929: LIST
14930: LIST
14931: PUSH
14932: LD_INT 23
14934: PUSH
14935: LD_INT 1
14937: PUSH
14938: LD_INT 3
14940: PUSH
14941: LD_INT 46
14943: PUSH
14944: EMPTY
14945: LIST
14946: LIST
14947: LIST
14948: LIST
14949: PUSH
14950: LD_INT 21
14952: PUSH
14953: LD_INT 1
14955: PUSH
14956: LD_INT 3
14958: PUSH
14959: LD_INT 49
14961: PUSH
14962: EMPTY
14963: LIST
14964: LIST
14965: LIST
14966: LIST
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: LIST
14972: LIST
14973: LIST
14974: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
14975: LD_VAR 0 2
14979: PPUSH
14980: LD_VAR 0 3
14984: PPUSH
14985: CALL 85776 0 2
// repeat wait ( 0 0$1 ) ;
14989: LD_INT 35
14991: PPUSH
14992: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
14996: LD_VAR 0 2
15000: PPUSH
15001: CALL 86124 0 1
15005: PUSH
15006: LD_INT 0
15008: EQUAL
15009: IFFALSE 14989
// wait ( 0 0$30 ) ;
15011: LD_INT 1050
15013: PPUSH
15014: CALL_OW 67
// _target := [ [ 164 , 198 ] , [ 176 , 180 ] ] ;
15018: LD_ADDR_VAR 0 4
15022: PUSH
15023: LD_INT 164
15025: PUSH
15026: LD_INT 198
15028: PUSH
15029: EMPTY
15030: LIST
15031: LIST
15032: PUSH
15033: LD_INT 176
15035: PUSH
15036: LD_INT 180
15038: PUSH
15039: EMPTY
15040: LIST
15041: LIST
15042: PUSH
15043: EMPTY
15044: LIST
15045: LIST
15046: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] union UnitFilter ( mc_vehicles [ base ] , [ f_or , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_crane ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_siberium_rocket ] ] ) ) ;
15047: LD_ADDR_VAR 0 5
15051: PUSH
15052: LD_EXP 55
15056: PUSH
15057: LD_VAR 0 2
15061: ARRAY
15062: PUSH
15063: LD_EXP 58
15067: PUSH
15068: LD_VAR 0 2
15072: ARRAY
15073: PUSH
15074: LD_EXP 55
15078: PUSH
15079: LD_VAR 0 2
15083: ARRAY
15084: PPUSH
15085: LD_INT 2
15087: PUSH
15088: LD_INT 34
15090: PUSH
15091: LD_INT 51
15093: PUSH
15094: EMPTY
15095: LIST
15096: LIST
15097: PUSH
15098: LD_INT 34
15100: PUSH
15101: LD_INT 52
15103: PUSH
15104: EMPTY
15105: LIST
15106: LIST
15107: PUSH
15108: LD_INT 34
15110: PUSH
15111: LD_INT 53
15113: PUSH
15114: EMPTY
15115: LIST
15116: LIST
15117: PUSH
15118: LD_INT 34
15120: PUSH
15121: LD_INT 48
15123: PUSH
15124: EMPTY
15125: LIST
15126: LIST
15127: PUSH
15128: EMPTY
15129: LIST
15130: LIST
15131: LIST
15132: LIST
15133: LIST
15134: PPUSH
15135: CALL_OW 72
15139: UNION
15140: DIFF
15141: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
15142: LD_ADDR_EXP 55
15146: PUSH
15147: LD_EXP 55
15151: PPUSH
15152: LD_VAR 0 2
15156: PPUSH
15157: LD_EXP 55
15161: PUSH
15162: LD_VAR 0 2
15166: ARRAY
15167: PUSH
15168: LD_VAR 0 5
15172: DIFF
15173: PPUSH
15174: CALL_OW 1
15178: ST_TO_ADDR
// if not attackers then
15179: LD_VAR 0 5
15183: NOT
15184: IFFALSE 15188
// continue ;
15186: GO 14826
// teleport := FilterAllUnits ( [ [ f_side , 3 ] , [ f_btype , b_teleport ] ] ) ;
15188: LD_ADDR_VAR 0 6
15192: PUSH
15193: LD_INT 22
15195: PUSH
15196: LD_INT 3
15198: PUSH
15199: EMPTY
15200: LIST
15201: LIST
15202: PUSH
15203: LD_INT 30
15205: PUSH
15206: LD_INT 34
15208: PUSH
15209: EMPTY
15210: LIST
15211: LIST
15212: PUSH
15213: EMPTY
15214: LIST
15215: LIST
15216: PPUSH
15217: CALL_OW 69
15221: ST_TO_ADDR
// for i in attackers do
15222: LD_ADDR_VAR 0 1
15226: PUSH
15227: LD_VAR 0 5
15231: PUSH
15232: FOR_IN
15233: IFFALSE 15293
// begin if teleport then
15235: LD_VAR 0 6
15239: IFFALSE 15276
// begin ComEnterUnit ( i , teleport [ 1 ] ) ;
15241: LD_VAR 0 1
15245: PPUSH
15246: LD_VAR 0 6
15250: PUSH
15251: LD_INT 1
15253: ARRAY
15254: PPUSH
15255: CALL_OW 120
// AddComAgressiveMove ( i , 129 , 215 ) ;
15259: LD_VAR 0 1
15263: PPUSH
15264: LD_INT 129
15266: PPUSH
15267: LD_INT 215
15269: PPUSH
15270: CALL_OW 174
// end else
15274: GO 15291
// AddComAgressiveMove ( i , 125 , 157 ) ;
15276: LD_VAR 0 1
15280: PPUSH
15281: LD_INT 125
15283: PPUSH
15284: LD_INT 157
15286: PPUSH
15287: CALL_OW 174
// end ;
15291: GO 15232
15293: POP
15294: POP
// repeat wait ( 0 0$1 ) ;
15295: LD_INT 35
15297: PPUSH
15298: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
15302: LD_VAR 0 5
15306: PPUSH
15307: LD_INT 60
15309: PUSH
15310: EMPTY
15311: LIST
15312: PPUSH
15313: CALL_OW 72
15317: NOT
15318: IFFALSE 15295
// for i = 1 to _target do
15320: LD_ADDR_VAR 0 1
15324: PUSH
15325: DOUBLE
15326: LD_INT 1
15328: DEC
15329: ST_TO_ADDR
15330: LD_VAR 0 4
15334: PUSH
15335: FOR_TO
15336: IFFALSE 15379
// AddComAgressiveMove ( attackers , _target [ i ] [ 1 ] , _target [ i ] [ 2 ] ) ;
15338: LD_VAR 0 5
15342: PPUSH
15343: LD_VAR 0 4
15347: PUSH
15348: LD_VAR 0 1
15352: ARRAY
15353: PUSH
15354: LD_INT 1
15356: ARRAY
15357: PPUSH
15358: LD_VAR 0 4
15362: PUSH
15363: LD_VAR 0 1
15367: ARRAY
15368: PUSH
15369: LD_INT 2
15371: ARRAY
15372: PPUSH
15373: CALL_OW 174
15377: GO 15335
15379: POP
15380: POP
// repeat wait ( 0 0$1 ) ;
15381: LD_INT 35
15383: PPUSH
15384: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
15388: LD_VAR 0 5
15392: PPUSH
15393: LD_INT 60
15395: PUSH
15396: EMPTY
15397: LIST
15398: PPUSH
15399: CALL_OW 72
15403: NOT
15404: IFFALSE 15381
// repeat wait ( 0 0$1 ) ;
15406: LD_INT 35
15408: PPUSH
15409: CALL_OW 67
// for i in attackers do
15413: LD_ADDR_VAR 0 1
15417: PUSH
15418: LD_VAR 0 5
15422: PUSH
15423: FOR_IN
15424: IFFALSE 15520
// begin if IsDead ( i ) then
15426: LD_VAR 0 1
15430: PPUSH
15431: CALL_OW 301
15435: IFFALSE 15455
// begin attackers := attackers diff i ;
15437: LD_ADDR_VAR 0 5
15441: PUSH
15442: LD_VAR 0 5
15446: PUSH
15447: LD_VAR 0 1
15451: DIFF
15452: ST_TO_ADDR
// continue ;
15453: GO 15423
// end ; if HasTask ( i ) then
15455: LD_VAR 0 1
15459: PPUSH
15460: CALL_OW 314
15464: IFFALSE 15468
// continue ;
15466: GO 15423
// e := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 3 ] ) , i ) ;
15468: LD_ADDR_VAR 0 7
15472: PUSH
15473: LD_INT 81
15475: PUSH
15476: LD_INT 3
15478: PUSH
15479: EMPTY
15480: LIST
15481: LIST
15482: PPUSH
15483: CALL_OW 69
15487: PPUSH
15488: LD_VAR 0 1
15492: PPUSH
15493: CALL_OW 74
15497: ST_TO_ADDR
// if e then
15498: LD_VAR 0 7
15502: IFFALSE 15518
// ComAttackUnit ( i , e ) ;
15504: LD_VAR 0 1
15508: PPUSH
15509: LD_VAR 0 7
15513: PPUSH
15514: CALL_OW 115
// end ;
15518: GO 15423
15520: POP
15521: POP
// until not attackers ;
15522: LD_VAR 0 5
15526: NOT
15527: IFFALSE 15406
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
15529: LD_EXP 36
15533: PUSH
15534: LD_VAR 0 2
15538: ARRAY
15539: PPUSH
15540: LD_INT 50
15542: PUSH
15543: EMPTY
15544: LIST
15545: PPUSH
15546: CALL_OW 72
15550: NOT
15551: IFFALSE 14826
// end ;
15553: PPOPN 7
15555: END
// every 1 1$00 trigger GameType = 1 and game and not legChangeSide and FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) and UnitFilter ( mc_bases [ mc_leg ] , [ f_btype , b_factory ] ) do var i , base , tmp , flags , _target , attackers ;
15556: LD_EXP 2
15560: PUSH
15561: LD_INT 1
15563: EQUAL
15564: PUSH
15565: LD_EXP 3
15569: AND
15570: PUSH
15571: LD_EXP 21
15575: NOT
15576: AND
15577: PUSH
15578: LD_INT 22
15580: PUSH
15581: LD_INT 8
15583: PUSH
15584: EMPTY
15585: LIST
15586: LIST
15587: PUSH
15588: LD_INT 34
15590: PUSH
15591: LD_INT 31
15593: PUSH
15594: EMPTY
15595: LIST
15596: LIST
15597: PUSH
15598: EMPTY
15599: LIST
15600: LIST
15601: PPUSH
15602: CALL_OW 69
15606: AND
15607: PUSH
15608: LD_EXP 36
15612: PUSH
15613: LD_EXP 6
15617: ARRAY
15618: PPUSH
15619: LD_INT 30
15621: PUSH
15622: LD_INT 3
15624: PUSH
15625: EMPTY
15626: LIST
15627: LIST
15628: PPUSH
15629: CALL_OW 72
15633: AND
15634: IFFALSE 16132
15636: GO 15638
15638: DISABLE
15639: LD_INT 0
15641: PPUSH
15642: PPUSH
15643: PPUSH
15644: PPUSH
15645: PPUSH
15646: PPUSH
// begin repeat wait ( [ 10 10$00 , 9 9$30 , 9 9$00 ] [ Difficulty ] ) ;
15647: LD_INT 21000
15649: PUSH
15650: LD_INT 19950
15652: PUSH
15653: LD_INT 18900
15655: PUSH
15656: EMPTY
15657: LIST
15658: LIST
15659: LIST
15660: PUSH
15661: LD_OWVAR 67
15665: ARRAY
15666: PPUSH
15667: CALL_OW 67
// base := mc_leg ;
15671: LD_ADDR_VAR 0 2
15675: PUSH
15676: LD_EXP 6
15680: ST_TO_ADDR
// if not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
15681: LD_EXP 36
15685: PUSH
15686: LD_VAR 0 2
15690: ARRAY
15691: PPUSH
15692: LD_INT 30
15694: PUSH
15695: LD_INT 3
15697: PUSH
15698: EMPTY
15699: LIST
15700: LIST
15701: PPUSH
15702: CALL_OW 72
15706: NOT
15707: IFFALSE 15711
// continue ;
15709: GO 15647
// if legChangeSide then
15711: LD_EXP 21
15715: IFFALSE 15719
// exit ;
15717: GO 16132
// tmp := [ [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] , [ ar_hovercraft , engine_combustion , control_remote , ar_double_machine_gun ] ] ;
15719: LD_ADDR_VAR 0 3
15723: PUSH
15724: LD_INT 11
15726: PUSH
15727: LD_INT 1
15729: PUSH
15730: LD_INT 2
15732: PUSH
15733: LD_INT 24
15735: PUSH
15736: EMPTY
15737: LIST
15738: LIST
15739: LIST
15740: LIST
15741: PUSH
15742: LD_INT 11
15744: PUSH
15745: LD_INT 1
15747: PUSH
15748: LD_INT 2
15750: PUSH
15751: LD_INT 24
15753: PUSH
15754: EMPTY
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: PUSH
15760: LD_INT 11
15762: PUSH
15763: LD_INT 1
15765: PUSH
15766: LD_INT 2
15768: PUSH
15769: LD_INT 24
15771: PUSH
15772: EMPTY
15773: LIST
15774: LIST
15775: LIST
15776: LIST
15777: PUSH
15778: LD_INT 11
15780: PUSH
15781: LD_INT 1
15783: PUSH
15784: LD_INT 2
15786: PUSH
15787: LD_INT 24
15789: PUSH
15790: EMPTY
15791: LIST
15792: LIST
15793: LIST
15794: LIST
15795: PUSH
15796: LD_INT 11
15798: PUSH
15799: LD_INT 1
15801: PUSH
15802: LD_INT 2
15804: PUSH
15805: LD_INT 24
15807: PUSH
15808: EMPTY
15809: LIST
15810: LIST
15811: LIST
15812: LIST
15813: PUSH
15814: EMPTY
15815: LIST
15816: LIST
15817: LIST
15818: LIST
15819: LIST
15820: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
15821: LD_VAR 0 2
15825: PPUSH
15826: LD_VAR 0 3
15830: PPUSH
15831: CALL 85776 0 2
// repeat wait ( 0 0$1 ) ;
15835: LD_INT 35
15837: PPUSH
15838: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
15842: LD_VAR 0 2
15846: PPUSH
15847: CALL 86124 0 1
15851: PUSH
15852: LD_INT 0
15854: EQUAL
15855: IFFALSE 15835
// wait ( 0 0$30 ) ;
15857: LD_INT 1050
15859: PPUSH
15860: CALL_OW 67
// _target := [ [ 113 , 63 ] , [ 119 , 15 ] ] ;
15864: LD_ADDR_VAR 0 5
15868: PUSH
15869: LD_INT 113
15871: PUSH
15872: LD_INT 63
15874: PUSH
15875: EMPTY
15876: LIST
15877: LIST
15878: PUSH
15879: LD_INT 119
15881: PUSH
15882: LD_INT 15
15884: PUSH
15885: EMPTY
15886: LIST
15887: LIST
15888: PUSH
15889: EMPTY
15890: LIST
15891: LIST
15892: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
15893: LD_ADDR_VAR 0 4
15897: PUSH
15898: LD_INT 0
15900: PUSH
15901: LD_INT 0
15903: PUSH
15904: LD_INT 0
15906: PUSH
15907: LD_INT 0
15909: PUSH
15910: LD_INT 0
15912: PUSH
15913: LD_INT 0
15915: PUSH
15916: LD_INT 0
15918: PUSH
15919: LD_INT 0
15921: PUSH
15922: LD_INT 1
15924: PUSH
15925: LD_INT 0
15927: PUSH
15928: EMPTY
15929: LIST
15930: LIST
15931: LIST
15932: LIST
15933: LIST
15934: LIST
15935: LIST
15936: LIST
15937: LIST
15938: LIST
15939: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] union UnitFilter ( mc_vehicles [ base ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_control_tower ] ] ) ) ;
15940: LD_ADDR_VAR 0 6
15944: PUSH
15945: LD_EXP 55
15949: PUSH
15950: LD_VAR 0 2
15954: ARRAY
15955: PUSH
15956: LD_EXP 58
15960: PUSH
15961: LD_VAR 0 2
15965: ARRAY
15966: PUSH
15967: LD_EXP 55
15971: PUSH
15972: LD_VAR 0 2
15976: ARRAY
15977: PPUSH
15978: LD_INT 2
15980: PUSH
15981: LD_INT 34
15983: PUSH
15984: LD_INT 32
15986: PUSH
15987: EMPTY
15988: LIST
15989: LIST
15990: PUSH
15991: LD_INT 34
15993: PUSH
15994: LD_INT 31
15996: PUSH
15997: EMPTY
15998: LIST
15999: LIST
16000: PUSH
16001: EMPTY
16002: LIST
16003: LIST
16004: LIST
16005: PPUSH
16006: CALL_OW 72
16010: UNION
16011: DIFF
16012: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
16013: LD_ADDR_EXP 55
16017: PUSH
16018: LD_EXP 55
16022: PPUSH
16023: LD_VAR 0 2
16027: PPUSH
16028: LD_EXP 55
16032: PUSH
16033: LD_VAR 0 2
16037: ARRAY
16038: PUSH
16039: LD_VAR 0 6
16043: DIFF
16044: PPUSH
16045: CALL_OW 1
16049: ST_TO_ADDR
// if not attackers then
16050: LD_VAR 0 6
16054: NOT
16055: IFFALSE 16059
// continue ;
16057: GO 15647
// repeat wait ( 0 0$1 ) ;
16059: LD_INT 35
16061: PPUSH
16062: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
16066: LD_VAR 0 6
16070: PPUSH
16071: LD_INT 60
16073: PUSH
16074: EMPTY
16075: LIST
16076: PPUSH
16077: CALL_OW 72
16081: NOT
16082: IFFALSE 16059
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
16084: LD_VAR 0 2
16088: PPUSH
16089: LD_VAR 0 6
16093: PPUSH
16094: LD_VAR 0 5
16098: PPUSH
16099: LD_VAR 0 4
16103: PPUSH
16104: CALL 85961 0 4
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
16108: LD_EXP 36
16112: PUSH
16113: LD_VAR 0 2
16117: ARRAY
16118: PPUSH
16119: LD_INT 50
16121: PUSH
16122: EMPTY
16123: LIST
16124: PPUSH
16125: CALL_OW 72
16129: NOT
16130: IFFALSE 15647
// end ;
16132: PPOPN 6
16134: END
// every 1 1$00 trigger GameType = 1 and game and FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) and UnitFilter ( mc_bases [ mc_leg ] , [ f_btype , b_factory ] ) do var i , base , flags , tmp , _target , attackers ;
16135: LD_EXP 2
16139: PUSH
16140: LD_INT 1
16142: EQUAL
16143: PUSH
16144: LD_EXP 3
16148: AND
16149: PUSH
16150: LD_INT 22
16152: PUSH
16153: LD_INT 8
16155: PUSH
16156: EMPTY
16157: LIST
16158: LIST
16159: PUSH
16160: LD_INT 34
16162: PUSH
16163: LD_INT 31
16165: PUSH
16166: EMPTY
16167: LIST
16168: LIST
16169: PUSH
16170: EMPTY
16171: LIST
16172: LIST
16173: PPUSH
16174: CALL_OW 69
16178: AND
16179: PUSH
16180: LD_EXP 36
16184: PUSH
16185: LD_EXP 6
16189: ARRAY
16190: PPUSH
16191: LD_INT 30
16193: PUSH
16194: LD_INT 3
16196: PUSH
16197: EMPTY
16198: LIST
16199: LIST
16200: PPUSH
16201: CALL_OW 72
16205: AND
16206: IFFALSE 16737
16208: GO 16210
16210: DISABLE
16211: LD_INT 0
16213: PPUSH
16214: PPUSH
16215: PPUSH
16216: PPUSH
16217: PPUSH
16218: PPUSH
// begin repeat wait ( 9 9$00 ) ;
16219: LD_INT 18900
16221: PPUSH
16222: CALL_OW 67
// base := mc_leg ;
16226: LD_ADDR_VAR 0 2
16230: PUSH
16231: LD_EXP 6
16235: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) or not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
16236: LD_INT 22
16238: PUSH
16239: LD_INT 8
16241: PUSH
16242: EMPTY
16243: LIST
16244: LIST
16245: PUSH
16246: LD_INT 34
16248: PUSH
16249: LD_INT 31
16251: PUSH
16252: EMPTY
16253: LIST
16254: LIST
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: PPUSH
16260: CALL_OW 69
16264: NOT
16265: PUSH
16266: LD_EXP 36
16270: PUSH
16271: LD_VAR 0 2
16275: ARRAY
16276: PPUSH
16277: LD_INT 30
16279: PUSH
16280: LD_INT 3
16282: PUSH
16283: EMPTY
16284: LIST
16285: LIST
16286: PPUSH
16287: CALL_OW 72
16291: NOT
16292: OR
16293: IFFALSE 16297
// continue ;
16295: GO 16219
// if legChangeSide then
16297: LD_EXP 21
16301: IFFALSE 16305
// exit ;
16303: GO 16737
// tmp := [ [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_selfpropelled_bomb ] ] ;
16305: LD_ADDR_VAR 0 4
16309: PUSH
16310: LD_INT 13
16312: PUSH
16313: LD_INT 1
16315: PUSH
16316: LD_INT 2
16318: PUSH
16319: LD_INT 28
16321: PUSH
16322: EMPTY
16323: LIST
16324: LIST
16325: LIST
16326: LIST
16327: PUSH
16328: LD_INT 13
16330: PUSH
16331: LD_INT 1
16333: PUSH
16334: LD_INT 2
16336: PUSH
16337: LD_INT 28
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: LIST
16344: LIST
16345: PUSH
16346: LD_INT 13
16348: PUSH
16349: LD_INT 1
16351: PUSH
16352: LD_INT 2
16354: PUSH
16355: LD_INT 28
16357: PUSH
16358: EMPTY
16359: LIST
16360: LIST
16361: LIST
16362: LIST
16363: PUSH
16364: LD_INT 13
16366: PUSH
16367: LD_INT 1
16369: PUSH
16370: LD_INT 2
16372: PUSH
16373: LD_INT 27
16375: PUSH
16376: EMPTY
16377: LIST
16378: LIST
16379: LIST
16380: LIST
16381: PUSH
16382: LD_INT 13
16384: PUSH
16385: LD_INT 1
16387: PUSH
16388: LD_INT 2
16390: PUSH
16391: LD_INT 27
16393: PUSH
16394: EMPTY
16395: LIST
16396: LIST
16397: LIST
16398: LIST
16399: PUSH
16400: LD_INT 13
16402: PUSH
16403: LD_INT 1
16405: PUSH
16406: LD_INT 2
16408: PUSH
16409: LD_INT 29
16411: PUSH
16412: EMPTY
16413: LIST
16414: LIST
16415: LIST
16416: LIST
16417: PUSH
16418: EMPTY
16419: LIST
16420: LIST
16421: LIST
16422: LIST
16423: LIST
16424: LIST
16425: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
16426: LD_VAR 0 2
16430: PPUSH
16431: LD_VAR 0 4
16435: PPUSH
16436: CALL 85776 0 2
// repeat wait ( 0 0$1 ) ;
16440: LD_INT 35
16442: PPUSH
16443: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
16447: LD_VAR 0 2
16451: PPUSH
16452: CALL 86124 0 1
16456: PUSH
16457: LD_INT 0
16459: EQUAL
16460: IFFALSE 16440
// wait ( 0 0$30 ) ;
16462: LD_INT 1050
16464: PPUSH
16465: CALL_OW 67
// _target := [ [ 165 , 89 ] , [ 190 , 123 ] ] ;
16469: LD_ADDR_VAR 0 5
16473: PUSH
16474: LD_INT 165
16476: PUSH
16477: LD_INT 89
16479: PUSH
16480: EMPTY
16481: LIST
16482: LIST
16483: PUSH
16484: LD_INT 190
16486: PUSH
16487: LD_INT 123
16489: PUSH
16490: EMPTY
16491: LIST
16492: LIST
16493: PUSH
16494: EMPTY
16495: LIST
16496: LIST
16497: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
16498: LD_ADDR_VAR 0 3
16502: PUSH
16503: LD_INT 0
16505: PUSH
16506: LD_INT 0
16508: PUSH
16509: LD_INT 0
16511: PUSH
16512: LD_INT 0
16514: PUSH
16515: LD_INT 0
16517: PUSH
16518: LD_INT 0
16520: PUSH
16521: LD_INT 0
16523: PUSH
16524: LD_INT 0
16526: PUSH
16527: LD_INT 1
16529: PUSH
16530: LD_INT 0
16532: PUSH
16533: EMPTY
16534: LIST
16535: LIST
16536: LIST
16537: LIST
16538: LIST
16539: LIST
16540: LIST
16541: LIST
16542: LIST
16543: LIST
16544: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] union UnitFilter ( mc_vehicles [ base ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_control_tower ] ] ) ) ;
16545: LD_ADDR_VAR 0 6
16549: PUSH
16550: LD_EXP 55
16554: PUSH
16555: LD_VAR 0 2
16559: ARRAY
16560: PUSH
16561: LD_EXP 58
16565: PUSH
16566: LD_VAR 0 2
16570: ARRAY
16571: PUSH
16572: LD_EXP 55
16576: PUSH
16577: LD_VAR 0 2
16581: ARRAY
16582: PPUSH
16583: LD_INT 2
16585: PUSH
16586: LD_INT 34
16588: PUSH
16589: LD_INT 32
16591: PUSH
16592: EMPTY
16593: LIST
16594: LIST
16595: PUSH
16596: LD_INT 34
16598: PUSH
16599: LD_INT 31
16601: PUSH
16602: EMPTY
16603: LIST
16604: LIST
16605: PUSH
16606: EMPTY
16607: LIST
16608: LIST
16609: LIST
16610: PPUSH
16611: CALL_OW 72
16615: UNION
16616: DIFF
16617: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
16618: LD_ADDR_EXP 55
16622: PUSH
16623: LD_EXP 55
16627: PPUSH
16628: LD_VAR 0 2
16632: PPUSH
16633: LD_EXP 55
16637: PUSH
16638: LD_VAR 0 2
16642: ARRAY
16643: PUSH
16644: LD_VAR 0 6
16648: DIFF
16649: PPUSH
16650: CALL_OW 1
16654: ST_TO_ADDR
// if not attackers then
16655: LD_VAR 0 6
16659: NOT
16660: IFFALSE 16664
// continue ;
16662: GO 16219
// repeat wait ( 0 0$1 ) ;
16664: LD_INT 35
16666: PPUSH
16667: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
16671: LD_VAR 0 6
16675: PPUSH
16676: LD_INT 60
16678: PUSH
16679: EMPTY
16680: LIST
16681: PPUSH
16682: CALL_OW 72
16686: NOT
16687: IFFALSE 16664
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
16689: LD_VAR 0 2
16693: PPUSH
16694: LD_VAR 0 6
16698: PPUSH
16699: LD_VAR 0 5
16703: PPUSH
16704: LD_VAR 0 3
16708: PPUSH
16709: CALL 85961 0 4
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
16713: LD_EXP 36
16717: PUSH
16718: LD_VAR 0 2
16722: ARRAY
16723: PPUSH
16724: LD_INT 50
16726: PUSH
16727: EMPTY
16728: LIST
16729: PPUSH
16730: CALL_OW 72
16734: NOT
16735: IFFALSE 16219
// end ;
16737: PPOPN 6
16739: END
// every 1 1$00 trigger GameType = 1 and game and legChangeSide and FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) and UnitFilter ( mc_bases [ mc_leg ] , [ f_btype , b_factory ] ) do var i , base , tmp , _target , attackers , flags ;
16740: LD_EXP 2
16744: PUSH
16745: LD_INT 1
16747: EQUAL
16748: PUSH
16749: LD_EXP 3
16753: AND
16754: PUSH
16755: LD_EXP 21
16759: AND
16760: PUSH
16761: LD_INT 22
16763: PUSH
16764: LD_INT 8
16766: PUSH
16767: EMPTY
16768: LIST
16769: LIST
16770: PUSH
16771: LD_INT 34
16773: PUSH
16774: LD_INT 31
16776: PUSH
16777: EMPTY
16778: LIST
16779: LIST
16780: PUSH
16781: EMPTY
16782: LIST
16783: LIST
16784: PPUSH
16785: CALL_OW 69
16789: AND
16790: PUSH
16791: LD_EXP 36
16795: PUSH
16796: LD_EXP 6
16800: ARRAY
16801: PPUSH
16802: LD_INT 30
16804: PUSH
16805: LD_INT 3
16807: PUSH
16808: EMPTY
16809: LIST
16810: LIST
16811: PPUSH
16812: CALL_OW 72
16816: AND
16817: IFFALSE 17359
16819: GO 16821
16821: DISABLE
16822: LD_INT 0
16824: PPUSH
16825: PPUSH
16826: PPUSH
16827: PPUSH
16828: PPUSH
16829: PPUSH
// begin repeat wait ( 12 12$00 ) ;
16830: LD_INT 25200
16832: PPUSH
16833: CALL_OW 67
// base := mc_leg ;
16837: LD_ADDR_VAR 0 2
16841: PUSH
16842: LD_EXP 6
16846: ST_TO_ADDR
// if not FilterAllUnits ( [ [ f_side , 8 ] , [ f_weapon , ar_control_tower ] ] ) or not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
16847: LD_INT 22
16849: PUSH
16850: LD_INT 8
16852: PUSH
16853: EMPTY
16854: LIST
16855: LIST
16856: PUSH
16857: LD_INT 34
16859: PUSH
16860: LD_INT 31
16862: PUSH
16863: EMPTY
16864: LIST
16865: LIST
16866: PUSH
16867: EMPTY
16868: LIST
16869: LIST
16870: PPUSH
16871: CALL_OW 69
16875: NOT
16876: PUSH
16877: LD_EXP 36
16881: PUSH
16882: LD_VAR 0 2
16886: ARRAY
16887: PPUSH
16888: LD_INT 30
16890: PUSH
16891: LD_INT 3
16893: PUSH
16894: EMPTY
16895: LIST
16896: LIST
16897: PPUSH
16898: CALL_OW 72
16902: NOT
16903: OR
16904: IFFALSE 16908
// continue ;
16906: GO 16830
// tmp := [ [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_rocket_launcher ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_gun ] , [ ar_medium_trike , engine_combustion , control_remote , ar_selfpropelled_bomb ] , [ ar_medium_trike , engine_combustion , control_remote , ar_selfpropelled_bomb ] ] ;
16908: LD_ADDR_VAR 0 3
16912: PUSH
16913: LD_INT 13
16915: PUSH
16916: LD_INT 1
16918: PUSH
16919: LD_INT 2
16921: PUSH
16922: LD_INT 28
16924: PUSH
16925: EMPTY
16926: LIST
16927: LIST
16928: LIST
16929: LIST
16930: PUSH
16931: LD_INT 13
16933: PUSH
16934: LD_INT 1
16936: PUSH
16937: LD_INT 2
16939: PUSH
16940: LD_INT 28
16942: PUSH
16943: EMPTY
16944: LIST
16945: LIST
16946: LIST
16947: LIST
16948: PUSH
16949: LD_INT 13
16951: PUSH
16952: LD_INT 1
16954: PUSH
16955: LD_INT 2
16957: PUSH
16958: LD_INT 28
16960: PUSH
16961: EMPTY
16962: LIST
16963: LIST
16964: LIST
16965: LIST
16966: PUSH
16967: LD_INT 13
16969: PUSH
16970: LD_INT 1
16972: PUSH
16973: LD_INT 2
16975: PUSH
16976: LD_INT 27
16978: PUSH
16979: EMPTY
16980: LIST
16981: LIST
16982: LIST
16983: LIST
16984: PUSH
16985: LD_INT 13
16987: PUSH
16988: LD_INT 1
16990: PUSH
16991: LD_INT 2
16993: PUSH
16994: LD_INT 27
16996: PUSH
16997: EMPTY
16998: LIST
16999: LIST
17000: LIST
17001: LIST
17002: PUSH
17003: LD_INT 13
17005: PUSH
17006: LD_INT 1
17008: PUSH
17009: LD_INT 2
17011: PUSH
17012: LD_INT 29
17014: PUSH
17015: EMPTY
17016: LIST
17017: LIST
17018: LIST
17019: LIST
17020: PUSH
17021: LD_INT 13
17023: PUSH
17024: LD_INT 1
17026: PUSH
17027: LD_INT 2
17029: PUSH
17030: LD_INT 29
17032: PUSH
17033: EMPTY
17034: LIST
17035: LIST
17036: LIST
17037: LIST
17038: PUSH
17039: EMPTY
17040: LIST
17041: LIST
17042: LIST
17043: LIST
17044: LIST
17045: LIST
17046: LIST
17047: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
17048: LD_VAR 0 2
17052: PPUSH
17053: LD_VAR 0 3
17057: PPUSH
17058: CALL 85776 0 2
// repeat wait ( 0 0$1 ) ;
17062: LD_INT 35
17064: PPUSH
17065: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
17069: LD_VAR 0 2
17073: PPUSH
17074: CALL 86124 0 1
17078: PUSH
17079: LD_INT 0
17081: EQUAL
17082: IFFALSE 17062
// wait ( 0 0$30 ) ;
17084: LD_INT 1050
17086: PPUSH
17087: CALL_OW 67
// _target := [ [ 110 , 63 ] , [ 92 , 72 ] ] ;
17091: LD_ADDR_VAR 0 4
17095: PUSH
17096: LD_INT 110
17098: PUSH
17099: LD_INT 63
17101: PUSH
17102: EMPTY
17103: LIST
17104: LIST
17105: PUSH
17106: LD_INT 92
17108: PUSH
17109: LD_INT 72
17111: PUSH
17112: EMPTY
17113: LIST
17114: LIST
17115: PUSH
17116: EMPTY
17117: LIST
17118: LIST
17119: ST_TO_ADDR
// flags := [ 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 1 , 0 ] ;
17120: LD_ADDR_VAR 0 6
17124: PUSH
17125: LD_INT 0
17127: PUSH
17128: LD_INT 0
17130: PUSH
17131: LD_INT 0
17133: PUSH
17134: LD_INT 0
17136: PUSH
17137: LD_INT 0
17139: PUSH
17140: LD_INT 0
17142: PUSH
17143: LD_INT 0
17145: PUSH
17146: LD_INT 0
17148: PUSH
17149: LD_INT 1
17151: PUSH
17152: LD_INT 0
17154: PUSH
17155: EMPTY
17156: LIST
17157: LIST
17158: LIST
17159: LIST
17160: LIST
17161: LIST
17162: LIST
17163: LIST
17164: LIST
17165: LIST
17166: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] union UnitFilter ( mc_vehicles [ base ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ar_control_tower ] ] ) ) ;
17167: LD_ADDR_VAR 0 5
17171: PUSH
17172: LD_EXP 55
17176: PUSH
17177: LD_VAR 0 2
17181: ARRAY
17182: PUSH
17183: LD_EXP 58
17187: PUSH
17188: LD_VAR 0 2
17192: ARRAY
17193: PUSH
17194: LD_EXP 55
17198: PUSH
17199: LD_VAR 0 2
17203: ARRAY
17204: PPUSH
17205: LD_INT 2
17207: PUSH
17208: LD_INT 34
17210: PUSH
17211: LD_INT 32
17213: PUSH
17214: EMPTY
17215: LIST
17216: LIST
17217: PUSH
17218: LD_INT 34
17220: PUSH
17221: LD_INT 31
17223: PUSH
17224: EMPTY
17225: LIST
17226: LIST
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: LIST
17232: PPUSH
17233: CALL_OW 72
17237: UNION
17238: DIFF
17239: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
17240: LD_ADDR_EXP 55
17244: PUSH
17245: LD_EXP 55
17249: PPUSH
17250: LD_VAR 0 2
17254: PPUSH
17255: LD_EXP 55
17259: PUSH
17260: LD_VAR 0 2
17264: ARRAY
17265: PUSH
17266: LD_VAR 0 5
17270: DIFF
17271: PPUSH
17272: CALL_OW 1
17276: ST_TO_ADDR
// if not attackers then
17277: LD_VAR 0 5
17281: NOT
17282: IFFALSE 17286
// continue ;
17284: GO 16830
// repeat wait ( 0 0$1 ) ;
17286: LD_INT 35
17288: PPUSH
17289: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
17293: LD_VAR 0 5
17297: PPUSH
17298: LD_INT 60
17300: PUSH
17301: EMPTY
17302: LIST
17303: PPUSH
17304: CALL_OW 72
17308: NOT
17309: IFFALSE 17286
// MC_PrepareAttack ( base , attackers , _target , flags ) ;
17311: LD_VAR 0 2
17315: PPUSH
17316: LD_VAR 0 5
17320: PPUSH
17321: LD_VAR 0 4
17325: PPUSH
17326: LD_VAR 0 6
17330: PPUSH
17331: CALL 85961 0 4
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
17335: LD_EXP 36
17339: PUSH
17340: LD_VAR 0 2
17344: ARRAY
17345: PPUSH
17346: LD_INT 50
17348: PUSH
17349: EMPTY
17350: LIST
17351: PPUSH
17352: CALL_OW 72
17356: NOT
17357: IFFALSE 16830
// end ;
17359: PPOPN 6
17361: END
// every 1 1$00 trigger GameType = 1 and game and UnitFilter ( mc_bases [ mc_amer ] , [ f_btype , b_factory ] ) do var i , base , tmp , _target , attackers , e ;
17362: LD_EXP 2
17366: PUSH
17367: LD_INT 1
17369: EQUAL
17370: PUSH
17371: LD_EXP 3
17375: AND
17376: PUSH
17377: LD_EXP 36
17381: PUSH
17382: LD_EXP 5
17386: ARRAY
17387: PPUSH
17388: LD_INT 30
17390: PUSH
17391: LD_INT 3
17393: PUSH
17394: EMPTY
17395: LIST
17396: LIST
17397: PPUSH
17398: CALL_OW 72
17402: AND
17403: IFFALSE 17985
17405: GO 17407
17407: DISABLE
17408: LD_INT 0
17410: PPUSH
17411: PPUSH
17412: PPUSH
17413: PPUSH
17414: PPUSH
17415: PPUSH
// begin repeat wait ( 12 12$00 ) ;
17416: LD_INT 25200
17418: PPUSH
17419: CALL_OW 67
// base := mc_amer ;
17423: LD_ADDR_VAR 0 2
17427: PUSH
17428: LD_EXP 5
17432: ST_TO_ADDR
// if not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
17433: LD_EXP 36
17437: PUSH
17438: LD_VAR 0 2
17442: ARRAY
17443: PPUSH
17444: LD_INT 30
17446: PUSH
17447: LD_INT 3
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: PPUSH
17454: CALL_OW 72
17458: NOT
17459: IFFALSE 17463
// continue ;
17461: GO 17416
// tmp := [ [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , [ us_heavy_tracked , engine_combustion , control_remote , us_heavy_gun ] , [ us_medium_wheeled , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_wheeled , engine_combustion , control_remote , us_rocket_launcher ] , [ us_medium_wheeled , engine_combustion , control_remote , us_rocket_launcher ] ] ;
17463: LD_ADDR_VAR 0 3
17467: PUSH
17468: LD_INT 4
17470: PUSH
17471: LD_INT 1
17473: PUSH
17474: LD_INT 2
17476: PUSH
17477: LD_INT 6
17479: PUSH
17480: EMPTY
17481: LIST
17482: LIST
17483: LIST
17484: LIST
17485: PUSH
17486: LD_INT 4
17488: PUSH
17489: LD_INT 1
17491: PUSH
17492: LD_INT 2
17494: PUSH
17495: LD_INT 6
17497: PUSH
17498: EMPTY
17499: LIST
17500: LIST
17501: LIST
17502: LIST
17503: PUSH
17504: LD_INT 2
17506: PUSH
17507: LD_INT 1
17509: PUSH
17510: LD_INT 2
17512: PUSH
17513: LD_INT 7
17515: PUSH
17516: EMPTY
17517: LIST
17518: LIST
17519: LIST
17520: LIST
17521: PUSH
17522: LD_INT 2
17524: PUSH
17525: LD_INT 1
17527: PUSH
17528: LD_INT 2
17530: PUSH
17531: LD_INT 7
17533: PUSH
17534: EMPTY
17535: LIST
17536: LIST
17537: LIST
17538: LIST
17539: PUSH
17540: LD_INT 2
17542: PUSH
17543: LD_INT 1
17545: PUSH
17546: LD_INT 2
17548: PUSH
17549: LD_INT 7
17551: PUSH
17552: EMPTY
17553: LIST
17554: LIST
17555: LIST
17556: LIST
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: LIST
17562: LIST
17563: LIST
17564: ST_TO_ADDR
// MC_InsertProduceList ( base , tmp ) ;
17565: LD_VAR 0 2
17569: PPUSH
17570: LD_VAR 0 3
17574: PPUSH
17575: CALL 85776 0 2
// repeat wait ( 0 0$1 ) ;
17579: LD_INT 35
17581: PPUSH
17582: CALL_OW 67
// until MC_GetProduceList ( base ) = 0 ;
17586: LD_VAR 0 2
17590: PPUSH
17591: CALL 86124 0 1
17595: PUSH
17596: LD_INT 0
17598: EQUAL
17599: IFFALSE 17579
// wait ( 0 0$30 ) ;
17601: LD_INT 1050
17603: PPUSH
17604: CALL_OW 67
// _target := [ [ 92 , 34 ] ] ;
17608: LD_ADDR_VAR 0 4
17612: PUSH
17613: LD_INT 92
17615: PUSH
17616: LD_INT 34
17618: PUSH
17619: EMPTY
17620: LIST
17621: LIST
17622: PUSH
17623: EMPTY
17624: LIST
17625: ST_TO_ADDR
// attackers := mc_vehicles [ base ] diff ( mc_defender [ base ] union UnitFilter ( mc_vehicles [ base ] , [ f_weapon , us_cargo_bay ] ) ) ;
17626: LD_ADDR_VAR 0 5
17630: PUSH
17631: LD_EXP 55
17635: PUSH
17636: LD_VAR 0 2
17640: ARRAY
17641: PUSH
17642: LD_EXP 58
17646: PUSH
17647: LD_VAR 0 2
17651: ARRAY
17652: PUSH
17653: LD_EXP 55
17657: PUSH
17658: LD_VAR 0 2
17662: ARRAY
17663: PPUSH
17664: LD_INT 34
17666: PUSH
17667: LD_INT 12
17669: PUSH
17670: EMPTY
17671: LIST
17672: LIST
17673: PPUSH
17674: CALL_OW 72
17678: UNION
17679: DIFF
17680: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , mc_vehicles [ base ] diff attackers ) ;
17681: LD_ADDR_EXP 55
17685: PUSH
17686: LD_EXP 55
17690: PPUSH
17691: LD_VAR 0 2
17695: PPUSH
17696: LD_EXP 55
17700: PUSH
17701: LD_VAR 0 2
17705: ARRAY
17706: PUSH
17707: LD_VAR 0 5
17711: DIFF
17712: PPUSH
17713: CALL_OW 1
17717: ST_TO_ADDR
// if not attackers then
17718: LD_VAR 0 5
17722: NOT
17723: IFFALSE 17727
// continue ;
17725: GO 17416
// repeat wait ( 0 0$1 ) ;
17727: LD_INT 35
17729: PPUSH
17730: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
17734: LD_VAR 0 5
17738: PPUSH
17739: LD_INT 60
17741: PUSH
17742: EMPTY
17743: LIST
17744: PPUSH
17745: CALL_OW 72
17749: NOT
17750: IFFALSE 17727
// for i = 1 to _target do
17752: LD_ADDR_VAR 0 1
17756: PUSH
17757: DOUBLE
17758: LD_INT 1
17760: DEC
17761: ST_TO_ADDR
17762: LD_VAR 0 4
17766: PUSH
17767: FOR_TO
17768: IFFALSE 17811
// AddComAgressiveMove ( attackers , _target [ i ] [ 1 ] , _target [ i ] [ 2 ] ) ;
17770: LD_VAR 0 5
17774: PPUSH
17775: LD_VAR 0 4
17779: PUSH
17780: LD_VAR 0 1
17784: ARRAY
17785: PUSH
17786: LD_INT 1
17788: ARRAY
17789: PPUSH
17790: LD_VAR 0 4
17794: PUSH
17795: LD_VAR 0 1
17799: ARRAY
17800: PUSH
17801: LD_INT 2
17803: ARRAY
17804: PPUSH
17805: CALL_OW 174
17809: GO 17767
17811: POP
17812: POP
// repeat wait ( 0 0$1 ) ;
17813: LD_INT 35
17815: PPUSH
17816: CALL_OW 67
// until not UnitFilter ( attackers , [ f_hastask ] ) ;
17820: LD_VAR 0 5
17824: PPUSH
17825: LD_INT 60
17827: PUSH
17828: EMPTY
17829: LIST
17830: PPUSH
17831: CALL_OW 72
17835: NOT
17836: IFFALSE 17813
// repeat wait ( 0 0$1 ) ;
17838: LD_INT 35
17840: PPUSH
17841: CALL_OW 67
// for i in attackers do
17845: LD_ADDR_VAR 0 1
17849: PUSH
17850: LD_VAR 0 5
17854: PUSH
17855: FOR_IN
17856: IFFALSE 17952
// begin if IsDead ( i ) then
17858: LD_VAR 0 1
17862: PPUSH
17863: CALL_OW 301
17867: IFFALSE 17887
// begin attackers := attackers diff i ;
17869: LD_ADDR_VAR 0 5
17873: PUSH
17874: LD_VAR 0 5
17878: PUSH
17879: LD_VAR 0 1
17883: DIFF
17884: ST_TO_ADDR
// continue ;
17885: GO 17855
// end ; if HasTask ( i ) then
17887: LD_VAR 0 1
17891: PPUSH
17892: CALL_OW 314
17896: IFFALSE 17900
// continue ;
17898: GO 17855
// e := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ;
17900: LD_ADDR_VAR 0 6
17904: PUSH
17905: LD_INT 81
17907: PUSH
17908: LD_INT 4
17910: PUSH
17911: EMPTY
17912: LIST
17913: LIST
17914: PPUSH
17915: CALL_OW 69
17919: PPUSH
17920: LD_VAR 0 1
17924: PPUSH
17925: CALL_OW 74
17929: ST_TO_ADDR
// if e then
17930: LD_VAR 0 6
17934: IFFALSE 17950
// ComAttackUnit ( i , e ) ;
17936: LD_VAR 0 1
17940: PPUSH
17941: LD_VAR 0 6
17945: PPUSH
17946: CALL_OW 115
// end ;
17950: GO 17855
17952: POP
17953: POP
// until not attackers ;
17954: LD_VAR 0 5
17958: NOT
17959: IFFALSE 17838
// until not UnitFilter ( mc_bases [ base ] , [ f_ok ] ) ;
17961: LD_EXP 36
17965: PUSH
17966: LD_VAR 0 2
17970: ARRAY
17971: PPUSH
17972: LD_INT 50
17974: PUSH
17975: EMPTY
17976: LIST
17977: PPUSH
17978: CALL_OW 72
17982: NOT
17983: IFFALSE 17416
// end ;
17985: PPOPN 6
17987: END
// every 30 30$00 + 50 50$00 trigger GameType = 1 and game and sibBombAllowed > 0 and UnitFilter ( mc_bases [ mc_rus_2 ] , [ f_btype , b_factory ] ) do var bomb , e ;
17988: LD_EXP 2
17992: PUSH
17993: LD_INT 1
17995: EQUAL
17996: PUSH
17997: LD_EXP 3
18001: AND
18002: PUSH
18003: LD_EXP 23
18007: PUSH
18008: LD_INT 0
18010: GREATER
18011: AND
18012: PUSH
18013: LD_EXP 36
18017: PUSH
18018: LD_EXP 8
18022: ARRAY
18023: PPUSH
18024: LD_INT 30
18026: PUSH
18027: LD_INT 3
18029: PUSH
18030: EMPTY
18031: LIST
18032: LIST
18033: PPUSH
18034: CALL_OW 72
18038: AND
18039: IFFALSE 18243
18041: GO 18043
18043: DISABLE
18044: LD_INT 0
18046: PPUSH
18047: PPUSH
// begin enable ;
18048: ENABLE
// MC_InsertProduceList ( mc_rus_2 , [ [ ru_heavy_wheeled , engine_siberite , control_computer , ru_siberium_rocket ] ] ) ;
18049: LD_EXP 8
18053: PPUSH
18054: LD_INT 23
18056: PUSH
18057: LD_INT 3
18059: PUSH
18060: LD_INT 3
18062: PUSH
18063: LD_INT 48
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: LIST
18070: LIST
18071: PUSH
18072: EMPTY
18073: LIST
18074: PPUSH
18075: CALL 85776 0 2
// repeat wait ( 0 0$1 ) ;
18079: LD_INT 35
18081: PPUSH
18082: CALL_OW 67
// until FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
18086: LD_INT 22
18088: PUSH
18089: LD_INT 3
18091: PUSH
18092: EMPTY
18093: LIST
18094: LIST
18095: PUSH
18096: LD_INT 34
18098: PUSH
18099: LD_INT 48
18101: PUSH
18102: EMPTY
18103: LIST
18104: LIST
18105: PUSH
18106: EMPTY
18107: LIST
18108: LIST
18109: PPUSH
18110: CALL_OW 69
18114: IFFALSE 18079
// bomb := FilterAllUnits ( [ [ f_side , 3 ] , [ f_weapon , ru_siberium_rocket ] ] ) ;
18116: LD_ADDR_VAR 0 1
18120: PUSH
18121: LD_INT 22
18123: PUSH
18124: LD_INT 3
18126: PUSH
18127: EMPTY
18128: LIST
18129: LIST
18130: PUSH
18131: LD_INT 34
18133: PUSH
18134: LD_INT 48
18136: PUSH
18137: EMPTY
18138: LIST
18139: LIST
18140: PUSH
18141: EMPTY
18142: LIST
18143: LIST
18144: PPUSH
18145: CALL_OW 69
18149: ST_TO_ADDR
// e := FilterAllUnits ( [ [ f_enemy , 3 ] , [ f_type , unit_building ] ] ) ;
18150: LD_ADDR_VAR 0 2
18154: PUSH
18155: LD_INT 81
18157: PUSH
18158: LD_INT 3
18160: PUSH
18161: EMPTY
18162: LIST
18163: LIST
18164: PUSH
18165: LD_INT 21
18167: PUSH
18168: LD_INT 3
18170: PUSH
18171: EMPTY
18172: LIST
18173: LIST
18174: PUSH
18175: EMPTY
18176: LIST
18177: LIST
18178: PPUSH
18179: CALL_OW 69
18183: ST_TO_ADDR
// if e then
18184: LD_VAR 0 2
18188: IFFALSE 18214
// e := NearestUnitToUnit ( e , bomb [ 1 ] ) ;
18190: LD_ADDR_VAR 0 2
18194: PUSH
18195: LD_VAR 0 2
18199: PPUSH
18200: LD_VAR 0 1
18204: PUSH
18205: LD_INT 1
18207: ARRAY
18208: PPUSH
18209: CALL_OW 74
18213: ST_TO_ADDR
// ComAttackPlace ( bomb , GetX ( e ) , GetY ( e ) ) ;
18214: LD_VAR 0 1
18218: PPUSH
18219: LD_VAR 0 2
18223: PPUSH
18224: CALL_OW 250
18228: PPUSH
18229: LD_VAR 0 2
18233: PPUSH
18234: CALL_OW 251
18238: PPUSH
18239: CALL_OW 116
// end ;
18243: PPOPN 2
18245: END
// every 7 7$00 trigger GameType = 1 and GetBType ( HexInfo ( 84 , 128 ) ) = b_warehouse do var veh , depot ;
18246: LD_EXP 2
18250: PUSH
18251: LD_INT 1
18253: EQUAL
18254: PUSH
18255: LD_INT 84
18257: PPUSH
18258: LD_INT 128
18260: PPUSH
18261: CALL_OW 428
18265: PPUSH
18266: CALL_OW 266
18270: PUSH
18271: LD_INT 1
18273: EQUAL
18274: AND
18275: IFFALSE 18448
18277: GO 18279
18279: DISABLE
18280: LD_INT 0
18282: PPUSH
18283: PPUSH
// begin enable ;
18284: ENABLE
// depot := HexInfo ( 84 , 128 ) ;
18285: LD_ADDR_VAR 0 2
18289: PUSH
18290: LD_INT 84
18292: PPUSH
18293: LD_INT 128
18295: PPUSH
18296: CALL_OW 428
18300: ST_TO_ADDR
// uc_side := 3 ;
18301: LD_ADDR_OWVAR 20
18305: PUSH
18306: LD_INT 3
18308: ST_TO_ADDR
// uc_nation := 3 ;
18309: LD_ADDR_OWVAR 21
18313: PUSH
18314: LD_INT 3
18316: ST_TO_ADDR
// PrepareVehicle ( ru_medium_wheeled , engine_siberite , control_computer , ru_cargo_bay , 0 ) ;
18317: LD_INT 21
18319: PPUSH
18320: LD_INT 3
18322: PPUSH
18323: LD_INT 3
18325: PPUSH
18326: LD_INT 51
18328: PPUSH
18329: LD_INT 0
18331: PPUSH
18332: CALL 26515 0 5
// veh := CreateVehicle ;
18336: LD_ADDR_VAR 0 1
18340: PUSH
18341: CALL_OW 45
18345: ST_TO_ADDR
// PlaceUnitXY ( veh , 126 , 227 , false ) ;
18346: LD_VAR 0 1
18350: PPUSH
18351: LD_INT 126
18353: PPUSH
18354: LD_INT 227
18356: PPUSH
18357: LD_INT 0
18359: PPUSH
18360: CALL_OW 48
// SetCargo ( veh , mat_oil , 100 ) ;
18364: LD_VAR 0 1
18368: PPUSH
18369: LD_INT 2
18371: PPUSH
18372: LD_INT 100
18374: PPUSH
18375: CALL_OW 290
// ComGive ( veh , depot ) ;
18379: LD_VAR 0 1
18383: PPUSH
18384: LD_VAR 0 2
18388: PPUSH
18389: CALL_OW 161
// AddComMoveXY ( veh , 126 , 227 ) ;
18393: LD_VAR 0 1
18397: PPUSH
18398: LD_INT 126
18400: PPUSH
18401: LD_INT 227
18403: PPUSH
18404: CALL_OW 171
// wait ( 0 0$10 ) ;
18408: LD_INT 350
18410: PPUSH
18411: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
18415: LD_INT 35
18417: PPUSH
18418: CALL_OW 67
// until IsAt ( veh , 126 , 227 ) ;
18422: LD_VAR 0 1
18426: PPUSH
18427: LD_INT 126
18429: PPUSH
18430: LD_INT 227
18432: PPUSH
18433: CALL_OW 307
18437: IFFALSE 18415
// RemoveUnit ( veh ) ;
18439: LD_VAR 0 1
18443: PPUSH
18444: CALL_OW 64
// end ;
18448: PPOPN 2
18450: END
// every 9 9$00 trigger GameType = 1 and outpostEscape and commander = 2 do var veh , depot ;
18451: LD_EXP 2
18455: PUSH
18456: LD_INT 1
18458: EQUAL
18459: PUSH
18460: LD_EXP 27
18464: AND
18465: PUSH
18466: LD_EXP 25
18470: PUSH
18471: LD_INT 2
18473: EQUAL
18474: AND
18475: IFFALSE 18667
18477: GO 18479
18479: DISABLE
18480: LD_INT 0
18482: PPUSH
18483: PPUSH
// begin enable ;
18484: ENABLE
// if tick >= [ 50 50$00 , 40 40$00 , 30 30$00 ] [ Difficulty ] then
18485: LD_OWVAR 1
18489: PUSH
18490: LD_INT 105000
18492: PUSH
18493: LD_INT 84000
18495: PUSH
18496: LD_INT 63000
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: LIST
18503: PUSH
18504: LD_OWVAR 67
18508: ARRAY
18509: GREATEREQUAL
18510: IFFALSE 18513
// disable ;
18512: DISABLE
// uc_side := 4 ;
18513: LD_ADDR_OWVAR 20
18517: PUSH
18518: LD_INT 4
18520: ST_TO_ADDR
// uc_nation := 1 ;
18521: LD_ADDR_OWVAR 21
18525: PUSH
18526: LD_INT 1
18528: ST_TO_ADDR
// PrepareVehicle ( us_medium_wheeled , engine_siberite , control_computer , us_cargo_bay , 0 ) ;
18529: LD_INT 2
18531: PPUSH
18532: LD_INT 3
18534: PPUSH
18535: LD_INT 3
18537: PPUSH
18538: LD_INT 12
18540: PPUSH
18541: LD_INT 0
18543: PPUSH
18544: CALL 26515 0 5
// veh := CreateVehicle ;
18548: LD_ADDR_VAR 0 1
18552: PUSH
18553: CALL_OW 45
18557: ST_TO_ADDR
// PlaceUnitXY ( veh , 229 , 226 , false ) ;
18558: LD_VAR 0 1
18562: PPUSH
18563: LD_INT 229
18565: PPUSH
18566: LD_INT 226
18568: PPUSH
18569: LD_INT 0
18571: PPUSH
18572: CALL_OW 48
// SetCargo ( veh , mat_cans , 100 ) ;
18576: LD_VAR 0 1
18580: PPUSH
18581: LD_INT 1
18583: PPUSH
18584: LD_INT 100
18586: PPUSH
18587: CALL_OW 290
// AddComMoveToArea ( veh , ruOutpostArea ) ;
18591: LD_VAR 0 1
18595: PPUSH
18596: LD_INT 25
18598: PPUSH
18599: CALL_OW 173
// AddComUnload ( veh ) ;
18603: LD_VAR 0 1
18607: PPUSH
18608: CALL_OW 219
// AddComMoveXY ( veh , 229 , 226 ) ;
18612: LD_VAR 0 1
18616: PPUSH
18617: LD_INT 229
18619: PPUSH
18620: LD_INT 226
18622: PPUSH
18623: CALL_OW 171
// wait ( 0 0$10 ) ;
18627: LD_INT 350
18629: PPUSH
18630: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
18634: LD_INT 35
18636: PPUSH
18637: CALL_OW 67
// until IsAt ( veh , 229 , 226 ) ;
18641: LD_VAR 0 1
18645: PPUSH
18646: LD_INT 229
18648: PPUSH
18649: LD_INT 226
18651: PPUSH
18652: CALL_OW 307
18656: IFFALSE 18634
// RemoveUnit ( veh ) ;
18658: LD_VAR 0 1
18662: PPUSH
18663: CALL_OW 64
// end ;
18667: PPOPN 2
18669: END
// every 15 15$00 trigger GameType = 1 and game and reinforceAllowed do var i , j , veh , tmp , amount ;
18670: LD_EXP 2
18674: PUSH
18675: LD_INT 1
18677: EQUAL
18678: PUSH
18679: LD_EXP 3
18683: AND
18684: PUSH
18685: LD_EXP 24
18689: AND
18690: IFFALSE 19023
18692: GO 18694
18694: DISABLE
18695: LD_INT 0
18697: PPUSH
18698: PPUSH
18699: PPUSH
18700: PPUSH
18701: PPUSH
// begin enable ;
18702: ENABLE
// tmp := [ ] ;
18703: LD_ADDR_VAR 0 4
18707: PUSH
18708: EMPTY
18709: ST_TO_ADDR
// if commander = 1 then
18710: LD_EXP 25
18714: PUSH
18715: LD_INT 1
18717: EQUAL
18718: IFFALSE 18730
// amount := 3 else
18720: LD_ADDR_VAR 0 5
18724: PUSH
18725: LD_INT 3
18727: ST_TO_ADDR
18728: GO 18738
// amount := 2 ;
18730: LD_ADDR_VAR 0 5
18734: PUSH
18735: LD_INT 2
18737: ST_TO_ADDR
// for i = 1 to amount do
18738: LD_ADDR_VAR 0 1
18742: PUSH
18743: DOUBLE
18744: LD_INT 1
18746: DEC
18747: ST_TO_ADDR
18748: LD_VAR 0 5
18752: PUSH
18753: FOR_TO
18754: IFFALSE 18918
// begin wait ( 0 0$5 ) ;
18756: LD_INT 175
18758: PPUSH
18759: CALL_OW 67
// for j = 1 to 3 do
18763: LD_ADDR_VAR 0 2
18767: PUSH
18768: DOUBLE
18769: LD_INT 1
18771: DEC
18772: ST_TO_ADDR
18773: LD_INT 3
18775: PUSH
18776: FOR_TO
18777: IFFALSE 18914
// begin uc_side := 4 ;
18779: LD_ADDR_OWVAR 20
18783: PUSH
18784: LD_INT 4
18786: ST_TO_ADDR
// uc_nation := 1 ;
18787: LD_ADDR_OWVAR 21
18791: PUSH
18792: LD_INT 1
18794: ST_TO_ADDR
// PrepareVehicle ( [ us_medium_tracked , us_morphling ] [ rand ( 1 , 2 ) ] , engine_siberite , control_computer , [ us_laser , us_double_gun , us_rocket_launcher ] [ rand ( 1 , 3 ) ] , 100 ) ;
18795: LD_INT 3
18797: PUSH
18798: LD_INT 5
18800: PUSH
18801: EMPTY
18802: LIST
18803: LIST
18804: PUSH
18805: LD_INT 1
18807: PPUSH
18808: LD_INT 2
18810: PPUSH
18811: CALL_OW 12
18815: ARRAY
18816: PPUSH
18817: LD_INT 3
18819: PPUSH
18820: LD_INT 3
18822: PPUSH
18823: LD_INT 9
18825: PUSH
18826: LD_INT 5
18828: PUSH
18829: LD_INT 7
18831: PUSH
18832: EMPTY
18833: LIST
18834: LIST
18835: LIST
18836: PUSH
18837: LD_INT 1
18839: PPUSH
18840: LD_INT 3
18842: PPUSH
18843: CALL_OW 12
18847: ARRAY
18848: PPUSH
18849: LD_INT 100
18851: PPUSH
18852: CALL 26515 0 5
// veh := CreateVehicle ;
18856: LD_ADDR_VAR 0 3
18860: PUSH
18861: CALL_OW 45
18865: ST_TO_ADDR
// tmp := tmp ^ veh ;
18866: LD_ADDR_VAR 0 4
18870: PUSH
18871: LD_VAR 0 4
18875: PUSH
18876: LD_VAR 0 3
18880: ADD
18881: ST_TO_ADDR
// PlaceUnitArea ( veh , westSpawn , false ) ;
18882: LD_VAR 0 3
18886: PPUSH
18887: LD_INT 22
18889: PPUSH
18890: LD_INT 0
18892: PPUSH
18893: CALL_OW 49
// ComMoveXY ( veh , 119 , 215 ) ;
18897: LD_VAR 0 3
18901: PPUSH
18902: LD_INT 119
18904: PPUSH
18905: LD_INT 215
18907: PPUSH
18908: CALL_OW 111
// end ;
18912: GO 18776
18914: POP
18915: POP
// end ;
18916: GO 18753
18918: POP
18919: POP
// wait ( 0 0$3 ) ;
18920: LD_INT 105
18922: PPUSH
18923: CALL_OW 67
// repeat wait ( 0 0$1 ) ;
18927: LD_INT 35
18929: PPUSH
18930: CALL_OW 67
// for i in tmp do
18934: LD_ADDR_VAR 0 1
18938: PUSH
18939: LD_VAR 0 4
18943: PUSH
18944: FOR_IN
18945: IFFALSE 19012
// if IsDead ( i ) then
18947: LD_VAR 0 1
18951: PPUSH
18952: CALL_OW 301
18956: IFFALSE 18976
// tmp := tmp diff i else
18958: LD_ADDR_VAR 0 4
18962: PUSH
18963: LD_VAR 0 4
18967: PUSH
18968: LD_VAR 0 1
18972: DIFF
18973: ST_TO_ADDR
18974: GO 19010
// ComAttackUnit ( i , NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , 4 ] ) , i ) ) ;
18976: LD_VAR 0 1
18980: PPUSH
18981: LD_INT 81
18983: PUSH
18984: LD_INT 4
18986: PUSH
18987: EMPTY
18988: LIST
18989: LIST
18990: PPUSH
18991: CALL_OW 69
18995: PPUSH
18996: LD_VAR 0 1
19000: PPUSH
19001: CALL_OW 74
19005: PPUSH
19006: CALL_OW 115
19010: GO 18944
19012: POP
19013: POP
// until tmp = [ ] ;
19014: LD_VAR 0 4
19018: PUSH
19019: EMPTY
19020: EQUAL
19021: IFFALSE 18927
// end ;
19023: PPOPN 5
19025: END
// every 0 0$1 trigger GameType = 1 and game do var i , tmp ;
19026: LD_EXP 2
19030: PUSH
19031: LD_INT 1
19033: EQUAL
19034: PUSH
19035: LD_EXP 3
19039: AND
19040: IFFALSE 19141
19042: GO 19044
19044: DISABLE
19045: LD_INT 0
19047: PPUSH
19048: PPUSH
// begin enable ;
19049: ENABLE
// tmp := FilterAllUnits ( [ [ f_not , [ f_side , 1 ] ] , [ f_engine , engine_combustion ] ] ) ;
19050: LD_ADDR_VAR 0 2
19054: PUSH
19055: LD_INT 3
19057: PUSH
19058: LD_INT 22
19060: PUSH
19061: LD_INT 1
19063: PUSH
19064: EMPTY
19065: LIST
19066: LIST
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PUSH
19072: LD_INT 32
19074: PUSH
19075: LD_INT 1
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: PPUSH
19086: CALL_OW 69
19090: ST_TO_ADDR
// if tmp then
19091: LD_VAR 0 2
19095: IFFALSE 19141
// for i in tmp do
19097: LD_ADDR_VAR 0 1
19101: PUSH
19102: LD_VAR 0 2
19106: PUSH
19107: FOR_IN
19108: IFFALSE 19139
// if GetFuel ( i ) < 3 then
19110: LD_VAR 0 1
19114: PPUSH
19115: CALL_OW 261
19119: PUSH
19120: LD_INT 3
19122: LESS
19123: IFFALSE 19137
// SetFuel ( i , 3 ) ;
19125: LD_VAR 0 1
19129: PPUSH
19130: LD_INT 3
19132: PPUSH
19133: CALL_OW 240
19137: GO 19107
19139: POP
19140: POP
// end ; end_of_file
19141: PPOPN 2
19143: END
// export function CustomEvent ( event ) ; begin
19144: LD_INT 0
19146: PPUSH
// end ;
19147: LD_VAR 0 2
19151: RET
// on Contact ( s1 , s2 ) do begin if s1 = 1 and s2 = 4 then
19152: LD_VAR 0 1
19156: PUSH
19157: LD_INT 1
19159: EQUAL
19160: PUSH
19161: LD_VAR 0 2
19165: PUSH
19166: LD_INT 4
19168: EQUAL
19169: AND
19170: IFFALSE 19198
// begin SayRadio ( Powell , DP-Lost ) ;
19172: LD_EXP 12
19176: PPUSH
19177: LD_STRING DP-Lost
19179: PPUSH
19180: CALL_OW 94
// wait ( 0 0$2 ) ;
19184: LD_INT 70
19186: PPUSH
19187: CALL_OW 67
// YouLost ( FriendlyFire ) ;
19191: LD_STRING FriendlyFire
19193: PPUSH
19194: CALL_OW 104
// end ; end ;
19198: PPOPN 2
19200: END
// on UnitDestroyed ( un ) do begin if GameType = 1 then
19201: LD_EXP 2
19205: PUSH
19206: LD_INT 1
19208: EQUAL
19209: IFFALSE 19444
// begin if un = playerCommander then
19211: LD_VAR 0 1
19215: PUSH
19216: LD_EXP 9
19220: EQUAL
19221: IFFALSE 19230
// YouLost ( commanderDied ) ;
19223: LD_STRING commanderDied
19225: PPUSH
19226: CALL_OW 104
// if un = allyCommander then
19230: LD_VAR 0 1
19234: PUSH
19235: LD_EXP 11
19239: EQUAL
19240: IFFALSE 19249
// YouLost ( Theta ) ;
19242: LD_STRING Theta
19244: PPUSH
19245: CALL_OW 104
// if un in FilterAllUnits ( [ [ f_side , 8 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
19249: LD_VAR 0 1
19253: PUSH
19254: LD_INT 22
19256: PUSH
19257: LD_INT 8
19259: PUSH
19260: EMPTY
19261: LIST
19262: LIST
19263: PUSH
19264: LD_INT 2
19266: PUSH
19267: LD_INT 21
19269: PUSH
19270: LD_INT 1
19272: PUSH
19273: EMPTY
19274: LIST
19275: LIST
19276: PUSH
19277: LD_INT 21
19279: PUSH
19280: LD_INT 3
19282: PUSH
19283: EMPTY
19284: LIST
19285: LIST
19286: PUSH
19287: EMPTY
19288: LIST
19289: LIST
19290: LIST
19291: PUSH
19292: EMPTY
19293: LIST
19294: LIST
19295: PPUSH
19296: CALL_OW 69
19300: IN
19301: IFFALSE 19317
// legDestCounter := legDestCounter + 1 ;
19303: LD_ADDR_EXP 18
19307: PUSH
19308: LD_EXP 18
19312: PUSH
19313: LD_INT 1
19315: PLUS
19316: ST_TO_ADDR
// if un in FilterAllUnits ( [ [ f_side , 4 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_building ] ] ] ) then
19317: LD_VAR 0 1
19321: PUSH
19322: LD_INT 22
19324: PUSH
19325: LD_INT 4
19327: PUSH
19328: EMPTY
19329: LIST
19330: LIST
19331: PUSH
19332: LD_INT 2
19334: PUSH
19335: LD_INT 21
19337: PUSH
19338: LD_INT 1
19340: PUSH
19341: EMPTY
19342: LIST
19343: LIST
19344: PUSH
19345: LD_INT 21
19347: PUSH
19348: LD_INT 3
19350: PUSH
19351: EMPTY
19352: LIST
19353: LIST
19354: PUSH
19355: EMPTY
19356: LIST
19357: LIST
19358: LIST
19359: PUSH
19360: EMPTY
19361: LIST
19362: LIST
19363: PPUSH
19364: CALL_OW 69
19368: IN
19369: IFFALSE 19385
// allyDestCounter := allyDestCounter + 1 ;
19371: LD_ADDR_EXP 22
19375: PUSH
19376: LD_EXP 22
19380: PUSH
19381: LD_INT 1
19383: PLUS
19384: ST_TO_ADDR
// if un in ruOutpost then
19385: LD_VAR 0 1
19389: PUSH
19390: LD_EXP 14
19394: IN
19395: IFFALSE 19444
// begin ruOutpost := ruOutpost diff un ;
19397: LD_ADDR_EXP 14
19401: PUSH
19402: LD_EXP 14
19406: PUSH
19407: LD_VAR 0 1
19411: DIFF
19412: ST_TO_ADDR
// ruEscape := Replace ( ruEscape , 1 , ruEscape [ 1 ] + 1 ) ;
19413: LD_ADDR_EXP 15
19417: PUSH
19418: LD_EXP 15
19422: PPUSH
19423: LD_INT 1
19425: PPUSH
19426: LD_EXP 15
19430: PUSH
19431: LD_INT 1
19433: ARRAY
19434: PUSH
19435: LD_INT 1
19437: PLUS
19438: PPUSH
19439: CALL_OW 1
19443: ST_TO_ADDR
// end ; end ; MCE_UnitDestroyed ( un ) ;
19444: LD_VAR 0 1
19448: PPUSH
19449: CALL 89111 0 1
// end ;
19453: PPOPN 1
19455: END
// on BuildingStarted ( building , builder ) do begin MCE_BuildingStarted ( building , builder ) ;
19456: LD_VAR 0 1
19460: PPUSH
19461: LD_VAR 0 2
19465: PPUSH
19466: CALL 91090 0 2
// end ;
19470: PPOPN 2
19472: END
// on UpgradeComplete ( building ) do begin MCE_UpgradeComplete ( building ) ;
19473: LD_VAR 0 1
19477: PPUSH
19478: CALL 90158 0 1
// end ;
19482: PPOPN 1
19484: END
// on BuildingComplete ( building ) do begin MCE_BuildingComplete ( building ) ;
19485: LD_VAR 0 1
19489: PPUSH
19490: CALL 90399 0 1
// end ;
19494: PPOPN 1
19496: END
// on ResearchComplete ( tech , lab ) do begin if tech = tech_LasDouble and GetSide ( lab ) = 1 then
19497: LD_VAR 0 1
19501: PUSH
19502: LD_INT 14
19504: EQUAL
19505: PUSH
19506: LD_VAR 0 2
19510: PPUSH
19511: CALL_OW 255
19515: PUSH
19516: LD_INT 1
19518: EQUAL
19519: AND
19520: IFFALSE 19561
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Laser ) ;
19522: LD_EXP 9
19526: PPUSH
19527: LD_STRING D
19529: PUSH
19530: LD_STRING I
19532: PUSH
19533: LD_STRING J
19535: PUSH
19536: LD_STRING S
19538: PUSH
19539: EMPTY
19540: LIST
19541: LIST
19542: LIST
19543: PUSH
19544: LD_EXP 25
19548: ARRAY
19549: STR
19550: PUSH
19551: LD_STRING -1-Laser
19553: STR
19554: PPUSH
19555: CALL_OW 88
// exit ;
19559: GO 19703
// end ; if tech = tech_MatDet and GetSide ( lab ) = 1 then
19561: LD_VAR 0 1
19565: PUSH
19566: LD_INT 7
19568: EQUAL
19569: PUSH
19570: LD_VAR 0 2
19574: PPUSH
19575: CALL_OW 255
19579: PUSH
19580: LD_INT 1
19582: EQUAL
19583: AND
19584: IFFALSE 19625
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Materialization ) ;
19586: LD_EXP 9
19590: PPUSH
19591: LD_STRING D
19593: PUSH
19594: LD_STRING I
19596: PUSH
19597: LD_STRING J
19599: PUSH
19600: LD_STRING S
19602: PUSH
19603: EMPTY
19604: LIST
19605: LIST
19606: LIST
19607: PUSH
19608: LD_EXP 25
19612: ARRAY
19613: STR
19614: PUSH
19615: LD_STRING -1-Materialization
19617: STR
19618: PPUSH
19619: CALL_OW 88
// exit ;
19623: GO 19703
// end ; if tech = tech_SibFiss and GetSide ( lab ) = 1 then
19625: LD_VAR 0 1
19629: PUSH
19630: LD_INT 25
19632: EQUAL
19633: PUSH
19634: LD_VAR 0 2
19638: PPUSH
19639: CALL_OW 255
19643: PUSH
19644: LD_INT 1
19646: EQUAL
19647: AND
19648: IFFALSE 19689
// begin Say ( playerCommander , D & [ I , J , S ] [ commander ] & -1-Rocket ) ;
19650: LD_EXP 9
19654: PPUSH
19655: LD_STRING D
19657: PUSH
19658: LD_STRING I
19660: PUSH
19661: LD_STRING J
19663: PUSH
19664: LD_STRING S
19666: PUSH
19667: EMPTY
19668: LIST
19669: LIST
19670: LIST
19671: PUSH
19672: LD_EXP 25
19676: ARRAY
19677: STR
19678: PUSH
19679: LD_STRING -1-Rocket
19681: STR
19682: PPUSH
19683: CALL_OW 88
// exit ;
19687: GO 19703
// end ; MCE_ResearchComplete ( tech , lab ) ;
19689: LD_VAR 0 1
19693: PPUSH
19694: LD_VAR 0 2
19698: PPUSH
19699: CALL 88807 0 2
// end ;
19703: PPOPN 2
19705: END
// on CrateSpawn ( id , x , y , amount , mode ) do begin MCE_CrateSpawn ( id , x , y , amount , mode ) ;
19706: LD_VAR 0 1
19710: PPUSH
19711: LD_VAR 0 2
19715: PPUSH
19716: LD_VAR 0 3
19720: PPUSH
19721: LD_VAR 0 4
19725: PPUSH
19726: LD_VAR 0 5
19730: PPUSH
19731: CALL 88427 0 5
// end ;
19735: PPOPN 5
19737: END
// on VehicleConstructed ( vehicle , factory ) do begin MCE_VehicleConstructed ( vehicle , factory ) ;
19738: LD_VAR 0 1
19742: PPUSH
19743: LD_VAR 0 2
19747: PPUSH
19748: CALL 88017 0 2
// end ;
19752: PPOPN 2
19754: END
// on VehicleCaptured ( new , old , side , capturing_unit ) do begin MCE_VehicleCaptured ( new , old , side , capturing_unit ) ;
19755: LD_VAR 0 1
19759: PPUSH
19760: LD_VAR 0 2
19764: PPUSH
19765: LD_VAR 0 3
19769: PPUSH
19770: LD_VAR 0 4
19774: PPUSH
19775: CALL 87855 0 4
// end ;
19779: PPOPN 4
19781: END
// on BuildingCaptured ( building , side , capturning_unit ) do begin MCE_BuildingCaptured ( building , side , capturning_unit ) ;
19782: LD_VAR 0 1
19786: PPUSH
19787: LD_VAR 0 2
19791: PPUSH
19792: LD_VAR 0 3
19796: PPUSH
19797: CALL 87630 0 3
// end ;
19801: PPOPN 3
19803: END
// on EnterBuilding ( building , unit ) do begin MCE_EnterBuilding ( building , unit ) ;
19804: LD_VAR 0 1
19808: PPUSH
19809: LD_VAR 0 2
19813: PPUSH
19814: CALL 87515 0 2
// end ;
19818: PPOPN 2
19820: END
// on LeaveBuilding ( building , unit ) do begin MCE_LeaveBuilding ( building , unit ) ;
19821: LD_VAR 0 1
19825: PPUSH
19826: LD_VAR 0 2
19830: PPUSH
19831: CALL 91351 0 2
// end ;
19835: PPOPN 2
19837: END
// on EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) do begin MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ;
19838: LD_VAR 0 1
19842: PPUSH
19843: LD_VAR 0 2
19847: PPUSH
19848: LD_VAR 0 3
19852: PPUSH
19853: LD_VAR 0 4
19857: PPUSH
19858: CALL 91567 0 4
// end ;
19862: PPOPN 4
19864: END
// on ApemanTamed ( ape , sci ) do begin MCE_ApemanTamed ( ape , sci ) ;
19865: LD_VAR 0 1
19869: PPUSH
19870: LD_VAR 0 2
19874: PPUSH
19875: CALL 87324 0 2
// end ; end_of_file
19879: PPOPN 2
19881: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
19882: LD_INT 0
19884: PPUSH
19885: PPUSH
// if exist_mode then
19886: LD_VAR 0 2
19890: IFFALSE 19915
// unit := CreateCharacter ( prefix & ident ) else
19892: LD_ADDR_VAR 0 5
19896: PUSH
19897: LD_VAR 0 3
19901: PUSH
19902: LD_VAR 0 1
19906: STR
19907: PPUSH
19908: CALL_OW 34
19912: ST_TO_ADDR
19913: GO 19930
// unit := NewCharacter ( ident ) ;
19915: LD_ADDR_VAR 0 5
19919: PUSH
19920: LD_VAR 0 1
19924: PPUSH
19925: CALL_OW 25
19929: ST_TO_ADDR
// result := unit ;
19930: LD_ADDR_VAR 0 4
19934: PUSH
19935: LD_VAR 0 5
19939: ST_TO_ADDR
// end ;
19940: LD_VAR 0 4
19944: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
19945: LD_INT 0
19947: PPUSH
19948: PPUSH
// if not side or not nation then
19949: LD_VAR 0 1
19953: NOT
19954: PUSH
19955: LD_VAR 0 2
19959: NOT
19960: OR
19961: IFFALSE 19965
// exit ;
19963: GO 20601
// case nation of nation_american :
19965: LD_VAR 0 2
19969: PUSH
19970: LD_INT 1
19972: DOUBLE
19973: EQUAL
19974: IFTRUE 19978
19976: GO 20148
19978: POP
// result := [ 35 , 45 , 46 , 47 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 ] ; nation_arabian :
19979: LD_ADDR_VAR 0 4
19983: PUSH
19984: LD_INT 35
19986: PUSH
19987: LD_INT 45
19989: PUSH
19990: LD_INT 46
19992: PUSH
19993: LD_INT 47
19995: PUSH
19996: LD_INT 1
19998: PUSH
19999: LD_INT 2
20001: PUSH
20002: LD_INT 6
20004: PUSH
20005: LD_INT 15
20007: PUSH
20008: LD_INT 16
20010: PUSH
20011: LD_INT 7
20013: PUSH
20014: LD_INT 12
20016: PUSH
20017: LD_INT 13
20019: PUSH
20020: LD_INT 10
20022: PUSH
20023: LD_INT 14
20025: PUSH
20026: LD_INT 20
20028: PUSH
20029: LD_INT 21
20031: PUSH
20032: LD_INT 22
20034: PUSH
20035: LD_INT 25
20037: PUSH
20038: LD_INT 32
20040: PUSH
20041: LD_INT 27
20043: PUSH
20044: LD_INT 36
20046: PUSH
20047: LD_INT 69
20049: PUSH
20050: LD_INT 39
20052: PUSH
20053: LD_INT 34
20055: PUSH
20056: LD_INT 40
20058: PUSH
20059: LD_INT 48
20061: PUSH
20062: LD_INT 49
20064: PUSH
20065: LD_INT 50
20067: PUSH
20068: LD_INT 51
20070: PUSH
20071: LD_INT 52
20073: PUSH
20074: LD_INT 53
20076: PUSH
20077: LD_INT 54
20079: PUSH
20080: LD_INT 55
20082: PUSH
20083: LD_INT 56
20085: PUSH
20086: LD_INT 57
20088: PUSH
20089: LD_INT 58
20091: PUSH
20092: LD_INT 59
20094: PUSH
20095: LD_INT 60
20097: PUSH
20098: LD_INT 61
20100: PUSH
20101: LD_INT 62
20103: PUSH
20104: EMPTY
20105: LIST
20106: LIST
20107: LIST
20108: LIST
20109: LIST
20110: LIST
20111: LIST
20112: LIST
20113: LIST
20114: LIST
20115: LIST
20116: LIST
20117: LIST
20118: LIST
20119: LIST
20120: LIST
20121: LIST
20122: LIST
20123: LIST
20124: LIST
20125: LIST
20126: LIST
20127: LIST
20128: LIST
20129: LIST
20130: LIST
20131: LIST
20132: LIST
20133: LIST
20134: LIST
20135: LIST
20136: LIST
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: LIST
20142: LIST
20143: LIST
20144: LIST
20145: ST_TO_ADDR
20146: GO 20525
20148: LD_INT 2
20150: DOUBLE
20151: EQUAL
20152: IFTRUE 20156
20154: GO 20334
20156: POP
// result := [ 35 , 45 , 46 , 47 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 ] ; nation_russian :
20157: LD_ADDR_VAR 0 4
20161: PUSH
20162: LD_INT 35
20164: PUSH
20165: LD_INT 45
20167: PUSH
20168: LD_INT 46
20170: PUSH
20171: LD_INT 47
20173: PUSH
20174: LD_INT 70
20176: PUSH
20177: LD_INT 1
20179: PUSH
20180: LD_INT 11
20182: PUSH
20183: LD_INT 3
20185: PUSH
20186: LD_INT 4
20188: PUSH
20189: LD_INT 5
20191: PUSH
20192: LD_INT 6
20194: PUSH
20195: LD_INT 15
20197: PUSH
20198: LD_INT 18
20200: PUSH
20201: LD_INT 7
20203: PUSH
20204: LD_INT 17
20206: PUSH
20207: LD_INT 8
20209: PUSH
20210: LD_INT 20
20212: PUSH
20213: LD_INT 21
20215: PUSH
20216: LD_INT 22
20218: PUSH
20219: LD_INT 72
20221: PUSH
20222: LD_INT 26
20224: PUSH
20225: LD_INT 69
20227: PUSH
20228: LD_INT 39
20230: PUSH
20231: LD_INT 40
20233: PUSH
20234: LD_INT 41
20236: PUSH
20237: LD_INT 42
20239: PUSH
20240: LD_INT 43
20242: PUSH
20243: LD_INT 48
20245: PUSH
20246: LD_INT 49
20248: PUSH
20249: LD_INT 50
20251: PUSH
20252: LD_INT 51
20254: PUSH
20255: LD_INT 52
20257: PUSH
20258: LD_INT 53
20260: PUSH
20261: LD_INT 54
20263: PUSH
20264: LD_INT 55
20266: PUSH
20267: LD_INT 56
20269: PUSH
20270: LD_INT 60
20272: PUSH
20273: LD_INT 61
20275: PUSH
20276: LD_INT 62
20278: PUSH
20279: LD_INT 66
20281: PUSH
20282: LD_INT 67
20284: PUSH
20285: LD_INT 68
20287: PUSH
20288: EMPTY
20289: LIST
20290: LIST
20291: LIST
20292: LIST
20293: LIST
20294: LIST
20295: LIST
20296: LIST
20297: LIST
20298: LIST
20299: LIST
20300: LIST
20301: LIST
20302: LIST
20303: LIST
20304: LIST
20305: LIST
20306: LIST
20307: LIST
20308: LIST
20309: LIST
20310: LIST
20311: LIST
20312: LIST
20313: LIST
20314: LIST
20315: LIST
20316: LIST
20317: LIST
20318: LIST
20319: LIST
20320: LIST
20321: LIST
20322: LIST
20323: LIST
20324: LIST
20325: LIST
20326: LIST
20327: LIST
20328: LIST
20329: LIST
20330: LIST
20331: ST_TO_ADDR
20332: GO 20525
20334: LD_INT 3
20336: DOUBLE
20337: EQUAL
20338: IFTRUE 20342
20340: GO 20524
20342: POP
// result := [ 46 , 47 , 1 , 2 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 ] ; end ;
20343: LD_ADDR_VAR 0 4
20347: PUSH
20348: LD_INT 46
20350: PUSH
20351: LD_INT 47
20353: PUSH
20354: LD_INT 1
20356: PUSH
20357: LD_INT 2
20359: PUSH
20360: LD_INT 11
20362: PUSH
20363: LD_INT 9
20365: PUSH
20366: LD_INT 20
20368: PUSH
20369: LD_INT 19
20371: PUSH
20372: LD_INT 21
20374: PUSH
20375: LD_INT 24
20377: PUSH
20378: LD_INT 22
20380: PUSH
20381: LD_INT 25
20383: PUSH
20384: LD_INT 28
20386: PUSH
20387: LD_INT 29
20389: PUSH
20390: LD_INT 30
20392: PUSH
20393: LD_INT 31
20395: PUSH
20396: LD_INT 37
20398: PUSH
20399: LD_INT 38
20401: PUSH
20402: LD_INT 32
20404: PUSH
20405: LD_INT 27
20407: PUSH
20408: LD_INT 33
20410: PUSH
20411: LD_INT 69
20413: PUSH
20414: LD_INT 39
20416: PUSH
20417: LD_INT 34
20419: PUSH
20420: LD_INT 40
20422: PUSH
20423: LD_INT 71
20425: PUSH
20426: LD_INT 23
20428: PUSH
20429: LD_INT 44
20431: PUSH
20432: LD_INT 48
20434: PUSH
20435: LD_INT 49
20437: PUSH
20438: LD_INT 50
20440: PUSH
20441: LD_INT 51
20443: PUSH
20444: LD_INT 52
20446: PUSH
20447: LD_INT 53
20449: PUSH
20450: LD_INT 54
20452: PUSH
20453: LD_INT 55
20455: PUSH
20456: LD_INT 56
20458: PUSH
20459: LD_INT 57
20461: PUSH
20462: LD_INT 58
20464: PUSH
20465: LD_INT 59
20467: PUSH
20468: LD_INT 63
20470: PUSH
20471: LD_INT 64
20473: PUSH
20474: LD_INT 65
20476: PUSH
20477: EMPTY
20478: LIST
20479: LIST
20480: LIST
20481: LIST
20482: LIST
20483: LIST
20484: LIST
20485: LIST
20486: LIST
20487: LIST
20488: LIST
20489: LIST
20490: LIST
20491: LIST
20492: LIST
20493: LIST
20494: LIST
20495: LIST
20496: LIST
20497: LIST
20498: LIST
20499: LIST
20500: LIST
20501: LIST
20502: LIST
20503: LIST
20504: LIST
20505: LIST
20506: LIST
20507: LIST
20508: LIST
20509: LIST
20510: LIST
20511: LIST
20512: LIST
20513: LIST
20514: LIST
20515: LIST
20516: LIST
20517: LIST
20518: LIST
20519: LIST
20520: LIST
20521: ST_TO_ADDR
20522: GO 20525
20524: POP
// if state > - 1 and state < 3 then
20525: LD_VAR 0 3
20529: PUSH
20530: LD_INT 1
20532: NEG
20533: GREATER
20534: PUSH
20535: LD_VAR 0 3
20539: PUSH
20540: LD_INT 3
20542: LESS
20543: AND
20544: IFFALSE 20601
// for i in result do
20546: LD_ADDR_VAR 0 5
20550: PUSH
20551: LD_VAR 0 4
20555: PUSH
20556: FOR_IN
20557: IFFALSE 20599
// if GetTech ( i , side ) <> state then
20559: LD_VAR 0 5
20563: PPUSH
20564: LD_VAR 0 1
20568: PPUSH
20569: CALL_OW 321
20573: PUSH
20574: LD_VAR 0 3
20578: NONEQUAL
20579: IFFALSE 20597
// result := result diff i ;
20581: LD_ADDR_VAR 0 4
20585: PUSH
20586: LD_VAR 0 4
20590: PUSH
20591: LD_VAR 0 5
20595: DIFF
20596: ST_TO_ADDR
20597: GO 20556
20599: POP
20600: POP
// end ;
20601: LD_VAR 0 4
20605: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
20606: LD_INT 0
20608: PPUSH
20609: PPUSH
20610: PPUSH
// result := true ;
20611: LD_ADDR_VAR 0 3
20615: PUSH
20616: LD_INT 1
20618: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
20619: LD_ADDR_VAR 0 5
20623: PUSH
20624: LD_VAR 0 2
20628: PPUSH
20629: CALL_OW 480
20633: ST_TO_ADDR
// if not tmp then
20634: LD_VAR 0 5
20638: NOT
20639: IFFALSE 20643
// exit ;
20641: GO 20692
// for i in tmp do
20643: LD_ADDR_VAR 0 4
20647: PUSH
20648: LD_VAR 0 5
20652: PUSH
20653: FOR_IN
20654: IFFALSE 20690
// if GetTech ( i , side ) <> state_researched then
20656: LD_VAR 0 4
20660: PPUSH
20661: LD_VAR 0 1
20665: PPUSH
20666: CALL_OW 321
20670: PUSH
20671: LD_INT 2
20673: NONEQUAL
20674: IFFALSE 20688
// begin result := false ;
20676: LD_ADDR_VAR 0 3
20680: PUSH
20681: LD_INT 0
20683: ST_TO_ADDR
// exit ;
20684: POP
20685: POP
20686: GO 20692
// end ;
20688: GO 20653
20690: POP
20691: POP
// end ;
20692: LD_VAR 0 3
20696: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
20697: LD_INT 0
20699: PPUSH
20700: PPUSH
20701: PPUSH
20702: PPUSH
20703: PPUSH
20704: PPUSH
20705: PPUSH
20706: PPUSH
20707: PPUSH
20708: PPUSH
20709: PPUSH
20710: PPUSH
20711: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
20712: LD_VAR 0 1
20716: NOT
20717: PUSH
20718: LD_VAR 0 1
20722: PPUSH
20723: CALL_OW 257
20727: PUSH
20728: LD_INT 9
20730: NONEQUAL
20731: OR
20732: IFFALSE 20736
// exit ;
20734: GO 21309
// side := GetSide ( unit ) ;
20736: LD_ADDR_VAR 0 9
20740: PUSH
20741: LD_VAR 0 1
20745: PPUSH
20746: CALL_OW 255
20750: ST_TO_ADDR
// tech_space := tech_spacanom ;
20751: LD_ADDR_VAR 0 12
20755: PUSH
20756: LD_INT 29
20758: ST_TO_ADDR
// tech_time := tech_taurad ;
20759: LD_ADDR_VAR 0 13
20763: PUSH
20764: LD_INT 28
20766: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
20767: LD_ADDR_VAR 0 11
20771: PUSH
20772: LD_VAR 0 1
20776: PPUSH
20777: CALL_OW 310
20781: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
20782: LD_VAR 0 11
20786: PPUSH
20787: CALL_OW 247
20791: PUSH
20792: LD_INT 2
20794: EQUAL
20795: IFFALSE 20799
// exit ;
20797: GO 21309
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
20799: LD_ADDR_VAR 0 8
20803: PUSH
20804: LD_INT 81
20806: PUSH
20807: LD_VAR 0 9
20811: PUSH
20812: EMPTY
20813: LIST
20814: LIST
20815: PUSH
20816: LD_INT 3
20818: PUSH
20819: LD_INT 21
20821: PUSH
20822: LD_INT 3
20824: PUSH
20825: EMPTY
20826: LIST
20827: LIST
20828: PUSH
20829: EMPTY
20830: LIST
20831: LIST
20832: PUSH
20833: EMPTY
20834: LIST
20835: LIST
20836: PPUSH
20837: CALL_OW 69
20841: ST_TO_ADDR
// if not tmp then
20842: LD_VAR 0 8
20846: NOT
20847: IFFALSE 20851
// exit ;
20849: GO 21309
// if in_unit then
20851: LD_VAR 0 11
20855: IFFALSE 20879
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
20857: LD_ADDR_VAR 0 10
20861: PUSH
20862: LD_VAR 0 8
20866: PPUSH
20867: LD_VAR 0 11
20871: PPUSH
20872: CALL_OW 74
20876: ST_TO_ADDR
20877: GO 20899
// enemy := NearestUnitToUnit ( tmp , unit ) ;
20879: LD_ADDR_VAR 0 10
20883: PUSH
20884: LD_VAR 0 8
20888: PPUSH
20889: LD_VAR 0 1
20893: PPUSH
20894: CALL_OW 74
20898: ST_TO_ADDR
// if not enemy then
20899: LD_VAR 0 10
20903: NOT
20904: IFFALSE 20908
// exit ;
20906: GO 21309
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
20908: LD_VAR 0 11
20912: PUSH
20913: LD_VAR 0 11
20917: PPUSH
20918: LD_VAR 0 10
20922: PPUSH
20923: CALL_OW 296
20927: PUSH
20928: LD_INT 13
20930: GREATER
20931: AND
20932: PUSH
20933: LD_VAR 0 1
20937: PPUSH
20938: LD_VAR 0 10
20942: PPUSH
20943: CALL_OW 296
20947: PUSH
20948: LD_INT 12
20950: GREATER
20951: OR
20952: IFFALSE 20956
// exit ;
20954: GO 21309
// missile := [ 1 ] ;
20956: LD_ADDR_VAR 0 14
20960: PUSH
20961: LD_INT 1
20963: PUSH
20964: EMPTY
20965: LIST
20966: ST_TO_ADDR
// if Researched ( side , tech_space ) then
20967: LD_VAR 0 9
20971: PPUSH
20972: LD_VAR 0 12
20976: PPUSH
20977: CALL_OW 325
20981: IFFALSE 21010
// missile := Insert ( missile , missile + 1 , 2 ) ;
20983: LD_ADDR_VAR 0 14
20987: PUSH
20988: LD_VAR 0 14
20992: PPUSH
20993: LD_VAR 0 14
20997: PUSH
20998: LD_INT 1
21000: PLUS
21001: PPUSH
21002: LD_INT 2
21004: PPUSH
21005: CALL_OW 2
21009: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
21010: LD_VAR 0 9
21014: PPUSH
21015: LD_VAR 0 13
21019: PPUSH
21020: CALL_OW 325
21024: PUSH
21025: LD_VAR 0 10
21029: PPUSH
21030: CALL_OW 255
21034: PPUSH
21035: LD_VAR 0 13
21039: PPUSH
21040: CALL_OW 325
21044: NOT
21045: AND
21046: IFFALSE 21075
// missile := Insert ( missile , missile + 1 , 3 ) ;
21048: LD_ADDR_VAR 0 14
21052: PUSH
21053: LD_VAR 0 14
21057: PPUSH
21058: LD_VAR 0 14
21062: PUSH
21063: LD_INT 1
21065: PLUS
21066: PPUSH
21067: LD_INT 3
21069: PPUSH
21070: CALL_OW 2
21074: ST_TO_ADDR
// if missile < 2 then
21075: LD_VAR 0 14
21079: PUSH
21080: LD_INT 2
21082: LESS
21083: IFFALSE 21087
// exit ;
21085: GO 21309
// x := GetX ( enemy ) ;
21087: LD_ADDR_VAR 0 4
21091: PUSH
21092: LD_VAR 0 10
21096: PPUSH
21097: CALL_OW 250
21101: ST_TO_ADDR
// y := GetY ( enemy ) ;
21102: LD_ADDR_VAR 0 5
21106: PUSH
21107: LD_VAR 0 10
21111: PPUSH
21112: CALL_OW 251
21116: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
21117: LD_ADDR_VAR 0 6
21121: PUSH
21122: LD_VAR 0 4
21126: PUSH
21127: LD_INT 1
21129: NEG
21130: PPUSH
21131: LD_INT 1
21133: PPUSH
21134: CALL_OW 12
21138: PLUS
21139: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
21140: LD_ADDR_VAR 0 7
21144: PUSH
21145: LD_VAR 0 5
21149: PUSH
21150: LD_INT 1
21152: NEG
21153: PPUSH
21154: LD_INT 1
21156: PPUSH
21157: CALL_OW 12
21161: PLUS
21162: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21163: LD_VAR 0 6
21167: PPUSH
21168: LD_VAR 0 7
21172: PPUSH
21173: CALL_OW 488
21177: NOT
21178: IFFALSE 21200
// begin _x := x ;
21180: LD_ADDR_VAR 0 6
21184: PUSH
21185: LD_VAR 0 4
21189: ST_TO_ADDR
// _y := y ;
21190: LD_ADDR_VAR 0 7
21194: PUSH
21195: LD_VAR 0 5
21199: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
21200: LD_ADDR_VAR 0 3
21204: PUSH
21205: LD_INT 1
21207: PPUSH
21208: LD_VAR 0 14
21212: PPUSH
21213: CALL_OW 12
21217: ST_TO_ADDR
// case i of 1 :
21218: LD_VAR 0 3
21222: PUSH
21223: LD_INT 1
21225: DOUBLE
21226: EQUAL
21227: IFTRUE 21231
21229: GO 21248
21231: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
21232: LD_VAR 0 1
21236: PPUSH
21237: LD_VAR 0 10
21241: PPUSH
21242: CALL_OW 115
21246: GO 21309
21248: LD_INT 2
21250: DOUBLE
21251: EQUAL
21252: IFTRUE 21256
21254: GO 21278
21256: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
21257: LD_VAR 0 1
21261: PPUSH
21262: LD_VAR 0 6
21266: PPUSH
21267: LD_VAR 0 7
21271: PPUSH
21272: CALL_OW 153
21276: GO 21309
21278: LD_INT 3
21280: DOUBLE
21281: EQUAL
21282: IFTRUE 21286
21284: GO 21308
21286: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
21287: LD_VAR 0 1
21291: PPUSH
21292: LD_VAR 0 6
21296: PPUSH
21297: LD_VAR 0 7
21301: PPUSH
21302: CALL_OW 154
21306: GO 21309
21308: POP
// end ;
21309: LD_VAR 0 2
21313: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
21314: LD_INT 0
21316: PPUSH
21317: PPUSH
21318: PPUSH
21319: PPUSH
21320: PPUSH
21321: PPUSH
// if not unit or not building then
21322: LD_VAR 0 1
21326: NOT
21327: PUSH
21328: LD_VAR 0 2
21332: NOT
21333: OR
21334: IFFALSE 21338
// exit ;
21336: GO 21496
// x := GetX ( building ) ;
21338: LD_ADDR_VAR 0 5
21342: PUSH
21343: LD_VAR 0 2
21347: PPUSH
21348: CALL_OW 250
21352: ST_TO_ADDR
// y := GetY ( building ) ;
21353: LD_ADDR_VAR 0 6
21357: PUSH
21358: LD_VAR 0 2
21362: PPUSH
21363: CALL_OW 251
21367: ST_TO_ADDR
// for i = 0 to 5 do
21368: LD_ADDR_VAR 0 4
21372: PUSH
21373: DOUBLE
21374: LD_INT 0
21376: DEC
21377: ST_TO_ADDR
21378: LD_INT 5
21380: PUSH
21381: FOR_TO
21382: IFFALSE 21494
// begin _x := ShiftX ( x , i , 3 ) ;
21384: LD_ADDR_VAR 0 7
21388: PUSH
21389: LD_VAR 0 5
21393: PPUSH
21394: LD_VAR 0 4
21398: PPUSH
21399: LD_INT 3
21401: PPUSH
21402: CALL_OW 272
21406: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
21407: LD_ADDR_VAR 0 8
21411: PUSH
21412: LD_VAR 0 6
21416: PPUSH
21417: LD_VAR 0 4
21421: PPUSH
21422: LD_INT 3
21424: PPUSH
21425: CALL_OW 273
21429: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
21430: LD_VAR 0 7
21434: PPUSH
21435: LD_VAR 0 8
21439: PPUSH
21440: CALL_OW 488
21444: NOT
21445: IFFALSE 21449
// continue ;
21447: GO 21381
// if HexInfo ( _x , _y ) = 0 then
21449: LD_VAR 0 7
21453: PPUSH
21454: LD_VAR 0 8
21458: PPUSH
21459: CALL_OW 428
21463: PUSH
21464: LD_INT 0
21466: EQUAL
21467: IFFALSE 21492
// begin ComMoveXY ( unit , _x , _y ) ;
21469: LD_VAR 0 1
21473: PPUSH
21474: LD_VAR 0 7
21478: PPUSH
21479: LD_VAR 0 8
21483: PPUSH
21484: CALL_OW 111
// exit ;
21488: POP
21489: POP
21490: GO 21496
// end ; end ;
21492: GO 21381
21494: POP
21495: POP
// end ;
21496: LD_VAR 0 3
21500: RET
// export function ScanBase ( side , base_area ) ; begin
21501: LD_INT 0
21503: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
21504: LD_ADDR_VAR 0 3
21508: PUSH
21509: LD_VAR 0 2
21513: PPUSH
21514: LD_INT 81
21516: PUSH
21517: LD_VAR 0 1
21521: PUSH
21522: EMPTY
21523: LIST
21524: LIST
21525: PPUSH
21526: CALL_OW 70
21530: ST_TO_ADDR
// end ;
21531: LD_VAR 0 3
21535: RET
// export function BasicDefend ( base , solds , area ) ; var enemy , side , i , hex ; begin
21536: LD_INT 0
21538: PPUSH
21539: PPUSH
21540: PPUSH
21541: PPUSH
21542: PPUSH
// if not base or not mc_bases [ base ] or not solds or not area then
21543: LD_VAR 0 1
21547: NOT
21548: PUSH
21549: LD_EXP 36
21553: PUSH
21554: LD_VAR 0 1
21558: ARRAY
21559: NOT
21560: OR
21561: PUSH
21562: LD_VAR 0 2
21566: NOT
21567: OR
21568: PUSH
21569: LD_VAR 0 3
21573: NOT
21574: OR
21575: IFFALSE 21579
// exit ;
21577: GO 22029
// side := mc_sides [ base ] ;
21579: LD_ADDR_VAR 0 6
21583: PUSH
21584: LD_EXP 62
21588: PUSH
21589: LD_VAR 0 1
21593: ARRAY
21594: ST_TO_ADDR
// if not side then
21595: LD_VAR 0 6
21599: NOT
21600: IFFALSE 21604
// exit ;
21602: GO 22029
// for i in solds do
21604: LD_ADDR_VAR 0 7
21608: PUSH
21609: LD_VAR 0 2
21613: PUSH
21614: FOR_IN
21615: IFFALSE 21676
// if GetBType ( IsInUnit ( i ) ) in [ b_bunker , b_breastwork ] then
21617: LD_VAR 0 7
21621: PPUSH
21622: CALL_OW 310
21626: PPUSH
21627: CALL_OW 266
21631: PUSH
21632: LD_INT 32
21634: PUSH
21635: LD_INT 31
21637: PUSH
21638: EMPTY
21639: LIST
21640: LIST
21641: IN
21642: IFFALSE 21662
// solds := solds diff i else
21644: LD_ADDR_VAR 0 2
21648: PUSH
21649: LD_VAR 0 2
21653: PUSH
21654: LD_VAR 0 7
21658: DIFF
21659: ST_TO_ADDR
21660: GO 21674
// SetTag ( i , 18 ) ;
21662: LD_VAR 0 7
21666: PPUSH
21667: LD_INT 18
21669: PPUSH
21670: CALL_OW 109
21674: GO 21614
21676: POP
21677: POP
// if not solds then
21678: LD_VAR 0 2
21682: NOT
21683: IFFALSE 21687
// exit ;
21685: GO 22029
// repeat wait ( 0 0$1 ) ;
21687: LD_INT 35
21689: PPUSH
21690: CALL_OW 67
// enemy := ScanBase ( side , area ) ;
21694: LD_ADDR_VAR 0 5
21698: PUSH
21699: LD_VAR 0 6
21703: PPUSH
21704: LD_VAR 0 3
21708: PPUSH
21709: CALL 21501 0 2
21713: ST_TO_ADDR
// if not enemy or enemy > 3 or mc_defender [ base ] then
21714: LD_VAR 0 5
21718: NOT
21719: PUSH
21720: LD_VAR 0 5
21724: PUSH
21725: LD_INT 3
21727: GREATER
21728: OR
21729: PUSH
21730: LD_EXP 58
21734: PUSH
21735: LD_VAR 0 1
21739: ARRAY
21740: OR
21741: IFFALSE 21782
// begin for i in solds do
21743: LD_ADDR_VAR 0 7
21747: PUSH
21748: LD_VAR 0 2
21752: PUSH
21753: FOR_IN
21754: IFFALSE 21778
// if HasTask ( i ) then
21756: LD_VAR 0 7
21760: PPUSH
21761: CALL_OW 314
21765: IFFALSE 21776
// ComStop ( i ) ;
21767: LD_VAR 0 7
21771: PPUSH
21772: CALL_OW 141
21776: GO 21753
21778: POP
21779: POP
// break ;
21780: GO 22017
// end ; for i in solds do
21782: LD_ADDR_VAR 0 7
21786: PUSH
21787: LD_VAR 0 2
21791: PUSH
21792: FOR_IN
21793: IFFALSE 22009
// begin if IsInUnit ( i ) then
21795: LD_VAR 0 7
21799: PPUSH
21800: CALL_OW 310
21804: IFFALSE 21815
// ComExitBuilding ( i ) ;
21806: LD_VAR 0 7
21810: PPUSH
21811: CALL_OW 122
// if GetLives ( i ) > 333 then
21815: LD_VAR 0 7
21819: PPUSH
21820: CALL_OW 256
21824: PUSH
21825: LD_INT 333
21827: GREATER
21828: IFFALSE 21856
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
21830: LD_VAR 0 7
21834: PPUSH
21835: LD_VAR 0 5
21839: PPUSH
21840: LD_VAR 0 7
21844: PPUSH
21845: CALL_OW 74
21849: PPUSH
21850: CALL_OW 115
21854: GO 22007
// begin hex := NearestUnitToUnit ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_btype , b_lab ] ] ) , i ) ;
21856: LD_ADDR_VAR 0 8
21860: PUSH
21861: LD_EXP 36
21865: PUSH
21866: LD_VAR 0 1
21870: ARRAY
21871: PPUSH
21872: LD_INT 2
21874: PUSH
21875: LD_INT 30
21877: PUSH
21878: LD_INT 0
21880: PUSH
21881: EMPTY
21882: LIST
21883: LIST
21884: PUSH
21885: LD_INT 30
21887: PUSH
21888: LD_INT 1
21890: PUSH
21891: EMPTY
21892: LIST
21893: LIST
21894: PUSH
21895: LD_INT 30
21897: PUSH
21898: LD_INT 6
21900: PUSH
21901: EMPTY
21902: LIST
21903: LIST
21904: PUSH
21905: EMPTY
21906: LIST
21907: LIST
21908: LIST
21909: LIST
21910: PPUSH
21911: CALL_OW 72
21915: PPUSH
21916: LD_VAR 0 7
21920: PPUSH
21921: CALL_OW 74
21925: ST_TO_ADDR
// ComMoveXY ( i , ShiftX ( GetX ( hex ) , 3 , 5 ) , ShiftY ( GetY ( hex ) , 3 , 5 ) ) ;
21926: LD_VAR 0 7
21930: PPUSH
21931: LD_VAR 0 8
21935: PPUSH
21936: CALL_OW 250
21940: PPUSH
21941: LD_INT 3
21943: PPUSH
21944: LD_INT 5
21946: PPUSH
21947: CALL_OW 272
21951: PPUSH
21952: LD_VAR 0 8
21956: PPUSH
21957: CALL_OW 251
21961: PPUSH
21962: LD_INT 3
21964: PPUSH
21965: LD_INT 5
21967: PPUSH
21968: CALL_OW 273
21972: PPUSH
21973: CALL_OW 111
// SetTag ( i , 0 ) ;
21977: LD_VAR 0 7
21981: PPUSH
21982: LD_INT 0
21984: PPUSH
21985: CALL_OW 109
// solds := solds diff i ;
21989: LD_ADDR_VAR 0 2
21993: PUSH
21994: LD_VAR 0 2
21998: PUSH
21999: LD_VAR 0 7
22003: DIFF
22004: ST_TO_ADDR
// continue ;
22005: GO 21792
// end ; end ;
22007: GO 21792
22009: POP
22010: POP
// until solds ;
22011: LD_VAR 0 2
22015: IFFALSE 21687
// MC_Reset ( base , 18 ) ;
22017: LD_VAR 0 1
22021: PPUSH
22022: LD_INT 18
22024: PPUSH
22025: CALL 66575 0 2
// end ;
22029: LD_VAR 0 4
22033: RET
// export function Defend ( base , defenders , enemy ) ; var i , j , x , solds , mech , un , tmp , mechs , e , fac , components , depot_under_attack , sold_defenders , b , can_defend ; begin
22034: LD_INT 0
22036: PPUSH
22037: PPUSH
22038: PPUSH
22039: PPUSH
22040: PPUSH
22041: PPUSH
22042: PPUSH
22043: PPUSH
22044: PPUSH
22045: PPUSH
22046: PPUSH
22047: PPUSH
22048: PPUSH
22049: PPUSH
22050: PPUSH
22051: PPUSH
// mechs := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
22052: LD_ADDR_VAR 0 12
22056: PUSH
22057: LD_EXP 36
22061: PUSH
22062: LD_VAR 0 1
22066: ARRAY
22067: PPUSH
22068: LD_INT 25
22070: PUSH
22071: LD_INT 3
22073: PUSH
22074: EMPTY
22075: LIST
22076: LIST
22077: PPUSH
22078: CALL_OW 72
22082: ST_TO_ADDR
// solds := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
22083: LD_ADDR_VAR 0 8
22087: PUSH
22088: LD_EXP 36
22092: PUSH
22093: LD_VAR 0 1
22097: ARRAY
22098: PPUSH
22099: LD_INT 2
22101: PUSH
22102: LD_INT 25
22104: PUSH
22105: LD_INT 1
22107: PUSH
22108: EMPTY
22109: LIST
22110: LIST
22111: PUSH
22112: LD_INT 25
22114: PUSH
22115: LD_INT 5
22117: PUSH
22118: EMPTY
22119: LIST
22120: LIST
22121: PUSH
22122: LD_INT 25
22124: PUSH
22125: LD_INT 8
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: PUSH
22132: LD_INT 25
22134: PUSH
22135: LD_INT 9
22137: PUSH
22138: EMPTY
22139: LIST
22140: LIST
22141: PUSH
22142: EMPTY
22143: LIST
22144: LIST
22145: LIST
22146: LIST
22147: LIST
22148: PPUSH
22149: CALL_OW 72
22153: ST_TO_ADDR
// if not defenders and not solds then
22154: LD_VAR 0 2
22158: NOT
22159: PUSH
22160: LD_VAR 0 8
22164: NOT
22165: AND
22166: IFFALSE 22170
// exit ;
22168: GO 23536
// depot_under_attack := false ;
22170: LD_ADDR_VAR 0 16
22174: PUSH
22175: LD_INT 0
22177: ST_TO_ADDR
// sold_defenders := [ ] ;
22178: LD_ADDR_VAR 0 17
22182: PUSH
22183: EMPTY
22184: ST_TO_ADDR
// if mechs then
22185: LD_VAR 0 12
22189: IFFALSE 22318
// for i in defenders do
22191: LD_ADDR_VAR 0 5
22195: PUSH
22196: LD_VAR 0 2
22200: PUSH
22201: FOR_IN
22202: IFFALSE 22316
// begin SetTag ( i , 20 ) ;
22204: LD_VAR 0 5
22208: PPUSH
22209: LD_INT 20
22211: PPUSH
22212: CALL_OW 109
// if GetControl ( i ) = control_manual and not IsDrivenBy ( i ) and mechs then
22216: LD_VAR 0 5
22220: PPUSH
22221: CALL_OW 263
22225: PUSH
22226: LD_INT 1
22228: EQUAL
22229: PUSH
22230: LD_VAR 0 5
22234: PPUSH
22235: CALL_OW 311
22239: NOT
22240: AND
22241: PUSH
22242: LD_VAR 0 12
22246: AND
22247: IFFALSE 22314
// begin un := mechs [ 1 ] ;
22249: LD_ADDR_VAR 0 10
22253: PUSH
22254: LD_VAR 0 12
22258: PUSH
22259: LD_INT 1
22261: ARRAY
22262: ST_TO_ADDR
// ComExitBuilding ( un ) ;
22263: LD_VAR 0 10
22267: PPUSH
22268: CALL_OW 122
// AddComEnterUnit ( un , i ) ;
22272: LD_VAR 0 10
22276: PPUSH
22277: LD_VAR 0 5
22281: PPUSH
22282: CALL_OW 180
// SetTag ( un , 19 ) ;
22286: LD_VAR 0 10
22290: PPUSH
22291: LD_INT 19
22293: PPUSH
22294: CALL_OW 109
// mechs := mechs diff un ;
22298: LD_ADDR_VAR 0 12
22302: PUSH
22303: LD_VAR 0 12
22307: PUSH
22308: LD_VAR 0 10
22312: DIFF
22313: ST_TO_ADDR
// end ; end ;
22314: GO 22201
22316: POP
22317: POP
// if solds then
22318: LD_VAR 0 8
22322: IFFALSE 22381
// for i in solds do
22324: LD_ADDR_VAR 0 5
22328: PUSH
22329: LD_VAR 0 8
22333: PUSH
22334: FOR_IN
22335: IFFALSE 22379
// if not GetTag ( i ) then
22337: LD_VAR 0 5
22341: PPUSH
22342: CALL_OW 110
22346: NOT
22347: IFFALSE 22377
// begin defenders := defenders union i ;
22349: LD_ADDR_VAR 0 2
22353: PUSH
22354: LD_VAR 0 2
22358: PUSH
22359: LD_VAR 0 5
22363: UNION
22364: ST_TO_ADDR
// SetTag ( i , 18 ) ;
22365: LD_VAR 0 5
22369: PPUSH
22370: LD_INT 18
22372: PPUSH
22373: CALL_OW 109
// end ;
22377: GO 22334
22379: POP
22380: POP
// repeat wait ( 0 0$1 ) ;
22381: LD_INT 35
22383: PPUSH
22384: CALL_OW 67
// enemy := mc_scan [ base ] ;
22388: LD_ADDR_VAR 0 3
22392: PUSH
22393: LD_EXP 59
22397: PUSH
22398: LD_VAR 0 1
22402: ARRAY
22403: ST_TO_ADDR
// for i in defenders do
22404: LD_ADDR_VAR 0 5
22408: PUSH
22409: LD_VAR 0 2
22413: PUSH
22414: FOR_IN
22415: IFFALSE 23100
// begin e := NearestUnitToUnit ( enemy , i ) ;
22417: LD_ADDR_VAR 0 13
22421: PUSH
22422: LD_VAR 0 3
22426: PPUSH
22427: LD_VAR 0 5
22431: PPUSH
22432: CALL_OW 74
22436: ST_TO_ADDR
// depot_under_attack := ( not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) or GetLives ( UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ) < 600 ) ;
22437: LD_ADDR_VAR 0 16
22441: PUSH
22442: LD_EXP 36
22446: PUSH
22447: LD_VAR 0 1
22451: ARRAY
22452: PPUSH
22453: LD_INT 2
22455: PUSH
22456: LD_INT 30
22458: PUSH
22459: LD_INT 0
22461: PUSH
22462: EMPTY
22463: LIST
22464: LIST
22465: PUSH
22466: LD_INT 30
22468: PUSH
22469: LD_INT 1
22471: PUSH
22472: EMPTY
22473: LIST
22474: LIST
22475: PUSH
22476: EMPTY
22477: LIST
22478: LIST
22479: LIST
22480: PPUSH
22481: CALL_OW 72
22485: NOT
22486: PUSH
22487: LD_EXP 36
22491: PUSH
22492: LD_VAR 0 1
22496: ARRAY
22497: PPUSH
22498: LD_INT 2
22500: PUSH
22501: LD_INT 30
22503: PUSH
22504: LD_INT 0
22506: PUSH
22507: EMPTY
22508: LIST
22509: LIST
22510: PUSH
22511: LD_INT 30
22513: PUSH
22514: LD_INT 1
22516: PUSH
22517: EMPTY
22518: LIST
22519: LIST
22520: PUSH
22521: EMPTY
22522: LIST
22523: LIST
22524: LIST
22525: PPUSH
22526: CALL_OW 72
22530: PPUSH
22531: CALL_OW 256
22535: PUSH
22536: LD_INT 600
22538: LESS
22539: OR
22540: ST_TO_ADDR
// case GetType ( i ) of unit_vehicle :
22541: LD_VAR 0 5
22545: PPUSH
22546: CALL_OW 247
22550: PUSH
22551: LD_INT 2
22553: DOUBLE
22554: EQUAL
22555: IFTRUE 22559
22557: GO 22806
22559: POP
// begin if GetLives ( i ) > 650 and GetDistUnits ( i , e ) < 40 then
22560: LD_VAR 0 5
22564: PPUSH
22565: CALL_OW 256
22569: PUSH
22570: LD_INT 650
22572: GREATER
22573: PUSH
22574: LD_VAR 0 5
22578: PPUSH
22579: LD_VAR 0 13
22583: PPUSH
22584: CALL_OW 296
22588: PUSH
22589: LD_INT 40
22591: LESS
22592: AND
22593: IFFALSE 22611
// ComAttackUnit ( i , e ) else
22595: LD_VAR 0 5
22599: PPUSH
22600: LD_VAR 0 13
22604: PPUSH
22605: CALL_OW 115
22609: GO 22689
// if ( GetDistUnits ( i , e ) >= 30 or GetLives ( i ) <= 650 ) and not IsInArea ( i , mc_parking [ base ] ) then
22611: LD_VAR 0 5
22615: PPUSH
22616: LD_VAR 0 13
22620: PPUSH
22621: CALL_OW 296
22625: PUSH
22626: LD_INT 30
22628: GREATEREQUAL
22629: PUSH
22630: LD_VAR 0 5
22634: PPUSH
22635: CALL_OW 256
22639: PUSH
22640: LD_INT 650
22642: LESSEQUAL
22643: OR
22644: PUSH
22645: LD_VAR 0 5
22649: PPUSH
22650: LD_EXP 60
22654: PUSH
22655: LD_VAR 0 1
22659: ARRAY
22660: PPUSH
22661: CALL_OW 308
22665: NOT
22666: AND
22667: IFFALSE 22689
// ComMoveToArea ( i , mc_parking [ base ] ) ;
22669: LD_VAR 0 5
22673: PPUSH
22674: LD_EXP 60
22678: PUSH
22679: LD_VAR 0 1
22683: ARRAY
22684: PPUSH
22685: CALL_OW 113
// if GetLives ( i ) < 998 and GetControl ( i ) = control_manual and IsDrivenBy ( i ) and IsInArea ( i , mc_parking [ base ] ) then
22689: LD_VAR 0 5
22693: PPUSH
22694: CALL_OW 256
22698: PUSH
22699: LD_INT 998
22701: LESS
22702: PUSH
22703: LD_VAR 0 5
22707: PPUSH
22708: CALL_OW 263
22712: PUSH
22713: LD_INT 1
22715: EQUAL
22716: AND
22717: PUSH
22718: LD_VAR 0 5
22722: PPUSH
22723: CALL_OW 311
22727: AND
22728: PUSH
22729: LD_VAR 0 5
22733: PPUSH
22734: LD_EXP 60
22738: PUSH
22739: LD_VAR 0 1
22743: ARRAY
22744: PPUSH
22745: CALL_OW 308
22749: AND
22750: IFFALSE 22804
// begin mech := IsDrivenBy ( i ) ;
22752: LD_ADDR_VAR 0 9
22756: PUSH
22757: LD_VAR 0 5
22761: PPUSH
22762: CALL_OW 311
22766: ST_TO_ADDR
// ComExitVehicle ( mech ) ;
22767: LD_VAR 0 9
22771: PPUSH
22772: CALL_OW 121
// AddComRepairVehicle ( mech , i ) ;
22776: LD_VAR 0 9
22780: PPUSH
22781: LD_VAR 0 5
22785: PPUSH
22786: CALL_OW 189
// AddComEnterUnit ( mech , i ) ;
22790: LD_VAR 0 9
22794: PPUSH
22795: LD_VAR 0 5
22799: PPUSH
22800: CALL_OW 180
// end ; end ; unit_human :
22804: GO 23071
22806: LD_INT 1
22808: DOUBLE
22809: EQUAL
22810: IFTRUE 22814
22812: GO 23070
22814: POP
// begin b := IsInUnit ( i ) ;
22815: LD_ADDR_VAR 0 18
22819: PUSH
22820: LD_VAR 0 5
22824: PPUSH
22825: CALL_OW 310
22829: ST_TO_ADDR
// can_defend := ( not b or GetBType ( b ) in [ b_bunker , b_breastwork ] ) ;
22830: LD_ADDR_VAR 0 19
22834: PUSH
22835: LD_VAR 0 18
22839: NOT
22840: PUSH
22841: LD_VAR 0 18
22845: PPUSH
22846: CALL_OW 266
22850: PUSH
22851: LD_INT 32
22853: PUSH
22854: LD_INT 31
22856: PUSH
22857: EMPTY
22858: LIST
22859: LIST
22860: IN
22861: OR
22862: ST_TO_ADDR
// if ( depot_under_attack or UnitFilter ( defenders , [ f_type , unit_vehicle ] ) <= 1 ) and can_defend and not i in sold_defenders then
22863: LD_VAR 0 16
22867: PUSH
22868: LD_VAR 0 2
22872: PPUSH
22873: LD_INT 21
22875: PUSH
22876: LD_INT 2
22878: PUSH
22879: EMPTY
22880: LIST
22881: LIST
22882: PPUSH
22883: CALL_OW 72
22887: PUSH
22888: LD_INT 1
22890: LESSEQUAL
22891: OR
22892: PUSH
22893: LD_VAR 0 19
22897: AND
22898: PUSH
22899: LD_VAR 0 5
22903: PUSH
22904: LD_VAR 0 17
22908: IN
22909: NOT
22910: AND
22911: IFFALSE 23004
// begin if b then
22913: LD_VAR 0 18
22917: IFFALSE 22966
// if GetDistUnits ( b , NearestUnitToUnit ( enemy , b ) ) < 10 and BuildingStatus ( b ) <> bs_need_power then
22919: LD_VAR 0 18
22923: PPUSH
22924: LD_VAR 0 3
22928: PPUSH
22929: LD_VAR 0 18
22933: PPUSH
22934: CALL_OW 74
22938: PPUSH
22939: CALL_OW 296
22943: PUSH
22944: LD_INT 10
22946: LESS
22947: PUSH
22948: LD_VAR 0 18
22952: PPUSH
22953: CALL_OW 461
22957: PUSH
22958: LD_INT 7
22960: NONEQUAL
22961: AND
22962: IFFALSE 22966
// continue ;
22964: GO 22414
// sold_defenders := Replace ( sold_defenders , sold_defenders + 1 , i ) ;
22966: LD_ADDR_VAR 0 17
22970: PUSH
22971: LD_VAR 0 17
22975: PPUSH
22976: LD_VAR 0 17
22980: PUSH
22981: LD_INT 1
22983: PLUS
22984: PPUSH
22985: LD_VAR 0 5
22989: PPUSH
22990: CALL_OW 1
22994: ST_TO_ADDR
// ComExitBuilding ( i ) ;
22995: LD_VAR 0 5
22999: PPUSH
23000: CALL_OW 122
// end ; if sold_defenders then
23004: LD_VAR 0 17
23008: IFFALSE 23068
// if i in sold_defenders then
23010: LD_VAR 0 5
23014: PUSH
23015: LD_VAR 0 17
23019: IN
23020: IFFALSE 23068
// begin if not HasTask ( i ) and GetDistUnits ( i , e ) < 30 then
23022: LD_VAR 0 5
23026: PPUSH
23027: CALL_OW 314
23031: NOT
23032: PUSH
23033: LD_VAR 0 5
23037: PPUSH
23038: LD_VAR 0 13
23042: PPUSH
23043: CALL_OW 296
23047: PUSH
23048: LD_INT 30
23050: LESS
23051: AND
23052: IFFALSE 23068
// ComAttackUnit ( i , e ) ;
23054: LD_VAR 0 5
23058: PPUSH
23059: LD_VAR 0 13
23063: PPUSH
23064: CALL_OW 115
// end ; end ; end ;
23068: GO 23071
23070: POP
// if IsDead ( i ) then
23071: LD_VAR 0 5
23075: PPUSH
23076: CALL_OW 301
23080: IFFALSE 23098
// defenders := defenders diff i ;
23082: LD_ADDR_VAR 0 2
23086: PUSH
23087: LD_VAR 0 2
23091: PUSH
23092: LD_VAR 0 5
23096: DIFF
23097: ST_TO_ADDR
// end ;
23098: GO 22414
23100: POP
23101: POP
// until not enemy or not defenders ;
23102: LD_VAR 0 3
23106: NOT
23107: PUSH
23108: LD_VAR 0 2
23112: NOT
23113: OR
23114: IFFALSE 22381
// MC_Reset ( base , 18 ) ;
23116: LD_VAR 0 1
23120: PPUSH
23121: LD_INT 18
23123: PPUSH
23124: CALL 66575 0 2
// defenders := defenders diff UnitFilter ( defenders , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
23128: LD_ADDR_VAR 0 2
23132: PUSH
23133: LD_VAR 0 2
23137: PUSH
23138: LD_VAR 0 2
23142: PPUSH
23143: LD_INT 2
23145: PUSH
23146: LD_INT 25
23148: PUSH
23149: LD_INT 1
23151: PUSH
23152: EMPTY
23153: LIST
23154: LIST
23155: PUSH
23156: LD_INT 25
23158: PUSH
23159: LD_INT 5
23161: PUSH
23162: EMPTY
23163: LIST
23164: LIST
23165: PUSH
23166: LD_INT 25
23168: PUSH
23169: LD_INT 8
23171: PUSH
23172: EMPTY
23173: LIST
23174: LIST
23175: PUSH
23176: LD_INT 25
23178: PUSH
23179: LD_INT 9
23181: PUSH
23182: EMPTY
23183: LIST
23184: LIST
23185: PUSH
23186: EMPTY
23187: LIST
23188: LIST
23189: LIST
23190: LIST
23191: LIST
23192: PPUSH
23193: CALL_OW 72
23197: DIFF
23198: ST_TO_ADDR
// if not enemy and UnitFilter ( defenders , [ f_type , unit_vehicle ] ) then
23199: LD_VAR 0 3
23203: NOT
23204: PUSH
23205: LD_VAR 0 2
23209: PPUSH
23210: LD_INT 21
23212: PUSH
23213: LD_INT 2
23215: PUSH
23216: EMPTY
23217: LIST
23218: LIST
23219: PPUSH
23220: CALL_OW 72
23224: AND
23225: IFFALSE 23487
// begin tmp := FilterByTag ( defenders , 19 ) ;
23227: LD_ADDR_VAR 0 11
23231: PUSH
23232: LD_VAR 0 2
23236: PPUSH
23237: LD_INT 19
23239: PPUSH
23240: CALL 59873 0 2
23244: ST_TO_ADDR
// if tmp then
23245: LD_VAR 0 11
23249: IFFALSE 23319
// begin tmp := UnitFilter ( tmp , [ f_class , 3 ] ) ;
23251: LD_ADDR_VAR 0 11
23255: PUSH
23256: LD_VAR 0 11
23260: PPUSH
23261: LD_INT 25
23263: PUSH
23264: LD_INT 3
23266: PUSH
23267: EMPTY
23268: LIST
23269: LIST
23270: PPUSH
23271: CALL_OW 72
23275: ST_TO_ADDR
// if tmp then
23276: LD_VAR 0 11
23280: IFFALSE 23319
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , mc_repair_vehicle [ base ] union tmp ) ;
23282: LD_ADDR_EXP 48
23286: PUSH
23287: LD_EXP 48
23291: PPUSH
23292: LD_VAR 0 1
23296: PPUSH
23297: LD_EXP 48
23301: PUSH
23302: LD_VAR 0 1
23306: ARRAY
23307: PUSH
23308: LD_VAR 0 11
23312: UNION
23313: PPUSH
23314: CALL_OW 1
23318: ST_TO_ADDR
// end ; MC_Reset ( base , 19 ) ;
23319: LD_VAR 0 1
23323: PPUSH
23324: LD_INT 19
23326: PPUSH
23327: CALL 66575 0 2
// repeat wait ( 0 0$1 ) ;
23331: LD_INT 35
23333: PPUSH
23334: CALL_OW 67
// for i in defenders do
23338: LD_ADDR_VAR 0 5
23342: PUSH
23343: LD_VAR 0 2
23347: PUSH
23348: FOR_IN
23349: IFFALSE 23438
// begin if not IsInArea ( i , mc_parking [ base ] ) then
23351: LD_VAR 0 5
23355: PPUSH
23356: LD_EXP 60
23360: PUSH
23361: LD_VAR 0 1
23365: ARRAY
23366: PPUSH
23367: CALL_OW 308
23371: NOT
23372: IFFALSE 23396
// ComMoveToArea ( i , mc_parking [ base ] ) else
23374: LD_VAR 0 5
23378: PPUSH
23379: LD_EXP 60
23383: PUSH
23384: LD_VAR 0 1
23388: ARRAY
23389: PPUSH
23390: CALL_OW 113
23394: GO 23436
// if GetControl ( i ) = control_manual then
23396: LD_VAR 0 5
23400: PPUSH
23401: CALL_OW 263
23405: PUSH
23406: LD_INT 1
23408: EQUAL
23409: IFFALSE 23436
// if IsDrivenBy ( i ) then
23411: LD_VAR 0 5
23415: PPUSH
23416: CALL_OW 311
23420: IFFALSE 23436
// ComExitVehicle ( IsDrivenBy ( i ) ) ;
23422: LD_VAR 0 5
23426: PPUSH
23427: CALL_OW 311
23431: PPUSH
23432: CALL_OW 121
// end ;
23436: GO 23348
23438: POP
23439: POP
// until UnitFilter ( defenders , [ f_inarea , mc_parking [ base ] ] ) = defenders or mc_scan [ base ] ;
23440: LD_VAR 0 2
23444: PPUSH
23445: LD_INT 95
23447: PUSH
23448: LD_EXP 60
23452: PUSH
23453: LD_VAR 0 1
23457: ARRAY
23458: PUSH
23459: EMPTY
23460: LIST
23461: LIST
23462: PPUSH
23463: CALL_OW 72
23467: PUSH
23468: LD_VAR 0 2
23472: EQUAL
23473: PUSH
23474: LD_EXP 59
23478: PUSH
23479: LD_VAR 0 1
23483: ARRAY
23484: OR
23485: IFFALSE 23331
// end ; mc_defender := Replace ( mc_defender , base , mc_defender [ base ] union defenders ) ;
23487: LD_ADDR_EXP 58
23491: PUSH
23492: LD_EXP 58
23496: PPUSH
23497: LD_VAR 0 1
23501: PPUSH
23502: LD_EXP 58
23506: PUSH
23507: LD_VAR 0 1
23511: ARRAY
23512: PUSH
23513: LD_VAR 0 2
23517: UNION
23518: PPUSH
23519: CALL_OW 1
23523: ST_TO_ADDR
// MC_Reset ( base , 20 ) ;
23524: LD_VAR 0 1
23528: PPUSH
23529: LD_INT 20
23531: PPUSH
23532: CALL 66575 0 2
// end ;
23536: LD_VAR 0 4
23540: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23541: LD_INT 0
23543: PPUSH
23544: PPUSH
23545: PPUSH
23546: PPUSH
// result := false ;
23547: LD_ADDR_VAR 0 2
23551: PUSH
23552: LD_INT 0
23554: ST_TO_ADDR
// side := GetSide ( unit ) ;
23555: LD_ADDR_VAR 0 3
23559: PUSH
23560: LD_VAR 0 1
23564: PPUSH
23565: CALL_OW 255
23569: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23570: LD_ADDR_VAR 0 4
23574: PUSH
23575: LD_VAR 0 1
23579: PPUSH
23580: CALL_OW 248
23584: ST_TO_ADDR
// case nat of 1 :
23585: LD_VAR 0 4
23589: PUSH
23590: LD_INT 1
23592: DOUBLE
23593: EQUAL
23594: IFTRUE 23598
23596: GO 23609
23598: POP
// tech := tech_lassight ; 2 :
23599: LD_ADDR_VAR 0 5
23603: PUSH
23604: LD_INT 12
23606: ST_TO_ADDR
23607: GO 23648
23609: LD_INT 2
23611: DOUBLE
23612: EQUAL
23613: IFTRUE 23617
23615: GO 23628
23617: POP
// tech := tech_mortar ; 3 :
23618: LD_ADDR_VAR 0 5
23622: PUSH
23623: LD_INT 41
23625: ST_TO_ADDR
23626: GO 23648
23628: LD_INT 3
23630: DOUBLE
23631: EQUAL
23632: IFTRUE 23636
23634: GO 23647
23636: POP
// tech := tech_bazooka ; end ;
23637: LD_ADDR_VAR 0 5
23641: PUSH
23642: LD_INT 44
23644: ST_TO_ADDR
23645: GO 23648
23647: POP
// if Researched ( side , tech ) then
23648: LD_VAR 0 3
23652: PPUSH
23653: LD_VAR 0 5
23657: PPUSH
23658: CALL_OW 325
23662: IFFALSE 23689
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23664: LD_ADDR_VAR 0 2
23668: PUSH
23669: LD_INT 5
23671: PUSH
23672: LD_INT 8
23674: PUSH
23675: LD_INT 9
23677: PUSH
23678: EMPTY
23679: LIST
23680: LIST
23681: LIST
23682: PUSH
23683: LD_VAR 0 4
23687: ARRAY
23688: ST_TO_ADDR
// end ;
23689: LD_VAR 0 2
23693: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23694: LD_INT 0
23696: PPUSH
23697: PPUSH
23698: PPUSH
// if not mines then
23699: LD_VAR 0 2
23703: NOT
23704: IFFALSE 23708
// exit ;
23706: GO 23852
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23708: LD_ADDR_VAR 0 5
23712: PUSH
23713: LD_INT 81
23715: PUSH
23716: LD_VAR 0 1
23720: PUSH
23721: EMPTY
23722: LIST
23723: LIST
23724: PUSH
23725: LD_INT 3
23727: PUSH
23728: LD_INT 21
23730: PUSH
23731: LD_INT 3
23733: PUSH
23734: EMPTY
23735: LIST
23736: LIST
23737: PUSH
23738: EMPTY
23739: LIST
23740: LIST
23741: PUSH
23742: EMPTY
23743: LIST
23744: LIST
23745: PPUSH
23746: CALL_OW 69
23750: ST_TO_ADDR
// for i in mines do
23751: LD_ADDR_VAR 0 4
23755: PUSH
23756: LD_VAR 0 2
23760: PUSH
23761: FOR_IN
23762: IFFALSE 23850
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23764: LD_VAR 0 4
23768: PUSH
23769: LD_INT 1
23771: ARRAY
23772: PPUSH
23773: LD_VAR 0 4
23777: PUSH
23778: LD_INT 2
23780: ARRAY
23781: PPUSH
23782: CALL_OW 458
23786: NOT
23787: IFFALSE 23791
// continue ;
23789: GO 23761
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23791: LD_VAR 0 4
23795: PUSH
23796: LD_INT 1
23798: ARRAY
23799: PPUSH
23800: LD_VAR 0 4
23804: PUSH
23805: LD_INT 2
23807: ARRAY
23808: PPUSH
23809: CALL_OW 428
23813: PUSH
23814: LD_VAR 0 5
23818: IN
23819: IFFALSE 23848
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23821: LD_VAR 0 4
23825: PUSH
23826: LD_INT 1
23828: ARRAY
23829: PPUSH
23830: LD_VAR 0 4
23834: PUSH
23835: LD_INT 2
23837: ARRAY
23838: PPUSH
23839: LD_VAR 0 1
23843: PPUSH
23844: CALL_OW 456
// end ;
23848: GO 23761
23850: POP
23851: POP
// end ;
23852: LD_VAR 0 3
23856: RET
// export function Count ( array ) ; var i ; begin
23857: LD_INT 0
23859: PPUSH
23860: PPUSH
// result := 0 ;
23861: LD_ADDR_VAR 0 2
23865: PUSH
23866: LD_INT 0
23868: ST_TO_ADDR
// for i in array do
23869: LD_ADDR_VAR 0 3
23873: PUSH
23874: LD_VAR 0 1
23878: PUSH
23879: FOR_IN
23880: IFFALSE 23904
// if i then
23882: LD_VAR 0 3
23886: IFFALSE 23902
// result := result + 1 ;
23888: LD_ADDR_VAR 0 2
23892: PUSH
23893: LD_VAR 0 2
23897: PUSH
23898: LD_INT 1
23900: PLUS
23901: ST_TO_ADDR
23902: GO 23879
23904: POP
23905: POP
// end ;
23906: LD_VAR 0 2
23910: RET
// export function IsEmpty ( building ) ; begin
23911: LD_INT 0
23913: PPUSH
// if not building then
23914: LD_VAR 0 1
23918: NOT
23919: IFFALSE 23923
// exit ;
23921: GO 23966
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23923: LD_ADDR_VAR 0 2
23927: PUSH
23928: LD_VAR 0 1
23932: PUSH
23933: LD_INT 22
23935: PUSH
23936: LD_VAR 0 1
23940: PPUSH
23941: CALL_OW 255
23945: PUSH
23946: EMPTY
23947: LIST
23948: LIST
23949: PUSH
23950: LD_INT 58
23952: PUSH
23953: EMPTY
23954: LIST
23955: PUSH
23956: EMPTY
23957: LIST
23958: LIST
23959: PPUSH
23960: CALL_OW 69
23964: IN
23965: ST_TO_ADDR
// end ;
23966: LD_VAR 0 2
23970: RET
// export function IsNotFull ( building ) ; begin
23971: LD_INT 0
23973: PPUSH
// if not building then
23974: LD_VAR 0 1
23978: NOT
23979: IFFALSE 23983
// exit ;
23981: GO 24002
// result := UnitsInside ( building ) < 6 ;
23983: LD_ADDR_VAR 0 2
23987: PUSH
23988: LD_VAR 0 1
23992: PPUSH
23993: CALL_OW 313
23997: PUSH
23998: LD_INT 6
24000: LESS
24001: ST_TO_ADDR
// end ;
24002: LD_VAR 0 2
24006: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
24007: LD_INT 0
24009: PPUSH
24010: PPUSH
24011: PPUSH
24012: PPUSH
// tmp := [ ] ;
24013: LD_ADDR_VAR 0 3
24017: PUSH
24018: EMPTY
24019: ST_TO_ADDR
// list := [ ] ;
24020: LD_ADDR_VAR 0 5
24024: PUSH
24025: EMPTY
24026: ST_TO_ADDR
// for i = 16 to 25 do
24027: LD_ADDR_VAR 0 4
24031: PUSH
24032: DOUBLE
24033: LD_INT 16
24035: DEC
24036: ST_TO_ADDR
24037: LD_INT 25
24039: PUSH
24040: FOR_TO
24041: IFFALSE 24114
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24043: LD_ADDR_VAR 0 3
24047: PUSH
24048: LD_VAR 0 3
24052: PUSH
24053: LD_INT 22
24055: PUSH
24056: LD_VAR 0 1
24060: PPUSH
24061: CALL_OW 255
24065: PUSH
24066: EMPTY
24067: LIST
24068: LIST
24069: PUSH
24070: LD_INT 91
24072: PUSH
24073: LD_VAR 0 1
24077: PUSH
24078: LD_INT 6
24080: PUSH
24081: EMPTY
24082: LIST
24083: LIST
24084: LIST
24085: PUSH
24086: LD_INT 30
24088: PUSH
24089: LD_VAR 0 4
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: PUSH
24098: EMPTY
24099: LIST
24100: LIST
24101: LIST
24102: PUSH
24103: EMPTY
24104: LIST
24105: PPUSH
24106: CALL_OW 69
24110: ADD
24111: ST_TO_ADDR
24112: GO 24040
24114: POP
24115: POP
// for i = 1 to tmp do
24116: LD_ADDR_VAR 0 4
24120: PUSH
24121: DOUBLE
24122: LD_INT 1
24124: DEC
24125: ST_TO_ADDR
24126: LD_VAR 0 3
24130: PUSH
24131: FOR_TO
24132: IFFALSE 24220
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24134: LD_ADDR_VAR 0 5
24138: PUSH
24139: LD_VAR 0 5
24143: PUSH
24144: LD_VAR 0 3
24148: PUSH
24149: LD_VAR 0 4
24153: ARRAY
24154: PPUSH
24155: CALL_OW 266
24159: PUSH
24160: LD_VAR 0 3
24164: PUSH
24165: LD_VAR 0 4
24169: ARRAY
24170: PPUSH
24171: CALL_OW 250
24175: PUSH
24176: LD_VAR 0 3
24180: PUSH
24181: LD_VAR 0 4
24185: ARRAY
24186: PPUSH
24187: CALL_OW 251
24191: PUSH
24192: LD_VAR 0 3
24196: PUSH
24197: LD_VAR 0 4
24201: ARRAY
24202: PPUSH
24203: CALL_OW 254
24207: PUSH
24208: EMPTY
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: PUSH
24214: EMPTY
24215: LIST
24216: ADD
24217: ST_TO_ADDR
24218: GO 24131
24220: POP
24221: POP
// result := list ;
24222: LD_ADDR_VAR 0 2
24226: PUSH
24227: LD_VAR 0 5
24231: ST_TO_ADDR
// end ;
24232: LD_VAR 0 2
24236: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24237: LD_INT 0
24239: PPUSH
24240: PPUSH
24241: PPUSH
24242: PPUSH
24243: PPUSH
24244: PPUSH
24245: PPUSH
// if not factory then
24246: LD_VAR 0 1
24250: NOT
24251: IFFALSE 24255
// exit ;
24253: GO 24780
// if control = control_apeman then
24255: LD_VAR 0 4
24259: PUSH
24260: LD_INT 5
24262: EQUAL
24263: IFFALSE 24372
// begin tmp := UnitsInside ( factory ) ;
24265: LD_ADDR_VAR 0 8
24269: PUSH
24270: LD_VAR 0 1
24274: PPUSH
24275: CALL_OW 313
24279: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
24280: LD_VAR 0 8
24284: PPUSH
24285: LD_INT 25
24287: PUSH
24288: LD_INT 12
24290: PUSH
24291: EMPTY
24292: LIST
24293: LIST
24294: PPUSH
24295: CALL_OW 72
24299: NOT
24300: IFFALSE 24310
// control := control_manual ;
24302: LD_ADDR_VAR 0 4
24306: PUSH
24307: LD_INT 1
24309: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
24310: LD_ADDR_VAR 0 8
24314: PUSH
24315: LD_VAR 0 1
24319: PPUSH
24320: CALL 24007 0 1
24324: ST_TO_ADDR
// if tmp then
24325: LD_VAR 0 8
24329: IFFALSE 24372
// begin for i in tmp do
24331: LD_ADDR_VAR 0 7
24335: PUSH
24336: LD_VAR 0 8
24340: PUSH
24341: FOR_IN
24342: IFFALSE 24370
// if i [ 1 ] = b_ext_radar then
24344: LD_VAR 0 7
24348: PUSH
24349: LD_INT 1
24351: ARRAY
24352: PUSH
24353: LD_INT 20
24355: EQUAL
24356: IFFALSE 24368
// begin control := control_remote ;
24358: LD_ADDR_VAR 0 4
24362: PUSH
24363: LD_INT 2
24365: ST_TO_ADDR
// break ;
24366: GO 24370
// end ;
24368: GO 24341
24370: POP
24371: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24372: LD_VAR 0 1
24376: PPUSH
24377: LD_VAR 0 2
24381: PPUSH
24382: LD_VAR 0 3
24386: PPUSH
24387: LD_VAR 0 4
24391: PPUSH
24392: LD_VAR 0 5
24396: PPUSH
24397: CALL_OW 448
24401: IFFALSE 24436
// begin result := [ chassis , engine , control , weapon ] ;
24403: LD_ADDR_VAR 0 6
24407: PUSH
24408: LD_VAR 0 2
24412: PUSH
24413: LD_VAR 0 3
24417: PUSH
24418: LD_VAR 0 4
24422: PUSH
24423: LD_VAR 0 5
24427: PUSH
24428: EMPTY
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: ST_TO_ADDR
// exit ;
24434: GO 24780
// end ; _chassis := AvailableChassisList ( factory ) ;
24436: LD_ADDR_VAR 0 9
24440: PUSH
24441: LD_VAR 0 1
24445: PPUSH
24446: CALL_OW 475
24450: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24451: LD_ADDR_VAR 0 11
24455: PUSH
24456: LD_VAR 0 1
24460: PPUSH
24461: CALL_OW 476
24465: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24466: LD_ADDR_VAR 0 12
24470: PUSH
24471: LD_VAR 0 1
24475: PPUSH
24476: CALL_OW 477
24480: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24481: LD_ADDR_VAR 0 10
24485: PUSH
24486: LD_VAR 0 1
24490: PPUSH
24491: CALL_OW 478
24495: ST_TO_ADDR
// if not chassis in _chassis then
24496: LD_VAR 0 2
24500: PUSH
24501: LD_VAR 0 9
24505: IN
24506: NOT
24507: IFFALSE 24533
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24509: LD_ADDR_VAR 0 2
24513: PUSH
24514: LD_VAR 0 9
24518: PUSH
24519: LD_INT 1
24521: PPUSH
24522: LD_VAR 0 9
24526: PPUSH
24527: CALL_OW 12
24531: ARRAY
24532: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24533: LD_VAR 0 2
24537: PPUSH
24538: LD_VAR 0 3
24542: PPUSH
24543: CALL 24785 0 2
24547: NOT
24548: IFFALSE 24607
// repeat engine := _engine [ 1 ] ;
24550: LD_ADDR_VAR 0 3
24554: PUSH
24555: LD_VAR 0 11
24559: PUSH
24560: LD_INT 1
24562: ARRAY
24563: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24564: LD_ADDR_VAR 0 11
24568: PUSH
24569: LD_VAR 0 11
24573: PPUSH
24574: LD_INT 1
24576: PPUSH
24577: CALL_OW 3
24581: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24582: LD_VAR 0 2
24586: PPUSH
24587: LD_VAR 0 3
24591: PPUSH
24592: CALL 24785 0 2
24596: PUSH
24597: LD_VAR 0 11
24601: PUSH
24602: EMPTY
24603: EQUAL
24604: OR
24605: IFFALSE 24550
// if not control in _control then
24607: LD_VAR 0 4
24611: PUSH
24612: LD_VAR 0 12
24616: IN
24617: NOT
24618: IFFALSE 24644
// control := _control [ rand ( 1 , _control ) ] ;
24620: LD_ADDR_VAR 0 4
24624: PUSH
24625: LD_VAR 0 12
24629: PUSH
24630: LD_INT 1
24632: PPUSH
24633: LD_VAR 0 12
24637: PPUSH
24638: CALL_OW 12
24642: ARRAY
24643: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24644: LD_VAR 0 2
24648: PPUSH
24649: LD_VAR 0 5
24653: PPUSH
24654: CALL 25005 0 2
24658: NOT
24659: IFFALSE 24718
// repeat weapon := _weapon [ 1 ] ;
24661: LD_ADDR_VAR 0 5
24665: PUSH
24666: LD_VAR 0 10
24670: PUSH
24671: LD_INT 1
24673: ARRAY
24674: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24675: LD_ADDR_VAR 0 10
24679: PUSH
24680: LD_VAR 0 10
24684: PPUSH
24685: LD_INT 1
24687: PPUSH
24688: CALL_OW 3
24692: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24693: LD_VAR 0 2
24697: PPUSH
24698: LD_VAR 0 5
24702: PPUSH
24703: CALL 25005 0 2
24707: PUSH
24708: LD_VAR 0 10
24712: PUSH
24713: EMPTY
24714: EQUAL
24715: OR
24716: IFFALSE 24661
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24718: LD_VAR 0 1
24722: PPUSH
24723: LD_VAR 0 2
24727: PPUSH
24728: LD_VAR 0 3
24732: PPUSH
24733: LD_VAR 0 4
24737: PPUSH
24738: LD_VAR 0 5
24742: PPUSH
24743: CALL_OW 448
24747: IFFALSE 24780
// result := [ chassis , engine , control , weapon ] ;
24749: LD_ADDR_VAR 0 6
24753: PUSH
24754: LD_VAR 0 2
24758: PUSH
24759: LD_VAR 0 3
24763: PUSH
24764: LD_VAR 0 4
24768: PUSH
24769: LD_VAR 0 5
24773: PUSH
24774: EMPTY
24775: LIST
24776: LIST
24777: LIST
24778: LIST
24779: ST_TO_ADDR
// end ;
24780: LD_VAR 0 6
24784: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24785: LD_INT 0
24787: PPUSH
// if not chassis or not engine then
24788: LD_VAR 0 1
24792: NOT
24793: PUSH
24794: LD_VAR 0 2
24798: NOT
24799: OR
24800: IFFALSE 24804
// exit ;
24802: GO 25000
// case engine of engine_solar :
24804: LD_VAR 0 2
24808: PUSH
24809: LD_INT 2
24811: DOUBLE
24812: EQUAL
24813: IFTRUE 24817
24815: GO 24855
24817: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24818: LD_ADDR_VAR 0 3
24822: PUSH
24823: LD_INT 11
24825: PUSH
24826: LD_INT 12
24828: PUSH
24829: LD_INT 13
24831: PUSH
24832: LD_INT 14
24834: PUSH
24835: LD_INT 1
24837: PUSH
24838: LD_INT 2
24840: PUSH
24841: LD_INT 3
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: LIST
24848: LIST
24849: LIST
24850: LIST
24851: LIST
24852: ST_TO_ADDR
24853: GO 24984
24855: LD_INT 1
24857: DOUBLE
24858: EQUAL
24859: IFTRUE 24863
24861: GO 24925
24863: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24864: LD_ADDR_VAR 0 3
24868: PUSH
24869: LD_INT 11
24871: PUSH
24872: LD_INT 12
24874: PUSH
24875: LD_INT 13
24877: PUSH
24878: LD_INT 14
24880: PUSH
24881: LD_INT 1
24883: PUSH
24884: LD_INT 2
24886: PUSH
24887: LD_INT 3
24889: PUSH
24890: LD_INT 4
24892: PUSH
24893: LD_INT 5
24895: PUSH
24896: LD_INT 21
24898: PUSH
24899: LD_INT 23
24901: PUSH
24902: LD_INT 22
24904: PUSH
24905: LD_INT 24
24907: PUSH
24908: EMPTY
24909: LIST
24910: LIST
24911: LIST
24912: LIST
24913: LIST
24914: LIST
24915: LIST
24916: LIST
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: LIST
24922: ST_TO_ADDR
24923: GO 24984
24925: LD_INT 3
24927: DOUBLE
24928: EQUAL
24929: IFTRUE 24933
24931: GO 24983
24933: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24934: LD_ADDR_VAR 0 3
24938: PUSH
24939: LD_INT 13
24941: PUSH
24942: LD_INT 14
24944: PUSH
24945: LD_INT 2
24947: PUSH
24948: LD_INT 3
24950: PUSH
24951: LD_INT 4
24953: PUSH
24954: LD_INT 5
24956: PUSH
24957: LD_INT 21
24959: PUSH
24960: LD_INT 22
24962: PUSH
24963: LD_INT 23
24965: PUSH
24966: LD_INT 24
24968: PUSH
24969: EMPTY
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: LIST
24978: LIST
24979: LIST
24980: ST_TO_ADDR
24981: GO 24984
24983: POP
// result := ( chassis in result ) ;
24984: LD_ADDR_VAR 0 3
24988: PUSH
24989: LD_VAR 0 1
24993: PUSH
24994: LD_VAR 0 3
24998: IN
24999: ST_TO_ADDR
// end ;
25000: LD_VAR 0 3
25004: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25005: LD_INT 0
25007: PPUSH
// if not chassis or not weapon then
25008: LD_VAR 0 1
25012: NOT
25013: PUSH
25014: LD_VAR 0 2
25018: NOT
25019: OR
25020: IFFALSE 25024
// exit ;
25022: GO 26050
// case weapon of us_machine_gun :
25024: LD_VAR 0 2
25028: PUSH
25029: LD_INT 2
25031: DOUBLE
25032: EQUAL
25033: IFTRUE 25037
25035: GO 25067
25037: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25038: LD_ADDR_VAR 0 3
25042: PUSH
25043: LD_INT 1
25045: PUSH
25046: LD_INT 2
25048: PUSH
25049: LD_INT 3
25051: PUSH
25052: LD_INT 4
25054: PUSH
25055: LD_INT 5
25057: PUSH
25058: EMPTY
25059: LIST
25060: LIST
25061: LIST
25062: LIST
25063: LIST
25064: ST_TO_ADDR
25065: GO 26034
25067: LD_INT 3
25069: DOUBLE
25070: EQUAL
25071: IFTRUE 25075
25073: GO 25105
25075: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25076: LD_ADDR_VAR 0 3
25080: PUSH
25081: LD_INT 1
25083: PUSH
25084: LD_INT 2
25086: PUSH
25087: LD_INT 3
25089: PUSH
25090: LD_INT 4
25092: PUSH
25093: LD_INT 5
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: LIST
25102: ST_TO_ADDR
25103: GO 26034
25105: LD_INT 11
25107: DOUBLE
25108: EQUAL
25109: IFTRUE 25113
25111: GO 25143
25113: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25114: LD_ADDR_VAR 0 3
25118: PUSH
25119: LD_INT 1
25121: PUSH
25122: LD_INT 2
25124: PUSH
25125: LD_INT 3
25127: PUSH
25128: LD_INT 4
25130: PUSH
25131: LD_INT 5
25133: PUSH
25134: EMPTY
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: ST_TO_ADDR
25141: GO 26034
25143: LD_INT 4
25145: DOUBLE
25146: EQUAL
25147: IFTRUE 25151
25149: GO 25177
25151: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25152: LD_ADDR_VAR 0 3
25156: PUSH
25157: LD_INT 2
25159: PUSH
25160: LD_INT 3
25162: PUSH
25163: LD_INT 4
25165: PUSH
25166: LD_INT 5
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: LIST
25173: LIST
25174: ST_TO_ADDR
25175: GO 26034
25177: LD_INT 5
25179: DOUBLE
25180: EQUAL
25181: IFTRUE 25185
25183: GO 25211
25185: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
25186: LD_ADDR_VAR 0 3
25190: PUSH
25191: LD_INT 2
25193: PUSH
25194: LD_INT 3
25196: PUSH
25197: LD_INT 4
25199: PUSH
25200: LD_INT 5
25202: PUSH
25203: EMPTY
25204: LIST
25205: LIST
25206: LIST
25207: LIST
25208: ST_TO_ADDR
25209: GO 26034
25211: LD_INT 9
25213: DOUBLE
25214: EQUAL
25215: IFTRUE 25219
25217: GO 25245
25219: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
25220: LD_ADDR_VAR 0 3
25224: PUSH
25225: LD_INT 2
25227: PUSH
25228: LD_INT 3
25230: PUSH
25231: LD_INT 4
25233: PUSH
25234: LD_INT 5
25236: PUSH
25237: EMPTY
25238: LIST
25239: LIST
25240: LIST
25241: LIST
25242: ST_TO_ADDR
25243: GO 26034
25245: LD_INT 7
25247: DOUBLE
25248: EQUAL
25249: IFTRUE 25253
25251: GO 25279
25253: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
25254: LD_ADDR_VAR 0 3
25258: PUSH
25259: LD_INT 2
25261: PUSH
25262: LD_INT 3
25264: PUSH
25265: LD_INT 4
25267: PUSH
25268: LD_INT 5
25270: PUSH
25271: EMPTY
25272: LIST
25273: LIST
25274: LIST
25275: LIST
25276: ST_TO_ADDR
25277: GO 26034
25279: LD_INT 12
25281: DOUBLE
25282: EQUAL
25283: IFTRUE 25287
25285: GO 25313
25287: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
25288: LD_ADDR_VAR 0 3
25292: PUSH
25293: LD_INT 2
25295: PUSH
25296: LD_INT 3
25298: PUSH
25299: LD_INT 4
25301: PUSH
25302: LD_INT 5
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: ST_TO_ADDR
25311: GO 26034
25313: LD_INT 13
25315: DOUBLE
25316: EQUAL
25317: IFTRUE 25321
25319: GO 25347
25321: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
25322: LD_ADDR_VAR 0 3
25326: PUSH
25327: LD_INT 2
25329: PUSH
25330: LD_INT 3
25332: PUSH
25333: LD_INT 4
25335: PUSH
25336: LD_INT 5
25338: PUSH
25339: EMPTY
25340: LIST
25341: LIST
25342: LIST
25343: LIST
25344: ST_TO_ADDR
25345: GO 26034
25347: LD_INT 14
25349: DOUBLE
25350: EQUAL
25351: IFTRUE 25355
25353: GO 25373
25355: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25356: LD_ADDR_VAR 0 3
25360: PUSH
25361: LD_INT 4
25363: PUSH
25364: LD_INT 5
25366: PUSH
25367: EMPTY
25368: LIST
25369: LIST
25370: ST_TO_ADDR
25371: GO 26034
25373: LD_INT 6
25375: DOUBLE
25376: EQUAL
25377: IFTRUE 25381
25379: GO 25399
25381: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25382: LD_ADDR_VAR 0 3
25386: PUSH
25387: LD_INT 4
25389: PUSH
25390: LD_INT 5
25392: PUSH
25393: EMPTY
25394: LIST
25395: LIST
25396: ST_TO_ADDR
25397: GO 26034
25399: LD_INT 10
25401: DOUBLE
25402: EQUAL
25403: IFTRUE 25407
25405: GO 25425
25407: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25408: LD_ADDR_VAR 0 3
25412: PUSH
25413: LD_INT 4
25415: PUSH
25416: LD_INT 5
25418: PUSH
25419: EMPTY
25420: LIST
25421: LIST
25422: ST_TO_ADDR
25423: GO 26034
25425: LD_INT 22
25427: DOUBLE
25428: EQUAL
25429: IFTRUE 25433
25431: GO 25459
25433: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25434: LD_ADDR_VAR 0 3
25438: PUSH
25439: LD_INT 11
25441: PUSH
25442: LD_INT 12
25444: PUSH
25445: LD_INT 13
25447: PUSH
25448: LD_INT 14
25450: PUSH
25451: EMPTY
25452: LIST
25453: LIST
25454: LIST
25455: LIST
25456: ST_TO_ADDR
25457: GO 26034
25459: LD_INT 23
25461: DOUBLE
25462: EQUAL
25463: IFTRUE 25467
25465: GO 25493
25467: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25468: LD_ADDR_VAR 0 3
25472: PUSH
25473: LD_INT 11
25475: PUSH
25476: LD_INT 12
25478: PUSH
25479: LD_INT 13
25481: PUSH
25482: LD_INT 14
25484: PUSH
25485: EMPTY
25486: LIST
25487: LIST
25488: LIST
25489: LIST
25490: ST_TO_ADDR
25491: GO 26034
25493: LD_INT 24
25495: DOUBLE
25496: EQUAL
25497: IFTRUE 25501
25499: GO 25527
25501: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25502: LD_ADDR_VAR 0 3
25506: PUSH
25507: LD_INT 11
25509: PUSH
25510: LD_INT 12
25512: PUSH
25513: LD_INT 13
25515: PUSH
25516: LD_INT 14
25518: PUSH
25519: EMPTY
25520: LIST
25521: LIST
25522: LIST
25523: LIST
25524: ST_TO_ADDR
25525: GO 26034
25527: LD_INT 30
25529: DOUBLE
25530: EQUAL
25531: IFTRUE 25535
25533: GO 25561
25535: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25536: LD_ADDR_VAR 0 3
25540: PUSH
25541: LD_INT 11
25543: PUSH
25544: LD_INT 12
25546: PUSH
25547: LD_INT 13
25549: PUSH
25550: LD_INT 14
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: LIST
25557: LIST
25558: ST_TO_ADDR
25559: GO 26034
25561: LD_INT 25
25563: DOUBLE
25564: EQUAL
25565: IFTRUE 25569
25567: GO 25587
25569: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25570: LD_ADDR_VAR 0 3
25574: PUSH
25575: LD_INT 13
25577: PUSH
25578: LD_INT 14
25580: PUSH
25581: EMPTY
25582: LIST
25583: LIST
25584: ST_TO_ADDR
25585: GO 26034
25587: LD_INT 27
25589: DOUBLE
25590: EQUAL
25591: IFTRUE 25595
25593: GO 25613
25595: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25596: LD_ADDR_VAR 0 3
25600: PUSH
25601: LD_INT 13
25603: PUSH
25604: LD_INT 14
25606: PUSH
25607: EMPTY
25608: LIST
25609: LIST
25610: ST_TO_ADDR
25611: GO 26034
25613: LD_INT 28
25615: DOUBLE
25616: EQUAL
25617: IFTRUE 25621
25619: GO 25639
25621: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25622: LD_ADDR_VAR 0 3
25626: PUSH
25627: LD_INT 13
25629: PUSH
25630: LD_INT 14
25632: PUSH
25633: EMPTY
25634: LIST
25635: LIST
25636: ST_TO_ADDR
25637: GO 26034
25639: LD_INT 29
25641: DOUBLE
25642: EQUAL
25643: IFTRUE 25647
25645: GO 25665
25647: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25648: LD_ADDR_VAR 0 3
25652: PUSH
25653: LD_INT 13
25655: PUSH
25656: LD_INT 14
25658: PUSH
25659: EMPTY
25660: LIST
25661: LIST
25662: ST_TO_ADDR
25663: GO 26034
25665: LD_INT 31
25667: DOUBLE
25668: EQUAL
25669: IFTRUE 25673
25671: GO 25691
25673: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25674: LD_ADDR_VAR 0 3
25678: PUSH
25679: LD_INT 13
25681: PUSH
25682: LD_INT 14
25684: PUSH
25685: EMPTY
25686: LIST
25687: LIST
25688: ST_TO_ADDR
25689: GO 26034
25691: LD_INT 26
25693: DOUBLE
25694: EQUAL
25695: IFTRUE 25699
25697: GO 25717
25699: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25700: LD_ADDR_VAR 0 3
25704: PUSH
25705: LD_INT 13
25707: PUSH
25708: LD_INT 14
25710: PUSH
25711: EMPTY
25712: LIST
25713: LIST
25714: ST_TO_ADDR
25715: GO 26034
25717: LD_INT 42
25719: DOUBLE
25720: EQUAL
25721: IFTRUE 25725
25723: GO 25751
25725: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25726: LD_ADDR_VAR 0 3
25730: PUSH
25731: LD_INT 21
25733: PUSH
25734: LD_INT 22
25736: PUSH
25737: LD_INT 23
25739: PUSH
25740: LD_INT 24
25742: PUSH
25743: EMPTY
25744: LIST
25745: LIST
25746: LIST
25747: LIST
25748: ST_TO_ADDR
25749: GO 26034
25751: LD_INT 43
25753: DOUBLE
25754: EQUAL
25755: IFTRUE 25759
25757: GO 25785
25759: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25760: LD_ADDR_VAR 0 3
25764: PUSH
25765: LD_INT 21
25767: PUSH
25768: LD_INT 22
25770: PUSH
25771: LD_INT 23
25773: PUSH
25774: LD_INT 24
25776: PUSH
25777: EMPTY
25778: LIST
25779: LIST
25780: LIST
25781: LIST
25782: ST_TO_ADDR
25783: GO 26034
25785: LD_INT 44
25787: DOUBLE
25788: EQUAL
25789: IFTRUE 25793
25791: GO 25819
25793: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25794: LD_ADDR_VAR 0 3
25798: PUSH
25799: LD_INT 21
25801: PUSH
25802: LD_INT 22
25804: PUSH
25805: LD_INT 23
25807: PUSH
25808: LD_INT 24
25810: PUSH
25811: EMPTY
25812: LIST
25813: LIST
25814: LIST
25815: LIST
25816: ST_TO_ADDR
25817: GO 26034
25819: LD_INT 45
25821: DOUBLE
25822: EQUAL
25823: IFTRUE 25827
25825: GO 25853
25827: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25828: LD_ADDR_VAR 0 3
25832: PUSH
25833: LD_INT 21
25835: PUSH
25836: LD_INT 22
25838: PUSH
25839: LD_INT 23
25841: PUSH
25842: LD_INT 24
25844: PUSH
25845: EMPTY
25846: LIST
25847: LIST
25848: LIST
25849: LIST
25850: ST_TO_ADDR
25851: GO 26034
25853: LD_INT 49
25855: DOUBLE
25856: EQUAL
25857: IFTRUE 25861
25859: GO 25887
25861: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25862: LD_ADDR_VAR 0 3
25866: PUSH
25867: LD_INT 21
25869: PUSH
25870: LD_INT 22
25872: PUSH
25873: LD_INT 23
25875: PUSH
25876: LD_INT 24
25878: PUSH
25879: EMPTY
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: ST_TO_ADDR
25885: GO 26034
25887: LD_INT 51
25889: DOUBLE
25890: EQUAL
25891: IFTRUE 25895
25893: GO 25921
25895: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25896: LD_ADDR_VAR 0 3
25900: PUSH
25901: LD_INT 21
25903: PUSH
25904: LD_INT 22
25906: PUSH
25907: LD_INT 23
25909: PUSH
25910: LD_INT 24
25912: PUSH
25913: EMPTY
25914: LIST
25915: LIST
25916: LIST
25917: LIST
25918: ST_TO_ADDR
25919: GO 26034
25921: LD_INT 52
25923: DOUBLE
25924: EQUAL
25925: IFTRUE 25929
25927: GO 25955
25929: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25930: LD_ADDR_VAR 0 3
25934: PUSH
25935: LD_INT 21
25937: PUSH
25938: LD_INT 22
25940: PUSH
25941: LD_INT 23
25943: PUSH
25944: LD_INT 24
25946: PUSH
25947: EMPTY
25948: LIST
25949: LIST
25950: LIST
25951: LIST
25952: ST_TO_ADDR
25953: GO 26034
25955: LD_INT 53
25957: DOUBLE
25958: EQUAL
25959: IFTRUE 25963
25961: GO 25981
25963: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25964: LD_ADDR_VAR 0 3
25968: PUSH
25969: LD_INT 23
25971: PUSH
25972: LD_INT 24
25974: PUSH
25975: EMPTY
25976: LIST
25977: LIST
25978: ST_TO_ADDR
25979: GO 26034
25981: LD_INT 46
25983: DOUBLE
25984: EQUAL
25985: IFTRUE 25989
25987: GO 26007
25989: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25990: LD_ADDR_VAR 0 3
25994: PUSH
25995: LD_INT 23
25997: PUSH
25998: LD_INT 24
26000: PUSH
26001: EMPTY
26002: LIST
26003: LIST
26004: ST_TO_ADDR
26005: GO 26034
26007: LD_INT 47
26009: DOUBLE
26010: EQUAL
26011: IFTRUE 26015
26013: GO 26033
26015: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26016: LD_ADDR_VAR 0 3
26020: PUSH
26021: LD_INT 23
26023: PUSH
26024: LD_INT 24
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: ST_TO_ADDR
26031: GO 26034
26033: POP
// result := ( chassis in result ) ;
26034: LD_ADDR_VAR 0 3
26038: PUSH
26039: LD_VAR 0 1
26043: PUSH
26044: LD_VAR 0 3
26048: IN
26049: ST_TO_ADDR
// end ;
26050: LD_VAR 0 3
26054: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26055: LD_INT 0
26057: PPUSH
26058: PPUSH
26059: PPUSH
26060: PPUSH
26061: PPUSH
26062: PPUSH
26063: PPUSH
// result := array ;
26064: LD_ADDR_VAR 0 5
26068: PUSH
26069: LD_VAR 0 1
26073: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26074: LD_VAR 0 1
26078: NOT
26079: PUSH
26080: LD_VAR 0 2
26084: NOT
26085: OR
26086: PUSH
26087: LD_VAR 0 3
26091: NOT
26092: OR
26093: PUSH
26094: LD_VAR 0 2
26098: PUSH
26099: LD_VAR 0 1
26103: GREATER
26104: OR
26105: PUSH
26106: LD_VAR 0 3
26110: PUSH
26111: LD_VAR 0 1
26115: GREATER
26116: OR
26117: IFFALSE 26121
// exit ;
26119: GO 26417
// if direction then
26121: LD_VAR 0 4
26125: IFFALSE 26189
// begin d := 1 ;
26127: LD_ADDR_VAR 0 9
26131: PUSH
26132: LD_INT 1
26134: ST_TO_ADDR
// if i_from > i_to then
26135: LD_VAR 0 2
26139: PUSH
26140: LD_VAR 0 3
26144: GREATER
26145: IFFALSE 26171
// length := ( array - i_from ) + i_to else
26147: LD_ADDR_VAR 0 11
26151: PUSH
26152: LD_VAR 0 1
26156: PUSH
26157: LD_VAR 0 2
26161: MINUS
26162: PUSH
26163: LD_VAR 0 3
26167: PLUS
26168: ST_TO_ADDR
26169: GO 26187
// length := i_to - i_from ;
26171: LD_ADDR_VAR 0 11
26175: PUSH
26176: LD_VAR 0 3
26180: PUSH
26181: LD_VAR 0 2
26185: MINUS
26186: ST_TO_ADDR
// end else
26187: GO 26250
// begin d := - 1 ;
26189: LD_ADDR_VAR 0 9
26193: PUSH
26194: LD_INT 1
26196: NEG
26197: ST_TO_ADDR
// if i_from > i_to then
26198: LD_VAR 0 2
26202: PUSH
26203: LD_VAR 0 3
26207: GREATER
26208: IFFALSE 26228
// length := i_from - i_to else
26210: LD_ADDR_VAR 0 11
26214: PUSH
26215: LD_VAR 0 2
26219: PUSH
26220: LD_VAR 0 3
26224: MINUS
26225: ST_TO_ADDR
26226: GO 26250
// length := ( array - i_to ) + i_from ;
26228: LD_ADDR_VAR 0 11
26232: PUSH
26233: LD_VAR 0 1
26237: PUSH
26238: LD_VAR 0 3
26242: MINUS
26243: PUSH
26244: LD_VAR 0 2
26248: PLUS
26249: ST_TO_ADDR
// end ; if not length then
26250: LD_VAR 0 11
26254: NOT
26255: IFFALSE 26259
// exit ;
26257: GO 26417
// tmp := array ;
26259: LD_ADDR_VAR 0 10
26263: PUSH
26264: LD_VAR 0 1
26268: ST_TO_ADDR
// for i = 1 to length do
26269: LD_ADDR_VAR 0 6
26273: PUSH
26274: DOUBLE
26275: LD_INT 1
26277: DEC
26278: ST_TO_ADDR
26279: LD_VAR 0 11
26283: PUSH
26284: FOR_TO
26285: IFFALSE 26405
// begin for j = 1 to array do
26287: LD_ADDR_VAR 0 7
26291: PUSH
26292: DOUBLE
26293: LD_INT 1
26295: DEC
26296: ST_TO_ADDR
26297: LD_VAR 0 1
26301: PUSH
26302: FOR_TO
26303: IFFALSE 26391
// begin k := j + d ;
26305: LD_ADDR_VAR 0 8
26309: PUSH
26310: LD_VAR 0 7
26314: PUSH
26315: LD_VAR 0 9
26319: PLUS
26320: ST_TO_ADDR
// if k > array then
26321: LD_VAR 0 8
26325: PUSH
26326: LD_VAR 0 1
26330: GREATER
26331: IFFALSE 26341
// k := 1 ;
26333: LD_ADDR_VAR 0 8
26337: PUSH
26338: LD_INT 1
26340: ST_TO_ADDR
// if not k then
26341: LD_VAR 0 8
26345: NOT
26346: IFFALSE 26358
// k := array ;
26348: LD_ADDR_VAR 0 8
26352: PUSH
26353: LD_VAR 0 1
26357: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26358: LD_ADDR_VAR 0 10
26362: PUSH
26363: LD_VAR 0 10
26367: PPUSH
26368: LD_VAR 0 8
26372: PPUSH
26373: LD_VAR 0 1
26377: PUSH
26378: LD_VAR 0 7
26382: ARRAY
26383: PPUSH
26384: CALL_OW 1
26388: ST_TO_ADDR
// end ;
26389: GO 26302
26391: POP
26392: POP
// array := tmp ;
26393: LD_ADDR_VAR 0 1
26397: PUSH
26398: LD_VAR 0 10
26402: ST_TO_ADDR
// end ;
26403: GO 26284
26405: POP
26406: POP
// result := array ;
26407: LD_ADDR_VAR 0 5
26411: PUSH
26412: LD_VAR 0 1
26416: ST_TO_ADDR
// end ;
26417: LD_VAR 0 5
26421: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26422: LD_INT 0
26424: PPUSH
26425: PPUSH
// result := 0 ;
26426: LD_ADDR_VAR 0 3
26430: PUSH
26431: LD_INT 0
26433: ST_TO_ADDR
// if not array or not value in array then
26434: LD_VAR 0 1
26438: NOT
26439: PUSH
26440: LD_VAR 0 2
26444: PUSH
26445: LD_VAR 0 1
26449: IN
26450: NOT
26451: OR
26452: IFFALSE 26456
// exit ;
26454: GO 26510
// for i = 1 to array do
26456: LD_ADDR_VAR 0 4
26460: PUSH
26461: DOUBLE
26462: LD_INT 1
26464: DEC
26465: ST_TO_ADDR
26466: LD_VAR 0 1
26470: PUSH
26471: FOR_TO
26472: IFFALSE 26508
// if value = array [ i ] then
26474: LD_VAR 0 2
26478: PUSH
26479: LD_VAR 0 1
26483: PUSH
26484: LD_VAR 0 4
26488: ARRAY
26489: EQUAL
26490: IFFALSE 26506
// begin result := i ;
26492: LD_ADDR_VAR 0 3
26496: PUSH
26497: LD_VAR 0 4
26501: ST_TO_ADDR
// exit ;
26502: POP
26503: POP
26504: GO 26510
// end ;
26506: GO 26471
26508: POP
26509: POP
// end ;
26510: LD_VAR 0 3
26514: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26515: LD_INT 0
26517: PPUSH
// vc_chassis := chassis ;
26518: LD_ADDR_OWVAR 37
26522: PUSH
26523: LD_VAR 0 1
26527: ST_TO_ADDR
// vc_engine := engine ;
26528: LD_ADDR_OWVAR 39
26532: PUSH
26533: LD_VAR 0 2
26537: ST_TO_ADDR
// vc_control := control ;
26538: LD_ADDR_OWVAR 38
26542: PUSH
26543: LD_VAR 0 3
26547: ST_TO_ADDR
// vc_weapon := weapon ;
26548: LD_ADDR_OWVAR 40
26552: PUSH
26553: LD_VAR 0 4
26557: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26558: LD_ADDR_OWVAR 41
26562: PUSH
26563: LD_VAR 0 5
26567: ST_TO_ADDR
// end ;
26568: LD_VAR 0 6
26572: RET
// export function WantPlant ( unit ) ; var task ; begin
26573: LD_INT 0
26575: PPUSH
26576: PPUSH
// result := false ;
26577: LD_ADDR_VAR 0 2
26581: PUSH
26582: LD_INT 0
26584: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26585: LD_ADDR_VAR 0 3
26589: PUSH
26590: LD_VAR 0 1
26594: PPUSH
26595: CALL_OW 437
26599: ST_TO_ADDR
// if task then
26600: LD_VAR 0 3
26604: IFFALSE 26632
// if task [ 1 ] [ 1 ] = p then
26606: LD_VAR 0 3
26610: PUSH
26611: LD_INT 1
26613: ARRAY
26614: PUSH
26615: LD_INT 1
26617: ARRAY
26618: PUSH
26619: LD_STRING p
26621: EQUAL
26622: IFFALSE 26632
// result := true ;
26624: LD_ADDR_VAR 0 2
26628: PUSH
26629: LD_INT 1
26631: ST_TO_ADDR
// end ;
26632: LD_VAR 0 2
26636: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26637: LD_INT 0
26639: PPUSH
26640: PPUSH
26641: PPUSH
26642: PPUSH
// if pos < 1 then
26643: LD_VAR 0 2
26647: PUSH
26648: LD_INT 1
26650: LESS
26651: IFFALSE 26655
// exit ;
26653: GO 26958
// if pos = 1 then
26655: LD_VAR 0 2
26659: PUSH
26660: LD_INT 1
26662: EQUAL
26663: IFFALSE 26696
// result := Replace ( arr , pos [ 1 ] , value ) else
26665: LD_ADDR_VAR 0 4
26669: PUSH
26670: LD_VAR 0 1
26674: PPUSH
26675: LD_VAR 0 2
26679: PUSH
26680: LD_INT 1
26682: ARRAY
26683: PPUSH
26684: LD_VAR 0 3
26688: PPUSH
26689: CALL_OW 1
26693: ST_TO_ADDR
26694: GO 26958
// begin tmp := arr ;
26696: LD_ADDR_VAR 0 6
26700: PUSH
26701: LD_VAR 0 1
26705: ST_TO_ADDR
// s_arr := [ tmp ] ;
26706: LD_ADDR_VAR 0 7
26710: PUSH
26711: LD_VAR 0 6
26715: PUSH
26716: EMPTY
26717: LIST
26718: ST_TO_ADDR
// for i = 1 to pos - 1 do
26719: LD_ADDR_VAR 0 5
26723: PUSH
26724: DOUBLE
26725: LD_INT 1
26727: DEC
26728: ST_TO_ADDR
26729: LD_VAR 0 2
26733: PUSH
26734: LD_INT 1
26736: MINUS
26737: PUSH
26738: FOR_TO
26739: IFFALSE 26784
// begin tmp := tmp [ pos [ i ] ] ;
26741: LD_ADDR_VAR 0 6
26745: PUSH
26746: LD_VAR 0 6
26750: PUSH
26751: LD_VAR 0 2
26755: PUSH
26756: LD_VAR 0 5
26760: ARRAY
26761: ARRAY
26762: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26763: LD_ADDR_VAR 0 7
26767: PUSH
26768: LD_VAR 0 7
26772: PUSH
26773: LD_VAR 0 6
26777: PUSH
26778: EMPTY
26779: LIST
26780: ADD
26781: ST_TO_ADDR
// end ;
26782: GO 26738
26784: POP
26785: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26786: LD_ADDR_VAR 0 6
26790: PUSH
26791: LD_VAR 0 6
26795: PPUSH
26796: LD_VAR 0 2
26800: PUSH
26801: LD_VAR 0 2
26805: ARRAY
26806: PPUSH
26807: LD_VAR 0 3
26811: PPUSH
26812: CALL_OW 1
26816: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26817: LD_ADDR_VAR 0 7
26821: PUSH
26822: LD_VAR 0 7
26826: PPUSH
26827: LD_VAR 0 7
26831: PPUSH
26832: LD_VAR 0 6
26836: PPUSH
26837: CALL_OW 1
26841: ST_TO_ADDR
// for i = s_arr downto 2 do
26842: LD_ADDR_VAR 0 5
26846: PUSH
26847: DOUBLE
26848: LD_VAR 0 7
26852: INC
26853: ST_TO_ADDR
26854: LD_INT 2
26856: PUSH
26857: FOR_DOWNTO
26858: IFFALSE 26942
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26860: LD_ADDR_VAR 0 6
26864: PUSH
26865: LD_VAR 0 7
26869: PUSH
26870: LD_VAR 0 5
26874: PUSH
26875: LD_INT 1
26877: MINUS
26878: ARRAY
26879: PPUSH
26880: LD_VAR 0 2
26884: PUSH
26885: LD_VAR 0 5
26889: PUSH
26890: LD_INT 1
26892: MINUS
26893: ARRAY
26894: PPUSH
26895: LD_VAR 0 7
26899: PUSH
26900: LD_VAR 0 5
26904: ARRAY
26905: PPUSH
26906: CALL_OW 1
26910: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26911: LD_ADDR_VAR 0 7
26915: PUSH
26916: LD_VAR 0 7
26920: PPUSH
26921: LD_VAR 0 5
26925: PUSH
26926: LD_INT 1
26928: MINUS
26929: PPUSH
26930: LD_VAR 0 6
26934: PPUSH
26935: CALL_OW 1
26939: ST_TO_ADDR
// end ;
26940: GO 26857
26942: POP
26943: POP
// result := s_arr [ 1 ] ;
26944: LD_ADDR_VAR 0 4
26948: PUSH
26949: LD_VAR 0 7
26953: PUSH
26954: LD_INT 1
26956: ARRAY
26957: ST_TO_ADDR
// end ; end ;
26958: LD_VAR 0 4
26962: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26963: LD_INT 0
26965: PPUSH
26966: PPUSH
// if not list then
26967: LD_VAR 0 1
26971: NOT
26972: IFFALSE 26976
// exit ;
26974: GO 27067
// i := list [ pos1 ] ;
26976: LD_ADDR_VAR 0 5
26980: PUSH
26981: LD_VAR 0 1
26985: PUSH
26986: LD_VAR 0 2
26990: ARRAY
26991: ST_TO_ADDR
// if not i then
26992: LD_VAR 0 5
26996: NOT
26997: IFFALSE 27001
// exit ;
26999: GO 27067
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27001: LD_ADDR_VAR 0 1
27005: PUSH
27006: LD_VAR 0 1
27010: PPUSH
27011: LD_VAR 0 2
27015: PPUSH
27016: LD_VAR 0 1
27020: PUSH
27021: LD_VAR 0 3
27025: ARRAY
27026: PPUSH
27027: CALL_OW 1
27031: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
27032: LD_ADDR_VAR 0 1
27036: PUSH
27037: LD_VAR 0 1
27041: PPUSH
27042: LD_VAR 0 3
27046: PPUSH
27047: LD_VAR 0 5
27051: PPUSH
27052: CALL_OW 1
27056: ST_TO_ADDR
// result := list ;
27057: LD_ADDR_VAR 0 4
27061: PUSH
27062: LD_VAR 0 1
27066: ST_TO_ADDR
// end ;
27067: LD_VAR 0 4
27071: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27072: LD_INT 0
27074: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27075: LD_ADDR_VAR 0 5
27079: PUSH
27080: LD_VAR 0 1
27084: PPUSH
27085: CALL_OW 250
27089: PPUSH
27090: LD_VAR 0 1
27094: PPUSH
27095: CALL_OW 251
27099: PPUSH
27100: LD_VAR 0 2
27104: PPUSH
27105: LD_VAR 0 3
27109: PPUSH
27110: LD_VAR 0 4
27114: PPUSH
27115: CALL 27125 0 5
27119: ST_TO_ADDR
// end ;
27120: LD_VAR 0 5
27124: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27125: LD_INT 0
27127: PPUSH
27128: PPUSH
27129: PPUSH
27130: PPUSH
// if not list then
27131: LD_VAR 0 3
27135: NOT
27136: IFFALSE 27140
// exit ;
27138: GO 27528
// result := [ ] ;
27140: LD_ADDR_VAR 0 6
27144: PUSH
27145: EMPTY
27146: ST_TO_ADDR
// for i in list do
27147: LD_ADDR_VAR 0 7
27151: PUSH
27152: LD_VAR 0 3
27156: PUSH
27157: FOR_IN
27158: IFFALSE 27360
// begin tmp := GetDistUnitXY ( i , x , y ) ;
27160: LD_ADDR_VAR 0 9
27164: PUSH
27165: LD_VAR 0 7
27169: PPUSH
27170: LD_VAR 0 1
27174: PPUSH
27175: LD_VAR 0 2
27179: PPUSH
27180: CALL_OW 297
27184: ST_TO_ADDR
// if not result then
27185: LD_VAR 0 6
27189: NOT
27190: IFFALSE 27216
// result := [ [ i , tmp ] ] else
27192: LD_ADDR_VAR 0 6
27196: PUSH
27197: LD_VAR 0 7
27201: PUSH
27202: LD_VAR 0 9
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: PUSH
27211: EMPTY
27212: LIST
27213: ST_TO_ADDR
27214: GO 27358
// begin if result [ result ] [ 2 ] < tmp then
27216: LD_VAR 0 6
27220: PUSH
27221: LD_VAR 0 6
27225: ARRAY
27226: PUSH
27227: LD_INT 2
27229: ARRAY
27230: PUSH
27231: LD_VAR 0 9
27235: LESS
27236: IFFALSE 27278
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
27238: LD_ADDR_VAR 0 6
27242: PUSH
27243: LD_VAR 0 6
27247: PPUSH
27248: LD_VAR 0 6
27252: PUSH
27253: LD_INT 1
27255: PLUS
27256: PPUSH
27257: LD_VAR 0 7
27261: PUSH
27262: LD_VAR 0 9
27266: PUSH
27267: EMPTY
27268: LIST
27269: LIST
27270: PPUSH
27271: CALL_OW 2
27275: ST_TO_ADDR
27276: GO 27358
// for j = 1 to result do
27278: LD_ADDR_VAR 0 8
27282: PUSH
27283: DOUBLE
27284: LD_INT 1
27286: DEC
27287: ST_TO_ADDR
27288: LD_VAR 0 6
27292: PUSH
27293: FOR_TO
27294: IFFALSE 27356
// begin if tmp < result [ j ] [ 2 ] then
27296: LD_VAR 0 9
27300: PUSH
27301: LD_VAR 0 6
27305: PUSH
27306: LD_VAR 0 8
27310: ARRAY
27311: PUSH
27312: LD_INT 2
27314: ARRAY
27315: LESS
27316: IFFALSE 27354
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27318: LD_ADDR_VAR 0 6
27322: PUSH
27323: LD_VAR 0 6
27327: PPUSH
27328: LD_VAR 0 8
27332: PPUSH
27333: LD_VAR 0 7
27337: PUSH
27338: LD_VAR 0 9
27342: PUSH
27343: EMPTY
27344: LIST
27345: LIST
27346: PPUSH
27347: CALL_OW 2
27351: ST_TO_ADDR
// break ;
27352: GO 27356
// end ; end ;
27354: GO 27293
27356: POP
27357: POP
// end ; end ;
27358: GO 27157
27360: POP
27361: POP
// if result and not asc then
27362: LD_VAR 0 6
27366: PUSH
27367: LD_VAR 0 4
27371: NOT
27372: AND
27373: IFFALSE 27448
// begin tmp := result ;
27375: LD_ADDR_VAR 0 9
27379: PUSH
27380: LD_VAR 0 6
27384: ST_TO_ADDR
// for i = tmp downto 1 do
27385: LD_ADDR_VAR 0 7
27389: PUSH
27390: DOUBLE
27391: LD_VAR 0 9
27395: INC
27396: ST_TO_ADDR
27397: LD_INT 1
27399: PUSH
27400: FOR_DOWNTO
27401: IFFALSE 27446
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27403: LD_ADDR_VAR 0 6
27407: PUSH
27408: LD_VAR 0 6
27412: PPUSH
27413: LD_VAR 0 9
27417: PUSH
27418: LD_VAR 0 7
27422: MINUS
27423: PUSH
27424: LD_INT 1
27426: PLUS
27427: PPUSH
27428: LD_VAR 0 9
27432: PUSH
27433: LD_VAR 0 7
27437: ARRAY
27438: PPUSH
27439: CALL_OW 1
27443: ST_TO_ADDR
27444: GO 27400
27446: POP
27447: POP
// end ; tmp := [ ] ;
27448: LD_ADDR_VAR 0 9
27452: PUSH
27453: EMPTY
27454: ST_TO_ADDR
// if mode then
27455: LD_VAR 0 5
27459: IFFALSE 27528
// begin for i = 1 to result do
27461: LD_ADDR_VAR 0 7
27465: PUSH
27466: DOUBLE
27467: LD_INT 1
27469: DEC
27470: ST_TO_ADDR
27471: LD_VAR 0 6
27475: PUSH
27476: FOR_TO
27477: IFFALSE 27516
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27479: LD_ADDR_VAR 0 9
27483: PUSH
27484: LD_VAR 0 9
27488: PPUSH
27489: LD_VAR 0 7
27493: PPUSH
27494: LD_VAR 0 6
27498: PUSH
27499: LD_VAR 0 7
27503: ARRAY
27504: PUSH
27505: LD_INT 1
27507: ARRAY
27508: PPUSH
27509: CALL_OW 1
27513: ST_TO_ADDR
27514: GO 27476
27516: POP
27517: POP
// result := tmp ;
27518: LD_ADDR_VAR 0 6
27522: PUSH
27523: LD_VAR 0 9
27527: ST_TO_ADDR
// end ; end ;
27528: LD_VAR 0 6
27532: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27533: LD_INT 0
27535: PPUSH
27536: PPUSH
27537: PPUSH
27538: PPUSH
27539: PPUSH
27540: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27541: LD_ADDR_VAR 0 5
27545: PUSH
27546: LD_INT 0
27548: PUSH
27549: LD_INT 0
27551: PUSH
27552: LD_INT 0
27554: PUSH
27555: EMPTY
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: LIST
27561: LIST
27562: ST_TO_ADDR
// if not x or not y then
27563: LD_VAR 0 2
27567: NOT
27568: PUSH
27569: LD_VAR 0 3
27573: NOT
27574: OR
27575: IFFALSE 27579
// exit ;
27577: GO 29225
// if not range then
27579: LD_VAR 0 4
27583: NOT
27584: IFFALSE 27594
// range := 10 ;
27586: LD_ADDR_VAR 0 4
27590: PUSH
27591: LD_INT 10
27593: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27594: LD_ADDR_VAR 0 8
27598: PUSH
27599: LD_INT 81
27601: PUSH
27602: LD_VAR 0 1
27606: PUSH
27607: EMPTY
27608: LIST
27609: LIST
27610: PUSH
27611: LD_INT 92
27613: PUSH
27614: LD_VAR 0 2
27618: PUSH
27619: LD_VAR 0 3
27623: PUSH
27624: LD_VAR 0 4
27628: PUSH
27629: EMPTY
27630: LIST
27631: LIST
27632: LIST
27633: LIST
27634: PUSH
27635: LD_INT 3
27637: PUSH
27638: LD_INT 21
27640: PUSH
27641: LD_INT 3
27643: PUSH
27644: EMPTY
27645: LIST
27646: LIST
27647: PUSH
27648: EMPTY
27649: LIST
27650: LIST
27651: PUSH
27652: EMPTY
27653: LIST
27654: LIST
27655: LIST
27656: PPUSH
27657: CALL_OW 69
27661: ST_TO_ADDR
// if not tmp then
27662: LD_VAR 0 8
27666: NOT
27667: IFFALSE 27671
// exit ;
27669: GO 29225
// for i in tmp do
27671: LD_ADDR_VAR 0 6
27675: PUSH
27676: LD_VAR 0 8
27680: PUSH
27681: FOR_IN
27682: IFFALSE 29200
// begin points := [ 0 , 0 , 0 ] ;
27684: LD_ADDR_VAR 0 9
27688: PUSH
27689: LD_INT 0
27691: PUSH
27692: LD_INT 0
27694: PUSH
27695: LD_INT 0
27697: PUSH
27698: EMPTY
27699: LIST
27700: LIST
27701: LIST
27702: ST_TO_ADDR
// bpoints := 1 ;
27703: LD_ADDR_VAR 0 10
27707: PUSH
27708: LD_INT 1
27710: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27711: LD_VAR 0 6
27715: PPUSH
27716: CALL_OW 247
27720: PUSH
27721: LD_INT 1
27723: DOUBLE
27724: EQUAL
27725: IFTRUE 27729
27727: GO 28307
27729: POP
// begin if GetClass ( i ) = 1 then
27730: LD_VAR 0 6
27734: PPUSH
27735: CALL_OW 257
27739: PUSH
27740: LD_INT 1
27742: EQUAL
27743: IFFALSE 27764
// points := [ 10 , 5 , 3 ] ;
27745: LD_ADDR_VAR 0 9
27749: PUSH
27750: LD_INT 10
27752: PUSH
27753: LD_INT 5
27755: PUSH
27756: LD_INT 3
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: LIST
27763: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27764: LD_VAR 0 6
27768: PPUSH
27769: CALL_OW 257
27773: PUSH
27774: LD_INT 2
27776: PUSH
27777: LD_INT 3
27779: PUSH
27780: LD_INT 4
27782: PUSH
27783: EMPTY
27784: LIST
27785: LIST
27786: LIST
27787: IN
27788: IFFALSE 27809
// points := [ 3 , 2 , 1 ] ;
27790: LD_ADDR_VAR 0 9
27794: PUSH
27795: LD_INT 3
27797: PUSH
27798: LD_INT 2
27800: PUSH
27801: LD_INT 1
27803: PUSH
27804: EMPTY
27805: LIST
27806: LIST
27807: LIST
27808: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27809: LD_VAR 0 6
27813: PPUSH
27814: CALL_OW 257
27818: PUSH
27819: LD_INT 5
27821: EQUAL
27822: IFFALSE 27843
// points := [ 130 , 5 , 2 ] ;
27824: LD_ADDR_VAR 0 9
27828: PUSH
27829: LD_INT 130
27831: PUSH
27832: LD_INT 5
27834: PUSH
27835: LD_INT 2
27837: PUSH
27838: EMPTY
27839: LIST
27840: LIST
27841: LIST
27842: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27843: LD_VAR 0 6
27847: PPUSH
27848: CALL_OW 257
27852: PUSH
27853: LD_INT 8
27855: EQUAL
27856: IFFALSE 27877
// points := [ 35 , 35 , 30 ] ;
27858: LD_ADDR_VAR 0 9
27862: PUSH
27863: LD_INT 35
27865: PUSH
27866: LD_INT 35
27868: PUSH
27869: LD_INT 30
27871: PUSH
27872: EMPTY
27873: LIST
27874: LIST
27875: LIST
27876: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27877: LD_VAR 0 6
27881: PPUSH
27882: CALL_OW 257
27886: PUSH
27887: LD_INT 9
27889: EQUAL
27890: IFFALSE 27911
// points := [ 20 , 55 , 40 ] ;
27892: LD_ADDR_VAR 0 9
27896: PUSH
27897: LD_INT 20
27899: PUSH
27900: LD_INT 55
27902: PUSH
27903: LD_INT 40
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: LIST
27910: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27911: LD_VAR 0 6
27915: PPUSH
27916: CALL_OW 257
27920: PUSH
27921: LD_INT 12
27923: PUSH
27924: LD_INT 16
27926: PUSH
27927: EMPTY
27928: LIST
27929: LIST
27930: IN
27931: IFFALSE 27952
// points := [ 5 , 3 , 2 ] ;
27933: LD_ADDR_VAR 0 9
27937: PUSH
27938: LD_INT 5
27940: PUSH
27941: LD_INT 3
27943: PUSH
27944: LD_INT 2
27946: PUSH
27947: EMPTY
27948: LIST
27949: LIST
27950: LIST
27951: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27952: LD_VAR 0 6
27956: PPUSH
27957: CALL_OW 257
27961: PUSH
27962: LD_INT 17
27964: EQUAL
27965: IFFALSE 27986
// points := [ 100 , 50 , 75 ] ;
27967: LD_ADDR_VAR 0 9
27971: PUSH
27972: LD_INT 100
27974: PUSH
27975: LD_INT 50
27977: PUSH
27978: LD_INT 75
27980: PUSH
27981: EMPTY
27982: LIST
27983: LIST
27984: LIST
27985: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27986: LD_VAR 0 6
27990: PPUSH
27991: CALL_OW 257
27995: PUSH
27996: LD_INT 15
27998: EQUAL
27999: IFFALSE 28020
// points := [ 10 , 5 , 3 ] ;
28001: LD_ADDR_VAR 0 9
28005: PUSH
28006: LD_INT 10
28008: PUSH
28009: LD_INT 5
28011: PUSH
28012: LD_INT 3
28014: PUSH
28015: EMPTY
28016: LIST
28017: LIST
28018: LIST
28019: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28020: LD_VAR 0 6
28024: PPUSH
28025: CALL_OW 257
28029: PUSH
28030: LD_INT 14
28032: EQUAL
28033: IFFALSE 28054
// points := [ 10 , 0 , 0 ] ;
28035: LD_ADDR_VAR 0 9
28039: PUSH
28040: LD_INT 10
28042: PUSH
28043: LD_INT 0
28045: PUSH
28046: LD_INT 0
28048: PUSH
28049: EMPTY
28050: LIST
28051: LIST
28052: LIST
28053: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28054: LD_VAR 0 6
28058: PPUSH
28059: CALL_OW 257
28063: PUSH
28064: LD_INT 11
28066: EQUAL
28067: IFFALSE 28088
// points := [ 30 , 10 , 5 ] ;
28069: LD_ADDR_VAR 0 9
28073: PUSH
28074: LD_INT 30
28076: PUSH
28077: LD_INT 10
28079: PUSH
28080: LD_INT 5
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: LIST
28087: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28088: LD_VAR 0 1
28092: PPUSH
28093: LD_INT 5
28095: PPUSH
28096: CALL_OW 321
28100: PUSH
28101: LD_INT 2
28103: EQUAL
28104: IFFALSE 28121
// bpoints := bpoints * 1.8 ;
28106: LD_ADDR_VAR 0 10
28110: PUSH
28111: LD_VAR 0 10
28115: PUSH
28116: LD_REAL  1.80000000000000E+0000
28119: MUL
28120: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28121: LD_VAR 0 6
28125: PPUSH
28126: CALL_OW 257
28130: PUSH
28131: LD_INT 1
28133: PUSH
28134: LD_INT 2
28136: PUSH
28137: LD_INT 3
28139: PUSH
28140: LD_INT 4
28142: PUSH
28143: EMPTY
28144: LIST
28145: LIST
28146: LIST
28147: LIST
28148: IN
28149: PUSH
28150: LD_VAR 0 1
28154: PPUSH
28155: LD_INT 51
28157: PPUSH
28158: CALL_OW 321
28162: PUSH
28163: LD_INT 2
28165: EQUAL
28166: AND
28167: IFFALSE 28184
// bpoints := bpoints * 1.2 ;
28169: LD_ADDR_VAR 0 10
28173: PUSH
28174: LD_VAR 0 10
28178: PUSH
28179: LD_REAL  1.20000000000000E+0000
28182: MUL
28183: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
28184: LD_VAR 0 6
28188: PPUSH
28189: CALL_OW 257
28193: PUSH
28194: LD_INT 5
28196: PUSH
28197: LD_INT 7
28199: PUSH
28200: LD_INT 9
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: LIST
28207: IN
28208: PUSH
28209: LD_VAR 0 1
28213: PPUSH
28214: LD_INT 52
28216: PPUSH
28217: CALL_OW 321
28221: PUSH
28222: LD_INT 2
28224: EQUAL
28225: AND
28226: IFFALSE 28243
// bpoints := bpoints * 1.5 ;
28228: LD_ADDR_VAR 0 10
28232: PUSH
28233: LD_VAR 0 10
28237: PUSH
28238: LD_REAL  1.50000000000000E+0000
28241: MUL
28242: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
28243: LD_VAR 0 1
28247: PPUSH
28248: LD_INT 66
28250: PPUSH
28251: CALL_OW 321
28255: PUSH
28256: LD_INT 2
28258: EQUAL
28259: IFFALSE 28276
// bpoints := bpoints * 1.1 ;
28261: LD_ADDR_VAR 0 10
28265: PUSH
28266: LD_VAR 0 10
28270: PUSH
28271: LD_REAL  1.10000000000000E+0000
28274: MUL
28275: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
28276: LD_ADDR_VAR 0 10
28280: PUSH
28281: LD_VAR 0 10
28285: PUSH
28286: LD_VAR 0 6
28290: PPUSH
28291: LD_INT 1
28293: PPUSH
28294: CALL_OW 259
28298: PUSH
28299: LD_REAL  1.15000000000000E+0000
28302: MUL
28303: MUL
28304: ST_TO_ADDR
// end ; unit_vehicle :
28305: GO 29129
28307: LD_INT 2
28309: DOUBLE
28310: EQUAL
28311: IFTRUE 28315
28313: GO 29117
28315: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28316: LD_VAR 0 6
28320: PPUSH
28321: CALL_OW 264
28325: PUSH
28326: LD_INT 2
28328: PUSH
28329: LD_INT 42
28331: PUSH
28332: LD_INT 24
28334: PUSH
28335: EMPTY
28336: LIST
28337: LIST
28338: LIST
28339: IN
28340: IFFALSE 28361
// points := [ 25 , 5 , 3 ] ;
28342: LD_ADDR_VAR 0 9
28346: PUSH
28347: LD_INT 25
28349: PUSH
28350: LD_INT 5
28352: PUSH
28353: LD_INT 3
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: LIST
28360: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28361: LD_VAR 0 6
28365: PPUSH
28366: CALL_OW 264
28370: PUSH
28371: LD_INT 4
28373: PUSH
28374: LD_INT 43
28376: PUSH
28377: LD_INT 25
28379: PUSH
28380: EMPTY
28381: LIST
28382: LIST
28383: LIST
28384: IN
28385: IFFALSE 28406
// points := [ 40 , 15 , 5 ] ;
28387: LD_ADDR_VAR 0 9
28391: PUSH
28392: LD_INT 40
28394: PUSH
28395: LD_INT 15
28397: PUSH
28398: LD_INT 5
28400: PUSH
28401: EMPTY
28402: LIST
28403: LIST
28404: LIST
28405: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28406: LD_VAR 0 6
28410: PPUSH
28411: CALL_OW 264
28415: PUSH
28416: LD_INT 3
28418: PUSH
28419: LD_INT 23
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: IN
28426: IFFALSE 28447
// points := [ 7 , 25 , 8 ] ;
28428: LD_ADDR_VAR 0 9
28432: PUSH
28433: LD_INT 7
28435: PUSH
28436: LD_INT 25
28438: PUSH
28439: LD_INT 8
28441: PUSH
28442: EMPTY
28443: LIST
28444: LIST
28445: LIST
28446: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28447: LD_VAR 0 6
28451: PPUSH
28452: CALL_OW 264
28456: PUSH
28457: LD_INT 5
28459: PUSH
28460: LD_INT 27
28462: PUSH
28463: LD_INT 44
28465: PUSH
28466: EMPTY
28467: LIST
28468: LIST
28469: LIST
28470: IN
28471: IFFALSE 28492
// points := [ 14 , 50 , 16 ] ;
28473: LD_ADDR_VAR 0 9
28477: PUSH
28478: LD_INT 14
28480: PUSH
28481: LD_INT 50
28483: PUSH
28484: LD_INT 16
28486: PUSH
28487: EMPTY
28488: LIST
28489: LIST
28490: LIST
28491: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28492: LD_VAR 0 6
28496: PPUSH
28497: CALL_OW 264
28501: PUSH
28502: LD_INT 6
28504: PUSH
28505: LD_INT 46
28507: PUSH
28508: EMPTY
28509: LIST
28510: LIST
28511: IN
28512: IFFALSE 28533
// points := [ 32 , 120 , 70 ] ;
28514: LD_ADDR_VAR 0 9
28518: PUSH
28519: LD_INT 32
28521: PUSH
28522: LD_INT 120
28524: PUSH
28525: LD_INT 70
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: LIST
28532: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
28533: LD_VAR 0 6
28537: PPUSH
28538: CALL_OW 264
28542: PUSH
28543: LD_INT 7
28545: PUSH
28546: LD_INT 28
28548: PUSH
28549: LD_INT 45
28551: PUSH
28552: EMPTY
28553: LIST
28554: LIST
28555: LIST
28556: IN
28557: IFFALSE 28578
// points := [ 35 , 20 , 45 ] ;
28559: LD_ADDR_VAR 0 9
28563: PUSH
28564: LD_INT 35
28566: PUSH
28567: LD_INT 20
28569: PUSH
28570: LD_INT 45
28572: PUSH
28573: EMPTY
28574: LIST
28575: LIST
28576: LIST
28577: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28578: LD_VAR 0 6
28582: PPUSH
28583: CALL_OW 264
28587: PUSH
28588: LD_INT 47
28590: PUSH
28591: EMPTY
28592: LIST
28593: IN
28594: IFFALSE 28615
// points := [ 67 , 45 , 75 ] ;
28596: LD_ADDR_VAR 0 9
28600: PUSH
28601: LD_INT 67
28603: PUSH
28604: LD_INT 45
28606: PUSH
28607: LD_INT 75
28609: PUSH
28610: EMPTY
28611: LIST
28612: LIST
28613: LIST
28614: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28615: LD_VAR 0 6
28619: PPUSH
28620: CALL_OW 264
28624: PUSH
28625: LD_INT 26
28627: PUSH
28628: EMPTY
28629: LIST
28630: IN
28631: IFFALSE 28652
// points := [ 120 , 30 , 80 ] ;
28633: LD_ADDR_VAR 0 9
28637: PUSH
28638: LD_INT 120
28640: PUSH
28641: LD_INT 30
28643: PUSH
28644: LD_INT 80
28646: PUSH
28647: EMPTY
28648: LIST
28649: LIST
28650: LIST
28651: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28652: LD_VAR 0 6
28656: PPUSH
28657: CALL_OW 264
28661: PUSH
28662: LD_INT 22
28664: PUSH
28665: EMPTY
28666: LIST
28667: IN
28668: IFFALSE 28689
// points := [ 40 , 1 , 1 ] ;
28670: LD_ADDR_VAR 0 9
28674: PUSH
28675: LD_INT 40
28677: PUSH
28678: LD_INT 1
28680: PUSH
28681: LD_INT 1
28683: PUSH
28684: EMPTY
28685: LIST
28686: LIST
28687: LIST
28688: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28689: LD_VAR 0 6
28693: PPUSH
28694: CALL_OW 264
28698: PUSH
28699: LD_INT 29
28701: PUSH
28702: EMPTY
28703: LIST
28704: IN
28705: IFFALSE 28726
// points := [ 70 , 200 , 400 ] ;
28707: LD_ADDR_VAR 0 9
28711: PUSH
28712: LD_INT 70
28714: PUSH
28715: LD_INT 200
28717: PUSH
28718: LD_INT 400
28720: PUSH
28721: EMPTY
28722: LIST
28723: LIST
28724: LIST
28725: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28726: LD_VAR 0 6
28730: PPUSH
28731: CALL_OW 264
28735: PUSH
28736: LD_INT 14
28738: PUSH
28739: LD_INT 53
28741: PUSH
28742: EMPTY
28743: LIST
28744: LIST
28745: IN
28746: IFFALSE 28767
// points := [ 40 , 10 , 20 ] ;
28748: LD_ADDR_VAR 0 9
28752: PUSH
28753: LD_INT 40
28755: PUSH
28756: LD_INT 10
28758: PUSH
28759: LD_INT 20
28761: PUSH
28762: EMPTY
28763: LIST
28764: LIST
28765: LIST
28766: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28767: LD_VAR 0 6
28771: PPUSH
28772: CALL_OW 264
28776: PUSH
28777: LD_INT 9
28779: PUSH
28780: EMPTY
28781: LIST
28782: IN
28783: IFFALSE 28804
// points := [ 5 , 70 , 20 ] ;
28785: LD_ADDR_VAR 0 9
28789: PUSH
28790: LD_INT 5
28792: PUSH
28793: LD_INT 70
28795: PUSH
28796: LD_INT 20
28798: PUSH
28799: EMPTY
28800: LIST
28801: LIST
28802: LIST
28803: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28804: LD_VAR 0 6
28808: PPUSH
28809: CALL_OW 264
28813: PUSH
28814: LD_INT 10
28816: PUSH
28817: EMPTY
28818: LIST
28819: IN
28820: IFFALSE 28841
// points := [ 35 , 110 , 70 ] ;
28822: LD_ADDR_VAR 0 9
28826: PUSH
28827: LD_INT 35
28829: PUSH
28830: LD_INT 110
28832: PUSH
28833: LD_INT 70
28835: PUSH
28836: EMPTY
28837: LIST
28838: LIST
28839: LIST
28840: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28841: LD_VAR 0 6
28845: PPUSH
28846: CALL_OW 265
28850: PUSH
28851: LD_INT 25
28853: EQUAL
28854: IFFALSE 28875
// points := [ 80 , 65 , 100 ] ;
28856: LD_ADDR_VAR 0 9
28860: PUSH
28861: LD_INT 80
28863: PUSH
28864: LD_INT 65
28866: PUSH
28867: LD_INT 100
28869: PUSH
28870: EMPTY
28871: LIST
28872: LIST
28873: LIST
28874: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28875: LD_VAR 0 6
28879: PPUSH
28880: CALL_OW 263
28884: PUSH
28885: LD_INT 1
28887: EQUAL
28888: IFFALSE 28923
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28890: LD_ADDR_VAR 0 10
28894: PUSH
28895: LD_VAR 0 10
28899: PUSH
28900: LD_VAR 0 6
28904: PPUSH
28905: CALL_OW 311
28909: PPUSH
28910: LD_INT 3
28912: PPUSH
28913: CALL_OW 259
28917: PUSH
28918: LD_INT 4
28920: MUL
28921: MUL
28922: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28923: LD_VAR 0 6
28927: PPUSH
28928: CALL_OW 263
28932: PUSH
28933: LD_INT 2
28935: EQUAL
28936: IFFALSE 28987
// begin j := IsControledBy ( i ) ;
28938: LD_ADDR_VAR 0 7
28942: PUSH
28943: LD_VAR 0 6
28947: PPUSH
28948: CALL_OW 312
28952: ST_TO_ADDR
// if j then
28953: LD_VAR 0 7
28957: IFFALSE 28987
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28959: LD_ADDR_VAR 0 10
28963: PUSH
28964: LD_VAR 0 10
28968: PUSH
28969: LD_VAR 0 7
28973: PPUSH
28974: LD_INT 3
28976: PPUSH
28977: CALL_OW 259
28981: PUSH
28982: LD_INT 3
28984: MUL
28985: MUL
28986: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28987: LD_VAR 0 6
28991: PPUSH
28992: CALL_OW 264
28996: PUSH
28997: LD_INT 5
28999: PUSH
29000: LD_INT 6
29002: PUSH
29003: LD_INT 46
29005: PUSH
29006: LD_INT 44
29008: PUSH
29009: LD_INT 47
29011: PUSH
29012: LD_INT 45
29014: PUSH
29015: LD_INT 28
29017: PUSH
29018: LD_INT 7
29020: PUSH
29021: LD_INT 27
29023: PUSH
29024: LD_INT 29
29026: PUSH
29027: EMPTY
29028: LIST
29029: LIST
29030: LIST
29031: LIST
29032: LIST
29033: LIST
29034: LIST
29035: LIST
29036: LIST
29037: LIST
29038: IN
29039: PUSH
29040: LD_VAR 0 1
29044: PPUSH
29045: LD_INT 52
29047: PPUSH
29048: CALL_OW 321
29052: PUSH
29053: LD_INT 2
29055: EQUAL
29056: AND
29057: IFFALSE 29074
// bpoints := bpoints * 1.2 ;
29059: LD_ADDR_VAR 0 10
29063: PUSH
29064: LD_VAR 0 10
29068: PUSH
29069: LD_REAL  1.20000000000000E+0000
29072: MUL
29073: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29074: LD_VAR 0 6
29078: PPUSH
29079: CALL_OW 264
29083: PUSH
29084: LD_INT 6
29086: PUSH
29087: LD_INT 46
29089: PUSH
29090: LD_INT 47
29092: PUSH
29093: EMPTY
29094: LIST
29095: LIST
29096: LIST
29097: IN
29098: IFFALSE 29115
// bpoints := bpoints * 1.2 ;
29100: LD_ADDR_VAR 0 10
29104: PUSH
29105: LD_VAR 0 10
29109: PUSH
29110: LD_REAL  1.20000000000000E+0000
29113: MUL
29114: ST_TO_ADDR
// end ; unit_building :
29115: GO 29129
29117: LD_INT 3
29119: DOUBLE
29120: EQUAL
29121: IFTRUE 29125
29123: GO 29128
29125: POP
// ; end ;
29126: GO 29129
29128: POP
// for j = 1 to 3 do
29129: LD_ADDR_VAR 0 7
29133: PUSH
29134: DOUBLE
29135: LD_INT 1
29137: DEC
29138: ST_TO_ADDR
29139: LD_INT 3
29141: PUSH
29142: FOR_TO
29143: IFFALSE 29196
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
29145: LD_ADDR_VAR 0 5
29149: PUSH
29150: LD_VAR 0 5
29154: PPUSH
29155: LD_VAR 0 7
29159: PPUSH
29160: LD_VAR 0 5
29164: PUSH
29165: LD_VAR 0 7
29169: ARRAY
29170: PUSH
29171: LD_VAR 0 9
29175: PUSH
29176: LD_VAR 0 7
29180: ARRAY
29181: PUSH
29182: LD_VAR 0 10
29186: MUL
29187: PLUS
29188: PPUSH
29189: CALL_OW 1
29193: ST_TO_ADDR
29194: GO 29142
29196: POP
29197: POP
// end ;
29198: GO 27681
29200: POP
29201: POP
// result := Replace ( result , 4 , tmp ) ;
29202: LD_ADDR_VAR 0 5
29206: PUSH
29207: LD_VAR 0 5
29211: PPUSH
29212: LD_INT 4
29214: PPUSH
29215: LD_VAR 0 8
29219: PPUSH
29220: CALL_OW 1
29224: ST_TO_ADDR
// end ;
29225: LD_VAR 0 5
29229: RET
// export function DangerAtRange ( unit , range ) ; begin
29230: LD_INT 0
29232: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
29233: LD_ADDR_VAR 0 3
29237: PUSH
29238: LD_VAR 0 1
29242: PPUSH
29243: CALL_OW 255
29247: PPUSH
29248: LD_VAR 0 1
29252: PPUSH
29253: CALL_OW 250
29257: PPUSH
29258: LD_VAR 0 1
29262: PPUSH
29263: CALL_OW 251
29267: PPUSH
29268: LD_VAR 0 2
29272: PPUSH
29273: CALL 27533 0 4
29277: ST_TO_ADDR
// end ;
29278: LD_VAR 0 3
29282: RET
// export function DangerInArea ( side , area ) ; begin
29283: LD_INT 0
29285: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
29286: LD_ADDR_VAR 0 3
29290: PUSH
29291: LD_VAR 0 2
29295: PPUSH
29296: LD_INT 81
29298: PUSH
29299: LD_VAR 0 1
29303: PUSH
29304: EMPTY
29305: LIST
29306: LIST
29307: PPUSH
29308: CALL_OW 70
29312: ST_TO_ADDR
// end ;
29313: LD_VAR 0 3
29317: RET
// export function IsExtension ( b ) ; begin
29318: LD_INT 0
29320: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29321: LD_ADDR_VAR 0 2
29325: PUSH
29326: LD_VAR 0 1
29330: PUSH
29331: LD_INT 23
29333: PUSH
29334: LD_INT 20
29336: PUSH
29337: LD_INT 22
29339: PUSH
29340: LD_INT 17
29342: PUSH
29343: LD_INT 24
29345: PUSH
29346: LD_INT 21
29348: PUSH
29349: LD_INT 19
29351: PUSH
29352: LD_INT 16
29354: PUSH
29355: LD_INT 25
29357: PUSH
29358: LD_INT 18
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: LIST
29365: LIST
29366: LIST
29367: LIST
29368: LIST
29369: LIST
29370: LIST
29371: LIST
29372: IN
29373: ST_TO_ADDR
// end ;
29374: LD_VAR 0 2
29378: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
29379: LD_INT 0
29381: PPUSH
29382: PPUSH
29383: PPUSH
// result := [ ] ;
29384: LD_ADDR_VAR 0 3
29388: PUSH
29389: EMPTY
29390: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29391: LD_ADDR_VAR 0 4
29395: PUSH
29396: LD_VAR 0 2
29400: PPUSH
29401: LD_INT 21
29403: PUSH
29404: LD_INT 3
29406: PUSH
29407: EMPTY
29408: LIST
29409: LIST
29410: PPUSH
29411: CALL_OW 70
29415: ST_TO_ADDR
// if not tmp then
29416: LD_VAR 0 4
29420: NOT
29421: IFFALSE 29425
// exit ;
29423: GO 29483
// for i in tmp do
29425: LD_ADDR_VAR 0 5
29429: PUSH
29430: LD_VAR 0 4
29434: PUSH
29435: FOR_IN
29436: IFFALSE 29471
// if GetBase ( i ) <> base then
29438: LD_VAR 0 5
29442: PPUSH
29443: CALL_OW 274
29447: PUSH
29448: LD_VAR 0 1
29452: NONEQUAL
29453: IFFALSE 29469
// ComLinkToBase ( base , i ) ;
29455: LD_VAR 0 1
29459: PPUSH
29460: LD_VAR 0 5
29464: PPUSH
29465: CALL_OW 169
29469: GO 29435
29471: POP
29472: POP
// result := tmp ;
29473: LD_ADDR_VAR 0 3
29477: PUSH
29478: LD_VAR 0 4
29482: ST_TO_ADDR
// end ;
29483: LD_VAR 0 3
29487: RET
// export function ComComplete ( unit , b ) ; var i ; begin
29488: LD_INT 0
29490: PPUSH
29491: PPUSH
// if BuildingStatus ( b ) = bs_build then
29492: LD_VAR 0 2
29496: PPUSH
29497: CALL_OW 461
29501: PUSH
29502: LD_INT 1
29504: EQUAL
29505: IFFALSE 29565
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29507: LD_VAR 0 1
29511: PPUSH
29512: LD_STRING h
29514: PUSH
29515: LD_VAR 0 2
29519: PPUSH
29520: CALL_OW 250
29524: PUSH
29525: LD_VAR 0 2
29529: PPUSH
29530: CALL_OW 251
29534: PUSH
29535: LD_VAR 0 2
29539: PUSH
29540: LD_INT 0
29542: PUSH
29543: LD_INT 0
29545: PUSH
29546: LD_INT 0
29548: PUSH
29549: EMPTY
29550: LIST
29551: LIST
29552: LIST
29553: LIST
29554: LIST
29555: LIST
29556: LIST
29557: PUSH
29558: EMPTY
29559: LIST
29560: PPUSH
29561: CALL_OW 446
// end ;
29565: LD_VAR 0 3
29569: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29570: LD_INT 0
29572: PPUSH
29573: PPUSH
29574: PPUSH
29575: PPUSH
29576: PPUSH
29577: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
29578: LD_VAR 0 1
29582: NOT
29583: PUSH
29584: LD_VAR 0 1
29588: PPUSH
29589: CALL_OW 263
29593: PUSH
29594: LD_INT 2
29596: EQUAL
29597: NOT
29598: OR
29599: IFFALSE 29603
// exit ;
29601: GO 29919
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29603: LD_ADDR_VAR 0 6
29607: PUSH
29608: LD_INT 22
29610: PUSH
29611: LD_VAR 0 1
29615: PPUSH
29616: CALL_OW 255
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: PUSH
29625: LD_INT 2
29627: PUSH
29628: LD_INT 30
29630: PUSH
29631: LD_INT 36
29633: PUSH
29634: EMPTY
29635: LIST
29636: LIST
29637: PUSH
29638: LD_INT 34
29640: PUSH
29641: LD_INT 31
29643: PUSH
29644: EMPTY
29645: LIST
29646: LIST
29647: PUSH
29648: EMPTY
29649: LIST
29650: LIST
29651: LIST
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PPUSH
29657: CALL_OW 69
29661: ST_TO_ADDR
// if not tmp then
29662: LD_VAR 0 6
29666: NOT
29667: IFFALSE 29671
// exit ;
29669: GO 29919
// result := [ ] ;
29671: LD_ADDR_VAR 0 2
29675: PUSH
29676: EMPTY
29677: ST_TO_ADDR
// for i in tmp do
29678: LD_ADDR_VAR 0 3
29682: PUSH
29683: LD_VAR 0 6
29687: PUSH
29688: FOR_IN
29689: IFFALSE 29760
// begin t := UnitsInside ( i ) ;
29691: LD_ADDR_VAR 0 4
29695: PUSH
29696: LD_VAR 0 3
29700: PPUSH
29701: CALL_OW 313
29705: ST_TO_ADDR
// if t then
29706: LD_VAR 0 4
29710: IFFALSE 29758
// for j in t do
29712: LD_ADDR_VAR 0 7
29716: PUSH
29717: LD_VAR 0 4
29721: PUSH
29722: FOR_IN
29723: IFFALSE 29756
// result := Insert ( result , result + 1 , j ) ;
29725: LD_ADDR_VAR 0 2
29729: PUSH
29730: LD_VAR 0 2
29734: PPUSH
29735: LD_VAR 0 2
29739: PUSH
29740: LD_INT 1
29742: PLUS
29743: PPUSH
29744: LD_VAR 0 7
29748: PPUSH
29749: CALL_OW 2
29753: ST_TO_ADDR
29754: GO 29722
29756: POP
29757: POP
// end ;
29758: GO 29688
29760: POP
29761: POP
// if not result then
29762: LD_VAR 0 2
29766: NOT
29767: IFFALSE 29771
// exit ;
29769: GO 29919
// mech := result [ 1 ] ;
29771: LD_ADDR_VAR 0 5
29775: PUSH
29776: LD_VAR 0 2
29780: PUSH
29781: LD_INT 1
29783: ARRAY
29784: ST_TO_ADDR
// if result > 1 then
29785: LD_VAR 0 2
29789: PUSH
29790: LD_INT 1
29792: GREATER
29793: IFFALSE 29905
// for i = 2 to result do
29795: LD_ADDR_VAR 0 3
29799: PUSH
29800: DOUBLE
29801: LD_INT 2
29803: DEC
29804: ST_TO_ADDR
29805: LD_VAR 0 2
29809: PUSH
29810: FOR_TO
29811: IFFALSE 29903
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29813: LD_ADDR_VAR 0 4
29817: PUSH
29818: LD_VAR 0 2
29822: PUSH
29823: LD_VAR 0 3
29827: ARRAY
29828: PPUSH
29829: LD_INT 3
29831: PPUSH
29832: CALL_OW 259
29836: PUSH
29837: LD_VAR 0 2
29841: PUSH
29842: LD_VAR 0 3
29846: ARRAY
29847: PPUSH
29848: CALL_OW 432
29852: MINUS
29853: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29854: LD_VAR 0 4
29858: PUSH
29859: LD_VAR 0 5
29863: PPUSH
29864: LD_INT 3
29866: PPUSH
29867: CALL_OW 259
29871: PUSH
29872: LD_VAR 0 5
29876: PPUSH
29877: CALL_OW 432
29881: MINUS
29882: GREATEREQUAL
29883: IFFALSE 29901
// mech := result [ i ] ;
29885: LD_ADDR_VAR 0 5
29889: PUSH
29890: LD_VAR 0 2
29894: PUSH
29895: LD_VAR 0 3
29899: ARRAY
29900: ST_TO_ADDR
// end ;
29901: GO 29810
29903: POP
29904: POP
// ComLinkTo ( vehicle , mech ) ;
29905: LD_VAR 0 1
29909: PPUSH
29910: LD_VAR 0 5
29914: PPUSH
29915: CALL_OW 135
// end ;
29919: LD_VAR 0 2
29923: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29924: LD_INT 0
29926: PPUSH
29927: PPUSH
29928: PPUSH
29929: PPUSH
29930: PPUSH
29931: PPUSH
29932: PPUSH
29933: PPUSH
29934: PPUSH
29935: PPUSH
29936: PPUSH
29937: PPUSH
29938: PPUSH
// result := [ ] ;
29939: LD_ADDR_VAR 0 7
29943: PUSH
29944: EMPTY
29945: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29946: LD_VAR 0 1
29950: PPUSH
29951: CALL_OW 266
29955: PUSH
29956: LD_INT 0
29958: PUSH
29959: LD_INT 1
29961: PUSH
29962: EMPTY
29963: LIST
29964: LIST
29965: IN
29966: NOT
29967: IFFALSE 29971
// exit ;
29969: GO 31602
// if name then
29971: LD_VAR 0 3
29975: IFFALSE 29991
// SetBName ( base_dep , name ) ;
29977: LD_VAR 0 1
29981: PPUSH
29982: LD_VAR 0 3
29986: PPUSH
29987: CALL_OW 500
// base := GetBase ( base_dep ) ;
29991: LD_ADDR_VAR 0 15
29995: PUSH
29996: LD_VAR 0 1
30000: PPUSH
30001: CALL_OW 274
30005: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30006: LD_ADDR_VAR 0 16
30010: PUSH
30011: LD_VAR 0 1
30015: PPUSH
30016: CALL_OW 255
30020: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30021: LD_ADDR_VAR 0 17
30025: PUSH
30026: LD_VAR 0 1
30030: PPUSH
30031: CALL_OW 248
30035: ST_TO_ADDR
// if sources then
30036: LD_VAR 0 5
30040: IFFALSE 30087
// for i = 1 to 3 do
30042: LD_ADDR_VAR 0 8
30046: PUSH
30047: DOUBLE
30048: LD_INT 1
30050: DEC
30051: ST_TO_ADDR
30052: LD_INT 3
30054: PUSH
30055: FOR_TO
30056: IFFALSE 30085
// AddResourceType ( base , i , sources [ i ] ) ;
30058: LD_VAR 0 15
30062: PPUSH
30063: LD_VAR 0 8
30067: PPUSH
30068: LD_VAR 0 5
30072: PUSH
30073: LD_VAR 0 8
30077: ARRAY
30078: PPUSH
30079: CALL_OW 276
30083: GO 30055
30085: POP
30086: POP
// buildings := GetBaseBuildings ( base , area ) ;
30087: LD_ADDR_VAR 0 18
30091: PUSH
30092: LD_VAR 0 15
30096: PPUSH
30097: LD_VAR 0 2
30101: PPUSH
30102: CALL 29379 0 2
30106: ST_TO_ADDR
// InitHc ;
30107: CALL_OW 19
// InitUc ;
30111: CALL_OW 18
// uc_side := side ;
30115: LD_ADDR_OWVAR 20
30119: PUSH
30120: LD_VAR 0 16
30124: ST_TO_ADDR
// uc_nation := nation ;
30125: LD_ADDR_OWVAR 21
30129: PUSH
30130: LD_VAR 0 17
30134: ST_TO_ADDR
// if buildings then
30135: LD_VAR 0 18
30139: IFFALSE 31461
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
30141: LD_ADDR_VAR 0 19
30145: PUSH
30146: LD_VAR 0 18
30150: PPUSH
30151: LD_INT 2
30153: PUSH
30154: LD_INT 30
30156: PUSH
30157: LD_INT 29
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: PUSH
30164: LD_INT 30
30166: PUSH
30167: LD_INT 30
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: LIST
30178: PPUSH
30179: CALL_OW 72
30183: ST_TO_ADDR
// if tmp then
30184: LD_VAR 0 19
30188: IFFALSE 30236
// for i in tmp do
30190: LD_ADDR_VAR 0 8
30194: PUSH
30195: LD_VAR 0 19
30199: PUSH
30200: FOR_IN
30201: IFFALSE 30234
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
30203: LD_VAR 0 8
30207: PPUSH
30208: CALL_OW 250
30212: PPUSH
30213: LD_VAR 0 8
30217: PPUSH
30218: CALL_OW 251
30222: PPUSH
30223: LD_VAR 0 16
30227: PPUSH
30228: CALL_OW 441
30232: GO 30200
30234: POP
30235: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
30236: LD_VAR 0 18
30240: PPUSH
30241: LD_INT 2
30243: PUSH
30244: LD_INT 30
30246: PUSH
30247: LD_INT 32
30249: PUSH
30250: EMPTY
30251: LIST
30252: LIST
30253: PUSH
30254: LD_INT 30
30256: PUSH
30257: LD_INT 33
30259: PUSH
30260: EMPTY
30261: LIST
30262: LIST
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: LIST
30268: PPUSH
30269: CALL_OW 72
30273: IFFALSE 30361
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30275: LD_ADDR_VAR 0 8
30279: PUSH
30280: LD_VAR 0 18
30284: PPUSH
30285: LD_INT 2
30287: PUSH
30288: LD_INT 30
30290: PUSH
30291: LD_INT 32
30293: PUSH
30294: EMPTY
30295: LIST
30296: LIST
30297: PUSH
30298: LD_INT 30
30300: PUSH
30301: LD_INT 33
30303: PUSH
30304: EMPTY
30305: LIST
30306: LIST
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: LIST
30312: PPUSH
30313: CALL_OW 72
30317: PUSH
30318: FOR_IN
30319: IFFALSE 30359
// begin if not GetBWeapon ( i ) then
30321: LD_VAR 0 8
30325: PPUSH
30326: CALL_OW 269
30330: NOT
30331: IFFALSE 30357
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30333: LD_VAR 0 8
30337: PPUSH
30338: LD_VAR 0 8
30342: PPUSH
30343: LD_VAR 0 2
30347: PPUSH
30348: CALL 31607 0 2
30352: PPUSH
30353: CALL_OW 431
// end ;
30357: GO 30318
30359: POP
30360: POP
// end ; for i = 1 to personel do
30361: LD_ADDR_VAR 0 8
30365: PUSH
30366: DOUBLE
30367: LD_INT 1
30369: DEC
30370: ST_TO_ADDR
30371: LD_VAR 0 6
30375: PUSH
30376: FOR_TO
30377: IFFALSE 31441
// begin if i > 4 then
30379: LD_VAR 0 8
30383: PUSH
30384: LD_INT 4
30386: GREATER
30387: IFFALSE 30391
// break ;
30389: GO 31441
// case i of 1 :
30391: LD_VAR 0 8
30395: PUSH
30396: LD_INT 1
30398: DOUBLE
30399: EQUAL
30400: IFTRUE 30404
30402: GO 30484
30404: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30405: LD_ADDR_VAR 0 12
30409: PUSH
30410: LD_VAR 0 18
30414: PPUSH
30415: LD_INT 22
30417: PUSH
30418: LD_VAR 0 16
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: PUSH
30427: LD_INT 58
30429: PUSH
30430: EMPTY
30431: LIST
30432: PUSH
30433: LD_INT 2
30435: PUSH
30436: LD_INT 30
30438: PUSH
30439: LD_INT 32
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: PUSH
30446: LD_INT 30
30448: PUSH
30449: LD_INT 4
30451: PUSH
30452: EMPTY
30453: LIST
30454: LIST
30455: PUSH
30456: LD_INT 30
30458: PUSH
30459: LD_INT 5
30461: PUSH
30462: EMPTY
30463: LIST
30464: LIST
30465: PUSH
30466: EMPTY
30467: LIST
30468: LIST
30469: LIST
30470: LIST
30471: PUSH
30472: EMPTY
30473: LIST
30474: LIST
30475: LIST
30476: PPUSH
30477: CALL_OW 72
30481: ST_TO_ADDR
30482: GO 30706
30484: LD_INT 2
30486: DOUBLE
30487: EQUAL
30488: IFTRUE 30492
30490: GO 30554
30492: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30493: LD_ADDR_VAR 0 12
30497: PUSH
30498: LD_VAR 0 18
30502: PPUSH
30503: LD_INT 22
30505: PUSH
30506: LD_VAR 0 16
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PUSH
30515: LD_INT 2
30517: PUSH
30518: LD_INT 30
30520: PUSH
30521: LD_INT 0
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: PUSH
30528: LD_INT 30
30530: PUSH
30531: LD_INT 1
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: PUSH
30538: EMPTY
30539: LIST
30540: LIST
30541: LIST
30542: PUSH
30543: EMPTY
30544: LIST
30545: LIST
30546: PPUSH
30547: CALL_OW 72
30551: ST_TO_ADDR
30552: GO 30706
30554: LD_INT 3
30556: DOUBLE
30557: EQUAL
30558: IFTRUE 30562
30560: GO 30624
30562: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30563: LD_ADDR_VAR 0 12
30567: PUSH
30568: LD_VAR 0 18
30572: PPUSH
30573: LD_INT 22
30575: PUSH
30576: LD_VAR 0 16
30580: PUSH
30581: EMPTY
30582: LIST
30583: LIST
30584: PUSH
30585: LD_INT 2
30587: PUSH
30588: LD_INT 30
30590: PUSH
30591: LD_INT 2
30593: PUSH
30594: EMPTY
30595: LIST
30596: LIST
30597: PUSH
30598: LD_INT 30
30600: PUSH
30601: LD_INT 3
30603: PUSH
30604: EMPTY
30605: LIST
30606: LIST
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: LIST
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: PPUSH
30617: CALL_OW 72
30621: ST_TO_ADDR
30622: GO 30706
30624: LD_INT 4
30626: DOUBLE
30627: EQUAL
30628: IFTRUE 30632
30630: GO 30705
30632: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30633: LD_ADDR_VAR 0 12
30637: PUSH
30638: LD_VAR 0 18
30642: PPUSH
30643: LD_INT 22
30645: PUSH
30646: LD_VAR 0 16
30650: PUSH
30651: EMPTY
30652: LIST
30653: LIST
30654: PUSH
30655: LD_INT 2
30657: PUSH
30658: LD_INT 30
30660: PUSH
30661: LD_INT 6
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: PUSH
30668: LD_INT 30
30670: PUSH
30671: LD_INT 7
30673: PUSH
30674: EMPTY
30675: LIST
30676: LIST
30677: PUSH
30678: LD_INT 30
30680: PUSH
30681: LD_INT 8
30683: PUSH
30684: EMPTY
30685: LIST
30686: LIST
30687: PUSH
30688: EMPTY
30689: LIST
30690: LIST
30691: LIST
30692: LIST
30693: PUSH
30694: EMPTY
30695: LIST
30696: LIST
30697: PPUSH
30698: CALL_OW 72
30702: ST_TO_ADDR
30703: GO 30706
30705: POP
// if i = 1 then
30706: LD_VAR 0 8
30710: PUSH
30711: LD_INT 1
30713: EQUAL
30714: IFFALSE 30825
// begin tmp := [ ] ;
30716: LD_ADDR_VAR 0 19
30720: PUSH
30721: EMPTY
30722: ST_TO_ADDR
// for j in f do
30723: LD_ADDR_VAR 0 9
30727: PUSH
30728: LD_VAR 0 12
30732: PUSH
30733: FOR_IN
30734: IFFALSE 30807
// if GetBType ( j ) = b_bunker then
30736: LD_VAR 0 9
30740: PPUSH
30741: CALL_OW 266
30745: PUSH
30746: LD_INT 32
30748: EQUAL
30749: IFFALSE 30776
// tmp := Insert ( tmp , 1 , j ) else
30751: LD_ADDR_VAR 0 19
30755: PUSH
30756: LD_VAR 0 19
30760: PPUSH
30761: LD_INT 1
30763: PPUSH
30764: LD_VAR 0 9
30768: PPUSH
30769: CALL_OW 2
30773: ST_TO_ADDR
30774: GO 30805
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30776: LD_ADDR_VAR 0 19
30780: PUSH
30781: LD_VAR 0 19
30785: PPUSH
30786: LD_VAR 0 19
30790: PUSH
30791: LD_INT 1
30793: PLUS
30794: PPUSH
30795: LD_VAR 0 9
30799: PPUSH
30800: CALL_OW 2
30804: ST_TO_ADDR
30805: GO 30733
30807: POP
30808: POP
// if tmp then
30809: LD_VAR 0 19
30813: IFFALSE 30825
// f := tmp ;
30815: LD_ADDR_VAR 0 12
30819: PUSH
30820: LD_VAR 0 19
30824: ST_TO_ADDR
// end ; x := personel [ i ] ;
30825: LD_ADDR_VAR 0 13
30829: PUSH
30830: LD_VAR 0 6
30834: PUSH
30835: LD_VAR 0 8
30839: ARRAY
30840: ST_TO_ADDR
// if x = - 1 then
30841: LD_VAR 0 13
30845: PUSH
30846: LD_INT 1
30848: NEG
30849: EQUAL
30850: IFFALSE 31059
// begin for j in f do
30852: LD_ADDR_VAR 0 9
30856: PUSH
30857: LD_VAR 0 12
30861: PUSH
30862: FOR_IN
30863: IFFALSE 31055
// repeat InitHc ;
30865: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30869: LD_VAR 0 9
30873: PPUSH
30874: CALL_OW 266
30878: PUSH
30879: LD_INT 5
30881: EQUAL
30882: IFFALSE 30952
// begin if UnitsInside ( j ) < 3 then
30884: LD_VAR 0 9
30888: PPUSH
30889: CALL_OW 313
30893: PUSH
30894: LD_INT 3
30896: LESS
30897: IFFALSE 30933
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30899: LD_INT 0
30901: PPUSH
30902: LD_INT 5
30904: PUSH
30905: LD_INT 8
30907: PUSH
30908: LD_INT 9
30910: PUSH
30911: EMPTY
30912: LIST
30913: LIST
30914: LIST
30915: PUSH
30916: LD_VAR 0 17
30920: ARRAY
30921: PPUSH
30922: LD_VAR 0 4
30926: PPUSH
30927: CALL_OW 380
30931: GO 30950
// PrepareHuman ( false , i , skill ) ;
30933: LD_INT 0
30935: PPUSH
30936: LD_VAR 0 8
30940: PPUSH
30941: LD_VAR 0 4
30945: PPUSH
30946: CALL_OW 380
// end else
30950: GO 30969
// PrepareHuman ( false , i , skill ) ;
30952: LD_INT 0
30954: PPUSH
30955: LD_VAR 0 8
30959: PPUSH
30960: LD_VAR 0 4
30964: PPUSH
30965: CALL_OW 380
// un := CreateHuman ;
30969: LD_ADDR_VAR 0 14
30973: PUSH
30974: CALL_OW 44
30978: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30979: LD_ADDR_VAR 0 7
30983: PUSH
30984: LD_VAR 0 7
30988: PPUSH
30989: LD_INT 1
30991: PPUSH
30992: LD_VAR 0 14
30996: PPUSH
30997: CALL_OW 2
31001: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31002: LD_VAR 0 14
31006: PPUSH
31007: LD_VAR 0 9
31011: PPUSH
31012: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31016: LD_VAR 0 9
31020: PPUSH
31021: CALL_OW 313
31025: PUSH
31026: LD_INT 6
31028: EQUAL
31029: PUSH
31030: LD_VAR 0 9
31034: PPUSH
31035: CALL_OW 266
31039: PUSH
31040: LD_INT 32
31042: PUSH
31043: LD_INT 31
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: IN
31050: OR
31051: IFFALSE 30865
31053: GO 30862
31055: POP
31056: POP
// end else
31057: GO 31439
// for j = 1 to x do
31059: LD_ADDR_VAR 0 9
31063: PUSH
31064: DOUBLE
31065: LD_INT 1
31067: DEC
31068: ST_TO_ADDR
31069: LD_VAR 0 13
31073: PUSH
31074: FOR_TO
31075: IFFALSE 31437
// begin InitHc ;
31077: CALL_OW 19
// if not f then
31081: LD_VAR 0 12
31085: NOT
31086: IFFALSE 31175
// begin PrepareHuman ( false , i , skill ) ;
31088: LD_INT 0
31090: PPUSH
31091: LD_VAR 0 8
31095: PPUSH
31096: LD_VAR 0 4
31100: PPUSH
31101: CALL_OW 380
// un := CreateHuman ;
31105: LD_ADDR_VAR 0 14
31109: PUSH
31110: CALL_OW 44
31114: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31115: LD_ADDR_VAR 0 7
31119: PUSH
31120: LD_VAR 0 7
31124: PPUSH
31125: LD_INT 1
31127: PPUSH
31128: LD_VAR 0 14
31132: PPUSH
31133: CALL_OW 2
31137: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31138: LD_VAR 0 14
31142: PPUSH
31143: LD_VAR 0 1
31147: PPUSH
31148: CALL_OW 250
31152: PPUSH
31153: LD_VAR 0 1
31157: PPUSH
31158: CALL_OW 251
31162: PPUSH
31163: LD_INT 10
31165: PPUSH
31166: LD_INT 0
31168: PPUSH
31169: CALL_OW 50
// continue ;
31173: GO 31074
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
31175: LD_VAR 0 12
31179: PUSH
31180: LD_INT 1
31182: ARRAY
31183: PPUSH
31184: CALL_OW 313
31188: PUSH
31189: LD_VAR 0 12
31193: PUSH
31194: LD_INT 1
31196: ARRAY
31197: PPUSH
31198: CALL_OW 266
31202: PUSH
31203: LD_INT 32
31205: PUSH
31206: LD_INT 31
31208: PUSH
31209: EMPTY
31210: LIST
31211: LIST
31212: IN
31213: AND
31214: PUSH
31215: LD_VAR 0 12
31219: PUSH
31220: LD_INT 1
31222: ARRAY
31223: PPUSH
31224: CALL_OW 313
31228: PUSH
31229: LD_INT 6
31231: EQUAL
31232: OR
31233: IFFALSE 31253
// f := Delete ( f , 1 ) ;
31235: LD_ADDR_VAR 0 12
31239: PUSH
31240: LD_VAR 0 12
31244: PPUSH
31245: LD_INT 1
31247: PPUSH
31248: CALL_OW 3
31252: ST_TO_ADDR
// if not f then
31253: LD_VAR 0 12
31257: NOT
31258: IFFALSE 31276
// begin x := x + 2 ;
31260: LD_ADDR_VAR 0 13
31264: PUSH
31265: LD_VAR 0 13
31269: PUSH
31270: LD_INT 2
31272: PLUS
31273: ST_TO_ADDR
// continue ;
31274: GO 31074
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31276: LD_VAR 0 12
31280: PUSH
31281: LD_INT 1
31283: ARRAY
31284: PPUSH
31285: CALL_OW 266
31289: PUSH
31290: LD_INT 5
31292: EQUAL
31293: IFFALSE 31367
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31295: LD_VAR 0 12
31299: PUSH
31300: LD_INT 1
31302: ARRAY
31303: PPUSH
31304: CALL_OW 313
31308: PUSH
31309: LD_INT 3
31311: LESS
31312: IFFALSE 31348
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31314: LD_INT 0
31316: PPUSH
31317: LD_INT 5
31319: PUSH
31320: LD_INT 8
31322: PUSH
31323: LD_INT 9
31325: PUSH
31326: EMPTY
31327: LIST
31328: LIST
31329: LIST
31330: PUSH
31331: LD_VAR 0 17
31335: ARRAY
31336: PPUSH
31337: LD_VAR 0 4
31341: PPUSH
31342: CALL_OW 380
31346: GO 31365
// PrepareHuman ( false , i , skill ) ;
31348: LD_INT 0
31350: PPUSH
31351: LD_VAR 0 8
31355: PPUSH
31356: LD_VAR 0 4
31360: PPUSH
31361: CALL_OW 380
// end else
31365: GO 31384
// PrepareHuman ( false , i , skill ) ;
31367: LD_INT 0
31369: PPUSH
31370: LD_VAR 0 8
31374: PPUSH
31375: LD_VAR 0 4
31379: PPUSH
31380: CALL_OW 380
// un := CreateHuman ;
31384: LD_ADDR_VAR 0 14
31388: PUSH
31389: CALL_OW 44
31393: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31394: LD_ADDR_VAR 0 7
31398: PUSH
31399: LD_VAR 0 7
31403: PPUSH
31404: LD_INT 1
31406: PPUSH
31407: LD_VAR 0 14
31411: PPUSH
31412: CALL_OW 2
31416: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31417: LD_VAR 0 14
31421: PPUSH
31422: LD_VAR 0 12
31426: PUSH
31427: LD_INT 1
31429: ARRAY
31430: PPUSH
31431: CALL_OW 52
// end ;
31435: GO 31074
31437: POP
31438: POP
// end ;
31439: GO 30376
31441: POP
31442: POP
// result := result ^ buildings ;
31443: LD_ADDR_VAR 0 7
31447: PUSH
31448: LD_VAR 0 7
31452: PUSH
31453: LD_VAR 0 18
31457: ADD
31458: ST_TO_ADDR
// end else
31459: GO 31602
// begin for i = 1 to personel do
31461: LD_ADDR_VAR 0 8
31465: PUSH
31466: DOUBLE
31467: LD_INT 1
31469: DEC
31470: ST_TO_ADDR
31471: LD_VAR 0 6
31475: PUSH
31476: FOR_TO
31477: IFFALSE 31600
// begin if i > 4 then
31479: LD_VAR 0 8
31483: PUSH
31484: LD_INT 4
31486: GREATER
31487: IFFALSE 31491
// break ;
31489: GO 31600
// x := personel [ i ] ;
31491: LD_ADDR_VAR 0 13
31495: PUSH
31496: LD_VAR 0 6
31500: PUSH
31501: LD_VAR 0 8
31505: ARRAY
31506: ST_TO_ADDR
// if x = - 1 then
31507: LD_VAR 0 13
31511: PUSH
31512: LD_INT 1
31514: NEG
31515: EQUAL
31516: IFFALSE 31520
// continue ;
31518: GO 31476
// PrepareHuman ( false , i , skill ) ;
31520: LD_INT 0
31522: PPUSH
31523: LD_VAR 0 8
31527: PPUSH
31528: LD_VAR 0 4
31532: PPUSH
31533: CALL_OW 380
// un := CreateHuman ;
31537: LD_ADDR_VAR 0 14
31541: PUSH
31542: CALL_OW 44
31546: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31547: LD_VAR 0 14
31551: PPUSH
31552: LD_VAR 0 1
31556: PPUSH
31557: CALL_OW 250
31561: PPUSH
31562: LD_VAR 0 1
31566: PPUSH
31567: CALL_OW 251
31571: PPUSH
31572: LD_INT 10
31574: PPUSH
31575: LD_INT 0
31577: PPUSH
31578: CALL_OW 50
// result := result ^ un ;
31582: LD_ADDR_VAR 0 7
31586: PUSH
31587: LD_VAR 0 7
31591: PUSH
31592: LD_VAR 0 14
31596: ADD
31597: ST_TO_ADDR
// end ;
31598: GO 31476
31600: POP
31601: POP
// end ; end ;
31602: LD_VAR 0 7
31606: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31607: LD_INT 0
31609: PPUSH
31610: PPUSH
31611: PPUSH
31612: PPUSH
31613: PPUSH
31614: PPUSH
31615: PPUSH
31616: PPUSH
31617: PPUSH
31618: PPUSH
31619: PPUSH
31620: PPUSH
31621: PPUSH
31622: PPUSH
31623: PPUSH
31624: PPUSH
// result := false ;
31625: LD_ADDR_VAR 0 3
31629: PUSH
31630: LD_INT 0
31632: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31633: LD_VAR 0 1
31637: NOT
31638: PUSH
31639: LD_VAR 0 1
31643: PPUSH
31644: CALL_OW 266
31648: PUSH
31649: LD_INT 32
31651: PUSH
31652: LD_INT 33
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: IN
31659: NOT
31660: OR
31661: IFFALSE 31665
// exit ;
31663: GO 32801
// nat := GetNation ( tower ) ;
31665: LD_ADDR_VAR 0 12
31669: PUSH
31670: LD_VAR 0 1
31674: PPUSH
31675: CALL_OW 248
31679: ST_TO_ADDR
// side := GetSide ( tower ) ;
31680: LD_ADDR_VAR 0 16
31684: PUSH
31685: LD_VAR 0 1
31689: PPUSH
31690: CALL_OW 255
31694: ST_TO_ADDR
// x := GetX ( tower ) ;
31695: LD_ADDR_VAR 0 10
31699: PUSH
31700: LD_VAR 0 1
31704: PPUSH
31705: CALL_OW 250
31709: ST_TO_ADDR
// y := GetY ( tower ) ;
31710: LD_ADDR_VAR 0 11
31714: PUSH
31715: LD_VAR 0 1
31719: PPUSH
31720: CALL_OW 251
31724: ST_TO_ADDR
// if not x or not y then
31725: LD_VAR 0 10
31729: NOT
31730: PUSH
31731: LD_VAR 0 11
31735: NOT
31736: OR
31737: IFFALSE 31741
// exit ;
31739: GO 32801
// weapon := 0 ;
31741: LD_ADDR_VAR 0 18
31745: PUSH
31746: LD_INT 0
31748: ST_TO_ADDR
// fac_list := [ ] ;
31749: LD_ADDR_VAR 0 17
31753: PUSH
31754: EMPTY
31755: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
31756: LD_ADDR_VAR 0 6
31760: PUSH
31761: LD_VAR 0 1
31765: PPUSH
31766: CALL_OW 274
31770: PPUSH
31771: LD_VAR 0 2
31775: PPUSH
31776: CALL 29379 0 2
31780: PPUSH
31781: LD_INT 30
31783: PUSH
31784: LD_INT 3
31786: PUSH
31787: EMPTY
31788: LIST
31789: LIST
31790: PPUSH
31791: CALL_OW 72
31795: ST_TO_ADDR
// if not factories then
31796: LD_VAR 0 6
31800: NOT
31801: IFFALSE 31805
// exit ;
31803: GO 32801
// for i in factories do
31805: LD_ADDR_VAR 0 8
31809: PUSH
31810: LD_VAR 0 6
31814: PUSH
31815: FOR_IN
31816: IFFALSE 31841
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31818: LD_ADDR_VAR 0 17
31822: PUSH
31823: LD_VAR 0 17
31827: PUSH
31828: LD_VAR 0 8
31832: PPUSH
31833: CALL_OW 478
31837: UNION
31838: ST_TO_ADDR
31839: GO 31815
31841: POP
31842: POP
// if not fac_list then
31843: LD_VAR 0 17
31847: NOT
31848: IFFALSE 31852
// exit ;
31850: GO 32801
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31852: LD_ADDR_VAR 0 5
31856: PUSH
31857: LD_INT 4
31859: PUSH
31860: LD_INT 5
31862: PUSH
31863: LD_INT 9
31865: PUSH
31866: LD_INT 10
31868: PUSH
31869: LD_INT 6
31871: PUSH
31872: LD_INT 7
31874: PUSH
31875: LD_INT 11
31877: PUSH
31878: EMPTY
31879: LIST
31880: LIST
31881: LIST
31882: LIST
31883: LIST
31884: LIST
31885: LIST
31886: PUSH
31887: LD_INT 27
31889: PUSH
31890: LD_INT 28
31892: PUSH
31893: LD_INT 26
31895: PUSH
31896: LD_INT 30
31898: PUSH
31899: EMPTY
31900: LIST
31901: LIST
31902: LIST
31903: LIST
31904: PUSH
31905: LD_INT 43
31907: PUSH
31908: LD_INT 44
31910: PUSH
31911: LD_INT 46
31913: PUSH
31914: LD_INT 45
31916: PUSH
31917: LD_INT 47
31919: PUSH
31920: LD_INT 49
31922: PUSH
31923: EMPTY
31924: LIST
31925: LIST
31926: LIST
31927: LIST
31928: LIST
31929: LIST
31930: PUSH
31931: EMPTY
31932: LIST
31933: LIST
31934: LIST
31935: PUSH
31936: LD_VAR 0 12
31940: ARRAY
31941: ST_TO_ADDR
// for i in list do
31942: LD_ADDR_VAR 0 8
31946: PUSH
31947: LD_VAR 0 5
31951: PUSH
31952: FOR_IN
31953: IFFALSE 31986
// if not i in fac_list then
31955: LD_VAR 0 8
31959: PUSH
31960: LD_VAR 0 17
31964: IN
31965: NOT
31966: IFFALSE 31984
// list := list diff i ;
31968: LD_ADDR_VAR 0 5
31972: PUSH
31973: LD_VAR 0 5
31977: PUSH
31978: LD_VAR 0 8
31982: DIFF
31983: ST_TO_ADDR
31984: GO 31952
31986: POP
31987: POP
// if not list then
31988: LD_VAR 0 5
31992: NOT
31993: IFFALSE 31997
// exit ;
31995: GO 32801
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31997: LD_VAR 0 12
32001: PUSH
32002: LD_INT 3
32004: EQUAL
32005: PUSH
32006: LD_INT 49
32008: PUSH
32009: LD_VAR 0 5
32013: IN
32014: AND
32015: PUSH
32016: LD_INT 31
32018: PPUSH
32019: LD_VAR 0 16
32023: PPUSH
32024: CALL_OW 321
32028: PUSH
32029: LD_INT 2
32031: EQUAL
32032: AND
32033: IFFALSE 32093
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32035: LD_INT 22
32037: PUSH
32038: LD_VAR 0 16
32042: PUSH
32043: EMPTY
32044: LIST
32045: LIST
32046: PUSH
32047: LD_INT 35
32049: PUSH
32050: LD_INT 49
32052: PUSH
32053: EMPTY
32054: LIST
32055: LIST
32056: PUSH
32057: LD_INT 91
32059: PUSH
32060: LD_VAR 0 1
32064: PUSH
32065: LD_INT 10
32067: PUSH
32068: EMPTY
32069: LIST
32070: LIST
32071: LIST
32072: PUSH
32073: EMPTY
32074: LIST
32075: LIST
32076: LIST
32077: PPUSH
32078: CALL_OW 69
32082: NOT
32083: IFFALSE 32093
// weapon := ru_time_lapser ;
32085: LD_ADDR_VAR 0 18
32089: PUSH
32090: LD_INT 49
32092: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32093: LD_VAR 0 12
32097: PUSH
32098: LD_INT 1
32100: PUSH
32101: LD_INT 2
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: IN
32108: PUSH
32109: LD_INT 11
32111: PUSH
32112: LD_VAR 0 5
32116: IN
32117: PUSH
32118: LD_INT 30
32120: PUSH
32121: LD_VAR 0 5
32125: IN
32126: OR
32127: AND
32128: PUSH
32129: LD_INT 6
32131: PPUSH
32132: LD_VAR 0 16
32136: PPUSH
32137: CALL_OW 321
32141: PUSH
32142: LD_INT 2
32144: EQUAL
32145: AND
32146: IFFALSE 32311
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
32148: LD_INT 22
32150: PUSH
32151: LD_VAR 0 16
32155: PUSH
32156: EMPTY
32157: LIST
32158: LIST
32159: PUSH
32160: LD_INT 2
32162: PUSH
32163: LD_INT 35
32165: PUSH
32166: LD_INT 11
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: PUSH
32173: LD_INT 35
32175: PUSH
32176: LD_INT 30
32178: PUSH
32179: EMPTY
32180: LIST
32181: LIST
32182: PUSH
32183: EMPTY
32184: LIST
32185: LIST
32186: LIST
32187: PUSH
32188: LD_INT 91
32190: PUSH
32191: LD_VAR 0 1
32195: PUSH
32196: LD_INT 18
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: LIST
32203: PUSH
32204: EMPTY
32205: LIST
32206: LIST
32207: LIST
32208: PPUSH
32209: CALL_OW 69
32213: NOT
32214: PUSH
32215: LD_INT 22
32217: PUSH
32218: LD_VAR 0 16
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: PUSH
32227: LD_INT 2
32229: PUSH
32230: LD_INT 30
32232: PUSH
32233: LD_INT 32
32235: PUSH
32236: EMPTY
32237: LIST
32238: LIST
32239: PUSH
32240: LD_INT 30
32242: PUSH
32243: LD_INT 33
32245: PUSH
32246: EMPTY
32247: LIST
32248: LIST
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: LIST
32254: PUSH
32255: LD_INT 91
32257: PUSH
32258: LD_VAR 0 1
32262: PUSH
32263: LD_INT 12
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: LIST
32270: PUSH
32271: EMPTY
32272: LIST
32273: LIST
32274: LIST
32275: PUSH
32276: EMPTY
32277: LIST
32278: PPUSH
32279: CALL_OW 69
32283: PUSH
32284: LD_INT 2
32286: GREATER
32287: AND
32288: IFFALSE 32311
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32290: LD_ADDR_VAR 0 18
32294: PUSH
32295: LD_INT 11
32297: PUSH
32298: LD_INT 30
32300: PUSH
32301: EMPTY
32302: LIST
32303: LIST
32304: PUSH
32305: LD_VAR 0 12
32309: ARRAY
32310: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32311: LD_VAR 0 18
32315: NOT
32316: PUSH
32317: LD_INT 40
32319: PPUSH
32320: LD_VAR 0 16
32324: PPUSH
32325: CALL_OW 321
32329: PUSH
32330: LD_INT 2
32332: EQUAL
32333: AND
32334: PUSH
32335: LD_INT 7
32337: PUSH
32338: LD_VAR 0 5
32342: IN
32343: PUSH
32344: LD_INT 28
32346: PUSH
32347: LD_VAR 0 5
32351: IN
32352: OR
32353: PUSH
32354: LD_INT 45
32356: PUSH
32357: LD_VAR 0 5
32361: IN
32362: OR
32363: AND
32364: IFFALSE 32618
// begin hex := GetHexInfo ( x , y ) ;
32366: LD_ADDR_VAR 0 4
32370: PUSH
32371: LD_VAR 0 10
32375: PPUSH
32376: LD_VAR 0 11
32380: PPUSH
32381: CALL_OW 546
32385: ST_TO_ADDR
// if hex [ 1 ] then
32386: LD_VAR 0 4
32390: PUSH
32391: LD_INT 1
32393: ARRAY
32394: IFFALSE 32398
// exit ;
32396: GO 32801
// height := hex [ 2 ] ;
32398: LD_ADDR_VAR 0 15
32402: PUSH
32403: LD_VAR 0 4
32407: PUSH
32408: LD_INT 2
32410: ARRAY
32411: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32412: LD_ADDR_VAR 0 14
32416: PUSH
32417: LD_INT 0
32419: PUSH
32420: LD_INT 2
32422: PUSH
32423: LD_INT 3
32425: PUSH
32426: LD_INT 5
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: LIST
32433: LIST
32434: ST_TO_ADDR
// for i in tmp do
32435: LD_ADDR_VAR 0 8
32439: PUSH
32440: LD_VAR 0 14
32444: PUSH
32445: FOR_IN
32446: IFFALSE 32616
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32448: LD_ADDR_VAR 0 9
32452: PUSH
32453: LD_VAR 0 10
32457: PPUSH
32458: LD_VAR 0 8
32462: PPUSH
32463: LD_INT 5
32465: PPUSH
32466: CALL_OW 272
32470: PUSH
32471: LD_VAR 0 11
32475: PPUSH
32476: LD_VAR 0 8
32480: PPUSH
32481: LD_INT 5
32483: PPUSH
32484: CALL_OW 273
32488: PUSH
32489: EMPTY
32490: LIST
32491: LIST
32492: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32493: LD_VAR 0 9
32497: PUSH
32498: LD_INT 1
32500: ARRAY
32501: PPUSH
32502: LD_VAR 0 9
32506: PUSH
32507: LD_INT 2
32509: ARRAY
32510: PPUSH
32511: CALL_OW 488
32515: IFFALSE 32614
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32517: LD_ADDR_VAR 0 4
32521: PUSH
32522: LD_VAR 0 9
32526: PUSH
32527: LD_INT 1
32529: ARRAY
32530: PPUSH
32531: LD_VAR 0 9
32535: PUSH
32536: LD_INT 2
32538: ARRAY
32539: PPUSH
32540: CALL_OW 546
32544: ST_TO_ADDR
// if hex [ 1 ] then
32545: LD_VAR 0 4
32549: PUSH
32550: LD_INT 1
32552: ARRAY
32553: IFFALSE 32557
// continue ;
32555: GO 32445
// h := hex [ 2 ] ;
32557: LD_ADDR_VAR 0 13
32561: PUSH
32562: LD_VAR 0 4
32566: PUSH
32567: LD_INT 2
32569: ARRAY
32570: ST_TO_ADDR
// if h + 7 < height then
32571: LD_VAR 0 13
32575: PUSH
32576: LD_INT 7
32578: PLUS
32579: PUSH
32580: LD_VAR 0 15
32584: LESS
32585: IFFALSE 32614
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32587: LD_ADDR_VAR 0 18
32591: PUSH
32592: LD_INT 7
32594: PUSH
32595: LD_INT 28
32597: PUSH
32598: LD_INT 45
32600: PUSH
32601: EMPTY
32602: LIST
32603: LIST
32604: LIST
32605: PUSH
32606: LD_VAR 0 12
32610: ARRAY
32611: ST_TO_ADDR
// break ;
32612: GO 32616
// end ; end ; end ;
32614: GO 32445
32616: POP
32617: POP
// end ; if not weapon then
32618: LD_VAR 0 18
32622: NOT
32623: IFFALSE 32683
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32625: LD_ADDR_VAR 0 5
32629: PUSH
32630: LD_VAR 0 5
32634: PUSH
32635: LD_INT 11
32637: PUSH
32638: LD_INT 30
32640: PUSH
32641: LD_INT 49
32643: PUSH
32644: EMPTY
32645: LIST
32646: LIST
32647: LIST
32648: DIFF
32649: ST_TO_ADDR
// if not list then
32650: LD_VAR 0 5
32654: NOT
32655: IFFALSE 32659
// exit ;
32657: GO 32801
// weapon := list [ rand ( 1 , list ) ] ;
32659: LD_ADDR_VAR 0 18
32663: PUSH
32664: LD_VAR 0 5
32668: PUSH
32669: LD_INT 1
32671: PPUSH
32672: LD_VAR 0 5
32676: PPUSH
32677: CALL_OW 12
32681: ARRAY
32682: ST_TO_ADDR
// end ; if weapon then
32683: LD_VAR 0 18
32687: IFFALSE 32801
// begin tmp := CostOfWeapon ( weapon ) ;
32689: LD_ADDR_VAR 0 14
32693: PUSH
32694: LD_VAR 0 18
32698: PPUSH
32699: CALL_OW 451
32703: ST_TO_ADDR
// j := GetBase ( tower ) ;
32704: LD_ADDR_VAR 0 9
32708: PUSH
32709: LD_VAR 0 1
32713: PPUSH
32714: CALL_OW 274
32718: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32719: LD_VAR 0 9
32723: PPUSH
32724: LD_INT 1
32726: PPUSH
32727: CALL_OW 275
32731: PUSH
32732: LD_VAR 0 14
32736: PUSH
32737: LD_INT 1
32739: ARRAY
32740: GREATEREQUAL
32741: PUSH
32742: LD_VAR 0 9
32746: PPUSH
32747: LD_INT 2
32749: PPUSH
32750: CALL_OW 275
32754: PUSH
32755: LD_VAR 0 14
32759: PUSH
32760: LD_INT 2
32762: ARRAY
32763: GREATEREQUAL
32764: AND
32765: PUSH
32766: LD_VAR 0 9
32770: PPUSH
32771: LD_INT 3
32773: PPUSH
32774: CALL_OW 275
32778: PUSH
32779: LD_VAR 0 14
32783: PUSH
32784: LD_INT 3
32786: ARRAY
32787: GREATEREQUAL
32788: AND
32789: IFFALSE 32801
// result := weapon ;
32791: LD_ADDR_VAR 0 3
32795: PUSH
32796: LD_VAR 0 18
32800: ST_TO_ADDR
// end ; end ;
32801: LD_VAR 0 3
32805: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32806: LD_INT 0
32808: PPUSH
32809: PPUSH
// result := true ;
32810: LD_ADDR_VAR 0 3
32814: PUSH
32815: LD_INT 1
32817: ST_TO_ADDR
// if array1 = array2 then
32818: LD_VAR 0 1
32822: PUSH
32823: LD_VAR 0 2
32827: EQUAL
32828: IFFALSE 32888
// begin for i = 1 to array1 do
32830: LD_ADDR_VAR 0 4
32834: PUSH
32835: DOUBLE
32836: LD_INT 1
32838: DEC
32839: ST_TO_ADDR
32840: LD_VAR 0 1
32844: PUSH
32845: FOR_TO
32846: IFFALSE 32884
// if array1 [ i ] <> array2 [ i ] then
32848: LD_VAR 0 1
32852: PUSH
32853: LD_VAR 0 4
32857: ARRAY
32858: PUSH
32859: LD_VAR 0 2
32863: PUSH
32864: LD_VAR 0 4
32868: ARRAY
32869: NONEQUAL
32870: IFFALSE 32882
// begin result := false ;
32872: LD_ADDR_VAR 0 3
32876: PUSH
32877: LD_INT 0
32879: ST_TO_ADDR
// break ;
32880: GO 32884
// end ;
32882: GO 32845
32884: POP
32885: POP
// end else
32886: GO 32896
// result := false ;
32888: LD_ADDR_VAR 0 3
32892: PUSH
32893: LD_INT 0
32895: ST_TO_ADDR
// end ;
32896: LD_VAR 0 3
32900: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32901: LD_INT 0
32903: PPUSH
32904: PPUSH
32905: PPUSH
// pom := GetBase ( fac ) ;
32906: LD_ADDR_VAR 0 5
32910: PUSH
32911: LD_VAR 0 1
32915: PPUSH
32916: CALL_OW 274
32920: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32921: LD_ADDR_VAR 0 4
32925: PUSH
32926: LD_VAR 0 2
32930: PUSH
32931: LD_INT 1
32933: ARRAY
32934: PPUSH
32935: LD_VAR 0 2
32939: PUSH
32940: LD_INT 2
32942: ARRAY
32943: PPUSH
32944: LD_VAR 0 2
32948: PUSH
32949: LD_INT 3
32951: ARRAY
32952: PPUSH
32953: LD_VAR 0 2
32957: PUSH
32958: LD_INT 4
32960: ARRAY
32961: PPUSH
32962: CALL_OW 449
32966: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32967: LD_ADDR_VAR 0 3
32971: PUSH
32972: LD_VAR 0 5
32976: PPUSH
32977: LD_INT 1
32979: PPUSH
32980: CALL_OW 275
32984: PUSH
32985: LD_VAR 0 4
32989: PUSH
32990: LD_INT 1
32992: ARRAY
32993: GREATEREQUAL
32994: PUSH
32995: LD_VAR 0 5
32999: PPUSH
33000: LD_INT 2
33002: PPUSH
33003: CALL_OW 275
33007: PUSH
33008: LD_VAR 0 4
33012: PUSH
33013: LD_INT 2
33015: ARRAY
33016: GREATEREQUAL
33017: AND
33018: PUSH
33019: LD_VAR 0 5
33023: PPUSH
33024: LD_INT 3
33026: PPUSH
33027: CALL_OW 275
33031: PUSH
33032: LD_VAR 0 4
33036: PUSH
33037: LD_INT 3
33039: ARRAY
33040: GREATEREQUAL
33041: AND
33042: ST_TO_ADDR
// end ;
33043: LD_VAR 0 3
33047: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
33048: LD_INT 0
33050: PPUSH
33051: PPUSH
33052: PPUSH
33053: PPUSH
// pom := GetBase ( building ) ;
33054: LD_ADDR_VAR 0 3
33058: PUSH
33059: LD_VAR 0 1
33063: PPUSH
33064: CALL_OW 274
33068: ST_TO_ADDR
// if not pom then
33069: LD_VAR 0 3
33073: NOT
33074: IFFALSE 33078
// exit ;
33076: GO 33248
// btype := GetBType ( building ) ;
33078: LD_ADDR_VAR 0 5
33082: PUSH
33083: LD_VAR 0 1
33087: PPUSH
33088: CALL_OW 266
33092: ST_TO_ADDR
// if btype = b_armoury then
33093: LD_VAR 0 5
33097: PUSH
33098: LD_INT 4
33100: EQUAL
33101: IFFALSE 33111
// btype := b_barracks ;
33103: LD_ADDR_VAR 0 5
33107: PUSH
33108: LD_INT 5
33110: ST_TO_ADDR
// if btype = b_depot then
33111: LD_VAR 0 5
33115: PUSH
33116: LD_INT 0
33118: EQUAL
33119: IFFALSE 33129
// btype := b_warehouse ;
33121: LD_ADDR_VAR 0 5
33125: PUSH
33126: LD_INT 1
33128: ST_TO_ADDR
// if btype = b_workshop then
33129: LD_VAR 0 5
33133: PUSH
33134: LD_INT 2
33136: EQUAL
33137: IFFALSE 33147
// btype := b_factory ;
33139: LD_ADDR_VAR 0 5
33143: PUSH
33144: LD_INT 3
33146: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33147: LD_ADDR_VAR 0 4
33151: PUSH
33152: LD_VAR 0 5
33156: PPUSH
33157: LD_VAR 0 1
33161: PPUSH
33162: CALL_OW 248
33166: PPUSH
33167: CALL_OW 450
33171: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33172: LD_ADDR_VAR 0 2
33176: PUSH
33177: LD_VAR 0 3
33181: PPUSH
33182: LD_INT 1
33184: PPUSH
33185: CALL_OW 275
33189: PUSH
33190: LD_VAR 0 4
33194: PUSH
33195: LD_INT 1
33197: ARRAY
33198: GREATEREQUAL
33199: PUSH
33200: LD_VAR 0 3
33204: PPUSH
33205: LD_INT 2
33207: PPUSH
33208: CALL_OW 275
33212: PUSH
33213: LD_VAR 0 4
33217: PUSH
33218: LD_INT 2
33220: ARRAY
33221: GREATEREQUAL
33222: AND
33223: PUSH
33224: LD_VAR 0 3
33228: PPUSH
33229: LD_INT 3
33231: PPUSH
33232: CALL_OW 275
33236: PUSH
33237: LD_VAR 0 4
33241: PUSH
33242: LD_INT 3
33244: ARRAY
33245: GREATEREQUAL
33246: AND
33247: ST_TO_ADDR
// end ;
33248: LD_VAR 0 2
33252: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33253: LD_INT 0
33255: PPUSH
33256: PPUSH
33257: PPUSH
// pom := GetBase ( building ) ;
33258: LD_ADDR_VAR 0 4
33262: PUSH
33263: LD_VAR 0 1
33267: PPUSH
33268: CALL_OW 274
33272: ST_TO_ADDR
// if not pom then
33273: LD_VAR 0 4
33277: NOT
33278: IFFALSE 33282
// exit ;
33280: GO 33383
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33282: LD_ADDR_VAR 0 5
33286: PUSH
33287: LD_VAR 0 2
33291: PPUSH
33292: LD_VAR 0 1
33296: PPUSH
33297: CALL_OW 248
33301: PPUSH
33302: CALL_OW 450
33306: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33307: LD_ADDR_VAR 0 3
33311: PUSH
33312: LD_VAR 0 4
33316: PPUSH
33317: LD_INT 1
33319: PPUSH
33320: CALL_OW 275
33324: PUSH
33325: LD_VAR 0 5
33329: PUSH
33330: LD_INT 1
33332: ARRAY
33333: GREATEREQUAL
33334: PUSH
33335: LD_VAR 0 4
33339: PPUSH
33340: LD_INT 2
33342: PPUSH
33343: CALL_OW 275
33347: PUSH
33348: LD_VAR 0 5
33352: PUSH
33353: LD_INT 2
33355: ARRAY
33356: GREATEREQUAL
33357: AND
33358: PUSH
33359: LD_VAR 0 4
33363: PPUSH
33364: LD_INT 3
33366: PPUSH
33367: CALL_OW 275
33371: PUSH
33372: LD_VAR 0 5
33376: PUSH
33377: LD_INT 3
33379: ARRAY
33380: GREATEREQUAL
33381: AND
33382: ST_TO_ADDR
// end ;
33383: LD_VAR 0 3
33387: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
33388: LD_INT 0
33390: PPUSH
33391: PPUSH
33392: PPUSH
33393: PPUSH
33394: PPUSH
33395: PPUSH
33396: PPUSH
33397: PPUSH
33398: PPUSH
33399: PPUSH
// result := false ;
33400: LD_ADDR_VAR 0 6
33404: PUSH
33405: LD_INT 0
33407: ST_TO_ADDR
// if not base or not btype or not x or not y then
33408: LD_VAR 0 1
33412: NOT
33413: PUSH
33414: LD_VAR 0 2
33418: NOT
33419: OR
33420: PUSH
33421: LD_VAR 0 3
33425: NOT
33426: OR
33427: PUSH
33428: LD_VAR 0 4
33432: NOT
33433: OR
33434: IFFALSE 33438
// exit ;
33436: GO 34029
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
33438: LD_ADDR_VAR 0 12
33442: PUSH
33443: LD_VAR 0 2
33447: PPUSH
33448: LD_VAR 0 3
33452: PPUSH
33453: LD_VAR 0 4
33457: PPUSH
33458: LD_VAR 0 5
33462: PPUSH
33463: LD_VAR 0 1
33467: PUSH
33468: LD_INT 1
33470: ARRAY
33471: PPUSH
33472: CALL_OW 248
33476: PPUSH
33477: LD_INT 0
33479: PPUSH
33480: CALL 34866 0 6
33484: ST_TO_ADDR
// if not hexes then
33485: LD_VAR 0 12
33489: NOT
33490: IFFALSE 33494
// exit ;
33492: GO 34029
// for i = 1 to hexes do
33494: LD_ADDR_VAR 0 7
33498: PUSH
33499: DOUBLE
33500: LD_INT 1
33502: DEC
33503: ST_TO_ADDR
33504: LD_VAR 0 12
33508: PUSH
33509: FOR_TO
33510: IFFALSE 34027
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33512: LD_ADDR_VAR 0 11
33516: PUSH
33517: LD_VAR 0 12
33521: PUSH
33522: LD_VAR 0 7
33526: ARRAY
33527: PUSH
33528: LD_INT 1
33530: ARRAY
33531: PPUSH
33532: LD_VAR 0 12
33536: PUSH
33537: LD_VAR 0 7
33541: ARRAY
33542: PUSH
33543: LD_INT 2
33545: ARRAY
33546: PPUSH
33547: CALL_OW 428
33551: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33552: LD_VAR 0 12
33556: PUSH
33557: LD_VAR 0 7
33561: ARRAY
33562: PUSH
33563: LD_INT 1
33565: ARRAY
33566: PPUSH
33567: LD_VAR 0 12
33571: PUSH
33572: LD_VAR 0 7
33576: ARRAY
33577: PUSH
33578: LD_INT 2
33580: ARRAY
33581: PPUSH
33582: CALL_OW 351
33586: PUSH
33587: LD_VAR 0 12
33591: PUSH
33592: LD_VAR 0 7
33596: ARRAY
33597: PUSH
33598: LD_INT 1
33600: ARRAY
33601: PPUSH
33602: LD_VAR 0 12
33606: PUSH
33607: LD_VAR 0 7
33611: ARRAY
33612: PUSH
33613: LD_INT 2
33615: ARRAY
33616: PPUSH
33617: CALL_OW 488
33621: NOT
33622: OR
33623: PUSH
33624: LD_VAR 0 11
33628: PPUSH
33629: CALL_OW 247
33633: PUSH
33634: LD_INT 3
33636: EQUAL
33637: OR
33638: IFFALSE 33644
// exit ;
33640: POP
33641: POP
33642: GO 34029
// if not tmp then
33644: LD_VAR 0 11
33648: NOT
33649: IFFALSE 33653
// continue ;
33651: GO 33509
// result := true ;
33653: LD_ADDR_VAR 0 6
33657: PUSH
33658: LD_INT 1
33660: ST_TO_ADDR
// dep := FilterAllUnits ( [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33661: LD_ADDR_VAR 0 15
33665: PUSH
33666: LD_INT 22
33668: PUSH
33669: LD_VAR 0 11
33673: PPUSH
33674: CALL_OW 255
33678: PUSH
33679: EMPTY
33680: LIST
33681: LIST
33682: PUSH
33683: LD_INT 2
33685: PUSH
33686: LD_INT 30
33688: PUSH
33689: LD_INT 0
33691: PUSH
33692: EMPTY
33693: LIST
33694: LIST
33695: PUSH
33696: LD_INT 30
33698: PUSH
33699: LD_INT 1
33701: PUSH
33702: EMPTY
33703: LIST
33704: LIST
33705: PUSH
33706: EMPTY
33707: LIST
33708: LIST
33709: LIST
33710: PUSH
33711: EMPTY
33712: LIST
33713: LIST
33714: PPUSH
33715: CALL_OW 69
33719: ST_TO_ADDR
// if dep then
33720: LD_VAR 0 15
33724: IFFALSE 33860
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33726: LD_ADDR_VAR 0 14
33730: PUSH
33731: LD_VAR 0 15
33735: PUSH
33736: LD_INT 1
33738: ARRAY
33739: PPUSH
33740: CALL_OW 250
33744: PPUSH
33745: LD_VAR 0 15
33749: PUSH
33750: LD_INT 1
33752: ARRAY
33753: PPUSH
33754: CALL_OW 254
33758: PPUSH
33759: LD_INT 5
33761: PPUSH
33762: CALL_OW 272
33766: PUSH
33767: LD_VAR 0 15
33771: PUSH
33772: LD_INT 1
33774: ARRAY
33775: PPUSH
33776: CALL_OW 251
33780: PPUSH
33781: LD_VAR 0 15
33785: PUSH
33786: LD_INT 1
33788: ARRAY
33789: PPUSH
33790: CALL_OW 254
33794: PPUSH
33795: LD_INT 5
33797: PPUSH
33798: CALL_OW 273
33802: PUSH
33803: EMPTY
33804: LIST
33805: LIST
33806: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33807: LD_VAR 0 14
33811: PUSH
33812: LD_INT 1
33814: ARRAY
33815: PPUSH
33816: LD_VAR 0 14
33820: PUSH
33821: LD_INT 2
33823: ARRAY
33824: PPUSH
33825: CALL_OW 488
33829: IFFALSE 33860
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33831: LD_VAR 0 11
33835: PPUSH
33836: LD_VAR 0 14
33840: PUSH
33841: LD_INT 1
33843: ARRAY
33844: PPUSH
33845: LD_VAR 0 14
33849: PUSH
33850: LD_INT 2
33852: ARRAY
33853: PPUSH
33854: CALL_OW 111
// continue ;
33858: GO 33509
// end ; end ; r := GetDir ( tmp ) ;
33860: LD_ADDR_VAR 0 13
33864: PUSH
33865: LD_VAR 0 11
33869: PPUSH
33870: CALL_OW 254
33874: ST_TO_ADDR
// if r = 5 then
33875: LD_VAR 0 13
33879: PUSH
33880: LD_INT 5
33882: EQUAL
33883: IFFALSE 33893
// r := 0 ;
33885: LD_ADDR_VAR 0 13
33889: PUSH
33890: LD_INT 0
33892: ST_TO_ADDR
// for j = r to 5 do
33893: LD_ADDR_VAR 0 8
33897: PUSH
33898: DOUBLE
33899: LD_VAR 0 13
33903: DEC
33904: ST_TO_ADDR
33905: LD_INT 5
33907: PUSH
33908: FOR_TO
33909: IFFALSE 34023
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33911: LD_ADDR_VAR 0 9
33915: PUSH
33916: LD_VAR 0 11
33920: PPUSH
33921: CALL_OW 250
33925: PPUSH
33926: LD_VAR 0 8
33930: PPUSH
33931: LD_INT 2
33933: PPUSH
33934: CALL_OW 272
33938: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33939: LD_ADDR_VAR 0 10
33943: PUSH
33944: LD_VAR 0 11
33948: PPUSH
33949: CALL_OW 251
33953: PPUSH
33954: LD_VAR 0 8
33958: PPUSH
33959: LD_INT 2
33961: PPUSH
33962: CALL_OW 273
33966: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33967: LD_VAR 0 9
33971: PPUSH
33972: LD_VAR 0 10
33976: PPUSH
33977: CALL_OW 488
33981: PUSH
33982: LD_VAR 0 9
33986: PPUSH
33987: LD_VAR 0 10
33991: PPUSH
33992: CALL_OW 428
33996: NOT
33997: AND
33998: IFFALSE 34021
// begin ComMoveXY ( tmp , _x , _y ) ;
34000: LD_VAR 0 11
34004: PPUSH
34005: LD_VAR 0 9
34009: PPUSH
34010: LD_VAR 0 10
34014: PPUSH
34015: CALL_OW 111
// break ;
34019: GO 34023
// end ; end ;
34021: GO 33908
34023: POP
34024: POP
// end ;
34025: GO 33509
34027: POP
34028: POP
// end ;
34029: LD_VAR 0 6
34033: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
34034: LD_INT 0
34036: PPUSH
34037: PPUSH
34038: PPUSH
34039: PPUSH
34040: PPUSH
34041: PPUSH
34042: PPUSH
34043: PPUSH
34044: PPUSH
34045: PPUSH
// result := false ;
34046: LD_ADDR_VAR 0 6
34050: PUSH
34051: LD_INT 0
34053: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34054: LD_VAR 0 1
34058: NOT
34059: PUSH
34060: LD_VAR 0 1
34064: PPUSH
34065: CALL_OW 266
34069: PUSH
34070: LD_INT 0
34072: PUSH
34073: LD_INT 1
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: IN
34080: NOT
34081: OR
34082: PUSH
34083: LD_VAR 0 2
34087: NOT
34088: OR
34089: PUSH
34090: LD_VAR 0 5
34094: PUSH
34095: LD_INT 0
34097: PUSH
34098: LD_INT 1
34100: PUSH
34101: LD_INT 2
34103: PUSH
34104: LD_INT 3
34106: PUSH
34107: LD_INT 4
34109: PUSH
34110: LD_INT 5
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: LIST
34117: LIST
34118: LIST
34119: LIST
34120: IN
34121: NOT
34122: OR
34123: PUSH
34124: LD_VAR 0 3
34128: PPUSH
34129: LD_VAR 0 4
34133: PPUSH
34134: CALL_OW 488
34138: NOT
34139: OR
34140: IFFALSE 34144
// exit ;
34142: GO 34861
// pom := GetBase ( depot ) ;
34144: LD_ADDR_VAR 0 10
34148: PUSH
34149: LD_VAR 0 1
34153: PPUSH
34154: CALL_OW 274
34158: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
34159: LD_ADDR_VAR 0 11
34163: PUSH
34164: LD_VAR 0 2
34168: PPUSH
34169: LD_VAR 0 1
34173: PPUSH
34174: CALL_OW 248
34178: PPUSH
34179: CALL_OW 450
34183: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
34184: LD_VAR 0 10
34188: PPUSH
34189: LD_INT 1
34191: PPUSH
34192: CALL_OW 275
34196: PUSH
34197: LD_VAR 0 11
34201: PUSH
34202: LD_INT 1
34204: ARRAY
34205: GREATEREQUAL
34206: PUSH
34207: LD_VAR 0 10
34211: PPUSH
34212: LD_INT 2
34214: PPUSH
34215: CALL_OW 275
34219: PUSH
34220: LD_VAR 0 11
34224: PUSH
34225: LD_INT 2
34227: ARRAY
34228: GREATEREQUAL
34229: AND
34230: PUSH
34231: LD_VAR 0 10
34235: PPUSH
34236: LD_INT 3
34238: PPUSH
34239: CALL_OW 275
34243: PUSH
34244: LD_VAR 0 11
34248: PUSH
34249: LD_INT 3
34251: ARRAY
34252: GREATEREQUAL
34253: AND
34254: NOT
34255: IFFALSE 34259
// exit ;
34257: GO 34861
// if GetBType ( depot ) = b_depot then
34259: LD_VAR 0 1
34263: PPUSH
34264: CALL_OW 266
34268: PUSH
34269: LD_INT 0
34271: EQUAL
34272: IFFALSE 34284
// dist := 28 else
34274: LD_ADDR_VAR 0 14
34278: PUSH
34279: LD_INT 28
34281: ST_TO_ADDR
34282: GO 34292
// dist := 36 ;
34284: LD_ADDR_VAR 0 14
34288: PUSH
34289: LD_INT 36
34291: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
34292: LD_VAR 0 1
34296: PPUSH
34297: LD_VAR 0 3
34301: PPUSH
34302: LD_VAR 0 4
34306: PPUSH
34307: CALL_OW 297
34311: PUSH
34312: LD_VAR 0 14
34316: GREATER
34317: IFFALSE 34321
// exit ;
34319: GO 34861
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
34321: LD_ADDR_VAR 0 12
34325: PUSH
34326: LD_VAR 0 2
34330: PPUSH
34331: LD_VAR 0 3
34335: PPUSH
34336: LD_VAR 0 4
34340: PPUSH
34341: LD_VAR 0 5
34345: PPUSH
34346: LD_VAR 0 1
34350: PPUSH
34351: CALL_OW 248
34355: PPUSH
34356: LD_INT 0
34358: PPUSH
34359: CALL 34866 0 6
34363: ST_TO_ADDR
// if not hexes then
34364: LD_VAR 0 12
34368: NOT
34369: IFFALSE 34373
// exit ;
34371: GO 34861
// hex := GetHexInfo ( x , y ) ;
34373: LD_ADDR_VAR 0 15
34377: PUSH
34378: LD_VAR 0 3
34382: PPUSH
34383: LD_VAR 0 4
34387: PPUSH
34388: CALL_OW 546
34392: ST_TO_ADDR
// if hex [ 1 ] then
34393: LD_VAR 0 15
34397: PUSH
34398: LD_INT 1
34400: ARRAY
34401: IFFALSE 34405
// exit ;
34403: GO 34861
// height := hex [ 2 ] ;
34405: LD_ADDR_VAR 0 13
34409: PUSH
34410: LD_VAR 0 15
34414: PUSH
34415: LD_INT 2
34417: ARRAY
34418: ST_TO_ADDR
// for i = 1 to hexes do
34419: LD_ADDR_VAR 0 7
34423: PUSH
34424: DOUBLE
34425: LD_INT 1
34427: DEC
34428: ST_TO_ADDR
34429: LD_VAR 0 12
34433: PUSH
34434: FOR_TO
34435: IFFALSE 34765
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
34437: LD_VAR 0 12
34441: PUSH
34442: LD_VAR 0 7
34446: ARRAY
34447: PUSH
34448: LD_INT 1
34450: ARRAY
34451: PPUSH
34452: LD_VAR 0 12
34456: PUSH
34457: LD_VAR 0 7
34461: ARRAY
34462: PUSH
34463: LD_INT 2
34465: ARRAY
34466: PPUSH
34467: CALL_OW 488
34471: NOT
34472: PUSH
34473: LD_VAR 0 12
34477: PUSH
34478: LD_VAR 0 7
34482: ARRAY
34483: PUSH
34484: LD_INT 1
34486: ARRAY
34487: PPUSH
34488: LD_VAR 0 12
34492: PUSH
34493: LD_VAR 0 7
34497: ARRAY
34498: PUSH
34499: LD_INT 2
34501: ARRAY
34502: PPUSH
34503: CALL_OW 428
34507: PUSH
34508: LD_INT 0
34510: GREATER
34511: OR
34512: PUSH
34513: LD_VAR 0 12
34517: PUSH
34518: LD_VAR 0 7
34522: ARRAY
34523: PUSH
34524: LD_INT 1
34526: ARRAY
34527: PPUSH
34528: LD_VAR 0 12
34532: PUSH
34533: LD_VAR 0 7
34537: ARRAY
34538: PUSH
34539: LD_INT 2
34541: ARRAY
34542: PPUSH
34543: CALL_OW 351
34547: OR
34548: IFFALSE 34554
// exit ;
34550: POP
34551: POP
34552: GO 34861
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34554: LD_ADDR_VAR 0 8
34558: PUSH
34559: LD_VAR 0 12
34563: PUSH
34564: LD_VAR 0 7
34568: ARRAY
34569: PUSH
34570: LD_INT 1
34572: ARRAY
34573: PPUSH
34574: LD_VAR 0 12
34578: PUSH
34579: LD_VAR 0 7
34583: ARRAY
34584: PUSH
34585: LD_INT 2
34587: ARRAY
34588: PPUSH
34589: CALL_OW 546
34593: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
34594: LD_VAR 0 8
34598: PUSH
34599: LD_INT 1
34601: ARRAY
34602: PUSH
34603: LD_VAR 0 8
34607: PUSH
34608: LD_INT 2
34610: ARRAY
34611: PUSH
34612: LD_VAR 0 13
34616: PUSH
34617: LD_INT 2
34619: PLUS
34620: GREATER
34621: OR
34622: PUSH
34623: LD_VAR 0 8
34627: PUSH
34628: LD_INT 2
34630: ARRAY
34631: PUSH
34632: LD_VAR 0 13
34636: PUSH
34637: LD_INT 2
34639: MINUS
34640: LESS
34641: OR
34642: PUSH
34643: LD_VAR 0 8
34647: PUSH
34648: LD_INT 3
34650: ARRAY
34651: PUSH
34652: LD_INT 0
34654: PUSH
34655: LD_INT 8
34657: PUSH
34658: LD_INT 9
34660: PUSH
34661: LD_INT 10
34663: PUSH
34664: LD_INT 11
34666: PUSH
34667: LD_INT 12
34669: PUSH
34670: LD_INT 13
34672: PUSH
34673: LD_INT 16
34675: PUSH
34676: LD_INT 17
34678: PUSH
34679: LD_INT 18
34681: PUSH
34682: LD_INT 19
34684: PUSH
34685: LD_INT 20
34687: PUSH
34688: LD_INT 21
34690: PUSH
34691: EMPTY
34692: LIST
34693: LIST
34694: LIST
34695: LIST
34696: LIST
34697: LIST
34698: LIST
34699: LIST
34700: LIST
34701: LIST
34702: LIST
34703: LIST
34704: LIST
34705: IN
34706: NOT
34707: OR
34708: PUSH
34709: LD_VAR 0 8
34713: PUSH
34714: LD_INT 5
34716: ARRAY
34717: NOT
34718: OR
34719: PUSH
34720: LD_VAR 0 8
34724: PUSH
34725: LD_INT 6
34727: ARRAY
34728: PUSH
34729: LD_INT 1
34731: PUSH
34732: LD_INT 2
34734: PUSH
34735: LD_INT 7
34737: PUSH
34738: LD_INT 9
34740: PUSH
34741: LD_INT 10
34743: PUSH
34744: LD_INT 11
34746: PUSH
34747: EMPTY
34748: LIST
34749: LIST
34750: LIST
34751: LIST
34752: LIST
34753: LIST
34754: IN
34755: NOT
34756: OR
34757: IFFALSE 34763
// exit ;
34759: POP
34760: POP
34761: GO 34861
// end ;
34763: GO 34434
34765: POP
34766: POP
// side := GetSide ( depot ) ;
34767: LD_ADDR_VAR 0 9
34771: PUSH
34772: LD_VAR 0 1
34776: PPUSH
34777: CALL_OW 255
34781: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34782: LD_VAR 0 9
34786: PPUSH
34787: LD_VAR 0 3
34791: PPUSH
34792: LD_VAR 0 4
34796: PPUSH
34797: LD_INT 20
34799: PPUSH
34800: CALL 27533 0 4
34804: PUSH
34805: LD_INT 4
34807: ARRAY
34808: IFFALSE 34812
// exit ;
34810: GO 34861
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
34812: LD_VAR 0 2
34816: PUSH
34817: LD_INT 29
34819: PUSH
34820: LD_INT 30
34822: PUSH
34823: EMPTY
34824: LIST
34825: LIST
34826: IN
34827: PUSH
34828: LD_VAR 0 3
34832: PPUSH
34833: LD_VAR 0 4
34837: PPUSH
34838: LD_VAR 0 9
34842: PPUSH
34843: CALL_OW 440
34847: NOT
34848: AND
34849: IFFALSE 34853
// exit ;
34851: GO 34861
// result := true ;
34853: LD_ADDR_VAR 0 6
34857: PUSH
34858: LD_INT 1
34860: ST_TO_ADDR
// end ;
34861: LD_VAR 0 6
34865: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
34866: LD_INT 0
34868: PPUSH
34869: PPUSH
34870: PPUSH
34871: PPUSH
34872: PPUSH
34873: PPUSH
34874: PPUSH
34875: PPUSH
34876: PPUSH
34877: PPUSH
34878: PPUSH
34879: PPUSH
34880: PPUSH
34881: PPUSH
34882: PPUSH
34883: PPUSH
34884: PPUSH
34885: PPUSH
34886: PPUSH
34887: PPUSH
34888: PPUSH
34889: PPUSH
34890: PPUSH
34891: PPUSH
34892: PPUSH
34893: PPUSH
34894: PPUSH
34895: PPUSH
34896: PPUSH
34897: PPUSH
34898: PPUSH
34899: PPUSH
34900: PPUSH
34901: PPUSH
34902: PPUSH
34903: PPUSH
34904: PPUSH
34905: PPUSH
34906: PPUSH
34907: PPUSH
34908: PPUSH
34909: PPUSH
34910: PPUSH
34911: PPUSH
34912: PPUSH
34913: PPUSH
34914: PPUSH
34915: PPUSH
34916: PPUSH
34917: PPUSH
34918: PPUSH
34919: PPUSH
34920: PPUSH
34921: PPUSH
34922: PPUSH
34923: PPUSH
34924: PPUSH
34925: PPUSH
// result = [ ] ;
34926: LD_ADDR_VAR 0 7
34930: PUSH
34931: EMPTY
34932: ST_TO_ADDR
// temp_list = [ ] ;
34933: LD_ADDR_VAR 0 9
34937: PUSH
34938: EMPTY
34939: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
34940: LD_VAR 0 4
34944: PUSH
34945: LD_INT 0
34947: PUSH
34948: LD_INT 1
34950: PUSH
34951: LD_INT 2
34953: PUSH
34954: LD_INT 3
34956: PUSH
34957: LD_INT 4
34959: PUSH
34960: LD_INT 5
34962: PUSH
34963: EMPTY
34964: LIST
34965: LIST
34966: LIST
34967: LIST
34968: LIST
34969: LIST
34970: IN
34971: NOT
34972: PUSH
34973: LD_VAR 0 1
34977: PUSH
34978: LD_INT 0
34980: PUSH
34981: LD_INT 1
34983: PUSH
34984: EMPTY
34985: LIST
34986: LIST
34987: IN
34988: PUSH
34989: LD_VAR 0 5
34993: PUSH
34994: LD_INT 1
34996: PUSH
34997: LD_INT 2
34999: PUSH
35000: LD_INT 3
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: LIST
35007: IN
35008: NOT
35009: AND
35010: OR
35011: IFFALSE 35015
// exit ;
35013: GO 53400
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
35015: LD_VAR 0 1
35019: PUSH
35020: LD_INT 6
35022: PUSH
35023: LD_INT 7
35025: PUSH
35026: LD_INT 8
35028: PUSH
35029: LD_INT 13
35031: PUSH
35032: LD_INT 12
35034: PUSH
35035: LD_INT 15
35037: PUSH
35038: LD_INT 11
35040: PUSH
35041: LD_INT 14
35043: PUSH
35044: LD_INT 10
35046: PUSH
35047: EMPTY
35048: LIST
35049: LIST
35050: LIST
35051: LIST
35052: LIST
35053: LIST
35054: LIST
35055: LIST
35056: LIST
35057: IN
35058: IFFALSE 35068
// btype = b_lab ;
35060: LD_ADDR_VAR 0 1
35064: PUSH
35065: LD_INT 6
35067: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
35068: LD_VAR 0 6
35072: PUSH
35073: LD_INT 0
35075: PUSH
35076: LD_INT 1
35078: PUSH
35079: LD_INT 2
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: LIST
35086: IN
35087: NOT
35088: PUSH
35089: LD_VAR 0 1
35093: PUSH
35094: LD_INT 0
35096: PUSH
35097: LD_INT 1
35099: PUSH
35100: LD_INT 2
35102: PUSH
35103: LD_INT 3
35105: PUSH
35106: LD_INT 6
35108: PUSH
35109: LD_INT 36
35111: PUSH
35112: LD_INT 4
35114: PUSH
35115: LD_INT 5
35117: PUSH
35118: LD_INT 31
35120: PUSH
35121: LD_INT 32
35123: PUSH
35124: LD_INT 33
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: LIST
35131: LIST
35132: LIST
35133: LIST
35134: LIST
35135: LIST
35136: LIST
35137: LIST
35138: LIST
35139: IN
35140: NOT
35141: PUSH
35142: LD_VAR 0 6
35146: PUSH
35147: LD_INT 1
35149: EQUAL
35150: AND
35151: OR
35152: PUSH
35153: LD_VAR 0 1
35157: PUSH
35158: LD_INT 2
35160: PUSH
35161: LD_INT 3
35163: PUSH
35164: EMPTY
35165: LIST
35166: LIST
35167: IN
35168: NOT
35169: PUSH
35170: LD_VAR 0 6
35174: PUSH
35175: LD_INT 2
35177: EQUAL
35178: AND
35179: OR
35180: IFFALSE 35190
// mode = 0 ;
35182: LD_ADDR_VAR 0 6
35186: PUSH
35187: LD_INT 0
35189: ST_TO_ADDR
// case mode of 0 :
35190: LD_VAR 0 6
35194: PUSH
35195: LD_INT 0
35197: DOUBLE
35198: EQUAL
35199: IFTRUE 35203
35201: GO 46656
35203: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35204: LD_ADDR_VAR 0 11
35208: PUSH
35209: LD_INT 0
35211: PUSH
35212: LD_INT 0
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: PUSH
35219: LD_INT 0
35221: PUSH
35222: LD_INT 1
35224: NEG
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: LD_INT 1
35232: PUSH
35233: LD_INT 0
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PUSH
35240: LD_INT 1
35242: PUSH
35243: LD_INT 1
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 0
35252: PUSH
35253: LD_INT 1
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_INT 1
35262: NEG
35263: PUSH
35264: LD_INT 0
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: PUSH
35271: LD_INT 1
35273: NEG
35274: PUSH
35275: LD_INT 1
35277: NEG
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: PUSH
35283: LD_INT 1
35285: NEG
35286: PUSH
35287: LD_INT 2
35289: NEG
35290: PUSH
35291: EMPTY
35292: LIST
35293: LIST
35294: PUSH
35295: LD_INT 0
35297: PUSH
35298: LD_INT 2
35300: NEG
35301: PUSH
35302: EMPTY
35303: LIST
35304: LIST
35305: PUSH
35306: LD_INT 1
35308: PUSH
35309: LD_INT 1
35311: NEG
35312: PUSH
35313: EMPTY
35314: LIST
35315: LIST
35316: PUSH
35317: LD_INT 1
35319: PUSH
35320: LD_INT 2
35322: PUSH
35323: EMPTY
35324: LIST
35325: LIST
35326: PUSH
35327: LD_INT 0
35329: PUSH
35330: LD_INT 2
35332: PUSH
35333: EMPTY
35334: LIST
35335: LIST
35336: PUSH
35337: LD_INT 1
35339: NEG
35340: PUSH
35341: LD_INT 1
35343: PUSH
35344: EMPTY
35345: LIST
35346: LIST
35347: PUSH
35348: LD_INT 1
35350: PUSH
35351: LD_INT 3
35353: PUSH
35354: EMPTY
35355: LIST
35356: LIST
35357: PUSH
35358: LD_INT 0
35360: PUSH
35361: LD_INT 3
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: PUSH
35368: LD_INT 1
35370: NEG
35371: PUSH
35372: LD_INT 2
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35397: LD_ADDR_VAR 0 12
35401: PUSH
35402: LD_INT 0
35404: PUSH
35405: LD_INT 0
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: PUSH
35412: LD_INT 0
35414: PUSH
35415: LD_INT 1
35417: NEG
35418: PUSH
35419: EMPTY
35420: LIST
35421: LIST
35422: PUSH
35423: LD_INT 1
35425: PUSH
35426: LD_INT 0
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: PUSH
35433: LD_INT 1
35435: PUSH
35436: LD_INT 1
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: PUSH
35443: LD_INT 0
35445: PUSH
35446: LD_INT 1
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: PUSH
35453: LD_INT 1
35455: NEG
35456: PUSH
35457: LD_INT 0
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: PUSH
35464: LD_INT 1
35466: NEG
35467: PUSH
35468: LD_INT 1
35470: NEG
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: PUSH
35476: LD_INT 1
35478: PUSH
35479: LD_INT 1
35481: NEG
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PUSH
35487: LD_INT 2
35489: PUSH
35490: LD_INT 0
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: PUSH
35497: LD_INT 2
35499: PUSH
35500: LD_INT 1
35502: PUSH
35503: EMPTY
35504: LIST
35505: LIST
35506: PUSH
35507: LD_INT 1
35509: NEG
35510: PUSH
35511: LD_INT 1
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: PUSH
35518: LD_INT 2
35520: NEG
35521: PUSH
35522: LD_INT 0
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: PUSH
35529: LD_INT 2
35531: NEG
35532: PUSH
35533: LD_INT 1
35535: NEG
35536: PUSH
35537: EMPTY
35538: LIST
35539: LIST
35540: PUSH
35541: LD_INT 2
35543: NEG
35544: PUSH
35545: LD_INT 1
35547: PUSH
35548: EMPTY
35549: LIST
35550: LIST
35551: PUSH
35552: LD_INT 3
35554: NEG
35555: PUSH
35556: LD_INT 0
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: PUSH
35563: LD_INT 3
35565: NEG
35566: PUSH
35567: LD_INT 1
35569: NEG
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: LIST
35579: LIST
35580: LIST
35581: LIST
35582: LIST
35583: LIST
35584: LIST
35585: LIST
35586: LIST
35587: LIST
35588: LIST
35589: LIST
35590: LIST
35591: LIST
35592: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35593: LD_ADDR_VAR 0 13
35597: PUSH
35598: LD_INT 0
35600: PUSH
35601: LD_INT 0
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: PUSH
35608: LD_INT 0
35610: PUSH
35611: LD_INT 1
35613: NEG
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: PUSH
35619: LD_INT 1
35621: PUSH
35622: LD_INT 0
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: PUSH
35629: LD_INT 1
35631: PUSH
35632: LD_INT 1
35634: PUSH
35635: EMPTY
35636: LIST
35637: LIST
35638: PUSH
35639: LD_INT 0
35641: PUSH
35642: LD_INT 1
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: PUSH
35649: LD_INT 1
35651: NEG
35652: PUSH
35653: LD_INT 0
35655: PUSH
35656: EMPTY
35657: LIST
35658: LIST
35659: PUSH
35660: LD_INT 1
35662: NEG
35663: PUSH
35664: LD_INT 1
35666: NEG
35667: PUSH
35668: EMPTY
35669: LIST
35670: LIST
35671: PUSH
35672: LD_INT 1
35674: NEG
35675: PUSH
35676: LD_INT 2
35678: NEG
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: PUSH
35684: LD_INT 2
35686: PUSH
35687: LD_INT 1
35689: PUSH
35690: EMPTY
35691: LIST
35692: LIST
35693: PUSH
35694: LD_INT 2
35696: PUSH
35697: LD_INT 2
35699: PUSH
35700: EMPTY
35701: LIST
35702: LIST
35703: PUSH
35704: LD_INT 1
35706: PUSH
35707: LD_INT 2
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: PUSH
35714: LD_INT 2
35716: NEG
35717: PUSH
35718: LD_INT 1
35720: NEG
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: PUSH
35726: LD_INT 2
35728: NEG
35729: PUSH
35730: LD_INT 2
35732: NEG
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: PUSH
35738: LD_INT 2
35740: NEG
35741: PUSH
35742: LD_INT 3
35744: NEG
35745: PUSH
35746: EMPTY
35747: LIST
35748: LIST
35749: PUSH
35750: LD_INT 3
35752: NEG
35753: PUSH
35754: LD_INT 2
35756: NEG
35757: PUSH
35758: EMPTY
35759: LIST
35760: LIST
35761: PUSH
35762: LD_INT 3
35764: NEG
35765: PUSH
35766: LD_INT 3
35768: NEG
35769: PUSH
35770: EMPTY
35771: LIST
35772: LIST
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: LIST
35778: LIST
35779: LIST
35780: LIST
35781: LIST
35782: LIST
35783: LIST
35784: LIST
35785: LIST
35786: LIST
35787: LIST
35788: LIST
35789: LIST
35790: LIST
35791: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35792: LD_ADDR_VAR 0 14
35796: PUSH
35797: LD_INT 0
35799: PUSH
35800: LD_INT 0
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PUSH
35807: LD_INT 0
35809: PUSH
35810: LD_INT 1
35812: NEG
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: LD_INT 1
35820: PUSH
35821: LD_INT 0
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: PUSH
35828: LD_INT 1
35830: PUSH
35831: LD_INT 1
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: PUSH
35838: LD_INT 0
35840: PUSH
35841: LD_INT 1
35843: PUSH
35844: EMPTY
35845: LIST
35846: LIST
35847: PUSH
35848: LD_INT 1
35850: NEG
35851: PUSH
35852: LD_INT 0
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: PUSH
35859: LD_INT 1
35861: NEG
35862: PUSH
35863: LD_INT 1
35865: NEG
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: PUSH
35871: LD_INT 1
35873: NEG
35874: PUSH
35875: LD_INT 2
35877: NEG
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: PUSH
35883: LD_INT 0
35885: PUSH
35886: LD_INT 2
35888: NEG
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: PUSH
35894: LD_INT 1
35896: PUSH
35897: LD_INT 1
35899: NEG
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: PUSH
35905: LD_INT 1
35907: PUSH
35908: LD_INT 2
35910: PUSH
35911: EMPTY
35912: LIST
35913: LIST
35914: PUSH
35915: LD_INT 0
35917: PUSH
35918: LD_INT 2
35920: PUSH
35921: EMPTY
35922: LIST
35923: LIST
35924: PUSH
35925: LD_INT 1
35927: NEG
35928: PUSH
35929: LD_INT 1
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: LD_INT 1
35938: NEG
35939: PUSH
35940: LD_INT 3
35942: NEG
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: LD_INT 0
35950: PUSH
35951: LD_INT 3
35953: NEG
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PUSH
35959: LD_INT 1
35961: PUSH
35962: LD_INT 2
35964: NEG
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: PUSH
35970: EMPTY
35971: LIST
35972: LIST
35973: LIST
35974: LIST
35975: LIST
35976: LIST
35977: LIST
35978: LIST
35979: LIST
35980: LIST
35981: LIST
35982: LIST
35983: LIST
35984: LIST
35985: LIST
35986: LIST
35987: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35988: LD_ADDR_VAR 0 15
35992: PUSH
35993: LD_INT 0
35995: PUSH
35996: LD_INT 0
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: PUSH
36003: LD_INT 0
36005: PUSH
36006: LD_INT 1
36008: NEG
36009: PUSH
36010: EMPTY
36011: LIST
36012: LIST
36013: PUSH
36014: LD_INT 1
36016: PUSH
36017: LD_INT 0
36019: PUSH
36020: EMPTY
36021: LIST
36022: LIST
36023: PUSH
36024: LD_INT 1
36026: PUSH
36027: LD_INT 1
36029: PUSH
36030: EMPTY
36031: LIST
36032: LIST
36033: PUSH
36034: LD_INT 0
36036: PUSH
36037: LD_INT 1
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: PUSH
36044: LD_INT 1
36046: NEG
36047: PUSH
36048: LD_INT 0
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: PUSH
36055: LD_INT 1
36057: NEG
36058: PUSH
36059: LD_INT 1
36061: NEG
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: PUSH
36067: LD_INT 1
36069: PUSH
36070: LD_INT 1
36072: NEG
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: PUSH
36078: LD_INT 2
36080: PUSH
36081: LD_INT 0
36083: PUSH
36084: EMPTY
36085: LIST
36086: LIST
36087: PUSH
36088: LD_INT 2
36090: PUSH
36091: LD_INT 1
36093: PUSH
36094: EMPTY
36095: LIST
36096: LIST
36097: PUSH
36098: LD_INT 1
36100: NEG
36101: PUSH
36102: LD_INT 1
36104: PUSH
36105: EMPTY
36106: LIST
36107: LIST
36108: PUSH
36109: LD_INT 2
36111: NEG
36112: PUSH
36113: LD_INT 0
36115: PUSH
36116: EMPTY
36117: LIST
36118: LIST
36119: PUSH
36120: LD_INT 2
36122: NEG
36123: PUSH
36124: LD_INT 1
36126: NEG
36127: PUSH
36128: EMPTY
36129: LIST
36130: LIST
36131: PUSH
36132: LD_INT 2
36134: PUSH
36135: LD_INT 1
36137: NEG
36138: PUSH
36139: EMPTY
36140: LIST
36141: LIST
36142: PUSH
36143: LD_INT 3
36145: PUSH
36146: LD_INT 0
36148: PUSH
36149: EMPTY
36150: LIST
36151: LIST
36152: PUSH
36153: LD_INT 3
36155: PUSH
36156: LD_INT 1
36158: PUSH
36159: EMPTY
36160: LIST
36161: LIST
36162: PUSH
36163: EMPTY
36164: LIST
36165: LIST
36166: LIST
36167: LIST
36168: LIST
36169: LIST
36170: LIST
36171: LIST
36172: LIST
36173: LIST
36174: LIST
36175: LIST
36176: LIST
36177: LIST
36178: LIST
36179: LIST
36180: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36181: LD_ADDR_VAR 0 16
36185: PUSH
36186: LD_INT 0
36188: PUSH
36189: LD_INT 0
36191: PUSH
36192: EMPTY
36193: LIST
36194: LIST
36195: PUSH
36196: LD_INT 0
36198: PUSH
36199: LD_INT 1
36201: NEG
36202: PUSH
36203: EMPTY
36204: LIST
36205: LIST
36206: PUSH
36207: LD_INT 1
36209: PUSH
36210: LD_INT 0
36212: PUSH
36213: EMPTY
36214: LIST
36215: LIST
36216: PUSH
36217: LD_INT 1
36219: PUSH
36220: LD_INT 1
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: PUSH
36227: LD_INT 0
36229: PUSH
36230: LD_INT 1
36232: PUSH
36233: EMPTY
36234: LIST
36235: LIST
36236: PUSH
36237: LD_INT 1
36239: NEG
36240: PUSH
36241: LD_INT 0
36243: PUSH
36244: EMPTY
36245: LIST
36246: LIST
36247: PUSH
36248: LD_INT 1
36250: NEG
36251: PUSH
36252: LD_INT 1
36254: NEG
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PUSH
36260: LD_INT 1
36262: NEG
36263: PUSH
36264: LD_INT 2
36266: NEG
36267: PUSH
36268: EMPTY
36269: LIST
36270: LIST
36271: PUSH
36272: LD_INT 2
36274: PUSH
36275: LD_INT 1
36277: PUSH
36278: EMPTY
36279: LIST
36280: LIST
36281: PUSH
36282: LD_INT 2
36284: PUSH
36285: LD_INT 2
36287: PUSH
36288: EMPTY
36289: LIST
36290: LIST
36291: PUSH
36292: LD_INT 1
36294: PUSH
36295: LD_INT 2
36297: PUSH
36298: EMPTY
36299: LIST
36300: LIST
36301: PUSH
36302: LD_INT 2
36304: NEG
36305: PUSH
36306: LD_INT 1
36308: NEG
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: PUSH
36314: LD_INT 2
36316: NEG
36317: PUSH
36318: LD_INT 2
36320: NEG
36321: PUSH
36322: EMPTY
36323: LIST
36324: LIST
36325: PUSH
36326: LD_INT 3
36328: PUSH
36329: LD_INT 2
36331: PUSH
36332: EMPTY
36333: LIST
36334: LIST
36335: PUSH
36336: LD_INT 3
36338: PUSH
36339: LD_INT 3
36341: PUSH
36342: EMPTY
36343: LIST
36344: LIST
36345: PUSH
36346: LD_INT 2
36348: PUSH
36349: LD_INT 3
36351: PUSH
36352: EMPTY
36353: LIST
36354: LIST
36355: PUSH
36356: EMPTY
36357: LIST
36358: LIST
36359: LIST
36360: LIST
36361: LIST
36362: LIST
36363: LIST
36364: LIST
36365: LIST
36366: LIST
36367: LIST
36368: LIST
36369: LIST
36370: LIST
36371: LIST
36372: LIST
36373: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36374: LD_ADDR_VAR 0 17
36378: PUSH
36379: LD_INT 0
36381: PUSH
36382: LD_INT 0
36384: PUSH
36385: EMPTY
36386: LIST
36387: LIST
36388: PUSH
36389: LD_INT 0
36391: PUSH
36392: LD_INT 1
36394: NEG
36395: PUSH
36396: EMPTY
36397: LIST
36398: LIST
36399: PUSH
36400: LD_INT 1
36402: PUSH
36403: LD_INT 0
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: PUSH
36410: LD_INT 1
36412: PUSH
36413: LD_INT 1
36415: PUSH
36416: EMPTY
36417: LIST
36418: LIST
36419: PUSH
36420: LD_INT 0
36422: PUSH
36423: LD_INT 1
36425: PUSH
36426: EMPTY
36427: LIST
36428: LIST
36429: PUSH
36430: LD_INT 1
36432: NEG
36433: PUSH
36434: LD_INT 0
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: PUSH
36441: LD_INT 1
36443: NEG
36444: PUSH
36445: LD_INT 1
36447: NEG
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: PUSH
36453: LD_INT 1
36455: NEG
36456: PUSH
36457: LD_INT 2
36459: NEG
36460: PUSH
36461: EMPTY
36462: LIST
36463: LIST
36464: PUSH
36465: LD_INT 0
36467: PUSH
36468: LD_INT 2
36470: NEG
36471: PUSH
36472: EMPTY
36473: LIST
36474: LIST
36475: PUSH
36476: LD_INT 1
36478: PUSH
36479: LD_INT 1
36481: NEG
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: PUSH
36487: LD_INT 2
36489: PUSH
36490: LD_INT 0
36492: PUSH
36493: EMPTY
36494: LIST
36495: LIST
36496: PUSH
36497: LD_INT 2
36499: PUSH
36500: LD_INT 1
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: PUSH
36507: LD_INT 2
36509: PUSH
36510: LD_INT 2
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: LD_INT 1
36519: PUSH
36520: LD_INT 2
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: PUSH
36527: LD_INT 0
36529: PUSH
36530: LD_INT 2
36532: PUSH
36533: EMPTY
36534: LIST
36535: LIST
36536: PUSH
36537: LD_INT 1
36539: NEG
36540: PUSH
36541: LD_INT 1
36543: PUSH
36544: EMPTY
36545: LIST
36546: LIST
36547: PUSH
36548: LD_INT 2
36550: NEG
36551: PUSH
36552: LD_INT 0
36554: PUSH
36555: EMPTY
36556: LIST
36557: LIST
36558: PUSH
36559: LD_INT 2
36561: NEG
36562: PUSH
36563: LD_INT 1
36565: NEG
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: LD_INT 2
36573: NEG
36574: PUSH
36575: LD_INT 2
36577: NEG
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: LIST
36587: LIST
36588: LIST
36589: LIST
36590: LIST
36591: LIST
36592: LIST
36593: LIST
36594: LIST
36595: LIST
36596: LIST
36597: LIST
36598: LIST
36599: LIST
36600: LIST
36601: LIST
36602: LIST
36603: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36604: LD_ADDR_VAR 0 18
36608: PUSH
36609: LD_INT 0
36611: PUSH
36612: LD_INT 0
36614: PUSH
36615: EMPTY
36616: LIST
36617: LIST
36618: PUSH
36619: LD_INT 0
36621: PUSH
36622: LD_INT 1
36624: NEG
36625: PUSH
36626: EMPTY
36627: LIST
36628: LIST
36629: PUSH
36630: LD_INT 1
36632: PUSH
36633: LD_INT 0
36635: PUSH
36636: EMPTY
36637: LIST
36638: LIST
36639: PUSH
36640: LD_INT 1
36642: PUSH
36643: LD_INT 1
36645: PUSH
36646: EMPTY
36647: LIST
36648: LIST
36649: PUSH
36650: LD_INT 0
36652: PUSH
36653: LD_INT 1
36655: PUSH
36656: EMPTY
36657: LIST
36658: LIST
36659: PUSH
36660: LD_INT 1
36662: NEG
36663: PUSH
36664: LD_INT 0
36666: PUSH
36667: EMPTY
36668: LIST
36669: LIST
36670: PUSH
36671: LD_INT 1
36673: NEG
36674: PUSH
36675: LD_INT 1
36677: NEG
36678: PUSH
36679: EMPTY
36680: LIST
36681: LIST
36682: PUSH
36683: LD_INT 1
36685: NEG
36686: PUSH
36687: LD_INT 2
36689: NEG
36690: PUSH
36691: EMPTY
36692: LIST
36693: LIST
36694: PUSH
36695: LD_INT 0
36697: PUSH
36698: LD_INT 2
36700: NEG
36701: PUSH
36702: EMPTY
36703: LIST
36704: LIST
36705: PUSH
36706: LD_INT 1
36708: PUSH
36709: LD_INT 1
36711: NEG
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: PUSH
36717: LD_INT 2
36719: PUSH
36720: LD_INT 0
36722: PUSH
36723: EMPTY
36724: LIST
36725: LIST
36726: PUSH
36727: LD_INT 2
36729: PUSH
36730: LD_INT 1
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: PUSH
36737: LD_INT 2
36739: PUSH
36740: LD_INT 2
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PUSH
36747: LD_INT 1
36749: PUSH
36750: LD_INT 2
36752: PUSH
36753: EMPTY
36754: LIST
36755: LIST
36756: PUSH
36757: LD_INT 0
36759: PUSH
36760: LD_INT 2
36762: PUSH
36763: EMPTY
36764: LIST
36765: LIST
36766: PUSH
36767: LD_INT 1
36769: NEG
36770: PUSH
36771: LD_INT 1
36773: PUSH
36774: EMPTY
36775: LIST
36776: LIST
36777: PUSH
36778: LD_INT 2
36780: NEG
36781: PUSH
36782: LD_INT 0
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: PUSH
36789: LD_INT 2
36791: NEG
36792: PUSH
36793: LD_INT 1
36795: NEG
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: PUSH
36801: LD_INT 2
36803: NEG
36804: PUSH
36805: LD_INT 2
36807: NEG
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: LIST
36817: LIST
36818: LIST
36819: LIST
36820: LIST
36821: LIST
36822: LIST
36823: LIST
36824: LIST
36825: LIST
36826: LIST
36827: LIST
36828: LIST
36829: LIST
36830: LIST
36831: LIST
36832: LIST
36833: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36834: LD_ADDR_VAR 0 19
36838: PUSH
36839: LD_INT 0
36841: PUSH
36842: LD_INT 0
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: LD_INT 0
36851: PUSH
36852: LD_INT 1
36854: NEG
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 1
36862: PUSH
36863: LD_INT 0
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: PUSH
36870: LD_INT 1
36872: PUSH
36873: LD_INT 1
36875: PUSH
36876: EMPTY
36877: LIST
36878: LIST
36879: PUSH
36880: LD_INT 0
36882: PUSH
36883: LD_INT 1
36885: PUSH
36886: EMPTY
36887: LIST
36888: LIST
36889: PUSH
36890: LD_INT 1
36892: NEG
36893: PUSH
36894: LD_INT 0
36896: PUSH
36897: EMPTY
36898: LIST
36899: LIST
36900: PUSH
36901: LD_INT 1
36903: NEG
36904: PUSH
36905: LD_INT 1
36907: NEG
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: PUSH
36913: LD_INT 1
36915: NEG
36916: PUSH
36917: LD_INT 2
36919: NEG
36920: PUSH
36921: EMPTY
36922: LIST
36923: LIST
36924: PUSH
36925: LD_INT 0
36927: PUSH
36928: LD_INT 2
36930: NEG
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: PUSH
36936: LD_INT 1
36938: PUSH
36939: LD_INT 1
36941: NEG
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: PUSH
36947: LD_INT 2
36949: PUSH
36950: LD_INT 0
36952: PUSH
36953: EMPTY
36954: LIST
36955: LIST
36956: PUSH
36957: LD_INT 2
36959: PUSH
36960: LD_INT 1
36962: PUSH
36963: EMPTY
36964: LIST
36965: LIST
36966: PUSH
36967: LD_INT 2
36969: PUSH
36970: LD_INT 2
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: PUSH
36977: LD_INT 1
36979: PUSH
36980: LD_INT 2
36982: PUSH
36983: EMPTY
36984: LIST
36985: LIST
36986: PUSH
36987: LD_INT 0
36989: PUSH
36990: LD_INT 2
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: PUSH
36997: LD_INT 1
36999: NEG
37000: PUSH
37001: LD_INT 1
37003: PUSH
37004: EMPTY
37005: LIST
37006: LIST
37007: PUSH
37008: LD_INT 2
37010: NEG
37011: PUSH
37012: LD_INT 0
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: PUSH
37019: LD_INT 2
37021: NEG
37022: PUSH
37023: LD_INT 1
37025: NEG
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PUSH
37031: LD_INT 2
37033: NEG
37034: PUSH
37035: LD_INT 2
37037: NEG
37038: PUSH
37039: EMPTY
37040: LIST
37041: LIST
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: LIST
37047: LIST
37048: LIST
37049: LIST
37050: LIST
37051: LIST
37052: LIST
37053: LIST
37054: LIST
37055: LIST
37056: LIST
37057: LIST
37058: LIST
37059: LIST
37060: LIST
37061: LIST
37062: LIST
37063: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37064: LD_ADDR_VAR 0 20
37068: PUSH
37069: LD_INT 0
37071: PUSH
37072: LD_INT 0
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PUSH
37079: LD_INT 0
37081: PUSH
37082: LD_INT 1
37084: NEG
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: PUSH
37090: LD_INT 1
37092: PUSH
37093: LD_INT 0
37095: PUSH
37096: EMPTY
37097: LIST
37098: LIST
37099: PUSH
37100: LD_INT 1
37102: PUSH
37103: LD_INT 1
37105: PUSH
37106: EMPTY
37107: LIST
37108: LIST
37109: PUSH
37110: LD_INT 0
37112: PUSH
37113: LD_INT 1
37115: PUSH
37116: EMPTY
37117: LIST
37118: LIST
37119: PUSH
37120: LD_INT 1
37122: NEG
37123: PUSH
37124: LD_INT 0
37126: PUSH
37127: EMPTY
37128: LIST
37129: LIST
37130: PUSH
37131: LD_INT 1
37133: NEG
37134: PUSH
37135: LD_INT 1
37137: NEG
37138: PUSH
37139: EMPTY
37140: LIST
37141: LIST
37142: PUSH
37143: LD_INT 1
37145: NEG
37146: PUSH
37147: LD_INT 2
37149: NEG
37150: PUSH
37151: EMPTY
37152: LIST
37153: LIST
37154: PUSH
37155: LD_INT 0
37157: PUSH
37158: LD_INT 2
37160: NEG
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: PUSH
37166: LD_INT 1
37168: PUSH
37169: LD_INT 1
37171: NEG
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: PUSH
37177: LD_INT 2
37179: PUSH
37180: LD_INT 0
37182: PUSH
37183: EMPTY
37184: LIST
37185: LIST
37186: PUSH
37187: LD_INT 2
37189: PUSH
37190: LD_INT 1
37192: PUSH
37193: EMPTY
37194: LIST
37195: LIST
37196: PUSH
37197: LD_INT 2
37199: PUSH
37200: LD_INT 2
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: PUSH
37207: LD_INT 1
37209: PUSH
37210: LD_INT 2
37212: PUSH
37213: EMPTY
37214: LIST
37215: LIST
37216: PUSH
37217: LD_INT 0
37219: PUSH
37220: LD_INT 2
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: PUSH
37227: LD_INT 1
37229: NEG
37230: PUSH
37231: LD_INT 1
37233: PUSH
37234: EMPTY
37235: LIST
37236: LIST
37237: PUSH
37238: LD_INT 2
37240: NEG
37241: PUSH
37242: LD_INT 0
37244: PUSH
37245: EMPTY
37246: LIST
37247: LIST
37248: PUSH
37249: LD_INT 2
37251: NEG
37252: PUSH
37253: LD_INT 1
37255: NEG
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: PUSH
37261: LD_INT 2
37263: NEG
37264: PUSH
37265: LD_INT 2
37267: NEG
37268: PUSH
37269: EMPTY
37270: LIST
37271: LIST
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: LIST
37277: LIST
37278: LIST
37279: LIST
37280: LIST
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: LIST
37287: LIST
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: LIST
37293: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37294: LD_ADDR_VAR 0 21
37298: PUSH
37299: LD_INT 0
37301: PUSH
37302: LD_INT 0
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PUSH
37309: LD_INT 0
37311: PUSH
37312: LD_INT 1
37314: NEG
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: LD_INT 1
37322: PUSH
37323: LD_INT 0
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: PUSH
37330: LD_INT 1
37332: PUSH
37333: LD_INT 1
37335: PUSH
37336: EMPTY
37337: LIST
37338: LIST
37339: PUSH
37340: LD_INT 0
37342: PUSH
37343: LD_INT 1
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: PUSH
37350: LD_INT 1
37352: NEG
37353: PUSH
37354: LD_INT 0
37356: PUSH
37357: EMPTY
37358: LIST
37359: LIST
37360: PUSH
37361: LD_INT 1
37363: NEG
37364: PUSH
37365: LD_INT 1
37367: NEG
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: PUSH
37373: LD_INT 1
37375: NEG
37376: PUSH
37377: LD_INT 2
37379: NEG
37380: PUSH
37381: EMPTY
37382: LIST
37383: LIST
37384: PUSH
37385: LD_INT 0
37387: PUSH
37388: LD_INT 2
37390: NEG
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: PUSH
37396: LD_INT 1
37398: PUSH
37399: LD_INT 1
37401: NEG
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_INT 2
37409: PUSH
37410: LD_INT 0
37412: PUSH
37413: EMPTY
37414: LIST
37415: LIST
37416: PUSH
37417: LD_INT 2
37419: PUSH
37420: LD_INT 1
37422: PUSH
37423: EMPTY
37424: LIST
37425: LIST
37426: PUSH
37427: LD_INT 2
37429: PUSH
37430: LD_INT 2
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: LD_INT 1
37439: PUSH
37440: LD_INT 2
37442: PUSH
37443: EMPTY
37444: LIST
37445: LIST
37446: PUSH
37447: LD_INT 0
37449: PUSH
37450: LD_INT 2
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: PUSH
37457: LD_INT 1
37459: NEG
37460: PUSH
37461: LD_INT 1
37463: PUSH
37464: EMPTY
37465: LIST
37466: LIST
37467: PUSH
37468: LD_INT 2
37470: NEG
37471: PUSH
37472: LD_INT 0
37474: PUSH
37475: EMPTY
37476: LIST
37477: LIST
37478: PUSH
37479: LD_INT 2
37481: NEG
37482: PUSH
37483: LD_INT 1
37485: NEG
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PUSH
37491: LD_INT 2
37493: NEG
37494: PUSH
37495: LD_INT 2
37497: NEG
37498: PUSH
37499: EMPTY
37500: LIST
37501: LIST
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: LIST
37507: LIST
37508: LIST
37509: LIST
37510: LIST
37511: LIST
37512: LIST
37513: LIST
37514: LIST
37515: LIST
37516: LIST
37517: LIST
37518: LIST
37519: LIST
37520: LIST
37521: LIST
37522: LIST
37523: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37524: LD_ADDR_VAR 0 22
37528: PUSH
37529: LD_INT 0
37531: PUSH
37532: LD_INT 0
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PUSH
37539: LD_INT 0
37541: PUSH
37542: LD_INT 1
37544: NEG
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: PUSH
37550: LD_INT 1
37552: PUSH
37553: LD_INT 0
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: LD_INT 1
37562: PUSH
37563: LD_INT 1
37565: PUSH
37566: EMPTY
37567: LIST
37568: LIST
37569: PUSH
37570: LD_INT 0
37572: PUSH
37573: LD_INT 1
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: PUSH
37580: LD_INT 1
37582: NEG
37583: PUSH
37584: LD_INT 0
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PUSH
37591: LD_INT 1
37593: NEG
37594: PUSH
37595: LD_INT 1
37597: NEG
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: PUSH
37603: LD_INT 1
37605: NEG
37606: PUSH
37607: LD_INT 2
37609: NEG
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: PUSH
37615: LD_INT 0
37617: PUSH
37618: LD_INT 2
37620: NEG
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: PUSH
37626: LD_INT 1
37628: PUSH
37629: LD_INT 1
37631: NEG
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PUSH
37637: LD_INT 2
37639: PUSH
37640: LD_INT 0
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: PUSH
37647: LD_INT 2
37649: PUSH
37650: LD_INT 1
37652: PUSH
37653: EMPTY
37654: LIST
37655: LIST
37656: PUSH
37657: LD_INT 2
37659: PUSH
37660: LD_INT 2
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: LD_INT 1
37669: PUSH
37670: LD_INT 2
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: PUSH
37677: LD_INT 0
37679: PUSH
37680: LD_INT 2
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: PUSH
37687: LD_INT 1
37689: NEG
37690: PUSH
37691: LD_INT 1
37693: PUSH
37694: EMPTY
37695: LIST
37696: LIST
37697: PUSH
37698: LD_INT 2
37700: NEG
37701: PUSH
37702: LD_INT 0
37704: PUSH
37705: EMPTY
37706: LIST
37707: LIST
37708: PUSH
37709: LD_INT 2
37711: NEG
37712: PUSH
37713: LD_INT 1
37715: NEG
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: PUSH
37721: LD_INT 2
37723: NEG
37724: PUSH
37725: LD_INT 2
37727: NEG
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: LIST
37737: LIST
37738: LIST
37739: LIST
37740: LIST
37741: LIST
37742: LIST
37743: LIST
37744: LIST
37745: LIST
37746: LIST
37747: LIST
37748: LIST
37749: LIST
37750: LIST
37751: LIST
37752: LIST
37753: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37754: LD_ADDR_VAR 0 23
37758: PUSH
37759: LD_INT 0
37761: PUSH
37762: LD_INT 0
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: PUSH
37769: LD_INT 0
37771: PUSH
37772: LD_INT 1
37774: NEG
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: LD_INT 1
37782: PUSH
37783: LD_INT 0
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: LD_INT 1
37792: PUSH
37793: LD_INT 1
37795: PUSH
37796: EMPTY
37797: LIST
37798: LIST
37799: PUSH
37800: LD_INT 0
37802: PUSH
37803: LD_INT 1
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: PUSH
37810: LD_INT 1
37812: NEG
37813: PUSH
37814: LD_INT 0
37816: PUSH
37817: EMPTY
37818: LIST
37819: LIST
37820: PUSH
37821: LD_INT 1
37823: NEG
37824: PUSH
37825: LD_INT 1
37827: NEG
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: PUSH
37833: LD_INT 1
37835: NEG
37836: PUSH
37837: LD_INT 2
37839: NEG
37840: PUSH
37841: EMPTY
37842: LIST
37843: LIST
37844: PUSH
37845: LD_INT 0
37847: PUSH
37848: LD_INT 2
37850: NEG
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: LD_INT 1
37858: PUSH
37859: LD_INT 1
37861: NEG
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: PUSH
37867: LD_INT 2
37869: PUSH
37870: LD_INT 0
37872: PUSH
37873: EMPTY
37874: LIST
37875: LIST
37876: PUSH
37877: LD_INT 2
37879: PUSH
37880: LD_INT 1
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 2
37889: PUSH
37890: LD_INT 2
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 1
37899: PUSH
37900: LD_INT 2
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: LD_INT 0
37909: PUSH
37910: LD_INT 2
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: PUSH
37917: LD_INT 1
37919: NEG
37920: PUSH
37921: LD_INT 1
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: LD_INT 2
37930: NEG
37931: PUSH
37932: LD_INT 0
37934: PUSH
37935: EMPTY
37936: LIST
37937: LIST
37938: PUSH
37939: LD_INT 2
37941: NEG
37942: PUSH
37943: LD_INT 1
37945: NEG
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: LD_INT 2
37953: NEG
37954: PUSH
37955: LD_INT 2
37957: NEG
37958: PUSH
37959: EMPTY
37960: LIST
37961: LIST
37962: PUSH
37963: LD_INT 2
37965: NEG
37966: PUSH
37967: LD_INT 3
37969: NEG
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: LD_INT 1
37977: NEG
37978: PUSH
37979: LD_INT 3
37981: NEG
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: PUSH
37987: LD_INT 1
37989: PUSH
37990: LD_INT 2
37992: NEG
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: PUSH
37998: LD_INT 2
38000: PUSH
38001: LD_INT 1
38003: NEG
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: PUSH
38009: EMPTY
38010: LIST
38011: LIST
38012: LIST
38013: LIST
38014: LIST
38015: LIST
38016: LIST
38017: LIST
38018: LIST
38019: LIST
38020: LIST
38021: LIST
38022: LIST
38023: LIST
38024: LIST
38025: LIST
38026: LIST
38027: LIST
38028: LIST
38029: LIST
38030: LIST
38031: LIST
38032: LIST
38033: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
38034: LD_ADDR_VAR 0 24
38038: PUSH
38039: LD_INT 0
38041: PUSH
38042: LD_INT 0
38044: PUSH
38045: EMPTY
38046: LIST
38047: LIST
38048: PUSH
38049: LD_INT 0
38051: PUSH
38052: LD_INT 1
38054: NEG
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: PUSH
38060: LD_INT 1
38062: PUSH
38063: LD_INT 0
38065: PUSH
38066: EMPTY
38067: LIST
38068: LIST
38069: PUSH
38070: LD_INT 1
38072: PUSH
38073: LD_INT 1
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: PUSH
38080: LD_INT 0
38082: PUSH
38083: LD_INT 1
38085: PUSH
38086: EMPTY
38087: LIST
38088: LIST
38089: PUSH
38090: LD_INT 1
38092: NEG
38093: PUSH
38094: LD_INT 0
38096: PUSH
38097: EMPTY
38098: LIST
38099: LIST
38100: PUSH
38101: LD_INT 1
38103: NEG
38104: PUSH
38105: LD_INT 1
38107: NEG
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 1
38115: NEG
38116: PUSH
38117: LD_INT 2
38119: NEG
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PUSH
38125: LD_INT 0
38127: PUSH
38128: LD_INT 2
38130: NEG
38131: PUSH
38132: EMPTY
38133: LIST
38134: LIST
38135: PUSH
38136: LD_INT 1
38138: PUSH
38139: LD_INT 1
38141: NEG
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: LD_INT 2
38149: PUSH
38150: LD_INT 0
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: PUSH
38157: LD_INT 2
38159: PUSH
38160: LD_INT 1
38162: PUSH
38163: EMPTY
38164: LIST
38165: LIST
38166: PUSH
38167: LD_INT 2
38169: PUSH
38170: LD_INT 2
38172: PUSH
38173: EMPTY
38174: LIST
38175: LIST
38176: PUSH
38177: LD_INT 1
38179: PUSH
38180: LD_INT 2
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: PUSH
38187: LD_INT 0
38189: PUSH
38190: LD_INT 2
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PUSH
38197: LD_INT 1
38199: NEG
38200: PUSH
38201: LD_INT 1
38203: PUSH
38204: EMPTY
38205: LIST
38206: LIST
38207: PUSH
38208: LD_INT 2
38210: NEG
38211: PUSH
38212: LD_INT 0
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: PUSH
38219: LD_INT 2
38221: NEG
38222: PUSH
38223: LD_INT 1
38225: NEG
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PUSH
38231: LD_INT 2
38233: NEG
38234: PUSH
38235: LD_INT 2
38237: NEG
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: LD_INT 1
38245: PUSH
38246: LD_INT 2
38248: NEG
38249: PUSH
38250: EMPTY
38251: LIST
38252: LIST
38253: PUSH
38254: LD_INT 2
38256: PUSH
38257: LD_INT 1
38259: NEG
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: PUSH
38265: LD_INT 3
38267: PUSH
38268: LD_INT 1
38270: PUSH
38271: EMPTY
38272: LIST
38273: LIST
38274: PUSH
38275: LD_INT 3
38277: PUSH
38278: LD_INT 2
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: LIST
38289: LIST
38290: LIST
38291: LIST
38292: LIST
38293: LIST
38294: LIST
38295: LIST
38296: LIST
38297: LIST
38298: LIST
38299: LIST
38300: LIST
38301: LIST
38302: LIST
38303: LIST
38304: LIST
38305: LIST
38306: LIST
38307: LIST
38308: LIST
38309: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
38310: LD_ADDR_VAR 0 25
38314: PUSH
38315: LD_INT 0
38317: PUSH
38318: LD_INT 0
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: PUSH
38325: LD_INT 0
38327: PUSH
38328: LD_INT 1
38330: NEG
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: LD_INT 1
38338: PUSH
38339: LD_INT 0
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: PUSH
38346: LD_INT 1
38348: PUSH
38349: LD_INT 1
38351: PUSH
38352: EMPTY
38353: LIST
38354: LIST
38355: PUSH
38356: LD_INT 0
38358: PUSH
38359: LD_INT 1
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: PUSH
38366: LD_INT 1
38368: NEG
38369: PUSH
38370: LD_INT 0
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: PUSH
38377: LD_INT 1
38379: NEG
38380: PUSH
38381: LD_INT 1
38383: NEG
38384: PUSH
38385: EMPTY
38386: LIST
38387: LIST
38388: PUSH
38389: LD_INT 1
38391: NEG
38392: PUSH
38393: LD_INT 2
38395: NEG
38396: PUSH
38397: EMPTY
38398: LIST
38399: LIST
38400: PUSH
38401: LD_INT 0
38403: PUSH
38404: LD_INT 2
38406: NEG
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: PUSH
38412: LD_INT 1
38414: PUSH
38415: LD_INT 1
38417: NEG
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: LD_INT 2
38425: PUSH
38426: LD_INT 0
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: PUSH
38433: LD_INT 2
38435: PUSH
38436: LD_INT 1
38438: PUSH
38439: EMPTY
38440: LIST
38441: LIST
38442: PUSH
38443: LD_INT 2
38445: PUSH
38446: LD_INT 2
38448: PUSH
38449: EMPTY
38450: LIST
38451: LIST
38452: PUSH
38453: LD_INT 1
38455: PUSH
38456: LD_INT 2
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: PUSH
38463: LD_INT 0
38465: PUSH
38466: LD_INT 2
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: PUSH
38473: LD_INT 1
38475: NEG
38476: PUSH
38477: LD_INT 1
38479: PUSH
38480: EMPTY
38481: LIST
38482: LIST
38483: PUSH
38484: LD_INT 2
38486: NEG
38487: PUSH
38488: LD_INT 0
38490: PUSH
38491: EMPTY
38492: LIST
38493: LIST
38494: PUSH
38495: LD_INT 2
38497: NEG
38498: PUSH
38499: LD_INT 1
38501: NEG
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: LD_INT 2
38509: NEG
38510: PUSH
38511: LD_INT 2
38513: NEG
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 3
38521: PUSH
38522: LD_INT 1
38524: PUSH
38525: EMPTY
38526: LIST
38527: LIST
38528: PUSH
38529: LD_INT 3
38531: PUSH
38532: LD_INT 2
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: LD_INT 2
38541: PUSH
38542: LD_INT 3
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PUSH
38549: LD_INT 1
38551: PUSH
38552: LD_INT 3
38554: PUSH
38555: EMPTY
38556: LIST
38557: LIST
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: LIST
38563: LIST
38564: LIST
38565: LIST
38566: LIST
38567: LIST
38568: LIST
38569: LIST
38570: LIST
38571: LIST
38572: LIST
38573: LIST
38574: LIST
38575: LIST
38576: LIST
38577: LIST
38578: LIST
38579: LIST
38580: LIST
38581: LIST
38582: LIST
38583: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38584: LD_ADDR_VAR 0 26
38588: PUSH
38589: LD_INT 0
38591: PUSH
38592: LD_INT 0
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: PUSH
38599: LD_INT 0
38601: PUSH
38602: LD_INT 1
38604: NEG
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: PUSH
38610: LD_INT 1
38612: PUSH
38613: LD_INT 0
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: PUSH
38620: LD_INT 1
38622: PUSH
38623: LD_INT 1
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: PUSH
38630: LD_INT 0
38632: PUSH
38633: LD_INT 1
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: PUSH
38640: LD_INT 1
38642: NEG
38643: PUSH
38644: LD_INT 0
38646: PUSH
38647: EMPTY
38648: LIST
38649: LIST
38650: PUSH
38651: LD_INT 1
38653: NEG
38654: PUSH
38655: LD_INT 1
38657: NEG
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: LD_INT 1
38665: NEG
38666: PUSH
38667: LD_INT 2
38669: NEG
38670: PUSH
38671: EMPTY
38672: LIST
38673: LIST
38674: PUSH
38675: LD_INT 0
38677: PUSH
38678: LD_INT 2
38680: NEG
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PUSH
38686: LD_INT 1
38688: PUSH
38689: LD_INT 1
38691: NEG
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: LD_INT 2
38699: PUSH
38700: LD_INT 0
38702: PUSH
38703: EMPTY
38704: LIST
38705: LIST
38706: PUSH
38707: LD_INT 2
38709: PUSH
38710: LD_INT 1
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: PUSH
38717: LD_INT 2
38719: PUSH
38720: LD_INT 2
38722: PUSH
38723: EMPTY
38724: LIST
38725: LIST
38726: PUSH
38727: LD_INT 1
38729: PUSH
38730: LD_INT 2
38732: PUSH
38733: EMPTY
38734: LIST
38735: LIST
38736: PUSH
38737: LD_INT 0
38739: PUSH
38740: LD_INT 2
38742: PUSH
38743: EMPTY
38744: LIST
38745: LIST
38746: PUSH
38747: LD_INT 1
38749: NEG
38750: PUSH
38751: LD_INT 1
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: PUSH
38758: LD_INT 2
38760: NEG
38761: PUSH
38762: LD_INT 0
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PUSH
38769: LD_INT 2
38771: NEG
38772: PUSH
38773: LD_INT 1
38775: NEG
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 2
38783: NEG
38784: PUSH
38785: LD_INT 2
38787: NEG
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PUSH
38793: LD_INT 2
38795: PUSH
38796: LD_INT 3
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: PUSH
38803: LD_INT 1
38805: PUSH
38806: LD_INT 3
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: PUSH
38813: LD_INT 1
38815: NEG
38816: PUSH
38817: LD_INT 2
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: PUSH
38824: LD_INT 2
38826: NEG
38827: PUSH
38828: LD_INT 1
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: PUSH
38835: EMPTY
38836: LIST
38837: LIST
38838: LIST
38839: LIST
38840: LIST
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38860: LD_ADDR_VAR 0 27
38864: PUSH
38865: LD_INT 0
38867: PUSH
38868: LD_INT 0
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: LD_INT 0
38877: PUSH
38878: LD_INT 1
38880: NEG
38881: PUSH
38882: EMPTY
38883: LIST
38884: LIST
38885: PUSH
38886: LD_INT 1
38888: PUSH
38889: LD_INT 0
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PUSH
38896: LD_INT 1
38898: PUSH
38899: LD_INT 1
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: PUSH
38906: LD_INT 0
38908: PUSH
38909: LD_INT 1
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: PUSH
38916: LD_INT 1
38918: NEG
38919: PUSH
38920: LD_INT 0
38922: PUSH
38923: EMPTY
38924: LIST
38925: LIST
38926: PUSH
38927: LD_INT 1
38929: NEG
38930: PUSH
38931: LD_INT 1
38933: NEG
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PUSH
38939: LD_INT 1
38941: NEG
38942: PUSH
38943: LD_INT 2
38945: NEG
38946: PUSH
38947: EMPTY
38948: LIST
38949: LIST
38950: PUSH
38951: LD_INT 0
38953: PUSH
38954: LD_INT 2
38956: NEG
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: LD_INT 1
38964: PUSH
38965: LD_INT 1
38967: NEG
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: LD_INT 2
38975: PUSH
38976: LD_INT 0
38978: PUSH
38979: EMPTY
38980: LIST
38981: LIST
38982: PUSH
38983: LD_INT 2
38985: PUSH
38986: LD_INT 1
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 2
38995: PUSH
38996: LD_INT 2
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 1
39005: PUSH
39006: LD_INT 2
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PUSH
39013: LD_INT 0
39015: PUSH
39016: LD_INT 2
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: LD_INT 1
39025: NEG
39026: PUSH
39027: LD_INT 1
39029: PUSH
39030: EMPTY
39031: LIST
39032: LIST
39033: PUSH
39034: LD_INT 2
39036: NEG
39037: PUSH
39038: LD_INT 0
39040: PUSH
39041: EMPTY
39042: LIST
39043: LIST
39044: PUSH
39045: LD_INT 2
39047: NEG
39048: PUSH
39049: LD_INT 1
39051: NEG
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 2
39059: NEG
39060: PUSH
39061: LD_INT 2
39063: NEG
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 1
39071: NEG
39072: PUSH
39073: LD_INT 2
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: LD_INT 2
39082: NEG
39083: PUSH
39084: LD_INT 1
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: PUSH
39091: LD_INT 3
39093: NEG
39094: PUSH
39095: LD_INT 1
39097: NEG
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PUSH
39103: LD_INT 3
39105: NEG
39106: PUSH
39107: LD_INT 2
39109: NEG
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39140: LD_ADDR_VAR 0 28
39144: PUSH
39145: LD_INT 0
39147: PUSH
39148: LD_INT 0
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: PUSH
39155: LD_INT 0
39157: PUSH
39158: LD_INT 1
39160: NEG
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: PUSH
39166: LD_INT 1
39168: PUSH
39169: LD_INT 0
39171: PUSH
39172: EMPTY
39173: LIST
39174: LIST
39175: PUSH
39176: LD_INT 1
39178: PUSH
39179: LD_INT 1
39181: PUSH
39182: EMPTY
39183: LIST
39184: LIST
39185: PUSH
39186: LD_INT 0
39188: PUSH
39189: LD_INT 1
39191: PUSH
39192: EMPTY
39193: LIST
39194: LIST
39195: PUSH
39196: LD_INT 1
39198: NEG
39199: PUSH
39200: LD_INT 0
39202: PUSH
39203: EMPTY
39204: LIST
39205: LIST
39206: PUSH
39207: LD_INT 1
39209: NEG
39210: PUSH
39211: LD_INT 1
39213: NEG
39214: PUSH
39215: EMPTY
39216: LIST
39217: LIST
39218: PUSH
39219: LD_INT 1
39221: NEG
39222: PUSH
39223: LD_INT 2
39225: NEG
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: PUSH
39231: LD_INT 0
39233: PUSH
39234: LD_INT 2
39236: NEG
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: PUSH
39242: LD_INT 1
39244: PUSH
39245: LD_INT 1
39247: NEG
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 2
39255: PUSH
39256: LD_INT 0
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: LD_INT 2
39265: PUSH
39266: LD_INT 1
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: LD_INT 2
39275: PUSH
39276: LD_INT 2
39278: PUSH
39279: EMPTY
39280: LIST
39281: LIST
39282: PUSH
39283: LD_INT 1
39285: PUSH
39286: LD_INT 2
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: PUSH
39293: LD_INT 0
39295: PUSH
39296: LD_INT 2
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: PUSH
39303: LD_INT 1
39305: NEG
39306: PUSH
39307: LD_INT 1
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: PUSH
39314: LD_INT 2
39316: NEG
39317: PUSH
39318: LD_INT 0
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 2
39327: NEG
39328: PUSH
39329: LD_INT 1
39331: NEG
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: LD_INT 2
39339: NEG
39340: PUSH
39341: LD_INT 2
39343: NEG
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 2
39351: NEG
39352: PUSH
39353: LD_INT 3
39355: NEG
39356: PUSH
39357: EMPTY
39358: LIST
39359: LIST
39360: PUSH
39361: LD_INT 1
39363: NEG
39364: PUSH
39365: LD_INT 3
39367: NEG
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: PUSH
39373: LD_INT 3
39375: NEG
39376: PUSH
39377: LD_INT 1
39379: NEG
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: PUSH
39385: LD_INT 3
39387: NEG
39388: PUSH
39389: LD_INT 2
39391: NEG
39392: PUSH
39393: EMPTY
39394: LIST
39395: LIST
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: LIST
39401: LIST
39402: LIST
39403: LIST
39404: LIST
39405: LIST
39406: LIST
39407: LIST
39408: LIST
39409: LIST
39410: LIST
39411: LIST
39412: LIST
39413: LIST
39414: LIST
39415: LIST
39416: LIST
39417: LIST
39418: LIST
39419: LIST
39420: LIST
39421: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39422: LD_ADDR_VAR 0 29
39426: PUSH
39427: LD_INT 0
39429: PUSH
39430: LD_INT 0
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 0
39439: PUSH
39440: LD_INT 1
39442: NEG
39443: PUSH
39444: EMPTY
39445: LIST
39446: LIST
39447: PUSH
39448: LD_INT 1
39450: PUSH
39451: LD_INT 0
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: PUSH
39458: LD_INT 1
39460: PUSH
39461: LD_INT 1
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: LD_INT 0
39470: PUSH
39471: LD_INT 1
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: PUSH
39478: LD_INT 1
39480: NEG
39481: PUSH
39482: LD_INT 0
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PUSH
39489: LD_INT 1
39491: NEG
39492: PUSH
39493: LD_INT 1
39495: NEG
39496: PUSH
39497: EMPTY
39498: LIST
39499: LIST
39500: PUSH
39501: LD_INT 1
39503: NEG
39504: PUSH
39505: LD_INT 2
39507: NEG
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: PUSH
39513: LD_INT 0
39515: PUSH
39516: LD_INT 2
39518: NEG
39519: PUSH
39520: EMPTY
39521: LIST
39522: LIST
39523: PUSH
39524: LD_INT 1
39526: PUSH
39527: LD_INT 1
39529: NEG
39530: PUSH
39531: EMPTY
39532: LIST
39533: LIST
39534: PUSH
39535: LD_INT 2
39537: PUSH
39538: LD_INT 0
39540: PUSH
39541: EMPTY
39542: LIST
39543: LIST
39544: PUSH
39545: LD_INT 2
39547: PUSH
39548: LD_INT 1
39550: PUSH
39551: EMPTY
39552: LIST
39553: LIST
39554: PUSH
39555: LD_INT 1
39557: PUSH
39558: LD_INT 2
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: PUSH
39565: LD_INT 0
39567: PUSH
39568: LD_INT 2
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: PUSH
39575: LD_INT 1
39577: NEG
39578: PUSH
39579: LD_INT 1
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: PUSH
39586: LD_INT 2
39588: NEG
39589: PUSH
39590: LD_INT 1
39592: NEG
39593: PUSH
39594: EMPTY
39595: LIST
39596: LIST
39597: PUSH
39598: LD_INT 2
39600: NEG
39601: PUSH
39602: LD_INT 2
39604: NEG
39605: PUSH
39606: EMPTY
39607: LIST
39608: LIST
39609: PUSH
39610: LD_INT 2
39612: NEG
39613: PUSH
39614: LD_INT 3
39616: NEG
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PUSH
39622: LD_INT 2
39624: PUSH
39625: LD_INT 1
39627: NEG
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: PUSH
39633: LD_INT 3
39635: PUSH
39636: LD_INT 1
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: PUSH
39643: LD_INT 1
39645: PUSH
39646: LD_INT 3
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: LD_INT 1
39655: NEG
39656: PUSH
39657: LD_INT 2
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: PUSH
39664: LD_INT 3
39666: NEG
39667: PUSH
39668: LD_INT 2
39670: NEG
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: LIST
39680: LIST
39681: LIST
39682: LIST
39683: LIST
39684: LIST
39685: LIST
39686: LIST
39687: LIST
39688: LIST
39689: LIST
39690: LIST
39691: LIST
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: LIST
39700: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39701: LD_ADDR_VAR 0 30
39705: PUSH
39706: LD_INT 0
39708: PUSH
39709: LD_INT 0
39711: PUSH
39712: EMPTY
39713: LIST
39714: LIST
39715: PUSH
39716: LD_INT 0
39718: PUSH
39719: LD_INT 1
39721: NEG
39722: PUSH
39723: EMPTY
39724: LIST
39725: LIST
39726: PUSH
39727: LD_INT 1
39729: PUSH
39730: LD_INT 0
39732: PUSH
39733: EMPTY
39734: LIST
39735: LIST
39736: PUSH
39737: LD_INT 1
39739: PUSH
39740: LD_INT 1
39742: PUSH
39743: EMPTY
39744: LIST
39745: LIST
39746: PUSH
39747: LD_INT 0
39749: PUSH
39750: LD_INT 1
39752: PUSH
39753: EMPTY
39754: LIST
39755: LIST
39756: PUSH
39757: LD_INT 1
39759: NEG
39760: PUSH
39761: LD_INT 0
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 1
39770: NEG
39771: PUSH
39772: LD_INT 1
39774: NEG
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: PUSH
39780: LD_INT 1
39782: NEG
39783: PUSH
39784: LD_INT 2
39786: NEG
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 0
39794: PUSH
39795: LD_INT 2
39797: NEG
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: LD_INT 1
39805: PUSH
39806: LD_INT 1
39808: NEG
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: LD_INT 2
39816: PUSH
39817: LD_INT 0
39819: PUSH
39820: EMPTY
39821: LIST
39822: LIST
39823: PUSH
39824: LD_INT 2
39826: PUSH
39827: LD_INT 1
39829: PUSH
39830: EMPTY
39831: LIST
39832: LIST
39833: PUSH
39834: LD_INT 2
39836: PUSH
39837: LD_INT 2
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: PUSH
39844: LD_INT 1
39846: PUSH
39847: LD_INT 2
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: PUSH
39854: LD_INT 1
39856: NEG
39857: PUSH
39858: LD_INT 1
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: PUSH
39865: LD_INT 2
39867: NEG
39868: PUSH
39869: LD_INT 0
39871: PUSH
39872: EMPTY
39873: LIST
39874: LIST
39875: PUSH
39876: LD_INT 2
39878: NEG
39879: PUSH
39880: LD_INT 1
39882: NEG
39883: PUSH
39884: EMPTY
39885: LIST
39886: LIST
39887: PUSH
39888: LD_INT 1
39890: NEG
39891: PUSH
39892: LD_INT 3
39894: NEG
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PUSH
39900: LD_INT 1
39902: PUSH
39903: LD_INT 2
39905: NEG
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: PUSH
39911: LD_INT 3
39913: PUSH
39914: LD_INT 2
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 2
39923: PUSH
39924: LD_INT 3
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 2
39933: NEG
39934: PUSH
39935: LD_INT 1
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 3
39944: NEG
39945: PUSH
39946: LD_INT 1
39948: NEG
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39979: LD_ADDR_VAR 0 31
39983: PUSH
39984: LD_INT 0
39986: PUSH
39987: LD_INT 0
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: PUSH
39994: LD_INT 0
39996: PUSH
39997: LD_INT 1
39999: NEG
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: LD_INT 1
40007: PUSH
40008: LD_INT 0
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PUSH
40015: LD_INT 1
40017: PUSH
40018: LD_INT 1
40020: PUSH
40021: EMPTY
40022: LIST
40023: LIST
40024: PUSH
40025: LD_INT 0
40027: PUSH
40028: LD_INT 1
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: LD_INT 1
40037: NEG
40038: PUSH
40039: LD_INT 0
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: PUSH
40046: LD_INT 1
40048: NEG
40049: PUSH
40050: LD_INT 1
40052: NEG
40053: PUSH
40054: EMPTY
40055: LIST
40056: LIST
40057: PUSH
40058: LD_INT 1
40060: NEG
40061: PUSH
40062: LD_INT 2
40064: NEG
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 1
40072: PUSH
40073: LD_INT 1
40075: NEG
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PUSH
40081: LD_INT 2
40083: PUSH
40084: LD_INT 0
40086: PUSH
40087: EMPTY
40088: LIST
40089: LIST
40090: PUSH
40091: LD_INT 2
40093: PUSH
40094: LD_INT 1
40096: PUSH
40097: EMPTY
40098: LIST
40099: LIST
40100: PUSH
40101: LD_INT 2
40103: PUSH
40104: LD_INT 2
40106: PUSH
40107: EMPTY
40108: LIST
40109: LIST
40110: PUSH
40111: LD_INT 1
40113: PUSH
40114: LD_INT 2
40116: PUSH
40117: EMPTY
40118: LIST
40119: LIST
40120: PUSH
40121: LD_INT 0
40123: PUSH
40124: LD_INT 2
40126: PUSH
40127: EMPTY
40128: LIST
40129: LIST
40130: PUSH
40131: LD_INT 1
40133: NEG
40134: PUSH
40135: LD_INT 1
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 2
40144: NEG
40145: PUSH
40146: LD_INT 1
40148: NEG
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: PUSH
40154: LD_INT 2
40156: NEG
40157: PUSH
40158: LD_INT 2
40160: NEG
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: PUSH
40166: LD_INT 2
40168: NEG
40169: PUSH
40170: LD_INT 3
40172: NEG
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: LD_INT 2
40180: PUSH
40181: LD_INT 1
40183: NEG
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 3
40191: PUSH
40192: LD_INT 1
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 1
40201: PUSH
40202: LD_INT 3
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 1
40211: NEG
40212: PUSH
40213: LD_INT 2
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: LD_INT 3
40222: NEG
40223: PUSH
40224: LD_INT 2
40226: NEG
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: LIST
40236: LIST
40237: LIST
40238: LIST
40239: LIST
40240: LIST
40241: LIST
40242: LIST
40243: LIST
40244: LIST
40245: LIST
40246: LIST
40247: LIST
40248: LIST
40249: LIST
40250: LIST
40251: LIST
40252: LIST
40253: LIST
40254: LIST
40255: LIST
40256: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40257: LD_ADDR_VAR 0 32
40261: PUSH
40262: LD_INT 0
40264: PUSH
40265: LD_INT 0
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 0
40274: PUSH
40275: LD_INT 1
40277: NEG
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 1
40285: PUSH
40286: LD_INT 0
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 1
40295: PUSH
40296: LD_INT 1
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 0
40305: PUSH
40306: LD_INT 1
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 1
40315: NEG
40316: PUSH
40317: LD_INT 0
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 1
40326: NEG
40327: PUSH
40328: LD_INT 1
40330: NEG
40331: PUSH
40332: EMPTY
40333: LIST
40334: LIST
40335: PUSH
40336: LD_INT 1
40338: NEG
40339: PUSH
40340: LD_INT 2
40342: NEG
40343: PUSH
40344: EMPTY
40345: LIST
40346: LIST
40347: PUSH
40348: LD_INT 0
40350: PUSH
40351: LD_INT 2
40353: NEG
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 1
40361: PUSH
40362: LD_INT 1
40364: NEG
40365: PUSH
40366: EMPTY
40367: LIST
40368: LIST
40369: PUSH
40370: LD_INT 2
40372: PUSH
40373: LD_INT 1
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: LD_INT 2
40382: PUSH
40383: LD_INT 2
40385: PUSH
40386: EMPTY
40387: LIST
40388: LIST
40389: PUSH
40390: LD_INT 1
40392: PUSH
40393: LD_INT 2
40395: PUSH
40396: EMPTY
40397: LIST
40398: LIST
40399: PUSH
40400: LD_INT 0
40402: PUSH
40403: LD_INT 2
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: LD_INT 1
40412: NEG
40413: PUSH
40414: LD_INT 1
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: PUSH
40421: LD_INT 2
40423: NEG
40424: PUSH
40425: LD_INT 0
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: PUSH
40432: LD_INT 2
40434: NEG
40435: PUSH
40436: LD_INT 1
40438: NEG
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: LD_INT 1
40446: NEG
40447: PUSH
40448: LD_INT 3
40450: NEG
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 1
40458: PUSH
40459: LD_INT 2
40461: NEG
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 3
40469: PUSH
40470: LD_INT 2
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 2
40479: PUSH
40480: LD_INT 3
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: LD_INT 2
40489: NEG
40490: PUSH
40491: LD_INT 1
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 3
40500: NEG
40501: PUSH
40502: LD_INT 1
40504: NEG
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: LIST
40514: LIST
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: LIST
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: LIST
40533: LIST
40534: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40535: LD_ADDR_VAR 0 33
40539: PUSH
40540: LD_INT 0
40542: PUSH
40543: LD_INT 0
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: LD_INT 0
40552: PUSH
40553: LD_INT 1
40555: NEG
40556: PUSH
40557: EMPTY
40558: LIST
40559: LIST
40560: PUSH
40561: LD_INT 1
40563: PUSH
40564: LD_INT 0
40566: PUSH
40567: EMPTY
40568: LIST
40569: LIST
40570: PUSH
40571: LD_INT 1
40573: PUSH
40574: LD_INT 1
40576: PUSH
40577: EMPTY
40578: LIST
40579: LIST
40580: PUSH
40581: LD_INT 0
40583: PUSH
40584: LD_INT 1
40586: PUSH
40587: EMPTY
40588: LIST
40589: LIST
40590: PUSH
40591: LD_INT 1
40593: NEG
40594: PUSH
40595: LD_INT 0
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: PUSH
40602: LD_INT 1
40604: NEG
40605: PUSH
40606: LD_INT 1
40608: NEG
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: PUSH
40614: LD_INT 1
40616: NEG
40617: PUSH
40618: LD_INT 2
40620: NEG
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: PUSH
40626: LD_INT 1
40628: PUSH
40629: LD_INT 1
40631: NEG
40632: PUSH
40633: EMPTY
40634: LIST
40635: LIST
40636: PUSH
40637: LD_INT 2
40639: PUSH
40640: LD_INT 0
40642: PUSH
40643: EMPTY
40644: LIST
40645: LIST
40646: PUSH
40647: LD_INT 2
40649: PUSH
40650: LD_INT 1
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 1
40659: PUSH
40660: LD_INT 2
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: LD_INT 0
40669: PUSH
40670: LD_INT 2
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 1
40679: NEG
40680: PUSH
40681: LD_INT 1
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 2
40690: NEG
40691: PUSH
40692: LD_INT 0
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: LD_INT 2
40701: NEG
40702: PUSH
40703: LD_INT 1
40705: NEG
40706: PUSH
40707: EMPTY
40708: LIST
40709: LIST
40710: PUSH
40711: LD_INT 2
40713: NEG
40714: PUSH
40715: LD_INT 2
40717: NEG
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: LD_INT 2
40725: NEG
40726: PUSH
40727: LD_INT 3
40729: NEG
40730: PUSH
40731: EMPTY
40732: LIST
40733: LIST
40734: PUSH
40735: LD_INT 2
40737: PUSH
40738: LD_INT 1
40740: NEG
40741: PUSH
40742: EMPTY
40743: LIST
40744: LIST
40745: PUSH
40746: LD_INT 3
40748: PUSH
40749: LD_INT 1
40751: PUSH
40752: EMPTY
40753: LIST
40754: LIST
40755: PUSH
40756: LD_INT 1
40758: PUSH
40759: LD_INT 3
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PUSH
40766: LD_INT 1
40768: NEG
40769: PUSH
40770: LD_INT 2
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PUSH
40777: LD_INT 3
40779: NEG
40780: PUSH
40781: LD_INT 2
40783: NEG
40784: PUSH
40785: EMPTY
40786: LIST
40787: LIST
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: LIST
40796: LIST
40797: LIST
40798: LIST
40799: LIST
40800: LIST
40801: LIST
40802: LIST
40803: LIST
40804: LIST
40805: LIST
40806: LIST
40807: LIST
40808: LIST
40809: LIST
40810: LIST
40811: LIST
40812: LIST
40813: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40814: LD_ADDR_VAR 0 34
40818: PUSH
40819: LD_INT 0
40821: PUSH
40822: LD_INT 0
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: PUSH
40829: LD_INT 0
40831: PUSH
40832: LD_INT 1
40834: NEG
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 1
40842: PUSH
40843: LD_INT 0
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 1
40852: PUSH
40853: LD_INT 1
40855: PUSH
40856: EMPTY
40857: LIST
40858: LIST
40859: PUSH
40860: LD_INT 0
40862: PUSH
40863: LD_INT 1
40865: PUSH
40866: EMPTY
40867: LIST
40868: LIST
40869: PUSH
40870: LD_INT 1
40872: NEG
40873: PUSH
40874: LD_INT 0
40876: PUSH
40877: EMPTY
40878: LIST
40879: LIST
40880: PUSH
40881: LD_INT 1
40883: NEG
40884: PUSH
40885: LD_INT 1
40887: NEG
40888: PUSH
40889: EMPTY
40890: LIST
40891: LIST
40892: PUSH
40893: LD_INT 1
40895: NEG
40896: PUSH
40897: LD_INT 2
40899: NEG
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: PUSH
40905: LD_INT 0
40907: PUSH
40908: LD_INT 2
40910: NEG
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: PUSH
40916: LD_INT 1
40918: PUSH
40919: LD_INT 1
40921: NEG
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 2
40929: PUSH
40930: LD_INT 1
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 2
40939: PUSH
40940: LD_INT 2
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 1
40949: PUSH
40950: LD_INT 2
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 1
40959: NEG
40960: PUSH
40961: LD_INT 1
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 2
40970: NEG
40971: PUSH
40972: LD_INT 0
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 2
40981: NEG
40982: PUSH
40983: LD_INT 1
40985: NEG
40986: PUSH
40987: EMPTY
40988: LIST
40989: LIST
40990: PUSH
40991: LD_INT 2
40993: NEG
40994: PUSH
40995: LD_INT 2
40997: NEG
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 1
41005: NEG
41006: PUSH
41007: LD_INT 3
41009: NEG
41010: PUSH
41011: EMPTY
41012: LIST
41013: LIST
41014: PUSH
41015: LD_INT 1
41017: PUSH
41018: LD_INT 2
41020: NEG
41021: PUSH
41022: EMPTY
41023: LIST
41024: LIST
41025: PUSH
41026: LD_INT 3
41028: PUSH
41029: LD_INT 2
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: LD_INT 2
41038: PUSH
41039: LD_INT 3
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: LD_INT 2
41048: NEG
41049: PUSH
41050: LD_INT 1
41052: PUSH
41053: EMPTY
41054: LIST
41055: LIST
41056: PUSH
41057: LD_INT 3
41059: NEG
41060: PUSH
41061: LD_INT 1
41063: NEG
41064: PUSH
41065: EMPTY
41066: LIST
41067: LIST
41068: PUSH
41069: EMPTY
41070: LIST
41071: LIST
41072: LIST
41073: LIST
41074: LIST
41075: LIST
41076: LIST
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: LIST
41086: LIST
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: LIST
41092: LIST
41093: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41094: LD_ADDR_VAR 0 35
41098: PUSH
41099: LD_INT 0
41101: PUSH
41102: LD_INT 0
41104: PUSH
41105: EMPTY
41106: LIST
41107: LIST
41108: PUSH
41109: LD_INT 0
41111: PUSH
41112: LD_INT 1
41114: NEG
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: PUSH
41120: LD_INT 1
41122: PUSH
41123: LD_INT 0
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: PUSH
41130: LD_INT 1
41132: PUSH
41133: LD_INT 1
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 0
41142: PUSH
41143: LD_INT 1
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PUSH
41150: LD_INT 1
41152: NEG
41153: PUSH
41154: LD_INT 0
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 1
41163: NEG
41164: PUSH
41165: LD_INT 1
41167: NEG
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: LD_INT 2
41175: PUSH
41176: LD_INT 1
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: LD_INT 2
41185: NEG
41186: PUSH
41187: LD_INT 1
41189: NEG
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: EMPTY
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41206: LD_ADDR_VAR 0 36
41210: PUSH
41211: LD_INT 0
41213: PUSH
41214: LD_INT 0
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: LD_INT 0
41223: PUSH
41224: LD_INT 1
41226: NEG
41227: PUSH
41228: EMPTY
41229: LIST
41230: LIST
41231: PUSH
41232: LD_INT 1
41234: PUSH
41235: LD_INT 0
41237: PUSH
41238: EMPTY
41239: LIST
41240: LIST
41241: PUSH
41242: LD_INT 1
41244: PUSH
41245: LD_INT 1
41247: PUSH
41248: EMPTY
41249: LIST
41250: LIST
41251: PUSH
41252: LD_INT 0
41254: PUSH
41255: LD_INT 1
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: LD_INT 1
41264: NEG
41265: PUSH
41266: LD_INT 0
41268: PUSH
41269: EMPTY
41270: LIST
41271: LIST
41272: PUSH
41273: LD_INT 1
41275: NEG
41276: PUSH
41277: LD_INT 1
41279: NEG
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 1
41287: NEG
41288: PUSH
41289: LD_INT 2
41291: NEG
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 1
41299: PUSH
41300: LD_INT 2
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: EMPTY
41308: LIST
41309: LIST
41310: LIST
41311: LIST
41312: LIST
41313: LIST
41314: LIST
41315: LIST
41316: LIST
41317: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41318: LD_ADDR_VAR 0 37
41322: PUSH
41323: LD_INT 0
41325: PUSH
41326: LD_INT 0
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: PUSH
41333: LD_INT 0
41335: PUSH
41336: LD_INT 1
41338: NEG
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: PUSH
41344: LD_INT 1
41346: PUSH
41347: LD_INT 0
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: LD_INT 1
41356: PUSH
41357: LD_INT 1
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 0
41366: PUSH
41367: LD_INT 1
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 1
41376: NEG
41377: PUSH
41378: LD_INT 0
41380: PUSH
41381: EMPTY
41382: LIST
41383: LIST
41384: PUSH
41385: LD_INT 1
41387: NEG
41388: PUSH
41389: LD_INT 1
41391: NEG
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: LD_INT 1
41399: PUSH
41400: LD_INT 1
41402: NEG
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: PUSH
41408: LD_INT 1
41410: NEG
41411: PUSH
41412: LD_INT 1
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: EMPTY
41420: LIST
41421: LIST
41422: LIST
41423: LIST
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41430: LD_ADDR_VAR 0 38
41434: PUSH
41435: LD_INT 0
41437: PUSH
41438: LD_INT 0
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: PUSH
41445: LD_INT 0
41447: PUSH
41448: LD_INT 1
41450: NEG
41451: PUSH
41452: EMPTY
41453: LIST
41454: LIST
41455: PUSH
41456: LD_INT 1
41458: PUSH
41459: LD_INT 0
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: LD_INT 1
41468: PUSH
41469: LD_INT 1
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: LD_INT 0
41478: PUSH
41479: LD_INT 1
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 1
41488: NEG
41489: PUSH
41490: LD_INT 0
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: PUSH
41497: LD_INT 1
41499: NEG
41500: PUSH
41501: LD_INT 1
41503: NEG
41504: PUSH
41505: EMPTY
41506: LIST
41507: LIST
41508: PUSH
41509: LD_INT 2
41511: PUSH
41512: LD_INT 1
41514: PUSH
41515: EMPTY
41516: LIST
41517: LIST
41518: PUSH
41519: LD_INT 2
41521: NEG
41522: PUSH
41523: LD_INT 1
41525: NEG
41526: PUSH
41527: EMPTY
41528: LIST
41529: LIST
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41542: LD_ADDR_VAR 0 39
41546: PUSH
41547: LD_INT 0
41549: PUSH
41550: LD_INT 0
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PUSH
41557: LD_INT 0
41559: PUSH
41560: LD_INT 1
41562: NEG
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 1
41570: PUSH
41571: LD_INT 0
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: PUSH
41578: LD_INT 1
41580: PUSH
41581: LD_INT 1
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: PUSH
41588: LD_INT 0
41590: PUSH
41591: LD_INT 1
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: PUSH
41598: LD_INT 1
41600: NEG
41601: PUSH
41602: LD_INT 0
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: PUSH
41609: LD_INT 1
41611: NEG
41612: PUSH
41613: LD_INT 1
41615: NEG
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PUSH
41621: LD_INT 1
41623: NEG
41624: PUSH
41625: LD_INT 2
41627: NEG
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PUSH
41633: LD_INT 1
41635: PUSH
41636: LD_INT 2
41638: PUSH
41639: EMPTY
41640: LIST
41641: LIST
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: LIST
41653: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41654: LD_ADDR_VAR 0 40
41658: PUSH
41659: LD_INT 0
41661: PUSH
41662: LD_INT 0
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: LD_INT 0
41671: PUSH
41672: LD_INT 1
41674: NEG
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: LD_INT 1
41682: PUSH
41683: LD_INT 0
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PUSH
41690: LD_INT 1
41692: PUSH
41693: LD_INT 1
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 0
41702: PUSH
41703: LD_INT 1
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: LD_INT 1
41712: NEG
41713: PUSH
41714: LD_INT 0
41716: PUSH
41717: EMPTY
41718: LIST
41719: LIST
41720: PUSH
41721: LD_INT 1
41723: NEG
41724: PUSH
41725: LD_INT 1
41727: NEG
41728: PUSH
41729: EMPTY
41730: LIST
41731: LIST
41732: PUSH
41733: LD_INT 1
41735: PUSH
41736: LD_INT 1
41738: NEG
41739: PUSH
41740: EMPTY
41741: LIST
41742: LIST
41743: PUSH
41744: LD_INT 1
41746: NEG
41747: PUSH
41748: LD_INT 1
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: PUSH
41755: EMPTY
41756: LIST
41757: LIST
41758: LIST
41759: LIST
41760: LIST
41761: LIST
41762: LIST
41763: LIST
41764: LIST
41765: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41766: LD_ADDR_VAR 0 41
41770: PUSH
41771: LD_INT 0
41773: PUSH
41774: LD_INT 0
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 0
41783: PUSH
41784: LD_INT 1
41786: NEG
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 1
41794: PUSH
41795: LD_INT 0
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 1
41804: PUSH
41805: LD_INT 1
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 0
41814: PUSH
41815: LD_INT 1
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 1
41824: NEG
41825: PUSH
41826: LD_INT 0
41828: PUSH
41829: EMPTY
41830: LIST
41831: LIST
41832: PUSH
41833: LD_INT 1
41835: NEG
41836: PUSH
41837: LD_INT 1
41839: NEG
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: PUSH
41845: LD_INT 1
41847: NEG
41848: PUSH
41849: LD_INT 2
41851: NEG
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 1
41859: PUSH
41860: LD_INT 1
41862: NEG
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 2
41870: PUSH
41871: LD_INT 0
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: LD_INT 2
41880: PUSH
41881: LD_INT 1
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 2
41890: PUSH
41891: LD_INT 2
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 1
41900: PUSH
41901: LD_INT 2
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 1
41910: NEG
41911: PUSH
41912: LD_INT 1
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 2
41921: NEG
41922: PUSH
41923: LD_INT 0
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 2
41932: NEG
41933: PUSH
41934: LD_INT 1
41936: NEG
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: PUSH
41942: LD_INT 2
41944: NEG
41945: PUSH
41946: LD_INT 2
41948: NEG
41949: PUSH
41950: EMPTY
41951: LIST
41952: LIST
41953: PUSH
41954: LD_INT 2
41956: NEG
41957: PUSH
41958: LD_INT 3
41960: NEG
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 2
41968: PUSH
41969: LD_INT 1
41971: NEG
41972: PUSH
41973: EMPTY
41974: LIST
41975: LIST
41976: PUSH
41977: LD_INT 3
41979: PUSH
41980: LD_INT 0
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 3
41989: PUSH
41990: LD_INT 1
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 3
41999: PUSH
42000: LD_INT 2
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 3
42009: PUSH
42010: LD_INT 3
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 2
42019: PUSH
42020: LD_INT 3
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 2
42029: NEG
42030: PUSH
42031: LD_INT 1
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 3
42040: NEG
42041: PUSH
42042: LD_INT 0
42044: PUSH
42045: EMPTY
42046: LIST
42047: LIST
42048: PUSH
42049: LD_INT 3
42051: NEG
42052: PUSH
42053: LD_INT 1
42055: NEG
42056: PUSH
42057: EMPTY
42058: LIST
42059: LIST
42060: PUSH
42061: LD_INT 3
42063: NEG
42064: PUSH
42065: LD_INT 2
42067: NEG
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 3
42075: NEG
42076: PUSH
42077: LD_INT 3
42079: NEG
42080: PUSH
42081: EMPTY
42082: LIST
42083: LIST
42084: PUSH
42085: EMPTY
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42116: LD_ADDR_VAR 0 42
42120: PUSH
42121: LD_INT 0
42123: PUSH
42124: LD_INT 0
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: PUSH
42131: LD_INT 0
42133: PUSH
42134: LD_INT 1
42136: NEG
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: PUSH
42142: LD_INT 1
42144: PUSH
42145: LD_INT 0
42147: PUSH
42148: EMPTY
42149: LIST
42150: LIST
42151: PUSH
42152: LD_INT 1
42154: PUSH
42155: LD_INT 1
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: PUSH
42162: LD_INT 0
42164: PUSH
42165: LD_INT 1
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: LD_INT 1
42174: NEG
42175: PUSH
42176: LD_INT 0
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: PUSH
42183: LD_INT 1
42185: NEG
42186: PUSH
42187: LD_INT 1
42189: NEG
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: PUSH
42195: LD_INT 1
42197: NEG
42198: PUSH
42199: LD_INT 2
42201: NEG
42202: PUSH
42203: EMPTY
42204: LIST
42205: LIST
42206: PUSH
42207: LD_INT 0
42209: PUSH
42210: LD_INT 2
42212: NEG
42213: PUSH
42214: EMPTY
42215: LIST
42216: LIST
42217: PUSH
42218: LD_INT 1
42220: PUSH
42221: LD_INT 1
42223: NEG
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 2
42231: PUSH
42232: LD_INT 1
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: LD_INT 2
42241: PUSH
42242: LD_INT 2
42244: PUSH
42245: EMPTY
42246: LIST
42247: LIST
42248: PUSH
42249: LD_INT 1
42251: PUSH
42252: LD_INT 2
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PUSH
42259: LD_INT 0
42261: PUSH
42262: LD_INT 2
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: LD_INT 1
42271: NEG
42272: PUSH
42273: LD_INT 1
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 2
42282: NEG
42283: PUSH
42284: LD_INT 1
42286: NEG
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 2
42294: NEG
42295: PUSH
42296: LD_INT 2
42298: NEG
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 2
42306: NEG
42307: PUSH
42308: LD_INT 3
42310: NEG
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 1
42318: NEG
42319: PUSH
42320: LD_INT 3
42322: NEG
42323: PUSH
42324: EMPTY
42325: LIST
42326: LIST
42327: PUSH
42328: LD_INT 0
42330: PUSH
42331: LD_INT 3
42333: NEG
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: LD_INT 1
42341: PUSH
42342: LD_INT 2
42344: NEG
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 3
42352: PUSH
42353: LD_INT 2
42355: PUSH
42356: EMPTY
42357: LIST
42358: LIST
42359: PUSH
42360: LD_INT 3
42362: PUSH
42363: LD_INT 3
42365: PUSH
42366: EMPTY
42367: LIST
42368: LIST
42369: PUSH
42370: LD_INT 2
42372: PUSH
42373: LD_INT 3
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 1
42382: PUSH
42383: LD_INT 3
42385: PUSH
42386: EMPTY
42387: LIST
42388: LIST
42389: PUSH
42390: LD_INT 0
42392: PUSH
42393: LD_INT 3
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 1
42402: NEG
42403: PUSH
42404: LD_INT 2
42406: PUSH
42407: EMPTY
42408: LIST
42409: LIST
42410: PUSH
42411: LD_INT 3
42413: NEG
42414: PUSH
42415: LD_INT 2
42417: NEG
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 3
42425: NEG
42426: PUSH
42427: LD_INT 3
42429: NEG
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: LIST
42439: LIST
42440: LIST
42441: LIST
42442: LIST
42443: LIST
42444: LIST
42445: LIST
42446: LIST
42447: LIST
42448: LIST
42449: LIST
42450: LIST
42451: LIST
42452: LIST
42453: LIST
42454: LIST
42455: LIST
42456: LIST
42457: LIST
42458: LIST
42459: LIST
42460: LIST
42461: LIST
42462: LIST
42463: LIST
42464: LIST
42465: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42466: LD_ADDR_VAR 0 43
42470: PUSH
42471: LD_INT 0
42473: PUSH
42474: LD_INT 0
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: LD_INT 0
42483: PUSH
42484: LD_INT 1
42486: NEG
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: LD_INT 1
42494: PUSH
42495: LD_INT 0
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 1
42504: PUSH
42505: LD_INT 1
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: LD_INT 0
42514: PUSH
42515: LD_INT 1
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 1
42524: NEG
42525: PUSH
42526: LD_INT 0
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: LD_INT 1
42535: NEG
42536: PUSH
42537: LD_INT 1
42539: NEG
42540: PUSH
42541: EMPTY
42542: LIST
42543: LIST
42544: PUSH
42545: LD_INT 1
42547: NEG
42548: PUSH
42549: LD_INT 2
42551: NEG
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 0
42559: PUSH
42560: LD_INT 2
42562: NEG
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PUSH
42568: LD_INT 1
42570: PUSH
42571: LD_INT 1
42573: NEG
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 2
42581: PUSH
42582: LD_INT 0
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: PUSH
42589: LD_INT 2
42591: PUSH
42592: LD_INT 1
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: LD_INT 1
42601: PUSH
42602: LD_INT 2
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 0
42611: PUSH
42612: LD_INT 2
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 1
42621: NEG
42622: PUSH
42623: LD_INT 1
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 2
42632: NEG
42633: PUSH
42634: LD_INT 0
42636: PUSH
42637: EMPTY
42638: LIST
42639: LIST
42640: PUSH
42641: LD_INT 2
42643: NEG
42644: PUSH
42645: LD_INT 1
42647: NEG
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: PUSH
42653: LD_INT 1
42655: NEG
42656: PUSH
42657: LD_INT 3
42659: NEG
42660: PUSH
42661: EMPTY
42662: LIST
42663: LIST
42664: PUSH
42665: LD_INT 0
42667: PUSH
42668: LD_INT 3
42670: NEG
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: PUSH
42676: LD_INT 1
42678: PUSH
42679: LD_INT 2
42681: NEG
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 2
42689: PUSH
42690: LD_INT 1
42692: NEG
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 3
42700: PUSH
42701: LD_INT 0
42703: PUSH
42704: EMPTY
42705: LIST
42706: LIST
42707: PUSH
42708: LD_INT 3
42710: PUSH
42711: LD_INT 1
42713: PUSH
42714: EMPTY
42715: LIST
42716: LIST
42717: PUSH
42718: LD_INT 1
42720: PUSH
42721: LD_INT 3
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: LD_INT 0
42730: PUSH
42731: LD_INT 3
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: LD_INT 1
42740: NEG
42741: PUSH
42742: LD_INT 2
42744: PUSH
42745: EMPTY
42746: LIST
42747: LIST
42748: PUSH
42749: LD_INT 2
42751: NEG
42752: PUSH
42753: LD_INT 1
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 3
42762: NEG
42763: PUSH
42764: LD_INT 0
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 3
42773: NEG
42774: PUSH
42775: LD_INT 1
42777: NEG
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: LIST
42796: LIST
42797: LIST
42798: LIST
42799: LIST
42800: LIST
42801: LIST
42802: LIST
42803: LIST
42804: LIST
42805: LIST
42806: LIST
42807: LIST
42808: LIST
42809: LIST
42810: LIST
42811: LIST
42812: LIST
42813: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42814: LD_ADDR_VAR 0 44
42818: PUSH
42819: LD_INT 0
42821: PUSH
42822: LD_INT 0
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: LD_INT 0
42831: PUSH
42832: LD_INT 1
42834: NEG
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: LD_INT 1
42842: PUSH
42843: LD_INT 0
42845: PUSH
42846: EMPTY
42847: LIST
42848: LIST
42849: PUSH
42850: LD_INT 1
42852: PUSH
42853: LD_INT 1
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 0
42862: PUSH
42863: LD_INT 1
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: LD_INT 1
42872: NEG
42873: PUSH
42874: LD_INT 0
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PUSH
42881: LD_INT 1
42883: NEG
42884: PUSH
42885: LD_INT 1
42887: NEG
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: PUSH
42893: LD_INT 1
42895: NEG
42896: PUSH
42897: LD_INT 2
42899: NEG
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: LD_INT 1
42907: PUSH
42908: LD_INT 1
42910: NEG
42911: PUSH
42912: EMPTY
42913: LIST
42914: LIST
42915: PUSH
42916: LD_INT 2
42918: PUSH
42919: LD_INT 0
42921: PUSH
42922: EMPTY
42923: LIST
42924: LIST
42925: PUSH
42926: LD_INT 2
42928: PUSH
42929: LD_INT 1
42931: PUSH
42932: EMPTY
42933: LIST
42934: LIST
42935: PUSH
42936: LD_INT 2
42938: PUSH
42939: LD_INT 2
42941: PUSH
42942: EMPTY
42943: LIST
42944: LIST
42945: PUSH
42946: LD_INT 1
42948: PUSH
42949: LD_INT 2
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: LD_INT 1
42958: NEG
42959: PUSH
42960: LD_INT 1
42962: PUSH
42963: EMPTY
42964: LIST
42965: LIST
42966: PUSH
42967: LD_INT 2
42969: NEG
42970: PUSH
42971: LD_INT 0
42973: PUSH
42974: EMPTY
42975: LIST
42976: LIST
42977: PUSH
42978: LD_INT 2
42980: NEG
42981: PUSH
42982: LD_INT 1
42984: NEG
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 2
42992: NEG
42993: PUSH
42994: LD_INT 2
42996: NEG
42997: PUSH
42998: EMPTY
42999: LIST
43000: LIST
43001: PUSH
43002: LD_INT 2
43004: NEG
43005: PUSH
43006: LD_INT 3
43008: NEG
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 2
43016: PUSH
43017: LD_INT 1
43019: NEG
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 3
43027: PUSH
43028: LD_INT 0
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 3
43037: PUSH
43038: LD_INT 1
43040: PUSH
43041: EMPTY
43042: LIST
43043: LIST
43044: PUSH
43045: LD_INT 3
43047: PUSH
43048: LD_INT 2
43050: PUSH
43051: EMPTY
43052: LIST
43053: LIST
43054: PUSH
43055: LD_INT 3
43057: PUSH
43058: LD_INT 3
43060: PUSH
43061: EMPTY
43062: LIST
43063: LIST
43064: PUSH
43065: LD_INT 2
43067: PUSH
43068: LD_INT 3
43070: PUSH
43071: EMPTY
43072: LIST
43073: LIST
43074: PUSH
43075: LD_INT 2
43077: NEG
43078: PUSH
43079: LD_INT 1
43081: PUSH
43082: EMPTY
43083: LIST
43084: LIST
43085: PUSH
43086: LD_INT 3
43088: NEG
43089: PUSH
43090: LD_INT 0
43092: PUSH
43093: EMPTY
43094: LIST
43095: LIST
43096: PUSH
43097: LD_INT 3
43099: NEG
43100: PUSH
43101: LD_INT 1
43103: NEG
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 3
43111: NEG
43112: PUSH
43113: LD_INT 2
43115: NEG
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 3
43123: NEG
43124: PUSH
43125: LD_INT 3
43127: NEG
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: LIST
43137: LIST
43138: LIST
43139: LIST
43140: LIST
43141: LIST
43142: LIST
43143: LIST
43144: LIST
43145: LIST
43146: LIST
43147: LIST
43148: LIST
43149: LIST
43150: LIST
43151: LIST
43152: LIST
43153: LIST
43154: LIST
43155: LIST
43156: LIST
43157: LIST
43158: LIST
43159: LIST
43160: LIST
43161: LIST
43162: LIST
43163: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43164: LD_ADDR_VAR 0 45
43168: PUSH
43169: LD_INT 0
43171: PUSH
43172: LD_INT 0
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: LD_INT 0
43181: PUSH
43182: LD_INT 1
43184: NEG
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 1
43192: PUSH
43193: LD_INT 0
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 1
43202: PUSH
43203: LD_INT 1
43205: PUSH
43206: EMPTY
43207: LIST
43208: LIST
43209: PUSH
43210: LD_INT 0
43212: PUSH
43213: LD_INT 1
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 1
43222: NEG
43223: PUSH
43224: LD_INT 0
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 1
43233: NEG
43234: PUSH
43235: LD_INT 1
43237: NEG
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 1
43245: NEG
43246: PUSH
43247: LD_INT 2
43249: NEG
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 0
43257: PUSH
43258: LD_INT 2
43260: NEG
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 1
43268: PUSH
43269: LD_INT 1
43271: NEG
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 2
43279: PUSH
43280: LD_INT 1
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: LD_INT 2
43289: PUSH
43290: LD_INT 2
43292: PUSH
43293: EMPTY
43294: LIST
43295: LIST
43296: PUSH
43297: LD_INT 1
43299: PUSH
43300: LD_INT 2
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 0
43309: PUSH
43310: LD_INT 2
43312: PUSH
43313: EMPTY
43314: LIST
43315: LIST
43316: PUSH
43317: LD_INT 1
43319: NEG
43320: PUSH
43321: LD_INT 1
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: LD_INT 2
43330: NEG
43331: PUSH
43332: LD_INT 1
43334: NEG
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 2
43342: NEG
43343: PUSH
43344: LD_INT 2
43346: NEG
43347: PUSH
43348: EMPTY
43349: LIST
43350: LIST
43351: PUSH
43352: LD_INT 2
43354: NEG
43355: PUSH
43356: LD_INT 3
43358: NEG
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: LD_INT 1
43366: NEG
43367: PUSH
43368: LD_INT 3
43370: NEG
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 0
43378: PUSH
43379: LD_INT 3
43381: NEG
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: LD_INT 1
43389: PUSH
43390: LD_INT 2
43392: NEG
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 3
43400: PUSH
43401: LD_INT 2
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: LD_INT 3
43410: PUSH
43411: LD_INT 3
43413: PUSH
43414: EMPTY
43415: LIST
43416: LIST
43417: PUSH
43418: LD_INT 2
43420: PUSH
43421: LD_INT 3
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 1
43430: PUSH
43431: LD_INT 3
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_INT 0
43440: PUSH
43441: LD_INT 3
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 1
43450: NEG
43451: PUSH
43452: LD_INT 2
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 3
43461: NEG
43462: PUSH
43463: LD_INT 2
43465: NEG
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 3
43473: NEG
43474: PUSH
43475: LD_INT 3
43477: NEG
43478: PUSH
43479: EMPTY
43480: LIST
43481: LIST
43482: PUSH
43483: EMPTY
43484: LIST
43485: LIST
43486: LIST
43487: LIST
43488: LIST
43489: LIST
43490: LIST
43491: LIST
43492: LIST
43493: LIST
43494: LIST
43495: LIST
43496: LIST
43497: LIST
43498: LIST
43499: LIST
43500: LIST
43501: LIST
43502: LIST
43503: LIST
43504: LIST
43505: LIST
43506: LIST
43507: LIST
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43514: LD_ADDR_VAR 0 46
43518: PUSH
43519: LD_INT 0
43521: PUSH
43522: LD_INT 0
43524: PUSH
43525: EMPTY
43526: LIST
43527: LIST
43528: PUSH
43529: LD_INT 0
43531: PUSH
43532: LD_INT 1
43534: NEG
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PUSH
43540: LD_INT 1
43542: PUSH
43543: LD_INT 0
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 1
43552: PUSH
43553: LD_INT 1
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 0
43562: PUSH
43563: LD_INT 1
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: LD_INT 1
43572: NEG
43573: PUSH
43574: LD_INT 0
43576: PUSH
43577: EMPTY
43578: LIST
43579: LIST
43580: PUSH
43581: LD_INT 1
43583: NEG
43584: PUSH
43585: LD_INT 1
43587: NEG
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 1
43595: NEG
43596: PUSH
43597: LD_INT 2
43599: NEG
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: PUSH
43605: LD_INT 0
43607: PUSH
43608: LD_INT 2
43610: NEG
43611: PUSH
43612: EMPTY
43613: LIST
43614: LIST
43615: PUSH
43616: LD_INT 1
43618: PUSH
43619: LD_INT 1
43621: NEG
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 2
43629: PUSH
43630: LD_INT 0
43632: PUSH
43633: EMPTY
43634: LIST
43635: LIST
43636: PUSH
43637: LD_INT 2
43639: PUSH
43640: LD_INT 1
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 1
43649: PUSH
43650: LD_INT 2
43652: PUSH
43653: EMPTY
43654: LIST
43655: LIST
43656: PUSH
43657: LD_INT 0
43659: PUSH
43660: LD_INT 2
43662: PUSH
43663: EMPTY
43664: LIST
43665: LIST
43666: PUSH
43667: LD_INT 1
43669: NEG
43670: PUSH
43671: LD_INT 1
43673: PUSH
43674: EMPTY
43675: LIST
43676: LIST
43677: PUSH
43678: LD_INT 2
43680: NEG
43681: PUSH
43682: LD_INT 0
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 2
43691: NEG
43692: PUSH
43693: LD_INT 1
43695: NEG
43696: PUSH
43697: EMPTY
43698: LIST
43699: LIST
43700: PUSH
43701: LD_INT 1
43703: NEG
43704: PUSH
43705: LD_INT 3
43707: NEG
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 0
43715: PUSH
43716: LD_INT 3
43718: NEG
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 1
43726: PUSH
43727: LD_INT 2
43729: NEG
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: LD_INT 2
43737: PUSH
43738: LD_INT 1
43740: NEG
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: LD_INT 3
43748: PUSH
43749: LD_INT 0
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 3
43758: PUSH
43759: LD_INT 1
43761: PUSH
43762: EMPTY
43763: LIST
43764: LIST
43765: PUSH
43766: LD_INT 1
43768: PUSH
43769: LD_INT 3
43771: PUSH
43772: EMPTY
43773: LIST
43774: LIST
43775: PUSH
43776: LD_INT 0
43778: PUSH
43779: LD_INT 3
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 1
43788: NEG
43789: PUSH
43790: LD_INT 2
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 2
43799: NEG
43800: PUSH
43801: LD_INT 1
43803: PUSH
43804: EMPTY
43805: LIST
43806: LIST
43807: PUSH
43808: LD_INT 3
43810: NEG
43811: PUSH
43812: LD_INT 0
43814: PUSH
43815: EMPTY
43816: LIST
43817: LIST
43818: PUSH
43819: LD_INT 3
43821: NEG
43822: PUSH
43823: LD_INT 1
43825: NEG
43826: PUSH
43827: EMPTY
43828: LIST
43829: LIST
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: LIST
43835: LIST
43836: LIST
43837: LIST
43838: LIST
43839: LIST
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: LIST
43857: LIST
43858: LIST
43859: LIST
43860: LIST
43861: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43862: LD_ADDR_VAR 0 47
43866: PUSH
43867: LD_INT 0
43869: PUSH
43870: LD_INT 0
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: PUSH
43877: LD_INT 0
43879: PUSH
43880: LD_INT 1
43882: NEG
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 1
43890: PUSH
43891: LD_INT 0
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_INT 1
43900: PUSH
43901: LD_INT 1
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 0
43910: PUSH
43911: LD_INT 1
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 1
43920: NEG
43921: PUSH
43922: LD_INT 0
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 1
43931: NEG
43932: PUSH
43933: LD_INT 1
43935: NEG
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: LD_INT 1
43943: NEG
43944: PUSH
43945: LD_INT 2
43947: NEG
43948: PUSH
43949: EMPTY
43950: LIST
43951: LIST
43952: PUSH
43953: LD_INT 0
43955: PUSH
43956: LD_INT 2
43958: NEG
43959: PUSH
43960: EMPTY
43961: LIST
43962: LIST
43963: PUSH
43964: LD_INT 1
43966: PUSH
43967: LD_INT 1
43969: NEG
43970: PUSH
43971: EMPTY
43972: LIST
43973: LIST
43974: PUSH
43975: LD_INT 2
43977: NEG
43978: PUSH
43979: LD_INT 1
43981: NEG
43982: PUSH
43983: EMPTY
43984: LIST
43985: LIST
43986: PUSH
43987: LD_INT 2
43989: NEG
43990: PUSH
43991: LD_INT 2
43993: NEG
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: LIST
44003: LIST
44004: LIST
44005: LIST
44006: LIST
44007: LIST
44008: LIST
44009: LIST
44010: LIST
44011: LIST
44012: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44013: LD_ADDR_VAR 0 48
44017: PUSH
44018: LD_INT 0
44020: PUSH
44021: LD_INT 0
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: LD_INT 0
44030: PUSH
44031: LD_INT 1
44033: NEG
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 1
44041: PUSH
44042: LD_INT 0
44044: PUSH
44045: EMPTY
44046: LIST
44047: LIST
44048: PUSH
44049: LD_INT 1
44051: PUSH
44052: LD_INT 1
44054: PUSH
44055: EMPTY
44056: LIST
44057: LIST
44058: PUSH
44059: LD_INT 0
44061: PUSH
44062: LD_INT 1
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 1
44071: NEG
44072: PUSH
44073: LD_INT 0
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 1
44082: NEG
44083: PUSH
44084: LD_INT 1
44086: NEG
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 1
44094: NEG
44095: PUSH
44096: LD_INT 2
44098: NEG
44099: PUSH
44100: EMPTY
44101: LIST
44102: LIST
44103: PUSH
44104: LD_INT 0
44106: PUSH
44107: LD_INT 2
44109: NEG
44110: PUSH
44111: EMPTY
44112: LIST
44113: LIST
44114: PUSH
44115: LD_INT 1
44117: PUSH
44118: LD_INT 1
44120: NEG
44121: PUSH
44122: EMPTY
44123: LIST
44124: LIST
44125: PUSH
44126: LD_INT 2
44128: PUSH
44129: LD_INT 0
44131: PUSH
44132: EMPTY
44133: LIST
44134: LIST
44135: PUSH
44136: LD_INT 2
44138: PUSH
44139: LD_INT 1
44141: PUSH
44142: EMPTY
44143: LIST
44144: LIST
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44160: LD_ADDR_VAR 0 49
44164: PUSH
44165: LD_INT 0
44167: PUSH
44168: LD_INT 0
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: PUSH
44175: LD_INT 0
44177: PUSH
44178: LD_INT 1
44180: NEG
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 1
44188: PUSH
44189: LD_INT 0
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: LD_INT 1
44198: PUSH
44199: LD_INT 1
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 0
44208: PUSH
44209: LD_INT 1
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 1
44218: NEG
44219: PUSH
44220: LD_INT 0
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 1
44229: NEG
44230: PUSH
44231: LD_INT 1
44233: NEG
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: LD_INT 1
44241: PUSH
44242: LD_INT 1
44244: NEG
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 2
44252: PUSH
44253: LD_INT 0
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 2
44262: PUSH
44263: LD_INT 1
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 2
44272: PUSH
44273: LD_INT 2
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 1
44282: PUSH
44283: LD_INT 2
44285: PUSH
44286: EMPTY
44287: LIST
44288: LIST
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44304: LD_ADDR_VAR 0 50
44308: PUSH
44309: LD_INT 0
44311: PUSH
44312: LD_INT 0
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PUSH
44319: LD_INT 0
44321: PUSH
44322: LD_INT 1
44324: NEG
44325: PUSH
44326: EMPTY
44327: LIST
44328: LIST
44329: PUSH
44330: LD_INT 1
44332: PUSH
44333: LD_INT 0
44335: PUSH
44336: EMPTY
44337: LIST
44338: LIST
44339: PUSH
44340: LD_INT 1
44342: PUSH
44343: LD_INT 1
44345: PUSH
44346: EMPTY
44347: LIST
44348: LIST
44349: PUSH
44350: LD_INT 0
44352: PUSH
44353: LD_INT 1
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 1
44362: NEG
44363: PUSH
44364: LD_INT 0
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 1
44373: NEG
44374: PUSH
44375: LD_INT 1
44377: NEG
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 2
44385: PUSH
44386: LD_INT 1
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 2
44395: PUSH
44396: LD_INT 2
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 1
44405: PUSH
44406: LD_INT 2
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 0
44415: PUSH
44416: LD_INT 2
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 1
44425: NEG
44426: PUSH
44427: LD_INT 1
44429: PUSH
44430: EMPTY
44431: LIST
44432: LIST
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44448: LD_ADDR_VAR 0 51
44452: PUSH
44453: LD_INT 0
44455: PUSH
44456: LD_INT 0
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 0
44465: PUSH
44466: LD_INT 1
44468: NEG
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 1
44476: PUSH
44477: LD_INT 0
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: LD_INT 1
44486: PUSH
44487: LD_INT 1
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: LD_INT 0
44496: PUSH
44497: LD_INT 1
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 1
44506: NEG
44507: PUSH
44508: LD_INT 0
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PUSH
44515: LD_INT 1
44517: NEG
44518: PUSH
44519: LD_INT 1
44521: NEG
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 1
44529: PUSH
44530: LD_INT 2
44532: PUSH
44533: EMPTY
44534: LIST
44535: LIST
44536: PUSH
44537: LD_INT 0
44539: PUSH
44540: LD_INT 2
44542: PUSH
44543: EMPTY
44544: LIST
44545: LIST
44546: PUSH
44547: LD_INT 1
44549: NEG
44550: PUSH
44551: LD_INT 1
44553: PUSH
44554: EMPTY
44555: LIST
44556: LIST
44557: PUSH
44558: LD_INT 2
44560: NEG
44561: PUSH
44562: LD_INT 0
44564: PUSH
44565: EMPTY
44566: LIST
44567: LIST
44568: PUSH
44569: LD_INT 2
44571: NEG
44572: PUSH
44573: LD_INT 1
44575: NEG
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: LIST
44589: LIST
44590: LIST
44591: LIST
44592: LIST
44593: LIST
44594: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44595: LD_ADDR_VAR 0 52
44599: PUSH
44600: LD_INT 0
44602: PUSH
44603: LD_INT 0
44605: PUSH
44606: EMPTY
44607: LIST
44608: LIST
44609: PUSH
44610: LD_INT 0
44612: PUSH
44613: LD_INT 1
44615: NEG
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 1
44623: PUSH
44624: LD_INT 0
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 1
44633: PUSH
44634: LD_INT 1
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 0
44643: PUSH
44644: LD_INT 1
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 1
44653: NEG
44654: PUSH
44655: LD_INT 0
44657: PUSH
44658: EMPTY
44659: LIST
44660: LIST
44661: PUSH
44662: LD_INT 1
44664: NEG
44665: PUSH
44666: LD_INT 1
44668: NEG
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 1
44676: NEG
44677: PUSH
44678: LD_INT 2
44680: NEG
44681: PUSH
44682: EMPTY
44683: LIST
44684: LIST
44685: PUSH
44686: LD_INT 1
44688: NEG
44689: PUSH
44690: LD_INT 1
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: LD_INT 2
44699: NEG
44700: PUSH
44701: LD_INT 0
44703: PUSH
44704: EMPTY
44705: LIST
44706: LIST
44707: PUSH
44708: LD_INT 2
44710: NEG
44711: PUSH
44712: LD_INT 1
44714: NEG
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 2
44722: NEG
44723: PUSH
44724: LD_INT 2
44726: NEG
44727: PUSH
44728: EMPTY
44729: LIST
44730: LIST
44731: PUSH
44732: EMPTY
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: LIST
44740: LIST
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44746: LD_ADDR_VAR 0 53
44750: PUSH
44751: LD_INT 0
44753: PUSH
44754: LD_INT 0
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 0
44763: PUSH
44764: LD_INT 1
44766: NEG
44767: PUSH
44768: EMPTY
44769: LIST
44770: LIST
44771: PUSH
44772: LD_INT 1
44774: PUSH
44775: LD_INT 0
44777: PUSH
44778: EMPTY
44779: LIST
44780: LIST
44781: PUSH
44782: LD_INT 1
44784: PUSH
44785: LD_INT 1
44787: PUSH
44788: EMPTY
44789: LIST
44790: LIST
44791: PUSH
44792: LD_INT 0
44794: PUSH
44795: LD_INT 1
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: LD_INT 1
44804: NEG
44805: PUSH
44806: LD_INT 0
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 1
44815: NEG
44816: PUSH
44817: LD_INT 1
44819: NEG
44820: PUSH
44821: EMPTY
44822: LIST
44823: LIST
44824: PUSH
44825: LD_INT 1
44827: NEG
44828: PUSH
44829: LD_INT 2
44831: NEG
44832: PUSH
44833: EMPTY
44834: LIST
44835: LIST
44836: PUSH
44837: LD_INT 0
44839: PUSH
44840: LD_INT 2
44842: NEG
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 1
44850: PUSH
44851: LD_INT 1
44853: NEG
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 2
44861: PUSH
44862: LD_INT 0
44864: PUSH
44865: EMPTY
44866: LIST
44867: LIST
44868: PUSH
44869: LD_INT 2
44871: PUSH
44872: LD_INT 1
44874: PUSH
44875: EMPTY
44876: LIST
44877: LIST
44878: PUSH
44879: LD_INT 2
44881: PUSH
44882: LD_INT 2
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 1
44891: PUSH
44892: LD_INT 2
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 0
44901: PUSH
44902: LD_INT 2
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 1
44911: NEG
44912: PUSH
44913: LD_INT 1
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 2
44922: NEG
44923: PUSH
44924: LD_INT 0
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 2
44933: NEG
44934: PUSH
44935: LD_INT 1
44937: NEG
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 2
44945: NEG
44946: PUSH
44947: LD_INT 2
44949: NEG
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: LIST
44959: LIST
44960: LIST
44961: LIST
44962: LIST
44963: LIST
44964: LIST
44965: LIST
44966: LIST
44967: LIST
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44976: LD_ADDR_VAR 0 54
44980: PUSH
44981: LD_INT 0
44983: PUSH
44984: LD_INT 0
44986: PUSH
44987: EMPTY
44988: LIST
44989: LIST
44990: PUSH
44991: LD_INT 0
44993: PUSH
44994: LD_INT 1
44996: NEG
44997: PUSH
44998: EMPTY
44999: LIST
45000: LIST
45001: PUSH
45002: LD_INT 1
45004: PUSH
45005: LD_INT 0
45007: PUSH
45008: EMPTY
45009: LIST
45010: LIST
45011: PUSH
45012: LD_INT 1
45014: PUSH
45015: LD_INT 1
45017: PUSH
45018: EMPTY
45019: LIST
45020: LIST
45021: PUSH
45022: LD_INT 0
45024: PUSH
45025: LD_INT 1
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 1
45034: NEG
45035: PUSH
45036: LD_INT 0
45038: PUSH
45039: EMPTY
45040: LIST
45041: LIST
45042: PUSH
45043: LD_INT 1
45045: NEG
45046: PUSH
45047: LD_INT 1
45049: NEG
45050: PUSH
45051: EMPTY
45052: LIST
45053: LIST
45054: PUSH
45055: LD_INT 1
45057: NEG
45058: PUSH
45059: LD_INT 2
45061: NEG
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: LD_INT 0
45069: PUSH
45070: LD_INT 2
45072: NEG
45073: PUSH
45074: EMPTY
45075: LIST
45076: LIST
45077: PUSH
45078: LD_INT 1
45080: PUSH
45081: LD_INT 1
45083: NEG
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 2
45091: PUSH
45092: LD_INT 0
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 2
45101: PUSH
45102: LD_INT 1
45104: PUSH
45105: EMPTY
45106: LIST
45107: LIST
45108: PUSH
45109: LD_INT 2
45111: PUSH
45112: LD_INT 2
45114: PUSH
45115: EMPTY
45116: LIST
45117: LIST
45118: PUSH
45119: LD_INT 1
45121: PUSH
45122: LD_INT 2
45124: PUSH
45125: EMPTY
45126: LIST
45127: LIST
45128: PUSH
45129: LD_INT 0
45131: PUSH
45132: LD_INT 2
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 1
45141: NEG
45142: PUSH
45143: LD_INT 1
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: PUSH
45150: LD_INT 2
45152: NEG
45153: PUSH
45154: LD_INT 0
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: LD_INT 2
45163: NEG
45164: PUSH
45165: LD_INT 1
45167: NEG
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 2
45175: NEG
45176: PUSH
45177: LD_INT 2
45179: NEG
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: LIST
45189: LIST
45190: LIST
45191: LIST
45192: LIST
45193: LIST
45194: LIST
45195: LIST
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: LIST
45202: LIST
45203: LIST
45204: LIST
45205: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45206: LD_ADDR_VAR 0 55
45210: PUSH
45211: LD_INT 0
45213: PUSH
45214: LD_INT 0
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 0
45223: PUSH
45224: LD_INT 1
45226: NEG
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: LD_INT 1
45234: PUSH
45235: LD_INT 0
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 1
45244: PUSH
45245: LD_INT 1
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: PUSH
45252: LD_INT 0
45254: PUSH
45255: LD_INT 1
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: LD_INT 1
45264: NEG
45265: PUSH
45266: LD_INT 0
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 1
45275: NEG
45276: PUSH
45277: LD_INT 1
45279: NEG
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 1
45287: NEG
45288: PUSH
45289: LD_INT 2
45291: NEG
45292: PUSH
45293: EMPTY
45294: LIST
45295: LIST
45296: PUSH
45297: LD_INT 0
45299: PUSH
45300: LD_INT 2
45302: NEG
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 1
45310: PUSH
45311: LD_INT 1
45313: NEG
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 2
45321: PUSH
45322: LD_INT 0
45324: PUSH
45325: EMPTY
45326: LIST
45327: LIST
45328: PUSH
45329: LD_INT 2
45331: PUSH
45332: LD_INT 1
45334: PUSH
45335: EMPTY
45336: LIST
45337: LIST
45338: PUSH
45339: LD_INT 2
45341: PUSH
45342: LD_INT 2
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 1
45351: PUSH
45352: LD_INT 2
45354: PUSH
45355: EMPTY
45356: LIST
45357: LIST
45358: PUSH
45359: LD_INT 0
45361: PUSH
45362: LD_INT 2
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: LD_INT 1
45371: NEG
45372: PUSH
45373: LD_INT 1
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 2
45382: NEG
45383: PUSH
45384: LD_INT 0
45386: PUSH
45387: EMPTY
45388: LIST
45389: LIST
45390: PUSH
45391: LD_INT 2
45393: NEG
45394: PUSH
45395: LD_INT 1
45397: NEG
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: LD_INT 2
45405: NEG
45406: PUSH
45407: LD_INT 2
45409: NEG
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45436: LD_ADDR_VAR 0 56
45440: PUSH
45441: LD_INT 0
45443: PUSH
45444: LD_INT 0
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 0
45453: PUSH
45454: LD_INT 1
45456: NEG
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 1
45464: PUSH
45465: LD_INT 0
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 1
45474: PUSH
45475: LD_INT 1
45477: PUSH
45478: EMPTY
45479: LIST
45480: LIST
45481: PUSH
45482: LD_INT 0
45484: PUSH
45485: LD_INT 1
45487: PUSH
45488: EMPTY
45489: LIST
45490: LIST
45491: PUSH
45492: LD_INT 1
45494: NEG
45495: PUSH
45496: LD_INT 0
45498: PUSH
45499: EMPTY
45500: LIST
45501: LIST
45502: PUSH
45503: LD_INT 1
45505: NEG
45506: PUSH
45507: LD_INT 1
45509: NEG
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 1
45517: NEG
45518: PUSH
45519: LD_INT 2
45521: NEG
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 0
45529: PUSH
45530: LD_INT 2
45532: NEG
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 1
45540: PUSH
45541: LD_INT 1
45543: NEG
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 2
45551: PUSH
45552: LD_INT 0
45554: PUSH
45555: EMPTY
45556: LIST
45557: LIST
45558: PUSH
45559: LD_INT 2
45561: PUSH
45562: LD_INT 1
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: PUSH
45569: LD_INT 2
45571: PUSH
45572: LD_INT 2
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 1
45581: PUSH
45582: LD_INT 2
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 0
45591: PUSH
45592: LD_INT 2
45594: PUSH
45595: EMPTY
45596: LIST
45597: LIST
45598: PUSH
45599: LD_INT 1
45601: NEG
45602: PUSH
45603: LD_INT 1
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 2
45612: NEG
45613: PUSH
45614: LD_INT 0
45616: PUSH
45617: EMPTY
45618: LIST
45619: LIST
45620: PUSH
45621: LD_INT 2
45623: NEG
45624: PUSH
45625: LD_INT 1
45627: NEG
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 2
45635: NEG
45636: PUSH
45637: LD_INT 2
45639: NEG
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: LIST
45649: LIST
45650: LIST
45651: LIST
45652: LIST
45653: LIST
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: LIST
45662: LIST
45663: LIST
45664: LIST
45665: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45666: LD_ADDR_VAR 0 57
45670: PUSH
45671: LD_INT 0
45673: PUSH
45674: LD_INT 0
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 0
45683: PUSH
45684: LD_INT 1
45686: NEG
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 1
45694: PUSH
45695: LD_INT 0
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 1
45704: PUSH
45705: LD_INT 1
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 0
45714: PUSH
45715: LD_INT 1
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 1
45724: NEG
45725: PUSH
45726: LD_INT 0
45728: PUSH
45729: EMPTY
45730: LIST
45731: LIST
45732: PUSH
45733: LD_INT 1
45735: NEG
45736: PUSH
45737: LD_INT 1
45739: NEG
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: PUSH
45745: LD_INT 1
45747: NEG
45748: PUSH
45749: LD_INT 2
45751: NEG
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 0
45759: PUSH
45760: LD_INT 2
45762: NEG
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 1
45770: PUSH
45771: LD_INT 1
45773: NEG
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 2
45781: PUSH
45782: LD_INT 0
45784: PUSH
45785: EMPTY
45786: LIST
45787: LIST
45788: PUSH
45789: LD_INT 2
45791: PUSH
45792: LD_INT 1
45794: PUSH
45795: EMPTY
45796: LIST
45797: LIST
45798: PUSH
45799: LD_INT 2
45801: PUSH
45802: LD_INT 2
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 1
45811: PUSH
45812: LD_INT 2
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 0
45821: PUSH
45822: LD_INT 2
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: LD_INT 1
45831: NEG
45832: PUSH
45833: LD_INT 1
45835: PUSH
45836: EMPTY
45837: LIST
45838: LIST
45839: PUSH
45840: LD_INT 2
45842: NEG
45843: PUSH
45844: LD_INT 0
45846: PUSH
45847: EMPTY
45848: LIST
45849: LIST
45850: PUSH
45851: LD_INT 2
45853: NEG
45854: PUSH
45855: LD_INT 1
45857: NEG
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 2
45865: NEG
45866: PUSH
45867: LD_INT 2
45869: NEG
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: LIST
45890: LIST
45891: LIST
45892: LIST
45893: LIST
45894: LIST
45895: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45896: LD_ADDR_VAR 0 58
45900: PUSH
45901: LD_INT 0
45903: PUSH
45904: LD_INT 0
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 0
45913: PUSH
45914: LD_INT 1
45916: NEG
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 1
45924: PUSH
45925: LD_INT 0
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 1
45934: PUSH
45935: LD_INT 1
45937: PUSH
45938: EMPTY
45939: LIST
45940: LIST
45941: PUSH
45942: LD_INT 0
45944: PUSH
45945: LD_INT 1
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 1
45954: NEG
45955: PUSH
45956: LD_INT 0
45958: PUSH
45959: EMPTY
45960: LIST
45961: LIST
45962: PUSH
45963: LD_INT 1
45965: NEG
45966: PUSH
45967: LD_INT 1
45969: NEG
45970: PUSH
45971: EMPTY
45972: LIST
45973: LIST
45974: PUSH
45975: LD_INT 1
45977: NEG
45978: PUSH
45979: LD_INT 2
45981: NEG
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 0
45989: PUSH
45990: LD_INT 2
45992: NEG
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 1
46000: PUSH
46001: LD_INT 1
46003: NEG
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 2
46011: PUSH
46012: LD_INT 0
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: PUSH
46019: LD_INT 2
46021: PUSH
46022: LD_INT 1
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 2
46031: PUSH
46032: LD_INT 2
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 1
46041: PUSH
46042: LD_INT 2
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 0
46051: PUSH
46052: LD_INT 2
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 1
46061: NEG
46062: PUSH
46063: LD_INT 1
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 2
46072: NEG
46073: PUSH
46074: LD_INT 0
46076: PUSH
46077: EMPTY
46078: LIST
46079: LIST
46080: PUSH
46081: LD_INT 2
46083: NEG
46084: PUSH
46085: LD_INT 1
46087: NEG
46088: PUSH
46089: EMPTY
46090: LIST
46091: LIST
46092: PUSH
46093: LD_INT 2
46095: NEG
46096: PUSH
46097: LD_INT 2
46099: NEG
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: LIST
46109: LIST
46110: LIST
46111: LIST
46112: LIST
46113: LIST
46114: LIST
46115: LIST
46116: LIST
46117: LIST
46118: LIST
46119: LIST
46120: LIST
46121: LIST
46122: LIST
46123: LIST
46124: LIST
46125: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46126: LD_ADDR_VAR 0 59
46130: PUSH
46131: LD_INT 0
46133: PUSH
46134: LD_INT 0
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 0
46143: PUSH
46144: LD_INT 1
46146: NEG
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 1
46154: PUSH
46155: LD_INT 0
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 1
46164: PUSH
46165: LD_INT 1
46167: PUSH
46168: EMPTY
46169: LIST
46170: LIST
46171: PUSH
46172: LD_INT 0
46174: PUSH
46175: LD_INT 1
46177: PUSH
46178: EMPTY
46179: LIST
46180: LIST
46181: PUSH
46182: LD_INT 1
46184: NEG
46185: PUSH
46186: LD_INT 0
46188: PUSH
46189: EMPTY
46190: LIST
46191: LIST
46192: PUSH
46193: LD_INT 1
46195: NEG
46196: PUSH
46197: LD_INT 1
46199: NEG
46200: PUSH
46201: EMPTY
46202: LIST
46203: LIST
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: LIST
46209: LIST
46210: LIST
46211: LIST
46212: LIST
46213: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46214: LD_ADDR_VAR 0 60
46218: PUSH
46219: LD_INT 0
46221: PUSH
46222: LD_INT 0
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: PUSH
46229: LD_INT 0
46231: PUSH
46232: LD_INT 1
46234: NEG
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 1
46242: PUSH
46243: LD_INT 0
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 1
46252: PUSH
46253: LD_INT 1
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 0
46262: PUSH
46263: LD_INT 1
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 1
46272: NEG
46273: PUSH
46274: LD_INT 0
46276: PUSH
46277: EMPTY
46278: LIST
46279: LIST
46280: PUSH
46281: LD_INT 1
46283: NEG
46284: PUSH
46285: LD_INT 1
46287: NEG
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46302: LD_ADDR_VAR 0 61
46306: PUSH
46307: LD_INT 0
46309: PUSH
46310: LD_INT 0
46312: PUSH
46313: EMPTY
46314: LIST
46315: LIST
46316: PUSH
46317: LD_INT 0
46319: PUSH
46320: LD_INT 1
46322: NEG
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 1
46330: PUSH
46331: LD_INT 0
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: LD_INT 1
46340: PUSH
46341: LD_INT 1
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 0
46350: PUSH
46351: LD_INT 1
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 1
46360: NEG
46361: PUSH
46362: LD_INT 0
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 1
46371: NEG
46372: PUSH
46373: LD_INT 1
46375: NEG
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46390: LD_ADDR_VAR 0 62
46394: PUSH
46395: LD_INT 0
46397: PUSH
46398: LD_INT 0
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 0
46407: PUSH
46408: LD_INT 1
46410: NEG
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 1
46418: PUSH
46419: LD_INT 0
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 1
46428: PUSH
46429: LD_INT 1
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 0
46438: PUSH
46439: LD_INT 1
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 1
46448: NEG
46449: PUSH
46450: LD_INT 0
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 1
46459: NEG
46460: PUSH
46461: LD_INT 1
46463: NEG
46464: PUSH
46465: EMPTY
46466: LIST
46467: LIST
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46478: LD_ADDR_VAR 0 63
46482: PUSH
46483: LD_INT 0
46485: PUSH
46486: LD_INT 0
46488: PUSH
46489: EMPTY
46490: LIST
46491: LIST
46492: PUSH
46493: LD_INT 0
46495: PUSH
46496: LD_INT 1
46498: NEG
46499: PUSH
46500: EMPTY
46501: LIST
46502: LIST
46503: PUSH
46504: LD_INT 1
46506: PUSH
46507: LD_INT 0
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 1
46516: PUSH
46517: LD_INT 1
46519: PUSH
46520: EMPTY
46521: LIST
46522: LIST
46523: PUSH
46524: LD_INT 0
46526: PUSH
46527: LD_INT 1
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: LD_INT 1
46536: NEG
46537: PUSH
46538: LD_INT 0
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: PUSH
46545: LD_INT 1
46547: NEG
46548: PUSH
46549: LD_INT 1
46551: NEG
46552: PUSH
46553: EMPTY
46554: LIST
46555: LIST
46556: PUSH
46557: EMPTY
46558: LIST
46559: LIST
46560: LIST
46561: LIST
46562: LIST
46563: LIST
46564: LIST
46565: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46566: LD_ADDR_VAR 0 64
46570: PUSH
46571: LD_INT 0
46573: PUSH
46574: LD_INT 0
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 0
46583: PUSH
46584: LD_INT 1
46586: NEG
46587: PUSH
46588: EMPTY
46589: LIST
46590: LIST
46591: PUSH
46592: LD_INT 1
46594: PUSH
46595: LD_INT 0
46597: PUSH
46598: EMPTY
46599: LIST
46600: LIST
46601: PUSH
46602: LD_INT 1
46604: PUSH
46605: LD_INT 1
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 0
46614: PUSH
46615: LD_INT 1
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 1
46624: NEG
46625: PUSH
46626: LD_INT 0
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 1
46635: NEG
46636: PUSH
46637: LD_INT 1
46639: NEG
46640: PUSH
46641: EMPTY
46642: LIST
46643: LIST
46644: PUSH
46645: EMPTY
46646: LIST
46647: LIST
46648: LIST
46649: LIST
46650: LIST
46651: LIST
46652: LIST
46653: ST_TO_ADDR
// end ; 1 :
46654: GO 52551
46656: LD_INT 1
46658: DOUBLE
46659: EQUAL
46660: IFTRUE 46664
46662: GO 49287
46664: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46665: LD_ADDR_VAR 0 11
46669: PUSH
46670: LD_INT 1
46672: NEG
46673: PUSH
46674: LD_INT 3
46676: NEG
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: PUSH
46682: LD_INT 0
46684: PUSH
46685: LD_INT 3
46687: NEG
46688: PUSH
46689: EMPTY
46690: LIST
46691: LIST
46692: PUSH
46693: LD_INT 1
46695: PUSH
46696: LD_INT 2
46698: NEG
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: LIST
46708: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46709: LD_ADDR_VAR 0 12
46713: PUSH
46714: LD_INT 2
46716: PUSH
46717: LD_INT 1
46719: NEG
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 3
46727: PUSH
46728: LD_INT 0
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 3
46737: PUSH
46738: LD_INT 1
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: EMPTY
46746: LIST
46747: LIST
46748: LIST
46749: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46750: LD_ADDR_VAR 0 13
46754: PUSH
46755: LD_INT 3
46757: PUSH
46758: LD_INT 2
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 3
46767: PUSH
46768: LD_INT 3
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: PUSH
46775: LD_INT 2
46777: PUSH
46778: LD_INT 3
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: LIST
46789: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46790: LD_ADDR_VAR 0 14
46794: PUSH
46795: LD_INT 1
46797: PUSH
46798: LD_INT 3
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 0
46807: PUSH
46808: LD_INT 3
46810: PUSH
46811: EMPTY
46812: LIST
46813: LIST
46814: PUSH
46815: LD_INT 1
46817: NEG
46818: PUSH
46819: LD_INT 2
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: LIST
46830: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46831: LD_ADDR_VAR 0 15
46835: PUSH
46836: LD_INT 2
46838: NEG
46839: PUSH
46840: LD_INT 1
46842: PUSH
46843: EMPTY
46844: LIST
46845: LIST
46846: PUSH
46847: LD_INT 3
46849: NEG
46850: PUSH
46851: LD_INT 0
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 3
46860: NEG
46861: PUSH
46862: LD_INT 1
46864: NEG
46865: PUSH
46866: EMPTY
46867: LIST
46868: LIST
46869: PUSH
46870: EMPTY
46871: LIST
46872: LIST
46873: LIST
46874: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46875: LD_ADDR_VAR 0 16
46879: PUSH
46880: LD_INT 2
46882: NEG
46883: PUSH
46884: LD_INT 3
46886: NEG
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 3
46894: NEG
46895: PUSH
46896: LD_INT 2
46898: NEG
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 3
46906: NEG
46907: PUSH
46908: LD_INT 3
46910: NEG
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: EMPTY
46917: LIST
46918: LIST
46919: LIST
46920: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46921: LD_ADDR_VAR 0 17
46925: PUSH
46926: LD_INT 1
46928: NEG
46929: PUSH
46930: LD_INT 3
46932: NEG
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 0
46940: PUSH
46941: LD_INT 3
46943: NEG
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 1
46951: PUSH
46952: LD_INT 2
46954: NEG
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: LIST
46964: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46965: LD_ADDR_VAR 0 18
46969: PUSH
46970: LD_INT 2
46972: PUSH
46973: LD_INT 1
46975: NEG
46976: PUSH
46977: EMPTY
46978: LIST
46979: LIST
46980: PUSH
46981: LD_INT 3
46983: PUSH
46984: LD_INT 0
46986: PUSH
46987: EMPTY
46988: LIST
46989: LIST
46990: PUSH
46991: LD_INT 3
46993: PUSH
46994: LD_INT 1
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: LIST
47005: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47006: LD_ADDR_VAR 0 19
47010: PUSH
47011: LD_INT 3
47013: PUSH
47014: LD_INT 2
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 3
47023: PUSH
47024: LD_INT 3
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 2
47033: PUSH
47034: LD_INT 3
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: EMPTY
47042: LIST
47043: LIST
47044: LIST
47045: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47046: LD_ADDR_VAR 0 20
47050: PUSH
47051: LD_INT 1
47053: PUSH
47054: LD_INT 3
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: LD_INT 0
47063: PUSH
47064: LD_INT 3
47066: PUSH
47067: EMPTY
47068: LIST
47069: LIST
47070: PUSH
47071: LD_INT 1
47073: NEG
47074: PUSH
47075: LD_INT 2
47077: PUSH
47078: EMPTY
47079: LIST
47080: LIST
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: LIST
47086: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47087: LD_ADDR_VAR 0 21
47091: PUSH
47092: LD_INT 2
47094: NEG
47095: PUSH
47096: LD_INT 1
47098: PUSH
47099: EMPTY
47100: LIST
47101: LIST
47102: PUSH
47103: LD_INT 3
47105: NEG
47106: PUSH
47107: LD_INT 0
47109: PUSH
47110: EMPTY
47111: LIST
47112: LIST
47113: PUSH
47114: LD_INT 3
47116: NEG
47117: PUSH
47118: LD_INT 1
47120: NEG
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: EMPTY
47127: LIST
47128: LIST
47129: LIST
47130: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47131: LD_ADDR_VAR 0 22
47135: PUSH
47136: LD_INT 2
47138: NEG
47139: PUSH
47140: LD_INT 3
47142: NEG
47143: PUSH
47144: EMPTY
47145: LIST
47146: LIST
47147: PUSH
47148: LD_INT 3
47150: NEG
47151: PUSH
47152: LD_INT 2
47154: NEG
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 3
47162: NEG
47163: PUSH
47164: LD_INT 3
47166: NEG
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: LIST
47176: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47177: LD_ADDR_VAR 0 23
47181: PUSH
47182: LD_INT 0
47184: PUSH
47185: LD_INT 3
47187: NEG
47188: PUSH
47189: EMPTY
47190: LIST
47191: LIST
47192: PUSH
47193: LD_INT 1
47195: NEG
47196: PUSH
47197: LD_INT 4
47199: NEG
47200: PUSH
47201: EMPTY
47202: LIST
47203: LIST
47204: PUSH
47205: LD_INT 1
47207: PUSH
47208: LD_INT 3
47210: NEG
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: LIST
47220: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
47221: LD_ADDR_VAR 0 24
47225: PUSH
47226: LD_INT 3
47228: PUSH
47229: LD_INT 0
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 3
47238: PUSH
47239: LD_INT 1
47241: NEG
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 4
47249: PUSH
47250: LD_INT 1
47252: PUSH
47253: EMPTY
47254: LIST
47255: LIST
47256: PUSH
47257: EMPTY
47258: LIST
47259: LIST
47260: LIST
47261: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
47262: LD_ADDR_VAR 0 25
47266: PUSH
47267: LD_INT 3
47269: PUSH
47270: LD_INT 3
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: LD_INT 4
47279: PUSH
47280: LD_INT 3
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 3
47289: PUSH
47290: LD_INT 4
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: EMPTY
47298: LIST
47299: LIST
47300: LIST
47301: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
47302: LD_ADDR_VAR 0 26
47306: PUSH
47307: LD_INT 0
47309: PUSH
47310: LD_INT 3
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 1
47319: PUSH
47320: LD_INT 4
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: PUSH
47327: LD_INT 1
47329: NEG
47330: PUSH
47331: LD_INT 3
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: EMPTY
47339: LIST
47340: LIST
47341: LIST
47342: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
47343: LD_ADDR_VAR 0 27
47347: PUSH
47348: LD_INT 3
47350: NEG
47351: PUSH
47352: LD_INT 0
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: LD_INT 3
47361: NEG
47362: PUSH
47363: LD_INT 1
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: PUSH
47370: LD_INT 4
47372: NEG
47373: PUSH
47374: LD_INT 1
47376: NEG
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: PUSH
47382: EMPTY
47383: LIST
47384: LIST
47385: LIST
47386: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
47387: LD_ADDR_VAR 0 28
47391: PUSH
47392: LD_INT 3
47394: NEG
47395: PUSH
47396: LD_INT 3
47398: NEG
47399: PUSH
47400: EMPTY
47401: LIST
47402: LIST
47403: PUSH
47404: LD_INT 3
47406: NEG
47407: PUSH
47408: LD_INT 4
47410: NEG
47411: PUSH
47412: EMPTY
47413: LIST
47414: LIST
47415: PUSH
47416: LD_INT 4
47418: NEG
47419: PUSH
47420: LD_INT 3
47422: NEG
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: EMPTY
47429: LIST
47430: LIST
47431: LIST
47432: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
47433: LD_ADDR_VAR 0 29
47437: PUSH
47438: LD_INT 1
47440: NEG
47441: PUSH
47442: LD_INT 3
47444: NEG
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 0
47452: PUSH
47453: LD_INT 3
47455: NEG
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 1
47463: PUSH
47464: LD_INT 2
47466: NEG
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 1
47474: NEG
47475: PUSH
47476: LD_INT 4
47478: NEG
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 0
47486: PUSH
47487: LD_INT 4
47489: NEG
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 1
47497: PUSH
47498: LD_INT 3
47500: NEG
47501: PUSH
47502: EMPTY
47503: LIST
47504: LIST
47505: PUSH
47506: LD_INT 1
47508: NEG
47509: PUSH
47510: LD_INT 5
47512: NEG
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 0
47520: PUSH
47521: LD_INT 5
47523: NEG
47524: PUSH
47525: EMPTY
47526: LIST
47527: LIST
47528: PUSH
47529: LD_INT 1
47531: PUSH
47532: LD_INT 4
47534: NEG
47535: PUSH
47536: EMPTY
47537: LIST
47538: LIST
47539: PUSH
47540: LD_INT 1
47542: NEG
47543: PUSH
47544: LD_INT 6
47546: NEG
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 0
47554: PUSH
47555: LD_INT 6
47557: NEG
47558: PUSH
47559: EMPTY
47560: LIST
47561: LIST
47562: PUSH
47563: LD_INT 1
47565: PUSH
47566: LD_INT 5
47568: NEG
47569: PUSH
47570: EMPTY
47571: LIST
47572: LIST
47573: PUSH
47574: EMPTY
47575: LIST
47576: LIST
47577: LIST
47578: LIST
47579: LIST
47580: LIST
47581: LIST
47582: LIST
47583: LIST
47584: LIST
47585: LIST
47586: LIST
47587: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
47588: LD_ADDR_VAR 0 30
47592: PUSH
47593: LD_INT 2
47595: PUSH
47596: LD_INT 1
47598: NEG
47599: PUSH
47600: EMPTY
47601: LIST
47602: LIST
47603: PUSH
47604: LD_INT 3
47606: PUSH
47607: LD_INT 0
47609: PUSH
47610: EMPTY
47611: LIST
47612: LIST
47613: PUSH
47614: LD_INT 3
47616: PUSH
47617: LD_INT 1
47619: PUSH
47620: EMPTY
47621: LIST
47622: LIST
47623: PUSH
47624: LD_INT 3
47626: PUSH
47627: LD_INT 1
47629: NEG
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 4
47637: PUSH
47638: LD_INT 0
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 4
47647: PUSH
47648: LD_INT 1
47650: PUSH
47651: EMPTY
47652: LIST
47653: LIST
47654: PUSH
47655: LD_INT 4
47657: PUSH
47658: LD_INT 1
47660: NEG
47661: PUSH
47662: EMPTY
47663: LIST
47664: LIST
47665: PUSH
47666: LD_INT 5
47668: PUSH
47669: LD_INT 0
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 5
47678: PUSH
47679: LD_INT 1
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 5
47688: PUSH
47689: LD_INT 1
47691: NEG
47692: PUSH
47693: EMPTY
47694: LIST
47695: LIST
47696: PUSH
47697: LD_INT 6
47699: PUSH
47700: LD_INT 0
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 6
47709: PUSH
47710: LD_INT 1
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47731: LD_ADDR_VAR 0 31
47735: PUSH
47736: LD_INT 3
47738: PUSH
47739: LD_INT 2
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 3
47748: PUSH
47749: LD_INT 3
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 2
47758: PUSH
47759: LD_INT 3
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 4
47768: PUSH
47769: LD_INT 3
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 4
47778: PUSH
47779: LD_INT 4
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 3
47788: PUSH
47789: LD_INT 4
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 5
47798: PUSH
47799: LD_INT 4
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 5
47808: PUSH
47809: LD_INT 5
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 4
47818: PUSH
47819: LD_INT 5
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 6
47828: PUSH
47829: LD_INT 5
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 6
47838: PUSH
47839: LD_INT 6
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 5
47848: PUSH
47849: LD_INT 6
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
47870: LD_ADDR_VAR 0 32
47874: PUSH
47875: LD_INT 1
47877: PUSH
47878: LD_INT 3
47880: PUSH
47881: EMPTY
47882: LIST
47883: LIST
47884: PUSH
47885: LD_INT 0
47887: PUSH
47888: LD_INT 3
47890: PUSH
47891: EMPTY
47892: LIST
47893: LIST
47894: PUSH
47895: LD_INT 1
47897: NEG
47898: PUSH
47899: LD_INT 2
47901: PUSH
47902: EMPTY
47903: LIST
47904: LIST
47905: PUSH
47906: LD_INT 1
47908: PUSH
47909: LD_INT 4
47911: PUSH
47912: EMPTY
47913: LIST
47914: LIST
47915: PUSH
47916: LD_INT 0
47918: PUSH
47919: LD_INT 4
47921: PUSH
47922: EMPTY
47923: LIST
47924: LIST
47925: PUSH
47926: LD_INT 1
47928: NEG
47929: PUSH
47930: LD_INT 3
47932: PUSH
47933: EMPTY
47934: LIST
47935: LIST
47936: PUSH
47937: LD_INT 1
47939: PUSH
47940: LD_INT 5
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 0
47949: PUSH
47950: LD_INT 5
47952: PUSH
47953: EMPTY
47954: LIST
47955: LIST
47956: PUSH
47957: LD_INT 1
47959: NEG
47960: PUSH
47961: LD_INT 4
47963: PUSH
47964: EMPTY
47965: LIST
47966: LIST
47967: PUSH
47968: LD_INT 1
47970: PUSH
47971: LD_INT 6
47973: PUSH
47974: EMPTY
47975: LIST
47976: LIST
47977: PUSH
47978: LD_INT 0
47980: PUSH
47981: LD_INT 6
47983: PUSH
47984: EMPTY
47985: LIST
47986: LIST
47987: PUSH
47988: LD_INT 1
47990: NEG
47991: PUSH
47992: LD_INT 5
47994: PUSH
47995: EMPTY
47996: LIST
47997: LIST
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: LIST
48003: LIST
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
48013: LD_ADDR_VAR 0 33
48017: PUSH
48018: LD_INT 2
48020: NEG
48021: PUSH
48022: LD_INT 1
48024: PUSH
48025: EMPTY
48026: LIST
48027: LIST
48028: PUSH
48029: LD_INT 3
48031: NEG
48032: PUSH
48033: LD_INT 0
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: PUSH
48040: LD_INT 3
48042: NEG
48043: PUSH
48044: LD_INT 1
48046: NEG
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 3
48054: NEG
48055: PUSH
48056: LD_INT 1
48058: PUSH
48059: EMPTY
48060: LIST
48061: LIST
48062: PUSH
48063: LD_INT 4
48065: NEG
48066: PUSH
48067: LD_INT 0
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 4
48076: NEG
48077: PUSH
48078: LD_INT 1
48080: NEG
48081: PUSH
48082: EMPTY
48083: LIST
48084: LIST
48085: PUSH
48086: LD_INT 4
48088: NEG
48089: PUSH
48090: LD_INT 1
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 5
48099: NEG
48100: PUSH
48101: LD_INT 0
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 5
48110: NEG
48111: PUSH
48112: LD_INT 1
48114: NEG
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 5
48122: NEG
48123: PUSH
48124: LD_INT 1
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 6
48133: NEG
48134: PUSH
48135: LD_INT 0
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 6
48144: NEG
48145: PUSH
48146: LD_INT 1
48148: NEG
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: EMPTY
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: LIST
48160: LIST
48161: LIST
48162: LIST
48163: LIST
48164: LIST
48165: LIST
48166: LIST
48167: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
48168: LD_ADDR_VAR 0 34
48172: PUSH
48173: LD_INT 2
48175: NEG
48176: PUSH
48177: LD_INT 3
48179: NEG
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 3
48187: NEG
48188: PUSH
48189: LD_INT 2
48191: NEG
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 3
48199: NEG
48200: PUSH
48201: LD_INT 3
48203: NEG
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 3
48211: NEG
48212: PUSH
48213: LD_INT 4
48215: NEG
48216: PUSH
48217: EMPTY
48218: LIST
48219: LIST
48220: PUSH
48221: LD_INT 4
48223: NEG
48224: PUSH
48225: LD_INT 3
48227: NEG
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 4
48235: NEG
48236: PUSH
48237: LD_INT 4
48239: NEG
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 4
48247: NEG
48248: PUSH
48249: LD_INT 5
48251: NEG
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: PUSH
48257: LD_INT 5
48259: NEG
48260: PUSH
48261: LD_INT 4
48263: NEG
48264: PUSH
48265: EMPTY
48266: LIST
48267: LIST
48268: PUSH
48269: LD_INT 5
48271: NEG
48272: PUSH
48273: LD_INT 5
48275: NEG
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 5
48283: NEG
48284: PUSH
48285: LD_INT 6
48287: NEG
48288: PUSH
48289: EMPTY
48290: LIST
48291: LIST
48292: PUSH
48293: LD_INT 6
48295: NEG
48296: PUSH
48297: LD_INT 5
48299: NEG
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: PUSH
48305: LD_INT 6
48307: NEG
48308: PUSH
48309: LD_INT 6
48311: NEG
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: LIST
48321: LIST
48322: LIST
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
48331: LD_ADDR_VAR 0 41
48335: PUSH
48336: LD_INT 0
48338: PUSH
48339: LD_INT 2
48341: NEG
48342: PUSH
48343: EMPTY
48344: LIST
48345: LIST
48346: PUSH
48347: LD_INT 1
48349: NEG
48350: PUSH
48351: LD_INT 3
48353: NEG
48354: PUSH
48355: EMPTY
48356: LIST
48357: LIST
48358: PUSH
48359: LD_INT 1
48361: PUSH
48362: LD_INT 2
48364: NEG
48365: PUSH
48366: EMPTY
48367: LIST
48368: LIST
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: LIST
48374: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
48375: LD_ADDR_VAR 0 42
48379: PUSH
48380: LD_INT 2
48382: PUSH
48383: LD_INT 0
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 2
48392: PUSH
48393: LD_INT 1
48395: NEG
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 3
48403: PUSH
48404: LD_INT 1
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: LIST
48415: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
48416: LD_ADDR_VAR 0 43
48420: PUSH
48421: LD_INT 2
48423: PUSH
48424: LD_INT 2
48426: PUSH
48427: EMPTY
48428: LIST
48429: LIST
48430: PUSH
48431: LD_INT 3
48433: PUSH
48434: LD_INT 2
48436: PUSH
48437: EMPTY
48438: LIST
48439: LIST
48440: PUSH
48441: LD_INT 2
48443: PUSH
48444: LD_INT 3
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: LIST
48455: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
48456: LD_ADDR_VAR 0 44
48460: PUSH
48461: LD_INT 0
48463: PUSH
48464: LD_INT 2
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 1
48473: PUSH
48474: LD_INT 3
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 1
48483: NEG
48484: PUSH
48485: LD_INT 2
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: LIST
48496: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48497: LD_ADDR_VAR 0 45
48501: PUSH
48502: LD_INT 2
48504: NEG
48505: PUSH
48506: LD_INT 0
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: PUSH
48513: LD_INT 2
48515: NEG
48516: PUSH
48517: LD_INT 1
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 3
48526: NEG
48527: PUSH
48528: LD_INT 1
48530: NEG
48531: PUSH
48532: EMPTY
48533: LIST
48534: LIST
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: LIST
48540: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
48541: LD_ADDR_VAR 0 46
48545: PUSH
48546: LD_INT 2
48548: NEG
48549: PUSH
48550: LD_INT 2
48552: NEG
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 2
48560: NEG
48561: PUSH
48562: LD_INT 3
48564: NEG
48565: PUSH
48566: EMPTY
48567: LIST
48568: LIST
48569: PUSH
48570: LD_INT 3
48572: NEG
48573: PUSH
48574: LD_INT 2
48576: NEG
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: EMPTY
48583: LIST
48584: LIST
48585: LIST
48586: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
48587: LD_ADDR_VAR 0 47
48591: PUSH
48592: LD_INT 2
48594: NEG
48595: PUSH
48596: LD_INT 3
48598: NEG
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 1
48606: NEG
48607: PUSH
48608: LD_INT 3
48610: NEG
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48620: LD_ADDR_VAR 0 48
48624: PUSH
48625: LD_INT 1
48627: PUSH
48628: LD_INT 2
48630: NEG
48631: PUSH
48632: EMPTY
48633: LIST
48634: LIST
48635: PUSH
48636: LD_INT 2
48638: PUSH
48639: LD_INT 1
48641: NEG
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: EMPTY
48648: LIST
48649: LIST
48650: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48651: LD_ADDR_VAR 0 49
48655: PUSH
48656: LD_INT 3
48658: PUSH
48659: LD_INT 1
48661: PUSH
48662: EMPTY
48663: LIST
48664: LIST
48665: PUSH
48666: LD_INT 3
48668: PUSH
48669: LD_INT 2
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48680: LD_ADDR_VAR 0 50
48684: PUSH
48685: LD_INT 2
48687: PUSH
48688: LD_INT 3
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 1
48697: PUSH
48698: LD_INT 3
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: EMPTY
48706: LIST
48707: LIST
48708: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48709: LD_ADDR_VAR 0 51
48713: PUSH
48714: LD_INT 1
48716: NEG
48717: PUSH
48718: LD_INT 2
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 2
48727: NEG
48728: PUSH
48729: LD_INT 1
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: EMPTY
48737: LIST
48738: LIST
48739: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48740: LD_ADDR_VAR 0 52
48744: PUSH
48745: LD_INT 3
48747: NEG
48748: PUSH
48749: LD_INT 1
48751: NEG
48752: PUSH
48753: EMPTY
48754: LIST
48755: LIST
48756: PUSH
48757: LD_INT 3
48759: NEG
48760: PUSH
48761: LD_INT 2
48763: NEG
48764: PUSH
48765: EMPTY
48766: LIST
48767: LIST
48768: PUSH
48769: EMPTY
48770: LIST
48771: LIST
48772: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48773: LD_ADDR_VAR 0 53
48777: PUSH
48778: LD_INT 1
48780: NEG
48781: PUSH
48782: LD_INT 3
48784: NEG
48785: PUSH
48786: EMPTY
48787: LIST
48788: LIST
48789: PUSH
48790: LD_INT 0
48792: PUSH
48793: LD_INT 3
48795: NEG
48796: PUSH
48797: EMPTY
48798: LIST
48799: LIST
48800: PUSH
48801: LD_INT 1
48803: PUSH
48804: LD_INT 2
48806: NEG
48807: PUSH
48808: EMPTY
48809: LIST
48810: LIST
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: LIST
48816: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48817: LD_ADDR_VAR 0 54
48821: PUSH
48822: LD_INT 2
48824: PUSH
48825: LD_INT 1
48827: NEG
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 3
48835: PUSH
48836: LD_INT 0
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: LD_INT 3
48845: PUSH
48846: LD_INT 1
48848: PUSH
48849: EMPTY
48850: LIST
48851: LIST
48852: PUSH
48853: EMPTY
48854: LIST
48855: LIST
48856: LIST
48857: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48858: LD_ADDR_VAR 0 55
48862: PUSH
48863: LD_INT 3
48865: PUSH
48866: LD_INT 2
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 3
48875: PUSH
48876: LD_INT 3
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: LD_INT 2
48885: PUSH
48886: LD_INT 3
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: LIST
48897: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48898: LD_ADDR_VAR 0 56
48902: PUSH
48903: LD_INT 1
48905: PUSH
48906: LD_INT 3
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 0
48915: PUSH
48916: LD_INT 3
48918: PUSH
48919: EMPTY
48920: LIST
48921: LIST
48922: PUSH
48923: LD_INT 1
48925: NEG
48926: PUSH
48927: LD_INT 2
48929: PUSH
48930: EMPTY
48931: LIST
48932: LIST
48933: PUSH
48934: EMPTY
48935: LIST
48936: LIST
48937: LIST
48938: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48939: LD_ADDR_VAR 0 57
48943: PUSH
48944: LD_INT 2
48946: NEG
48947: PUSH
48948: LD_INT 1
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 3
48957: NEG
48958: PUSH
48959: LD_INT 0
48961: PUSH
48962: EMPTY
48963: LIST
48964: LIST
48965: PUSH
48966: LD_INT 3
48968: NEG
48969: PUSH
48970: LD_INT 1
48972: NEG
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: LIST
48982: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48983: LD_ADDR_VAR 0 58
48987: PUSH
48988: LD_INT 2
48990: NEG
48991: PUSH
48992: LD_INT 3
48994: NEG
48995: PUSH
48996: EMPTY
48997: LIST
48998: LIST
48999: PUSH
49000: LD_INT 3
49002: NEG
49003: PUSH
49004: LD_INT 2
49006: NEG
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: PUSH
49012: LD_INT 3
49014: NEG
49015: PUSH
49016: LD_INT 3
49018: NEG
49019: PUSH
49020: EMPTY
49021: LIST
49022: LIST
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: LIST
49028: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
49029: LD_ADDR_VAR 0 59
49033: PUSH
49034: LD_INT 1
49036: NEG
49037: PUSH
49038: LD_INT 2
49040: NEG
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 0
49048: PUSH
49049: LD_INT 2
49051: NEG
49052: PUSH
49053: EMPTY
49054: LIST
49055: LIST
49056: PUSH
49057: LD_INT 1
49059: PUSH
49060: LD_INT 1
49062: NEG
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: LIST
49072: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49073: LD_ADDR_VAR 0 60
49077: PUSH
49078: LD_INT 1
49080: PUSH
49081: LD_INT 1
49083: NEG
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: LD_INT 2
49091: PUSH
49092: LD_INT 0
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 2
49101: PUSH
49102: LD_INT 1
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: LIST
49113: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49114: LD_ADDR_VAR 0 61
49118: PUSH
49119: LD_INT 2
49121: PUSH
49122: LD_INT 1
49124: PUSH
49125: EMPTY
49126: LIST
49127: LIST
49128: PUSH
49129: LD_INT 2
49131: PUSH
49132: LD_INT 2
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 1
49141: PUSH
49142: LD_INT 2
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: EMPTY
49150: LIST
49151: LIST
49152: LIST
49153: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49154: LD_ADDR_VAR 0 62
49158: PUSH
49159: LD_INT 1
49161: PUSH
49162: LD_INT 2
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: PUSH
49169: LD_INT 0
49171: PUSH
49172: LD_INT 2
49174: PUSH
49175: EMPTY
49176: LIST
49177: LIST
49178: PUSH
49179: LD_INT 1
49181: NEG
49182: PUSH
49183: LD_INT 1
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: EMPTY
49191: LIST
49192: LIST
49193: LIST
49194: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49195: LD_ADDR_VAR 0 63
49199: PUSH
49200: LD_INT 1
49202: NEG
49203: PUSH
49204: LD_INT 1
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 2
49213: NEG
49214: PUSH
49215: LD_INT 0
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 2
49224: NEG
49225: PUSH
49226: LD_INT 1
49228: NEG
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: LIST
49238: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49239: LD_ADDR_VAR 0 64
49243: PUSH
49244: LD_INT 1
49246: NEG
49247: PUSH
49248: LD_INT 2
49250: NEG
49251: PUSH
49252: EMPTY
49253: LIST
49254: LIST
49255: PUSH
49256: LD_INT 2
49258: NEG
49259: PUSH
49260: LD_INT 1
49262: NEG
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 2
49270: NEG
49271: PUSH
49272: LD_INT 2
49274: NEG
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: LIST
49284: ST_TO_ADDR
// end ; 2 :
49285: GO 52551
49287: LD_INT 2
49289: DOUBLE
49290: EQUAL
49291: IFTRUE 49295
49293: GO 52550
49295: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
49296: LD_ADDR_VAR 0 29
49300: PUSH
49301: LD_INT 4
49303: PUSH
49304: LD_INT 0
49306: PUSH
49307: EMPTY
49308: LIST
49309: LIST
49310: PUSH
49311: LD_INT 4
49313: PUSH
49314: LD_INT 1
49316: NEG
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: LD_INT 5
49324: PUSH
49325: LD_INT 0
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 5
49334: PUSH
49335: LD_INT 1
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 4
49344: PUSH
49345: LD_INT 1
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 3
49354: PUSH
49355: LD_INT 0
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 3
49364: PUSH
49365: LD_INT 1
49367: NEG
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 3
49375: PUSH
49376: LD_INT 2
49378: NEG
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 5
49386: PUSH
49387: LD_INT 2
49389: PUSH
49390: EMPTY
49391: LIST
49392: LIST
49393: PUSH
49394: LD_INT 3
49396: PUSH
49397: LD_INT 3
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 3
49406: PUSH
49407: LD_INT 2
49409: PUSH
49410: EMPTY
49411: LIST
49412: LIST
49413: PUSH
49414: LD_INT 4
49416: PUSH
49417: LD_INT 3
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 4
49426: PUSH
49427: LD_INT 4
49429: PUSH
49430: EMPTY
49431: LIST
49432: LIST
49433: PUSH
49434: LD_INT 3
49436: PUSH
49437: LD_INT 4
49439: PUSH
49440: EMPTY
49441: LIST
49442: LIST
49443: PUSH
49444: LD_INT 2
49446: PUSH
49447: LD_INT 3
49449: PUSH
49450: EMPTY
49451: LIST
49452: LIST
49453: PUSH
49454: LD_INT 2
49456: PUSH
49457: LD_INT 2
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 4
49466: PUSH
49467: LD_INT 2
49469: PUSH
49470: EMPTY
49471: LIST
49472: LIST
49473: PUSH
49474: LD_INT 2
49476: PUSH
49477: LD_INT 4
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 0
49486: PUSH
49487: LD_INT 4
49489: PUSH
49490: EMPTY
49491: LIST
49492: LIST
49493: PUSH
49494: LD_INT 0
49496: PUSH
49497: LD_INT 3
49499: PUSH
49500: EMPTY
49501: LIST
49502: LIST
49503: PUSH
49504: LD_INT 1
49506: PUSH
49507: LD_INT 4
49509: PUSH
49510: EMPTY
49511: LIST
49512: LIST
49513: PUSH
49514: LD_INT 1
49516: PUSH
49517: LD_INT 5
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 0
49526: PUSH
49527: LD_INT 5
49529: PUSH
49530: EMPTY
49531: LIST
49532: LIST
49533: PUSH
49534: LD_INT 1
49536: NEG
49537: PUSH
49538: LD_INT 4
49540: PUSH
49541: EMPTY
49542: LIST
49543: LIST
49544: PUSH
49545: LD_INT 1
49547: NEG
49548: PUSH
49549: LD_INT 3
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 2
49558: PUSH
49559: LD_INT 5
49561: PUSH
49562: EMPTY
49563: LIST
49564: LIST
49565: PUSH
49566: LD_INT 2
49568: NEG
49569: PUSH
49570: LD_INT 3
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: PUSH
49577: LD_INT 3
49579: NEG
49580: PUSH
49581: LD_INT 0
49583: PUSH
49584: EMPTY
49585: LIST
49586: LIST
49587: PUSH
49588: LD_INT 3
49590: NEG
49591: PUSH
49592: LD_INT 1
49594: NEG
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 2
49602: NEG
49603: PUSH
49604: LD_INT 0
49606: PUSH
49607: EMPTY
49608: LIST
49609: LIST
49610: PUSH
49611: LD_INT 2
49613: NEG
49614: PUSH
49615: LD_INT 1
49617: PUSH
49618: EMPTY
49619: LIST
49620: LIST
49621: PUSH
49622: LD_INT 3
49624: NEG
49625: PUSH
49626: LD_INT 1
49628: PUSH
49629: EMPTY
49630: LIST
49631: LIST
49632: PUSH
49633: LD_INT 4
49635: NEG
49636: PUSH
49637: LD_INT 0
49639: PUSH
49640: EMPTY
49641: LIST
49642: LIST
49643: PUSH
49644: LD_INT 4
49646: NEG
49647: PUSH
49648: LD_INT 1
49650: NEG
49651: PUSH
49652: EMPTY
49653: LIST
49654: LIST
49655: PUSH
49656: LD_INT 4
49658: NEG
49659: PUSH
49660: LD_INT 2
49662: NEG
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 2
49670: NEG
49671: PUSH
49672: LD_INT 2
49674: PUSH
49675: EMPTY
49676: LIST
49677: LIST
49678: PUSH
49679: LD_INT 4
49681: NEG
49682: PUSH
49683: LD_INT 4
49685: NEG
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: PUSH
49691: LD_INT 4
49693: NEG
49694: PUSH
49695: LD_INT 5
49697: NEG
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 3
49705: NEG
49706: PUSH
49707: LD_INT 4
49709: NEG
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 3
49717: NEG
49718: PUSH
49719: LD_INT 3
49721: NEG
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: LD_INT 4
49729: NEG
49730: PUSH
49731: LD_INT 3
49733: NEG
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 5
49741: NEG
49742: PUSH
49743: LD_INT 4
49745: NEG
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 5
49753: NEG
49754: PUSH
49755: LD_INT 5
49757: NEG
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 3
49765: NEG
49766: PUSH
49767: LD_INT 5
49769: NEG
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 5
49777: NEG
49778: PUSH
49779: LD_INT 3
49781: NEG
49782: PUSH
49783: EMPTY
49784: LIST
49785: LIST
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: LIST
49791: LIST
49792: LIST
49793: LIST
49794: LIST
49795: LIST
49796: LIST
49797: LIST
49798: LIST
49799: LIST
49800: LIST
49801: LIST
49802: LIST
49803: LIST
49804: LIST
49805: LIST
49806: LIST
49807: LIST
49808: LIST
49809: LIST
49810: LIST
49811: LIST
49812: LIST
49813: LIST
49814: LIST
49815: LIST
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: LIST
49824: LIST
49825: LIST
49826: LIST
49827: LIST
49828: LIST
49829: LIST
49830: LIST
49831: LIST
49832: LIST
49833: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49834: LD_ADDR_VAR 0 30
49838: PUSH
49839: LD_INT 4
49841: PUSH
49842: LD_INT 4
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 4
49851: PUSH
49852: LD_INT 3
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 5
49861: PUSH
49862: LD_INT 4
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: PUSH
49869: LD_INT 5
49871: PUSH
49872: LD_INT 5
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 4
49881: PUSH
49882: LD_INT 5
49884: PUSH
49885: EMPTY
49886: LIST
49887: LIST
49888: PUSH
49889: LD_INT 3
49891: PUSH
49892: LD_INT 4
49894: PUSH
49895: EMPTY
49896: LIST
49897: LIST
49898: PUSH
49899: LD_INT 3
49901: PUSH
49902: LD_INT 3
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 5
49911: PUSH
49912: LD_INT 3
49914: PUSH
49915: EMPTY
49916: LIST
49917: LIST
49918: PUSH
49919: LD_INT 3
49921: PUSH
49922: LD_INT 5
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 0
49931: PUSH
49932: LD_INT 3
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: LD_INT 0
49941: PUSH
49942: LD_INT 2
49944: PUSH
49945: EMPTY
49946: LIST
49947: LIST
49948: PUSH
49949: LD_INT 1
49951: PUSH
49952: LD_INT 3
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 1
49961: PUSH
49962: LD_INT 4
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 0
49971: PUSH
49972: LD_INT 4
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 1
49981: NEG
49982: PUSH
49983: LD_INT 3
49985: PUSH
49986: EMPTY
49987: LIST
49988: LIST
49989: PUSH
49990: LD_INT 1
49992: NEG
49993: PUSH
49994: LD_INT 2
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 2
50003: PUSH
50004: LD_INT 4
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 2
50013: NEG
50014: PUSH
50015: LD_INT 2
50017: PUSH
50018: EMPTY
50019: LIST
50020: LIST
50021: PUSH
50022: LD_INT 4
50024: NEG
50025: PUSH
50026: LD_INT 0
50028: PUSH
50029: EMPTY
50030: LIST
50031: LIST
50032: PUSH
50033: LD_INT 4
50035: NEG
50036: PUSH
50037: LD_INT 1
50039: NEG
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 3
50047: NEG
50048: PUSH
50049: LD_INT 0
50051: PUSH
50052: EMPTY
50053: LIST
50054: LIST
50055: PUSH
50056: LD_INT 3
50058: NEG
50059: PUSH
50060: LD_INT 1
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 4
50069: NEG
50070: PUSH
50071: LD_INT 1
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: LD_INT 5
50080: NEG
50081: PUSH
50082: LD_INT 0
50084: PUSH
50085: EMPTY
50086: LIST
50087: LIST
50088: PUSH
50089: LD_INT 5
50091: NEG
50092: PUSH
50093: LD_INT 1
50095: NEG
50096: PUSH
50097: EMPTY
50098: LIST
50099: LIST
50100: PUSH
50101: LD_INT 5
50103: NEG
50104: PUSH
50105: LD_INT 2
50107: NEG
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: LD_INT 3
50115: NEG
50116: PUSH
50117: LD_INT 2
50119: PUSH
50120: EMPTY
50121: LIST
50122: LIST
50123: PUSH
50124: LD_INT 3
50126: NEG
50127: PUSH
50128: LD_INT 3
50130: NEG
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 3
50138: NEG
50139: PUSH
50140: LD_INT 4
50142: NEG
50143: PUSH
50144: EMPTY
50145: LIST
50146: LIST
50147: PUSH
50148: LD_INT 2
50150: NEG
50151: PUSH
50152: LD_INT 3
50154: NEG
50155: PUSH
50156: EMPTY
50157: LIST
50158: LIST
50159: PUSH
50160: LD_INT 2
50162: NEG
50163: PUSH
50164: LD_INT 2
50166: NEG
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 3
50174: NEG
50175: PUSH
50176: LD_INT 2
50178: NEG
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 4
50186: NEG
50187: PUSH
50188: LD_INT 3
50190: NEG
50191: PUSH
50192: EMPTY
50193: LIST
50194: LIST
50195: PUSH
50196: LD_INT 4
50198: NEG
50199: PUSH
50200: LD_INT 4
50202: NEG
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 2
50210: NEG
50211: PUSH
50212: LD_INT 4
50214: NEG
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 4
50222: NEG
50223: PUSH
50224: LD_INT 2
50226: NEG
50227: PUSH
50228: EMPTY
50229: LIST
50230: LIST
50231: PUSH
50232: LD_INT 0
50234: PUSH
50235: LD_INT 4
50237: NEG
50238: PUSH
50239: EMPTY
50240: LIST
50241: LIST
50242: PUSH
50243: LD_INT 0
50245: PUSH
50246: LD_INT 5
50248: NEG
50249: PUSH
50250: EMPTY
50251: LIST
50252: LIST
50253: PUSH
50254: LD_INT 1
50256: PUSH
50257: LD_INT 4
50259: NEG
50260: PUSH
50261: EMPTY
50262: LIST
50263: LIST
50264: PUSH
50265: LD_INT 1
50267: PUSH
50268: LD_INT 3
50270: NEG
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 0
50278: PUSH
50279: LD_INT 3
50281: NEG
50282: PUSH
50283: EMPTY
50284: LIST
50285: LIST
50286: PUSH
50287: LD_INT 1
50289: NEG
50290: PUSH
50291: LD_INT 4
50293: NEG
50294: PUSH
50295: EMPTY
50296: LIST
50297: LIST
50298: PUSH
50299: LD_INT 1
50301: NEG
50302: PUSH
50303: LD_INT 5
50305: NEG
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 2
50313: PUSH
50314: LD_INT 3
50316: NEG
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 2
50324: NEG
50325: PUSH
50326: LD_INT 5
50328: NEG
50329: PUSH
50330: EMPTY
50331: LIST
50332: LIST
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: LIST
50338: LIST
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: LIST
50344: LIST
50345: LIST
50346: LIST
50347: LIST
50348: LIST
50349: LIST
50350: LIST
50351: LIST
50352: LIST
50353: LIST
50354: LIST
50355: LIST
50356: LIST
50357: LIST
50358: LIST
50359: LIST
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: LIST
50366: LIST
50367: LIST
50368: LIST
50369: LIST
50370: LIST
50371: LIST
50372: LIST
50373: LIST
50374: LIST
50375: LIST
50376: LIST
50377: LIST
50378: LIST
50379: LIST
50380: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
50381: LD_ADDR_VAR 0 31
50385: PUSH
50386: LD_INT 0
50388: PUSH
50389: LD_INT 4
50391: PUSH
50392: EMPTY
50393: LIST
50394: LIST
50395: PUSH
50396: LD_INT 0
50398: PUSH
50399: LD_INT 3
50401: PUSH
50402: EMPTY
50403: LIST
50404: LIST
50405: PUSH
50406: LD_INT 1
50408: PUSH
50409: LD_INT 4
50411: PUSH
50412: EMPTY
50413: LIST
50414: LIST
50415: PUSH
50416: LD_INT 1
50418: PUSH
50419: LD_INT 5
50421: PUSH
50422: EMPTY
50423: LIST
50424: LIST
50425: PUSH
50426: LD_INT 0
50428: PUSH
50429: LD_INT 5
50431: PUSH
50432: EMPTY
50433: LIST
50434: LIST
50435: PUSH
50436: LD_INT 1
50438: NEG
50439: PUSH
50440: LD_INT 4
50442: PUSH
50443: EMPTY
50444: LIST
50445: LIST
50446: PUSH
50447: LD_INT 1
50449: NEG
50450: PUSH
50451: LD_INT 3
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 2
50460: PUSH
50461: LD_INT 5
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 2
50470: NEG
50471: PUSH
50472: LD_INT 3
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 3
50481: NEG
50482: PUSH
50483: LD_INT 0
50485: PUSH
50486: EMPTY
50487: LIST
50488: LIST
50489: PUSH
50490: LD_INT 3
50492: NEG
50493: PUSH
50494: LD_INT 1
50496: NEG
50497: PUSH
50498: EMPTY
50499: LIST
50500: LIST
50501: PUSH
50502: LD_INT 2
50504: NEG
50505: PUSH
50506: LD_INT 0
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 2
50515: NEG
50516: PUSH
50517: LD_INT 1
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: PUSH
50524: LD_INT 3
50526: NEG
50527: PUSH
50528: LD_INT 1
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: PUSH
50535: LD_INT 4
50537: NEG
50538: PUSH
50539: LD_INT 0
50541: PUSH
50542: EMPTY
50543: LIST
50544: LIST
50545: PUSH
50546: LD_INT 4
50548: NEG
50549: PUSH
50550: LD_INT 1
50552: NEG
50553: PUSH
50554: EMPTY
50555: LIST
50556: LIST
50557: PUSH
50558: LD_INT 4
50560: NEG
50561: PUSH
50562: LD_INT 2
50564: NEG
50565: PUSH
50566: EMPTY
50567: LIST
50568: LIST
50569: PUSH
50570: LD_INT 2
50572: NEG
50573: PUSH
50574: LD_INT 2
50576: PUSH
50577: EMPTY
50578: LIST
50579: LIST
50580: PUSH
50581: LD_INT 4
50583: NEG
50584: PUSH
50585: LD_INT 4
50587: NEG
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 4
50595: NEG
50596: PUSH
50597: LD_INT 5
50599: NEG
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 3
50607: NEG
50608: PUSH
50609: LD_INT 4
50611: NEG
50612: PUSH
50613: EMPTY
50614: LIST
50615: LIST
50616: PUSH
50617: LD_INT 3
50619: NEG
50620: PUSH
50621: LD_INT 3
50623: NEG
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 4
50631: NEG
50632: PUSH
50633: LD_INT 3
50635: NEG
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: PUSH
50641: LD_INT 5
50643: NEG
50644: PUSH
50645: LD_INT 4
50647: NEG
50648: PUSH
50649: EMPTY
50650: LIST
50651: LIST
50652: PUSH
50653: LD_INT 5
50655: NEG
50656: PUSH
50657: LD_INT 5
50659: NEG
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 3
50667: NEG
50668: PUSH
50669: LD_INT 5
50671: NEG
50672: PUSH
50673: EMPTY
50674: LIST
50675: LIST
50676: PUSH
50677: LD_INT 5
50679: NEG
50680: PUSH
50681: LD_INT 3
50683: NEG
50684: PUSH
50685: EMPTY
50686: LIST
50687: LIST
50688: PUSH
50689: LD_INT 0
50691: PUSH
50692: LD_INT 3
50694: NEG
50695: PUSH
50696: EMPTY
50697: LIST
50698: LIST
50699: PUSH
50700: LD_INT 0
50702: PUSH
50703: LD_INT 4
50705: NEG
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 1
50713: PUSH
50714: LD_INT 3
50716: NEG
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 1
50724: PUSH
50725: LD_INT 2
50727: NEG
50728: PUSH
50729: EMPTY
50730: LIST
50731: LIST
50732: PUSH
50733: LD_INT 0
50735: PUSH
50736: LD_INT 2
50738: NEG
50739: PUSH
50740: EMPTY
50741: LIST
50742: LIST
50743: PUSH
50744: LD_INT 1
50746: NEG
50747: PUSH
50748: LD_INT 3
50750: NEG
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 1
50758: NEG
50759: PUSH
50760: LD_INT 4
50762: NEG
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 2
50770: PUSH
50771: LD_INT 2
50773: NEG
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 2
50781: NEG
50782: PUSH
50783: LD_INT 4
50785: NEG
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: LD_INT 4
50793: PUSH
50794: LD_INT 0
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 4
50803: PUSH
50804: LD_INT 1
50806: NEG
50807: PUSH
50808: EMPTY
50809: LIST
50810: LIST
50811: PUSH
50812: LD_INT 5
50814: PUSH
50815: LD_INT 0
50817: PUSH
50818: EMPTY
50819: LIST
50820: LIST
50821: PUSH
50822: LD_INT 5
50824: PUSH
50825: LD_INT 1
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 4
50834: PUSH
50835: LD_INT 1
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 3
50844: PUSH
50845: LD_INT 0
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 3
50854: PUSH
50855: LD_INT 1
50857: NEG
50858: PUSH
50859: EMPTY
50860: LIST
50861: LIST
50862: PUSH
50863: LD_INT 3
50865: PUSH
50866: LD_INT 2
50868: NEG
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 5
50876: PUSH
50877: LD_INT 2
50879: PUSH
50880: EMPTY
50881: LIST
50882: LIST
50883: PUSH
50884: EMPTY
50885: LIST
50886: LIST
50887: LIST
50888: LIST
50889: LIST
50890: LIST
50891: LIST
50892: LIST
50893: LIST
50894: LIST
50895: LIST
50896: LIST
50897: LIST
50898: LIST
50899: LIST
50900: LIST
50901: LIST
50902: LIST
50903: LIST
50904: LIST
50905: LIST
50906: LIST
50907: LIST
50908: LIST
50909: LIST
50910: LIST
50911: LIST
50912: LIST
50913: LIST
50914: LIST
50915: LIST
50916: LIST
50917: LIST
50918: LIST
50919: LIST
50920: LIST
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
50931: LD_ADDR_VAR 0 32
50935: PUSH
50936: LD_INT 4
50938: NEG
50939: PUSH
50940: LD_INT 0
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: PUSH
50947: LD_INT 4
50949: NEG
50950: PUSH
50951: LD_INT 1
50953: NEG
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 3
50961: NEG
50962: PUSH
50963: LD_INT 0
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 3
50972: NEG
50973: PUSH
50974: LD_INT 1
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 4
50983: NEG
50984: PUSH
50985: LD_INT 1
50987: PUSH
50988: EMPTY
50989: LIST
50990: LIST
50991: PUSH
50992: LD_INT 5
50994: NEG
50995: PUSH
50996: LD_INT 0
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 5
51005: NEG
51006: PUSH
51007: LD_INT 1
51009: NEG
51010: PUSH
51011: EMPTY
51012: LIST
51013: LIST
51014: PUSH
51015: LD_INT 5
51017: NEG
51018: PUSH
51019: LD_INT 2
51021: NEG
51022: PUSH
51023: EMPTY
51024: LIST
51025: LIST
51026: PUSH
51027: LD_INT 3
51029: NEG
51030: PUSH
51031: LD_INT 2
51033: PUSH
51034: EMPTY
51035: LIST
51036: LIST
51037: PUSH
51038: LD_INT 3
51040: NEG
51041: PUSH
51042: LD_INT 3
51044: NEG
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 3
51052: NEG
51053: PUSH
51054: LD_INT 4
51056: NEG
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 2
51064: NEG
51065: PUSH
51066: LD_INT 3
51068: NEG
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 2
51076: NEG
51077: PUSH
51078: LD_INT 2
51080: NEG
51081: PUSH
51082: EMPTY
51083: LIST
51084: LIST
51085: PUSH
51086: LD_INT 3
51088: NEG
51089: PUSH
51090: LD_INT 2
51092: NEG
51093: PUSH
51094: EMPTY
51095: LIST
51096: LIST
51097: PUSH
51098: LD_INT 4
51100: NEG
51101: PUSH
51102: LD_INT 3
51104: NEG
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 4
51112: NEG
51113: PUSH
51114: LD_INT 4
51116: NEG
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 2
51124: NEG
51125: PUSH
51126: LD_INT 4
51128: NEG
51129: PUSH
51130: EMPTY
51131: LIST
51132: LIST
51133: PUSH
51134: LD_INT 4
51136: NEG
51137: PUSH
51138: LD_INT 2
51140: NEG
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 0
51148: PUSH
51149: LD_INT 4
51151: NEG
51152: PUSH
51153: EMPTY
51154: LIST
51155: LIST
51156: PUSH
51157: LD_INT 0
51159: PUSH
51160: LD_INT 5
51162: NEG
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 1
51170: PUSH
51171: LD_INT 4
51173: NEG
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: LD_INT 1
51181: PUSH
51182: LD_INT 3
51184: NEG
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 0
51192: PUSH
51193: LD_INT 3
51195: NEG
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 1
51203: NEG
51204: PUSH
51205: LD_INT 4
51207: NEG
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: LD_INT 1
51215: NEG
51216: PUSH
51217: LD_INT 5
51219: NEG
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 2
51227: PUSH
51228: LD_INT 3
51230: NEG
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 2
51238: NEG
51239: PUSH
51240: LD_INT 5
51242: NEG
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: PUSH
51248: LD_INT 3
51250: PUSH
51251: LD_INT 0
51253: PUSH
51254: EMPTY
51255: LIST
51256: LIST
51257: PUSH
51258: LD_INT 3
51260: PUSH
51261: LD_INT 1
51263: NEG
51264: PUSH
51265: EMPTY
51266: LIST
51267: LIST
51268: PUSH
51269: LD_INT 4
51271: PUSH
51272: LD_INT 0
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: PUSH
51279: LD_INT 4
51281: PUSH
51282: LD_INT 1
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 3
51291: PUSH
51292: LD_INT 1
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 2
51301: PUSH
51302: LD_INT 0
51304: PUSH
51305: EMPTY
51306: LIST
51307: LIST
51308: PUSH
51309: LD_INT 2
51311: PUSH
51312: LD_INT 1
51314: NEG
51315: PUSH
51316: EMPTY
51317: LIST
51318: LIST
51319: PUSH
51320: LD_INT 2
51322: PUSH
51323: LD_INT 2
51325: NEG
51326: PUSH
51327: EMPTY
51328: LIST
51329: LIST
51330: PUSH
51331: LD_INT 4
51333: PUSH
51334: LD_INT 2
51336: PUSH
51337: EMPTY
51338: LIST
51339: LIST
51340: PUSH
51341: LD_INT 4
51343: PUSH
51344: LD_INT 4
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: LD_INT 4
51353: PUSH
51354: LD_INT 3
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 5
51363: PUSH
51364: LD_INT 4
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 5
51373: PUSH
51374: LD_INT 5
51376: PUSH
51377: EMPTY
51378: LIST
51379: LIST
51380: PUSH
51381: LD_INT 4
51383: PUSH
51384: LD_INT 5
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: PUSH
51391: LD_INT 3
51393: PUSH
51394: LD_INT 4
51396: PUSH
51397: EMPTY
51398: LIST
51399: LIST
51400: PUSH
51401: LD_INT 3
51403: PUSH
51404: LD_INT 3
51406: PUSH
51407: EMPTY
51408: LIST
51409: LIST
51410: PUSH
51411: LD_INT 5
51413: PUSH
51414: LD_INT 3
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 3
51423: PUSH
51424: LD_INT 5
51426: PUSH
51427: EMPTY
51428: LIST
51429: LIST
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: LIST
51435: LIST
51436: LIST
51437: LIST
51438: LIST
51439: LIST
51440: LIST
51441: LIST
51442: LIST
51443: LIST
51444: LIST
51445: LIST
51446: LIST
51447: LIST
51448: LIST
51449: LIST
51450: LIST
51451: LIST
51452: LIST
51453: LIST
51454: LIST
51455: LIST
51456: LIST
51457: LIST
51458: LIST
51459: LIST
51460: LIST
51461: LIST
51462: LIST
51463: LIST
51464: LIST
51465: LIST
51466: LIST
51467: LIST
51468: LIST
51469: LIST
51470: LIST
51471: LIST
51472: LIST
51473: LIST
51474: LIST
51475: LIST
51476: LIST
51477: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
51478: LD_ADDR_VAR 0 33
51482: PUSH
51483: LD_INT 4
51485: NEG
51486: PUSH
51487: LD_INT 4
51489: NEG
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 4
51497: NEG
51498: PUSH
51499: LD_INT 5
51501: NEG
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 3
51509: NEG
51510: PUSH
51511: LD_INT 4
51513: NEG
51514: PUSH
51515: EMPTY
51516: LIST
51517: LIST
51518: PUSH
51519: LD_INT 3
51521: NEG
51522: PUSH
51523: LD_INT 3
51525: NEG
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 4
51533: NEG
51534: PUSH
51535: LD_INT 3
51537: NEG
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 5
51545: NEG
51546: PUSH
51547: LD_INT 4
51549: NEG
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 5
51557: NEG
51558: PUSH
51559: LD_INT 5
51561: NEG
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 3
51569: NEG
51570: PUSH
51571: LD_INT 5
51573: NEG
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 5
51581: NEG
51582: PUSH
51583: LD_INT 3
51585: NEG
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 0
51593: PUSH
51594: LD_INT 3
51596: NEG
51597: PUSH
51598: EMPTY
51599: LIST
51600: LIST
51601: PUSH
51602: LD_INT 0
51604: PUSH
51605: LD_INT 4
51607: NEG
51608: PUSH
51609: EMPTY
51610: LIST
51611: LIST
51612: PUSH
51613: LD_INT 1
51615: PUSH
51616: LD_INT 3
51618: NEG
51619: PUSH
51620: EMPTY
51621: LIST
51622: LIST
51623: PUSH
51624: LD_INT 1
51626: PUSH
51627: LD_INT 2
51629: NEG
51630: PUSH
51631: EMPTY
51632: LIST
51633: LIST
51634: PUSH
51635: LD_INT 0
51637: PUSH
51638: LD_INT 2
51640: NEG
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 1
51648: NEG
51649: PUSH
51650: LD_INT 3
51652: NEG
51653: PUSH
51654: EMPTY
51655: LIST
51656: LIST
51657: PUSH
51658: LD_INT 1
51660: NEG
51661: PUSH
51662: LD_INT 4
51664: NEG
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 2
51672: PUSH
51673: LD_INT 2
51675: NEG
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: LD_INT 2
51683: NEG
51684: PUSH
51685: LD_INT 4
51687: NEG
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 4
51695: PUSH
51696: LD_INT 0
51698: PUSH
51699: EMPTY
51700: LIST
51701: LIST
51702: PUSH
51703: LD_INT 4
51705: PUSH
51706: LD_INT 1
51708: NEG
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: PUSH
51714: LD_INT 5
51716: PUSH
51717: LD_INT 0
51719: PUSH
51720: EMPTY
51721: LIST
51722: LIST
51723: PUSH
51724: LD_INT 5
51726: PUSH
51727: LD_INT 1
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 4
51736: PUSH
51737: LD_INT 1
51739: PUSH
51740: EMPTY
51741: LIST
51742: LIST
51743: PUSH
51744: LD_INT 3
51746: PUSH
51747: LD_INT 0
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 3
51756: PUSH
51757: LD_INT 1
51759: NEG
51760: PUSH
51761: EMPTY
51762: LIST
51763: LIST
51764: PUSH
51765: LD_INT 3
51767: PUSH
51768: LD_INT 2
51770: NEG
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 5
51778: PUSH
51779: LD_INT 2
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: LD_INT 3
51788: PUSH
51789: LD_INT 3
51791: PUSH
51792: EMPTY
51793: LIST
51794: LIST
51795: PUSH
51796: LD_INT 3
51798: PUSH
51799: LD_INT 2
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 4
51808: PUSH
51809: LD_INT 3
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 4
51818: PUSH
51819: LD_INT 4
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 3
51828: PUSH
51829: LD_INT 4
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 2
51838: PUSH
51839: LD_INT 3
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 2
51848: PUSH
51849: LD_INT 2
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 4
51858: PUSH
51859: LD_INT 2
51861: PUSH
51862: EMPTY
51863: LIST
51864: LIST
51865: PUSH
51866: LD_INT 2
51868: PUSH
51869: LD_INT 4
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: PUSH
51876: LD_INT 0
51878: PUSH
51879: LD_INT 4
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: PUSH
51886: LD_INT 0
51888: PUSH
51889: LD_INT 3
51891: PUSH
51892: EMPTY
51893: LIST
51894: LIST
51895: PUSH
51896: LD_INT 1
51898: PUSH
51899: LD_INT 4
51901: PUSH
51902: EMPTY
51903: LIST
51904: LIST
51905: PUSH
51906: LD_INT 1
51908: PUSH
51909: LD_INT 5
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 0
51918: PUSH
51919: LD_INT 5
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 1
51928: NEG
51929: PUSH
51930: LD_INT 4
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 1
51939: NEG
51940: PUSH
51941: LD_INT 3
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 2
51950: PUSH
51951: LD_INT 5
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 2
51960: NEG
51961: PUSH
51962: LD_INT 3
51964: PUSH
51965: EMPTY
51966: LIST
51967: LIST
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: LIST
51973: LIST
51974: LIST
51975: LIST
51976: LIST
51977: LIST
51978: LIST
51979: LIST
51980: LIST
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: LIST
51988: LIST
51989: LIST
51990: LIST
51991: LIST
51992: LIST
51993: LIST
51994: LIST
51995: LIST
51996: LIST
51997: LIST
51998: LIST
51999: LIST
52000: LIST
52001: LIST
52002: LIST
52003: LIST
52004: LIST
52005: LIST
52006: LIST
52007: LIST
52008: LIST
52009: LIST
52010: LIST
52011: LIST
52012: LIST
52013: LIST
52014: LIST
52015: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
52016: LD_ADDR_VAR 0 34
52020: PUSH
52021: LD_INT 0
52023: PUSH
52024: LD_INT 4
52026: NEG
52027: PUSH
52028: EMPTY
52029: LIST
52030: LIST
52031: PUSH
52032: LD_INT 0
52034: PUSH
52035: LD_INT 5
52037: NEG
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 1
52045: PUSH
52046: LD_INT 4
52048: NEG
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 1
52056: PUSH
52057: LD_INT 3
52059: NEG
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 0
52067: PUSH
52068: LD_INT 3
52070: NEG
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 1
52078: NEG
52079: PUSH
52080: LD_INT 4
52082: NEG
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 1
52090: NEG
52091: PUSH
52092: LD_INT 5
52094: NEG
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 2
52102: PUSH
52103: LD_INT 3
52105: NEG
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 2
52113: NEG
52114: PUSH
52115: LD_INT 5
52117: NEG
52118: PUSH
52119: EMPTY
52120: LIST
52121: LIST
52122: PUSH
52123: LD_INT 3
52125: PUSH
52126: LD_INT 0
52128: PUSH
52129: EMPTY
52130: LIST
52131: LIST
52132: PUSH
52133: LD_INT 3
52135: PUSH
52136: LD_INT 1
52138: NEG
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 4
52146: PUSH
52147: LD_INT 0
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 4
52156: PUSH
52157: LD_INT 1
52159: PUSH
52160: EMPTY
52161: LIST
52162: LIST
52163: PUSH
52164: LD_INT 3
52166: PUSH
52167: LD_INT 1
52169: PUSH
52170: EMPTY
52171: LIST
52172: LIST
52173: PUSH
52174: LD_INT 2
52176: PUSH
52177: LD_INT 0
52179: PUSH
52180: EMPTY
52181: LIST
52182: LIST
52183: PUSH
52184: LD_INT 2
52186: PUSH
52187: LD_INT 1
52189: NEG
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 2
52197: PUSH
52198: LD_INT 2
52200: NEG
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 4
52208: PUSH
52209: LD_INT 2
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 4
52218: PUSH
52219: LD_INT 4
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 4
52228: PUSH
52229: LD_INT 3
52231: PUSH
52232: EMPTY
52233: LIST
52234: LIST
52235: PUSH
52236: LD_INT 5
52238: PUSH
52239: LD_INT 4
52241: PUSH
52242: EMPTY
52243: LIST
52244: LIST
52245: PUSH
52246: LD_INT 5
52248: PUSH
52249: LD_INT 5
52251: PUSH
52252: EMPTY
52253: LIST
52254: LIST
52255: PUSH
52256: LD_INT 4
52258: PUSH
52259: LD_INT 5
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 3
52268: PUSH
52269: LD_INT 4
52271: PUSH
52272: EMPTY
52273: LIST
52274: LIST
52275: PUSH
52276: LD_INT 3
52278: PUSH
52279: LD_INT 3
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 5
52288: PUSH
52289: LD_INT 3
52291: PUSH
52292: EMPTY
52293: LIST
52294: LIST
52295: PUSH
52296: LD_INT 3
52298: PUSH
52299: LD_INT 5
52301: PUSH
52302: EMPTY
52303: LIST
52304: LIST
52305: PUSH
52306: LD_INT 0
52308: PUSH
52309: LD_INT 3
52311: PUSH
52312: EMPTY
52313: LIST
52314: LIST
52315: PUSH
52316: LD_INT 0
52318: PUSH
52319: LD_INT 2
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 1
52328: PUSH
52329: LD_INT 3
52331: PUSH
52332: EMPTY
52333: LIST
52334: LIST
52335: PUSH
52336: LD_INT 1
52338: PUSH
52339: LD_INT 4
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 0
52348: PUSH
52349: LD_INT 4
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 1
52358: NEG
52359: PUSH
52360: LD_INT 3
52362: PUSH
52363: EMPTY
52364: LIST
52365: LIST
52366: PUSH
52367: LD_INT 1
52369: NEG
52370: PUSH
52371: LD_INT 2
52373: PUSH
52374: EMPTY
52375: LIST
52376: LIST
52377: PUSH
52378: LD_INT 2
52380: PUSH
52381: LD_INT 4
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 2
52390: NEG
52391: PUSH
52392: LD_INT 2
52394: PUSH
52395: EMPTY
52396: LIST
52397: LIST
52398: PUSH
52399: LD_INT 4
52401: NEG
52402: PUSH
52403: LD_INT 0
52405: PUSH
52406: EMPTY
52407: LIST
52408: LIST
52409: PUSH
52410: LD_INT 4
52412: NEG
52413: PUSH
52414: LD_INT 1
52416: NEG
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: PUSH
52422: LD_INT 3
52424: NEG
52425: PUSH
52426: LD_INT 0
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 3
52435: NEG
52436: PUSH
52437: LD_INT 1
52439: PUSH
52440: EMPTY
52441: LIST
52442: LIST
52443: PUSH
52444: LD_INT 4
52446: NEG
52447: PUSH
52448: LD_INT 1
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: LD_INT 5
52457: NEG
52458: PUSH
52459: LD_INT 0
52461: PUSH
52462: EMPTY
52463: LIST
52464: LIST
52465: PUSH
52466: LD_INT 5
52468: NEG
52469: PUSH
52470: LD_INT 1
52472: NEG
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 5
52480: NEG
52481: PUSH
52482: LD_INT 2
52484: NEG
52485: PUSH
52486: EMPTY
52487: LIST
52488: LIST
52489: PUSH
52490: LD_INT 3
52492: NEG
52493: PUSH
52494: LD_INT 2
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: LIST
52517: LIST
52518: LIST
52519: LIST
52520: LIST
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: LIST
52534: LIST
52535: LIST
52536: LIST
52537: LIST
52538: LIST
52539: LIST
52540: LIST
52541: LIST
52542: LIST
52543: LIST
52544: LIST
52545: LIST
52546: LIST
52547: ST_TO_ADDR
// end ; end ;
52548: GO 52551
52550: POP
// case btype of b_depot , b_warehouse :
52551: LD_VAR 0 1
52555: PUSH
52556: LD_INT 0
52558: DOUBLE
52559: EQUAL
52560: IFTRUE 52570
52562: LD_INT 1
52564: DOUBLE
52565: EQUAL
52566: IFTRUE 52570
52568: GO 52771
52570: POP
// case nation of nation_american :
52571: LD_VAR 0 5
52575: PUSH
52576: LD_INT 1
52578: DOUBLE
52579: EQUAL
52580: IFTRUE 52584
52582: GO 52640
52584: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
52585: LD_ADDR_VAR 0 9
52589: PUSH
52590: LD_VAR 0 11
52594: PUSH
52595: LD_VAR 0 12
52599: PUSH
52600: LD_VAR 0 13
52604: PUSH
52605: LD_VAR 0 14
52609: PUSH
52610: LD_VAR 0 15
52614: PUSH
52615: LD_VAR 0 16
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: LIST
52624: LIST
52625: LIST
52626: LIST
52627: PUSH
52628: LD_VAR 0 4
52632: PUSH
52633: LD_INT 1
52635: PLUS
52636: ARRAY
52637: ST_TO_ADDR
52638: GO 52769
52640: LD_INT 2
52642: DOUBLE
52643: EQUAL
52644: IFTRUE 52648
52646: GO 52704
52648: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
52649: LD_ADDR_VAR 0 9
52653: PUSH
52654: LD_VAR 0 17
52658: PUSH
52659: LD_VAR 0 18
52663: PUSH
52664: LD_VAR 0 19
52668: PUSH
52669: LD_VAR 0 20
52673: PUSH
52674: LD_VAR 0 21
52678: PUSH
52679: LD_VAR 0 22
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: LIST
52688: LIST
52689: LIST
52690: LIST
52691: PUSH
52692: LD_VAR 0 4
52696: PUSH
52697: LD_INT 1
52699: PLUS
52700: ARRAY
52701: ST_TO_ADDR
52702: GO 52769
52704: LD_INT 3
52706: DOUBLE
52707: EQUAL
52708: IFTRUE 52712
52710: GO 52768
52712: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52713: LD_ADDR_VAR 0 9
52717: PUSH
52718: LD_VAR 0 23
52722: PUSH
52723: LD_VAR 0 24
52727: PUSH
52728: LD_VAR 0 25
52732: PUSH
52733: LD_VAR 0 26
52737: PUSH
52738: LD_VAR 0 27
52742: PUSH
52743: LD_VAR 0 28
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: LIST
52752: LIST
52753: LIST
52754: LIST
52755: PUSH
52756: LD_VAR 0 4
52760: PUSH
52761: LD_INT 1
52763: PLUS
52764: ARRAY
52765: ST_TO_ADDR
52766: GO 52769
52768: POP
52769: GO 53318
52771: LD_INT 2
52773: DOUBLE
52774: EQUAL
52775: IFTRUE 52785
52777: LD_INT 3
52779: DOUBLE
52780: EQUAL
52781: IFTRUE 52785
52783: GO 52841
52785: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52786: LD_ADDR_VAR 0 9
52790: PUSH
52791: LD_VAR 0 29
52795: PUSH
52796: LD_VAR 0 30
52800: PUSH
52801: LD_VAR 0 31
52805: PUSH
52806: LD_VAR 0 32
52810: PUSH
52811: LD_VAR 0 33
52815: PUSH
52816: LD_VAR 0 34
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: LIST
52828: PUSH
52829: LD_VAR 0 4
52833: PUSH
52834: LD_INT 1
52836: PLUS
52837: ARRAY
52838: ST_TO_ADDR
52839: GO 53318
52841: LD_INT 16
52843: DOUBLE
52844: EQUAL
52845: IFTRUE 52897
52847: LD_INT 17
52849: DOUBLE
52850: EQUAL
52851: IFTRUE 52897
52853: LD_INT 18
52855: DOUBLE
52856: EQUAL
52857: IFTRUE 52897
52859: LD_INT 19
52861: DOUBLE
52862: EQUAL
52863: IFTRUE 52897
52865: LD_INT 20
52867: DOUBLE
52868: EQUAL
52869: IFTRUE 52897
52871: LD_INT 21
52873: DOUBLE
52874: EQUAL
52875: IFTRUE 52897
52877: LD_INT 23
52879: DOUBLE
52880: EQUAL
52881: IFTRUE 52897
52883: LD_INT 24
52885: DOUBLE
52886: EQUAL
52887: IFTRUE 52897
52889: LD_INT 25
52891: DOUBLE
52892: EQUAL
52893: IFTRUE 52897
52895: GO 52953
52897: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
52898: LD_ADDR_VAR 0 9
52902: PUSH
52903: LD_VAR 0 35
52907: PUSH
52908: LD_VAR 0 36
52912: PUSH
52913: LD_VAR 0 37
52917: PUSH
52918: LD_VAR 0 38
52922: PUSH
52923: LD_VAR 0 39
52927: PUSH
52928: LD_VAR 0 40
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: PUSH
52941: LD_VAR 0 4
52945: PUSH
52946: LD_INT 1
52948: PLUS
52949: ARRAY
52950: ST_TO_ADDR
52951: GO 53318
52953: LD_INT 6
52955: DOUBLE
52956: EQUAL
52957: IFTRUE 53009
52959: LD_INT 7
52961: DOUBLE
52962: EQUAL
52963: IFTRUE 53009
52965: LD_INT 8
52967: DOUBLE
52968: EQUAL
52969: IFTRUE 53009
52971: LD_INT 13
52973: DOUBLE
52974: EQUAL
52975: IFTRUE 53009
52977: LD_INT 12
52979: DOUBLE
52980: EQUAL
52981: IFTRUE 53009
52983: LD_INT 15
52985: DOUBLE
52986: EQUAL
52987: IFTRUE 53009
52989: LD_INT 11
52991: DOUBLE
52992: EQUAL
52993: IFTRUE 53009
52995: LD_INT 14
52997: DOUBLE
52998: EQUAL
52999: IFTRUE 53009
53001: LD_INT 10
53003: DOUBLE
53004: EQUAL
53005: IFTRUE 53009
53007: GO 53065
53009: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
53010: LD_ADDR_VAR 0 9
53014: PUSH
53015: LD_VAR 0 41
53019: PUSH
53020: LD_VAR 0 42
53024: PUSH
53025: LD_VAR 0 43
53029: PUSH
53030: LD_VAR 0 44
53034: PUSH
53035: LD_VAR 0 45
53039: PUSH
53040: LD_VAR 0 46
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: PUSH
53053: LD_VAR 0 4
53057: PUSH
53058: LD_INT 1
53060: PLUS
53061: ARRAY
53062: ST_TO_ADDR
53063: GO 53318
53065: LD_INT 36
53067: DOUBLE
53068: EQUAL
53069: IFTRUE 53073
53071: GO 53129
53073: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
53074: LD_ADDR_VAR 0 9
53078: PUSH
53079: LD_VAR 0 47
53083: PUSH
53084: LD_VAR 0 48
53088: PUSH
53089: LD_VAR 0 49
53093: PUSH
53094: LD_VAR 0 50
53098: PUSH
53099: LD_VAR 0 51
53103: PUSH
53104: LD_VAR 0 52
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: LIST
53115: LIST
53116: PUSH
53117: LD_VAR 0 4
53121: PUSH
53122: LD_INT 1
53124: PLUS
53125: ARRAY
53126: ST_TO_ADDR
53127: GO 53318
53129: LD_INT 4
53131: DOUBLE
53132: EQUAL
53133: IFTRUE 53155
53135: LD_INT 5
53137: DOUBLE
53138: EQUAL
53139: IFTRUE 53155
53141: LD_INT 34
53143: DOUBLE
53144: EQUAL
53145: IFTRUE 53155
53147: LD_INT 37
53149: DOUBLE
53150: EQUAL
53151: IFTRUE 53155
53153: GO 53211
53155: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
53156: LD_ADDR_VAR 0 9
53160: PUSH
53161: LD_VAR 0 53
53165: PUSH
53166: LD_VAR 0 54
53170: PUSH
53171: LD_VAR 0 55
53175: PUSH
53176: LD_VAR 0 56
53180: PUSH
53181: LD_VAR 0 57
53185: PUSH
53186: LD_VAR 0 58
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: PUSH
53199: LD_VAR 0 4
53203: PUSH
53204: LD_INT 1
53206: PLUS
53207: ARRAY
53208: ST_TO_ADDR
53209: GO 53318
53211: LD_INT 31
53213: DOUBLE
53214: EQUAL
53215: IFTRUE 53261
53217: LD_INT 32
53219: DOUBLE
53220: EQUAL
53221: IFTRUE 53261
53223: LD_INT 33
53225: DOUBLE
53226: EQUAL
53227: IFTRUE 53261
53229: LD_INT 27
53231: DOUBLE
53232: EQUAL
53233: IFTRUE 53261
53235: LD_INT 26
53237: DOUBLE
53238: EQUAL
53239: IFTRUE 53261
53241: LD_INT 28
53243: DOUBLE
53244: EQUAL
53245: IFTRUE 53261
53247: LD_INT 29
53249: DOUBLE
53250: EQUAL
53251: IFTRUE 53261
53253: LD_INT 30
53255: DOUBLE
53256: EQUAL
53257: IFTRUE 53261
53259: GO 53317
53261: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
53262: LD_ADDR_VAR 0 9
53266: PUSH
53267: LD_VAR 0 59
53271: PUSH
53272: LD_VAR 0 60
53276: PUSH
53277: LD_VAR 0 61
53281: PUSH
53282: LD_VAR 0 62
53286: PUSH
53287: LD_VAR 0 63
53291: PUSH
53292: LD_VAR 0 64
53296: PUSH
53297: EMPTY
53298: LIST
53299: LIST
53300: LIST
53301: LIST
53302: LIST
53303: LIST
53304: PUSH
53305: LD_VAR 0 4
53309: PUSH
53310: LD_INT 1
53312: PLUS
53313: ARRAY
53314: ST_TO_ADDR
53315: GO 53318
53317: POP
// temp_list2 = [ ] ;
53318: LD_ADDR_VAR 0 10
53322: PUSH
53323: EMPTY
53324: ST_TO_ADDR
// for i in temp_list do
53325: LD_ADDR_VAR 0 8
53329: PUSH
53330: LD_VAR 0 9
53334: PUSH
53335: FOR_IN
53336: IFFALSE 53388
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
53338: LD_ADDR_VAR 0 10
53342: PUSH
53343: LD_VAR 0 10
53347: PUSH
53348: LD_VAR 0 8
53352: PUSH
53353: LD_INT 1
53355: ARRAY
53356: PUSH
53357: LD_VAR 0 2
53361: PLUS
53362: PUSH
53363: LD_VAR 0 8
53367: PUSH
53368: LD_INT 2
53370: ARRAY
53371: PUSH
53372: LD_VAR 0 3
53376: PLUS
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: EMPTY
53383: LIST
53384: ADD
53385: ST_TO_ADDR
53386: GO 53335
53388: POP
53389: POP
// result = temp_list2 ;
53390: LD_ADDR_VAR 0 7
53394: PUSH
53395: LD_VAR 0 10
53399: ST_TO_ADDR
// end ;
53400: LD_VAR 0 7
53404: RET
// export function EnemyInRange ( unit , dist ) ; begin
53405: LD_INT 0
53407: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
53408: LD_ADDR_VAR 0 3
53412: PUSH
53413: LD_VAR 0 1
53417: PPUSH
53418: CALL_OW 255
53422: PPUSH
53423: LD_VAR 0 1
53427: PPUSH
53428: CALL_OW 250
53432: PPUSH
53433: LD_VAR 0 1
53437: PPUSH
53438: CALL_OW 251
53442: PPUSH
53443: LD_VAR 0 2
53447: PPUSH
53448: CALL 27533 0 4
53452: PUSH
53453: LD_INT 4
53455: ARRAY
53456: ST_TO_ADDR
// end ;
53457: LD_VAR 0 3
53461: RET
// export function PlayerSeeMe ( unit ) ; begin
53462: LD_INT 0
53464: PPUSH
// result := See ( your_side , unit ) ;
53465: LD_ADDR_VAR 0 2
53469: PUSH
53470: LD_OWVAR 2
53474: PPUSH
53475: LD_VAR 0 1
53479: PPUSH
53480: CALL_OW 292
53484: ST_TO_ADDR
// end ;
53485: LD_VAR 0 2
53489: RET
// export function ReverseDir ( unit ) ; begin
53490: LD_INT 0
53492: PPUSH
// if not unit then
53493: LD_VAR 0 1
53497: NOT
53498: IFFALSE 53502
// exit ;
53500: GO 53548
// result := [ 3 , 4 , 5 , 0 , 1 , 2 ] [ GetDir ( unit ) + 1 ] ;
53502: LD_ADDR_VAR 0 2
53506: PUSH
53507: LD_INT 3
53509: PUSH
53510: LD_INT 4
53512: PUSH
53513: LD_INT 5
53515: PUSH
53516: LD_INT 0
53518: PUSH
53519: LD_INT 1
53521: PUSH
53522: LD_INT 2
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: LIST
53529: LIST
53530: LIST
53531: LIST
53532: PUSH
53533: LD_VAR 0 1
53537: PPUSH
53538: CALL_OW 254
53542: PUSH
53543: LD_INT 1
53545: PLUS
53546: ARRAY
53547: ST_TO_ADDR
// end ;
53548: LD_VAR 0 2
53552: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
53553: LD_INT 0
53555: PPUSH
53556: PPUSH
53557: PPUSH
53558: PPUSH
53559: PPUSH
// if not hexes then
53560: LD_VAR 0 2
53564: NOT
53565: IFFALSE 53569
// exit ;
53567: GO 53717
// dist := 9999 ;
53569: LD_ADDR_VAR 0 5
53573: PUSH
53574: LD_INT 9999
53576: ST_TO_ADDR
// for i = 1 to hexes do
53577: LD_ADDR_VAR 0 4
53581: PUSH
53582: DOUBLE
53583: LD_INT 1
53585: DEC
53586: ST_TO_ADDR
53587: LD_VAR 0 2
53591: PUSH
53592: FOR_TO
53593: IFFALSE 53705
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
53595: LD_VAR 0 1
53599: PPUSH
53600: LD_VAR 0 2
53604: PUSH
53605: LD_VAR 0 4
53609: ARRAY
53610: PUSH
53611: LD_INT 1
53613: ARRAY
53614: PPUSH
53615: LD_VAR 0 2
53619: PUSH
53620: LD_VAR 0 4
53624: ARRAY
53625: PUSH
53626: LD_INT 2
53628: ARRAY
53629: PPUSH
53630: CALL_OW 297
53634: PUSH
53635: LD_VAR 0 5
53639: LESS
53640: IFFALSE 53703
// begin hex := hexes [ i ] ;
53642: LD_ADDR_VAR 0 7
53646: PUSH
53647: LD_VAR 0 2
53651: PUSH
53652: LD_VAR 0 4
53656: ARRAY
53657: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53658: LD_ADDR_VAR 0 5
53662: PUSH
53663: LD_VAR 0 1
53667: PPUSH
53668: LD_VAR 0 2
53672: PUSH
53673: LD_VAR 0 4
53677: ARRAY
53678: PUSH
53679: LD_INT 1
53681: ARRAY
53682: PPUSH
53683: LD_VAR 0 2
53687: PUSH
53688: LD_VAR 0 4
53692: ARRAY
53693: PUSH
53694: LD_INT 2
53696: ARRAY
53697: PPUSH
53698: CALL_OW 297
53702: ST_TO_ADDR
// end ; end ;
53703: GO 53592
53705: POP
53706: POP
// result := hex ;
53707: LD_ADDR_VAR 0 3
53711: PUSH
53712: LD_VAR 0 7
53716: ST_TO_ADDR
// end ;
53717: LD_VAR 0 3
53721: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53722: LD_INT 0
53724: PPUSH
53725: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53726: LD_VAR 0 1
53730: NOT
53731: PUSH
53732: LD_VAR 0 1
53736: PUSH
53737: LD_INT 21
53739: PUSH
53740: LD_INT 2
53742: PUSH
53743: EMPTY
53744: LIST
53745: LIST
53746: PUSH
53747: LD_INT 23
53749: PUSH
53750: LD_INT 2
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: EMPTY
53758: LIST
53759: LIST
53760: PPUSH
53761: CALL_OW 69
53765: IN
53766: NOT
53767: OR
53768: IFFALSE 53772
// exit ;
53770: GO 53819
// for i = 1 to 3 do
53772: LD_ADDR_VAR 0 3
53776: PUSH
53777: DOUBLE
53778: LD_INT 1
53780: DEC
53781: ST_TO_ADDR
53782: LD_INT 3
53784: PUSH
53785: FOR_TO
53786: IFFALSE 53817
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
53788: LD_VAR 0 1
53792: PPUSH
53793: CALL_OW 250
53797: PPUSH
53798: LD_VAR 0 1
53802: PPUSH
53803: CALL_OW 251
53807: PPUSH
53808: LD_INT 1
53810: PPUSH
53811: CALL_OW 453
53815: GO 53785
53817: POP
53818: POP
// end ;
53819: LD_VAR 0 2
53823: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53824: LD_INT 0
53826: PPUSH
53827: PPUSH
53828: PPUSH
53829: PPUSH
53830: PPUSH
53831: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
53832: LD_VAR 0 1
53836: NOT
53837: PUSH
53838: LD_VAR 0 2
53842: NOT
53843: OR
53844: PUSH
53845: LD_VAR 0 1
53849: PPUSH
53850: CALL_OW 314
53854: OR
53855: IFFALSE 53859
// exit ;
53857: GO 54300
// x := GetX ( enemy_unit ) ;
53859: LD_ADDR_VAR 0 7
53863: PUSH
53864: LD_VAR 0 2
53868: PPUSH
53869: CALL_OW 250
53873: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
53874: LD_ADDR_VAR 0 8
53878: PUSH
53879: LD_VAR 0 2
53883: PPUSH
53884: CALL_OW 251
53888: ST_TO_ADDR
// if not x or not y then
53889: LD_VAR 0 7
53893: NOT
53894: PUSH
53895: LD_VAR 0 8
53899: NOT
53900: OR
53901: IFFALSE 53905
// exit ;
53903: GO 54300
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
53905: LD_ADDR_VAR 0 6
53909: PUSH
53910: LD_VAR 0 7
53914: PPUSH
53915: LD_INT 0
53917: PPUSH
53918: LD_INT 4
53920: PPUSH
53921: CALL_OW 272
53925: PUSH
53926: LD_VAR 0 8
53930: PPUSH
53931: LD_INT 0
53933: PPUSH
53934: LD_INT 4
53936: PPUSH
53937: CALL_OW 273
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_VAR 0 7
53950: PPUSH
53951: LD_INT 1
53953: PPUSH
53954: LD_INT 4
53956: PPUSH
53957: CALL_OW 272
53961: PUSH
53962: LD_VAR 0 8
53966: PPUSH
53967: LD_INT 1
53969: PPUSH
53970: LD_INT 4
53972: PPUSH
53973: CALL_OW 273
53977: PUSH
53978: EMPTY
53979: LIST
53980: LIST
53981: PUSH
53982: LD_VAR 0 7
53986: PPUSH
53987: LD_INT 2
53989: PPUSH
53990: LD_INT 4
53992: PPUSH
53993: CALL_OW 272
53997: PUSH
53998: LD_VAR 0 8
54002: PPUSH
54003: LD_INT 2
54005: PPUSH
54006: LD_INT 4
54008: PPUSH
54009: CALL_OW 273
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_VAR 0 7
54022: PPUSH
54023: LD_INT 3
54025: PPUSH
54026: LD_INT 4
54028: PPUSH
54029: CALL_OW 272
54033: PUSH
54034: LD_VAR 0 8
54038: PPUSH
54039: LD_INT 3
54041: PPUSH
54042: LD_INT 4
54044: PPUSH
54045: CALL_OW 273
54049: PUSH
54050: EMPTY
54051: LIST
54052: LIST
54053: PUSH
54054: LD_VAR 0 7
54058: PPUSH
54059: LD_INT 4
54061: PPUSH
54062: LD_INT 4
54064: PPUSH
54065: CALL_OW 272
54069: PUSH
54070: LD_VAR 0 8
54074: PPUSH
54075: LD_INT 4
54077: PPUSH
54078: LD_INT 4
54080: PPUSH
54081: CALL_OW 273
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_VAR 0 7
54094: PPUSH
54095: LD_INT 5
54097: PPUSH
54098: LD_INT 4
54100: PPUSH
54101: CALL_OW 272
54105: PUSH
54106: LD_VAR 0 8
54110: PPUSH
54111: LD_INT 5
54113: PPUSH
54114: LD_INT 4
54116: PPUSH
54117: CALL_OW 273
54121: PUSH
54122: EMPTY
54123: LIST
54124: LIST
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: ST_TO_ADDR
// for i = tmp downto 1 do
54134: LD_ADDR_VAR 0 4
54138: PUSH
54139: DOUBLE
54140: LD_VAR 0 6
54144: INC
54145: ST_TO_ADDR
54146: LD_INT 1
54148: PUSH
54149: FOR_DOWNTO
54150: IFFALSE 54251
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
54152: LD_VAR 0 6
54156: PUSH
54157: LD_VAR 0 4
54161: ARRAY
54162: PUSH
54163: LD_INT 1
54165: ARRAY
54166: PPUSH
54167: LD_VAR 0 6
54171: PUSH
54172: LD_VAR 0 4
54176: ARRAY
54177: PUSH
54178: LD_INT 2
54180: ARRAY
54181: PPUSH
54182: CALL_OW 488
54186: NOT
54187: PUSH
54188: LD_VAR 0 6
54192: PUSH
54193: LD_VAR 0 4
54197: ARRAY
54198: PUSH
54199: LD_INT 1
54201: ARRAY
54202: PPUSH
54203: LD_VAR 0 6
54207: PUSH
54208: LD_VAR 0 4
54212: ARRAY
54213: PUSH
54214: LD_INT 2
54216: ARRAY
54217: PPUSH
54218: CALL_OW 428
54222: PUSH
54223: LD_INT 0
54225: NONEQUAL
54226: OR
54227: IFFALSE 54249
// tmp := Delete ( tmp , i ) ;
54229: LD_ADDR_VAR 0 6
54233: PUSH
54234: LD_VAR 0 6
54238: PPUSH
54239: LD_VAR 0 4
54243: PPUSH
54244: CALL_OW 3
54248: ST_TO_ADDR
54249: GO 54149
54251: POP
54252: POP
// j := GetClosestHex ( unit , tmp ) ;
54253: LD_ADDR_VAR 0 5
54257: PUSH
54258: LD_VAR 0 1
54262: PPUSH
54263: LD_VAR 0 6
54267: PPUSH
54268: CALL 53553 0 2
54272: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
54273: LD_VAR 0 1
54277: PPUSH
54278: LD_VAR 0 5
54282: PUSH
54283: LD_INT 1
54285: ARRAY
54286: PPUSH
54287: LD_VAR 0 5
54291: PUSH
54292: LD_INT 2
54294: ARRAY
54295: PPUSH
54296: CALL_OW 111
// end ;
54300: LD_VAR 0 3
54304: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
54305: LD_INT 0
54307: PPUSH
54308: PPUSH
54309: PPUSH
// uc_side = 0 ;
54310: LD_ADDR_OWVAR 20
54314: PUSH
54315: LD_INT 0
54317: ST_TO_ADDR
// uc_nation = 0 ;
54318: LD_ADDR_OWVAR 21
54322: PUSH
54323: LD_INT 0
54325: ST_TO_ADDR
// InitHc ;
54326: CALL_OW 19
// InitVc ;
54330: CALL_OW 20
// if mastodonts then
54334: LD_VAR 0 6
54338: IFFALSE 54405
// for i = 1 to mastodonts do
54340: LD_ADDR_VAR 0 11
54344: PUSH
54345: DOUBLE
54346: LD_INT 1
54348: DEC
54349: ST_TO_ADDR
54350: LD_VAR 0 6
54354: PUSH
54355: FOR_TO
54356: IFFALSE 54403
// begin vc_chassis := 31 ;
54358: LD_ADDR_OWVAR 37
54362: PUSH
54363: LD_INT 31
54365: ST_TO_ADDR
// vc_control := control_rider ;
54366: LD_ADDR_OWVAR 38
54370: PUSH
54371: LD_INT 4
54373: ST_TO_ADDR
// animal := CreateVehicle ;
54374: LD_ADDR_VAR 0 12
54378: PUSH
54379: CALL_OW 45
54383: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54384: LD_VAR 0 12
54388: PPUSH
54389: LD_VAR 0 8
54393: PPUSH
54394: LD_INT 0
54396: PPUSH
54397: CALL 61150 0 3
// end ;
54401: GO 54355
54403: POP
54404: POP
// if horses then
54405: LD_VAR 0 5
54409: IFFALSE 54476
// for i = 1 to horses do
54411: LD_ADDR_VAR 0 11
54415: PUSH
54416: DOUBLE
54417: LD_INT 1
54419: DEC
54420: ST_TO_ADDR
54421: LD_VAR 0 5
54425: PUSH
54426: FOR_TO
54427: IFFALSE 54474
// begin hc_class := 21 ;
54429: LD_ADDR_OWVAR 28
54433: PUSH
54434: LD_INT 21
54436: ST_TO_ADDR
// hc_gallery :=  ;
54437: LD_ADDR_OWVAR 33
54441: PUSH
54442: LD_STRING 
54444: ST_TO_ADDR
// animal := CreateHuman ;
54445: LD_ADDR_VAR 0 12
54449: PUSH
54450: CALL_OW 44
54454: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54455: LD_VAR 0 12
54459: PPUSH
54460: LD_VAR 0 8
54464: PPUSH
54465: LD_INT 0
54467: PPUSH
54468: CALL 61150 0 3
// end ;
54472: GO 54426
54474: POP
54475: POP
// if birds then
54476: LD_VAR 0 1
54480: IFFALSE 54547
// for i = 1 to birds do
54482: LD_ADDR_VAR 0 11
54486: PUSH
54487: DOUBLE
54488: LD_INT 1
54490: DEC
54491: ST_TO_ADDR
54492: LD_VAR 0 1
54496: PUSH
54497: FOR_TO
54498: IFFALSE 54545
// begin hc_class = 18 ;
54500: LD_ADDR_OWVAR 28
54504: PUSH
54505: LD_INT 18
54507: ST_TO_ADDR
// hc_gallery =  ;
54508: LD_ADDR_OWVAR 33
54512: PUSH
54513: LD_STRING 
54515: ST_TO_ADDR
// animal := CreateHuman ;
54516: LD_ADDR_VAR 0 12
54520: PUSH
54521: CALL_OW 44
54525: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54526: LD_VAR 0 12
54530: PPUSH
54531: LD_VAR 0 8
54535: PPUSH
54536: LD_INT 0
54538: PPUSH
54539: CALL 61150 0 3
// end ;
54543: GO 54497
54545: POP
54546: POP
// if tigers then
54547: LD_VAR 0 2
54551: IFFALSE 54635
// for i = 1 to tigers do
54553: LD_ADDR_VAR 0 11
54557: PUSH
54558: DOUBLE
54559: LD_INT 1
54561: DEC
54562: ST_TO_ADDR
54563: LD_VAR 0 2
54567: PUSH
54568: FOR_TO
54569: IFFALSE 54633
// begin hc_class = class_tiger ;
54571: LD_ADDR_OWVAR 28
54575: PUSH
54576: LD_INT 14
54578: ST_TO_ADDR
// hc_gallery =  ;
54579: LD_ADDR_OWVAR 33
54583: PUSH
54584: LD_STRING 
54586: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
54587: LD_ADDR_OWVAR 35
54591: PUSH
54592: LD_INT 7
54594: NEG
54595: PPUSH
54596: LD_INT 7
54598: PPUSH
54599: CALL_OW 12
54603: ST_TO_ADDR
// animal := CreateHuman ;
54604: LD_ADDR_VAR 0 12
54608: PUSH
54609: CALL_OW 44
54613: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54614: LD_VAR 0 12
54618: PPUSH
54619: LD_VAR 0 8
54623: PPUSH
54624: LD_INT 0
54626: PPUSH
54627: CALL 61150 0 3
// end ;
54631: GO 54568
54633: POP
54634: POP
// if apemans then
54635: LD_VAR 0 3
54639: IFFALSE 54762
// for i = 1 to apemans do
54641: LD_ADDR_VAR 0 11
54645: PUSH
54646: DOUBLE
54647: LD_INT 1
54649: DEC
54650: ST_TO_ADDR
54651: LD_VAR 0 3
54655: PUSH
54656: FOR_TO
54657: IFFALSE 54760
// begin hc_class = class_apeman ;
54659: LD_ADDR_OWVAR 28
54663: PUSH
54664: LD_INT 12
54666: ST_TO_ADDR
// hc_gallery =  ;
54667: LD_ADDR_OWVAR 33
54671: PUSH
54672: LD_STRING 
54674: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
54675: LD_ADDR_OWVAR 35
54679: PUSH
54680: LD_INT 5
54682: NEG
54683: PPUSH
54684: LD_INT 5
54686: PPUSH
54687: CALL_OW 12
54691: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
54692: LD_ADDR_OWVAR 31
54696: PUSH
54697: LD_INT 1
54699: PPUSH
54700: LD_INT 3
54702: PPUSH
54703: CALL_OW 12
54707: PUSH
54708: LD_INT 1
54710: PPUSH
54711: LD_INT 3
54713: PPUSH
54714: CALL_OW 12
54718: PUSH
54719: LD_INT 0
54721: PUSH
54722: LD_INT 0
54724: PUSH
54725: EMPTY
54726: LIST
54727: LIST
54728: LIST
54729: LIST
54730: ST_TO_ADDR
// animal := CreateHuman ;
54731: LD_ADDR_VAR 0 12
54735: PUSH
54736: CALL_OW 44
54740: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54741: LD_VAR 0 12
54745: PPUSH
54746: LD_VAR 0 8
54750: PPUSH
54751: LD_INT 0
54753: PPUSH
54754: CALL 61150 0 3
// end ;
54758: GO 54656
54760: POP
54761: POP
// if enchidnas then
54762: LD_VAR 0 4
54766: IFFALSE 54833
// for i = 1 to enchidnas do
54768: LD_ADDR_VAR 0 11
54772: PUSH
54773: DOUBLE
54774: LD_INT 1
54776: DEC
54777: ST_TO_ADDR
54778: LD_VAR 0 4
54782: PUSH
54783: FOR_TO
54784: IFFALSE 54831
// begin hc_class = 13 ;
54786: LD_ADDR_OWVAR 28
54790: PUSH
54791: LD_INT 13
54793: ST_TO_ADDR
// hc_gallery =  ;
54794: LD_ADDR_OWVAR 33
54798: PUSH
54799: LD_STRING 
54801: ST_TO_ADDR
// animal := CreateHuman ;
54802: LD_ADDR_VAR 0 12
54806: PUSH
54807: CALL_OW 44
54811: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54812: LD_VAR 0 12
54816: PPUSH
54817: LD_VAR 0 8
54821: PPUSH
54822: LD_INT 0
54824: PPUSH
54825: CALL 61150 0 3
// end ;
54829: GO 54783
54831: POP
54832: POP
// if fishes then
54833: LD_VAR 0 7
54837: IFFALSE 54904
// for i = 1 to fishes do
54839: LD_ADDR_VAR 0 11
54843: PUSH
54844: DOUBLE
54845: LD_INT 1
54847: DEC
54848: ST_TO_ADDR
54849: LD_VAR 0 7
54853: PUSH
54854: FOR_TO
54855: IFFALSE 54902
// begin hc_class = 20 ;
54857: LD_ADDR_OWVAR 28
54861: PUSH
54862: LD_INT 20
54864: ST_TO_ADDR
// hc_gallery =  ;
54865: LD_ADDR_OWVAR 33
54869: PUSH
54870: LD_STRING 
54872: ST_TO_ADDR
// animal := CreateHuman ;
54873: LD_ADDR_VAR 0 12
54877: PUSH
54878: CALL_OW 44
54882: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
54883: LD_VAR 0 12
54887: PPUSH
54888: LD_VAR 0 9
54892: PPUSH
54893: LD_INT 0
54895: PPUSH
54896: CALL 61150 0 3
// end ;
54900: GO 54854
54902: POP
54903: POP
// end ;
54904: LD_VAR 0 10
54908: RET
// export function WantHeal ( sci , unit ) ; begin
54909: LD_INT 0
54911: PPUSH
// if GetTaskList ( sci ) > 0 then
54912: LD_VAR 0 1
54916: PPUSH
54917: CALL_OW 437
54921: PUSH
54922: LD_INT 0
54924: GREATER
54925: IFFALSE 54995
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
54927: LD_VAR 0 1
54931: PPUSH
54932: CALL_OW 437
54936: PUSH
54937: LD_INT 1
54939: ARRAY
54940: PUSH
54941: LD_INT 1
54943: ARRAY
54944: PUSH
54945: LD_STRING l
54947: EQUAL
54948: PUSH
54949: LD_VAR 0 1
54953: PPUSH
54954: CALL_OW 437
54958: PUSH
54959: LD_INT 1
54961: ARRAY
54962: PUSH
54963: LD_INT 4
54965: ARRAY
54966: PUSH
54967: LD_VAR 0 2
54971: EQUAL
54972: AND
54973: IFFALSE 54985
// result := true else
54975: LD_ADDR_VAR 0 3
54979: PUSH
54980: LD_INT 1
54982: ST_TO_ADDR
54983: GO 54993
// result := false ;
54985: LD_ADDR_VAR 0 3
54989: PUSH
54990: LD_INT 0
54992: ST_TO_ADDR
// end else
54993: GO 55003
// result := false ;
54995: LD_ADDR_VAR 0 3
54999: PUSH
55000: LD_INT 0
55002: ST_TO_ADDR
// end ;
55003: LD_VAR 0 3
55007: RET
// export function HealTarget ( sci ) ; begin
55008: LD_INT 0
55010: PPUSH
// if not sci then
55011: LD_VAR 0 1
55015: NOT
55016: IFFALSE 55020
// exit ;
55018: GO 55085
// result := 0 ;
55020: LD_ADDR_VAR 0 2
55024: PUSH
55025: LD_INT 0
55027: ST_TO_ADDR
// if GetTaskList ( sci ) then
55028: LD_VAR 0 1
55032: PPUSH
55033: CALL_OW 437
55037: IFFALSE 55085
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
55039: LD_VAR 0 1
55043: PPUSH
55044: CALL_OW 437
55048: PUSH
55049: LD_INT 1
55051: ARRAY
55052: PUSH
55053: LD_INT 1
55055: ARRAY
55056: PUSH
55057: LD_STRING l
55059: EQUAL
55060: IFFALSE 55085
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
55062: LD_ADDR_VAR 0 2
55066: PUSH
55067: LD_VAR 0 1
55071: PPUSH
55072: CALL_OW 437
55076: PUSH
55077: LD_INT 1
55079: ARRAY
55080: PUSH
55081: LD_INT 4
55083: ARRAY
55084: ST_TO_ADDR
// end ;
55085: LD_VAR 0 2
55089: RET
// export function Attack ( list ) ; var base , group , path , flags , i , j , k , x , y , d , z , tmp , tmp2 , units_path , f_ignore_area , f_capture , f_ignore_civ , f_murder , f_mines , f_repair , f_heal , f_spacetime , f_attack_depot , f_crawl , mined , bombed , attacking , to_heal , healers , to_repair , repairs , empty_vehs , side ; begin
55090: LD_INT 0
55092: PPUSH
55093: PPUSH
55094: PPUSH
55095: PPUSH
55096: PPUSH
55097: PPUSH
55098: PPUSH
55099: PPUSH
55100: PPUSH
55101: PPUSH
55102: PPUSH
55103: PPUSH
55104: PPUSH
55105: PPUSH
55106: PPUSH
55107: PPUSH
55108: PPUSH
55109: PPUSH
55110: PPUSH
55111: PPUSH
55112: PPUSH
55113: PPUSH
55114: PPUSH
55115: PPUSH
55116: PPUSH
55117: PPUSH
55118: PPUSH
55119: PPUSH
55120: PPUSH
55121: PPUSH
55122: PPUSH
55123: PPUSH
55124: PPUSH
55125: PPUSH
// if not list then
55126: LD_VAR 0 1
55130: NOT
55131: IFFALSE 55135
// exit ;
55133: GO 59761
// base := list [ 1 ] ;
55135: LD_ADDR_VAR 0 3
55139: PUSH
55140: LD_VAR 0 1
55144: PUSH
55145: LD_INT 1
55147: ARRAY
55148: ST_TO_ADDR
// group := list [ 2 ] ;
55149: LD_ADDR_VAR 0 4
55153: PUSH
55154: LD_VAR 0 1
55158: PUSH
55159: LD_INT 2
55161: ARRAY
55162: ST_TO_ADDR
// path := list [ 3 ] ;
55163: LD_ADDR_VAR 0 5
55167: PUSH
55168: LD_VAR 0 1
55172: PUSH
55173: LD_INT 3
55175: ARRAY
55176: ST_TO_ADDR
// flags := list [ 4 ] ;
55177: LD_ADDR_VAR 0 6
55181: PUSH
55182: LD_VAR 0 1
55186: PUSH
55187: LD_INT 4
55189: ARRAY
55190: ST_TO_ADDR
// mined := [ ] ;
55191: LD_ADDR_VAR 0 27
55195: PUSH
55196: EMPTY
55197: ST_TO_ADDR
// bombed := [ ] ;
55198: LD_ADDR_VAR 0 28
55202: PUSH
55203: EMPTY
55204: ST_TO_ADDR
// healers := [ ] ;
55205: LD_ADDR_VAR 0 31
55209: PUSH
55210: EMPTY
55211: ST_TO_ADDR
// to_heal := [ ] ;
55212: LD_ADDR_VAR 0 30
55216: PUSH
55217: EMPTY
55218: ST_TO_ADDR
// repairs := [ ] ;
55219: LD_ADDR_VAR 0 33
55223: PUSH
55224: EMPTY
55225: ST_TO_ADDR
// to_repair := [ ] ;
55226: LD_ADDR_VAR 0 32
55230: PUSH
55231: EMPTY
55232: ST_TO_ADDR
// if not group or not path then
55233: LD_VAR 0 4
55237: NOT
55238: PUSH
55239: LD_VAR 0 5
55243: NOT
55244: OR
55245: IFFALSE 55249
// exit ;
55247: GO 59761
// side := GetSide ( group [ 1 ] ) ;
55249: LD_ADDR_VAR 0 35
55253: PUSH
55254: LD_VAR 0 4
55258: PUSH
55259: LD_INT 1
55261: ARRAY
55262: PPUSH
55263: CALL_OW 255
55267: ST_TO_ADDR
// if flags then
55268: LD_VAR 0 6
55272: IFFALSE 55416
// begin f_ignore_area := flags [ 1 ] ;
55274: LD_ADDR_VAR 0 17
55278: PUSH
55279: LD_VAR 0 6
55283: PUSH
55284: LD_INT 1
55286: ARRAY
55287: ST_TO_ADDR
// f_capture := flags [ 2 ] ;
55288: LD_ADDR_VAR 0 18
55292: PUSH
55293: LD_VAR 0 6
55297: PUSH
55298: LD_INT 2
55300: ARRAY
55301: ST_TO_ADDR
// f_ignore_civ := flags [ 3 ] ;
55302: LD_ADDR_VAR 0 19
55306: PUSH
55307: LD_VAR 0 6
55311: PUSH
55312: LD_INT 3
55314: ARRAY
55315: ST_TO_ADDR
// f_murder := flags [ 4 ] ;
55316: LD_ADDR_VAR 0 20
55320: PUSH
55321: LD_VAR 0 6
55325: PUSH
55326: LD_INT 4
55328: ARRAY
55329: ST_TO_ADDR
// f_mines := flags [ 5 ] ;
55330: LD_ADDR_VAR 0 21
55334: PUSH
55335: LD_VAR 0 6
55339: PUSH
55340: LD_INT 5
55342: ARRAY
55343: ST_TO_ADDR
// f_repair := flags [ 6 ] ;
55344: LD_ADDR_VAR 0 22
55348: PUSH
55349: LD_VAR 0 6
55353: PUSH
55354: LD_INT 6
55356: ARRAY
55357: ST_TO_ADDR
// f_heal := flags [ 7 ] ;
55358: LD_ADDR_VAR 0 23
55362: PUSH
55363: LD_VAR 0 6
55367: PUSH
55368: LD_INT 7
55370: ARRAY
55371: ST_TO_ADDR
// f_spacetime := flags [ 8 ] ;
55372: LD_ADDR_VAR 0 24
55376: PUSH
55377: LD_VAR 0 6
55381: PUSH
55382: LD_INT 8
55384: ARRAY
55385: ST_TO_ADDR
// f_attack_depot := flags [ 9 ] ;
55386: LD_ADDR_VAR 0 25
55390: PUSH
55391: LD_VAR 0 6
55395: PUSH
55396: LD_INT 9
55398: ARRAY
55399: ST_TO_ADDR
// f_crawl := flags [ 10 ] ;
55400: LD_ADDR_VAR 0 26
55404: PUSH
55405: LD_VAR 0 6
55409: PUSH
55410: LD_INT 10
55412: ARRAY
55413: ST_TO_ADDR
// end else
55414: GO 55496
// begin f_ignore_area := false ;
55416: LD_ADDR_VAR 0 17
55420: PUSH
55421: LD_INT 0
55423: ST_TO_ADDR
// f_capture := false ;
55424: LD_ADDR_VAR 0 18
55428: PUSH
55429: LD_INT 0
55431: ST_TO_ADDR
// f_ignore_civ := false ;
55432: LD_ADDR_VAR 0 19
55436: PUSH
55437: LD_INT 0
55439: ST_TO_ADDR
// f_murder := false ;
55440: LD_ADDR_VAR 0 20
55444: PUSH
55445: LD_INT 0
55447: ST_TO_ADDR
// f_mines := false ;
55448: LD_ADDR_VAR 0 21
55452: PUSH
55453: LD_INT 0
55455: ST_TO_ADDR
// f_repair := false ;
55456: LD_ADDR_VAR 0 22
55460: PUSH
55461: LD_INT 0
55463: ST_TO_ADDR
// f_heal := false ;
55464: LD_ADDR_VAR 0 23
55468: PUSH
55469: LD_INT 0
55471: ST_TO_ADDR
// f_spacetime := false ;
55472: LD_ADDR_VAR 0 24
55476: PUSH
55477: LD_INT 0
55479: ST_TO_ADDR
// f_attack_depot := false ;
55480: LD_ADDR_VAR 0 25
55484: PUSH
55485: LD_INT 0
55487: ST_TO_ADDR
// f_crawl := false ;
55488: LD_ADDR_VAR 0 26
55492: PUSH
55493: LD_INT 0
55495: ST_TO_ADDR
// end ; if f_heal then
55496: LD_VAR 0 23
55500: IFFALSE 55527
// healers := UnitFilter ( group , [ f_class , 4 ] ) ;
55502: LD_ADDR_VAR 0 31
55506: PUSH
55507: LD_VAR 0 4
55511: PPUSH
55512: LD_INT 25
55514: PUSH
55515: LD_INT 4
55517: PUSH
55518: EMPTY
55519: LIST
55520: LIST
55521: PPUSH
55522: CALL_OW 72
55526: ST_TO_ADDR
// if f_repair then
55527: LD_VAR 0 22
55531: IFFALSE 55558
// repairs := UnitFilter ( group , [ f_class , 3 ] ) ;
55533: LD_ADDR_VAR 0 33
55537: PUSH
55538: LD_VAR 0 4
55542: PPUSH
55543: LD_INT 25
55545: PUSH
55546: LD_INT 3
55548: PUSH
55549: EMPTY
55550: LIST
55551: LIST
55552: PPUSH
55553: CALL_OW 72
55557: ST_TO_ADDR
// units_path := [ ] ;
55558: LD_ADDR_VAR 0 16
55562: PUSH
55563: EMPTY
55564: ST_TO_ADDR
// for i = 1 to group do
55565: LD_ADDR_VAR 0 7
55569: PUSH
55570: DOUBLE
55571: LD_INT 1
55573: DEC
55574: ST_TO_ADDR
55575: LD_VAR 0 4
55579: PUSH
55580: FOR_TO
55581: IFFALSE 55610
// units_path := Replace ( units_path , i , path ) ;
55583: LD_ADDR_VAR 0 16
55587: PUSH
55588: LD_VAR 0 16
55592: PPUSH
55593: LD_VAR 0 7
55597: PPUSH
55598: LD_VAR 0 5
55602: PPUSH
55603: CALL_OW 1
55607: ST_TO_ADDR
55608: GO 55580
55610: POP
55611: POP
// repeat for i = group downto 1 do
55612: LD_ADDR_VAR 0 7
55616: PUSH
55617: DOUBLE
55618: LD_VAR 0 4
55622: INC
55623: ST_TO_ADDR
55624: LD_INT 1
55626: PUSH
55627: FOR_DOWNTO
55628: IFFALSE 59724
// begin wait ( 5 ) ;
55630: LD_INT 5
55632: PPUSH
55633: CALL_OW 67
// tmp := [ ] ;
55637: LD_ADDR_VAR 0 14
55641: PUSH
55642: EMPTY
55643: ST_TO_ADDR
// attacking := false ;
55644: LD_ADDR_VAR 0 29
55648: PUSH
55649: LD_INT 0
55651: ST_TO_ADDR
// if IsDead ( group [ i ] ) or not group [ i ] then
55652: LD_VAR 0 4
55656: PUSH
55657: LD_VAR 0 7
55661: ARRAY
55662: PPUSH
55663: CALL_OW 301
55667: PUSH
55668: LD_VAR 0 4
55672: PUSH
55673: LD_VAR 0 7
55677: ARRAY
55678: NOT
55679: OR
55680: IFFALSE 55789
// begin if GetType ( group [ i ] ) = unit_human then
55682: LD_VAR 0 4
55686: PUSH
55687: LD_VAR 0 7
55691: ARRAY
55692: PPUSH
55693: CALL_OW 247
55697: PUSH
55698: LD_INT 1
55700: EQUAL
55701: IFFALSE 55747
// begin to_heal := to_heal diff group [ i ] ;
55703: LD_ADDR_VAR 0 30
55707: PUSH
55708: LD_VAR 0 30
55712: PUSH
55713: LD_VAR 0 4
55717: PUSH
55718: LD_VAR 0 7
55722: ARRAY
55723: DIFF
55724: ST_TO_ADDR
// healers := healers diff group [ i ] ;
55725: LD_ADDR_VAR 0 31
55729: PUSH
55730: LD_VAR 0 31
55734: PUSH
55735: LD_VAR 0 4
55739: PUSH
55740: LD_VAR 0 7
55744: ARRAY
55745: DIFF
55746: ST_TO_ADDR
// end ; group := Delete ( group , i ) ;
55747: LD_ADDR_VAR 0 4
55751: PUSH
55752: LD_VAR 0 4
55756: PPUSH
55757: LD_VAR 0 7
55761: PPUSH
55762: CALL_OW 3
55766: ST_TO_ADDR
// units_path := Delete ( units_path , i ) ;
55767: LD_ADDR_VAR 0 16
55771: PUSH
55772: LD_VAR 0 16
55776: PPUSH
55777: LD_VAR 0 7
55781: PPUSH
55782: CALL_OW 3
55786: ST_TO_ADDR
// continue ;
55787: GO 55627
// end ; if f_repair then
55789: LD_VAR 0 22
55793: IFFALSE 56282
// begin if GetType ( group [ i ] ) = unit_vehicle then
55795: LD_VAR 0 4
55799: PUSH
55800: LD_VAR 0 7
55804: ARRAY
55805: PPUSH
55806: CALL_OW 247
55810: PUSH
55811: LD_INT 2
55813: EQUAL
55814: IFFALSE 56004
// begin if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_repair then
55816: LD_VAR 0 4
55820: PUSH
55821: LD_VAR 0 7
55825: ARRAY
55826: PPUSH
55827: CALL_OW 256
55831: PUSH
55832: LD_INT 700
55834: LESS
55835: PUSH
55836: LD_VAR 0 4
55840: PUSH
55841: LD_VAR 0 7
55845: ARRAY
55846: PUSH
55847: LD_VAR 0 32
55851: IN
55852: NOT
55853: AND
55854: IFFALSE 55878
// to_repair := to_repair union group [ i ] ;
55856: LD_ADDR_VAR 0 32
55860: PUSH
55861: LD_VAR 0 32
55865: PUSH
55866: LD_VAR 0 4
55870: PUSH
55871: LD_VAR 0 7
55875: ARRAY
55876: UNION
55877: ST_TO_ADDR
// if GetLives ( group [ i ] ) = 1000 and group [ i ] in to_repair then
55878: LD_VAR 0 4
55882: PUSH
55883: LD_VAR 0 7
55887: ARRAY
55888: PPUSH
55889: CALL_OW 256
55893: PUSH
55894: LD_INT 1000
55896: EQUAL
55897: PUSH
55898: LD_VAR 0 4
55902: PUSH
55903: LD_VAR 0 7
55907: ARRAY
55908: PUSH
55909: LD_VAR 0 32
55913: IN
55914: AND
55915: IFFALSE 55939
// to_repair := to_repair diff group [ i ] ;
55917: LD_ADDR_VAR 0 32
55921: PUSH
55922: LD_VAR 0 32
55926: PUSH
55927: LD_VAR 0 4
55931: PUSH
55932: LD_VAR 0 7
55936: ARRAY
55937: DIFF
55938: ST_TO_ADDR
// if group [ i ] in to_repair then
55939: LD_VAR 0 4
55943: PUSH
55944: LD_VAR 0 7
55948: ARRAY
55949: PUSH
55950: LD_VAR 0 32
55954: IN
55955: IFFALSE 56002
// begin if not IsInArea ( group [ i ] , f_repair ) then
55957: LD_VAR 0 4
55961: PUSH
55962: LD_VAR 0 7
55966: ARRAY
55967: PPUSH
55968: LD_VAR 0 22
55972: PPUSH
55973: CALL_OW 308
55977: NOT
55978: IFFALSE 56000
// ComMoveToArea ( group [ i ] , f_repair ) ;
55980: LD_VAR 0 4
55984: PUSH
55985: LD_VAR 0 7
55989: ARRAY
55990: PPUSH
55991: LD_VAR 0 22
55995: PPUSH
55996: CALL_OW 113
// continue ;
56000: GO 55627
// end ; end else
56002: GO 56282
// if group [ i ] in repairs then
56004: LD_VAR 0 4
56008: PUSH
56009: LD_VAR 0 7
56013: ARRAY
56014: PUSH
56015: LD_VAR 0 33
56019: IN
56020: IFFALSE 56282
// begin if IsInUnit ( group [ i ] ) then
56022: LD_VAR 0 4
56026: PUSH
56027: LD_VAR 0 7
56031: ARRAY
56032: PPUSH
56033: CALL_OW 310
56037: IFFALSE 56105
// begin z := IsInUnit ( group [ i ] ) ;
56039: LD_ADDR_VAR 0 13
56043: PUSH
56044: LD_VAR 0 4
56048: PUSH
56049: LD_VAR 0 7
56053: ARRAY
56054: PPUSH
56055: CALL_OW 310
56059: ST_TO_ADDR
// if z in to_repair and IsInArea ( z , f_repair ) then
56060: LD_VAR 0 13
56064: PUSH
56065: LD_VAR 0 32
56069: IN
56070: PUSH
56071: LD_VAR 0 13
56075: PPUSH
56076: LD_VAR 0 22
56080: PPUSH
56081: CALL_OW 308
56085: AND
56086: IFFALSE 56103
// ComExitVehicle ( group [ i ] ) ;
56088: LD_VAR 0 4
56092: PUSH
56093: LD_VAR 0 7
56097: ARRAY
56098: PPUSH
56099: CALL_OW 121
// end else
56103: GO 56282
// begin z := UnitFilter ( group , [ [ f_inarea , f_repair ] , [ f_empty ] ] ) ;
56105: LD_ADDR_VAR 0 13
56109: PUSH
56110: LD_VAR 0 4
56114: PPUSH
56115: LD_INT 95
56117: PUSH
56118: LD_VAR 0 22
56122: PUSH
56123: EMPTY
56124: LIST
56125: LIST
56126: PUSH
56127: LD_INT 58
56129: PUSH
56130: EMPTY
56131: LIST
56132: PUSH
56133: EMPTY
56134: LIST
56135: LIST
56136: PPUSH
56137: CALL_OW 72
56141: ST_TO_ADDR
// if not HasTask ( group [ i ] ) then
56142: LD_VAR 0 4
56146: PUSH
56147: LD_VAR 0 7
56151: ARRAY
56152: PPUSH
56153: CALL_OW 314
56157: NOT
56158: IFFALSE 56280
// begin x := NearestUnitToUnit ( z , group [ i ] ) ;
56160: LD_ADDR_VAR 0 10
56164: PUSH
56165: LD_VAR 0 13
56169: PPUSH
56170: LD_VAR 0 4
56174: PUSH
56175: LD_VAR 0 7
56179: ARRAY
56180: PPUSH
56181: CALL_OW 74
56185: ST_TO_ADDR
// if not x then
56186: LD_VAR 0 10
56190: NOT
56191: IFFALSE 56195
// continue ;
56193: GO 55627
// if GetLives ( x ) < 1000 then
56195: LD_VAR 0 10
56199: PPUSH
56200: CALL_OW 256
56204: PUSH
56205: LD_INT 1000
56207: LESS
56208: IFFALSE 56232
// ComRepairVehicle ( group [ i ] , x ) else
56210: LD_VAR 0 4
56214: PUSH
56215: LD_VAR 0 7
56219: ARRAY
56220: PPUSH
56221: LD_VAR 0 10
56225: PPUSH
56226: CALL_OW 129
56230: GO 56280
// if not ( f_heal and GetLives ( group [ i ] ) < 1000 ) then
56232: LD_VAR 0 23
56236: PUSH
56237: LD_VAR 0 4
56241: PUSH
56242: LD_VAR 0 7
56246: ARRAY
56247: PPUSH
56248: CALL_OW 256
56252: PUSH
56253: LD_INT 1000
56255: LESS
56256: AND
56257: NOT
56258: IFFALSE 56280
// ComEnterUnit ( group [ i ] , x ) ;
56260: LD_VAR 0 4
56264: PUSH
56265: LD_VAR 0 7
56269: ARRAY
56270: PPUSH
56271: LD_VAR 0 10
56275: PPUSH
56276: CALL_OW 120
// end ; continue ;
56280: GO 55627
// end ; end ; end ; if f_heal and GetType ( group [ i ] ) = unit_human then
56282: LD_VAR 0 23
56286: PUSH
56287: LD_VAR 0 4
56291: PUSH
56292: LD_VAR 0 7
56296: ARRAY
56297: PPUSH
56298: CALL_OW 247
56302: PUSH
56303: LD_INT 1
56305: EQUAL
56306: AND
56307: IFFALSE 56785
// begin if group [ i ] in healers then
56309: LD_VAR 0 4
56313: PUSH
56314: LD_VAR 0 7
56318: ARRAY
56319: PUSH
56320: LD_VAR 0 31
56324: IN
56325: IFFALSE 56598
// begin if not IsInArea ( group [ i ] , f_heal ) and not HasTask ( group [ i ] ) then
56327: LD_VAR 0 4
56331: PUSH
56332: LD_VAR 0 7
56336: ARRAY
56337: PPUSH
56338: LD_VAR 0 23
56342: PPUSH
56343: CALL_OW 308
56347: NOT
56348: PUSH
56349: LD_VAR 0 4
56353: PUSH
56354: LD_VAR 0 7
56358: ARRAY
56359: PPUSH
56360: CALL_OW 314
56364: NOT
56365: AND
56366: IFFALSE 56390
// ComMoveToArea ( group [ i ] , f_heal ) else
56368: LD_VAR 0 4
56372: PUSH
56373: LD_VAR 0 7
56377: ARRAY
56378: PPUSH
56379: LD_VAR 0 23
56383: PPUSH
56384: CALL_OW 113
56388: GO 56596
// if GetLives ( HealTarget ( group [ i ] ) ) = 1000 then
56390: LD_VAR 0 4
56394: PUSH
56395: LD_VAR 0 7
56399: ARRAY
56400: PPUSH
56401: CALL 55008 0 1
56405: PPUSH
56406: CALL_OW 256
56410: PUSH
56411: LD_INT 1000
56413: EQUAL
56414: IFFALSE 56433
// ComStop ( group [ i ] ) else
56416: LD_VAR 0 4
56420: PUSH
56421: LD_VAR 0 7
56425: ARRAY
56426: PPUSH
56427: CALL_OW 141
56431: GO 56596
// if not HasTask ( group [ i ] ) and to_heal then
56433: LD_VAR 0 4
56437: PUSH
56438: LD_VAR 0 7
56442: ARRAY
56443: PPUSH
56444: CALL_OW 314
56448: NOT
56449: PUSH
56450: LD_VAR 0 30
56454: AND
56455: IFFALSE 56596
// begin z := NearestUnitToUnit ( UnitFilter ( to_heal , [ f_not , [ f_inside ] ] ) , group [ i ] ) ;
56457: LD_ADDR_VAR 0 13
56461: PUSH
56462: LD_VAR 0 30
56466: PPUSH
56467: LD_INT 3
56469: PUSH
56470: LD_INT 54
56472: PUSH
56473: EMPTY
56474: LIST
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PPUSH
56480: CALL_OW 72
56484: PPUSH
56485: LD_VAR 0 4
56489: PUSH
56490: LD_VAR 0 7
56494: ARRAY
56495: PPUSH
56496: CALL_OW 74
56500: ST_TO_ADDR
// if z then
56501: LD_VAR 0 13
56505: IFFALSE 56596
// if FilterAllUnits ( [ [ f_dist , z , 10 ] , [ f_enemy , GetSide ( z ) ] ] ) = 0 then
56507: LD_INT 91
56509: PUSH
56510: LD_VAR 0 13
56514: PUSH
56515: LD_INT 10
56517: PUSH
56518: EMPTY
56519: LIST
56520: LIST
56521: LIST
56522: PUSH
56523: LD_INT 81
56525: PUSH
56526: LD_VAR 0 13
56530: PPUSH
56531: CALL_OW 255
56535: PUSH
56536: EMPTY
56537: LIST
56538: LIST
56539: PUSH
56540: EMPTY
56541: LIST
56542: LIST
56543: PPUSH
56544: CALL_OW 69
56548: PUSH
56549: LD_INT 0
56551: EQUAL
56552: IFFALSE 56576
// ComHeal ( group [ i ] , z ) else
56554: LD_VAR 0 4
56558: PUSH
56559: LD_VAR 0 7
56563: ARRAY
56564: PPUSH
56565: LD_VAR 0 13
56569: PPUSH
56570: CALL_OW 128
56574: GO 56596
// ComMoveToArea ( group [ i ] , f_heal ) ;
56576: LD_VAR 0 4
56580: PUSH
56581: LD_VAR 0 7
56585: ARRAY
56586: PPUSH
56587: LD_VAR 0 23
56591: PPUSH
56592: CALL_OW 113
// end ; continue ;
56596: GO 55627
// end ; if GetLives ( group [ i ] ) < 700 and not group [ i ] in to_heal then
56598: LD_VAR 0 4
56602: PUSH
56603: LD_VAR 0 7
56607: ARRAY
56608: PPUSH
56609: CALL_OW 256
56613: PUSH
56614: LD_INT 700
56616: LESS
56617: PUSH
56618: LD_VAR 0 4
56622: PUSH
56623: LD_VAR 0 7
56627: ARRAY
56628: PUSH
56629: LD_VAR 0 30
56633: IN
56634: NOT
56635: AND
56636: IFFALSE 56660
// to_heal := to_heal union group [ i ] ;
56638: LD_ADDR_VAR 0 30
56642: PUSH
56643: LD_VAR 0 30
56647: PUSH
56648: LD_VAR 0 4
56652: PUSH
56653: LD_VAR 0 7
56657: ARRAY
56658: UNION
56659: ST_TO_ADDR
// if group [ i ] in to_heal then
56660: LD_VAR 0 4
56664: PUSH
56665: LD_VAR 0 7
56669: ARRAY
56670: PUSH
56671: LD_VAR 0 30
56675: IN
56676: IFFALSE 56785
// begin if GetLives ( group [ i ] ) = 1000 then
56678: LD_VAR 0 4
56682: PUSH
56683: LD_VAR 0 7
56687: ARRAY
56688: PPUSH
56689: CALL_OW 256
56693: PUSH
56694: LD_INT 1000
56696: EQUAL
56697: IFFALSE 56723
// to_heal := to_heal diff group [ i ] else
56699: LD_ADDR_VAR 0 30
56703: PUSH
56704: LD_VAR 0 30
56708: PUSH
56709: LD_VAR 0 4
56713: PUSH
56714: LD_VAR 0 7
56718: ARRAY
56719: DIFF
56720: ST_TO_ADDR
56721: GO 56785
// begin if not IsInArea ( group [ i ] , to_heal ) then
56723: LD_VAR 0 4
56727: PUSH
56728: LD_VAR 0 7
56732: ARRAY
56733: PPUSH
56734: LD_VAR 0 30
56738: PPUSH
56739: CALL_OW 308
56743: NOT
56744: IFFALSE 56768
// ComMoveToArea ( group [ i ] , f_heal ) else
56746: LD_VAR 0 4
56750: PUSH
56751: LD_VAR 0 7
56755: ARRAY
56756: PPUSH
56757: LD_VAR 0 23
56761: PPUSH
56762: CALL_OW 113
56766: GO 56783
// ComHold ( group [ i ] ) ;
56768: LD_VAR 0 4
56772: PUSH
56773: LD_VAR 0 7
56777: ARRAY
56778: PPUSH
56779: CALL_OW 140
// continue ;
56783: GO 55627
// end ; end ; end ; if not EnemyInRange ( group [ i ] , 10 ) and not units_path [ i ] = [ ] then
56785: LD_VAR 0 4
56789: PUSH
56790: LD_VAR 0 7
56794: ARRAY
56795: PPUSH
56796: LD_INT 10
56798: PPUSH
56799: CALL 53405 0 2
56803: NOT
56804: PUSH
56805: LD_VAR 0 16
56809: PUSH
56810: LD_VAR 0 7
56814: ARRAY
56815: PUSH
56816: EMPTY
56817: EQUAL
56818: NOT
56819: AND
56820: IFFALSE 57086
// begin if GetEngine ( group [ i ] ) in [ engine_combustion , engine_solar ] then
56822: LD_VAR 0 4
56826: PUSH
56827: LD_VAR 0 7
56831: ARRAY
56832: PPUSH
56833: CALL_OW 262
56837: PUSH
56838: LD_INT 1
56840: PUSH
56841: LD_INT 2
56843: PUSH
56844: EMPTY
56845: LIST
56846: LIST
56847: IN
56848: IFFALSE 56889
// if GetFuel ( group [ i ] ) < 10 then
56850: LD_VAR 0 4
56854: PUSH
56855: LD_VAR 0 7
56859: ARRAY
56860: PPUSH
56861: CALL_OW 261
56865: PUSH
56866: LD_INT 10
56868: LESS
56869: IFFALSE 56889
// SetFuel ( group [ i ] , 12 ) ;
56871: LD_VAR 0 4
56875: PUSH
56876: LD_VAR 0 7
56880: ARRAY
56881: PPUSH
56882: LD_INT 12
56884: PPUSH
56885: CALL_OW 240
// if units_path [ i ] then
56889: LD_VAR 0 16
56893: PUSH
56894: LD_VAR 0 7
56898: ARRAY
56899: IFFALSE 57084
// begin if GetDistUnitXY ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) > 6 then
56901: LD_VAR 0 4
56905: PUSH
56906: LD_VAR 0 7
56910: ARRAY
56911: PPUSH
56912: LD_VAR 0 16
56916: PUSH
56917: LD_VAR 0 7
56921: ARRAY
56922: PUSH
56923: LD_INT 1
56925: ARRAY
56926: PUSH
56927: LD_INT 1
56929: ARRAY
56930: PPUSH
56931: LD_VAR 0 16
56935: PUSH
56936: LD_VAR 0 7
56940: ARRAY
56941: PUSH
56942: LD_INT 1
56944: ARRAY
56945: PUSH
56946: LD_INT 2
56948: ARRAY
56949: PPUSH
56950: CALL_OW 297
56954: PUSH
56955: LD_INT 6
56957: GREATER
56958: IFFALSE 57033
// begin if not HasTask ( group [ i ] ) then
56960: LD_VAR 0 4
56964: PUSH
56965: LD_VAR 0 7
56969: ARRAY
56970: PPUSH
56971: CALL_OW 314
56975: NOT
56976: IFFALSE 57031
// ComAgressiveMove ( group [ i ] , units_path [ i ] [ 1 ] [ 1 ] , units_path [ i ] [ 1 ] [ 2 ] ) ;
56978: LD_VAR 0 4
56982: PUSH
56983: LD_VAR 0 7
56987: ARRAY
56988: PPUSH
56989: LD_VAR 0 16
56993: PUSH
56994: LD_VAR 0 7
56998: ARRAY
56999: PUSH
57000: LD_INT 1
57002: ARRAY
57003: PUSH
57004: LD_INT 1
57006: ARRAY
57007: PPUSH
57008: LD_VAR 0 16
57012: PUSH
57013: LD_VAR 0 7
57017: ARRAY
57018: PUSH
57019: LD_INT 1
57021: ARRAY
57022: PUSH
57023: LD_INT 2
57025: ARRAY
57026: PPUSH
57027: CALL_OW 114
// end else
57031: GO 57084
// begin tmp2 := Delete ( units_path [ i ] , 1 ) ;
57033: LD_ADDR_VAR 0 15
57037: PUSH
57038: LD_VAR 0 16
57042: PUSH
57043: LD_VAR 0 7
57047: ARRAY
57048: PPUSH
57049: LD_INT 1
57051: PPUSH
57052: CALL_OW 3
57056: ST_TO_ADDR
// units_path := Replace ( units_path , i , tmp2 ) ;
57057: LD_ADDR_VAR 0 16
57061: PUSH
57062: LD_VAR 0 16
57066: PPUSH
57067: LD_VAR 0 7
57071: PPUSH
57072: LD_VAR 0 15
57076: PPUSH
57077: CALL_OW 1
57081: ST_TO_ADDR
// continue ;
57082: GO 55627
// end ; end ; end else
57084: GO 59722
// begin tmp := FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) ;
57086: LD_ADDR_VAR 0 14
57090: PUSH
57091: LD_INT 81
57093: PUSH
57094: LD_VAR 0 4
57098: PUSH
57099: LD_VAR 0 7
57103: ARRAY
57104: PPUSH
57105: CALL_OW 255
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PPUSH
57114: CALL_OW 69
57118: ST_TO_ADDR
// if not tmp then
57119: LD_VAR 0 14
57123: NOT
57124: IFFALSE 57128
// continue ;
57126: GO 55627
// if f_ignore_area then
57128: LD_VAR 0 17
57132: IFFALSE 57220
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_distxy , f_ignore_area [ 1 ] , f_ignore_area [ 2 ] , f_ignore_area [ 3 ] ] ] ) ;
57134: LD_ADDR_VAR 0 15
57138: PUSH
57139: LD_VAR 0 14
57143: PPUSH
57144: LD_INT 3
57146: PUSH
57147: LD_INT 92
57149: PUSH
57150: LD_VAR 0 17
57154: PUSH
57155: LD_INT 1
57157: ARRAY
57158: PUSH
57159: LD_VAR 0 17
57163: PUSH
57164: LD_INT 2
57166: ARRAY
57167: PUSH
57168: LD_VAR 0 17
57172: PUSH
57173: LD_INT 3
57175: ARRAY
57176: PUSH
57177: EMPTY
57178: LIST
57179: LIST
57180: LIST
57181: LIST
57182: PUSH
57183: EMPTY
57184: LIST
57185: LIST
57186: PPUSH
57187: CALL_OW 72
57191: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
57192: LD_VAR 0 14
57196: PUSH
57197: LD_VAR 0 15
57201: DIFF
57202: IFFALSE 57220
// tmp := tmp diff tmp2 ;
57204: LD_ADDR_VAR 0 14
57208: PUSH
57209: LD_VAR 0 14
57213: PUSH
57214: LD_VAR 0 15
57218: DIFF
57219: ST_TO_ADDR
// end ; if not f_murder then
57220: LD_VAR 0 20
57224: NOT
57225: IFFALSE 57283
// begin tmp2 := UnitFilter ( tmp , [ f_not , [ f_ok ] ] ) ;
57227: LD_ADDR_VAR 0 15
57231: PUSH
57232: LD_VAR 0 14
57236: PPUSH
57237: LD_INT 3
57239: PUSH
57240: LD_INT 50
57242: PUSH
57243: EMPTY
57244: LIST
57245: PUSH
57246: EMPTY
57247: LIST
57248: LIST
57249: PPUSH
57250: CALL_OW 72
57254: ST_TO_ADDR
// if ( tmp diff tmp2 ) then
57255: LD_VAR 0 14
57259: PUSH
57260: LD_VAR 0 15
57264: DIFF
57265: IFFALSE 57283
// tmp := tmp diff tmp2 ;
57267: LD_ADDR_VAR 0 14
57271: PUSH
57272: LD_VAR 0 14
57276: PUSH
57277: LD_VAR 0 15
57281: DIFF
57282: ST_TO_ADDR
// end ; tmp := SortByDistanceUnit ( group [ i ] , tmp , true , true ) ;
57283: LD_ADDR_VAR 0 14
57287: PUSH
57288: LD_VAR 0 4
57292: PUSH
57293: LD_VAR 0 7
57297: ARRAY
57298: PPUSH
57299: LD_VAR 0 14
57303: PPUSH
57304: LD_INT 1
57306: PPUSH
57307: LD_INT 1
57309: PPUSH
57310: CALL 27072 0 4
57314: ST_TO_ADDR
// if GetClass ( group [ i ] ) = 1 then
57315: LD_VAR 0 4
57319: PUSH
57320: LD_VAR 0 7
57324: ARRAY
57325: PPUSH
57326: CALL_OW 257
57330: PUSH
57331: LD_INT 1
57333: EQUAL
57334: IFFALSE 57782
// begin if WantPlant ( group [ i ] ) then
57336: LD_VAR 0 4
57340: PUSH
57341: LD_VAR 0 7
57345: ARRAY
57346: PPUSH
57347: CALL 26573 0 1
57351: IFFALSE 57355
// continue ;
57353: GO 55627
// if f_capture and not IsInUnit ( group [ i ] ) and tmp [ 1 ] in UnitFilter ( tmp , [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) then
57355: LD_VAR 0 18
57359: PUSH
57360: LD_VAR 0 4
57364: PUSH
57365: LD_VAR 0 7
57369: ARRAY
57370: PPUSH
57371: CALL_OW 310
57375: NOT
57376: AND
57377: PUSH
57378: LD_VAR 0 14
57382: PUSH
57383: LD_INT 1
57385: ARRAY
57386: PUSH
57387: LD_VAR 0 14
57391: PPUSH
57392: LD_INT 21
57394: PUSH
57395: LD_INT 2
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: PUSH
57402: LD_INT 58
57404: PUSH
57405: EMPTY
57406: LIST
57407: PUSH
57408: EMPTY
57409: LIST
57410: LIST
57411: PPUSH
57412: CALL_OW 72
57416: IN
57417: AND
57418: IFFALSE 57454
// begin ComEnterUnit ( group [ i ] , tmp [ 1 ] ) ;
57420: LD_VAR 0 4
57424: PUSH
57425: LD_VAR 0 7
57429: ARRAY
57430: PPUSH
57431: LD_VAR 0 14
57435: PUSH
57436: LD_INT 1
57438: ARRAY
57439: PPUSH
57440: CALL_OW 120
// attacking := true ;
57444: LD_ADDR_VAR 0 29
57448: PUSH
57449: LD_INT 1
57451: ST_TO_ADDR
// continue ;
57452: GO 55627
// end ; if f_crawl and GetClass ( group [ i ] ) = 1 and GetLives ( group [ i ] ) < 800 and not Crawls ( group [ i ] ) then
57454: LD_VAR 0 26
57458: PUSH
57459: LD_VAR 0 4
57463: PUSH
57464: LD_VAR 0 7
57468: ARRAY
57469: PPUSH
57470: CALL_OW 257
57474: PUSH
57475: LD_INT 1
57477: EQUAL
57478: AND
57479: PUSH
57480: LD_VAR 0 4
57484: PUSH
57485: LD_VAR 0 7
57489: ARRAY
57490: PPUSH
57491: CALL_OW 256
57495: PUSH
57496: LD_INT 800
57498: LESS
57499: AND
57500: PUSH
57501: LD_VAR 0 4
57505: PUSH
57506: LD_VAR 0 7
57510: ARRAY
57511: PPUSH
57512: CALL_OW 318
57516: NOT
57517: AND
57518: IFFALSE 57535
// ComCrawl ( group [ i ] ) ;
57520: LD_VAR 0 4
57524: PUSH
57525: LD_VAR 0 7
57529: ARRAY
57530: PPUSH
57531: CALL_OW 137
// if f_mines then
57535: LD_VAR 0 21
57539: IFFALSE 57782
// begin if GetType ( tmp [ 1 ] ) = unit_building and not tmp [ 1 ] in mined then
57541: LD_VAR 0 14
57545: PUSH
57546: LD_INT 1
57548: ARRAY
57549: PPUSH
57550: CALL_OW 247
57554: PUSH
57555: LD_INT 3
57557: EQUAL
57558: PUSH
57559: LD_VAR 0 14
57563: PUSH
57564: LD_INT 1
57566: ARRAY
57567: PUSH
57568: LD_VAR 0 27
57572: IN
57573: NOT
57574: AND
57575: IFFALSE 57782
// begin x := GetX ( tmp [ 1 ] ) ;
57577: LD_ADDR_VAR 0 10
57581: PUSH
57582: LD_VAR 0 14
57586: PUSH
57587: LD_INT 1
57589: ARRAY
57590: PPUSH
57591: CALL_OW 250
57595: ST_TO_ADDR
// y := GetY ( tmp [ 1 ] ) ;
57596: LD_ADDR_VAR 0 11
57600: PUSH
57601: LD_VAR 0 14
57605: PUSH
57606: LD_INT 1
57608: ARRAY
57609: PPUSH
57610: CALL_OW 251
57614: ST_TO_ADDR
// d := ReverseDir ( group [ i ] ) ;
57615: LD_ADDR_VAR 0 12
57619: PUSH
57620: LD_VAR 0 4
57624: PUSH
57625: LD_VAR 0 7
57629: ARRAY
57630: PPUSH
57631: CALL 53490 0 1
57635: ST_TO_ADDR
// ComPlaceDelayedCharge ( group [ i ] , x , y , tmp [ 1 ] ) ;
57636: LD_VAR 0 4
57640: PUSH
57641: LD_VAR 0 7
57645: ARRAY
57646: PPUSH
57647: LD_VAR 0 10
57651: PPUSH
57652: LD_VAR 0 11
57656: PPUSH
57657: LD_VAR 0 14
57661: PUSH
57662: LD_INT 1
57664: ARRAY
57665: PPUSH
57666: CALL_OW 132
// AddComMoveXY ( group [ i ] , ShiftX ( x , d , 7 ) , ShiftY ( y , d , 7 ) ) ;
57670: LD_VAR 0 4
57674: PUSH
57675: LD_VAR 0 7
57679: ARRAY
57680: PPUSH
57681: LD_VAR 0 10
57685: PPUSH
57686: LD_VAR 0 12
57690: PPUSH
57691: LD_INT 7
57693: PPUSH
57694: CALL_OW 272
57698: PPUSH
57699: LD_VAR 0 11
57703: PPUSH
57704: LD_VAR 0 12
57708: PPUSH
57709: LD_INT 7
57711: PPUSH
57712: CALL_OW 273
57716: PPUSH
57717: CALL_OW 171
// SetTag ( group [ i ] , 71 ) ;
57721: LD_VAR 0 4
57725: PUSH
57726: LD_VAR 0 7
57730: ARRAY
57731: PPUSH
57732: LD_INT 71
57734: PPUSH
57735: CALL_OW 109
// mined := Replace ( mined , mined + 1 , tmp [ 1 ] ) ;
57739: LD_ADDR_VAR 0 27
57743: PUSH
57744: LD_VAR 0 27
57748: PPUSH
57749: LD_VAR 0 27
57753: PUSH
57754: LD_INT 1
57756: PLUS
57757: PPUSH
57758: LD_VAR 0 14
57762: PUSH
57763: LD_INT 1
57765: ARRAY
57766: PPUSH
57767: CALL_OW 1
57771: ST_TO_ADDR
// attacking := true ;
57772: LD_ADDR_VAR 0 29
57776: PUSH
57777: LD_INT 1
57779: ST_TO_ADDR
// continue ;
57780: GO 55627
// end ; end ; end ; if GetClass ( group [ i ] ) = 17 and not GetTag ( group [ i ] ) = 71 then
57782: LD_VAR 0 4
57786: PUSH
57787: LD_VAR 0 7
57791: ARRAY
57792: PPUSH
57793: CALL_OW 257
57797: PUSH
57798: LD_INT 17
57800: EQUAL
57801: PUSH
57802: LD_VAR 0 4
57806: PUSH
57807: LD_VAR 0 7
57811: ARRAY
57812: PPUSH
57813: CALL_OW 110
57817: PUSH
57818: LD_INT 71
57820: EQUAL
57821: NOT
57822: AND
57823: IFFALSE 57969
// begin attacking := false ;
57825: LD_ADDR_VAR 0 29
57829: PUSH
57830: LD_INT 0
57832: ST_TO_ADDR
// k := 5 ;
57833: LD_ADDR_VAR 0 9
57837: PUSH
57838: LD_INT 5
57840: ST_TO_ADDR
// if tmp < k then
57841: LD_VAR 0 14
57845: PUSH
57846: LD_VAR 0 9
57850: LESS
57851: IFFALSE 57863
// k := tmp ;
57853: LD_ADDR_VAR 0 9
57857: PUSH
57858: LD_VAR 0 14
57862: ST_TO_ADDR
// for j = 1 to k do
57863: LD_ADDR_VAR 0 8
57867: PUSH
57868: DOUBLE
57869: LD_INT 1
57871: DEC
57872: ST_TO_ADDR
57873: LD_VAR 0 9
57877: PUSH
57878: FOR_TO
57879: IFFALSE 57967
// begin if not tmp [ j ] in UnitFilter ( tmp , [ f_empty ] ) then
57881: LD_VAR 0 14
57885: PUSH
57886: LD_VAR 0 8
57890: ARRAY
57891: PUSH
57892: LD_VAR 0 14
57896: PPUSH
57897: LD_INT 58
57899: PUSH
57900: EMPTY
57901: LIST
57902: PPUSH
57903: CALL_OW 72
57907: IN
57908: NOT
57909: IFFALSE 57965
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
57911: LD_VAR 0 4
57915: PUSH
57916: LD_VAR 0 7
57920: ARRAY
57921: PPUSH
57922: LD_VAR 0 14
57926: PUSH
57927: LD_VAR 0 8
57931: ARRAY
57932: PPUSH
57933: CALL_OW 115
// attacking := true ;
57937: LD_ADDR_VAR 0 29
57941: PUSH
57942: LD_INT 1
57944: ST_TO_ADDR
// SetTag ( group [ i ] , 71 ) ;
57945: LD_VAR 0 4
57949: PUSH
57950: LD_VAR 0 7
57954: ARRAY
57955: PPUSH
57956: LD_INT 71
57958: PPUSH
57959: CALL_OW 109
// continue ;
57963: GO 57878
// end ; end ;
57965: GO 57878
57967: POP
57968: POP
// end ; if GetClass ( group [ i ] ) = 8 or GetWeapon ( group [ i ] ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher , ru_rocket ] then
57969: LD_VAR 0 4
57973: PUSH
57974: LD_VAR 0 7
57978: ARRAY
57979: PPUSH
57980: CALL_OW 257
57984: PUSH
57985: LD_INT 8
57987: EQUAL
57988: PUSH
57989: LD_VAR 0 4
57993: PUSH
57994: LD_VAR 0 7
57998: ARRAY
57999: PPUSH
58000: CALL_OW 264
58004: PUSH
58005: LD_INT 28
58007: PUSH
58008: LD_INT 45
58010: PUSH
58011: LD_INT 7
58013: PUSH
58014: LD_INT 47
58016: PUSH
58017: EMPTY
58018: LIST
58019: LIST
58020: LIST
58021: LIST
58022: IN
58023: OR
58024: IFFALSE 58254
// begin attacking := false ;
58026: LD_ADDR_VAR 0 29
58030: PUSH
58031: LD_INT 0
58033: ST_TO_ADDR
// if GetBType ( tmp [ 1 ] ) in [ b_bunker , b_breastwork , b_turret , b_armoury , b_barracks ] then
58034: LD_VAR 0 14
58038: PUSH
58039: LD_INT 1
58041: ARRAY
58042: PPUSH
58043: CALL_OW 266
58047: PUSH
58048: LD_INT 32
58050: PUSH
58051: LD_INT 31
58053: PUSH
58054: LD_INT 33
58056: PUSH
58057: LD_INT 4
58059: PUSH
58060: LD_INT 5
58062: PUSH
58063: EMPTY
58064: LIST
58065: LIST
58066: LIST
58067: LIST
58068: LIST
58069: IN
58070: IFFALSE 58254
// begin k := GetBuildingHexes ( GetBType ( tmp [ 1 ] ) , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , GetDir ( tmp [ 1 ] ) , GetNation ( tmp [ 1 ] ) , 0 ) ;
58072: LD_ADDR_VAR 0 9
58076: PUSH
58077: LD_VAR 0 14
58081: PUSH
58082: LD_INT 1
58084: ARRAY
58085: PPUSH
58086: CALL_OW 266
58090: PPUSH
58091: LD_VAR 0 14
58095: PUSH
58096: LD_INT 1
58098: ARRAY
58099: PPUSH
58100: CALL_OW 250
58104: PPUSH
58105: LD_VAR 0 14
58109: PUSH
58110: LD_INT 1
58112: ARRAY
58113: PPUSH
58114: CALL_OW 251
58118: PPUSH
58119: LD_VAR 0 14
58123: PUSH
58124: LD_INT 1
58126: ARRAY
58127: PPUSH
58128: CALL_OW 254
58132: PPUSH
58133: LD_VAR 0 14
58137: PUSH
58138: LD_INT 1
58140: ARRAY
58141: PPUSH
58142: CALL_OW 248
58146: PPUSH
58147: LD_INT 0
58149: PPUSH
58150: CALL 34866 0 6
58154: ST_TO_ADDR
// j := GetClosestHex ( group [ i ] , k ) ;
58155: LD_ADDR_VAR 0 8
58159: PUSH
58160: LD_VAR 0 4
58164: PUSH
58165: LD_VAR 0 7
58169: ARRAY
58170: PPUSH
58171: LD_VAR 0 9
58175: PPUSH
58176: CALL 53553 0 2
58180: ST_TO_ADDR
// if j then
58181: LD_VAR 0 8
58185: IFFALSE 58254
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
58187: LD_VAR 0 8
58191: PUSH
58192: LD_INT 1
58194: ARRAY
58195: PPUSH
58196: LD_VAR 0 8
58200: PUSH
58201: LD_INT 2
58203: ARRAY
58204: PPUSH
58205: CALL_OW 488
58209: IFFALSE 58254
// begin ComAttackPlace ( group [ i ] , j [ 1 ] , j [ 2 ] ) ;
58211: LD_VAR 0 4
58215: PUSH
58216: LD_VAR 0 7
58220: ARRAY
58221: PPUSH
58222: LD_VAR 0 8
58226: PUSH
58227: LD_INT 1
58229: ARRAY
58230: PPUSH
58231: LD_VAR 0 8
58235: PUSH
58236: LD_INT 2
58238: ARRAY
58239: PPUSH
58240: CALL_OW 116
// attacking := true ;
58244: LD_ADDR_VAR 0 29
58248: PUSH
58249: LD_INT 1
58251: ST_TO_ADDR
// continue ;
58252: GO 55627
// end ; end ; end ; if GetChassis ( group [ i ] ) = ar_hovercraft then
58254: LD_VAR 0 4
58258: PUSH
58259: LD_VAR 0 7
58263: ARRAY
58264: PPUSH
58265: CALL_OW 265
58269: PUSH
58270: LD_INT 11
58272: EQUAL
58273: IFFALSE 58551
// begin k := 10 ;
58275: LD_ADDR_VAR 0 9
58279: PUSH
58280: LD_INT 10
58282: ST_TO_ADDR
// x := 0 ;
58283: LD_ADDR_VAR 0 10
58287: PUSH
58288: LD_INT 0
58290: ST_TO_ADDR
// if tmp < k then
58291: LD_VAR 0 14
58295: PUSH
58296: LD_VAR 0 9
58300: LESS
58301: IFFALSE 58313
// k := tmp ;
58303: LD_ADDR_VAR 0 9
58307: PUSH
58308: LD_VAR 0 14
58312: ST_TO_ADDR
// for j = k downto 1 do
58313: LD_ADDR_VAR 0 8
58317: PUSH
58318: DOUBLE
58319: LD_VAR 0 9
58323: INC
58324: ST_TO_ADDR
58325: LD_INT 1
58327: PUSH
58328: FOR_DOWNTO
58329: IFFALSE 58404
// begin if GetType ( tmp [ j ] ) = unit_human then
58331: LD_VAR 0 14
58335: PUSH
58336: LD_VAR 0 8
58340: ARRAY
58341: PPUSH
58342: CALL_OW 247
58346: PUSH
58347: LD_INT 1
58349: EQUAL
58350: IFFALSE 58402
// begin AttackHovercraft ( group [ i ] , tmp [ j ] ) ;
58352: LD_VAR 0 4
58356: PUSH
58357: LD_VAR 0 7
58361: ARRAY
58362: PPUSH
58363: LD_VAR 0 14
58367: PUSH
58368: LD_VAR 0 8
58372: ARRAY
58373: PPUSH
58374: CALL 53824 0 2
// x := tmp [ j ] ;
58378: LD_ADDR_VAR 0 10
58382: PUSH
58383: LD_VAR 0 14
58387: PUSH
58388: LD_VAR 0 8
58392: ARRAY
58393: ST_TO_ADDR
// attacking := true ;
58394: LD_ADDR_VAR 0 29
58398: PUSH
58399: LD_INT 1
58401: ST_TO_ADDR
// end ; end ;
58402: GO 58328
58404: POP
58405: POP
// if not x then
58406: LD_VAR 0 10
58410: NOT
58411: IFFALSE 58551
// begin attacking := true ;
58413: LD_ADDR_VAR 0 29
58417: PUSH
58418: LD_INT 1
58420: ST_TO_ADDR
// if GetHexInfo ( GetX ( group [ i ] ) , GetY ( group [ i ] ) ) [ 2 ] = GetHexInfo ( GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) ) [ 2 ] then
58421: LD_VAR 0 4
58425: PUSH
58426: LD_VAR 0 7
58430: ARRAY
58431: PPUSH
58432: CALL_OW 250
58436: PPUSH
58437: LD_VAR 0 4
58441: PUSH
58442: LD_VAR 0 7
58446: ARRAY
58447: PPUSH
58448: CALL_OW 251
58452: PPUSH
58453: CALL_OW 546
58457: PUSH
58458: LD_INT 2
58460: ARRAY
58461: PUSH
58462: LD_VAR 0 14
58466: PUSH
58467: LD_INT 1
58469: ARRAY
58470: PPUSH
58471: CALL_OW 250
58475: PPUSH
58476: LD_VAR 0 14
58480: PUSH
58481: LD_INT 1
58483: ARRAY
58484: PPUSH
58485: CALL_OW 251
58489: PPUSH
58490: CALL_OW 546
58494: PUSH
58495: LD_INT 2
58497: ARRAY
58498: EQUAL
58499: IFFALSE 58527
// AttackHovercraft ( group [ i ] , tmp [ 1 ] ) else
58501: LD_VAR 0 4
58505: PUSH
58506: LD_VAR 0 7
58510: ARRAY
58511: PPUSH
58512: LD_VAR 0 14
58516: PUSH
58517: LD_INT 1
58519: ARRAY
58520: PPUSH
58521: CALL 53824 0 2
58525: GO 58551
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
58527: LD_VAR 0 4
58531: PUSH
58532: LD_VAR 0 7
58536: ARRAY
58537: PPUSH
58538: LD_VAR 0 14
58542: PUSH
58543: LD_INT 1
58545: ARRAY
58546: PPUSH
58547: CALL_OW 115
// end ; end ; if GetWeapon ( group [ i ] ) = ar_selfpropelled_bomb then
58551: LD_VAR 0 4
58555: PUSH
58556: LD_VAR 0 7
58560: ARRAY
58561: PPUSH
58562: CALL_OW 264
58566: PUSH
58567: LD_INT 29
58569: EQUAL
58570: IFFALSE 58936
// begin if WantsToAttack ( group [ i ] ) in bombed then
58572: LD_VAR 0 4
58576: PUSH
58577: LD_VAR 0 7
58581: ARRAY
58582: PPUSH
58583: CALL_OW 319
58587: PUSH
58588: LD_VAR 0 28
58592: IN
58593: IFFALSE 58597
// continue ;
58595: GO 55627
// k := 8 ;
58597: LD_ADDR_VAR 0 9
58601: PUSH
58602: LD_INT 8
58604: ST_TO_ADDR
// x := 0 ;
58605: LD_ADDR_VAR 0 10
58609: PUSH
58610: LD_INT 0
58612: ST_TO_ADDR
// if tmp < k then
58613: LD_VAR 0 14
58617: PUSH
58618: LD_VAR 0 9
58622: LESS
58623: IFFALSE 58635
// k := tmp ;
58625: LD_ADDR_VAR 0 9
58629: PUSH
58630: LD_VAR 0 14
58634: ST_TO_ADDR
// for j = 1 to k do
58635: LD_ADDR_VAR 0 8
58639: PUSH
58640: DOUBLE
58641: LD_INT 1
58643: DEC
58644: ST_TO_ADDR
58645: LD_VAR 0 9
58649: PUSH
58650: FOR_TO
58651: IFFALSE 58783
// begin if GetType ( tmp [ j ] ) = unit_building then
58653: LD_VAR 0 14
58657: PUSH
58658: LD_VAR 0 8
58662: ARRAY
58663: PPUSH
58664: CALL_OW 247
58668: PUSH
58669: LD_INT 3
58671: EQUAL
58672: IFFALSE 58781
// if not tmp [ j ] in bombed and UnitsInside ( tmp [ j ] ) then
58674: LD_VAR 0 14
58678: PUSH
58679: LD_VAR 0 8
58683: ARRAY
58684: PUSH
58685: LD_VAR 0 28
58689: IN
58690: NOT
58691: PUSH
58692: LD_VAR 0 14
58696: PUSH
58697: LD_VAR 0 8
58701: ARRAY
58702: PPUSH
58703: CALL_OW 313
58707: AND
58708: IFFALSE 58781
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
58710: LD_VAR 0 4
58714: PUSH
58715: LD_VAR 0 7
58719: ARRAY
58720: PPUSH
58721: LD_VAR 0 14
58725: PUSH
58726: LD_VAR 0 8
58730: ARRAY
58731: PPUSH
58732: CALL_OW 115
// bombed := Replace ( bombed , bombed + 1 , tmp [ j ] ) ;
58736: LD_ADDR_VAR 0 28
58740: PUSH
58741: LD_VAR 0 28
58745: PPUSH
58746: LD_VAR 0 28
58750: PUSH
58751: LD_INT 1
58753: PLUS
58754: PPUSH
58755: LD_VAR 0 14
58759: PUSH
58760: LD_VAR 0 8
58764: ARRAY
58765: PPUSH
58766: CALL_OW 1
58770: ST_TO_ADDR
// attacking := true ;
58771: LD_ADDR_VAR 0 29
58775: PUSH
58776: LD_INT 1
58778: ST_TO_ADDR
// break ;
58779: GO 58783
// end ; end ;
58781: GO 58650
58783: POP
58784: POP
// if not attacking and f_attack_depot then
58785: LD_VAR 0 29
58789: NOT
58790: PUSH
58791: LD_VAR 0 25
58795: AND
58796: IFFALSE 58891
// begin z := UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
58798: LD_ADDR_VAR 0 13
58802: PUSH
58803: LD_VAR 0 14
58807: PPUSH
58808: LD_INT 2
58810: PUSH
58811: LD_INT 30
58813: PUSH
58814: LD_INT 0
58816: PUSH
58817: EMPTY
58818: LIST
58819: LIST
58820: PUSH
58821: LD_INT 30
58823: PUSH
58824: LD_INT 1
58826: PUSH
58827: EMPTY
58828: LIST
58829: LIST
58830: PUSH
58831: EMPTY
58832: LIST
58833: LIST
58834: LIST
58835: PPUSH
58836: CALL_OW 72
58840: ST_TO_ADDR
// if z then
58841: LD_VAR 0 13
58845: IFFALSE 58891
// begin ComAttackUnit ( group [ i ] , NearestUnitToUnit ( z , group [ i ] ) ) ;
58847: LD_VAR 0 4
58851: PUSH
58852: LD_VAR 0 7
58856: ARRAY
58857: PPUSH
58858: LD_VAR 0 13
58862: PPUSH
58863: LD_VAR 0 4
58867: PUSH
58868: LD_VAR 0 7
58872: ARRAY
58873: PPUSH
58874: CALL_OW 74
58878: PPUSH
58879: CALL_OW 115
// attacking := true ;
58883: LD_ADDR_VAR 0 29
58887: PUSH
58888: LD_INT 1
58890: ST_TO_ADDR
// end ; end ; if GetLives ( group [ i ] ) < 500 then
58891: LD_VAR 0 4
58895: PUSH
58896: LD_VAR 0 7
58900: ARRAY
58901: PPUSH
58902: CALL_OW 256
58906: PUSH
58907: LD_INT 500
58909: LESS
58910: IFFALSE 58936
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
58912: LD_VAR 0 4
58916: PUSH
58917: LD_VAR 0 7
58921: ARRAY
58922: PPUSH
58923: LD_VAR 0 14
58927: PUSH
58928: LD_INT 1
58930: ARRAY
58931: PPUSH
58932: CALL_OW 115
// end ; if GetWeapon ( group [ i ] ) = ru_time_lapser then
58936: LD_VAR 0 4
58940: PUSH
58941: LD_VAR 0 7
58945: ARRAY
58946: PPUSH
58947: CALL_OW 264
58951: PUSH
58952: LD_INT 49
58954: EQUAL
58955: IFFALSE 59076
// begin if not HasTask ( group [ i ] ) then
58957: LD_VAR 0 4
58961: PUSH
58962: LD_VAR 0 7
58966: ARRAY
58967: PPUSH
58968: CALL_OW 314
58972: NOT
58973: IFFALSE 59076
// begin k := NearestUnitToUnit ( FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) , group [ i ] ) ;
58975: LD_ADDR_VAR 0 9
58979: PUSH
58980: LD_INT 81
58982: PUSH
58983: LD_VAR 0 4
58987: PUSH
58988: LD_VAR 0 7
58992: ARRAY
58993: PPUSH
58994: CALL_OW 255
58998: PUSH
58999: EMPTY
59000: LIST
59001: LIST
59002: PPUSH
59003: CALL_OW 69
59007: PPUSH
59008: LD_VAR 0 4
59012: PUSH
59013: LD_VAR 0 7
59017: ARRAY
59018: PPUSH
59019: CALL_OW 74
59023: ST_TO_ADDR
// if k then
59024: LD_VAR 0 9
59028: IFFALSE 59076
// if GetDistUnits ( group [ i ] , k ) > 10 then
59030: LD_VAR 0 4
59034: PUSH
59035: LD_VAR 0 7
59039: ARRAY
59040: PPUSH
59041: LD_VAR 0 9
59045: PPUSH
59046: CALL_OW 296
59050: PUSH
59051: LD_INT 10
59053: GREATER
59054: IFFALSE 59076
// ComMoveUnit ( group [ i ] , k ) ;
59056: LD_VAR 0 4
59060: PUSH
59061: LD_VAR 0 7
59065: ARRAY
59066: PPUSH
59067: LD_VAR 0 9
59071: PPUSH
59072: CALL_OW 112
// end ; end ; if GetLives ( group [ i ] ) < 250 and group [ i ] in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
59076: LD_VAR 0 4
59080: PUSH
59081: LD_VAR 0 7
59085: ARRAY
59086: PPUSH
59087: CALL_OW 256
59091: PUSH
59092: LD_INT 250
59094: LESS
59095: PUSH
59096: LD_VAR 0 4
59100: PUSH
59101: LD_VAR 0 7
59105: ARRAY
59106: PUSH
59107: LD_INT 21
59109: PUSH
59110: LD_INT 2
59112: PUSH
59113: EMPTY
59114: LIST
59115: LIST
59116: PUSH
59117: LD_INT 23
59119: PUSH
59120: LD_INT 2
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: PUSH
59127: EMPTY
59128: LIST
59129: LIST
59130: PPUSH
59131: CALL_OW 69
59135: IN
59136: AND
59137: IFFALSE 59262
// begin k := NearestUnitToUnit ( all_units diff group [ i ] , group [ i ] ) ;
59139: LD_ADDR_VAR 0 9
59143: PUSH
59144: LD_OWVAR 3
59148: PUSH
59149: LD_VAR 0 4
59153: PUSH
59154: LD_VAR 0 7
59158: ARRAY
59159: DIFF
59160: PPUSH
59161: LD_VAR 0 4
59165: PUSH
59166: LD_VAR 0 7
59170: ARRAY
59171: PPUSH
59172: CALL_OW 74
59176: ST_TO_ADDR
// if not k then
59177: LD_VAR 0 9
59181: NOT
59182: IFFALSE 59186
// continue ;
59184: GO 55627
// if k in FilterAllUnits ( [ f_enemy , GetSide ( group [ i ] ) ] ) and GetDistUnits ( k , group [ i ] ) < 5 then
59186: LD_VAR 0 9
59190: PUSH
59191: LD_INT 81
59193: PUSH
59194: LD_VAR 0 4
59198: PUSH
59199: LD_VAR 0 7
59203: ARRAY
59204: PPUSH
59205: CALL_OW 255
59209: PUSH
59210: EMPTY
59211: LIST
59212: LIST
59213: PPUSH
59214: CALL_OW 69
59218: IN
59219: PUSH
59220: LD_VAR 0 9
59224: PPUSH
59225: LD_VAR 0 4
59229: PUSH
59230: LD_VAR 0 7
59234: ARRAY
59235: PPUSH
59236: CALL_OW 296
59240: PUSH
59241: LD_INT 5
59243: LESS
59244: AND
59245: IFFALSE 59262
// ComAutodestruct ( group [ i ] ) ;
59247: LD_VAR 0 4
59251: PUSH
59252: LD_VAR 0 7
59256: ARRAY
59257: PPUSH
59258: CALL 53722 0 1
// end ; if f_attack_depot then
59262: LD_VAR 0 25
59266: IFFALSE 59378
// begin k := 6 ;
59268: LD_ADDR_VAR 0 9
59272: PUSH
59273: LD_INT 6
59275: ST_TO_ADDR
// if tmp < k then
59276: LD_VAR 0 14
59280: PUSH
59281: LD_VAR 0 9
59285: LESS
59286: IFFALSE 59298
// k := tmp ;
59288: LD_ADDR_VAR 0 9
59292: PUSH
59293: LD_VAR 0 14
59297: ST_TO_ADDR
// for j = 1 to k do
59298: LD_ADDR_VAR 0 8
59302: PUSH
59303: DOUBLE
59304: LD_INT 1
59306: DEC
59307: ST_TO_ADDR
59308: LD_VAR 0 9
59312: PUSH
59313: FOR_TO
59314: IFFALSE 59376
// if GetBType ( j ) in [ b_depot , b_warehouse ] then
59316: LD_VAR 0 8
59320: PPUSH
59321: CALL_OW 266
59325: PUSH
59326: LD_INT 0
59328: PUSH
59329: LD_INT 1
59331: PUSH
59332: EMPTY
59333: LIST
59334: LIST
59335: IN
59336: IFFALSE 59374
// begin ComAttackUnit ( group [ i ] , tmp [ j ] ) ;
59338: LD_VAR 0 4
59342: PUSH
59343: LD_VAR 0 7
59347: ARRAY
59348: PPUSH
59349: LD_VAR 0 14
59353: PUSH
59354: LD_VAR 0 8
59358: ARRAY
59359: PPUSH
59360: CALL_OW 115
// attacking := true ;
59364: LD_ADDR_VAR 0 29
59368: PUSH
59369: LD_INT 1
59371: ST_TO_ADDR
// break ;
59372: GO 59376
// end ;
59374: GO 59313
59376: POP
59377: POP
// end ; if IsOk ( group [ i ] ) and not attacking then
59378: LD_VAR 0 4
59382: PUSH
59383: LD_VAR 0 7
59387: ARRAY
59388: PPUSH
59389: CALL_OW 302
59393: PUSH
59394: LD_VAR 0 29
59398: NOT
59399: AND
59400: IFFALSE 59722
// begin if GetTag ( group [ i ] ) = 71 then
59402: LD_VAR 0 4
59406: PUSH
59407: LD_VAR 0 7
59411: ARRAY
59412: PPUSH
59413: CALL_OW 110
59417: PUSH
59418: LD_INT 71
59420: EQUAL
59421: IFFALSE 59462
// begin if HasTask ( group [ i ] ) then
59423: LD_VAR 0 4
59427: PUSH
59428: LD_VAR 0 7
59432: ARRAY
59433: PPUSH
59434: CALL_OW 314
59438: IFFALSE 59444
// continue else
59440: GO 55627
59442: GO 59462
// SetTag ( group [ i ] , 0 ) ;
59444: LD_VAR 0 4
59448: PUSH
59449: LD_VAR 0 7
59453: ARRAY
59454: PPUSH
59455: LD_INT 0
59457: PPUSH
59458: CALL_OW 109
// end ; k := 8 ;
59462: LD_ADDR_VAR 0 9
59466: PUSH
59467: LD_INT 8
59469: ST_TO_ADDR
// x := 0 ;
59470: LD_ADDR_VAR 0 10
59474: PUSH
59475: LD_INT 0
59477: ST_TO_ADDR
// if tmp < k then
59478: LD_VAR 0 14
59482: PUSH
59483: LD_VAR 0 9
59487: LESS
59488: IFFALSE 59500
// k := tmp ;
59490: LD_ADDR_VAR 0 9
59494: PUSH
59495: LD_VAR 0 14
59499: ST_TO_ADDR
// for j = 1 to k do
59500: LD_ADDR_VAR 0 8
59504: PUSH
59505: DOUBLE
59506: LD_INT 1
59508: DEC
59509: ST_TO_ADDR
59510: LD_VAR 0 9
59514: PUSH
59515: FOR_TO
59516: IFFALSE 59614
// if GetType ( tmp [ j ] ) = unit_human and ( ( GetLives ( tmp [ j ] ) < 250 and f_murder ) or ( not f_murder and GetLives ( tmp [ j ] ) >= 250 ) ) then
59518: LD_VAR 0 14
59522: PUSH
59523: LD_VAR 0 8
59527: ARRAY
59528: PPUSH
59529: CALL_OW 247
59533: PUSH
59534: LD_INT 1
59536: EQUAL
59537: PUSH
59538: LD_VAR 0 14
59542: PUSH
59543: LD_VAR 0 8
59547: ARRAY
59548: PPUSH
59549: CALL_OW 256
59553: PUSH
59554: LD_INT 250
59556: LESS
59557: PUSH
59558: LD_VAR 0 20
59562: AND
59563: PUSH
59564: LD_VAR 0 20
59568: NOT
59569: PUSH
59570: LD_VAR 0 14
59574: PUSH
59575: LD_VAR 0 8
59579: ARRAY
59580: PPUSH
59581: CALL_OW 256
59585: PUSH
59586: LD_INT 250
59588: GREATEREQUAL
59589: AND
59590: OR
59591: AND
59592: IFFALSE 59612
// begin x := tmp [ j ] ;
59594: LD_ADDR_VAR 0 10
59598: PUSH
59599: LD_VAR 0 14
59603: PUSH
59604: LD_VAR 0 8
59608: ARRAY
59609: ST_TO_ADDR
// break ;
59610: GO 59614
// end ;
59612: GO 59515
59614: POP
59615: POP
// if x then
59616: LD_VAR 0 10
59620: IFFALSE 59644
// ComAttackUnit ( group [ i ] , x ) else
59622: LD_VAR 0 4
59626: PUSH
59627: LD_VAR 0 7
59631: ARRAY
59632: PPUSH
59633: LD_VAR 0 10
59637: PPUSH
59638: CALL_OW 115
59642: GO 59668
// ComAttackUnit ( group [ i ] , tmp [ 1 ] ) ;
59644: LD_VAR 0 4
59648: PUSH
59649: LD_VAR 0 7
59653: ARRAY
59654: PPUSH
59655: LD_VAR 0 14
59659: PUSH
59660: LD_INT 1
59662: ARRAY
59663: PPUSH
59664: CALL_OW 115
// if not HasTask ( group [ i ] ) then
59668: LD_VAR 0 4
59672: PUSH
59673: LD_VAR 0 7
59677: ARRAY
59678: PPUSH
59679: CALL_OW 314
59683: NOT
59684: IFFALSE 59722
// ComAttackUnit ( group [ i ] , NearestUnitToUnit ( tmp , group [ i ] ) ) ;
59686: LD_VAR 0 4
59690: PUSH
59691: LD_VAR 0 7
59695: ARRAY
59696: PPUSH
59697: LD_VAR 0 14
59701: PPUSH
59702: LD_VAR 0 4
59706: PUSH
59707: LD_VAR 0 7
59711: ARRAY
59712: PPUSH
59713: CALL_OW 74
59717: PPUSH
59718: CALL_OW 115
// end ; end ; end ;
59722: GO 55627
59724: POP
59725: POP
// wait ( 0 0$1 ) ;
59726: LD_INT 35
59728: PPUSH
59729: CALL_OW 67
// until group = [ ] or not FilterAllUnits ( [ f_enemy , side ] ) ;
59733: LD_VAR 0 4
59737: PUSH
59738: EMPTY
59739: EQUAL
59740: PUSH
59741: LD_INT 81
59743: PUSH
59744: LD_VAR 0 35
59748: PUSH
59749: EMPTY
59750: LIST
59751: LIST
59752: PPUSH
59753: CALL_OW 69
59757: NOT
59758: OR
59759: IFFALSE 55612
// end ;
59761: LD_VAR 0 2
59765: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59766: LD_INT 0
59768: PPUSH
59769: PPUSH
59770: PPUSH
59771: PPUSH
// if not base_units then
59772: LD_VAR 0 1
59776: NOT
59777: IFFALSE 59781
// exit ;
59779: GO 59868
// result := false ;
59781: LD_ADDR_VAR 0 2
59785: PUSH
59786: LD_INT 0
59788: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59789: LD_ADDR_VAR 0 5
59793: PUSH
59794: LD_VAR 0 1
59798: PPUSH
59799: LD_INT 21
59801: PUSH
59802: LD_INT 3
59804: PUSH
59805: EMPTY
59806: LIST
59807: LIST
59808: PPUSH
59809: CALL_OW 72
59813: ST_TO_ADDR
// if not tmp then
59814: LD_VAR 0 5
59818: NOT
59819: IFFALSE 59823
// exit ;
59821: GO 59868
// for i in tmp do
59823: LD_ADDR_VAR 0 3
59827: PUSH
59828: LD_VAR 0 5
59832: PUSH
59833: FOR_IN
59834: IFFALSE 59866
// begin result := EnemyInRange ( i , 22 ) ;
59836: LD_ADDR_VAR 0 2
59840: PUSH
59841: LD_VAR 0 3
59845: PPUSH
59846: LD_INT 22
59848: PPUSH
59849: CALL 53405 0 2
59853: ST_TO_ADDR
// if result then
59854: LD_VAR 0 2
59858: IFFALSE 59864
// exit ;
59860: POP
59861: POP
59862: GO 59868
// end ;
59864: GO 59833
59866: POP
59867: POP
// end ;
59868: LD_VAR 0 2
59872: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
59873: LD_INT 0
59875: PPUSH
59876: PPUSH
// if not units then
59877: LD_VAR 0 1
59881: NOT
59882: IFFALSE 59886
// exit ;
59884: GO 59956
// result := [ ] ;
59886: LD_ADDR_VAR 0 3
59890: PUSH
59891: EMPTY
59892: ST_TO_ADDR
// for i in units do
59893: LD_ADDR_VAR 0 4
59897: PUSH
59898: LD_VAR 0 1
59902: PUSH
59903: FOR_IN
59904: IFFALSE 59954
// if GetTag ( i ) = tag then
59906: LD_VAR 0 4
59910: PPUSH
59911: CALL_OW 110
59915: PUSH
59916: LD_VAR 0 2
59920: EQUAL
59921: IFFALSE 59952
// result := Insert ( result , result + 1 , i ) ;
59923: LD_ADDR_VAR 0 3
59927: PUSH
59928: LD_VAR 0 3
59932: PPUSH
59933: LD_VAR 0 3
59937: PUSH
59938: LD_INT 1
59940: PLUS
59941: PPUSH
59942: LD_VAR 0 4
59946: PPUSH
59947: CALL_OW 2
59951: ST_TO_ADDR
59952: GO 59903
59954: POP
59955: POP
// end ;
59956: LD_VAR 0 3
59960: RET
// export function IsDriver ( un ) ; begin
59961: LD_INT 0
59963: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59964: LD_ADDR_VAR 0 2
59968: PUSH
59969: LD_VAR 0 1
59973: PUSH
59974: LD_INT 55
59976: PUSH
59977: EMPTY
59978: LIST
59979: PPUSH
59980: CALL_OW 69
59984: IN
59985: ST_TO_ADDR
// end ;
59986: LD_VAR 0 2
59990: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59991: LD_INT 0
59993: PPUSH
59994: PPUSH
// list := [ ] ;
59995: LD_ADDR_VAR 0 5
59999: PUSH
60000: EMPTY
60001: ST_TO_ADDR
// case d of 0 :
60002: LD_VAR 0 3
60006: PUSH
60007: LD_INT 0
60009: DOUBLE
60010: EQUAL
60011: IFTRUE 60015
60013: GO 60148
60015: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
60016: LD_ADDR_VAR 0 5
60020: PUSH
60021: LD_VAR 0 1
60025: PUSH
60026: LD_INT 4
60028: MINUS
60029: PUSH
60030: LD_VAR 0 2
60034: PUSH
60035: LD_INT 4
60037: MINUS
60038: PUSH
60039: LD_INT 2
60041: PUSH
60042: EMPTY
60043: LIST
60044: LIST
60045: LIST
60046: PUSH
60047: LD_VAR 0 1
60051: PUSH
60052: LD_INT 3
60054: MINUS
60055: PUSH
60056: LD_VAR 0 2
60060: PUSH
60061: LD_INT 1
60063: PUSH
60064: EMPTY
60065: LIST
60066: LIST
60067: LIST
60068: PUSH
60069: LD_VAR 0 1
60073: PUSH
60074: LD_INT 4
60076: PLUS
60077: PUSH
60078: LD_VAR 0 2
60082: PUSH
60083: LD_INT 4
60085: PUSH
60086: EMPTY
60087: LIST
60088: LIST
60089: LIST
60090: PUSH
60091: LD_VAR 0 1
60095: PUSH
60096: LD_INT 3
60098: PLUS
60099: PUSH
60100: LD_VAR 0 2
60104: PUSH
60105: LD_INT 3
60107: PLUS
60108: PUSH
60109: LD_INT 5
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: LIST
60116: PUSH
60117: LD_VAR 0 1
60121: PUSH
60122: LD_VAR 0 2
60126: PUSH
60127: LD_INT 4
60129: PLUS
60130: PUSH
60131: LD_INT 0
60133: PUSH
60134: EMPTY
60135: LIST
60136: LIST
60137: LIST
60138: PUSH
60139: EMPTY
60140: LIST
60141: LIST
60142: LIST
60143: LIST
60144: LIST
60145: ST_TO_ADDR
// end ; 1 :
60146: GO 60846
60148: LD_INT 1
60150: DOUBLE
60151: EQUAL
60152: IFTRUE 60156
60154: GO 60289
60156: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
60157: LD_ADDR_VAR 0 5
60161: PUSH
60162: LD_VAR 0 1
60166: PUSH
60167: LD_VAR 0 2
60171: PUSH
60172: LD_INT 4
60174: MINUS
60175: PUSH
60176: LD_INT 3
60178: PUSH
60179: EMPTY
60180: LIST
60181: LIST
60182: LIST
60183: PUSH
60184: LD_VAR 0 1
60188: PUSH
60189: LD_INT 3
60191: MINUS
60192: PUSH
60193: LD_VAR 0 2
60197: PUSH
60198: LD_INT 3
60200: MINUS
60201: PUSH
60202: LD_INT 2
60204: PUSH
60205: EMPTY
60206: LIST
60207: LIST
60208: LIST
60209: PUSH
60210: LD_VAR 0 1
60214: PUSH
60215: LD_INT 4
60217: MINUS
60218: PUSH
60219: LD_VAR 0 2
60223: PUSH
60224: LD_INT 1
60226: PUSH
60227: EMPTY
60228: LIST
60229: LIST
60230: LIST
60231: PUSH
60232: LD_VAR 0 1
60236: PUSH
60237: LD_VAR 0 2
60241: PUSH
60242: LD_INT 3
60244: PLUS
60245: PUSH
60246: LD_INT 0
60248: PUSH
60249: EMPTY
60250: LIST
60251: LIST
60252: LIST
60253: PUSH
60254: LD_VAR 0 1
60258: PUSH
60259: LD_INT 4
60261: PLUS
60262: PUSH
60263: LD_VAR 0 2
60267: PUSH
60268: LD_INT 4
60270: PLUS
60271: PUSH
60272: LD_INT 5
60274: PUSH
60275: EMPTY
60276: LIST
60277: LIST
60278: LIST
60279: PUSH
60280: EMPTY
60281: LIST
60282: LIST
60283: LIST
60284: LIST
60285: LIST
60286: ST_TO_ADDR
// end ; 2 :
60287: GO 60846
60289: LD_INT 2
60291: DOUBLE
60292: EQUAL
60293: IFTRUE 60297
60295: GO 60426
60297: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
60298: LD_ADDR_VAR 0 5
60302: PUSH
60303: LD_VAR 0 1
60307: PUSH
60308: LD_VAR 0 2
60312: PUSH
60313: LD_INT 3
60315: MINUS
60316: PUSH
60317: LD_INT 3
60319: PUSH
60320: EMPTY
60321: LIST
60322: LIST
60323: LIST
60324: PUSH
60325: LD_VAR 0 1
60329: PUSH
60330: LD_INT 4
60332: PLUS
60333: PUSH
60334: LD_VAR 0 2
60338: PUSH
60339: LD_INT 4
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: LIST
60346: PUSH
60347: LD_VAR 0 1
60351: PUSH
60352: LD_VAR 0 2
60356: PUSH
60357: LD_INT 4
60359: PLUS
60360: PUSH
60361: LD_INT 0
60363: PUSH
60364: EMPTY
60365: LIST
60366: LIST
60367: LIST
60368: PUSH
60369: LD_VAR 0 1
60373: PUSH
60374: LD_INT 3
60376: MINUS
60377: PUSH
60378: LD_VAR 0 2
60382: PUSH
60383: LD_INT 1
60385: PUSH
60386: EMPTY
60387: LIST
60388: LIST
60389: LIST
60390: PUSH
60391: LD_VAR 0 1
60395: PUSH
60396: LD_INT 4
60398: MINUS
60399: PUSH
60400: LD_VAR 0 2
60404: PUSH
60405: LD_INT 4
60407: MINUS
60408: PUSH
60409: LD_INT 2
60411: PUSH
60412: EMPTY
60413: LIST
60414: LIST
60415: LIST
60416: PUSH
60417: EMPTY
60418: LIST
60419: LIST
60420: LIST
60421: LIST
60422: LIST
60423: ST_TO_ADDR
// end ; 3 :
60424: GO 60846
60426: LD_INT 3
60428: DOUBLE
60429: EQUAL
60430: IFTRUE 60434
60432: GO 60567
60434: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
60435: LD_ADDR_VAR 0 5
60439: PUSH
60440: LD_VAR 0 1
60444: PUSH
60445: LD_INT 3
60447: PLUS
60448: PUSH
60449: LD_VAR 0 2
60453: PUSH
60454: LD_INT 4
60456: PUSH
60457: EMPTY
60458: LIST
60459: LIST
60460: LIST
60461: PUSH
60462: LD_VAR 0 1
60466: PUSH
60467: LD_INT 4
60469: PLUS
60470: PUSH
60471: LD_VAR 0 2
60475: PUSH
60476: LD_INT 4
60478: PLUS
60479: PUSH
60480: LD_INT 5
60482: PUSH
60483: EMPTY
60484: LIST
60485: LIST
60486: LIST
60487: PUSH
60488: LD_VAR 0 1
60492: PUSH
60493: LD_INT 4
60495: MINUS
60496: PUSH
60497: LD_VAR 0 2
60501: PUSH
60502: LD_INT 1
60504: PUSH
60505: EMPTY
60506: LIST
60507: LIST
60508: LIST
60509: PUSH
60510: LD_VAR 0 1
60514: PUSH
60515: LD_VAR 0 2
60519: PUSH
60520: LD_INT 4
60522: MINUS
60523: PUSH
60524: LD_INT 3
60526: PUSH
60527: EMPTY
60528: LIST
60529: LIST
60530: LIST
60531: PUSH
60532: LD_VAR 0 1
60536: PUSH
60537: LD_INT 3
60539: MINUS
60540: PUSH
60541: LD_VAR 0 2
60545: PUSH
60546: LD_INT 3
60548: MINUS
60549: PUSH
60550: LD_INT 2
60552: PUSH
60553: EMPTY
60554: LIST
60555: LIST
60556: LIST
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: LIST
60562: LIST
60563: LIST
60564: ST_TO_ADDR
// end ; 4 :
60565: GO 60846
60567: LD_INT 4
60569: DOUBLE
60570: EQUAL
60571: IFTRUE 60575
60573: GO 60708
60575: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
60576: LD_ADDR_VAR 0 5
60580: PUSH
60581: LD_VAR 0 1
60585: PUSH
60586: LD_VAR 0 2
60590: PUSH
60591: LD_INT 4
60593: PLUS
60594: PUSH
60595: LD_INT 0
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: LIST
60602: PUSH
60603: LD_VAR 0 1
60607: PUSH
60608: LD_INT 3
60610: PLUS
60611: PUSH
60612: LD_VAR 0 2
60616: PUSH
60617: LD_INT 3
60619: PLUS
60620: PUSH
60621: LD_INT 5
60623: PUSH
60624: EMPTY
60625: LIST
60626: LIST
60627: LIST
60628: PUSH
60629: LD_VAR 0 1
60633: PUSH
60634: LD_INT 4
60636: PLUS
60637: PUSH
60638: LD_VAR 0 2
60642: PUSH
60643: LD_INT 4
60645: PUSH
60646: EMPTY
60647: LIST
60648: LIST
60649: LIST
60650: PUSH
60651: LD_VAR 0 1
60655: PUSH
60656: LD_VAR 0 2
60660: PUSH
60661: LD_INT 3
60663: MINUS
60664: PUSH
60665: LD_INT 3
60667: PUSH
60668: EMPTY
60669: LIST
60670: LIST
60671: LIST
60672: PUSH
60673: LD_VAR 0 1
60677: PUSH
60678: LD_INT 4
60680: MINUS
60681: PUSH
60682: LD_VAR 0 2
60686: PUSH
60687: LD_INT 4
60689: MINUS
60690: PUSH
60691: LD_INT 2
60693: PUSH
60694: EMPTY
60695: LIST
60696: LIST
60697: LIST
60698: PUSH
60699: EMPTY
60700: LIST
60701: LIST
60702: LIST
60703: LIST
60704: LIST
60705: ST_TO_ADDR
// end ; 5 :
60706: GO 60846
60708: LD_INT 5
60710: DOUBLE
60711: EQUAL
60712: IFTRUE 60716
60714: GO 60845
60716: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
60717: LD_ADDR_VAR 0 5
60721: PUSH
60722: LD_VAR 0 1
60726: PUSH
60727: LD_INT 4
60729: MINUS
60730: PUSH
60731: LD_VAR 0 2
60735: PUSH
60736: LD_INT 1
60738: PUSH
60739: EMPTY
60740: LIST
60741: LIST
60742: LIST
60743: PUSH
60744: LD_VAR 0 1
60748: PUSH
60749: LD_VAR 0 2
60753: PUSH
60754: LD_INT 4
60756: MINUS
60757: PUSH
60758: LD_INT 3
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: LIST
60765: PUSH
60766: LD_VAR 0 1
60770: PUSH
60771: LD_INT 4
60773: PLUS
60774: PUSH
60775: LD_VAR 0 2
60779: PUSH
60780: LD_INT 4
60782: PLUS
60783: PUSH
60784: LD_INT 5
60786: PUSH
60787: EMPTY
60788: LIST
60789: LIST
60790: LIST
60791: PUSH
60792: LD_VAR 0 1
60796: PUSH
60797: LD_INT 3
60799: PLUS
60800: PUSH
60801: LD_VAR 0 2
60805: PUSH
60806: LD_INT 4
60808: PUSH
60809: EMPTY
60810: LIST
60811: LIST
60812: LIST
60813: PUSH
60814: LD_VAR 0 1
60818: PUSH
60819: LD_VAR 0 2
60823: PUSH
60824: LD_INT 3
60826: PLUS
60827: PUSH
60828: LD_INT 0
60830: PUSH
60831: EMPTY
60832: LIST
60833: LIST
60834: LIST
60835: PUSH
60836: EMPTY
60837: LIST
60838: LIST
60839: LIST
60840: LIST
60841: LIST
60842: ST_TO_ADDR
// end ; end ;
60843: GO 60846
60845: POP
// result := list ;
60846: LD_ADDR_VAR 0 4
60850: PUSH
60851: LD_VAR 0 5
60855: ST_TO_ADDR
// end ;
60856: LD_VAR 0 4
60860: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60861: LD_INT 0
60863: PPUSH
60864: PPUSH
60865: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60866: LD_VAR 0 1
60870: NOT
60871: PUSH
60872: LD_VAR 0 2
60876: PUSH
60877: LD_INT 1
60879: PUSH
60880: LD_INT 2
60882: PUSH
60883: LD_INT 3
60885: PUSH
60886: LD_INT 4
60888: PUSH
60889: EMPTY
60890: LIST
60891: LIST
60892: LIST
60893: LIST
60894: IN
60895: NOT
60896: OR
60897: IFFALSE 60901
// exit ;
60899: GO 60993
// tmp := [ ] ;
60901: LD_ADDR_VAR 0 5
60905: PUSH
60906: EMPTY
60907: ST_TO_ADDR
// for i in units do
60908: LD_ADDR_VAR 0 4
60912: PUSH
60913: LD_VAR 0 1
60917: PUSH
60918: FOR_IN
60919: IFFALSE 60962
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
60921: LD_ADDR_VAR 0 5
60925: PUSH
60926: LD_VAR 0 5
60930: PPUSH
60931: LD_VAR 0 5
60935: PUSH
60936: LD_INT 1
60938: PLUS
60939: PPUSH
60940: LD_VAR 0 4
60944: PPUSH
60945: LD_VAR 0 2
60949: PPUSH
60950: CALL_OW 259
60954: PPUSH
60955: CALL_OW 2
60959: ST_TO_ADDR
60960: GO 60918
60962: POP
60963: POP
// if not tmp then
60964: LD_VAR 0 5
60968: NOT
60969: IFFALSE 60973
// exit ;
60971: GO 60993
// result := SortListByListDesc ( units , tmp ) ;
60973: LD_ADDR_VAR 0 3
60977: PUSH
60978: LD_VAR 0 1
60982: PPUSH
60983: LD_VAR 0 5
60987: PPUSH
60988: CALL_OW 77
60992: ST_TO_ADDR
// end ;
60993: LD_VAR 0 3
60997: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60998: LD_INT 0
61000: PPUSH
61001: PPUSH
61002: PPUSH
// x := GetX ( building ) ;
61003: LD_ADDR_VAR 0 4
61007: PUSH
61008: LD_VAR 0 2
61012: PPUSH
61013: CALL_OW 250
61017: ST_TO_ADDR
// y := GetY ( building ) ;
61018: LD_ADDR_VAR 0 5
61022: PUSH
61023: LD_VAR 0 2
61027: PPUSH
61028: CALL_OW 251
61032: ST_TO_ADDR
// if GetTaskList ( unit ) then
61033: LD_VAR 0 1
61037: PPUSH
61038: CALL_OW 437
61042: IFFALSE 61137
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
61044: LD_STRING e
61046: PUSH
61047: LD_VAR 0 1
61051: PPUSH
61052: CALL_OW 437
61056: PUSH
61057: LD_INT 1
61059: ARRAY
61060: PUSH
61061: LD_INT 1
61063: ARRAY
61064: EQUAL
61065: PUSH
61066: LD_VAR 0 4
61070: PUSH
61071: LD_VAR 0 1
61075: PPUSH
61076: CALL_OW 437
61080: PUSH
61081: LD_INT 1
61083: ARRAY
61084: PUSH
61085: LD_INT 2
61087: ARRAY
61088: EQUAL
61089: AND
61090: PUSH
61091: LD_VAR 0 5
61095: PUSH
61096: LD_VAR 0 1
61100: PPUSH
61101: CALL_OW 437
61105: PUSH
61106: LD_INT 1
61108: ARRAY
61109: PUSH
61110: LD_INT 3
61112: ARRAY
61113: EQUAL
61114: AND
61115: IFFALSE 61127
// result := true else
61117: LD_ADDR_VAR 0 3
61121: PUSH
61122: LD_INT 1
61124: ST_TO_ADDR
61125: GO 61135
// result := false ;
61127: LD_ADDR_VAR 0 3
61131: PUSH
61132: LD_INT 0
61134: ST_TO_ADDR
// end else
61135: GO 61145
// result := false ;
61137: LD_ADDR_VAR 0 3
61141: PUSH
61142: LD_INT 0
61144: ST_TO_ADDR
// end ;
61145: LD_VAR 0 3
61149: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
61150: LD_INT 0
61152: PPUSH
61153: PPUSH
61154: PPUSH
61155: PPUSH
// if not unit or not area then
61156: LD_VAR 0 1
61160: NOT
61161: PUSH
61162: LD_VAR 0 2
61166: NOT
61167: OR
61168: IFFALSE 61172
// exit ;
61170: GO 61336
// tmp := AreaToList ( area , i ) ;
61172: LD_ADDR_VAR 0 6
61176: PUSH
61177: LD_VAR 0 2
61181: PPUSH
61182: LD_VAR 0 5
61186: PPUSH
61187: CALL_OW 517
61191: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
61192: LD_ADDR_VAR 0 5
61196: PUSH
61197: DOUBLE
61198: LD_INT 1
61200: DEC
61201: ST_TO_ADDR
61202: LD_VAR 0 6
61206: PUSH
61207: LD_INT 1
61209: ARRAY
61210: PUSH
61211: FOR_TO
61212: IFFALSE 61334
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
61214: LD_ADDR_VAR 0 7
61218: PUSH
61219: LD_VAR 0 6
61223: PUSH
61224: LD_INT 1
61226: ARRAY
61227: PUSH
61228: LD_VAR 0 5
61232: ARRAY
61233: PUSH
61234: LD_VAR 0 6
61238: PUSH
61239: LD_INT 2
61241: ARRAY
61242: PUSH
61243: LD_VAR 0 5
61247: ARRAY
61248: PUSH
61249: EMPTY
61250: LIST
61251: LIST
61252: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
61253: LD_VAR 0 7
61257: PUSH
61258: LD_INT 1
61260: ARRAY
61261: PPUSH
61262: LD_VAR 0 7
61266: PUSH
61267: LD_INT 2
61269: ARRAY
61270: PPUSH
61271: CALL_OW 428
61275: PUSH
61276: LD_INT 0
61278: EQUAL
61279: IFFALSE 61332
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
61281: LD_VAR 0 1
61285: PPUSH
61286: LD_VAR 0 7
61290: PUSH
61291: LD_INT 1
61293: ARRAY
61294: PPUSH
61295: LD_VAR 0 7
61299: PUSH
61300: LD_INT 2
61302: ARRAY
61303: PPUSH
61304: LD_VAR 0 3
61308: PPUSH
61309: CALL_OW 48
// result := IsPlaced ( unit ) ;
61313: LD_ADDR_VAR 0 4
61317: PUSH
61318: LD_VAR 0 1
61322: PPUSH
61323: CALL_OW 305
61327: ST_TO_ADDR
// exit ;
61328: POP
61329: POP
61330: GO 61336
// end ; end ;
61332: GO 61211
61334: POP
61335: POP
// end ;
61336: LD_VAR 0 4
61340: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
61341: LD_INT 0
61343: PPUSH
61344: PPUSH
61345: PPUSH
// if not side or side > 8 then
61346: LD_VAR 0 1
61350: NOT
61351: PUSH
61352: LD_VAR 0 1
61356: PUSH
61357: LD_INT 8
61359: GREATER
61360: OR
61361: IFFALSE 61365
// exit ;
61363: GO 61552
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
61365: LD_ADDR_VAR 0 4
61369: PUSH
61370: LD_INT 22
61372: PUSH
61373: LD_VAR 0 1
61377: PUSH
61378: EMPTY
61379: LIST
61380: LIST
61381: PUSH
61382: LD_INT 21
61384: PUSH
61385: LD_INT 3
61387: PUSH
61388: EMPTY
61389: LIST
61390: LIST
61391: PUSH
61392: EMPTY
61393: LIST
61394: LIST
61395: PPUSH
61396: CALL_OW 69
61400: ST_TO_ADDR
// if not tmp then
61401: LD_VAR 0 4
61405: NOT
61406: IFFALSE 61410
// exit ;
61408: GO 61552
// enable_addtolog := true ;
61410: LD_ADDR_OWVAR 81
61414: PUSH
61415: LD_INT 1
61417: ST_TO_ADDR
// AddToLog ( [ ) ;
61418: LD_STRING [
61420: PPUSH
61421: CALL_OW 561
// for i in tmp do
61425: LD_ADDR_VAR 0 3
61429: PUSH
61430: LD_VAR 0 4
61434: PUSH
61435: FOR_IN
61436: IFFALSE 61543
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
61438: LD_STRING [
61440: PUSH
61441: LD_VAR 0 3
61445: PPUSH
61446: CALL_OW 266
61450: STR
61451: PUSH
61452: LD_STRING , 
61454: STR
61455: PUSH
61456: LD_VAR 0 3
61460: PPUSH
61461: CALL_OW 250
61465: STR
61466: PUSH
61467: LD_STRING , 
61469: STR
61470: PUSH
61471: LD_VAR 0 3
61475: PPUSH
61476: CALL_OW 251
61480: STR
61481: PUSH
61482: LD_STRING , 
61484: STR
61485: PUSH
61486: LD_VAR 0 3
61490: PPUSH
61491: CALL_OW 254
61495: STR
61496: PUSH
61497: LD_STRING , 
61499: STR
61500: PUSH
61501: LD_VAR 0 3
61505: PPUSH
61506: LD_INT 1
61508: PPUSH
61509: CALL_OW 268
61513: STR
61514: PUSH
61515: LD_STRING , 
61517: STR
61518: PUSH
61519: LD_VAR 0 3
61523: PPUSH
61524: LD_INT 2
61526: PPUSH
61527: CALL_OW 268
61531: STR
61532: PUSH
61533: LD_STRING ],
61535: STR
61536: PPUSH
61537: CALL_OW 561
// end ;
61541: GO 61435
61543: POP
61544: POP
// AddToLog ( ]; ) ;
61545: LD_STRING ];
61547: PPUSH
61548: CALL_OW 561
// end ;
61552: LD_VAR 0 2
61556: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
61557: LD_INT 0
61559: PPUSH
61560: PPUSH
61561: PPUSH
61562: PPUSH
61563: PPUSH
// if not area or not rate or not max then
61564: LD_VAR 0 1
61568: NOT
61569: PUSH
61570: LD_VAR 0 2
61574: NOT
61575: OR
61576: PUSH
61577: LD_VAR 0 4
61581: NOT
61582: OR
61583: IFFALSE 61587
// exit ;
61585: GO 61779
// while 1 do
61587: LD_INT 1
61589: IFFALSE 61779
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
61591: LD_ADDR_VAR 0 9
61595: PUSH
61596: LD_VAR 0 1
61600: PPUSH
61601: LD_INT 1
61603: PPUSH
61604: CALL_OW 287
61608: PUSH
61609: LD_INT 10
61611: MUL
61612: ST_TO_ADDR
// r := rate / 10 ;
61613: LD_ADDR_VAR 0 7
61617: PUSH
61618: LD_VAR 0 2
61622: PUSH
61623: LD_INT 10
61625: DIVREAL
61626: ST_TO_ADDR
// time := 1 1$00 ;
61627: LD_ADDR_VAR 0 8
61631: PUSH
61632: LD_INT 2100
61634: ST_TO_ADDR
// if amount < min then
61635: LD_VAR 0 9
61639: PUSH
61640: LD_VAR 0 3
61644: LESS
61645: IFFALSE 61663
// r := r * 2 else
61647: LD_ADDR_VAR 0 7
61651: PUSH
61652: LD_VAR 0 7
61656: PUSH
61657: LD_INT 2
61659: MUL
61660: ST_TO_ADDR
61661: GO 61689
// if amount > max then
61663: LD_VAR 0 9
61667: PUSH
61668: LD_VAR 0 4
61672: GREATER
61673: IFFALSE 61689
// r := r / 2 ;
61675: LD_ADDR_VAR 0 7
61679: PUSH
61680: LD_VAR 0 7
61684: PUSH
61685: LD_INT 2
61687: DIVREAL
61688: ST_TO_ADDR
// time := time / r ;
61689: LD_ADDR_VAR 0 8
61693: PUSH
61694: LD_VAR 0 8
61698: PUSH
61699: LD_VAR 0 7
61703: DIVREAL
61704: ST_TO_ADDR
// if time < 0 then
61705: LD_VAR 0 8
61709: PUSH
61710: LD_INT 0
61712: LESS
61713: IFFALSE 61730
// time := time * - 1 ;
61715: LD_ADDR_VAR 0 8
61719: PUSH
61720: LD_VAR 0 8
61724: PUSH
61725: LD_INT 1
61727: NEG
61728: MUL
61729: ST_TO_ADDR
// wait ( time ) ;
61730: LD_VAR 0 8
61734: PPUSH
61735: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
61739: LD_INT 35
61741: PPUSH
61742: LD_INT 875
61744: PPUSH
61745: CALL_OW 12
61749: PPUSH
61750: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61754: LD_INT 1
61756: PPUSH
61757: LD_INT 5
61759: PPUSH
61760: CALL_OW 12
61764: PPUSH
61765: LD_VAR 0 1
61769: PPUSH
61770: LD_INT 1
61772: PPUSH
61773: CALL_OW 55
// end ;
61777: GO 61587
// end ;
61779: LD_VAR 0 5
61783: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61784: LD_INT 0
61786: PPUSH
61787: PPUSH
61788: PPUSH
61789: PPUSH
61790: PPUSH
61791: PPUSH
61792: PPUSH
61793: PPUSH
// if not turrets or not factories then
61794: LD_VAR 0 1
61798: NOT
61799: PUSH
61800: LD_VAR 0 2
61804: NOT
61805: OR
61806: IFFALSE 61810
// exit ;
61808: GO 62117
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61810: LD_ADDR_VAR 0 10
61814: PUSH
61815: LD_INT 5
61817: PUSH
61818: LD_INT 6
61820: PUSH
61821: EMPTY
61822: LIST
61823: LIST
61824: PUSH
61825: LD_INT 2
61827: PUSH
61828: LD_INT 4
61830: PUSH
61831: EMPTY
61832: LIST
61833: LIST
61834: PUSH
61835: LD_INT 3
61837: PUSH
61838: LD_INT 5
61840: PUSH
61841: EMPTY
61842: LIST
61843: LIST
61844: PUSH
61845: EMPTY
61846: LIST
61847: LIST
61848: LIST
61849: PUSH
61850: LD_INT 24
61852: PUSH
61853: LD_INT 25
61855: PUSH
61856: EMPTY
61857: LIST
61858: LIST
61859: PUSH
61860: LD_INT 23
61862: PUSH
61863: LD_INT 27
61865: PUSH
61866: EMPTY
61867: LIST
61868: LIST
61869: PUSH
61870: EMPTY
61871: LIST
61872: LIST
61873: PUSH
61874: LD_INT 42
61876: PUSH
61877: LD_INT 43
61879: PUSH
61880: EMPTY
61881: LIST
61882: LIST
61883: PUSH
61884: LD_INT 44
61886: PUSH
61887: LD_INT 46
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PUSH
61894: LD_INT 45
61896: PUSH
61897: LD_INT 47
61899: PUSH
61900: EMPTY
61901: LIST
61902: LIST
61903: PUSH
61904: EMPTY
61905: LIST
61906: LIST
61907: LIST
61908: PUSH
61909: EMPTY
61910: LIST
61911: LIST
61912: LIST
61913: ST_TO_ADDR
// result := [ ] ;
61914: LD_ADDR_VAR 0 3
61918: PUSH
61919: EMPTY
61920: ST_TO_ADDR
// for i in turrets do
61921: LD_ADDR_VAR 0 4
61925: PUSH
61926: LD_VAR 0 1
61930: PUSH
61931: FOR_IN
61932: IFFALSE 62115
// begin nat := GetNation ( i ) ;
61934: LD_ADDR_VAR 0 7
61938: PUSH
61939: LD_VAR 0 4
61943: PPUSH
61944: CALL_OW 248
61948: ST_TO_ADDR
// weapon := 0 ;
61949: LD_ADDR_VAR 0 8
61953: PUSH
61954: LD_INT 0
61956: ST_TO_ADDR
// if not nat then
61957: LD_VAR 0 7
61961: NOT
61962: IFFALSE 61966
// continue ;
61964: GO 61931
// for j in list [ nat ] do
61966: LD_ADDR_VAR 0 5
61970: PUSH
61971: LD_VAR 0 10
61975: PUSH
61976: LD_VAR 0 7
61980: ARRAY
61981: PUSH
61982: FOR_IN
61983: IFFALSE 62024
// if GetBWeapon ( i ) = j [ 1 ] then
61985: LD_VAR 0 4
61989: PPUSH
61990: CALL_OW 269
61994: PUSH
61995: LD_VAR 0 5
61999: PUSH
62000: LD_INT 1
62002: ARRAY
62003: EQUAL
62004: IFFALSE 62022
// begin weapon := j [ 2 ] ;
62006: LD_ADDR_VAR 0 8
62010: PUSH
62011: LD_VAR 0 5
62015: PUSH
62016: LD_INT 2
62018: ARRAY
62019: ST_TO_ADDR
// break ;
62020: GO 62024
// end ;
62022: GO 61982
62024: POP
62025: POP
// if not weapon then
62026: LD_VAR 0 8
62030: NOT
62031: IFFALSE 62035
// continue ;
62033: GO 61931
// for k in factories do
62035: LD_ADDR_VAR 0 6
62039: PUSH
62040: LD_VAR 0 2
62044: PUSH
62045: FOR_IN
62046: IFFALSE 62111
// begin weapons := AvailableWeaponList ( k ) ;
62048: LD_ADDR_VAR 0 9
62052: PUSH
62053: LD_VAR 0 6
62057: PPUSH
62058: CALL_OW 478
62062: ST_TO_ADDR
// if not weapons then
62063: LD_VAR 0 9
62067: NOT
62068: IFFALSE 62072
// continue ;
62070: GO 62045
// if weapon in weapons then
62072: LD_VAR 0 8
62076: PUSH
62077: LD_VAR 0 9
62081: IN
62082: IFFALSE 62109
// begin result := [ i , weapon ] ;
62084: LD_ADDR_VAR 0 3
62088: PUSH
62089: LD_VAR 0 4
62093: PUSH
62094: LD_VAR 0 8
62098: PUSH
62099: EMPTY
62100: LIST
62101: LIST
62102: ST_TO_ADDR
// exit ;
62103: POP
62104: POP
62105: POP
62106: POP
62107: GO 62117
// end ; end ;
62109: GO 62045
62111: POP
62112: POP
// end ;
62113: GO 61931
62115: POP
62116: POP
// end ;
62117: LD_VAR 0 3
62121: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
62122: LD_INT 0
62124: PPUSH
// if not side or side > 8 then
62125: LD_VAR 0 3
62129: NOT
62130: PUSH
62131: LD_VAR 0 3
62135: PUSH
62136: LD_INT 8
62138: GREATER
62139: OR
62140: IFFALSE 62144
// exit ;
62142: GO 62203
// if not range then
62144: LD_VAR 0 4
62148: NOT
62149: IFFALSE 62160
// range := - 12 ;
62151: LD_ADDR_VAR 0 4
62155: PUSH
62156: LD_INT 12
62158: NEG
62159: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
62160: LD_VAR 0 1
62164: PPUSH
62165: LD_VAR 0 2
62169: PPUSH
62170: LD_VAR 0 3
62174: PPUSH
62175: LD_VAR 0 4
62179: PPUSH
62180: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
62184: LD_VAR 0 1
62188: PPUSH
62189: LD_VAR 0 2
62193: PPUSH
62194: LD_VAR 0 3
62198: PPUSH
62199: CALL_OW 331
// end ;
62203: LD_VAR 0 5
62207: RET
// export function Video ( mode ) ; begin
62208: LD_INT 0
62210: PPUSH
// ingame_video = mode ;
62211: LD_ADDR_OWVAR 52
62215: PUSH
62216: LD_VAR 0 1
62220: ST_TO_ADDR
// interface_hidden = mode ;
62221: LD_ADDR_OWVAR 54
62225: PUSH
62226: LD_VAR 0 1
62230: ST_TO_ADDR
// end ;
62231: LD_VAR 0 2
62235: RET
// export function Join ( array , element ) ; begin
62236: LD_INT 0
62238: PPUSH
// result := array ^ element ;
62239: LD_ADDR_VAR 0 3
62243: PUSH
62244: LD_VAR 0 1
62248: PUSH
62249: LD_VAR 0 2
62253: ADD
62254: ST_TO_ADDR
// end ;
62255: LD_VAR 0 3
62259: RET
// export function JoinUnion ( array , element ) ; begin
62260: LD_INT 0
62262: PPUSH
// result := array union element ;
62263: LD_ADDR_VAR 0 3
62267: PUSH
62268: LD_VAR 0 1
62272: PUSH
62273: LD_VAR 0 2
62277: UNION
62278: ST_TO_ADDR
// end ;
62279: LD_VAR 0 3
62283: RET
// export function GetBehemoths ( side ) ; begin
62284: LD_INT 0
62286: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
62287: LD_ADDR_VAR 0 2
62291: PUSH
62292: LD_INT 22
62294: PUSH
62295: LD_VAR 0 1
62299: PUSH
62300: EMPTY
62301: LIST
62302: LIST
62303: PUSH
62304: LD_INT 31
62306: PUSH
62307: LD_INT 25
62309: PUSH
62310: EMPTY
62311: LIST
62312: LIST
62313: PUSH
62314: EMPTY
62315: LIST
62316: LIST
62317: PPUSH
62318: CALL_OW 69
62322: ST_TO_ADDR
// end ;
62323: LD_VAR 0 2
62327: RET
// export function Shuffle ( array ) ; var i , index ; begin
62328: LD_INT 0
62330: PPUSH
62331: PPUSH
62332: PPUSH
// result := [ ] ;
62333: LD_ADDR_VAR 0 2
62337: PUSH
62338: EMPTY
62339: ST_TO_ADDR
// if not array then
62340: LD_VAR 0 1
62344: NOT
62345: IFFALSE 62349
// exit ;
62347: GO 62448
// Randomize ;
62349: CALL_OW 10
// for i = array downto 1 do
62353: LD_ADDR_VAR 0 3
62357: PUSH
62358: DOUBLE
62359: LD_VAR 0 1
62363: INC
62364: ST_TO_ADDR
62365: LD_INT 1
62367: PUSH
62368: FOR_DOWNTO
62369: IFFALSE 62446
// begin index := rand ( 1 , array ) ;
62371: LD_ADDR_VAR 0 4
62375: PUSH
62376: LD_INT 1
62378: PPUSH
62379: LD_VAR 0 1
62383: PPUSH
62384: CALL_OW 12
62388: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
62389: LD_ADDR_VAR 0 2
62393: PUSH
62394: LD_VAR 0 2
62398: PPUSH
62399: LD_VAR 0 2
62403: PUSH
62404: LD_INT 1
62406: PLUS
62407: PPUSH
62408: LD_VAR 0 1
62412: PUSH
62413: LD_VAR 0 4
62417: ARRAY
62418: PPUSH
62419: CALL_OW 2
62423: ST_TO_ADDR
// array := Delete ( array , index ) ;
62424: LD_ADDR_VAR 0 1
62428: PUSH
62429: LD_VAR 0 1
62433: PPUSH
62434: LD_VAR 0 4
62438: PPUSH
62439: CALL_OW 3
62443: ST_TO_ADDR
// end ;
62444: GO 62368
62446: POP
62447: POP
// end ; end_of_file
62448: LD_VAR 0 2
62452: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb ; every 1 do
62453: GO 62455
62455: DISABLE
// begin ru_radar := 98 ;
62456: LD_ADDR_EXP 29
62460: PUSH
62461: LD_INT 98
62463: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
62464: LD_ADDR_EXP 30
62468: PUSH
62469: LD_INT 89
62471: ST_TO_ADDR
// us_hack := 99 ;
62472: LD_ADDR_EXP 31
62476: PUSH
62477: LD_INT 99
62479: ST_TO_ADDR
// us_artillery := 97 ;
62480: LD_ADDR_EXP 32
62484: PUSH
62485: LD_INT 97
62487: ST_TO_ADDR
// ar_bio_bomb := 91 ;
62488: LD_ADDR_EXP 33
62492: PUSH
62493: LD_INT 91
62495: ST_TO_ADDR
// end ; end_of_file
62496: END
// export skirmish , debug_mc ; export mc_bases , mc_building_need_repair , mc_building_repairs , mc_need_heal , mc_healers , mc_build_list , mc_builders , mc_construct_list , mc_turret_list , mc_empty_turret_list , mc_busy_turret_list , mc_defender_limit , mc_repair_vehicle , mc_mines , mc_miners , mc_minefields , mc_crates , mc_crates_collector , mc_crates_area , mc_vehicles , mc_attack , mc_produce , mc_defender , mc_scan , mc_parking , mc_scan_area , mc_sides , mc_tech , mc_can_tame , mc_ape , mc_ape_in_lab , mc_taming , mc_build_upgrade , mc_lab , mc_lab_upgrade , mc_teleport_exit , mc_teleport_exit_set , mc_deposits_xy , mc_deposits_finder , mc_allowed_tower_weapons , mc_remote_driver , mc_class , mc_class_case_use ; export function InitMacro ; var i ; begin
62497: LD_INT 0
62499: PPUSH
62500: PPUSH
// skirmish := false ;
62501: LD_ADDR_EXP 34
62505: PUSH
62506: LD_INT 0
62508: ST_TO_ADDR
// debug_mc := false ;
62509: LD_ADDR_EXP 35
62513: PUSH
62514: LD_INT 0
62516: ST_TO_ADDR
// mc_bases := [ ] ;
62517: LD_ADDR_EXP 36
62521: PUSH
62522: EMPTY
62523: ST_TO_ADDR
// mc_sides := [ ] ;
62524: LD_ADDR_EXP 62
62528: PUSH
62529: EMPTY
62530: ST_TO_ADDR
// mc_building_need_repair := [ ] ;
62531: LD_ADDR_EXP 37
62535: PUSH
62536: EMPTY
62537: ST_TO_ADDR
// mc_building_repairs := [ ] ;
62538: LD_ADDR_EXP 38
62542: PUSH
62543: EMPTY
62544: ST_TO_ADDR
// mc_need_heal := [ ] ;
62545: LD_ADDR_EXP 39
62549: PUSH
62550: EMPTY
62551: ST_TO_ADDR
// mc_healers := [ ] ;
62552: LD_ADDR_EXP 40
62556: PUSH
62557: EMPTY
62558: ST_TO_ADDR
// mc_build_list := [ ] ;
62559: LD_ADDR_EXP 41
62563: PUSH
62564: EMPTY
62565: ST_TO_ADDR
// mc_build_upgrade := [ ] ;
62566: LD_ADDR_EXP 68
62570: PUSH
62571: EMPTY
62572: ST_TO_ADDR
// mc_builders := [ ] ;
62573: LD_ADDR_EXP 42
62577: PUSH
62578: EMPTY
62579: ST_TO_ADDR
// mc_construct_list := [ ] ;
62580: LD_ADDR_EXP 43
62584: PUSH
62585: EMPTY
62586: ST_TO_ADDR
// mc_turret_list := [ ] ;
62587: LD_ADDR_EXP 44
62591: PUSH
62592: EMPTY
62593: ST_TO_ADDR
// mc_empty_turret_list := [ ] ;
62594: LD_ADDR_EXP 45
62598: PUSH
62599: EMPTY
62600: ST_TO_ADDR
// mc_miners := [ ] ;
62601: LD_ADDR_EXP 50
62605: PUSH
62606: EMPTY
62607: ST_TO_ADDR
// mc_mines := [ ] ;
62608: LD_ADDR_EXP 49
62612: PUSH
62613: EMPTY
62614: ST_TO_ADDR
// mc_minefields := [ ] ;
62615: LD_ADDR_EXP 51
62619: PUSH
62620: EMPTY
62621: ST_TO_ADDR
// mc_crates := [ ] ;
62622: LD_ADDR_EXP 52
62626: PUSH
62627: EMPTY
62628: ST_TO_ADDR
// mc_crates_collector := [ ] ;
62629: LD_ADDR_EXP 53
62633: PUSH
62634: EMPTY
62635: ST_TO_ADDR
// mc_crates_area := [ ] ;
62636: LD_ADDR_EXP 54
62640: PUSH
62641: EMPTY
62642: ST_TO_ADDR
// mc_vehicles := [ ] ;
62643: LD_ADDR_EXP 55
62647: PUSH
62648: EMPTY
62649: ST_TO_ADDR
// mc_attack := [ ] ;
62650: LD_ADDR_EXP 56
62654: PUSH
62655: EMPTY
62656: ST_TO_ADDR
// mc_produce := [ ] ;
62657: LD_ADDR_EXP 57
62661: PUSH
62662: EMPTY
62663: ST_TO_ADDR
// mc_defender := [ ] ;
62664: LD_ADDR_EXP 58
62668: PUSH
62669: EMPTY
62670: ST_TO_ADDR
// mc_parking := [ ] ;
62671: LD_ADDR_EXP 60
62675: PUSH
62676: EMPTY
62677: ST_TO_ADDR
// mc_busy_turret_list := [ ] ;
62678: LD_ADDR_EXP 46
62682: PUSH
62683: EMPTY
62684: ST_TO_ADDR
// mc_repair_vehicle := [ ] ;
62685: LD_ADDR_EXP 48
62689: PUSH
62690: EMPTY
62691: ST_TO_ADDR
// mc_scan := [ ] ;
62692: LD_ADDR_EXP 59
62696: PUSH
62697: EMPTY
62698: ST_TO_ADDR
// mc_scan_area := [ ] ;
62699: LD_ADDR_EXP 61
62703: PUSH
62704: EMPTY
62705: ST_TO_ADDR
// mc_tech := [ ] ;
62706: LD_ADDR_EXP 63
62710: PUSH
62711: EMPTY
62712: ST_TO_ADDR
// mc_class := [ ] ;
62713: LD_ADDR_EXP 77
62717: PUSH
62718: EMPTY
62719: ST_TO_ADDR
// mc_class_case_use := [ ] ;
62720: LD_ADDR_EXP 78
62724: PUSH
62725: EMPTY
62726: ST_TO_ADDR
// end ;
62727: LD_VAR 0 1
62731: RET
// export function MC_Kill ( base ) ; begin
62732: LD_INT 0
62734: PPUSH
// mc_bases := Replace ( mc_bases , base , [ ] ) ;
62735: LD_ADDR_EXP 36
62739: PUSH
62740: LD_EXP 36
62744: PPUSH
62745: LD_VAR 0 1
62749: PPUSH
62750: EMPTY
62751: PPUSH
62752: CALL_OW 1
62756: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
62757: LD_ADDR_EXP 37
62761: PUSH
62762: LD_EXP 37
62766: PPUSH
62767: LD_VAR 0 1
62771: PPUSH
62772: EMPTY
62773: PPUSH
62774: CALL_OW 1
62778: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
62779: LD_ADDR_EXP 38
62783: PUSH
62784: LD_EXP 38
62788: PPUSH
62789: LD_VAR 0 1
62793: PPUSH
62794: EMPTY
62795: PPUSH
62796: CALL_OW 1
62800: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
62801: LD_ADDR_EXP 39
62805: PUSH
62806: LD_EXP 39
62810: PPUSH
62811: LD_VAR 0 1
62815: PPUSH
62816: EMPTY
62817: PPUSH
62818: CALL_OW 1
62822: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
62823: LD_ADDR_EXP 40
62827: PUSH
62828: LD_EXP 40
62832: PPUSH
62833: LD_VAR 0 1
62837: PPUSH
62838: EMPTY
62839: PPUSH
62840: CALL_OW 1
62844: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
62845: LD_ADDR_EXP 41
62849: PUSH
62850: LD_EXP 41
62854: PPUSH
62855: LD_VAR 0 1
62859: PPUSH
62860: EMPTY
62861: PPUSH
62862: CALL_OW 1
62866: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
62867: LD_ADDR_EXP 42
62871: PUSH
62872: LD_EXP 42
62876: PPUSH
62877: LD_VAR 0 1
62881: PPUSH
62882: EMPTY
62883: PPUSH
62884: CALL_OW 1
62888: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
62889: LD_ADDR_EXP 43
62893: PUSH
62894: LD_EXP 43
62898: PPUSH
62899: LD_VAR 0 1
62903: PPUSH
62904: EMPTY
62905: PPUSH
62906: CALL_OW 1
62910: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
62911: LD_ADDR_EXP 44
62915: PUSH
62916: LD_EXP 44
62920: PPUSH
62921: LD_VAR 0 1
62925: PPUSH
62926: EMPTY
62927: PPUSH
62928: CALL_OW 1
62932: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
62933: LD_ADDR_EXP 45
62937: PUSH
62938: LD_EXP 45
62942: PPUSH
62943: LD_VAR 0 1
62947: PPUSH
62948: EMPTY
62949: PPUSH
62950: CALL_OW 1
62954: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
62955: LD_ADDR_EXP 46
62959: PUSH
62960: LD_EXP 46
62964: PPUSH
62965: LD_VAR 0 1
62969: PPUSH
62970: EMPTY
62971: PPUSH
62972: CALL_OW 1
62976: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
62977: LD_ADDR_EXP 47
62981: PUSH
62982: LD_EXP 47
62986: PPUSH
62987: LD_VAR 0 1
62991: PPUSH
62992: LD_INT 0
62994: PPUSH
62995: CALL_OW 1
62999: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
63000: LD_ADDR_EXP 48
63004: PUSH
63005: LD_EXP 48
63009: PPUSH
63010: LD_VAR 0 1
63014: PPUSH
63015: EMPTY
63016: PPUSH
63017: CALL_OW 1
63021: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
63022: LD_ADDR_EXP 49
63026: PUSH
63027: LD_EXP 49
63031: PPUSH
63032: LD_VAR 0 1
63036: PPUSH
63037: EMPTY
63038: PPUSH
63039: CALL_OW 1
63043: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
63044: LD_ADDR_EXP 50
63048: PUSH
63049: LD_EXP 50
63053: PPUSH
63054: LD_VAR 0 1
63058: PPUSH
63059: EMPTY
63060: PPUSH
63061: CALL_OW 1
63065: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
63066: LD_ADDR_EXP 51
63070: PUSH
63071: LD_EXP 51
63075: PPUSH
63076: LD_VAR 0 1
63080: PPUSH
63081: EMPTY
63082: PPUSH
63083: CALL_OW 1
63087: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
63088: LD_ADDR_EXP 52
63092: PUSH
63093: LD_EXP 52
63097: PPUSH
63098: LD_VAR 0 1
63102: PPUSH
63103: EMPTY
63104: PPUSH
63105: CALL_OW 1
63109: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
63110: LD_ADDR_EXP 53
63114: PUSH
63115: LD_EXP 53
63119: PPUSH
63120: LD_VAR 0 1
63124: PPUSH
63125: EMPTY
63126: PPUSH
63127: CALL_OW 1
63131: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
63132: LD_ADDR_EXP 54
63136: PUSH
63137: LD_EXP 54
63141: PPUSH
63142: LD_VAR 0 1
63146: PPUSH
63147: EMPTY
63148: PPUSH
63149: CALL_OW 1
63153: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
63154: LD_ADDR_EXP 55
63158: PUSH
63159: LD_EXP 55
63163: PPUSH
63164: LD_VAR 0 1
63168: PPUSH
63169: EMPTY
63170: PPUSH
63171: CALL_OW 1
63175: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
63176: LD_ADDR_EXP 56
63180: PUSH
63181: LD_EXP 56
63185: PPUSH
63186: LD_VAR 0 1
63190: PPUSH
63191: EMPTY
63192: PPUSH
63193: CALL_OW 1
63197: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
63198: LD_ADDR_EXP 57
63202: PUSH
63203: LD_EXP 57
63207: PPUSH
63208: LD_VAR 0 1
63212: PPUSH
63213: EMPTY
63214: PPUSH
63215: CALL_OW 1
63219: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
63220: LD_ADDR_EXP 58
63224: PUSH
63225: LD_EXP 58
63229: PPUSH
63230: LD_VAR 0 1
63234: PPUSH
63235: EMPTY
63236: PPUSH
63237: CALL_OW 1
63241: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
63242: LD_ADDR_EXP 59
63246: PUSH
63247: LD_EXP 59
63251: PPUSH
63252: LD_VAR 0 1
63256: PPUSH
63257: EMPTY
63258: PPUSH
63259: CALL_OW 1
63263: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
63264: LD_ADDR_EXP 60
63268: PUSH
63269: LD_EXP 60
63273: PPUSH
63274: LD_VAR 0 1
63278: PPUSH
63279: EMPTY
63280: PPUSH
63281: CALL_OW 1
63285: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
63286: LD_ADDR_EXP 61
63290: PUSH
63291: LD_EXP 61
63295: PPUSH
63296: LD_VAR 0 1
63300: PPUSH
63301: EMPTY
63302: PPUSH
63303: CALL_OW 1
63307: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
63308: LD_ADDR_EXP 63
63312: PUSH
63313: LD_EXP 63
63317: PPUSH
63318: LD_VAR 0 1
63322: PPUSH
63323: EMPTY
63324: PPUSH
63325: CALL_OW 1
63329: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
63330: LD_ADDR_EXP 65
63334: PUSH
63335: LD_EXP 65
63339: PPUSH
63340: LD_VAR 0 1
63344: PPUSH
63345: EMPTY
63346: PPUSH
63347: CALL_OW 1
63351: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
63352: LD_ADDR_EXP 66
63356: PUSH
63357: LD_EXP 66
63361: PPUSH
63362: LD_VAR 0 1
63366: PPUSH
63367: EMPTY
63368: PPUSH
63369: CALL_OW 1
63373: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
63374: LD_ADDR_EXP 67
63378: PUSH
63379: LD_EXP 67
63383: PPUSH
63384: LD_VAR 0 1
63388: PPUSH
63389: EMPTY
63390: PPUSH
63391: CALL_OW 1
63395: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
63396: LD_ADDR_EXP 68
63400: PUSH
63401: LD_EXP 68
63405: PPUSH
63406: LD_VAR 0 1
63410: PPUSH
63411: EMPTY
63412: PPUSH
63413: CALL_OW 1
63417: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
63418: LD_ADDR_EXP 69
63422: PUSH
63423: LD_EXP 69
63427: PPUSH
63428: LD_VAR 0 1
63432: PPUSH
63433: EMPTY
63434: PPUSH
63435: CALL_OW 1
63439: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
63440: LD_ADDR_EXP 70
63444: PUSH
63445: LD_EXP 70
63449: PPUSH
63450: LD_VAR 0 1
63454: PPUSH
63455: EMPTY
63456: PPUSH
63457: CALL_OW 1
63461: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
63462: LD_ADDR_EXP 71
63466: PUSH
63467: LD_EXP 71
63471: PPUSH
63472: LD_VAR 0 1
63476: PPUSH
63477: EMPTY
63478: PPUSH
63479: CALL_OW 1
63483: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
63484: LD_ADDR_EXP 72
63488: PUSH
63489: LD_EXP 72
63493: PPUSH
63494: LD_VAR 0 1
63498: PPUSH
63499: EMPTY
63500: PPUSH
63501: CALL_OW 1
63505: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
63506: LD_ADDR_EXP 73
63510: PUSH
63511: LD_EXP 73
63515: PPUSH
63516: LD_VAR 0 1
63520: PPUSH
63521: EMPTY
63522: PPUSH
63523: CALL_OW 1
63527: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
63528: LD_ADDR_EXP 74
63532: PUSH
63533: LD_EXP 74
63537: PPUSH
63538: LD_VAR 0 1
63542: PPUSH
63543: EMPTY
63544: PPUSH
63545: CALL_OW 1
63549: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
63550: LD_ADDR_EXP 75
63554: PUSH
63555: LD_EXP 75
63559: PPUSH
63560: LD_VAR 0 1
63564: PPUSH
63565: EMPTY
63566: PPUSH
63567: CALL_OW 1
63571: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
63572: LD_ADDR_EXP 76
63576: PUSH
63577: LD_EXP 76
63581: PPUSH
63582: LD_VAR 0 1
63586: PPUSH
63587: EMPTY
63588: PPUSH
63589: CALL_OW 1
63593: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
63594: LD_ADDR_EXP 77
63598: PUSH
63599: LD_EXP 77
63603: PPUSH
63604: LD_VAR 0 1
63608: PPUSH
63609: EMPTY
63610: PPUSH
63611: CALL_OW 1
63615: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
63616: LD_ADDR_EXP 78
63620: PUSH
63621: LD_EXP 78
63625: PPUSH
63626: LD_VAR 0 1
63630: PPUSH
63631: LD_INT 0
63633: PPUSH
63634: CALL_OW 1
63638: ST_TO_ADDR
// end ;
63639: LD_VAR 0 2
63643: RET
// export function MC_Add ( side , units ) ; var base ; begin
63644: LD_INT 0
63646: PPUSH
63647: PPUSH
// base := mc_bases + 1 ;
63648: LD_ADDR_VAR 0 4
63652: PUSH
63653: LD_EXP 36
63657: PUSH
63658: LD_INT 1
63660: PLUS
63661: ST_TO_ADDR
// mc_sides := Replace ( mc_sides , base , side ) ;
63662: LD_ADDR_EXP 62
63666: PUSH
63667: LD_EXP 62
63671: PPUSH
63672: LD_VAR 0 4
63676: PPUSH
63677: LD_VAR 0 1
63681: PPUSH
63682: CALL_OW 1
63686: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , base , units ) ;
63687: LD_ADDR_EXP 36
63691: PUSH
63692: LD_EXP 36
63696: PPUSH
63697: LD_VAR 0 4
63701: PPUSH
63702: LD_VAR 0 2
63706: PPUSH
63707: CALL_OW 1
63711: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , base , [ ] ) ;
63712: LD_ADDR_EXP 37
63716: PUSH
63717: LD_EXP 37
63721: PPUSH
63722: LD_VAR 0 4
63726: PPUSH
63727: EMPTY
63728: PPUSH
63729: CALL_OW 1
63733: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , base , [ ] ) ;
63734: LD_ADDR_EXP 38
63738: PUSH
63739: LD_EXP 38
63743: PPUSH
63744: LD_VAR 0 4
63748: PPUSH
63749: EMPTY
63750: PPUSH
63751: CALL_OW 1
63755: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , base , [ ] ) ;
63756: LD_ADDR_EXP 39
63760: PUSH
63761: LD_EXP 39
63765: PPUSH
63766: LD_VAR 0 4
63770: PPUSH
63771: EMPTY
63772: PPUSH
63773: CALL_OW 1
63777: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , base , [ ] ) ;
63778: LD_ADDR_EXP 40
63782: PUSH
63783: LD_EXP 40
63787: PPUSH
63788: LD_VAR 0 4
63792: PPUSH
63793: EMPTY
63794: PPUSH
63795: CALL_OW 1
63799: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , base , [ ] ) ;
63800: LD_ADDR_EXP 41
63804: PUSH
63805: LD_EXP 41
63809: PPUSH
63810: LD_VAR 0 4
63814: PPUSH
63815: EMPTY
63816: PPUSH
63817: CALL_OW 1
63821: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , base , [ ] ) ;
63822: LD_ADDR_EXP 42
63826: PUSH
63827: LD_EXP 42
63831: PPUSH
63832: LD_VAR 0 4
63836: PPUSH
63837: EMPTY
63838: PPUSH
63839: CALL_OW 1
63843: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , base , [ ] ) ;
63844: LD_ADDR_EXP 43
63848: PUSH
63849: LD_EXP 43
63853: PPUSH
63854: LD_VAR 0 4
63858: PPUSH
63859: EMPTY
63860: PPUSH
63861: CALL_OW 1
63865: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , base , [ ] ) ;
63866: LD_ADDR_EXP 44
63870: PUSH
63871: LD_EXP 44
63875: PPUSH
63876: LD_VAR 0 4
63880: PPUSH
63881: EMPTY
63882: PPUSH
63883: CALL_OW 1
63887: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , [ ] ) ;
63888: LD_ADDR_EXP 45
63892: PUSH
63893: LD_EXP 45
63897: PPUSH
63898: LD_VAR 0 4
63902: PPUSH
63903: EMPTY
63904: PPUSH
63905: CALL_OW 1
63909: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , base , [ ] ) ;
63910: LD_ADDR_EXP 46
63914: PUSH
63915: LD_EXP 46
63919: PPUSH
63920: LD_VAR 0 4
63924: PPUSH
63925: EMPTY
63926: PPUSH
63927: CALL_OW 1
63931: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , 0 ) ;
63932: LD_ADDR_EXP 47
63936: PUSH
63937: LD_EXP 47
63941: PPUSH
63942: LD_VAR 0 4
63946: PPUSH
63947: LD_INT 0
63949: PPUSH
63950: CALL_OW 1
63954: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , base , [ ] ) ;
63955: LD_ADDR_EXP 48
63959: PUSH
63960: LD_EXP 48
63964: PPUSH
63965: LD_VAR 0 4
63969: PPUSH
63970: EMPTY
63971: PPUSH
63972: CALL_OW 1
63976: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , base , [ ] ) ;
63977: LD_ADDR_EXP 49
63981: PUSH
63982: LD_EXP 49
63986: PPUSH
63987: LD_VAR 0 4
63991: PPUSH
63992: EMPTY
63993: PPUSH
63994: CALL_OW 1
63998: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , base , [ ] ) ;
63999: LD_ADDR_EXP 50
64003: PUSH
64004: LD_EXP 50
64008: PPUSH
64009: LD_VAR 0 4
64013: PPUSH
64014: EMPTY
64015: PPUSH
64016: CALL_OW 1
64020: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , [ ] ) ;
64021: LD_ADDR_EXP 51
64025: PUSH
64026: LD_EXP 51
64030: PPUSH
64031: LD_VAR 0 4
64035: PPUSH
64036: EMPTY
64037: PPUSH
64038: CALL_OW 1
64042: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , base , [ ] ) ;
64043: LD_ADDR_EXP 52
64047: PUSH
64048: LD_EXP 52
64052: PPUSH
64053: LD_VAR 0 4
64057: PPUSH
64058: EMPTY
64059: PPUSH
64060: CALL_OW 1
64064: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , base , [ ] ) ;
64065: LD_ADDR_EXP 53
64069: PUSH
64070: LD_EXP 53
64074: PPUSH
64075: LD_VAR 0 4
64079: PPUSH
64080: EMPTY
64081: PPUSH
64082: CALL_OW 1
64086: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , base , [ ] ) ;
64087: LD_ADDR_EXP 54
64091: PUSH
64092: LD_EXP 54
64096: PPUSH
64097: LD_VAR 0 4
64101: PPUSH
64102: EMPTY
64103: PPUSH
64104: CALL_OW 1
64108: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , base , [ ] ) ;
64109: LD_ADDR_EXP 55
64113: PUSH
64114: LD_EXP 55
64118: PPUSH
64119: LD_VAR 0 4
64123: PPUSH
64124: EMPTY
64125: PPUSH
64126: CALL_OW 1
64130: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , base , [ ] ) ;
64131: LD_ADDR_EXP 56
64135: PUSH
64136: LD_EXP 56
64140: PPUSH
64141: LD_VAR 0 4
64145: PPUSH
64146: EMPTY
64147: PPUSH
64148: CALL_OW 1
64152: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , base , [ ] ) ;
64153: LD_ADDR_EXP 57
64157: PUSH
64158: LD_EXP 57
64162: PPUSH
64163: LD_VAR 0 4
64167: PPUSH
64168: EMPTY
64169: PPUSH
64170: CALL_OW 1
64174: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , base , [ ] ) ;
64175: LD_ADDR_EXP 58
64179: PUSH
64180: LD_EXP 58
64184: PPUSH
64185: LD_VAR 0 4
64189: PPUSH
64190: EMPTY
64191: PPUSH
64192: CALL_OW 1
64196: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , base , [ ] ) ;
64197: LD_ADDR_EXP 59
64201: PUSH
64202: LD_EXP 59
64206: PPUSH
64207: LD_VAR 0 4
64211: PPUSH
64212: EMPTY
64213: PPUSH
64214: CALL_OW 1
64218: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , base , [ ] ) ;
64219: LD_ADDR_EXP 60
64223: PUSH
64224: LD_EXP 60
64228: PPUSH
64229: LD_VAR 0 4
64233: PPUSH
64234: EMPTY
64235: PPUSH
64236: CALL_OW 1
64240: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , base , [ ] ) ;
64241: LD_ADDR_EXP 61
64245: PUSH
64246: LD_EXP 61
64250: PPUSH
64251: LD_VAR 0 4
64255: PPUSH
64256: EMPTY
64257: PPUSH
64258: CALL_OW 1
64262: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , [ ] ) ;
64263: LD_ADDR_EXP 63
64267: PUSH
64268: LD_EXP 63
64272: PPUSH
64273: LD_VAR 0 4
64277: PPUSH
64278: EMPTY
64279: PPUSH
64280: CALL_OW 1
64284: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , base , [ ] ) ;
64285: LD_ADDR_EXP 65
64289: PUSH
64290: LD_EXP 65
64294: PPUSH
64295: LD_VAR 0 4
64299: PPUSH
64300: EMPTY
64301: PPUSH
64302: CALL_OW 1
64306: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , base , [ ] ) ;
64307: LD_ADDR_EXP 66
64311: PUSH
64312: LD_EXP 66
64316: PPUSH
64317: LD_VAR 0 4
64321: PPUSH
64322: EMPTY
64323: PPUSH
64324: CALL_OW 1
64328: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , base , [ ] ) ;
64329: LD_ADDR_EXP 67
64333: PUSH
64334: LD_EXP 67
64338: PPUSH
64339: LD_VAR 0 4
64343: PPUSH
64344: EMPTY
64345: PPUSH
64346: CALL_OW 1
64350: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , base , [ ] ) ;
64351: LD_ADDR_EXP 68
64355: PUSH
64356: LD_EXP 68
64360: PPUSH
64361: LD_VAR 0 4
64365: PPUSH
64366: EMPTY
64367: PPUSH
64368: CALL_OW 1
64372: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , base , [ ] ) ;
64373: LD_ADDR_EXP 69
64377: PUSH
64378: LD_EXP 69
64382: PPUSH
64383: LD_VAR 0 4
64387: PPUSH
64388: EMPTY
64389: PPUSH
64390: CALL_OW 1
64394: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , base , [ ] ) ;
64395: LD_ADDR_EXP 70
64399: PUSH
64400: LD_EXP 70
64404: PPUSH
64405: LD_VAR 0 4
64409: PPUSH
64410: EMPTY
64411: PPUSH
64412: CALL_OW 1
64416: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , base , [ ] ) ;
64417: LD_ADDR_EXP 71
64421: PUSH
64422: LD_EXP 71
64426: PPUSH
64427: LD_VAR 0 4
64431: PPUSH
64432: EMPTY
64433: PPUSH
64434: CALL_OW 1
64438: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , base , [ ] ) ;
64439: LD_ADDR_EXP 72
64443: PUSH
64444: LD_EXP 72
64448: PPUSH
64449: LD_VAR 0 4
64453: PPUSH
64454: EMPTY
64455: PPUSH
64456: CALL_OW 1
64460: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , base , [ ] ) ;
64461: LD_ADDR_EXP 73
64465: PUSH
64466: LD_EXP 73
64470: PPUSH
64471: LD_VAR 0 4
64475: PPUSH
64476: EMPTY
64477: PPUSH
64478: CALL_OW 1
64482: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , base , [ ] ) ;
64483: LD_ADDR_EXP 74
64487: PUSH
64488: LD_EXP 74
64492: PPUSH
64493: LD_VAR 0 4
64497: PPUSH
64498: EMPTY
64499: PPUSH
64500: CALL_OW 1
64504: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , [ ] ) ;
64505: LD_ADDR_EXP 75
64509: PUSH
64510: LD_EXP 75
64514: PPUSH
64515: LD_VAR 0 4
64519: PPUSH
64520: EMPTY
64521: PPUSH
64522: CALL_OW 1
64526: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , base , [ ] ) ;
64527: LD_ADDR_EXP 76
64531: PUSH
64532: LD_EXP 76
64536: PPUSH
64537: LD_VAR 0 4
64541: PPUSH
64542: EMPTY
64543: PPUSH
64544: CALL_OW 1
64548: ST_TO_ADDR
// mc_class := Replace ( mc_class , base , [ ] ) ;
64549: LD_ADDR_EXP 77
64553: PUSH
64554: LD_EXP 77
64558: PPUSH
64559: LD_VAR 0 4
64563: PPUSH
64564: EMPTY
64565: PPUSH
64566: CALL_OW 1
64570: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , base , 0 ) ;
64571: LD_ADDR_EXP 78
64575: PUSH
64576: LD_EXP 78
64580: PPUSH
64581: LD_VAR 0 4
64585: PPUSH
64586: LD_INT 0
64588: PPUSH
64589: CALL_OW 1
64593: ST_TO_ADDR
// result := base ;
64594: LD_ADDR_VAR 0 3
64598: PUSH
64599: LD_VAR 0 4
64603: ST_TO_ADDR
// end ;
64604: LD_VAR 0 3
64608: RET
// export function MC_Start ( ) ; var i ; begin
64609: LD_INT 0
64611: PPUSH
64612: PPUSH
// for i = 1 to mc_bases do
64613: LD_ADDR_VAR 0 2
64617: PUSH
64618: DOUBLE
64619: LD_INT 1
64621: DEC
64622: ST_TO_ADDR
64623: LD_EXP 36
64627: PUSH
64628: FOR_TO
64629: IFFALSE 65706
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff 0 ) ;
64631: LD_ADDR_EXP 36
64635: PUSH
64636: LD_EXP 36
64640: PPUSH
64641: LD_VAR 0 2
64645: PPUSH
64646: LD_EXP 36
64650: PUSH
64651: LD_VAR 0 2
64655: ARRAY
64656: PUSH
64657: LD_INT 0
64659: DIFF
64660: PPUSH
64661: CALL_OW 1
64665: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , [ ] ) ;
64666: LD_ADDR_EXP 37
64670: PUSH
64671: LD_EXP 37
64675: PPUSH
64676: LD_VAR 0 2
64680: PPUSH
64681: EMPTY
64682: PPUSH
64683: CALL_OW 1
64687: ST_TO_ADDR
// mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
64688: LD_ADDR_EXP 38
64692: PUSH
64693: LD_EXP 38
64697: PPUSH
64698: LD_VAR 0 2
64702: PPUSH
64703: EMPTY
64704: PPUSH
64705: CALL_OW 1
64709: ST_TO_ADDR
// mc_need_heal := Replace ( mc_need_heal , i , [ ] ) ;
64710: LD_ADDR_EXP 39
64714: PUSH
64715: LD_EXP 39
64719: PPUSH
64720: LD_VAR 0 2
64724: PPUSH
64725: EMPTY
64726: PPUSH
64727: CALL_OW 1
64731: ST_TO_ADDR
// mc_healers := Replace ( mc_healers , i , [ [ ] , [ ] ] ) ;
64732: LD_ADDR_EXP 40
64736: PUSH
64737: LD_EXP 40
64741: PPUSH
64742: LD_VAR 0 2
64746: PPUSH
64747: EMPTY
64748: PUSH
64749: EMPTY
64750: PUSH
64751: EMPTY
64752: LIST
64753: LIST
64754: PPUSH
64755: CALL_OW 1
64759: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , [ ] ) ;
64760: LD_ADDR_EXP 41
64764: PUSH
64765: LD_EXP 41
64769: PPUSH
64770: LD_VAR 0 2
64774: PPUSH
64775: EMPTY
64776: PPUSH
64777: CALL_OW 1
64781: ST_TO_ADDR
// mc_build_upgrade := Replace ( mc_build_upgrade , i , [ ] ) ;
64782: LD_ADDR_EXP 68
64786: PUSH
64787: LD_EXP 68
64791: PPUSH
64792: LD_VAR 0 2
64796: PPUSH
64797: EMPTY
64798: PPUSH
64799: CALL_OW 1
64803: ST_TO_ADDR
// mc_builders := Replace ( mc_builders , i , [ ] ) ;
64804: LD_ADDR_EXP 42
64808: PUSH
64809: LD_EXP 42
64813: PPUSH
64814: LD_VAR 0 2
64818: PPUSH
64819: EMPTY
64820: PPUSH
64821: CALL_OW 1
64825: ST_TO_ADDR
// mc_construct_list := Replace ( mc_construct_list , i , [ ] ) ;
64826: LD_ADDR_EXP 43
64830: PUSH
64831: LD_EXP 43
64835: PPUSH
64836: LD_VAR 0 2
64840: PPUSH
64841: EMPTY
64842: PPUSH
64843: CALL_OW 1
64847: ST_TO_ADDR
// mc_turret_list := Replace ( mc_turret_list , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ) ;
64848: LD_ADDR_EXP 44
64852: PUSH
64853: LD_EXP 44
64857: PPUSH
64858: LD_VAR 0 2
64862: PPUSH
64863: LD_EXP 36
64867: PUSH
64868: LD_VAR 0 2
64872: ARRAY
64873: PPUSH
64874: LD_INT 2
64876: PUSH
64877: LD_INT 30
64879: PUSH
64880: LD_INT 32
64882: PUSH
64883: EMPTY
64884: LIST
64885: LIST
64886: PUSH
64887: LD_INT 30
64889: PUSH
64890: LD_INT 33
64892: PUSH
64893: EMPTY
64894: LIST
64895: LIST
64896: PUSH
64897: EMPTY
64898: LIST
64899: LIST
64900: LIST
64901: PPUSH
64902: CALL_OW 72
64906: PPUSH
64907: CALL_OW 1
64911: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , UnitFilter ( mc_bases [ i ] , [ [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] , [ f_empty ] ] ) ) ;
64912: LD_ADDR_EXP 45
64916: PUSH
64917: LD_EXP 45
64921: PPUSH
64922: LD_VAR 0 2
64926: PPUSH
64927: LD_EXP 36
64931: PUSH
64932: LD_VAR 0 2
64936: ARRAY
64937: PPUSH
64938: LD_INT 2
64940: PUSH
64941: LD_INT 30
64943: PUSH
64944: LD_INT 32
64946: PUSH
64947: EMPTY
64948: LIST
64949: LIST
64950: PUSH
64951: LD_INT 30
64953: PUSH
64954: LD_INT 31
64956: PUSH
64957: EMPTY
64958: LIST
64959: LIST
64960: PUSH
64961: EMPTY
64962: LIST
64963: LIST
64964: LIST
64965: PUSH
64966: LD_INT 58
64968: PUSH
64969: EMPTY
64970: LIST
64971: PUSH
64972: EMPTY
64973: LIST
64974: LIST
64975: PPUSH
64976: CALL_OW 72
64980: PPUSH
64981: CALL_OW 1
64985: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , [ ] ) ;
64986: LD_ADDR_EXP 46
64990: PUSH
64991: LD_EXP 46
64995: PPUSH
64996: LD_VAR 0 2
65000: PPUSH
65001: EMPTY
65002: PPUSH
65003: CALL_OW 1
65007: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , [ ] ) ;
65008: LD_ADDR_EXP 50
65012: PUSH
65013: LD_EXP 50
65017: PPUSH
65018: LD_VAR 0 2
65022: PPUSH
65023: EMPTY
65024: PPUSH
65025: CALL_OW 1
65029: ST_TO_ADDR
// mc_mines := Replace ( mc_mines , i , [ ] ) ;
65030: LD_ADDR_EXP 49
65034: PUSH
65035: LD_EXP 49
65039: PPUSH
65040: LD_VAR 0 2
65044: PPUSH
65045: EMPTY
65046: PPUSH
65047: CALL_OW 1
65051: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , i , [ ] ) ;
65052: LD_ADDR_EXP 51
65056: PUSH
65057: LD_EXP 51
65061: PPUSH
65062: LD_VAR 0 2
65066: PPUSH
65067: EMPTY
65068: PPUSH
65069: CALL_OW 1
65073: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , [ ] ) ;
65074: LD_ADDR_EXP 52
65078: PUSH
65079: LD_EXP 52
65083: PPUSH
65084: LD_VAR 0 2
65088: PPUSH
65089: EMPTY
65090: PPUSH
65091: CALL_OW 1
65095: ST_TO_ADDR
// mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
65096: LD_ADDR_EXP 53
65100: PUSH
65101: LD_EXP 53
65105: PPUSH
65106: LD_VAR 0 2
65110: PPUSH
65111: EMPTY
65112: PPUSH
65113: CALL_OW 1
65117: ST_TO_ADDR
// mc_crates_area := Replace ( mc_crates_area , i , [ ] ) ;
65118: LD_ADDR_EXP 54
65122: PUSH
65123: LD_EXP 54
65127: PPUSH
65128: LD_VAR 0 2
65132: PPUSH
65133: EMPTY
65134: PPUSH
65135: CALL_OW 1
65139: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , [ ] ) ;
65140: LD_ADDR_EXP 55
65144: PUSH
65145: LD_EXP 55
65149: PPUSH
65150: LD_VAR 0 2
65154: PPUSH
65155: EMPTY
65156: PPUSH
65157: CALL_OW 1
65161: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
65162: LD_ADDR_EXP 56
65166: PUSH
65167: LD_EXP 56
65171: PPUSH
65172: LD_VAR 0 2
65176: PPUSH
65177: EMPTY
65178: PPUSH
65179: CALL_OW 1
65183: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , [ ] ) ;
65184: LD_ADDR_EXP 57
65188: PUSH
65189: LD_EXP 57
65193: PPUSH
65194: LD_VAR 0 2
65198: PPUSH
65199: EMPTY
65200: PPUSH
65201: CALL_OW 1
65205: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
65206: LD_ADDR_EXP 58
65210: PUSH
65211: LD_EXP 58
65215: PPUSH
65216: LD_VAR 0 2
65220: PPUSH
65221: EMPTY
65222: PPUSH
65223: CALL_OW 1
65227: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , i , 0 ) ;
65228: LD_ADDR_EXP 47
65232: PUSH
65233: LD_EXP 47
65237: PPUSH
65238: LD_VAR 0 2
65242: PPUSH
65243: LD_INT 0
65245: PPUSH
65246: CALL_OW 1
65250: ST_TO_ADDR
// mc_parking := Replace ( mc_parking , i , 0 ) ;
65251: LD_ADDR_EXP 60
65255: PUSH
65256: LD_EXP 60
65260: PPUSH
65261: LD_VAR 0 2
65265: PPUSH
65266: LD_INT 0
65268: PPUSH
65269: CALL_OW 1
65273: ST_TO_ADDR
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
65274: LD_ADDR_EXP 48
65278: PUSH
65279: LD_EXP 48
65283: PPUSH
65284: LD_VAR 0 2
65288: PPUSH
65289: EMPTY
65290: PPUSH
65291: CALL_OW 1
65295: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , 0 ) ;
65296: LD_ADDR_EXP 59
65300: PUSH
65301: LD_EXP 59
65305: PPUSH
65306: LD_VAR 0 2
65310: PPUSH
65311: LD_INT 0
65313: PPUSH
65314: CALL_OW 1
65318: ST_TO_ADDR
// mc_scan_area := Replace ( mc_scan_area , i , [ ] ) ;
65319: LD_ADDR_EXP 61
65323: PUSH
65324: LD_EXP 61
65328: PPUSH
65329: LD_VAR 0 2
65333: PPUSH
65334: EMPTY
65335: PPUSH
65336: CALL_OW 1
65340: ST_TO_ADDR
// mc_can_tame := Replace ( mc_can_tame , i , 0 ) ;
65341: LD_ADDR_EXP 64
65345: PUSH
65346: LD_EXP 64
65350: PPUSH
65351: LD_VAR 0 2
65355: PPUSH
65356: LD_INT 0
65358: PPUSH
65359: CALL_OW 1
65363: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , [ ] ) ;
65364: LD_ADDR_EXP 65
65368: PUSH
65369: LD_EXP 65
65373: PPUSH
65374: LD_VAR 0 2
65378: PPUSH
65379: EMPTY
65380: PPUSH
65381: CALL_OW 1
65385: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
65386: LD_ADDR_EXP 66
65390: PUSH
65391: LD_EXP 66
65395: PPUSH
65396: LD_VAR 0 2
65400: PPUSH
65401: EMPTY
65402: PPUSH
65403: CALL_OW 1
65407: ST_TO_ADDR
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
65408: LD_ADDR_EXP 67
65412: PUSH
65413: LD_EXP 67
65417: PPUSH
65418: LD_VAR 0 2
65422: PPUSH
65423: EMPTY
65424: PPUSH
65425: CALL_OW 1
65429: ST_TO_ADDR
// mc_lab := Replace ( mc_lab , i , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ) ;
65430: LD_ADDR_EXP 69
65434: PUSH
65435: LD_EXP 69
65439: PPUSH
65440: LD_VAR 0 2
65444: PPUSH
65445: LD_EXP 36
65449: PUSH
65450: LD_VAR 0 2
65454: ARRAY
65455: PPUSH
65456: LD_INT 2
65458: PUSH
65459: LD_INT 30
65461: PUSH
65462: LD_INT 6
65464: PUSH
65465: EMPTY
65466: LIST
65467: LIST
65468: PUSH
65469: LD_INT 30
65471: PUSH
65472: LD_INT 7
65474: PUSH
65475: EMPTY
65476: LIST
65477: LIST
65478: PUSH
65479: LD_INT 30
65481: PUSH
65482: LD_INT 8
65484: PUSH
65485: EMPTY
65486: LIST
65487: LIST
65488: PUSH
65489: EMPTY
65490: LIST
65491: LIST
65492: LIST
65493: LIST
65494: PPUSH
65495: CALL_OW 72
65499: PPUSH
65500: CALL_OW 1
65504: ST_TO_ADDR
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , [ ] ) ;
65505: LD_ADDR_EXP 70
65509: PUSH
65510: LD_EXP 70
65514: PPUSH
65515: LD_VAR 0 2
65519: PPUSH
65520: EMPTY
65521: PPUSH
65522: CALL_OW 1
65526: ST_TO_ADDR
// mc_teleport_exit := Replace ( mc_teleport_exit , i , [ ] ) ;
65527: LD_ADDR_EXP 71
65531: PUSH
65532: LD_EXP 71
65536: PPUSH
65537: LD_VAR 0 2
65541: PPUSH
65542: EMPTY
65543: PPUSH
65544: CALL_OW 1
65548: ST_TO_ADDR
// mc_teleport_exit_set := Replace ( mc_teleport_exit_set , i , [ ] ) ;
65549: LD_ADDR_EXP 72
65553: PUSH
65554: LD_EXP 72
65558: PPUSH
65559: LD_VAR 0 2
65563: PPUSH
65564: EMPTY
65565: PPUSH
65566: CALL_OW 1
65570: ST_TO_ADDR
// mc_deposits_xy := Replace ( mc_deposits_xy , i , [ ] ) ;
65571: LD_ADDR_EXP 73
65575: PUSH
65576: LD_EXP 73
65580: PPUSH
65581: LD_VAR 0 2
65585: PPUSH
65586: EMPTY
65587: PPUSH
65588: CALL_OW 1
65592: ST_TO_ADDR
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
65593: LD_ADDR_EXP 74
65597: PUSH
65598: LD_EXP 74
65602: PPUSH
65603: LD_VAR 0 2
65607: PPUSH
65608: EMPTY
65609: PPUSH
65610: CALL_OW 1
65614: ST_TO_ADDR
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , i , [ ] ) ;
65615: LD_ADDR_EXP 75
65619: PUSH
65620: LD_EXP 75
65624: PPUSH
65625: LD_VAR 0 2
65629: PPUSH
65630: EMPTY
65631: PPUSH
65632: CALL_OW 1
65636: ST_TO_ADDR
// mc_remote_driver := Replace ( mc_remote_driver , i , [ ] ) ;
65637: LD_ADDR_EXP 76
65641: PUSH
65642: LD_EXP 76
65646: PPUSH
65647: LD_VAR 0 2
65651: PPUSH
65652: EMPTY
65653: PPUSH
65654: CALL_OW 1
65658: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , [ ] ) ;
65659: LD_ADDR_EXP 77
65663: PUSH
65664: LD_EXP 77
65668: PPUSH
65669: LD_VAR 0 2
65673: PPUSH
65674: EMPTY
65675: PPUSH
65676: CALL_OW 1
65680: ST_TO_ADDR
// mc_class_case_use := Replace ( mc_class_case_use , i , 0 ) ;
65681: LD_ADDR_EXP 78
65685: PUSH
65686: LD_EXP 78
65690: PPUSH
65691: LD_VAR 0 2
65695: PPUSH
65696: LD_INT 0
65698: PPUSH
65699: CALL_OW 1
65703: ST_TO_ADDR
// end ;
65704: GO 64628
65706: POP
65707: POP
// MC_InitSides ( ) ;
65708: CALL 65994 0 0
// MC_InitResearch ( ) ;
65712: CALL 65733 0 0
// CustomInitMacro ( ) ;
65716: CALL 1408 0 0
// skirmish := true ;
65720: LD_ADDR_EXP 34
65724: PUSH
65725: LD_INT 1
65727: ST_TO_ADDR
// end ;
65728: LD_VAR 0 1
65732: RET
// export function MC_InitResearch ( ) ; var i , j , nation , tmp , un ; begin
65733: LD_INT 0
65735: PPUSH
65736: PPUSH
65737: PPUSH
65738: PPUSH
65739: PPUSH
65740: PPUSH
// if not mc_bases then
65741: LD_EXP 36
65745: NOT
65746: IFFALSE 65750
// exit ;
65748: GO 65989
// for i = 1 to 8 do
65750: LD_ADDR_VAR 0 2
65754: PUSH
65755: DOUBLE
65756: LD_INT 1
65758: DEC
65759: ST_TO_ADDR
65760: LD_INT 8
65762: PUSH
65763: FOR_TO
65764: IFFALSE 65790
// mc_tech := Replace ( mc_tech , i , [ ] ) ;
65766: LD_ADDR_EXP 63
65770: PUSH
65771: LD_EXP 63
65775: PPUSH
65776: LD_VAR 0 2
65780: PPUSH
65781: EMPTY
65782: PPUSH
65783: CALL_OW 1
65787: ST_TO_ADDR
65788: GO 65763
65790: POP
65791: POP
// tmp := [ ] ;
65792: LD_ADDR_VAR 0 5
65796: PUSH
65797: EMPTY
65798: ST_TO_ADDR
// for i = 1 to mc_sides do
65799: LD_ADDR_VAR 0 2
65803: PUSH
65804: DOUBLE
65805: LD_INT 1
65807: DEC
65808: ST_TO_ADDR
65809: LD_EXP 62
65813: PUSH
65814: FOR_TO
65815: IFFALSE 65873
// if not mc_sides [ i ] in tmp then
65817: LD_EXP 62
65821: PUSH
65822: LD_VAR 0 2
65826: ARRAY
65827: PUSH
65828: LD_VAR 0 5
65832: IN
65833: NOT
65834: IFFALSE 65871
// tmp := Insert ( tmp , tmp + 1 , mc_sides [ i ] ) ;
65836: LD_ADDR_VAR 0 5
65840: PUSH
65841: LD_VAR 0 5
65845: PPUSH
65846: LD_VAR 0 5
65850: PUSH
65851: LD_INT 1
65853: PLUS
65854: PPUSH
65855: LD_EXP 62
65859: PUSH
65860: LD_VAR 0 2
65864: ARRAY
65865: PPUSH
65866: CALL_OW 2
65870: ST_TO_ADDR
65871: GO 65814
65873: POP
65874: POP
// if not tmp then
65875: LD_VAR 0 5
65879: NOT
65880: IFFALSE 65884
// exit ;
65882: GO 65989
// for j in tmp do
65884: LD_ADDR_VAR 0 3
65888: PUSH
65889: LD_VAR 0 5
65893: PUSH
65894: FOR_IN
65895: IFFALSE 65987
// begin un := FilterAllUnits ( [ f_side , j ] ) ;
65897: LD_ADDR_VAR 0 6
65901: PUSH
65902: LD_INT 22
65904: PUSH
65905: LD_VAR 0 3
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: PPUSH
65914: CALL_OW 69
65918: ST_TO_ADDR
// if not un then
65919: LD_VAR 0 6
65923: NOT
65924: IFFALSE 65928
// continue ;
65926: GO 65894
// nation := GetNation ( un [ 1 ] ) ;
65928: LD_ADDR_VAR 0 4
65932: PUSH
65933: LD_VAR 0 6
65937: PUSH
65938: LD_INT 1
65940: ARRAY
65941: PPUSH
65942: CALL_OW 248
65946: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , j , GetTechNation ( j , nation , state_enabled ) ) ;
65947: LD_ADDR_EXP 63
65951: PUSH
65952: LD_EXP 63
65956: PPUSH
65957: LD_VAR 0 3
65961: PPUSH
65962: LD_VAR 0 3
65966: PPUSH
65967: LD_VAR 0 4
65971: PPUSH
65972: LD_INT 1
65974: PPUSH
65975: CALL 19945 0 3
65979: PPUSH
65980: CALL_OW 1
65984: ST_TO_ADDR
// end ;
65985: GO 65894
65987: POP
65988: POP
// end ;
65989: LD_VAR 0 1
65993: RET
// export function MC_InitSides ( ) ; var i ; begin
65994: LD_INT 0
65996: PPUSH
65997: PPUSH
// if not mc_bases then
65998: LD_EXP 36
66002: NOT
66003: IFFALSE 66007
// exit ;
66005: GO 66081
// for i = 1 to mc_bases do
66007: LD_ADDR_VAR 0 2
66011: PUSH
66012: DOUBLE
66013: LD_INT 1
66015: DEC
66016: ST_TO_ADDR
66017: LD_EXP 36
66021: PUSH
66022: FOR_TO
66023: IFFALSE 66079
// if mc_bases [ i ] then
66025: LD_EXP 36
66029: PUSH
66030: LD_VAR 0 2
66034: ARRAY
66035: IFFALSE 66077
// mc_sides := Replace ( mc_sides , i , GetSide ( mc_bases [ i ] [ 1 ] ) ) ;
66037: LD_ADDR_EXP 62
66041: PUSH
66042: LD_EXP 62
66046: PPUSH
66047: LD_VAR 0 2
66051: PPUSH
66052: LD_EXP 36
66056: PUSH
66057: LD_VAR 0 2
66061: ARRAY
66062: PUSH
66063: LD_INT 1
66065: ARRAY
66066: PPUSH
66067: CALL_OW 255
66071: PPUSH
66072: CALL_OW 1
66076: ST_TO_ADDR
66077: GO 66022
66079: POP
66080: POP
// end ;
66081: LD_VAR 0 1
66085: RET
// every 0 0$01 trigger skirmish do
66086: LD_EXP 34
66090: IFFALSE 66244
66092: GO 66094
66094: DISABLE
// begin enable ;
66095: ENABLE
// MC_CheckBuildings ( ) ;
66096: CALL 70733 0 0
// MC_CheckPeopleLife ( ) ;
66100: CALL 70858 0 0
// RaiseSailEvent ( 100 ) ;
66104: LD_INT 100
66106: PPUSH
66107: CALL_OW 427
// RaiseSailEvent ( 103 ) ;
66111: LD_INT 103
66113: PPUSH
66114: CALL_OW 427
// RaiseSailEvent ( 104 ) ;
66118: LD_INT 104
66120: PPUSH
66121: CALL_OW 427
// RaiseSailEvent ( 105 ) ;
66125: LD_INT 105
66127: PPUSH
66128: CALL_OW 427
// RaiseSailEvent ( 106 ) ;
66132: LD_INT 106
66134: PPUSH
66135: CALL_OW 427
// RaiseSailEvent ( 107 ) ;
66139: LD_INT 107
66141: PPUSH
66142: CALL_OW 427
// RaiseSailEvent ( 108 ) ;
66146: LD_INT 108
66148: PPUSH
66149: CALL_OW 427
// RaiseSailEvent ( 109 ) ;
66153: LD_INT 109
66155: PPUSH
66156: CALL_OW 427
// RaiseSailEvent ( 110 ) ;
66160: LD_INT 110
66162: PPUSH
66163: CALL_OW 427
// RaiseSailEvent ( 111 ) ;
66167: LD_INT 111
66169: PPUSH
66170: CALL_OW 427
// RaiseSailEvent ( 112 ) ;
66174: LD_INT 112
66176: PPUSH
66177: CALL_OW 427
// RaiseSailEvent ( 113 ) ;
66181: LD_INT 113
66183: PPUSH
66184: CALL_OW 427
// RaiseSailEvent ( 120 ) ;
66188: LD_INT 120
66190: PPUSH
66191: CALL_OW 427
// RaiseSailEvent ( 121 ) ;
66195: LD_INT 121
66197: PPUSH
66198: CALL_OW 427
// RaiseSailEvent ( 122 ) ;
66202: LD_INT 122
66204: PPUSH
66205: CALL_OW 427
// RaiseSailEvent ( 123 ) ;
66209: LD_INT 123
66211: PPUSH
66212: CALL_OW 427
// RaiseSailEvent ( 124 ) ;
66216: LD_INT 124
66218: PPUSH
66219: CALL_OW 427
// RaiseSailEvent ( 125 ) ;
66223: LD_INT 125
66225: PPUSH
66226: CALL_OW 427
// RaiseSailEvent ( 126 ) ;
66230: LD_INT 126
66232: PPUSH
66233: CALL_OW 427
// RaiseSailEvent ( 200 ) ;
66237: LD_INT 200
66239: PPUSH
66240: CALL_OW 427
// end ;
66244: END
// on SailEvent ( event ) do begin if event < 100 then
66245: LD_VAR 0 1
66249: PUSH
66250: LD_INT 100
66252: LESS
66253: IFFALSE 66264
// CustomEvent ( event ) ;
66255: LD_VAR 0 1
66259: PPUSH
66260: CALL 19144 0 1
// if event = 100 then
66264: LD_VAR 0 1
66268: PUSH
66269: LD_INT 100
66271: EQUAL
66272: IFFALSE 66278
// MC_ClassManager ( ) ;
66274: CALL 66670 0 0
// if event = 101 then
66278: LD_VAR 0 1
66282: PUSH
66283: LD_INT 101
66285: EQUAL
66286: IFFALSE 66292
// MC_RepairBuildings ( ) ;
66288: CALL 71454 0 0
// if event = 102 then
66292: LD_VAR 0 1
66296: PUSH
66297: LD_INT 102
66299: EQUAL
66300: IFFALSE 66306
// MC_Heal ( ) ;
66302: CALL 71860 0 0
// if event = 103 then
66306: LD_VAR 0 1
66310: PUSH
66311: LD_INT 103
66313: EQUAL
66314: IFFALSE 66320
// MC_Build ( ) ;
66316: CALL 72282 0 0
// if event = 104 then
66320: LD_VAR 0 1
66324: PUSH
66325: LD_INT 104
66327: EQUAL
66328: IFFALSE 66334
// MC_TurretWeapon ( ) ;
66330: CALL 73895 0 0
// if event = 105 then
66334: LD_VAR 0 1
66338: PUSH
66339: LD_INT 105
66341: EQUAL
66342: IFFALSE 66348
// MC_BuildUpgrade ( ) ;
66344: CALL 73446 0 0
// if event = 106 then
66348: LD_VAR 0 1
66352: PUSH
66353: LD_INT 106
66355: EQUAL
66356: IFFALSE 66362
// MC_PlantMines ( ) ;
66358: CALL 74325 0 0
// if event = 107 then
66362: LD_VAR 0 1
66366: PUSH
66367: LD_INT 107
66369: EQUAL
66370: IFFALSE 66376
// MC_CollectCrates ( ) ;
66372: CALL 75359 0 0
// if event = 108 then
66376: LD_VAR 0 1
66380: PUSH
66381: LD_INT 108
66383: EQUAL
66384: IFFALSE 66390
// MC_LinkRemoteControl ( ) ;
66386: CALL 77116 0 0
// if event = 109 then
66390: LD_VAR 0 1
66394: PUSH
66395: LD_INT 109
66397: EQUAL
66398: IFFALSE 66404
// MC_ProduceVehicle ( ) ;
66400: CALL 77297 0 0
// if event = 110 then
66404: LD_VAR 0 1
66408: PUSH
66409: LD_INT 110
66411: EQUAL
66412: IFFALSE 66418
// MC_SendAttack ( ) ;
66414: CALL 77778 0 0
// if event = 111 then
66418: LD_VAR 0 1
66422: PUSH
66423: LD_INT 111
66425: EQUAL
66426: IFFALSE 66432
// MC_Defend ( ) ;
66428: CALL 77886 0 0
// if event = 112 then
66432: LD_VAR 0 1
66436: PUSH
66437: LD_INT 112
66439: EQUAL
66440: IFFALSE 66446
// MC_Research ( ) ;
66442: CALL 78513 0 0
// if event = 113 then
66446: LD_VAR 0 1
66450: PUSH
66451: LD_INT 113
66453: EQUAL
66454: IFFALSE 66460
// MC_MinesTrigger ( ) ;
66456: CALL 79627 0 0
// if event = 120 then
66460: LD_VAR 0 1
66464: PUSH
66465: LD_INT 120
66467: EQUAL
66468: IFFALSE 66474
// MC_RepairVehicle ( ) ;
66470: CALL 79726 0 0
// if event = 121 then
66474: LD_VAR 0 1
66478: PUSH
66479: LD_INT 121
66481: EQUAL
66482: IFFALSE 66488
// MC_TameApe ( ) ;
66484: CALL 80469 0 0
// if event = 122 then
66488: LD_VAR 0 1
66492: PUSH
66493: LD_INT 122
66495: EQUAL
66496: IFFALSE 66502
// MC_ChangeApeClass ( ) ;
66498: CALL 81298 0 0
// if event = 123 then
66502: LD_VAR 0 1
66506: PUSH
66507: LD_INT 123
66509: EQUAL
66510: IFFALSE 66516
// MC_Bazooka ( ) ;
66512: CALL 81948 0 0
// if event = 124 then
66516: LD_VAR 0 1
66520: PUSH
66521: LD_INT 124
66523: EQUAL
66524: IFFALSE 66530
// MC_TeleportExit ( ) ;
66526: CALL 82146 0 0
// if event = 125 then
66530: LD_VAR 0 1
66534: PUSH
66535: LD_INT 125
66537: EQUAL
66538: IFFALSE 66544
// MC_Deposits ( ) ;
66540: CALL 82793 0 0
// if event = 126 then
66544: LD_VAR 0 1
66548: PUSH
66549: LD_INT 126
66551: EQUAL
66552: IFFALSE 66558
// MC_RemoteDriver ( ) ;
66554: CALL 83418 0 0
// if event = 200 then
66558: LD_VAR 0 1
66562: PUSH
66563: LD_INT 200
66565: EQUAL
66566: IFFALSE 66572
// MC_Idle ( ) ;
66568: CALL 85151 0 0
// end ;
66572: PPOPN 1
66574: END
// export function MC_Reset ( base , tag ) ; var i ; begin
66575: LD_INT 0
66577: PPUSH
66578: PPUSH
// if not mc_bases [ base ] or not tag then
66579: LD_EXP 36
66583: PUSH
66584: LD_VAR 0 1
66588: ARRAY
66589: NOT
66590: PUSH
66591: LD_VAR 0 2
66595: NOT
66596: OR
66597: IFFALSE 66601
// exit ;
66599: GO 66665
// for i in mc_bases [ base ] union mc_ape [ base ] do
66601: LD_ADDR_VAR 0 4
66605: PUSH
66606: LD_EXP 36
66610: PUSH
66611: LD_VAR 0 1
66615: ARRAY
66616: PUSH
66617: LD_EXP 65
66621: PUSH
66622: LD_VAR 0 1
66626: ARRAY
66627: UNION
66628: PUSH
66629: FOR_IN
66630: IFFALSE 66663
// if GetTag ( i ) = tag then
66632: LD_VAR 0 4
66636: PPUSH
66637: CALL_OW 110
66641: PUSH
66642: LD_VAR 0 2
66646: EQUAL
66647: IFFALSE 66661
// SetTag ( i , 0 ) ;
66649: LD_VAR 0 4
66653: PPUSH
66654: LD_INT 0
66656: PPUSH
66657: CALL_OW 109
66661: GO 66629
66663: POP
66664: POP
// end ;
66665: LD_VAR 0 3
66669: RET
// export function MC_ClassManager ( ) ; var i , j , tmp , p , b , e , k ; begin
66670: LD_INT 0
66672: PPUSH
66673: PPUSH
66674: PPUSH
66675: PPUSH
66676: PPUSH
66677: PPUSH
66678: PPUSH
66679: PPUSH
// if not mc_bases then
66680: LD_EXP 36
66684: NOT
66685: IFFALSE 66689
// exit ;
66687: GO 67147
// for i = 1 to mc_bases do
66689: LD_ADDR_VAR 0 2
66693: PUSH
66694: DOUBLE
66695: LD_INT 1
66697: DEC
66698: ST_TO_ADDR
66699: LD_EXP 36
66703: PUSH
66704: FOR_TO
66705: IFFALSE 67145
// begin tmp := MC_ClassCheckReq ( i ) ;
66707: LD_ADDR_VAR 0 4
66711: PUSH
66712: LD_VAR 0 2
66716: PPUSH
66717: CALL 67152 0 1
66721: ST_TO_ADDR
// mc_class := Replace ( mc_class , i , tmp ) ;
66722: LD_ADDR_EXP 77
66726: PUSH
66727: LD_EXP 77
66731: PPUSH
66732: LD_VAR 0 2
66736: PPUSH
66737: LD_VAR 0 4
66741: PPUSH
66742: CALL_OW 1
66746: ST_TO_ADDR
// if not tmp then
66747: LD_VAR 0 4
66751: NOT
66752: IFFALSE 66756
// continue ;
66754: GO 66704
// b := [ UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ] ;
66756: LD_ADDR_VAR 0 6
66760: PUSH
66761: LD_EXP 36
66765: PUSH
66766: LD_VAR 0 2
66770: ARRAY
66771: PPUSH
66772: LD_INT 2
66774: PUSH
66775: LD_INT 30
66777: PUSH
66778: LD_INT 4
66780: PUSH
66781: EMPTY
66782: LIST
66783: LIST
66784: PUSH
66785: LD_INT 30
66787: PUSH
66788: LD_INT 5
66790: PUSH
66791: EMPTY
66792: LIST
66793: LIST
66794: PUSH
66795: EMPTY
66796: LIST
66797: LIST
66798: LIST
66799: PPUSH
66800: CALL_OW 72
66804: PUSH
66805: LD_EXP 36
66809: PUSH
66810: LD_VAR 0 2
66814: ARRAY
66815: PPUSH
66816: LD_INT 2
66818: PUSH
66819: LD_INT 30
66821: PUSH
66822: LD_INT 0
66824: PUSH
66825: EMPTY
66826: LIST
66827: LIST
66828: PUSH
66829: LD_INT 30
66831: PUSH
66832: LD_INT 1
66834: PUSH
66835: EMPTY
66836: LIST
66837: LIST
66838: PUSH
66839: EMPTY
66840: LIST
66841: LIST
66842: LIST
66843: PPUSH
66844: CALL_OW 72
66848: PUSH
66849: LD_EXP 36
66853: PUSH
66854: LD_VAR 0 2
66858: ARRAY
66859: PPUSH
66860: LD_INT 30
66862: PUSH
66863: LD_INT 3
66865: PUSH
66866: EMPTY
66867: LIST
66868: LIST
66869: PPUSH
66870: CALL_OW 72
66874: PUSH
66875: LD_EXP 36
66879: PUSH
66880: LD_VAR 0 2
66884: ARRAY
66885: PPUSH
66886: LD_INT 2
66888: PUSH
66889: LD_INT 30
66891: PUSH
66892: LD_INT 6
66894: PUSH
66895: EMPTY
66896: LIST
66897: LIST
66898: PUSH
66899: LD_INT 30
66901: PUSH
66902: LD_INT 7
66904: PUSH
66905: EMPTY
66906: LIST
66907: LIST
66908: PUSH
66909: LD_INT 30
66911: PUSH
66912: LD_INT 8
66914: PUSH
66915: EMPTY
66916: LIST
66917: LIST
66918: PUSH
66919: EMPTY
66920: LIST
66921: LIST
66922: LIST
66923: LIST
66924: PPUSH
66925: CALL_OW 72
66929: PUSH
66930: EMPTY
66931: LIST
66932: LIST
66933: LIST
66934: LIST
66935: ST_TO_ADDR
// for j = 1 to 4 do
66936: LD_ADDR_VAR 0 3
66940: PUSH
66941: DOUBLE
66942: LD_INT 1
66944: DEC
66945: ST_TO_ADDR
66946: LD_INT 4
66948: PUSH
66949: FOR_TO
66950: IFFALSE 67141
// begin if not tmp [ j ] then
66952: LD_VAR 0 4
66956: PUSH
66957: LD_VAR 0 3
66961: ARRAY
66962: NOT
66963: IFFALSE 66967
// continue ;
66965: GO 66949
// for p in tmp [ j ] do
66967: LD_ADDR_VAR 0 5
66971: PUSH
66972: LD_VAR 0 4
66976: PUSH
66977: LD_VAR 0 3
66981: ARRAY
66982: PUSH
66983: FOR_IN
66984: IFFALSE 67137
// begin if not b [ j ] then
66986: LD_VAR 0 6
66990: PUSH
66991: LD_VAR 0 3
66995: ARRAY
66996: NOT
66997: IFFALSE 67001
// break ;
66999: GO 67137
// e := 0 ;
67001: LD_ADDR_VAR 0 7
67005: PUSH
67006: LD_INT 0
67008: ST_TO_ADDR
// for k in b [ j ] do
67009: LD_ADDR_VAR 0 8
67013: PUSH
67014: LD_VAR 0 6
67018: PUSH
67019: LD_VAR 0 3
67023: ARRAY
67024: PUSH
67025: FOR_IN
67026: IFFALSE 67053
// if IsNotFull ( k ) then
67028: LD_VAR 0 8
67032: PPUSH
67033: CALL 23971 0 1
67037: IFFALSE 67051
// begin e := k ;
67039: LD_ADDR_VAR 0 7
67043: PUSH
67044: LD_VAR 0 8
67048: ST_TO_ADDR
// break ;
67049: GO 67053
// end ;
67051: GO 67025
67053: POP
67054: POP
// if e and not UnitGoingToBuilding ( p , e ) then
67055: LD_VAR 0 7
67059: PUSH
67060: LD_VAR 0 5
67064: PPUSH
67065: LD_VAR 0 7
67069: PPUSH
67070: CALL 60998 0 2
67074: NOT
67075: AND
67076: IFFALSE 67135
// begin if IsInUnit ( p ) then
67078: LD_VAR 0 5
67082: PPUSH
67083: CALL_OW 310
67087: IFFALSE 67098
// ComExitBuilding ( p ) ;
67089: LD_VAR 0 5
67093: PPUSH
67094: CALL_OW 122
// ComEnterUnit ( p , e ) ;
67098: LD_VAR 0 5
67102: PPUSH
67103: LD_VAR 0 7
67107: PPUSH
67108: CALL_OW 120
// AddComChangeProfession ( p , j ) ;
67112: LD_VAR 0 5
67116: PPUSH
67117: LD_VAR 0 3
67121: PPUSH
67122: CALL_OW 183
// AddComExitBuilding ( p ) ;
67126: LD_VAR 0 5
67130: PPUSH
67131: CALL_OW 182
// end ; end ;
67135: GO 66983
67137: POP
67138: POP
// end ;
67139: GO 66949
67141: POP
67142: POP
// end ;
67143: GO 66704
67145: POP
67146: POP
// end ;
67147: LD_VAR 0 1
67151: RET
// export function MC_ClassCheckReq ( base ) ; var i , tmp , sol , eng , mech , sci , sort , j , p , b , bcount ; begin
67152: LD_INT 0
67154: PPUSH
67155: PPUSH
67156: PPUSH
67157: PPUSH
67158: PPUSH
67159: PPUSH
67160: PPUSH
67161: PPUSH
67162: PPUSH
67163: PPUSH
67164: PPUSH
67165: PPUSH
// if not base or not mc_bases [ base ] or not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
67166: LD_VAR 0 1
67170: NOT
67171: PUSH
67172: LD_EXP 36
67176: PUSH
67177: LD_VAR 0 1
67181: ARRAY
67182: NOT
67183: OR
67184: PUSH
67185: LD_EXP 36
67189: PUSH
67190: LD_VAR 0 1
67194: ARRAY
67195: PPUSH
67196: LD_INT 2
67198: PUSH
67199: LD_INT 30
67201: PUSH
67202: LD_INT 0
67204: PUSH
67205: EMPTY
67206: LIST
67207: LIST
67208: PUSH
67209: LD_INT 30
67211: PUSH
67212: LD_INT 1
67214: PUSH
67215: EMPTY
67216: LIST
67217: LIST
67218: PUSH
67219: EMPTY
67220: LIST
67221: LIST
67222: LIST
67223: PPUSH
67224: CALL_OW 72
67228: NOT
67229: OR
67230: IFFALSE 67234
// exit ;
67232: GO 70728
// tmp := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 2 ] , [ f_class , 3 ] , [ f_class , 4 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
67234: LD_ADDR_VAR 0 4
67238: PUSH
67239: LD_EXP 36
67243: PUSH
67244: LD_VAR 0 1
67248: ARRAY
67249: PPUSH
67250: LD_INT 2
67252: PUSH
67253: LD_INT 25
67255: PUSH
67256: LD_INT 1
67258: PUSH
67259: EMPTY
67260: LIST
67261: LIST
67262: PUSH
67263: LD_INT 25
67265: PUSH
67266: LD_INT 2
67268: PUSH
67269: EMPTY
67270: LIST
67271: LIST
67272: PUSH
67273: LD_INT 25
67275: PUSH
67276: LD_INT 3
67278: PUSH
67279: EMPTY
67280: LIST
67281: LIST
67282: PUSH
67283: LD_INT 25
67285: PUSH
67286: LD_INT 4
67288: PUSH
67289: EMPTY
67290: LIST
67291: LIST
67292: PUSH
67293: LD_INT 25
67295: PUSH
67296: LD_INT 5
67298: PUSH
67299: EMPTY
67300: LIST
67301: LIST
67302: PUSH
67303: LD_INT 25
67305: PUSH
67306: LD_INT 8
67308: PUSH
67309: EMPTY
67310: LIST
67311: LIST
67312: PUSH
67313: LD_INT 25
67315: PUSH
67316: LD_INT 9
67318: PUSH
67319: EMPTY
67320: LIST
67321: LIST
67322: PUSH
67323: EMPTY
67324: LIST
67325: LIST
67326: LIST
67327: LIST
67328: LIST
67329: LIST
67330: LIST
67331: LIST
67332: PPUSH
67333: CALL_OW 72
67337: ST_TO_ADDR
// for i in tmp do
67338: LD_ADDR_VAR 0 3
67342: PUSH
67343: LD_VAR 0 4
67347: PUSH
67348: FOR_IN
67349: IFFALSE 67380
// if GetTag ( i ) then
67351: LD_VAR 0 3
67355: PPUSH
67356: CALL_OW 110
67360: IFFALSE 67378
// tmp := tmp diff i ;
67362: LD_ADDR_VAR 0 4
67366: PUSH
67367: LD_VAR 0 4
67371: PUSH
67372: LD_VAR 0 3
67376: DIFF
67377: ST_TO_ADDR
67378: GO 67348
67380: POP
67381: POP
// if not tmp then
67382: LD_VAR 0 4
67386: NOT
67387: IFFALSE 67391
// exit ;
67389: GO 70728
// sol := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
67391: LD_ADDR_VAR 0 5
67395: PUSH
67396: LD_EXP 36
67400: PUSH
67401: LD_VAR 0 1
67405: ARRAY
67406: PPUSH
67407: LD_INT 2
67409: PUSH
67410: LD_INT 25
67412: PUSH
67413: LD_INT 1
67415: PUSH
67416: EMPTY
67417: LIST
67418: LIST
67419: PUSH
67420: LD_INT 25
67422: PUSH
67423: LD_INT 5
67425: PUSH
67426: EMPTY
67427: LIST
67428: LIST
67429: PUSH
67430: LD_INT 25
67432: PUSH
67433: LD_INT 8
67435: PUSH
67436: EMPTY
67437: LIST
67438: LIST
67439: PUSH
67440: LD_INT 25
67442: PUSH
67443: LD_INT 9
67445: PUSH
67446: EMPTY
67447: LIST
67448: LIST
67449: PUSH
67450: EMPTY
67451: LIST
67452: LIST
67453: LIST
67454: LIST
67455: LIST
67456: PPUSH
67457: CALL_OW 72
67461: ST_TO_ADDR
// eng := UnitFilter ( mc_bases [ base ] , [ f_class , 2 ] ) ;
67462: LD_ADDR_VAR 0 6
67466: PUSH
67467: LD_EXP 36
67471: PUSH
67472: LD_VAR 0 1
67476: ARRAY
67477: PPUSH
67478: LD_INT 25
67480: PUSH
67481: LD_INT 2
67483: PUSH
67484: EMPTY
67485: LIST
67486: LIST
67487: PPUSH
67488: CALL_OW 72
67492: ST_TO_ADDR
// mech := UnitFilter ( mc_bases [ base ] , [ f_class , 3 ] ) ;
67493: LD_ADDR_VAR 0 7
67497: PUSH
67498: LD_EXP 36
67502: PUSH
67503: LD_VAR 0 1
67507: ARRAY
67508: PPUSH
67509: LD_INT 25
67511: PUSH
67512: LD_INT 3
67514: PUSH
67515: EMPTY
67516: LIST
67517: LIST
67518: PPUSH
67519: CALL_OW 72
67523: ST_TO_ADDR
// sci := UnitFilter ( mc_bases [ base ] , [ [ f_class , 4 ] , [ f_lives , 251 ] ] ) ;
67524: LD_ADDR_VAR 0 8
67528: PUSH
67529: LD_EXP 36
67533: PUSH
67534: LD_VAR 0 1
67538: ARRAY
67539: PPUSH
67540: LD_INT 25
67542: PUSH
67543: LD_INT 4
67545: PUSH
67546: EMPTY
67547: LIST
67548: LIST
67549: PUSH
67550: LD_INT 24
67552: PUSH
67553: LD_INT 251
67555: PUSH
67556: EMPTY
67557: LIST
67558: LIST
67559: PUSH
67560: EMPTY
67561: LIST
67562: LIST
67563: PPUSH
67564: CALL_OW 72
67568: ST_TO_ADDR
// if mc_scan [ base ] then
67569: LD_EXP 59
67573: PUSH
67574: LD_VAR 0 1
67578: ARRAY
67579: IFFALSE 68040
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 4 ) ;
67581: LD_ADDR_EXP 78
67585: PUSH
67586: LD_EXP 78
67590: PPUSH
67591: LD_VAR 0 1
67595: PPUSH
67596: LD_INT 4
67598: PPUSH
67599: CALL_OW 1
67603: ST_TO_ADDR
// b := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
67604: LD_ADDR_VAR 0 12
67608: PUSH
67609: LD_EXP 36
67613: PUSH
67614: LD_VAR 0 1
67618: ARRAY
67619: PPUSH
67620: LD_INT 2
67622: PUSH
67623: LD_INT 30
67625: PUSH
67626: LD_INT 4
67628: PUSH
67629: EMPTY
67630: LIST
67631: LIST
67632: PUSH
67633: LD_INT 30
67635: PUSH
67636: LD_INT 5
67638: PUSH
67639: EMPTY
67640: LIST
67641: LIST
67642: PUSH
67643: EMPTY
67644: LIST
67645: LIST
67646: LIST
67647: PPUSH
67648: CALL_OW 72
67652: ST_TO_ADDR
// if not b then
67653: LD_VAR 0 12
67657: NOT
67658: IFFALSE 67662
// exit ;
67660: GO 70728
// p := [ ] ;
67662: LD_ADDR_VAR 0 11
67666: PUSH
67667: EMPTY
67668: ST_TO_ADDR
// if sci >= 2 then
67669: LD_VAR 0 8
67673: PUSH
67674: LD_INT 2
67676: GREATEREQUAL
67677: IFFALSE 67708
// sci := [ sci [ 1 ] , sci [ 2 ] ] else
67679: LD_ADDR_VAR 0 8
67683: PUSH
67684: LD_VAR 0 8
67688: PUSH
67689: LD_INT 1
67691: ARRAY
67692: PUSH
67693: LD_VAR 0 8
67697: PUSH
67698: LD_INT 2
67700: ARRAY
67701: PUSH
67702: EMPTY
67703: LIST
67704: LIST
67705: ST_TO_ADDR
67706: GO 67769
// if sci = 1 then
67708: LD_VAR 0 8
67712: PUSH
67713: LD_INT 1
67715: EQUAL
67716: IFFALSE 67737
// sci := [ sci [ 1 ] ] else
67718: LD_ADDR_VAR 0 8
67722: PUSH
67723: LD_VAR 0 8
67727: PUSH
67728: LD_INT 1
67730: ARRAY
67731: PUSH
67732: EMPTY
67733: LIST
67734: ST_TO_ADDR
67735: GO 67769
// if sci = 0 then
67737: LD_VAR 0 8
67741: PUSH
67742: LD_INT 0
67744: EQUAL
67745: IFFALSE 67769
// p := SortBySkill ( tmp , 4 ) [ 1 ] ;
67747: LD_ADDR_VAR 0 11
67751: PUSH
67752: LD_VAR 0 4
67756: PPUSH
67757: LD_INT 4
67759: PPUSH
67760: CALL 60861 0 2
67764: PUSH
67765: LD_INT 1
67767: ARRAY
67768: ST_TO_ADDR
// if eng > 4 then
67769: LD_VAR 0 6
67773: PUSH
67774: LD_INT 4
67776: GREATER
67777: IFFALSE 67823
// for i = eng downto 4 do
67779: LD_ADDR_VAR 0 3
67783: PUSH
67784: DOUBLE
67785: LD_VAR 0 6
67789: INC
67790: ST_TO_ADDR
67791: LD_INT 4
67793: PUSH
67794: FOR_DOWNTO
67795: IFFALSE 67821
// eng := eng diff eng [ i ] ;
67797: LD_ADDR_VAR 0 6
67801: PUSH
67802: LD_VAR 0 6
67806: PUSH
67807: LD_VAR 0 6
67811: PUSH
67812: LD_VAR 0 3
67816: ARRAY
67817: DIFF
67818: ST_TO_ADDR
67819: GO 67794
67821: POP
67822: POP
// tmp := tmp diff ( sol union eng union mech union sci ) ;
67823: LD_ADDR_VAR 0 4
67827: PUSH
67828: LD_VAR 0 4
67832: PUSH
67833: LD_VAR 0 5
67837: PUSH
67838: LD_VAR 0 6
67842: UNION
67843: PUSH
67844: LD_VAR 0 7
67848: UNION
67849: PUSH
67850: LD_VAR 0 8
67854: UNION
67855: DIFF
67856: ST_TO_ADDR
// bcount := UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) + UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) * 6 ;
67857: LD_ADDR_VAR 0 13
67861: PUSH
67862: LD_EXP 36
67866: PUSH
67867: LD_VAR 0 1
67871: ARRAY
67872: PPUSH
67873: LD_INT 2
67875: PUSH
67876: LD_INT 30
67878: PUSH
67879: LD_INT 32
67881: PUSH
67882: EMPTY
67883: LIST
67884: LIST
67885: PUSH
67886: LD_INT 30
67888: PUSH
67889: LD_INT 31
67891: PUSH
67892: EMPTY
67893: LIST
67894: LIST
67895: PUSH
67896: EMPTY
67897: LIST
67898: LIST
67899: LIST
67900: PPUSH
67901: CALL_OW 72
67905: PUSH
67906: LD_EXP 36
67910: PUSH
67911: LD_VAR 0 1
67915: ARRAY
67916: PPUSH
67917: LD_INT 2
67919: PUSH
67920: LD_INT 30
67922: PUSH
67923: LD_INT 4
67925: PUSH
67926: EMPTY
67927: LIST
67928: LIST
67929: PUSH
67930: LD_INT 30
67932: PUSH
67933: LD_INT 5
67935: PUSH
67936: EMPTY
67937: LIST
67938: LIST
67939: PUSH
67940: EMPTY
67941: LIST
67942: LIST
67943: LIST
67944: PPUSH
67945: CALL_OW 72
67949: PUSH
67950: LD_INT 6
67952: MUL
67953: PLUS
67954: ST_TO_ADDR
// if bcount < tmp then
67955: LD_VAR 0 13
67959: PUSH
67960: LD_VAR 0 4
67964: LESS
67965: IFFALSE 68011
// for i = tmp downto bcount do
67967: LD_ADDR_VAR 0 3
67971: PUSH
67972: DOUBLE
67973: LD_VAR 0 4
67977: INC
67978: ST_TO_ADDR
67979: LD_VAR 0 13
67983: PUSH
67984: FOR_DOWNTO
67985: IFFALSE 68009
// tmp := Delete ( tmp , tmp ) ;
67987: LD_ADDR_VAR 0 4
67991: PUSH
67992: LD_VAR 0 4
67996: PPUSH
67997: LD_VAR 0 4
68001: PPUSH
68002: CALL_OW 3
68006: ST_TO_ADDR
68007: GO 67984
68009: POP
68010: POP
// result := [ tmp , 0 , 0 , p ] ;
68011: LD_ADDR_VAR 0 2
68015: PUSH
68016: LD_VAR 0 4
68020: PUSH
68021: LD_INT 0
68023: PUSH
68024: LD_INT 0
68026: PUSH
68027: LD_VAR 0 11
68031: PUSH
68032: EMPTY
68033: LIST
68034: LIST
68035: LIST
68036: LIST
68037: ST_TO_ADDR
// exit ;
68038: GO 70728
// end ; if not UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
68040: LD_EXP 36
68044: PUSH
68045: LD_VAR 0 1
68049: ARRAY
68050: PPUSH
68051: LD_INT 2
68053: PUSH
68054: LD_INT 30
68056: PUSH
68057: LD_INT 6
68059: PUSH
68060: EMPTY
68061: LIST
68062: LIST
68063: PUSH
68064: LD_INT 30
68066: PUSH
68067: LD_INT 7
68069: PUSH
68070: EMPTY
68071: LIST
68072: LIST
68073: PUSH
68074: LD_INT 30
68076: PUSH
68077: LD_INT 8
68079: PUSH
68080: EMPTY
68081: LIST
68082: LIST
68083: PUSH
68084: EMPTY
68085: LIST
68086: LIST
68087: LIST
68088: LIST
68089: PPUSH
68090: CALL_OW 72
68094: NOT
68095: PUSH
68096: LD_EXP 36
68100: PUSH
68101: LD_VAR 0 1
68105: ARRAY
68106: PPUSH
68107: LD_INT 30
68109: PUSH
68110: LD_INT 3
68112: PUSH
68113: EMPTY
68114: LIST
68115: LIST
68116: PPUSH
68117: CALL_OW 72
68121: NOT
68122: AND
68123: IFFALSE 68195
// begin if eng = tmp then
68125: LD_VAR 0 6
68129: PUSH
68130: LD_VAR 0 4
68134: EQUAL
68135: IFFALSE 68139
// exit ;
68137: GO 70728
// mc_class_case_use := Replace ( mc_class_case_use , base , 1 ) ;
68139: LD_ADDR_EXP 78
68143: PUSH
68144: LD_EXP 78
68148: PPUSH
68149: LD_VAR 0 1
68153: PPUSH
68154: LD_INT 1
68156: PPUSH
68157: CALL_OW 1
68161: ST_TO_ADDR
// result := [ 0 , tmp diff eng , 0 , 0 ] ;
68162: LD_ADDR_VAR 0 2
68166: PUSH
68167: LD_INT 0
68169: PUSH
68170: LD_VAR 0 4
68174: PUSH
68175: LD_VAR 0 6
68179: DIFF
68180: PUSH
68181: LD_INT 0
68183: PUSH
68184: LD_INT 0
68186: PUSH
68187: EMPTY
68188: LIST
68189: LIST
68190: LIST
68191: LIST
68192: ST_TO_ADDR
// exit ;
68193: GO 70728
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and not UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
68195: LD_EXP 63
68199: PUSH
68200: LD_EXP 62
68204: PUSH
68205: LD_VAR 0 1
68209: ARRAY
68210: ARRAY
68211: PUSH
68212: LD_EXP 36
68216: PUSH
68217: LD_VAR 0 1
68221: ARRAY
68222: PPUSH
68223: LD_INT 2
68225: PUSH
68226: LD_INT 30
68228: PUSH
68229: LD_INT 6
68231: PUSH
68232: EMPTY
68233: LIST
68234: LIST
68235: PUSH
68236: LD_INT 30
68238: PUSH
68239: LD_INT 7
68241: PUSH
68242: EMPTY
68243: LIST
68244: LIST
68245: PUSH
68246: LD_INT 30
68248: PUSH
68249: LD_INT 8
68251: PUSH
68252: EMPTY
68253: LIST
68254: LIST
68255: PUSH
68256: EMPTY
68257: LIST
68258: LIST
68259: LIST
68260: LIST
68261: PPUSH
68262: CALL_OW 72
68266: AND
68267: PUSH
68268: LD_EXP 36
68272: PUSH
68273: LD_VAR 0 1
68277: ARRAY
68278: PPUSH
68279: LD_INT 30
68281: PUSH
68282: LD_INT 3
68284: PUSH
68285: EMPTY
68286: LIST
68287: LIST
68288: PPUSH
68289: CALL_OW 72
68293: NOT
68294: AND
68295: IFFALSE 68509
// begin if sci >= 6 then
68297: LD_VAR 0 8
68301: PUSH
68302: LD_INT 6
68304: GREATEREQUAL
68305: IFFALSE 68309
// exit ;
68307: GO 70728
// mc_class_case_use := Replace ( mc_class_case_use , base , 2 ) ;
68309: LD_ADDR_EXP 78
68313: PUSH
68314: LD_EXP 78
68318: PPUSH
68319: LD_VAR 0 1
68323: PPUSH
68324: LD_INT 2
68326: PPUSH
68327: CALL_OW 1
68331: ST_TO_ADDR
// sort := SortBySkill ( tmp diff sci , 4 ) ;
68332: LD_ADDR_VAR 0 9
68336: PUSH
68337: LD_VAR 0 4
68341: PUSH
68342: LD_VAR 0 8
68346: DIFF
68347: PPUSH
68348: LD_INT 4
68350: PPUSH
68351: CALL 60861 0 2
68355: ST_TO_ADDR
// p := [ ] ;
68356: LD_ADDR_VAR 0 11
68360: PUSH
68361: EMPTY
68362: ST_TO_ADDR
// if sci < 6 and sort > 6 then
68363: LD_VAR 0 8
68367: PUSH
68368: LD_INT 6
68370: LESS
68371: PUSH
68372: LD_VAR 0 9
68376: PUSH
68377: LD_INT 6
68379: GREATER
68380: AND
68381: IFFALSE 68462
// begin for i = 1 to 6 - sci do
68383: LD_ADDR_VAR 0 3
68387: PUSH
68388: DOUBLE
68389: LD_INT 1
68391: DEC
68392: ST_TO_ADDR
68393: LD_INT 6
68395: PUSH
68396: LD_VAR 0 8
68400: MINUS
68401: PUSH
68402: FOR_TO
68403: IFFALSE 68458
// begin p := Insert ( p , p + 1 , sort [ 1 ] ) ;
68405: LD_ADDR_VAR 0 11
68409: PUSH
68410: LD_VAR 0 11
68414: PPUSH
68415: LD_VAR 0 11
68419: PUSH
68420: LD_INT 1
68422: PLUS
68423: PPUSH
68424: LD_VAR 0 9
68428: PUSH
68429: LD_INT 1
68431: ARRAY
68432: PPUSH
68433: CALL_OW 2
68437: ST_TO_ADDR
// sort := Delete ( sort , 1 ) ;
68438: LD_ADDR_VAR 0 9
68442: PUSH
68443: LD_VAR 0 9
68447: PPUSH
68448: LD_INT 1
68450: PPUSH
68451: CALL_OW 3
68455: ST_TO_ADDR
// end ;
68456: GO 68402
68458: POP
68459: POP
// end else
68460: GO 68482
// if sort then
68462: LD_VAR 0 9
68466: IFFALSE 68482
// p := sort [ 1 ] ;
68468: LD_ADDR_VAR 0 11
68472: PUSH
68473: LD_VAR 0 9
68477: PUSH
68478: LD_INT 1
68480: ARRAY
68481: ST_TO_ADDR
// result := [ 0 , 0 , 0 , p ] ;
68482: LD_ADDR_VAR 0 2
68486: PUSH
68487: LD_INT 0
68489: PUSH
68490: LD_INT 0
68492: PUSH
68493: LD_INT 0
68495: PUSH
68496: LD_VAR 0 11
68500: PUSH
68501: EMPTY
68502: LIST
68503: LIST
68504: LIST
68505: LIST
68506: ST_TO_ADDR
// exit ;
68507: GO 70728
// end ; if mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) then
68509: LD_EXP 63
68513: PUSH
68514: LD_EXP 62
68518: PUSH
68519: LD_VAR 0 1
68523: ARRAY
68524: ARRAY
68525: PUSH
68526: LD_EXP 36
68530: PUSH
68531: LD_VAR 0 1
68535: ARRAY
68536: PPUSH
68537: LD_INT 2
68539: PUSH
68540: LD_INT 30
68542: PUSH
68543: LD_INT 6
68545: PUSH
68546: EMPTY
68547: LIST
68548: LIST
68549: PUSH
68550: LD_INT 30
68552: PUSH
68553: LD_INT 7
68555: PUSH
68556: EMPTY
68557: LIST
68558: LIST
68559: PUSH
68560: LD_INT 30
68562: PUSH
68563: LD_INT 8
68565: PUSH
68566: EMPTY
68567: LIST
68568: LIST
68569: PUSH
68570: EMPTY
68571: LIST
68572: LIST
68573: LIST
68574: LIST
68575: PPUSH
68576: CALL_OW 72
68580: AND
68581: PUSH
68582: LD_EXP 36
68586: PUSH
68587: LD_VAR 0 1
68591: ARRAY
68592: PPUSH
68593: LD_INT 30
68595: PUSH
68596: LD_INT 3
68598: PUSH
68599: EMPTY
68600: LIST
68601: LIST
68602: PPUSH
68603: CALL_OW 72
68607: AND
68608: IFFALSE 69342
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 3 ) ;
68610: LD_ADDR_EXP 78
68614: PUSH
68615: LD_EXP 78
68619: PPUSH
68620: LD_VAR 0 1
68624: PPUSH
68625: LD_INT 3
68627: PPUSH
68628: CALL_OW 1
68632: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
68633: LD_ADDR_VAR 0 2
68637: PUSH
68638: LD_INT 0
68640: PUSH
68641: LD_INT 0
68643: PUSH
68644: LD_INT 0
68646: PUSH
68647: LD_INT 0
68649: PUSH
68650: EMPTY
68651: LIST
68652: LIST
68653: LIST
68654: LIST
68655: ST_TO_ADDR
// if not eng then
68656: LD_VAR 0 6
68660: NOT
68661: IFFALSE 68724
// begin p := SortBySkill ( tmp , 2 ) [ 1 ] ;
68663: LD_ADDR_VAR 0 11
68667: PUSH
68668: LD_VAR 0 4
68672: PPUSH
68673: LD_INT 2
68675: PPUSH
68676: CALL 60861 0 2
68680: PUSH
68681: LD_INT 1
68683: ARRAY
68684: ST_TO_ADDR
// result := Replace ( result , 2 , p ) ;
68685: LD_ADDR_VAR 0 2
68689: PUSH
68690: LD_VAR 0 2
68694: PPUSH
68695: LD_INT 2
68697: PPUSH
68698: LD_VAR 0 11
68702: PPUSH
68703: CALL_OW 1
68707: ST_TO_ADDR
// tmp := tmp diff p ;
68708: LD_ADDR_VAR 0 4
68712: PUSH
68713: LD_VAR 0 4
68717: PUSH
68718: LD_VAR 0 11
68722: DIFF
68723: ST_TO_ADDR
// end ; if tmp and sci < 6 then
68724: LD_VAR 0 4
68728: PUSH
68729: LD_VAR 0 8
68733: PUSH
68734: LD_INT 6
68736: LESS
68737: AND
68738: IFFALSE 68926
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 4 ) ;
68740: LD_ADDR_VAR 0 9
68744: PUSH
68745: LD_VAR 0 4
68749: PUSH
68750: LD_VAR 0 8
68754: PUSH
68755: LD_VAR 0 7
68759: UNION
68760: DIFF
68761: PPUSH
68762: LD_INT 4
68764: PPUSH
68765: CALL 60861 0 2
68769: ST_TO_ADDR
// p := [ ] ;
68770: LD_ADDR_VAR 0 11
68774: PUSH
68775: EMPTY
68776: ST_TO_ADDR
// if sort then
68777: LD_VAR 0 9
68781: IFFALSE 68897
// for i = 1 to 6 - sci do
68783: LD_ADDR_VAR 0 3
68787: PUSH
68788: DOUBLE
68789: LD_INT 1
68791: DEC
68792: ST_TO_ADDR
68793: LD_INT 6
68795: PUSH
68796: LD_VAR 0 8
68800: MINUS
68801: PUSH
68802: FOR_TO
68803: IFFALSE 68895
// begin if i = sort then
68805: LD_VAR 0 3
68809: PUSH
68810: LD_VAR 0 9
68814: EQUAL
68815: IFFALSE 68819
// break ;
68817: GO 68895
// if GetClass ( i ) = 4 then
68819: LD_VAR 0 3
68823: PPUSH
68824: CALL_OW 257
68828: PUSH
68829: LD_INT 4
68831: EQUAL
68832: IFFALSE 68836
// continue ;
68834: GO 68802
// p := Insert ( p , p + 1 , sort [ i ] ) ;
68836: LD_ADDR_VAR 0 11
68840: PUSH
68841: LD_VAR 0 11
68845: PPUSH
68846: LD_VAR 0 11
68850: PUSH
68851: LD_INT 1
68853: PLUS
68854: PPUSH
68855: LD_VAR 0 9
68859: PUSH
68860: LD_VAR 0 3
68864: ARRAY
68865: PPUSH
68866: CALL_OW 2
68870: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
68871: LD_ADDR_VAR 0 4
68875: PUSH
68876: LD_VAR 0 4
68880: PUSH
68881: LD_VAR 0 9
68885: PUSH
68886: LD_VAR 0 3
68890: ARRAY
68891: DIFF
68892: ST_TO_ADDR
// end ;
68893: GO 68802
68895: POP
68896: POP
// if p then
68897: LD_VAR 0 11
68901: IFFALSE 68926
// result := Replace ( result , 4 , p ) ;
68903: LD_ADDR_VAR 0 2
68907: PUSH
68908: LD_VAR 0 2
68912: PPUSH
68913: LD_INT 4
68915: PPUSH
68916: LD_VAR 0 11
68920: PPUSH
68921: CALL_OW 1
68925: ST_TO_ADDR
// end ; if tmp and mech < 6 then
68926: LD_VAR 0 4
68930: PUSH
68931: LD_VAR 0 7
68935: PUSH
68936: LD_INT 6
68938: LESS
68939: AND
68940: IFFALSE 69128
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
68942: LD_ADDR_VAR 0 9
68946: PUSH
68947: LD_VAR 0 4
68951: PUSH
68952: LD_VAR 0 8
68956: PUSH
68957: LD_VAR 0 7
68961: UNION
68962: DIFF
68963: PPUSH
68964: LD_INT 3
68966: PPUSH
68967: CALL 60861 0 2
68971: ST_TO_ADDR
// p := [ ] ;
68972: LD_ADDR_VAR 0 11
68976: PUSH
68977: EMPTY
68978: ST_TO_ADDR
// if sort then
68979: LD_VAR 0 9
68983: IFFALSE 69099
// for i = 1 to 6 - mech do
68985: LD_ADDR_VAR 0 3
68989: PUSH
68990: DOUBLE
68991: LD_INT 1
68993: DEC
68994: ST_TO_ADDR
68995: LD_INT 6
68997: PUSH
68998: LD_VAR 0 7
69002: MINUS
69003: PUSH
69004: FOR_TO
69005: IFFALSE 69097
// begin if i = sort then
69007: LD_VAR 0 3
69011: PUSH
69012: LD_VAR 0 9
69016: EQUAL
69017: IFFALSE 69021
// break ;
69019: GO 69097
// if GetClass ( i ) = 3 then
69021: LD_VAR 0 3
69025: PPUSH
69026: CALL_OW 257
69030: PUSH
69031: LD_INT 3
69033: EQUAL
69034: IFFALSE 69038
// continue ;
69036: GO 69004
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69038: LD_ADDR_VAR 0 11
69042: PUSH
69043: LD_VAR 0 11
69047: PPUSH
69048: LD_VAR 0 11
69052: PUSH
69053: LD_INT 1
69055: PLUS
69056: PPUSH
69057: LD_VAR 0 9
69061: PUSH
69062: LD_VAR 0 3
69066: ARRAY
69067: PPUSH
69068: CALL_OW 2
69072: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
69073: LD_ADDR_VAR 0 4
69077: PUSH
69078: LD_VAR 0 4
69082: PUSH
69083: LD_VAR 0 9
69087: PUSH
69088: LD_VAR 0 3
69092: ARRAY
69093: DIFF
69094: ST_TO_ADDR
// end ;
69095: GO 69004
69097: POP
69098: POP
// if p then
69099: LD_VAR 0 11
69103: IFFALSE 69128
// result := Replace ( result , 3 , p ) ;
69105: LD_ADDR_VAR 0 2
69109: PUSH
69110: LD_VAR 0 2
69114: PPUSH
69115: LD_INT 3
69117: PPUSH
69118: LD_VAR 0 11
69122: PPUSH
69123: CALL_OW 1
69127: ST_TO_ADDR
// end ; if tmp > 6 and eng < 6 then
69128: LD_VAR 0 4
69132: PUSH
69133: LD_INT 6
69135: GREATER
69136: PUSH
69137: LD_VAR 0 6
69141: PUSH
69142: LD_INT 6
69144: LESS
69145: AND
69146: IFFALSE 69340
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
69148: LD_ADDR_VAR 0 9
69152: PUSH
69153: LD_VAR 0 4
69157: PUSH
69158: LD_VAR 0 8
69162: PUSH
69163: LD_VAR 0 7
69167: UNION
69168: PUSH
69169: LD_VAR 0 6
69173: UNION
69174: DIFF
69175: PPUSH
69176: LD_INT 2
69178: PPUSH
69179: CALL 60861 0 2
69183: ST_TO_ADDR
// p := [ ] ;
69184: LD_ADDR_VAR 0 11
69188: PUSH
69189: EMPTY
69190: ST_TO_ADDR
// if sort then
69191: LD_VAR 0 9
69195: IFFALSE 69311
// for i = 1 to 6 - eng do
69197: LD_ADDR_VAR 0 3
69201: PUSH
69202: DOUBLE
69203: LD_INT 1
69205: DEC
69206: ST_TO_ADDR
69207: LD_INT 6
69209: PUSH
69210: LD_VAR 0 6
69214: MINUS
69215: PUSH
69216: FOR_TO
69217: IFFALSE 69309
// begin if i = sort then
69219: LD_VAR 0 3
69223: PUSH
69224: LD_VAR 0 9
69228: EQUAL
69229: IFFALSE 69233
// break ;
69231: GO 69309
// if GetClass ( i ) = 2 then
69233: LD_VAR 0 3
69237: PPUSH
69238: CALL_OW 257
69242: PUSH
69243: LD_INT 2
69245: EQUAL
69246: IFFALSE 69250
// continue ;
69248: GO 69216
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69250: LD_ADDR_VAR 0 11
69254: PUSH
69255: LD_VAR 0 11
69259: PPUSH
69260: LD_VAR 0 11
69264: PUSH
69265: LD_INT 1
69267: PLUS
69268: PPUSH
69269: LD_VAR 0 9
69273: PUSH
69274: LD_VAR 0 3
69278: ARRAY
69279: PPUSH
69280: CALL_OW 2
69284: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
69285: LD_ADDR_VAR 0 4
69289: PUSH
69290: LD_VAR 0 4
69294: PUSH
69295: LD_VAR 0 9
69299: PUSH
69300: LD_VAR 0 3
69304: ARRAY
69305: DIFF
69306: ST_TO_ADDR
// end ;
69307: GO 69216
69309: POP
69310: POP
// if p then
69311: LD_VAR 0 11
69315: IFFALSE 69340
// result := Replace ( result , 2 , p ) ;
69317: LD_ADDR_VAR 0 2
69321: PUSH
69322: LD_VAR 0 2
69326: PPUSH
69327: LD_INT 2
69329: PPUSH
69330: LD_VAR 0 11
69334: PPUSH
69335: CALL_OW 1
69339: ST_TO_ADDR
// end ; exit ;
69340: GO 70728
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and mc_build_list [ base ] then
69342: LD_EXP 63
69346: PUSH
69347: LD_EXP 62
69351: PUSH
69352: LD_VAR 0 1
69356: ARRAY
69357: ARRAY
69358: NOT
69359: PUSH
69360: LD_EXP 36
69364: PUSH
69365: LD_VAR 0 1
69369: ARRAY
69370: PPUSH
69371: LD_INT 30
69373: PUSH
69374: LD_INT 3
69376: PUSH
69377: EMPTY
69378: LIST
69379: LIST
69380: PPUSH
69381: CALL_OW 72
69385: AND
69386: PUSH
69387: LD_EXP 41
69391: PUSH
69392: LD_VAR 0 1
69396: ARRAY
69397: AND
69398: IFFALSE 70006
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 5 ) ;
69400: LD_ADDR_EXP 78
69404: PUSH
69405: LD_EXP 78
69409: PPUSH
69410: LD_VAR 0 1
69414: PPUSH
69415: LD_INT 5
69417: PPUSH
69418: CALL_OW 1
69422: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
69423: LD_ADDR_VAR 0 2
69427: PUSH
69428: LD_INT 0
69430: PUSH
69431: LD_INT 0
69433: PUSH
69434: LD_INT 0
69436: PUSH
69437: LD_INT 0
69439: PUSH
69440: EMPTY
69441: LIST
69442: LIST
69443: LIST
69444: LIST
69445: ST_TO_ADDR
// if sci > 1 then
69446: LD_VAR 0 8
69450: PUSH
69451: LD_INT 1
69453: GREATER
69454: IFFALSE 69482
// tmp := tmp diff ( sci diff sci [ 1 ] ) ;
69456: LD_ADDR_VAR 0 4
69460: PUSH
69461: LD_VAR 0 4
69465: PUSH
69466: LD_VAR 0 8
69470: PUSH
69471: LD_VAR 0 8
69475: PUSH
69476: LD_INT 1
69478: ARRAY
69479: DIFF
69480: DIFF
69481: ST_TO_ADDR
// if tmp and not sci then
69482: LD_VAR 0 4
69486: PUSH
69487: LD_VAR 0 8
69491: NOT
69492: AND
69493: IFFALSE 69562
// begin sort := SortBySkill ( tmp , 4 ) ;
69495: LD_ADDR_VAR 0 9
69499: PUSH
69500: LD_VAR 0 4
69504: PPUSH
69505: LD_INT 4
69507: PPUSH
69508: CALL 60861 0 2
69512: ST_TO_ADDR
// if sort then
69513: LD_VAR 0 9
69517: IFFALSE 69533
// p := sort [ 1 ] ;
69519: LD_ADDR_VAR 0 11
69523: PUSH
69524: LD_VAR 0 9
69528: PUSH
69529: LD_INT 1
69531: ARRAY
69532: ST_TO_ADDR
// if p then
69533: LD_VAR 0 11
69537: IFFALSE 69562
// result := Replace ( result , 4 , p ) ;
69539: LD_ADDR_VAR 0 2
69543: PUSH
69544: LD_VAR 0 2
69548: PPUSH
69549: LD_INT 4
69551: PPUSH
69552: LD_VAR 0 11
69556: PPUSH
69557: CALL_OW 1
69561: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
69562: LD_ADDR_VAR 0 4
69566: PUSH
69567: LD_VAR 0 4
69571: PUSH
69572: LD_VAR 0 7
69576: DIFF
69577: ST_TO_ADDR
// if tmp and mech < 6 then
69578: LD_VAR 0 4
69582: PUSH
69583: LD_VAR 0 7
69587: PUSH
69588: LD_INT 6
69590: LESS
69591: AND
69592: IFFALSE 69780
// begin sort := SortBySkill ( tmp diff ( sci union mech ) , 3 ) ;
69594: LD_ADDR_VAR 0 9
69598: PUSH
69599: LD_VAR 0 4
69603: PUSH
69604: LD_VAR 0 8
69608: PUSH
69609: LD_VAR 0 7
69613: UNION
69614: DIFF
69615: PPUSH
69616: LD_INT 3
69618: PPUSH
69619: CALL 60861 0 2
69623: ST_TO_ADDR
// p := [ ] ;
69624: LD_ADDR_VAR 0 11
69628: PUSH
69629: EMPTY
69630: ST_TO_ADDR
// if sort then
69631: LD_VAR 0 9
69635: IFFALSE 69751
// for i = 1 to 6 - mech do
69637: LD_ADDR_VAR 0 3
69641: PUSH
69642: DOUBLE
69643: LD_INT 1
69645: DEC
69646: ST_TO_ADDR
69647: LD_INT 6
69649: PUSH
69650: LD_VAR 0 7
69654: MINUS
69655: PUSH
69656: FOR_TO
69657: IFFALSE 69749
// begin if i = sort then
69659: LD_VAR 0 3
69663: PUSH
69664: LD_VAR 0 9
69668: EQUAL
69669: IFFALSE 69673
// break ;
69671: GO 69749
// if GetClass ( i ) = 3 then
69673: LD_VAR 0 3
69677: PPUSH
69678: CALL_OW 257
69682: PUSH
69683: LD_INT 3
69685: EQUAL
69686: IFFALSE 69690
// continue ;
69688: GO 69656
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69690: LD_ADDR_VAR 0 11
69694: PUSH
69695: LD_VAR 0 11
69699: PPUSH
69700: LD_VAR 0 11
69704: PUSH
69705: LD_INT 1
69707: PLUS
69708: PPUSH
69709: LD_VAR 0 9
69713: PUSH
69714: LD_VAR 0 3
69718: ARRAY
69719: PPUSH
69720: CALL_OW 2
69724: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
69725: LD_ADDR_VAR 0 4
69729: PUSH
69730: LD_VAR 0 4
69734: PUSH
69735: LD_VAR 0 9
69739: PUSH
69740: LD_VAR 0 3
69744: ARRAY
69745: DIFF
69746: ST_TO_ADDR
// end ;
69747: GO 69656
69749: POP
69750: POP
// if p then
69751: LD_VAR 0 11
69755: IFFALSE 69780
// result := Replace ( result , 3 , p ) ;
69757: LD_ADDR_VAR 0 2
69761: PUSH
69762: LD_VAR 0 2
69766: PPUSH
69767: LD_INT 3
69769: PPUSH
69770: LD_VAR 0 11
69774: PPUSH
69775: CALL_OW 1
69779: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
69780: LD_ADDR_VAR 0 4
69784: PUSH
69785: LD_VAR 0 4
69789: PUSH
69790: LD_VAR 0 6
69794: DIFF
69795: ST_TO_ADDR
// if tmp and eng < 6 then
69796: LD_VAR 0 4
69800: PUSH
69801: LD_VAR 0 6
69805: PUSH
69806: LD_INT 6
69808: LESS
69809: AND
69810: IFFALSE 70004
// begin sort := SortBySkill ( tmp diff ( sci union mech union eng ) , 2 ) ;
69812: LD_ADDR_VAR 0 9
69816: PUSH
69817: LD_VAR 0 4
69821: PUSH
69822: LD_VAR 0 8
69826: PUSH
69827: LD_VAR 0 7
69831: UNION
69832: PUSH
69833: LD_VAR 0 6
69837: UNION
69838: DIFF
69839: PPUSH
69840: LD_INT 2
69842: PPUSH
69843: CALL 60861 0 2
69847: ST_TO_ADDR
// p := [ ] ;
69848: LD_ADDR_VAR 0 11
69852: PUSH
69853: EMPTY
69854: ST_TO_ADDR
// if sort then
69855: LD_VAR 0 9
69859: IFFALSE 69975
// for i = 1 to 6 - eng do
69861: LD_ADDR_VAR 0 3
69865: PUSH
69866: DOUBLE
69867: LD_INT 1
69869: DEC
69870: ST_TO_ADDR
69871: LD_INT 6
69873: PUSH
69874: LD_VAR 0 6
69878: MINUS
69879: PUSH
69880: FOR_TO
69881: IFFALSE 69973
// begin if i = sort then
69883: LD_VAR 0 3
69887: PUSH
69888: LD_VAR 0 9
69892: EQUAL
69893: IFFALSE 69897
// break ;
69895: GO 69973
// if GetClass ( i ) = 2 then
69897: LD_VAR 0 3
69901: PPUSH
69902: CALL_OW 257
69906: PUSH
69907: LD_INT 2
69909: EQUAL
69910: IFFALSE 69914
// continue ;
69912: GO 69880
// p := Insert ( p , p + 1 , sort [ i ] ) ;
69914: LD_ADDR_VAR 0 11
69918: PUSH
69919: LD_VAR 0 11
69923: PPUSH
69924: LD_VAR 0 11
69928: PUSH
69929: LD_INT 1
69931: PLUS
69932: PPUSH
69933: LD_VAR 0 9
69937: PUSH
69938: LD_VAR 0 3
69942: ARRAY
69943: PPUSH
69944: CALL_OW 2
69948: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
69949: LD_ADDR_VAR 0 4
69953: PUSH
69954: LD_VAR 0 4
69958: PUSH
69959: LD_VAR 0 9
69963: PUSH
69964: LD_VAR 0 3
69968: ARRAY
69969: DIFF
69970: ST_TO_ADDR
// end ;
69971: GO 69880
69973: POP
69974: POP
// if p then
69975: LD_VAR 0 11
69979: IFFALSE 70004
// result := Replace ( result , 2 , p ) ;
69981: LD_ADDR_VAR 0 2
69985: PUSH
69986: LD_VAR 0 2
69990: PPUSH
69991: LD_INT 2
69993: PPUSH
69994: LD_VAR 0 11
69998: PPUSH
69999: CALL_OW 1
70003: ST_TO_ADDR
// end ; exit ;
70004: GO 70728
// end ; if not mc_tech [ mc_sides [ base ] ] and UnitFilter ( mc_bases [ base ] , [ f_btype , b_factory ] ) and not mc_build_list [ base ] then
70006: LD_EXP 63
70010: PUSH
70011: LD_EXP 62
70015: PUSH
70016: LD_VAR 0 1
70020: ARRAY
70021: ARRAY
70022: NOT
70023: PUSH
70024: LD_EXP 36
70028: PUSH
70029: LD_VAR 0 1
70033: ARRAY
70034: PPUSH
70035: LD_INT 30
70037: PUSH
70038: LD_INT 3
70040: PUSH
70041: EMPTY
70042: LIST
70043: LIST
70044: PPUSH
70045: CALL_OW 72
70049: AND
70050: PUSH
70051: LD_EXP 41
70055: PUSH
70056: LD_VAR 0 1
70060: ARRAY
70061: NOT
70062: AND
70063: IFFALSE 70728
// begin mc_class_case_use := Replace ( mc_class_case_use , base , 6 ) ;
70065: LD_ADDR_EXP 78
70069: PUSH
70070: LD_EXP 78
70074: PPUSH
70075: LD_VAR 0 1
70079: PPUSH
70080: LD_INT 6
70082: PPUSH
70083: CALL_OW 1
70087: ST_TO_ADDR
// result := [ 0 , 0 , 0 , 0 ] ;
70088: LD_ADDR_VAR 0 2
70092: PUSH
70093: LD_INT 0
70095: PUSH
70096: LD_INT 0
70098: PUSH
70099: LD_INT 0
70101: PUSH
70102: LD_INT 0
70104: PUSH
70105: EMPTY
70106: LIST
70107: LIST
70108: LIST
70109: LIST
70110: ST_TO_ADDR
// if sci >= 1 then
70111: LD_VAR 0 8
70115: PUSH
70116: LD_INT 1
70118: GREATEREQUAL
70119: IFFALSE 70141
// tmp := tmp diff sci [ 1 ] ;
70121: LD_ADDR_VAR 0 4
70125: PUSH
70126: LD_VAR 0 4
70130: PUSH
70131: LD_VAR 0 8
70135: PUSH
70136: LD_INT 1
70138: ARRAY
70139: DIFF
70140: ST_TO_ADDR
// if tmp and not sci then
70141: LD_VAR 0 4
70145: PUSH
70146: LD_VAR 0 8
70150: NOT
70151: AND
70152: IFFALSE 70221
// begin sort := SortBySkill ( tmp , 4 ) ;
70154: LD_ADDR_VAR 0 9
70158: PUSH
70159: LD_VAR 0 4
70163: PPUSH
70164: LD_INT 4
70166: PPUSH
70167: CALL 60861 0 2
70171: ST_TO_ADDR
// if sort then
70172: LD_VAR 0 9
70176: IFFALSE 70192
// p := sort [ 1 ] ;
70178: LD_ADDR_VAR 0 11
70182: PUSH
70183: LD_VAR 0 9
70187: PUSH
70188: LD_INT 1
70190: ARRAY
70191: ST_TO_ADDR
// if p then
70192: LD_VAR 0 11
70196: IFFALSE 70221
// result := Replace ( result , 4 , p ) ;
70198: LD_ADDR_VAR 0 2
70202: PUSH
70203: LD_VAR 0 2
70207: PPUSH
70208: LD_INT 4
70210: PPUSH
70211: LD_VAR 0 11
70215: PPUSH
70216: CALL_OW 1
70220: ST_TO_ADDR
// end ; tmp := tmp diff mech ;
70221: LD_ADDR_VAR 0 4
70225: PUSH
70226: LD_VAR 0 4
70230: PUSH
70231: LD_VAR 0 7
70235: DIFF
70236: ST_TO_ADDR
// if tmp and mech < 6 then
70237: LD_VAR 0 4
70241: PUSH
70242: LD_VAR 0 7
70246: PUSH
70247: LD_INT 6
70249: LESS
70250: AND
70251: IFFALSE 70433
// begin sort := SortBySkill ( tmp diff mech , 3 ) ;
70253: LD_ADDR_VAR 0 9
70257: PUSH
70258: LD_VAR 0 4
70262: PUSH
70263: LD_VAR 0 7
70267: DIFF
70268: PPUSH
70269: LD_INT 3
70271: PPUSH
70272: CALL 60861 0 2
70276: ST_TO_ADDR
// p := [ ] ;
70277: LD_ADDR_VAR 0 11
70281: PUSH
70282: EMPTY
70283: ST_TO_ADDR
// if sort then
70284: LD_VAR 0 9
70288: IFFALSE 70404
// for i = 1 to 6 - mech do
70290: LD_ADDR_VAR 0 3
70294: PUSH
70295: DOUBLE
70296: LD_INT 1
70298: DEC
70299: ST_TO_ADDR
70300: LD_INT 6
70302: PUSH
70303: LD_VAR 0 7
70307: MINUS
70308: PUSH
70309: FOR_TO
70310: IFFALSE 70402
// begin if i = sort then
70312: LD_VAR 0 3
70316: PUSH
70317: LD_VAR 0 9
70321: EQUAL
70322: IFFALSE 70326
// break ;
70324: GO 70402
// if GetClass ( i ) = 3 then
70326: LD_VAR 0 3
70330: PPUSH
70331: CALL_OW 257
70335: PUSH
70336: LD_INT 3
70338: EQUAL
70339: IFFALSE 70343
// continue ;
70341: GO 70309
// p := Insert ( p , p + 1 , sort [ i ] ) ;
70343: LD_ADDR_VAR 0 11
70347: PUSH
70348: LD_VAR 0 11
70352: PPUSH
70353: LD_VAR 0 11
70357: PUSH
70358: LD_INT 1
70360: PLUS
70361: PPUSH
70362: LD_VAR 0 9
70366: PUSH
70367: LD_VAR 0 3
70371: ARRAY
70372: PPUSH
70373: CALL_OW 2
70377: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
70378: LD_ADDR_VAR 0 4
70382: PUSH
70383: LD_VAR 0 4
70387: PUSH
70388: LD_VAR 0 9
70392: PUSH
70393: LD_VAR 0 3
70397: ARRAY
70398: DIFF
70399: ST_TO_ADDR
// end ;
70400: GO 70309
70402: POP
70403: POP
// if p then
70404: LD_VAR 0 11
70408: IFFALSE 70433
// result := Replace ( result , 3 , p ) ;
70410: LD_ADDR_VAR 0 2
70414: PUSH
70415: LD_VAR 0 2
70419: PPUSH
70420: LD_INT 3
70422: PPUSH
70423: LD_VAR 0 11
70427: PPUSH
70428: CALL_OW 1
70432: ST_TO_ADDR
// end ; tmp := tmp diff eng ;
70433: LD_ADDR_VAR 0 4
70437: PUSH
70438: LD_VAR 0 4
70442: PUSH
70443: LD_VAR 0 6
70447: DIFF
70448: ST_TO_ADDR
// if tmp and eng < 4 then
70449: LD_VAR 0 4
70453: PUSH
70454: LD_VAR 0 6
70458: PUSH
70459: LD_INT 4
70461: LESS
70462: AND
70463: IFFALSE 70653
// begin sort := SortBySkill ( tmp diff ( mech union eng ) , 2 ) ;
70465: LD_ADDR_VAR 0 9
70469: PUSH
70470: LD_VAR 0 4
70474: PUSH
70475: LD_VAR 0 7
70479: PUSH
70480: LD_VAR 0 6
70484: UNION
70485: DIFF
70486: PPUSH
70487: LD_INT 2
70489: PPUSH
70490: CALL 60861 0 2
70494: ST_TO_ADDR
// p := [ ] ;
70495: LD_ADDR_VAR 0 11
70499: PUSH
70500: EMPTY
70501: ST_TO_ADDR
// if sort then
70502: LD_VAR 0 9
70506: IFFALSE 70622
// for i = 1 to 4 - eng do
70508: LD_ADDR_VAR 0 3
70512: PUSH
70513: DOUBLE
70514: LD_INT 1
70516: DEC
70517: ST_TO_ADDR
70518: LD_INT 4
70520: PUSH
70521: LD_VAR 0 6
70525: MINUS
70526: PUSH
70527: FOR_TO
70528: IFFALSE 70620
// begin if i = sort then
70530: LD_VAR 0 3
70534: PUSH
70535: LD_VAR 0 9
70539: EQUAL
70540: IFFALSE 70544
// break ;
70542: GO 70620
// if GetClass ( i ) = 2 then
70544: LD_VAR 0 3
70548: PPUSH
70549: CALL_OW 257
70553: PUSH
70554: LD_INT 2
70556: EQUAL
70557: IFFALSE 70561
// continue ;
70559: GO 70527
// p := Insert ( p , p + 1 , sort [ i ] ) ;
70561: LD_ADDR_VAR 0 11
70565: PUSH
70566: LD_VAR 0 11
70570: PPUSH
70571: LD_VAR 0 11
70575: PUSH
70576: LD_INT 1
70578: PLUS
70579: PPUSH
70580: LD_VAR 0 9
70584: PUSH
70585: LD_VAR 0 3
70589: ARRAY
70590: PPUSH
70591: CALL_OW 2
70595: ST_TO_ADDR
// tmp := tmp diff sort [ i ] ;
70596: LD_ADDR_VAR 0 4
70600: PUSH
70601: LD_VAR 0 4
70605: PUSH
70606: LD_VAR 0 9
70610: PUSH
70611: LD_VAR 0 3
70615: ARRAY
70616: DIFF
70617: ST_TO_ADDR
// end ;
70618: GO 70527
70620: POP
70621: POP
// if p then
70622: LD_VAR 0 11
70626: IFFALSE 70651
// result := Replace ( result , 2 , p ) ;
70628: LD_ADDR_VAR 0 2
70632: PUSH
70633: LD_VAR 0 2
70637: PPUSH
70638: LD_INT 2
70640: PPUSH
70641: LD_VAR 0 11
70645: PPUSH
70646: CALL_OW 1
70650: ST_TO_ADDR
// end else
70651: GO 70697
// for i = eng downto 5 do
70653: LD_ADDR_VAR 0 3
70657: PUSH
70658: DOUBLE
70659: LD_VAR 0 6
70663: INC
70664: ST_TO_ADDR
70665: LD_INT 5
70667: PUSH
70668: FOR_DOWNTO
70669: IFFALSE 70695
// tmp := tmp union eng [ i ] ;
70671: LD_ADDR_VAR 0 4
70675: PUSH
70676: LD_VAR 0 4
70680: PUSH
70681: LD_VAR 0 6
70685: PUSH
70686: LD_VAR 0 3
70690: ARRAY
70691: UNION
70692: ST_TO_ADDR
70693: GO 70668
70695: POP
70696: POP
// result := Replace ( result , 1 , tmp diff sol ) ;
70697: LD_ADDR_VAR 0 2
70701: PUSH
70702: LD_VAR 0 2
70706: PPUSH
70707: LD_INT 1
70709: PPUSH
70710: LD_VAR 0 4
70714: PUSH
70715: LD_VAR 0 5
70719: DIFF
70720: PPUSH
70721: CALL_OW 1
70725: ST_TO_ADDR
// exit ;
70726: GO 70728
// end ; end ;
70728: LD_VAR 0 2
70732: RET
// export function MC_CheckBuildings ( ) ; var i , tmp ; begin
70733: LD_INT 0
70735: PPUSH
70736: PPUSH
70737: PPUSH
// if not mc_bases then
70738: LD_EXP 36
70742: NOT
70743: IFFALSE 70747
// exit ;
70745: GO 70853
// for i = 1 to mc_bases do
70747: LD_ADDR_VAR 0 2
70751: PUSH
70752: DOUBLE
70753: LD_INT 1
70755: DEC
70756: ST_TO_ADDR
70757: LD_EXP 36
70761: PUSH
70762: FOR_TO
70763: IFFALSE 70844
// begin tmp := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_building ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
70765: LD_ADDR_VAR 0 3
70769: PUSH
70770: LD_EXP 36
70774: PUSH
70775: LD_VAR 0 2
70779: ARRAY
70780: PPUSH
70781: LD_INT 21
70783: PUSH
70784: LD_INT 3
70786: PUSH
70787: EMPTY
70788: LIST
70789: LIST
70790: PUSH
70791: LD_INT 3
70793: PUSH
70794: LD_INT 24
70796: PUSH
70797: LD_INT 1000
70799: PUSH
70800: EMPTY
70801: LIST
70802: LIST
70803: PUSH
70804: EMPTY
70805: LIST
70806: LIST
70807: PUSH
70808: EMPTY
70809: LIST
70810: LIST
70811: PPUSH
70812: CALL_OW 72
70816: ST_TO_ADDR
// mc_building_need_repair := Replace ( mc_building_need_repair , i , tmp ) ;
70817: LD_ADDR_EXP 37
70821: PUSH
70822: LD_EXP 37
70826: PPUSH
70827: LD_VAR 0 2
70831: PPUSH
70832: LD_VAR 0 3
70836: PPUSH
70837: CALL_OW 1
70841: ST_TO_ADDR
// end ;
70842: GO 70762
70844: POP
70845: POP
// RaiseSailEvent ( 101 ) ;
70846: LD_INT 101
70848: PPUSH
70849: CALL_OW 427
// end ;
70853: LD_VAR 0 1
70857: RET
// export function MC_CheckPeopleLife ( ) ; var i , j , k , tmp , need_heal_1 , need_heal_2 ; begin
70858: LD_INT 0
70860: PPUSH
70861: PPUSH
70862: PPUSH
70863: PPUSH
70864: PPUSH
70865: PPUSH
70866: PPUSH
// if not mc_bases then
70867: LD_EXP 36
70871: NOT
70872: IFFALSE 70876
// exit ;
70874: GO 71449
// for i = 1 to mc_bases do
70876: LD_ADDR_VAR 0 2
70880: PUSH
70881: DOUBLE
70882: LD_INT 1
70884: DEC
70885: ST_TO_ADDR
70886: LD_EXP 36
70890: PUSH
70891: FOR_TO
70892: IFFALSE 71440
// begin tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 750 ] ] ] ] ) ;
70894: LD_ADDR_VAR 0 5
70898: PUSH
70899: LD_EXP 36
70903: PUSH
70904: LD_VAR 0 2
70908: ARRAY
70909: PUSH
70910: LD_EXP 65
70914: PUSH
70915: LD_VAR 0 2
70919: ARRAY
70920: UNION
70921: PPUSH
70922: LD_INT 21
70924: PUSH
70925: LD_INT 1
70927: PUSH
70928: EMPTY
70929: LIST
70930: LIST
70931: PUSH
70932: LD_INT 1
70934: PUSH
70935: LD_INT 3
70937: PUSH
70938: LD_INT 54
70940: PUSH
70941: EMPTY
70942: LIST
70943: PUSH
70944: EMPTY
70945: LIST
70946: LIST
70947: PUSH
70948: LD_INT 3
70950: PUSH
70951: LD_INT 24
70953: PUSH
70954: LD_INT 750
70956: PUSH
70957: EMPTY
70958: LIST
70959: LIST
70960: PUSH
70961: EMPTY
70962: LIST
70963: LIST
70964: PUSH
70965: EMPTY
70966: LIST
70967: LIST
70968: LIST
70969: PUSH
70970: EMPTY
70971: LIST
70972: LIST
70973: PPUSH
70974: CALL_OW 72
70978: ST_TO_ADDR
// need_heal_1 := UnitFilter ( mc_bases [ i ] , [ [ f_type , unit_human ] , [ f_and , [ f_not , [ f_inside ] ] , [ f_not , [ f_lives , 250 ] ] ] ] ) ;
70979: LD_ADDR_VAR 0 6
70983: PUSH
70984: LD_EXP 36
70988: PUSH
70989: LD_VAR 0 2
70993: ARRAY
70994: PPUSH
70995: LD_INT 21
70997: PUSH
70998: LD_INT 1
71000: PUSH
71001: EMPTY
71002: LIST
71003: LIST
71004: PUSH
71005: LD_INT 1
71007: PUSH
71008: LD_INT 3
71010: PUSH
71011: LD_INT 54
71013: PUSH
71014: EMPTY
71015: LIST
71016: PUSH
71017: EMPTY
71018: LIST
71019: LIST
71020: PUSH
71021: LD_INT 3
71023: PUSH
71024: LD_INT 24
71026: PUSH
71027: LD_INT 250
71029: PUSH
71030: EMPTY
71031: LIST
71032: LIST
71033: PUSH
71034: EMPTY
71035: LIST
71036: LIST
71037: PUSH
71038: EMPTY
71039: LIST
71040: LIST
71041: LIST
71042: PUSH
71043: EMPTY
71044: LIST
71045: LIST
71046: PPUSH
71047: CALL_OW 72
71051: ST_TO_ADDR
// need_heal_2 := tmp diff need_heal_1 ;
71052: LD_ADDR_VAR 0 7
71056: PUSH
71057: LD_VAR 0 5
71061: PUSH
71062: LD_VAR 0 6
71066: DIFF
71067: ST_TO_ADDR
// if not need_heal_1 then
71068: LD_VAR 0 6
71072: NOT
71073: IFFALSE 71106
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , [ ] ) else
71075: LD_ADDR_EXP 39
71079: PUSH
71080: LD_EXP 39
71084: PPUSH
71085: LD_VAR 0 2
71089: PUSH
71090: LD_INT 1
71092: PUSH
71093: EMPTY
71094: LIST
71095: LIST
71096: PPUSH
71097: EMPTY
71098: PPUSH
71099: CALL 26637 0 3
71103: ST_TO_ADDR
71104: GO 71176
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 1 ] , UnitFilter ( mc_need_heal [ i ] [ 1 ] , [ f_not , [ f_lives , 1000 ] ] ) union need_heal_1 ) ;
71106: LD_ADDR_EXP 39
71110: PUSH
71111: LD_EXP 39
71115: PPUSH
71116: LD_VAR 0 2
71120: PUSH
71121: LD_INT 1
71123: PUSH
71124: EMPTY
71125: LIST
71126: LIST
71127: PPUSH
71128: LD_EXP 39
71132: PUSH
71133: LD_VAR 0 2
71137: ARRAY
71138: PUSH
71139: LD_INT 1
71141: ARRAY
71142: PPUSH
71143: LD_INT 3
71145: PUSH
71146: LD_INT 24
71148: PUSH
71149: LD_INT 1000
71151: PUSH
71152: EMPTY
71153: LIST
71154: LIST
71155: PUSH
71156: EMPTY
71157: LIST
71158: LIST
71159: PPUSH
71160: CALL_OW 72
71164: PUSH
71165: LD_VAR 0 6
71169: UNION
71170: PPUSH
71171: CALL 26637 0 3
71175: ST_TO_ADDR
// if not need_heal_2 then
71176: LD_VAR 0 7
71180: NOT
71181: IFFALSE 71214
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , [ ] ) else
71183: LD_ADDR_EXP 39
71187: PUSH
71188: LD_EXP 39
71192: PPUSH
71193: LD_VAR 0 2
71197: PUSH
71198: LD_INT 2
71200: PUSH
71201: EMPTY
71202: LIST
71203: LIST
71204: PPUSH
71205: EMPTY
71206: PPUSH
71207: CALL 26637 0 3
71211: ST_TO_ADDR
71212: GO 71246
// mc_need_heal := ReplaceIn ( mc_need_heal , [ i , 2 ] , need_heal_2 ) ;
71214: LD_ADDR_EXP 39
71218: PUSH
71219: LD_EXP 39
71223: PPUSH
71224: LD_VAR 0 2
71228: PUSH
71229: LD_INT 2
71231: PUSH
71232: EMPTY
71233: LIST
71234: LIST
71235: PPUSH
71236: LD_VAR 0 7
71240: PPUSH
71241: CALL 26637 0 3
71245: ST_TO_ADDR
// if need_heal_2 then
71246: LD_VAR 0 7
71250: IFFALSE 71422
// for j in need_heal_2 do
71252: LD_ADDR_VAR 0 3
71256: PUSH
71257: LD_VAR 0 7
71261: PUSH
71262: FOR_IN
71263: IFFALSE 71420
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] , [ f_class , 4 ] ] ) ;
71265: LD_ADDR_VAR 0 5
71269: PUSH
71270: LD_EXP 36
71274: PUSH
71275: LD_VAR 0 2
71279: ARRAY
71280: PPUSH
71281: LD_INT 2
71283: PUSH
71284: LD_INT 30
71286: PUSH
71287: LD_INT 6
71289: PUSH
71290: EMPTY
71291: LIST
71292: LIST
71293: PUSH
71294: LD_INT 30
71296: PUSH
71297: LD_INT 7
71299: PUSH
71300: EMPTY
71301: LIST
71302: LIST
71303: PUSH
71304: LD_INT 30
71306: PUSH
71307: LD_INT 8
71309: PUSH
71310: EMPTY
71311: LIST
71312: LIST
71313: PUSH
71314: LD_INT 30
71316: PUSH
71317: LD_INT 0
71319: PUSH
71320: EMPTY
71321: LIST
71322: LIST
71323: PUSH
71324: LD_INT 30
71326: PUSH
71327: LD_INT 1
71329: PUSH
71330: EMPTY
71331: LIST
71332: LIST
71333: PUSH
71334: LD_INT 25
71336: PUSH
71337: LD_INT 4
71339: PUSH
71340: EMPTY
71341: LIST
71342: LIST
71343: PUSH
71344: EMPTY
71345: LIST
71346: LIST
71347: LIST
71348: LIST
71349: LIST
71350: LIST
71351: LIST
71352: PPUSH
71353: CALL_OW 72
71357: ST_TO_ADDR
// if tmp then
71358: LD_VAR 0 5
71362: IFFALSE 71418
// begin k := NearestUnitToUnit ( tmp , j ) ;
71364: LD_ADDR_VAR 0 4
71368: PUSH
71369: LD_VAR 0 5
71373: PPUSH
71374: LD_VAR 0 3
71378: PPUSH
71379: CALL_OW 74
71383: ST_TO_ADDR
// if GetDistUnits ( j , k ) > 7 then
71384: LD_VAR 0 3
71388: PPUSH
71389: LD_VAR 0 4
71393: PPUSH
71394: CALL_OW 296
71398: PUSH
71399: LD_INT 7
71401: GREATER
71402: IFFALSE 71418
// ComMoveUnit ( j , k ) ;
71404: LD_VAR 0 3
71408: PPUSH
71409: LD_VAR 0 4
71413: PPUSH
71414: CALL_OW 112
// end ; end ;
71418: GO 71262
71420: POP
71421: POP
// if not need_heal_1 and not need_heal_2 then
71422: LD_VAR 0 6
71426: NOT
71427: PUSH
71428: LD_VAR 0 7
71432: NOT
71433: AND
71434: IFFALSE 71438
// continue ;
71436: GO 70891
// end ;
71438: GO 70891
71440: POP
71441: POP
// RaiseSailEvent ( 102 ) ;
71442: LD_INT 102
71444: PPUSH
71445: CALL_OW 427
// end ;
71449: LD_VAR 0 1
71453: RET
// export function MC_RepairBuildings ( ) ; var i , j , un , tmp ; begin
71454: LD_INT 0
71456: PPUSH
71457: PPUSH
71458: PPUSH
71459: PPUSH
71460: PPUSH
// if not mc_bases then
71461: LD_EXP 36
71465: NOT
71466: IFFALSE 71470
// exit ;
71468: GO 71855
// for i = 1 to mc_bases do
71470: LD_ADDR_VAR 0 2
71474: PUSH
71475: DOUBLE
71476: LD_INT 1
71478: DEC
71479: ST_TO_ADDR
71480: LD_EXP 36
71484: PUSH
71485: FOR_TO
71486: IFFALSE 71853
// begin if not mc_building_need_repair [ i ] then
71488: LD_EXP 37
71492: PUSH
71493: LD_VAR 0 2
71497: ARRAY
71498: NOT
71499: IFFALSE 71537
// begin mc_building_repairs := Replace ( mc_building_repairs , i , [ ] ) ;
71501: LD_ADDR_EXP 38
71505: PUSH
71506: LD_EXP 38
71510: PPUSH
71511: LD_VAR 0 2
71515: PPUSH
71516: EMPTY
71517: PPUSH
71518: CALL_OW 1
71522: ST_TO_ADDR
// MC_Reset ( i , 101 ) ;
71523: LD_VAR 0 2
71527: PPUSH
71528: LD_INT 101
71530: PPUSH
71531: CALL 66575 0 2
// continue ;
71535: GO 71485
// end ; mc_builders := Replace ( mc_builders , i , [ ] ) ;
71537: LD_ADDR_EXP 42
71541: PUSH
71542: LD_EXP 42
71546: PPUSH
71547: LD_VAR 0 2
71551: PPUSH
71552: EMPTY
71553: PPUSH
71554: CALL_OW 1
71558: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
71559: LD_VAR 0 2
71563: PPUSH
71564: LD_INT 103
71566: PPUSH
71567: CALL 66575 0 2
// tmp := UnitFilter ( mc_bases [ i ] union mc_ape [ i ] , [ [ f_or , [ f_class , 2 ] , [ f_class , 16 ] ] ] ) ;
71571: LD_ADDR_VAR 0 5
71575: PUSH
71576: LD_EXP 36
71580: PUSH
71581: LD_VAR 0 2
71585: ARRAY
71586: PUSH
71587: LD_EXP 65
71591: PUSH
71592: LD_VAR 0 2
71596: ARRAY
71597: UNION
71598: PPUSH
71599: LD_INT 2
71601: PUSH
71602: LD_INT 25
71604: PUSH
71605: LD_INT 2
71607: PUSH
71608: EMPTY
71609: LIST
71610: LIST
71611: PUSH
71612: LD_INT 25
71614: PUSH
71615: LD_INT 16
71617: PUSH
71618: EMPTY
71619: LIST
71620: LIST
71621: PUSH
71622: EMPTY
71623: LIST
71624: LIST
71625: LIST
71626: PUSH
71627: EMPTY
71628: LIST
71629: PPUSH
71630: CALL_OW 72
71634: ST_TO_ADDR
// if not tmp then
71635: LD_VAR 0 5
71639: NOT
71640: IFFALSE 71644
// continue ;
71642: GO 71485
// for j in tmp do
71644: LD_ADDR_VAR 0 3
71648: PUSH
71649: LD_VAR 0 5
71653: PUSH
71654: FOR_IN
71655: IFFALSE 71849
// begin if mc_need_heal [ i ] then
71657: LD_EXP 39
71661: PUSH
71662: LD_VAR 0 2
71666: ARRAY
71667: IFFALSE 71715
// if j in mc_need_heal [ i ] [ 1 ] or j in mc_need_heal [ i ] [ 2 ] then
71669: LD_VAR 0 3
71673: PUSH
71674: LD_EXP 39
71678: PUSH
71679: LD_VAR 0 2
71683: ARRAY
71684: PUSH
71685: LD_INT 1
71687: ARRAY
71688: IN
71689: PUSH
71690: LD_VAR 0 3
71694: PUSH
71695: LD_EXP 39
71699: PUSH
71700: LD_VAR 0 2
71704: ARRAY
71705: PUSH
71706: LD_INT 2
71708: ARRAY
71709: IN
71710: OR
71711: IFFALSE 71715
// continue ;
71713: GO 71654
// if IsInUnit ( j ) then
71715: LD_VAR 0 3
71719: PPUSH
71720: CALL_OW 310
71724: IFFALSE 71735
// ComExitBuilding ( j ) ;
71726: LD_VAR 0 3
71730: PPUSH
71731: CALL_OW 122
// if not j in mc_building_repairs [ i ] then
71735: LD_VAR 0 3
71739: PUSH
71740: LD_EXP 38
71744: PUSH
71745: LD_VAR 0 2
71749: ARRAY
71750: IN
71751: NOT
71752: IFFALSE 71810
// begin SetTag ( j , 101 ) ;
71754: LD_VAR 0 3
71758: PPUSH
71759: LD_INT 101
71761: PPUSH
71762: CALL_OW 109
// mc_building_repairs := ReplaceIn ( mc_building_repairs , [ i , mc_building_repairs [ i ] + 1 ] , j ) ;
71766: LD_ADDR_EXP 38
71770: PUSH
71771: LD_EXP 38
71775: PPUSH
71776: LD_VAR 0 2
71780: PUSH
71781: LD_EXP 38
71785: PUSH
71786: LD_VAR 0 2
71790: ARRAY
71791: PUSH
71792: LD_INT 1
71794: PLUS
71795: PUSH
71796: EMPTY
71797: LIST
71798: LIST
71799: PPUSH
71800: LD_VAR 0 3
71804: PPUSH
71805: CALL 26637 0 3
71809: ST_TO_ADDR
// end ; wait ( 1 ) ;
71810: LD_INT 1
71812: PPUSH
71813: CALL_OW 67
// ComRepairBuilding ( j , NearestUnitToUnit ( mc_building_need_repair [ i ] , j ) ) ;
71817: LD_VAR 0 3
71821: PPUSH
71822: LD_EXP 37
71826: PUSH
71827: LD_VAR 0 2
71831: ARRAY
71832: PPUSH
71833: LD_VAR 0 3
71837: PPUSH
71838: CALL_OW 74
71842: PPUSH
71843: CALL_OW 130
// end ;
71847: GO 71654
71849: POP
71850: POP
// end ;
71851: GO 71485
71853: POP
71854: POP
// end ;
71855: LD_VAR 0 1
71859: RET
// export function MC_Heal ; var i , j , tmp ; begin
71860: LD_INT 0
71862: PPUSH
71863: PPUSH
71864: PPUSH
71865: PPUSH
// if not mc_bases then
71866: LD_EXP 36
71870: NOT
71871: IFFALSE 71875
// exit ;
71873: GO 72277
// for i = 1 to mc_bases do
71875: LD_ADDR_VAR 0 2
71879: PUSH
71880: DOUBLE
71881: LD_INT 1
71883: DEC
71884: ST_TO_ADDR
71885: LD_EXP 36
71889: PUSH
71890: FOR_TO
71891: IFFALSE 72275
// begin if not mc_need_heal [ i ] [ 1 ] and not mc_need_heal [ i ] [ 2 ] then
71893: LD_EXP 39
71897: PUSH
71898: LD_VAR 0 2
71902: ARRAY
71903: PUSH
71904: LD_INT 1
71906: ARRAY
71907: NOT
71908: PUSH
71909: LD_EXP 39
71913: PUSH
71914: LD_VAR 0 2
71918: ARRAY
71919: PUSH
71920: LD_INT 2
71922: ARRAY
71923: NOT
71924: AND
71925: IFFALSE 71963
// begin mc_healers := Replace ( mc_healers , i , [ ] ) ;
71927: LD_ADDR_EXP 40
71931: PUSH
71932: LD_EXP 40
71936: PPUSH
71937: LD_VAR 0 2
71941: PPUSH
71942: EMPTY
71943: PPUSH
71944: CALL_OW 1
71948: ST_TO_ADDR
// MC_Reset ( i , 102 ) ;
71949: LD_VAR 0 2
71953: PPUSH
71954: LD_INT 102
71956: PPUSH
71957: CALL 66575 0 2
// continue ;
71961: GO 71890
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
71963: LD_ADDR_VAR 0 4
71967: PUSH
71968: LD_EXP 36
71972: PUSH
71973: LD_VAR 0 2
71977: ARRAY
71978: PPUSH
71979: LD_INT 25
71981: PUSH
71982: LD_INT 4
71984: PUSH
71985: EMPTY
71986: LIST
71987: LIST
71988: PPUSH
71989: CALL_OW 72
71993: ST_TO_ADDR
// if not tmp then
71994: LD_VAR 0 4
71998: NOT
71999: IFFALSE 72003
// continue ;
72001: GO 71890
// if mc_taming [ i ] then
72003: LD_EXP 67
72007: PUSH
72008: LD_VAR 0 2
72012: ARRAY
72013: IFFALSE 72037
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
72015: LD_ADDR_EXP 67
72019: PUSH
72020: LD_EXP 67
72024: PPUSH
72025: LD_VAR 0 2
72029: PPUSH
72030: EMPTY
72031: PPUSH
72032: CALL_OW 1
72036: ST_TO_ADDR
// for j in tmp do
72037: LD_ADDR_VAR 0 3
72041: PUSH
72042: LD_VAR 0 4
72046: PUSH
72047: FOR_IN
72048: IFFALSE 72271
// begin if IsInUnit ( j ) then
72050: LD_VAR 0 3
72054: PPUSH
72055: CALL_OW 310
72059: IFFALSE 72070
// ComExitBuilding ( j ) ;
72061: LD_VAR 0 3
72065: PPUSH
72066: CALL_OW 122
// if not j in mc_healers [ i ] then
72070: LD_VAR 0 3
72074: PUSH
72075: LD_EXP 40
72079: PUSH
72080: LD_VAR 0 2
72084: ARRAY
72085: IN
72086: NOT
72087: IFFALSE 72133
// mc_healers := ReplaceIn ( mc_healers , [ i , mc_healers [ i ] + 1 ] , j ) ;
72089: LD_ADDR_EXP 40
72093: PUSH
72094: LD_EXP 40
72098: PPUSH
72099: LD_VAR 0 2
72103: PUSH
72104: LD_EXP 40
72108: PUSH
72109: LD_VAR 0 2
72113: ARRAY
72114: PUSH
72115: LD_INT 1
72117: PLUS
72118: PUSH
72119: EMPTY
72120: LIST
72121: LIST
72122: PPUSH
72123: LD_VAR 0 3
72127: PPUSH
72128: CALL 26637 0 3
72132: ST_TO_ADDR
// if GetTag ( j ) <> 102 then
72133: LD_VAR 0 3
72137: PPUSH
72138: CALL_OW 110
72142: PUSH
72143: LD_INT 102
72145: NONEQUAL
72146: IFFALSE 72160
// SetTag ( j , 102 ) ;
72148: LD_VAR 0 3
72152: PPUSH
72153: LD_INT 102
72155: PPUSH
72156: CALL_OW 109
// Wait ( 3 ) ;
72160: LD_INT 3
72162: PPUSH
72163: CALL_OW 67
// if mc_need_heal [ i ] [ 1 ] then
72167: LD_EXP 39
72171: PUSH
72172: LD_VAR 0 2
72176: ARRAY
72177: PUSH
72178: LD_INT 1
72180: ARRAY
72181: IFFALSE 72213
// ComHeal ( j , mc_need_heal [ i ] [ 1 ] [ 1 ] ) else
72183: LD_VAR 0 3
72187: PPUSH
72188: LD_EXP 39
72192: PUSH
72193: LD_VAR 0 2
72197: ARRAY
72198: PUSH
72199: LD_INT 1
72201: ARRAY
72202: PUSH
72203: LD_INT 1
72205: ARRAY
72206: PPUSH
72207: CALL_OW 128
72211: GO 72269
// if not HasTask ( j ) and mc_need_heal [ i ] [ 2 ] then
72213: LD_VAR 0 3
72217: PPUSH
72218: CALL_OW 314
72222: NOT
72223: PUSH
72224: LD_EXP 39
72228: PUSH
72229: LD_VAR 0 2
72233: ARRAY
72234: PUSH
72235: LD_INT 2
72237: ARRAY
72238: AND
72239: IFFALSE 72269
// ComHeal ( j , mc_need_heal [ i ] [ 2 ] [ 1 ] ) ;
72241: LD_VAR 0 3
72245: PPUSH
72246: LD_EXP 39
72250: PUSH
72251: LD_VAR 0 2
72255: ARRAY
72256: PUSH
72257: LD_INT 2
72259: ARRAY
72260: PUSH
72261: LD_INT 1
72263: ARRAY
72264: PPUSH
72265: CALL_OW 128
// end ;
72269: GO 72047
72271: POP
72272: POP
// end ;
72273: GO 71890
72275: POP
72276: POP
// end ;
72277: LD_VAR 0 1
72281: RET
// export function MC_Build ( ) ; var i , j , tmp , depot ; begin
72282: LD_INT 0
72284: PPUSH
72285: PPUSH
72286: PPUSH
72287: PPUSH
72288: PPUSH
// if not mc_bases then
72289: LD_EXP 36
72293: NOT
72294: IFFALSE 72298
// exit ;
72296: GO 73441
// for i = 1 to mc_bases do
72298: LD_ADDR_VAR 0 2
72302: PUSH
72303: DOUBLE
72304: LD_INT 1
72306: DEC
72307: ST_TO_ADDR
72308: LD_EXP 36
72312: PUSH
72313: FOR_TO
72314: IFFALSE 73439
// begin if mc_scan [ i ] then
72316: LD_EXP 59
72320: PUSH
72321: LD_VAR 0 2
72325: ARRAY
72326: IFFALSE 72330
// continue ;
72328: GO 72313
// if not mc_build_list [ i ] and not mc_construct_list [ i ] and mc_builders [ i ] then
72330: LD_EXP 41
72334: PUSH
72335: LD_VAR 0 2
72339: ARRAY
72340: NOT
72341: PUSH
72342: LD_EXP 43
72346: PUSH
72347: LD_VAR 0 2
72351: ARRAY
72352: NOT
72353: AND
72354: PUSH
72355: LD_EXP 42
72359: PUSH
72360: LD_VAR 0 2
72364: ARRAY
72365: AND
72366: IFFALSE 72404
// begin mc_builders := Replace ( mc_builders , i , [ ] ) ;
72368: LD_ADDR_EXP 42
72372: PUSH
72373: LD_EXP 42
72377: PPUSH
72378: LD_VAR 0 2
72382: PPUSH
72383: EMPTY
72384: PPUSH
72385: CALL_OW 1
72389: ST_TO_ADDR
// MC_Reset ( i , 103 ) ;
72390: LD_VAR 0 2
72394: PPUSH
72395: LD_INT 103
72397: PPUSH
72398: CALL 66575 0 2
// continue ;
72402: GO 72313
// end ; if mc_construct_list [ i ] then
72404: LD_EXP 43
72408: PUSH
72409: LD_VAR 0 2
72413: ARRAY
72414: IFFALSE 72634
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
72416: LD_ADDR_VAR 0 4
72420: PUSH
72421: LD_EXP 36
72425: PUSH
72426: LD_VAR 0 2
72430: ARRAY
72431: PPUSH
72432: LD_INT 25
72434: PUSH
72435: LD_INT 2
72437: PUSH
72438: EMPTY
72439: LIST
72440: LIST
72441: PPUSH
72442: CALL_OW 72
72446: PUSH
72447: LD_EXP 38
72451: PUSH
72452: LD_VAR 0 2
72456: ARRAY
72457: DIFF
72458: ST_TO_ADDR
// if not tmp then
72459: LD_VAR 0 4
72463: NOT
72464: IFFALSE 72468
// continue ;
72466: GO 72313
// for j in tmp do
72468: LD_ADDR_VAR 0 3
72472: PUSH
72473: LD_VAR 0 4
72477: PUSH
72478: FOR_IN
72479: IFFALSE 72630
// begin if not mc_builders [ i ] then
72481: LD_EXP 42
72485: PUSH
72486: LD_VAR 0 2
72490: ARRAY
72491: NOT
72492: IFFALSE 72550
// begin SetTag ( j , 103 ) ;
72494: LD_VAR 0 3
72498: PPUSH
72499: LD_INT 103
72501: PPUSH
72502: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
72506: LD_ADDR_EXP 42
72510: PUSH
72511: LD_EXP 42
72515: PPUSH
72516: LD_VAR 0 2
72520: PUSH
72521: LD_EXP 42
72525: PUSH
72526: LD_VAR 0 2
72530: ARRAY
72531: PUSH
72532: LD_INT 1
72534: PLUS
72535: PUSH
72536: EMPTY
72537: LIST
72538: LIST
72539: PPUSH
72540: LD_VAR 0 3
72544: PPUSH
72545: CALL 26637 0 3
72549: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
72550: LD_VAR 0 3
72554: PPUSH
72555: CALL_OW 310
72559: IFFALSE 72570
// ComExitBuilding ( j ) ;
72561: LD_VAR 0 3
72565: PPUSH
72566: CALL_OW 122
// wait ( 3 ) ;
72570: LD_INT 3
72572: PPUSH
72573: CALL_OW 67
// if not mc_construct_list [ i ] then
72577: LD_EXP 43
72581: PUSH
72582: LD_VAR 0 2
72586: ARRAY
72587: NOT
72588: IFFALSE 72592
// break ;
72590: GO 72630
// if not HasTask ( j ) then
72592: LD_VAR 0 3
72596: PPUSH
72597: CALL_OW 314
72601: NOT
72602: IFFALSE 72628
// ComComplete ( j , mc_construct_list [ i ] [ 1 ] ) ;
72604: LD_VAR 0 3
72608: PPUSH
72609: LD_EXP 43
72613: PUSH
72614: LD_VAR 0 2
72618: ARRAY
72619: PUSH
72620: LD_INT 1
72622: ARRAY
72623: PPUSH
72624: CALL 29488 0 2
// end ;
72628: GO 72478
72630: POP
72631: POP
// end else
72632: GO 73437
// if mc_build_list [ i ] then
72634: LD_EXP 41
72638: PUSH
72639: LD_VAR 0 2
72643: ARRAY
72644: IFFALSE 73437
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
72646: LD_ADDR_VAR 0 5
72650: PUSH
72651: LD_EXP 36
72655: PUSH
72656: LD_VAR 0 2
72660: ARRAY
72661: PPUSH
72662: LD_INT 2
72664: PUSH
72665: LD_INT 30
72667: PUSH
72668: LD_INT 0
72670: PUSH
72671: EMPTY
72672: LIST
72673: LIST
72674: PUSH
72675: LD_INT 30
72677: PUSH
72678: LD_INT 1
72680: PUSH
72681: EMPTY
72682: LIST
72683: LIST
72684: PUSH
72685: EMPTY
72686: LIST
72687: LIST
72688: LIST
72689: PPUSH
72690: CALL_OW 72
72694: ST_TO_ADDR
// if depot then
72695: LD_VAR 0 5
72699: IFFALSE 72717
// depot := depot [ 1 ] else
72701: LD_ADDR_VAR 0 5
72705: PUSH
72706: LD_VAR 0 5
72710: PUSH
72711: LD_INT 1
72713: ARRAY
72714: ST_TO_ADDR
72715: GO 72725
// depot := 0 ;
72717: LD_ADDR_VAR 0 5
72721: PUSH
72722: LD_INT 0
72724: ST_TO_ADDR
// if IsExtension ( mc_build_list [ i ] [ 1 ] [ 1 ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) then
72725: LD_EXP 41
72729: PUSH
72730: LD_VAR 0 2
72734: ARRAY
72735: PUSH
72736: LD_INT 1
72738: ARRAY
72739: PUSH
72740: LD_INT 1
72742: ARRAY
72743: PPUSH
72744: CALL 29318 0 1
72748: PUSH
72749: LD_EXP 36
72753: PUSH
72754: LD_VAR 0 2
72758: ARRAY
72759: PPUSH
72760: LD_INT 2
72762: PUSH
72763: LD_INT 30
72765: PUSH
72766: LD_INT 2
72768: PUSH
72769: EMPTY
72770: LIST
72771: LIST
72772: PUSH
72773: LD_INT 30
72775: PUSH
72776: LD_INT 3
72778: PUSH
72779: EMPTY
72780: LIST
72781: LIST
72782: PUSH
72783: EMPTY
72784: LIST
72785: LIST
72786: LIST
72787: PPUSH
72788: CALL_OW 72
72792: NOT
72793: AND
72794: IFFALSE 72899
// begin for j = 1 to mc_build_list [ i ] do
72796: LD_ADDR_VAR 0 3
72800: PUSH
72801: DOUBLE
72802: LD_INT 1
72804: DEC
72805: ST_TO_ADDR
72806: LD_EXP 41
72810: PUSH
72811: LD_VAR 0 2
72815: ARRAY
72816: PUSH
72817: FOR_TO
72818: IFFALSE 72897
// if mc_build_list [ i ] [ j ] [ 1 ] = b_workshop then
72820: LD_EXP 41
72824: PUSH
72825: LD_VAR 0 2
72829: ARRAY
72830: PUSH
72831: LD_VAR 0 3
72835: ARRAY
72836: PUSH
72837: LD_INT 1
72839: ARRAY
72840: PUSH
72841: LD_INT 2
72843: EQUAL
72844: IFFALSE 72895
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , j , 1 , false ) ) ;
72846: LD_ADDR_EXP 41
72850: PUSH
72851: LD_EXP 41
72855: PPUSH
72856: LD_VAR 0 2
72860: PPUSH
72861: LD_EXP 41
72865: PUSH
72866: LD_VAR 0 2
72870: ARRAY
72871: PPUSH
72872: LD_VAR 0 3
72876: PPUSH
72877: LD_INT 1
72879: PPUSH
72880: LD_INT 0
72882: PPUSH
72883: CALL 26055 0 4
72887: PPUSH
72888: CALL_OW 1
72892: ST_TO_ADDR
// break ;
72893: GO 72897
// end ;
72895: GO 72817
72897: POP
72898: POP
// end ; if mc_build_list [ i ] [ 1 ] [ 1 ] = b_depot or ( depot and CanBeBuilt ( depot , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ) then
72899: LD_EXP 41
72903: PUSH
72904: LD_VAR 0 2
72908: ARRAY
72909: PUSH
72910: LD_INT 1
72912: ARRAY
72913: PUSH
72914: LD_INT 1
72916: ARRAY
72917: PUSH
72918: LD_INT 0
72920: EQUAL
72921: PUSH
72922: LD_VAR 0 5
72926: PUSH
72927: LD_VAR 0 5
72931: PPUSH
72932: LD_EXP 41
72936: PUSH
72937: LD_VAR 0 2
72941: ARRAY
72942: PUSH
72943: LD_INT 1
72945: ARRAY
72946: PUSH
72947: LD_INT 1
72949: ARRAY
72950: PPUSH
72951: LD_EXP 41
72955: PUSH
72956: LD_VAR 0 2
72960: ARRAY
72961: PUSH
72962: LD_INT 1
72964: ARRAY
72965: PUSH
72966: LD_INT 2
72968: ARRAY
72969: PPUSH
72970: LD_EXP 41
72974: PUSH
72975: LD_VAR 0 2
72979: ARRAY
72980: PUSH
72981: LD_INT 1
72983: ARRAY
72984: PUSH
72985: LD_INT 3
72987: ARRAY
72988: PPUSH
72989: LD_EXP 41
72993: PUSH
72994: LD_VAR 0 2
72998: ARRAY
72999: PUSH
73000: LD_INT 1
73002: ARRAY
73003: PUSH
73004: LD_INT 4
73006: ARRAY
73007: PPUSH
73008: CALL 34034 0 5
73012: AND
73013: OR
73014: IFFALSE 73295
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 2 ] ) diff mc_building_repairs [ i ] ;
73016: LD_ADDR_VAR 0 4
73020: PUSH
73021: LD_EXP 36
73025: PUSH
73026: LD_VAR 0 2
73030: ARRAY
73031: PPUSH
73032: LD_INT 25
73034: PUSH
73035: LD_INT 2
73037: PUSH
73038: EMPTY
73039: LIST
73040: LIST
73041: PPUSH
73042: CALL_OW 72
73046: PUSH
73047: LD_EXP 38
73051: PUSH
73052: LD_VAR 0 2
73056: ARRAY
73057: DIFF
73058: ST_TO_ADDR
// if not tmp then
73059: LD_VAR 0 4
73063: NOT
73064: IFFALSE 73068
// continue ;
73066: GO 72313
// for j in tmp do
73068: LD_ADDR_VAR 0 3
73072: PUSH
73073: LD_VAR 0 4
73077: PUSH
73078: FOR_IN
73079: IFFALSE 73291
// begin if not mc_builders [ i ] then
73081: LD_EXP 42
73085: PUSH
73086: LD_VAR 0 2
73090: ARRAY
73091: NOT
73092: IFFALSE 73150
// begin SetTag ( j , 103 ) ;
73094: LD_VAR 0 3
73098: PPUSH
73099: LD_INT 103
73101: PPUSH
73102: CALL_OW 109
// mc_builders := ReplaceIn ( mc_builders , [ i , mc_builders [ i ] + 1 ] , j ) ;
73106: LD_ADDR_EXP 42
73110: PUSH
73111: LD_EXP 42
73115: PPUSH
73116: LD_VAR 0 2
73120: PUSH
73121: LD_EXP 42
73125: PUSH
73126: LD_VAR 0 2
73130: ARRAY
73131: PUSH
73132: LD_INT 1
73134: PLUS
73135: PUSH
73136: EMPTY
73137: LIST
73138: LIST
73139: PPUSH
73140: LD_VAR 0 3
73144: PPUSH
73145: CALL 26637 0 3
73149: ST_TO_ADDR
// end ; if IsInUnit ( j ) then
73150: LD_VAR 0 3
73154: PPUSH
73155: CALL_OW 310
73159: IFFALSE 73170
// ComExitBuilding ( j ) ;
73161: LD_VAR 0 3
73165: PPUSH
73166: CALL_OW 122
// wait ( 3 ) ;
73170: LD_INT 3
73172: PPUSH
73173: CALL_OW 67
// if not mc_build_list [ i ] then
73177: LD_EXP 41
73181: PUSH
73182: LD_VAR 0 2
73186: ARRAY
73187: NOT
73188: IFFALSE 73192
// break ;
73190: GO 73291
// if not HasTask ( j ) then
73192: LD_VAR 0 3
73196: PPUSH
73197: CALL_OW 314
73201: NOT
73202: IFFALSE 73289
// ComBuild ( j , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) ;
73204: LD_VAR 0 3
73208: PPUSH
73209: LD_EXP 41
73213: PUSH
73214: LD_VAR 0 2
73218: ARRAY
73219: PUSH
73220: LD_INT 1
73222: ARRAY
73223: PUSH
73224: LD_INT 1
73226: ARRAY
73227: PPUSH
73228: LD_EXP 41
73232: PUSH
73233: LD_VAR 0 2
73237: ARRAY
73238: PUSH
73239: LD_INT 1
73241: ARRAY
73242: PUSH
73243: LD_INT 2
73245: ARRAY
73246: PPUSH
73247: LD_EXP 41
73251: PUSH
73252: LD_VAR 0 2
73256: ARRAY
73257: PUSH
73258: LD_INT 1
73260: ARRAY
73261: PUSH
73262: LD_INT 3
73264: ARRAY
73265: PPUSH
73266: LD_EXP 41
73270: PUSH
73271: LD_VAR 0 2
73275: ARRAY
73276: PUSH
73277: LD_INT 1
73279: ARRAY
73280: PUSH
73281: LD_INT 4
73283: ARRAY
73284: PPUSH
73285: CALL_OW 145
// end ;
73289: GO 73078
73291: POP
73292: POP
// end else
73293: GO 73437
// if not TryClearPlaceForBuilding ( mc_bases [ i ] , mc_build_list [ i ] [ 1 ] [ 1 ] , mc_build_list [ i ] [ 1 ] [ 2 ] , mc_build_list [ i ] [ 1 ] [ 3 ] , mc_build_list [ i ] [ 1 ] [ 4 ] ) then
73295: LD_EXP 36
73299: PUSH
73300: LD_VAR 0 2
73304: ARRAY
73305: PPUSH
73306: LD_EXP 41
73310: PUSH
73311: LD_VAR 0 2
73315: ARRAY
73316: PUSH
73317: LD_INT 1
73319: ARRAY
73320: PUSH
73321: LD_INT 1
73323: ARRAY
73324: PPUSH
73325: LD_EXP 41
73329: PUSH
73330: LD_VAR 0 2
73334: ARRAY
73335: PUSH
73336: LD_INT 1
73338: ARRAY
73339: PUSH
73340: LD_INT 2
73342: ARRAY
73343: PPUSH
73344: LD_EXP 41
73348: PUSH
73349: LD_VAR 0 2
73353: ARRAY
73354: PUSH
73355: LD_INT 1
73357: ARRAY
73358: PUSH
73359: LD_INT 3
73361: ARRAY
73362: PPUSH
73363: LD_EXP 41
73367: PUSH
73368: LD_VAR 0 2
73372: ARRAY
73373: PUSH
73374: LD_INT 1
73376: ARRAY
73377: PUSH
73378: LD_INT 4
73380: ARRAY
73381: PPUSH
73382: CALL 33388 0 5
73386: NOT
73387: IFFALSE 73437
// begin mc_build_list := Replace ( mc_build_list , i , Reindex ( mc_build_list [ i ] , 1 , - 1 , false ) ) ;
73389: LD_ADDR_EXP 41
73393: PUSH
73394: LD_EXP 41
73398: PPUSH
73399: LD_VAR 0 2
73403: PPUSH
73404: LD_EXP 41
73408: PUSH
73409: LD_VAR 0 2
73413: ARRAY
73414: PPUSH
73415: LD_INT 1
73417: PPUSH
73418: LD_INT 1
73420: NEG
73421: PPUSH
73422: LD_INT 0
73424: PPUSH
73425: CALL 26055 0 4
73429: PPUSH
73430: CALL_OW 1
73434: ST_TO_ADDR
// continue ;
73435: GO 72313
// end ; end ; end ;
73437: GO 72313
73439: POP
73440: POP
// end ;
73441: LD_VAR 0 1
73445: RET
// export function MC_BuildUpgrade ( ) ; var i , j , tmp , depot , lab ; begin
73446: LD_INT 0
73448: PPUSH
73449: PPUSH
73450: PPUSH
73451: PPUSH
73452: PPUSH
73453: PPUSH
// if not mc_bases then
73454: LD_EXP 36
73458: NOT
73459: IFFALSE 73463
// exit ;
73461: GO 73890
// for i = 1 to mc_bases do
73463: LD_ADDR_VAR 0 2
73467: PUSH
73468: DOUBLE
73469: LD_INT 1
73471: DEC
73472: ST_TO_ADDR
73473: LD_EXP 36
73477: PUSH
73478: FOR_TO
73479: IFFALSE 73888
// begin tmp := mc_build_upgrade [ i ] ;
73481: LD_ADDR_VAR 0 4
73485: PUSH
73486: LD_EXP 68
73490: PUSH
73491: LD_VAR 0 2
73495: ARRAY
73496: ST_TO_ADDR
// lab := UnitFilter ( mc_lab [ i ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] ] ) ;
73497: LD_ADDR_VAR 0 6
73501: PUSH
73502: LD_EXP 69
73506: PUSH
73507: LD_VAR 0 2
73511: ARRAY
73512: PPUSH
73513: LD_INT 2
73515: PUSH
73516: LD_INT 30
73518: PUSH
73519: LD_INT 6
73521: PUSH
73522: EMPTY
73523: LIST
73524: LIST
73525: PUSH
73526: LD_INT 30
73528: PUSH
73529: LD_INT 7
73531: PUSH
73532: EMPTY
73533: LIST
73534: LIST
73535: PUSH
73536: EMPTY
73537: LIST
73538: LIST
73539: LIST
73540: PPUSH
73541: CALL_OW 72
73545: ST_TO_ADDR
// if not tmp and not lab then
73546: LD_VAR 0 4
73550: NOT
73551: PUSH
73552: LD_VAR 0 6
73556: NOT
73557: AND
73558: IFFALSE 73562
// continue ;
73560: GO 73478
// if tmp then
73562: LD_VAR 0 4
73566: IFFALSE 73686
// for j in tmp do
73568: LD_ADDR_VAR 0 3
73572: PUSH
73573: LD_VAR 0 4
73577: PUSH
73578: FOR_IN
73579: IFFALSE 73684
// begin if UpgradeCost ( j ) then
73581: LD_VAR 0 3
73585: PPUSH
73586: CALL 33048 0 1
73590: IFFALSE 73682
// begin ComUpgrade ( j ) ;
73592: LD_VAR 0 3
73596: PPUSH
73597: CALL_OW 146
// mc_build_upgrade := Replace ( mc_build_upgrade , i , mc_build_upgrade [ i ] diff j ) ;
73601: LD_ADDR_EXP 68
73605: PUSH
73606: LD_EXP 68
73610: PPUSH
73611: LD_VAR 0 2
73615: PPUSH
73616: LD_EXP 68
73620: PUSH
73621: LD_VAR 0 2
73625: ARRAY
73626: PUSH
73627: LD_VAR 0 3
73631: DIFF
73632: PPUSH
73633: CALL_OW 1
73637: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
73638: LD_ADDR_EXP 43
73642: PUSH
73643: LD_EXP 43
73647: PPUSH
73648: LD_VAR 0 2
73652: PUSH
73653: LD_EXP 43
73657: PUSH
73658: LD_VAR 0 2
73662: ARRAY
73663: PUSH
73664: LD_INT 1
73666: PLUS
73667: PUSH
73668: EMPTY
73669: LIST
73670: LIST
73671: PPUSH
73672: LD_VAR 0 3
73676: PPUSH
73677: CALL 26637 0 3
73681: ST_TO_ADDR
// end ; end ;
73682: GO 73578
73684: POP
73685: POP
// if not lab or not mc_lab_upgrade [ i ] then
73686: LD_VAR 0 6
73690: NOT
73691: PUSH
73692: LD_EXP 70
73696: PUSH
73697: LD_VAR 0 2
73701: ARRAY
73702: NOT
73703: OR
73704: IFFALSE 73708
// continue ;
73706: GO 73478
// for j in lab do
73708: LD_ADDR_VAR 0 3
73712: PUSH
73713: LD_VAR 0 6
73717: PUSH
73718: FOR_IN
73719: IFFALSE 73884
// begin if GetBType ( j ) in [ b_lab , b_lab_half ] and BuildingStatus ( j ) <> bs_build then
73721: LD_VAR 0 3
73725: PPUSH
73726: CALL_OW 266
73730: PUSH
73731: LD_INT 6
73733: PUSH
73734: LD_INT 7
73736: PUSH
73737: EMPTY
73738: LIST
73739: LIST
73740: IN
73741: PUSH
73742: LD_VAR 0 3
73746: PPUSH
73747: CALL_OW 461
73751: PUSH
73752: LD_INT 1
73754: NONEQUAL
73755: AND
73756: IFFALSE 73882
// begin if UpgradeLabCost ( j , mc_lab_upgrade [ i ] [ 1 ] ) then
73758: LD_VAR 0 3
73762: PPUSH
73763: LD_EXP 70
73767: PUSH
73768: LD_VAR 0 2
73772: ARRAY
73773: PUSH
73774: LD_INT 1
73776: ARRAY
73777: PPUSH
73778: CALL 33253 0 2
73782: IFFALSE 73882
// begin ComCancel ( j ) ;
73784: LD_VAR 0 3
73788: PPUSH
73789: CALL_OW 127
// AddComUpgradeLab ( j , mc_lab_upgrade [ i ] [ 1 ] ) ;
73793: LD_VAR 0 3
73797: PPUSH
73798: LD_EXP 70
73802: PUSH
73803: LD_VAR 0 2
73807: ARRAY
73808: PUSH
73809: LD_INT 1
73811: ARRAY
73812: PPUSH
73813: CALL_OW 207
// if not j in mc_construct_list [ i ] then
73817: LD_VAR 0 3
73821: PUSH
73822: LD_EXP 43
73826: PUSH
73827: LD_VAR 0 2
73831: ARRAY
73832: IN
73833: NOT
73834: IFFALSE 73880
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , j ) ;
73836: LD_ADDR_EXP 43
73840: PUSH
73841: LD_EXP 43
73845: PPUSH
73846: LD_VAR 0 2
73850: PUSH
73851: LD_EXP 43
73855: PUSH
73856: LD_VAR 0 2
73860: ARRAY
73861: PUSH
73862: LD_INT 1
73864: PLUS
73865: PUSH
73866: EMPTY
73867: LIST
73868: LIST
73869: PPUSH
73870: LD_VAR 0 3
73874: PPUSH
73875: CALL 26637 0 3
73879: ST_TO_ADDR
// break ;
73880: GO 73884
// end ; end ; end ;
73882: GO 73718
73884: POP
73885: POP
// end ;
73886: GO 73478
73888: POP
73889: POP
// end ;
73890: LD_VAR 0 1
73894: RET
// export function MC_TurretWeapon ( ) ; var i , j , tmp , tmp2 , t , tw , busy , weapon ; begin
73895: LD_INT 0
73897: PPUSH
73898: PPUSH
73899: PPUSH
73900: PPUSH
73901: PPUSH
73902: PPUSH
73903: PPUSH
73904: PPUSH
73905: PPUSH
// if not mc_bases then
73906: LD_EXP 36
73910: NOT
73911: IFFALSE 73915
// exit ;
73913: GO 74320
// for i = 1 to mc_bases do
73915: LD_ADDR_VAR 0 2
73919: PUSH
73920: DOUBLE
73921: LD_INT 1
73923: DEC
73924: ST_TO_ADDR
73925: LD_EXP 36
73929: PUSH
73930: FOR_TO
73931: IFFALSE 74318
// begin if not mc_turret_list [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) then
73933: LD_EXP 44
73937: PUSH
73938: LD_VAR 0 2
73942: ARRAY
73943: NOT
73944: PUSH
73945: LD_EXP 36
73949: PUSH
73950: LD_VAR 0 2
73954: ARRAY
73955: PPUSH
73956: LD_INT 30
73958: PUSH
73959: LD_INT 3
73961: PUSH
73962: EMPTY
73963: LIST
73964: LIST
73965: PPUSH
73966: CALL_OW 72
73970: NOT
73971: OR
73972: IFFALSE 73976
// continue ;
73974: GO 73930
// busy := false ;
73976: LD_ADDR_VAR 0 8
73980: PUSH
73981: LD_INT 0
73983: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
73984: LD_ADDR_VAR 0 4
73988: PUSH
73989: LD_EXP 36
73993: PUSH
73994: LD_VAR 0 2
73998: ARRAY
73999: PPUSH
74000: LD_INT 30
74002: PUSH
74003: LD_INT 3
74005: PUSH
74006: EMPTY
74007: LIST
74008: LIST
74009: PPUSH
74010: CALL_OW 72
74014: ST_TO_ADDR
// t := UnitFilter ( mc_turret_list [ i ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) ;
74015: LD_ADDR_VAR 0 6
74019: PUSH
74020: LD_EXP 44
74024: PUSH
74025: LD_VAR 0 2
74029: ARRAY
74030: PPUSH
74031: LD_INT 2
74033: PUSH
74034: LD_INT 30
74036: PUSH
74037: LD_INT 32
74039: PUSH
74040: EMPTY
74041: LIST
74042: LIST
74043: PUSH
74044: LD_INT 30
74046: PUSH
74047: LD_INT 33
74049: PUSH
74050: EMPTY
74051: LIST
74052: LIST
74053: PUSH
74054: EMPTY
74055: LIST
74056: LIST
74057: LIST
74058: PPUSH
74059: CALL_OW 72
74063: ST_TO_ADDR
// if not t then
74064: LD_VAR 0 6
74068: NOT
74069: IFFALSE 74073
// continue ;
74071: GO 73930
// for j in tmp do
74073: LD_ADDR_VAR 0 3
74077: PUSH
74078: LD_VAR 0 4
74082: PUSH
74083: FOR_IN
74084: IFFALSE 74114
// if not BuildingStatus ( j ) = bs_idle then
74086: LD_VAR 0 3
74090: PPUSH
74091: CALL_OW 461
74095: PUSH
74096: LD_INT 2
74098: EQUAL
74099: NOT
74100: IFFALSE 74112
// begin busy := true ;
74102: LD_ADDR_VAR 0 8
74106: PUSH
74107: LD_INT 1
74109: ST_TO_ADDR
// break ;
74110: GO 74114
// end ;
74112: GO 74083
74114: POP
74115: POP
// if busy then
74116: LD_VAR 0 8
74120: IFFALSE 74124
// continue ;
74122: GO 73930
// tw := UnitFilter ( t , [ f_bweapon , 0 ] ) ;
74124: LD_ADDR_VAR 0 7
74128: PUSH
74129: LD_VAR 0 6
74133: PPUSH
74134: LD_INT 35
74136: PUSH
74137: LD_INT 0
74139: PUSH
74140: EMPTY
74141: LIST
74142: LIST
74143: PPUSH
74144: CALL_OW 72
74148: ST_TO_ADDR
// if tw then
74149: LD_VAR 0 7
74153: IFFALSE 74230
// begin tw := tw [ 1 ] ;
74155: LD_ADDR_VAR 0 7
74159: PUSH
74160: LD_VAR 0 7
74164: PUSH
74165: LD_INT 1
74167: ARRAY
74168: ST_TO_ADDR
// weapon := GetTurretWeapon ( tw , mc_scan_area [ i ] ) ;
74169: LD_ADDR_VAR 0 9
74173: PUSH
74174: LD_VAR 0 7
74178: PPUSH
74179: LD_EXP 61
74183: PUSH
74184: LD_VAR 0 2
74188: ARRAY
74189: PPUSH
74190: CALL 31607 0 2
74194: ST_TO_ADDR
// if mc_allowed_tower_weapons [ i ] then
74195: LD_EXP 75
74199: PUSH
74200: LD_VAR 0 2
74204: ARRAY
74205: IFFALSE 74228
// if not weapon in mc_allowed_tower_weapons [ i ] then
74207: LD_VAR 0 9
74211: PUSH
74212: LD_EXP 75
74216: PUSH
74217: LD_VAR 0 2
74221: ARRAY
74222: IN
74223: NOT
74224: IFFALSE 74228
// continue ;
74226: GO 73930
// end else
74228: GO 74293
// begin tmp2 := UpgradeTurretsWeapon ( mc_turret_list [ i ] , tmp ) ;
74230: LD_ADDR_VAR 0 5
74234: PUSH
74235: LD_EXP 44
74239: PUSH
74240: LD_VAR 0 2
74244: ARRAY
74245: PPUSH
74246: LD_VAR 0 4
74250: PPUSH
74251: CALL 61784 0 2
74255: ST_TO_ADDR
// if not tmp2 then
74256: LD_VAR 0 5
74260: NOT
74261: IFFALSE 74265
// continue ;
74263: GO 73930
// tw := tmp2 [ 1 ] ;
74265: LD_ADDR_VAR 0 7
74269: PUSH
74270: LD_VAR 0 5
74274: PUSH
74275: LD_INT 1
74277: ARRAY
74278: ST_TO_ADDR
// weapon := tmp2 [ 2 ] ;
74279: LD_ADDR_VAR 0 9
74283: PUSH
74284: LD_VAR 0 5
74288: PUSH
74289: LD_INT 2
74291: ARRAY
74292: ST_TO_ADDR
// end ; if not weapon then
74293: LD_VAR 0 9
74297: NOT
74298: IFFALSE 74302
// continue ;
74300: GO 73930
// ComPlaceWeapon ( tw , weapon ) ;
74302: LD_VAR 0 7
74306: PPUSH
74307: LD_VAR 0 9
74311: PPUSH
74312: CALL_OW 148
// end ;
74316: GO 73930
74318: POP
74319: POP
// end ;
74320: LD_VAR 0 1
74324: RET
// export function MC_PlantMines ( ) ; var i , j , k , tmp , list ; begin
74325: LD_INT 0
74327: PPUSH
74328: PPUSH
74329: PPUSH
74330: PPUSH
74331: PPUSH
74332: PPUSH
// if not mc_bases then
74333: LD_EXP 36
74337: NOT
74338: IFFALSE 74342
// exit ;
74340: GO 75354
// for i = 1 to mc_bases do
74342: LD_ADDR_VAR 0 2
74346: PUSH
74347: DOUBLE
74348: LD_INT 1
74350: DEC
74351: ST_TO_ADDR
74352: LD_EXP 36
74356: PUSH
74357: FOR_TO
74358: IFFALSE 75352
// begin if not mc_mines [ i ] or mc_mines [ i ] = mc_miners [ i ] then
74360: LD_EXP 49
74364: PUSH
74365: LD_VAR 0 2
74369: ARRAY
74370: NOT
74371: PUSH
74372: LD_EXP 49
74376: PUSH
74377: LD_VAR 0 2
74381: ARRAY
74382: PUSH
74383: LD_EXP 50
74387: PUSH
74388: LD_VAR 0 2
74392: ARRAY
74393: EQUAL
74394: OR
74395: IFFALSE 74399
// continue ;
74397: GO 74357
// if mc_miners [ i ] then
74399: LD_EXP 50
74403: PUSH
74404: LD_VAR 0 2
74408: ARRAY
74409: IFFALSE 75039
// begin k := 1 ;
74411: LD_ADDR_VAR 0 4
74415: PUSH
74416: LD_INT 1
74418: ST_TO_ADDR
// for j = mc_miners [ i ] downto 1 do
74419: LD_ADDR_VAR 0 3
74423: PUSH
74424: DOUBLE
74425: LD_EXP 50
74429: PUSH
74430: LD_VAR 0 2
74434: ARRAY
74435: INC
74436: ST_TO_ADDR
74437: LD_INT 1
74439: PUSH
74440: FOR_DOWNTO
74441: IFFALSE 75037
// begin if IsDead ( mc_miners [ i ] [ j ] ) or GetClass ( mc_miners [ i ] [ j ] ) <> 1 then
74443: LD_EXP 50
74447: PUSH
74448: LD_VAR 0 2
74452: ARRAY
74453: PUSH
74454: LD_VAR 0 3
74458: ARRAY
74459: PPUSH
74460: CALL_OW 301
74464: PUSH
74465: LD_EXP 50
74469: PUSH
74470: LD_VAR 0 2
74474: ARRAY
74475: PUSH
74476: LD_VAR 0 3
74480: ARRAY
74481: PPUSH
74482: CALL_OW 257
74486: PUSH
74487: LD_INT 1
74489: NONEQUAL
74490: OR
74491: IFFALSE 74554
// begin tmp := mc_miners [ i ] diff mc_miners [ i ] [ j ] ;
74493: LD_ADDR_VAR 0 5
74497: PUSH
74498: LD_EXP 50
74502: PUSH
74503: LD_VAR 0 2
74507: ARRAY
74508: PUSH
74509: LD_EXP 50
74513: PUSH
74514: LD_VAR 0 2
74518: ARRAY
74519: PUSH
74520: LD_VAR 0 3
74524: ARRAY
74525: DIFF
74526: ST_TO_ADDR
// mc_miners := Replace ( mc_miners , i , tmp ) ;
74527: LD_ADDR_EXP 50
74531: PUSH
74532: LD_EXP 50
74536: PPUSH
74537: LD_VAR 0 2
74541: PPUSH
74542: LD_VAR 0 5
74546: PPUSH
74547: CALL_OW 1
74551: ST_TO_ADDR
// continue ;
74552: GO 74440
// end ; if WantPlant ( mc_miners [ i ] [ j ] ) and ( DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] or DangerAtRange ( mc_miners [ i ] [ j ] , 10 ) [ 4 ] ) then
74554: LD_EXP 50
74558: PUSH
74559: LD_VAR 0 2
74563: ARRAY
74564: PUSH
74565: LD_VAR 0 3
74569: ARRAY
74570: PPUSH
74571: CALL 26573 0 1
74575: PUSH
74576: LD_EXP 50
74580: PUSH
74581: LD_VAR 0 2
74585: ARRAY
74586: PUSH
74587: LD_VAR 0 3
74591: ARRAY
74592: PPUSH
74593: CALL_OW 255
74597: PPUSH
74598: LD_EXP 49
74602: PUSH
74603: LD_VAR 0 2
74607: ARRAY
74608: PUSH
74609: LD_VAR 0 4
74613: ARRAY
74614: PUSH
74615: LD_INT 1
74617: ARRAY
74618: PPUSH
74619: LD_EXP 49
74623: PUSH
74624: LD_VAR 0 2
74628: ARRAY
74629: PUSH
74630: LD_VAR 0 4
74634: ARRAY
74635: PUSH
74636: LD_INT 2
74638: ARRAY
74639: PPUSH
74640: LD_INT 15
74642: PPUSH
74643: CALL 27533 0 4
74647: PUSH
74648: LD_INT 4
74650: ARRAY
74651: PUSH
74652: LD_EXP 50
74656: PUSH
74657: LD_VAR 0 2
74661: ARRAY
74662: PUSH
74663: LD_VAR 0 3
74667: ARRAY
74668: PPUSH
74669: LD_INT 10
74671: PPUSH
74672: CALL 29230 0 2
74676: PUSH
74677: LD_INT 4
74679: ARRAY
74680: OR
74681: AND
74682: IFFALSE 74705
// ComStop ( mc_miners [ i ] [ j ] ) ;
74684: LD_EXP 50
74688: PUSH
74689: LD_VAR 0 2
74693: ARRAY
74694: PUSH
74695: LD_VAR 0 3
74699: ARRAY
74700: PPUSH
74701: CALL_OW 141
// if GetClass ( mc_miners [ i ] [ j ] ) = 1 and not MineOfUnit ( mc_miners [ i ] [ j ] ) and DangerAtRangeXY ( GetSide ( mc_miners [ i ] [ j ] ) , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 15 ) [ 4 ] = 0 and not HasTask ( mc_miners [ i ] [ j ] ) then
74705: LD_EXP 50
74709: PUSH
74710: LD_VAR 0 2
74714: ARRAY
74715: PUSH
74716: LD_VAR 0 3
74720: ARRAY
74721: PPUSH
74722: CALL_OW 257
74726: PUSH
74727: LD_INT 1
74729: EQUAL
74730: PUSH
74731: LD_EXP 50
74735: PUSH
74736: LD_VAR 0 2
74740: ARRAY
74741: PUSH
74742: LD_VAR 0 3
74746: ARRAY
74747: PPUSH
74748: CALL_OW 459
74752: NOT
74753: AND
74754: PUSH
74755: LD_EXP 50
74759: PUSH
74760: LD_VAR 0 2
74764: ARRAY
74765: PUSH
74766: LD_VAR 0 3
74770: ARRAY
74771: PPUSH
74772: CALL_OW 255
74776: PPUSH
74777: LD_EXP 49
74781: PUSH
74782: LD_VAR 0 2
74786: ARRAY
74787: PUSH
74788: LD_VAR 0 4
74792: ARRAY
74793: PUSH
74794: LD_INT 1
74796: ARRAY
74797: PPUSH
74798: LD_EXP 49
74802: PUSH
74803: LD_VAR 0 2
74807: ARRAY
74808: PUSH
74809: LD_VAR 0 4
74813: ARRAY
74814: PUSH
74815: LD_INT 2
74817: ARRAY
74818: PPUSH
74819: LD_INT 15
74821: PPUSH
74822: CALL 27533 0 4
74826: PUSH
74827: LD_INT 4
74829: ARRAY
74830: PUSH
74831: LD_INT 0
74833: EQUAL
74834: AND
74835: PUSH
74836: LD_EXP 50
74840: PUSH
74841: LD_VAR 0 2
74845: ARRAY
74846: PUSH
74847: LD_VAR 0 3
74851: ARRAY
74852: PPUSH
74853: CALL_OW 314
74857: NOT
74858: AND
74859: IFFALSE 75035
// begin if IsInUnit ( mc_miners [ i ] [ j ] ) then
74861: LD_EXP 50
74865: PUSH
74866: LD_VAR 0 2
74870: ARRAY
74871: PUSH
74872: LD_VAR 0 3
74876: ARRAY
74877: PPUSH
74878: CALL_OW 310
74882: IFFALSE 74905
// ComExitBuilding ( mc_miners [ i ] [ j ] ) ;
74884: LD_EXP 50
74888: PUSH
74889: LD_VAR 0 2
74893: ARRAY
74894: PUSH
74895: LD_VAR 0 3
74899: ARRAY
74900: PPUSH
74901: CALL_OW 122
// if not HasTask ( mc_miners [ i ] [ j ] ) then
74905: LD_EXP 50
74909: PUSH
74910: LD_VAR 0 2
74914: ARRAY
74915: PUSH
74916: LD_VAR 0 3
74920: ARRAY
74921: PPUSH
74922: CALL_OW 314
74926: NOT
74927: IFFALSE 74995
// AddComPlaceRemoteCharge ( mc_miners [ i ] [ j ] , mc_mines [ i ] [ k ] [ 1 ] , mc_mines [ i ] [ k ] [ 2 ] , 0 ) ;
74929: LD_EXP 50
74933: PUSH
74934: LD_VAR 0 2
74938: ARRAY
74939: PUSH
74940: LD_VAR 0 3
74944: ARRAY
74945: PPUSH
74946: LD_EXP 49
74950: PUSH
74951: LD_VAR 0 2
74955: ARRAY
74956: PUSH
74957: LD_VAR 0 4
74961: ARRAY
74962: PUSH
74963: LD_INT 1
74965: ARRAY
74966: PPUSH
74967: LD_EXP 49
74971: PUSH
74972: LD_VAR 0 2
74976: ARRAY
74977: PUSH
74978: LD_VAR 0 4
74982: ARRAY
74983: PUSH
74984: LD_INT 2
74986: ARRAY
74987: PPUSH
74988: LD_INT 0
74990: PPUSH
74991: CALL_OW 193
// k := k + 1 ;
74995: LD_ADDR_VAR 0 4
74999: PUSH
75000: LD_VAR 0 4
75004: PUSH
75005: LD_INT 1
75007: PLUS
75008: ST_TO_ADDR
// if k > mc_mines [ i ] then
75009: LD_VAR 0 4
75013: PUSH
75014: LD_EXP 49
75018: PUSH
75019: LD_VAR 0 2
75023: ARRAY
75024: GREATER
75025: IFFALSE 75035
// k := 1 ;
75027: LD_ADDR_VAR 0 4
75031: PUSH
75032: LD_INT 1
75034: ST_TO_ADDR
// end ; end ;
75035: GO 74440
75037: POP
75038: POP
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] , [ f_btype , b_bunker ] ] ) ;
75039: LD_ADDR_VAR 0 5
75043: PUSH
75044: LD_EXP 36
75048: PUSH
75049: LD_VAR 0 2
75053: ARRAY
75054: PPUSH
75055: LD_INT 2
75057: PUSH
75058: LD_INT 30
75060: PUSH
75061: LD_INT 4
75063: PUSH
75064: EMPTY
75065: LIST
75066: LIST
75067: PUSH
75068: LD_INT 30
75070: PUSH
75071: LD_INT 5
75073: PUSH
75074: EMPTY
75075: LIST
75076: LIST
75077: PUSH
75078: LD_INT 30
75080: PUSH
75081: LD_INT 32
75083: PUSH
75084: EMPTY
75085: LIST
75086: LIST
75087: PUSH
75088: EMPTY
75089: LIST
75090: LIST
75091: LIST
75092: LIST
75093: PPUSH
75094: CALL_OW 72
75098: ST_TO_ADDR
// if not tmp then
75099: LD_VAR 0 5
75103: NOT
75104: IFFALSE 75108
// continue ;
75106: GO 74357
// list := [ ] ;
75108: LD_ADDR_VAR 0 6
75112: PUSH
75113: EMPTY
75114: ST_TO_ADDR
// for j in tmp do
75115: LD_ADDR_VAR 0 3
75119: PUSH
75120: LD_VAR 0 5
75124: PUSH
75125: FOR_IN
75126: IFFALSE 75195
// begin for k in UnitsInside ( j ) do
75128: LD_ADDR_VAR 0 4
75132: PUSH
75133: LD_VAR 0 3
75137: PPUSH
75138: CALL_OW 313
75142: PUSH
75143: FOR_IN
75144: IFFALSE 75191
// if GetClass ( k ) = 1 and not MineOfUnit ( k ) then
75146: LD_VAR 0 4
75150: PPUSH
75151: CALL_OW 257
75155: PUSH
75156: LD_INT 1
75158: EQUAL
75159: PUSH
75160: LD_VAR 0 4
75164: PPUSH
75165: CALL_OW 459
75169: NOT
75170: AND
75171: IFFALSE 75189
// list := list ^ k ;
75173: LD_ADDR_VAR 0 6
75177: PUSH
75178: LD_VAR 0 6
75182: PUSH
75183: LD_VAR 0 4
75187: ADD
75188: ST_TO_ADDR
75189: GO 75143
75191: POP
75192: POP
// end ;
75193: GO 75125
75195: POP
75196: POP
// list := list diff mc_miners [ i ] ;
75197: LD_ADDR_VAR 0 6
75201: PUSH
75202: LD_VAR 0 6
75206: PUSH
75207: LD_EXP 50
75211: PUSH
75212: LD_VAR 0 2
75216: ARRAY
75217: DIFF
75218: ST_TO_ADDR
// if not list then
75219: LD_VAR 0 6
75223: NOT
75224: IFFALSE 75228
// continue ;
75226: GO 74357
// k := mc_mines [ i ] - mc_miners [ i ] ;
75228: LD_ADDR_VAR 0 4
75232: PUSH
75233: LD_EXP 49
75237: PUSH
75238: LD_VAR 0 2
75242: ARRAY
75243: PUSH
75244: LD_EXP 50
75248: PUSH
75249: LD_VAR 0 2
75253: ARRAY
75254: MINUS
75255: ST_TO_ADDR
// if k > list then
75256: LD_VAR 0 4
75260: PUSH
75261: LD_VAR 0 6
75265: GREATER
75266: IFFALSE 75278
// k := list ;
75268: LD_ADDR_VAR 0 4
75272: PUSH
75273: LD_VAR 0 6
75277: ST_TO_ADDR
// for j = 1 to k do
75278: LD_ADDR_VAR 0 3
75282: PUSH
75283: DOUBLE
75284: LD_INT 1
75286: DEC
75287: ST_TO_ADDR
75288: LD_VAR 0 4
75292: PUSH
75293: FOR_TO
75294: IFFALSE 75348
// mc_miners := ReplaceIn ( mc_miners , [ i , mc_miners [ i ] + 1 ] , list [ j ] ) ;
75296: LD_ADDR_EXP 50
75300: PUSH
75301: LD_EXP 50
75305: PPUSH
75306: LD_VAR 0 2
75310: PUSH
75311: LD_EXP 50
75315: PUSH
75316: LD_VAR 0 2
75320: ARRAY
75321: PUSH
75322: LD_INT 1
75324: PLUS
75325: PUSH
75326: EMPTY
75327: LIST
75328: LIST
75329: PPUSH
75330: LD_VAR 0 6
75334: PUSH
75335: LD_VAR 0 3
75339: ARRAY
75340: PPUSH
75341: CALL 26637 0 3
75345: ST_TO_ADDR
75346: GO 75293
75348: POP
75349: POP
// end ;
75350: GO 74357
75352: POP
75353: POP
// end ;
75354: LD_VAR 0 1
75358: RET
// export function MC_CollectCrates ( ) ; var i , j , k , tmp , target , cargo , depot , fac , components ; begin
75359: LD_INT 0
75361: PPUSH
75362: PPUSH
75363: PPUSH
75364: PPUSH
75365: PPUSH
75366: PPUSH
75367: PPUSH
75368: PPUSH
75369: PPUSH
75370: PPUSH
// if not mc_bases then
75371: LD_EXP 36
75375: NOT
75376: IFFALSE 75380
// exit ;
75378: GO 77111
// for i = 1 to mc_bases do
75380: LD_ADDR_VAR 0 2
75384: PUSH
75385: DOUBLE
75386: LD_INT 1
75388: DEC
75389: ST_TO_ADDR
75390: LD_EXP 36
75394: PUSH
75395: FOR_TO
75396: IFFALSE 77109
// begin if not mc_bases [ i ] or mc_construct_list [ i ] then
75398: LD_EXP 36
75402: PUSH
75403: LD_VAR 0 2
75407: ARRAY
75408: NOT
75409: PUSH
75410: LD_EXP 43
75414: PUSH
75415: LD_VAR 0 2
75419: ARRAY
75420: OR
75421: IFFALSE 75425
// continue ;
75423: GO 75395
// if not mc_crates [ i ] and mc_crates_collector [ i ] then
75425: LD_EXP 52
75429: PUSH
75430: LD_VAR 0 2
75434: ARRAY
75435: NOT
75436: PUSH
75437: LD_EXP 53
75441: PUSH
75442: LD_VAR 0 2
75446: ARRAY
75447: AND
75448: IFFALSE 75486
// begin mc_crates_collector := Replace ( mc_crates_collector , i , [ ] ) ;
75450: LD_ADDR_EXP 53
75454: PUSH
75455: LD_EXP 53
75459: PPUSH
75460: LD_VAR 0 2
75464: PPUSH
75465: EMPTY
75466: PPUSH
75467: CALL_OW 1
75471: ST_TO_ADDR
// MC_Reset ( i , 107 ) ;
75472: LD_VAR 0 2
75476: PPUSH
75477: LD_INT 107
75479: PPUSH
75480: CALL 66575 0 2
// continue ;
75484: GO 75395
// end ; target := [ ] ;
75486: LD_ADDR_VAR 0 6
75490: PUSH
75491: EMPTY
75492: ST_TO_ADDR
// for j = mc_crates [ i ] downto 1 do
75493: LD_ADDR_VAR 0 3
75497: PUSH
75498: DOUBLE
75499: LD_EXP 52
75503: PUSH
75504: LD_VAR 0 2
75508: ARRAY
75509: INC
75510: ST_TO_ADDR
75511: LD_INT 1
75513: PUSH
75514: FOR_DOWNTO
75515: IFFALSE 75775
// begin if ValidHex ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) and GetResourceAmountXY ( mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] ) = 0 then
75517: LD_EXP 52
75521: PUSH
75522: LD_VAR 0 2
75526: ARRAY
75527: PUSH
75528: LD_VAR 0 3
75532: ARRAY
75533: PUSH
75534: LD_INT 2
75536: ARRAY
75537: PPUSH
75538: LD_EXP 52
75542: PUSH
75543: LD_VAR 0 2
75547: ARRAY
75548: PUSH
75549: LD_VAR 0 3
75553: ARRAY
75554: PUSH
75555: LD_INT 3
75557: ARRAY
75558: PPUSH
75559: CALL_OW 488
75563: PUSH
75564: LD_EXP 52
75568: PUSH
75569: LD_VAR 0 2
75573: ARRAY
75574: PUSH
75575: LD_VAR 0 3
75579: ARRAY
75580: PUSH
75581: LD_INT 2
75583: ARRAY
75584: PPUSH
75585: LD_EXP 52
75589: PUSH
75590: LD_VAR 0 2
75594: ARRAY
75595: PUSH
75596: LD_VAR 0 3
75600: ARRAY
75601: PUSH
75602: LD_INT 3
75604: ARRAY
75605: PPUSH
75606: CALL_OW 284
75610: PUSH
75611: LD_INT 0
75613: EQUAL
75614: AND
75615: IFFALSE 75670
// begin tmp := Delete ( mc_crates [ i ] , j ) ;
75617: LD_ADDR_VAR 0 5
75621: PUSH
75622: LD_EXP 52
75626: PUSH
75627: LD_VAR 0 2
75631: ARRAY
75632: PPUSH
75633: LD_VAR 0 3
75637: PPUSH
75638: CALL_OW 3
75642: ST_TO_ADDR
// mc_crates := Replace ( mc_crates , i , tmp ) ;
75643: LD_ADDR_EXP 52
75647: PUSH
75648: LD_EXP 52
75652: PPUSH
75653: LD_VAR 0 2
75657: PPUSH
75658: LD_VAR 0 5
75662: PPUSH
75663: CALL_OW 1
75667: ST_TO_ADDR
// continue ;
75668: GO 75514
// end ; if DangerAtRangeXY ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_crates [ i ] [ j ] [ 2 ] , mc_crates [ i ] [ j ] [ 3 ] , 30 ) [ 4 ] = 0 then
75670: LD_EXP 36
75674: PUSH
75675: LD_VAR 0 2
75679: ARRAY
75680: PUSH
75681: LD_INT 1
75683: ARRAY
75684: PPUSH
75685: CALL_OW 255
75689: PPUSH
75690: LD_EXP 52
75694: PUSH
75695: LD_VAR 0 2
75699: ARRAY
75700: PUSH
75701: LD_VAR 0 3
75705: ARRAY
75706: PUSH
75707: LD_INT 2
75709: ARRAY
75710: PPUSH
75711: LD_EXP 52
75715: PUSH
75716: LD_VAR 0 2
75720: ARRAY
75721: PUSH
75722: LD_VAR 0 3
75726: ARRAY
75727: PUSH
75728: LD_INT 3
75730: ARRAY
75731: PPUSH
75732: LD_INT 30
75734: PPUSH
75735: CALL 27533 0 4
75739: PUSH
75740: LD_INT 4
75742: ARRAY
75743: PUSH
75744: LD_INT 0
75746: EQUAL
75747: IFFALSE 75773
// begin target := mc_crates [ i ] [ j ] ;
75749: LD_ADDR_VAR 0 6
75753: PUSH
75754: LD_EXP 52
75758: PUSH
75759: LD_VAR 0 2
75763: ARRAY
75764: PUSH
75765: LD_VAR 0 3
75769: ARRAY
75770: ST_TO_ADDR
// break ;
75771: GO 75775
// end ; end ;
75773: GO 75514
75775: POP
75776: POP
// if not target then
75777: LD_VAR 0 6
75781: NOT
75782: IFFALSE 75786
// continue ;
75784: GO 75395
// cargo := UnitFilter ( mc_vehicles [ i ] , [ [ f_or , [ f_not , [ f_empty ] ] , [ f_linked ] , [ f_control , control_apeman ] , [ f_control , control_computer ] ] , [ f_or , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , us_cargo_bay ] ] ] ) ;
75786: LD_ADDR_VAR 0 7
75790: PUSH
75791: LD_EXP 55
75795: PUSH
75796: LD_VAR 0 2
75800: ARRAY
75801: PPUSH
75802: LD_INT 2
75804: PUSH
75805: LD_INT 3
75807: PUSH
75808: LD_INT 58
75810: PUSH
75811: EMPTY
75812: LIST
75813: PUSH
75814: EMPTY
75815: LIST
75816: LIST
75817: PUSH
75818: LD_INT 61
75820: PUSH
75821: EMPTY
75822: LIST
75823: PUSH
75824: LD_INT 33
75826: PUSH
75827: LD_INT 5
75829: PUSH
75830: EMPTY
75831: LIST
75832: LIST
75833: PUSH
75834: LD_INT 33
75836: PUSH
75837: LD_INT 3
75839: PUSH
75840: EMPTY
75841: LIST
75842: LIST
75843: PUSH
75844: EMPTY
75845: LIST
75846: LIST
75847: LIST
75848: LIST
75849: LIST
75850: PUSH
75851: LD_INT 2
75853: PUSH
75854: LD_INT 34
75856: PUSH
75857: LD_INT 32
75859: PUSH
75860: EMPTY
75861: LIST
75862: LIST
75863: PUSH
75864: LD_INT 34
75866: PUSH
75867: LD_INT 51
75869: PUSH
75870: EMPTY
75871: LIST
75872: LIST
75873: PUSH
75874: LD_INT 34
75876: PUSH
75877: LD_INT 12
75879: PUSH
75880: EMPTY
75881: LIST
75882: LIST
75883: PUSH
75884: EMPTY
75885: LIST
75886: LIST
75887: LIST
75888: LIST
75889: PUSH
75890: EMPTY
75891: LIST
75892: LIST
75893: PPUSH
75894: CALL_OW 72
75898: ST_TO_ADDR
// if not cargo then
75899: LD_VAR 0 7
75903: NOT
75904: IFFALSE 76547
// begin if mc_crates_collector [ i ] < 5 then
75906: LD_EXP 53
75910: PUSH
75911: LD_VAR 0 2
75915: ARRAY
75916: PUSH
75917: LD_INT 5
75919: LESS
75920: IFFALSE 76286
// begin if mc_ape [ i ] then
75922: LD_EXP 65
75926: PUSH
75927: LD_VAR 0 2
75931: ARRAY
75932: IFFALSE 75979
// tmp := UnitFilter ( mc_ape [ i ] , [ [ f_class , 16 ] , [ f_lives , 750 ] ] ) ;
75934: LD_ADDR_VAR 0 5
75938: PUSH
75939: LD_EXP 65
75943: PUSH
75944: LD_VAR 0 2
75948: ARRAY
75949: PPUSH
75950: LD_INT 25
75952: PUSH
75953: LD_INT 16
75955: PUSH
75956: EMPTY
75957: LIST
75958: LIST
75959: PUSH
75960: LD_INT 24
75962: PUSH
75963: LD_INT 750
75965: PUSH
75966: EMPTY
75967: LIST
75968: LIST
75969: PUSH
75970: EMPTY
75971: LIST
75972: LIST
75973: PPUSH
75974: CALL_OW 72
75978: ST_TO_ADDR
// if not tmp then
75979: LD_VAR 0 5
75983: NOT
75984: IFFALSE 76031
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) ;
75986: LD_ADDR_VAR 0 5
75990: PUSH
75991: LD_EXP 36
75995: PUSH
75996: LD_VAR 0 2
76000: ARRAY
76001: PPUSH
76002: LD_INT 25
76004: PUSH
76005: LD_INT 2
76007: PUSH
76008: EMPTY
76009: LIST
76010: LIST
76011: PUSH
76012: LD_INT 24
76014: PUSH
76015: LD_INT 750
76017: PUSH
76018: EMPTY
76019: LIST
76020: LIST
76021: PUSH
76022: EMPTY
76023: LIST
76024: LIST
76025: PPUSH
76026: CALL_OW 72
76030: ST_TO_ADDR
// if mc_ape [ i ] and UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) and tmp < 5 then
76031: LD_EXP 65
76035: PUSH
76036: LD_VAR 0 2
76040: ARRAY
76041: PUSH
76042: LD_EXP 36
76046: PUSH
76047: LD_VAR 0 2
76051: ARRAY
76052: PPUSH
76053: LD_INT 25
76055: PUSH
76056: LD_INT 2
76058: PUSH
76059: EMPTY
76060: LIST
76061: LIST
76062: PUSH
76063: LD_INT 24
76065: PUSH
76066: LD_INT 750
76068: PUSH
76069: EMPTY
76070: LIST
76071: LIST
76072: PUSH
76073: EMPTY
76074: LIST
76075: LIST
76076: PPUSH
76077: CALL_OW 72
76081: AND
76082: PUSH
76083: LD_VAR 0 5
76087: PUSH
76088: LD_INT 5
76090: LESS
76091: AND
76092: IFFALSE 76174
// begin for j in UnitFilter ( mc_bases [ i ] , [ [ f_class , 2 ] , [ f_lives , 750 ] ] ) do
76094: LD_ADDR_VAR 0 3
76098: PUSH
76099: LD_EXP 36
76103: PUSH
76104: LD_VAR 0 2
76108: ARRAY
76109: PPUSH
76110: LD_INT 25
76112: PUSH
76113: LD_INT 2
76115: PUSH
76116: EMPTY
76117: LIST
76118: LIST
76119: PUSH
76120: LD_INT 24
76122: PUSH
76123: LD_INT 750
76125: PUSH
76126: EMPTY
76127: LIST
76128: LIST
76129: PUSH
76130: EMPTY
76131: LIST
76132: LIST
76133: PPUSH
76134: CALL_OW 72
76138: PUSH
76139: FOR_IN
76140: IFFALSE 76172
// begin tmp := tmp union j ;
76142: LD_ADDR_VAR 0 5
76146: PUSH
76147: LD_VAR 0 5
76151: PUSH
76152: LD_VAR 0 3
76156: UNION
76157: ST_TO_ADDR
// if tmp >= 5 then
76158: LD_VAR 0 5
76162: PUSH
76163: LD_INT 5
76165: GREATEREQUAL
76166: IFFALSE 76170
// break ;
76168: GO 76172
// end ;
76170: GO 76139
76172: POP
76173: POP
// end ; if not tmp then
76174: LD_VAR 0 5
76178: NOT
76179: IFFALSE 76183
// continue ;
76181: GO 75395
// for j in tmp do
76183: LD_ADDR_VAR 0 3
76187: PUSH
76188: LD_VAR 0 5
76192: PUSH
76193: FOR_IN
76194: IFFALSE 76284
// if not GetTag ( j ) then
76196: LD_VAR 0 3
76200: PPUSH
76201: CALL_OW 110
76205: NOT
76206: IFFALSE 76282
// begin mc_crates_collector := ReplaceIn ( mc_crates_collector , [ i , mc_crates_collector [ i ] + 1 ] , j ) ;
76208: LD_ADDR_EXP 53
76212: PUSH
76213: LD_EXP 53
76217: PPUSH
76218: LD_VAR 0 2
76222: PUSH
76223: LD_EXP 53
76227: PUSH
76228: LD_VAR 0 2
76232: ARRAY
76233: PUSH
76234: LD_INT 1
76236: PLUS
76237: PUSH
76238: EMPTY
76239: LIST
76240: LIST
76241: PPUSH
76242: LD_VAR 0 3
76246: PPUSH
76247: CALL 26637 0 3
76251: ST_TO_ADDR
// SetTag ( j , 107 ) ;
76252: LD_VAR 0 3
76256: PPUSH
76257: LD_INT 107
76259: PPUSH
76260: CALL_OW 109
// if mc_crates_collector [ i ] >= 5 then
76264: LD_EXP 53
76268: PUSH
76269: LD_VAR 0 2
76273: ARRAY
76274: PUSH
76275: LD_INT 5
76277: GREATEREQUAL
76278: IFFALSE 76282
// break ;
76280: GO 76284
// end ;
76282: GO 76193
76284: POP
76285: POP
// end ; if mc_crates_collector [ i ] and target then
76286: LD_EXP 53
76290: PUSH
76291: LD_VAR 0 2
76295: ARRAY
76296: PUSH
76297: LD_VAR 0 6
76301: AND
76302: IFFALSE 76545
// begin if mc_crates_collector [ i ] < target [ 1 ] then
76304: LD_EXP 53
76308: PUSH
76309: LD_VAR 0 2
76313: ARRAY
76314: PUSH
76315: LD_VAR 0 6
76319: PUSH
76320: LD_INT 1
76322: ARRAY
76323: LESS
76324: IFFALSE 76344
// tmp := mc_crates_collector [ i ] else
76326: LD_ADDR_VAR 0 5
76330: PUSH
76331: LD_EXP 53
76335: PUSH
76336: LD_VAR 0 2
76340: ARRAY
76341: ST_TO_ADDR
76342: GO 76358
// tmp := target [ 1 ] ;
76344: LD_ADDR_VAR 0 5
76348: PUSH
76349: LD_VAR 0 6
76353: PUSH
76354: LD_INT 1
76356: ARRAY
76357: ST_TO_ADDR
// k := 0 ;
76358: LD_ADDR_VAR 0 4
76362: PUSH
76363: LD_INT 0
76365: ST_TO_ADDR
// for j in mc_crates_collector [ i ] do
76366: LD_ADDR_VAR 0 3
76370: PUSH
76371: LD_EXP 53
76375: PUSH
76376: LD_VAR 0 2
76380: ARRAY
76381: PUSH
76382: FOR_IN
76383: IFFALSE 76543
// begin k := k + 1 ;
76385: LD_ADDR_VAR 0 4
76389: PUSH
76390: LD_VAR 0 4
76394: PUSH
76395: LD_INT 1
76397: PLUS
76398: ST_TO_ADDR
// if k > tmp then
76399: LD_VAR 0 4
76403: PUSH
76404: LD_VAR 0 5
76408: GREATER
76409: IFFALSE 76413
// break ;
76411: GO 76543
// if not GetClass ( j ) in [ 2 , 16 ] then
76413: LD_VAR 0 3
76417: PPUSH
76418: CALL_OW 257
76422: PUSH
76423: LD_INT 2
76425: PUSH
76426: LD_INT 16
76428: PUSH
76429: EMPTY
76430: LIST
76431: LIST
76432: IN
76433: NOT
76434: IFFALSE 76487
// begin mc_crates_collector := Replace ( mc_crates_collector , i , mc_crates_collector [ i ] diff j ) ;
76436: LD_ADDR_EXP 53
76440: PUSH
76441: LD_EXP 53
76445: PPUSH
76446: LD_VAR 0 2
76450: PPUSH
76451: LD_EXP 53
76455: PUSH
76456: LD_VAR 0 2
76460: ARRAY
76461: PUSH
76462: LD_VAR 0 3
76466: DIFF
76467: PPUSH
76468: CALL_OW 1
76472: ST_TO_ADDR
// SetTag ( j , 0 ) ;
76473: LD_VAR 0 3
76477: PPUSH
76478: LD_INT 0
76480: PPUSH
76481: CALL_OW 109
// continue ;
76485: GO 76382
// end ; if IsInUnit ( j ) then
76487: LD_VAR 0 3
76491: PPUSH
76492: CALL_OW 310
76496: IFFALSE 76507
// ComExitBuilding ( j ) ;
76498: LD_VAR 0 3
76502: PPUSH
76503: CALL_OW 122
// wait ( 3 ) ;
76507: LD_INT 3
76509: PPUSH
76510: CALL_OW 67
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
76514: LD_VAR 0 3
76518: PPUSH
76519: LD_VAR 0 6
76523: PUSH
76524: LD_INT 2
76526: ARRAY
76527: PPUSH
76528: LD_VAR 0 6
76532: PUSH
76533: LD_INT 3
76535: ARRAY
76536: PPUSH
76537: CALL_OW 117
// end ;
76541: GO 76382
76543: POP
76544: POP
// end ; end else
76545: GO 77107
// begin for j in cargo do
76547: LD_ADDR_VAR 0 3
76551: PUSH
76552: LD_VAR 0 7
76556: PUSH
76557: FOR_IN
76558: IFFALSE 77105
// begin if GetTag ( j ) <> 0 then
76560: LD_VAR 0 3
76564: PPUSH
76565: CALL_OW 110
76569: PUSH
76570: LD_INT 0
76572: NONEQUAL
76573: IFFALSE 76577
// continue ;
76575: GO 76557
// if GetLives ( j ) < 1000 and not IsInArea ( j , mc_parking [ i ] ) then
76577: LD_VAR 0 3
76581: PPUSH
76582: CALL_OW 256
76586: PUSH
76587: LD_INT 1000
76589: LESS
76590: PUSH
76591: LD_VAR 0 3
76595: PPUSH
76596: LD_EXP 60
76600: PUSH
76601: LD_VAR 0 2
76605: ARRAY
76606: PPUSH
76607: CALL_OW 308
76611: NOT
76612: AND
76613: IFFALSE 76635
// ComMoveToArea ( j , mc_parking [ i ] ) ;
76615: LD_VAR 0 3
76619: PPUSH
76620: LD_EXP 60
76624: PUSH
76625: LD_VAR 0 2
76629: ARRAY
76630: PPUSH
76631: CALL_OW 113
// if GetLives ( j ) < 1000 and IsInArea ( j , mc_parking [ i ] ) then
76635: LD_VAR 0 3
76639: PPUSH
76640: CALL_OW 256
76644: PUSH
76645: LD_INT 1000
76647: LESS
76648: PUSH
76649: LD_VAR 0 3
76653: PPUSH
76654: LD_EXP 60
76658: PUSH
76659: LD_VAR 0 2
76663: ARRAY
76664: PPUSH
76665: CALL_OW 308
76669: AND
76670: IFFALSE 76674
// continue ;
76672: GO 76557
// if GetEngine ( j ) = engine_solar and GetFuel ( j ) < 15 then
76674: LD_VAR 0 3
76678: PPUSH
76679: CALL_OW 262
76683: PUSH
76684: LD_INT 2
76686: EQUAL
76687: PUSH
76688: LD_VAR 0 3
76692: PPUSH
76693: CALL_OW 261
76697: PUSH
76698: LD_INT 15
76700: LESS
76701: AND
76702: IFFALSE 76706
// continue ;
76704: GO 76557
// if GetEngine ( j ) = engine_combustion and GetFuel ( j ) < 10 then
76706: LD_VAR 0 3
76710: PPUSH
76711: CALL_OW 262
76715: PUSH
76716: LD_INT 1
76718: EQUAL
76719: PUSH
76720: LD_VAR 0 3
76724: PPUSH
76725: CALL_OW 261
76729: PUSH
76730: LD_INT 10
76732: LESS
76733: AND
76734: IFFALSE 77044
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
76736: LD_ADDR_VAR 0 8
76740: PUSH
76741: LD_EXP 36
76745: PUSH
76746: LD_VAR 0 2
76750: ARRAY
76751: PPUSH
76752: LD_INT 2
76754: PUSH
76755: LD_INT 30
76757: PUSH
76758: LD_INT 0
76760: PUSH
76761: EMPTY
76762: LIST
76763: LIST
76764: PUSH
76765: LD_INT 30
76767: PUSH
76768: LD_INT 1
76770: PUSH
76771: EMPTY
76772: LIST
76773: LIST
76774: PUSH
76775: EMPTY
76776: LIST
76777: LIST
76778: LIST
76779: PPUSH
76780: CALL_OW 72
76784: ST_TO_ADDR
// if not depot then
76785: LD_VAR 0 8
76789: NOT
76790: IFFALSE 76794
// continue ;
76792: GO 76557
// if GetDistUnits ( j , NearestUnitToUnit ( depot , j ) ) < 6 then
76794: LD_VAR 0 3
76798: PPUSH
76799: LD_VAR 0 8
76803: PPUSH
76804: LD_VAR 0 3
76808: PPUSH
76809: CALL_OW 74
76813: PPUSH
76814: CALL_OW 296
76818: PUSH
76819: LD_INT 6
76821: LESS
76822: IFFALSE 76838
// SetFuel ( j , 100 ) else
76824: LD_VAR 0 3
76828: PPUSH
76829: LD_INT 100
76831: PPUSH
76832: CALL_OW 240
76836: GO 77044
// if GetFuel ( j ) = 0 then
76838: LD_VAR 0 3
76842: PPUSH
76843: CALL_OW 261
76847: PUSH
76848: LD_INT 0
76850: EQUAL
76851: IFFALSE 77044
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff j ) ;
76853: LD_ADDR_EXP 55
76857: PUSH
76858: LD_EXP 55
76862: PPUSH
76863: LD_VAR 0 2
76867: PPUSH
76868: LD_EXP 55
76872: PUSH
76873: LD_VAR 0 2
76877: ARRAY
76878: PUSH
76879: LD_VAR 0 3
76883: DIFF
76884: PPUSH
76885: CALL_OW 1
76889: ST_TO_ADDR
// if GetControl ( j ) = control_manual then
76890: LD_VAR 0 3
76894: PPUSH
76895: CALL_OW 263
76899: PUSH
76900: LD_INT 1
76902: EQUAL
76903: IFFALSE 76919
// ComExitVehicle ( IsInUnit ( j ) ) ;
76905: LD_VAR 0 3
76909: PPUSH
76910: CALL_OW 310
76914: PPUSH
76915: CALL_OW 121
// if GetControl ( j ) = control_remote then
76919: LD_VAR 0 3
76923: PPUSH
76924: CALL_OW 263
76928: PUSH
76929: LD_INT 2
76931: EQUAL
76932: IFFALSE 76943
// ComUnlink ( j ) ;
76934: LD_VAR 0 3
76938: PPUSH
76939: CALL_OW 136
// fac := MC_GetBuilding ( i , b_factory ) ;
76943: LD_ADDR_VAR 0 9
76947: PUSH
76948: LD_VAR 0 2
76952: PPUSH
76953: LD_INT 3
76955: PPUSH
76956: CALL 86148 0 2
76960: ST_TO_ADDR
// if fac then
76961: LD_VAR 0 9
76965: IFFALSE 77042
// begin components := Produce ( fac , GetChassis ( j ) , GetEngine ( j ) , GetControl ( j ) , GetWeapon ( j ) ) ;
76967: LD_ADDR_VAR 0 10
76971: PUSH
76972: LD_VAR 0 9
76976: PPUSH
76977: LD_VAR 0 3
76981: PPUSH
76982: CALL_OW 265
76986: PPUSH
76987: LD_VAR 0 3
76991: PPUSH
76992: CALL_OW 262
76996: PPUSH
76997: LD_VAR 0 3
77001: PPUSH
77002: CALL_OW 263
77006: PPUSH
77007: LD_VAR 0 3
77011: PPUSH
77012: CALL_OW 264
77016: PPUSH
77017: CALL 24237 0 5
77021: ST_TO_ADDR
// if components then
77022: LD_VAR 0 10
77026: IFFALSE 77042
// MC_InsertProduceList ( i , components ) ;
77028: LD_VAR 0 2
77032: PPUSH
77033: LD_VAR 0 10
77037: PPUSH
77038: CALL 85776 0 2
// end ; continue ;
77042: GO 76557
// end ; end ; if GetCargo ( j , mat_cans ) < 100 and not HasTask ( j ) then
77044: LD_VAR 0 3
77048: PPUSH
77049: LD_INT 1
77051: PPUSH
77052: CALL_OW 289
77056: PUSH
77057: LD_INT 100
77059: LESS
77060: PUSH
77061: LD_VAR 0 3
77065: PPUSH
77066: CALL_OW 314
77070: NOT
77071: AND
77072: IFFALSE 77101
// ComCollect ( j , target [ 2 ] , target [ 3 ] ) ;
77074: LD_VAR 0 3
77078: PPUSH
77079: LD_VAR 0 6
77083: PUSH
77084: LD_INT 2
77086: ARRAY
77087: PPUSH
77088: LD_VAR 0 6
77092: PUSH
77093: LD_INT 3
77095: ARRAY
77096: PPUSH
77097: CALL_OW 117
// break ;
77101: GO 77105
// end ;
77103: GO 76557
77105: POP
77106: POP
// end ; end ;
77107: GO 75395
77109: POP
77110: POP
// end ;
77111: LD_VAR 0 1
77115: RET
// export function MC_LinkRemoteControl ( ) ; var i , j , tmp ; begin
77116: LD_INT 0
77118: PPUSH
77119: PPUSH
77120: PPUSH
77121: PPUSH
// if not mc_bases then
77122: LD_EXP 36
77126: NOT
77127: IFFALSE 77131
// exit ;
77129: GO 77292
// for i = 1 to mc_bases do
77131: LD_ADDR_VAR 0 2
77135: PUSH
77136: DOUBLE
77137: LD_INT 1
77139: DEC
77140: ST_TO_ADDR
77141: LD_EXP 36
77145: PUSH
77146: FOR_TO
77147: IFFALSE 77290
// begin tmp := UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) ;
77149: LD_ADDR_VAR 0 4
77153: PUSH
77154: LD_EXP 55
77158: PUSH
77159: LD_VAR 0 2
77163: ARRAY
77164: PUSH
77165: LD_EXP 58
77169: PUSH
77170: LD_VAR 0 2
77174: ARRAY
77175: UNION
77176: PPUSH
77177: LD_INT 33
77179: PUSH
77180: LD_INT 2
77182: PUSH
77183: EMPTY
77184: LIST
77185: LIST
77186: PPUSH
77187: CALL_OW 72
77191: ST_TO_ADDR
// if tmp then
77192: LD_VAR 0 4
77196: IFFALSE 77288
// for j in tmp do
77198: LD_ADDR_VAR 0 3
77202: PUSH
77203: LD_VAR 0 4
77207: PUSH
77208: FOR_IN
77209: IFFALSE 77286
// if not IsControledBy ( j ) and GetLives ( j ) >= 250 then
77211: LD_VAR 0 3
77215: PPUSH
77216: CALL_OW 312
77220: NOT
77221: PUSH
77222: LD_VAR 0 3
77226: PPUSH
77227: CALL_OW 256
77231: PUSH
77232: LD_INT 250
77234: GREATEREQUAL
77235: AND
77236: IFFALSE 77249
// Connect ( j ) else
77238: LD_VAR 0 3
77242: PPUSH
77243: CALL 29570 0 1
77247: GO 77284
// if GetLives ( j ) < 250 and IsControledBy ( j ) then
77249: LD_VAR 0 3
77253: PPUSH
77254: CALL_OW 256
77258: PUSH
77259: LD_INT 250
77261: LESS
77262: PUSH
77263: LD_VAR 0 3
77267: PPUSH
77268: CALL_OW 312
77272: AND
77273: IFFALSE 77284
// ComUnlink ( j ) ;
77275: LD_VAR 0 3
77279: PPUSH
77280: CALL_OW 136
77284: GO 77208
77286: POP
77287: POP
// end ;
77288: GO 77146
77290: POP
77291: POP
// end ;
77292: LD_VAR 0 1
77296: RET
// export function MC_ProduceVehicle ( ) ; var i , j , tmp , fac ; begin
77297: LD_INT 0
77299: PPUSH
77300: PPUSH
77301: PPUSH
77302: PPUSH
77303: PPUSH
// if not mc_bases then
77304: LD_EXP 36
77308: NOT
77309: IFFALSE 77313
// exit ;
77311: GO 77773
// for i = 1 to mc_bases do
77313: LD_ADDR_VAR 0 2
77317: PUSH
77318: DOUBLE
77319: LD_INT 1
77321: DEC
77322: ST_TO_ADDR
77323: LD_EXP 36
77327: PUSH
77328: FOR_TO
77329: IFFALSE 77771
// begin if not mc_produce [ i ] then
77331: LD_EXP 57
77335: PUSH
77336: LD_VAR 0 2
77340: ARRAY
77341: NOT
77342: IFFALSE 77346
// continue ;
77344: GO 77328
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
77346: LD_ADDR_VAR 0 5
77350: PUSH
77351: LD_EXP 36
77355: PUSH
77356: LD_VAR 0 2
77360: ARRAY
77361: PPUSH
77362: LD_INT 30
77364: PUSH
77365: LD_INT 3
77367: PUSH
77368: EMPTY
77369: LIST
77370: LIST
77371: PPUSH
77372: CALL_OW 72
77376: ST_TO_ADDR
// if not fac then
77377: LD_VAR 0 5
77381: NOT
77382: IFFALSE 77386
// continue ;
77384: GO 77328
// for j in fac do
77386: LD_ADDR_VAR 0 3
77390: PUSH
77391: LD_VAR 0 5
77395: PUSH
77396: FOR_IN
77397: IFFALSE 77767
// begin if BuildingStatus ( j ) <> bs_idle or DangerAtRange ( j , 15 ) [ 4 ] or UnitsInside ( j ) = 0 then
77399: LD_VAR 0 3
77403: PPUSH
77404: CALL_OW 461
77408: PUSH
77409: LD_INT 2
77411: NONEQUAL
77412: PUSH
77413: LD_VAR 0 3
77417: PPUSH
77418: LD_INT 15
77420: PPUSH
77421: CALL 29230 0 2
77425: PUSH
77426: LD_INT 4
77428: ARRAY
77429: OR
77430: PUSH
77431: LD_VAR 0 3
77435: PPUSH
77436: CALL_OW 313
77440: PUSH
77441: LD_INT 0
77443: EQUAL
77444: OR
77445: IFFALSE 77449
// continue ;
77447: GO 77396
// if CanBeConstructed ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) and VehicleCost ( j , [ mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ] ) then
77449: LD_VAR 0 3
77453: PPUSH
77454: LD_EXP 57
77458: PUSH
77459: LD_VAR 0 2
77463: ARRAY
77464: PUSH
77465: LD_INT 1
77467: ARRAY
77468: PUSH
77469: LD_INT 1
77471: ARRAY
77472: PPUSH
77473: LD_EXP 57
77477: PUSH
77478: LD_VAR 0 2
77482: ARRAY
77483: PUSH
77484: LD_INT 1
77486: ARRAY
77487: PUSH
77488: LD_INT 2
77490: ARRAY
77491: PPUSH
77492: LD_EXP 57
77496: PUSH
77497: LD_VAR 0 2
77501: ARRAY
77502: PUSH
77503: LD_INT 1
77505: ARRAY
77506: PUSH
77507: LD_INT 3
77509: ARRAY
77510: PPUSH
77511: LD_EXP 57
77515: PUSH
77516: LD_VAR 0 2
77520: ARRAY
77521: PUSH
77522: LD_INT 1
77524: ARRAY
77525: PUSH
77526: LD_INT 4
77528: ARRAY
77529: PPUSH
77530: CALL_OW 448
77534: PUSH
77535: LD_VAR 0 3
77539: PPUSH
77540: LD_EXP 57
77544: PUSH
77545: LD_VAR 0 2
77549: ARRAY
77550: PUSH
77551: LD_INT 1
77553: ARRAY
77554: PUSH
77555: LD_INT 1
77557: ARRAY
77558: PUSH
77559: LD_EXP 57
77563: PUSH
77564: LD_VAR 0 2
77568: ARRAY
77569: PUSH
77570: LD_INT 1
77572: ARRAY
77573: PUSH
77574: LD_INT 2
77576: ARRAY
77577: PUSH
77578: LD_EXP 57
77582: PUSH
77583: LD_VAR 0 2
77587: ARRAY
77588: PUSH
77589: LD_INT 1
77591: ARRAY
77592: PUSH
77593: LD_INT 3
77595: ARRAY
77596: PUSH
77597: LD_EXP 57
77601: PUSH
77602: LD_VAR 0 2
77606: ARRAY
77607: PUSH
77608: LD_INT 1
77610: ARRAY
77611: PUSH
77612: LD_INT 4
77614: ARRAY
77615: PUSH
77616: EMPTY
77617: LIST
77618: LIST
77619: LIST
77620: LIST
77621: PPUSH
77622: CALL 32901 0 2
77626: AND
77627: IFFALSE 77765
// begin AddComConstruct ( j , mc_produce [ i ] [ 1 ] [ 1 ] , mc_produce [ i ] [ 1 ] [ 2 ] , mc_produce [ i ] [ 1 ] [ 3 ] , mc_produce [ i ] [ 1 ] [ 4 ] ) ;
77629: LD_VAR 0 3
77633: PPUSH
77634: LD_EXP 57
77638: PUSH
77639: LD_VAR 0 2
77643: ARRAY
77644: PUSH
77645: LD_INT 1
77647: ARRAY
77648: PUSH
77649: LD_INT 1
77651: ARRAY
77652: PPUSH
77653: LD_EXP 57
77657: PUSH
77658: LD_VAR 0 2
77662: ARRAY
77663: PUSH
77664: LD_INT 1
77666: ARRAY
77667: PUSH
77668: LD_INT 2
77670: ARRAY
77671: PPUSH
77672: LD_EXP 57
77676: PUSH
77677: LD_VAR 0 2
77681: ARRAY
77682: PUSH
77683: LD_INT 1
77685: ARRAY
77686: PUSH
77687: LD_INT 3
77689: ARRAY
77690: PPUSH
77691: LD_EXP 57
77695: PUSH
77696: LD_VAR 0 2
77700: ARRAY
77701: PUSH
77702: LD_INT 1
77704: ARRAY
77705: PUSH
77706: LD_INT 4
77708: ARRAY
77709: PPUSH
77710: CALL_OW 185
// tmp := Delete ( mc_produce [ i ] , 1 ) ;
77714: LD_ADDR_VAR 0 4
77718: PUSH
77719: LD_EXP 57
77723: PUSH
77724: LD_VAR 0 2
77728: ARRAY
77729: PPUSH
77730: LD_INT 1
77732: PPUSH
77733: CALL_OW 3
77737: ST_TO_ADDR
// mc_produce := Replace ( mc_produce , i , tmp ) ;
77738: LD_ADDR_EXP 57
77742: PUSH
77743: LD_EXP 57
77747: PPUSH
77748: LD_VAR 0 2
77752: PPUSH
77753: LD_VAR 0 4
77757: PPUSH
77758: CALL_OW 1
77762: ST_TO_ADDR
// break ;
77763: GO 77767
// end ; end ;
77765: GO 77396
77767: POP
77768: POP
// end ;
77769: GO 77328
77771: POP
77772: POP
// end ;
77773: LD_VAR 0 1
77777: RET
// export function MC_SendAttack ( ) ; var i , tmp ; begin
77778: LD_INT 0
77780: PPUSH
77781: PPUSH
77782: PPUSH
// if not mc_bases then
77783: LD_EXP 36
77787: NOT
77788: IFFALSE 77792
// exit ;
77790: GO 77881
// for i = 1 to mc_bases do
77792: LD_ADDR_VAR 0 2
77796: PUSH
77797: DOUBLE
77798: LD_INT 1
77800: DEC
77801: ST_TO_ADDR
77802: LD_EXP 36
77806: PUSH
77807: FOR_TO
77808: IFFALSE 77879
// begin if mc_attack [ i ] then
77810: LD_EXP 56
77814: PUSH
77815: LD_VAR 0 2
77819: ARRAY
77820: IFFALSE 77877
// begin tmp := mc_attack [ i ] [ 1 ] ;
77822: LD_ADDR_VAR 0 3
77826: PUSH
77827: LD_EXP 56
77831: PUSH
77832: LD_VAR 0 2
77836: ARRAY
77837: PUSH
77838: LD_INT 1
77840: ARRAY
77841: ST_TO_ADDR
// mc_attack := Replace ( mc_attack , i , [ ] ) ;
77842: LD_ADDR_EXP 56
77846: PUSH
77847: LD_EXP 56
77851: PPUSH
77852: LD_VAR 0 2
77856: PPUSH
77857: EMPTY
77858: PPUSH
77859: CALL_OW 1
77863: ST_TO_ADDR
// Attack ( tmp ) ;
77864: LD_VAR 0 3
77868: PPUSH
77869: CALL 55090 0 1
// exit ;
77873: POP
77874: POP
77875: GO 77881
// end ; end ;
77877: GO 77807
77879: POP
77880: POP
// end ;
77881: LD_VAR 0 1
77885: RET
// export function MC_Defend ( ) ; var i , j , tmp , t , x , class ; begin
77886: LD_INT 0
77888: PPUSH
77889: PPUSH
77890: PPUSH
77891: PPUSH
77892: PPUSH
77893: PPUSH
77894: PPUSH
// if not mc_bases then
77895: LD_EXP 36
77899: NOT
77900: IFFALSE 77904
// exit ;
77902: GO 78508
// for i = 1 to mc_bases do
77904: LD_ADDR_VAR 0 2
77908: PUSH
77909: DOUBLE
77910: LD_INT 1
77912: DEC
77913: ST_TO_ADDR
77914: LD_EXP 36
77918: PUSH
77919: FOR_TO
77920: IFFALSE 78506
// begin if not mc_bases [ i ] then
77922: LD_EXP 36
77926: PUSH
77927: LD_VAR 0 2
77931: ARRAY
77932: NOT
77933: IFFALSE 77937
// continue ;
77935: GO 77919
// class := AllowSpecClass ( mc_bases [ i ] [ 1 ] ) ;
77937: LD_ADDR_VAR 0 7
77941: PUSH
77942: LD_EXP 36
77946: PUSH
77947: LD_VAR 0 2
77951: ARRAY
77952: PUSH
77953: LD_INT 1
77955: ARRAY
77956: PPUSH
77957: CALL 23541 0 1
77961: ST_TO_ADDR
// mc_scan := Replace ( mc_scan , i , ScanBase ( GetSide ( mc_bases [ i ] [ 1 ] ) , mc_scan_area [ i ] ) ) ;
77962: LD_ADDR_EXP 59
77966: PUSH
77967: LD_EXP 59
77971: PPUSH
77972: LD_VAR 0 2
77976: PPUSH
77977: LD_EXP 36
77981: PUSH
77982: LD_VAR 0 2
77986: ARRAY
77987: PUSH
77988: LD_INT 1
77990: ARRAY
77991: PPUSH
77992: CALL_OW 255
77996: PPUSH
77997: LD_EXP 61
78001: PUSH
78002: LD_VAR 0 2
78006: ARRAY
78007: PPUSH
78008: CALL 21501 0 2
78012: PPUSH
78013: CALL_OW 1
78017: ST_TO_ADDR
// if not mc_scan [ i ] then
78018: LD_EXP 59
78022: PUSH
78023: LD_VAR 0 2
78027: ARRAY
78028: NOT
78029: IFFALSE 78184
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
78031: LD_ADDR_VAR 0 4
78035: PUSH
78036: LD_EXP 36
78040: PUSH
78041: LD_VAR 0 2
78045: ARRAY
78046: PPUSH
78047: LD_INT 2
78049: PUSH
78050: LD_INT 25
78052: PUSH
78053: LD_INT 5
78055: PUSH
78056: EMPTY
78057: LIST
78058: LIST
78059: PUSH
78060: LD_INT 25
78062: PUSH
78063: LD_INT 8
78065: PUSH
78066: EMPTY
78067: LIST
78068: LIST
78069: PUSH
78070: LD_INT 25
78072: PUSH
78073: LD_INT 9
78075: PUSH
78076: EMPTY
78077: LIST
78078: LIST
78079: PUSH
78080: EMPTY
78081: LIST
78082: LIST
78083: LIST
78084: LIST
78085: PPUSH
78086: CALL_OW 72
78090: ST_TO_ADDR
// if not tmp then
78091: LD_VAR 0 4
78095: NOT
78096: IFFALSE 78100
// continue ;
78098: GO 77919
// for j in tmp do
78100: LD_ADDR_VAR 0 3
78104: PUSH
78105: LD_VAR 0 4
78109: PUSH
78110: FOR_IN
78111: IFFALSE 78182
// if GetBType ( IsInUnit ( j ) ) = b_barracks and GetClass ( j ) = 1 and not MineOfUnit ( j ) and class then
78113: LD_VAR 0 3
78117: PPUSH
78118: CALL_OW 310
78122: PPUSH
78123: CALL_OW 266
78127: PUSH
78128: LD_INT 5
78130: EQUAL
78131: PUSH
78132: LD_VAR 0 3
78136: PPUSH
78137: CALL_OW 257
78141: PUSH
78142: LD_INT 1
78144: EQUAL
78145: AND
78146: PUSH
78147: LD_VAR 0 3
78151: PPUSH
78152: CALL_OW 459
78156: NOT
78157: AND
78158: PUSH
78159: LD_VAR 0 7
78163: AND
78164: IFFALSE 78180
// ComChangeProfession ( j , class ) ;
78166: LD_VAR 0 3
78170: PPUSH
78171: LD_VAR 0 7
78175: PPUSH
78176: CALL_OW 123
78180: GO 78110
78182: POP
78183: POP
// end ; if mc_scan [ i ] and not mc_defender [ i ] and not UnitFilter ( mc_bases [ i ] , [ f_btype , b_bunker ] ) and not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) then
78184: LD_EXP 59
78188: PUSH
78189: LD_VAR 0 2
78193: ARRAY
78194: PUSH
78195: LD_EXP 58
78199: PUSH
78200: LD_VAR 0 2
78204: ARRAY
78205: NOT
78206: AND
78207: PUSH
78208: LD_EXP 36
78212: PUSH
78213: LD_VAR 0 2
78217: ARRAY
78218: PPUSH
78219: LD_INT 30
78221: PUSH
78222: LD_INT 32
78224: PUSH
78225: EMPTY
78226: LIST
78227: LIST
78228: PPUSH
78229: CALL_OW 72
78233: NOT
78234: AND
78235: PUSH
78236: LD_EXP 36
78240: PUSH
78241: LD_VAR 0 2
78245: ARRAY
78246: PPUSH
78247: LD_INT 2
78249: PUSH
78250: LD_INT 30
78252: PUSH
78253: LD_INT 4
78255: PUSH
78256: EMPTY
78257: LIST
78258: LIST
78259: PUSH
78260: LD_INT 30
78262: PUSH
78263: LD_INT 5
78265: PUSH
78266: EMPTY
78267: LIST
78268: LIST
78269: PUSH
78270: EMPTY
78271: LIST
78272: LIST
78273: LIST
78274: PPUSH
78275: CALL_OW 72
78279: NOT
78280: AND
78281: IFFALSE 78413
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_class , 1 ] , [ f_class , 5 ] , [ f_class , 8 ] , [ f_class , 9 ] ] ) ;
78283: LD_ADDR_VAR 0 4
78287: PUSH
78288: LD_EXP 36
78292: PUSH
78293: LD_VAR 0 2
78297: ARRAY
78298: PPUSH
78299: LD_INT 2
78301: PUSH
78302: LD_INT 25
78304: PUSH
78305: LD_INT 1
78307: PUSH
78308: EMPTY
78309: LIST
78310: LIST
78311: PUSH
78312: LD_INT 25
78314: PUSH
78315: LD_INT 5
78317: PUSH
78318: EMPTY
78319: LIST
78320: LIST
78321: PUSH
78322: LD_INT 25
78324: PUSH
78325: LD_INT 8
78327: PUSH
78328: EMPTY
78329: LIST
78330: LIST
78331: PUSH
78332: LD_INT 25
78334: PUSH
78335: LD_INT 9
78337: PUSH
78338: EMPTY
78339: LIST
78340: LIST
78341: PUSH
78342: EMPTY
78343: LIST
78344: LIST
78345: LIST
78346: LIST
78347: LIST
78348: PPUSH
78349: CALL_OW 72
78353: ST_TO_ADDR
// tmp := tmp diff FilterByTag ( tmp , 18 ) ;
78354: LD_ADDR_VAR 0 4
78358: PUSH
78359: LD_VAR 0 4
78363: PUSH
78364: LD_VAR 0 4
78368: PPUSH
78369: LD_INT 18
78371: PPUSH
78372: CALL 59873 0 2
78376: DIFF
78377: ST_TO_ADDR
// if tmp then
78378: LD_VAR 0 4
78382: IFFALSE 78413
// begin BasicDefend ( i , tmp , mc_scan_area [ i ] ) ;
78384: LD_VAR 0 2
78388: PPUSH
78389: LD_VAR 0 4
78393: PPUSH
78394: LD_EXP 61
78398: PUSH
78399: LD_VAR 0 2
78403: ARRAY
78404: PPUSH
78405: CALL 21536 0 3
// exit ;
78409: POP
78410: POP
78411: GO 78508
// end ; end ; if mc_scan [ i ] and mc_defender [ i ] then
78413: LD_EXP 59
78417: PUSH
78418: LD_VAR 0 2
78422: ARRAY
78423: PUSH
78424: LD_EXP 58
78428: PUSH
78429: LD_VAR 0 2
78433: ARRAY
78434: AND
78435: IFFALSE 78504
// begin tmp := mc_defender [ i ] ;
78437: LD_ADDR_VAR 0 4
78441: PUSH
78442: LD_EXP 58
78446: PUSH
78447: LD_VAR 0 2
78451: ARRAY
78452: ST_TO_ADDR
// mc_defender := Replace ( mc_defender , i , [ ] ) ;
78453: LD_ADDR_EXP 58
78457: PUSH
78458: LD_EXP 58
78462: PPUSH
78463: LD_VAR 0 2
78467: PPUSH
78468: EMPTY
78469: PPUSH
78470: CALL_OW 1
78474: ST_TO_ADDR
// Defend ( i , tmp , mc_scan [ i ] ) ;
78475: LD_VAR 0 2
78479: PPUSH
78480: LD_VAR 0 4
78484: PPUSH
78485: LD_EXP 59
78489: PUSH
78490: LD_VAR 0 2
78494: ARRAY
78495: PPUSH
78496: CALL 22034 0 3
// exit ;
78500: POP
78501: POP
78502: GO 78508
// end ; end ;
78504: GO 77919
78506: POP
78507: POP
// end ;
78508: LD_VAR 0 1
78512: RET
// export function MC_Research ( ) ; var i , j , side , t , tmp , x , sci , tmp2 , researching , idle_lab ; begin
78513: LD_INT 0
78515: PPUSH
78516: PPUSH
78517: PPUSH
78518: PPUSH
78519: PPUSH
78520: PPUSH
78521: PPUSH
78522: PPUSH
78523: PPUSH
78524: PPUSH
78525: PPUSH
// if not mc_bases then
78526: LD_EXP 36
78530: NOT
78531: IFFALSE 78535
// exit ;
78533: GO 79622
// for i = 1 to mc_bases do
78535: LD_ADDR_VAR 0 2
78539: PUSH
78540: DOUBLE
78541: LD_INT 1
78543: DEC
78544: ST_TO_ADDR
78545: LD_EXP 36
78549: PUSH
78550: FOR_TO
78551: IFFALSE 79620
// begin tmp := mc_lab [ i ] ;
78553: LD_ADDR_VAR 0 6
78557: PUSH
78558: LD_EXP 69
78562: PUSH
78563: LD_VAR 0 2
78567: ARRAY
78568: ST_TO_ADDR
// if not tmp then
78569: LD_VAR 0 6
78573: NOT
78574: IFFALSE 78578
// continue ;
78576: GO 78550
// idle_lab := 0 ;
78578: LD_ADDR_VAR 0 11
78582: PUSH
78583: LD_INT 0
78585: ST_TO_ADDR
// for j in tmp do
78586: LD_ADDR_VAR 0 3
78590: PUSH
78591: LD_VAR 0 6
78595: PUSH
78596: FOR_IN
78597: IFFALSE 79616
// begin researching := false ;
78599: LD_ADDR_VAR 0 10
78603: PUSH
78604: LD_INT 0
78606: ST_TO_ADDR
// side := GetSide ( j ) ;
78607: LD_ADDR_VAR 0 4
78611: PUSH
78612: LD_VAR 0 3
78616: PPUSH
78617: CALL_OW 255
78621: ST_TO_ADDR
// if not mc_tech [ side ] then
78622: LD_EXP 63
78626: PUSH
78627: LD_VAR 0 4
78631: ARRAY
78632: NOT
78633: IFFALSE 78637
// continue ;
78635: GO 78596
// if BuildingStatus ( j ) = bs_idle then
78637: LD_VAR 0 3
78641: PPUSH
78642: CALL_OW 461
78646: PUSH
78647: LD_INT 2
78649: EQUAL
78650: IFFALSE 78838
// begin if idle_lab and UnitsInside ( j ) < 6 then
78652: LD_VAR 0 11
78656: PUSH
78657: LD_VAR 0 3
78661: PPUSH
78662: CALL_OW 313
78666: PUSH
78667: LD_INT 6
78669: LESS
78670: AND
78671: IFFALSE 78742
// begin tmp2 := UnitsInside ( idle_lab ) ;
78673: LD_ADDR_VAR 0 9
78677: PUSH
78678: LD_VAR 0 11
78682: PPUSH
78683: CALL_OW 313
78687: ST_TO_ADDR
// if tmp2 then
78688: LD_VAR 0 9
78692: IFFALSE 78734
// for x in tmp2 do
78694: LD_ADDR_VAR 0 7
78698: PUSH
78699: LD_VAR 0 9
78703: PUSH
78704: FOR_IN
78705: IFFALSE 78732
// begin ComExitBuilding ( x ) ;
78707: LD_VAR 0 7
78711: PPUSH
78712: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
78716: LD_VAR 0 7
78720: PPUSH
78721: LD_VAR 0 3
78725: PPUSH
78726: CALL_OW 180
// end ;
78730: GO 78704
78732: POP
78733: POP
// idle_lab := 0 ;
78734: LD_ADDR_VAR 0 11
78738: PUSH
78739: LD_INT 0
78741: ST_TO_ADDR
// end ; for t in mc_tech [ side ] do
78742: LD_ADDR_VAR 0 5
78746: PUSH
78747: LD_EXP 63
78751: PUSH
78752: LD_VAR 0 4
78756: ARRAY
78757: PUSH
78758: FOR_IN
78759: IFFALSE 78819
// if CanBeResearched ( j , t ) and TechCanBeResearch ( side , t ) then
78761: LD_VAR 0 3
78765: PPUSH
78766: LD_VAR 0 5
78770: PPUSH
78771: CALL_OW 430
78775: PUSH
78776: LD_VAR 0 4
78780: PPUSH
78781: LD_VAR 0 5
78785: PPUSH
78786: CALL 20606 0 2
78790: AND
78791: IFFALSE 78817
// begin researching := true ;
78793: LD_ADDR_VAR 0 10
78797: PUSH
78798: LD_INT 1
78800: ST_TO_ADDR
// ComResearch ( j , t ) ;
78801: LD_VAR 0 3
78805: PPUSH
78806: LD_VAR 0 5
78810: PPUSH
78811: CALL_OW 124
// break ;
78815: GO 78819
// end ;
78817: GO 78758
78819: POP
78820: POP
// if not researching then
78821: LD_VAR 0 10
78825: NOT
78826: IFFALSE 78838
// idle_lab := j ;
78828: LD_ADDR_VAR 0 11
78832: PUSH
78833: LD_VAR 0 3
78837: ST_TO_ADDR
// end ; if BuildingStatus ( j ) = bs_need_ape then
78838: LD_VAR 0 3
78842: PPUSH
78843: CALL_OW 461
78847: PUSH
78848: LD_INT 10
78850: EQUAL
78851: IFFALSE 79439
// begin if not mc_ape [ i ] and not mc_ape_in_lab [ i ] and mc_tech [ side ] > 1 then
78853: LD_EXP 65
78857: PUSH
78858: LD_VAR 0 2
78862: ARRAY
78863: NOT
78864: PUSH
78865: LD_EXP 66
78869: PUSH
78870: LD_VAR 0 2
78874: ARRAY
78875: NOT
78876: AND
78877: PUSH
78878: LD_EXP 63
78882: PUSH
78883: LD_VAR 0 4
78887: ARRAY
78888: PUSH
78889: LD_INT 1
78891: GREATER
78892: AND
78893: IFFALSE 79024
// begin ComCancel ( j ) ;
78895: LD_VAR 0 3
78899: PPUSH
78900: CALL_OW 127
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] - 1 , mc_tech [ side ] , false ) ) ;
78904: LD_ADDR_EXP 63
78908: PUSH
78909: LD_EXP 63
78913: PPUSH
78914: LD_VAR 0 4
78918: PPUSH
78919: LD_EXP 63
78923: PUSH
78924: LD_VAR 0 4
78928: ARRAY
78929: PPUSH
78930: LD_EXP 63
78934: PUSH
78935: LD_VAR 0 4
78939: ARRAY
78940: PUSH
78941: LD_INT 1
78943: MINUS
78944: PPUSH
78945: LD_EXP 63
78949: PUSH
78950: LD_VAR 0 4
78954: ARRAY
78955: PPUSH
78956: LD_INT 0
78958: PPUSH
78959: CALL 26055 0 4
78963: PPUSH
78964: CALL_OW 1
78968: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , side , Reindex ( mc_tech [ side ] , mc_tech [ side ] , 1 , false ) ) ;
78969: LD_ADDR_EXP 63
78973: PUSH
78974: LD_EXP 63
78978: PPUSH
78979: LD_VAR 0 4
78983: PPUSH
78984: LD_EXP 63
78988: PUSH
78989: LD_VAR 0 4
78993: ARRAY
78994: PPUSH
78995: LD_EXP 63
78999: PUSH
79000: LD_VAR 0 4
79004: ARRAY
79005: PPUSH
79006: LD_INT 1
79008: PPUSH
79009: LD_INT 0
79011: PPUSH
79012: CALL 26055 0 4
79016: PPUSH
79017: CALL_OW 1
79021: ST_TO_ADDR
// continue ;
79022: GO 78596
// end ; if mc_ape [ i ] and not mc_ape_in_lab [ i ] then
79024: LD_EXP 65
79028: PUSH
79029: LD_VAR 0 2
79033: ARRAY
79034: PUSH
79035: LD_EXP 66
79039: PUSH
79040: LD_VAR 0 2
79044: ARRAY
79045: NOT
79046: AND
79047: IFFALSE 79174
// begin mc_ape_in_lab := ReplaceIn ( mc_ape_in_lab , [ i , mc_ape_in_lab [ i ] + 1 ] , mc_ape [ i ] [ 1 ] ) ;
79049: LD_ADDR_EXP 66
79053: PUSH
79054: LD_EXP 66
79058: PPUSH
79059: LD_VAR 0 2
79063: PUSH
79064: LD_EXP 66
79068: PUSH
79069: LD_VAR 0 2
79073: ARRAY
79074: PUSH
79075: LD_INT 1
79077: PLUS
79078: PUSH
79079: EMPTY
79080: LIST
79081: LIST
79082: PPUSH
79083: LD_EXP 65
79087: PUSH
79088: LD_VAR 0 2
79092: ARRAY
79093: PUSH
79094: LD_INT 1
79096: ARRAY
79097: PPUSH
79098: CALL 26637 0 3
79102: ST_TO_ADDR
// SetTag ( mc_ape [ i ] [ 1 ] , 112 ) ;
79103: LD_EXP 65
79107: PUSH
79108: LD_VAR 0 2
79112: ARRAY
79113: PUSH
79114: LD_INT 1
79116: ARRAY
79117: PPUSH
79118: LD_INT 112
79120: PPUSH
79121: CALL_OW 109
// tmp2 := Delete ( mc_ape [ i ] , 1 ) ;
79125: LD_ADDR_VAR 0 9
79129: PUSH
79130: LD_EXP 65
79134: PUSH
79135: LD_VAR 0 2
79139: ARRAY
79140: PPUSH
79141: LD_INT 1
79143: PPUSH
79144: CALL_OW 3
79148: ST_TO_ADDR
// mc_ape := Replace ( mc_ape , i , tmp2 ) ;
79149: LD_ADDR_EXP 65
79153: PUSH
79154: LD_EXP 65
79158: PPUSH
79159: LD_VAR 0 2
79163: PPUSH
79164: LD_VAR 0 9
79168: PPUSH
79169: CALL_OW 1
79173: ST_TO_ADDR
// end ; if mc_ape [ i ] and mc_ape_in_lab [ i ] and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and UnitsInside ( j ) = 6 then
79174: LD_EXP 65
79178: PUSH
79179: LD_VAR 0 2
79183: ARRAY
79184: PUSH
79185: LD_EXP 66
79189: PUSH
79190: LD_VAR 0 2
79194: ARRAY
79195: AND
79196: PUSH
79197: LD_EXP 66
79201: PUSH
79202: LD_VAR 0 2
79206: ARRAY
79207: PUSH
79208: LD_INT 1
79210: ARRAY
79211: PPUSH
79212: CALL_OW 310
79216: NOT
79217: AND
79218: PUSH
79219: LD_VAR 0 3
79223: PPUSH
79224: CALL_OW 313
79228: PUSH
79229: LD_INT 6
79231: EQUAL
79232: AND
79233: IFFALSE 79289
// begin tmp2 := UnitsInside ( j ) ;
79235: LD_ADDR_VAR 0 9
79239: PUSH
79240: LD_VAR 0 3
79244: PPUSH
79245: CALL_OW 313
79249: ST_TO_ADDR
// if tmp2 = 6 then
79250: LD_VAR 0 9
79254: PUSH
79255: LD_INT 6
79257: EQUAL
79258: IFFALSE 79289
// begin SetTag ( tmp2 [ 1 ] , 112 ) ;
79260: LD_VAR 0 9
79264: PUSH
79265: LD_INT 1
79267: ARRAY
79268: PPUSH
79269: LD_INT 112
79271: PPUSH
79272: CALL_OW 109
// ComExitBuilding ( tmp2 [ 1 ] ) ;
79276: LD_VAR 0 9
79280: PUSH
79281: LD_INT 1
79283: ARRAY
79284: PPUSH
79285: CALL_OW 122
// end ; end ; if mc_ape_in_lab [ i ] and not HasTask ( mc_ape_in_lab [ i ] [ 1 ] ) and not IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) then
79289: LD_EXP 66
79293: PUSH
79294: LD_VAR 0 2
79298: ARRAY
79299: PUSH
79300: LD_EXP 66
79304: PUSH
79305: LD_VAR 0 2
79309: ARRAY
79310: PUSH
79311: LD_INT 1
79313: ARRAY
79314: PPUSH
79315: CALL_OW 314
79319: NOT
79320: AND
79321: PUSH
79322: LD_EXP 66
79326: PUSH
79327: LD_VAR 0 2
79331: ARRAY
79332: PUSH
79333: LD_INT 1
79335: ARRAY
79336: PPUSH
79337: CALL_OW 310
79341: NOT
79342: AND
79343: IFFALSE 79369
// ComEnterUnit ( mc_ape_in_lab [ i ] [ 1 ] , j ) ;
79345: LD_EXP 66
79349: PUSH
79350: LD_VAR 0 2
79354: ARRAY
79355: PUSH
79356: LD_INT 1
79358: ARRAY
79359: PPUSH
79360: LD_VAR 0 3
79364: PPUSH
79365: CALL_OW 120
// if IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) and BuildingStatus ( IsInUnit ( mc_ape_in_lab [ i ] [ 1 ] ) ) <> bs_working then
79369: LD_EXP 66
79373: PUSH
79374: LD_VAR 0 2
79378: ARRAY
79379: PUSH
79380: LD_INT 1
79382: ARRAY
79383: PPUSH
79384: CALL_OW 310
79388: PUSH
79389: LD_EXP 66
79393: PUSH
79394: LD_VAR 0 2
79398: ARRAY
79399: PUSH
79400: LD_INT 1
79402: ARRAY
79403: PPUSH
79404: CALL_OW 310
79408: PPUSH
79409: CALL_OW 461
79413: PUSH
79414: LD_INT 3
79416: NONEQUAL
79417: AND
79418: IFFALSE 79439
// ComExitBuilding ( mc_ape_in_lab [ i ] [ 1 ] ) ;
79420: LD_EXP 66
79424: PUSH
79425: LD_VAR 0 2
79429: ARRAY
79430: PUSH
79431: LD_INT 1
79433: ARRAY
79434: PPUSH
79435: CALL_OW 122
// end ; if BuildingStatus ( j ) = bs_need_people and tmp > 1 then
79439: LD_VAR 0 3
79443: PPUSH
79444: CALL_OW 461
79448: PUSH
79449: LD_INT 6
79451: EQUAL
79452: PUSH
79453: LD_VAR 0 6
79457: PUSH
79458: LD_INT 1
79460: GREATER
79461: AND
79462: IFFALSE 79614
// begin sci := [ ] ;
79464: LD_ADDR_VAR 0 8
79468: PUSH
79469: EMPTY
79470: ST_TO_ADDR
// for x in ( tmp diff j ) do
79471: LD_ADDR_VAR 0 7
79475: PUSH
79476: LD_VAR 0 6
79480: PUSH
79481: LD_VAR 0 3
79485: DIFF
79486: PUSH
79487: FOR_IN
79488: IFFALSE 79540
// begin if sci = 6 then
79490: LD_VAR 0 8
79494: PUSH
79495: LD_INT 6
79497: EQUAL
79498: IFFALSE 79502
// break ;
79500: GO 79540
// if BuildingStatus ( x ) = bs_idle then
79502: LD_VAR 0 7
79506: PPUSH
79507: CALL_OW 461
79511: PUSH
79512: LD_INT 2
79514: EQUAL
79515: IFFALSE 79538
// sci := sci ^ UnitsInside ( x ) ;
79517: LD_ADDR_VAR 0 8
79521: PUSH
79522: LD_VAR 0 8
79526: PUSH
79527: LD_VAR 0 7
79531: PPUSH
79532: CALL_OW 313
79536: ADD
79537: ST_TO_ADDR
// end ;
79538: GO 79487
79540: POP
79541: POP
// if not sci then
79542: LD_VAR 0 8
79546: NOT
79547: IFFALSE 79551
// continue ;
79549: GO 78596
// for x in sci do
79551: LD_ADDR_VAR 0 7
79555: PUSH
79556: LD_VAR 0 8
79560: PUSH
79561: FOR_IN
79562: IFFALSE 79612
// if IsInUnit ( x ) and not HasTask ( x ) then
79564: LD_VAR 0 7
79568: PPUSH
79569: CALL_OW 310
79573: PUSH
79574: LD_VAR 0 7
79578: PPUSH
79579: CALL_OW 314
79583: NOT
79584: AND
79585: IFFALSE 79610
// begin ComExitBuilding ( x ) ;
79587: LD_VAR 0 7
79591: PPUSH
79592: CALL_OW 122
// AddComEnterUnit ( x , j ) ;
79596: LD_VAR 0 7
79600: PPUSH
79601: LD_VAR 0 3
79605: PPUSH
79606: CALL_OW 180
// end ;
79610: GO 79561
79612: POP
79613: POP
// end ; end ;
79614: GO 78596
79616: POP
79617: POP
// end ;
79618: GO 78550
79620: POP
79621: POP
// end ;
79622: LD_VAR 0 1
79626: RET
// export function MC_MinesTrigger ( ) ; var i ; begin
79627: LD_INT 0
79629: PPUSH
79630: PPUSH
// if not mc_bases then
79631: LD_EXP 36
79635: NOT
79636: IFFALSE 79640
// exit ;
79638: GO 79721
// for i = 1 to mc_bases do
79640: LD_ADDR_VAR 0 2
79644: PUSH
79645: DOUBLE
79646: LD_INT 1
79648: DEC
79649: ST_TO_ADDR
79650: LD_EXP 36
79654: PUSH
79655: FOR_TO
79656: IFFALSE 79719
// if mc_mines [ i ] and mc_miners [ i ] then
79658: LD_EXP 49
79662: PUSH
79663: LD_VAR 0 2
79667: ARRAY
79668: PUSH
79669: LD_EXP 50
79673: PUSH
79674: LD_VAR 0 2
79678: ARRAY
79679: AND
79680: IFFALSE 79717
// DetonateMines ( GetSide ( mc_miners [ i ] [ 1 ] ) , mc_mines [ i ] ) ;
79682: LD_EXP 50
79686: PUSH
79687: LD_VAR 0 2
79691: ARRAY
79692: PUSH
79693: LD_INT 1
79695: ARRAY
79696: PPUSH
79697: CALL_OW 255
79701: PPUSH
79702: LD_EXP 49
79706: PUSH
79707: LD_VAR 0 2
79711: ARRAY
79712: PPUSH
79713: CALL 23694 0 2
79717: GO 79655
79719: POP
79720: POP
// end ;
79721: LD_VAR 0 1
79725: RET
// export function MC_RepairVehicle ( ) ; var i , j , k , side , fac , vehs , tmp ; begin
79726: LD_INT 0
79728: PPUSH
79729: PPUSH
79730: PPUSH
79731: PPUSH
79732: PPUSH
79733: PPUSH
79734: PPUSH
79735: PPUSH
// if not mc_bases or not mc_parking then
79736: LD_EXP 36
79740: NOT
79741: PUSH
79742: LD_EXP 60
79746: NOT
79747: OR
79748: IFFALSE 79752
// exit ;
79750: GO 80464
// for i = 1 to mc_bases do
79752: LD_ADDR_VAR 0 2
79756: PUSH
79757: DOUBLE
79758: LD_INT 1
79760: DEC
79761: ST_TO_ADDR
79762: LD_EXP 36
79766: PUSH
79767: FOR_TO
79768: IFFALSE 80462
// begin if not mc_bases [ i ] or not mc_parking [ i ] then
79770: LD_EXP 36
79774: PUSH
79775: LD_VAR 0 2
79779: ARRAY
79780: NOT
79781: PUSH
79782: LD_EXP 60
79786: PUSH
79787: LD_VAR 0 2
79791: ARRAY
79792: NOT
79793: OR
79794: IFFALSE 79798
// continue ;
79796: GO 79767
// if mc_scan [ i ] then
79798: LD_EXP 59
79802: PUSH
79803: LD_VAR 0 2
79807: ARRAY
79808: IFFALSE 79834
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
79810: LD_ADDR_EXP 48
79814: PUSH
79815: LD_EXP 48
79819: PPUSH
79820: LD_VAR 0 2
79824: PPUSH
79825: EMPTY
79826: PPUSH
79827: CALL_OW 1
79831: ST_TO_ADDR
// continue ;
79832: GO 79767
// end ; side := GetSide ( mc_bases [ i ] [ 1 ] ) ;
79834: LD_ADDR_VAR 0 5
79838: PUSH
79839: LD_EXP 36
79843: PUSH
79844: LD_VAR 0 2
79848: ARRAY
79849: PUSH
79850: LD_INT 1
79852: ARRAY
79853: PPUSH
79854: CALL_OW 255
79858: ST_TO_ADDR
// fac := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
79859: LD_ADDR_VAR 0 6
79863: PUSH
79864: LD_EXP 36
79868: PUSH
79869: LD_VAR 0 2
79873: ARRAY
79874: PPUSH
79875: LD_INT 30
79877: PUSH
79878: LD_INT 3
79880: PUSH
79881: EMPTY
79882: LIST
79883: LIST
79884: PPUSH
79885: CALL_OW 72
79889: ST_TO_ADDR
// if not fac then
79890: LD_VAR 0 6
79894: NOT
79895: IFFALSE 79946
// fac := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
79897: LD_ADDR_VAR 0 6
79901: PUSH
79902: LD_EXP 36
79906: PUSH
79907: LD_VAR 0 2
79911: ARRAY
79912: PPUSH
79913: LD_INT 2
79915: PUSH
79916: LD_INT 30
79918: PUSH
79919: LD_INT 0
79921: PUSH
79922: EMPTY
79923: LIST
79924: LIST
79925: PUSH
79926: LD_INT 30
79928: PUSH
79929: LD_INT 1
79931: PUSH
79932: EMPTY
79933: LIST
79934: LIST
79935: PUSH
79936: EMPTY
79937: LIST
79938: LIST
79939: LIST
79940: PPUSH
79941: CALL_OW 72
79945: ST_TO_ADDR
// if not fac then
79946: LD_VAR 0 6
79950: NOT
79951: IFFALSE 79955
// continue ;
79953: GO 79767
// vehs := FilterUnitsInArea ( mc_parking [ i ] , [ [ f_side , side ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) union FilterAllUnits ( [ [ f_side , side ] , [ f_dist , fac [ 1 ] , 25 ] , [ f_type , unit_vehicle ] , [ f_not , [ f_lives , 1000 ] ] ] ) ;
79955: LD_ADDR_VAR 0 7
79959: PUSH
79960: LD_EXP 60
79964: PUSH
79965: LD_VAR 0 2
79969: ARRAY
79970: PPUSH
79971: LD_INT 22
79973: PUSH
79974: LD_VAR 0 5
79978: PUSH
79979: EMPTY
79980: LIST
79981: LIST
79982: PUSH
79983: LD_INT 21
79985: PUSH
79986: LD_INT 2
79988: PUSH
79989: EMPTY
79990: LIST
79991: LIST
79992: PUSH
79993: LD_INT 3
79995: PUSH
79996: LD_INT 24
79998: PUSH
79999: LD_INT 1000
80001: PUSH
80002: EMPTY
80003: LIST
80004: LIST
80005: PUSH
80006: EMPTY
80007: LIST
80008: LIST
80009: PUSH
80010: EMPTY
80011: LIST
80012: LIST
80013: LIST
80014: PPUSH
80015: CALL_OW 70
80019: PUSH
80020: LD_INT 22
80022: PUSH
80023: LD_VAR 0 5
80027: PUSH
80028: EMPTY
80029: LIST
80030: LIST
80031: PUSH
80032: LD_INT 91
80034: PUSH
80035: LD_VAR 0 6
80039: PUSH
80040: LD_INT 1
80042: ARRAY
80043: PUSH
80044: LD_INT 25
80046: PUSH
80047: EMPTY
80048: LIST
80049: LIST
80050: LIST
80051: PUSH
80052: LD_INT 21
80054: PUSH
80055: LD_INT 2
80057: PUSH
80058: EMPTY
80059: LIST
80060: LIST
80061: PUSH
80062: LD_INT 3
80064: PUSH
80065: LD_INT 24
80067: PUSH
80068: LD_INT 1000
80070: PUSH
80071: EMPTY
80072: LIST
80073: LIST
80074: PUSH
80075: EMPTY
80076: LIST
80077: LIST
80078: PUSH
80079: EMPTY
80080: LIST
80081: LIST
80082: LIST
80083: LIST
80084: PPUSH
80085: CALL_OW 69
80089: UNION
80090: ST_TO_ADDR
// if not vehs then
80091: LD_VAR 0 7
80095: NOT
80096: IFFALSE 80122
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , [ ] ) ;
80098: LD_ADDR_EXP 48
80102: PUSH
80103: LD_EXP 48
80107: PPUSH
80108: LD_VAR 0 2
80112: PPUSH
80113: EMPTY
80114: PPUSH
80115: CALL_OW 1
80119: ST_TO_ADDR
// continue ;
80120: GO 79767
// end ; tmp := UnitFilter ( mc_bases [ i ] , [ f_btype , b_factory ] ) ;
80122: LD_ADDR_VAR 0 8
80126: PUSH
80127: LD_EXP 36
80131: PUSH
80132: LD_VAR 0 2
80136: ARRAY
80137: PPUSH
80138: LD_INT 30
80140: PUSH
80141: LD_INT 3
80143: PUSH
80144: EMPTY
80145: LIST
80146: LIST
80147: PPUSH
80148: CALL_OW 72
80152: ST_TO_ADDR
// if tmp then
80153: LD_VAR 0 8
80157: IFFALSE 80260
// begin for j in tmp do
80159: LD_ADDR_VAR 0 3
80163: PUSH
80164: LD_VAR 0 8
80168: PUSH
80169: FOR_IN
80170: IFFALSE 80258
// for k in UnitsInside ( j ) do
80172: LD_ADDR_VAR 0 4
80176: PUSH
80177: LD_VAR 0 3
80181: PPUSH
80182: CALL_OW 313
80186: PUSH
80187: FOR_IN
80188: IFFALSE 80254
// if k then
80190: LD_VAR 0 4
80194: IFFALSE 80252
// if not k in mc_repair_vehicle [ i ] then
80196: LD_VAR 0 4
80200: PUSH
80201: LD_EXP 48
80205: PUSH
80206: LD_VAR 0 2
80210: ARRAY
80211: IN
80212: NOT
80213: IFFALSE 80252
// mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] union k ) ;
80215: LD_ADDR_EXP 48
80219: PUSH
80220: LD_EXP 48
80224: PPUSH
80225: LD_VAR 0 2
80229: PPUSH
80230: LD_EXP 48
80234: PUSH
80235: LD_VAR 0 2
80239: ARRAY
80240: PUSH
80241: LD_VAR 0 4
80245: UNION
80246: PPUSH
80247: CALL_OW 1
80251: ST_TO_ADDR
80252: GO 80187
80254: POP
80255: POP
80256: GO 80169
80258: POP
80259: POP
// end ; if not mc_repair_vehicle [ i ] then
80260: LD_EXP 48
80264: PUSH
80265: LD_VAR 0 2
80269: ARRAY
80270: NOT
80271: IFFALSE 80275
// continue ;
80273: GO 79767
// for j in mc_repair_vehicle [ i ] do
80275: LD_ADDR_VAR 0 3
80279: PUSH
80280: LD_EXP 48
80284: PUSH
80285: LD_VAR 0 2
80289: ARRAY
80290: PUSH
80291: FOR_IN
80292: IFFALSE 80458
// begin if GetClass ( j ) <> 3 then
80294: LD_VAR 0 3
80298: PPUSH
80299: CALL_OW 257
80303: PUSH
80304: LD_INT 3
80306: NONEQUAL
80307: IFFALSE 80348
// begin mc_repair_vehicle := Replace ( mc_repair_vehicle , i , mc_repair_vehicle [ i ] diff j ) ;
80309: LD_ADDR_EXP 48
80313: PUSH
80314: LD_EXP 48
80318: PPUSH
80319: LD_VAR 0 2
80323: PPUSH
80324: LD_EXP 48
80328: PUSH
80329: LD_VAR 0 2
80333: ARRAY
80334: PUSH
80335: LD_VAR 0 3
80339: DIFF
80340: PPUSH
80341: CALL_OW 1
80345: ST_TO_ADDR
// continue ;
80346: GO 80291
// end ; if not IsDrivenBy ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
80348: LD_VAR 0 3
80352: PPUSH
80353: CALL_OW 311
80357: NOT
80358: PUSH
80359: LD_VAR 0 3
80363: PUSH
80364: LD_EXP 39
80368: PUSH
80369: LD_VAR 0 2
80373: ARRAY
80374: PUSH
80375: LD_INT 1
80377: ARRAY
80378: IN
80379: NOT
80380: AND
80381: PUSH
80382: LD_VAR 0 3
80386: PUSH
80387: LD_EXP 39
80391: PUSH
80392: LD_VAR 0 2
80396: ARRAY
80397: PUSH
80398: LD_INT 2
80400: ARRAY
80401: IN
80402: NOT
80403: AND
80404: IFFALSE 80456
// begin if IsInUnit ( j ) then
80406: LD_VAR 0 3
80410: PPUSH
80411: CALL_OW 310
80415: IFFALSE 80426
// ComExitBuilding ( j ) ;
80417: LD_VAR 0 3
80421: PPUSH
80422: CALL_OW 122
// if not HasTask ( j ) then
80426: LD_VAR 0 3
80430: PPUSH
80431: CALL_OW 314
80435: NOT
80436: IFFALSE 80456
// AddComRepairVehicle ( j , vehs [ 1 ] ) ;
80438: LD_VAR 0 3
80442: PPUSH
80443: LD_VAR 0 7
80447: PUSH
80448: LD_INT 1
80450: ARRAY
80451: PPUSH
80452: CALL_OW 189
// end ; end ;
80456: GO 80291
80458: POP
80459: POP
// end ;
80460: GO 79767
80462: POP
80463: POP
// end ;
80464: LD_VAR 0 1
80468: RET
// export function MC_TameApe ( ) ; var i , j , x , y , ape , apes , tmp , dep , danger_at_area , side ; begin
80469: LD_INT 0
80471: PPUSH
80472: PPUSH
80473: PPUSH
80474: PPUSH
80475: PPUSH
80476: PPUSH
80477: PPUSH
80478: PPUSH
80479: PPUSH
80480: PPUSH
80481: PPUSH
// if not mc_bases then
80482: LD_EXP 36
80486: NOT
80487: IFFALSE 80491
// exit ;
80489: GO 81293
// for i = 1 to mc_bases do
80491: LD_ADDR_VAR 0 2
80495: PUSH
80496: DOUBLE
80497: LD_INT 1
80499: DEC
80500: ST_TO_ADDR
80501: LD_EXP 36
80505: PUSH
80506: FOR_TO
80507: IFFALSE 81291
// begin if not mc_can_tame [ i ] or mc_need_heal [ i ] [ 1 ] or mc_need_heal [ i ] [ 2 ] or not Researched ( mc_sides [ i ] , tech_apelang ) or mc_scan [ i ] then
80509: LD_EXP 64
80513: PUSH
80514: LD_VAR 0 2
80518: ARRAY
80519: NOT
80520: PUSH
80521: LD_EXP 39
80525: PUSH
80526: LD_VAR 0 2
80530: ARRAY
80531: PUSH
80532: LD_INT 1
80534: ARRAY
80535: OR
80536: PUSH
80537: LD_EXP 39
80541: PUSH
80542: LD_VAR 0 2
80546: ARRAY
80547: PUSH
80548: LD_INT 2
80550: ARRAY
80551: OR
80552: PUSH
80553: LD_EXP 62
80557: PUSH
80558: LD_VAR 0 2
80562: ARRAY
80563: PPUSH
80564: LD_INT 1
80566: PPUSH
80567: CALL_OW 325
80571: NOT
80572: OR
80573: PUSH
80574: LD_EXP 59
80578: PUSH
80579: LD_VAR 0 2
80583: ARRAY
80584: OR
80585: IFFALSE 80589
// continue ;
80587: GO 80506
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 4 ] , [ f_ok ] , [ f_not , [ f_hastask ] ] ] ) diff mc_healers [ i ] ;
80589: LD_ADDR_VAR 0 8
80593: PUSH
80594: LD_EXP 36
80598: PUSH
80599: LD_VAR 0 2
80603: ARRAY
80604: PPUSH
80605: LD_INT 25
80607: PUSH
80608: LD_INT 4
80610: PUSH
80611: EMPTY
80612: LIST
80613: LIST
80614: PUSH
80615: LD_INT 50
80617: PUSH
80618: EMPTY
80619: LIST
80620: PUSH
80621: LD_INT 3
80623: PUSH
80624: LD_INT 60
80626: PUSH
80627: EMPTY
80628: LIST
80629: PUSH
80630: EMPTY
80631: LIST
80632: LIST
80633: PUSH
80634: EMPTY
80635: LIST
80636: LIST
80637: LIST
80638: PPUSH
80639: CALL_OW 72
80643: PUSH
80644: LD_EXP 40
80648: PUSH
80649: LD_VAR 0 2
80653: ARRAY
80654: DIFF
80655: ST_TO_ADDR
// dep := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
80656: LD_ADDR_VAR 0 9
80660: PUSH
80661: LD_EXP 36
80665: PUSH
80666: LD_VAR 0 2
80670: ARRAY
80671: PPUSH
80672: LD_INT 2
80674: PUSH
80675: LD_INT 30
80677: PUSH
80678: LD_INT 0
80680: PUSH
80681: EMPTY
80682: LIST
80683: LIST
80684: PUSH
80685: LD_INT 30
80687: PUSH
80688: LD_INT 1
80690: PUSH
80691: EMPTY
80692: LIST
80693: LIST
80694: PUSH
80695: EMPTY
80696: LIST
80697: LIST
80698: LIST
80699: PPUSH
80700: CALL_OW 72
80704: ST_TO_ADDR
// if not tmp or not dep then
80705: LD_VAR 0 8
80709: NOT
80710: PUSH
80711: LD_VAR 0 9
80715: NOT
80716: OR
80717: IFFALSE 80721
// continue ;
80719: GO 80506
// side := GetSide ( tmp [ 1 ] ) ;
80721: LD_ADDR_VAR 0 11
80725: PUSH
80726: LD_VAR 0 8
80730: PUSH
80731: LD_INT 1
80733: ARRAY
80734: PPUSH
80735: CALL_OW 255
80739: ST_TO_ADDR
// dep := dep [ 1 ] ;
80740: LD_ADDR_VAR 0 9
80744: PUSH
80745: LD_VAR 0 9
80749: PUSH
80750: LD_INT 1
80752: ARRAY
80753: ST_TO_ADDR
// apes := FilterUnitsInArea ( mc_can_tame [ i ] , [ [ f_side , 0 ] , [ f_class , class_apeman ] ] ) union FilterAllUnits ( [ [ f_side , 0 ] , [ f_class , class_apeman ] , [ f_dist , dep , 20 ] ] ) ;
80754: LD_ADDR_VAR 0 7
80758: PUSH
80759: LD_EXP 64
80763: PUSH
80764: LD_VAR 0 2
80768: ARRAY
80769: PPUSH
80770: LD_INT 22
80772: PUSH
80773: LD_INT 0
80775: PUSH
80776: EMPTY
80777: LIST
80778: LIST
80779: PUSH
80780: LD_INT 25
80782: PUSH
80783: LD_INT 12
80785: PUSH
80786: EMPTY
80787: LIST
80788: LIST
80789: PUSH
80790: EMPTY
80791: LIST
80792: LIST
80793: PPUSH
80794: CALL_OW 70
80798: PUSH
80799: LD_INT 22
80801: PUSH
80802: LD_INT 0
80804: PUSH
80805: EMPTY
80806: LIST
80807: LIST
80808: PUSH
80809: LD_INT 25
80811: PUSH
80812: LD_INT 12
80814: PUSH
80815: EMPTY
80816: LIST
80817: LIST
80818: PUSH
80819: LD_INT 91
80821: PUSH
80822: LD_VAR 0 9
80826: PUSH
80827: LD_INT 20
80829: PUSH
80830: EMPTY
80831: LIST
80832: LIST
80833: LIST
80834: PUSH
80835: EMPTY
80836: LIST
80837: LIST
80838: LIST
80839: PPUSH
80840: CALL_OW 69
80844: UNION
80845: ST_TO_ADDR
// danger_at_area := FilterUnitsInArea ( mc_can_tame [ i ] , [ f_enemy , side ] ) ;
80846: LD_ADDR_VAR 0 10
80850: PUSH
80851: LD_EXP 64
80855: PUSH
80856: LD_VAR 0 2
80860: ARRAY
80861: PPUSH
80862: LD_INT 81
80864: PUSH
80865: LD_VAR 0 11
80869: PUSH
80870: EMPTY
80871: LIST
80872: LIST
80873: PPUSH
80874: CALL_OW 70
80878: ST_TO_ADDR
// if not apes or danger_at_area then
80879: LD_VAR 0 7
80883: NOT
80884: PUSH
80885: LD_VAR 0 10
80889: OR
80890: IFFALSE 80940
// begin if mc_taming [ i ] then
80892: LD_EXP 67
80896: PUSH
80897: LD_VAR 0 2
80901: ARRAY
80902: IFFALSE 80938
// begin MC_Reset ( i , 121 ) ;
80904: LD_VAR 0 2
80908: PPUSH
80909: LD_INT 121
80911: PPUSH
80912: CALL 66575 0 2
// mc_taming := Replace ( mc_taming , i , [ ] ) ;
80916: LD_ADDR_EXP 67
80920: PUSH
80921: LD_EXP 67
80925: PPUSH
80926: LD_VAR 0 2
80930: PPUSH
80931: EMPTY
80932: PPUSH
80933: CALL_OW 1
80937: ST_TO_ADDR
// end ; continue ;
80938: GO 80506
// end ; for j in tmp do
80940: LD_ADDR_VAR 0 3
80944: PUSH
80945: LD_VAR 0 8
80949: PUSH
80950: FOR_IN
80951: IFFALSE 81287
// begin if not j in mc_taming [ i ] and mc_taming [ i ] < 3 then
80953: LD_VAR 0 3
80957: PUSH
80958: LD_EXP 67
80962: PUSH
80963: LD_VAR 0 2
80967: ARRAY
80968: IN
80969: NOT
80970: PUSH
80971: LD_EXP 67
80975: PUSH
80976: LD_VAR 0 2
80980: ARRAY
80981: PUSH
80982: LD_INT 3
80984: LESS
80985: AND
80986: IFFALSE 81044
// begin SetTag ( j , 121 ) ;
80988: LD_VAR 0 3
80992: PPUSH
80993: LD_INT 121
80995: PPUSH
80996: CALL_OW 109
// mc_taming := ReplaceIn ( mc_taming , [ i , mc_taming [ i ] + 1 ] , j ) ;
81000: LD_ADDR_EXP 67
81004: PUSH
81005: LD_EXP 67
81009: PPUSH
81010: LD_VAR 0 2
81014: PUSH
81015: LD_EXP 67
81019: PUSH
81020: LD_VAR 0 2
81024: ARRAY
81025: PUSH
81026: LD_INT 1
81028: PLUS
81029: PUSH
81030: EMPTY
81031: LIST
81032: LIST
81033: PPUSH
81034: LD_VAR 0 3
81038: PPUSH
81039: CALL 26637 0 3
81043: ST_TO_ADDR
// end ; if j in mc_taming [ i ] then
81044: LD_VAR 0 3
81048: PUSH
81049: LD_EXP 67
81053: PUSH
81054: LD_VAR 0 2
81058: ARRAY
81059: IN
81060: IFFALSE 81285
// begin if GetClass ( j ) <> 4 then
81062: LD_VAR 0 3
81066: PPUSH
81067: CALL_OW 257
81071: PUSH
81072: LD_INT 4
81074: NONEQUAL
81075: IFFALSE 81128
// begin mc_taming := Replace ( mc_taming , i , mc_taming [ i ] diff j ) ;
81077: LD_ADDR_EXP 67
81081: PUSH
81082: LD_EXP 67
81086: PPUSH
81087: LD_VAR 0 2
81091: PPUSH
81092: LD_EXP 67
81096: PUSH
81097: LD_VAR 0 2
81101: ARRAY
81102: PUSH
81103: LD_VAR 0 3
81107: DIFF
81108: PPUSH
81109: CALL_OW 1
81113: ST_TO_ADDR
// SetTag ( j , 0 ) ;
81114: LD_VAR 0 3
81118: PPUSH
81119: LD_INT 0
81121: PPUSH
81122: CALL_OW 109
// continue ;
81126: GO 80950
// end ; if IsInUnit ( j ) then
81128: LD_VAR 0 3
81132: PPUSH
81133: CALL_OW 310
81137: IFFALSE 81148
// ComExitBuilding ( j ) ;
81139: LD_VAR 0 3
81143: PPUSH
81144: CALL_OW 122
// ape := NearestUnitToUnit ( apes , j ) ;
81148: LD_ADDR_VAR 0 6
81152: PUSH
81153: LD_VAR 0 7
81157: PPUSH
81158: LD_VAR 0 3
81162: PPUSH
81163: CALL_OW 74
81167: ST_TO_ADDR
// if not ape then
81168: LD_VAR 0 6
81172: NOT
81173: IFFALSE 81177
// break ;
81175: GO 81287
// x := GetX ( ape ) ;
81177: LD_ADDR_VAR 0 4
81181: PUSH
81182: LD_VAR 0 6
81186: PPUSH
81187: CALL_OW 250
81191: ST_TO_ADDR
// y := GetY ( ape ) ;
81192: LD_ADDR_VAR 0 5
81196: PUSH
81197: LD_VAR 0 6
81201: PPUSH
81202: CALL_OW 251
81206: ST_TO_ADDR
// if not ValidHex ( x , y ) or DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
81207: LD_VAR 0 4
81211: PPUSH
81212: LD_VAR 0 5
81216: PPUSH
81217: CALL_OW 488
81221: NOT
81222: PUSH
81223: LD_VAR 0 11
81227: PPUSH
81228: LD_VAR 0 4
81232: PPUSH
81233: LD_VAR 0 5
81237: PPUSH
81238: LD_INT 20
81240: PPUSH
81241: CALL 27533 0 4
81245: PUSH
81246: LD_INT 4
81248: ARRAY
81249: OR
81250: IFFALSE 81254
// break ;
81252: GO 81287
// if not HasTask ( j ) then
81254: LD_VAR 0 3
81258: PPUSH
81259: CALL_OW 314
81263: NOT
81264: IFFALSE 81285
// ComTameXY ( j , x , y ) ;
81266: LD_VAR 0 3
81270: PPUSH
81271: LD_VAR 0 4
81275: PPUSH
81276: LD_VAR 0 5
81280: PPUSH
81281: CALL_OW 131
// end ; end ;
81285: GO 80950
81287: POP
81288: POP
// end ;
81289: GO 80506
81291: POP
81292: POP
// end ;
81293: LD_VAR 0 1
81297: RET
// export function MC_ChangeApeClass ( ) ; var i , j , tmp , side , depot , selected , barracks ; begin
81298: LD_INT 0
81300: PPUSH
81301: PPUSH
81302: PPUSH
81303: PPUSH
81304: PPUSH
81305: PPUSH
81306: PPUSH
81307: PPUSH
// if not mc_bases then
81308: LD_EXP 36
81312: NOT
81313: IFFALSE 81317
// exit ;
81315: GO 81943
// for i = 1 to mc_bases do
81317: LD_ADDR_VAR 0 2
81321: PUSH
81322: DOUBLE
81323: LD_INT 1
81325: DEC
81326: ST_TO_ADDR
81327: LD_EXP 36
81331: PUSH
81332: FOR_TO
81333: IFFALSE 81941
// begin if not mc_ape [ i ] or not UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) then
81335: LD_EXP 65
81339: PUSH
81340: LD_VAR 0 2
81344: ARRAY
81345: NOT
81346: PUSH
81347: LD_EXP 65
81351: PUSH
81352: LD_VAR 0 2
81356: ARRAY
81357: PPUSH
81358: LD_INT 25
81360: PUSH
81361: LD_INT 12
81363: PUSH
81364: EMPTY
81365: LIST
81366: LIST
81367: PPUSH
81368: CALL_OW 72
81372: NOT
81373: OR
81374: IFFALSE 81378
// continue ;
81376: GO 81332
// side := GetSide ( mc_ape [ i ] [ 1 ] ) ;
81378: LD_ADDR_VAR 0 5
81382: PUSH
81383: LD_EXP 65
81387: PUSH
81388: LD_VAR 0 2
81392: ARRAY
81393: PUSH
81394: LD_INT 1
81396: ARRAY
81397: PPUSH
81398: CALL_OW 255
81402: ST_TO_ADDR
// if Researched ( side , tech_apepsych ) then
81403: LD_VAR 0 5
81407: PPUSH
81408: LD_INT 2
81410: PPUSH
81411: CALL_OW 325
81415: IFFALSE 81668
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
81417: LD_ADDR_VAR 0 4
81421: PUSH
81422: LD_EXP 65
81426: PUSH
81427: LD_VAR 0 2
81431: ARRAY
81432: PPUSH
81433: LD_INT 25
81435: PUSH
81436: LD_INT 16
81438: PUSH
81439: EMPTY
81440: LIST
81441: LIST
81442: PPUSH
81443: CALL_OW 72
81447: ST_TO_ADDR
// if tmp < 6 then
81448: LD_VAR 0 4
81452: PUSH
81453: LD_INT 6
81455: LESS
81456: IFFALSE 81668
// begin depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
81458: LD_ADDR_VAR 0 6
81462: PUSH
81463: LD_EXP 36
81467: PUSH
81468: LD_VAR 0 2
81472: ARRAY
81473: PPUSH
81474: LD_INT 2
81476: PUSH
81477: LD_INT 30
81479: PUSH
81480: LD_INT 0
81482: PUSH
81483: EMPTY
81484: LIST
81485: LIST
81486: PUSH
81487: LD_INT 30
81489: PUSH
81490: LD_INT 1
81492: PUSH
81493: EMPTY
81494: LIST
81495: LIST
81496: PUSH
81497: EMPTY
81498: LIST
81499: LIST
81500: LIST
81501: PPUSH
81502: CALL_OW 72
81506: ST_TO_ADDR
// if depot then
81507: LD_VAR 0 6
81511: IFFALSE 81668
// begin selected := 0 ;
81513: LD_ADDR_VAR 0 7
81517: PUSH
81518: LD_INT 0
81520: ST_TO_ADDR
// for j in depot do
81521: LD_ADDR_VAR 0 3
81525: PUSH
81526: LD_VAR 0 6
81530: PUSH
81531: FOR_IN
81532: IFFALSE 81563
// begin if UnitsInside ( j ) < 6 then
81534: LD_VAR 0 3
81538: PPUSH
81539: CALL_OW 313
81543: PUSH
81544: LD_INT 6
81546: LESS
81547: IFFALSE 81561
// begin selected := j ;
81549: LD_ADDR_VAR 0 7
81553: PUSH
81554: LD_VAR 0 3
81558: ST_TO_ADDR
// break ;
81559: GO 81563
// end ; end ;
81561: GO 81531
81563: POP
81564: POP
// if selected then
81565: LD_VAR 0 7
81569: IFFALSE 81668
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
81571: LD_ADDR_VAR 0 3
81575: PUSH
81576: LD_EXP 65
81580: PUSH
81581: LD_VAR 0 2
81585: ARRAY
81586: PPUSH
81587: LD_INT 25
81589: PUSH
81590: LD_INT 12
81592: PUSH
81593: EMPTY
81594: LIST
81595: LIST
81596: PPUSH
81597: CALL_OW 72
81601: PUSH
81602: FOR_IN
81603: IFFALSE 81666
// if not HasTask ( j ) then
81605: LD_VAR 0 3
81609: PPUSH
81610: CALL_OW 314
81614: NOT
81615: IFFALSE 81664
// begin if not IsInUnit ( j ) then
81617: LD_VAR 0 3
81621: PPUSH
81622: CALL_OW 310
81626: NOT
81627: IFFALSE 81643
// ComEnterUnit ( j , selected ) ;
81629: LD_VAR 0 3
81633: PPUSH
81634: LD_VAR 0 7
81638: PPUSH
81639: CALL_OW 120
// AddComChangeProfession ( j , 16 ) ;
81643: LD_VAR 0 3
81647: PPUSH
81648: LD_INT 16
81650: PPUSH
81651: CALL_OW 183
// AddComExitBuilding ( j ) ;
81655: LD_VAR 0 3
81659: PPUSH
81660: CALL_OW 182
// end ;
81664: GO 81602
81666: POP
81667: POP
// end ; end ; end ; end ; if Researched ( side , tech_apeagres ) then
81668: LD_VAR 0 5
81672: PPUSH
81673: LD_INT 11
81675: PPUSH
81676: CALL_OW 325
81680: IFFALSE 81939
// begin tmp := UnitFilter ( mc_ape [ i ] , [ f_class , 16 ] ) ;
81682: LD_ADDR_VAR 0 4
81686: PUSH
81687: LD_EXP 65
81691: PUSH
81692: LD_VAR 0 2
81696: ARRAY
81697: PPUSH
81698: LD_INT 25
81700: PUSH
81701: LD_INT 16
81703: PUSH
81704: EMPTY
81705: LIST
81706: LIST
81707: PPUSH
81708: CALL_OW 72
81712: ST_TO_ADDR
// if tmp >= 6 or not Researched ( side , tech_apepsych ) then
81713: LD_VAR 0 4
81717: PUSH
81718: LD_INT 6
81720: GREATEREQUAL
81721: PUSH
81722: LD_VAR 0 5
81726: PPUSH
81727: LD_INT 2
81729: PPUSH
81730: CALL_OW 325
81734: NOT
81735: OR
81736: IFFALSE 81939
// begin barracks := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
81738: LD_ADDR_VAR 0 8
81742: PUSH
81743: LD_EXP 36
81747: PUSH
81748: LD_VAR 0 2
81752: ARRAY
81753: PPUSH
81754: LD_INT 2
81756: PUSH
81757: LD_INT 30
81759: PUSH
81760: LD_INT 4
81762: PUSH
81763: EMPTY
81764: LIST
81765: LIST
81766: PUSH
81767: LD_INT 30
81769: PUSH
81770: LD_INT 5
81772: PUSH
81773: EMPTY
81774: LIST
81775: LIST
81776: PUSH
81777: EMPTY
81778: LIST
81779: LIST
81780: LIST
81781: PPUSH
81782: CALL_OW 72
81786: ST_TO_ADDR
// if barracks then
81787: LD_VAR 0 8
81791: IFFALSE 81939
// begin selected := 0 ;
81793: LD_ADDR_VAR 0 7
81797: PUSH
81798: LD_INT 0
81800: ST_TO_ADDR
// for j in barracks do
81801: LD_ADDR_VAR 0 3
81805: PUSH
81806: LD_VAR 0 8
81810: PUSH
81811: FOR_IN
81812: IFFALSE 81843
// begin if UnitsInside ( j ) < 6 then
81814: LD_VAR 0 3
81818: PPUSH
81819: CALL_OW 313
81823: PUSH
81824: LD_INT 6
81826: LESS
81827: IFFALSE 81841
// begin selected := j ;
81829: LD_ADDR_VAR 0 7
81833: PUSH
81834: LD_VAR 0 3
81838: ST_TO_ADDR
// break ;
81839: GO 81843
// end ; end ;
81841: GO 81811
81843: POP
81844: POP
// if selected then
81845: LD_VAR 0 7
81849: IFFALSE 81939
// begin for j in UnitFilter ( mc_ape [ i ] , [ f_class , 12 ] ) do
81851: LD_ADDR_VAR 0 3
81855: PUSH
81856: LD_EXP 65
81860: PUSH
81861: LD_VAR 0 2
81865: ARRAY
81866: PPUSH
81867: LD_INT 25
81869: PUSH
81870: LD_INT 12
81872: PUSH
81873: EMPTY
81874: LIST
81875: LIST
81876: PPUSH
81877: CALL_OW 72
81881: PUSH
81882: FOR_IN
81883: IFFALSE 81937
// if not IsInUnit ( j ) and not HasTask ( j ) then
81885: LD_VAR 0 3
81889: PPUSH
81890: CALL_OW 310
81894: NOT
81895: PUSH
81896: LD_VAR 0 3
81900: PPUSH
81901: CALL_OW 314
81905: NOT
81906: AND
81907: IFFALSE 81935
// begin ComEnterUnit ( j , selected ) ;
81909: LD_VAR 0 3
81913: PPUSH
81914: LD_VAR 0 7
81918: PPUSH
81919: CALL_OW 120
// AddComChangeProfession ( j , 15 ) ;
81923: LD_VAR 0 3
81927: PPUSH
81928: LD_INT 15
81930: PPUSH
81931: CALL_OW 183
// end ;
81935: GO 81882
81937: POP
81938: POP
// end ; end ; end ; end ; end ;
81939: GO 81332
81941: POP
81942: POP
// end ;
81943: LD_VAR 0 1
81947: RET
// export function MC_Bazooka ( ) ; var i , j , tmp ; begin
81948: LD_INT 0
81950: PPUSH
81951: PPUSH
81952: PPUSH
81953: PPUSH
// if not mc_bases then
81954: LD_EXP 36
81958: NOT
81959: IFFALSE 81963
// exit ;
81961: GO 82141
// for i = 1 to mc_bases do
81963: LD_ADDR_VAR 0 2
81967: PUSH
81968: DOUBLE
81969: LD_INT 1
81971: DEC
81972: ST_TO_ADDR
81973: LD_EXP 36
81977: PUSH
81978: FOR_TO
81979: IFFALSE 82139
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , class_bazooker ] ) ;
81981: LD_ADDR_VAR 0 4
81985: PUSH
81986: LD_EXP 36
81990: PUSH
81991: LD_VAR 0 2
81995: ARRAY
81996: PPUSH
81997: LD_INT 25
81999: PUSH
82000: LD_INT 9
82002: PUSH
82003: EMPTY
82004: LIST
82005: LIST
82006: PPUSH
82007: CALL_OW 72
82011: ST_TO_ADDR
// if not tmp then
82012: LD_VAR 0 4
82016: NOT
82017: IFFALSE 82021
// continue ;
82019: GO 81978
// if not Researched ( mc_sides [ i ] , tech_spacanom ) and not Researched ( mc_sides [ i ] , tech_taurad ) then
82021: LD_EXP 62
82025: PUSH
82026: LD_VAR 0 2
82030: ARRAY
82031: PPUSH
82032: LD_INT 29
82034: PPUSH
82035: CALL_OW 325
82039: NOT
82040: PUSH
82041: LD_EXP 62
82045: PUSH
82046: LD_VAR 0 2
82050: ARRAY
82051: PPUSH
82052: LD_INT 28
82054: PPUSH
82055: CALL_OW 325
82059: NOT
82060: AND
82061: IFFALSE 82065
// continue ;
82063: GO 81978
// for j in tmp do
82065: LD_ADDR_VAR 0 3
82069: PUSH
82070: LD_VAR 0 4
82074: PUSH
82075: FOR_IN
82076: IFFALSE 82135
// if not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] then
82078: LD_VAR 0 3
82082: PUSH
82083: LD_EXP 39
82087: PUSH
82088: LD_VAR 0 2
82092: ARRAY
82093: PUSH
82094: LD_INT 1
82096: ARRAY
82097: IN
82098: NOT
82099: PUSH
82100: LD_VAR 0 3
82104: PUSH
82105: LD_EXP 39
82109: PUSH
82110: LD_VAR 0 2
82114: ARRAY
82115: PUSH
82116: LD_INT 2
82118: ARRAY
82119: IN
82120: NOT
82121: AND
82122: IFFALSE 82133
// ComSpaceTimeShoot ( j ) ;
82124: LD_VAR 0 3
82128: PPUSH
82129: CALL 20697 0 1
82133: GO 82075
82135: POP
82136: POP
// end ;
82137: GO 81978
82139: POP
82140: POP
// end ;
82141: LD_VAR 0 1
82145: RET
// export function MC_TeleportExit ( ) ; var i , j , x , y , save_point , tmp , teleports , sci ; begin
82146: LD_INT 0
82148: PPUSH
82149: PPUSH
82150: PPUSH
82151: PPUSH
82152: PPUSH
82153: PPUSH
82154: PPUSH
82155: PPUSH
82156: PPUSH
// if not mc_bases then
82157: LD_EXP 36
82161: NOT
82162: IFFALSE 82166
// exit ;
82164: GO 82788
// for i = 1 to mc_bases do
82166: LD_ADDR_VAR 0 2
82170: PUSH
82171: DOUBLE
82172: LD_INT 1
82174: DEC
82175: ST_TO_ADDR
82176: LD_EXP 36
82180: PUSH
82181: FOR_TO
82182: IFFALSE 82786
// begin if not mc_teleport_exit [ i ] or GetTech ( tech_targTeleport , mc_sides [ i ] ) <> state_researched then
82184: LD_EXP 71
82188: PUSH
82189: LD_VAR 0 2
82193: ARRAY
82194: NOT
82195: PUSH
82196: LD_INT 38
82198: PPUSH
82199: LD_EXP 62
82203: PUSH
82204: LD_VAR 0 2
82208: ARRAY
82209: PPUSH
82210: CALL_OW 321
82214: PUSH
82215: LD_INT 2
82217: NONEQUAL
82218: OR
82219: IFFALSE 82223
// continue ;
82221: GO 82181
// teleports := UnitFilter ( mc_bases [ i ] , [ f_btype , b_teleport ] ) ;
82223: LD_ADDR_VAR 0 8
82227: PUSH
82228: LD_EXP 36
82232: PUSH
82233: LD_VAR 0 2
82237: ARRAY
82238: PPUSH
82239: LD_INT 30
82241: PUSH
82242: LD_INT 34
82244: PUSH
82245: EMPTY
82246: LIST
82247: LIST
82248: PPUSH
82249: CALL_OW 72
82253: ST_TO_ADDR
// sci := FilterByTag ( UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) , 0 ) ;
82254: LD_ADDR_VAR 0 9
82258: PUSH
82259: LD_EXP 36
82263: PUSH
82264: LD_VAR 0 2
82268: ARRAY
82269: PPUSH
82270: LD_INT 25
82272: PUSH
82273: LD_INT 4
82275: PUSH
82276: EMPTY
82277: LIST
82278: LIST
82279: PPUSH
82280: CALL_OW 72
82284: PPUSH
82285: LD_INT 0
82287: PPUSH
82288: CALL 59873 0 2
82292: ST_TO_ADDR
// if not sci or not teleports or FilterByTag ( mc_bases [ i ] , 124 ) then
82293: LD_VAR 0 9
82297: NOT
82298: PUSH
82299: LD_VAR 0 8
82303: NOT
82304: OR
82305: PUSH
82306: LD_EXP 36
82310: PUSH
82311: LD_VAR 0 2
82315: ARRAY
82316: PPUSH
82317: LD_INT 124
82319: PPUSH
82320: CALL 59873 0 2
82324: OR
82325: IFFALSE 82329
// continue ;
82327: GO 82181
// if mc_teleport_exit_set [ i ] < mc_teleport_exit [ i ] and mc_teleport_exit_set [ i ] < teleports then
82329: LD_EXP 72
82333: PUSH
82334: LD_VAR 0 2
82338: ARRAY
82339: PUSH
82340: LD_EXP 71
82344: PUSH
82345: LD_VAR 0 2
82349: ARRAY
82350: LESS
82351: PUSH
82352: LD_EXP 72
82356: PUSH
82357: LD_VAR 0 2
82361: ARRAY
82362: PUSH
82363: LD_VAR 0 8
82367: LESS
82368: AND
82369: IFFALSE 82784
// begin tmp := sci [ 1 ] ;
82371: LD_ADDR_VAR 0 7
82375: PUSH
82376: LD_VAR 0 9
82380: PUSH
82381: LD_INT 1
82383: ARRAY
82384: ST_TO_ADDR
// SetTag ( tmp , 124 ) ;
82385: LD_VAR 0 7
82389: PPUSH
82390: LD_INT 124
82392: PPUSH
82393: CALL_OW 109
// for j = mc_teleport_exit [ i ] downto mc_teleport_exit [ i ] do
82397: LD_ADDR_VAR 0 3
82401: PUSH
82402: DOUBLE
82403: LD_EXP 71
82407: PUSH
82408: LD_VAR 0 2
82412: ARRAY
82413: INC
82414: ST_TO_ADDR
82415: LD_EXP 71
82419: PUSH
82420: LD_VAR 0 2
82424: ARRAY
82425: PUSH
82426: FOR_DOWNTO
82427: IFFALSE 82770
// begin if IsInUnit ( tmp ) then
82429: LD_VAR 0 7
82433: PPUSH
82434: CALL_OW 310
82438: IFFALSE 82449
// ComExitBuilding ( tmp ) ;
82440: LD_VAR 0 7
82444: PPUSH
82445: CALL_OW 122
// repeat wait ( 0 0$1 ) ;
82449: LD_INT 35
82451: PPUSH
82452: CALL_OW 67
// until not IsInUnit ( tmp ) and not HasTask ( tmp ) ;
82456: LD_VAR 0 7
82460: PPUSH
82461: CALL_OW 310
82465: NOT
82466: PUSH
82467: LD_VAR 0 7
82471: PPUSH
82472: CALL_OW 314
82476: NOT
82477: AND
82478: IFFALSE 82449
// save_point := [ GetX ( tmp ) , GetY ( tmp ) ] ;
82480: LD_ADDR_VAR 0 6
82484: PUSH
82485: LD_VAR 0 7
82489: PPUSH
82490: CALL_OW 250
82494: PUSH
82495: LD_VAR 0 7
82499: PPUSH
82500: CALL_OW 251
82504: PUSH
82505: EMPTY
82506: LIST
82507: LIST
82508: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
82509: LD_INT 35
82511: PPUSH
82512: CALL_OW 67
// x := mc_teleport_exit [ i ] [ j ] [ 1 ] ;
82516: LD_ADDR_VAR 0 4
82520: PUSH
82521: LD_EXP 71
82525: PUSH
82526: LD_VAR 0 2
82530: ARRAY
82531: PUSH
82532: LD_VAR 0 3
82536: ARRAY
82537: PUSH
82538: LD_INT 1
82540: ARRAY
82541: ST_TO_ADDR
// y := mc_teleport_exit [ i ] [ j ] [ 2 ] ;
82542: LD_ADDR_VAR 0 5
82546: PUSH
82547: LD_EXP 71
82551: PUSH
82552: LD_VAR 0 2
82556: ARRAY
82557: PUSH
82558: LD_VAR 0 3
82562: ARRAY
82563: PUSH
82564: LD_INT 2
82566: ARRAY
82567: ST_TO_ADDR
// if DangerAtRange ( tmp , 10 ) [ 4 ] then
82568: LD_VAR 0 7
82572: PPUSH
82573: LD_INT 10
82575: PPUSH
82576: CALL 29230 0 2
82580: PUSH
82581: LD_INT 4
82583: ARRAY
82584: IFFALSE 82622
// begin ComMoveXY ( tmp , save_point [ 1 ] , save_point [ 2 ] ) ;
82586: LD_VAR 0 7
82590: PPUSH
82591: LD_VAR 0 6
82595: PUSH
82596: LD_INT 1
82598: ARRAY
82599: PPUSH
82600: LD_VAR 0 6
82604: PUSH
82605: LD_INT 2
82607: ARRAY
82608: PPUSH
82609: CALL_OW 111
// wait ( 0 0$10 ) ;
82613: LD_INT 350
82615: PPUSH
82616: CALL_OW 67
// end else
82620: GO 82648
// begin ComMoveXY ( tmp , x , y ) ;
82622: LD_VAR 0 7
82626: PPUSH
82627: LD_VAR 0 4
82631: PPUSH
82632: LD_VAR 0 5
82636: PPUSH
82637: CALL_OW 111
// wait ( 0 0$3 ) ;
82641: LD_INT 105
82643: PPUSH
82644: CALL_OW 67
// end ; until IsAt ( tmp , x , y ) ;
82648: LD_VAR 0 7
82652: PPUSH
82653: LD_VAR 0 4
82657: PPUSH
82658: LD_VAR 0 5
82662: PPUSH
82663: CALL_OW 307
82667: IFFALSE 82509
// ComTeleportExit ( tmp , x , y , teleports [ j ] ) ;
82669: LD_VAR 0 7
82673: PPUSH
82674: LD_VAR 0 4
82678: PPUSH
82679: LD_VAR 0 5
82683: PPUSH
82684: LD_VAR 0 8
82688: PUSH
82689: LD_VAR 0 3
82693: ARRAY
82694: PPUSH
82695: CALL_OW 156
// repeat wait ( 0 0$1 ) ;
82699: LD_INT 35
82701: PPUSH
82702: CALL_OW 67
// until not HasTask ( tmp ) ;
82706: LD_VAR 0 7
82710: PPUSH
82711: CALL_OW 314
82715: NOT
82716: IFFALSE 82699
// mc_teleport_exit_set := ReplaceIn ( mc_teleport_exit_set , [ i , mc_teleport_exit_set [ i ] + 1 ] , teleports [ j ] ) ;
82718: LD_ADDR_EXP 72
82722: PUSH
82723: LD_EXP 72
82727: PPUSH
82728: LD_VAR 0 2
82732: PUSH
82733: LD_EXP 72
82737: PUSH
82738: LD_VAR 0 2
82742: ARRAY
82743: PUSH
82744: LD_INT 1
82746: PLUS
82747: PUSH
82748: EMPTY
82749: LIST
82750: LIST
82751: PPUSH
82752: LD_VAR 0 8
82756: PUSH
82757: LD_VAR 0 3
82761: ARRAY
82762: PPUSH
82763: CALL 26637 0 3
82767: ST_TO_ADDR
// end ;
82768: GO 82426
82770: POP
82771: POP
// MC_Reset ( i , 124 ) ;
82772: LD_VAR 0 2
82776: PPUSH
82777: LD_INT 124
82779: PPUSH
82780: CALL 66575 0 2
// end ; end ;
82784: GO 82181
82786: POP
82787: POP
// end ;
82788: LD_VAR 0 1
82792: RET
// export function MC_Deposits ( ) ; var i , tmp ; begin
82793: LD_INT 0
82795: PPUSH
82796: PPUSH
82797: PPUSH
// if not mc_bases then
82798: LD_EXP 36
82802: NOT
82803: IFFALSE 82807
// exit ;
82805: GO 83413
// for i = 1 to mc_bases do
82807: LD_ADDR_VAR 0 2
82811: PUSH
82812: DOUBLE
82813: LD_INT 1
82815: DEC
82816: ST_TO_ADDR
82817: LD_EXP 36
82821: PUSH
82822: FOR_TO
82823: IFFALSE 83411
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_class , 4 ] ) ;
82825: LD_ADDR_VAR 0 3
82829: PUSH
82830: LD_EXP 36
82834: PUSH
82835: LD_VAR 0 2
82839: ARRAY
82840: PPUSH
82841: LD_INT 25
82843: PUSH
82844: LD_INT 4
82846: PUSH
82847: EMPTY
82848: LIST
82849: LIST
82850: PPUSH
82851: CALL_OW 72
82855: ST_TO_ADDR
// if not tmp or not mc_deposits_xy [ i ] or not UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
82856: LD_VAR 0 3
82860: NOT
82861: PUSH
82862: LD_EXP 73
82866: PUSH
82867: LD_VAR 0 2
82871: ARRAY
82872: NOT
82873: OR
82874: PUSH
82875: LD_EXP 36
82879: PUSH
82880: LD_VAR 0 2
82884: ARRAY
82885: PPUSH
82886: LD_INT 2
82888: PUSH
82889: LD_INT 30
82891: PUSH
82892: LD_INT 0
82894: PUSH
82895: EMPTY
82896: LIST
82897: LIST
82898: PUSH
82899: LD_INT 30
82901: PUSH
82902: LD_INT 1
82904: PUSH
82905: EMPTY
82906: LIST
82907: LIST
82908: PUSH
82909: EMPTY
82910: LIST
82911: LIST
82912: LIST
82913: PPUSH
82914: CALL_OW 72
82918: NOT
82919: OR
82920: IFFALSE 82970
// begin if mc_deposits_finder [ i ] then
82922: LD_EXP 74
82926: PUSH
82927: LD_VAR 0 2
82931: ARRAY
82932: IFFALSE 82968
// begin MC_Reset ( i , 125 ) ;
82934: LD_VAR 0 2
82938: PPUSH
82939: LD_INT 125
82941: PPUSH
82942: CALL 66575 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
82946: LD_ADDR_EXP 74
82950: PUSH
82951: LD_EXP 74
82955: PPUSH
82956: LD_VAR 0 2
82960: PPUSH
82961: EMPTY
82962: PPUSH
82963: CALL_OW 1
82967: ST_TO_ADDR
// end ; continue ;
82968: GO 82822
// end ; if mc_deposits_xy [ i ] [ 1 ] [ 3 ] = 1 and GetTech ( tech_sibdet , mc_sides [ i ] ) <> state_researched then
82970: LD_EXP 73
82974: PUSH
82975: LD_VAR 0 2
82979: ARRAY
82980: PUSH
82981: LD_INT 1
82983: ARRAY
82984: PUSH
82985: LD_INT 3
82987: ARRAY
82988: PUSH
82989: LD_INT 1
82991: EQUAL
82992: PUSH
82993: LD_INT 20
82995: PPUSH
82996: LD_EXP 62
83000: PUSH
83001: LD_VAR 0 2
83005: ARRAY
83006: PPUSH
83007: CALL_OW 321
83011: PUSH
83012: LD_INT 2
83014: NONEQUAL
83015: AND
83016: IFFALSE 83066
// begin if mc_deposits_finder [ i ] then
83018: LD_EXP 74
83022: PUSH
83023: LD_VAR 0 2
83027: ARRAY
83028: IFFALSE 83064
// begin MC_Reset ( i , 125 ) ;
83030: LD_VAR 0 2
83034: PPUSH
83035: LD_INT 125
83037: PPUSH
83038: CALL 66575 0 2
// mc_deposits_finder := Replace ( mc_deposits_finder , i , [ ] ) ;
83042: LD_ADDR_EXP 74
83046: PUSH
83047: LD_EXP 74
83051: PPUSH
83052: LD_VAR 0 2
83056: PPUSH
83057: EMPTY
83058: PPUSH
83059: CALL_OW 1
83063: ST_TO_ADDR
// end ; continue ;
83064: GO 82822
// end ; if GetResourceVisibility ( mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] , mc_sides [ i ] ) then
83066: LD_EXP 73
83070: PUSH
83071: LD_VAR 0 2
83075: ARRAY
83076: PUSH
83077: LD_INT 1
83079: ARRAY
83080: PUSH
83081: LD_INT 1
83083: ARRAY
83084: PPUSH
83085: LD_EXP 73
83089: PUSH
83090: LD_VAR 0 2
83094: ARRAY
83095: PUSH
83096: LD_INT 1
83098: ARRAY
83099: PUSH
83100: LD_INT 2
83102: ARRAY
83103: PPUSH
83104: LD_EXP 62
83108: PUSH
83109: LD_VAR 0 2
83113: ARRAY
83114: PPUSH
83115: CALL_OW 440
83119: IFFALSE 83162
// mc_deposits_xy := Replace ( mc_deposits_xy , i , Delete ( mc_deposits_xy [ i ] , 1 ) ) else
83121: LD_ADDR_EXP 73
83125: PUSH
83126: LD_EXP 73
83130: PPUSH
83131: LD_VAR 0 2
83135: PPUSH
83136: LD_EXP 73
83140: PUSH
83141: LD_VAR 0 2
83145: ARRAY
83146: PPUSH
83147: LD_INT 1
83149: PPUSH
83150: CALL_OW 3
83154: PPUSH
83155: CALL_OW 1
83159: ST_TO_ADDR
83160: GO 83409
// begin if not mc_deposits_finder [ i ] then
83162: LD_EXP 74
83166: PUSH
83167: LD_VAR 0 2
83171: ARRAY
83172: NOT
83173: IFFALSE 83225
// begin mc_deposits_finder := Replace ( mc_deposits_finder , i , [ tmp [ 1 ] ] ) ;
83175: LD_ADDR_EXP 74
83179: PUSH
83180: LD_EXP 74
83184: PPUSH
83185: LD_VAR 0 2
83189: PPUSH
83190: LD_VAR 0 3
83194: PUSH
83195: LD_INT 1
83197: ARRAY
83198: PUSH
83199: EMPTY
83200: LIST
83201: PPUSH
83202: CALL_OW 1
83206: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 125 ) ;
83207: LD_VAR 0 3
83211: PUSH
83212: LD_INT 1
83214: ARRAY
83215: PPUSH
83216: LD_INT 125
83218: PPUSH
83219: CALL_OW 109
// end else
83223: GO 83409
// begin if IsInUnit ( mc_deposits_finder [ i ] [ 1 ] ) then
83225: LD_EXP 74
83229: PUSH
83230: LD_VAR 0 2
83234: ARRAY
83235: PUSH
83236: LD_INT 1
83238: ARRAY
83239: PPUSH
83240: CALL_OW 310
83244: IFFALSE 83267
// ComExitBuilding ( mc_deposits_finder [ i ] [ 1 ] ) else
83246: LD_EXP 74
83250: PUSH
83251: LD_VAR 0 2
83255: ARRAY
83256: PUSH
83257: LD_INT 1
83259: ARRAY
83260: PPUSH
83261: CALL_OW 122
83265: GO 83409
// if not HasTask ( mc_deposits_finder [ i ] [ 1 ] ) and GetDistUnitXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) > 6 then
83267: LD_EXP 74
83271: PUSH
83272: LD_VAR 0 2
83276: ARRAY
83277: PUSH
83278: LD_INT 1
83280: ARRAY
83281: PPUSH
83282: CALL_OW 314
83286: NOT
83287: PUSH
83288: LD_EXP 74
83292: PUSH
83293: LD_VAR 0 2
83297: ARRAY
83298: PUSH
83299: LD_INT 1
83301: ARRAY
83302: PPUSH
83303: LD_EXP 73
83307: PUSH
83308: LD_VAR 0 2
83312: ARRAY
83313: PUSH
83314: LD_INT 1
83316: ARRAY
83317: PUSH
83318: LD_INT 1
83320: ARRAY
83321: PPUSH
83322: LD_EXP 73
83326: PUSH
83327: LD_VAR 0 2
83331: ARRAY
83332: PUSH
83333: LD_INT 1
83335: ARRAY
83336: PUSH
83337: LD_INT 2
83339: ARRAY
83340: PPUSH
83341: CALL_OW 297
83345: PUSH
83346: LD_INT 6
83348: GREATER
83349: AND
83350: IFFALSE 83409
// ComMoveXY ( mc_deposits_finder [ i ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 1 ] , mc_deposits_xy [ i ] [ 1 ] [ 2 ] ) ;
83352: LD_EXP 74
83356: PUSH
83357: LD_VAR 0 2
83361: ARRAY
83362: PUSH
83363: LD_INT 1
83365: ARRAY
83366: PPUSH
83367: LD_EXP 73
83371: PUSH
83372: LD_VAR 0 2
83376: ARRAY
83377: PUSH
83378: LD_INT 1
83380: ARRAY
83381: PUSH
83382: LD_INT 1
83384: ARRAY
83385: PPUSH
83386: LD_EXP 73
83390: PUSH
83391: LD_VAR 0 2
83395: ARRAY
83396: PUSH
83397: LD_INT 1
83399: ARRAY
83400: PUSH
83401: LD_INT 2
83403: ARRAY
83404: PPUSH
83405: CALL_OW 111
// end ; end ; end ;
83409: GO 82822
83411: POP
83412: POP
// end ;
83413: LD_VAR 0 1
83417: RET
// export function MC_RemoteDriver ( ) ; var i , j , k , places , tmp , nation , ct , cts , mcts , x ; begin
83418: LD_INT 0
83420: PPUSH
83421: PPUSH
83422: PPUSH
83423: PPUSH
83424: PPUSH
83425: PPUSH
83426: PPUSH
83427: PPUSH
83428: PPUSH
83429: PPUSH
83430: PPUSH
// if not mc_bases then
83431: LD_EXP 36
83435: NOT
83436: IFFALSE 83440
// exit ;
83438: GO 84164
// for i = 1 to mc_bases do
83440: LD_ADDR_VAR 0 2
83444: PUSH
83445: DOUBLE
83446: LD_INT 1
83448: DEC
83449: ST_TO_ADDR
83450: LD_EXP 36
83454: PUSH
83455: FOR_TO
83456: IFFALSE 84162
// begin if not mc_bases [ i ] then
83458: LD_EXP 36
83462: PUSH
83463: LD_VAR 0 2
83467: ARRAY
83468: NOT
83469: IFFALSE 83473
// continue ;
83471: GO 83455
// nation := GetNation ( mc_bases [ i ] [ 1 ] ) ;
83473: LD_ADDR_VAR 0 7
83477: PUSH
83478: LD_EXP 36
83482: PUSH
83483: LD_VAR 0 2
83487: ARRAY
83488: PUSH
83489: LD_INT 1
83491: ARRAY
83492: PPUSH
83493: CALL_OW 248
83497: ST_TO_ADDR
// if nation = 3 or not UnitFilter ( mc_vehicles [ i ] union mc_defender [ i ] , [ f_control , control_remote ] ) then
83498: LD_VAR 0 7
83502: PUSH
83503: LD_INT 3
83505: EQUAL
83506: PUSH
83507: LD_EXP 55
83511: PUSH
83512: LD_VAR 0 2
83516: ARRAY
83517: PUSH
83518: LD_EXP 58
83522: PUSH
83523: LD_VAR 0 2
83527: ARRAY
83528: UNION
83529: PPUSH
83530: LD_INT 33
83532: PUSH
83533: LD_INT 2
83535: PUSH
83536: EMPTY
83537: LIST
83538: LIST
83539: PPUSH
83540: CALL_OW 72
83544: NOT
83545: OR
83546: IFFALSE 83550
// continue ;
83548: GO 83455
// cts := UnitFilter ( mc_bases [ i ] , [ f_btype , b_control_tower ] ) ;
83550: LD_ADDR_VAR 0 9
83554: PUSH
83555: LD_EXP 36
83559: PUSH
83560: LD_VAR 0 2
83564: ARRAY
83565: PPUSH
83566: LD_INT 30
83568: PUSH
83569: LD_INT 36
83571: PUSH
83572: EMPTY
83573: LIST
83574: LIST
83575: PPUSH
83576: CALL_OW 72
83580: ST_TO_ADDR
// mcts := UnitFilter ( mc_vehicles [ i ] , [ f_weapon , ar_control_tower ] ) ;
83581: LD_ADDR_VAR 0 10
83585: PUSH
83586: LD_EXP 55
83590: PUSH
83591: LD_VAR 0 2
83595: ARRAY
83596: PPUSH
83597: LD_INT 34
83599: PUSH
83600: LD_INT 31
83602: PUSH
83603: EMPTY
83604: LIST
83605: LIST
83606: PPUSH
83607: CALL_OW 72
83611: ST_TO_ADDR
// if not cts and not mcts then
83612: LD_VAR 0 9
83616: NOT
83617: PUSH
83618: LD_VAR 0 10
83622: NOT
83623: AND
83624: IFFALSE 83628
// continue ;
83626: GO 83455
// x := cts ;
83628: LD_ADDR_VAR 0 11
83632: PUSH
83633: LD_VAR 0 9
83637: ST_TO_ADDR
// if not x then
83638: LD_VAR 0 11
83642: NOT
83643: IFFALSE 83655
// x := mcts ;
83645: LD_ADDR_VAR 0 11
83649: PUSH
83650: LD_VAR 0 10
83654: ST_TO_ADDR
// if mc_remote_driver [ i ] then
83655: LD_EXP 76
83659: PUSH
83660: LD_VAR 0 2
83664: ARRAY
83665: IFFALSE 83934
// for j in mc_remote_driver [ i ] do
83667: LD_ADDR_VAR 0 3
83671: PUSH
83672: LD_EXP 76
83676: PUSH
83677: LD_VAR 0 2
83681: ARRAY
83682: PUSH
83683: FOR_IN
83684: IFFALSE 83932
// begin if GetClass ( j ) <> 3 then
83686: LD_VAR 0 3
83690: PPUSH
83691: CALL_OW 257
83695: PUSH
83696: LD_INT 3
83698: NONEQUAL
83699: IFFALSE 83752
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] diff j ) ;
83701: LD_ADDR_EXP 76
83705: PUSH
83706: LD_EXP 76
83710: PPUSH
83711: LD_VAR 0 2
83715: PPUSH
83716: LD_EXP 76
83720: PUSH
83721: LD_VAR 0 2
83725: ARRAY
83726: PUSH
83727: LD_VAR 0 3
83731: DIFF
83732: PPUSH
83733: CALL_OW 1
83737: ST_TO_ADDR
// SetTag ( j , 0 ) ;
83738: LD_VAR 0 3
83742: PPUSH
83743: LD_INT 0
83745: PPUSH
83746: CALL_OW 109
// continue ;
83750: GO 83683
// end ; if not IsInUnit ( j ) or ( GetBType ( IsInUnit ( j ) ) <> b_control_tower and not IsDriver ( j ) ) then
83752: LD_VAR 0 3
83756: PPUSH
83757: CALL_OW 310
83761: NOT
83762: PUSH
83763: LD_VAR 0 3
83767: PPUSH
83768: CALL_OW 310
83772: PPUSH
83773: CALL_OW 266
83777: PUSH
83778: LD_INT 36
83780: NONEQUAL
83781: PUSH
83782: LD_VAR 0 3
83786: PPUSH
83787: CALL 59961 0 1
83791: NOT
83792: AND
83793: OR
83794: IFFALSE 83930
// begin if IsInUnit ( j ) then
83796: LD_VAR 0 3
83800: PPUSH
83801: CALL_OW 310
83805: IFFALSE 83816
// ComExitBuilding ( j ) ;
83807: LD_VAR 0 3
83811: PPUSH
83812: CALL_OW 122
// ct := 0 ;
83816: LD_ADDR_VAR 0 8
83820: PUSH
83821: LD_INT 0
83823: ST_TO_ADDR
// for k in x do
83824: LD_ADDR_VAR 0 4
83828: PUSH
83829: LD_VAR 0 11
83833: PUSH
83834: FOR_IN
83835: IFFALSE 83908
// if ( GetWeapon ( k ) = ar_control_tower and not IsDrivenBy ( k ) ) or ( GetBType ( k ) = b_control_tower and UnitsInside ( k ) < 3 ) then
83837: LD_VAR 0 4
83841: PPUSH
83842: CALL_OW 264
83846: PUSH
83847: LD_INT 31
83849: EQUAL
83850: PUSH
83851: LD_VAR 0 4
83855: PPUSH
83856: CALL_OW 311
83860: NOT
83861: AND
83862: PUSH
83863: LD_VAR 0 4
83867: PPUSH
83868: CALL_OW 266
83872: PUSH
83873: LD_INT 36
83875: EQUAL
83876: PUSH
83877: LD_VAR 0 4
83881: PPUSH
83882: CALL_OW 313
83886: PUSH
83887: LD_INT 3
83889: LESS
83890: AND
83891: OR
83892: IFFALSE 83906
// begin ct := k ;
83894: LD_ADDR_VAR 0 8
83898: PUSH
83899: LD_VAR 0 4
83903: ST_TO_ADDR
// break ;
83904: GO 83908
// end ;
83906: GO 83834
83908: POP
83909: POP
// if ct then
83910: LD_VAR 0 8
83914: IFFALSE 83930
// ComEnterUnit ( j , ct ) ;
83916: LD_VAR 0 3
83920: PPUSH
83921: LD_VAR 0 8
83925: PPUSH
83926: CALL_OW 120
// end ; end ;
83930: GO 83683
83932: POP
83933: POP
// places := 0 ;
83934: LD_ADDR_VAR 0 5
83938: PUSH
83939: LD_INT 0
83941: ST_TO_ADDR
// for j = 1 to x do
83942: LD_ADDR_VAR 0 3
83946: PUSH
83947: DOUBLE
83948: LD_INT 1
83950: DEC
83951: ST_TO_ADDR
83952: LD_VAR 0 11
83956: PUSH
83957: FOR_TO
83958: IFFALSE 84013
// if GetWeapon ( x [ j ] ) = ar_control_tower then
83960: LD_VAR 0 11
83964: PUSH
83965: LD_VAR 0 3
83969: ARRAY
83970: PPUSH
83971: CALL_OW 264
83975: PUSH
83976: LD_INT 31
83978: EQUAL
83979: IFFALSE 83997
// places := places + 1 else
83981: LD_ADDR_VAR 0 5
83985: PUSH
83986: LD_VAR 0 5
83990: PUSH
83991: LD_INT 1
83993: PLUS
83994: ST_TO_ADDR
83995: GO 84011
// places := places + 3 ;
83997: LD_ADDR_VAR 0 5
84001: PUSH
84002: LD_VAR 0 5
84006: PUSH
84007: LD_INT 3
84009: PLUS
84010: ST_TO_ADDR
84011: GO 83957
84013: POP
84014: POP
// tmp := SortBySkill ( UnitFilter ( mc_bases [ i ] , [ f_class , 3 ] ) diff mc_remote_driver [ i ] , 3 ) ;
84015: LD_ADDR_VAR 0 6
84019: PUSH
84020: LD_EXP 36
84024: PUSH
84025: LD_VAR 0 2
84029: ARRAY
84030: PPUSH
84031: LD_INT 25
84033: PUSH
84034: LD_INT 3
84036: PUSH
84037: EMPTY
84038: LIST
84039: LIST
84040: PPUSH
84041: CALL_OW 72
84045: PUSH
84046: LD_EXP 76
84050: PUSH
84051: LD_VAR 0 2
84055: ARRAY
84056: DIFF
84057: PPUSH
84058: LD_INT 3
84060: PPUSH
84061: CALL 60861 0 2
84065: ST_TO_ADDR
// if not tmp then
84066: LD_VAR 0 6
84070: NOT
84071: IFFALSE 84075
// continue ;
84073: GO 83455
// places := places - mc_remote_driver [ i ] ;
84075: LD_ADDR_VAR 0 5
84079: PUSH
84080: LD_VAR 0 5
84084: PUSH
84085: LD_EXP 76
84089: PUSH
84090: LD_VAR 0 2
84094: ARRAY
84095: MINUS
84096: ST_TO_ADDR
// if places then
84097: LD_VAR 0 5
84101: IFFALSE 84160
// begin mc_remote_driver := Replace ( mc_remote_driver , i , mc_remote_driver [ i ] union tmp [ 1 ] ) ;
84103: LD_ADDR_EXP 76
84107: PUSH
84108: LD_EXP 76
84112: PPUSH
84113: LD_VAR 0 2
84117: PPUSH
84118: LD_EXP 76
84122: PUSH
84123: LD_VAR 0 2
84127: ARRAY
84128: PUSH
84129: LD_VAR 0 6
84133: PUSH
84134: LD_INT 1
84136: ARRAY
84137: UNION
84138: PPUSH
84139: CALL_OW 1
84143: ST_TO_ADDR
// SetTag ( tmp [ 1 ] , 126 ) ;
84144: LD_VAR 0 6
84148: PUSH
84149: LD_INT 1
84151: ARRAY
84152: PPUSH
84153: LD_INT 126
84155: PPUSH
84156: CALL_OW 109
// end ; end ;
84160: GO 83455
84162: POP
84163: POP
// end ;
84164: LD_VAR 0 1
84168: RET
// export function MC_Back ( base , base_unit_list , unit , class ) ; var i , j , tmp , x , depot ; begin
84169: LD_INT 0
84171: PPUSH
84172: PPUSH
84173: PPUSH
84174: PPUSH
84175: PPUSH
84176: PPUSH
// if not base or not base_unit_list or not unit or not class in [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 15 , 16 ] then
84177: LD_VAR 0 1
84181: NOT
84182: PUSH
84183: LD_VAR 0 2
84187: NOT
84188: OR
84189: PUSH
84190: LD_VAR 0 3
84194: NOT
84195: OR
84196: PUSH
84197: LD_VAR 0 4
84201: PUSH
84202: LD_INT 1
84204: PUSH
84205: LD_INT 2
84207: PUSH
84208: LD_INT 3
84210: PUSH
84211: LD_INT 4
84213: PUSH
84214: LD_INT 5
84216: PUSH
84217: LD_INT 8
84219: PUSH
84220: LD_INT 9
84222: PUSH
84223: LD_INT 15
84225: PUSH
84226: LD_INT 16
84228: PUSH
84229: EMPTY
84230: LIST
84231: LIST
84232: LIST
84233: LIST
84234: LIST
84235: LIST
84236: LIST
84237: LIST
84238: LIST
84239: IN
84240: NOT
84241: OR
84242: IFFALSE 84246
// exit ;
84244: GO 85146
// base_unit_list := UnitFilter ( base_unit_list , [ [ f_type , unit_building ] , [ f_lives , 250 ] ] ) ;
84246: LD_ADDR_VAR 0 2
84250: PUSH
84251: LD_VAR 0 2
84255: PPUSH
84256: LD_INT 21
84258: PUSH
84259: LD_INT 3
84261: PUSH
84262: EMPTY
84263: LIST
84264: LIST
84265: PUSH
84266: LD_INT 24
84268: PUSH
84269: LD_INT 250
84271: PUSH
84272: EMPTY
84273: LIST
84274: LIST
84275: PUSH
84276: EMPTY
84277: LIST
84278: LIST
84279: PPUSH
84280: CALL_OW 72
84284: ST_TO_ADDR
// case class of 1 , 15 :
84285: LD_VAR 0 4
84289: PUSH
84290: LD_INT 1
84292: DOUBLE
84293: EQUAL
84294: IFTRUE 84304
84296: LD_INT 15
84298: DOUBLE
84299: EQUAL
84300: IFTRUE 84304
84302: GO 84389
84304: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_breastwork ] ] ) ^ UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; 2 , 16 :
84305: LD_ADDR_VAR 0 8
84309: PUSH
84310: LD_VAR 0 2
84314: PPUSH
84315: LD_INT 2
84317: PUSH
84318: LD_INT 30
84320: PUSH
84321: LD_INT 32
84323: PUSH
84324: EMPTY
84325: LIST
84326: LIST
84327: PUSH
84328: LD_INT 30
84330: PUSH
84331: LD_INT 31
84333: PUSH
84334: EMPTY
84335: LIST
84336: LIST
84337: PUSH
84338: EMPTY
84339: LIST
84340: LIST
84341: LIST
84342: PPUSH
84343: CALL_OW 72
84347: PUSH
84348: LD_VAR 0 2
84352: PPUSH
84353: LD_INT 2
84355: PUSH
84356: LD_INT 30
84358: PUSH
84359: LD_INT 4
84361: PUSH
84362: EMPTY
84363: LIST
84364: LIST
84365: PUSH
84366: LD_INT 30
84368: PUSH
84369: LD_INT 5
84371: PUSH
84372: EMPTY
84373: LIST
84374: LIST
84375: PUSH
84376: EMPTY
84377: LIST
84378: LIST
84379: LIST
84380: PPUSH
84381: CALL_OW 72
84385: ADD
84386: ST_TO_ADDR
84387: GO 84635
84389: LD_INT 2
84391: DOUBLE
84392: EQUAL
84393: IFTRUE 84403
84395: LD_INT 16
84397: DOUBLE
84398: EQUAL
84399: IFTRUE 84403
84401: GO 84449
84403: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ; 3 :
84404: LD_ADDR_VAR 0 8
84408: PUSH
84409: LD_VAR 0 2
84413: PPUSH
84414: LD_INT 2
84416: PUSH
84417: LD_INT 30
84419: PUSH
84420: LD_INT 0
84422: PUSH
84423: EMPTY
84424: LIST
84425: LIST
84426: PUSH
84427: LD_INT 30
84429: PUSH
84430: LD_INT 1
84432: PUSH
84433: EMPTY
84434: LIST
84435: LIST
84436: PUSH
84437: EMPTY
84438: LIST
84439: LIST
84440: LIST
84441: PPUSH
84442: CALL_OW 72
84446: ST_TO_ADDR
84447: GO 84635
84449: LD_INT 3
84451: DOUBLE
84452: EQUAL
84453: IFTRUE 84457
84455: GO 84503
84457: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ) ; 4 :
84458: LD_ADDR_VAR 0 8
84462: PUSH
84463: LD_VAR 0 2
84467: PPUSH
84468: LD_INT 2
84470: PUSH
84471: LD_INT 30
84473: PUSH
84474: LD_INT 2
84476: PUSH
84477: EMPTY
84478: LIST
84479: LIST
84480: PUSH
84481: LD_INT 30
84483: PUSH
84484: LD_INT 3
84486: PUSH
84487: EMPTY
84488: LIST
84489: LIST
84490: PUSH
84491: EMPTY
84492: LIST
84493: LIST
84494: LIST
84495: PPUSH
84496: CALL_OW 72
84500: ST_TO_ADDR
84501: GO 84635
84503: LD_INT 4
84505: DOUBLE
84506: EQUAL
84507: IFTRUE 84511
84509: GO 84568
84511: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ) ; 5 , 8 , 9 :
84512: LD_ADDR_VAR 0 8
84516: PUSH
84517: LD_VAR 0 2
84521: PPUSH
84522: LD_INT 2
84524: PUSH
84525: LD_INT 30
84527: PUSH
84528: LD_INT 6
84530: PUSH
84531: EMPTY
84532: LIST
84533: LIST
84534: PUSH
84535: LD_INT 30
84537: PUSH
84538: LD_INT 7
84540: PUSH
84541: EMPTY
84542: LIST
84543: LIST
84544: PUSH
84545: LD_INT 30
84547: PUSH
84548: LD_INT 8
84550: PUSH
84551: EMPTY
84552: LIST
84553: LIST
84554: PUSH
84555: EMPTY
84556: LIST
84557: LIST
84558: LIST
84559: LIST
84560: PPUSH
84561: CALL_OW 72
84565: ST_TO_ADDR
84566: GO 84635
84568: LD_INT 5
84570: DOUBLE
84571: EQUAL
84572: IFTRUE 84588
84574: LD_INT 8
84576: DOUBLE
84577: EQUAL
84578: IFTRUE 84588
84580: LD_INT 9
84582: DOUBLE
84583: EQUAL
84584: IFTRUE 84588
84586: GO 84634
84588: POP
// tmp := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ; end ;
84589: LD_ADDR_VAR 0 8
84593: PUSH
84594: LD_VAR 0 2
84598: PPUSH
84599: LD_INT 2
84601: PUSH
84602: LD_INT 30
84604: PUSH
84605: LD_INT 4
84607: PUSH
84608: EMPTY
84609: LIST
84610: LIST
84611: PUSH
84612: LD_INT 30
84614: PUSH
84615: LD_INT 5
84617: PUSH
84618: EMPTY
84619: LIST
84620: LIST
84621: PUSH
84622: EMPTY
84623: LIST
84624: LIST
84625: LIST
84626: PPUSH
84627: CALL_OW 72
84631: ST_TO_ADDR
84632: GO 84635
84634: POP
// if not tmp then
84635: LD_VAR 0 8
84639: NOT
84640: IFFALSE 84644
// exit ;
84642: GO 85146
// if class in [ 1 , 15 ] and mc_empty_turret_list [ base ] then
84644: LD_VAR 0 4
84648: PUSH
84649: LD_INT 1
84651: PUSH
84652: LD_INT 15
84654: PUSH
84655: EMPTY
84656: LIST
84657: LIST
84658: IN
84659: PUSH
84660: LD_EXP 45
84664: PUSH
84665: LD_VAR 0 1
84669: ARRAY
84670: AND
84671: IFFALSE 84827
// begin x := mc_empty_turret_list [ base ] [ 1 ] ;
84673: LD_ADDR_VAR 0 9
84677: PUSH
84678: LD_EXP 45
84682: PUSH
84683: LD_VAR 0 1
84687: ARRAY
84688: PUSH
84689: LD_INT 1
84691: ARRAY
84692: ST_TO_ADDR
// if not x in mc_busy_turret_list [ base ] then
84693: LD_VAR 0 9
84697: PUSH
84698: LD_EXP 46
84702: PUSH
84703: LD_VAR 0 1
84707: ARRAY
84708: IN
84709: NOT
84710: IFFALSE 84825
// begin mc_busy_turret_list := ReplaceIn ( mc_busy_turret_list , [ base , mc_busy_turret_list [ base ] + 1 ] , x ) ;
84712: LD_ADDR_EXP 46
84716: PUSH
84717: LD_EXP 46
84721: PPUSH
84722: LD_VAR 0 1
84726: PUSH
84727: LD_EXP 46
84731: PUSH
84732: LD_VAR 0 1
84736: ARRAY
84737: PUSH
84738: LD_INT 1
84740: PLUS
84741: PUSH
84742: EMPTY
84743: LIST
84744: LIST
84745: PPUSH
84746: LD_VAR 0 9
84750: PPUSH
84751: CALL 26637 0 3
84755: ST_TO_ADDR
// mc_empty_turret_list := Replace ( mc_empty_turret_list , base , mc_empty_turret_list [ base ] diff x ) ;
84756: LD_ADDR_EXP 45
84760: PUSH
84761: LD_EXP 45
84765: PPUSH
84766: LD_VAR 0 1
84770: PPUSH
84771: LD_EXP 45
84775: PUSH
84776: LD_VAR 0 1
84780: ARRAY
84781: PUSH
84782: LD_VAR 0 9
84786: DIFF
84787: PPUSH
84788: CALL_OW 1
84792: ST_TO_ADDR
// ComEnterUnit ( unit , mc_busy_turret_list [ base ] [ mc_busy_turret_list [ base ] ] ) ;
84793: LD_VAR 0 3
84797: PPUSH
84798: LD_EXP 46
84802: PUSH
84803: LD_VAR 0 1
84807: ARRAY
84808: PUSH
84809: LD_EXP 46
84813: PUSH
84814: LD_VAR 0 1
84818: ARRAY
84819: ARRAY
84820: PPUSH
84821: CALL_OW 120
// end ; exit ;
84825: GO 85146
// end ; if tmp > 1 then
84827: LD_VAR 0 8
84831: PUSH
84832: LD_INT 1
84834: GREATER
84835: IFFALSE 84939
// for i = 2 to tmp do
84837: LD_ADDR_VAR 0 6
84841: PUSH
84842: DOUBLE
84843: LD_INT 2
84845: DEC
84846: ST_TO_ADDR
84847: LD_VAR 0 8
84851: PUSH
84852: FOR_TO
84853: IFFALSE 84937
// if BuildingStatus ( tmp [ i ] ) = bs_need_people then
84855: LD_VAR 0 8
84859: PUSH
84860: LD_VAR 0 6
84864: ARRAY
84865: PPUSH
84866: CALL_OW 461
84870: PUSH
84871: LD_INT 6
84873: EQUAL
84874: IFFALSE 84935
// begin x := tmp [ i ] ;
84876: LD_ADDR_VAR 0 9
84880: PUSH
84881: LD_VAR 0 8
84885: PUSH
84886: LD_VAR 0 6
84890: ARRAY
84891: ST_TO_ADDR
// tmp := Delete ( tmp , i ) ;
84892: LD_ADDR_VAR 0 8
84896: PUSH
84897: LD_VAR 0 8
84901: PPUSH
84902: LD_VAR 0 6
84906: PPUSH
84907: CALL_OW 3
84911: ST_TO_ADDR
// tmp := Insert ( tmp , 1 , x ) ;
84912: LD_ADDR_VAR 0 8
84916: PUSH
84917: LD_VAR 0 8
84921: PPUSH
84922: LD_INT 1
84924: PPUSH
84925: LD_VAR 0 9
84929: PPUSH
84930: CALL_OW 2
84934: ST_TO_ADDR
// end ;
84935: GO 84852
84937: POP
84938: POP
// for i in tmp do
84939: LD_ADDR_VAR 0 6
84943: PUSH
84944: LD_VAR 0 8
84948: PUSH
84949: FOR_IN
84950: IFFALSE 85019
// begin if ( UnitsInside ( i ) < 6 and not GetBType ( i ) in [ b_breastwork , b_bunker ] ) or UnitsInside ( i ) = 0 then
84952: LD_VAR 0 6
84956: PPUSH
84957: CALL_OW 313
84961: PUSH
84962: LD_INT 6
84964: LESS
84965: PUSH
84966: LD_VAR 0 6
84970: PPUSH
84971: CALL_OW 266
84975: PUSH
84976: LD_INT 31
84978: PUSH
84979: LD_INT 32
84981: PUSH
84982: EMPTY
84983: LIST
84984: LIST
84985: IN
84986: NOT
84987: AND
84988: PUSH
84989: LD_VAR 0 6
84993: PPUSH
84994: CALL_OW 313
84998: PUSH
84999: LD_INT 0
85001: EQUAL
85002: OR
85003: IFFALSE 85017
// begin j := i ;
85005: LD_ADDR_VAR 0 7
85009: PUSH
85010: LD_VAR 0 6
85014: ST_TO_ADDR
// break ;
85015: GO 85019
// end ; end ;
85017: GO 84949
85019: POP
85020: POP
// if j then
85021: LD_VAR 0 7
85025: IFFALSE 85043
// ComEnterUnit ( unit , j ) else
85027: LD_VAR 0 3
85031: PPUSH
85032: LD_VAR 0 7
85036: PPUSH
85037: CALL_OW 120
85041: GO 85146
// begin depot := UnitFilter ( base_unit_list , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
85043: LD_ADDR_VAR 0 10
85047: PUSH
85048: LD_VAR 0 2
85052: PPUSH
85053: LD_INT 2
85055: PUSH
85056: LD_INT 30
85058: PUSH
85059: LD_INT 0
85061: PUSH
85062: EMPTY
85063: LIST
85064: LIST
85065: PUSH
85066: LD_INT 30
85068: PUSH
85069: LD_INT 1
85071: PUSH
85072: EMPTY
85073: LIST
85074: LIST
85075: PUSH
85076: EMPTY
85077: LIST
85078: LIST
85079: LIST
85080: PPUSH
85081: CALL_OW 72
85085: ST_TO_ADDR
// if depot then
85086: LD_VAR 0 10
85090: IFFALSE 85146
// begin depot := NearestUnitToUnit ( depot , unit ) ;
85092: LD_ADDR_VAR 0 10
85096: PUSH
85097: LD_VAR 0 10
85101: PPUSH
85102: LD_VAR 0 3
85106: PPUSH
85107: CALL_OW 74
85111: ST_TO_ADDR
// if GetDistUnits ( unit , depot ) > 10 then
85112: LD_VAR 0 3
85116: PPUSH
85117: LD_VAR 0 10
85121: PPUSH
85122: CALL_OW 296
85126: PUSH
85127: LD_INT 10
85129: GREATER
85130: IFFALSE 85146
// ComStandNearbyBuilding ( unit , depot ) ;
85132: LD_VAR 0 3
85136: PPUSH
85137: LD_VAR 0 10
85141: PPUSH
85142: CALL 21314 0 2
// end ; end ; end ;
85146: LD_VAR 0 5
85150: RET
// export function MC_Idle ( ) ; var i , j , tmp ; begin
85151: LD_INT 0
85153: PPUSH
85154: PPUSH
85155: PPUSH
85156: PPUSH
// if not mc_bases then
85157: LD_EXP 36
85161: NOT
85162: IFFALSE 85166
// exit ;
85164: GO 85405
// for i = 1 to mc_bases do
85166: LD_ADDR_VAR 0 2
85170: PUSH
85171: DOUBLE
85172: LD_INT 1
85174: DEC
85175: ST_TO_ADDR
85176: LD_EXP 36
85180: PUSH
85181: FOR_TO
85182: IFFALSE 85403
// begin tmp := UnitFilter ( mc_bases [ i ] , [ f_type , unit_human ] ) union mc_ape [ i ] ;
85184: LD_ADDR_VAR 0 4
85188: PUSH
85189: LD_EXP 36
85193: PUSH
85194: LD_VAR 0 2
85198: ARRAY
85199: PPUSH
85200: LD_INT 21
85202: PUSH
85203: LD_INT 1
85205: PUSH
85206: EMPTY
85207: LIST
85208: LIST
85209: PPUSH
85210: CALL_OW 72
85214: PUSH
85215: LD_EXP 65
85219: PUSH
85220: LD_VAR 0 2
85224: ARRAY
85225: UNION
85226: ST_TO_ADDR
// if not tmp then
85227: LD_VAR 0 4
85231: NOT
85232: IFFALSE 85236
// continue ;
85234: GO 85181
// for j in tmp do
85236: LD_ADDR_VAR 0 3
85240: PUSH
85241: LD_VAR 0 4
85245: PUSH
85246: FOR_IN
85247: IFFALSE 85399
// begin if not GetTag ( j ) and not HasTask ( j ) and not IsDrivenBy ( j ) and not IsInUnit ( j ) and not j in mc_need_heal [ i ] [ 1 ] and not j in mc_need_heal [ i ] [ 2 ] and not j in mc_repair_vehicle [ i ] then
85249: LD_VAR 0 3
85253: PPUSH
85254: CALL_OW 110
85258: NOT
85259: PUSH
85260: LD_VAR 0 3
85264: PPUSH
85265: CALL_OW 314
85269: NOT
85270: AND
85271: PUSH
85272: LD_VAR 0 3
85276: PPUSH
85277: CALL_OW 311
85281: NOT
85282: AND
85283: PUSH
85284: LD_VAR 0 3
85288: PPUSH
85289: CALL_OW 310
85293: NOT
85294: AND
85295: PUSH
85296: LD_VAR 0 3
85300: PUSH
85301: LD_EXP 39
85305: PUSH
85306: LD_VAR 0 2
85310: ARRAY
85311: PUSH
85312: LD_INT 1
85314: ARRAY
85315: IN
85316: NOT
85317: AND
85318: PUSH
85319: LD_VAR 0 3
85323: PUSH
85324: LD_EXP 39
85328: PUSH
85329: LD_VAR 0 2
85333: ARRAY
85334: PUSH
85335: LD_INT 2
85337: ARRAY
85338: IN
85339: NOT
85340: AND
85341: PUSH
85342: LD_VAR 0 3
85346: PUSH
85347: LD_EXP 48
85351: PUSH
85352: LD_VAR 0 2
85356: ARRAY
85357: IN
85358: NOT
85359: AND
85360: IFFALSE 85397
// MC_Back ( i , mc_bases [ i ] , j , GetClass ( j ) ) ;
85362: LD_VAR 0 2
85366: PPUSH
85367: LD_EXP 36
85371: PUSH
85372: LD_VAR 0 2
85376: ARRAY
85377: PPUSH
85378: LD_VAR 0 3
85382: PPUSH
85383: LD_VAR 0 3
85387: PPUSH
85388: CALL_OW 257
85392: PPUSH
85393: CALL 84169 0 4
// end ;
85397: GO 85246
85399: POP
85400: POP
// end ;
85401: GO 85181
85403: POP
85404: POP
// end ;
85405: LD_VAR 0 1
85409: RET
// export function MC_SetMinesField ( base , amount , area ) ; var i , tmp , list , x , j ; begin
85410: LD_INT 0
85412: PPUSH
85413: PPUSH
85414: PPUSH
85415: PPUSH
85416: PPUSH
85417: PPUSH
// if not mc_bases [ base ] then
85418: LD_EXP 36
85422: PUSH
85423: LD_VAR 0 1
85427: ARRAY
85428: NOT
85429: IFFALSE 85433
// exit ;
85431: GO 85615
// tmp := [ ] ;
85433: LD_ADDR_VAR 0 6
85437: PUSH
85438: EMPTY
85439: ST_TO_ADDR
// list := AreaToList ( area , 0 ) ;
85440: LD_ADDR_VAR 0 7
85444: PUSH
85445: LD_VAR 0 3
85449: PPUSH
85450: LD_INT 0
85452: PPUSH
85453: CALL_OW 517
85457: ST_TO_ADDR
// if not list then
85458: LD_VAR 0 7
85462: NOT
85463: IFFALSE 85467
// exit ;
85465: GO 85615
// for i = 1 to amount do
85467: LD_ADDR_VAR 0 5
85471: PUSH
85472: DOUBLE
85473: LD_INT 1
85475: DEC
85476: ST_TO_ADDR
85477: LD_VAR 0 2
85481: PUSH
85482: FOR_TO
85483: IFFALSE 85563
// begin x := rand ( 1 , list [ 1 ] ) ;
85485: LD_ADDR_VAR 0 8
85489: PUSH
85490: LD_INT 1
85492: PPUSH
85493: LD_VAR 0 7
85497: PUSH
85498: LD_INT 1
85500: ARRAY
85501: PPUSH
85502: CALL_OW 12
85506: ST_TO_ADDR
// tmp := Replace ( tmp , i , [ list [ 1 ] [ x ] , list [ 2 ] [ x ] ] ) ;
85507: LD_ADDR_VAR 0 6
85511: PUSH
85512: LD_VAR 0 6
85516: PPUSH
85517: LD_VAR 0 5
85521: PPUSH
85522: LD_VAR 0 7
85526: PUSH
85527: LD_INT 1
85529: ARRAY
85530: PUSH
85531: LD_VAR 0 8
85535: ARRAY
85536: PUSH
85537: LD_VAR 0 7
85541: PUSH
85542: LD_INT 2
85544: ARRAY
85545: PUSH
85546: LD_VAR 0 8
85550: ARRAY
85551: PUSH
85552: EMPTY
85553: LIST
85554: LIST
85555: PPUSH
85556: CALL_OW 1
85560: ST_TO_ADDR
// end ;
85561: GO 85482
85563: POP
85564: POP
// mc_mines := Replace ( mc_mines , base , tmp ) ;
85565: LD_ADDR_EXP 49
85569: PUSH
85570: LD_EXP 49
85574: PPUSH
85575: LD_VAR 0 1
85579: PPUSH
85580: LD_VAR 0 6
85584: PPUSH
85585: CALL_OW 1
85589: ST_TO_ADDR
// mc_minefields := Replace ( mc_minefields , base , area ) ;
85590: LD_ADDR_EXP 51
85594: PUSH
85595: LD_EXP 51
85599: PPUSH
85600: LD_VAR 0 1
85604: PPUSH
85605: LD_VAR 0 3
85609: PPUSH
85610: CALL_OW 1
85614: ST_TO_ADDR
// end ;
85615: LD_VAR 0 4
85619: RET
// export function MC_SetBuildingList ( base , construct_list ) ; begin
85620: LD_INT 0
85622: PPUSH
// if not mc_bases [ base ] then
85623: LD_EXP 36
85627: PUSH
85628: LD_VAR 0 1
85632: ARRAY
85633: NOT
85634: IFFALSE 85638
// exit ;
85636: GO 85663
// mc_build_list := Replace ( mc_build_list , base , construct_list ) ;
85638: LD_ADDR_EXP 41
85642: PUSH
85643: LD_EXP 41
85647: PPUSH
85648: LD_VAR 0 1
85652: PPUSH
85653: LD_VAR 0 2
85657: PPUSH
85658: CALL_OW 1
85662: ST_TO_ADDR
// end ;
85663: LD_VAR 0 3
85667: RET
// export function MC_InsertBuildingList ( base , list ) ; begin
85668: LD_INT 0
85670: PPUSH
// if not mc_bases [ base ] then
85671: LD_EXP 36
85675: PUSH
85676: LD_VAR 0 1
85680: ARRAY
85681: NOT
85682: IFFALSE 85686
// exit ;
85684: GO 85723
// mc_build_list := Replace ( mc_build_list , base , mc_build_list [ base ] union list ) ;
85686: LD_ADDR_EXP 41
85690: PUSH
85691: LD_EXP 41
85695: PPUSH
85696: LD_VAR 0 1
85700: PPUSH
85701: LD_EXP 41
85705: PUSH
85706: LD_VAR 0 1
85710: ARRAY
85711: PUSH
85712: LD_VAR 0 2
85716: UNION
85717: PPUSH
85718: CALL_OW 1
85722: ST_TO_ADDR
// end ;
85723: LD_VAR 0 3
85727: RET
// export function MC_SetProduceList ( base , produce_list ) ; begin
85728: LD_INT 0
85730: PPUSH
// if not mc_bases [ base ] then
85731: LD_EXP 36
85735: PUSH
85736: LD_VAR 0 1
85740: ARRAY
85741: NOT
85742: IFFALSE 85746
// exit ;
85744: GO 85771
// mc_produce := Replace ( mc_produce , base , produce_list ) ;
85746: LD_ADDR_EXP 57
85750: PUSH
85751: LD_EXP 57
85755: PPUSH
85756: LD_VAR 0 1
85760: PPUSH
85761: LD_VAR 0 2
85765: PPUSH
85766: CALL_OW 1
85770: ST_TO_ADDR
// end ;
85771: LD_VAR 0 3
85775: RET
// export function MC_InsertProduceList ( base , components ) ; begin
85776: LD_INT 0
85778: PPUSH
// if not mc_bases [ base ] then
85779: LD_EXP 36
85783: PUSH
85784: LD_VAR 0 1
85788: ARRAY
85789: NOT
85790: IFFALSE 85794
// exit ;
85792: GO 85831
// mc_produce := Replace ( mc_produce , base , mc_produce [ base ] ^ components ) ;
85794: LD_ADDR_EXP 57
85798: PUSH
85799: LD_EXP 57
85803: PPUSH
85804: LD_VAR 0 1
85808: PPUSH
85809: LD_EXP 57
85813: PUSH
85814: LD_VAR 0 1
85818: ARRAY
85819: PUSH
85820: LD_VAR 0 2
85824: ADD
85825: PPUSH
85826: CALL_OW 1
85830: ST_TO_ADDR
// end ;
85831: LD_VAR 0 3
85835: RET
// export function MC_SetDefenderList ( base , deflist ) ; begin
85836: LD_INT 0
85838: PPUSH
// if not mc_bases [ base ] then
85839: LD_EXP 36
85843: PUSH
85844: LD_VAR 0 1
85848: ARRAY
85849: NOT
85850: IFFALSE 85854
// exit ;
85852: GO 85908
// mc_defender := Replace ( mc_defender , base , deflist ) ;
85854: LD_ADDR_EXP 58
85858: PUSH
85859: LD_EXP 58
85863: PPUSH
85864: LD_VAR 0 1
85868: PPUSH
85869: LD_VAR 0 2
85873: PPUSH
85874: CALL_OW 1
85878: ST_TO_ADDR
// mc_defender_limit := Replace ( mc_defender_limit , base , deflist + 0 ) ;
85879: LD_ADDR_EXP 47
85883: PUSH
85884: LD_EXP 47
85888: PPUSH
85889: LD_VAR 0 1
85893: PPUSH
85894: LD_VAR 0 2
85898: PUSH
85899: LD_INT 0
85901: PLUS
85902: PPUSH
85903: CALL_OW 1
85907: ST_TO_ADDR
// end ;
85908: LD_VAR 0 3
85912: RET
// export function MC_SetDefenderLimit ( base , limit ) ; begin
85913: LD_INT 0
85915: PPUSH
// if not mc_bases [ base ] then
85916: LD_EXP 36
85920: PUSH
85921: LD_VAR 0 1
85925: ARRAY
85926: NOT
85927: IFFALSE 85931
// exit ;
85929: GO 85956
// mc_defender_limit := Replace ( mc_defender_limit , base , limit ) ;
85931: LD_ADDR_EXP 47
85935: PUSH
85936: LD_EXP 47
85940: PPUSH
85941: LD_VAR 0 1
85945: PPUSH
85946: LD_VAR 0 2
85950: PPUSH
85951: CALL_OW 1
85955: ST_TO_ADDR
// end ;
85956: LD_VAR 0 3
85960: RET
// export function MC_PrepareAttack ( base , group , path , flags ) ; var i , j , tmp ; begin
85961: LD_INT 0
85963: PPUSH
85964: PPUSH
85965: PPUSH
85966: PPUSH
// if not mc_bases [ base ] then
85967: LD_EXP 36
85971: PUSH
85972: LD_VAR 0 1
85976: ARRAY
85977: NOT
85978: IFFALSE 85982
// exit ;
85980: GO 86047
// mc_attack := ReplaceIn ( mc_attack , [ base , mc_attack [ base ] + 1 ] , [ base , group , path , flags ] ) ;
85982: LD_ADDR_EXP 56
85986: PUSH
85987: LD_EXP 56
85991: PPUSH
85992: LD_VAR 0 1
85996: PUSH
85997: LD_EXP 56
86001: PUSH
86002: LD_VAR 0 1
86006: ARRAY
86007: PUSH
86008: LD_INT 1
86010: PLUS
86011: PUSH
86012: EMPTY
86013: LIST
86014: LIST
86015: PPUSH
86016: LD_VAR 0 1
86020: PUSH
86021: LD_VAR 0 2
86025: PUSH
86026: LD_VAR 0 3
86030: PUSH
86031: LD_VAR 0 4
86035: PUSH
86036: EMPTY
86037: LIST
86038: LIST
86039: LIST
86040: LIST
86041: PPUSH
86042: CALL 26637 0 3
86046: ST_TO_ADDR
// end ;
86047: LD_VAR 0 5
86051: RET
// export function MC_SetDepositsXY ( base , deposits_list ) ; begin
86052: LD_INT 0
86054: PPUSH
// if not mc_bases [ base ] then
86055: LD_EXP 36
86059: PUSH
86060: LD_VAR 0 1
86064: ARRAY
86065: NOT
86066: IFFALSE 86070
// exit ;
86068: GO 86095
// mc_deposits_xy := Replace ( mc_deposits_xy , base , deposits_list ) ;
86070: LD_ADDR_EXP 73
86074: PUSH
86075: LD_EXP 73
86079: PPUSH
86080: LD_VAR 0 1
86084: PPUSH
86085: LD_VAR 0 2
86089: PPUSH
86090: CALL_OW 1
86094: ST_TO_ADDR
// end ;
86095: LD_VAR 0 3
86099: RET
// export function MC_GetMinesField ( base ) ; begin
86100: LD_INT 0
86102: PPUSH
// result := mc_mines [ base ] ;
86103: LD_ADDR_VAR 0 2
86107: PUSH
86108: LD_EXP 49
86112: PUSH
86113: LD_VAR 0 1
86117: ARRAY
86118: ST_TO_ADDR
// end ;
86119: LD_VAR 0 2
86123: RET
// export function MC_GetProduceList ( base ) ; begin
86124: LD_INT 0
86126: PPUSH
// result := mc_produce [ base ] ;
86127: LD_ADDR_VAR 0 2
86131: PUSH
86132: LD_EXP 57
86136: PUSH
86137: LD_VAR 0 1
86141: ARRAY
86142: ST_TO_ADDR
// end ;
86143: LD_VAR 0 2
86147: RET
// export function MC_GetBuilding ( base , btype ) ; var i ; begin
86148: LD_INT 0
86150: PPUSH
86151: PPUSH
// if not mc_bases then
86152: LD_EXP 36
86156: NOT
86157: IFFALSE 86161
// exit ;
86159: GO 86226
// if mc_bases [ base ] then
86161: LD_EXP 36
86165: PUSH
86166: LD_VAR 0 1
86170: ARRAY
86171: IFFALSE 86226
// begin result := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
86173: LD_ADDR_VAR 0 3
86177: PUSH
86178: LD_EXP 36
86182: PUSH
86183: LD_VAR 0 1
86187: ARRAY
86188: PPUSH
86189: LD_INT 30
86191: PUSH
86192: LD_VAR 0 2
86196: PUSH
86197: EMPTY
86198: LIST
86199: LIST
86200: PPUSH
86201: CALL_OW 72
86205: ST_TO_ADDR
// if result then
86206: LD_VAR 0 3
86210: IFFALSE 86226
// result := result [ 1 ] ;
86212: LD_ADDR_VAR 0 3
86216: PUSH
86217: LD_VAR 0 3
86221: PUSH
86222: LD_INT 1
86224: ARRAY
86225: ST_TO_ADDR
// end ; end ;
86226: LD_VAR 0 3
86230: RET
// export function MC_SetTame ( base , area ) ; begin
86231: LD_INT 0
86233: PPUSH
// if not mc_bases or not base then
86234: LD_EXP 36
86238: NOT
86239: PUSH
86240: LD_VAR 0 1
86244: NOT
86245: OR
86246: IFFALSE 86250
// exit ;
86248: GO 86275
// mc_can_tame := Replace ( mc_can_tame , base , area ) ;
86250: LD_ADDR_EXP 64
86254: PUSH
86255: LD_EXP 64
86259: PPUSH
86260: LD_VAR 0 1
86264: PPUSH
86265: LD_VAR 0 2
86269: PPUSH
86270: CALL_OW 1
86274: ST_TO_ADDR
// end ;
86275: LD_VAR 0 3
86279: RET
// export function MC_SetUpgradeBuilding ( base , btype ) ; var tmp ; begin
86280: LD_INT 0
86282: PPUSH
86283: PPUSH
// if not mc_bases or not base then
86284: LD_EXP 36
86288: NOT
86289: PUSH
86290: LD_VAR 0 1
86294: NOT
86295: OR
86296: IFFALSE 86300
// exit ;
86298: GO 86402
// tmp := UnitFilter ( mc_bases [ base ] , [ f_btype , btype ] ) ;
86300: LD_ADDR_VAR 0 4
86304: PUSH
86305: LD_EXP 36
86309: PUSH
86310: LD_VAR 0 1
86314: ARRAY
86315: PPUSH
86316: LD_INT 30
86318: PUSH
86319: LD_VAR 0 2
86323: PUSH
86324: EMPTY
86325: LIST
86326: LIST
86327: PPUSH
86328: CALL_OW 72
86332: ST_TO_ADDR
// if not tmp then
86333: LD_VAR 0 4
86337: NOT
86338: IFFALSE 86342
// exit ;
86340: GO 86402
// mc_build_upgrade := Replace ( mc_build_upgrade , base , Insert ( mc_build_upgrade [ base ] , mc_build_upgrade [ base ] + 1 , tmp [ 1 ] ) ) ;
86342: LD_ADDR_EXP 68
86346: PUSH
86347: LD_EXP 68
86351: PPUSH
86352: LD_VAR 0 1
86356: PPUSH
86357: LD_EXP 68
86361: PUSH
86362: LD_VAR 0 1
86366: ARRAY
86367: PPUSH
86368: LD_EXP 68
86372: PUSH
86373: LD_VAR 0 1
86377: ARRAY
86378: PUSH
86379: LD_INT 1
86381: PLUS
86382: PPUSH
86383: LD_VAR 0 4
86387: PUSH
86388: LD_INT 1
86390: ARRAY
86391: PPUSH
86392: CALL_OW 2
86396: PPUSH
86397: CALL_OW 1
86401: ST_TO_ADDR
// end ;
86402: LD_VAR 0 3
86406: RET
// export function MC_SetLabKind ( base , kinds ) ; var i ; begin
86407: LD_INT 0
86409: PPUSH
86410: PPUSH
// if not mc_bases or not base or not kinds then
86411: LD_EXP 36
86415: NOT
86416: PUSH
86417: LD_VAR 0 1
86421: NOT
86422: OR
86423: PUSH
86424: LD_VAR 0 2
86428: NOT
86429: OR
86430: IFFALSE 86434
// exit ;
86432: GO 86495
// for i in kinds do
86434: LD_ADDR_VAR 0 4
86438: PUSH
86439: LD_VAR 0 2
86443: PUSH
86444: FOR_IN
86445: IFFALSE 86493
// mc_lab_upgrade := ReplaceIn ( mc_lab_upgrade , [ base , mc_lab_upgrade [ base ] + 1 ] , i ) ;
86447: LD_ADDR_EXP 70
86451: PUSH
86452: LD_EXP 70
86456: PPUSH
86457: LD_VAR 0 1
86461: PUSH
86462: LD_EXP 70
86466: PUSH
86467: LD_VAR 0 1
86471: ARRAY
86472: PUSH
86473: LD_INT 1
86475: PLUS
86476: PUSH
86477: EMPTY
86478: LIST
86479: LIST
86480: PPUSH
86481: LD_VAR 0 4
86485: PPUSH
86486: CALL 26637 0 3
86490: ST_TO_ADDR
86491: GO 86444
86493: POP
86494: POP
// end ;
86495: LD_VAR 0 3
86499: RET
// export function MC_SetCratesArea ( base , areas ) ; begin
86500: LD_INT 0
86502: PPUSH
// if not mc_bases or not base or not areas then
86503: LD_EXP 36
86507: NOT
86508: PUSH
86509: LD_VAR 0 1
86513: NOT
86514: OR
86515: PUSH
86516: LD_VAR 0 2
86520: NOT
86521: OR
86522: IFFALSE 86526
// exit ;
86524: GO 86551
// mc_crates_area := Replace ( mc_crates_area , base , areas ) ;
86526: LD_ADDR_EXP 54
86530: PUSH
86531: LD_EXP 54
86535: PPUSH
86536: LD_VAR 0 1
86540: PPUSH
86541: LD_VAR 0 2
86545: PPUSH
86546: CALL_OW 1
86550: ST_TO_ADDR
// end ;
86551: LD_VAR 0 3
86555: RET
// export function MC_SetTeleportExit ( base , teleports_exit ) ; begin
86556: LD_INT 0
86558: PPUSH
// if not mc_bases or not base or not teleports_exit then
86559: LD_EXP 36
86563: NOT
86564: PUSH
86565: LD_VAR 0 1
86569: NOT
86570: OR
86571: PUSH
86572: LD_VAR 0 2
86576: NOT
86577: OR
86578: IFFALSE 86582
// exit ;
86580: GO 86607
// mc_teleport_exit := Replace ( mc_teleport_exit , base , teleports_exit ) ;
86582: LD_ADDR_EXP 71
86586: PUSH
86587: LD_EXP 71
86591: PPUSH
86592: LD_VAR 0 1
86596: PPUSH
86597: LD_VAR 0 2
86601: PPUSH
86602: CALL_OW 1
86606: ST_TO_ADDR
// end ;
86607: LD_VAR 0 3
86611: RET
// export function MC_SetFactoryExtension ( base , x , y , d , ext_list ) ; var i , tmp ; begin
86612: LD_INT 0
86614: PPUSH
86615: PPUSH
86616: PPUSH
// if not mc_bases or not base or not ext_list then
86617: LD_EXP 36
86621: NOT
86622: PUSH
86623: LD_VAR 0 1
86627: NOT
86628: OR
86629: PUSH
86630: LD_VAR 0 5
86634: NOT
86635: OR
86636: IFFALSE 86640
// exit ;
86638: GO 86813
// tmp := GetFacExtXYD ( x , y , d ) ;
86640: LD_ADDR_VAR 0 8
86644: PUSH
86645: LD_VAR 0 2
86649: PPUSH
86650: LD_VAR 0 3
86654: PPUSH
86655: LD_VAR 0 4
86659: PPUSH
86660: CALL 59991 0 3
86664: ST_TO_ADDR
// if not tmp then
86665: LD_VAR 0 8
86669: NOT
86670: IFFALSE 86674
// exit ;
86672: GO 86813
// for i in tmp do
86674: LD_ADDR_VAR 0 7
86678: PUSH
86679: LD_VAR 0 8
86683: PUSH
86684: FOR_IN
86685: IFFALSE 86811
// begin mc_build_list := Replace ( mc_build_list , base , Insert ( mc_build_list [ base ] , mc_build_list [ base ] + 1 , [ ext_list [ 1 ] , i [ 1 ] , i [ 2 ] , i [ 3 ] ] ) ) ;
86687: LD_ADDR_EXP 41
86691: PUSH
86692: LD_EXP 41
86696: PPUSH
86697: LD_VAR 0 1
86701: PPUSH
86702: LD_EXP 41
86706: PUSH
86707: LD_VAR 0 1
86711: ARRAY
86712: PPUSH
86713: LD_EXP 41
86717: PUSH
86718: LD_VAR 0 1
86722: ARRAY
86723: PUSH
86724: LD_INT 1
86726: PLUS
86727: PPUSH
86728: LD_VAR 0 5
86732: PUSH
86733: LD_INT 1
86735: ARRAY
86736: PUSH
86737: LD_VAR 0 7
86741: PUSH
86742: LD_INT 1
86744: ARRAY
86745: PUSH
86746: LD_VAR 0 7
86750: PUSH
86751: LD_INT 2
86753: ARRAY
86754: PUSH
86755: LD_VAR 0 7
86759: PUSH
86760: LD_INT 3
86762: ARRAY
86763: PUSH
86764: EMPTY
86765: LIST
86766: LIST
86767: LIST
86768: LIST
86769: PPUSH
86770: CALL_OW 2
86774: PPUSH
86775: CALL_OW 1
86779: ST_TO_ADDR
// ext_list := Delete ( ext_list , 1 ) ;
86780: LD_ADDR_VAR 0 5
86784: PUSH
86785: LD_VAR 0 5
86789: PPUSH
86790: LD_INT 1
86792: PPUSH
86793: CALL_OW 3
86797: ST_TO_ADDR
// if not ext_list then
86798: LD_VAR 0 5
86802: NOT
86803: IFFALSE 86809
// exit ;
86805: POP
86806: POP
86807: GO 86813
// end ;
86809: GO 86684
86811: POP
86812: POP
// end ;
86813: LD_VAR 0 6
86817: RET
// export function MC_SetAllowedTurretWeapons ( base , weapon_list ) ; begin
86818: LD_INT 0
86820: PPUSH
// if not mc_bases or not base or not weapon_list then
86821: LD_EXP 36
86825: NOT
86826: PUSH
86827: LD_VAR 0 1
86831: NOT
86832: OR
86833: PUSH
86834: LD_VAR 0 2
86838: NOT
86839: OR
86840: IFFALSE 86844
// exit ;
86842: GO 86869
// mc_allowed_tower_weapons := Replace ( mc_allowed_tower_weapons , base , weapon_list ) ;
86844: LD_ADDR_EXP 75
86848: PUSH
86849: LD_EXP 75
86853: PPUSH
86854: LD_VAR 0 1
86858: PPUSH
86859: LD_VAR 0 2
86863: PPUSH
86864: CALL_OW 1
86868: ST_TO_ADDR
// end ;
86869: LD_VAR 0 3
86873: RET
// export function MC_SetTechList ( base , tech_list ) ; begin
86874: LD_INT 0
86876: PPUSH
// if not mc_bases or not base or not tech_list then
86877: LD_EXP 36
86881: NOT
86882: PUSH
86883: LD_VAR 0 1
86887: NOT
86888: OR
86889: PUSH
86890: LD_VAR 0 2
86894: NOT
86895: OR
86896: IFFALSE 86900
// exit ;
86898: GO 86925
// mc_tech := Replace ( mc_tech , base , tech_list ) ;
86900: LD_ADDR_EXP 63
86904: PUSH
86905: LD_EXP 63
86909: PPUSH
86910: LD_VAR 0 1
86914: PPUSH
86915: LD_VAR 0 2
86919: PPUSH
86920: CALL_OW 1
86924: ST_TO_ADDR
// end ;
86925: LD_VAR 0 3
86929: RET
// export function MC_SetParkingArea ( base , parking_area ) ; begin
86930: LD_INT 0
86932: PPUSH
// if not mc_bases or not parking_area or not base then
86933: LD_EXP 36
86937: NOT
86938: PUSH
86939: LD_VAR 0 2
86943: NOT
86944: OR
86945: PUSH
86946: LD_VAR 0 1
86950: NOT
86951: OR
86952: IFFALSE 86956
// exit ;
86954: GO 86981
// mc_parking := Replace ( mc_parking , base , parking_area ) ;
86956: LD_ADDR_EXP 60
86960: PUSH
86961: LD_EXP 60
86965: PPUSH
86966: LD_VAR 0 1
86970: PPUSH
86971: LD_VAR 0 2
86975: PPUSH
86976: CALL_OW 1
86980: ST_TO_ADDR
// end ;
86981: LD_VAR 0 3
86985: RET
// export function MC_SetScanArea ( base , scan_area ) ; begin
86986: LD_INT 0
86988: PPUSH
// if not mc_bases or not base or not scan_area then
86989: LD_EXP 36
86993: NOT
86994: PUSH
86995: LD_VAR 0 1
86999: NOT
87000: OR
87001: PUSH
87002: LD_VAR 0 2
87006: NOT
87007: OR
87008: IFFALSE 87012
// exit ;
87010: GO 87037
// mc_scan_area := Replace ( mc_scan_area , base , scan_area ) ;
87012: LD_ADDR_EXP 61
87016: PUSH
87017: LD_EXP 61
87021: PPUSH
87022: LD_VAR 0 1
87026: PPUSH
87027: LD_VAR 0 2
87031: PPUSH
87032: CALL_OW 1
87036: ST_TO_ADDR
// end ;
87037: LD_VAR 0 3
87041: RET
// export function MC_NotTameApeman ( base ) ; var ape_techs ; begin
87042: LD_INT 0
87044: PPUSH
87045: PPUSH
// if not mc_bases or not base then
87046: LD_EXP 36
87050: NOT
87051: PUSH
87052: LD_VAR 0 1
87056: NOT
87057: OR
87058: IFFALSE 87062
// exit ;
87060: GO 87126
// ape_techs := [ 1 , 2 , 3 , 4 , 11 ] ;
87062: LD_ADDR_VAR 0 3
87066: PUSH
87067: LD_INT 1
87069: PUSH
87070: LD_INT 2
87072: PUSH
87073: LD_INT 3
87075: PUSH
87076: LD_INT 4
87078: PUSH
87079: LD_INT 11
87081: PUSH
87082: EMPTY
87083: LIST
87084: LIST
87085: LIST
87086: LIST
87087: LIST
87088: ST_TO_ADDR
// mc_tech := Replace ( mc_tech , base , mc_tech [ base ] diff ape_techs ) ;
87089: LD_ADDR_EXP 63
87093: PUSH
87094: LD_EXP 63
87098: PPUSH
87099: LD_VAR 0 1
87103: PPUSH
87104: LD_EXP 63
87108: PUSH
87109: LD_VAR 0 1
87113: ARRAY
87114: PUSH
87115: LD_VAR 0 3
87119: DIFF
87120: PPUSH
87121: CALL_OW 1
87125: ST_TO_ADDR
// end ;
87126: LD_VAR 0 2
87130: RET
// export function MC_GetVehicles ( base , onlyCombat ) ; begin
87131: LD_INT 0
87133: PPUSH
// result := mc_vehicles [ base ] ;
87134: LD_ADDR_VAR 0 3
87138: PUSH
87139: LD_EXP 55
87143: PUSH
87144: LD_VAR 0 1
87148: ARRAY
87149: ST_TO_ADDR
// if onlyCombat then
87150: LD_VAR 0 2
87154: IFFALSE 87319
// result := result diff UnitFilter ( result , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , us_crane ] , [ f_weapon , ru_crane ] , [ f_weapon , us_bulldozer ] , [ f_weapon , ru_bulldozer ] , [ f_weapon , ru_radar ] , [ f_weapon , ar_control_tower ] , [ f_weapon , ru_siberium_rocket ] , [ f_weapon , us_siberium_rocket ] ] ) ;
87156: LD_ADDR_VAR 0 3
87160: PUSH
87161: LD_VAR 0 3
87165: PUSH
87166: LD_VAR 0 3
87170: PPUSH
87171: LD_INT 2
87173: PUSH
87174: LD_INT 34
87176: PUSH
87177: LD_INT 12
87179: PUSH
87180: EMPTY
87181: LIST
87182: LIST
87183: PUSH
87184: LD_INT 34
87186: PUSH
87187: LD_INT 51
87189: PUSH
87190: EMPTY
87191: LIST
87192: LIST
87193: PUSH
87194: LD_INT 34
87196: PUSH
87197: LD_EXP 30
87201: PUSH
87202: EMPTY
87203: LIST
87204: LIST
87205: PUSH
87206: LD_INT 34
87208: PUSH
87209: LD_INT 32
87211: PUSH
87212: EMPTY
87213: LIST
87214: LIST
87215: PUSH
87216: LD_INT 34
87218: PUSH
87219: LD_INT 13
87221: PUSH
87222: EMPTY
87223: LIST
87224: LIST
87225: PUSH
87226: LD_INT 34
87228: PUSH
87229: LD_INT 52
87231: PUSH
87232: EMPTY
87233: LIST
87234: LIST
87235: PUSH
87236: LD_INT 34
87238: PUSH
87239: LD_INT 14
87241: PUSH
87242: EMPTY
87243: LIST
87244: LIST
87245: PUSH
87246: LD_INT 34
87248: PUSH
87249: LD_INT 53
87251: PUSH
87252: EMPTY
87253: LIST
87254: LIST
87255: PUSH
87256: LD_INT 34
87258: PUSH
87259: LD_EXP 29
87263: PUSH
87264: EMPTY
87265: LIST
87266: LIST
87267: PUSH
87268: LD_INT 34
87270: PUSH
87271: LD_INT 31
87273: PUSH
87274: EMPTY
87275: LIST
87276: LIST
87277: PUSH
87278: LD_INT 34
87280: PUSH
87281: LD_INT 48
87283: PUSH
87284: EMPTY
87285: LIST
87286: LIST
87287: PUSH
87288: LD_INT 34
87290: PUSH
87291: LD_INT 8
87293: PUSH
87294: EMPTY
87295: LIST
87296: LIST
87297: PUSH
87298: EMPTY
87299: LIST
87300: LIST
87301: LIST
87302: LIST
87303: LIST
87304: LIST
87305: LIST
87306: LIST
87307: LIST
87308: LIST
87309: LIST
87310: LIST
87311: LIST
87312: PPUSH
87313: CALL_OW 72
87317: DIFF
87318: ST_TO_ADDR
// end ; end_of_file
87319: LD_VAR 0 3
87323: RET
// export function MCE_ApemanTamed ( ape , sci ) ; var i , tmp ; begin
87324: LD_INT 0
87326: PPUSH
87327: PPUSH
87328: PPUSH
// if not mc_bases or not skirmish then
87329: LD_EXP 36
87333: NOT
87334: PUSH
87335: LD_EXP 34
87339: NOT
87340: OR
87341: IFFALSE 87345
// exit ;
87343: GO 87510
// for i = 1 to mc_bases do
87345: LD_ADDR_VAR 0 4
87349: PUSH
87350: DOUBLE
87351: LD_INT 1
87353: DEC
87354: ST_TO_ADDR
87355: LD_EXP 36
87359: PUSH
87360: FOR_TO
87361: IFFALSE 87508
// begin if sci in mc_bases [ i ] then
87363: LD_VAR 0 2
87367: PUSH
87368: LD_EXP 36
87372: PUSH
87373: LD_VAR 0 4
87377: ARRAY
87378: IN
87379: IFFALSE 87506
// begin mc_ape := ReplaceIn ( mc_ape , [ i , mc_ape [ i ] + 1 ] , ape ) ;
87381: LD_ADDR_EXP 65
87385: PUSH
87386: LD_EXP 65
87390: PPUSH
87391: LD_VAR 0 4
87395: PUSH
87396: LD_EXP 65
87400: PUSH
87401: LD_VAR 0 4
87405: ARRAY
87406: PUSH
87407: LD_INT 1
87409: PLUS
87410: PUSH
87411: EMPTY
87412: LIST
87413: LIST
87414: PPUSH
87415: LD_VAR 0 1
87419: PPUSH
87420: CALL 26637 0 3
87424: ST_TO_ADDR
// tmp := NearestUnitToUnit ( UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) , ape ) ;
87425: LD_ADDR_VAR 0 5
87429: PUSH
87430: LD_EXP 36
87434: PUSH
87435: LD_VAR 0 4
87439: ARRAY
87440: PPUSH
87441: LD_INT 2
87443: PUSH
87444: LD_INT 30
87446: PUSH
87447: LD_INT 0
87449: PUSH
87450: EMPTY
87451: LIST
87452: LIST
87453: PUSH
87454: LD_INT 30
87456: PUSH
87457: LD_INT 1
87459: PUSH
87460: EMPTY
87461: LIST
87462: LIST
87463: PUSH
87464: EMPTY
87465: LIST
87466: LIST
87467: LIST
87468: PPUSH
87469: CALL_OW 72
87473: PPUSH
87474: LD_VAR 0 1
87478: PPUSH
87479: CALL_OW 74
87483: ST_TO_ADDR
// if tmp then
87484: LD_VAR 0 5
87488: IFFALSE 87504
// ComStandNearbyBuilding ( ape , tmp ) ;
87490: LD_VAR 0 1
87494: PPUSH
87495: LD_VAR 0 5
87499: PPUSH
87500: CALL 21314 0 2
// break ;
87504: GO 87508
// end ; end ;
87506: GO 87360
87508: POP
87509: POP
// end ;
87510: LD_VAR 0 3
87514: RET
// export function MCE_EnterBuilding ( building , unit ) ; var i , tmp ; begin
87515: LD_INT 0
87517: PPUSH
87518: PPUSH
87519: PPUSH
// if not mc_bases or not skirmish then
87520: LD_EXP 36
87524: NOT
87525: PUSH
87526: LD_EXP 34
87530: NOT
87531: OR
87532: IFFALSE 87536
// exit ;
87534: GO 87625
// for i = 1 to mc_bases do
87536: LD_ADDR_VAR 0 4
87540: PUSH
87541: DOUBLE
87542: LD_INT 1
87544: DEC
87545: ST_TO_ADDR
87546: LD_EXP 36
87550: PUSH
87551: FOR_TO
87552: IFFALSE 87623
// begin if building in mc_busy_turret_list [ i ] then
87554: LD_VAR 0 1
87558: PUSH
87559: LD_EXP 46
87563: PUSH
87564: LD_VAR 0 4
87568: ARRAY
87569: IN
87570: IFFALSE 87621
// begin tmp := mc_busy_turret_list [ i ] diff building ;
87572: LD_ADDR_VAR 0 5
87576: PUSH
87577: LD_EXP 46
87581: PUSH
87582: LD_VAR 0 4
87586: ARRAY
87587: PUSH
87588: LD_VAR 0 1
87592: DIFF
87593: ST_TO_ADDR
// mc_busy_turret_list := Replace ( mc_busy_turret_list , i , tmp ) ;
87594: LD_ADDR_EXP 46
87598: PUSH
87599: LD_EXP 46
87603: PPUSH
87604: LD_VAR 0 4
87608: PPUSH
87609: LD_VAR 0 5
87613: PPUSH
87614: CALL_OW 1
87618: ST_TO_ADDR
// break ;
87619: GO 87623
// end ; end ;
87621: GO 87551
87623: POP
87624: POP
// end ;
87625: LD_VAR 0 3
87629: RET
// export function MCE_BuildingCaptured ( building , side , capturning_unit ) ; var i , tmp ; begin
87630: LD_INT 0
87632: PPUSH
87633: PPUSH
87634: PPUSH
// if not mc_bases or not skirmish then
87635: LD_EXP 36
87639: NOT
87640: PUSH
87641: LD_EXP 34
87645: NOT
87646: OR
87647: IFFALSE 87651
// exit ;
87649: GO 87850
// for i = 1 to mc_bases do
87651: LD_ADDR_VAR 0 5
87655: PUSH
87656: DOUBLE
87657: LD_INT 1
87659: DEC
87660: ST_TO_ADDR
87661: LD_EXP 36
87665: PUSH
87666: FOR_TO
87667: IFFALSE 87848
// if building in mc_bases [ i ] then
87669: LD_VAR 0 1
87673: PUSH
87674: LD_EXP 36
87678: PUSH
87679: LD_VAR 0 5
87683: ARRAY
87684: IN
87685: IFFALSE 87846
// begin tmp := mc_bases [ i ] diff building ;
87687: LD_ADDR_VAR 0 6
87691: PUSH
87692: LD_EXP 36
87696: PUSH
87697: LD_VAR 0 5
87701: ARRAY
87702: PUSH
87703: LD_VAR 0 1
87707: DIFF
87708: ST_TO_ADDR
// mc_bases := Replace ( mc_bases , i , tmp ) ;
87709: LD_ADDR_EXP 36
87713: PUSH
87714: LD_EXP 36
87718: PPUSH
87719: LD_VAR 0 5
87723: PPUSH
87724: LD_VAR 0 6
87728: PPUSH
87729: CALL_OW 1
87733: ST_TO_ADDR
// if building in mc_turret_list [ i ] then
87734: LD_VAR 0 1
87738: PUSH
87739: LD_EXP 44
87743: PUSH
87744: LD_VAR 0 5
87748: ARRAY
87749: IN
87750: IFFALSE 87789
// mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff building ) ;
87752: LD_ADDR_EXP 44
87756: PUSH
87757: LD_EXP 44
87761: PPUSH
87762: LD_VAR 0 5
87766: PPUSH
87767: LD_EXP 44
87771: PUSH
87772: LD_VAR 0 5
87776: ARRAY
87777: PUSH
87778: LD_VAR 0 1
87782: DIFF
87783: PPUSH
87784: CALL_OW 1
87788: ST_TO_ADDR
// if building in mc_empty_turret_list [ i ] then
87789: LD_VAR 0 1
87793: PUSH
87794: LD_EXP 45
87798: PUSH
87799: LD_VAR 0 5
87803: ARRAY
87804: IN
87805: IFFALSE 87844
// mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff building ) ;
87807: LD_ADDR_EXP 45
87811: PUSH
87812: LD_EXP 45
87816: PPUSH
87817: LD_VAR 0 5
87821: PPUSH
87822: LD_EXP 45
87826: PUSH
87827: LD_VAR 0 5
87831: ARRAY
87832: PUSH
87833: LD_VAR 0 1
87837: DIFF
87838: PPUSH
87839: CALL_OW 1
87843: ST_TO_ADDR
// break ;
87844: GO 87848
// end ;
87846: GO 87666
87848: POP
87849: POP
// end ;
87850: LD_VAR 0 4
87854: RET
// export function MCE_VehicleCaptured ( new , old , side , capturing_unit ) ; var i , tmp ; begin
87855: LD_INT 0
87857: PPUSH
87858: PPUSH
87859: PPUSH
// if not mc_bases or not skirmish or not side in mc_sides then
87860: LD_EXP 36
87864: NOT
87865: PUSH
87866: LD_EXP 34
87870: NOT
87871: OR
87872: PUSH
87873: LD_VAR 0 3
87877: PUSH
87878: LD_EXP 62
87882: IN
87883: NOT
87884: OR
87885: IFFALSE 87889
// exit ;
87887: GO 88012
// for i = 1 to mc_vehicles do
87889: LD_ADDR_VAR 0 6
87893: PUSH
87894: DOUBLE
87895: LD_INT 1
87897: DEC
87898: ST_TO_ADDR
87899: LD_EXP 55
87903: PUSH
87904: FOR_TO
87905: IFFALSE 88010
// if old in mc_vehicles [ i ] or new in mc_vehicles [ i ] then
87907: LD_VAR 0 2
87911: PUSH
87912: LD_EXP 55
87916: PUSH
87917: LD_VAR 0 6
87921: ARRAY
87922: IN
87923: PUSH
87924: LD_VAR 0 1
87928: PUSH
87929: LD_EXP 55
87933: PUSH
87934: LD_VAR 0 6
87938: ARRAY
87939: IN
87940: OR
87941: IFFALSE 88008
// begin tmp := mc_vehicles [ i ] diff old ;
87943: LD_ADDR_VAR 0 7
87947: PUSH
87948: LD_EXP 55
87952: PUSH
87953: LD_VAR 0 6
87957: ARRAY
87958: PUSH
87959: LD_VAR 0 2
87963: DIFF
87964: ST_TO_ADDR
// tmp := tmp diff new ;
87965: LD_ADDR_VAR 0 7
87969: PUSH
87970: LD_VAR 0 7
87974: PUSH
87975: LD_VAR 0 1
87979: DIFF
87980: ST_TO_ADDR
// mc_vehicles := Replace ( mc_vehicles , i , tmp ) ;
87981: LD_ADDR_EXP 55
87985: PUSH
87986: LD_EXP 55
87990: PPUSH
87991: LD_VAR 0 6
87995: PPUSH
87996: LD_VAR 0 7
88000: PPUSH
88001: CALL_OW 1
88005: ST_TO_ADDR
// break ;
88006: GO 88010
// end ;
88008: GO 87904
88010: POP
88011: POP
// end ;
88012: LD_VAR 0 5
88016: RET
// export function MCE_VehicleConstructed ( vehicle , factory ) ; var i , side , tmp ; begin
88017: LD_INT 0
88019: PPUSH
88020: PPUSH
88021: PPUSH
88022: PPUSH
// if not mc_bases or not skirmish then
88023: LD_EXP 36
88027: NOT
88028: PUSH
88029: LD_EXP 34
88033: NOT
88034: OR
88035: IFFALSE 88039
// exit ;
88037: GO 88422
// side := GetSide ( vehicle ) ;
88039: LD_ADDR_VAR 0 5
88043: PUSH
88044: LD_VAR 0 1
88048: PPUSH
88049: CALL_OW 255
88053: ST_TO_ADDR
// for i = 1 to mc_bases do
88054: LD_ADDR_VAR 0 4
88058: PUSH
88059: DOUBLE
88060: LD_INT 1
88062: DEC
88063: ST_TO_ADDR
88064: LD_EXP 36
88068: PUSH
88069: FOR_TO
88070: IFFALSE 88420
// begin if factory in mc_bases [ i ] then
88072: LD_VAR 0 2
88076: PUSH
88077: LD_EXP 36
88081: PUSH
88082: LD_VAR 0 4
88086: ARRAY
88087: IN
88088: IFFALSE 88418
// begin if mc_defender [ i ] < mc_defender_limit [ i ] and not GetWeapon ( vehicle ) in [ ar_control_tower , ar_cargo_bay , ru_cargo_bay , ru_big_cargo_bay , us_cargo_bay , ar_radar , ru_radar , us_radar , ru_bulldozer , us_bulldozer , ar_bio_bomb , ar_selfpropelled_bomb , us_hack , us_crane , ru_crane , ru_siberium_rocket , us_siberium_rocket ] then
88090: LD_EXP 58
88094: PUSH
88095: LD_VAR 0 4
88099: ARRAY
88100: PUSH
88101: LD_EXP 47
88105: PUSH
88106: LD_VAR 0 4
88110: ARRAY
88111: LESS
88112: PUSH
88113: LD_VAR 0 1
88117: PPUSH
88118: CALL_OW 264
88122: PUSH
88123: LD_INT 31
88125: PUSH
88126: LD_INT 32
88128: PUSH
88129: LD_INT 51
88131: PUSH
88132: LD_EXP 30
88136: PUSH
88137: LD_INT 12
88139: PUSH
88140: LD_INT 30
88142: PUSH
88143: LD_EXP 29
88147: PUSH
88148: LD_INT 11
88150: PUSH
88151: LD_INT 53
88153: PUSH
88154: LD_INT 14
88156: PUSH
88157: LD_EXP 33
88161: PUSH
88162: LD_INT 29
88164: PUSH
88165: LD_EXP 31
88169: PUSH
88170: LD_INT 13
88172: PUSH
88173: LD_INT 52
88175: PUSH
88176: LD_INT 48
88178: PUSH
88179: LD_INT 8
88181: PUSH
88182: EMPTY
88183: LIST
88184: LIST
88185: LIST
88186: LIST
88187: LIST
88188: LIST
88189: LIST
88190: LIST
88191: LIST
88192: LIST
88193: LIST
88194: LIST
88195: LIST
88196: LIST
88197: LIST
88198: LIST
88199: LIST
88200: IN
88201: NOT
88202: AND
88203: IFFALSE 88244
// mc_defender := Replace ( mc_defender , i , mc_defender [ i ] ^ vehicle ) else
88205: LD_ADDR_EXP 58
88209: PUSH
88210: LD_EXP 58
88214: PPUSH
88215: LD_VAR 0 4
88219: PPUSH
88220: LD_EXP 58
88224: PUSH
88225: LD_VAR 0 4
88229: ARRAY
88230: PUSH
88231: LD_VAR 0 1
88235: ADD
88236: PPUSH
88237: CALL_OW 1
88241: ST_TO_ADDR
88242: GO 88288
// mc_vehicles := ReplaceIn ( mc_vehicles , [ i , mc_vehicles [ i ] + 1 ] , vehicle ) ;
88244: LD_ADDR_EXP 55
88248: PUSH
88249: LD_EXP 55
88253: PPUSH
88254: LD_VAR 0 4
88258: PUSH
88259: LD_EXP 55
88263: PUSH
88264: LD_VAR 0 4
88268: ARRAY
88269: PUSH
88270: LD_INT 1
88272: PLUS
88273: PUSH
88274: EMPTY
88275: LIST
88276: LIST
88277: PPUSH
88278: LD_VAR 0 1
88282: PPUSH
88283: CALL 26637 0 3
88287: ST_TO_ADDR
// if not mc_scan [ i ] then
88288: LD_EXP 59
88292: PUSH
88293: LD_VAR 0 4
88297: ARRAY
88298: NOT
88299: IFFALSE 88418
// begin if GetControl ( vehicle ) = control_remote then
88301: LD_VAR 0 1
88305: PPUSH
88306: CALL_OW 263
88310: PUSH
88311: LD_INT 2
88313: EQUAL
88314: IFFALSE 88334
// repeat wait ( 0 0$1 ) ;
88316: LD_INT 35
88318: PPUSH
88319: CALL_OW 67
// until IsControledBy ( vehicle ) ;
88323: LD_VAR 0 1
88327: PPUSH
88328: CALL_OW 312
88332: IFFALSE 88316
// ComMoveToArea ( vehicle , mc_parking [ i ] ) ;
88334: LD_VAR 0 1
88338: PPUSH
88339: LD_EXP 60
88343: PUSH
88344: LD_VAR 0 4
88348: ARRAY
88349: PPUSH
88350: CALL_OW 113
// if GetControl ( vehicle ) <> control_manual then
88354: LD_VAR 0 1
88358: PPUSH
88359: CALL_OW 263
88363: PUSH
88364: LD_INT 1
88366: NONEQUAL
88367: IFFALSE 88371
// break ;
88369: GO 88420
// repeat wait ( 0 0$1 ) ;
88371: LD_INT 35
88373: PPUSH
88374: CALL_OW 67
// until IsInArea ( vehicle , mc_parking [ i ] ) ;
88378: LD_VAR 0 1
88382: PPUSH
88383: LD_EXP 60
88387: PUSH
88388: LD_VAR 0 4
88392: ARRAY
88393: PPUSH
88394: CALL_OW 308
88398: IFFALSE 88371
// ComExitVehicle ( IsDrivenBy ( vehicle ) ) ;
88400: LD_VAR 0 1
88404: PPUSH
88405: CALL_OW 311
88409: PPUSH
88410: CALL_OW 121
// exit ;
88414: POP
88415: POP
88416: GO 88422
// end ; end ; end ;
88418: GO 88069
88420: POP
88421: POP
// end ;
88422: LD_VAR 0 3
88426: RET
// export function MCE_CrateSpawn ( id , x , y , amount , mode ) ; var i , j , depot ; begin
88427: LD_INT 0
88429: PPUSH
88430: PPUSH
88431: PPUSH
88432: PPUSH
// if not mc_bases or not skirmish then
88433: LD_EXP 36
88437: NOT
88438: PUSH
88439: LD_EXP 34
88443: NOT
88444: OR
88445: IFFALSE 88449
// exit ;
88447: GO 88802
// repeat wait ( 0 0$1 ) ;
88449: LD_INT 35
88451: PPUSH
88452: CALL_OW 67
// until GetResourceAmountXY ( x , y ) ;
88456: LD_VAR 0 2
88460: PPUSH
88461: LD_VAR 0 3
88465: PPUSH
88466: CALL_OW 284
88470: IFFALSE 88449
// if GetResourceTypeXY ( x , y ) = mat_artefact then
88472: LD_VAR 0 2
88476: PPUSH
88477: LD_VAR 0 3
88481: PPUSH
88482: CALL_OW 283
88486: PUSH
88487: LD_INT 4
88489: EQUAL
88490: IFFALSE 88494
// exit ;
88492: GO 88802
// for i = 1 to mc_bases do
88494: LD_ADDR_VAR 0 7
88498: PUSH
88499: DOUBLE
88500: LD_INT 1
88502: DEC
88503: ST_TO_ADDR
88504: LD_EXP 36
88508: PUSH
88509: FOR_TO
88510: IFFALSE 88800
// begin if mc_crates_area [ i ] then
88512: LD_EXP 54
88516: PUSH
88517: LD_VAR 0 7
88521: ARRAY
88522: IFFALSE 88633
// for j in mc_crates_area [ i ] do
88524: LD_ADDR_VAR 0 8
88528: PUSH
88529: LD_EXP 54
88533: PUSH
88534: LD_VAR 0 7
88538: ARRAY
88539: PUSH
88540: FOR_IN
88541: IFFALSE 88631
// if InArea ( x , y , j ) then
88543: LD_VAR 0 2
88547: PPUSH
88548: LD_VAR 0 3
88552: PPUSH
88553: LD_VAR 0 8
88557: PPUSH
88558: CALL_OW 309
88562: IFFALSE 88629
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
88564: LD_ADDR_EXP 52
88568: PUSH
88569: LD_EXP 52
88573: PPUSH
88574: LD_VAR 0 7
88578: PUSH
88579: LD_EXP 52
88583: PUSH
88584: LD_VAR 0 7
88588: ARRAY
88589: PUSH
88590: LD_INT 1
88592: PLUS
88593: PUSH
88594: EMPTY
88595: LIST
88596: LIST
88597: PPUSH
88598: LD_VAR 0 4
88602: PUSH
88603: LD_VAR 0 2
88607: PUSH
88608: LD_VAR 0 3
88612: PUSH
88613: EMPTY
88614: LIST
88615: LIST
88616: LIST
88617: PPUSH
88618: CALL 26637 0 3
88622: ST_TO_ADDR
// exit ;
88623: POP
88624: POP
88625: POP
88626: POP
88627: GO 88802
// end ;
88629: GO 88540
88631: POP
88632: POP
// depot := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) ;
88633: LD_ADDR_VAR 0 9
88637: PUSH
88638: LD_EXP 36
88642: PUSH
88643: LD_VAR 0 7
88647: ARRAY
88648: PPUSH
88649: LD_INT 2
88651: PUSH
88652: LD_INT 30
88654: PUSH
88655: LD_INT 0
88657: PUSH
88658: EMPTY
88659: LIST
88660: LIST
88661: PUSH
88662: LD_INT 30
88664: PUSH
88665: LD_INT 1
88667: PUSH
88668: EMPTY
88669: LIST
88670: LIST
88671: PUSH
88672: EMPTY
88673: LIST
88674: LIST
88675: LIST
88676: PPUSH
88677: CALL_OW 72
88681: ST_TO_ADDR
// if not depot then
88682: LD_VAR 0 9
88686: NOT
88687: IFFALSE 88691
// continue ;
88689: GO 88509
// for j in depot do
88691: LD_ADDR_VAR 0 8
88695: PUSH
88696: LD_VAR 0 9
88700: PUSH
88701: FOR_IN
88702: IFFALSE 88796
// if GetDistUnitXY ( j , x , y ) < 30 then
88704: LD_VAR 0 8
88708: PPUSH
88709: LD_VAR 0 2
88713: PPUSH
88714: LD_VAR 0 3
88718: PPUSH
88719: CALL_OW 297
88723: PUSH
88724: LD_INT 30
88726: LESS
88727: IFFALSE 88794
// begin mc_crates := ReplaceIn ( mc_crates , [ i , mc_crates [ i ] + 1 ] , [ amount , x , y ] ) ;
88729: LD_ADDR_EXP 52
88733: PUSH
88734: LD_EXP 52
88738: PPUSH
88739: LD_VAR 0 7
88743: PUSH
88744: LD_EXP 52
88748: PUSH
88749: LD_VAR 0 7
88753: ARRAY
88754: PUSH
88755: LD_INT 1
88757: PLUS
88758: PUSH
88759: EMPTY
88760: LIST
88761: LIST
88762: PPUSH
88763: LD_VAR 0 4
88767: PUSH
88768: LD_VAR 0 2
88772: PUSH
88773: LD_VAR 0 3
88777: PUSH
88778: EMPTY
88779: LIST
88780: LIST
88781: LIST
88782: PPUSH
88783: CALL 26637 0 3
88787: ST_TO_ADDR
// exit ;
88788: POP
88789: POP
88790: POP
88791: POP
88792: GO 88802
// end ;
88794: GO 88701
88796: POP
88797: POP
// end ;
88798: GO 88509
88800: POP
88801: POP
// end ;
88802: LD_VAR 0 6
88806: RET
// export function MCE_ResearchComplete ( tech , lab ) ; var side , i , tmp ; begin
88807: LD_INT 0
88809: PPUSH
88810: PPUSH
88811: PPUSH
88812: PPUSH
// if not mc_bases or not skirmish then
88813: LD_EXP 36
88817: NOT
88818: PUSH
88819: LD_EXP 34
88823: NOT
88824: OR
88825: IFFALSE 88829
// exit ;
88827: GO 89106
// side := GetSide ( lab ) ;
88829: LD_ADDR_VAR 0 4
88833: PUSH
88834: LD_VAR 0 2
88838: PPUSH
88839: CALL_OW 255
88843: ST_TO_ADDR
// if not side in mc_sides or not mc_tech or not mc_bases then
88844: LD_VAR 0 4
88848: PUSH
88849: LD_EXP 62
88853: IN
88854: NOT
88855: PUSH
88856: LD_EXP 63
88860: NOT
88861: OR
88862: PUSH
88863: LD_EXP 36
88867: NOT
88868: OR
88869: IFFALSE 88873
// exit ;
88871: GO 89106
// mc_tech := Replace ( mc_tech , side , mc_tech [ side ] diff tech ) ;
88873: LD_ADDR_EXP 63
88877: PUSH
88878: LD_EXP 63
88882: PPUSH
88883: LD_VAR 0 4
88887: PPUSH
88888: LD_EXP 63
88892: PUSH
88893: LD_VAR 0 4
88897: ARRAY
88898: PUSH
88899: LD_VAR 0 1
88903: DIFF
88904: PPUSH
88905: CALL_OW 1
88909: ST_TO_ADDR
// for i = 1 to mc_bases do
88910: LD_ADDR_VAR 0 5
88914: PUSH
88915: DOUBLE
88916: LD_INT 1
88918: DEC
88919: ST_TO_ADDR
88920: LD_EXP 36
88924: PUSH
88925: FOR_TO
88926: IFFALSE 89104
// begin if lab in mc_bases [ i ] then
88928: LD_VAR 0 2
88932: PUSH
88933: LD_EXP 36
88937: PUSH
88938: LD_VAR 0 5
88942: ARRAY
88943: IN
88944: IFFALSE 89102
// begin if tech in [ tech_apeagres , tech_apebrain , tech_apeneural , tech_apepsych ] and mc_ape_in_lab [ i ] then
88946: LD_VAR 0 1
88950: PUSH
88951: LD_INT 11
88953: PUSH
88954: LD_INT 4
88956: PUSH
88957: LD_INT 3
88959: PUSH
88960: LD_INT 2
88962: PUSH
88963: EMPTY
88964: LIST
88965: LIST
88966: LIST
88967: LIST
88968: IN
88969: PUSH
88970: LD_EXP 66
88974: PUSH
88975: LD_VAR 0 5
88979: ARRAY
88980: AND
88981: IFFALSE 89102
// begin tmp := mc_ape_in_lab [ i ] [ 1 ] ;
88983: LD_ADDR_VAR 0 6
88987: PUSH
88988: LD_EXP 66
88992: PUSH
88993: LD_VAR 0 5
88997: ARRAY
88998: PUSH
88999: LD_INT 1
89001: ARRAY
89002: ST_TO_ADDR
// mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
89003: LD_ADDR_EXP 66
89007: PUSH
89008: LD_EXP 66
89012: PPUSH
89013: LD_VAR 0 5
89017: PPUSH
89018: EMPTY
89019: PPUSH
89020: CALL_OW 1
89024: ST_TO_ADDR
// SetTag ( tmp , 0 ) ;
89025: LD_VAR 0 6
89029: PPUSH
89030: LD_INT 0
89032: PPUSH
89033: CALL_OW 109
// ComExitBuilding ( tmp ) ;
89037: LD_VAR 0 6
89041: PPUSH
89042: CALL_OW 122
// mc_ape := Replace ( mc_ape , i , Insert ( mc_ape [ i ] , 1 , tmp ) ) ;
89046: LD_ADDR_EXP 65
89050: PUSH
89051: LD_EXP 65
89055: PPUSH
89056: LD_VAR 0 5
89060: PPUSH
89061: LD_EXP 65
89065: PUSH
89066: LD_VAR 0 5
89070: ARRAY
89071: PPUSH
89072: LD_INT 1
89074: PPUSH
89075: LD_VAR 0 6
89079: PPUSH
89080: CALL_OW 2
89084: PPUSH
89085: CALL_OW 1
89089: ST_TO_ADDR
// MC_Reset ( i , 112 ) ;
89090: LD_VAR 0 5
89094: PPUSH
89095: LD_INT 112
89097: PPUSH
89098: CALL 66575 0 2
// end ; end ; end ;
89102: GO 88925
89104: POP
89105: POP
// end ;
89106: LD_VAR 0 3
89110: RET
// export function MCE_UnitDestroyed ( un ) ; var i , j , btype , pos , tmp , fac , components ; begin
89111: LD_INT 0
89113: PPUSH
89114: PPUSH
89115: PPUSH
89116: PPUSH
89117: PPUSH
89118: PPUSH
89119: PPUSH
89120: PPUSH
// if not mc_bases or not skirmish then
89121: LD_EXP 36
89125: NOT
89126: PUSH
89127: LD_EXP 34
89131: NOT
89132: OR
89133: IFFALSE 89137
// exit ;
89135: GO 90153
// for i = 1 to mc_bases do
89137: LD_ADDR_VAR 0 3
89141: PUSH
89142: DOUBLE
89143: LD_INT 1
89145: DEC
89146: ST_TO_ADDR
89147: LD_EXP 36
89151: PUSH
89152: FOR_TO
89153: IFFALSE 90151
// if un in mc_bases [ i ] or un in mc_construct_list [ i ] or un in mc_vehicles [ i ] or un in mc_ape [ i ] or un in mc_ape_in_lab [ i ] then
89155: LD_VAR 0 1
89159: PUSH
89160: LD_EXP 36
89164: PUSH
89165: LD_VAR 0 3
89169: ARRAY
89170: IN
89171: PUSH
89172: LD_VAR 0 1
89176: PUSH
89177: LD_EXP 43
89181: PUSH
89182: LD_VAR 0 3
89186: ARRAY
89187: IN
89188: OR
89189: PUSH
89190: LD_VAR 0 1
89194: PUSH
89195: LD_EXP 55
89199: PUSH
89200: LD_VAR 0 3
89204: ARRAY
89205: IN
89206: OR
89207: PUSH
89208: LD_VAR 0 1
89212: PUSH
89213: LD_EXP 65
89217: PUSH
89218: LD_VAR 0 3
89222: ARRAY
89223: IN
89224: OR
89225: PUSH
89226: LD_VAR 0 1
89230: PUSH
89231: LD_EXP 66
89235: PUSH
89236: LD_VAR 0 3
89240: ARRAY
89241: IN
89242: OR
89243: IFFALSE 90149
// begin if un in mc_ape [ i ] then
89245: LD_VAR 0 1
89249: PUSH
89250: LD_EXP 65
89254: PUSH
89255: LD_VAR 0 3
89259: ARRAY
89260: IN
89261: IFFALSE 89300
// begin mc_ape := Replace ( mc_ape , i , mc_ape [ i ] diff un ) ;
89263: LD_ADDR_EXP 65
89267: PUSH
89268: LD_EXP 65
89272: PPUSH
89273: LD_VAR 0 3
89277: PPUSH
89278: LD_EXP 65
89282: PUSH
89283: LD_VAR 0 3
89287: ARRAY
89288: PUSH
89289: LD_VAR 0 1
89293: DIFF
89294: PPUSH
89295: CALL_OW 1
89299: ST_TO_ADDR
// end ; if un in mc_ape_in_lab [ i ] then
89300: LD_VAR 0 1
89304: PUSH
89305: LD_EXP 66
89309: PUSH
89310: LD_VAR 0 3
89314: ARRAY
89315: IN
89316: IFFALSE 89340
// begin mc_ape_in_lab := Replace ( mc_ape_in_lab , i , [ ] ) ;
89318: LD_ADDR_EXP 66
89322: PUSH
89323: LD_EXP 66
89327: PPUSH
89328: LD_VAR 0 3
89332: PPUSH
89333: EMPTY
89334: PPUSH
89335: CALL_OW 1
89339: ST_TO_ADDR
// end ; if GetType ( un ) = unit_vehicle and ( GetTag ( un ) = 20 or un in mc_defender [ i ] ) then
89340: LD_VAR 0 1
89344: PPUSH
89345: CALL_OW 247
89349: PUSH
89350: LD_INT 2
89352: EQUAL
89353: PUSH
89354: LD_VAR 0 1
89358: PPUSH
89359: CALL_OW 110
89363: PUSH
89364: LD_INT 20
89366: EQUAL
89367: PUSH
89368: LD_VAR 0 1
89372: PUSH
89373: LD_EXP 58
89377: PUSH
89378: LD_VAR 0 3
89382: ARRAY
89383: IN
89384: OR
89385: AND
89386: IFFALSE 89489
// begin fac := MC_GetBuilding ( i , b_factory ) ;
89388: LD_ADDR_VAR 0 8
89392: PUSH
89393: LD_VAR 0 3
89397: PPUSH
89398: LD_INT 3
89400: PPUSH
89401: CALL 86148 0 2
89405: ST_TO_ADDR
// if fac then
89406: LD_VAR 0 8
89410: IFFALSE 89489
// begin components := Produce ( fac , GetChassis ( un ) , GetEngine ( un ) , GetControl ( un ) , GetWeapon ( un ) ) ;
89412: LD_ADDR_VAR 0 9
89416: PUSH
89417: LD_VAR 0 8
89421: PPUSH
89422: LD_VAR 0 1
89426: PPUSH
89427: CALL_OW 265
89431: PPUSH
89432: LD_VAR 0 1
89436: PPUSH
89437: CALL_OW 262
89441: PPUSH
89442: LD_VAR 0 1
89446: PPUSH
89447: CALL_OW 263
89451: PPUSH
89452: LD_VAR 0 1
89456: PPUSH
89457: CALL_OW 264
89461: PPUSH
89462: CALL 24237 0 5
89466: ST_TO_ADDR
// if components then
89467: LD_VAR 0 9
89471: IFFALSE 89487
// MC_InsertProduceList ( i , components ) ;
89473: LD_VAR 0 3
89477: PPUSH
89478: LD_VAR 0 9
89482: PPUSH
89483: CALL 85776 0 2
// break ;
89487: GO 90151
// end ; end ; if GetType ( un ) = unit_building then
89489: LD_VAR 0 1
89493: PPUSH
89494: CALL_OW 247
89498: PUSH
89499: LD_INT 3
89501: EQUAL
89502: IFFALSE 89817
// begin btype := GetBType ( un ) ;
89504: LD_ADDR_VAR 0 5
89508: PUSH
89509: LD_VAR 0 1
89513: PPUSH
89514: CALL_OW 266
89518: ST_TO_ADDR
// if btype = b_warehouse then
89519: LD_VAR 0 5
89523: PUSH
89524: LD_INT 1
89526: EQUAL
89527: IFFALSE 89545
// begin btype := b_depot ;
89529: LD_ADDR_VAR 0 5
89533: PUSH
89534: LD_INT 0
89536: ST_TO_ADDR
// pos := 1 ;
89537: LD_ADDR_VAR 0 6
89541: PUSH
89542: LD_INT 1
89544: ST_TO_ADDR
// end ; if btype = b_factory then
89545: LD_VAR 0 5
89549: PUSH
89550: LD_INT 3
89552: EQUAL
89553: IFFALSE 89571
// begin btype := b_workshop ;
89555: LD_ADDR_VAR 0 5
89559: PUSH
89560: LD_INT 2
89562: ST_TO_ADDR
// pos := 1 ;
89563: LD_ADDR_VAR 0 6
89567: PUSH
89568: LD_INT 1
89570: ST_TO_ADDR
// end ; if btype = b_barracks then
89571: LD_VAR 0 5
89575: PUSH
89576: LD_INT 5
89578: EQUAL
89579: IFFALSE 89589
// btype := b_armoury ;
89581: LD_ADDR_VAR 0 5
89585: PUSH
89586: LD_INT 4
89588: ST_TO_ADDR
// if btype in [ b_lab_half , b_lab_full ] then
89589: LD_VAR 0 5
89593: PUSH
89594: LD_INT 7
89596: PUSH
89597: LD_INT 8
89599: PUSH
89600: EMPTY
89601: LIST
89602: LIST
89603: IN
89604: IFFALSE 89614
// btype := b_lab ;
89606: LD_ADDR_VAR 0 5
89610: PUSH
89611: LD_INT 6
89613: ST_TO_ADDR
// mc_build_list := ReplaceIn ( mc_build_list , [ i , mc_build_list [ i ] + 1 ] , [ btype , GetX ( un ) , GetY ( un ) , GetDir ( un ) ] ) ;
89614: LD_ADDR_EXP 41
89618: PUSH
89619: LD_EXP 41
89623: PPUSH
89624: LD_VAR 0 3
89628: PUSH
89629: LD_EXP 41
89633: PUSH
89634: LD_VAR 0 3
89638: ARRAY
89639: PUSH
89640: LD_INT 1
89642: PLUS
89643: PUSH
89644: EMPTY
89645: LIST
89646: LIST
89647: PPUSH
89648: LD_VAR 0 5
89652: PUSH
89653: LD_VAR 0 1
89657: PPUSH
89658: CALL_OW 250
89662: PUSH
89663: LD_VAR 0 1
89667: PPUSH
89668: CALL_OW 251
89672: PUSH
89673: LD_VAR 0 1
89677: PPUSH
89678: CALL_OW 254
89682: PUSH
89683: EMPTY
89684: LIST
89685: LIST
89686: LIST
89687: LIST
89688: PPUSH
89689: CALL 26637 0 3
89693: ST_TO_ADDR
// if pos = 1 then
89694: LD_VAR 0 6
89698: PUSH
89699: LD_INT 1
89701: EQUAL
89702: IFFALSE 89817
// begin tmp := mc_build_list [ i ] ;
89704: LD_ADDR_VAR 0 7
89708: PUSH
89709: LD_EXP 41
89713: PUSH
89714: LD_VAR 0 3
89718: ARRAY
89719: ST_TO_ADDR
// if UnitFilter ( tmp , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) then
89720: LD_VAR 0 7
89724: PPUSH
89725: LD_INT 2
89727: PUSH
89728: LD_INT 30
89730: PUSH
89731: LD_INT 0
89733: PUSH
89734: EMPTY
89735: LIST
89736: LIST
89737: PUSH
89738: LD_INT 30
89740: PUSH
89741: LD_INT 1
89743: PUSH
89744: EMPTY
89745: LIST
89746: LIST
89747: PUSH
89748: EMPTY
89749: LIST
89750: LIST
89751: LIST
89752: PPUSH
89753: CALL_OW 72
89757: IFFALSE 89767
// pos := 2 ;
89759: LD_ADDR_VAR 0 6
89763: PUSH
89764: LD_INT 2
89766: ST_TO_ADDR
// tmp := ReplaceWith ( tmp , pos , tmp ) ;
89767: LD_ADDR_VAR 0 7
89771: PUSH
89772: LD_VAR 0 7
89776: PPUSH
89777: LD_VAR 0 6
89781: PPUSH
89782: LD_VAR 0 7
89786: PPUSH
89787: CALL 26963 0 3
89791: ST_TO_ADDR
// mc_build_list := Replace ( mc_build_list , i , tmp ) ;
89792: LD_ADDR_EXP 41
89796: PUSH
89797: LD_EXP 41
89801: PPUSH
89802: LD_VAR 0 3
89806: PPUSH
89807: LD_VAR 0 7
89811: PPUSH
89812: CALL_OW 1
89816: ST_TO_ADDR
// end ; end ; if un in mc_bases [ i ] then
89817: LD_VAR 0 1
89821: PUSH
89822: LD_EXP 36
89826: PUSH
89827: LD_VAR 0 3
89831: ARRAY
89832: IN
89833: IFFALSE 89872
// begin mc_bases := Replace ( mc_bases , i , mc_bases [ i ] diff un ) ;
89835: LD_ADDR_EXP 36
89839: PUSH
89840: LD_EXP 36
89844: PPUSH
89845: LD_VAR 0 3
89849: PPUSH
89850: LD_EXP 36
89854: PUSH
89855: LD_VAR 0 3
89859: ARRAY
89860: PUSH
89861: LD_VAR 0 1
89865: DIFF
89866: PPUSH
89867: CALL_OW 1
89871: ST_TO_ADDR
// end ; if un in mc_construct_list [ i ] then
89872: LD_VAR 0 1
89876: PUSH
89877: LD_EXP 43
89881: PUSH
89882: LD_VAR 0 3
89886: ARRAY
89887: IN
89888: IFFALSE 89927
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff un ) ;
89890: LD_ADDR_EXP 43
89894: PUSH
89895: LD_EXP 43
89899: PPUSH
89900: LD_VAR 0 3
89904: PPUSH
89905: LD_EXP 43
89909: PUSH
89910: LD_VAR 0 3
89914: ARRAY
89915: PUSH
89916: LD_VAR 0 1
89920: DIFF
89921: PPUSH
89922: CALL_OW 1
89926: ST_TO_ADDR
// end ; if un in mc_vehicles [ i ] then
89927: LD_VAR 0 1
89931: PUSH
89932: LD_EXP 55
89936: PUSH
89937: LD_VAR 0 3
89941: ARRAY
89942: IN
89943: IFFALSE 89982
// begin mc_vehicles := Replace ( mc_vehicles , i , mc_vehicles [ i ] diff un ) ;
89945: LD_ADDR_EXP 55
89949: PUSH
89950: LD_EXP 55
89954: PPUSH
89955: LD_VAR 0 3
89959: PPUSH
89960: LD_EXP 55
89964: PUSH
89965: LD_VAR 0 3
89969: ARRAY
89970: PUSH
89971: LD_VAR 0 1
89975: DIFF
89976: PPUSH
89977: CALL_OW 1
89981: ST_TO_ADDR
// end ; if un in mc_defender [ i ] then
89982: LD_VAR 0 1
89986: PUSH
89987: LD_EXP 58
89991: PUSH
89992: LD_VAR 0 3
89996: ARRAY
89997: IN
89998: IFFALSE 90037
// begin mc_defender := Replace ( mc_defender , i , mc_defender [ i ] diff un ) ;
90000: LD_ADDR_EXP 58
90004: PUSH
90005: LD_EXP 58
90009: PPUSH
90010: LD_VAR 0 3
90014: PPUSH
90015: LD_EXP 58
90019: PUSH
90020: LD_VAR 0 3
90024: ARRAY
90025: PUSH
90026: LD_VAR 0 1
90030: DIFF
90031: PPUSH
90032: CALL_OW 1
90036: ST_TO_ADDR
// end ; if un in mc_empty_turret_list [ i ] then
90037: LD_VAR 0 1
90041: PUSH
90042: LD_EXP 45
90046: PUSH
90047: LD_VAR 0 3
90051: ARRAY
90052: IN
90053: IFFALSE 90092
// begin mc_empty_turret_list := Replace ( mc_empty_turret_list , i , mc_empty_turret_list [ i ] diff un ) ;
90055: LD_ADDR_EXP 45
90059: PUSH
90060: LD_EXP 45
90064: PPUSH
90065: LD_VAR 0 3
90069: PPUSH
90070: LD_EXP 45
90074: PUSH
90075: LD_VAR 0 3
90079: ARRAY
90080: PUSH
90081: LD_VAR 0 1
90085: DIFF
90086: PPUSH
90087: CALL_OW 1
90091: ST_TO_ADDR
// end ; if un in mc_turret_list [ i ] then
90092: LD_VAR 0 1
90096: PUSH
90097: LD_EXP 44
90101: PUSH
90102: LD_VAR 0 3
90106: ARRAY
90107: IN
90108: IFFALSE 90147
// begin mc_turret_list := Replace ( mc_turret_list , i , mc_turret_list [ i ] diff un ) ;
90110: LD_ADDR_EXP 44
90114: PUSH
90115: LD_EXP 44
90119: PPUSH
90120: LD_VAR 0 3
90124: PPUSH
90125: LD_EXP 44
90129: PUSH
90130: LD_VAR 0 3
90134: ARRAY
90135: PUSH
90136: LD_VAR 0 1
90140: DIFF
90141: PPUSH
90142: CALL_OW 1
90146: ST_TO_ADDR
// end ; break ;
90147: GO 90151
// end ;
90149: GO 89152
90151: POP
90152: POP
// end ;
90153: LD_VAR 0 2
90157: RET
// export function MCE_UpgradeComplete ( building ) ; var i , j ; begin
90158: LD_INT 0
90160: PPUSH
90161: PPUSH
90162: PPUSH
// if not mc_bases or not skirmish then
90163: LD_EXP 36
90167: NOT
90168: PUSH
90169: LD_EXP 34
90173: NOT
90174: OR
90175: IFFALSE 90179
// exit ;
90177: GO 90394
// for i = 1 to mc_bases do
90179: LD_ADDR_VAR 0 3
90183: PUSH
90184: DOUBLE
90185: LD_INT 1
90187: DEC
90188: ST_TO_ADDR
90189: LD_EXP 36
90193: PUSH
90194: FOR_TO
90195: IFFALSE 90392
// begin if building in mc_construct_list [ i ] then
90197: LD_VAR 0 1
90201: PUSH
90202: LD_EXP 43
90206: PUSH
90207: LD_VAR 0 3
90211: ARRAY
90212: IN
90213: IFFALSE 90390
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
90215: LD_ADDR_EXP 43
90219: PUSH
90220: LD_EXP 43
90224: PPUSH
90225: LD_VAR 0 3
90229: PPUSH
90230: LD_EXP 43
90234: PUSH
90235: LD_VAR 0 3
90239: ARRAY
90240: PUSH
90241: LD_VAR 0 1
90245: DIFF
90246: PPUSH
90247: CALL_OW 1
90251: ST_TO_ADDR
// if building in mc_lab [ i ] then
90252: LD_VAR 0 1
90256: PUSH
90257: LD_EXP 69
90261: PUSH
90262: LD_VAR 0 3
90266: ARRAY
90267: IN
90268: IFFALSE 90323
// mc_lab_upgrade := Replace ( mc_lab_upgrade , i , Reindex ( mc_lab_upgrade [ i ] , 1 , mc_lab_upgrade [ i ] , false ) ) ;
90270: LD_ADDR_EXP 70
90274: PUSH
90275: LD_EXP 70
90279: PPUSH
90280: LD_VAR 0 3
90284: PPUSH
90285: LD_EXP 70
90289: PUSH
90290: LD_VAR 0 3
90294: ARRAY
90295: PPUSH
90296: LD_INT 1
90298: PPUSH
90299: LD_EXP 70
90303: PUSH
90304: LD_VAR 0 3
90308: ARRAY
90309: PPUSH
90310: LD_INT 0
90312: PPUSH
90313: CALL 26055 0 4
90317: PPUSH
90318: CALL_OW 1
90322: ST_TO_ADDR
// if not building in mc_bases [ i ] then
90323: LD_VAR 0 1
90327: PUSH
90328: LD_EXP 36
90332: PUSH
90333: LD_VAR 0 3
90337: ARRAY
90338: IN
90339: NOT
90340: IFFALSE 90386
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
90342: LD_ADDR_EXP 36
90346: PUSH
90347: LD_EXP 36
90351: PPUSH
90352: LD_VAR 0 3
90356: PUSH
90357: LD_EXP 36
90361: PUSH
90362: LD_VAR 0 3
90366: ARRAY
90367: PUSH
90368: LD_INT 1
90370: PLUS
90371: PUSH
90372: EMPTY
90373: LIST
90374: LIST
90375: PPUSH
90376: LD_VAR 0 1
90380: PPUSH
90381: CALL 26637 0 3
90385: ST_TO_ADDR
// exit ;
90386: POP
90387: POP
90388: GO 90394
// end ; end ;
90390: GO 90194
90392: POP
90393: POP
// end ;
90394: LD_VAR 0 2
90398: RET
// export function MCE_BuildingComplete ( building ) ; var i , j , btype , tmp , units , side ; begin
90399: LD_INT 0
90401: PPUSH
90402: PPUSH
90403: PPUSH
90404: PPUSH
90405: PPUSH
90406: PPUSH
90407: PPUSH
// if not mc_bases or not skirmish then
90408: LD_EXP 36
90412: NOT
90413: PUSH
90414: LD_EXP 34
90418: NOT
90419: OR
90420: IFFALSE 90424
// exit ;
90422: GO 91085
// for i = 1 to mc_bases do
90424: LD_ADDR_VAR 0 3
90428: PUSH
90429: DOUBLE
90430: LD_INT 1
90432: DEC
90433: ST_TO_ADDR
90434: LD_EXP 36
90438: PUSH
90439: FOR_TO
90440: IFFALSE 91083
// begin if building in mc_construct_list [ i ] then
90442: LD_VAR 0 1
90446: PUSH
90447: LD_EXP 43
90451: PUSH
90452: LD_VAR 0 3
90456: ARRAY
90457: IN
90458: IFFALSE 91081
// begin mc_construct_list := Replace ( mc_construct_list , i , mc_construct_list [ i ] diff building ) ;
90460: LD_ADDR_EXP 43
90464: PUSH
90465: LD_EXP 43
90469: PPUSH
90470: LD_VAR 0 3
90474: PPUSH
90475: LD_EXP 43
90479: PUSH
90480: LD_VAR 0 3
90484: ARRAY
90485: PUSH
90486: LD_VAR 0 1
90490: DIFF
90491: PPUSH
90492: CALL_OW 1
90496: ST_TO_ADDR
// mc_bases := ReplaceIn ( mc_bases , [ i , mc_bases [ i ] + 1 ] , building ) ;
90497: LD_ADDR_EXP 36
90501: PUSH
90502: LD_EXP 36
90506: PPUSH
90507: LD_VAR 0 3
90511: PUSH
90512: LD_EXP 36
90516: PUSH
90517: LD_VAR 0 3
90521: ARRAY
90522: PUSH
90523: LD_INT 1
90525: PLUS
90526: PUSH
90527: EMPTY
90528: LIST
90529: LIST
90530: PPUSH
90531: LD_VAR 0 1
90535: PPUSH
90536: CALL 26637 0 3
90540: ST_TO_ADDR
// btype := GetBType ( building ) ;
90541: LD_ADDR_VAR 0 5
90545: PUSH
90546: LD_VAR 0 1
90550: PPUSH
90551: CALL_OW 266
90555: ST_TO_ADDR
// side := GetSide ( building ) ;
90556: LD_ADDR_VAR 0 8
90560: PUSH
90561: LD_VAR 0 1
90565: PPUSH
90566: CALL_OW 255
90570: ST_TO_ADDR
// if btype = b_lab then
90571: LD_VAR 0 5
90575: PUSH
90576: LD_INT 6
90578: EQUAL
90579: IFFALSE 90629
// begin mc_lab := ReplaceIn ( mc_lab , [ i , mc_lab [ i ] + 1 ] , building ) ;
90581: LD_ADDR_EXP 69
90585: PUSH
90586: LD_EXP 69
90590: PPUSH
90591: LD_VAR 0 3
90595: PUSH
90596: LD_EXP 69
90600: PUSH
90601: LD_VAR 0 3
90605: ARRAY
90606: PUSH
90607: LD_INT 1
90609: PLUS
90610: PUSH
90611: EMPTY
90612: LIST
90613: LIST
90614: PPUSH
90615: LD_VAR 0 1
90619: PPUSH
90620: CALL 26637 0 3
90624: ST_TO_ADDR
// exit ;
90625: POP
90626: POP
90627: GO 91085
// end ; if btype in [ b_depot , b_workshop , b_armoury ] then
90629: LD_VAR 0 5
90633: PUSH
90634: LD_INT 0
90636: PUSH
90637: LD_INT 2
90639: PUSH
90640: LD_INT 4
90642: PUSH
90643: EMPTY
90644: LIST
90645: LIST
90646: LIST
90647: IN
90648: IFFALSE 90772
// begin if btype = b_armoury then
90650: LD_VAR 0 5
90654: PUSH
90655: LD_INT 4
90657: EQUAL
90658: IFFALSE 90668
// btype := b_barracks ;
90660: LD_ADDR_VAR 0 5
90664: PUSH
90665: LD_INT 5
90667: ST_TO_ADDR
// if btype = b_depot then
90668: LD_VAR 0 5
90672: PUSH
90673: LD_INT 0
90675: EQUAL
90676: IFFALSE 90686
// btype := b_warehouse ;
90678: LD_ADDR_VAR 0 5
90682: PUSH
90683: LD_INT 1
90685: ST_TO_ADDR
// if btype = b_workshop then
90686: LD_VAR 0 5
90690: PUSH
90691: LD_INT 2
90693: EQUAL
90694: IFFALSE 90704
// btype := b_factory ;
90696: LD_ADDR_VAR 0 5
90700: PUSH
90701: LD_INT 3
90703: ST_TO_ADDR
// if GetRestrict ( btype , side ) = state_enabled then
90704: LD_VAR 0 5
90708: PPUSH
90709: LD_VAR 0 8
90713: PPUSH
90714: CALL_OW 323
90718: PUSH
90719: LD_INT 1
90721: EQUAL
90722: IFFALSE 90768
// mc_build_upgrade := ReplaceIn ( mc_build_upgrade , [ i , mc_build_upgrade [ i ] + 1 ] , building ) ;
90724: LD_ADDR_EXP 68
90728: PUSH
90729: LD_EXP 68
90733: PPUSH
90734: LD_VAR 0 3
90738: PUSH
90739: LD_EXP 68
90743: PUSH
90744: LD_VAR 0 3
90748: ARRAY
90749: PUSH
90750: LD_INT 1
90752: PLUS
90753: PUSH
90754: EMPTY
90755: LIST
90756: LIST
90757: PPUSH
90758: LD_VAR 0 1
90762: PPUSH
90763: CALL 26637 0 3
90767: ST_TO_ADDR
// exit ;
90768: POP
90769: POP
90770: GO 91085
// end ; if btype in [ b_bunker , b_turret ] then
90772: LD_VAR 0 5
90776: PUSH
90777: LD_INT 32
90779: PUSH
90780: LD_INT 33
90782: PUSH
90783: EMPTY
90784: LIST
90785: LIST
90786: IN
90787: IFFALSE 91077
// begin mc_turret_list := ReplaceIn ( mc_turret_list , [ i , mc_turret_list [ i ] + 1 ] , building ) ;
90789: LD_ADDR_EXP 44
90793: PUSH
90794: LD_EXP 44
90798: PPUSH
90799: LD_VAR 0 3
90803: PUSH
90804: LD_EXP 44
90808: PUSH
90809: LD_VAR 0 3
90813: ARRAY
90814: PUSH
90815: LD_INT 1
90817: PLUS
90818: PUSH
90819: EMPTY
90820: LIST
90821: LIST
90822: PPUSH
90823: LD_VAR 0 1
90827: PPUSH
90828: CALL 26637 0 3
90832: ST_TO_ADDR
// if btype = b_bunker then
90833: LD_VAR 0 5
90837: PUSH
90838: LD_INT 32
90840: EQUAL
90841: IFFALSE 91077
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
90843: LD_ADDR_EXP 45
90847: PUSH
90848: LD_EXP 45
90852: PPUSH
90853: LD_VAR 0 3
90857: PUSH
90858: LD_EXP 45
90862: PUSH
90863: LD_VAR 0 3
90867: ARRAY
90868: PUSH
90869: LD_INT 1
90871: PLUS
90872: PUSH
90873: EMPTY
90874: LIST
90875: LIST
90876: PPUSH
90877: LD_VAR 0 1
90881: PPUSH
90882: CALL 26637 0 3
90886: ST_TO_ADDR
// tmp := UnitFilter ( mc_bases [ i ] , [ [ f_class , 1 ] , [ f_not , [ f_inside ] ] ] ) ;
90887: LD_ADDR_VAR 0 6
90891: PUSH
90892: LD_EXP 36
90896: PUSH
90897: LD_VAR 0 3
90901: ARRAY
90902: PPUSH
90903: LD_INT 25
90905: PUSH
90906: LD_INT 1
90908: PUSH
90909: EMPTY
90910: LIST
90911: LIST
90912: PUSH
90913: LD_INT 3
90915: PUSH
90916: LD_INT 54
90918: PUSH
90919: EMPTY
90920: LIST
90921: PUSH
90922: EMPTY
90923: LIST
90924: LIST
90925: PUSH
90926: EMPTY
90927: LIST
90928: LIST
90929: PPUSH
90930: CALL_OW 72
90934: ST_TO_ADDR
// if tmp then
90935: LD_VAR 0 6
90939: IFFALSE 90945
// exit ;
90941: POP
90942: POP
90943: GO 91085
// tmp := UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ) ;
90945: LD_ADDR_VAR 0 6
90949: PUSH
90950: LD_EXP 36
90954: PUSH
90955: LD_VAR 0 3
90959: ARRAY
90960: PPUSH
90961: LD_INT 2
90963: PUSH
90964: LD_INT 30
90966: PUSH
90967: LD_INT 4
90969: PUSH
90970: EMPTY
90971: LIST
90972: LIST
90973: PUSH
90974: LD_INT 30
90976: PUSH
90977: LD_INT 5
90979: PUSH
90980: EMPTY
90981: LIST
90982: LIST
90983: PUSH
90984: EMPTY
90985: LIST
90986: LIST
90987: LIST
90988: PPUSH
90989: CALL_OW 72
90993: ST_TO_ADDR
// if not tmp then
90994: LD_VAR 0 6
90998: NOT
90999: IFFALSE 91005
// exit ;
91001: POP
91002: POP
91003: GO 91085
// for j in tmp do
91005: LD_ADDR_VAR 0 4
91009: PUSH
91010: LD_VAR 0 6
91014: PUSH
91015: FOR_IN
91016: IFFALSE 91075
// begin units := UnitFilter ( UnitsInside ( j ) , [ f_class , 1 ] ) ;
91018: LD_ADDR_VAR 0 7
91022: PUSH
91023: LD_VAR 0 4
91027: PPUSH
91028: CALL_OW 313
91032: PPUSH
91033: LD_INT 25
91035: PUSH
91036: LD_INT 1
91038: PUSH
91039: EMPTY
91040: LIST
91041: LIST
91042: PPUSH
91043: CALL_OW 72
91047: ST_TO_ADDR
// if units then
91048: LD_VAR 0 7
91052: IFFALSE 91073
// begin ComExitBuilding ( units [ 1 ] ) ;
91054: LD_VAR 0 7
91058: PUSH
91059: LD_INT 1
91061: ARRAY
91062: PPUSH
91063: CALL_OW 122
// exit ;
91067: POP
91068: POP
91069: POP
91070: POP
91071: GO 91085
// end ; end ;
91073: GO 91015
91075: POP
91076: POP
// end ; end ; exit ;
91077: POP
91078: POP
91079: GO 91085
// end ; end ;
91081: GO 90439
91083: POP
91084: POP
// end ;
91085: LD_VAR 0 2
91089: RET
// export function MCE_BuildingStarted ( building , builder ) ; var i , j , btype , x , y , d ; begin
91090: LD_INT 0
91092: PPUSH
91093: PPUSH
91094: PPUSH
91095: PPUSH
91096: PPUSH
91097: PPUSH
91098: PPUSH
// if not mc_bases or not skirmish then
91099: LD_EXP 36
91103: NOT
91104: PUSH
91105: LD_EXP 34
91109: NOT
91110: OR
91111: IFFALSE 91115
// exit ;
91113: GO 91346
// btype := GetBType ( building ) ;
91115: LD_ADDR_VAR 0 6
91119: PUSH
91120: LD_VAR 0 1
91124: PPUSH
91125: CALL_OW 266
91129: ST_TO_ADDR
// x := GetX ( building ) ;
91130: LD_ADDR_VAR 0 7
91134: PUSH
91135: LD_VAR 0 1
91139: PPUSH
91140: CALL_OW 250
91144: ST_TO_ADDR
// y := GetY ( building ) ;
91145: LD_ADDR_VAR 0 8
91149: PUSH
91150: LD_VAR 0 1
91154: PPUSH
91155: CALL_OW 251
91159: ST_TO_ADDR
// d := GetDir ( building ) ;
91160: LD_ADDR_VAR 0 9
91164: PUSH
91165: LD_VAR 0 1
91169: PPUSH
91170: CALL_OW 254
91174: ST_TO_ADDR
// for i = 1 to mc_bases do
91175: LD_ADDR_VAR 0 4
91179: PUSH
91180: DOUBLE
91181: LD_INT 1
91183: DEC
91184: ST_TO_ADDR
91185: LD_EXP 36
91189: PUSH
91190: FOR_TO
91191: IFFALSE 91344
// begin if not mc_build_list [ i ] then
91193: LD_EXP 41
91197: PUSH
91198: LD_VAR 0 4
91202: ARRAY
91203: NOT
91204: IFFALSE 91208
// continue ;
91206: GO 91190
// if CompareArray ( [ btype , x , y , d ] , mc_build_list [ i ] [ 1 ] ) then
91208: LD_VAR 0 6
91212: PUSH
91213: LD_VAR 0 7
91217: PUSH
91218: LD_VAR 0 8
91222: PUSH
91223: LD_VAR 0 9
91227: PUSH
91228: EMPTY
91229: LIST
91230: LIST
91231: LIST
91232: LIST
91233: PPUSH
91234: LD_EXP 41
91238: PUSH
91239: LD_VAR 0 4
91243: ARRAY
91244: PUSH
91245: LD_INT 1
91247: ARRAY
91248: PPUSH
91249: CALL 32806 0 2
91253: IFFALSE 91342
// begin mc_build_list := Replace ( mc_build_list , i , Delete ( mc_build_list [ i ] , 1 ) ) ;
91255: LD_ADDR_EXP 41
91259: PUSH
91260: LD_EXP 41
91264: PPUSH
91265: LD_VAR 0 4
91269: PPUSH
91270: LD_EXP 41
91274: PUSH
91275: LD_VAR 0 4
91279: ARRAY
91280: PPUSH
91281: LD_INT 1
91283: PPUSH
91284: CALL_OW 3
91288: PPUSH
91289: CALL_OW 1
91293: ST_TO_ADDR
// mc_construct_list := ReplaceIn ( mc_construct_list , [ i , mc_construct_list [ i ] + 1 ] , building ) ;
91294: LD_ADDR_EXP 43
91298: PUSH
91299: LD_EXP 43
91303: PPUSH
91304: LD_VAR 0 4
91308: PUSH
91309: LD_EXP 43
91313: PUSH
91314: LD_VAR 0 4
91318: ARRAY
91319: PUSH
91320: LD_INT 1
91322: PLUS
91323: PUSH
91324: EMPTY
91325: LIST
91326: LIST
91327: PPUSH
91328: LD_VAR 0 1
91332: PPUSH
91333: CALL 26637 0 3
91337: ST_TO_ADDR
// exit ;
91338: POP
91339: POP
91340: GO 91346
// end ; end ;
91342: GO 91190
91344: POP
91345: POP
// end ;
91346: LD_VAR 0 3
91350: RET
// export function MCE_LeaveBuilding ( building , unit ) ; var i , tmp ; begin
91351: LD_INT 0
91353: PPUSH
91354: PPUSH
91355: PPUSH
// if not mc_bases or not skirmish then
91356: LD_EXP 36
91360: NOT
91361: PUSH
91362: LD_EXP 34
91366: NOT
91367: OR
91368: IFFALSE 91372
// exit ;
91370: GO 91562
// for i = 1 to mc_bases do
91372: LD_ADDR_VAR 0 4
91376: PUSH
91377: DOUBLE
91378: LD_INT 1
91380: DEC
91381: ST_TO_ADDR
91382: LD_EXP 36
91386: PUSH
91387: FOR_TO
91388: IFFALSE 91475
// begin if building in mc_turret_list [ i ] and not building in mc_empty_turret_list [ i ] then
91390: LD_VAR 0 1
91394: PUSH
91395: LD_EXP 44
91399: PUSH
91400: LD_VAR 0 4
91404: ARRAY
91405: IN
91406: PUSH
91407: LD_VAR 0 1
91411: PUSH
91412: LD_EXP 45
91416: PUSH
91417: LD_VAR 0 4
91421: ARRAY
91422: IN
91423: NOT
91424: AND
91425: IFFALSE 91473
// begin mc_empty_turret_list := ReplaceIn ( mc_empty_turret_list , [ i , mc_empty_turret_list [ i ] + 1 ] , building ) ;
91427: LD_ADDR_EXP 45
91431: PUSH
91432: LD_EXP 45
91436: PPUSH
91437: LD_VAR 0 4
91441: PUSH
91442: LD_EXP 45
91446: PUSH
91447: LD_VAR 0 4
91451: ARRAY
91452: PUSH
91453: LD_INT 1
91455: PLUS
91456: PUSH
91457: EMPTY
91458: LIST
91459: LIST
91460: PPUSH
91461: LD_VAR 0 1
91465: PPUSH
91466: CALL 26637 0 3
91470: ST_TO_ADDR
// break ;
91471: GO 91475
// end ; end ;
91473: GO 91387
91475: POP
91476: POP
// if GetClass ( building ) in mc_sides and GetBType ( building ) = b_barracks and GetTag ( unit ) <> 18 then
91477: LD_VAR 0 1
91481: PPUSH
91482: CALL_OW 257
91486: PUSH
91487: LD_EXP 62
91491: IN
91492: PUSH
91493: LD_VAR 0 1
91497: PPUSH
91498: CALL_OW 266
91502: PUSH
91503: LD_INT 5
91505: EQUAL
91506: AND
91507: PUSH
91508: LD_VAR 0 2
91512: PPUSH
91513: CALL_OW 110
91517: PUSH
91518: LD_INT 18
91520: NONEQUAL
91521: AND
91522: IFFALSE 91562
// if GetClass ( unit ) in [ 5 , 8 , 9 ] then
91524: LD_VAR 0 2
91528: PPUSH
91529: CALL_OW 257
91533: PUSH
91534: LD_INT 5
91536: PUSH
91537: LD_INT 8
91539: PUSH
91540: LD_INT 9
91542: PUSH
91543: EMPTY
91544: LIST
91545: LIST
91546: LIST
91547: IN
91548: IFFALSE 91562
// SetClass ( unit , 1 ) ;
91550: LD_VAR 0 2
91554: PPUSH
91555: LD_INT 1
91557: PPUSH
91558: CALL_OW 336
// end ;
91562: LD_VAR 0 3
91566: RET
// export function MCE_EvacuateVehicle ( driver , abandoned_vehicle , unknown1 , unknown2 ) ; var i ; begin
91567: LD_INT 0
91569: PPUSH
91570: PPUSH
// if not mc_bases or not skirmish then
91571: LD_EXP 36
91575: NOT
91576: PUSH
91577: LD_EXP 34
91581: NOT
91582: OR
91583: IFFALSE 91587
// exit ;
91585: GO 91703
// if GetLives ( abandoned_vehicle ) > 250 then
91587: LD_VAR 0 2
91591: PPUSH
91592: CALL_OW 256
91596: PUSH
91597: LD_INT 250
91599: GREATER
91600: IFFALSE 91604
// exit ;
91602: GO 91703
// for i = 1 to mc_bases do
91604: LD_ADDR_VAR 0 6
91608: PUSH
91609: DOUBLE
91610: LD_INT 1
91612: DEC
91613: ST_TO_ADDR
91614: LD_EXP 36
91618: PUSH
91619: FOR_TO
91620: IFFALSE 91701
// begin if driver in mc_bases [ i ] then
91622: LD_VAR 0 1
91626: PUSH
91627: LD_EXP 36
91631: PUSH
91632: LD_VAR 0 6
91636: ARRAY
91637: IN
91638: IFFALSE 91699
// begin ComMoveUnit ( driver , UnitFilter ( mc_bases [ i ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ) [ 1 ] ) ;
91640: LD_VAR 0 1
91644: PPUSH
91645: LD_EXP 36
91649: PUSH
91650: LD_VAR 0 6
91654: ARRAY
91655: PPUSH
91656: LD_INT 2
91658: PUSH
91659: LD_INT 30
91661: PUSH
91662: LD_INT 0
91664: PUSH
91665: EMPTY
91666: LIST
91667: LIST
91668: PUSH
91669: LD_INT 30
91671: PUSH
91672: LD_INT 1
91674: PUSH
91675: EMPTY
91676: LIST
91677: LIST
91678: PUSH
91679: EMPTY
91680: LIST
91681: LIST
91682: LIST
91683: PPUSH
91684: CALL_OW 72
91688: PUSH
91689: LD_INT 1
91691: ARRAY
91692: PPUSH
91693: CALL_OW 112
// break ;
91697: GO 91701
// end ; end ;
91699: GO 91619
91701: POP
91702: POP
// end ;
91703: LD_VAR 0 5
91707: RET
