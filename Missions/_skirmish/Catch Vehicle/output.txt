// starting begin ResetFog ;
   0: CALL_OW 335
// PrepareGame ;
   4: CALL 13 0 0
// PrepareUnits ;
   8: CALL 299 0 0
// end ;
  12: END
// export mechanics , time_to_destroy , players , sib_bomb , time , veh_amount ; export p1 , p2 , p3 , p4 , p5 ; function PrepareGame ; var debug , i ; begin
  13: LD_INT 0
  15: PPUSH
  16: PPUSH
  17: PPUSH
// debug := false ;
  18: LD_ADDR_VAR 0 2
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// if debug then
  26: LD_VAR 0 2
  30: IFFALSE 81
// begin mechanics := 5 ;
  32: LD_ADDR_EXP 1
  36: PUSH
  37: LD_INT 5
  39: ST_TO_ADDR
// time_to_destroy := 45 ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_INT 45
  47: ST_TO_ADDR
// players := 4 ;
  48: LD_ADDR_EXP 3
  52: PUSH
  53: LD_INT 4
  55: ST_TO_ADDR
// sib_bomb := true ;
  56: LD_ADDR_EXP 4
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// time := 3 3$00 ;
  64: LD_ADDR_EXP 5
  68: PUSH
  69: LD_INT 6300
  71: ST_TO_ADDR
// FogOff ( 1 ) ;
  72: LD_INT 1
  74: PPUSH
  75: CALL_OW 344
// end else
  79: GO 214
// begin time := 3 3$00 ;
  81: LD_ADDR_EXP 5
  85: PUSH
  86: LD_INT 6300
  88: ST_TO_ADDR
// players := 4 ;
  89: LD_ADDR_EXP 3
  93: PUSH
  94: LD_INT 4
  96: ST_TO_ADDR
// sib_bomb := true ;
  97: LD_ADDR_EXP 4
 101: PUSH
 102: LD_INT 1
 104: ST_TO_ADDR
// mechanics := 4 ;
 105: LD_ADDR_EXP 1
 109: PUSH
 110: LD_INT 4
 112: ST_TO_ADDR
// mechanics := [ 3 , 4 , 5 ] [ GetMultiplayerSetting ( 0 ) ] ;
 113: LD_ADDR_EXP 1
 117: PUSH
 118: LD_INT 3
 120: PUSH
 121: LD_INT 4
 123: PUSH
 124: LD_INT 5
 126: PUSH
 127: EMPTY
 128: LIST
 129: LIST
 130: LIST
 131: PUSH
 132: LD_INT 0
 134: PPUSH
 135: CALL_OW 426
 139: ARRAY
 140: ST_TO_ADDR
// players := [ 3 , 4 , 5 ] [ GetMultiplayerSetting ( 1 ) ] ;
 141: LD_ADDR_EXP 3
 145: PUSH
 146: LD_INT 3
 148: PUSH
 149: LD_INT 4
 151: PUSH
 152: LD_INT 5
 154: PUSH
 155: EMPTY
 156: LIST
 157: LIST
 158: LIST
 159: PUSH
 160: LD_INT 1
 162: PPUSH
 163: CALL_OW 426
 167: ARRAY
 168: ST_TO_ADDR
// time := [ 3 3$00 , 5 5$00 , 10 10$00 ] [ GetMultiplayerSetting ( 2 ) ] ;
 169: LD_ADDR_EXP 5
 173: PUSH
 174: LD_INT 6300
 176: PUSH
 177: LD_INT 10500
 179: PUSH
 180: LD_INT 21000
 182: PUSH
 183: EMPTY
 184: LIST
 185: LIST
 186: LIST
 187: PUSH
 188: LD_INT 2
 190: PPUSH
 191: CALL_OW 426
 195: ARRAY
 196: ST_TO_ADDR
// sib_bomb := GetMultiplayerSetting ( 3 ) - 1 ;
 197: LD_ADDR_EXP 4
 201: PUSH
 202: LD_INT 3
 204: PPUSH
 205: CALL_OW 426
 209: PUSH
 210: LD_INT 1
 212: MINUS
 213: ST_TO_ADDR
// end ; p1 := 0 ;
 214: LD_ADDR_EXP 7
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// p2 := 0 ;
 222: LD_ADDR_EXP 8
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// p3 := 0 ;
 230: LD_ADDR_EXP 9
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// p4 := 0 ;
 238: LD_ADDR_EXP 10
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// p5 := 0 ;
 246: LD_ADDR_EXP 11
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// veh_amount := 12 ;
 254: LD_ADDR_EXP 6
 258: PUSH
 259: LD_INT 12
 261: ST_TO_ADDR
// for i = 1 to 7 do
 262: LD_ADDR_VAR 0 3
 266: PUSH
 267: DOUBLE
 268: LD_INT 1
 270: DEC
 271: ST_TO_ADDR
 272: LD_INT 7
 274: PUSH
 275: FOR_TO
 276: IFFALSE 292
// ChangeSideFog ( i , 8 ) ;
 278: LD_VAR 0 3
 282: PPUSH
 283: LD_INT 8
 285: PPUSH
 286: CALL_OW 343
 290: GO 275
 292: POP
 293: POP
// end ; end_of_file
 294: LD_VAR 0 1
 298: RET
// export function PrepareUnits ; var i , side ; begin
 299: LD_INT 0
 301: PPUSH
 302: PPUSH
 303: PPUSH
// side := players ;
 304: LD_ADDR_VAR 0 3
 308: PUSH
 309: LD_EXP 3
 313: ST_TO_ADDR
// uc_nation := 1 ;
 314: LD_ADDR_OWVAR 21
 318: PUSH
 319: LD_INT 1
 321: ST_TO_ADDR
// for i = 1 to mechanics do
 322: LD_ADDR_VAR 0 2
 326: PUSH
 327: DOUBLE
 328: LD_INT 1
 330: DEC
 331: ST_TO_ADDR
 332: LD_EXP 1
 336: PUSH
 337: FOR_TO
 338: IFFALSE 402
// for side = 1 to players do
 340: LD_ADDR_VAR 0 3
 344: PUSH
 345: DOUBLE
 346: LD_INT 1
 348: DEC
 349: ST_TO_ADDR
 350: LD_EXP 3
 354: PUSH
 355: FOR_TO
 356: IFFALSE 398
// begin uc_side := side ;
 358: LD_ADDR_OWVAR 20
 362: PUSH
 363: LD_VAR 0 3
 367: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
 368: LD_INT 0
 370: PPUSH
 371: LD_INT 3
 373: PPUSH
 374: LD_INT 10
 376: PPUSH
 377: CALL_OW 380
// PlaceUnitArea ( CreateHuman , mech_area , false ) ;
 381: CALL_OW 44
 385: PPUSH
 386: LD_INT 6
 388: PPUSH
 389: LD_INT 0
 391: PPUSH
 392: CALL_OW 49
// end ;
 396: GO 355
 398: POP
 399: POP
 400: GO 337
 402: POP
 403: POP
// end ;
 404: LD_VAR 0 1
 408: RET
// function ToSpawn ( side ) ; begin
 409: LD_INT 0
 411: PPUSH
// uc_side := side ;
 412: LD_ADDR_OWVAR 20
 416: PUSH
 417: LD_VAR 0 1
 421: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
 422: LD_INT 0
 424: PPUSH
 425: LD_INT 3
 427: PPUSH
 428: LD_INT 10
 430: PPUSH
 431: CALL_OW 380
// PlaceUnitArea ( CreateHuman , mech_area , false ) ;
 435: CALL_OW 44
 439: PPUSH
 440: LD_INT 6
 442: PPUSH
 443: LD_INT 0
 445: PPUSH
 446: CALL_OW 49
// end ;
 450: LD_VAR 0 2
 454: RET
// every 0 0$13 trigger time do var i , filter ;
 455: LD_EXP 5
 459: IFFALSE 569
 461: GO 463
 463: DISABLE
 464: LD_INT 0
 466: PPUSH
 467: PPUSH
// begin enable ;
 468: ENABLE
// for i = 1 to players do
 469: LD_ADDR_VAR 0 1
 473: PUSH
 474: DOUBLE
 475: LD_INT 1
 477: DEC
 478: ST_TO_ADDR
 479: LD_EXP 3
 483: PUSH
 484: FOR_TO
 485: IFFALSE 567
// begin filter := FilterAllUnits ( [ [ [ f_side , i ] , [ f_class , 3 ] , [ f_type , unit_human ] ] ] ) ;
 487: LD_ADDR_VAR 0 2
 491: PUSH
 492: LD_INT 22
 494: PUSH
 495: LD_VAR 0 1
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: PUSH
 504: LD_INT 25
 506: PUSH
 507: LD_INT 3
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: PUSH
 514: LD_INT 21
 516: PUSH
 517: LD_INT 1
 519: PUSH
 520: EMPTY
 521: LIST
 522: LIST
 523: PUSH
 524: EMPTY
 525: LIST
 526: LIST
 527: LIST
 528: PUSH
 529: EMPTY
 530: LIST
 531: PPUSH
 532: CALL_OW 69
 536: ST_TO_ADDR
// if filter < mechanics then
 537: LD_VAR 0 2
 541: PUSH
 542: LD_EXP 1
 546: LESS
 547: IFFALSE 565
// begin Wait ( 0 0$03 ) ;
 549: LD_INT 105
 551: PPUSH
 552: CALL_OW 67
// ToSpawn ( i ) ;
 556: LD_VAR 0 1
 560: PPUSH
 561: CALL 409 0 1
// end ; end ;
 565: GO 484
 567: POP
 568: POP
// end ;
 569: PPOPN 2
 571: END
// every 0 0$01 trigger time do var i , filter , filter2 , vehicles ;
 572: LD_EXP 5
 576: IFFALSE 943
 578: GO 580
 580: DISABLE
 581: LD_INT 0
 583: PPUSH
 584: PPUSH
 585: PPUSH
 586: PPUSH
// begin enable ;
 587: ENABLE
// filter2 := FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_not , [ f_side , 0 ] ] , [ f_not , [ f_side , 1 ] ] ] ) ;
 588: LD_ADDR_VAR 0 3
 592: PUSH
 593: LD_INT 21
 595: PUSH
 596: LD_INT 2
 598: PUSH
 599: EMPTY
 600: LIST
 601: LIST
 602: PUSH
 603: LD_INT 3
 605: PUSH
 606: LD_INT 22
 608: PUSH
 609: LD_INT 0
 611: PUSH
 612: EMPTY
 613: LIST
 614: LIST
 615: PUSH
 616: EMPTY
 617: LIST
 618: LIST
 619: PUSH
 620: LD_INT 3
 622: PUSH
 623: LD_INT 22
 625: PUSH
 626: LD_INT 1
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: PUSH
 633: EMPTY
 634: LIST
 635: LIST
 636: PUSH
 637: EMPTY
 638: LIST
 639: LIST
 640: LIST
 641: PPUSH
 642: CALL_OW 69
 646: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_side , 1 ] ] ] ) ;
 647: LD_ADDR_VAR 0 2
 651: PUSH
 652: LD_INT 21
 654: PUSH
 655: LD_INT 1
 657: PUSH
 658: EMPTY
 659: LIST
 660: LIST
 661: PUSH
 662: LD_INT 3
 664: PUSH
 665: LD_INT 54
 667: PUSH
 668: EMPTY
 669: LIST
 670: PUSH
 671: EMPTY
 672: LIST
 673: LIST
 674: PUSH
 675: LD_INT 3
 677: PUSH
 678: LD_INT 22
 680: PUSH
 681: LD_INT 1
 683: PUSH
 684: EMPTY
 685: LIST
 686: LIST
 687: PUSH
 688: EMPTY
 689: LIST
 690: LIST
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: LIST
 696: PPUSH
 697: CALL_OW 69
 701: ST_TO_ADDR
// vehicles := FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 702: LD_ADDR_VAR 0 4
 706: PUSH
 707: LD_INT 21
 709: PUSH
 710: LD_INT 2
 712: PUSH
 713: EMPTY
 714: LIST
 715: LIST
 716: PUSH
 717: LD_INT 58
 719: PUSH
 720: EMPTY
 721: LIST
 722: PUSH
 723: EMPTY
 724: LIST
 725: LIST
 726: PPUSH
 727: CALL_OW 69
 731: ST_TO_ADDR
// if filter and vehicles then
 732: LD_VAR 0 2
 736: PUSH
 737: LD_VAR 0 4
 741: AND
 742: IFFALSE 879
// for i = 1 to filter do
 744: LD_ADDR_VAR 0 1
 748: PUSH
 749: DOUBLE
 750: LD_INT 1
 752: DEC
 753: ST_TO_ADDR
 754: LD_VAR 0 2
 758: PUSH
 759: FOR_TO
 760: IFFALSE 877
// if not HasTask ( filter [ i ] ) and IsOk ( filter [ i ] ) then
 762: LD_VAR 0 2
 766: PUSH
 767: LD_VAR 0 1
 771: ARRAY
 772: PPUSH
 773: CALL_OW 314
 777: NOT
 778: PUSH
 779: LD_VAR 0 2
 783: PUSH
 784: LD_VAR 0 1
 788: ARRAY
 789: PPUSH
 790: CALL_OW 302
 794: AND
 795: IFFALSE 875
// if GetDistUnits ( filter [ i ] , NearestUnitToUnit ( vehicles , filter [ i ] ) ) < 45 then
 797: LD_VAR 0 2
 801: PUSH
 802: LD_VAR 0 1
 806: ARRAY
 807: PPUSH
 808: LD_VAR 0 4
 812: PPUSH
 813: LD_VAR 0 2
 817: PUSH
 818: LD_VAR 0 1
 822: ARRAY
 823: PPUSH
 824: CALL_OW 74
 828: PPUSH
 829: CALL_OW 296
 833: PUSH
 834: LD_INT 45
 836: LESS
 837: IFFALSE 875
// ComEnterUnit ( filter [ i ] , NearestUnitToUnit ( vehicles , filter [ i ] ) ) ;
 839: LD_VAR 0 2
 843: PUSH
 844: LD_VAR 0 1
 848: ARRAY
 849: PPUSH
 850: LD_VAR 0 4
 854: PPUSH
 855: LD_VAR 0 2
 859: PUSH
 860: LD_VAR 0 1
 864: ARRAY
 865: PPUSH
 866: CALL_OW 74
 870: PPUSH
 871: CALL_OW 120
 875: GO 759
 877: POP
 878: POP
// if filter2 then
 879: LD_VAR 0 3
 883: IFFALSE 943
// for i = 1 to filter2 do
 885: LD_ADDR_VAR 0 1
 889: PUSH
 890: DOUBLE
 891: LD_INT 1
 893: DEC
 894: ST_TO_ADDR
 895: LD_VAR 0 3
 899: PUSH
 900: FOR_TO
 901: IFFALSE 941
// if not HasTask ( filter2 [ i ] ) then
 903: LD_VAR 0 3
 907: PUSH
 908: LD_VAR 0 1
 912: ARRAY
 913: PPUSH
 914: CALL_OW 314
 918: NOT
 919: IFFALSE 939
// ComMoveToArea ( filter2 [ i ] , exit_area ) ;
 921: LD_VAR 0 3
 925: PUSH
 926: LD_VAR 0 1
 930: ARRAY
 931: PPUSH
 932: LD_INT 4
 934: PPUSH
 935: CALL_OW 113
 939: GO 900
 941: POP
 942: POP
// end ; end_of_file
 943: PPOPN 4
 945: END
// export function SpawnCar ( chas , area ) ; var i , e , veh , ar_chassis , ru_chassis , us_chassis , ar_weapons , ru_weapons , us_weapons , chassis , engine , weapon ; begin
 946: LD_INT 0
 948: PPUSH
 949: PPUSH
 950: PPUSH
 951: PPUSH
 952: PPUSH
 953: PPUSH
 954: PPUSH
 955: PPUSH
 956: PPUSH
 957: PPUSH
 958: PPUSH
 959: PPUSH
 960: PPUSH
// uc_side := 0 ;
 961: LD_ADDR_OWVAR 20
 965: PUSH
 966: LD_INT 0
 968: ST_TO_ADDR
// uc_nation := Rand ( 1 , 3 ) ;
 969: LD_ADDR_OWVAR 21
 973: PUSH
 974: LD_INT 1
 976: PPUSH
 977: LD_INT 3
 979: PPUSH
 980: CALL_OW 12
 984: ST_TO_ADDR
// ar_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ;
 985: LD_ADDR_VAR 0 7
 989: PUSH
 990: LD_INT 11
 992: PUSH
 993: LD_INT 12
 995: PUSH
 996: LD_INT 13
 998: PUSH
 999: LD_INT 14
1001: PUSH
1002: EMPTY
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: ST_TO_ADDR
// ru_chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ;
1008: LD_ADDR_VAR 0 8
1012: PUSH
1013: LD_INT 21
1015: PUSH
1016: LD_INT 22
1018: PUSH
1019: LD_INT 23
1021: PUSH
1022: LD_INT 24
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: ST_TO_ADDR
// us_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ;
1031: LD_ADDR_VAR 0 9
1035: PUSH
1036: LD_INT 1
1038: PUSH
1039: LD_INT 2
1041: PUSH
1042: LD_INT 3
1044: PUSH
1045: LD_INT 4
1047: PUSH
1048: LD_INT 5
1050: PUSH
1051: EMPTY
1052: LIST
1053: LIST
1054: LIST
1055: LIST
1056: LIST
1057: ST_TO_ADDR
// if chas > 0 then
1058: LD_VAR 0 1
1062: PUSH
1063: LD_INT 0
1065: GREATER
1066: IFFALSE 1080
// vc_chassis := chas else
1068: LD_ADDR_OWVAR 37
1072: PUSH
1073: LD_VAR 0 1
1077: ST_TO_ADDR
1078: GO 1173
// begin case uc_nation of 1 :
1080: LD_OWVAR 21
1084: PUSH
1085: LD_INT 1
1087: DOUBLE
1088: EQUAL
1089: IFTRUE 1093
1091: GO 1106
1093: POP
// chassis := us_chassis ; 2 :
1094: LD_ADDR_VAR 0 13
1098: PUSH
1099: LD_VAR 0 9
1103: ST_TO_ADDR
1104: GO 1149
1106: LD_INT 2
1108: DOUBLE
1109: EQUAL
1110: IFTRUE 1114
1112: GO 1127
1114: POP
// chassis := ar_chassis ; 3 :
1115: LD_ADDR_VAR 0 13
1119: PUSH
1120: LD_VAR 0 7
1124: ST_TO_ADDR
1125: GO 1149
1127: LD_INT 3
1129: DOUBLE
1130: EQUAL
1131: IFTRUE 1135
1133: GO 1148
1135: POP
// chassis := ru_chassis ; end ;
1136: LD_ADDR_VAR 0 13
1140: PUSH
1141: LD_VAR 0 8
1145: ST_TO_ADDR
1146: GO 1149
1148: POP
// vc_chassis := chassis [ Rand ( 1 , chassis ) ] ;
1149: LD_ADDR_OWVAR 37
1153: PUSH
1154: LD_VAR 0 13
1158: PUSH
1159: LD_INT 1
1161: PPUSH
1162: LD_VAR 0 13
1166: PPUSH
1167: CALL_OW 12
1171: ARRAY
1172: ST_TO_ADDR
// end ; if vc_chassis in [ ar_hovercraft , ar_light_trike , us_light_wheeled ] then
1173: LD_OWVAR 37
1177: PUSH
1178: LD_INT 11
1180: PUSH
1181: LD_INT 12
1183: PUSH
1184: LD_INT 1
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: LIST
1191: IN
1192: IFFALSE 1212
// engine := Rand ( 1 , 2 ) else
1194: LD_ADDR_VAR 0 14
1198: PUSH
1199: LD_INT 1
1201: PPUSH
1202: LD_INT 2
1204: PPUSH
1205: CALL_OW 12
1209: ST_TO_ADDR
1210: GO 1324
// begin if not vc_chassis in [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , us_heavy_tracked , us_morphling ] then
1212: LD_OWVAR 37
1216: PUSH
1217: LD_INT 21
1219: PUSH
1220: LD_INT 22
1222: PUSH
1223: LD_INT 23
1225: PUSH
1226: LD_INT 24
1228: PUSH
1229: LD_INT 4
1231: PUSH
1232: LD_INT 5
1234: PUSH
1235: EMPTY
1236: LIST
1237: LIST
1238: LIST
1239: LIST
1240: LIST
1241: LIST
1242: IN
1243: NOT
1244: IFFALSE 1264
// engine := Rand ( 1 , 3 ) else
1246: LD_ADDR_VAR 0 14
1250: PUSH
1251: LD_INT 1
1253: PPUSH
1254: LD_INT 3
1256: PPUSH
1257: CALL_OW 12
1261: ST_TO_ADDR
1262: GO 1280
// e := Rand ( 1 , 2 ) ;
1264: LD_ADDR_VAR 0 5
1268: PUSH
1269: LD_INT 1
1271: PPUSH
1272: LD_INT 2
1274: PPUSH
1275: CALL_OW 12
1279: ST_TO_ADDR
// case e of 1 :
1280: LD_VAR 0 5
1284: PUSH
1285: LD_INT 1
1287: DOUBLE
1288: EQUAL
1289: IFTRUE 1293
1291: GO 1304
1293: POP
// engine := engine_combustion ; 2 :
1294: LD_ADDR_VAR 0 14
1298: PUSH
1299: LD_INT 1
1301: ST_TO_ADDR
1302: GO 1324
1304: LD_INT 2
1306: DOUBLE
1307: EQUAL
1308: IFTRUE 1312
1310: GO 1323
1312: POP
// engine := engine_siberite ; end ;
1313: LD_ADDR_VAR 0 14
1317: PUSH
1318: LD_INT 3
1320: ST_TO_ADDR
1321: GO 1324
1323: POP
// end ; vc_engine := engine ;
1324: LD_ADDR_OWVAR 39
1328: PUSH
1329: LD_VAR 0 14
1333: ST_TO_ADDR
// vc_control := control_manual ;
1334: LD_ADDR_OWVAR 38
1338: PUSH
1339: LD_INT 1
1341: ST_TO_ADDR
// ar_weapons := [ ar_multimissile_ballista , ar_double_machine_gun , ar_light_gun , ar_radar , ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb , ar_flame_thrower ] ;
1342: LD_ADDR_VAR 0 10
1346: PUSH
1347: LD_INT 22
1349: PUSH
1350: LD_INT 24
1352: PUSH
1353: LD_INT 23
1355: PUSH
1356: LD_INT 30
1358: PUSH
1359: LD_INT 25
1361: PUSH
1362: LD_INT 27
1364: PUSH
1365: LD_INT 28
1367: PUSH
1368: LD_INT 29
1370: PUSH
1371: LD_INT 26
1373: PUSH
1374: EMPTY
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: LIST
1382: LIST
1383: LIST
1384: ST_TO_ADDR
// ru_weapons := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , 98 , ru_rocket_launcher , ru_heavy_gun , ru_rocket , ru_bulldozer , ru_time_lapser ] ;
1385: LD_ADDR_VAR 0 11
1389: PUSH
1390: LD_INT 42
1392: PUSH
1393: LD_INT 43
1395: PUSH
1396: LD_INT 44
1398: PUSH
1399: LD_INT 98
1401: PUSH
1402: LD_INT 45
1404: PUSH
1405: LD_INT 46
1407: PUSH
1408: LD_INT 47
1410: PUSH
1411: LD_INT 53
1413: PUSH
1414: LD_INT 49
1416: PUSH
1417: EMPTY
1418: LIST
1419: LIST
1420: LIST
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: LIST
1427: ST_TO_ADDR
// us_weapons := [ us_machine_gun , us_light_gun , us_radar , us_gatling_gun , us_double_gun , us_rocket_launcher , us_laser , us_heavy_gun , us_bulldozer , us_double_laser ] ;
1428: LD_ADDR_VAR 0 12
1432: PUSH
1433: LD_INT 2
1435: PUSH
1436: LD_INT 3
1438: PUSH
1439: LD_INT 11
1441: PUSH
1442: LD_INT 4
1444: PUSH
1445: LD_INT 5
1447: PUSH
1448: LD_INT 7
1450: PUSH
1451: LD_INT 9
1453: PUSH
1454: LD_INT 6
1456: PUSH
1457: LD_INT 14
1459: PUSH
1460: LD_INT 10
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: LIST
1473: LIST
1474: ST_TO_ADDR
// if uc_nation = nation_arabian then
1475: LD_OWVAR 21
1479: PUSH
1480: LD_INT 2
1482: EQUAL
1483: IFFALSE 1550
// begin if vc_chassis in [ ar_hovercraft , ar_light_trike ] then
1485: LD_OWVAR 37
1489: PUSH
1490: LD_INT 11
1492: PUSH
1493: LD_INT 12
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: IN
1500: IFFALSE 1526
// weapon := ar_weapons [ Rand ( 1 , 3 ) ] else
1502: LD_ADDR_VAR 0 15
1506: PUSH
1507: LD_VAR 0 10
1511: PUSH
1512: LD_INT 1
1514: PPUSH
1515: LD_INT 3
1517: PPUSH
1518: CALL_OW 12
1522: ARRAY
1523: ST_TO_ADDR
1524: GO 1550
// weapon := ar_weapons [ Rand ( 1 , ar_weapons ) ] ;
1526: LD_ADDR_VAR 0 15
1530: PUSH
1531: LD_VAR 0 10
1535: PUSH
1536: LD_INT 1
1538: PPUSH
1539: LD_VAR 0 10
1543: PPUSH
1544: CALL_OW 12
1548: ARRAY
1549: ST_TO_ADDR
// end ; if uc_nation = nation_russian then
1550: LD_OWVAR 21
1554: PUSH
1555: LD_INT 3
1557: EQUAL
1558: IFFALSE 1625
// begin if vc_chassis in [ ru_medium_wheeled , ru_medium_tracked ] then
1560: LD_OWVAR 37
1564: PUSH
1565: LD_INT 21
1567: PUSH
1568: LD_INT 22
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: IN
1575: IFFALSE 1601
// weapon := ru_weapons [ Rand ( 1 , 5 ) ] else
1577: LD_ADDR_VAR 0 15
1581: PUSH
1582: LD_VAR 0 11
1586: PUSH
1587: LD_INT 1
1589: PPUSH
1590: LD_INT 5
1592: PPUSH
1593: CALL_OW 12
1597: ARRAY
1598: ST_TO_ADDR
1599: GO 1625
// weapon := ru_weapons [ Rand ( 1 , ru_weapons ) ] ;
1601: LD_ADDR_VAR 0 15
1605: PUSH
1606: LD_VAR 0 11
1610: PUSH
1611: LD_INT 1
1613: PPUSH
1614: LD_VAR 0 11
1618: PPUSH
1619: CALL_OW 12
1623: ARRAY
1624: ST_TO_ADDR
// end ; if uc_nation = nation_american then
1625: LD_OWVAR 21
1629: PUSH
1630: LD_INT 1
1632: EQUAL
1633: IFFALSE 1742
// begin if vc_chassis = us_light_wheeled then
1635: LD_OWVAR 37
1639: PUSH
1640: LD_INT 1
1642: EQUAL
1643: IFFALSE 1667
// weapon := us_weapons [ Rand ( 1 , 3 ) ] ;
1645: LD_ADDR_VAR 0 15
1649: PUSH
1650: LD_VAR 0 12
1654: PUSH
1655: LD_INT 1
1657: PPUSH
1658: LD_INT 3
1660: PPUSH
1661: CALL_OW 12
1665: ARRAY
1666: ST_TO_ADDR
// if vc_chassis in [ us_medium_tracked , us_medium_wheeled ] then
1667: LD_OWVAR 37
1671: PUSH
1672: LD_INT 3
1674: PUSH
1675: LD_INT 2
1677: PUSH
1678: EMPTY
1679: LIST
1680: LIST
1681: IN
1682: IFFALSE 1708
// weapon := us_weapons [ Rand ( 1 , 7 ) ] else
1684: LD_ADDR_VAR 0 15
1688: PUSH
1689: LD_VAR 0 12
1693: PUSH
1694: LD_INT 1
1696: PPUSH
1697: LD_INT 7
1699: PPUSH
1700: CALL_OW 12
1704: ARRAY
1705: ST_TO_ADDR
1706: GO 1742
// if vc_chassis <> us_light_wheeled then
1708: LD_OWVAR 37
1712: PUSH
1713: LD_INT 1
1715: NONEQUAL
1716: IFFALSE 1742
// weapon := us_weapons [ Rand ( 1 , us_weapons ) ] ;
1718: LD_ADDR_VAR 0 15
1722: PUSH
1723: LD_VAR 0 12
1727: PUSH
1728: LD_INT 1
1730: PPUSH
1731: LD_VAR 0 12
1735: PPUSH
1736: CALL_OW 12
1740: ARRAY
1741: ST_TO_ADDR
// end ; vc_weapon := weapon ;
1742: LD_ADDR_OWVAR 40
1746: PUSH
1747: LD_VAR 0 15
1751: ST_TO_ADDR
// veh := CreateVehicle ;
1752: LD_ADDR_VAR 0 6
1756: PUSH
1757: CALL_OW 45
1761: ST_TO_ADDR
// PlaceUnitArea ( veh , area , true ) ;
1762: LD_VAR 0 6
1766: PPUSH
1767: LD_VAR 0 2
1771: PPUSH
1772: LD_INT 1
1774: PPUSH
1775: CALL_OW 49
// end ;
1779: LD_VAR 0 3
1783: RET
// export function SpawnSibRocket ( area ) ; var veh , p ; begin
1784: LD_INT 0
1786: PPUSH
1787: PPUSH
1788: PPUSH
// uc_side := 0 ;
1789: LD_ADDR_OWVAR 20
1793: PUSH
1794: LD_INT 0
1796: ST_TO_ADDR
// p := Rand ( 1 , 2 ) ;
1797: LD_ADDR_VAR 0 4
1801: PUSH
1802: LD_INT 1
1804: PPUSH
1805: LD_INT 2
1807: PPUSH
1808: CALL_OW 12
1812: ST_TO_ADDR
// case p of 1 :
1813: LD_VAR 0 4
1817: PUSH
1818: LD_INT 1
1820: DOUBLE
1821: EQUAL
1822: IFTRUE 1826
1824: GO 1869
1826: POP
// begin uc_nation := nation_american ;
1827: LD_ADDR_OWVAR 21
1831: PUSH
1832: LD_INT 1
1834: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
1835: LD_ADDR_OWVAR 37
1839: PUSH
1840: LD_INT 4
1842: ST_TO_ADDR
// vc_engine := engine_siberite ;
1843: LD_ADDR_OWVAR 39
1847: PUSH
1848: LD_INT 3
1850: ST_TO_ADDR
// vc_control := control_manual ;
1851: LD_ADDR_OWVAR 38
1855: PUSH
1856: LD_INT 1
1858: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
1859: LD_ADDR_OWVAR 40
1863: PUSH
1864: LD_INT 8
1866: ST_TO_ADDR
// end ; 2 :
1867: GO 1921
1869: LD_INT 2
1871: DOUBLE
1872: EQUAL
1873: IFTRUE 1877
1875: GO 1920
1877: POP
// begin uc_nation := nation_russian ;
1878: LD_ADDR_OWVAR 21
1882: PUSH
1883: LD_INT 3
1885: ST_TO_ADDR
// vc_chassis := ru_heavy_tracked ;
1886: LD_ADDR_OWVAR 37
1890: PUSH
1891: LD_INT 24
1893: ST_TO_ADDR
// vc_engine := engine_siberite ;
1894: LD_ADDR_OWVAR 39
1898: PUSH
1899: LD_INT 3
1901: ST_TO_ADDR
// vc_control := control_manual ;
1902: LD_ADDR_OWVAR 38
1906: PUSH
1907: LD_INT 1
1909: ST_TO_ADDR
// vc_weapon := ru_siberium_rocket ;
1910: LD_ADDR_OWVAR 40
1914: PUSH
1915: LD_INT 48
1917: ST_TO_ADDR
// end ; end ;
1918: GO 1921
1920: POP
// veh := CreateVehicle ;
1921: LD_ADDR_VAR 0 3
1925: PUSH
1926: CALL_OW 45
1930: ST_TO_ADDR
// PlaceUnitArea ( veh , area , true ) ;
1931: LD_VAR 0 3
1935: PPUSH
1936: LD_VAR 0 1
1940: PPUSH
1941: LD_INT 1
1943: PPUSH
1944: CALL_OW 49
// end ;
1948: LD_VAR 0 2
1952: RET
// export function ScoreBoard ( veh ) ; var points ; begin
1953: LD_INT 0
1955: PPUSH
1956: PPUSH
// points := 0 ;
1957: LD_ADDR_VAR 0 3
1961: PUSH
1962: LD_INT 0
1964: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_light_trike , us_light_wheeled ] then
1965: LD_VAR 0 1
1969: PPUSH
1970: CALL_OW 265
1974: PUSH
1975: LD_INT 12
1977: PUSH
1978: LD_INT 1
1980: PUSH
1981: EMPTY
1982: LIST
1983: LIST
1984: IN
1985: IFFALSE 2001
// points := points + 10 ;
1987: LD_ADDR_VAR 0 3
1991: PUSH
1992: LD_VAR 0 3
1996: PUSH
1997: LD_INT 10
1999: PLUS
2000: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_medium_trike , ru_medium_wheeled , us_medium_wheeled ] then
2001: LD_VAR 0 1
2005: PPUSH
2006: CALL_OW 265
2010: PUSH
2011: LD_INT 13
2013: PUSH
2014: LD_INT 21
2016: PUSH
2017: LD_INT 2
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: LIST
2024: IN
2025: IFFALSE 2041
// points := points + 15 ;
2027: LD_ADDR_VAR 0 3
2031: PUSH
2032: LD_VAR 0 3
2036: PUSH
2037: LD_INT 15
2039: PLUS
2040: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_half_tracked , ru_medium_tracked , us_medium_tracked ] then
2041: LD_VAR 0 1
2045: PPUSH
2046: CALL_OW 265
2050: PUSH
2051: LD_INT 14
2053: PUSH
2054: LD_INT 22
2056: PUSH
2057: LD_INT 3
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: LIST
2064: IN
2065: IFFALSE 2081
// points := points + 20 ;
2067: LD_ADDR_VAR 0 3
2071: PUSH
2072: LD_VAR 0 3
2076: PUSH
2077: LD_INT 20
2079: PLUS
2080: ST_TO_ADDR
// if GetChassis ( veh ) in [ ru_heavy_wheeled , ru_heavy_tracked , us_heavy_tracked ] then
2081: LD_VAR 0 1
2085: PPUSH
2086: CALL_OW 265
2090: PUSH
2091: LD_INT 23
2093: PUSH
2094: LD_INT 24
2096: PUSH
2097: LD_INT 4
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: LIST
2104: IN
2105: IFFALSE 2121
// points := points + 25 ;
2107: LD_ADDR_VAR 0 3
2111: PUSH
2112: LD_VAR 0 3
2116: PUSH
2117: LD_INT 25
2119: PLUS
2120: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_hovercraft , us_morphling ] then
2121: LD_VAR 0 1
2125: PPUSH
2126: CALL_OW 265
2130: PUSH
2131: LD_INT 11
2133: PUSH
2134: LD_INT 5
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: IN
2141: IFFALSE 2157
// points := points + 30 ;
2143: LD_ADDR_VAR 0 3
2147: PUSH
2148: LD_VAR 0 3
2152: PUSH
2153: LD_INT 30
2155: PLUS
2156: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_combustion ] then
2157: LD_VAR 0 1
2161: PPUSH
2162: CALL_OW 262
2166: PUSH
2167: LD_INT 1
2169: PUSH
2170: EMPTY
2171: LIST
2172: EQUAL
2173: IFFALSE 2189
// points := points + 5 ;
2175: LD_ADDR_VAR 0 3
2179: PUSH
2180: LD_VAR 0 3
2184: PUSH
2185: LD_INT 5
2187: PLUS
2188: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_solar ] then
2189: LD_VAR 0 1
2193: PPUSH
2194: CALL_OW 262
2198: PUSH
2199: LD_INT 2
2201: PUSH
2202: EMPTY
2203: LIST
2204: EQUAL
2205: IFFALSE 2221
// points := points + 15 ;
2207: LD_ADDR_VAR 0 3
2211: PUSH
2212: LD_VAR 0 3
2216: PUSH
2217: LD_INT 15
2219: PLUS
2220: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_siberite ] then
2221: LD_VAR 0 1
2225: PPUSH
2226: CALL_OW 262
2230: PUSH
2231: LD_INT 3
2233: PUSH
2234: EMPTY
2235: LIST
2236: EQUAL
2237: IFFALSE 2253
// points := points + 25 ;
2239: LD_ADDR_VAR 0 3
2243: PUSH
2244: LD_VAR 0 3
2248: PUSH
2249: LD_INT 25
2251: PLUS
2252: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_multimissile_ballista , ar_double_machine_gun , ar_light_gun , ru_heavy_machine_gun , us_machine_gun , us_light_gun ] then
2253: LD_VAR 0 1
2257: PPUSH
2258: CALL_OW 264
2262: PUSH
2263: LD_INT 22
2265: PUSH
2266: LD_INT 24
2268: PUSH
2269: LD_INT 23
2271: PUSH
2272: LD_INT 42
2274: PUSH
2275: LD_INT 2
2277: PUSH
2278: LD_INT 3
2280: PUSH
2281: EMPTY
2282: LIST
2283: LIST
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: IN
2289: IFFALSE 2305
// points := points + 5 ;
2291: LD_ADDR_VAR 0 3
2295: PUSH
2296: LD_VAR 0 3
2300: PUSH
2301: LD_INT 5
2303: PLUS
2304: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_gatling_gun , ar_gun , ru_gatling_gun , ru_gun , us_gatling_gun , us_double_gun ] then
2305: LD_VAR 0 1
2309: PPUSH
2310: CALL_OW 264
2314: PUSH
2315: LD_INT 25
2317: PUSH
2318: LD_INT 27
2320: PUSH
2321: LD_INT 43
2323: PUSH
2324: LD_INT 44
2326: PUSH
2327: LD_INT 4
2329: PUSH
2330: LD_INT 5
2332: PUSH
2333: EMPTY
2334: LIST
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: LIST
2340: IN
2341: IFFALSE 2357
// points := points + 10 ;
2343: LD_ADDR_VAR 0 3
2347: PUSH
2348: LD_VAR 0 3
2352: PUSH
2353: LD_INT 10
2355: PLUS
2356: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher ] then
2357: LD_VAR 0 1
2361: PPUSH
2362: CALL_OW 264
2366: PUSH
2367: LD_INT 28
2369: PUSH
2370: LD_INT 45
2372: PUSH
2373: LD_INT 7
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: LIST
2380: IN
2381: IFFALSE 2397
// points := points + 20 ;
2383: LD_ADDR_VAR 0 3
2387: PUSH
2388: LD_VAR 0 3
2392: PUSH
2393: LD_INT 20
2395: PLUS
2396: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ru_heavy_gun , us_heavy_gun ] then
2397: LD_VAR 0 1
2401: PPUSH
2402: CALL_OW 264
2406: PUSH
2407: LD_INT 46
2409: PUSH
2410: LD_INT 6
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: IN
2417: IFFALSE 2433
// points := points + 25 ;
2419: LD_ADDR_VAR 0 3
2423: PUSH
2424: LD_VAR 0 3
2428: PUSH
2429: LD_INT 25
2431: PLUS
2432: ST_TO_ADDR
// if GetWeapon ( veh ) in [ us_laser , us_radar , ar_radar ] then
2433: LD_VAR 0 1
2437: PPUSH
2438: CALL_OW 264
2442: PUSH
2443: LD_INT 9
2445: PUSH
2446: LD_INT 11
2448: PUSH
2449: LD_INT 30
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: LIST
2456: IN
2457: IFFALSE 2473
// points := points + 30 ;
2459: LD_ADDR_VAR 0 3
2463: PUSH
2464: LD_VAR 0 3
2468: PUSH
2469: LD_INT 30
2471: PLUS
2472: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_selfpropelled_bomb , ru_time_lapser , ru_rocket , us_double_laser ] then
2473: LD_VAR 0 1
2477: PPUSH
2478: CALL_OW 264
2482: PUSH
2483: LD_INT 29
2485: PUSH
2486: LD_INT 49
2488: PUSH
2489: LD_INT 47
2491: PUSH
2492: LD_INT 10
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: LIST
2499: LIST
2500: IN
2501: IFFALSE 2517
// points := points + 50 ;
2503: LD_ADDR_VAR 0 3
2507: PUSH
2508: LD_VAR 0 3
2512: PUSH
2513: LD_INT 50
2515: PLUS
2516: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ru_siberium_rocket , us_siberium_rocket ] then
2517: LD_VAR 0 1
2521: PPUSH
2522: CALL_OW 264
2526: PUSH
2527: LD_INT 48
2529: PUSH
2530: LD_INT 8
2532: PUSH
2533: EMPTY
2534: LIST
2535: LIST
2536: IN
2537: IFFALSE 2553
// points := points + 100 ;
2539: LD_ADDR_VAR 0 3
2543: PUSH
2544: LD_VAR 0 3
2548: PUSH
2549: LD_INT 100
2551: PLUS
2552: ST_TO_ADDR
// result := points ;
2553: LD_ADDR_VAR 0 2
2557: PUSH
2558: LD_VAR 0 3
2562: ST_TO_ADDR
// end ; end_of_file
2563: LD_VAR 0 2
2567: RET
// every 0 0$01 trigger time do var filter , i , side , driver , un ;
2568: LD_EXP 5
2572: IFFALSE 3217
2574: GO 2576
2576: DISABLE
2577: LD_INT 0
2579: PPUSH
2580: PPUSH
2581: PPUSH
2582: PPUSH
2583: PPUSH
// begin enable ;
2584: ENABLE
// if tick < 36 then
2585: LD_OWVAR 1
2589: PUSH
2590: LD_INT 36
2592: LESS
2593: IFFALSE 2605
// SetAreaMapShow ( exit_area , 1 ) ;
2595: LD_INT 4
2597: PPUSH
2598: LD_INT 1
2600: PPUSH
2601: CALL_OW 424
// time := time - 0 0$01 ;
2605: LD_ADDR_EXP 5
2609: PUSH
2610: LD_EXP 5
2614: PUSH
2615: LD_INT 35
2617: MINUS
2618: ST_TO_ADDR
// if time = 0 0$00 then
2619: LD_EXP 5
2623: PUSH
2624: LD_INT 0
2626: EQUAL
2627: IFFALSE 2690
// if p1 > p2 and p1 > p3 and p1 > p4 and p1 > p5 then
2629: LD_EXP 7
2633: PUSH
2634: LD_EXP 8
2638: GREATER
2639: PUSH
2640: LD_EXP 7
2644: PUSH
2645: LD_EXP 9
2649: GREATER
2650: AND
2651: PUSH
2652: LD_EXP 7
2656: PUSH
2657: LD_EXP 10
2661: GREATER
2662: AND
2663: PUSH
2664: LD_EXP 7
2668: PUSH
2669: LD_EXP 11
2673: GREATER
2674: AND
2675: IFFALSE 2683
// YouWin else
2677: CALL_OW 103
2681: GO 2690
// YouLost (  ) ;
2683: LD_STRING 
2685: PPUSH
2686: CALL_OW 104
// filter := FilterUnitsInArea ( exit_area , [ f_type , unit_vehicle ] ) ;
2690: LD_ADDR_VAR 0 1
2694: PUSH
2695: LD_INT 4
2697: PPUSH
2698: LD_INT 21
2700: PUSH
2701: LD_INT 2
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: PPUSH
2708: CALL_OW 70
2712: ST_TO_ADDR
// if filter then
2713: LD_VAR 0 1
2717: IFFALSE 3007
// for i = 1 to filter do
2719: LD_ADDR_VAR 0 2
2723: PUSH
2724: DOUBLE
2725: LD_INT 1
2727: DEC
2728: ST_TO_ADDR
2729: LD_VAR 0 1
2733: PUSH
2734: FOR_TO
2735: IFFALSE 3005
// begin side := GetSide ( filter [ i ] ) ;
2737: LD_ADDR_VAR 0 3
2741: PUSH
2742: LD_VAR 0 1
2746: PUSH
2747: LD_VAR 0 2
2751: ARRAY
2752: PPUSH
2753: CALL_OW 255
2757: ST_TO_ADDR
// driver := IsDrivenBy ( filter [ i ] ) ;
2758: LD_ADDR_VAR 0 4
2762: PUSH
2763: LD_VAR 0 1
2767: PUSH
2768: LD_VAR 0 2
2772: ARRAY
2773: PPUSH
2774: CALL_OW 311
2778: ST_TO_ADDR
// un := filter [ i ] ;
2779: LD_ADDR_VAR 0 5
2783: PUSH
2784: LD_VAR 0 1
2788: PUSH
2789: LD_VAR 0 2
2793: ARRAY
2794: ST_TO_ADDR
// if IsInUnit ( driver ) then
2795: LD_VAR 0 4
2799: PPUSH
2800: CALL_OW 310
2804: IFFALSE 2815
// ComExitVehicle ( driver ) ;
2806: LD_VAR 0 4
2810: PPUSH
2811: CALL_OW 121
// Wait ( 0 0$0.3 ) ;
2815: LD_INT 10
2817: PPUSH
2818: CALL_OW 67
// RemoveUnit ( filter [ i ] ) ;
2822: LD_VAR 0 1
2826: PUSH
2827: LD_VAR 0 2
2831: ARRAY
2832: PPUSH
2833: CALL_OW 64
// case side of 1 :
2837: LD_VAR 0 3
2841: PUSH
2842: LD_INT 1
2844: DOUBLE
2845: EQUAL
2846: IFTRUE 2850
2848: GO 2874
2850: POP
// p1 := p1 + ScoreBoard ( un ) ; 2 :
2851: LD_ADDR_EXP 7
2855: PUSH
2856: LD_EXP 7
2860: PUSH
2861: LD_VAR 0 5
2865: PPUSH
2866: CALL 1953 0 1
2870: PLUS
2871: ST_TO_ADDR
2872: GO 3003
2874: LD_INT 2
2876: DOUBLE
2877: EQUAL
2878: IFTRUE 2882
2880: GO 2906
2882: POP
// p2 := p2 + ScoreBoard ( un ) ; 3 :
2883: LD_ADDR_EXP 8
2887: PUSH
2888: LD_EXP 8
2892: PUSH
2893: LD_VAR 0 5
2897: PPUSH
2898: CALL 1953 0 1
2902: PLUS
2903: ST_TO_ADDR
2904: GO 3003
2906: LD_INT 3
2908: DOUBLE
2909: EQUAL
2910: IFTRUE 2914
2912: GO 2938
2914: POP
// p3 := p3 + ScoreBoard ( un ) ; 4 :
2915: LD_ADDR_EXP 9
2919: PUSH
2920: LD_EXP 9
2924: PUSH
2925: LD_VAR 0 5
2929: PPUSH
2930: CALL 1953 0 1
2934: PLUS
2935: ST_TO_ADDR
2936: GO 3003
2938: LD_INT 4
2940: DOUBLE
2941: EQUAL
2942: IFTRUE 2946
2944: GO 2970
2946: POP
// p4 := p4 + ScoreBoard ( un ) ; 5 :
2947: LD_ADDR_EXP 10
2951: PUSH
2952: LD_EXP 10
2956: PUSH
2957: LD_VAR 0 5
2961: PPUSH
2962: CALL 1953 0 1
2966: PLUS
2967: ST_TO_ADDR
2968: GO 3003
2970: LD_INT 5
2972: DOUBLE
2973: EQUAL
2974: IFTRUE 2978
2976: GO 3002
2978: POP
// p5 := p5 + ScoreBoard ( un ) ; end ;
2979: LD_ADDR_EXP 11
2983: PUSH
2984: LD_EXP 11
2988: PUSH
2989: LD_VAR 0 5
2993: PPUSH
2994: CALL 1953 0 1
2998: PLUS
2999: ST_TO_ADDR
3000: GO 3003
3002: POP
// end ;
3003: GO 2734
3005: POP
3006: POP
// case players of 3 :
3007: LD_EXP 3
3011: PUSH
3012: LD_INT 3
3014: DOUBLE
3015: EQUAL
3016: IFTRUE 3020
3018: GO 3070
3020: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 ] ;
3021: LD_ADDR_OWVAR 47
3025: PUSH
3026: LD_STRING #tick
3028: PUSH
3029: LD_EXP 5
3033: PUSH
3034: LD_STRING #player1
3036: PUSH
3037: LD_EXP 7
3041: PUSH
3042: LD_STRING #player2
3044: PUSH
3045: LD_EXP 8
3049: PUSH
3050: LD_STRING #player3
3052: PUSH
3053: LD_EXP 9
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: LIST
3064: LIST
3065: LIST
3066: LIST
3067: ST_TO_ADDR
// end ; 4 :
3068: GO 3217
3070: LD_INT 4
3072: DOUBLE
3073: EQUAL
3074: IFTRUE 3078
3076: GO 3138
3078: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 , #player4 , p4 ] ;
3079: LD_ADDR_OWVAR 47
3083: PUSH
3084: LD_STRING #tick
3086: PUSH
3087: LD_EXP 5
3091: PUSH
3092: LD_STRING #player1
3094: PUSH
3095: LD_EXP 7
3099: PUSH
3100: LD_STRING #player2
3102: PUSH
3103: LD_EXP 8
3107: PUSH
3108: LD_STRING #player3
3110: PUSH
3111: LD_EXP 9
3115: PUSH
3116: LD_STRING #player4
3118: PUSH
3119: LD_EXP 10
3123: PUSH
3124: EMPTY
3125: LIST
3126: LIST
3127: LIST
3128: LIST
3129: LIST
3130: LIST
3131: LIST
3132: LIST
3133: LIST
3134: LIST
3135: ST_TO_ADDR
// end ; 5 :
3136: GO 3217
3138: LD_INT 5
3140: DOUBLE
3141: EQUAL
3142: IFTRUE 3146
3144: GO 3216
3146: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 , #player4 , p4 , #player5 , p5 ] ;
3147: LD_ADDR_OWVAR 47
3151: PUSH
3152: LD_STRING #tick
3154: PUSH
3155: LD_EXP 5
3159: PUSH
3160: LD_STRING #player1
3162: PUSH
3163: LD_EXP 7
3167: PUSH
3168: LD_STRING #player2
3170: PUSH
3171: LD_EXP 8
3175: PUSH
3176: LD_STRING #player3
3178: PUSH
3179: LD_EXP 9
3183: PUSH
3184: LD_STRING #player4
3186: PUSH
3187: LD_EXP 10
3191: PUSH
3192: LD_STRING #player5
3194: PUSH
3195: LD_EXP 11
3199: PUSH
3200: EMPTY
3201: LIST
3202: LIST
3203: LIST
3204: LIST
3205: LIST
3206: LIST
3207: LIST
3208: LIST
3209: LIST
3210: LIST
3211: LIST
3212: LIST
3213: ST_TO_ADDR
// end ; end ;
3214: GO 3217
3216: POP
// end ;
3217: PPOPN 5
3219: END
// every 0 0$05 trigger time do var chance , p ;
3220: LD_EXP 5
3224: IFFALSE 3371
3226: GO 3228
3228: DISABLE
3229: LD_INT 0
3231: PPUSH
3232: PPUSH
// begin enable ;
3233: ENABLE
// Wait ( Rand ( 0 0$01 , 0 0$06 ) ) ;
3234: LD_INT 35
3236: PPUSH
3237: LD_INT 210
3239: PPUSH
3240: CALL_OW 12
3244: PPUSH
3245: CALL_OW 67
// if FilterAllUnits ( [ f_type , unit_vehicle ] ) < veh_amount then
3249: LD_INT 21
3251: PUSH
3252: LD_INT 2
3254: PUSH
3255: EMPTY
3256: LIST
3257: LIST
3258: PPUSH
3259: CALL_OW 69
3263: PUSH
3264: LD_EXP 6
3268: LESS
3269: IFFALSE 3371
// begin SpawnCar ( false , veh_spawn ) ;
3271: LD_INT 0
3273: PPUSH
3274: LD_INT 5
3276: PPUSH
3277: CALL 946 0 2
// if sib_bomb and FilterAllUnits ( [ f_or , [ [ f_weapon , us_siberium_rocket ] , [ f_weapon , ru_siberium_rocket ] ] ] ) = 0 then
3281: LD_EXP 4
3285: PUSH
3286: LD_INT 2
3288: PUSH
3289: LD_INT 34
3291: PUSH
3292: LD_INT 8
3294: PUSH
3295: EMPTY
3296: LIST
3297: LIST
3298: PUSH
3299: LD_INT 34
3301: PUSH
3302: LD_INT 48
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: PUSH
3309: EMPTY
3310: LIST
3311: LIST
3312: PUSH
3313: EMPTY
3314: LIST
3315: LIST
3316: PPUSH
3317: CALL_OW 69
3321: PUSH
3322: LD_INT 0
3324: EQUAL
3325: AND
3326: IFFALSE 3371
// begin chance := 23 ;
3328: LD_ADDR_VAR 0 1
3332: PUSH
3333: LD_INT 23
3335: ST_TO_ADDR
// p := Rand ( 0 , 100 ) ;
3336: LD_ADDR_VAR 0 2
3340: PUSH
3341: LD_INT 0
3343: PPUSH
3344: LD_INT 100
3346: PPUSH
3347: CALL_OW 12
3351: ST_TO_ADDR
// if p < chance then
3352: LD_VAR 0 2
3356: PUSH
3357: LD_VAR 0 1
3361: LESS
3362: IFFALSE 3371
// SpawnSibRocket ( veh_spawn ) ;
3364: LD_INT 5
3366: PPUSH
3367: CALL 1784 0 1
// end ; end ; end ; end_of_file
3371: PPOPN 2
3373: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
3374: LD_INT 0
3376: PPUSH
3377: PPUSH
3378: PPUSH
3379: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
3380: LD_VAR 0 1
3384: PPUSH
3385: CALL_OW 264
3389: PUSH
3390: LD_EXP 86
3394: EQUAL
3395: IFFALSE 3467
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
3397: LD_INT 68
3399: PPUSH
3400: LD_VAR 0 1
3404: PPUSH
3405: CALL_OW 255
3409: PPUSH
3410: CALL_OW 321
3414: PUSH
3415: LD_INT 2
3417: EQUAL
3418: IFFALSE 3430
// eff := 70 else
3420: LD_ADDR_VAR 0 4
3424: PUSH
3425: LD_INT 70
3427: ST_TO_ADDR
3428: GO 3438
// eff := 30 ;
3430: LD_ADDR_VAR 0 4
3434: PUSH
3435: LD_INT 30
3437: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
3438: LD_VAR 0 1
3442: PPUSH
3443: CALL_OW 250
3447: PPUSH
3448: LD_VAR 0 1
3452: PPUSH
3453: CALL_OW 251
3457: PPUSH
3458: LD_VAR 0 4
3462: PPUSH
3463: CALL_OW 495
// end ; end ;
3467: LD_VAR 0 2
3471: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
3472: LD_INT 0
3474: PPUSH
// end ;
3475: LD_VAR 0 4
3479: RET
// export function SOS_Command ( cmd ) ; begin
3480: LD_INT 0
3482: PPUSH
// end ;
3483: LD_VAR 0 2
3487: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
3488: LD_INT 0
3490: PPUSH
// end ;
3491: LD_VAR 0 6
3495: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
3496: LD_INT 0
3498: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
3499: LD_VAR 0 1
3503: PUSH
3504: LD_INT 250
3506: EQUAL
3507: PUSH
3508: LD_VAR 0 2
3512: PPUSH
3513: CALL_OW 264
3517: PUSH
3518: LD_EXP 89
3522: EQUAL
3523: AND
3524: IFFALSE 3545
// MinerPlaceMine ( unit , x , y ) ;
3526: LD_VAR 0 2
3530: PPUSH
3531: LD_VAR 0 4
3535: PPUSH
3536: LD_VAR 0 5
3540: PPUSH
3541: CALL 5894 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
3545: LD_VAR 0 1
3549: PUSH
3550: LD_INT 251
3552: EQUAL
3553: PUSH
3554: LD_VAR 0 2
3558: PPUSH
3559: CALL_OW 264
3563: PUSH
3564: LD_EXP 89
3568: EQUAL
3569: AND
3570: IFFALSE 3591
// MinerDetonateMine ( unit , x , y ) ;
3572: LD_VAR 0 2
3576: PPUSH
3577: LD_VAR 0 4
3581: PPUSH
3582: LD_VAR 0 5
3586: PPUSH
3587: CALL 6171 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
3591: LD_VAR 0 1
3595: PUSH
3596: LD_INT 252
3598: EQUAL
3599: PUSH
3600: LD_VAR 0 2
3604: PPUSH
3605: CALL_OW 264
3609: PUSH
3610: LD_EXP 89
3614: EQUAL
3615: AND
3616: IFFALSE 3637
// MinerCreateMinefield ( unit , x , y ) ;
3618: LD_VAR 0 2
3622: PPUSH
3623: LD_VAR 0 4
3627: PPUSH
3628: LD_VAR 0 5
3632: PPUSH
3633: CALL 6588 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
3637: LD_VAR 0 1
3641: PUSH
3642: LD_INT 253
3644: EQUAL
3645: PUSH
3646: LD_VAR 0 2
3650: PPUSH
3651: CALL_OW 257
3655: PUSH
3656: LD_INT 5
3658: EQUAL
3659: AND
3660: IFFALSE 3681
// ComBinocular ( unit , x , y ) ;
3662: LD_VAR 0 2
3666: PPUSH
3667: LD_VAR 0 4
3671: PPUSH
3672: LD_VAR 0 5
3676: PPUSH
3677: CALL 6959 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
3681: LD_VAR 0 1
3685: PUSH
3686: LD_INT 254
3688: EQUAL
3689: PUSH
3690: LD_VAR 0 2
3694: PPUSH
3695: CALL_OW 264
3699: PUSH
3700: LD_EXP 84
3704: EQUAL
3705: AND
3706: PUSH
3707: LD_VAR 0 3
3711: PPUSH
3712: CALL_OW 263
3716: PUSH
3717: LD_INT 3
3719: EQUAL
3720: AND
3721: IFFALSE 3737
// HackDestroyVehicle ( unit , selectedUnit ) ;
3723: LD_VAR 0 2
3727: PPUSH
3728: LD_VAR 0 3
3732: PPUSH
3733: CALL 5254 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
3737: LD_VAR 0 1
3741: PUSH
3742: LD_INT 255
3744: EQUAL
3745: PUSH
3746: LD_VAR 0 2
3750: PPUSH
3751: CALL_OW 264
3755: PUSH
3756: LD_INT 14
3758: PUSH
3759: LD_INT 53
3761: PUSH
3762: EMPTY
3763: LIST
3764: LIST
3765: IN
3766: AND
3767: PUSH
3768: LD_VAR 0 4
3772: PPUSH
3773: LD_VAR 0 5
3777: PPUSH
3778: CALL_OW 488
3782: AND
3783: IFFALSE 3807
// CutTreeXYR ( unit , x , y , 12 ) ;
3785: LD_VAR 0 2
3789: PPUSH
3790: LD_VAR 0 4
3794: PPUSH
3795: LD_VAR 0 5
3799: PPUSH
3800: LD_INT 12
3802: PPUSH
3803: CALL 3820 0 4
// end ;
3807: LD_VAR 0 6
3811: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
3812: LD_INT 0
3814: PPUSH
// end ;
3815: LD_VAR 0 4
3819: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
3820: LD_INT 0
3822: PPUSH
3823: PPUSH
3824: PPUSH
3825: PPUSH
3826: PPUSH
3827: PPUSH
3828: PPUSH
3829: PPUSH
3830: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
3831: LD_VAR 0 1
3835: NOT
3836: PUSH
3837: LD_VAR 0 2
3841: PPUSH
3842: LD_VAR 0 3
3846: PPUSH
3847: CALL_OW 488
3851: NOT
3852: OR
3853: PUSH
3854: LD_VAR 0 4
3858: NOT
3859: OR
3860: IFFALSE 3864
// exit ;
3862: GO 4204
// list := [ ] ;
3864: LD_ADDR_VAR 0 13
3868: PUSH
3869: EMPTY
3870: ST_TO_ADDR
// if x - r < 0 then
3871: LD_VAR 0 2
3875: PUSH
3876: LD_VAR 0 4
3880: MINUS
3881: PUSH
3882: LD_INT 0
3884: LESS
3885: IFFALSE 3897
// min_x := 0 else
3887: LD_ADDR_VAR 0 7
3891: PUSH
3892: LD_INT 0
3894: ST_TO_ADDR
3895: GO 3913
// min_x := x - r ;
3897: LD_ADDR_VAR 0 7
3901: PUSH
3902: LD_VAR 0 2
3906: PUSH
3907: LD_VAR 0 4
3911: MINUS
3912: ST_TO_ADDR
// if y - r < 0 then
3913: LD_VAR 0 3
3917: PUSH
3918: LD_VAR 0 4
3922: MINUS
3923: PUSH
3924: LD_INT 0
3926: LESS
3927: IFFALSE 3939
// min_y := 0 else
3929: LD_ADDR_VAR 0 8
3933: PUSH
3934: LD_INT 0
3936: ST_TO_ADDR
3937: GO 3955
// min_y := y - r ;
3939: LD_ADDR_VAR 0 8
3943: PUSH
3944: LD_VAR 0 3
3948: PUSH
3949: LD_VAR 0 4
3953: MINUS
3954: ST_TO_ADDR
// max_x := x + r ;
3955: LD_ADDR_VAR 0 9
3959: PUSH
3960: LD_VAR 0 2
3964: PUSH
3965: LD_VAR 0 4
3969: PLUS
3970: ST_TO_ADDR
// max_y := y + r ;
3971: LD_ADDR_VAR 0 10
3975: PUSH
3976: LD_VAR 0 3
3980: PUSH
3981: LD_VAR 0 4
3985: PLUS
3986: ST_TO_ADDR
// for _x = min_x to max_x do
3987: LD_ADDR_VAR 0 11
3991: PUSH
3992: DOUBLE
3993: LD_VAR 0 7
3997: DEC
3998: ST_TO_ADDR
3999: LD_VAR 0 9
4003: PUSH
4004: FOR_TO
4005: IFFALSE 4122
// for _y = min_y to max_y do
4007: LD_ADDR_VAR 0 12
4011: PUSH
4012: DOUBLE
4013: LD_VAR 0 8
4017: DEC
4018: ST_TO_ADDR
4019: LD_VAR 0 10
4023: PUSH
4024: FOR_TO
4025: IFFALSE 4118
// begin if not ValidHex ( _x , _y ) then
4027: LD_VAR 0 11
4031: PPUSH
4032: LD_VAR 0 12
4036: PPUSH
4037: CALL_OW 488
4041: NOT
4042: IFFALSE 4046
// continue ;
4044: GO 4024
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
4046: LD_VAR 0 11
4050: PPUSH
4051: LD_VAR 0 12
4055: PPUSH
4056: CALL_OW 351
4060: PUSH
4061: LD_VAR 0 11
4065: PPUSH
4066: LD_VAR 0 12
4070: PPUSH
4071: CALL_OW 554
4075: AND
4076: IFFALSE 4116
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
4078: LD_ADDR_VAR 0 13
4082: PUSH
4083: LD_VAR 0 13
4087: PPUSH
4088: LD_VAR 0 13
4092: PUSH
4093: LD_INT 1
4095: PLUS
4096: PPUSH
4097: LD_VAR 0 11
4101: PUSH
4102: LD_VAR 0 12
4106: PUSH
4107: EMPTY
4108: LIST
4109: LIST
4110: PPUSH
4111: CALL_OW 2
4115: ST_TO_ADDR
// end ;
4116: GO 4024
4118: POP
4119: POP
4120: GO 4004
4122: POP
4123: POP
// if not list then
4124: LD_VAR 0 13
4128: NOT
4129: IFFALSE 4133
// exit ;
4131: GO 4204
// for i in list do
4133: LD_ADDR_VAR 0 6
4137: PUSH
4138: LD_VAR 0 13
4142: PUSH
4143: FOR_IN
4144: IFFALSE 4202
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
4146: LD_VAR 0 1
4150: PPUSH
4151: LD_STRING M
4153: PUSH
4154: LD_VAR 0 6
4158: PUSH
4159: LD_INT 1
4161: ARRAY
4162: PUSH
4163: LD_VAR 0 6
4167: PUSH
4168: LD_INT 2
4170: ARRAY
4171: PUSH
4172: LD_INT 0
4174: PUSH
4175: LD_INT 0
4177: PUSH
4178: LD_INT 0
4180: PUSH
4181: LD_INT 0
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: LIST
4188: LIST
4189: LIST
4190: LIST
4191: LIST
4192: PUSH
4193: EMPTY
4194: LIST
4195: PPUSH
4196: CALL_OW 447
4200: GO 4143
4202: POP
4203: POP
// end ;
4204: LD_VAR 0 5
4208: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
4209: LD_EXP 14
4213: NOT
4214: IFFALSE 4264
4216: GO 4218
4218: DISABLE
// begin initHack := true ;
4219: LD_ADDR_EXP 14
4223: PUSH
4224: LD_INT 1
4226: ST_TO_ADDR
// hackTanks := [ ] ;
4227: LD_ADDR_EXP 15
4231: PUSH
4232: EMPTY
4233: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
4234: LD_ADDR_EXP 16
4238: PUSH
4239: EMPTY
4240: ST_TO_ADDR
// hackLimit := 3 ;
4241: LD_ADDR_EXP 17
4245: PUSH
4246: LD_INT 3
4248: ST_TO_ADDR
// hackDist := 12 ;
4249: LD_ADDR_EXP 18
4253: PUSH
4254: LD_INT 12
4256: ST_TO_ADDR
// hackCounter := [ ] ;
4257: LD_ADDR_EXP 19
4261: PUSH
4262: EMPTY
4263: ST_TO_ADDR
// end ;
4264: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
4265: LD_EXP 14
4269: PUSH
4270: LD_INT 34
4272: PUSH
4273: LD_EXP 84
4277: PUSH
4278: EMPTY
4279: LIST
4280: LIST
4281: PPUSH
4282: CALL_OW 69
4286: AND
4287: IFFALSE 4542
4289: GO 4291
4291: DISABLE
4292: LD_INT 0
4294: PPUSH
4295: PPUSH
// begin enable ;
4296: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
4297: LD_ADDR_VAR 0 1
4301: PUSH
4302: LD_INT 34
4304: PUSH
4305: LD_EXP 84
4309: PUSH
4310: EMPTY
4311: LIST
4312: LIST
4313: PPUSH
4314: CALL_OW 69
4318: PUSH
4319: FOR_IN
4320: IFFALSE 4540
// begin if not i in hackTanks then
4322: LD_VAR 0 1
4326: PUSH
4327: LD_EXP 15
4331: IN
4332: NOT
4333: IFFALSE 4416
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
4335: LD_ADDR_EXP 15
4339: PUSH
4340: LD_EXP 15
4344: PPUSH
4345: LD_EXP 15
4349: PUSH
4350: LD_INT 1
4352: PLUS
4353: PPUSH
4354: LD_VAR 0 1
4358: PPUSH
4359: CALL_OW 1
4363: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
4364: LD_ADDR_EXP 16
4368: PUSH
4369: LD_EXP 16
4373: PPUSH
4374: LD_EXP 16
4378: PUSH
4379: LD_INT 1
4381: PLUS
4382: PPUSH
4383: EMPTY
4384: PPUSH
4385: CALL_OW 1
4389: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
4390: LD_ADDR_EXP 19
4394: PUSH
4395: LD_EXP 19
4399: PPUSH
4400: LD_EXP 19
4404: PUSH
4405: LD_INT 1
4407: PLUS
4408: PPUSH
4409: EMPTY
4410: PPUSH
4411: CALL_OW 1
4415: ST_TO_ADDR
// end ; if not IsOk ( i ) then
4416: LD_VAR 0 1
4420: PPUSH
4421: CALL_OW 302
4425: NOT
4426: IFFALSE 4439
// begin HackUnlinkAll ( i ) ;
4428: LD_VAR 0 1
4432: PPUSH
4433: CALL 4545 0 1
// continue ;
4437: GO 4319
// end ; HackCheckCapturedStatus ( i ) ;
4439: LD_VAR 0 1
4443: PPUSH
4444: CALL 4988 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
4448: LD_ADDR_VAR 0 2
4452: PUSH
4453: LD_INT 81
4455: PUSH
4456: LD_VAR 0 1
4460: PPUSH
4461: CALL_OW 255
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: PUSH
4470: LD_INT 33
4472: PUSH
4473: LD_INT 3
4475: PUSH
4476: EMPTY
4477: LIST
4478: LIST
4479: PUSH
4480: LD_INT 91
4482: PUSH
4483: LD_VAR 0 1
4487: PUSH
4488: LD_EXP 18
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: LIST
4497: PUSH
4498: LD_INT 50
4500: PUSH
4501: EMPTY
4502: LIST
4503: PUSH
4504: EMPTY
4505: LIST
4506: LIST
4507: LIST
4508: LIST
4509: PPUSH
4510: CALL_OW 69
4514: ST_TO_ADDR
// if not tmp then
4515: LD_VAR 0 2
4519: NOT
4520: IFFALSE 4524
// continue ;
4522: GO 4319
// HackLink ( i , tmp ) ;
4524: LD_VAR 0 1
4528: PPUSH
4529: LD_VAR 0 2
4533: PPUSH
4534: CALL 4681 0 2
// end ;
4538: GO 4319
4540: POP
4541: POP
// end ;
4542: PPOPN 2
4544: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
4545: LD_INT 0
4547: PPUSH
4548: PPUSH
4549: PPUSH
// if not hack in hackTanks then
4550: LD_VAR 0 1
4554: PUSH
4555: LD_EXP 15
4559: IN
4560: NOT
4561: IFFALSE 4565
// exit ;
4563: GO 4676
// index := GetElementIndex ( hackTanks , hack ) ;
4565: LD_ADDR_VAR 0 4
4569: PUSH
4570: LD_EXP 15
4574: PPUSH
4575: LD_VAR 0 1
4579: PPUSH
4580: CALL 26125 0 2
4584: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
4585: LD_EXP 16
4589: PUSH
4590: LD_VAR 0 4
4594: ARRAY
4595: IFFALSE 4676
// begin for i in hackTanksCaptured [ index ] do
4597: LD_ADDR_VAR 0 3
4601: PUSH
4602: LD_EXP 16
4606: PUSH
4607: LD_VAR 0 4
4611: ARRAY
4612: PUSH
4613: FOR_IN
4614: IFFALSE 4640
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
4616: LD_VAR 0 3
4620: PUSH
4621: LD_INT 1
4623: ARRAY
4624: PPUSH
4625: LD_VAR 0 3
4629: PUSH
4630: LD_INT 2
4632: ARRAY
4633: PPUSH
4634: CALL_OW 235
4638: GO 4613
4640: POP
4641: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
4642: LD_ADDR_EXP 16
4646: PUSH
4647: LD_EXP 16
4651: PPUSH
4652: LD_VAR 0 4
4656: PPUSH
4657: EMPTY
4658: PPUSH
4659: CALL_OW 1
4663: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
4664: LD_VAR 0 1
4668: PPUSH
4669: LD_INT 0
4671: PPUSH
4672: CALL_OW 505
// end ; end ;
4676: LD_VAR 0 2
4680: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
4681: LD_INT 0
4683: PPUSH
4684: PPUSH
4685: PPUSH
// if not hack in hackTanks or not vehicles then
4686: LD_VAR 0 1
4690: PUSH
4691: LD_EXP 15
4695: IN
4696: NOT
4697: PUSH
4698: LD_VAR 0 2
4702: NOT
4703: OR
4704: IFFALSE 4708
// exit ;
4706: GO 4983
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
4708: LD_ADDR_VAR 0 2
4712: PUSH
4713: LD_VAR 0 1
4717: PPUSH
4718: LD_VAR 0 2
4722: PPUSH
4723: LD_INT 1
4725: PPUSH
4726: LD_INT 1
4728: PPUSH
4729: CALL 26775 0 4
4733: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
4734: LD_ADDR_VAR 0 5
4738: PUSH
4739: LD_EXP 15
4743: PPUSH
4744: LD_VAR 0 1
4748: PPUSH
4749: CALL 26125 0 2
4753: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
4754: LD_EXP 16
4758: PUSH
4759: LD_VAR 0 5
4763: ARRAY
4764: PUSH
4765: LD_EXP 17
4769: LESS
4770: IFFALSE 4959
// begin for i := 1 to vehicles do
4772: LD_ADDR_VAR 0 4
4776: PUSH
4777: DOUBLE
4778: LD_INT 1
4780: DEC
4781: ST_TO_ADDR
4782: LD_VAR 0 2
4786: PUSH
4787: FOR_TO
4788: IFFALSE 4957
// begin if hackTanksCaptured [ index ] = hackLimit then
4790: LD_EXP 16
4794: PUSH
4795: LD_VAR 0 5
4799: ARRAY
4800: PUSH
4801: LD_EXP 17
4805: EQUAL
4806: IFFALSE 4810
// break ;
4808: GO 4957
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
4810: LD_ADDR_EXP 19
4814: PUSH
4815: LD_EXP 19
4819: PPUSH
4820: LD_VAR 0 5
4824: PPUSH
4825: LD_EXP 19
4829: PUSH
4830: LD_VAR 0 5
4834: ARRAY
4835: PUSH
4836: LD_INT 1
4838: PLUS
4839: PPUSH
4840: CALL_OW 1
4844: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
4845: LD_ADDR_EXP 16
4849: PUSH
4850: LD_EXP 16
4854: PPUSH
4855: LD_VAR 0 5
4859: PUSH
4860: LD_EXP 16
4864: PUSH
4865: LD_VAR 0 5
4869: ARRAY
4870: PUSH
4871: LD_INT 1
4873: PLUS
4874: PUSH
4875: EMPTY
4876: LIST
4877: LIST
4878: PPUSH
4879: LD_VAR 0 2
4883: PUSH
4884: LD_VAR 0 4
4888: ARRAY
4889: PUSH
4890: LD_VAR 0 2
4894: PUSH
4895: LD_VAR 0 4
4899: ARRAY
4900: PPUSH
4901: CALL_OW 255
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: PPUSH
4910: CALL 26340 0 3
4914: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
4915: LD_VAR 0 2
4919: PUSH
4920: LD_VAR 0 4
4924: ARRAY
4925: PPUSH
4926: LD_VAR 0 1
4930: PPUSH
4931: CALL_OW 255
4935: PPUSH
4936: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
4940: LD_VAR 0 2
4944: PUSH
4945: LD_VAR 0 4
4949: ARRAY
4950: PPUSH
4951: CALL_OW 141
// end ;
4955: GO 4787
4957: POP
4958: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
4959: LD_VAR 0 1
4963: PPUSH
4964: LD_EXP 16
4968: PUSH
4969: LD_VAR 0 5
4973: ARRAY
4974: PUSH
4975: LD_INT 0
4977: PLUS
4978: PPUSH
4979: CALL_OW 505
// end ;
4983: LD_VAR 0 3
4987: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
4988: LD_INT 0
4990: PPUSH
4991: PPUSH
4992: PPUSH
4993: PPUSH
// if not hack in hackTanks then
4994: LD_VAR 0 1
4998: PUSH
4999: LD_EXP 15
5003: IN
5004: NOT
5005: IFFALSE 5009
// exit ;
5007: GO 5249
// index := GetElementIndex ( hackTanks , hack ) ;
5009: LD_ADDR_VAR 0 4
5013: PUSH
5014: LD_EXP 15
5018: PPUSH
5019: LD_VAR 0 1
5023: PPUSH
5024: CALL 26125 0 2
5028: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
5029: LD_ADDR_VAR 0 3
5033: PUSH
5034: DOUBLE
5035: LD_EXP 16
5039: PUSH
5040: LD_VAR 0 4
5044: ARRAY
5045: INC
5046: ST_TO_ADDR
5047: LD_INT 1
5049: PUSH
5050: FOR_DOWNTO
5051: IFFALSE 5223
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
5053: LD_ADDR_VAR 0 5
5057: PUSH
5058: LD_EXP 16
5062: PUSH
5063: LD_VAR 0 4
5067: ARRAY
5068: PUSH
5069: LD_VAR 0 3
5073: ARRAY
5074: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
5075: LD_VAR 0 5
5079: PUSH
5080: LD_INT 1
5082: ARRAY
5083: PPUSH
5084: CALL_OW 302
5088: NOT
5089: PUSH
5090: LD_VAR 0 5
5094: PUSH
5095: LD_INT 1
5097: ARRAY
5098: PPUSH
5099: CALL_OW 255
5103: PUSH
5104: LD_VAR 0 1
5108: PPUSH
5109: CALL_OW 255
5113: NONEQUAL
5114: OR
5115: IFFALSE 5221
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
5117: LD_VAR 0 5
5121: PUSH
5122: LD_INT 1
5124: ARRAY
5125: PPUSH
5126: CALL_OW 305
5130: PUSH
5131: LD_VAR 0 5
5135: PUSH
5136: LD_INT 1
5138: ARRAY
5139: PPUSH
5140: CALL_OW 255
5144: PUSH
5145: LD_VAR 0 1
5149: PPUSH
5150: CALL_OW 255
5154: EQUAL
5155: AND
5156: IFFALSE 5180
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
5158: LD_VAR 0 5
5162: PUSH
5163: LD_INT 1
5165: ARRAY
5166: PPUSH
5167: LD_VAR 0 5
5171: PUSH
5172: LD_INT 2
5174: ARRAY
5175: PPUSH
5176: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
5180: LD_ADDR_EXP 16
5184: PUSH
5185: LD_EXP 16
5189: PPUSH
5190: LD_VAR 0 4
5194: PPUSH
5195: LD_EXP 16
5199: PUSH
5200: LD_VAR 0 4
5204: ARRAY
5205: PPUSH
5206: LD_VAR 0 3
5210: PPUSH
5211: CALL_OW 3
5215: PPUSH
5216: CALL_OW 1
5220: ST_TO_ADDR
// end ; end ;
5221: GO 5050
5223: POP
5224: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
5225: LD_VAR 0 1
5229: PPUSH
5230: LD_EXP 16
5234: PUSH
5235: LD_VAR 0 4
5239: ARRAY
5240: PUSH
5241: LD_INT 0
5243: PLUS
5244: PPUSH
5245: CALL_OW 505
// end ;
5249: LD_VAR 0 2
5253: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
5254: LD_INT 0
5256: PPUSH
5257: PPUSH
5258: PPUSH
5259: PPUSH
// if not hack in hackTanks then
5260: LD_VAR 0 1
5264: PUSH
5265: LD_EXP 15
5269: IN
5270: NOT
5271: IFFALSE 5275
// exit ;
5273: GO 5360
// index := GetElementIndex ( hackTanks , hack ) ;
5275: LD_ADDR_VAR 0 5
5279: PUSH
5280: LD_EXP 15
5284: PPUSH
5285: LD_VAR 0 1
5289: PPUSH
5290: CALL 26125 0 2
5294: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
5295: LD_ADDR_VAR 0 4
5299: PUSH
5300: DOUBLE
5301: LD_INT 1
5303: DEC
5304: ST_TO_ADDR
5305: LD_EXP 16
5309: PUSH
5310: LD_VAR 0 5
5314: ARRAY
5315: PUSH
5316: FOR_TO
5317: IFFALSE 5358
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
5319: LD_EXP 16
5323: PUSH
5324: LD_VAR 0 5
5328: ARRAY
5329: PUSH
5330: LD_VAR 0 4
5334: ARRAY
5335: PUSH
5336: LD_INT 1
5338: ARRAY
5339: PUSH
5340: LD_VAR 0 2
5344: EQUAL
5345: IFFALSE 5356
// KillUnit ( vehicle ) ;
5347: LD_VAR 0 2
5351: PPUSH
5352: CALL_OW 66
5356: GO 5316
5358: POP
5359: POP
// end ;
5360: LD_VAR 0 3
5364: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
5365: LD_EXP 20
5369: NOT
5370: IFFALSE 5405
5372: GO 5374
5374: DISABLE
// begin initMiner := true ;
5375: LD_ADDR_EXP 20
5379: PUSH
5380: LD_INT 1
5382: ST_TO_ADDR
// minersList := [ ] ;
5383: LD_ADDR_EXP 21
5387: PUSH
5388: EMPTY
5389: ST_TO_ADDR
// minerMinesList := [ ] ;
5390: LD_ADDR_EXP 22
5394: PUSH
5395: EMPTY
5396: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
5397: LD_ADDR_EXP 23
5401: PUSH
5402: LD_INT 5
5404: ST_TO_ADDR
// end ;
5405: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
5406: LD_EXP 20
5410: PUSH
5411: LD_INT 34
5413: PUSH
5414: LD_EXP 89
5418: PUSH
5419: EMPTY
5420: LIST
5421: LIST
5422: PPUSH
5423: CALL_OW 69
5427: AND
5428: IFFALSE 5891
5430: GO 5432
5432: DISABLE
5433: LD_INT 0
5435: PPUSH
5436: PPUSH
5437: PPUSH
5438: PPUSH
// begin enable ;
5439: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
5440: LD_ADDR_VAR 0 1
5444: PUSH
5445: LD_INT 34
5447: PUSH
5448: LD_EXP 89
5452: PUSH
5453: EMPTY
5454: LIST
5455: LIST
5456: PPUSH
5457: CALL_OW 69
5461: PUSH
5462: FOR_IN
5463: IFFALSE 5535
// begin if not i in minersList then
5465: LD_VAR 0 1
5469: PUSH
5470: LD_EXP 21
5474: IN
5475: NOT
5476: IFFALSE 5533
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
5478: LD_ADDR_EXP 21
5482: PUSH
5483: LD_EXP 21
5487: PPUSH
5488: LD_EXP 21
5492: PUSH
5493: LD_INT 1
5495: PLUS
5496: PPUSH
5497: LD_VAR 0 1
5501: PPUSH
5502: CALL_OW 1
5506: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
5507: LD_ADDR_EXP 22
5511: PUSH
5512: LD_EXP 22
5516: PPUSH
5517: LD_EXP 22
5521: PUSH
5522: LD_INT 1
5524: PLUS
5525: PPUSH
5526: EMPTY
5527: PPUSH
5528: CALL_OW 1
5532: ST_TO_ADDR
// end end ;
5533: GO 5462
5535: POP
5536: POP
// for i := minerMinesList downto 1 do
5537: LD_ADDR_VAR 0 1
5541: PUSH
5542: DOUBLE
5543: LD_EXP 22
5547: INC
5548: ST_TO_ADDR
5549: LD_INT 1
5551: PUSH
5552: FOR_DOWNTO
5553: IFFALSE 5889
// begin if IsLive ( minersList [ i ] ) then
5555: LD_EXP 21
5559: PUSH
5560: LD_VAR 0 1
5564: ARRAY
5565: PPUSH
5566: CALL_OW 300
5570: IFFALSE 5598
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
5572: LD_EXP 21
5576: PUSH
5577: LD_VAR 0 1
5581: ARRAY
5582: PPUSH
5583: LD_EXP 22
5587: PUSH
5588: LD_VAR 0 1
5592: ARRAY
5593: PPUSH
5594: CALL_OW 505
// if not minerMinesList [ i ] then
5598: LD_EXP 22
5602: PUSH
5603: LD_VAR 0 1
5607: ARRAY
5608: NOT
5609: IFFALSE 5613
// continue ;
5611: GO 5552
// for j := minerMinesList [ i ] downto 1 do
5613: LD_ADDR_VAR 0 2
5617: PUSH
5618: DOUBLE
5619: LD_EXP 22
5623: PUSH
5624: LD_VAR 0 1
5628: ARRAY
5629: INC
5630: ST_TO_ADDR
5631: LD_INT 1
5633: PUSH
5634: FOR_DOWNTO
5635: IFFALSE 5885
// begin side := GetSide ( minersList [ i ] ) ;
5637: LD_ADDR_VAR 0 3
5641: PUSH
5642: LD_EXP 21
5646: PUSH
5647: LD_VAR 0 1
5651: ARRAY
5652: PPUSH
5653: CALL_OW 255
5657: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
5658: LD_ADDR_VAR 0 4
5662: PUSH
5663: LD_EXP 22
5667: PUSH
5668: LD_VAR 0 1
5672: ARRAY
5673: PUSH
5674: LD_VAR 0 2
5678: ARRAY
5679: PUSH
5680: LD_INT 1
5682: ARRAY
5683: PPUSH
5684: LD_EXP 22
5688: PUSH
5689: LD_VAR 0 1
5693: ARRAY
5694: PUSH
5695: LD_VAR 0 2
5699: ARRAY
5700: PUSH
5701: LD_INT 2
5703: ARRAY
5704: PPUSH
5705: CALL_OW 428
5709: ST_TO_ADDR
// if not tmp then
5710: LD_VAR 0 4
5714: NOT
5715: IFFALSE 5719
// continue ;
5717: GO 5634
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
5719: LD_VAR 0 4
5723: PUSH
5724: LD_INT 81
5726: PUSH
5727: LD_VAR 0 3
5731: PUSH
5732: EMPTY
5733: LIST
5734: LIST
5735: PPUSH
5736: CALL_OW 69
5740: IN
5741: PUSH
5742: LD_EXP 22
5746: PUSH
5747: LD_VAR 0 1
5751: ARRAY
5752: PUSH
5753: LD_VAR 0 2
5757: ARRAY
5758: PUSH
5759: LD_INT 1
5761: ARRAY
5762: PPUSH
5763: LD_EXP 22
5767: PUSH
5768: LD_VAR 0 1
5772: ARRAY
5773: PUSH
5774: LD_VAR 0 2
5778: ARRAY
5779: PUSH
5780: LD_INT 2
5782: ARRAY
5783: PPUSH
5784: CALL_OW 458
5788: AND
5789: IFFALSE 5883
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
5791: LD_EXP 22
5795: PUSH
5796: LD_VAR 0 1
5800: ARRAY
5801: PUSH
5802: LD_VAR 0 2
5806: ARRAY
5807: PUSH
5808: LD_INT 1
5810: ARRAY
5811: PPUSH
5812: LD_EXP 22
5816: PUSH
5817: LD_VAR 0 1
5821: ARRAY
5822: PUSH
5823: LD_VAR 0 2
5827: ARRAY
5828: PUSH
5829: LD_INT 2
5831: ARRAY
5832: PPUSH
5833: LD_VAR 0 3
5837: PPUSH
5838: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
5842: LD_ADDR_EXP 22
5846: PUSH
5847: LD_EXP 22
5851: PPUSH
5852: LD_VAR 0 1
5856: PPUSH
5857: LD_EXP 22
5861: PUSH
5862: LD_VAR 0 1
5866: ARRAY
5867: PPUSH
5868: LD_VAR 0 2
5872: PPUSH
5873: CALL_OW 3
5877: PPUSH
5878: CALL_OW 1
5882: ST_TO_ADDR
// end ; end ;
5883: GO 5634
5885: POP
5886: POP
// end ;
5887: GO 5552
5889: POP
5890: POP
// end ;
5891: PPOPN 4
5893: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
5894: LD_INT 0
5896: PPUSH
5897: PPUSH
// result := false ;
5898: LD_ADDR_VAR 0 4
5902: PUSH
5903: LD_INT 0
5905: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
5906: LD_VAR 0 1
5910: PPUSH
5911: CALL_OW 264
5915: PUSH
5916: LD_EXP 89
5920: EQUAL
5921: NOT
5922: IFFALSE 5926
// exit ;
5924: GO 6166
// index := GetElementIndex ( minersList , unit ) ;
5926: LD_ADDR_VAR 0 5
5930: PUSH
5931: LD_EXP 21
5935: PPUSH
5936: LD_VAR 0 1
5940: PPUSH
5941: CALL 26125 0 2
5945: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
5946: LD_EXP 22
5950: PUSH
5951: LD_VAR 0 5
5955: ARRAY
5956: PUSH
5957: LD_EXP 23
5961: GREATEREQUAL
5962: IFFALSE 5966
// exit ;
5964: GO 6166
// ComMoveXY ( unit , x , y ) ;
5966: LD_VAR 0 1
5970: PPUSH
5971: LD_VAR 0 2
5975: PPUSH
5976: LD_VAR 0 3
5980: PPUSH
5981: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
5985: LD_INT 35
5987: PPUSH
5988: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
5992: LD_VAR 0 1
5996: PPUSH
5997: LD_VAR 0 2
6001: PPUSH
6002: LD_VAR 0 3
6006: PPUSH
6007: CALL 56897 0 3
6011: NOT
6012: PUSH
6013: LD_VAR 0 1
6017: PPUSH
6018: CALL_OW 314
6022: AND
6023: IFFALSE 6027
// exit ;
6025: GO 6166
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
6027: LD_VAR 0 2
6031: PPUSH
6032: LD_VAR 0 3
6036: PPUSH
6037: CALL_OW 428
6041: PUSH
6042: LD_VAR 0 1
6046: EQUAL
6047: PUSH
6048: LD_VAR 0 1
6052: PPUSH
6053: CALL_OW 314
6057: NOT
6058: AND
6059: IFFALSE 5985
// PlaySoundXY ( x , y , PlantMine ) ;
6061: LD_VAR 0 2
6065: PPUSH
6066: LD_VAR 0 3
6070: PPUSH
6071: LD_STRING PlantMine
6073: PPUSH
6074: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
6078: LD_VAR 0 2
6082: PPUSH
6083: LD_VAR 0 3
6087: PPUSH
6088: LD_VAR 0 1
6092: PPUSH
6093: CALL_OW 255
6097: PPUSH
6098: LD_INT 0
6100: PPUSH
6101: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
6105: LD_ADDR_EXP 22
6109: PUSH
6110: LD_EXP 22
6114: PPUSH
6115: LD_VAR 0 5
6119: PUSH
6120: LD_EXP 22
6124: PUSH
6125: LD_VAR 0 5
6129: ARRAY
6130: PUSH
6131: LD_INT 1
6133: PLUS
6134: PUSH
6135: EMPTY
6136: LIST
6137: LIST
6138: PPUSH
6139: LD_VAR 0 2
6143: PUSH
6144: LD_VAR 0 3
6148: PUSH
6149: EMPTY
6150: LIST
6151: LIST
6152: PPUSH
6153: CALL 26340 0 3
6157: ST_TO_ADDR
// result := true ;
6158: LD_ADDR_VAR 0 4
6162: PUSH
6163: LD_INT 1
6165: ST_TO_ADDR
// end ;
6166: LD_VAR 0 4
6170: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
6171: LD_INT 0
6173: PPUSH
6174: PPUSH
6175: PPUSH
// if not unit in minersList then
6176: LD_VAR 0 1
6180: PUSH
6181: LD_EXP 21
6185: IN
6186: NOT
6187: IFFALSE 6191
// exit ;
6189: GO 6583
// index := GetElementIndex ( minersList , unit ) ;
6191: LD_ADDR_VAR 0 6
6195: PUSH
6196: LD_EXP 21
6200: PPUSH
6201: LD_VAR 0 1
6205: PPUSH
6206: CALL 26125 0 2
6210: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
6211: LD_ADDR_VAR 0 5
6215: PUSH
6216: DOUBLE
6217: LD_EXP 22
6221: PUSH
6222: LD_VAR 0 6
6226: ARRAY
6227: INC
6228: ST_TO_ADDR
6229: LD_INT 1
6231: PUSH
6232: FOR_DOWNTO
6233: IFFALSE 6394
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
6235: LD_EXP 22
6239: PUSH
6240: LD_VAR 0 6
6244: ARRAY
6245: PUSH
6246: LD_VAR 0 5
6250: ARRAY
6251: PUSH
6252: LD_INT 1
6254: ARRAY
6255: PUSH
6256: LD_VAR 0 2
6260: EQUAL
6261: PUSH
6262: LD_EXP 22
6266: PUSH
6267: LD_VAR 0 6
6271: ARRAY
6272: PUSH
6273: LD_VAR 0 5
6277: ARRAY
6278: PUSH
6279: LD_INT 2
6281: ARRAY
6282: PUSH
6283: LD_VAR 0 3
6287: EQUAL
6288: AND
6289: IFFALSE 6392
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
6291: LD_EXP 22
6295: PUSH
6296: LD_VAR 0 6
6300: ARRAY
6301: PUSH
6302: LD_VAR 0 5
6306: ARRAY
6307: PUSH
6308: LD_INT 1
6310: ARRAY
6311: PPUSH
6312: LD_EXP 22
6316: PUSH
6317: LD_VAR 0 6
6321: ARRAY
6322: PUSH
6323: LD_VAR 0 5
6327: ARRAY
6328: PUSH
6329: LD_INT 2
6331: ARRAY
6332: PPUSH
6333: LD_VAR 0 1
6337: PPUSH
6338: CALL_OW 255
6342: PPUSH
6343: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
6347: LD_ADDR_EXP 22
6351: PUSH
6352: LD_EXP 22
6356: PPUSH
6357: LD_VAR 0 6
6361: PPUSH
6362: LD_EXP 22
6366: PUSH
6367: LD_VAR 0 6
6371: ARRAY
6372: PPUSH
6373: LD_VAR 0 5
6377: PPUSH
6378: CALL_OW 3
6382: PPUSH
6383: CALL_OW 1
6387: ST_TO_ADDR
// exit ;
6388: POP
6389: POP
6390: GO 6583
// end ; end ;
6392: GO 6232
6394: POP
6395: POP
// for i := minerMinesList [ index ] downto 1 do
6396: LD_ADDR_VAR 0 5
6400: PUSH
6401: DOUBLE
6402: LD_EXP 22
6406: PUSH
6407: LD_VAR 0 6
6411: ARRAY
6412: INC
6413: ST_TO_ADDR
6414: LD_INT 1
6416: PUSH
6417: FOR_DOWNTO
6418: IFFALSE 6581
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
6420: LD_EXP 22
6424: PUSH
6425: LD_VAR 0 6
6429: ARRAY
6430: PUSH
6431: LD_VAR 0 5
6435: ARRAY
6436: PUSH
6437: LD_INT 1
6439: ARRAY
6440: PPUSH
6441: LD_EXP 22
6445: PUSH
6446: LD_VAR 0 6
6450: ARRAY
6451: PUSH
6452: LD_VAR 0 5
6456: ARRAY
6457: PUSH
6458: LD_INT 2
6460: ARRAY
6461: PPUSH
6462: LD_VAR 0 2
6466: PPUSH
6467: LD_VAR 0 3
6471: PPUSH
6472: CALL_OW 298
6476: PUSH
6477: LD_INT 6
6479: LESS
6480: IFFALSE 6579
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
6482: LD_EXP 22
6486: PUSH
6487: LD_VAR 0 6
6491: ARRAY
6492: PUSH
6493: LD_VAR 0 5
6497: ARRAY
6498: PUSH
6499: LD_INT 1
6501: ARRAY
6502: PPUSH
6503: LD_EXP 22
6507: PUSH
6508: LD_VAR 0 6
6512: ARRAY
6513: PUSH
6514: LD_VAR 0 5
6518: ARRAY
6519: PUSH
6520: LD_INT 2
6522: ARRAY
6523: PPUSH
6524: LD_VAR 0 1
6528: PPUSH
6529: CALL_OW 255
6533: PPUSH
6534: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
6538: LD_ADDR_EXP 22
6542: PUSH
6543: LD_EXP 22
6547: PPUSH
6548: LD_VAR 0 6
6552: PPUSH
6553: LD_EXP 22
6557: PUSH
6558: LD_VAR 0 6
6562: ARRAY
6563: PPUSH
6564: LD_VAR 0 5
6568: PPUSH
6569: CALL_OW 3
6573: PPUSH
6574: CALL_OW 1
6578: ST_TO_ADDR
// end ; end ;
6579: GO 6417
6581: POP
6582: POP
// end ;
6583: LD_VAR 0 4
6587: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
6588: LD_INT 0
6590: PPUSH
6591: PPUSH
6592: PPUSH
6593: PPUSH
6594: PPUSH
6595: PPUSH
6596: PPUSH
6597: PPUSH
6598: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
6599: LD_VAR 0 1
6603: PPUSH
6604: CALL_OW 264
6608: PUSH
6609: LD_EXP 89
6613: EQUAL
6614: NOT
6615: PUSH
6616: LD_VAR 0 1
6620: PUSH
6621: LD_EXP 21
6625: IN
6626: NOT
6627: OR
6628: IFFALSE 6632
// exit ;
6630: GO 6954
// index := GetElementIndex ( minersList , unit ) ;
6632: LD_ADDR_VAR 0 6
6636: PUSH
6637: LD_EXP 21
6641: PPUSH
6642: LD_VAR 0 1
6646: PPUSH
6647: CALL 26125 0 2
6651: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
6652: LD_ADDR_VAR 0 8
6656: PUSH
6657: LD_EXP 23
6661: PUSH
6662: LD_EXP 22
6666: PUSH
6667: LD_VAR 0 6
6671: ARRAY
6672: MINUS
6673: ST_TO_ADDR
// if not minesFreeAmount then
6674: LD_VAR 0 8
6678: NOT
6679: IFFALSE 6683
// exit ;
6681: GO 6954
// tmp := [ ] ;
6683: LD_ADDR_VAR 0 7
6687: PUSH
6688: EMPTY
6689: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
6690: LD_ADDR_VAR 0 5
6694: PUSH
6695: DOUBLE
6696: LD_INT 1
6698: DEC
6699: ST_TO_ADDR
6700: LD_VAR 0 8
6704: PUSH
6705: FOR_TO
6706: IFFALSE 6901
// begin _d := rand ( 0 , 5 ) ;
6708: LD_ADDR_VAR 0 11
6712: PUSH
6713: LD_INT 0
6715: PPUSH
6716: LD_INT 5
6718: PPUSH
6719: CALL_OW 12
6723: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
6724: LD_ADDR_VAR 0 12
6728: PUSH
6729: LD_INT 2
6731: PPUSH
6732: LD_INT 6
6734: PPUSH
6735: CALL_OW 12
6739: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
6740: LD_ADDR_VAR 0 9
6744: PUSH
6745: LD_VAR 0 2
6749: PPUSH
6750: LD_VAR 0 11
6754: PPUSH
6755: LD_VAR 0 12
6759: PPUSH
6760: CALL_OW 272
6764: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
6765: LD_ADDR_VAR 0 10
6769: PUSH
6770: LD_VAR 0 3
6774: PPUSH
6775: LD_VAR 0 11
6779: PPUSH
6780: LD_VAR 0 12
6784: PPUSH
6785: CALL_OW 273
6789: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
6790: LD_VAR 0 9
6794: PPUSH
6795: LD_VAR 0 10
6799: PPUSH
6800: CALL_OW 488
6804: PUSH
6805: LD_VAR 0 9
6809: PUSH
6810: LD_VAR 0 10
6814: PUSH
6815: EMPTY
6816: LIST
6817: LIST
6818: PUSH
6819: LD_VAR 0 7
6823: IN
6824: NOT
6825: AND
6826: PUSH
6827: LD_VAR 0 9
6831: PPUSH
6832: LD_VAR 0 10
6836: PPUSH
6837: CALL_OW 458
6841: NOT
6842: AND
6843: IFFALSE 6885
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
6845: LD_ADDR_VAR 0 7
6849: PUSH
6850: LD_VAR 0 7
6854: PPUSH
6855: LD_VAR 0 7
6859: PUSH
6860: LD_INT 1
6862: PLUS
6863: PPUSH
6864: LD_VAR 0 9
6868: PUSH
6869: LD_VAR 0 10
6873: PUSH
6874: EMPTY
6875: LIST
6876: LIST
6877: PPUSH
6878: CALL_OW 1
6882: ST_TO_ADDR
6883: GO 6899
// i := i - 1 ;
6885: LD_ADDR_VAR 0 5
6889: PUSH
6890: LD_VAR 0 5
6894: PUSH
6895: LD_INT 1
6897: MINUS
6898: ST_TO_ADDR
// end ;
6899: GO 6705
6901: POP
6902: POP
// for i in tmp do
6903: LD_ADDR_VAR 0 5
6907: PUSH
6908: LD_VAR 0 7
6912: PUSH
6913: FOR_IN
6914: IFFALSE 6952
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
6916: LD_VAR 0 1
6920: PPUSH
6921: LD_VAR 0 5
6925: PUSH
6926: LD_INT 1
6928: ARRAY
6929: PPUSH
6930: LD_VAR 0 5
6934: PUSH
6935: LD_INT 2
6937: ARRAY
6938: PPUSH
6939: CALL 5894 0 3
6943: NOT
6944: IFFALSE 6950
// exit ;
6946: POP
6947: POP
6948: GO 6954
6950: GO 6913
6952: POP
6953: POP
// end ;
6954: LD_VAR 0 4
6958: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
6959: LD_INT 0
6961: PPUSH
6962: PPUSH
6963: PPUSH
6964: PPUSH
6965: PPUSH
6966: PPUSH
6967: PPUSH
// if not GetClass ( unit ) = class_sniper then
6968: LD_VAR 0 1
6972: PPUSH
6973: CALL_OW 257
6977: PUSH
6978: LD_INT 5
6980: EQUAL
6981: NOT
6982: IFFALSE 6986
// exit ;
6984: GO 7374
// dist := 8 ;
6986: LD_ADDR_VAR 0 5
6990: PUSH
6991: LD_INT 8
6993: ST_TO_ADDR
// viewRange := 12 ;
6994: LD_ADDR_VAR 0 7
6998: PUSH
6999: LD_INT 12
7001: ST_TO_ADDR
// side := GetSide ( unit ) ;
7002: LD_ADDR_VAR 0 6
7006: PUSH
7007: LD_VAR 0 1
7011: PPUSH
7012: CALL_OW 255
7016: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
7017: LD_INT 61
7019: PPUSH
7020: LD_VAR 0 6
7024: PPUSH
7025: CALL_OW 321
7029: PUSH
7030: LD_INT 2
7032: EQUAL
7033: IFFALSE 7043
// viewRange := 16 ;
7035: LD_ADDR_VAR 0 7
7039: PUSH
7040: LD_INT 16
7042: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
7043: LD_VAR 0 1
7047: PPUSH
7048: LD_VAR 0 2
7052: PPUSH
7053: LD_VAR 0 3
7057: PPUSH
7058: CALL_OW 297
7062: PUSH
7063: LD_VAR 0 5
7067: GREATER
7068: IFFALSE 7147
// begin ComMoveXY ( unit , x , y ) ;
7070: LD_VAR 0 1
7074: PPUSH
7075: LD_VAR 0 2
7079: PPUSH
7080: LD_VAR 0 3
7084: PPUSH
7085: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7089: LD_INT 35
7091: PPUSH
7092: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
7096: LD_VAR 0 1
7100: PPUSH
7101: LD_VAR 0 2
7105: PPUSH
7106: LD_VAR 0 3
7110: PPUSH
7111: CALL 56897 0 3
7115: NOT
7116: IFFALSE 7120
// exit ;
7118: GO 7374
// until GetDistUnitXY ( unit , x , y ) < dist ;
7120: LD_VAR 0 1
7124: PPUSH
7125: LD_VAR 0 2
7129: PPUSH
7130: LD_VAR 0 3
7134: PPUSH
7135: CALL_OW 297
7139: PUSH
7140: LD_VAR 0 5
7144: LESS
7145: IFFALSE 7089
// end ; ComTurnXY ( unit , x , y ) ;
7147: LD_VAR 0 1
7151: PPUSH
7152: LD_VAR 0 2
7156: PPUSH
7157: LD_VAR 0 3
7161: PPUSH
7162: CALL_OW 118
// wait ( 5 ) ;
7166: LD_INT 5
7168: PPUSH
7169: CALL_OW 67
// _d := GetDir ( unit ) ;
7173: LD_ADDR_VAR 0 10
7177: PUSH
7178: LD_VAR 0 1
7182: PPUSH
7183: CALL_OW 254
7187: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
7188: LD_ADDR_VAR 0 8
7192: PUSH
7193: LD_VAR 0 1
7197: PPUSH
7198: CALL_OW 250
7202: PPUSH
7203: LD_VAR 0 10
7207: PPUSH
7208: LD_VAR 0 5
7212: PPUSH
7213: CALL_OW 272
7217: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
7218: LD_ADDR_VAR 0 9
7222: PUSH
7223: LD_VAR 0 1
7227: PPUSH
7228: CALL_OW 251
7232: PPUSH
7233: LD_VAR 0 10
7237: PPUSH
7238: LD_VAR 0 5
7242: PPUSH
7243: CALL_OW 273
7247: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
7248: LD_VAR 0 8
7252: PPUSH
7253: LD_VAR 0 9
7257: PPUSH
7258: CALL_OW 488
7262: NOT
7263: IFFALSE 7267
// exit ;
7265: GO 7374
// ComAnimCustom ( unit , 1 ) ;
7267: LD_VAR 0 1
7271: PPUSH
7272: LD_INT 1
7274: PPUSH
7275: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
7279: LD_VAR 0 8
7283: PPUSH
7284: LD_VAR 0 9
7288: PPUSH
7289: LD_VAR 0 6
7293: PPUSH
7294: LD_VAR 0 7
7298: PPUSH
7299: CALL_OW 330
// repeat wait ( 1 ) ;
7303: LD_INT 1
7305: PPUSH
7306: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
7310: LD_VAR 0 1
7314: PPUSH
7315: CALL_OW 316
7319: PUSH
7320: LD_VAR 0 1
7324: PPUSH
7325: CALL_OW 314
7329: OR
7330: PUSH
7331: LD_VAR 0 1
7335: PPUSH
7336: CALL_OW 302
7340: NOT
7341: OR
7342: PUSH
7343: LD_VAR 0 1
7347: PPUSH
7348: CALL_OW 301
7352: OR
7353: IFFALSE 7303
// RemoveSeeing ( _x , _y , side ) ;
7355: LD_VAR 0 8
7359: PPUSH
7360: LD_VAR 0 9
7364: PPUSH
7365: LD_VAR 0 6
7369: PPUSH
7370: CALL_OW 331
// end ; end_of_file
7374: LD_VAR 0 4
7378: RET
// every 0 0$1 do
7379: GO 7381
7381: DISABLE
// begin enable ;
7382: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7383: LD_STRING updateTimer(
7385: PUSH
7386: LD_OWVAR 1
7390: STR
7391: PUSH
7392: LD_STRING );
7394: STR
7395: PPUSH
7396: CALL_OW 559
// end ;
7400: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7401: LD_INT 0
7403: PPUSH
// if p2 = 100 then
7404: LD_VAR 0 2
7408: PUSH
7409: LD_INT 100
7411: EQUAL
7412: IFFALSE 8415
// begin if not StreamModeActive then
7414: LD_EXP 24
7418: NOT
7419: IFFALSE 7429
// StreamModeActive := true ;
7421: LD_ADDR_EXP 24
7425: PUSH
7426: LD_INT 1
7428: ST_TO_ADDR
// if p3 = 0 then
7429: LD_VAR 0 3
7433: PUSH
7434: LD_INT 0
7436: EQUAL
7437: IFFALSE 7443
// InitStreamMode ;
7439: CALL 8575 0 0
// if p3 = 1 then
7443: LD_VAR 0 3
7447: PUSH
7448: LD_INT 1
7450: EQUAL
7451: IFFALSE 7461
// sRocket := true ;
7453: LD_ADDR_EXP 29
7457: PUSH
7458: LD_INT 1
7460: ST_TO_ADDR
// if p3 = 2 then
7461: LD_VAR 0 3
7465: PUSH
7466: LD_INT 2
7468: EQUAL
7469: IFFALSE 7479
// sSpeed := true ;
7471: LD_ADDR_EXP 28
7475: PUSH
7476: LD_INT 1
7478: ST_TO_ADDR
// if p3 = 3 then
7479: LD_VAR 0 3
7483: PUSH
7484: LD_INT 3
7486: EQUAL
7487: IFFALSE 7497
// sEngine := true ;
7489: LD_ADDR_EXP 30
7493: PUSH
7494: LD_INT 1
7496: ST_TO_ADDR
// if p3 = 4 then
7497: LD_VAR 0 3
7501: PUSH
7502: LD_INT 4
7504: EQUAL
7505: IFFALSE 7515
// sSpec := true ;
7507: LD_ADDR_EXP 27
7511: PUSH
7512: LD_INT 1
7514: ST_TO_ADDR
// if p3 = 5 then
7515: LD_VAR 0 3
7519: PUSH
7520: LD_INT 5
7522: EQUAL
7523: IFFALSE 7533
// sLevel := true ;
7525: LD_ADDR_EXP 31
7529: PUSH
7530: LD_INT 1
7532: ST_TO_ADDR
// if p3 = 6 then
7533: LD_VAR 0 3
7537: PUSH
7538: LD_INT 6
7540: EQUAL
7541: IFFALSE 7551
// sArmoury := true ;
7543: LD_ADDR_EXP 32
7547: PUSH
7548: LD_INT 1
7550: ST_TO_ADDR
// if p3 = 7 then
7551: LD_VAR 0 3
7555: PUSH
7556: LD_INT 7
7558: EQUAL
7559: IFFALSE 7569
// sRadar := true ;
7561: LD_ADDR_EXP 33
7565: PUSH
7566: LD_INT 1
7568: ST_TO_ADDR
// if p3 = 8 then
7569: LD_VAR 0 3
7573: PUSH
7574: LD_INT 8
7576: EQUAL
7577: IFFALSE 7587
// sBunker := true ;
7579: LD_ADDR_EXP 34
7583: PUSH
7584: LD_INT 1
7586: ST_TO_ADDR
// if p3 = 9 then
7587: LD_VAR 0 3
7591: PUSH
7592: LD_INT 9
7594: EQUAL
7595: IFFALSE 7605
// sHack := true ;
7597: LD_ADDR_EXP 35
7601: PUSH
7602: LD_INT 1
7604: ST_TO_ADDR
// if p3 = 10 then
7605: LD_VAR 0 3
7609: PUSH
7610: LD_INT 10
7612: EQUAL
7613: IFFALSE 7623
// sFire := true ;
7615: LD_ADDR_EXP 36
7619: PUSH
7620: LD_INT 1
7622: ST_TO_ADDR
// if p3 = 11 then
7623: LD_VAR 0 3
7627: PUSH
7628: LD_INT 11
7630: EQUAL
7631: IFFALSE 7641
// sRefresh := true ;
7633: LD_ADDR_EXP 37
7637: PUSH
7638: LD_INT 1
7640: ST_TO_ADDR
// if p3 = 12 then
7641: LD_VAR 0 3
7645: PUSH
7646: LD_INT 12
7648: EQUAL
7649: IFFALSE 7659
// sExp := true ;
7651: LD_ADDR_EXP 38
7655: PUSH
7656: LD_INT 1
7658: ST_TO_ADDR
// if p3 = 13 then
7659: LD_VAR 0 3
7663: PUSH
7664: LD_INT 13
7666: EQUAL
7667: IFFALSE 7677
// sDepot := true ;
7669: LD_ADDR_EXP 39
7673: PUSH
7674: LD_INT 1
7676: ST_TO_ADDR
// if p3 = 14 then
7677: LD_VAR 0 3
7681: PUSH
7682: LD_INT 14
7684: EQUAL
7685: IFFALSE 7695
// sFlag := true ;
7687: LD_ADDR_EXP 40
7691: PUSH
7692: LD_INT 1
7694: ST_TO_ADDR
// if p3 = 15 then
7695: LD_VAR 0 3
7699: PUSH
7700: LD_INT 15
7702: EQUAL
7703: IFFALSE 7713
// sKamikadze := true ;
7705: LD_ADDR_EXP 48
7709: PUSH
7710: LD_INT 1
7712: ST_TO_ADDR
// if p3 = 16 then
7713: LD_VAR 0 3
7717: PUSH
7718: LD_INT 16
7720: EQUAL
7721: IFFALSE 7731
// sTroll := true ;
7723: LD_ADDR_EXP 49
7727: PUSH
7728: LD_INT 1
7730: ST_TO_ADDR
// if p3 = 17 then
7731: LD_VAR 0 3
7735: PUSH
7736: LD_INT 17
7738: EQUAL
7739: IFFALSE 7749
// sSlow := true ;
7741: LD_ADDR_EXP 50
7745: PUSH
7746: LD_INT 1
7748: ST_TO_ADDR
// if p3 = 18 then
7749: LD_VAR 0 3
7753: PUSH
7754: LD_INT 18
7756: EQUAL
7757: IFFALSE 7767
// sLack := true ;
7759: LD_ADDR_EXP 51
7763: PUSH
7764: LD_INT 1
7766: ST_TO_ADDR
// if p3 = 19 then
7767: LD_VAR 0 3
7771: PUSH
7772: LD_INT 19
7774: EQUAL
7775: IFFALSE 7785
// sTank := true ;
7777: LD_ADDR_EXP 53
7781: PUSH
7782: LD_INT 1
7784: ST_TO_ADDR
// if p3 = 20 then
7785: LD_VAR 0 3
7789: PUSH
7790: LD_INT 20
7792: EQUAL
7793: IFFALSE 7803
// sRemote := true ;
7795: LD_ADDR_EXP 54
7799: PUSH
7800: LD_INT 1
7802: ST_TO_ADDR
// if p3 = 21 then
7803: LD_VAR 0 3
7807: PUSH
7808: LD_INT 21
7810: EQUAL
7811: IFFALSE 7821
// sPowell := true ;
7813: LD_ADDR_EXP 55
7817: PUSH
7818: LD_INT 1
7820: ST_TO_ADDR
// if p3 = 22 then
7821: LD_VAR 0 3
7825: PUSH
7826: LD_INT 22
7828: EQUAL
7829: IFFALSE 7839
// sTeleport := true ;
7831: LD_ADDR_EXP 58
7835: PUSH
7836: LD_INT 1
7838: ST_TO_ADDR
// if p3 = 23 then
7839: LD_VAR 0 3
7843: PUSH
7844: LD_INT 23
7846: EQUAL
7847: IFFALSE 7857
// sOilTower := true ;
7849: LD_ADDR_EXP 60
7853: PUSH
7854: LD_INT 1
7856: ST_TO_ADDR
// if p3 = 24 then
7857: LD_VAR 0 3
7861: PUSH
7862: LD_INT 24
7864: EQUAL
7865: IFFALSE 7875
// sShovel := true ;
7867: LD_ADDR_EXP 61
7871: PUSH
7872: LD_INT 1
7874: ST_TO_ADDR
// if p3 = 25 then
7875: LD_VAR 0 3
7879: PUSH
7880: LD_INT 25
7882: EQUAL
7883: IFFALSE 7893
// sSheik := true ;
7885: LD_ADDR_EXP 62
7889: PUSH
7890: LD_INT 1
7892: ST_TO_ADDR
// if p3 = 26 then
7893: LD_VAR 0 3
7897: PUSH
7898: LD_INT 26
7900: EQUAL
7901: IFFALSE 7911
// sEarthquake := true ;
7903: LD_ADDR_EXP 64
7907: PUSH
7908: LD_INT 1
7910: ST_TO_ADDR
// if p3 = 27 then
7911: LD_VAR 0 3
7915: PUSH
7916: LD_INT 27
7918: EQUAL
7919: IFFALSE 7929
// sAI := true ;
7921: LD_ADDR_EXP 65
7925: PUSH
7926: LD_INT 1
7928: ST_TO_ADDR
// if p3 = 28 then
7929: LD_VAR 0 3
7933: PUSH
7934: LD_INT 28
7936: EQUAL
7937: IFFALSE 7947
// sCargo := true ;
7939: LD_ADDR_EXP 68
7943: PUSH
7944: LD_INT 1
7946: ST_TO_ADDR
// if p3 = 29 then
7947: LD_VAR 0 3
7951: PUSH
7952: LD_INT 29
7954: EQUAL
7955: IFFALSE 7965
// sDLaser := true ;
7957: LD_ADDR_EXP 69
7961: PUSH
7962: LD_INT 1
7964: ST_TO_ADDR
// if p3 = 30 then
7965: LD_VAR 0 3
7969: PUSH
7970: LD_INT 30
7972: EQUAL
7973: IFFALSE 7983
// sExchange := true ;
7975: LD_ADDR_EXP 70
7979: PUSH
7980: LD_INT 1
7982: ST_TO_ADDR
// if p3 = 31 then
7983: LD_VAR 0 3
7987: PUSH
7988: LD_INT 31
7990: EQUAL
7991: IFFALSE 8001
// sFac := true ;
7993: LD_ADDR_EXP 71
7997: PUSH
7998: LD_INT 1
8000: ST_TO_ADDR
// if p3 = 32 then
8001: LD_VAR 0 3
8005: PUSH
8006: LD_INT 32
8008: EQUAL
8009: IFFALSE 8019
// sPower := true ;
8011: LD_ADDR_EXP 72
8015: PUSH
8016: LD_INT 1
8018: ST_TO_ADDR
// if p3 = 33 then
8019: LD_VAR 0 3
8023: PUSH
8024: LD_INT 33
8026: EQUAL
8027: IFFALSE 8037
// sRandom := true ;
8029: LD_ADDR_EXP 73
8033: PUSH
8034: LD_INT 1
8036: ST_TO_ADDR
// if p3 = 34 then
8037: LD_VAR 0 3
8041: PUSH
8042: LD_INT 34
8044: EQUAL
8045: IFFALSE 8055
// sShield := true ;
8047: LD_ADDR_EXP 74
8051: PUSH
8052: LD_INT 1
8054: ST_TO_ADDR
// if p3 = 35 then
8055: LD_VAR 0 3
8059: PUSH
8060: LD_INT 35
8062: EQUAL
8063: IFFALSE 8073
// sTime := true ;
8065: LD_ADDR_EXP 75
8069: PUSH
8070: LD_INT 1
8072: ST_TO_ADDR
// if p3 = 36 then
8073: LD_VAR 0 3
8077: PUSH
8078: LD_INT 36
8080: EQUAL
8081: IFFALSE 8091
// sTools := true ;
8083: LD_ADDR_EXP 76
8087: PUSH
8088: LD_INT 1
8090: ST_TO_ADDR
// if p3 = 101 then
8091: LD_VAR 0 3
8095: PUSH
8096: LD_INT 101
8098: EQUAL
8099: IFFALSE 8109
// sSold := true ;
8101: LD_ADDR_EXP 41
8105: PUSH
8106: LD_INT 1
8108: ST_TO_ADDR
// if p3 = 102 then
8109: LD_VAR 0 3
8113: PUSH
8114: LD_INT 102
8116: EQUAL
8117: IFFALSE 8127
// sDiff := true ;
8119: LD_ADDR_EXP 42
8123: PUSH
8124: LD_INT 1
8126: ST_TO_ADDR
// if p3 = 103 then
8127: LD_VAR 0 3
8131: PUSH
8132: LD_INT 103
8134: EQUAL
8135: IFFALSE 8145
// sFog := true ;
8137: LD_ADDR_EXP 45
8141: PUSH
8142: LD_INT 1
8144: ST_TO_ADDR
// if p3 = 104 then
8145: LD_VAR 0 3
8149: PUSH
8150: LD_INT 104
8152: EQUAL
8153: IFFALSE 8163
// sReset := true ;
8155: LD_ADDR_EXP 46
8159: PUSH
8160: LD_INT 1
8162: ST_TO_ADDR
// if p3 = 105 then
8163: LD_VAR 0 3
8167: PUSH
8168: LD_INT 105
8170: EQUAL
8171: IFFALSE 8181
// sSun := true ;
8173: LD_ADDR_EXP 47
8177: PUSH
8178: LD_INT 1
8180: ST_TO_ADDR
// if p3 = 106 then
8181: LD_VAR 0 3
8185: PUSH
8186: LD_INT 106
8188: EQUAL
8189: IFFALSE 8199
// sTiger := true ;
8191: LD_ADDR_EXP 43
8195: PUSH
8196: LD_INT 1
8198: ST_TO_ADDR
// if p3 = 107 then
8199: LD_VAR 0 3
8203: PUSH
8204: LD_INT 107
8206: EQUAL
8207: IFFALSE 8217
// sBomb := true ;
8209: LD_ADDR_EXP 44
8213: PUSH
8214: LD_INT 1
8216: ST_TO_ADDR
// if p3 = 108 then
8217: LD_VAR 0 3
8221: PUSH
8222: LD_INT 108
8224: EQUAL
8225: IFFALSE 8235
// sWound := true ;
8227: LD_ADDR_EXP 52
8231: PUSH
8232: LD_INT 1
8234: ST_TO_ADDR
// if p3 = 109 then
8235: LD_VAR 0 3
8239: PUSH
8240: LD_INT 109
8242: EQUAL
8243: IFFALSE 8253
// sBetray := true ;
8245: LD_ADDR_EXP 56
8249: PUSH
8250: LD_INT 1
8252: ST_TO_ADDR
// if p3 = 110 then
8253: LD_VAR 0 3
8257: PUSH
8258: LD_INT 110
8260: EQUAL
8261: IFFALSE 8271
// sContamin := true ;
8263: LD_ADDR_EXP 57
8267: PUSH
8268: LD_INT 1
8270: ST_TO_ADDR
// if p3 = 111 then
8271: LD_VAR 0 3
8275: PUSH
8276: LD_INT 111
8278: EQUAL
8279: IFFALSE 8289
// sOil := true ;
8281: LD_ADDR_EXP 59
8285: PUSH
8286: LD_INT 1
8288: ST_TO_ADDR
// if p3 = 112 then
8289: LD_VAR 0 3
8293: PUSH
8294: LD_INT 112
8296: EQUAL
8297: IFFALSE 8307
// sStu := true ;
8299: LD_ADDR_EXP 63
8303: PUSH
8304: LD_INT 1
8306: ST_TO_ADDR
// if p3 = 113 then
8307: LD_VAR 0 3
8311: PUSH
8312: LD_INT 113
8314: EQUAL
8315: IFFALSE 8325
// sBazooka := true ;
8317: LD_ADDR_EXP 66
8321: PUSH
8322: LD_INT 1
8324: ST_TO_ADDR
// if p3 = 114 then
8325: LD_VAR 0 3
8329: PUSH
8330: LD_INT 114
8332: EQUAL
8333: IFFALSE 8343
// sMortar := true ;
8335: LD_ADDR_EXP 67
8339: PUSH
8340: LD_INT 1
8342: ST_TO_ADDR
// if p3 = 115 then
8343: LD_VAR 0 3
8347: PUSH
8348: LD_INT 115
8350: EQUAL
8351: IFFALSE 8361
// sRanger := true ;
8353: LD_ADDR_EXP 77
8357: PUSH
8358: LD_INT 1
8360: ST_TO_ADDR
// if p3 = 116 then
8361: LD_VAR 0 3
8365: PUSH
8366: LD_INT 116
8368: EQUAL
8369: IFFALSE 8379
// sComputer := true ;
8371: LD_ADDR_EXP 78
8375: PUSH
8376: LD_INT 1
8378: ST_TO_ADDR
// if p3 = 117 then
8379: LD_VAR 0 3
8383: PUSH
8384: LD_INT 117
8386: EQUAL
8387: IFFALSE 8397
// s30 := true ;
8389: LD_ADDR_EXP 79
8393: PUSH
8394: LD_INT 1
8396: ST_TO_ADDR
// if p3 = 118 then
8397: LD_VAR 0 3
8401: PUSH
8402: LD_INT 118
8404: EQUAL
8405: IFFALSE 8415
// s60 := true ;
8407: LD_ADDR_EXP 80
8411: PUSH
8412: LD_INT 1
8414: ST_TO_ADDR
// end ; if p2 = 101 then
8415: LD_VAR 0 2
8419: PUSH
8420: LD_INT 101
8422: EQUAL
8423: IFFALSE 8551
// begin case p3 of 1 :
8425: LD_VAR 0 3
8429: PUSH
8430: LD_INT 1
8432: DOUBLE
8433: EQUAL
8434: IFTRUE 8438
8436: GO 8445
8438: POP
// hHackUnlimitedResources ; 2 :
8439: CALL 20147 0 0
8443: GO 8551
8445: LD_INT 2
8447: DOUBLE
8448: EQUAL
8449: IFTRUE 8453
8451: GO 8460
8453: POP
// hHackSetLevel10 ; 3 :
8454: CALL 20280 0 0
8458: GO 8551
8460: LD_INT 3
8462: DOUBLE
8463: EQUAL
8464: IFTRUE 8468
8466: GO 8475
8468: POP
// hHackSetLevel10YourUnits ; 4 :
8469: CALL 20365 0 0
8473: GO 8551
8475: LD_INT 4
8477: DOUBLE
8478: EQUAL
8479: IFTRUE 8483
8481: GO 8490
8483: POP
// hHackInvincible ; 5 :
8484: CALL 20813 0 0
8488: GO 8551
8490: LD_INT 5
8492: DOUBLE
8493: EQUAL
8494: IFTRUE 8498
8496: GO 8505
8498: POP
// hHackInvisible ; 6 :
8499: CALL 20924 0 0
8503: GO 8551
8505: LD_INT 6
8507: DOUBLE
8508: EQUAL
8509: IFTRUE 8513
8511: GO 8520
8513: POP
// hHackChangeYourSide ; 7 :
8514: CALL 20981 0 0
8518: GO 8551
8520: LD_INT 7
8522: DOUBLE
8523: EQUAL
8524: IFTRUE 8528
8526: GO 8535
8528: POP
// hHackChangeUnitSide ; 8 :
8529: CALL 21023 0 0
8533: GO 8551
8535: LD_INT 8
8537: DOUBLE
8538: EQUAL
8539: IFTRUE 8543
8541: GO 8550
8543: POP
// hHackFog ; end ;
8544: CALL 21124 0 0
8548: GO 8551
8550: POP
// end ; end ;
8551: LD_VAR 0 7
8555: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
8556: GO 8558
8558: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
8559: LD_STRING initStreamRollete();
8561: PPUSH
8562: CALL_OW 559
// InitStreamMode ;
8566: CALL 8575 0 0
// DefineStreamItems ( ) ;
8570: CALL 9039 0 0
// end ;
8574: END
// function InitStreamMode ; begin
8575: LD_INT 0
8577: PPUSH
// streamModeActive := false ;
8578: LD_ADDR_EXP 24
8582: PUSH
8583: LD_INT 0
8585: ST_TO_ADDR
// normalCounter := 36 ;
8586: LD_ADDR_EXP 25
8590: PUSH
8591: LD_INT 36
8593: ST_TO_ADDR
// hardcoreCounter := 16 ;
8594: LD_ADDR_EXP 26
8598: PUSH
8599: LD_INT 16
8601: ST_TO_ADDR
// sRocket := false ;
8602: LD_ADDR_EXP 29
8606: PUSH
8607: LD_INT 0
8609: ST_TO_ADDR
// sSpeed := false ;
8610: LD_ADDR_EXP 28
8614: PUSH
8615: LD_INT 0
8617: ST_TO_ADDR
// sEngine := false ;
8618: LD_ADDR_EXP 30
8622: PUSH
8623: LD_INT 0
8625: ST_TO_ADDR
// sSpec := false ;
8626: LD_ADDR_EXP 27
8630: PUSH
8631: LD_INT 0
8633: ST_TO_ADDR
// sLevel := false ;
8634: LD_ADDR_EXP 31
8638: PUSH
8639: LD_INT 0
8641: ST_TO_ADDR
// sArmoury := false ;
8642: LD_ADDR_EXP 32
8646: PUSH
8647: LD_INT 0
8649: ST_TO_ADDR
// sRadar := false ;
8650: LD_ADDR_EXP 33
8654: PUSH
8655: LD_INT 0
8657: ST_TO_ADDR
// sBunker := false ;
8658: LD_ADDR_EXP 34
8662: PUSH
8663: LD_INT 0
8665: ST_TO_ADDR
// sHack := false ;
8666: LD_ADDR_EXP 35
8670: PUSH
8671: LD_INT 0
8673: ST_TO_ADDR
// sFire := false ;
8674: LD_ADDR_EXP 36
8678: PUSH
8679: LD_INT 0
8681: ST_TO_ADDR
// sRefresh := false ;
8682: LD_ADDR_EXP 37
8686: PUSH
8687: LD_INT 0
8689: ST_TO_ADDR
// sExp := false ;
8690: LD_ADDR_EXP 38
8694: PUSH
8695: LD_INT 0
8697: ST_TO_ADDR
// sDepot := false ;
8698: LD_ADDR_EXP 39
8702: PUSH
8703: LD_INT 0
8705: ST_TO_ADDR
// sFlag := false ;
8706: LD_ADDR_EXP 40
8710: PUSH
8711: LD_INT 0
8713: ST_TO_ADDR
// sKamikadze := false ;
8714: LD_ADDR_EXP 48
8718: PUSH
8719: LD_INT 0
8721: ST_TO_ADDR
// sTroll := false ;
8722: LD_ADDR_EXP 49
8726: PUSH
8727: LD_INT 0
8729: ST_TO_ADDR
// sSlow := false ;
8730: LD_ADDR_EXP 50
8734: PUSH
8735: LD_INT 0
8737: ST_TO_ADDR
// sLack := false ;
8738: LD_ADDR_EXP 51
8742: PUSH
8743: LD_INT 0
8745: ST_TO_ADDR
// sTank := false ;
8746: LD_ADDR_EXP 53
8750: PUSH
8751: LD_INT 0
8753: ST_TO_ADDR
// sRemote := false ;
8754: LD_ADDR_EXP 54
8758: PUSH
8759: LD_INT 0
8761: ST_TO_ADDR
// sPowell := false ;
8762: LD_ADDR_EXP 55
8766: PUSH
8767: LD_INT 0
8769: ST_TO_ADDR
// sTeleport := false ;
8770: LD_ADDR_EXP 58
8774: PUSH
8775: LD_INT 0
8777: ST_TO_ADDR
// sOilTower := false ;
8778: LD_ADDR_EXP 60
8782: PUSH
8783: LD_INT 0
8785: ST_TO_ADDR
// sShovel := false ;
8786: LD_ADDR_EXP 61
8790: PUSH
8791: LD_INT 0
8793: ST_TO_ADDR
// sSheik := false ;
8794: LD_ADDR_EXP 62
8798: PUSH
8799: LD_INT 0
8801: ST_TO_ADDR
// sEarthquake := false ;
8802: LD_ADDR_EXP 64
8806: PUSH
8807: LD_INT 0
8809: ST_TO_ADDR
// sAI := false ;
8810: LD_ADDR_EXP 65
8814: PUSH
8815: LD_INT 0
8817: ST_TO_ADDR
// sCargo := false ;
8818: LD_ADDR_EXP 68
8822: PUSH
8823: LD_INT 0
8825: ST_TO_ADDR
// sDLaser := false ;
8826: LD_ADDR_EXP 69
8830: PUSH
8831: LD_INT 0
8833: ST_TO_ADDR
// sExchange := false ;
8834: LD_ADDR_EXP 70
8838: PUSH
8839: LD_INT 0
8841: ST_TO_ADDR
// sFac := false ;
8842: LD_ADDR_EXP 71
8846: PUSH
8847: LD_INT 0
8849: ST_TO_ADDR
// sPower := false ;
8850: LD_ADDR_EXP 72
8854: PUSH
8855: LD_INT 0
8857: ST_TO_ADDR
// sRandom := false ;
8858: LD_ADDR_EXP 73
8862: PUSH
8863: LD_INT 0
8865: ST_TO_ADDR
// sShield := false ;
8866: LD_ADDR_EXP 74
8870: PUSH
8871: LD_INT 0
8873: ST_TO_ADDR
// sTime := false ;
8874: LD_ADDR_EXP 75
8878: PUSH
8879: LD_INT 0
8881: ST_TO_ADDR
// sTools := false ;
8882: LD_ADDR_EXP 76
8886: PUSH
8887: LD_INT 0
8889: ST_TO_ADDR
// sSold := false ;
8890: LD_ADDR_EXP 41
8894: PUSH
8895: LD_INT 0
8897: ST_TO_ADDR
// sDiff := false ;
8898: LD_ADDR_EXP 42
8902: PUSH
8903: LD_INT 0
8905: ST_TO_ADDR
// sFog := false ;
8906: LD_ADDR_EXP 45
8910: PUSH
8911: LD_INT 0
8913: ST_TO_ADDR
// sReset := false ;
8914: LD_ADDR_EXP 46
8918: PUSH
8919: LD_INT 0
8921: ST_TO_ADDR
// sSun := false ;
8922: LD_ADDR_EXP 47
8926: PUSH
8927: LD_INT 0
8929: ST_TO_ADDR
// sTiger := false ;
8930: LD_ADDR_EXP 43
8934: PUSH
8935: LD_INT 0
8937: ST_TO_ADDR
// sBomb := false ;
8938: LD_ADDR_EXP 44
8942: PUSH
8943: LD_INT 0
8945: ST_TO_ADDR
// sWound := false ;
8946: LD_ADDR_EXP 52
8950: PUSH
8951: LD_INT 0
8953: ST_TO_ADDR
// sBetray := false ;
8954: LD_ADDR_EXP 56
8958: PUSH
8959: LD_INT 0
8961: ST_TO_ADDR
// sContamin := false ;
8962: LD_ADDR_EXP 57
8966: PUSH
8967: LD_INT 0
8969: ST_TO_ADDR
// sOil := false ;
8970: LD_ADDR_EXP 59
8974: PUSH
8975: LD_INT 0
8977: ST_TO_ADDR
// sStu := false ;
8978: LD_ADDR_EXP 63
8982: PUSH
8983: LD_INT 0
8985: ST_TO_ADDR
// sBazooka := false ;
8986: LD_ADDR_EXP 66
8990: PUSH
8991: LD_INT 0
8993: ST_TO_ADDR
// sMortar := false ;
8994: LD_ADDR_EXP 67
8998: PUSH
8999: LD_INT 0
9001: ST_TO_ADDR
// sRanger := false ;
9002: LD_ADDR_EXP 77
9006: PUSH
9007: LD_INT 0
9009: ST_TO_ADDR
// sComputer := false ;
9010: LD_ADDR_EXP 78
9014: PUSH
9015: LD_INT 0
9017: ST_TO_ADDR
// s30 := false ;
9018: LD_ADDR_EXP 79
9022: PUSH
9023: LD_INT 0
9025: ST_TO_ADDR
// s60 := false ;
9026: LD_ADDR_EXP 80
9030: PUSH
9031: LD_INT 0
9033: ST_TO_ADDR
// end ;
9034: LD_VAR 0 1
9038: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
9039: LD_INT 0
9041: PPUSH
9042: PPUSH
9043: PPUSH
9044: PPUSH
9045: PPUSH
// result := [ ] ;
9046: LD_ADDR_VAR 0 1
9050: PUSH
9051: EMPTY
9052: ST_TO_ADDR
// if campaign_id = 1 then
9053: LD_OWVAR 69
9057: PUSH
9058: LD_INT 1
9060: EQUAL
9061: IFFALSE 12227
// begin case mission_number of 1 :
9063: LD_OWVAR 70
9067: PUSH
9068: LD_INT 1
9070: DOUBLE
9071: EQUAL
9072: IFTRUE 9076
9074: GO 9152
9076: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
9077: LD_ADDR_VAR 0 1
9081: PUSH
9082: LD_INT 2
9084: PUSH
9085: LD_INT 4
9087: PUSH
9088: LD_INT 11
9090: PUSH
9091: LD_INT 12
9093: PUSH
9094: LD_INT 15
9096: PUSH
9097: LD_INT 16
9099: PUSH
9100: LD_INT 22
9102: PUSH
9103: LD_INT 23
9105: PUSH
9106: LD_INT 26
9108: PUSH
9109: EMPTY
9110: LIST
9111: LIST
9112: LIST
9113: LIST
9114: LIST
9115: LIST
9116: LIST
9117: LIST
9118: LIST
9119: PUSH
9120: LD_INT 101
9122: PUSH
9123: LD_INT 102
9125: PUSH
9126: LD_INT 106
9128: PUSH
9129: LD_INT 116
9131: PUSH
9132: LD_INT 117
9134: PUSH
9135: LD_INT 118
9137: PUSH
9138: EMPTY
9139: LIST
9140: LIST
9141: LIST
9142: LIST
9143: LIST
9144: LIST
9145: PUSH
9146: EMPTY
9147: LIST
9148: LIST
9149: ST_TO_ADDR
9150: GO 12225
9152: LD_INT 2
9154: DOUBLE
9155: EQUAL
9156: IFTRUE 9160
9158: GO 9244
9160: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9161: LD_ADDR_VAR 0 1
9165: PUSH
9166: LD_INT 2
9168: PUSH
9169: LD_INT 4
9171: PUSH
9172: LD_INT 11
9174: PUSH
9175: LD_INT 12
9177: PUSH
9178: LD_INT 15
9180: PUSH
9181: LD_INT 16
9183: PUSH
9184: LD_INT 22
9186: PUSH
9187: LD_INT 23
9189: PUSH
9190: LD_INT 26
9192: PUSH
9193: EMPTY
9194: LIST
9195: LIST
9196: LIST
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: LIST
9203: PUSH
9204: LD_INT 101
9206: PUSH
9207: LD_INT 102
9209: PUSH
9210: LD_INT 105
9212: PUSH
9213: LD_INT 106
9215: PUSH
9216: LD_INT 108
9218: PUSH
9219: LD_INT 116
9221: PUSH
9222: LD_INT 117
9224: PUSH
9225: LD_INT 118
9227: PUSH
9228: EMPTY
9229: LIST
9230: LIST
9231: LIST
9232: LIST
9233: LIST
9234: LIST
9235: LIST
9236: LIST
9237: PUSH
9238: EMPTY
9239: LIST
9240: LIST
9241: ST_TO_ADDR
9242: GO 12225
9244: LD_INT 3
9246: DOUBLE
9247: EQUAL
9248: IFTRUE 9252
9250: GO 9340
9252: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9253: LD_ADDR_VAR 0 1
9257: PUSH
9258: LD_INT 2
9260: PUSH
9261: LD_INT 4
9263: PUSH
9264: LD_INT 5
9266: PUSH
9267: LD_INT 11
9269: PUSH
9270: LD_INT 12
9272: PUSH
9273: LD_INT 15
9275: PUSH
9276: LD_INT 16
9278: PUSH
9279: LD_INT 22
9281: PUSH
9282: LD_INT 26
9284: PUSH
9285: LD_INT 36
9287: PUSH
9288: EMPTY
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: LIST
9294: LIST
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: PUSH
9300: LD_INT 101
9302: PUSH
9303: LD_INT 102
9305: PUSH
9306: LD_INT 105
9308: PUSH
9309: LD_INT 106
9311: PUSH
9312: LD_INT 108
9314: PUSH
9315: LD_INT 116
9317: PUSH
9318: LD_INT 117
9320: PUSH
9321: LD_INT 118
9323: PUSH
9324: EMPTY
9325: LIST
9326: LIST
9327: LIST
9328: LIST
9329: LIST
9330: LIST
9331: LIST
9332: LIST
9333: PUSH
9334: EMPTY
9335: LIST
9336: LIST
9337: ST_TO_ADDR
9338: GO 12225
9340: LD_INT 4
9342: DOUBLE
9343: EQUAL
9344: IFTRUE 9348
9346: GO 9444
9348: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9349: LD_ADDR_VAR 0 1
9353: PUSH
9354: LD_INT 2
9356: PUSH
9357: LD_INT 4
9359: PUSH
9360: LD_INT 5
9362: PUSH
9363: LD_INT 8
9365: PUSH
9366: LD_INT 11
9368: PUSH
9369: LD_INT 12
9371: PUSH
9372: LD_INT 15
9374: PUSH
9375: LD_INT 16
9377: PUSH
9378: LD_INT 22
9380: PUSH
9381: LD_INT 23
9383: PUSH
9384: LD_INT 26
9386: PUSH
9387: LD_INT 36
9389: PUSH
9390: EMPTY
9391: LIST
9392: LIST
9393: LIST
9394: LIST
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: LIST
9403: PUSH
9404: LD_INT 101
9406: PUSH
9407: LD_INT 102
9409: PUSH
9410: LD_INT 105
9412: PUSH
9413: LD_INT 106
9415: PUSH
9416: LD_INT 108
9418: PUSH
9419: LD_INT 116
9421: PUSH
9422: LD_INT 117
9424: PUSH
9425: LD_INT 118
9427: PUSH
9428: EMPTY
9429: LIST
9430: LIST
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: PUSH
9438: EMPTY
9439: LIST
9440: LIST
9441: ST_TO_ADDR
9442: GO 12225
9444: LD_INT 5
9446: DOUBLE
9447: EQUAL
9448: IFTRUE 9452
9450: GO 9564
9452: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9453: LD_ADDR_VAR 0 1
9457: PUSH
9458: LD_INT 2
9460: PUSH
9461: LD_INT 4
9463: PUSH
9464: LD_INT 5
9466: PUSH
9467: LD_INT 6
9469: PUSH
9470: LD_INT 8
9472: PUSH
9473: LD_INT 11
9475: PUSH
9476: LD_INT 12
9478: PUSH
9479: LD_INT 15
9481: PUSH
9482: LD_INT 16
9484: PUSH
9485: LD_INT 22
9487: PUSH
9488: LD_INT 23
9490: PUSH
9491: LD_INT 25
9493: PUSH
9494: LD_INT 26
9496: PUSH
9497: LD_INT 36
9499: PUSH
9500: EMPTY
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: LIST
9506: LIST
9507: LIST
9508: LIST
9509: LIST
9510: LIST
9511: LIST
9512: LIST
9513: LIST
9514: LIST
9515: PUSH
9516: LD_INT 101
9518: PUSH
9519: LD_INT 102
9521: PUSH
9522: LD_INT 105
9524: PUSH
9525: LD_INT 106
9527: PUSH
9528: LD_INT 108
9530: PUSH
9531: LD_INT 109
9533: PUSH
9534: LD_INT 112
9536: PUSH
9537: LD_INT 116
9539: PUSH
9540: LD_INT 117
9542: PUSH
9543: LD_INT 118
9545: PUSH
9546: EMPTY
9547: LIST
9548: LIST
9549: LIST
9550: LIST
9551: LIST
9552: LIST
9553: LIST
9554: LIST
9555: LIST
9556: LIST
9557: PUSH
9558: EMPTY
9559: LIST
9560: LIST
9561: ST_TO_ADDR
9562: GO 12225
9564: LD_INT 6
9566: DOUBLE
9567: EQUAL
9568: IFTRUE 9572
9570: GO 9704
9572: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9573: LD_ADDR_VAR 0 1
9577: PUSH
9578: LD_INT 2
9580: PUSH
9581: LD_INT 4
9583: PUSH
9584: LD_INT 5
9586: PUSH
9587: LD_INT 6
9589: PUSH
9590: LD_INT 8
9592: PUSH
9593: LD_INT 11
9595: PUSH
9596: LD_INT 12
9598: PUSH
9599: LD_INT 15
9601: PUSH
9602: LD_INT 16
9604: PUSH
9605: LD_INT 20
9607: PUSH
9608: LD_INT 21
9610: PUSH
9611: LD_INT 22
9613: PUSH
9614: LD_INT 23
9616: PUSH
9617: LD_INT 25
9619: PUSH
9620: LD_INT 26
9622: PUSH
9623: LD_INT 30
9625: PUSH
9626: LD_INT 31
9628: PUSH
9629: LD_INT 32
9631: PUSH
9632: LD_INT 36
9634: PUSH
9635: EMPTY
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: LIST
9652: LIST
9653: LIST
9654: LIST
9655: PUSH
9656: LD_INT 101
9658: PUSH
9659: LD_INT 102
9661: PUSH
9662: LD_INT 105
9664: PUSH
9665: LD_INT 106
9667: PUSH
9668: LD_INT 108
9670: PUSH
9671: LD_INT 109
9673: PUSH
9674: LD_INT 112
9676: PUSH
9677: LD_INT 116
9679: PUSH
9680: LD_INT 117
9682: PUSH
9683: LD_INT 118
9685: PUSH
9686: EMPTY
9687: LIST
9688: LIST
9689: LIST
9690: LIST
9691: LIST
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: PUSH
9698: EMPTY
9699: LIST
9700: LIST
9701: ST_TO_ADDR
9702: GO 12225
9704: LD_INT 7
9706: DOUBLE
9707: EQUAL
9708: IFTRUE 9712
9710: GO 9824
9712: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
9713: LD_ADDR_VAR 0 1
9717: PUSH
9718: LD_INT 2
9720: PUSH
9721: LD_INT 4
9723: PUSH
9724: LD_INT 5
9726: PUSH
9727: LD_INT 7
9729: PUSH
9730: LD_INT 11
9732: PUSH
9733: LD_INT 12
9735: PUSH
9736: LD_INT 15
9738: PUSH
9739: LD_INT 16
9741: PUSH
9742: LD_INT 20
9744: PUSH
9745: LD_INT 21
9747: PUSH
9748: LD_INT 22
9750: PUSH
9751: LD_INT 23
9753: PUSH
9754: LD_INT 25
9756: PUSH
9757: LD_INT 26
9759: PUSH
9760: EMPTY
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: PUSH
9776: LD_INT 101
9778: PUSH
9779: LD_INT 102
9781: PUSH
9782: LD_INT 103
9784: PUSH
9785: LD_INT 105
9787: PUSH
9788: LD_INT 106
9790: PUSH
9791: LD_INT 108
9793: PUSH
9794: LD_INT 112
9796: PUSH
9797: LD_INT 116
9799: PUSH
9800: LD_INT 117
9802: PUSH
9803: LD_INT 118
9805: PUSH
9806: EMPTY
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: PUSH
9818: EMPTY
9819: LIST
9820: LIST
9821: ST_TO_ADDR
9822: GO 12225
9824: LD_INT 8
9826: DOUBLE
9827: EQUAL
9828: IFTRUE 9832
9830: GO 9972
9832: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
9833: LD_ADDR_VAR 0 1
9837: PUSH
9838: LD_INT 2
9840: PUSH
9841: LD_INT 4
9843: PUSH
9844: LD_INT 5
9846: PUSH
9847: LD_INT 6
9849: PUSH
9850: LD_INT 7
9852: PUSH
9853: LD_INT 8
9855: PUSH
9856: LD_INT 11
9858: PUSH
9859: LD_INT 12
9861: PUSH
9862: LD_INT 15
9864: PUSH
9865: LD_INT 16
9867: PUSH
9868: LD_INT 20
9870: PUSH
9871: LD_INT 21
9873: PUSH
9874: LD_INT 22
9876: PUSH
9877: LD_INT 23
9879: PUSH
9880: LD_INT 25
9882: PUSH
9883: LD_INT 26
9885: PUSH
9886: LD_INT 30
9888: PUSH
9889: LD_INT 31
9891: PUSH
9892: LD_INT 32
9894: PUSH
9895: LD_INT 36
9897: PUSH
9898: EMPTY
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: LIST
9906: LIST
9907: LIST
9908: LIST
9909: LIST
9910: LIST
9911: LIST
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: LIST
9919: PUSH
9920: LD_INT 101
9922: PUSH
9923: LD_INT 102
9925: PUSH
9926: LD_INT 103
9928: PUSH
9929: LD_INT 105
9931: PUSH
9932: LD_INT 106
9934: PUSH
9935: LD_INT 108
9937: PUSH
9938: LD_INT 109
9940: PUSH
9941: LD_INT 112
9943: PUSH
9944: LD_INT 116
9946: PUSH
9947: LD_INT 117
9949: PUSH
9950: LD_INT 118
9952: PUSH
9953: EMPTY
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: PUSH
9966: EMPTY
9967: LIST
9968: LIST
9969: ST_TO_ADDR
9970: GO 12225
9972: LD_INT 9
9974: DOUBLE
9975: EQUAL
9976: IFTRUE 9980
9978: GO 10128
9980: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
9981: LD_ADDR_VAR 0 1
9985: PUSH
9986: LD_INT 2
9988: PUSH
9989: LD_INT 4
9991: PUSH
9992: LD_INT 5
9994: PUSH
9995: LD_INT 6
9997: PUSH
9998: LD_INT 7
10000: PUSH
10001: LD_INT 8
10003: PUSH
10004: LD_INT 11
10006: PUSH
10007: LD_INT 12
10009: PUSH
10010: LD_INT 15
10012: PUSH
10013: LD_INT 16
10015: PUSH
10016: LD_INT 20
10018: PUSH
10019: LD_INT 21
10021: PUSH
10022: LD_INT 22
10024: PUSH
10025: LD_INT 23
10027: PUSH
10028: LD_INT 25
10030: PUSH
10031: LD_INT 26
10033: PUSH
10034: LD_INT 28
10036: PUSH
10037: LD_INT 30
10039: PUSH
10040: LD_INT 31
10042: PUSH
10043: LD_INT 32
10045: PUSH
10046: LD_INT 36
10048: PUSH
10049: EMPTY
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: LIST
10064: LIST
10065: LIST
10066: LIST
10067: LIST
10068: LIST
10069: LIST
10070: LIST
10071: PUSH
10072: LD_INT 101
10074: PUSH
10075: LD_INT 102
10077: PUSH
10078: LD_INT 103
10080: PUSH
10081: LD_INT 105
10083: PUSH
10084: LD_INT 106
10086: PUSH
10087: LD_INT 108
10089: PUSH
10090: LD_INT 109
10092: PUSH
10093: LD_INT 112
10095: PUSH
10096: LD_INT 114
10098: PUSH
10099: LD_INT 116
10101: PUSH
10102: LD_INT 117
10104: PUSH
10105: LD_INT 118
10107: PUSH
10108: EMPTY
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: LIST
10121: PUSH
10122: EMPTY
10123: LIST
10124: LIST
10125: ST_TO_ADDR
10126: GO 12225
10128: LD_INT 10
10130: DOUBLE
10131: EQUAL
10132: IFTRUE 10136
10134: GO 10332
10136: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10137: LD_ADDR_VAR 0 1
10141: PUSH
10142: LD_INT 2
10144: PUSH
10145: LD_INT 4
10147: PUSH
10148: LD_INT 5
10150: PUSH
10151: LD_INT 6
10153: PUSH
10154: LD_INT 7
10156: PUSH
10157: LD_INT 8
10159: PUSH
10160: LD_INT 9
10162: PUSH
10163: LD_INT 10
10165: PUSH
10166: LD_INT 11
10168: PUSH
10169: LD_INT 12
10171: PUSH
10172: LD_INT 13
10174: PUSH
10175: LD_INT 14
10177: PUSH
10178: LD_INT 15
10180: PUSH
10181: LD_INT 16
10183: PUSH
10184: LD_INT 17
10186: PUSH
10187: LD_INT 18
10189: PUSH
10190: LD_INT 19
10192: PUSH
10193: LD_INT 20
10195: PUSH
10196: LD_INT 21
10198: PUSH
10199: LD_INT 22
10201: PUSH
10202: LD_INT 23
10204: PUSH
10205: LD_INT 24
10207: PUSH
10208: LD_INT 25
10210: PUSH
10211: LD_INT 26
10213: PUSH
10214: LD_INT 28
10216: PUSH
10217: LD_INT 30
10219: PUSH
10220: LD_INT 31
10222: PUSH
10223: LD_INT 32
10225: PUSH
10226: LD_INT 36
10228: PUSH
10229: EMPTY
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: LIST
10236: LIST
10237: LIST
10238: LIST
10239: LIST
10240: LIST
10241: LIST
10242: LIST
10243: LIST
10244: LIST
10245: LIST
10246: LIST
10247: LIST
10248: LIST
10249: LIST
10250: LIST
10251: LIST
10252: LIST
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: LIST
10258: LIST
10259: PUSH
10260: LD_INT 101
10262: PUSH
10263: LD_INT 102
10265: PUSH
10266: LD_INT 103
10268: PUSH
10269: LD_INT 104
10271: PUSH
10272: LD_INT 105
10274: PUSH
10275: LD_INT 106
10277: PUSH
10278: LD_INT 107
10280: PUSH
10281: LD_INT 108
10283: PUSH
10284: LD_INT 109
10286: PUSH
10287: LD_INT 110
10289: PUSH
10290: LD_INT 111
10292: PUSH
10293: LD_INT 112
10295: PUSH
10296: LD_INT 114
10298: PUSH
10299: LD_INT 116
10301: PUSH
10302: LD_INT 117
10304: PUSH
10305: LD_INT 118
10307: PUSH
10308: EMPTY
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: LIST
10316: LIST
10317: LIST
10318: LIST
10319: LIST
10320: LIST
10321: LIST
10322: LIST
10323: LIST
10324: LIST
10325: PUSH
10326: EMPTY
10327: LIST
10328: LIST
10329: ST_TO_ADDR
10330: GO 12225
10332: LD_INT 11
10334: DOUBLE
10335: EQUAL
10336: IFTRUE 10340
10338: GO 10544
10340: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10341: LD_ADDR_VAR 0 1
10345: PUSH
10346: LD_INT 2
10348: PUSH
10349: LD_INT 3
10351: PUSH
10352: LD_INT 4
10354: PUSH
10355: LD_INT 5
10357: PUSH
10358: LD_INT 6
10360: PUSH
10361: LD_INT 7
10363: PUSH
10364: LD_INT 8
10366: PUSH
10367: LD_INT 9
10369: PUSH
10370: LD_INT 10
10372: PUSH
10373: LD_INT 11
10375: PUSH
10376: LD_INT 12
10378: PUSH
10379: LD_INT 13
10381: PUSH
10382: LD_INT 14
10384: PUSH
10385: LD_INT 15
10387: PUSH
10388: LD_INT 16
10390: PUSH
10391: LD_INT 17
10393: PUSH
10394: LD_INT 18
10396: PUSH
10397: LD_INT 19
10399: PUSH
10400: LD_INT 20
10402: PUSH
10403: LD_INT 21
10405: PUSH
10406: LD_INT 22
10408: PUSH
10409: LD_INT 23
10411: PUSH
10412: LD_INT 24
10414: PUSH
10415: LD_INT 25
10417: PUSH
10418: LD_INT 26
10420: PUSH
10421: LD_INT 28
10423: PUSH
10424: LD_INT 30
10426: PUSH
10427: LD_INT 31
10429: PUSH
10430: LD_INT 32
10432: PUSH
10433: LD_INT 34
10435: PUSH
10436: LD_INT 36
10438: PUSH
10439: EMPTY
10440: LIST
10441: LIST
10442: LIST
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: LIST
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: LIST
10470: LIST
10471: PUSH
10472: LD_INT 101
10474: PUSH
10475: LD_INT 102
10477: PUSH
10478: LD_INT 103
10480: PUSH
10481: LD_INT 104
10483: PUSH
10484: LD_INT 105
10486: PUSH
10487: LD_INT 106
10489: PUSH
10490: LD_INT 107
10492: PUSH
10493: LD_INT 108
10495: PUSH
10496: LD_INT 109
10498: PUSH
10499: LD_INT 110
10501: PUSH
10502: LD_INT 111
10504: PUSH
10505: LD_INT 112
10507: PUSH
10508: LD_INT 114
10510: PUSH
10511: LD_INT 116
10513: PUSH
10514: LD_INT 117
10516: PUSH
10517: LD_INT 118
10519: PUSH
10520: EMPTY
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: PUSH
10538: EMPTY
10539: LIST
10540: LIST
10541: ST_TO_ADDR
10542: GO 12225
10544: LD_INT 12
10546: DOUBLE
10547: EQUAL
10548: IFTRUE 10552
10550: GO 10772
10552: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10553: LD_ADDR_VAR 0 1
10557: PUSH
10558: LD_INT 1
10560: PUSH
10561: LD_INT 2
10563: PUSH
10564: LD_INT 3
10566: PUSH
10567: LD_INT 4
10569: PUSH
10570: LD_INT 5
10572: PUSH
10573: LD_INT 6
10575: PUSH
10576: LD_INT 7
10578: PUSH
10579: LD_INT 8
10581: PUSH
10582: LD_INT 9
10584: PUSH
10585: LD_INT 10
10587: PUSH
10588: LD_INT 11
10590: PUSH
10591: LD_INT 12
10593: PUSH
10594: LD_INT 13
10596: PUSH
10597: LD_INT 14
10599: PUSH
10600: LD_INT 15
10602: PUSH
10603: LD_INT 16
10605: PUSH
10606: LD_INT 17
10608: PUSH
10609: LD_INT 18
10611: PUSH
10612: LD_INT 19
10614: PUSH
10615: LD_INT 20
10617: PUSH
10618: LD_INT 21
10620: PUSH
10621: LD_INT 22
10623: PUSH
10624: LD_INT 23
10626: PUSH
10627: LD_INT 24
10629: PUSH
10630: LD_INT 25
10632: PUSH
10633: LD_INT 26
10635: PUSH
10636: LD_INT 27
10638: PUSH
10639: LD_INT 28
10641: PUSH
10642: LD_INT 30
10644: PUSH
10645: LD_INT 31
10647: PUSH
10648: LD_INT 32
10650: PUSH
10651: LD_INT 33
10653: PUSH
10654: LD_INT 34
10656: PUSH
10657: LD_INT 36
10659: PUSH
10660: EMPTY
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: LIST
10678: LIST
10679: LIST
10680: LIST
10681: LIST
10682: LIST
10683: LIST
10684: LIST
10685: LIST
10686: LIST
10687: LIST
10688: LIST
10689: LIST
10690: LIST
10691: LIST
10692: LIST
10693: LIST
10694: LIST
10695: PUSH
10696: LD_INT 101
10698: PUSH
10699: LD_INT 102
10701: PUSH
10702: LD_INT 103
10704: PUSH
10705: LD_INT 104
10707: PUSH
10708: LD_INT 105
10710: PUSH
10711: LD_INT 106
10713: PUSH
10714: LD_INT 107
10716: PUSH
10717: LD_INT 108
10719: PUSH
10720: LD_INT 109
10722: PUSH
10723: LD_INT 110
10725: PUSH
10726: LD_INT 111
10728: PUSH
10729: LD_INT 112
10731: PUSH
10732: LD_INT 113
10734: PUSH
10735: LD_INT 114
10737: PUSH
10738: LD_INT 116
10740: PUSH
10741: LD_INT 117
10743: PUSH
10744: LD_INT 118
10746: PUSH
10747: EMPTY
10748: LIST
10749: LIST
10750: LIST
10751: LIST
10752: LIST
10753: LIST
10754: LIST
10755: LIST
10756: LIST
10757: LIST
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: LIST
10765: PUSH
10766: EMPTY
10767: LIST
10768: LIST
10769: ST_TO_ADDR
10770: GO 12225
10772: LD_INT 13
10774: DOUBLE
10775: EQUAL
10776: IFTRUE 10780
10778: GO 10988
10780: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
10781: LD_ADDR_VAR 0 1
10785: PUSH
10786: LD_INT 1
10788: PUSH
10789: LD_INT 2
10791: PUSH
10792: LD_INT 3
10794: PUSH
10795: LD_INT 4
10797: PUSH
10798: LD_INT 5
10800: PUSH
10801: LD_INT 8
10803: PUSH
10804: LD_INT 9
10806: PUSH
10807: LD_INT 10
10809: PUSH
10810: LD_INT 11
10812: PUSH
10813: LD_INT 12
10815: PUSH
10816: LD_INT 14
10818: PUSH
10819: LD_INT 15
10821: PUSH
10822: LD_INT 16
10824: PUSH
10825: LD_INT 17
10827: PUSH
10828: LD_INT 18
10830: PUSH
10831: LD_INT 19
10833: PUSH
10834: LD_INT 20
10836: PUSH
10837: LD_INT 21
10839: PUSH
10840: LD_INT 22
10842: PUSH
10843: LD_INT 23
10845: PUSH
10846: LD_INT 24
10848: PUSH
10849: LD_INT 25
10851: PUSH
10852: LD_INT 26
10854: PUSH
10855: LD_INT 27
10857: PUSH
10858: LD_INT 28
10860: PUSH
10861: LD_INT 30
10863: PUSH
10864: LD_INT 31
10866: PUSH
10867: LD_INT 32
10869: PUSH
10870: LD_INT 33
10872: PUSH
10873: LD_INT 34
10875: PUSH
10876: LD_INT 36
10878: PUSH
10879: EMPTY
10880: LIST
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: LIST
10909: LIST
10910: LIST
10911: PUSH
10912: LD_INT 101
10914: PUSH
10915: LD_INT 102
10917: PUSH
10918: LD_INT 103
10920: PUSH
10921: LD_INT 104
10923: PUSH
10924: LD_INT 105
10926: PUSH
10927: LD_INT 106
10929: PUSH
10930: LD_INT 107
10932: PUSH
10933: LD_INT 108
10935: PUSH
10936: LD_INT 109
10938: PUSH
10939: LD_INT 110
10941: PUSH
10942: LD_INT 111
10944: PUSH
10945: LD_INT 112
10947: PUSH
10948: LD_INT 113
10950: PUSH
10951: LD_INT 114
10953: PUSH
10954: LD_INT 116
10956: PUSH
10957: LD_INT 117
10959: PUSH
10960: LD_INT 118
10962: PUSH
10963: EMPTY
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: PUSH
10982: EMPTY
10983: LIST
10984: LIST
10985: ST_TO_ADDR
10986: GO 12225
10988: LD_INT 14
10990: DOUBLE
10991: EQUAL
10992: IFTRUE 10996
10994: GO 11220
10996: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
10997: LD_ADDR_VAR 0 1
11001: PUSH
11002: LD_INT 1
11004: PUSH
11005: LD_INT 2
11007: PUSH
11008: LD_INT 3
11010: PUSH
11011: LD_INT 4
11013: PUSH
11014: LD_INT 5
11016: PUSH
11017: LD_INT 6
11019: PUSH
11020: LD_INT 7
11022: PUSH
11023: LD_INT 8
11025: PUSH
11026: LD_INT 9
11028: PUSH
11029: LD_INT 10
11031: PUSH
11032: LD_INT 11
11034: PUSH
11035: LD_INT 12
11037: PUSH
11038: LD_INT 13
11040: PUSH
11041: LD_INT 14
11043: PUSH
11044: LD_INT 15
11046: PUSH
11047: LD_INT 16
11049: PUSH
11050: LD_INT 17
11052: PUSH
11053: LD_INT 18
11055: PUSH
11056: LD_INT 19
11058: PUSH
11059: LD_INT 20
11061: PUSH
11062: LD_INT 21
11064: PUSH
11065: LD_INT 22
11067: PUSH
11068: LD_INT 23
11070: PUSH
11071: LD_INT 24
11073: PUSH
11074: LD_INT 25
11076: PUSH
11077: LD_INT 26
11079: PUSH
11080: LD_INT 27
11082: PUSH
11083: LD_INT 28
11085: PUSH
11086: LD_INT 29
11088: PUSH
11089: LD_INT 30
11091: PUSH
11092: LD_INT 31
11094: PUSH
11095: LD_INT 32
11097: PUSH
11098: LD_INT 33
11100: PUSH
11101: LD_INT 34
11103: PUSH
11104: LD_INT 36
11106: PUSH
11107: EMPTY
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: PUSH
11144: LD_INT 101
11146: PUSH
11147: LD_INT 102
11149: PUSH
11150: LD_INT 103
11152: PUSH
11153: LD_INT 104
11155: PUSH
11156: LD_INT 105
11158: PUSH
11159: LD_INT 106
11161: PUSH
11162: LD_INT 107
11164: PUSH
11165: LD_INT 108
11167: PUSH
11168: LD_INT 109
11170: PUSH
11171: LD_INT 110
11173: PUSH
11174: LD_INT 111
11176: PUSH
11177: LD_INT 112
11179: PUSH
11180: LD_INT 113
11182: PUSH
11183: LD_INT 114
11185: PUSH
11186: LD_INT 116
11188: PUSH
11189: LD_INT 117
11191: PUSH
11192: LD_INT 118
11194: PUSH
11195: EMPTY
11196: LIST
11197: LIST
11198: LIST
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: LIST
11213: PUSH
11214: EMPTY
11215: LIST
11216: LIST
11217: ST_TO_ADDR
11218: GO 12225
11220: LD_INT 15
11222: DOUBLE
11223: EQUAL
11224: IFTRUE 11228
11226: GO 11452
11228: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11229: LD_ADDR_VAR 0 1
11233: PUSH
11234: LD_INT 1
11236: PUSH
11237: LD_INT 2
11239: PUSH
11240: LD_INT 3
11242: PUSH
11243: LD_INT 4
11245: PUSH
11246: LD_INT 5
11248: PUSH
11249: LD_INT 6
11251: PUSH
11252: LD_INT 7
11254: PUSH
11255: LD_INT 8
11257: PUSH
11258: LD_INT 9
11260: PUSH
11261: LD_INT 10
11263: PUSH
11264: LD_INT 11
11266: PUSH
11267: LD_INT 12
11269: PUSH
11270: LD_INT 13
11272: PUSH
11273: LD_INT 14
11275: PUSH
11276: LD_INT 15
11278: PUSH
11279: LD_INT 16
11281: PUSH
11282: LD_INT 17
11284: PUSH
11285: LD_INT 18
11287: PUSH
11288: LD_INT 19
11290: PUSH
11291: LD_INT 20
11293: PUSH
11294: LD_INT 21
11296: PUSH
11297: LD_INT 22
11299: PUSH
11300: LD_INT 23
11302: PUSH
11303: LD_INT 24
11305: PUSH
11306: LD_INT 25
11308: PUSH
11309: LD_INT 26
11311: PUSH
11312: LD_INT 27
11314: PUSH
11315: LD_INT 28
11317: PUSH
11318: LD_INT 29
11320: PUSH
11321: LD_INT 30
11323: PUSH
11324: LD_INT 31
11326: PUSH
11327: LD_INT 32
11329: PUSH
11330: LD_INT 33
11332: PUSH
11333: LD_INT 34
11335: PUSH
11336: LD_INT 36
11338: PUSH
11339: EMPTY
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: LIST
11359: LIST
11360: LIST
11361: LIST
11362: LIST
11363: LIST
11364: LIST
11365: LIST
11366: LIST
11367: LIST
11368: LIST
11369: LIST
11370: LIST
11371: LIST
11372: LIST
11373: LIST
11374: LIST
11375: PUSH
11376: LD_INT 101
11378: PUSH
11379: LD_INT 102
11381: PUSH
11382: LD_INT 103
11384: PUSH
11385: LD_INT 104
11387: PUSH
11388: LD_INT 105
11390: PUSH
11391: LD_INT 106
11393: PUSH
11394: LD_INT 107
11396: PUSH
11397: LD_INT 108
11399: PUSH
11400: LD_INT 109
11402: PUSH
11403: LD_INT 110
11405: PUSH
11406: LD_INT 111
11408: PUSH
11409: LD_INT 112
11411: PUSH
11412: LD_INT 113
11414: PUSH
11415: LD_INT 114
11417: PUSH
11418: LD_INT 116
11420: PUSH
11421: LD_INT 117
11423: PUSH
11424: LD_INT 118
11426: PUSH
11427: EMPTY
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: PUSH
11446: EMPTY
11447: LIST
11448: LIST
11449: ST_TO_ADDR
11450: GO 12225
11452: LD_INT 16
11454: DOUBLE
11455: EQUAL
11456: IFTRUE 11460
11458: GO 11596
11460: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11461: LD_ADDR_VAR 0 1
11465: PUSH
11466: LD_INT 2
11468: PUSH
11469: LD_INT 4
11471: PUSH
11472: LD_INT 5
11474: PUSH
11475: LD_INT 7
11477: PUSH
11478: LD_INT 11
11480: PUSH
11481: LD_INT 12
11483: PUSH
11484: LD_INT 15
11486: PUSH
11487: LD_INT 16
11489: PUSH
11490: LD_INT 20
11492: PUSH
11493: LD_INT 21
11495: PUSH
11496: LD_INT 22
11498: PUSH
11499: LD_INT 23
11501: PUSH
11502: LD_INT 25
11504: PUSH
11505: LD_INT 26
11507: PUSH
11508: LD_INT 30
11510: PUSH
11511: LD_INT 31
11513: PUSH
11514: LD_INT 32
11516: PUSH
11517: LD_INT 33
11519: PUSH
11520: LD_INT 34
11522: PUSH
11523: EMPTY
11524: LIST
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: LIST
11532: LIST
11533: LIST
11534: LIST
11535: LIST
11536: LIST
11537: LIST
11538: LIST
11539: LIST
11540: LIST
11541: LIST
11542: LIST
11543: PUSH
11544: LD_INT 101
11546: PUSH
11547: LD_INT 102
11549: PUSH
11550: LD_INT 103
11552: PUSH
11553: LD_INT 106
11555: PUSH
11556: LD_INT 108
11558: PUSH
11559: LD_INT 112
11561: PUSH
11562: LD_INT 113
11564: PUSH
11565: LD_INT 114
11567: PUSH
11568: LD_INT 116
11570: PUSH
11571: LD_INT 117
11573: PUSH
11574: LD_INT 118
11576: PUSH
11577: EMPTY
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: LIST
11588: LIST
11589: PUSH
11590: EMPTY
11591: LIST
11592: LIST
11593: ST_TO_ADDR
11594: GO 12225
11596: LD_INT 17
11598: DOUBLE
11599: EQUAL
11600: IFTRUE 11604
11602: GO 11828
11604: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11605: LD_ADDR_VAR 0 1
11609: PUSH
11610: LD_INT 1
11612: PUSH
11613: LD_INT 2
11615: PUSH
11616: LD_INT 3
11618: PUSH
11619: LD_INT 4
11621: PUSH
11622: LD_INT 5
11624: PUSH
11625: LD_INT 6
11627: PUSH
11628: LD_INT 7
11630: PUSH
11631: LD_INT 8
11633: PUSH
11634: LD_INT 9
11636: PUSH
11637: LD_INT 10
11639: PUSH
11640: LD_INT 11
11642: PUSH
11643: LD_INT 12
11645: PUSH
11646: LD_INT 13
11648: PUSH
11649: LD_INT 14
11651: PUSH
11652: LD_INT 15
11654: PUSH
11655: LD_INT 16
11657: PUSH
11658: LD_INT 17
11660: PUSH
11661: LD_INT 18
11663: PUSH
11664: LD_INT 19
11666: PUSH
11667: LD_INT 20
11669: PUSH
11670: LD_INT 21
11672: PUSH
11673: LD_INT 22
11675: PUSH
11676: LD_INT 23
11678: PUSH
11679: LD_INT 24
11681: PUSH
11682: LD_INT 25
11684: PUSH
11685: LD_INT 26
11687: PUSH
11688: LD_INT 27
11690: PUSH
11691: LD_INT 28
11693: PUSH
11694: LD_INT 29
11696: PUSH
11697: LD_INT 30
11699: PUSH
11700: LD_INT 31
11702: PUSH
11703: LD_INT 32
11705: PUSH
11706: LD_INT 33
11708: PUSH
11709: LD_INT 34
11711: PUSH
11712: LD_INT 36
11714: PUSH
11715: EMPTY
11716: LIST
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: LIST
11740: LIST
11741: LIST
11742: LIST
11743: LIST
11744: LIST
11745: LIST
11746: LIST
11747: LIST
11748: LIST
11749: LIST
11750: LIST
11751: PUSH
11752: LD_INT 101
11754: PUSH
11755: LD_INT 102
11757: PUSH
11758: LD_INT 103
11760: PUSH
11761: LD_INT 104
11763: PUSH
11764: LD_INT 105
11766: PUSH
11767: LD_INT 106
11769: PUSH
11770: LD_INT 107
11772: PUSH
11773: LD_INT 108
11775: PUSH
11776: LD_INT 109
11778: PUSH
11779: LD_INT 110
11781: PUSH
11782: LD_INT 111
11784: PUSH
11785: LD_INT 112
11787: PUSH
11788: LD_INT 113
11790: PUSH
11791: LD_INT 114
11793: PUSH
11794: LD_INT 116
11796: PUSH
11797: LD_INT 117
11799: PUSH
11800: LD_INT 118
11802: PUSH
11803: EMPTY
11804: LIST
11805: LIST
11806: LIST
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: LIST
11821: PUSH
11822: EMPTY
11823: LIST
11824: LIST
11825: ST_TO_ADDR
11826: GO 12225
11828: LD_INT 18
11830: DOUBLE
11831: EQUAL
11832: IFTRUE 11836
11834: GO 11984
11836: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
11837: LD_ADDR_VAR 0 1
11841: PUSH
11842: LD_INT 2
11844: PUSH
11845: LD_INT 4
11847: PUSH
11848: LD_INT 5
11850: PUSH
11851: LD_INT 7
11853: PUSH
11854: LD_INT 11
11856: PUSH
11857: LD_INT 12
11859: PUSH
11860: LD_INT 15
11862: PUSH
11863: LD_INT 16
11865: PUSH
11866: LD_INT 20
11868: PUSH
11869: LD_INT 21
11871: PUSH
11872: LD_INT 22
11874: PUSH
11875: LD_INT 23
11877: PUSH
11878: LD_INT 25
11880: PUSH
11881: LD_INT 26
11883: PUSH
11884: LD_INT 30
11886: PUSH
11887: LD_INT 31
11889: PUSH
11890: LD_INT 32
11892: PUSH
11893: LD_INT 33
11895: PUSH
11896: LD_INT 34
11898: PUSH
11899: LD_INT 35
11901: PUSH
11902: LD_INT 36
11904: PUSH
11905: EMPTY
11906: LIST
11907: LIST
11908: LIST
11909: LIST
11910: LIST
11911: LIST
11912: LIST
11913: LIST
11914: LIST
11915: LIST
11916: LIST
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: LIST
11922: LIST
11923: LIST
11924: LIST
11925: LIST
11926: LIST
11927: PUSH
11928: LD_INT 101
11930: PUSH
11931: LD_INT 102
11933: PUSH
11934: LD_INT 103
11936: PUSH
11937: LD_INT 106
11939: PUSH
11940: LD_INT 108
11942: PUSH
11943: LD_INT 112
11945: PUSH
11946: LD_INT 113
11948: PUSH
11949: LD_INT 114
11951: PUSH
11952: LD_INT 115
11954: PUSH
11955: LD_INT 116
11957: PUSH
11958: LD_INT 117
11960: PUSH
11961: LD_INT 118
11963: PUSH
11964: EMPTY
11965: LIST
11966: LIST
11967: LIST
11968: LIST
11969: LIST
11970: LIST
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: LIST
11976: LIST
11977: PUSH
11978: EMPTY
11979: LIST
11980: LIST
11981: ST_TO_ADDR
11982: GO 12225
11984: LD_INT 19
11986: DOUBLE
11987: EQUAL
11988: IFTRUE 11992
11990: GO 12224
11992: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
11993: LD_ADDR_VAR 0 1
11997: PUSH
11998: LD_INT 1
12000: PUSH
12001: LD_INT 2
12003: PUSH
12004: LD_INT 3
12006: PUSH
12007: LD_INT 4
12009: PUSH
12010: LD_INT 5
12012: PUSH
12013: LD_INT 6
12015: PUSH
12016: LD_INT 7
12018: PUSH
12019: LD_INT 8
12021: PUSH
12022: LD_INT 9
12024: PUSH
12025: LD_INT 10
12027: PUSH
12028: LD_INT 11
12030: PUSH
12031: LD_INT 12
12033: PUSH
12034: LD_INT 13
12036: PUSH
12037: LD_INT 14
12039: PUSH
12040: LD_INT 15
12042: PUSH
12043: LD_INT 16
12045: PUSH
12046: LD_INT 17
12048: PUSH
12049: LD_INT 18
12051: PUSH
12052: LD_INT 19
12054: PUSH
12055: LD_INT 20
12057: PUSH
12058: LD_INT 21
12060: PUSH
12061: LD_INT 22
12063: PUSH
12064: LD_INT 23
12066: PUSH
12067: LD_INT 24
12069: PUSH
12070: LD_INT 25
12072: PUSH
12073: LD_INT 26
12075: PUSH
12076: LD_INT 27
12078: PUSH
12079: LD_INT 28
12081: PUSH
12082: LD_INT 29
12084: PUSH
12085: LD_INT 30
12087: PUSH
12088: LD_INT 31
12090: PUSH
12091: LD_INT 32
12093: PUSH
12094: LD_INT 33
12096: PUSH
12097: LD_INT 34
12099: PUSH
12100: LD_INT 35
12102: PUSH
12103: LD_INT 36
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: LIST
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: LIST
12142: LIST
12143: PUSH
12144: LD_INT 101
12146: PUSH
12147: LD_INT 102
12149: PUSH
12150: LD_INT 103
12152: PUSH
12153: LD_INT 104
12155: PUSH
12156: LD_INT 105
12158: PUSH
12159: LD_INT 106
12161: PUSH
12162: LD_INT 107
12164: PUSH
12165: LD_INT 108
12167: PUSH
12168: LD_INT 109
12170: PUSH
12171: LD_INT 110
12173: PUSH
12174: LD_INT 111
12176: PUSH
12177: LD_INT 112
12179: PUSH
12180: LD_INT 113
12182: PUSH
12183: LD_INT 114
12185: PUSH
12186: LD_INT 115
12188: PUSH
12189: LD_INT 116
12191: PUSH
12192: LD_INT 117
12194: PUSH
12195: LD_INT 118
12197: PUSH
12198: EMPTY
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: PUSH
12218: EMPTY
12219: LIST
12220: LIST
12221: ST_TO_ADDR
12222: GO 12225
12224: POP
// end else
12225: GO 12456
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12227: LD_ADDR_VAR 0 1
12231: PUSH
12232: LD_INT 1
12234: PUSH
12235: LD_INT 2
12237: PUSH
12238: LD_INT 3
12240: PUSH
12241: LD_INT 4
12243: PUSH
12244: LD_INT 5
12246: PUSH
12247: LD_INT 6
12249: PUSH
12250: LD_INT 7
12252: PUSH
12253: LD_INT 8
12255: PUSH
12256: LD_INT 9
12258: PUSH
12259: LD_INT 10
12261: PUSH
12262: LD_INT 11
12264: PUSH
12265: LD_INT 12
12267: PUSH
12268: LD_INT 13
12270: PUSH
12271: LD_INT 14
12273: PUSH
12274: LD_INT 15
12276: PUSH
12277: LD_INT 16
12279: PUSH
12280: LD_INT 17
12282: PUSH
12283: LD_INT 18
12285: PUSH
12286: LD_INT 19
12288: PUSH
12289: LD_INT 20
12291: PUSH
12292: LD_INT 21
12294: PUSH
12295: LD_INT 22
12297: PUSH
12298: LD_INT 23
12300: PUSH
12301: LD_INT 24
12303: PUSH
12304: LD_INT 25
12306: PUSH
12307: LD_INT 26
12309: PUSH
12310: LD_INT 27
12312: PUSH
12313: LD_INT 28
12315: PUSH
12316: LD_INT 29
12318: PUSH
12319: LD_INT 30
12321: PUSH
12322: LD_INT 31
12324: PUSH
12325: LD_INT 32
12327: PUSH
12328: LD_INT 33
12330: PUSH
12331: LD_INT 34
12333: PUSH
12334: LD_INT 35
12336: PUSH
12337: LD_INT 36
12339: PUSH
12340: EMPTY
12341: LIST
12342: LIST
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: LIST
12356: LIST
12357: LIST
12358: LIST
12359: LIST
12360: LIST
12361: LIST
12362: LIST
12363: LIST
12364: LIST
12365: LIST
12366: LIST
12367: LIST
12368: LIST
12369: LIST
12370: LIST
12371: LIST
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: LIST
12377: PUSH
12378: LD_INT 101
12380: PUSH
12381: LD_INT 102
12383: PUSH
12384: LD_INT 103
12386: PUSH
12387: LD_INT 104
12389: PUSH
12390: LD_INT 105
12392: PUSH
12393: LD_INT 106
12395: PUSH
12396: LD_INT 107
12398: PUSH
12399: LD_INT 108
12401: PUSH
12402: LD_INT 109
12404: PUSH
12405: LD_INT 110
12407: PUSH
12408: LD_INT 111
12410: PUSH
12411: LD_INT 112
12413: PUSH
12414: LD_INT 113
12416: PUSH
12417: LD_INT 114
12419: PUSH
12420: LD_INT 115
12422: PUSH
12423: LD_INT 116
12425: PUSH
12426: LD_INT 117
12428: PUSH
12429: LD_INT 118
12431: PUSH
12432: EMPTY
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: PUSH
12452: EMPTY
12453: LIST
12454: LIST
12455: ST_TO_ADDR
// if result then
12456: LD_VAR 0 1
12460: IFFALSE 12749
// begin normal :=  ;
12462: LD_ADDR_VAR 0 3
12466: PUSH
12467: LD_STRING 
12469: ST_TO_ADDR
// hardcore :=  ;
12470: LD_ADDR_VAR 0 4
12474: PUSH
12475: LD_STRING 
12477: ST_TO_ADDR
// for i = 1 to normalCounter do
12478: LD_ADDR_VAR 0 5
12482: PUSH
12483: DOUBLE
12484: LD_INT 1
12486: DEC
12487: ST_TO_ADDR
12488: LD_EXP 25
12492: PUSH
12493: FOR_TO
12494: IFFALSE 12595
// begin tmp := 0 ;
12496: LD_ADDR_VAR 0 2
12500: PUSH
12501: LD_STRING 0
12503: ST_TO_ADDR
// if result [ 1 ] then
12504: LD_VAR 0 1
12508: PUSH
12509: LD_INT 1
12511: ARRAY
12512: IFFALSE 12577
// if result [ 1 ] [ 1 ] = i then
12514: LD_VAR 0 1
12518: PUSH
12519: LD_INT 1
12521: ARRAY
12522: PUSH
12523: LD_INT 1
12525: ARRAY
12526: PUSH
12527: LD_VAR 0 5
12531: EQUAL
12532: IFFALSE 12577
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12534: LD_ADDR_VAR 0 1
12538: PUSH
12539: LD_VAR 0 1
12543: PPUSH
12544: LD_INT 1
12546: PPUSH
12547: LD_VAR 0 1
12551: PUSH
12552: LD_INT 1
12554: ARRAY
12555: PPUSH
12556: LD_INT 1
12558: PPUSH
12559: CALL_OW 3
12563: PPUSH
12564: CALL_OW 1
12568: ST_TO_ADDR
// tmp := 1 ;
12569: LD_ADDR_VAR 0 2
12573: PUSH
12574: LD_STRING 1
12576: ST_TO_ADDR
// end ; normal := normal & tmp ;
12577: LD_ADDR_VAR 0 3
12581: PUSH
12582: LD_VAR 0 3
12586: PUSH
12587: LD_VAR 0 2
12591: STR
12592: ST_TO_ADDR
// end ;
12593: GO 12493
12595: POP
12596: POP
// for i = 1 to hardcoreCounter do
12597: LD_ADDR_VAR 0 5
12601: PUSH
12602: DOUBLE
12603: LD_INT 1
12605: DEC
12606: ST_TO_ADDR
12607: LD_EXP 26
12611: PUSH
12612: FOR_TO
12613: IFFALSE 12718
// begin tmp := 0 ;
12615: LD_ADDR_VAR 0 2
12619: PUSH
12620: LD_STRING 0
12622: ST_TO_ADDR
// if result [ 2 ] then
12623: LD_VAR 0 1
12627: PUSH
12628: LD_INT 2
12630: ARRAY
12631: IFFALSE 12700
// if result [ 2 ] [ 1 ] = 100 + i then
12633: LD_VAR 0 1
12637: PUSH
12638: LD_INT 2
12640: ARRAY
12641: PUSH
12642: LD_INT 1
12644: ARRAY
12645: PUSH
12646: LD_INT 100
12648: PUSH
12649: LD_VAR 0 5
12653: PLUS
12654: EQUAL
12655: IFFALSE 12700
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12657: LD_ADDR_VAR 0 1
12661: PUSH
12662: LD_VAR 0 1
12666: PPUSH
12667: LD_INT 2
12669: PPUSH
12670: LD_VAR 0 1
12674: PUSH
12675: LD_INT 2
12677: ARRAY
12678: PPUSH
12679: LD_INT 1
12681: PPUSH
12682: CALL_OW 3
12686: PPUSH
12687: CALL_OW 1
12691: ST_TO_ADDR
// tmp := 1 ;
12692: LD_ADDR_VAR 0 2
12696: PUSH
12697: LD_STRING 1
12699: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12700: LD_ADDR_VAR 0 4
12704: PUSH
12705: LD_VAR 0 4
12709: PUSH
12710: LD_VAR 0 2
12714: STR
12715: ST_TO_ADDR
// end ;
12716: GO 12612
12718: POP
12719: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
12720: LD_STRING getStreamItemsFromMission("
12722: PUSH
12723: LD_VAR 0 3
12727: STR
12728: PUSH
12729: LD_STRING ","
12731: STR
12732: PUSH
12733: LD_VAR 0 4
12737: STR
12738: PUSH
12739: LD_STRING ")
12741: STR
12742: PPUSH
12743: CALL_OW 559
// end else
12747: GO 12756
// ToLua ( getStreamItemsFromMission("","") ) ;
12749: LD_STRING getStreamItemsFromMission("","")
12751: PPUSH
12752: CALL_OW 559
// end ;
12756: LD_VAR 0 1
12760: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
12761: LD_EXP 24
12765: PUSH
12766: LD_EXP 29
12770: AND
12771: IFFALSE 12895
12773: GO 12775
12775: DISABLE
12776: LD_INT 0
12778: PPUSH
12779: PPUSH
// begin enable ;
12780: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
12781: LD_ADDR_VAR 0 2
12785: PUSH
12786: LD_INT 22
12788: PUSH
12789: LD_OWVAR 2
12793: PUSH
12794: EMPTY
12795: LIST
12796: LIST
12797: PUSH
12798: LD_INT 2
12800: PUSH
12801: LD_INT 34
12803: PUSH
12804: LD_INT 7
12806: PUSH
12807: EMPTY
12808: LIST
12809: LIST
12810: PUSH
12811: LD_INT 34
12813: PUSH
12814: LD_INT 45
12816: PUSH
12817: EMPTY
12818: LIST
12819: LIST
12820: PUSH
12821: LD_INT 34
12823: PUSH
12824: LD_INT 28
12826: PUSH
12827: EMPTY
12828: LIST
12829: LIST
12830: PUSH
12831: LD_INT 34
12833: PUSH
12834: LD_INT 47
12836: PUSH
12837: EMPTY
12838: LIST
12839: LIST
12840: PUSH
12841: EMPTY
12842: LIST
12843: LIST
12844: LIST
12845: LIST
12846: LIST
12847: PUSH
12848: EMPTY
12849: LIST
12850: LIST
12851: PPUSH
12852: CALL_OW 69
12856: ST_TO_ADDR
// if not tmp then
12857: LD_VAR 0 2
12861: NOT
12862: IFFALSE 12866
// exit ;
12864: GO 12895
// for i in tmp do
12866: LD_ADDR_VAR 0 1
12870: PUSH
12871: LD_VAR 0 2
12875: PUSH
12876: FOR_IN
12877: IFFALSE 12893
// begin SetLives ( i , 0 ) ;
12879: LD_VAR 0 1
12883: PPUSH
12884: LD_INT 0
12886: PPUSH
12887: CALL_OW 234
// end ;
12891: GO 12876
12893: POP
12894: POP
// end ;
12895: PPOPN 2
12897: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12898: LD_EXP 24
12902: PUSH
12903: LD_EXP 30
12907: AND
12908: IFFALSE 12992
12910: GO 12912
12912: DISABLE
12913: LD_INT 0
12915: PPUSH
12916: PPUSH
// begin enable ;
12917: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
12918: LD_ADDR_VAR 0 2
12922: PUSH
12923: LD_INT 22
12925: PUSH
12926: LD_OWVAR 2
12930: PUSH
12931: EMPTY
12932: LIST
12933: LIST
12934: PUSH
12935: LD_INT 32
12937: PUSH
12938: LD_INT 3
12940: PUSH
12941: EMPTY
12942: LIST
12943: LIST
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: PPUSH
12949: CALL_OW 69
12953: ST_TO_ADDR
// if not tmp then
12954: LD_VAR 0 2
12958: NOT
12959: IFFALSE 12963
// exit ;
12961: GO 12992
// for i in tmp do
12963: LD_ADDR_VAR 0 1
12967: PUSH
12968: LD_VAR 0 2
12972: PUSH
12973: FOR_IN
12974: IFFALSE 12990
// begin SetLives ( i , 0 ) ;
12976: LD_VAR 0 1
12980: PPUSH
12981: LD_INT 0
12983: PPUSH
12984: CALL_OW 234
// end ;
12988: GO 12973
12990: POP
12991: POP
// end ;
12992: PPOPN 2
12994: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12995: LD_EXP 24
12999: PUSH
13000: LD_EXP 27
13004: AND
13005: IFFALSE 13098
13007: GO 13009
13009: DISABLE
13010: LD_INT 0
13012: PPUSH
// begin enable ;
13013: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13014: LD_ADDR_VAR 0 1
13018: PUSH
13019: LD_INT 22
13021: PUSH
13022: LD_OWVAR 2
13026: PUSH
13027: EMPTY
13028: LIST
13029: LIST
13030: PUSH
13031: LD_INT 2
13033: PUSH
13034: LD_INT 25
13036: PUSH
13037: LD_INT 5
13039: PUSH
13040: EMPTY
13041: LIST
13042: LIST
13043: PUSH
13044: LD_INT 25
13046: PUSH
13047: LD_INT 9
13049: PUSH
13050: EMPTY
13051: LIST
13052: LIST
13053: PUSH
13054: LD_INT 25
13056: PUSH
13057: LD_INT 8
13059: PUSH
13060: EMPTY
13061: LIST
13062: LIST
13063: PUSH
13064: EMPTY
13065: LIST
13066: LIST
13067: LIST
13068: LIST
13069: PUSH
13070: EMPTY
13071: LIST
13072: LIST
13073: PPUSH
13074: CALL_OW 69
13078: PUSH
13079: FOR_IN
13080: IFFALSE 13096
// begin SetClass ( i , 1 ) ;
13082: LD_VAR 0 1
13086: PPUSH
13087: LD_INT 1
13089: PPUSH
13090: CALL_OW 336
// end ;
13094: GO 13079
13096: POP
13097: POP
// end ;
13098: PPOPN 1
13100: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13101: LD_EXP 24
13105: PUSH
13106: LD_EXP 28
13110: AND
13111: PUSH
13112: LD_OWVAR 65
13116: PUSH
13117: LD_INT 7
13119: LESS
13120: AND
13121: IFFALSE 13135
13123: GO 13125
13125: DISABLE
// begin enable ;
13126: ENABLE
// game_speed := 7 ;
13127: LD_ADDR_OWVAR 65
13131: PUSH
13132: LD_INT 7
13134: ST_TO_ADDR
// end ;
13135: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13136: LD_EXP 24
13140: PUSH
13141: LD_EXP 31
13145: AND
13146: IFFALSE 13348
13148: GO 13150
13150: DISABLE
13151: LD_INT 0
13153: PPUSH
13154: PPUSH
13155: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13156: LD_ADDR_VAR 0 3
13160: PUSH
13161: LD_INT 81
13163: PUSH
13164: LD_OWVAR 2
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: PUSH
13173: LD_INT 21
13175: PUSH
13176: LD_INT 1
13178: PUSH
13179: EMPTY
13180: LIST
13181: LIST
13182: PUSH
13183: EMPTY
13184: LIST
13185: LIST
13186: PPUSH
13187: CALL_OW 69
13191: ST_TO_ADDR
// if not tmp then
13192: LD_VAR 0 3
13196: NOT
13197: IFFALSE 13201
// exit ;
13199: GO 13348
// if tmp > 5 then
13201: LD_VAR 0 3
13205: PUSH
13206: LD_INT 5
13208: GREATER
13209: IFFALSE 13221
// k := 5 else
13211: LD_ADDR_VAR 0 2
13215: PUSH
13216: LD_INT 5
13218: ST_TO_ADDR
13219: GO 13231
// k := tmp ;
13221: LD_ADDR_VAR 0 2
13225: PUSH
13226: LD_VAR 0 3
13230: ST_TO_ADDR
// for i := 1 to k do
13231: LD_ADDR_VAR 0 1
13235: PUSH
13236: DOUBLE
13237: LD_INT 1
13239: DEC
13240: ST_TO_ADDR
13241: LD_VAR 0 2
13245: PUSH
13246: FOR_TO
13247: IFFALSE 13346
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13249: LD_VAR 0 3
13253: PUSH
13254: LD_VAR 0 1
13258: ARRAY
13259: PPUSH
13260: LD_VAR 0 1
13264: PUSH
13265: LD_INT 4
13267: MOD
13268: PUSH
13269: LD_INT 1
13271: PLUS
13272: PPUSH
13273: CALL_OW 259
13277: PUSH
13278: LD_INT 10
13280: LESS
13281: IFFALSE 13344
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13283: LD_VAR 0 3
13287: PUSH
13288: LD_VAR 0 1
13292: ARRAY
13293: PPUSH
13294: LD_VAR 0 1
13298: PUSH
13299: LD_INT 4
13301: MOD
13302: PUSH
13303: LD_INT 1
13305: PLUS
13306: PPUSH
13307: LD_VAR 0 3
13311: PUSH
13312: LD_VAR 0 1
13316: ARRAY
13317: PPUSH
13318: LD_VAR 0 1
13322: PUSH
13323: LD_INT 4
13325: MOD
13326: PUSH
13327: LD_INT 1
13329: PLUS
13330: PPUSH
13331: CALL_OW 259
13335: PUSH
13336: LD_INT 1
13338: PLUS
13339: PPUSH
13340: CALL_OW 237
13344: GO 13246
13346: POP
13347: POP
// end ;
13348: PPOPN 3
13350: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13351: LD_EXP 24
13355: PUSH
13356: LD_EXP 32
13360: AND
13361: IFFALSE 13381
13363: GO 13365
13365: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13366: LD_INT 4
13368: PPUSH
13369: LD_OWVAR 2
13373: PPUSH
13374: LD_INT 0
13376: PPUSH
13377: CALL_OW 324
13381: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13382: LD_EXP 24
13386: PUSH
13387: LD_EXP 61
13391: AND
13392: IFFALSE 13412
13394: GO 13396
13396: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13397: LD_INT 19
13399: PPUSH
13400: LD_OWVAR 2
13404: PPUSH
13405: LD_INT 0
13407: PPUSH
13408: CALL_OW 324
13412: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13413: LD_EXP 24
13417: PUSH
13418: LD_EXP 33
13422: AND
13423: IFFALSE 13525
13425: GO 13427
13427: DISABLE
13428: LD_INT 0
13430: PPUSH
13431: PPUSH
// begin enable ;
13432: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13433: LD_ADDR_VAR 0 2
13437: PUSH
13438: LD_INT 22
13440: PUSH
13441: LD_OWVAR 2
13445: PUSH
13446: EMPTY
13447: LIST
13448: LIST
13449: PUSH
13450: LD_INT 2
13452: PUSH
13453: LD_INT 34
13455: PUSH
13456: LD_INT 11
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: PUSH
13463: LD_INT 34
13465: PUSH
13466: LD_INT 30
13468: PUSH
13469: EMPTY
13470: LIST
13471: LIST
13472: PUSH
13473: EMPTY
13474: LIST
13475: LIST
13476: LIST
13477: PUSH
13478: EMPTY
13479: LIST
13480: LIST
13481: PPUSH
13482: CALL_OW 69
13486: ST_TO_ADDR
// if not tmp then
13487: LD_VAR 0 2
13491: NOT
13492: IFFALSE 13496
// exit ;
13494: GO 13525
// for i in tmp do
13496: LD_ADDR_VAR 0 1
13500: PUSH
13501: LD_VAR 0 2
13505: PUSH
13506: FOR_IN
13507: IFFALSE 13523
// begin SetLives ( i , 0 ) ;
13509: LD_VAR 0 1
13513: PPUSH
13514: LD_INT 0
13516: PPUSH
13517: CALL_OW 234
// end ;
13521: GO 13506
13523: POP
13524: POP
// end ;
13525: PPOPN 2
13527: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13528: LD_EXP 24
13532: PUSH
13533: LD_EXP 34
13537: AND
13538: IFFALSE 13558
13540: GO 13542
13542: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13543: LD_INT 32
13545: PPUSH
13546: LD_OWVAR 2
13550: PPUSH
13551: LD_INT 0
13553: PPUSH
13554: CALL_OW 324
13558: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13559: LD_EXP 24
13563: PUSH
13564: LD_EXP 35
13568: AND
13569: IFFALSE 13750
13571: GO 13573
13573: DISABLE
13574: LD_INT 0
13576: PPUSH
13577: PPUSH
13578: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13579: LD_ADDR_VAR 0 2
13583: PUSH
13584: LD_INT 22
13586: PUSH
13587: LD_OWVAR 2
13591: PUSH
13592: EMPTY
13593: LIST
13594: LIST
13595: PUSH
13596: LD_INT 33
13598: PUSH
13599: LD_INT 3
13601: PUSH
13602: EMPTY
13603: LIST
13604: LIST
13605: PUSH
13606: EMPTY
13607: LIST
13608: LIST
13609: PPUSH
13610: CALL_OW 69
13614: ST_TO_ADDR
// if not tmp then
13615: LD_VAR 0 2
13619: NOT
13620: IFFALSE 13624
// exit ;
13622: GO 13750
// side := 0 ;
13624: LD_ADDR_VAR 0 3
13628: PUSH
13629: LD_INT 0
13631: ST_TO_ADDR
// for i := 1 to 8 do
13632: LD_ADDR_VAR 0 1
13636: PUSH
13637: DOUBLE
13638: LD_INT 1
13640: DEC
13641: ST_TO_ADDR
13642: LD_INT 8
13644: PUSH
13645: FOR_TO
13646: IFFALSE 13694
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
13648: LD_OWVAR 2
13652: PUSH
13653: LD_VAR 0 1
13657: NONEQUAL
13658: PUSH
13659: LD_OWVAR 2
13663: PPUSH
13664: LD_VAR 0 1
13668: PPUSH
13669: CALL_OW 81
13673: PUSH
13674: LD_INT 2
13676: EQUAL
13677: AND
13678: IFFALSE 13692
// begin side := i ;
13680: LD_ADDR_VAR 0 3
13684: PUSH
13685: LD_VAR 0 1
13689: ST_TO_ADDR
// break ;
13690: GO 13694
// end ;
13692: GO 13645
13694: POP
13695: POP
// if not side then
13696: LD_VAR 0 3
13700: NOT
13701: IFFALSE 13705
// exit ;
13703: GO 13750
// for i := 1 to tmp do
13705: LD_ADDR_VAR 0 1
13709: PUSH
13710: DOUBLE
13711: LD_INT 1
13713: DEC
13714: ST_TO_ADDR
13715: LD_VAR 0 2
13719: PUSH
13720: FOR_TO
13721: IFFALSE 13748
// if Prob ( 60 ) then
13723: LD_INT 60
13725: PPUSH
13726: CALL_OW 13
13730: IFFALSE 13746
// SetSide ( i , side ) ;
13732: LD_VAR 0 1
13736: PPUSH
13737: LD_VAR 0 3
13741: PPUSH
13742: CALL_OW 235
13746: GO 13720
13748: POP
13749: POP
// end ;
13750: PPOPN 3
13752: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
13753: LD_EXP 24
13757: PUSH
13758: LD_EXP 37
13762: AND
13763: IFFALSE 13882
13765: GO 13767
13767: DISABLE
13768: LD_INT 0
13770: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
13771: LD_ADDR_VAR 0 1
13775: PUSH
13776: LD_INT 22
13778: PUSH
13779: LD_OWVAR 2
13783: PUSH
13784: EMPTY
13785: LIST
13786: LIST
13787: PUSH
13788: LD_INT 21
13790: PUSH
13791: LD_INT 1
13793: PUSH
13794: EMPTY
13795: LIST
13796: LIST
13797: PUSH
13798: LD_INT 3
13800: PUSH
13801: LD_INT 23
13803: PUSH
13804: LD_INT 0
13806: PUSH
13807: EMPTY
13808: LIST
13809: LIST
13810: PUSH
13811: EMPTY
13812: LIST
13813: LIST
13814: PUSH
13815: EMPTY
13816: LIST
13817: LIST
13818: LIST
13819: PPUSH
13820: CALL_OW 69
13824: PUSH
13825: FOR_IN
13826: IFFALSE 13880
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
13828: LD_VAR 0 1
13832: PPUSH
13833: CALL_OW 257
13837: PUSH
13838: LD_INT 1
13840: PUSH
13841: LD_INT 2
13843: PUSH
13844: LD_INT 3
13846: PUSH
13847: LD_INT 4
13849: PUSH
13850: EMPTY
13851: LIST
13852: LIST
13853: LIST
13854: LIST
13855: IN
13856: IFFALSE 13878
// SetClass ( un , rand ( 1 , 4 ) ) ;
13858: LD_VAR 0 1
13862: PPUSH
13863: LD_INT 1
13865: PPUSH
13866: LD_INT 4
13868: PPUSH
13869: CALL_OW 12
13873: PPUSH
13874: CALL_OW 336
13878: GO 13825
13880: POP
13881: POP
// end ;
13882: PPOPN 1
13884: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
13885: LD_EXP 24
13889: PUSH
13890: LD_EXP 36
13894: AND
13895: IFFALSE 13974
13897: GO 13899
13899: DISABLE
13900: LD_INT 0
13902: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13903: LD_ADDR_VAR 0 1
13907: PUSH
13908: LD_INT 22
13910: PUSH
13911: LD_OWVAR 2
13915: PUSH
13916: EMPTY
13917: LIST
13918: LIST
13919: PUSH
13920: LD_INT 21
13922: PUSH
13923: LD_INT 3
13925: PUSH
13926: EMPTY
13927: LIST
13928: LIST
13929: PUSH
13930: EMPTY
13931: LIST
13932: LIST
13933: PPUSH
13934: CALL_OW 69
13938: ST_TO_ADDR
// if not tmp then
13939: LD_VAR 0 1
13943: NOT
13944: IFFALSE 13948
// exit ;
13946: GO 13974
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
13948: LD_VAR 0 1
13952: PUSH
13953: LD_INT 1
13955: PPUSH
13956: LD_VAR 0 1
13960: PPUSH
13961: CALL_OW 12
13965: ARRAY
13966: PPUSH
13967: LD_INT 100
13969: PPUSH
13970: CALL_OW 234
// end ;
13974: PPOPN 1
13976: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
13977: LD_EXP 24
13981: PUSH
13982: LD_EXP 38
13986: AND
13987: IFFALSE 14085
13989: GO 13991
13991: DISABLE
13992: LD_INT 0
13994: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13995: LD_ADDR_VAR 0 1
13999: PUSH
14000: LD_INT 22
14002: PUSH
14003: LD_OWVAR 2
14007: PUSH
14008: EMPTY
14009: LIST
14010: LIST
14011: PUSH
14012: LD_INT 21
14014: PUSH
14015: LD_INT 1
14017: PUSH
14018: EMPTY
14019: LIST
14020: LIST
14021: PUSH
14022: EMPTY
14023: LIST
14024: LIST
14025: PPUSH
14026: CALL_OW 69
14030: ST_TO_ADDR
// if not tmp then
14031: LD_VAR 0 1
14035: NOT
14036: IFFALSE 14040
// exit ;
14038: GO 14085
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14040: LD_VAR 0 1
14044: PUSH
14045: LD_INT 1
14047: PPUSH
14048: LD_VAR 0 1
14052: PPUSH
14053: CALL_OW 12
14057: ARRAY
14058: PPUSH
14059: LD_INT 1
14061: PPUSH
14062: LD_INT 4
14064: PPUSH
14065: CALL_OW 12
14069: PPUSH
14070: LD_INT 3000
14072: PPUSH
14073: LD_INT 9000
14075: PPUSH
14076: CALL_OW 12
14080: PPUSH
14081: CALL_OW 492
// end ;
14085: PPOPN 1
14087: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14088: LD_EXP 24
14092: PUSH
14093: LD_EXP 39
14097: AND
14098: IFFALSE 14118
14100: GO 14102
14102: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14103: LD_INT 1
14105: PPUSH
14106: LD_OWVAR 2
14110: PPUSH
14111: LD_INT 0
14113: PPUSH
14114: CALL_OW 324
14118: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14119: LD_EXP 24
14123: PUSH
14124: LD_EXP 40
14128: AND
14129: IFFALSE 14212
14131: GO 14133
14133: DISABLE
14134: LD_INT 0
14136: PPUSH
14137: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14138: LD_ADDR_VAR 0 2
14142: PUSH
14143: LD_INT 22
14145: PUSH
14146: LD_OWVAR 2
14150: PUSH
14151: EMPTY
14152: LIST
14153: LIST
14154: PUSH
14155: LD_INT 21
14157: PUSH
14158: LD_INT 3
14160: PUSH
14161: EMPTY
14162: LIST
14163: LIST
14164: PUSH
14165: EMPTY
14166: LIST
14167: LIST
14168: PPUSH
14169: CALL_OW 69
14173: ST_TO_ADDR
// if not tmp then
14174: LD_VAR 0 2
14178: NOT
14179: IFFALSE 14183
// exit ;
14181: GO 14212
// for i in tmp do
14183: LD_ADDR_VAR 0 1
14187: PUSH
14188: LD_VAR 0 2
14192: PUSH
14193: FOR_IN
14194: IFFALSE 14210
// SetBLevel ( i , 10 ) ;
14196: LD_VAR 0 1
14200: PPUSH
14201: LD_INT 10
14203: PPUSH
14204: CALL_OW 241
14208: GO 14193
14210: POP
14211: POP
// end ;
14212: PPOPN 2
14214: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14215: LD_EXP 24
14219: PUSH
14220: LD_EXP 41
14224: AND
14225: IFFALSE 14336
14227: GO 14229
14229: DISABLE
14230: LD_INT 0
14232: PPUSH
14233: PPUSH
14234: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14235: LD_ADDR_VAR 0 3
14239: PUSH
14240: LD_INT 22
14242: PUSH
14243: LD_OWVAR 2
14247: PUSH
14248: EMPTY
14249: LIST
14250: LIST
14251: PUSH
14252: LD_INT 25
14254: PUSH
14255: LD_INT 1
14257: PUSH
14258: EMPTY
14259: LIST
14260: LIST
14261: PUSH
14262: EMPTY
14263: LIST
14264: LIST
14265: PPUSH
14266: CALL_OW 69
14270: ST_TO_ADDR
// if not tmp then
14271: LD_VAR 0 3
14275: NOT
14276: IFFALSE 14280
// exit ;
14278: GO 14336
// un := tmp [ rand ( 1 , tmp ) ] ;
14280: LD_ADDR_VAR 0 2
14284: PUSH
14285: LD_VAR 0 3
14289: PUSH
14290: LD_INT 1
14292: PPUSH
14293: LD_VAR 0 3
14297: PPUSH
14298: CALL_OW 12
14302: ARRAY
14303: ST_TO_ADDR
// if Crawls ( un ) then
14304: LD_VAR 0 2
14308: PPUSH
14309: CALL_OW 318
14313: IFFALSE 14324
// ComWalk ( un ) ;
14315: LD_VAR 0 2
14319: PPUSH
14320: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14324: LD_VAR 0 2
14328: PPUSH
14329: LD_INT 5
14331: PPUSH
14332: CALL_OW 336
// end ;
14336: PPOPN 3
14338: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
14339: LD_EXP 24
14343: PUSH
14344: LD_EXP 42
14348: AND
14349: PUSH
14350: LD_OWVAR 67
14354: PUSH
14355: LD_INT 4
14357: LESS
14358: AND
14359: IFFALSE 14378
14361: GO 14363
14363: DISABLE
// begin Difficulty := Difficulty + 1 ;
14364: LD_ADDR_OWVAR 67
14368: PUSH
14369: LD_OWVAR 67
14373: PUSH
14374: LD_INT 1
14376: PLUS
14377: ST_TO_ADDR
// end ;
14378: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14379: LD_EXP 24
14383: PUSH
14384: LD_EXP 43
14388: AND
14389: IFFALSE 14492
14391: GO 14393
14393: DISABLE
14394: LD_INT 0
14396: PPUSH
// begin for i := 1 to 5 do
14397: LD_ADDR_VAR 0 1
14401: PUSH
14402: DOUBLE
14403: LD_INT 1
14405: DEC
14406: ST_TO_ADDR
14407: LD_INT 5
14409: PUSH
14410: FOR_TO
14411: IFFALSE 14490
// begin uc_nation := nation_nature ;
14413: LD_ADDR_OWVAR 21
14417: PUSH
14418: LD_INT 0
14420: ST_TO_ADDR
// uc_side := 0 ;
14421: LD_ADDR_OWVAR 20
14425: PUSH
14426: LD_INT 0
14428: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14429: LD_ADDR_OWVAR 29
14433: PUSH
14434: LD_INT 12
14436: PUSH
14437: LD_INT 12
14439: PUSH
14440: EMPTY
14441: LIST
14442: LIST
14443: ST_TO_ADDR
// hc_agressivity := 20 ;
14444: LD_ADDR_OWVAR 35
14448: PUSH
14449: LD_INT 20
14451: ST_TO_ADDR
// hc_class := class_tiger ;
14452: LD_ADDR_OWVAR 28
14456: PUSH
14457: LD_INT 14
14459: ST_TO_ADDR
// hc_gallery :=  ;
14460: LD_ADDR_OWVAR 33
14464: PUSH
14465: LD_STRING 
14467: ST_TO_ADDR
// hc_name :=  ;
14468: LD_ADDR_OWVAR 26
14472: PUSH
14473: LD_STRING 
14475: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14476: CALL_OW 44
14480: PPUSH
14481: LD_INT 0
14483: PPUSH
14484: CALL_OW 51
// end ;
14488: GO 14410
14490: POP
14491: POP
// end ;
14492: PPOPN 1
14494: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14495: LD_EXP 24
14499: PUSH
14500: LD_EXP 44
14504: AND
14505: IFFALSE 14514
14507: GO 14509
14509: DISABLE
// StreamSibBomb ;
14510: CALL 14515 0 0
14514: END
// export function StreamSibBomb ; var i , x , y ; begin
14515: LD_INT 0
14517: PPUSH
14518: PPUSH
14519: PPUSH
14520: PPUSH
// result := false ;
14521: LD_ADDR_VAR 0 1
14525: PUSH
14526: LD_INT 0
14528: ST_TO_ADDR
// for i := 1 to 16 do
14529: LD_ADDR_VAR 0 2
14533: PUSH
14534: DOUBLE
14535: LD_INT 1
14537: DEC
14538: ST_TO_ADDR
14539: LD_INT 16
14541: PUSH
14542: FOR_TO
14543: IFFALSE 14742
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14545: LD_ADDR_VAR 0 3
14549: PUSH
14550: LD_INT 10
14552: PUSH
14553: LD_INT 20
14555: PUSH
14556: LD_INT 30
14558: PUSH
14559: LD_INT 40
14561: PUSH
14562: LD_INT 50
14564: PUSH
14565: LD_INT 60
14567: PUSH
14568: LD_INT 70
14570: PUSH
14571: LD_INT 80
14573: PUSH
14574: LD_INT 90
14576: PUSH
14577: LD_INT 100
14579: PUSH
14580: LD_INT 110
14582: PUSH
14583: LD_INT 120
14585: PUSH
14586: LD_INT 130
14588: PUSH
14589: LD_INT 140
14591: PUSH
14592: LD_INT 150
14594: PUSH
14595: EMPTY
14596: LIST
14597: LIST
14598: LIST
14599: LIST
14600: LIST
14601: LIST
14602: LIST
14603: LIST
14604: LIST
14605: LIST
14606: LIST
14607: LIST
14608: LIST
14609: LIST
14610: LIST
14611: PUSH
14612: LD_INT 1
14614: PPUSH
14615: LD_INT 15
14617: PPUSH
14618: CALL_OW 12
14622: ARRAY
14623: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14624: LD_ADDR_VAR 0 4
14628: PUSH
14629: LD_INT 10
14631: PUSH
14632: LD_INT 20
14634: PUSH
14635: LD_INT 30
14637: PUSH
14638: LD_INT 40
14640: PUSH
14641: LD_INT 50
14643: PUSH
14644: LD_INT 60
14646: PUSH
14647: LD_INT 70
14649: PUSH
14650: LD_INT 80
14652: PUSH
14653: LD_INT 90
14655: PUSH
14656: LD_INT 100
14658: PUSH
14659: LD_INT 110
14661: PUSH
14662: LD_INT 120
14664: PUSH
14665: LD_INT 130
14667: PUSH
14668: LD_INT 140
14670: PUSH
14671: LD_INT 150
14673: PUSH
14674: EMPTY
14675: LIST
14676: LIST
14677: LIST
14678: LIST
14679: LIST
14680: LIST
14681: LIST
14682: LIST
14683: LIST
14684: LIST
14685: LIST
14686: LIST
14687: LIST
14688: LIST
14689: LIST
14690: PUSH
14691: LD_INT 1
14693: PPUSH
14694: LD_INT 15
14696: PPUSH
14697: CALL_OW 12
14701: ARRAY
14702: ST_TO_ADDR
// if ValidHex ( x , y ) then
14703: LD_VAR 0 3
14707: PPUSH
14708: LD_VAR 0 4
14712: PPUSH
14713: CALL_OW 488
14717: IFFALSE 14740
// begin result := [ x , y ] ;
14719: LD_ADDR_VAR 0 1
14723: PUSH
14724: LD_VAR 0 3
14728: PUSH
14729: LD_VAR 0 4
14733: PUSH
14734: EMPTY
14735: LIST
14736: LIST
14737: ST_TO_ADDR
// break ;
14738: GO 14742
// end ; end ;
14740: GO 14542
14742: POP
14743: POP
// if result then
14744: LD_VAR 0 1
14748: IFFALSE 14808
// begin ToLua ( playSibBomb() ) ;
14750: LD_STRING playSibBomb()
14752: PPUSH
14753: CALL_OW 559
// wait ( 0 0$14 ) ;
14757: LD_INT 490
14759: PPUSH
14760: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
14764: LD_VAR 0 1
14768: PUSH
14769: LD_INT 1
14771: ARRAY
14772: PPUSH
14773: LD_VAR 0 1
14777: PUSH
14778: LD_INT 2
14780: ARRAY
14781: PPUSH
14782: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
14786: LD_VAR 0 1
14790: PUSH
14791: LD_INT 1
14793: ARRAY
14794: PPUSH
14795: LD_VAR 0 1
14799: PUSH
14800: LD_INT 2
14802: ARRAY
14803: PPUSH
14804: CALL_OW 429
// end ; end ;
14808: LD_VAR 0 1
14812: RET
// every 0 0$1 trigger StreamModeActive and sReset do
14813: LD_EXP 24
14817: PUSH
14818: LD_EXP 46
14822: AND
14823: IFFALSE 14835
14825: GO 14827
14827: DISABLE
// YouLost (  ) ;
14828: LD_STRING 
14830: PPUSH
14831: CALL_OW 104
14835: END
// every 0 0$1 trigger StreamModeActive and sFog do
14836: LD_EXP 24
14840: PUSH
14841: LD_EXP 45
14845: AND
14846: IFFALSE 14860
14848: GO 14850
14850: DISABLE
// FogOff ( your_side ) ;
14851: LD_OWVAR 2
14855: PPUSH
14856: CALL_OW 344
14860: END
// every 0 0$1 trigger StreamModeActive and sSun do
14861: LD_EXP 24
14865: PUSH
14866: LD_EXP 47
14870: AND
14871: IFFALSE 14899
14873: GO 14875
14875: DISABLE
// begin solar_recharge_percent := 0 ;
14876: LD_ADDR_OWVAR 79
14880: PUSH
14881: LD_INT 0
14883: ST_TO_ADDR
// wait ( 5 5$00 ) ;
14884: LD_INT 10500
14886: PPUSH
14887: CALL_OW 67
// solar_recharge_percent := 100 ;
14891: LD_ADDR_OWVAR 79
14895: PUSH
14896: LD_INT 100
14898: ST_TO_ADDR
// end ;
14899: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14900: LD_EXP 24
14904: PUSH
14905: LD_EXP 48
14909: AND
14910: IFFALSE 15149
14912: GO 14914
14914: DISABLE
14915: LD_INT 0
14917: PPUSH
14918: PPUSH
14919: PPUSH
// begin tmp := [ ] ;
14920: LD_ADDR_VAR 0 3
14924: PUSH
14925: EMPTY
14926: ST_TO_ADDR
// for i := 1 to 6 do
14927: LD_ADDR_VAR 0 1
14931: PUSH
14932: DOUBLE
14933: LD_INT 1
14935: DEC
14936: ST_TO_ADDR
14937: LD_INT 6
14939: PUSH
14940: FOR_TO
14941: IFFALSE 15046
// begin uc_nation := nation_nature ;
14943: LD_ADDR_OWVAR 21
14947: PUSH
14948: LD_INT 0
14950: ST_TO_ADDR
// uc_side := 0 ;
14951: LD_ADDR_OWVAR 20
14955: PUSH
14956: LD_INT 0
14958: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14959: LD_ADDR_OWVAR 29
14963: PUSH
14964: LD_INT 12
14966: PUSH
14967: LD_INT 12
14969: PUSH
14970: EMPTY
14971: LIST
14972: LIST
14973: ST_TO_ADDR
// hc_agressivity := 20 ;
14974: LD_ADDR_OWVAR 35
14978: PUSH
14979: LD_INT 20
14981: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
14982: LD_ADDR_OWVAR 28
14986: PUSH
14987: LD_INT 17
14989: ST_TO_ADDR
// hc_gallery :=  ;
14990: LD_ADDR_OWVAR 33
14994: PUSH
14995: LD_STRING 
14997: ST_TO_ADDR
// hc_name :=  ;
14998: LD_ADDR_OWVAR 26
15002: PUSH
15003: LD_STRING 
15005: ST_TO_ADDR
// un := CreateHuman ;
15006: LD_ADDR_VAR 0 2
15010: PUSH
15011: CALL_OW 44
15015: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15016: LD_VAR 0 2
15020: PPUSH
15021: LD_INT 1
15023: PPUSH
15024: CALL_OW 51
// tmp := tmp ^ un ;
15028: LD_ADDR_VAR 0 3
15032: PUSH
15033: LD_VAR 0 3
15037: PUSH
15038: LD_VAR 0 2
15042: ADD
15043: ST_TO_ADDR
// end ;
15044: GO 14940
15046: POP
15047: POP
// repeat wait ( 0 0$1 ) ;
15048: LD_INT 35
15050: PPUSH
15051: CALL_OW 67
// for un in tmp do
15055: LD_ADDR_VAR 0 2
15059: PUSH
15060: LD_VAR 0 3
15064: PUSH
15065: FOR_IN
15066: IFFALSE 15140
// begin if IsDead ( un ) then
15068: LD_VAR 0 2
15072: PPUSH
15073: CALL_OW 301
15077: IFFALSE 15097
// begin tmp := tmp diff un ;
15079: LD_ADDR_VAR 0 3
15083: PUSH
15084: LD_VAR 0 3
15088: PUSH
15089: LD_VAR 0 2
15093: DIFF
15094: ST_TO_ADDR
// continue ;
15095: GO 15065
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15097: LD_VAR 0 2
15101: PPUSH
15102: LD_INT 3
15104: PUSH
15105: LD_INT 22
15107: PUSH
15108: LD_INT 0
15110: PUSH
15111: EMPTY
15112: LIST
15113: LIST
15114: PUSH
15115: EMPTY
15116: LIST
15117: LIST
15118: PPUSH
15119: CALL_OW 69
15123: PPUSH
15124: LD_VAR 0 2
15128: PPUSH
15129: CALL_OW 74
15133: PPUSH
15134: CALL_OW 115
// end ;
15138: GO 15065
15140: POP
15141: POP
// until not tmp ;
15142: LD_VAR 0 3
15146: NOT
15147: IFFALSE 15048
// end ;
15149: PPOPN 3
15151: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15152: LD_EXP 24
15156: PUSH
15157: LD_EXP 49
15161: AND
15162: IFFALSE 15216
15164: GO 15166
15166: DISABLE
// begin ToLua ( displayTroll(); ) ;
15167: LD_STRING displayTroll();
15169: PPUSH
15170: CALL_OW 559
// wait ( 3 3$00 ) ;
15174: LD_INT 6300
15176: PPUSH
15177: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15181: LD_STRING hideTroll();
15183: PPUSH
15184: CALL_OW 559
// wait ( 1 1$00 ) ;
15188: LD_INT 2100
15190: PPUSH
15191: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15195: LD_STRING displayTroll();
15197: PPUSH
15198: CALL_OW 559
// wait ( 1 1$00 ) ;
15202: LD_INT 2100
15204: PPUSH
15205: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15209: LD_STRING hideTroll();
15211: PPUSH
15212: CALL_OW 559
// end ;
15216: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15217: LD_EXP 24
15221: PUSH
15222: LD_EXP 50
15226: AND
15227: IFFALSE 15290
15229: GO 15231
15231: DISABLE
15232: LD_INT 0
15234: PPUSH
// begin p := 0 ;
15235: LD_ADDR_VAR 0 1
15239: PUSH
15240: LD_INT 0
15242: ST_TO_ADDR
// repeat game_speed := 1 ;
15243: LD_ADDR_OWVAR 65
15247: PUSH
15248: LD_INT 1
15250: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15251: LD_INT 35
15253: PPUSH
15254: CALL_OW 67
// p := p + 1 ;
15258: LD_ADDR_VAR 0 1
15262: PUSH
15263: LD_VAR 0 1
15267: PUSH
15268: LD_INT 1
15270: PLUS
15271: ST_TO_ADDR
// until p >= 60 ;
15272: LD_VAR 0 1
15276: PUSH
15277: LD_INT 60
15279: GREATEREQUAL
15280: IFFALSE 15243
// game_speed := 4 ;
15282: LD_ADDR_OWVAR 65
15286: PUSH
15287: LD_INT 4
15289: ST_TO_ADDR
// end ;
15290: PPOPN 1
15292: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15293: LD_EXP 24
15297: PUSH
15298: LD_EXP 51
15302: AND
15303: IFFALSE 15449
15305: GO 15307
15307: DISABLE
15308: LD_INT 0
15310: PPUSH
15311: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15312: LD_ADDR_VAR 0 1
15316: PUSH
15317: LD_INT 22
15319: PUSH
15320: LD_OWVAR 2
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: PUSH
15329: LD_INT 2
15331: PUSH
15332: LD_INT 30
15334: PUSH
15335: LD_INT 0
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: PUSH
15342: LD_INT 30
15344: PUSH
15345: LD_INT 1
15347: PUSH
15348: EMPTY
15349: LIST
15350: LIST
15351: PUSH
15352: EMPTY
15353: LIST
15354: LIST
15355: LIST
15356: PUSH
15357: EMPTY
15358: LIST
15359: LIST
15360: PPUSH
15361: CALL_OW 69
15365: ST_TO_ADDR
// if not depot then
15366: LD_VAR 0 1
15370: NOT
15371: IFFALSE 15375
// exit ;
15373: GO 15449
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15375: LD_ADDR_VAR 0 2
15379: PUSH
15380: LD_VAR 0 1
15384: PUSH
15385: LD_INT 1
15387: PPUSH
15388: LD_VAR 0 1
15392: PPUSH
15393: CALL_OW 12
15397: ARRAY
15398: PPUSH
15399: CALL_OW 274
15403: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15404: LD_VAR 0 2
15408: PPUSH
15409: LD_INT 1
15411: PPUSH
15412: LD_INT 0
15414: PPUSH
15415: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15419: LD_VAR 0 2
15423: PPUSH
15424: LD_INT 2
15426: PPUSH
15427: LD_INT 0
15429: PPUSH
15430: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15434: LD_VAR 0 2
15438: PPUSH
15439: LD_INT 3
15441: PPUSH
15442: LD_INT 0
15444: PPUSH
15445: CALL_OW 277
// end ;
15449: PPOPN 2
15451: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15452: LD_EXP 24
15456: PUSH
15457: LD_EXP 52
15461: AND
15462: IFFALSE 15559
15464: GO 15466
15466: DISABLE
15467: LD_INT 0
15469: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15470: LD_ADDR_VAR 0 1
15474: PUSH
15475: LD_INT 22
15477: PUSH
15478: LD_OWVAR 2
15482: PUSH
15483: EMPTY
15484: LIST
15485: LIST
15486: PUSH
15487: LD_INT 21
15489: PUSH
15490: LD_INT 1
15492: PUSH
15493: EMPTY
15494: LIST
15495: LIST
15496: PUSH
15497: LD_INT 3
15499: PUSH
15500: LD_INT 23
15502: PUSH
15503: LD_INT 0
15505: PUSH
15506: EMPTY
15507: LIST
15508: LIST
15509: PUSH
15510: EMPTY
15511: LIST
15512: LIST
15513: PUSH
15514: EMPTY
15515: LIST
15516: LIST
15517: LIST
15518: PPUSH
15519: CALL_OW 69
15523: ST_TO_ADDR
// if not tmp then
15524: LD_VAR 0 1
15528: NOT
15529: IFFALSE 15533
// exit ;
15531: GO 15559
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15533: LD_VAR 0 1
15537: PUSH
15538: LD_INT 1
15540: PPUSH
15541: LD_VAR 0 1
15545: PPUSH
15546: CALL_OW 12
15550: ARRAY
15551: PPUSH
15552: LD_INT 200
15554: PPUSH
15555: CALL_OW 234
// end ;
15559: PPOPN 1
15561: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15562: LD_EXP 24
15566: PUSH
15567: LD_EXP 53
15571: AND
15572: IFFALSE 15651
15574: GO 15576
15576: DISABLE
15577: LD_INT 0
15579: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15580: LD_ADDR_VAR 0 1
15584: PUSH
15585: LD_INT 22
15587: PUSH
15588: LD_OWVAR 2
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: PUSH
15597: LD_INT 21
15599: PUSH
15600: LD_INT 2
15602: PUSH
15603: EMPTY
15604: LIST
15605: LIST
15606: PUSH
15607: EMPTY
15608: LIST
15609: LIST
15610: PPUSH
15611: CALL_OW 69
15615: ST_TO_ADDR
// if not tmp then
15616: LD_VAR 0 1
15620: NOT
15621: IFFALSE 15625
// exit ;
15623: GO 15651
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15625: LD_VAR 0 1
15629: PUSH
15630: LD_INT 1
15632: PPUSH
15633: LD_VAR 0 1
15637: PPUSH
15638: CALL_OW 12
15642: ARRAY
15643: PPUSH
15644: LD_INT 60
15646: PPUSH
15647: CALL_OW 234
// end ;
15651: PPOPN 1
15653: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15654: LD_EXP 24
15658: PUSH
15659: LD_EXP 54
15663: AND
15664: IFFALSE 15763
15666: GO 15668
15668: DISABLE
15669: LD_INT 0
15671: PPUSH
15672: PPUSH
// begin enable ;
15673: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
15674: LD_ADDR_VAR 0 1
15678: PUSH
15679: LD_INT 22
15681: PUSH
15682: LD_OWVAR 2
15686: PUSH
15687: EMPTY
15688: LIST
15689: LIST
15690: PUSH
15691: LD_INT 61
15693: PUSH
15694: EMPTY
15695: LIST
15696: PUSH
15697: LD_INT 33
15699: PUSH
15700: LD_INT 2
15702: PUSH
15703: EMPTY
15704: LIST
15705: LIST
15706: PUSH
15707: EMPTY
15708: LIST
15709: LIST
15710: LIST
15711: PPUSH
15712: CALL_OW 69
15716: ST_TO_ADDR
// if not tmp then
15717: LD_VAR 0 1
15721: NOT
15722: IFFALSE 15726
// exit ;
15724: GO 15763
// for i in tmp do
15726: LD_ADDR_VAR 0 2
15730: PUSH
15731: LD_VAR 0 1
15735: PUSH
15736: FOR_IN
15737: IFFALSE 15761
// if IsControledBy ( i ) then
15739: LD_VAR 0 2
15743: PPUSH
15744: CALL_OW 312
15748: IFFALSE 15759
// ComUnlink ( i ) ;
15750: LD_VAR 0 2
15754: PPUSH
15755: CALL_OW 136
15759: GO 15736
15761: POP
15762: POP
// end ;
15763: PPOPN 2
15765: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
15766: LD_EXP 24
15770: PUSH
15771: LD_EXP 55
15775: AND
15776: IFFALSE 15916
15778: GO 15780
15780: DISABLE
15781: LD_INT 0
15783: PPUSH
15784: PPUSH
// begin ToLua ( displayPowell(); ) ;
15785: LD_STRING displayPowell();
15787: PPUSH
15788: CALL_OW 559
// uc_side := 0 ;
15792: LD_ADDR_OWVAR 20
15796: PUSH
15797: LD_INT 0
15799: ST_TO_ADDR
// uc_nation := 2 ;
15800: LD_ADDR_OWVAR 21
15804: PUSH
15805: LD_INT 2
15807: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
15808: LD_ADDR_OWVAR 37
15812: PUSH
15813: LD_INT 14
15815: ST_TO_ADDR
// vc_engine := engine_siberite ;
15816: LD_ADDR_OWVAR 39
15820: PUSH
15821: LD_INT 3
15823: ST_TO_ADDR
// vc_control := control_apeman ;
15824: LD_ADDR_OWVAR 38
15828: PUSH
15829: LD_INT 5
15831: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
15832: LD_ADDR_OWVAR 40
15836: PUSH
15837: LD_INT 29
15839: ST_TO_ADDR
// un := CreateVehicle ;
15840: LD_ADDR_VAR 0 2
15844: PUSH
15845: CALL_OW 45
15849: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15850: LD_VAR 0 2
15854: PPUSH
15855: LD_INT 1
15857: PPUSH
15858: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15862: LD_INT 35
15864: PPUSH
15865: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15869: LD_VAR 0 2
15873: PPUSH
15874: LD_INT 22
15876: PUSH
15877: LD_OWVAR 2
15881: PUSH
15882: EMPTY
15883: LIST
15884: LIST
15885: PPUSH
15886: CALL_OW 69
15890: PPUSH
15891: LD_VAR 0 2
15895: PPUSH
15896: CALL_OW 74
15900: PPUSH
15901: CALL_OW 115
// until IsDead ( un ) ;
15905: LD_VAR 0 2
15909: PPUSH
15910: CALL_OW 301
15914: IFFALSE 15862
// end ;
15916: PPOPN 2
15918: END
// every 0 0$1 trigger StreamModeActive and sStu do
15919: LD_EXP 24
15923: PUSH
15924: LD_EXP 63
15928: AND
15929: IFFALSE 15945
15931: GO 15933
15933: DISABLE
// begin ToLua ( displayStucuk(); ) ;
15934: LD_STRING displayStucuk();
15936: PPUSH
15937: CALL_OW 559
// ResetFog ;
15941: CALL_OW 335
// end ;
15945: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
15946: LD_EXP 24
15950: PUSH
15951: LD_EXP 56
15955: AND
15956: IFFALSE 16097
15958: GO 15960
15960: DISABLE
15961: LD_INT 0
15963: PPUSH
15964: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15965: LD_ADDR_VAR 0 2
15969: PUSH
15970: LD_INT 22
15972: PUSH
15973: LD_OWVAR 2
15977: PUSH
15978: EMPTY
15979: LIST
15980: LIST
15981: PUSH
15982: LD_INT 21
15984: PUSH
15985: LD_INT 1
15987: PUSH
15988: EMPTY
15989: LIST
15990: LIST
15991: PUSH
15992: EMPTY
15993: LIST
15994: LIST
15995: PPUSH
15996: CALL_OW 69
16000: ST_TO_ADDR
// if not tmp then
16001: LD_VAR 0 2
16005: NOT
16006: IFFALSE 16010
// exit ;
16008: GO 16097
// un := tmp [ rand ( 1 , tmp ) ] ;
16010: LD_ADDR_VAR 0 1
16014: PUSH
16015: LD_VAR 0 2
16019: PUSH
16020: LD_INT 1
16022: PPUSH
16023: LD_VAR 0 2
16027: PPUSH
16028: CALL_OW 12
16032: ARRAY
16033: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16034: LD_VAR 0 1
16038: PPUSH
16039: LD_INT 0
16041: PPUSH
16042: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16046: LD_VAR 0 1
16050: PPUSH
16051: LD_OWVAR 3
16055: PUSH
16056: LD_VAR 0 1
16060: DIFF
16061: PPUSH
16062: LD_VAR 0 1
16066: PPUSH
16067: CALL_OW 74
16071: PPUSH
16072: CALL_OW 115
// wait ( 0 0$20 ) ;
16076: LD_INT 700
16078: PPUSH
16079: CALL_OW 67
// SetSide ( un , your_side ) ;
16083: LD_VAR 0 1
16087: PPUSH
16088: LD_OWVAR 2
16092: PPUSH
16093: CALL_OW 235
// end ;
16097: PPOPN 2
16099: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16100: LD_EXP 24
16104: PUSH
16105: LD_EXP 57
16109: AND
16110: IFFALSE 16216
16112: GO 16114
16114: DISABLE
16115: LD_INT 0
16117: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16118: LD_ADDR_VAR 0 1
16122: PUSH
16123: LD_INT 22
16125: PUSH
16126: LD_OWVAR 2
16130: PUSH
16131: EMPTY
16132: LIST
16133: LIST
16134: PUSH
16135: LD_INT 2
16137: PUSH
16138: LD_INT 30
16140: PUSH
16141: LD_INT 0
16143: PUSH
16144: EMPTY
16145: LIST
16146: LIST
16147: PUSH
16148: LD_INT 30
16150: PUSH
16151: LD_INT 1
16153: PUSH
16154: EMPTY
16155: LIST
16156: LIST
16157: PUSH
16158: EMPTY
16159: LIST
16160: LIST
16161: LIST
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: PPUSH
16167: CALL_OW 69
16171: ST_TO_ADDR
// if not depot then
16172: LD_VAR 0 1
16176: NOT
16177: IFFALSE 16181
// exit ;
16179: GO 16216
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16181: LD_VAR 0 1
16185: PUSH
16186: LD_INT 1
16188: ARRAY
16189: PPUSH
16190: CALL_OW 250
16194: PPUSH
16195: LD_VAR 0 1
16199: PUSH
16200: LD_INT 1
16202: ARRAY
16203: PPUSH
16204: CALL_OW 251
16208: PPUSH
16209: LD_INT 70
16211: PPUSH
16212: CALL_OW 495
// end ;
16216: PPOPN 1
16218: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16219: LD_EXP 24
16223: PUSH
16224: LD_EXP 58
16228: AND
16229: IFFALSE 16440
16231: GO 16233
16233: DISABLE
16234: LD_INT 0
16236: PPUSH
16237: PPUSH
16238: PPUSH
16239: PPUSH
16240: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16241: LD_ADDR_VAR 0 5
16245: PUSH
16246: LD_INT 22
16248: PUSH
16249: LD_OWVAR 2
16253: PUSH
16254: EMPTY
16255: LIST
16256: LIST
16257: PUSH
16258: LD_INT 21
16260: PUSH
16261: LD_INT 1
16263: PUSH
16264: EMPTY
16265: LIST
16266: LIST
16267: PUSH
16268: EMPTY
16269: LIST
16270: LIST
16271: PPUSH
16272: CALL_OW 69
16276: ST_TO_ADDR
// if not tmp then
16277: LD_VAR 0 5
16281: NOT
16282: IFFALSE 16286
// exit ;
16284: GO 16440
// for i in tmp do
16286: LD_ADDR_VAR 0 1
16290: PUSH
16291: LD_VAR 0 5
16295: PUSH
16296: FOR_IN
16297: IFFALSE 16438
// begin d := rand ( 0 , 5 ) ;
16299: LD_ADDR_VAR 0 4
16303: PUSH
16304: LD_INT 0
16306: PPUSH
16307: LD_INT 5
16309: PPUSH
16310: CALL_OW 12
16314: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16315: LD_ADDR_VAR 0 2
16319: PUSH
16320: LD_VAR 0 1
16324: PPUSH
16325: CALL_OW 250
16329: PPUSH
16330: LD_VAR 0 4
16334: PPUSH
16335: LD_INT 3
16337: PPUSH
16338: LD_INT 12
16340: PPUSH
16341: CALL_OW 12
16345: PPUSH
16346: CALL_OW 272
16350: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16351: LD_ADDR_VAR 0 3
16355: PUSH
16356: LD_VAR 0 1
16360: PPUSH
16361: CALL_OW 251
16365: PPUSH
16366: LD_VAR 0 4
16370: PPUSH
16371: LD_INT 3
16373: PPUSH
16374: LD_INT 12
16376: PPUSH
16377: CALL_OW 12
16381: PPUSH
16382: CALL_OW 273
16386: ST_TO_ADDR
// if ValidHex ( x , y ) then
16387: LD_VAR 0 2
16391: PPUSH
16392: LD_VAR 0 3
16396: PPUSH
16397: CALL_OW 488
16401: IFFALSE 16436
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16403: LD_VAR 0 1
16407: PPUSH
16408: LD_VAR 0 2
16412: PPUSH
16413: LD_VAR 0 3
16417: PPUSH
16418: LD_INT 3
16420: PPUSH
16421: LD_INT 6
16423: PPUSH
16424: CALL_OW 12
16428: PPUSH
16429: LD_INT 1
16431: PPUSH
16432: CALL_OW 483
// end ;
16436: GO 16296
16438: POP
16439: POP
// end ;
16440: PPOPN 5
16442: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16443: LD_EXP 24
16447: PUSH
16448: LD_EXP 59
16452: AND
16453: IFFALSE 16547
16455: GO 16457
16457: DISABLE
16458: LD_INT 0
16460: PPUSH
16461: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16462: LD_ADDR_VAR 0 2
16466: PUSH
16467: LD_INT 22
16469: PUSH
16470: LD_OWVAR 2
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: PUSH
16479: LD_INT 32
16481: PUSH
16482: LD_INT 1
16484: PUSH
16485: EMPTY
16486: LIST
16487: LIST
16488: PUSH
16489: LD_INT 21
16491: PUSH
16492: LD_INT 2
16494: PUSH
16495: EMPTY
16496: LIST
16497: LIST
16498: PUSH
16499: EMPTY
16500: LIST
16501: LIST
16502: LIST
16503: PPUSH
16504: CALL_OW 69
16508: ST_TO_ADDR
// if not tmp then
16509: LD_VAR 0 2
16513: NOT
16514: IFFALSE 16518
// exit ;
16516: GO 16547
// for i in tmp do
16518: LD_ADDR_VAR 0 1
16522: PUSH
16523: LD_VAR 0 2
16527: PUSH
16528: FOR_IN
16529: IFFALSE 16545
// SetFuel ( i , 0 ) ;
16531: LD_VAR 0 1
16535: PPUSH
16536: LD_INT 0
16538: PPUSH
16539: CALL_OW 240
16543: GO 16528
16545: POP
16546: POP
// end ;
16547: PPOPN 2
16549: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16550: LD_EXP 24
16554: PUSH
16555: LD_EXP 60
16559: AND
16560: IFFALSE 16626
16562: GO 16564
16564: DISABLE
16565: LD_INT 0
16567: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16568: LD_ADDR_VAR 0 1
16572: PUSH
16573: LD_INT 22
16575: PUSH
16576: LD_OWVAR 2
16580: PUSH
16581: EMPTY
16582: LIST
16583: LIST
16584: PUSH
16585: LD_INT 30
16587: PUSH
16588: LD_INT 29
16590: PUSH
16591: EMPTY
16592: LIST
16593: LIST
16594: PUSH
16595: EMPTY
16596: LIST
16597: LIST
16598: PPUSH
16599: CALL_OW 69
16603: ST_TO_ADDR
// if not tmp then
16604: LD_VAR 0 1
16608: NOT
16609: IFFALSE 16613
// exit ;
16611: GO 16626
// DestroyUnit ( tmp [ 1 ] ) ;
16613: LD_VAR 0 1
16617: PUSH
16618: LD_INT 1
16620: ARRAY
16621: PPUSH
16622: CALL_OW 65
// end ;
16626: PPOPN 1
16628: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16629: LD_EXP 24
16633: PUSH
16634: LD_EXP 62
16638: AND
16639: IFFALSE 16768
16641: GO 16643
16643: DISABLE
16644: LD_INT 0
16646: PPUSH
// begin uc_side := 0 ;
16647: LD_ADDR_OWVAR 20
16651: PUSH
16652: LD_INT 0
16654: ST_TO_ADDR
// uc_nation := nation_arabian ;
16655: LD_ADDR_OWVAR 21
16659: PUSH
16660: LD_INT 2
16662: ST_TO_ADDR
// hc_gallery :=  ;
16663: LD_ADDR_OWVAR 33
16667: PUSH
16668: LD_STRING 
16670: ST_TO_ADDR
// hc_name :=  ;
16671: LD_ADDR_OWVAR 26
16675: PUSH
16676: LD_STRING 
16678: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
16679: LD_INT 1
16681: PPUSH
16682: LD_INT 11
16684: PPUSH
16685: LD_INT 10
16687: PPUSH
16688: CALL_OW 380
// un := CreateHuman ;
16692: LD_ADDR_VAR 0 1
16696: PUSH
16697: CALL_OW 44
16701: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16702: LD_VAR 0 1
16706: PPUSH
16707: LD_INT 1
16709: PPUSH
16710: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16714: LD_INT 35
16716: PPUSH
16717: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16721: LD_VAR 0 1
16725: PPUSH
16726: LD_INT 22
16728: PUSH
16729: LD_OWVAR 2
16733: PUSH
16734: EMPTY
16735: LIST
16736: LIST
16737: PPUSH
16738: CALL_OW 69
16742: PPUSH
16743: LD_VAR 0 1
16747: PPUSH
16748: CALL_OW 74
16752: PPUSH
16753: CALL_OW 115
// until IsDead ( un ) ;
16757: LD_VAR 0 1
16761: PPUSH
16762: CALL_OW 301
16766: IFFALSE 16714
// end ;
16768: PPOPN 1
16770: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
16771: LD_EXP 24
16775: PUSH
16776: LD_EXP 64
16780: AND
16781: IFFALSE 16793
16783: GO 16785
16785: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
16786: LD_STRING earthquake(getX(game), 0, 32)
16788: PPUSH
16789: CALL_OW 559
16793: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
16794: LD_EXP 24
16798: PUSH
16799: LD_EXP 65
16803: AND
16804: IFFALSE 16895
16806: GO 16808
16808: DISABLE
16809: LD_INT 0
16811: PPUSH
// begin enable ;
16812: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
16813: LD_ADDR_VAR 0 1
16817: PUSH
16818: LD_INT 22
16820: PUSH
16821: LD_OWVAR 2
16825: PUSH
16826: EMPTY
16827: LIST
16828: LIST
16829: PUSH
16830: LD_INT 21
16832: PUSH
16833: LD_INT 2
16835: PUSH
16836: EMPTY
16837: LIST
16838: LIST
16839: PUSH
16840: LD_INT 33
16842: PUSH
16843: LD_INT 3
16845: PUSH
16846: EMPTY
16847: LIST
16848: LIST
16849: PUSH
16850: EMPTY
16851: LIST
16852: LIST
16853: LIST
16854: PPUSH
16855: CALL_OW 69
16859: ST_TO_ADDR
// if not tmp then
16860: LD_VAR 0 1
16864: NOT
16865: IFFALSE 16869
// exit ;
16867: GO 16895
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16869: LD_VAR 0 1
16873: PUSH
16874: LD_INT 1
16876: PPUSH
16877: LD_VAR 0 1
16881: PPUSH
16882: CALL_OW 12
16886: ARRAY
16887: PPUSH
16888: LD_INT 1
16890: PPUSH
16891: CALL_OW 234
// end ;
16895: PPOPN 1
16897: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
16898: LD_EXP 24
16902: PUSH
16903: LD_EXP 66
16907: AND
16908: IFFALSE 17049
16910: GO 16912
16912: DISABLE
16913: LD_INT 0
16915: PPUSH
16916: PPUSH
16917: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16918: LD_ADDR_VAR 0 3
16922: PUSH
16923: LD_INT 22
16925: PUSH
16926: LD_OWVAR 2
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: PUSH
16935: LD_INT 25
16937: PUSH
16938: LD_INT 1
16940: PUSH
16941: EMPTY
16942: LIST
16943: LIST
16944: PUSH
16945: EMPTY
16946: LIST
16947: LIST
16948: PPUSH
16949: CALL_OW 69
16953: ST_TO_ADDR
// if not tmp then
16954: LD_VAR 0 3
16958: NOT
16959: IFFALSE 16963
// exit ;
16961: GO 17049
// un := tmp [ rand ( 1 , tmp ) ] ;
16963: LD_ADDR_VAR 0 2
16967: PUSH
16968: LD_VAR 0 3
16972: PUSH
16973: LD_INT 1
16975: PPUSH
16976: LD_VAR 0 3
16980: PPUSH
16981: CALL_OW 12
16985: ARRAY
16986: ST_TO_ADDR
// if Crawls ( un ) then
16987: LD_VAR 0 2
16991: PPUSH
16992: CALL_OW 318
16996: IFFALSE 17007
// ComWalk ( un ) ;
16998: LD_VAR 0 2
17002: PPUSH
17003: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17007: LD_VAR 0 2
17011: PPUSH
17012: LD_INT 9
17014: PPUSH
17015: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17019: LD_INT 28
17021: PPUSH
17022: LD_OWVAR 2
17026: PPUSH
17027: LD_INT 2
17029: PPUSH
17030: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17034: LD_INT 29
17036: PPUSH
17037: LD_OWVAR 2
17041: PPUSH
17042: LD_INT 2
17044: PPUSH
17045: CALL_OW 322
// end ;
17049: PPOPN 3
17051: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17052: LD_EXP 24
17056: PUSH
17057: LD_EXP 67
17061: AND
17062: IFFALSE 17173
17064: GO 17066
17066: DISABLE
17067: LD_INT 0
17069: PPUSH
17070: PPUSH
17071: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17072: LD_ADDR_VAR 0 3
17076: PUSH
17077: LD_INT 22
17079: PUSH
17080: LD_OWVAR 2
17084: PUSH
17085: EMPTY
17086: LIST
17087: LIST
17088: PUSH
17089: LD_INT 25
17091: PUSH
17092: LD_INT 1
17094: PUSH
17095: EMPTY
17096: LIST
17097: LIST
17098: PUSH
17099: EMPTY
17100: LIST
17101: LIST
17102: PPUSH
17103: CALL_OW 69
17107: ST_TO_ADDR
// if not tmp then
17108: LD_VAR 0 3
17112: NOT
17113: IFFALSE 17117
// exit ;
17115: GO 17173
// un := tmp [ rand ( 1 , tmp ) ] ;
17117: LD_ADDR_VAR 0 2
17121: PUSH
17122: LD_VAR 0 3
17126: PUSH
17127: LD_INT 1
17129: PPUSH
17130: LD_VAR 0 3
17134: PPUSH
17135: CALL_OW 12
17139: ARRAY
17140: ST_TO_ADDR
// if Crawls ( un ) then
17141: LD_VAR 0 2
17145: PPUSH
17146: CALL_OW 318
17150: IFFALSE 17161
// ComWalk ( un ) ;
17152: LD_VAR 0 2
17156: PPUSH
17157: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17161: LD_VAR 0 2
17165: PPUSH
17166: LD_INT 8
17168: PPUSH
17169: CALL_OW 336
// end ;
17173: PPOPN 3
17175: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17176: LD_EXP 24
17180: PUSH
17181: LD_EXP 68
17185: AND
17186: IFFALSE 17330
17188: GO 17190
17190: DISABLE
17191: LD_INT 0
17193: PPUSH
17194: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17195: LD_ADDR_VAR 0 2
17199: PUSH
17200: LD_INT 22
17202: PUSH
17203: LD_OWVAR 2
17207: PUSH
17208: EMPTY
17209: LIST
17210: LIST
17211: PUSH
17212: LD_INT 21
17214: PUSH
17215: LD_INT 2
17217: PUSH
17218: EMPTY
17219: LIST
17220: LIST
17221: PUSH
17222: LD_INT 2
17224: PUSH
17225: LD_INT 34
17227: PUSH
17228: LD_INT 12
17230: PUSH
17231: EMPTY
17232: LIST
17233: LIST
17234: PUSH
17235: LD_INT 34
17237: PUSH
17238: LD_INT 51
17240: PUSH
17241: EMPTY
17242: LIST
17243: LIST
17244: PUSH
17245: LD_INT 34
17247: PUSH
17248: LD_INT 32
17250: PUSH
17251: EMPTY
17252: LIST
17253: LIST
17254: PUSH
17255: EMPTY
17256: LIST
17257: LIST
17258: LIST
17259: LIST
17260: PUSH
17261: EMPTY
17262: LIST
17263: LIST
17264: LIST
17265: PPUSH
17266: CALL_OW 69
17270: ST_TO_ADDR
// if not tmp then
17271: LD_VAR 0 2
17275: NOT
17276: IFFALSE 17280
// exit ;
17278: GO 17330
// for i in tmp do
17280: LD_ADDR_VAR 0 1
17284: PUSH
17285: LD_VAR 0 2
17289: PUSH
17290: FOR_IN
17291: IFFALSE 17328
// if GetCargo ( i , mat_artifact ) = 0 then
17293: LD_VAR 0 1
17297: PPUSH
17298: LD_INT 4
17300: PPUSH
17301: CALL_OW 289
17305: PUSH
17306: LD_INT 0
17308: EQUAL
17309: IFFALSE 17326
// SetCargo ( i , mat_siberit , 100 ) ;
17311: LD_VAR 0 1
17315: PPUSH
17316: LD_INT 3
17318: PPUSH
17319: LD_INT 100
17321: PPUSH
17322: CALL_OW 290
17326: GO 17290
17328: POP
17329: POP
// end ;
17330: PPOPN 2
17332: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17333: LD_EXP 24
17337: PUSH
17338: LD_EXP 69
17342: AND
17343: IFFALSE 17526
17345: GO 17347
17347: DISABLE
17348: LD_INT 0
17350: PPUSH
17351: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17352: LD_ADDR_VAR 0 2
17356: PUSH
17357: LD_INT 22
17359: PUSH
17360: LD_OWVAR 2
17364: PUSH
17365: EMPTY
17366: LIST
17367: LIST
17368: PPUSH
17369: CALL_OW 69
17373: ST_TO_ADDR
// if not tmp then
17374: LD_VAR 0 2
17378: NOT
17379: IFFALSE 17383
// exit ;
17381: GO 17526
// for i := 1 to 2 do
17383: LD_ADDR_VAR 0 1
17387: PUSH
17388: DOUBLE
17389: LD_INT 1
17391: DEC
17392: ST_TO_ADDR
17393: LD_INT 2
17395: PUSH
17396: FOR_TO
17397: IFFALSE 17524
// begin uc_side := your_side ;
17399: LD_ADDR_OWVAR 20
17403: PUSH
17404: LD_OWVAR 2
17408: ST_TO_ADDR
// uc_nation := nation_american ;
17409: LD_ADDR_OWVAR 21
17413: PUSH
17414: LD_INT 1
17416: ST_TO_ADDR
// vc_chassis := us_morphling ;
17417: LD_ADDR_OWVAR 37
17421: PUSH
17422: LD_INT 5
17424: ST_TO_ADDR
// vc_engine := engine_siberite ;
17425: LD_ADDR_OWVAR 39
17429: PUSH
17430: LD_INT 3
17432: ST_TO_ADDR
// vc_control := control_computer ;
17433: LD_ADDR_OWVAR 38
17437: PUSH
17438: LD_INT 3
17440: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17441: LD_ADDR_OWVAR 40
17445: PUSH
17446: LD_INT 10
17448: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17449: LD_VAR 0 2
17453: PUSH
17454: LD_INT 1
17456: ARRAY
17457: PPUSH
17458: CALL_OW 310
17462: NOT
17463: IFFALSE 17510
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17465: CALL_OW 45
17469: PPUSH
17470: LD_VAR 0 2
17474: PUSH
17475: LD_INT 1
17477: ARRAY
17478: PPUSH
17479: CALL_OW 250
17483: PPUSH
17484: LD_VAR 0 2
17488: PUSH
17489: LD_INT 1
17491: ARRAY
17492: PPUSH
17493: CALL_OW 251
17497: PPUSH
17498: LD_INT 12
17500: PPUSH
17501: LD_INT 1
17503: PPUSH
17504: CALL_OW 50
17508: GO 17522
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17510: CALL_OW 45
17514: PPUSH
17515: LD_INT 1
17517: PPUSH
17518: CALL_OW 51
// end ;
17522: GO 17396
17524: POP
17525: POP
// end ;
17526: PPOPN 2
17528: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17529: LD_EXP 24
17533: PUSH
17534: LD_EXP 70
17538: AND
17539: IFFALSE 17761
17541: GO 17543
17543: DISABLE
17544: LD_INT 0
17546: PPUSH
17547: PPUSH
17548: PPUSH
17549: PPUSH
17550: PPUSH
17551: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17552: LD_ADDR_VAR 0 6
17556: PUSH
17557: LD_INT 22
17559: PUSH
17560: LD_OWVAR 2
17564: PUSH
17565: EMPTY
17566: LIST
17567: LIST
17568: PUSH
17569: LD_INT 21
17571: PUSH
17572: LD_INT 1
17574: PUSH
17575: EMPTY
17576: LIST
17577: LIST
17578: PUSH
17579: LD_INT 3
17581: PUSH
17582: LD_INT 23
17584: PUSH
17585: LD_INT 0
17587: PUSH
17588: EMPTY
17589: LIST
17590: LIST
17591: PUSH
17592: EMPTY
17593: LIST
17594: LIST
17595: PUSH
17596: EMPTY
17597: LIST
17598: LIST
17599: LIST
17600: PPUSH
17601: CALL_OW 69
17605: ST_TO_ADDR
// if not tmp then
17606: LD_VAR 0 6
17610: NOT
17611: IFFALSE 17615
// exit ;
17613: GO 17761
// s1 := rand ( 1 , 4 ) ;
17615: LD_ADDR_VAR 0 2
17619: PUSH
17620: LD_INT 1
17622: PPUSH
17623: LD_INT 4
17625: PPUSH
17626: CALL_OW 12
17630: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17631: LD_ADDR_VAR 0 4
17635: PUSH
17636: LD_VAR 0 6
17640: PUSH
17641: LD_INT 1
17643: ARRAY
17644: PPUSH
17645: LD_VAR 0 2
17649: PPUSH
17650: CALL_OW 259
17654: ST_TO_ADDR
// if s1 = 1 then
17655: LD_VAR 0 2
17659: PUSH
17660: LD_INT 1
17662: EQUAL
17663: IFFALSE 17683
// s2 := rand ( 2 , 4 ) else
17665: LD_ADDR_VAR 0 3
17669: PUSH
17670: LD_INT 2
17672: PPUSH
17673: LD_INT 4
17675: PPUSH
17676: CALL_OW 12
17680: ST_TO_ADDR
17681: GO 17691
// s2 := 1 ;
17683: LD_ADDR_VAR 0 3
17687: PUSH
17688: LD_INT 1
17690: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
17691: LD_ADDR_VAR 0 5
17695: PUSH
17696: LD_VAR 0 6
17700: PUSH
17701: LD_INT 1
17703: ARRAY
17704: PPUSH
17705: LD_VAR 0 3
17709: PPUSH
17710: CALL_OW 259
17714: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
17715: LD_VAR 0 6
17719: PUSH
17720: LD_INT 1
17722: ARRAY
17723: PPUSH
17724: LD_VAR 0 2
17728: PPUSH
17729: LD_VAR 0 5
17733: PPUSH
17734: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
17738: LD_VAR 0 6
17742: PUSH
17743: LD_INT 1
17745: ARRAY
17746: PPUSH
17747: LD_VAR 0 3
17751: PPUSH
17752: LD_VAR 0 4
17756: PPUSH
17757: CALL_OW 237
// end ;
17761: PPOPN 6
17763: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
17764: LD_EXP 24
17768: PUSH
17769: LD_EXP 71
17773: AND
17774: IFFALSE 17853
17776: GO 17778
17778: DISABLE
17779: LD_INT 0
17781: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
17782: LD_ADDR_VAR 0 1
17786: PUSH
17787: LD_INT 22
17789: PUSH
17790: LD_OWVAR 2
17794: PUSH
17795: EMPTY
17796: LIST
17797: LIST
17798: PUSH
17799: LD_INT 30
17801: PUSH
17802: LD_INT 3
17804: PUSH
17805: EMPTY
17806: LIST
17807: LIST
17808: PUSH
17809: EMPTY
17810: LIST
17811: LIST
17812: PPUSH
17813: CALL_OW 69
17817: ST_TO_ADDR
// if not tmp then
17818: LD_VAR 0 1
17822: NOT
17823: IFFALSE 17827
// exit ;
17825: GO 17853
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17827: LD_VAR 0 1
17831: PUSH
17832: LD_INT 1
17834: PPUSH
17835: LD_VAR 0 1
17839: PPUSH
17840: CALL_OW 12
17844: ARRAY
17845: PPUSH
17846: LD_INT 1
17848: PPUSH
17849: CALL_OW 234
// end ;
17853: PPOPN 1
17855: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17856: LD_EXP 24
17860: PUSH
17861: LD_EXP 72
17865: AND
17866: IFFALSE 17978
17868: GO 17870
17870: DISABLE
17871: LD_INT 0
17873: PPUSH
17874: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
17875: LD_ADDR_VAR 0 2
17879: PUSH
17880: LD_INT 22
17882: PUSH
17883: LD_OWVAR 2
17887: PUSH
17888: EMPTY
17889: LIST
17890: LIST
17891: PUSH
17892: LD_INT 2
17894: PUSH
17895: LD_INT 30
17897: PUSH
17898: LD_INT 27
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: PUSH
17905: LD_INT 30
17907: PUSH
17908: LD_INT 26
17910: PUSH
17911: EMPTY
17912: LIST
17913: LIST
17914: PUSH
17915: LD_INT 30
17917: PUSH
17918: LD_INT 28
17920: PUSH
17921: EMPTY
17922: LIST
17923: LIST
17924: PUSH
17925: EMPTY
17926: LIST
17927: LIST
17928: LIST
17929: LIST
17930: PUSH
17931: EMPTY
17932: LIST
17933: LIST
17934: PPUSH
17935: CALL_OW 69
17939: ST_TO_ADDR
// if not tmp then
17940: LD_VAR 0 2
17944: NOT
17945: IFFALSE 17949
// exit ;
17947: GO 17978
// for i in tmp do
17949: LD_ADDR_VAR 0 1
17953: PUSH
17954: LD_VAR 0 2
17958: PUSH
17959: FOR_IN
17960: IFFALSE 17976
// SetLives ( i , 1 ) ;
17962: LD_VAR 0 1
17966: PPUSH
17967: LD_INT 1
17969: PPUSH
17970: CALL_OW 234
17974: GO 17959
17976: POP
17977: POP
// end ;
17978: PPOPN 2
17980: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
17981: LD_EXP 24
17985: PUSH
17986: LD_EXP 73
17990: AND
17991: IFFALSE 18278
17993: GO 17995
17995: DISABLE
17996: LD_INT 0
17998: PPUSH
17999: PPUSH
18000: PPUSH
// begin i := rand ( 1 , 7 ) ;
18001: LD_ADDR_VAR 0 1
18005: PUSH
18006: LD_INT 1
18008: PPUSH
18009: LD_INT 7
18011: PPUSH
18012: CALL_OW 12
18016: ST_TO_ADDR
// case i of 1 :
18017: LD_VAR 0 1
18021: PUSH
18022: LD_INT 1
18024: DOUBLE
18025: EQUAL
18026: IFTRUE 18030
18028: GO 18040
18030: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18031: LD_STRING earthquake(getX(game), 0, 32)
18033: PPUSH
18034: CALL_OW 559
18038: GO 18278
18040: LD_INT 2
18042: DOUBLE
18043: EQUAL
18044: IFTRUE 18048
18046: GO 18062
18048: POP
// begin ToLua ( displayStucuk(); ) ;
18049: LD_STRING displayStucuk();
18051: PPUSH
18052: CALL_OW 559
// ResetFog ;
18056: CALL_OW 335
// end ; 3 :
18060: GO 18278
18062: LD_INT 3
18064: DOUBLE
18065: EQUAL
18066: IFTRUE 18070
18068: GO 18174
18070: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18071: LD_ADDR_VAR 0 2
18075: PUSH
18076: LD_INT 22
18078: PUSH
18079: LD_OWVAR 2
18083: PUSH
18084: EMPTY
18085: LIST
18086: LIST
18087: PUSH
18088: LD_INT 25
18090: PUSH
18091: LD_INT 1
18093: PUSH
18094: EMPTY
18095: LIST
18096: LIST
18097: PUSH
18098: EMPTY
18099: LIST
18100: LIST
18101: PPUSH
18102: CALL_OW 69
18106: ST_TO_ADDR
// if not tmp then
18107: LD_VAR 0 2
18111: NOT
18112: IFFALSE 18116
// exit ;
18114: GO 18278
// un := tmp [ rand ( 1 , tmp ) ] ;
18116: LD_ADDR_VAR 0 3
18120: PUSH
18121: LD_VAR 0 2
18125: PUSH
18126: LD_INT 1
18128: PPUSH
18129: LD_VAR 0 2
18133: PPUSH
18134: CALL_OW 12
18138: ARRAY
18139: ST_TO_ADDR
// if Crawls ( un ) then
18140: LD_VAR 0 3
18144: PPUSH
18145: CALL_OW 318
18149: IFFALSE 18160
// ComWalk ( un ) ;
18151: LD_VAR 0 3
18155: PPUSH
18156: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18160: LD_VAR 0 3
18164: PPUSH
18165: LD_INT 8
18167: PPUSH
18168: CALL_OW 336
// end ; 4 :
18172: GO 18278
18174: LD_INT 4
18176: DOUBLE
18177: EQUAL
18178: IFTRUE 18182
18180: GO 18256
18182: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18183: LD_ADDR_VAR 0 2
18187: PUSH
18188: LD_INT 22
18190: PUSH
18191: LD_OWVAR 2
18195: PUSH
18196: EMPTY
18197: LIST
18198: LIST
18199: PUSH
18200: LD_INT 30
18202: PUSH
18203: LD_INT 29
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: PPUSH
18214: CALL_OW 69
18218: ST_TO_ADDR
// if not tmp then
18219: LD_VAR 0 2
18223: NOT
18224: IFFALSE 18228
// exit ;
18226: GO 18278
// CenterNowOnUnits ( tmp [ 1 ] ) ;
18228: LD_VAR 0 2
18232: PUSH
18233: LD_INT 1
18235: ARRAY
18236: PPUSH
18237: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
18241: LD_VAR 0 2
18245: PUSH
18246: LD_INT 1
18248: ARRAY
18249: PPUSH
18250: CALL_OW 65
// end ; 5 .. 7 :
18254: GO 18278
18256: LD_INT 5
18258: DOUBLE
18259: GREATEREQUAL
18260: IFFALSE 18268
18262: LD_INT 7
18264: DOUBLE
18265: LESSEQUAL
18266: IFTRUE 18270
18268: GO 18277
18270: POP
// StreamSibBomb ; end ;
18271: CALL 14515 0 0
18275: GO 18278
18277: POP
// end ;
18278: PPOPN 3
18280: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18281: LD_EXP 24
18285: PUSH
18286: LD_EXP 74
18290: AND
18291: IFFALSE 18447
18293: GO 18295
18295: DISABLE
18296: LD_INT 0
18298: PPUSH
18299: PPUSH
18300: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18301: LD_ADDR_VAR 0 2
18305: PUSH
18306: LD_INT 81
18308: PUSH
18309: LD_OWVAR 2
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: PUSH
18318: LD_INT 2
18320: PUSH
18321: LD_INT 21
18323: PUSH
18324: LD_INT 1
18326: PUSH
18327: EMPTY
18328: LIST
18329: LIST
18330: PUSH
18331: LD_INT 21
18333: PUSH
18334: LD_INT 2
18336: PUSH
18337: EMPTY
18338: LIST
18339: LIST
18340: PUSH
18341: EMPTY
18342: LIST
18343: LIST
18344: LIST
18345: PUSH
18346: EMPTY
18347: LIST
18348: LIST
18349: PPUSH
18350: CALL_OW 69
18354: ST_TO_ADDR
// if not tmp then
18355: LD_VAR 0 2
18359: NOT
18360: IFFALSE 18364
// exit ;
18362: GO 18447
// p := 0 ;
18364: LD_ADDR_VAR 0 3
18368: PUSH
18369: LD_INT 0
18371: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18372: LD_INT 35
18374: PPUSH
18375: CALL_OW 67
// p := p + 1 ;
18379: LD_ADDR_VAR 0 3
18383: PUSH
18384: LD_VAR 0 3
18388: PUSH
18389: LD_INT 1
18391: PLUS
18392: ST_TO_ADDR
// for i in tmp do
18393: LD_ADDR_VAR 0 1
18397: PUSH
18398: LD_VAR 0 2
18402: PUSH
18403: FOR_IN
18404: IFFALSE 18435
// if GetLives ( i ) < 1000 then
18406: LD_VAR 0 1
18410: PPUSH
18411: CALL_OW 256
18415: PUSH
18416: LD_INT 1000
18418: LESS
18419: IFFALSE 18433
// SetLives ( i , 1000 ) ;
18421: LD_VAR 0 1
18425: PPUSH
18426: LD_INT 1000
18428: PPUSH
18429: CALL_OW 234
18433: GO 18403
18435: POP
18436: POP
// until p > 20 ;
18437: LD_VAR 0 3
18441: PUSH
18442: LD_INT 20
18444: GREATER
18445: IFFALSE 18372
// end ;
18447: PPOPN 3
18449: END
// every 0 0$1 trigger StreamModeActive and sTime do
18450: LD_EXP 24
18454: PUSH
18455: LD_EXP 75
18459: AND
18460: IFFALSE 18495
18462: GO 18464
18464: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18465: LD_INT 28
18467: PPUSH
18468: LD_OWVAR 2
18472: PPUSH
18473: LD_INT 2
18475: PPUSH
18476: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18480: LD_INT 30
18482: PPUSH
18483: LD_OWVAR 2
18487: PPUSH
18488: LD_INT 2
18490: PPUSH
18491: CALL_OW 322
// end ;
18495: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18496: LD_EXP 24
18500: PUSH
18501: LD_EXP 76
18505: AND
18506: IFFALSE 18627
18508: GO 18510
18510: DISABLE
18511: LD_INT 0
18513: PPUSH
18514: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18515: LD_ADDR_VAR 0 2
18519: PUSH
18520: LD_INT 22
18522: PUSH
18523: LD_OWVAR 2
18527: PUSH
18528: EMPTY
18529: LIST
18530: LIST
18531: PUSH
18532: LD_INT 21
18534: PUSH
18535: LD_INT 1
18537: PUSH
18538: EMPTY
18539: LIST
18540: LIST
18541: PUSH
18542: LD_INT 3
18544: PUSH
18545: LD_INT 23
18547: PUSH
18548: LD_INT 0
18550: PUSH
18551: EMPTY
18552: LIST
18553: LIST
18554: PUSH
18555: EMPTY
18556: LIST
18557: LIST
18558: PUSH
18559: EMPTY
18560: LIST
18561: LIST
18562: LIST
18563: PPUSH
18564: CALL_OW 69
18568: ST_TO_ADDR
// if not tmp then
18569: LD_VAR 0 2
18573: NOT
18574: IFFALSE 18578
// exit ;
18576: GO 18627
// for i in tmp do
18578: LD_ADDR_VAR 0 1
18582: PUSH
18583: LD_VAR 0 2
18587: PUSH
18588: FOR_IN
18589: IFFALSE 18625
// begin if Crawls ( i ) then
18591: LD_VAR 0 1
18595: PPUSH
18596: CALL_OW 318
18600: IFFALSE 18611
// ComWalk ( i ) ;
18602: LD_VAR 0 1
18606: PPUSH
18607: CALL_OW 138
// SetClass ( i , 2 ) ;
18611: LD_VAR 0 1
18615: PPUSH
18616: LD_INT 2
18618: PPUSH
18619: CALL_OW 336
// end ;
18623: GO 18588
18625: POP
18626: POP
// end ;
18627: PPOPN 2
18629: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18630: LD_EXP 24
18634: PUSH
18635: LD_EXP 77
18639: AND
18640: IFFALSE 18928
18642: GO 18644
18644: DISABLE
18645: LD_INT 0
18647: PPUSH
18648: PPUSH
18649: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18650: LD_OWVAR 2
18654: PPUSH
18655: LD_INT 9
18657: PPUSH
18658: LD_INT 1
18660: PPUSH
18661: LD_INT 1
18663: PPUSH
18664: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
18668: LD_INT 9
18670: PPUSH
18671: LD_OWVAR 2
18675: PPUSH
18676: CALL_OW 343
// uc_side := 9 ;
18680: LD_ADDR_OWVAR 20
18684: PUSH
18685: LD_INT 9
18687: ST_TO_ADDR
// uc_nation := 2 ;
18688: LD_ADDR_OWVAR 21
18692: PUSH
18693: LD_INT 2
18695: ST_TO_ADDR
// hc_name := Dark Warrior ;
18696: LD_ADDR_OWVAR 26
18700: PUSH
18701: LD_STRING Dark Warrior
18703: ST_TO_ADDR
// hc_gallery :=  ;
18704: LD_ADDR_OWVAR 33
18708: PUSH
18709: LD_STRING 
18711: ST_TO_ADDR
// hc_noskilllimit := true ;
18712: LD_ADDR_OWVAR 76
18716: PUSH
18717: LD_INT 1
18719: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
18720: LD_ADDR_OWVAR 31
18724: PUSH
18725: LD_INT 30
18727: PUSH
18728: LD_INT 30
18730: PUSH
18731: LD_INT 30
18733: PUSH
18734: LD_INT 30
18736: PUSH
18737: EMPTY
18738: LIST
18739: LIST
18740: LIST
18741: LIST
18742: ST_TO_ADDR
// un := CreateHuman ;
18743: LD_ADDR_VAR 0 3
18747: PUSH
18748: CALL_OW 44
18752: ST_TO_ADDR
// hc_noskilllimit := false ;
18753: LD_ADDR_OWVAR 76
18757: PUSH
18758: LD_INT 0
18760: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18761: LD_VAR 0 3
18765: PPUSH
18766: LD_INT 1
18768: PPUSH
18769: CALL_OW 51
// ToLua ( playRanger() ) ;
18773: LD_STRING playRanger()
18775: PPUSH
18776: CALL_OW 559
// p := 0 ;
18780: LD_ADDR_VAR 0 2
18784: PUSH
18785: LD_INT 0
18787: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18788: LD_INT 35
18790: PPUSH
18791: CALL_OW 67
// p := p + 1 ;
18795: LD_ADDR_VAR 0 2
18799: PUSH
18800: LD_VAR 0 2
18804: PUSH
18805: LD_INT 1
18807: PLUS
18808: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
18809: LD_VAR 0 3
18813: PPUSH
18814: CALL_OW 256
18818: PUSH
18819: LD_INT 1000
18821: LESS
18822: IFFALSE 18836
// SetLives ( un , 1000 ) ;
18824: LD_VAR 0 3
18828: PPUSH
18829: LD_INT 1000
18831: PPUSH
18832: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
18836: LD_VAR 0 3
18840: PPUSH
18841: LD_INT 81
18843: PUSH
18844: LD_OWVAR 2
18848: PUSH
18849: EMPTY
18850: LIST
18851: LIST
18852: PUSH
18853: LD_INT 91
18855: PUSH
18856: LD_VAR 0 3
18860: PUSH
18861: LD_INT 30
18863: PUSH
18864: EMPTY
18865: LIST
18866: LIST
18867: LIST
18868: PUSH
18869: EMPTY
18870: LIST
18871: LIST
18872: PPUSH
18873: CALL_OW 69
18877: PPUSH
18878: LD_VAR 0 3
18882: PPUSH
18883: CALL_OW 74
18887: PPUSH
18888: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
18892: LD_VAR 0 2
18896: PUSH
18897: LD_INT 80
18899: GREATER
18900: PUSH
18901: LD_VAR 0 3
18905: PPUSH
18906: CALL_OW 301
18910: OR
18911: IFFALSE 18788
// if un then
18913: LD_VAR 0 3
18917: IFFALSE 18928
// RemoveUnit ( un ) ;
18919: LD_VAR 0 3
18923: PPUSH
18924: CALL_OW 64
// end ;
18928: PPOPN 3
18930: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
18931: LD_EXP 78
18935: IFFALSE 19051
18937: GO 18939
18939: DISABLE
18940: LD_INT 0
18942: PPUSH
18943: PPUSH
18944: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18945: LD_ADDR_VAR 0 2
18949: PUSH
18950: LD_INT 81
18952: PUSH
18953: LD_OWVAR 2
18957: PUSH
18958: EMPTY
18959: LIST
18960: LIST
18961: PUSH
18962: LD_INT 21
18964: PUSH
18965: LD_INT 1
18967: PUSH
18968: EMPTY
18969: LIST
18970: LIST
18971: PUSH
18972: EMPTY
18973: LIST
18974: LIST
18975: PPUSH
18976: CALL_OW 69
18980: ST_TO_ADDR
// ToLua ( playComputer() ) ;
18981: LD_STRING playComputer()
18983: PPUSH
18984: CALL_OW 559
// if not tmp then
18988: LD_VAR 0 2
18992: NOT
18993: IFFALSE 18997
// exit ;
18995: GO 19051
// for i in tmp do
18997: LD_ADDR_VAR 0 1
19001: PUSH
19002: LD_VAR 0 2
19006: PUSH
19007: FOR_IN
19008: IFFALSE 19049
// for j := 1 to 4 do
19010: LD_ADDR_VAR 0 3
19014: PUSH
19015: DOUBLE
19016: LD_INT 1
19018: DEC
19019: ST_TO_ADDR
19020: LD_INT 4
19022: PUSH
19023: FOR_TO
19024: IFFALSE 19045
// SetSkill ( i , j , 10 ) ;
19026: LD_VAR 0 1
19030: PPUSH
19031: LD_VAR 0 3
19035: PPUSH
19036: LD_INT 10
19038: PPUSH
19039: CALL_OW 237
19043: GO 19023
19045: POP
19046: POP
19047: GO 19007
19049: POP
19050: POP
// end ;
19051: PPOPN 3
19053: END
// every 0 0$1 trigger s30 do var i , tmp ;
19054: LD_EXP 79
19058: IFFALSE 19127
19060: GO 19062
19062: DISABLE
19063: LD_INT 0
19065: PPUSH
19066: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19067: LD_ADDR_VAR 0 2
19071: PUSH
19072: LD_INT 22
19074: PUSH
19075: LD_OWVAR 2
19079: PUSH
19080: EMPTY
19081: LIST
19082: LIST
19083: PPUSH
19084: CALL_OW 69
19088: ST_TO_ADDR
// if not tmp then
19089: LD_VAR 0 2
19093: NOT
19094: IFFALSE 19098
// exit ;
19096: GO 19127
// for i in tmp do
19098: LD_ADDR_VAR 0 1
19102: PUSH
19103: LD_VAR 0 2
19107: PUSH
19108: FOR_IN
19109: IFFALSE 19125
// SetLives ( i , 300 ) ;
19111: LD_VAR 0 1
19115: PPUSH
19116: LD_INT 300
19118: PPUSH
19119: CALL_OW 234
19123: GO 19108
19125: POP
19126: POP
// end ;
19127: PPOPN 2
19129: END
// every 0 0$1 trigger s60 do var i , tmp ;
19130: LD_EXP 80
19134: IFFALSE 19203
19136: GO 19138
19138: DISABLE
19139: LD_INT 0
19141: PPUSH
19142: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19143: LD_ADDR_VAR 0 2
19147: PUSH
19148: LD_INT 22
19150: PUSH
19151: LD_OWVAR 2
19155: PUSH
19156: EMPTY
19157: LIST
19158: LIST
19159: PPUSH
19160: CALL_OW 69
19164: ST_TO_ADDR
// if not tmp then
19165: LD_VAR 0 2
19169: NOT
19170: IFFALSE 19174
// exit ;
19172: GO 19203
// for i in tmp do
19174: LD_ADDR_VAR 0 1
19178: PUSH
19179: LD_VAR 0 2
19183: PUSH
19184: FOR_IN
19185: IFFALSE 19201
// SetLives ( i , 600 ) ;
19187: LD_VAR 0 1
19191: PPUSH
19192: LD_INT 600
19194: PPUSH
19195: CALL_OW 234
19199: GO 19184
19201: POP
19202: POP
// end ;
19203: PPOPN 2
19205: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19206: LD_INT 0
19208: PPUSH
// case cmd of 301 :
19209: LD_VAR 0 1
19213: PUSH
19214: LD_INT 301
19216: DOUBLE
19217: EQUAL
19218: IFTRUE 19222
19220: GO 19254
19222: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19223: LD_VAR 0 6
19227: PPUSH
19228: LD_VAR 0 7
19232: PPUSH
19233: LD_VAR 0 8
19237: PPUSH
19238: LD_VAR 0 4
19242: PPUSH
19243: LD_VAR 0 5
19247: PPUSH
19248: CALL 20455 0 5
19252: GO 19375
19254: LD_INT 302
19256: DOUBLE
19257: EQUAL
19258: IFTRUE 19262
19260: GO 19299
19262: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19263: LD_VAR 0 6
19267: PPUSH
19268: LD_VAR 0 7
19272: PPUSH
19273: LD_VAR 0 8
19277: PPUSH
19278: LD_VAR 0 9
19282: PPUSH
19283: LD_VAR 0 4
19287: PPUSH
19288: LD_VAR 0 5
19292: PPUSH
19293: CALL 20546 0 6
19297: GO 19375
19299: LD_INT 303
19301: DOUBLE
19302: EQUAL
19303: IFTRUE 19307
19305: GO 19344
19307: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
19308: LD_VAR 0 6
19312: PPUSH
19313: LD_VAR 0 7
19317: PPUSH
19318: LD_VAR 0 8
19322: PPUSH
19323: LD_VAR 0 9
19327: PPUSH
19328: LD_VAR 0 4
19332: PPUSH
19333: LD_VAR 0 5
19337: PPUSH
19338: CALL 19380 0 6
19342: GO 19375
19344: LD_INT 304
19346: DOUBLE
19347: EQUAL
19348: IFTRUE 19352
19350: GO 19374
19352: POP
// hHackTeleport ( unit , x , y ) ; end ;
19353: LD_VAR 0 2
19357: PPUSH
19358: LD_VAR 0 4
19362: PPUSH
19363: LD_VAR 0 5
19367: PPUSH
19368: CALL 21139 0 3
19372: GO 19375
19374: POP
// end ;
19375: LD_VAR 0 12
19379: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
19380: LD_INT 0
19382: PPUSH
19383: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
19384: LD_VAR 0 1
19388: PUSH
19389: LD_INT 1
19391: LESS
19392: PUSH
19393: LD_VAR 0 1
19397: PUSH
19398: LD_INT 3
19400: GREATER
19401: OR
19402: PUSH
19403: LD_VAR 0 5
19407: PPUSH
19408: LD_VAR 0 6
19412: PPUSH
19413: CALL_OW 428
19417: OR
19418: IFFALSE 19422
// exit ;
19420: GO 20142
// uc_side := your_side ;
19422: LD_ADDR_OWVAR 20
19426: PUSH
19427: LD_OWVAR 2
19431: ST_TO_ADDR
// uc_nation := nation ;
19432: LD_ADDR_OWVAR 21
19436: PUSH
19437: LD_VAR 0 1
19441: ST_TO_ADDR
// bc_level = 1 ;
19442: LD_ADDR_OWVAR 43
19446: PUSH
19447: LD_INT 1
19449: ST_TO_ADDR
// case btype of 1 :
19450: LD_VAR 0 2
19454: PUSH
19455: LD_INT 1
19457: DOUBLE
19458: EQUAL
19459: IFTRUE 19463
19461: GO 19474
19463: POP
// bc_type := b_depot ; 2 :
19464: LD_ADDR_OWVAR 42
19468: PUSH
19469: LD_INT 0
19471: ST_TO_ADDR
19472: GO 20086
19474: LD_INT 2
19476: DOUBLE
19477: EQUAL
19478: IFTRUE 19482
19480: GO 19493
19482: POP
// bc_type := b_warehouse ; 3 :
19483: LD_ADDR_OWVAR 42
19487: PUSH
19488: LD_INT 1
19490: ST_TO_ADDR
19491: GO 20086
19493: LD_INT 3
19495: DOUBLE
19496: EQUAL
19497: IFTRUE 19501
19499: GO 19512
19501: POP
// bc_type := b_lab ; 4 .. 9 :
19502: LD_ADDR_OWVAR 42
19506: PUSH
19507: LD_INT 6
19509: ST_TO_ADDR
19510: GO 20086
19512: LD_INT 4
19514: DOUBLE
19515: GREATEREQUAL
19516: IFFALSE 19524
19518: LD_INT 9
19520: DOUBLE
19521: LESSEQUAL
19522: IFTRUE 19526
19524: GO 19578
19526: POP
// begin bc_type := b_lab_half ;
19527: LD_ADDR_OWVAR 42
19531: PUSH
19532: LD_INT 7
19534: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
19535: LD_ADDR_OWVAR 44
19539: PUSH
19540: LD_INT 10
19542: PUSH
19543: LD_INT 11
19545: PUSH
19546: LD_INT 12
19548: PUSH
19549: LD_INT 15
19551: PUSH
19552: LD_INT 14
19554: PUSH
19555: LD_INT 13
19557: PUSH
19558: EMPTY
19559: LIST
19560: LIST
19561: LIST
19562: LIST
19563: LIST
19564: LIST
19565: PUSH
19566: LD_VAR 0 2
19570: PUSH
19571: LD_INT 3
19573: MINUS
19574: ARRAY
19575: ST_TO_ADDR
// end ; 10 .. 13 :
19576: GO 20086
19578: LD_INT 10
19580: DOUBLE
19581: GREATEREQUAL
19582: IFFALSE 19590
19584: LD_INT 13
19586: DOUBLE
19587: LESSEQUAL
19588: IFTRUE 19592
19590: GO 19669
19592: POP
// begin bc_type := b_lab_full ;
19593: LD_ADDR_OWVAR 42
19597: PUSH
19598: LD_INT 8
19600: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
19601: LD_ADDR_OWVAR 44
19605: PUSH
19606: LD_INT 10
19608: PUSH
19609: LD_INT 12
19611: PUSH
19612: LD_INT 14
19614: PUSH
19615: LD_INT 13
19617: PUSH
19618: EMPTY
19619: LIST
19620: LIST
19621: LIST
19622: LIST
19623: PUSH
19624: LD_VAR 0 2
19628: PUSH
19629: LD_INT 9
19631: MINUS
19632: ARRAY
19633: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
19634: LD_ADDR_OWVAR 45
19638: PUSH
19639: LD_INT 11
19641: PUSH
19642: LD_INT 15
19644: PUSH
19645: LD_INT 12
19647: PUSH
19648: LD_INT 15
19650: PUSH
19651: EMPTY
19652: LIST
19653: LIST
19654: LIST
19655: LIST
19656: PUSH
19657: LD_VAR 0 2
19661: PUSH
19662: LD_INT 9
19664: MINUS
19665: ARRAY
19666: ST_TO_ADDR
// end ; 14 :
19667: GO 20086
19669: LD_INT 14
19671: DOUBLE
19672: EQUAL
19673: IFTRUE 19677
19675: GO 19688
19677: POP
// bc_type := b_workshop ; 15 :
19678: LD_ADDR_OWVAR 42
19682: PUSH
19683: LD_INT 2
19685: ST_TO_ADDR
19686: GO 20086
19688: LD_INT 15
19690: DOUBLE
19691: EQUAL
19692: IFTRUE 19696
19694: GO 19707
19696: POP
// bc_type := b_factory ; 16 :
19697: LD_ADDR_OWVAR 42
19701: PUSH
19702: LD_INT 3
19704: ST_TO_ADDR
19705: GO 20086
19707: LD_INT 16
19709: DOUBLE
19710: EQUAL
19711: IFTRUE 19715
19713: GO 19726
19715: POP
// bc_type := b_ext_gun ; 17 :
19716: LD_ADDR_OWVAR 42
19720: PUSH
19721: LD_INT 17
19723: ST_TO_ADDR
19724: GO 20086
19726: LD_INT 17
19728: DOUBLE
19729: EQUAL
19730: IFTRUE 19734
19732: GO 19762
19734: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
19735: LD_ADDR_OWVAR 42
19739: PUSH
19740: LD_INT 19
19742: PUSH
19743: LD_INT 23
19745: PUSH
19746: LD_INT 19
19748: PUSH
19749: EMPTY
19750: LIST
19751: LIST
19752: LIST
19753: PUSH
19754: LD_VAR 0 1
19758: ARRAY
19759: ST_TO_ADDR
19760: GO 20086
19762: LD_INT 18
19764: DOUBLE
19765: EQUAL
19766: IFTRUE 19770
19768: GO 19781
19770: POP
// bc_type := b_ext_radar ; 19 :
19771: LD_ADDR_OWVAR 42
19775: PUSH
19776: LD_INT 20
19778: ST_TO_ADDR
19779: GO 20086
19781: LD_INT 19
19783: DOUBLE
19784: EQUAL
19785: IFTRUE 19789
19787: GO 19800
19789: POP
// bc_type := b_ext_radio ; 20 :
19790: LD_ADDR_OWVAR 42
19794: PUSH
19795: LD_INT 22
19797: ST_TO_ADDR
19798: GO 20086
19800: LD_INT 20
19802: DOUBLE
19803: EQUAL
19804: IFTRUE 19808
19806: GO 19819
19808: POP
// bc_type := b_ext_siberium ; 21 :
19809: LD_ADDR_OWVAR 42
19813: PUSH
19814: LD_INT 21
19816: ST_TO_ADDR
19817: GO 20086
19819: LD_INT 21
19821: DOUBLE
19822: EQUAL
19823: IFTRUE 19827
19825: GO 19838
19827: POP
// bc_type := b_ext_computer ; 22 :
19828: LD_ADDR_OWVAR 42
19832: PUSH
19833: LD_INT 24
19835: ST_TO_ADDR
19836: GO 20086
19838: LD_INT 22
19840: DOUBLE
19841: EQUAL
19842: IFTRUE 19846
19844: GO 19857
19846: POP
// bc_type := b_ext_track ; 23 :
19847: LD_ADDR_OWVAR 42
19851: PUSH
19852: LD_INT 16
19854: ST_TO_ADDR
19855: GO 20086
19857: LD_INT 23
19859: DOUBLE
19860: EQUAL
19861: IFTRUE 19865
19863: GO 19876
19865: POP
// bc_type := b_ext_laser ; 24 :
19866: LD_ADDR_OWVAR 42
19870: PUSH
19871: LD_INT 25
19873: ST_TO_ADDR
19874: GO 20086
19876: LD_INT 24
19878: DOUBLE
19879: EQUAL
19880: IFTRUE 19884
19882: GO 19895
19884: POP
// bc_type := b_control_tower ; 25 :
19885: LD_ADDR_OWVAR 42
19889: PUSH
19890: LD_INT 36
19892: ST_TO_ADDR
19893: GO 20086
19895: LD_INT 25
19897: DOUBLE
19898: EQUAL
19899: IFTRUE 19903
19901: GO 19914
19903: POP
// bc_type := b_breastwork ; 26 :
19904: LD_ADDR_OWVAR 42
19908: PUSH
19909: LD_INT 31
19911: ST_TO_ADDR
19912: GO 20086
19914: LD_INT 26
19916: DOUBLE
19917: EQUAL
19918: IFTRUE 19922
19920: GO 19933
19922: POP
// bc_type := b_bunker ; 27 :
19923: LD_ADDR_OWVAR 42
19927: PUSH
19928: LD_INT 32
19930: ST_TO_ADDR
19931: GO 20086
19933: LD_INT 27
19935: DOUBLE
19936: EQUAL
19937: IFTRUE 19941
19939: GO 19952
19941: POP
// bc_type := b_turret ; 28 :
19942: LD_ADDR_OWVAR 42
19946: PUSH
19947: LD_INT 33
19949: ST_TO_ADDR
19950: GO 20086
19952: LD_INT 28
19954: DOUBLE
19955: EQUAL
19956: IFTRUE 19960
19958: GO 19971
19960: POP
// bc_type := b_armoury ; 29 :
19961: LD_ADDR_OWVAR 42
19965: PUSH
19966: LD_INT 4
19968: ST_TO_ADDR
19969: GO 20086
19971: LD_INT 29
19973: DOUBLE
19974: EQUAL
19975: IFTRUE 19979
19977: GO 19990
19979: POP
// bc_type := b_barracks ; 30 :
19980: LD_ADDR_OWVAR 42
19984: PUSH
19985: LD_INT 5
19987: ST_TO_ADDR
19988: GO 20086
19990: LD_INT 30
19992: DOUBLE
19993: EQUAL
19994: IFTRUE 19998
19996: GO 20009
19998: POP
// bc_type := b_solar_power ; 31 :
19999: LD_ADDR_OWVAR 42
20003: PUSH
20004: LD_INT 27
20006: ST_TO_ADDR
20007: GO 20086
20009: LD_INT 31
20011: DOUBLE
20012: EQUAL
20013: IFTRUE 20017
20015: GO 20028
20017: POP
// bc_type := b_oil_power ; 32 :
20018: LD_ADDR_OWVAR 42
20022: PUSH
20023: LD_INT 26
20025: ST_TO_ADDR
20026: GO 20086
20028: LD_INT 32
20030: DOUBLE
20031: EQUAL
20032: IFTRUE 20036
20034: GO 20047
20036: POP
// bc_type := b_siberite_power ; 33 :
20037: LD_ADDR_OWVAR 42
20041: PUSH
20042: LD_INT 28
20044: ST_TO_ADDR
20045: GO 20086
20047: LD_INT 33
20049: DOUBLE
20050: EQUAL
20051: IFTRUE 20055
20053: GO 20066
20055: POP
// bc_type := b_oil_mine ; 34 :
20056: LD_ADDR_OWVAR 42
20060: PUSH
20061: LD_INT 29
20063: ST_TO_ADDR
20064: GO 20086
20066: LD_INT 34
20068: DOUBLE
20069: EQUAL
20070: IFTRUE 20074
20072: GO 20085
20074: POP
// bc_type := b_siberite_mine ; end ;
20075: LD_ADDR_OWVAR 42
20079: PUSH
20080: LD_INT 30
20082: ST_TO_ADDR
20083: GO 20086
20085: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20086: LD_ADDR_VAR 0 8
20090: PUSH
20091: LD_VAR 0 5
20095: PPUSH
20096: LD_VAR 0 6
20100: PPUSH
20101: LD_VAR 0 3
20105: PPUSH
20106: CALL_OW 47
20110: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20111: LD_OWVAR 42
20115: PUSH
20116: LD_INT 32
20118: PUSH
20119: LD_INT 33
20121: PUSH
20122: EMPTY
20123: LIST
20124: LIST
20125: IN
20126: IFFALSE 20142
// PlaceWeaponTurret ( b , weapon ) ;
20128: LD_VAR 0 8
20132: PPUSH
20133: LD_VAR 0 4
20137: PPUSH
20138: CALL_OW 431
// end ;
20142: LD_VAR 0 7
20146: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20147: LD_INT 0
20149: PPUSH
20150: PPUSH
20151: PPUSH
20152: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20153: LD_ADDR_VAR 0 4
20157: PUSH
20158: LD_INT 22
20160: PUSH
20161: LD_OWVAR 2
20165: PUSH
20166: EMPTY
20167: LIST
20168: LIST
20169: PUSH
20170: LD_INT 2
20172: PUSH
20173: LD_INT 30
20175: PUSH
20176: LD_INT 0
20178: PUSH
20179: EMPTY
20180: LIST
20181: LIST
20182: PUSH
20183: LD_INT 30
20185: PUSH
20186: LD_INT 1
20188: PUSH
20189: EMPTY
20190: LIST
20191: LIST
20192: PUSH
20193: EMPTY
20194: LIST
20195: LIST
20196: LIST
20197: PUSH
20198: EMPTY
20199: LIST
20200: LIST
20201: PPUSH
20202: CALL_OW 69
20206: ST_TO_ADDR
// if not tmp then
20207: LD_VAR 0 4
20211: NOT
20212: IFFALSE 20216
// exit ;
20214: GO 20275
// for i in tmp do
20216: LD_ADDR_VAR 0 2
20220: PUSH
20221: LD_VAR 0 4
20225: PUSH
20226: FOR_IN
20227: IFFALSE 20273
// for j = 1 to 3 do
20229: LD_ADDR_VAR 0 3
20233: PUSH
20234: DOUBLE
20235: LD_INT 1
20237: DEC
20238: ST_TO_ADDR
20239: LD_INT 3
20241: PUSH
20242: FOR_TO
20243: IFFALSE 20269
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20245: LD_VAR 0 2
20249: PPUSH
20250: CALL_OW 274
20254: PPUSH
20255: LD_VAR 0 3
20259: PPUSH
20260: LD_INT 99999
20262: PPUSH
20263: CALL_OW 277
20267: GO 20242
20269: POP
20270: POP
20271: GO 20226
20273: POP
20274: POP
// end ;
20275: LD_VAR 0 1
20279: RET
// export function hHackSetLevel10 ; var i , j ; begin
20280: LD_INT 0
20282: PPUSH
20283: PPUSH
20284: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20285: LD_ADDR_VAR 0 2
20289: PUSH
20290: LD_INT 21
20292: PUSH
20293: LD_INT 1
20295: PUSH
20296: EMPTY
20297: LIST
20298: LIST
20299: PPUSH
20300: CALL_OW 69
20304: PUSH
20305: FOR_IN
20306: IFFALSE 20358
// if IsSelected ( i ) then
20308: LD_VAR 0 2
20312: PPUSH
20313: CALL_OW 306
20317: IFFALSE 20356
// begin for j := 1 to 4 do
20319: LD_ADDR_VAR 0 3
20323: PUSH
20324: DOUBLE
20325: LD_INT 1
20327: DEC
20328: ST_TO_ADDR
20329: LD_INT 4
20331: PUSH
20332: FOR_TO
20333: IFFALSE 20354
// SetSkill ( i , j , 10 ) ;
20335: LD_VAR 0 2
20339: PPUSH
20340: LD_VAR 0 3
20344: PPUSH
20345: LD_INT 10
20347: PPUSH
20348: CALL_OW 237
20352: GO 20332
20354: POP
20355: POP
// end ;
20356: GO 20305
20358: POP
20359: POP
// end ;
20360: LD_VAR 0 1
20364: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
20365: LD_INT 0
20367: PPUSH
20368: PPUSH
20369: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20370: LD_ADDR_VAR 0 2
20374: PUSH
20375: LD_INT 22
20377: PUSH
20378: LD_OWVAR 2
20382: PUSH
20383: EMPTY
20384: LIST
20385: LIST
20386: PUSH
20387: LD_INT 21
20389: PUSH
20390: LD_INT 1
20392: PUSH
20393: EMPTY
20394: LIST
20395: LIST
20396: PUSH
20397: EMPTY
20398: LIST
20399: LIST
20400: PPUSH
20401: CALL_OW 69
20405: PUSH
20406: FOR_IN
20407: IFFALSE 20448
// begin for j := 1 to 4 do
20409: LD_ADDR_VAR 0 3
20413: PUSH
20414: DOUBLE
20415: LD_INT 1
20417: DEC
20418: ST_TO_ADDR
20419: LD_INT 4
20421: PUSH
20422: FOR_TO
20423: IFFALSE 20444
// SetSkill ( i , j , 10 ) ;
20425: LD_VAR 0 2
20429: PPUSH
20430: LD_VAR 0 3
20434: PPUSH
20435: LD_INT 10
20437: PPUSH
20438: CALL_OW 237
20442: GO 20422
20444: POP
20445: POP
// end ;
20446: GO 20406
20448: POP
20449: POP
// end ;
20450: LD_VAR 0 1
20454: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
20455: LD_INT 0
20457: PPUSH
// uc_side := your_side ;
20458: LD_ADDR_OWVAR 20
20462: PUSH
20463: LD_OWVAR 2
20467: ST_TO_ADDR
// uc_nation := nation ;
20468: LD_ADDR_OWVAR 21
20472: PUSH
20473: LD_VAR 0 1
20477: ST_TO_ADDR
// InitHc ;
20478: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
20482: LD_INT 0
20484: PPUSH
20485: LD_VAR 0 2
20489: PPUSH
20490: LD_VAR 0 3
20494: PPUSH
20495: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
20499: LD_VAR 0 4
20503: PPUSH
20504: LD_VAR 0 5
20508: PPUSH
20509: CALL_OW 428
20513: PUSH
20514: LD_INT 0
20516: EQUAL
20517: IFFALSE 20541
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
20519: CALL_OW 44
20523: PPUSH
20524: LD_VAR 0 4
20528: PPUSH
20529: LD_VAR 0 5
20533: PPUSH
20534: LD_INT 1
20536: PPUSH
20537: CALL_OW 48
// end ;
20541: LD_VAR 0 6
20545: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
20546: LD_INT 0
20548: PPUSH
20549: PPUSH
// uc_side := your_side ;
20550: LD_ADDR_OWVAR 20
20554: PUSH
20555: LD_OWVAR 2
20559: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
20560: LD_VAR 0 1
20564: PUSH
20565: LD_INT 1
20567: PUSH
20568: LD_INT 2
20570: PUSH
20571: LD_INT 3
20573: PUSH
20574: LD_INT 4
20576: PUSH
20577: LD_INT 5
20579: PUSH
20580: EMPTY
20581: LIST
20582: LIST
20583: LIST
20584: LIST
20585: LIST
20586: IN
20587: IFFALSE 20599
// uc_nation := nation_american else
20589: LD_ADDR_OWVAR 21
20593: PUSH
20594: LD_INT 1
20596: ST_TO_ADDR
20597: GO 20642
// if chassis in [ 11 , 12 , 13 , 14 ] then
20599: LD_VAR 0 1
20603: PUSH
20604: LD_INT 11
20606: PUSH
20607: LD_INT 12
20609: PUSH
20610: LD_INT 13
20612: PUSH
20613: LD_INT 14
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: IN
20622: IFFALSE 20634
// uc_nation := nation_arabian else
20624: LD_ADDR_OWVAR 21
20628: PUSH
20629: LD_INT 2
20631: ST_TO_ADDR
20632: GO 20642
// uc_nation := nation_russian ;
20634: LD_ADDR_OWVAR 21
20638: PUSH
20639: LD_INT 3
20641: ST_TO_ADDR
// vc_chassis := chassis ;
20642: LD_ADDR_OWVAR 37
20646: PUSH
20647: LD_VAR 0 1
20651: ST_TO_ADDR
// vc_engine := engine ;
20652: LD_ADDR_OWVAR 39
20656: PUSH
20657: LD_VAR 0 2
20661: ST_TO_ADDR
// vc_control := control ;
20662: LD_ADDR_OWVAR 38
20666: PUSH
20667: LD_VAR 0 3
20671: ST_TO_ADDR
// vc_weapon := weapon ;
20672: LD_ADDR_OWVAR 40
20676: PUSH
20677: LD_VAR 0 4
20681: ST_TO_ADDR
// un := CreateVehicle ;
20682: LD_ADDR_VAR 0 8
20686: PUSH
20687: CALL_OW 45
20691: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
20692: LD_VAR 0 8
20696: PPUSH
20697: LD_INT 0
20699: PPUSH
20700: LD_INT 5
20702: PPUSH
20703: CALL_OW 12
20707: PPUSH
20708: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
20712: LD_VAR 0 8
20716: PPUSH
20717: LD_VAR 0 5
20721: PPUSH
20722: LD_VAR 0 6
20726: PPUSH
20727: LD_INT 1
20729: PPUSH
20730: CALL_OW 48
// end ;
20734: LD_VAR 0 7
20738: RET
// export hInvincible ; every 1 do
20739: GO 20741
20741: DISABLE
// hInvincible := [ ] ;
20742: LD_ADDR_EXP 81
20746: PUSH
20747: EMPTY
20748: ST_TO_ADDR
20749: END
// every 10 do var i ;
20750: GO 20752
20752: DISABLE
20753: LD_INT 0
20755: PPUSH
// begin enable ;
20756: ENABLE
// if not hInvincible then
20757: LD_EXP 81
20761: NOT
20762: IFFALSE 20766
// exit ;
20764: GO 20810
// for i in hInvincible do
20766: LD_ADDR_VAR 0 1
20770: PUSH
20771: LD_EXP 81
20775: PUSH
20776: FOR_IN
20777: IFFALSE 20808
// if GetLives ( i ) < 1000 then
20779: LD_VAR 0 1
20783: PPUSH
20784: CALL_OW 256
20788: PUSH
20789: LD_INT 1000
20791: LESS
20792: IFFALSE 20806
// SetLives ( i , 1000 ) ;
20794: LD_VAR 0 1
20798: PPUSH
20799: LD_INT 1000
20801: PPUSH
20802: CALL_OW 234
20806: GO 20776
20808: POP
20809: POP
// end ;
20810: PPOPN 1
20812: END
// export function hHackInvincible ; var i ; begin
20813: LD_INT 0
20815: PPUSH
20816: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
20817: LD_ADDR_VAR 0 2
20821: PUSH
20822: LD_INT 2
20824: PUSH
20825: LD_INT 21
20827: PUSH
20828: LD_INT 1
20830: PUSH
20831: EMPTY
20832: LIST
20833: LIST
20834: PUSH
20835: LD_INT 21
20837: PUSH
20838: LD_INT 2
20840: PUSH
20841: EMPTY
20842: LIST
20843: LIST
20844: PUSH
20845: EMPTY
20846: LIST
20847: LIST
20848: LIST
20849: PPUSH
20850: CALL_OW 69
20854: PUSH
20855: FOR_IN
20856: IFFALSE 20917
// if IsSelected ( i ) then
20858: LD_VAR 0 2
20862: PPUSH
20863: CALL_OW 306
20867: IFFALSE 20915
// begin if i in hInvincible then
20869: LD_VAR 0 2
20873: PUSH
20874: LD_EXP 81
20878: IN
20879: IFFALSE 20899
// hInvincible := hInvincible diff i else
20881: LD_ADDR_EXP 81
20885: PUSH
20886: LD_EXP 81
20890: PUSH
20891: LD_VAR 0 2
20895: DIFF
20896: ST_TO_ADDR
20897: GO 20915
// hInvincible := hInvincible union i ;
20899: LD_ADDR_EXP 81
20903: PUSH
20904: LD_EXP 81
20908: PUSH
20909: LD_VAR 0 2
20913: UNION
20914: ST_TO_ADDR
// end ;
20915: GO 20855
20917: POP
20918: POP
// end ;
20919: LD_VAR 0 1
20923: RET
// export function hHackInvisible ; var i , j ; begin
20924: LD_INT 0
20926: PPUSH
20927: PPUSH
20928: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20929: LD_ADDR_VAR 0 2
20933: PUSH
20934: LD_INT 21
20936: PUSH
20937: LD_INT 1
20939: PUSH
20940: EMPTY
20941: LIST
20942: LIST
20943: PPUSH
20944: CALL_OW 69
20948: PUSH
20949: FOR_IN
20950: IFFALSE 20974
// if IsSelected ( i ) then
20952: LD_VAR 0 2
20956: PPUSH
20957: CALL_OW 306
20961: IFFALSE 20972
// ComForceInvisible ( i ) ;
20963: LD_VAR 0 2
20967: PPUSH
20968: CALL_OW 496
20972: GO 20949
20974: POP
20975: POP
// end ;
20976: LD_VAR 0 1
20980: RET
// export function hHackChangeYourSide ; begin
20981: LD_INT 0
20983: PPUSH
// if your_side = 8 then
20984: LD_OWVAR 2
20988: PUSH
20989: LD_INT 8
20991: EQUAL
20992: IFFALSE 21004
// your_side := 0 else
20994: LD_ADDR_OWVAR 2
20998: PUSH
20999: LD_INT 0
21001: ST_TO_ADDR
21002: GO 21018
// your_side := your_side + 1 ;
21004: LD_ADDR_OWVAR 2
21008: PUSH
21009: LD_OWVAR 2
21013: PUSH
21014: LD_INT 1
21016: PLUS
21017: ST_TO_ADDR
// end ;
21018: LD_VAR 0 1
21022: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21023: LD_INT 0
21025: PPUSH
21026: PPUSH
21027: PPUSH
// for i in all_units do
21028: LD_ADDR_VAR 0 2
21032: PUSH
21033: LD_OWVAR 3
21037: PUSH
21038: FOR_IN
21039: IFFALSE 21117
// if IsSelected ( i ) then
21041: LD_VAR 0 2
21045: PPUSH
21046: CALL_OW 306
21050: IFFALSE 21115
// begin j := GetSide ( i ) ;
21052: LD_ADDR_VAR 0 3
21056: PUSH
21057: LD_VAR 0 2
21061: PPUSH
21062: CALL_OW 255
21066: ST_TO_ADDR
// if j = 8 then
21067: LD_VAR 0 3
21071: PUSH
21072: LD_INT 8
21074: EQUAL
21075: IFFALSE 21087
// j := 0 else
21077: LD_ADDR_VAR 0 3
21081: PUSH
21082: LD_INT 0
21084: ST_TO_ADDR
21085: GO 21101
// j := j + 1 ;
21087: LD_ADDR_VAR 0 3
21091: PUSH
21092: LD_VAR 0 3
21096: PUSH
21097: LD_INT 1
21099: PLUS
21100: ST_TO_ADDR
// SetSide ( i , j ) ;
21101: LD_VAR 0 2
21105: PPUSH
21106: LD_VAR 0 3
21110: PPUSH
21111: CALL_OW 235
// end ;
21115: GO 21038
21117: POP
21118: POP
// end ;
21119: LD_VAR 0 1
21123: RET
// export function hHackFog ; begin
21124: LD_INT 0
21126: PPUSH
// FogOff ( true ) ;
21127: LD_INT 1
21129: PPUSH
21130: CALL_OW 344
// end ;
21134: LD_VAR 0 1
21138: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21139: LD_INT 0
21141: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21142: LD_VAR 0 1
21146: PPUSH
21147: LD_VAR 0 2
21151: PPUSH
21152: LD_VAR 0 3
21156: PPUSH
21157: LD_INT 1
21159: PPUSH
21160: LD_INT 1
21162: PPUSH
21163: CALL_OW 483
// CenterOnXY ( x , y ) ;
21167: LD_VAR 0 2
21171: PPUSH
21172: LD_VAR 0 3
21176: PPUSH
21177: CALL_OW 84
// end ; end_of_file end_of_file
21181: LD_VAR 0 4
21185: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
21186: LD_INT 0
21188: PPUSH
// ar_miner := 81 ;
21189: LD_ADDR_EXP 89
21193: PUSH
21194: LD_INT 81
21196: ST_TO_ADDR
// ar_crane := 88 ;
21197: LD_ADDR_EXP 88
21201: PUSH
21202: LD_INT 88
21204: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
21205: LD_ADDR_EXP 83
21209: PUSH
21210: LD_INT 89
21212: ST_TO_ADDR
// us_hack := 99 ;
21213: LD_ADDR_EXP 84
21217: PUSH
21218: LD_INT 99
21220: ST_TO_ADDR
// us_artillery := 97 ;
21221: LD_ADDR_EXP 85
21225: PUSH
21226: LD_INT 97
21228: ST_TO_ADDR
// ar_bio_bomb := 91 ;
21229: LD_ADDR_EXP 86
21233: PUSH
21234: LD_INT 91
21236: ST_TO_ADDR
// ar_mortar := 92 ;
21237: LD_ADDR_EXP 87
21241: PUSH
21242: LD_INT 92
21244: ST_TO_ADDR
// ru_radar := 98 ;
21245: LD_ADDR_EXP 82
21249: PUSH
21250: LD_INT 98
21252: ST_TO_ADDR
// tech_Artillery := 80 ;
21253: LD_ADDR_EXP 90
21257: PUSH
21258: LD_INT 80
21260: ST_TO_ADDR
// tech_RadMat := 81 ;
21261: LD_ADDR_EXP 91
21265: PUSH
21266: LD_INT 81
21268: ST_TO_ADDR
// tech_BasicTools := 82 ;
21269: LD_ADDR_EXP 92
21273: PUSH
21274: LD_INT 82
21276: ST_TO_ADDR
// tech_Cargo := 83 ;
21277: LD_ADDR_EXP 93
21281: PUSH
21282: LD_INT 83
21284: ST_TO_ADDR
// tech_Track := 84 ;
21285: LD_ADDR_EXP 94
21289: PUSH
21290: LD_INT 84
21292: ST_TO_ADDR
// tech_Crane := 85 ;
21293: LD_ADDR_EXP 95
21297: PUSH
21298: LD_INT 85
21300: ST_TO_ADDR
// tech_Bulldozer := 86 ;
21301: LD_ADDR_EXP 96
21305: PUSH
21306: LD_INT 86
21308: ST_TO_ADDR
// tech_Hovercraft := 87 ;
21309: LD_ADDR_EXP 97
21313: PUSH
21314: LD_INT 87
21316: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
21317: LD_ADDR_EXP 98
21321: PUSH
21322: LD_INT 88
21324: ST_TO_ADDR
// class_mastodont := 31 ;
21325: LD_ADDR_EXP 99
21329: PUSH
21330: LD_INT 31
21332: ST_TO_ADDR
// class_horse := 21 ;
21333: LD_ADDR_EXP 100
21337: PUSH
21338: LD_INT 21
21340: ST_TO_ADDR
// end ;
21341: LD_VAR 0 1
21345: RET
// every 1 do
21346: GO 21348
21348: DISABLE
// InitGlobalVariables ; end_of_file
21349: CALL 21186 0 0
21353: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
21354: LD_INT 0
21356: PPUSH
21357: PPUSH
// if exist_mode then
21358: LD_VAR 0 2
21362: IFFALSE 21387
// unit := CreateCharacter ( prefix & ident ) else
21364: LD_ADDR_VAR 0 5
21368: PUSH
21369: LD_VAR 0 3
21373: PUSH
21374: LD_VAR 0 1
21378: STR
21379: PPUSH
21380: CALL_OW 34
21384: ST_TO_ADDR
21385: GO 21402
// unit := NewCharacter ( ident ) ;
21387: LD_ADDR_VAR 0 5
21391: PUSH
21392: LD_VAR 0 1
21396: PPUSH
21397: CALL_OW 25
21401: ST_TO_ADDR
// result := unit ;
21402: LD_ADDR_VAR 0 4
21406: PUSH
21407: LD_VAR 0 5
21411: ST_TO_ADDR
// end ;
21412: LD_VAR 0 4
21416: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
21417: LD_INT 0
21419: PPUSH
21420: PPUSH
// if not side or not nation then
21421: LD_VAR 0 1
21425: NOT
21426: PUSH
21427: LD_VAR 0 2
21431: NOT
21432: OR
21433: IFFALSE 21437
// exit ;
21435: GO 22205
// case nation of nation_american :
21437: LD_VAR 0 2
21441: PUSH
21442: LD_INT 1
21444: DOUBLE
21445: EQUAL
21446: IFTRUE 21450
21448: GO 21664
21450: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
21451: LD_ADDR_VAR 0 4
21455: PUSH
21456: LD_INT 35
21458: PUSH
21459: LD_INT 45
21461: PUSH
21462: LD_INT 46
21464: PUSH
21465: LD_INT 47
21467: PUSH
21468: LD_INT 82
21470: PUSH
21471: LD_INT 83
21473: PUSH
21474: LD_INT 84
21476: PUSH
21477: LD_INT 85
21479: PUSH
21480: LD_INT 86
21482: PUSH
21483: LD_INT 1
21485: PUSH
21486: LD_INT 2
21488: PUSH
21489: LD_INT 6
21491: PUSH
21492: LD_INT 15
21494: PUSH
21495: LD_INT 16
21497: PUSH
21498: LD_INT 7
21500: PUSH
21501: LD_INT 12
21503: PUSH
21504: LD_INT 13
21506: PUSH
21507: LD_INT 10
21509: PUSH
21510: LD_INT 14
21512: PUSH
21513: LD_INT 20
21515: PUSH
21516: LD_INT 21
21518: PUSH
21519: LD_INT 22
21521: PUSH
21522: LD_INT 25
21524: PUSH
21525: LD_INT 32
21527: PUSH
21528: LD_INT 27
21530: PUSH
21531: LD_INT 36
21533: PUSH
21534: LD_INT 69
21536: PUSH
21537: LD_INT 39
21539: PUSH
21540: LD_INT 34
21542: PUSH
21543: LD_INT 40
21545: PUSH
21546: LD_INT 48
21548: PUSH
21549: LD_INT 49
21551: PUSH
21552: LD_INT 50
21554: PUSH
21555: LD_INT 51
21557: PUSH
21558: LD_INT 52
21560: PUSH
21561: LD_INT 53
21563: PUSH
21564: LD_INT 54
21566: PUSH
21567: LD_INT 55
21569: PUSH
21570: LD_INT 56
21572: PUSH
21573: LD_INT 57
21575: PUSH
21576: LD_INT 58
21578: PUSH
21579: LD_INT 59
21581: PUSH
21582: LD_INT 60
21584: PUSH
21585: LD_INT 61
21587: PUSH
21588: LD_INT 62
21590: PUSH
21591: LD_INT 80
21593: PUSH
21594: LD_INT 82
21596: PUSH
21597: LD_INT 83
21599: PUSH
21600: LD_INT 84
21602: PUSH
21603: LD_INT 85
21605: PUSH
21606: LD_INT 86
21608: PUSH
21609: EMPTY
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: LIST
21640: LIST
21641: LIST
21642: LIST
21643: LIST
21644: LIST
21645: LIST
21646: LIST
21647: LIST
21648: LIST
21649: LIST
21650: LIST
21651: LIST
21652: LIST
21653: LIST
21654: LIST
21655: LIST
21656: LIST
21657: LIST
21658: LIST
21659: LIST
21660: LIST
21661: ST_TO_ADDR
21662: GO 22129
21664: LD_INT 2
21666: DOUBLE
21667: EQUAL
21668: IFTRUE 21672
21670: GO 21898
21672: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
21673: LD_ADDR_VAR 0 4
21677: PUSH
21678: LD_INT 35
21680: PUSH
21681: LD_INT 45
21683: PUSH
21684: LD_INT 46
21686: PUSH
21687: LD_INT 47
21689: PUSH
21690: LD_INT 82
21692: PUSH
21693: LD_INT 83
21695: PUSH
21696: LD_INT 84
21698: PUSH
21699: LD_INT 85
21701: PUSH
21702: LD_INT 87
21704: PUSH
21705: LD_INT 70
21707: PUSH
21708: LD_INT 1
21710: PUSH
21711: LD_INT 11
21713: PUSH
21714: LD_INT 3
21716: PUSH
21717: LD_INT 4
21719: PUSH
21720: LD_INT 5
21722: PUSH
21723: LD_INT 6
21725: PUSH
21726: LD_INT 15
21728: PUSH
21729: LD_INT 18
21731: PUSH
21732: LD_INT 7
21734: PUSH
21735: LD_INT 17
21737: PUSH
21738: LD_INT 8
21740: PUSH
21741: LD_INT 20
21743: PUSH
21744: LD_INT 21
21746: PUSH
21747: LD_INT 22
21749: PUSH
21750: LD_INT 72
21752: PUSH
21753: LD_INT 26
21755: PUSH
21756: LD_INT 69
21758: PUSH
21759: LD_INT 39
21761: PUSH
21762: LD_INT 40
21764: PUSH
21765: LD_INT 41
21767: PUSH
21768: LD_INT 42
21770: PUSH
21771: LD_INT 43
21773: PUSH
21774: LD_INT 48
21776: PUSH
21777: LD_INT 49
21779: PUSH
21780: LD_INT 50
21782: PUSH
21783: LD_INT 51
21785: PUSH
21786: LD_INT 52
21788: PUSH
21789: LD_INT 53
21791: PUSH
21792: LD_INT 54
21794: PUSH
21795: LD_INT 55
21797: PUSH
21798: LD_INT 56
21800: PUSH
21801: LD_INT 60
21803: PUSH
21804: LD_INT 61
21806: PUSH
21807: LD_INT 62
21809: PUSH
21810: LD_INT 66
21812: PUSH
21813: LD_INT 67
21815: PUSH
21816: LD_INT 68
21818: PUSH
21819: LD_INT 81
21821: PUSH
21822: LD_INT 82
21824: PUSH
21825: LD_INT 83
21827: PUSH
21828: LD_INT 84
21830: PUSH
21831: LD_INT 85
21833: PUSH
21834: LD_INT 87
21836: PUSH
21837: LD_INT 88
21839: PUSH
21840: EMPTY
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: LIST
21874: LIST
21875: LIST
21876: LIST
21877: LIST
21878: LIST
21879: LIST
21880: LIST
21881: LIST
21882: LIST
21883: LIST
21884: LIST
21885: LIST
21886: LIST
21887: LIST
21888: LIST
21889: LIST
21890: LIST
21891: LIST
21892: LIST
21893: LIST
21894: LIST
21895: ST_TO_ADDR
21896: GO 22129
21898: LD_INT 3
21900: DOUBLE
21901: EQUAL
21902: IFTRUE 21906
21904: GO 22128
21906: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
21907: LD_ADDR_VAR 0 4
21911: PUSH
21912: LD_INT 46
21914: PUSH
21915: LD_INT 47
21917: PUSH
21918: LD_INT 1
21920: PUSH
21921: LD_INT 2
21923: PUSH
21924: LD_INT 82
21926: PUSH
21927: LD_INT 83
21929: PUSH
21930: LD_INT 84
21932: PUSH
21933: LD_INT 85
21935: PUSH
21936: LD_INT 86
21938: PUSH
21939: LD_INT 11
21941: PUSH
21942: LD_INT 9
21944: PUSH
21945: LD_INT 20
21947: PUSH
21948: LD_INT 19
21950: PUSH
21951: LD_INT 21
21953: PUSH
21954: LD_INT 24
21956: PUSH
21957: LD_INT 22
21959: PUSH
21960: LD_INT 25
21962: PUSH
21963: LD_INT 28
21965: PUSH
21966: LD_INT 29
21968: PUSH
21969: LD_INT 30
21971: PUSH
21972: LD_INT 31
21974: PUSH
21975: LD_INT 37
21977: PUSH
21978: LD_INT 38
21980: PUSH
21981: LD_INT 32
21983: PUSH
21984: LD_INT 27
21986: PUSH
21987: LD_INT 33
21989: PUSH
21990: LD_INT 69
21992: PUSH
21993: LD_INT 39
21995: PUSH
21996: LD_INT 34
21998: PUSH
21999: LD_INT 40
22001: PUSH
22002: LD_INT 71
22004: PUSH
22005: LD_INT 23
22007: PUSH
22008: LD_INT 44
22010: PUSH
22011: LD_INT 48
22013: PUSH
22014: LD_INT 49
22016: PUSH
22017: LD_INT 50
22019: PUSH
22020: LD_INT 51
22022: PUSH
22023: LD_INT 52
22025: PUSH
22026: LD_INT 53
22028: PUSH
22029: LD_INT 54
22031: PUSH
22032: LD_INT 55
22034: PUSH
22035: LD_INT 56
22037: PUSH
22038: LD_INT 57
22040: PUSH
22041: LD_INT 58
22043: PUSH
22044: LD_INT 59
22046: PUSH
22047: LD_INT 63
22049: PUSH
22050: LD_INT 64
22052: PUSH
22053: LD_INT 65
22055: PUSH
22056: LD_INT 82
22058: PUSH
22059: LD_INT 83
22061: PUSH
22062: LD_INT 84
22064: PUSH
22065: LD_INT 85
22067: PUSH
22068: LD_INT 86
22070: PUSH
22071: EMPTY
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: LIST
22104: LIST
22105: LIST
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: LIST
22111: LIST
22112: LIST
22113: LIST
22114: LIST
22115: LIST
22116: LIST
22117: LIST
22118: LIST
22119: LIST
22120: LIST
22121: LIST
22122: LIST
22123: LIST
22124: LIST
22125: ST_TO_ADDR
22126: GO 22129
22128: POP
// if state > - 1 and state < 3 then
22129: LD_VAR 0 3
22133: PUSH
22134: LD_INT 1
22136: NEG
22137: GREATER
22138: PUSH
22139: LD_VAR 0 3
22143: PUSH
22144: LD_INT 3
22146: LESS
22147: AND
22148: IFFALSE 22205
// for i in result do
22150: LD_ADDR_VAR 0 5
22154: PUSH
22155: LD_VAR 0 4
22159: PUSH
22160: FOR_IN
22161: IFFALSE 22203
// if GetTech ( i , side ) <> state then
22163: LD_VAR 0 5
22167: PPUSH
22168: LD_VAR 0 1
22172: PPUSH
22173: CALL_OW 321
22177: PUSH
22178: LD_VAR 0 3
22182: NONEQUAL
22183: IFFALSE 22201
// result := result diff i ;
22185: LD_ADDR_VAR 0 4
22189: PUSH
22190: LD_VAR 0 4
22194: PUSH
22195: LD_VAR 0 5
22199: DIFF
22200: ST_TO_ADDR
22201: GO 22160
22203: POP
22204: POP
// end ;
22205: LD_VAR 0 4
22209: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22210: LD_INT 0
22212: PPUSH
22213: PPUSH
22214: PPUSH
// result := true ;
22215: LD_ADDR_VAR 0 3
22219: PUSH
22220: LD_INT 1
22222: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22223: LD_ADDR_VAR 0 5
22227: PUSH
22228: LD_VAR 0 2
22232: PPUSH
22233: CALL_OW 480
22237: ST_TO_ADDR
// if not tmp then
22238: LD_VAR 0 5
22242: NOT
22243: IFFALSE 22247
// exit ;
22245: GO 22296
// for i in tmp do
22247: LD_ADDR_VAR 0 4
22251: PUSH
22252: LD_VAR 0 5
22256: PUSH
22257: FOR_IN
22258: IFFALSE 22294
// if GetTech ( i , side ) <> state_researched then
22260: LD_VAR 0 4
22264: PPUSH
22265: LD_VAR 0 1
22269: PPUSH
22270: CALL_OW 321
22274: PUSH
22275: LD_INT 2
22277: NONEQUAL
22278: IFFALSE 22292
// begin result := false ;
22280: LD_ADDR_VAR 0 3
22284: PUSH
22285: LD_INT 0
22287: ST_TO_ADDR
// exit ;
22288: POP
22289: POP
22290: GO 22296
// end ;
22292: GO 22257
22294: POP
22295: POP
// end ;
22296: LD_VAR 0 3
22300: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
22301: LD_INT 0
22303: PPUSH
22304: PPUSH
22305: PPUSH
22306: PPUSH
22307: PPUSH
22308: PPUSH
22309: PPUSH
22310: PPUSH
22311: PPUSH
22312: PPUSH
22313: PPUSH
22314: PPUSH
22315: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
22316: LD_VAR 0 1
22320: NOT
22321: PUSH
22322: LD_VAR 0 1
22326: PPUSH
22327: CALL_OW 257
22331: PUSH
22332: LD_INT 9
22334: NONEQUAL
22335: OR
22336: IFFALSE 22340
// exit ;
22338: GO 22913
// side := GetSide ( unit ) ;
22340: LD_ADDR_VAR 0 9
22344: PUSH
22345: LD_VAR 0 1
22349: PPUSH
22350: CALL_OW 255
22354: ST_TO_ADDR
// tech_space := tech_spacanom ;
22355: LD_ADDR_VAR 0 12
22359: PUSH
22360: LD_INT 29
22362: ST_TO_ADDR
// tech_time := tech_taurad ;
22363: LD_ADDR_VAR 0 13
22367: PUSH
22368: LD_INT 28
22370: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
22371: LD_ADDR_VAR 0 11
22375: PUSH
22376: LD_VAR 0 1
22380: PPUSH
22381: CALL_OW 310
22385: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
22386: LD_VAR 0 11
22390: PPUSH
22391: CALL_OW 247
22395: PUSH
22396: LD_INT 2
22398: EQUAL
22399: IFFALSE 22403
// exit ;
22401: GO 22913
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22403: LD_ADDR_VAR 0 8
22407: PUSH
22408: LD_INT 81
22410: PUSH
22411: LD_VAR 0 9
22415: PUSH
22416: EMPTY
22417: LIST
22418: LIST
22419: PUSH
22420: LD_INT 3
22422: PUSH
22423: LD_INT 21
22425: PUSH
22426: LD_INT 3
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: PUSH
22433: EMPTY
22434: LIST
22435: LIST
22436: PUSH
22437: EMPTY
22438: LIST
22439: LIST
22440: PPUSH
22441: CALL_OW 69
22445: ST_TO_ADDR
// if not tmp then
22446: LD_VAR 0 8
22450: NOT
22451: IFFALSE 22455
// exit ;
22453: GO 22913
// if in_unit then
22455: LD_VAR 0 11
22459: IFFALSE 22483
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
22461: LD_ADDR_VAR 0 10
22465: PUSH
22466: LD_VAR 0 8
22470: PPUSH
22471: LD_VAR 0 11
22475: PPUSH
22476: CALL_OW 74
22480: ST_TO_ADDR
22481: GO 22503
// enemy := NearestUnitToUnit ( tmp , unit ) ;
22483: LD_ADDR_VAR 0 10
22487: PUSH
22488: LD_VAR 0 8
22492: PPUSH
22493: LD_VAR 0 1
22497: PPUSH
22498: CALL_OW 74
22502: ST_TO_ADDR
// if not enemy then
22503: LD_VAR 0 10
22507: NOT
22508: IFFALSE 22512
// exit ;
22510: GO 22913
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
22512: LD_VAR 0 11
22516: PUSH
22517: LD_VAR 0 11
22521: PPUSH
22522: LD_VAR 0 10
22526: PPUSH
22527: CALL_OW 296
22531: PUSH
22532: LD_INT 13
22534: GREATER
22535: AND
22536: PUSH
22537: LD_VAR 0 1
22541: PPUSH
22542: LD_VAR 0 10
22546: PPUSH
22547: CALL_OW 296
22551: PUSH
22552: LD_INT 12
22554: GREATER
22555: OR
22556: IFFALSE 22560
// exit ;
22558: GO 22913
// missile := [ 1 ] ;
22560: LD_ADDR_VAR 0 14
22564: PUSH
22565: LD_INT 1
22567: PUSH
22568: EMPTY
22569: LIST
22570: ST_TO_ADDR
// if Researched ( side , tech_space ) then
22571: LD_VAR 0 9
22575: PPUSH
22576: LD_VAR 0 12
22580: PPUSH
22581: CALL_OW 325
22585: IFFALSE 22614
// missile := Insert ( missile , missile + 1 , 2 ) ;
22587: LD_ADDR_VAR 0 14
22591: PUSH
22592: LD_VAR 0 14
22596: PPUSH
22597: LD_VAR 0 14
22601: PUSH
22602: LD_INT 1
22604: PLUS
22605: PPUSH
22606: LD_INT 2
22608: PPUSH
22609: CALL_OW 2
22613: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
22614: LD_VAR 0 9
22618: PPUSH
22619: LD_VAR 0 13
22623: PPUSH
22624: CALL_OW 325
22628: PUSH
22629: LD_VAR 0 10
22633: PPUSH
22634: CALL_OW 255
22638: PPUSH
22639: LD_VAR 0 13
22643: PPUSH
22644: CALL_OW 325
22648: NOT
22649: AND
22650: IFFALSE 22679
// missile := Insert ( missile , missile + 1 , 3 ) ;
22652: LD_ADDR_VAR 0 14
22656: PUSH
22657: LD_VAR 0 14
22661: PPUSH
22662: LD_VAR 0 14
22666: PUSH
22667: LD_INT 1
22669: PLUS
22670: PPUSH
22671: LD_INT 3
22673: PPUSH
22674: CALL_OW 2
22678: ST_TO_ADDR
// if missile < 2 then
22679: LD_VAR 0 14
22683: PUSH
22684: LD_INT 2
22686: LESS
22687: IFFALSE 22691
// exit ;
22689: GO 22913
// x := GetX ( enemy ) ;
22691: LD_ADDR_VAR 0 4
22695: PUSH
22696: LD_VAR 0 10
22700: PPUSH
22701: CALL_OW 250
22705: ST_TO_ADDR
// y := GetY ( enemy ) ;
22706: LD_ADDR_VAR 0 5
22710: PUSH
22711: LD_VAR 0 10
22715: PPUSH
22716: CALL_OW 251
22720: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22721: LD_ADDR_VAR 0 6
22725: PUSH
22726: LD_VAR 0 4
22730: PUSH
22731: LD_INT 1
22733: NEG
22734: PPUSH
22735: LD_INT 1
22737: PPUSH
22738: CALL_OW 12
22742: PLUS
22743: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22744: LD_ADDR_VAR 0 7
22748: PUSH
22749: LD_VAR 0 5
22753: PUSH
22754: LD_INT 1
22756: NEG
22757: PPUSH
22758: LD_INT 1
22760: PPUSH
22761: CALL_OW 12
22765: PLUS
22766: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22767: LD_VAR 0 6
22771: PPUSH
22772: LD_VAR 0 7
22776: PPUSH
22777: CALL_OW 488
22781: NOT
22782: IFFALSE 22804
// begin _x := x ;
22784: LD_ADDR_VAR 0 6
22788: PUSH
22789: LD_VAR 0 4
22793: ST_TO_ADDR
// _y := y ;
22794: LD_ADDR_VAR 0 7
22798: PUSH
22799: LD_VAR 0 5
22803: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
22804: LD_ADDR_VAR 0 3
22808: PUSH
22809: LD_INT 1
22811: PPUSH
22812: LD_VAR 0 14
22816: PPUSH
22817: CALL_OW 12
22821: ST_TO_ADDR
// case i of 1 :
22822: LD_VAR 0 3
22826: PUSH
22827: LD_INT 1
22829: DOUBLE
22830: EQUAL
22831: IFTRUE 22835
22833: GO 22852
22835: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
22836: LD_VAR 0 1
22840: PPUSH
22841: LD_VAR 0 10
22845: PPUSH
22846: CALL_OW 115
22850: GO 22913
22852: LD_INT 2
22854: DOUBLE
22855: EQUAL
22856: IFTRUE 22860
22858: GO 22882
22860: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
22861: LD_VAR 0 1
22865: PPUSH
22866: LD_VAR 0 6
22870: PPUSH
22871: LD_VAR 0 7
22875: PPUSH
22876: CALL_OW 153
22880: GO 22913
22882: LD_INT 3
22884: DOUBLE
22885: EQUAL
22886: IFTRUE 22890
22888: GO 22912
22890: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
22891: LD_VAR 0 1
22895: PPUSH
22896: LD_VAR 0 6
22900: PPUSH
22901: LD_VAR 0 7
22905: PPUSH
22906: CALL_OW 154
22910: GO 22913
22912: POP
// end ;
22913: LD_VAR 0 2
22917: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
22918: LD_INT 0
22920: PPUSH
22921: PPUSH
22922: PPUSH
22923: PPUSH
22924: PPUSH
22925: PPUSH
// if not unit or not building then
22926: LD_VAR 0 1
22930: NOT
22931: PUSH
22932: LD_VAR 0 2
22936: NOT
22937: OR
22938: IFFALSE 22942
// exit ;
22940: GO 23100
// x := GetX ( building ) ;
22942: LD_ADDR_VAR 0 5
22946: PUSH
22947: LD_VAR 0 2
22951: PPUSH
22952: CALL_OW 250
22956: ST_TO_ADDR
// y := GetY ( building ) ;
22957: LD_ADDR_VAR 0 6
22961: PUSH
22962: LD_VAR 0 2
22966: PPUSH
22967: CALL_OW 251
22971: ST_TO_ADDR
// for i = 0 to 5 do
22972: LD_ADDR_VAR 0 4
22976: PUSH
22977: DOUBLE
22978: LD_INT 0
22980: DEC
22981: ST_TO_ADDR
22982: LD_INT 5
22984: PUSH
22985: FOR_TO
22986: IFFALSE 23098
// begin _x := ShiftX ( x , i , 3 ) ;
22988: LD_ADDR_VAR 0 7
22992: PUSH
22993: LD_VAR 0 5
22997: PPUSH
22998: LD_VAR 0 4
23002: PPUSH
23003: LD_INT 3
23005: PPUSH
23006: CALL_OW 272
23010: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
23011: LD_ADDR_VAR 0 8
23015: PUSH
23016: LD_VAR 0 6
23020: PPUSH
23021: LD_VAR 0 4
23025: PPUSH
23026: LD_INT 3
23028: PPUSH
23029: CALL_OW 273
23033: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23034: LD_VAR 0 7
23038: PPUSH
23039: LD_VAR 0 8
23043: PPUSH
23044: CALL_OW 488
23048: NOT
23049: IFFALSE 23053
// continue ;
23051: GO 22985
// if HexInfo ( _x , _y ) = 0 then
23053: LD_VAR 0 7
23057: PPUSH
23058: LD_VAR 0 8
23062: PPUSH
23063: CALL_OW 428
23067: PUSH
23068: LD_INT 0
23070: EQUAL
23071: IFFALSE 23096
// begin ComMoveXY ( unit , _x , _y ) ;
23073: LD_VAR 0 1
23077: PPUSH
23078: LD_VAR 0 7
23082: PPUSH
23083: LD_VAR 0 8
23087: PPUSH
23088: CALL_OW 111
// exit ;
23092: POP
23093: POP
23094: GO 23100
// end ; end ;
23096: GO 22985
23098: POP
23099: POP
// end ;
23100: LD_VAR 0 3
23104: RET
// export function ScanBase ( side , base_area ) ; begin
23105: LD_INT 0
23107: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23108: LD_ADDR_VAR 0 3
23112: PUSH
23113: LD_VAR 0 2
23117: PPUSH
23118: LD_INT 81
23120: PUSH
23121: LD_VAR 0 1
23125: PUSH
23126: EMPTY
23127: LIST
23128: LIST
23129: PPUSH
23130: CALL_OW 70
23134: ST_TO_ADDR
// end ;
23135: LD_VAR 0 3
23139: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23140: LD_INT 0
23142: PPUSH
23143: PPUSH
23144: PPUSH
23145: PPUSH
// result := false ;
23146: LD_ADDR_VAR 0 2
23150: PUSH
23151: LD_INT 0
23153: ST_TO_ADDR
// side := GetSide ( unit ) ;
23154: LD_ADDR_VAR 0 3
23158: PUSH
23159: LD_VAR 0 1
23163: PPUSH
23164: CALL_OW 255
23168: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23169: LD_ADDR_VAR 0 4
23173: PUSH
23174: LD_VAR 0 1
23178: PPUSH
23179: CALL_OW 248
23183: ST_TO_ADDR
// case nat of 1 :
23184: LD_VAR 0 4
23188: PUSH
23189: LD_INT 1
23191: DOUBLE
23192: EQUAL
23193: IFTRUE 23197
23195: GO 23208
23197: POP
// tech := tech_lassight ; 2 :
23198: LD_ADDR_VAR 0 5
23202: PUSH
23203: LD_INT 12
23205: ST_TO_ADDR
23206: GO 23247
23208: LD_INT 2
23210: DOUBLE
23211: EQUAL
23212: IFTRUE 23216
23214: GO 23227
23216: POP
// tech := tech_mortar ; 3 :
23217: LD_ADDR_VAR 0 5
23221: PUSH
23222: LD_INT 41
23224: ST_TO_ADDR
23225: GO 23247
23227: LD_INT 3
23229: DOUBLE
23230: EQUAL
23231: IFTRUE 23235
23233: GO 23246
23235: POP
// tech := tech_bazooka ; end ;
23236: LD_ADDR_VAR 0 5
23240: PUSH
23241: LD_INT 44
23243: ST_TO_ADDR
23244: GO 23247
23246: POP
// if Researched ( side , tech ) then
23247: LD_VAR 0 3
23251: PPUSH
23252: LD_VAR 0 5
23256: PPUSH
23257: CALL_OW 325
23261: IFFALSE 23288
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23263: LD_ADDR_VAR 0 2
23267: PUSH
23268: LD_INT 5
23270: PUSH
23271: LD_INT 8
23273: PUSH
23274: LD_INT 9
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: LIST
23281: PUSH
23282: LD_VAR 0 4
23286: ARRAY
23287: ST_TO_ADDR
// end ;
23288: LD_VAR 0 2
23292: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23293: LD_INT 0
23295: PPUSH
23296: PPUSH
23297: PPUSH
// if not mines then
23298: LD_VAR 0 2
23302: NOT
23303: IFFALSE 23307
// exit ;
23305: GO 23451
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23307: LD_ADDR_VAR 0 5
23311: PUSH
23312: LD_INT 81
23314: PUSH
23315: LD_VAR 0 1
23319: PUSH
23320: EMPTY
23321: LIST
23322: LIST
23323: PUSH
23324: LD_INT 3
23326: PUSH
23327: LD_INT 21
23329: PUSH
23330: LD_INT 3
23332: PUSH
23333: EMPTY
23334: LIST
23335: LIST
23336: PUSH
23337: EMPTY
23338: LIST
23339: LIST
23340: PUSH
23341: EMPTY
23342: LIST
23343: LIST
23344: PPUSH
23345: CALL_OW 69
23349: ST_TO_ADDR
// for i in mines do
23350: LD_ADDR_VAR 0 4
23354: PUSH
23355: LD_VAR 0 2
23359: PUSH
23360: FOR_IN
23361: IFFALSE 23449
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23363: LD_VAR 0 4
23367: PUSH
23368: LD_INT 1
23370: ARRAY
23371: PPUSH
23372: LD_VAR 0 4
23376: PUSH
23377: LD_INT 2
23379: ARRAY
23380: PPUSH
23381: CALL_OW 458
23385: NOT
23386: IFFALSE 23390
// continue ;
23388: GO 23360
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23390: LD_VAR 0 4
23394: PUSH
23395: LD_INT 1
23397: ARRAY
23398: PPUSH
23399: LD_VAR 0 4
23403: PUSH
23404: LD_INT 2
23406: ARRAY
23407: PPUSH
23408: CALL_OW 428
23412: PUSH
23413: LD_VAR 0 5
23417: IN
23418: IFFALSE 23447
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23420: LD_VAR 0 4
23424: PUSH
23425: LD_INT 1
23427: ARRAY
23428: PPUSH
23429: LD_VAR 0 4
23433: PUSH
23434: LD_INT 2
23436: ARRAY
23437: PPUSH
23438: LD_VAR 0 1
23442: PPUSH
23443: CALL_OW 456
// end ;
23447: GO 23360
23449: POP
23450: POP
// end ;
23451: LD_VAR 0 3
23455: RET
// export function Count ( array ) ; var i ; begin
23456: LD_INT 0
23458: PPUSH
23459: PPUSH
// result := 0 ;
23460: LD_ADDR_VAR 0 2
23464: PUSH
23465: LD_INT 0
23467: ST_TO_ADDR
// for i in array do
23468: LD_ADDR_VAR 0 3
23472: PUSH
23473: LD_VAR 0 1
23477: PUSH
23478: FOR_IN
23479: IFFALSE 23503
// if i then
23481: LD_VAR 0 3
23485: IFFALSE 23501
// result := result + 1 ;
23487: LD_ADDR_VAR 0 2
23491: PUSH
23492: LD_VAR 0 2
23496: PUSH
23497: LD_INT 1
23499: PLUS
23500: ST_TO_ADDR
23501: GO 23478
23503: POP
23504: POP
// end ;
23505: LD_VAR 0 2
23509: RET
// export function IsEmpty ( building ) ; begin
23510: LD_INT 0
23512: PPUSH
// if not building then
23513: LD_VAR 0 1
23517: NOT
23518: IFFALSE 23522
// exit ;
23520: GO 23565
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23522: LD_ADDR_VAR 0 2
23526: PUSH
23527: LD_VAR 0 1
23531: PUSH
23532: LD_INT 22
23534: PUSH
23535: LD_VAR 0 1
23539: PPUSH
23540: CALL_OW 255
23544: PUSH
23545: EMPTY
23546: LIST
23547: LIST
23548: PUSH
23549: LD_INT 58
23551: PUSH
23552: EMPTY
23553: LIST
23554: PUSH
23555: EMPTY
23556: LIST
23557: LIST
23558: PPUSH
23559: CALL_OW 69
23563: IN
23564: ST_TO_ADDR
// end ;
23565: LD_VAR 0 2
23569: RET
// export function IsNotFull ( building ) ; begin
23570: LD_INT 0
23572: PPUSH
// if not building then
23573: LD_VAR 0 1
23577: NOT
23578: IFFALSE 23582
// exit ;
23580: GO 23601
// result := UnitsInside ( building ) < 6 ;
23582: LD_ADDR_VAR 0 2
23586: PUSH
23587: LD_VAR 0 1
23591: PPUSH
23592: CALL_OW 313
23596: PUSH
23597: LD_INT 6
23599: LESS
23600: ST_TO_ADDR
// end ;
23601: LD_VAR 0 2
23605: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23606: LD_INT 0
23608: PPUSH
23609: PPUSH
23610: PPUSH
23611: PPUSH
// tmp := [ ] ;
23612: LD_ADDR_VAR 0 3
23616: PUSH
23617: EMPTY
23618: ST_TO_ADDR
// list := [ ] ;
23619: LD_ADDR_VAR 0 5
23623: PUSH
23624: EMPTY
23625: ST_TO_ADDR
// for i = 16 to 25 do
23626: LD_ADDR_VAR 0 4
23630: PUSH
23631: DOUBLE
23632: LD_INT 16
23634: DEC
23635: ST_TO_ADDR
23636: LD_INT 25
23638: PUSH
23639: FOR_TO
23640: IFFALSE 23713
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23642: LD_ADDR_VAR 0 3
23646: PUSH
23647: LD_VAR 0 3
23651: PUSH
23652: LD_INT 22
23654: PUSH
23655: LD_VAR 0 1
23659: PPUSH
23660: CALL_OW 255
23664: PUSH
23665: EMPTY
23666: LIST
23667: LIST
23668: PUSH
23669: LD_INT 91
23671: PUSH
23672: LD_VAR 0 1
23676: PUSH
23677: LD_INT 6
23679: PUSH
23680: EMPTY
23681: LIST
23682: LIST
23683: LIST
23684: PUSH
23685: LD_INT 30
23687: PUSH
23688: LD_VAR 0 4
23692: PUSH
23693: EMPTY
23694: LIST
23695: LIST
23696: PUSH
23697: EMPTY
23698: LIST
23699: LIST
23700: LIST
23701: PUSH
23702: EMPTY
23703: LIST
23704: PPUSH
23705: CALL_OW 69
23709: ADD
23710: ST_TO_ADDR
23711: GO 23639
23713: POP
23714: POP
// for i = 1 to tmp do
23715: LD_ADDR_VAR 0 4
23719: PUSH
23720: DOUBLE
23721: LD_INT 1
23723: DEC
23724: ST_TO_ADDR
23725: LD_VAR 0 3
23729: PUSH
23730: FOR_TO
23731: IFFALSE 23819
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23733: LD_ADDR_VAR 0 5
23737: PUSH
23738: LD_VAR 0 5
23742: PUSH
23743: LD_VAR 0 3
23747: PUSH
23748: LD_VAR 0 4
23752: ARRAY
23753: PPUSH
23754: CALL_OW 266
23758: PUSH
23759: LD_VAR 0 3
23763: PUSH
23764: LD_VAR 0 4
23768: ARRAY
23769: PPUSH
23770: CALL_OW 250
23774: PUSH
23775: LD_VAR 0 3
23779: PUSH
23780: LD_VAR 0 4
23784: ARRAY
23785: PPUSH
23786: CALL_OW 251
23790: PUSH
23791: LD_VAR 0 3
23795: PUSH
23796: LD_VAR 0 4
23800: ARRAY
23801: PPUSH
23802: CALL_OW 254
23806: PUSH
23807: EMPTY
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: PUSH
23813: EMPTY
23814: LIST
23815: ADD
23816: ST_TO_ADDR
23817: GO 23730
23819: POP
23820: POP
// result := list ;
23821: LD_ADDR_VAR 0 2
23825: PUSH
23826: LD_VAR 0 5
23830: ST_TO_ADDR
// end ;
23831: LD_VAR 0 2
23835: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23836: LD_INT 0
23838: PPUSH
23839: PPUSH
23840: PPUSH
23841: PPUSH
23842: PPUSH
23843: PPUSH
23844: PPUSH
// if not factory then
23845: LD_VAR 0 1
23849: NOT
23850: IFFALSE 23854
// exit ;
23852: GO 24447
// if control = control_apeman then
23854: LD_VAR 0 4
23858: PUSH
23859: LD_INT 5
23861: EQUAL
23862: IFFALSE 23971
// begin tmp := UnitsInside ( factory ) ;
23864: LD_ADDR_VAR 0 8
23868: PUSH
23869: LD_VAR 0 1
23873: PPUSH
23874: CALL_OW 313
23878: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
23879: LD_VAR 0 8
23883: PPUSH
23884: LD_INT 25
23886: PUSH
23887: LD_INT 12
23889: PUSH
23890: EMPTY
23891: LIST
23892: LIST
23893: PPUSH
23894: CALL_OW 72
23898: NOT
23899: IFFALSE 23909
// control := control_manual ;
23901: LD_ADDR_VAR 0 4
23905: PUSH
23906: LD_INT 1
23908: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
23909: LD_ADDR_VAR 0 8
23913: PUSH
23914: LD_VAR 0 1
23918: PPUSH
23919: CALL 23606 0 1
23923: ST_TO_ADDR
// if tmp then
23924: LD_VAR 0 8
23928: IFFALSE 23971
// begin for i in tmp do
23930: LD_ADDR_VAR 0 7
23934: PUSH
23935: LD_VAR 0 8
23939: PUSH
23940: FOR_IN
23941: IFFALSE 23969
// if i [ 1 ] = b_ext_radio then
23943: LD_VAR 0 7
23947: PUSH
23948: LD_INT 1
23950: ARRAY
23951: PUSH
23952: LD_INT 22
23954: EQUAL
23955: IFFALSE 23967
// begin control := control_remote ;
23957: LD_ADDR_VAR 0 4
23961: PUSH
23962: LD_INT 2
23964: ST_TO_ADDR
// break ;
23965: GO 23969
// end ;
23967: GO 23940
23969: POP
23970: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23971: LD_VAR 0 1
23975: PPUSH
23976: LD_VAR 0 2
23980: PPUSH
23981: LD_VAR 0 3
23985: PPUSH
23986: LD_VAR 0 4
23990: PPUSH
23991: LD_VAR 0 5
23995: PPUSH
23996: CALL_OW 448
24000: IFFALSE 24035
// begin result := [ chassis , engine , control , weapon ] ;
24002: LD_ADDR_VAR 0 6
24006: PUSH
24007: LD_VAR 0 2
24011: PUSH
24012: LD_VAR 0 3
24016: PUSH
24017: LD_VAR 0 4
24021: PUSH
24022: LD_VAR 0 5
24026: PUSH
24027: EMPTY
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: ST_TO_ADDR
// exit ;
24033: GO 24447
// end ; _chassis := AvailableChassisList ( factory ) ;
24035: LD_ADDR_VAR 0 9
24039: PUSH
24040: LD_VAR 0 1
24044: PPUSH
24045: CALL_OW 475
24049: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24050: LD_ADDR_VAR 0 11
24054: PUSH
24055: LD_VAR 0 1
24059: PPUSH
24060: CALL_OW 476
24064: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24065: LD_ADDR_VAR 0 12
24069: PUSH
24070: LD_VAR 0 1
24074: PPUSH
24075: CALL_OW 477
24079: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24080: LD_ADDR_VAR 0 10
24084: PUSH
24085: LD_VAR 0 1
24089: PPUSH
24090: CALL_OW 478
24094: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24095: LD_VAR 0 9
24099: NOT
24100: PUSH
24101: LD_VAR 0 11
24105: NOT
24106: OR
24107: PUSH
24108: LD_VAR 0 12
24112: NOT
24113: OR
24114: PUSH
24115: LD_VAR 0 10
24119: NOT
24120: OR
24121: IFFALSE 24156
// begin result := [ chassis , engine , control , weapon ] ;
24123: LD_ADDR_VAR 0 6
24127: PUSH
24128: LD_VAR 0 2
24132: PUSH
24133: LD_VAR 0 3
24137: PUSH
24138: LD_VAR 0 4
24142: PUSH
24143: LD_VAR 0 5
24147: PUSH
24148: EMPTY
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: ST_TO_ADDR
// exit ;
24154: GO 24447
// end ; if not chassis in _chassis then
24156: LD_VAR 0 2
24160: PUSH
24161: LD_VAR 0 9
24165: IN
24166: NOT
24167: IFFALSE 24193
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24169: LD_ADDR_VAR 0 2
24173: PUSH
24174: LD_VAR 0 9
24178: PUSH
24179: LD_INT 1
24181: PPUSH
24182: LD_VAR 0 9
24186: PPUSH
24187: CALL_OW 12
24191: ARRAY
24192: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24193: LD_VAR 0 2
24197: PPUSH
24198: LD_VAR 0 3
24202: PPUSH
24203: CALL 24452 0 2
24207: NOT
24208: IFFALSE 24267
// repeat engine := _engine [ 1 ] ;
24210: LD_ADDR_VAR 0 3
24214: PUSH
24215: LD_VAR 0 11
24219: PUSH
24220: LD_INT 1
24222: ARRAY
24223: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24224: LD_ADDR_VAR 0 11
24228: PUSH
24229: LD_VAR 0 11
24233: PPUSH
24234: LD_INT 1
24236: PPUSH
24237: CALL_OW 3
24241: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24242: LD_VAR 0 2
24246: PPUSH
24247: LD_VAR 0 3
24251: PPUSH
24252: CALL 24452 0 2
24256: PUSH
24257: LD_VAR 0 11
24261: PUSH
24262: EMPTY
24263: EQUAL
24264: OR
24265: IFFALSE 24210
// if not control in _control then
24267: LD_VAR 0 4
24271: PUSH
24272: LD_VAR 0 12
24276: IN
24277: NOT
24278: IFFALSE 24304
// control := _control [ rand ( 1 , _control ) ] ;
24280: LD_ADDR_VAR 0 4
24284: PUSH
24285: LD_VAR 0 12
24289: PUSH
24290: LD_INT 1
24292: PPUSH
24293: LD_VAR 0 12
24297: PPUSH
24298: CALL_OW 12
24302: ARRAY
24303: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24304: LD_VAR 0 2
24308: PPUSH
24309: LD_VAR 0 5
24313: PPUSH
24314: CALL 24672 0 2
24318: NOT
24319: IFFALSE 24378
// repeat weapon := _weapon [ 1 ] ;
24321: LD_ADDR_VAR 0 5
24325: PUSH
24326: LD_VAR 0 10
24330: PUSH
24331: LD_INT 1
24333: ARRAY
24334: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24335: LD_ADDR_VAR 0 10
24339: PUSH
24340: LD_VAR 0 10
24344: PPUSH
24345: LD_INT 1
24347: PPUSH
24348: CALL_OW 3
24352: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24353: LD_VAR 0 2
24357: PPUSH
24358: LD_VAR 0 5
24362: PPUSH
24363: CALL 24672 0 2
24367: PUSH
24368: LD_VAR 0 10
24372: PUSH
24373: EMPTY
24374: EQUAL
24375: OR
24376: IFFALSE 24321
// result := [ ] ;
24378: LD_ADDR_VAR 0 6
24382: PUSH
24383: EMPTY
24384: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24385: LD_VAR 0 1
24389: PPUSH
24390: LD_VAR 0 2
24394: PPUSH
24395: LD_VAR 0 3
24399: PPUSH
24400: LD_VAR 0 4
24404: PPUSH
24405: LD_VAR 0 5
24409: PPUSH
24410: CALL_OW 448
24414: IFFALSE 24447
// result := [ chassis , engine , control , weapon ] ;
24416: LD_ADDR_VAR 0 6
24420: PUSH
24421: LD_VAR 0 2
24425: PUSH
24426: LD_VAR 0 3
24430: PUSH
24431: LD_VAR 0 4
24435: PUSH
24436: LD_VAR 0 5
24440: PUSH
24441: EMPTY
24442: LIST
24443: LIST
24444: LIST
24445: LIST
24446: ST_TO_ADDR
// end ;
24447: LD_VAR 0 6
24451: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24452: LD_INT 0
24454: PPUSH
// if not chassis or not engine then
24455: LD_VAR 0 1
24459: NOT
24460: PUSH
24461: LD_VAR 0 2
24465: NOT
24466: OR
24467: IFFALSE 24471
// exit ;
24469: GO 24667
// case engine of engine_solar :
24471: LD_VAR 0 2
24475: PUSH
24476: LD_INT 2
24478: DOUBLE
24479: EQUAL
24480: IFTRUE 24484
24482: GO 24522
24484: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24485: LD_ADDR_VAR 0 3
24489: PUSH
24490: LD_INT 11
24492: PUSH
24493: LD_INT 12
24495: PUSH
24496: LD_INT 13
24498: PUSH
24499: LD_INT 14
24501: PUSH
24502: LD_INT 1
24504: PUSH
24505: LD_INT 2
24507: PUSH
24508: LD_INT 3
24510: PUSH
24511: EMPTY
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: ST_TO_ADDR
24520: GO 24651
24522: LD_INT 1
24524: DOUBLE
24525: EQUAL
24526: IFTRUE 24530
24528: GO 24592
24530: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24531: LD_ADDR_VAR 0 3
24535: PUSH
24536: LD_INT 11
24538: PUSH
24539: LD_INT 12
24541: PUSH
24542: LD_INT 13
24544: PUSH
24545: LD_INT 14
24547: PUSH
24548: LD_INT 1
24550: PUSH
24551: LD_INT 2
24553: PUSH
24554: LD_INT 3
24556: PUSH
24557: LD_INT 4
24559: PUSH
24560: LD_INT 5
24562: PUSH
24563: LD_INT 21
24565: PUSH
24566: LD_INT 23
24568: PUSH
24569: LD_INT 22
24571: PUSH
24572: LD_INT 24
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: LIST
24579: LIST
24580: LIST
24581: LIST
24582: LIST
24583: LIST
24584: LIST
24585: LIST
24586: LIST
24587: LIST
24588: LIST
24589: ST_TO_ADDR
24590: GO 24651
24592: LD_INT 3
24594: DOUBLE
24595: EQUAL
24596: IFTRUE 24600
24598: GO 24650
24600: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24601: LD_ADDR_VAR 0 3
24605: PUSH
24606: LD_INT 13
24608: PUSH
24609: LD_INT 14
24611: PUSH
24612: LD_INT 2
24614: PUSH
24615: LD_INT 3
24617: PUSH
24618: LD_INT 4
24620: PUSH
24621: LD_INT 5
24623: PUSH
24624: LD_INT 21
24626: PUSH
24627: LD_INT 22
24629: PUSH
24630: LD_INT 23
24632: PUSH
24633: LD_INT 24
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: ST_TO_ADDR
24648: GO 24651
24650: POP
// result := ( chassis in result ) ;
24651: LD_ADDR_VAR 0 3
24655: PUSH
24656: LD_VAR 0 1
24660: PUSH
24661: LD_VAR 0 3
24665: IN
24666: ST_TO_ADDR
// end ;
24667: LD_VAR 0 3
24671: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24672: LD_INT 0
24674: PPUSH
// if not chassis or not weapon then
24675: LD_VAR 0 1
24679: NOT
24680: PUSH
24681: LD_VAR 0 2
24685: NOT
24686: OR
24687: IFFALSE 24691
// exit ;
24689: GO 25753
// case weapon of us_machine_gun :
24691: LD_VAR 0 2
24695: PUSH
24696: LD_INT 2
24698: DOUBLE
24699: EQUAL
24700: IFTRUE 24704
24702: GO 24734
24704: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24705: LD_ADDR_VAR 0 3
24709: PUSH
24710: LD_INT 1
24712: PUSH
24713: LD_INT 2
24715: PUSH
24716: LD_INT 3
24718: PUSH
24719: LD_INT 4
24721: PUSH
24722: LD_INT 5
24724: PUSH
24725: EMPTY
24726: LIST
24727: LIST
24728: LIST
24729: LIST
24730: LIST
24731: ST_TO_ADDR
24732: GO 25737
24734: LD_INT 3
24736: DOUBLE
24737: EQUAL
24738: IFTRUE 24742
24740: GO 24772
24742: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24743: LD_ADDR_VAR 0 3
24747: PUSH
24748: LD_INT 1
24750: PUSH
24751: LD_INT 2
24753: PUSH
24754: LD_INT 3
24756: PUSH
24757: LD_INT 4
24759: PUSH
24760: LD_INT 5
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: LIST
24767: LIST
24768: LIST
24769: ST_TO_ADDR
24770: GO 25737
24772: LD_INT 11
24774: DOUBLE
24775: EQUAL
24776: IFTRUE 24780
24778: GO 24810
24780: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24781: LD_ADDR_VAR 0 3
24785: PUSH
24786: LD_INT 1
24788: PUSH
24789: LD_INT 2
24791: PUSH
24792: LD_INT 3
24794: PUSH
24795: LD_INT 4
24797: PUSH
24798: LD_INT 5
24800: PUSH
24801: EMPTY
24802: LIST
24803: LIST
24804: LIST
24805: LIST
24806: LIST
24807: ST_TO_ADDR
24808: GO 25737
24810: LD_INT 4
24812: DOUBLE
24813: EQUAL
24814: IFTRUE 24818
24816: GO 24844
24818: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24819: LD_ADDR_VAR 0 3
24823: PUSH
24824: LD_INT 2
24826: PUSH
24827: LD_INT 3
24829: PUSH
24830: LD_INT 4
24832: PUSH
24833: LD_INT 5
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: LIST
24840: LIST
24841: ST_TO_ADDR
24842: GO 25737
24844: LD_INT 5
24846: DOUBLE
24847: EQUAL
24848: IFTRUE 24852
24850: GO 24878
24852: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24853: LD_ADDR_VAR 0 3
24857: PUSH
24858: LD_INT 2
24860: PUSH
24861: LD_INT 3
24863: PUSH
24864: LD_INT 4
24866: PUSH
24867: LD_INT 5
24869: PUSH
24870: EMPTY
24871: LIST
24872: LIST
24873: LIST
24874: LIST
24875: ST_TO_ADDR
24876: GO 25737
24878: LD_INT 9
24880: DOUBLE
24881: EQUAL
24882: IFTRUE 24886
24884: GO 24912
24886: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
24887: LD_ADDR_VAR 0 3
24891: PUSH
24892: LD_INT 2
24894: PUSH
24895: LD_INT 3
24897: PUSH
24898: LD_INT 4
24900: PUSH
24901: LD_INT 5
24903: PUSH
24904: EMPTY
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: ST_TO_ADDR
24910: GO 25737
24912: LD_INT 7
24914: DOUBLE
24915: EQUAL
24916: IFTRUE 24920
24918: GO 24946
24920: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
24921: LD_ADDR_VAR 0 3
24925: PUSH
24926: LD_INT 2
24928: PUSH
24929: LD_INT 3
24931: PUSH
24932: LD_INT 4
24934: PUSH
24935: LD_INT 5
24937: PUSH
24938: EMPTY
24939: LIST
24940: LIST
24941: LIST
24942: LIST
24943: ST_TO_ADDR
24944: GO 25737
24946: LD_INT 12
24948: DOUBLE
24949: EQUAL
24950: IFTRUE 24954
24952: GO 24980
24954: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
24955: LD_ADDR_VAR 0 3
24959: PUSH
24960: LD_INT 2
24962: PUSH
24963: LD_INT 3
24965: PUSH
24966: LD_INT 4
24968: PUSH
24969: LD_INT 5
24971: PUSH
24972: EMPTY
24973: LIST
24974: LIST
24975: LIST
24976: LIST
24977: ST_TO_ADDR
24978: GO 25737
24980: LD_INT 13
24982: DOUBLE
24983: EQUAL
24984: IFTRUE 24988
24986: GO 25014
24988: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
24989: LD_ADDR_VAR 0 3
24993: PUSH
24994: LD_INT 2
24996: PUSH
24997: LD_INT 3
24999: PUSH
25000: LD_INT 4
25002: PUSH
25003: LD_INT 5
25005: PUSH
25006: EMPTY
25007: LIST
25008: LIST
25009: LIST
25010: LIST
25011: ST_TO_ADDR
25012: GO 25737
25014: LD_INT 14
25016: DOUBLE
25017: EQUAL
25018: IFTRUE 25022
25020: GO 25040
25022: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25023: LD_ADDR_VAR 0 3
25027: PUSH
25028: LD_INT 4
25030: PUSH
25031: LD_INT 5
25033: PUSH
25034: EMPTY
25035: LIST
25036: LIST
25037: ST_TO_ADDR
25038: GO 25737
25040: LD_INT 6
25042: DOUBLE
25043: EQUAL
25044: IFTRUE 25048
25046: GO 25066
25048: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25049: LD_ADDR_VAR 0 3
25053: PUSH
25054: LD_INT 4
25056: PUSH
25057: LD_INT 5
25059: PUSH
25060: EMPTY
25061: LIST
25062: LIST
25063: ST_TO_ADDR
25064: GO 25737
25066: LD_INT 10
25068: DOUBLE
25069: EQUAL
25070: IFTRUE 25074
25072: GO 25092
25074: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25075: LD_ADDR_VAR 0 3
25079: PUSH
25080: LD_INT 4
25082: PUSH
25083: LD_INT 5
25085: PUSH
25086: EMPTY
25087: LIST
25088: LIST
25089: ST_TO_ADDR
25090: GO 25737
25092: LD_INT 22
25094: DOUBLE
25095: EQUAL
25096: IFTRUE 25100
25098: GO 25126
25100: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25101: LD_ADDR_VAR 0 3
25105: PUSH
25106: LD_INT 11
25108: PUSH
25109: LD_INT 12
25111: PUSH
25112: LD_INT 13
25114: PUSH
25115: LD_INT 14
25117: PUSH
25118: EMPTY
25119: LIST
25120: LIST
25121: LIST
25122: LIST
25123: ST_TO_ADDR
25124: GO 25737
25126: LD_INT 23
25128: DOUBLE
25129: EQUAL
25130: IFTRUE 25134
25132: GO 25160
25134: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25135: LD_ADDR_VAR 0 3
25139: PUSH
25140: LD_INT 11
25142: PUSH
25143: LD_INT 12
25145: PUSH
25146: LD_INT 13
25148: PUSH
25149: LD_INT 14
25151: PUSH
25152: EMPTY
25153: LIST
25154: LIST
25155: LIST
25156: LIST
25157: ST_TO_ADDR
25158: GO 25737
25160: LD_INT 24
25162: DOUBLE
25163: EQUAL
25164: IFTRUE 25168
25166: GO 25194
25168: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25169: LD_ADDR_VAR 0 3
25173: PUSH
25174: LD_INT 11
25176: PUSH
25177: LD_INT 12
25179: PUSH
25180: LD_INT 13
25182: PUSH
25183: LD_INT 14
25185: PUSH
25186: EMPTY
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: ST_TO_ADDR
25192: GO 25737
25194: LD_INT 30
25196: DOUBLE
25197: EQUAL
25198: IFTRUE 25202
25200: GO 25228
25202: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25203: LD_ADDR_VAR 0 3
25207: PUSH
25208: LD_INT 11
25210: PUSH
25211: LD_INT 12
25213: PUSH
25214: LD_INT 13
25216: PUSH
25217: LD_INT 14
25219: PUSH
25220: EMPTY
25221: LIST
25222: LIST
25223: LIST
25224: LIST
25225: ST_TO_ADDR
25226: GO 25737
25228: LD_INT 25
25230: DOUBLE
25231: EQUAL
25232: IFTRUE 25236
25234: GO 25254
25236: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25237: LD_ADDR_VAR 0 3
25241: PUSH
25242: LD_INT 13
25244: PUSH
25245: LD_INT 14
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: ST_TO_ADDR
25252: GO 25737
25254: LD_INT 27
25256: DOUBLE
25257: EQUAL
25258: IFTRUE 25262
25260: GO 25280
25262: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
25263: LD_ADDR_VAR 0 3
25267: PUSH
25268: LD_INT 13
25270: PUSH
25271: LD_INT 14
25273: PUSH
25274: EMPTY
25275: LIST
25276: LIST
25277: ST_TO_ADDR
25278: GO 25737
25280: LD_EXP 87
25284: DOUBLE
25285: EQUAL
25286: IFTRUE 25290
25288: GO 25316
25290: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25291: LD_ADDR_VAR 0 3
25295: PUSH
25296: LD_INT 11
25298: PUSH
25299: LD_INT 12
25301: PUSH
25302: LD_INT 13
25304: PUSH
25305: LD_INT 14
25307: PUSH
25308: EMPTY
25309: LIST
25310: LIST
25311: LIST
25312: LIST
25313: ST_TO_ADDR
25314: GO 25737
25316: LD_INT 28
25318: DOUBLE
25319: EQUAL
25320: IFTRUE 25324
25322: GO 25342
25324: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25325: LD_ADDR_VAR 0 3
25329: PUSH
25330: LD_INT 13
25332: PUSH
25333: LD_INT 14
25335: PUSH
25336: EMPTY
25337: LIST
25338: LIST
25339: ST_TO_ADDR
25340: GO 25737
25342: LD_INT 29
25344: DOUBLE
25345: EQUAL
25346: IFTRUE 25350
25348: GO 25368
25350: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25351: LD_ADDR_VAR 0 3
25355: PUSH
25356: LD_INT 13
25358: PUSH
25359: LD_INT 14
25361: PUSH
25362: EMPTY
25363: LIST
25364: LIST
25365: ST_TO_ADDR
25366: GO 25737
25368: LD_INT 31
25370: DOUBLE
25371: EQUAL
25372: IFTRUE 25376
25374: GO 25394
25376: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25377: LD_ADDR_VAR 0 3
25381: PUSH
25382: LD_INT 13
25384: PUSH
25385: LD_INT 14
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: ST_TO_ADDR
25392: GO 25737
25394: LD_INT 26
25396: DOUBLE
25397: EQUAL
25398: IFTRUE 25402
25400: GO 25420
25402: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25403: LD_ADDR_VAR 0 3
25407: PUSH
25408: LD_INT 13
25410: PUSH
25411: LD_INT 14
25413: PUSH
25414: EMPTY
25415: LIST
25416: LIST
25417: ST_TO_ADDR
25418: GO 25737
25420: LD_INT 42
25422: DOUBLE
25423: EQUAL
25424: IFTRUE 25428
25426: GO 25454
25428: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25429: LD_ADDR_VAR 0 3
25433: PUSH
25434: LD_INT 21
25436: PUSH
25437: LD_INT 22
25439: PUSH
25440: LD_INT 23
25442: PUSH
25443: LD_INT 24
25445: PUSH
25446: EMPTY
25447: LIST
25448: LIST
25449: LIST
25450: LIST
25451: ST_TO_ADDR
25452: GO 25737
25454: LD_INT 43
25456: DOUBLE
25457: EQUAL
25458: IFTRUE 25462
25460: GO 25488
25462: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25463: LD_ADDR_VAR 0 3
25467: PUSH
25468: LD_INT 21
25470: PUSH
25471: LD_INT 22
25473: PUSH
25474: LD_INT 23
25476: PUSH
25477: LD_INT 24
25479: PUSH
25480: EMPTY
25481: LIST
25482: LIST
25483: LIST
25484: LIST
25485: ST_TO_ADDR
25486: GO 25737
25488: LD_INT 44
25490: DOUBLE
25491: EQUAL
25492: IFTRUE 25496
25494: GO 25522
25496: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25497: LD_ADDR_VAR 0 3
25501: PUSH
25502: LD_INT 21
25504: PUSH
25505: LD_INT 22
25507: PUSH
25508: LD_INT 23
25510: PUSH
25511: LD_INT 24
25513: PUSH
25514: EMPTY
25515: LIST
25516: LIST
25517: LIST
25518: LIST
25519: ST_TO_ADDR
25520: GO 25737
25522: LD_INT 45
25524: DOUBLE
25525: EQUAL
25526: IFTRUE 25530
25528: GO 25556
25530: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25531: LD_ADDR_VAR 0 3
25535: PUSH
25536: LD_INT 21
25538: PUSH
25539: LD_INT 22
25541: PUSH
25542: LD_INT 23
25544: PUSH
25545: LD_INT 24
25547: PUSH
25548: EMPTY
25549: LIST
25550: LIST
25551: LIST
25552: LIST
25553: ST_TO_ADDR
25554: GO 25737
25556: LD_INT 49
25558: DOUBLE
25559: EQUAL
25560: IFTRUE 25564
25562: GO 25590
25564: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25565: LD_ADDR_VAR 0 3
25569: PUSH
25570: LD_INT 21
25572: PUSH
25573: LD_INT 22
25575: PUSH
25576: LD_INT 23
25578: PUSH
25579: LD_INT 24
25581: PUSH
25582: EMPTY
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: ST_TO_ADDR
25588: GO 25737
25590: LD_INT 51
25592: DOUBLE
25593: EQUAL
25594: IFTRUE 25598
25596: GO 25624
25598: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25599: LD_ADDR_VAR 0 3
25603: PUSH
25604: LD_INT 21
25606: PUSH
25607: LD_INT 22
25609: PUSH
25610: LD_INT 23
25612: PUSH
25613: LD_INT 24
25615: PUSH
25616: EMPTY
25617: LIST
25618: LIST
25619: LIST
25620: LIST
25621: ST_TO_ADDR
25622: GO 25737
25624: LD_INT 52
25626: DOUBLE
25627: EQUAL
25628: IFTRUE 25632
25630: GO 25658
25632: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25633: LD_ADDR_VAR 0 3
25637: PUSH
25638: LD_INT 21
25640: PUSH
25641: LD_INT 22
25643: PUSH
25644: LD_INT 23
25646: PUSH
25647: LD_INT 24
25649: PUSH
25650: EMPTY
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: ST_TO_ADDR
25656: GO 25737
25658: LD_INT 53
25660: DOUBLE
25661: EQUAL
25662: IFTRUE 25666
25664: GO 25684
25666: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25667: LD_ADDR_VAR 0 3
25671: PUSH
25672: LD_INT 23
25674: PUSH
25675: LD_INT 24
25677: PUSH
25678: EMPTY
25679: LIST
25680: LIST
25681: ST_TO_ADDR
25682: GO 25737
25684: LD_INT 46
25686: DOUBLE
25687: EQUAL
25688: IFTRUE 25692
25690: GO 25710
25692: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25693: LD_ADDR_VAR 0 3
25697: PUSH
25698: LD_INT 23
25700: PUSH
25701: LD_INT 24
25703: PUSH
25704: EMPTY
25705: LIST
25706: LIST
25707: ST_TO_ADDR
25708: GO 25737
25710: LD_INT 47
25712: DOUBLE
25713: EQUAL
25714: IFTRUE 25718
25716: GO 25736
25718: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25719: LD_ADDR_VAR 0 3
25723: PUSH
25724: LD_INT 23
25726: PUSH
25727: LD_INT 24
25729: PUSH
25730: EMPTY
25731: LIST
25732: LIST
25733: ST_TO_ADDR
25734: GO 25737
25736: POP
// result := ( chassis in result ) ;
25737: LD_ADDR_VAR 0 3
25741: PUSH
25742: LD_VAR 0 1
25746: PUSH
25747: LD_VAR 0 3
25751: IN
25752: ST_TO_ADDR
// end ;
25753: LD_VAR 0 3
25757: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25758: LD_INT 0
25760: PPUSH
25761: PPUSH
25762: PPUSH
25763: PPUSH
25764: PPUSH
25765: PPUSH
25766: PPUSH
// result := array ;
25767: LD_ADDR_VAR 0 5
25771: PUSH
25772: LD_VAR 0 1
25776: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25777: LD_VAR 0 1
25781: NOT
25782: PUSH
25783: LD_VAR 0 2
25787: NOT
25788: OR
25789: PUSH
25790: LD_VAR 0 3
25794: NOT
25795: OR
25796: PUSH
25797: LD_VAR 0 2
25801: PUSH
25802: LD_VAR 0 1
25806: GREATER
25807: OR
25808: PUSH
25809: LD_VAR 0 3
25813: PUSH
25814: LD_VAR 0 1
25818: GREATER
25819: OR
25820: IFFALSE 25824
// exit ;
25822: GO 26120
// if direction then
25824: LD_VAR 0 4
25828: IFFALSE 25892
// begin d := 1 ;
25830: LD_ADDR_VAR 0 9
25834: PUSH
25835: LD_INT 1
25837: ST_TO_ADDR
// if i_from > i_to then
25838: LD_VAR 0 2
25842: PUSH
25843: LD_VAR 0 3
25847: GREATER
25848: IFFALSE 25874
// length := ( array - i_from ) + i_to else
25850: LD_ADDR_VAR 0 11
25854: PUSH
25855: LD_VAR 0 1
25859: PUSH
25860: LD_VAR 0 2
25864: MINUS
25865: PUSH
25866: LD_VAR 0 3
25870: PLUS
25871: ST_TO_ADDR
25872: GO 25890
// length := i_to - i_from ;
25874: LD_ADDR_VAR 0 11
25878: PUSH
25879: LD_VAR 0 3
25883: PUSH
25884: LD_VAR 0 2
25888: MINUS
25889: ST_TO_ADDR
// end else
25890: GO 25953
// begin d := - 1 ;
25892: LD_ADDR_VAR 0 9
25896: PUSH
25897: LD_INT 1
25899: NEG
25900: ST_TO_ADDR
// if i_from > i_to then
25901: LD_VAR 0 2
25905: PUSH
25906: LD_VAR 0 3
25910: GREATER
25911: IFFALSE 25931
// length := i_from - i_to else
25913: LD_ADDR_VAR 0 11
25917: PUSH
25918: LD_VAR 0 2
25922: PUSH
25923: LD_VAR 0 3
25927: MINUS
25928: ST_TO_ADDR
25929: GO 25953
// length := ( array - i_to ) + i_from ;
25931: LD_ADDR_VAR 0 11
25935: PUSH
25936: LD_VAR 0 1
25940: PUSH
25941: LD_VAR 0 3
25945: MINUS
25946: PUSH
25947: LD_VAR 0 2
25951: PLUS
25952: ST_TO_ADDR
// end ; if not length then
25953: LD_VAR 0 11
25957: NOT
25958: IFFALSE 25962
// exit ;
25960: GO 26120
// tmp := array ;
25962: LD_ADDR_VAR 0 10
25966: PUSH
25967: LD_VAR 0 1
25971: ST_TO_ADDR
// for i = 1 to length do
25972: LD_ADDR_VAR 0 6
25976: PUSH
25977: DOUBLE
25978: LD_INT 1
25980: DEC
25981: ST_TO_ADDR
25982: LD_VAR 0 11
25986: PUSH
25987: FOR_TO
25988: IFFALSE 26108
// begin for j = 1 to array do
25990: LD_ADDR_VAR 0 7
25994: PUSH
25995: DOUBLE
25996: LD_INT 1
25998: DEC
25999: ST_TO_ADDR
26000: LD_VAR 0 1
26004: PUSH
26005: FOR_TO
26006: IFFALSE 26094
// begin k := j + d ;
26008: LD_ADDR_VAR 0 8
26012: PUSH
26013: LD_VAR 0 7
26017: PUSH
26018: LD_VAR 0 9
26022: PLUS
26023: ST_TO_ADDR
// if k > array then
26024: LD_VAR 0 8
26028: PUSH
26029: LD_VAR 0 1
26033: GREATER
26034: IFFALSE 26044
// k := 1 ;
26036: LD_ADDR_VAR 0 8
26040: PUSH
26041: LD_INT 1
26043: ST_TO_ADDR
// if not k then
26044: LD_VAR 0 8
26048: NOT
26049: IFFALSE 26061
// k := array ;
26051: LD_ADDR_VAR 0 8
26055: PUSH
26056: LD_VAR 0 1
26060: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26061: LD_ADDR_VAR 0 10
26065: PUSH
26066: LD_VAR 0 10
26070: PPUSH
26071: LD_VAR 0 8
26075: PPUSH
26076: LD_VAR 0 1
26080: PUSH
26081: LD_VAR 0 7
26085: ARRAY
26086: PPUSH
26087: CALL_OW 1
26091: ST_TO_ADDR
// end ;
26092: GO 26005
26094: POP
26095: POP
// array := tmp ;
26096: LD_ADDR_VAR 0 1
26100: PUSH
26101: LD_VAR 0 10
26105: ST_TO_ADDR
// end ;
26106: GO 25987
26108: POP
26109: POP
// result := array ;
26110: LD_ADDR_VAR 0 5
26114: PUSH
26115: LD_VAR 0 1
26119: ST_TO_ADDR
// end ;
26120: LD_VAR 0 5
26124: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26125: LD_INT 0
26127: PPUSH
26128: PPUSH
// result := 0 ;
26129: LD_ADDR_VAR 0 3
26133: PUSH
26134: LD_INT 0
26136: ST_TO_ADDR
// if not array or not value in array then
26137: LD_VAR 0 1
26141: NOT
26142: PUSH
26143: LD_VAR 0 2
26147: PUSH
26148: LD_VAR 0 1
26152: IN
26153: NOT
26154: OR
26155: IFFALSE 26159
// exit ;
26157: GO 26213
// for i = 1 to array do
26159: LD_ADDR_VAR 0 4
26163: PUSH
26164: DOUBLE
26165: LD_INT 1
26167: DEC
26168: ST_TO_ADDR
26169: LD_VAR 0 1
26173: PUSH
26174: FOR_TO
26175: IFFALSE 26211
// if value = array [ i ] then
26177: LD_VAR 0 2
26181: PUSH
26182: LD_VAR 0 1
26186: PUSH
26187: LD_VAR 0 4
26191: ARRAY
26192: EQUAL
26193: IFFALSE 26209
// begin result := i ;
26195: LD_ADDR_VAR 0 3
26199: PUSH
26200: LD_VAR 0 4
26204: ST_TO_ADDR
// exit ;
26205: POP
26206: POP
26207: GO 26213
// end ;
26209: GO 26174
26211: POP
26212: POP
// end ;
26213: LD_VAR 0 3
26217: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26218: LD_INT 0
26220: PPUSH
// vc_chassis := chassis ;
26221: LD_ADDR_OWVAR 37
26225: PUSH
26226: LD_VAR 0 1
26230: ST_TO_ADDR
// vc_engine := engine ;
26231: LD_ADDR_OWVAR 39
26235: PUSH
26236: LD_VAR 0 2
26240: ST_TO_ADDR
// vc_control := control ;
26241: LD_ADDR_OWVAR 38
26245: PUSH
26246: LD_VAR 0 3
26250: ST_TO_ADDR
// vc_weapon := weapon ;
26251: LD_ADDR_OWVAR 40
26255: PUSH
26256: LD_VAR 0 4
26260: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26261: LD_ADDR_OWVAR 41
26265: PUSH
26266: LD_VAR 0 5
26270: ST_TO_ADDR
// end ;
26271: LD_VAR 0 6
26275: RET
// export function WantPlant ( unit ) ; var task ; begin
26276: LD_INT 0
26278: PPUSH
26279: PPUSH
// result := false ;
26280: LD_ADDR_VAR 0 2
26284: PUSH
26285: LD_INT 0
26287: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26288: LD_ADDR_VAR 0 3
26292: PUSH
26293: LD_VAR 0 1
26297: PPUSH
26298: CALL_OW 437
26302: ST_TO_ADDR
// if task then
26303: LD_VAR 0 3
26307: IFFALSE 26335
// if task [ 1 ] [ 1 ] = p then
26309: LD_VAR 0 3
26313: PUSH
26314: LD_INT 1
26316: ARRAY
26317: PUSH
26318: LD_INT 1
26320: ARRAY
26321: PUSH
26322: LD_STRING p
26324: EQUAL
26325: IFFALSE 26335
// result := true ;
26327: LD_ADDR_VAR 0 2
26331: PUSH
26332: LD_INT 1
26334: ST_TO_ADDR
// end ;
26335: LD_VAR 0 2
26339: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26340: LD_INT 0
26342: PPUSH
26343: PPUSH
26344: PPUSH
26345: PPUSH
// if pos < 1 then
26346: LD_VAR 0 2
26350: PUSH
26351: LD_INT 1
26353: LESS
26354: IFFALSE 26358
// exit ;
26356: GO 26661
// if pos = 1 then
26358: LD_VAR 0 2
26362: PUSH
26363: LD_INT 1
26365: EQUAL
26366: IFFALSE 26399
// result := Replace ( arr , pos [ 1 ] , value ) else
26368: LD_ADDR_VAR 0 4
26372: PUSH
26373: LD_VAR 0 1
26377: PPUSH
26378: LD_VAR 0 2
26382: PUSH
26383: LD_INT 1
26385: ARRAY
26386: PPUSH
26387: LD_VAR 0 3
26391: PPUSH
26392: CALL_OW 1
26396: ST_TO_ADDR
26397: GO 26661
// begin tmp := arr ;
26399: LD_ADDR_VAR 0 6
26403: PUSH
26404: LD_VAR 0 1
26408: ST_TO_ADDR
// s_arr := [ tmp ] ;
26409: LD_ADDR_VAR 0 7
26413: PUSH
26414: LD_VAR 0 6
26418: PUSH
26419: EMPTY
26420: LIST
26421: ST_TO_ADDR
// for i = 1 to pos - 1 do
26422: LD_ADDR_VAR 0 5
26426: PUSH
26427: DOUBLE
26428: LD_INT 1
26430: DEC
26431: ST_TO_ADDR
26432: LD_VAR 0 2
26436: PUSH
26437: LD_INT 1
26439: MINUS
26440: PUSH
26441: FOR_TO
26442: IFFALSE 26487
// begin tmp := tmp [ pos [ i ] ] ;
26444: LD_ADDR_VAR 0 6
26448: PUSH
26449: LD_VAR 0 6
26453: PUSH
26454: LD_VAR 0 2
26458: PUSH
26459: LD_VAR 0 5
26463: ARRAY
26464: ARRAY
26465: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26466: LD_ADDR_VAR 0 7
26470: PUSH
26471: LD_VAR 0 7
26475: PUSH
26476: LD_VAR 0 6
26480: PUSH
26481: EMPTY
26482: LIST
26483: ADD
26484: ST_TO_ADDR
// end ;
26485: GO 26441
26487: POP
26488: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26489: LD_ADDR_VAR 0 6
26493: PUSH
26494: LD_VAR 0 6
26498: PPUSH
26499: LD_VAR 0 2
26503: PUSH
26504: LD_VAR 0 2
26508: ARRAY
26509: PPUSH
26510: LD_VAR 0 3
26514: PPUSH
26515: CALL_OW 1
26519: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26520: LD_ADDR_VAR 0 7
26524: PUSH
26525: LD_VAR 0 7
26529: PPUSH
26530: LD_VAR 0 7
26534: PPUSH
26535: LD_VAR 0 6
26539: PPUSH
26540: CALL_OW 1
26544: ST_TO_ADDR
// for i = s_arr downto 2 do
26545: LD_ADDR_VAR 0 5
26549: PUSH
26550: DOUBLE
26551: LD_VAR 0 7
26555: INC
26556: ST_TO_ADDR
26557: LD_INT 2
26559: PUSH
26560: FOR_DOWNTO
26561: IFFALSE 26645
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26563: LD_ADDR_VAR 0 6
26567: PUSH
26568: LD_VAR 0 7
26572: PUSH
26573: LD_VAR 0 5
26577: PUSH
26578: LD_INT 1
26580: MINUS
26581: ARRAY
26582: PPUSH
26583: LD_VAR 0 2
26587: PUSH
26588: LD_VAR 0 5
26592: PUSH
26593: LD_INT 1
26595: MINUS
26596: ARRAY
26597: PPUSH
26598: LD_VAR 0 7
26602: PUSH
26603: LD_VAR 0 5
26607: ARRAY
26608: PPUSH
26609: CALL_OW 1
26613: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26614: LD_ADDR_VAR 0 7
26618: PUSH
26619: LD_VAR 0 7
26623: PPUSH
26624: LD_VAR 0 5
26628: PUSH
26629: LD_INT 1
26631: MINUS
26632: PPUSH
26633: LD_VAR 0 6
26637: PPUSH
26638: CALL_OW 1
26642: ST_TO_ADDR
// end ;
26643: GO 26560
26645: POP
26646: POP
// result := s_arr [ 1 ] ;
26647: LD_ADDR_VAR 0 4
26651: PUSH
26652: LD_VAR 0 7
26656: PUSH
26657: LD_INT 1
26659: ARRAY
26660: ST_TO_ADDR
// end ; end ;
26661: LD_VAR 0 4
26665: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26666: LD_INT 0
26668: PPUSH
26669: PPUSH
// if not list then
26670: LD_VAR 0 1
26674: NOT
26675: IFFALSE 26679
// exit ;
26677: GO 26770
// i := list [ pos1 ] ;
26679: LD_ADDR_VAR 0 5
26683: PUSH
26684: LD_VAR 0 1
26688: PUSH
26689: LD_VAR 0 2
26693: ARRAY
26694: ST_TO_ADDR
// if not i then
26695: LD_VAR 0 5
26699: NOT
26700: IFFALSE 26704
// exit ;
26702: GO 26770
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26704: LD_ADDR_VAR 0 1
26708: PUSH
26709: LD_VAR 0 1
26713: PPUSH
26714: LD_VAR 0 2
26718: PPUSH
26719: LD_VAR 0 1
26723: PUSH
26724: LD_VAR 0 3
26728: ARRAY
26729: PPUSH
26730: CALL_OW 1
26734: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26735: LD_ADDR_VAR 0 1
26739: PUSH
26740: LD_VAR 0 1
26744: PPUSH
26745: LD_VAR 0 3
26749: PPUSH
26750: LD_VAR 0 5
26754: PPUSH
26755: CALL_OW 1
26759: ST_TO_ADDR
// result := list ;
26760: LD_ADDR_VAR 0 4
26764: PUSH
26765: LD_VAR 0 1
26769: ST_TO_ADDR
// end ;
26770: LD_VAR 0 4
26774: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26775: LD_INT 0
26777: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26778: LD_ADDR_VAR 0 5
26782: PUSH
26783: LD_VAR 0 1
26787: PPUSH
26788: CALL_OW 250
26792: PPUSH
26793: LD_VAR 0 1
26797: PPUSH
26798: CALL_OW 251
26802: PPUSH
26803: LD_VAR 0 2
26807: PPUSH
26808: LD_VAR 0 3
26812: PPUSH
26813: LD_VAR 0 4
26817: PPUSH
26818: CALL 26828 0 5
26822: ST_TO_ADDR
// end ;
26823: LD_VAR 0 5
26827: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26828: LD_INT 0
26830: PPUSH
26831: PPUSH
26832: PPUSH
26833: PPUSH
// if not list then
26834: LD_VAR 0 3
26838: NOT
26839: IFFALSE 26843
// exit ;
26841: GO 27231
// result := [ ] ;
26843: LD_ADDR_VAR 0 6
26847: PUSH
26848: EMPTY
26849: ST_TO_ADDR
// for i in list do
26850: LD_ADDR_VAR 0 7
26854: PUSH
26855: LD_VAR 0 3
26859: PUSH
26860: FOR_IN
26861: IFFALSE 27063
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26863: LD_ADDR_VAR 0 9
26867: PUSH
26868: LD_VAR 0 7
26872: PPUSH
26873: LD_VAR 0 1
26877: PPUSH
26878: LD_VAR 0 2
26882: PPUSH
26883: CALL_OW 297
26887: ST_TO_ADDR
// if not result then
26888: LD_VAR 0 6
26892: NOT
26893: IFFALSE 26919
// result := [ [ i , tmp ] ] else
26895: LD_ADDR_VAR 0 6
26899: PUSH
26900: LD_VAR 0 7
26904: PUSH
26905: LD_VAR 0 9
26909: PUSH
26910: EMPTY
26911: LIST
26912: LIST
26913: PUSH
26914: EMPTY
26915: LIST
26916: ST_TO_ADDR
26917: GO 27061
// begin if result [ result ] [ 2 ] < tmp then
26919: LD_VAR 0 6
26923: PUSH
26924: LD_VAR 0 6
26928: ARRAY
26929: PUSH
26930: LD_INT 2
26932: ARRAY
26933: PUSH
26934: LD_VAR 0 9
26938: LESS
26939: IFFALSE 26981
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
26941: LD_ADDR_VAR 0 6
26945: PUSH
26946: LD_VAR 0 6
26950: PPUSH
26951: LD_VAR 0 6
26955: PUSH
26956: LD_INT 1
26958: PLUS
26959: PPUSH
26960: LD_VAR 0 7
26964: PUSH
26965: LD_VAR 0 9
26969: PUSH
26970: EMPTY
26971: LIST
26972: LIST
26973: PPUSH
26974: CALL_OW 2
26978: ST_TO_ADDR
26979: GO 27061
// for j = 1 to result do
26981: LD_ADDR_VAR 0 8
26985: PUSH
26986: DOUBLE
26987: LD_INT 1
26989: DEC
26990: ST_TO_ADDR
26991: LD_VAR 0 6
26995: PUSH
26996: FOR_TO
26997: IFFALSE 27059
// begin if tmp < result [ j ] [ 2 ] then
26999: LD_VAR 0 9
27003: PUSH
27004: LD_VAR 0 6
27008: PUSH
27009: LD_VAR 0 8
27013: ARRAY
27014: PUSH
27015: LD_INT 2
27017: ARRAY
27018: LESS
27019: IFFALSE 27057
// begin result := Insert ( result , j , [ i , tmp ] ) ;
27021: LD_ADDR_VAR 0 6
27025: PUSH
27026: LD_VAR 0 6
27030: PPUSH
27031: LD_VAR 0 8
27035: PPUSH
27036: LD_VAR 0 7
27040: PUSH
27041: LD_VAR 0 9
27045: PUSH
27046: EMPTY
27047: LIST
27048: LIST
27049: PPUSH
27050: CALL_OW 2
27054: ST_TO_ADDR
// break ;
27055: GO 27059
// end ; end ;
27057: GO 26996
27059: POP
27060: POP
// end ; end ;
27061: GO 26860
27063: POP
27064: POP
// if result and not asc then
27065: LD_VAR 0 6
27069: PUSH
27070: LD_VAR 0 4
27074: NOT
27075: AND
27076: IFFALSE 27151
// begin tmp := result ;
27078: LD_ADDR_VAR 0 9
27082: PUSH
27083: LD_VAR 0 6
27087: ST_TO_ADDR
// for i = tmp downto 1 do
27088: LD_ADDR_VAR 0 7
27092: PUSH
27093: DOUBLE
27094: LD_VAR 0 9
27098: INC
27099: ST_TO_ADDR
27100: LD_INT 1
27102: PUSH
27103: FOR_DOWNTO
27104: IFFALSE 27149
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27106: LD_ADDR_VAR 0 6
27110: PUSH
27111: LD_VAR 0 6
27115: PPUSH
27116: LD_VAR 0 9
27120: PUSH
27121: LD_VAR 0 7
27125: MINUS
27126: PUSH
27127: LD_INT 1
27129: PLUS
27130: PPUSH
27131: LD_VAR 0 9
27135: PUSH
27136: LD_VAR 0 7
27140: ARRAY
27141: PPUSH
27142: CALL_OW 1
27146: ST_TO_ADDR
27147: GO 27103
27149: POP
27150: POP
// end ; tmp := [ ] ;
27151: LD_ADDR_VAR 0 9
27155: PUSH
27156: EMPTY
27157: ST_TO_ADDR
// if mode then
27158: LD_VAR 0 5
27162: IFFALSE 27231
// begin for i = 1 to result do
27164: LD_ADDR_VAR 0 7
27168: PUSH
27169: DOUBLE
27170: LD_INT 1
27172: DEC
27173: ST_TO_ADDR
27174: LD_VAR 0 6
27178: PUSH
27179: FOR_TO
27180: IFFALSE 27219
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27182: LD_ADDR_VAR 0 9
27186: PUSH
27187: LD_VAR 0 9
27191: PPUSH
27192: LD_VAR 0 7
27196: PPUSH
27197: LD_VAR 0 6
27201: PUSH
27202: LD_VAR 0 7
27206: ARRAY
27207: PUSH
27208: LD_INT 1
27210: ARRAY
27211: PPUSH
27212: CALL_OW 1
27216: ST_TO_ADDR
27217: GO 27179
27219: POP
27220: POP
// result := tmp ;
27221: LD_ADDR_VAR 0 6
27225: PUSH
27226: LD_VAR 0 9
27230: ST_TO_ADDR
// end ; end ;
27231: LD_VAR 0 6
27235: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27236: LD_INT 0
27238: PPUSH
27239: PPUSH
27240: PPUSH
27241: PPUSH
27242: PPUSH
27243: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27244: LD_ADDR_VAR 0 5
27248: PUSH
27249: LD_INT 0
27251: PUSH
27252: LD_INT 0
27254: PUSH
27255: LD_INT 0
27257: PUSH
27258: EMPTY
27259: PUSH
27260: EMPTY
27261: LIST
27262: LIST
27263: LIST
27264: LIST
27265: ST_TO_ADDR
// if not x or not y then
27266: LD_VAR 0 2
27270: NOT
27271: PUSH
27272: LD_VAR 0 3
27276: NOT
27277: OR
27278: IFFALSE 27282
// exit ;
27280: GO 28934
// if not range then
27282: LD_VAR 0 4
27286: NOT
27287: IFFALSE 27297
// range := 10 ;
27289: LD_ADDR_VAR 0 4
27293: PUSH
27294: LD_INT 10
27296: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27297: LD_ADDR_VAR 0 8
27301: PUSH
27302: LD_INT 81
27304: PUSH
27305: LD_VAR 0 1
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: PUSH
27314: LD_INT 92
27316: PUSH
27317: LD_VAR 0 2
27321: PUSH
27322: LD_VAR 0 3
27326: PUSH
27327: LD_VAR 0 4
27331: PUSH
27332: EMPTY
27333: LIST
27334: LIST
27335: LIST
27336: LIST
27337: PUSH
27338: LD_INT 3
27340: PUSH
27341: LD_INT 21
27343: PUSH
27344: LD_INT 3
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: PUSH
27355: EMPTY
27356: LIST
27357: LIST
27358: LIST
27359: PPUSH
27360: CALL_OW 69
27364: ST_TO_ADDR
// if not tmp then
27365: LD_VAR 0 8
27369: NOT
27370: IFFALSE 27374
// exit ;
27372: GO 28934
// for i in tmp do
27374: LD_ADDR_VAR 0 6
27378: PUSH
27379: LD_VAR 0 8
27383: PUSH
27384: FOR_IN
27385: IFFALSE 28909
// begin points := [ 0 , 0 , 0 ] ;
27387: LD_ADDR_VAR 0 9
27391: PUSH
27392: LD_INT 0
27394: PUSH
27395: LD_INT 0
27397: PUSH
27398: LD_INT 0
27400: PUSH
27401: EMPTY
27402: LIST
27403: LIST
27404: LIST
27405: ST_TO_ADDR
// bpoints := 1 ;
27406: LD_ADDR_VAR 0 10
27410: PUSH
27411: LD_INT 1
27413: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27414: LD_VAR 0 6
27418: PPUSH
27419: CALL_OW 247
27423: PUSH
27424: LD_INT 1
27426: DOUBLE
27427: EQUAL
27428: IFTRUE 27432
27430: GO 28010
27432: POP
// begin if GetClass ( i ) = 1 then
27433: LD_VAR 0 6
27437: PPUSH
27438: CALL_OW 257
27442: PUSH
27443: LD_INT 1
27445: EQUAL
27446: IFFALSE 27467
// points := [ 10 , 5 , 3 ] ;
27448: LD_ADDR_VAR 0 9
27452: PUSH
27453: LD_INT 10
27455: PUSH
27456: LD_INT 5
27458: PUSH
27459: LD_INT 3
27461: PUSH
27462: EMPTY
27463: LIST
27464: LIST
27465: LIST
27466: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27467: LD_VAR 0 6
27471: PPUSH
27472: CALL_OW 257
27476: PUSH
27477: LD_INT 2
27479: PUSH
27480: LD_INT 3
27482: PUSH
27483: LD_INT 4
27485: PUSH
27486: EMPTY
27487: LIST
27488: LIST
27489: LIST
27490: IN
27491: IFFALSE 27512
// points := [ 3 , 2 , 1 ] ;
27493: LD_ADDR_VAR 0 9
27497: PUSH
27498: LD_INT 3
27500: PUSH
27501: LD_INT 2
27503: PUSH
27504: LD_INT 1
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: LIST
27511: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27512: LD_VAR 0 6
27516: PPUSH
27517: CALL_OW 257
27521: PUSH
27522: LD_INT 5
27524: EQUAL
27525: IFFALSE 27546
// points := [ 130 , 5 , 2 ] ;
27527: LD_ADDR_VAR 0 9
27531: PUSH
27532: LD_INT 130
27534: PUSH
27535: LD_INT 5
27537: PUSH
27538: LD_INT 2
27540: PUSH
27541: EMPTY
27542: LIST
27543: LIST
27544: LIST
27545: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27546: LD_VAR 0 6
27550: PPUSH
27551: CALL_OW 257
27555: PUSH
27556: LD_INT 8
27558: EQUAL
27559: IFFALSE 27580
// points := [ 35 , 35 , 30 ] ;
27561: LD_ADDR_VAR 0 9
27565: PUSH
27566: LD_INT 35
27568: PUSH
27569: LD_INT 35
27571: PUSH
27572: LD_INT 30
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: LIST
27579: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27580: LD_VAR 0 6
27584: PPUSH
27585: CALL_OW 257
27589: PUSH
27590: LD_INT 9
27592: EQUAL
27593: IFFALSE 27614
// points := [ 20 , 55 , 40 ] ;
27595: LD_ADDR_VAR 0 9
27599: PUSH
27600: LD_INT 20
27602: PUSH
27603: LD_INT 55
27605: PUSH
27606: LD_INT 40
27608: PUSH
27609: EMPTY
27610: LIST
27611: LIST
27612: LIST
27613: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27614: LD_VAR 0 6
27618: PPUSH
27619: CALL_OW 257
27623: PUSH
27624: LD_INT 12
27626: PUSH
27627: LD_INT 16
27629: PUSH
27630: EMPTY
27631: LIST
27632: LIST
27633: IN
27634: IFFALSE 27655
// points := [ 5 , 3 , 2 ] ;
27636: LD_ADDR_VAR 0 9
27640: PUSH
27641: LD_INT 5
27643: PUSH
27644: LD_INT 3
27646: PUSH
27647: LD_INT 2
27649: PUSH
27650: EMPTY
27651: LIST
27652: LIST
27653: LIST
27654: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27655: LD_VAR 0 6
27659: PPUSH
27660: CALL_OW 257
27664: PUSH
27665: LD_INT 17
27667: EQUAL
27668: IFFALSE 27689
// points := [ 100 , 50 , 75 ] ;
27670: LD_ADDR_VAR 0 9
27674: PUSH
27675: LD_INT 100
27677: PUSH
27678: LD_INT 50
27680: PUSH
27681: LD_INT 75
27683: PUSH
27684: EMPTY
27685: LIST
27686: LIST
27687: LIST
27688: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27689: LD_VAR 0 6
27693: PPUSH
27694: CALL_OW 257
27698: PUSH
27699: LD_INT 15
27701: EQUAL
27702: IFFALSE 27723
// points := [ 10 , 5 , 3 ] ;
27704: LD_ADDR_VAR 0 9
27708: PUSH
27709: LD_INT 10
27711: PUSH
27712: LD_INT 5
27714: PUSH
27715: LD_INT 3
27717: PUSH
27718: EMPTY
27719: LIST
27720: LIST
27721: LIST
27722: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27723: LD_VAR 0 6
27727: PPUSH
27728: CALL_OW 257
27732: PUSH
27733: LD_INT 14
27735: EQUAL
27736: IFFALSE 27757
// points := [ 10 , 0 , 0 ] ;
27738: LD_ADDR_VAR 0 9
27742: PUSH
27743: LD_INT 10
27745: PUSH
27746: LD_INT 0
27748: PUSH
27749: LD_INT 0
27751: PUSH
27752: EMPTY
27753: LIST
27754: LIST
27755: LIST
27756: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27757: LD_VAR 0 6
27761: PPUSH
27762: CALL_OW 257
27766: PUSH
27767: LD_INT 11
27769: EQUAL
27770: IFFALSE 27791
// points := [ 30 , 10 , 5 ] ;
27772: LD_ADDR_VAR 0 9
27776: PUSH
27777: LD_INT 30
27779: PUSH
27780: LD_INT 10
27782: PUSH
27783: LD_INT 5
27785: PUSH
27786: EMPTY
27787: LIST
27788: LIST
27789: LIST
27790: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27791: LD_VAR 0 1
27795: PPUSH
27796: LD_INT 5
27798: PPUSH
27799: CALL_OW 321
27803: PUSH
27804: LD_INT 2
27806: EQUAL
27807: IFFALSE 27824
// bpoints := bpoints * 1.8 ;
27809: LD_ADDR_VAR 0 10
27813: PUSH
27814: LD_VAR 0 10
27818: PUSH
27819: LD_REAL  1.80000000000000E+0000
27822: MUL
27823: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27824: LD_VAR 0 6
27828: PPUSH
27829: CALL_OW 257
27833: PUSH
27834: LD_INT 1
27836: PUSH
27837: LD_INT 2
27839: PUSH
27840: LD_INT 3
27842: PUSH
27843: LD_INT 4
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: LIST
27850: LIST
27851: IN
27852: PUSH
27853: LD_VAR 0 1
27857: PPUSH
27858: LD_INT 51
27860: PPUSH
27861: CALL_OW 321
27865: PUSH
27866: LD_INT 2
27868: EQUAL
27869: AND
27870: IFFALSE 27887
// bpoints := bpoints * 1.2 ;
27872: LD_ADDR_VAR 0 10
27876: PUSH
27877: LD_VAR 0 10
27881: PUSH
27882: LD_REAL  1.20000000000000E+0000
27885: MUL
27886: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27887: LD_VAR 0 6
27891: PPUSH
27892: CALL_OW 257
27896: PUSH
27897: LD_INT 5
27899: PUSH
27900: LD_INT 7
27902: PUSH
27903: LD_INT 9
27905: PUSH
27906: EMPTY
27907: LIST
27908: LIST
27909: LIST
27910: IN
27911: PUSH
27912: LD_VAR 0 1
27916: PPUSH
27917: LD_INT 52
27919: PPUSH
27920: CALL_OW 321
27924: PUSH
27925: LD_INT 2
27927: EQUAL
27928: AND
27929: IFFALSE 27946
// bpoints := bpoints * 1.5 ;
27931: LD_ADDR_VAR 0 10
27935: PUSH
27936: LD_VAR 0 10
27940: PUSH
27941: LD_REAL  1.50000000000000E+0000
27944: MUL
27945: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
27946: LD_VAR 0 1
27950: PPUSH
27951: LD_INT 66
27953: PPUSH
27954: CALL_OW 321
27958: PUSH
27959: LD_INT 2
27961: EQUAL
27962: IFFALSE 27979
// bpoints := bpoints * 1.1 ;
27964: LD_ADDR_VAR 0 10
27968: PUSH
27969: LD_VAR 0 10
27973: PUSH
27974: LD_REAL  1.10000000000000E+0000
27977: MUL
27978: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
27979: LD_ADDR_VAR 0 10
27983: PUSH
27984: LD_VAR 0 10
27988: PUSH
27989: LD_VAR 0 6
27993: PPUSH
27994: LD_INT 1
27996: PPUSH
27997: CALL_OW 259
28001: PUSH
28002: LD_REAL  1.15000000000000E+0000
28005: MUL
28006: MUL
28007: ST_TO_ADDR
// end ; unit_vehicle :
28008: GO 28838
28010: LD_INT 2
28012: DOUBLE
28013: EQUAL
28014: IFTRUE 28018
28016: GO 28826
28018: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
28019: LD_VAR 0 6
28023: PPUSH
28024: CALL_OW 264
28028: PUSH
28029: LD_INT 2
28031: PUSH
28032: LD_INT 42
28034: PUSH
28035: LD_INT 24
28037: PUSH
28038: EMPTY
28039: LIST
28040: LIST
28041: LIST
28042: IN
28043: IFFALSE 28064
// points := [ 25 , 5 , 3 ] ;
28045: LD_ADDR_VAR 0 9
28049: PUSH
28050: LD_INT 25
28052: PUSH
28053: LD_INT 5
28055: PUSH
28056: LD_INT 3
28058: PUSH
28059: EMPTY
28060: LIST
28061: LIST
28062: LIST
28063: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28064: LD_VAR 0 6
28068: PPUSH
28069: CALL_OW 264
28073: PUSH
28074: LD_INT 4
28076: PUSH
28077: LD_INT 43
28079: PUSH
28080: LD_INT 25
28082: PUSH
28083: EMPTY
28084: LIST
28085: LIST
28086: LIST
28087: IN
28088: IFFALSE 28109
// points := [ 40 , 15 , 5 ] ;
28090: LD_ADDR_VAR 0 9
28094: PUSH
28095: LD_INT 40
28097: PUSH
28098: LD_INT 15
28100: PUSH
28101: LD_INT 5
28103: PUSH
28104: EMPTY
28105: LIST
28106: LIST
28107: LIST
28108: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28109: LD_VAR 0 6
28113: PPUSH
28114: CALL_OW 264
28118: PUSH
28119: LD_INT 3
28121: PUSH
28122: LD_INT 23
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: IN
28129: IFFALSE 28150
// points := [ 7 , 25 , 8 ] ;
28131: LD_ADDR_VAR 0 9
28135: PUSH
28136: LD_INT 7
28138: PUSH
28139: LD_INT 25
28141: PUSH
28142: LD_INT 8
28144: PUSH
28145: EMPTY
28146: LIST
28147: LIST
28148: LIST
28149: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28150: LD_VAR 0 6
28154: PPUSH
28155: CALL_OW 264
28159: PUSH
28160: LD_INT 5
28162: PUSH
28163: LD_INT 27
28165: PUSH
28166: LD_INT 44
28168: PUSH
28169: EMPTY
28170: LIST
28171: LIST
28172: LIST
28173: IN
28174: IFFALSE 28195
// points := [ 14 , 50 , 16 ] ;
28176: LD_ADDR_VAR 0 9
28180: PUSH
28181: LD_INT 14
28183: PUSH
28184: LD_INT 50
28186: PUSH
28187: LD_INT 16
28189: PUSH
28190: EMPTY
28191: LIST
28192: LIST
28193: LIST
28194: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28195: LD_VAR 0 6
28199: PPUSH
28200: CALL_OW 264
28204: PUSH
28205: LD_INT 6
28207: PUSH
28208: LD_INT 46
28210: PUSH
28211: EMPTY
28212: LIST
28213: LIST
28214: IN
28215: IFFALSE 28236
// points := [ 32 , 120 , 70 ] ;
28217: LD_ADDR_VAR 0 9
28221: PUSH
28222: LD_INT 32
28224: PUSH
28225: LD_INT 120
28227: PUSH
28228: LD_INT 70
28230: PUSH
28231: EMPTY
28232: LIST
28233: LIST
28234: LIST
28235: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
28236: LD_VAR 0 6
28240: PPUSH
28241: CALL_OW 264
28245: PUSH
28246: LD_INT 7
28248: PUSH
28249: LD_INT 28
28251: PUSH
28252: LD_INT 45
28254: PUSH
28255: LD_EXP 87
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: LIST
28264: LIST
28265: IN
28266: IFFALSE 28287
// points := [ 35 , 20 , 45 ] ;
28268: LD_ADDR_VAR 0 9
28272: PUSH
28273: LD_INT 35
28275: PUSH
28276: LD_INT 20
28278: PUSH
28279: LD_INT 45
28281: PUSH
28282: EMPTY
28283: LIST
28284: LIST
28285: LIST
28286: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28287: LD_VAR 0 6
28291: PPUSH
28292: CALL_OW 264
28296: PUSH
28297: LD_INT 47
28299: PUSH
28300: EMPTY
28301: LIST
28302: IN
28303: IFFALSE 28324
// points := [ 67 , 45 , 75 ] ;
28305: LD_ADDR_VAR 0 9
28309: PUSH
28310: LD_INT 67
28312: PUSH
28313: LD_INT 45
28315: PUSH
28316: LD_INT 75
28318: PUSH
28319: EMPTY
28320: LIST
28321: LIST
28322: LIST
28323: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28324: LD_VAR 0 6
28328: PPUSH
28329: CALL_OW 264
28333: PUSH
28334: LD_INT 26
28336: PUSH
28337: EMPTY
28338: LIST
28339: IN
28340: IFFALSE 28361
// points := [ 120 , 30 , 80 ] ;
28342: LD_ADDR_VAR 0 9
28346: PUSH
28347: LD_INT 120
28349: PUSH
28350: LD_INT 30
28352: PUSH
28353: LD_INT 80
28355: PUSH
28356: EMPTY
28357: LIST
28358: LIST
28359: LIST
28360: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28361: LD_VAR 0 6
28365: PPUSH
28366: CALL_OW 264
28370: PUSH
28371: LD_INT 22
28373: PUSH
28374: EMPTY
28375: LIST
28376: IN
28377: IFFALSE 28398
// points := [ 40 , 1 , 1 ] ;
28379: LD_ADDR_VAR 0 9
28383: PUSH
28384: LD_INT 40
28386: PUSH
28387: LD_INT 1
28389: PUSH
28390: LD_INT 1
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: LIST
28397: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28398: LD_VAR 0 6
28402: PPUSH
28403: CALL_OW 264
28407: PUSH
28408: LD_INT 29
28410: PUSH
28411: EMPTY
28412: LIST
28413: IN
28414: IFFALSE 28435
// points := [ 70 , 200 , 400 ] ;
28416: LD_ADDR_VAR 0 9
28420: PUSH
28421: LD_INT 70
28423: PUSH
28424: LD_INT 200
28426: PUSH
28427: LD_INT 400
28429: PUSH
28430: EMPTY
28431: LIST
28432: LIST
28433: LIST
28434: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28435: LD_VAR 0 6
28439: PPUSH
28440: CALL_OW 264
28444: PUSH
28445: LD_INT 14
28447: PUSH
28448: LD_INT 53
28450: PUSH
28451: EMPTY
28452: LIST
28453: LIST
28454: IN
28455: IFFALSE 28476
// points := [ 40 , 10 , 20 ] ;
28457: LD_ADDR_VAR 0 9
28461: PUSH
28462: LD_INT 40
28464: PUSH
28465: LD_INT 10
28467: PUSH
28468: LD_INT 20
28470: PUSH
28471: EMPTY
28472: LIST
28473: LIST
28474: LIST
28475: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28476: LD_VAR 0 6
28480: PPUSH
28481: CALL_OW 264
28485: PUSH
28486: LD_INT 9
28488: PUSH
28489: EMPTY
28490: LIST
28491: IN
28492: IFFALSE 28513
// points := [ 5 , 70 , 20 ] ;
28494: LD_ADDR_VAR 0 9
28498: PUSH
28499: LD_INT 5
28501: PUSH
28502: LD_INT 70
28504: PUSH
28505: LD_INT 20
28507: PUSH
28508: EMPTY
28509: LIST
28510: LIST
28511: LIST
28512: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28513: LD_VAR 0 6
28517: PPUSH
28518: CALL_OW 264
28522: PUSH
28523: LD_INT 10
28525: PUSH
28526: EMPTY
28527: LIST
28528: IN
28529: IFFALSE 28550
// points := [ 35 , 110 , 70 ] ;
28531: LD_ADDR_VAR 0 9
28535: PUSH
28536: LD_INT 35
28538: PUSH
28539: LD_INT 110
28541: PUSH
28542: LD_INT 70
28544: PUSH
28545: EMPTY
28546: LIST
28547: LIST
28548: LIST
28549: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28550: LD_VAR 0 6
28554: PPUSH
28555: CALL_OW 265
28559: PUSH
28560: LD_INT 25
28562: EQUAL
28563: IFFALSE 28584
// points := [ 80 , 65 , 100 ] ;
28565: LD_ADDR_VAR 0 9
28569: PUSH
28570: LD_INT 80
28572: PUSH
28573: LD_INT 65
28575: PUSH
28576: LD_INT 100
28578: PUSH
28579: EMPTY
28580: LIST
28581: LIST
28582: LIST
28583: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28584: LD_VAR 0 6
28588: PPUSH
28589: CALL_OW 263
28593: PUSH
28594: LD_INT 1
28596: EQUAL
28597: IFFALSE 28632
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28599: LD_ADDR_VAR 0 10
28603: PUSH
28604: LD_VAR 0 10
28608: PUSH
28609: LD_VAR 0 6
28613: PPUSH
28614: CALL_OW 311
28618: PPUSH
28619: LD_INT 3
28621: PPUSH
28622: CALL_OW 259
28626: PUSH
28627: LD_INT 4
28629: MUL
28630: MUL
28631: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28632: LD_VAR 0 6
28636: PPUSH
28637: CALL_OW 263
28641: PUSH
28642: LD_INT 2
28644: EQUAL
28645: IFFALSE 28696
// begin j := IsControledBy ( i ) ;
28647: LD_ADDR_VAR 0 7
28651: PUSH
28652: LD_VAR 0 6
28656: PPUSH
28657: CALL_OW 312
28661: ST_TO_ADDR
// if j then
28662: LD_VAR 0 7
28666: IFFALSE 28696
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28668: LD_ADDR_VAR 0 10
28672: PUSH
28673: LD_VAR 0 10
28677: PUSH
28678: LD_VAR 0 7
28682: PPUSH
28683: LD_INT 3
28685: PPUSH
28686: CALL_OW 259
28690: PUSH
28691: LD_INT 3
28693: MUL
28694: MUL
28695: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28696: LD_VAR 0 6
28700: PPUSH
28701: CALL_OW 264
28705: PUSH
28706: LD_INT 5
28708: PUSH
28709: LD_INT 6
28711: PUSH
28712: LD_INT 46
28714: PUSH
28715: LD_INT 44
28717: PUSH
28718: LD_INT 47
28720: PUSH
28721: LD_INT 45
28723: PUSH
28724: LD_INT 28
28726: PUSH
28727: LD_INT 7
28729: PUSH
28730: LD_INT 27
28732: PUSH
28733: LD_INT 29
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: LIST
28740: LIST
28741: LIST
28742: LIST
28743: LIST
28744: LIST
28745: LIST
28746: LIST
28747: IN
28748: PUSH
28749: LD_VAR 0 1
28753: PPUSH
28754: LD_INT 52
28756: PPUSH
28757: CALL_OW 321
28761: PUSH
28762: LD_INT 2
28764: EQUAL
28765: AND
28766: IFFALSE 28783
// bpoints := bpoints * 1.2 ;
28768: LD_ADDR_VAR 0 10
28772: PUSH
28773: LD_VAR 0 10
28777: PUSH
28778: LD_REAL  1.20000000000000E+0000
28781: MUL
28782: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28783: LD_VAR 0 6
28787: PPUSH
28788: CALL_OW 264
28792: PUSH
28793: LD_INT 6
28795: PUSH
28796: LD_INT 46
28798: PUSH
28799: LD_INT 47
28801: PUSH
28802: EMPTY
28803: LIST
28804: LIST
28805: LIST
28806: IN
28807: IFFALSE 28824
// bpoints := bpoints * 1.2 ;
28809: LD_ADDR_VAR 0 10
28813: PUSH
28814: LD_VAR 0 10
28818: PUSH
28819: LD_REAL  1.20000000000000E+0000
28822: MUL
28823: ST_TO_ADDR
// end ; unit_building :
28824: GO 28838
28826: LD_INT 3
28828: DOUBLE
28829: EQUAL
28830: IFTRUE 28834
28832: GO 28837
28834: POP
// ; end ;
28835: GO 28838
28837: POP
// for j = 1 to 3 do
28838: LD_ADDR_VAR 0 7
28842: PUSH
28843: DOUBLE
28844: LD_INT 1
28846: DEC
28847: ST_TO_ADDR
28848: LD_INT 3
28850: PUSH
28851: FOR_TO
28852: IFFALSE 28905
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28854: LD_ADDR_VAR 0 5
28858: PUSH
28859: LD_VAR 0 5
28863: PPUSH
28864: LD_VAR 0 7
28868: PPUSH
28869: LD_VAR 0 5
28873: PUSH
28874: LD_VAR 0 7
28878: ARRAY
28879: PUSH
28880: LD_VAR 0 9
28884: PUSH
28885: LD_VAR 0 7
28889: ARRAY
28890: PUSH
28891: LD_VAR 0 10
28895: MUL
28896: PLUS
28897: PPUSH
28898: CALL_OW 1
28902: ST_TO_ADDR
28903: GO 28851
28905: POP
28906: POP
// end ;
28907: GO 27384
28909: POP
28910: POP
// result := Replace ( result , 4 , tmp ) ;
28911: LD_ADDR_VAR 0 5
28915: PUSH
28916: LD_VAR 0 5
28920: PPUSH
28921: LD_INT 4
28923: PPUSH
28924: LD_VAR 0 8
28928: PPUSH
28929: CALL_OW 1
28933: ST_TO_ADDR
// end ;
28934: LD_VAR 0 5
28938: RET
// export function DangerAtRange ( unit , range ) ; begin
28939: LD_INT 0
28941: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
28942: LD_ADDR_VAR 0 3
28946: PUSH
28947: LD_VAR 0 1
28951: PPUSH
28952: CALL_OW 255
28956: PPUSH
28957: LD_VAR 0 1
28961: PPUSH
28962: CALL_OW 250
28966: PPUSH
28967: LD_VAR 0 1
28971: PPUSH
28972: CALL_OW 251
28976: PPUSH
28977: LD_VAR 0 2
28981: PPUSH
28982: CALL 27236 0 4
28986: ST_TO_ADDR
// end ;
28987: LD_VAR 0 3
28991: RET
// export function DangerInArea ( side , area ) ; begin
28992: LD_INT 0
28994: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
28995: LD_ADDR_VAR 0 3
28999: PUSH
29000: LD_VAR 0 2
29004: PPUSH
29005: LD_INT 81
29007: PUSH
29008: LD_VAR 0 1
29012: PUSH
29013: EMPTY
29014: LIST
29015: LIST
29016: PPUSH
29017: CALL_OW 70
29021: ST_TO_ADDR
// end ;
29022: LD_VAR 0 3
29026: RET
// export function IsExtension ( b ) ; begin
29027: LD_INT 0
29029: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29030: LD_ADDR_VAR 0 2
29034: PUSH
29035: LD_VAR 0 1
29039: PUSH
29040: LD_INT 23
29042: PUSH
29043: LD_INT 20
29045: PUSH
29046: LD_INT 22
29048: PUSH
29049: LD_INT 17
29051: PUSH
29052: LD_INT 24
29054: PUSH
29055: LD_INT 21
29057: PUSH
29058: LD_INT 19
29060: PUSH
29061: LD_INT 16
29063: PUSH
29064: LD_INT 25
29066: PUSH
29067: LD_INT 18
29069: PUSH
29070: EMPTY
29071: LIST
29072: LIST
29073: LIST
29074: LIST
29075: LIST
29076: LIST
29077: LIST
29078: LIST
29079: LIST
29080: LIST
29081: IN
29082: ST_TO_ADDR
// end ;
29083: LD_VAR 0 2
29087: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
29088: LD_INT 0
29090: PPUSH
29091: PPUSH
29092: PPUSH
// result := [ ] ;
29093: LD_ADDR_VAR 0 4
29097: PUSH
29098: EMPTY
29099: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29100: LD_ADDR_VAR 0 5
29104: PUSH
29105: LD_VAR 0 2
29109: PPUSH
29110: LD_INT 21
29112: PUSH
29113: LD_INT 3
29115: PUSH
29116: EMPTY
29117: LIST
29118: LIST
29119: PPUSH
29120: CALL_OW 70
29124: ST_TO_ADDR
// if not tmp then
29125: LD_VAR 0 5
29129: NOT
29130: IFFALSE 29134
// exit ;
29132: GO 29198
// if checkLink then
29134: LD_VAR 0 3
29138: IFFALSE 29188
// begin for i in tmp do
29140: LD_ADDR_VAR 0 6
29144: PUSH
29145: LD_VAR 0 5
29149: PUSH
29150: FOR_IN
29151: IFFALSE 29186
// if GetBase ( i ) <> base then
29153: LD_VAR 0 6
29157: PPUSH
29158: CALL_OW 274
29162: PUSH
29163: LD_VAR 0 1
29167: NONEQUAL
29168: IFFALSE 29184
// ComLinkToBase ( base , i ) ;
29170: LD_VAR 0 1
29174: PPUSH
29175: LD_VAR 0 6
29179: PPUSH
29180: CALL_OW 169
29184: GO 29150
29186: POP
29187: POP
// end ; result := tmp ;
29188: LD_ADDR_VAR 0 4
29192: PUSH
29193: LD_VAR 0 5
29197: ST_TO_ADDR
// end ;
29198: LD_VAR 0 4
29202: RET
// export function ComComplete ( units , b ) ; var i ; begin
29203: LD_INT 0
29205: PPUSH
29206: PPUSH
// if not units then
29207: LD_VAR 0 1
29211: NOT
29212: IFFALSE 29216
// exit ;
29214: GO 29306
// for i in units do
29216: LD_ADDR_VAR 0 4
29220: PUSH
29221: LD_VAR 0 1
29225: PUSH
29226: FOR_IN
29227: IFFALSE 29304
// if BuildingStatus ( b ) = bs_build then
29229: LD_VAR 0 2
29233: PPUSH
29234: CALL_OW 461
29238: PUSH
29239: LD_INT 1
29241: EQUAL
29242: IFFALSE 29302
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29244: LD_VAR 0 4
29248: PPUSH
29249: LD_STRING h
29251: PUSH
29252: LD_VAR 0 2
29256: PPUSH
29257: CALL_OW 250
29261: PUSH
29262: LD_VAR 0 2
29266: PPUSH
29267: CALL_OW 251
29271: PUSH
29272: LD_VAR 0 2
29276: PUSH
29277: LD_INT 0
29279: PUSH
29280: LD_INT 0
29282: PUSH
29283: LD_INT 0
29285: PUSH
29286: EMPTY
29287: LIST
29288: LIST
29289: LIST
29290: LIST
29291: LIST
29292: LIST
29293: LIST
29294: PUSH
29295: EMPTY
29296: LIST
29297: PPUSH
29298: CALL_OW 446
29302: GO 29226
29304: POP
29305: POP
// end ;
29306: LD_VAR 0 3
29310: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29311: LD_INT 0
29313: PPUSH
29314: PPUSH
29315: PPUSH
29316: PPUSH
29317: PPUSH
29318: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
29319: LD_VAR 0 1
29323: NOT
29324: PUSH
29325: LD_VAR 0 1
29329: PPUSH
29330: CALL_OW 263
29334: PUSH
29335: LD_INT 2
29337: NONEQUAL
29338: OR
29339: IFFALSE 29343
// exit ;
29341: GO 29659
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29343: LD_ADDR_VAR 0 6
29347: PUSH
29348: LD_INT 22
29350: PUSH
29351: LD_VAR 0 1
29355: PPUSH
29356: CALL_OW 255
29360: PUSH
29361: EMPTY
29362: LIST
29363: LIST
29364: PUSH
29365: LD_INT 2
29367: PUSH
29368: LD_INT 30
29370: PUSH
29371: LD_INT 36
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: PUSH
29378: LD_INT 34
29380: PUSH
29381: LD_INT 31
29383: PUSH
29384: EMPTY
29385: LIST
29386: LIST
29387: PUSH
29388: EMPTY
29389: LIST
29390: LIST
29391: LIST
29392: PUSH
29393: EMPTY
29394: LIST
29395: LIST
29396: PPUSH
29397: CALL_OW 69
29401: ST_TO_ADDR
// if not tmp then
29402: LD_VAR 0 6
29406: NOT
29407: IFFALSE 29411
// exit ;
29409: GO 29659
// result := [ ] ;
29411: LD_ADDR_VAR 0 2
29415: PUSH
29416: EMPTY
29417: ST_TO_ADDR
// for i in tmp do
29418: LD_ADDR_VAR 0 3
29422: PUSH
29423: LD_VAR 0 6
29427: PUSH
29428: FOR_IN
29429: IFFALSE 29500
// begin t := UnitsInside ( i ) ;
29431: LD_ADDR_VAR 0 4
29435: PUSH
29436: LD_VAR 0 3
29440: PPUSH
29441: CALL_OW 313
29445: ST_TO_ADDR
// if t then
29446: LD_VAR 0 4
29450: IFFALSE 29498
// for j in t do
29452: LD_ADDR_VAR 0 7
29456: PUSH
29457: LD_VAR 0 4
29461: PUSH
29462: FOR_IN
29463: IFFALSE 29496
// result := Replace ( result , result + 1 , j ) ;
29465: LD_ADDR_VAR 0 2
29469: PUSH
29470: LD_VAR 0 2
29474: PPUSH
29475: LD_VAR 0 2
29479: PUSH
29480: LD_INT 1
29482: PLUS
29483: PPUSH
29484: LD_VAR 0 7
29488: PPUSH
29489: CALL_OW 1
29493: ST_TO_ADDR
29494: GO 29462
29496: POP
29497: POP
// end ;
29498: GO 29428
29500: POP
29501: POP
// if not result then
29502: LD_VAR 0 2
29506: NOT
29507: IFFALSE 29511
// exit ;
29509: GO 29659
// mech := result [ 1 ] ;
29511: LD_ADDR_VAR 0 5
29515: PUSH
29516: LD_VAR 0 2
29520: PUSH
29521: LD_INT 1
29523: ARRAY
29524: ST_TO_ADDR
// if result > 1 then
29525: LD_VAR 0 2
29529: PUSH
29530: LD_INT 1
29532: GREATER
29533: IFFALSE 29645
// begin for i = 2 to result do
29535: LD_ADDR_VAR 0 3
29539: PUSH
29540: DOUBLE
29541: LD_INT 2
29543: DEC
29544: ST_TO_ADDR
29545: LD_VAR 0 2
29549: PUSH
29550: FOR_TO
29551: IFFALSE 29643
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29553: LD_ADDR_VAR 0 4
29557: PUSH
29558: LD_VAR 0 2
29562: PUSH
29563: LD_VAR 0 3
29567: ARRAY
29568: PPUSH
29569: LD_INT 3
29571: PPUSH
29572: CALL_OW 259
29576: PUSH
29577: LD_VAR 0 2
29581: PUSH
29582: LD_VAR 0 3
29586: ARRAY
29587: PPUSH
29588: CALL_OW 432
29592: MINUS
29593: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29594: LD_VAR 0 4
29598: PUSH
29599: LD_VAR 0 5
29603: PPUSH
29604: LD_INT 3
29606: PPUSH
29607: CALL_OW 259
29611: PUSH
29612: LD_VAR 0 5
29616: PPUSH
29617: CALL_OW 432
29621: MINUS
29622: GREATEREQUAL
29623: IFFALSE 29641
// mech := result [ i ] ;
29625: LD_ADDR_VAR 0 5
29629: PUSH
29630: LD_VAR 0 2
29634: PUSH
29635: LD_VAR 0 3
29639: ARRAY
29640: ST_TO_ADDR
// end ;
29641: GO 29550
29643: POP
29644: POP
// end ; ComLinkTo ( vehicle , mech ) ;
29645: LD_VAR 0 1
29649: PPUSH
29650: LD_VAR 0 5
29654: PPUSH
29655: CALL_OW 135
// end ;
29659: LD_VAR 0 2
29663: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29664: LD_INT 0
29666: PPUSH
29667: PPUSH
29668: PPUSH
29669: PPUSH
29670: PPUSH
29671: PPUSH
29672: PPUSH
29673: PPUSH
29674: PPUSH
29675: PPUSH
29676: PPUSH
29677: PPUSH
29678: PPUSH
// result := [ ] ;
29679: LD_ADDR_VAR 0 7
29683: PUSH
29684: EMPTY
29685: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29686: LD_VAR 0 1
29690: PPUSH
29691: CALL_OW 266
29695: PUSH
29696: LD_INT 0
29698: PUSH
29699: LD_INT 1
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: IN
29706: NOT
29707: IFFALSE 29711
// exit ;
29709: GO 31345
// if name then
29711: LD_VAR 0 3
29715: IFFALSE 29731
// SetBName ( base_dep , name ) ;
29717: LD_VAR 0 1
29721: PPUSH
29722: LD_VAR 0 3
29726: PPUSH
29727: CALL_OW 500
// base := GetBase ( base_dep ) ;
29731: LD_ADDR_VAR 0 15
29735: PUSH
29736: LD_VAR 0 1
29740: PPUSH
29741: CALL_OW 274
29745: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29746: LD_ADDR_VAR 0 16
29750: PUSH
29751: LD_VAR 0 1
29755: PPUSH
29756: CALL_OW 255
29760: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29761: LD_ADDR_VAR 0 17
29765: PUSH
29766: LD_VAR 0 1
29770: PPUSH
29771: CALL_OW 248
29775: ST_TO_ADDR
// if sources then
29776: LD_VAR 0 5
29780: IFFALSE 29827
// for i = 1 to 3 do
29782: LD_ADDR_VAR 0 8
29786: PUSH
29787: DOUBLE
29788: LD_INT 1
29790: DEC
29791: ST_TO_ADDR
29792: LD_INT 3
29794: PUSH
29795: FOR_TO
29796: IFFALSE 29825
// AddResourceType ( base , i , sources [ i ] ) ;
29798: LD_VAR 0 15
29802: PPUSH
29803: LD_VAR 0 8
29807: PPUSH
29808: LD_VAR 0 5
29812: PUSH
29813: LD_VAR 0 8
29817: ARRAY
29818: PPUSH
29819: CALL_OW 276
29823: GO 29795
29825: POP
29826: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
29827: LD_ADDR_VAR 0 18
29831: PUSH
29832: LD_VAR 0 15
29836: PPUSH
29837: LD_VAR 0 2
29841: PPUSH
29842: LD_INT 1
29844: PPUSH
29845: CALL 29088 0 3
29849: ST_TO_ADDR
// InitHc ;
29850: CALL_OW 19
// InitUc ;
29854: CALL_OW 18
// uc_side := side ;
29858: LD_ADDR_OWVAR 20
29862: PUSH
29863: LD_VAR 0 16
29867: ST_TO_ADDR
// uc_nation := nation ;
29868: LD_ADDR_OWVAR 21
29872: PUSH
29873: LD_VAR 0 17
29877: ST_TO_ADDR
// if buildings then
29878: LD_VAR 0 18
29882: IFFALSE 31204
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29884: LD_ADDR_VAR 0 19
29888: PUSH
29889: LD_VAR 0 18
29893: PPUSH
29894: LD_INT 2
29896: PUSH
29897: LD_INT 30
29899: PUSH
29900: LD_INT 29
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: PUSH
29907: LD_INT 30
29909: PUSH
29910: LD_INT 30
29912: PUSH
29913: EMPTY
29914: LIST
29915: LIST
29916: PUSH
29917: EMPTY
29918: LIST
29919: LIST
29920: LIST
29921: PPUSH
29922: CALL_OW 72
29926: ST_TO_ADDR
// if tmp then
29927: LD_VAR 0 19
29931: IFFALSE 29979
// for i in tmp do
29933: LD_ADDR_VAR 0 8
29937: PUSH
29938: LD_VAR 0 19
29942: PUSH
29943: FOR_IN
29944: IFFALSE 29977
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
29946: LD_VAR 0 8
29950: PPUSH
29951: CALL_OW 250
29955: PPUSH
29956: LD_VAR 0 8
29960: PPUSH
29961: CALL_OW 251
29965: PPUSH
29966: LD_VAR 0 16
29970: PPUSH
29971: CALL_OW 441
29975: GO 29943
29977: POP
29978: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
29979: LD_VAR 0 18
29983: PPUSH
29984: LD_INT 2
29986: PUSH
29987: LD_INT 30
29989: PUSH
29990: LD_INT 32
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: PUSH
29997: LD_INT 30
29999: PUSH
30000: LD_INT 33
30002: PUSH
30003: EMPTY
30004: LIST
30005: LIST
30006: PUSH
30007: EMPTY
30008: LIST
30009: LIST
30010: LIST
30011: PPUSH
30012: CALL_OW 72
30016: IFFALSE 30104
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
30018: LD_ADDR_VAR 0 8
30022: PUSH
30023: LD_VAR 0 18
30027: PPUSH
30028: LD_INT 2
30030: PUSH
30031: LD_INT 30
30033: PUSH
30034: LD_INT 32
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: PUSH
30041: LD_INT 30
30043: PUSH
30044: LD_INT 33
30046: PUSH
30047: EMPTY
30048: LIST
30049: LIST
30050: PUSH
30051: EMPTY
30052: LIST
30053: LIST
30054: LIST
30055: PPUSH
30056: CALL_OW 72
30060: PUSH
30061: FOR_IN
30062: IFFALSE 30102
// begin if not GetBWeapon ( i ) then
30064: LD_VAR 0 8
30068: PPUSH
30069: CALL_OW 269
30073: NOT
30074: IFFALSE 30100
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30076: LD_VAR 0 8
30080: PPUSH
30081: LD_VAR 0 8
30085: PPUSH
30086: LD_VAR 0 2
30090: PPUSH
30091: CALL 31350 0 2
30095: PPUSH
30096: CALL_OW 431
// end ;
30100: GO 30061
30102: POP
30103: POP
// end ; for i = 1 to personel do
30104: LD_ADDR_VAR 0 8
30108: PUSH
30109: DOUBLE
30110: LD_INT 1
30112: DEC
30113: ST_TO_ADDR
30114: LD_VAR 0 6
30118: PUSH
30119: FOR_TO
30120: IFFALSE 31184
// begin if i > 4 then
30122: LD_VAR 0 8
30126: PUSH
30127: LD_INT 4
30129: GREATER
30130: IFFALSE 30134
// break ;
30132: GO 31184
// case i of 1 :
30134: LD_VAR 0 8
30138: PUSH
30139: LD_INT 1
30141: DOUBLE
30142: EQUAL
30143: IFTRUE 30147
30145: GO 30227
30147: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30148: LD_ADDR_VAR 0 12
30152: PUSH
30153: LD_VAR 0 18
30157: PPUSH
30158: LD_INT 22
30160: PUSH
30161: LD_VAR 0 16
30165: PUSH
30166: EMPTY
30167: LIST
30168: LIST
30169: PUSH
30170: LD_INT 58
30172: PUSH
30173: EMPTY
30174: LIST
30175: PUSH
30176: LD_INT 2
30178: PUSH
30179: LD_INT 30
30181: PUSH
30182: LD_INT 32
30184: PUSH
30185: EMPTY
30186: LIST
30187: LIST
30188: PUSH
30189: LD_INT 30
30191: PUSH
30192: LD_INT 4
30194: PUSH
30195: EMPTY
30196: LIST
30197: LIST
30198: PUSH
30199: LD_INT 30
30201: PUSH
30202: LD_INT 5
30204: PUSH
30205: EMPTY
30206: LIST
30207: LIST
30208: PUSH
30209: EMPTY
30210: LIST
30211: LIST
30212: LIST
30213: LIST
30214: PUSH
30215: EMPTY
30216: LIST
30217: LIST
30218: LIST
30219: PPUSH
30220: CALL_OW 72
30224: ST_TO_ADDR
30225: GO 30449
30227: LD_INT 2
30229: DOUBLE
30230: EQUAL
30231: IFTRUE 30235
30233: GO 30297
30235: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30236: LD_ADDR_VAR 0 12
30240: PUSH
30241: LD_VAR 0 18
30245: PPUSH
30246: LD_INT 22
30248: PUSH
30249: LD_VAR 0 16
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: PUSH
30258: LD_INT 2
30260: PUSH
30261: LD_INT 30
30263: PUSH
30264: LD_INT 0
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PUSH
30271: LD_INT 30
30273: PUSH
30274: LD_INT 1
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: PUSH
30281: EMPTY
30282: LIST
30283: LIST
30284: LIST
30285: PUSH
30286: EMPTY
30287: LIST
30288: LIST
30289: PPUSH
30290: CALL_OW 72
30294: ST_TO_ADDR
30295: GO 30449
30297: LD_INT 3
30299: DOUBLE
30300: EQUAL
30301: IFTRUE 30305
30303: GO 30367
30305: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30306: LD_ADDR_VAR 0 12
30310: PUSH
30311: LD_VAR 0 18
30315: PPUSH
30316: LD_INT 22
30318: PUSH
30319: LD_VAR 0 16
30323: PUSH
30324: EMPTY
30325: LIST
30326: LIST
30327: PUSH
30328: LD_INT 2
30330: PUSH
30331: LD_INT 30
30333: PUSH
30334: LD_INT 2
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: PUSH
30341: LD_INT 30
30343: PUSH
30344: LD_INT 3
30346: PUSH
30347: EMPTY
30348: LIST
30349: LIST
30350: PUSH
30351: EMPTY
30352: LIST
30353: LIST
30354: LIST
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PPUSH
30360: CALL_OW 72
30364: ST_TO_ADDR
30365: GO 30449
30367: LD_INT 4
30369: DOUBLE
30370: EQUAL
30371: IFTRUE 30375
30373: GO 30448
30375: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30376: LD_ADDR_VAR 0 12
30380: PUSH
30381: LD_VAR 0 18
30385: PPUSH
30386: LD_INT 22
30388: PUSH
30389: LD_VAR 0 16
30393: PUSH
30394: EMPTY
30395: LIST
30396: LIST
30397: PUSH
30398: LD_INT 2
30400: PUSH
30401: LD_INT 30
30403: PUSH
30404: LD_INT 6
30406: PUSH
30407: EMPTY
30408: LIST
30409: LIST
30410: PUSH
30411: LD_INT 30
30413: PUSH
30414: LD_INT 7
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PUSH
30421: LD_INT 30
30423: PUSH
30424: LD_INT 8
30426: PUSH
30427: EMPTY
30428: LIST
30429: LIST
30430: PUSH
30431: EMPTY
30432: LIST
30433: LIST
30434: LIST
30435: LIST
30436: PUSH
30437: EMPTY
30438: LIST
30439: LIST
30440: PPUSH
30441: CALL_OW 72
30445: ST_TO_ADDR
30446: GO 30449
30448: POP
// if i = 1 then
30449: LD_VAR 0 8
30453: PUSH
30454: LD_INT 1
30456: EQUAL
30457: IFFALSE 30568
// begin tmp := [ ] ;
30459: LD_ADDR_VAR 0 19
30463: PUSH
30464: EMPTY
30465: ST_TO_ADDR
// for j in f do
30466: LD_ADDR_VAR 0 9
30470: PUSH
30471: LD_VAR 0 12
30475: PUSH
30476: FOR_IN
30477: IFFALSE 30550
// if GetBType ( j ) = b_bunker then
30479: LD_VAR 0 9
30483: PPUSH
30484: CALL_OW 266
30488: PUSH
30489: LD_INT 32
30491: EQUAL
30492: IFFALSE 30519
// tmp := Insert ( tmp , 1 , j ) else
30494: LD_ADDR_VAR 0 19
30498: PUSH
30499: LD_VAR 0 19
30503: PPUSH
30504: LD_INT 1
30506: PPUSH
30507: LD_VAR 0 9
30511: PPUSH
30512: CALL_OW 2
30516: ST_TO_ADDR
30517: GO 30548
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30519: LD_ADDR_VAR 0 19
30523: PUSH
30524: LD_VAR 0 19
30528: PPUSH
30529: LD_VAR 0 19
30533: PUSH
30534: LD_INT 1
30536: PLUS
30537: PPUSH
30538: LD_VAR 0 9
30542: PPUSH
30543: CALL_OW 2
30547: ST_TO_ADDR
30548: GO 30476
30550: POP
30551: POP
// if tmp then
30552: LD_VAR 0 19
30556: IFFALSE 30568
// f := tmp ;
30558: LD_ADDR_VAR 0 12
30562: PUSH
30563: LD_VAR 0 19
30567: ST_TO_ADDR
// end ; x := personel [ i ] ;
30568: LD_ADDR_VAR 0 13
30572: PUSH
30573: LD_VAR 0 6
30577: PUSH
30578: LD_VAR 0 8
30582: ARRAY
30583: ST_TO_ADDR
// if x = - 1 then
30584: LD_VAR 0 13
30588: PUSH
30589: LD_INT 1
30591: NEG
30592: EQUAL
30593: IFFALSE 30802
// begin for j in f do
30595: LD_ADDR_VAR 0 9
30599: PUSH
30600: LD_VAR 0 12
30604: PUSH
30605: FOR_IN
30606: IFFALSE 30798
// repeat InitHc ;
30608: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30612: LD_VAR 0 9
30616: PPUSH
30617: CALL_OW 266
30621: PUSH
30622: LD_INT 5
30624: EQUAL
30625: IFFALSE 30695
// begin if UnitsInside ( j ) < 3 then
30627: LD_VAR 0 9
30631: PPUSH
30632: CALL_OW 313
30636: PUSH
30637: LD_INT 3
30639: LESS
30640: IFFALSE 30676
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30642: LD_INT 0
30644: PPUSH
30645: LD_INT 5
30647: PUSH
30648: LD_INT 8
30650: PUSH
30651: LD_INT 9
30653: PUSH
30654: EMPTY
30655: LIST
30656: LIST
30657: LIST
30658: PUSH
30659: LD_VAR 0 17
30663: ARRAY
30664: PPUSH
30665: LD_VAR 0 4
30669: PPUSH
30670: CALL_OW 380
30674: GO 30693
// PrepareHuman ( false , i , skill ) ;
30676: LD_INT 0
30678: PPUSH
30679: LD_VAR 0 8
30683: PPUSH
30684: LD_VAR 0 4
30688: PPUSH
30689: CALL_OW 380
// end else
30693: GO 30712
// PrepareHuman ( false , i , skill ) ;
30695: LD_INT 0
30697: PPUSH
30698: LD_VAR 0 8
30702: PPUSH
30703: LD_VAR 0 4
30707: PPUSH
30708: CALL_OW 380
// un := CreateHuman ;
30712: LD_ADDR_VAR 0 14
30716: PUSH
30717: CALL_OW 44
30721: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30722: LD_ADDR_VAR 0 7
30726: PUSH
30727: LD_VAR 0 7
30731: PPUSH
30732: LD_INT 1
30734: PPUSH
30735: LD_VAR 0 14
30739: PPUSH
30740: CALL_OW 2
30744: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30745: LD_VAR 0 14
30749: PPUSH
30750: LD_VAR 0 9
30754: PPUSH
30755: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30759: LD_VAR 0 9
30763: PPUSH
30764: CALL_OW 313
30768: PUSH
30769: LD_INT 6
30771: EQUAL
30772: PUSH
30773: LD_VAR 0 9
30777: PPUSH
30778: CALL_OW 266
30782: PUSH
30783: LD_INT 32
30785: PUSH
30786: LD_INT 31
30788: PUSH
30789: EMPTY
30790: LIST
30791: LIST
30792: IN
30793: OR
30794: IFFALSE 30608
30796: GO 30605
30798: POP
30799: POP
// end else
30800: GO 31182
// for j = 1 to x do
30802: LD_ADDR_VAR 0 9
30806: PUSH
30807: DOUBLE
30808: LD_INT 1
30810: DEC
30811: ST_TO_ADDR
30812: LD_VAR 0 13
30816: PUSH
30817: FOR_TO
30818: IFFALSE 31180
// begin InitHc ;
30820: CALL_OW 19
// if not f then
30824: LD_VAR 0 12
30828: NOT
30829: IFFALSE 30918
// begin PrepareHuman ( false , i , skill ) ;
30831: LD_INT 0
30833: PPUSH
30834: LD_VAR 0 8
30838: PPUSH
30839: LD_VAR 0 4
30843: PPUSH
30844: CALL_OW 380
// un := CreateHuman ;
30848: LD_ADDR_VAR 0 14
30852: PUSH
30853: CALL_OW 44
30857: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30858: LD_ADDR_VAR 0 7
30862: PUSH
30863: LD_VAR 0 7
30867: PPUSH
30868: LD_INT 1
30870: PPUSH
30871: LD_VAR 0 14
30875: PPUSH
30876: CALL_OW 2
30880: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30881: LD_VAR 0 14
30885: PPUSH
30886: LD_VAR 0 1
30890: PPUSH
30891: CALL_OW 250
30895: PPUSH
30896: LD_VAR 0 1
30900: PPUSH
30901: CALL_OW 251
30905: PPUSH
30906: LD_INT 10
30908: PPUSH
30909: LD_INT 0
30911: PPUSH
30912: CALL_OW 50
// continue ;
30916: GO 30817
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30918: LD_VAR 0 12
30922: PUSH
30923: LD_INT 1
30925: ARRAY
30926: PPUSH
30927: CALL_OW 313
30931: PUSH
30932: LD_VAR 0 12
30936: PUSH
30937: LD_INT 1
30939: ARRAY
30940: PPUSH
30941: CALL_OW 266
30945: PUSH
30946: LD_INT 32
30948: PUSH
30949: LD_INT 31
30951: PUSH
30952: EMPTY
30953: LIST
30954: LIST
30955: IN
30956: AND
30957: PUSH
30958: LD_VAR 0 12
30962: PUSH
30963: LD_INT 1
30965: ARRAY
30966: PPUSH
30967: CALL_OW 313
30971: PUSH
30972: LD_INT 6
30974: EQUAL
30975: OR
30976: IFFALSE 30996
// f := Delete ( f , 1 ) ;
30978: LD_ADDR_VAR 0 12
30982: PUSH
30983: LD_VAR 0 12
30987: PPUSH
30988: LD_INT 1
30990: PPUSH
30991: CALL_OW 3
30995: ST_TO_ADDR
// if not f then
30996: LD_VAR 0 12
31000: NOT
31001: IFFALSE 31019
// begin x := x + 2 ;
31003: LD_ADDR_VAR 0 13
31007: PUSH
31008: LD_VAR 0 13
31012: PUSH
31013: LD_INT 2
31015: PLUS
31016: ST_TO_ADDR
// continue ;
31017: GO 30817
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
31019: LD_VAR 0 12
31023: PUSH
31024: LD_INT 1
31026: ARRAY
31027: PPUSH
31028: CALL_OW 266
31032: PUSH
31033: LD_INT 5
31035: EQUAL
31036: IFFALSE 31110
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31038: LD_VAR 0 12
31042: PUSH
31043: LD_INT 1
31045: ARRAY
31046: PPUSH
31047: CALL_OW 313
31051: PUSH
31052: LD_INT 3
31054: LESS
31055: IFFALSE 31091
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31057: LD_INT 0
31059: PPUSH
31060: LD_INT 5
31062: PUSH
31063: LD_INT 8
31065: PUSH
31066: LD_INT 9
31068: PUSH
31069: EMPTY
31070: LIST
31071: LIST
31072: LIST
31073: PUSH
31074: LD_VAR 0 17
31078: ARRAY
31079: PPUSH
31080: LD_VAR 0 4
31084: PPUSH
31085: CALL_OW 380
31089: GO 31108
// PrepareHuman ( false , i , skill ) ;
31091: LD_INT 0
31093: PPUSH
31094: LD_VAR 0 8
31098: PPUSH
31099: LD_VAR 0 4
31103: PPUSH
31104: CALL_OW 380
// end else
31108: GO 31127
// PrepareHuman ( false , i , skill ) ;
31110: LD_INT 0
31112: PPUSH
31113: LD_VAR 0 8
31117: PPUSH
31118: LD_VAR 0 4
31122: PPUSH
31123: CALL_OW 380
// un := CreateHuman ;
31127: LD_ADDR_VAR 0 14
31131: PUSH
31132: CALL_OW 44
31136: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31137: LD_ADDR_VAR 0 7
31141: PUSH
31142: LD_VAR 0 7
31146: PPUSH
31147: LD_INT 1
31149: PPUSH
31150: LD_VAR 0 14
31154: PPUSH
31155: CALL_OW 2
31159: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31160: LD_VAR 0 14
31164: PPUSH
31165: LD_VAR 0 12
31169: PUSH
31170: LD_INT 1
31172: ARRAY
31173: PPUSH
31174: CALL_OW 52
// end ;
31178: GO 30817
31180: POP
31181: POP
// end ;
31182: GO 30119
31184: POP
31185: POP
// result := result ^ buildings ;
31186: LD_ADDR_VAR 0 7
31190: PUSH
31191: LD_VAR 0 7
31195: PUSH
31196: LD_VAR 0 18
31200: ADD
31201: ST_TO_ADDR
// end else
31202: GO 31345
// begin for i = 1 to personel do
31204: LD_ADDR_VAR 0 8
31208: PUSH
31209: DOUBLE
31210: LD_INT 1
31212: DEC
31213: ST_TO_ADDR
31214: LD_VAR 0 6
31218: PUSH
31219: FOR_TO
31220: IFFALSE 31343
// begin if i > 4 then
31222: LD_VAR 0 8
31226: PUSH
31227: LD_INT 4
31229: GREATER
31230: IFFALSE 31234
// break ;
31232: GO 31343
// x := personel [ i ] ;
31234: LD_ADDR_VAR 0 13
31238: PUSH
31239: LD_VAR 0 6
31243: PUSH
31244: LD_VAR 0 8
31248: ARRAY
31249: ST_TO_ADDR
// if x = - 1 then
31250: LD_VAR 0 13
31254: PUSH
31255: LD_INT 1
31257: NEG
31258: EQUAL
31259: IFFALSE 31263
// continue ;
31261: GO 31219
// PrepareHuman ( false , i , skill ) ;
31263: LD_INT 0
31265: PPUSH
31266: LD_VAR 0 8
31270: PPUSH
31271: LD_VAR 0 4
31275: PPUSH
31276: CALL_OW 380
// un := CreateHuman ;
31280: LD_ADDR_VAR 0 14
31284: PUSH
31285: CALL_OW 44
31289: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31290: LD_VAR 0 14
31294: PPUSH
31295: LD_VAR 0 1
31299: PPUSH
31300: CALL_OW 250
31304: PPUSH
31305: LD_VAR 0 1
31309: PPUSH
31310: CALL_OW 251
31314: PPUSH
31315: LD_INT 10
31317: PPUSH
31318: LD_INT 0
31320: PPUSH
31321: CALL_OW 50
// result := result ^ un ;
31325: LD_ADDR_VAR 0 7
31329: PUSH
31330: LD_VAR 0 7
31334: PUSH
31335: LD_VAR 0 14
31339: ADD
31340: ST_TO_ADDR
// end ;
31341: GO 31219
31343: POP
31344: POP
// end ; end ;
31345: LD_VAR 0 7
31349: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31350: LD_INT 0
31352: PPUSH
31353: PPUSH
31354: PPUSH
31355: PPUSH
31356: PPUSH
31357: PPUSH
31358: PPUSH
31359: PPUSH
31360: PPUSH
31361: PPUSH
31362: PPUSH
31363: PPUSH
31364: PPUSH
31365: PPUSH
31366: PPUSH
31367: PPUSH
// result := false ;
31368: LD_ADDR_VAR 0 3
31372: PUSH
31373: LD_INT 0
31375: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31376: LD_VAR 0 1
31380: NOT
31381: PUSH
31382: LD_VAR 0 1
31386: PPUSH
31387: CALL_OW 266
31391: PUSH
31392: LD_INT 32
31394: PUSH
31395: LD_INT 33
31397: PUSH
31398: EMPTY
31399: LIST
31400: LIST
31401: IN
31402: NOT
31403: OR
31404: IFFALSE 31408
// exit ;
31406: GO 32517
// nat := GetNation ( tower ) ;
31408: LD_ADDR_VAR 0 12
31412: PUSH
31413: LD_VAR 0 1
31417: PPUSH
31418: CALL_OW 248
31422: ST_TO_ADDR
// side := GetSide ( tower ) ;
31423: LD_ADDR_VAR 0 16
31427: PUSH
31428: LD_VAR 0 1
31432: PPUSH
31433: CALL_OW 255
31437: ST_TO_ADDR
// x := GetX ( tower ) ;
31438: LD_ADDR_VAR 0 10
31442: PUSH
31443: LD_VAR 0 1
31447: PPUSH
31448: CALL_OW 250
31452: ST_TO_ADDR
// y := GetY ( tower ) ;
31453: LD_ADDR_VAR 0 11
31457: PUSH
31458: LD_VAR 0 1
31462: PPUSH
31463: CALL_OW 251
31467: ST_TO_ADDR
// if not x or not y then
31468: LD_VAR 0 10
31472: NOT
31473: PUSH
31474: LD_VAR 0 11
31478: NOT
31479: OR
31480: IFFALSE 31484
// exit ;
31482: GO 32517
// weapon := 0 ;
31484: LD_ADDR_VAR 0 18
31488: PUSH
31489: LD_INT 0
31491: ST_TO_ADDR
// fac_list := [ ] ;
31492: LD_ADDR_VAR 0 17
31496: PUSH
31497: EMPTY
31498: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
31499: LD_ADDR_VAR 0 6
31503: PUSH
31504: LD_VAR 0 1
31508: PPUSH
31509: CALL_OW 274
31513: PPUSH
31514: LD_VAR 0 2
31518: PPUSH
31519: LD_INT 0
31521: PPUSH
31522: CALL 29088 0 3
31526: PPUSH
31527: LD_INT 30
31529: PUSH
31530: LD_INT 3
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: PPUSH
31537: CALL_OW 72
31541: ST_TO_ADDR
// if not factories then
31542: LD_VAR 0 6
31546: NOT
31547: IFFALSE 31551
// exit ;
31549: GO 32517
// for i in factories do
31551: LD_ADDR_VAR 0 8
31555: PUSH
31556: LD_VAR 0 6
31560: PUSH
31561: FOR_IN
31562: IFFALSE 31587
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31564: LD_ADDR_VAR 0 17
31568: PUSH
31569: LD_VAR 0 17
31573: PUSH
31574: LD_VAR 0 8
31578: PPUSH
31579: CALL_OW 478
31583: UNION
31584: ST_TO_ADDR
31585: GO 31561
31587: POP
31588: POP
// if not fac_list then
31589: LD_VAR 0 17
31593: NOT
31594: IFFALSE 31598
// exit ;
31596: GO 32517
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31598: LD_ADDR_VAR 0 5
31602: PUSH
31603: LD_INT 4
31605: PUSH
31606: LD_INT 5
31608: PUSH
31609: LD_INT 9
31611: PUSH
31612: LD_INT 10
31614: PUSH
31615: LD_INT 6
31617: PUSH
31618: LD_INT 7
31620: PUSH
31621: LD_INT 11
31623: PUSH
31624: EMPTY
31625: LIST
31626: LIST
31627: LIST
31628: LIST
31629: LIST
31630: LIST
31631: LIST
31632: PUSH
31633: LD_INT 27
31635: PUSH
31636: LD_INT 28
31638: PUSH
31639: LD_INT 26
31641: PUSH
31642: LD_INT 30
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: LIST
31649: LIST
31650: PUSH
31651: LD_INT 43
31653: PUSH
31654: LD_INT 44
31656: PUSH
31657: LD_INT 46
31659: PUSH
31660: LD_INT 45
31662: PUSH
31663: LD_INT 47
31665: PUSH
31666: LD_INT 49
31668: PUSH
31669: EMPTY
31670: LIST
31671: LIST
31672: LIST
31673: LIST
31674: LIST
31675: LIST
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: LIST
31681: PUSH
31682: LD_VAR 0 12
31686: ARRAY
31687: ST_TO_ADDR
// list := list isect fac_list ;
31688: LD_ADDR_VAR 0 5
31692: PUSH
31693: LD_VAR 0 5
31697: PUSH
31698: LD_VAR 0 17
31702: ISECT
31703: ST_TO_ADDR
// if not list then
31704: LD_VAR 0 5
31708: NOT
31709: IFFALSE 31713
// exit ;
31711: GO 32517
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31713: LD_VAR 0 12
31717: PUSH
31718: LD_INT 3
31720: EQUAL
31721: PUSH
31722: LD_INT 49
31724: PUSH
31725: LD_VAR 0 5
31729: IN
31730: AND
31731: PUSH
31732: LD_INT 31
31734: PPUSH
31735: LD_VAR 0 16
31739: PPUSH
31740: CALL_OW 321
31744: PUSH
31745: LD_INT 2
31747: EQUAL
31748: AND
31749: IFFALSE 31809
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31751: LD_INT 22
31753: PUSH
31754: LD_VAR 0 16
31758: PUSH
31759: EMPTY
31760: LIST
31761: LIST
31762: PUSH
31763: LD_INT 35
31765: PUSH
31766: LD_INT 49
31768: PUSH
31769: EMPTY
31770: LIST
31771: LIST
31772: PUSH
31773: LD_INT 91
31775: PUSH
31776: LD_VAR 0 1
31780: PUSH
31781: LD_INT 10
31783: PUSH
31784: EMPTY
31785: LIST
31786: LIST
31787: LIST
31788: PUSH
31789: EMPTY
31790: LIST
31791: LIST
31792: LIST
31793: PPUSH
31794: CALL_OW 69
31798: NOT
31799: IFFALSE 31809
// weapon := ru_time_lapser ;
31801: LD_ADDR_VAR 0 18
31805: PUSH
31806: LD_INT 49
31808: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31809: LD_VAR 0 12
31813: PUSH
31814: LD_INT 1
31816: PUSH
31817: LD_INT 2
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: IN
31824: PUSH
31825: LD_INT 11
31827: PUSH
31828: LD_VAR 0 5
31832: IN
31833: PUSH
31834: LD_INT 30
31836: PUSH
31837: LD_VAR 0 5
31841: IN
31842: OR
31843: AND
31844: PUSH
31845: LD_INT 6
31847: PPUSH
31848: LD_VAR 0 16
31852: PPUSH
31853: CALL_OW 321
31857: PUSH
31858: LD_INT 2
31860: EQUAL
31861: AND
31862: IFFALSE 32027
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31864: LD_INT 22
31866: PUSH
31867: LD_VAR 0 16
31871: PUSH
31872: EMPTY
31873: LIST
31874: LIST
31875: PUSH
31876: LD_INT 2
31878: PUSH
31879: LD_INT 35
31881: PUSH
31882: LD_INT 11
31884: PUSH
31885: EMPTY
31886: LIST
31887: LIST
31888: PUSH
31889: LD_INT 35
31891: PUSH
31892: LD_INT 30
31894: PUSH
31895: EMPTY
31896: LIST
31897: LIST
31898: PUSH
31899: EMPTY
31900: LIST
31901: LIST
31902: LIST
31903: PUSH
31904: LD_INT 91
31906: PUSH
31907: LD_VAR 0 1
31911: PUSH
31912: LD_INT 18
31914: PUSH
31915: EMPTY
31916: LIST
31917: LIST
31918: LIST
31919: PUSH
31920: EMPTY
31921: LIST
31922: LIST
31923: LIST
31924: PPUSH
31925: CALL_OW 69
31929: NOT
31930: PUSH
31931: LD_INT 22
31933: PUSH
31934: LD_VAR 0 16
31938: PUSH
31939: EMPTY
31940: LIST
31941: LIST
31942: PUSH
31943: LD_INT 2
31945: PUSH
31946: LD_INT 30
31948: PUSH
31949: LD_INT 32
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: LD_INT 30
31958: PUSH
31959: LD_INT 33
31961: PUSH
31962: EMPTY
31963: LIST
31964: LIST
31965: PUSH
31966: EMPTY
31967: LIST
31968: LIST
31969: LIST
31970: PUSH
31971: LD_INT 91
31973: PUSH
31974: LD_VAR 0 1
31978: PUSH
31979: LD_INT 12
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: LIST
31986: PUSH
31987: EMPTY
31988: LIST
31989: LIST
31990: LIST
31991: PUSH
31992: EMPTY
31993: LIST
31994: PPUSH
31995: CALL_OW 69
31999: PUSH
32000: LD_INT 2
32002: GREATER
32003: AND
32004: IFFALSE 32027
// weapon := [ us_radar , ar_radar ] [ nat ] ;
32006: LD_ADDR_VAR 0 18
32010: PUSH
32011: LD_INT 11
32013: PUSH
32014: LD_INT 30
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: PUSH
32021: LD_VAR 0 12
32025: ARRAY
32026: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32027: LD_VAR 0 18
32031: NOT
32032: PUSH
32033: LD_INT 40
32035: PPUSH
32036: LD_VAR 0 16
32040: PPUSH
32041: CALL_OW 321
32045: PUSH
32046: LD_INT 2
32048: EQUAL
32049: AND
32050: PUSH
32051: LD_INT 7
32053: PUSH
32054: LD_VAR 0 5
32058: IN
32059: PUSH
32060: LD_INT 28
32062: PUSH
32063: LD_VAR 0 5
32067: IN
32068: OR
32069: PUSH
32070: LD_INT 45
32072: PUSH
32073: LD_VAR 0 5
32077: IN
32078: OR
32079: AND
32080: IFFALSE 32334
// begin hex := GetHexInfo ( x , y ) ;
32082: LD_ADDR_VAR 0 4
32086: PUSH
32087: LD_VAR 0 10
32091: PPUSH
32092: LD_VAR 0 11
32096: PPUSH
32097: CALL_OW 546
32101: ST_TO_ADDR
// if hex [ 1 ] then
32102: LD_VAR 0 4
32106: PUSH
32107: LD_INT 1
32109: ARRAY
32110: IFFALSE 32114
// exit ;
32112: GO 32517
// height := hex [ 2 ] ;
32114: LD_ADDR_VAR 0 15
32118: PUSH
32119: LD_VAR 0 4
32123: PUSH
32124: LD_INT 2
32126: ARRAY
32127: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32128: LD_ADDR_VAR 0 14
32132: PUSH
32133: LD_INT 0
32135: PUSH
32136: LD_INT 2
32138: PUSH
32139: LD_INT 3
32141: PUSH
32142: LD_INT 5
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: LIST
32149: LIST
32150: ST_TO_ADDR
// for i in tmp do
32151: LD_ADDR_VAR 0 8
32155: PUSH
32156: LD_VAR 0 14
32160: PUSH
32161: FOR_IN
32162: IFFALSE 32332
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32164: LD_ADDR_VAR 0 9
32168: PUSH
32169: LD_VAR 0 10
32173: PPUSH
32174: LD_VAR 0 8
32178: PPUSH
32179: LD_INT 5
32181: PPUSH
32182: CALL_OW 272
32186: PUSH
32187: LD_VAR 0 11
32191: PPUSH
32192: LD_VAR 0 8
32196: PPUSH
32197: LD_INT 5
32199: PPUSH
32200: CALL_OW 273
32204: PUSH
32205: EMPTY
32206: LIST
32207: LIST
32208: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32209: LD_VAR 0 9
32213: PUSH
32214: LD_INT 1
32216: ARRAY
32217: PPUSH
32218: LD_VAR 0 9
32222: PUSH
32223: LD_INT 2
32225: ARRAY
32226: PPUSH
32227: CALL_OW 488
32231: IFFALSE 32330
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32233: LD_ADDR_VAR 0 4
32237: PUSH
32238: LD_VAR 0 9
32242: PUSH
32243: LD_INT 1
32245: ARRAY
32246: PPUSH
32247: LD_VAR 0 9
32251: PUSH
32252: LD_INT 2
32254: ARRAY
32255: PPUSH
32256: CALL_OW 546
32260: ST_TO_ADDR
// if hex [ 1 ] then
32261: LD_VAR 0 4
32265: PUSH
32266: LD_INT 1
32268: ARRAY
32269: IFFALSE 32273
// continue ;
32271: GO 32161
// h := hex [ 2 ] ;
32273: LD_ADDR_VAR 0 13
32277: PUSH
32278: LD_VAR 0 4
32282: PUSH
32283: LD_INT 2
32285: ARRAY
32286: ST_TO_ADDR
// if h + 7 < height then
32287: LD_VAR 0 13
32291: PUSH
32292: LD_INT 7
32294: PLUS
32295: PUSH
32296: LD_VAR 0 15
32300: LESS
32301: IFFALSE 32330
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32303: LD_ADDR_VAR 0 18
32307: PUSH
32308: LD_INT 7
32310: PUSH
32311: LD_INT 28
32313: PUSH
32314: LD_INT 45
32316: PUSH
32317: EMPTY
32318: LIST
32319: LIST
32320: LIST
32321: PUSH
32322: LD_VAR 0 12
32326: ARRAY
32327: ST_TO_ADDR
// break ;
32328: GO 32332
// end ; end ; end ;
32330: GO 32161
32332: POP
32333: POP
// end ; if not weapon then
32334: LD_VAR 0 18
32338: NOT
32339: IFFALSE 32399
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32341: LD_ADDR_VAR 0 5
32345: PUSH
32346: LD_VAR 0 5
32350: PUSH
32351: LD_INT 11
32353: PUSH
32354: LD_INT 30
32356: PUSH
32357: LD_INT 49
32359: PUSH
32360: EMPTY
32361: LIST
32362: LIST
32363: LIST
32364: DIFF
32365: ST_TO_ADDR
// if not list then
32366: LD_VAR 0 5
32370: NOT
32371: IFFALSE 32375
// exit ;
32373: GO 32517
// weapon := list [ rand ( 1 , list ) ] ;
32375: LD_ADDR_VAR 0 18
32379: PUSH
32380: LD_VAR 0 5
32384: PUSH
32385: LD_INT 1
32387: PPUSH
32388: LD_VAR 0 5
32392: PPUSH
32393: CALL_OW 12
32397: ARRAY
32398: ST_TO_ADDR
// end ; if weapon then
32399: LD_VAR 0 18
32403: IFFALSE 32517
// begin tmp := CostOfWeapon ( weapon ) ;
32405: LD_ADDR_VAR 0 14
32409: PUSH
32410: LD_VAR 0 18
32414: PPUSH
32415: CALL_OW 451
32419: ST_TO_ADDR
// j := GetBase ( tower ) ;
32420: LD_ADDR_VAR 0 9
32424: PUSH
32425: LD_VAR 0 1
32429: PPUSH
32430: CALL_OW 274
32434: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32435: LD_VAR 0 9
32439: PPUSH
32440: LD_INT 1
32442: PPUSH
32443: CALL_OW 275
32447: PUSH
32448: LD_VAR 0 14
32452: PUSH
32453: LD_INT 1
32455: ARRAY
32456: GREATEREQUAL
32457: PUSH
32458: LD_VAR 0 9
32462: PPUSH
32463: LD_INT 2
32465: PPUSH
32466: CALL_OW 275
32470: PUSH
32471: LD_VAR 0 14
32475: PUSH
32476: LD_INT 2
32478: ARRAY
32479: GREATEREQUAL
32480: AND
32481: PUSH
32482: LD_VAR 0 9
32486: PPUSH
32487: LD_INT 3
32489: PPUSH
32490: CALL_OW 275
32494: PUSH
32495: LD_VAR 0 14
32499: PUSH
32500: LD_INT 3
32502: ARRAY
32503: GREATEREQUAL
32504: AND
32505: IFFALSE 32517
// result := weapon ;
32507: LD_ADDR_VAR 0 3
32511: PUSH
32512: LD_VAR 0 18
32516: ST_TO_ADDR
// end ; end ;
32517: LD_VAR 0 3
32521: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32522: LD_INT 0
32524: PPUSH
32525: PPUSH
// result := true ;
32526: LD_ADDR_VAR 0 3
32530: PUSH
32531: LD_INT 1
32533: ST_TO_ADDR
// if array1 = array2 then
32534: LD_VAR 0 1
32538: PUSH
32539: LD_VAR 0 2
32543: EQUAL
32544: IFFALSE 32604
// begin for i = 1 to array1 do
32546: LD_ADDR_VAR 0 4
32550: PUSH
32551: DOUBLE
32552: LD_INT 1
32554: DEC
32555: ST_TO_ADDR
32556: LD_VAR 0 1
32560: PUSH
32561: FOR_TO
32562: IFFALSE 32600
// if array1 [ i ] <> array2 [ i ] then
32564: LD_VAR 0 1
32568: PUSH
32569: LD_VAR 0 4
32573: ARRAY
32574: PUSH
32575: LD_VAR 0 2
32579: PUSH
32580: LD_VAR 0 4
32584: ARRAY
32585: NONEQUAL
32586: IFFALSE 32598
// begin result := false ;
32588: LD_ADDR_VAR 0 3
32592: PUSH
32593: LD_INT 0
32595: ST_TO_ADDR
// break ;
32596: GO 32600
// end ;
32598: GO 32561
32600: POP
32601: POP
// end else
32602: GO 32612
// result := false ;
32604: LD_ADDR_VAR 0 3
32608: PUSH
32609: LD_INT 0
32611: ST_TO_ADDR
// end ;
32612: LD_VAR 0 3
32616: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
32617: LD_INT 0
32619: PPUSH
32620: PPUSH
// if not array1 or not array2 then
32621: LD_VAR 0 1
32625: NOT
32626: PUSH
32627: LD_VAR 0 2
32631: NOT
32632: OR
32633: IFFALSE 32637
// exit ;
32635: GO 32701
// result := true ;
32637: LD_ADDR_VAR 0 3
32641: PUSH
32642: LD_INT 1
32644: ST_TO_ADDR
// for i = 1 to array1 do
32645: LD_ADDR_VAR 0 4
32649: PUSH
32650: DOUBLE
32651: LD_INT 1
32653: DEC
32654: ST_TO_ADDR
32655: LD_VAR 0 1
32659: PUSH
32660: FOR_TO
32661: IFFALSE 32699
// if array1 [ i ] <> array2 [ i ] then
32663: LD_VAR 0 1
32667: PUSH
32668: LD_VAR 0 4
32672: ARRAY
32673: PUSH
32674: LD_VAR 0 2
32678: PUSH
32679: LD_VAR 0 4
32683: ARRAY
32684: NONEQUAL
32685: IFFALSE 32697
// begin result := false ;
32687: LD_ADDR_VAR 0 3
32691: PUSH
32692: LD_INT 0
32694: ST_TO_ADDR
// break ;
32695: GO 32699
// end ;
32697: GO 32660
32699: POP
32700: POP
// end ;
32701: LD_VAR 0 3
32705: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32706: LD_INT 0
32708: PPUSH
32709: PPUSH
32710: PPUSH
// pom := GetBase ( fac ) ;
32711: LD_ADDR_VAR 0 5
32715: PUSH
32716: LD_VAR 0 1
32720: PPUSH
32721: CALL_OW 274
32725: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32726: LD_ADDR_VAR 0 4
32730: PUSH
32731: LD_VAR 0 2
32735: PUSH
32736: LD_INT 1
32738: ARRAY
32739: PPUSH
32740: LD_VAR 0 2
32744: PUSH
32745: LD_INT 2
32747: ARRAY
32748: PPUSH
32749: LD_VAR 0 2
32753: PUSH
32754: LD_INT 3
32756: ARRAY
32757: PPUSH
32758: LD_VAR 0 2
32762: PUSH
32763: LD_INT 4
32765: ARRAY
32766: PPUSH
32767: CALL_OW 449
32771: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32772: LD_ADDR_VAR 0 3
32776: PUSH
32777: LD_VAR 0 5
32781: PPUSH
32782: LD_INT 1
32784: PPUSH
32785: CALL_OW 275
32789: PUSH
32790: LD_VAR 0 4
32794: PUSH
32795: LD_INT 1
32797: ARRAY
32798: GREATEREQUAL
32799: PUSH
32800: LD_VAR 0 5
32804: PPUSH
32805: LD_INT 2
32807: PPUSH
32808: CALL_OW 275
32812: PUSH
32813: LD_VAR 0 4
32817: PUSH
32818: LD_INT 2
32820: ARRAY
32821: GREATEREQUAL
32822: AND
32823: PUSH
32824: LD_VAR 0 5
32828: PPUSH
32829: LD_INT 3
32831: PPUSH
32832: CALL_OW 275
32836: PUSH
32837: LD_VAR 0 4
32841: PUSH
32842: LD_INT 3
32844: ARRAY
32845: GREATEREQUAL
32846: AND
32847: ST_TO_ADDR
// end ;
32848: LD_VAR 0 3
32852: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32853: LD_INT 0
32855: PPUSH
32856: PPUSH
32857: PPUSH
32858: PPUSH
// pom := GetBase ( building ) ;
32859: LD_ADDR_VAR 0 3
32863: PUSH
32864: LD_VAR 0 1
32868: PPUSH
32869: CALL_OW 274
32873: ST_TO_ADDR
// if not pom then
32874: LD_VAR 0 3
32878: NOT
32879: IFFALSE 32883
// exit ;
32881: GO 33053
// btype := GetBType ( building ) ;
32883: LD_ADDR_VAR 0 5
32887: PUSH
32888: LD_VAR 0 1
32892: PPUSH
32893: CALL_OW 266
32897: ST_TO_ADDR
// if btype = b_armoury then
32898: LD_VAR 0 5
32902: PUSH
32903: LD_INT 4
32905: EQUAL
32906: IFFALSE 32916
// btype := b_barracks ;
32908: LD_ADDR_VAR 0 5
32912: PUSH
32913: LD_INT 5
32915: ST_TO_ADDR
// if btype = b_depot then
32916: LD_VAR 0 5
32920: PUSH
32921: LD_INT 0
32923: EQUAL
32924: IFFALSE 32934
// btype := b_warehouse ;
32926: LD_ADDR_VAR 0 5
32930: PUSH
32931: LD_INT 1
32933: ST_TO_ADDR
// if btype = b_workshop then
32934: LD_VAR 0 5
32938: PUSH
32939: LD_INT 2
32941: EQUAL
32942: IFFALSE 32952
// btype := b_factory ;
32944: LD_ADDR_VAR 0 5
32948: PUSH
32949: LD_INT 3
32951: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32952: LD_ADDR_VAR 0 4
32956: PUSH
32957: LD_VAR 0 5
32961: PPUSH
32962: LD_VAR 0 1
32966: PPUSH
32967: CALL_OW 248
32971: PPUSH
32972: CALL_OW 450
32976: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32977: LD_ADDR_VAR 0 2
32981: PUSH
32982: LD_VAR 0 3
32986: PPUSH
32987: LD_INT 1
32989: PPUSH
32990: CALL_OW 275
32994: PUSH
32995: LD_VAR 0 4
32999: PUSH
33000: LD_INT 1
33002: ARRAY
33003: GREATEREQUAL
33004: PUSH
33005: LD_VAR 0 3
33009: PPUSH
33010: LD_INT 2
33012: PPUSH
33013: CALL_OW 275
33017: PUSH
33018: LD_VAR 0 4
33022: PUSH
33023: LD_INT 2
33025: ARRAY
33026: GREATEREQUAL
33027: AND
33028: PUSH
33029: LD_VAR 0 3
33033: PPUSH
33034: LD_INT 3
33036: PPUSH
33037: CALL_OW 275
33041: PUSH
33042: LD_VAR 0 4
33046: PUSH
33047: LD_INT 3
33049: ARRAY
33050: GREATEREQUAL
33051: AND
33052: ST_TO_ADDR
// end ;
33053: LD_VAR 0 2
33057: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33058: LD_INT 0
33060: PPUSH
33061: PPUSH
33062: PPUSH
// pom := GetBase ( building ) ;
33063: LD_ADDR_VAR 0 4
33067: PUSH
33068: LD_VAR 0 1
33072: PPUSH
33073: CALL_OW 274
33077: ST_TO_ADDR
// if not pom then
33078: LD_VAR 0 4
33082: NOT
33083: IFFALSE 33087
// exit ;
33085: GO 33188
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33087: LD_ADDR_VAR 0 5
33091: PUSH
33092: LD_VAR 0 2
33096: PPUSH
33097: LD_VAR 0 1
33101: PPUSH
33102: CALL_OW 248
33106: PPUSH
33107: CALL_OW 450
33111: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33112: LD_ADDR_VAR 0 3
33116: PUSH
33117: LD_VAR 0 4
33121: PPUSH
33122: LD_INT 1
33124: PPUSH
33125: CALL_OW 275
33129: PUSH
33130: LD_VAR 0 5
33134: PUSH
33135: LD_INT 1
33137: ARRAY
33138: GREATEREQUAL
33139: PUSH
33140: LD_VAR 0 4
33144: PPUSH
33145: LD_INT 2
33147: PPUSH
33148: CALL_OW 275
33152: PUSH
33153: LD_VAR 0 5
33157: PUSH
33158: LD_INT 2
33160: ARRAY
33161: GREATEREQUAL
33162: AND
33163: PUSH
33164: LD_VAR 0 4
33168: PPUSH
33169: LD_INT 3
33171: PPUSH
33172: CALL_OW 275
33176: PUSH
33177: LD_VAR 0 5
33181: PUSH
33182: LD_INT 3
33184: ARRAY
33185: GREATEREQUAL
33186: AND
33187: ST_TO_ADDR
// end ;
33188: LD_VAR 0 3
33192: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
33193: LD_INT 0
33195: PPUSH
33196: PPUSH
33197: PPUSH
33198: PPUSH
33199: PPUSH
33200: PPUSH
33201: PPUSH
33202: PPUSH
33203: PPUSH
33204: PPUSH
33205: PPUSH
// result := false ;
33206: LD_ADDR_VAR 0 8
33210: PUSH
33211: LD_INT 0
33213: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
33214: LD_VAR 0 5
33218: NOT
33219: PUSH
33220: LD_VAR 0 1
33224: NOT
33225: OR
33226: PUSH
33227: LD_VAR 0 2
33231: NOT
33232: OR
33233: PUSH
33234: LD_VAR 0 3
33238: NOT
33239: OR
33240: IFFALSE 33244
// exit ;
33242: GO 34058
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
33244: LD_ADDR_VAR 0 14
33248: PUSH
33249: LD_VAR 0 1
33253: PPUSH
33254: LD_VAR 0 2
33258: PPUSH
33259: LD_VAR 0 3
33263: PPUSH
33264: LD_VAR 0 4
33268: PPUSH
33269: LD_VAR 0 5
33273: PUSH
33274: LD_INT 1
33276: ARRAY
33277: PPUSH
33278: CALL_OW 248
33282: PPUSH
33283: LD_INT 0
33285: PPUSH
33286: CALL 35295 0 6
33290: ST_TO_ADDR
// if not hexes then
33291: LD_VAR 0 14
33295: NOT
33296: IFFALSE 33300
// exit ;
33298: GO 34058
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33300: LD_ADDR_VAR 0 17
33304: PUSH
33305: LD_VAR 0 5
33309: PPUSH
33310: LD_INT 22
33312: PUSH
33313: LD_VAR 0 13
33317: PPUSH
33318: CALL_OW 255
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: LD_INT 2
33329: PUSH
33330: LD_INT 30
33332: PUSH
33333: LD_INT 0
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: LD_INT 30
33342: PUSH
33343: LD_INT 1
33345: PUSH
33346: EMPTY
33347: LIST
33348: LIST
33349: PUSH
33350: EMPTY
33351: LIST
33352: LIST
33353: LIST
33354: PUSH
33355: EMPTY
33356: LIST
33357: LIST
33358: PPUSH
33359: CALL_OW 72
33363: ST_TO_ADDR
// for i = 1 to hexes do
33364: LD_ADDR_VAR 0 9
33368: PUSH
33369: DOUBLE
33370: LD_INT 1
33372: DEC
33373: ST_TO_ADDR
33374: LD_VAR 0 14
33378: PUSH
33379: FOR_TO
33380: IFFALSE 34056
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33382: LD_ADDR_VAR 0 13
33386: PUSH
33387: LD_VAR 0 14
33391: PUSH
33392: LD_VAR 0 9
33396: ARRAY
33397: PUSH
33398: LD_INT 1
33400: ARRAY
33401: PPUSH
33402: LD_VAR 0 14
33406: PUSH
33407: LD_VAR 0 9
33411: ARRAY
33412: PUSH
33413: LD_INT 2
33415: ARRAY
33416: PPUSH
33417: CALL_OW 428
33421: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33422: LD_VAR 0 14
33426: PUSH
33427: LD_VAR 0 9
33431: ARRAY
33432: PUSH
33433: LD_INT 1
33435: ARRAY
33436: PPUSH
33437: LD_VAR 0 14
33441: PUSH
33442: LD_VAR 0 9
33446: ARRAY
33447: PUSH
33448: LD_INT 2
33450: ARRAY
33451: PPUSH
33452: CALL_OW 351
33456: PUSH
33457: LD_VAR 0 14
33461: PUSH
33462: LD_VAR 0 9
33466: ARRAY
33467: PUSH
33468: LD_INT 1
33470: ARRAY
33471: PPUSH
33472: LD_VAR 0 14
33476: PUSH
33477: LD_VAR 0 9
33481: ARRAY
33482: PUSH
33483: LD_INT 2
33485: ARRAY
33486: PPUSH
33487: CALL_OW 488
33491: NOT
33492: OR
33493: PUSH
33494: LD_VAR 0 13
33498: PPUSH
33499: CALL_OW 247
33503: PUSH
33504: LD_INT 3
33506: EQUAL
33507: OR
33508: IFFALSE 33514
// exit ;
33510: POP
33511: POP
33512: GO 34058
// if not tmp then
33514: LD_VAR 0 13
33518: NOT
33519: IFFALSE 33523
// continue ;
33521: GO 33379
// result := true ;
33523: LD_ADDR_VAR 0 8
33527: PUSH
33528: LD_INT 1
33530: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
33531: LD_VAR 0 6
33535: PUSH
33536: LD_VAR 0 13
33540: PPUSH
33541: CALL_OW 247
33545: PUSH
33546: LD_INT 2
33548: EQUAL
33549: AND
33550: PUSH
33551: LD_VAR 0 13
33555: PPUSH
33556: CALL_OW 263
33560: PUSH
33561: LD_INT 1
33563: EQUAL
33564: AND
33565: IFFALSE 33729
// begin if IsDrivenBy ( tmp ) then
33567: LD_VAR 0 13
33571: PPUSH
33572: CALL_OW 311
33576: IFFALSE 33580
// continue ;
33578: GO 33379
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
33580: LD_VAR 0 6
33584: PPUSH
33585: LD_INT 3
33587: PUSH
33588: LD_INT 60
33590: PUSH
33591: EMPTY
33592: LIST
33593: PUSH
33594: EMPTY
33595: LIST
33596: LIST
33597: PUSH
33598: LD_INT 3
33600: PUSH
33601: LD_INT 55
33603: PUSH
33604: EMPTY
33605: LIST
33606: PUSH
33607: EMPTY
33608: LIST
33609: LIST
33610: PUSH
33611: EMPTY
33612: LIST
33613: LIST
33614: PPUSH
33615: CALL_OW 72
33619: IFFALSE 33727
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
33621: LD_ADDR_VAR 0 18
33625: PUSH
33626: LD_VAR 0 6
33630: PPUSH
33631: LD_INT 3
33633: PUSH
33634: LD_INT 60
33636: PUSH
33637: EMPTY
33638: LIST
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PUSH
33644: LD_INT 3
33646: PUSH
33647: LD_INT 55
33649: PUSH
33650: EMPTY
33651: LIST
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: PUSH
33657: EMPTY
33658: LIST
33659: LIST
33660: PPUSH
33661: CALL_OW 72
33665: PUSH
33666: LD_INT 1
33668: ARRAY
33669: ST_TO_ADDR
// if IsInUnit ( driver ) then
33670: LD_VAR 0 18
33674: PPUSH
33675: CALL_OW 310
33679: IFFALSE 33690
// ComExit ( driver ) ;
33681: LD_VAR 0 18
33685: PPUSH
33686: CALL 58479 0 1
// AddComEnterUnit ( driver , tmp ) ;
33690: LD_VAR 0 18
33694: PPUSH
33695: LD_VAR 0 13
33699: PPUSH
33700: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
33704: LD_VAR 0 18
33708: PPUSH
33709: LD_VAR 0 7
33713: PPUSH
33714: CALL_OW 173
// AddComExitVehicle ( driver ) ;
33718: LD_VAR 0 18
33722: PPUSH
33723: CALL_OW 181
// end ; continue ;
33727: GO 33379
// end ; if not cleaners or not tmp in cleaners then
33729: LD_VAR 0 6
33733: NOT
33734: PUSH
33735: LD_VAR 0 13
33739: PUSH
33740: LD_VAR 0 6
33744: IN
33745: NOT
33746: OR
33747: IFFALSE 34054
// begin if dep then
33749: LD_VAR 0 17
33753: IFFALSE 33889
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33755: LD_ADDR_VAR 0 16
33759: PUSH
33760: LD_VAR 0 17
33764: PUSH
33765: LD_INT 1
33767: ARRAY
33768: PPUSH
33769: CALL_OW 250
33773: PPUSH
33774: LD_VAR 0 17
33778: PUSH
33779: LD_INT 1
33781: ARRAY
33782: PPUSH
33783: CALL_OW 254
33787: PPUSH
33788: LD_INT 5
33790: PPUSH
33791: CALL_OW 272
33795: PUSH
33796: LD_VAR 0 17
33800: PUSH
33801: LD_INT 1
33803: ARRAY
33804: PPUSH
33805: CALL_OW 251
33809: PPUSH
33810: LD_VAR 0 17
33814: PUSH
33815: LD_INT 1
33817: ARRAY
33818: PPUSH
33819: CALL_OW 254
33823: PPUSH
33824: LD_INT 5
33826: PPUSH
33827: CALL_OW 273
33831: PUSH
33832: EMPTY
33833: LIST
33834: LIST
33835: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33836: LD_VAR 0 16
33840: PUSH
33841: LD_INT 1
33843: ARRAY
33844: PPUSH
33845: LD_VAR 0 16
33849: PUSH
33850: LD_INT 2
33852: ARRAY
33853: PPUSH
33854: CALL_OW 488
33858: IFFALSE 33889
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33860: LD_VAR 0 13
33864: PPUSH
33865: LD_VAR 0 16
33869: PUSH
33870: LD_INT 1
33872: ARRAY
33873: PPUSH
33874: LD_VAR 0 16
33878: PUSH
33879: LD_INT 2
33881: ARRAY
33882: PPUSH
33883: CALL_OW 111
// continue ;
33887: GO 33379
// end ; end ; r := GetDir ( tmp ) ;
33889: LD_ADDR_VAR 0 15
33893: PUSH
33894: LD_VAR 0 13
33898: PPUSH
33899: CALL_OW 254
33903: ST_TO_ADDR
// if r = 5 then
33904: LD_VAR 0 15
33908: PUSH
33909: LD_INT 5
33911: EQUAL
33912: IFFALSE 33922
// r := 0 ;
33914: LD_ADDR_VAR 0 15
33918: PUSH
33919: LD_INT 0
33921: ST_TO_ADDR
// for j = r to 5 do
33922: LD_ADDR_VAR 0 10
33926: PUSH
33927: DOUBLE
33928: LD_VAR 0 15
33932: DEC
33933: ST_TO_ADDR
33934: LD_INT 5
33936: PUSH
33937: FOR_TO
33938: IFFALSE 34052
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33940: LD_ADDR_VAR 0 11
33944: PUSH
33945: LD_VAR 0 13
33949: PPUSH
33950: CALL_OW 250
33954: PPUSH
33955: LD_VAR 0 10
33959: PPUSH
33960: LD_INT 2
33962: PPUSH
33963: CALL_OW 272
33967: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33968: LD_ADDR_VAR 0 12
33972: PUSH
33973: LD_VAR 0 13
33977: PPUSH
33978: CALL_OW 251
33982: PPUSH
33983: LD_VAR 0 10
33987: PPUSH
33988: LD_INT 2
33990: PPUSH
33991: CALL_OW 273
33995: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33996: LD_VAR 0 11
34000: PPUSH
34001: LD_VAR 0 12
34005: PPUSH
34006: CALL_OW 488
34010: PUSH
34011: LD_VAR 0 11
34015: PPUSH
34016: LD_VAR 0 12
34020: PPUSH
34021: CALL_OW 428
34025: NOT
34026: AND
34027: IFFALSE 34050
// begin ComMoveXY ( tmp , _x , _y ) ;
34029: LD_VAR 0 13
34033: PPUSH
34034: LD_VAR 0 11
34038: PPUSH
34039: LD_VAR 0 12
34043: PPUSH
34044: CALL_OW 111
// break ;
34048: GO 34052
// end ; end ;
34050: GO 33937
34052: POP
34053: POP
// end ; end ;
34054: GO 33379
34056: POP
34057: POP
// end ;
34058: LD_VAR 0 8
34062: RET
// export function BuildingTechInvented ( side , btype ) ; begin
34063: LD_INT 0
34065: PPUSH
// result := true ;
34066: LD_ADDR_VAR 0 3
34070: PUSH
34071: LD_INT 1
34073: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
34074: LD_VAR 0 2
34078: PUSH
34079: LD_INT 24
34081: DOUBLE
34082: EQUAL
34083: IFTRUE 34093
34085: LD_INT 33
34087: DOUBLE
34088: EQUAL
34089: IFTRUE 34093
34091: GO 34118
34093: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
34094: LD_ADDR_VAR 0 3
34098: PUSH
34099: LD_INT 32
34101: PPUSH
34102: LD_VAR 0 1
34106: PPUSH
34107: CALL_OW 321
34111: PUSH
34112: LD_INT 2
34114: EQUAL
34115: ST_TO_ADDR
34116: GO 34438
34118: LD_INT 20
34120: DOUBLE
34121: EQUAL
34122: IFTRUE 34126
34124: GO 34151
34126: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
34127: LD_ADDR_VAR 0 3
34131: PUSH
34132: LD_INT 6
34134: PPUSH
34135: LD_VAR 0 1
34139: PPUSH
34140: CALL_OW 321
34144: PUSH
34145: LD_INT 2
34147: EQUAL
34148: ST_TO_ADDR
34149: GO 34438
34151: LD_INT 22
34153: DOUBLE
34154: EQUAL
34155: IFTRUE 34165
34157: LD_INT 36
34159: DOUBLE
34160: EQUAL
34161: IFTRUE 34165
34163: GO 34190
34165: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
34166: LD_ADDR_VAR 0 3
34170: PUSH
34171: LD_INT 15
34173: PPUSH
34174: LD_VAR 0 1
34178: PPUSH
34179: CALL_OW 321
34183: PUSH
34184: LD_INT 2
34186: EQUAL
34187: ST_TO_ADDR
34188: GO 34438
34190: LD_INT 30
34192: DOUBLE
34193: EQUAL
34194: IFTRUE 34198
34196: GO 34223
34198: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
34199: LD_ADDR_VAR 0 3
34203: PUSH
34204: LD_INT 20
34206: PPUSH
34207: LD_VAR 0 1
34211: PPUSH
34212: CALL_OW 321
34216: PUSH
34217: LD_INT 2
34219: EQUAL
34220: ST_TO_ADDR
34221: GO 34438
34223: LD_INT 28
34225: DOUBLE
34226: EQUAL
34227: IFTRUE 34237
34229: LD_INT 21
34231: DOUBLE
34232: EQUAL
34233: IFTRUE 34237
34235: GO 34262
34237: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
34238: LD_ADDR_VAR 0 3
34242: PUSH
34243: LD_INT 21
34245: PPUSH
34246: LD_VAR 0 1
34250: PPUSH
34251: CALL_OW 321
34255: PUSH
34256: LD_INT 2
34258: EQUAL
34259: ST_TO_ADDR
34260: GO 34438
34262: LD_INT 16
34264: DOUBLE
34265: EQUAL
34266: IFTRUE 34270
34268: GO 34297
34270: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
34271: LD_ADDR_VAR 0 3
34275: PUSH
34276: LD_EXP 94
34280: PPUSH
34281: LD_VAR 0 1
34285: PPUSH
34286: CALL_OW 321
34290: PUSH
34291: LD_INT 2
34293: EQUAL
34294: ST_TO_ADDR
34295: GO 34438
34297: LD_INT 19
34299: DOUBLE
34300: EQUAL
34301: IFTRUE 34311
34303: LD_INT 23
34305: DOUBLE
34306: EQUAL
34307: IFTRUE 34311
34309: GO 34338
34311: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
34312: LD_ADDR_VAR 0 3
34316: PUSH
34317: LD_EXP 93
34321: PPUSH
34322: LD_VAR 0 1
34326: PPUSH
34327: CALL_OW 321
34331: PUSH
34332: LD_INT 2
34334: EQUAL
34335: ST_TO_ADDR
34336: GO 34438
34338: LD_INT 17
34340: DOUBLE
34341: EQUAL
34342: IFTRUE 34346
34344: GO 34371
34346: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
34347: LD_ADDR_VAR 0 3
34351: PUSH
34352: LD_INT 39
34354: PPUSH
34355: LD_VAR 0 1
34359: PPUSH
34360: CALL_OW 321
34364: PUSH
34365: LD_INT 2
34367: EQUAL
34368: ST_TO_ADDR
34369: GO 34438
34371: LD_INT 18
34373: DOUBLE
34374: EQUAL
34375: IFTRUE 34379
34377: GO 34404
34379: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
34380: LD_ADDR_VAR 0 3
34384: PUSH
34385: LD_INT 40
34387: PPUSH
34388: LD_VAR 0 1
34392: PPUSH
34393: CALL_OW 321
34397: PUSH
34398: LD_INT 2
34400: EQUAL
34401: ST_TO_ADDR
34402: GO 34438
34404: LD_INT 27
34406: DOUBLE
34407: EQUAL
34408: IFTRUE 34412
34410: GO 34437
34412: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
34413: LD_ADDR_VAR 0 3
34417: PUSH
34418: LD_INT 35
34420: PPUSH
34421: LD_VAR 0 1
34425: PPUSH
34426: CALL_OW 321
34430: PUSH
34431: LD_INT 2
34433: EQUAL
34434: ST_TO_ADDR
34435: GO 34438
34437: POP
// end ;
34438: LD_VAR 0 3
34442: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
34443: LD_INT 0
34445: PPUSH
34446: PPUSH
34447: PPUSH
34448: PPUSH
34449: PPUSH
34450: PPUSH
34451: PPUSH
34452: PPUSH
34453: PPUSH
34454: PPUSH
34455: PPUSH
// result := false ;
34456: LD_ADDR_VAR 0 6
34460: PUSH
34461: LD_INT 0
34463: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34464: LD_VAR 0 1
34468: NOT
34469: PUSH
34470: LD_VAR 0 1
34474: PPUSH
34475: CALL_OW 266
34479: PUSH
34480: LD_INT 0
34482: PUSH
34483: LD_INT 1
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: IN
34490: NOT
34491: OR
34492: PUSH
34493: LD_VAR 0 2
34497: NOT
34498: OR
34499: PUSH
34500: LD_VAR 0 5
34504: PUSH
34505: LD_INT 0
34507: PUSH
34508: LD_INT 1
34510: PUSH
34511: LD_INT 2
34513: PUSH
34514: LD_INT 3
34516: PUSH
34517: LD_INT 4
34519: PUSH
34520: LD_INT 5
34522: PUSH
34523: EMPTY
34524: LIST
34525: LIST
34526: LIST
34527: LIST
34528: LIST
34529: LIST
34530: IN
34531: NOT
34532: OR
34533: PUSH
34534: LD_VAR 0 3
34538: PPUSH
34539: LD_VAR 0 4
34543: PPUSH
34544: CALL_OW 488
34548: NOT
34549: OR
34550: IFFALSE 34554
// exit ;
34552: GO 35290
// side := GetSide ( depot ) ;
34554: LD_ADDR_VAR 0 9
34558: PUSH
34559: LD_VAR 0 1
34563: PPUSH
34564: CALL_OW 255
34568: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
34569: LD_VAR 0 9
34573: PPUSH
34574: LD_VAR 0 2
34578: PPUSH
34579: CALL 34063 0 2
34583: NOT
34584: IFFALSE 34588
// exit ;
34586: GO 35290
// pom := GetBase ( depot ) ;
34588: LD_ADDR_VAR 0 10
34592: PUSH
34593: LD_VAR 0 1
34597: PPUSH
34598: CALL_OW 274
34602: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
34603: LD_ADDR_VAR 0 11
34607: PUSH
34608: LD_VAR 0 2
34612: PPUSH
34613: LD_VAR 0 1
34617: PPUSH
34618: CALL_OW 248
34622: PPUSH
34623: CALL_OW 450
34627: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
34628: LD_VAR 0 10
34632: PPUSH
34633: LD_INT 1
34635: PPUSH
34636: CALL_OW 275
34640: PUSH
34641: LD_VAR 0 11
34645: PUSH
34646: LD_INT 1
34648: ARRAY
34649: GREATEREQUAL
34650: PUSH
34651: LD_VAR 0 10
34655: PPUSH
34656: LD_INT 2
34658: PPUSH
34659: CALL_OW 275
34663: PUSH
34664: LD_VAR 0 11
34668: PUSH
34669: LD_INT 2
34671: ARRAY
34672: GREATEREQUAL
34673: AND
34674: PUSH
34675: LD_VAR 0 10
34679: PPUSH
34680: LD_INT 3
34682: PPUSH
34683: CALL_OW 275
34687: PUSH
34688: LD_VAR 0 11
34692: PUSH
34693: LD_INT 3
34695: ARRAY
34696: GREATEREQUAL
34697: AND
34698: NOT
34699: IFFALSE 34703
// exit ;
34701: GO 35290
// if GetBType ( depot ) = b_depot then
34703: LD_VAR 0 1
34707: PPUSH
34708: CALL_OW 266
34712: PUSH
34713: LD_INT 0
34715: EQUAL
34716: IFFALSE 34728
// dist := 28 else
34718: LD_ADDR_VAR 0 14
34722: PUSH
34723: LD_INT 28
34725: ST_TO_ADDR
34726: GO 34736
// dist := 36 ;
34728: LD_ADDR_VAR 0 14
34732: PUSH
34733: LD_INT 36
34735: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
34736: LD_VAR 0 1
34740: PPUSH
34741: LD_VAR 0 3
34745: PPUSH
34746: LD_VAR 0 4
34750: PPUSH
34751: CALL_OW 297
34755: PUSH
34756: LD_VAR 0 14
34760: GREATER
34761: IFFALSE 34765
// exit ;
34763: GO 35290
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
34765: LD_ADDR_VAR 0 12
34769: PUSH
34770: LD_VAR 0 2
34774: PPUSH
34775: LD_VAR 0 3
34779: PPUSH
34780: LD_VAR 0 4
34784: PPUSH
34785: LD_VAR 0 5
34789: PPUSH
34790: LD_VAR 0 1
34794: PPUSH
34795: CALL_OW 248
34799: PPUSH
34800: LD_INT 0
34802: PPUSH
34803: CALL 35295 0 6
34807: ST_TO_ADDR
// if not hexes then
34808: LD_VAR 0 12
34812: NOT
34813: IFFALSE 34817
// exit ;
34815: GO 35290
// hex := GetHexInfo ( x , y ) ;
34817: LD_ADDR_VAR 0 15
34821: PUSH
34822: LD_VAR 0 3
34826: PPUSH
34827: LD_VAR 0 4
34831: PPUSH
34832: CALL_OW 546
34836: ST_TO_ADDR
// if hex [ 1 ] then
34837: LD_VAR 0 15
34841: PUSH
34842: LD_INT 1
34844: ARRAY
34845: IFFALSE 34849
// exit ;
34847: GO 35290
// height := hex [ 2 ] ;
34849: LD_ADDR_VAR 0 13
34853: PUSH
34854: LD_VAR 0 15
34858: PUSH
34859: LD_INT 2
34861: ARRAY
34862: ST_TO_ADDR
// for i = 1 to hexes do
34863: LD_ADDR_VAR 0 7
34867: PUSH
34868: DOUBLE
34869: LD_INT 1
34871: DEC
34872: ST_TO_ADDR
34873: LD_VAR 0 12
34877: PUSH
34878: FOR_TO
34879: IFFALSE 35209
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
34881: LD_VAR 0 12
34885: PUSH
34886: LD_VAR 0 7
34890: ARRAY
34891: PUSH
34892: LD_INT 1
34894: ARRAY
34895: PPUSH
34896: LD_VAR 0 12
34900: PUSH
34901: LD_VAR 0 7
34905: ARRAY
34906: PUSH
34907: LD_INT 2
34909: ARRAY
34910: PPUSH
34911: CALL_OW 488
34915: NOT
34916: PUSH
34917: LD_VAR 0 12
34921: PUSH
34922: LD_VAR 0 7
34926: ARRAY
34927: PUSH
34928: LD_INT 1
34930: ARRAY
34931: PPUSH
34932: LD_VAR 0 12
34936: PUSH
34937: LD_VAR 0 7
34941: ARRAY
34942: PUSH
34943: LD_INT 2
34945: ARRAY
34946: PPUSH
34947: CALL_OW 428
34951: PUSH
34952: LD_INT 0
34954: GREATER
34955: OR
34956: PUSH
34957: LD_VAR 0 12
34961: PUSH
34962: LD_VAR 0 7
34966: ARRAY
34967: PUSH
34968: LD_INT 1
34970: ARRAY
34971: PPUSH
34972: LD_VAR 0 12
34976: PUSH
34977: LD_VAR 0 7
34981: ARRAY
34982: PUSH
34983: LD_INT 2
34985: ARRAY
34986: PPUSH
34987: CALL_OW 351
34991: OR
34992: IFFALSE 34998
// exit ;
34994: POP
34995: POP
34996: GO 35290
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34998: LD_ADDR_VAR 0 8
35002: PUSH
35003: LD_VAR 0 12
35007: PUSH
35008: LD_VAR 0 7
35012: ARRAY
35013: PUSH
35014: LD_INT 1
35016: ARRAY
35017: PPUSH
35018: LD_VAR 0 12
35022: PUSH
35023: LD_VAR 0 7
35027: ARRAY
35028: PUSH
35029: LD_INT 2
35031: ARRAY
35032: PPUSH
35033: CALL_OW 546
35037: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
35038: LD_VAR 0 8
35042: PUSH
35043: LD_INT 1
35045: ARRAY
35046: PUSH
35047: LD_VAR 0 8
35051: PUSH
35052: LD_INT 2
35054: ARRAY
35055: PUSH
35056: LD_VAR 0 13
35060: PUSH
35061: LD_INT 2
35063: PLUS
35064: GREATER
35065: OR
35066: PUSH
35067: LD_VAR 0 8
35071: PUSH
35072: LD_INT 2
35074: ARRAY
35075: PUSH
35076: LD_VAR 0 13
35080: PUSH
35081: LD_INT 2
35083: MINUS
35084: LESS
35085: OR
35086: PUSH
35087: LD_VAR 0 8
35091: PUSH
35092: LD_INT 3
35094: ARRAY
35095: PUSH
35096: LD_INT 0
35098: PUSH
35099: LD_INT 8
35101: PUSH
35102: LD_INT 9
35104: PUSH
35105: LD_INT 10
35107: PUSH
35108: LD_INT 11
35110: PUSH
35111: LD_INT 12
35113: PUSH
35114: LD_INT 13
35116: PUSH
35117: LD_INT 16
35119: PUSH
35120: LD_INT 17
35122: PUSH
35123: LD_INT 18
35125: PUSH
35126: LD_INT 19
35128: PUSH
35129: LD_INT 20
35131: PUSH
35132: LD_INT 21
35134: PUSH
35135: EMPTY
35136: LIST
35137: LIST
35138: LIST
35139: LIST
35140: LIST
35141: LIST
35142: LIST
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: IN
35150: NOT
35151: OR
35152: PUSH
35153: LD_VAR 0 8
35157: PUSH
35158: LD_INT 5
35160: ARRAY
35161: NOT
35162: OR
35163: PUSH
35164: LD_VAR 0 8
35168: PUSH
35169: LD_INT 6
35171: ARRAY
35172: PUSH
35173: LD_INT 1
35175: PUSH
35176: LD_INT 2
35178: PUSH
35179: LD_INT 7
35181: PUSH
35182: LD_INT 9
35184: PUSH
35185: LD_INT 10
35187: PUSH
35188: LD_INT 11
35190: PUSH
35191: EMPTY
35192: LIST
35193: LIST
35194: LIST
35195: LIST
35196: LIST
35197: LIST
35198: IN
35199: NOT
35200: OR
35201: IFFALSE 35207
// exit ;
35203: POP
35204: POP
35205: GO 35290
// end ;
35207: GO 34878
35209: POP
35210: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35211: LD_VAR 0 9
35215: PPUSH
35216: LD_VAR 0 3
35220: PPUSH
35221: LD_VAR 0 4
35225: PPUSH
35226: LD_INT 20
35228: PPUSH
35229: CALL 27236 0 4
35233: PUSH
35234: LD_INT 4
35236: ARRAY
35237: IFFALSE 35241
// exit ;
35239: GO 35290
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
35241: LD_VAR 0 2
35245: PUSH
35246: LD_INT 29
35248: PUSH
35249: LD_INT 30
35251: PUSH
35252: EMPTY
35253: LIST
35254: LIST
35255: IN
35256: PUSH
35257: LD_VAR 0 3
35261: PPUSH
35262: LD_VAR 0 4
35266: PPUSH
35267: LD_VAR 0 9
35271: PPUSH
35272: CALL_OW 440
35276: NOT
35277: AND
35278: IFFALSE 35282
// exit ;
35280: GO 35290
// result := true ;
35282: LD_ADDR_VAR 0 6
35286: PUSH
35287: LD_INT 1
35289: ST_TO_ADDR
// end ;
35290: LD_VAR 0 6
35294: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
35295: LD_INT 0
35297: PPUSH
35298: PPUSH
35299: PPUSH
35300: PPUSH
35301: PPUSH
35302: PPUSH
35303: PPUSH
35304: PPUSH
35305: PPUSH
35306: PPUSH
35307: PPUSH
35308: PPUSH
35309: PPUSH
35310: PPUSH
35311: PPUSH
35312: PPUSH
35313: PPUSH
35314: PPUSH
35315: PPUSH
35316: PPUSH
35317: PPUSH
35318: PPUSH
35319: PPUSH
35320: PPUSH
35321: PPUSH
35322: PPUSH
35323: PPUSH
35324: PPUSH
35325: PPUSH
35326: PPUSH
35327: PPUSH
35328: PPUSH
35329: PPUSH
35330: PPUSH
35331: PPUSH
35332: PPUSH
35333: PPUSH
35334: PPUSH
35335: PPUSH
35336: PPUSH
35337: PPUSH
35338: PPUSH
35339: PPUSH
35340: PPUSH
35341: PPUSH
35342: PPUSH
35343: PPUSH
35344: PPUSH
35345: PPUSH
35346: PPUSH
35347: PPUSH
35348: PPUSH
35349: PPUSH
35350: PPUSH
35351: PPUSH
35352: PPUSH
35353: PPUSH
35354: PPUSH
// result = [ ] ;
35355: LD_ADDR_VAR 0 7
35359: PUSH
35360: EMPTY
35361: ST_TO_ADDR
// temp_list = [ ] ;
35362: LD_ADDR_VAR 0 9
35366: PUSH
35367: EMPTY
35368: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
35369: LD_VAR 0 4
35373: PUSH
35374: LD_INT 0
35376: PUSH
35377: LD_INT 1
35379: PUSH
35380: LD_INT 2
35382: PUSH
35383: LD_INT 3
35385: PUSH
35386: LD_INT 4
35388: PUSH
35389: LD_INT 5
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: LIST
35396: LIST
35397: LIST
35398: LIST
35399: IN
35400: NOT
35401: PUSH
35402: LD_VAR 0 1
35406: PUSH
35407: LD_INT 0
35409: PUSH
35410: LD_INT 1
35412: PUSH
35413: EMPTY
35414: LIST
35415: LIST
35416: IN
35417: PUSH
35418: LD_VAR 0 5
35422: PUSH
35423: LD_INT 1
35425: PUSH
35426: LD_INT 2
35428: PUSH
35429: LD_INT 3
35431: PUSH
35432: EMPTY
35433: LIST
35434: LIST
35435: LIST
35436: IN
35437: NOT
35438: AND
35439: OR
35440: IFFALSE 35444
// exit ;
35442: GO 53835
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
35444: LD_VAR 0 1
35448: PUSH
35449: LD_INT 6
35451: PUSH
35452: LD_INT 7
35454: PUSH
35455: LD_INT 8
35457: PUSH
35458: LD_INT 13
35460: PUSH
35461: LD_INT 12
35463: PUSH
35464: LD_INT 15
35466: PUSH
35467: LD_INT 11
35469: PUSH
35470: LD_INT 14
35472: PUSH
35473: LD_INT 10
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: LIST
35480: LIST
35481: LIST
35482: LIST
35483: LIST
35484: LIST
35485: LIST
35486: IN
35487: IFFALSE 35497
// btype = b_lab ;
35489: LD_ADDR_VAR 0 1
35493: PUSH
35494: LD_INT 6
35496: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
35497: LD_VAR 0 6
35501: PUSH
35502: LD_INT 0
35504: PUSH
35505: LD_INT 1
35507: PUSH
35508: LD_INT 2
35510: PUSH
35511: EMPTY
35512: LIST
35513: LIST
35514: LIST
35515: IN
35516: NOT
35517: PUSH
35518: LD_VAR 0 1
35522: PUSH
35523: LD_INT 0
35525: PUSH
35526: LD_INT 1
35528: PUSH
35529: LD_INT 2
35531: PUSH
35532: LD_INT 3
35534: PUSH
35535: LD_INT 6
35537: PUSH
35538: LD_INT 36
35540: PUSH
35541: LD_INT 4
35543: PUSH
35544: LD_INT 5
35546: PUSH
35547: LD_INT 31
35549: PUSH
35550: LD_INT 32
35552: PUSH
35553: LD_INT 33
35555: PUSH
35556: EMPTY
35557: LIST
35558: LIST
35559: LIST
35560: LIST
35561: LIST
35562: LIST
35563: LIST
35564: LIST
35565: LIST
35566: LIST
35567: LIST
35568: IN
35569: NOT
35570: PUSH
35571: LD_VAR 0 6
35575: PUSH
35576: LD_INT 1
35578: EQUAL
35579: AND
35580: OR
35581: PUSH
35582: LD_VAR 0 1
35586: PUSH
35587: LD_INT 2
35589: PUSH
35590: LD_INT 3
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: IN
35597: NOT
35598: PUSH
35599: LD_VAR 0 6
35603: PUSH
35604: LD_INT 2
35606: EQUAL
35607: AND
35608: OR
35609: IFFALSE 35619
// mode = 0 ;
35611: LD_ADDR_VAR 0 6
35615: PUSH
35616: LD_INT 0
35618: ST_TO_ADDR
// case mode of 0 :
35619: LD_VAR 0 6
35623: PUSH
35624: LD_INT 0
35626: DOUBLE
35627: EQUAL
35628: IFTRUE 35632
35630: GO 47085
35632: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35633: LD_ADDR_VAR 0 11
35637: PUSH
35638: LD_INT 0
35640: PUSH
35641: LD_INT 0
35643: PUSH
35644: EMPTY
35645: LIST
35646: LIST
35647: PUSH
35648: LD_INT 0
35650: PUSH
35651: LD_INT 1
35653: NEG
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: PUSH
35659: LD_INT 1
35661: PUSH
35662: LD_INT 0
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: PUSH
35669: LD_INT 1
35671: PUSH
35672: LD_INT 1
35674: PUSH
35675: EMPTY
35676: LIST
35677: LIST
35678: PUSH
35679: LD_INT 0
35681: PUSH
35682: LD_INT 1
35684: PUSH
35685: EMPTY
35686: LIST
35687: LIST
35688: PUSH
35689: LD_INT 1
35691: NEG
35692: PUSH
35693: LD_INT 0
35695: PUSH
35696: EMPTY
35697: LIST
35698: LIST
35699: PUSH
35700: LD_INT 1
35702: NEG
35703: PUSH
35704: LD_INT 1
35706: NEG
35707: PUSH
35708: EMPTY
35709: LIST
35710: LIST
35711: PUSH
35712: LD_INT 1
35714: NEG
35715: PUSH
35716: LD_INT 2
35718: NEG
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: PUSH
35724: LD_INT 0
35726: PUSH
35727: LD_INT 2
35729: NEG
35730: PUSH
35731: EMPTY
35732: LIST
35733: LIST
35734: PUSH
35735: LD_INT 1
35737: PUSH
35738: LD_INT 1
35740: NEG
35741: PUSH
35742: EMPTY
35743: LIST
35744: LIST
35745: PUSH
35746: LD_INT 1
35748: PUSH
35749: LD_INT 2
35751: PUSH
35752: EMPTY
35753: LIST
35754: LIST
35755: PUSH
35756: LD_INT 0
35758: PUSH
35759: LD_INT 2
35761: PUSH
35762: EMPTY
35763: LIST
35764: LIST
35765: PUSH
35766: LD_INT 1
35768: NEG
35769: PUSH
35770: LD_INT 1
35772: PUSH
35773: EMPTY
35774: LIST
35775: LIST
35776: PUSH
35777: LD_INT 1
35779: PUSH
35780: LD_INT 3
35782: PUSH
35783: EMPTY
35784: LIST
35785: LIST
35786: PUSH
35787: LD_INT 0
35789: PUSH
35790: LD_INT 3
35792: PUSH
35793: EMPTY
35794: LIST
35795: LIST
35796: PUSH
35797: LD_INT 1
35799: NEG
35800: PUSH
35801: LD_INT 2
35803: PUSH
35804: EMPTY
35805: LIST
35806: LIST
35807: PUSH
35808: EMPTY
35809: LIST
35810: LIST
35811: LIST
35812: LIST
35813: LIST
35814: LIST
35815: LIST
35816: LIST
35817: LIST
35818: LIST
35819: LIST
35820: LIST
35821: LIST
35822: LIST
35823: LIST
35824: LIST
35825: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35826: LD_ADDR_VAR 0 12
35830: PUSH
35831: LD_INT 0
35833: PUSH
35834: LD_INT 0
35836: PUSH
35837: EMPTY
35838: LIST
35839: LIST
35840: PUSH
35841: LD_INT 0
35843: PUSH
35844: LD_INT 1
35846: NEG
35847: PUSH
35848: EMPTY
35849: LIST
35850: LIST
35851: PUSH
35852: LD_INT 1
35854: PUSH
35855: LD_INT 0
35857: PUSH
35858: EMPTY
35859: LIST
35860: LIST
35861: PUSH
35862: LD_INT 1
35864: PUSH
35865: LD_INT 1
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: PUSH
35872: LD_INT 0
35874: PUSH
35875: LD_INT 1
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: PUSH
35882: LD_INT 1
35884: NEG
35885: PUSH
35886: LD_INT 0
35888: PUSH
35889: EMPTY
35890: LIST
35891: LIST
35892: PUSH
35893: LD_INT 1
35895: NEG
35896: PUSH
35897: LD_INT 1
35899: NEG
35900: PUSH
35901: EMPTY
35902: LIST
35903: LIST
35904: PUSH
35905: LD_INT 1
35907: PUSH
35908: LD_INT 1
35910: NEG
35911: PUSH
35912: EMPTY
35913: LIST
35914: LIST
35915: PUSH
35916: LD_INT 2
35918: PUSH
35919: LD_INT 0
35921: PUSH
35922: EMPTY
35923: LIST
35924: LIST
35925: PUSH
35926: LD_INT 2
35928: PUSH
35929: LD_INT 1
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: LD_INT 1
35938: NEG
35939: PUSH
35940: LD_INT 1
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PUSH
35947: LD_INT 2
35949: NEG
35950: PUSH
35951: LD_INT 0
35953: PUSH
35954: EMPTY
35955: LIST
35956: LIST
35957: PUSH
35958: LD_INT 2
35960: NEG
35961: PUSH
35962: LD_INT 1
35964: NEG
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: PUSH
35970: LD_INT 2
35972: NEG
35973: PUSH
35974: LD_INT 1
35976: PUSH
35977: EMPTY
35978: LIST
35979: LIST
35980: PUSH
35981: LD_INT 3
35983: NEG
35984: PUSH
35985: LD_INT 0
35987: PUSH
35988: EMPTY
35989: LIST
35990: LIST
35991: PUSH
35992: LD_INT 3
35994: NEG
35995: PUSH
35996: LD_INT 1
35998: NEG
35999: PUSH
36000: EMPTY
36001: LIST
36002: LIST
36003: PUSH
36004: EMPTY
36005: LIST
36006: LIST
36007: LIST
36008: LIST
36009: LIST
36010: LIST
36011: LIST
36012: LIST
36013: LIST
36014: LIST
36015: LIST
36016: LIST
36017: LIST
36018: LIST
36019: LIST
36020: LIST
36021: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36022: LD_ADDR_VAR 0 13
36026: PUSH
36027: LD_INT 0
36029: PUSH
36030: LD_INT 0
36032: PUSH
36033: EMPTY
36034: LIST
36035: LIST
36036: PUSH
36037: LD_INT 0
36039: PUSH
36040: LD_INT 1
36042: NEG
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: PUSH
36048: LD_INT 1
36050: PUSH
36051: LD_INT 0
36053: PUSH
36054: EMPTY
36055: LIST
36056: LIST
36057: PUSH
36058: LD_INT 1
36060: PUSH
36061: LD_INT 1
36063: PUSH
36064: EMPTY
36065: LIST
36066: LIST
36067: PUSH
36068: LD_INT 0
36070: PUSH
36071: LD_INT 1
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: PUSH
36078: LD_INT 1
36080: NEG
36081: PUSH
36082: LD_INT 0
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: PUSH
36089: LD_INT 1
36091: NEG
36092: PUSH
36093: LD_INT 1
36095: NEG
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: PUSH
36101: LD_INT 1
36103: NEG
36104: PUSH
36105: LD_INT 2
36107: NEG
36108: PUSH
36109: EMPTY
36110: LIST
36111: LIST
36112: PUSH
36113: LD_INT 2
36115: PUSH
36116: LD_INT 1
36118: PUSH
36119: EMPTY
36120: LIST
36121: LIST
36122: PUSH
36123: LD_INT 2
36125: PUSH
36126: LD_INT 2
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: PUSH
36133: LD_INT 1
36135: PUSH
36136: LD_INT 2
36138: PUSH
36139: EMPTY
36140: LIST
36141: LIST
36142: PUSH
36143: LD_INT 2
36145: NEG
36146: PUSH
36147: LD_INT 1
36149: NEG
36150: PUSH
36151: EMPTY
36152: LIST
36153: LIST
36154: PUSH
36155: LD_INT 2
36157: NEG
36158: PUSH
36159: LD_INT 2
36161: NEG
36162: PUSH
36163: EMPTY
36164: LIST
36165: LIST
36166: PUSH
36167: LD_INT 2
36169: NEG
36170: PUSH
36171: LD_INT 3
36173: NEG
36174: PUSH
36175: EMPTY
36176: LIST
36177: LIST
36178: PUSH
36179: LD_INT 3
36181: NEG
36182: PUSH
36183: LD_INT 2
36185: NEG
36186: PUSH
36187: EMPTY
36188: LIST
36189: LIST
36190: PUSH
36191: LD_INT 3
36193: NEG
36194: PUSH
36195: LD_INT 3
36197: NEG
36198: PUSH
36199: EMPTY
36200: LIST
36201: LIST
36202: PUSH
36203: EMPTY
36204: LIST
36205: LIST
36206: LIST
36207: LIST
36208: LIST
36209: LIST
36210: LIST
36211: LIST
36212: LIST
36213: LIST
36214: LIST
36215: LIST
36216: LIST
36217: LIST
36218: LIST
36219: LIST
36220: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36221: LD_ADDR_VAR 0 14
36225: PUSH
36226: LD_INT 0
36228: PUSH
36229: LD_INT 0
36231: PUSH
36232: EMPTY
36233: LIST
36234: LIST
36235: PUSH
36236: LD_INT 0
36238: PUSH
36239: LD_INT 1
36241: NEG
36242: PUSH
36243: EMPTY
36244: LIST
36245: LIST
36246: PUSH
36247: LD_INT 1
36249: PUSH
36250: LD_INT 0
36252: PUSH
36253: EMPTY
36254: LIST
36255: LIST
36256: PUSH
36257: LD_INT 1
36259: PUSH
36260: LD_INT 1
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: PUSH
36267: LD_INT 0
36269: PUSH
36270: LD_INT 1
36272: PUSH
36273: EMPTY
36274: LIST
36275: LIST
36276: PUSH
36277: LD_INT 1
36279: NEG
36280: PUSH
36281: LD_INT 0
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: PUSH
36288: LD_INT 1
36290: NEG
36291: PUSH
36292: LD_INT 1
36294: NEG
36295: PUSH
36296: EMPTY
36297: LIST
36298: LIST
36299: PUSH
36300: LD_INT 1
36302: NEG
36303: PUSH
36304: LD_INT 2
36306: NEG
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: PUSH
36312: LD_INT 0
36314: PUSH
36315: LD_INT 2
36317: NEG
36318: PUSH
36319: EMPTY
36320: LIST
36321: LIST
36322: PUSH
36323: LD_INT 1
36325: PUSH
36326: LD_INT 1
36328: NEG
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: PUSH
36334: LD_INT 1
36336: PUSH
36337: LD_INT 2
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: PUSH
36344: LD_INT 0
36346: PUSH
36347: LD_INT 2
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: LD_INT 1
36356: NEG
36357: PUSH
36358: LD_INT 1
36360: PUSH
36361: EMPTY
36362: LIST
36363: LIST
36364: PUSH
36365: LD_INT 1
36367: NEG
36368: PUSH
36369: LD_INT 3
36371: NEG
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: PUSH
36377: LD_INT 0
36379: PUSH
36380: LD_INT 3
36382: NEG
36383: PUSH
36384: EMPTY
36385: LIST
36386: LIST
36387: PUSH
36388: LD_INT 1
36390: PUSH
36391: LD_INT 2
36393: NEG
36394: PUSH
36395: EMPTY
36396: LIST
36397: LIST
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36417: LD_ADDR_VAR 0 15
36421: PUSH
36422: LD_INT 0
36424: PUSH
36425: LD_INT 0
36427: PUSH
36428: EMPTY
36429: LIST
36430: LIST
36431: PUSH
36432: LD_INT 0
36434: PUSH
36435: LD_INT 1
36437: NEG
36438: PUSH
36439: EMPTY
36440: LIST
36441: LIST
36442: PUSH
36443: LD_INT 1
36445: PUSH
36446: LD_INT 0
36448: PUSH
36449: EMPTY
36450: LIST
36451: LIST
36452: PUSH
36453: LD_INT 1
36455: PUSH
36456: LD_INT 1
36458: PUSH
36459: EMPTY
36460: LIST
36461: LIST
36462: PUSH
36463: LD_INT 0
36465: PUSH
36466: LD_INT 1
36468: PUSH
36469: EMPTY
36470: LIST
36471: LIST
36472: PUSH
36473: LD_INT 1
36475: NEG
36476: PUSH
36477: LD_INT 0
36479: PUSH
36480: EMPTY
36481: LIST
36482: LIST
36483: PUSH
36484: LD_INT 1
36486: NEG
36487: PUSH
36488: LD_INT 1
36490: NEG
36491: PUSH
36492: EMPTY
36493: LIST
36494: LIST
36495: PUSH
36496: LD_INT 1
36498: PUSH
36499: LD_INT 1
36501: NEG
36502: PUSH
36503: EMPTY
36504: LIST
36505: LIST
36506: PUSH
36507: LD_INT 2
36509: PUSH
36510: LD_INT 0
36512: PUSH
36513: EMPTY
36514: LIST
36515: LIST
36516: PUSH
36517: LD_INT 2
36519: PUSH
36520: LD_INT 1
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: PUSH
36527: LD_INT 1
36529: NEG
36530: PUSH
36531: LD_INT 1
36533: PUSH
36534: EMPTY
36535: LIST
36536: LIST
36537: PUSH
36538: LD_INT 2
36540: NEG
36541: PUSH
36542: LD_INT 0
36544: PUSH
36545: EMPTY
36546: LIST
36547: LIST
36548: PUSH
36549: LD_INT 2
36551: NEG
36552: PUSH
36553: LD_INT 1
36555: NEG
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PUSH
36561: LD_INT 2
36563: PUSH
36564: LD_INT 1
36566: NEG
36567: PUSH
36568: EMPTY
36569: LIST
36570: LIST
36571: PUSH
36572: LD_INT 3
36574: PUSH
36575: LD_INT 0
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 3
36584: PUSH
36585: LD_INT 1
36587: PUSH
36588: EMPTY
36589: LIST
36590: LIST
36591: PUSH
36592: EMPTY
36593: LIST
36594: LIST
36595: LIST
36596: LIST
36597: LIST
36598: LIST
36599: LIST
36600: LIST
36601: LIST
36602: LIST
36603: LIST
36604: LIST
36605: LIST
36606: LIST
36607: LIST
36608: LIST
36609: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36610: LD_ADDR_VAR 0 16
36614: PUSH
36615: LD_INT 0
36617: PUSH
36618: LD_INT 0
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: PUSH
36625: LD_INT 0
36627: PUSH
36628: LD_INT 1
36630: NEG
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: LD_INT 1
36638: PUSH
36639: LD_INT 0
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PUSH
36646: LD_INT 1
36648: PUSH
36649: LD_INT 1
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: PUSH
36656: LD_INT 0
36658: PUSH
36659: LD_INT 1
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: PUSH
36666: LD_INT 1
36668: NEG
36669: PUSH
36670: LD_INT 0
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: PUSH
36677: LD_INT 1
36679: NEG
36680: PUSH
36681: LD_INT 1
36683: NEG
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: PUSH
36689: LD_INT 1
36691: NEG
36692: PUSH
36693: LD_INT 2
36695: NEG
36696: PUSH
36697: EMPTY
36698: LIST
36699: LIST
36700: PUSH
36701: LD_INT 2
36703: PUSH
36704: LD_INT 1
36706: PUSH
36707: EMPTY
36708: LIST
36709: LIST
36710: PUSH
36711: LD_INT 2
36713: PUSH
36714: LD_INT 2
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: PUSH
36721: LD_INT 1
36723: PUSH
36724: LD_INT 2
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: PUSH
36731: LD_INT 2
36733: NEG
36734: PUSH
36735: LD_INT 1
36737: NEG
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: PUSH
36743: LD_INT 2
36745: NEG
36746: PUSH
36747: LD_INT 2
36749: NEG
36750: PUSH
36751: EMPTY
36752: LIST
36753: LIST
36754: PUSH
36755: LD_INT 3
36757: PUSH
36758: LD_INT 2
36760: PUSH
36761: EMPTY
36762: LIST
36763: LIST
36764: PUSH
36765: LD_INT 3
36767: PUSH
36768: LD_INT 3
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: PUSH
36775: LD_INT 2
36777: PUSH
36778: LD_INT 3
36780: PUSH
36781: EMPTY
36782: LIST
36783: LIST
36784: PUSH
36785: EMPTY
36786: LIST
36787: LIST
36788: LIST
36789: LIST
36790: LIST
36791: LIST
36792: LIST
36793: LIST
36794: LIST
36795: LIST
36796: LIST
36797: LIST
36798: LIST
36799: LIST
36800: LIST
36801: LIST
36802: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36803: LD_ADDR_VAR 0 17
36807: PUSH
36808: LD_INT 0
36810: PUSH
36811: LD_INT 0
36813: PUSH
36814: EMPTY
36815: LIST
36816: LIST
36817: PUSH
36818: LD_INT 0
36820: PUSH
36821: LD_INT 1
36823: NEG
36824: PUSH
36825: EMPTY
36826: LIST
36827: LIST
36828: PUSH
36829: LD_INT 1
36831: PUSH
36832: LD_INT 0
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: PUSH
36839: LD_INT 1
36841: PUSH
36842: LD_INT 1
36844: PUSH
36845: EMPTY
36846: LIST
36847: LIST
36848: PUSH
36849: LD_INT 0
36851: PUSH
36852: LD_INT 1
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: PUSH
36859: LD_INT 1
36861: NEG
36862: PUSH
36863: LD_INT 0
36865: PUSH
36866: EMPTY
36867: LIST
36868: LIST
36869: PUSH
36870: LD_INT 1
36872: NEG
36873: PUSH
36874: LD_INT 1
36876: NEG
36877: PUSH
36878: EMPTY
36879: LIST
36880: LIST
36881: PUSH
36882: LD_INT 1
36884: NEG
36885: PUSH
36886: LD_INT 2
36888: NEG
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: PUSH
36894: LD_INT 0
36896: PUSH
36897: LD_INT 2
36899: NEG
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: PUSH
36905: LD_INT 1
36907: PUSH
36908: LD_INT 1
36910: NEG
36911: PUSH
36912: EMPTY
36913: LIST
36914: LIST
36915: PUSH
36916: LD_INT 2
36918: PUSH
36919: LD_INT 0
36921: PUSH
36922: EMPTY
36923: LIST
36924: LIST
36925: PUSH
36926: LD_INT 2
36928: PUSH
36929: LD_INT 1
36931: PUSH
36932: EMPTY
36933: LIST
36934: LIST
36935: PUSH
36936: LD_INT 2
36938: PUSH
36939: LD_INT 2
36941: PUSH
36942: EMPTY
36943: LIST
36944: LIST
36945: PUSH
36946: LD_INT 1
36948: PUSH
36949: LD_INT 2
36951: PUSH
36952: EMPTY
36953: LIST
36954: LIST
36955: PUSH
36956: LD_INT 0
36958: PUSH
36959: LD_INT 2
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: PUSH
36966: LD_INT 1
36968: NEG
36969: PUSH
36970: LD_INT 1
36972: PUSH
36973: EMPTY
36974: LIST
36975: LIST
36976: PUSH
36977: LD_INT 2
36979: NEG
36980: PUSH
36981: LD_INT 0
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: PUSH
36988: LD_INT 2
36990: NEG
36991: PUSH
36992: LD_INT 1
36994: NEG
36995: PUSH
36996: EMPTY
36997: LIST
36998: LIST
36999: PUSH
37000: LD_INT 2
37002: NEG
37003: PUSH
37004: LD_INT 2
37006: NEG
37007: PUSH
37008: EMPTY
37009: LIST
37010: LIST
37011: PUSH
37012: EMPTY
37013: LIST
37014: LIST
37015: LIST
37016: LIST
37017: LIST
37018: LIST
37019: LIST
37020: LIST
37021: LIST
37022: LIST
37023: LIST
37024: LIST
37025: LIST
37026: LIST
37027: LIST
37028: LIST
37029: LIST
37030: LIST
37031: LIST
37032: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37033: LD_ADDR_VAR 0 18
37037: PUSH
37038: LD_INT 0
37040: PUSH
37041: LD_INT 0
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: PUSH
37048: LD_INT 0
37050: PUSH
37051: LD_INT 1
37053: NEG
37054: PUSH
37055: EMPTY
37056: LIST
37057: LIST
37058: PUSH
37059: LD_INT 1
37061: PUSH
37062: LD_INT 0
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: PUSH
37069: LD_INT 1
37071: PUSH
37072: LD_INT 1
37074: PUSH
37075: EMPTY
37076: LIST
37077: LIST
37078: PUSH
37079: LD_INT 0
37081: PUSH
37082: LD_INT 1
37084: PUSH
37085: EMPTY
37086: LIST
37087: LIST
37088: PUSH
37089: LD_INT 1
37091: NEG
37092: PUSH
37093: LD_INT 0
37095: PUSH
37096: EMPTY
37097: LIST
37098: LIST
37099: PUSH
37100: LD_INT 1
37102: NEG
37103: PUSH
37104: LD_INT 1
37106: NEG
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: PUSH
37112: LD_INT 1
37114: NEG
37115: PUSH
37116: LD_INT 2
37118: NEG
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: PUSH
37124: LD_INT 0
37126: PUSH
37127: LD_INT 2
37129: NEG
37130: PUSH
37131: EMPTY
37132: LIST
37133: LIST
37134: PUSH
37135: LD_INT 1
37137: PUSH
37138: LD_INT 1
37140: NEG
37141: PUSH
37142: EMPTY
37143: LIST
37144: LIST
37145: PUSH
37146: LD_INT 2
37148: PUSH
37149: LD_INT 0
37151: PUSH
37152: EMPTY
37153: LIST
37154: LIST
37155: PUSH
37156: LD_INT 2
37158: PUSH
37159: LD_INT 1
37161: PUSH
37162: EMPTY
37163: LIST
37164: LIST
37165: PUSH
37166: LD_INT 2
37168: PUSH
37169: LD_INT 2
37171: PUSH
37172: EMPTY
37173: LIST
37174: LIST
37175: PUSH
37176: LD_INT 1
37178: PUSH
37179: LD_INT 2
37181: PUSH
37182: EMPTY
37183: LIST
37184: LIST
37185: PUSH
37186: LD_INT 0
37188: PUSH
37189: LD_INT 2
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: PUSH
37196: LD_INT 1
37198: NEG
37199: PUSH
37200: LD_INT 1
37202: PUSH
37203: EMPTY
37204: LIST
37205: LIST
37206: PUSH
37207: LD_INT 2
37209: NEG
37210: PUSH
37211: LD_INT 0
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: PUSH
37218: LD_INT 2
37220: NEG
37221: PUSH
37222: LD_INT 1
37224: NEG
37225: PUSH
37226: EMPTY
37227: LIST
37228: LIST
37229: PUSH
37230: LD_INT 2
37232: NEG
37233: PUSH
37234: LD_INT 2
37236: NEG
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: LIST
37249: LIST
37250: LIST
37251: LIST
37252: LIST
37253: LIST
37254: LIST
37255: LIST
37256: LIST
37257: LIST
37258: LIST
37259: LIST
37260: LIST
37261: LIST
37262: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37263: LD_ADDR_VAR 0 19
37267: PUSH
37268: LD_INT 0
37270: PUSH
37271: LD_INT 0
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: PUSH
37278: LD_INT 0
37280: PUSH
37281: LD_INT 1
37283: NEG
37284: PUSH
37285: EMPTY
37286: LIST
37287: LIST
37288: PUSH
37289: LD_INT 1
37291: PUSH
37292: LD_INT 0
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: PUSH
37299: LD_INT 1
37301: PUSH
37302: LD_INT 1
37304: PUSH
37305: EMPTY
37306: LIST
37307: LIST
37308: PUSH
37309: LD_INT 0
37311: PUSH
37312: LD_INT 1
37314: PUSH
37315: EMPTY
37316: LIST
37317: LIST
37318: PUSH
37319: LD_INT 1
37321: NEG
37322: PUSH
37323: LD_INT 0
37325: PUSH
37326: EMPTY
37327: LIST
37328: LIST
37329: PUSH
37330: LD_INT 1
37332: NEG
37333: PUSH
37334: LD_INT 1
37336: NEG
37337: PUSH
37338: EMPTY
37339: LIST
37340: LIST
37341: PUSH
37342: LD_INT 1
37344: NEG
37345: PUSH
37346: LD_INT 2
37348: NEG
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: PUSH
37354: LD_INT 0
37356: PUSH
37357: LD_INT 2
37359: NEG
37360: PUSH
37361: EMPTY
37362: LIST
37363: LIST
37364: PUSH
37365: LD_INT 1
37367: PUSH
37368: LD_INT 1
37370: NEG
37371: PUSH
37372: EMPTY
37373: LIST
37374: LIST
37375: PUSH
37376: LD_INT 2
37378: PUSH
37379: LD_INT 0
37381: PUSH
37382: EMPTY
37383: LIST
37384: LIST
37385: PUSH
37386: LD_INT 2
37388: PUSH
37389: LD_INT 1
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: PUSH
37396: LD_INT 2
37398: PUSH
37399: LD_INT 2
37401: PUSH
37402: EMPTY
37403: LIST
37404: LIST
37405: PUSH
37406: LD_INT 1
37408: PUSH
37409: LD_INT 2
37411: PUSH
37412: EMPTY
37413: LIST
37414: LIST
37415: PUSH
37416: LD_INT 0
37418: PUSH
37419: LD_INT 2
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: PUSH
37426: LD_INT 1
37428: NEG
37429: PUSH
37430: LD_INT 1
37432: PUSH
37433: EMPTY
37434: LIST
37435: LIST
37436: PUSH
37437: LD_INT 2
37439: NEG
37440: PUSH
37441: LD_INT 0
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: PUSH
37448: LD_INT 2
37450: NEG
37451: PUSH
37452: LD_INT 1
37454: NEG
37455: PUSH
37456: EMPTY
37457: LIST
37458: LIST
37459: PUSH
37460: LD_INT 2
37462: NEG
37463: PUSH
37464: LD_INT 2
37466: NEG
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: LIST
37476: LIST
37477: LIST
37478: LIST
37479: LIST
37480: LIST
37481: LIST
37482: LIST
37483: LIST
37484: LIST
37485: LIST
37486: LIST
37487: LIST
37488: LIST
37489: LIST
37490: LIST
37491: LIST
37492: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37493: LD_ADDR_VAR 0 20
37497: PUSH
37498: LD_INT 0
37500: PUSH
37501: LD_INT 0
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: PUSH
37508: LD_INT 0
37510: PUSH
37511: LD_INT 1
37513: NEG
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: PUSH
37519: LD_INT 1
37521: PUSH
37522: LD_INT 0
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: LD_INT 1
37531: PUSH
37532: LD_INT 1
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PUSH
37539: LD_INT 0
37541: PUSH
37542: LD_INT 1
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: PUSH
37549: LD_INT 1
37551: NEG
37552: PUSH
37553: LD_INT 0
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: PUSH
37560: LD_INT 1
37562: NEG
37563: PUSH
37564: LD_INT 1
37566: NEG
37567: PUSH
37568: EMPTY
37569: LIST
37570: LIST
37571: PUSH
37572: LD_INT 1
37574: NEG
37575: PUSH
37576: LD_INT 2
37578: NEG
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: LD_INT 0
37586: PUSH
37587: LD_INT 2
37589: NEG
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PUSH
37595: LD_INT 1
37597: PUSH
37598: LD_INT 1
37600: NEG
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: LD_INT 2
37608: PUSH
37609: LD_INT 0
37611: PUSH
37612: EMPTY
37613: LIST
37614: LIST
37615: PUSH
37616: LD_INT 2
37618: PUSH
37619: LD_INT 1
37621: PUSH
37622: EMPTY
37623: LIST
37624: LIST
37625: PUSH
37626: LD_INT 2
37628: PUSH
37629: LD_INT 2
37631: PUSH
37632: EMPTY
37633: LIST
37634: LIST
37635: PUSH
37636: LD_INT 1
37638: PUSH
37639: LD_INT 2
37641: PUSH
37642: EMPTY
37643: LIST
37644: LIST
37645: PUSH
37646: LD_INT 0
37648: PUSH
37649: LD_INT 2
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PUSH
37656: LD_INT 1
37658: NEG
37659: PUSH
37660: LD_INT 1
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: LD_INT 2
37669: NEG
37670: PUSH
37671: LD_INT 0
37673: PUSH
37674: EMPTY
37675: LIST
37676: LIST
37677: PUSH
37678: LD_INT 2
37680: NEG
37681: PUSH
37682: LD_INT 1
37684: NEG
37685: PUSH
37686: EMPTY
37687: LIST
37688: LIST
37689: PUSH
37690: LD_INT 2
37692: NEG
37693: PUSH
37694: LD_INT 2
37696: NEG
37697: PUSH
37698: EMPTY
37699: LIST
37700: LIST
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: LIST
37706: LIST
37707: LIST
37708: LIST
37709: LIST
37710: LIST
37711: LIST
37712: LIST
37713: LIST
37714: LIST
37715: LIST
37716: LIST
37717: LIST
37718: LIST
37719: LIST
37720: LIST
37721: LIST
37722: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37723: LD_ADDR_VAR 0 21
37727: PUSH
37728: LD_INT 0
37730: PUSH
37731: LD_INT 0
37733: PUSH
37734: EMPTY
37735: LIST
37736: LIST
37737: PUSH
37738: LD_INT 0
37740: PUSH
37741: LD_INT 1
37743: NEG
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: PUSH
37749: LD_INT 1
37751: PUSH
37752: LD_INT 0
37754: PUSH
37755: EMPTY
37756: LIST
37757: LIST
37758: PUSH
37759: LD_INT 1
37761: PUSH
37762: LD_INT 1
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: PUSH
37769: LD_INT 0
37771: PUSH
37772: LD_INT 1
37774: PUSH
37775: EMPTY
37776: LIST
37777: LIST
37778: PUSH
37779: LD_INT 1
37781: NEG
37782: PUSH
37783: LD_INT 0
37785: PUSH
37786: EMPTY
37787: LIST
37788: LIST
37789: PUSH
37790: LD_INT 1
37792: NEG
37793: PUSH
37794: LD_INT 1
37796: NEG
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 1
37804: NEG
37805: PUSH
37806: LD_INT 2
37808: NEG
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PUSH
37814: LD_INT 0
37816: PUSH
37817: LD_INT 2
37819: NEG
37820: PUSH
37821: EMPTY
37822: LIST
37823: LIST
37824: PUSH
37825: LD_INT 1
37827: PUSH
37828: LD_INT 1
37830: NEG
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: PUSH
37836: LD_INT 2
37838: PUSH
37839: LD_INT 0
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: PUSH
37846: LD_INT 2
37848: PUSH
37849: LD_INT 1
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: LD_INT 2
37858: PUSH
37859: LD_INT 2
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: LD_INT 1
37868: PUSH
37869: LD_INT 2
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: LD_INT 0
37878: PUSH
37879: LD_INT 2
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: PUSH
37886: LD_INT 1
37888: NEG
37889: PUSH
37890: LD_INT 1
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 2
37899: NEG
37900: PUSH
37901: LD_INT 0
37903: PUSH
37904: EMPTY
37905: LIST
37906: LIST
37907: PUSH
37908: LD_INT 2
37910: NEG
37911: PUSH
37912: LD_INT 1
37914: NEG
37915: PUSH
37916: EMPTY
37917: LIST
37918: LIST
37919: PUSH
37920: LD_INT 2
37922: NEG
37923: PUSH
37924: LD_INT 2
37926: NEG
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: PUSH
37932: EMPTY
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: LIST
37944: LIST
37945: LIST
37946: LIST
37947: LIST
37948: LIST
37949: LIST
37950: LIST
37951: LIST
37952: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37953: LD_ADDR_VAR 0 22
37957: PUSH
37958: LD_INT 0
37960: PUSH
37961: LD_INT 0
37963: PUSH
37964: EMPTY
37965: LIST
37966: LIST
37967: PUSH
37968: LD_INT 0
37970: PUSH
37971: LD_INT 1
37973: NEG
37974: PUSH
37975: EMPTY
37976: LIST
37977: LIST
37978: PUSH
37979: LD_INT 1
37981: PUSH
37982: LD_INT 0
37984: PUSH
37985: EMPTY
37986: LIST
37987: LIST
37988: PUSH
37989: LD_INT 1
37991: PUSH
37992: LD_INT 1
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: PUSH
37999: LD_INT 0
38001: PUSH
38002: LD_INT 1
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: PUSH
38009: LD_INT 1
38011: NEG
38012: PUSH
38013: LD_INT 0
38015: PUSH
38016: EMPTY
38017: LIST
38018: LIST
38019: PUSH
38020: LD_INT 1
38022: NEG
38023: PUSH
38024: LD_INT 1
38026: NEG
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: LD_INT 1
38034: NEG
38035: PUSH
38036: LD_INT 2
38038: NEG
38039: PUSH
38040: EMPTY
38041: LIST
38042: LIST
38043: PUSH
38044: LD_INT 0
38046: PUSH
38047: LD_INT 2
38049: NEG
38050: PUSH
38051: EMPTY
38052: LIST
38053: LIST
38054: PUSH
38055: LD_INT 1
38057: PUSH
38058: LD_INT 1
38060: NEG
38061: PUSH
38062: EMPTY
38063: LIST
38064: LIST
38065: PUSH
38066: LD_INT 2
38068: PUSH
38069: LD_INT 0
38071: PUSH
38072: EMPTY
38073: LIST
38074: LIST
38075: PUSH
38076: LD_INT 2
38078: PUSH
38079: LD_INT 1
38081: PUSH
38082: EMPTY
38083: LIST
38084: LIST
38085: PUSH
38086: LD_INT 2
38088: PUSH
38089: LD_INT 2
38091: PUSH
38092: EMPTY
38093: LIST
38094: LIST
38095: PUSH
38096: LD_INT 1
38098: PUSH
38099: LD_INT 2
38101: PUSH
38102: EMPTY
38103: LIST
38104: LIST
38105: PUSH
38106: LD_INT 0
38108: PUSH
38109: LD_INT 2
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: PUSH
38116: LD_INT 1
38118: NEG
38119: PUSH
38120: LD_INT 1
38122: PUSH
38123: EMPTY
38124: LIST
38125: LIST
38126: PUSH
38127: LD_INT 2
38129: NEG
38130: PUSH
38131: LD_INT 0
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: PUSH
38138: LD_INT 2
38140: NEG
38141: PUSH
38142: LD_INT 1
38144: NEG
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: PUSH
38150: LD_INT 2
38152: NEG
38153: PUSH
38154: LD_INT 2
38156: NEG
38157: PUSH
38158: EMPTY
38159: LIST
38160: LIST
38161: PUSH
38162: EMPTY
38163: LIST
38164: LIST
38165: LIST
38166: LIST
38167: LIST
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38183: LD_ADDR_VAR 0 23
38187: PUSH
38188: LD_INT 0
38190: PUSH
38191: LD_INT 0
38193: PUSH
38194: EMPTY
38195: LIST
38196: LIST
38197: PUSH
38198: LD_INT 0
38200: PUSH
38201: LD_INT 1
38203: NEG
38204: PUSH
38205: EMPTY
38206: LIST
38207: LIST
38208: PUSH
38209: LD_INT 1
38211: PUSH
38212: LD_INT 0
38214: PUSH
38215: EMPTY
38216: LIST
38217: LIST
38218: PUSH
38219: LD_INT 1
38221: PUSH
38222: LD_INT 1
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: PUSH
38229: LD_INT 0
38231: PUSH
38232: LD_INT 1
38234: PUSH
38235: EMPTY
38236: LIST
38237: LIST
38238: PUSH
38239: LD_INT 1
38241: NEG
38242: PUSH
38243: LD_INT 0
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: PUSH
38250: LD_INT 1
38252: NEG
38253: PUSH
38254: LD_INT 1
38256: NEG
38257: PUSH
38258: EMPTY
38259: LIST
38260: LIST
38261: PUSH
38262: LD_INT 1
38264: NEG
38265: PUSH
38266: LD_INT 2
38268: NEG
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: PUSH
38274: LD_INT 0
38276: PUSH
38277: LD_INT 2
38279: NEG
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: PUSH
38285: LD_INT 1
38287: PUSH
38288: LD_INT 1
38290: NEG
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: PUSH
38296: LD_INT 2
38298: PUSH
38299: LD_INT 0
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 2
38308: PUSH
38309: LD_INT 1
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: PUSH
38316: LD_INT 2
38318: PUSH
38319: LD_INT 2
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: PUSH
38326: LD_INT 1
38328: PUSH
38329: LD_INT 2
38331: PUSH
38332: EMPTY
38333: LIST
38334: LIST
38335: PUSH
38336: LD_INT 0
38338: PUSH
38339: LD_INT 2
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: PUSH
38346: LD_INT 1
38348: NEG
38349: PUSH
38350: LD_INT 1
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PUSH
38357: LD_INT 2
38359: NEG
38360: PUSH
38361: LD_INT 0
38363: PUSH
38364: EMPTY
38365: LIST
38366: LIST
38367: PUSH
38368: LD_INT 2
38370: NEG
38371: PUSH
38372: LD_INT 1
38374: NEG
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: PUSH
38380: LD_INT 2
38382: NEG
38383: PUSH
38384: LD_INT 2
38386: NEG
38387: PUSH
38388: EMPTY
38389: LIST
38390: LIST
38391: PUSH
38392: LD_INT 2
38394: NEG
38395: PUSH
38396: LD_INT 3
38398: NEG
38399: PUSH
38400: EMPTY
38401: LIST
38402: LIST
38403: PUSH
38404: LD_INT 1
38406: NEG
38407: PUSH
38408: LD_INT 3
38410: NEG
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: PUSH
38416: LD_INT 1
38418: PUSH
38419: LD_INT 2
38421: NEG
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: PUSH
38427: LD_INT 2
38429: PUSH
38430: LD_INT 1
38432: NEG
38433: PUSH
38434: EMPTY
38435: LIST
38436: LIST
38437: PUSH
38438: EMPTY
38439: LIST
38440: LIST
38441: LIST
38442: LIST
38443: LIST
38444: LIST
38445: LIST
38446: LIST
38447: LIST
38448: LIST
38449: LIST
38450: LIST
38451: LIST
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
38463: LD_ADDR_VAR 0 24
38467: PUSH
38468: LD_INT 0
38470: PUSH
38471: LD_INT 0
38473: PUSH
38474: EMPTY
38475: LIST
38476: LIST
38477: PUSH
38478: LD_INT 0
38480: PUSH
38481: LD_INT 1
38483: NEG
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: PUSH
38489: LD_INT 1
38491: PUSH
38492: LD_INT 0
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: PUSH
38499: LD_INT 1
38501: PUSH
38502: LD_INT 1
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: LD_INT 0
38511: PUSH
38512: LD_INT 1
38514: PUSH
38515: EMPTY
38516: LIST
38517: LIST
38518: PUSH
38519: LD_INT 1
38521: NEG
38522: PUSH
38523: LD_INT 0
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: LD_INT 1
38532: NEG
38533: PUSH
38534: LD_INT 1
38536: NEG
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 1
38544: NEG
38545: PUSH
38546: LD_INT 2
38548: NEG
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: PUSH
38554: LD_INT 0
38556: PUSH
38557: LD_INT 2
38559: NEG
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: PUSH
38565: LD_INT 1
38567: PUSH
38568: LD_INT 1
38570: NEG
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: PUSH
38576: LD_INT 2
38578: PUSH
38579: LD_INT 0
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: PUSH
38586: LD_INT 2
38588: PUSH
38589: LD_INT 1
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: PUSH
38596: LD_INT 2
38598: PUSH
38599: LD_INT 2
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: PUSH
38606: LD_INT 1
38608: PUSH
38609: LD_INT 2
38611: PUSH
38612: EMPTY
38613: LIST
38614: LIST
38615: PUSH
38616: LD_INT 0
38618: PUSH
38619: LD_INT 2
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: PUSH
38626: LD_INT 1
38628: NEG
38629: PUSH
38630: LD_INT 1
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PUSH
38637: LD_INT 2
38639: NEG
38640: PUSH
38641: LD_INT 0
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: PUSH
38648: LD_INT 2
38650: NEG
38651: PUSH
38652: LD_INT 1
38654: NEG
38655: PUSH
38656: EMPTY
38657: LIST
38658: LIST
38659: PUSH
38660: LD_INT 2
38662: NEG
38663: PUSH
38664: LD_INT 2
38666: NEG
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: PUSH
38672: LD_INT 1
38674: PUSH
38675: LD_INT 2
38677: NEG
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: PUSH
38683: LD_INT 2
38685: PUSH
38686: LD_INT 1
38688: NEG
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: LD_INT 3
38696: PUSH
38697: LD_INT 1
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PUSH
38704: LD_INT 3
38706: PUSH
38707: LD_INT 2
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PUSH
38714: EMPTY
38715: LIST
38716: LIST
38717: LIST
38718: LIST
38719: LIST
38720: LIST
38721: LIST
38722: LIST
38723: LIST
38724: LIST
38725: LIST
38726: LIST
38727: LIST
38728: LIST
38729: LIST
38730: LIST
38731: LIST
38732: LIST
38733: LIST
38734: LIST
38735: LIST
38736: LIST
38737: LIST
38738: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
38739: LD_ADDR_VAR 0 25
38743: PUSH
38744: LD_INT 0
38746: PUSH
38747: LD_INT 0
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: PUSH
38754: LD_INT 0
38756: PUSH
38757: LD_INT 1
38759: NEG
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PUSH
38765: LD_INT 1
38767: PUSH
38768: LD_INT 0
38770: PUSH
38771: EMPTY
38772: LIST
38773: LIST
38774: PUSH
38775: LD_INT 1
38777: PUSH
38778: LD_INT 1
38780: PUSH
38781: EMPTY
38782: LIST
38783: LIST
38784: PUSH
38785: LD_INT 0
38787: PUSH
38788: LD_INT 1
38790: PUSH
38791: EMPTY
38792: LIST
38793: LIST
38794: PUSH
38795: LD_INT 1
38797: NEG
38798: PUSH
38799: LD_INT 0
38801: PUSH
38802: EMPTY
38803: LIST
38804: LIST
38805: PUSH
38806: LD_INT 1
38808: NEG
38809: PUSH
38810: LD_INT 1
38812: NEG
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: PUSH
38818: LD_INT 1
38820: NEG
38821: PUSH
38822: LD_INT 2
38824: NEG
38825: PUSH
38826: EMPTY
38827: LIST
38828: LIST
38829: PUSH
38830: LD_INT 0
38832: PUSH
38833: LD_INT 2
38835: NEG
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: PUSH
38841: LD_INT 1
38843: PUSH
38844: LD_INT 1
38846: NEG
38847: PUSH
38848: EMPTY
38849: LIST
38850: LIST
38851: PUSH
38852: LD_INT 2
38854: PUSH
38855: LD_INT 0
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 2
38864: PUSH
38865: LD_INT 1
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: LD_INT 2
38874: PUSH
38875: LD_INT 2
38877: PUSH
38878: EMPTY
38879: LIST
38880: LIST
38881: PUSH
38882: LD_INT 1
38884: PUSH
38885: LD_INT 2
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: PUSH
38892: LD_INT 0
38894: PUSH
38895: LD_INT 2
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PUSH
38902: LD_INT 1
38904: NEG
38905: PUSH
38906: LD_INT 1
38908: PUSH
38909: EMPTY
38910: LIST
38911: LIST
38912: PUSH
38913: LD_INT 2
38915: NEG
38916: PUSH
38917: LD_INT 0
38919: PUSH
38920: EMPTY
38921: LIST
38922: LIST
38923: PUSH
38924: LD_INT 2
38926: NEG
38927: PUSH
38928: LD_INT 1
38930: NEG
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 2
38938: NEG
38939: PUSH
38940: LD_INT 2
38942: NEG
38943: PUSH
38944: EMPTY
38945: LIST
38946: LIST
38947: PUSH
38948: LD_INT 3
38950: PUSH
38951: LD_INT 1
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: PUSH
38958: LD_INT 3
38960: PUSH
38961: LD_INT 2
38963: PUSH
38964: EMPTY
38965: LIST
38966: LIST
38967: PUSH
38968: LD_INT 2
38970: PUSH
38971: LD_INT 3
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: PUSH
38978: LD_INT 1
38980: PUSH
38981: LD_INT 3
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: LIST
38992: LIST
38993: LIST
38994: LIST
38995: LIST
38996: LIST
38997: LIST
38998: LIST
38999: LIST
39000: LIST
39001: LIST
39002: LIST
39003: LIST
39004: LIST
39005: LIST
39006: LIST
39007: LIST
39008: LIST
39009: LIST
39010: LIST
39011: LIST
39012: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
39013: LD_ADDR_VAR 0 26
39017: PUSH
39018: LD_INT 0
39020: PUSH
39021: LD_INT 0
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: PUSH
39028: LD_INT 0
39030: PUSH
39031: LD_INT 1
39033: NEG
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: LD_INT 1
39041: PUSH
39042: LD_INT 0
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: PUSH
39049: LD_INT 1
39051: PUSH
39052: LD_INT 1
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PUSH
39059: LD_INT 0
39061: PUSH
39062: LD_INT 1
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 1
39071: NEG
39072: PUSH
39073: LD_INT 0
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: LD_INT 1
39082: NEG
39083: PUSH
39084: LD_INT 1
39086: NEG
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: LD_INT 1
39094: NEG
39095: PUSH
39096: LD_INT 2
39098: NEG
39099: PUSH
39100: EMPTY
39101: LIST
39102: LIST
39103: PUSH
39104: LD_INT 0
39106: PUSH
39107: LD_INT 2
39109: NEG
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: PUSH
39115: LD_INT 1
39117: PUSH
39118: LD_INT 1
39120: NEG
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: PUSH
39126: LD_INT 2
39128: PUSH
39129: LD_INT 0
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 2
39138: PUSH
39139: LD_INT 1
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: PUSH
39146: LD_INT 2
39148: PUSH
39149: LD_INT 2
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: PUSH
39156: LD_INT 1
39158: PUSH
39159: LD_INT 2
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: PUSH
39166: LD_INT 0
39168: PUSH
39169: LD_INT 2
39171: PUSH
39172: EMPTY
39173: LIST
39174: LIST
39175: PUSH
39176: LD_INT 1
39178: NEG
39179: PUSH
39180: LD_INT 1
39182: PUSH
39183: EMPTY
39184: LIST
39185: LIST
39186: PUSH
39187: LD_INT 2
39189: NEG
39190: PUSH
39191: LD_INT 0
39193: PUSH
39194: EMPTY
39195: LIST
39196: LIST
39197: PUSH
39198: LD_INT 2
39200: NEG
39201: PUSH
39202: LD_INT 1
39204: NEG
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 2
39212: NEG
39213: PUSH
39214: LD_INT 2
39216: NEG
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PUSH
39222: LD_INT 2
39224: PUSH
39225: LD_INT 3
39227: PUSH
39228: EMPTY
39229: LIST
39230: LIST
39231: PUSH
39232: LD_INT 1
39234: PUSH
39235: LD_INT 3
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: PUSH
39242: LD_INT 1
39244: NEG
39245: PUSH
39246: LD_INT 2
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 2
39255: NEG
39256: PUSH
39257: LD_INT 1
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: PUSH
39264: EMPTY
39265: LIST
39266: LIST
39267: LIST
39268: LIST
39269: LIST
39270: LIST
39271: LIST
39272: LIST
39273: LIST
39274: LIST
39275: LIST
39276: LIST
39277: LIST
39278: LIST
39279: LIST
39280: LIST
39281: LIST
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: LIST
39287: LIST
39288: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39289: LD_ADDR_VAR 0 27
39293: PUSH
39294: LD_INT 0
39296: PUSH
39297: LD_INT 0
39299: PUSH
39300: EMPTY
39301: LIST
39302: LIST
39303: PUSH
39304: LD_INT 0
39306: PUSH
39307: LD_INT 1
39309: NEG
39310: PUSH
39311: EMPTY
39312: LIST
39313: LIST
39314: PUSH
39315: LD_INT 1
39317: PUSH
39318: LD_INT 0
39320: PUSH
39321: EMPTY
39322: LIST
39323: LIST
39324: PUSH
39325: LD_INT 1
39327: PUSH
39328: LD_INT 1
39330: PUSH
39331: EMPTY
39332: LIST
39333: LIST
39334: PUSH
39335: LD_INT 0
39337: PUSH
39338: LD_INT 1
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: PUSH
39345: LD_INT 1
39347: NEG
39348: PUSH
39349: LD_INT 0
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: PUSH
39356: LD_INT 1
39358: NEG
39359: PUSH
39360: LD_INT 1
39362: NEG
39363: PUSH
39364: EMPTY
39365: LIST
39366: LIST
39367: PUSH
39368: LD_INT 1
39370: NEG
39371: PUSH
39372: LD_INT 2
39374: NEG
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: LD_INT 0
39382: PUSH
39383: LD_INT 2
39385: NEG
39386: PUSH
39387: EMPTY
39388: LIST
39389: LIST
39390: PUSH
39391: LD_INT 1
39393: PUSH
39394: LD_INT 1
39396: NEG
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PUSH
39402: LD_INT 2
39404: PUSH
39405: LD_INT 0
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: LD_INT 2
39414: PUSH
39415: LD_INT 1
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: PUSH
39422: LD_INT 2
39424: PUSH
39425: LD_INT 2
39427: PUSH
39428: EMPTY
39429: LIST
39430: LIST
39431: PUSH
39432: LD_INT 1
39434: PUSH
39435: LD_INT 2
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 0
39444: PUSH
39445: LD_INT 2
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: PUSH
39452: LD_INT 1
39454: NEG
39455: PUSH
39456: LD_INT 1
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PUSH
39463: LD_INT 2
39465: NEG
39466: PUSH
39467: LD_INT 0
39469: PUSH
39470: EMPTY
39471: LIST
39472: LIST
39473: PUSH
39474: LD_INT 2
39476: NEG
39477: PUSH
39478: LD_INT 1
39480: NEG
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: PUSH
39486: LD_INT 2
39488: NEG
39489: PUSH
39490: LD_INT 2
39492: NEG
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: LD_INT 1
39500: NEG
39501: PUSH
39502: LD_INT 2
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: LD_INT 2
39511: NEG
39512: PUSH
39513: LD_INT 1
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 3
39522: NEG
39523: PUSH
39524: LD_INT 1
39526: NEG
39527: PUSH
39528: EMPTY
39529: LIST
39530: LIST
39531: PUSH
39532: LD_INT 3
39534: NEG
39535: PUSH
39536: LD_INT 2
39538: NEG
39539: PUSH
39540: EMPTY
39541: LIST
39542: LIST
39543: PUSH
39544: EMPTY
39545: LIST
39546: LIST
39547: LIST
39548: LIST
39549: LIST
39550: LIST
39551: LIST
39552: LIST
39553: LIST
39554: LIST
39555: LIST
39556: LIST
39557: LIST
39558: LIST
39559: LIST
39560: LIST
39561: LIST
39562: LIST
39563: LIST
39564: LIST
39565: LIST
39566: LIST
39567: LIST
39568: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39569: LD_ADDR_VAR 0 28
39573: PUSH
39574: LD_INT 0
39576: PUSH
39577: LD_INT 0
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 0
39586: PUSH
39587: LD_INT 1
39589: NEG
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: LD_INT 1
39597: PUSH
39598: LD_INT 0
39600: PUSH
39601: EMPTY
39602: LIST
39603: LIST
39604: PUSH
39605: LD_INT 1
39607: PUSH
39608: LD_INT 1
39610: PUSH
39611: EMPTY
39612: LIST
39613: LIST
39614: PUSH
39615: LD_INT 0
39617: PUSH
39618: LD_INT 1
39620: PUSH
39621: EMPTY
39622: LIST
39623: LIST
39624: PUSH
39625: LD_INT 1
39627: NEG
39628: PUSH
39629: LD_INT 0
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 1
39638: NEG
39639: PUSH
39640: LD_INT 1
39642: NEG
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 1
39650: NEG
39651: PUSH
39652: LD_INT 2
39654: NEG
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 0
39662: PUSH
39663: LD_INT 2
39665: NEG
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PUSH
39671: LD_INT 1
39673: PUSH
39674: LD_INT 1
39676: NEG
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PUSH
39682: LD_INT 2
39684: PUSH
39685: LD_INT 0
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: PUSH
39692: LD_INT 2
39694: PUSH
39695: LD_INT 1
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: PUSH
39702: LD_INT 2
39704: PUSH
39705: LD_INT 2
39707: PUSH
39708: EMPTY
39709: LIST
39710: LIST
39711: PUSH
39712: LD_INT 1
39714: PUSH
39715: LD_INT 2
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: PUSH
39722: LD_INT 0
39724: PUSH
39725: LD_INT 2
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: LD_INT 1
39734: NEG
39735: PUSH
39736: LD_INT 1
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 2
39745: NEG
39746: PUSH
39747: LD_INT 0
39749: PUSH
39750: EMPTY
39751: LIST
39752: LIST
39753: PUSH
39754: LD_INT 2
39756: NEG
39757: PUSH
39758: LD_INT 1
39760: NEG
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: PUSH
39766: LD_INT 2
39768: NEG
39769: PUSH
39770: LD_INT 2
39772: NEG
39773: PUSH
39774: EMPTY
39775: LIST
39776: LIST
39777: PUSH
39778: LD_INT 2
39780: NEG
39781: PUSH
39782: LD_INT 3
39784: NEG
39785: PUSH
39786: EMPTY
39787: LIST
39788: LIST
39789: PUSH
39790: LD_INT 1
39792: NEG
39793: PUSH
39794: LD_INT 3
39796: NEG
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: PUSH
39802: LD_INT 3
39804: NEG
39805: PUSH
39806: LD_INT 1
39808: NEG
39809: PUSH
39810: EMPTY
39811: LIST
39812: LIST
39813: PUSH
39814: LD_INT 3
39816: NEG
39817: PUSH
39818: LD_INT 2
39820: NEG
39821: PUSH
39822: EMPTY
39823: LIST
39824: LIST
39825: PUSH
39826: EMPTY
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: LIST
39850: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39851: LD_ADDR_VAR 0 29
39855: PUSH
39856: LD_INT 0
39858: PUSH
39859: LD_INT 0
39861: PUSH
39862: EMPTY
39863: LIST
39864: LIST
39865: PUSH
39866: LD_INT 0
39868: PUSH
39869: LD_INT 1
39871: NEG
39872: PUSH
39873: EMPTY
39874: LIST
39875: LIST
39876: PUSH
39877: LD_INT 1
39879: PUSH
39880: LD_INT 0
39882: PUSH
39883: EMPTY
39884: LIST
39885: LIST
39886: PUSH
39887: LD_INT 1
39889: PUSH
39890: LD_INT 1
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 0
39899: PUSH
39900: LD_INT 1
39902: PUSH
39903: EMPTY
39904: LIST
39905: LIST
39906: PUSH
39907: LD_INT 1
39909: NEG
39910: PUSH
39911: LD_INT 0
39913: PUSH
39914: EMPTY
39915: LIST
39916: LIST
39917: PUSH
39918: LD_INT 1
39920: NEG
39921: PUSH
39922: LD_INT 1
39924: NEG
39925: PUSH
39926: EMPTY
39927: LIST
39928: LIST
39929: PUSH
39930: LD_INT 1
39932: NEG
39933: PUSH
39934: LD_INT 2
39936: NEG
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 0
39944: PUSH
39945: LD_INT 2
39947: NEG
39948: PUSH
39949: EMPTY
39950: LIST
39951: LIST
39952: PUSH
39953: LD_INT 1
39955: PUSH
39956: LD_INT 1
39958: NEG
39959: PUSH
39960: EMPTY
39961: LIST
39962: LIST
39963: PUSH
39964: LD_INT 2
39966: PUSH
39967: LD_INT 0
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 2
39976: PUSH
39977: LD_INT 1
39979: PUSH
39980: EMPTY
39981: LIST
39982: LIST
39983: PUSH
39984: LD_INT 1
39986: PUSH
39987: LD_INT 2
39989: PUSH
39990: EMPTY
39991: LIST
39992: LIST
39993: PUSH
39994: LD_INT 0
39996: PUSH
39997: LD_INT 2
39999: PUSH
40000: EMPTY
40001: LIST
40002: LIST
40003: PUSH
40004: LD_INT 1
40006: NEG
40007: PUSH
40008: LD_INT 1
40010: PUSH
40011: EMPTY
40012: LIST
40013: LIST
40014: PUSH
40015: LD_INT 2
40017: NEG
40018: PUSH
40019: LD_INT 1
40021: NEG
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: LD_INT 2
40029: NEG
40030: PUSH
40031: LD_INT 2
40033: NEG
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: LD_INT 2
40041: NEG
40042: PUSH
40043: LD_INT 3
40045: NEG
40046: PUSH
40047: EMPTY
40048: LIST
40049: LIST
40050: PUSH
40051: LD_INT 2
40053: PUSH
40054: LD_INT 1
40056: NEG
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 3
40064: PUSH
40065: LD_INT 1
40067: PUSH
40068: EMPTY
40069: LIST
40070: LIST
40071: PUSH
40072: LD_INT 1
40074: PUSH
40075: LD_INT 3
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 1
40084: NEG
40085: PUSH
40086: LD_INT 2
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 3
40095: NEG
40096: PUSH
40097: LD_INT 2
40099: NEG
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: LIST
40109: LIST
40110: LIST
40111: LIST
40112: LIST
40113: LIST
40114: LIST
40115: LIST
40116: LIST
40117: LIST
40118: LIST
40119: LIST
40120: LIST
40121: LIST
40122: LIST
40123: LIST
40124: LIST
40125: LIST
40126: LIST
40127: LIST
40128: LIST
40129: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40130: LD_ADDR_VAR 0 30
40134: PUSH
40135: LD_INT 0
40137: PUSH
40138: LD_INT 0
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: PUSH
40145: LD_INT 0
40147: PUSH
40148: LD_INT 1
40150: NEG
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PUSH
40156: LD_INT 1
40158: PUSH
40159: LD_INT 0
40161: PUSH
40162: EMPTY
40163: LIST
40164: LIST
40165: PUSH
40166: LD_INT 1
40168: PUSH
40169: LD_INT 1
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: PUSH
40176: LD_INT 0
40178: PUSH
40179: LD_INT 1
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: PUSH
40186: LD_INT 1
40188: NEG
40189: PUSH
40190: LD_INT 0
40192: PUSH
40193: EMPTY
40194: LIST
40195: LIST
40196: PUSH
40197: LD_INT 1
40199: NEG
40200: PUSH
40201: LD_INT 1
40203: NEG
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 1
40211: NEG
40212: PUSH
40213: LD_INT 2
40215: NEG
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 0
40223: PUSH
40224: LD_INT 2
40226: NEG
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: LD_INT 1
40234: PUSH
40235: LD_INT 1
40237: NEG
40238: PUSH
40239: EMPTY
40240: LIST
40241: LIST
40242: PUSH
40243: LD_INT 2
40245: PUSH
40246: LD_INT 0
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 2
40255: PUSH
40256: LD_INT 1
40258: PUSH
40259: EMPTY
40260: LIST
40261: LIST
40262: PUSH
40263: LD_INT 2
40265: PUSH
40266: LD_INT 2
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: PUSH
40273: LD_INT 1
40275: PUSH
40276: LD_INT 2
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 1
40285: NEG
40286: PUSH
40287: LD_INT 1
40289: PUSH
40290: EMPTY
40291: LIST
40292: LIST
40293: PUSH
40294: LD_INT 2
40296: NEG
40297: PUSH
40298: LD_INT 0
40300: PUSH
40301: EMPTY
40302: LIST
40303: LIST
40304: PUSH
40305: LD_INT 2
40307: NEG
40308: PUSH
40309: LD_INT 1
40311: NEG
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 1
40319: NEG
40320: PUSH
40321: LD_INT 3
40323: NEG
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: LD_INT 1
40331: PUSH
40332: LD_INT 2
40334: NEG
40335: PUSH
40336: EMPTY
40337: LIST
40338: LIST
40339: PUSH
40340: LD_INT 3
40342: PUSH
40343: LD_INT 2
40345: PUSH
40346: EMPTY
40347: LIST
40348: LIST
40349: PUSH
40350: LD_INT 2
40352: PUSH
40353: LD_INT 3
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: PUSH
40360: LD_INT 2
40362: NEG
40363: PUSH
40364: LD_INT 1
40366: PUSH
40367: EMPTY
40368: LIST
40369: LIST
40370: PUSH
40371: LD_INT 3
40373: NEG
40374: PUSH
40375: LD_INT 1
40377: NEG
40378: PUSH
40379: EMPTY
40380: LIST
40381: LIST
40382: PUSH
40383: EMPTY
40384: LIST
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: LIST
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40408: LD_ADDR_VAR 0 31
40412: PUSH
40413: LD_INT 0
40415: PUSH
40416: LD_INT 0
40418: PUSH
40419: EMPTY
40420: LIST
40421: LIST
40422: PUSH
40423: LD_INT 0
40425: PUSH
40426: LD_INT 1
40428: NEG
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: PUSH
40434: LD_INT 1
40436: PUSH
40437: LD_INT 0
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: LD_INT 1
40446: PUSH
40447: LD_INT 1
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 0
40456: PUSH
40457: LD_INT 1
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: PUSH
40464: LD_INT 1
40466: NEG
40467: PUSH
40468: LD_INT 0
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: PUSH
40475: LD_INT 1
40477: NEG
40478: PUSH
40479: LD_INT 1
40481: NEG
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: LD_INT 1
40489: NEG
40490: PUSH
40491: LD_INT 2
40493: NEG
40494: PUSH
40495: EMPTY
40496: LIST
40497: LIST
40498: PUSH
40499: LD_INT 1
40501: PUSH
40502: LD_INT 1
40504: NEG
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 2
40512: PUSH
40513: LD_INT 0
40515: PUSH
40516: EMPTY
40517: LIST
40518: LIST
40519: PUSH
40520: LD_INT 2
40522: PUSH
40523: LD_INT 1
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 2
40532: PUSH
40533: LD_INT 2
40535: PUSH
40536: EMPTY
40537: LIST
40538: LIST
40539: PUSH
40540: LD_INT 1
40542: PUSH
40543: LD_INT 2
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: LD_INT 0
40552: PUSH
40553: LD_INT 2
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: PUSH
40560: LD_INT 1
40562: NEG
40563: PUSH
40564: LD_INT 1
40566: PUSH
40567: EMPTY
40568: LIST
40569: LIST
40570: PUSH
40571: LD_INT 2
40573: NEG
40574: PUSH
40575: LD_INT 1
40577: NEG
40578: PUSH
40579: EMPTY
40580: LIST
40581: LIST
40582: PUSH
40583: LD_INT 2
40585: NEG
40586: PUSH
40587: LD_INT 2
40589: NEG
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PUSH
40595: LD_INT 2
40597: NEG
40598: PUSH
40599: LD_INT 3
40601: NEG
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: LD_INT 2
40609: PUSH
40610: LD_INT 1
40612: NEG
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 3
40620: PUSH
40621: LD_INT 1
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 1
40630: PUSH
40631: LD_INT 3
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PUSH
40638: LD_INT 1
40640: NEG
40641: PUSH
40642: LD_INT 2
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_INT 3
40651: NEG
40652: PUSH
40653: LD_INT 2
40655: NEG
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: EMPTY
40662: LIST
40663: LIST
40664: LIST
40665: LIST
40666: LIST
40667: LIST
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: LIST
40677: LIST
40678: LIST
40679: LIST
40680: LIST
40681: LIST
40682: LIST
40683: LIST
40684: LIST
40685: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40686: LD_ADDR_VAR 0 32
40690: PUSH
40691: LD_INT 0
40693: PUSH
40694: LD_INT 0
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: LD_INT 0
40703: PUSH
40704: LD_INT 1
40706: NEG
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: LD_INT 1
40714: PUSH
40715: LD_INT 0
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: LD_INT 1
40724: PUSH
40725: LD_INT 1
40727: PUSH
40728: EMPTY
40729: LIST
40730: LIST
40731: PUSH
40732: LD_INT 0
40734: PUSH
40735: LD_INT 1
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: LD_INT 1
40744: NEG
40745: PUSH
40746: LD_INT 0
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 1
40755: NEG
40756: PUSH
40757: LD_INT 1
40759: NEG
40760: PUSH
40761: EMPTY
40762: LIST
40763: LIST
40764: PUSH
40765: LD_INT 1
40767: NEG
40768: PUSH
40769: LD_INT 2
40771: NEG
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PUSH
40777: LD_INT 0
40779: PUSH
40780: LD_INT 2
40782: NEG
40783: PUSH
40784: EMPTY
40785: LIST
40786: LIST
40787: PUSH
40788: LD_INT 1
40790: PUSH
40791: LD_INT 1
40793: NEG
40794: PUSH
40795: EMPTY
40796: LIST
40797: LIST
40798: PUSH
40799: LD_INT 2
40801: PUSH
40802: LD_INT 1
40804: PUSH
40805: EMPTY
40806: LIST
40807: LIST
40808: PUSH
40809: LD_INT 2
40811: PUSH
40812: LD_INT 2
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PUSH
40819: LD_INT 1
40821: PUSH
40822: LD_INT 2
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: PUSH
40829: LD_INT 0
40831: PUSH
40832: LD_INT 2
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: LD_INT 1
40841: NEG
40842: PUSH
40843: LD_INT 1
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 2
40852: NEG
40853: PUSH
40854: LD_INT 0
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 2
40863: NEG
40864: PUSH
40865: LD_INT 1
40867: NEG
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: PUSH
40873: LD_INT 1
40875: NEG
40876: PUSH
40877: LD_INT 3
40879: NEG
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: LD_INT 1
40887: PUSH
40888: LD_INT 2
40890: NEG
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PUSH
40896: LD_INT 3
40898: PUSH
40899: LD_INT 2
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: PUSH
40906: LD_INT 2
40908: PUSH
40909: LD_INT 3
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: PUSH
40916: LD_INT 2
40918: NEG
40919: PUSH
40920: LD_INT 1
40922: PUSH
40923: EMPTY
40924: LIST
40925: LIST
40926: PUSH
40927: LD_INT 3
40929: NEG
40930: PUSH
40931: LD_INT 1
40933: NEG
40934: PUSH
40935: EMPTY
40936: LIST
40937: LIST
40938: PUSH
40939: EMPTY
40940: LIST
40941: LIST
40942: LIST
40943: LIST
40944: LIST
40945: LIST
40946: LIST
40947: LIST
40948: LIST
40949: LIST
40950: LIST
40951: LIST
40952: LIST
40953: LIST
40954: LIST
40955: LIST
40956: LIST
40957: LIST
40958: LIST
40959: LIST
40960: LIST
40961: LIST
40962: LIST
40963: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40964: LD_ADDR_VAR 0 33
40968: PUSH
40969: LD_INT 0
40971: PUSH
40972: LD_INT 0
40974: PUSH
40975: EMPTY
40976: LIST
40977: LIST
40978: PUSH
40979: LD_INT 0
40981: PUSH
40982: LD_INT 1
40984: NEG
40985: PUSH
40986: EMPTY
40987: LIST
40988: LIST
40989: PUSH
40990: LD_INT 1
40992: PUSH
40993: LD_INT 0
40995: PUSH
40996: EMPTY
40997: LIST
40998: LIST
40999: PUSH
41000: LD_INT 1
41002: PUSH
41003: LD_INT 1
41005: PUSH
41006: EMPTY
41007: LIST
41008: LIST
41009: PUSH
41010: LD_INT 0
41012: PUSH
41013: LD_INT 1
41015: PUSH
41016: EMPTY
41017: LIST
41018: LIST
41019: PUSH
41020: LD_INT 1
41022: NEG
41023: PUSH
41024: LD_INT 0
41026: PUSH
41027: EMPTY
41028: LIST
41029: LIST
41030: PUSH
41031: LD_INT 1
41033: NEG
41034: PUSH
41035: LD_INT 1
41037: NEG
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: LD_INT 1
41045: NEG
41046: PUSH
41047: LD_INT 2
41049: NEG
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 1
41057: PUSH
41058: LD_INT 1
41060: NEG
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 2
41068: PUSH
41069: LD_INT 0
41071: PUSH
41072: EMPTY
41073: LIST
41074: LIST
41075: PUSH
41076: LD_INT 2
41078: PUSH
41079: LD_INT 1
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 1
41088: PUSH
41089: LD_INT 2
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 0
41098: PUSH
41099: LD_INT 2
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 1
41108: NEG
41109: PUSH
41110: LD_INT 1
41112: PUSH
41113: EMPTY
41114: LIST
41115: LIST
41116: PUSH
41117: LD_INT 2
41119: NEG
41120: PUSH
41121: LD_INT 0
41123: PUSH
41124: EMPTY
41125: LIST
41126: LIST
41127: PUSH
41128: LD_INT 2
41130: NEG
41131: PUSH
41132: LD_INT 1
41134: NEG
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 2
41142: NEG
41143: PUSH
41144: LD_INT 2
41146: NEG
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 2
41154: NEG
41155: PUSH
41156: LD_INT 3
41158: NEG
41159: PUSH
41160: EMPTY
41161: LIST
41162: LIST
41163: PUSH
41164: LD_INT 2
41166: PUSH
41167: LD_INT 1
41169: NEG
41170: PUSH
41171: EMPTY
41172: LIST
41173: LIST
41174: PUSH
41175: LD_INT 3
41177: PUSH
41178: LD_INT 1
41180: PUSH
41181: EMPTY
41182: LIST
41183: LIST
41184: PUSH
41185: LD_INT 1
41187: PUSH
41188: LD_INT 3
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: LD_INT 1
41197: NEG
41198: PUSH
41199: LD_INT 2
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: LD_INT 3
41208: NEG
41209: PUSH
41210: LD_INT 2
41212: NEG
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: PUSH
41218: EMPTY
41219: LIST
41220: LIST
41221: LIST
41222: LIST
41223: LIST
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: LIST
41230: LIST
41231: LIST
41232: LIST
41233: LIST
41234: LIST
41235: LIST
41236: LIST
41237: LIST
41238: LIST
41239: LIST
41240: LIST
41241: LIST
41242: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41243: LD_ADDR_VAR 0 34
41247: PUSH
41248: LD_INT 0
41250: PUSH
41251: LD_INT 0
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 0
41260: PUSH
41261: LD_INT 1
41263: NEG
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: LD_INT 1
41271: PUSH
41272: LD_INT 0
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: LD_INT 1
41281: PUSH
41282: LD_INT 1
41284: PUSH
41285: EMPTY
41286: LIST
41287: LIST
41288: PUSH
41289: LD_INT 0
41291: PUSH
41292: LD_INT 1
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 1
41301: NEG
41302: PUSH
41303: LD_INT 0
41305: PUSH
41306: EMPTY
41307: LIST
41308: LIST
41309: PUSH
41310: LD_INT 1
41312: NEG
41313: PUSH
41314: LD_INT 1
41316: NEG
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 1
41324: NEG
41325: PUSH
41326: LD_INT 2
41328: NEG
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: LD_INT 0
41336: PUSH
41337: LD_INT 2
41339: NEG
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: LD_INT 1
41347: PUSH
41348: LD_INT 1
41350: NEG
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: PUSH
41356: LD_INT 2
41358: PUSH
41359: LD_INT 1
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 2
41368: PUSH
41369: LD_INT 2
41371: PUSH
41372: EMPTY
41373: LIST
41374: LIST
41375: PUSH
41376: LD_INT 1
41378: PUSH
41379: LD_INT 2
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: LD_INT 1
41388: NEG
41389: PUSH
41390: LD_INT 1
41392: PUSH
41393: EMPTY
41394: LIST
41395: LIST
41396: PUSH
41397: LD_INT 2
41399: NEG
41400: PUSH
41401: LD_INT 0
41403: PUSH
41404: EMPTY
41405: LIST
41406: LIST
41407: PUSH
41408: LD_INT 2
41410: NEG
41411: PUSH
41412: LD_INT 1
41414: NEG
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: PUSH
41420: LD_INT 2
41422: NEG
41423: PUSH
41424: LD_INT 2
41426: NEG
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: PUSH
41432: LD_INT 1
41434: NEG
41435: PUSH
41436: LD_INT 3
41438: NEG
41439: PUSH
41440: EMPTY
41441: LIST
41442: LIST
41443: PUSH
41444: LD_INT 1
41446: PUSH
41447: LD_INT 2
41449: NEG
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: PUSH
41455: LD_INT 3
41457: PUSH
41458: LD_INT 2
41460: PUSH
41461: EMPTY
41462: LIST
41463: LIST
41464: PUSH
41465: LD_INT 2
41467: PUSH
41468: LD_INT 3
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: PUSH
41475: LD_INT 2
41477: NEG
41478: PUSH
41479: LD_INT 1
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 3
41488: NEG
41489: PUSH
41490: LD_INT 1
41492: NEG
41493: PUSH
41494: EMPTY
41495: LIST
41496: LIST
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: LIST
41502: LIST
41503: LIST
41504: LIST
41505: LIST
41506: LIST
41507: LIST
41508: LIST
41509: LIST
41510: LIST
41511: LIST
41512: LIST
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41523: LD_ADDR_VAR 0 35
41527: PUSH
41528: LD_INT 0
41530: PUSH
41531: LD_INT 0
41533: PUSH
41534: EMPTY
41535: LIST
41536: LIST
41537: PUSH
41538: LD_INT 0
41540: PUSH
41541: LD_INT 1
41543: NEG
41544: PUSH
41545: EMPTY
41546: LIST
41547: LIST
41548: PUSH
41549: LD_INT 1
41551: PUSH
41552: LD_INT 0
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: LD_INT 1
41561: PUSH
41562: LD_INT 1
41564: PUSH
41565: EMPTY
41566: LIST
41567: LIST
41568: PUSH
41569: LD_INT 0
41571: PUSH
41572: LD_INT 1
41574: PUSH
41575: EMPTY
41576: LIST
41577: LIST
41578: PUSH
41579: LD_INT 1
41581: NEG
41582: PUSH
41583: LD_INT 0
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 1
41592: NEG
41593: PUSH
41594: LD_INT 1
41596: NEG
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: LD_INT 2
41604: PUSH
41605: LD_INT 1
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 2
41614: NEG
41615: PUSH
41616: LD_INT 1
41618: NEG
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: LIST
41628: LIST
41629: LIST
41630: LIST
41631: LIST
41632: LIST
41633: LIST
41634: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41635: LD_ADDR_VAR 0 36
41639: PUSH
41640: LD_INT 0
41642: PUSH
41643: LD_INT 0
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: LD_INT 0
41652: PUSH
41653: LD_INT 1
41655: NEG
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: LD_INT 1
41663: PUSH
41664: LD_INT 0
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PUSH
41671: LD_INT 1
41673: PUSH
41674: LD_INT 1
41676: PUSH
41677: EMPTY
41678: LIST
41679: LIST
41680: PUSH
41681: LD_INT 0
41683: PUSH
41684: LD_INT 1
41686: PUSH
41687: EMPTY
41688: LIST
41689: LIST
41690: PUSH
41691: LD_INT 1
41693: NEG
41694: PUSH
41695: LD_INT 0
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: LD_INT 1
41704: NEG
41705: PUSH
41706: LD_INT 1
41708: NEG
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: LD_INT 1
41716: NEG
41717: PUSH
41718: LD_INT 2
41720: NEG
41721: PUSH
41722: EMPTY
41723: LIST
41724: LIST
41725: PUSH
41726: LD_INT 1
41728: PUSH
41729: LD_INT 2
41731: PUSH
41732: EMPTY
41733: LIST
41734: LIST
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: LIST
41743: LIST
41744: LIST
41745: LIST
41746: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41747: LD_ADDR_VAR 0 37
41751: PUSH
41752: LD_INT 0
41754: PUSH
41755: LD_INT 0
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PUSH
41762: LD_INT 0
41764: PUSH
41765: LD_INT 1
41767: NEG
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: PUSH
41773: LD_INT 1
41775: PUSH
41776: LD_INT 0
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: LD_INT 1
41785: PUSH
41786: LD_INT 1
41788: PUSH
41789: EMPTY
41790: LIST
41791: LIST
41792: PUSH
41793: LD_INT 0
41795: PUSH
41796: LD_INT 1
41798: PUSH
41799: EMPTY
41800: LIST
41801: LIST
41802: PUSH
41803: LD_INT 1
41805: NEG
41806: PUSH
41807: LD_INT 0
41809: PUSH
41810: EMPTY
41811: LIST
41812: LIST
41813: PUSH
41814: LD_INT 1
41816: NEG
41817: PUSH
41818: LD_INT 1
41820: NEG
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: LD_INT 1
41828: PUSH
41829: LD_INT 1
41831: NEG
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 1
41839: NEG
41840: PUSH
41841: LD_INT 1
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: LIST
41852: LIST
41853: LIST
41854: LIST
41855: LIST
41856: LIST
41857: LIST
41858: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41859: LD_ADDR_VAR 0 38
41863: PUSH
41864: LD_INT 0
41866: PUSH
41867: LD_INT 0
41869: PUSH
41870: EMPTY
41871: LIST
41872: LIST
41873: PUSH
41874: LD_INT 0
41876: PUSH
41877: LD_INT 1
41879: NEG
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: LD_INT 1
41887: PUSH
41888: LD_INT 0
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PUSH
41895: LD_INT 1
41897: PUSH
41898: LD_INT 1
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PUSH
41905: LD_INT 0
41907: PUSH
41908: LD_INT 1
41910: PUSH
41911: EMPTY
41912: LIST
41913: LIST
41914: PUSH
41915: LD_INT 1
41917: NEG
41918: PUSH
41919: LD_INT 0
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 1
41928: NEG
41929: PUSH
41930: LD_INT 1
41932: NEG
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: LD_INT 2
41940: PUSH
41941: LD_INT 1
41943: PUSH
41944: EMPTY
41945: LIST
41946: LIST
41947: PUSH
41948: LD_INT 2
41950: NEG
41951: PUSH
41952: LD_INT 1
41954: NEG
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: LIST
41964: LIST
41965: LIST
41966: LIST
41967: LIST
41968: LIST
41969: LIST
41970: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41971: LD_ADDR_VAR 0 39
41975: PUSH
41976: LD_INT 0
41978: PUSH
41979: LD_INT 0
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 0
41988: PUSH
41989: LD_INT 1
41991: NEG
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 1
41999: PUSH
42000: LD_INT 0
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 1
42009: PUSH
42010: LD_INT 1
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 0
42019: PUSH
42020: LD_INT 1
42022: PUSH
42023: EMPTY
42024: LIST
42025: LIST
42026: PUSH
42027: LD_INT 1
42029: NEG
42030: PUSH
42031: LD_INT 0
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 1
42040: NEG
42041: PUSH
42042: LD_INT 1
42044: NEG
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 1
42052: NEG
42053: PUSH
42054: LD_INT 2
42056: NEG
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 1
42064: PUSH
42065: LD_INT 2
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: LIST
42080: LIST
42081: LIST
42082: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42083: LD_ADDR_VAR 0 40
42087: PUSH
42088: LD_INT 0
42090: PUSH
42091: LD_INT 0
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 0
42100: PUSH
42101: LD_INT 1
42103: NEG
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 1
42111: PUSH
42112: LD_INT 0
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 1
42121: PUSH
42122: LD_INT 1
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 0
42131: PUSH
42132: LD_INT 1
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: LD_INT 1
42141: NEG
42142: PUSH
42143: LD_INT 0
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 1
42152: NEG
42153: PUSH
42154: LD_INT 1
42156: NEG
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: PUSH
42162: LD_INT 1
42164: PUSH
42165: LD_INT 1
42167: NEG
42168: PUSH
42169: EMPTY
42170: LIST
42171: LIST
42172: PUSH
42173: LD_INT 1
42175: NEG
42176: PUSH
42177: LD_INT 1
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: LIST
42193: LIST
42194: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42195: LD_ADDR_VAR 0 41
42199: PUSH
42200: LD_INT 0
42202: PUSH
42203: LD_INT 0
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PUSH
42210: LD_INT 0
42212: PUSH
42213: LD_INT 1
42215: NEG
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PUSH
42221: LD_INT 1
42223: PUSH
42224: LD_INT 0
42226: PUSH
42227: EMPTY
42228: LIST
42229: LIST
42230: PUSH
42231: LD_INT 1
42233: PUSH
42234: LD_INT 1
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: PUSH
42241: LD_INT 0
42243: PUSH
42244: LD_INT 1
42246: PUSH
42247: EMPTY
42248: LIST
42249: LIST
42250: PUSH
42251: LD_INT 1
42253: NEG
42254: PUSH
42255: LD_INT 0
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: PUSH
42262: LD_INT 1
42264: NEG
42265: PUSH
42266: LD_INT 1
42268: NEG
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: LD_INT 1
42276: NEG
42277: PUSH
42278: LD_INT 2
42280: NEG
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: LD_INT 1
42288: PUSH
42289: LD_INT 1
42291: NEG
42292: PUSH
42293: EMPTY
42294: LIST
42295: LIST
42296: PUSH
42297: LD_INT 2
42299: PUSH
42300: LD_INT 0
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: LD_INT 2
42309: PUSH
42310: LD_INT 1
42312: PUSH
42313: EMPTY
42314: LIST
42315: LIST
42316: PUSH
42317: LD_INT 2
42319: PUSH
42320: LD_INT 2
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: PUSH
42327: LD_INT 1
42329: PUSH
42330: LD_INT 2
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 1
42339: NEG
42340: PUSH
42341: LD_INT 1
42343: PUSH
42344: EMPTY
42345: LIST
42346: LIST
42347: PUSH
42348: LD_INT 2
42350: NEG
42351: PUSH
42352: LD_INT 0
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 2
42361: NEG
42362: PUSH
42363: LD_INT 1
42365: NEG
42366: PUSH
42367: EMPTY
42368: LIST
42369: LIST
42370: PUSH
42371: LD_INT 2
42373: NEG
42374: PUSH
42375: LD_INT 2
42377: NEG
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 2
42385: NEG
42386: PUSH
42387: LD_INT 3
42389: NEG
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_INT 2
42397: PUSH
42398: LD_INT 1
42400: NEG
42401: PUSH
42402: EMPTY
42403: LIST
42404: LIST
42405: PUSH
42406: LD_INT 3
42408: PUSH
42409: LD_INT 0
42411: PUSH
42412: EMPTY
42413: LIST
42414: LIST
42415: PUSH
42416: LD_INT 3
42418: PUSH
42419: LD_INT 1
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 3
42428: PUSH
42429: LD_INT 2
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 3
42438: PUSH
42439: LD_INT 3
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 2
42448: PUSH
42449: LD_INT 3
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 2
42458: NEG
42459: PUSH
42460: LD_INT 1
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 3
42469: NEG
42470: PUSH
42471: LD_INT 0
42473: PUSH
42474: EMPTY
42475: LIST
42476: LIST
42477: PUSH
42478: LD_INT 3
42480: NEG
42481: PUSH
42482: LD_INT 1
42484: NEG
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: PUSH
42490: LD_INT 3
42492: NEG
42493: PUSH
42494: LD_INT 2
42496: NEG
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 3
42504: NEG
42505: PUSH
42506: LD_INT 3
42508: NEG
42509: PUSH
42510: EMPTY
42511: LIST
42512: LIST
42513: PUSH
42514: EMPTY
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: LIST
42524: LIST
42525: LIST
42526: LIST
42527: LIST
42528: LIST
42529: LIST
42530: LIST
42531: LIST
42532: LIST
42533: LIST
42534: LIST
42535: LIST
42536: LIST
42537: LIST
42538: LIST
42539: LIST
42540: LIST
42541: LIST
42542: LIST
42543: LIST
42544: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42545: LD_ADDR_VAR 0 42
42549: PUSH
42550: LD_INT 0
42552: PUSH
42553: LD_INT 0
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 0
42562: PUSH
42563: LD_INT 1
42565: NEG
42566: PUSH
42567: EMPTY
42568: LIST
42569: LIST
42570: PUSH
42571: LD_INT 1
42573: PUSH
42574: LD_INT 0
42576: PUSH
42577: EMPTY
42578: LIST
42579: LIST
42580: PUSH
42581: LD_INT 1
42583: PUSH
42584: LD_INT 1
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 0
42593: PUSH
42594: LD_INT 1
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 1
42603: NEG
42604: PUSH
42605: LD_INT 0
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: PUSH
42612: LD_INT 1
42614: NEG
42615: PUSH
42616: LD_INT 1
42618: NEG
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 1
42626: NEG
42627: PUSH
42628: LD_INT 2
42630: NEG
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: PUSH
42636: LD_INT 0
42638: PUSH
42639: LD_INT 2
42641: NEG
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 1
42649: PUSH
42650: LD_INT 1
42652: NEG
42653: PUSH
42654: EMPTY
42655: LIST
42656: LIST
42657: PUSH
42658: LD_INT 2
42660: PUSH
42661: LD_INT 1
42663: PUSH
42664: EMPTY
42665: LIST
42666: LIST
42667: PUSH
42668: LD_INT 2
42670: PUSH
42671: LD_INT 2
42673: PUSH
42674: EMPTY
42675: LIST
42676: LIST
42677: PUSH
42678: LD_INT 1
42680: PUSH
42681: LD_INT 2
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PUSH
42688: LD_INT 0
42690: PUSH
42691: LD_INT 2
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 1
42700: NEG
42701: PUSH
42702: LD_INT 1
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: PUSH
42709: LD_INT 2
42711: NEG
42712: PUSH
42713: LD_INT 1
42715: NEG
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 2
42723: NEG
42724: PUSH
42725: LD_INT 2
42727: NEG
42728: PUSH
42729: EMPTY
42730: LIST
42731: LIST
42732: PUSH
42733: LD_INT 2
42735: NEG
42736: PUSH
42737: LD_INT 3
42739: NEG
42740: PUSH
42741: EMPTY
42742: LIST
42743: LIST
42744: PUSH
42745: LD_INT 1
42747: NEG
42748: PUSH
42749: LD_INT 3
42751: NEG
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 0
42759: PUSH
42760: LD_INT 3
42762: NEG
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 1
42770: PUSH
42771: LD_INT 2
42773: NEG
42774: PUSH
42775: EMPTY
42776: LIST
42777: LIST
42778: PUSH
42779: LD_INT 3
42781: PUSH
42782: LD_INT 2
42784: PUSH
42785: EMPTY
42786: LIST
42787: LIST
42788: PUSH
42789: LD_INT 3
42791: PUSH
42792: LD_INT 3
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 2
42801: PUSH
42802: LD_INT 3
42804: PUSH
42805: EMPTY
42806: LIST
42807: LIST
42808: PUSH
42809: LD_INT 1
42811: PUSH
42812: LD_INT 3
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: LD_INT 0
42821: PUSH
42822: LD_INT 3
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: LD_INT 1
42831: NEG
42832: PUSH
42833: LD_INT 2
42835: PUSH
42836: EMPTY
42837: LIST
42838: LIST
42839: PUSH
42840: LD_INT 3
42842: NEG
42843: PUSH
42844: LD_INT 2
42846: NEG
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: PUSH
42852: LD_INT 3
42854: NEG
42855: PUSH
42856: LD_INT 3
42858: NEG
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: LIST
42874: LIST
42875: LIST
42876: LIST
42877: LIST
42878: LIST
42879: LIST
42880: LIST
42881: LIST
42882: LIST
42883: LIST
42884: LIST
42885: LIST
42886: LIST
42887: LIST
42888: LIST
42889: LIST
42890: LIST
42891: LIST
42892: LIST
42893: LIST
42894: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42895: LD_ADDR_VAR 0 43
42899: PUSH
42900: LD_INT 0
42902: PUSH
42903: LD_INT 0
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: LD_INT 0
42912: PUSH
42913: LD_INT 1
42915: NEG
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: LD_INT 1
42923: PUSH
42924: LD_INT 0
42926: PUSH
42927: EMPTY
42928: LIST
42929: LIST
42930: PUSH
42931: LD_INT 1
42933: PUSH
42934: LD_INT 1
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 0
42943: PUSH
42944: LD_INT 1
42946: PUSH
42947: EMPTY
42948: LIST
42949: LIST
42950: PUSH
42951: LD_INT 1
42953: NEG
42954: PUSH
42955: LD_INT 0
42957: PUSH
42958: EMPTY
42959: LIST
42960: LIST
42961: PUSH
42962: LD_INT 1
42964: NEG
42965: PUSH
42966: LD_INT 1
42968: NEG
42969: PUSH
42970: EMPTY
42971: LIST
42972: LIST
42973: PUSH
42974: LD_INT 1
42976: NEG
42977: PUSH
42978: LD_INT 2
42980: NEG
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 0
42988: PUSH
42989: LD_INT 2
42991: NEG
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: PUSH
42997: LD_INT 1
42999: PUSH
43000: LD_INT 1
43002: NEG
43003: PUSH
43004: EMPTY
43005: LIST
43006: LIST
43007: PUSH
43008: LD_INT 2
43010: PUSH
43011: LD_INT 0
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 2
43020: PUSH
43021: LD_INT 1
43023: PUSH
43024: EMPTY
43025: LIST
43026: LIST
43027: PUSH
43028: LD_INT 1
43030: PUSH
43031: LD_INT 2
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: PUSH
43038: LD_INT 0
43040: PUSH
43041: LD_INT 2
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 1
43050: NEG
43051: PUSH
43052: LD_INT 1
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 2
43061: NEG
43062: PUSH
43063: LD_INT 0
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 2
43072: NEG
43073: PUSH
43074: LD_INT 1
43076: NEG
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 1
43084: NEG
43085: PUSH
43086: LD_INT 3
43088: NEG
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 0
43096: PUSH
43097: LD_INT 3
43099: NEG
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: LD_INT 1
43107: PUSH
43108: LD_INT 2
43110: NEG
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 2
43118: PUSH
43119: LD_INT 1
43121: NEG
43122: PUSH
43123: EMPTY
43124: LIST
43125: LIST
43126: PUSH
43127: LD_INT 3
43129: PUSH
43130: LD_INT 0
43132: PUSH
43133: EMPTY
43134: LIST
43135: LIST
43136: PUSH
43137: LD_INT 3
43139: PUSH
43140: LD_INT 1
43142: PUSH
43143: EMPTY
43144: LIST
43145: LIST
43146: PUSH
43147: LD_INT 1
43149: PUSH
43150: LD_INT 3
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: LD_INT 0
43159: PUSH
43160: LD_INT 3
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: LD_INT 1
43169: NEG
43170: PUSH
43171: LD_INT 2
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 2
43180: NEG
43181: PUSH
43182: LD_INT 1
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PUSH
43189: LD_INT 3
43191: NEG
43192: PUSH
43193: LD_INT 0
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 3
43202: NEG
43203: PUSH
43204: LD_INT 1
43206: NEG
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: LIST
43222: LIST
43223: LIST
43224: LIST
43225: LIST
43226: LIST
43227: LIST
43228: LIST
43229: LIST
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: LIST
43240: LIST
43241: LIST
43242: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43243: LD_ADDR_VAR 0 44
43247: PUSH
43248: LD_INT 0
43250: PUSH
43251: LD_INT 0
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 0
43260: PUSH
43261: LD_INT 1
43263: NEG
43264: PUSH
43265: EMPTY
43266: LIST
43267: LIST
43268: PUSH
43269: LD_INT 1
43271: PUSH
43272: LD_INT 0
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: LD_INT 1
43281: PUSH
43282: LD_INT 1
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 0
43291: PUSH
43292: LD_INT 1
43294: PUSH
43295: EMPTY
43296: LIST
43297: LIST
43298: PUSH
43299: LD_INT 1
43301: NEG
43302: PUSH
43303: LD_INT 0
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: PUSH
43310: LD_INT 1
43312: NEG
43313: PUSH
43314: LD_INT 1
43316: NEG
43317: PUSH
43318: EMPTY
43319: LIST
43320: LIST
43321: PUSH
43322: LD_INT 1
43324: NEG
43325: PUSH
43326: LD_INT 2
43328: NEG
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 1
43336: PUSH
43337: LD_INT 1
43339: NEG
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: PUSH
43345: LD_INT 2
43347: PUSH
43348: LD_INT 0
43350: PUSH
43351: EMPTY
43352: LIST
43353: LIST
43354: PUSH
43355: LD_INT 2
43357: PUSH
43358: LD_INT 1
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 2
43367: PUSH
43368: LD_INT 2
43370: PUSH
43371: EMPTY
43372: LIST
43373: LIST
43374: PUSH
43375: LD_INT 1
43377: PUSH
43378: LD_INT 2
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 1
43387: NEG
43388: PUSH
43389: LD_INT 1
43391: PUSH
43392: EMPTY
43393: LIST
43394: LIST
43395: PUSH
43396: LD_INT 2
43398: NEG
43399: PUSH
43400: LD_INT 0
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 2
43409: NEG
43410: PUSH
43411: LD_INT 1
43413: NEG
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: LD_INT 2
43421: NEG
43422: PUSH
43423: LD_INT 2
43425: NEG
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 2
43433: NEG
43434: PUSH
43435: LD_INT 3
43437: NEG
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 2
43445: PUSH
43446: LD_INT 1
43448: NEG
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 3
43456: PUSH
43457: LD_INT 0
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 3
43466: PUSH
43467: LD_INT 1
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 3
43476: PUSH
43477: LD_INT 2
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 3
43486: PUSH
43487: LD_INT 3
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 2
43496: PUSH
43497: LD_INT 3
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 2
43506: NEG
43507: PUSH
43508: LD_INT 1
43510: PUSH
43511: EMPTY
43512: LIST
43513: LIST
43514: PUSH
43515: LD_INT 3
43517: NEG
43518: PUSH
43519: LD_INT 0
43521: PUSH
43522: EMPTY
43523: LIST
43524: LIST
43525: PUSH
43526: LD_INT 3
43528: NEG
43529: PUSH
43530: LD_INT 1
43532: NEG
43533: PUSH
43534: EMPTY
43535: LIST
43536: LIST
43537: PUSH
43538: LD_INT 3
43540: NEG
43541: PUSH
43542: LD_INT 2
43544: NEG
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 3
43552: NEG
43553: PUSH
43554: LD_INT 3
43556: NEG
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: LIST
43571: LIST
43572: LIST
43573: LIST
43574: LIST
43575: LIST
43576: LIST
43577: LIST
43578: LIST
43579: LIST
43580: LIST
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: LIST
43589: LIST
43590: LIST
43591: LIST
43592: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43593: LD_ADDR_VAR 0 45
43597: PUSH
43598: LD_INT 0
43600: PUSH
43601: LD_INT 0
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: LD_INT 0
43610: PUSH
43611: LD_INT 1
43613: NEG
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 1
43621: PUSH
43622: LD_INT 0
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 1
43631: PUSH
43632: LD_INT 1
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 0
43641: PUSH
43642: LD_INT 1
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 1
43651: NEG
43652: PUSH
43653: LD_INT 0
43655: PUSH
43656: EMPTY
43657: LIST
43658: LIST
43659: PUSH
43660: LD_INT 1
43662: NEG
43663: PUSH
43664: LD_INT 1
43666: NEG
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: LD_INT 1
43674: NEG
43675: PUSH
43676: LD_INT 2
43678: NEG
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PUSH
43684: LD_INT 0
43686: PUSH
43687: LD_INT 2
43689: NEG
43690: PUSH
43691: EMPTY
43692: LIST
43693: LIST
43694: PUSH
43695: LD_INT 1
43697: PUSH
43698: LD_INT 1
43700: NEG
43701: PUSH
43702: EMPTY
43703: LIST
43704: LIST
43705: PUSH
43706: LD_INT 2
43708: PUSH
43709: LD_INT 1
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: LD_INT 2
43718: PUSH
43719: LD_INT 2
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 1
43728: PUSH
43729: LD_INT 2
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: LD_INT 0
43738: PUSH
43739: LD_INT 2
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: LD_INT 1
43748: NEG
43749: PUSH
43750: LD_INT 1
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: LD_INT 2
43759: NEG
43760: PUSH
43761: LD_INT 1
43763: NEG
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: LD_INT 2
43771: NEG
43772: PUSH
43773: LD_INT 2
43775: NEG
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: LD_INT 2
43783: NEG
43784: PUSH
43785: LD_INT 3
43787: NEG
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: LD_INT 1
43795: NEG
43796: PUSH
43797: LD_INT 3
43799: NEG
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 0
43807: PUSH
43808: LD_INT 3
43810: NEG
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PUSH
43816: LD_INT 1
43818: PUSH
43819: LD_INT 2
43821: NEG
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: LD_INT 3
43829: PUSH
43830: LD_INT 2
43832: PUSH
43833: EMPTY
43834: LIST
43835: LIST
43836: PUSH
43837: LD_INT 3
43839: PUSH
43840: LD_INT 3
43842: PUSH
43843: EMPTY
43844: LIST
43845: LIST
43846: PUSH
43847: LD_INT 2
43849: PUSH
43850: LD_INT 3
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: PUSH
43857: LD_INT 1
43859: PUSH
43860: LD_INT 3
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: LD_INT 0
43869: PUSH
43870: LD_INT 3
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: PUSH
43877: LD_INT 1
43879: NEG
43880: PUSH
43881: LD_INT 2
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 3
43890: NEG
43891: PUSH
43892: LD_INT 2
43894: NEG
43895: PUSH
43896: EMPTY
43897: LIST
43898: LIST
43899: PUSH
43900: LD_INT 3
43902: NEG
43903: PUSH
43904: LD_INT 3
43906: NEG
43907: PUSH
43908: EMPTY
43909: LIST
43910: LIST
43911: PUSH
43912: EMPTY
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: LIST
43921: LIST
43922: LIST
43923: LIST
43924: LIST
43925: LIST
43926: LIST
43927: LIST
43928: LIST
43929: LIST
43930: LIST
43931: LIST
43932: LIST
43933: LIST
43934: LIST
43935: LIST
43936: LIST
43937: LIST
43938: LIST
43939: LIST
43940: LIST
43941: LIST
43942: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43943: LD_ADDR_VAR 0 46
43947: PUSH
43948: LD_INT 0
43950: PUSH
43951: LD_INT 0
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: LD_INT 0
43960: PUSH
43961: LD_INT 1
43963: NEG
43964: PUSH
43965: EMPTY
43966: LIST
43967: LIST
43968: PUSH
43969: LD_INT 1
43971: PUSH
43972: LD_INT 0
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 1
43981: PUSH
43982: LD_INT 1
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: LD_INT 0
43991: PUSH
43992: LD_INT 1
43994: PUSH
43995: EMPTY
43996: LIST
43997: LIST
43998: PUSH
43999: LD_INT 1
44001: NEG
44002: PUSH
44003: LD_INT 0
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 1
44012: NEG
44013: PUSH
44014: LD_INT 1
44016: NEG
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PUSH
44022: LD_INT 1
44024: NEG
44025: PUSH
44026: LD_INT 2
44028: NEG
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: LD_INT 0
44036: PUSH
44037: LD_INT 2
44039: NEG
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PUSH
44045: LD_INT 1
44047: PUSH
44048: LD_INT 1
44050: NEG
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 2
44058: PUSH
44059: LD_INT 0
44061: PUSH
44062: EMPTY
44063: LIST
44064: LIST
44065: PUSH
44066: LD_INT 2
44068: PUSH
44069: LD_INT 1
44071: PUSH
44072: EMPTY
44073: LIST
44074: LIST
44075: PUSH
44076: LD_INT 1
44078: PUSH
44079: LD_INT 2
44081: PUSH
44082: EMPTY
44083: LIST
44084: LIST
44085: PUSH
44086: LD_INT 0
44088: PUSH
44089: LD_INT 2
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 1
44098: NEG
44099: PUSH
44100: LD_INT 1
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: LD_INT 2
44109: NEG
44110: PUSH
44111: LD_INT 0
44113: PUSH
44114: EMPTY
44115: LIST
44116: LIST
44117: PUSH
44118: LD_INT 2
44120: NEG
44121: PUSH
44122: LD_INT 1
44124: NEG
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 1
44132: NEG
44133: PUSH
44134: LD_INT 3
44136: NEG
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: PUSH
44142: LD_INT 0
44144: PUSH
44145: LD_INT 3
44147: NEG
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 1
44155: PUSH
44156: LD_INT 2
44158: NEG
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 2
44166: PUSH
44167: LD_INT 1
44169: NEG
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: PUSH
44175: LD_INT 3
44177: PUSH
44178: LD_INT 0
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 3
44187: PUSH
44188: LD_INT 1
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 1
44197: PUSH
44198: LD_INT 3
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 0
44207: PUSH
44208: LD_INT 3
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 1
44217: NEG
44218: PUSH
44219: LD_INT 2
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 2
44228: NEG
44229: PUSH
44230: LD_INT 1
44232: PUSH
44233: EMPTY
44234: LIST
44235: LIST
44236: PUSH
44237: LD_INT 3
44239: NEG
44240: PUSH
44241: LD_INT 0
44243: PUSH
44244: EMPTY
44245: LIST
44246: LIST
44247: PUSH
44248: LD_INT 3
44250: NEG
44251: PUSH
44252: LD_INT 1
44254: NEG
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: EMPTY
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: LIST
44269: LIST
44270: LIST
44271: LIST
44272: LIST
44273: LIST
44274: LIST
44275: LIST
44276: LIST
44277: LIST
44278: LIST
44279: LIST
44280: LIST
44281: LIST
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44291: LD_ADDR_VAR 0 47
44295: PUSH
44296: LD_INT 0
44298: PUSH
44299: LD_INT 0
44301: PUSH
44302: EMPTY
44303: LIST
44304: LIST
44305: PUSH
44306: LD_INT 0
44308: PUSH
44309: LD_INT 1
44311: NEG
44312: PUSH
44313: EMPTY
44314: LIST
44315: LIST
44316: PUSH
44317: LD_INT 1
44319: PUSH
44320: LD_INT 0
44322: PUSH
44323: EMPTY
44324: LIST
44325: LIST
44326: PUSH
44327: LD_INT 1
44329: PUSH
44330: LD_INT 1
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 0
44339: PUSH
44340: LD_INT 1
44342: PUSH
44343: EMPTY
44344: LIST
44345: LIST
44346: PUSH
44347: LD_INT 1
44349: NEG
44350: PUSH
44351: LD_INT 0
44353: PUSH
44354: EMPTY
44355: LIST
44356: LIST
44357: PUSH
44358: LD_INT 1
44360: NEG
44361: PUSH
44362: LD_INT 1
44364: NEG
44365: PUSH
44366: EMPTY
44367: LIST
44368: LIST
44369: PUSH
44370: LD_INT 1
44372: NEG
44373: PUSH
44374: LD_INT 2
44376: NEG
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 0
44384: PUSH
44385: LD_INT 2
44387: NEG
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 1
44395: PUSH
44396: LD_INT 1
44398: NEG
44399: PUSH
44400: EMPTY
44401: LIST
44402: LIST
44403: PUSH
44404: LD_INT 2
44406: NEG
44407: PUSH
44408: LD_INT 1
44410: NEG
44411: PUSH
44412: EMPTY
44413: LIST
44414: LIST
44415: PUSH
44416: LD_INT 2
44418: NEG
44419: PUSH
44420: LD_INT 2
44422: NEG
44423: PUSH
44424: EMPTY
44425: LIST
44426: LIST
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44442: LD_ADDR_VAR 0 48
44446: PUSH
44447: LD_INT 0
44449: PUSH
44450: LD_INT 0
44452: PUSH
44453: EMPTY
44454: LIST
44455: LIST
44456: PUSH
44457: LD_INT 0
44459: PUSH
44460: LD_INT 1
44462: NEG
44463: PUSH
44464: EMPTY
44465: LIST
44466: LIST
44467: PUSH
44468: LD_INT 1
44470: PUSH
44471: LD_INT 0
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_INT 1
44480: PUSH
44481: LD_INT 1
44483: PUSH
44484: EMPTY
44485: LIST
44486: LIST
44487: PUSH
44488: LD_INT 0
44490: PUSH
44491: LD_INT 1
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 1
44500: NEG
44501: PUSH
44502: LD_INT 0
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: LD_INT 1
44511: NEG
44512: PUSH
44513: LD_INT 1
44515: NEG
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 1
44523: NEG
44524: PUSH
44525: LD_INT 2
44527: NEG
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 0
44535: PUSH
44536: LD_INT 2
44538: NEG
44539: PUSH
44540: EMPTY
44541: LIST
44542: LIST
44543: PUSH
44544: LD_INT 1
44546: PUSH
44547: LD_INT 1
44549: NEG
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 2
44557: PUSH
44558: LD_INT 0
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 2
44567: PUSH
44568: LD_INT 1
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: EMPTY
44576: LIST
44577: LIST
44578: LIST
44579: LIST
44580: LIST
44581: LIST
44582: LIST
44583: LIST
44584: LIST
44585: LIST
44586: LIST
44587: LIST
44588: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44589: LD_ADDR_VAR 0 49
44593: PUSH
44594: LD_INT 0
44596: PUSH
44597: LD_INT 0
44599: PUSH
44600: EMPTY
44601: LIST
44602: LIST
44603: PUSH
44604: LD_INT 0
44606: PUSH
44607: LD_INT 1
44609: NEG
44610: PUSH
44611: EMPTY
44612: LIST
44613: LIST
44614: PUSH
44615: LD_INT 1
44617: PUSH
44618: LD_INT 0
44620: PUSH
44621: EMPTY
44622: LIST
44623: LIST
44624: PUSH
44625: LD_INT 1
44627: PUSH
44628: LD_INT 1
44630: PUSH
44631: EMPTY
44632: LIST
44633: LIST
44634: PUSH
44635: LD_INT 0
44637: PUSH
44638: LD_INT 1
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 1
44647: NEG
44648: PUSH
44649: LD_INT 0
44651: PUSH
44652: EMPTY
44653: LIST
44654: LIST
44655: PUSH
44656: LD_INT 1
44658: NEG
44659: PUSH
44660: LD_INT 1
44662: NEG
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 1
44670: PUSH
44671: LD_INT 1
44673: NEG
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 2
44681: PUSH
44682: LD_INT 0
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 2
44691: PUSH
44692: LD_INT 1
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 2
44701: PUSH
44702: LD_INT 2
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: LD_INT 1
44711: PUSH
44712: LD_INT 2
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44733: LD_ADDR_VAR 0 50
44737: PUSH
44738: LD_INT 0
44740: PUSH
44741: LD_INT 0
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 0
44750: PUSH
44751: LD_INT 1
44753: NEG
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 1
44761: PUSH
44762: LD_INT 0
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: PUSH
44769: LD_INT 1
44771: PUSH
44772: LD_INT 1
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: PUSH
44779: LD_INT 0
44781: PUSH
44782: LD_INT 1
44784: PUSH
44785: EMPTY
44786: LIST
44787: LIST
44788: PUSH
44789: LD_INT 1
44791: NEG
44792: PUSH
44793: LD_INT 0
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 1
44802: NEG
44803: PUSH
44804: LD_INT 1
44806: NEG
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 2
44814: PUSH
44815: LD_INT 1
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 2
44824: PUSH
44825: LD_INT 2
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 1
44834: PUSH
44835: LD_INT 2
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 0
44844: PUSH
44845: LD_INT 2
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 1
44854: NEG
44855: PUSH
44856: LD_INT 1
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: LIST
44875: LIST
44876: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44877: LD_ADDR_VAR 0 51
44881: PUSH
44882: LD_INT 0
44884: PUSH
44885: LD_INT 0
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 0
44894: PUSH
44895: LD_INT 1
44897: NEG
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 1
44905: PUSH
44906: LD_INT 0
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 1
44915: PUSH
44916: LD_INT 1
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 0
44925: PUSH
44926: LD_INT 1
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 1
44935: NEG
44936: PUSH
44937: LD_INT 0
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 1
44946: NEG
44947: PUSH
44948: LD_INT 1
44950: NEG
44951: PUSH
44952: EMPTY
44953: LIST
44954: LIST
44955: PUSH
44956: LD_INT 1
44958: PUSH
44959: LD_INT 2
44961: PUSH
44962: EMPTY
44963: LIST
44964: LIST
44965: PUSH
44966: LD_INT 0
44968: PUSH
44969: LD_INT 2
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 1
44978: NEG
44979: PUSH
44980: LD_INT 1
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: PUSH
44987: LD_INT 2
44989: NEG
44990: PUSH
44991: LD_INT 0
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 2
45000: NEG
45001: PUSH
45002: LD_INT 1
45004: NEG
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45024: LD_ADDR_VAR 0 52
45028: PUSH
45029: LD_INT 0
45031: PUSH
45032: LD_INT 0
45034: PUSH
45035: EMPTY
45036: LIST
45037: LIST
45038: PUSH
45039: LD_INT 0
45041: PUSH
45042: LD_INT 1
45044: NEG
45045: PUSH
45046: EMPTY
45047: LIST
45048: LIST
45049: PUSH
45050: LD_INT 1
45052: PUSH
45053: LD_INT 0
45055: PUSH
45056: EMPTY
45057: LIST
45058: LIST
45059: PUSH
45060: LD_INT 1
45062: PUSH
45063: LD_INT 1
45065: PUSH
45066: EMPTY
45067: LIST
45068: LIST
45069: PUSH
45070: LD_INT 0
45072: PUSH
45073: LD_INT 1
45075: PUSH
45076: EMPTY
45077: LIST
45078: LIST
45079: PUSH
45080: LD_INT 1
45082: NEG
45083: PUSH
45084: LD_INT 0
45086: PUSH
45087: EMPTY
45088: LIST
45089: LIST
45090: PUSH
45091: LD_INT 1
45093: NEG
45094: PUSH
45095: LD_INT 1
45097: NEG
45098: PUSH
45099: EMPTY
45100: LIST
45101: LIST
45102: PUSH
45103: LD_INT 1
45105: NEG
45106: PUSH
45107: LD_INT 2
45109: NEG
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 1
45117: NEG
45118: PUSH
45119: LD_INT 1
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 2
45128: NEG
45129: PUSH
45130: LD_INT 0
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: LD_INT 2
45139: NEG
45140: PUSH
45141: LD_INT 1
45143: NEG
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 2
45151: NEG
45152: PUSH
45153: LD_INT 2
45155: NEG
45156: PUSH
45157: EMPTY
45158: LIST
45159: LIST
45160: PUSH
45161: EMPTY
45162: LIST
45163: LIST
45164: LIST
45165: LIST
45166: LIST
45167: LIST
45168: LIST
45169: LIST
45170: LIST
45171: LIST
45172: LIST
45173: LIST
45174: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45175: LD_ADDR_VAR 0 53
45179: PUSH
45180: LD_INT 0
45182: PUSH
45183: LD_INT 0
45185: PUSH
45186: EMPTY
45187: LIST
45188: LIST
45189: PUSH
45190: LD_INT 0
45192: PUSH
45193: LD_INT 1
45195: NEG
45196: PUSH
45197: EMPTY
45198: LIST
45199: LIST
45200: PUSH
45201: LD_INT 1
45203: PUSH
45204: LD_INT 0
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 1
45213: PUSH
45214: LD_INT 1
45216: PUSH
45217: EMPTY
45218: LIST
45219: LIST
45220: PUSH
45221: LD_INT 0
45223: PUSH
45224: LD_INT 1
45226: PUSH
45227: EMPTY
45228: LIST
45229: LIST
45230: PUSH
45231: LD_INT 1
45233: NEG
45234: PUSH
45235: LD_INT 0
45237: PUSH
45238: EMPTY
45239: LIST
45240: LIST
45241: PUSH
45242: LD_INT 1
45244: NEG
45245: PUSH
45246: LD_INT 1
45248: NEG
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 1
45256: NEG
45257: PUSH
45258: LD_INT 2
45260: NEG
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 0
45268: PUSH
45269: LD_INT 2
45271: NEG
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 1
45279: PUSH
45280: LD_INT 1
45282: NEG
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 2
45290: PUSH
45291: LD_INT 0
45293: PUSH
45294: EMPTY
45295: LIST
45296: LIST
45297: PUSH
45298: LD_INT 2
45300: PUSH
45301: LD_INT 1
45303: PUSH
45304: EMPTY
45305: LIST
45306: LIST
45307: PUSH
45308: LD_INT 2
45310: PUSH
45311: LD_INT 2
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 1
45320: PUSH
45321: LD_INT 2
45323: PUSH
45324: EMPTY
45325: LIST
45326: LIST
45327: PUSH
45328: LD_INT 0
45330: PUSH
45331: LD_INT 2
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: LD_INT 1
45340: NEG
45341: PUSH
45342: LD_INT 1
45344: PUSH
45345: EMPTY
45346: LIST
45347: LIST
45348: PUSH
45349: LD_INT 2
45351: NEG
45352: PUSH
45353: LD_INT 0
45355: PUSH
45356: EMPTY
45357: LIST
45358: LIST
45359: PUSH
45360: LD_INT 2
45362: NEG
45363: PUSH
45364: LD_INT 1
45366: NEG
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 2
45374: NEG
45375: PUSH
45376: LD_INT 2
45378: NEG
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: EMPTY
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45405: LD_ADDR_VAR 0 54
45409: PUSH
45410: LD_INT 0
45412: PUSH
45413: LD_INT 0
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 0
45422: PUSH
45423: LD_INT 1
45425: NEG
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 1
45433: PUSH
45434: LD_INT 0
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 1
45443: PUSH
45444: LD_INT 1
45446: PUSH
45447: EMPTY
45448: LIST
45449: LIST
45450: PUSH
45451: LD_INT 0
45453: PUSH
45454: LD_INT 1
45456: PUSH
45457: EMPTY
45458: LIST
45459: LIST
45460: PUSH
45461: LD_INT 1
45463: NEG
45464: PUSH
45465: LD_INT 0
45467: PUSH
45468: EMPTY
45469: LIST
45470: LIST
45471: PUSH
45472: LD_INT 1
45474: NEG
45475: PUSH
45476: LD_INT 1
45478: NEG
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 1
45486: NEG
45487: PUSH
45488: LD_INT 2
45490: NEG
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 0
45498: PUSH
45499: LD_INT 2
45501: NEG
45502: PUSH
45503: EMPTY
45504: LIST
45505: LIST
45506: PUSH
45507: LD_INT 1
45509: PUSH
45510: LD_INT 1
45512: NEG
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 2
45520: PUSH
45521: LD_INT 0
45523: PUSH
45524: EMPTY
45525: LIST
45526: LIST
45527: PUSH
45528: LD_INT 2
45530: PUSH
45531: LD_INT 1
45533: PUSH
45534: EMPTY
45535: LIST
45536: LIST
45537: PUSH
45538: LD_INT 2
45540: PUSH
45541: LD_INT 2
45543: PUSH
45544: EMPTY
45545: LIST
45546: LIST
45547: PUSH
45548: LD_INT 1
45550: PUSH
45551: LD_INT 2
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: LD_INT 0
45560: PUSH
45561: LD_INT 2
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: LD_INT 1
45570: NEG
45571: PUSH
45572: LD_INT 1
45574: PUSH
45575: EMPTY
45576: LIST
45577: LIST
45578: PUSH
45579: LD_INT 2
45581: NEG
45582: PUSH
45583: LD_INT 0
45585: PUSH
45586: EMPTY
45587: LIST
45588: LIST
45589: PUSH
45590: LD_INT 2
45592: NEG
45593: PUSH
45594: LD_INT 1
45596: NEG
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 2
45604: NEG
45605: PUSH
45606: LD_INT 2
45608: NEG
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: LIST
45618: LIST
45619: LIST
45620: LIST
45621: LIST
45622: LIST
45623: LIST
45624: LIST
45625: LIST
45626: LIST
45627: LIST
45628: LIST
45629: LIST
45630: LIST
45631: LIST
45632: LIST
45633: LIST
45634: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45635: LD_ADDR_VAR 0 55
45639: PUSH
45640: LD_INT 0
45642: PUSH
45643: LD_INT 0
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 0
45652: PUSH
45653: LD_INT 1
45655: NEG
45656: PUSH
45657: EMPTY
45658: LIST
45659: LIST
45660: PUSH
45661: LD_INT 1
45663: PUSH
45664: LD_INT 0
45666: PUSH
45667: EMPTY
45668: LIST
45669: LIST
45670: PUSH
45671: LD_INT 1
45673: PUSH
45674: LD_INT 1
45676: PUSH
45677: EMPTY
45678: LIST
45679: LIST
45680: PUSH
45681: LD_INT 0
45683: PUSH
45684: LD_INT 1
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 1
45693: NEG
45694: PUSH
45695: LD_INT 0
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 1
45704: NEG
45705: PUSH
45706: LD_INT 1
45708: NEG
45709: PUSH
45710: EMPTY
45711: LIST
45712: LIST
45713: PUSH
45714: LD_INT 1
45716: NEG
45717: PUSH
45718: LD_INT 2
45720: NEG
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 0
45728: PUSH
45729: LD_INT 2
45731: NEG
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 1
45739: PUSH
45740: LD_INT 1
45742: NEG
45743: PUSH
45744: EMPTY
45745: LIST
45746: LIST
45747: PUSH
45748: LD_INT 2
45750: PUSH
45751: LD_INT 0
45753: PUSH
45754: EMPTY
45755: LIST
45756: LIST
45757: PUSH
45758: LD_INT 2
45760: PUSH
45761: LD_INT 1
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 2
45770: PUSH
45771: LD_INT 2
45773: PUSH
45774: EMPTY
45775: LIST
45776: LIST
45777: PUSH
45778: LD_INT 1
45780: PUSH
45781: LD_INT 2
45783: PUSH
45784: EMPTY
45785: LIST
45786: LIST
45787: PUSH
45788: LD_INT 0
45790: PUSH
45791: LD_INT 2
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 1
45800: NEG
45801: PUSH
45802: LD_INT 1
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 2
45811: NEG
45812: PUSH
45813: LD_INT 0
45815: PUSH
45816: EMPTY
45817: LIST
45818: LIST
45819: PUSH
45820: LD_INT 2
45822: NEG
45823: PUSH
45824: LD_INT 1
45826: NEG
45827: PUSH
45828: EMPTY
45829: LIST
45830: LIST
45831: PUSH
45832: LD_INT 2
45834: NEG
45835: PUSH
45836: LD_INT 2
45838: NEG
45839: PUSH
45840: EMPTY
45841: LIST
45842: LIST
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: LIST
45848: LIST
45849: LIST
45850: LIST
45851: LIST
45852: LIST
45853: LIST
45854: LIST
45855: LIST
45856: LIST
45857: LIST
45858: LIST
45859: LIST
45860: LIST
45861: LIST
45862: LIST
45863: LIST
45864: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45865: LD_ADDR_VAR 0 56
45869: PUSH
45870: LD_INT 0
45872: PUSH
45873: LD_INT 0
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: PUSH
45880: LD_INT 0
45882: PUSH
45883: LD_INT 1
45885: NEG
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 1
45893: PUSH
45894: LD_INT 0
45896: PUSH
45897: EMPTY
45898: LIST
45899: LIST
45900: PUSH
45901: LD_INT 1
45903: PUSH
45904: LD_INT 1
45906: PUSH
45907: EMPTY
45908: LIST
45909: LIST
45910: PUSH
45911: LD_INT 0
45913: PUSH
45914: LD_INT 1
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: PUSH
45921: LD_INT 1
45923: NEG
45924: PUSH
45925: LD_INT 0
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 1
45934: NEG
45935: PUSH
45936: LD_INT 1
45938: NEG
45939: PUSH
45940: EMPTY
45941: LIST
45942: LIST
45943: PUSH
45944: LD_INT 1
45946: NEG
45947: PUSH
45948: LD_INT 2
45950: NEG
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 0
45958: PUSH
45959: LD_INT 2
45961: NEG
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 1
45969: PUSH
45970: LD_INT 1
45972: NEG
45973: PUSH
45974: EMPTY
45975: LIST
45976: LIST
45977: PUSH
45978: LD_INT 2
45980: PUSH
45981: LD_INT 0
45983: PUSH
45984: EMPTY
45985: LIST
45986: LIST
45987: PUSH
45988: LD_INT 2
45990: PUSH
45991: LD_INT 1
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 2
46000: PUSH
46001: LD_INT 2
46003: PUSH
46004: EMPTY
46005: LIST
46006: LIST
46007: PUSH
46008: LD_INT 1
46010: PUSH
46011: LD_INT 2
46013: PUSH
46014: EMPTY
46015: LIST
46016: LIST
46017: PUSH
46018: LD_INT 0
46020: PUSH
46021: LD_INT 2
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 1
46030: NEG
46031: PUSH
46032: LD_INT 1
46034: PUSH
46035: EMPTY
46036: LIST
46037: LIST
46038: PUSH
46039: LD_INT 2
46041: NEG
46042: PUSH
46043: LD_INT 0
46045: PUSH
46046: EMPTY
46047: LIST
46048: LIST
46049: PUSH
46050: LD_INT 2
46052: NEG
46053: PUSH
46054: LD_INT 1
46056: NEG
46057: PUSH
46058: EMPTY
46059: LIST
46060: LIST
46061: PUSH
46062: LD_INT 2
46064: NEG
46065: PUSH
46066: LD_INT 2
46068: NEG
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: EMPTY
46075: LIST
46076: LIST
46077: LIST
46078: LIST
46079: LIST
46080: LIST
46081: LIST
46082: LIST
46083: LIST
46084: LIST
46085: LIST
46086: LIST
46087: LIST
46088: LIST
46089: LIST
46090: LIST
46091: LIST
46092: LIST
46093: LIST
46094: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46095: LD_ADDR_VAR 0 57
46099: PUSH
46100: LD_INT 0
46102: PUSH
46103: LD_INT 0
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 0
46112: PUSH
46113: LD_INT 1
46115: NEG
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 1
46123: PUSH
46124: LD_INT 0
46126: PUSH
46127: EMPTY
46128: LIST
46129: LIST
46130: PUSH
46131: LD_INT 1
46133: PUSH
46134: LD_INT 1
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 0
46143: PUSH
46144: LD_INT 1
46146: PUSH
46147: EMPTY
46148: LIST
46149: LIST
46150: PUSH
46151: LD_INT 1
46153: NEG
46154: PUSH
46155: LD_INT 0
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 1
46164: NEG
46165: PUSH
46166: LD_INT 1
46168: NEG
46169: PUSH
46170: EMPTY
46171: LIST
46172: LIST
46173: PUSH
46174: LD_INT 1
46176: NEG
46177: PUSH
46178: LD_INT 2
46180: NEG
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 0
46188: PUSH
46189: LD_INT 2
46191: NEG
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 1
46199: PUSH
46200: LD_INT 1
46202: NEG
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 2
46210: PUSH
46211: LD_INT 0
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 2
46220: PUSH
46221: LD_INT 1
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 2
46230: PUSH
46231: LD_INT 2
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 1
46240: PUSH
46241: LD_INT 2
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 0
46250: PUSH
46251: LD_INT 2
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 1
46260: NEG
46261: PUSH
46262: LD_INT 1
46264: PUSH
46265: EMPTY
46266: LIST
46267: LIST
46268: PUSH
46269: LD_INT 2
46271: NEG
46272: PUSH
46273: LD_INT 0
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 2
46282: NEG
46283: PUSH
46284: LD_INT 1
46286: NEG
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 2
46294: NEG
46295: PUSH
46296: LD_INT 2
46298: NEG
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: LIST
46308: LIST
46309: LIST
46310: LIST
46311: LIST
46312: LIST
46313: LIST
46314: LIST
46315: LIST
46316: LIST
46317: LIST
46318: LIST
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46325: LD_ADDR_VAR 0 58
46329: PUSH
46330: LD_INT 0
46332: PUSH
46333: LD_INT 0
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 0
46342: PUSH
46343: LD_INT 1
46345: NEG
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 1
46353: PUSH
46354: LD_INT 0
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: LD_INT 1
46363: PUSH
46364: LD_INT 1
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 0
46373: PUSH
46374: LD_INT 1
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 1
46383: NEG
46384: PUSH
46385: LD_INT 0
46387: PUSH
46388: EMPTY
46389: LIST
46390: LIST
46391: PUSH
46392: LD_INT 1
46394: NEG
46395: PUSH
46396: LD_INT 1
46398: NEG
46399: PUSH
46400: EMPTY
46401: LIST
46402: LIST
46403: PUSH
46404: LD_INT 1
46406: NEG
46407: PUSH
46408: LD_INT 2
46410: NEG
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 0
46418: PUSH
46419: LD_INT 2
46421: NEG
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 1
46429: PUSH
46430: LD_INT 1
46432: NEG
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 2
46440: PUSH
46441: LD_INT 0
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 2
46450: PUSH
46451: LD_INT 1
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 2
46460: PUSH
46461: LD_INT 2
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 1
46470: PUSH
46471: LD_INT 2
46473: PUSH
46474: EMPTY
46475: LIST
46476: LIST
46477: PUSH
46478: LD_INT 0
46480: PUSH
46481: LD_INT 2
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 1
46490: NEG
46491: PUSH
46492: LD_INT 1
46494: PUSH
46495: EMPTY
46496: LIST
46497: LIST
46498: PUSH
46499: LD_INT 2
46501: NEG
46502: PUSH
46503: LD_INT 0
46505: PUSH
46506: EMPTY
46507: LIST
46508: LIST
46509: PUSH
46510: LD_INT 2
46512: NEG
46513: PUSH
46514: LD_INT 1
46516: NEG
46517: PUSH
46518: EMPTY
46519: LIST
46520: LIST
46521: PUSH
46522: LD_INT 2
46524: NEG
46525: PUSH
46526: LD_INT 2
46528: NEG
46529: PUSH
46530: EMPTY
46531: LIST
46532: LIST
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46555: LD_ADDR_VAR 0 59
46559: PUSH
46560: LD_INT 0
46562: PUSH
46563: LD_INT 0
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 0
46572: PUSH
46573: LD_INT 1
46575: NEG
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 1
46583: PUSH
46584: LD_INT 0
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 1
46593: PUSH
46594: LD_INT 1
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 0
46603: PUSH
46604: LD_INT 1
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 1
46613: NEG
46614: PUSH
46615: LD_INT 0
46617: PUSH
46618: EMPTY
46619: LIST
46620: LIST
46621: PUSH
46622: LD_INT 1
46624: NEG
46625: PUSH
46626: LD_INT 1
46628: NEG
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: LIST
46638: LIST
46639: LIST
46640: LIST
46641: LIST
46642: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46643: LD_ADDR_VAR 0 60
46647: PUSH
46648: LD_INT 0
46650: PUSH
46651: LD_INT 0
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 0
46660: PUSH
46661: LD_INT 1
46663: NEG
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 1
46671: PUSH
46672: LD_INT 0
46674: PUSH
46675: EMPTY
46676: LIST
46677: LIST
46678: PUSH
46679: LD_INT 1
46681: PUSH
46682: LD_INT 1
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 0
46691: PUSH
46692: LD_INT 1
46694: PUSH
46695: EMPTY
46696: LIST
46697: LIST
46698: PUSH
46699: LD_INT 1
46701: NEG
46702: PUSH
46703: LD_INT 0
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 1
46712: NEG
46713: PUSH
46714: LD_INT 1
46716: NEG
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: LIST
46726: LIST
46727: LIST
46728: LIST
46729: LIST
46730: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46731: LD_ADDR_VAR 0 61
46735: PUSH
46736: LD_INT 0
46738: PUSH
46739: LD_INT 0
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 0
46748: PUSH
46749: LD_INT 1
46751: NEG
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 1
46759: PUSH
46760: LD_INT 0
46762: PUSH
46763: EMPTY
46764: LIST
46765: LIST
46766: PUSH
46767: LD_INT 1
46769: PUSH
46770: LD_INT 1
46772: PUSH
46773: EMPTY
46774: LIST
46775: LIST
46776: PUSH
46777: LD_INT 0
46779: PUSH
46780: LD_INT 1
46782: PUSH
46783: EMPTY
46784: LIST
46785: LIST
46786: PUSH
46787: LD_INT 1
46789: NEG
46790: PUSH
46791: LD_INT 0
46793: PUSH
46794: EMPTY
46795: LIST
46796: LIST
46797: PUSH
46798: LD_INT 1
46800: NEG
46801: PUSH
46802: LD_INT 1
46804: NEG
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: EMPTY
46811: LIST
46812: LIST
46813: LIST
46814: LIST
46815: LIST
46816: LIST
46817: LIST
46818: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46819: LD_ADDR_VAR 0 62
46823: PUSH
46824: LD_INT 0
46826: PUSH
46827: LD_INT 0
46829: PUSH
46830: EMPTY
46831: LIST
46832: LIST
46833: PUSH
46834: LD_INT 0
46836: PUSH
46837: LD_INT 1
46839: NEG
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: LD_INT 1
46847: PUSH
46848: LD_INT 0
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 1
46857: PUSH
46858: LD_INT 1
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 0
46867: PUSH
46868: LD_INT 1
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 1
46877: NEG
46878: PUSH
46879: LD_INT 0
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 1
46888: NEG
46889: PUSH
46890: LD_INT 1
46892: NEG
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: EMPTY
46899: LIST
46900: LIST
46901: LIST
46902: LIST
46903: LIST
46904: LIST
46905: LIST
46906: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46907: LD_ADDR_VAR 0 63
46911: PUSH
46912: LD_INT 0
46914: PUSH
46915: LD_INT 0
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 0
46924: PUSH
46925: LD_INT 1
46927: NEG
46928: PUSH
46929: EMPTY
46930: LIST
46931: LIST
46932: PUSH
46933: LD_INT 1
46935: PUSH
46936: LD_INT 0
46938: PUSH
46939: EMPTY
46940: LIST
46941: LIST
46942: PUSH
46943: LD_INT 1
46945: PUSH
46946: LD_INT 1
46948: PUSH
46949: EMPTY
46950: LIST
46951: LIST
46952: PUSH
46953: LD_INT 0
46955: PUSH
46956: LD_INT 1
46958: PUSH
46959: EMPTY
46960: LIST
46961: LIST
46962: PUSH
46963: LD_INT 1
46965: NEG
46966: PUSH
46967: LD_INT 0
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 1
46976: NEG
46977: PUSH
46978: LD_INT 1
46980: NEG
46981: PUSH
46982: EMPTY
46983: LIST
46984: LIST
46985: PUSH
46986: EMPTY
46987: LIST
46988: LIST
46989: LIST
46990: LIST
46991: LIST
46992: LIST
46993: LIST
46994: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46995: LD_ADDR_VAR 0 64
46999: PUSH
47000: LD_INT 0
47002: PUSH
47003: LD_INT 0
47005: PUSH
47006: EMPTY
47007: LIST
47008: LIST
47009: PUSH
47010: LD_INT 0
47012: PUSH
47013: LD_INT 1
47015: NEG
47016: PUSH
47017: EMPTY
47018: LIST
47019: LIST
47020: PUSH
47021: LD_INT 1
47023: PUSH
47024: LD_INT 0
47026: PUSH
47027: EMPTY
47028: LIST
47029: LIST
47030: PUSH
47031: LD_INT 1
47033: PUSH
47034: LD_INT 1
47036: PUSH
47037: EMPTY
47038: LIST
47039: LIST
47040: PUSH
47041: LD_INT 0
47043: PUSH
47044: LD_INT 1
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 1
47053: NEG
47054: PUSH
47055: LD_INT 0
47057: PUSH
47058: EMPTY
47059: LIST
47060: LIST
47061: PUSH
47062: LD_INT 1
47064: NEG
47065: PUSH
47066: LD_INT 1
47068: NEG
47069: PUSH
47070: EMPTY
47071: LIST
47072: LIST
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: LIST
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: ST_TO_ADDR
// end ; 1 :
47083: GO 52980
47085: LD_INT 1
47087: DOUBLE
47088: EQUAL
47089: IFTRUE 47093
47091: GO 49716
47093: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47094: LD_ADDR_VAR 0 11
47098: PUSH
47099: LD_INT 1
47101: NEG
47102: PUSH
47103: LD_INT 3
47105: NEG
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: LD_INT 0
47113: PUSH
47114: LD_INT 3
47116: NEG
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 1
47124: PUSH
47125: LD_INT 2
47127: NEG
47128: PUSH
47129: EMPTY
47130: LIST
47131: LIST
47132: PUSH
47133: EMPTY
47134: LIST
47135: LIST
47136: LIST
47137: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47138: LD_ADDR_VAR 0 12
47142: PUSH
47143: LD_INT 2
47145: PUSH
47146: LD_INT 1
47148: NEG
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 3
47156: PUSH
47157: LD_INT 0
47159: PUSH
47160: EMPTY
47161: LIST
47162: LIST
47163: PUSH
47164: LD_INT 3
47166: PUSH
47167: LD_INT 1
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: EMPTY
47175: LIST
47176: LIST
47177: LIST
47178: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47179: LD_ADDR_VAR 0 13
47183: PUSH
47184: LD_INT 3
47186: PUSH
47187: LD_INT 2
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 3
47196: PUSH
47197: LD_INT 3
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 2
47206: PUSH
47207: LD_INT 3
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: LIST
47218: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47219: LD_ADDR_VAR 0 14
47223: PUSH
47224: LD_INT 1
47226: PUSH
47227: LD_INT 3
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 0
47236: PUSH
47237: LD_INT 3
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 1
47246: NEG
47247: PUSH
47248: LD_INT 2
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: LIST
47259: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47260: LD_ADDR_VAR 0 15
47264: PUSH
47265: LD_INT 2
47267: NEG
47268: PUSH
47269: LD_INT 1
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 3
47278: NEG
47279: PUSH
47280: LD_INT 0
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 3
47289: NEG
47290: PUSH
47291: LD_INT 1
47293: NEG
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: LIST
47303: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47304: LD_ADDR_VAR 0 16
47308: PUSH
47309: LD_INT 2
47311: NEG
47312: PUSH
47313: LD_INT 3
47315: NEG
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 3
47323: NEG
47324: PUSH
47325: LD_INT 2
47327: NEG
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 3
47335: NEG
47336: PUSH
47337: LD_INT 3
47339: NEG
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: LIST
47349: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47350: LD_ADDR_VAR 0 17
47354: PUSH
47355: LD_INT 1
47357: NEG
47358: PUSH
47359: LD_INT 3
47361: NEG
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 0
47369: PUSH
47370: LD_INT 3
47372: NEG
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: LD_INT 1
47380: PUSH
47381: LD_INT 2
47383: NEG
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: EMPTY
47390: LIST
47391: LIST
47392: LIST
47393: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47394: LD_ADDR_VAR 0 18
47398: PUSH
47399: LD_INT 2
47401: PUSH
47402: LD_INT 1
47404: NEG
47405: PUSH
47406: EMPTY
47407: LIST
47408: LIST
47409: PUSH
47410: LD_INT 3
47412: PUSH
47413: LD_INT 0
47415: PUSH
47416: EMPTY
47417: LIST
47418: LIST
47419: PUSH
47420: LD_INT 3
47422: PUSH
47423: LD_INT 1
47425: PUSH
47426: EMPTY
47427: LIST
47428: LIST
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: LIST
47434: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47435: LD_ADDR_VAR 0 19
47439: PUSH
47440: LD_INT 3
47442: PUSH
47443: LD_INT 2
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 3
47452: PUSH
47453: LD_INT 3
47455: PUSH
47456: EMPTY
47457: LIST
47458: LIST
47459: PUSH
47460: LD_INT 2
47462: PUSH
47463: LD_INT 3
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: LIST
47474: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47475: LD_ADDR_VAR 0 20
47479: PUSH
47480: LD_INT 1
47482: PUSH
47483: LD_INT 3
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 0
47492: PUSH
47493: LD_INT 3
47495: PUSH
47496: EMPTY
47497: LIST
47498: LIST
47499: PUSH
47500: LD_INT 1
47502: NEG
47503: PUSH
47504: LD_INT 2
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: EMPTY
47512: LIST
47513: LIST
47514: LIST
47515: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47516: LD_ADDR_VAR 0 21
47520: PUSH
47521: LD_INT 2
47523: NEG
47524: PUSH
47525: LD_INT 1
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 3
47534: NEG
47535: PUSH
47536: LD_INT 0
47538: PUSH
47539: EMPTY
47540: LIST
47541: LIST
47542: PUSH
47543: LD_INT 3
47545: NEG
47546: PUSH
47547: LD_INT 1
47549: NEG
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: EMPTY
47556: LIST
47557: LIST
47558: LIST
47559: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47560: LD_ADDR_VAR 0 22
47564: PUSH
47565: LD_INT 2
47567: NEG
47568: PUSH
47569: LD_INT 3
47571: NEG
47572: PUSH
47573: EMPTY
47574: LIST
47575: LIST
47576: PUSH
47577: LD_INT 3
47579: NEG
47580: PUSH
47581: LD_INT 2
47583: NEG
47584: PUSH
47585: EMPTY
47586: LIST
47587: LIST
47588: PUSH
47589: LD_INT 3
47591: NEG
47592: PUSH
47593: LD_INT 3
47595: NEG
47596: PUSH
47597: EMPTY
47598: LIST
47599: LIST
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: LIST
47605: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47606: LD_ADDR_VAR 0 23
47610: PUSH
47611: LD_INT 0
47613: PUSH
47614: LD_INT 3
47616: NEG
47617: PUSH
47618: EMPTY
47619: LIST
47620: LIST
47621: PUSH
47622: LD_INT 1
47624: NEG
47625: PUSH
47626: LD_INT 4
47628: NEG
47629: PUSH
47630: EMPTY
47631: LIST
47632: LIST
47633: PUSH
47634: LD_INT 1
47636: PUSH
47637: LD_INT 3
47639: NEG
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: EMPTY
47646: LIST
47647: LIST
47648: LIST
47649: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
47650: LD_ADDR_VAR 0 24
47654: PUSH
47655: LD_INT 3
47657: PUSH
47658: LD_INT 0
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 3
47667: PUSH
47668: LD_INT 1
47670: NEG
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 4
47678: PUSH
47679: LD_INT 1
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: EMPTY
47687: LIST
47688: LIST
47689: LIST
47690: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
47691: LD_ADDR_VAR 0 25
47695: PUSH
47696: LD_INT 3
47698: PUSH
47699: LD_INT 3
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 4
47708: PUSH
47709: LD_INT 3
47711: PUSH
47712: EMPTY
47713: LIST
47714: LIST
47715: PUSH
47716: LD_INT 3
47718: PUSH
47719: LD_INT 4
47721: PUSH
47722: EMPTY
47723: LIST
47724: LIST
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: LIST
47730: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
47731: LD_ADDR_VAR 0 26
47735: PUSH
47736: LD_INT 0
47738: PUSH
47739: LD_INT 3
47741: PUSH
47742: EMPTY
47743: LIST
47744: LIST
47745: PUSH
47746: LD_INT 1
47748: PUSH
47749: LD_INT 4
47751: PUSH
47752: EMPTY
47753: LIST
47754: LIST
47755: PUSH
47756: LD_INT 1
47758: NEG
47759: PUSH
47760: LD_INT 3
47762: PUSH
47763: EMPTY
47764: LIST
47765: LIST
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: LIST
47771: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
47772: LD_ADDR_VAR 0 27
47776: PUSH
47777: LD_INT 3
47779: NEG
47780: PUSH
47781: LD_INT 0
47783: PUSH
47784: EMPTY
47785: LIST
47786: LIST
47787: PUSH
47788: LD_INT 3
47790: NEG
47791: PUSH
47792: LD_INT 1
47794: PUSH
47795: EMPTY
47796: LIST
47797: LIST
47798: PUSH
47799: LD_INT 4
47801: NEG
47802: PUSH
47803: LD_INT 1
47805: NEG
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: LIST
47815: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
47816: LD_ADDR_VAR 0 28
47820: PUSH
47821: LD_INT 3
47823: NEG
47824: PUSH
47825: LD_INT 3
47827: NEG
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 3
47835: NEG
47836: PUSH
47837: LD_INT 4
47839: NEG
47840: PUSH
47841: EMPTY
47842: LIST
47843: LIST
47844: PUSH
47845: LD_INT 4
47847: NEG
47848: PUSH
47849: LD_INT 3
47851: NEG
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: LIST
47861: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
47862: LD_ADDR_VAR 0 29
47866: PUSH
47867: LD_INT 1
47869: NEG
47870: PUSH
47871: LD_INT 3
47873: NEG
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 0
47881: PUSH
47882: LD_INT 3
47884: NEG
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 1
47892: PUSH
47893: LD_INT 2
47895: NEG
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 1
47903: NEG
47904: PUSH
47905: LD_INT 4
47907: NEG
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 0
47915: PUSH
47916: LD_INT 4
47918: NEG
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 1
47926: PUSH
47927: LD_INT 3
47929: NEG
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 1
47937: NEG
47938: PUSH
47939: LD_INT 5
47941: NEG
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 0
47949: PUSH
47950: LD_INT 5
47952: NEG
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: LD_INT 1
47960: PUSH
47961: LD_INT 4
47963: NEG
47964: PUSH
47965: EMPTY
47966: LIST
47967: LIST
47968: PUSH
47969: LD_INT 1
47971: NEG
47972: PUSH
47973: LD_INT 6
47975: NEG
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: LD_INT 0
47983: PUSH
47984: LD_INT 6
47986: NEG
47987: PUSH
47988: EMPTY
47989: LIST
47990: LIST
47991: PUSH
47992: LD_INT 1
47994: PUSH
47995: LD_INT 5
47997: NEG
47998: PUSH
47999: EMPTY
48000: LIST
48001: LIST
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: LIST
48007: LIST
48008: LIST
48009: LIST
48010: LIST
48011: LIST
48012: LIST
48013: LIST
48014: LIST
48015: LIST
48016: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
48017: LD_ADDR_VAR 0 30
48021: PUSH
48022: LD_INT 2
48024: PUSH
48025: LD_INT 1
48027: NEG
48028: PUSH
48029: EMPTY
48030: LIST
48031: LIST
48032: PUSH
48033: LD_INT 3
48035: PUSH
48036: LD_INT 0
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 3
48045: PUSH
48046: LD_INT 1
48048: PUSH
48049: EMPTY
48050: LIST
48051: LIST
48052: PUSH
48053: LD_INT 3
48055: PUSH
48056: LD_INT 1
48058: NEG
48059: PUSH
48060: EMPTY
48061: LIST
48062: LIST
48063: PUSH
48064: LD_INT 4
48066: PUSH
48067: LD_INT 0
48069: PUSH
48070: EMPTY
48071: LIST
48072: LIST
48073: PUSH
48074: LD_INT 4
48076: PUSH
48077: LD_INT 1
48079: PUSH
48080: EMPTY
48081: LIST
48082: LIST
48083: PUSH
48084: LD_INT 4
48086: PUSH
48087: LD_INT 1
48089: NEG
48090: PUSH
48091: EMPTY
48092: LIST
48093: LIST
48094: PUSH
48095: LD_INT 5
48097: PUSH
48098: LD_INT 0
48100: PUSH
48101: EMPTY
48102: LIST
48103: LIST
48104: PUSH
48105: LD_INT 5
48107: PUSH
48108: LD_INT 1
48110: PUSH
48111: EMPTY
48112: LIST
48113: LIST
48114: PUSH
48115: LD_INT 5
48117: PUSH
48118: LD_INT 1
48120: NEG
48121: PUSH
48122: EMPTY
48123: LIST
48124: LIST
48125: PUSH
48126: LD_INT 6
48128: PUSH
48129: LD_INT 0
48131: PUSH
48132: EMPTY
48133: LIST
48134: LIST
48135: PUSH
48136: LD_INT 6
48138: PUSH
48139: LD_INT 1
48141: PUSH
48142: EMPTY
48143: LIST
48144: LIST
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: LIST
48152: LIST
48153: LIST
48154: LIST
48155: LIST
48156: LIST
48157: LIST
48158: LIST
48159: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
48160: LD_ADDR_VAR 0 31
48164: PUSH
48165: LD_INT 3
48167: PUSH
48168: LD_INT 2
48170: PUSH
48171: EMPTY
48172: LIST
48173: LIST
48174: PUSH
48175: LD_INT 3
48177: PUSH
48178: LD_INT 3
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 2
48187: PUSH
48188: LD_INT 3
48190: PUSH
48191: EMPTY
48192: LIST
48193: LIST
48194: PUSH
48195: LD_INT 4
48197: PUSH
48198: LD_INT 3
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 4
48207: PUSH
48208: LD_INT 4
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 3
48217: PUSH
48218: LD_INT 4
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 5
48227: PUSH
48228: LD_INT 4
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 5
48237: PUSH
48238: LD_INT 5
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 4
48247: PUSH
48248: LD_INT 5
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 6
48257: PUSH
48258: LD_INT 5
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 6
48267: PUSH
48268: LD_INT 6
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 5
48277: PUSH
48278: LD_INT 6
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: LIST
48289: LIST
48290: LIST
48291: LIST
48292: LIST
48293: LIST
48294: LIST
48295: LIST
48296: LIST
48297: LIST
48298: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
48299: LD_ADDR_VAR 0 32
48303: PUSH
48304: LD_INT 1
48306: PUSH
48307: LD_INT 3
48309: PUSH
48310: EMPTY
48311: LIST
48312: LIST
48313: PUSH
48314: LD_INT 0
48316: PUSH
48317: LD_INT 3
48319: PUSH
48320: EMPTY
48321: LIST
48322: LIST
48323: PUSH
48324: LD_INT 1
48326: NEG
48327: PUSH
48328: LD_INT 2
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: PUSH
48335: LD_INT 1
48337: PUSH
48338: LD_INT 4
48340: PUSH
48341: EMPTY
48342: LIST
48343: LIST
48344: PUSH
48345: LD_INT 0
48347: PUSH
48348: LD_INT 4
48350: PUSH
48351: EMPTY
48352: LIST
48353: LIST
48354: PUSH
48355: LD_INT 1
48357: NEG
48358: PUSH
48359: LD_INT 3
48361: PUSH
48362: EMPTY
48363: LIST
48364: LIST
48365: PUSH
48366: LD_INT 1
48368: PUSH
48369: LD_INT 5
48371: PUSH
48372: EMPTY
48373: LIST
48374: LIST
48375: PUSH
48376: LD_INT 0
48378: PUSH
48379: LD_INT 5
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: LD_INT 1
48388: NEG
48389: PUSH
48390: LD_INT 4
48392: PUSH
48393: EMPTY
48394: LIST
48395: LIST
48396: PUSH
48397: LD_INT 1
48399: PUSH
48400: LD_INT 6
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: LD_INT 0
48409: PUSH
48410: LD_INT 6
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 1
48419: NEG
48420: PUSH
48421: LD_INT 5
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: LIST
48435: LIST
48436: LIST
48437: LIST
48438: LIST
48439: LIST
48440: LIST
48441: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
48442: LD_ADDR_VAR 0 33
48446: PUSH
48447: LD_INT 2
48449: NEG
48450: PUSH
48451: LD_INT 1
48453: PUSH
48454: EMPTY
48455: LIST
48456: LIST
48457: PUSH
48458: LD_INT 3
48460: NEG
48461: PUSH
48462: LD_INT 0
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: LD_INT 3
48471: NEG
48472: PUSH
48473: LD_INT 1
48475: NEG
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 3
48483: NEG
48484: PUSH
48485: LD_INT 1
48487: PUSH
48488: EMPTY
48489: LIST
48490: LIST
48491: PUSH
48492: LD_INT 4
48494: NEG
48495: PUSH
48496: LD_INT 0
48498: PUSH
48499: EMPTY
48500: LIST
48501: LIST
48502: PUSH
48503: LD_INT 4
48505: NEG
48506: PUSH
48507: LD_INT 1
48509: NEG
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 4
48517: NEG
48518: PUSH
48519: LD_INT 1
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: LD_INT 5
48528: NEG
48529: PUSH
48530: LD_INT 0
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 5
48539: NEG
48540: PUSH
48541: LD_INT 1
48543: NEG
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 5
48551: NEG
48552: PUSH
48553: LD_INT 1
48555: PUSH
48556: EMPTY
48557: LIST
48558: LIST
48559: PUSH
48560: LD_INT 6
48562: NEG
48563: PUSH
48564: LD_INT 0
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 6
48573: NEG
48574: PUSH
48575: LD_INT 1
48577: NEG
48578: PUSH
48579: EMPTY
48580: LIST
48581: LIST
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: LIST
48587: LIST
48588: LIST
48589: LIST
48590: LIST
48591: LIST
48592: LIST
48593: LIST
48594: LIST
48595: LIST
48596: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
48597: LD_ADDR_VAR 0 34
48601: PUSH
48602: LD_INT 2
48604: NEG
48605: PUSH
48606: LD_INT 3
48608: NEG
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 3
48616: NEG
48617: PUSH
48618: LD_INT 2
48620: NEG
48621: PUSH
48622: EMPTY
48623: LIST
48624: LIST
48625: PUSH
48626: LD_INT 3
48628: NEG
48629: PUSH
48630: LD_INT 3
48632: NEG
48633: PUSH
48634: EMPTY
48635: LIST
48636: LIST
48637: PUSH
48638: LD_INT 3
48640: NEG
48641: PUSH
48642: LD_INT 4
48644: NEG
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: PUSH
48650: LD_INT 4
48652: NEG
48653: PUSH
48654: LD_INT 3
48656: NEG
48657: PUSH
48658: EMPTY
48659: LIST
48660: LIST
48661: PUSH
48662: LD_INT 4
48664: NEG
48665: PUSH
48666: LD_INT 4
48668: NEG
48669: PUSH
48670: EMPTY
48671: LIST
48672: LIST
48673: PUSH
48674: LD_INT 4
48676: NEG
48677: PUSH
48678: LD_INT 5
48680: NEG
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 5
48688: NEG
48689: PUSH
48690: LD_INT 4
48692: NEG
48693: PUSH
48694: EMPTY
48695: LIST
48696: LIST
48697: PUSH
48698: LD_INT 5
48700: NEG
48701: PUSH
48702: LD_INT 5
48704: NEG
48705: PUSH
48706: EMPTY
48707: LIST
48708: LIST
48709: PUSH
48710: LD_INT 5
48712: NEG
48713: PUSH
48714: LD_INT 6
48716: NEG
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 6
48724: NEG
48725: PUSH
48726: LD_INT 5
48728: NEG
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 6
48736: NEG
48737: PUSH
48738: LD_INT 6
48740: NEG
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: EMPTY
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: LIST
48753: LIST
48754: LIST
48755: LIST
48756: LIST
48757: LIST
48758: LIST
48759: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
48760: LD_ADDR_VAR 0 41
48764: PUSH
48765: LD_INT 0
48767: PUSH
48768: LD_INT 2
48770: NEG
48771: PUSH
48772: EMPTY
48773: LIST
48774: LIST
48775: PUSH
48776: LD_INT 1
48778: NEG
48779: PUSH
48780: LD_INT 3
48782: NEG
48783: PUSH
48784: EMPTY
48785: LIST
48786: LIST
48787: PUSH
48788: LD_INT 1
48790: PUSH
48791: LD_INT 2
48793: NEG
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: EMPTY
48800: LIST
48801: LIST
48802: LIST
48803: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
48804: LD_ADDR_VAR 0 42
48808: PUSH
48809: LD_INT 2
48811: PUSH
48812: LD_INT 0
48814: PUSH
48815: EMPTY
48816: LIST
48817: LIST
48818: PUSH
48819: LD_INT 2
48821: PUSH
48822: LD_INT 1
48824: NEG
48825: PUSH
48826: EMPTY
48827: LIST
48828: LIST
48829: PUSH
48830: LD_INT 3
48832: PUSH
48833: LD_INT 1
48835: PUSH
48836: EMPTY
48837: LIST
48838: LIST
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: LIST
48844: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
48845: LD_ADDR_VAR 0 43
48849: PUSH
48850: LD_INT 2
48852: PUSH
48853: LD_INT 2
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 3
48862: PUSH
48863: LD_INT 2
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 2
48872: PUSH
48873: LD_INT 3
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: LIST
48884: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
48885: LD_ADDR_VAR 0 44
48889: PUSH
48890: LD_INT 0
48892: PUSH
48893: LD_INT 2
48895: PUSH
48896: EMPTY
48897: LIST
48898: LIST
48899: PUSH
48900: LD_INT 1
48902: PUSH
48903: LD_INT 3
48905: PUSH
48906: EMPTY
48907: LIST
48908: LIST
48909: PUSH
48910: LD_INT 1
48912: NEG
48913: PUSH
48914: LD_INT 2
48916: PUSH
48917: EMPTY
48918: LIST
48919: LIST
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: LIST
48925: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48926: LD_ADDR_VAR 0 45
48930: PUSH
48931: LD_INT 2
48933: NEG
48934: PUSH
48935: LD_INT 0
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 2
48944: NEG
48945: PUSH
48946: LD_INT 1
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: LD_INT 3
48955: NEG
48956: PUSH
48957: LD_INT 1
48959: NEG
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: EMPTY
48966: LIST
48967: LIST
48968: LIST
48969: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
48970: LD_ADDR_VAR 0 46
48974: PUSH
48975: LD_INT 2
48977: NEG
48978: PUSH
48979: LD_INT 2
48981: NEG
48982: PUSH
48983: EMPTY
48984: LIST
48985: LIST
48986: PUSH
48987: LD_INT 2
48989: NEG
48990: PUSH
48991: LD_INT 3
48993: NEG
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 3
49001: NEG
49002: PUSH
49003: LD_INT 2
49005: NEG
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: LIST
49015: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
49016: LD_ADDR_VAR 0 47
49020: PUSH
49021: LD_INT 2
49023: NEG
49024: PUSH
49025: LD_INT 3
49027: NEG
49028: PUSH
49029: EMPTY
49030: LIST
49031: LIST
49032: PUSH
49033: LD_INT 1
49035: NEG
49036: PUSH
49037: LD_INT 3
49039: NEG
49040: PUSH
49041: EMPTY
49042: LIST
49043: LIST
49044: PUSH
49045: EMPTY
49046: LIST
49047: LIST
49048: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49049: LD_ADDR_VAR 0 48
49053: PUSH
49054: LD_INT 1
49056: PUSH
49057: LD_INT 2
49059: NEG
49060: PUSH
49061: EMPTY
49062: LIST
49063: LIST
49064: PUSH
49065: LD_INT 2
49067: PUSH
49068: LD_INT 1
49070: NEG
49071: PUSH
49072: EMPTY
49073: LIST
49074: LIST
49075: PUSH
49076: EMPTY
49077: LIST
49078: LIST
49079: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
49080: LD_ADDR_VAR 0 49
49084: PUSH
49085: LD_INT 3
49087: PUSH
49088: LD_INT 1
49090: PUSH
49091: EMPTY
49092: LIST
49093: LIST
49094: PUSH
49095: LD_INT 3
49097: PUSH
49098: LD_INT 2
49100: PUSH
49101: EMPTY
49102: LIST
49103: LIST
49104: PUSH
49105: EMPTY
49106: LIST
49107: LIST
49108: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
49109: LD_ADDR_VAR 0 50
49113: PUSH
49114: LD_INT 2
49116: PUSH
49117: LD_INT 3
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 1
49126: PUSH
49127: LD_INT 3
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49138: LD_ADDR_VAR 0 51
49142: PUSH
49143: LD_INT 1
49145: NEG
49146: PUSH
49147: LD_INT 2
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 2
49156: NEG
49157: PUSH
49158: LD_INT 1
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: EMPTY
49166: LIST
49167: LIST
49168: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49169: LD_ADDR_VAR 0 52
49173: PUSH
49174: LD_INT 3
49176: NEG
49177: PUSH
49178: LD_INT 1
49180: NEG
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 3
49188: NEG
49189: PUSH
49190: LD_INT 2
49192: NEG
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: EMPTY
49199: LIST
49200: LIST
49201: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49202: LD_ADDR_VAR 0 53
49206: PUSH
49207: LD_INT 1
49209: NEG
49210: PUSH
49211: LD_INT 3
49213: NEG
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 0
49221: PUSH
49222: LD_INT 3
49224: NEG
49225: PUSH
49226: EMPTY
49227: LIST
49228: LIST
49229: PUSH
49230: LD_INT 1
49232: PUSH
49233: LD_INT 2
49235: NEG
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: EMPTY
49242: LIST
49243: LIST
49244: LIST
49245: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49246: LD_ADDR_VAR 0 54
49250: PUSH
49251: LD_INT 2
49253: PUSH
49254: LD_INT 1
49256: NEG
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 3
49264: PUSH
49265: LD_INT 0
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 3
49274: PUSH
49275: LD_INT 1
49277: PUSH
49278: EMPTY
49279: LIST
49280: LIST
49281: PUSH
49282: EMPTY
49283: LIST
49284: LIST
49285: LIST
49286: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49287: LD_ADDR_VAR 0 55
49291: PUSH
49292: LD_INT 3
49294: PUSH
49295: LD_INT 2
49297: PUSH
49298: EMPTY
49299: LIST
49300: LIST
49301: PUSH
49302: LD_INT 3
49304: PUSH
49305: LD_INT 3
49307: PUSH
49308: EMPTY
49309: LIST
49310: LIST
49311: PUSH
49312: LD_INT 2
49314: PUSH
49315: LD_INT 3
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: LIST
49326: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49327: LD_ADDR_VAR 0 56
49331: PUSH
49332: LD_INT 1
49334: PUSH
49335: LD_INT 3
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 0
49344: PUSH
49345: LD_INT 3
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 1
49354: NEG
49355: PUSH
49356: LD_INT 2
49358: PUSH
49359: EMPTY
49360: LIST
49361: LIST
49362: PUSH
49363: EMPTY
49364: LIST
49365: LIST
49366: LIST
49367: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49368: LD_ADDR_VAR 0 57
49372: PUSH
49373: LD_INT 2
49375: NEG
49376: PUSH
49377: LD_INT 1
49379: PUSH
49380: EMPTY
49381: LIST
49382: LIST
49383: PUSH
49384: LD_INT 3
49386: NEG
49387: PUSH
49388: LD_INT 0
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 3
49397: NEG
49398: PUSH
49399: LD_INT 1
49401: NEG
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: EMPTY
49408: LIST
49409: LIST
49410: LIST
49411: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49412: LD_ADDR_VAR 0 58
49416: PUSH
49417: LD_INT 2
49419: NEG
49420: PUSH
49421: LD_INT 3
49423: NEG
49424: PUSH
49425: EMPTY
49426: LIST
49427: LIST
49428: PUSH
49429: LD_INT 3
49431: NEG
49432: PUSH
49433: LD_INT 2
49435: NEG
49436: PUSH
49437: EMPTY
49438: LIST
49439: LIST
49440: PUSH
49441: LD_INT 3
49443: NEG
49444: PUSH
49445: LD_INT 3
49447: NEG
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: LIST
49457: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
49458: LD_ADDR_VAR 0 59
49462: PUSH
49463: LD_INT 1
49465: NEG
49466: PUSH
49467: LD_INT 2
49469: NEG
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: LD_INT 0
49477: PUSH
49478: LD_INT 2
49480: NEG
49481: PUSH
49482: EMPTY
49483: LIST
49484: LIST
49485: PUSH
49486: LD_INT 1
49488: PUSH
49489: LD_INT 1
49491: NEG
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: EMPTY
49498: LIST
49499: LIST
49500: LIST
49501: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49502: LD_ADDR_VAR 0 60
49506: PUSH
49507: LD_INT 1
49509: PUSH
49510: LD_INT 1
49512: NEG
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 2
49520: PUSH
49521: LD_INT 0
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 2
49530: PUSH
49531: LD_INT 1
49533: PUSH
49534: EMPTY
49535: LIST
49536: LIST
49537: PUSH
49538: EMPTY
49539: LIST
49540: LIST
49541: LIST
49542: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49543: LD_ADDR_VAR 0 61
49547: PUSH
49548: LD_INT 2
49550: PUSH
49551: LD_INT 1
49553: PUSH
49554: EMPTY
49555: LIST
49556: LIST
49557: PUSH
49558: LD_INT 2
49560: PUSH
49561: LD_INT 2
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 1
49570: PUSH
49571: LD_INT 2
49573: PUSH
49574: EMPTY
49575: LIST
49576: LIST
49577: PUSH
49578: EMPTY
49579: LIST
49580: LIST
49581: LIST
49582: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49583: LD_ADDR_VAR 0 62
49587: PUSH
49588: LD_INT 1
49590: PUSH
49591: LD_INT 2
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: LD_INT 0
49600: PUSH
49601: LD_INT 2
49603: PUSH
49604: EMPTY
49605: LIST
49606: LIST
49607: PUSH
49608: LD_INT 1
49610: NEG
49611: PUSH
49612: LD_INT 1
49614: PUSH
49615: EMPTY
49616: LIST
49617: LIST
49618: PUSH
49619: EMPTY
49620: LIST
49621: LIST
49622: LIST
49623: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49624: LD_ADDR_VAR 0 63
49628: PUSH
49629: LD_INT 1
49631: NEG
49632: PUSH
49633: LD_INT 1
49635: PUSH
49636: EMPTY
49637: LIST
49638: LIST
49639: PUSH
49640: LD_INT 2
49642: NEG
49643: PUSH
49644: LD_INT 0
49646: PUSH
49647: EMPTY
49648: LIST
49649: LIST
49650: PUSH
49651: LD_INT 2
49653: NEG
49654: PUSH
49655: LD_INT 1
49657: NEG
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: EMPTY
49664: LIST
49665: LIST
49666: LIST
49667: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49668: LD_ADDR_VAR 0 64
49672: PUSH
49673: LD_INT 1
49675: NEG
49676: PUSH
49677: LD_INT 2
49679: NEG
49680: PUSH
49681: EMPTY
49682: LIST
49683: LIST
49684: PUSH
49685: LD_INT 2
49687: NEG
49688: PUSH
49689: LD_INT 1
49691: NEG
49692: PUSH
49693: EMPTY
49694: LIST
49695: LIST
49696: PUSH
49697: LD_INT 2
49699: NEG
49700: PUSH
49701: LD_INT 2
49703: NEG
49704: PUSH
49705: EMPTY
49706: LIST
49707: LIST
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: LIST
49713: ST_TO_ADDR
// end ; 2 :
49714: GO 52980
49716: LD_INT 2
49718: DOUBLE
49719: EQUAL
49720: IFTRUE 49724
49722: GO 52979
49724: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
49725: LD_ADDR_VAR 0 29
49729: PUSH
49730: LD_INT 4
49732: PUSH
49733: LD_INT 0
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: LD_INT 4
49742: PUSH
49743: LD_INT 1
49745: NEG
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 5
49753: PUSH
49754: LD_INT 0
49756: PUSH
49757: EMPTY
49758: LIST
49759: LIST
49760: PUSH
49761: LD_INT 5
49763: PUSH
49764: LD_INT 1
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 4
49773: PUSH
49774: LD_INT 1
49776: PUSH
49777: EMPTY
49778: LIST
49779: LIST
49780: PUSH
49781: LD_INT 3
49783: PUSH
49784: LD_INT 0
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 3
49793: PUSH
49794: LD_INT 1
49796: NEG
49797: PUSH
49798: EMPTY
49799: LIST
49800: LIST
49801: PUSH
49802: LD_INT 3
49804: PUSH
49805: LD_INT 2
49807: NEG
49808: PUSH
49809: EMPTY
49810: LIST
49811: LIST
49812: PUSH
49813: LD_INT 5
49815: PUSH
49816: LD_INT 2
49818: PUSH
49819: EMPTY
49820: LIST
49821: LIST
49822: PUSH
49823: LD_INT 3
49825: PUSH
49826: LD_INT 3
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: PUSH
49833: LD_INT 3
49835: PUSH
49836: LD_INT 2
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 4
49845: PUSH
49846: LD_INT 3
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: PUSH
49853: LD_INT 4
49855: PUSH
49856: LD_INT 4
49858: PUSH
49859: EMPTY
49860: LIST
49861: LIST
49862: PUSH
49863: LD_INT 3
49865: PUSH
49866: LD_INT 4
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 2
49875: PUSH
49876: LD_INT 3
49878: PUSH
49879: EMPTY
49880: LIST
49881: LIST
49882: PUSH
49883: LD_INT 2
49885: PUSH
49886: LD_INT 2
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 4
49895: PUSH
49896: LD_INT 2
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: LD_INT 2
49905: PUSH
49906: LD_INT 4
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 0
49915: PUSH
49916: LD_INT 4
49918: PUSH
49919: EMPTY
49920: LIST
49921: LIST
49922: PUSH
49923: LD_INT 0
49925: PUSH
49926: LD_INT 3
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 1
49935: PUSH
49936: LD_INT 4
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 1
49945: PUSH
49946: LD_INT 5
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 0
49955: PUSH
49956: LD_INT 5
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 1
49965: NEG
49966: PUSH
49967: LD_INT 4
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: LD_INT 1
49976: NEG
49977: PUSH
49978: LD_INT 3
49980: PUSH
49981: EMPTY
49982: LIST
49983: LIST
49984: PUSH
49985: LD_INT 2
49987: PUSH
49988: LD_INT 5
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 2
49997: NEG
49998: PUSH
49999: LD_INT 3
50001: PUSH
50002: EMPTY
50003: LIST
50004: LIST
50005: PUSH
50006: LD_INT 3
50008: NEG
50009: PUSH
50010: LD_INT 0
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 3
50019: NEG
50020: PUSH
50021: LD_INT 1
50023: NEG
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 2
50031: NEG
50032: PUSH
50033: LD_INT 0
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 2
50042: NEG
50043: PUSH
50044: LD_INT 1
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 3
50053: NEG
50054: PUSH
50055: LD_INT 1
50057: PUSH
50058: EMPTY
50059: LIST
50060: LIST
50061: PUSH
50062: LD_INT 4
50064: NEG
50065: PUSH
50066: LD_INT 0
50068: PUSH
50069: EMPTY
50070: LIST
50071: LIST
50072: PUSH
50073: LD_INT 4
50075: NEG
50076: PUSH
50077: LD_INT 1
50079: NEG
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: PUSH
50085: LD_INT 4
50087: NEG
50088: PUSH
50089: LD_INT 2
50091: NEG
50092: PUSH
50093: EMPTY
50094: LIST
50095: LIST
50096: PUSH
50097: LD_INT 2
50099: NEG
50100: PUSH
50101: LD_INT 2
50103: PUSH
50104: EMPTY
50105: LIST
50106: LIST
50107: PUSH
50108: LD_INT 4
50110: NEG
50111: PUSH
50112: LD_INT 4
50114: NEG
50115: PUSH
50116: EMPTY
50117: LIST
50118: LIST
50119: PUSH
50120: LD_INT 4
50122: NEG
50123: PUSH
50124: LD_INT 5
50126: NEG
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 3
50134: NEG
50135: PUSH
50136: LD_INT 4
50138: NEG
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 3
50146: NEG
50147: PUSH
50148: LD_INT 3
50150: NEG
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 4
50158: NEG
50159: PUSH
50160: LD_INT 3
50162: NEG
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: LD_INT 5
50170: NEG
50171: PUSH
50172: LD_INT 4
50174: NEG
50175: PUSH
50176: EMPTY
50177: LIST
50178: LIST
50179: PUSH
50180: LD_INT 5
50182: NEG
50183: PUSH
50184: LD_INT 5
50186: NEG
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 3
50194: NEG
50195: PUSH
50196: LD_INT 5
50198: NEG
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 5
50206: NEG
50207: PUSH
50208: LD_INT 3
50210: NEG
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: LIST
50241: LIST
50242: LIST
50243: LIST
50244: LIST
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
50263: LD_ADDR_VAR 0 30
50267: PUSH
50268: LD_INT 4
50270: PUSH
50271: LD_INT 4
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 4
50280: PUSH
50281: LD_INT 3
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 5
50290: PUSH
50291: LD_INT 4
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 5
50300: PUSH
50301: LD_INT 5
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 4
50310: PUSH
50311: LD_INT 5
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 3
50320: PUSH
50321: LD_INT 4
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 3
50330: PUSH
50331: LD_INT 3
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 5
50340: PUSH
50341: LD_INT 3
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 3
50350: PUSH
50351: LD_INT 5
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 0
50360: PUSH
50361: LD_INT 3
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 0
50370: PUSH
50371: LD_INT 2
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 1
50380: PUSH
50381: LD_INT 3
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: LD_INT 1
50390: PUSH
50391: LD_INT 4
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 0
50400: PUSH
50401: LD_INT 4
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 1
50410: NEG
50411: PUSH
50412: LD_INT 3
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 1
50421: NEG
50422: PUSH
50423: LD_INT 2
50425: PUSH
50426: EMPTY
50427: LIST
50428: LIST
50429: PUSH
50430: LD_INT 2
50432: PUSH
50433: LD_INT 4
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 2
50442: NEG
50443: PUSH
50444: LD_INT 2
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: PUSH
50451: LD_INT 4
50453: NEG
50454: PUSH
50455: LD_INT 0
50457: PUSH
50458: EMPTY
50459: LIST
50460: LIST
50461: PUSH
50462: LD_INT 4
50464: NEG
50465: PUSH
50466: LD_INT 1
50468: NEG
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 3
50476: NEG
50477: PUSH
50478: LD_INT 0
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 3
50487: NEG
50488: PUSH
50489: LD_INT 1
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 4
50498: NEG
50499: PUSH
50500: LD_INT 1
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 5
50509: NEG
50510: PUSH
50511: LD_INT 0
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 5
50520: NEG
50521: PUSH
50522: LD_INT 1
50524: NEG
50525: PUSH
50526: EMPTY
50527: LIST
50528: LIST
50529: PUSH
50530: LD_INT 5
50532: NEG
50533: PUSH
50534: LD_INT 2
50536: NEG
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: PUSH
50542: LD_INT 3
50544: NEG
50545: PUSH
50546: LD_INT 2
50548: PUSH
50549: EMPTY
50550: LIST
50551: LIST
50552: PUSH
50553: LD_INT 3
50555: NEG
50556: PUSH
50557: LD_INT 3
50559: NEG
50560: PUSH
50561: EMPTY
50562: LIST
50563: LIST
50564: PUSH
50565: LD_INT 3
50567: NEG
50568: PUSH
50569: LD_INT 4
50571: NEG
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 2
50579: NEG
50580: PUSH
50581: LD_INT 3
50583: NEG
50584: PUSH
50585: EMPTY
50586: LIST
50587: LIST
50588: PUSH
50589: LD_INT 2
50591: NEG
50592: PUSH
50593: LD_INT 2
50595: NEG
50596: PUSH
50597: EMPTY
50598: LIST
50599: LIST
50600: PUSH
50601: LD_INT 3
50603: NEG
50604: PUSH
50605: LD_INT 2
50607: NEG
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 4
50615: NEG
50616: PUSH
50617: LD_INT 3
50619: NEG
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 4
50627: NEG
50628: PUSH
50629: LD_INT 4
50631: NEG
50632: PUSH
50633: EMPTY
50634: LIST
50635: LIST
50636: PUSH
50637: LD_INT 2
50639: NEG
50640: PUSH
50641: LD_INT 4
50643: NEG
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 4
50651: NEG
50652: PUSH
50653: LD_INT 2
50655: NEG
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 0
50663: PUSH
50664: LD_INT 4
50666: NEG
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 0
50674: PUSH
50675: LD_INT 5
50677: NEG
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 1
50685: PUSH
50686: LD_INT 4
50688: NEG
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 1
50696: PUSH
50697: LD_INT 3
50699: NEG
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 0
50707: PUSH
50708: LD_INT 3
50710: NEG
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 1
50718: NEG
50719: PUSH
50720: LD_INT 4
50722: NEG
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: LD_INT 1
50730: NEG
50731: PUSH
50732: LD_INT 5
50734: NEG
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 2
50742: PUSH
50743: LD_INT 3
50745: NEG
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 2
50753: NEG
50754: PUSH
50755: LD_INT 5
50757: NEG
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: EMPTY
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: LIST
50788: LIST
50789: LIST
50790: LIST
50791: LIST
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
50810: LD_ADDR_VAR 0 31
50814: PUSH
50815: LD_INT 0
50817: PUSH
50818: LD_INT 4
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 0
50827: PUSH
50828: LD_INT 3
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: PUSH
50835: LD_INT 1
50837: PUSH
50838: LD_INT 4
50840: PUSH
50841: EMPTY
50842: LIST
50843: LIST
50844: PUSH
50845: LD_INT 1
50847: PUSH
50848: LD_INT 5
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 0
50857: PUSH
50858: LD_INT 5
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 1
50867: NEG
50868: PUSH
50869: LD_INT 4
50871: PUSH
50872: EMPTY
50873: LIST
50874: LIST
50875: PUSH
50876: LD_INT 1
50878: NEG
50879: PUSH
50880: LD_INT 3
50882: PUSH
50883: EMPTY
50884: LIST
50885: LIST
50886: PUSH
50887: LD_INT 2
50889: PUSH
50890: LD_INT 5
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 2
50899: NEG
50900: PUSH
50901: LD_INT 3
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 3
50910: NEG
50911: PUSH
50912: LD_INT 0
50914: PUSH
50915: EMPTY
50916: LIST
50917: LIST
50918: PUSH
50919: LD_INT 3
50921: NEG
50922: PUSH
50923: LD_INT 1
50925: NEG
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 2
50933: NEG
50934: PUSH
50935: LD_INT 0
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 2
50944: NEG
50945: PUSH
50946: LD_INT 1
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 3
50955: NEG
50956: PUSH
50957: LD_INT 1
50959: PUSH
50960: EMPTY
50961: LIST
50962: LIST
50963: PUSH
50964: LD_INT 4
50966: NEG
50967: PUSH
50968: LD_INT 0
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 4
50977: NEG
50978: PUSH
50979: LD_INT 1
50981: NEG
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 4
50989: NEG
50990: PUSH
50991: LD_INT 2
50993: NEG
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: LD_INT 2
51001: NEG
51002: PUSH
51003: LD_INT 2
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 4
51012: NEG
51013: PUSH
51014: LD_INT 4
51016: NEG
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 4
51024: NEG
51025: PUSH
51026: LD_INT 5
51028: NEG
51029: PUSH
51030: EMPTY
51031: LIST
51032: LIST
51033: PUSH
51034: LD_INT 3
51036: NEG
51037: PUSH
51038: LD_INT 4
51040: NEG
51041: PUSH
51042: EMPTY
51043: LIST
51044: LIST
51045: PUSH
51046: LD_INT 3
51048: NEG
51049: PUSH
51050: LD_INT 3
51052: NEG
51053: PUSH
51054: EMPTY
51055: LIST
51056: LIST
51057: PUSH
51058: LD_INT 4
51060: NEG
51061: PUSH
51062: LD_INT 3
51064: NEG
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 5
51072: NEG
51073: PUSH
51074: LD_INT 4
51076: NEG
51077: PUSH
51078: EMPTY
51079: LIST
51080: LIST
51081: PUSH
51082: LD_INT 5
51084: NEG
51085: PUSH
51086: LD_INT 5
51088: NEG
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 3
51096: NEG
51097: PUSH
51098: LD_INT 5
51100: NEG
51101: PUSH
51102: EMPTY
51103: LIST
51104: LIST
51105: PUSH
51106: LD_INT 5
51108: NEG
51109: PUSH
51110: LD_INT 3
51112: NEG
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 0
51120: PUSH
51121: LD_INT 3
51123: NEG
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 0
51131: PUSH
51132: LD_INT 4
51134: NEG
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 1
51142: PUSH
51143: LD_INT 3
51145: NEG
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 1
51153: PUSH
51154: LD_INT 2
51156: NEG
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 0
51164: PUSH
51165: LD_INT 2
51167: NEG
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: PUSH
51173: LD_INT 1
51175: NEG
51176: PUSH
51177: LD_INT 3
51179: NEG
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 1
51187: NEG
51188: PUSH
51189: LD_INT 4
51191: NEG
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 2
51199: PUSH
51200: LD_INT 2
51202: NEG
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 2
51210: NEG
51211: PUSH
51212: LD_INT 4
51214: NEG
51215: PUSH
51216: EMPTY
51217: LIST
51218: LIST
51219: PUSH
51220: LD_INT 4
51222: PUSH
51223: LD_INT 0
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 4
51232: PUSH
51233: LD_INT 1
51235: NEG
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 5
51243: PUSH
51244: LD_INT 0
51246: PUSH
51247: EMPTY
51248: LIST
51249: LIST
51250: PUSH
51251: LD_INT 5
51253: PUSH
51254: LD_INT 1
51256: PUSH
51257: EMPTY
51258: LIST
51259: LIST
51260: PUSH
51261: LD_INT 4
51263: PUSH
51264: LD_INT 1
51266: PUSH
51267: EMPTY
51268: LIST
51269: LIST
51270: PUSH
51271: LD_INT 3
51273: PUSH
51274: LD_INT 0
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 3
51283: PUSH
51284: LD_INT 1
51286: NEG
51287: PUSH
51288: EMPTY
51289: LIST
51290: LIST
51291: PUSH
51292: LD_INT 3
51294: PUSH
51295: LD_INT 2
51297: NEG
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 5
51305: PUSH
51306: LD_INT 2
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: EMPTY
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
51360: LD_ADDR_VAR 0 32
51364: PUSH
51365: LD_INT 4
51367: NEG
51368: PUSH
51369: LD_INT 0
51371: PUSH
51372: EMPTY
51373: LIST
51374: LIST
51375: PUSH
51376: LD_INT 4
51378: NEG
51379: PUSH
51380: LD_INT 1
51382: NEG
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 3
51390: NEG
51391: PUSH
51392: LD_INT 0
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 3
51401: NEG
51402: PUSH
51403: LD_INT 1
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 4
51412: NEG
51413: PUSH
51414: LD_INT 1
51416: PUSH
51417: EMPTY
51418: LIST
51419: LIST
51420: PUSH
51421: LD_INT 5
51423: NEG
51424: PUSH
51425: LD_INT 0
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 5
51434: NEG
51435: PUSH
51436: LD_INT 1
51438: NEG
51439: PUSH
51440: EMPTY
51441: LIST
51442: LIST
51443: PUSH
51444: LD_INT 5
51446: NEG
51447: PUSH
51448: LD_INT 2
51450: NEG
51451: PUSH
51452: EMPTY
51453: LIST
51454: LIST
51455: PUSH
51456: LD_INT 3
51458: NEG
51459: PUSH
51460: LD_INT 2
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 3
51469: NEG
51470: PUSH
51471: LD_INT 3
51473: NEG
51474: PUSH
51475: EMPTY
51476: LIST
51477: LIST
51478: PUSH
51479: LD_INT 3
51481: NEG
51482: PUSH
51483: LD_INT 4
51485: NEG
51486: PUSH
51487: EMPTY
51488: LIST
51489: LIST
51490: PUSH
51491: LD_INT 2
51493: NEG
51494: PUSH
51495: LD_INT 3
51497: NEG
51498: PUSH
51499: EMPTY
51500: LIST
51501: LIST
51502: PUSH
51503: LD_INT 2
51505: NEG
51506: PUSH
51507: LD_INT 2
51509: NEG
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 3
51517: NEG
51518: PUSH
51519: LD_INT 2
51521: NEG
51522: PUSH
51523: EMPTY
51524: LIST
51525: LIST
51526: PUSH
51527: LD_INT 4
51529: NEG
51530: PUSH
51531: LD_INT 3
51533: NEG
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 4
51541: NEG
51542: PUSH
51543: LD_INT 4
51545: NEG
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 2
51553: NEG
51554: PUSH
51555: LD_INT 4
51557: NEG
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: LD_INT 4
51565: NEG
51566: PUSH
51567: LD_INT 2
51569: NEG
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 0
51577: PUSH
51578: LD_INT 4
51580: NEG
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 0
51588: PUSH
51589: LD_INT 5
51591: NEG
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 1
51599: PUSH
51600: LD_INT 4
51602: NEG
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 1
51610: PUSH
51611: LD_INT 3
51613: NEG
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 0
51621: PUSH
51622: LD_INT 3
51624: NEG
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 1
51632: NEG
51633: PUSH
51634: LD_INT 4
51636: NEG
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 1
51644: NEG
51645: PUSH
51646: LD_INT 5
51648: NEG
51649: PUSH
51650: EMPTY
51651: LIST
51652: LIST
51653: PUSH
51654: LD_INT 2
51656: PUSH
51657: LD_INT 3
51659: NEG
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 2
51667: NEG
51668: PUSH
51669: LD_INT 5
51671: NEG
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 3
51679: PUSH
51680: LD_INT 0
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 3
51689: PUSH
51690: LD_INT 1
51692: NEG
51693: PUSH
51694: EMPTY
51695: LIST
51696: LIST
51697: PUSH
51698: LD_INT 4
51700: PUSH
51701: LD_INT 0
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 4
51710: PUSH
51711: LD_INT 1
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 3
51720: PUSH
51721: LD_INT 1
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 2
51730: PUSH
51731: LD_INT 0
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 2
51740: PUSH
51741: LD_INT 1
51743: NEG
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: PUSH
51749: LD_INT 2
51751: PUSH
51752: LD_INT 2
51754: NEG
51755: PUSH
51756: EMPTY
51757: LIST
51758: LIST
51759: PUSH
51760: LD_INT 4
51762: PUSH
51763: LD_INT 2
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 4
51772: PUSH
51773: LD_INT 4
51775: PUSH
51776: EMPTY
51777: LIST
51778: LIST
51779: PUSH
51780: LD_INT 4
51782: PUSH
51783: LD_INT 3
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: PUSH
51790: LD_INT 5
51792: PUSH
51793: LD_INT 4
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 5
51802: PUSH
51803: LD_INT 5
51805: PUSH
51806: EMPTY
51807: LIST
51808: LIST
51809: PUSH
51810: LD_INT 4
51812: PUSH
51813: LD_INT 5
51815: PUSH
51816: EMPTY
51817: LIST
51818: LIST
51819: PUSH
51820: LD_INT 3
51822: PUSH
51823: LD_INT 4
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: PUSH
51830: LD_INT 3
51832: PUSH
51833: LD_INT 3
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 5
51842: PUSH
51843: LD_INT 3
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 3
51852: PUSH
51853: LD_INT 5
51855: PUSH
51856: EMPTY
51857: LIST
51858: LIST
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
51907: LD_ADDR_VAR 0 33
51911: PUSH
51912: LD_INT 4
51914: NEG
51915: PUSH
51916: LD_INT 4
51918: NEG
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: PUSH
51924: LD_INT 4
51926: NEG
51927: PUSH
51928: LD_INT 5
51930: NEG
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 3
51938: NEG
51939: PUSH
51940: LD_INT 4
51942: NEG
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 3
51950: NEG
51951: PUSH
51952: LD_INT 3
51954: NEG
51955: PUSH
51956: EMPTY
51957: LIST
51958: LIST
51959: PUSH
51960: LD_INT 4
51962: NEG
51963: PUSH
51964: LD_INT 3
51966: NEG
51967: PUSH
51968: EMPTY
51969: LIST
51970: LIST
51971: PUSH
51972: LD_INT 5
51974: NEG
51975: PUSH
51976: LD_INT 4
51978: NEG
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: PUSH
51984: LD_INT 5
51986: NEG
51987: PUSH
51988: LD_INT 5
51990: NEG
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 3
51998: NEG
51999: PUSH
52000: LD_INT 5
52002: NEG
52003: PUSH
52004: EMPTY
52005: LIST
52006: LIST
52007: PUSH
52008: LD_INT 5
52010: NEG
52011: PUSH
52012: LD_INT 3
52014: NEG
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 0
52022: PUSH
52023: LD_INT 3
52025: NEG
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 0
52033: PUSH
52034: LD_INT 4
52036: NEG
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 1
52044: PUSH
52045: LD_INT 3
52047: NEG
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 1
52055: PUSH
52056: LD_INT 2
52058: NEG
52059: PUSH
52060: EMPTY
52061: LIST
52062: LIST
52063: PUSH
52064: LD_INT 0
52066: PUSH
52067: LD_INT 2
52069: NEG
52070: PUSH
52071: EMPTY
52072: LIST
52073: LIST
52074: PUSH
52075: LD_INT 1
52077: NEG
52078: PUSH
52079: LD_INT 3
52081: NEG
52082: PUSH
52083: EMPTY
52084: LIST
52085: LIST
52086: PUSH
52087: LD_INT 1
52089: NEG
52090: PUSH
52091: LD_INT 4
52093: NEG
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 2
52101: PUSH
52102: LD_INT 2
52104: NEG
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 2
52112: NEG
52113: PUSH
52114: LD_INT 4
52116: NEG
52117: PUSH
52118: EMPTY
52119: LIST
52120: LIST
52121: PUSH
52122: LD_INT 4
52124: PUSH
52125: LD_INT 0
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 4
52134: PUSH
52135: LD_INT 1
52137: NEG
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 5
52145: PUSH
52146: LD_INT 0
52148: PUSH
52149: EMPTY
52150: LIST
52151: LIST
52152: PUSH
52153: LD_INT 5
52155: PUSH
52156: LD_INT 1
52158: PUSH
52159: EMPTY
52160: LIST
52161: LIST
52162: PUSH
52163: LD_INT 4
52165: PUSH
52166: LD_INT 1
52168: PUSH
52169: EMPTY
52170: LIST
52171: LIST
52172: PUSH
52173: LD_INT 3
52175: PUSH
52176: LD_INT 0
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 3
52185: PUSH
52186: LD_INT 1
52188: NEG
52189: PUSH
52190: EMPTY
52191: LIST
52192: LIST
52193: PUSH
52194: LD_INT 3
52196: PUSH
52197: LD_INT 2
52199: NEG
52200: PUSH
52201: EMPTY
52202: LIST
52203: LIST
52204: PUSH
52205: LD_INT 5
52207: PUSH
52208: LD_INT 2
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 3
52217: PUSH
52218: LD_INT 3
52220: PUSH
52221: EMPTY
52222: LIST
52223: LIST
52224: PUSH
52225: LD_INT 3
52227: PUSH
52228: LD_INT 2
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 4
52237: PUSH
52238: LD_INT 3
52240: PUSH
52241: EMPTY
52242: LIST
52243: LIST
52244: PUSH
52245: LD_INT 4
52247: PUSH
52248: LD_INT 4
52250: PUSH
52251: EMPTY
52252: LIST
52253: LIST
52254: PUSH
52255: LD_INT 3
52257: PUSH
52258: LD_INT 4
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 2
52267: PUSH
52268: LD_INT 3
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 2
52277: PUSH
52278: LD_INT 2
52280: PUSH
52281: EMPTY
52282: LIST
52283: LIST
52284: PUSH
52285: LD_INT 4
52287: PUSH
52288: LD_INT 2
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 2
52297: PUSH
52298: LD_INT 4
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: LD_INT 0
52307: PUSH
52308: LD_INT 4
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 0
52317: PUSH
52318: LD_INT 3
52320: PUSH
52321: EMPTY
52322: LIST
52323: LIST
52324: PUSH
52325: LD_INT 1
52327: PUSH
52328: LD_INT 4
52330: PUSH
52331: EMPTY
52332: LIST
52333: LIST
52334: PUSH
52335: LD_INT 1
52337: PUSH
52338: LD_INT 5
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 0
52347: PUSH
52348: LD_INT 5
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 1
52357: NEG
52358: PUSH
52359: LD_INT 4
52361: PUSH
52362: EMPTY
52363: LIST
52364: LIST
52365: PUSH
52366: LD_INT 1
52368: NEG
52369: PUSH
52370: LD_INT 3
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 2
52379: PUSH
52380: LD_INT 5
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 2
52389: NEG
52390: PUSH
52391: LD_INT 3
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: EMPTY
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: LIST
52432: LIST
52433: LIST
52434: LIST
52435: LIST
52436: LIST
52437: LIST
52438: LIST
52439: LIST
52440: LIST
52441: LIST
52442: LIST
52443: LIST
52444: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
52445: LD_ADDR_VAR 0 34
52449: PUSH
52450: LD_INT 0
52452: PUSH
52453: LD_INT 4
52455: NEG
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 0
52463: PUSH
52464: LD_INT 5
52466: NEG
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 1
52474: PUSH
52475: LD_INT 4
52477: NEG
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 1
52485: PUSH
52486: LD_INT 3
52488: NEG
52489: PUSH
52490: EMPTY
52491: LIST
52492: LIST
52493: PUSH
52494: LD_INT 0
52496: PUSH
52497: LD_INT 3
52499: NEG
52500: PUSH
52501: EMPTY
52502: LIST
52503: LIST
52504: PUSH
52505: LD_INT 1
52507: NEG
52508: PUSH
52509: LD_INT 4
52511: NEG
52512: PUSH
52513: EMPTY
52514: LIST
52515: LIST
52516: PUSH
52517: LD_INT 1
52519: NEG
52520: PUSH
52521: LD_INT 5
52523: NEG
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 2
52531: PUSH
52532: LD_INT 3
52534: NEG
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 2
52542: NEG
52543: PUSH
52544: LD_INT 5
52546: NEG
52547: PUSH
52548: EMPTY
52549: LIST
52550: LIST
52551: PUSH
52552: LD_INT 3
52554: PUSH
52555: LD_INT 0
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: PUSH
52562: LD_INT 3
52564: PUSH
52565: LD_INT 1
52567: NEG
52568: PUSH
52569: EMPTY
52570: LIST
52571: LIST
52572: PUSH
52573: LD_INT 4
52575: PUSH
52576: LD_INT 0
52578: PUSH
52579: EMPTY
52580: LIST
52581: LIST
52582: PUSH
52583: LD_INT 4
52585: PUSH
52586: LD_INT 1
52588: PUSH
52589: EMPTY
52590: LIST
52591: LIST
52592: PUSH
52593: LD_INT 3
52595: PUSH
52596: LD_INT 1
52598: PUSH
52599: EMPTY
52600: LIST
52601: LIST
52602: PUSH
52603: LD_INT 2
52605: PUSH
52606: LD_INT 0
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 2
52615: PUSH
52616: LD_INT 1
52618: NEG
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 2
52626: PUSH
52627: LD_INT 2
52629: NEG
52630: PUSH
52631: EMPTY
52632: LIST
52633: LIST
52634: PUSH
52635: LD_INT 4
52637: PUSH
52638: LD_INT 2
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 4
52647: PUSH
52648: LD_INT 4
52650: PUSH
52651: EMPTY
52652: LIST
52653: LIST
52654: PUSH
52655: LD_INT 4
52657: PUSH
52658: LD_INT 3
52660: PUSH
52661: EMPTY
52662: LIST
52663: LIST
52664: PUSH
52665: LD_INT 5
52667: PUSH
52668: LD_INT 4
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 5
52677: PUSH
52678: LD_INT 5
52680: PUSH
52681: EMPTY
52682: LIST
52683: LIST
52684: PUSH
52685: LD_INT 4
52687: PUSH
52688: LD_INT 5
52690: PUSH
52691: EMPTY
52692: LIST
52693: LIST
52694: PUSH
52695: LD_INT 3
52697: PUSH
52698: LD_INT 4
52700: PUSH
52701: EMPTY
52702: LIST
52703: LIST
52704: PUSH
52705: LD_INT 3
52707: PUSH
52708: LD_INT 3
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 5
52717: PUSH
52718: LD_INT 3
52720: PUSH
52721: EMPTY
52722: LIST
52723: LIST
52724: PUSH
52725: LD_INT 3
52727: PUSH
52728: LD_INT 5
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 0
52737: PUSH
52738: LD_INT 3
52740: PUSH
52741: EMPTY
52742: LIST
52743: LIST
52744: PUSH
52745: LD_INT 0
52747: PUSH
52748: LD_INT 2
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 1
52757: PUSH
52758: LD_INT 3
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 1
52767: PUSH
52768: LD_INT 4
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 0
52777: PUSH
52778: LD_INT 4
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 1
52787: NEG
52788: PUSH
52789: LD_INT 3
52791: PUSH
52792: EMPTY
52793: LIST
52794: LIST
52795: PUSH
52796: LD_INT 1
52798: NEG
52799: PUSH
52800: LD_INT 2
52802: PUSH
52803: EMPTY
52804: LIST
52805: LIST
52806: PUSH
52807: LD_INT 2
52809: PUSH
52810: LD_INT 4
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 2
52819: NEG
52820: PUSH
52821: LD_INT 2
52823: PUSH
52824: EMPTY
52825: LIST
52826: LIST
52827: PUSH
52828: LD_INT 4
52830: NEG
52831: PUSH
52832: LD_INT 0
52834: PUSH
52835: EMPTY
52836: LIST
52837: LIST
52838: PUSH
52839: LD_INT 4
52841: NEG
52842: PUSH
52843: LD_INT 1
52845: NEG
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 3
52853: NEG
52854: PUSH
52855: LD_INT 0
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 3
52864: NEG
52865: PUSH
52866: LD_INT 1
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 4
52875: NEG
52876: PUSH
52877: LD_INT 1
52879: PUSH
52880: EMPTY
52881: LIST
52882: LIST
52883: PUSH
52884: LD_INT 5
52886: NEG
52887: PUSH
52888: LD_INT 0
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 5
52897: NEG
52898: PUSH
52899: LD_INT 1
52901: NEG
52902: PUSH
52903: EMPTY
52904: LIST
52905: LIST
52906: PUSH
52907: LD_INT 5
52909: NEG
52910: PUSH
52911: LD_INT 2
52913: NEG
52914: PUSH
52915: EMPTY
52916: LIST
52917: LIST
52918: PUSH
52919: LD_INT 3
52921: NEG
52922: PUSH
52923: LD_INT 2
52925: PUSH
52926: EMPTY
52927: LIST
52928: LIST
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: LIST
52955: LIST
52956: LIST
52957: LIST
52958: LIST
52959: LIST
52960: LIST
52961: LIST
52962: LIST
52963: LIST
52964: LIST
52965: LIST
52966: LIST
52967: LIST
52968: LIST
52969: LIST
52970: LIST
52971: LIST
52972: LIST
52973: LIST
52974: LIST
52975: LIST
52976: ST_TO_ADDR
// end ; end ;
52977: GO 52980
52979: POP
// case btype of b_depot , b_warehouse :
52980: LD_VAR 0 1
52984: PUSH
52985: LD_INT 0
52987: DOUBLE
52988: EQUAL
52989: IFTRUE 52999
52991: LD_INT 1
52993: DOUBLE
52994: EQUAL
52995: IFTRUE 52999
52997: GO 53200
52999: POP
// case nation of nation_american :
53000: LD_VAR 0 5
53004: PUSH
53005: LD_INT 1
53007: DOUBLE
53008: EQUAL
53009: IFTRUE 53013
53011: GO 53069
53013: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
53014: LD_ADDR_VAR 0 9
53018: PUSH
53019: LD_VAR 0 11
53023: PUSH
53024: LD_VAR 0 12
53028: PUSH
53029: LD_VAR 0 13
53033: PUSH
53034: LD_VAR 0 14
53038: PUSH
53039: LD_VAR 0 15
53043: PUSH
53044: LD_VAR 0 16
53048: PUSH
53049: EMPTY
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: PUSH
53057: LD_VAR 0 4
53061: PUSH
53062: LD_INT 1
53064: PLUS
53065: ARRAY
53066: ST_TO_ADDR
53067: GO 53198
53069: LD_INT 2
53071: DOUBLE
53072: EQUAL
53073: IFTRUE 53077
53075: GO 53133
53077: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
53078: LD_ADDR_VAR 0 9
53082: PUSH
53083: LD_VAR 0 17
53087: PUSH
53088: LD_VAR 0 18
53092: PUSH
53093: LD_VAR 0 19
53097: PUSH
53098: LD_VAR 0 20
53102: PUSH
53103: LD_VAR 0 21
53107: PUSH
53108: LD_VAR 0 22
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: LIST
53117: LIST
53118: LIST
53119: LIST
53120: PUSH
53121: LD_VAR 0 4
53125: PUSH
53126: LD_INT 1
53128: PLUS
53129: ARRAY
53130: ST_TO_ADDR
53131: GO 53198
53133: LD_INT 3
53135: DOUBLE
53136: EQUAL
53137: IFTRUE 53141
53139: GO 53197
53141: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
53142: LD_ADDR_VAR 0 9
53146: PUSH
53147: LD_VAR 0 23
53151: PUSH
53152: LD_VAR 0 24
53156: PUSH
53157: LD_VAR 0 25
53161: PUSH
53162: LD_VAR 0 26
53166: PUSH
53167: LD_VAR 0 27
53171: PUSH
53172: LD_VAR 0 28
53176: PUSH
53177: EMPTY
53178: LIST
53179: LIST
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: PUSH
53185: LD_VAR 0 4
53189: PUSH
53190: LD_INT 1
53192: PLUS
53193: ARRAY
53194: ST_TO_ADDR
53195: GO 53198
53197: POP
53198: GO 53753
53200: LD_INT 2
53202: DOUBLE
53203: EQUAL
53204: IFTRUE 53214
53206: LD_INT 3
53208: DOUBLE
53209: EQUAL
53210: IFTRUE 53214
53212: GO 53270
53214: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
53215: LD_ADDR_VAR 0 9
53219: PUSH
53220: LD_VAR 0 29
53224: PUSH
53225: LD_VAR 0 30
53229: PUSH
53230: LD_VAR 0 31
53234: PUSH
53235: LD_VAR 0 32
53239: PUSH
53240: LD_VAR 0 33
53244: PUSH
53245: LD_VAR 0 34
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: LIST
53254: LIST
53255: LIST
53256: LIST
53257: PUSH
53258: LD_VAR 0 4
53262: PUSH
53263: LD_INT 1
53265: PLUS
53266: ARRAY
53267: ST_TO_ADDR
53268: GO 53753
53270: LD_INT 16
53272: DOUBLE
53273: EQUAL
53274: IFTRUE 53332
53276: LD_INT 17
53278: DOUBLE
53279: EQUAL
53280: IFTRUE 53332
53282: LD_INT 18
53284: DOUBLE
53285: EQUAL
53286: IFTRUE 53332
53288: LD_INT 19
53290: DOUBLE
53291: EQUAL
53292: IFTRUE 53332
53294: LD_INT 22
53296: DOUBLE
53297: EQUAL
53298: IFTRUE 53332
53300: LD_INT 20
53302: DOUBLE
53303: EQUAL
53304: IFTRUE 53332
53306: LD_INT 21
53308: DOUBLE
53309: EQUAL
53310: IFTRUE 53332
53312: LD_INT 23
53314: DOUBLE
53315: EQUAL
53316: IFTRUE 53332
53318: LD_INT 24
53320: DOUBLE
53321: EQUAL
53322: IFTRUE 53332
53324: LD_INT 25
53326: DOUBLE
53327: EQUAL
53328: IFTRUE 53332
53330: GO 53388
53332: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
53333: LD_ADDR_VAR 0 9
53337: PUSH
53338: LD_VAR 0 35
53342: PUSH
53343: LD_VAR 0 36
53347: PUSH
53348: LD_VAR 0 37
53352: PUSH
53353: LD_VAR 0 38
53357: PUSH
53358: LD_VAR 0 39
53362: PUSH
53363: LD_VAR 0 40
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: PUSH
53376: LD_VAR 0 4
53380: PUSH
53381: LD_INT 1
53383: PLUS
53384: ARRAY
53385: ST_TO_ADDR
53386: GO 53753
53388: LD_INT 6
53390: DOUBLE
53391: EQUAL
53392: IFTRUE 53444
53394: LD_INT 7
53396: DOUBLE
53397: EQUAL
53398: IFTRUE 53444
53400: LD_INT 8
53402: DOUBLE
53403: EQUAL
53404: IFTRUE 53444
53406: LD_INT 13
53408: DOUBLE
53409: EQUAL
53410: IFTRUE 53444
53412: LD_INT 12
53414: DOUBLE
53415: EQUAL
53416: IFTRUE 53444
53418: LD_INT 15
53420: DOUBLE
53421: EQUAL
53422: IFTRUE 53444
53424: LD_INT 11
53426: DOUBLE
53427: EQUAL
53428: IFTRUE 53444
53430: LD_INT 14
53432: DOUBLE
53433: EQUAL
53434: IFTRUE 53444
53436: LD_INT 10
53438: DOUBLE
53439: EQUAL
53440: IFTRUE 53444
53442: GO 53500
53444: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
53445: LD_ADDR_VAR 0 9
53449: PUSH
53450: LD_VAR 0 41
53454: PUSH
53455: LD_VAR 0 42
53459: PUSH
53460: LD_VAR 0 43
53464: PUSH
53465: LD_VAR 0 44
53469: PUSH
53470: LD_VAR 0 45
53474: PUSH
53475: LD_VAR 0 46
53479: PUSH
53480: EMPTY
53481: LIST
53482: LIST
53483: LIST
53484: LIST
53485: LIST
53486: LIST
53487: PUSH
53488: LD_VAR 0 4
53492: PUSH
53493: LD_INT 1
53495: PLUS
53496: ARRAY
53497: ST_TO_ADDR
53498: GO 53753
53500: LD_INT 36
53502: DOUBLE
53503: EQUAL
53504: IFTRUE 53508
53506: GO 53564
53508: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
53509: LD_ADDR_VAR 0 9
53513: PUSH
53514: LD_VAR 0 47
53518: PUSH
53519: LD_VAR 0 48
53523: PUSH
53524: LD_VAR 0 49
53528: PUSH
53529: LD_VAR 0 50
53533: PUSH
53534: LD_VAR 0 51
53538: PUSH
53539: LD_VAR 0 52
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: LIST
53548: LIST
53549: LIST
53550: LIST
53551: PUSH
53552: LD_VAR 0 4
53556: PUSH
53557: LD_INT 1
53559: PLUS
53560: ARRAY
53561: ST_TO_ADDR
53562: GO 53753
53564: LD_INT 4
53566: DOUBLE
53567: EQUAL
53568: IFTRUE 53590
53570: LD_INT 5
53572: DOUBLE
53573: EQUAL
53574: IFTRUE 53590
53576: LD_INT 34
53578: DOUBLE
53579: EQUAL
53580: IFTRUE 53590
53582: LD_INT 37
53584: DOUBLE
53585: EQUAL
53586: IFTRUE 53590
53588: GO 53646
53590: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
53591: LD_ADDR_VAR 0 9
53595: PUSH
53596: LD_VAR 0 53
53600: PUSH
53601: LD_VAR 0 54
53605: PUSH
53606: LD_VAR 0 55
53610: PUSH
53611: LD_VAR 0 56
53615: PUSH
53616: LD_VAR 0 57
53620: PUSH
53621: LD_VAR 0 58
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: LIST
53630: LIST
53631: LIST
53632: LIST
53633: PUSH
53634: LD_VAR 0 4
53638: PUSH
53639: LD_INT 1
53641: PLUS
53642: ARRAY
53643: ST_TO_ADDR
53644: GO 53753
53646: LD_INT 31
53648: DOUBLE
53649: EQUAL
53650: IFTRUE 53696
53652: LD_INT 32
53654: DOUBLE
53655: EQUAL
53656: IFTRUE 53696
53658: LD_INT 33
53660: DOUBLE
53661: EQUAL
53662: IFTRUE 53696
53664: LD_INT 27
53666: DOUBLE
53667: EQUAL
53668: IFTRUE 53696
53670: LD_INT 26
53672: DOUBLE
53673: EQUAL
53674: IFTRUE 53696
53676: LD_INT 28
53678: DOUBLE
53679: EQUAL
53680: IFTRUE 53696
53682: LD_INT 29
53684: DOUBLE
53685: EQUAL
53686: IFTRUE 53696
53688: LD_INT 30
53690: DOUBLE
53691: EQUAL
53692: IFTRUE 53696
53694: GO 53752
53696: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
53697: LD_ADDR_VAR 0 9
53701: PUSH
53702: LD_VAR 0 59
53706: PUSH
53707: LD_VAR 0 60
53711: PUSH
53712: LD_VAR 0 61
53716: PUSH
53717: LD_VAR 0 62
53721: PUSH
53722: LD_VAR 0 63
53726: PUSH
53727: LD_VAR 0 64
53731: PUSH
53732: EMPTY
53733: LIST
53734: LIST
53735: LIST
53736: LIST
53737: LIST
53738: LIST
53739: PUSH
53740: LD_VAR 0 4
53744: PUSH
53745: LD_INT 1
53747: PLUS
53748: ARRAY
53749: ST_TO_ADDR
53750: GO 53753
53752: POP
// temp_list2 = [ ] ;
53753: LD_ADDR_VAR 0 10
53757: PUSH
53758: EMPTY
53759: ST_TO_ADDR
// for i in temp_list do
53760: LD_ADDR_VAR 0 8
53764: PUSH
53765: LD_VAR 0 9
53769: PUSH
53770: FOR_IN
53771: IFFALSE 53823
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
53773: LD_ADDR_VAR 0 10
53777: PUSH
53778: LD_VAR 0 10
53782: PUSH
53783: LD_VAR 0 8
53787: PUSH
53788: LD_INT 1
53790: ARRAY
53791: PUSH
53792: LD_VAR 0 2
53796: PLUS
53797: PUSH
53798: LD_VAR 0 8
53802: PUSH
53803: LD_INT 2
53805: ARRAY
53806: PUSH
53807: LD_VAR 0 3
53811: PLUS
53812: PUSH
53813: EMPTY
53814: LIST
53815: LIST
53816: PUSH
53817: EMPTY
53818: LIST
53819: ADD
53820: ST_TO_ADDR
53821: GO 53770
53823: POP
53824: POP
// result = temp_list2 ;
53825: LD_ADDR_VAR 0 7
53829: PUSH
53830: LD_VAR 0 10
53834: ST_TO_ADDR
// end ;
53835: LD_VAR 0 7
53839: RET
// export function EnemyInRange ( unit , dist ) ; begin
53840: LD_INT 0
53842: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
53843: LD_ADDR_VAR 0 3
53847: PUSH
53848: LD_VAR 0 1
53852: PPUSH
53853: CALL_OW 255
53857: PPUSH
53858: LD_VAR 0 1
53862: PPUSH
53863: CALL_OW 250
53867: PPUSH
53868: LD_VAR 0 1
53872: PPUSH
53873: CALL_OW 251
53877: PPUSH
53878: LD_VAR 0 2
53882: PPUSH
53883: CALL 27236 0 4
53887: PUSH
53888: LD_INT 4
53890: ARRAY
53891: ST_TO_ADDR
// end ;
53892: LD_VAR 0 3
53896: RET
// export function PlayerSeeMe ( unit ) ; begin
53897: LD_INT 0
53899: PPUSH
// result := See ( your_side , unit ) ;
53900: LD_ADDR_VAR 0 2
53904: PUSH
53905: LD_OWVAR 2
53909: PPUSH
53910: LD_VAR 0 1
53914: PPUSH
53915: CALL_OW 292
53919: ST_TO_ADDR
// end ;
53920: LD_VAR 0 2
53924: RET
// export function ReverseDir ( unit ) ; begin
53925: LD_INT 0
53927: PPUSH
// if not unit then
53928: LD_VAR 0 1
53932: NOT
53933: IFFALSE 53937
// exit ;
53935: GO 53960
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
53937: LD_ADDR_VAR 0 2
53941: PUSH
53942: LD_VAR 0 1
53946: PPUSH
53947: CALL_OW 254
53951: PUSH
53952: LD_INT 3
53954: PLUS
53955: PUSH
53956: LD_INT 6
53958: MOD
53959: ST_TO_ADDR
// end ;
53960: LD_VAR 0 2
53964: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
53965: LD_INT 0
53967: PPUSH
53968: PPUSH
53969: PPUSH
53970: PPUSH
53971: PPUSH
// if not hexes then
53972: LD_VAR 0 2
53976: NOT
53977: IFFALSE 53981
// exit ;
53979: GO 54129
// dist := 9999 ;
53981: LD_ADDR_VAR 0 5
53985: PUSH
53986: LD_INT 9999
53988: ST_TO_ADDR
// for i = 1 to hexes do
53989: LD_ADDR_VAR 0 4
53993: PUSH
53994: DOUBLE
53995: LD_INT 1
53997: DEC
53998: ST_TO_ADDR
53999: LD_VAR 0 2
54003: PUSH
54004: FOR_TO
54005: IFFALSE 54117
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
54007: LD_VAR 0 1
54011: PPUSH
54012: LD_VAR 0 2
54016: PUSH
54017: LD_VAR 0 4
54021: ARRAY
54022: PUSH
54023: LD_INT 1
54025: ARRAY
54026: PPUSH
54027: LD_VAR 0 2
54031: PUSH
54032: LD_VAR 0 4
54036: ARRAY
54037: PUSH
54038: LD_INT 2
54040: ARRAY
54041: PPUSH
54042: CALL_OW 297
54046: PUSH
54047: LD_VAR 0 5
54051: LESS
54052: IFFALSE 54115
// begin hex := hexes [ i ] ;
54054: LD_ADDR_VAR 0 7
54058: PUSH
54059: LD_VAR 0 2
54063: PUSH
54064: LD_VAR 0 4
54068: ARRAY
54069: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54070: LD_ADDR_VAR 0 5
54074: PUSH
54075: LD_VAR 0 1
54079: PPUSH
54080: LD_VAR 0 2
54084: PUSH
54085: LD_VAR 0 4
54089: ARRAY
54090: PUSH
54091: LD_INT 1
54093: ARRAY
54094: PPUSH
54095: LD_VAR 0 2
54099: PUSH
54100: LD_VAR 0 4
54104: ARRAY
54105: PUSH
54106: LD_INT 2
54108: ARRAY
54109: PPUSH
54110: CALL_OW 297
54114: ST_TO_ADDR
// end ; end ;
54115: GO 54004
54117: POP
54118: POP
// result := hex ;
54119: LD_ADDR_VAR 0 3
54123: PUSH
54124: LD_VAR 0 7
54128: ST_TO_ADDR
// end ;
54129: LD_VAR 0 3
54133: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
54134: LD_INT 0
54136: PPUSH
54137: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
54138: LD_VAR 0 1
54142: NOT
54143: PUSH
54144: LD_VAR 0 1
54148: PUSH
54149: LD_INT 21
54151: PUSH
54152: LD_INT 2
54154: PUSH
54155: EMPTY
54156: LIST
54157: LIST
54158: PUSH
54159: LD_INT 23
54161: PUSH
54162: LD_INT 2
54164: PUSH
54165: EMPTY
54166: LIST
54167: LIST
54168: PUSH
54169: EMPTY
54170: LIST
54171: LIST
54172: PPUSH
54173: CALL_OW 69
54177: IN
54178: NOT
54179: OR
54180: IFFALSE 54184
// exit ;
54182: GO 54231
// for i = 1 to 3 do
54184: LD_ADDR_VAR 0 3
54188: PUSH
54189: DOUBLE
54190: LD_INT 1
54192: DEC
54193: ST_TO_ADDR
54194: LD_INT 3
54196: PUSH
54197: FOR_TO
54198: IFFALSE 54229
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
54200: LD_VAR 0 1
54204: PPUSH
54205: CALL_OW 250
54209: PPUSH
54210: LD_VAR 0 1
54214: PPUSH
54215: CALL_OW 251
54219: PPUSH
54220: LD_INT 1
54222: PPUSH
54223: CALL_OW 453
54227: GO 54197
54229: POP
54230: POP
// end ;
54231: LD_VAR 0 2
54235: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
54236: LD_INT 0
54238: PPUSH
54239: PPUSH
54240: PPUSH
54241: PPUSH
54242: PPUSH
54243: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
54244: LD_VAR 0 1
54248: NOT
54249: PUSH
54250: LD_VAR 0 2
54254: NOT
54255: OR
54256: PUSH
54257: LD_VAR 0 1
54261: PPUSH
54262: CALL_OW 314
54266: OR
54267: IFFALSE 54271
// exit ;
54269: GO 54712
// x := GetX ( enemy_unit ) ;
54271: LD_ADDR_VAR 0 7
54275: PUSH
54276: LD_VAR 0 2
54280: PPUSH
54281: CALL_OW 250
54285: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
54286: LD_ADDR_VAR 0 8
54290: PUSH
54291: LD_VAR 0 2
54295: PPUSH
54296: CALL_OW 251
54300: ST_TO_ADDR
// if not x or not y then
54301: LD_VAR 0 7
54305: NOT
54306: PUSH
54307: LD_VAR 0 8
54311: NOT
54312: OR
54313: IFFALSE 54317
// exit ;
54315: GO 54712
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
54317: LD_ADDR_VAR 0 6
54321: PUSH
54322: LD_VAR 0 7
54326: PPUSH
54327: LD_INT 0
54329: PPUSH
54330: LD_INT 4
54332: PPUSH
54333: CALL_OW 272
54337: PUSH
54338: LD_VAR 0 8
54342: PPUSH
54343: LD_INT 0
54345: PPUSH
54346: LD_INT 4
54348: PPUSH
54349: CALL_OW 273
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_VAR 0 7
54362: PPUSH
54363: LD_INT 1
54365: PPUSH
54366: LD_INT 4
54368: PPUSH
54369: CALL_OW 272
54373: PUSH
54374: LD_VAR 0 8
54378: PPUSH
54379: LD_INT 1
54381: PPUSH
54382: LD_INT 4
54384: PPUSH
54385: CALL_OW 273
54389: PUSH
54390: EMPTY
54391: LIST
54392: LIST
54393: PUSH
54394: LD_VAR 0 7
54398: PPUSH
54399: LD_INT 2
54401: PPUSH
54402: LD_INT 4
54404: PPUSH
54405: CALL_OW 272
54409: PUSH
54410: LD_VAR 0 8
54414: PPUSH
54415: LD_INT 2
54417: PPUSH
54418: LD_INT 4
54420: PPUSH
54421: CALL_OW 273
54425: PUSH
54426: EMPTY
54427: LIST
54428: LIST
54429: PUSH
54430: LD_VAR 0 7
54434: PPUSH
54435: LD_INT 3
54437: PPUSH
54438: LD_INT 4
54440: PPUSH
54441: CALL_OW 272
54445: PUSH
54446: LD_VAR 0 8
54450: PPUSH
54451: LD_INT 3
54453: PPUSH
54454: LD_INT 4
54456: PPUSH
54457: CALL_OW 273
54461: PUSH
54462: EMPTY
54463: LIST
54464: LIST
54465: PUSH
54466: LD_VAR 0 7
54470: PPUSH
54471: LD_INT 4
54473: PPUSH
54474: LD_INT 4
54476: PPUSH
54477: CALL_OW 272
54481: PUSH
54482: LD_VAR 0 8
54486: PPUSH
54487: LD_INT 4
54489: PPUSH
54490: LD_INT 4
54492: PPUSH
54493: CALL_OW 273
54497: PUSH
54498: EMPTY
54499: LIST
54500: LIST
54501: PUSH
54502: LD_VAR 0 7
54506: PPUSH
54507: LD_INT 5
54509: PPUSH
54510: LD_INT 4
54512: PPUSH
54513: CALL_OW 272
54517: PUSH
54518: LD_VAR 0 8
54522: PPUSH
54523: LD_INT 5
54525: PPUSH
54526: LD_INT 4
54528: PPUSH
54529: CALL_OW 273
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: EMPTY
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: ST_TO_ADDR
// for i = tmp downto 1 do
54546: LD_ADDR_VAR 0 4
54550: PUSH
54551: DOUBLE
54552: LD_VAR 0 6
54556: INC
54557: ST_TO_ADDR
54558: LD_INT 1
54560: PUSH
54561: FOR_DOWNTO
54562: IFFALSE 54663
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
54564: LD_VAR 0 6
54568: PUSH
54569: LD_VAR 0 4
54573: ARRAY
54574: PUSH
54575: LD_INT 1
54577: ARRAY
54578: PPUSH
54579: LD_VAR 0 6
54583: PUSH
54584: LD_VAR 0 4
54588: ARRAY
54589: PUSH
54590: LD_INT 2
54592: ARRAY
54593: PPUSH
54594: CALL_OW 488
54598: NOT
54599: PUSH
54600: LD_VAR 0 6
54604: PUSH
54605: LD_VAR 0 4
54609: ARRAY
54610: PUSH
54611: LD_INT 1
54613: ARRAY
54614: PPUSH
54615: LD_VAR 0 6
54619: PUSH
54620: LD_VAR 0 4
54624: ARRAY
54625: PUSH
54626: LD_INT 2
54628: ARRAY
54629: PPUSH
54630: CALL_OW 428
54634: PUSH
54635: LD_INT 0
54637: NONEQUAL
54638: OR
54639: IFFALSE 54661
// tmp := Delete ( tmp , i ) ;
54641: LD_ADDR_VAR 0 6
54645: PUSH
54646: LD_VAR 0 6
54650: PPUSH
54651: LD_VAR 0 4
54655: PPUSH
54656: CALL_OW 3
54660: ST_TO_ADDR
54661: GO 54561
54663: POP
54664: POP
// j := GetClosestHex ( unit , tmp ) ;
54665: LD_ADDR_VAR 0 5
54669: PUSH
54670: LD_VAR 0 1
54674: PPUSH
54675: LD_VAR 0 6
54679: PPUSH
54680: CALL 53965 0 2
54684: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
54685: LD_VAR 0 1
54689: PPUSH
54690: LD_VAR 0 5
54694: PUSH
54695: LD_INT 1
54697: ARRAY
54698: PPUSH
54699: LD_VAR 0 5
54703: PUSH
54704: LD_INT 2
54706: ARRAY
54707: PPUSH
54708: CALL_OW 111
// end ;
54712: LD_VAR 0 3
54716: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
54717: LD_INT 0
54719: PPUSH
54720: PPUSH
54721: PPUSH
// uc_side = 0 ;
54722: LD_ADDR_OWVAR 20
54726: PUSH
54727: LD_INT 0
54729: ST_TO_ADDR
// uc_nation = 0 ;
54730: LD_ADDR_OWVAR 21
54734: PUSH
54735: LD_INT 0
54737: ST_TO_ADDR
// InitHc_All ( ) ;
54738: CALL_OW 584
// InitVc ;
54742: CALL_OW 20
// if mastodonts then
54746: LD_VAR 0 6
54750: IFFALSE 54817
// for i = 1 to mastodonts do
54752: LD_ADDR_VAR 0 11
54756: PUSH
54757: DOUBLE
54758: LD_INT 1
54760: DEC
54761: ST_TO_ADDR
54762: LD_VAR 0 6
54766: PUSH
54767: FOR_TO
54768: IFFALSE 54815
// begin vc_chassis := 31 ;
54770: LD_ADDR_OWVAR 37
54774: PUSH
54775: LD_INT 31
54777: ST_TO_ADDR
// vc_control := control_rider ;
54778: LD_ADDR_OWVAR 38
54782: PUSH
54783: LD_INT 4
54785: ST_TO_ADDR
// animal := CreateVehicle ;
54786: LD_ADDR_VAR 0 12
54790: PUSH
54791: CALL_OW 45
54795: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54796: LD_VAR 0 12
54800: PPUSH
54801: LD_VAR 0 8
54805: PPUSH
54806: LD_INT 0
54808: PPUSH
54809: CALL 57005 0 3
// end ;
54813: GO 54767
54815: POP
54816: POP
// if horses then
54817: LD_VAR 0 5
54821: IFFALSE 54888
// for i = 1 to horses do
54823: LD_ADDR_VAR 0 11
54827: PUSH
54828: DOUBLE
54829: LD_INT 1
54831: DEC
54832: ST_TO_ADDR
54833: LD_VAR 0 5
54837: PUSH
54838: FOR_TO
54839: IFFALSE 54886
// begin hc_class := 21 ;
54841: LD_ADDR_OWVAR 28
54845: PUSH
54846: LD_INT 21
54848: ST_TO_ADDR
// hc_gallery :=  ;
54849: LD_ADDR_OWVAR 33
54853: PUSH
54854: LD_STRING 
54856: ST_TO_ADDR
// animal := CreateHuman ;
54857: LD_ADDR_VAR 0 12
54861: PUSH
54862: CALL_OW 44
54866: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54867: LD_VAR 0 12
54871: PPUSH
54872: LD_VAR 0 8
54876: PPUSH
54877: LD_INT 0
54879: PPUSH
54880: CALL 57005 0 3
// end ;
54884: GO 54838
54886: POP
54887: POP
// if birds then
54888: LD_VAR 0 1
54892: IFFALSE 54959
// for i = 1 to birds do
54894: LD_ADDR_VAR 0 11
54898: PUSH
54899: DOUBLE
54900: LD_INT 1
54902: DEC
54903: ST_TO_ADDR
54904: LD_VAR 0 1
54908: PUSH
54909: FOR_TO
54910: IFFALSE 54957
// begin hc_class = 18 ;
54912: LD_ADDR_OWVAR 28
54916: PUSH
54917: LD_INT 18
54919: ST_TO_ADDR
// hc_gallery =  ;
54920: LD_ADDR_OWVAR 33
54924: PUSH
54925: LD_STRING 
54927: ST_TO_ADDR
// animal := CreateHuman ;
54928: LD_ADDR_VAR 0 12
54932: PUSH
54933: CALL_OW 44
54937: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54938: LD_VAR 0 12
54942: PPUSH
54943: LD_VAR 0 8
54947: PPUSH
54948: LD_INT 0
54950: PPUSH
54951: CALL 57005 0 3
// end ;
54955: GO 54909
54957: POP
54958: POP
// if tigers then
54959: LD_VAR 0 2
54963: IFFALSE 55047
// for i = 1 to tigers do
54965: LD_ADDR_VAR 0 11
54969: PUSH
54970: DOUBLE
54971: LD_INT 1
54973: DEC
54974: ST_TO_ADDR
54975: LD_VAR 0 2
54979: PUSH
54980: FOR_TO
54981: IFFALSE 55045
// begin hc_class = class_tiger ;
54983: LD_ADDR_OWVAR 28
54987: PUSH
54988: LD_INT 14
54990: ST_TO_ADDR
// hc_gallery =  ;
54991: LD_ADDR_OWVAR 33
54995: PUSH
54996: LD_STRING 
54998: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
54999: LD_ADDR_OWVAR 35
55003: PUSH
55004: LD_INT 7
55006: NEG
55007: PPUSH
55008: LD_INT 7
55010: PPUSH
55011: CALL_OW 12
55015: ST_TO_ADDR
// animal := CreateHuman ;
55016: LD_ADDR_VAR 0 12
55020: PUSH
55021: CALL_OW 44
55025: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55026: LD_VAR 0 12
55030: PPUSH
55031: LD_VAR 0 8
55035: PPUSH
55036: LD_INT 0
55038: PPUSH
55039: CALL 57005 0 3
// end ;
55043: GO 54980
55045: POP
55046: POP
// if apemans then
55047: LD_VAR 0 3
55051: IFFALSE 55174
// for i = 1 to apemans do
55053: LD_ADDR_VAR 0 11
55057: PUSH
55058: DOUBLE
55059: LD_INT 1
55061: DEC
55062: ST_TO_ADDR
55063: LD_VAR 0 3
55067: PUSH
55068: FOR_TO
55069: IFFALSE 55172
// begin hc_class = class_apeman ;
55071: LD_ADDR_OWVAR 28
55075: PUSH
55076: LD_INT 12
55078: ST_TO_ADDR
// hc_gallery =  ;
55079: LD_ADDR_OWVAR 33
55083: PUSH
55084: LD_STRING 
55086: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
55087: LD_ADDR_OWVAR 35
55091: PUSH
55092: LD_INT 2
55094: NEG
55095: PPUSH
55096: LD_INT 2
55098: PPUSH
55099: CALL_OW 12
55103: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
55104: LD_ADDR_OWVAR 31
55108: PUSH
55109: LD_INT 1
55111: PPUSH
55112: LD_INT 3
55114: PPUSH
55115: CALL_OW 12
55119: PUSH
55120: LD_INT 1
55122: PPUSH
55123: LD_INT 3
55125: PPUSH
55126: CALL_OW 12
55130: PUSH
55131: LD_INT 0
55133: PUSH
55134: LD_INT 0
55136: PUSH
55137: EMPTY
55138: LIST
55139: LIST
55140: LIST
55141: LIST
55142: ST_TO_ADDR
// animal := CreateHuman ;
55143: LD_ADDR_VAR 0 12
55147: PUSH
55148: CALL_OW 44
55152: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55153: LD_VAR 0 12
55157: PPUSH
55158: LD_VAR 0 8
55162: PPUSH
55163: LD_INT 0
55165: PPUSH
55166: CALL 57005 0 3
// end ;
55170: GO 55068
55172: POP
55173: POP
// if enchidnas then
55174: LD_VAR 0 4
55178: IFFALSE 55245
// for i = 1 to enchidnas do
55180: LD_ADDR_VAR 0 11
55184: PUSH
55185: DOUBLE
55186: LD_INT 1
55188: DEC
55189: ST_TO_ADDR
55190: LD_VAR 0 4
55194: PUSH
55195: FOR_TO
55196: IFFALSE 55243
// begin hc_class = 13 ;
55198: LD_ADDR_OWVAR 28
55202: PUSH
55203: LD_INT 13
55205: ST_TO_ADDR
// hc_gallery =  ;
55206: LD_ADDR_OWVAR 33
55210: PUSH
55211: LD_STRING 
55213: ST_TO_ADDR
// animal := CreateHuman ;
55214: LD_ADDR_VAR 0 12
55218: PUSH
55219: CALL_OW 44
55223: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55224: LD_VAR 0 12
55228: PPUSH
55229: LD_VAR 0 8
55233: PPUSH
55234: LD_INT 0
55236: PPUSH
55237: CALL 57005 0 3
// end ;
55241: GO 55195
55243: POP
55244: POP
// if fishes then
55245: LD_VAR 0 7
55249: IFFALSE 55316
// for i = 1 to fishes do
55251: LD_ADDR_VAR 0 11
55255: PUSH
55256: DOUBLE
55257: LD_INT 1
55259: DEC
55260: ST_TO_ADDR
55261: LD_VAR 0 7
55265: PUSH
55266: FOR_TO
55267: IFFALSE 55314
// begin hc_class = 20 ;
55269: LD_ADDR_OWVAR 28
55273: PUSH
55274: LD_INT 20
55276: ST_TO_ADDR
// hc_gallery =  ;
55277: LD_ADDR_OWVAR 33
55281: PUSH
55282: LD_STRING 
55284: ST_TO_ADDR
// animal := CreateHuman ;
55285: LD_ADDR_VAR 0 12
55289: PUSH
55290: CALL_OW 44
55294: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
55295: LD_VAR 0 12
55299: PPUSH
55300: LD_VAR 0 9
55304: PPUSH
55305: LD_INT 0
55307: PPUSH
55308: CALL 57005 0 3
// end ;
55312: GO 55266
55314: POP
55315: POP
// end ;
55316: LD_VAR 0 10
55320: RET
// export function WantHeal ( sci , unit ) ; begin
55321: LD_INT 0
55323: PPUSH
// if GetTaskList ( sci ) > 0 then
55324: LD_VAR 0 1
55328: PPUSH
55329: CALL_OW 437
55333: PUSH
55334: LD_INT 0
55336: GREATER
55337: IFFALSE 55407
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
55339: LD_VAR 0 1
55343: PPUSH
55344: CALL_OW 437
55348: PUSH
55349: LD_INT 1
55351: ARRAY
55352: PUSH
55353: LD_INT 1
55355: ARRAY
55356: PUSH
55357: LD_STRING l
55359: EQUAL
55360: PUSH
55361: LD_VAR 0 1
55365: PPUSH
55366: CALL_OW 437
55370: PUSH
55371: LD_INT 1
55373: ARRAY
55374: PUSH
55375: LD_INT 4
55377: ARRAY
55378: PUSH
55379: LD_VAR 0 2
55383: EQUAL
55384: AND
55385: IFFALSE 55397
// result := true else
55387: LD_ADDR_VAR 0 3
55391: PUSH
55392: LD_INT 1
55394: ST_TO_ADDR
55395: GO 55405
// result := false ;
55397: LD_ADDR_VAR 0 3
55401: PUSH
55402: LD_INT 0
55404: ST_TO_ADDR
// end else
55405: GO 55415
// result := false ;
55407: LD_ADDR_VAR 0 3
55411: PUSH
55412: LD_INT 0
55414: ST_TO_ADDR
// end ;
55415: LD_VAR 0 3
55419: RET
// export function HealTarget ( sci ) ; begin
55420: LD_INT 0
55422: PPUSH
// if not sci then
55423: LD_VAR 0 1
55427: NOT
55428: IFFALSE 55432
// exit ;
55430: GO 55497
// result := 0 ;
55432: LD_ADDR_VAR 0 2
55436: PUSH
55437: LD_INT 0
55439: ST_TO_ADDR
// if GetTaskList ( sci ) then
55440: LD_VAR 0 1
55444: PPUSH
55445: CALL_OW 437
55449: IFFALSE 55497
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
55451: LD_VAR 0 1
55455: PPUSH
55456: CALL_OW 437
55460: PUSH
55461: LD_INT 1
55463: ARRAY
55464: PUSH
55465: LD_INT 1
55467: ARRAY
55468: PUSH
55469: LD_STRING l
55471: EQUAL
55472: IFFALSE 55497
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
55474: LD_ADDR_VAR 0 2
55478: PUSH
55479: LD_VAR 0 1
55483: PPUSH
55484: CALL_OW 437
55488: PUSH
55489: LD_INT 1
55491: ARRAY
55492: PUSH
55493: LD_INT 4
55495: ARRAY
55496: ST_TO_ADDR
// end ;
55497: LD_VAR 0 2
55501: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
55502: LD_INT 0
55504: PPUSH
55505: PPUSH
55506: PPUSH
55507: PPUSH
// if not base_units then
55508: LD_VAR 0 1
55512: NOT
55513: IFFALSE 55517
// exit ;
55515: GO 55604
// result := false ;
55517: LD_ADDR_VAR 0 2
55521: PUSH
55522: LD_INT 0
55524: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
55525: LD_ADDR_VAR 0 5
55529: PUSH
55530: LD_VAR 0 1
55534: PPUSH
55535: LD_INT 21
55537: PUSH
55538: LD_INT 3
55540: PUSH
55541: EMPTY
55542: LIST
55543: LIST
55544: PPUSH
55545: CALL_OW 72
55549: ST_TO_ADDR
// if not tmp then
55550: LD_VAR 0 5
55554: NOT
55555: IFFALSE 55559
// exit ;
55557: GO 55604
// for i in tmp do
55559: LD_ADDR_VAR 0 3
55563: PUSH
55564: LD_VAR 0 5
55568: PUSH
55569: FOR_IN
55570: IFFALSE 55602
// begin result := EnemyInRange ( i , 22 ) ;
55572: LD_ADDR_VAR 0 2
55576: PUSH
55577: LD_VAR 0 3
55581: PPUSH
55582: LD_INT 22
55584: PPUSH
55585: CALL 53840 0 2
55589: ST_TO_ADDR
// if result then
55590: LD_VAR 0 2
55594: IFFALSE 55600
// exit ;
55596: POP
55597: POP
55598: GO 55604
// end ;
55600: GO 55569
55602: POP
55603: POP
// end ;
55604: LD_VAR 0 2
55608: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
55609: LD_INT 0
55611: PPUSH
55612: PPUSH
// if not units then
55613: LD_VAR 0 1
55617: NOT
55618: IFFALSE 55622
// exit ;
55620: GO 55692
// result := [ ] ;
55622: LD_ADDR_VAR 0 3
55626: PUSH
55627: EMPTY
55628: ST_TO_ADDR
// for i in units do
55629: LD_ADDR_VAR 0 4
55633: PUSH
55634: LD_VAR 0 1
55638: PUSH
55639: FOR_IN
55640: IFFALSE 55690
// if GetTag ( i ) = tag then
55642: LD_VAR 0 4
55646: PPUSH
55647: CALL_OW 110
55651: PUSH
55652: LD_VAR 0 2
55656: EQUAL
55657: IFFALSE 55688
// result := Replace ( result , result + 1 , i ) ;
55659: LD_ADDR_VAR 0 3
55663: PUSH
55664: LD_VAR 0 3
55668: PPUSH
55669: LD_VAR 0 3
55673: PUSH
55674: LD_INT 1
55676: PLUS
55677: PPUSH
55678: LD_VAR 0 4
55682: PPUSH
55683: CALL_OW 1
55687: ST_TO_ADDR
55688: GO 55639
55690: POP
55691: POP
// end ;
55692: LD_VAR 0 3
55696: RET
// export function IsDriver ( un ) ; begin
55697: LD_INT 0
55699: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
55700: LD_ADDR_VAR 0 2
55704: PUSH
55705: LD_VAR 0 1
55709: PUSH
55710: LD_INT 55
55712: PUSH
55713: EMPTY
55714: LIST
55715: PPUSH
55716: CALL_OW 69
55720: IN
55721: ST_TO_ADDR
// end ;
55722: LD_VAR 0 2
55726: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
55727: LD_INT 0
55729: PPUSH
55730: PPUSH
// list := [ ] ;
55731: LD_ADDR_VAR 0 5
55735: PUSH
55736: EMPTY
55737: ST_TO_ADDR
// case d of 0 :
55738: LD_VAR 0 3
55742: PUSH
55743: LD_INT 0
55745: DOUBLE
55746: EQUAL
55747: IFTRUE 55751
55749: GO 55884
55751: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
55752: LD_ADDR_VAR 0 5
55756: PUSH
55757: LD_VAR 0 1
55761: PUSH
55762: LD_INT 4
55764: MINUS
55765: PUSH
55766: LD_VAR 0 2
55770: PUSH
55771: LD_INT 4
55773: MINUS
55774: PUSH
55775: LD_INT 2
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: LIST
55782: PUSH
55783: LD_VAR 0 1
55787: PUSH
55788: LD_INT 3
55790: MINUS
55791: PUSH
55792: LD_VAR 0 2
55796: PUSH
55797: LD_INT 1
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: LIST
55804: PUSH
55805: LD_VAR 0 1
55809: PUSH
55810: LD_INT 4
55812: PLUS
55813: PUSH
55814: LD_VAR 0 2
55818: PUSH
55819: LD_INT 4
55821: PUSH
55822: EMPTY
55823: LIST
55824: LIST
55825: LIST
55826: PUSH
55827: LD_VAR 0 1
55831: PUSH
55832: LD_INT 3
55834: PLUS
55835: PUSH
55836: LD_VAR 0 2
55840: PUSH
55841: LD_INT 3
55843: PLUS
55844: PUSH
55845: LD_INT 5
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: LIST
55852: PUSH
55853: LD_VAR 0 1
55857: PUSH
55858: LD_VAR 0 2
55862: PUSH
55863: LD_INT 4
55865: PLUS
55866: PUSH
55867: LD_INT 0
55869: PUSH
55870: EMPTY
55871: LIST
55872: LIST
55873: LIST
55874: PUSH
55875: EMPTY
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: ST_TO_ADDR
// end ; 1 :
55882: GO 56582
55884: LD_INT 1
55886: DOUBLE
55887: EQUAL
55888: IFTRUE 55892
55890: GO 56025
55892: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
55893: LD_ADDR_VAR 0 5
55897: PUSH
55898: LD_VAR 0 1
55902: PUSH
55903: LD_VAR 0 2
55907: PUSH
55908: LD_INT 4
55910: MINUS
55911: PUSH
55912: LD_INT 3
55914: PUSH
55915: EMPTY
55916: LIST
55917: LIST
55918: LIST
55919: PUSH
55920: LD_VAR 0 1
55924: PUSH
55925: LD_INT 3
55927: MINUS
55928: PUSH
55929: LD_VAR 0 2
55933: PUSH
55934: LD_INT 3
55936: MINUS
55937: PUSH
55938: LD_INT 2
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: LIST
55945: PUSH
55946: LD_VAR 0 1
55950: PUSH
55951: LD_INT 4
55953: MINUS
55954: PUSH
55955: LD_VAR 0 2
55959: PUSH
55960: LD_INT 1
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: LIST
55967: PUSH
55968: LD_VAR 0 1
55972: PUSH
55973: LD_VAR 0 2
55977: PUSH
55978: LD_INT 3
55980: PLUS
55981: PUSH
55982: LD_INT 0
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: LIST
55989: PUSH
55990: LD_VAR 0 1
55994: PUSH
55995: LD_INT 4
55997: PLUS
55998: PUSH
55999: LD_VAR 0 2
56003: PUSH
56004: LD_INT 4
56006: PLUS
56007: PUSH
56008: LD_INT 5
56010: PUSH
56011: EMPTY
56012: LIST
56013: LIST
56014: LIST
56015: PUSH
56016: EMPTY
56017: LIST
56018: LIST
56019: LIST
56020: LIST
56021: LIST
56022: ST_TO_ADDR
// end ; 2 :
56023: GO 56582
56025: LD_INT 2
56027: DOUBLE
56028: EQUAL
56029: IFTRUE 56033
56031: GO 56162
56033: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
56034: LD_ADDR_VAR 0 5
56038: PUSH
56039: LD_VAR 0 1
56043: PUSH
56044: LD_VAR 0 2
56048: PUSH
56049: LD_INT 3
56051: MINUS
56052: PUSH
56053: LD_INT 3
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: LIST
56060: PUSH
56061: LD_VAR 0 1
56065: PUSH
56066: LD_INT 4
56068: PLUS
56069: PUSH
56070: LD_VAR 0 2
56074: PUSH
56075: LD_INT 4
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: LIST
56082: PUSH
56083: LD_VAR 0 1
56087: PUSH
56088: LD_VAR 0 2
56092: PUSH
56093: LD_INT 4
56095: PLUS
56096: PUSH
56097: LD_INT 0
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: LIST
56104: PUSH
56105: LD_VAR 0 1
56109: PUSH
56110: LD_INT 3
56112: MINUS
56113: PUSH
56114: LD_VAR 0 2
56118: PUSH
56119: LD_INT 1
56121: PUSH
56122: EMPTY
56123: LIST
56124: LIST
56125: LIST
56126: PUSH
56127: LD_VAR 0 1
56131: PUSH
56132: LD_INT 4
56134: MINUS
56135: PUSH
56136: LD_VAR 0 2
56140: PUSH
56141: LD_INT 4
56143: MINUS
56144: PUSH
56145: LD_INT 2
56147: PUSH
56148: EMPTY
56149: LIST
56150: LIST
56151: LIST
56152: PUSH
56153: EMPTY
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: ST_TO_ADDR
// end ; 3 :
56160: GO 56582
56162: LD_INT 3
56164: DOUBLE
56165: EQUAL
56166: IFTRUE 56170
56168: GO 56303
56170: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
56171: LD_ADDR_VAR 0 5
56175: PUSH
56176: LD_VAR 0 1
56180: PUSH
56181: LD_INT 3
56183: PLUS
56184: PUSH
56185: LD_VAR 0 2
56189: PUSH
56190: LD_INT 4
56192: PUSH
56193: EMPTY
56194: LIST
56195: LIST
56196: LIST
56197: PUSH
56198: LD_VAR 0 1
56202: PUSH
56203: LD_INT 4
56205: PLUS
56206: PUSH
56207: LD_VAR 0 2
56211: PUSH
56212: LD_INT 4
56214: PLUS
56215: PUSH
56216: LD_INT 5
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: LIST
56223: PUSH
56224: LD_VAR 0 1
56228: PUSH
56229: LD_INT 4
56231: MINUS
56232: PUSH
56233: LD_VAR 0 2
56237: PUSH
56238: LD_INT 1
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: LIST
56245: PUSH
56246: LD_VAR 0 1
56250: PUSH
56251: LD_VAR 0 2
56255: PUSH
56256: LD_INT 4
56258: MINUS
56259: PUSH
56260: LD_INT 3
56262: PUSH
56263: EMPTY
56264: LIST
56265: LIST
56266: LIST
56267: PUSH
56268: LD_VAR 0 1
56272: PUSH
56273: LD_INT 3
56275: MINUS
56276: PUSH
56277: LD_VAR 0 2
56281: PUSH
56282: LD_INT 3
56284: MINUS
56285: PUSH
56286: LD_INT 2
56288: PUSH
56289: EMPTY
56290: LIST
56291: LIST
56292: LIST
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: LIST
56300: ST_TO_ADDR
// end ; 4 :
56301: GO 56582
56303: LD_INT 4
56305: DOUBLE
56306: EQUAL
56307: IFTRUE 56311
56309: GO 56444
56311: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
56312: LD_ADDR_VAR 0 5
56316: PUSH
56317: LD_VAR 0 1
56321: PUSH
56322: LD_VAR 0 2
56326: PUSH
56327: LD_INT 4
56329: PLUS
56330: PUSH
56331: LD_INT 0
56333: PUSH
56334: EMPTY
56335: LIST
56336: LIST
56337: LIST
56338: PUSH
56339: LD_VAR 0 1
56343: PUSH
56344: LD_INT 3
56346: PLUS
56347: PUSH
56348: LD_VAR 0 2
56352: PUSH
56353: LD_INT 3
56355: PLUS
56356: PUSH
56357: LD_INT 5
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: LIST
56364: PUSH
56365: LD_VAR 0 1
56369: PUSH
56370: LD_INT 4
56372: PLUS
56373: PUSH
56374: LD_VAR 0 2
56378: PUSH
56379: LD_INT 4
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: LIST
56386: PUSH
56387: LD_VAR 0 1
56391: PUSH
56392: LD_VAR 0 2
56396: PUSH
56397: LD_INT 3
56399: MINUS
56400: PUSH
56401: LD_INT 3
56403: PUSH
56404: EMPTY
56405: LIST
56406: LIST
56407: LIST
56408: PUSH
56409: LD_VAR 0 1
56413: PUSH
56414: LD_INT 4
56416: MINUS
56417: PUSH
56418: LD_VAR 0 2
56422: PUSH
56423: LD_INT 4
56425: MINUS
56426: PUSH
56427: LD_INT 2
56429: PUSH
56430: EMPTY
56431: LIST
56432: LIST
56433: LIST
56434: PUSH
56435: EMPTY
56436: LIST
56437: LIST
56438: LIST
56439: LIST
56440: LIST
56441: ST_TO_ADDR
// end ; 5 :
56442: GO 56582
56444: LD_INT 5
56446: DOUBLE
56447: EQUAL
56448: IFTRUE 56452
56450: GO 56581
56452: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
56453: LD_ADDR_VAR 0 5
56457: PUSH
56458: LD_VAR 0 1
56462: PUSH
56463: LD_INT 4
56465: MINUS
56466: PUSH
56467: LD_VAR 0 2
56471: PUSH
56472: LD_INT 1
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: LIST
56479: PUSH
56480: LD_VAR 0 1
56484: PUSH
56485: LD_VAR 0 2
56489: PUSH
56490: LD_INT 4
56492: MINUS
56493: PUSH
56494: LD_INT 3
56496: PUSH
56497: EMPTY
56498: LIST
56499: LIST
56500: LIST
56501: PUSH
56502: LD_VAR 0 1
56506: PUSH
56507: LD_INT 4
56509: PLUS
56510: PUSH
56511: LD_VAR 0 2
56515: PUSH
56516: LD_INT 4
56518: PLUS
56519: PUSH
56520: LD_INT 5
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: LIST
56527: PUSH
56528: LD_VAR 0 1
56532: PUSH
56533: LD_INT 3
56535: PLUS
56536: PUSH
56537: LD_VAR 0 2
56541: PUSH
56542: LD_INT 4
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: LIST
56549: PUSH
56550: LD_VAR 0 1
56554: PUSH
56555: LD_VAR 0 2
56559: PUSH
56560: LD_INT 3
56562: PLUS
56563: PUSH
56564: LD_INT 0
56566: PUSH
56567: EMPTY
56568: LIST
56569: LIST
56570: LIST
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: LIST
56576: LIST
56577: LIST
56578: ST_TO_ADDR
// end ; end ;
56579: GO 56582
56581: POP
// result := list ;
56582: LD_ADDR_VAR 0 4
56586: PUSH
56587: LD_VAR 0 5
56591: ST_TO_ADDR
// end ;
56592: LD_VAR 0 4
56596: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
56597: LD_INT 0
56599: PPUSH
56600: PPUSH
56601: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
56602: LD_VAR 0 1
56606: NOT
56607: PUSH
56608: LD_VAR 0 2
56612: PUSH
56613: LD_INT 1
56615: PUSH
56616: LD_INT 2
56618: PUSH
56619: LD_INT 3
56621: PUSH
56622: LD_INT 4
56624: PUSH
56625: EMPTY
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: IN
56631: NOT
56632: OR
56633: IFFALSE 56637
// exit ;
56635: GO 56729
// tmp := [ ] ;
56637: LD_ADDR_VAR 0 5
56641: PUSH
56642: EMPTY
56643: ST_TO_ADDR
// for i in units do
56644: LD_ADDR_VAR 0 4
56648: PUSH
56649: LD_VAR 0 1
56653: PUSH
56654: FOR_IN
56655: IFFALSE 56698
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
56657: LD_ADDR_VAR 0 5
56661: PUSH
56662: LD_VAR 0 5
56666: PPUSH
56667: LD_VAR 0 5
56671: PUSH
56672: LD_INT 1
56674: PLUS
56675: PPUSH
56676: LD_VAR 0 4
56680: PPUSH
56681: LD_VAR 0 2
56685: PPUSH
56686: CALL_OW 259
56690: PPUSH
56691: CALL_OW 2
56695: ST_TO_ADDR
56696: GO 56654
56698: POP
56699: POP
// if not tmp then
56700: LD_VAR 0 5
56704: NOT
56705: IFFALSE 56709
// exit ;
56707: GO 56729
// result := SortListByListDesc ( units , tmp ) ;
56709: LD_ADDR_VAR 0 3
56713: PUSH
56714: LD_VAR 0 1
56718: PPUSH
56719: LD_VAR 0 5
56723: PPUSH
56724: CALL_OW 77
56728: ST_TO_ADDR
// end ;
56729: LD_VAR 0 3
56733: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
56734: LD_INT 0
56736: PPUSH
56737: PPUSH
56738: PPUSH
// result := false ;
56739: LD_ADDR_VAR 0 3
56743: PUSH
56744: LD_INT 0
56746: ST_TO_ADDR
// x := GetX ( building ) ;
56747: LD_ADDR_VAR 0 4
56751: PUSH
56752: LD_VAR 0 2
56756: PPUSH
56757: CALL_OW 250
56761: ST_TO_ADDR
// y := GetY ( building ) ;
56762: LD_ADDR_VAR 0 5
56766: PUSH
56767: LD_VAR 0 2
56771: PPUSH
56772: CALL_OW 251
56776: ST_TO_ADDR
// if not building or not x or not y then
56777: LD_VAR 0 2
56781: NOT
56782: PUSH
56783: LD_VAR 0 4
56787: NOT
56788: OR
56789: PUSH
56790: LD_VAR 0 5
56794: NOT
56795: OR
56796: IFFALSE 56800
// exit ;
56798: GO 56892
// if GetTaskList ( unit ) then
56800: LD_VAR 0 1
56804: PPUSH
56805: CALL_OW 437
56809: IFFALSE 56892
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56811: LD_STRING e
56813: PUSH
56814: LD_VAR 0 1
56818: PPUSH
56819: CALL_OW 437
56823: PUSH
56824: LD_INT 1
56826: ARRAY
56827: PUSH
56828: LD_INT 1
56830: ARRAY
56831: EQUAL
56832: PUSH
56833: LD_VAR 0 4
56837: PUSH
56838: LD_VAR 0 1
56842: PPUSH
56843: CALL_OW 437
56847: PUSH
56848: LD_INT 1
56850: ARRAY
56851: PUSH
56852: LD_INT 2
56854: ARRAY
56855: EQUAL
56856: AND
56857: PUSH
56858: LD_VAR 0 5
56862: PUSH
56863: LD_VAR 0 1
56867: PPUSH
56868: CALL_OW 437
56872: PUSH
56873: LD_INT 1
56875: ARRAY
56876: PUSH
56877: LD_INT 3
56879: ARRAY
56880: EQUAL
56881: AND
56882: IFFALSE 56892
// result := true end ;
56884: LD_ADDR_VAR 0 3
56888: PUSH
56889: LD_INT 1
56891: ST_TO_ADDR
// end ;
56892: LD_VAR 0 3
56896: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
56897: LD_INT 0
56899: PPUSH
// result := false ;
56900: LD_ADDR_VAR 0 4
56904: PUSH
56905: LD_INT 0
56907: ST_TO_ADDR
// if GetTaskList ( unit ) then
56908: LD_VAR 0 1
56912: PPUSH
56913: CALL_OW 437
56917: IFFALSE 57000
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56919: LD_STRING M
56921: PUSH
56922: LD_VAR 0 1
56926: PPUSH
56927: CALL_OW 437
56931: PUSH
56932: LD_INT 1
56934: ARRAY
56935: PUSH
56936: LD_INT 1
56938: ARRAY
56939: EQUAL
56940: PUSH
56941: LD_VAR 0 2
56945: PUSH
56946: LD_VAR 0 1
56950: PPUSH
56951: CALL_OW 437
56955: PUSH
56956: LD_INT 1
56958: ARRAY
56959: PUSH
56960: LD_INT 2
56962: ARRAY
56963: EQUAL
56964: AND
56965: PUSH
56966: LD_VAR 0 3
56970: PUSH
56971: LD_VAR 0 1
56975: PPUSH
56976: CALL_OW 437
56980: PUSH
56981: LD_INT 1
56983: ARRAY
56984: PUSH
56985: LD_INT 3
56987: ARRAY
56988: EQUAL
56989: AND
56990: IFFALSE 57000
// result := true ;
56992: LD_ADDR_VAR 0 4
56996: PUSH
56997: LD_INT 1
56999: ST_TO_ADDR
// end ; end ;
57000: LD_VAR 0 4
57004: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
57005: LD_INT 0
57007: PPUSH
57008: PPUSH
57009: PPUSH
57010: PPUSH
// if not unit or not area then
57011: LD_VAR 0 1
57015: NOT
57016: PUSH
57017: LD_VAR 0 2
57021: NOT
57022: OR
57023: IFFALSE 57027
// exit ;
57025: GO 57191
// tmp := AreaToList ( area , i ) ;
57027: LD_ADDR_VAR 0 6
57031: PUSH
57032: LD_VAR 0 2
57036: PPUSH
57037: LD_VAR 0 5
57041: PPUSH
57042: CALL_OW 517
57046: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
57047: LD_ADDR_VAR 0 5
57051: PUSH
57052: DOUBLE
57053: LD_INT 1
57055: DEC
57056: ST_TO_ADDR
57057: LD_VAR 0 6
57061: PUSH
57062: LD_INT 1
57064: ARRAY
57065: PUSH
57066: FOR_TO
57067: IFFALSE 57189
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
57069: LD_ADDR_VAR 0 7
57073: PUSH
57074: LD_VAR 0 6
57078: PUSH
57079: LD_INT 1
57081: ARRAY
57082: PUSH
57083: LD_VAR 0 5
57087: ARRAY
57088: PUSH
57089: LD_VAR 0 6
57093: PUSH
57094: LD_INT 2
57096: ARRAY
57097: PUSH
57098: LD_VAR 0 5
57102: ARRAY
57103: PUSH
57104: EMPTY
57105: LIST
57106: LIST
57107: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
57108: LD_VAR 0 7
57112: PUSH
57113: LD_INT 1
57115: ARRAY
57116: PPUSH
57117: LD_VAR 0 7
57121: PUSH
57122: LD_INT 2
57124: ARRAY
57125: PPUSH
57126: CALL_OW 428
57130: PUSH
57131: LD_INT 0
57133: EQUAL
57134: IFFALSE 57187
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
57136: LD_VAR 0 1
57140: PPUSH
57141: LD_VAR 0 7
57145: PUSH
57146: LD_INT 1
57148: ARRAY
57149: PPUSH
57150: LD_VAR 0 7
57154: PUSH
57155: LD_INT 2
57157: ARRAY
57158: PPUSH
57159: LD_VAR 0 3
57163: PPUSH
57164: CALL_OW 48
// result := IsPlaced ( unit ) ;
57168: LD_ADDR_VAR 0 4
57172: PUSH
57173: LD_VAR 0 1
57177: PPUSH
57178: CALL_OW 305
57182: ST_TO_ADDR
// exit ;
57183: POP
57184: POP
57185: GO 57191
// end ; end ;
57187: GO 57066
57189: POP
57190: POP
// end ;
57191: LD_VAR 0 4
57195: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
57196: LD_INT 0
57198: PPUSH
57199: PPUSH
57200: PPUSH
// if not side or side > 8 then
57201: LD_VAR 0 1
57205: NOT
57206: PUSH
57207: LD_VAR 0 1
57211: PUSH
57212: LD_INT 8
57214: GREATER
57215: OR
57216: IFFALSE 57220
// exit ;
57218: GO 57407
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
57220: LD_ADDR_VAR 0 4
57224: PUSH
57225: LD_INT 22
57227: PUSH
57228: LD_VAR 0 1
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PUSH
57237: LD_INT 21
57239: PUSH
57240: LD_INT 3
57242: PUSH
57243: EMPTY
57244: LIST
57245: LIST
57246: PUSH
57247: EMPTY
57248: LIST
57249: LIST
57250: PPUSH
57251: CALL_OW 69
57255: ST_TO_ADDR
// if not tmp then
57256: LD_VAR 0 4
57260: NOT
57261: IFFALSE 57265
// exit ;
57263: GO 57407
// enable_addtolog := true ;
57265: LD_ADDR_OWVAR 81
57269: PUSH
57270: LD_INT 1
57272: ST_TO_ADDR
// AddToLog ( [ ) ;
57273: LD_STRING [
57275: PPUSH
57276: CALL_OW 561
// for i in tmp do
57280: LD_ADDR_VAR 0 3
57284: PUSH
57285: LD_VAR 0 4
57289: PUSH
57290: FOR_IN
57291: IFFALSE 57398
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
57293: LD_STRING [
57295: PUSH
57296: LD_VAR 0 3
57300: PPUSH
57301: CALL_OW 266
57305: STR
57306: PUSH
57307: LD_STRING , 
57309: STR
57310: PUSH
57311: LD_VAR 0 3
57315: PPUSH
57316: CALL_OW 250
57320: STR
57321: PUSH
57322: LD_STRING , 
57324: STR
57325: PUSH
57326: LD_VAR 0 3
57330: PPUSH
57331: CALL_OW 251
57335: STR
57336: PUSH
57337: LD_STRING , 
57339: STR
57340: PUSH
57341: LD_VAR 0 3
57345: PPUSH
57346: CALL_OW 254
57350: STR
57351: PUSH
57352: LD_STRING , 
57354: STR
57355: PUSH
57356: LD_VAR 0 3
57360: PPUSH
57361: LD_INT 1
57363: PPUSH
57364: CALL_OW 268
57368: STR
57369: PUSH
57370: LD_STRING , 
57372: STR
57373: PUSH
57374: LD_VAR 0 3
57378: PPUSH
57379: LD_INT 2
57381: PPUSH
57382: CALL_OW 268
57386: STR
57387: PUSH
57388: LD_STRING ],
57390: STR
57391: PPUSH
57392: CALL_OW 561
// end ;
57396: GO 57290
57398: POP
57399: POP
// AddToLog ( ]; ) ;
57400: LD_STRING ];
57402: PPUSH
57403: CALL_OW 561
// end ;
57407: LD_VAR 0 2
57411: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
57412: LD_INT 0
57414: PPUSH
57415: PPUSH
57416: PPUSH
57417: PPUSH
57418: PPUSH
// if not area or not rate or not max then
57419: LD_VAR 0 1
57423: NOT
57424: PUSH
57425: LD_VAR 0 2
57429: NOT
57430: OR
57431: PUSH
57432: LD_VAR 0 4
57436: NOT
57437: OR
57438: IFFALSE 57442
// exit ;
57440: GO 57634
// while 1 do
57442: LD_INT 1
57444: IFFALSE 57634
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
57446: LD_ADDR_VAR 0 9
57450: PUSH
57451: LD_VAR 0 1
57455: PPUSH
57456: LD_INT 1
57458: PPUSH
57459: CALL_OW 287
57463: PUSH
57464: LD_INT 10
57466: MUL
57467: ST_TO_ADDR
// r := rate / 10 ;
57468: LD_ADDR_VAR 0 7
57472: PUSH
57473: LD_VAR 0 2
57477: PUSH
57478: LD_INT 10
57480: DIVREAL
57481: ST_TO_ADDR
// time := 1 1$00 ;
57482: LD_ADDR_VAR 0 8
57486: PUSH
57487: LD_INT 2100
57489: ST_TO_ADDR
// if amount < min then
57490: LD_VAR 0 9
57494: PUSH
57495: LD_VAR 0 3
57499: LESS
57500: IFFALSE 57518
// r := r * 2 else
57502: LD_ADDR_VAR 0 7
57506: PUSH
57507: LD_VAR 0 7
57511: PUSH
57512: LD_INT 2
57514: MUL
57515: ST_TO_ADDR
57516: GO 57544
// if amount > max then
57518: LD_VAR 0 9
57522: PUSH
57523: LD_VAR 0 4
57527: GREATER
57528: IFFALSE 57544
// r := r / 2 ;
57530: LD_ADDR_VAR 0 7
57534: PUSH
57535: LD_VAR 0 7
57539: PUSH
57540: LD_INT 2
57542: DIVREAL
57543: ST_TO_ADDR
// time := time / r ;
57544: LD_ADDR_VAR 0 8
57548: PUSH
57549: LD_VAR 0 8
57553: PUSH
57554: LD_VAR 0 7
57558: DIVREAL
57559: ST_TO_ADDR
// if time < 0 then
57560: LD_VAR 0 8
57564: PUSH
57565: LD_INT 0
57567: LESS
57568: IFFALSE 57585
// time := time * - 1 ;
57570: LD_ADDR_VAR 0 8
57574: PUSH
57575: LD_VAR 0 8
57579: PUSH
57580: LD_INT 1
57582: NEG
57583: MUL
57584: ST_TO_ADDR
// wait ( time ) ;
57585: LD_VAR 0 8
57589: PPUSH
57590: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
57594: LD_INT 35
57596: PPUSH
57597: LD_INT 875
57599: PPUSH
57600: CALL_OW 12
57604: PPUSH
57605: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
57609: LD_INT 1
57611: PPUSH
57612: LD_INT 5
57614: PPUSH
57615: CALL_OW 12
57619: PPUSH
57620: LD_VAR 0 1
57624: PPUSH
57625: LD_INT 1
57627: PPUSH
57628: CALL_OW 55
// end ;
57632: GO 57442
// end ;
57634: LD_VAR 0 5
57638: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
57639: LD_INT 0
57641: PPUSH
57642: PPUSH
57643: PPUSH
57644: PPUSH
57645: PPUSH
57646: PPUSH
57647: PPUSH
57648: PPUSH
// if not turrets or not factories then
57649: LD_VAR 0 1
57653: NOT
57654: PUSH
57655: LD_VAR 0 2
57659: NOT
57660: OR
57661: IFFALSE 57665
// exit ;
57663: GO 57972
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
57665: LD_ADDR_VAR 0 10
57669: PUSH
57670: LD_INT 5
57672: PUSH
57673: LD_INT 6
57675: PUSH
57676: EMPTY
57677: LIST
57678: LIST
57679: PUSH
57680: LD_INT 2
57682: PUSH
57683: LD_INT 4
57685: PUSH
57686: EMPTY
57687: LIST
57688: LIST
57689: PUSH
57690: LD_INT 3
57692: PUSH
57693: LD_INT 5
57695: PUSH
57696: EMPTY
57697: LIST
57698: LIST
57699: PUSH
57700: EMPTY
57701: LIST
57702: LIST
57703: LIST
57704: PUSH
57705: LD_INT 24
57707: PUSH
57708: LD_INT 25
57710: PUSH
57711: EMPTY
57712: LIST
57713: LIST
57714: PUSH
57715: LD_INT 23
57717: PUSH
57718: LD_INT 27
57720: PUSH
57721: EMPTY
57722: LIST
57723: LIST
57724: PUSH
57725: EMPTY
57726: LIST
57727: LIST
57728: PUSH
57729: LD_INT 42
57731: PUSH
57732: LD_INT 43
57734: PUSH
57735: EMPTY
57736: LIST
57737: LIST
57738: PUSH
57739: LD_INT 44
57741: PUSH
57742: LD_INT 46
57744: PUSH
57745: EMPTY
57746: LIST
57747: LIST
57748: PUSH
57749: LD_INT 45
57751: PUSH
57752: LD_INT 47
57754: PUSH
57755: EMPTY
57756: LIST
57757: LIST
57758: PUSH
57759: EMPTY
57760: LIST
57761: LIST
57762: LIST
57763: PUSH
57764: EMPTY
57765: LIST
57766: LIST
57767: LIST
57768: ST_TO_ADDR
// result := [ ] ;
57769: LD_ADDR_VAR 0 3
57773: PUSH
57774: EMPTY
57775: ST_TO_ADDR
// for i in turrets do
57776: LD_ADDR_VAR 0 4
57780: PUSH
57781: LD_VAR 0 1
57785: PUSH
57786: FOR_IN
57787: IFFALSE 57970
// begin nat := GetNation ( i ) ;
57789: LD_ADDR_VAR 0 7
57793: PUSH
57794: LD_VAR 0 4
57798: PPUSH
57799: CALL_OW 248
57803: ST_TO_ADDR
// weapon := 0 ;
57804: LD_ADDR_VAR 0 8
57808: PUSH
57809: LD_INT 0
57811: ST_TO_ADDR
// if not nat then
57812: LD_VAR 0 7
57816: NOT
57817: IFFALSE 57821
// continue ;
57819: GO 57786
// for j in list [ nat ] do
57821: LD_ADDR_VAR 0 5
57825: PUSH
57826: LD_VAR 0 10
57830: PUSH
57831: LD_VAR 0 7
57835: ARRAY
57836: PUSH
57837: FOR_IN
57838: IFFALSE 57879
// if GetBWeapon ( i ) = j [ 1 ] then
57840: LD_VAR 0 4
57844: PPUSH
57845: CALL_OW 269
57849: PUSH
57850: LD_VAR 0 5
57854: PUSH
57855: LD_INT 1
57857: ARRAY
57858: EQUAL
57859: IFFALSE 57877
// begin weapon := j [ 2 ] ;
57861: LD_ADDR_VAR 0 8
57865: PUSH
57866: LD_VAR 0 5
57870: PUSH
57871: LD_INT 2
57873: ARRAY
57874: ST_TO_ADDR
// break ;
57875: GO 57879
// end ;
57877: GO 57837
57879: POP
57880: POP
// if not weapon then
57881: LD_VAR 0 8
57885: NOT
57886: IFFALSE 57890
// continue ;
57888: GO 57786
// for k in factories do
57890: LD_ADDR_VAR 0 6
57894: PUSH
57895: LD_VAR 0 2
57899: PUSH
57900: FOR_IN
57901: IFFALSE 57966
// begin weapons := AvailableWeaponList ( k ) ;
57903: LD_ADDR_VAR 0 9
57907: PUSH
57908: LD_VAR 0 6
57912: PPUSH
57913: CALL_OW 478
57917: ST_TO_ADDR
// if not weapons then
57918: LD_VAR 0 9
57922: NOT
57923: IFFALSE 57927
// continue ;
57925: GO 57900
// if weapon in weapons then
57927: LD_VAR 0 8
57931: PUSH
57932: LD_VAR 0 9
57936: IN
57937: IFFALSE 57964
// begin result := [ i , weapon ] ;
57939: LD_ADDR_VAR 0 3
57943: PUSH
57944: LD_VAR 0 4
57948: PUSH
57949: LD_VAR 0 8
57953: PUSH
57954: EMPTY
57955: LIST
57956: LIST
57957: ST_TO_ADDR
// exit ;
57958: POP
57959: POP
57960: POP
57961: POP
57962: GO 57972
// end ; end ;
57964: GO 57900
57966: POP
57967: POP
// end ;
57968: GO 57786
57970: POP
57971: POP
// end ;
57972: LD_VAR 0 3
57976: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
57977: LD_INT 0
57979: PPUSH
// if not side or side > 8 then
57980: LD_VAR 0 3
57984: NOT
57985: PUSH
57986: LD_VAR 0 3
57990: PUSH
57991: LD_INT 8
57993: GREATER
57994: OR
57995: IFFALSE 57999
// exit ;
57997: GO 58058
// if not range then
57999: LD_VAR 0 4
58003: NOT
58004: IFFALSE 58015
// range := - 12 ;
58006: LD_ADDR_VAR 0 4
58010: PUSH
58011: LD_INT 12
58013: NEG
58014: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
58015: LD_VAR 0 1
58019: PPUSH
58020: LD_VAR 0 2
58024: PPUSH
58025: LD_VAR 0 3
58029: PPUSH
58030: LD_VAR 0 4
58034: PPUSH
58035: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
58039: LD_VAR 0 1
58043: PPUSH
58044: LD_VAR 0 2
58048: PPUSH
58049: LD_VAR 0 3
58053: PPUSH
58054: CALL_OW 331
// end ;
58058: LD_VAR 0 5
58062: RET
// export function Video ( mode ) ; begin
58063: LD_INT 0
58065: PPUSH
// ingame_video = mode ;
58066: LD_ADDR_OWVAR 52
58070: PUSH
58071: LD_VAR 0 1
58075: ST_TO_ADDR
// interface_hidden = mode ;
58076: LD_ADDR_OWVAR 54
58080: PUSH
58081: LD_VAR 0 1
58085: ST_TO_ADDR
// end ;
58086: LD_VAR 0 2
58090: RET
// export function Join ( array , element ) ; begin
58091: LD_INT 0
58093: PPUSH
// result := Replace ( array , array + 1 , element ) ;
58094: LD_ADDR_VAR 0 3
58098: PUSH
58099: LD_VAR 0 1
58103: PPUSH
58104: LD_VAR 0 1
58108: PUSH
58109: LD_INT 1
58111: PLUS
58112: PPUSH
58113: LD_VAR 0 2
58117: PPUSH
58118: CALL_OW 1
58122: ST_TO_ADDR
// end ;
58123: LD_VAR 0 3
58127: RET
// export function JoinUnion ( array , element ) ; begin
58128: LD_INT 0
58130: PPUSH
// result := array union element ;
58131: LD_ADDR_VAR 0 3
58135: PUSH
58136: LD_VAR 0 1
58140: PUSH
58141: LD_VAR 0 2
58145: UNION
58146: ST_TO_ADDR
// end ;
58147: LD_VAR 0 3
58151: RET
// export function GetBehemoths ( side ) ; begin
58152: LD_INT 0
58154: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
58155: LD_ADDR_VAR 0 2
58159: PUSH
58160: LD_INT 22
58162: PUSH
58163: LD_VAR 0 1
58167: PUSH
58168: EMPTY
58169: LIST
58170: LIST
58171: PUSH
58172: LD_INT 31
58174: PUSH
58175: LD_INT 25
58177: PUSH
58178: EMPTY
58179: LIST
58180: LIST
58181: PUSH
58182: EMPTY
58183: LIST
58184: LIST
58185: PPUSH
58186: CALL_OW 69
58190: ST_TO_ADDR
// end ;
58191: LD_VAR 0 2
58195: RET
// export function Shuffle ( array ) ; var i , index ; begin
58196: LD_INT 0
58198: PPUSH
58199: PPUSH
58200: PPUSH
// result := [ ] ;
58201: LD_ADDR_VAR 0 2
58205: PUSH
58206: EMPTY
58207: ST_TO_ADDR
// if not array then
58208: LD_VAR 0 1
58212: NOT
58213: IFFALSE 58217
// exit ;
58215: GO 58316
// Randomize ;
58217: CALL_OW 10
// for i = array downto 1 do
58221: LD_ADDR_VAR 0 3
58225: PUSH
58226: DOUBLE
58227: LD_VAR 0 1
58231: INC
58232: ST_TO_ADDR
58233: LD_INT 1
58235: PUSH
58236: FOR_DOWNTO
58237: IFFALSE 58314
// begin index := rand ( 1 , array ) ;
58239: LD_ADDR_VAR 0 4
58243: PUSH
58244: LD_INT 1
58246: PPUSH
58247: LD_VAR 0 1
58251: PPUSH
58252: CALL_OW 12
58256: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
58257: LD_ADDR_VAR 0 2
58261: PUSH
58262: LD_VAR 0 2
58266: PPUSH
58267: LD_VAR 0 2
58271: PUSH
58272: LD_INT 1
58274: PLUS
58275: PPUSH
58276: LD_VAR 0 1
58280: PUSH
58281: LD_VAR 0 4
58285: ARRAY
58286: PPUSH
58287: CALL_OW 2
58291: ST_TO_ADDR
// array := Delete ( array , index ) ;
58292: LD_ADDR_VAR 0 1
58296: PUSH
58297: LD_VAR 0 1
58301: PPUSH
58302: LD_VAR 0 4
58306: PPUSH
58307: CALL_OW 3
58311: ST_TO_ADDR
// end ;
58312: GO 58236
58314: POP
58315: POP
// end ;
58316: LD_VAR 0 2
58320: RET
// export function GetBaseMaterials ( base ) ; begin
58321: LD_INT 0
58323: PPUSH
// result := [ 0 , 0 , 0 ] ;
58324: LD_ADDR_VAR 0 2
58328: PUSH
58329: LD_INT 0
58331: PUSH
58332: LD_INT 0
58334: PUSH
58335: LD_INT 0
58337: PUSH
58338: EMPTY
58339: LIST
58340: LIST
58341: LIST
58342: ST_TO_ADDR
// if not base then
58343: LD_VAR 0 1
58347: NOT
58348: IFFALSE 58352
// exit ;
58350: GO 58401
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
58352: LD_ADDR_VAR 0 2
58356: PUSH
58357: LD_VAR 0 1
58361: PPUSH
58362: LD_INT 1
58364: PPUSH
58365: CALL_OW 275
58369: PUSH
58370: LD_VAR 0 1
58374: PPUSH
58375: LD_INT 2
58377: PPUSH
58378: CALL_OW 275
58382: PUSH
58383: LD_VAR 0 1
58387: PPUSH
58388: LD_INT 3
58390: PPUSH
58391: CALL_OW 275
58395: PUSH
58396: EMPTY
58397: LIST
58398: LIST
58399: LIST
58400: ST_TO_ADDR
// end ;
58401: LD_VAR 0 2
58405: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
58406: LD_INT 0
58408: PPUSH
58409: PPUSH
// result := array ;
58410: LD_ADDR_VAR 0 3
58414: PUSH
58415: LD_VAR 0 1
58419: ST_TO_ADDR
// if size > 0 then
58420: LD_VAR 0 2
58424: PUSH
58425: LD_INT 0
58427: GREATER
58428: IFFALSE 58474
// for i := array downto size do
58430: LD_ADDR_VAR 0 4
58434: PUSH
58435: DOUBLE
58436: LD_VAR 0 1
58440: INC
58441: ST_TO_ADDR
58442: LD_VAR 0 2
58446: PUSH
58447: FOR_DOWNTO
58448: IFFALSE 58472
// result := Delete ( result , result ) ;
58450: LD_ADDR_VAR 0 3
58454: PUSH
58455: LD_VAR 0 3
58459: PPUSH
58460: LD_VAR 0 3
58464: PPUSH
58465: CALL_OW 3
58469: ST_TO_ADDR
58470: GO 58447
58472: POP
58473: POP
// end ;
58474: LD_VAR 0 3
58478: RET
// export function ComExit ( unit ) ; var tmp ; begin
58479: LD_INT 0
58481: PPUSH
58482: PPUSH
// if not IsInUnit ( unit ) then
58483: LD_VAR 0 1
58487: PPUSH
58488: CALL_OW 310
58492: NOT
58493: IFFALSE 58497
// exit ;
58495: GO 58557
// tmp := IsInUnit ( unit ) ;
58497: LD_ADDR_VAR 0 3
58501: PUSH
58502: LD_VAR 0 1
58506: PPUSH
58507: CALL_OW 310
58511: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
58512: LD_VAR 0 3
58516: PPUSH
58517: CALL_OW 247
58521: PUSH
58522: LD_INT 2
58524: EQUAL
58525: IFFALSE 58538
// ComExitVehicle ( unit ) else
58527: LD_VAR 0 1
58531: PPUSH
58532: CALL_OW 121
58536: GO 58547
// ComExitBuilding ( unit ) ;
58538: LD_VAR 0 1
58542: PPUSH
58543: CALL_OW 122
// result := tmp ;
58547: LD_ADDR_VAR 0 2
58551: PUSH
58552: LD_VAR 0 3
58556: ST_TO_ADDR
// end ;
58557: LD_VAR 0 2
58561: RET
// export function ComExitAll ( units ) ; var i ; begin
58562: LD_INT 0
58564: PPUSH
58565: PPUSH
// if not units then
58566: LD_VAR 0 1
58570: NOT
58571: IFFALSE 58575
// exit ;
58573: GO 58601
// for i in units do
58575: LD_ADDR_VAR 0 3
58579: PUSH
58580: LD_VAR 0 1
58584: PUSH
58585: FOR_IN
58586: IFFALSE 58599
// ComExit ( i ) ;
58588: LD_VAR 0 3
58592: PPUSH
58593: CALL 58479 0 1
58597: GO 58585
58599: POP
58600: POP
// end ;
58601: LD_VAR 0 2
58605: RET
// export function ResetHc ; begin
58606: LD_INT 0
58608: PPUSH
// InitHc ;
58609: CALL_OW 19
// hc_importance := 0 ;
58613: LD_ADDR_OWVAR 32
58617: PUSH
58618: LD_INT 0
58620: ST_TO_ADDR
// end ;
58621: LD_VAR 0 1
58625: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
58626: LD_INT 0
58628: PPUSH
58629: PPUSH
58630: PPUSH
// _x := ( x1 + x2 ) div 2 ;
58631: LD_ADDR_VAR 0 6
58635: PUSH
58636: LD_VAR 0 1
58640: PUSH
58641: LD_VAR 0 3
58645: PLUS
58646: PUSH
58647: LD_INT 2
58649: DIV
58650: ST_TO_ADDR
// if _x < 0 then
58651: LD_VAR 0 6
58655: PUSH
58656: LD_INT 0
58658: LESS
58659: IFFALSE 58676
// _x := _x * - 1 ;
58661: LD_ADDR_VAR 0 6
58665: PUSH
58666: LD_VAR 0 6
58670: PUSH
58671: LD_INT 1
58673: NEG
58674: MUL
58675: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
58676: LD_ADDR_VAR 0 7
58680: PUSH
58681: LD_VAR 0 2
58685: PUSH
58686: LD_VAR 0 4
58690: PLUS
58691: PUSH
58692: LD_INT 2
58694: DIV
58695: ST_TO_ADDR
// if _y < 0 then
58696: LD_VAR 0 7
58700: PUSH
58701: LD_INT 0
58703: LESS
58704: IFFALSE 58721
// _y := _y * - 1 ;
58706: LD_ADDR_VAR 0 7
58710: PUSH
58711: LD_VAR 0 7
58715: PUSH
58716: LD_INT 1
58718: NEG
58719: MUL
58720: ST_TO_ADDR
// result := [ _x , _y ] ;
58721: LD_ADDR_VAR 0 5
58725: PUSH
58726: LD_VAR 0 6
58730: PUSH
58731: LD_VAR 0 7
58735: PUSH
58736: EMPTY
58737: LIST
58738: LIST
58739: ST_TO_ADDR
// end ;
58740: LD_VAR 0 5
58744: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
58745: LD_INT 0
58747: PPUSH
58748: PPUSH
58749: PPUSH
58750: PPUSH
// task := GetTaskList ( unit ) ;
58751: LD_ADDR_VAR 0 7
58755: PUSH
58756: LD_VAR 0 1
58760: PPUSH
58761: CALL_OW 437
58765: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
58766: LD_VAR 0 7
58770: NOT
58771: PUSH
58772: LD_VAR 0 1
58776: PPUSH
58777: LD_VAR 0 2
58781: PPUSH
58782: CALL_OW 308
58786: NOT
58787: AND
58788: IFFALSE 58792
// exit ;
58790: GO 58910
// if IsInArea ( unit , area ) then
58792: LD_VAR 0 1
58796: PPUSH
58797: LD_VAR 0 2
58801: PPUSH
58802: CALL_OW 308
58806: IFFALSE 58824
// begin ComMoveToArea ( unit , goAway ) ;
58808: LD_VAR 0 1
58812: PPUSH
58813: LD_VAR 0 3
58817: PPUSH
58818: CALL_OW 113
// exit ;
58822: GO 58910
// end ; if task [ 1 ] [ 1 ] <> M then
58824: LD_VAR 0 7
58828: PUSH
58829: LD_INT 1
58831: ARRAY
58832: PUSH
58833: LD_INT 1
58835: ARRAY
58836: PUSH
58837: LD_STRING M
58839: NONEQUAL
58840: IFFALSE 58844
// exit ;
58842: GO 58910
// x := task [ 1 ] [ 2 ] ;
58844: LD_ADDR_VAR 0 5
58848: PUSH
58849: LD_VAR 0 7
58853: PUSH
58854: LD_INT 1
58856: ARRAY
58857: PUSH
58858: LD_INT 2
58860: ARRAY
58861: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
58862: LD_ADDR_VAR 0 6
58866: PUSH
58867: LD_VAR 0 7
58871: PUSH
58872: LD_INT 1
58874: ARRAY
58875: PUSH
58876: LD_INT 3
58878: ARRAY
58879: ST_TO_ADDR
// if InArea ( x , y , area ) then
58880: LD_VAR 0 5
58884: PPUSH
58885: LD_VAR 0 6
58889: PPUSH
58890: LD_VAR 0 2
58894: PPUSH
58895: CALL_OW 309
58899: IFFALSE 58910
// ComStop ( unit ) ;
58901: LD_VAR 0 1
58905: PPUSH
58906: CALL_OW 141
// end ;
58910: LD_VAR 0 4
58914: RET
// export function Abs ( value ) ; begin
58915: LD_INT 0
58917: PPUSH
// result := value ;
58918: LD_ADDR_VAR 0 2
58922: PUSH
58923: LD_VAR 0 1
58927: ST_TO_ADDR
// if value < 0 then
58928: LD_VAR 0 1
58932: PUSH
58933: LD_INT 0
58935: LESS
58936: IFFALSE 58953
// result := value * - 1 ;
58938: LD_ADDR_VAR 0 2
58942: PUSH
58943: LD_VAR 0 1
58947: PUSH
58948: LD_INT 1
58950: NEG
58951: MUL
58952: ST_TO_ADDR
// end ;
58953: LD_VAR 0 2
58957: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
58958: LD_INT 0
58960: PPUSH
58961: PPUSH
58962: PPUSH
58963: PPUSH
58964: PPUSH
58965: PPUSH
58966: PPUSH
58967: PPUSH
// if not unit or not building then
58968: LD_VAR 0 1
58972: NOT
58973: PUSH
58974: LD_VAR 0 2
58978: NOT
58979: OR
58980: IFFALSE 58984
// exit ;
58982: GO 59210
// x := GetX ( building ) ;
58984: LD_ADDR_VAR 0 4
58988: PUSH
58989: LD_VAR 0 2
58993: PPUSH
58994: CALL_OW 250
58998: ST_TO_ADDR
// y := GetY ( building ) ;
58999: LD_ADDR_VAR 0 6
59003: PUSH
59004: LD_VAR 0 2
59008: PPUSH
59009: CALL_OW 251
59013: ST_TO_ADDR
// d := GetDir ( building ) ;
59014: LD_ADDR_VAR 0 8
59018: PUSH
59019: LD_VAR 0 2
59023: PPUSH
59024: CALL_OW 254
59028: ST_TO_ADDR
// r := 4 ;
59029: LD_ADDR_VAR 0 9
59033: PUSH
59034: LD_INT 4
59036: ST_TO_ADDR
// for i := 1 to 5 do
59037: LD_ADDR_VAR 0 10
59041: PUSH
59042: DOUBLE
59043: LD_INT 1
59045: DEC
59046: ST_TO_ADDR
59047: LD_INT 5
59049: PUSH
59050: FOR_TO
59051: IFFALSE 59208
// begin _x := ShiftX ( x , d , r + i ) ;
59053: LD_ADDR_VAR 0 5
59057: PUSH
59058: LD_VAR 0 4
59062: PPUSH
59063: LD_VAR 0 8
59067: PPUSH
59068: LD_VAR 0 9
59072: PUSH
59073: LD_VAR 0 10
59077: PLUS
59078: PPUSH
59079: CALL_OW 272
59083: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
59084: LD_ADDR_VAR 0 7
59088: PUSH
59089: LD_VAR 0 6
59093: PPUSH
59094: LD_VAR 0 8
59098: PPUSH
59099: LD_VAR 0 9
59103: PUSH
59104: LD_VAR 0 10
59108: PLUS
59109: PPUSH
59110: CALL_OW 273
59114: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
59115: LD_VAR 0 5
59119: PPUSH
59120: LD_VAR 0 7
59124: PPUSH
59125: CALL_OW 488
59129: PUSH
59130: LD_VAR 0 5
59134: PPUSH
59135: LD_VAR 0 7
59139: PPUSH
59140: CALL_OW 428
59144: PPUSH
59145: CALL_OW 247
59149: PUSH
59150: LD_INT 3
59152: PUSH
59153: LD_INT 2
59155: PUSH
59156: EMPTY
59157: LIST
59158: LIST
59159: IN
59160: NOT
59161: AND
59162: IFFALSE 59206
// begin ComMoveXY ( unit , _x , _y ) ;
59164: LD_VAR 0 1
59168: PPUSH
59169: LD_VAR 0 5
59173: PPUSH
59174: LD_VAR 0 7
59178: PPUSH
59179: CALL_OW 111
// result := [ _x , _y ] ;
59183: LD_ADDR_VAR 0 3
59187: PUSH
59188: LD_VAR 0 5
59192: PUSH
59193: LD_VAR 0 7
59197: PUSH
59198: EMPTY
59199: LIST
59200: LIST
59201: ST_TO_ADDR
// exit ;
59202: POP
59203: POP
59204: GO 59210
// end ; end ;
59206: GO 59050
59208: POP
59209: POP
// end ;
59210: LD_VAR 0 3
59214: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
59215: LD_INT 0
59217: PPUSH
59218: PPUSH
59219: PPUSH
// result := 0 ;
59220: LD_ADDR_VAR 0 3
59224: PUSH
59225: LD_INT 0
59227: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
59228: LD_VAR 0 1
59232: PUSH
59233: LD_INT 0
59235: LESS
59236: PUSH
59237: LD_VAR 0 1
59241: PUSH
59242: LD_INT 8
59244: GREATER
59245: OR
59246: PUSH
59247: LD_VAR 0 2
59251: PUSH
59252: LD_INT 0
59254: LESS
59255: OR
59256: PUSH
59257: LD_VAR 0 2
59261: PUSH
59262: LD_INT 8
59264: GREATER
59265: OR
59266: IFFALSE 59270
// exit ;
59268: GO 59345
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
59270: LD_ADDR_VAR 0 4
59274: PUSH
59275: LD_INT 22
59277: PUSH
59278: LD_VAR 0 2
59282: PUSH
59283: EMPTY
59284: LIST
59285: LIST
59286: PPUSH
59287: CALL_OW 69
59291: PUSH
59292: FOR_IN
59293: IFFALSE 59343
// begin un := UnitShoot ( i ) ;
59295: LD_ADDR_VAR 0 5
59299: PUSH
59300: LD_VAR 0 4
59304: PPUSH
59305: CALL_OW 504
59309: ST_TO_ADDR
// if GetSide ( un ) = side1 then
59310: LD_VAR 0 5
59314: PPUSH
59315: CALL_OW 255
59319: PUSH
59320: LD_VAR 0 1
59324: EQUAL
59325: IFFALSE 59341
// begin result := un ;
59327: LD_ADDR_VAR 0 3
59331: PUSH
59332: LD_VAR 0 5
59336: ST_TO_ADDR
// exit ;
59337: POP
59338: POP
59339: GO 59345
// end ; end ;
59341: GO 59292
59343: POP
59344: POP
// end ;
59345: LD_VAR 0 3
59349: RET
// export function GetCargoBay ( units ) ; begin
59350: LD_INT 0
59352: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
59353: LD_ADDR_VAR 0 2
59357: PUSH
59358: LD_VAR 0 1
59362: PPUSH
59363: LD_INT 2
59365: PUSH
59366: LD_INT 34
59368: PUSH
59369: LD_INT 12
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: PUSH
59376: LD_INT 34
59378: PUSH
59379: LD_INT 51
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: LD_INT 34
59388: PUSH
59389: LD_INT 32
59391: PUSH
59392: EMPTY
59393: LIST
59394: LIST
59395: PUSH
59396: LD_INT 34
59398: PUSH
59399: LD_EXP 83
59403: PUSH
59404: EMPTY
59405: LIST
59406: LIST
59407: PUSH
59408: EMPTY
59409: LIST
59410: LIST
59411: LIST
59412: LIST
59413: LIST
59414: PPUSH
59415: CALL_OW 72
59419: ST_TO_ADDR
// end ;
59420: LD_VAR 0 2
59424: RET
// export function Negate ( value ) ; begin
59425: LD_INT 0
59427: PPUSH
// result := not value ;
59428: LD_ADDR_VAR 0 2
59432: PUSH
59433: LD_VAR 0 1
59437: NOT
59438: ST_TO_ADDR
// end ;
59439: LD_VAR 0 2
59443: RET
// export function Inc ( value ) ; begin
59444: LD_INT 0
59446: PPUSH
// result := value + 1 ;
59447: LD_ADDR_VAR 0 2
59451: PUSH
59452: LD_VAR 0 1
59456: PUSH
59457: LD_INT 1
59459: PLUS
59460: ST_TO_ADDR
// end ;
59461: LD_VAR 0 2
59465: RET
// export function Dec ( value ) ; begin
59466: LD_INT 0
59468: PPUSH
// result := value - 1 ;
59469: LD_ADDR_VAR 0 2
59473: PUSH
59474: LD_VAR 0 1
59478: PUSH
59479: LD_INT 1
59481: MINUS
59482: ST_TO_ADDR
// end ;
59483: LD_VAR 0 2
59487: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
59488: LD_INT 0
59490: PPUSH
59491: PPUSH
59492: PPUSH
59493: PPUSH
59494: PPUSH
59495: PPUSH
59496: PPUSH
59497: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
59498: LD_VAR 0 1
59502: PPUSH
59503: LD_VAR 0 2
59507: PPUSH
59508: CALL_OW 488
59512: NOT
59513: PUSH
59514: LD_VAR 0 3
59518: PPUSH
59519: LD_VAR 0 4
59523: PPUSH
59524: CALL_OW 488
59528: NOT
59529: OR
59530: IFFALSE 59543
// begin result := - 1 ;
59532: LD_ADDR_VAR 0 5
59536: PUSH
59537: LD_INT 1
59539: NEG
59540: ST_TO_ADDR
// exit ;
59541: GO 59778
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
59543: LD_ADDR_VAR 0 12
59547: PUSH
59548: LD_VAR 0 1
59552: PPUSH
59553: LD_VAR 0 2
59557: PPUSH
59558: LD_VAR 0 3
59562: PPUSH
59563: LD_VAR 0 4
59567: PPUSH
59568: CALL 58626 0 4
59572: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
59573: LD_ADDR_VAR 0 11
59577: PUSH
59578: LD_VAR 0 1
59582: PPUSH
59583: LD_VAR 0 2
59587: PPUSH
59588: LD_VAR 0 12
59592: PUSH
59593: LD_INT 1
59595: ARRAY
59596: PPUSH
59597: LD_VAR 0 12
59601: PUSH
59602: LD_INT 2
59604: ARRAY
59605: PPUSH
59606: CALL_OW 298
59610: ST_TO_ADDR
// distance := 9999 ;
59611: LD_ADDR_VAR 0 10
59615: PUSH
59616: LD_INT 9999
59618: ST_TO_ADDR
// for i := 0 to 5 do
59619: LD_ADDR_VAR 0 6
59623: PUSH
59624: DOUBLE
59625: LD_INT 0
59627: DEC
59628: ST_TO_ADDR
59629: LD_INT 5
59631: PUSH
59632: FOR_TO
59633: IFFALSE 59776
// begin _x := ShiftX ( x1 , i , centerDist ) ;
59635: LD_ADDR_VAR 0 7
59639: PUSH
59640: LD_VAR 0 1
59644: PPUSH
59645: LD_VAR 0 6
59649: PPUSH
59650: LD_VAR 0 11
59654: PPUSH
59655: CALL_OW 272
59659: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
59660: LD_ADDR_VAR 0 8
59664: PUSH
59665: LD_VAR 0 2
59669: PPUSH
59670: LD_VAR 0 6
59674: PPUSH
59675: LD_VAR 0 11
59679: PPUSH
59680: CALL_OW 273
59684: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
59685: LD_VAR 0 7
59689: PPUSH
59690: LD_VAR 0 8
59694: PPUSH
59695: CALL_OW 488
59699: NOT
59700: IFFALSE 59704
// continue ;
59702: GO 59632
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
59704: LD_ADDR_VAR 0 9
59708: PUSH
59709: LD_VAR 0 12
59713: PUSH
59714: LD_INT 1
59716: ARRAY
59717: PPUSH
59718: LD_VAR 0 12
59722: PUSH
59723: LD_INT 2
59725: ARRAY
59726: PPUSH
59727: LD_VAR 0 7
59731: PPUSH
59732: LD_VAR 0 8
59736: PPUSH
59737: CALL_OW 298
59741: ST_TO_ADDR
// if tmp < distance then
59742: LD_VAR 0 9
59746: PUSH
59747: LD_VAR 0 10
59751: LESS
59752: IFFALSE 59774
// begin result := i ;
59754: LD_ADDR_VAR 0 5
59758: PUSH
59759: LD_VAR 0 6
59763: ST_TO_ADDR
// distance := tmp ;
59764: LD_ADDR_VAR 0 10
59768: PUSH
59769: LD_VAR 0 9
59773: ST_TO_ADDR
// end ; end ;
59774: GO 59632
59776: POP
59777: POP
// end ;
59778: LD_VAR 0 5
59782: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
59783: LD_INT 0
59785: PPUSH
59786: PPUSH
// if not driver or not IsInUnit ( driver ) then
59787: LD_VAR 0 1
59791: NOT
59792: PUSH
59793: LD_VAR 0 1
59797: PPUSH
59798: CALL_OW 310
59802: NOT
59803: OR
59804: IFFALSE 59808
// exit ;
59806: GO 59898
// vehicle := IsInUnit ( driver ) ;
59808: LD_ADDR_VAR 0 3
59812: PUSH
59813: LD_VAR 0 1
59817: PPUSH
59818: CALL_OW 310
59822: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
59823: LD_VAR 0 1
59827: PPUSH
59828: LD_STRING \
59830: PUSH
59831: LD_INT 0
59833: PUSH
59834: LD_INT 0
59836: PUSH
59837: LD_INT 0
59839: PUSH
59840: LD_INT 0
59842: PUSH
59843: LD_INT 0
59845: PUSH
59846: LD_INT 0
59848: PUSH
59849: EMPTY
59850: LIST
59851: LIST
59852: LIST
59853: LIST
59854: LIST
59855: LIST
59856: LIST
59857: PUSH
59858: LD_STRING E
59860: PUSH
59861: LD_INT 0
59863: PUSH
59864: LD_INT 0
59866: PUSH
59867: LD_VAR 0 3
59871: PUSH
59872: LD_INT 0
59874: PUSH
59875: LD_INT 0
59877: PUSH
59878: LD_INT 0
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: LIST
59885: LIST
59886: LIST
59887: LIST
59888: LIST
59889: PUSH
59890: EMPTY
59891: LIST
59892: LIST
59893: PPUSH
59894: CALL_OW 446
// end ;
59898: LD_VAR 0 2
59902: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
59903: LD_INT 0
59905: PPUSH
59906: PPUSH
// if not driver or not IsInUnit ( driver ) then
59907: LD_VAR 0 1
59911: NOT
59912: PUSH
59913: LD_VAR 0 1
59917: PPUSH
59918: CALL_OW 310
59922: NOT
59923: OR
59924: IFFALSE 59928
// exit ;
59926: GO 60018
// vehicle := IsInUnit ( driver ) ;
59928: LD_ADDR_VAR 0 3
59932: PUSH
59933: LD_VAR 0 1
59937: PPUSH
59938: CALL_OW 310
59942: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
59943: LD_VAR 0 1
59947: PPUSH
59948: LD_STRING \
59950: PUSH
59951: LD_INT 0
59953: PUSH
59954: LD_INT 0
59956: PUSH
59957: LD_INT 0
59959: PUSH
59960: LD_INT 0
59962: PUSH
59963: LD_INT 0
59965: PUSH
59966: LD_INT 0
59968: PUSH
59969: EMPTY
59970: LIST
59971: LIST
59972: LIST
59973: LIST
59974: LIST
59975: LIST
59976: LIST
59977: PUSH
59978: LD_STRING E
59980: PUSH
59981: LD_INT 0
59983: PUSH
59984: LD_INT 0
59986: PUSH
59987: LD_VAR 0 3
59991: PUSH
59992: LD_INT 0
59994: PUSH
59995: LD_INT 0
59997: PUSH
59998: LD_INT 0
60000: PUSH
60001: EMPTY
60002: LIST
60003: LIST
60004: LIST
60005: LIST
60006: LIST
60007: LIST
60008: LIST
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: PPUSH
60014: CALL_OW 447
// end ;
60018: LD_VAR 0 2
60022: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
60023: LD_INT 0
60025: PPUSH
60026: PPUSH
60027: PPUSH
// tmp := [ ] ;
60028: LD_ADDR_VAR 0 5
60032: PUSH
60033: EMPTY
60034: ST_TO_ADDR
// for i in units do
60035: LD_ADDR_VAR 0 4
60039: PUSH
60040: LD_VAR 0 1
60044: PUSH
60045: FOR_IN
60046: IFFALSE 60084
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
60048: LD_ADDR_VAR 0 5
60052: PUSH
60053: LD_VAR 0 5
60057: PPUSH
60058: LD_VAR 0 5
60062: PUSH
60063: LD_INT 1
60065: PLUS
60066: PPUSH
60067: LD_VAR 0 4
60071: PPUSH
60072: CALL_OW 256
60076: PPUSH
60077: CALL_OW 2
60081: ST_TO_ADDR
60082: GO 60045
60084: POP
60085: POP
// if not tmp then
60086: LD_VAR 0 5
60090: NOT
60091: IFFALSE 60095
// exit ;
60093: GO 60143
// if asc then
60095: LD_VAR 0 2
60099: IFFALSE 60123
// result := SortListByListAsc ( units , tmp ) else
60101: LD_ADDR_VAR 0 3
60105: PUSH
60106: LD_VAR 0 1
60110: PPUSH
60111: LD_VAR 0 5
60115: PPUSH
60116: CALL_OW 76
60120: ST_TO_ADDR
60121: GO 60143
// result := SortListByListDesc ( units , tmp ) ;
60123: LD_ADDR_VAR 0 3
60127: PUSH
60128: LD_VAR 0 1
60132: PPUSH
60133: LD_VAR 0 5
60137: PPUSH
60138: CALL_OW 77
60142: ST_TO_ADDR
// end ;
60143: LD_VAR 0 3
60147: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
60148: LD_INT 0
60150: PPUSH
60151: PPUSH
// task := GetTaskList ( mech ) ;
60152: LD_ADDR_VAR 0 4
60156: PUSH
60157: LD_VAR 0 1
60161: PPUSH
60162: CALL_OW 437
60166: ST_TO_ADDR
// if not task then
60167: LD_VAR 0 4
60171: NOT
60172: IFFALSE 60176
// exit ;
60174: GO 60218
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
60176: LD_ADDR_VAR 0 3
60180: PUSH
60181: LD_VAR 0 4
60185: PUSH
60186: LD_INT 1
60188: ARRAY
60189: PUSH
60190: LD_INT 1
60192: ARRAY
60193: PUSH
60194: LD_STRING r
60196: EQUAL
60197: PUSH
60198: LD_VAR 0 4
60202: PUSH
60203: LD_INT 1
60205: ARRAY
60206: PUSH
60207: LD_INT 4
60209: ARRAY
60210: PUSH
60211: LD_VAR 0 2
60215: EQUAL
60216: AND
60217: ST_TO_ADDR
// end ;
60218: LD_VAR 0 3
60222: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
60223: LD_INT 0
60225: PPUSH
// SetDir ( unit , d ) ;
60226: LD_VAR 0 1
60230: PPUSH
60231: LD_VAR 0 4
60235: PPUSH
60236: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
60240: LD_VAR 0 1
60244: PPUSH
60245: LD_VAR 0 2
60249: PPUSH
60250: LD_VAR 0 3
60254: PPUSH
60255: LD_VAR 0 5
60259: PPUSH
60260: CALL_OW 48
// end ;
60264: LD_VAR 0 6
60268: RET
// export function ToNaturalNumber ( number ) ; begin
60269: LD_INT 0
60271: PPUSH
// result := number div 1 ;
60272: LD_ADDR_VAR 0 2
60276: PUSH
60277: LD_VAR 0 1
60281: PUSH
60282: LD_INT 1
60284: DIV
60285: ST_TO_ADDR
// if number < 0 then
60286: LD_VAR 0 1
60290: PUSH
60291: LD_INT 0
60293: LESS
60294: IFFALSE 60304
// result := 0 ;
60296: LD_ADDR_VAR 0 2
60300: PUSH
60301: LD_INT 0
60303: ST_TO_ADDR
// end ;
60304: LD_VAR 0 2
60308: RET
// export function SortByClass ( units , class ) ; var un ; begin
60309: LD_INT 0
60311: PPUSH
60312: PPUSH
// if not units or not class then
60313: LD_VAR 0 1
60317: NOT
60318: PUSH
60319: LD_VAR 0 2
60323: NOT
60324: OR
60325: IFFALSE 60329
// exit ;
60327: GO 60424
// result := [ ] ;
60329: LD_ADDR_VAR 0 3
60333: PUSH
60334: EMPTY
60335: ST_TO_ADDR
// for un in units do
60336: LD_ADDR_VAR 0 4
60340: PUSH
60341: LD_VAR 0 1
60345: PUSH
60346: FOR_IN
60347: IFFALSE 60422
// if GetClass ( un ) = class then
60349: LD_VAR 0 4
60353: PPUSH
60354: CALL_OW 257
60358: PUSH
60359: LD_VAR 0 2
60363: EQUAL
60364: IFFALSE 60391
// result := Insert ( result , 1 , un ) else
60366: LD_ADDR_VAR 0 3
60370: PUSH
60371: LD_VAR 0 3
60375: PPUSH
60376: LD_INT 1
60378: PPUSH
60379: LD_VAR 0 4
60383: PPUSH
60384: CALL_OW 2
60388: ST_TO_ADDR
60389: GO 60420
// result := Replace ( result , result + 1 , un ) ;
60391: LD_ADDR_VAR 0 3
60395: PUSH
60396: LD_VAR 0 3
60400: PPUSH
60401: LD_VAR 0 3
60405: PUSH
60406: LD_INT 1
60408: PLUS
60409: PPUSH
60410: LD_VAR 0 4
60414: PPUSH
60415: CALL_OW 1
60419: ST_TO_ADDR
60420: GO 60346
60422: POP
60423: POP
// end ;
60424: LD_VAR 0 3
60428: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
60429: LD_INT 0
60431: PPUSH
60432: PPUSH
60433: PPUSH
60434: PPUSH
60435: PPUSH
60436: PPUSH
60437: PPUSH
// result := [ ] ;
60438: LD_ADDR_VAR 0 4
60442: PUSH
60443: EMPTY
60444: ST_TO_ADDR
// if x - r < 0 then
60445: LD_VAR 0 1
60449: PUSH
60450: LD_VAR 0 3
60454: MINUS
60455: PUSH
60456: LD_INT 0
60458: LESS
60459: IFFALSE 60471
// min_x := 0 else
60461: LD_ADDR_VAR 0 8
60465: PUSH
60466: LD_INT 0
60468: ST_TO_ADDR
60469: GO 60487
// min_x := x - r ;
60471: LD_ADDR_VAR 0 8
60475: PUSH
60476: LD_VAR 0 1
60480: PUSH
60481: LD_VAR 0 3
60485: MINUS
60486: ST_TO_ADDR
// if y - r < 0 then
60487: LD_VAR 0 2
60491: PUSH
60492: LD_VAR 0 3
60496: MINUS
60497: PUSH
60498: LD_INT 0
60500: LESS
60501: IFFALSE 60513
// min_y := 0 else
60503: LD_ADDR_VAR 0 7
60507: PUSH
60508: LD_INT 0
60510: ST_TO_ADDR
60511: GO 60529
// min_y := y - r ;
60513: LD_ADDR_VAR 0 7
60517: PUSH
60518: LD_VAR 0 2
60522: PUSH
60523: LD_VAR 0 3
60527: MINUS
60528: ST_TO_ADDR
// max_x := x + r ;
60529: LD_ADDR_VAR 0 9
60533: PUSH
60534: LD_VAR 0 1
60538: PUSH
60539: LD_VAR 0 3
60543: PLUS
60544: ST_TO_ADDR
// max_y := y + r ;
60545: LD_ADDR_VAR 0 10
60549: PUSH
60550: LD_VAR 0 2
60554: PUSH
60555: LD_VAR 0 3
60559: PLUS
60560: ST_TO_ADDR
// for _x = min_x to max_x do
60561: LD_ADDR_VAR 0 5
60565: PUSH
60566: DOUBLE
60567: LD_VAR 0 8
60571: DEC
60572: ST_TO_ADDR
60573: LD_VAR 0 9
60577: PUSH
60578: FOR_TO
60579: IFFALSE 60680
// for _y = min_y to max_y do
60581: LD_ADDR_VAR 0 6
60585: PUSH
60586: DOUBLE
60587: LD_VAR 0 7
60591: DEC
60592: ST_TO_ADDR
60593: LD_VAR 0 10
60597: PUSH
60598: FOR_TO
60599: IFFALSE 60676
// begin if not ValidHex ( _x , _y ) then
60601: LD_VAR 0 5
60605: PPUSH
60606: LD_VAR 0 6
60610: PPUSH
60611: CALL_OW 488
60615: NOT
60616: IFFALSE 60620
// continue ;
60618: GO 60598
// if GetResourceTypeXY ( _x , _y ) then
60620: LD_VAR 0 5
60624: PPUSH
60625: LD_VAR 0 6
60629: PPUSH
60630: CALL_OW 283
60634: IFFALSE 60674
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
60636: LD_ADDR_VAR 0 4
60640: PUSH
60641: LD_VAR 0 4
60645: PPUSH
60646: LD_VAR 0 4
60650: PUSH
60651: LD_INT 1
60653: PLUS
60654: PPUSH
60655: LD_VAR 0 5
60659: PUSH
60660: LD_VAR 0 6
60664: PUSH
60665: EMPTY
60666: LIST
60667: LIST
60668: PPUSH
60669: CALL_OW 1
60673: ST_TO_ADDR
// end ;
60674: GO 60598
60676: POP
60677: POP
60678: GO 60578
60680: POP
60681: POP
// end ;
60682: LD_VAR 0 4
60686: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
60687: LD_INT 0
60689: PPUSH
60690: PPUSH
60691: PPUSH
60692: PPUSH
60693: PPUSH
60694: PPUSH
60695: PPUSH
60696: PPUSH
// if not units then
60697: LD_VAR 0 1
60701: NOT
60702: IFFALSE 60706
// exit ;
60704: GO 61131
// result := UnitFilter ( units , [ f_ok ] ) ;
60706: LD_ADDR_VAR 0 3
60710: PUSH
60711: LD_VAR 0 1
60715: PPUSH
60716: LD_INT 50
60718: PUSH
60719: EMPTY
60720: LIST
60721: PPUSH
60722: CALL_OW 72
60726: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
60727: LD_ADDR_VAR 0 8
60731: PUSH
60732: LD_VAR 0 1
60736: PUSH
60737: LD_INT 1
60739: ARRAY
60740: PPUSH
60741: CALL_OW 255
60745: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
60746: LD_ADDR_VAR 0 10
60750: PUSH
60751: LD_INT 29
60753: PUSH
60754: LD_EXP 86
60758: PUSH
60759: EMPTY
60760: LIST
60761: LIST
60762: ST_TO_ADDR
// if not result then
60763: LD_VAR 0 3
60767: NOT
60768: IFFALSE 60772
// exit ;
60770: GO 61131
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
60772: LD_ADDR_VAR 0 5
60776: PUSH
60777: LD_INT 81
60779: PUSH
60780: LD_VAR 0 8
60784: PUSH
60785: EMPTY
60786: LIST
60787: LIST
60788: PPUSH
60789: CALL_OW 69
60793: ST_TO_ADDR
// for i in result do
60794: LD_ADDR_VAR 0 4
60798: PUSH
60799: LD_VAR 0 3
60803: PUSH
60804: FOR_IN
60805: IFFALSE 61129
// begin tag := GetTag ( i ) + 1 ;
60807: LD_ADDR_VAR 0 9
60811: PUSH
60812: LD_VAR 0 4
60816: PPUSH
60817: CALL_OW 110
60821: PUSH
60822: LD_INT 1
60824: PLUS
60825: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
60826: LD_ADDR_VAR 0 7
60830: PUSH
60831: LD_VAR 0 4
60835: PPUSH
60836: CALL_OW 250
60840: PPUSH
60841: LD_VAR 0 4
60845: PPUSH
60846: CALL_OW 251
60850: PPUSH
60851: LD_INT 6
60853: PPUSH
60854: CALL 60429 0 3
60858: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
60859: LD_VAR 0 7
60863: PUSH
60864: LD_VAR 0 4
60868: PPUSH
60869: CALL_OW 264
60873: PUSH
60874: LD_VAR 0 10
60878: IN
60879: NOT
60880: AND
60881: IFFALSE 60920
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
60883: LD_VAR 0 4
60887: PPUSH
60888: LD_VAR 0 7
60892: PUSH
60893: LD_INT 1
60895: ARRAY
60896: PUSH
60897: LD_INT 1
60899: ARRAY
60900: PPUSH
60901: LD_VAR 0 7
60905: PUSH
60906: LD_INT 1
60908: ARRAY
60909: PUSH
60910: LD_INT 2
60912: ARRAY
60913: PPUSH
60914: CALL_OW 116
60918: GO 61127
// if path > tag then
60920: LD_VAR 0 2
60924: PUSH
60925: LD_VAR 0 9
60929: GREATER
60930: IFFALSE 61097
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
60932: LD_ADDR_VAR 0 6
60936: PUSH
60937: LD_VAR 0 5
60941: PPUSH
60942: LD_INT 91
60944: PUSH
60945: LD_VAR 0 4
60949: PUSH
60950: LD_INT 12
60952: PUSH
60953: EMPTY
60954: LIST
60955: LIST
60956: LIST
60957: PPUSH
60958: CALL_OW 72
60962: ST_TO_ADDR
// if nearEnemy then
60963: LD_VAR 0 6
60967: IFFALSE 60995
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
60969: LD_VAR 0 4
60973: PPUSH
60974: LD_VAR 0 6
60978: PPUSH
60979: LD_VAR 0 4
60983: PPUSH
60984: CALL_OW 74
60988: PPUSH
60989: CALL_OW 115
60993: GO 61095
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
60995: LD_VAR 0 4
60999: PPUSH
61000: LD_VAR 0 2
61004: PUSH
61005: LD_VAR 0 9
61009: ARRAY
61010: PUSH
61011: LD_INT 1
61013: ARRAY
61014: PPUSH
61015: LD_VAR 0 2
61019: PUSH
61020: LD_VAR 0 9
61024: ARRAY
61025: PUSH
61026: LD_INT 2
61028: ARRAY
61029: PPUSH
61030: CALL_OW 297
61034: PUSH
61035: LD_INT 6
61037: GREATER
61038: IFFALSE 61081
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
61040: LD_VAR 0 4
61044: PPUSH
61045: LD_VAR 0 2
61049: PUSH
61050: LD_VAR 0 9
61054: ARRAY
61055: PUSH
61056: LD_INT 1
61058: ARRAY
61059: PPUSH
61060: LD_VAR 0 2
61064: PUSH
61065: LD_VAR 0 9
61069: ARRAY
61070: PUSH
61071: LD_INT 2
61073: ARRAY
61074: PPUSH
61075: CALL_OW 114
61079: GO 61095
// SetTag ( i , tag ) ;
61081: LD_VAR 0 4
61085: PPUSH
61086: LD_VAR 0 9
61090: PPUSH
61091: CALL_OW 109
// end else
61095: GO 61127
// if enemy then
61097: LD_VAR 0 5
61101: IFFALSE 61127
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
61103: LD_VAR 0 4
61107: PPUSH
61108: LD_VAR 0 5
61112: PPUSH
61113: LD_VAR 0 4
61117: PPUSH
61118: CALL_OW 74
61122: PPUSH
61123: CALL_OW 115
// end ;
61127: GO 60804
61129: POP
61130: POP
// end ;
61131: LD_VAR 0 3
61135: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
61136: LD_INT 0
61138: PPUSH
61139: PPUSH
61140: PPUSH
// if not unit or IsInUnit ( unit ) then
61141: LD_VAR 0 1
61145: NOT
61146: PUSH
61147: LD_VAR 0 1
61151: PPUSH
61152: CALL_OW 310
61156: OR
61157: IFFALSE 61161
// exit ;
61159: GO 61252
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
61161: LD_ADDR_VAR 0 4
61165: PUSH
61166: LD_VAR 0 1
61170: PPUSH
61171: CALL_OW 250
61175: PPUSH
61176: LD_VAR 0 2
61180: PPUSH
61181: LD_INT 1
61183: PPUSH
61184: CALL_OW 272
61188: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
61189: LD_ADDR_VAR 0 5
61193: PUSH
61194: LD_VAR 0 1
61198: PPUSH
61199: CALL_OW 251
61203: PPUSH
61204: LD_VAR 0 2
61208: PPUSH
61209: LD_INT 1
61211: PPUSH
61212: CALL_OW 273
61216: ST_TO_ADDR
// if ValidHex ( x , y ) then
61217: LD_VAR 0 4
61221: PPUSH
61222: LD_VAR 0 5
61226: PPUSH
61227: CALL_OW 488
61231: IFFALSE 61252
// ComTurnXY ( unit , x , y ) ;
61233: LD_VAR 0 1
61237: PPUSH
61238: LD_VAR 0 4
61242: PPUSH
61243: LD_VAR 0 5
61247: PPUSH
61248: CALL_OW 118
// end ;
61252: LD_VAR 0 3
61256: RET
// export function SeeUnits ( side , units ) ; var i ; begin
61257: LD_INT 0
61259: PPUSH
61260: PPUSH
// result := false ;
61261: LD_ADDR_VAR 0 3
61265: PUSH
61266: LD_INT 0
61268: ST_TO_ADDR
// if not units then
61269: LD_VAR 0 2
61273: NOT
61274: IFFALSE 61278
// exit ;
61276: GO 61323
// for i in units do
61278: LD_ADDR_VAR 0 4
61282: PUSH
61283: LD_VAR 0 2
61287: PUSH
61288: FOR_IN
61289: IFFALSE 61321
// if See ( side , i ) then
61291: LD_VAR 0 1
61295: PPUSH
61296: LD_VAR 0 4
61300: PPUSH
61301: CALL_OW 292
61305: IFFALSE 61319
// begin result := true ;
61307: LD_ADDR_VAR 0 3
61311: PUSH
61312: LD_INT 1
61314: ST_TO_ADDR
// exit ;
61315: POP
61316: POP
61317: GO 61323
// end ;
61319: GO 61288
61321: POP
61322: POP
// end ;
61323: LD_VAR 0 3
61327: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
61328: LD_INT 0
61330: PPUSH
61331: PPUSH
61332: PPUSH
61333: PPUSH
// if not unit or not points then
61334: LD_VAR 0 1
61338: NOT
61339: PUSH
61340: LD_VAR 0 2
61344: NOT
61345: OR
61346: IFFALSE 61350
// exit ;
61348: GO 61440
// dist := 99999 ;
61350: LD_ADDR_VAR 0 5
61354: PUSH
61355: LD_INT 99999
61357: ST_TO_ADDR
// for i in points do
61358: LD_ADDR_VAR 0 4
61362: PUSH
61363: LD_VAR 0 2
61367: PUSH
61368: FOR_IN
61369: IFFALSE 61438
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
61371: LD_ADDR_VAR 0 6
61375: PUSH
61376: LD_VAR 0 1
61380: PPUSH
61381: LD_VAR 0 4
61385: PUSH
61386: LD_INT 1
61388: ARRAY
61389: PPUSH
61390: LD_VAR 0 4
61394: PUSH
61395: LD_INT 2
61397: ARRAY
61398: PPUSH
61399: CALL_OW 297
61403: ST_TO_ADDR
// if tmpDist < dist then
61404: LD_VAR 0 6
61408: PUSH
61409: LD_VAR 0 5
61413: LESS
61414: IFFALSE 61436
// begin result := i ;
61416: LD_ADDR_VAR 0 3
61420: PUSH
61421: LD_VAR 0 4
61425: ST_TO_ADDR
// dist := tmpDist ;
61426: LD_ADDR_VAR 0 5
61430: PUSH
61431: LD_VAR 0 6
61435: ST_TO_ADDR
// end ; end ;
61436: GO 61368
61438: POP
61439: POP
// end ; end_of_file
61440: LD_VAR 0 3
61444: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
61445: LD_VAR 0 1
61449: PUSH
61450: LD_INT 200
61452: DOUBLE
61453: GREATEREQUAL
61454: IFFALSE 61462
61456: LD_INT 299
61458: DOUBLE
61459: LESSEQUAL
61460: IFTRUE 61464
61462: GO 61496
61464: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
61465: LD_VAR 0 1
61469: PPUSH
61470: LD_VAR 0 2
61474: PPUSH
61475: LD_VAR 0 3
61479: PPUSH
61480: LD_VAR 0 4
61484: PPUSH
61485: LD_VAR 0 5
61489: PPUSH
61490: CALL 3496 0 5
61494: GO 61573
61496: LD_INT 300
61498: DOUBLE
61499: GREATEREQUAL
61500: IFFALSE 61508
61502: LD_INT 399
61504: DOUBLE
61505: LESSEQUAL
61506: IFTRUE 61510
61508: GO 61572
61510: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
61511: LD_VAR 0 1
61515: PPUSH
61516: LD_VAR 0 2
61520: PPUSH
61521: LD_VAR 0 3
61525: PPUSH
61526: LD_VAR 0 4
61530: PPUSH
61531: LD_VAR 0 5
61535: PPUSH
61536: LD_VAR 0 6
61540: PPUSH
61541: LD_VAR 0 7
61545: PPUSH
61546: LD_VAR 0 8
61550: PPUSH
61551: LD_VAR 0 9
61555: PPUSH
61556: LD_VAR 0 10
61560: PPUSH
61561: LD_VAR 0 11
61565: PPUSH
61566: CALL 19206 0 11
61570: GO 61573
61572: POP
// end ;
61573: PPOPN 11
61575: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
61576: LD_VAR 0 1
61580: PPUSH
61581: LD_VAR 0 2
61585: PPUSH
61586: LD_VAR 0 3
61590: PPUSH
61591: LD_VAR 0 4
61595: PPUSH
61596: LD_VAR 0 5
61600: PPUSH
61601: CALL 3488 0 5
// end ; end_of_file
61605: PPOPN 5
61607: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
61608: LD_VAR 0 1
61612: PPUSH
61613: LD_VAR 0 2
61617: PPUSH
61618: LD_VAR 0 3
61622: PPUSH
61623: LD_VAR 0 4
61627: PPUSH
61628: LD_VAR 0 5
61632: PPUSH
61633: LD_VAR 0 6
61637: PPUSH
61638: CALL 7401 0 6
// end ;
61642: PPOPN 6
61644: END
