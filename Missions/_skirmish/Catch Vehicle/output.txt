// starting begin ResetFog ;
   0: CALL_OW 335
// PrepareGame ;
   4: CALL 13 0 0
// PrepareUnits ;
   8: CALL 299 0 0
// end ;
  12: END
// export mechanics , time_to_destroy , players , sib_bomb , time , veh_amount ; export p1 , p2 , p3 , p4 , p5 ; function PrepareGame ; var debug , i ; begin
  13: LD_INT 0
  15: PPUSH
  16: PPUSH
  17: PPUSH
// debug := false ;
  18: LD_ADDR_VAR 0 2
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// if debug then
  26: LD_VAR 0 2
  30: IFFALSE 81
// begin mechanics := 5 ;
  32: LD_ADDR_EXP 1
  36: PUSH
  37: LD_INT 5
  39: ST_TO_ADDR
// time_to_destroy := 45 ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_INT 45
  47: ST_TO_ADDR
// players := 4 ;
  48: LD_ADDR_EXP 3
  52: PUSH
  53: LD_INT 4
  55: ST_TO_ADDR
// sib_bomb := true ;
  56: LD_ADDR_EXP 4
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// time := 3 3$00 ;
  64: LD_ADDR_EXP 5
  68: PUSH
  69: LD_INT 6300
  71: ST_TO_ADDR
// FogOff ( 1 ) ;
  72: LD_INT 1
  74: PPUSH
  75: CALL_OW 344
// end else
  79: GO 214
// begin time := 3 3$00 ;
  81: LD_ADDR_EXP 5
  85: PUSH
  86: LD_INT 6300
  88: ST_TO_ADDR
// players := 4 ;
  89: LD_ADDR_EXP 3
  93: PUSH
  94: LD_INT 4
  96: ST_TO_ADDR
// sib_bomb := true ;
  97: LD_ADDR_EXP 4
 101: PUSH
 102: LD_INT 1
 104: ST_TO_ADDR
// mechanics := 4 ;
 105: LD_ADDR_EXP 1
 109: PUSH
 110: LD_INT 4
 112: ST_TO_ADDR
// mechanics := [ 3 , 4 , 5 ] [ GetMultiplayerSetting ( 0 ) ] ;
 113: LD_ADDR_EXP 1
 117: PUSH
 118: LD_INT 3
 120: PUSH
 121: LD_INT 4
 123: PUSH
 124: LD_INT 5
 126: PUSH
 127: EMPTY
 128: LIST
 129: LIST
 130: LIST
 131: PUSH
 132: LD_INT 0
 134: PPUSH
 135: CALL_OW 426
 139: ARRAY
 140: ST_TO_ADDR
// players := [ 3 , 4 , 5 ] [ GetMultiplayerSetting ( 1 ) ] ;
 141: LD_ADDR_EXP 3
 145: PUSH
 146: LD_INT 3
 148: PUSH
 149: LD_INT 4
 151: PUSH
 152: LD_INT 5
 154: PUSH
 155: EMPTY
 156: LIST
 157: LIST
 158: LIST
 159: PUSH
 160: LD_INT 1
 162: PPUSH
 163: CALL_OW 426
 167: ARRAY
 168: ST_TO_ADDR
// time := [ 3 3$00 , 5 5$00 , 10 10$00 ] [ GetMultiplayerSetting ( 2 ) ] ;
 169: LD_ADDR_EXP 5
 173: PUSH
 174: LD_INT 6300
 176: PUSH
 177: LD_INT 10500
 179: PUSH
 180: LD_INT 21000
 182: PUSH
 183: EMPTY
 184: LIST
 185: LIST
 186: LIST
 187: PUSH
 188: LD_INT 2
 190: PPUSH
 191: CALL_OW 426
 195: ARRAY
 196: ST_TO_ADDR
// sib_bomb := GetMultiplayerSetting ( 3 ) - 1 ;
 197: LD_ADDR_EXP 4
 201: PUSH
 202: LD_INT 3
 204: PPUSH
 205: CALL_OW 426
 209: PUSH
 210: LD_INT 1
 212: MINUS
 213: ST_TO_ADDR
// end ; p1 := 0 ;
 214: LD_ADDR_EXP 7
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// p2 := 0 ;
 222: LD_ADDR_EXP 8
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// p3 := 0 ;
 230: LD_ADDR_EXP 9
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// p4 := 0 ;
 238: LD_ADDR_EXP 10
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// p5 := 0 ;
 246: LD_ADDR_EXP 11
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// veh_amount := 12 ;
 254: LD_ADDR_EXP 6
 258: PUSH
 259: LD_INT 12
 261: ST_TO_ADDR
// for i = 1 to 7 do
 262: LD_ADDR_VAR 0 3
 266: PUSH
 267: DOUBLE
 268: LD_INT 1
 270: DEC
 271: ST_TO_ADDR
 272: LD_INT 7
 274: PUSH
 275: FOR_TO
 276: IFFALSE 292
// ChangeSideFog ( i , 8 ) ;
 278: LD_VAR 0 3
 282: PPUSH
 283: LD_INT 8
 285: PPUSH
 286: CALL_OW 343
 290: GO 275
 292: POP
 293: POP
// end ; end_of_file
 294: LD_VAR 0 1
 298: RET
// export function PrepareUnits ; var i , side ; begin
 299: LD_INT 0
 301: PPUSH
 302: PPUSH
 303: PPUSH
// side := players ;
 304: LD_ADDR_VAR 0 3
 308: PUSH
 309: LD_EXP 3
 313: ST_TO_ADDR
// uc_nation := 1 ;
 314: LD_ADDR_OWVAR 21
 318: PUSH
 319: LD_INT 1
 321: ST_TO_ADDR
// for i = 1 to mechanics do
 322: LD_ADDR_VAR 0 2
 326: PUSH
 327: DOUBLE
 328: LD_INT 1
 330: DEC
 331: ST_TO_ADDR
 332: LD_EXP 1
 336: PUSH
 337: FOR_TO
 338: IFFALSE 402
// for side = 1 to players do
 340: LD_ADDR_VAR 0 3
 344: PUSH
 345: DOUBLE
 346: LD_INT 1
 348: DEC
 349: ST_TO_ADDR
 350: LD_EXP 3
 354: PUSH
 355: FOR_TO
 356: IFFALSE 398
// begin uc_side := side ;
 358: LD_ADDR_OWVAR 20
 362: PUSH
 363: LD_VAR 0 3
 367: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
 368: LD_INT 0
 370: PPUSH
 371: LD_INT 3
 373: PPUSH
 374: LD_INT 10
 376: PPUSH
 377: CALL_OW 380
// PlaceUnitArea ( CreateHuman , mech_area , false ) ;
 381: CALL_OW 44
 385: PPUSH
 386: LD_INT 6
 388: PPUSH
 389: LD_INT 0
 391: PPUSH
 392: CALL_OW 49
// end ;
 396: GO 355
 398: POP
 399: POP
 400: GO 337
 402: POP
 403: POP
// end ;
 404: LD_VAR 0 1
 408: RET
// function ToSpawn ( side ) ; begin
 409: LD_INT 0
 411: PPUSH
// uc_side := side ;
 412: LD_ADDR_OWVAR 20
 416: PUSH
 417: LD_VAR 0 1
 421: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
 422: LD_INT 0
 424: PPUSH
 425: LD_INT 3
 427: PPUSH
 428: LD_INT 10
 430: PPUSH
 431: CALL_OW 380
// PlaceUnitArea ( CreateHuman , mech_area , false ) ;
 435: CALL_OW 44
 439: PPUSH
 440: LD_INT 6
 442: PPUSH
 443: LD_INT 0
 445: PPUSH
 446: CALL_OW 49
// end ;
 450: LD_VAR 0 2
 454: RET
// every 0 0$13 trigger time do var i , filter ;
 455: LD_EXP 5
 459: IFFALSE 569
 461: GO 463
 463: DISABLE
 464: LD_INT 0
 466: PPUSH
 467: PPUSH
// begin enable ;
 468: ENABLE
// for i = 1 to players do
 469: LD_ADDR_VAR 0 1
 473: PUSH
 474: DOUBLE
 475: LD_INT 1
 477: DEC
 478: ST_TO_ADDR
 479: LD_EXP 3
 483: PUSH
 484: FOR_TO
 485: IFFALSE 567
// begin filter := FilterAllUnits ( [ [ [ f_side , i ] , [ f_class , 3 ] , [ f_type , unit_human ] ] ] ) ;
 487: LD_ADDR_VAR 0 2
 491: PUSH
 492: LD_INT 22
 494: PUSH
 495: LD_VAR 0 1
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: PUSH
 504: LD_INT 25
 506: PUSH
 507: LD_INT 3
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: PUSH
 514: LD_INT 21
 516: PUSH
 517: LD_INT 1
 519: PUSH
 520: EMPTY
 521: LIST
 522: LIST
 523: PUSH
 524: EMPTY
 525: LIST
 526: LIST
 527: LIST
 528: PUSH
 529: EMPTY
 530: LIST
 531: PPUSH
 532: CALL_OW 69
 536: ST_TO_ADDR
// if filter < mechanics then
 537: LD_VAR 0 2
 541: PUSH
 542: LD_EXP 1
 546: LESS
 547: IFFALSE 565
// begin Wait ( 0 0$03 ) ;
 549: LD_INT 105
 551: PPUSH
 552: CALL_OW 67
// ToSpawn ( i ) ;
 556: LD_VAR 0 1
 560: PPUSH
 561: CALL 409 0 1
// end ; end ;
 565: GO 484
 567: POP
 568: POP
// end ;
 569: PPOPN 2
 571: END
// every 0 0$01 trigger time do var i , filter , filter2 , vehicles ;
 572: LD_EXP 5
 576: IFFALSE 943
 578: GO 580
 580: DISABLE
 581: LD_INT 0
 583: PPUSH
 584: PPUSH
 585: PPUSH
 586: PPUSH
// begin enable ;
 587: ENABLE
// filter2 := FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_not , [ f_side , 0 ] ] , [ f_not , [ f_side , 1 ] ] ] ) ;
 588: LD_ADDR_VAR 0 3
 592: PUSH
 593: LD_INT 21
 595: PUSH
 596: LD_INT 2
 598: PUSH
 599: EMPTY
 600: LIST
 601: LIST
 602: PUSH
 603: LD_INT 3
 605: PUSH
 606: LD_INT 22
 608: PUSH
 609: LD_INT 0
 611: PUSH
 612: EMPTY
 613: LIST
 614: LIST
 615: PUSH
 616: EMPTY
 617: LIST
 618: LIST
 619: PUSH
 620: LD_INT 3
 622: PUSH
 623: LD_INT 22
 625: PUSH
 626: LD_INT 1
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: PUSH
 633: EMPTY
 634: LIST
 635: LIST
 636: PUSH
 637: EMPTY
 638: LIST
 639: LIST
 640: LIST
 641: PPUSH
 642: CALL_OW 69
 646: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_side , 1 ] ] ] ) ;
 647: LD_ADDR_VAR 0 2
 651: PUSH
 652: LD_INT 21
 654: PUSH
 655: LD_INT 1
 657: PUSH
 658: EMPTY
 659: LIST
 660: LIST
 661: PUSH
 662: LD_INT 3
 664: PUSH
 665: LD_INT 54
 667: PUSH
 668: EMPTY
 669: LIST
 670: PUSH
 671: EMPTY
 672: LIST
 673: LIST
 674: PUSH
 675: LD_INT 3
 677: PUSH
 678: LD_INT 22
 680: PUSH
 681: LD_INT 1
 683: PUSH
 684: EMPTY
 685: LIST
 686: LIST
 687: PUSH
 688: EMPTY
 689: LIST
 690: LIST
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: LIST
 696: PPUSH
 697: CALL_OW 69
 701: ST_TO_ADDR
// vehicles := FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 702: LD_ADDR_VAR 0 4
 706: PUSH
 707: LD_INT 21
 709: PUSH
 710: LD_INT 2
 712: PUSH
 713: EMPTY
 714: LIST
 715: LIST
 716: PUSH
 717: LD_INT 58
 719: PUSH
 720: EMPTY
 721: LIST
 722: PUSH
 723: EMPTY
 724: LIST
 725: LIST
 726: PPUSH
 727: CALL_OW 69
 731: ST_TO_ADDR
// if filter and vehicles then
 732: LD_VAR 0 2
 736: PUSH
 737: LD_VAR 0 4
 741: AND
 742: IFFALSE 879
// for i = 1 to filter do
 744: LD_ADDR_VAR 0 1
 748: PUSH
 749: DOUBLE
 750: LD_INT 1
 752: DEC
 753: ST_TO_ADDR
 754: LD_VAR 0 2
 758: PUSH
 759: FOR_TO
 760: IFFALSE 877
// if not HasTask ( filter [ i ] ) and IsOk ( filter [ i ] ) then
 762: LD_VAR 0 2
 766: PUSH
 767: LD_VAR 0 1
 771: ARRAY
 772: PPUSH
 773: CALL_OW 314
 777: NOT
 778: PUSH
 779: LD_VAR 0 2
 783: PUSH
 784: LD_VAR 0 1
 788: ARRAY
 789: PPUSH
 790: CALL_OW 302
 794: AND
 795: IFFALSE 875
// if GetDistUnits ( filter [ i ] , NearestUnitToUnit ( vehicles , filter [ i ] ) ) < 45 then
 797: LD_VAR 0 2
 801: PUSH
 802: LD_VAR 0 1
 806: ARRAY
 807: PPUSH
 808: LD_VAR 0 4
 812: PPUSH
 813: LD_VAR 0 2
 817: PUSH
 818: LD_VAR 0 1
 822: ARRAY
 823: PPUSH
 824: CALL_OW 74
 828: PPUSH
 829: CALL_OW 296
 833: PUSH
 834: LD_INT 45
 836: LESS
 837: IFFALSE 875
// ComEnterUnit ( filter [ i ] , NearestUnitToUnit ( vehicles , filter [ i ] ) ) ;
 839: LD_VAR 0 2
 843: PUSH
 844: LD_VAR 0 1
 848: ARRAY
 849: PPUSH
 850: LD_VAR 0 4
 854: PPUSH
 855: LD_VAR 0 2
 859: PUSH
 860: LD_VAR 0 1
 864: ARRAY
 865: PPUSH
 866: CALL_OW 74
 870: PPUSH
 871: CALL_OW 120
 875: GO 759
 877: POP
 878: POP
// if filter2 then
 879: LD_VAR 0 3
 883: IFFALSE 943
// for i = 1 to filter2 do
 885: LD_ADDR_VAR 0 1
 889: PUSH
 890: DOUBLE
 891: LD_INT 1
 893: DEC
 894: ST_TO_ADDR
 895: LD_VAR 0 3
 899: PUSH
 900: FOR_TO
 901: IFFALSE 941
// if not HasTask ( filter2 [ i ] ) then
 903: LD_VAR 0 3
 907: PUSH
 908: LD_VAR 0 1
 912: ARRAY
 913: PPUSH
 914: CALL_OW 314
 918: NOT
 919: IFFALSE 939
// ComMoveToArea ( filter2 [ i ] , exit_area ) ;
 921: LD_VAR 0 3
 925: PUSH
 926: LD_VAR 0 1
 930: ARRAY
 931: PPUSH
 932: LD_INT 4
 934: PPUSH
 935: CALL_OW 113
 939: GO 900
 941: POP
 942: POP
// end ; end_of_file
 943: PPOPN 4
 945: END
// export function SpawnCar ( chas , area ) ; var i , e , veh , ar_chassis , ru_chassis , us_chassis , ar_weapons , ru_weapons , us_weapons , chassis , engine , weapon ; begin
 946: LD_INT 0
 948: PPUSH
 949: PPUSH
 950: PPUSH
 951: PPUSH
 952: PPUSH
 953: PPUSH
 954: PPUSH
 955: PPUSH
 956: PPUSH
 957: PPUSH
 958: PPUSH
 959: PPUSH
 960: PPUSH
// uc_side := 0 ;
 961: LD_ADDR_OWVAR 20
 965: PUSH
 966: LD_INT 0
 968: ST_TO_ADDR
// uc_nation := Rand ( 1 , 3 ) ;
 969: LD_ADDR_OWVAR 21
 973: PUSH
 974: LD_INT 1
 976: PPUSH
 977: LD_INT 3
 979: PPUSH
 980: CALL_OW 12
 984: ST_TO_ADDR
// ar_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ;
 985: LD_ADDR_VAR 0 7
 989: PUSH
 990: LD_INT 11
 992: PUSH
 993: LD_INT 12
 995: PUSH
 996: LD_INT 13
 998: PUSH
 999: LD_INT 14
1001: PUSH
1002: EMPTY
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: ST_TO_ADDR
// ru_chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ;
1008: LD_ADDR_VAR 0 8
1012: PUSH
1013: LD_INT 21
1015: PUSH
1016: LD_INT 22
1018: PUSH
1019: LD_INT 23
1021: PUSH
1022: LD_INT 24
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: ST_TO_ADDR
// us_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ;
1031: LD_ADDR_VAR 0 9
1035: PUSH
1036: LD_INT 1
1038: PUSH
1039: LD_INT 2
1041: PUSH
1042: LD_INT 3
1044: PUSH
1045: LD_INT 4
1047: PUSH
1048: LD_INT 5
1050: PUSH
1051: EMPTY
1052: LIST
1053: LIST
1054: LIST
1055: LIST
1056: LIST
1057: ST_TO_ADDR
// if chas > 0 then
1058: LD_VAR 0 1
1062: PUSH
1063: LD_INT 0
1065: GREATER
1066: IFFALSE 1080
// vc_chassis := chas else
1068: LD_ADDR_OWVAR 37
1072: PUSH
1073: LD_VAR 0 1
1077: ST_TO_ADDR
1078: GO 1173
// begin case uc_nation of 1 :
1080: LD_OWVAR 21
1084: PUSH
1085: LD_INT 1
1087: DOUBLE
1088: EQUAL
1089: IFTRUE 1093
1091: GO 1106
1093: POP
// chassis := us_chassis ; 2 :
1094: LD_ADDR_VAR 0 13
1098: PUSH
1099: LD_VAR 0 9
1103: ST_TO_ADDR
1104: GO 1149
1106: LD_INT 2
1108: DOUBLE
1109: EQUAL
1110: IFTRUE 1114
1112: GO 1127
1114: POP
// chassis := ar_chassis ; 3 :
1115: LD_ADDR_VAR 0 13
1119: PUSH
1120: LD_VAR 0 7
1124: ST_TO_ADDR
1125: GO 1149
1127: LD_INT 3
1129: DOUBLE
1130: EQUAL
1131: IFTRUE 1135
1133: GO 1148
1135: POP
// chassis := ru_chassis ; end ;
1136: LD_ADDR_VAR 0 13
1140: PUSH
1141: LD_VAR 0 8
1145: ST_TO_ADDR
1146: GO 1149
1148: POP
// vc_chassis := chassis [ Rand ( 1 , chassis ) ] ;
1149: LD_ADDR_OWVAR 37
1153: PUSH
1154: LD_VAR 0 13
1158: PUSH
1159: LD_INT 1
1161: PPUSH
1162: LD_VAR 0 13
1166: PPUSH
1167: CALL_OW 12
1171: ARRAY
1172: ST_TO_ADDR
// end ; if vc_chassis in [ ar_hovercraft , ar_light_trike , us_light_wheeled ] then
1173: LD_OWVAR 37
1177: PUSH
1178: LD_INT 11
1180: PUSH
1181: LD_INT 12
1183: PUSH
1184: LD_INT 1
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: LIST
1191: IN
1192: IFFALSE 1212
// engine := Rand ( 1 , 2 ) else
1194: LD_ADDR_VAR 0 14
1198: PUSH
1199: LD_INT 1
1201: PPUSH
1202: LD_INT 2
1204: PPUSH
1205: CALL_OW 12
1209: ST_TO_ADDR
1210: GO 1324
// begin if not vc_chassis in [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , us_heavy_tracked , us_morphling ] then
1212: LD_OWVAR 37
1216: PUSH
1217: LD_INT 21
1219: PUSH
1220: LD_INT 22
1222: PUSH
1223: LD_INT 23
1225: PUSH
1226: LD_INT 24
1228: PUSH
1229: LD_INT 4
1231: PUSH
1232: LD_INT 5
1234: PUSH
1235: EMPTY
1236: LIST
1237: LIST
1238: LIST
1239: LIST
1240: LIST
1241: LIST
1242: IN
1243: NOT
1244: IFFALSE 1264
// engine := Rand ( 1 , 3 ) else
1246: LD_ADDR_VAR 0 14
1250: PUSH
1251: LD_INT 1
1253: PPUSH
1254: LD_INT 3
1256: PPUSH
1257: CALL_OW 12
1261: ST_TO_ADDR
1262: GO 1280
// e := Rand ( 1 , 2 ) ;
1264: LD_ADDR_VAR 0 5
1268: PUSH
1269: LD_INT 1
1271: PPUSH
1272: LD_INT 2
1274: PPUSH
1275: CALL_OW 12
1279: ST_TO_ADDR
// case e of 1 :
1280: LD_VAR 0 5
1284: PUSH
1285: LD_INT 1
1287: DOUBLE
1288: EQUAL
1289: IFTRUE 1293
1291: GO 1304
1293: POP
// engine := engine_combustion ; 2 :
1294: LD_ADDR_VAR 0 14
1298: PUSH
1299: LD_INT 1
1301: ST_TO_ADDR
1302: GO 1324
1304: LD_INT 2
1306: DOUBLE
1307: EQUAL
1308: IFTRUE 1312
1310: GO 1323
1312: POP
// engine := engine_siberite ; end ;
1313: LD_ADDR_VAR 0 14
1317: PUSH
1318: LD_INT 3
1320: ST_TO_ADDR
1321: GO 1324
1323: POP
// end ; vc_engine := engine ;
1324: LD_ADDR_OWVAR 39
1328: PUSH
1329: LD_VAR 0 14
1333: ST_TO_ADDR
// vc_control := control_manual ;
1334: LD_ADDR_OWVAR 38
1338: PUSH
1339: LD_INT 1
1341: ST_TO_ADDR
// ar_weapons := [ ar_multimissile_ballista , ar_double_machine_gun , ar_light_gun , ar_radar , ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb , ar_flame_thrower ] ;
1342: LD_ADDR_VAR 0 10
1346: PUSH
1347: LD_INT 22
1349: PUSH
1350: LD_INT 24
1352: PUSH
1353: LD_INT 23
1355: PUSH
1356: LD_INT 30
1358: PUSH
1359: LD_INT 25
1361: PUSH
1362: LD_INT 27
1364: PUSH
1365: LD_INT 28
1367: PUSH
1368: LD_INT 29
1370: PUSH
1371: LD_INT 26
1373: PUSH
1374: EMPTY
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: LIST
1382: LIST
1383: LIST
1384: ST_TO_ADDR
// ru_weapons := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , 98 , ru_rocket_launcher , ru_heavy_gun , ru_rocket , ru_bulldozer , ru_time_lapser ] ;
1385: LD_ADDR_VAR 0 11
1389: PUSH
1390: LD_INT 42
1392: PUSH
1393: LD_INT 43
1395: PUSH
1396: LD_INT 44
1398: PUSH
1399: LD_INT 98
1401: PUSH
1402: LD_INT 45
1404: PUSH
1405: LD_INT 46
1407: PUSH
1408: LD_INT 47
1410: PUSH
1411: LD_INT 53
1413: PUSH
1414: LD_INT 49
1416: PUSH
1417: EMPTY
1418: LIST
1419: LIST
1420: LIST
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: LIST
1427: ST_TO_ADDR
// us_weapons := [ us_machine_gun , us_light_gun , us_radar , us_gatling_gun , us_double_gun , us_rocket_launcher , us_laser , us_heavy_gun , us_bulldozer , us_double_laser ] ;
1428: LD_ADDR_VAR 0 12
1432: PUSH
1433: LD_INT 2
1435: PUSH
1436: LD_INT 3
1438: PUSH
1439: LD_INT 11
1441: PUSH
1442: LD_INT 4
1444: PUSH
1445: LD_INT 5
1447: PUSH
1448: LD_INT 7
1450: PUSH
1451: LD_INT 9
1453: PUSH
1454: LD_INT 6
1456: PUSH
1457: LD_INT 14
1459: PUSH
1460: LD_INT 10
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: LIST
1473: LIST
1474: ST_TO_ADDR
// if uc_nation = nation_arabian then
1475: LD_OWVAR 21
1479: PUSH
1480: LD_INT 2
1482: EQUAL
1483: IFFALSE 1550
// begin if vc_chassis in [ ar_hovercraft , ar_light_trike ] then
1485: LD_OWVAR 37
1489: PUSH
1490: LD_INT 11
1492: PUSH
1493: LD_INT 12
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: IN
1500: IFFALSE 1526
// weapon := ar_weapons [ Rand ( 1 , 3 ) ] else
1502: LD_ADDR_VAR 0 15
1506: PUSH
1507: LD_VAR 0 10
1511: PUSH
1512: LD_INT 1
1514: PPUSH
1515: LD_INT 3
1517: PPUSH
1518: CALL_OW 12
1522: ARRAY
1523: ST_TO_ADDR
1524: GO 1550
// weapon := ar_weapons [ Rand ( 1 , ar_weapons ) ] ;
1526: LD_ADDR_VAR 0 15
1530: PUSH
1531: LD_VAR 0 10
1535: PUSH
1536: LD_INT 1
1538: PPUSH
1539: LD_VAR 0 10
1543: PPUSH
1544: CALL_OW 12
1548: ARRAY
1549: ST_TO_ADDR
// end ; if uc_nation = nation_russian then
1550: LD_OWVAR 21
1554: PUSH
1555: LD_INT 3
1557: EQUAL
1558: IFFALSE 1625
// begin if vc_chassis in [ ru_medium_wheeled , ru_medium_tracked ] then
1560: LD_OWVAR 37
1564: PUSH
1565: LD_INT 21
1567: PUSH
1568: LD_INT 22
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: IN
1575: IFFALSE 1601
// weapon := ru_weapons [ Rand ( 1 , 5 ) ] else
1577: LD_ADDR_VAR 0 15
1581: PUSH
1582: LD_VAR 0 11
1586: PUSH
1587: LD_INT 1
1589: PPUSH
1590: LD_INT 5
1592: PPUSH
1593: CALL_OW 12
1597: ARRAY
1598: ST_TO_ADDR
1599: GO 1625
// weapon := ru_weapons [ Rand ( 1 , ru_weapons ) ] ;
1601: LD_ADDR_VAR 0 15
1605: PUSH
1606: LD_VAR 0 11
1610: PUSH
1611: LD_INT 1
1613: PPUSH
1614: LD_VAR 0 11
1618: PPUSH
1619: CALL_OW 12
1623: ARRAY
1624: ST_TO_ADDR
// end ; if uc_nation = nation_american then
1625: LD_OWVAR 21
1629: PUSH
1630: LD_INT 1
1632: EQUAL
1633: IFFALSE 1742
// begin if vc_chassis = us_light_wheeled then
1635: LD_OWVAR 37
1639: PUSH
1640: LD_INT 1
1642: EQUAL
1643: IFFALSE 1667
// weapon := us_weapons [ Rand ( 1 , 3 ) ] ;
1645: LD_ADDR_VAR 0 15
1649: PUSH
1650: LD_VAR 0 12
1654: PUSH
1655: LD_INT 1
1657: PPUSH
1658: LD_INT 3
1660: PPUSH
1661: CALL_OW 12
1665: ARRAY
1666: ST_TO_ADDR
// if vc_chassis in [ us_medium_tracked , us_medium_wheeled ] then
1667: LD_OWVAR 37
1671: PUSH
1672: LD_INT 3
1674: PUSH
1675: LD_INT 2
1677: PUSH
1678: EMPTY
1679: LIST
1680: LIST
1681: IN
1682: IFFALSE 1708
// weapon := us_weapons [ Rand ( 1 , 7 ) ] else
1684: LD_ADDR_VAR 0 15
1688: PUSH
1689: LD_VAR 0 12
1693: PUSH
1694: LD_INT 1
1696: PPUSH
1697: LD_INT 7
1699: PPUSH
1700: CALL_OW 12
1704: ARRAY
1705: ST_TO_ADDR
1706: GO 1742
// if vc_chassis <> us_light_wheeled then
1708: LD_OWVAR 37
1712: PUSH
1713: LD_INT 1
1715: NONEQUAL
1716: IFFALSE 1742
// weapon := us_weapons [ Rand ( 1 , us_weapons ) ] ;
1718: LD_ADDR_VAR 0 15
1722: PUSH
1723: LD_VAR 0 12
1727: PUSH
1728: LD_INT 1
1730: PPUSH
1731: LD_VAR 0 12
1735: PPUSH
1736: CALL_OW 12
1740: ARRAY
1741: ST_TO_ADDR
// end ; vc_weapon := weapon ;
1742: LD_ADDR_OWVAR 40
1746: PUSH
1747: LD_VAR 0 15
1751: ST_TO_ADDR
// veh := CreateVehicle ;
1752: LD_ADDR_VAR 0 6
1756: PUSH
1757: CALL_OW 45
1761: ST_TO_ADDR
// PlaceUnitArea ( veh , area , true ) ;
1762: LD_VAR 0 6
1766: PPUSH
1767: LD_VAR 0 2
1771: PPUSH
1772: LD_INT 1
1774: PPUSH
1775: CALL_OW 49
// end ;
1779: LD_VAR 0 3
1783: RET
// export function SpawnSibRocket ( area ) ; var veh , p ; begin
1784: LD_INT 0
1786: PPUSH
1787: PPUSH
1788: PPUSH
// uc_side := 0 ;
1789: LD_ADDR_OWVAR 20
1793: PUSH
1794: LD_INT 0
1796: ST_TO_ADDR
// p := Rand ( 1 , 2 ) ;
1797: LD_ADDR_VAR 0 4
1801: PUSH
1802: LD_INT 1
1804: PPUSH
1805: LD_INT 2
1807: PPUSH
1808: CALL_OW 12
1812: ST_TO_ADDR
// case p of 1 :
1813: LD_VAR 0 4
1817: PUSH
1818: LD_INT 1
1820: DOUBLE
1821: EQUAL
1822: IFTRUE 1826
1824: GO 1869
1826: POP
// begin uc_nation := nation_american ;
1827: LD_ADDR_OWVAR 21
1831: PUSH
1832: LD_INT 1
1834: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
1835: LD_ADDR_OWVAR 37
1839: PUSH
1840: LD_INT 4
1842: ST_TO_ADDR
// vc_engine := engine_siberite ;
1843: LD_ADDR_OWVAR 39
1847: PUSH
1848: LD_INT 3
1850: ST_TO_ADDR
// vc_control := control_manual ;
1851: LD_ADDR_OWVAR 38
1855: PUSH
1856: LD_INT 1
1858: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
1859: LD_ADDR_OWVAR 40
1863: PUSH
1864: LD_INT 8
1866: ST_TO_ADDR
// end ; 2 :
1867: GO 1921
1869: LD_INT 2
1871: DOUBLE
1872: EQUAL
1873: IFTRUE 1877
1875: GO 1920
1877: POP
// begin uc_nation := nation_russian ;
1878: LD_ADDR_OWVAR 21
1882: PUSH
1883: LD_INT 3
1885: ST_TO_ADDR
// vc_chassis := ru_heavy_tracked ;
1886: LD_ADDR_OWVAR 37
1890: PUSH
1891: LD_INT 24
1893: ST_TO_ADDR
// vc_engine := engine_siberite ;
1894: LD_ADDR_OWVAR 39
1898: PUSH
1899: LD_INT 3
1901: ST_TO_ADDR
// vc_control := control_manual ;
1902: LD_ADDR_OWVAR 38
1906: PUSH
1907: LD_INT 1
1909: ST_TO_ADDR
// vc_weapon := ru_siberium_rocket ;
1910: LD_ADDR_OWVAR 40
1914: PUSH
1915: LD_INT 48
1917: ST_TO_ADDR
// end ; end ;
1918: GO 1921
1920: POP
// veh := CreateVehicle ;
1921: LD_ADDR_VAR 0 3
1925: PUSH
1926: CALL_OW 45
1930: ST_TO_ADDR
// PlaceUnitArea ( veh , area , true ) ;
1931: LD_VAR 0 3
1935: PPUSH
1936: LD_VAR 0 1
1940: PPUSH
1941: LD_INT 1
1943: PPUSH
1944: CALL_OW 49
// end ;
1948: LD_VAR 0 2
1952: RET
// export function ScoreBoard ( veh ) ; var points ; begin
1953: LD_INT 0
1955: PPUSH
1956: PPUSH
// points := 0 ;
1957: LD_ADDR_VAR 0 3
1961: PUSH
1962: LD_INT 0
1964: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_light_trike , us_light_wheeled ] then
1965: LD_VAR 0 1
1969: PPUSH
1970: CALL_OW 265
1974: PUSH
1975: LD_INT 12
1977: PUSH
1978: LD_INT 1
1980: PUSH
1981: EMPTY
1982: LIST
1983: LIST
1984: IN
1985: IFFALSE 2001
// points := points + 10 ;
1987: LD_ADDR_VAR 0 3
1991: PUSH
1992: LD_VAR 0 3
1996: PUSH
1997: LD_INT 10
1999: PLUS
2000: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_medium_trike , ru_medium_wheeled , us_medium_wheeled ] then
2001: LD_VAR 0 1
2005: PPUSH
2006: CALL_OW 265
2010: PUSH
2011: LD_INT 13
2013: PUSH
2014: LD_INT 21
2016: PUSH
2017: LD_INT 2
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: LIST
2024: IN
2025: IFFALSE 2041
// points := points + 15 ;
2027: LD_ADDR_VAR 0 3
2031: PUSH
2032: LD_VAR 0 3
2036: PUSH
2037: LD_INT 15
2039: PLUS
2040: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_half_tracked , ru_medium_tracked , us_medium_tracked ] then
2041: LD_VAR 0 1
2045: PPUSH
2046: CALL_OW 265
2050: PUSH
2051: LD_INT 14
2053: PUSH
2054: LD_INT 22
2056: PUSH
2057: LD_INT 3
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: LIST
2064: IN
2065: IFFALSE 2081
// points := points + 20 ;
2067: LD_ADDR_VAR 0 3
2071: PUSH
2072: LD_VAR 0 3
2076: PUSH
2077: LD_INT 20
2079: PLUS
2080: ST_TO_ADDR
// if GetChassis ( veh ) in [ ru_heavy_wheeled , ru_heavy_tracked , us_heavy_tracked ] then
2081: LD_VAR 0 1
2085: PPUSH
2086: CALL_OW 265
2090: PUSH
2091: LD_INT 23
2093: PUSH
2094: LD_INT 24
2096: PUSH
2097: LD_INT 4
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: LIST
2104: IN
2105: IFFALSE 2121
// points := points + 25 ;
2107: LD_ADDR_VAR 0 3
2111: PUSH
2112: LD_VAR 0 3
2116: PUSH
2117: LD_INT 25
2119: PLUS
2120: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_hovercraft , us_morphling ] then
2121: LD_VAR 0 1
2125: PPUSH
2126: CALL_OW 265
2130: PUSH
2131: LD_INT 11
2133: PUSH
2134: LD_INT 5
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: IN
2141: IFFALSE 2157
// points := points + 30 ;
2143: LD_ADDR_VAR 0 3
2147: PUSH
2148: LD_VAR 0 3
2152: PUSH
2153: LD_INT 30
2155: PLUS
2156: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_combustion ] then
2157: LD_VAR 0 1
2161: PPUSH
2162: CALL_OW 262
2166: PUSH
2167: LD_INT 1
2169: PUSH
2170: EMPTY
2171: LIST
2172: EQUAL
2173: IFFALSE 2189
// points := points + 5 ;
2175: LD_ADDR_VAR 0 3
2179: PUSH
2180: LD_VAR 0 3
2184: PUSH
2185: LD_INT 5
2187: PLUS
2188: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_solar ] then
2189: LD_VAR 0 1
2193: PPUSH
2194: CALL_OW 262
2198: PUSH
2199: LD_INT 2
2201: PUSH
2202: EMPTY
2203: LIST
2204: EQUAL
2205: IFFALSE 2221
// points := points + 15 ;
2207: LD_ADDR_VAR 0 3
2211: PUSH
2212: LD_VAR 0 3
2216: PUSH
2217: LD_INT 15
2219: PLUS
2220: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_siberite ] then
2221: LD_VAR 0 1
2225: PPUSH
2226: CALL_OW 262
2230: PUSH
2231: LD_INT 3
2233: PUSH
2234: EMPTY
2235: LIST
2236: EQUAL
2237: IFFALSE 2253
// points := points + 25 ;
2239: LD_ADDR_VAR 0 3
2243: PUSH
2244: LD_VAR 0 3
2248: PUSH
2249: LD_INT 25
2251: PLUS
2252: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_multimissile_ballista , ar_double_machine_gun , ar_light_gun , ru_heavy_machine_gun , us_machine_gun , us_light_gun ] then
2253: LD_VAR 0 1
2257: PPUSH
2258: CALL_OW 264
2262: PUSH
2263: LD_INT 22
2265: PUSH
2266: LD_INT 24
2268: PUSH
2269: LD_INT 23
2271: PUSH
2272: LD_INT 42
2274: PUSH
2275: LD_INT 2
2277: PUSH
2278: LD_INT 3
2280: PUSH
2281: EMPTY
2282: LIST
2283: LIST
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: IN
2289: IFFALSE 2305
// points := points + 5 ;
2291: LD_ADDR_VAR 0 3
2295: PUSH
2296: LD_VAR 0 3
2300: PUSH
2301: LD_INT 5
2303: PLUS
2304: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_gatling_gun , ar_gun , ru_gatling_gun , ru_gun , us_gatling_gun , us_double_gun ] then
2305: LD_VAR 0 1
2309: PPUSH
2310: CALL_OW 264
2314: PUSH
2315: LD_INT 25
2317: PUSH
2318: LD_INT 27
2320: PUSH
2321: LD_INT 43
2323: PUSH
2324: LD_INT 44
2326: PUSH
2327: LD_INT 4
2329: PUSH
2330: LD_INT 5
2332: PUSH
2333: EMPTY
2334: LIST
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: LIST
2340: IN
2341: IFFALSE 2357
// points := points + 10 ;
2343: LD_ADDR_VAR 0 3
2347: PUSH
2348: LD_VAR 0 3
2352: PUSH
2353: LD_INT 10
2355: PLUS
2356: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher ] then
2357: LD_VAR 0 1
2361: PPUSH
2362: CALL_OW 264
2366: PUSH
2367: LD_INT 28
2369: PUSH
2370: LD_INT 45
2372: PUSH
2373: LD_INT 7
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: LIST
2380: IN
2381: IFFALSE 2397
// points := points + 20 ;
2383: LD_ADDR_VAR 0 3
2387: PUSH
2388: LD_VAR 0 3
2392: PUSH
2393: LD_INT 20
2395: PLUS
2396: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ru_heavy_gun , us_heavy_gun ] then
2397: LD_VAR 0 1
2401: PPUSH
2402: CALL_OW 264
2406: PUSH
2407: LD_INT 46
2409: PUSH
2410: LD_INT 6
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: IN
2417: IFFALSE 2433
// points := points + 25 ;
2419: LD_ADDR_VAR 0 3
2423: PUSH
2424: LD_VAR 0 3
2428: PUSH
2429: LD_INT 25
2431: PLUS
2432: ST_TO_ADDR
// if GetWeapon ( veh ) in [ us_laser , us_radar , ar_radar ] then
2433: LD_VAR 0 1
2437: PPUSH
2438: CALL_OW 264
2442: PUSH
2443: LD_INT 9
2445: PUSH
2446: LD_INT 11
2448: PUSH
2449: LD_INT 30
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: LIST
2456: IN
2457: IFFALSE 2473
// points := points + 30 ;
2459: LD_ADDR_VAR 0 3
2463: PUSH
2464: LD_VAR 0 3
2468: PUSH
2469: LD_INT 30
2471: PLUS
2472: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_selfpropelled_bomb , ru_time_lapser , ru_rocket , us_double_laser ] then
2473: LD_VAR 0 1
2477: PPUSH
2478: CALL_OW 264
2482: PUSH
2483: LD_INT 29
2485: PUSH
2486: LD_INT 49
2488: PUSH
2489: LD_INT 47
2491: PUSH
2492: LD_INT 10
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: LIST
2499: LIST
2500: IN
2501: IFFALSE 2517
// points := points + 50 ;
2503: LD_ADDR_VAR 0 3
2507: PUSH
2508: LD_VAR 0 3
2512: PUSH
2513: LD_INT 50
2515: PLUS
2516: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ru_siberium_rocket , us_siberium_rocket ] then
2517: LD_VAR 0 1
2521: PPUSH
2522: CALL_OW 264
2526: PUSH
2527: LD_INT 48
2529: PUSH
2530: LD_INT 8
2532: PUSH
2533: EMPTY
2534: LIST
2535: LIST
2536: IN
2537: IFFALSE 2553
// points := points + 100 ;
2539: LD_ADDR_VAR 0 3
2543: PUSH
2544: LD_VAR 0 3
2548: PUSH
2549: LD_INT 100
2551: PLUS
2552: ST_TO_ADDR
// result := points ;
2553: LD_ADDR_VAR 0 2
2557: PUSH
2558: LD_VAR 0 3
2562: ST_TO_ADDR
// end ; end_of_file
2563: LD_VAR 0 2
2567: RET
// every 0 0$01 trigger time do var filter , i , side , driver , un ;
2568: LD_EXP 5
2572: IFFALSE 3217
2574: GO 2576
2576: DISABLE
2577: LD_INT 0
2579: PPUSH
2580: PPUSH
2581: PPUSH
2582: PPUSH
2583: PPUSH
// begin enable ;
2584: ENABLE
// if tick < 36 then
2585: LD_OWVAR 1
2589: PUSH
2590: LD_INT 36
2592: LESS
2593: IFFALSE 2605
// SetAreaMapShow ( exit_area , 1 ) ;
2595: LD_INT 4
2597: PPUSH
2598: LD_INT 1
2600: PPUSH
2601: CALL_OW 424
// time := time - 0 0$01 ;
2605: LD_ADDR_EXP 5
2609: PUSH
2610: LD_EXP 5
2614: PUSH
2615: LD_INT 35
2617: MINUS
2618: ST_TO_ADDR
// if time = 0 0$00 then
2619: LD_EXP 5
2623: PUSH
2624: LD_INT 0
2626: EQUAL
2627: IFFALSE 2690
// if p1 > p2 and p1 > p3 and p1 > p4 and p1 > p5 then
2629: LD_EXP 7
2633: PUSH
2634: LD_EXP 8
2638: GREATER
2639: PUSH
2640: LD_EXP 7
2644: PUSH
2645: LD_EXP 9
2649: GREATER
2650: AND
2651: PUSH
2652: LD_EXP 7
2656: PUSH
2657: LD_EXP 10
2661: GREATER
2662: AND
2663: PUSH
2664: LD_EXP 7
2668: PUSH
2669: LD_EXP 11
2673: GREATER
2674: AND
2675: IFFALSE 2683
// YouWin else
2677: CALL_OW 103
2681: GO 2690
// YouLost (  ) ;
2683: LD_STRING 
2685: PPUSH
2686: CALL_OW 104
// filter := FilterUnitsInArea ( exit_area , [ f_type , unit_vehicle ] ) ;
2690: LD_ADDR_VAR 0 1
2694: PUSH
2695: LD_INT 4
2697: PPUSH
2698: LD_INT 21
2700: PUSH
2701: LD_INT 2
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: PPUSH
2708: CALL_OW 70
2712: ST_TO_ADDR
// if filter then
2713: LD_VAR 0 1
2717: IFFALSE 3007
// for i = 1 to filter do
2719: LD_ADDR_VAR 0 2
2723: PUSH
2724: DOUBLE
2725: LD_INT 1
2727: DEC
2728: ST_TO_ADDR
2729: LD_VAR 0 1
2733: PUSH
2734: FOR_TO
2735: IFFALSE 3005
// begin side := GetSide ( filter [ i ] ) ;
2737: LD_ADDR_VAR 0 3
2741: PUSH
2742: LD_VAR 0 1
2746: PUSH
2747: LD_VAR 0 2
2751: ARRAY
2752: PPUSH
2753: CALL_OW 255
2757: ST_TO_ADDR
// driver := IsDrivenBy ( filter [ i ] ) ;
2758: LD_ADDR_VAR 0 4
2762: PUSH
2763: LD_VAR 0 1
2767: PUSH
2768: LD_VAR 0 2
2772: ARRAY
2773: PPUSH
2774: CALL_OW 311
2778: ST_TO_ADDR
// un := filter [ i ] ;
2779: LD_ADDR_VAR 0 5
2783: PUSH
2784: LD_VAR 0 1
2788: PUSH
2789: LD_VAR 0 2
2793: ARRAY
2794: ST_TO_ADDR
// if IsInUnit ( driver ) then
2795: LD_VAR 0 4
2799: PPUSH
2800: CALL_OW 310
2804: IFFALSE 2815
// ComExitVehicle ( driver ) ;
2806: LD_VAR 0 4
2810: PPUSH
2811: CALL_OW 121
// Wait ( 0 0$0.3 ) ;
2815: LD_INT 10
2817: PPUSH
2818: CALL_OW 67
// RemoveUnit ( filter [ i ] ) ;
2822: LD_VAR 0 1
2826: PUSH
2827: LD_VAR 0 2
2831: ARRAY
2832: PPUSH
2833: CALL_OW 64
// case side of 1 :
2837: LD_VAR 0 3
2841: PUSH
2842: LD_INT 1
2844: DOUBLE
2845: EQUAL
2846: IFTRUE 2850
2848: GO 2874
2850: POP
// p1 := p1 + ScoreBoard ( un ) ; 2 :
2851: LD_ADDR_EXP 7
2855: PUSH
2856: LD_EXP 7
2860: PUSH
2861: LD_VAR 0 5
2865: PPUSH
2866: CALL 1953 0 1
2870: PLUS
2871: ST_TO_ADDR
2872: GO 3003
2874: LD_INT 2
2876: DOUBLE
2877: EQUAL
2878: IFTRUE 2882
2880: GO 2906
2882: POP
// p2 := p2 + ScoreBoard ( un ) ; 3 :
2883: LD_ADDR_EXP 8
2887: PUSH
2888: LD_EXP 8
2892: PUSH
2893: LD_VAR 0 5
2897: PPUSH
2898: CALL 1953 0 1
2902: PLUS
2903: ST_TO_ADDR
2904: GO 3003
2906: LD_INT 3
2908: DOUBLE
2909: EQUAL
2910: IFTRUE 2914
2912: GO 2938
2914: POP
// p3 := p3 + ScoreBoard ( un ) ; 4 :
2915: LD_ADDR_EXP 9
2919: PUSH
2920: LD_EXP 9
2924: PUSH
2925: LD_VAR 0 5
2929: PPUSH
2930: CALL 1953 0 1
2934: PLUS
2935: ST_TO_ADDR
2936: GO 3003
2938: LD_INT 4
2940: DOUBLE
2941: EQUAL
2942: IFTRUE 2946
2944: GO 2970
2946: POP
// p4 := p4 + ScoreBoard ( un ) ; 5 :
2947: LD_ADDR_EXP 10
2951: PUSH
2952: LD_EXP 10
2956: PUSH
2957: LD_VAR 0 5
2961: PPUSH
2962: CALL 1953 0 1
2966: PLUS
2967: ST_TO_ADDR
2968: GO 3003
2970: LD_INT 5
2972: DOUBLE
2973: EQUAL
2974: IFTRUE 2978
2976: GO 3002
2978: POP
// p5 := p5 + ScoreBoard ( un ) ; end ;
2979: LD_ADDR_EXP 11
2983: PUSH
2984: LD_EXP 11
2988: PUSH
2989: LD_VAR 0 5
2993: PPUSH
2994: CALL 1953 0 1
2998: PLUS
2999: ST_TO_ADDR
3000: GO 3003
3002: POP
// end ;
3003: GO 2734
3005: POP
3006: POP
// case players of 3 :
3007: LD_EXP 3
3011: PUSH
3012: LD_INT 3
3014: DOUBLE
3015: EQUAL
3016: IFTRUE 3020
3018: GO 3070
3020: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 ] ;
3021: LD_ADDR_OWVAR 47
3025: PUSH
3026: LD_STRING #tick
3028: PUSH
3029: LD_EXP 5
3033: PUSH
3034: LD_STRING #player1
3036: PUSH
3037: LD_EXP 7
3041: PUSH
3042: LD_STRING #player2
3044: PUSH
3045: LD_EXP 8
3049: PUSH
3050: LD_STRING #player3
3052: PUSH
3053: LD_EXP 9
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: LIST
3064: LIST
3065: LIST
3066: LIST
3067: ST_TO_ADDR
// end ; 4 :
3068: GO 3217
3070: LD_INT 4
3072: DOUBLE
3073: EQUAL
3074: IFTRUE 3078
3076: GO 3138
3078: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 , #player4 , p4 ] ;
3079: LD_ADDR_OWVAR 47
3083: PUSH
3084: LD_STRING #tick
3086: PUSH
3087: LD_EXP 5
3091: PUSH
3092: LD_STRING #player1
3094: PUSH
3095: LD_EXP 7
3099: PUSH
3100: LD_STRING #player2
3102: PUSH
3103: LD_EXP 8
3107: PUSH
3108: LD_STRING #player3
3110: PUSH
3111: LD_EXP 9
3115: PUSH
3116: LD_STRING #player4
3118: PUSH
3119: LD_EXP 10
3123: PUSH
3124: EMPTY
3125: LIST
3126: LIST
3127: LIST
3128: LIST
3129: LIST
3130: LIST
3131: LIST
3132: LIST
3133: LIST
3134: LIST
3135: ST_TO_ADDR
// end ; 5 :
3136: GO 3217
3138: LD_INT 5
3140: DOUBLE
3141: EQUAL
3142: IFTRUE 3146
3144: GO 3216
3146: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 , #player4 , p4 , #player5 , p5 ] ;
3147: LD_ADDR_OWVAR 47
3151: PUSH
3152: LD_STRING #tick
3154: PUSH
3155: LD_EXP 5
3159: PUSH
3160: LD_STRING #player1
3162: PUSH
3163: LD_EXP 7
3167: PUSH
3168: LD_STRING #player2
3170: PUSH
3171: LD_EXP 8
3175: PUSH
3176: LD_STRING #player3
3178: PUSH
3179: LD_EXP 9
3183: PUSH
3184: LD_STRING #player4
3186: PUSH
3187: LD_EXP 10
3191: PUSH
3192: LD_STRING #player5
3194: PUSH
3195: LD_EXP 11
3199: PUSH
3200: EMPTY
3201: LIST
3202: LIST
3203: LIST
3204: LIST
3205: LIST
3206: LIST
3207: LIST
3208: LIST
3209: LIST
3210: LIST
3211: LIST
3212: LIST
3213: ST_TO_ADDR
// end ; end ;
3214: GO 3217
3216: POP
// end ;
3217: PPOPN 5
3219: END
// every 0 0$05 trigger time do var chance , p ;
3220: LD_EXP 5
3224: IFFALSE 3371
3226: GO 3228
3228: DISABLE
3229: LD_INT 0
3231: PPUSH
3232: PPUSH
// begin enable ;
3233: ENABLE
// Wait ( Rand ( 0 0$01 , 0 0$06 ) ) ;
3234: LD_INT 35
3236: PPUSH
3237: LD_INT 210
3239: PPUSH
3240: CALL_OW 12
3244: PPUSH
3245: CALL_OW 67
// if FilterAllUnits ( [ f_type , unit_vehicle ] ) < veh_amount then
3249: LD_INT 21
3251: PUSH
3252: LD_INT 2
3254: PUSH
3255: EMPTY
3256: LIST
3257: LIST
3258: PPUSH
3259: CALL_OW 69
3263: PUSH
3264: LD_EXP 6
3268: LESS
3269: IFFALSE 3371
// begin SpawnCar ( false , veh_spawn ) ;
3271: LD_INT 0
3273: PPUSH
3274: LD_INT 5
3276: PPUSH
3277: CALL 946 0 2
// if sib_bomb and FilterAllUnits ( [ f_or , [ [ f_weapon , us_siberium_rocket ] , [ f_weapon , ru_siberium_rocket ] ] ] ) = 0 then
3281: LD_EXP 4
3285: PUSH
3286: LD_INT 2
3288: PUSH
3289: LD_INT 34
3291: PUSH
3292: LD_INT 8
3294: PUSH
3295: EMPTY
3296: LIST
3297: LIST
3298: PUSH
3299: LD_INT 34
3301: PUSH
3302: LD_INT 48
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: PUSH
3309: EMPTY
3310: LIST
3311: LIST
3312: PUSH
3313: EMPTY
3314: LIST
3315: LIST
3316: PPUSH
3317: CALL_OW 69
3321: PUSH
3322: LD_INT 0
3324: EQUAL
3325: AND
3326: IFFALSE 3371
// begin chance := 23 ;
3328: LD_ADDR_VAR 0 1
3332: PUSH
3333: LD_INT 23
3335: ST_TO_ADDR
// p := Rand ( 0 , 100 ) ;
3336: LD_ADDR_VAR 0 2
3340: PUSH
3341: LD_INT 0
3343: PPUSH
3344: LD_INT 100
3346: PPUSH
3347: CALL_OW 12
3351: ST_TO_ADDR
// if p < chance then
3352: LD_VAR 0 2
3356: PUSH
3357: LD_VAR 0 1
3361: LESS
3362: IFFALSE 3371
// SpawnSibRocket ( veh_spawn ) ;
3364: LD_INT 5
3366: PPUSH
3367: CALL 1784 0 1
// end ; end ; end ; end_of_file
3371: PPOPN 2
3373: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
3374: LD_INT 0
3376: PPUSH
3377: PPUSH
3378: PPUSH
3379: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
3380: LD_VAR 0 1
3384: PPUSH
3385: CALL_OW 264
3389: PUSH
3390: LD_INT 91
3392: EQUAL
3393: IFFALSE 3465
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
3395: LD_INT 68
3397: PPUSH
3398: LD_VAR 0 1
3402: PPUSH
3403: CALL_OW 255
3407: PPUSH
3408: CALL_OW 321
3412: PUSH
3413: LD_INT 2
3415: EQUAL
3416: IFFALSE 3428
// eff := 70 else
3418: LD_ADDR_VAR 0 4
3422: PUSH
3423: LD_INT 70
3425: ST_TO_ADDR
3426: GO 3436
// eff := 30 ;
3428: LD_ADDR_VAR 0 4
3432: PUSH
3433: LD_INT 30
3435: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
3436: LD_VAR 0 1
3440: PPUSH
3441: CALL_OW 250
3445: PPUSH
3446: LD_VAR 0 1
3450: PPUSH
3451: CALL_OW 251
3455: PPUSH
3456: LD_VAR 0 4
3460: PPUSH
3461: CALL_OW 495
// end ; end ;
3465: LD_VAR 0 2
3469: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
3470: LD_INT 0
3472: PPUSH
// end ;
3473: LD_VAR 0 4
3477: RET
// export function SOS_Command ( cmd ) ; begin
3478: LD_INT 0
3480: PPUSH
// end ;
3481: LD_VAR 0 2
3485: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
3486: LD_INT 0
3488: PPUSH
// end ;
3489: LD_VAR 0 6
3493: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
3494: LD_INT 0
3496: PPUSH
3497: PPUSH
// if not vehicle or not factory then
3498: LD_VAR 0 1
3502: NOT
3503: PUSH
3504: LD_VAR 0 2
3508: NOT
3509: OR
3510: IFFALSE 3514
// exit ;
3512: GO 3745
// if factoryWaypoints >= factory then
3514: LD_EXP 81
3518: PUSH
3519: LD_VAR 0 2
3523: GREATEREQUAL
3524: IFFALSE 3745
// if factoryWaypoints [ factory ] then
3526: LD_EXP 81
3530: PUSH
3531: LD_VAR 0 2
3535: ARRAY
3536: IFFALSE 3745
// begin if GetControl ( vehicle ) = control_manual then
3538: LD_VAR 0 1
3542: PPUSH
3543: CALL_OW 263
3547: PUSH
3548: LD_INT 1
3550: EQUAL
3551: IFFALSE 3632
// begin driver := IsDrivenBy ( vehicle ) ;
3553: LD_ADDR_VAR 0 4
3557: PUSH
3558: LD_VAR 0 1
3562: PPUSH
3563: CALL_OW 311
3567: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
3568: LD_VAR 0 4
3572: PPUSH
3573: LD_EXP 81
3577: PUSH
3578: LD_VAR 0 2
3582: ARRAY
3583: PUSH
3584: LD_INT 3
3586: ARRAY
3587: PPUSH
3588: LD_EXP 81
3592: PUSH
3593: LD_VAR 0 2
3597: ARRAY
3598: PUSH
3599: LD_INT 4
3601: ARRAY
3602: PPUSH
3603: CALL_OW 171
// AddComExitVehicle ( driver ) ;
3607: LD_VAR 0 4
3611: PPUSH
3612: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
3616: LD_VAR 0 4
3620: PPUSH
3621: LD_VAR 0 2
3625: PPUSH
3626: CALL_OW 180
// end else
3630: GO 3745
// if GetControl ( vehicle ) = control_remote then
3632: LD_VAR 0 1
3636: PPUSH
3637: CALL_OW 263
3641: PUSH
3642: LD_INT 2
3644: EQUAL
3645: IFFALSE 3706
// begin wait ( 0 0$2 ) ;
3647: LD_INT 70
3649: PPUSH
3650: CALL_OW 67
// if Connect ( vehicle ) then
3654: LD_VAR 0 1
3658: PPUSH
3659: CALL 32212 0 1
3663: IFFALSE 3704
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
3665: LD_VAR 0 1
3669: PPUSH
3670: LD_EXP 81
3674: PUSH
3675: LD_VAR 0 2
3679: ARRAY
3680: PUSH
3681: LD_INT 3
3683: ARRAY
3684: PPUSH
3685: LD_EXP 81
3689: PUSH
3690: LD_VAR 0 2
3694: ARRAY
3695: PUSH
3696: LD_INT 4
3698: ARRAY
3699: PPUSH
3700: CALL_OW 171
// end else
3704: GO 3745
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
3706: LD_VAR 0 1
3710: PPUSH
3711: LD_EXP 81
3715: PUSH
3716: LD_VAR 0 2
3720: ARRAY
3721: PUSH
3722: LD_INT 3
3724: ARRAY
3725: PPUSH
3726: LD_EXP 81
3730: PUSH
3731: LD_VAR 0 2
3735: ARRAY
3736: PUSH
3737: LD_INT 4
3739: ARRAY
3740: PPUSH
3741: CALL_OW 171
// end ; end ;
3745: LD_VAR 0 3
3749: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
3750: LD_INT 0
3752: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
3753: LD_VAR 0 1
3757: PUSH
3758: LD_INT 250
3760: EQUAL
3761: PUSH
3762: LD_VAR 0 2
3766: PPUSH
3767: CALL_OW 264
3771: PUSH
3772: LD_INT 81
3774: EQUAL
3775: AND
3776: IFFALSE 3797
// MinerPlaceMine ( unit , x , y ) ;
3778: LD_VAR 0 2
3782: PPUSH
3783: LD_VAR 0 4
3787: PPUSH
3788: LD_VAR 0 5
3792: PPUSH
3793: CALL 6621 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
3797: LD_VAR 0 1
3801: PUSH
3802: LD_INT 251
3804: EQUAL
3805: PUSH
3806: LD_VAR 0 2
3810: PPUSH
3811: CALL_OW 264
3815: PUSH
3816: LD_INT 81
3818: EQUAL
3819: AND
3820: IFFALSE 3841
// MinerDetonateMine ( unit , x , y ) ;
3822: LD_VAR 0 2
3826: PPUSH
3827: LD_VAR 0 4
3831: PPUSH
3832: LD_VAR 0 5
3836: PPUSH
3837: CALL 6896 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
3841: LD_VAR 0 1
3845: PUSH
3846: LD_INT 252
3848: EQUAL
3849: PUSH
3850: LD_VAR 0 2
3854: PPUSH
3855: CALL_OW 264
3859: PUSH
3860: LD_INT 81
3862: EQUAL
3863: AND
3864: IFFALSE 3885
// MinerCreateMinefield ( unit , x , y ) ;
3866: LD_VAR 0 2
3870: PPUSH
3871: LD_VAR 0 4
3875: PPUSH
3876: LD_VAR 0 5
3880: PPUSH
3881: CALL 7313 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
3885: LD_VAR 0 1
3889: PUSH
3890: LD_INT 253
3892: EQUAL
3893: PUSH
3894: LD_VAR 0 2
3898: PPUSH
3899: CALL_OW 257
3903: PUSH
3904: LD_INT 5
3906: EQUAL
3907: AND
3908: IFFALSE 3929
// ComBinocular ( unit , x , y ) ;
3910: LD_VAR 0 2
3914: PPUSH
3915: LD_VAR 0 4
3919: PPUSH
3920: LD_VAR 0 5
3924: PPUSH
3925: CALL 7682 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
3929: LD_VAR 0 1
3933: PUSH
3934: LD_INT 254
3936: EQUAL
3937: PUSH
3938: LD_VAR 0 2
3942: PPUSH
3943: CALL_OW 264
3947: PUSH
3948: LD_INT 99
3950: EQUAL
3951: AND
3952: PUSH
3953: LD_VAR 0 3
3957: PPUSH
3958: CALL_OW 263
3962: PUSH
3963: LD_INT 3
3965: EQUAL
3966: AND
3967: IFFALSE 3983
// HackDestroyVehicle ( unit , selectedUnit ) ;
3969: LD_VAR 0 2
3973: PPUSH
3974: LD_VAR 0 3
3978: PPUSH
3979: CALL 5985 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
3983: LD_VAR 0 1
3987: PUSH
3988: LD_INT 255
3990: EQUAL
3991: PUSH
3992: LD_VAR 0 2
3996: PPUSH
3997: CALL_OW 264
4001: PUSH
4002: LD_INT 14
4004: PUSH
4005: LD_INT 53
4007: PUSH
4008: EMPTY
4009: LIST
4010: LIST
4011: IN
4012: AND
4013: PUSH
4014: LD_VAR 0 4
4018: PPUSH
4019: LD_VAR 0 5
4023: PPUSH
4024: CALL_OW 488
4028: AND
4029: IFFALSE 4053
// CutTreeXYR ( unit , x , y , 12 ) ;
4031: LD_VAR 0 2
4035: PPUSH
4036: LD_VAR 0 4
4040: PPUSH
4041: LD_VAR 0 5
4045: PPUSH
4046: LD_INT 12
4048: PPUSH
4049: CALL 4148 0 4
// if cmd = 256 then
4053: LD_VAR 0 1
4057: PUSH
4058: LD_INT 256
4060: EQUAL
4061: IFFALSE 4082
// SetFactoryWaypoint ( unit , x , y ) ;
4063: LD_VAR 0 2
4067: PPUSH
4068: LD_VAR 0 4
4072: PPUSH
4073: LD_VAR 0 5
4077: PPUSH
4078: CALL 22593 0 3
// if cmd = 257 then
4082: LD_VAR 0 1
4086: PUSH
4087: LD_INT 257
4089: EQUAL
4090: IFFALSE 4111
// SetWarehouseGatheringPoint ( unit , x , y ) ;
4092: LD_VAR 0 2
4096: PPUSH
4097: LD_VAR 0 4
4101: PPUSH
4102: LD_VAR 0 5
4106: PPUSH
4107: CALL 22955 0 3
// if cmd = 258 then
4111: LD_VAR 0 1
4115: PUSH
4116: LD_INT 258
4118: EQUAL
4119: IFFALSE 4143
// BurnTreeXYR ( unit , x , y , 8 ) ;
4121: LD_VAR 0 2
4125: PPUSH
4126: LD_VAR 0 4
4130: PPUSH
4131: LD_VAR 0 5
4135: PPUSH
4136: LD_INT 8
4138: PPUSH
4139: CALL 4542 0 4
// end ;
4143: LD_VAR 0 6
4147: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
4148: LD_INT 0
4150: PPUSH
4151: PPUSH
4152: PPUSH
4153: PPUSH
4154: PPUSH
4155: PPUSH
4156: PPUSH
4157: PPUSH
4158: PPUSH
// if not IsOk ( bulldozer ) or not ValidHex ( x , y ) or not r then
4159: LD_VAR 0 1
4163: PPUSH
4164: CALL_OW 302
4168: NOT
4169: PUSH
4170: LD_VAR 0 2
4174: PPUSH
4175: LD_VAR 0 3
4179: PPUSH
4180: CALL_OW 488
4184: NOT
4185: OR
4186: PUSH
4187: LD_VAR 0 4
4191: NOT
4192: OR
4193: IFFALSE 4197
// exit ;
4195: GO 4537
// list := [ ] ;
4197: LD_ADDR_VAR 0 13
4201: PUSH
4202: EMPTY
4203: ST_TO_ADDR
// if x - r < 0 then
4204: LD_VAR 0 2
4208: PUSH
4209: LD_VAR 0 4
4213: MINUS
4214: PUSH
4215: LD_INT 0
4217: LESS
4218: IFFALSE 4230
// min_x := 0 else
4220: LD_ADDR_VAR 0 7
4224: PUSH
4225: LD_INT 0
4227: ST_TO_ADDR
4228: GO 4246
// min_x := x - r ;
4230: LD_ADDR_VAR 0 7
4234: PUSH
4235: LD_VAR 0 2
4239: PUSH
4240: LD_VAR 0 4
4244: MINUS
4245: ST_TO_ADDR
// if y - r < 0 then
4246: LD_VAR 0 3
4250: PUSH
4251: LD_VAR 0 4
4255: MINUS
4256: PUSH
4257: LD_INT 0
4259: LESS
4260: IFFALSE 4272
// min_y := 0 else
4262: LD_ADDR_VAR 0 8
4266: PUSH
4267: LD_INT 0
4269: ST_TO_ADDR
4270: GO 4288
// min_y := y - r ;
4272: LD_ADDR_VAR 0 8
4276: PUSH
4277: LD_VAR 0 3
4281: PUSH
4282: LD_VAR 0 4
4286: MINUS
4287: ST_TO_ADDR
// max_x := x + r ;
4288: LD_ADDR_VAR 0 9
4292: PUSH
4293: LD_VAR 0 2
4297: PUSH
4298: LD_VAR 0 4
4302: PLUS
4303: ST_TO_ADDR
// max_y := y + r ;
4304: LD_ADDR_VAR 0 10
4308: PUSH
4309: LD_VAR 0 3
4313: PUSH
4314: LD_VAR 0 4
4318: PLUS
4319: ST_TO_ADDR
// for _x = min_x to max_x do
4320: LD_ADDR_VAR 0 11
4324: PUSH
4325: DOUBLE
4326: LD_VAR 0 7
4330: DEC
4331: ST_TO_ADDR
4332: LD_VAR 0 9
4336: PUSH
4337: FOR_TO
4338: IFFALSE 4455
// for _y = min_y to max_y do
4340: LD_ADDR_VAR 0 12
4344: PUSH
4345: DOUBLE
4346: LD_VAR 0 8
4350: DEC
4351: ST_TO_ADDR
4352: LD_VAR 0 10
4356: PUSH
4357: FOR_TO
4358: IFFALSE 4451
// begin if not ValidHex ( _x , _y ) then
4360: LD_VAR 0 11
4364: PPUSH
4365: LD_VAR 0 12
4369: PPUSH
4370: CALL_OW 488
4374: NOT
4375: IFFALSE 4379
// continue ;
4377: GO 4357
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
4379: LD_VAR 0 11
4383: PPUSH
4384: LD_VAR 0 12
4388: PPUSH
4389: CALL_OW 351
4393: PUSH
4394: LD_VAR 0 11
4398: PPUSH
4399: LD_VAR 0 12
4403: PPUSH
4404: CALL_OW 554
4408: AND
4409: IFFALSE 4449
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
4411: LD_ADDR_VAR 0 13
4415: PUSH
4416: LD_VAR 0 13
4420: PPUSH
4421: LD_VAR 0 13
4425: PUSH
4426: LD_INT 1
4428: PLUS
4429: PPUSH
4430: LD_VAR 0 11
4434: PUSH
4435: LD_VAR 0 12
4439: PUSH
4440: EMPTY
4441: LIST
4442: LIST
4443: PPUSH
4444: CALL_OW 2
4448: ST_TO_ADDR
// end ;
4449: GO 4357
4451: POP
4452: POP
4453: GO 4337
4455: POP
4456: POP
// if not list then
4457: LD_VAR 0 13
4461: NOT
4462: IFFALSE 4466
// exit ;
4464: GO 4537
// for i in list do
4466: LD_ADDR_VAR 0 6
4470: PUSH
4471: LD_VAR 0 13
4475: PUSH
4476: FOR_IN
4477: IFFALSE 4535
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
4479: LD_VAR 0 1
4483: PPUSH
4484: LD_STRING M
4486: PUSH
4487: LD_VAR 0 6
4491: PUSH
4492: LD_INT 1
4494: ARRAY
4495: PUSH
4496: LD_VAR 0 6
4500: PUSH
4501: LD_INT 2
4503: ARRAY
4504: PUSH
4505: LD_INT 0
4507: PUSH
4508: LD_INT 0
4510: PUSH
4511: LD_INT 0
4513: PUSH
4514: LD_INT 0
4516: PUSH
4517: EMPTY
4518: LIST
4519: LIST
4520: LIST
4521: LIST
4522: LIST
4523: LIST
4524: LIST
4525: PUSH
4526: EMPTY
4527: LIST
4528: PPUSH
4529: CALL_OW 447
4533: GO 4476
4535: POP
4536: POP
// end ;
4537: LD_VAR 0 5
4541: RET
// function BurnTreeXYR ( flame , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
4542: LD_INT 0
4544: PPUSH
4545: PPUSH
4546: PPUSH
4547: PPUSH
4548: PPUSH
4549: PPUSH
4550: PPUSH
4551: PPUSH
4552: PPUSH
// if not IsOk ( flame ) or not ValidHex ( x , y ) or not r then
4553: LD_VAR 0 1
4557: PPUSH
4558: CALL_OW 302
4562: NOT
4563: PUSH
4564: LD_VAR 0 2
4568: PPUSH
4569: LD_VAR 0 3
4573: PPUSH
4574: CALL_OW 488
4578: NOT
4579: OR
4580: PUSH
4581: LD_VAR 0 4
4585: NOT
4586: OR
4587: IFFALSE 4591
// exit ;
4589: GO 4939
// list := [ ] ;
4591: LD_ADDR_VAR 0 13
4595: PUSH
4596: EMPTY
4597: ST_TO_ADDR
// if x - r < 0 then
4598: LD_VAR 0 2
4602: PUSH
4603: LD_VAR 0 4
4607: MINUS
4608: PUSH
4609: LD_INT 0
4611: LESS
4612: IFFALSE 4624
// min_x := 0 else
4614: LD_ADDR_VAR 0 7
4618: PUSH
4619: LD_INT 0
4621: ST_TO_ADDR
4622: GO 4640
// min_x := x - r ;
4624: LD_ADDR_VAR 0 7
4628: PUSH
4629: LD_VAR 0 2
4633: PUSH
4634: LD_VAR 0 4
4638: MINUS
4639: ST_TO_ADDR
// if y - r < 0 then
4640: LD_VAR 0 3
4644: PUSH
4645: LD_VAR 0 4
4649: MINUS
4650: PUSH
4651: LD_INT 0
4653: LESS
4654: IFFALSE 4666
// min_y := 0 else
4656: LD_ADDR_VAR 0 8
4660: PUSH
4661: LD_INT 0
4663: ST_TO_ADDR
4664: GO 4682
// min_y := y - r ;
4666: LD_ADDR_VAR 0 8
4670: PUSH
4671: LD_VAR 0 3
4675: PUSH
4676: LD_VAR 0 4
4680: MINUS
4681: ST_TO_ADDR
// max_x := x + r ;
4682: LD_ADDR_VAR 0 9
4686: PUSH
4687: LD_VAR 0 2
4691: PUSH
4692: LD_VAR 0 4
4696: PLUS
4697: ST_TO_ADDR
// max_y := y + r ;
4698: LD_ADDR_VAR 0 10
4702: PUSH
4703: LD_VAR 0 3
4707: PUSH
4708: LD_VAR 0 4
4712: PLUS
4713: ST_TO_ADDR
// for _x = min_x to max_x do
4714: LD_ADDR_VAR 0 11
4718: PUSH
4719: DOUBLE
4720: LD_VAR 0 7
4724: DEC
4725: ST_TO_ADDR
4726: LD_VAR 0 9
4730: PUSH
4731: FOR_TO
4732: IFFALSE 4849
// for _y = min_y to max_y do
4734: LD_ADDR_VAR 0 12
4738: PUSH
4739: DOUBLE
4740: LD_VAR 0 8
4744: DEC
4745: ST_TO_ADDR
4746: LD_VAR 0 10
4750: PUSH
4751: FOR_TO
4752: IFFALSE 4845
// begin if not ValidHex ( _x , _y ) then
4754: LD_VAR 0 11
4758: PPUSH
4759: LD_VAR 0 12
4763: PPUSH
4764: CALL_OW 488
4768: NOT
4769: IFFALSE 4773
// continue ;
4771: GO 4751
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
4773: LD_VAR 0 11
4777: PPUSH
4778: LD_VAR 0 12
4782: PPUSH
4783: CALL_OW 351
4787: PUSH
4788: LD_VAR 0 11
4792: PPUSH
4793: LD_VAR 0 12
4797: PPUSH
4798: CALL_OW 554
4802: AND
4803: IFFALSE 4843
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
4805: LD_ADDR_VAR 0 13
4809: PUSH
4810: LD_VAR 0 13
4814: PPUSH
4815: LD_VAR 0 13
4819: PUSH
4820: LD_INT 1
4822: PLUS
4823: PPUSH
4824: LD_VAR 0 11
4828: PUSH
4829: LD_VAR 0 12
4833: PUSH
4834: EMPTY
4835: LIST
4836: LIST
4837: PPUSH
4838: CALL_OW 2
4842: ST_TO_ADDR
// end ;
4843: GO 4751
4845: POP
4846: POP
4847: GO 4731
4849: POP
4850: POP
// if not list then
4851: LD_VAR 0 13
4855: NOT
4856: IFFALSE 4860
// exit ;
4858: GO 4939
// list := SortHexesByDistanceFromUnit ( flame , list , true , true ) ;
4860: LD_ADDR_VAR 0 13
4864: PUSH
4865: LD_VAR 0 1
4869: PPUSH
4870: LD_VAR 0 13
4874: PPUSH
4875: LD_INT 1
4877: PPUSH
4878: LD_INT 1
4880: PPUSH
4881: CALL 29354 0 4
4885: ST_TO_ADDR
// ComStop ( flame ) ;
4886: LD_VAR 0 1
4890: PPUSH
4891: CALL_OW 141
// for i in list do
4895: LD_ADDR_VAR 0 6
4899: PUSH
4900: LD_VAR 0 13
4904: PUSH
4905: FOR_IN
4906: IFFALSE 4937
// AddComAttackPlace ( flame , i [ 1 ] , i [ 2 ] ) ;
4908: LD_VAR 0 1
4912: PPUSH
4913: LD_VAR 0 6
4917: PUSH
4918: LD_INT 1
4920: ARRAY
4921: PPUSH
4922: LD_VAR 0 6
4926: PUSH
4927: LD_INT 2
4929: ARRAY
4930: PPUSH
4931: CALL_OW 176
4935: GO 4905
4937: POP
4938: POP
// end ;
4939: LD_VAR 0 5
4943: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
4944: LD_EXP 12
4948: NOT
4949: IFFALSE 4999
4951: GO 4953
4953: DISABLE
// begin initHack := true ;
4954: LD_ADDR_EXP 12
4958: PUSH
4959: LD_INT 1
4961: ST_TO_ADDR
// hackTanks := [ ] ;
4962: LD_ADDR_EXP 13
4966: PUSH
4967: EMPTY
4968: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
4969: LD_ADDR_EXP 14
4973: PUSH
4974: EMPTY
4975: ST_TO_ADDR
// hackLimit := 3 ;
4976: LD_ADDR_EXP 15
4980: PUSH
4981: LD_INT 3
4983: ST_TO_ADDR
// hackDist := 12 ;
4984: LD_ADDR_EXP 16
4988: PUSH
4989: LD_INT 12
4991: ST_TO_ADDR
// hackCounter := [ ] ;
4992: LD_ADDR_EXP 17
4996: PUSH
4997: EMPTY
4998: ST_TO_ADDR
// end ;
4999: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
5000: LD_EXP 12
5004: PUSH
5005: LD_INT 34
5007: PUSH
5008: LD_INT 99
5010: PUSH
5011: EMPTY
5012: LIST
5013: LIST
5014: PPUSH
5015: CALL_OW 69
5019: AND
5020: IFFALSE 5273
5022: GO 5024
5024: DISABLE
5025: LD_INT 0
5027: PPUSH
5028: PPUSH
// begin enable ;
5029: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
5030: LD_ADDR_VAR 0 1
5034: PUSH
5035: LD_INT 34
5037: PUSH
5038: LD_INT 99
5040: PUSH
5041: EMPTY
5042: LIST
5043: LIST
5044: PPUSH
5045: CALL_OW 69
5049: PUSH
5050: FOR_IN
5051: IFFALSE 5271
// begin if not i in hackTanks then
5053: LD_VAR 0 1
5057: PUSH
5058: LD_EXP 13
5062: IN
5063: NOT
5064: IFFALSE 5147
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
5066: LD_ADDR_EXP 13
5070: PUSH
5071: LD_EXP 13
5075: PPUSH
5076: LD_EXP 13
5080: PUSH
5081: LD_INT 1
5083: PLUS
5084: PPUSH
5085: LD_VAR 0 1
5089: PPUSH
5090: CALL_OW 1
5094: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
5095: LD_ADDR_EXP 14
5099: PUSH
5100: LD_EXP 14
5104: PPUSH
5105: LD_EXP 14
5109: PUSH
5110: LD_INT 1
5112: PLUS
5113: PPUSH
5114: EMPTY
5115: PPUSH
5116: CALL_OW 1
5120: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
5121: LD_ADDR_EXP 17
5125: PUSH
5126: LD_EXP 17
5130: PPUSH
5131: LD_EXP 17
5135: PUSH
5136: LD_INT 1
5138: PLUS
5139: PPUSH
5140: EMPTY
5141: PPUSH
5142: CALL_OW 1
5146: ST_TO_ADDR
// end ; if not IsOk ( i ) then
5147: LD_VAR 0 1
5151: PPUSH
5152: CALL_OW 302
5156: NOT
5157: IFFALSE 5170
// begin HackUnlinkAll ( i ) ;
5159: LD_VAR 0 1
5163: PPUSH
5164: CALL 5276 0 1
// continue ;
5168: GO 5050
// end ; HackCheckCapturedStatus ( i ) ;
5170: LD_VAR 0 1
5174: PPUSH
5175: CALL 5719 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
5179: LD_ADDR_VAR 0 2
5183: PUSH
5184: LD_INT 81
5186: PUSH
5187: LD_VAR 0 1
5191: PPUSH
5192: CALL_OW 255
5196: PUSH
5197: EMPTY
5198: LIST
5199: LIST
5200: PUSH
5201: LD_INT 33
5203: PUSH
5204: LD_INT 3
5206: PUSH
5207: EMPTY
5208: LIST
5209: LIST
5210: PUSH
5211: LD_INT 91
5213: PUSH
5214: LD_VAR 0 1
5218: PUSH
5219: LD_EXP 16
5223: PUSH
5224: EMPTY
5225: LIST
5226: LIST
5227: LIST
5228: PUSH
5229: LD_INT 50
5231: PUSH
5232: EMPTY
5233: LIST
5234: PUSH
5235: EMPTY
5236: LIST
5237: LIST
5238: LIST
5239: LIST
5240: PPUSH
5241: CALL_OW 69
5245: ST_TO_ADDR
// if not tmp then
5246: LD_VAR 0 2
5250: NOT
5251: IFFALSE 5255
// continue ;
5253: GO 5050
// HackLink ( i , tmp ) ;
5255: LD_VAR 0 1
5259: PPUSH
5260: LD_VAR 0 2
5264: PPUSH
5265: CALL 5412 0 2
// end ;
5269: GO 5050
5271: POP
5272: POP
// end ;
5273: PPOPN 2
5275: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
5276: LD_INT 0
5278: PPUSH
5279: PPUSH
5280: PPUSH
// if not hack in hackTanks then
5281: LD_VAR 0 1
5285: PUSH
5286: LD_EXP 13
5290: IN
5291: NOT
5292: IFFALSE 5296
// exit ;
5294: GO 5407
// index := GetElementIndex ( hackTanks , hack ) ;
5296: LD_ADDR_VAR 0 4
5300: PUSH
5301: LD_EXP 13
5305: PPUSH
5306: LD_VAR 0 1
5310: PPUSH
5311: CALL 28651 0 2
5315: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
5316: LD_EXP 14
5320: PUSH
5321: LD_VAR 0 4
5325: ARRAY
5326: IFFALSE 5407
// begin for i in hackTanksCaptured [ index ] do
5328: LD_ADDR_VAR 0 3
5332: PUSH
5333: LD_EXP 14
5337: PUSH
5338: LD_VAR 0 4
5342: ARRAY
5343: PUSH
5344: FOR_IN
5345: IFFALSE 5371
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
5347: LD_VAR 0 3
5351: PUSH
5352: LD_INT 1
5354: ARRAY
5355: PPUSH
5356: LD_VAR 0 3
5360: PUSH
5361: LD_INT 2
5363: ARRAY
5364: PPUSH
5365: CALL_OW 235
5369: GO 5344
5371: POP
5372: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
5373: LD_ADDR_EXP 14
5377: PUSH
5378: LD_EXP 14
5382: PPUSH
5383: LD_VAR 0 4
5387: PPUSH
5388: EMPTY
5389: PPUSH
5390: CALL_OW 1
5394: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
5395: LD_VAR 0 1
5399: PPUSH
5400: LD_INT 0
5402: PPUSH
5403: CALL_OW 505
// end ; end ;
5407: LD_VAR 0 2
5411: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
5412: LD_INT 0
5414: PPUSH
5415: PPUSH
5416: PPUSH
// if not hack in hackTanks or not vehicles then
5417: LD_VAR 0 1
5421: PUSH
5422: LD_EXP 13
5426: IN
5427: NOT
5428: PUSH
5429: LD_VAR 0 2
5433: NOT
5434: OR
5435: IFFALSE 5439
// exit ;
5437: GO 5714
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
5439: LD_ADDR_VAR 0 2
5443: PUSH
5444: LD_VAR 0 1
5448: PPUSH
5449: LD_VAR 0 2
5453: PPUSH
5454: LD_INT 1
5456: PPUSH
5457: LD_INT 1
5459: PPUSH
5460: CALL 29301 0 4
5464: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
5465: LD_ADDR_VAR 0 5
5469: PUSH
5470: LD_EXP 13
5474: PPUSH
5475: LD_VAR 0 1
5479: PPUSH
5480: CALL 28651 0 2
5484: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
5485: LD_EXP 14
5489: PUSH
5490: LD_VAR 0 5
5494: ARRAY
5495: PUSH
5496: LD_EXP 15
5500: LESS
5501: IFFALSE 5690
// begin for i := 1 to vehicles do
5503: LD_ADDR_VAR 0 4
5507: PUSH
5508: DOUBLE
5509: LD_INT 1
5511: DEC
5512: ST_TO_ADDR
5513: LD_VAR 0 2
5517: PUSH
5518: FOR_TO
5519: IFFALSE 5688
// begin if hackTanksCaptured [ index ] = hackLimit then
5521: LD_EXP 14
5525: PUSH
5526: LD_VAR 0 5
5530: ARRAY
5531: PUSH
5532: LD_EXP 15
5536: EQUAL
5537: IFFALSE 5541
// break ;
5539: GO 5688
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
5541: LD_ADDR_EXP 17
5545: PUSH
5546: LD_EXP 17
5550: PPUSH
5551: LD_VAR 0 5
5555: PPUSH
5556: LD_EXP 17
5560: PUSH
5561: LD_VAR 0 5
5565: ARRAY
5566: PUSH
5567: LD_INT 1
5569: PLUS
5570: PPUSH
5571: CALL_OW 1
5575: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
5576: LD_ADDR_EXP 14
5580: PUSH
5581: LD_EXP 14
5585: PPUSH
5586: LD_VAR 0 5
5590: PUSH
5591: LD_EXP 14
5595: PUSH
5596: LD_VAR 0 5
5600: ARRAY
5601: PUSH
5602: LD_INT 1
5604: PLUS
5605: PUSH
5606: EMPTY
5607: LIST
5608: LIST
5609: PPUSH
5610: LD_VAR 0 2
5614: PUSH
5615: LD_VAR 0 4
5619: ARRAY
5620: PUSH
5621: LD_VAR 0 2
5625: PUSH
5626: LD_VAR 0 4
5630: ARRAY
5631: PPUSH
5632: CALL_OW 255
5636: PUSH
5637: EMPTY
5638: LIST
5639: LIST
5640: PPUSH
5641: CALL 28866 0 3
5645: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
5646: LD_VAR 0 2
5650: PUSH
5651: LD_VAR 0 4
5655: ARRAY
5656: PPUSH
5657: LD_VAR 0 1
5661: PPUSH
5662: CALL_OW 255
5666: PPUSH
5667: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
5671: LD_VAR 0 2
5675: PUSH
5676: LD_VAR 0 4
5680: ARRAY
5681: PPUSH
5682: CALL_OW 141
// end ;
5686: GO 5518
5688: POP
5689: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
5690: LD_VAR 0 1
5694: PPUSH
5695: LD_EXP 14
5699: PUSH
5700: LD_VAR 0 5
5704: ARRAY
5705: PUSH
5706: LD_INT 0
5708: PLUS
5709: PPUSH
5710: CALL_OW 505
// end ;
5714: LD_VAR 0 3
5718: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
5719: LD_INT 0
5721: PPUSH
5722: PPUSH
5723: PPUSH
5724: PPUSH
// if not hack in hackTanks then
5725: LD_VAR 0 1
5729: PUSH
5730: LD_EXP 13
5734: IN
5735: NOT
5736: IFFALSE 5740
// exit ;
5738: GO 5980
// index := GetElementIndex ( hackTanks , hack ) ;
5740: LD_ADDR_VAR 0 4
5744: PUSH
5745: LD_EXP 13
5749: PPUSH
5750: LD_VAR 0 1
5754: PPUSH
5755: CALL 28651 0 2
5759: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
5760: LD_ADDR_VAR 0 3
5764: PUSH
5765: DOUBLE
5766: LD_EXP 14
5770: PUSH
5771: LD_VAR 0 4
5775: ARRAY
5776: INC
5777: ST_TO_ADDR
5778: LD_INT 1
5780: PUSH
5781: FOR_DOWNTO
5782: IFFALSE 5954
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
5784: LD_ADDR_VAR 0 5
5788: PUSH
5789: LD_EXP 14
5793: PUSH
5794: LD_VAR 0 4
5798: ARRAY
5799: PUSH
5800: LD_VAR 0 3
5804: ARRAY
5805: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
5806: LD_VAR 0 5
5810: PUSH
5811: LD_INT 1
5813: ARRAY
5814: PPUSH
5815: CALL_OW 302
5819: NOT
5820: PUSH
5821: LD_VAR 0 5
5825: PUSH
5826: LD_INT 1
5828: ARRAY
5829: PPUSH
5830: CALL_OW 255
5834: PUSH
5835: LD_VAR 0 1
5839: PPUSH
5840: CALL_OW 255
5844: NONEQUAL
5845: OR
5846: IFFALSE 5952
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
5848: LD_VAR 0 5
5852: PUSH
5853: LD_INT 1
5855: ARRAY
5856: PPUSH
5857: CALL_OW 305
5861: PUSH
5862: LD_VAR 0 5
5866: PUSH
5867: LD_INT 1
5869: ARRAY
5870: PPUSH
5871: CALL_OW 255
5875: PUSH
5876: LD_VAR 0 1
5880: PPUSH
5881: CALL_OW 255
5885: EQUAL
5886: AND
5887: IFFALSE 5911
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
5889: LD_VAR 0 5
5893: PUSH
5894: LD_INT 1
5896: ARRAY
5897: PPUSH
5898: LD_VAR 0 5
5902: PUSH
5903: LD_INT 2
5905: ARRAY
5906: PPUSH
5907: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
5911: LD_ADDR_EXP 14
5915: PUSH
5916: LD_EXP 14
5920: PPUSH
5921: LD_VAR 0 4
5925: PPUSH
5926: LD_EXP 14
5930: PUSH
5931: LD_VAR 0 4
5935: ARRAY
5936: PPUSH
5937: LD_VAR 0 3
5941: PPUSH
5942: CALL_OW 3
5946: PPUSH
5947: CALL_OW 1
5951: ST_TO_ADDR
// end ; end ;
5952: GO 5781
5954: POP
5955: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
5956: LD_VAR 0 1
5960: PPUSH
5961: LD_EXP 14
5965: PUSH
5966: LD_VAR 0 4
5970: ARRAY
5971: PUSH
5972: LD_INT 0
5974: PLUS
5975: PPUSH
5976: CALL_OW 505
// end ;
5980: LD_VAR 0 2
5984: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
5985: LD_INT 0
5987: PPUSH
5988: PPUSH
5989: PPUSH
5990: PPUSH
// if not hack in hackTanks then
5991: LD_VAR 0 1
5995: PUSH
5996: LD_EXP 13
6000: IN
6001: NOT
6002: IFFALSE 6006
// exit ;
6004: GO 6091
// index := GetElementIndex ( hackTanks , hack ) ;
6006: LD_ADDR_VAR 0 5
6010: PUSH
6011: LD_EXP 13
6015: PPUSH
6016: LD_VAR 0 1
6020: PPUSH
6021: CALL 28651 0 2
6025: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
6026: LD_ADDR_VAR 0 4
6030: PUSH
6031: DOUBLE
6032: LD_INT 1
6034: DEC
6035: ST_TO_ADDR
6036: LD_EXP 14
6040: PUSH
6041: LD_VAR 0 5
6045: ARRAY
6046: PUSH
6047: FOR_TO
6048: IFFALSE 6089
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
6050: LD_EXP 14
6054: PUSH
6055: LD_VAR 0 5
6059: ARRAY
6060: PUSH
6061: LD_VAR 0 4
6065: ARRAY
6066: PUSH
6067: LD_INT 1
6069: ARRAY
6070: PUSH
6071: LD_VAR 0 2
6075: EQUAL
6076: IFFALSE 6087
// KillUnit ( vehicle ) ;
6078: LD_VAR 0 2
6082: PPUSH
6083: CALL_OW 66
6087: GO 6047
6089: POP
6090: POP
// end ;
6091: LD_VAR 0 3
6095: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
6096: LD_EXP 18
6100: NOT
6101: IFFALSE 6136
6103: GO 6105
6105: DISABLE
// begin initMiner := true ;
6106: LD_ADDR_EXP 18
6110: PUSH
6111: LD_INT 1
6113: ST_TO_ADDR
// minersList := [ ] ;
6114: LD_ADDR_EXP 19
6118: PUSH
6119: EMPTY
6120: ST_TO_ADDR
// minerMinesList := [ ] ;
6121: LD_ADDR_EXP 20
6125: PUSH
6126: EMPTY
6127: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
6128: LD_ADDR_EXP 21
6132: PUSH
6133: LD_INT 5
6135: ST_TO_ADDR
// end ;
6136: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
6137: LD_EXP 18
6141: PUSH
6142: LD_INT 34
6144: PUSH
6145: LD_INT 81
6147: PUSH
6148: EMPTY
6149: LIST
6150: LIST
6151: PPUSH
6152: CALL_OW 69
6156: AND
6157: IFFALSE 6618
6159: GO 6161
6161: DISABLE
6162: LD_INT 0
6164: PPUSH
6165: PPUSH
6166: PPUSH
6167: PPUSH
// begin enable ;
6168: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
6169: LD_ADDR_VAR 0 1
6173: PUSH
6174: LD_INT 34
6176: PUSH
6177: LD_INT 81
6179: PUSH
6180: EMPTY
6181: LIST
6182: LIST
6183: PPUSH
6184: CALL_OW 69
6188: PUSH
6189: FOR_IN
6190: IFFALSE 6262
// begin if not i in minersList then
6192: LD_VAR 0 1
6196: PUSH
6197: LD_EXP 19
6201: IN
6202: NOT
6203: IFFALSE 6260
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
6205: LD_ADDR_EXP 19
6209: PUSH
6210: LD_EXP 19
6214: PPUSH
6215: LD_EXP 19
6219: PUSH
6220: LD_INT 1
6222: PLUS
6223: PPUSH
6224: LD_VAR 0 1
6228: PPUSH
6229: CALL_OW 1
6233: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
6234: LD_ADDR_EXP 20
6238: PUSH
6239: LD_EXP 20
6243: PPUSH
6244: LD_EXP 20
6248: PUSH
6249: LD_INT 1
6251: PLUS
6252: PPUSH
6253: EMPTY
6254: PPUSH
6255: CALL_OW 1
6259: ST_TO_ADDR
// end end ;
6260: GO 6189
6262: POP
6263: POP
// for i := minerMinesList downto 1 do
6264: LD_ADDR_VAR 0 1
6268: PUSH
6269: DOUBLE
6270: LD_EXP 20
6274: INC
6275: ST_TO_ADDR
6276: LD_INT 1
6278: PUSH
6279: FOR_DOWNTO
6280: IFFALSE 6616
// begin if IsLive ( minersList [ i ] ) then
6282: LD_EXP 19
6286: PUSH
6287: LD_VAR 0 1
6291: ARRAY
6292: PPUSH
6293: CALL_OW 300
6297: IFFALSE 6325
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
6299: LD_EXP 19
6303: PUSH
6304: LD_VAR 0 1
6308: ARRAY
6309: PPUSH
6310: LD_EXP 20
6314: PUSH
6315: LD_VAR 0 1
6319: ARRAY
6320: PPUSH
6321: CALL_OW 505
// if not minerMinesList [ i ] then
6325: LD_EXP 20
6329: PUSH
6330: LD_VAR 0 1
6334: ARRAY
6335: NOT
6336: IFFALSE 6340
// continue ;
6338: GO 6279
// for j := minerMinesList [ i ] downto 1 do
6340: LD_ADDR_VAR 0 2
6344: PUSH
6345: DOUBLE
6346: LD_EXP 20
6350: PUSH
6351: LD_VAR 0 1
6355: ARRAY
6356: INC
6357: ST_TO_ADDR
6358: LD_INT 1
6360: PUSH
6361: FOR_DOWNTO
6362: IFFALSE 6612
// begin side := GetSide ( minersList [ i ] ) ;
6364: LD_ADDR_VAR 0 3
6368: PUSH
6369: LD_EXP 19
6373: PUSH
6374: LD_VAR 0 1
6378: ARRAY
6379: PPUSH
6380: CALL_OW 255
6384: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
6385: LD_ADDR_VAR 0 4
6389: PUSH
6390: LD_EXP 20
6394: PUSH
6395: LD_VAR 0 1
6399: ARRAY
6400: PUSH
6401: LD_VAR 0 2
6405: ARRAY
6406: PUSH
6407: LD_INT 1
6409: ARRAY
6410: PPUSH
6411: LD_EXP 20
6415: PUSH
6416: LD_VAR 0 1
6420: ARRAY
6421: PUSH
6422: LD_VAR 0 2
6426: ARRAY
6427: PUSH
6428: LD_INT 2
6430: ARRAY
6431: PPUSH
6432: CALL_OW 428
6436: ST_TO_ADDR
// if not tmp then
6437: LD_VAR 0 4
6441: NOT
6442: IFFALSE 6446
// continue ;
6444: GO 6361
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
6446: LD_VAR 0 4
6450: PUSH
6451: LD_INT 81
6453: PUSH
6454: LD_VAR 0 3
6458: PUSH
6459: EMPTY
6460: LIST
6461: LIST
6462: PPUSH
6463: CALL_OW 69
6467: IN
6468: PUSH
6469: LD_EXP 20
6473: PUSH
6474: LD_VAR 0 1
6478: ARRAY
6479: PUSH
6480: LD_VAR 0 2
6484: ARRAY
6485: PUSH
6486: LD_INT 1
6488: ARRAY
6489: PPUSH
6490: LD_EXP 20
6494: PUSH
6495: LD_VAR 0 1
6499: ARRAY
6500: PUSH
6501: LD_VAR 0 2
6505: ARRAY
6506: PUSH
6507: LD_INT 2
6509: ARRAY
6510: PPUSH
6511: CALL_OW 458
6515: AND
6516: IFFALSE 6610
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
6518: LD_EXP 20
6522: PUSH
6523: LD_VAR 0 1
6527: ARRAY
6528: PUSH
6529: LD_VAR 0 2
6533: ARRAY
6534: PUSH
6535: LD_INT 1
6537: ARRAY
6538: PPUSH
6539: LD_EXP 20
6543: PUSH
6544: LD_VAR 0 1
6548: ARRAY
6549: PUSH
6550: LD_VAR 0 2
6554: ARRAY
6555: PUSH
6556: LD_INT 2
6558: ARRAY
6559: PPUSH
6560: LD_VAR 0 3
6564: PPUSH
6565: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
6569: LD_ADDR_EXP 20
6573: PUSH
6574: LD_EXP 20
6578: PPUSH
6579: LD_VAR 0 1
6583: PPUSH
6584: LD_EXP 20
6588: PUSH
6589: LD_VAR 0 1
6593: ARRAY
6594: PPUSH
6595: LD_VAR 0 2
6599: PPUSH
6600: CALL_OW 3
6604: PPUSH
6605: CALL_OW 1
6609: ST_TO_ADDR
// end ; end ;
6610: GO 6361
6612: POP
6613: POP
// end ;
6614: GO 6279
6616: POP
6617: POP
// end ;
6618: PPOPN 4
6620: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
6621: LD_INT 0
6623: PPUSH
6624: PPUSH
// result := false ;
6625: LD_ADDR_VAR 0 4
6629: PUSH
6630: LD_INT 0
6632: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
6633: LD_VAR 0 1
6637: PPUSH
6638: CALL_OW 264
6642: PUSH
6643: LD_INT 81
6645: EQUAL
6646: NOT
6647: IFFALSE 6651
// exit ;
6649: GO 6891
// index := GetElementIndex ( minersList , unit ) ;
6651: LD_ADDR_VAR 0 5
6655: PUSH
6656: LD_EXP 19
6660: PPUSH
6661: LD_VAR 0 1
6665: PPUSH
6666: CALL 28651 0 2
6670: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
6671: LD_EXP 20
6675: PUSH
6676: LD_VAR 0 5
6680: ARRAY
6681: PUSH
6682: LD_EXP 21
6686: GREATEREQUAL
6687: IFFALSE 6691
// exit ;
6689: GO 6891
// ComMoveXY ( unit , x , y ) ;
6691: LD_VAR 0 1
6695: PPUSH
6696: LD_VAR 0 2
6700: PPUSH
6701: LD_VAR 0 3
6705: PPUSH
6706: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6710: LD_INT 35
6712: PPUSH
6713: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
6717: LD_VAR 0 1
6721: PPUSH
6722: LD_VAR 0 2
6726: PPUSH
6727: LD_VAR 0 3
6731: PPUSH
6732: CALL 60403 0 3
6736: NOT
6737: PUSH
6738: LD_VAR 0 1
6742: PPUSH
6743: CALL_OW 314
6747: AND
6748: IFFALSE 6752
// exit ;
6750: GO 6891
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
6752: LD_VAR 0 2
6756: PPUSH
6757: LD_VAR 0 3
6761: PPUSH
6762: CALL_OW 428
6766: PUSH
6767: LD_VAR 0 1
6771: EQUAL
6772: PUSH
6773: LD_VAR 0 1
6777: PPUSH
6778: CALL_OW 314
6782: NOT
6783: AND
6784: IFFALSE 6710
// PlaySoundXY ( x , y , PlantMine ) ;
6786: LD_VAR 0 2
6790: PPUSH
6791: LD_VAR 0 3
6795: PPUSH
6796: LD_STRING PlantMine
6798: PPUSH
6799: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
6803: LD_VAR 0 2
6807: PPUSH
6808: LD_VAR 0 3
6812: PPUSH
6813: LD_VAR 0 1
6817: PPUSH
6818: CALL_OW 255
6822: PPUSH
6823: LD_INT 0
6825: PPUSH
6826: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
6830: LD_ADDR_EXP 20
6834: PUSH
6835: LD_EXP 20
6839: PPUSH
6840: LD_VAR 0 5
6844: PUSH
6845: LD_EXP 20
6849: PUSH
6850: LD_VAR 0 5
6854: ARRAY
6855: PUSH
6856: LD_INT 1
6858: PLUS
6859: PUSH
6860: EMPTY
6861: LIST
6862: LIST
6863: PPUSH
6864: LD_VAR 0 2
6868: PUSH
6869: LD_VAR 0 3
6873: PUSH
6874: EMPTY
6875: LIST
6876: LIST
6877: PPUSH
6878: CALL 28866 0 3
6882: ST_TO_ADDR
// result := true ;
6883: LD_ADDR_VAR 0 4
6887: PUSH
6888: LD_INT 1
6890: ST_TO_ADDR
// end ;
6891: LD_VAR 0 4
6895: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
6896: LD_INT 0
6898: PPUSH
6899: PPUSH
6900: PPUSH
// if not unit in minersList then
6901: LD_VAR 0 1
6905: PUSH
6906: LD_EXP 19
6910: IN
6911: NOT
6912: IFFALSE 6916
// exit ;
6914: GO 7308
// index := GetElementIndex ( minersList , unit ) ;
6916: LD_ADDR_VAR 0 6
6920: PUSH
6921: LD_EXP 19
6925: PPUSH
6926: LD_VAR 0 1
6930: PPUSH
6931: CALL 28651 0 2
6935: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
6936: LD_ADDR_VAR 0 5
6940: PUSH
6941: DOUBLE
6942: LD_EXP 20
6946: PUSH
6947: LD_VAR 0 6
6951: ARRAY
6952: INC
6953: ST_TO_ADDR
6954: LD_INT 1
6956: PUSH
6957: FOR_DOWNTO
6958: IFFALSE 7119
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
6960: LD_EXP 20
6964: PUSH
6965: LD_VAR 0 6
6969: ARRAY
6970: PUSH
6971: LD_VAR 0 5
6975: ARRAY
6976: PUSH
6977: LD_INT 1
6979: ARRAY
6980: PUSH
6981: LD_VAR 0 2
6985: EQUAL
6986: PUSH
6987: LD_EXP 20
6991: PUSH
6992: LD_VAR 0 6
6996: ARRAY
6997: PUSH
6998: LD_VAR 0 5
7002: ARRAY
7003: PUSH
7004: LD_INT 2
7006: ARRAY
7007: PUSH
7008: LD_VAR 0 3
7012: EQUAL
7013: AND
7014: IFFALSE 7117
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
7016: LD_EXP 20
7020: PUSH
7021: LD_VAR 0 6
7025: ARRAY
7026: PUSH
7027: LD_VAR 0 5
7031: ARRAY
7032: PUSH
7033: LD_INT 1
7035: ARRAY
7036: PPUSH
7037: LD_EXP 20
7041: PUSH
7042: LD_VAR 0 6
7046: ARRAY
7047: PUSH
7048: LD_VAR 0 5
7052: ARRAY
7053: PUSH
7054: LD_INT 2
7056: ARRAY
7057: PPUSH
7058: LD_VAR 0 1
7062: PPUSH
7063: CALL_OW 255
7067: PPUSH
7068: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
7072: LD_ADDR_EXP 20
7076: PUSH
7077: LD_EXP 20
7081: PPUSH
7082: LD_VAR 0 6
7086: PPUSH
7087: LD_EXP 20
7091: PUSH
7092: LD_VAR 0 6
7096: ARRAY
7097: PPUSH
7098: LD_VAR 0 5
7102: PPUSH
7103: CALL_OW 3
7107: PPUSH
7108: CALL_OW 1
7112: ST_TO_ADDR
// exit ;
7113: POP
7114: POP
7115: GO 7308
// end ; end ;
7117: GO 6957
7119: POP
7120: POP
// for i := minerMinesList [ index ] downto 1 do
7121: LD_ADDR_VAR 0 5
7125: PUSH
7126: DOUBLE
7127: LD_EXP 20
7131: PUSH
7132: LD_VAR 0 6
7136: ARRAY
7137: INC
7138: ST_TO_ADDR
7139: LD_INT 1
7141: PUSH
7142: FOR_DOWNTO
7143: IFFALSE 7306
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
7145: LD_EXP 20
7149: PUSH
7150: LD_VAR 0 6
7154: ARRAY
7155: PUSH
7156: LD_VAR 0 5
7160: ARRAY
7161: PUSH
7162: LD_INT 1
7164: ARRAY
7165: PPUSH
7166: LD_EXP 20
7170: PUSH
7171: LD_VAR 0 6
7175: ARRAY
7176: PUSH
7177: LD_VAR 0 5
7181: ARRAY
7182: PUSH
7183: LD_INT 2
7185: ARRAY
7186: PPUSH
7187: LD_VAR 0 2
7191: PPUSH
7192: LD_VAR 0 3
7196: PPUSH
7197: CALL_OW 298
7201: PUSH
7202: LD_INT 6
7204: LESS
7205: IFFALSE 7304
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
7207: LD_EXP 20
7211: PUSH
7212: LD_VAR 0 6
7216: ARRAY
7217: PUSH
7218: LD_VAR 0 5
7222: ARRAY
7223: PUSH
7224: LD_INT 1
7226: ARRAY
7227: PPUSH
7228: LD_EXP 20
7232: PUSH
7233: LD_VAR 0 6
7237: ARRAY
7238: PUSH
7239: LD_VAR 0 5
7243: ARRAY
7244: PUSH
7245: LD_INT 2
7247: ARRAY
7248: PPUSH
7249: LD_VAR 0 1
7253: PPUSH
7254: CALL_OW 255
7258: PPUSH
7259: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
7263: LD_ADDR_EXP 20
7267: PUSH
7268: LD_EXP 20
7272: PPUSH
7273: LD_VAR 0 6
7277: PPUSH
7278: LD_EXP 20
7282: PUSH
7283: LD_VAR 0 6
7287: ARRAY
7288: PPUSH
7289: LD_VAR 0 5
7293: PPUSH
7294: CALL_OW 3
7298: PPUSH
7299: CALL_OW 1
7303: ST_TO_ADDR
// end ; end ;
7304: GO 7142
7306: POP
7307: POP
// end ;
7308: LD_VAR 0 4
7312: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
7313: LD_INT 0
7315: PPUSH
7316: PPUSH
7317: PPUSH
7318: PPUSH
7319: PPUSH
7320: PPUSH
7321: PPUSH
7322: PPUSH
7323: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
7324: LD_VAR 0 1
7328: PPUSH
7329: CALL_OW 264
7333: PUSH
7334: LD_INT 81
7336: EQUAL
7337: NOT
7338: PUSH
7339: LD_VAR 0 1
7343: PUSH
7344: LD_EXP 19
7348: IN
7349: NOT
7350: OR
7351: IFFALSE 7355
// exit ;
7353: GO 7677
// index := GetElementIndex ( minersList , unit ) ;
7355: LD_ADDR_VAR 0 6
7359: PUSH
7360: LD_EXP 19
7364: PPUSH
7365: LD_VAR 0 1
7369: PPUSH
7370: CALL 28651 0 2
7374: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
7375: LD_ADDR_VAR 0 8
7379: PUSH
7380: LD_EXP 21
7384: PUSH
7385: LD_EXP 20
7389: PUSH
7390: LD_VAR 0 6
7394: ARRAY
7395: MINUS
7396: ST_TO_ADDR
// if not minesFreeAmount then
7397: LD_VAR 0 8
7401: NOT
7402: IFFALSE 7406
// exit ;
7404: GO 7677
// tmp := [ ] ;
7406: LD_ADDR_VAR 0 7
7410: PUSH
7411: EMPTY
7412: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
7413: LD_ADDR_VAR 0 5
7417: PUSH
7418: DOUBLE
7419: LD_INT 1
7421: DEC
7422: ST_TO_ADDR
7423: LD_VAR 0 8
7427: PUSH
7428: FOR_TO
7429: IFFALSE 7624
// begin _d := rand ( 0 , 5 ) ;
7431: LD_ADDR_VAR 0 11
7435: PUSH
7436: LD_INT 0
7438: PPUSH
7439: LD_INT 5
7441: PPUSH
7442: CALL_OW 12
7446: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
7447: LD_ADDR_VAR 0 12
7451: PUSH
7452: LD_INT 2
7454: PPUSH
7455: LD_INT 6
7457: PPUSH
7458: CALL_OW 12
7462: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
7463: LD_ADDR_VAR 0 9
7467: PUSH
7468: LD_VAR 0 2
7472: PPUSH
7473: LD_VAR 0 11
7477: PPUSH
7478: LD_VAR 0 12
7482: PPUSH
7483: CALL_OW 272
7487: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
7488: LD_ADDR_VAR 0 10
7492: PUSH
7493: LD_VAR 0 3
7497: PPUSH
7498: LD_VAR 0 11
7502: PPUSH
7503: LD_VAR 0 12
7507: PPUSH
7508: CALL_OW 273
7512: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
7513: LD_VAR 0 9
7517: PPUSH
7518: LD_VAR 0 10
7522: PPUSH
7523: CALL_OW 488
7527: PUSH
7528: LD_VAR 0 9
7532: PUSH
7533: LD_VAR 0 10
7537: PUSH
7538: EMPTY
7539: LIST
7540: LIST
7541: PUSH
7542: LD_VAR 0 7
7546: IN
7547: NOT
7548: AND
7549: PUSH
7550: LD_VAR 0 9
7554: PPUSH
7555: LD_VAR 0 10
7559: PPUSH
7560: CALL_OW 458
7564: NOT
7565: AND
7566: IFFALSE 7608
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
7568: LD_ADDR_VAR 0 7
7572: PUSH
7573: LD_VAR 0 7
7577: PPUSH
7578: LD_VAR 0 7
7582: PUSH
7583: LD_INT 1
7585: PLUS
7586: PPUSH
7587: LD_VAR 0 9
7591: PUSH
7592: LD_VAR 0 10
7596: PUSH
7597: EMPTY
7598: LIST
7599: LIST
7600: PPUSH
7601: CALL_OW 1
7605: ST_TO_ADDR
7606: GO 7622
// i := i - 1 ;
7608: LD_ADDR_VAR 0 5
7612: PUSH
7613: LD_VAR 0 5
7617: PUSH
7618: LD_INT 1
7620: MINUS
7621: ST_TO_ADDR
// end ;
7622: GO 7428
7624: POP
7625: POP
// for i in tmp do
7626: LD_ADDR_VAR 0 5
7630: PUSH
7631: LD_VAR 0 7
7635: PUSH
7636: FOR_IN
7637: IFFALSE 7675
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
7639: LD_VAR 0 1
7643: PPUSH
7644: LD_VAR 0 5
7648: PUSH
7649: LD_INT 1
7651: ARRAY
7652: PPUSH
7653: LD_VAR 0 5
7657: PUSH
7658: LD_INT 2
7660: ARRAY
7661: PPUSH
7662: CALL 6621 0 3
7666: NOT
7667: IFFALSE 7673
// exit ;
7669: POP
7670: POP
7671: GO 7677
7673: GO 7636
7675: POP
7676: POP
// end ;
7677: LD_VAR 0 4
7681: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
7682: LD_INT 0
7684: PPUSH
7685: PPUSH
7686: PPUSH
7687: PPUSH
7688: PPUSH
7689: PPUSH
7690: PPUSH
// if not GetClass ( unit ) = class_sniper then
7691: LD_VAR 0 1
7695: PPUSH
7696: CALL_OW 257
7700: PUSH
7701: LD_INT 5
7703: EQUAL
7704: NOT
7705: IFFALSE 7709
// exit ;
7707: GO 8097
// dist := 8 ;
7709: LD_ADDR_VAR 0 5
7713: PUSH
7714: LD_INT 8
7716: ST_TO_ADDR
// viewRange := 12 ;
7717: LD_ADDR_VAR 0 7
7721: PUSH
7722: LD_INT 12
7724: ST_TO_ADDR
// side := GetSide ( unit ) ;
7725: LD_ADDR_VAR 0 6
7729: PUSH
7730: LD_VAR 0 1
7734: PPUSH
7735: CALL_OW 255
7739: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
7740: LD_INT 61
7742: PPUSH
7743: LD_VAR 0 6
7747: PPUSH
7748: CALL_OW 321
7752: PUSH
7753: LD_INT 2
7755: EQUAL
7756: IFFALSE 7766
// viewRange := 16 ;
7758: LD_ADDR_VAR 0 7
7762: PUSH
7763: LD_INT 16
7765: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
7766: LD_VAR 0 1
7770: PPUSH
7771: LD_VAR 0 2
7775: PPUSH
7776: LD_VAR 0 3
7780: PPUSH
7781: CALL_OW 297
7785: PUSH
7786: LD_VAR 0 5
7790: GREATER
7791: IFFALSE 7870
// begin ComMoveXY ( unit , x , y ) ;
7793: LD_VAR 0 1
7797: PPUSH
7798: LD_VAR 0 2
7802: PPUSH
7803: LD_VAR 0 3
7807: PPUSH
7808: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7812: LD_INT 35
7814: PPUSH
7815: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
7819: LD_VAR 0 1
7823: PPUSH
7824: LD_VAR 0 2
7828: PPUSH
7829: LD_VAR 0 3
7833: PPUSH
7834: CALL 60403 0 3
7838: NOT
7839: IFFALSE 7843
// exit ;
7841: GO 8097
// until GetDistUnitXY ( unit , x , y ) < dist ;
7843: LD_VAR 0 1
7847: PPUSH
7848: LD_VAR 0 2
7852: PPUSH
7853: LD_VAR 0 3
7857: PPUSH
7858: CALL_OW 297
7862: PUSH
7863: LD_VAR 0 5
7867: LESS
7868: IFFALSE 7812
// end ; ComTurnXY ( unit , x , y ) ;
7870: LD_VAR 0 1
7874: PPUSH
7875: LD_VAR 0 2
7879: PPUSH
7880: LD_VAR 0 3
7884: PPUSH
7885: CALL_OW 118
// wait ( 5 ) ;
7889: LD_INT 5
7891: PPUSH
7892: CALL_OW 67
// _d := GetDir ( unit ) ;
7896: LD_ADDR_VAR 0 10
7900: PUSH
7901: LD_VAR 0 1
7905: PPUSH
7906: CALL_OW 254
7910: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
7911: LD_ADDR_VAR 0 8
7915: PUSH
7916: LD_VAR 0 1
7920: PPUSH
7921: CALL_OW 250
7925: PPUSH
7926: LD_VAR 0 10
7930: PPUSH
7931: LD_VAR 0 5
7935: PPUSH
7936: CALL_OW 272
7940: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
7941: LD_ADDR_VAR 0 9
7945: PUSH
7946: LD_VAR 0 1
7950: PPUSH
7951: CALL_OW 251
7955: PPUSH
7956: LD_VAR 0 10
7960: PPUSH
7961: LD_VAR 0 5
7965: PPUSH
7966: CALL_OW 273
7970: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
7971: LD_VAR 0 8
7975: PPUSH
7976: LD_VAR 0 9
7980: PPUSH
7981: CALL_OW 488
7985: NOT
7986: IFFALSE 7990
// exit ;
7988: GO 8097
// ComAnimCustom ( unit , 1 ) ;
7990: LD_VAR 0 1
7994: PPUSH
7995: LD_INT 1
7997: PPUSH
7998: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
8002: LD_VAR 0 8
8006: PPUSH
8007: LD_VAR 0 9
8011: PPUSH
8012: LD_VAR 0 6
8016: PPUSH
8017: LD_VAR 0 7
8021: PPUSH
8022: CALL_OW 330
// repeat wait ( 1 ) ;
8026: LD_INT 1
8028: PPUSH
8029: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
8033: LD_VAR 0 1
8037: PPUSH
8038: CALL_OW 316
8042: PUSH
8043: LD_VAR 0 1
8047: PPUSH
8048: CALL_OW 314
8052: OR
8053: PUSH
8054: LD_VAR 0 1
8058: PPUSH
8059: CALL_OW 302
8063: NOT
8064: OR
8065: PUSH
8066: LD_VAR 0 1
8070: PPUSH
8071: CALL_OW 301
8075: OR
8076: IFFALSE 8026
// RemoveSeeing ( _x , _y , side ) ;
8078: LD_VAR 0 8
8082: PPUSH
8083: LD_VAR 0 9
8087: PPUSH
8088: LD_VAR 0 6
8092: PPUSH
8093: CALL_OW 331
// end ; end_of_file
8097: LD_VAR 0 4
8101: RET
// export globalGameSaveCounter ; every 0 0$1 do
8102: GO 8104
8104: DISABLE
// begin enable ;
8105: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
8106: LD_STRING updateTimer(
8108: PUSH
8109: LD_OWVAR 1
8113: STR
8114: PUSH
8115: LD_STRING );
8117: STR
8118: PPUSH
8119: CALL_OW 559
// end ;
8123: END
// every 0 0$1 do
8124: GO 8126
8126: DISABLE
// begin globalGameSaveCounter := 0 ;
8127: LD_ADDR_EXP 22
8131: PUSH
8132: LD_INT 0
8134: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
8135: LD_STRING setGameSaveCounter(0)
8137: PPUSH
8138: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
8142: LD_STRING initStreamRollete();
8144: PPUSH
8145: CALL_OW 559
// InitStreamMode ;
8149: CALL 9475 0 0
// DefineStreamItems ( false ) ;
8153: LD_INT 0
8155: PPUSH
8156: CALL 9939 0 1
// end ;
8160: END
// export function SOS_MapStart ( ) ; begin
8161: LD_INT 0
8163: PPUSH
// if streamModeActive then
8164: LD_EXP 23
8168: IFFALSE 8177
// DefineStreamItems ( true ) ;
8170: LD_INT 1
8172: PPUSH
8173: CALL 9939 0 1
// UpdateLuaVariables ( ) ;
8177: CALL 8194 0 0
// UpdateFactoryWaypoints ( ) ;
8181: CALL 22808 0 0
// UpdateWarehouseGatheringPoints ( ) ;
8185: CALL 23065 0 0
// end ;
8189: LD_VAR 0 1
8193: RET
// function UpdateLuaVariables ( ) ; begin
8194: LD_INT 0
8196: PPUSH
// if globalGameSaveCounter then
8197: LD_EXP 22
8201: IFFALSE 8235
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
8203: LD_ADDR_EXP 22
8207: PUSH
8208: LD_EXP 22
8212: PPUSH
8213: CALL 62967 0 1
8217: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
8218: LD_STRING setGameSaveCounter(
8220: PUSH
8221: LD_EXP 22
8225: STR
8226: PUSH
8227: LD_STRING )
8229: STR
8230: PPUSH
8231: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
8235: LD_STRING setGameDifficulty(
8237: PUSH
8238: LD_OWVAR 67
8242: STR
8243: PUSH
8244: LD_STRING )
8246: STR
8247: PPUSH
8248: CALL_OW 559
// end ;
8252: LD_VAR 0 1
8256: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
8257: LD_INT 0
8259: PPUSH
// if p2 = stream_mode then
8260: LD_VAR 0 2
8264: PUSH
8265: LD_INT 100
8267: EQUAL
8268: IFFALSE 9271
// begin if not StreamModeActive then
8270: LD_EXP 23
8274: NOT
8275: IFFALSE 8285
// StreamModeActive := true ;
8277: LD_ADDR_EXP 23
8281: PUSH
8282: LD_INT 1
8284: ST_TO_ADDR
// if p3 = 0 then
8285: LD_VAR 0 3
8289: PUSH
8290: LD_INT 0
8292: EQUAL
8293: IFFALSE 8299
// InitStreamMode ;
8295: CALL 9475 0 0
// if p3 = 1 then
8299: LD_VAR 0 3
8303: PUSH
8304: LD_INT 1
8306: EQUAL
8307: IFFALSE 8317
// sRocket := true ;
8309: LD_ADDR_EXP 28
8313: PUSH
8314: LD_INT 1
8316: ST_TO_ADDR
// if p3 = 2 then
8317: LD_VAR 0 3
8321: PUSH
8322: LD_INT 2
8324: EQUAL
8325: IFFALSE 8335
// sSpeed := true ;
8327: LD_ADDR_EXP 27
8331: PUSH
8332: LD_INT 1
8334: ST_TO_ADDR
// if p3 = 3 then
8335: LD_VAR 0 3
8339: PUSH
8340: LD_INT 3
8342: EQUAL
8343: IFFALSE 8353
// sEngine := true ;
8345: LD_ADDR_EXP 29
8349: PUSH
8350: LD_INT 1
8352: ST_TO_ADDR
// if p3 = 4 then
8353: LD_VAR 0 3
8357: PUSH
8358: LD_INT 4
8360: EQUAL
8361: IFFALSE 8371
// sSpec := true ;
8363: LD_ADDR_EXP 26
8367: PUSH
8368: LD_INT 1
8370: ST_TO_ADDR
// if p3 = 5 then
8371: LD_VAR 0 3
8375: PUSH
8376: LD_INT 5
8378: EQUAL
8379: IFFALSE 8389
// sLevel := true ;
8381: LD_ADDR_EXP 30
8385: PUSH
8386: LD_INT 1
8388: ST_TO_ADDR
// if p3 = 6 then
8389: LD_VAR 0 3
8393: PUSH
8394: LD_INT 6
8396: EQUAL
8397: IFFALSE 8407
// sArmoury := true ;
8399: LD_ADDR_EXP 31
8403: PUSH
8404: LD_INT 1
8406: ST_TO_ADDR
// if p3 = 7 then
8407: LD_VAR 0 3
8411: PUSH
8412: LD_INT 7
8414: EQUAL
8415: IFFALSE 8425
// sRadar := true ;
8417: LD_ADDR_EXP 32
8421: PUSH
8422: LD_INT 1
8424: ST_TO_ADDR
// if p3 = 8 then
8425: LD_VAR 0 3
8429: PUSH
8430: LD_INT 8
8432: EQUAL
8433: IFFALSE 8443
// sBunker := true ;
8435: LD_ADDR_EXP 33
8439: PUSH
8440: LD_INT 1
8442: ST_TO_ADDR
// if p3 = 9 then
8443: LD_VAR 0 3
8447: PUSH
8448: LD_INT 9
8450: EQUAL
8451: IFFALSE 8461
// sHack := true ;
8453: LD_ADDR_EXP 34
8457: PUSH
8458: LD_INT 1
8460: ST_TO_ADDR
// if p3 = 10 then
8461: LD_VAR 0 3
8465: PUSH
8466: LD_INT 10
8468: EQUAL
8469: IFFALSE 8479
// sFire := true ;
8471: LD_ADDR_EXP 35
8475: PUSH
8476: LD_INT 1
8478: ST_TO_ADDR
// if p3 = 11 then
8479: LD_VAR 0 3
8483: PUSH
8484: LD_INT 11
8486: EQUAL
8487: IFFALSE 8497
// sRefresh := true ;
8489: LD_ADDR_EXP 36
8493: PUSH
8494: LD_INT 1
8496: ST_TO_ADDR
// if p3 = 12 then
8497: LD_VAR 0 3
8501: PUSH
8502: LD_INT 12
8504: EQUAL
8505: IFFALSE 8515
// sExp := true ;
8507: LD_ADDR_EXP 37
8511: PUSH
8512: LD_INT 1
8514: ST_TO_ADDR
// if p3 = 13 then
8515: LD_VAR 0 3
8519: PUSH
8520: LD_INT 13
8522: EQUAL
8523: IFFALSE 8533
// sDepot := true ;
8525: LD_ADDR_EXP 38
8529: PUSH
8530: LD_INT 1
8532: ST_TO_ADDR
// if p3 = 14 then
8533: LD_VAR 0 3
8537: PUSH
8538: LD_INT 14
8540: EQUAL
8541: IFFALSE 8551
// sFlag := true ;
8543: LD_ADDR_EXP 39
8547: PUSH
8548: LD_INT 1
8550: ST_TO_ADDR
// if p3 = 15 then
8551: LD_VAR 0 3
8555: PUSH
8556: LD_INT 15
8558: EQUAL
8559: IFFALSE 8569
// sKamikadze := true ;
8561: LD_ADDR_EXP 47
8565: PUSH
8566: LD_INT 1
8568: ST_TO_ADDR
// if p3 = 16 then
8569: LD_VAR 0 3
8573: PUSH
8574: LD_INT 16
8576: EQUAL
8577: IFFALSE 8587
// sTroll := true ;
8579: LD_ADDR_EXP 48
8583: PUSH
8584: LD_INT 1
8586: ST_TO_ADDR
// if p3 = 17 then
8587: LD_VAR 0 3
8591: PUSH
8592: LD_INT 17
8594: EQUAL
8595: IFFALSE 8605
// sSlow := true ;
8597: LD_ADDR_EXP 49
8601: PUSH
8602: LD_INT 1
8604: ST_TO_ADDR
// if p3 = 18 then
8605: LD_VAR 0 3
8609: PUSH
8610: LD_INT 18
8612: EQUAL
8613: IFFALSE 8623
// sLack := true ;
8615: LD_ADDR_EXP 50
8619: PUSH
8620: LD_INT 1
8622: ST_TO_ADDR
// if p3 = 19 then
8623: LD_VAR 0 3
8627: PUSH
8628: LD_INT 19
8630: EQUAL
8631: IFFALSE 8641
// sTank := true ;
8633: LD_ADDR_EXP 52
8637: PUSH
8638: LD_INT 1
8640: ST_TO_ADDR
// if p3 = 20 then
8641: LD_VAR 0 3
8645: PUSH
8646: LD_INT 20
8648: EQUAL
8649: IFFALSE 8659
// sRemote := true ;
8651: LD_ADDR_EXP 53
8655: PUSH
8656: LD_INT 1
8658: ST_TO_ADDR
// if p3 = 21 then
8659: LD_VAR 0 3
8663: PUSH
8664: LD_INT 21
8666: EQUAL
8667: IFFALSE 8677
// sPowell := true ;
8669: LD_ADDR_EXP 54
8673: PUSH
8674: LD_INT 1
8676: ST_TO_ADDR
// if p3 = 22 then
8677: LD_VAR 0 3
8681: PUSH
8682: LD_INT 22
8684: EQUAL
8685: IFFALSE 8695
// sTeleport := true ;
8687: LD_ADDR_EXP 57
8691: PUSH
8692: LD_INT 1
8694: ST_TO_ADDR
// if p3 = 23 then
8695: LD_VAR 0 3
8699: PUSH
8700: LD_INT 23
8702: EQUAL
8703: IFFALSE 8713
// sOilTower := true ;
8705: LD_ADDR_EXP 59
8709: PUSH
8710: LD_INT 1
8712: ST_TO_ADDR
// if p3 = 24 then
8713: LD_VAR 0 3
8717: PUSH
8718: LD_INT 24
8720: EQUAL
8721: IFFALSE 8731
// sShovel := true ;
8723: LD_ADDR_EXP 60
8727: PUSH
8728: LD_INT 1
8730: ST_TO_ADDR
// if p3 = 25 then
8731: LD_VAR 0 3
8735: PUSH
8736: LD_INT 25
8738: EQUAL
8739: IFFALSE 8749
// sSheik := true ;
8741: LD_ADDR_EXP 61
8745: PUSH
8746: LD_INT 1
8748: ST_TO_ADDR
// if p3 = 26 then
8749: LD_VAR 0 3
8753: PUSH
8754: LD_INT 26
8756: EQUAL
8757: IFFALSE 8767
// sEarthquake := true ;
8759: LD_ADDR_EXP 63
8763: PUSH
8764: LD_INT 1
8766: ST_TO_ADDR
// if p3 = 27 then
8767: LD_VAR 0 3
8771: PUSH
8772: LD_INT 27
8774: EQUAL
8775: IFFALSE 8785
// sAI := true ;
8777: LD_ADDR_EXP 64
8781: PUSH
8782: LD_INT 1
8784: ST_TO_ADDR
// if p3 = 28 then
8785: LD_VAR 0 3
8789: PUSH
8790: LD_INT 28
8792: EQUAL
8793: IFFALSE 8803
// sCargo := true ;
8795: LD_ADDR_EXP 67
8799: PUSH
8800: LD_INT 1
8802: ST_TO_ADDR
// if p3 = 29 then
8803: LD_VAR 0 3
8807: PUSH
8808: LD_INT 29
8810: EQUAL
8811: IFFALSE 8821
// sDLaser := true ;
8813: LD_ADDR_EXP 68
8817: PUSH
8818: LD_INT 1
8820: ST_TO_ADDR
// if p3 = 30 then
8821: LD_VAR 0 3
8825: PUSH
8826: LD_INT 30
8828: EQUAL
8829: IFFALSE 8839
// sExchange := true ;
8831: LD_ADDR_EXP 69
8835: PUSH
8836: LD_INT 1
8838: ST_TO_ADDR
// if p3 = 31 then
8839: LD_VAR 0 3
8843: PUSH
8844: LD_INT 31
8846: EQUAL
8847: IFFALSE 8857
// sFac := true ;
8849: LD_ADDR_EXP 70
8853: PUSH
8854: LD_INT 1
8856: ST_TO_ADDR
// if p3 = 32 then
8857: LD_VAR 0 3
8861: PUSH
8862: LD_INT 32
8864: EQUAL
8865: IFFALSE 8875
// sPower := true ;
8867: LD_ADDR_EXP 71
8871: PUSH
8872: LD_INT 1
8874: ST_TO_ADDR
// if p3 = 33 then
8875: LD_VAR 0 3
8879: PUSH
8880: LD_INT 33
8882: EQUAL
8883: IFFALSE 8893
// sRandom := true ;
8885: LD_ADDR_EXP 72
8889: PUSH
8890: LD_INT 1
8892: ST_TO_ADDR
// if p3 = 34 then
8893: LD_VAR 0 3
8897: PUSH
8898: LD_INT 34
8900: EQUAL
8901: IFFALSE 8911
// sShield := true ;
8903: LD_ADDR_EXP 73
8907: PUSH
8908: LD_INT 1
8910: ST_TO_ADDR
// if p3 = 35 then
8911: LD_VAR 0 3
8915: PUSH
8916: LD_INT 35
8918: EQUAL
8919: IFFALSE 8929
// sTime := true ;
8921: LD_ADDR_EXP 74
8925: PUSH
8926: LD_INT 1
8928: ST_TO_ADDR
// if p3 = 36 then
8929: LD_VAR 0 3
8933: PUSH
8934: LD_INT 36
8936: EQUAL
8937: IFFALSE 8947
// sTools := true ;
8939: LD_ADDR_EXP 75
8943: PUSH
8944: LD_INT 1
8946: ST_TO_ADDR
// if p3 = 101 then
8947: LD_VAR 0 3
8951: PUSH
8952: LD_INT 101
8954: EQUAL
8955: IFFALSE 8965
// sSold := true ;
8957: LD_ADDR_EXP 40
8961: PUSH
8962: LD_INT 1
8964: ST_TO_ADDR
// if p3 = 102 then
8965: LD_VAR 0 3
8969: PUSH
8970: LD_INT 102
8972: EQUAL
8973: IFFALSE 8983
// sDiff := true ;
8975: LD_ADDR_EXP 41
8979: PUSH
8980: LD_INT 1
8982: ST_TO_ADDR
// if p3 = 103 then
8983: LD_VAR 0 3
8987: PUSH
8988: LD_INT 103
8990: EQUAL
8991: IFFALSE 9001
// sFog := true ;
8993: LD_ADDR_EXP 44
8997: PUSH
8998: LD_INT 1
9000: ST_TO_ADDR
// if p3 = 104 then
9001: LD_VAR 0 3
9005: PUSH
9006: LD_INT 104
9008: EQUAL
9009: IFFALSE 9019
// sReset := true ;
9011: LD_ADDR_EXP 45
9015: PUSH
9016: LD_INT 1
9018: ST_TO_ADDR
// if p3 = 105 then
9019: LD_VAR 0 3
9023: PUSH
9024: LD_INT 105
9026: EQUAL
9027: IFFALSE 9037
// sSun := true ;
9029: LD_ADDR_EXP 46
9033: PUSH
9034: LD_INT 1
9036: ST_TO_ADDR
// if p3 = 106 then
9037: LD_VAR 0 3
9041: PUSH
9042: LD_INT 106
9044: EQUAL
9045: IFFALSE 9055
// sTiger := true ;
9047: LD_ADDR_EXP 42
9051: PUSH
9052: LD_INT 1
9054: ST_TO_ADDR
// if p3 = 107 then
9055: LD_VAR 0 3
9059: PUSH
9060: LD_INT 107
9062: EQUAL
9063: IFFALSE 9073
// sBomb := true ;
9065: LD_ADDR_EXP 43
9069: PUSH
9070: LD_INT 1
9072: ST_TO_ADDR
// if p3 = 108 then
9073: LD_VAR 0 3
9077: PUSH
9078: LD_INT 108
9080: EQUAL
9081: IFFALSE 9091
// sWound := true ;
9083: LD_ADDR_EXP 51
9087: PUSH
9088: LD_INT 1
9090: ST_TO_ADDR
// if p3 = 109 then
9091: LD_VAR 0 3
9095: PUSH
9096: LD_INT 109
9098: EQUAL
9099: IFFALSE 9109
// sBetray := true ;
9101: LD_ADDR_EXP 55
9105: PUSH
9106: LD_INT 1
9108: ST_TO_ADDR
// if p3 = 110 then
9109: LD_VAR 0 3
9113: PUSH
9114: LD_INT 110
9116: EQUAL
9117: IFFALSE 9127
// sContamin := true ;
9119: LD_ADDR_EXP 56
9123: PUSH
9124: LD_INT 1
9126: ST_TO_ADDR
// if p3 = 111 then
9127: LD_VAR 0 3
9131: PUSH
9132: LD_INT 111
9134: EQUAL
9135: IFFALSE 9145
// sOil := true ;
9137: LD_ADDR_EXP 58
9141: PUSH
9142: LD_INT 1
9144: ST_TO_ADDR
// if p3 = 112 then
9145: LD_VAR 0 3
9149: PUSH
9150: LD_INT 112
9152: EQUAL
9153: IFFALSE 9163
// sStu := true ;
9155: LD_ADDR_EXP 62
9159: PUSH
9160: LD_INT 1
9162: ST_TO_ADDR
// if p3 = 113 then
9163: LD_VAR 0 3
9167: PUSH
9168: LD_INT 113
9170: EQUAL
9171: IFFALSE 9181
// sBazooka := true ;
9173: LD_ADDR_EXP 65
9177: PUSH
9178: LD_INT 1
9180: ST_TO_ADDR
// if p3 = 114 then
9181: LD_VAR 0 3
9185: PUSH
9186: LD_INT 114
9188: EQUAL
9189: IFFALSE 9199
// sMortar := true ;
9191: LD_ADDR_EXP 66
9195: PUSH
9196: LD_INT 1
9198: ST_TO_ADDR
// if p3 = 115 then
9199: LD_VAR 0 3
9203: PUSH
9204: LD_INT 115
9206: EQUAL
9207: IFFALSE 9217
// sRanger := true ;
9209: LD_ADDR_EXP 76
9213: PUSH
9214: LD_INT 1
9216: ST_TO_ADDR
// if p3 = 116 then
9217: LD_VAR 0 3
9221: PUSH
9222: LD_INT 116
9224: EQUAL
9225: IFFALSE 9235
// sComputer := true ;
9227: LD_ADDR_EXP 77
9231: PUSH
9232: LD_INT 1
9234: ST_TO_ADDR
// if p3 = 117 then
9235: LD_VAR 0 3
9239: PUSH
9240: LD_INT 117
9242: EQUAL
9243: IFFALSE 9253
// s30 := true ;
9245: LD_ADDR_EXP 78
9249: PUSH
9250: LD_INT 1
9252: ST_TO_ADDR
// if p3 = 118 then
9253: LD_VAR 0 3
9257: PUSH
9258: LD_INT 118
9260: EQUAL
9261: IFFALSE 9271
// s60 := true ;
9263: LD_ADDR_EXP 79
9267: PUSH
9268: LD_INT 1
9270: ST_TO_ADDR
// end ; if p2 = hack_mode then
9271: LD_VAR 0 2
9275: PUSH
9276: LD_INT 101
9278: EQUAL
9279: IFFALSE 9407
// begin case p3 of 1 :
9281: LD_VAR 0 3
9285: PUSH
9286: LD_INT 1
9288: DOUBLE
9289: EQUAL
9290: IFTRUE 9294
9292: GO 9301
9294: POP
// hHackUnlimitedResources ; 2 :
9295: CALL 21554 0 0
9299: GO 9407
9301: LD_INT 2
9303: DOUBLE
9304: EQUAL
9305: IFTRUE 9309
9307: GO 9316
9309: POP
// hHackSetLevel10 ; 3 :
9310: CALL 21687 0 0
9314: GO 9407
9316: LD_INT 3
9318: DOUBLE
9319: EQUAL
9320: IFTRUE 9324
9322: GO 9331
9324: POP
// hHackSetLevel10YourUnits ; 4 :
9325: CALL 21772 0 0
9329: GO 9407
9331: LD_INT 4
9333: DOUBLE
9334: EQUAL
9335: IFTRUE 9339
9337: GO 9346
9339: POP
// hHackInvincible ; 5 :
9340: CALL 22220 0 0
9344: GO 9407
9346: LD_INT 5
9348: DOUBLE
9349: EQUAL
9350: IFTRUE 9354
9352: GO 9361
9354: POP
// hHackInvisible ; 6 :
9355: CALL 22331 0 0
9359: GO 9407
9361: LD_INT 6
9363: DOUBLE
9364: EQUAL
9365: IFTRUE 9369
9367: GO 9376
9369: POP
// hHackChangeYourSide ; 7 :
9370: CALL 22388 0 0
9374: GO 9407
9376: LD_INT 7
9378: DOUBLE
9379: EQUAL
9380: IFTRUE 9384
9382: GO 9391
9384: POP
// hHackChangeUnitSide ; 8 :
9385: CALL 22430 0 0
9389: GO 9407
9391: LD_INT 8
9393: DOUBLE
9394: EQUAL
9395: IFTRUE 9399
9397: GO 9406
9399: POP
// hHackFog ; end ;
9400: CALL 22531 0 0
9404: GO 9407
9406: POP
// end ; if p2 = game_save_mode then
9407: LD_VAR 0 2
9411: PUSH
9412: LD_INT 102
9414: EQUAL
9415: IFFALSE 9470
// begin if p3 = 1 then
9417: LD_VAR 0 3
9421: PUSH
9422: LD_INT 1
9424: EQUAL
9425: IFFALSE 9437
// globalGameSaveCounter := p4 ;
9427: LD_ADDR_EXP 22
9431: PUSH
9432: LD_VAR 0 4
9436: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
9437: LD_VAR 0 3
9441: PUSH
9442: LD_INT 2
9444: EQUAL
9445: PUSH
9446: LD_EXP 22
9450: AND
9451: IFFALSE 9470
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
9453: LD_STRING setGameSaveCounter(
9455: PUSH
9456: LD_EXP 22
9460: STR
9461: PUSH
9462: LD_STRING )
9464: STR
9465: PPUSH
9466: CALL_OW 559
// end ; end ;
9470: LD_VAR 0 7
9474: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
9475: LD_INT 0
9477: PPUSH
// streamModeActive := false ;
9478: LD_ADDR_EXP 23
9482: PUSH
9483: LD_INT 0
9485: ST_TO_ADDR
// normalCounter := 36 ;
9486: LD_ADDR_EXP 24
9490: PUSH
9491: LD_INT 36
9493: ST_TO_ADDR
// hardcoreCounter := 18 ;
9494: LD_ADDR_EXP 25
9498: PUSH
9499: LD_INT 18
9501: ST_TO_ADDR
// sRocket := false ;
9502: LD_ADDR_EXP 28
9506: PUSH
9507: LD_INT 0
9509: ST_TO_ADDR
// sSpeed := false ;
9510: LD_ADDR_EXP 27
9514: PUSH
9515: LD_INT 0
9517: ST_TO_ADDR
// sEngine := false ;
9518: LD_ADDR_EXP 29
9522: PUSH
9523: LD_INT 0
9525: ST_TO_ADDR
// sSpec := false ;
9526: LD_ADDR_EXP 26
9530: PUSH
9531: LD_INT 0
9533: ST_TO_ADDR
// sLevel := false ;
9534: LD_ADDR_EXP 30
9538: PUSH
9539: LD_INT 0
9541: ST_TO_ADDR
// sArmoury := false ;
9542: LD_ADDR_EXP 31
9546: PUSH
9547: LD_INT 0
9549: ST_TO_ADDR
// sRadar := false ;
9550: LD_ADDR_EXP 32
9554: PUSH
9555: LD_INT 0
9557: ST_TO_ADDR
// sBunker := false ;
9558: LD_ADDR_EXP 33
9562: PUSH
9563: LD_INT 0
9565: ST_TO_ADDR
// sHack := false ;
9566: LD_ADDR_EXP 34
9570: PUSH
9571: LD_INT 0
9573: ST_TO_ADDR
// sFire := false ;
9574: LD_ADDR_EXP 35
9578: PUSH
9579: LD_INT 0
9581: ST_TO_ADDR
// sRefresh := false ;
9582: LD_ADDR_EXP 36
9586: PUSH
9587: LD_INT 0
9589: ST_TO_ADDR
// sExp := false ;
9590: LD_ADDR_EXP 37
9594: PUSH
9595: LD_INT 0
9597: ST_TO_ADDR
// sDepot := false ;
9598: LD_ADDR_EXP 38
9602: PUSH
9603: LD_INT 0
9605: ST_TO_ADDR
// sFlag := false ;
9606: LD_ADDR_EXP 39
9610: PUSH
9611: LD_INT 0
9613: ST_TO_ADDR
// sKamikadze := false ;
9614: LD_ADDR_EXP 47
9618: PUSH
9619: LD_INT 0
9621: ST_TO_ADDR
// sTroll := false ;
9622: LD_ADDR_EXP 48
9626: PUSH
9627: LD_INT 0
9629: ST_TO_ADDR
// sSlow := false ;
9630: LD_ADDR_EXP 49
9634: PUSH
9635: LD_INT 0
9637: ST_TO_ADDR
// sLack := false ;
9638: LD_ADDR_EXP 50
9642: PUSH
9643: LD_INT 0
9645: ST_TO_ADDR
// sTank := false ;
9646: LD_ADDR_EXP 52
9650: PUSH
9651: LD_INT 0
9653: ST_TO_ADDR
// sRemote := false ;
9654: LD_ADDR_EXP 53
9658: PUSH
9659: LD_INT 0
9661: ST_TO_ADDR
// sPowell := false ;
9662: LD_ADDR_EXP 54
9666: PUSH
9667: LD_INT 0
9669: ST_TO_ADDR
// sTeleport := false ;
9670: LD_ADDR_EXP 57
9674: PUSH
9675: LD_INT 0
9677: ST_TO_ADDR
// sOilTower := false ;
9678: LD_ADDR_EXP 59
9682: PUSH
9683: LD_INT 0
9685: ST_TO_ADDR
// sShovel := false ;
9686: LD_ADDR_EXP 60
9690: PUSH
9691: LD_INT 0
9693: ST_TO_ADDR
// sSheik := false ;
9694: LD_ADDR_EXP 61
9698: PUSH
9699: LD_INT 0
9701: ST_TO_ADDR
// sEarthquake := false ;
9702: LD_ADDR_EXP 63
9706: PUSH
9707: LD_INT 0
9709: ST_TO_ADDR
// sAI := false ;
9710: LD_ADDR_EXP 64
9714: PUSH
9715: LD_INT 0
9717: ST_TO_ADDR
// sCargo := false ;
9718: LD_ADDR_EXP 67
9722: PUSH
9723: LD_INT 0
9725: ST_TO_ADDR
// sDLaser := false ;
9726: LD_ADDR_EXP 68
9730: PUSH
9731: LD_INT 0
9733: ST_TO_ADDR
// sExchange := false ;
9734: LD_ADDR_EXP 69
9738: PUSH
9739: LD_INT 0
9741: ST_TO_ADDR
// sFac := false ;
9742: LD_ADDR_EXP 70
9746: PUSH
9747: LD_INT 0
9749: ST_TO_ADDR
// sPower := false ;
9750: LD_ADDR_EXP 71
9754: PUSH
9755: LD_INT 0
9757: ST_TO_ADDR
// sRandom := false ;
9758: LD_ADDR_EXP 72
9762: PUSH
9763: LD_INT 0
9765: ST_TO_ADDR
// sShield := false ;
9766: LD_ADDR_EXP 73
9770: PUSH
9771: LD_INT 0
9773: ST_TO_ADDR
// sTime := false ;
9774: LD_ADDR_EXP 74
9778: PUSH
9779: LD_INT 0
9781: ST_TO_ADDR
// sTools := false ;
9782: LD_ADDR_EXP 75
9786: PUSH
9787: LD_INT 0
9789: ST_TO_ADDR
// sSold := false ;
9790: LD_ADDR_EXP 40
9794: PUSH
9795: LD_INT 0
9797: ST_TO_ADDR
// sDiff := false ;
9798: LD_ADDR_EXP 41
9802: PUSH
9803: LD_INT 0
9805: ST_TO_ADDR
// sFog := false ;
9806: LD_ADDR_EXP 44
9810: PUSH
9811: LD_INT 0
9813: ST_TO_ADDR
// sReset := false ;
9814: LD_ADDR_EXP 45
9818: PUSH
9819: LD_INT 0
9821: ST_TO_ADDR
// sSun := false ;
9822: LD_ADDR_EXP 46
9826: PUSH
9827: LD_INT 0
9829: ST_TO_ADDR
// sTiger := false ;
9830: LD_ADDR_EXP 42
9834: PUSH
9835: LD_INT 0
9837: ST_TO_ADDR
// sBomb := false ;
9838: LD_ADDR_EXP 43
9842: PUSH
9843: LD_INT 0
9845: ST_TO_ADDR
// sWound := false ;
9846: LD_ADDR_EXP 51
9850: PUSH
9851: LD_INT 0
9853: ST_TO_ADDR
// sBetray := false ;
9854: LD_ADDR_EXP 55
9858: PUSH
9859: LD_INT 0
9861: ST_TO_ADDR
// sContamin := false ;
9862: LD_ADDR_EXP 56
9866: PUSH
9867: LD_INT 0
9869: ST_TO_ADDR
// sOil := false ;
9870: LD_ADDR_EXP 58
9874: PUSH
9875: LD_INT 0
9877: ST_TO_ADDR
// sStu := false ;
9878: LD_ADDR_EXP 62
9882: PUSH
9883: LD_INT 0
9885: ST_TO_ADDR
// sBazooka := false ;
9886: LD_ADDR_EXP 65
9890: PUSH
9891: LD_INT 0
9893: ST_TO_ADDR
// sMortar := false ;
9894: LD_ADDR_EXP 66
9898: PUSH
9899: LD_INT 0
9901: ST_TO_ADDR
// sRanger := false ;
9902: LD_ADDR_EXP 76
9906: PUSH
9907: LD_INT 0
9909: ST_TO_ADDR
// sComputer := false ;
9910: LD_ADDR_EXP 77
9914: PUSH
9915: LD_INT 0
9917: ST_TO_ADDR
// s30 := false ;
9918: LD_ADDR_EXP 78
9922: PUSH
9923: LD_INT 0
9925: ST_TO_ADDR
// s60 := false ;
9926: LD_ADDR_EXP 79
9930: PUSH
9931: LD_INT 0
9933: ST_TO_ADDR
// end ;
9934: LD_VAR 0 1
9938: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
9939: LD_INT 0
9941: PPUSH
9942: PPUSH
9943: PPUSH
9944: PPUSH
9945: PPUSH
9946: PPUSH
9947: PPUSH
// result := [ ] ;
9948: LD_ADDR_VAR 0 2
9952: PUSH
9953: EMPTY
9954: ST_TO_ADDR
// if campaign_id = 1 then
9955: LD_OWVAR 69
9959: PUSH
9960: LD_INT 1
9962: EQUAL
9963: IFFALSE 13129
// begin case mission_number of 1 :
9965: LD_OWVAR 70
9969: PUSH
9970: LD_INT 1
9972: DOUBLE
9973: EQUAL
9974: IFTRUE 9978
9976: GO 10054
9978: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
9979: LD_ADDR_VAR 0 2
9983: PUSH
9984: LD_INT 2
9986: PUSH
9987: LD_INT 4
9989: PUSH
9990: LD_INT 11
9992: PUSH
9993: LD_INT 12
9995: PUSH
9996: LD_INT 15
9998: PUSH
9999: LD_INT 16
10001: PUSH
10002: LD_INT 22
10004: PUSH
10005: LD_INT 23
10007: PUSH
10008: LD_INT 26
10010: PUSH
10011: EMPTY
10012: LIST
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: PUSH
10022: LD_INT 101
10024: PUSH
10025: LD_INT 102
10027: PUSH
10028: LD_INT 106
10030: PUSH
10031: LD_INT 116
10033: PUSH
10034: LD_INT 117
10036: PUSH
10037: LD_INT 118
10039: PUSH
10040: EMPTY
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: LIST
10046: LIST
10047: PUSH
10048: EMPTY
10049: LIST
10050: LIST
10051: ST_TO_ADDR
10052: GO 13127
10054: LD_INT 2
10056: DOUBLE
10057: EQUAL
10058: IFTRUE 10062
10060: GO 10146
10062: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
10063: LD_ADDR_VAR 0 2
10067: PUSH
10068: LD_INT 2
10070: PUSH
10071: LD_INT 4
10073: PUSH
10074: LD_INT 11
10076: PUSH
10077: LD_INT 12
10079: PUSH
10080: LD_INT 15
10082: PUSH
10083: LD_INT 16
10085: PUSH
10086: LD_INT 22
10088: PUSH
10089: LD_INT 23
10091: PUSH
10092: LD_INT 26
10094: PUSH
10095: EMPTY
10096: LIST
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: PUSH
10106: LD_INT 101
10108: PUSH
10109: LD_INT 102
10111: PUSH
10112: LD_INT 105
10114: PUSH
10115: LD_INT 106
10117: PUSH
10118: LD_INT 108
10120: PUSH
10121: LD_INT 116
10123: PUSH
10124: LD_INT 117
10126: PUSH
10127: LD_INT 118
10129: PUSH
10130: EMPTY
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: LIST
10136: LIST
10137: LIST
10138: LIST
10139: PUSH
10140: EMPTY
10141: LIST
10142: LIST
10143: ST_TO_ADDR
10144: GO 13127
10146: LD_INT 3
10148: DOUBLE
10149: EQUAL
10150: IFTRUE 10154
10152: GO 10242
10154: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
10155: LD_ADDR_VAR 0 2
10159: PUSH
10160: LD_INT 2
10162: PUSH
10163: LD_INT 4
10165: PUSH
10166: LD_INT 5
10168: PUSH
10169: LD_INT 11
10171: PUSH
10172: LD_INT 12
10174: PUSH
10175: LD_INT 15
10177: PUSH
10178: LD_INT 16
10180: PUSH
10181: LD_INT 22
10183: PUSH
10184: LD_INT 26
10186: PUSH
10187: LD_INT 36
10189: PUSH
10190: EMPTY
10191: LIST
10192: LIST
10193: LIST
10194: LIST
10195: LIST
10196: LIST
10197: LIST
10198: LIST
10199: LIST
10200: LIST
10201: PUSH
10202: LD_INT 101
10204: PUSH
10205: LD_INT 102
10207: PUSH
10208: LD_INT 105
10210: PUSH
10211: LD_INT 106
10213: PUSH
10214: LD_INT 108
10216: PUSH
10217: LD_INT 116
10219: PUSH
10220: LD_INT 117
10222: PUSH
10223: LD_INT 118
10225: PUSH
10226: EMPTY
10227: LIST
10228: LIST
10229: LIST
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: PUSH
10236: EMPTY
10237: LIST
10238: LIST
10239: ST_TO_ADDR
10240: GO 13127
10242: LD_INT 4
10244: DOUBLE
10245: EQUAL
10246: IFTRUE 10250
10248: GO 10346
10250: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
10251: LD_ADDR_VAR 0 2
10255: PUSH
10256: LD_INT 2
10258: PUSH
10259: LD_INT 4
10261: PUSH
10262: LD_INT 5
10264: PUSH
10265: LD_INT 8
10267: PUSH
10268: LD_INT 11
10270: PUSH
10271: LD_INT 12
10273: PUSH
10274: LD_INT 15
10276: PUSH
10277: LD_INT 16
10279: PUSH
10280: LD_INT 22
10282: PUSH
10283: LD_INT 23
10285: PUSH
10286: LD_INT 26
10288: PUSH
10289: LD_INT 36
10291: PUSH
10292: EMPTY
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: PUSH
10306: LD_INT 101
10308: PUSH
10309: LD_INT 102
10311: PUSH
10312: LD_INT 105
10314: PUSH
10315: LD_INT 106
10317: PUSH
10318: LD_INT 108
10320: PUSH
10321: LD_INT 116
10323: PUSH
10324: LD_INT 117
10326: PUSH
10327: LD_INT 118
10329: PUSH
10330: EMPTY
10331: LIST
10332: LIST
10333: LIST
10334: LIST
10335: LIST
10336: LIST
10337: LIST
10338: LIST
10339: PUSH
10340: EMPTY
10341: LIST
10342: LIST
10343: ST_TO_ADDR
10344: GO 13127
10346: LD_INT 5
10348: DOUBLE
10349: EQUAL
10350: IFTRUE 10354
10352: GO 10466
10354: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
10355: LD_ADDR_VAR 0 2
10359: PUSH
10360: LD_INT 2
10362: PUSH
10363: LD_INT 4
10365: PUSH
10366: LD_INT 5
10368: PUSH
10369: LD_INT 6
10371: PUSH
10372: LD_INT 8
10374: PUSH
10375: LD_INT 11
10377: PUSH
10378: LD_INT 12
10380: PUSH
10381: LD_INT 15
10383: PUSH
10384: LD_INT 16
10386: PUSH
10387: LD_INT 22
10389: PUSH
10390: LD_INT 23
10392: PUSH
10393: LD_INT 25
10395: PUSH
10396: LD_INT 26
10398: PUSH
10399: LD_INT 36
10401: PUSH
10402: EMPTY
10403: LIST
10404: LIST
10405: LIST
10406: LIST
10407: LIST
10408: LIST
10409: LIST
10410: LIST
10411: LIST
10412: LIST
10413: LIST
10414: LIST
10415: LIST
10416: LIST
10417: PUSH
10418: LD_INT 101
10420: PUSH
10421: LD_INT 102
10423: PUSH
10424: LD_INT 105
10426: PUSH
10427: LD_INT 106
10429: PUSH
10430: LD_INT 108
10432: PUSH
10433: LD_INT 109
10435: PUSH
10436: LD_INT 112
10438: PUSH
10439: LD_INT 116
10441: PUSH
10442: LD_INT 117
10444: PUSH
10445: LD_INT 118
10447: PUSH
10448: EMPTY
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: LIST
10459: PUSH
10460: EMPTY
10461: LIST
10462: LIST
10463: ST_TO_ADDR
10464: GO 13127
10466: LD_INT 6
10468: DOUBLE
10469: EQUAL
10470: IFTRUE 10474
10472: GO 10606
10474: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
10475: LD_ADDR_VAR 0 2
10479: PUSH
10480: LD_INT 2
10482: PUSH
10483: LD_INT 4
10485: PUSH
10486: LD_INT 5
10488: PUSH
10489: LD_INT 6
10491: PUSH
10492: LD_INT 8
10494: PUSH
10495: LD_INT 11
10497: PUSH
10498: LD_INT 12
10500: PUSH
10501: LD_INT 15
10503: PUSH
10504: LD_INT 16
10506: PUSH
10507: LD_INT 20
10509: PUSH
10510: LD_INT 21
10512: PUSH
10513: LD_INT 22
10515: PUSH
10516: LD_INT 23
10518: PUSH
10519: LD_INT 25
10521: PUSH
10522: LD_INT 26
10524: PUSH
10525: LD_INT 30
10527: PUSH
10528: LD_INT 31
10530: PUSH
10531: LD_INT 32
10533: PUSH
10534: LD_INT 36
10536: PUSH
10537: EMPTY
10538: LIST
10539: LIST
10540: LIST
10541: LIST
10542: LIST
10543: LIST
10544: LIST
10545: LIST
10546: LIST
10547: LIST
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: PUSH
10558: LD_INT 101
10560: PUSH
10561: LD_INT 102
10563: PUSH
10564: LD_INT 105
10566: PUSH
10567: LD_INT 106
10569: PUSH
10570: LD_INT 108
10572: PUSH
10573: LD_INT 109
10575: PUSH
10576: LD_INT 112
10578: PUSH
10579: LD_INT 116
10581: PUSH
10582: LD_INT 117
10584: PUSH
10585: LD_INT 118
10587: PUSH
10588: EMPTY
10589: LIST
10590: LIST
10591: LIST
10592: LIST
10593: LIST
10594: LIST
10595: LIST
10596: LIST
10597: LIST
10598: LIST
10599: PUSH
10600: EMPTY
10601: LIST
10602: LIST
10603: ST_TO_ADDR
10604: GO 13127
10606: LD_INT 7
10608: DOUBLE
10609: EQUAL
10610: IFTRUE 10614
10612: GO 10726
10614: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
10615: LD_ADDR_VAR 0 2
10619: PUSH
10620: LD_INT 2
10622: PUSH
10623: LD_INT 4
10625: PUSH
10626: LD_INT 5
10628: PUSH
10629: LD_INT 7
10631: PUSH
10632: LD_INT 11
10634: PUSH
10635: LD_INT 12
10637: PUSH
10638: LD_INT 15
10640: PUSH
10641: LD_INT 16
10643: PUSH
10644: LD_INT 20
10646: PUSH
10647: LD_INT 21
10649: PUSH
10650: LD_INT 22
10652: PUSH
10653: LD_INT 23
10655: PUSH
10656: LD_INT 25
10658: PUSH
10659: LD_INT 26
10661: PUSH
10662: EMPTY
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: PUSH
10678: LD_INT 101
10680: PUSH
10681: LD_INT 102
10683: PUSH
10684: LD_INT 103
10686: PUSH
10687: LD_INT 105
10689: PUSH
10690: LD_INT 106
10692: PUSH
10693: LD_INT 108
10695: PUSH
10696: LD_INT 112
10698: PUSH
10699: LD_INT 116
10701: PUSH
10702: LD_INT 117
10704: PUSH
10705: LD_INT 118
10707: PUSH
10708: EMPTY
10709: LIST
10710: LIST
10711: LIST
10712: LIST
10713: LIST
10714: LIST
10715: LIST
10716: LIST
10717: LIST
10718: LIST
10719: PUSH
10720: EMPTY
10721: LIST
10722: LIST
10723: ST_TO_ADDR
10724: GO 13127
10726: LD_INT 8
10728: DOUBLE
10729: EQUAL
10730: IFTRUE 10734
10732: GO 10874
10734: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
10735: LD_ADDR_VAR 0 2
10739: PUSH
10740: LD_INT 2
10742: PUSH
10743: LD_INT 4
10745: PUSH
10746: LD_INT 5
10748: PUSH
10749: LD_INT 6
10751: PUSH
10752: LD_INT 7
10754: PUSH
10755: LD_INT 8
10757: PUSH
10758: LD_INT 11
10760: PUSH
10761: LD_INT 12
10763: PUSH
10764: LD_INT 15
10766: PUSH
10767: LD_INT 16
10769: PUSH
10770: LD_INT 20
10772: PUSH
10773: LD_INT 21
10775: PUSH
10776: LD_INT 22
10778: PUSH
10779: LD_INT 23
10781: PUSH
10782: LD_INT 25
10784: PUSH
10785: LD_INT 26
10787: PUSH
10788: LD_INT 30
10790: PUSH
10791: LD_INT 31
10793: PUSH
10794: LD_INT 32
10796: PUSH
10797: LD_INT 36
10799: PUSH
10800: EMPTY
10801: LIST
10802: LIST
10803: LIST
10804: LIST
10805: LIST
10806: LIST
10807: LIST
10808: LIST
10809: LIST
10810: LIST
10811: LIST
10812: LIST
10813: LIST
10814: LIST
10815: LIST
10816: LIST
10817: LIST
10818: LIST
10819: LIST
10820: LIST
10821: PUSH
10822: LD_INT 101
10824: PUSH
10825: LD_INT 102
10827: PUSH
10828: LD_INT 103
10830: PUSH
10831: LD_INT 105
10833: PUSH
10834: LD_INT 106
10836: PUSH
10837: LD_INT 108
10839: PUSH
10840: LD_INT 109
10842: PUSH
10843: LD_INT 112
10845: PUSH
10846: LD_INT 116
10848: PUSH
10849: LD_INT 117
10851: PUSH
10852: LD_INT 118
10854: PUSH
10855: EMPTY
10856: LIST
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: PUSH
10868: EMPTY
10869: LIST
10870: LIST
10871: ST_TO_ADDR
10872: GO 13127
10874: LD_INT 9
10876: DOUBLE
10877: EQUAL
10878: IFTRUE 10882
10880: GO 11030
10882: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
10883: LD_ADDR_VAR 0 2
10887: PUSH
10888: LD_INT 2
10890: PUSH
10891: LD_INT 4
10893: PUSH
10894: LD_INT 5
10896: PUSH
10897: LD_INT 6
10899: PUSH
10900: LD_INT 7
10902: PUSH
10903: LD_INT 8
10905: PUSH
10906: LD_INT 11
10908: PUSH
10909: LD_INT 12
10911: PUSH
10912: LD_INT 15
10914: PUSH
10915: LD_INT 16
10917: PUSH
10918: LD_INT 20
10920: PUSH
10921: LD_INT 21
10923: PUSH
10924: LD_INT 22
10926: PUSH
10927: LD_INT 23
10929: PUSH
10930: LD_INT 25
10932: PUSH
10933: LD_INT 26
10935: PUSH
10936: LD_INT 28
10938: PUSH
10939: LD_INT 30
10941: PUSH
10942: LD_INT 31
10944: PUSH
10945: LD_INT 32
10947: PUSH
10948: LD_INT 36
10950: PUSH
10951: EMPTY
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: LIST
10960: LIST
10961: LIST
10962: LIST
10963: LIST
10964: LIST
10965: LIST
10966: LIST
10967: LIST
10968: LIST
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: PUSH
10974: LD_INT 101
10976: PUSH
10977: LD_INT 102
10979: PUSH
10980: LD_INT 103
10982: PUSH
10983: LD_INT 105
10985: PUSH
10986: LD_INT 106
10988: PUSH
10989: LD_INT 108
10991: PUSH
10992: LD_INT 109
10994: PUSH
10995: LD_INT 112
10997: PUSH
10998: LD_INT 114
11000: PUSH
11001: LD_INT 116
11003: PUSH
11004: LD_INT 117
11006: PUSH
11007: LD_INT 118
11009: PUSH
11010: EMPTY
11011: LIST
11012: LIST
11013: LIST
11014: LIST
11015: LIST
11016: LIST
11017: LIST
11018: LIST
11019: LIST
11020: LIST
11021: LIST
11022: LIST
11023: PUSH
11024: EMPTY
11025: LIST
11026: LIST
11027: ST_TO_ADDR
11028: GO 13127
11030: LD_INT 10
11032: DOUBLE
11033: EQUAL
11034: IFTRUE 11038
11036: GO 11234
11038: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
11039: LD_ADDR_VAR 0 2
11043: PUSH
11044: LD_INT 2
11046: PUSH
11047: LD_INT 4
11049: PUSH
11050: LD_INT 5
11052: PUSH
11053: LD_INT 6
11055: PUSH
11056: LD_INT 7
11058: PUSH
11059: LD_INT 8
11061: PUSH
11062: LD_INT 9
11064: PUSH
11065: LD_INT 10
11067: PUSH
11068: LD_INT 11
11070: PUSH
11071: LD_INT 12
11073: PUSH
11074: LD_INT 13
11076: PUSH
11077: LD_INT 14
11079: PUSH
11080: LD_INT 15
11082: PUSH
11083: LD_INT 16
11085: PUSH
11086: LD_INT 17
11088: PUSH
11089: LD_INT 18
11091: PUSH
11092: LD_INT 19
11094: PUSH
11095: LD_INT 20
11097: PUSH
11098: LD_INT 21
11100: PUSH
11101: LD_INT 22
11103: PUSH
11104: LD_INT 23
11106: PUSH
11107: LD_INT 24
11109: PUSH
11110: LD_INT 25
11112: PUSH
11113: LD_INT 26
11115: PUSH
11116: LD_INT 28
11118: PUSH
11119: LD_INT 30
11121: PUSH
11122: LD_INT 31
11124: PUSH
11125: LD_INT 32
11127: PUSH
11128: LD_INT 36
11130: PUSH
11131: EMPTY
11132: LIST
11133: LIST
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: LIST
11151: LIST
11152: LIST
11153: LIST
11154: LIST
11155: LIST
11156: LIST
11157: LIST
11158: LIST
11159: LIST
11160: LIST
11161: PUSH
11162: LD_INT 101
11164: PUSH
11165: LD_INT 102
11167: PUSH
11168: LD_INT 103
11170: PUSH
11171: LD_INT 104
11173: PUSH
11174: LD_INT 105
11176: PUSH
11177: LD_INT 106
11179: PUSH
11180: LD_INT 107
11182: PUSH
11183: LD_INT 108
11185: PUSH
11186: LD_INT 109
11188: PUSH
11189: LD_INT 110
11191: PUSH
11192: LD_INT 111
11194: PUSH
11195: LD_INT 112
11197: PUSH
11198: LD_INT 114
11200: PUSH
11201: LD_INT 116
11203: PUSH
11204: LD_INT 117
11206: PUSH
11207: LD_INT 118
11209: PUSH
11210: EMPTY
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: PUSH
11228: EMPTY
11229: LIST
11230: LIST
11231: ST_TO_ADDR
11232: GO 13127
11234: LD_INT 11
11236: DOUBLE
11237: EQUAL
11238: IFTRUE 11242
11240: GO 11446
11242: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
11243: LD_ADDR_VAR 0 2
11247: PUSH
11248: LD_INT 2
11250: PUSH
11251: LD_INT 3
11253: PUSH
11254: LD_INT 4
11256: PUSH
11257: LD_INT 5
11259: PUSH
11260: LD_INT 6
11262: PUSH
11263: LD_INT 7
11265: PUSH
11266: LD_INT 8
11268: PUSH
11269: LD_INT 9
11271: PUSH
11272: LD_INT 10
11274: PUSH
11275: LD_INT 11
11277: PUSH
11278: LD_INT 12
11280: PUSH
11281: LD_INT 13
11283: PUSH
11284: LD_INT 14
11286: PUSH
11287: LD_INT 15
11289: PUSH
11290: LD_INT 16
11292: PUSH
11293: LD_INT 17
11295: PUSH
11296: LD_INT 18
11298: PUSH
11299: LD_INT 19
11301: PUSH
11302: LD_INT 20
11304: PUSH
11305: LD_INT 21
11307: PUSH
11308: LD_INT 22
11310: PUSH
11311: LD_INT 23
11313: PUSH
11314: LD_INT 24
11316: PUSH
11317: LD_INT 25
11319: PUSH
11320: LD_INT 26
11322: PUSH
11323: LD_INT 28
11325: PUSH
11326: LD_INT 30
11328: PUSH
11329: LD_INT 31
11331: PUSH
11332: LD_INT 32
11334: PUSH
11335: LD_INT 34
11337: PUSH
11338: LD_INT 36
11340: PUSH
11341: EMPTY
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: LIST
11359: LIST
11360: LIST
11361: LIST
11362: LIST
11363: LIST
11364: LIST
11365: LIST
11366: LIST
11367: LIST
11368: LIST
11369: LIST
11370: LIST
11371: LIST
11372: LIST
11373: PUSH
11374: LD_INT 101
11376: PUSH
11377: LD_INT 102
11379: PUSH
11380: LD_INT 103
11382: PUSH
11383: LD_INT 104
11385: PUSH
11386: LD_INT 105
11388: PUSH
11389: LD_INT 106
11391: PUSH
11392: LD_INT 107
11394: PUSH
11395: LD_INT 108
11397: PUSH
11398: LD_INT 109
11400: PUSH
11401: LD_INT 110
11403: PUSH
11404: LD_INT 111
11406: PUSH
11407: LD_INT 112
11409: PUSH
11410: LD_INT 114
11412: PUSH
11413: LD_INT 116
11415: PUSH
11416: LD_INT 117
11418: PUSH
11419: LD_INT 118
11421: PUSH
11422: EMPTY
11423: LIST
11424: LIST
11425: LIST
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: PUSH
11440: EMPTY
11441: LIST
11442: LIST
11443: ST_TO_ADDR
11444: GO 13127
11446: LD_INT 12
11448: DOUBLE
11449: EQUAL
11450: IFTRUE 11454
11452: GO 11674
11454: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
11455: LD_ADDR_VAR 0 2
11459: PUSH
11460: LD_INT 1
11462: PUSH
11463: LD_INT 2
11465: PUSH
11466: LD_INT 3
11468: PUSH
11469: LD_INT 4
11471: PUSH
11472: LD_INT 5
11474: PUSH
11475: LD_INT 6
11477: PUSH
11478: LD_INT 7
11480: PUSH
11481: LD_INT 8
11483: PUSH
11484: LD_INT 9
11486: PUSH
11487: LD_INT 10
11489: PUSH
11490: LD_INT 11
11492: PUSH
11493: LD_INT 12
11495: PUSH
11496: LD_INT 13
11498: PUSH
11499: LD_INT 14
11501: PUSH
11502: LD_INT 15
11504: PUSH
11505: LD_INT 16
11507: PUSH
11508: LD_INT 17
11510: PUSH
11511: LD_INT 18
11513: PUSH
11514: LD_INT 19
11516: PUSH
11517: LD_INT 20
11519: PUSH
11520: LD_INT 21
11522: PUSH
11523: LD_INT 22
11525: PUSH
11526: LD_INT 23
11528: PUSH
11529: LD_INT 24
11531: PUSH
11532: LD_INT 25
11534: PUSH
11535: LD_INT 26
11537: PUSH
11538: LD_INT 27
11540: PUSH
11541: LD_INT 28
11543: PUSH
11544: LD_INT 30
11546: PUSH
11547: LD_INT 31
11549: PUSH
11550: LD_INT 32
11552: PUSH
11553: LD_INT 33
11555: PUSH
11556: LD_INT 34
11558: PUSH
11559: LD_INT 36
11561: PUSH
11562: EMPTY
11563: LIST
11564: LIST
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: LIST
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: PUSH
11598: LD_INT 101
11600: PUSH
11601: LD_INT 102
11603: PUSH
11604: LD_INT 103
11606: PUSH
11607: LD_INT 104
11609: PUSH
11610: LD_INT 105
11612: PUSH
11613: LD_INT 106
11615: PUSH
11616: LD_INT 107
11618: PUSH
11619: LD_INT 108
11621: PUSH
11622: LD_INT 109
11624: PUSH
11625: LD_INT 110
11627: PUSH
11628: LD_INT 111
11630: PUSH
11631: LD_INT 112
11633: PUSH
11634: LD_INT 113
11636: PUSH
11637: LD_INT 114
11639: PUSH
11640: LD_INT 116
11642: PUSH
11643: LD_INT 117
11645: PUSH
11646: LD_INT 118
11648: PUSH
11649: EMPTY
11650: LIST
11651: LIST
11652: LIST
11653: LIST
11654: LIST
11655: LIST
11656: LIST
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: PUSH
11668: EMPTY
11669: LIST
11670: LIST
11671: ST_TO_ADDR
11672: GO 13127
11674: LD_INT 13
11676: DOUBLE
11677: EQUAL
11678: IFTRUE 11682
11680: GO 11890
11682: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
11683: LD_ADDR_VAR 0 2
11687: PUSH
11688: LD_INT 1
11690: PUSH
11691: LD_INT 2
11693: PUSH
11694: LD_INT 3
11696: PUSH
11697: LD_INT 4
11699: PUSH
11700: LD_INT 5
11702: PUSH
11703: LD_INT 8
11705: PUSH
11706: LD_INT 9
11708: PUSH
11709: LD_INT 10
11711: PUSH
11712: LD_INT 11
11714: PUSH
11715: LD_INT 12
11717: PUSH
11718: LD_INT 14
11720: PUSH
11721: LD_INT 15
11723: PUSH
11724: LD_INT 16
11726: PUSH
11727: LD_INT 17
11729: PUSH
11730: LD_INT 18
11732: PUSH
11733: LD_INT 19
11735: PUSH
11736: LD_INT 20
11738: PUSH
11739: LD_INT 21
11741: PUSH
11742: LD_INT 22
11744: PUSH
11745: LD_INT 23
11747: PUSH
11748: LD_INT 24
11750: PUSH
11751: LD_INT 25
11753: PUSH
11754: LD_INT 26
11756: PUSH
11757: LD_INT 27
11759: PUSH
11760: LD_INT 28
11762: PUSH
11763: LD_INT 30
11765: PUSH
11766: LD_INT 31
11768: PUSH
11769: LD_INT 32
11771: PUSH
11772: LD_INT 33
11774: PUSH
11775: LD_INT 34
11777: PUSH
11778: LD_INT 36
11780: PUSH
11781: EMPTY
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: LIST
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: PUSH
11814: LD_INT 101
11816: PUSH
11817: LD_INT 102
11819: PUSH
11820: LD_INT 103
11822: PUSH
11823: LD_INT 104
11825: PUSH
11826: LD_INT 105
11828: PUSH
11829: LD_INT 106
11831: PUSH
11832: LD_INT 107
11834: PUSH
11835: LD_INT 108
11837: PUSH
11838: LD_INT 109
11840: PUSH
11841: LD_INT 110
11843: PUSH
11844: LD_INT 111
11846: PUSH
11847: LD_INT 112
11849: PUSH
11850: LD_INT 113
11852: PUSH
11853: LD_INT 114
11855: PUSH
11856: LD_INT 116
11858: PUSH
11859: LD_INT 117
11861: PUSH
11862: LD_INT 118
11864: PUSH
11865: EMPTY
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: LIST
11874: LIST
11875: LIST
11876: LIST
11877: LIST
11878: LIST
11879: LIST
11880: LIST
11881: LIST
11882: LIST
11883: PUSH
11884: EMPTY
11885: LIST
11886: LIST
11887: ST_TO_ADDR
11888: GO 13127
11890: LD_INT 14
11892: DOUBLE
11893: EQUAL
11894: IFTRUE 11898
11896: GO 12122
11898: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
11899: LD_ADDR_VAR 0 2
11903: PUSH
11904: LD_INT 1
11906: PUSH
11907: LD_INT 2
11909: PUSH
11910: LD_INT 3
11912: PUSH
11913: LD_INT 4
11915: PUSH
11916: LD_INT 5
11918: PUSH
11919: LD_INT 6
11921: PUSH
11922: LD_INT 7
11924: PUSH
11925: LD_INT 8
11927: PUSH
11928: LD_INT 9
11930: PUSH
11931: LD_INT 10
11933: PUSH
11934: LD_INT 11
11936: PUSH
11937: LD_INT 12
11939: PUSH
11940: LD_INT 13
11942: PUSH
11943: LD_INT 14
11945: PUSH
11946: LD_INT 15
11948: PUSH
11949: LD_INT 16
11951: PUSH
11952: LD_INT 17
11954: PUSH
11955: LD_INT 18
11957: PUSH
11958: LD_INT 19
11960: PUSH
11961: LD_INT 20
11963: PUSH
11964: LD_INT 21
11966: PUSH
11967: LD_INT 22
11969: PUSH
11970: LD_INT 23
11972: PUSH
11973: LD_INT 24
11975: PUSH
11976: LD_INT 25
11978: PUSH
11979: LD_INT 26
11981: PUSH
11982: LD_INT 27
11984: PUSH
11985: LD_INT 28
11987: PUSH
11988: LD_INT 29
11990: PUSH
11991: LD_INT 30
11993: PUSH
11994: LD_INT 31
11996: PUSH
11997: LD_INT 32
11999: PUSH
12000: LD_INT 33
12002: PUSH
12003: LD_INT 34
12005: PUSH
12006: LD_INT 36
12008: PUSH
12009: EMPTY
12010: LIST
12011: LIST
12012: LIST
12013: LIST
12014: LIST
12015: LIST
12016: LIST
12017: LIST
12018: LIST
12019: LIST
12020: LIST
12021: LIST
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: LIST
12028: LIST
12029: LIST
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: LIST
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: LIST
12045: PUSH
12046: LD_INT 101
12048: PUSH
12049: LD_INT 102
12051: PUSH
12052: LD_INT 103
12054: PUSH
12055: LD_INT 104
12057: PUSH
12058: LD_INT 105
12060: PUSH
12061: LD_INT 106
12063: PUSH
12064: LD_INT 107
12066: PUSH
12067: LD_INT 108
12069: PUSH
12070: LD_INT 109
12072: PUSH
12073: LD_INT 110
12075: PUSH
12076: LD_INT 111
12078: PUSH
12079: LD_INT 112
12081: PUSH
12082: LD_INT 113
12084: PUSH
12085: LD_INT 114
12087: PUSH
12088: LD_INT 116
12090: PUSH
12091: LD_INT 117
12093: PUSH
12094: LD_INT 118
12096: PUSH
12097: EMPTY
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: PUSH
12116: EMPTY
12117: LIST
12118: LIST
12119: ST_TO_ADDR
12120: GO 13127
12122: LD_INT 15
12124: DOUBLE
12125: EQUAL
12126: IFTRUE 12130
12128: GO 12354
12130: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
12131: LD_ADDR_VAR 0 2
12135: PUSH
12136: LD_INT 1
12138: PUSH
12139: LD_INT 2
12141: PUSH
12142: LD_INT 3
12144: PUSH
12145: LD_INT 4
12147: PUSH
12148: LD_INT 5
12150: PUSH
12151: LD_INT 6
12153: PUSH
12154: LD_INT 7
12156: PUSH
12157: LD_INT 8
12159: PUSH
12160: LD_INT 9
12162: PUSH
12163: LD_INT 10
12165: PUSH
12166: LD_INT 11
12168: PUSH
12169: LD_INT 12
12171: PUSH
12172: LD_INT 13
12174: PUSH
12175: LD_INT 14
12177: PUSH
12178: LD_INT 15
12180: PUSH
12181: LD_INT 16
12183: PUSH
12184: LD_INT 17
12186: PUSH
12187: LD_INT 18
12189: PUSH
12190: LD_INT 19
12192: PUSH
12193: LD_INT 20
12195: PUSH
12196: LD_INT 21
12198: PUSH
12199: LD_INT 22
12201: PUSH
12202: LD_INT 23
12204: PUSH
12205: LD_INT 24
12207: PUSH
12208: LD_INT 25
12210: PUSH
12211: LD_INT 26
12213: PUSH
12214: LD_INT 27
12216: PUSH
12217: LD_INT 28
12219: PUSH
12220: LD_INT 29
12222: PUSH
12223: LD_INT 30
12225: PUSH
12226: LD_INT 31
12228: PUSH
12229: LD_INT 32
12231: PUSH
12232: LD_INT 33
12234: PUSH
12235: LD_INT 34
12237: PUSH
12238: LD_INT 36
12240: PUSH
12241: EMPTY
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: LIST
12250: LIST
12251: LIST
12252: LIST
12253: LIST
12254: LIST
12255: LIST
12256: LIST
12257: LIST
12258: LIST
12259: LIST
12260: LIST
12261: LIST
12262: LIST
12263: LIST
12264: LIST
12265: LIST
12266: LIST
12267: LIST
12268: LIST
12269: LIST
12270: LIST
12271: LIST
12272: LIST
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: PUSH
12278: LD_INT 101
12280: PUSH
12281: LD_INT 102
12283: PUSH
12284: LD_INT 103
12286: PUSH
12287: LD_INT 104
12289: PUSH
12290: LD_INT 105
12292: PUSH
12293: LD_INT 106
12295: PUSH
12296: LD_INT 107
12298: PUSH
12299: LD_INT 108
12301: PUSH
12302: LD_INT 109
12304: PUSH
12305: LD_INT 110
12307: PUSH
12308: LD_INT 111
12310: PUSH
12311: LD_INT 112
12313: PUSH
12314: LD_INT 113
12316: PUSH
12317: LD_INT 114
12319: PUSH
12320: LD_INT 116
12322: PUSH
12323: LD_INT 117
12325: PUSH
12326: LD_INT 118
12328: PUSH
12329: EMPTY
12330: LIST
12331: LIST
12332: LIST
12333: LIST
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: LIST
12342: LIST
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: PUSH
12348: EMPTY
12349: LIST
12350: LIST
12351: ST_TO_ADDR
12352: GO 13127
12354: LD_INT 16
12356: DOUBLE
12357: EQUAL
12358: IFTRUE 12362
12360: GO 12498
12362: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
12363: LD_ADDR_VAR 0 2
12367: PUSH
12368: LD_INT 2
12370: PUSH
12371: LD_INT 4
12373: PUSH
12374: LD_INT 5
12376: PUSH
12377: LD_INT 7
12379: PUSH
12380: LD_INT 11
12382: PUSH
12383: LD_INT 12
12385: PUSH
12386: LD_INT 15
12388: PUSH
12389: LD_INT 16
12391: PUSH
12392: LD_INT 20
12394: PUSH
12395: LD_INT 21
12397: PUSH
12398: LD_INT 22
12400: PUSH
12401: LD_INT 23
12403: PUSH
12404: LD_INT 25
12406: PUSH
12407: LD_INT 26
12409: PUSH
12410: LD_INT 30
12412: PUSH
12413: LD_INT 31
12415: PUSH
12416: LD_INT 32
12418: PUSH
12419: LD_INT 33
12421: PUSH
12422: LD_INT 34
12424: PUSH
12425: EMPTY
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: PUSH
12446: LD_INT 101
12448: PUSH
12449: LD_INT 102
12451: PUSH
12452: LD_INT 103
12454: PUSH
12455: LD_INT 106
12457: PUSH
12458: LD_INT 108
12460: PUSH
12461: LD_INT 112
12463: PUSH
12464: LD_INT 113
12466: PUSH
12467: LD_INT 114
12469: PUSH
12470: LD_INT 116
12472: PUSH
12473: LD_INT 117
12475: PUSH
12476: LD_INT 118
12478: PUSH
12479: EMPTY
12480: LIST
12481: LIST
12482: LIST
12483: LIST
12484: LIST
12485: LIST
12486: LIST
12487: LIST
12488: LIST
12489: LIST
12490: LIST
12491: PUSH
12492: EMPTY
12493: LIST
12494: LIST
12495: ST_TO_ADDR
12496: GO 13127
12498: LD_INT 17
12500: DOUBLE
12501: EQUAL
12502: IFTRUE 12506
12504: GO 12730
12506: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
12507: LD_ADDR_VAR 0 2
12511: PUSH
12512: LD_INT 1
12514: PUSH
12515: LD_INT 2
12517: PUSH
12518: LD_INT 3
12520: PUSH
12521: LD_INT 4
12523: PUSH
12524: LD_INT 5
12526: PUSH
12527: LD_INT 6
12529: PUSH
12530: LD_INT 7
12532: PUSH
12533: LD_INT 8
12535: PUSH
12536: LD_INT 9
12538: PUSH
12539: LD_INT 10
12541: PUSH
12542: LD_INT 11
12544: PUSH
12545: LD_INT 12
12547: PUSH
12548: LD_INT 13
12550: PUSH
12551: LD_INT 14
12553: PUSH
12554: LD_INT 15
12556: PUSH
12557: LD_INT 16
12559: PUSH
12560: LD_INT 17
12562: PUSH
12563: LD_INT 18
12565: PUSH
12566: LD_INT 19
12568: PUSH
12569: LD_INT 20
12571: PUSH
12572: LD_INT 21
12574: PUSH
12575: LD_INT 22
12577: PUSH
12578: LD_INT 23
12580: PUSH
12581: LD_INT 24
12583: PUSH
12584: LD_INT 25
12586: PUSH
12587: LD_INT 26
12589: PUSH
12590: LD_INT 27
12592: PUSH
12593: LD_INT 28
12595: PUSH
12596: LD_INT 29
12598: PUSH
12599: LD_INT 30
12601: PUSH
12602: LD_INT 31
12604: PUSH
12605: LD_INT 32
12607: PUSH
12608: LD_INT 33
12610: PUSH
12611: LD_INT 34
12613: PUSH
12614: LD_INT 36
12616: PUSH
12617: EMPTY
12618: LIST
12619: LIST
12620: LIST
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: LIST
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: LIST
12638: LIST
12639: LIST
12640: LIST
12641: LIST
12642: LIST
12643: LIST
12644: LIST
12645: LIST
12646: LIST
12647: LIST
12648: LIST
12649: LIST
12650: LIST
12651: LIST
12652: LIST
12653: PUSH
12654: LD_INT 101
12656: PUSH
12657: LD_INT 102
12659: PUSH
12660: LD_INT 103
12662: PUSH
12663: LD_INT 104
12665: PUSH
12666: LD_INT 105
12668: PUSH
12669: LD_INT 106
12671: PUSH
12672: LD_INT 107
12674: PUSH
12675: LD_INT 108
12677: PUSH
12678: LD_INT 109
12680: PUSH
12681: LD_INT 110
12683: PUSH
12684: LD_INT 111
12686: PUSH
12687: LD_INT 112
12689: PUSH
12690: LD_INT 113
12692: PUSH
12693: LD_INT 114
12695: PUSH
12696: LD_INT 116
12698: PUSH
12699: LD_INT 117
12701: PUSH
12702: LD_INT 118
12704: PUSH
12705: EMPTY
12706: LIST
12707: LIST
12708: LIST
12709: LIST
12710: LIST
12711: LIST
12712: LIST
12713: LIST
12714: LIST
12715: LIST
12716: LIST
12717: LIST
12718: LIST
12719: LIST
12720: LIST
12721: LIST
12722: LIST
12723: PUSH
12724: EMPTY
12725: LIST
12726: LIST
12727: ST_TO_ADDR
12728: GO 13127
12730: LD_INT 18
12732: DOUBLE
12733: EQUAL
12734: IFTRUE 12738
12736: GO 12886
12738: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
12739: LD_ADDR_VAR 0 2
12743: PUSH
12744: LD_INT 2
12746: PUSH
12747: LD_INT 4
12749: PUSH
12750: LD_INT 5
12752: PUSH
12753: LD_INT 7
12755: PUSH
12756: LD_INT 11
12758: PUSH
12759: LD_INT 12
12761: PUSH
12762: LD_INT 15
12764: PUSH
12765: LD_INT 16
12767: PUSH
12768: LD_INT 20
12770: PUSH
12771: LD_INT 21
12773: PUSH
12774: LD_INT 22
12776: PUSH
12777: LD_INT 23
12779: PUSH
12780: LD_INT 25
12782: PUSH
12783: LD_INT 26
12785: PUSH
12786: LD_INT 30
12788: PUSH
12789: LD_INT 31
12791: PUSH
12792: LD_INT 32
12794: PUSH
12795: LD_INT 33
12797: PUSH
12798: LD_INT 34
12800: PUSH
12801: LD_INT 35
12803: PUSH
12804: LD_INT 36
12806: PUSH
12807: EMPTY
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: LIST
12829: PUSH
12830: LD_INT 101
12832: PUSH
12833: LD_INT 102
12835: PUSH
12836: LD_INT 103
12838: PUSH
12839: LD_INT 106
12841: PUSH
12842: LD_INT 108
12844: PUSH
12845: LD_INT 112
12847: PUSH
12848: LD_INT 113
12850: PUSH
12851: LD_INT 114
12853: PUSH
12854: LD_INT 115
12856: PUSH
12857: LD_INT 116
12859: PUSH
12860: LD_INT 117
12862: PUSH
12863: LD_INT 118
12865: PUSH
12866: EMPTY
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: LIST
12879: PUSH
12880: EMPTY
12881: LIST
12882: LIST
12883: ST_TO_ADDR
12884: GO 13127
12886: LD_INT 19
12888: DOUBLE
12889: EQUAL
12890: IFTRUE 12894
12892: GO 13126
12894: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
12895: LD_ADDR_VAR 0 2
12899: PUSH
12900: LD_INT 1
12902: PUSH
12903: LD_INT 2
12905: PUSH
12906: LD_INT 3
12908: PUSH
12909: LD_INT 4
12911: PUSH
12912: LD_INT 5
12914: PUSH
12915: LD_INT 6
12917: PUSH
12918: LD_INT 7
12920: PUSH
12921: LD_INT 8
12923: PUSH
12924: LD_INT 9
12926: PUSH
12927: LD_INT 10
12929: PUSH
12930: LD_INT 11
12932: PUSH
12933: LD_INT 12
12935: PUSH
12936: LD_INT 13
12938: PUSH
12939: LD_INT 14
12941: PUSH
12942: LD_INT 15
12944: PUSH
12945: LD_INT 16
12947: PUSH
12948: LD_INT 17
12950: PUSH
12951: LD_INT 18
12953: PUSH
12954: LD_INT 19
12956: PUSH
12957: LD_INT 20
12959: PUSH
12960: LD_INT 21
12962: PUSH
12963: LD_INT 22
12965: PUSH
12966: LD_INT 23
12968: PUSH
12969: LD_INT 24
12971: PUSH
12972: LD_INT 25
12974: PUSH
12975: LD_INT 26
12977: PUSH
12978: LD_INT 27
12980: PUSH
12981: LD_INT 28
12983: PUSH
12984: LD_INT 29
12986: PUSH
12987: LD_INT 30
12989: PUSH
12990: LD_INT 31
12992: PUSH
12993: LD_INT 32
12995: PUSH
12996: LD_INT 33
12998: PUSH
12999: LD_INT 34
13001: PUSH
13002: LD_INT 35
13004: PUSH
13005: LD_INT 36
13007: PUSH
13008: EMPTY
13009: LIST
13010: LIST
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: LIST
13038: LIST
13039: LIST
13040: LIST
13041: LIST
13042: LIST
13043: LIST
13044: LIST
13045: PUSH
13046: LD_INT 101
13048: PUSH
13049: LD_INT 102
13051: PUSH
13052: LD_INT 103
13054: PUSH
13055: LD_INT 104
13057: PUSH
13058: LD_INT 105
13060: PUSH
13061: LD_INT 106
13063: PUSH
13064: LD_INT 107
13066: PUSH
13067: LD_INT 108
13069: PUSH
13070: LD_INT 109
13072: PUSH
13073: LD_INT 110
13075: PUSH
13076: LD_INT 111
13078: PUSH
13079: LD_INT 112
13081: PUSH
13082: LD_INT 113
13084: PUSH
13085: LD_INT 114
13087: PUSH
13088: LD_INT 115
13090: PUSH
13091: LD_INT 116
13093: PUSH
13094: LD_INT 117
13096: PUSH
13097: LD_INT 118
13099: PUSH
13100: EMPTY
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: LIST
13108: LIST
13109: LIST
13110: LIST
13111: LIST
13112: LIST
13113: LIST
13114: LIST
13115: LIST
13116: LIST
13117: LIST
13118: LIST
13119: PUSH
13120: EMPTY
13121: LIST
13122: LIST
13123: ST_TO_ADDR
13124: GO 13127
13126: POP
// end else
13127: GO 13358
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
13129: LD_ADDR_VAR 0 2
13133: PUSH
13134: LD_INT 1
13136: PUSH
13137: LD_INT 2
13139: PUSH
13140: LD_INT 3
13142: PUSH
13143: LD_INT 4
13145: PUSH
13146: LD_INT 5
13148: PUSH
13149: LD_INT 6
13151: PUSH
13152: LD_INT 7
13154: PUSH
13155: LD_INT 8
13157: PUSH
13158: LD_INT 9
13160: PUSH
13161: LD_INT 10
13163: PUSH
13164: LD_INT 11
13166: PUSH
13167: LD_INT 12
13169: PUSH
13170: LD_INT 13
13172: PUSH
13173: LD_INT 14
13175: PUSH
13176: LD_INT 15
13178: PUSH
13179: LD_INT 16
13181: PUSH
13182: LD_INT 17
13184: PUSH
13185: LD_INT 18
13187: PUSH
13188: LD_INT 19
13190: PUSH
13191: LD_INT 20
13193: PUSH
13194: LD_INT 21
13196: PUSH
13197: LD_INT 22
13199: PUSH
13200: LD_INT 23
13202: PUSH
13203: LD_INT 24
13205: PUSH
13206: LD_INT 25
13208: PUSH
13209: LD_INT 26
13211: PUSH
13212: LD_INT 27
13214: PUSH
13215: LD_INT 28
13217: PUSH
13218: LD_INT 29
13220: PUSH
13221: LD_INT 30
13223: PUSH
13224: LD_INT 31
13226: PUSH
13227: LD_INT 32
13229: PUSH
13230: LD_INT 33
13232: PUSH
13233: LD_INT 34
13235: PUSH
13236: LD_INT 35
13238: PUSH
13239: LD_INT 36
13241: PUSH
13242: EMPTY
13243: LIST
13244: LIST
13245: LIST
13246: LIST
13247: LIST
13248: LIST
13249: LIST
13250: LIST
13251: LIST
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: LIST
13257: LIST
13258: LIST
13259: LIST
13260: LIST
13261: LIST
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: LIST
13267: LIST
13268: LIST
13269: LIST
13270: LIST
13271: LIST
13272: LIST
13273: LIST
13274: LIST
13275: LIST
13276: LIST
13277: LIST
13278: LIST
13279: PUSH
13280: LD_INT 101
13282: PUSH
13283: LD_INT 102
13285: PUSH
13286: LD_INT 103
13288: PUSH
13289: LD_INT 104
13291: PUSH
13292: LD_INT 105
13294: PUSH
13295: LD_INT 106
13297: PUSH
13298: LD_INT 107
13300: PUSH
13301: LD_INT 108
13303: PUSH
13304: LD_INT 109
13306: PUSH
13307: LD_INT 110
13309: PUSH
13310: LD_INT 111
13312: PUSH
13313: LD_INT 112
13315: PUSH
13316: LD_INT 113
13318: PUSH
13319: LD_INT 114
13321: PUSH
13322: LD_INT 115
13324: PUSH
13325: LD_INT 116
13327: PUSH
13328: LD_INT 117
13330: PUSH
13331: LD_INT 118
13333: PUSH
13334: EMPTY
13335: LIST
13336: LIST
13337: LIST
13338: LIST
13339: LIST
13340: LIST
13341: LIST
13342: LIST
13343: LIST
13344: LIST
13345: LIST
13346: LIST
13347: LIST
13348: LIST
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: PUSH
13354: EMPTY
13355: LIST
13356: LIST
13357: ST_TO_ADDR
// if result then
13358: LD_VAR 0 2
13362: IFFALSE 14148
// begin normal :=  ;
13364: LD_ADDR_VAR 0 5
13368: PUSH
13369: LD_STRING 
13371: ST_TO_ADDR
// hardcore :=  ;
13372: LD_ADDR_VAR 0 6
13376: PUSH
13377: LD_STRING 
13379: ST_TO_ADDR
// active :=  ;
13380: LD_ADDR_VAR 0 7
13384: PUSH
13385: LD_STRING 
13387: ST_TO_ADDR
// for i = 1 to normalCounter do
13388: LD_ADDR_VAR 0 8
13392: PUSH
13393: DOUBLE
13394: LD_INT 1
13396: DEC
13397: ST_TO_ADDR
13398: LD_EXP 24
13402: PUSH
13403: FOR_TO
13404: IFFALSE 13505
// begin tmp := 0 ;
13406: LD_ADDR_VAR 0 3
13410: PUSH
13411: LD_STRING 0
13413: ST_TO_ADDR
// if result [ 1 ] then
13414: LD_VAR 0 2
13418: PUSH
13419: LD_INT 1
13421: ARRAY
13422: IFFALSE 13487
// if result [ 1 ] [ 1 ] = i then
13424: LD_VAR 0 2
13428: PUSH
13429: LD_INT 1
13431: ARRAY
13432: PUSH
13433: LD_INT 1
13435: ARRAY
13436: PUSH
13437: LD_VAR 0 8
13441: EQUAL
13442: IFFALSE 13487
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
13444: LD_ADDR_VAR 0 2
13448: PUSH
13449: LD_VAR 0 2
13453: PPUSH
13454: LD_INT 1
13456: PPUSH
13457: LD_VAR 0 2
13461: PUSH
13462: LD_INT 1
13464: ARRAY
13465: PPUSH
13466: LD_INT 1
13468: PPUSH
13469: CALL_OW 3
13473: PPUSH
13474: CALL_OW 1
13478: ST_TO_ADDR
// tmp := 1 ;
13479: LD_ADDR_VAR 0 3
13483: PUSH
13484: LD_STRING 1
13486: ST_TO_ADDR
// end ; normal := normal & tmp ;
13487: LD_ADDR_VAR 0 5
13491: PUSH
13492: LD_VAR 0 5
13496: PUSH
13497: LD_VAR 0 3
13501: STR
13502: ST_TO_ADDR
// end ;
13503: GO 13403
13505: POP
13506: POP
// for i = 1 to hardcoreCounter do
13507: LD_ADDR_VAR 0 8
13511: PUSH
13512: DOUBLE
13513: LD_INT 1
13515: DEC
13516: ST_TO_ADDR
13517: LD_EXP 25
13521: PUSH
13522: FOR_TO
13523: IFFALSE 13628
// begin tmp := 0 ;
13525: LD_ADDR_VAR 0 3
13529: PUSH
13530: LD_STRING 0
13532: ST_TO_ADDR
// if result [ 2 ] then
13533: LD_VAR 0 2
13537: PUSH
13538: LD_INT 2
13540: ARRAY
13541: IFFALSE 13610
// if result [ 2 ] [ 1 ] = 100 + i then
13543: LD_VAR 0 2
13547: PUSH
13548: LD_INT 2
13550: ARRAY
13551: PUSH
13552: LD_INT 1
13554: ARRAY
13555: PUSH
13556: LD_INT 100
13558: PUSH
13559: LD_VAR 0 8
13563: PLUS
13564: EQUAL
13565: IFFALSE 13610
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
13567: LD_ADDR_VAR 0 2
13571: PUSH
13572: LD_VAR 0 2
13576: PPUSH
13577: LD_INT 2
13579: PPUSH
13580: LD_VAR 0 2
13584: PUSH
13585: LD_INT 2
13587: ARRAY
13588: PPUSH
13589: LD_INT 1
13591: PPUSH
13592: CALL_OW 3
13596: PPUSH
13597: CALL_OW 1
13601: ST_TO_ADDR
// tmp := 1 ;
13602: LD_ADDR_VAR 0 3
13606: PUSH
13607: LD_STRING 1
13609: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13610: LD_ADDR_VAR 0 6
13614: PUSH
13615: LD_VAR 0 6
13619: PUSH
13620: LD_VAR 0 3
13624: STR
13625: ST_TO_ADDR
// end ;
13626: GO 13522
13628: POP
13629: POP
// if isGameLoad then
13630: LD_VAR 0 1
13634: IFFALSE 14109
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
13636: LD_ADDR_VAR 0 4
13640: PUSH
13641: LD_EXP 28
13645: PUSH
13646: LD_EXP 27
13650: PUSH
13651: LD_EXP 29
13655: PUSH
13656: LD_EXP 26
13660: PUSH
13661: LD_EXP 30
13665: PUSH
13666: LD_EXP 31
13670: PUSH
13671: LD_EXP 32
13675: PUSH
13676: LD_EXP 33
13680: PUSH
13681: LD_EXP 34
13685: PUSH
13686: LD_EXP 35
13690: PUSH
13691: LD_EXP 36
13695: PUSH
13696: LD_EXP 37
13700: PUSH
13701: LD_EXP 38
13705: PUSH
13706: LD_EXP 39
13710: PUSH
13711: LD_EXP 47
13715: PUSH
13716: LD_EXP 48
13720: PUSH
13721: LD_EXP 49
13725: PUSH
13726: LD_EXP 50
13730: PUSH
13731: LD_EXP 52
13735: PUSH
13736: LD_EXP 53
13740: PUSH
13741: LD_EXP 54
13745: PUSH
13746: LD_EXP 57
13750: PUSH
13751: LD_EXP 59
13755: PUSH
13756: LD_EXP 60
13760: PUSH
13761: LD_EXP 61
13765: PUSH
13766: LD_EXP 63
13770: PUSH
13771: LD_EXP 64
13775: PUSH
13776: LD_EXP 67
13780: PUSH
13781: LD_EXP 68
13785: PUSH
13786: LD_EXP 69
13790: PUSH
13791: LD_EXP 70
13795: PUSH
13796: LD_EXP 71
13800: PUSH
13801: LD_EXP 72
13805: PUSH
13806: LD_EXP 73
13810: PUSH
13811: LD_EXP 74
13815: PUSH
13816: LD_EXP 75
13820: PUSH
13821: LD_EXP 40
13825: PUSH
13826: LD_EXP 41
13830: PUSH
13831: LD_EXP 44
13835: PUSH
13836: LD_EXP 45
13840: PUSH
13841: LD_EXP 46
13845: PUSH
13846: LD_EXP 42
13850: PUSH
13851: LD_EXP 43
13855: PUSH
13856: LD_EXP 51
13860: PUSH
13861: LD_EXP 55
13865: PUSH
13866: LD_EXP 56
13870: PUSH
13871: LD_EXP 58
13875: PUSH
13876: LD_EXP 62
13880: PUSH
13881: LD_EXP 65
13885: PUSH
13886: LD_EXP 66
13890: PUSH
13891: LD_EXP 76
13895: PUSH
13896: LD_EXP 77
13900: PUSH
13901: LD_EXP 78
13905: PUSH
13906: LD_EXP 79
13910: PUSH
13911: EMPTY
13912: LIST
13913: LIST
13914: LIST
13915: LIST
13916: LIST
13917: LIST
13918: LIST
13919: LIST
13920: LIST
13921: LIST
13922: LIST
13923: LIST
13924: LIST
13925: LIST
13926: LIST
13927: LIST
13928: LIST
13929: LIST
13930: LIST
13931: LIST
13932: LIST
13933: LIST
13934: LIST
13935: LIST
13936: LIST
13937: LIST
13938: LIST
13939: LIST
13940: LIST
13941: LIST
13942: LIST
13943: LIST
13944: LIST
13945: LIST
13946: LIST
13947: LIST
13948: LIST
13949: LIST
13950: LIST
13951: LIST
13952: LIST
13953: LIST
13954: LIST
13955: LIST
13956: LIST
13957: LIST
13958: LIST
13959: LIST
13960: LIST
13961: LIST
13962: LIST
13963: LIST
13964: LIST
13965: LIST
13966: ST_TO_ADDR
// tmp :=  ;
13967: LD_ADDR_VAR 0 3
13971: PUSH
13972: LD_STRING 
13974: ST_TO_ADDR
// for i = 1 to normalCounter do
13975: LD_ADDR_VAR 0 8
13979: PUSH
13980: DOUBLE
13981: LD_INT 1
13983: DEC
13984: ST_TO_ADDR
13985: LD_EXP 24
13989: PUSH
13990: FOR_TO
13991: IFFALSE 14027
// begin if flags [ i ] then
13993: LD_VAR 0 4
13997: PUSH
13998: LD_VAR 0 8
14002: ARRAY
14003: IFFALSE 14025
// tmp := tmp & i & ; ;
14005: LD_ADDR_VAR 0 3
14009: PUSH
14010: LD_VAR 0 3
14014: PUSH
14015: LD_VAR 0 8
14019: STR
14020: PUSH
14021: LD_STRING ;
14023: STR
14024: ST_TO_ADDR
// end ;
14025: GO 13990
14027: POP
14028: POP
// for i = 1 to hardcoreCounter do
14029: LD_ADDR_VAR 0 8
14033: PUSH
14034: DOUBLE
14035: LD_INT 1
14037: DEC
14038: ST_TO_ADDR
14039: LD_EXP 25
14043: PUSH
14044: FOR_TO
14045: IFFALSE 14091
// begin if flags [ normalCounter + i ] then
14047: LD_VAR 0 4
14051: PUSH
14052: LD_EXP 24
14056: PUSH
14057: LD_VAR 0 8
14061: PLUS
14062: ARRAY
14063: IFFALSE 14089
// tmp := tmp & ( 100 + i ) & ; ;
14065: LD_ADDR_VAR 0 3
14069: PUSH
14070: LD_VAR 0 3
14074: PUSH
14075: LD_INT 100
14077: PUSH
14078: LD_VAR 0 8
14082: PLUS
14083: STR
14084: PUSH
14085: LD_STRING ;
14087: STR
14088: ST_TO_ADDR
// end ;
14089: GO 14044
14091: POP
14092: POP
// if tmp then
14093: LD_VAR 0 3
14097: IFFALSE 14109
// active := tmp ;
14099: LD_ADDR_VAR 0 7
14103: PUSH
14104: LD_VAR 0 3
14108: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
14109: LD_STRING getStreamItemsFromMission("
14111: PUSH
14112: LD_VAR 0 5
14116: STR
14117: PUSH
14118: LD_STRING ","
14120: STR
14121: PUSH
14122: LD_VAR 0 6
14126: STR
14127: PUSH
14128: LD_STRING ","
14130: STR
14131: PUSH
14132: LD_VAR 0 7
14136: STR
14137: PUSH
14138: LD_STRING ")
14140: STR
14141: PPUSH
14142: CALL_OW 559
// end else
14146: GO 14155
// ToLua ( getStreamItemsFromMission("","","") ) ;
14148: LD_STRING getStreamItemsFromMission("","","")
14150: PPUSH
14151: CALL_OW 559
// end ;
14155: LD_VAR 0 2
14159: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
14160: LD_EXP 23
14164: PUSH
14165: LD_EXP 28
14169: AND
14170: IFFALSE 14294
14172: GO 14174
14174: DISABLE
14175: LD_INT 0
14177: PPUSH
14178: PPUSH
// begin enable ;
14179: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
14180: LD_ADDR_VAR 0 2
14184: PUSH
14185: LD_INT 22
14187: PUSH
14188: LD_OWVAR 2
14192: PUSH
14193: EMPTY
14194: LIST
14195: LIST
14196: PUSH
14197: LD_INT 2
14199: PUSH
14200: LD_INT 34
14202: PUSH
14203: LD_INT 7
14205: PUSH
14206: EMPTY
14207: LIST
14208: LIST
14209: PUSH
14210: LD_INT 34
14212: PUSH
14213: LD_INT 45
14215: PUSH
14216: EMPTY
14217: LIST
14218: LIST
14219: PUSH
14220: LD_INT 34
14222: PUSH
14223: LD_INT 28
14225: PUSH
14226: EMPTY
14227: LIST
14228: LIST
14229: PUSH
14230: LD_INT 34
14232: PUSH
14233: LD_INT 47
14235: PUSH
14236: EMPTY
14237: LIST
14238: LIST
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: LIST
14244: LIST
14245: LIST
14246: PUSH
14247: EMPTY
14248: LIST
14249: LIST
14250: PPUSH
14251: CALL_OW 69
14255: ST_TO_ADDR
// if not tmp then
14256: LD_VAR 0 2
14260: NOT
14261: IFFALSE 14265
// exit ;
14263: GO 14294
// for i in tmp do
14265: LD_ADDR_VAR 0 1
14269: PUSH
14270: LD_VAR 0 2
14274: PUSH
14275: FOR_IN
14276: IFFALSE 14292
// begin SetLives ( i , 0 ) ;
14278: LD_VAR 0 1
14282: PPUSH
14283: LD_INT 0
14285: PPUSH
14286: CALL_OW 234
// end ;
14290: GO 14275
14292: POP
14293: POP
// end ;
14294: PPOPN 2
14296: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14297: LD_EXP 23
14301: PUSH
14302: LD_EXP 29
14306: AND
14307: IFFALSE 14391
14309: GO 14311
14311: DISABLE
14312: LD_INT 0
14314: PPUSH
14315: PPUSH
// begin enable ;
14316: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14317: LD_ADDR_VAR 0 2
14321: PUSH
14322: LD_INT 22
14324: PUSH
14325: LD_OWVAR 2
14329: PUSH
14330: EMPTY
14331: LIST
14332: LIST
14333: PUSH
14334: LD_INT 32
14336: PUSH
14337: LD_INT 3
14339: PUSH
14340: EMPTY
14341: LIST
14342: LIST
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: PPUSH
14348: CALL_OW 69
14352: ST_TO_ADDR
// if not tmp then
14353: LD_VAR 0 2
14357: NOT
14358: IFFALSE 14362
// exit ;
14360: GO 14391
// for i in tmp do
14362: LD_ADDR_VAR 0 1
14366: PUSH
14367: LD_VAR 0 2
14371: PUSH
14372: FOR_IN
14373: IFFALSE 14389
// begin SetLives ( i , 0 ) ;
14375: LD_VAR 0 1
14379: PPUSH
14380: LD_INT 0
14382: PPUSH
14383: CALL_OW 234
// end ;
14387: GO 14372
14389: POP
14390: POP
// end ;
14391: PPOPN 2
14393: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14394: LD_EXP 23
14398: PUSH
14399: LD_EXP 26
14403: AND
14404: IFFALSE 14497
14406: GO 14408
14408: DISABLE
14409: LD_INT 0
14411: PPUSH
// begin enable ;
14412: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14413: LD_ADDR_VAR 0 1
14417: PUSH
14418: LD_INT 22
14420: PUSH
14421: LD_OWVAR 2
14425: PUSH
14426: EMPTY
14427: LIST
14428: LIST
14429: PUSH
14430: LD_INT 2
14432: PUSH
14433: LD_INT 25
14435: PUSH
14436: LD_INT 5
14438: PUSH
14439: EMPTY
14440: LIST
14441: LIST
14442: PUSH
14443: LD_INT 25
14445: PUSH
14446: LD_INT 9
14448: PUSH
14449: EMPTY
14450: LIST
14451: LIST
14452: PUSH
14453: LD_INT 25
14455: PUSH
14456: LD_INT 8
14458: PUSH
14459: EMPTY
14460: LIST
14461: LIST
14462: PUSH
14463: EMPTY
14464: LIST
14465: LIST
14466: LIST
14467: LIST
14468: PUSH
14469: EMPTY
14470: LIST
14471: LIST
14472: PPUSH
14473: CALL_OW 69
14477: PUSH
14478: FOR_IN
14479: IFFALSE 14495
// begin SetClass ( i , 1 ) ;
14481: LD_VAR 0 1
14485: PPUSH
14486: LD_INT 1
14488: PPUSH
14489: CALL_OW 336
// end ;
14493: GO 14478
14495: POP
14496: POP
// end ;
14497: PPOPN 1
14499: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
14500: LD_EXP 23
14504: PUSH
14505: LD_EXP 27
14509: AND
14510: PUSH
14511: LD_OWVAR 65
14515: PUSH
14516: LD_INT 7
14518: LESS
14519: AND
14520: IFFALSE 14534
14522: GO 14524
14524: DISABLE
// begin enable ;
14525: ENABLE
// game_speed := 7 ;
14526: LD_ADDR_OWVAR 65
14530: PUSH
14531: LD_INT 7
14533: ST_TO_ADDR
// end ;
14534: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
14535: LD_EXP 23
14539: PUSH
14540: LD_EXP 30
14544: AND
14545: IFFALSE 14747
14547: GO 14549
14549: DISABLE
14550: LD_INT 0
14552: PPUSH
14553: PPUSH
14554: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14555: LD_ADDR_VAR 0 3
14559: PUSH
14560: LD_INT 81
14562: PUSH
14563: LD_OWVAR 2
14567: PUSH
14568: EMPTY
14569: LIST
14570: LIST
14571: PUSH
14572: LD_INT 21
14574: PUSH
14575: LD_INT 1
14577: PUSH
14578: EMPTY
14579: LIST
14580: LIST
14581: PUSH
14582: EMPTY
14583: LIST
14584: LIST
14585: PPUSH
14586: CALL_OW 69
14590: ST_TO_ADDR
// if not tmp then
14591: LD_VAR 0 3
14595: NOT
14596: IFFALSE 14600
// exit ;
14598: GO 14747
// if tmp > 5 then
14600: LD_VAR 0 3
14604: PUSH
14605: LD_INT 5
14607: GREATER
14608: IFFALSE 14620
// k := 5 else
14610: LD_ADDR_VAR 0 2
14614: PUSH
14615: LD_INT 5
14617: ST_TO_ADDR
14618: GO 14630
// k := tmp ;
14620: LD_ADDR_VAR 0 2
14624: PUSH
14625: LD_VAR 0 3
14629: ST_TO_ADDR
// for i := 1 to k do
14630: LD_ADDR_VAR 0 1
14634: PUSH
14635: DOUBLE
14636: LD_INT 1
14638: DEC
14639: ST_TO_ADDR
14640: LD_VAR 0 2
14644: PUSH
14645: FOR_TO
14646: IFFALSE 14745
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
14648: LD_VAR 0 3
14652: PUSH
14653: LD_VAR 0 1
14657: ARRAY
14658: PPUSH
14659: LD_VAR 0 1
14663: PUSH
14664: LD_INT 4
14666: MOD
14667: PUSH
14668: LD_INT 1
14670: PLUS
14671: PPUSH
14672: CALL_OW 259
14676: PUSH
14677: LD_INT 10
14679: LESS
14680: IFFALSE 14743
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14682: LD_VAR 0 3
14686: PUSH
14687: LD_VAR 0 1
14691: ARRAY
14692: PPUSH
14693: LD_VAR 0 1
14697: PUSH
14698: LD_INT 4
14700: MOD
14701: PUSH
14702: LD_INT 1
14704: PLUS
14705: PPUSH
14706: LD_VAR 0 3
14710: PUSH
14711: LD_VAR 0 1
14715: ARRAY
14716: PPUSH
14717: LD_VAR 0 1
14721: PUSH
14722: LD_INT 4
14724: MOD
14725: PUSH
14726: LD_INT 1
14728: PLUS
14729: PPUSH
14730: CALL_OW 259
14734: PUSH
14735: LD_INT 1
14737: PLUS
14738: PPUSH
14739: CALL_OW 237
14743: GO 14645
14745: POP
14746: POP
// end ;
14747: PPOPN 3
14749: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
14750: LD_EXP 23
14754: PUSH
14755: LD_EXP 31
14759: AND
14760: IFFALSE 14780
14762: GO 14764
14764: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
14765: LD_INT 4
14767: PPUSH
14768: LD_OWVAR 2
14772: PPUSH
14773: LD_INT 0
14775: PPUSH
14776: CALL_OW 324
14780: END
// every 0 0$1 trigger StreamModeActive and sShovel do
14781: LD_EXP 23
14785: PUSH
14786: LD_EXP 60
14790: AND
14791: IFFALSE 14811
14793: GO 14795
14795: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14796: LD_INT 19
14798: PPUSH
14799: LD_OWVAR 2
14803: PPUSH
14804: LD_INT 0
14806: PPUSH
14807: CALL_OW 324
14811: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14812: LD_EXP 23
14816: PUSH
14817: LD_EXP 32
14821: AND
14822: IFFALSE 14924
14824: GO 14826
14826: DISABLE
14827: LD_INT 0
14829: PPUSH
14830: PPUSH
// begin enable ;
14831: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14832: LD_ADDR_VAR 0 2
14836: PUSH
14837: LD_INT 22
14839: PUSH
14840: LD_OWVAR 2
14844: PUSH
14845: EMPTY
14846: LIST
14847: LIST
14848: PUSH
14849: LD_INT 2
14851: PUSH
14852: LD_INT 34
14854: PUSH
14855: LD_INT 11
14857: PUSH
14858: EMPTY
14859: LIST
14860: LIST
14861: PUSH
14862: LD_INT 34
14864: PUSH
14865: LD_INT 30
14867: PUSH
14868: EMPTY
14869: LIST
14870: LIST
14871: PUSH
14872: EMPTY
14873: LIST
14874: LIST
14875: LIST
14876: PUSH
14877: EMPTY
14878: LIST
14879: LIST
14880: PPUSH
14881: CALL_OW 69
14885: ST_TO_ADDR
// if not tmp then
14886: LD_VAR 0 2
14890: NOT
14891: IFFALSE 14895
// exit ;
14893: GO 14924
// for i in tmp do
14895: LD_ADDR_VAR 0 1
14899: PUSH
14900: LD_VAR 0 2
14904: PUSH
14905: FOR_IN
14906: IFFALSE 14922
// begin SetLives ( i , 0 ) ;
14908: LD_VAR 0 1
14912: PPUSH
14913: LD_INT 0
14915: PPUSH
14916: CALL_OW 234
// end ;
14920: GO 14905
14922: POP
14923: POP
// end ;
14924: PPOPN 2
14926: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14927: LD_EXP 23
14931: PUSH
14932: LD_EXP 33
14936: AND
14937: IFFALSE 14957
14939: GO 14941
14941: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14942: LD_INT 32
14944: PPUSH
14945: LD_OWVAR 2
14949: PPUSH
14950: LD_INT 0
14952: PPUSH
14953: CALL_OW 324
14957: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14958: LD_EXP 23
14962: PUSH
14963: LD_EXP 34
14967: AND
14968: IFFALSE 15149
14970: GO 14972
14972: DISABLE
14973: LD_INT 0
14975: PPUSH
14976: PPUSH
14977: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14978: LD_ADDR_VAR 0 2
14982: PUSH
14983: LD_INT 22
14985: PUSH
14986: LD_OWVAR 2
14990: PUSH
14991: EMPTY
14992: LIST
14993: LIST
14994: PUSH
14995: LD_INT 33
14997: PUSH
14998: LD_INT 3
15000: PUSH
15001: EMPTY
15002: LIST
15003: LIST
15004: PUSH
15005: EMPTY
15006: LIST
15007: LIST
15008: PPUSH
15009: CALL_OW 69
15013: ST_TO_ADDR
// if not tmp then
15014: LD_VAR 0 2
15018: NOT
15019: IFFALSE 15023
// exit ;
15021: GO 15149
// side := 0 ;
15023: LD_ADDR_VAR 0 3
15027: PUSH
15028: LD_INT 0
15030: ST_TO_ADDR
// for i := 1 to 8 do
15031: LD_ADDR_VAR 0 1
15035: PUSH
15036: DOUBLE
15037: LD_INT 1
15039: DEC
15040: ST_TO_ADDR
15041: LD_INT 8
15043: PUSH
15044: FOR_TO
15045: IFFALSE 15093
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
15047: LD_OWVAR 2
15051: PUSH
15052: LD_VAR 0 1
15056: NONEQUAL
15057: PUSH
15058: LD_OWVAR 2
15062: PPUSH
15063: LD_VAR 0 1
15067: PPUSH
15068: CALL_OW 81
15072: PUSH
15073: LD_INT 2
15075: EQUAL
15076: AND
15077: IFFALSE 15091
// begin side := i ;
15079: LD_ADDR_VAR 0 3
15083: PUSH
15084: LD_VAR 0 1
15088: ST_TO_ADDR
// break ;
15089: GO 15093
// end ;
15091: GO 15044
15093: POP
15094: POP
// if not side then
15095: LD_VAR 0 3
15099: NOT
15100: IFFALSE 15104
// exit ;
15102: GO 15149
// for i := 1 to tmp do
15104: LD_ADDR_VAR 0 1
15108: PUSH
15109: DOUBLE
15110: LD_INT 1
15112: DEC
15113: ST_TO_ADDR
15114: LD_VAR 0 2
15118: PUSH
15119: FOR_TO
15120: IFFALSE 15147
// if Prob ( 60 ) then
15122: LD_INT 60
15124: PPUSH
15125: CALL_OW 13
15129: IFFALSE 15145
// SetSide ( i , side ) ;
15131: LD_VAR 0 1
15135: PPUSH
15136: LD_VAR 0 3
15140: PPUSH
15141: CALL_OW 235
15145: GO 15119
15147: POP
15148: POP
// end ;
15149: PPOPN 3
15151: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
15152: LD_EXP 23
15156: PUSH
15157: LD_EXP 36
15161: AND
15162: IFFALSE 15281
15164: GO 15166
15166: DISABLE
15167: LD_INT 0
15169: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
15170: LD_ADDR_VAR 0 1
15174: PUSH
15175: LD_INT 22
15177: PUSH
15178: LD_OWVAR 2
15182: PUSH
15183: EMPTY
15184: LIST
15185: LIST
15186: PUSH
15187: LD_INT 21
15189: PUSH
15190: LD_INT 1
15192: PUSH
15193: EMPTY
15194: LIST
15195: LIST
15196: PUSH
15197: LD_INT 3
15199: PUSH
15200: LD_INT 23
15202: PUSH
15203: LD_INT 0
15205: PUSH
15206: EMPTY
15207: LIST
15208: LIST
15209: PUSH
15210: EMPTY
15211: LIST
15212: LIST
15213: PUSH
15214: EMPTY
15215: LIST
15216: LIST
15217: LIST
15218: PPUSH
15219: CALL_OW 69
15223: PUSH
15224: FOR_IN
15225: IFFALSE 15279
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
15227: LD_VAR 0 1
15231: PPUSH
15232: CALL_OW 257
15236: PUSH
15237: LD_INT 1
15239: PUSH
15240: LD_INT 2
15242: PUSH
15243: LD_INT 3
15245: PUSH
15246: LD_INT 4
15248: PUSH
15249: EMPTY
15250: LIST
15251: LIST
15252: LIST
15253: LIST
15254: IN
15255: IFFALSE 15277
// SetClass ( un , rand ( 1 , 4 ) ) ;
15257: LD_VAR 0 1
15261: PPUSH
15262: LD_INT 1
15264: PPUSH
15265: LD_INT 4
15267: PPUSH
15268: CALL_OW 12
15272: PPUSH
15273: CALL_OW 336
15277: GO 15224
15279: POP
15280: POP
// end ;
15281: PPOPN 1
15283: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15284: LD_EXP 23
15288: PUSH
15289: LD_EXP 35
15293: AND
15294: IFFALSE 15373
15296: GO 15298
15298: DISABLE
15299: LD_INT 0
15301: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15302: LD_ADDR_VAR 0 1
15306: PUSH
15307: LD_INT 22
15309: PUSH
15310: LD_OWVAR 2
15314: PUSH
15315: EMPTY
15316: LIST
15317: LIST
15318: PUSH
15319: LD_INT 21
15321: PUSH
15322: LD_INT 3
15324: PUSH
15325: EMPTY
15326: LIST
15327: LIST
15328: PUSH
15329: EMPTY
15330: LIST
15331: LIST
15332: PPUSH
15333: CALL_OW 69
15337: ST_TO_ADDR
// if not tmp then
15338: LD_VAR 0 1
15342: NOT
15343: IFFALSE 15347
// exit ;
15345: GO 15373
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15347: LD_VAR 0 1
15351: PUSH
15352: LD_INT 1
15354: PPUSH
15355: LD_VAR 0 1
15359: PPUSH
15360: CALL_OW 12
15364: ARRAY
15365: PPUSH
15366: LD_INT 100
15368: PPUSH
15369: CALL_OW 234
// end ;
15373: PPOPN 1
15375: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
15376: LD_EXP 23
15380: PUSH
15381: LD_EXP 37
15385: AND
15386: IFFALSE 15484
15388: GO 15390
15390: DISABLE
15391: LD_INT 0
15393: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15394: LD_ADDR_VAR 0 1
15398: PUSH
15399: LD_INT 22
15401: PUSH
15402: LD_OWVAR 2
15406: PUSH
15407: EMPTY
15408: LIST
15409: LIST
15410: PUSH
15411: LD_INT 21
15413: PUSH
15414: LD_INT 1
15416: PUSH
15417: EMPTY
15418: LIST
15419: LIST
15420: PUSH
15421: EMPTY
15422: LIST
15423: LIST
15424: PPUSH
15425: CALL_OW 69
15429: ST_TO_ADDR
// if not tmp then
15430: LD_VAR 0 1
15434: NOT
15435: IFFALSE 15439
// exit ;
15437: GO 15484
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15439: LD_VAR 0 1
15443: PUSH
15444: LD_INT 1
15446: PPUSH
15447: LD_VAR 0 1
15451: PPUSH
15452: CALL_OW 12
15456: ARRAY
15457: PPUSH
15458: LD_INT 1
15460: PPUSH
15461: LD_INT 4
15463: PPUSH
15464: CALL_OW 12
15468: PPUSH
15469: LD_INT 3000
15471: PPUSH
15472: LD_INT 9000
15474: PPUSH
15475: CALL_OW 12
15479: PPUSH
15480: CALL_OW 492
// end ;
15484: PPOPN 1
15486: END
// every 0 0$1 trigger StreamModeActive and sDepot do
15487: LD_EXP 23
15491: PUSH
15492: LD_EXP 38
15496: AND
15497: IFFALSE 15517
15499: GO 15501
15501: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
15502: LD_INT 1
15504: PPUSH
15505: LD_OWVAR 2
15509: PPUSH
15510: LD_INT 0
15512: PPUSH
15513: CALL_OW 324
15517: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
15518: LD_EXP 23
15522: PUSH
15523: LD_EXP 39
15527: AND
15528: IFFALSE 15611
15530: GO 15532
15532: DISABLE
15533: LD_INT 0
15535: PPUSH
15536: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15537: LD_ADDR_VAR 0 2
15541: PUSH
15542: LD_INT 22
15544: PUSH
15545: LD_OWVAR 2
15549: PUSH
15550: EMPTY
15551: LIST
15552: LIST
15553: PUSH
15554: LD_INT 21
15556: PUSH
15557: LD_INT 3
15559: PUSH
15560: EMPTY
15561: LIST
15562: LIST
15563: PUSH
15564: EMPTY
15565: LIST
15566: LIST
15567: PPUSH
15568: CALL_OW 69
15572: ST_TO_ADDR
// if not tmp then
15573: LD_VAR 0 2
15577: NOT
15578: IFFALSE 15582
// exit ;
15580: GO 15611
// for i in tmp do
15582: LD_ADDR_VAR 0 1
15586: PUSH
15587: LD_VAR 0 2
15591: PUSH
15592: FOR_IN
15593: IFFALSE 15609
// SetBLevel ( i , 10 ) ;
15595: LD_VAR 0 1
15599: PPUSH
15600: LD_INT 10
15602: PPUSH
15603: CALL_OW 241
15607: GO 15592
15609: POP
15610: POP
// end ;
15611: PPOPN 2
15613: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
15614: LD_EXP 23
15618: PUSH
15619: LD_EXP 40
15623: AND
15624: IFFALSE 15735
15626: GO 15628
15628: DISABLE
15629: LD_INT 0
15631: PPUSH
15632: PPUSH
15633: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15634: LD_ADDR_VAR 0 3
15638: PUSH
15639: LD_INT 22
15641: PUSH
15642: LD_OWVAR 2
15646: PUSH
15647: EMPTY
15648: LIST
15649: LIST
15650: PUSH
15651: LD_INT 25
15653: PUSH
15654: LD_INT 1
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: PUSH
15661: EMPTY
15662: LIST
15663: LIST
15664: PPUSH
15665: CALL_OW 69
15669: ST_TO_ADDR
// if not tmp then
15670: LD_VAR 0 3
15674: NOT
15675: IFFALSE 15679
// exit ;
15677: GO 15735
// un := tmp [ rand ( 1 , tmp ) ] ;
15679: LD_ADDR_VAR 0 2
15683: PUSH
15684: LD_VAR 0 3
15688: PUSH
15689: LD_INT 1
15691: PPUSH
15692: LD_VAR 0 3
15696: PPUSH
15697: CALL_OW 12
15701: ARRAY
15702: ST_TO_ADDR
// if Crawls ( un ) then
15703: LD_VAR 0 2
15707: PPUSH
15708: CALL_OW 318
15712: IFFALSE 15723
// ComWalk ( un ) ;
15714: LD_VAR 0 2
15718: PPUSH
15719: CALL_OW 138
// SetClass ( un , class_sniper ) ;
15723: LD_VAR 0 2
15727: PPUSH
15728: LD_INT 5
15730: PPUSH
15731: CALL_OW 336
// end ;
15735: PPOPN 3
15737: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
15738: LD_EXP 23
15742: PUSH
15743: LD_EXP 41
15747: AND
15748: PUSH
15749: LD_OWVAR 67
15753: PUSH
15754: LD_INT 4
15756: LESS
15757: AND
15758: IFFALSE 15777
15760: GO 15762
15762: DISABLE
// begin Difficulty := Difficulty + 1 ;
15763: LD_ADDR_OWVAR 67
15767: PUSH
15768: LD_OWVAR 67
15772: PUSH
15773: LD_INT 1
15775: PLUS
15776: ST_TO_ADDR
// end ;
15777: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
15778: LD_EXP 23
15782: PUSH
15783: LD_EXP 42
15787: AND
15788: IFFALSE 15891
15790: GO 15792
15792: DISABLE
15793: LD_INT 0
15795: PPUSH
// begin for i := 1 to 5 do
15796: LD_ADDR_VAR 0 1
15800: PUSH
15801: DOUBLE
15802: LD_INT 1
15804: DEC
15805: ST_TO_ADDR
15806: LD_INT 5
15808: PUSH
15809: FOR_TO
15810: IFFALSE 15889
// begin uc_nation := nation_nature ;
15812: LD_ADDR_OWVAR 21
15816: PUSH
15817: LD_INT 0
15819: ST_TO_ADDR
// uc_side := 0 ;
15820: LD_ADDR_OWVAR 20
15824: PUSH
15825: LD_INT 0
15827: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15828: LD_ADDR_OWVAR 29
15832: PUSH
15833: LD_INT 12
15835: PUSH
15836: LD_INT 12
15838: PUSH
15839: EMPTY
15840: LIST
15841: LIST
15842: ST_TO_ADDR
// hc_agressivity := 20 ;
15843: LD_ADDR_OWVAR 35
15847: PUSH
15848: LD_INT 20
15850: ST_TO_ADDR
// hc_class := class_tiger ;
15851: LD_ADDR_OWVAR 28
15855: PUSH
15856: LD_INT 14
15858: ST_TO_ADDR
// hc_gallery :=  ;
15859: LD_ADDR_OWVAR 33
15863: PUSH
15864: LD_STRING 
15866: ST_TO_ADDR
// hc_name :=  ;
15867: LD_ADDR_OWVAR 26
15871: PUSH
15872: LD_STRING 
15874: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15875: CALL_OW 44
15879: PPUSH
15880: LD_INT 0
15882: PPUSH
15883: CALL_OW 51
// end ;
15887: GO 15809
15889: POP
15890: POP
// end ;
15891: PPOPN 1
15893: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15894: LD_EXP 23
15898: PUSH
15899: LD_EXP 43
15903: AND
15904: IFFALSE 15913
15906: GO 15908
15908: DISABLE
// StreamSibBomb ;
15909: CALL 15914 0 0
15913: END
// export function StreamSibBomb ; var i , x , y ; begin
15914: LD_INT 0
15916: PPUSH
15917: PPUSH
15918: PPUSH
15919: PPUSH
// result := false ;
15920: LD_ADDR_VAR 0 1
15924: PUSH
15925: LD_INT 0
15927: ST_TO_ADDR
// for i := 1 to 16 do
15928: LD_ADDR_VAR 0 2
15932: PUSH
15933: DOUBLE
15934: LD_INT 1
15936: DEC
15937: ST_TO_ADDR
15938: LD_INT 16
15940: PUSH
15941: FOR_TO
15942: IFFALSE 16141
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15944: LD_ADDR_VAR 0 3
15948: PUSH
15949: LD_INT 10
15951: PUSH
15952: LD_INT 20
15954: PUSH
15955: LD_INT 30
15957: PUSH
15958: LD_INT 40
15960: PUSH
15961: LD_INT 50
15963: PUSH
15964: LD_INT 60
15966: PUSH
15967: LD_INT 70
15969: PUSH
15970: LD_INT 80
15972: PUSH
15973: LD_INT 90
15975: PUSH
15976: LD_INT 100
15978: PUSH
15979: LD_INT 110
15981: PUSH
15982: LD_INT 120
15984: PUSH
15985: LD_INT 130
15987: PUSH
15988: LD_INT 140
15990: PUSH
15991: LD_INT 150
15993: PUSH
15994: EMPTY
15995: LIST
15996: LIST
15997: LIST
15998: LIST
15999: LIST
16000: LIST
16001: LIST
16002: LIST
16003: LIST
16004: LIST
16005: LIST
16006: LIST
16007: LIST
16008: LIST
16009: LIST
16010: PUSH
16011: LD_INT 1
16013: PPUSH
16014: LD_INT 15
16016: PPUSH
16017: CALL_OW 12
16021: ARRAY
16022: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
16023: LD_ADDR_VAR 0 4
16027: PUSH
16028: LD_INT 10
16030: PUSH
16031: LD_INT 20
16033: PUSH
16034: LD_INT 30
16036: PUSH
16037: LD_INT 40
16039: PUSH
16040: LD_INT 50
16042: PUSH
16043: LD_INT 60
16045: PUSH
16046: LD_INT 70
16048: PUSH
16049: LD_INT 80
16051: PUSH
16052: LD_INT 90
16054: PUSH
16055: LD_INT 100
16057: PUSH
16058: LD_INT 110
16060: PUSH
16061: LD_INT 120
16063: PUSH
16064: LD_INT 130
16066: PUSH
16067: LD_INT 140
16069: PUSH
16070: LD_INT 150
16072: PUSH
16073: EMPTY
16074: LIST
16075: LIST
16076: LIST
16077: LIST
16078: LIST
16079: LIST
16080: LIST
16081: LIST
16082: LIST
16083: LIST
16084: LIST
16085: LIST
16086: LIST
16087: LIST
16088: LIST
16089: PUSH
16090: LD_INT 1
16092: PPUSH
16093: LD_INT 15
16095: PPUSH
16096: CALL_OW 12
16100: ARRAY
16101: ST_TO_ADDR
// if ValidHex ( x , y ) then
16102: LD_VAR 0 3
16106: PPUSH
16107: LD_VAR 0 4
16111: PPUSH
16112: CALL_OW 488
16116: IFFALSE 16139
// begin result := [ x , y ] ;
16118: LD_ADDR_VAR 0 1
16122: PUSH
16123: LD_VAR 0 3
16127: PUSH
16128: LD_VAR 0 4
16132: PUSH
16133: EMPTY
16134: LIST
16135: LIST
16136: ST_TO_ADDR
// break ;
16137: GO 16141
// end ; end ;
16139: GO 15941
16141: POP
16142: POP
// if result then
16143: LD_VAR 0 1
16147: IFFALSE 16207
// begin ToLua ( playSibBomb() ) ;
16149: LD_STRING playSibBomb()
16151: PPUSH
16152: CALL_OW 559
// wait ( 0 0$14 ) ;
16156: LD_INT 490
16158: PPUSH
16159: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
16163: LD_VAR 0 1
16167: PUSH
16168: LD_INT 1
16170: ARRAY
16171: PPUSH
16172: LD_VAR 0 1
16176: PUSH
16177: LD_INT 2
16179: ARRAY
16180: PPUSH
16181: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
16185: LD_VAR 0 1
16189: PUSH
16190: LD_INT 1
16192: ARRAY
16193: PPUSH
16194: LD_VAR 0 1
16198: PUSH
16199: LD_INT 2
16201: ARRAY
16202: PPUSH
16203: CALL_OW 429
// end ; end ;
16207: LD_VAR 0 1
16211: RET
// every 0 0$1 trigger StreamModeActive and sReset do
16212: LD_EXP 23
16216: PUSH
16217: LD_EXP 45
16221: AND
16222: IFFALSE 16234
16224: GO 16226
16226: DISABLE
// YouLost (  ) ;
16227: LD_STRING 
16229: PPUSH
16230: CALL_OW 104
16234: END
// every 0 0$1 trigger StreamModeActive and sFog do
16235: LD_EXP 23
16239: PUSH
16240: LD_EXP 44
16244: AND
16245: IFFALSE 16259
16247: GO 16249
16249: DISABLE
// FogOff ( your_side ) ;
16250: LD_OWVAR 2
16254: PPUSH
16255: CALL_OW 344
16259: END
// every 0 0$1 trigger StreamModeActive and sSun do
16260: LD_EXP 23
16264: PUSH
16265: LD_EXP 46
16269: AND
16270: IFFALSE 16298
16272: GO 16274
16274: DISABLE
// begin solar_recharge_percent := 0 ;
16275: LD_ADDR_OWVAR 79
16279: PUSH
16280: LD_INT 0
16282: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16283: LD_INT 10500
16285: PPUSH
16286: CALL_OW 67
// solar_recharge_percent := 100 ;
16290: LD_ADDR_OWVAR 79
16294: PUSH
16295: LD_INT 100
16297: ST_TO_ADDR
// end ;
16298: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16299: LD_EXP 23
16303: PUSH
16304: LD_EXP 47
16308: AND
16309: IFFALSE 16548
16311: GO 16313
16313: DISABLE
16314: LD_INT 0
16316: PPUSH
16317: PPUSH
16318: PPUSH
// begin tmp := [ ] ;
16319: LD_ADDR_VAR 0 3
16323: PUSH
16324: EMPTY
16325: ST_TO_ADDR
// for i := 1 to 6 do
16326: LD_ADDR_VAR 0 1
16330: PUSH
16331: DOUBLE
16332: LD_INT 1
16334: DEC
16335: ST_TO_ADDR
16336: LD_INT 6
16338: PUSH
16339: FOR_TO
16340: IFFALSE 16445
// begin uc_nation := nation_nature ;
16342: LD_ADDR_OWVAR 21
16346: PUSH
16347: LD_INT 0
16349: ST_TO_ADDR
// uc_side := 0 ;
16350: LD_ADDR_OWVAR 20
16354: PUSH
16355: LD_INT 0
16357: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16358: LD_ADDR_OWVAR 29
16362: PUSH
16363: LD_INT 12
16365: PUSH
16366: LD_INT 12
16368: PUSH
16369: EMPTY
16370: LIST
16371: LIST
16372: ST_TO_ADDR
// hc_agressivity := 20 ;
16373: LD_ADDR_OWVAR 35
16377: PUSH
16378: LD_INT 20
16380: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16381: LD_ADDR_OWVAR 28
16385: PUSH
16386: LD_INT 17
16388: ST_TO_ADDR
// hc_gallery :=  ;
16389: LD_ADDR_OWVAR 33
16393: PUSH
16394: LD_STRING 
16396: ST_TO_ADDR
// hc_name :=  ;
16397: LD_ADDR_OWVAR 26
16401: PUSH
16402: LD_STRING 
16404: ST_TO_ADDR
// un := CreateHuman ;
16405: LD_ADDR_VAR 0 2
16409: PUSH
16410: CALL_OW 44
16414: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16415: LD_VAR 0 2
16419: PPUSH
16420: LD_INT 1
16422: PPUSH
16423: CALL_OW 51
// tmp := tmp ^ un ;
16427: LD_ADDR_VAR 0 3
16431: PUSH
16432: LD_VAR 0 3
16436: PUSH
16437: LD_VAR 0 2
16441: ADD
16442: ST_TO_ADDR
// end ;
16443: GO 16339
16445: POP
16446: POP
// repeat wait ( 0 0$1 ) ;
16447: LD_INT 35
16449: PPUSH
16450: CALL_OW 67
// for un in tmp do
16454: LD_ADDR_VAR 0 2
16458: PUSH
16459: LD_VAR 0 3
16463: PUSH
16464: FOR_IN
16465: IFFALSE 16539
// begin if IsDead ( un ) then
16467: LD_VAR 0 2
16471: PPUSH
16472: CALL_OW 301
16476: IFFALSE 16496
// begin tmp := tmp diff un ;
16478: LD_ADDR_VAR 0 3
16482: PUSH
16483: LD_VAR 0 3
16487: PUSH
16488: LD_VAR 0 2
16492: DIFF
16493: ST_TO_ADDR
// continue ;
16494: GO 16464
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
16496: LD_VAR 0 2
16500: PPUSH
16501: LD_INT 3
16503: PUSH
16504: LD_INT 22
16506: PUSH
16507: LD_INT 0
16509: PUSH
16510: EMPTY
16511: LIST
16512: LIST
16513: PUSH
16514: EMPTY
16515: LIST
16516: LIST
16517: PPUSH
16518: CALL_OW 69
16522: PPUSH
16523: LD_VAR 0 2
16527: PPUSH
16528: CALL_OW 74
16532: PPUSH
16533: CALL_OW 115
// end ;
16537: GO 16464
16539: POP
16540: POP
// until not tmp ;
16541: LD_VAR 0 3
16545: NOT
16546: IFFALSE 16447
// end ;
16548: PPOPN 3
16550: END
// every 0 0$1 trigger StreamModeActive and sTroll do
16551: LD_EXP 23
16555: PUSH
16556: LD_EXP 48
16560: AND
16561: IFFALSE 16615
16563: GO 16565
16565: DISABLE
// begin ToLua ( displayTroll(); ) ;
16566: LD_STRING displayTroll();
16568: PPUSH
16569: CALL_OW 559
// wait ( 3 3$00 ) ;
16573: LD_INT 6300
16575: PPUSH
16576: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16580: LD_STRING hideTroll();
16582: PPUSH
16583: CALL_OW 559
// wait ( 1 1$00 ) ;
16587: LD_INT 2100
16589: PPUSH
16590: CALL_OW 67
// ToLua ( displayTroll(); ) ;
16594: LD_STRING displayTroll();
16596: PPUSH
16597: CALL_OW 559
// wait ( 1 1$00 ) ;
16601: LD_INT 2100
16603: PPUSH
16604: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16608: LD_STRING hideTroll();
16610: PPUSH
16611: CALL_OW 559
// end ;
16615: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
16616: LD_EXP 23
16620: PUSH
16621: LD_EXP 49
16625: AND
16626: IFFALSE 16689
16628: GO 16630
16630: DISABLE
16631: LD_INT 0
16633: PPUSH
// begin p := 0 ;
16634: LD_ADDR_VAR 0 1
16638: PUSH
16639: LD_INT 0
16641: ST_TO_ADDR
// repeat game_speed := 1 ;
16642: LD_ADDR_OWVAR 65
16646: PUSH
16647: LD_INT 1
16649: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16650: LD_INT 35
16652: PPUSH
16653: CALL_OW 67
// p := p + 1 ;
16657: LD_ADDR_VAR 0 1
16661: PUSH
16662: LD_VAR 0 1
16666: PUSH
16667: LD_INT 1
16669: PLUS
16670: ST_TO_ADDR
// until p >= 60 ;
16671: LD_VAR 0 1
16675: PUSH
16676: LD_INT 60
16678: GREATEREQUAL
16679: IFFALSE 16642
// game_speed := 4 ;
16681: LD_ADDR_OWVAR 65
16685: PUSH
16686: LD_INT 4
16688: ST_TO_ADDR
// end ;
16689: PPOPN 1
16691: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16692: LD_EXP 23
16696: PUSH
16697: LD_EXP 50
16701: AND
16702: IFFALSE 16848
16704: GO 16706
16706: DISABLE
16707: LD_INT 0
16709: PPUSH
16710: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16711: LD_ADDR_VAR 0 1
16715: PUSH
16716: LD_INT 22
16718: PUSH
16719: LD_OWVAR 2
16723: PUSH
16724: EMPTY
16725: LIST
16726: LIST
16727: PUSH
16728: LD_INT 2
16730: PUSH
16731: LD_INT 30
16733: PUSH
16734: LD_INT 0
16736: PUSH
16737: EMPTY
16738: LIST
16739: LIST
16740: PUSH
16741: LD_INT 30
16743: PUSH
16744: LD_INT 1
16746: PUSH
16747: EMPTY
16748: LIST
16749: LIST
16750: PUSH
16751: EMPTY
16752: LIST
16753: LIST
16754: LIST
16755: PUSH
16756: EMPTY
16757: LIST
16758: LIST
16759: PPUSH
16760: CALL_OW 69
16764: ST_TO_ADDR
// if not depot then
16765: LD_VAR 0 1
16769: NOT
16770: IFFALSE 16774
// exit ;
16772: GO 16848
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
16774: LD_ADDR_VAR 0 2
16778: PUSH
16779: LD_VAR 0 1
16783: PUSH
16784: LD_INT 1
16786: PPUSH
16787: LD_VAR 0 1
16791: PPUSH
16792: CALL_OW 12
16796: ARRAY
16797: PPUSH
16798: CALL_OW 274
16802: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16803: LD_VAR 0 2
16807: PPUSH
16808: LD_INT 1
16810: PPUSH
16811: LD_INT 0
16813: PPUSH
16814: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16818: LD_VAR 0 2
16822: PPUSH
16823: LD_INT 2
16825: PPUSH
16826: LD_INT 0
16828: PPUSH
16829: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16833: LD_VAR 0 2
16837: PPUSH
16838: LD_INT 3
16840: PPUSH
16841: LD_INT 0
16843: PPUSH
16844: CALL_OW 277
// end ;
16848: PPOPN 2
16850: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16851: LD_EXP 23
16855: PUSH
16856: LD_EXP 51
16860: AND
16861: IFFALSE 16958
16863: GO 16865
16865: DISABLE
16866: LD_INT 0
16868: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16869: LD_ADDR_VAR 0 1
16873: PUSH
16874: LD_INT 22
16876: PUSH
16877: LD_OWVAR 2
16881: PUSH
16882: EMPTY
16883: LIST
16884: LIST
16885: PUSH
16886: LD_INT 21
16888: PUSH
16889: LD_INT 1
16891: PUSH
16892: EMPTY
16893: LIST
16894: LIST
16895: PUSH
16896: LD_INT 3
16898: PUSH
16899: LD_INT 23
16901: PUSH
16902: LD_INT 0
16904: PUSH
16905: EMPTY
16906: LIST
16907: LIST
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: PUSH
16913: EMPTY
16914: LIST
16915: LIST
16916: LIST
16917: PPUSH
16918: CALL_OW 69
16922: ST_TO_ADDR
// if not tmp then
16923: LD_VAR 0 1
16927: NOT
16928: IFFALSE 16932
// exit ;
16930: GO 16958
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16932: LD_VAR 0 1
16936: PUSH
16937: LD_INT 1
16939: PPUSH
16940: LD_VAR 0 1
16944: PPUSH
16945: CALL_OW 12
16949: ARRAY
16950: PPUSH
16951: LD_INT 200
16953: PPUSH
16954: CALL_OW 234
// end ;
16958: PPOPN 1
16960: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16961: LD_EXP 23
16965: PUSH
16966: LD_EXP 52
16970: AND
16971: IFFALSE 17050
16973: GO 16975
16975: DISABLE
16976: LD_INT 0
16978: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16979: LD_ADDR_VAR 0 1
16983: PUSH
16984: LD_INT 22
16986: PUSH
16987: LD_OWVAR 2
16991: PUSH
16992: EMPTY
16993: LIST
16994: LIST
16995: PUSH
16996: LD_INT 21
16998: PUSH
16999: LD_INT 2
17001: PUSH
17002: EMPTY
17003: LIST
17004: LIST
17005: PUSH
17006: EMPTY
17007: LIST
17008: LIST
17009: PPUSH
17010: CALL_OW 69
17014: ST_TO_ADDR
// if not tmp then
17015: LD_VAR 0 1
17019: NOT
17020: IFFALSE 17024
// exit ;
17022: GO 17050
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
17024: LD_VAR 0 1
17028: PUSH
17029: LD_INT 1
17031: PPUSH
17032: LD_VAR 0 1
17036: PPUSH
17037: CALL_OW 12
17041: ARRAY
17042: PPUSH
17043: LD_INT 60
17045: PPUSH
17046: CALL_OW 234
// end ;
17050: PPOPN 1
17052: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
17053: LD_EXP 23
17057: PUSH
17058: LD_EXP 53
17062: AND
17063: IFFALSE 17162
17065: GO 17067
17067: DISABLE
17068: LD_INT 0
17070: PPUSH
17071: PPUSH
// begin enable ;
17072: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
17073: LD_ADDR_VAR 0 1
17077: PUSH
17078: LD_INT 22
17080: PUSH
17081: LD_OWVAR 2
17085: PUSH
17086: EMPTY
17087: LIST
17088: LIST
17089: PUSH
17090: LD_INT 61
17092: PUSH
17093: EMPTY
17094: LIST
17095: PUSH
17096: LD_INT 33
17098: PUSH
17099: LD_INT 2
17101: PUSH
17102: EMPTY
17103: LIST
17104: LIST
17105: PUSH
17106: EMPTY
17107: LIST
17108: LIST
17109: LIST
17110: PPUSH
17111: CALL_OW 69
17115: ST_TO_ADDR
// if not tmp then
17116: LD_VAR 0 1
17120: NOT
17121: IFFALSE 17125
// exit ;
17123: GO 17162
// for i in tmp do
17125: LD_ADDR_VAR 0 2
17129: PUSH
17130: LD_VAR 0 1
17134: PUSH
17135: FOR_IN
17136: IFFALSE 17160
// if IsControledBy ( i ) then
17138: LD_VAR 0 2
17142: PPUSH
17143: CALL_OW 312
17147: IFFALSE 17158
// ComUnlink ( i ) ;
17149: LD_VAR 0 2
17153: PPUSH
17154: CALL_OW 136
17158: GO 17135
17160: POP
17161: POP
// end ;
17162: PPOPN 2
17164: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
17165: LD_EXP 23
17169: PUSH
17170: LD_EXP 54
17174: AND
17175: IFFALSE 17315
17177: GO 17179
17179: DISABLE
17180: LD_INT 0
17182: PPUSH
17183: PPUSH
// begin ToLua ( displayPowell(); ) ;
17184: LD_STRING displayPowell();
17186: PPUSH
17187: CALL_OW 559
// uc_side := 0 ;
17191: LD_ADDR_OWVAR 20
17195: PUSH
17196: LD_INT 0
17198: ST_TO_ADDR
// uc_nation := 2 ;
17199: LD_ADDR_OWVAR 21
17203: PUSH
17204: LD_INT 2
17206: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
17207: LD_ADDR_OWVAR 37
17211: PUSH
17212: LD_INT 14
17214: ST_TO_ADDR
// vc_engine := engine_siberite ;
17215: LD_ADDR_OWVAR 39
17219: PUSH
17220: LD_INT 3
17222: ST_TO_ADDR
// vc_control := control_apeman ;
17223: LD_ADDR_OWVAR 38
17227: PUSH
17228: LD_INT 5
17230: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
17231: LD_ADDR_OWVAR 40
17235: PUSH
17236: LD_INT 29
17238: ST_TO_ADDR
// un := CreateVehicle ;
17239: LD_ADDR_VAR 0 2
17243: PUSH
17244: CALL_OW 45
17248: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17249: LD_VAR 0 2
17253: PPUSH
17254: LD_INT 1
17256: PPUSH
17257: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17261: LD_INT 35
17263: PPUSH
17264: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17268: LD_VAR 0 2
17272: PPUSH
17273: LD_INT 22
17275: PUSH
17276: LD_OWVAR 2
17280: PUSH
17281: EMPTY
17282: LIST
17283: LIST
17284: PPUSH
17285: CALL_OW 69
17289: PPUSH
17290: LD_VAR 0 2
17294: PPUSH
17295: CALL_OW 74
17299: PPUSH
17300: CALL_OW 115
// until IsDead ( un ) ;
17304: LD_VAR 0 2
17308: PPUSH
17309: CALL_OW 301
17313: IFFALSE 17261
// end ;
17315: PPOPN 2
17317: END
// every 0 0$1 trigger StreamModeActive and sStu do
17318: LD_EXP 23
17322: PUSH
17323: LD_EXP 62
17327: AND
17328: IFFALSE 17344
17330: GO 17332
17332: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17333: LD_STRING displayStucuk();
17335: PPUSH
17336: CALL_OW 559
// ResetFog ;
17340: CALL_OW 335
// end ;
17344: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17345: LD_EXP 23
17349: PUSH
17350: LD_EXP 55
17354: AND
17355: IFFALSE 17496
17357: GO 17359
17359: DISABLE
17360: LD_INT 0
17362: PPUSH
17363: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17364: LD_ADDR_VAR 0 2
17368: PUSH
17369: LD_INT 22
17371: PUSH
17372: LD_OWVAR 2
17376: PUSH
17377: EMPTY
17378: LIST
17379: LIST
17380: PUSH
17381: LD_INT 21
17383: PUSH
17384: LD_INT 1
17386: PUSH
17387: EMPTY
17388: LIST
17389: LIST
17390: PUSH
17391: EMPTY
17392: LIST
17393: LIST
17394: PPUSH
17395: CALL_OW 69
17399: ST_TO_ADDR
// if not tmp then
17400: LD_VAR 0 2
17404: NOT
17405: IFFALSE 17409
// exit ;
17407: GO 17496
// un := tmp [ rand ( 1 , tmp ) ] ;
17409: LD_ADDR_VAR 0 1
17413: PUSH
17414: LD_VAR 0 2
17418: PUSH
17419: LD_INT 1
17421: PPUSH
17422: LD_VAR 0 2
17426: PPUSH
17427: CALL_OW 12
17431: ARRAY
17432: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17433: LD_VAR 0 1
17437: PPUSH
17438: LD_INT 0
17440: PPUSH
17441: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17445: LD_VAR 0 1
17449: PPUSH
17450: LD_OWVAR 3
17454: PUSH
17455: LD_VAR 0 1
17459: DIFF
17460: PPUSH
17461: LD_VAR 0 1
17465: PPUSH
17466: CALL_OW 74
17470: PPUSH
17471: CALL_OW 115
// wait ( 0 0$20 ) ;
17475: LD_INT 700
17477: PPUSH
17478: CALL_OW 67
// SetSide ( un , your_side ) ;
17482: LD_VAR 0 1
17486: PPUSH
17487: LD_OWVAR 2
17491: PPUSH
17492: CALL_OW 235
// end ;
17496: PPOPN 2
17498: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
17499: LD_EXP 23
17503: PUSH
17504: LD_EXP 56
17508: AND
17509: IFFALSE 17615
17511: GO 17513
17513: DISABLE
17514: LD_INT 0
17516: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17517: LD_ADDR_VAR 0 1
17521: PUSH
17522: LD_INT 22
17524: PUSH
17525: LD_OWVAR 2
17529: PUSH
17530: EMPTY
17531: LIST
17532: LIST
17533: PUSH
17534: LD_INT 2
17536: PUSH
17537: LD_INT 30
17539: PUSH
17540: LD_INT 0
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: PUSH
17547: LD_INT 30
17549: PUSH
17550: LD_INT 1
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: PUSH
17557: EMPTY
17558: LIST
17559: LIST
17560: LIST
17561: PUSH
17562: EMPTY
17563: LIST
17564: LIST
17565: PPUSH
17566: CALL_OW 69
17570: ST_TO_ADDR
// if not depot then
17571: LD_VAR 0 1
17575: NOT
17576: IFFALSE 17580
// exit ;
17578: GO 17615
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
17580: LD_VAR 0 1
17584: PUSH
17585: LD_INT 1
17587: ARRAY
17588: PPUSH
17589: CALL_OW 250
17593: PPUSH
17594: LD_VAR 0 1
17598: PUSH
17599: LD_INT 1
17601: ARRAY
17602: PPUSH
17603: CALL_OW 251
17607: PPUSH
17608: LD_INT 70
17610: PPUSH
17611: CALL_OW 495
// end ;
17615: PPOPN 1
17617: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
17618: LD_EXP 23
17622: PUSH
17623: LD_EXP 57
17627: AND
17628: IFFALSE 17839
17630: GO 17632
17632: DISABLE
17633: LD_INT 0
17635: PPUSH
17636: PPUSH
17637: PPUSH
17638: PPUSH
17639: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17640: LD_ADDR_VAR 0 5
17644: PUSH
17645: LD_INT 22
17647: PUSH
17648: LD_OWVAR 2
17652: PUSH
17653: EMPTY
17654: LIST
17655: LIST
17656: PUSH
17657: LD_INT 21
17659: PUSH
17660: LD_INT 1
17662: PUSH
17663: EMPTY
17664: LIST
17665: LIST
17666: PUSH
17667: EMPTY
17668: LIST
17669: LIST
17670: PPUSH
17671: CALL_OW 69
17675: ST_TO_ADDR
// if not tmp then
17676: LD_VAR 0 5
17680: NOT
17681: IFFALSE 17685
// exit ;
17683: GO 17839
// for i in tmp do
17685: LD_ADDR_VAR 0 1
17689: PUSH
17690: LD_VAR 0 5
17694: PUSH
17695: FOR_IN
17696: IFFALSE 17837
// begin d := rand ( 0 , 5 ) ;
17698: LD_ADDR_VAR 0 4
17702: PUSH
17703: LD_INT 0
17705: PPUSH
17706: LD_INT 5
17708: PPUSH
17709: CALL_OW 12
17713: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
17714: LD_ADDR_VAR 0 2
17718: PUSH
17719: LD_VAR 0 1
17723: PPUSH
17724: CALL_OW 250
17728: PPUSH
17729: LD_VAR 0 4
17733: PPUSH
17734: LD_INT 3
17736: PPUSH
17737: LD_INT 12
17739: PPUSH
17740: CALL_OW 12
17744: PPUSH
17745: CALL_OW 272
17749: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
17750: LD_ADDR_VAR 0 3
17754: PUSH
17755: LD_VAR 0 1
17759: PPUSH
17760: CALL_OW 251
17764: PPUSH
17765: LD_VAR 0 4
17769: PPUSH
17770: LD_INT 3
17772: PPUSH
17773: LD_INT 12
17775: PPUSH
17776: CALL_OW 12
17780: PPUSH
17781: CALL_OW 273
17785: ST_TO_ADDR
// if ValidHex ( x , y ) then
17786: LD_VAR 0 2
17790: PPUSH
17791: LD_VAR 0 3
17795: PPUSH
17796: CALL_OW 488
17800: IFFALSE 17835
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17802: LD_VAR 0 1
17806: PPUSH
17807: LD_VAR 0 2
17811: PPUSH
17812: LD_VAR 0 3
17816: PPUSH
17817: LD_INT 3
17819: PPUSH
17820: LD_INT 6
17822: PPUSH
17823: CALL_OW 12
17827: PPUSH
17828: LD_INT 1
17830: PPUSH
17831: CALL_OW 483
// end ;
17835: GO 17695
17837: POP
17838: POP
// end ;
17839: PPOPN 5
17841: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17842: LD_EXP 23
17846: PUSH
17847: LD_EXP 58
17851: AND
17852: IFFALSE 17946
17854: GO 17856
17856: DISABLE
17857: LD_INT 0
17859: PPUSH
17860: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17861: LD_ADDR_VAR 0 2
17865: PUSH
17866: LD_INT 22
17868: PUSH
17869: LD_OWVAR 2
17873: PUSH
17874: EMPTY
17875: LIST
17876: LIST
17877: PUSH
17878: LD_INT 32
17880: PUSH
17881: LD_INT 1
17883: PUSH
17884: EMPTY
17885: LIST
17886: LIST
17887: PUSH
17888: LD_INT 21
17890: PUSH
17891: LD_INT 2
17893: PUSH
17894: EMPTY
17895: LIST
17896: LIST
17897: PUSH
17898: EMPTY
17899: LIST
17900: LIST
17901: LIST
17902: PPUSH
17903: CALL_OW 69
17907: ST_TO_ADDR
// if not tmp then
17908: LD_VAR 0 2
17912: NOT
17913: IFFALSE 17917
// exit ;
17915: GO 17946
// for i in tmp do
17917: LD_ADDR_VAR 0 1
17921: PUSH
17922: LD_VAR 0 2
17926: PUSH
17927: FOR_IN
17928: IFFALSE 17944
// SetFuel ( i , 0 ) ;
17930: LD_VAR 0 1
17934: PPUSH
17935: LD_INT 0
17937: PPUSH
17938: CALL_OW 240
17942: GO 17927
17944: POP
17945: POP
// end ;
17946: PPOPN 2
17948: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17949: LD_EXP 23
17953: PUSH
17954: LD_EXP 59
17958: AND
17959: IFFALSE 18025
17961: GO 17963
17963: DISABLE
17964: LD_INT 0
17966: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17967: LD_ADDR_VAR 0 1
17971: PUSH
17972: LD_INT 22
17974: PUSH
17975: LD_OWVAR 2
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: PUSH
17984: LD_INT 30
17986: PUSH
17987: LD_INT 29
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: PUSH
17994: EMPTY
17995: LIST
17996: LIST
17997: PPUSH
17998: CALL_OW 69
18002: ST_TO_ADDR
// if not tmp then
18003: LD_VAR 0 1
18007: NOT
18008: IFFALSE 18012
// exit ;
18010: GO 18025
// DestroyUnit ( tmp [ 1 ] ) ;
18012: LD_VAR 0 1
18016: PUSH
18017: LD_INT 1
18019: ARRAY
18020: PPUSH
18021: CALL_OW 65
// end ;
18025: PPOPN 1
18027: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
18028: LD_EXP 23
18032: PUSH
18033: LD_EXP 61
18037: AND
18038: IFFALSE 18167
18040: GO 18042
18042: DISABLE
18043: LD_INT 0
18045: PPUSH
// begin uc_side := 0 ;
18046: LD_ADDR_OWVAR 20
18050: PUSH
18051: LD_INT 0
18053: ST_TO_ADDR
// uc_nation := nation_arabian ;
18054: LD_ADDR_OWVAR 21
18058: PUSH
18059: LD_INT 2
18061: ST_TO_ADDR
// hc_gallery :=  ;
18062: LD_ADDR_OWVAR 33
18066: PUSH
18067: LD_STRING 
18069: ST_TO_ADDR
// hc_name :=  ;
18070: LD_ADDR_OWVAR 26
18074: PUSH
18075: LD_STRING 
18077: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
18078: LD_INT 1
18080: PPUSH
18081: LD_INT 11
18083: PPUSH
18084: LD_INT 10
18086: PPUSH
18087: CALL_OW 380
// un := CreateHuman ;
18091: LD_ADDR_VAR 0 1
18095: PUSH
18096: CALL_OW 44
18100: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18101: LD_VAR 0 1
18105: PPUSH
18106: LD_INT 1
18108: PPUSH
18109: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
18113: LD_INT 35
18115: PPUSH
18116: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
18120: LD_VAR 0 1
18124: PPUSH
18125: LD_INT 22
18127: PUSH
18128: LD_OWVAR 2
18132: PUSH
18133: EMPTY
18134: LIST
18135: LIST
18136: PPUSH
18137: CALL_OW 69
18141: PPUSH
18142: LD_VAR 0 1
18146: PPUSH
18147: CALL_OW 74
18151: PPUSH
18152: CALL_OW 115
// until IsDead ( un ) ;
18156: LD_VAR 0 1
18160: PPUSH
18161: CALL_OW 301
18165: IFFALSE 18113
// end ;
18167: PPOPN 1
18169: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
18170: LD_EXP 23
18174: PUSH
18175: LD_EXP 63
18179: AND
18180: IFFALSE 18192
18182: GO 18184
18184: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
18185: LD_STRING earthquake(getX(game), 0, 32)
18187: PPUSH
18188: CALL_OW 559
18192: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
18193: LD_EXP 23
18197: PUSH
18198: LD_EXP 64
18202: AND
18203: IFFALSE 18294
18205: GO 18207
18207: DISABLE
18208: LD_INT 0
18210: PPUSH
// begin enable ;
18211: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
18212: LD_ADDR_VAR 0 1
18216: PUSH
18217: LD_INT 22
18219: PUSH
18220: LD_OWVAR 2
18224: PUSH
18225: EMPTY
18226: LIST
18227: LIST
18228: PUSH
18229: LD_INT 21
18231: PUSH
18232: LD_INT 2
18234: PUSH
18235: EMPTY
18236: LIST
18237: LIST
18238: PUSH
18239: LD_INT 33
18241: PUSH
18242: LD_INT 3
18244: PUSH
18245: EMPTY
18246: LIST
18247: LIST
18248: PUSH
18249: EMPTY
18250: LIST
18251: LIST
18252: LIST
18253: PPUSH
18254: CALL_OW 69
18258: ST_TO_ADDR
// if not tmp then
18259: LD_VAR 0 1
18263: NOT
18264: IFFALSE 18268
// exit ;
18266: GO 18294
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18268: LD_VAR 0 1
18272: PUSH
18273: LD_INT 1
18275: PPUSH
18276: LD_VAR 0 1
18280: PPUSH
18281: CALL_OW 12
18285: ARRAY
18286: PPUSH
18287: LD_INT 1
18289: PPUSH
18290: CALL_OW 234
// end ;
18294: PPOPN 1
18296: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18297: LD_EXP 23
18301: PUSH
18302: LD_EXP 65
18306: AND
18307: IFFALSE 18448
18309: GO 18311
18311: DISABLE
18312: LD_INT 0
18314: PPUSH
18315: PPUSH
18316: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18317: LD_ADDR_VAR 0 3
18321: PUSH
18322: LD_INT 22
18324: PUSH
18325: LD_OWVAR 2
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: PUSH
18334: LD_INT 25
18336: PUSH
18337: LD_INT 1
18339: PUSH
18340: EMPTY
18341: LIST
18342: LIST
18343: PUSH
18344: EMPTY
18345: LIST
18346: LIST
18347: PPUSH
18348: CALL_OW 69
18352: ST_TO_ADDR
// if not tmp then
18353: LD_VAR 0 3
18357: NOT
18358: IFFALSE 18362
// exit ;
18360: GO 18448
// un := tmp [ rand ( 1 , tmp ) ] ;
18362: LD_ADDR_VAR 0 2
18366: PUSH
18367: LD_VAR 0 3
18371: PUSH
18372: LD_INT 1
18374: PPUSH
18375: LD_VAR 0 3
18379: PPUSH
18380: CALL_OW 12
18384: ARRAY
18385: ST_TO_ADDR
// if Crawls ( un ) then
18386: LD_VAR 0 2
18390: PPUSH
18391: CALL_OW 318
18395: IFFALSE 18406
// ComWalk ( un ) ;
18397: LD_VAR 0 2
18401: PPUSH
18402: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18406: LD_VAR 0 2
18410: PPUSH
18411: LD_INT 9
18413: PPUSH
18414: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18418: LD_INT 28
18420: PPUSH
18421: LD_OWVAR 2
18425: PPUSH
18426: LD_INT 2
18428: PPUSH
18429: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18433: LD_INT 29
18435: PPUSH
18436: LD_OWVAR 2
18440: PPUSH
18441: LD_INT 2
18443: PPUSH
18444: CALL_OW 322
// end ;
18448: PPOPN 3
18450: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18451: LD_EXP 23
18455: PUSH
18456: LD_EXP 66
18460: AND
18461: IFFALSE 18572
18463: GO 18465
18465: DISABLE
18466: LD_INT 0
18468: PPUSH
18469: PPUSH
18470: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18471: LD_ADDR_VAR 0 3
18475: PUSH
18476: LD_INT 22
18478: PUSH
18479: LD_OWVAR 2
18483: PUSH
18484: EMPTY
18485: LIST
18486: LIST
18487: PUSH
18488: LD_INT 25
18490: PUSH
18491: LD_INT 1
18493: PUSH
18494: EMPTY
18495: LIST
18496: LIST
18497: PUSH
18498: EMPTY
18499: LIST
18500: LIST
18501: PPUSH
18502: CALL_OW 69
18506: ST_TO_ADDR
// if not tmp then
18507: LD_VAR 0 3
18511: NOT
18512: IFFALSE 18516
// exit ;
18514: GO 18572
// un := tmp [ rand ( 1 , tmp ) ] ;
18516: LD_ADDR_VAR 0 2
18520: PUSH
18521: LD_VAR 0 3
18525: PUSH
18526: LD_INT 1
18528: PPUSH
18529: LD_VAR 0 3
18533: PPUSH
18534: CALL_OW 12
18538: ARRAY
18539: ST_TO_ADDR
// if Crawls ( un ) then
18540: LD_VAR 0 2
18544: PPUSH
18545: CALL_OW 318
18549: IFFALSE 18560
// ComWalk ( un ) ;
18551: LD_VAR 0 2
18555: PPUSH
18556: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18560: LD_VAR 0 2
18564: PPUSH
18565: LD_INT 8
18567: PPUSH
18568: CALL_OW 336
// end ;
18572: PPOPN 3
18574: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
18575: LD_EXP 23
18579: PUSH
18580: LD_EXP 67
18584: AND
18585: IFFALSE 18729
18587: GO 18589
18589: DISABLE
18590: LD_INT 0
18592: PPUSH
18593: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
18594: LD_ADDR_VAR 0 2
18598: PUSH
18599: LD_INT 22
18601: PUSH
18602: LD_OWVAR 2
18606: PUSH
18607: EMPTY
18608: LIST
18609: LIST
18610: PUSH
18611: LD_INT 21
18613: PUSH
18614: LD_INT 2
18616: PUSH
18617: EMPTY
18618: LIST
18619: LIST
18620: PUSH
18621: LD_INT 2
18623: PUSH
18624: LD_INT 34
18626: PUSH
18627: LD_INT 12
18629: PUSH
18630: EMPTY
18631: LIST
18632: LIST
18633: PUSH
18634: LD_INT 34
18636: PUSH
18637: LD_INT 51
18639: PUSH
18640: EMPTY
18641: LIST
18642: LIST
18643: PUSH
18644: LD_INT 34
18646: PUSH
18647: LD_INT 32
18649: PUSH
18650: EMPTY
18651: LIST
18652: LIST
18653: PUSH
18654: EMPTY
18655: LIST
18656: LIST
18657: LIST
18658: LIST
18659: PUSH
18660: EMPTY
18661: LIST
18662: LIST
18663: LIST
18664: PPUSH
18665: CALL_OW 69
18669: ST_TO_ADDR
// if not tmp then
18670: LD_VAR 0 2
18674: NOT
18675: IFFALSE 18679
// exit ;
18677: GO 18729
// for i in tmp do
18679: LD_ADDR_VAR 0 1
18683: PUSH
18684: LD_VAR 0 2
18688: PUSH
18689: FOR_IN
18690: IFFALSE 18727
// if GetCargo ( i , mat_artifact ) = 0 then
18692: LD_VAR 0 1
18696: PPUSH
18697: LD_INT 4
18699: PPUSH
18700: CALL_OW 289
18704: PUSH
18705: LD_INT 0
18707: EQUAL
18708: IFFALSE 18725
// SetCargo ( i , mat_siberit , 100 ) ;
18710: LD_VAR 0 1
18714: PPUSH
18715: LD_INT 3
18717: PPUSH
18718: LD_INT 100
18720: PPUSH
18721: CALL_OW 290
18725: GO 18689
18727: POP
18728: POP
// end ;
18729: PPOPN 2
18731: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
18732: LD_EXP 23
18736: PUSH
18737: LD_EXP 68
18741: AND
18742: IFFALSE 18925
18744: GO 18746
18746: DISABLE
18747: LD_INT 0
18749: PPUSH
18750: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18751: LD_ADDR_VAR 0 2
18755: PUSH
18756: LD_INT 22
18758: PUSH
18759: LD_OWVAR 2
18763: PUSH
18764: EMPTY
18765: LIST
18766: LIST
18767: PPUSH
18768: CALL_OW 69
18772: ST_TO_ADDR
// if not tmp then
18773: LD_VAR 0 2
18777: NOT
18778: IFFALSE 18782
// exit ;
18780: GO 18925
// for i := 1 to 2 do
18782: LD_ADDR_VAR 0 1
18786: PUSH
18787: DOUBLE
18788: LD_INT 1
18790: DEC
18791: ST_TO_ADDR
18792: LD_INT 2
18794: PUSH
18795: FOR_TO
18796: IFFALSE 18923
// begin uc_side := your_side ;
18798: LD_ADDR_OWVAR 20
18802: PUSH
18803: LD_OWVAR 2
18807: ST_TO_ADDR
// uc_nation := nation_american ;
18808: LD_ADDR_OWVAR 21
18812: PUSH
18813: LD_INT 1
18815: ST_TO_ADDR
// vc_chassis := us_morphling ;
18816: LD_ADDR_OWVAR 37
18820: PUSH
18821: LD_INT 5
18823: ST_TO_ADDR
// vc_engine := engine_siberite ;
18824: LD_ADDR_OWVAR 39
18828: PUSH
18829: LD_INT 3
18831: ST_TO_ADDR
// vc_control := control_computer ;
18832: LD_ADDR_OWVAR 38
18836: PUSH
18837: LD_INT 3
18839: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18840: LD_ADDR_OWVAR 40
18844: PUSH
18845: LD_INT 10
18847: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
18848: LD_VAR 0 2
18852: PUSH
18853: LD_INT 1
18855: ARRAY
18856: PPUSH
18857: CALL_OW 310
18861: NOT
18862: IFFALSE 18909
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
18864: CALL_OW 45
18868: PPUSH
18869: LD_VAR 0 2
18873: PUSH
18874: LD_INT 1
18876: ARRAY
18877: PPUSH
18878: CALL_OW 250
18882: PPUSH
18883: LD_VAR 0 2
18887: PUSH
18888: LD_INT 1
18890: ARRAY
18891: PPUSH
18892: CALL_OW 251
18896: PPUSH
18897: LD_INT 12
18899: PPUSH
18900: LD_INT 1
18902: PPUSH
18903: CALL_OW 50
18907: GO 18921
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18909: CALL_OW 45
18913: PPUSH
18914: LD_INT 1
18916: PPUSH
18917: CALL_OW 51
// end ;
18921: GO 18795
18923: POP
18924: POP
// end ;
18925: PPOPN 2
18927: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18928: LD_EXP 23
18932: PUSH
18933: LD_EXP 69
18937: AND
18938: IFFALSE 19160
18940: GO 18942
18942: DISABLE
18943: LD_INT 0
18945: PPUSH
18946: PPUSH
18947: PPUSH
18948: PPUSH
18949: PPUSH
18950: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18951: LD_ADDR_VAR 0 6
18955: PUSH
18956: LD_INT 22
18958: PUSH
18959: LD_OWVAR 2
18963: PUSH
18964: EMPTY
18965: LIST
18966: LIST
18967: PUSH
18968: LD_INT 21
18970: PUSH
18971: LD_INT 1
18973: PUSH
18974: EMPTY
18975: LIST
18976: LIST
18977: PUSH
18978: LD_INT 3
18980: PUSH
18981: LD_INT 23
18983: PUSH
18984: LD_INT 0
18986: PUSH
18987: EMPTY
18988: LIST
18989: LIST
18990: PUSH
18991: EMPTY
18992: LIST
18993: LIST
18994: PUSH
18995: EMPTY
18996: LIST
18997: LIST
18998: LIST
18999: PPUSH
19000: CALL_OW 69
19004: ST_TO_ADDR
// if not tmp then
19005: LD_VAR 0 6
19009: NOT
19010: IFFALSE 19014
// exit ;
19012: GO 19160
// s1 := rand ( 1 , 4 ) ;
19014: LD_ADDR_VAR 0 2
19018: PUSH
19019: LD_INT 1
19021: PPUSH
19022: LD_INT 4
19024: PPUSH
19025: CALL_OW 12
19029: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
19030: LD_ADDR_VAR 0 4
19034: PUSH
19035: LD_VAR 0 6
19039: PUSH
19040: LD_INT 1
19042: ARRAY
19043: PPUSH
19044: LD_VAR 0 2
19048: PPUSH
19049: CALL_OW 259
19053: ST_TO_ADDR
// if s1 = 1 then
19054: LD_VAR 0 2
19058: PUSH
19059: LD_INT 1
19061: EQUAL
19062: IFFALSE 19082
// s2 := rand ( 2 , 4 ) else
19064: LD_ADDR_VAR 0 3
19068: PUSH
19069: LD_INT 2
19071: PPUSH
19072: LD_INT 4
19074: PPUSH
19075: CALL_OW 12
19079: ST_TO_ADDR
19080: GO 19090
// s2 := 1 ;
19082: LD_ADDR_VAR 0 3
19086: PUSH
19087: LD_INT 1
19089: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
19090: LD_ADDR_VAR 0 5
19094: PUSH
19095: LD_VAR 0 6
19099: PUSH
19100: LD_INT 1
19102: ARRAY
19103: PPUSH
19104: LD_VAR 0 3
19108: PPUSH
19109: CALL_OW 259
19113: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
19114: LD_VAR 0 6
19118: PUSH
19119: LD_INT 1
19121: ARRAY
19122: PPUSH
19123: LD_VAR 0 2
19127: PPUSH
19128: LD_VAR 0 5
19132: PPUSH
19133: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
19137: LD_VAR 0 6
19141: PUSH
19142: LD_INT 1
19144: ARRAY
19145: PPUSH
19146: LD_VAR 0 3
19150: PPUSH
19151: LD_VAR 0 4
19155: PPUSH
19156: CALL_OW 237
// end ;
19160: PPOPN 6
19162: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
19163: LD_EXP 23
19167: PUSH
19168: LD_EXP 70
19172: AND
19173: IFFALSE 19252
19175: GO 19177
19177: DISABLE
19178: LD_INT 0
19180: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
19181: LD_ADDR_VAR 0 1
19185: PUSH
19186: LD_INT 22
19188: PUSH
19189: LD_OWVAR 2
19193: PUSH
19194: EMPTY
19195: LIST
19196: LIST
19197: PUSH
19198: LD_INT 30
19200: PUSH
19201: LD_INT 3
19203: PUSH
19204: EMPTY
19205: LIST
19206: LIST
19207: PUSH
19208: EMPTY
19209: LIST
19210: LIST
19211: PPUSH
19212: CALL_OW 69
19216: ST_TO_ADDR
// if not tmp then
19217: LD_VAR 0 1
19221: NOT
19222: IFFALSE 19226
// exit ;
19224: GO 19252
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
19226: LD_VAR 0 1
19230: PUSH
19231: LD_INT 1
19233: PPUSH
19234: LD_VAR 0 1
19238: PPUSH
19239: CALL_OW 12
19243: ARRAY
19244: PPUSH
19245: LD_INT 1
19247: PPUSH
19248: CALL_OW 234
// end ;
19252: PPOPN 1
19254: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19255: LD_EXP 23
19259: PUSH
19260: LD_EXP 71
19264: AND
19265: IFFALSE 19377
19267: GO 19269
19269: DISABLE
19270: LD_INT 0
19272: PPUSH
19273: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19274: LD_ADDR_VAR 0 2
19278: PUSH
19279: LD_INT 22
19281: PUSH
19282: LD_OWVAR 2
19286: PUSH
19287: EMPTY
19288: LIST
19289: LIST
19290: PUSH
19291: LD_INT 2
19293: PUSH
19294: LD_INT 30
19296: PUSH
19297: LD_INT 27
19299: PUSH
19300: EMPTY
19301: LIST
19302: LIST
19303: PUSH
19304: LD_INT 30
19306: PUSH
19307: LD_INT 26
19309: PUSH
19310: EMPTY
19311: LIST
19312: LIST
19313: PUSH
19314: LD_INT 30
19316: PUSH
19317: LD_INT 28
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: PUSH
19324: EMPTY
19325: LIST
19326: LIST
19327: LIST
19328: LIST
19329: PUSH
19330: EMPTY
19331: LIST
19332: LIST
19333: PPUSH
19334: CALL_OW 69
19338: ST_TO_ADDR
// if not tmp then
19339: LD_VAR 0 2
19343: NOT
19344: IFFALSE 19348
// exit ;
19346: GO 19377
// for i in tmp do
19348: LD_ADDR_VAR 0 1
19352: PUSH
19353: LD_VAR 0 2
19357: PUSH
19358: FOR_IN
19359: IFFALSE 19375
// SetLives ( i , 1 ) ;
19361: LD_VAR 0 1
19365: PPUSH
19366: LD_INT 1
19368: PPUSH
19369: CALL_OW 234
19373: GO 19358
19375: POP
19376: POP
// end ;
19377: PPOPN 2
19379: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19380: LD_EXP 23
19384: PUSH
19385: LD_EXP 72
19389: AND
19390: IFFALSE 19677
19392: GO 19394
19394: DISABLE
19395: LD_INT 0
19397: PPUSH
19398: PPUSH
19399: PPUSH
// begin i := rand ( 1 , 7 ) ;
19400: LD_ADDR_VAR 0 1
19404: PUSH
19405: LD_INT 1
19407: PPUSH
19408: LD_INT 7
19410: PPUSH
19411: CALL_OW 12
19415: ST_TO_ADDR
// case i of 1 :
19416: LD_VAR 0 1
19420: PUSH
19421: LD_INT 1
19423: DOUBLE
19424: EQUAL
19425: IFTRUE 19429
19427: GO 19439
19429: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19430: LD_STRING earthquake(getX(game), 0, 32)
19432: PPUSH
19433: CALL_OW 559
19437: GO 19677
19439: LD_INT 2
19441: DOUBLE
19442: EQUAL
19443: IFTRUE 19447
19445: GO 19461
19447: POP
// begin ToLua ( displayStucuk(); ) ;
19448: LD_STRING displayStucuk();
19450: PPUSH
19451: CALL_OW 559
// ResetFog ;
19455: CALL_OW 335
// end ; 3 :
19459: GO 19677
19461: LD_INT 3
19463: DOUBLE
19464: EQUAL
19465: IFTRUE 19469
19467: GO 19573
19469: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19470: LD_ADDR_VAR 0 2
19474: PUSH
19475: LD_INT 22
19477: PUSH
19478: LD_OWVAR 2
19482: PUSH
19483: EMPTY
19484: LIST
19485: LIST
19486: PUSH
19487: LD_INT 25
19489: PUSH
19490: LD_INT 1
19492: PUSH
19493: EMPTY
19494: LIST
19495: LIST
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: PPUSH
19501: CALL_OW 69
19505: ST_TO_ADDR
// if not tmp then
19506: LD_VAR 0 2
19510: NOT
19511: IFFALSE 19515
// exit ;
19513: GO 19677
// un := tmp [ rand ( 1 , tmp ) ] ;
19515: LD_ADDR_VAR 0 3
19519: PUSH
19520: LD_VAR 0 2
19524: PUSH
19525: LD_INT 1
19527: PPUSH
19528: LD_VAR 0 2
19532: PPUSH
19533: CALL_OW 12
19537: ARRAY
19538: ST_TO_ADDR
// if Crawls ( un ) then
19539: LD_VAR 0 3
19543: PPUSH
19544: CALL_OW 318
19548: IFFALSE 19559
// ComWalk ( un ) ;
19550: LD_VAR 0 3
19554: PPUSH
19555: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19559: LD_VAR 0 3
19563: PPUSH
19564: LD_INT 8
19566: PPUSH
19567: CALL_OW 336
// end ; 4 :
19571: GO 19677
19573: LD_INT 4
19575: DOUBLE
19576: EQUAL
19577: IFTRUE 19581
19579: GO 19655
19581: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19582: LD_ADDR_VAR 0 2
19586: PUSH
19587: LD_INT 22
19589: PUSH
19590: LD_OWVAR 2
19594: PUSH
19595: EMPTY
19596: LIST
19597: LIST
19598: PUSH
19599: LD_INT 30
19601: PUSH
19602: LD_INT 29
19604: PUSH
19605: EMPTY
19606: LIST
19607: LIST
19608: PUSH
19609: EMPTY
19610: LIST
19611: LIST
19612: PPUSH
19613: CALL_OW 69
19617: ST_TO_ADDR
// if not tmp then
19618: LD_VAR 0 2
19622: NOT
19623: IFFALSE 19627
// exit ;
19625: GO 19677
// CenterNowOnUnits ( tmp [ 1 ] ) ;
19627: LD_VAR 0 2
19631: PUSH
19632: LD_INT 1
19634: ARRAY
19635: PPUSH
19636: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
19640: LD_VAR 0 2
19644: PUSH
19645: LD_INT 1
19647: ARRAY
19648: PPUSH
19649: CALL_OW 65
// end ; 5 .. 7 :
19653: GO 19677
19655: LD_INT 5
19657: DOUBLE
19658: GREATEREQUAL
19659: IFFALSE 19667
19661: LD_INT 7
19663: DOUBLE
19664: LESSEQUAL
19665: IFTRUE 19669
19667: GO 19676
19669: POP
// StreamSibBomb ; end ;
19670: CALL 15914 0 0
19674: GO 19677
19676: POP
// end ;
19677: PPOPN 3
19679: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19680: LD_EXP 23
19684: PUSH
19685: LD_EXP 73
19689: AND
19690: IFFALSE 19846
19692: GO 19694
19694: DISABLE
19695: LD_INT 0
19697: PPUSH
19698: PPUSH
19699: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
19700: LD_ADDR_VAR 0 2
19704: PUSH
19705: LD_INT 81
19707: PUSH
19708: LD_OWVAR 2
19712: PUSH
19713: EMPTY
19714: LIST
19715: LIST
19716: PUSH
19717: LD_INT 2
19719: PUSH
19720: LD_INT 21
19722: PUSH
19723: LD_INT 1
19725: PUSH
19726: EMPTY
19727: LIST
19728: LIST
19729: PUSH
19730: LD_INT 21
19732: PUSH
19733: LD_INT 2
19735: PUSH
19736: EMPTY
19737: LIST
19738: LIST
19739: PUSH
19740: EMPTY
19741: LIST
19742: LIST
19743: LIST
19744: PUSH
19745: EMPTY
19746: LIST
19747: LIST
19748: PPUSH
19749: CALL_OW 69
19753: ST_TO_ADDR
// if not tmp then
19754: LD_VAR 0 2
19758: NOT
19759: IFFALSE 19763
// exit ;
19761: GO 19846
// p := 0 ;
19763: LD_ADDR_VAR 0 3
19767: PUSH
19768: LD_INT 0
19770: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19771: LD_INT 35
19773: PPUSH
19774: CALL_OW 67
// p := p + 1 ;
19778: LD_ADDR_VAR 0 3
19782: PUSH
19783: LD_VAR 0 3
19787: PUSH
19788: LD_INT 1
19790: PLUS
19791: ST_TO_ADDR
// for i in tmp do
19792: LD_ADDR_VAR 0 1
19796: PUSH
19797: LD_VAR 0 2
19801: PUSH
19802: FOR_IN
19803: IFFALSE 19834
// if GetLives ( i ) < 1000 then
19805: LD_VAR 0 1
19809: PPUSH
19810: CALL_OW 256
19814: PUSH
19815: LD_INT 1000
19817: LESS
19818: IFFALSE 19832
// SetLives ( i , 1000 ) ;
19820: LD_VAR 0 1
19824: PPUSH
19825: LD_INT 1000
19827: PPUSH
19828: CALL_OW 234
19832: GO 19802
19834: POP
19835: POP
// until p > 20 ;
19836: LD_VAR 0 3
19840: PUSH
19841: LD_INT 20
19843: GREATER
19844: IFFALSE 19771
// end ;
19846: PPOPN 3
19848: END
// every 0 0$1 trigger StreamModeActive and sTime do
19849: LD_EXP 23
19853: PUSH
19854: LD_EXP 74
19858: AND
19859: IFFALSE 19894
19861: GO 19863
19863: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19864: LD_INT 28
19866: PPUSH
19867: LD_OWVAR 2
19871: PPUSH
19872: LD_INT 2
19874: PPUSH
19875: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19879: LD_INT 30
19881: PPUSH
19882: LD_OWVAR 2
19886: PPUSH
19887: LD_INT 2
19889: PPUSH
19890: CALL_OW 322
// end ;
19894: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19895: LD_EXP 23
19899: PUSH
19900: LD_EXP 75
19904: AND
19905: IFFALSE 20026
19907: GO 19909
19909: DISABLE
19910: LD_INT 0
19912: PPUSH
19913: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19914: LD_ADDR_VAR 0 2
19918: PUSH
19919: LD_INT 22
19921: PUSH
19922: LD_OWVAR 2
19926: PUSH
19927: EMPTY
19928: LIST
19929: LIST
19930: PUSH
19931: LD_INT 21
19933: PUSH
19934: LD_INT 1
19936: PUSH
19937: EMPTY
19938: LIST
19939: LIST
19940: PUSH
19941: LD_INT 3
19943: PUSH
19944: LD_INT 23
19946: PUSH
19947: LD_INT 0
19949: PUSH
19950: EMPTY
19951: LIST
19952: LIST
19953: PUSH
19954: EMPTY
19955: LIST
19956: LIST
19957: PUSH
19958: EMPTY
19959: LIST
19960: LIST
19961: LIST
19962: PPUSH
19963: CALL_OW 69
19967: ST_TO_ADDR
// if not tmp then
19968: LD_VAR 0 2
19972: NOT
19973: IFFALSE 19977
// exit ;
19975: GO 20026
// for i in tmp do
19977: LD_ADDR_VAR 0 1
19981: PUSH
19982: LD_VAR 0 2
19986: PUSH
19987: FOR_IN
19988: IFFALSE 20024
// begin if Crawls ( i ) then
19990: LD_VAR 0 1
19994: PPUSH
19995: CALL_OW 318
19999: IFFALSE 20010
// ComWalk ( i ) ;
20001: LD_VAR 0 1
20005: PPUSH
20006: CALL_OW 138
// SetClass ( i , 2 ) ;
20010: LD_VAR 0 1
20014: PPUSH
20015: LD_INT 2
20017: PPUSH
20018: CALL_OW 336
// end ;
20022: GO 19987
20024: POP
20025: POP
// end ;
20026: PPOPN 2
20028: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
20029: LD_EXP 23
20033: PUSH
20034: LD_EXP 76
20038: AND
20039: IFFALSE 20327
20041: GO 20043
20043: DISABLE
20044: LD_INT 0
20046: PPUSH
20047: PPUSH
20048: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
20049: LD_OWVAR 2
20053: PPUSH
20054: LD_INT 9
20056: PPUSH
20057: LD_INT 1
20059: PPUSH
20060: LD_INT 1
20062: PPUSH
20063: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
20067: LD_INT 9
20069: PPUSH
20070: LD_OWVAR 2
20074: PPUSH
20075: CALL_OW 343
// uc_side := 9 ;
20079: LD_ADDR_OWVAR 20
20083: PUSH
20084: LD_INT 9
20086: ST_TO_ADDR
// uc_nation := 2 ;
20087: LD_ADDR_OWVAR 21
20091: PUSH
20092: LD_INT 2
20094: ST_TO_ADDR
// hc_name := Dark Warrior ;
20095: LD_ADDR_OWVAR 26
20099: PUSH
20100: LD_STRING Dark Warrior
20102: ST_TO_ADDR
// hc_gallery :=  ;
20103: LD_ADDR_OWVAR 33
20107: PUSH
20108: LD_STRING 
20110: ST_TO_ADDR
// hc_noskilllimit := true ;
20111: LD_ADDR_OWVAR 76
20115: PUSH
20116: LD_INT 1
20118: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
20119: LD_ADDR_OWVAR 31
20123: PUSH
20124: LD_INT 30
20126: PUSH
20127: LD_INT 30
20129: PUSH
20130: LD_INT 30
20132: PUSH
20133: LD_INT 30
20135: PUSH
20136: EMPTY
20137: LIST
20138: LIST
20139: LIST
20140: LIST
20141: ST_TO_ADDR
// un := CreateHuman ;
20142: LD_ADDR_VAR 0 3
20146: PUSH
20147: CALL_OW 44
20151: ST_TO_ADDR
// hc_noskilllimit := false ;
20152: LD_ADDR_OWVAR 76
20156: PUSH
20157: LD_INT 0
20159: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
20160: LD_VAR 0 3
20164: PPUSH
20165: LD_INT 1
20167: PPUSH
20168: CALL_OW 51
// ToLua ( playRanger() ) ;
20172: LD_STRING playRanger()
20174: PPUSH
20175: CALL_OW 559
// p := 0 ;
20179: LD_ADDR_VAR 0 2
20183: PUSH
20184: LD_INT 0
20186: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
20187: LD_INT 35
20189: PPUSH
20190: CALL_OW 67
// p := p + 1 ;
20194: LD_ADDR_VAR 0 2
20198: PUSH
20199: LD_VAR 0 2
20203: PUSH
20204: LD_INT 1
20206: PLUS
20207: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
20208: LD_VAR 0 3
20212: PPUSH
20213: CALL_OW 256
20217: PUSH
20218: LD_INT 1000
20220: LESS
20221: IFFALSE 20235
// SetLives ( un , 1000 ) ;
20223: LD_VAR 0 3
20227: PPUSH
20228: LD_INT 1000
20230: PPUSH
20231: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
20235: LD_VAR 0 3
20239: PPUSH
20240: LD_INT 81
20242: PUSH
20243: LD_OWVAR 2
20247: PUSH
20248: EMPTY
20249: LIST
20250: LIST
20251: PUSH
20252: LD_INT 91
20254: PUSH
20255: LD_VAR 0 3
20259: PUSH
20260: LD_INT 30
20262: PUSH
20263: EMPTY
20264: LIST
20265: LIST
20266: LIST
20267: PUSH
20268: EMPTY
20269: LIST
20270: LIST
20271: PPUSH
20272: CALL_OW 69
20276: PPUSH
20277: LD_VAR 0 3
20281: PPUSH
20282: CALL_OW 74
20286: PPUSH
20287: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
20291: LD_VAR 0 2
20295: PUSH
20296: LD_INT 80
20298: GREATER
20299: PUSH
20300: LD_VAR 0 3
20304: PPUSH
20305: CALL_OW 301
20309: OR
20310: IFFALSE 20187
// if un then
20312: LD_VAR 0 3
20316: IFFALSE 20327
// RemoveUnit ( un ) ;
20318: LD_VAR 0 3
20322: PPUSH
20323: CALL_OW 64
// end ;
20327: PPOPN 3
20329: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
20330: LD_EXP 77
20334: IFFALSE 20450
20336: GO 20338
20338: DISABLE
20339: LD_INT 0
20341: PPUSH
20342: PPUSH
20343: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20344: LD_ADDR_VAR 0 2
20348: PUSH
20349: LD_INT 81
20351: PUSH
20352: LD_OWVAR 2
20356: PUSH
20357: EMPTY
20358: LIST
20359: LIST
20360: PUSH
20361: LD_INT 21
20363: PUSH
20364: LD_INT 1
20366: PUSH
20367: EMPTY
20368: LIST
20369: LIST
20370: PUSH
20371: EMPTY
20372: LIST
20373: LIST
20374: PPUSH
20375: CALL_OW 69
20379: ST_TO_ADDR
// ToLua ( playComputer() ) ;
20380: LD_STRING playComputer()
20382: PPUSH
20383: CALL_OW 559
// if not tmp then
20387: LD_VAR 0 2
20391: NOT
20392: IFFALSE 20396
// exit ;
20394: GO 20450
// for i in tmp do
20396: LD_ADDR_VAR 0 1
20400: PUSH
20401: LD_VAR 0 2
20405: PUSH
20406: FOR_IN
20407: IFFALSE 20448
// for j := 1 to 4 do
20409: LD_ADDR_VAR 0 3
20413: PUSH
20414: DOUBLE
20415: LD_INT 1
20417: DEC
20418: ST_TO_ADDR
20419: LD_INT 4
20421: PUSH
20422: FOR_TO
20423: IFFALSE 20444
// SetSkill ( i , j , 10 ) ;
20425: LD_VAR 0 1
20429: PPUSH
20430: LD_VAR 0 3
20434: PPUSH
20435: LD_INT 10
20437: PPUSH
20438: CALL_OW 237
20442: GO 20422
20444: POP
20445: POP
20446: GO 20406
20448: POP
20449: POP
// end ;
20450: PPOPN 3
20452: END
// every 0 0$1 trigger s30 do var i , tmp ;
20453: LD_EXP 78
20457: IFFALSE 20526
20459: GO 20461
20461: DISABLE
20462: LD_INT 0
20464: PPUSH
20465: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20466: LD_ADDR_VAR 0 2
20470: PUSH
20471: LD_INT 22
20473: PUSH
20474: LD_OWVAR 2
20478: PUSH
20479: EMPTY
20480: LIST
20481: LIST
20482: PPUSH
20483: CALL_OW 69
20487: ST_TO_ADDR
// if not tmp then
20488: LD_VAR 0 2
20492: NOT
20493: IFFALSE 20497
// exit ;
20495: GO 20526
// for i in tmp do
20497: LD_ADDR_VAR 0 1
20501: PUSH
20502: LD_VAR 0 2
20506: PUSH
20507: FOR_IN
20508: IFFALSE 20524
// SetLives ( i , 300 ) ;
20510: LD_VAR 0 1
20514: PPUSH
20515: LD_INT 300
20517: PPUSH
20518: CALL_OW 234
20522: GO 20507
20524: POP
20525: POP
// end ;
20526: PPOPN 2
20528: END
// every 0 0$1 trigger s60 do var i , tmp ;
20529: LD_EXP 79
20533: IFFALSE 20602
20535: GO 20537
20537: DISABLE
20538: LD_INT 0
20540: PPUSH
20541: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20542: LD_ADDR_VAR 0 2
20546: PUSH
20547: LD_INT 22
20549: PUSH
20550: LD_OWVAR 2
20554: PUSH
20555: EMPTY
20556: LIST
20557: LIST
20558: PPUSH
20559: CALL_OW 69
20563: ST_TO_ADDR
// if not tmp then
20564: LD_VAR 0 2
20568: NOT
20569: IFFALSE 20573
// exit ;
20571: GO 20602
// for i in tmp do
20573: LD_ADDR_VAR 0 1
20577: PUSH
20578: LD_VAR 0 2
20582: PUSH
20583: FOR_IN
20584: IFFALSE 20600
// SetLives ( i , 600 ) ;
20586: LD_VAR 0 1
20590: PPUSH
20591: LD_INT 600
20593: PPUSH
20594: CALL_OW 234
20598: GO 20583
20600: POP
20601: POP
// end ;
20602: PPOPN 2
20604: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20605: LD_INT 0
20607: PPUSH
// case cmd of 301 :
20608: LD_VAR 0 1
20612: PUSH
20613: LD_INT 301
20615: DOUBLE
20616: EQUAL
20617: IFTRUE 20621
20619: GO 20653
20621: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
20622: LD_VAR 0 6
20626: PPUSH
20627: LD_VAR 0 7
20631: PPUSH
20632: LD_VAR 0 8
20636: PPUSH
20637: LD_VAR 0 4
20641: PPUSH
20642: LD_VAR 0 5
20646: PPUSH
20647: CALL 21862 0 5
20651: GO 20774
20653: LD_INT 302
20655: DOUBLE
20656: EQUAL
20657: IFTRUE 20661
20659: GO 20698
20661: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
20662: LD_VAR 0 6
20666: PPUSH
20667: LD_VAR 0 7
20671: PPUSH
20672: LD_VAR 0 8
20676: PPUSH
20677: LD_VAR 0 9
20681: PPUSH
20682: LD_VAR 0 4
20686: PPUSH
20687: LD_VAR 0 5
20691: PPUSH
20692: CALL 21953 0 6
20696: GO 20774
20698: LD_INT 303
20700: DOUBLE
20701: EQUAL
20702: IFTRUE 20706
20704: GO 20743
20706: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
20707: LD_VAR 0 6
20711: PPUSH
20712: LD_VAR 0 7
20716: PPUSH
20717: LD_VAR 0 8
20721: PPUSH
20722: LD_VAR 0 9
20726: PPUSH
20727: LD_VAR 0 4
20731: PPUSH
20732: LD_VAR 0 5
20736: PPUSH
20737: CALL 20779 0 6
20741: GO 20774
20743: LD_INT 304
20745: DOUBLE
20746: EQUAL
20747: IFTRUE 20751
20749: GO 20773
20751: POP
// hHackTeleport ( unit , x , y ) ; end ;
20752: LD_VAR 0 2
20756: PPUSH
20757: LD_VAR 0 4
20761: PPUSH
20762: LD_VAR 0 5
20766: PPUSH
20767: CALL 22546 0 3
20771: GO 20774
20773: POP
// end ;
20774: LD_VAR 0 12
20778: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
20779: LD_INT 0
20781: PPUSH
20782: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
20783: LD_VAR 0 1
20787: PUSH
20788: LD_INT 1
20790: LESS
20791: PUSH
20792: LD_VAR 0 1
20796: PUSH
20797: LD_INT 3
20799: GREATER
20800: OR
20801: PUSH
20802: LD_VAR 0 5
20806: PPUSH
20807: LD_VAR 0 6
20811: PPUSH
20812: CALL_OW 428
20816: OR
20817: IFFALSE 20821
// exit ;
20819: GO 21549
// uc_side := your_side ;
20821: LD_ADDR_OWVAR 20
20825: PUSH
20826: LD_OWVAR 2
20830: ST_TO_ADDR
// uc_nation := nation ;
20831: LD_ADDR_OWVAR 21
20835: PUSH
20836: LD_VAR 0 1
20840: ST_TO_ADDR
// bc_level = 1 ;
20841: LD_ADDR_OWVAR 43
20845: PUSH
20846: LD_INT 1
20848: ST_TO_ADDR
// case btype of 1 :
20849: LD_VAR 0 2
20853: PUSH
20854: LD_INT 1
20856: DOUBLE
20857: EQUAL
20858: IFTRUE 20862
20860: GO 20873
20862: POP
// bc_type := b_depot ; 2 :
20863: LD_ADDR_OWVAR 42
20867: PUSH
20868: LD_INT 0
20870: ST_TO_ADDR
20871: GO 21493
20873: LD_INT 2
20875: DOUBLE
20876: EQUAL
20877: IFTRUE 20881
20879: GO 20892
20881: POP
// bc_type := b_warehouse ; 3 :
20882: LD_ADDR_OWVAR 42
20886: PUSH
20887: LD_INT 1
20889: ST_TO_ADDR
20890: GO 21493
20892: LD_INT 3
20894: DOUBLE
20895: EQUAL
20896: IFTRUE 20900
20898: GO 20911
20900: POP
// bc_type := b_lab ; 4 .. 9 :
20901: LD_ADDR_OWVAR 42
20905: PUSH
20906: LD_INT 6
20908: ST_TO_ADDR
20909: GO 21493
20911: LD_INT 4
20913: DOUBLE
20914: GREATEREQUAL
20915: IFFALSE 20923
20917: LD_INT 9
20919: DOUBLE
20920: LESSEQUAL
20921: IFTRUE 20925
20923: GO 20985
20925: POP
// begin bc_type := b_lab_half ;
20926: LD_ADDR_OWVAR 42
20930: PUSH
20931: LD_INT 7
20933: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
20934: LD_ADDR_OWVAR 44
20938: PUSH
20939: LD_INT 10
20941: PUSH
20942: LD_INT 11
20944: PUSH
20945: LD_INT 12
20947: PUSH
20948: LD_INT 15
20950: PUSH
20951: LD_INT 14
20953: PUSH
20954: LD_INT 13
20956: PUSH
20957: EMPTY
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: PUSH
20965: LD_VAR 0 2
20969: PUSH
20970: LD_INT 3
20972: MINUS
20973: ARRAY
20974: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
20975: LD_ADDR_OWVAR 45
20979: PUSH
20980: LD_INT 9
20982: ST_TO_ADDR
// end ; 10 .. 13 :
20983: GO 21493
20985: LD_INT 10
20987: DOUBLE
20988: GREATEREQUAL
20989: IFFALSE 20997
20991: LD_INT 13
20993: DOUBLE
20994: LESSEQUAL
20995: IFTRUE 20999
20997: GO 21076
20999: POP
// begin bc_type := b_lab_full ;
21000: LD_ADDR_OWVAR 42
21004: PUSH
21005: LD_INT 8
21007: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
21008: LD_ADDR_OWVAR 44
21012: PUSH
21013: LD_INT 10
21015: PUSH
21016: LD_INT 12
21018: PUSH
21019: LD_INT 14
21021: PUSH
21022: LD_INT 13
21024: PUSH
21025: EMPTY
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: PUSH
21031: LD_VAR 0 2
21035: PUSH
21036: LD_INT 9
21038: MINUS
21039: ARRAY
21040: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
21041: LD_ADDR_OWVAR 45
21045: PUSH
21046: LD_INT 11
21048: PUSH
21049: LD_INT 15
21051: PUSH
21052: LD_INT 12
21054: PUSH
21055: LD_INT 15
21057: PUSH
21058: EMPTY
21059: LIST
21060: LIST
21061: LIST
21062: LIST
21063: PUSH
21064: LD_VAR 0 2
21068: PUSH
21069: LD_INT 9
21071: MINUS
21072: ARRAY
21073: ST_TO_ADDR
// end ; 14 :
21074: GO 21493
21076: LD_INT 14
21078: DOUBLE
21079: EQUAL
21080: IFTRUE 21084
21082: GO 21095
21084: POP
// bc_type := b_workshop ; 15 :
21085: LD_ADDR_OWVAR 42
21089: PUSH
21090: LD_INT 2
21092: ST_TO_ADDR
21093: GO 21493
21095: LD_INT 15
21097: DOUBLE
21098: EQUAL
21099: IFTRUE 21103
21101: GO 21114
21103: POP
// bc_type := b_factory ; 16 :
21104: LD_ADDR_OWVAR 42
21108: PUSH
21109: LD_INT 3
21111: ST_TO_ADDR
21112: GO 21493
21114: LD_INT 16
21116: DOUBLE
21117: EQUAL
21118: IFTRUE 21122
21120: GO 21133
21122: POP
// bc_type := b_ext_gun ; 17 :
21123: LD_ADDR_OWVAR 42
21127: PUSH
21128: LD_INT 17
21130: ST_TO_ADDR
21131: GO 21493
21133: LD_INT 17
21135: DOUBLE
21136: EQUAL
21137: IFTRUE 21141
21139: GO 21169
21141: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
21142: LD_ADDR_OWVAR 42
21146: PUSH
21147: LD_INT 19
21149: PUSH
21150: LD_INT 23
21152: PUSH
21153: LD_INT 19
21155: PUSH
21156: EMPTY
21157: LIST
21158: LIST
21159: LIST
21160: PUSH
21161: LD_VAR 0 1
21165: ARRAY
21166: ST_TO_ADDR
21167: GO 21493
21169: LD_INT 18
21171: DOUBLE
21172: EQUAL
21173: IFTRUE 21177
21175: GO 21188
21177: POP
// bc_type := b_ext_radar ; 19 :
21178: LD_ADDR_OWVAR 42
21182: PUSH
21183: LD_INT 20
21185: ST_TO_ADDR
21186: GO 21493
21188: LD_INT 19
21190: DOUBLE
21191: EQUAL
21192: IFTRUE 21196
21194: GO 21207
21196: POP
// bc_type := b_ext_radio ; 20 :
21197: LD_ADDR_OWVAR 42
21201: PUSH
21202: LD_INT 22
21204: ST_TO_ADDR
21205: GO 21493
21207: LD_INT 20
21209: DOUBLE
21210: EQUAL
21211: IFTRUE 21215
21213: GO 21226
21215: POP
// bc_type := b_ext_siberium ; 21 :
21216: LD_ADDR_OWVAR 42
21220: PUSH
21221: LD_INT 21
21223: ST_TO_ADDR
21224: GO 21493
21226: LD_INT 21
21228: DOUBLE
21229: EQUAL
21230: IFTRUE 21234
21232: GO 21245
21234: POP
// bc_type := b_ext_computer ; 22 :
21235: LD_ADDR_OWVAR 42
21239: PUSH
21240: LD_INT 24
21242: ST_TO_ADDR
21243: GO 21493
21245: LD_INT 22
21247: DOUBLE
21248: EQUAL
21249: IFTRUE 21253
21251: GO 21264
21253: POP
// bc_type := b_ext_track ; 23 :
21254: LD_ADDR_OWVAR 42
21258: PUSH
21259: LD_INT 16
21261: ST_TO_ADDR
21262: GO 21493
21264: LD_INT 23
21266: DOUBLE
21267: EQUAL
21268: IFTRUE 21272
21270: GO 21283
21272: POP
// bc_type := b_ext_laser ; 24 :
21273: LD_ADDR_OWVAR 42
21277: PUSH
21278: LD_INT 25
21280: ST_TO_ADDR
21281: GO 21493
21283: LD_INT 24
21285: DOUBLE
21286: EQUAL
21287: IFTRUE 21291
21289: GO 21302
21291: POP
// bc_type := b_control_tower ; 25 :
21292: LD_ADDR_OWVAR 42
21296: PUSH
21297: LD_INT 36
21299: ST_TO_ADDR
21300: GO 21493
21302: LD_INT 25
21304: DOUBLE
21305: EQUAL
21306: IFTRUE 21310
21308: GO 21321
21310: POP
// bc_type := b_breastwork ; 26 :
21311: LD_ADDR_OWVAR 42
21315: PUSH
21316: LD_INT 31
21318: ST_TO_ADDR
21319: GO 21493
21321: LD_INT 26
21323: DOUBLE
21324: EQUAL
21325: IFTRUE 21329
21327: GO 21340
21329: POP
// bc_type := b_bunker ; 27 :
21330: LD_ADDR_OWVAR 42
21334: PUSH
21335: LD_INT 32
21337: ST_TO_ADDR
21338: GO 21493
21340: LD_INT 27
21342: DOUBLE
21343: EQUAL
21344: IFTRUE 21348
21346: GO 21359
21348: POP
// bc_type := b_turret ; 28 :
21349: LD_ADDR_OWVAR 42
21353: PUSH
21354: LD_INT 33
21356: ST_TO_ADDR
21357: GO 21493
21359: LD_INT 28
21361: DOUBLE
21362: EQUAL
21363: IFTRUE 21367
21365: GO 21378
21367: POP
// bc_type := b_armoury ; 29 :
21368: LD_ADDR_OWVAR 42
21372: PUSH
21373: LD_INT 4
21375: ST_TO_ADDR
21376: GO 21493
21378: LD_INT 29
21380: DOUBLE
21381: EQUAL
21382: IFTRUE 21386
21384: GO 21397
21386: POP
// bc_type := b_barracks ; 30 :
21387: LD_ADDR_OWVAR 42
21391: PUSH
21392: LD_INT 5
21394: ST_TO_ADDR
21395: GO 21493
21397: LD_INT 30
21399: DOUBLE
21400: EQUAL
21401: IFTRUE 21405
21403: GO 21416
21405: POP
// bc_type := b_solar_power ; 31 :
21406: LD_ADDR_OWVAR 42
21410: PUSH
21411: LD_INT 27
21413: ST_TO_ADDR
21414: GO 21493
21416: LD_INT 31
21418: DOUBLE
21419: EQUAL
21420: IFTRUE 21424
21422: GO 21435
21424: POP
// bc_type := b_oil_power ; 32 :
21425: LD_ADDR_OWVAR 42
21429: PUSH
21430: LD_INT 26
21432: ST_TO_ADDR
21433: GO 21493
21435: LD_INT 32
21437: DOUBLE
21438: EQUAL
21439: IFTRUE 21443
21441: GO 21454
21443: POP
// bc_type := b_siberite_power ; 33 :
21444: LD_ADDR_OWVAR 42
21448: PUSH
21449: LD_INT 28
21451: ST_TO_ADDR
21452: GO 21493
21454: LD_INT 33
21456: DOUBLE
21457: EQUAL
21458: IFTRUE 21462
21460: GO 21473
21462: POP
// bc_type := b_oil_mine ; 34 :
21463: LD_ADDR_OWVAR 42
21467: PUSH
21468: LD_INT 29
21470: ST_TO_ADDR
21471: GO 21493
21473: LD_INT 34
21475: DOUBLE
21476: EQUAL
21477: IFTRUE 21481
21479: GO 21492
21481: POP
// bc_type := b_siberite_mine ; end ;
21482: LD_ADDR_OWVAR 42
21486: PUSH
21487: LD_INT 30
21489: ST_TO_ADDR
21490: GO 21493
21492: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
21493: LD_ADDR_VAR 0 8
21497: PUSH
21498: LD_VAR 0 5
21502: PPUSH
21503: LD_VAR 0 6
21507: PPUSH
21508: LD_VAR 0 3
21512: PPUSH
21513: CALL_OW 47
21517: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
21518: LD_OWVAR 42
21522: PUSH
21523: LD_INT 32
21525: PUSH
21526: LD_INT 33
21528: PUSH
21529: EMPTY
21530: LIST
21531: LIST
21532: IN
21533: IFFALSE 21549
// PlaceWeaponTurret ( b , weapon ) ;
21535: LD_VAR 0 8
21539: PPUSH
21540: LD_VAR 0 4
21544: PPUSH
21545: CALL_OW 431
// end ;
21549: LD_VAR 0 7
21553: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
21554: LD_INT 0
21556: PPUSH
21557: PPUSH
21558: PPUSH
21559: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21560: LD_ADDR_VAR 0 4
21564: PUSH
21565: LD_INT 22
21567: PUSH
21568: LD_OWVAR 2
21572: PUSH
21573: EMPTY
21574: LIST
21575: LIST
21576: PUSH
21577: LD_INT 2
21579: PUSH
21580: LD_INT 30
21582: PUSH
21583: LD_INT 0
21585: PUSH
21586: EMPTY
21587: LIST
21588: LIST
21589: PUSH
21590: LD_INT 30
21592: PUSH
21593: LD_INT 1
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: PUSH
21600: EMPTY
21601: LIST
21602: LIST
21603: LIST
21604: PUSH
21605: EMPTY
21606: LIST
21607: LIST
21608: PPUSH
21609: CALL_OW 69
21613: ST_TO_ADDR
// if not tmp then
21614: LD_VAR 0 4
21618: NOT
21619: IFFALSE 21623
// exit ;
21621: GO 21682
// for i in tmp do
21623: LD_ADDR_VAR 0 2
21627: PUSH
21628: LD_VAR 0 4
21632: PUSH
21633: FOR_IN
21634: IFFALSE 21680
// for j = 1 to 3 do
21636: LD_ADDR_VAR 0 3
21640: PUSH
21641: DOUBLE
21642: LD_INT 1
21644: DEC
21645: ST_TO_ADDR
21646: LD_INT 3
21648: PUSH
21649: FOR_TO
21650: IFFALSE 21676
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
21652: LD_VAR 0 2
21656: PPUSH
21657: CALL_OW 274
21661: PPUSH
21662: LD_VAR 0 3
21666: PPUSH
21667: LD_INT 99999
21669: PPUSH
21670: CALL_OW 277
21674: GO 21649
21676: POP
21677: POP
21678: GO 21633
21680: POP
21681: POP
// end ;
21682: LD_VAR 0 1
21686: RET
// export function hHackSetLevel10 ; var i , j ; begin
21687: LD_INT 0
21689: PPUSH
21690: PPUSH
21691: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21692: LD_ADDR_VAR 0 2
21696: PUSH
21697: LD_INT 21
21699: PUSH
21700: LD_INT 1
21702: PUSH
21703: EMPTY
21704: LIST
21705: LIST
21706: PPUSH
21707: CALL_OW 69
21711: PUSH
21712: FOR_IN
21713: IFFALSE 21765
// if IsSelected ( i ) then
21715: LD_VAR 0 2
21719: PPUSH
21720: CALL_OW 306
21724: IFFALSE 21763
// begin for j := 1 to 4 do
21726: LD_ADDR_VAR 0 3
21730: PUSH
21731: DOUBLE
21732: LD_INT 1
21734: DEC
21735: ST_TO_ADDR
21736: LD_INT 4
21738: PUSH
21739: FOR_TO
21740: IFFALSE 21761
// SetSkill ( i , j , 10 ) ;
21742: LD_VAR 0 2
21746: PPUSH
21747: LD_VAR 0 3
21751: PPUSH
21752: LD_INT 10
21754: PPUSH
21755: CALL_OW 237
21759: GO 21739
21761: POP
21762: POP
// end ;
21763: GO 21712
21765: POP
21766: POP
// end ;
21767: LD_VAR 0 1
21771: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
21772: LD_INT 0
21774: PPUSH
21775: PPUSH
21776: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21777: LD_ADDR_VAR 0 2
21781: PUSH
21782: LD_INT 22
21784: PUSH
21785: LD_OWVAR 2
21789: PUSH
21790: EMPTY
21791: LIST
21792: LIST
21793: PUSH
21794: LD_INT 21
21796: PUSH
21797: LD_INT 1
21799: PUSH
21800: EMPTY
21801: LIST
21802: LIST
21803: PUSH
21804: EMPTY
21805: LIST
21806: LIST
21807: PPUSH
21808: CALL_OW 69
21812: PUSH
21813: FOR_IN
21814: IFFALSE 21855
// begin for j := 1 to 4 do
21816: LD_ADDR_VAR 0 3
21820: PUSH
21821: DOUBLE
21822: LD_INT 1
21824: DEC
21825: ST_TO_ADDR
21826: LD_INT 4
21828: PUSH
21829: FOR_TO
21830: IFFALSE 21851
// SetSkill ( i , j , 10 ) ;
21832: LD_VAR 0 2
21836: PPUSH
21837: LD_VAR 0 3
21841: PPUSH
21842: LD_INT 10
21844: PPUSH
21845: CALL_OW 237
21849: GO 21829
21851: POP
21852: POP
// end ;
21853: GO 21813
21855: POP
21856: POP
// end ;
21857: LD_VAR 0 1
21861: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
21862: LD_INT 0
21864: PPUSH
// uc_side := your_side ;
21865: LD_ADDR_OWVAR 20
21869: PUSH
21870: LD_OWVAR 2
21874: ST_TO_ADDR
// uc_nation := nation ;
21875: LD_ADDR_OWVAR 21
21879: PUSH
21880: LD_VAR 0 1
21884: ST_TO_ADDR
// InitHc ;
21885: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21889: LD_INT 0
21891: PPUSH
21892: LD_VAR 0 2
21896: PPUSH
21897: LD_VAR 0 3
21901: PPUSH
21902: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
21906: LD_VAR 0 4
21910: PPUSH
21911: LD_VAR 0 5
21915: PPUSH
21916: CALL_OW 428
21920: PUSH
21921: LD_INT 0
21923: EQUAL
21924: IFFALSE 21948
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
21926: CALL_OW 44
21930: PPUSH
21931: LD_VAR 0 4
21935: PPUSH
21936: LD_VAR 0 5
21940: PPUSH
21941: LD_INT 1
21943: PPUSH
21944: CALL_OW 48
// end ;
21948: LD_VAR 0 6
21952: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
21953: LD_INT 0
21955: PPUSH
21956: PPUSH
// uc_side := your_side ;
21957: LD_ADDR_OWVAR 20
21961: PUSH
21962: LD_OWVAR 2
21966: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
21967: LD_VAR 0 1
21971: PUSH
21972: LD_INT 1
21974: PUSH
21975: LD_INT 2
21977: PUSH
21978: LD_INT 3
21980: PUSH
21981: LD_INT 4
21983: PUSH
21984: LD_INT 5
21986: PUSH
21987: EMPTY
21988: LIST
21989: LIST
21990: LIST
21991: LIST
21992: LIST
21993: IN
21994: IFFALSE 22006
// uc_nation := nation_american else
21996: LD_ADDR_OWVAR 21
22000: PUSH
22001: LD_INT 1
22003: ST_TO_ADDR
22004: GO 22049
// if chassis in [ 11 , 12 , 13 , 14 ] then
22006: LD_VAR 0 1
22010: PUSH
22011: LD_INT 11
22013: PUSH
22014: LD_INT 12
22016: PUSH
22017: LD_INT 13
22019: PUSH
22020: LD_INT 14
22022: PUSH
22023: EMPTY
22024: LIST
22025: LIST
22026: LIST
22027: LIST
22028: IN
22029: IFFALSE 22041
// uc_nation := nation_arabian else
22031: LD_ADDR_OWVAR 21
22035: PUSH
22036: LD_INT 2
22038: ST_TO_ADDR
22039: GO 22049
// uc_nation := nation_russian ;
22041: LD_ADDR_OWVAR 21
22045: PUSH
22046: LD_INT 3
22048: ST_TO_ADDR
// vc_chassis := chassis ;
22049: LD_ADDR_OWVAR 37
22053: PUSH
22054: LD_VAR 0 1
22058: ST_TO_ADDR
// vc_engine := engine ;
22059: LD_ADDR_OWVAR 39
22063: PUSH
22064: LD_VAR 0 2
22068: ST_TO_ADDR
// vc_control := control ;
22069: LD_ADDR_OWVAR 38
22073: PUSH
22074: LD_VAR 0 3
22078: ST_TO_ADDR
// vc_weapon := weapon ;
22079: LD_ADDR_OWVAR 40
22083: PUSH
22084: LD_VAR 0 4
22088: ST_TO_ADDR
// un := CreateVehicle ;
22089: LD_ADDR_VAR 0 8
22093: PUSH
22094: CALL_OW 45
22098: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
22099: LD_VAR 0 8
22103: PPUSH
22104: LD_INT 0
22106: PPUSH
22107: LD_INT 5
22109: PPUSH
22110: CALL_OW 12
22114: PPUSH
22115: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
22119: LD_VAR 0 8
22123: PPUSH
22124: LD_VAR 0 5
22128: PPUSH
22129: LD_VAR 0 6
22133: PPUSH
22134: LD_INT 1
22136: PPUSH
22137: CALL_OW 48
// end ;
22141: LD_VAR 0 7
22145: RET
// export hInvincible ; every 1 do
22146: GO 22148
22148: DISABLE
// hInvincible := [ ] ;
22149: LD_ADDR_EXP 80
22153: PUSH
22154: EMPTY
22155: ST_TO_ADDR
22156: END
// every 10 do var i ;
22157: GO 22159
22159: DISABLE
22160: LD_INT 0
22162: PPUSH
// begin enable ;
22163: ENABLE
// if not hInvincible then
22164: LD_EXP 80
22168: NOT
22169: IFFALSE 22173
// exit ;
22171: GO 22217
// for i in hInvincible do
22173: LD_ADDR_VAR 0 1
22177: PUSH
22178: LD_EXP 80
22182: PUSH
22183: FOR_IN
22184: IFFALSE 22215
// if GetLives ( i ) < 1000 then
22186: LD_VAR 0 1
22190: PPUSH
22191: CALL_OW 256
22195: PUSH
22196: LD_INT 1000
22198: LESS
22199: IFFALSE 22213
// SetLives ( i , 1000 ) ;
22201: LD_VAR 0 1
22205: PPUSH
22206: LD_INT 1000
22208: PPUSH
22209: CALL_OW 234
22213: GO 22183
22215: POP
22216: POP
// end ;
22217: PPOPN 1
22219: END
// export function hHackInvincible ; var i ; begin
22220: LD_INT 0
22222: PPUSH
22223: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
22224: LD_ADDR_VAR 0 2
22228: PUSH
22229: LD_INT 2
22231: PUSH
22232: LD_INT 21
22234: PUSH
22235: LD_INT 1
22237: PUSH
22238: EMPTY
22239: LIST
22240: LIST
22241: PUSH
22242: LD_INT 21
22244: PUSH
22245: LD_INT 2
22247: PUSH
22248: EMPTY
22249: LIST
22250: LIST
22251: PUSH
22252: EMPTY
22253: LIST
22254: LIST
22255: LIST
22256: PPUSH
22257: CALL_OW 69
22261: PUSH
22262: FOR_IN
22263: IFFALSE 22324
// if IsSelected ( i ) then
22265: LD_VAR 0 2
22269: PPUSH
22270: CALL_OW 306
22274: IFFALSE 22322
// begin if i in hInvincible then
22276: LD_VAR 0 2
22280: PUSH
22281: LD_EXP 80
22285: IN
22286: IFFALSE 22306
// hInvincible := hInvincible diff i else
22288: LD_ADDR_EXP 80
22292: PUSH
22293: LD_EXP 80
22297: PUSH
22298: LD_VAR 0 2
22302: DIFF
22303: ST_TO_ADDR
22304: GO 22322
// hInvincible := hInvincible union i ;
22306: LD_ADDR_EXP 80
22310: PUSH
22311: LD_EXP 80
22315: PUSH
22316: LD_VAR 0 2
22320: UNION
22321: ST_TO_ADDR
// end ;
22322: GO 22262
22324: POP
22325: POP
// end ;
22326: LD_VAR 0 1
22330: RET
// export function hHackInvisible ; var i , j ; begin
22331: LD_INT 0
22333: PPUSH
22334: PPUSH
22335: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22336: LD_ADDR_VAR 0 2
22340: PUSH
22341: LD_INT 21
22343: PUSH
22344: LD_INT 1
22346: PUSH
22347: EMPTY
22348: LIST
22349: LIST
22350: PPUSH
22351: CALL_OW 69
22355: PUSH
22356: FOR_IN
22357: IFFALSE 22381
// if IsSelected ( i ) then
22359: LD_VAR 0 2
22363: PPUSH
22364: CALL_OW 306
22368: IFFALSE 22379
// ComForceInvisible ( i ) ;
22370: LD_VAR 0 2
22374: PPUSH
22375: CALL_OW 496
22379: GO 22356
22381: POP
22382: POP
// end ;
22383: LD_VAR 0 1
22387: RET
// export function hHackChangeYourSide ; begin
22388: LD_INT 0
22390: PPUSH
// if your_side = 8 then
22391: LD_OWVAR 2
22395: PUSH
22396: LD_INT 8
22398: EQUAL
22399: IFFALSE 22411
// your_side := 0 else
22401: LD_ADDR_OWVAR 2
22405: PUSH
22406: LD_INT 0
22408: ST_TO_ADDR
22409: GO 22425
// your_side := your_side + 1 ;
22411: LD_ADDR_OWVAR 2
22415: PUSH
22416: LD_OWVAR 2
22420: PUSH
22421: LD_INT 1
22423: PLUS
22424: ST_TO_ADDR
// end ;
22425: LD_VAR 0 1
22429: RET
// export function hHackChangeUnitSide ; var i , j ; begin
22430: LD_INT 0
22432: PPUSH
22433: PPUSH
22434: PPUSH
// for i in all_units do
22435: LD_ADDR_VAR 0 2
22439: PUSH
22440: LD_OWVAR 3
22444: PUSH
22445: FOR_IN
22446: IFFALSE 22524
// if IsSelected ( i ) then
22448: LD_VAR 0 2
22452: PPUSH
22453: CALL_OW 306
22457: IFFALSE 22522
// begin j := GetSide ( i ) ;
22459: LD_ADDR_VAR 0 3
22463: PUSH
22464: LD_VAR 0 2
22468: PPUSH
22469: CALL_OW 255
22473: ST_TO_ADDR
// if j = 8 then
22474: LD_VAR 0 3
22478: PUSH
22479: LD_INT 8
22481: EQUAL
22482: IFFALSE 22494
// j := 0 else
22484: LD_ADDR_VAR 0 3
22488: PUSH
22489: LD_INT 0
22491: ST_TO_ADDR
22492: GO 22508
// j := j + 1 ;
22494: LD_ADDR_VAR 0 3
22498: PUSH
22499: LD_VAR 0 3
22503: PUSH
22504: LD_INT 1
22506: PLUS
22507: ST_TO_ADDR
// SetSide ( i , j ) ;
22508: LD_VAR 0 2
22512: PPUSH
22513: LD_VAR 0 3
22517: PPUSH
22518: CALL_OW 235
// end ;
22522: GO 22445
22524: POP
22525: POP
// end ;
22526: LD_VAR 0 1
22530: RET
// export function hHackFog ; begin
22531: LD_INT 0
22533: PPUSH
// FogOff ( true ) ;
22534: LD_INT 1
22536: PPUSH
22537: CALL_OW 344
// end ;
22541: LD_VAR 0 1
22545: RET
// export function hHackTeleport ( unit , x , y ) ; begin
22546: LD_INT 0
22548: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
22549: LD_VAR 0 1
22553: PPUSH
22554: LD_VAR 0 2
22558: PPUSH
22559: LD_VAR 0 3
22563: PPUSH
22564: LD_INT 1
22566: PPUSH
22567: LD_INT 1
22569: PPUSH
22570: CALL_OW 483
// CenterOnXY ( x , y ) ;
22574: LD_VAR 0 2
22578: PPUSH
22579: LD_VAR 0 3
22583: PPUSH
22584: CALL_OW 84
// end ;
22588: LD_VAR 0 4
22592: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
22593: LD_INT 0
22595: PPUSH
22596: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
22597: LD_VAR 0 1
22601: NOT
22602: PUSH
22603: LD_VAR 0 2
22607: PPUSH
22608: LD_VAR 0 3
22612: PPUSH
22613: CALL_OW 488
22617: NOT
22618: OR
22619: PUSH
22620: LD_VAR 0 1
22624: PPUSH
22625: CALL_OW 266
22629: PUSH
22630: LD_INT 3
22632: NONEQUAL
22633: PUSH
22634: LD_VAR 0 1
22638: PPUSH
22639: CALL_OW 247
22643: PUSH
22644: LD_INT 1
22646: EQUAL
22647: NOT
22648: AND
22649: OR
22650: IFFALSE 22654
// exit ;
22652: GO 22803
// if GetType ( factory ) = unit_human then
22654: LD_VAR 0 1
22658: PPUSH
22659: CALL_OW 247
22663: PUSH
22664: LD_INT 1
22666: EQUAL
22667: IFFALSE 22684
// factory := IsInUnit ( factory ) ;
22669: LD_ADDR_VAR 0 1
22673: PUSH
22674: LD_VAR 0 1
22678: PPUSH
22679: CALL_OW 310
22683: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
22684: LD_VAR 0 1
22688: PPUSH
22689: CALL_OW 266
22693: PUSH
22694: LD_INT 3
22696: NONEQUAL
22697: IFFALSE 22701
// exit ;
22699: GO 22803
// if HexInfo ( x , y ) = factory then
22701: LD_VAR 0 2
22705: PPUSH
22706: LD_VAR 0 3
22710: PPUSH
22711: CALL_OW 428
22715: PUSH
22716: LD_VAR 0 1
22720: EQUAL
22721: IFFALSE 22748
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
22723: LD_ADDR_EXP 81
22727: PUSH
22728: LD_EXP 81
22732: PPUSH
22733: LD_VAR 0 1
22737: PPUSH
22738: LD_INT 0
22740: PPUSH
22741: CALL_OW 1
22745: ST_TO_ADDR
22746: GO 22799
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
22748: LD_ADDR_EXP 81
22752: PUSH
22753: LD_EXP 81
22757: PPUSH
22758: LD_VAR 0 1
22762: PPUSH
22763: LD_VAR 0 1
22767: PPUSH
22768: CALL_OW 255
22772: PUSH
22773: LD_VAR 0 1
22777: PUSH
22778: LD_VAR 0 2
22782: PUSH
22783: LD_VAR 0 3
22787: PUSH
22788: EMPTY
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: PPUSH
22794: CALL_OW 1
22798: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22799: CALL 22808 0 0
// end ;
22803: LD_VAR 0 4
22807: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
22808: LD_INT 0
22810: PPUSH
22811: PPUSH
22812: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
22813: LD_STRING resetFactoryWaypoint();
22815: PPUSH
22816: CALL_OW 559
// if factoryWaypoints then
22820: LD_EXP 81
22824: IFFALSE 22950
// begin list := PrepareArray ( factoryWaypoints ) ;
22826: LD_ADDR_VAR 0 3
22830: PUSH
22831: LD_EXP 81
22835: PPUSH
22836: CALL 65364 0 1
22840: ST_TO_ADDR
// for i := 1 to list do
22841: LD_ADDR_VAR 0 2
22845: PUSH
22846: DOUBLE
22847: LD_INT 1
22849: DEC
22850: ST_TO_ADDR
22851: LD_VAR 0 3
22855: PUSH
22856: FOR_TO
22857: IFFALSE 22948
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22859: LD_STRING setFactoryWaypointXY(
22861: PUSH
22862: LD_VAR 0 3
22866: PUSH
22867: LD_VAR 0 2
22871: ARRAY
22872: PUSH
22873: LD_INT 1
22875: ARRAY
22876: STR
22877: PUSH
22878: LD_STRING ,
22880: STR
22881: PUSH
22882: LD_VAR 0 3
22886: PUSH
22887: LD_VAR 0 2
22891: ARRAY
22892: PUSH
22893: LD_INT 2
22895: ARRAY
22896: STR
22897: PUSH
22898: LD_STRING ,
22900: STR
22901: PUSH
22902: LD_VAR 0 3
22906: PUSH
22907: LD_VAR 0 2
22911: ARRAY
22912: PUSH
22913: LD_INT 3
22915: ARRAY
22916: STR
22917: PUSH
22918: LD_STRING ,
22920: STR
22921: PUSH
22922: LD_VAR 0 3
22926: PUSH
22927: LD_VAR 0 2
22931: ARRAY
22932: PUSH
22933: LD_INT 4
22935: ARRAY
22936: STR
22937: PUSH
22938: LD_STRING )
22940: STR
22941: PPUSH
22942: CALL_OW 559
22946: GO 22856
22948: POP
22949: POP
// end ; end ;
22950: LD_VAR 0 1
22954: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
22955: LD_INT 0
22957: PPUSH
// if HexInfo ( x , y ) = warehouse then
22958: LD_VAR 0 2
22962: PPUSH
22963: LD_VAR 0 3
22967: PPUSH
22968: CALL_OW 428
22972: PUSH
22973: LD_VAR 0 1
22977: EQUAL
22978: IFFALSE 23005
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
22980: LD_ADDR_EXP 82
22984: PUSH
22985: LD_EXP 82
22989: PPUSH
22990: LD_VAR 0 1
22994: PPUSH
22995: LD_INT 0
22997: PPUSH
22998: CALL_OW 1
23002: ST_TO_ADDR
23003: GO 23056
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
23005: LD_ADDR_EXP 82
23009: PUSH
23010: LD_EXP 82
23014: PPUSH
23015: LD_VAR 0 1
23019: PPUSH
23020: LD_VAR 0 1
23024: PPUSH
23025: CALL_OW 255
23029: PUSH
23030: LD_VAR 0 1
23034: PUSH
23035: LD_VAR 0 2
23039: PUSH
23040: LD_VAR 0 3
23044: PUSH
23045: EMPTY
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: PPUSH
23051: CALL_OW 1
23055: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
23056: CALL 23065 0 0
// end ;
23060: LD_VAR 0 4
23064: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
23065: LD_INT 0
23067: PPUSH
23068: PPUSH
23069: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
23070: LD_STRING resetWarehouseGatheringPoints();
23072: PPUSH
23073: CALL_OW 559
// if warehouseGatheringPoints then
23077: LD_EXP 82
23081: IFFALSE 23207
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
23083: LD_ADDR_VAR 0 3
23087: PUSH
23088: LD_EXP 82
23092: PPUSH
23093: CALL 65364 0 1
23097: ST_TO_ADDR
// for i := 1 to list do
23098: LD_ADDR_VAR 0 2
23102: PUSH
23103: DOUBLE
23104: LD_INT 1
23106: DEC
23107: ST_TO_ADDR
23108: LD_VAR 0 3
23112: PUSH
23113: FOR_TO
23114: IFFALSE 23205
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
23116: LD_STRING setWarehouseGatheringPointXY(
23118: PUSH
23119: LD_VAR 0 3
23123: PUSH
23124: LD_VAR 0 2
23128: ARRAY
23129: PUSH
23130: LD_INT 1
23132: ARRAY
23133: STR
23134: PUSH
23135: LD_STRING ,
23137: STR
23138: PUSH
23139: LD_VAR 0 3
23143: PUSH
23144: LD_VAR 0 2
23148: ARRAY
23149: PUSH
23150: LD_INT 2
23152: ARRAY
23153: STR
23154: PUSH
23155: LD_STRING ,
23157: STR
23158: PUSH
23159: LD_VAR 0 3
23163: PUSH
23164: LD_VAR 0 2
23168: ARRAY
23169: PUSH
23170: LD_INT 3
23172: ARRAY
23173: STR
23174: PUSH
23175: LD_STRING ,
23177: STR
23178: PUSH
23179: LD_VAR 0 3
23183: PUSH
23184: LD_VAR 0 2
23188: ARRAY
23189: PUSH
23190: LD_INT 4
23192: ARRAY
23193: STR
23194: PUSH
23195: LD_STRING )
23197: STR
23198: PPUSH
23199: CALL_OW 559
23203: GO 23113
23205: POP
23206: POP
// end ; end ;
23207: LD_VAR 0 1
23211: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
23212: LD_EXP 82
23216: IFFALSE 23901
23218: GO 23220
23220: DISABLE
23221: LD_INT 0
23223: PPUSH
23224: PPUSH
23225: PPUSH
23226: PPUSH
23227: PPUSH
23228: PPUSH
23229: PPUSH
23230: PPUSH
23231: PPUSH
// begin enable ;
23232: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
23233: LD_ADDR_VAR 0 3
23237: PUSH
23238: LD_EXP 82
23242: PPUSH
23243: CALL 65364 0 1
23247: ST_TO_ADDR
// if not list then
23248: LD_VAR 0 3
23252: NOT
23253: IFFALSE 23257
// exit ;
23255: GO 23901
// for i := 1 to list do
23257: LD_ADDR_VAR 0 1
23261: PUSH
23262: DOUBLE
23263: LD_INT 1
23265: DEC
23266: ST_TO_ADDR
23267: LD_VAR 0 3
23271: PUSH
23272: FOR_TO
23273: IFFALSE 23899
// begin depot := list [ i ] [ 2 ] ;
23275: LD_ADDR_VAR 0 8
23279: PUSH
23280: LD_VAR 0 3
23284: PUSH
23285: LD_VAR 0 1
23289: ARRAY
23290: PUSH
23291: LD_INT 2
23293: ARRAY
23294: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
23295: LD_ADDR_VAR 0 5
23299: PUSH
23300: LD_VAR 0 3
23304: PUSH
23305: LD_VAR 0 1
23309: ARRAY
23310: PUSH
23311: LD_INT 1
23313: ARRAY
23314: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
23315: LD_VAR 0 8
23319: PPUSH
23320: CALL_OW 301
23324: PUSH
23325: LD_VAR 0 5
23329: PUSH
23330: LD_VAR 0 8
23334: PPUSH
23335: CALL_OW 255
23339: NONEQUAL
23340: OR
23341: IFFALSE 23370
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
23343: LD_ADDR_EXP 82
23347: PUSH
23348: LD_EXP 82
23352: PPUSH
23353: LD_VAR 0 8
23357: PPUSH
23358: LD_INT 0
23360: PPUSH
23361: CALL_OW 1
23365: ST_TO_ADDR
// exit ;
23366: POP
23367: POP
23368: GO 23901
// end ; x := list [ i ] [ 3 ] ;
23370: LD_ADDR_VAR 0 6
23374: PUSH
23375: LD_VAR 0 3
23379: PUSH
23380: LD_VAR 0 1
23384: ARRAY
23385: PUSH
23386: LD_INT 3
23388: ARRAY
23389: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
23390: LD_ADDR_VAR 0 7
23394: PUSH
23395: LD_VAR 0 3
23399: PUSH
23400: LD_VAR 0 1
23404: ARRAY
23405: PUSH
23406: LD_INT 4
23408: ARRAY
23409: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
23410: LD_ADDR_VAR 0 9
23414: PUSH
23415: LD_VAR 0 6
23419: PPUSH
23420: LD_VAR 0 7
23424: PPUSH
23425: LD_INT 16
23427: PPUSH
23428: CALL 63952 0 3
23432: ST_TO_ADDR
// if not cratesNearbyPoint then
23433: LD_VAR 0 9
23437: NOT
23438: IFFALSE 23444
// exit ;
23440: POP
23441: POP
23442: GO 23901
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
23444: LD_ADDR_VAR 0 4
23448: PUSH
23449: LD_INT 22
23451: PUSH
23452: LD_VAR 0 5
23456: PUSH
23457: EMPTY
23458: LIST
23459: LIST
23460: PUSH
23461: LD_INT 3
23463: PUSH
23464: LD_INT 60
23466: PUSH
23467: EMPTY
23468: LIST
23469: PUSH
23470: EMPTY
23471: LIST
23472: LIST
23473: PUSH
23474: LD_INT 91
23476: PUSH
23477: LD_VAR 0 8
23481: PUSH
23482: LD_INT 6
23484: PUSH
23485: EMPTY
23486: LIST
23487: LIST
23488: LIST
23489: PUSH
23490: LD_INT 2
23492: PUSH
23493: LD_INT 25
23495: PUSH
23496: LD_INT 2
23498: PUSH
23499: EMPTY
23500: LIST
23501: LIST
23502: PUSH
23503: LD_INT 25
23505: PUSH
23506: LD_INT 16
23508: PUSH
23509: EMPTY
23510: LIST
23511: LIST
23512: PUSH
23513: EMPTY
23514: LIST
23515: LIST
23516: LIST
23517: PUSH
23518: EMPTY
23519: LIST
23520: LIST
23521: LIST
23522: LIST
23523: PPUSH
23524: CALL_OW 69
23528: PUSH
23529: LD_VAR 0 8
23533: PPUSH
23534: CALL_OW 313
23538: PPUSH
23539: LD_INT 3
23541: PUSH
23542: LD_INT 60
23544: PUSH
23545: EMPTY
23546: LIST
23547: PUSH
23548: EMPTY
23549: LIST
23550: LIST
23551: PUSH
23552: LD_INT 2
23554: PUSH
23555: LD_INT 25
23557: PUSH
23558: LD_INT 2
23560: PUSH
23561: EMPTY
23562: LIST
23563: LIST
23564: PUSH
23565: LD_INT 25
23567: PUSH
23568: LD_INT 16
23570: PUSH
23571: EMPTY
23572: LIST
23573: LIST
23574: PUSH
23575: EMPTY
23576: LIST
23577: LIST
23578: LIST
23579: PUSH
23580: EMPTY
23581: LIST
23582: LIST
23583: PPUSH
23584: CALL_OW 72
23588: UNION
23589: ST_TO_ADDR
// if tmp then
23590: LD_VAR 0 4
23594: IFFALSE 23674
// begin tmp := ShrinkArray ( tmp , 3 ) ;
23596: LD_ADDR_VAR 0 4
23600: PUSH
23601: LD_VAR 0 4
23605: PPUSH
23606: LD_INT 3
23608: PPUSH
23609: CALL 61921 0 2
23613: ST_TO_ADDR
// for j in tmp do
23614: LD_ADDR_VAR 0 2
23618: PUSH
23619: LD_VAR 0 4
23623: PUSH
23624: FOR_IN
23625: IFFALSE 23668
// begin if IsInUnit ( j ) then
23627: LD_VAR 0 2
23631: PPUSH
23632: CALL_OW 310
23636: IFFALSE 23647
// ComExit ( j ) ;
23638: LD_VAR 0 2
23642: PPUSH
23643: CALL 62004 0 1
// AddComCollect ( j , x , y ) ;
23647: LD_VAR 0 2
23651: PPUSH
23652: LD_VAR 0 6
23656: PPUSH
23657: LD_VAR 0 7
23661: PPUSH
23662: CALL_OW 177
// end ;
23666: GO 23624
23668: POP
23669: POP
// exit ;
23670: POP
23671: POP
23672: GO 23901
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
23674: LD_ADDR_VAR 0 4
23678: PUSH
23679: LD_INT 22
23681: PUSH
23682: LD_VAR 0 5
23686: PUSH
23687: EMPTY
23688: LIST
23689: LIST
23690: PUSH
23691: LD_INT 91
23693: PUSH
23694: LD_VAR 0 8
23698: PUSH
23699: LD_INT 8
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: LIST
23706: PUSH
23707: LD_INT 2
23709: PUSH
23710: LD_INT 34
23712: PUSH
23713: LD_INT 12
23715: PUSH
23716: EMPTY
23717: LIST
23718: LIST
23719: PUSH
23720: LD_INT 34
23722: PUSH
23723: LD_INT 51
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: PUSH
23730: LD_INT 34
23732: PUSH
23733: LD_INT 32
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: PUSH
23740: LD_INT 34
23742: PUSH
23743: LD_INT 89
23745: PUSH
23746: EMPTY
23747: LIST
23748: LIST
23749: PUSH
23750: EMPTY
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: PUSH
23757: EMPTY
23758: LIST
23759: LIST
23760: LIST
23761: PPUSH
23762: CALL_OW 69
23766: ST_TO_ADDR
// if tmp then
23767: LD_VAR 0 4
23771: IFFALSE 23897
// begin for j in tmp do
23773: LD_ADDR_VAR 0 2
23777: PUSH
23778: LD_VAR 0 4
23782: PUSH
23783: FOR_IN
23784: IFFALSE 23895
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
23786: LD_VAR 0 2
23790: PPUSH
23791: CALL_OW 262
23795: PUSH
23796: LD_INT 3
23798: EQUAL
23799: PUSH
23800: LD_VAR 0 2
23804: PPUSH
23805: CALL_OW 261
23809: PUSH
23810: LD_INT 20
23812: GREATER
23813: OR
23814: PUSH
23815: LD_VAR 0 2
23819: PPUSH
23820: CALL_OW 314
23824: NOT
23825: AND
23826: PUSH
23827: LD_VAR 0 2
23831: PPUSH
23832: CALL_OW 263
23836: PUSH
23837: LD_INT 1
23839: NONEQUAL
23840: PUSH
23841: LD_VAR 0 2
23845: PPUSH
23846: CALL_OW 311
23850: OR
23851: AND
23852: IFFALSE 23893
// begin ComCollect ( j , x , y ) ;
23854: LD_VAR 0 2
23858: PPUSH
23859: LD_VAR 0 6
23863: PPUSH
23864: LD_VAR 0 7
23868: PPUSH
23869: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
23873: LD_VAR 0 2
23877: PPUSH
23878: LD_VAR 0 8
23882: PPUSH
23883: CALL_OW 172
// exit ;
23887: POP
23888: POP
23889: POP
23890: POP
23891: GO 23901
// end ;
23893: GO 23783
23895: POP
23896: POP
// end ; end ;
23897: GO 23272
23899: POP
23900: POP
// end ; end_of_file end_of_file
23901: PPOPN 9
23903: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
23904: LD_INT 0
23906: PPUSH
23907: PPUSH
// if exist_mode then
23908: LD_VAR 0 2
23912: IFFALSE 23937
// unit := CreateCharacter ( prefix & ident ) else
23914: LD_ADDR_VAR 0 5
23918: PUSH
23919: LD_VAR 0 3
23923: PUSH
23924: LD_VAR 0 1
23928: STR
23929: PPUSH
23930: CALL_OW 34
23934: ST_TO_ADDR
23935: GO 23952
// unit := NewCharacter ( ident ) ;
23937: LD_ADDR_VAR 0 5
23941: PUSH
23942: LD_VAR 0 1
23946: PPUSH
23947: CALL_OW 25
23951: ST_TO_ADDR
// result := unit ;
23952: LD_ADDR_VAR 0 4
23956: PUSH
23957: LD_VAR 0 5
23961: ST_TO_ADDR
// end ;
23962: LD_VAR 0 4
23966: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
23967: LD_INT 0
23969: PPUSH
23970: PPUSH
// if not side or not nation then
23971: LD_VAR 0 1
23975: NOT
23976: PUSH
23977: LD_VAR 0 2
23981: NOT
23982: OR
23983: IFFALSE 23987
// exit ;
23985: GO 24755
// case nation of nation_american :
23987: LD_VAR 0 2
23991: PUSH
23992: LD_INT 1
23994: DOUBLE
23995: EQUAL
23996: IFTRUE 24000
23998: GO 24214
24000: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
24001: LD_ADDR_VAR 0 4
24005: PUSH
24006: LD_INT 35
24008: PUSH
24009: LD_INT 45
24011: PUSH
24012: LD_INT 46
24014: PUSH
24015: LD_INT 47
24017: PUSH
24018: LD_INT 82
24020: PUSH
24021: LD_INT 83
24023: PUSH
24024: LD_INT 84
24026: PUSH
24027: LD_INT 85
24029: PUSH
24030: LD_INT 86
24032: PUSH
24033: LD_INT 1
24035: PUSH
24036: LD_INT 2
24038: PUSH
24039: LD_INT 6
24041: PUSH
24042: LD_INT 15
24044: PUSH
24045: LD_INT 16
24047: PUSH
24048: LD_INT 7
24050: PUSH
24051: LD_INT 12
24053: PUSH
24054: LD_INT 13
24056: PUSH
24057: LD_INT 10
24059: PUSH
24060: LD_INT 14
24062: PUSH
24063: LD_INT 20
24065: PUSH
24066: LD_INT 21
24068: PUSH
24069: LD_INT 22
24071: PUSH
24072: LD_INT 25
24074: PUSH
24075: LD_INT 32
24077: PUSH
24078: LD_INT 27
24080: PUSH
24081: LD_INT 36
24083: PUSH
24084: LD_INT 69
24086: PUSH
24087: LD_INT 39
24089: PUSH
24090: LD_INT 34
24092: PUSH
24093: LD_INT 40
24095: PUSH
24096: LD_INT 48
24098: PUSH
24099: LD_INT 49
24101: PUSH
24102: LD_INT 50
24104: PUSH
24105: LD_INT 51
24107: PUSH
24108: LD_INT 52
24110: PUSH
24111: LD_INT 53
24113: PUSH
24114: LD_INT 54
24116: PUSH
24117: LD_INT 55
24119: PUSH
24120: LD_INT 56
24122: PUSH
24123: LD_INT 57
24125: PUSH
24126: LD_INT 58
24128: PUSH
24129: LD_INT 59
24131: PUSH
24132: LD_INT 60
24134: PUSH
24135: LD_INT 61
24137: PUSH
24138: LD_INT 62
24140: PUSH
24141: LD_INT 80
24143: PUSH
24144: LD_INT 82
24146: PUSH
24147: LD_INT 83
24149: PUSH
24150: LD_INT 84
24152: PUSH
24153: LD_INT 85
24155: PUSH
24156: LD_INT 86
24158: PUSH
24159: EMPTY
24160: LIST
24161: LIST
24162: LIST
24163: LIST
24164: LIST
24165: LIST
24166: LIST
24167: LIST
24168: LIST
24169: LIST
24170: LIST
24171: LIST
24172: LIST
24173: LIST
24174: LIST
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: ST_TO_ADDR
24212: GO 24679
24214: LD_INT 2
24216: DOUBLE
24217: EQUAL
24218: IFTRUE 24222
24220: GO 24448
24222: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
24223: LD_ADDR_VAR 0 4
24227: PUSH
24228: LD_INT 35
24230: PUSH
24231: LD_INT 45
24233: PUSH
24234: LD_INT 46
24236: PUSH
24237: LD_INT 47
24239: PUSH
24240: LD_INT 82
24242: PUSH
24243: LD_INT 83
24245: PUSH
24246: LD_INT 84
24248: PUSH
24249: LD_INT 85
24251: PUSH
24252: LD_INT 87
24254: PUSH
24255: LD_INT 70
24257: PUSH
24258: LD_INT 1
24260: PUSH
24261: LD_INT 11
24263: PUSH
24264: LD_INT 3
24266: PUSH
24267: LD_INT 4
24269: PUSH
24270: LD_INT 5
24272: PUSH
24273: LD_INT 6
24275: PUSH
24276: LD_INT 15
24278: PUSH
24279: LD_INT 18
24281: PUSH
24282: LD_INT 7
24284: PUSH
24285: LD_INT 17
24287: PUSH
24288: LD_INT 8
24290: PUSH
24291: LD_INT 20
24293: PUSH
24294: LD_INT 21
24296: PUSH
24297: LD_INT 22
24299: PUSH
24300: LD_INT 72
24302: PUSH
24303: LD_INT 26
24305: PUSH
24306: LD_INT 69
24308: PUSH
24309: LD_INT 39
24311: PUSH
24312: LD_INT 40
24314: PUSH
24315: LD_INT 41
24317: PUSH
24318: LD_INT 42
24320: PUSH
24321: LD_INT 43
24323: PUSH
24324: LD_INT 48
24326: PUSH
24327: LD_INT 49
24329: PUSH
24330: LD_INT 50
24332: PUSH
24333: LD_INT 51
24335: PUSH
24336: LD_INT 52
24338: PUSH
24339: LD_INT 53
24341: PUSH
24342: LD_INT 54
24344: PUSH
24345: LD_INT 55
24347: PUSH
24348: LD_INT 56
24350: PUSH
24351: LD_INT 60
24353: PUSH
24354: LD_INT 61
24356: PUSH
24357: LD_INT 62
24359: PUSH
24360: LD_INT 66
24362: PUSH
24363: LD_INT 67
24365: PUSH
24366: LD_INT 68
24368: PUSH
24369: LD_INT 81
24371: PUSH
24372: LD_INT 82
24374: PUSH
24375: LD_INT 83
24377: PUSH
24378: LD_INT 84
24380: PUSH
24381: LD_INT 85
24383: PUSH
24384: LD_INT 87
24386: PUSH
24387: LD_INT 88
24389: PUSH
24390: EMPTY
24391: LIST
24392: LIST
24393: LIST
24394: LIST
24395: LIST
24396: LIST
24397: LIST
24398: LIST
24399: LIST
24400: LIST
24401: LIST
24402: LIST
24403: LIST
24404: LIST
24405: LIST
24406: LIST
24407: LIST
24408: LIST
24409: LIST
24410: LIST
24411: LIST
24412: LIST
24413: LIST
24414: LIST
24415: LIST
24416: LIST
24417: LIST
24418: LIST
24419: LIST
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: LIST
24425: LIST
24426: LIST
24427: LIST
24428: LIST
24429: LIST
24430: LIST
24431: LIST
24432: LIST
24433: LIST
24434: LIST
24435: LIST
24436: LIST
24437: LIST
24438: LIST
24439: LIST
24440: LIST
24441: LIST
24442: LIST
24443: LIST
24444: LIST
24445: ST_TO_ADDR
24446: GO 24679
24448: LD_INT 3
24450: DOUBLE
24451: EQUAL
24452: IFTRUE 24456
24454: GO 24678
24456: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
24457: LD_ADDR_VAR 0 4
24461: PUSH
24462: LD_INT 46
24464: PUSH
24465: LD_INT 47
24467: PUSH
24468: LD_INT 1
24470: PUSH
24471: LD_INT 2
24473: PUSH
24474: LD_INT 82
24476: PUSH
24477: LD_INT 83
24479: PUSH
24480: LD_INT 84
24482: PUSH
24483: LD_INT 85
24485: PUSH
24486: LD_INT 86
24488: PUSH
24489: LD_INT 11
24491: PUSH
24492: LD_INT 9
24494: PUSH
24495: LD_INT 20
24497: PUSH
24498: LD_INT 19
24500: PUSH
24501: LD_INT 21
24503: PUSH
24504: LD_INT 24
24506: PUSH
24507: LD_INT 22
24509: PUSH
24510: LD_INT 25
24512: PUSH
24513: LD_INT 28
24515: PUSH
24516: LD_INT 29
24518: PUSH
24519: LD_INT 30
24521: PUSH
24522: LD_INT 31
24524: PUSH
24525: LD_INT 37
24527: PUSH
24528: LD_INT 38
24530: PUSH
24531: LD_INT 32
24533: PUSH
24534: LD_INT 27
24536: PUSH
24537: LD_INT 33
24539: PUSH
24540: LD_INT 69
24542: PUSH
24543: LD_INT 39
24545: PUSH
24546: LD_INT 34
24548: PUSH
24549: LD_INT 40
24551: PUSH
24552: LD_INT 71
24554: PUSH
24555: LD_INT 23
24557: PUSH
24558: LD_INT 44
24560: PUSH
24561: LD_INT 48
24563: PUSH
24564: LD_INT 49
24566: PUSH
24567: LD_INT 50
24569: PUSH
24570: LD_INT 51
24572: PUSH
24573: LD_INT 52
24575: PUSH
24576: LD_INT 53
24578: PUSH
24579: LD_INT 54
24581: PUSH
24582: LD_INT 55
24584: PUSH
24585: LD_INT 56
24587: PUSH
24588: LD_INT 57
24590: PUSH
24591: LD_INT 58
24593: PUSH
24594: LD_INT 59
24596: PUSH
24597: LD_INT 63
24599: PUSH
24600: LD_INT 64
24602: PUSH
24603: LD_INT 65
24605: PUSH
24606: LD_INT 82
24608: PUSH
24609: LD_INT 83
24611: PUSH
24612: LD_INT 84
24614: PUSH
24615: LD_INT 85
24617: PUSH
24618: LD_INT 86
24620: PUSH
24621: EMPTY
24622: LIST
24623: LIST
24624: LIST
24625: LIST
24626: LIST
24627: LIST
24628: LIST
24629: LIST
24630: LIST
24631: LIST
24632: LIST
24633: LIST
24634: LIST
24635: LIST
24636: LIST
24637: LIST
24638: LIST
24639: LIST
24640: LIST
24641: LIST
24642: LIST
24643: LIST
24644: LIST
24645: LIST
24646: LIST
24647: LIST
24648: LIST
24649: LIST
24650: LIST
24651: LIST
24652: LIST
24653: LIST
24654: LIST
24655: LIST
24656: LIST
24657: LIST
24658: LIST
24659: LIST
24660: LIST
24661: LIST
24662: LIST
24663: LIST
24664: LIST
24665: LIST
24666: LIST
24667: LIST
24668: LIST
24669: LIST
24670: LIST
24671: LIST
24672: LIST
24673: LIST
24674: LIST
24675: ST_TO_ADDR
24676: GO 24679
24678: POP
// if state > - 1 and state < 3 then
24679: LD_VAR 0 3
24683: PUSH
24684: LD_INT 1
24686: NEG
24687: GREATER
24688: PUSH
24689: LD_VAR 0 3
24693: PUSH
24694: LD_INT 3
24696: LESS
24697: AND
24698: IFFALSE 24755
// for i in result do
24700: LD_ADDR_VAR 0 5
24704: PUSH
24705: LD_VAR 0 4
24709: PUSH
24710: FOR_IN
24711: IFFALSE 24753
// if GetTech ( i , side ) <> state then
24713: LD_VAR 0 5
24717: PPUSH
24718: LD_VAR 0 1
24722: PPUSH
24723: CALL_OW 321
24727: PUSH
24728: LD_VAR 0 3
24732: NONEQUAL
24733: IFFALSE 24751
// result := result diff i ;
24735: LD_ADDR_VAR 0 4
24739: PUSH
24740: LD_VAR 0 4
24744: PUSH
24745: LD_VAR 0 5
24749: DIFF
24750: ST_TO_ADDR
24751: GO 24710
24753: POP
24754: POP
// end ;
24755: LD_VAR 0 4
24759: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
24760: LD_INT 0
24762: PPUSH
24763: PPUSH
24764: PPUSH
// result := true ;
24765: LD_ADDR_VAR 0 3
24769: PUSH
24770: LD_INT 1
24772: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
24773: LD_ADDR_VAR 0 5
24777: PUSH
24778: LD_VAR 0 2
24782: PPUSH
24783: CALL_OW 480
24787: ST_TO_ADDR
// if not tmp then
24788: LD_VAR 0 5
24792: NOT
24793: IFFALSE 24797
// exit ;
24795: GO 24846
// for i in tmp do
24797: LD_ADDR_VAR 0 4
24801: PUSH
24802: LD_VAR 0 5
24806: PUSH
24807: FOR_IN
24808: IFFALSE 24844
// if GetTech ( i , side ) <> state_researched then
24810: LD_VAR 0 4
24814: PPUSH
24815: LD_VAR 0 1
24819: PPUSH
24820: CALL_OW 321
24824: PUSH
24825: LD_INT 2
24827: NONEQUAL
24828: IFFALSE 24842
// begin result := false ;
24830: LD_ADDR_VAR 0 3
24834: PUSH
24835: LD_INT 0
24837: ST_TO_ADDR
// exit ;
24838: POP
24839: POP
24840: GO 24846
// end ;
24842: GO 24807
24844: POP
24845: POP
// end ;
24846: LD_VAR 0 3
24850: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
24851: LD_INT 0
24853: PPUSH
24854: PPUSH
24855: PPUSH
24856: PPUSH
24857: PPUSH
24858: PPUSH
24859: PPUSH
24860: PPUSH
24861: PPUSH
24862: PPUSH
24863: PPUSH
24864: PPUSH
24865: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
24866: LD_VAR 0 1
24870: NOT
24871: PUSH
24872: LD_VAR 0 1
24876: PPUSH
24877: CALL_OW 257
24881: PUSH
24882: LD_INT 9
24884: NONEQUAL
24885: OR
24886: IFFALSE 24890
// exit ;
24888: GO 25463
// side := GetSide ( unit ) ;
24890: LD_ADDR_VAR 0 9
24894: PUSH
24895: LD_VAR 0 1
24899: PPUSH
24900: CALL_OW 255
24904: ST_TO_ADDR
// tech_space := tech_spacanom ;
24905: LD_ADDR_VAR 0 12
24909: PUSH
24910: LD_INT 29
24912: ST_TO_ADDR
// tech_time := tech_taurad ;
24913: LD_ADDR_VAR 0 13
24917: PUSH
24918: LD_INT 28
24920: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
24921: LD_ADDR_VAR 0 11
24925: PUSH
24926: LD_VAR 0 1
24930: PPUSH
24931: CALL_OW 310
24935: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
24936: LD_VAR 0 11
24940: PPUSH
24941: CALL_OW 247
24945: PUSH
24946: LD_INT 2
24948: EQUAL
24949: IFFALSE 24953
// exit ;
24951: GO 25463
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24953: LD_ADDR_VAR 0 8
24957: PUSH
24958: LD_INT 81
24960: PUSH
24961: LD_VAR 0 9
24965: PUSH
24966: EMPTY
24967: LIST
24968: LIST
24969: PUSH
24970: LD_INT 3
24972: PUSH
24973: LD_INT 21
24975: PUSH
24976: LD_INT 3
24978: PUSH
24979: EMPTY
24980: LIST
24981: LIST
24982: PUSH
24983: EMPTY
24984: LIST
24985: LIST
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PPUSH
24991: CALL_OW 69
24995: ST_TO_ADDR
// if not tmp then
24996: LD_VAR 0 8
25000: NOT
25001: IFFALSE 25005
// exit ;
25003: GO 25463
// if in_unit then
25005: LD_VAR 0 11
25009: IFFALSE 25033
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
25011: LD_ADDR_VAR 0 10
25015: PUSH
25016: LD_VAR 0 8
25020: PPUSH
25021: LD_VAR 0 11
25025: PPUSH
25026: CALL_OW 74
25030: ST_TO_ADDR
25031: GO 25053
// enemy := NearestUnitToUnit ( tmp , unit ) ;
25033: LD_ADDR_VAR 0 10
25037: PUSH
25038: LD_VAR 0 8
25042: PPUSH
25043: LD_VAR 0 1
25047: PPUSH
25048: CALL_OW 74
25052: ST_TO_ADDR
// if not enemy then
25053: LD_VAR 0 10
25057: NOT
25058: IFFALSE 25062
// exit ;
25060: GO 25463
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
25062: LD_VAR 0 11
25066: PUSH
25067: LD_VAR 0 11
25071: PPUSH
25072: LD_VAR 0 10
25076: PPUSH
25077: CALL_OW 296
25081: PUSH
25082: LD_INT 13
25084: GREATER
25085: AND
25086: PUSH
25087: LD_VAR 0 1
25091: PPUSH
25092: LD_VAR 0 10
25096: PPUSH
25097: CALL_OW 296
25101: PUSH
25102: LD_INT 12
25104: GREATER
25105: OR
25106: IFFALSE 25110
// exit ;
25108: GO 25463
// missile := [ 1 ] ;
25110: LD_ADDR_VAR 0 14
25114: PUSH
25115: LD_INT 1
25117: PUSH
25118: EMPTY
25119: LIST
25120: ST_TO_ADDR
// if Researched ( side , tech_space ) then
25121: LD_VAR 0 9
25125: PPUSH
25126: LD_VAR 0 12
25130: PPUSH
25131: CALL_OW 325
25135: IFFALSE 25164
// missile := Replace ( missile , missile + 1 , 2 ) ;
25137: LD_ADDR_VAR 0 14
25141: PUSH
25142: LD_VAR 0 14
25146: PPUSH
25147: LD_VAR 0 14
25151: PUSH
25152: LD_INT 1
25154: PLUS
25155: PPUSH
25156: LD_INT 2
25158: PPUSH
25159: CALL_OW 1
25163: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
25164: LD_VAR 0 9
25168: PPUSH
25169: LD_VAR 0 13
25173: PPUSH
25174: CALL_OW 325
25178: PUSH
25179: LD_VAR 0 10
25183: PPUSH
25184: CALL_OW 255
25188: PPUSH
25189: LD_VAR 0 13
25193: PPUSH
25194: CALL_OW 325
25198: NOT
25199: AND
25200: IFFALSE 25229
// missile := Replace ( missile , missile + 1 , 3 ) ;
25202: LD_ADDR_VAR 0 14
25206: PUSH
25207: LD_VAR 0 14
25211: PPUSH
25212: LD_VAR 0 14
25216: PUSH
25217: LD_INT 1
25219: PLUS
25220: PPUSH
25221: LD_INT 3
25223: PPUSH
25224: CALL_OW 1
25228: ST_TO_ADDR
// if missile < 2 then
25229: LD_VAR 0 14
25233: PUSH
25234: LD_INT 2
25236: LESS
25237: IFFALSE 25241
// exit ;
25239: GO 25463
// x := GetX ( enemy ) ;
25241: LD_ADDR_VAR 0 4
25245: PUSH
25246: LD_VAR 0 10
25250: PPUSH
25251: CALL_OW 250
25255: ST_TO_ADDR
// y := GetY ( enemy ) ;
25256: LD_ADDR_VAR 0 5
25260: PUSH
25261: LD_VAR 0 10
25265: PPUSH
25266: CALL_OW 251
25270: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
25271: LD_ADDR_VAR 0 6
25275: PUSH
25276: LD_VAR 0 4
25280: PUSH
25281: LD_INT 1
25283: NEG
25284: PPUSH
25285: LD_INT 1
25287: PPUSH
25288: CALL_OW 12
25292: PLUS
25293: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
25294: LD_ADDR_VAR 0 7
25298: PUSH
25299: LD_VAR 0 5
25303: PUSH
25304: LD_INT 1
25306: NEG
25307: PPUSH
25308: LD_INT 1
25310: PPUSH
25311: CALL_OW 12
25315: PLUS
25316: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25317: LD_VAR 0 6
25321: PPUSH
25322: LD_VAR 0 7
25326: PPUSH
25327: CALL_OW 488
25331: NOT
25332: IFFALSE 25354
// begin _x := x ;
25334: LD_ADDR_VAR 0 6
25338: PUSH
25339: LD_VAR 0 4
25343: ST_TO_ADDR
// _y := y ;
25344: LD_ADDR_VAR 0 7
25348: PUSH
25349: LD_VAR 0 5
25353: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
25354: LD_ADDR_VAR 0 3
25358: PUSH
25359: LD_INT 1
25361: PPUSH
25362: LD_VAR 0 14
25366: PPUSH
25367: CALL_OW 12
25371: ST_TO_ADDR
// case i of 1 :
25372: LD_VAR 0 3
25376: PUSH
25377: LD_INT 1
25379: DOUBLE
25380: EQUAL
25381: IFTRUE 25385
25383: GO 25402
25385: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
25386: LD_VAR 0 1
25390: PPUSH
25391: LD_VAR 0 10
25395: PPUSH
25396: CALL_OW 115
25400: GO 25463
25402: LD_INT 2
25404: DOUBLE
25405: EQUAL
25406: IFTRUE 25410
25408: GO 25432
25410: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
25411: LD_VAR 0 1
25415: PPUSH
25416: LD_VAR 0 6
25420: PPUSH
25421: LD_VAR 0 7
25425: PPUSH
25426: CALL_OW 153
25430: GO 25463
25432: LD_INT 3
25434: DOUBLE
25435: EQUAL
25436: IFTRUE 25440
25438: GO 25462
25440: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
25441: LD_VAR 0 1
25445: PPUSH
25446: LD_VAR 0 6
25450: PPUSH
25451: LD_VAR 0 7
25455: PPUSH
25456: CALL_OW 154
25460: GO 25463
25462: POP
// end ;
25463: LD_VAR 0 2
25467: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
25468: LD_INT 0
25470: PPUSH
25471: PPUSH
25472: PPUSH
25473: PPUSH
25474: PPUSH
25475: PPUSH
// if not unit or not building then
25476: LD_VAR 0 1
25480: NOT
25481: PUSH
25482: LD_VAR 0 2
25486: NOT
25487: OR
25488: IFFALSE 25492
// exit ;
25490: GO 25650
// x := GetX ( building ) ;
25492: LD_ADDR_VAR 0 5
25496: PUSH
25497: LD_VAR 0 2
25501: PPUSH
25502: CALL_OW 250
25506: ST_TO_ADDR
// y := GetY ( building ) ;
25507: LD_ADDR_VAR 0 6
25511: PUSH
25512: LD_VAR 0 2
25516: PPUSH
25517: CALL_OW 251
25521: ST_TO_ADDR
// for i = 0 to 5 do
25522: LD_ADDR_VAR 0 4
25526: PUSH
25527: DOUBLE
25528: LD_INT 0
25530: DEC
25531: ST_TO_ADDR
25532: LD_INT 5
25534: PUSH
25535: FOR_TO
25536: IFFALSE 25648
// begin _x := ShiftX ( x , i , 3 ) ;
25538: LD_ADDR_VAR 0 7
25542: PUSH
25543: LD_VAR 0 5
25547: PPUSH
25548: LD_VAR 0 4
25552: PPUSH
25553: LD_INT 3
25555: PPUSH
25556: CALL_OW 272
25560: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
25561: LD_ADDR_VAR 0 8
25565: PUSH
25566: LD_VAR 0 6
25570: PPUSH
25571: LD_VAR 0 4
25575: PPUSH
25576: LD_INT 3
25578: PPUSH
25579: CALL_OW 273
25583: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25584: LD_VAR 0 7
25588: PPUSH
25589: LD_VAR 0 8
25593: PPUSH
25594: CALL_OW 488
25598: NOT
25599: IFFALSE 25603
// continue ;
25601: GO 25535
// if HexInfo ( _x , _y ) = 0 then
25603: LD_VAR 0 7
25607: PPUSH
25608: LD_VAR 0 8
25612: PPUSH
25613: CALL_OW 428
25617: PUSH
25618: LD_INT 0
25620: EQUAL
25621: IFFALSE 25646
// begin ComMoveXY ( unit , _x , _y ) ;
25623: LD_VAR 0 1
25627: PPUSH
25628: LD_VAR 0 7
25632: PPUSH
25633: LD_VAR 0 8
25637: PPUSH
25638: CALL_OW 111
// exit ;
25642: POP
25643: POP
25644: GO 25650
// end ; end ;
25646: GO 25535
25648: POP
25649: POP
// end ;
25650: LD_VAR 0 3
25654: RET
// export function ScanBase ( side , base_area ) ; begin
25655: LD_INT 0
25657: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
25658: LD_ADDR_VAR 0 3
25662: PUSH
25663: LD_VAR 0 2
25667: PPUSH
25668: LD_INT 81
25670: PUSH
25671: LD_VAR 0 1
25675: PUSH
25676: EMPTY
25677: LIST
25678: LIST
25679: PPUSH
25680: CALL_OW 70
25684: ST_TO_ADDR
// end ;
25685: LD_VAR 0 3
25689: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
25690: LD_INT 0
25692: PPUSH
25693: PPUSH
25694: PPUSH
25695: PPUSH
// result := false ;
25696: LD_ADDR_VAR 0 2
25700: PUSH
25701: LD_INT 0
25703: ST_TO_ADDR
// side := GetSide ( unit ) ;
25704: LD_ADDR_VAR 0 3
25708: PUSH
25709: LD_VAR 0 1
25713: PPUSH
25714: CALL_OW 255
25718: ST_TO_ADDR
// nat := GetNation ( unit ) ;
25719: LD_ADDR_VAR 0 4
25723: PUSH
25724: LD_VAR 0 1
25728: PPUSH
25729: CALL_OW 248
25733: ST_TO_ADDR
// case nat of 1 :
25734: LD_VAR 0 4
25738: PUSH
25739: LD_INT 1
25741: DOUBLE
25742: EQUAL
25743: IFTRUE 25747
25745: GO 25758
25747: POP
// tech := tech_lassight ; 2 :
25748: LD_ADDR_VAR 0 5
25752: PUSH
25753: LD_INT 12
25755: ST_TO_ADDR
25756: GO 25797
25758: LD_INT 2
25760: DOUBLE
25761: EQUAL
25762: IFTRUE 25766
25764: GO 25777
25766: POP
// tech := tech_mortar ; 3 :
25767: LD_ADDR_VAR 0 5
25771: PUSH
25772: LD_INT 41
25774: ST_TO_ADDR
25775: GO 25797
25777: LD_INT 3
25779: DOUBLE
25780: EQUAL
25781: IFTRUE 25785
25783: GO 25796
25785: POP
// tech := tech_bazooka ; end ;
25786: LD_ADDR_VAR 0 5
25790: PUSH
25791: LD_INT 44
25793: ST_TO_ADDR
25794: GO 25797
25796: POP
// if Researched ( side , tech ) then
25797: LD_VAR 0 3
25801: PPUSH
25802: LD_VAR 0 5
25806: PPUSH
25807: CALL_OW 325
25811: IFFALSE 25838
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
25813: LD_ADDR_VAR 0 2
25817: PUSH
25818: LD_INT 5
25820: PUSH
25821: LD_INT 8
25823: PUSH
25824: LD_INT 9
25826: PUSH
25827: EMPTY
25828: LIST
25829: LIST
25830: LIST
25831: PUSH
25832: LD_VAR 0 4
25836: ARRAY
25837: ST_TO_ADDR
// end ;
25838: LD_VAR 0 2
25842: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
25843: LD_INT 0
25845: PPUSH
25846: PPUSH
25847: PPUSH
// if not mines then
25848: LD_VAR 0 2
25852: NOT
25853: IFFALSE 25857
// exit ;
25855: GO 26001
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25857: LD_ADDR_VAR 0 5
25861: PUSH
25862: LD_INT 81
25864: PUSH
25865: LD_VAR 0 1
25869: PUSH
25870: EMPTY
25871: LIST
25872: LIST
25873: PUSH
25874: LD_INT 3
25876: PUSH
25877: LD_INT 21
25879: PUSH
25880: LD_INT 3
25882: PUSH
25883: EMPTY
25884: LIST
25885: LIST
25886: PUSH
25887: EMPTY
25888: LIST
25889: LIST
25890: PUSH
25891: EMPTY
25892: LIST
25893: LIST
25894: PPUSH
25895: CALL_OW 69
25899: ST_TO_ADDR
// for i in mines do
25900: LD_ADDR_VAR 0 4
25904: PUSH
25905: LD_VAR 0 2
25909: PUSH
25910: FOR_IN
25911: IFFALSE 25999
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
25913: LD_VAR 0 4
25917: PUSH
25918: LD_INT 1
25920: ARRAY
25921: PPUSH
25922: LD_VAR 0 4
25926: PUSH
25927: LD_INT 2
25929: ARRAY
25930: PPUSH
25931: CALL_OW 458
25935: NOT
25936: IFFALSE 25940
// continue ;
25938: GO 25910
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
25940: LD_VAR 0 4
25944: PUSH
25945: LD_INT 1
25947: ARRAY
25948: PPUSH
25949: LD_VAR 0 4
25953: PUSH
25954: LD_INT 2
25956: ARRAY
25957: PPUSH
25958: CALL_OW 428
25962: PUSH
25963: LD_VAR 0 5
25967: IN
25968: IFFALSE 25997
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
25970: LD_VAR 0 4
25974: PUSH
25975: LD_INT 1
25977: ARRAY
25978: PPUSH
25979: LD_VAR 0 4
25983: PUSH
25984: LD_INT 2
25986: ARRAY
25987: PPUSH
25988: LD_VAR 0 1
25992: PPUSH
25993: CALL_OW 456
// end ;
25997: GO 25910
25999: POP
26000: POP
// end ;
26001: LD_VAR 0 3
26005: RET
// export function Count ( array ) ; begin
26006: LD_INT 0
26008: PPUSH
// result := array + 0 ;
26009: LD_ADDR_VAR 0 2
26013: PUSH
26014: LD_VAR 0 1
26018: PUSH
26019: LD_INT 0
26021: PLUS
26022: ST_TO_ADDR
// end ;
26023: LD_VAR 0 2
26027: RET
// export function IsEmpty ( building ) ; begin
26028: LD_INT 0
26030: PPUSH
// if not building then
26031: LD_VAR 0 1
26035: NOT
26036: IFFALSE 26040
// exit ;
26038: GO 26083
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
26040: LD_ADDR_VAR 0 2
26044: PUSH
26045: LD_VAR 0 1
26049: PUSH
26050: LD_INT 22
26052: PUSH
26053: LD_VAR 0 1
26057: PPUSH
26058: CALL_OW 255
26062: PUSH
26063: EMPTY
26064: LIST
26065: LIST
26066: PUSH
26067: LD_INT 58
26069: PUSH
26070: EMPTY
26071: LIST
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: PPUSH
26077: CALL_OW 69
26081: IN
26082: ST_TO_ADDR
// end ;
26083: LD_VAR 0 2
26087: RET
// export function IsNotFull ( building ) ; var places ; begin
26088: LD_INT 0
26090: PPUSH
26091: PPUSH
// if not building then
26092: LD_VAR 0 1
26096: NOT
26097: IFFALSE 26101
// exit ;
26099: GO 26129
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
26101: LD_ADDR_VAR 0 2
26105: PUSH
26106: LD_VAR 0 1
26110: PPUSH
26111: LD_INT 3
26113: PUSH
26114: LD_INT 62
26116: PUSH
26117: EMPTY
26118: LIST
26119: PUSH
26120: EMPTY
26121: LIST
26122: LIST
26123: PPUSH
26124: CALL_OW 72
26128: ST_TO_ADDR
// end ;
26129: LD_VAR 0 2
26133: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
26134: LD_INT 0
26136: PPUSH
26137: PPUSH
26138: PPUSH
26139: PPUSH
// tmp := [ ] ;
26140: LD_ADDR_VAR 0 3
26144: PUSH
26145: EMPTY
26146: ST_TO_ADDR
// list := [ ] ;
26147: LD_ADDR_VAR 0 5
26151: PUSH
26152: EMPTY
26153: ST_TO_ADDR
// for i = 16 to 25 do
26154: LD_ADDR_VAR 0 4
26158: PUSH
26159: DOUBLE
26160: LD_INT 16
26162: DEC
26163: ST_TO_ADDR
26164: LD_INT 25
26166: PUSH
26167: FOR_TO
26168: IFFALSE 26241
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
26170: LD_ADDR_VAR 0 3
26174: PUSH
26175: LD_VAR 0 3
26179: PUSH
26180: LD_INT 22
26182: PUSH
26183: LD_VAR 0 1
26187: PPUSH
26188: CALL_OW 255
26192: PUSH
26193: EMPTY
26194: LIST
26195: LIST
26196: PUSH
26197: LD_INT 91
26199: PUSH
26200: LD_VAR 0 1
26204: PUSH
26205: LD_INT 6
26207: PUSH
26208: EMPTY
26209: LIST
26210: LIST
26211: LIST
26212: PUSH
26213: LD_INT 30
26215: PUSH
26216: LD_VAR 0 4
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: PUSH
26225: EMPTY
26226: LIST
26227: LIST
26228: LIST
26229: PUSH
26230: EMPTY
26231: LIST
26232: PPUSH
26233: CALL_OW 69
26237: ADD
26238: ST_TO_ADDR
26239: GO 26167
26241: POP
26242: POP
// for i = 1 to tmp do
26243: LD_ADDR_VAR 0 4
26247: PUSH
26248: DOUBLE
26249: LD_INT 1
26251: DEC
26252: ST_TO_ADDR
26253: LD_VAR 0 3
26257: PUSH
26258: FOR_TO
26259: IFFALSE 26347
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
26261: LD_ADDR_VAR 0 5
26265: PUSH
26266: LD_VAR 0 5
26270: PUSH
26271: LD_VAR 0 3
26275: PUSH
26276: LD_VAR 0 4
26280: ARRAY
26281: PPUSH
26282: CALL_OW 266
26286: PUSH
26287: LD_VAR 0 3
26291: PUSH
26292: LD_VAR 0 4
26296: ARRAY
26297: PPUSH
26298: CALL_OW 250
26302: PUSH
26303: LD_VAR 0 3
26307: PUSH
26308: LD_VAR 0 4
26312: ARRAY
26313: PPUSH
26314: CALL_OW 251
26318: PUSH
26319: LD_VAR 0 3
26323: PUSH
26324: LD_VAR 0 4
26328: ARRAY
26329: PPUSH
26330: CALL_OW 254
26334: PUSH
26335: EMPTY
26336: LIST
26337: LIST
26338: LIST
26339: LIST
26340: PUSH
26341: EMPTY
26342: LIST
26343: ADD
26344: ST_TO_ADDR
26345: GO 26258
26347: POP
26348: POP
// result := list ;
26349: LD_ADDR_VAR 0 2
26353: PUSH
26354: LD_VAR 0 5
26358: ST_TO_ADDR
// end ;
26359: LD_VAR 0 2
26363: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
26364: LD_INT 0
26366: PPUSH
26367: PPUSH
26368: PPUSH
26369: PPUSH
26370: PPUSH
26371: PPUSH
26372: PPUSH
// if not factory then
26373: LD_VAR 0 1
26377: NOT
26378: IFFALSE 26382
// exit ;
26380: GO 26975
// if control = control_apeman then
26382: LD_VAR 0 4
26386: PUSH
26387: LD_INT 5
26389: EQUAL
26390: IFFALSE 26499
// begin tmp := UnitsInside ( factory ) ;
26392: LD_ADDR_VAR 0 8
26396: PUSH
26397: LD_VAR 0 1
26401: PPUSH
26402: CALL_OW 313
26406: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26407: LD_VAR 0 8
26411: PPUSH
26412: LD_INT 25
26414: PUSH
26415: LD_INT 12
26417: PUSH
26418: EMPTY
26419: LIST
26420: LIST
26421: PPUSH
26422: CALL_OW 72
26426: NOT
26427: IFFALSE 26437
// control := control_manual ;
26429: LD_ADDR_VAR 0 4
26433: PUSH
26434: LD_INT 1
26436: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
26437: LD_ADDR_VAR 0 8
26441: PUSH
26442: LD_VAR 0 1
26446: PPUSH
26447: CALL 26134 0 1
26451: ST_TO_ADDR
// if tmp then
26452: LD_VAR 0 8
26456: IFFALSE 26499
// begin for i in tmp do
26458: LD_ADDR_VAR 0 7
26462: PUSH
26463: LD_VAR 0 8
26467: PUSH
26468: FOR_IN
26469: IFFALSE 26497
// if i [ 1 ] = b_ext_radio then
26471: LD_VAR 0 7
26475: PUSH
26476: LD_INT 1
26478: ARRAY
26479: PUSH
26480: LD_INT 22
26482: EQUAL
26483: IFFALSE 26495
// begin control := control_remote ;
26485: LD_ADDR_VAR 0 4
26489: PUSH
26490: LD_INT 2
26492: ST_TO_ADDR
// break ;
26493: GO 26497
// end ;
26495: GO 26468
26497: POP
26498: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26499: LD_VAR 0 1
26503: PPUSH
26504: LD_VAR 0 2
26508: PPUSH
26509: LD_VAR 0 3
26513: PPUSH
26514: LD_VAR 0 4
26518: PPUSH
26519: LD_VAR 0 5
26523: PPUSH
26524: CALL_OW 448
26528: IFFALSE 26563
// begin result := [ chassis , engine , control , weapon ] ;
26530: LD_ADDR_VAR 0 6
26534: PUSH
26535: LD_VAR 0 2
26539: PUSH
26540: LD_VAR 0 3
26544: PUSH
26545: LD_VAR 0 4
26549: PUSH
26550: LD_VAR 0 5
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: LIST
26559: LIST
26560: ST_TO_ADDR
// exit ;
26561: GO 26975
// end ; _chassis := AvailableChassisList ( factory ) ;
26563: LD_ADDR_VAR 0 9
26567: PUSH
26568: LD_VAR 0 1
26572: PPUSH
26573: CALL_OW 475
26577: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
26578: LD_ADDR_VAR 0 11
26582: PUSH
26583: LD_VAR 0 1
26587: PPUSH
26588: CALL_OW 476
26592: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
26593: LD_ADDR_VAR 0 12
26597: PUSH
26598: LD_VAR 0 1
26602: PPUSH
26603: CALL_OW 477
26607: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
26608: LD_ADDR_VAR 0 10
26612: PUSH
26613: LD_VAR 0 1
26617: PPUSH
26618: CALL_OW 478
26622: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
26623: LD_VAR 0 9
26627: NOT
26628: PUSH
26629: LD_VAR 0 11
26633: NOT
26634: OR
26635: PUSH
26636: LD_VAR 0 12
26640: NOT
26641: OR
26642: PUSH
26643: LD_VAR 0 10
26647: NOT
26648: OR
26649: IFFALSE 26684
// begin result := [ chassis , engine , control , weapon ] ;
26651: LD_ADDR_VAR 0 6
26655: PUSH
26656: LD_VAR 0 2
26660: PUSH
26661: LD_VAR 0 3
26665: PUSH
26666: LD_VAR 0 4
26670: PUSH
26671: LD_VAR 0 5
26675: PUSH
26676: EMPTY
26677: LIST
26678: LIST
26679: LIST
26680: LIST
26681: ST_TO_ADDR
// exit ;
26682: GO 26975
// end ; if not chassis in _chassis then
26684: LD_VAR 0 2
26688: PUSH
26689: LD_VAR 0 9
26693: IN
26694: NOT
26695: IFFALSE 26721
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
26697: LD_ADDR_VAR 0 2
26701: PUSH
26702: LD_VAR 0 9
26706: PUSH
26707: LD_INT 1
26709: PPUSH
26710: LD_VAR 0 9
26714: PPUSH
26715: CALL_OW 12
26719: ARRAY
26720: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
26721: LD_VAR 0 2
26725: PPUSH
26726: LD_VAR 0 3
26730: PPUSH
26731: CALL 26980 0 2
26735: NOT
26736: IFFALSE 26795
// repeat engine := _engine [ 1 ] ;
26738: LD_ADDR_VAR 0 3
26742: PUSH
26743: LD_VAR 0 11
26747: PUSH
26748: LD_INT 1
26750: ARRAY
26751: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
26752: LD_ADDR_VAR 0 11
26756: PUSH
26757: LD_VAR 0 11
26761: PPUSH
26762: LD_INT 1
26764: PPUSH
26765: CALL_OW 3
26769: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
26770: LD_VAR 0 2
26774: PPUSH
26775: LD_VAR 0 3
26779: PPUSH
26780: CALL 26980 0 2
26784: PUSH
26785: LD_VAR 0 11
26789: PUSH
26790: EMPTY
26791: EQUAL
26792: OR
26793: IFFALSE 26738
// if not control in _control then
26795: LD_VAR 0 4
26799: PUSH
26800: LD_VAR 0 12
26804: IN
26805: NOT
26806: IFFALSE 26832
// control := _control [ rand ( 1 , _control ) ] ;
26808: LD_ADDR_VAR 0 4
26812: PUSH
26813: LD_VAR 0 12
26817: PUSH
26818: LD_INT 1
26820: PPUSH
26821: LD_VAR 0 12
26825: PPUSH
26826: CALL_OW 12
26830: ARRAY
26831: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
26832: LD_VAR 0 2
26836: PPUSH
26837: LD_VAR 0 5
26841: PPUSH
26842: CALL 27200 0 2
26846: NOT
26847: IFFALSE 26906
// repeat weapon := _weapon [ 1 ] ;
26849: LD_ADDR_VAR 0 5
26853: PUSH
26854: LD_VAR 0 10
26858: PUSH
26859: LD_INT 1
26861: ARRAY
26862: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
26863: LD_ADDR_VAR 0 10
26867: PUSH
26868: LD_VAR 0 10
26872: PPUSH
26873: LD_INT 1
26875: PPUSH
26876: CALL_OW 3
26880: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
26881: LD_VAR 0 2
26885: PPUSH
26886: LD_VAR 0 5
26890: PPUSH
26891: CALL 27200 0 2
26895: PUSH
26896: LD_VAR 0 10
26900: PUSH
26901: EMPTY
26902: EQUAL
26903: OR
26904: IFFALSE 26849
// result := [ ] ;
26906: LD_ADDR_VAR 0 6
26910: PUSH
26911: EMPTY
26912: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26913: LD_VAR 0 1
26917: PPUSH
26918: LD_VAR 0 2
26922: PPUSH
26923: LD_VAR 0 3
26927: PPUSH
26928: LD_VAR 0 4
26932: PPUSH
26933: LD_VAR 0 5
26937: PPUSH
26938: CALL_OW 448
26942: IFFALSE 26975
// result := [ chassis , engine , control , weapon ] ;
26944: LD_ADDR_VAR 0 6
26948: PUSH
26949: LD_VAR 0 2
26953: PUSH
26954: LD_VAR 0 3
26958: PUSH
26959: LD_VAR 0 4
26963: PUSH
26964: LD_VAR 0 5
26968: PUSH
26969: EMPTY
26970: LIST
26971: LIST
26972: LIST
26973: LIST
26974: ST_TO_ADDR
// end ;
26975: LD_VAR 0 6
26979: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
26980: LD_INT 0
26982: PPUSH
// if not chassis or not engine then
26983: LD_VAR 0 1
26987: NOT
26988: PUSH
26989: LD_VAR 0 2
26993: NOT
26994: OR
26995: IFFALSE 26999
// exit ;
26997: GO 27195
// case engine of engine_solar :
26999: LD_VAR 0 2
27003: PUSH
27004: LD_INT 2
27006: DOUBLE
27007: EQUAL
27008: IFTRUE 27012
27010: GO 27050
27012: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
27013: LD_ADDR_VAR 0 3
27017: PUSH
27018: LD_INT 11
27020: PUSH
27021: LD_INT 12
27023: PUSH
27024: LD_INT 13
27026: PUSH
27027: LD_INT 14
27029: PUSH
27030: LD_INT 1
27032: PUSH
27033: LD_INT 2
27035: PUSH
27036: LD_INT 3
27038: PUSH
27039: EMPTY
27040: LIST
27041: LIST
27042: LIST
27043: LIST
27044: LIST
27045: LIST
27046: LIST
27047: ST_TO_ADDR
27048: GO 27179
27050: LD_INT 1
27052: DOUBLE
27053: EQUAL
27054: IFTRUE 27058
27056: GO 27120
27058: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
27059: LD_ADDR_VAR 0 3
27063: PUSH
27064: LD_INT 11
27066: PUSH
27067: LD_INT 12
27069: PUSH
27070: LD_INT 13
27072: PUSH
27073: LD_INT 14
27075: PUSH
27076: LD_INT 1
27078: PUSH
27079: LD_INT 2
27081: PUSH
27082: LD_INT 3
27084: PUSH
27085: LD_INT 4
27087: PUSH
27088: LD_INT 5
27090: PUSH
27091: LD_INT 21
27093: PUSH
27094: LD_INT 23
27096: PUSH
27097: LD_INT 22
27099: PUSH
27100: LD_INT 24
27102: PUSH
27103: EMPTY
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: LIST
27110: LIST
27111: LIST
27112: LIST
27113: LIST
27114: LIST
27115: LIST
27116: LIST
27117: ST_TO_ADDR
27118: GO 27179
27120: LD_INT 3
27122: DOUBLE
27123: EQUAL
27124: IFTRUE 27128
27126: GO 27178
27128: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27129: LD_ADDR_VAR 0 3
27133: PUSH
27134: LD_INT 13
27136: PUSH
27137: LD_INT 14
27139: PUSH
27140: LD_INT 2
27142: PUSH
27143: LD_INT 3
27145: PUSH
27146: LD_INT 4
27148: PUSH
27149: LD_INT 5
27151: PUSH
27152: LD_INT 21
27154: PUSH
27155: LD_INT 22
27157: PUSH
27158: LD_INT 23
27160: PUSH
27161: LD_INT 24
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: LIST
27171: LIST
27172: LIST
27173: LIST
27174: LIST
27175: ST_TO_ADDR
27176: GO 27179
27178: POP
// result := ( chassis in result ) ;
27179: LD_ADDR_VAR 0 3
27183: PUSH
27184: LD_VAR 0 1
27188: PUSH
27189: LD_VAR 0 3
27193: IN
27194: ST_TO_ADDR
// end ;
27195: LD_VAR 0 3
27199: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
27200: LD_INT 0
27202: PPUSH
// if not chassis or not weapon then
27203: LD_VAR 0 1
27207: NOT
27208: PUSH
27209: LD_VAR 0 2
27213: NOT
27214: OR
27215: IFFALSE 27219
// exit ;
27217: GO 28279
// case weapon of us_machine_gun :
27219: LD_VAR 0 2
27223: PUSH
27224: LD_INT 2
27226: DOUBLE
27227: EQUAL
27228: IFTRUE 27232
27230: GO 27262
27232: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
27233: LD_ADDR_VAR 0 3
27237: PUSH
27238: LD_INT 1
27240: PUSH
27241: LD_INT 2
27243: PUSH
27244: LD_INT 3
27246: PUSH
27247: LD_INT 4
27249: PUSH
27250: LD_INT 5
27252: PUSH
27253: EMPTY
27254: LIST
27255: LIST
27256: LIST
27257: LIST
27258: LIST
27259: ST_TO_ADDR
27260: GO 28263
27262: LD_INT 3
27264: DOUBLE
27265: EQUAL
27266: IFTRUE 27270
27268: GO 27300
27270: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
27271: LD_ADDR_VAR 0 3
27275: PUSH
27276: LD_INT 1
27278: PUSH
27279: LD_INT 2
27281: PUSH
27282: LD_INT 3
27284: PUSH
27285: LD_INT 4
27287: PUSH
27288: LD_INT 5
27290: PUSH
27291: EMPTY
27292: LIST
27293: LIST
27294: LIST
27295: LIST
27296: LIST
27297: ST_TO_ADDR
27298: GO 28263
27300: LD_INT 11
27302: DOUBLE
27303: EQUAL
27304: IFTRUE 27308
27306: GO 27338
27308: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27309: LD_ADDR_VAR 0 3
27313: PUSH
27314: LD_INT 1
27316: PUSH
27317: LD_INT 2
27319: PUSH
27320: LD_INT 3
27322: PUSH
27323: LD_INT 4
27325: PUSH
27326: LD_INT 5
27328: PUSH
27329: EMPTY
27330: LIST
27331: LIST
27332: LIST
27333: LIST
27334: LIST
27335: ST_TO_ADDR
27336: GO 28263
27338: LD_INT 4
27340: DOUBLE
27341: EQUAL
27342: IFTRUE 27346
27344: GO 27372
27346: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
27347: LD_ADDR_VAR 0 3
27351: PUSH
27352: LD_INT 2
27354: PUSH
27355: LD_INT 3
27357: PUSH
27358: LD_INT 4
27360: PUSH
27361: LD_INT 5
27363: PUSH
27364: EMPTY
27365: LIST
27366: LIST
27367: LIST
27368: LIST
27369: ST_TO_ADDR
27370: GO 28263
27372: LD_INT 5
27374: DOUBLE
27375: EQUAL
27376: IFTRUE 27380
27378: GO 27406
27380: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27381: LD_ADDR_VAR 0 3
27385: PUSH
27386: LD_INT 2
27388: PUSH
27389: LD_INT 3
27391: PUSH
27392: LD_INT 4
27394: PUSH
27395: LD_INT 5
27397: PUSH
27398: EMPTY
27399: LIST
27400: LIST
27401: LIST
27402: LIST
27403: ST_TO_ADDR
27404: GO 28263
27406: LD_INT 9
27408: DOUBLE
27409: EQUAL
27410: IFTRUE 27414
27412: GO 27440
27414: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
27415: LD_ADDR_VAR 0 3
27419: PUSH
27420: LD_INT 2
27422: PUSH
27423: LD_INT 3
27425: PUSH
27426: LD_INT 4
27428: PUSH
27429: LD_INT 5
27431: PUSH
27432: EMPTY
27433: LIST
27434: LIST
27435: LIST
27436: LIST
27437: ST_TO_ADDR
27438: GO 28263
27440: LD_INT 7
27442: DOUBLE
27443: EQUAL
27444: IFTRUE 27448
27446: GO 27474
27448: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
27449: LD_ADDR_VAR 0 3
27453: PUSH
27454: LD_INT 2
27456: PUSH
27457: LD_INT 3
27459: PUSH
27460: LD_INT 4
27462: PUSH
27463: LD_INT 5
27465: PUSH
27466: EMPTY
27467: LIST
27468: LIST
27469: LIST
27470: LIST
27471: ST_TO_ADDR
27472: GO 28263
27474: LD_INT 12
27476: DOUBLE
27477: EQUAL
27478: IFTRUE 27482
27480: GO 27508
27482: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
27483: LD_ADDR_VAR 0 3
27487: PUSH
27488: LD_INT 2
27490: PUSH
27491: LD_INT 3
27493: PUSH
27494: LD_INT 4
27496: PUSH
27497: LD_INT 5
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: LIST
27504: LIST
27505: ST_TO_ADDR
27506: GO 28263
27508: LD_INT 13
27510: DOUBLE
27511: EQUAL
27512: IFTRUE 27516
27514: GO 27542
27516: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
27517: LD_ADDR_VAR 0 3
27521: PUSH
27522: LD_INT 2
27524: PUSH
27525: LD_INT 3
27527: PUSH
27528: LD_INT 4
27530: PUSH
27531: LD_INT 5
27533: PUSH
27534: EMPTY
27535: LIST
27536: LIST
27537: LIST
27538: LIST
27539: ST_TO_ADDR
27540: GO 28263
27542: LD_INT 14
27544: DOUBLE
27545: EQUAL
27546: IFTRUE 27550
27548: GO 27568
27550: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
27551: LD_ADDR_VAR 0 3
27555: PUSH
27556: LD_INT 4
27558: PUSH
27559: LD_INT 5
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: ST_TO_ADDR
27566: GO 28263
27568: LD_INT 6
27570: DOUBLE
27571: EQUAL
27572: IFTRUE 27576
27574: GO 27594
27576: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
27577: LD_ADDR_VAR 0 3
27581: PUSH
27582: LD_INT 4
27584: PUSH
27585: LD_INT 5
27587: PUSH
27588: EMPTY
27589: LIST
27590: LIST
27591: ST_TO_ADDR
27592: GO 28263
27594: LD_INT 10
27596: DOUBLE
27597: EQUAL
27598: IFTRUE 27602
27600: GO 27620
27602: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
27603: LD_ADDR_VAR 0 3
27607: PUSH
27608: LD_INT 4
27610: PUSH
27611: LD_INT 5
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: ST_TO_ADDR
27618: GO 28263
27620: LD_INT 22
27622: DOUBLE
27623: EQUAL
27624: IFTRUE 27628
27626: GO 27654
27628: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
27629: LD_ADDR_VAR 0 3
27633: PUSH
27634: LD_INT 11
27636: PUSH
27637: LD_INT 12
27639: PUSH
27640: LD_INT 13
27642: PUSH
27643: LD_INT 14
27645: PUSH
27646: EMPTY
27647: LIST
27648: LIST
27649: LIST
27650: LIST
27651: ST_TO_ADDR
27652: GO 28263
27654: LD_INT 23
27656: DOUBLE
27657: EQUAL
27658: IFTRUE 27662
27660: GO 27688
27662: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
27663: LD_ADDR_VAR 0 3
27667: PUSH
27668: LD_INT 11
27670: PUSH
27671: LD_INT 12
27673: PUSH
27674: LD_INT 13
27676: PUSH
27677: LD_INT 14
27679: PUSH
27680: EMPTY
27681: LIST
27682: LIST
27683: LIST
27684: LIST
27685: ST_TO_ADDR
27686: GO 28263
27688: LD_INT 24
27690: DOUBLE
27691: EQUAL
27692: IFTRUE 27696
27694: GO 27722
27696: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
27697: LD_ADDR_VAR 0 3
27701: PUSH
27702: LD_INT 11
27704: PUSH
27705: LD_INT 12
27707: PUSH
27708: LD_INT 13
27710: PUSH
27711: LD_INT 14
27713: PUSH
27714: EMPTY
27715: LIST
27716: LIST
27717: LIST
27718: LIST
27719: ST_TO_ADDR
27720: GO 28263
27722: LD_INT 30
27724: DOUBLE
27725: EQUAL
27726: IFTRUE 27730
27728: GO 27756
27730: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
27731: LD_ADDR_VAR 0 3
27735: PUSH
27736: LD_INT 11
27738: PUSH
27739: LD_INT 12
27741: PUSH
27742: LD_INT 13
27744: PUSH
27745: LD_INT 14
27747: PUSH
27748: EMPTY
27749: LIST
27750: LIST
27751: LIST
27752: LIST
27753: ST_TO_ADDR
27754: GO 28263
27756: LD_INT 25
27758: DOUBLE
27759: EQUAL
27760: IFTRUE 27764
27762: GO 27782
27764: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
27765: LD_ADDR_VAR 0 3
27769: PUSH
27770: LD_INT 13
27772: PUSH
27773: LD_INT 14
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: ST_TO_ADDR
27780: GO 28263
27782: LD_INT 27
27784: DOUBLE
27785: EQUAL
27786: IFTRUE 27790
27788: GO 27808
27790: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
27791: LD_ADDR_VAR 0 3
27795: PUSH
27796: LD_INT 13
27798: PUSH
27799: LD_INT 14
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: ST_TO_ADDR
27806: GO 28263
27808: LD_INT 92
27810: DOUBLE
27811: EQUAL
27812: IFTRUE 27816
27814: GO 27842
27816: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
27817: LD_ADDR_VAR 0 3
27821: PUSH
27822: LD_INT 11
27824: PUSH
27825: LD_INT 12
27827: PUSH
27828: LD_INT 13
27830: PUSH
27831: LD_INT 14
27833: PUSH
27834: EMPTY
27835: LIST
27836: LIST
27837: LIST
27838: LIST
27839: ST_TO_ADDR
27840: GO 28263
27842: LD_INT 28
27844: DOUBLE
27845: EQUAL
27846: IFTRUE 27850
27848: GO 27868
27850: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
27851: LD_ADDR_VAR 0 3
27855: PUSH
27856: LD_INT 13
27858: PUSH
27859: LD_INT 14
27861: PUSH
27862: EMPTY
27863: LIST
27864: LIST
27865: ST_TO_ADDR
27866: GO 28263
27868: LD_INT 29
27870: DOUBLE
27871: EQUAL
27872: IFTRUE 27876
27874: GO 27894
27876: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
27877: LD_ADDR_VAR 0 3
27881: PUSH
27882: LD_INT 13
27884: PUSH
27885: LD_INT 14
27887: PUSH
27888: EMPTY
27889: LIST
27890: LIST
27891: ST_TO_ADDR
27892: GO 28263
27894: LD_INT 31
27896: DOUBLE
27897: EQUAL
27898: IFTRUE 27902
27900: GO 27920
27902: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
27903: LD_ADDR_VAR 0 3
27907: PUSH
27908: LD_INT 13
27910: PUSH
27911: LD_INT 14
27913: PUSH
27914: EMPTY
27915: LIST
27916: LIST
27917: ST_TO_ADDR
27918: GO 28263
27920: LD_INT 26
27922: DOUBLE
27923: EQUAL
27924: IFTRUE 27928
27926: GO 27946
27928: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
27929: LD_ADDR_VAR 0 3
27933: PUSH
27934: LD_INT 13
27936: PUSH
27937: LD_INT 14
27939: PUSH
27940: EMPTY
27941: LIST
27942: LIST
27943: ST_TO_ADDR
27944: GO 28263
27946: LD_INT 42
27948: DOUBLE
27949: EQUAL
27950: IFTRUE 27954
27952: GO 27980
27954: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
27955: LD_ADDR_VAR 0 3
27959: PUSH
27960: LD_INT 21
27962: PUSH
27963: LD_INT 22
27965: PUSH
27966: LD_INT 23
27968: PUSH
27969: LD_INT 24
27971: PUSH
27972: EMPTY
27973: LIST
27974: LIST
27975: LIST
27976: LIST
27977: ST_TO_ADDR
27978: GO 28263
27980: LD_INT 43
27982: DOUBLE
27983: EQUAL
27984: IFTRUE 27988
27986: GO 28014
27988: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
27989: LD_ADDR_VAR 0 3
27993: PUSH
27994: LD_INT 21
27996: PUSH
27997: LD_INT 22
27999: PUSH
28000: LD_INT 23
28002: PUSH
28003: LD_INT 24
28005: PUSH
28006: EMPTY
28007: LIST
28008: LIST
28009: LIST
28010: LIST
28011: ST_TO_ADDR
28012: GO 28263
28014: LD_INT 44
28016: DOUBLE
28017: EQUAL
28018: IFTRUE 28022
28020: GO 28048
28022: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
28023: LD_ADDR_VAR 0 3
28027: PUSH
28028: LD_INT 21
28030: PUSH
28031: LD_INT 22
28033: PUSH
28034: LD_INT 23
28036: PUSH
28037: LD_INT 24
28039: PUSH
28040: EMPTY
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: ST_TO_ADDR
28046: GO 28263
28048: LD_INT 45
28050: DOUBLE
28051: EQUAL
28052: IFTRUE 28056
28054: GO 28082
28056: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
28057: LD_ADDR_VAR 0 3
28061: PUSH
28062: LD_INT 21
28064: PUSH
28065: LD_INT 22
28067: PUSH
28068: LD_INT 23
28070: PUSH
28071: LD_INT 24
28073: PUSH
28074: EMPTY
28075: LIST
28076: LIST
28077: LIST
28078: LIST
28079: ST_TO_ADDR
28080: GO 28263
28082: LD_INT 49
28084: DOUBLE
28085: EQUAL
28086: IFTRUE 28090
28088: GO 28116
28090: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
28091: LD_ADDR_VAR 0 3
28095: PUSH
28096: LD_INT 21
28098: PUSH
28099: LD_INT 22
28101: PUSH
28102: LD_INT 23
28104: PUSH
28105: LD_INT 24
28107: PUSH
28108: EMPTY
28109: LIST
28110: LIST
28111: LIST
28112: LIST
28113: ST_TO_ADDR
28114: GO 28263
28116: LD_INT 51
28118: DOUBLE
28119: EQUAL
28120: IFTRUE 28124
28122: GO 28150
28124: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
28125: LD_ADDR_VAR 0 3
28129: PUSH
28130: LD_INT 21
28132: PUSH
28133: LD_INT 22
28135: PUSH
28136: LD_INT 23
28138: PUSH
28139: LD_INT 24
28141: PUSH
28142: EMPTY
28143: LIST
28144: LIST
28145: LIST
28146: LIST
28147: ST_TO_ADDR
28148: GO 28263
28150: LD_INT 52
28152: DOUBLE
28153: EQUAL
28154: IFTRUE 28158
28156: GO 28184
28158: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
28159: LD_ADDR_VAR 0 3
28163: PUSH
28164: LD_INT 21
28166: PUSH
28167: LD_INT 22
28169: PUSH
28170: LD_INT 23
28172: PUSH
28173: LD_INT 24
28175: PUSH
28176: EMPTY
28177: LIST
28178: LIST
28179: LIST
28180: LIST
28181: ST_TO_ADDR
28182: GO 28263
28184: LD_INT 53
28186: DOUBLE
28187: EQUAL
28188: IFTRUE 28192
28190: GO 28210
28192: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
28193: LD_ADDR_VAR 0 3
28197: PUSH
28198: LD_INT 23
28200: PUSH
28201: LD_INT 24
28203: PUSH
28204: EMPTY
28205: LIST
28206: LIST
28207: ST_TO_ADDR
28208: GO 28263
28210: LD_INT 46
28212: DOUBLE
28213: EQUAL
28214: IFTRUE 28218
28216: GO 28236
28218: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
28219: LD_ADDR_VAR 0 3
28223: PUSH
28224: LD_INT 23
28226: PUSH
28227: LD_INT 24
28229: PUSH
28230: EMPTY
28231: LIST
28232: LIST
28233: ST_TO_ADDR
28234: GO 28263
28236: LD_INT 47
28238: DOUBLE
28239: EQUAL
28240: IFTRUE 28244
28242: GO 28262
28244: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
28245: LD_ADDR_VAR 0 3
28249: PUSH
28250: LD_INT 23
28252: PUSH
28253: LD_INT 24
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: ST_TO_ADDR
28260: GO 28263
28262: POP
// result := ( chassis in result ) ;
28263: LD_ADDR_VAR 0 3
28267: PUSH
28268: LD_VAR 0 1
28272: PUSH
28273: LD_VAR 0 3
28277: IN
28278: ST_TO_ADDR
// end ;
28279: LD_VAR 0 3
28283: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28284: LD_INT 0
28286: PPUSH
28287: PPUSH
28288: PPUSH
28289: PPUSH
28290: PPUSH
28291: PPUSH
28292: PPUSH
// result := array ;
28293: LD_ADDR_VAR 0 5
28297: PUSH
28298: LD_VAR 0 1
28302: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28303: LD_VAR 0 1
28307: NOT
28308: PUSH
28309: LD_VAR 0 2
28313: NOT
28314: OR
28315: PUSH
28316: LD_VAR 0 3
28320: NOT
28321: OR
28322: PUSH
28323: LD_VAR 0 2
28327: PUSH
28328: LD_VAR 0 1
28332: GREATER
28333: OR
28334: PUSH
28335: LD_VAR 0 3
28339: PUSH
28340: LD_VAR 0 1
28344: GREATER
28345: OR
28346: IFFALSE 28350
// exit ;
28348: GO 28646
// if direction then
28350: LD_VAR 0 4
28354: IFFALSE 28418
// begin d := 1 ;
28356: LD_ADDR_VAR 0 9
28360: PUSH
28361: LD_INT 1
28363: ST_TO_ADDR
// if i_from > i_to then
28364: LD_VAR 0 2
28368: PUSH
28369: LD_VAR 0 3
28373: GREATER
28374: IFFALSE 28400
// length := ( array - i_from ) + i_to else
28376: LD_ADDR_VAR 0 11
28380: PUSH
28381: LD_VAR 0 1
28385: PUSH
28386: LD_VAR 0 2
28390: MINUS
28391: PUSH
28392: LD_VAR 0 3
28396: PLUS
28397: ST_TO_ADDR
28398: GO 28416
// length := i_to - i_from ;
28400: LD_ADDR_VAR 0 11
28404: PUSH
28405: LD_VAR 0 3
28409: PUSH
28410: LD_VAR 0 2
28414: MINUS
28415: ST_TO_ADDR
// end else
28416: GO 28479
// begin d := - 1 ;
28418: LD_ADDR_VAR 0 9
28422: PUSH
28423: LD_INT 1
28425: NEG
28426: ST_TO_ADDR
// if i_from > i_to then
28427: LD_VAR 0 2
28431: PUSH
28432: LD_VAR 0 3
28436: GREATER
28437: IFFALSE 28457
// length := i_from - i_to else
28439: LD_ADDR_VAR 0 11
28443: PUSH
28444: LD_VAR 0 2
28448: PUSH
28449: LD_VAR 0 3
28453: MINUS
28454: ST_TO_ADDR
28455: GO 28479
// length := ( array - i_to ) + i_from ;
28457: LD_ADDR_VAR 0 11
28461: PUSH
28462: LD_VAR 0 1
28466: PUSH
28467: LD_VAR 0 3
28471: MINUS
28472: PUSH
28473: LD_VAR 0 2
28477: PLUS
28478: ST_TO_ADDR
// end ; if not length then
28479: LD_VAR 0 11
28483: NOT
28484: IFFALSE 28488
// exit ;
28486: GO 28646
// tmp := array ;
28488: LD_ADDR_VAR 0 10
28492: PUSH
28493: LD_VAR 0 1
28497: ST_TO_ADDR
// for i = 1 to length do
28498: LD_ADDR_VAR 0 6
28502: PUSH
28503: DOUBLE
28504: LD_INT 1
28506: DEC
28507: ST_TO_ADDR
28508: LD_VAR 0 11
28512: PUSH
28513: FOR_TO
28514: IFFALSE 28634
// begin for j = 1 to array do
28516: LD_ADDR_VAR 0 7
28520: PUSH
28521: DOUBLE
28522: LD_INT 1
28524: DEC
28525: ST_TO_ADDR
28526: LD_VAR 0 1
28530: PUSH
28531: FOR_TO
28532: IFFALSE 28620
// begin k := j + d ;
28534: LD_ADDR_VAR 0 8
28538: PUSH
28539: LD_VAR 0 7
28543: PUSH
28544: LD_VAR 0 9
28548: PLUS
28549: ST_TO_ADDR
// if k > array then
28550: LD_VAR 0 8
28554: PUSH
28555: LD_VAR 0 1
28559: GREATER
28560: IFFALSE 28570
// k := 1 ;
28562: LD_ADDR_VAR 0 8
28566: PUSH
28567: LD_INT 1
28569: ST_TO_ADDR
// if not k then
28570: LD_VAR 0 8
28574: NOT
28575: IFFALSE 28587
// k := array ;
28577: LD_ADDR_VAR 0 8
28581: PUSH
28582: LD_VAR 0 1
28586: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
28587: LD_ADDR_VAR 0 10
28591: PUSH
28592: LD_VAR 0 10
28596: PPUSH
28597: LD_VAR 0 8
28601: PPUSH
28602: LD_VAR 0 1
28606: PUSH
28607: LD_VAR 0 7
28611: ARRAY
28612: PPUSH
28613: CALL_OW 1
28617: ST_TO_ADDR
// end ;
28618: GO 28531
28620: POP
28621: POP
// array := tmp ;
28622: LD_ADDR_VAR 0 1
28626: PUSH
28627: LD_VAR 0 10
28631: ST_TO_ADDR
// end ;
28632: GO 28513
28634: POP
28635: POP
// result := array ;
28636: LD_ADDR_VAR 0 5
28640: PUSH
28641: LD_VAR 0 1
28645: ST_TO_ADDR
// end ;
28646: LD_VAR 0 5
28650: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
28651: LD_INT 0
28653: PPUSH
28654: PPUSH
// result := 0 ;
28655: LD_ADDR_VAR 0 3
28659: PUSH
28660: LD_INT 0
28662: ST_TO_ADDR
// if not array or not value in array then
28663: LD_VAR 0 1
28667: NOT
28668: PUSH
28669: LD_VAR 0 2
28673: PUSH
28674: LD_VAR 0 1
28678: IN
28679: NOT
28680: OR
28681: IFFALSE 28685
// exit ;
28683: GO 28739
// for i = 1 to array do
28685: LD_ADDR_VAR 0 4
28689: PUSH
28690: DOUBLE
28691: LD_INT 1
28693: DEC
28694: ST_TO_ADDR
28695: LD_VAR 0 1
28699: PUSH
28700: FOR_TO
28701: IFFALSE 28737
// if value = array [ i ] then
28703: LD_VAR 0 2
28707: PUSH
28708: LD_VAR 0 1
28712: PUSH
28713: LD_VAR 0 4
28717: ARRAY
28718: EQUAL
28719: IFFALSE 28735
// begin result := i ;
28721: LD_ADDR_VAR 0 3
28725: PUSH
28726: LD_VAR 0 4
28730: ST_TO_ADDR
// exit ;
28731: POP
28732: POP
28733: GO 28739
// end ;
28735: GO 28700
28737: POP
28738: POP
// end ;
28739: LD_VAR 0 3
28743: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
28744: LD_INT 0
28746: PPUSH
// vc_chassis := chassis ;
28747: LD_ADDR_OWVAR 37
28751: PUSH
28752: LD_VAR 0 1
28756: ST_TO_ADDR
// vc_engine := engine ;
28757: LD_ADDR_OWVAR 39
28761: PUSH
28762: LD_VAR 0 2
28766: ST_TO_ADDR
// vc_control := control ;
28767: LD_ADDR_OWVAR 38
28771: PUSH
28772: LD_VAR 0 3
28776: ST_TO_ADDR
// vc_weapon := weapon ;
28777: LD_ADDR_OWVAR 40
28781: PUSH
28782: LD_VAR 0 4
28786: ST_TO_ADDR
// vc_fuel_battery := fuel ;
28787: LD_ADDR_OWVAR 41
28791: PUSH
28792: LD_VAR 0 5
28796: ST_TO_ADDR
// end ;
28797: LD_VAR 0 6
28801: RET
// export function WantPlant ( unit ) ; var task ; begin
28802: LD_INT 0
28804: PPUSH
28805: PPUSH
// result := false ;
28806: LD_ADDR_VAR 0 2
28810: PUSH
28811: LD_INT 0
28813: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
28814: LD_ADDR_VAR 0 3
28818: PUSH
28819: LD_VAR 0 1
28823: PPUSH
28824: CALL_OW 437
28828: ST_TO_ADDR
// if task then
28829: LD_VAR 0 3
28833: IFFALSE 28861
// if task [ 1 ] [ 1 ] = p then
28835: LD_VAR 0 3
28839: PUSH
28840: LD_INT 1
28842: ARRAY
28843: PUSH
28844: LD_INT 1
28846: ARRAY
28847: PUSH
28848: LD_STRING p
28850: EQUAL
28851: IFFALSE 28861
// result := true ;
28853: LD_ADDR_VAR 0 2
28857: PUSH
28858: LD_INT 1
28860: ST_TO_ADDR
// end ;
28861: LD_VAR 0 2
28865: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
28866: LD_INT 0
28868: PPUSH
28869: PPUSH
28870: PPUSH
28871: PPUSH
// if pos < 1 then
28872: LD_VAR 0 2
28876: PUSH
28877: LD_INT 1
28879: LESS
28880: IFFALSE 28884
// exit ;
28882: GO 29187
// if pos = 1 then
28884: LD_VAR 0 2
28888: PUSH
28889: LD_INT 1
28891: EQUAL
28892: IFFALSE 28925
// result := Replace ( arr , pos [ 1 ] , value ) else
28894: LD_ADDR_VAR 0 4
28898: PUSH
28899: LD_VAR 0 1
28903: PPUSH
28904: LD_VAR 0 2
28908: PUSH
28909: LD_INT 1
28911: ARRAY
28912: PPUSH
28913: LD_VAR 0 3
28917: PPUSH
28918: CALL_OW 1
28922: ST_TO_ADDR
28923: GO 29187
// begin tmp := arr ;
28925: LD_ADDR_VAR 0 6
28929: PUSH
28930: LD_VAR 0 1
28934: ST_TO_ADDR
// s_arr := [ tmp ] ;
28935: LD_ADDR_VAR 0 7
28939: PUSH
28940: LD_VAR 0 6
28944: PUSH
28945: EMPTY
28946: LIST
28947: ST_TO_ADDR
// for i = 1 to pos - 1 do
28948: LD_ADDR_VAR 0 5
28952: PUSH
28953: DOUBLE
28954: LD_INT 1
28956: DEC
28957: ST_TO_ADDR
28958: LD_VAR 0 2
28962: PUSH
28963: LD_INT 1
28965: MINUS
28966: PUSH
28967: FOR_TO
28968: IFFALSE 29013
// begin tmp := tmp [ pos [ i ] ] ;
28970: LD_ADDR_VAR 0 6
28974: PUSH
28975: LD_VAR 0 6
28979: PUSH
28980: LD_VAR 0 2
28984: PUSH
28985: LD_VAR 0 5
28989: ARRAY
28990: ARRAY
28991: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
28992: LD_ADDR_VAR 0 7
28996: PUSH
28997: LD_VAR 0 7
29001: PUSH
29002: LD_VAR 0 6
29006: PUSH
29007: EMPTY
29008: LIST
29009: ADD
29010: ST_TO_ADDR
// end ;
29011: GO 28967
29013: POP
29014: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
29015: LD_ADDR_VAR 0 6
29019: PUSH
29020: LD_VAR 0 6
29024: PPUSH
29025: LD_VAR 0 2
29029: PUSH
29030: LD_VAR 0 2
29034: ARRAY
29035: PPUSH
29036: LD_VAR 0 3
29040: PPUSH
29041: CALL_OW 1
29045: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
29046: LD_ADDR_VAR 0 7
29050: PUSH
29051: LD_VAR 0 7
29055: PPUSH
29056: LD_VAR 0 7
29060: PPUSH
29061: LD_VAR 0 6
29065: PPUSH
29066: CALL_OW 1
29070: ST_TO_ADDR
// for i = s_arr downto 2 do
29071: LD_ADDR_VAR 0 5
29075: PUSH
29076: DOUBLE
29077: LD_VAR 0 7
29081: INC
29082: ST_TO_ADDR
29083: LD_INT 2
29085: PUSH
29086: FOR_DOWNTO
29087: IFFALSE 29171
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
29089: LD_ADDR_VAR 0 6
29093: PUSH
29094: LD_VAR 0 7
29098: PUSH
29099: LD_VAR 0 5
29103: PUSH
29104: LD_INT 1
29106: MINUS
29107: ARRAY
29108: PPUSH
29109: LD_VAR 0 2
29113: PUSH
29114: LD_VAR 0 5
29118: PUSH
29119: LD_INT 1
29121: MINUS
29122: ARRAY
29123: PPUSH
29124: LD_VAR 0 7
29128: PUSH
29129: LD_VAR 0 5
29133: ARRAY
29134: PPUSH
29135: CALL_OW 1
29139: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
29140: LD_ADDR_VAR 0 7
29144: PUSH
29145: LD_VAR 0 7
29149: PPUSH
29150: LD_VAR 0 5
29154: PUSH
29155: LD_INT 1
29157: MINUS
29158: PPUSH
29159: LD_VAR 0 6
29163: PPUSH
29164: CALL_OW 1
29168: ST_TO_ADDR
// end ;
29169: GO 29086
29171: POP
29172: POP
// result := s_arr [ 1 ] ;
29173: LD_ADDR_VAR 0 4
29177: PUSH
29178: LD_VAR 0 7
29182: PUSH
29183: LD_INT 1
29185: ARRAY
29186: ST_TO_ADDR
// end ; end ;
29187: LD_VAR 0 4
29191: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
29192: LD_INT 0
29194: PPUSH
29195: PPUSH
// if not list then
29196: LD_VAR 0 1
29200: NOT
29201: IFFALSE 29205
// exit ;
29203: GO 29296
// i := list [ pos1 ] ;
29205: LD_ADDR_VAR 0 5
29209: PUSH
29210: LD_VAR 0 1
29214: PUSH
29215: LD_VAR 0 2
29219: ARRAY
29220: ST_TO_ADDR
// if not i then
29221: LD_VAR 0 5
29225: NOT
29226: IFFALSE 29230
// exit ;
29228: GO 29296
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
29230: LD_ADDR_VAR 0 1
29234: PUSH
29235: LD_VAR 0 1
29239: PPUSH
29240: LD_VAR 0 2
29244: PPUSH
29245: LD_VAR 0 1
29249: PUSH
29250: LD_VAR 0 3
29254: ARRAY
29255: PPUSH
29256: CALL_OW 1
29260: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
29261: LD_ADDR_VAR 0 1
29265: PUSH
29266: LD_VAR 0 1
29270: PPUSH
29271: LD_VAR 0 3
29275: PPUSH
29276: LD_VAR 0 5
29280: PPUSH
29281: CALL_OW 1
29285: ST_TO_ADDR
// result := list ;
29286: LD_ADDR_VAR 0 4
29290: PUSH
29291: LD_VAR 0 1
29295: ST_TO_ADDR
// end ;
29296: LD_VAR 0 4
29300: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29301: LD_INT 0
29303: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29304: LD_ADDR_VAR 0 5
29308: PUSH
29309: LD_VAR 0 1
29313: PPUSH
29314: CALL_OW 250
29318: PPUSH
29319: LD_VAR 0 1
29323: PPUSH
29324: CALL_OW 251
29328: PPUSH
29329: LD_VAR 0 2
29333: PPUSH
29334: LD_VAR 0 3
29338: PPUSH
29339: LD_VAR 0 4
29343: PPUSH
29344: CALL 29722 0 5
29348: ST_TO_ADDR
// end ;
29349: LD_VAR 0 5
29353: RET
// export function SortHexesByDistanceFromUnit ( unit , list , asc , mode ) ; var i , j , tmp ; begin
29354: LD_INT 0
29356: PPUSH
29357: PPUSH
29358: PPUSH
29359: PPUSH
// if not list or not unit then
29360: LD_VAR 0 2
29364: NOT
29365: PUSH
29366: LD_VAR 0 1
29370: NOT
29371: OR
29372: IFFALSE 29376
// exit ;
29374: GO 29717
// result := [ ] ;
29376: LD_ADDR_VAR 0 5
29380: PUSH
29381: EMPTY
29382: ST_TO_ADDR
// for i in list do
29383: LD_ADDR_VAR 0 6
29387: PUSH
29388: LD_VAR 0 2
29392: PUSH
29393: FOR_IN
29394: IFFALSE 29612
// begin tmp := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
29396: LD_ADDR_VAR 0 8
29400: PUSH
29401: LD_VAR 0 1
29405: PPUSH
29406: LD_VAR 0 6
29410: PUSH
29411: LD_INT 1
29413: ARRAY
29414: PPUSH
29415: LD_VAR 0 6
29419: PUSH
29420: LD_INT 2
29422: ARRAY
29423: PPUSH
29424: CALL_OW 297
29428: ST_TO_ADDR
// if not Count ( result ) then
29429: LD_VAR 0 5
29433: PPUSH
29434: CALL 26006 0 1
29438: NOT
29439: IFFALSE 29472
// begin result := Join ( result , [ i , tmp ] ) ;
29441: LD_ADDR_VAR 0 5
29445: PUSH
29446: LD_VAR 0 5
29450: PPUSH
29451: LD_VAR 0 6
29455: PUSH
29456: LD_VAR 0 8
29460: PUSH
29461: EMPTY
29462: LIST
29463: LIST
29464: PPUSH
29465: CALL 61606 0 2
29469: ST_TO_ADDR
// continue ;
29470: GO 29393
// end ; if result [ result ] [ 2 ] <= tmp then
29472: LD_VAR 0 5
29476: PUSH
29477: LD_VAR 0 5
29481: ARRAY
29482: PUSH
29483: LD_INT 2
29485: ARRAY
29486: PUSH
29487: LD_VAR 0 8
29491: LESSEQUAL
29492: IFFALSE 29525
// result := Join ( result , [ i , tmp ] ) else
29494: LD_ADDR_VAR 0 5
29498: PUSH
29499: LD_VAR 0 5
29503: PPUSH
29504: LD_VAR 0 6
29508: PUSH
29509: LD_VAR 0 8
29513: PUSH
29514: EMPTY
29515: LIST
29516: LIST
29517: PPUSH
29518: CALL 61606 0 2
29522: ST_TO_ADDR
29523: GO 29610
// begin for j := 1 to Count ( result ) do
29525: LD_ADDR_VAR 0 7
29529: PUSH
29530: DOUBLE
29531: LD_INT 1
29533: DEC
29534: ST_TO_ADDR
29535: LD_VAR 0 5
29539: PPUSH
29540: CALL 26006 0 1
29544: PUSH
29545: FOR_TO
29546: IFFALSE 29608
// begin if tmp < result [ j ] [ 2 ] then
29548: LD_VAR 0 8
29552: PUSH
29553: LD_VAR 0 5
29557: PUSH
29558: LD_VAR 0 7
29562: ARRAY
29563: PUSH
29564: LD_INT 2
29566: ARRAY
29567: LESS
29568: IFFALSE 29606
// begin result := Insert ( result , j , [ i , tmp ] ) ;
29570: LD_ADDR_VAR 0 5
29574: PUSH
29575: LD_VAR 0 5
29579: PPUSH
29580: LD_VAR 0 7
29584: PPUSH
29585: LD_VAR 0 6
29589: PUSH
29590: LD_VAR 0 8
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: PPUSH
29599: CALL_OW 2
29603: ST_TO_ADDR
// break ;
29604: GO 29608
// end ; end ;
29606: GO 29545
29608: POP
29609: POP
// end ; end ;
29610: GO 29393
29612: POP
29613: POP
// if result and not asc then
29614: LD_VAR 0 5
29618: PUSH
29619: LD_VAR 0 3
29623: NOT
29624: AND
29625: IFFALSE 29642
// result := ReverseArray ( result ) ;
29627: LD_ADDR_VAR 0 5
29631: PUSH
29632: LD_VAR 0 5
29636: PPUSH
29637: CALL 56882 0 1
29641: ST_TO_ADDR
// tmp := [ ] ;
29642: LD_ADDR_VAR 0 8
29646: PUSH
29647: EMPTY
29648: ST_TO_ADDR
// if mode then
29649: LD_VAR 0 4
29653: IFFALSE 29717
// begin for i := 1 to result do
29655: LD_ADDR_VAR 0 6
29659: PUSH
29660: DOUBLE
29661: LD_INT 1
29663: DEC
29664: ST_TO_ADDR
29665: LD_VAR 0 5
29669: PUSH
29670: FOR_TO
29671: IFFALSE 29705
// tmp := Join ( tmp , result [ i ] [ 1 ] ) ;
29673: LD_ADDR_VAR 0 8
29677: PUSH
29678: LD_VAR 0 8
29682: PPUSH
29683: LD_VAR 0 5
29687: PUSH
29688: LD_VAR 0 6
29692: ARRAY
29693: PUSH
29694: LD_INT 1
29696: ARRAY
29697: PPUSH
29698: CALL 61606 0 2
29702: ST_TO_ADDR
29703: GO 29670
29705: POP
29706: POP
// result := tmp ;
29707: LD_ADDR_VAR 0 5
29711: PUSH
29712: LD_VAR 0 8
29716: ST_TO_ADDR
// end ; end ;
29717: LD_VAR 0 5
29721: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
29722: LD_INT 0
29724: PPUSH
29725: PPUSH
29726: PPUSH
29727: PPUSH
// if not list then
29728: LD_VAR 0 3
29732: NOT
29733: IFFALSE 29737
// exit ;
29735: GO 30125
// result := [ ] ;
29737: LD_ADDR_VAR 0 6
29741: PUSH
29742: EMPTY
29743: ST_TO_ADDR
// for i in list do
29744: LD_ADDR_VAR 0 7
29748: PUSH
29749: LD_VAR 0 3
29753: PUSH
29754: FOR_IN
29755: IFFALSE 29957
// begin tmp := GetDistUnitXY ( i , x , y ) ;
29757: LD_ADDR_VAR 0 9
29761: PUSH
29762: LD_VAR 0 7
29766: PPUSH
29767: LD_VAR 0 1
29771: PPUSH
29772: LD_VAR 0 2
29776: PPUSH
29777: CALL_OW 297
29781: ST_TO_ADDR
// if not result then
29782: LD_VAR 0 6
29786: NOT
29787: IFFALSE 29813
// result := [ [ i , tmp ] ] else
29789: LD_ADDR_VAR 0 6
29793: PUSH
29794: LD_VAR 0 7
29798: PUSH
29799: LD_VAR 0 9
29803: PUSH
29804: EMPTY
29805: LIST
29806: LIST
29807: PUSH
29808: EMPTY
29809: LIST
29810: ST_TO_ADDR
29811: GO 29955
// begin if result [ result ] [ 2 ] < tmp then
29813: LD_VAR 0 6
29817: PUSH
29818: LD_VAR 0 6
29822: ARRAY
29823: PUSH
29824: LD_INT 2
29826: ARRAY
29827: PUSH
29828: LD_VAR 0 9
29832: LESS
29833: IFFALSE 29875
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
29835: LD_ADDR_VAR 0 6
29839: PUSH
29840: LD_VAR 0 6
29844: PPUSH
29845: LD_VAR 0 6
29849: PUSH
29850: LD_INT 1
29852: PLUS
29853: PPUSH
29854: LD_VAR 0 7
29858: PUSH
29859: LD_VAR 0 9
29863: PUSH
29864: EMPTY
29865: LIST
29866: LIST
29867: PPUSH
29868: CALL_OW 2
29872: ST_TO_ADDR
29873: GO 29955
// for j = 1 to result do
29875: LD_ADDR_VAR 0 8
29879: PUSH
29880: DOUBLE
29881: LD_INT 1
29883: DEC
29884: ST_TO_ADDR
29885: LD_VAR 0 6
29889: PUSH
29890: FOR_TO
29891: IFFALSE 29953
// begin if tmp < result [ j ] [ 2 ] then
29893: LD_VAR 0 9
29897: PUSH
29898: LD_VAR 0 6
29902: PUSH
29903: LD_VAR 0 8
29907: ARRAY
29908: PUSH
29909: LD_INT 2
29911: ARRAY
29912: LESS
29913: IFFALSE 29951
// begin result := Insert ( result , j , [ i , tmp ] ) ;
29915: LD_ADDR_VAR 0 6
29919: PUSH
29920: LD_VAR 0 6
29924: PPUSH
29925: LD_VAR 0 8
29929: PPUSH
29930: LD_VAR 0 7
29934: PUSH
29935: LD_VAR 0 9
29939: PUSH
29940: EMPTY
29941: LIST
29942: LIST
29943: PPUSH
29944: CALL_OW 2
29948: ST_TO_ADDR
// break ;
29949: GO 29953
// end ; end ;
29951: GO 29890
29953: POP
29954: POP
// end ; end ;
29955: GO 29754
29957: POP
29958: POP
// if result and not asc then
29959: LD_VAR 0 6
29963: PUSH
29964: LD_VAR 0 4
29968: NOT
29969: AND
29970: IFFALSE 30045
// begin tmp := result ;
29972: LD_ADDR_VAR 0 9
29976: PUSH
29977: LD_VAR 0 6
29981: ST_TO_ADDR
// for i = tmp downto 1 do
29982: LD_ADDR_VAR 0 7
29986: PUSH
29987: DOUBLE
29988: LD_VAR 0 9
29992: INC
29993: ST_TO_ADDR
29994: LD_INT 1
29996: PUSH
29997: FOR_DOWNTO
29998: IFFALSE 30043
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
30000: LD_ADDR_VAR 0 6
30004: PUSH
30005: LD_VAR 0 6
30009: PPUSH
30010: LD_VAR 0 9
30014: PUSH
30015: LD_VAR 0 7
30019: MINUS
30020: PUSH
30021: LD_INT 1
30023: PLUS
30024: PPUSH
30025: LD_VAR 0 9
30029: PUSH
30030: LD_VAR 0 7
30034: ARRAY
30035: PPUSH
30036: CALL_OW 1
30040: ST_TO_ADDR
30041: GO 29997
30043: POP
30044: POP
// end ; tmp := [ ] ;
30045: LD_ADDR_VAR 0 9
30049: PUSH
30050: EMPTY
30051: ST_TO_ADDR
// if mode then
30052: LD_VAR 0 5
30056: IFFALSE 30125
// begin for i = 1 to result do
30058: LD_ADDR_VAR 0 7
30062: PUSH
30063: DOUBLE
30064: LD_INT 1
30066: DEC
30067: ST_TO_ADDR
30068: LD_VAR 0 6
30072: PUSH
30073: FOR_TO
30074: IFFALSE 30113
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
30076: LD_ADDR_VAR 0 9
30080: PUSH
30081: LD_VAR 0 9
30085: PPUSH
30086: LD_VAR 0 7
30090: PPUSH
30091: LD_VAR 0 6
30095: PUSH
30096: LD_VAR 0 7
30100: ARRAY
30101: PUSH
30102: LD_INT 1
30104: ARRAY
30105: PPUSH
30106: CALL_OW 1
30110: ST_TO_ADDR
30111: GO 30073
30113: POP
30114: POP
// result := tmp ;
30115: LD_ADDR_VAR 0 6
30119: PUSH
30120: LD_VAR 0 9
30124: ST_TO_ADDR
// end ; end ;
30125: LD_VAR 0 6
30129: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
30130: LD_INT 0
30132: PPUSH
30133: PPUSH
30134: PPUSH
30135: PPUSH
30136: PPUSH
30137: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
30138: LD_ADDR_VAR 0 5
30142: PUSH
30143: LD_INT 0
30145: PUSH
30146: LD_INT 0
30148: PUSH
30149: LD_INT 0
30151: PUSH
30152: EMPTY
30153: PUSH
30154: EMPTY
30155: LIST
30156: LIST
30157: LIST
30158: LIST
30159: ST_TO_ADDR
// if not x or not y then
30160: LD_VAR 0 2
30164: NOT
30165: PUSH
30166: LD_VAR 0 3
30170: NOT
30171: OR
30172: IFFALSE 30176
// exit ;
30174: GO 31826
// if not range then
30176: LD_VAR 0 4
30180: NOT
30181: IFFALSE 30191
// range := 10 ;
30183: LD_ADDR_VAR 0 4
30187: PUSH
30188: LD_INT 10
30190: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
30191: LD_ADDR_VAR 0 8
30195: PUSH
30196: LD_INT 81
30198: PUSH
30199: LD_VAR 0 1
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: PUSH
30208: LD_INT 92
30210: PUSH
30211: LD_VAR 0 2
30215: PUSH
30216: LD_VAR 0 3
30220: PUSH
30221: LD_VAR 0 4
30225: PUSH
30226: EMPTY
30227: LIST
30228: LIST
30229: LIST
30230: LIST
30231: PUSH
30232: LD_INT 3
30234: PUSH
30235: LD_INT 21
30237: PUSH
30238: LD_INT 3
30240: PUSH
30241: EMPTY
30242: LIST
30243: LIST
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: PUSH
30249: EMPTY
30250: LIST
30251: LIST
30252: LIST
30253: PPUSH
30254: CALL_OW 69
30258: ST_TO_ADDR
// if not tmp then
30259: LD_VAR 0 8
30263: NOT
30264: IFFALSE 30268
// exit ;
30266: GO 31826
// for i in tmp do
30268: LD_ADDR_VAR 0 6
30272: PUSH
30273: LD_VAR 0 8
30277: PUSH
30278: FOR_IN
30279: IFFALSE 31801
// begin points := [ 0 , 0 , 0 ] ;
30281: LD_ADDR_VAR 0 9
30285: PUSH
30286: LD_INT 0
30288: PUSH
30289: LD_INT 0
30291: PUSH
30292: LD_INT 0
30294: PUSH
30295: EMPTY
30296: LIST
30297: LIST
30298: LIST
30299: ST_TO_ADDR
// bpoints := 1 ;
30300: LD_ADDR_VAR 0 10
30304: PUSH
30305: LD_INT 1
30307: ST_TO_ADDR
// case GetType ( i ) of unit_human :
30308: LD_VAR 0 6
30312: PPUSH
30313: CALL_OW 247
30317: PUSH
30318: LD_INT 1
30320: DOUBLE
30321: EQUAL
30322: IFTRUE 30326
30324: GO 30904
30326: POP
// begin if GetClass ( i ) = 1 then
30327: LD_VAR 0 6
30331: PPUSH
30332: CALL_OW 257
30336: PUSH
30337: LD_INT 1
30339: EQUAL
30340: IFFALSE 30361
// points := [ 10 , 5 , 3 ] ;
30342: LD_ADDR_VAR 0 9
30346: PUSH
30347: LD_INT 10
30349: PUSH
30350: LD_INT 5
30352: PUSH
30353: LD_INT 3
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: LIST
30360: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
30361: LD_VAR 0 6
30365: PPUSH
30366: CALL_OW 257
30370: PUSH
30371: LD_INT 2
30373: PUSH
30374: LD_INT 3
30376: PUSH
30377: LD_INT 4
30379: PUSH
30380: EMPTY
30381: LIST
30382: LIST
30383: LIST
30384: IN
30385: IFFALSE 30406
// points := [ 3 , 2 , 1 ] ;
30387: LD_ADDR_VAR 0 9
30391: PUSH
30392: LD_INT 3
30394: PUSH
30395: LD_INT 2
30397: PUSH
30398: LD_INT 1
30400: PUSH
30401: EMPTY
30402: LIST
30403: LIST
30404: LIST
30405: ST_TO_ADDR
// if GetClass ( i ) = 5 then
30406: LD_VAR 0 6
30410: PPUSH
30411: CALL_OW 257
30415: PUSH
30416: LD_INT 5
30418: EQUAL
30419: IFFALSE 30440
// points := [ 130 , 5 , 2 ] ;
30421: LD_ADDR_VAR 0 9
30425: PUSH
30426: LD_INT 130
30428: PUSH
30429: LD_INT 5
30431: PUSH
30432: LD_INT 2
30434: PUSH
30435: EMPTY
30436: LIST
30437: LIST
30438: LIST
30439: ST_TO_ADDR
// if GetClass ( i ) = 8 then
30440: LD_VAR 0 6
30444: PPUSH
30445: CALL_OW 257
30449: PUSH
30450: LD_INT 8
30452: EQUAL
30453: IFFALSE 30474
// points := [ 35 , 35 , 30 ] ;
30455: LD_ADDR_VAR 0 9
30459: PUSH
30460: LD_INT 35
30462: PUSH
30463: LD_INT 35
30465: PUSH
30466: LD_INT 30
30468: PUSH
30469: EMPTY
30470: LIST
30471: LIST
30472: LIST
30473: ST_TO_ADDR
// if GetClass ( i ) = 9 then
30474: LD_VAR 0 6
30478: PPUSH
30479: CALL_OW 257
30483: PUSH
30484: LD_INT 9
30486: EQUAL
30487: IFFALSE 30508
// points := [ 20 , 55 , 40 ] ;
30489: LD_ADDR_VAR 0 9
30493: PUSH
30494: LD_INT 20
30496: PUSH
30497: LD_INT 55
30499: PUSH
30500: LD_INT 40
30502: PUSH
30503: EMPTY
30504: LIST
30505: LIST
30506: LIST
30507: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
30508: LD_VAR 0 6
30512: PPUSH
30513: CALL_OW 257
30517: PUSH
30518: LD_INT 12
30520: PUSH
30521: LD_INT 16
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: IN
30528: IFFALSE 30549
// points := [ 5 , 3 , 2 ] ;
30530: LD_ADDR_VAR 0 9
30534: PUSH
30535: LD_INT 5
30537: PUSH
30538: LD_INT 3
30540: PUSH
30541: LD_INT 2
30543: PUSH
30544: EMPTY
30545: LIST
30546: LIST
30547: LIST
30548: ST_TO_ADDR
// if GetClass ( i ) = 17 then
30549: LD_VAR 0 6
30553: PPUSH
30554: CALL_OW 257
30558: PUSH
30559: LD_INT 17
30561: EQUAL
30562: IFFALSE 30583
// points := [ 100 , 50 , 75 ] ;
30564: LD_ADDR_VAR 0 9
30568: PUSH
30569: LD_INT 100
30571: PUSH
30572: LD_INT 50
30574: PUSH
30575: LD_INT 75
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: LIST
30582: ST_TO_ADDR
// if GetClass ( i ) = 15 then
30583: LD_VAR 0 6
30587: PPUSH
30588: CALL_OW 257
30592: PUSH
30593: LD_INT 15
30595: EQUAL
30596: IFFALSE 30617
// points := [ 10 , 5 , 3 ] ;
30598: LD_ADDR_VAR 0 9
30602: PUSH
30603: LD_INT 10
30605: PUSH
30606: LD_INT 5
30608: PUSH
30609: LD_INT 3
30611: PUSH
30612: EMPTY
30613: LIST
30614: LIST
30615: LIST
30616: ST_TO_ADDR
// if GetClass ( i ) = 14 then
30617: LD_VAR 0 6
30621: PPUSH
30622: CALL_OW 257
30626: PUSH
30627: LD_INT 14
30629: EQUAL
30630: IFFALSE 30651
// points := [ 10 , 0 , 0 ] ;
30632: LD_ADDR_VAR 0 9
30636: PUSH
30637: LD_INT 10
30639: PUSH
30640: LD_INT 0
30642: PUSH
30643: LD_INT 0
30645: PUSH
30646: EMPTY
30647: LIST
30648: LIST
30649: LIST
30650: ST_TO_ADDR
// if GetClass ( i ) = 11 then
30651: LD_VAR 0 6
30655: PPUSH
30656: CALL_OW 257
30660: PUSH
30661: LD_INT 11
30663: EQUAL
30664: IFFALSE 30685
// points := [ 30 , 10 , 5 ] ;
30666: LD_ADDR_VAR 0 9
30670: PUSH
30671: LD_INT 30
30673: PUSH
30674: LD_INT 10
30676: PUSH
30677: LD_INT 5
30679: PUSH
30680: EMPTY
30681: LIST
30682: LIST
30683: LIST
30684: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
30685: LD_VAR 0 1
30689: PPUSH
30690: LD_INT 5
30692: PPUSH
30693: CALL_OW 321
30697: PUSH
30698: LD_INT 2
30700: EQUAL
30701: IFFALSE 30718
// bpoints := bpoints * 1.8 ;
30703: LD_ADDR_VAR 0 10
30707: PUSH
30708: LD_VAR 0 10
30712: PUSH
30713: LD_REAL  1.80000000000000E+0000
30716: MUL
30717: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
30718: LD_VAR 0 6
30722: PPUSH
30723: CALL_OW 257
30727: PUSH
30728: LD_INT 1
30730: PUSH
30731: LD_INT 2
30733: PUSH
30734: LD_INT 3
30736: PUSH
30737: LD_INT 4
30739: PUSH
30740: EMPTY
30741: LIST
30742: LIST
30743: LIST
30744: LIST
30745: IN
30746: PUSH
30747: LD_VAR 0 1
30751: PPUSH
30752: LD_INT 51
30754: PPUSH
30755: CALL_OW 321
30759: PUSH
30760: LD_INT 2
30762: EQUAL
30763: AND
30764: IFFALSE 30781
// bpoints := bpoints * 1.2 ;
30766: LD_ADDR_VAR 0 10
30770: PUSH
30771: LD_VAR 0 10
30775: PUSH
30776: LD_REAL  1.20000000000000E+0000
30779: MUL
30780: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
30781: LD_VAR 0 6
30785: PPUSH
30786: CALL_OW 257
30790: PUSH
30791: LD_INT 5
30793: PUSH
30794: LD_INT 7
30796: PUSH
30797: LD_INT 9
30799: PUSH
30800: EMPTY
30801: LIST
30802: LIST
30803: LIST
30804: IN
30805: PUSH
30806: LD_VAR 0 1
30810: PPUSH
30811: LD_INT 52
30813: PPUSH
30814: CALL_OW 321
30818: PUSH
30819: LD_INT 2
30821: EQUAL
30822: AND
30823: IFFALSE 30840
// bpoints := bpoints * 1.5 ;
30825: LD_ADDR_VAR 0 10
30829: PUSH
30830: LD_VAR 0 10
30834: PUSH
30835: LD_REAL  1.50000000000000E+0000
30838: MUL
30839: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
30840: LD_VAR 0 1
30844: PPUSH
30845: LD_INT 66
30847: PPUSH
30848: CALL_OW 321
30852: PUSH
30853: LD_INT 2
30855: EQUAL
30856: IFFALSE 30873
// bpoints := bpoints * 1.1 ;
30858: LD_ADDR_VAR 0 10
30862: PUSH
30863: LD_VAR 0 10
30867: PUSH
30868: LD_REAL  1.10000000000000E+0000
30871: MUL
30872: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
30873: LD_ADDR_VAR 0 10
30877: PUSH
30878: LD_VAR 0 10
30882: PUSH
30883: LD_VAR 0 6
30887: PPUSH
30888: LD_INT 1
30890: PPUSH
30891: CALL_OW 259
30895: PUSH
30896: LD_REAL  1.15000000000000E+0000
30899: MUL
30900: MUL
30901: ST_TO_ADDR
// end ; unit_vehicle :
30902: GO 31730
30904: LD_INT 2
30906: DOUBLE
30907: EQUAL
30908: IFTRUE 30912
30910: GO 31718
30912: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
30913: LD_VAR 0 6
30917: PPUSH
30918: CALL_OW 264
30922: PUSH
30923: LD_INT 2
30925: PUSH
30926: LD_INT 42
30928: PUSH
30929: LD_INT 24
30931: PUSH
30932: EMPTY
30933: LIST
30934: LIST
30935: LIST
30936: IN
30937: IFFALSE 30958
// points := [ 25 , 5 , 3 ] ;
30939: LD_ADDR_VAR 0 9
30943: PUSH
30944: LD_INT 25
30946: PUSH
30947: LD_INT 5
30949: PUSH
30950: LD_INT 3
30952: PUSH
30953: EMPTY
30954: LIST
30955: LIST
30956: LIST
30957: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
30958: LD_VAR 0 6
30962: PPUSH
30963: CALL_OW 264
30967: PUSH
30968: LD_INT 4
30970: PUSH
30971: LD_INT 43
30973: PUSH
30974: LD_INT 25
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: LIST
30981: IN
30982: IFFALSE 31003
// points := [ 40 , 15 , 5 ] ;
30984: LD_ADDR_VAR 0 9
30988: PUSH
30989: LD_INT 40
30991: PUSH
30992: LD_INT 15
30994: PUSH
30995: LD_INT 5
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: LIST
31002: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
31003: LD_VAR 0 6
31007: PPUSH
31008: CALL_OW 264
31012: PUSH
31013: LD_INT 3
31015: PUSH
31016: LD_INT 23
31018: PUSH
31019: EMPTY
31020: LIST
31021: LIST
31022: IN
31023: IFFALSE 31044
// points := [ 7 , 25 , 8 ] ;
31025: LD_ADDR_VAR 0 9
31029: PUSH
31030: LD_INT 7
31032: PUSH
31033: LD_INT 25
31035: PUSH
31036: LD_INT 8
31038: PUSH
31039: EMPTY
31040: LIST
31041: LIST
31042: LIST
31043: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
31044: LD_VAR 0 6
31048: PPUSH
31049: CALL_OW 264
31053: PUSH
31054: LD_INT 5
31056: PUSH
31057: LD_INT 27
31059: PUSH
31060: LD_INT 44
31062: PUSH
31063: EMPTY
31064: LIST
31065: LIST
31066: LIST
31067: IN
31068: IFFALSE 31089
// points := [ 14 , 50 , 16 ] ;
31070: LD_ADDR_VAR 0 9
31074: PUSH
31075: LD_INT 14
31077: PUSH
31078: LD_INT 50
31080: PUSH
31081: LD_INT 16
31083: PUSH
31084: EMPTY
31085: LIST
31086: LIST
31087: LIST
31088: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
31089: LD_VAR 0 6
31093: PPUSH
31094: CALL_OW 264
31098: PUSH
31099: LD_INT 6
31101: PUSH
31102: LD_INT 46
31104: PUSH
31105: EMPTY
31106: LIST
31107: LIST
31108: IN
31109: IFFALSE 31130
// points := [ 32 , 120 , 70 ] ;
31111: LD_ADDR_VAR 0 9
31115: PUSH
31116: LD_INT 32
31118: PUSH
31119: LD_INT 120
31121: PUSH
31122: LD_INT 70
31124: PUSH
31125: EMPTY
31126: LIST
31127: LIST
31128: LIST
31129: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
31130: LD_VAR 0 6
31134: PPUSH
31135: CALL_OW 264
31139: PUSH
31140: LD_INT 7
31142: PUSH
31143: LD_INT 28
31145: PUSH
31146: LD_INT 45
31148: PUSH
31149: LD_INT 92
31151: PUSH
31152: EMPTY
31153: LIST
31154: LIST
31155: LIST
31156: LIST
31157: IN
31158: IFFALSE 31179
// points := [ 35 , 20 , 45 ] ;
31160: LD_ADDR_VAR 0 9
31164: PUSH
31165: LD_INT 35
31167: PUSH
31168: LD_INT 20
31170: PUSH
31171: LD_INT 45
31173: PUSH
31174: EMPTY
31175: LIST
31176: LIST
31177: LIST
31178: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
31179: LD_VAR 0 6
31183: PPUSH
31184: CALL_OW 264
31188: PUSH
31189: LD_INT 47
31191: PUSH
31192: EMPTY
31193: LIST
31194: IN
31195: IFFALSE 31216
// points := [ 67 , 45 , 75 ] ;
31197: LD_ADDR_VAR 0 9
31201: PUSH
31202: LD_INT 67
31204: PUSH
31205: LD_INT 45
31207: PUSH
31208: LD_INT 75
31210: PUSH
31211: EMPTY
31212: LIST
31213: LIST
31214: LIST
31215: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
31216: LD_VAR 0 6
31220: PPUSH
31221: CALL_OW 264
31225: PUSH
31226: LD_INT 26
31228: PUSH
31229: EMPTY
31230: LIST
31231: IN
31232: IFFALSE 31253
// points := [ 120 , 30 , 80 ] ;
31234: LD_ADDR_VAR 0 9
31238: PUSH
31239: LD_INT 120
31241: PUSH
31242: LD_INT 30
31244: PUSH
31245: LD_INT 80
31247: PUSH
31248: EMPTY
31249: LIST
31250: LIST
31251: LIST
31252: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
31253: LD_VAR 0 6
31257: PPUSH
31258: CALL_OW 264
31262: PUSH
31263: LD_INT 22
31265: PUSH
31266: EMPTY
31267: LIST
31268: IN
31269: IFFALSE 31290
// points := [ 40 , 1 , 1 ] ;
31271: LD_ADDR_VAR 0 9
31275: PUSH
31276: LD_INT 40
31278: PUSH
31279: LD_INT 1
31281: PUSH
31282: LD_INT 1
31284: PUSH
31285: EMPTY
31286: LIST
31287: LIST
31288: LIST
31289: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
31290: LD_VAR 0 6
31294: PPUSH
31295: CALL_OW 264
31299: PUSH
31300: LD_INT 29
31302: PUSH
31303: EMPTY
31304: LIST
31305: IN
31306: IFFALSE 31327
// points := [ 70 , 200 , 400 ] ;
31308: LD_ADDR_VAR 0 9
31312: PUSH
31313: LD_INT 70
31315: PUSH
31316: LD_INT 200
31318: PUSH
31319: LD_INT 400
31321: PUSH
31322: EMPTY
31323: LIST
31324: LIST
31325: LIST
31326: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
31327: LD_VAR 0 6
31331: PPUSH
31332: CALL_OW 264
31336: PUSH
31337: LD_INT 14
31339: PUSH
31340: LD_INT 53
31342: PUSH
31343: EMPTY
31344: LIST
31345: LIST
31346: IN
31347: IFFALSE 31368
// points := [ 40 , 10 , 20 ] ;
31349: LD_ADDR_VAR 0 9
31353: PUSH
31354: LD_INT 40
31356: PUSH
31357: LD_INT 10
31359: PUSH
31360: LD_INT 20
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: LIST
31367: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
31368: LD_VAR 0 6
31372: PPUSH
31373: CALL_OW 264
31377: PUSH
31378: LD_INT 9
31380: PUSH
31381: EMPTY
31382: LIST
31383: IN
31384: IFFALSE 31405
// points := [ 5 , 70 , 20 ] ;
31386: LD_ADDR_VAR 0 9
31390: PUSH
31391: LD_INT 5
31393: PUSH
31394: LD_INT 70
31396: PUSH
31397: LD_INT 20
31399: PUSH
31400: EMPTY
31401: LIST
31402: LIST
31403: LIST
31404: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
31405: LD_VAR 0 6
31409: PPUSH
31410: CALL_OW 264
31414: PUSH
31415: LD_INT 10
31417: PUSH
31418: EMPTY
31419: LIST
31420: IN
31421: IFFALSE 31442
// points := [ 35 , 110 , 70 ] ;
31423: LD_ADDR_VAR 0 9
31427: PUSH
31428: LD_INT 35
31430: PUSH
31431: LD_INT 110
31433: PUSH
31434: LD_INT 70
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: LIST
31441: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
31442: LD_VAR 0 6
31446: PPUSH
31447: CALL_OW 265
31451: PUSH
31452: LD_INT 25
31454: EQUAL
31455: IFFALSE 31476
// points := [ 80 , 65 , 100 ] ;
31457: LD_ADDR_VAR 0 9
31461: PUSH
31462: LD_INT 80
31464: PUSH
31465: LD_INT 65
31467: PUSH
31468: LD_INT 100
31470: PUSH
31471: EMPTY
31472: LIST
31473: LIST
31474: LIST
31475: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
31476: LD_VAR 0 6
31480: PPUSH
31481: CALL_OW 263
31485: PUSH
31486: LD_INT 1
31488: EQUAL
31489: IFFALSE 31524
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
31491: LD_ADDR_VAR 0 10
31495: PUSH
31496: LD_VAR 0 10
31500: PUSH
31501: LD_VAR 0 6
31505: PPUSH
31506: CALL_OW 311
31510: PPUSH
31511: LD_INT 3
31513: PPUSH
31514: CALL_OW 259
31518: PUSH
31519: LD_INT 4
31521: MUL
31522: MUL
31523: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
31524: LD_VAR 0 6
31528: PPUSH
31529: CALL_OW 263
31533: PUSH
31534: LD_INT 2
31536: EQUAL
31537: IFFALSE 31588
// begin j := IsControledBy ( i ) ;
31539: LD_ADDR_VAR 0 7
31543: PUSH
31544: LD_VAR 0 6
31548: PPUSH
31549: CALL_OW 312
31553: ST_TO_ADDR
// if j then
31554: LD_VAR 0 7
31558: IFFALSE 31588
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
31560: LD_ADDR_VAR 0 10
31564: PUSH
31565: LD_VAR 0 10
31569: PUSH
31570: LD_VAR 0 7
31574: PPUSH
31575: LD_INT 3
31577: PPUSH
31578: CALL_OW 259
31582: PUSH
31583: LD_INT 3
31585: MUL
31586: MUL
31587: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
31588: LD_VAR 0 6
31592: PPUSH
31593: CALL_OW 264
31597: PUSH
31598: LD_INT 5
31600: PUSH
31601: LD_INT 6
31603: PUSH
31604: LD_INT 46
31606: PUSH
31607: LD_INT 44
31609: PUSH
31610: LD_INT 47
31612: PUSH
31613: LD_INT 45
31615: PUSH
31616: LD_INT 28
31618: PUSH
31619: LD_INT 7
31621: PUSH
31622: LD_INT 27
31624: PUSH
31625: LD_INT 29
31627: PUSH
31628: EMPTY
31629: LIST
31630: LIST
31631: LIST
31632: LIST
31633: LIST
31634: LIST
31635: LIST
31636: LIST
31637: LIST
31638: LIST
31639: IN
31640: PUSH
31641: LD_VAR 0 1
31645: PPUSH
31646: LD_INT 52
31648: PPUSH
31649: CALL_OW 321
31653: PUSH
31654: LD_INT 2
31656: EQUAL
31657: AND
31658: IFFALSE 31675
// bpoints := bpoints * 1.2 ;
31660: LD_ADDR_VAR 0 10
31664: PUSH
31665: LD_VAR 0 10
31669: PUSH
31670: LD_REAL  1.20000000000000E+0000
31673: MUL
31674: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
31675: LD_VAR 0 6
31679: PPUSH
31680: CALL_OW 264
31684: PUSH
31685: LD_INT 6
31687: PUSH
31688: LD_INT 46
31690: PUSH
31691: LD_INT 47
31693: PUSH
31694: EMPTY
31695: LIST
31696: LIST
31697: LIST
31698: IN
31699: IFFALSE 31716
// bpoints := bpoints * 1.2 ;
31701: LD_ADDR_VAR 0 10
31705: PUSH
31706: LD_VAR 0 10
31710: PUSH
31711: LD_REAL  1.20000000000000E+0000
31714: MUL
31715: ST_TO_ADDR
// end ; unit_building :
31716: GO 31730
31718: LD_INT 3
31720: DOUBLE
31721: EQUAL
31722: IFTRUE 31726
31724: GO 31729
31726: POP
// ; end ;
31727: GO 31730
31729: POP
// for j = 1 to 3 do
31730: LD_ADDR_VAR 0 7
31734: PUSH
31735: DOUBLE
31736: LD_INT 1
31738: DEC
31739: ST_TO_ADDR
31740: LD_INT 3
31742: PUSH
31743: FOR_TO
31744: IFFALSE 31797
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
31746: LD_ADDR_VAR 0 5
31750: PUSH
31751: LD_VAR 0 5
31755: PPUSH
31756: LD_VAR 0 7
31760: PPUSH
31761: LD_VAR 0 5
31765: PUSH
31766: LD_VAR 0 7
31770: ARRAY
31771: PUSH
31772: LD_VAR 0 9
31776: PUSH
31777: LD_VAR 0 7
31781: ARRAY
31782: PUSH
31783: LD_VAR 0 10
31787: MUL
31788: PLUS
31789: PPUSH
31790: CALL_OW 1
31794: ST_TO_ADDR
31795: GO 31743
31797: POP
31798: POP
// end ;
31799: GO 30278
31801: POP
31802: POP
// result := Replace ( result , 4 , tmp ) ;
31803: LD_ADDR_VAR 0 5
31807: PUSH
31808: LD_VAR 0 5
31812: PPUSH
31813: LD_INT 4
31815: PPUSH
31816: LD_VAR 0 8
31820: PPUSH
31821: CALL_OW 1
31825: ST_TO_ADDR
// end ;
31826: LD_VAR 0 5
31830: RET
// export function DangerAtRange ( unit , range ) ; begin
31831: LD_INT 0
31833: PPUSH
// if not unit then
31834: LD_VAR 0 1
31838: NOT
31839: IFFALSE 31843
// exit ;
31841: GO 31888
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
31843: LD_ADDR_VAR 0 3
31847: PUSH
31848: LD_VAR 0 1
31852: PPUSH
31853: CALL_OW 255
31857: PPUSH
31858: LD_VAR 0 1
31862: PPUSH
31863: CALL_OW 250
31867: PPUSH
31868: LD_VAR 0 1
31872: PPUSH
31873: CALL_OW 251
31877: PPUSH
31878: LD_VAR 0 2
31882: PPUSH
31883: CALL 30130 0 4
31887: ST_TO_ADDR
// end ;
31888: LD_VAR 0 3
31892: RET
// export function DangerInArea ( side , area ) ; begin
31893: LD_INT 0
31895: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
31896: LD_ADDR_VAR 0 3
31900: PUSH
31901: LD_VAR 0 2
31905: PPUSH
31906: LD_INT 81
31908: PUSH
31909: LD_VAR 0 1
31913: PUSH
31914: EMPTY
31915: LIST
31916: LIST
31917: PPUSH
31918: CALL_OW 70
31922: ST_TO_ADDR
// end ;
31923: LD_VAR 0 3
31927: RET
// export function IsExtension ( b ) ; begin
31928: LD_INT 0
31930: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
31931: LD_ADDR_VAR 0 2
31935: PUSH
31936: LD_VAR 0 1
31940: PUSH
31941: LD_INT 23
31943: PUSH
31944: LD_INT 20
31946: PUSH
31947: LD_INT 22
31949: PUSH
31950: LD_INT 17
31952: PUSH
31953: LD_INT 24
31955: PUSH
31956: LD_INT 21
31958: PUSH
31959: LD_INT 19
31961: PUSH
31962: LD_INT 16
31964: PUSH
31965: LD_INT 25
31967: PUSH
31968: LD_INT 18
31970: PUSH
31971: EMPTY
31972: LIST
31973: LIST
31974: LIST
31975: LIST
31976: LIST
31977: LIST
31978: LIST
31979: LIST
31980: LIST
31981: LIST
31982: IN
31983: ST_TO_ADDR
// end ;
31984: LD_VAR 0 2
31988: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
31989: LD_INT 0
31991: PPUSH
31992: PPUSH
31993: PPUSH
// result := [ ] ;
31994: LD_ADDR_VAR 0 4
31998: PUSH
31999: EMPTY
32000: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
32001: LD_ADDR_VAR 0 5
32005: PUSH
32006: LD_VAR 0 2
32010: PPUSH
32011: LD_INT 21
32013: PUSH
32014: LD_INT 3
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: PPUSH
32021: CALL_OW 70
32025: ST_TO_ADDR
// if not tmp then
32026: LD_VAR 0 5
32030: NOT
32031: IFFALSE 32035
// exit ;
32033: GO 32099
// if checkLink then
32035: LD_VAR 0 3
32039: IFFALSE 32089
// begin for i in tmp do
32041: LD_ADDR_VAR 0 6
32045: PUSH
32046: LD_VAR 0 5
32050: PUSH
32051: FOR_IN
32052: IFFALSE 32087
// if GetBase ( i ) <> base then
32054: LD_VAR 0 6
32058: PPUSH
32059: CALL_OW 274
32063: PUSH
32064: LD_VAR 0 1
32068: NONEQUAL
32069: IFFALSE 32085
// ComLinkToBase ( base , i ) ;
32071: LD_VAR 0 1
32075: PPUSH
32076: LD_VAR 0 6
32080: PPUSH
32081: CALL_OW 169
32085: GO 32051
32087: POP
32088: POP
// end ; result := tmp ;
32089: LD_ADDR_VAR 0 4
32093: PUSH
32094: LD_VAR 0 5
32098: ST_TO_ADDR
// end ;
32099: LD_VAR 0 4
32103: RET
// export function ComComplete ( units , b ) ; var i ; begin
32104: LD_INT 0
32106: PPUSH
32107: PPUSH
// if not units then
32108: LD_VAR 0 1
32112: NOT
32113: IFFALSE 32117
// exit ;
32115: GO 32207
// for i in units do
32117: LD_ADDR_VAR 0 4
32121: PUSH
32122: LD_VAR 0 1
32126: PUSH
32127: FOR_IN
32128: IFFALSE 32205
// if BuildingStatus ( b ) = bs_build then
32130: LD_VAR 0 2
32134: PPUSH
32135: CALL_OW 461
32139: PUSH
32140: LD_INT 1
32142: EQUAL
32143: IFFALSE 32203
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
32145: LD_VAR 0 4
32149: PPUSH
32150: LD_STRING h
32152: PUSH
32153: LD_VAR 0 2
32157: PPUSH
32158: CALL_OW 250
32162: PUSH
32163: LD_VAR 0 2
32167: PPUSH
32168: CALL_OW 251
32172: PUSH
32173: LD_VAR 0 2
32177: PUSH
32178: LD_INT 0
32180: PUSH
32181: LD_INT 0
32183: PUSH
32184: LD_INT 0
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: LIST
32191: LIST
32192: LIST
32193: LIST
32194: LIST
32195: PUSH
32196: EMPTY
32197: LIST
32198: PPUSH
32199: CALL_OW 446
32203: GO 32127
32205: POP
32206: POP
// end ;
32207: LD_VAR 0 3
32211: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
32212: LD_INT 0
32214: PPUSH
32215: PPUSH
32216: PPUSH
32217: PPUSH
32218: PPUSH
32219: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
32220: LD_VAR 0 1
32224: NOT
32225: PUSH
32226: LD_VAR 0 1
32230: PPUSH
32231: CALL_OW 263
32235: PUSH
32236: LD_INT 2
32238: NONEQUAL
32239: OR
32240: IFFALSE 32244
// exit ;
32242: GO 32560
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
32244: LD_ADDR_VAR 0 6
32248: PUSH
32249: LD_INT 22
32251: PUSH
32252: LD_VAR 0 1
32256: PPUSH
32257: CALL_OW 255
32261: PUSH
32262: EMPTY
32263: LIST
32264: LIST
32265: PUSH
32266: LD_INT 2
32268: PUSH
32269: LD_INT 30
32271: PUSH
32272: LD_INT 36
32274: PUSH
32275: EMPTY
32276: LIST
32277: LIST
32278: PUSH
32279: LD_INT 34
32281: PUSH
32282: LD_INT 31
32284: PUSH
32285: EMPTY
32286: LIST
32287: LIST
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: LIST
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PPUSH
32298: CALL_OW 69
32302: ST_TO_ADDR
// if not tmp then
32303: LD_VAR 0 6
32307: NOT
32308: IFFALSE 32312
// exit ;
32310: GO 32560
// result := [ ] ;
32312: LD_ADDR_VAR 0 2
32316: PUSH
32317: EMPTY
32318: ST_TO_ADDR
// for i in tmp do
32319: LD_ADDR_VAR 0 3
32323: PUSH
32324: LD_VAR 0 6
32328: PUSH
32329: FOR_IN
32330: IFFALSE 32401
// begin t := UnitsInside ( i ) ;
32332: LD_ADDR_VAR 0 4
32336: PUSH
32337: LD_VAR 0 3
32341: PPUSH
32342: CALL_OW 313
32346: ST_TO_ADDR
// if t then
32347: LD_VAR 0 4
32351: IFFALSE 32399
// for j in t do
32353: LD_ADDR_VAR 0 7
32357: PUSH
32358: LD_VAR 0 4
32362: PUSH
32363: FOR_IN
32364: IFFALSE 32397
// result := Replace ( result , result + 1 , j ) ;
32366: LD_ADDR_VAR 0 2
32370: PUSH
32371: LD_VAR 0 2
32375: PPUSH
32376: LD_VAR 0 2
32380: PUSH
32381: LD_INT 1
32383: PLUS
32384: PPUSH
32385: LD_VAR 0 7
32389: PPUSH
32390: CALL_OW 1
32394: ST_TO_ADDR
32395: GO 32363
32397: POP
32398: POP
// end ;
32399: GO 32329
32401: POP
32402: POP
// if not result then
32403: LD_VAR 0 2
32407: NOT
32408: IFFALSE 32412
// exit ;
32410: GO 32560
// mech := result [ 1 ] ;
32412: LD_ADDR_VAR 0 5
32416: PUSH
32417: LD_VAR 0 2
32421: PUSH
32422: LD_INT 1
32424: ARRAY
32425: ST_TO_ADDR
// if result > 1 then
32426: LD_VAR 0 2
32430: PUSH
32431: LD_INT 1
32433: GREATER
32434: IFFALSE 32546
// begin for i = 2 to result do
32436: LD_ADDR_VAR 0 3
32440: PUSH
32441: DOUBLE
32442: LD_INT 2
32444: DEC
32445: ST_TO_ADDR
32446: LD_VAR 0 2
32450: PUSH
32451: FOR_TO
32452: IFFALSE 32544
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
32454: LD_ADDR_VAR 0 4
32458: PUSH
32459: LD_VAR 0 2
32463: PUSH
32464: LD_VAR 0 3
32468: ARRAY
32469: PPUSH
32470: LD_INT 3
32472: PPUSH
32473: CALL_OW 259
32477: PUSH
32478: LD_VAR 0 2
32482: PUSH
32483: LD_VAR 0 3
32487: ARRAY
32488: PPUSH
32489: CALL_OW 432
32493: MINUS
32494: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
32495: LD_VAR 0 4
32499: PUSH
32500: LD_VAR 0 5
32504: PPUSH
32505: LD_INT 3
32507: PPUSH
32508: CALL_OW 259
32512: PUSH
32513: LD_VAR 0 5
32517: PPUSH
32518: CALL_OW 432
32522: MINUS
32523: GREATEREQUAL
32524: IFFALSE 32542
// mech := result [ i ] ;
32526: LD_ADDR_VAR 0 5
32530: PUSH
32531: LD_VAR 0 2
32535: PUSH
32536: LD_VAR 0 3
32540: ARRAY
32541: ST_TO_ADDR
// end ;
32542: GO 32451
32544: POP
32545: POP
// end ; ComLinkTo ( vehicle , mech ) ;
32546: LD_VAR 0 1
32550: PPUSH
32551: LD_VAR 0 5
32555: PPUSH
32556: CALL_OW 135
// end ;
32560: LD_VAR 0 2
32564: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
32565: LD_INT 0
32567: PPUSH
32568: PPUSH
32569: PPUSH
32570: PPUSH
32571: PPUSH
32572: PPUSH
32573: PPUSH
32574: PPUSH
32575: PPUSH
32576: PPUSH
32577: PPUSH
32578: PPUSH
32579: PPUSH
// result := [ ] ;
32580: LD_ADDR_VAR 0 7
32584: PUSH
32585: EMPTY
32586: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
32587: LD_VAR 0 1
32591: PPUSH
32592: CALL_OW 266
32596: PUSH
32597: LD_INT 0
32599: PUSH
32600: LD_INT 1
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: IN
32607: NOT
32608: IFFALSE 32612
// exit ;
32610: GO 34246
// if name then
32612: LD_VAR 0 3
32616: IFFALSE 32632
// SetBName ( base_dep , name ) ;
32618: LD_VAR 0 1
32622: PPUSH
32623: LD_VAR 0 3
32627: PPUSH
32628: CALL_OW 500
// base := GetBase ( base_dep ) ;
32632: LD_ADDR_VAR 0 15
32636: PUSH
32637: LD_VAR 0 1
32641: PPUSH
32642: CALL_OW 274
32646: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
32647: LD_ADDR_VAR 0 16
32651: PUSH
32652: LD_VAR 0 1
32656: PPUSH
32657: CALL_OW 255
32661: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
32662: LD_ADDR_VAR 0 17
32666: PUSH
32667: LD_VAR 0 1
32671: PPUSH
32672: CALL_OW 248
32676: ST_TO_ADDR
// if sources then
32677: LD_VAR 0 5
32681: IFFALSE 32728
// for i = 1 to 3 do
32683: LD_ADDR_VAR 0 8
32687: PUSH
32688: DOUBLE
32689: LD_INT 1
32691: DEC
32692: ST_TO_ADDR
32693: LD_INT 3
32695: PUSH
32696: FOR_TO
32697: IFFALSE 32726
// AddResourceType ( base , i , sources [ i ] ) ;
32699: LD_VAR 0 15
32703: PPUSH
32704: LD_VAR 0 8
32708: PPUSH
32709: LD_VAR 0 5
32713: PUSH
32714: LD_VAR 0 8
32718: ARRAY
32719: PPUSH
32720: CALL_OW 276
32724: GO 32696
32726: POP
32727: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
32728: LD_ADDR_VAR 0 18
32732: PUSH
32733: LD_VAR 0 15
32737: PPUSH
32738: LD_VAR 0 2
32742: PPUSH
32743: LD_INT 1
32745: PPUSH
32746: CALL 31989 0 3
32750: ST_TO_ADDR
// InitHc ;
32751: CALL_OW 19
// InitUc ;
32755: CALL_OW 18
// uc_side := side ;
32759: LD_ADDR_OWVAR 20
32763: PUSH
32764: LD_VAR 0 16
32768: ST_TO_ADDR
// uc_nation := nation ;
32769: LD_ADDR_OWVAR 21
32773: PUSH
32774: LD_VAR 0 17
32778: ST_TO_ADDR
// if buildings then
32779: LD_VAR 0 18
32783: IFFALSE 34105
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
32785: LD_ADDR_VAR 0 19
32789: PUSH
32790: LD_VAR 0 18
32794: PPUSH
32795: LD_INT 2
32797: PUSH
32798: LD_INT 30
32800: PUSH
32801: LD_INT 29
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: LD_INT 30
32810: PUSH
32811: LD_INT 30
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: EMPTY
32819: LIST
32820: LIST
32821: LIST
32822: PPUSH
32823: CALL_OW 72
32827: ST_TO_ADDR
// if tmp then
32828: LD_VAR 0 19
32832: IFFALSE 32880
// for i in tmp do
32834: LD_ADDR_VAR 0 8
32838: PUSH
32839: LD_VAR 0 19
32843: PUSH
32844: FOR_IN
32845: IFFALSE 32878
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
32847: LD_VAR 0 8
32851: PPUSH
32852: CALL_OW 250
32856: PPUSH
32857: LD_VAR 0 8
32861: PPUSH
32862: CALL_OW 251
32866: PPUSH
32867: LD_VAR 0 16
32871: PPUSH
32872: CALL_OW 441
32876: GO 32844
32878: POP
32879: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
32880: LD_VAR 0 18
32884: PPUSH
32885: LD_INT 2
32887: PUSH
32888: LD_INT 30
32890: PUSH
32891: LD_INT 32
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: LD_INT 30
32900: PUSH
32901: LD_INT 33
32903: PUSH
32904: EMPTY
32905: LIST
32906: LIST
32907: PUSH
32908: EMPTY
32909: LIST
32910: LIST
32911: LIST
32912: PPUSH
32913: CALL_OW 72
32917: IFFALSE 33005
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
32919: LD_ADDR_VAR 0 8
32923: PUSH
32924: LD_VAR 0 18
32928: PPUSH
32929: LD_INT 2
32931: PUSH
32932: LD_INT 30
32934: PUSH
32935: LD_INT 32
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: PUSH
32942: LD_INT 30
32944: PUSH
32945: LD_INT 33
32947: PUSH
32948: EMPTY
32949: LIST
32950: LIST
32951: PUSH
32952: EMPTY
32953: LIST
32954: LIST
32955: LIST
32956: PPUSH
32957: CALL_OW 72
32961: PUSH
32962: FOR_IN
32963: IFFALSE 33003
// begin if not GetBWeapon ( i ) then
32965: LD_VAR 0 8
32969: PPUSH
32970: CALL_OW 269
32974: NOT
32975: IFFALSE 33001
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
32977: LD_VAR 0 8
32981: PPUSH
32982: LD_VAR 0 8
32986: PPUSH
32987: LD_VAR 0 2
32991: PPUSH
32992: CALL 34251 0 2
32996: PPUSH
32997: CALL_OW 431
// end ;
33001: GO 32962
33003: POP
33004: POP
// end ; for i = 1 to personel do
33005: LD_ADDR_VAR 0 8
33009: PUSH
33010: DOUBLE
33011: LD_INT 1
33013: DEC
33014: ST_TO_ADDR
33015: LD_VAR 0 6
33019: PUSH
33020: FOR_TO
33021: IFFALSE 34085
// begin if i > 4 then
33023: LD_VAR 0 8
33027: PUSH
33028: LD_INT 4
33030: GREATER
33031: IFFALSE 33035
// break ;
33033: GO 34085
// case i of 1 :
33035: LD_VAR 0 8
33039: PUSH
33040: LD_INT 1
33042: DOUBLE
33043: EQUAL
33044: IFTRUE 33048
33046: GO 33128
33048: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
33049: LD_ADDR_VAR 0 12
33053: PUSH
33054: LD_VAR 0 18
33058: PPUSH
33059: LD_INT 22
33061: PUSH
33062: LD_VAR 0 16
33066: PUSH
33067: EMPTY
33068: LIST
33069: LIST
33070: PUSH
33071: LD_INT 58
33073: PUSH
33074: EMPTY
33075: LIST
33076: PUSH
33077: LD_INT 2
33079: PUSH
33080: LD_INT 30
33082: PUSH
33083: LD_INT 32
33085: PUSH
33086: EMPTY
33087: LIST
33088: LIST
33089: PUSH
33090: LD_INT 30
33092: PUSH
33093: LD_INT 4
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: PUSH
33100: LD_INT 30
33102: PUSH
33103: LD_INT 5
33105: PUSH
33106: EMPTY
33107: LIST
33108: LIST
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: PUSH
33116: EMPTY
33117: LIST
33118: LIST
33119: LIST
33120: PPUSH
33121: CALL_OW 72
33125: ST_TO_ADDR
33126: GO 33350
33128: LD_INT 2
33130: DOUBLE
33131: EQUAL
33132: IFTRUE 33136
33134: GO 33198
33136: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
33137: LD_ADDR_VAR 0 12
33141: PUSH
33142: LD_VAR 0 18
33146: PPUSH
33147: LD_INT 22
33149: PUSH
33150: LD_VAR 0 16
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: PUSH
33159: LD_INT 2
33161: PUSH
33162: LD_INT 30
33164: PUSH
33165: LD_INT 0
33167: PUSH
33168: EMPTY
33169: LIST
33170: LIST
33171: PUSH
33172: LD_INT 30
33174: PUSH
33175: LD_INT 1
33177: PUSH
33178: EMPTY
33179: LIST
33180: LIST
33181: PUSH
33182: EMPTY
33183: LIST
33184: LIST
33185: LIST
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: PPUSH
33191: CALL_OW 72
33195: ST_TO_ADDR
33196: GO 33350
33198: LD_INT 3
33200: DOUBLE
33201: EQUAL
33202: IFTRUE 33206
33204: GO 33268
33206: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
33207: LD_ADDR_VAR 0 12
33211: PUSH
33212: LD_VAR 0 18
33216: PPUSH
33217: LD_INT 22
33219: PUSH
33220: LD_VAR 0 16
33224: PUSH
33225: EMPTY
33226: LIST
33227: LIST
33228: PUSH
33229: LD_INT 2
33231: PUSH
33232: LD_INT 30
33234: PUSH
33235: LD_INT 2
33237: PUSH
33238: EMPTY
33239: LIST
33240: LIST
33241: PUSH
33242: LD_INT 30
33244: PUSH
33245: LD_INT 3
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: PUSH
33252: EMPTY
33253: LIST
33254: LIST
33255: LIST
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: PPUSH
33261: CALL_OW 72
33265: ST_TO_ADDR
33266: GO 33350
33268: LD_INT 4
33270: DOUBLE
33271: EQUAL
33272: IFTRUE 33276
33274: GO 33349
33276: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
33277: LD_ADDR_VAR 0 12
33281: PUSH
33282: LD_VAR 0 18
33286: PPUSH
33287: LD_INT 22
33289: PUSH
33290: LD_VAR 0 16
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: PUSH
33299: LD_INT 2
33301: PUSH
33302: LD_INT 30
33304: PUSH
33305: LD_INT 6
33307: PUSH
33308: EMPTY
33309: LIST
33310: LIST
33311: PUSH
33312: LD_INT 30
33314: PUSH
33315: LD_INT 7
33317: PUSH
33318: EMPTY
33319: LIST
33320: LIST
33321: PUSH
33322: LD_INT 30
33324: PUSH
33325: LD_INT 8
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: PUSH
33332: EMPTY
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: PUSH
33338: EMPTY
33339: LIST
33340: LIST
33341: PPUSH
33342: CALL_OW 72
33346: ST_TO_ADDR
33347: GO 33350
33349: POP
// if i = 1 then
33350: LD_VAR 0 8
33354: PUSH
33355: LD_INT 1
33357: EQUAL
33358: IFFALSE 33469
// begin tmp := [ ] ;
33360: LD_ADDR_VAR 0 19
33364: PUSH
33365: EMPTY
33366: ST_TO_ADDR
// for j in f do
33367: LD_ADDR_VAR 0 9
33371: PUSH
33372: LD_VAR 0 12
33376: PUSH
33377: FOR_IN
33378: IFFALSE 33451
// if GetBType ( j ) = b_bunker then
33380: LD_VAR 0 9
33384: PPUSH
33385: CALL_OW 266
33389: PUSH
33390: LD_INT 32
33392: EQUAL
33393: IFFALSE 33420
// tmp := Insert ( tmp , 1 , j ) else
33395: LD_ADDR_VAR 0 19
33399: PUSH
33400: LD_VAR 0 19
33404: PPUSH
33405: LD_INT 1
33407: PPUSH
33408: LD_VAR 0 9
33412: PPUSH
33413: CALL_OW 2
33417: ST_TO_ADDR
33418: GO 33449
// tmp := Insert ( tmp , tmp + 1 , j ) ;
33420: LD_ADDR_VAR 0 19
33424: PUSH
33425: LD_VAR 0 19
33429: PPUSH
33430: LD_VAR 0 19
33434: PUSH
33435: LD_INT 1
33437: PLUS
33438: PPUSH
33439: LD_VAR 0 9
33443: PPUSH
33444: CALL_OW 2
33448: ST_TO_ADDR
33449: GO 33377
33451: POP
33452: POP
// if tmp then
33453: LD_VAR 0 19
33457: IFFALSE 33469
// f := tmp ;
33459: LD_ADDR_VAR 0 12
33463: PUSH
33464: LD_VAR 0 19
33468: ST_TO_ADDR
// end ; x := personel [ i ] ;
33469: LD_ADDR_VAR 0 13
33473: PUSH
33474: LD_VAR 0 6
33478: PUSH
33479: LD_VAR 0 8
33483: ARRAY
33484: ST_TO_ADDR
// if x = - 1 then
33485: LD_VAR 0 13
33489: PUSH
33490: LD_INT 1
33492: NEG
33493: EQUAL
33494: IFFALSE 33703
// begin for j in f do
33496: LD_ADDR_VAR 0 9
33500: PUSH
33501: LD_VAR 0 12
33505: PUSH
33506: FOR_IN
33507: IFFALSE 33699
// repeat InitHc ;
33509: CALL_OW 19
// if GetBType ( j ) = b_barracks then
33513: LD_VAR 0 9
33517: PPUSH
33518: CALL_OW 266
33522: PUSH
33523: LD_INT 5
33525: EQUAL
33526: IFFALSE 33596
// begin if UnitsInside ( j ) < 3 then
33528: LD_VAR 0 9
33532: PPUSH
33533: CALL_OW 313
33537: PUSH
33538: LD_INT 3
33540: LESS
33541: IFFALSE 33577
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33543: LD_INT 0
33545: PPUSH
33546: LD_INT 5
33548: PUSH
33549: LD_INT 8
33551: PUSH
33552: LD_INT 9
33554: PUSH
33555: EMPTY
33556: LIST
33557: LIST
33558: LIST
33559: PUSH
33560: LD_VAR 0 17
33564: ARRAY
33565: PPUSH
33566: LD_VAR 0 4
33570: PPUSH
33571: CALL_OW 380
33575: GO 33594
// PrepareHuman ( false , i , skill ) ;
33577: LD_INT 0
33579: PPUSH
33580: LD_VAR 0 8
33584: PPUSH
33585: LD_VAR 0 4
33589: PPUSH
33590: CALL_OW 380
// end else
33594: GO 33613
// PrepareHuman ( false , i , skill ) ;
33596: LD_INT 0
33598: PPUSH
33599: LD_VAR 0 8
33603: PPUSH
33604: LD_VAR 0 4
33608: PPUSH
33609: CALL_OW 380
// un := CreateHuman ;
33613: LD_ADDR_VAR 0 14
33617: PUSH
33618: CALL_OW 44
33622: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33623: LD_ADDR_VAR 0 7
33627: PUSH
33628: LD_VAR 0 7
33632: PPUSH
33633: LD_INT 1
33635: PPUSH
33636: LD_VAR 0 14
33640: PPUSH
33641: CALL_OW 2
33645: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
33646: LD_VAR 0 14
33650: PPUSH
33651: LD_VAR 0 9
33655: PPUSH
33656: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
33660: LD_VAR 0 9
33664: PPUSH
33665: CALL_OW 313
33669: PUSH
33670: LD_INT 6
33672: EQUAL
33673: PUSH
33674: LD_VAR 0 9
33678: PPUSH
33679: CALL_OW 266
33683: PUSH
33684: LD_INT 32
33686: PUSH
33687: LD_INT 31
33689: PUSH
33690: EMPTY
33691: LIST
33692: LIST
33693: IN
33694: OR
33695: IFFALSE 33509
33697: GO 33506
33699: POP
33700: POP
// end else
33701: GO 34083
// for j = 1 to x do
33703: LD_ADDR_VAR 0 9
33707: PUSH
33708: DOUBLE
33709: LD_INT 1
33711: DEC
33712: ST_TO_ADDR
33713: LD_VAR 0 13
33717: PUSH
33718: FOR_TO
33719: IFFALSE 34081
// begin InitHc ;
33721: CALL_OW 19
// if not f then
33725: LD_VAR 0 12
33729: NOT
33730: IFFALSE 33819
// begin PrepareHuman ( false , i , skill ) ;
33732: LD_INT 0
33734: PPUSH
33735: LD_VAR 0 8
33739: PPUSH
33740: LD_VAR 0 4
33744: PPUSH
33745: CALL_OW 380
// un := CreateHuman ;
33749: LD_ADDR_VAR 0 14
33753: PUSH
33754: CALL_OW 44
33758: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33759: LD_ADDR_VAR 0 7
33763: PUSH
33764: LD_VAR 0 7
33768: PPUSH
33769: LD_INT 1
33771: PPUSH
33772: LD_VAR 0 14
33776: PPUSH
33777: CALL_OW 2
33781: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33782: LD_VAR 0 14
33786: PPUSH
33787: LD_VAR 0 1
33791: PPUSH
33792: CALL_OW 250
33796: PPUSH
33797: LD_VAR 0 1
33801: PPUSH
33802: CALL_OW 251
33806: PPUSH
33807: LD_INT 10
33809: PPUSH
33810: LD_INT 0
33812: PPUSH
33813: CALL_OW 50
// continue ;
33817: GO 33718
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
33819: LD_VAR 0 12
33823: PUSH
33824: LD_INT 1
33826: ARRAY
33827: PPUSH
33828: CALL_OW 313
33832: PUSH
33833: LD_VAR 0 12
33837: PUSH
33838: LD_INT 1
33840: ARRAY
33841: PPUSH
33842: CALL_OW 266
33846: PUSH
33847: LD_INT 32
33849: PUSH
33850: LD_INT 31
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: IN
33857: AND
33858: PUSH
33859: LD_VAR 0 12
33863: PUSH
33864: LD_INT 1
33866: ARRAY
33867: PPUSH
33868: CALL_OW 313
33872: PUSH
33873: LD_INT 6
33875: EQUAL
33876: OR
33877: IFFALSE 33897
// f := Delete ( f , 1 ) ;
33879: LD_ADDR_VAR 0 12
33883: PUSH
33884: LD_VAR 0 12
33888: PPUSH
33889: LD_INT 1
33891: PPUSH
33892: CALL_OW 3
33896: ST_TO_ADDR
// if not f then
33897: LD_VAR 0 12
33901: NOT
33902: IFFALSE 33920
// begin x := x + 2 ;
33904: LD_ADDR_VAR 0 13
33908: PUSH
33909: LD_VAR 0 13
33913: PUSH
33914: LD_INT 2
33916: PLUS
33917: ST_TO_ADDR
// continue ;
33918: GO 33718
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
33920: LD_VAR 0 12
33924: PUSH
33925: LD_INT 1
33927: ARRAY
33928: PPUSH
33929: CALL_OW 266
33933: PUSH
33934: LD_INT 5
33936: EQUAL
33937: IFFALSE 34011
// begin if UnitsInside ( f [ 1 ] ) < 3 then
33939: LD_VAR 0 12
33943: PUSH
33944: LD_INT 1
33946: ARRAY
33947: PPUSH
33948: CALL_OW 313
33952: PUSH
33953: LD_INT 3
33955: LESS
33956: IFFALSE 33992
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33958: LD_INT 0
33960: PPUSH
33961: LD_INT 5
33963: PUSH
33964: LD_INT 8
33966: PUSH
33967: LD_INT 9
33969: PUSH
33970: EMPTY
33971: LIST
33972: LIST
33973: LIST
33974: PUSH
33975: LD_VAR 0 17
33979: ARRAY
33980: PPUSH
33981: LD_VAR 0 4
33985: PPUSH
33986: CALL_OW 380
33990: GO 34009
// PrepareHuman ( false , i , skill ) ;
33992: LD_INT 0
33994: PPUSH
33995: LD_VAR 0 8
33999: PPUSH
34000: LD_VAR 0 4
34004: PPUSH
34005: CALL_OW 380
// end else
34009: GO 34028
// PrepareHuman ( false , i , skill ) ;
34011: LD_INT 0
34013: PPUSH
34014: LD_VAR 0 8
34018: PPUSH
34019: LD_VAR 0 4
34023: PPUSH
34024: CALL_OW 380
// un := CreateHuman ;
34028: LD_ADDR_VAR 0 14
34032: PUSH
34033: CALL_OW 44
34037: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
34038: LD_ADDR_VAR 0 7
34042: PUSH
34043: LD_VAR 0 7
34047: PPUSH
34048: LD_INT 1
34050: PPUSH
34051: LD_VAR 0 14
34055: PPUSH
34056: CALL_OW 2
34060: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
34061: LD_VAR 0 14
34065: PPUSH
34066: LD_VAR 0 12
34070: PUSH
34071: LD_INT 1
34073: ARRAY
34074: PPUSH
34075: CALL_OW 52
// end ;
34079: GO 33718
34081: POP
34082: POP
// end ;
34083: GO 33020
34085: POP
34086: POP
// result := result ^ buildings ;
34087: LD_ADDR_VAR 0 7
34091: PUSH
34092: LD_VAR 0 7
34096: PUSH
34097: LD_VAR 0 18
34101: ADD
34102: ST_TO_ADDR
// end else
34103: GO 34246
// begin for i = 1 to personel do
34105: LD_ADDR_VAR 0 8
34109: PUSH
34110: DOUBLE
34111: LD_INT 1
34113: DEC
34114: ST_TO_ADDR
34115: LD_VAR 0 6
34119: PUSH
34120: FOR_TO
34121: IFFALSE 34244
// begin if i > 4 then
34123: LD_VAR 0 8
34127: PUSH
34128: LD_INT 4
34130: GREATER
34131: IFFALSE 34135
// break ;
34133: GO 34244
// x := personel [ i ] ;
34135: LD_ADDR_VAR 0 13
34139: PUSH
34140: LD_VAR 0 6
34144: PUSH
34145: LD_VAR 0 8
34149: ARRAY
34150: ST_TO_ADDR
// if x = - 1 then
34151: LD_VAR 0 13
34155: PUSH
34156: LD_INT 1
34158: NEG
34159: EQUAL
34160: IFFALSE 34164
// continue ;
34162: GO 34120
// PrepareHuman ( false , i , skill ) ;
34164: LD_INT 0
34166: PPUSH
34167: LD_VAR 0 8
34171: PPUSH
34172: LD_VAR 0 4
34176: PPUSH
34177: CALL_OW 380
// un := CreateHuman ;
34181: LD_ADDR_VAR 0 14
34185: PUSH
34186: CALL_OW 44
34190: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
34191: LD_VAR 0 14
34195: PPUSH
34196: LD_VAR 0 1
34200: PPUSH
34201: CALL_OW 250
34205: PPUSH
34206: LD_VAR 0 1
34210: PPUSH
34211: CALL_OW 251
34215: PPUSH
34216: LD_INT 10
34218: PPUSH
34219: LD_INT 0
34221: PPUSH
34222: CALL_OW 50
// result := result ^ un ;
34226: LD_ADDR_VAR 0 7
34230: PUSH
34231: LD_VAR 0 7
34235: PUSH
34236: LD_VAR 0 14
34240: ADD
34241: ST_TO_ADDR
// end ;
34242: GO 34120
34244: POP
34245: POP
// end ; end ;
34246: LD_VAR 0 7
34250: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
34251: LD_INT 0
34253: PPUSH
34254: PPUSH
34255: PPUSH
34256: PPUSH
34257: PPUSH
34258: PPUSH
34259: PPUSH
34260: PPUSH
34261: PPUSH
34262: PPUSH
34263: PPUSH
34264: PPUSH
34265: PPUSH
34266: PPUSH
34267: PPUSH
34268: PPUSH
// result := false ;
34269: LD_ADDR_VAR 0 3
34273: PUSH
34274: LD_INT 0
34276: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
34277: LD_VAR 0 1
34281: NOT
34282: PUSH
34283: LD_VAR 0 1
34287: PPUSH
34288: CALL_OW 266
34292: PUSH
34293: LD_INT 32
34295: PUSH
34296: LD_INT 33
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: IN
34303: NOT
34304: OR
34305: IFFALSE 34309
// exit ;
34307: GO 35418
// nat := GetNation ( tower ) ;
34309: LD_ADDR_VAR 0 12
34313: PUSH
34314: LD_VAR 0 1
34318: PPUSH
34319: CALL_OW 248
34323: ST_TO_ADDR
// side := GetSide ( tower ) ;
34324: LD_ADDR_VAR 0 16
34328: PUSH
34329: LD_VAR 0 1
34333: PPUSH
34334: CALL_OW 255
34338: ST_TO_ADDR
// x := GetX ( tower ) ;
34339: LD_ADDR_VAR 0 10
34343: PUSH
34344: LD_VAR 0 1
34348: PPUSH
34349: CALL_OW 250
34353: ST_TO_ADDR
// y := GetY ( tower ) ;
34354: LD_ADDR_VAR 0 11
34358: PUSH
34359: LD_VAR 0 1
34363: PPUSH
34364: CALL_OW 251
34368: ST_TO_ADDR
// if not x or not y then
34369: LD_VAR 0 10
34373: NOT
34374: PUSH
34375: LD_VAR 0 11
34379: NOT
34380: OR
34381: IFFALSE 34385
// exit ;
34383: GO 35418
// weapon := 0 ;
34385: LD_ADDR_VAR 0 18
34389: PUSH
34390: LD_INT 0
34392: ST_TO_ADDR
// fac_list := [ ] ;
34393: LD_ADDR_VAR 0 17
34397: PUSH
34398: EMPTY
34399: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
34400: LD_ADDR_VAR 0 6
34404: PUSH
34405: LD_VAR 0 1
34409: PPUSH
34410: CALL_OW 274
34414: PPUSH
34415: LD_VAR 0 2
34419: PPUSH
34420: LD_INT 0
34422: PPUSH
34423: CALL 31989 0 3
34427: PPUSH
34428: LD_INT 30
34430: PUSH
34431: LD_INT 3
34433: PUSH
34434: EMPTY
34435: LIST
34436: LIST
34437: PPUSH
34438: CALL_OW 72
34442: ST_TO_ADDR
// if not factories then
34443: LD_VAR 0 6
34447: NOT
34448: IFFALSE 34452
// exit ;
34450: GO 35418
// for i in factories do
34452: LD_ADDR_VAR 0 8
34456: PUSH
34457: LD_VAR 0 6
34461: PUSH
34462: FOR_IN
34463: IFFALSE 34488
// fac_list := fac_list union AvailableWeaponList ( i ) ;
34465: LD_ADDR_VAR 0 17
34469: PUSH
34470: LD_VAR 0 17
34474: PUSH
34475: LD_VAR 0 8
34479: PPUSH
34480: CALL_OW 478
34484: UNION
34485: ST_TO_ADDR
34486: GO 34462
34488: POP
34489: POP
// if not fac_list then
34490: LD_VAR 0 17
34494: NOT
34495: IFFALSE 34499
// exit ;
34497: GO 35418
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
34499: LD_ADDR_VAR 0 5
34503: PUSH
34504: LD_INT 4
34506: PUSH
34507: LD_INT 5
34509: PUSH
34510: LD_INT 9
34512: PUSH
34513: LD_INT 10
34515: PUSH
34516: LD_INT 6
34518: PUSH
34519: LD_INT 7
34521: PUSH
34522: LD_INT 11
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: LIST
34529: LIST
34530: LIST
34531: LIST
34532: LIST
34533: PUSH
34534: LD_INT 27
34536: PUSH
34537: LD_INT 28
34539: PUSH
34540: LD_INT 26
34542: PUSH
34543: LD_INT 30
34545: PUSH
34546: EMPTY
34547: LIST
34548: LIST
34549: LIST
34550: LIST
34551: PUSH
34552: LD_INT 43
34554: PUSH
34555: LD_INT 44
34557: PUSH
34558: LD_INT 46
34560: PUSH
34561: LD_INT 45
34563: PUSH
34564: LD_INT 47
34566: PUSH
34567: LD_INT 49
34569: PUSH
34570: EMPTY
34571: LIST
34572: LIST
34573: LIST
34574: LIST
34575: LIST
34576: LIST
34577: PUSH
34578: EMPTY
34579: LIST
34580: LIST
34581: LIST
34582: PUSH
34583: LD_VAR 0 12
34587: ARRAY
34588: ST_TO_ADDR
// list := list isect fac_list ;
34589: LD_ADDR_VAR 0 5
34593: PUSH
34594: LD_VAR 0 5
34598: PUSH
34599: LD_VAR 0 17
34603: ISECT
34604: ST_TO_ADDR
// if not list then
34605: LD_VAR 0 5
34609: NOT
34610: IFFALSE 34614
// exit ;
34612: GO 35418
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
34614: LD_VAR 0 12
34618: PUSH
34619: LD_INT 3
34621: EQUAL
34622: PUSH
34623: LD_INT 49
34625: PUSH
34626: LD_VAR 0 5
34630: IN
34631: AND
34632: PUSH
34633: LD_INT 31
34635: PPUSH
34636: LD_VAR 0 16
34640: PPUSH
34641: CALL_OW 321
34645: PUSH
34646: LD_INT 2
34648: EQUAL
34649: AND
34650: IFFALSE 34710
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
34652: LD_INT 22
34654: PUSH
34655: LD_VAR 0 16
34659: PUSH
34660: EMPTY
34661: LIST
34662: LIST
34663: PUSH
34664: LD_INT 35
34666: PUSH
34667: LD_INT 49
34669: PUSH
34670: EMPTY
34671: LIST
34672: LIST
34673: PUSH
34674: LD_INT 91
34676: PUSH
34677: LD_VAR 0 1
34681: PUSH
34682: LD_INT 10
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: LIST
34689: PUSH
34690: EMPTY
34691: LIST
34692: LIST
34693: LIST
34694: PPUSH
34695: CALL_OW 69
34699: NOT
34700: IFFALSE 34710
// weapon := ru_time_lapser ;
34702: LD_ADDR_VAR 0 18
34706: PUSH
34707: LD_INT 49
34709: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
34710: LD_VAR 0 12
34714: PUSH
34715: LD_INT 1
34717: PUSH
34718: LD_INT 2
34720: PUSH
34721: EMPTY
34722: LIST
34723: LIST
34724: IN
34725: PUSH
34726: LD_INT 11
34728: PUSH
34729: LD_VAR 0 5
34733: IN
34734: PUSH
34735: LD_INT 30
34737: PUSH
34738: LD_VAR 0 5
34742: IN
34743: OR
34744: AND
34745: PUSH
34746: LD_INT 6
34748: PPUSH
34749: LD_VAR 0 16
34753: PPUSH
34754: CALL_OW 321
34758: PUSH
34759: LD_INT 2
34761: EQUAL
34762: AND
34763: IFFALSE 34928
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
34765: LD_INT 22
34767: PUSH
34768: LD_VAR 0 16
34772: PUSH
34773: EMPTY
34774: LIST
34775: LIST
34776: PUSH
34777: LD_INT 2
34779: PUSH
34780: LD_INT 35
34782: PUSH
34783: LD_INT 11
34785: PUSH
34786: EMPTY
34787: LIST
34788: LIST
34789: PUSH
34790: LD_INT 35
34792: PUSH
34793: LD_INT 30
34795: PUSH
34796: EMPTY
34797: LIST
34798: LIST
34799: PUSH
34800: EMPTY
34801: LIST
34802: LIST
34803: LIST
34804: PUSH
34805: LD_INT 91
34807: PUSH
34808: LD_VAR 0 1
34812: PUSH
34813: LD_INT 18
34815: PUSH
34816: EMPTY
34817: LIST
34818: LIST
34819: LIST
34820: PUSH
34821: EMPTY
34822: LIST
34823: LIST
34824: LIST
34825: PPUSH
34826: CALL_OW 69
34830: NOT
34831: PUSH
34832: LD_INT 22
34834: PUSH
34835: LD_VAR 0 16
34839: PUSH
34840: EMPTY
34841: LIST
34842: LIST
34843: PUSH
34844: LD_INT 2
34846: PUSH
34847: LD_INT 30
34849: PUSH
34850: LD_INT 32
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PUSH
34857: LD_INT 30
34859: PUSH
34860: LD_INT 33
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: PUSH
34867: EMPTY
34868: LIST
34869: LIST
34870: LIST
34871: PUSH
34872: LD_INT 91
34874: PUSH
34875: LD_VAR 0 1
34879: PUSH
34880: LD_INT 12
34882: PUSH
34883: EMPTY
34884: LIST
34885: LIST
34886: LIST
34887: PUSH
34888: EMPTY
34889: LIST
34890: LIST
34891: LIST
34892: PUSH
34893: EMPTY
34894: LIST
34895: PPUSH
34896: CALL_OW 69
34900: PUSH
34901: LD_INT 2
34903: GREATER
34904: AND
34905: IFFALSE 34928
// weapon := [ us_radar , ar_radar ] [ nat ] ;
34907: LD_ADDR_VAR 0 18
34911: PUSH
34912: LD_INT 11
34914: PUSH
34915: LD_INT 30
34917: PUSH
34918: EMPTY
34919: LIST
34920: LIST
34921: PUSH
34922: LD_VAR 0 12
34926: ARRAY
34927: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
34928: LD_VAR 0 18
34932: NOT
34933: PUSH
34934: LD_INT 40
34936: PPUSH
34937: LD_VAR 0 16
34941: PPUSH
34942: CALL_OW 321
34946: PUSH
34947: LD_INT 2
34949: EQUAL
34950: AND
34951: PUSH
34952: LD_INT 7
34954: PUSH
34955: LD_VAR 0 5
34959: IN
34960: PUSH
34961: LD_INT 28
34963: PUSH
34964: LD_VAR 0 5
34968: IN
34969: OR
34970: PUSH
34971: LD_INT 45
34973: PUSH
34974: LD_VAR 0 5
34978: IN
34979: OR
34980: AND
34981: IFFALSE 35235
// begin hex := GetHexInfo ( x , y ) ;
34983: LD_ADDR_VAR 0 4
34987: PUSH
34988: LD_VAR 0 10
34992: PPUSH
34993: LD_VAR 0 11
34997: PPUSH
34998: CALL_OW 546
35002: ST_TO_ADDR
// if hex [ 1 ] then
35003: LD_VAR 0 4
35007: PUSH
35008: LD_INT 1
35010: ARRAY
35011: IFFALSE 35015
// exit ;
35013: GO 35418
// height := hex [ 2 ] ;
35015: LD_ADDR_VAR 0 15
35019: PUSH
35020: LD_VAR 0 4
35024: PUSH
35025: LD_INT 2
35027: ARRAY
35028: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
35029: LD_ADDR_VAR 0 14
35033: PUSH
35034: LD_INT 0
35036: PUSH
35037: LD_INT 2
35039: PUSH
35040: LD_INT 3
35042: PUSH
35043: LD_INT 5
35045: PUSH
35046: EMPTY
35047: LIST
35048: LIST
35049: LIST
35050: LIST
35051: ST_TO_ADDR
// for i in tmp do
35052: LD_ADDR_VAR 0 8
35056: PUSH
35057: LD_VAR 0 14
35061: PUSH
35062: FOR_IN
35063: IFFALSE 35233
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
35065: LD_ADDR_VAR 0 9
35069: PUSH
35070: LD_VAR 0 10
35074: PPUSH
35075: LD_VAR 0 8
35079: PPUSH
35080: LD_INT 5
35082: PPUSH
35083: CALL_OW 272
35087: PUSH
35088: LD_VAR 0 11
35092: PPUSH
35093: LD_VAR 0 8
35097: PPUSH
35098: LD_INT 5
35100: PPUSH
35101: CALL_OW 273
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
35110: LD_VAR 0 9
35114: PUSH
35115: LD_INT 1
35117: ARRAY
35118: PPUSH
35119: LD_VAR 0 9
35123: PUSH
35124: LD_INT 2
35126: ARRAY
35127: PPUSH
35128: CALL_OW 488
35132: IFFALSE 35231
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
35134: LD_ADDR_VAR 0 4
35138: PUSH
35139: LD_VAR 0 9
35143: PUSH
35144: LD_INT 1
35146: ARRAY
35147: PPUSH
35148: LD_VAR 0 9
35152: PUSH
35153: LD_INT 2
35155: ARRAY
35156: PPUSH
35157: CALL_OW 546
35161: ST_TO_ADDR
// if hex [ 1 ] then
35162: LD_VAR 0 4
35166: PUSH
35167: LD_INT 1
35169: ARRAY
35170: IFFALSE 35174
// continue ;
35172: GO 35062
// h := hex [ 2 ] ;
35174: LD_ADDR_VAR 0 13
35178: PUSH
35179: LD_VAR 0 4
35183: PUSH
35184: LD_INT 2
35186: ARRAY
35187: ST_TO_ADDR
// if h + 7 < height then
35188: LD_VAR 0 13
35192: PUSH
35193: LD_INT 7
35195: PLUS
35196: PUSH
35197: LD_VAR 0 15
35201: LESS
35202: IFFALSE 35231
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
35204: LD_ADDR_VAR 0 18
35208: PUSH
35209: LD_INT 7
35211: PUSH
35212: LD_INT 28
35214: PUSH
35215: LD_INT 45
35217: PUSH
35218: EMPTY
35219: LIST
35220: LIST
35221: LIST
35222: PUSH
35223: LD_VAR 0 12
35227: ARRAY
35228: ST_TO_ADDR
// break ;
35229: GO 35233
// end ; end ; end ;
35231: GO 35062
35233: POP
35234: POP
// end ; if not weapon then
35235: LD_VAR 0 18
35239: NOT
35240: IFFALSE 35300
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
35242: LD_ADDR_VAR 0 5
35246: PUSH
35247: LD_VAR 0 5
35251: PUSH
35252: LD_INT 11
35254: PUSH
35255: LD_INT 30
35257: PUSH
35258: LD_INT 49
35260: PUSH
35261: EMPTY
35262: LIST
35263: LIST
35264: LIST
35265: DIFF
35266: ST_TO_ADDR
// if not list then
35267: LD_VAR 0 5
35271: NOT
35272: IFFALSE 35276
// exit ;
35274: GO 35418
// weapon := list [ rand ( 1 , list ) ] ;
35276: LD_ADDR_VAR 0 18
35280: PUSH
35281: LD_VAR 0 5
35285: PUSH
35286: LD_INT 1
35288: PPUSH
35289: LD_VAR 0 5
35293: PPUSH
35294: CALL_OW 12
35298: ARRAY
35299: ST_TO_ADDR
// end ; if weapon then
35300: LD_VAR 0 18
35304: IFFALSE 35418
// begin tmp := CostOfWeapon ( weapon ) ;
35306: LD_ADDR_VAR 0 14
35310: PUSH
35311: LD_VAR 0 18
35315: PPUSH
35316: CALL_OW 451
35320: ST_TO_ADDR
// j := GetBase ( tower ) ;
35321: LD_ADDR_VAR 0 9
35325: PUSH
35326: LD_VAR 0 1
35330: PPUSH
35331: CALL_OW 274
35335: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
35336: LD_VAR 0 9
35340: PPUSH
35341: LD_INT 1
35343: PPUSH
35344: CALL_OW 275
35348: PUSH
35349: LD_VAR 0 14
35353: PUSH
35354: LD_INT 1
35356: ARRAY
35357: GREATEREQUAL
35358: PUSH
35359: LD_VAR 0 9
35363: PPUSH
35364: LD_INT 2
35366: PPUSH
35367: CALL_OW 275
35371: PUSH
35372: LD_VAR 0 14
35376: PUSH
35377: LD_INT 2
35379: ARRAY
35380: GREATEREQUAL
35381: AND
35382: PUSH
35383: LD_VAR 0 9
35387: PPUSH
35388: LD_INT 3
35390: PPUSH
35391: CALL_OW 275
35395: PUSH
35396: LD_VAR 0 14
35400: PUSH
35401: LD_INT 3
35403: ARRAY
35404: GREATEREQUAL
35405: AND
35406: IFFALSE 35418
// result := weapon ;
35408: LD_ADDR_VAR 0 3
35412: PUSH
35413: LD_VAR 0 18
35417: ST_TO_ADDR
// end ; end ;
35418: LD_VAR 0 3
35422: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
35423: LD_INT 0
35425: PPUSH
35426: PPUSH
// result := true ;
35427: LD_ADDR_VAR 0 3
35431: PUSH
35432: LD_INT 1
35434: ST_TO_ADDR
// if array1 = array2 then
35435: LD_VAR 0 1
35439: PUSH
35440: LD_VAR 0 2
35444: EQUAL
35445: IFFALSE 35505
// begin for i = 1 to array1 do
35447: LD_ADDR_VAR 0 4
35451: PUSH
35452: DOUBLE
35453: LD_INT 1
35455: DEC
35456: ST_TO_ADDR
35457: LD_VAR 0 1
35461: PUSH
35462: FOR_TO
35463: IFFALSE 35501
// if array1 [ i ] <> array2 [ i ] then
35465: LD_VAR 0 1
35469: PUSH
35470: LD_VAR 0 4
35474: ARRAY
35475: PUSH
35476: LD_VAR 0 2
35480: PUSH
35481: LD_VAR 0 4
35485: ARRAY
35486: NONEQUAL
35487: IFFALSE 35499
// begin result := false ;
35489: LD_ADDR_VAR 0 3
35493: PUSH
35494: LD_INT 0
35496: ST_TO_ADDR
// break ;
35497: GO 35501
// end ;
35499: GO 35462
35501: POP
35502: POP
// end else
35503: GO 35513
// result := false ;
35505: LD_ADDR_VAR 0 3
35509: PUSH
35510: LD_INT 0
35512: ST_TO_ADDR
// end ;
35513: LD_VAR 0 3
35517: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
35518: LD_INT 0
35520: PPUSH
35521: PPUSH
// if not array1 or not array2 then
35522: LD_VAR 0 1
35526: NOT
35527: PUSH
35528: LD_VAR 0 2
35532: NOT
35533: OR
35534: IFFALSE 35538
// exit ;
35536: GO 35602
// result := true ;
35538: LD_ADDR_VAR 0 3
35542: PUSH
35543: LD_INT 1
35545: ST_TO_ADDR
// for i = 1 to array1 do
35546: LD_ADDR_VAR 0 4
35550: PUSH
35551: DOUBLE
35552: LD_INT 1
35554: DEC
35555: ST_TO_ADDR
35556: LD_VAR 0 1
35560: PUSH
35561: FOR_TO
35562: IFFALSE 35600
// if array1 [ i ] <> array2 [ i ] then
35564: LD_VAR 0 1
35568: PUSH
35569: LD_VAR 0 4
35573: ARRAY
35574: PUSH
35575: LD_VAR 0 2
35579: PUSH
35580: LD_VAR 0 4
35584: ARRAY
35585: NONEQUAL
35586: IFFALSE 35598
// begin result := false ;
35588: LD_ADDR_VAR 0 3
35592: PUSH
35593: LD_INT 0
35595: ST_TO_ADDR
// break ;
35596: GO 35600
// end ;
35598: GO 35561
35600: POP
35601: POP
// end ;
35602: LD_VAR 0 3
35606: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
35607: LD_INT 0
35609: PPUSH
35610: PPUSH
35611: PPUSH
// pom := GetBase ( fac ) ;
35612: LD_ADDR_VAR 0 5
35616: PUSH
35617: LD_VAR 0 1
35621: PPUSH
35622: CALL_OW 274
35626: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
35627: LD_ADDR_VAR 0 4
35631: PUSH
35632: LD_VAR 0 2
35636: PUSH
35637: LD_INT 1
35639: ARRAY
35640: PPUSH
35641: LD_VAR 0 2
35645: PUSH
35646: LD_INT 2
35648: ARRAY
35649: PPUSH
35650: LD_VAR 0 2
35654: PUSH
35655: LD_INT 3
35657: ARRAY
35658: PPUSH
35659: LD_VAR 0 2
35663: PUSH
35664: LD_INT 4
35666: ARRAY
35667: PPUSH
35668: CALL_OW 449
35672: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35673: LD_ADDR_VAR 0 3
35677: PUSH
35678: LD_VAR 0 5
35682: PPUSH
35683: LD_INT 1
35685: PPUSH
35686: CALL_OW 275
35690: PUSH
35691: LD_VAR 0 4
35695: PUSH
35696: LD_INT 1
35698: ARRAY
35699: GREATEREQUAL
35700: PUSH
35701: LD_VAR 0 5
35705: PPUSH
35706: LD_INT 2
35708: PPUSH
35709: CALL_OW 275
35713: PUSH
35714: LD_VAR 0 4
35718: PUSH
35719: LD_INT 2
35721: ARRAY
35722: GREATEREQUAL
35723: AND
35724: PUSH
35725: LD_VAR 0 5
35729: PPUSH
35730: LD_INT 3
35732: PPUSH
35733: CALL_OW 275
35737: PUSH
35738: LD_VAR 0 4
35742: PUSH
35743: LD_INT 3
35745: ARRAY
35746: GREATEREQUAL
35747: AND
35748: ST_TO_ADDR
// end ;
35749: LD_VAR 0 3
35753: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
35754: LD_INT 0
35756: PPUSH
35757: PPUSH
35758: PPUSH
35759: PPUSH
// pom := GetBase ( building ) ;
35760: LD_ADDR_VAR 0 3
35764: PUSH
35765: LD_VAR 0 1
35769: PPUSH
35770: CALL_OW 274
35774: ST_TO_ADDR
// if not pom then
35775: LD_VAR 0 3
35779: NOT
35780: IFFALSE 35784
// exit ;
35782: GO 35954
// btype := GetBType ( building ) ;
35784: LD_ADDR_VAR 0 5
35788: PUSH
35789: LD_VAR 0 1
35793: PPUSH
35794: CALL_OW 266
35798: ST_TO_ADDR
// if btype = b_armoury then
35799: LD_VAR 0 5
35803: PUSH
35804: LD_INT 4
35806: EQUAL
35807: IFFALSE 35817
// btype := b_barracks ;
35809: LD_ADDR_VAR 0 5
35813: PUSH
35814: LD_INT 5
35816: ST_TO_ADDR
// if btype = b_depot then
35817: LD_VAR 0 5
35821: PUSH
35822: LD_INT 0
35824: EQUAL
35825: IFFALSE 35835
// btype := b_warehouse ;
35827: LD_ADDR_VAR 0 5
35831: PUSH
35832: LD_INT 1
35834: ST_TO_ADDR
// if btype = b_workshop then
35835: LD_VAR 0 5
35839: PUSH
35840: LD_INT 2
35842: EQUAL
35843: IFFALSE 35853
// btype := b_factory ;
35845: LD_ADDR_VAR 0 5
35849: PUSH
35850: LD_INT 3
35852: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35853: LD_ADDR_VAR 0 4
35857: PUSH
35858: LD_VAR 0 5
35862: PPUSH
35863: LD_VAR 0 1
35867: PPUSH
35868: CALL_OW 248
35872: PPUSH
35873: CALL_OW 450
35877: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35878: LD_ADDR_VAR 0 2
35882: PUSH
35883: LD_VAR 0 3
35887: PPUSH
35888: LD_INT 1
35890: PPUSH
35891: CALL_OW 275
35895: PUSH
35896: LD_VAR 0 4
35900: PUSH
35901: LD_INT 1
35903: ARRAY
35904: GREATEREQUAL
35905: PUSH
35906: LD_VAR 0 3
35910: PPUSH
35911: LD_INT 2
35913: PPUSH
35914: CALL_OW 275
35918: PUSH
35919: LD_VAR 0 4
35923: PUSH
35924: LD_INT 2
35926: ARRAY
35927: GREATEREQUAL
35928: AND
35929: PUSH
35930: LD_VAR 0 3
35934: PPUSH
35935: LD_INT 3
35937: PPUSH
35938: CALL_OW 275
35942: PUSH
35943: LD_VAR 0 4
35947: PUSH
35948: LD_INT 3
35950: ARRAY
35951: GREATEREQUAL
35952: AND
35953: ST_TO_ADDR
// end ;
35954: LD_VAR 0 2
35958: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
35959: LD_INT 0
35961: PPUSH
35962: PPUSH
35963: PPUSH
// pom := GetBase ( building ) ;
35964: LD_ADDR_VAR 0 4
35968: PUSH
35969: LD_VAR 0 1
35973: PPUSH
35974: CALL_OW 274
35978: ST_TO_ADDR
// if not pom then
35979: LD_VAR 0 4
35983: NOT
35984: IFFALSE 35988
// exit ;
35986: GO 36089
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35988: LD_ADDR_VAR 0 5
35992: PUSH
35993: LD_VAR 0 2
35997: PPUSH
35998: LD_VAR 0 1
36002: PPUSH
36003: CALL_OW 248
36007: PPUSH
36008: CALL_OW 450
36012: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
36013: LD_ADDR_VAR 0 3
36017: PUSH
36018: LD_VAR 0 4
36022: PPUSH
36023: LD_INT 1
36025: PPUSH
36026: CALL_OW 275
36030: PUSH
36031: LD_VAR 0 5
36035: PUSH
36036: LD_INT 1
36038: ARRAY
36039: GREATEREQUAL
36040: PUSH
36041: LD_VAR 0 4
36045: PPUSH
36046: LD_INT 2
36048: PPUSH
36049: CALL_OW 275
36053: PUSH
36054: LD_VAR 0 5
36058: PUSH
36059: LD_INT 2
36061: ARRAY
36062: GREATEREQUAL
36063: AND
36064: PUSH
36065: LD_VAR 0 4
36069: PPUSH
36070: LD_INT 3
36072: PPUSH
36073: CALL_OW 275
36077: PUSH
36078: LD_VAR 0 5
36082: PUSH
36083: LD_INT 3
36085: ARRAY
36086: GREATEREQUAL
36087: AND
36088: ST_TO_ADDR
// end ;
36089: LD_VAR 0 3
36093: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
36094: LD_INT 0
36096: PPUSH
36097: PPUSH
36098: PPUSH
36099: PPUSH
36100: PPUSH
36101: PPUSH
36102: PPUSH
36103: PPUSH
36104: PPUSH
36105: PPUSH
36106: PPUSH
// result := false ;
36107: LD_ADDR_VAR 0 8
36111: PUSH
36112: LD_INT 0
36114: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
36115: LD_VAR 0 5
36119: NOT
36120: PUSH
36121: LD_VAR 0 1
36125: NOT
36126: OR
36127: PUSH
36128: LD_VAR 0 2
36132: NOT
36133: OR
36134: PUSH
36135: LD_VAR 0 3
36139: NOT
36140: OR
36141: IFFALSE 36145
// exit ;
36143: GO 36959
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
36145: LD_ADDR_VAR 0 14
36149: PUSH
36150: LD_VAR 0 1
36154: PPUSH
36155: LD_VAR 0 2
36159: PPUSH
36160: LD_VAR 0 3
36164: PPUSH
36165: LD_VAR 0 4
36169: PPUSH
36170: LD_VAR 0 5
36174: PUSH
36175: LD_INT 1
36177: ARRAY
36178: PPUSH
36179: CALL_OW 248
36183: PPUSH
36184: LD_INT 0
36186: PPUSH
36187: CALL 38212 0 6
36191: ST_TO_ADDR
// if not hexes then
36192: LD_VAR 0 14
36196: NOT
36197: IFFALSE 36201
// exit ;
36199: GO 36959
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
36201: LD_ADDR_VAR 0 17
36205: PUSH
36206: LD_VAR 0 5
36210: PPUSH
36211: LD_INT 22
36213: PUSH
36214: LD_VAR 0 13
36218: PPUSH
36219: CALL_OW 255
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: PUSH
36228: LD_INT 2
36230: PUSH
36231: LD_INT 30
36233: PUSH
36234: LD_INT 0
36236: PUSH
36237: EMPTY
36238: LIST
36239: LIST
36240: PUSH
36241: LD_INT 30
36243: PUSH
36244: LD_INT 1
36246: PUSH
36247: EMPTY
36248: LIST
36249: LIST
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: LIST
36255: PUSH
36256: EMPTY
36257: LIST
36258: LIST
36259: PPUSH
36260: CALL_OW 72
36264: ST_TO_ADDR
// for i = 1 to hexes do
36265: LD_ADDR_VAR 0 9
36269: PUSH
36270: DOUBLE
36271: LD_INT 1
36273: DEC
36274: ST_TO_ADDR
36275: LD_VAR 0 14
36279: PUSH
36280: FOR_TO
36281: IFFALSE 36957
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36283: LD_ADDR_VAR 0 13
36287: PUSH
36288: LD_VAR 0 14
36292: PUSH
36293: LD_VAR 0 9
36297: ARRAY
36298: PUSH
36299: LD_INT 1
36301: ARRAY
36302: PPUSH
36303: LD_VAR 0 14
36307: PUSH
36308: LD_VAR 0 9
36312: ARRAY
36313: PUSH
36314: LD_INT 2
36316: ARRAY
36317: PPUSH
36318: CALL_OW 428
36322: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
36323: LD_VAR 0 14
36327: PUSH
36328: LD_VAR 0 9
36332: ARRAY
36333: PUSH
36334: LD_INT 1
36336: ARRAY
36337: PPUSH
36338: LD_VAR 0 14
36342: PUSH
36343: LD_VAR 0 9
36347: ARRAY
36348: PUSH
36349: LD_INT 2
36351: ARRAY
36352: PPUSH
36353: CALL_OW 351
36357: PUSH
36358: LD_VAR 0 14
36362: PUSH
36363: LD_VAR 0 9
36367: ARRAY
36368: PUSH
36369: LD_INT 1
36371: ARRAY
36372: PPUSH
36373: LD_VAR 0 14
36377: PUSH
36378: LD_VAR 0 9
36382: ARRAY
36383: PUSH
36384: LD_INT 2
36386: ARRAY
36387: PPUSH
36388: CALL_OW 488
36392: NOT
36393: OR
36394: PUSH
36395: LD_VAR 0 13
36399: PPUSH
36400: CALL_OW 247
36404: PUSH
36405: LD_INT 3
36407: EQUAL
36408: OR
36409: IFFALSE 36415
// exit ;
36411: POP
36412: POP
36413: GO 36959
// if not tmp then
36415: LD_VAR 0 13
36419: NOT
36420: IFFALSE 36424
// continue ;
36422: GO 36280
// result := true ;
36424: LD_ADDR_VAR 0 8
36428: PUSH
36429: LD_INT 1
36431: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
36432: LD_VAR 0 6
36436: PUSH
36437: LD_VAR 0 13
36441: PPUSH
36442: CALL_OW 247
36446: PUSH
36447: LD_INT 2
36449: EQUAL
36450: AND
36451: PUSH
36452: LD_VAR 0 13
36456: PPUSH
36457: CALL_OW 263
36461: PUSH
36462: LD_INT 1
36464: EQUAL
36465: AND
36466: IFFALSE 36630
// begin if IsDrivenBy ( tmp ) then
36468: LD_VAR 0 13
36472: PPUSH
36473: CALL_OW 311
36477: IFFALSE 36481
// continue ;
36479: GO 36280
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
36481: LD_VAR 0 6
36485: PPUSH
36486: LD_INT 3
36488: PUSH
36489: LD_INT 60
36491: PUSH
36492: EMPTY
36493: LIST
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: PUSH
36499: LD_INT 3
36501: PUSH
36502: LD_INT 55
36504: PUSH
36505: EMPTY
36506: LIST
36507: PUSH
36508: EMPTY
36509: LIST
36510: LIST
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PPUSH
36516: CALL_OW 72
36520: IFFALSE 36628
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
36522: LD_ADDR_VAR 0 18
36526: PUSH
36527: LD_VAR 0 6
36531: PPUSH
36532: LD_INT 3
36534: PUSH
36535: LD_INT 60
36537: PUSH
36538: EMPTY
36539: LIST
36540: PUSH
36541: EMPTY
36542: LIST
36543: LIST
36544: PUSH
36545: LD_INT 3
36547: PUSH
36548: LD_INT 55
36550: PUSH
36551: EMPTY
36552: LIST
36553: PUSH
36554: EMPTY
36555: LIST
36556: LIST
36557: PUSH
36558: EMPTY
36559: LIST
36560: LIST
36561: PPUSH
36562: CALL_OW 72
36566: PUSH
36567: LD_INT 1
36569: ARRAY
36570: ST_TO_ADDR
// if IsInUnit ( driver ) then
36571: LD_VAR 0 18
36575: PPUSH
36576: CALL_OW 310
36580: IFFALSE 36591
// ComExit ( driver ) ;
36582: LD_VAR 0 18
36586: PPUSH
36587: CALL 62004 0 1
// AddComEnterUnit ( driver , tmp ) ;
36591: LD_VAR 0 18
36595: PPUSH
36596: LD_VAR 0 13
36600: PPUSH
36601: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
36605: LD_VAR 0 18
36609: PPUSH
36610: LD_VAR 0 7
36614: PPUSH
36615: CALL_OW 173
// AddComExitVehicle ( driver ) ;
36619: LD_VAR 0 18
36623: PPUSH
36624: CALL_OW 181
// end ; continue ;
36628: GO 36280
// end ; if not cleaners or not tmp in cleaners then
36630: LD_VAR 0 6
36634: NOT
36635: PUSH
36636: LD_VAR 0 13
36640: PUSH
36641: LD_VAR 0 6
36645: IN
36646: NOT
36647: OR
36648: IFFALSE 36955
// begin if dep then
36650: LD_VAR 0 17
36654: IFFALSE 36790
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
36656: LD_ADDR_VAR 0 16
36660: PUSH
36661: LD_VAR 0 17
36665: PUSH
36666: LD_INT 1
36668: ARRAY
36669: PPUSH
36670: CALL_OW 250
36674: PPUSH
36675: LD_VAR 0 17
36679: PUSH
36680: LD_INT 1
36682: ARRAY
36683: PPUSH
36684: CALL_OW 254
36688: PPUSH
36689: LD_INT 5
36691: PPUSH
36692: CALL_OW 272
36696: PUSH
36697: LD_VAR 0 17
36701: PUSH
36702: LD_INT 1
36704: ARRAY
36705: PPUSH
36706: CALL_OW 251
36710: PPUSH
36711: LD_VAR 0 17
36715: PUSH
36716: LD_INT 1
36718: ARRAY
36719: PPUSH
36720: CALL_OW 254
36724: PPUSH
36725: LD_INT 5
36727: PPUSH
36728: CALL_OW 273
36732: PUSH
36733: EMPTY
36734: LIST
36735: LIST
36736: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
36737: LD_VAR 0 16
36741: PUSH
36742: LD_INT 1
36744: ARRAY
36745: PPUSH
36746: LD_VAR 0 16
36750: PUSH
36751: LD_INT 2
36753: ARRAY
36754: PPUSH
36755: CALL_OW 488
36759: IFFALSE 36790
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
36761: LD_VAR 0 13
36765: PPUSH
36766: LD_VAR 0 16
36770: PUSH
36771: LD_INT 1
36773: ARRAY
36774: PPUSH
36775: LD_VAR 0 16
36779: PUSH
36780: LD_INT 2
36782: ARRAY
36783: PPUSH
36784: CALL_OW 111
// continue ;
36788: GO 36280
// end ; end ; r := GetDir ( tmp ) ;
36790: LD_ADDR_VAR 0 15
36794: PUSH
36795: LD_VAR 0 13
36799: PPUSH
36800: CALL_OW 254
36804: ST_TO_ADDR
// if r = 5 then
36805: LD_VAR 0 15
36809: PUSH
36810: LD_INT 5
36812: EQUAL
36813: IFFALSE 36823
// r := 0 ;
36815: LD_ADDR_VAR 0 15
36819: PUSH
36820: LD_INT 0
36822: ST_TO_ADDR
// for j = r to 5 do
36823: LD_ADDR_VAR 0 10
36827: PUSH
36828: DOUBLE
36829: LD_VAR 0 15
36833: DEC
36834: ST_TO_ADDR
36835: LD_INT 5
36837: PUSH
36838: FOR_TO
36839: IFFALSE 36953
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
36841: LD_ADDR_VAR 0 11
36845: PUSH
36846: LD_VAR 0 13
36850: PPUSH
36851: CALL_OW 250
36855: PPUSH
36856: LD_VAR 0 10
36860: PPUSH
36861: LD_INT 2
36863: PPUSH
36864: CALL_OW 272
36868: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
36869: LD_ADDR_VAR 0 12
36873: PUSH
36874: LD_VAR 0 13
36878: PPUSH
36879: CALL_OW 251
36883: PPUSH
36884: LD_VAR 0 10
36888: PPUSH
36889: LD_INT 2
36891: PPUSH
36892: CALL_OW 273
36896: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
36897: LD_VAR 0 11
36901: PPUSH
36902: LD_VAR 0 12
36906: PPUSH
36907: CALL_OW 488
36911: PUSH
36912: LD_VAR 0 11
36916: PPUSH
36917: LD_VAR 0 12
36921: PPUSH
36922: CALL_OW 428
36926: NOT
36927: AND
36928: IFFALSE 36951
// begin ComMoveXY ( tmp , _x , _y ) ;
36930: LD_VAR 0 13
36934: PPUSH
36935: LD_VAR 0 11
36939: PPUSH
36940: LD_VAR 0 12
36944: PPUSH
36945: CALL_OW 111
// break ;
36949: GO 36953
// end ; end ;
36951: GO 36838
36953: POP
36954: POP
// end ; end ;
36955: GO 36280
36957: POP
36958: POP
// end ;
36959: LD_VAR 0 8
36963: RET
// export function BuildingTechInvented ( side , btype ) ; begin
36964: LD_INT 0
36966: PPUSH
// result := true ;
36967: LD_ADDR_VAR 0 3
36971: PUSH
36972: LD_INT 1
36974: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
36975: LD_VAR 0 2
36979: PUSH
36980: LD_INT 24
36982: DOUBLE
36983: EQUAL
36984: IFTRUE 36994
36986: LD_INT 33
36988: DOUBLE
36989: EQUAL
36990: IFTRUE 36994
36992: GO 37019
36994: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
36995: LD_ADDR_VAR 0 3
36999: PUSH
37000: LD_INT 32
37002: PPUSH
37003: LD_VAR 0 1
37007: PPUSH
37008: CALL_OW 321
37012: PUSH
37013: LD_INT 2
37015: EQUAL
37016: ST_TO_ADDR
37017: GO 37335
37019: LD_INT 20
37021: DOUBLE
37022: EQUAL
37023: IFTRUE 37027
37025: GO 37052
37027: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
37028: LD_ADDR_VAR 0 3
37032: PUSH
37033: LD_INT 6
37035: PPUSH
37036: LD_VAR 0 1
37040: PPUSH
37041: CALL_OW 321
37045: PUSH
37046: LD_INT 2
37048: EQUAL
37049: ST_TO_ADDR
37050: GO 37335
37052: LD_INT 22
37054: DOUBLE
37055: EQUAL
37056: IFTRUE 37066
37058: LD_INT 36
37060: DOUBLE
37061: EQUAL
37062: IFTRUE 37066
37064: GO 37091
37066: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
37067: LD_ADDR_VAR 0 3
37071: PUSH
37072: LD_INT 15
37074: PPUSH
37075: LD_VAR 0 1
37079: PPUSH
37080: CALL_OW 321
37084: PUSH
37085: LD_INT 2
37087: EQUAL
37088: ST_TO_ADDR
37089: GO 37335
37091: LD_INT 30
37093: DOUBLE
37094: EQUAL
37095: IFTRUE 37099
37097: GO 37124
37099: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
37100: LD_ADDR_VAR 0 3
37104: PUSH
37105: LD_INT 20
37107: PPUSH
37108: LD_VAR 0 1
37112: PPUSH
37113: CALL_OW 321
37117: PUSH
37118: LD_INT 2
37120: EQUAL
37121: ST_TO_ADDR
37122: GO 37335
37124: LD_INT 28
37126: DOUBLE
37127: EQUAL
37128: IFTRUE 37138
37130: LD_INT 21
37132: DOUBLE
37133: EQUAL
37134: IFTRUE 37138
37136: GO 37163
37138: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
37139: LD_ADDR_VAR 0 3
37143: PUSH
37144: LD_INT 21
37146: PPUSH
37147: LD_VAR 0 1
37151: PPUSH
37152: CALL_OW 321
37156: PUSH
37157: LD_INT 2
37159: EQUAL
37160: ST_TO_ADDR
37161: GO 37335
37163: LD_INT 16
37165: DOUBLE
37166: EQUAL
37167: IFTRUE 37171
37169: GO 37196
37171: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
37172: LD_ADDR_VAR 0 3
37176: PUSH
37177: LD_INT 84
37179: PPUSH
37180: LD_VAR 0 1
37184: PPUSH
37185: CALL_OW 321
37189: PUSH
37190: LD_INT 2
37192: EQUAL
37193: ST_TO_ADDR
37194: GO 37335
37196: LD_INT 19
37198: DOUBLE
37199: EQUAL
37200: IFTRUE 37210
37202: LD_INT 23
37204: DOUBLE
37205: EQUAL
37206: IFTRUE 37210
37208: GO 37235
37210: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
37211: LD_ADDR_VAR 0 3
37215: PUSH
37216: LD_INT 83
37218: PPUSH
37219: LD_VAR 0 1
37223: PPUSH
37224: CALL_OW 321
37228: PUSH
37229: LD_INT 2
37231: EQUAL
37232: ST_TO_ADDR
37233: GO 37335
37235: LD_INT 17
37237: DOUBLE
37238: EQUAL
37239: IFTRUE 37243
37241: GO 37268
37243: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
37244: LD_ADDR_VAR 0 3
37248: PUSH
37249: LD_INT 39
37251: PPUSH
37252: LD_VAR 0 1
37256: PPUSH
37257: CALL_OW 321
37261: PUSH
37262: LD_INT 2
37264: EQUAL
37265: ST_TO_ADDR
37266: GO 37335
37268: LD_INT 18
37270: DOUBLE
37271: EQUAL
37272: IFTRUE 37276
37274: GO 37301
37276: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
37277: LD_ADDR_VAR 0 3
37281: PUSH
37282: LD_INT 40
37284: PPUSH
37285: LD_VAR 0 1
37289: PPUSH
37290: CALL_OW 321
37294: PUSH
37295: LD_INT 2
37297: EQUAL
37298: ST_TO_ADDR
37299: GO 37335
37301: LD_INT 27
37303: DOUBLE
37304: EQUAL
37305: IFTRUE 37309
37307: GO 37334
37309: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
37310: LD_ADDR_VAR 0 3
37314: PUSH
37315: LD_INT 35
37317: PPUSH
37318: LD_VAR 0 1
37322: PPUSH
37323: CALL_OW 321
37327: PUSH
37328: LD_INT 2
37330: EQUAL
37331: ST_TO_ADDR
37332: GO 37335
37334: POP
// end ;
37335: LD_VAR 0 3
37339: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
37340: LD_INT 0
37342: PPUSH
37343: PPUSH
37344: PPUSH
37345: PPUSH
37346: PPUSH
37347: PPUSH
37348: PPUSH
37349: PPUSH
37350: PPUSH
37351: PPUSH
37352: PPUSH
// result := false ;
37353: LD_ADDR_VAR 0 6
37357: PUSH
37358: LD_INT 0
37360: ST_TO_ADDR
// if btype = b_depot then
37361: LD_VAR 0 2
37365: PUSH
37366: LD_INT 0
37368: EQUAL
37369: IFFALSE 37381
// begin result := true ;
37371: LD_ADDR_VAR 0 6
37375: PUSH
37376: LD_INT 1
37378: ST_TO_ADDR
// exit ;
37379: GO 38207
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
37381: LD_VAR 0 1
37385: NOT
37386: PUSH
37387: LD_VAR 0 1
37391: PPUSH
37392: CALL_OW 266
37396: PUSH
37397: LD_INT 0
37399: PUSH
37400: LD_INT 1
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: IN
37407: NOT
37408: OR
37409: PUSH
37410: LD_VAR 0 2
37414: NOT
37415: OR
37416: PUSH
37417: LD_VAR 0 5
37421: PUSH
37422: LD_INT 0
37424: PUSH
37425: LD_INT 1
37427: PUSH
37428: LD_INT 2
37430: PUSH
37431: LD_INT 3
37433: PUSH
37434: LD_INT 4
37436: PUSH
37437: LD_INT 5
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: LIST
37444: LIST
37445: LIST
37446: LIST
37447: IN
37448: NOT
37449: OR
37450: PUSH
37451: LD_VAR 0 3
37455: PPUSH
37456: LD_VAR 0 4
37460: PPUSH
37461: CALL_OW 488
37465: NOT
37466: OR
37467: IFFALSE 37471
// exit ;
37469: GO 38207
// side := GetSide ( depot ) ;
37471: LD_ADDR_VAR 0 9
37475: PUSH
37476: LD_VAR 0 1
37480: PPUSH
37481: CALL_OW 255
37485: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
37486: LD_VAR 0 9
37490: PPUSH
37491: LD_VAR 0 2
37495: PPUSH
37496: CALL 36964 0 2
37500: NOT
37501: IFFALSE 37505
// exit ;
37503: GO 38207
// pom := GetBase ( depot ) ;
37505: LD_ADDR_VAR 0 10
37509: PUSH
37510: LD_VAR 0 1
37514: PPUSH
37515: CALL_OW 274
37519: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
37520: LD_ADDR_VAR 0 11
37524: PUSH
37525: LD_VAR 0 2
37529: PPUSH
37530: LD_VAR 0 1
37534: PPUSH
37535: CALL_OW 248
37539: PPUSH
37540: CALL_OW 450
37544: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
37545: LD_VAR 0 10
37549: PPUSH
37550: LD_INT 1
37552: PPUSH
37553: CALL_OW 275
37557: PUSH
37558: LD_VAR 0 11
37562: PUSH
37563: LD_INT 1
37565: ARRAY
37566: GREATEREQUAL
37567: PUSH
37568: LD_VAR 0 10
37572: PPUSH
37573: LD_INT 2
37575: PPUSH
37576: CALL_OW 275
37580: PUSH
37581: LD_VAR 0 11
37585: PUSH
37586: LD_INT 2
37588: ARRAY
37589: GREATEREQUAL
37590: AND
37591: PUSH
37592: LD_VAR 0 10
37596: PPUSH
37597: LD_INT 3
37599: PPUSH
37600: CALL_OW 275
37604: PUSH
37605: LD_VAR 0 11
37609: PUSH
37610: LD_INT 3
37612: ARRAY
37613: GREATEREQUAL
37614: AND
37615: NOT
37616: IFFALSE 37620
// exit ;
37618: GO 38207
// if GetBType ( depot ) = b_depot then
37620: LD_VAR 0 1
37624: PPUSH
37625: CALL_OW 266
37629: PUSH
37630: LD_INT 0
37632: EQUAL
37633: IFFALSE 37645
// dist := 28 else
37635: LD_ADDR_VAR 0 14
37639: PUSH
37640: LD_INT 28
37642: ST_TO_ADDR
37643: GO 37653
// dist := 36 ;
37645: LD_ADDR_VAR 0 14
37649: PUSH
37650: LD_INT 36
37652: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
37653: LD_VAR 0 1
37657: PPUSH
37658: LD_VAR 0 3
37662: PPUSH
37663: LD_VAR 0 4
37667: PPUSH
37668: CALL_OW 297
37672: PUSH
37673: LD_VAR 0 14
37677: GREATER
37678: IFFALSE 37682
// exit ;
37680: GO 38207
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
37682: LD_ADDR_VAR 0 12
37686: PUSH
37687: LD_VAR 0 2
37691: PPUSH
37692: LD_VAR 0 3
37696: PPUSH
37697: LD_VAR 0 4
37701: PPUSH
37702: LD_VAR 0 5
37706: PPUSH
37707: LD_VAR 0 1
37711: PPUSH
37712: CALL_OW 248
37716: PPUSH
37717: LD_INT 0
37719: PPUSH
37720: CALL 38212 0 6
37724: ST_TO_ADDR
// if not hexes then
37725: LD_VAR 0 12
37729: NOT
37730: IFFALSE 37734
// exit ;
37732: GO 38207
// hex := GetHexInfo ( x , y ) ;
37734: LD_ADDR_VAR 0 15
37738: PUSH
37739: LD_VAR 0 3
37743: PPUSH
37744: LD_VAR 0 4
37748: PPUSH
37749: CALL_OW 546
37753: ST_TO_ADDR
// if hex [ 1 ] then
37754: LD_VAR 0 15
37758: PUSH
37759: LD_INT 1
37761: ARRAY
37762: IFFALSE 37766
// exit ;
37764: GO 38207
// height := hex [ 2 ] ;
37766: LD_ADDR_VAR 0 13
37770: PUSH
37771: LD_VAR 0 15
37775: PUSH
37776: LD_INT 2
37778: ARRAY
37779: ST_TO_ADDR
// for i = 1 to hexes do
37780: LD_ADDR_VAR 0 7
37784: PUSH
37785: DOUBLE
37786: LD_INT 1
37788: DEC
37789: ST_TO_ADDR
37790: LD_VAR 0 12
37794: PUSH
37795: FOR_TO
37796: IFFALSE 38126
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
37798: LD_VAR 0 12
37802: PUSH
37803: LD_VAR 0 7
37807: ARRAY
37808: PUSH
37809: LD_INT 1
37811: ARRAY
37812: PPUSH
37813: LD_VAR 0 12
37817: PUSH
37818: LD_VAR 0 7
37822: ARRAY
37823: PUSH
37824: LD_INT 2
37826: ARRAY
37827: PPUSH
37828: CALL_OW 488
37832: NOT
37833: PUSH
37834: LD_VAR 0 12
37838: PUSH
37839: LD_VAR 0 7
37843: ARRAY
37844: PUSH
37845: LD_INT 1
37847: ARRAY
37848: PPUSH
37849: LD_VAR 0 12
37853: PUSH
37854: LD_VAR 0 7
37858: ARRAY
37859: PUSH
37860: LD_INT 2
37862: ARRAY
37863: PPUSH
37864: CALL_OW 428
37868: PUSH
37869: LD_INT 0
37871: GREATER
37872: OR
37873: PUSH
37874: LD_VAR 0 12
37878: PUSH
37879: LD_VAR 0 7
37883: ARRAY
37884: PUSH
37885: LD_INT 1
37887: ARRAY
37888: PPUSH
37889: LD_VAR 0 12
37893: PUSH
37894: LD_VAR 0 7
37898: ARRAY
37899: PUSH
37900: LD_INT 2
37902: ARRAY
37903: PPUSH
37904: CALL_OW 351
37908: OR
37909: IFFALSE 37915
// exit ;
37911: POP
37912: POP
37913: GO 38207
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37915: LD_ADDR_VAR 0 8
37919: PUSH
37920: LD_VAR 0 12
37924: PUSH
37925: LD_VAR 0 7
37929: ARRAY
37930: PUSH
37931: LD_INT 1
37933: ARRAY
37934: PPUSH
37935: LD_VAR 0 12
37939: PUSH
37940: LD_VAR 0 7
37944: ARRAY
37945: PUSH
37946: LD_INT 2
37948: ARRAY
37949: PPUSH
37950: CALL_OW 546
37954: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
37955: LD_VAR 0 8
37959: PUSH
37960: LD_INT 1
37962: ARRAY
37963: PUSH
37964: LD_VAR 0 8
37968: PUSH
37969: LD_INT 2
37971: ARRAY
37972: PUSH
37973: LD_VAR 0 13
37977: PUSH
37978: LD_INT 2
37980: PLUS
37981: GREATER
37982: OR
37983: PUSH
37984: LD_VAR 0 8
37988: PUSH
37989: LD_INT 2
37991: ARRAY
37992: PUSH
37993: LD_VAR 0 13
37997: PUSH
37998: LD_INT 2
38000: MINUS
38001: LESS
38002: OR
38003: PUSH
38004: LD_VAR 0 8
38008: PUSH
38009: LD_INT 3
38011: ARRAY
38012: PUSH
38013: LD_INT 0
38015: PUSH
38016: LD_INT 8
38018: PUSH
38019: LD_INT 9
38021: PUSH
38022: LD_INT 10
38024: PUSH
38025: LD_INT 11
38027: PUSH
38028: LD_INT 12
38030: PUSH
38031: LD_INT 13
38033: PUSH
38034: LD_INT 16
38036: PUSH
38037: LD_INT 17
38039: PUSH
38040: LD_INT 18
38042: PUSH
38043: LD_INT 19
38045: PUSH
38046: LD_INT 20
38048: PUSH
38049: LD_INT 21
38051: PUSH
38052: EMPTY
38053: LIST
38054: LIST
38055: LIST
38056: LIST
38057: LIST
38058: LIST
38059: LIST
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: IN
38067: NOT
38068: OR
38069: PUSH
38070: LD_VAR 0 8
38074: PUSH
38075: LD_INT 5
38077: ARRAY
38078: NOT
38079: OR
38080: PUSH
38081: LD_VAR 0 8
38085: PUSH
38086: LD_INT 6
38088: ARRAY
38089: PUSH
38090: LD_INT 1
38092: PUSH
38093: LD_INT 2
38095: PUSH
38096: LD_INT 7
38098: PUSH
38099: LD_INT 9
38101: PUSH
38102: LD_INT 10
38104: PUSH
38105: LD_INT 11
38107: PUSH
38108: EMPTY
38109: LIST
38110: LIST
38111: LIST
38112: LIST
38113: LIST
38114: LIST
38115: IN
38116: NOT
38117: OR
38118: IFFALSE 38124
// exit ;
38120: POP
38121: POP
38122: GO 38207
// end ;
38124: GO 37795
38126: POP
38127: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
38128: LD_VAR 0 9
38132: PPUSH
38133: LD_VAR 0 3
38137: PPUSH
38138: LD_VAR 0 4
38142: PPUSH
38143: LD_INT 20
38145: PPUSH
38146: CALL 30130 0 4
38150: PUSH
38151: LD_INT 4
38153: ARRAY
38154: IFFALSE 38158
// exit ;
38156: GO 38207
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
38158: LD_VAR 0 2
38162: PUSH
38163: LD_INT 29
38165: PUSH
38166: LD_INT 30
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: IN
38173: PUSH
38174: LD_VAR 0 3
38178: PPUSH
38179: LD_VAR 0 4
38183: PPUSH
38184: LD_VAR 0 9
38188: PPUSH
38189: CALL_OW 440
38193: NOT
38194: AND
38195: IFFALSE 38199
// exit ;
38197: GO 38207
// result := true ;
38199: LD_ADDR_VAR 0 6
38203: PUSH
38204: LD_INT 1
38206: ST_TO_ADDR
// end ;
38207: LD_VAR 0 6
38211: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
38212: LD_INT 0
38214: PPUSH
38215: PPUSH
38216: PPUSH
38217: PPUSH
38218: PPUSH
38219: PPUSH
38220: PPUSH
38221: PPUSH
38222: PPUSH
38223: PPUSH
38224: PPUSH
38225: PPUSH
38226: PPUSH
38227: PPUSH
38228: PPUSH
38229: PPUSH
38230: PPUSH
38231: PPUSH
38232: PPUSH
38233: PPUSH
38234: PPUSH
38235: PPUSH
38236: PPUSH
38237: PPUSH
38238: PPUSH
38239: PPUSH
38240: PPUSH
38241: PPUSH
38242: PPUSH
38243: PPUSH
38244: PPUSH
38245: PPUSH
38246: PPUSH
38247: PPUSH
38248: PPUSH
38249: PPUSH
38250: PPUSH
38251: PPUSH
38252: PPUSH
38253: PPUSH
38254: PPUSH
38255: PPUSH
38256: PPUSH
38257: PPUSH
38258: PPUSH
38259: PPUSH
38260: PPUSH
38261: PPUSH
38262: PPUSH
38263: PPUSH
38264: PPUSH
38265: PPUSH
38266: PPUSH
38267: PPUSH
38268: PPUSH
38269: PPUSH
38270: PPUSH
38271: PPUSH
// result = [ ] ;
38272: LD_ADDR_VAR 0 7
38276: PUSH
38277: EMPTY
38278: ST_TO_ADDR
// temp_list = [ ] ;
38279: LD_ADDR_VAR 0 9
38283: PUSH
38284: EMPTY
38285: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
38286: LD_VAR 0 4
38290: PUSH
38291: LD_INT 0
38293: PUSH
38294: LD_INT 1
38296: PUSH
38297: LD_INT 2
38299: PUSH
38300: LD_INT 3
38302: PUSH
38303: LD_INT 4
38305: PUSH
38306: LD_INT 5
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: LIST
38313: LIST
38314: LIST
38315: LIST
38316: IN
38317: NOT
38318: PUSH
38319: LD_VAR 0 1
38323: PUSH
38324: LD_INT 0
38326: PUSH
38327: LD_INT 1
38329: PUSH
38330: EMPTY
38331: LIST
38332: LIST
38333: IN
38334: PUSH
38335: LD_VAR 0 5
38339: PUSH
38340: LD_INT 1
38342: PUSH
38343: LD_INT 2
38345: PUSH
38346: LD_INT 3
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: LIST
38353: IN
38354: NOT
38355: AND
38356: OR
38357: IFFALSE 38361
// exit ;
38359: GO 56752
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
38361: LD_VAR 0 1
38365: PUSH
38366: LD_INT 6
38368: PUSH
38369: LD_INT 7
38371: PUSH
38372: LD_INT 8
38374: PUSH
38375: LD_INT 13
38377: PUSH
38378: LD_INT 12
38380: PUSH
38381: LD_INT 15
38383: PUSH
38384: LD_INT 11
38386: PUSH
38387: LD_INT 14
38389: PUSH
38390: LD_INT 10
38392: PUSH
38393: EMPTY
38394: LIST
38395: LIST
38396: LIST
38397: LIST
38398: LIST
38399: LIST
38400: LIST
38401: LIST
38402: LIST
38403: IN
38404: IFFALSE 38414
// btype = b_lab ;
38406: LD_ADDR_VAR 0 1
38410: PUSH
38411: LD_INT 6
38413: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
38414: LD_VAR 0 6
38418: PUSH
38419: LD_INT 0
38421: PUSH
38422: LD_INT 1
38424: PUSH
38425: LD_INT 2
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: LIST
38432: IN
38433: NOT
38434: PUSH
38435: LD_VAR 0 1
38439: PUSH
38440: LD_INT 0
38442: PUSH
38443: LD_INT 1
38445: PUSH
38446: LD_INT 2
38448: PUSH
38449: LD_INT 3
38451: PUSH
38452: LD_INT 6
38454: PUSH
38455: LD_INT 36
38457: PUSH
38458: LD_INT 4
38460: PUSH
38461: LD_INT 5
38463: PUSH
38464: LD_INT 31
38466: PUSH
38467: LD_INT 32
38469: PUSH
38470: LD_INT 33
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: IN
38486: NOT
38487: PUSH
38488: LD_VAR 0 6
38492: PUSH
38493: LD_INT 1
38495: EQUAL
38496: AND
38497: OR
38498: PUSH
38499: LD_VAR 0 1
38503: PUSH
38504: LD_INT 2
38506: PUSH
38507: LD_INT 3
38509: PUSH
38510: EMPTY
38511: LIST
38512: LIST
38513: IN
38514: NOT
38515: PUSH
38516: LD_VAR 0 6
38520: PUSH
38521: LD_INT 2
38523: EQUAL
38524: AND
38525: OR
38526: IFFALSE 38536
// mode = 0 ;
38528: LD_ADDR_VAR 0 6
38532: PUSH
38533: LD_INT 0
38535: ST_TO_ADDR
// case mode of 0 :
38536: LD_VAR 0 6
38540: PUSH
38541: LD_INT 0
38543: DOUBLE
38544: EQUAL
38545: IFTRUE 38549
38547: GO 50002
38549: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
38550: LD_ADDR_VAR 0 11
38554: PUSH
38555: LD_INT 0
38557: PUSH
38558: LD_INT 0
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: PUSH
38565: LD_INT 0
38567: PUSH
38568: LD_INT 1
38570: NEG
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: PUSH
38576: LD_INT 1
38578: PUSH
38579: LD_INT 0
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: PUSH
38586: LD_INT 1
38588: PUSH
38589: LD_INT 1
38591: PUSH
38592: EMPTY
38593: LIST
38594: LIST
38595: PUSH
38596: LD_INT 0
38598: PUSH
38599: LD_INT 1
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: PUSH
38606: LD_INT 1
38608: NEG
38609: PUSH
38610: LD_INT 0
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: PUSH
38617: LD_INT 1
38619: NEG
38620: PUSH
38621: LD_INT 1
38623: NEG
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: PUSH
38629: LD_INT 1
38631: NEG
38632: PUSH
38633: LD_INT 2
38635: NEG
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: PUSH
38641: LD_INT 0
38643: PUSH
38644: LD_INT 2
38646: NEG
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: LD_INT 1
38654: PUSH
38655: LD_INT 1
38657: NEG
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: LD_INT 1
38665: PUSH
38666: LD_INT 2
38668: PUSH
38669: EMPTY
38670: LIST
38671: LIST
38672: PUSH
38673: LD_INT 0
38675: PUSH
38676: LD_INT 2
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: PUSH
38683: LD_INT 1
38685: NEG
38686: PUSH
38687: LD_INT 1
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: LD_INT 1
38696: PUSH
38697: LD_INT 3
38699: PUSH
38700: EMPTY
38701: LIST
38702: LIST
38703: PUSH
38704: LD_INT 0
38706: PUSH
38707: LD_INT 3
38709: PUSH
38710: EMPTY
38711: LIST
38712: LIST
38713: PUSH
38714: LD_INT 1
38716: NEG
38717: PUSH
38718: LD_INT 2
38720: PUSH
38721: EMPTY
38722: LIST
38723: LIST
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: LIST
38729: LIST
38730: LIST
38731: LIST
38732: LIST
38733: LIST
38734: LIST
38735: LIST
38736: LIST
38737: LIST
38738: LIST
38739: LIST
38740: LIST
38741: LIST
38742: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38743: LD_ADDR_VAR 0 12
38747: PUSH
38748: LD_INT 0
38750: PUSH
38751: LD_INT 0
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: PUSH
38758: LD_INT 0
38760: PUSH
38761: LD_INT 1
38763: NEG
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PUSH
38769: LD_INT 1
38771: PUSH
38772: LD_INT 0
38774: PUSH
38775: EMPTY
38776: LIST
38777: LIST
38778: PUSH
38779: LD_INT 1
38781: PUSH
38782: LD_INT 1
38784: PUSH
38785: EMPTY
38786: LIST
38787: LIST
38788: PUSH
38789: LD_INT 0
38791: PUSH
38792: LD_INT 1
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: LD_INT 1
38801: NEG
38802: PUSH
38803: LD_INT 0
38805: PUSH
38806: EMPTY
38807: LIST
38808: LIST
38809: PUSH
38810: LD_INT 1
38812: NEG
38813: PUSH
38814: LD_INT 1
38816: NEG
38817: PUSH
38818: EMPTY
38819: LIST
38820: LIST
38821: PUSH
38822: LD_INT 1
38824: PUSH
38825: LD_INT 1
38827: NEG
38828: PUSH
38829: EMPTY
38830: LIST
38831: LIST
38832: PUSH
38833: LD_INT 2
38835: PUSH
38836: LD_INT 0
38838: PUSH
38839: EMPTY
38840: LIST
38841: LIST
38842: PUSH
38843: LD_INT 2
38845: PUSH
38846: LD_INT 1
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: PUSH
38853: LD_INT 1
38855: NEG
38856: PUSH
38857: LD_INT 1
38859: PUSH
38860: EMPTY
38861: LIST
38862: LIST
38863: PUSH
38864: LD_INT 2
38866: NEG
38867: PUSH
38868: LD_INT 0
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: LD_INT 2
38877: NEG
38878: PUSH
38879: LD_INT 1
38881: NEG
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: LD_INT 2
38889: NEG
38890: PUSH
38891: LD_INT 1
38893: PUSH
38894: EMPTY
38895: LIST
38896: LIST
38897: PUSH
38898: LD_INT 3
38900: NEG
38901: PUSH
38902: LD_INT 0
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: PUSH
38909: LD_INT 3
38911: NEG
38912: PUSH
38913: LD_INT 1
38915: NEG
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38939: LD_ADDR_VAR 0 13
38943: PUSH
38944: LD_INT 0
38946: PUSH
38947: LD_INT 0
38949: PUSH
38950: EMPTY
38951: LIST
38952: LIST
38953: PUSH
38954: LD_INT 0
38956: PUSH
38957: LD_INT 1
38959: NEG
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: PUSH
38965: LD_INT 1
38967: PUSH
38968: LD_INT 0
38970: PUSH
38971: EMPTY
38972: LIST
38973: LIST
38974: PUSH
38975: LD_INT 1
38977: PUSH
38978: LD_INT 1
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PUSH
38985: LD_INT 0
38987: PUSH
38988: LD_INT 1
38990: PUSH
38991: EMPTY
38992: LIST
38993: LIST
38994: PUSH
38995: LD_INT 1
38997: NEG
38998: PUSH
38999: LD_INT 0
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: PUSH
39006: LD_INT 1
39008: NEG
39009: PUSH
39010: LD_INT 1
39012: NEG
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: PUSH
39018: LD_INT 1
39020: NEG
39021: PUSH
39022: LD_INT 2
39024: NEG
39025: PUSH
39026: EMPTY
39027: LIST
39028: LIST
39029: PUSH
39030: LD_INT 2
39032: PUSH
39033: LD_INT 1
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 2
39042: PUSH
39043: LD_INT 2
39045: PUSH
39046: EMPTY
39047: LIST
39048: LIST
39049: PUSH
39050: LD_INT 1
39052: PUSH
39053: LD_INT 2
39055: PUSH
39056: EMPTY
39057: LIST
39058: LIST
39059: PUSH
39060: LD_INT 2
39062: NEG
39063: PUSH
39064: LD_INT 1
39066: NEG
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: PUSH
39072: LD_INT 2
39074: NEG
39075: PUSH
39076: LD_INT 2
39078: NEG
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: PUSH
39084: LD_INT 2
39086: NEG
39087: PUSH
39088: LD_INT 3
39090: NEG
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: PUSH
39096: LD_INT 3
39098: NEG
39099: PUSH
39100: LD_INT 2
39102: NEG
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: PUSH
39108: LD_INT 3
39110: NEG
39111: PUSH
39112: LD_INT 3
39114: NEG
39115: PUSH
39116: EMPTY
39117: LIST
39118: LIST
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
39138: LD_ADDR_VAR 0 14
39142: PUSH
39143: LD_INT 0
39145: PUSH
39146: LD_INT 0
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: LD_INT 0
39155: PUSH
39156: LD_INT 1
39158: NEG
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: PUSH
39164: LD_INT 1
39166: PUSH
39167: LD_INT 0
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PUSH
39174: LD_INT 1
39176: PUSH
39177: LD_INT 1
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 0
39186: PUSH
39187: LD_INT 1
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 1
39196: NEG
39197: PUSH
39198: LD_INT 0
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: PUSH
39205: LD_INT 1
39207: NEG
39208: PUSH
39209: LD_INT 1
39211: NEG
39212: PUSH
39213: EMPTY
39214: LIST
39215: LIST
39216: PUSH
39217: LD_INT 1
39219: NEG
39220: PUSH
39221: LD_INT 2
39223: NEG
39224: PUSH
39225: EMPTY
39226: LIST
39227: LIST
39228: PUSH
39229: LD_INT 0
39231: PUSH
39232: LD_INT 2
39234: NEG
39235: PUSH
39236: EMPTY
39237: LIST
39238: LIST
39239: PUSH
39240: LD_INT 1
39242: PUSH
39243: LD_INT 1
39245: NEG
39246: PUSH
39247: EMPTY
39248: LIST
39249: LIST
39250: PUSH
39251: LD_INT 1
39253: PUSH
39254: LD_INT 2
39256: PUSH
39257: EMPTY
39258: LIST
39259: LIST
39260: PUSH
39261: LD_INT 0
39263: PUSH
39264: LD_INT 2
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: PUSH
39271: LD_INT 1
39273: NEG
39274: PUSH
39275: LD_INT 1
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PUSH
39282: LD_INT 1
39284: NEG
39285: PUSH
39286: LD_INT 3
39288: NEG
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: PUSH
39294: LD_INT 0
39296: PUSH
39297: LD_INT 3
39299: NEG
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: LD_INT 1
39307: PUSH
39308: LD_INT 2
39310: NEG
39311: PUSH
39312: EMPTY
39313: LIST
39314: LIST
39315: PUSH
39316: EMPTY
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
39334: LD_ADDR_VAR 0 15
39338: PUSH
39339: LD_INT 0
39341: PUSH
39342: LD_INT 0
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 0
39351: PUSH
39352: LD_INT 1
39354: NEG
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: LD_INT 1
39362: PUSH
39363: LD_INT 0
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: LD_INT 1
39372: PUSH
39373: LD_INT 1
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: LD_INT 0
39382: PUSH
39383: LD_INT 1
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: LD_INT 1
39392: NEG
39393: PUSH
39394: LD_INT 0
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: LD_INT 1
39403: NEG
39404: PUSH
39405: LD_INT 1
39407: NEG
39408: PUSH
39409: EMPTY
39410: LIST
39411: LIST
39412: PUSH
39413: LD_INT 1
39415: PUSH
39416: LD_INT 1
39418: NEG
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: PUSH
39424: LD_INT 2
39426: PUSH
39427: LD_INT 0
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: LD_INT 2
39436: PUSH
39437: LD_INT 1
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: PUSH
39444: LD_INT 1
39446: NEG
39447: PUSH
39448: LD_INT 1
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: PUSH
39455: LD_INT 2
39457: NEG
39458: PUSH
39459: LD_INT 0
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: PUSH
39466: LD_INT 2
39468: NEG
39469: PUSH
39470: LD_INT 1
39472: NEG
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: PUSH
39478: LD_INT 2
39480: PUSH
39481: LD_INT 1
39483: NEG
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PUSH
39489: LD_INT 3
39491: PUSH
39492: LD_INT 0
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: LD_INT 3
39501: PUSH
39502: LD_INT 1
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: EMPTY
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: LIST
39516: LIST
39517: LIST
39518: LIST
39519: LIST
39520: LIST
39521: LIST
39522: LIST
39523: LIST
39524: LIST
39525: LIST
39526: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
39527: LD_ADDR_VAR 0 16
39531: PUSH
39532: LD_INT 0
39534: PUSH
39535: LD_INT 0
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: PUSH
39542: LD_INT 0
39544: PUSH
39545: LD_INT 1
39547: NEG
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 1
39555: PUSH
39556: LD_INT 0
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 1
39565: PUSH
39566: LD_INT 1
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 0
39575: PUSH
39576: LD_INT 1
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PUSH
39583: LD_INT 1
39585: NEG
39586: PUSH
39587: LD_INT 0
39589: PUSH
39590: EMPTY
39591: LIST
39592: LIST
39593: PUSH
39594: LD_INT 1
39596: NEG
39597: PUSH
39598: LD_INT 1
39600: NEG
39601: PUSH
39602: EMPTY
39603: LIST
39604: LIST
39605: PUSH
39606: LD_INT 1
39608: NEG
39609: PUSH
39610: LD_INT 2
39612: NEG
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: PUSH
39618: LD_INT 2
39620: PUSH
39621: LD_INT 1
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: PUSH
39628: LD_INT 2
39630: PUSH
39631: LD_INT 2
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 1
39640: PUSH
39641: LD_INT 2
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 2
39650: NEG
39651: PUSH
39652: LD_INT 1
39654: NEG
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 2
39662: NEG
39663: PUSH
39664: LD_INT 2
39666: NEG
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: PUSH
39672: LD_INT 3
39674: PUSH
39675: LD_INT 2
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PUSH
39682: LD_INT 3
39684: PUSH
39685: LD_INT 3
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: PUSH
39692: LD_INT 2
39694: PUSH
39695: LD_INT 3
39697: PUSH
39698: EMPTY
39699: LIST
39700: LIST
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: LIST
39706: LIST
39707: LIST
39708: LIST
39709: LIST
39710: LIST
39711: LIST
39712: LIST
39713: LIST
39714: LIST
39715: LIST
39716: LIST
39717: LIST
39718: LIST
39719: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39720: LD_ADDR_VAR 0 17
39724: PUSH
39725: LD_INT 0
39727: PUSH
39728: LD_INT 0
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: PUSH
39735: LD_INT 0
39737: PUSH
39738: LD_INT 1
39740: NEG
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PUSH
39746: LD_INT 1
39748: PUSH
39749: LD_INT 0
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: LD_INT 1
39758: PUSH
39759: LD_INT 1
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: PUSH
39766: LD_INT 0
39768: PUSH
39769: LD_INT 1
39771: PUSH
39772: EMPTY
39773: LIST
39774: LIST
39775: PUSH
39776: LD_INT 1
39778: NEG
39779: PUSH
39780: LD_INT 0
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: PUSH
39787: LD_INT 1
39789: NEG
39790: PUSH
39791: LD_INT 1
39793: NEG
39794: PUSH
39795: EMPTY
39796: LIST
39797: LIST
39798: PUSH
39799: LD_INT 1
39801: NEG
39802: PUSH
39803: LD_INT 2
39805: NEG
39806: PUSH
39807: EMPTY
39808: LIST
39809: LIST
39810: PUSH
39811: LD_INT 0
39813: PUSH
39814: LD_INT 2
39816: NEG
39817: PUSH
39818: EMPTY
39819: LIST
39820: LIST
39821: PUSH
39822: LD_INT 1
39824: PUSH
39825: LD_INT 1
39827: NEG
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: LD_INT 2
39835: PUSH
39836: LD_INT 0
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PUSH
39843: LD_INT 2
39845: PUSH
39846: LD_INT 1
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 2
39855: PUSH
39856: LD_INT 2
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: PUSH
39863: LD_INT 1
39865: PUSH
39866: LD_INT 2
39868: PUSH
39869: EMPTY
39870: LIST
39871: LIST
39872: PUSH
39873: LD_INT 0
39875: PUSH
39876: LD_INT 2
39878: PUSH
39879: EMPTY
39880: LIST
39881: LIST
39882: PUSH
39883: LD_INT 1
39885: NEG
39886: PUSH
39887: LD_INT 1
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 2
39896: NEG
39897: PUSH
39898: LD_INT 0
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 2
39907: NEG
39908: PUSH
39909: LD_INT 1
39911: NEG
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: LD_INT 2
39919: NEG
39920: PUSH
39921: LD_INT 2
39923: NEG
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: PUSH
39929: EMPTY
39930: LIST
39931: LIST
39932: LIST
39933: LIST
39934: LIST
39935: LIST
39936: LIST
39937: LIST
39938: LIST
39939: LIST
39940: LIST
39941: LIST
39942: LIST
39943: LIST
39944: LIST
39945: LIST
39946: LIST
39947: LIST
39948: LIST
39949: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39950: LD_ADDR_VAR 0 18
39954: PUSH
39955: LD_INT 0
39957: PUSH
39958: LD_INT 0
39960: PUSH
39961: EMPTY
39962: LIST
39963: LIST
39964: PUSH
39965: LD_INT 0
39967: PUSH
39968: LD_INT 1
39970: NEG
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: PUSH
39976: LD_INT 1
39978: PUSH
39979: LD_INT 0
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: LD_INT 1
39988: PUSH
39989: LD_INT 1
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: PUSH
39996: LD_INT 0
39998: PUSH
39999: LD_INT 1
40001: PUSH
40002: EMPTY
40003: LIST
40004: LIST
40005: PUSH
40006: LD_INT 1
40008: NEG
40009: PUSH
40010: LD_INT 0
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: LD_INT 1
40019: NEG
40020: PUSH
40021: LD_INT 1
40023: NEG
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 1
40031: NEG
40032: PUSH
40033: LD_INT 2
40035: NEG
40036: PUSH
40037: EMPTY
40038: LIST
40039: LIST
40040: PUSH
40041: LD_INT 0
40043: PUSH
40044: LD_INT 2
40046: NEG
40047: PUSH
40048: EMPTY
40049: LIST
40050: LIST
40051: PUSH
40052: LD_INT 1
40054: PUSH
40055: LD_INT 1
40057: NEG
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: LD_INT 2
40065: PUSH
40066: LD_INT 0
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: PUSH
40073: LD_INT 2
40075: PUSH
40076: LD_INT 1
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PUSH
40083: LD_INT 2
40085: PUSH
40086: LD_INT 2
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 1
40095: PUSH
40096: LD_INT 2
40098: PUSH
40099: EMPTY
40100: LIST
40101: LIST
40102: PUSH
40103: LD_INT 0
40105: PUSH
40106: LD_INT 2
40108: PUSH
40109: EMPTY
40110: LIST
40111: LIST
40112: PUSH
40113: LD_INT 1
40115: NEG
40116: PUSH
40117: LD_INT 1
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: PUSH
40124: LD_INT 2
40126: NEG
40127: PUSH
40128: LD_INT 0
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: PUSH
40135: LD_INT 2
40137: NEG
40138: PUSH
40139: LD_INT 1
40141: NEG
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 2
40149: NEG
40150: PUSH
40151: LD_INT 2
40153: NEG
40154: PUSH
40155: EMPTY
40156: LIST
40157: LIST
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: LIST
40168: LIST
40169: LIST
40170: LIST
40171: LIST
40172: LIST
40173: LIST
40174: LIST
40175: LIST
40176: LIST
40177: LIST
40178: LIST
40179: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40180: LD_ADDR_VAR 0 19
40184: PUSH
40185: LD_INT 0
40187: PUSH
40188: LD_INT 0
40190: PUSH
40191: EMPTY
40192: LIST
40193: LIST
40194: PUSH
40195: LD_INT 0
40197: PUSH
40198: LD_INT 1
40200: NEG
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 1
40208: PUSH
40209: LD_INT 0
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: LD_INT 1
40218: PUSH
40219: LD_INT 1
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: PUSH
40226: LD_INT 0
40228: PUSH
40229: LD_INT 1
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: LD_INT 1
40238: NEG
40239: PUSH
40240: LD_INT 0
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 1
40249: NEG
40250: PUSH
40251: LD_INT 1
40253: NEG
40254: PUSH
40255: EMPTY
40256: LIST
40257: LIST
40258: PUSH
40259: LD_INT 1
40261: NEG
40262: PUSH
40263: LD_INT 2
40265: NEG
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 0
40273: PUSH
40274: LD_INT 2
40276: NEG
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 1
40284: PUSH
40285: LD_INT 1
40287: NEG
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 2
40295: PUSH
40296: LD_INT 0
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 2
40305: PUSH
40306: LD_INT 1
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 2
40315: PUSH
40316: LD_INT 2
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 1
40325: PUSH
40326: LD_INT 2
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 0
40335: PUSH
40336: LD_INT 2
40338: PUSH
40339: EMPTY
40340: LIST
40341: LIST
40342: PUSH
40343: LD_INT 1
40345: NEG
40346: PUSH
40347: LD_INT 1
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: LD_INT 2
40356: NEG
40357: PUSH
40358: LD_INT 0
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 2
40367: NEG
40368: PUSH
40369: LD_INT 1
40371: NEG
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PUSH
40377: LD_INT 2
40379: NEG
40380: PUSH
40381: LD_INT 2
40383: NEG
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: EMPTY
40390: LIST
40391: LIST
40392: LIST
40393: LIST
40394: LIST
40395: LIST
40396: LIST
40397: LIST
40398: LIST
40399: LIST
40400: LIST
40401: LIST
40402: LIST
40403: LIST
40404: LIST
40405: LIST
40406: LIST
40407: LIST
40408: LIST
40409: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40410: LD_ADDR_VAR 0 20
40414: PUSH
40415: LD_INT 0
40417: PUSH
40418: LD_INT 0
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: PUSH
40425: LD_INT 0
40427: PUSH
40428: LD_INT 1
40430: NEG
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 1
40438: PUSH
40439: LD_INT 0
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 1
40448: PUSH
40449: LD_INT 1
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 0
40458: PUSH
40459: LD_INT 1
40461: PUSH
40462: EMPTY
40463: LIST
40464: LIST
40465: PUSH
40466: LD_INT 1
40468: NEG
40469: PUSH
40470: LD_INT 0
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 1
40479: NEG
40480: PUSH
40481: LD_INT 1
40483: NEG
40484: PUSH
40485: EMPTY
40486: LIST
40487: LIST
40488: PUSH
40489: LD_INT 1
40491: NEG
40492: PUSH
40493: LD_INT 2
40495: NEG
40496: PUSH
40497: EMPTY
40498: LIST
40499: LIST
40500: PUSH
40501: LD_INT 0
40503: PUSH
40504: LD_INT 2
40506: NEG
40507: PUSH
40508: EMPTY
40509: LIST
40510: LIST
40511: PUSH
40512: LD_INT 1
40514: PUSH
40515: LD_INT 1
40517: NEG
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PUSH
40523: LD_INT 2
40525: PUSH
40526: LD_INT 0
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: LD_INT 2
40535: PUSH
40536: LD_INT 1
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: LD_INT 2
40545: PUSH
40546: LD_INT 2
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: LD_INT 1
40555: PUSH
40556: LD_INT 2
40558: PUSH
40559: EMPTY
40560: LIST
40561: LIST
40562: PUSH
40563: LD_INT 0
40565: PUSH
40566: LD_INT 2
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: LD_INT 1
40575: NEG
40576: PUSH
40577: LD_INT 1
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 2
40586: NEG
40587: PUSH
40588: LD_INT 0
40590: PUSH
40591: EMPTY
40592: LIST
40593: LIST
40594: PUSH
40595: LD_INT 2
40597: NEG
40598: PUSH
40599: LD_INT 1
40601: NEG
40602: PUSH
40603: EMPTY
40604: LIST
40605: LIST
40606: PUSH
40607: LD_INT 2
40609: NEG
40610: PUSH
40611: LD_INT 2
40613: NEG
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: EMPTY
40620: LIST
40621: LIST
40622: LIST
40623: LIST
40624: LIST
40625: LIST
40626: LIST
40627: LIST
40628: LIST
40629: LIST
40630: LIST
40631: LIST
40632: LIST
40633: LIST
40634: LIST
40635: LIST
40636: LIST
40637: LIST
40638: LIST
40639: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40640: LD_ADDR_VAR 0 21
40644: PUSH
40645: LD_INT 0
40647: PUSH
40648: LD_INT 0
40650: PUSH
40651: EMPTY
40652: LIST
40653: LIST
40654: PUSH
40655: LD_INT 0
40657: PUSH
40658: LD_INT 1
40660: NEG
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: LD_INT 1
40668: PUSH
40669: LD_INT 0
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 1
40678: PUSH
40679: LD_INT 1
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: PUSH
40686: LD_INT 0
40688: PUSH
40689: LD_INT 1
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 1
40698: NEG
40699: PUSH
40700: LD_INT 0
40702: PUSH
40703: EMPTY
40704: LIST
40705: LIST
40706: PUSH
40707: LD_INT 1
40709: NEG
40710: PUSH
40711: LD_INT 1
40713: NEG
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 1
40721: NEG
40722: PUSH
40723: LD_INT 2
40725: NEG
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 0
40733: PUSH
40734: LD_INT 2
40736: NEG
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: LD_INT 1
40744: PUSH
40745: LD_INT 1
40747: NEG
40748: PUSH
40749: EMPTY
40750: LIST
40751: LIST
40752: PUSH
40753: LD_INT 2
40755: PUSH
40756: LD_INT 0
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 2
40765: PUSH
40766: LD_INT 1
40768: PUSH
40769: EMPTY
40770: LIST
40771: LIST
40772: PUSH
40773: LD_INT 2
40775: PUSH
40776: LD_INT 2
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 1
40785: PUSH
40786: LD_INT 2
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 0
40795: PUSH
40796: LD_INT 2
40798: PUSH
40799: EMPTY
40800: LIST
40801: LIST
40802: PUSH
40803: LD_INT 1
40805: NEG
40806: PUSH
40807: LD_INT 1
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 2
40816: NEG
40817: PUSH
40818: LD_INT 0
40820: PUSH
40821: EMPTY
40822: LIST
40823: LIST
40824: PUSH
40825: LD_INT 2
40827: NEG
40828: PUSH
40829: LD_INT 1
40831: NEG
40832: PUSH
40833: EMPTY
40834: LIST
40835: LIST
40836: PUSH
40837: LD_INT 2
40839: NEG
40840: PUSH
40841: LD_INT 2
40843: NEG
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: EMPTY
40850: LIST
40851: LIST
40852: LIST
40853: LIST
40854: LIST
40855: LIST
40856: LIST
40857: LIST
40858: LIST
40859: LIST
40860: LIST
40861: LIST
40862: LIST
40863: LIST
40864: LIST
40865: LIST
40866: LIST
40867: LIST
40868: LIST
40869: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40870: LD_ADDR_VAR 0 22
40874: PUSH
40875: LD_INT 0
40877: PUSH
40878: LD_INT 0
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: LD_INT 0
40887: PUSH
40888: LD_INT 1
40890: NEG
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PUSH
40896: LD_INT 1
40898: PUSH
40899: LD_INT 0
40901: PUSH
40902: EMPTY
40903: LIST
40904: LIST
40905: PUSH
40906: LD_INT 1
40908: PUSH
40909: LD_INT 1
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: PUSH
40916: LD_INT 0
40918: PUSH
40919: LD_INT 1
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: LD_INT 1
40928: NEG
40929: PUSH
40930: LD_INT 0
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 1
40939: NEG
40940: PUSH
40941: LD_INT 1
40943: NEG
40944: PUSH
40945: EMPTY
40946: LIST
40947: LIST
40948: PUSH
40949: LD_INT 1
40951: NEG
40952: PUSH
40953: LD_INT 2
40955: NEG
40956: PUSH
40957: EMPTY
40958: LIST
40959: LIST
40960: PUSH
40961: LD_INT 0
40963: PUSH
40964: LD_INT 2
40966: NEG
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 1
40974: PUSH
40975: LD_INT 1
40977: NEG
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: LD_INT 2
40985: PUSH
40986: LD_INT 0
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 2
40995: PUSH
40996: LD_INT 1
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: LD_INT 2
41005: PUSH
41006: LD_INT 2
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PUSH
41013: LD_INT 1
41015: PUSH
41016: LD_INT 2
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 0
41025: PUSH
41026: LD_INT 2
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: LD_INT 1
41035: NEG
41036: PUSH
41037: LD_INT 1
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 2
41046: NEG
41047: PUSH
41048: LD_INT 0
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: PUSH
41055: LD_INT 2
41057: NEG
41058: PUSH
41059: LD_INT 1
41061: NEG
41062: PUSH
41063: EMPTY
41064: LIST
41065: LIST
41066: PUSH
41067: LD_INT 2
41069: NEG
41070: PUSH
41071: LD_INT 2
41073: NEG
41074: PUSH
41075: EMPTY
41076: LIST
41077: LIST
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: LIST
41086: LIST
41087: LIST
41088: LIST
41089: LIST
41090: LIST
41091: LIST
41092: LIST
41093: LIST
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
41100: LD_ADDR_VAR 0 23
41104: PUSH
41105: LD_INT 0
41107: PUSH
41108: LD_INT 0
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: PUSH
41115: LD_INT 0
41117: PUSH
41118: LD_INT 1
41120: NEG
41121: PUSH
41122: EMPTY
41123: LIST
41124: LIST
41125: PUSH
41126: LD_INT 1
41128: PUSH
41129: LD_INT 0
41131: PUSH
41132: EMPTY
41133: LIST
41134: LIST
41135: PUSH
41136: LD_INT 1
41138: PUSH
41139: LD_INT 1
41141: PUSH
41142: EMPTY
41143: LIST
41144: LIST
41145: PUSH
41146: LD_INT 0
41148: PUSH
41149: LD_INT 1
41151: PUSH
41152: EMPTY
41153: LIST
41154: LIST
41155: PUSH
41156: LD_INT 1
41158: NEG
41159: PUSH
41160: LD_INT 0
41162: PUSH
41163: EMPTY
41164: LIST
41165: LIST
41166: PUSH
41167: LD_INT 1
41169: NEG
41170: PUSH
41171: LD_INT 1
41173: NEG
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 1
41181: NEG
41182: PUSH
41183: LD_INT 2
41185: NEG
41186: PUSH
41187: EMPTY
41188: LIST
41189: LIST
41190: PUSH
41191: LD_INT 0
41193: PUSH
41194: LD_INT 2
41196: NEG
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 1
41204: PUSH
41205: LD_INT 1
41207: NEG
41208: PUSH
41209: EMPTY
41210: LIST
41211: LIST
41212: PUSH
41213: LD_INT 2
41215: PUSH
41216: LD_INT 0
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: LD_INT 2
41225: PUSH
41226: LD_INT 1
41228: PUSH
41229: EMPTY
41230: LIST
41231: LIST
41232: PUSH
41233: LD_INT 2
41235: PUSH
41236: LD_INT 2
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: PUSH
41243: LD_INT 1
41245: PUSH
41246: LD_INT 2
41248: PUSH
41249: EMPTY
41250: LIST
41251: LIST
41252: PUSH
41253: LD_INT 0
41255: PUSH
41256: LD_INT 2
41258: PUSH
41259: EMPTY
41260: LIST
41261: LIST
41262: PUSH
41263: LD_INT 1
41265: NEG
41266: PUSH
41267: LD_INT 1
41269: PUSH
41270: EMPTY
41271: LIST
41272: LIST
41273: PUSH
41274: LD_INT 2
41276: NEG
41277: PUSH
41278: LD_INT 0
41280: PUSH
41281: EMPTY
41282: LIST
41283: LIST
41284: PUSH
41285: LD_INT 2
41287: NEG
41288: PUSH
41289: LD_INT 1
41291: NEG
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 2
41299: NEG
41300: PUSH
41301: LD_INT 2
41303: NEG
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 2
41311: NEG
41312: PUSH
41313: LD_INT 3
41315: NEG
41316: PUSH
41317: EMPTY
41318: LIST
41319: LIST
41320: PUSH
41321: LD_INT 1
41323: NEG
41324: PUSH
41325: LD_INT 3
41327: NEG
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: PUSH
41333: LD_INT 1
41335: PUSH
41336: LD_INT 2
41338: NEG
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: PUSH
41344: LD_INT 2
41346: PUSH
41347: LD_INT 1
41349: NEG
41350: PUSH
41351: EMPTY
41352: LIST
41353: LIST
41354: PUSH
41355: EMPTY
41356: LIST
41357: LIST
41358: LIST
41359: LIST
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: LIST
41367: LIST
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: LIST
41375: LIST
41376: LIST
41377: LIST
41378: LIST
41379: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
41380: LD_ADDR_VAR 0 24
41384: PUSH
41385: LD_INT 0
41387: PUSH
41388: LD_INT 0
41390: PUSH
41391: EMPTY
41392: LIST
41393: LIST
41394: PUSH
41395: LD_INT 0
41397: PUSH
41398: LD_INT 1
41400: NEG
41401: PUSH
41402: EMPTY
41403: LIST
41404: LIST
41405: PUSH
41406: LD_INT 1
41408: PUSH
41409: LD_INT 0
41411: PUSH
41412: EMPTY
41413: LIST
41414: LIST
41415: PUSH
41416: LD_INT 1
41418: PUSH
41419: LD_INT 1
41421: PUSH
41422: EMPTY
41423: LIST
41424: LIST
41425: PUSH
41426: LD_INT 0
41428: PUSH
41429: LD_INT 1
41431: PUSH
41432: EMPTY
41433: LIST
41434: LIST
41435: PUSH
41436: LD_INT 1
41438: NEG
41439: PUSH
41440: LD_INT 0
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: PUSH
41447: LD_INT 1
41449: NEG
41450: PUSH
41451: LD_INT 1
41453: NEG
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: LD_INT 1
41461: NEG
41462: PUSH
41463: LD_INT 2
41465: NEG
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: LD_INT 0
41473: PUSH
41474: LD_INT 2
41476: NEG
41477: PUSH
41478: EMPTY
41479: LIST
41480: LIST
41481: PUSH
41482: LD_INT 1
41484: PUSH
41485: LD_INT 1
41487: NEG
41488: PUSH
41489: EMPTY
41490: LIST
41491: LIST
41492: PUSH
41493: LD_INT 2
41495: PUSH
41496: LD_INT 0
41498: PUSH
41499: EMPTY
41500: LIST
41501: LIST
41502: PUSH
41503: LD_INT 2
41505: PUSH
41506: LD_INT 1
41508: PUSH
41509: EMPTY
41510: LIST
41511: LIST
41512: PUSH
41513: LD_INT 2
41515: PUSH
41516: LD_INT 2
41518: PUSH
41519: EMPTY
41520: LIST
41521: LIST
41522: PUSH
41523: LD_INT 1
41525: PUSH
41526: LD_INT 2
41528: PUSH
41529: EMPTY
41530: LIST
41531: LIST
41532: PUSH
41533: LD_INT 0
41535: PUSH
41536: LD_INT 2
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: LD_INT 1
41545: NEG
41546: PUSH
41547: LD_INT 1
41549: PUSH
41550: EMPTY
41551: LIST
41552: LIST
41553: PUSH
41554: LD_INT 2
41556: NEG
41557: PUSH
41558: LD_INT 0
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: LD_INT 2
41567: NEG
41568: PUSH
41569: LD_INT 1
41571: NEG
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: PUSH
41577: LD_INT 2
41579: NEG
41580: PUSH
41581: LD_INT 2
41583: NEG
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: PUSH
41589: LD_INT 1
41591: PUSH
41592: LD_INT 2
41594: NEG
41595: PUSH
41596: EMPTY
41597: LIST
41598: LIST
41599: PUSH
41600: LD_INT 2
41602: PUSH
41603: LD_INT 1
41605: NEG
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: LD_INT 3
41613: PUSH
41614: LD_INT 1
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PUSH
41621: LD_INT 3
41623: PUSH
41624: LD_INT 2
41626: PUSH
41627: EMPTY
41628: LIST
41629: LIST
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: LIST
41635: LIST
41636: LIST
41637: LIST
41638: LIST
41639: LIST
41640: LIST
41641: LIST
41642: LIST
41643: LIST
41644: LIST
41645: LIST
41646: LIST
41647: LIST
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: LIST
41655: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
41656: LD_ADDR_VAR 0 25
41660: PUSH
41661: LD_INT 0
41663: PUSH
41664: LD_INT 0
41666: PUSH
41667: EMPTY
41668: LIST
41669: LIST
41670: PUSH
41671: LD_INT 0
41673: PUSH
41674: LD_INT 1
41676: NEG
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: LD_INT 1
41684: PUSH
41685: LD_INT 0
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: PUSH
41692: LD_INT 1
41694: PUSH
41695: LD_INT 1
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: LD_INT 0
41704: PUSH
41705: LD_INT 1
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 1
41714: NEG
41715: PUSH
41716: LD_INT 0
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: LD_INT 1
41725: NEG
41726: PUSH
41727: LD_INT 1
41729: NEG
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 1
41737: NEG
41738: PUSH
41739: LD_INT 2
41741: NEG
41742: PUSH
41743: EMPTY
41744: LIST
41745: LIST
41746: PUSH
41747: LD_INT 0
41749: PUSH
41750: LD_INT 2
41752: NEG
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 1
41760: PUSH
41761: LD_INT 1
41763: NEG
41764: PUSH
41765: EMPTY
41766: LIST
41767: LIST
41768: PUSH
41769: LD_INT 2
41771: PUSH
41772: LD_INT 0
41774: PUSH
41775: EMPTY
41776: LIST
41777: LIST
41778: PUSH
41779: LD_INT 2
41781: PUSH
41782: LD_INT 1
41784: PUSH
41785: EMPTY
41786: LIST
41787: LIST
41788: PUSH
41789: LD_INT 2
41791: PUSH
41792: LD_INT 2
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: PUSH
41799: LD_INT 1
41801: PUSH
41802: LD_INT 2
41804: PUSH
41805: EMPTY
41806: LIST
41807: LIST
41808: PUSH
41809: LD_INT 0
41811: PUSH
41812: LD_INT 2
41814: PUSH
41815: EMPTY
41816: LIST
41817: LIST
41818: PUSH
41819: LD_INT 1
41821: NEG
41822: PUSH
41823: LD_INT 1
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: PUSH
41830: LD_INT 2
41832: NEG
41833: PUSH
41834: LD_INT 0
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 2
41843: NEG
41844: PUSH
41845: LD_INT 1
41847: NEG
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: LD_INT 2
41855: NEG
41856: PUSH
41857: LD_INT 2
41859: NEG
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 3
41867: PUSH
41868: LD_INT 1
41870: PUSH
41871: EMPTY
41872: LIST
41873: LIST
41874: PUSH
41875: LD_INT 3
41877: PUSH
41878: LD_INT 2
41880: PUSH
41881: EMPTY
41882: LIST
41883: LIST
41884: PUSH
41885: LD_INT 2
41887: PUSH
41888: LD_INT 3
41890: PUSH
41891: EMPTY
41892: LIST
41893: LIST
41894: PUSH
41895: LD_INT 1
41897: PUSH
41898: LD_INT 3
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PUSH
41905: EMPTY
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: LIST
41912: LIST
41913: LIST
41914: LIST
41915: LIST
41916: LIST
41917: LIST
41918: LIST
41919: LIST
41920: LIST
41921: LIST
41922: LIST
41923: LIST
41924: LIST
41925: LIST
41926: LIST
41927: LIST
41928: LIST
41929: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41930: LD_ADDR_VAR 0 26
41934: PUSH
41935: LD_INT 0
41937: PUSH
41938: LD_INT 0
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: PUSH
41945: LD_INT 0
41947: PUSH
41948: LD_INT 1
41950: NEG
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: PUSH
41956: LD_INT 1
41958: PUSH
41959: LD_INT 0
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 1
41968: PUSH
41969: LD_INT 1
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 0
41978: PUSH
41979: LD_INT 1
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 1
41988: NEG
41989: PUSH
41990: LD_INT 0
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 1
41999: NEG
42000: PUSH
42001: LD_INT 1
42003: NEG
42004: PUSH
42005: EMPTY
42006: LIST
42007: LIST
42008: PUSH
42009: LD_INT 1
42011: NEG
42012: PUSH
42013: LD_INT 2
42015: NEG
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: PUSH
42021: LD_INT 0
42023: PUSH
42024: LD_INT 2
42026: NEG
42027: PUSH
42028: EMPTY
42029: LIST
42030: LIST
42031: PUSH
42032: LD_INT 1
42034: PUSH
42035: LD_INT 1
42037: NEG
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 2
42045: PUSH
42046: LD_INT 0
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 2
42055: PUSH
42056: LD_INT 1
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 2
42065: PUSH
42066: LD_INT 2
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 1
42075: PUSH
42076: LD_INT 2
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: PUSH
42083: LD_INT 0
42085: PUSH
42086: LD_INT 2
42088: PUSH
42089: EMPTY
42090: LIST
42091: LIST
42092: PUSH
42093: LD_INT 1
42095: NEG
42096: PUSH
42097: LD_INT 1
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 2
42106: NEG
42107: PUSH
42108: LD_INT 0
42110: PUSH
42111: EMPTY
42112: LIST
42113: LIST
42114: PUSH
42115: LD_INT 2
42117: NEG
42118: PUSH
42119: LD_INT 1
42121: NEG
42122: PUSH
42123: EMPTY
42124: LIST
42125: LIST
42126: PUSH
42127: LD_INT 2
42129: NEG
42130: PUSH
42131: LD_INT 2
42133: NEG
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: LD_INT 2
42141: PUSH
42142: LD_INT 3
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 1
42151: PUSH
42152: LD_INT 3
42154: PUSH
42155: EMPTY
42156: LIST
42157: LIST
42158: PUSH
42159: LD_INT 1
42161: NEG
42162: PUSH
42163: LD_INT 2
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 2
42172: NEG
42173: PUSH
42174: LD_INT 1
42176: PUSH
42177: EMPTY
42178: LIST
42179: LIST
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: LIST
42185: LIST
42186: LIST
42187: LIST
42188: LIST
42189: LIST
42190: LIST
42191: LIST
42192: LIST
42193: LIST
42194: LIST
42195: LIST
42196: LIST
42197: LIST
42198: LIST
42199: LIST
42200: LIST
42201: LIST
42202: LIST
42203: LIST
42204: LIST
42205: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42206: LD_ADDR_VAR 0 27
42210: PUSH
42211: LD_INT 0
42213: PUSH
42214: LD_INT 0
42216: PUSH
42217: EMPTY
42218: LIST
42219: LIST
42220: PUSH
42221: LD_INT 0
42223: PUSH
42224: LD_INT 1
42226: NEG
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 1
42234: PUSH
42235: LD_INT 0
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: LD_INT 1
42244: PUSH
42245: LD_INT 1
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: LD_INT 0
42254: PUSH
42255: LD_INT 1
42257: PUSH
42258: EMPTY
42259: LIST
42260: LIST
42261: PUSH
42262: LD_INT 1
42264: NEG
42265: PUSH
42266: LD_INT 0
42268: PUSH
42269: EMPTY
42270: LIST
42271: LIST
42272: PUSH
42273: LD_INT 1
42275: NEG
42276: PUSH
42277: LD_INT 1
42279: NEG
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: LD_INT 1
42287: NEG
42288: PUSH
42289: LD_INT 2
42291: NEG
42292: PUSH
42293: EMPTY
42294: LIST
42295: LIST
42296: PUSH
42297: LD_INT 0
42299: PUSH
42300: LD_INT 2
42302: NEG
42303: PUSH
42304: EMPTY
42305: LIST
42306: LIST
42307: PUSH
42308: LD_INT 1
42310: PUSH
42311: LD_INT 1
42313: NEG
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 2
42321: PUSH
42322: LD_INT 0
42324: PUSH
42325: EMPTY
42326: LIST
42327: LIST
42328: PUSH
42329: LD_INT 2
42331: PUSH
42332: LD_INT 1
42334: PUSH
42335: EMPTY
42336: LIST
42337: LIST
42338: PUSH
42339: LD_INT 2
42341: PUSH
42342: LD_INT 2
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 1
42351: PUSH
42352: LD_INT 2
42354: PUSH
42355: EMPTY
42356: LIST
42357: LIST
42358: PUSH
42359: LD_INT 0
42361: PUSH
42362: LD_INT 2
42364: PUSH
42365: EMPTY
42366: LIST
42367: LIST
42368: PUSH
42369: LD_INT 1
42371: NEG
42372: PUSH
42373: LD_INT 1
42375: PUSH
42376: EMPTY
42377: LIST
42378: LIST
42379: PUSH
42380: LD_INT 2
42382: NEG
42383: PUSH
42384: LD_INT 0
42386: PUSH
42387: EMPTY
42388: LIST
42389: LIST
42390: PUSH
42391: LD_INT 2
42393: NEG
42394: PUSH
42395: LD_INT 1
42397: NEG
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: LD_INT 2
42405: NEG
42406: PUSH
42407: LD_INT 2
42409: NEG
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 1
42417: NEG
42418: PUSH
42419: LD_INT 2
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 2
42428: NEG
42429: PUSH
42430: LD_INT 1
42432: PUSH
42433: EMPTY
42434: LIST
42435: LIST
42436: PUSH
42437: LD_INT 3
42439: NEG
42440: PUSH
42441: LD_INT 1
42443: NEG
42444: PUSH
42445: EMPTY
42446: LIST
42447: LIST
42448: PUSH
42449: LD_INT 3
42451: NEG
42452: PUSH
42453: LD_INT 2
42455: NEG
42456: PUSH
42457: EMPTY
42458: LIST
42459: LIST
42460: PUSH
42461: EMPTY
42462: LIST
42463: LIST
42464: LIST
42465: LIST
42466: LIST
42467: LIST
42468: LIST
42469: LIST
42470: LIST
42471: LIST
42472: LIST
42473: LIST
42474: LIST
42475: LIST
42476: LIST
42477: LIST
42478: LIST
42479: LIST
42480: LIST
42481: LIST
42482: LIST
42483: LIST
42484: LIST
42485: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
42486: LD_ADDR_VAR 0 28
42490: PUSH
42491: LD_INT 0
42493: PUSH
42494: LD_INT 0
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: LD_INT 0
42503: PUSH
42504: LD_INT 1
42506: NEG
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: LD_INT 1
42514: PUSH
42515: LD_INT 0
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 1
42524: PUSH
42525: LD_INT 1
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 0
42534: PUSH
42535: LD_INT 1
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 1
42544: NEG
42545: PUSH
42546: LD_INT 0
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 1
42555: NEG
42556: PUSH
42557: LD_INT 1
42559: NEG
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: LD_INT 1
42567: NEG
42568: PUSH
42569: LD_INT 2
42571: NEG
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 0
42579: PUSH
42580: LD_INT 2
42582: NEG
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: LD_INT 1
42590: PUSH
42591: LD_INT 1
42593: NEG
42594: PUSH
42595: EMPTY
42596: LIST
42597: LIST
42598: PUSH
42599: LD_INT 2
42601: PUSH
42602: LD_INT 0
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 2
42611: PUSH
42612: LD_INT 1
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 2
42621: PUSH
42622: LD_INT 2
42624: PUSH
42625: EMPTY
42626: LIST
42627: LIST
42628: PUSH
42629: LD_INT 1
42631: PUSH
42632: LD_INT 2
42634: PUSH
42635: EMPTY
42636: LIST
42637: LIST
42638: PUSH
42639: LD_INT 0
42641: PUSH
42642: LD_INT 2
42644: PUSH
42645: EMPTY
42646: LIST
42647: LIST
42648: PUSH
42649: LD_INT 1
42651: NEG
42652: PUSH
42653: LD_INT 1
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 2
42662: NEG
42663: PUSH
42664: LD_INT 0
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 2
42673: NEG
42674: PUSH
42675: LD_INT 1
42677: NEG
42678: PUSH
42679: EMPTY
42680: LIST
42681: LIST
42682: PUSH
42683: LD_INT 2
42685: NEG
42686: PUSH
42687: LD_INT 2
42689: NEG
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 2
42697: NEG
42698: PUSH
42699: LD_INT 3
42701: NEG
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 1
42709: NEG
42710: PUSH
42711: LD_INT 3
42713: NEG
42714: PUSH
42715: EMPTY
42716: LIST
42717: LIST
42718: PUSH
42719: LD_INT 3
42721: NEG
42722: PUSH
42723: LD_INT 1
42725: NEG
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 3
42733: NEG
42734: PUSH
42735: LD_INT 2
42737: NEG
42738: PUSH
42739: EMPTY
42740: LIST
42741: LIST
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: LIST
42747: LIST
42748: LIST
42749: LIST
42750: LIST
42751: LIST
42752: LIST
42753: LIST
42754: LIST
42755: LIST
42756: LIST
42757: LIST
42758: LIST
42759: LIST
42760: LIST
42761: LIST
42762: LIST
42763: LIST
42764: LIST
42765: LIST
42766: LIST
42767: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42768: LD_ADDR_VAR 0 29
42772: PUSH
42773: LD_INT 0
42775: PUSH
42776: LD_INT 0
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: LD_INT 0
42785: PUSH
42786: LD_INT 1
42788: NEG
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: PUSH
42794: LD_INT 1
42796: PUSH
42797: LD_INT 0
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 1
42806: PUSH
42807: LD_INT 1
42809: PUSH
42810: EMPTY
42811: LIST
42812: LIST
42813: PUSH
42814: LD_INT 0
42816: PUSH
42817: LD_INT 1
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 1
42826: NEG
42827: PUSH
42828: LD_INT 0
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 1
42837: NEG
42838: PUSH
42839: LD_INT 1
42841: NEG
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: PUSH
42847: LD_INT 1
42849: NEG
42850: PUSH
42851: LD_INT 2
42853: NEG
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: LD_INT 0
42861: PUSH
42862: LD_INT 2
42864: NEG
42865: PUSH
42866: EMPTY
42867: LIST
42868: LIST
42869: PUSH
42870: LD_INT 1
42872: PUSH
42873: LD_INT 1
42875: NEG
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PUSH
42881: LD_INT 2
42883: PUSH
42884: LD_INT 0
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 2
42893: PUSH
42894: LD_INT 1
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: LD_INT 1
42903: PUSH
42904: LD_INT 2
42906: PUSH
42907: EMPTY
42908: LIST
42909: LIST
42910: PUSH
42911: LD_INT 0
42913: PUSH
42914: LD_INT 2
42916: PUSH
42917: EMPTY
42918: LIST
42919: LIST
42920: PUSH
42921: LD_INT 1
42923: NEG
42924: PUSH
42925: LD_INT 1
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: LD_INT 2
42934: NEG
42935: PUSH
42936: LD_INT 1
42938: NEG
42939: PUSH
42940: EMPTY
42941: LIST
42942: LIST
42943: PUSH
42944: LD_INT 2
42946: NEG
42947: PUSH
42948: LD_INT 2
42950: NEG
42951: PUSH
42952: EMPTY
42953: LIST
42954: LIST
42955: PUSH
42956: LD_INT 2
42958: NEG
42959: PUSH
42960: LD_INT 3
42962: NEG
42963: PUSH
42964: EMPTY
42965: LIST
42966: LIST
42967: PUSH
42968: LD_INT 2
42970: PUSH
42971: LD_INT 1
42973: NEG
42974: PUSH
42975: EMPTY
42976: LIST
42977: LIST
42978: PUSH
42979: LD_INT 3
42981: PUSH
42982: LD_INT 1
42984: PUSH
42985: EMPTY
42986: LIST
42987: LIST
42988: PUSH
42989: LD_INT 1
42991: PUSH
42992: LD_INT 3
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 1
43001: NEG
43002: PUSH
43003: LD_INT 2
43005: PUSH
43006: EMPTY
43007: LIST
43008: LIST
43009: PUSH
43010: LD_INT 3
43012: NEG
43013: PUSH
43014: LD_INT 2
43016: NEG
43017: PUSH
43018: EMPTY
43019: LIST
43020: LIST
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: LIST
43026: LIST
43027: LIST
43028: LIST
43029: LIST
43030: LIST
43031: LIST
43032: LIST
43033: LIST
43034: LIST
43035: LIST
43036: LIST
43037: LIST
43038: LIST
43039: LIST
43040: LIST
43041: LIST
43042: LIST
43043: LIST
43044: LIST
43045: LIST
43046: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43047: LD_ADDR_VAR 0 30
43051: PUSH
43052: LD_INT 0
43054: PUSH
43055: LD_INT 0
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 0
43064: PUSH
43065: LD_INT 1
43067: NEG
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 1
43075: PUSH
43076: LD_INT 0
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 1
43085: PUSH
43086: LD_INT 1
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: LD_INT 0
43095: PUSH
43096: LD_INT 1
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: PUSH
43103: LD_INT 1
43105: NEG
43106: PUSH
43107: LD_INT 0
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 1
43116: NEG
43117: PUSH
43118: LD_INT 1
43120: NEG
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 1
43128: NEG
43129: PUSH
43130: LD_INT 2
43132: NEG
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 0
43140: PUSH
43141: LD_INT 2
43143: NEG
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 1
43151: PUSH
43152: LD_INT 1
43154: NEG
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: LD_INT 2
43162: PUSH
43163: LD_INT 0
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: LD_INT 2
43172: PUSH
43173: LD_INT 1
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 2
43182: PUSH
43183: LD_INT 2
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: LD_INT 1
43192: PUSH
43193: LD_INT 2
43195: PUSH
43196: EMPTY
43197: LIST
43198: LIST
43199: PUSH
43200: LD_INT 1
43202: NEG
43203: PUSH
43204: LD_INT 1
43206: PUSH
43207: EMPTY
43208: LIST
43209: LIST
43210: PUSH
43211: LD_INT 2
43213: NEG
43214: PUSH
43215: LD_INT 0
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 2
43224: NEG
43225: PUSH
43226: LD_INT 1
43228: NEG
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: PUSH
43234: LD_INT 1
43236: NEG
43237: PUSH
43238: LD_INT 3
43240: NEG
43241: PUSH
43242: EMPTY
43243: LIST
43244: LIST
43245: PUSH
43246: LD_INT 1
43248: PUSH
43249: LD_INT 2
43251: NEG
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: PUSH
43257: LD_INT 3
43259: PUSH
43260: LD_INT 2
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: LD_INT 2
43269: PUSH
43270: LD_INT 3
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 2
43279: NEG
43280: PUSH
43281: LD_INT 1
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 3
43290: NEG
43291: PUSH
43292: LD_INT 1
43294: NEG
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: EMPTY
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: LIST
43318: LIST
43319: LIST
43320: LIST
43321: LIST
43322: LIST
43323: LIST
43324: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43325: LD_ADDR_VAR 0 31
43329: PUSH
43330: LD_INT 0
43332: PUSH
43333: LD_INT 0
43335: PUSH
43336: EMPTY
43337: LIST
43338: LIST
43339: PUSH
43340: LD_INT 0
43342: PUSH
43343: LD_INT 1
43345: NEG
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: PUSH
43351: LD_INT 1
43353: PUSH
43354: LD_INT 0
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 1
43363: PUSH
43364: LD_INT 1
43366: PUSH
43367: EMPTY
43368: LIST
43369: LIST
43370: PUSH
43371: LD_INT 0
43373: PUSH
43374: LD_INT 1
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: PUSH
43381: LD_INT 1
43383: NEG
43384: PUSH
43385: LD_INT 0
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: LD_INT 1
43394: NEG
43395: PUSH
43396: LD_INT 1
43398: NEG
43399: PUSH
43400: EMPTY
43401: LIST
43402: LIST
43403: PUSH
43404: LD_INT 1
43406: NEG
43407: PUSH
43408: LD_INT 2
43410: NEG
43411: PUSH
43412: EMPTY
43413: LIST
43414: LIST
43415: PUSH
43416: LD_INT 1
43418: PUSH
43419: LD_INT 1
43421: NEG
43422: PUSH
43423: EMPTY
43424: LIST
43425: LIST
43426: PUSH
43427: LD_INT 2
43429: PUSH
43430: LD_INT 0
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 2
43439: PUSH
43440: LD_INT 1
43442: PUSH
43443: EMPTY
43444: LIST
43445: LIST
43446: PUSH
43447: LD_INT 2
43449: PUSH
43450: LD_INT 2
43452: PUSH
43453: EMPTY
43454: LIST
43455: LIST
43456: PUSH
43457: LD_INT 1
43459: PUSH
43460: LD_INT 2
43462: PUSH
43463: EMPTY
43464: LIST
43465: LIST
43466: PUSH
43467: LD_INT 0
43469: PUSH
43470: LD_INT 2
43472: PUSH
43473: EMPTY
43474: LIST
43475: LIST
43476: PUSH
43477: LD_INT 1
43479: NEG
43480: PUSH
43481: LD_INT 1
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PUSH
43488: LD_INT 2
43490: NEG
43491: PUSH
43492: LD_INT 1
43494: NEG
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 2
43502: NEG
43503: PUSH
43504: LD_INT 2
43506: NEG
43507: PUSH
43508: EMPTY
43509: LIST
43510: LIST
43511: PUSH
43512: LD_INT 2
43514: NEG
43515: PUSH
43516: LD_INT 3
43518: NEG
43519: PUSH
43520: EMPTY
43521: LIST
43522: LIST
43523: PUSH
43524: LD_INT 2
43526: PUSH
43527: LD_INT 1
43529: NEG
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 3
43537: PUSH
43538: LD_INT 1
43540: PUSH
43541: EMPTY
43542: LIST
43543: LIST
43544: PUSH
43545: LD_INT 1
43547: PUSH
43548: LD_INT 3
43550: PUSH
43551: EMPTY
43552: LIST
43553: LIST
43554: PUSH
43555: LD_INT 1
43557: NEG
43558: PUSH
43559: LD_INT 2
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 3
43568: NEG
43569: PUSH
43570: LD_INT 2
43572: NEG
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: LIST
43582: LIST
43583: LIST
43584: LIST
43585: LIST
43586: LIST
43587: LIST
43588: LIST
43589: LIST
43590: LIST
43591: LIST
43592: LIST
43593: LIST
43594: LIST
43595: LIST
43596: LIST
43597: LIST
43598: LIST
43599: LIST
43600: LIST
43601: LIST
43602: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43603: LD_ADDR_VAR 0 32
43607: PUSH
43608: LD_INT 0
43610: PUSH
43611: LD_INT 0
43613: PUSH
43614: EMPTY
43615: LIST
43616: LIST
43617: PUSH
43618: LD_INT 0
43620: PUSH
43621: LD_INT 1
43623: NEG
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 1
43631: PUSH
43632: LD_INT 0
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 1
43641: PUSH
43642: LD_INT 1
43644: PUSH
43645: EMPTY
43646: LIST
43647: LIST
43648: PUSH
43649: LD_INT 0
43651: PUSH
43652: LD_INT 1
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: LD_INT 1
43661: NEG
43662: PUSH
43663: LD_INT 0
43665: PUSH
43666: EMPTY
43667: LIST
43668: LIST
43669: PUSH
43670: LD_INT 1
43672: NEG
43673: PUSH
43674: LD_INT 1
43676: NEG
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 1
43684: NEG
43685: PUSH
43686: LD_INT 2
43688: NEG
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: PUSH
43694: LD_INT 0
43696: PUSH
43697: LD_INT 2
43699: NEG
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 1
43707: PUSH
43708: LD_INT 1
43710: NEG
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: LD_INT 2
43718: PUSH
43719: LD_INT 1
43721: PUSH
43722: EMPTY
43723: LIST
43724: LIST
43725: PUSH
43726: LD_INT 2
43728: PUSH
43729: LD_INT 2
43731: PUSH
43732: EMPTY
43733: LIST
43734: LIST
43735: PUSH
43736: LD_INT 1
43738: PUSH
43739: LD_INT 2
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: LD_INT 0
43748: PUSH
43749: LD_INT 2
43751: PUSH
43752: EMPTY
43753: LIST
43754: LIST
43755: PUSH
43756: LD_INT 1
43758: NEG
43759: PUSH
43760: LD_INT 1
43762: PUSH
43763: EMPTY
43764: LIST
43765: LIST
43766: PUSH
43767: LD_INT 2
43769: NEG
43770: PUSH
43771: LD_INT 0
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: PUSH
43778: LD_INT 2
43780: NEG
43781: PUSH
43782: LD_INT 1
43784: NEG
43785: PUSH
43786: EMPTY
43787: LIST
43788: LIST
43789: PUSH
43790: LD_INT 1
43792: NEG
43793: PUSH
43794: LD_INT 3
43796: NEG
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: PUSH
43802: LD_INT 1
43804: PUSH
43805: LD_INT 2
43807: NEG
43808: PUSH
43809: EMPTY
43810: LIST
43811: LIST
43812: PUSH
43813: LD_INT 3
43815: PUSH
43816: LD_INT 2
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 2
43825: PUSH
43826: LD_INT 3
43828: PUSH
43829: EMPTY
43830: LIST
43831: LIST
43832: PUSH
43833: LD_INT 2
43835: NEG
43836: PUSH
43837: LD_INT 1
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 3
43846: NEG
43847: PUSH
43848: LD_INT 1
43850: NEG
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: LIST
43860: LIST
43861: LIST
43862: LIST
43863: LIST
43864: LIST
43865: LIST
43866: LIST
43867: LIST
43868: LIST
43869: LIST
43870: LIST
43871: LIST
43872: LIST
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43881: LD_ADDR_VAR 0 33
43885: PUSH
43886: LD_INT 0
43888: PUSH
43889: LD_INT 0
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 0
43898: PUSH
43899: LD_INT 1
43901: NEG
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: LD_INT 1
43909: PUSH
43910: LD_INT 0
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: LD_INT 1
43919: PUSH
43920: LD_INT 1
43922: PUSH
43923: EMPTY
43924: LIST
43925: LIST
43926: PUSH
43927: LD_INT 0
43929: PUSH
43930: LD_INT 1
43932: PUSH
43933: EMPTY
43934: LIST
43935: LIST
43936: PUSH
43937: LD_INT 1
43939: NEG
43940: PUSH
43941: LD_INT 0
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 1
43950: NEG
43951: PUSH
43952: LD_INT 1
43954: NEG
43955: PUSH
43956: EMPTY
43957: LIST
43958: LIST
43959: PUSH
43960: LD_INT 1
43962: NEG
43963: PUSH
43964: LD_INT 2
43966: NEG
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: PUSH
43972: LD_INT 1
43974: PUSH
43975: LD_INT 1
43977: NEG
43978: PUSH
43979: EMPTY
43980: LIST
43981: LIST
43982: PUSH
43983: LD_INT 2
43985: PUSH
43986: LD_INT 0
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: PUSH
43993: LD_INT 2
43995: PUSH
43996: LD_INT 1
43998: PUSH
43999: EMPTY
44000: LIST
44001: LIST
44002: PUSH
44003: LD_INT 1
44005: PUSH
44006: LD_INT 2
44008: PUSH
44009: EMPTY
44010: LIST
44011: LIST
44012: PUSH
44013: LD_INT 0
44015: PUSH
44016: LD_INT 2
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 1
44025: NEG
44026: PUSH
44027: LD_INT 1
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: LD_INT 2
44036: NEG
44037: PUSH
44038: LD_INT 0
44040: PUSH
44041: EMPTY
44042: LIST
44043: LIST
44044: PUSH
44045: LD_INT 2
44047: NEG
44048: PUSH
44049: LD_INT 1
44051: NEG
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 2
44059: NEG
44060: PUSH
44061: LD_INT 2
44063: NEG
44064: PUSH
44065: EMPTY
44066: LIST
44067: LIST
44068: PUSH
44069: LD_INT 2
44071: NEG
44072: PUSH
44073: LD_INT 3
44075: NEG
44076: PUSH
44077: EMPTY
44078: LIST
44079: LIST
44080: PUSH
44081: LD_INT 2
44083: PUSH
44084: LD_INT 1
44086: NEG
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: LD_INT 3
44094: PUSH
44095: LD_INT 1
44097: PUSH
44098: EMPTY
44099: LIST
44100: LIST
44101: PUSH
44102: LD_INT 1
44104: PUSH
44105: LD_INT 3
44107: PUSH
44108: EMPTY
44109: LIST
44110: LIST
44111: PUSH
44112: LD_INT 1
44114: NEG
44115: PUSH
44116: LD_INT 2
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 3
44125: NEG
44126: PUSH
44127: LD_INT 2
44129: NEG
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: PUSH
44135: EMPTY
44136: LIST
44137: LIST
44138: LIST
44139: LIST
44140: LIST
44141: LIST
44142: LIST
44143: LIST
44144: LIST
44145: LIST
44146: LIST
44147: LIST
44148: LIST
44149: LIST
44150: LIST
44151: LIST
44152: LIST
44153: LIST
44154: LIST
44155: LIST
44156: LIST
44157: LIST
44158: LIST
44159: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
44160: LD_ADDR_VAR 0 34
44164: PUSH
44165: LD_INT 0
44167: PUSH
44168: LD_INT 0
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: PUSH
44175: LD_INT 0
44177: PUSH
44178: LD_INT 1
44180: NEG
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 1
44188: PUSH
44189: LD_INT 0
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: LD_INT 1
44198: PUSH
44199: LD_INT 1
44201: PUSH
44202: EMPTY
44203: LIST
44204: LIST
44205: PUSH
44206: LD_INT 0
44208: PUSH
44209: LD_INT 1
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 1
44218: NEG
44219: PUSH
44220: LD_INT 0
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 1
44229: NEG
44230: PUSH
44231: LD_INT 1
44233: NEG
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: LD_INT 1
44241: NEG
44242: PUSH
44243: LD_INT 2
44245: NEG
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 0
44253: PUSH
44254: LD_INT 2
44256: NEG
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: LD_INT 1
44264: PUSH
44265: LD_INT 1
44267: NEG
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 2
44275: PUSH
44276: LD_INT 1
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 2
44285: PUSH
44286: LD_INT 2
44288: PUSH
44289: EMPTY
44290: LIST
44291: LIST
44292: PUSH
44293: LD_INT 1
44295: PUSH
44296: LD_INT 2
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 1
44305: NEG
44306: PUSH
44307: LD_INT 1
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 2
44316: NEG
44317: PUSH
44318: LD_INT 0
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: LD_INT 2
44327: NEG
44328: PUSH
44329: LD_INT 1
44331: NEG
44332: PUSH
44333: EMPTY
44334: LIST
44335: LIST
44336: PUSH
44337: LD_INT 2
44339: NEG
44340: PUSH
44341: LD_INT 2
44343: NEG
44344: PUSH
44345: EMPTY
44346: LIST
44347: LIST
44348: PUSH
44349: LD_INT 1
44351: NEG
44352: PUSH
44353: LD_INT 3
44355: NEG
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 1
44363: PUSH
44364: LD_INT 2
44366: NEG
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 3
44374: PUSH
44375: LD_INT 2
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 2
44384: PUSH
44385: LD_INT 3
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 2
44394: NEG
44395: PUSH
44396: LD_INT 1
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 3
44405: NEG
44406: PUSH
44407: LD_INT 1
44409: NEG
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: EMPTY
44416: LIST
44417: LIST
44418: LIST
44419: LIST
44420: LIST
44421: LIST
44422: LIST
44423: LIST
44424: LIST
44425: LIST
44426: LIST
44427: LIST
44428: LIST
44429: LIST
44430: LIST
44431: LIST
44432: LIST
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44440: LD_ADDR_VAR 0 35
44444: PUSH
44445: LD_INT 0
44447: PUSH
44448: LD_INT 0
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 0
44457: PUSH
44458: LD_INT 1
44460: NEG
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 1
44468: PUSH
44469: LD_INT 0
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 1
44478: PUSH
44479: LD_INT 1
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 0
44488: PUSH
44489: LD_INT 1
44491: PUSH
44492: EMPTY
44493: LIST
44494: LIST
44495: PUSH
44496: LD_INT 1
44498: NEG
44499: PUSH
44500: LD_INT 0
44502: PUSH
44503: EMPTY
44504: LIST
44505: LIST
44506: PUSH
44507: LD_INT 1
44509: NEG
44510: PUSH
44511: LD_INT 1
44513: NEG
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 2
44521: PUSH
44522: LD_INT 1
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 2
44531: NEG
44532: PUSH
44533: LD_INT 1
44535: NEG
44536: PUSH
44537: EMPTY
44538: LIST
44539: LIST
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: LIST
44545: LIST
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44552: LD_ADDR_VAR 0 36
44556: PUSH
44557: LD_INT 0
44559: PUSH
44560: LD_INT 0
44562: PUSH
44563: EMPTY
44564: LIST
44565: LIST
44566: PUSH
44567: LD_INT 0
44569: PUSH
44570: LD_INT 1
44572: NEG
44573: PUSH
44574: EMPTY
44575: LIST
44576: LIST
44577: PUSH
44578: LD_INT 1
44580: PUSH
44581: LD_INT 0
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 1
44590: PUSH
44591: LD_INT 1
44593: PUSH
44594: EMPTY
44595: LIST
44596: LIST
44597: PUSH
44598: LD_INT 0
44600: PUSH
44601: LD_INT 1
44603: PUSH
44604: EMPTY
44605: LIST
44606: LIST
44607: PUSH
44608: LD_INT 1
44610: NEG
44611: PUSH
44612: LD_INT 0
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 1
44621: NEG
44622: PUSH
44623: LD_INT 1
44625: NEG
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 1
44633: NEG
44634: PUSH
44635: LD_INT 2
44637: NEG
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 1
44645: PUSH
44646: LD_INT 2
44648: PUSH
44649: EMPTY
44650: LIST
44651: LIST
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: LIST
44657: LIST
44658: LIST
44659: LIST
44660: LIST
44661: LIST
44662: LIST
44663: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44664: LD_ADDR_VAR 0 37
44668: PUSH
44669: LD_INT 0
44671: PUSH
44672: LD_INT 0
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 0
44681: PUSH
44682: LD_INT 1
44684: NEG
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: LD_INT 1
44692: PUSH
44693: LD_INT 0
44695: PUSH
44696: EMPTY
44697: LIST
44698: LIST
44699: PUSH
44700: LD_INT 1
44702: PUSH
44703: LD_INT 1
44705: PUSH
44706: EMPTY
44707: LIST
44708: LIST
44709: PUSH
44710: LD_INT 0
44712: PUSH
44713: LD_INT 1
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 1
44722: NEG
44723: PUSH
44724: LD_INT 0
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 1
44733: NEG
44734: PUSH
44735: LD_INT 1
44737: NEG
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 1
44745: PUSH
44746: LD_INT 1
44748: NEG
44749: PUSH
44750: EMPTY
44751: LIST
44752: LIST
44753: PUSH
44754: LD_INT 1
44756: NEG
44757: PUSH
44758: LD_INT 1
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: EMPTY
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44776: LD_ADDR_VAR 0 38
44780: PUSH
44781: LD_INT 0
44783: PUSH
44784: LD_INT 0
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 0
44793: PUSH
44794: LD_INT 1
44796: NEG
44797: PUSH
44798: EMPTY
44799: LIST
44800: LIST
44801: PUSH
44802: LD_INT 1
44804: PUSH
44805: LD_INT 0
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 1
44814: PUSH
44815: LD_INT 1
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 0
44824: PUSH
44825: LD_INT 1
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 1
44834: NEG
44835: PUSH
44836: LD_INT 0
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 1
44845: NEG
44846: PUSH
44847: LD_INT 1
44849: NEG
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 2
44857: PUSH
44858: LD_INT 1
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 2
44867: NEG
44868: PUSH
44869: LD_INT 1
44871: NEG
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: LIST
44881: LIST
44882: LIST
44883: LIST
44884: LIST
44885: LIST
44886: LIST
44887: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44888: LD_ADDR_VAR 0 39
44892: PUSH
44893: LD_INT 0
44895: PUSH
44896: LD_INT 0
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 0
44905: PUSH
44906: LD_INT 1
44908: NEG
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 1
44916: PUSH
44917: LD_INT 0
44919: PUSH
44920: EMPTY
44921: LIST
44922: LIST
44923: PUSH
44924: LD_INT 1
44926: PUSH
44927: LD_INT 1
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 0
44936: PUSH
44937: LD_INT 1
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 1
44946: NEG
44947: PUSH
44948: LD_INT 0
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 1
44957: NEG
44958: PUSH
44959: LD_INT 1
44961: NEG
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: LD_INT 1
44969: NEG
44970: PUSH
44971: LD_INT 2
44973: NEG
44974: PUSH
44975: EMPTY
44976: LIST
44977: LIST
44978: PUSH
44979: LD_INT 1
44981: PUSH
44982: LD_INT 2
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
45000: LD_ADDR_VAR 0 40
45004: PUSH
45005: LD_INT 0
45007: PUSH
45008: LD_INT 0
45010: PUSH
45011: EMPTY
45012: LIST
45013: LIST
45014: PUSH
45015: LD_INT 0
45017: PUSH
45018: LD_INT 1
45020: NEG
45021: PUSH
45022: EMPTY
45023: LIST
45024: LIST
45025: PUSH
45026: LD_INT 1
45028: PUSH
45029: LD_INT 0
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 1
45038: PUSH
45039: LD_INT 1
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PUSH
45046: LD_INT 0
45048: PUSH
45049: LD_INT 1
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: LD_INT 1
45058: NEG
45059: PUSH
45060: LD_INT 0
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: LD_INT 1
45069: NEG
45070: PUSH
45071: LD_INT 1
45073: NEG
45074: PUSH
45075: EMPTY
45076: LIST
45077: LIST
45078: PUSH
45079: LD_INT 1
45081: PUSH
45082: LD_INT 1
45084: NEG
45085: PUSH
45086: EMPTY
45087: LIST
45088: LIST
45089: PUSH
45090: LD_INT 1
45092: NEG
45093: PUSH
45094: LD_INT 1
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: LIST
45105: LIST
45106: LIST
45107: LIST
45108: LIST
45109: LIST
45110: LIST
45111: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45112: LD_ADDR_VAR 0 41
45116: PUSH
45117: LD_INT 0
45119: PUSH
45120: LD_INT 0
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 0
45129: PUSH
45130: LD_INT 1
45132: NEG
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 1
45140: PUSH
45141: LD_INT 0
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 1
45150: PUSH
45151: LD_INT 1
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 0
45160: PUSH
45161: LD_INT 1
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 1
45170: NEG
45171: PUSH
45172: LD_INT 0
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 1
45181: NEG
45182: PUSH
45183: LD_INT 1
45185: NEG
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 1
45193: NEG
45194: PUSH
45195: LD_INT 2
45197: NEG
45198: PUSH
45199: EMPTY
45200: LIST
45201: LIST
45202: PUSH
45203: LD_INT 1
45205: PUSH
45206: LD_INT 1
45208: NEG
45209: PUSH
45210: EMPTY
45211: LIST
45212: LIST
45213: PUSH
45214: LD_INT 2
45216: PUSH
45217: LD_INT 0
45219: PUSH
45220: EMPTY
45221: LIST
45222: LIST
45223: PUSH
45224: LD_INT 2
45226: PUSH
45227: LD_INT 1
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 2
45236: PUSH
45237: LD_INT 2
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 1
45246: PUSH
45247: LD_INT 2
45249: PUSH
45250: EMPTY
45251: LIST
45252: LIST
45253: PUSH
45254: LD_INT 1
45256: NEG
45257: PUSH
45258: LD_INT 1
45260: PUSH
45261: EMPTY
45262: LIST
45263: LIST
45264: PUSH
45265: LD_INT 2
45267: NEG
45268: PUSH
45269: LD_INT 0
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 2
45278: NEG
45279: PUSH
45280: LD_INT 1
45282: NEG
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 2
45290: NEG
45291: PUSH
45292: LD_INT 2
45294: NEG
45295: PUSH
45296: EMPTY
45297: LIST
45298: LIST
45299: PUSH
45300: LD_INT 2
45302: NEG
45303: PUSH
45304: LD_INT 3
45306: NEG
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 2
45314: PUSH
45315: LD_INT 1
45317: NEG
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 3
45325: PUSH
45326: LD_INT 0
45328: PUSH
45329: EMPTY
45330: LIST
45331: LIST
45332: PUSH
45333: LD_INT 3
45335: PUSH
45336: LD_INT 1
45338: PUSH
45339: EMPTY
45340: LIST
45341: LIST
45342: PUSH
45343: LD_INT 3
45345: PUSH
45346: LD_INT 2
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 3
45355: PUSH
45356: LD_INT 3
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 2
45365: PUSH
45366: LD_INT 3
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 2
45375: NEG
45376: PUSH
45377: LD_INT 1
45379: PUSH
45380: EMPTY
45381: LIST
45382: LIST
45383: PUSH
45384: LD_INT 3
45386: NEG
45387: PUSH
45388: LD_INT 0
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 3
45397: NEG
45398: PUSH
45399: LD_INT 1
45401: NEG
45402: PUSH
45403: EMPTY
45404: LIST
45405: LIST
45406: PUSH
45407: LD_INT 3
45409: NEG
45410: PUSH
45411: LD_INT 2
45413: NEG
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 3
45421: NEG
45422: PUSH
45423: LD_INT 3
45425: NEG
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: EMPTY
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: LIST
45447: LIST
45448: LIST
45449: LIST
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45462: LD_ADDR_VAR 0 42
45466: PUSH
45467: LD_INT 0
45469: PUSH
45470: LD_INT 0
45472: PUSH
45473: EMPTY
45474: LIST
45475: LIST
45476: PUSH
45477: LD_INT 0
45479: PUSH
45480: LD_INT 1
45482: NEG
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 1
45490: PUSH
45491: LD_INT 0
45493: PUSH
45494: EMPTY
45495: LIST
45496: LIST
45497: PUSH
45498: LD_INT 1
45500: PUSH
45501: LD_INT 1
45503: PUSH
45504: EMPTY
45505: LIST
45506: LIST
45507: PUSH
45508: LD_INT 0
45510: PUSH
45511: LD_INT 1
45513: PUSH
45514: EMPTY
45515: LIST
45516: LIST
45517: PUSH
45518: LD_INT 1
45520: NEG
45521: PUSH
45522: LD_INT 0
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 1
45531: NEG
45532: PUSH
45533: LD_INT 1
45535: NEG
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: PUSH
45541: LD_INT 1
45543: NEG
45544: PUSH
45545: LD_INT 2
45547: NEG
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 0
45555: PUSH
45556: LD_INT 2
45558: NEG
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 1
45566: PUSH
45567: LD_INT 1
45569: NEG
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 2
45577: PUSH
45578: LD_INT 1
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: LD_INT 2
45587: PUSH
45588: LD_INT 2
45590: PUSH
45591: EMPTY
45592: LIST
45593: LIST
45594: PUSH
45595: LD_INT 1
45597: PUSH
45598: LD_INT 2
45600: PUSH
45601: EMPTY
45602: LIST
45603: LIST
45604: PUSH
45605: LD_INT 0
45607: PUSH
45608: LD_INT 2
45610: PUSH
45611: EMPTY
45612: LIST
45613: LIST
45614: PUSH
45615: LD_INT 1
45617: NEG
45618: PUSH
45619: LD_INT 1
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 2
45628: NEG
45629: PUSH
45630: LD_INT 1
45632: NEG
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 2
45640: NEG
45641: PUSH
45642: LD_INT 2
45644: NEG
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: PUSH
45650: LD_INT 2
45652: NEG
45653: PUSH
45654: LD_INT 3
45656: NEG
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 1
45664: NEG
45665: PUSH
45666: LD_INT 3
45668: NEG
45669: PUSH
45670: EMPTY
45671: LIST
45672: LIST
45673: PUSH
45674: LD_INT 0
45676: PUSH
45677: LD_INT 3
45679: NEG
45680: PUSH
45681: EMPTY
45682: LIST
45683: LIST
45684: PUSH
45685: LD_INT 1
45687: PUSH
45688: LD_INT 2
45690: NEG
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 3
45698: PUSH
45699: LD_INT 2
45701: PUSH
45702: EMPTY
45703: LIST
45704: LIST
45705: PUSH
45706: LD_INT 3
45708: PUSH
45709: LD_INT 3
45711: PUSH
45712: EMPTY
45713: LIST
45714: LIST
45715: PUSH
45716: LD_INT 2
45718: PUSH
45719: LD_INT 3
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 1
45728: PUSH
45729: LD_INT 3
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 0
45738: PUSH
45739: LD_INT 3
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 1
45748: NEG
45749: PUSH
45750: LD_INT 2
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 3
45759: NEG
45760: PUSH
45761: LD_INT 2
45763: NEG
45764: PUSH
45765: EMPTY
45766: LIST
45767: LIST
45768: PUSH
45769: LD_INT 3
45771: NEG
45772: PUSH
45773: LD_INT 3
45775: NEG
45776: PUSH
45777: EMPTY
45778: LIST
45779: LIST
45780: PUSH
45781: EMPTY
45782: LIST
45783: LIST
45784: LIST
45785: LIST
45786: LIST
45787: LIST
45788: LIST
45789: LIST
45790: LIST
45791: LIST
45792: LIST
45793: LIST
45794: LIST
45795: LIST
45796: LIST
45797: LIST
45798: LIST
45799: LIST
45800: LIST
45801: LIST
45802: LIST
45803: LIST
45804: LIST
45805: LIST
45806: LIST
45807: LIST
45808: LIST
45809: LIST
45810: LIST
45811: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45812: LD_ADDR_VAR 0 43
45816: PUSH
45817: LD_INT 0
45819: PUSH
45820: LD_INT 0
45822: PUSH
45823: EMPTY
45824: LIST
45825: LIST
45826: PUSH
45827: LD_INT 0
45829: PUSH
45830: LD_INT 1
45832: NEG
45833: PUSH
45834: EMPTY
45835: LIST
45836: LIST
45837: PUSH
45838: LD_INT 1
45840: PUSH
45841: LD_INT 0
45843: PUSH
45844: EMPTY
45845: LIST
45846: LIST
45847: PUSH
45848: LD_INT 1
45850: PUSH
45851: LD_INT 1
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 0
45860: PUSH
45861: LD_INT 1
45863: PUSH
45864: EMPTY
45865: LIST
45866: LIST
45867: PUSH
45868: LD_INT 1
45870: NEG
45871: PUSH
45872: LD_INT 0
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 1
45881: NEG
45882: PUSH
45883: LD_INT 1
45885: NEG
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 1
45893: NEG
45894: PUSH
45895: LD_INT 2
45897: NEG
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 0
45905: PUSH
45906: LD_INT 2
45908: NEG
45909: PUSH
45910: EMPTY
45911: LIST
45912: LIST
45913: PUSH
45914: LD_INT 1
45916: PUSH
45917: LD_INT 1
45919: NEG
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 2
45927: PUSH
45928: LD_INT 0
45930: PUSH
45931: EMPTY
45932: LIST
45933: LIST
45934: PUSH
45935: LD_INT 2
45937: PUSH
45938: LD_INT 1
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 1
45947: PUSH
45948: LD_INT 2
45950: PUSH
45951: EMPTY
45952: LIST
45953: LIST
45954: PUSH
45955: LD_INT 0
45957: PUSH
45958: LD_INT 2
45960: PUSH
45961: EMPTY
45962: LIST
45963: LIST
45964: PUSH
45965: LD_INT 1
45967: NEG
45968: PUSH
45969: LD_INT 1
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 2
45978: NEG
45979: PUSH
45980: LD_INT 0
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 2
45989: NEG
45990: PUSH
45991: LD_INT 1
45993: NEG
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 1
46001: NEG
46002: PUSH
46003: LD_INT 3
46005: NEG
46006: PUSH
46007: EMPTY
46008: LIST
46009: LIST
46010: PUSH
46011: LD_INT 0
46013: PUSH
46014: LD_INT 3
46016: NEG
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 1
46024: PUSH
46025: LD_INT 2
46027: NEG
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 2
46035: PUSH
46036: LD_INT 1
46038: NEG
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 3
46046: PUSH
46047: LD_INT 0
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 3
46056: PUSH
46057: LD_INT 1
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 1
46066: PUSH
46067: LD_INT 3
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 0
46076: PUSH
46077: LD_INT 3
46079: PUSH
46080: EMPTY
46081: LIST
46082: LIST
46083: PUSH
46084: LD_INT 1
46086: NEG
46087: PUSH
46088: LD_INT 2
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 2
46097: NEG
46098: PUSH
46099: LD_INT 1
46101: PUSH
46102: EMPTY
46103: LIST
46104: LIST
46105: PUSH
46106: LD_INT 3
46108: NEG
46109: PUSH
46110: LD_INT 0
46112: PUSH
46113: EMPTY
46114: LIST
46115: LIST
46116: PUSH
46117: LD_INT 3
46119: NEG
46120: PUSH
46121: LD_INT 1
46123: NEG
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: LIST
46133: LIST
46134: LIST
46135: LIST
46136: LIST
46137: LIST
46138: LIST
46139: LIST
46140: LIST
46141: LIST
46142: LIST
46143: LIST
46144: LIST
46145: LIST
46146: LIST
46147: LIST
46148: LIST
46149: LIST
46150: LIST
46151: LIST
46152: LIST
46153: LIST
46154: LIST
46155: LIST
46156: LIST
46157: LIST
46158: LIST
46159: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46160: LD_ADDR_VAR 0 44
46164: PUSH
46165: LD_INT 0
46167: PUSH
46168: LD_INT 0
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 0
46177: PUSH
46178: LD_INT 1
46180: NEG
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 1
46188: PUSH
46189: LD_INT 0
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 1
46198: PUSH
46199: LD_INT 1
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 0
46208: PUSH
46209: LD_INT 1
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: LD_INT 1
46218: NEG
46219: PUSH
46220: LD_INT 0
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 1
46229: NEG
46230: PUSH
46231: LD_INT 1
46233: NEG
46234: PUSH
46235: EMPTY
46236: LIST
46237: LIST
46238: PUSH
46239: LD_INT 1
46241: NEG
46242: PUSH
46243: LD_INT 2
46245: NEG
46246: PUSH
46247: EMPTY
46248: LIST
46249: LIST
46250: PUSH
46251: LD_INT 1
46253: PUSH
46254: LD_INT 1
46256: NEG
46257: PUSH
46258: EMPTY
46259: LIST
46260: LIST
46261: PUSH
46262: LD_INT 2
46264: PUSH
46265: LD_INT 0
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 2
46274: PUSH
46275: LD_INT 1
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 2
46284: PUSH
46285: LD_INT 2
46287: PUSH
46288: EMPTY
46289: LIST
46290: LIST
46291: PUSH
46292: LD_INT 1
46294: PUSH
46295: LD_INT 2
46297: PUSH
46298: EMPTY
46299: LIST
46300: LIST
46301: PUSH
46302: LD_INT 1
46304: NEG
46305: PUSH
46306: LD_INT 1
46308: PUSH
46309: EMPTY
46310: LIST
46311: LIST
46312: PUSH
46313: LD_INT 2
46315: NEG
46316: PUSH
46317: LD_INT 0
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 2
46326: NEG
46327: PUSH
46328: LD_INT 1
46330: NEG
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 2
46338: NEG
46339: PUSH
46340: LD_INT 2
46342: NEG
46343: PUSH
46344: EMPTY
46345: LIST
46346: LIST
46347: PUSH
46348: LD_INT 2
46350: NEG
46351: PUSH
46352: LD_INT 3
46354: NEG
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 2
46362: PUSH
46363: LD_INT 1
46365: NEG
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 3
46373: PUSH
46374: LD_INT 0
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 3
46383: PUSH
46384: LD_INT 1
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 3
46393: PUSH
46394: LD_INT 2
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 3
46403: PUSH
46404: LD_INT 3
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 2
46413: PUSH
46414: LD_INT 3
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 2
46423: NEG
46424: PUSH
46425: LD_INT 1
46427: PUSH
46428: EMPTY
46429: LIST
46430: LIST
46431: PUSH
46432: LD_INT 3
46434: NEG
46435: PUSH
46436: LD_INT 0
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 3
46445: NEG
46446: PUSH
46447: LD_INT 1
46449: NEG
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 3
46457: NEG
46458: PUSH
46459: LD_INT 2
46461: NEG
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: PUSH
46467: LD_INT 3
46469: NEG
46470: PUSH
46471: LD_INT 3
46473: NEG
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: EMPTY
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46510: LD_ADDR_VAR 0 45
46514: PUSH
46515: LD_INT 0
46517: PUSH
46518: LD_INT 0
46520: PUSH
46521: EMPTY
46522: LIST
46523: LIST
46524: PUSH
46525: LD_INT 0
46527: PUSH
46528: LD_INT 1
46530: NEG
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: PUSH
46536: LD_INT 1
46538: PUSH
46539: LD_INT 0
46541: PUSH
46542: EMPTY
46543: LIST
46544: LIST
46545: PUSH
46546: LD_INT 1
46548: PUSH
46549: LD_INT 1
46551: PUSH
46552: EMPTY
46553: LIST
46554: LIST
46555: PUSH
46556: LD_INT 0
46558: PUSH
46559: LD_INT 1
46561: PUSH
46562: EMPTY
46563: LIST
46564: LIST
46565: PUSH
46566: LD_INT 1
46568: NEG
46569: PUSH
46570: LD_INT 0
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 1
46579: NEG
46580: PUSH
46581: LD_INT 1
46583: NEG
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 1
46591: NEG
46592: PUSH
46593: LD_INT 2
46595: NEG
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 0
46603: PUSH
46604: LD_INT 2
46606: NEG
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 1
46614: PUSH
46615: LD_INT 1
46617: NEG
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 2
46625: PUSH
46626: LD_INT 1
46628: PUSH
46629: EMPTY
46630: LIST
46631: LIST
46632: PUSH
46633: LD_INT 2
46635: PUSH
46636: LD_INT 2
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 1
46645: PUSH
46646: LD_INT 2
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 0
46655: PUSH
46656: LD_INT 2
46658: PUSH
46659: EMPTY
46660: LIST
46661: LIST
46662: PUSH
46663: LD_INT 1
46665: NEG
46666: PUSH
46667: LD_INT 1
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: LD_INT 2
46676: NEG
46677: PUSH
46678: LD_INT 1
46680: NEG
46681: PUSH
46682: EMPTY
46683: LIST
46684: LIST
46685: PUSH
46686: LD_INT 2
46688: NEG
46689: PUSH
46690: LD_INT 2
46692: NEG
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: LD_INT 2
46700: NEG
46701: PUSH
46702: LD_INT 3
46704: NEG
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 1
46712: NEG
46713: PUSH
46714: LD_INT 3
46716: NEG
46717: PUSH
46718: EMPTY
46719: LIST
46720: LIST
46721: PUSH
46722: LD_INT 0
46724: PUSH
46725: LD_INT 3
46727: NEG
46728: PUSH
46729: EMPTY
46730: LIST
46731: LIST
46732: PUSH
46733: LD_INT 1
46735: PUSH
46736: LD_INT 2
46738: NEG
46739: PUSH
46740: EMPTY
46741: LIST
46742: LIST
46743: PUSH
46744: LD_INT 3
46746: PUSH
46747: LD_INT 2
46749: PUSH
46750: EMPTY
46751: LIST
46752: LIST
46753: PUSH
46754: LD_INT 3
46756: PUSH
46757: LD_INT 3
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 2
46766: PUSH
46767: LD_INT 3
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 1
46776: PUSH
46777: LD_INT 3
46779: PUSH
46780: EMPTY
46781: LIST
46782: LIST
46783: PUSH
46784: LD_INT 0
46786: PUSH
46787: LD_INT 3
46789: PUSH
46790: EMPTY
46791: LIST
46792: LIST
46793: PUSH
46794: LD_INT 1
46796: NEG
46797: PUSH
46798: LD_INT 2
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: LD_INT 3
46807: NEG
46808: PUSH
46809: LD_INT 2
46811: NEG
46812: PUSH
46813: EMPTY
46814: LIST
46815: LIST
46816: PUSH
46817: LD_INT 3
46819: NEG
46820: PUSH
46821: LD_INT 3
46823: NEG
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: LIST
46843: LIST
46844: LIST
46845: LIST
46846: LIST
46847: LIST
46848: LIST
46849: LIST
46850: LIST
46851: LIST
46852: LIST
46853: LIST
46854: LIST
46855: LIST
46856: LIST
46857: LIST
46858: LIST
46859: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46860: LD_ADDR_VAR 0 46
46864: PUSH
46865: LD_INT 0
46867: PUSH
46868: LD_INT 0
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 0
46877: PUSH
46878: LD_INT 1
46880: NEG
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: LD_INT 1
46888: PUSH
46889: LD_INT 0
46891: PUSH
46892: EMPTY
46893: LIST
46894: LIST
46895: PUSH
46896: LD_INT 1
46898: PUSH
46899: LD_INT 1
46901: PUSH
46902: EMPTY
46903: LIST
46904: LIST
46905: PUSH
46906: LD_INT 0
46908: PUSH
46909: LD_INT 1
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 1
46918: NEG
46919: PUSH
46920: LD_INT 0
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 1
46929: NEG
46930: PUSH
46931: LD_INT 1
46933: NEG
46934: PUSH
46935: EMPTY
46936: LIST
46937: LIST
46938: PUSH
46939: LD_INT 1
46941: NEG
46942: PUSH
46943: LD_INT 2
46945: NEG
46946: PUSH
46947: EMPTY
46948: LIST
46949: LIST
46950: PUSH
46951: LD_INT 0
46953: PUSH
46954: LD_INT 2
46956: NEG
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 1
46964: PUSH
46965: LD_INT 1
46967: NEG
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: LD_INT 2
46975: PUSH
46976: LD_INT 0
46978: PUSH
46979: EMPTY
46980: LIST
46981: LIST
46982: PUSH
46983: LD_INT 2
46985: PUSH
46986: LD_INT 1
46988: PUSH
46989: EMPTY
46990: LIST
46991: LIST
46992: PUSH
46993: LD_INT 1
46995: PUSH
46996: LD_INT 2
46998: PUSH
46999: EMPTY
47000: LIST
47001: LIST
47002: PUSH
47003: LD_INT 0
47005: PUSH
47006: LD_INT 2
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 1
47015: NEG
47016: PUSH
47017: LD_INT 1
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: PUSH
47024: LD_INT 2
47026: NEG
47027: PUSH
47028: LD_INT 0
47030: PUSH
47031: EMPTY
47032: LIST
47033: LIST
47034: PUSH
47035: LD_INT 2
47037: NEG
47038: PUSH
47039: LD_INT 1
47041: NEG
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 1
47049: NEG
47050: PUSH
47051: LD_INT 3
47053: NEG
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 0
47061: PUSH
47062: LD_INT 3
47064: NEG
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 1
47072: PUSH
47073: LD_INT 2
47075: NEG
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 2
47083: PUSH
47084: LD_INT 1
47086: NEG
47087: PUSH
47088: EMPTY
47089: LIST
47090: LIST
47091: PUSH
47092: LD_INT 3
47094: PUSH
47095: LD_INT 0
47097: PUSH
47098: EMPTY
47099: LIST
47100: LIST
47101: PUSH
47102: LD_INT 3
47104: PUSH
47105: LD_INT 1
47107: PUSH
47108: EMPTY
47109: LIST
47110: LIST
47111: PUSH
47112: LD_INT 1
47114: PUSH
47115: LD_INT 3
47117: PUSH
47118: EMPTY
47119: LIST
47120: LIST
47121: PUSH
47122: LD_INT 0
47124: PUSH
47125: LD_INT 3
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 1
47134: NEG
47135: PUSH
47136: LD_INT 2
47138: PUSH
47139: EMPTY
47140: LIST
47141: LIST
47142: PUSH
47143: LD_INT 2
47145: NEG
47146: PUSH
47147: LD_INT 1
47149: PUSH
47150: EMPTY
47151: LIST
47152: LIST
47153: PUSH
47154: LD_INT 3
47156: NEG
47157: PUSH
47158: LD_INT 0
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 3
47167: NEG
47168: PUSH
47169: LD_INT 1
47171: NEG
47172: PUSH
47173: EMPTY
47174: LIST
47175: LIST
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: LIST
47186: LIST
47187: LIST
47188: LIST
47189: LIST
47190: LIST
47191: LIST
47192: LIST
47193: LIST
47194: LIST
47195: LIST
47196: LIST
47197: LIST
47198: LIST
47199: LIST
47200: LIST
47201: LIST
47202: LIST
47203: LIST
47204: LIST
47205: LIST
47206: LIST
47207: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47208: LD_ADDR_VAR 0 47
47212: PUSH
47213: LD_INT 0
47215: PUSH
47216: LD_INT 0
47218: PUSH
47219: EMPTY
47220: LIST
47221: LIST
47222: PUSH
47223: LD_INT 0
47225: PUSH
47226: LD_INT 1
47228: NEG
47229: PUSH
47230: EMPTY
47231: LIST
47232: LIST
47233: PUSH
47234: LD_INT 1
47236: PUSH
47237: LD_INT 0
47239: PUSH
47240: EMPTY
47241: LIST
47242: LIST
47243: PUSH
47244: LD_INT 1
47246: PUSH
47247: LD_INT 1
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 0
47256: PUSH
47257: LD_INT 1
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: LD_INT 1
47266: NEG
47267: PUSH
47268: LD_INT 0
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: PUSH
47275: LD_INT 1
47277: NEG
47278: PUSH
47279: LD_INT 1
47281: NEG
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 1
47289: NEG
47290: PUSH
47291: LD_INT 2
47293: NEG
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 0
47301: PUSH
47302: LD_INT 2
47304: NEG
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 1
47312: PUSH
47313: LD_INT 1
47315: NEG
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 2
47323: NEG
47324: PUSH
47325: LD_INT 1
47327: NEG
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 2
47335: NEG
47336: PUSH
47337: LD_INT 2
47339: NEG
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: EMPTY
47346: LIST
47347: LIST
47348: LIST
47349: LIST
47350: LIST
47351: LIST
47352: LIST
47353: LIST
47354: LIST
47355: LIST
47356: LIST
47357: LIST
47358: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
47359: LD_ADDR_VAR 0 48
47363: PUSH
47364: LD_INT 0
47366: PUSH
47367: LD_INT 0
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 0
47376: PUSH
47377: LD_INT 1
47379: NEG
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 1
47387: PUSH
47388: LD_INT 0
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 1
47397: PUSH
47398: LD_INT 1
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 0
47407: PUSH
47408: LD_INT 1
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 1
47417: NEG
47418: PUSH
47419: LD_INT 0
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 1
47428: NEG
47429: PUSH
47430: LD_INT 1
47432: NEG
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 1
47440: NEG
47441: PUSH
47442: LD_INT 2
47444: NEG
47445: PUSH
47446: EMPTY
47447: LIST
47448: LIST
47449: PUSH
47450: LD_INT 0
47452: PUSH
47453: LD_INT 2
47455: NEG
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: LD_INT 1
47463: PUSH
47464: LD_INT 1
47466: NEG
47467: PUSH
47468: EMPTY
47469: LIST
47470: LIST
47471: PUSH
47472: LD_INT 2
47474: PUSH
47475: LD_INT 0
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 2
47484: PUSH
47485: LD_INT 1
47487: PUSH
47488: EMPTY
47489: LIST
47490: LIST
47491: PUSH
47492: EMPTY
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
47506: LD_ADDR_VAR 0 49
47510: PUSH
47511: LD_INT 0
47513: PUSH
47514: LD_INT 0
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 0
47523: PUSH
47524: LD_INT 1
47526: NEG
47527: PUSH
47528: EMPTY
47529: LIST
47530: LIST
47531: PUSH
47532: LD_INT 1
47534: PUSH
47535: LD_INT 0
47537: PUSH
47538: EMPTY
47539: LIST
47540: LIST
47541: PUSH
47542: LD_INT 1
47544: PUSH
47545: LD_INT 1
47547: PUSH
47548: EMPTY
47549: LIST
47550: LIST
47551: PUSH
47552: LD_INT 0
47554: PUSH
47555: LD_INT 1
47557: PUSH
47558: EMPTY
47559: LIST
47560: LIST
47561: PUSH
47562: LD_INT 1
47564: NEG
47565: PUSH
47566: LD_INT 0
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 1
47575: NEG
47576: PUSH
47577: LD_INT 1
47579: NEG
47580: PUSH
47581: EMPTY
47582: LIST
47583: LIST
47584: PUSH
47585: LD_INT 1
47587: PUSH
47588: LD_INT 1
47590: NEG
47591: PUSH
47592: EMPTY
47593: LIST
47594: LIST
47595: PUSH
47596: LD_INT 2
47598: PUSH
47599: LD_INT 0
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 2
47608: PUSH
47609: LD_INT 1
47611: PUSH
47612: EMPTY
47613: LIST
47614: LIST
47615: PUSH
47616: LD_INT 2
47618: PUSH
47619: LD_INT 2
47621: PUSH
47622: EMPTY
47623: LIST
47624: LIST
47625: PUSH
47626: LD_INT 1
47628: PUSH
47629: LD_INT 2
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
47650: LD_ADDR_VAR 0 50
47654: PUSH
47655: LD_INT 0
47657: PUSH
47658: LD_INT 0
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 0
47667: PUSH
47668: LD_INT 1
47670: NEG
47671: PUSH
47672: EMPTY
47673: LIST
47674: LIST
47675: PUSH
47676: LD_INT 1
47678: PUSH
47679: LD_INT 0
47681: PUSH
47682: EMPTY
47683: LIST
47684: LIST
47685: PUSH
47686: LD_INT 1
47688: PUSH
47689: LD_INT 1
47691: PUSH
47692: EMPTY
47693: LIST
47694: LIST
47695: PUSH
47696: LD_INT 0
47698: PUSH
47699: LD_INT 1
47701: PUSH
47702: EMPTY
47703: LIST
47704: LIST
47705: PUSH
47706: LD_INT 1
47708: NEG
47709: PUSH
47710: LD_INT 0
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: LD_INT 1
47719: NEG
47720: PUSH
47721: LD_INT 1
47723: NEG
47724: PUSH
47725: EMPTY
47726: LIST
47727: LIST
47728: PUSH
47729: LD_INT 2
47731: PUSH
47732: LD_INT 1
47734: PUSH
47735: EMPTY
47736: LIST
47737: LIST
47738: PUSH
47739: LD_INT 2
47741: PUSH
47742: LD_INT 2
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 1
47751: PUSH
47752: LD_INT 2
47754: PUSH
47755: EMPTY
47756: LIST
47757: LIST
47758: PUSH
47759: LD_INT 0
47761: PUSH
47762: LD_INT 2
47764: PUSH
47765: EMPTY
47766: LIST
47767: LIST
47768: PUSH
47769: LD_INT 1
47771: NEG
47772: PUSH
47773: LD_INT 1
47775: PUSH
47776: EMPTY
47777: LIST
47778: LIST
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: LIST
47784: LIST
47785: LIST
47786: LIST
47787: LIST
47788: LIST
47789: LIST
47790: LIST
47791: LIST
47792: LIST
47793: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47794: LD_ADDR_VAR 0 51
47798: PUSH
47799: LD_INT 0
47801: PUSH
47802: LD_INT 0
47804: PUSH
47805: EMPTY
47806: LIST
47807: LIST
47808: PUSH
47809: LD_INT 0
47811: PUSH
47812: LD_INT 1
47814: NEG
47815: PUSH
47816: EMPTY
47817: LIST
47818: LIST
47819: PUSH
47820: LD_INT 1
47822: PUSH
47823: LD_INT 0
47825: PUSH
47826: EMPTY
47827: LIST
47828: LIST
47829: PUSH
47830: LD_INT 1
47832: PUSH
47833: LD_INT 1
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 0
47842: PUSH
47843: LD_INT 1
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 1
47852: NEG
47853: PUSH
47854: LD_INT 0
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 1
47863: NEG
47864: PUSH
47865: LD_INT 1
47867: NEG
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 1
47875: PUSH
47876: LD_INT 2
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: PUSH
47883: LD_INT 0
47885: PUSH
47886: LD_INT 2
47888: PUSH
47889: EMPTY
47890: LIST
47891: LIST
47892: PUSH
47893: LD_INT 1
47895: NEG
47896: PUSH
47897: LD_INT 1
47899: PUSH
47900: EMPTY
47901: LIST
47902: LIST
47903: PUSH
47904: LD_INT 2
47906: NEG
47907: PUSH
47908: LD_INT 0
47910: PUSH
47911: EMPTY
47912: LIST
47913: LIST
47914: PUSH
47915: LD_INT 2
47917: NEG
47918: PUSH
47919: LD_INT 1
47921: NEG
47922: PUSH
47923: EMPTY
47924: LIST
47925: LIST
47926: PUSH
47927: EMPTY
47928: LIST
47929: LIST
47930: LIST
47931: LIST
47932: LIST
47933: LIST
47934: LIST
47935: LIST
47936: LIST
47937: LIST
47938: LIST
47939: LIST
47940: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47941: LD_ADDR_VAR 0 52
47945: PUSH
47946: LD_INT 0
47948: PUSH
47949: LD_INT 0
47951: PUSH
47952: EMPTY
47953: LIST
47954: LIST
47955: PUSH
47956: LD_INT 0
47958: PUSH
47959: LD_INT 1
47961: NEG
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 1
47969: PUSH
47970: LD_INT 0
47972: PUSH
47973: EMPTY
47974: LIST
47975: LIST
47976: PUSH
47977: LD_INT 1
47979: PUSH
47980: LD_INT 1
47982: PUSH
47983: EMPTY
47984: LIST
47985: LIST
47986: PUSH
47987: LD_INT 0
47989: PUSH
47990: LD_INT 1
47992: PUSH
47993: EMPTY
47994: LIST
47995: LIST
47996: PUSH
47997: LD_INT 1
47999: NEG
48000: PUSH
48001: LD_INT 0
48003: PUSH
48004: EMPTY
48005: LIST
48006: LIST
48007: PUSH
48008: LD_INT 1
48010: NEG
48011: PUSH
48012: LD_INT 1
48014: NEG
48015: PUSH
48016: EMPTY
48017: LIST
48018: LIST
48019: PUSH
48020: LD_INT 1
48022: NEG
48023: PUSH
48024: LD_INT 2
48026: NEG
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 1
48034: NEG
48035: PUSH
48036: LD_INT 1
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 2
48045: NEG
48046: PUSH
48047: LD_INT 0
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 2
48056: NEG
48057: PUSH
48058: LD_INT 1
48060: NEG
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 2
48068: NEG
48069: PUSH
48070: LD_INT 2
48072: NEG
48073: PUSH
48074: EMPTY
48075: LIST
48076: LIST
48077: PUSH
48078: EMPTY
48079: LIST
48080: LIST
48081: LIST
48082: LIST
48083: LIST
48084: LIST
48085: LIST
48086: LIST
48087: LIST
48088: LIST
48089: LIST
48090: LIST
48091: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48092: LD_ADDR_VAR 0 53
48096: PUSH
48097: LD_INT 0
48099: PUSH
48100: LD_INT 0
48102: PUSH
48103: EMPTY
48104: LIST
48105: LIST
48106: PUSH
48107: LD_INT 0
48109: PUSH
48110: LD_INT 1
48112: NEG
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 1
48120: PUSH
48121: LD_INT 0
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 1
48130: PUSH
48131: LD_INT 1
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 0
48140: PUSH
48141: LD_INT 1
48143: PUSH
48144: EMPTY
48145: LIST
48146: LIST
48147: PUSH
48148: LD_INT 1
48150: NEG
48151: PUSH
48152: LD_INT 0
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 1
48161: NEG
48162: PUSH
48163: LD_INT 1
48165: NEG
48166: PUSH
48167: EMPTY
48168: LIST
48169: LIST
48170: PUSH
48171: LD_INT 1
48173: NEG
48174: PUSH
48175: LD_INT 2
48177: NEG
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 0
48185: PUSH
48186: LD_INT 2
48188: NEG
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 1
48196: PUSH
48197: LD_INT 1
48199: NEG
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 2
48207: PUSH
48208: LD_INT 0
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 2
48217: PUSH
48218: LD_INT 1
48220: PUSH
48221: EMPTY
48222: LIST
48223: LIST
48224: PUSH
48225: LD_INT 2
48227: PUSH
48228: LD_INT 2
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 1
48237: PUSH
48238: LD_INT 2
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 0
48247: PUSH
48248: LD_INT 2
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: LD_INT 1
48257: NEG
48258: PUSH
48259: LD_INT 1
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 2
48268: NEG
48269: PUSH
48270: LD_INT 0
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 2
48279: NEG
48280: PUSH
48281: LD_INT 1
48283: NEG
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 2
48291: NEG
48292: PUSH
48293: LD_INT 2
48295: NEG
48296: PUSH
48297: EMPTY
48298: LIST
48299: LIST
48300: PUSH
48301: EMPTY
48302: LIST
48303: LIST
48304: LIST
48305: LIST
48306: LIST
48307: LIST
48308: LIST
48309: LIST
48310: LIST
48311: LIST
48312: LIST
48313: LIST
48314: LIST
48315: LIST
48316: LIST
48317: LIST
48318: LIST
48319: LIST
48320: LIST
48321: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48322: LD_ADDR_VAR 0 54
48326: PUSH
48327: LD_INT 0
48329: PUSH
48330: LD_INT 0
48332: PUSH
48333: EMPTY
48334: LIST
48335: LIST
48336: PUSH
48337: LD_INT 0
48339: PUSH
48340: LD_INT 1
48342: NEG
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 1
48350: PUSH
48351: LD_INT 0
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 1
48360: PUSH
48361: LD_INT 1
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 0
48370: PUSH
48371: LD_INT 1
48373: PUSH
48374: EMPTY
48375: LIST
48376: LIST
48377: PUSH
48378: LD_INT 1
48380: NEG
48381: PUSH
48382: LD_INT 0
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 1
48391: NEG
48392: PUSH
48393: LD_INT 1
48395: NEG
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 1
48403: NEG
48404: PUSH
48405: LD_INT 2
48407: NEG
48408: PUSH
48409: EMPTY
48410: LIST
48411: LIST
48412: PUSH
48413: LD_INT 0
48415: PUSH
48416: LD_INT 2
48418: NEG
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: PUSH
48424: LD_INT 1
48426: PUSH
48427: LD_INT 1
48429: NEG
48430: PUSH
48431: EMPTY
48432: LIST
48433: LIST
48434: PUSH
48435: LD_INT 2
48437: PUSH
48438: LD_INT 0
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 2
48447: PUSH
48448: LD_INT 1
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: PUSH
48455: LD_INT 2
48457: PUSH
48458: LD_INT 2
48460: PUSH
48461: EMPTY
48462: LIST
48463: LIST
48464: PUSH
48465: LD_INT 1
48467: PUSH
48468: LD_INT 2
48470: PUSH
48471: EMPTY
48472: LIST
48473: LIST
48474: PUSH
48475: LD_INT 0
48477: PUSH
48478: LD_INT 2
48480: PUSH
48481: EMPTY
48482: LIST
48483: LIST
48484: PUSH
48485: LD_INT 1
48487: NEG
48488: PUSH
48489: LD_INT 1
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 2
48498: NEG
48499: PUSH
48500: LD_INT 0
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 2
48509: NEG
48510: PUSH
48511: LD_INT 1
48513: NEG
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 2
48521: NEG
48522: PUSH
48523: LD_INT 2
48525: NEG
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: LIST
48535: LIST
48536: LIST
48537: LIST
48538: LIST
48539: LIST
48540: LIST
48541: LIST
48542: LIST
48543: LIST
48544: LIST
48545: LIST
48546: LIST
48547: LIST
48548: LIST
48549: LIST
48550: LIST
48551: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48552: LD_ADDR_VAR 0 55
48556: PUSH
48557: LD_INT 0
48559: PUSH
48560: LD_INT 0
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 0
48569: PUSH
48570: LD_INT 1
48572: NEG
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 1
48580: PUSH
48581: LD_INT 0
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 1
48590: PUSH
48591: LD_INT 1
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 0
48600: PUSH
48601: LD_INT 1
48603: PUSH
48604: EMPTY
48605: LIST
48606: LIST
48607: PUSH
48608: LD_INT 1
48610: NEG
48611: PUSH
48612: LD_INT 0
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 1
48621: NEG
48622: PUSH
48623: LD_INT 1
48625: NEG
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: PUSH
48631: LD_INT 1
48633: NEG
48634: PUSH
48635: LD_INT 2
48637: NEG
48638: PUSH
48639: EMPTY
48640: LIST
48641: LIST
48642: PUSH
48643: LD_INT 0
48645: PUSH
48646: LD_INT 2
48648: NEG
48649: PUSH
48650: EMPTY
48651: LIST
48652: LIST
48653: PUSH
48654: LD_INT 1
48656: PUSH
48657: LD_INT 1
48659: NEG
48660: PUSH
48661: EMPTY
48662: LIST
48663: LIST
48664: PUSH
48665: LD_INT 2
48667: PUSH
48668: LD_INT 0
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 2
48677: PUSH
48678: LD_INT 1
48680: PUSH
48681: EMPTY
48682: LIST
48683: LIST
48684: PUSH
48685: LD_INT 2
48687: PUSH
48688: LD_INT 2
48690: PUSH
48691: EMPTY
48692: LIST
48693: LIST
48694: PUSH
48695: LD_INT 1
48697: PUSH
48698: LD_INT 2
48700: PUSH
48701: EMPTY
48702: LIST
48703: LIST
48704: PUSH
48705: LD_INT 0
48707: PUSH
48708: LD_INT 2
48710: PUSH
48711: EMPTY
48712: LIST
48713: LIST
48714: PUSH
48715: LD_INT 1
48717: NEG
48718: PUSH
48719: LD_INT 1
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 2
48728: NEG
48729: PUSH
48730: LD_INT 0
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: LD_INT 2
48739: NEG
48740: PUSH
48741: LD_INT 1
48743: NEG
48744: PUSH
48745: EMPTY
48746: LIST
48747: LIST
48748: PUSH
48749: LD_INT 2
48751: NEG
48752: PUSH
48753: LD_INT 2
48755: NEG
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: EMPTY
48762: LIST
48763: LIST
48764: LIST
48765: LIST
48766: LIST
48767: LIST
48768: LIST
48769: LIST
48770: LIST
48771: LIST
48772: LIST
48773: LIST
48774: LIST
48775: LIST
48776: LIST
48777: LIST
48778: LIST
48779: LIST
48780: LIST
48781: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48782: LD_ADDR_VAR 0 56
48786: PUSH
48787: LD_INT 0
48789: PUSH
48790: LD_INT 0
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 0
48799: PUSH
48800: LD_INT 1
48802: NEG
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 1
48810: PUSH
48811: LD_INT 0
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 1
48820: PUSH
48821: LD_INT 1
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: LD_INT 0
48830: PUSH
48831: LD_INT 1
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 1
48840: NEG
48841: PUSH
48842: LD_INT 0
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 1
48851: NEG
48852: PUSH
48853: LD_INT 1
48855: NEG
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 1
48863: NEG
48864: PUSH
48865: LD_INT 2
48867: NEG
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 0
48875: PUSH
48876: LD_INT 2
48878: NEG
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 1
48886: PUSH
48887: LD_INT 1
48889: NEG
48890: PUSH
48891: EMPTY
48892: LIST
48893: LIST
48894: PUSH
48895: LD_INT 2
48897: PUSH
48898: LD_INT 0
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 2
48907: PUSH
48908: LD_INT 1
48910: PUSH
48911: EMPTY
48912: LIST
48913: LIST
48914: PUSH
48915: LD_INT 2
48917: PUSH
48918: LD_INT 2
48920: PUSH
48921: EMPTY
48922: LIST
48923: LIST
48924: PUSH
48925: LD_INT 1
48927: PUSH
48928: LD_INT 2
48930: PUSH
48931: EMPTY
48932: LIST
48933: LIST
48934: PUSH
48935: LD_INT 0
48937: PUSH
48938: LD_INT 2
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 1
48947: NEG
48948: PUSH
48949: LD_INT 1
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 2
48958: NEG
48959: PUSH
48960: LD_INT 0
48962: PUSH
48963: EMPTY
48964: LIST
48965: LIST
48966: PUSH
48967: LD_INT 2
48969: NEG
48970: PUSH
48971: LD_INT 1
48973: NEG
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: PUSH
48979: LD_INT 2
48981: NEG
48982: PUSH
48983: LD_INT 2
48985: NEG
48986: PUSH
48987: EMPTY
48988: LIST
48989: LIST
48990: PUSH
48991: EMPTY
48992: LIST
48993: LIST
48994: LIST
48995: LIST
48996: LIST
48997: LIST
48998: LIST
48999: LIST
49000: LIST
49001: LIST
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: LIST
49010: LIST
49011: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49012: LD_ADDR_VAR 0 57
49016: PUSH
49017: LD_INT 0
49019: PUSH
49020: LD_INT 0
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: PUSH
49027: LD_INT 0
49029: PUSH
49030: LD_INT 1
49032: NEG
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: LD_INT 1
49040: PUSH
49041: LD_INT 0
49043: PUSH
49044: EMPTY
49045: LIST
49046: LIST
49047: PUSH
49048: LD_INT 1
49050: PUSH
49051: LD_INT 1
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 0
49060: PUSH
49061: LD_INT 1
49063: PUSH
49064: EMPTY
49065: LIST
49066: LIST
49067: PUSH
49068: LD_INT 1
49070: NEG
49071: PUSH
49072: LD_INT 0
49074: PUSH
49075: EMPTY
49076: LIST
49077: LIST
49078: PUSH
49079: LD_INT 1
49081: NEG
49082: PUSH
49083: LD_INT 1
49085: NEG
49086: PUSH
49087: EMPTY
49088: LIST
49089: LIST
49090: PUSH
49091: LD_INT 1
49093: NEG
49094: PUSH
49095: LD_INT 2
49097: NEG
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 0
49105: PUSH
49106: LD_INT 2
49108: NEG
49109: PUSH
49110: EMPTY
49111: LIST
49112: LIST
49113: PUSH
49114: LD_INT 1
49116: PUSH
49117: LD_INT 1
49119: NEG
49120: PUSH
49121: EMPTY
49122: LIST
49123: LIST
49124: PUSH
49125: LD_INT 2
49127: PUSH
49128: LD_INT 0
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 2
49137: PUSH
49138: LD_INT 1
49140: PUSH
49141: EMPTY
49142: LIST
49143: LIST
49144: PUSH
49145: LD_INT 2
49147: PUSH
49148: LD_INT 2
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: PUSH
49155: LD_INT 1
49157: PUSH
49158: LD_INT 2
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 0
49167: PUSH
49168: LD_INT 2
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 1
49177: NEG
49178: PUSH
49179: LD_INT 1
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 2
49188: NEG
49189: PUSH
49190: LD_INT 0
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 2
49199: NEG
49200: PUSH
49201: LD_INT 1
49203: NEG
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 2
49211: NEG
49212: PUSH
49213: LD_INT 2
49215: NEG
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: LIST
49225: LIST
49226: LIST
49227: LIST
49228: LIST
49229: LIST
49230: LIST
49231: LIST
49232: LIST
49233: LIST
49234: LIST
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49242: LD_ADDR_VAR 0 58
49246: PUSH
49247: LD_INT 0
49249: PUSH
49250: LD_INT 0
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 0
49259: PUSH
49260: LD_INT 1
49262: NEG
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 1
49270: PUSH
49271: LD_INT 0
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 1
49280: PUSH
49281: LD_INT 1
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 0
49290: PUSH
49291: LD_INT 1
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 1
49300: NEG
49301: PUSH
49302: LD_INT 0
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 1
49311: NEG
49312: PUSH
49313: LD_INT 1
49315: NEG
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: PUSH
49321: LD_INT 1
49323: NEG
49324: PUSH
49325: LD_INT 2
49327: NEG
49328: PUSH
49329: EMPTY
49330: LIST
49331: LIST
49332: PUSH
49333: LD_INT 0
49335: PUSH
49336: LD_INT 2
49338: NEG
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: LD_INT 1
49346: PUSH
49347: LD_INT 1
49349: NEG
49350: PUSH
49351: EMPTY
49352: LIST
49353: LIST
49354: PUSH
49355: LD_INT 2
49357: PUSH
49358: LD_INT 0
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: LD_INT 2
49367: PUSH
49368: LD_INT 1
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 2
49377: PUSH
49378: LD_INT 2
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: LD_INT 1
49387: PUSH
49388: LD_INT 2
49390: PUSH
49391: EMPTY
49392: LIST
49393: LIST
49394: PUSH
49395: LD_INT 0
49397: PUSH
49398: LD_INT 2
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 1
49407: NEG
49408: PUSH
49409: LD_INT 1
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 2
49418: NEG
49419: PUSH
49420: LD_INT 0
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 2
49429: NEG
49430: PUSH
49431: LD_INT 1
49433: NEG
49434: PUSH
49435: EMPTY
49436: LIST
49437: LIST
49438: PUSH
49439: LD_INT 2
49441: NEG
49442: PUSH
49443: LD_INT 2
49445: NEG
49446: PUSH
49447: EMPTY
49448: LIST
49449: LIST
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: LIST
49455: LIST
49456: LIST
49457: LIST
49458: LIST
49459: LIST
49460: LIST
49461: LIST
49462: LIST
49463: LIST
49464: LIST
49465: LIST
49466: LIST
49467: LIST
49468: LIST
49469: LIST
49470: LIST
49471: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49472: LD_ADDR_VAR 0 59
49476: PUSH
49477: LD_INT 0
49479: PUSH
49480: LD_INT 0
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 0
49489: PUSH
49490: LD_INT 1
49492: NEG
49493: PUSH
49494: EMPTY
49495: LIST
49496: LIST
49497: PUSH
49498: LD_INT 1
49500: PUSH
49501: LD_INT 0
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 1
49510: PUSH
49511: LD_INT 1
49513: PUSH
49514: EMPTY
49515: LIST
49516: LIST
49517: PUSH
49518: LD_INT 0
49520: PUSH
49521: LD_INT 1
49523: PUSH
49524: EMPTY
49525: LIST
49526: LIST
49527: PUSH
49528: LD_INT 1
49530: NEG
49531: PUSH
49532: LD_INT 0
49534: PUSH
49535: EMPTY
49536: LIST
49537: LIST
49538: PUSH
49539: LD_INT 1
49541: NEG
49542: PUSH
49543: LD_INT 1
49545: NEG
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: LIST
49555: LIST
49556: LIST
49557: LIST
49558: LIST
49559: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49560: LD_ADDR_VAR 0 60
49564: PUSH
49565: LD_INT 0
49567: PUSH
49568: LD_INT 0
49570: PUSH
49571: EMPTY
49572: LIST
49573: LIST
49574: PUSH
49575: LD_INT 0
49577: PUSH
49578: LD_INT 1
49580: NEG
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 1
49588: PUSH
49589: LD_INT 0
49591: PUSH
49592: EMPTY
49593: LIST
49594: LIST
49595: PUSH
49596: LD_INT 1
49598: PUSH
49599: LD_INT 1
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: PUSH
49606: LD_INT 0
49608: PUSH
49609: LD_INT 1
49611: PUSH
49612: EMPTY
49613: LIST
49614: LIST
49615: PUSH
49616: LD_INT 1
49618: NEG
49619: PUSH
49620: LD_INT 0
49622: PUSH
49623: EMPTY
49624: LIST
49625: LIST
49626: PUSH
49627: LD_INT 1
49629: NEG
49630: PUSH
49631: LD_INT 1
49633: NEG
49634: PUSH
49635: EMPTY
49636: LIST
49637: LIST
49638: PUSH
49639: EMPTY
49640: LIST
49641: LIST
49642: LIST
49643: LIST
49644: LIST
49645: LIST
49646: LIST
49647: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49648: LD_ADDR_VAR 0 61
49652: PUSH
49653: LD_INT 0
49655: PUSH
49656: LD_INT 0
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 0
49665: PUSH
49666: LD_INT 1
49668: NEG
49669: PUSH
49670: EMPTY
49671: LIST
49672: LIST
49673: PUSH
49674: LD_INT 1
49676: PUSH
49677: LD_INT 0
49679: PUSH
49680: EMPTY
49681: LIST
49682: LIST
49683: PUSH
49684: LD_INT 1
49686: PUSH
49687: LD_INT 1
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 0
49696: PUSH
49697: LD_INT 1
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: LD_INT 1
49706: NEG
49707: PUSH
49708: LD_INT 0
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: PUSH
49715: LD_INT 1
49717: NEG
49718: PUSH
49719: LD_INT 1
49721: NEG
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: PUSH
49727: EMPTY
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49736: LD_ADDR_VAR 0 62
49740: PUSH
49741: LD_INT 0
49743: PUSH
49744: LD_INT 0
49746: PUSH
49747: EMPTY
49748: LIST
49749: LIST
49750: PUSH
49751: LD_INT 0
49753: PUSH
49754: LD_INT 1
49756: NEG
49757: PUSH
49758: EMPTY
49759: LIST
49760: LIST
49761: PUSH
49762: LD_INT 1
49764: PUSH
49765: LD_INT 0
49767: PUSH
49768: EMPTY
49769: LIST
49770: LIST
49771: PUSH
49772: LD_INT 1
49774: PUSH
49775: LD_INT 1
49777: PUSH
49778: EMPTY
49779: LIST
49780: LIST
49781: PUSH
49782: LD_INT 0
49784: PUSH
49785: LD_INT 1
49787: PUSH
49788: EMPTY
49789: LIST
49790: LIST
49791: PUSH
49792: LD_INT 1
49794: NEG
49795: PUSH
49796: LD_INT 0
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: LD_INT 1
49805: NEG
49806: PUSH
49807: LD_INT 1
49809: NEG
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: LIST
49819: LIST
49820: LIST
49821: LIST
49822: LIST
49823: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49824: LD_ADDR_VAR 0 63
49828: PUSH
49829: LD_INT 0
49831: PUSH
49832: LD_INT 0
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 0
49841: PUSH
49842: LD_INT 1
49844: NEG
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 1
49852: PUSH
49853: LD_INT 0
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 1
49862: PUSH
49863: LD_INT 1
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 0
49872: PUSH
49873: LD_INT 1
49875: PUSH
49876: EMPTY
49877: LIST
49878: LIST
49879: PUSH
49880: LD_INT 1
49882: NEG
49883: PUSH
49884: LD_INT 0
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 1
49893: NEG
49894: PUSH
49895: LD_INT 1
49897: NEG
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49912: LD_ADDR_VAR 0 64
49916: PUSH
49917: LD_INT 0
49919: PUSH
49920: LD_INT 0
49922: PUSH
49923: EMPTY
49924: LIST
49925: LIST
49926: PUSH
49927: LD_INT 0
49929: PUSH
49930: LD_INT 1
49932: NEG
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: PUSH
49938: LD_INT 1
49940: PUSH
49941: LD_INT 0
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 1
49950: PUSH
49951: LD_INT 1
49953: PUSH
49954: EMPTY
49955: LIST
49956: LIST
49957: PUSH
49958: LD_INT 0
49960: PUSH
49961: LD_INT 1
49963: PUSH
49964: EMPTY
49965: LIST
49966: LIST
49967: PUSH
49968: LD_INT 1
49970: NEG
49971: PUSH
49972: LD_INT 0
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: LD_INT 1
49981: NEG
49982: PUSH
49983: LD_INT 1
49985: NEG
49986: PUSH
49987: EMPTY
49988: LIST
49989: LIST
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: LIST
49995: LIST
49996: LIST
49997: LIST
49998: LIST
49999: ST_TO_ADDR
// end ; 1 :
50000: GO 55897
50002: LD_INT 1
50004: DOUBLE
50005: EQUAL
50006: IFTRUE 50010
50008: GO 52633
50010: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50011: LD_ADDR_VAR 0 11
50015: PUSH
50016: LD_INT 1
50018: NEG
50019: PUSH
50020: LD_INT 3
50022: NEG
50023: PUSH
50024: EMPTY
50025: LIST
50026: LIST
50027: PUSH
50028: LD_INT 0
50030: PUSH
50031: LD_INT 3
50033: NEG
50034: PUSH
50035: EMPTY
50036: LIST
50037: LIST
50038: PUSH
50039: LD_INT 1
50041: PUSH
50042: LD_INT 2
50044: NEG
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: LIST
50054: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50055: LD_ADDR_VAR 0 12
50059: PUSH
50060: LD_INT 2
50062: PUSH
50063: LD_INT 1
50065: NEG
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 3
50073: PUSH
50074: LD_INT 0
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 3
50083: PUSH
50084: LD_INT 1
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: LIST
50095: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50096: LD_ADDR_VAR 0 13
50100: PUSH
50101: LD_INT 3
50103: PUSH
50104: LD_INT 2
50106: PUSH
50107: EMPTY
50108: LIST
50109: LIST
50110: PUSH
50111: LD_INT 3
50113: PUSH
50114: LD_INT 3
50116: PUSH
50117: EMPTY
50118: LIST
50119: LIST
50120: PUSH
50121: LD_INT 2
50123: PUSH
50124: LD_INT 3
50126: PUSH
50127: EMPTY
50128: LIST
50129: LIST
50130: PUSH
50131: EMPTY
50132: LIST
50133: LIST
50134: LIST
50135: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50136: LD_ADDR_VAR 0 14
50140: PUSH
50141: LD_INT 1
50143: PUSH
50144: LD_INT 3
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 0
50153: PUSH
50154: LD_INT 3
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 1
50163: NEG
50164: PUSH
50165: LD_INT 2
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: EMPTY
50173: LIST
50174: LIST
50175: LIST
50176: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50177: LD_ADDR_VAR 0 15
50181: PUSH
50182: LD_INT 2
50184: NEG
50185: PUSH
50186: LD_INT 1
50188: PUSH
50189: EMPTY
50190: LIST
50191: LIST
50192: PUSH
50193: LD_INT 3
50195: NEG
50196: PUSH
50197: LD_INT 0
50199: PUSH
50200: EMPTY
50201: LIST
50202: LIST
50203: PUSH
50204: LD_INT 3
50206: NEG
50207: PUSH
50208: LD_INT 1
50210: NEG
50211: PUSH
50212: EMPTY
50213: LIST
50214: LIST
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: LIST
50220: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50221: LD_ADDR_VAR 0 16
50225: PUSH
50226: LD_INT 2
50228: NEG
50229: PUSH
50230: LD_INT 3
50232: NEG
50233: PUSH
50234: EMPTY
50235: LIST
50236: LIST
50237: PUSH
50238: LD_INT 3
50240: NEG
50241: PUSH
50242: LD_INT 2
50244: NEG
50245: PUSH
50246: EMPTY
50247: LIST
50248: LIST
50249: PUSH
50250: LD_INT 3
50252: NEG
50253: PUSH
50254: LD_INT 3
50256: NEG
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: LIST
50266: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50267: LD_ADDR_VAR 0 17
50271: PUSH
50272: LD_INT 1
50274: NEG
50275: PUSH
50276: LD_INT 3
50278: NEG
50279: PUSH
50280: EMPTY
50281: LIST
50282: LIST
50283: PUSH
50284: LD_INT 0
50286: PUSH
50287: LD_INT 3
50289: NEG
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 1
50297: PUSH
50298: LD_INT 2
50300: NEG
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: LIST
50310: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50311: LD_ADDR_VAR 0 18
50315: PUSH
50316: LD_INT 2
50318: PUSH
50319: LD_INT 1
50321: NEG
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 3
50329: PUSH
50330: LD_INT 0
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 3
50339: PUSH
50340: LD_INT 1
50342: PUSH
50343: EMPTY
50344: LIST
50345: LIST
50346: PUSH
50347: EMPTY
50348: LIST
50349: LIST
50350: LIST
50351: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50352: LD_ADDR_VAR 0 19
50356: PUSH
50357: LD_INT 3
50359: PUSH
50360: LD_INT 2
50362: PUSH
50363: EMPTY
50364: LIST
50365: LIST
50366: PUSH
50367: LD_INT 3
50369: PUSH
50370: LD_INT 3
50372: PUSH
50373: EMPTY
50374: LIST
50375: LIST
50376: PUSH
50377: LD_INT 2
50379: PUSH
50380: LD_INT 3
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: EMPTY
50388: LIST
50389: LIST
50390: LIST
50391: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50392: LD_ADDR_VAR 0 20
50396: PUSH
50397: LD_INT 1
50399: PUSH
50400: LD_INT 3
50402: PUSH
50403: EMPTY
50404: LIST
50405: LIST
50406: PUSH
50407: LD_INT 0
50409: PUSH
50410: LD_INT 3
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 1
50419: NEG
50420: PUSH
50421: LD_INT 2
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: EMPTY
50429: LIST
50430: LIST
50431: LIST
50432: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50433: LD_ADDR_VAR 0 21
50437: PUSH
50438: LD_INT 2
50440: NEG
50441: PUSH
50442: LD_INT 1
50444: PUSH
50445: EMPTY
50446: LIST
50447: LIST
50448: PUSH
50449: LD_INT 3
50451: NEG
50452: PUSH
50453: LD_INT 0
50455: PUSH
50456: EMPTY
50457: LIST
50458: LIST
50459: PUSH
50460: LD_INT 3
50462: NEG
50463: PUSH
50464: LD_INT 1
50466: NEG
50467: PUSH
50468: EMPTY
50469: LIST
50470: LIST
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: LIST
50476: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50477: LD_ADDR_VAR 0 22
50481: PUSH
50482: LD_INT 2
50484: NEG
50485: PUSH
50486: LD_INT 3
50488: NEG
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 3
50496: NEG
50497: PUSH
50498: LD_INT 2
50500: NEG
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 3
50508: NEG
50509: PUSH
50510: LD_INT 3
50512: NEG
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: EMPTY
50519: LIST
50520: LIST
50521: LIST
50522: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
50523: LD_ADDR_VAR 0 23
50527: PUSH
50528: LD_INT 0
50530: PUSH
50531: LD_INT 3
50533: NEG
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 1
50541: NEG
50542: PUSH
50543: LD_INT 4
50545: NEG
50546: PUSH
50547: EMPTY
50548: LIST
50549: LIST
50550: PUSH
50551: LD_INT 1
50553: PUSH
50554: LD_INT 3
50556: NEG
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: LIST
50566: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
50567: LD_ADDR_VAR 0 24
50571: PUSH
50572: LD_INT 3
50574: PUSH
50575: LD_INT 0
50577: PUSH
50578: EMPTY
50579: LIST
50580: LIST
50581: PUSH
50582: LD_INT 3
50584: PUSH
50585: LD_INT 1
50587: NEG
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 4
50595: PUSH
50596: LD_INT 1
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: EMPTY
50604: LIST
50605: LIST
50606: LIST
50607: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
50608: LD_ADDR_VAR 0 25
50612: PUSH
50613: LD_INT 3
50615: PUSH
50616: LD_INT 3
50618: PUSH
50619: EMPTY
50620: LIST
50621: LIST
50622: PUSH
50623: LD_INT 4
50625: PUSH
50626: LD_INT 3
50628: PUSH
50629: EMPTY
50630: LIST
50631: LIST
50632: PUSH
50633: LD_INT 3
50635: PUSH
50636: LD_INT 4
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: LIST
50647: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
50648: LD_ADDR_VAR 0 26
50652: PUSH
50653: LD_INT 0
50655: PUSH
50656: LD_INT 3
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 1
50665: PUSH
50666: LD_INT 4
50668: PUSH
50669: EMPTY
50670: LIST
50671: LIST
50672: PUSH
50673: LD_INT 1
50675: NEG
50676: PUSH
50677: LD_INT 3
50679: PUSH
50680: EMPTY
50681: LIST
50682: LIST
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: LIST
50688: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
50689: LD_ADDR_VAR 0 27
50693: PUSH
50694: LD_INT 3
50696: NEG
50697: PUSH
50698: LD_INT 0
50700: PUSH
50701: EMPTY
50702: LIST
50703: LIST
50704: PUSH
50705: LD_INT 3
50707: NEG
50708: PUSH
50709: LD_INT 1
50711: PUSH
50712: EMPTY
50713: LIST
50714: LIST
50715: PUSH
50716: LD_INT 4
50718: NEG
50719: PUSH
50720: LD_INT 1
50722: NEG
50723: PUSH
50724: EMPTY
50725: LIST
50726: LIST
50727: PUSH
50728: EMPTY
50729: LIST
50730: LIST
50731: LIST
50732: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
50733: LD_ADDR_VAR 0 28
50737: PUSH
50738: LD_INT 3
50740: NEG
50741: PUSH
50742: LD_INT 3
50744: NEG
50745: PUSH
50746: EMPTY
50747: LIST
50748: LIST
50749: PUSH
50750: LD_INT 3
50752: NEG
50753: PUSH
50754: LD_INT 4
50756: NEG
50757: PUSH
50758: EMPTY
50759: LIST
50760: LIST
50761: PUSH
50762: LD_INT 4
50764: NEG
50765: PUSH
50766: LD_INT 3
50768: NEG
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: EMPTY
50775: LIST
50776: LIST
50777: LIST
50778: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
50779: LD_ADDR_VAR 0 29
50783: PUSH
50784: LD_INT 1
50786: NEG
50787: PUSH
50788: LD_INT 3
50790: NEG
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 0
50798: PUSH
50799: LD_INT 3
50801: NEG
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 1
50809: PUSH
50810: LD_INT 2
50812: NEG
50813: PUSH
50814: EMPTY
50815: LIST
50816: LIST
50817: PUSH
50818: LD_INT 1
50820: NEG
50821: PUSH
50822: LD_INT 4
50824: NEG
50825: PUSH
50826: EMPTY
50827: LIST
50828: LIST
50829: PUSH
50830: LD_INT 0
50832: PUSH
50833: LD_INT 4
50835: NEG
50836: PUSH
50837: EMPTY
50838: LIST
50839: LIST
50840: PUSH
50841: LD_INT 1
50843: PUSH
50844: LD_INT 3
50846: NEG
50847: PUSH
50848: EMPTY
50849: LIST
50850: LIST
50851: PUSH
50852: LD_INT 1
50854: NEG
50855: PUSH
50856: LD_INT 5
50858: NEG
50859: PUSH
50860: EMPTY
50861: LIST
50862: LIST
50863: PUSH
50864: LD_INT 0
50866: PUSH
50867: LD_INT 5
50869: NEG
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 1
50877: PUSH
50878: LD_INT 4
50880: NEG
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 1
50888: NEG
50889: PUSH
50890: LD_INT 6
50892: NEG
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 0
50900: PUSH
50901: LD_INT 6
50903: NEG
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 1
50911: PUSH
50912: LD_INT 5
50914: NEG
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: EMPTY
50921: LIST
50922: LIST
50923: LIST
50924: LIST
50925: LIST
50926: LIST
50927: LIST
50928: LIST
50929: LIST
50930: LIST
50931: LIST
50932: LIST
50933: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
50934: LD_ADDR_VAR 0 30
50938: PUSH
50939: LD_INT 2
50941: PUSH
50942: LD_INT 1
50944: NEG
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 3
50952: PUSH
50953: LD_INT 0
50955: PUSH
50956: EMPTY
50957: LIST
50958: LIST
50959: PUSH
50960: LD_INT 3
50962: PUSH
50963: LD_INT 1
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 3
50972: PUSH
50973: LD_INT 1
50975: NEG
50976: PUSH
50977: EMPTY
50978: LIST
50979: LIST
50980: PUSH
50981: LD_INT 4
50983: PUSH
50984: LD_INT 0
50986: PUSH
50987: EMPTY
50988: LIST
50989: LIST
50990: PUSH
50991: LD_INT 4
50993: PUSH
50994: LD_INT 1
50996: PUSH
50997: EMPTY
50998: LIST
50999: LIST
51000: PUSH
51001: LD_INT 4
51003: PUSH
51004: LD_INT 1
51006: NEG
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 5
51014: PUSH
51015: LD_INT 0
51017: PUSH
51018: EMPTY
51019: LIST
51020: LIST
51021: PUSH
51022: LD_INT 5
51024: PUSH
51025: LD_INT 1
51027: PUSH
51028: EMPTY
51029: LIST
51030: LIST
51031: PUSH
51032: LD_INT 5
51034: PUSH
51035: LD_INT 1
51037: NEG
51038: PUSH
51039: EMPTY
51040: LIST
51041: LIST
51042: PUSH
51043: LD_INT 6
51045: PUSH
51046: LD_INT 0
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 6
51055: PUSH
51056: LD_INT 1
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: LIST
51067: LIST
51068: LIST
51069: LIST
51070: LIST
51071: LIST
51072: LIST
51073: LIST
51074: LIST
51075: LIST
51076: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
51077: LD_ADDR_VAR 0 31
51081: PUSH
51082: LD_INT 3
51084: PUSH
51085: LD_INT 2
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: PUSH
51092: LD_INT 3
51094: PUSH
51095: LD_INT 3
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 2
51104: PUSH
51105: LD_INT 3
51107: PUSH
51108: EMPTY
51109: LIST
51110: LIST
51111: PUSH
51112: LD_INT 4
51114: PUSH
51115: LD_INT 3
51117: PUSH
51118: EMPTY
51119: LIST
51120: LIST
51121: PUSH
51122: LD_INT 4
51124: PUSH
51125: LD_INT 4
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: PUSH
51132: LD_INT 3
51134: PUSH
51135: LD_INT 4
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 5
51144: PUSH
51145: LD_INT 4
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 5
51154: PUSH
51155: LD_INT 5
51157: PUSH
51158: EMPTY
51159: LIST
51160: LIST
51161: PUSH
51162: LD_INT 4
51164: PUSH
51165: LD_INT 5
51167: PUSH
51168: EMPTY
51169: LIST
51170: LIST
51171: PUSH
51172: LD_INT 6
51174: PUSH
51175: LD_INT 5
51177: PUSH
51178: EMPTY
51179: LIST
51180: LIST
51181: PUSH
51182: LD_INT 6
51184: PUSH
51185: LD_INT 6
51187: PUSH
51188: EMPTY
51189: LIST
51190: LIST
51191: PUSH
51192: LD_INT 5
51194: PUSH
51195: LD_INT 6
51197: PUSH
51198: EMPTY
51199: LIST
51200: LIST
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: LIST
51206: LIST
51207: LIST
51208: LIST
51209: LIST
51210: LIST
51211: LIST
51212: LIST
51213: LIST
51214: LIST
51215: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
51216: LD_ADDR_VAR 0 32
51220: PUSH
51221: LD_INT 1
51223: PUSH
51224: LD_INT 3
51226: PUSH
51227: EMPTY
51228: LIST
51229: LIST
51230: PUSH
51231: LD_INT 0
51233: PUSH
51234: LD_INT 3
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: PUSH
51241: LD_INT 1
51243: NEG
51244: PUSH
51245: LD_INT 2
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 1
51254: PUSH
51255: LD_INT 4
51257: PUSH
51258: EMPTY
51259: LIST
51260: LIST
51261: PUSH
51262: LD_INT 0
51264: PUSH
51265: LD_INT 4
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: PUSH
51272: LD_INT 1
51274: NEG
51275: PUSH
51276: LD_INT 3
51278: PUSH
51279: EMPTY
51280: LIST
51281: LIST
51282: PUSH
51283: LD_INT 1
51285: PUSH
51286: LD_INT 5
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: LD_INT 0
51295: PUSH
51296: LD_INT 5
51298: PUSH
51299: EMPTY
51300: LIST
51301: LIST
51302: PUSH
51303: LD_INT 1
51305: NEG
51306: PUSH
51307: LD_INT 4
51309: PUSH
51310: EMPTY
51311: LIST
51312: LIST
51313: PUSH
51314: LD_INT 1
51316: PUSH
51317: LD_INT 6
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: LD_INT 0
51326: PUSH
51327: LD_INT 6
51329: PUSH
51330: EMPTY
51331: LIST
51332: LIST
51333: PUSH
51334: LD_INT 1
51336: NEG
51337: PUSH
51338: LD_INT 5
51340: PUSH
51341: EMPTY
51342: LIST
51343: LIST
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
51359: LD_ADDR_VAR 0 33
51363: PUSH
51364: LD_INT 2
51366: NEG
51367: PUSH
51368: LD_INT 1
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 3
51377: NEG
51378: PUSH
51379: LD_INT 0
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: PUSH
51386: LD_INT 3
51388: NEG
51389: PUSH
51390: LD_INT 1
51392: NEG
51393: PUSH
51394: EMPTY
51395: LIST
51396: LIST
51397: PUSH
51398: LD_INT 3
51400: NEG
51401: PUSH
51402: LD_INT 1
51404: PUSH
51405: EMPTY
51406: LIST
51407: LIST
51408: PUSH
51409: LD_INT 4
51411: NEG
51412: PUSH
51413: LD_INT 0
51415: PUSH
51416: EMPTY
51417: LIST
51418: LIST
51419: PUSH
51420: LD_INT 4
51422: NEG
51423: PUSH
51424: LD_INT 1
51426: NEG
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: LD_INT 4
51434: NEG
51435: PUSH
51436: LD_INT 1
51438: PUSH
51439: EMPTY
51440: LIST
51441: LIST
51442: PUSH
51443: LD_INT 5
51445: NEG
51446: PUSH
51447: LD_INT 0
51449: PUSH
51450: EMPTY
51451: LIST
51452: LIST
51453: PUSH
51454: LD_INT 5
51456: NEG
51457: PUSH
51458: LD_INT 1
51460: NEG
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: LD_INT 5
51468: NEG
51469: PUSH
51470: LD_INT 1
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: PUSH
51477: LD_INT 6
51479: NEG
51480: PUSH
51481: LD_INT 0
51483: PUSH
51484: EMPTY
51485: LIST
51486: LIST
51487: PUSH
51488: LD_INT 6
51490: NEG
51491: PUSH
51492: LD_INT 1
51494: NEG
51495: PUSH
51496: EMPTY
51497: LIST
51498: LIST
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: LIST
51504: LIST
51505: LIST
51506: LIST
51507: LIST
51508: LIST
51509: LIST
51510: LIST
51511: LIST
51512: LIST
51513: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
51514: LD_ADDR_VAR 0 34
51518: PUSH
51519: LD_INT 2
51521: NEG
51522: PUSH
51523: LD_INT 3
51525: NEG
51526: PUSH
51527: EMPTY
51528: LIST
51529: LIST
51530: PUSH
51531: LD_INT 3
51533: NEG
51534: PUSH
51535: LD_INT 2
51537: NEG
51538: PUSH
51539: EMPTY
51540: LIST
51541: LIST
51542: PUSH
51543: LD_INT 3
51545: NEG
51546: PUSH
51547: LD_INT 3
51549: NEG
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 3
51557: NEG
51558: PUSH
51559: LD_INT 4
51561: NEG
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: PUSH
51567: LD_INT 4
51569: NEG
51570: PUSH
51571: LD_INT 3
51573: NEG
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: PUSH
51579: LD_INT 4
51581: NEG
51582: PUSH
51583: LD_INT 4
51585: NEG
51586: PUSH
51587: EMPTY
51588: LIST
51589: LIST
51590: PUSH
51591: LD_INT 4
51593: NEG
51594: PUSH
51595: LD_INT 5
51597: NEG
51598: PUSH
51599: EMPTY
51600: LIST
51601: LIST
51602: PUSH
51603: LD_INT 5
51605: NEG
51606: PUSH
51607: LD_INT 4
51609: NEG
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: PUSH
51615: LD_INT 5
51617: NEG
51618: PUSH
51619: LD_INT 5
51621: NEG
51622: PUSH
51623: EMPTY
51624: LIST
51625: LIST
51626: PUSH
51627: LD_INT 5
51629: NEG
51630: PUSH
51631: LD_INT 6
51633: NEG
51634: PUSH
51635: EMPTY
51636: LIST
51637: LIST
51638: PUSH
51639: LD_INT 6
51641: NEG
51642: PUSH
51643: LD_INT 5
51645: NEG
51646: PUSH
51647: EMPTY
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 6
51653: NEG
51654: PUSH
51655: LD_INT 6
51657: NEG
51658: PUSH
51659: EMPTY
51660: LIST
51661: LIST
51662: PUSH
51663: EMPTY
51664: LIST
51665: LIST
51666: LIST
51667: LIST
51668: LIST
51669: LIST
51670: LIST
51671: LIST
51672: LIST
51673: LIST
51674: LIST
51675: LIST
51676: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
51677: LD_ADDR_VAR 0 41
51681: PUSH
51682: LD_INT 0
51684: PUSH
51685: LD_INT 2
51687: NEG
51688: PUSH
51689: EMPTY
51690: LIST
51691: LIST
51692: PUSH
51693: LD_INT 1
51695: NEG
51696: PUSH
51697: LD_INT 3
51699: NEG
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: LD_INT 1
51707: PUSH
51708: LD_INT 2
51710: NEG
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: LIST
51720: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
51721: LD_ADDR_VAR 0 42
51725: PUSH
51726: LD_INT 2
51728: PUSH
51729: LD_INT 0
51731: PUSH
51732: EMPTY
51733: LIST
51734: LIST
51735: PUSH
51736: LD_INT 2
51738: PUSH
51739: LD_INT 1
51741: NEG
51742: PUSH
51743: EMPTY
51744: LIST
51745: LIST
51746: PUSH
51747: LD_INT 3
51749: PUSH
51750: LD_INT 1
51752: PUSH
51753: EMPTY
51754: LIST
51755: LIST
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: LIST
51761: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
51762: LD_ADDR_VAR 0 43
51766: PUSH
51767: LD_INT 2
51769: PUSH
51770: LD_INT 2
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: PUSH
51777: LD_INT 3
51779: PUSH
51780: LD_INT 2
51782: PUSH
51783: EMPTY
51784: LIST
51785: LIST
51786: PUSH
51787: LD_INT 2
51789: PUSH
51790: LD_INT 3
51792: PUSH
51793: EMPTY
51794: LIST
51795: LIST
51796: PUSH
51797: EMPTY
51798: LIST
51799: LIST
51800: LIST
51801: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
51802: LD_ADDR_VAR 0 44
51806: PUSH
51807: LD_INT 0
51809: PUSH
51810: LD_INT 2
51812: PUSH
51813: EMPTY
51814: LIST
51815: LIST
51816: PUSH
51817: LD_INT 1
51819: PUSH
51820: LD_INT 3
51822: PUSH
51823: EMPTY
51824: LIST
51825: LIST
51826: PUSH
51827: LD_INT 1
51829: NEG
51830: PUSH
51831: LD_INT 2
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: LIST
51842: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51843: LD_ADDR_VAR 0 45
51847: PUSH
51848: LD_INT 2
51850: NEG
51851: PUSH
51852: LD_INT 0
51854: PUSH
51855: EMPTY
51856: LIST
51857: LIST
51858: PUSH
51859: LD_INT 2
51861: NEG
51862: PUSH
51863: LD_INT 1
51865: PUSH
51866: EMPTY
51867: LIST
51868: LIST
51869: PUSH
51870: LD_INT 3
51872: NEG
51873: PUSH
51874: LD_INT 1
51876: NEG
51877: PUSH
51878: EMPTY
51879: LIST
51880: LIST
51881: PUSH
51882: EMPTY
51883: LIST
51884: LIST
51885: LIST
51886: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
51887: LD_ADDR_VAR 0 46
51891: PUSH
51892: LD_INT 2
51894: NEG
51895: PUSH
51896: LD_INT 2
51898: NEG
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 2
51906: NEG
51907: PUSH
51908: LD_INT 3
51910: NEG
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 3
51918: NEG
51919: PUSH
51920: LD_INT 2
51922: NEG
51923: PUSH
51924: EMPTY
51925: LIST
51926: LIST
51927: PUSH
51928: EMPTY
51929: LIST
51930: LIST
51931: LIST
51932: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
51933: LD_ADDR_VAR 0 47
51937: PUSH
51938: LD_INT 2
51940: NEG
51941: PUSH
51942: LD_INT 3
51944: NEG
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 1
51952: NEG
51953: PUSH
51954: LD_INT 3
51956: NEG
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51966: LD_ADDR_VAR 0 48
51970: PUSH
51971: LD_INT 1
51973: PUSH
51974: LD_INT 2
51976: NEG
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 2
51984: PUSH
51985: LD_INT 1
51987: NEG
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: EMPTY
51994: LIST
51995: LIST
51996: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
51997: LD_ADDR_VAR 0 49
52001: PUSH
52002: LD_INT 3
52004: PUSH
52005: LD_INT 1
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 3
52014: PUSH
52015: LD_INT 2
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
52026: LD_ADDR_VAR 0 50
52030: PUSH
52031: LD_INT 2
52033: PUSH
52034: LD_INT 3
52036: PUSH
52037: EMPTY
52038: LIST
52039: LIST
52040: PUSH
52041: LD_INT 1
52043: PUSH
52044: LD_INT 3
52046: PUSH
52047: EMPTY
52048: LIST
52049: LIST
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
52055: LD_ADDR_VAR 0 51
52059: PUSH
52060: LD_INT 1
52062: NEG
52063: PUSH
52064: LD_INT 2
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 2
52073: NEG
52074: PUSH
52075: LD_INT 1
52077: PUSH
52078: EMPTY
52079: LIST
52080: LIST
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
52086: LD_ADDR_VAR 0 52
52090: PUSH
52091: LD_INT 3
52093: NEG
52094: PUSH
52095: LD_INT 1
52097: NEG
52098: PUSH
52099: EMPTY
52100: LIST
52101: LIST
52102: PUSH
52103: LD_INT 3
52105: NEG
52106: PUSH
52107: LD_INT 2
52109: NEG
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
52119: LD_ADDR_VAR 0 53
52123: PUSH
52124: LD_INT 1
52126: NEG
52127: PUSH
52128: LD_INT 3
52130: NEG
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 0
52138: PUSH
52139: LD_INT 3
52141: NEG
52142: PUSH
52143: EMPTY
52144: LIST
52145: LIST
52146: PUSH
52147: LD_INT 1
52149: PUSH
52150: LD_INT 2
52152: NEG
52153: PUSH
52154: EMPTY
52155: LIST
52156: LIST
52157: PUSH
52158: EMPTY
52159: LIST
52160: LIST
52161: LIST
52162: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
52163: LD_ADDR_VAR 0 54
52167: PUSH
52168: LD_INT 2
52170: PUSH
52171: LD_INT 1
52173: NEG
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 3
52181: PUSH
52182: LD_INT 0
52184: PUSH
52185: EMPTY
52186: LIST
52187: LIST
52188: PUSH
52189: LD_INT 3
52191: PUSH
52192: LD_INT 1
52194: PUSH
52195: EMPTY
52196: LIST
52197: LIST
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: LIST
52203: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
52204: LD_ADDR_VAR 0 55
52208: PUSH
52209: LD_INT 3
52211: PUSH
52212: LD_INT 2
52214: PUSH
52215: EMPTY
52216: LIST
52217: LIST
52218: PUSH
52219: LD_INT 3
52221: PUSH
52222: LD_INT 3
52224: PUSH
52225: EMPTY
52226: LIST
52227: LIST
52228: PUSH
52229: LD_INT 2
52231: PUSH
52232: LD_INT 3
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: LIST
52243: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
52244: LD_ADDR_VAR 0 56
52248: PUSH
52249: LD_INT 1
52251: PUSH
52252: LD_INT 3
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 0
52261: PUSH
52262: LD_INT 3
52264: PUSH
52265: EMPTY
52266: LIST
52267: LIST
52268: PUSH
52269: LD_INT 1
52271: NEG
52272: PUSH
52273: LD_INT 2
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: PUSH
52280: EMPTY
52281: LIST
52282: LIST
52283: LIST
52284: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
52285: LD_ADDR_VAR 0 57
52289: PUSH
52290: LD_INT 2
52292: NEG
52293: PUSH
52294: LD_INT 1
52296: PUSH
52297: EMPTY
52298: LIST
52299: LIST
52300: PUSH
52301: LD_INT 3
52303: NEG
52304: PUSH
52305: LD_INT 0
52307: PUSH
52308: EMPTY
52309: LIST
52310: LIST
52311: PUSH
52312: LD_INT 3
52314: NEG
52315: PUSH
52316: LD_INT 1
52318: NEG
52319: PUSH
52320: EMPTY
52321: LIST
52322: LIST
52323: PUSH
52324: EMPTY
52325: LIST
52326: LIST
52327: LIST
52328: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
52329: LD_ADDR_VAR 0 58
52333: PUSH
52334: LD_INT 2
52336: NEG
52337: PUSH
52338: LD_INT 3
52340: NEG
52341: PUSH
52342: EMPTY
52343: LIST
52344: LIST
52345: PUSH
52346: LD_INT 3
52348: NEG
52349: PUSH
52350: LD_INT 2
52352: NEG
52353: PUSH
52354: EMPTY
52355: LIST
52356: LIST
52357: PUSH
52358: LD_INT 3
52360: NEG
52361: PUSH
52362: LD_INT 3
52364: NEG
52365: PUSH
52366: EMPTY
52367: LIST
52368: LIST
52369: PUSH
52370: EMPTY
52371: LIST
52372: LIST
52373: LIST
52374: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
52375: LD_ADDR_VAR 0 59
52379: PUSH
52380: LD_INT 1
52382: NEG
52383: PUSH
52384: LD_INT 2
52386: NEG
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 0
52394: PUSH
52395: LD_INT 2
52397: NEG
52398: PUSH
52399: EMPTY
52400: LIST
52401: LIST
52402: PUSH
52403: LD_INT 1
52405: PUSH
52406: LD_INT 1
52408: NEG
52409: PUSH
52410: EMPTY
52411: LIST
52412: LIST
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: LIST
52418: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
52419: LD_ADDR_VAR 0 60
52423: PUSH
52424: LD_INT 1
52426: PUSH
52427: LD_INT 1
52429: NEG
52430: PUSH
52431: EMPTY
52432: LIST
52433: LIST
52434: PUSH
52435: LD_INT 2
52437: PUSH
52438: LD_INT 0
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 2
52447: PUSH
52448: LD_INT 1
52450: PUSH
52451: EMPTY
52452: LIST
52453: LIST
52454: PUSH
52455: EMPTY
52456: LIST
52457: LIST
52458: LIST
52459: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
52460: LD_ADDR_VAR 0 61
52464: PUSH
52465: LD_INT 2
52467: PUSH
52468: LD_INT 1
52470: PUSH
52471: EMPTY
52472: LIST
52473: LIST
52474: PUSH
52475: LD_INT 2
52477: PUSH
52478: LD_INT 2
52480: PUSH
52481: EMPTY
52482: LIST
52483: LIST
52484: PUSH
52485: LD_INT 1
52487: PUSH
52488: LD_INT 2
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: EMPTY
52496: LIST
52497: LIST
52498: LIST
52499: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
52500: LD_ADDR_VAR 0 62
52504: PUSH
52505: LD_INT 1
52507: PUSH
52508: LD_INT 2
52510: PUSH
52511: EMPTY
52512: LIST
52513: LIST
52514: PUSH
52515: LD_INT 0
52517: PUSH
52518: LD_INT 2
52520: PUSH
52521: EMPTY
52522: LIST
52523: LIST
52524: PUSH
52525: LD_INT 1
52527: NEG
52528: PUSH
52529: LD_INT 1
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: LIST
52540: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
52541: LD_ADDR_VAR 0 63
52545: PUSH
52546: LD_INT 1
52548: NEG
52549: PUSH
52550: LD_INT 1
52552: PUSH
52553: EMPTY
52554: LIST
52555: LIST
52556: PUSH
52557: LD_INT 2
52559: NEG
52560: PUSH
52561: LD_INT 0
52563: PUSH
52564: EMPTY
52565: LIST
52566: LIST
52567: PUSH
52568: LD_INT 2
52570: NEG
52571: PUSH
52572: LD_INT 1
52574: NEG
52575: PUSH
52576: EMPTY
52577: LIST
52578: LIST
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: LIST
52584: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
52585: LD_ADDR_VAR 0 64
52589: PUSH
52590: LD_INT 1
52592: NEG
52593: PUSH
52594: LD_INT 2
52596: NEG
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 2
52604: NEG
52605: PUSH
52606: LD_INT 1
52608: NEG
52609: PUSH
52610: EMPTY
52611: LIST
52612: LIST
52613: PUSH
52614: LD_INT 2
52616: NEG
52617: PUSH
52618: LD_INT 2
52620: NEG
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: EMPTY
52627: LIST
52628: LIST
52629: LIST
52630: ST_TO_ADDR
// end ; 2 :
52631: GO 55897
52633: LD_INT 2
52635: DOUBLE
52636: EQUAL
52637: IFTRUE 52641
52639: GO 55896
52641: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
52642: LD_ADDR_VAR 0 29
52646: PUSH
52647: LD_INT 4
52649: PUSH
52650: LD_INT 0
52652: PUSH
52653: EMPTY
52654: LIST
52655: LIST
52656: PUSH
52657: LD_INT 4
52659: PUSH
52660: LD_INT 1
52662: NEG
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 5
52670: PUSH
52671: LD_INT 0
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 5
52680: PUSH
52681: LD_INT 1
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 4
52690: PUSH
52691: LD_INT 1
52693: PUSH
52694: EMPTY
52695: LIST
52696: LIST
52697: PUSH
52698: LD_INT 3
52700: PUSH
52701: LD_INT 0
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 3
52710: PUSH
52711: LD_INT 1
52713: NEG
52714: PUSH
52715: EMPTY
52716: LIST
52717: LIST
52718: PUSH
52719: LD_INT 3
52721: PUSH
52722: LD_INT 2
52724: NEG
52725: PUSH
52726: EMPTY
52727: LIST
52728: LIST
52729: PUSH
52730: LD_INT 5
52732: PUSH
52733: LD_INT 2
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 3
52742: PUSH
52743: LD_INT 3
52745: PUSH
52746: EMPTY
52747: LIST
52748: LIST
52749: PUSH
52750: LD_INT 3
52752: PUSH
52753: LD_INT 2
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 4
52762: PUSH
52763: LD_INT 3
52765: PUSH
52766: EMPTY
52767: LIST
52768: LIST
52769: PUSH
52770: LD_INT 4
52772: PUSH
52773: LD_INT 4
52775: PUSH
52776: EMPTY
52777: LIST
52778: LIST
52779: PUSH
52780: LD_INT 3
52782: PUSH
52783: LD_INT 4
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 2
52792: PUSH
52793: LD_INT 3
52795: PUSH
52796: EMPTY
52797: LIST
52798: LIST
52799: PUSH
52800: LD_INT 2
52802: PUSH
52803: LD_INT 2
52805: PUSH
52806: EMPTY
52807: LIST
52808: LIST
52809: PUSH
52810: LD_INT 4
52812: PUSH
52813: LD_INT 2
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: PUSH
52820: LD_INT 2
52822: PUSH
52823: LD_INT 4
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 0
52832: PUSH
52833: LD_INT 4
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 0
52842: PUSH
52843: LD_INT 3
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 1
52852: PUSH
52853: LD_INT 4
52855: PUSH
52856: EMPTY
52857: LIST
52858: LIST
52859: PUSH
52860: LD_INT 1
52862: PUSH
52863: LD_INT 5
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: PUSH
52870: LD_INT 0
52872: PUSH
52873: LD_INT 5
52875: PUSH
52876: EMPTY
52877: LIST
52878: LIST
52879: PUSH
52880: LD_INT 1
52882: NEG
52883: PUSH
52884: LD_INT 4
52886: PUSH
52887: EMPTY
52888: LIST
52889: LIST
52890: PUSH
52891: LD_INT 1
52893: NEG
52894: PUSH
52895: LD_INT 3
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 2
52904: PUSH
52905: LD_INT 5
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: PUSH
52912: LD_INT 2
52914: NEG
52915: PUSH
52916: LD_INT 3
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: PUSH
52923: LD_INT 3
52925: NEG
52926: PUSH
52927: LD_INT 0
52929: PUSH
52930: EMPTY
52931: LIST
52932: LIST
52933: PUSH
52934: LD_INT 3
52936: NEG
52937: PUSH
52938: LD_INT 1
52940: NEG
52941: PUSH
52942: EMPTY
52943: LIST
52944: LIST
52945: PUSH
52946: LD_INT 2
52948: NEG
52949: PUSH
52950: LD_INT 0
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 2
52959: NEG
52960: PUSH
52961: LD_INT 1
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 3
52970: NEG
52971: PUSH
52972: LD_INT 1
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 4
52981: NEG
52982: PUSH
52983: LD_INT 0
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 4
52992: NEG
52993: PUSH
52994: LD_INT 1
52996: NEG
52997: PUSH
52998: EMPTY
52999: LIST
53000: LIST
53001: PUSH
53002: LD_INT 4
53004: NEG
53005: PUSH
53006: LD_INT 2
53008: NEG
53009: PUSH
53010: EMPTY
53011: LIST
53012: LIST
53013: PUSH
53014: LD_INT 2
53016: NEG
53017: PUSH
53018: LD_INT 2
53020: PUSH
53021: EMPTY
53022: LIST
53023: LIST
53024: PUSH
53025: LD_INT 4
53027: NEG
53028: PUSH
53029: LD_INT 4
53031: NEG
53032: PUSH
53033: EMPTY
53034: LIST
53035: LIST
53036: PUSH
53037: LD_INT 4
53039: NEG
53040: PUSH
53041: LD_INT 5
53043: NEG
53044: PUSH
53045: EMPTY
53046: LIST
53047: LIST
53048: PUSH
53049: LD_INT 3
53051: NEG
53052: PUSH
53053: LD_INT 4
53055: NEG
53056: PUSH
53057: EMPTY
53058: LIST
53059: LIST
53060: PUSH
53061: LD_INT 3
53063: NEG
53064: PUSH
53065: LD_INT 3
53067: NEG
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 4
53075: NEG
53076: PUSH
53077: LD_INT 3
53079: NEG
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 5
53087: NEG
53088: PUSH
53089: LD_INT 4
53091: NEG
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 5
53099: NEG
53100: PUSH
53101: LD_INT 5
53103: NEG
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 3
53111: NEG
53112: PUSH
53113: LD_INT 5
53115: NEG
53116: PUSH
53117: EMPTY
53118: LIST
53119: LIST
53120: PUSH
53121: LD_INT 5
53123: NEG
53124: PUSH
53125: LD_INT 3
53127: NEG
53128: PUSH
53129: EMPTY
53130: LIST
53131: LIST
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: LIST
53137: LIST
53138: LIST
53139: LIST
53140: LIST
53141: LIST
53142: LIST
53143: LIST
53144: LIST
53145: LIST
53146: LIST
53147: LIST
53148: LIST
53149: LIST
53150: LIST
53151: LIST
53152: LIST
53153: LIST
53154: LIST
53155: LIST
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: LIST
53163: LIST
53164: LIST
53165: LIST
53166: LIST
53167: LIST
53168: LIST
53169: LIST
53170: LIST
53171: LIST
53172: LIST
53173: LIST
53174: LIST
53175: LIST
53176: LIST
53177: LIST
53178: LIST
53179: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
53180: LD_ADDR_VAR 0 30
53184: PUSH
53185: LD_INT 4
53187: PUSH
53188: LD_INT 4
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 4
53197: PUSH
53198: LD_INT 3
53200: PUSH
53201: EMPTY
53202: LIST
53203: LIST
53204: PUSH
53205: LD_INT 5
53207: PUSH
53208: LD_INT 4
53210: PUSH
53211: EMPTY
53212: LIST
53213: LIST
53214: PUSH
53215: LD_INT 5
53217: PUSH
53218: LD_INT 5
53220: PUSH
53221: EMPTY
53222: LIST
53223: LIST
53224: PUSH
53225: LD_INT 4
53227: PUSH
53228: LD_INT 5
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 3
53237: PUSH
53238: LD_INT 4
53240: PUSH
53241: EMPTY
53242: LIST
53243: LIST
53244: PUSH
53245: LD_INT 3
53247: PUSH
53248: LD_INT 3
53250: PUSH
53251: EMPTY
53252: LIST
53253: LIST
53254: PUSH
53255: LD_INT 5
53257: PUSH
53258: LD_INT 3
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 3
53267: PUSH
53268: LD_INT 5
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 0
53277: PUSH
53278: LD_INT 3
53280: PUSH
53281: EMPTY
53282: LIST
53283: LIST
53284: PUSH
53285: LD_INT 0
53287: PUSH
53288: LD_INT 2
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 1
53297: PUSH
53298: LD_INT 3
53300: PUSH
53301: EMPTY
53302: LIST
53303: LIST
53304: PUSH
53305: LD_INT 1
53307: PUSH
53308: LD_INT 4
53310: PUSH
53311: EMPTY
53312: LIST
53313: LIST
53314: PUSH
53315: LD_INT 0
53317: PUSH
53318: LD_INT 4
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_INT 1
53327: NEG
53328: PUSH
53329: LD_INT 3
53331: PUSH
53332: EMPTY
53333: LIST
53334: LIST
53335: PUSH
53336: LD_INT 1
53338: NEG
53339: PUSH
53340: LD_INT 2
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 2
53349: PUSH
53350: LD_INT 4
53352: PUSH
53353: EMPTY
53354: LIST
53355: LIST
53356: PUSH
53357: LD_INT 2
53359: NEG
53360: PUSH
53361: LD_INT 2
53363: PUSH
53364: EMPTY
53365: LIST
53366: LIST
53367: PUSH
53368: LD_INT 4
53370: NEG
53371: PUSH
53372: LD_INT 0
53374: PUSH
53375: EMPTY
53376: LIST
53377: LIST
53378: PUSH
53379: LD_INT 4
53381: NEG
53382: PUSH
53383: LD_INT 1
53385: NEG
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 3
53393: NEG
53394: PUSH
53395: LD_INT 0
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 3
53404: NEG
53405: PUSH
53406: LD_INT 1
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 4
53415: NEG
53416: PUSH
53417: LD_INT 1
53419: PUSH
53420: EMPTY
53421: LIST
53422: LIST
53423: PUSH
53424: LD_INT 5
53426: NEG
53427: PUSH
53428: LD_INT 0
53430: PUSH
53431: EMPTY
53432: LIST
53433: LIST
53434: PUSH
53435: LD_INT 5
53437: NEG
53438: PUSH
53439: LD_INT 1
53441: NEG
53442: PUSH
53443: EMPTY
53444: LIST
53445: LIST
53446: PUSH
53447: LD_INT 5
53449: NEG
53450: PUSH
53451: LD_INT 2
53453: NEG
53454: PUSH
53455: EMPTY
53456: LIST
53457: LIST
53458: PUSH
53459: LD_INT 3
53461: NEG
53462: PUSH
53463: LD_INT 2
53465: PUSH
53466: EMPTY
53467: LIST
53468: LIST
53469: PUSH
53470: LD_INT 3
53472: NEG
53473: PUSH
53474: LD_INT 3
53476: NEG
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 3
53484: NEG
53485: PUSH
53486: LD_INT 4
53488: NEG
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 2
53496: NEG
53497: PUSH
53498: LD_INT 3
53500: NEG
53501: PUSH
53502: EMPTY
53503: LIST
53504: LIST
53505: PUSH
53506: LD_INT 2
53508: NEG
53509: PUSH
53510: LD_INT 2
53512: NEG
53513: PUSH
53514: EMPTY
53515: LIST
53516: LIST
53517: PUSH
53518: LD_INT 3
53520: NEG
53521: PUSH
53522: LD_INT 2
53524: NEG
53525: PUSH
53526: EMPTY
53527: LIST
53528: LIST
53529: PUSH
53530: LD_INT 4
53532: NEG
53533: PUSH
53534: LD_INT 3
53536: NEG
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 4
53544: NEG
53545: PUSH
53546: LD_INT 4
53548: NEG
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 2
53556: NEG
53557: PUSH
53558: LD_INT 4
53560: NEG
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 4
53568: NEG
53569: PUSH
53570: LD_INT 2
53572: NEG
53573: PUSH
53574: EMPTY
53575: LIST
53576: LIST
53577: PUSH
53578: LD_INT 0
53580: PUSH
53581: LD_INT 4
53583: NEG
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 0
53591: PUSH
53592: LD_INT 5
53594: NEG
53595: PUSH
53596: EMPTY
53597: LIST
53598: LIST
53599: PUSH
53600: LD_INT 1
53602: PUSH
53603: LD_INT 4
53605: NEG
53606: PUSH
53607: EMPTY
53608: LIST
53609: LIST
53610: PUSH
53611: LD_INT 1
53613: PUSH
53614: LD_INT 3
53616: NEG
53617: PUSH
53618: EMPTY
53619: LIST
53620: LIST
53621: PUSH
53622: LD_INT 0
53624: PUSH
53625: LD_INT 3
53627: NEG
53628: PUSH
53629: EMPTY
53630: LIST
53631: LIST
53632: PUSH
53633: LD_INT 1
53635: NEG
53636: PUSH
53637: LD_INT 4
53639: NEG
53640: PUSH
53641: EMPTY
53642: LIST
53643: LIST
53644: PUSH
53645: LD_INT 1
53647: NEG
53648: PUSH
53649: LD_INT 5
53651: NEG
53652: PUSH
53653: EMPTY
53654: LIST
53655: LIST
53656: PUSH
53657: LD_INT 2
53659: PUSH
53660: LD_INT 3
53662: NEG
53663: PUSH
53664: EMPTY
53665: LIST
53666: LIST
53667: PUSH
53668: LD_INT 2
53670: NEG
53671: PUSH
53672: LD_INT 5
53674: NEG
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: EMPTY
53681: LIST
53682: LIST
53683: LIST
53684: LIST
53685: LIST
53686: LIST
53687: LIST
53688: LIST
53689: LIST
53690: LIST
53691: LIST
53692: LIST
53693: LIST
53694: LIST
53695: LIST
53696: LIST
53697: LIST
53698: LIST
53699: LIST
53700: LIST
53701: LIST
53702: LIST
53703: LIST
53704: LIST
53705: LIST
53706: LIST
53707: LIST
53708: LIST
53709: LIST
53710: LIST
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: LIST
53718: LIST
53719: LIST
53720: LIST
53721: LIST
53722: LIST
53723: LIST
53724: LIST
53725: LIST
53726: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
53727: LD_ADDR_VAR 0 31
53731: PUSH
53732: LD_INT 0
53734: PUSH
53735: LD_INT 4
53737: PUSH
53738: EMPTY
53739: LIST
53740: LIST
53741: PUSH
53742: LD_INT 0
53744: PUSH
53745: LD_INT 3
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 1
53754: PUSH
53755: LD_INT 4
53757: PUSH
53758: EMPTY
53759: LIST
53760: LIST
53761: PUSH
53762: LD_INT 1
53764: PUSH
53765: LD_INT 5
53767: PUSH
53768: EMPTY
53769: LIST
53770: LIST
53771: PUSH
53772: LD_INT 0
53774: PUSH
53775: LD_INT 5
53777: PUSH
53778: EMPTY
53779: LIST
53780: LIST
53781: PUSH
53782: LD_INT 1
53784: NEG
53785: PUSH
53786: LD_INT 4
53788: PUSH
53789: EMPTY
53790: LIST
53791: LIST
53792: PUSH
53793: LD_INT 1
53795: NEG
53796: PUSH
53797: LD_INT 3
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 2
53806: PUSH
53807: LD_INT 5
53809: PUSH
53810: EMPTY
53811: LIST
53812: LIST
53813: PUSH
53814: LD_INT 2
53816: NEG
53817: PUSH
53818: LD_INT 3
53820: PUSH
53821: EMPTY
53822: LIST
53823: LIST
53824: PUSH
53825: LD_INT 3
53827: NEG
53828: PUSH
53829: LD_INT 0
53831: PUSH
53832: EMPTY
53833: LIST
53834: LIST
53835: PUSH
53836: LD_INT 3
53838: NEG
53839: PUSH
53840: LD_INT 1
53842: NEG
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 2
53850: NEG
53851: PUSH
53852: LD_INT 0
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 2
53861: NEG
53862: PUSH
53863: LD_INT 1
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 3
53872: NEG
53873: PUSH
53874: LD_INT 1
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: PUSH
53881: LD_INT 4
53883: NEG
53884: PUSH
53885: LD_INT 0
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 4
53894: NEG
53895: PUSH
53896: LD_INT 1
53898: NEG
53899: PUSH
53900: EMPTY
53901: LIST
53902: LIST
53903: PUSH
53904: LD_INT 4
53906: NEG
53907: PUSH
53908: LD_INT 2
53910: NEG
53911: PUSH
53912: EMPTY
53913: LIST
53914: LIST
53915: PUSH
53916: LD_INT 2
53918: NEG
53919: PUSH
53920: LD_INT 2
53922: PUSH
53923: EMPTY
53924: LIST
53925: LIST
53926: PUSH
53927: LD_INT 4
53929: NEG
53930: PUSH
53931: LD_INT 4
53933: NEG
53934: PUSH
53935: EMPTY
53936: LIST
53937: LIST
53938: PUSH
53939: LD_INT 4
53941: NEG
53942: PUSH
53943: LD_INT 5
53945: NEG
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 3
53953: NEG
53954: PUSH
53955: LD_INT 4
53957: NEG
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: LD_INT 3
53965: NEG
53966: PUSH
53967: LD_INT 3
53969: NEG
53970: PUSH
53971: EMPTY
53972: LIST
53973: LIST
53974: PUSH
53975: LD_INT 4
53977: NEG
53978: PUSH
53979: LD_INT 3
53981: NEG
53982: PUSH
53983: EMPTY
53984: LIST
53985: LIST
53986: PUSH
53987: LD_INT 5
53989: NEG
53990: PUSH
53991: LD_INT 4
53993: NEG
53994: PUSH
53995: EMPTY
53996: LIST
53997: LIST
53998: PUSH
53999: LD_INT 5
54001: NEG
54002: PUSH
54003: LD_INT 5
54005: NEG
54006: PUSH
54007: EMPTY
54008: LIST
54009: LIST
54010: PUSH
54011: LD_INT 3
54013: NEG
54014: PUSH
54015: LD_INT 5
54017: NEG
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 5
54025: NEG
54026: PUSH
54027: LD_INT 3
54029: NEG
54030: PUSH
54031: EMPTY
54032: LIST
54033: LIST
54034: PUSH
54035: LD_INT 0
54037: PUSH
54038: LD_INT 3
54040: NEG
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 0
54048: PUSH
54049: LD_INT 4
54051: NEG
54052: PUSH
54053: EMPTY
54054: LIST
54055: LIST
54056: PUSH
54057: LD_INT 1
54059: PUSH
54060: LD_INT 3
54062: NEG
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 1
54070: PUSH
54071: LD_INT 2
54073: NEG
54074: PUSH
54075: EMPTY
54076: LIST
54077: LIST
54078: PUSH
54079: LD_INT 0
54081: PUSH
54082: LD_INT 2
54084: NEG
54085: PUSH
54086: EMPTY
54087: LIST
54088: LIST
54089: PUSH
54090: LD_INT 1
54092: NEG
54093: PUSH
54094: LD_INT 3
54096: NEG
54097: PUSH
54098: EMPTY
54099: LIST
54100: LIST
54101: PUSH
54102: LD_INT 1
54104: NEG
54105: PUSH
54106: LD_INT 4
54108: NEG
54109: PUSH
54110: EMPTY
54111: LIST
54112: LIST
54113: PUSH
54114: LD_INT 2
54116: PUSH
54117: LD_INT 2
54119: NEG
54120: PUSH
54121: EMPTY
54122: LIST
54123: LIST
54124: PUSH
54125: LD_INT 2
54127: NEG
54128: PUSH
54129: LD_INT 4
54131: NEG
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 4
54139: PUSH
54140: LD_INT 0
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: LD_INT 4
54149: PUSH
54150: LD_INT 1
54152: NEG
54153: PUSH
54154: EMPTY
54155: LIST
54156: LIST
54157: PUSH
54158: LD_INT 5
54160: PUSH
54161: LD_INT 0
54163: PUSH
54164: EMPTY
54165: LIST
54166: LIST
54167: PUSH
54168: LD_INT 5
54170: PUSH
54171: LD_INT 1
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 4
54180: PUSH
54181: LD_INT 1
54183: PUSH
54184: EMPTY
54185: LIST
54186: LIST
54187: PUSH
54188: LD_INT 3
54190: PUSH
54191: LD_INT 0
54193: PUSH
54194: EMPTY
54195: LIST
54196: LIST
54197: PUSH
54198: LD_INT 3
54200: PUSH
54201: LD_INT 1
54203: NEG
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 3
54211: PUSH
54212: LD_INT 2
54214: NEG
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 5
54222: PUSH
54223: LD_INT 2
54225: PUSH
54226: EMPTY
54227: LIST
54228: LIST
54229: PUSH
54230: EMPTY
54231: LIST
54232: LIST
54233: LIST
54234: LIST
54235: LIST
54236: LIST
54237: LIST
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
54277: LD_ADDR_VAR 0 32
54281: PUSH
54282: LD_INT 4
54284: NEG
54285: PUSH
54286: LD_INT 0
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 4
54295: NEG
54296: PUSH
54297: LD_INT 1
54299: NEG
54300: PUSH
54301: EMPTY
54302: LIST
54303: LIST
54304: PUSH
54305: LD_INT 3
54307: NEG
54308: PUSH
54309: LD_INT 0
54311: PUSH
54312: EMPTY
54313: LIST
54314: LIST
54315: PUSH
54316: LD_INT 3
54318: NEG
54319: PUSH
54320: LD_INT 1
54322: PUSH
54323: EMPTY
54324: LIST
54325: LIST
54326: PUSH
54327: LD_INT 4
54329: NEG
54330: PUSH
54331: LD_INT 1
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 5
54340: NEG
54341: PUSH
54342: LD_INT 0
54344: PUSH
54345: EMPTY
54346: LIST
54347: LIST
54348: PUSH
54349: LD_INT 5
54351: NEG
54352: PUSH
54353: LD_INT 1
54355: NEG
54356: PUSH
54357: EMPTY
54358: LIST
54359: LIST
54360: PUSH
54361: LD_INT 5
54363: NEG
54364: PUSH
54365: LD_INT 2
54367: NEG
54368: PUSH
54369: EMPTY
54370: LIST
54371: LIST
54372: PUSH
54373: LD_INT 3
54375: NEG
54376: PUSH
54377: LD_INT 2
54379: PUSH
54380: EMPTY
54381: LIST
54382: LIST
54383: PUSH
54384: LD_INT 3
54386: NEG
54387: PUSH
54388: LD_INT 3
54390: NEG
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 3
54398: NEG
54399: PUSH
54400: LD_INT 4
54402: NEG
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 2
54410: NEG
54411: PUSH
54412: LD_INT 3
54414: NEG
54415: PUSH
54416: EMPTY
54417: LIST
54418: LIST
54419: PUSH
54420: LD_INT 2
54422: NEG
54423: PUSH
54424: LD_INT 2
54426: NEG
54427: PUSH
54428: EMPTY
54429: LIST
54430: LIST
54431: PUSH
54432: LD_INT 3
54434: NEG
54435: PUSH
54436: LD_INT 2
54438: NEG
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_INT 4
54446: NEG
54447: PUSH
54448: LD_INT 3
54450: NEG
54451: PUSH
54452: EMPTY
54453: LIST
54454: LIST
54455: PUSH
54456: LD_INT 4
54458: NEG
54459: PUSH
54460: LD_INT 4
54462: NEG
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 2
54470: NEG
54471: PUSH
54472: LD_INT 4
54474: NEG
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 4
54482: NEG
54483: PUSH
54484: LD_INT 2
54486: NEG
54487: PUSH
54488: EMPTY
54489: LIST
54490: LIST
54491: PUSH
54492: LD_INT 0
54494: PUSH
54495: LD_INT 4
54497: NEG
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 0
54505: PUSH
54506: LD_INT 5
54508: NEG
54509: PUSH
54510: EMPTY
54511: LIST
54512: LIST
54513: PUSH
54514: LD_INT 1
54516: PUSH
54517: LD_INT 4
54519: NEG
54520: PUSH
54521: EMPTY
54522: LIST
54523: LIST
54524: PUSH
54525: LD_INT 1
54527: PUSH
54528: LD_INT 3
54530: NEG
54531: PUSH
54532: EMPTY
54533: LIST
54534: LIST
54535: PUSH
54536: LD_INT 0
54538: PUSH
54539: LD_INT 3
54541: NEG
54542: PUSH
54543: EMPTY
54544: LIST
54545: LIST
54546: PUSH
54547: LD_INT 1
54549: NEG
54550: PUSH
54551: LD_INT 4
54553: NEG
54554: PUSH
54555: EMPTY
54556: LIST
54557: LIST
54558: PUSH
54559: LD_INT 1
54561: NEG
54562: PUSH
54563: LD_INT 5
54565: NEG
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 2
54573: PUSH
54574: LD_INT 3
54576: NEG
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 2
54584: NEG
54585: PUSH
54586: LD_INT 5
54588: NEG
54589: PUSH
54590: EMPTY
54591: LIST
54592: LIST
54593: PUSH
54594: LD_INT 3
54596: PUSH
54597: LD_INT 0
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 3
54606: PUSH
54607: LD_INT 1
54609: NEG
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 4
54617: PUSH
54618: LD_INT 0
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 4
54627: PUSH
54628: LD_INT 1
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 3
54637: PUSH
54638: LD_INT 1
54640: PUSH
54641: EMPTY
54642: LIST
54643: LIST
54644: PUSH
54645: LD_INT 2
54647: PUSH
54648: LD_INT 0
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 2
54657: PUSH
54658: LD_INT 1
54660: NEG
54661: PUSH
54662: EMPTY
54663: LIST
54664: LIST
54665: PUSH
54666: LD_INT 2
54668: PUSH
54669: LD_INT 2
54671: NEG
54672: PUSH
54673: EMPTY
54674: LIST
54675: LIST
54676: PUSH
54677: LD_INT 4
54679: PUSH
54680: LD_INT 2
54682: PUSH
54683: EMPTY
54684: LIST
54685: LIST
54686: PUSH
54687: LD_INT 4
54689: PUSH
54690: LD_INT 4
54692: PUSH
54693: EMPTY
54694: LIST
54695: LIST
54696: PUSH
54697: LD_INT 4
54699: PUSH
54700: LD_INT 3
54702: PUSH
54703: EMPTY
54704: LIST
54705: LIST
54706: PUSH
54707: LD_INT 5
54709: PUSH
54710: LD_INT 4
54712: PUSH
54713: EMPTY
54714: LIST
54715: LIST
54716: PUSH
54717: LD_INT 5
54719: PUSH
54720: LD_INT 5
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 4
54729: PUSH
54730: LD_INT 5
54732: PUSH
54733: EMPTY
54734: LIST
54735: LIST
54736: PUSH
54737: LD_INT 3
54739: PUSH
54740: LD_INT 4
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 3
54749: PUSH
54750: LD_INT 3
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: PUSH
54757: LD_INT 5
54759: PUSH
54760: LD_INT 3
54762: PUSH
54763: EMPTY
54764: LIST
54765: LIST
54766: PUSH
54767: LD_INT 3
54769: PUSH
54770: LD_INT 5
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: EMPTY
54778: LIST
54779: LIST
54780: LIST
54781: LIST
54782: LIST
54783: LIST
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: LIST
54791: LIST
54792: LIST
54793: LIST
54794: LIST
54795: LIST
54796: LIST
54797: LIST
54798: LIST
54799: LIST
54800: LIST
54801: LIST
54802: LIST
54803: LIST
54804: LIST
54805: LIST
54806: LIST
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: LIST
54813: LIST
54814: LIST
54815: LIST
54816: LIST
54817: LIST
54818: LIST
54819: LIST
54820: LIST
54821: LIST
54822: LIST
54823: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
54824: LD_ADDR_VAR 0 33
54828: PUSH
54829: LD_INT 4
54831: NEG
54832: PUSH
54833: LD_INT 4
54835: NEG
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 4
54843: NEG
54844: PUSH
54845: LD_INT 5
54847: NEG
54848: PUSH
54849: EMPTY
54850: LIST
54851: LIST
54852: PUSH
54853: LD_INT 3
54855: NEG
54856: PUSH
54857: LD_INT 4
54859: NEG
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 3
54867: NEG
54868: PUSH
54869: LD_INT 3
54871: NEG
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 4
54879: NEG
54880: PUSH
54881: LD_INT 3
54883: NEG
54884: PUSH
54885: EMPTY
54886: LIST
54887: LIST
54888: PUSH
54889: LD_INT 5
54891: NEG
54892: PUSH
54893: LD_INT 4
54895: NEG
54896: PUSH
54897: EMPTY
54898: LIST
54899: LIST
54900: PUSH
54901: LD_INT 5
54903: NEG
54904: PUSH
54905: LD_INT 5
54907: NEG
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 3
54915: NEG
54916: PUSH
54917: LD_INT 5
54919: NEG
54920: PUSH
54921: EMPTY
54922: LIST
54923: LIST
54924: PUSH
54925: LD_INT 5
54927: NEG
54928: PUSH
54929: LD_INT 3
54931: NEG
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: PUSH
54937: LD_INT 0
54939: PUSH
54940: LD_INT 3
54942: NEG
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 0
54950: PUSH
54951: LD_INT 4
54953: NEG
54954: PUSH
54955: EMPTY
54956: LIST
54957: LIST
54958: PUSH
54959: LD_INT 1
54961: PUSH
54962: LD_INT 3
54964: NEG
54965: PUSH
54966: EMPTY
54967: LIST
54968: LIST
54969: PUSH
54970: LD_INT 1
54972: PUSH
54973: LD_INT 2
54975: NEG
54976: PUSH
54977: EMPTY
54978: LIST
54979: LIST
54980: PUSH
54981: LD_INT 0
54983: PUSH
54984: LD_INT 2
54986: NEG
54987: PUSH
54988: EMPTY
54989: LIST
54990: LIST
54991: PUSH
54992: LD_INT 1
54994: NEG
54995: PUSH
54996: LD_INT 3
54998: NEG
54999: PUSH
55000: EMPTY
55001: LIST
55002: LIST
55003: PUSH
55004: LD_INT 1
55006: NEG
55007: PUSH
55008: LD_INT 4
55010: NEG
55011: PUSH
55012: EMPTY
55013: LIST
55014: LIST
55015: PUSH
55016: LD_INT 2
55018: PUSH
55019: LD_INT 2
55021: NEG
55022: PUSH
55023: EMPTY
55024: LIST
55025: LIST
55026: PUSH
55027: LD_INT 2
55029: NEG
55030: PUSH
55031: LD_INT 4
55033: NEG
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: PUSH
55039: LD_INT 4
55041: PUSH
55042: LD_INT 0
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 4
55051: PUSH
55052: LD_INT 1
55054: NEG
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 5
55062: PUSH
55063: LD_INT 0
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 5
55072: PUSH
55073: LD_INT 1
55075: PUSH
55076: EMPTY
55077: LIST
55078: LIST
55079: PUSH
55080: LD_INT 4
55082: PUSH
55083: LD_INT 1
55085: PUSH
55086: EMPTY
55087: LIST
55088: LIST
55089: PUSH
55090: LD_INT 3
55092: PUSH
55093: LD_INT 0
55095: PUSH
55096: EMPTY
55097: LIST
55098: LIST
55099: PUSH
55100: LD_INT 3
55102: PUSH
55103: LD_INT 1
55105: NEG
55106: PUSH
55107: EMPTY
55108: LIST
55109: LIST
55110: PUSH
55111: LD_INT 3
55113: PUSH
55114: LD_INT 2
55116: NEG
55117: PUSH
55118: EMPTY
55119: LIST
55120: LIST
55121: PUSH
55122: LD_INT 5
55124: PUSH
55125: LD_INT 2
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 3
55134: PUSH
55135: LD_INT 3
55137: PUSH
55138: EMPTY
55139: LIST
55140: LIST
55141: PUSH
55142: LD_INT 3
55144: PUSH
55145: LD_INT 2
55147: PUSH
55148: EMPTY
55149: LIST
55150: LIST
55151: PUSH
55152: LD_INT 4
55154: PUSH
55155: LD_INT 3
55157: PUSH
55158: EMPTY
55159: LIST
55160: LIST
55161: PUSH
55162: LD_INT 4
55164: PUSH
55165: LD_INT 4
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 3
55174: PUSH
55175: LD_INT 4
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: PUSH
55182: LD_INT 2
55184: PUSH
55185: LD_INT 3
55187: PUSH
55188: EMPTY
55189: LIST
55190: LIST
55191: PUSH
55192: LD_INT 2
55194: PUSH
55195: LD_INT 2
55197: PUSH
55198: EMPTY
55199: LIST
55200: LIST
55201: PUSH
55202: LD_INT 4
55204: PUSH
55205: LD_INT 2
55207: PUSH
55208: EMPTY
55209: LIST
55210: LIST
55211: PUSH
55212: LD_INT 2
55214: PUSH
55215: LD_INT 4
55217: PUSH
55218: EMPTY
55219: LIST
55220: LIST
55221: PUSH
55222: LD_INT 0
55224: PUSH
55225: LD_INT 4
55227: PUSH
55228: EMPTY
55229: LIST
55230: LIST
55231: PUSH
55232: LD_INT 0
55234: PUSH
55235: LD_INT 3
55237: PUSH
55238: EMPTY
55239: LIST
55240: LIST
55241: PUSH
55242: LD_INT 1
55244: PUSH
55245: LD_INT 4
55247: PUSH
55248: EMPTY
55249: LIST
55250: LIST
55251: PUSH
55252: LD_INT 1
55254: PUSH
55255: LD_INT 5
55257: PUSH
55258: EMPTY
55259: LIST
55260: LIST
55261: PUSH
55262: LD_INT 0
55264: PUSH
55265: LD_INT 5
55267: PUSH
55268: EMPTY
55269: LIST
55270: LIST
55271: PUSH
55272: LD_INT 1
55274: NEG
55275: PUSH
55276: LD_INT 4
55278: PUSH
55279: EMPTY
55280: LIST
55281: LIST
55282: PUSH
55283: LD_INT 1
55285: NEG
55286: PUSH
55287: LD_INT 3
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: PUSH
55294: LD_INT 2
55296: PUSH
55297: LD_INT 5
55299: PUSH
55300: EMPTY
55301: LIST
55302: LIST
55303: PUSH
55304: LD_INT 2
55306: NEG
55307: PUSH
55308: LD_INT 3
55310: PUSH
55311: EMPTY
55312: LIST
55313: LIST
55314: PUSH
55315: EMPTY
55316: LIST
55317: LIST
55318: LIST
55319: LIST
55320: LIST
55321: LIST
55322: LIST
55323: LIST
55324: LIST
55325: LIST
55326: LIST
55327: LIST
55328: LIST
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: LIST
55348: LIST
55349: LIST
55350: LIST
55351: LIST
55352: LIST
55353: LIST
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: LIST
55361: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
55362: LD_ADDR_VAR 0 34
55366: PUSH
55367: LD_INT 0
55369: PUSH
55370: LD_INT 4
55372: NEG
55373: PUSH
55374: EMPTY
55375: LIST
55376: LIST
55377: PUSH
55378: LD_INT 0
55380: PUSH
55381: LD_INT 5
55383: NEG
55384: PUSH
55385: EMPTY
55386: LIST
55387: LIST
55388: PUSH
55389: LD_INT 1
55391: PUSH
55392: LD_INT 4
55394: NEG
55395: PUSH
55396: EMPTY
55397: LIST
55398: LIST
55399: PUSH
55400: LD_INT 1
55402: PUSH
55403: LD_INT 3
55405: NEG
55406: PUSH
55407: EMPTY
55408: LIST
55409: LIST
55410: PUSH
55411: LD_INT 0
55413: PUSH
55414: LD_INT 3
55416: NEG
55417: PUSH
55418: EMPTY
55419: LIST
55420: LIST
55421: PUSH
55422: LD_INT 1
55424: NEG
55425: PUSH
55426: LD_INT 4
55428: NEG
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: PUSH
55434: LD_INT 1
55436: NEG
55437: PUSH
55438: LD_INT 5
55440: NEG
55441: PUSH
55442: EMPTY
55443: LIST
55444: LIST
55445: PUSH
55446: LD_INT 2
55448: PUSH
55449: LD_INT 3
55451: NEG
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: PUSH
55457: LD_INT 2
55459: NEG
55460: PUSH
55461: LD_INT 5
55463: NEG
55464: PUSH
55465: EMPTY
55466: LIST
55467: LIST
55468: PUSH
55469: LD_INT 3
55471: PUSH
55472: LD_INT 0
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: PUSH
55479: LD_INT 3
55481: PUSH
55482: LD_INT 1
55484: NEG
55485: PUSH
55486: EMPTY
55487: LIST
55488: LIST
55489: PUSH
55490: LD_INT 4
55492: PUSH
55493: LD_INT 0
55495: PUSH
55496: EMPTY
55497: LIST
55498: LIST
55499: PUSH
55500: LD_INT 4
55502: PUSH
55503: LD_INT 1
55505: PUSH
55506: EMPTY
55507: LIST
55508: LIST
55509: PUSH
55510: LD_INT 3
55512: PUSH
55513: LD_INT 1
55515: PUSH
55516: EMPTY
55517: LIST
55518: LIST
55519: PUSH
55520: LD_INT 2
55522: PUSH
55523: LD_INT 0
55525: PUSH
55526: EMPTY
55527: LIST
55528: LIST
55529: PUSH
55530: LD_INT 2
55532: PUSH
55533: LD_INT 1
55535: NEG
55536: PUSH
55537: EMPTY
55538: LIST
55539: LIST
55540: PUSH
55541: LD_INT 2
55543: PUSH
55544: LD_INT 2
55546: NEG
55547: PUSH
55548: EMPTY
55549: LIST
55550: LIST
55551: PUSH
55552: LD_INT 4
55554: PUSH
55555: LD_INT 2
55557: PUSH
55558: EMPTY
55559: LIST
55560: LIST
55561: PUSH
55562: LD_INT 4
55564: PUSH
55565: LD_INT 4
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: PUSH
55572: LD_INT 4
55574: PUSH
55575: LD_INT 3
55577: PUSH
55578: EMPTY
55579: LIST
55580: LIST
55581: PUSH
55582: LD_INT 5
55584: PUSH
55585: LD_INT 4
55587: PUSH
55588: EMPTY
55589: LIST
55590: LIST
55591: PUSH
55592: LD_INT 5
55594: PUSH
55595: LD_INT 5
55597: PUSH
55598: EMPTY
55599: LIST
55600: LIST
55601: PUSH
55602: LD_INT 4
55604: PUSH
55605: LD_INT 5
55607: PUSH
55608: EMPTY
55609: LIST
55610: LIST
55611: PUSH
55612: LD_INT 3
55614: PUSH
55615: LD_INT 4
55617: PUSH
55618: EMPTY
55619: LIST
55620: LIST
55621: PUSH
55622: LD_INT 3
55624: PUSH
55625: LD_INT 3
55627: PUSH
55628: EMPTY
55629: LIST
55630: LIST
55631: PUSH
55632: LD_INT 5
55634: PUSH
55635: LD_INT 3
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: PUSH
55642: LD_INT 3
55644: PUSH
55645: LD_INT 5
55647: PUSH
55648: EMPTY
55649: LIST
55650: LIST
55651: PUSH
55652: LD_INT 0
55654: PUSH
55655: LD_INT 3
55657: PUSH
55658: EMPTY
55659: LIST
55660: LIST
55661: PUSH
55662: LD_INT 0
55664: PUSH
55665: LD_INT 2
55667: PUSH
55668: EMPTY
55669: LIST
55670: LIST
55671: PUSH
55672: LD_INT 1
55674: PUSH
55675: LD_INT 3
55677: PUSH
55678: EMPTY
55679: LIST
55680: LIST
55681: PUSH
55682: LD_INT 1
55684: PUSH
55685: LD_INT 4
55687: PUSH
55688: EMPTY
55689: LIST
55690: LIST
55691: PUSH
55692: LD_INT 0
55694: PUSH
55695: LD_INT 4
55697: PUSH
55698: EMPTY
55699: LIST
55700: LIST
55701: PUSH
55702: LD_INT 1
55704: NEG
55705: PUSH
55706: LD_INT 3
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: PUSH
55713: LD_INT 1
55715: NEG
55716: PUSH
55717: LD_INT 2
55719: PUSH
55720: EMPTY
55721: LIST
55722: LIST
55723: PUSH
55724: LD_INT 2
55726: PUSH
55727: LD_INT 4
55729: PUSH
55730: EMPTY
55731: LIST
55732: LIST
55733: PUSH
55734: LD_INT 2
55736: NEG
55737: PUSH
55738: LD_INT 2
55740: PUSH
55741: EMPTY
55742: LIST
55743: LIST
55744: PUSH
55745: LD_INT 4
55747: NEG
55748: PUSH
55749: LD_INT 0
55751: PUSH
55752: EMPTY
55753: LIST
55754: LIST
55755: PUSH
55756: LD_INT 4
55758: NEG
55759: PUSH
55760: LD_INT 1
55762: NEG
55763: PUSH
55764: EMPTY
55765: LIST
55766: LIST
55767: PUSH
55768: LD_INT 3
55770: NEG
55771: PUSH
55772: LD_INT 0
55774: PUSH
55775: EMPTY
55776: LIST
55777: LIST
55778: PUSH
55779: LD_INT 3
55781: NEG
55782: PUSH
55783: LD_INT 1
55785: PUSH
55786: EMPTY
55787: LIST
55788: LIST
55789: PUSH
55790: LD_INT 4
55792: NEG
55793: PUSH
55794: LD_INT 1
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: PUSH
55801: LD_INT 5
55803: NEG
55804: PUSH
55805: LD_INT 0
55807: PUSH
55808: EMPTY
55809: LIST
55810: LIST
55811: PUSH
55812: LD_INT 5
55814: NEG
55815: PUSH
55816: LD_INT 1
55818: NEG
55819: PUSH
55820: EMPTY
55821: LIST
55822: LIST
55823: PUSH
55824: LD_INT 5
55826: NEG
55827: PUSH
55828: LD_INT 2
55830: NEG
55831: PUSH
55832: EMPTY
55833: LIST
55834: LIST
55835: PUSH
55836: LD_INT 3
55838: NEG
55839: PUSH
55840: LD_INT 2
55842: PUSH
55843: EMPTY
55844: LIST
55845: LIST
55846: PUSH
55847: EMPTY
55848: LIST
55849: LIST
55850: LIST
55851: LIST
55852: LIST
55853: LIST
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: LIST
55860: LIST
55861: LIST
55862: LIST
55863: LIST
55864: LIST
55865: LIST
55866: LIST
55867: LIST
55868: LIST
55869: LIST
55870: LIST
55871: LIST
55872: LIST
55873: LIST
55874: LIST
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: LIST
55887: LIST
55888: LIST
55889: LIST
55890: LIST
55891: LIST
55892: LIST
55893: ST_TO_ADDR
// end ; end ;
55894: GO 55897
55896: POP
// case btype of b_depot , b_warehouse :
55897: LD_VAR 0 1
55901: PUSH
55902: LD_INT 0
55904: DOUBLE
55905: EQUAL
55906: IFTRUE 55916
55908: LD_INT 1
55910: DOUBLE
55911: EQUAL
55912: IFTRUE 55916
55914: GO 56117
55916: POP
// case nation of nation_american :
55917: LD_VAR 0 5
55921: PUSH
55922: LD_INT 1
55924: DOUBLE
55925: EQUAL
55926: IFTRUE 55930
55928: GO 55986
55930: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
55931: LD_ADDR_VAR 0 9
55935: PUSH
55936: LD_VAR 0 11
55940: PUSH
55941: LD_VAR 0 12
55945: PUSH
55946: LD_VAR 0 13
55950: PUSH
55951: LD_VAR 0 14
55955: PUSH
55956: LD_VAR 0 15
55960: PUSH
55961: LD_VAR 0 16
55965: PUSH
55966: EMPTY
55967: LIST
55968: LIST
55969: LIST
55970: LIST
55971: LIST
55972: LIST
55973: PUSH
55974: LD_VAR 0 4
55978: PUSH
55979: LD_INT 1
55981: PLUS
55982: ARRAY
55983: ST_TO_ADDR
55984: GO 56115
55986: LD_INT 2
55988: DOUBLE
55989: EQUAL
55990: IFTRUE 55994
55992: GO 56050
55994: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
55995: LD_ADDR_VAR 0 9
55999: PUSH
56000: LD_VAR 0 17
56004: PUSH
56005: LD_VAR 0 18
56009: PUSH
56010: LD_VAR 0 19
56014: PUSH
56015: LD_VAR 0 20
56019: PUSH
56020: LD_VAR 0 21
56024: PUSH
56025: LD_VAR 0 22
56029: PUSH
56030: EMPTY
56031: LIST
56032: LIST
56033: LIST
56034: LIST
56035: LIST
56036: LIST
56037: PUSH
56038: LD_VAR 0 4
56042: PUSH
56043: LD_INT 1
56045: PLUS
56046: ARRAY
56047: ST_TO_ADDR
56048: GO 56115
56050: LD_INT 3
56052: DOUBLE
56053: EQUAL
56054: IFTRUE 56058
56056: GO 56114
56058: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
56059: LD_ADDR_VAR 0 9
56063: PUSH
56064: LD_VAR 0 23
56068: PUSH
56069: LD_VAR 0 24
56073: PUSH
56074: LD_VAR 0 25
56078: PUSH
56079: LD_VAR 0 26
56083: PUSH
56084: LD_VAR 0 27
56088: PUSH
56089: LD_VAR 0 28
56093: PUSH
56094: EMPTY
56095: LIST
56096: LIST
56097: LIST
56098: LIST
56099: LIST
56100: LIST
56101: PUSH
56102: LD_VAR 0 4
56106: PUSH
56107: LD_INT 1
56109: PLUS
56110: ARRAY
56111: ST_TO_ADDR
56112: GO 56115
56114: POP
56115: GO 56670
56117: LD_INT 2
56119: DOUBLE
56120: EQUAL
56121: IFTRUE 56131
56123: LD_INT 3
56125: DOUBLE
56126: EQUAL
56127: IFTRUE 56131
56129: GO 56187
56131: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
56132: LD_ADDR_VAR 0 9
56136: PUSH
56137: LD_VAR 0 29
56141: PUSH
56142: LD_VAR 0 30
56146: PUSH
56147: LD_VAR 0 31
56151: PUSH
56152: LD_VAR 0 32
56156: PUSH
56157: LD_VAR 0 33
56161: PUSH
56162: LD_VAR 0 34
56166: PUSH
56167: EMPTY
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: PUSH
56175: LD_VAR 0 4
56179: PUSH
56180: LD_INT 1
56182: PLUS
56183: ARRAY
56184: ST_TO_ADDR
56185: GO 56670
56187: LD_INT 16
56189: DOUBLE
56190: EQUAL
56191: IFTRUE 56249
56193: LD_INT 17
56195: DOUBLE
56196: EQUAL
56197: IFTRUE 56249
56199: LD_INT 18
56201: DOUBLE
56202: EQUAL
56203: IFTRUE 56249
56205: LD_INT 19
56207: DOUBLE
56208: EQUAL
56209: IFTRUE 56249
56211: LD_INT 22
56213: DOUBLE
56214: EQUAL
56215: IFTRUE 56249
56217: LD_INT 20
56219: DOUBLE
56220: EQUAL
56221: IFTRUE 56249
56223: LD_INT 21
56225: DOUBLE
56226: EQUAL
56227: IFTRUE 56249
56229: LD_INT 23
56231: DOUBLE
56232: EQUAL
56233: IFTRUE 56249
56235: LD_INT 24
56237: DOUBLE
56238: EQUAL
56239: IFTRUE 56249
56241: LD_INT 25
56243: DOUBLE
56244: EQUAL
56245: IFTRUE 56249
56247: GO 56305
56249: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
56250: LD_ADDR_VAR 0 9
56254: PUSH
56255: LD_VAR 0 35
56259: PUSH
56260: LD_VAR 0 36
56264: PUSH
56265: LD_VAR 0 37
56269: PUSH
56270: LD_VAR 0 38
56274: PUSH
56275: LD_VAR 0 39
56279: PUSH
56280: LD_VAR 0 40
56284: PUSH
56285: EMPTY
56286: LIST
56287: LIST
56288: LIST
56289: LIST
56290: LIST
56291: LIST
56292: PUSH
56293: LD_VAR 0 4
56297: PUSH
56298: LD_INT 1
56300: PLUS
56301: ARRAY
56302: ST_TO_ADDR
56303: GO 56670
56305: LD_INT 6
56307: DOUBLE
56308: EQUAL
56309: IFTRUE 56361
56311: LD_INT 7
56313: DOUBLE
56314: EQUAL
56315: IFTRUE 56361
56317: LD_INT 8
56319: DOUBLE
56320: EQUAL
56321: IFTRUE 56361
56323: LD_INT 13
56325: DOUBLE
56326: EQUAL
56327: IFTRUE 56361
56329: LD_INT 12
56331: DOUBLE
56332: EQUAL
56333: IFTRUE 56361
56335: LD_INT 15
56337: DOUBLE
56338: EQUAL
56339: IFTRUE 56361
56341: LD_INT 11
56343: DOUBLE
56344: EQUAL
56345: IFTRUE 56361
56347: LD_INT 14
56349: DOUBLE
56350: EQUAL
56351: IFTRUE 56361
56353: LD_INT 10
56355: DOUBLE
56356: EQUAL
56357: IFTRUE 56361
56359: GO 56417
56361: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
56362: LD_ADDR_VAR 0 9
56366: PUSH
56367: LD_VAR 0 41
56371: PUSH
56372: LD_VAR 0 42
56376: PUSH
56377: LD_VAR 0 43
56381: PUSH
56382: LD_VAR 0 44
56386: PUSH
56387: LD_VAR 0 45
56391: PUSH
56392: LD_VAR 0 46
56396: PUSH
56397: EMPTY
56398: LIST
56399: LIST
56400: LIST
56401: LIST
56402: LIST
56403: LIST
56404: PUSH
56405: LD_VAR 0 4
56409: PUSH
56410: LD_INT 1
56412: PLUS
56413: ARRAY
56414: ST_TO_ADDR
56415: GO 56670
56417: LD_INT 36
56419: DOUBLE
56420: EQUAL
56421: IFTRUE 56425
56423: GO 56481
56425: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
56426: LD_ADDR_VAR 0 9
56430: PUSH
56431: LD_VAR 0 47
56435: PUSH
56436: LD_VAR 0 48
56440: PUSH
56441: LD_VAR 0 49
56445: PUSH
56446: LD_VAR 0 50
56450: PUSH
56451: LD_VAR 0 51
56455: PUSH
56456: LD_VAR 0 52
56460: PUSH
56461: EMPTY
56462: LIST
56463: LIST
56464: LIST
56465: LIST
56466: LIST
56467: LIST
56468: PUSH
56469: LD_VAR 0 4
56473: PUSH
56474: LD_INT 1
56476: PLUS
56477: ARRAY
56478: ST_TO_ADDR
56479: GO 56670
56481: LD_INT 4
56483: DOUBLE
56484: EQUAL
56485: IFTRUE 56507
56487: LD_INT 5
56489: DOUBLE
56490: EQUAL
56491: IFTRUE 56507
56493: LD_INT 34
56495: DOUBLE
56496: EQUAL
56497: IFTRUE 56507
56499: LD_INT 37
56501: DOUBLE
56502: EQUAL
56503: IFTRUE 56507
56505: GO 56563
56507: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
56508: LD_ADDR_VAR 0 9
56512: PUSH
56513: LD_VAR 0 53
56517: PUSH
56518: LD_VAR 0 54
56522: PUSH
56523: LD_VAR 0 55
56527: PUSH
56528: LD_VAR 0 56
56532: PUSH
56533: LD_VAR 0 57
56537: PUSH
56538: LD_VAR 0 58
56542: PUSH
56543: EMPTY
56544: LIST
56545: LIST
56546: LIST
56547: LIST
56548: LIST
56549: LIST
56550: PUSH
56551: LD_VAR 0 4
56555: PUSH
56556: LD_INT 1
56558: PLUS
56559: ARRAY
56560: ST_TO_ADDR
56561: GO 56670
56563: LD_INT 31
56565: DOUBLE
56566: EQUAL
56567: IFTRUE 56613
56569: LD_INT 32
56571: DOUBLE
56572: EQUAL
56573: IFTRUE 56613
56575: LD_INT 33
56577: DOUBLE
56578: EQUAL
56579: IFTRUE 56613
56581: LD_INT 27
56583: DOUBLE
56584: EQUAL
56585: IFTRUE 56613
56587: LD_INT 26
56589: DOUBLE
56590: EQUAL
56591: IFTRUE 56613
56593: LD_INT 28
56595: DOUBLE
56596: EQUAL
56597: IFTRUE 56613
56599: LD_INT 29
56601: DOUBLE
56602: EQUAL
56603: IFTRUE 56613
56605: LD_INT 30
56607: DOUBLE
56608: EQUAL
56609: IFTRUE 56613
56611: GO 56669
56613: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
56614: LD_ADDR_VAR 0 9
56618: PUSH
56619: LD_VAR 0 59
56623: PUSH
56624: LD_VAR 0 60
56628: PUSH
56629: LD_VAR 0 61
56633: PUSH
56634: LD_VAR 0 62
56638: PUSH
56639: LD_VAR 0 63
56643: PUSH
56644: LD_VAR 0 64
56648: PUSH
56649: EMPTY
56650: LIST
56651: LIST
56652: LIST
56653: LIST
56654: LIST
56655: LIST
56656: PUSH
56657: LD_VAR 0 4
56661: PUSH
56662: LD_INT 1
56664: PLUS
56665: ARRAY
56666: ST_TO_ADDR
56667: GO 56670
56669: POP
// temp_list2 = [ ] ;
56670: LD_ADDR_VAR 0 10
56674: PUSH
56675: EMPTY
56676: ST_TO_ADDR
// for i in temp_list do
56677: LD_ADDR_VAR 0 8
56681: PUSH
56682: LD_VAR 0 9
56686: PUSH
56687: FOR_IN
56688: IFFALSE 56740
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
56690: LD_ADDR_VAR 0 10
56694: PUSH
56695: LD_VAR 0 10
56699: PUSH
56700: LD_VAR 0 8
56704: PUSH
56705: LD_INT 1
56707: ARRAY
56708: PUSH
56709: LD_VAR 0 2
56713: PLUS
56714: PUSH
56715: LD_VAR 0 8
56719: PUSH
56720: LD_INT 2
56722: ARRAY
56723: PUSH
56724: LD_VAR 0 3
56728: PLUS
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: PUSH
56734: EMPTY
56735: LIST
56736: ADD
56737: ST_TO_ADDR
56738: GO 56687
56740: POP
56741: POP
// result = temp_list2 ;
56742: LD_ADDR_VAR 0 7
56746: PUSH
56747: LD_VAR 0 10
56751: ST_TO_ADDR
// end ;
56752: LD_VAR 0 7
56756: RET
// export function EnemyInRange ( unit , dist ) ; begin
56757: LD_INT 0
56759: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
56760: LD_ADDR_VAR 0 3
56764: PUSH
56765: LD_VAR 0 1
56769: PPUSH
56770: CALL_OW 255
56774: PPUSH
56775: LD_VAR 0 1
56779: PPUSH
56780: CALL_OW 250
56784: PPUSH
56785: LD_VAR 0 1
56789: PPUSH
56790: CALL_OW 251
56794: PPUSH
56795: LD_VAR 0 2
56799: PPUSH
56800: CALL 30130 0 4
56804: PUSH
56805: LD_INT 4
56807: ARRAY
56808: ST_TO_ADDR
// end ;
56809: LD_VAR 0 3
56813: RET
// export function PlayerSeeMe ( unit ) ; begin
56814: LD_INT 0
56816: PPUSH
// result := See ( your_side , unit ) ;
56817: LD_ADDR_VAR 0 2
56821: PUSH
56822: LD_OWVAR 2
56826: PPUSH
56827: LD_VAR 0 1
56831: PPUSH
56832: CALL_OW 292
56836: ST_TO_ADDR
// end ;
56837: LD_VAR 0 2
56841: RET
// export function ReverseDir ( unit ) ; begin
56842: LD_INT 0
56844: PPUSH
// if not unit then
56845: LD_VAR 0 1
56849: NOT
56850: IFFALSE 56854
// exit ;
56852: GO 56877
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
56854: LD_ADDR_VAR 0 2
56858: PUSH
56859: LD_VAR 0 1
56863: PPUSH
56864: CALL_OW 254
56868: PUSH
56869: LD_INT 3
56871: PLUS
56872: PUSH
56873: LD_INT 6
56875: MOD
56876: ST_TO_ADDR
// end ;
56877: LD_VAR 0 2
56881: RET
// export function ReverseArray ( array ) ; var i ; begin
56882: LD_INT 0
56884: PPUSH
56885: PPUSH
// if not array then
56886: LD_VAR 0 1
56890: NOT
56891: IFFALSE 56895
// exit ;
56893: GO 56950
// result := [ ] ;
56895: LD_ADDR_VAR 0 2
56899: PUSH
56900: EMPTY
56901: ST_TO_ADDR
// for i := array downto 1 do
56902: LD_ADDR_VAR 0 3
56906: PUSH
56907: DOUBLE
56908: LD_VAR 0 1
56912: INC
56913: ST_TO_ADDR
56914: LD_INT 1
56916: PUSH
56917: FOR_DOWNTO
56918: IFFALSE 56948
// result := Join ( result , array [ i ] ) ;
56920: LD_ADDR_VAR 0 2
56924: PUSH
56925: LD_VAR 0 2
56929: PPUSH
56930: LD_VAR 0 1
56934: PUSH
56935: LD_VAR 0 3
56939: ARRAY
56940: PPUSH
56941: CALL 61606 0 2
56945: ST_TO_ADDR
56946: GO 56917
56948: POP
56949: POP
// end ;
56950: LD_VAR 0 2
56954: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
56955: LD_INT 0
56957: PPUSH
56958: PPUSH
56959: PPUSH
56960: PPUSH
56961: PPUSH
56962: PPUSH
// if not unit or not hexes then
56963: LD_VAR 0 1
56967: NOT
56968: PUSH
56969: LD_VAR 0 2
56973: NOT
56974: OR
56975: IFFALSE 56979
// exit ;
56977: GO 57102
// dist := 9999 ;
56979: LD_ADDR_VAR 0 5
56983: PUSH
56984: LD_INT 9999
56986: ST_TO_ADDR
// for i = 1 to hexes do
56987: LD_ADDR_VAR 0 4
56991: PUSH
56992: DOUBLE
56993: LD_INT 1
56995: DEC
56996: ST_TO_ADDR
56997: LD_VAR 0 2
57001: PUSH
57002: FOR_TO
57003: IFFALSE 57090
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
57005: LD_ADDR_VAR 0 6
57009: PUSH
57010: LD_VAR 0 1
57014: PPUSH
57015: LD_VAR 0 2
57019: PUSH
57020: LD_VAR 0 4
57024: ARRAY
57025: PUSH
57026: LD_INT 1
57028: ARRAY
57029: PPUSH
57030: LD_VAR 0 2
57034: PUSH
57035: LD_VAR 0 4
57039: ARRAY
57040: PUSH
57041: LD_INT 2
57043: ARRAY
57044: PPUSH
57045: CALL_OW 297
57049: ST_TO_ADDR
// if tdist < dist then
57050: LD_VAR 0 6
57054: PUSH
57055: LD_VAR 0 5
57059: LESS
57060: IFFALSE 57088
// begin hex := hexes [ i ] ;
57062: LD_ADDR_VAR 0 8
57066: PUSH
57067: LD_VAR 0 2
57071: PUSH
57072: LD_VAR 0 4
57076: ARRAY
57077: ST_TO_ADDR
// dist := tdist ;
57078: LD_ADDR_VAR 0 5
57082: PUSH
57083: LD_VAR 0 6
57087: ST_TO_ADDR
// end ; end ;
57088: GO 57002
57090: POP
57091: POP
// result := hex ;
57092: LD_ADDR_VAR 0 3
57096: PUSH
57097: LD_VAR 0 8
57101: ST_TO_ADDR
// end ;
57102: LD_VAR 0 3
57106: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
57107: LD_INT 0
57109: PPUSH
57110: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
57111: LD_VAR 0 1
57115: NOT
57116: PUSH
57117: LD_VAR 0 1
57121: PUSH
57122: LD_INT 21
57124: PUSH
57125: LD_INT 2
57127: PUSH
57128: EMPTY
57129: LIST
57130: LIST
57131: PUSH
57132: LD_INT 23
57134: PUSH
57135: LD_INT 2
57137: PUSH
57138: EMPTY
57139: LIST
57140: LIST
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: PPUSH
57146: CALL_OW 69
57150: IN
57151: NOT
57152: OR
57153: IFFALSE 57157
// exit ;
57155: GO 57204
// for i = 1 to 3 do
57157: LD_ADDR_VAR 0 3
57161: PUSH
57162: DOUBLE
57163: LD_INT 1
57165: DEC
57166: ST_TO_ADDR
57167: LD_INT 3
57169: PUSH
57170: FOR_TO
57171: IFFALSE 57202
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
57173: LD_VAR 0 1
57177: PPUSH
57178: CALL_OW 250
57182: PPUSH
57183: LD_VAR 0 1
57187: PPUSH
57188: CALL_OW 251
57192: PPUSH
57193: LD_INT 1
57195: PPUSH
57196: CALL_OW 453
57200: GO 57170
57202: POP
57203: POP
// end ;
57204: LD_VAR 0 2
57208: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
57209: LD_INT 0
57211: PPUSH
57212: PPUSH
57213: PPUSH
57214: PPUSH
57215: PPUSH
57216: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
57217: LD_VAR 0 1
57221: NOT
57222: PUSH
57223: LD_VAR 0 2
57227: NOT
57228: OR
57229: PUSH
57230: LD_VAR 0 1
57234: PPUSH
57235: CALL_OW 314
57239: OR
57240: IFFALSE 57244
// exit ;
57242: GO 57711
// if GetLives ( i ) < 250 then
57244: LD_VAR 0 4
57248: PPUSH
57249: CALL_OW 256
57253: PUSH
57254: LD_INT 250
57256: LESS
57257: IFFALSE 57270
// begin ComAutodestruct ( i ) ;
57259: LD_VAR 0 4
57263: PPUSH
57264: CALL 57107 0 1
// exit ;
57268: GO 57711
// end ; x := GetX ( enemy_unit ) ;
57270: LD_ADDR_VAR 0 7
57274: PUSH
57275: LD_VAR 0 2
57279: PPUSH
57280: CALL_OW 250
57284: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
57285: LD_ADDR_VAR 0 8
57289: PUSH
57290: LD_VAR 0 2
57294: PPUSH
57295: CALL_OW 251
57299: ST_TO_ADDR
// if not x or not y then
57300: LD_VAR 0 7
57304: NOT
57305: PUSH
57306: LD_VAR 0 8
57310: NOT
57311: OR
57312: IFFALSE 57316
// exit ;
57314: GO 57711
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
57316: LD_ADDR_VAR 0 6
57320: PUSH
57321: LD_VAR 0 7
57325: PPUSH
57326: LD_INT 0
57328: PPUSH
57329: LD_INT 4
57331: PPUSH
57332: CALL_OW 272
57336: PUSH
57337: LD_VAR 0 8
57341: PPUSH
57342: LD_INT 0
57344: PPUSH
57345: LD_INT 4
57347: PPUSH
57348: CALL_OW 273
57352: PUSH
57353: EMPTY
57354: LIST
57355: LIST
57356: PUSH
57357: LD_VAR 0 7
57361: PPUSH
57362: LD_INT 1
57364: PPUSH
57365: LD_INT 4
57367: PPUSH
57368: CALL_OW 272
57372: PUSH
57373: LD_VAR 0 8
57377: PPUSH
57378: LD_INT 1
57380: PPUSH
57381: LD_INT 4
57383: PPUSH
57384: CALL_OW 273
57388: PUSH
57389: EMPTY
57390: LIST
57391: LIST
57392: PUSH
57393: LD_VAR 0 7
57397: PPUSH
57398: LD_INT 2
57400: PPUSH
57401: LD_INT 4
57403: PPUSH
57404: CALL_OW 272
57408: PUSH
57409: LD_VAR 0 8
57413: PPUSH
57414: LD_INT 2
57416: PPUSH
57417: LD_INT 4
57419: PPUSH
57420: CALL_OW 273
57424: PUSH
57425: EMPTY
57426: LIST
57427: LIST
57428: PUSH
57429: LD_VAR 0 7
57433: PPUSH
57434: LD_INT 3
57436: PPUSH
57437: LD_INT 4
57439: PPUSH
57440: CALL_OW 272
57444: PUSH
57445: LD_VAR 0 8
57449: PPUSH
57450: LD_INT 3
57452: PPUSH
57453: LD_INT 4
57455: PPUSH
57456: CALL_OW 273
57460: PUSH
57461: EMPTY
57462: LIST
57463: LIST
57464: PUSH
57465: LD_VAR 0 7
57469: PPUSH
57470: LD_INT 4
57472: PPUSH
57473: LD_INT 4
57475: PPUSH
57476: CALL_OW 272
57480: PUSH
57481: LD_VAR 0 8
57485: PPUSH
57486: LD_INT 4
57488: PPUSH
57489: LD_INT 4
57491: PPUSH
57492: CALL_OW 273
57496: PUSH
57497: EMPTY
57498: LIST
57499: LIST
57500: PUSH
57501: LD_VAR 0 7
57505: PPUSH
57506: LD_INT 5
57508: PPUSH
57509: LD_INT 4
57511: PPUSH
57512: CALL_OW 272
57516: PUSH
57517: LD_VAR 0 8
57521: PPUSH
57522: LD_INT 5
57524: PPUSH
57525: LD_INT 4
57527: PPUSH
57528: CALL_OW 273
57532: PUSH
57533: EMPTY
57534: LIST
57535: LIST
57536: PUSH
57537: EMPTY
57538: LIST
57539: LIST
57540: LIST
57541: LIST
57542: LIST
57543: LIST
57544: ST_TO_ADDR
// for i = tmp downto 1 do
57545: LD_ADDR_VAR 0 4
57549: PUSH
57550: DOUBLE
57551: LD_VAR 0 6
57555: INC
57556: ST_TO_ADDR
57557: LD_INT 1
57559: PUSH
57560: FOR_DOWNTO
57561: IFFALSE 57662
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
57563: LD_VAR 0 6
57567: PUSH
57568: LD_VAR 0 4
57572: ARRAY
57573: PUSH
57574: LD_INT 1
57576: ARRAY
57577: PPUSH
57578: LD_VAR 0 6
57582: PUSH
57583: LD_VAR 0 4
57587: ARRAY
57588: PUSH
57589: LD_INT 2
57591: ARRAY
57592: PPUSH
57593: CALL_OW 488
57597: NOT
57598: PUSH
57599: LD_VAR 0 6
57603: PUSH
57604: LD_VAR 0 4
57608: ARRAY
57609: PUSH
57610: LD_INT 1
57612: ARRAY
57613: PPUSH
57614: LD_VAR 0 6
57618: PUSH
57619: LD_VAR 0 4
57623: ARRAY
57624: PUSH
57625: LD_INT 2
57627: ARRAY
57628: PPUSH
57629: CALL_OW 428
57633: PUSH
57634: LD_INT 0
57636: NONEQUAL
57637: OR
57638: IFFALSE 57660
// tmp := Delete ( tmp , i ) ;
57640: LD_ADDR_VAR 0 6
57644: PUSH
57645: LD_VAR 0 6
57649: PPUSH
57650: LD_VAR 0 4
57654: PPUSH
57655: CALL_OW 3
57659: ST_TO_ADDR
57660: GO 57560
57662: POP
57663: POP
// j := GetClosestHex ( unit , tmp ) ;
57664: LD_ADDR_VAR 0 5
57668: PUSH
57669: LD_VAR 0 1
57673: PPUSH
57674: LD_VAR 0 6
57678: PPUSH
57679: CALL 56955 0 2
57683: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
57684: LD_VAR 0 1
57688: PPUSH
57689: LD_VAR 0 5
57693: PUSH
57694: LD_INT 1
57696: ARRAY
57697: PPUSH
57698: LD_VAR 0 5
57702: PUSH
57703: LD_INT 2
57705: ARRAY
57706: PPUSH
57707: CALL_OW 111
// end ;
57711: LD_VAR 0 3
57715: RET
// export function PrepareApemanSoldier ( ) ; begin
57716: LD_INT 0
57718: PPUSH
// uc_nation := 0 ;
57719: LD_ADDR_OWVAR 21
57723: PUSH
57724: LD_INT 0
57726: ST_TO_ADDR
// hc_sex := sex_male ;
57727: LD_ADDR_OWVAR 27
57731: PUSH
57732: LD_INT 1
57734: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
57735: LD_ADDR_OWVAR 28
57739: PUSH
57740: LD_INT 15
57742: ST_TO_ADDR
// hc_gallery :=  ;
57743: LD_ADDR_OWVAR 33
57747: PUSH
57748: LD_STRING 
57750: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57751: LD_ADDR_OWVAR 31
57755: PUSH
57756: LD_INT 0
57758: PPUSH
57759: LD_INT 3
57761: PPUSH
57762: CALL_OW 12
57766: PUSH
57767: LD_INT 0
57769: PPUSH
57770: LD_INT 3
57772: PPUSH
57773: CALL_OW 12
57777: PUSH
57778: LD_INT 0
57780: PUSH
57781: LD_INT 0
57783: PUSH
57784: EMPTY
57785: LIST
57786: LIST
57787: LIST
57788: LIST
57789: ST_TO_ADDR
// end ;
57790: LD_VAR 0 1
57794: RET
// export function PrepareApemanEngineer ( ) ; begin
57795: LD_INT 0
57797: PPUSH
// uc_nation := 0 ;
57798: LD_ADDR_OWVAR 21
57802: PUSH
57803: LD_INT 0
57805: ST_TO_ADDR
// hc_sex := sex_male ;
57806: LD_ADDR_OWVAR 27
57810: PUSH
57811: LD_INT 1
57813: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
57814: LD_ADDR_OWVAR 28
57818: PUSH
57819: LD_INT 16
57821: ST_TO_ADDR
// hc_gallery :=  ;
57822: LD_ADDR_OWVAR 33
57826: PUSH
57827: LD_STRING 
57829: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57830: LD_ADDR_OWVAR 31
57834: PUSH
57835: LD_INT 0
57837: PPUSH
57838: LD_INT 3
57840: PPUSH
57841: CALL_OW 12
57845: PUSH
57846: LD_INT 0
57848: PPUSH
57849: LD_INT 3
57851: PPUSH
57852: CALL_OW 12
57856: PUSH
57857: LD_INT 0
57859: PUSH
57860: LD_INT 0
57862: PUSH
57863: EMPTY
57864: LIST
57865: LIST
57866: LIST
57867: LIST
57868: ST_TO_ADDR
// end ;
57869: LD_VAR 0 1
57873: RET
// export function PrepareApeman ( agressivity ) ; begin
57874: LD_INT 0
57876: PPUSH
// uc_side := 0 ;
57877: LD_ADDR_OWVAR 20
57881: PUSH
57882: LD_INT 0
57884: ST_TO_ADDR
// uc_nation := 0 ;
57885: LD_ADDR_OWVAR 21
57889: PUSH
57890: LD_INT 0
57892: ST_TO_ADDR
// hc_sex := sex_male ;
57893: LD_ADDR_OWVAR 27
57897: PUSH
57898: LD_INT 1
57900: ST_TO_ADDR
// hc_class := class_apeman ;
57901: LD_ADDR_OWVAR 28
57905: PUSH
57906: LD_INT 12
57908: ST_TO_ADDR
// hc_gallery :=  ;
57909: LD_ADDR_OWVAR 33
57913: PUSH
57914: LD_STRING 
57916: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
57917: LD_ADDR_OWVAR 35
57921: PUSH
57922: LD_VAR 0 1
57926: NEG
57927: PPUSH
57928: LD_VAR 0 1
57932: PPUSH
57933: CALL_OW 12
57937: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57938: LD_ADDR_OWVAR 31
57942: PUSH
57943: LD_INT 0
57945: PPUSH
57946: LD_INT 3
57948: PPUSH
57949: CALL_OW 12
57953: PUSH
57954: LD_INT 0
57956: PPUSH
57957: LD_INT 3
57959: PPUSH
57960: CALL_OW 12
57964: PUSH
57965: LD_INT 0
57967: PUSH
57968: LD_INT 0
57970: PUSH
57971: EMPTY
57972: LIST
57973: LIST
57974: LIST
57975: LIST
57976: ST_TO_ADDR
// end ;
57977: LD_VAR 0 2
57981: RET
// export function PrepareTiger ( agressivity ) ; begin
57982: LD_INT 0
57984: PPUSH
// uc_side := 0 ;
57985: LD_ADDR_OWVAR 20
57989: PUSH
57990: LD_INT 0
57992: ST_TO_ADDR
// uc_nation := 0 ;
57993: LD_ADDR_OWVAR 21
57997: PUSH
57998: LD_INT 0
58000: ST_TO_ADDR
// hc_class := class_tiger ;
58001: LD_ADDR_OWVAR 28
58005: PUSH
58006: LD_INT 14
58008: ST_TO_ADDR
// hc_gallery :=  ;
58009: LD_ADDR_OWVAR 33
58013: PUSH
58014: LD_STRING 
58016: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
58017: LD_ADDR_OWVAR 35
58021: PUSH
58022: LD_VAR 0 1
58026: NEG
58027: PPUSH
58028: LD_VAR 0 1
58032: PPUSH
58033: CALL_OW 12
58037: ST_TO_ADDR
// end ;
58038: LD_VAR 0 2
58042: RET
// export function PrepareEnchidna ( ) ; begin
58043: LD_INT 0
58045: PPUSH
// uc_side := 0 ;
58046: LD_ADDR_OWVAR 20
58050: PUSH
58051: LD_INT 0
58053: ST_TO_ADDR
// uc_nation := 0 ;
58054: LD_ADDR_OWVAR 21
58058: PUSH
58059: LD_INT 0
58061: ST_TO_ADDR
// hc_class := class_baggie ;
58062: LD_ADDR_OWVAR 28
58066: PUSH
58067: LD_INT 13
58069: ST_TO_ADDR
// hc_gallery :=  ;
58070: LD_ADDR_OWVAR 33
58074: PUSH
58075: LD_STRING 
58077: ST_TO_ADDR
// end ;
58078: LD_VAR 0 1
58082: RET
// export function PrepareFrog ( ) ; begin
58083: LD_INT 0
58085: PPUSH
// uc_side := 0 ;
58086: LD_ADDR_OWVAR 20
58090: PUSH
58091: LD_INT 0
58093: ST_TO_ADDR
// uc_nation := 0 ;
58094: LD_ADDR_OWVAR 21
58098: PUSH
58099: LD_INT 0
58101: ST_TO_ADDR
// hc_class := class_frog ;
58102: LD_ADDR_OWVAR 28
58106: PUSH
58107: LD_INT 19
58109: ST_TO_ADDR
// hc_gallery :=  ;
58110: LD_ADDR_OWVAR 33
58114: PUSH
58115: LD_STRING 
58117: ST_TO_ADDR
// end ;
58118: LD_VAR 0 1
58122: RET
// export function PrepareFish ( ) ; begin
58123: LD_INT 0
58125: PPUSH
// uc_side := 0 ;
58126: LD_ADDR_OWVAR 20
58130: PUSH
58131: LD_INT 0
58133: ST_TO_ADDR
// uc_nation := 0 ;
58134: LD_ADDR_OWVAR 21
58138: PUSH
58139: LD_INT 0
58141: ST_TO_ADDR
// hc_class := class_fish ;
58142: LD_ADDR_OWVAR 28
58146: PUSH
58147: LD_INT 20
58149: ST_TO_ADDR
// hc_gallery :=  ;
58150: LD_ADDR_OWVAR 33
58154: PUSH
58155: LD_STRING 
58157: ST_TO_ADDR
// end ;
58158: LD_VAR 0 1
58162: RET
// export function PrepareBird ( ) ; begin
58163: LD_INT 0
58165: PPUSH
// uc_side := 0 ;
58166: LD_ADDR_OWVAR 20
58170: PUSH
58171: LD_INT 0
58173: ST_TO_ADDR
// uc_nation := 0 ;
58174: LD_ADDR_OWVAR 21
58178: PUSH
58179: LD_INT 0
58181: ST_TO_ADDR
// hc_class := class_phororhacos ;
58182: LD_ADDR_OWVAR 28
58186: PUSH
58187: LD_INT 18
58189: ST_TO_ADDR
// hc_gallery :=  ;
58190: LD_ADDR_OWVAR 33
58194: PUSH
58195: LD_STRING 
58197: ST_TO_ADDR
// end ;
58198: LD_VAR 0 1
58202: RET
// export function PrepareHorse ( ) ; begin
58203: LD_INT 0
58205: PPUSH
// uc_side := 0 ;
58206: LD_ADDR_OWVAR 20
58210: PUSH
58211: LD_INT 0
58213: ST_TO_ADDR
// uc_nation := 0 ;
58214: LD_ADDR_OWVAR 21
58218: PUSH
58219: LD_INT 0
58221: ST_TO_ADDR
// hc_class := class_horse ;
58222: LD_ADDR_OWVAR 28
58226: PUSH
58227: LD_INT 21
58229: ST_TO_ADDR
// hc_gallery :=  ;
58230: LD_ADDR_OWVAR 33
58234: PUSH
58235: LD_STRING 
58237: ST_TO_ADDR
// end ;
58238: LD_VAR 0 1
58242: RET
// export function PrepareMastodont ( ) ; begin
58243: LD_INT 0
58245: PPUSH
// uc_side := 0 ;
58246: LD_ADDR_OWVAR 20
58250: PUSH
58251: LD_INT 0
58253: ST_TO_ADDR
// uc_nation := 0 ;
58254: LD_ADDR_OWVAR 21
58258: PUSH
58259: LD_INT 0
58261: ST_TO_ADDR
// vc_chassis := class_mastodont ;
58262: LD_ADDR_OWVAR 37
58266: PUSH
58267: LD_INT 31
58269: ST_TO_ADDR
// vc_control := control_rider ;
58270: LD_ADDR_OWVAR 38
58274: PUSH
58275: LD_INT 4
58277: ST_TO_ADDR
// end ;
58278: LD_VAR 0 1
58282: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
58283: LD_INT 0
58285: PPUSH
58286: PPUSH
58287: PPUSH
// uc_side = 0 ;
58288: LD_ADDR_OWVAR 20
58292: PUSH
58293: LD_INT 0
58295: ST_TO_ADDR
// uc_nation = 0 ;
58296: LD_ADDR_OWVAR 21
58300: PUSH
58301: LD_INT 0
58303: ST_TO_ADDR
// InitHc_All ( ) ;
58304: CALL_OW 584
// InitVc ;
58308: CALL_OW 20
// if mastodonts then
58312: LD_VAR 0 6
58316: IFFALSE 58383
// for i = 1 to mastodonts do
58318: LD_ADDR_VAR 0 11
58322: PUSH
58323: DOUBLE
58324: LD_INT 1
58326: DEC
58327: ST_TO_ADDR
58328: LD_VAR 0 6
58332: PUSH
58333: FOR_TO
58334: IFFALSE 58381
// begin vc_chassis := 31 ;
58336: LD_ADDR_OWVAR 37
58340: PUSH
58341: LD_INT 31
58343: ST_TO_ADDR
// vc_control := control_rider ;
58344: LD_ADDR_OWVAR 38
58348: PUSH
58349: LD_INT 4
58351: ST_TO_ADDR
// animal := CreateVehicle ;
58352: LD_ADDR_VAR 0 12
58356: PUSH
58357: CALL_OW 45
58361: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58362: LD_VAR 0 12
58366: PPUSH
58367: LD_VAR 0 8
58371: PPUSH
58372: LD_INT 0
58374: PPUSH
58375: CALL 60511 0 3
// end ;
58379: GO 58333
58381: POP
58382: POP
// if horses then
58383: LD_VAR 0 5
58387: IFFALSE 58454
// for i = 1 to horses do
58389: LD_ADDR_VAR 0 11
58393: PUSH
58394: DOUBLE
58395: LD_INT 1
58397: DEC
58398: ST_TO_ADDR
58399: LD_VAR 0 5
58403: PUSH
58404: FOR_TO
58405: IFFALSE 58452
// begin hc_class := 21 ;
58407: LD_ADDR_OWVAR 28
58411: PUSH
58412: LD_INT 21
58414: ST_TO_ADDR
// hc_gallery :=  ;
58415: LD_ADDR_OWVAR 33
58419: PUSH
58420: LD_STRING 
58422: ST_TO_ADDR
// animal := CreateHuman ;
58423: LD_ADDR_VAR 0 12
58427: PUSH
58428: CALL_OW 44
58432: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58433: LD_VAR 0 12
58437: PPUSH
58438: LD_VAR 0 8
58442: PPUSH
58443: LD_INT 0
58445: PPUSH
58446: CALL 60511 0 3
// end ;
58450: GO 58404
58452: POP
58453: POP
// if birds then
58454: LD_VAR 0 1
58458: IFFALSE 58525
// for i = 1 to birds do
58460: LD_ADDR_VAR 0 11
58464: PUSH
58465: DOUBLE
58466: LD_INT 1
58468: DEC
58469: ST_TO_ADDR
58470: LD_VAR 0 1
58474: PUSH
58475: FOR_TO
58476: IFFALSE 58523
// begin hc_class := 18 ;
58478: LD_ADDR_OWVAR 28
58482: PUSH
58483: LD_INT 18
58485: ST_TO_ADDR
// hc_gallery =  ;
58486: LD_ADDR_OWVAR 33
58490: PUSH
58491: LD_STRING 
58493: ST_TO_ADDR
// animal := CreateHuman ;
58494: LD_ADDR_VAR 0 12
58498: PUSH
58499: CALL_OW 44
58503: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58504: LD_VAR 0 12
58508: PPUSH
58509: LD_VAR 0 8
58513: PPUSH
58514: LD_INT 0
58516: PPUSH
58517: CALL 60511 0 3
// end ;
58521: GO 58475
58523: POP
58524: POP
// if tigers then
58525: LD_VAR 0 2
58529: IFFALSE 58613
// for i = 1 to tigers do
58531: LD_ADDR_VAR 0 11
58535: PUSH
58536: DOUBLE
58537: LD_INT 1
58539: DEC
58540: ST_TO_ADDR
58541: LD_VAR 0 2
58545: PUSH
58546: FOR_TO
58547: IFFALSE 58611
// begin hc_class = class_tiger ;
58549: LD_ADDR_OWVAR 28
58553: PUSH
58554: LD_INT 14
58556: ST_TO_ADDR
// hc_gallery =  ;
58557: LD_ADDR_OWVAR 33
58561: PUSH
58562: LD_STRING 
58564: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
58565: LD_ADDR_OWVAR 35
58569: PUSH
58570: LD_INT 7
58572: NEG
58573: PPUSH
58574: LD_INT 7
58576: PPUSH
58577: CALL_OW 12
58581: ST_TO_ADDR
// animal := CreateHuman ;
58582: LD_ADDR_VAR 0 12
58586: PUSH
58587: CALL_OW 44
58591: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58592: LD_VAR 0 12
58596: PPUSH
58597: LD_VAR 0 8
58601: PPUSH
58602: LD_INT 0
58604: PPUSH
58605: CALL 60511 0 3
// end ;
58609: GO 58546
58611: POP
58612: POP
// if apemans then
58613: LD_VAR 0 3
58617: IFFALSE 58740
// for i = 1 to apemans do
58619: LD_ADDR_VAR 0 11
58623: PUSH
58624: DOUBLE
58625: LD_INT 1
58627: DEC
58628: ST_TO_ADDR
58629: LD_VAR 0 3
58633: PUSH
58634: FOR_TO
58635: IFFALSE 58738
// begin hc_class = class_apeman ;
58637: LD_ADDR_OWVAR 28
58641: PUSH
58642: LD_INT 12
58644: ST_TO_ADDR
// hc_gallery =  ;
58645: LD_ADDR_OWVAR 33
58649: PUSH
58650: LD_STRING 
58652: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
58653: LD_ADDR_OWVAR 35
58657: PUSH
58658: LD_INT 2
58660: NEG
58661: PPUSH
58662: LD_INT 2
58664: PPUSH
58665: CALL_OW 12
58669: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58670: LD_ADDR_OWVAR 31
58674: PUSH
58675: LD_INT 1
58677: PPUSH
58678: LD_INT 3
58680: PPUSH
58681: CALL_OW 12
58685: PUSH
58686: LD_INT 1
58688: PPUSH
58689: LD_INT 3
58691: PPUSH
58692: CALL_OW 12
58696: PUSH
58697: LD_INT 0
58699: PUSH
58700: LD_INT 0
58702: PUSH
58703: EMPTY
58704: LIST
58705: LIST
58706: LIST
58707: LIST
58708: ST_TO_ADDR
// animal := CreateHuman ;
58709: LD_ADDR_VAR 0 12
58713: PUSH
58714: CALL_OW 44
58718: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58719: LD_VAR 0 12
58723: PPUSH
58724: LD_VAR 0 8
58728: PPUSH
58729: LD_INT 0
58731: PPUSH
58732: CALL 60511 0 3
// end ;
58736: GO 58634
58738: POP
58739: POP
// if enchidnas then
58740: LD_VAR 0 4
58744: IFFALSE 58811
// for i = 1 to enchidnas do
58746: LD_ADDR_VAR 0 11
58750: PUSH
58751: DOUBLE
58752: LD_INT 1
58754: DEC
58755: ST_TO_ADDR
58756: LD_VAR 0 4
58760: PUSH
58761: FOR_TO
58762: IFFALSE 58809
// begin hc_class = 13 ;
58764: LD_ADDR_OWVAR 28
58768: PUSH
58769: LD_INT 13
58771: ST_TO_ADDR
// hc_gallery =  ;
58772: LD_ADDR_OWVAR 33
58776: PUSH
58777: LD_STRING 
58779: ST_TO_ADDR
// animal := CreateHuman ;
58780: LD_ADDR_VAR 0 12
58784: PUSH
58785: CALL_OW 44
58789: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58790: LD_VAR 0 12
58794: PPUSH
58795: LD_VAR 0 8
58799: PPUSH
58800: LD_INT 0
58802: PPUSH
58803: CALL 60511 0 3
// end ;
58807: GO 58761
58809: POP
58810: POP
// if fishes then
58811: LD_VAR 0 7
58815: IFFALSE 58882
// for i = 1 to fishes do
58817: LD_ADDR_VAR 0 11
58821: PUSH
58822: DOUBLE
58823: LD_INT 1
58825: DEC
58826: ST_TO_ADDR
58827: LD_VAR 0 7
58831: PUSH
58832: FOR_TO
58833: IFFALSE 58880
// begin hc_class = 20 ;
58835: LD_ADDR_OWVAR 28
58839: PUSH
58840: LD_INT 20
58842: ST_TO_ADDR
// hc_gallery =  ;
58843: LD_ADDR_OWVAR 33
58847: PUSH
58848: LD_STRING 
58850: ST_TO_ADDR
// animal := CreateHuman ;
58851: LD_ADDR_VAR 0 12
58855: PUSH
58856: CALL_OW 44
58860: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58861: LD_VAR 0 12
58865: PPUSH
58866: LD_VAR 0 9
58870: PPUSH
58871: LD_INT 0
58873: PPUSH
58874: CALL 60511 0 3
// end ;
58878: GO 58832
58880: POP
58881: POP
// end ;
58882: LD_VAR 0 10
58886: RET
// export function WantHeal ( sci , unit ) ; begin
58887: LD_INT 0
58889: PPUSH
// if GetTaskList ( sci ) > 0 then
58890: LD_VAR 0 1
58894: PPUSH
58895: CALL_OW 437
58899: PUSH
58900: LD_INT 0
58902: GREATER
58903: IFFALSE 58973
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
58905: LD_VAR 0 1
58909: PPUSH
58910: CALL_OW 437
58914: PUSH
58915: LD_INT 1
58917: ARRAY
58918: PUSH
58919: LD_INT 1
58921: ARRAY
58922: PUSH
58923: LD_STRING l
58925: EQUAL
58926: PUSH
58927: LD_VAR 0 1
58931: PPUSH
58932: CALL_OW 437
58936: PUSH
58937: LD_INT 1
58939: ARRAY
58940: PUSH
58941: LD_INT 4
58943: ARRAY
58944: PUSH
58945: LD_VAR 0 2
58949: EQUAL
58950: AND
58951: IFFALSE 58963
// result := true else
58953: LD_ADDR_VAR 0 3
58957: PUSH
58958: LD_INT 1
58960: ST_TO_ADDR
58961: GO 58971
// result := false ;
58963: LD_ADDR_VAR 0 3
58967: PUSH
58968: LD_INT 0
58970: ST_TO_ADDR
// end else
58971: GO 58981
// result := false ;
58973: LD_ADDR_VAR 0 3
58977: PUSH
58978: LD_INT 0
58980: ST_TO_ADDR
// end ;
58981: LD_VAR 0 3
58985: RET
// export function HealTarget ( sci ) ; begin
58986: LD_INT 0
58988: PPUSH
// if not sci then
58989: LD_VAR 0 1
58993: NOT
58994: IFFALSE 58998
// exit ;
58996: GO 59063
// result := 0 ;
58998: LD_ADDR_VAR 0 2
59002: PUSH
59003: LD_INT 0
59005: ST_TO_ADDR
// if GetTaskList ( sci ) then
59006: LD_VAR 0 1
59010: PPUSH
59011: CALL_OW 437
59015: IFFALSE 59063
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
59017: LD_VAR 0 1
59021: PPUSH
59022: CALL_OW 437
59026: PUSH
59027: LD_INT 1
59029: ARRAY
59030: PUSH
59031: LD_INT 1
59033: ARRAY
59034: PUSH
59035: LD_STRING l
59037: EQUAL
59038: IFFALSE 59063
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
59040: LD_ADDR_VAR 0 2
59044: PUSH
59045: LD_VAR 0 1
59049: PPUSH
59050: CALL_OW 437
59054: PUSH
59055: LD_INT 1
59057: ARRAY
59058: PUSH
59059: LD_INT 4
59061: ARRAY
59062: ST_TO_ADDR
// end ;
59063: LD_VAR 0 2
59067: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
59068: LD_INT 0
59070: PPUSH
59071: PPUSH
59072: PPUSH
59073: PPUSH
// if not base_units then
59074: LD_VAR 0 1
59078: NOT
59079: IFFALSE 59083
// exit ;
59081: GO 59170
// result := false ;
59083: LD_ADDR_VAR 0 2
59087: PUSH
59088: LD_INT 0
59090: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
59091: LD_ADDR_VAR 0 5
59095: PUSH
59096: LD_VAR 0 1
59100: PPUSH
59101: LD_INT 21
59103: PUSH
59104: LD_INT 3
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: PPUSH
59111: CALL_OW 72
59115: ST_TO_ADDR
// if not tmp then
59116: LD_VAR 0 5
59120: NOT
59121: IFFALSE 59125
// exit ;
59123: GO 59170
// for i in tmp do
59125: LD_ADDR_VAR 0 3
59129: PUSH
59130: LD_VAR 0 5
59134: PUSH
59135: FOR_IN
59136: IFFALSE 59168
// begin result := EnemyInRange ( i , 22 ) ;
59138: LD_ADDR_VAR 0 2
59142: PUSH
59143: LD_VAR 0 3
59147: PPUSH
59148: LD_INT 22
59150: PPUSH
59151: CALL 56757 0 2
59155: ST_TO_ADDR
// if result then
59156: LD_VAR 0 2
59160: IFFALSE 59166
// exit ;
59162: POP
59163: POP
59164: GO 59170
// end ;
59166: GO 59135
59168: POP
59169: POP
// end ;
59170: LD_VAR 0 2
59174: RET
// export function FilterByTag ( units , tag ) ; begin
59175: LD_INT 0
59177: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
59178: LD_ADDR_VAR 0 3
59182: PUSH
59183: LD_VAR 0 1
59187: PPUSH
59188: LD_INT 120
59190: PUSH
59191: LD_VAR 0 2
59195: PUSH
59196: EMPTY
59197: LIST
59198: LIST
59199: PPUSH
59200: CALL_OW 72
59204: ST_TO_ADDR
// end ;
59205: LD_VAR 0 3
59209: RET
// export function IsDriver ( un ) ; begin
59210: LD_INT 0
59212: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
59213: LD_ADDR_VAR 0 2
59217: PUSH
59218: LD_VAR 0 1
59222: PUSH
59223: LD_INT 55
59225: PUSH
59226: EMPTY
59227: LIST
59228: PPUSH
59229: CALL_OW 69
59233: IN
59234: ST_TO_ADDR
// end ;
59235: LD_VAR 0 2
59239: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
59240: LD_INT 0
59242: PPUSH
59243: PPUSH
// list := [ ] ;
59244: LD_ADDR_VAR 0 5
59248: PUSH
59249: EMPTY
59250: ST_TO_ADDR
// case d of 0 :
59251: LD_VAR 0 3
59255: PUSH
59256: LD_INT 0
59258: DOUBLE
59259: EQUAL
59260: IFTRUE 59264
59262: GO 59397
59264: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
59265: LD_ADDR_VAR 0 5
59269: PUSH
59270: LD_VAR 0 1
59274: PUSH
59275: LD_INT 4
59277: MINUS
59278: PUSH
59279: LD_VAR 0 2
59283: PUSH
59284: LD_INT 4
59286: MINUS
59287: PUSH
59288: LD_INT 2
59290: PUSH
59291: EMPTY
59292: LIST
59293: LIST
59294: LIST
59295: PUSH
59296: LD_VAR 0 1
59300: PUSH
59301: LD_INT 3
59303: MINUS
59304: PUSH
59305: LD_VAR 0 2
59309: PUSH
59310: LD_INT 1
59312: PUSH
59313: EMPTY
59314: LIST
59315: LIST
59316: LIST
59317: PUSH
59318: LD_VAR 0 1
59322: PUSH
59323: LD_INT 4
59325: PLUS
59326: PUSH
59327: LD_VAR 0 2
59331: PUSH
59332: LD_INT 4
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: LIST
59339: PUSH
59340: LD_VAR 0 1
59344: PUSH
59345: LD_INT 3
59347: PLUS
59348: PUSH
59349: LD_VAR 0 2
59353: PUSH
59354: LD_INT 3
59356: PLUS
59357: PUSH
59358: LD_INT 5
59360: PUSH
59361: EMPTY
59362: LIST
59363: LIST
59364: LIST
59365: PUSH
59366: LD_VAR 0 1
59370: PUSH
59371: LD_VAR 0 2
59375: PUSH
59376: LD_INT 4
59378: PLUS
59379: PUSH
59380: LD_INT 0
59382: PUSH
59383: EMPTY
59384: LIST
59385: LIST
59386: LIST
59387: PUSH
59388: EMPTY
59389: LIST
59390: LIST
59391: LIST
59392: LIST
59393: LIST
59394: ST_TO_ADDR
// end ; 1 :
59395: GO 60095
59397: LD_INT 1
59399: DOUBLE
59400: EQUAL
59401: IFTRUE 59405
59403: GO 59538
59405: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
59406: LD_ADDR_VAR 0 5
59410: PUSH
59411: LD_VAR 0 1
59415: PUSH
59416: LD_VAR 0 2
59420: PUSH
59421: LD_INT 4
59423: MINUS
59424: PUSH
59425: LD_INT 3
59427: PUSH
59428: EMPTY
59429: LIST
59430: LIST
59431: LIST
59432: PUSH
59433: LD_VAR 0 1
59437: PUSH
59438: LD_INT 3
59440: MINUS
59441: PUSH
59442: LD_VAR 0 2
59446: PUSH
59447: LD_INT 3
59449: MINUS
59450: PUSH
59451: LD_INT 2
59453: PUSH
59454: EMPTY
59455: LIST
59456: LIST
59457: LIST
59458: PUSH
59459: LD_VAR 0 1
59463: PUSH
59464: LD_INT 4
59466: MINUS
59467: PUSH
59468: LD_VAR 0 2
59472: PUSH
59473: LD_INT 1
59475: PUSH
59476: EMPTY
59477: LIST
59478: LIST
59479: LIST
59480: PUSH
59481: LD_VAR 0 1
59485: PUSH
59486: LD_VAR 0 2
59490: PUSH
59491: LD_INT 3
59493: PLUS
59494: PUSH
59495: LD_INT 0
59497: PUSH
59498: EMPTY
59499: LIST
59500: LIST
59501: LIST
59502: PUSH
59503: LD_VAR 0 1
59507: PUSH
59508: LD_INT 4
59510: PLUS
59511: PUSH
59512: LD_VAR 0 2
59516: PUSH
59517: LD_INT 4
59519: PLUS
59520: PUSH
59521: LD_INT 5
59523: PUSH
59524: EMPTY
59525: LIST
59526: LIST
59527: LIST
59528: PUSH
59529: EMPTY
59530: LIST
59531: LIST
59532: LIST
59533: LIST
59534: LIST
59535: ST_TO_ADDR
// end ; 2 :
59536: GO 60095
59538: LD_INT 2
59540: DOUBLE
59541: EQUAL
59542: IFTRUE 59546
59544: GO 59675
59546: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
59547: LD_ADDR_VAR 0 5
59551: PUSH
59552: LD_VAR 0 1
59556: PUSH
59557: LD_VAR 0 2
59561: PUSH
59562: LD_INT 3
59564: MINUS
59565: PUSH
59566: LD_INT 3
59568: PUSH
59569: EMPTY
59570: LIST
59571: LIST
59572: LIST
59573: PUSH
59574: LD_VAR 0 1
59578: PUSH
59579: LD_INT 4
59581: PLUS
59582: PUSH
59583: LD_VAR 0 2
59587: PUSH
59588: LD_INT 4
59590: PUSH
59591: EMPTY
59592: LIST
59593: LIST
59594: LIST
59595: PUSH
59596: LD_VAR 0 1
59600: PUSH
59601: LD_VAR 0 2
59605: PUSH
59606: LD_INT 4
59608: PLUS
59609: PUSH
59610: LD_INT 0
59612: PUSH
59613: EMPTY
59614: LIST
59615: LIST
59616: LIST
59617: PUSH
59618: LD_VAR 0 1
59622: PUSH
59623: LD_INT 3
59625: MINUS
59626: PUSH
59627: LD_VAR 0 2
59631: PUSH
59632: LD_INT 1
59634: PUSH
59635: EMPTY
59636: LIST
59637: LIST
59638: LIST
59639: PUSH
59640: LD_VAR 0 1
59644: PUSH
59645: LD_INT 4
59647: MINUS
59648: PUSH
59649: LD_VAR 0 2
59653: PUSH
59654: LD_INT 4
59656: MINUS
59657: PUSH
59658: LD_INT 2
59660: PUSH
59661: EMPTY
59662: LIST
59663: LIST
59664: LIST
59665: PUSH
59666: EMPTY
59667: LIST
59668: LIST
59669: LIST
59670: LIST
59671: LIST
59672: ST_TO_ADDR
// end ; 3 :
59673: GO 60095
59675: LD_INT 3
59677: DOUBLE
59678: EQUAL
59679: IFTRUE 59683
59681: GO 59816
59683: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59684: LD_ADDR_VAR 0 5
59688: PUSH
59689: LD_VAR 0 1
59693: PUSH
59694: LD_INT 3
59696: PLUS
59697: PUSH
59698: LD_VAR 0 2
59702: PUSH
59703: LD_INT 4
59705: PUSH
59706: EMPTY
59707: LIST
59708: LIST
59709: LIST
59710: PUSH
59711: LD_VAR 0 1
59715: PUSH
59716: LD_INT 4
59718: PLUS
59719: PUSH
59720: LD_VAR 0 2
59724: PUSH
59725: LD_INT 4
59727: PLUS
59728: PUSH
59729: LD_INT 5
59731: PUSH
59732: EMPTY
59733: LIST
59734: LIST
59735: LIST
59736: PUSH
59737: LD_VAR 0 1
59741: PUSH
59742: LD_INT 4
59744: MINUS
59745: PUSH
59746: LD_VAR 0 2
59750: PUSH
59751: LD_INT 1
59753: PUSH
59754: EMPTY
59755: LIST
59756: LIST
59757: LIST
59758: PUSH
59759: LD_VAR 0 1
59763: PUSH
59764: LD_VAR 0 2
59768: PUSH
59769: LD_INT 4
59771: MINUS
59772: PUSH
59773: LD_INT 3
59775: PUSH
59776: EMPTY
59777: LIST
59778: LIST
59779: LIST
59780: PUSH
59781: LD_VAR 0 1
59785: PUSH
59786: LD_INT 3
59788: MINUS
59789: PUSH
59790: LD_VAR 0 2
59794: PUSH
59795: LD_INT 3
59797: MINUS
59798: PUSH
59799: LD_INT 2
59801: PUSH
59802: EMPTY
59803: LIST
59804: LIST
59805: LIST
59806: PUSH
59807: EMPTY
59808: LIST
59809: LIST
59810: LIST
59811: LIST
59812: LIST
59813: ST_TO_ADDR
// end ; 4 :
59814: GO 60095
59816: LD_INT 4
59818: DOUBLE
59819: EQUAL
59820: IFTRUE 59824
59822: GO 59957
59824: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59825: LD_ADDR_VAR 0 5
59829: PUSH
59830: LD_VAR 0 1
59834: PUSH
59835: LD_VAR 0 2
59839: PUSH
59840: LD_INT 4
59842: PLUS
59843: PUSH
59844: LD_INT 0
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: LIST
59851: PUSH
59852: LD_VAR 0 1
59856: PUSH
59857: LD_INT 3
59859: PLUS
59860: PUSH
59861: LD_VAR 0 2
59865: PUSH
59866: LD_INT 3
59868: PLUS
59869: PUSH
59870: LD_INT 5
59872: PUSH
59873: EMPTY
59874: LIST
59875: LIST
59876: LIST
59877: PUSH
59878: LD_VAR 0 1
59882: PUSH
59883: LD_INT 4
59885: PLUS
59886: PUSH
59887: LD_VAR 0 2
59891: PUSH
59892: LD_INT 4
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: LIST
59899: PUSH
59900: LD_VAR 0 1
59904: PUSH
59905: LD_VAR 0 2
59909: PUSH
59910: LD_INT 3
59912: MINUS
59913: PUSH
59914: LD_INT 3
59916: PUSH
59917: EMPTY
59918: LIST
59919: LIST
59920: LIST
59921: PUSH
59922: LD_VAR 0 1
59926: PUSH
59927: LD_INT 4
59929: MINUS
59930: PUSH
59931: LD_VAR 0 2
59935: PUSH
59936: LD_INT 4
59938: MINUS
59939: PUSH
59940: LD_INT 2
59942: PUSH
59943: EMPTY
59944: LIST
59945: LIST
59946: LIST
59947: PUSH
59948: EMPTY
59949: LIST
59950: LIST
59951: LIST
59952: LIST
59953: LIST
59954: ST_TO_ADDR
// end ; 5 :
59955: GO 60095
59957: LD_INT 5
59959: DOUBLE
59960: EQUAL
59961: IFTRUE 59965
59963: GO 60094
59965: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
59966: LD_ADDR_VAR 0 5
59970: PUSH
59971: LD_VAR 0 1
59975: PUSH
59976: LD_INT 4
59978: MINUS
59979: PUSH
59980: LD_VAR 0 2
59984: PUSH
59985: LD_INT 1
59987: PUSH
59988: EMPTY
59989: LIST
59990: LIST
59991: LIST
59992: PUSH
59993: LD_VAR 0 1
59997: PUSH
59998: LD_VAR 0 2
60002: PUSH
60003: LD_INT 4
60005: MINUS
60006: PUSH
60007: LD_INT 3
60009: PUSH
60010: EMPTY
60011: LIST
60012: LIST
60013: LIST
60014: PUSH
60015: LD_VAR 0 1
60019: PUSH
60020: LD_INT 4
60022: PLUS
60023: PUSH
60024: LD_VAR 0 2
60028: PUSH
60029: LD_INT 4
60031: PLUS
60032: PUSH
60033: LD_INT 5
60035: PUSH
60036: EMPTY
60037: LIST
60038: LIST
60039: LIST
60040: PUSH
60041: LD_VAR 0 1
60045: PUSH
60046: LD_INT 3
60048: PLUS
60049: PUSH
60050: LD_VAR 0 2
60054: PUSH
60055: LD_INT 4
60057: PUSH
60058: EMPTY
60059: LIST
60060: LIST
60061: LIST
60062: PUSH
60063: LD_VAR 0 1
60067: PUSH
60068: LD_VAR 0 2
60072: PUSH
60073: LD_INT 3
60075: PLUS
60076: PUSH
60077: LD_INT 0
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: LIST
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: LIST
60089: LIST
60090: LIST
60091: ST_TO_ADDR
// end ; end ;
60092: GO 60095
60094: POP
// result := list ;
60095: LD_ADDR_VAR 0 4
60099: PUSH
60100: LD_VAR 0 5
60104: ST_TO_ADDR
// end ;
60105: LD_VAR 0 4
60109: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
60110: LD_INT 0
60112: PPUSH
60113: PPUSH
60114: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
60115: LD_VAR 0 1
60119: NOT
60120: PUSH
60121: LD_VAR 0 2
60125: PUSH
60126: LD_INT 1
60128: PUSH
60129: LD_INT 2
60131: PUSH
60132: LD_INT 3
60134: PUSH
60135: LD_INT 4
60137: PUSH
60138: EMPTY
60139: LIST
60140: LIST
60141: LIST
60142: LIST
60143: IN
60144: NOT
60145: OR
60146: IFFALSE 60150
// exit ;
60148: GO 60233
// tmp := [ ] ;
60150: LD_ADDR_VAR 0 5
60154: PUSH
60155: EMPTY
60156: ST_TO_ADDR
// for i in units do
60157: LD_ADDR_VAR 0 4
60161: PUSH
60162: LD_VAR 0 1
60166: PUSH
60167: FOR_IN
60168: IFFALSE 60202
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
60170: LD_ADDR_VAR 0 5
60174: PUSH
60175: LD_VAR 0 5
60179: PPUSH
60180: LD_VAR 0 4
60184: PPUSH
60185: LD_VAR 0 2
60189: PPUSH
60190: CALL_OW 259
60194: PPUSH
60195: CALL 61606 0 2
60199: ST_TO_ADDR
60200: GO 60167
60202: POP
60203: POP
// if not tmp then
60204: LD_VAR 0 5
60208: NOT
60209: IFFALSE 60213
// exit ;
60211: GO 60233
// result := SortListByListDesc ( units , tmp ) ;
60213: LD_ADDR_VAR 0 3
60217: PUSH
60218: LD_VAR 0 1
60222: PPUSH
60223: LD_VAR 0 5
60227: PPUSH
60228: CALL_OW 77
60232: ST_TO_ADDR
// end ;
60233: LD_VAR 0 3
60237: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
60238: LD_INT 0
60240: PPUSH
60241: PPUSH
60242: PPUSH
// result := false ;
60243: LD_ADDR_VAR 0 3
60247: PUSH
60248: LD_INT 0
60250: ST_TO_ADDR
// if not building then
60251: LD_VAR 0 2
60255: NOT
60256: IFFALSE 60260
// exit ;
60258: GO 60398
// x := GetX ( building ) ;
60260: LD_ADDR_VAR 0 4
60264: PUSH
60265: LD_VAR 0 2
60269: PPUSH
60270: CALL_OW 250
60274: ST_TO_ADDR
// y := GetY ( building ) ;
60275: LD_ADDR_VAR 0 5
60279: PUSH
60280: LD_VAR 0 2
60284: PPUSH
60285: CALL_OW 251
60289: ST_TO_ADDR
// if not x or not y then
60290: LD_VAR 0 4
60294: NOT
60295: PUSH
60296: LD_VAR 0 5
60300: NOT
60301: OR
60302: IFFALSE 60306
// exit ;
60304: GO 60398
// if GetTaskList ( unit ) then
60306: LD_VAR 0 1
60310: PPUSH
60311: CALL_OW 437
60315: IFFALSE 60398
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60317: LD_STRING e
60319: PUSH
60320: LD_VAR 0 1
60324: PPUSH
60325: CALL_OW 437
60329: PUSH
60330: LD_INT 1
60332: ARRAY
60333: PUSH
60334: LD_INT 1
60336: ARRAY
60337: EQUAL
60338: PUSH
60339: LD_VAR 0 4
60343: PUSH
60344: LD_VAR 0 1
60348: PPUSH
60349: CALL_OW 437
60353: PUSH
60354: LD_INT 1
60356: ARRAY
60357: PUSH
60358: LD_INT 2
60360: ARRAY
60361: EQUAL
60362: AND
60363: PUSH
60364: LD_VAR 0 5
60368: PUSH
60369: LD_VAR 0 1
60373: PPUSH
60374: CALL_OW 437
60378: PUSH
60379: LD_INT 1
60381: ARRAY
60382: PUSH
60383: LD_INT 3
60385: ARRAY
60386: EQUAL
60387: AND
60388: IFFALSE 60398
// result := true end ;
60390: LD_ADDR_VAR 0 3
60394: PUSH
60395: LD_INT 1
60397: ST_TO_ADDR
// end ;
60398: LD_VAR 0 3
60402: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
60403: LD_INT 0
60405: PPUSH
// result := false ;
60406: LD_ADDR_VAR 0 4
60410: PUSH
60411: LD_INT 0
60413: ST_TO_ADDR
// if GetTaskList ( unit ) then
60414: LD_VAR 0 1
60418: PPUSH
60419: CALL_OW 437
60423: IFFALSE 60506
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
60425: LD_STRING M
60427: PUSH
60428: LD_VAR 0 1
60432: PPUSH
60433: CALL_OW 437
60437: PUSH
60438: LD_INT 1
60440: ARRAY
60441: PUSH
60442: LD_INT 1
60444: ARRAY
60445: EQUAL
60446: PUSH
60447: LD_VAR 0 2
60451: PUSH
60452: LD_VAR 0 1
60456: PPUSH
60457: CALL_OW 437
60461: PUSH
60462: LD_INT 1
60464: ARRAY
60465: PUSH
60466: LD_INT 2
60468: ARRAY
60469: EQUAL
60470: AND
60471: PUSH
60472: LD_VAR 0 3
60476: PUSH
60477: LD_VAR 0 1
60481: PPUSH
60482: CALL_OW 437
60486: PUSH
60487: LD_INT 1
60489: ARRAY
60490: PUSH
60491: LD_INT 3
60493: ARRAY
60494: EQUAL
60495: AND
60496: IFFALSE 60506
// result := true ;
60498: LD_ADDR_VAR 0 4
60502: PUSH
60503: LD_INT 1
60505: ST_TO_ADDR
// end ; end ;
60506: LD_VAR 0 4
60510: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
60511: LD_INT 0
60513: PPUSH
60514: PPUSH
60515: PPUSH
60516: PPUSH
// if not unit or not area then
60517: LD_VAR 0 1
60521: NOT
60522: PUSH
60523: LD_VAR 0 2
60527: NOT
60528: OR
60529: IFFALSE 60533
// exit ;
60531: GO 60709
// tmp := AreaToList ( area , i ) ;
60533: LD_ADDR_VAR 0 6
60537: PUSH
60538: LD_VAR 0 2
60542: PPUSH
60543: LD_VAR 0 5
60547: PPUSH
60548: CALL_OW 517
60552: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
60553: LD_ADDR_VAR 0 5
60557: PUSH
60558: DOUBLE
60559: LD_INT 1
60561: DEC
60562: ST_TO_ADDR
60563: LD_VAR 0 6
60567: PUSH
60568: LD_INT 1
60570: ARRAY
60571: PUSH
60572: FOR_TO
60573: IFFALSE 60707
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
60575: LD_ADDR_VAR 0 7
60579: PUSH
60580: LD_VAR 0 6
60584: PUSH
60585: LD_INT 1
60587: ARRAY
60588: PUSH
60589: LD_VAR 0 5
60593: ARRAY
60594: PUSH
60595: LD_VAR 0 6
60599: PUSH
60600: LD_INT 2
60602: ARRAY
60603: PUSH
60604: LD_VAR 0 5
60608: ARRAY
60609: PUSH
60610: EMPTY
60611: LIST
60612: LIST
60613: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 2 ] ) = 0 then
60614: LD_INT 92
60616: PUSH
60617: LD_VAR 0 7
60621: PUSH
60622: LD_INT 1
60624: ARRAY
60625: PUSH
60626: LD_VAR 0 7
60630: PUSH
60631: LD_INT 2
60633: ARRAY
60634: PUSH
60635: LD_INT 2
60637: PUSH
60638: EMPTY
60639: LIST
60640: LIST
60641: LIST
60642: LIST
60643: PPUSH
60644: CALL_OW 69
60648: PUSH
60649: LD_INT 0
60651: EQUAL
60652: IFFALSE 60705
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
60654: LD_VAR 0 1
60658: PPUSH
60659: LD_VAR 0 7
60663: PUSH
60664: LD_INT 1
60666: ARRAY
60667: PPUSH
60668: LD_VAR 0 7
60672: PUSH
60673: LD_INT 2
60675: ARRAY
60676: PPUSH
60677: LD_VAR 0 3
60681: PPUSH
60682: CALL_OW 48
// result := IsPlaced ( unit ) ;
60686: LD_ADDR_VAR 0 4
60690: PUSH
60691: LD_VAR 0 1
60695: PPUSH
60696: CALL_OW 305
60700: ST_TO_ADDR
// exit ;
60701: POP
60702: POP
60703: GO 60709
// end ; end ;
60705: GO 60572
60707: POP
60708: POP
// end ;
60709: LD_VAR 0 4
60713: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60714: LD_INT 0
60716: PPUSH
60717: PPUSH
60718: PPUSH
// if not side or side > 8 then
60719: LD_VAR 0 1
60723: NOT
60724: PUSH
60725: LD_VAR 0 1
60729: PUSH
60730: LD_INT 8
60732: GREATER
60733: OR
60734: IFFALSE 60738
// exit ;
60736: GO 60925
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60738: LD_ADDR_VAR 0 4
60742: PUSH
60743: LD_INT 22
60745: PUSH
60746: LD_VAR 0 1
60750: PUSH
60751: EMPTY
60752: LIST
60753: LIST
60754: PUSH
60755: LD_INT 21
60757: PUSH
60758: LD_INT 3
60760: PUSH
60761: EMPTY
60762: LIST
60763: LIST
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PPUSH
60769: CALL_OW 69
60773: ST_TO_ADDR
// if not tmp then
60774: LD_VAR 0 4
60778: NOT
60779: IFFALSE 60783
// exit ;
60781: GO 60925
// enable_addtolog := true ;
60783: LD_ADDR_OWVAR 81
60787: PUSH
60788: LD_INT 1
60790: ST_TO_ADDR
// AddToLog ( [ ) ;
60791: LD_STRING [
60793: PPUSH
60794: CALL_OW 561
// for i in tmp do
60798: LD_ADDR_VAR 0 3
60802: PUSH
60803: LD_VAR 0 4
60807: PUSH
60808: FOR_IN
60809: IFFALSE 60916
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60811: LD_STRING [
60813: PUSH
60814: LD_VAR 0 3
60818: PPUSH
60819: CALL_OW 266
60823: STR
60824: PUSH
60825: LD_STRING , 
60827: STR
60828: PUSH
60829: LD_VAR 0 3
60833: PPUSH
60834: CALL_OW 250
60838: STR
60839: PUSH
60840: LD_STRING , 
60842: STR
60843: PUSH
60844: LD_VAR 0 3
60848: PPUSH
60849: CALL_OW 251
60853: STR
60854: PUSH
60855: LD_STRING , 
60857: STR
60858: PUSH
60859: LD_VAR 0 3
60863: PPUSH
60864: CALL_OW 254
60868: STR
60869: PUSH
60870: LD_STRING , 
60872: STR
60873: PUSH
60874: LD_VAR 0 3
60878: PPUSH
60879: LD_INT 1
60881: PPUSH
60882: CALL_OW 268
60886: STR
60887: PUSH
60888: LD_STRING , 
60890: STR
60891: PUSH
60892: LD_VAR 0 3
60896: PPUSH
60897: LD_INT 2
60899: PPUSH
60900: CALL_OW 268
60904: STR
60905: PUSH
60906: LD_STRING ],
60908: STR
60909: PPUSH
60910: CALL_OW 561
// end ;
60914: GO 60808
60916: POP
60917: POP
// AddToLog ( ]; ) ;
60918: LD_STRING ];
60920: PPUSH
60921: CALL_OW 561
// end ;
60925: LD_VAR 0 2
60929: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60930: LD_INT 0
60932: PPUSH
60933: PPUSH
60934: PPUSH
60935: PPUSH
60936: PPUSH
// if not area or not rate or not max then
60937: LD_VAR 0 1
60941: NOT
60942: PUSH
60943: LD_VAR 0 2
60947: NOT
60948: OR
60949: PUSH
60950: LD_VAR 0 4
60954: NOT
60955: OR
60956: IFFALSE 60960
// exit ;
60958: GO 61149
// while 1 do
60960: LD_INT 1
60962: IFFALSE 61149
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
60964: LD_ADDR_VAR 0 9
60968: PUSH
60969: LD_VAR 0 1
60973: PPUSH
60974: LD_INT 1
60976: PPUSH
60977: CALL_OW 287
60981: PUSH
60982: LD_INT 10
60984: MUL
60985: ST_TO_ADDR
// r := rate / 10 ;
60986: LD_ADDR_VAR 0 7
60990: PUSH
60991: LD_VAR 0 2
60995: PUSH
60996: LD_INT 10
60998: DIVREAL
60999: ST_TO_ADDR
// time := 1 1$00 ;
61000: LD_ADDR_VAR 0 8
61004: PUSH
61005: LD_INT 2100
61007: ST_TO_ADDR
// if amount < min then
61008: LD_VAR 0 9
61012: PUSH
61013: LD_VAR 0 3
61017: LESS
61018: IFFALSE 61036
// r := r * 2 else
61020: LD_ADDR_VAR 0 7
61024: PUSH
61025: LD_VAR 0 7
61029: PUSH
61030: LD_INT 2
61032: MUL
61033: ST_TO_ADDR
61034: GO 61062
// if amount > max then
61036: LD_VAR 0 9
61040: PUSH
61041: LD_VAR 0 4
61045: GREATER
61046: IFFALSE 61062
// r := r / 2 ;
61048: LD_ADDR_VAR 0 7
61052: PUSH
61053: LD_VAR 0 7
61057: PUSH
61058: LD_INT 2
61060: DIVREAL
61061: ST_TO_ADDR
// time := time / r ;
61062: LD_ADDR_VAR 0 8
61066: PUSH
61067: LD_VAR 0 8
61071: PUSH
61072: LD_VAR 0 7
61076: DIVREAL
61077: ST_TO_ADDR
// if time < 0 then
61078: LD_VAR 0 8
61082: PUSH
61083: LD_INT 0
61085: LESS
61086: IFFALSE 61103
// time := time * - 1 ;
61088: LD_ADDR_VAR 0 8
61092: PUSH
61093: LD_VAR 0 8
61097: PUSH
61098: LD_INT 1
61100: NEG
61101: MUL
61102: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
61103: LD_VAR 0 8
61107: PUSH
61108: LD_INT 35
61110: PPUSH
61111: LD_INT 875
61113: PPUSH
61114: CALL_OW 12
61118: PLUS
61119: PPUSH
61120: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
61124: LD_INT 1
61126: PPUSH
61127: LD_INT 5
61129: PPUSH
61130: CALL_OW 12
61134: PPUSH
61135: LD_VAR 0 1
61139: PPUSH
61140: LD_INT 1
61142: PPUSH
61143: CALL_OW 55
// end ;
61147: GO 60960
// end ;
61149: LD_VAR 0 5
61153: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
61154: LD_INT 0
61156: PPUSH
61157: PPUSH
61158: PPUSH
61159: PPUSH
61160: PPUSH
61161: PPUSH
61162: PPUSH
61163: PPUSH
// if not turrets or not factories then
61164: LD_VAR 0 1
61168: NOT
61169: PUSH
61170: LD_VAR 0 2
61174: NOT
61175: OR
61176: IFFALSE 61180
// exit ;
61178: GO 61487
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
61180: LD_ADDR_VAR 0 10
61184: PUSH
61185: LD_INT 5
61187: PUSH
61188: LD_INT 6
61190: PUSH
61191: EMPTY
61192: LIST
61193: LIST
61194: PUSH
61195: LD_INT 2
61197: PUSH
61198: LD_INT 4
61200: PUSH
61201: EMPTY
61202: LIST
61203: LIST
61204: PUSH
61205: LD_INT 3
61207: PUSH
61208: LD_INT 5
61210: PUSH
61211: EMPTY
61212: LIST
61213: LIST
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: LIST
61219: PUSH
61220: LD_INT 24
61222: PUSH
61223: LD_INT 25
61225: PUSH
61226: EMPTY
61227: LIST
61228: LIST
61229: PUSH
61230: LD_INT 23
61232: PUSH
61233: LD_INT 27
61235: PUSH
61236: EMPTY
61237: LIST
61238: LIST
61239: PUSH
61240: EMPTY
61241: LIST
61242: LIST
61243: PUSH
61244: LD_INT 42
61246: PUSH
61247: LD_INT 43
61249: PUSH
61250: EMPTY
61251: LIST
61252: LIST
61253: PUSH
61254: LD_INT 44
61256: PUSH
61257: LD_INT 46
61259: PUSH
61260: EMPTY
61261: LIST
61262: LIST
61263: PUSH
61264: LD_INT 45
61266: PUSH
61267: LD_INT 47
61269: PUSH
61270: EMPTY
61271: LIST
61272: LIST
61273: PUSH
61274: EMPTY
61275: LIST
61276: LIST
61277: LIST
61278: PUSH
61279: EMPTY
61280: LIST
61281: LIST
61282: LIST
61283: ST_TO_ADDR
// result := [ ] ;
61284: LD_ADDR_VAR 0 3
61288: PUSH
61289: EMPTY
61290: ST_TO_ADDR
// for i in turrets do
61291: LD_ADDR_VAR 0 4
61295: PUSH
61296: LD_VAR 0 1
61300: PUSH
61301: FOR_IN
61302: IFFALSE 61485
// begin nat := GetNation ( i ) ;
61304: LD_ADDR_VAR 0 7
61308: PUSH
61309: LD_VAR 0 4
61313: PPUSH
61314: CALL_OW 248
61318: ST_TO_ADDR
// weapon := 0 ;
61319: LD_ADDR_VAR 0 8
61323: PUSH
61324: LD_INT 0
61326: ST_TO_ADDR
// if not nat then
61327: LD_VAR 0 7
61331: NOT
61332: IFFALSE 61336
// continue ;
61334: GO 61301
// for j in list [ nat ] do
61336: LD_ADDR_VAR 0 5
61340: PUSH
61341: LD_VAR 0 10
61345: PUSH
61346: LD_VAR 0 7
61350: ARRAY
61351: PUSH
61352: FOR_IN
61353: IFFALSE 61394
// if GetBWeapon ( i ) = j [ 1 ] then
61355: LD_VAR 0 4
61359: PPUSH
61360: CALL_OW 269
61364: PUSH
61365: LD_VAR 0 5
61369: PUSH
61370: LD_INT 1
61372: ARRAY
61373: EQUAL
61374: IFFALSE 61392
// begin weapon := j [ 2 ] ;
61376: LD_ADDR_VAR 0 8
61380: PUSH
61381: LD_VAR 0 5
61385: PUSH
61386: LD_INT 2
61388: ARRAY
61389: ST_TO_ADDR
// break ;
61390: GO 61394
// end ;
61392: GO 61352
61394: POP
61395: POP
// if not weapon then
61396: LD_VAR 0 8
61400: NOT
61401: IFFALSE 61405
// continue ;
61403: GO 61301
// for k in factories do
61405: LD_ADDR_VAR 0 6
61409: PUSH
61410: LD_VAR 0 2
61414: PUSH
61415: FOR_IN
61416: IFFALSE 61481
// begin weapons := AvailableWeaponList ( k ) ;
61418: LD_ADDR_VAR 0 9
61422: PUSH
61423: LD_VAR 0 6
61427: PPUSH
61428: CALL_OW 478
61432: ST_TO_ADDR
// if not weapons then
61433: LD_VAR 0 9
61437: NOT
61438: IFFALSE 61442
// continue ;
61440: GO 61415
// if weapon in weapons then
61442: LD_VAR 0 8
61446: PUSH
61447: LD_VAR 0 9
61451: IN
61452: IFFALSE 61479
// begin result := [ i , weapon ] ;
61454: LD_ADDR_VAR 0 3
61458: PUSH
61459: LD_VAR 0 4
61463: PUSH
61464: LD_VAR 0 8
61468: PUSH
61469: EMPTY
61470: LIST
61471: LIST
61472: ST_TO_ADDR
// exit ;
61473: POP
61474: POP
61475: POP
61476: POP
61477: GO 61487
// end ; end ;
61479: GO 61415
61481: POP
61482: POP
// end ;
61483: GO 61301
61485: POP
61486: POP
// end ;
61487: LD_VAR 0 3
61491: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
61492: LD_INT 0
61494: PPUSH
// if not side or side > 8 then
61495: LD_VAR 0 3
61499: NOT
61500: PUSH
61501: LD_VAR 0 3
61505: PUSH
61506: LD_INT 8
61508: GREATER
61509: OR
61510: IFFALSE 61514
// exit ;
61512: GO 61573
// if not range then
61514: LD_VAR 0 4
61518: NOT
61519: IFFALSE 61530
// range := - 12 ;
61521: LD_ADDR_VAR 0 4
61525: PUSH
61526: LD_INT 12
61528: NEG
61529: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
61530: LD_VAR 0 1
61534: PPUSH
61535: LD_VAR 0 2
61539: PPUSH
61540: LD_VAR 0 3
61544: PPUSH
61545: LD_VAR 0 4
61549: PPUSH
61550: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
61554: LD_VAR 0 1
61558: PPUSH
61559: LD_VAR 0 2
61563: PPUSH
61564: LD_VAR 0 3
61568: PPUSH
61569: CALL_OW 331
// end ;
61573: LD_VAR 0 5
61577: RET
// export function Video ( mode ) ; begin
61578: LD_INT 0
61580: PPUSH
// ingame_video = mode ;
61581: LD_ADDR_OWVAR 52
61585: PUSH
61586: LD_VAR 0 1
61590: ST_TO_ADDR
// interface_hidden = mode ;
61591: LD_ADDR_OWVAR 54
61595: PUSH
61596: LD_VAR 0 1
61600: ST_TO_ADDR
// end ;
61601: LD_VAR 0 2
61605: RET
// export function Join ( array , element ) ; begin
61606: LD_INT 0
61608: PPUSH
// result := Replace ( array , array + 1 , element ) ;
61609: LD_ADDR_VAR 0 3
61613: PUSH
61614: LD_VAR 0 1
61618: PPUSH
61619: LD_VAR 0 1
61623: PUSH
61624: LD_INT 1
61626: PLUS
61627: PPUSH
61628: LD_VAR 0 2
61632: PPUSH
61633: CALL_OW 1
61637: ST_TO_ADDR
// end ;
61638: LD_VAR 0 3
61642: RET
// export function JoinUnion ( array , element ) ; begin
61643: LD_INT 0
61645: PPUSH
// result := array union element ;
61646: LD_ADDR_VAR 0 3
61650: PUSH
61651: LD_VAR 0 1
61655: PUSH
61656: LD_VAR 0 2
61660: UNION
61661: ST_TO_ADDR
// end ;
61662: LD_VAR 0 3
61666: RET
// export function GetBehemoths ( side ) ; begin
61667: LD_INT 0
61669: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
61670: LD_ADDR_VAR 0 2
61674: PUSH
61675: LD_INT 22
61677: PUSH
61678: LD_VAR 0 1
61682: PUSH
61683: EMPTY
61684: LIST
61685: LIST
61686: PUSH
61687: LD_INT 31
61689: PUSH
61690: LD_INT 25
61692: PUSH
61693: EMPTY
61694: LIST
61695: LIST
61696: PUSH
61697: EMPTY
61698: LIST
61699: LIST
61700: PPUSH
61701: CALL_OW 69
61705: ST_TO_ADDR
// end ;
61706: LD_VAR 0 2
61710: RET
// export function Shuffle ( array ) ; var i , index ; begin
61711: LD_INT 0
61713: PPUSH
61714: PPUSH
61715: PPUSH
// result := [ ] ;
61716: LD_ADDR_VAR 0 2
61720: PUSH
61721: EMPTY
61722: ST_TO_ADDR
// if not array then
61723: LD_VAR 0 1
61727: NOT
61728: IFFALSE 61732
// exit ;
61730: GO 61831
// Randomize ;
61732: CALL_OW 10
// for i = array downto 1 do
61736: LD_ADDR_VAR 0 3
61740: PUSH
61741: DOUBLE
61742: LD_VAR 0 1
61746: INC
61747: ST_TO_ADDR
61748: LD_INT 1
61750: PUSH
61751: FOR_DOWNTO
61752: IFFALSE 61829
// begin index := rand ( 1 , array ) ;
61754: LD_ADDR_VAR 0 4
61758: PUSH
61759: LD_INT 1
61761: PPUSH
61762: LD_VAR 0 1
61766: PPUSH
61767: CALL_OW 12
61771: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61772: LD_ADDR_VAR 0 2
61776: PUSH
61777: LD_VAR 0 2
61781: PPUSH
61782: LD_VAR 0 2
61786: PUSH
61787: LD_INT 1
61789: PLUS
61790: PPUSH
61791: LD_VAR 0 1
61795: PUSH
61796: LD_VAR 0 4
61800: ARRAY
61801: PPUSH
61802: CALL_OW 2
61806: ST_TO_ADDR
// array := Delete ( array , index ) ;
61807: LD_ADDR_VAR 0 1
61811: PUSH
61812: LD_VAR 0 1
61816: PPUSH
61817: LD_VAR 0 4
61821: PPUSH
61822: CALL_OW 3
61826: ST_TO_ADDR
// end ;
61827: GO 61751
61829: POP
61830: POP
// end ;
61831: LD_VAR 0 2
61835: RET
// export function GetBaseMaterials ( base ) ; begin
61836: LD_INT 0
61838: PPUSH
// result := [ 0 , 0 , 0 ] ;
61839: LD_ADDR_VAR 0 2
61843: PUSH
61844: LD_INT 0
61846: PUSH
61847: LD_INT 0
61849: PUSH
61850: LD_INT 0
61852: PUSH
61853: EMPTY
61854: LIST
61855: LIST
61856: LIST
61857: ST_TO_ADDR
// if not base then
61858: LD_VAR 0 1
61862: NOT
61863: IFFALSE 61867
// exit ;
61865: GO 61916
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61867: LD_ADDR_VAR 0 2
61871: PUSH
61872: LD_VAR 0 1
61876: PPUSH
61877: LD_INT 1
61879: PPUSH
61880: CALL_OW 275
61884: PUSH
61885: LD_VAR 0 1
61889: PPUSH
61890: LD_INT 2
61892: PPUSH
61893: CALL_OW 275
61897: PUSH
61898: LD_VAR 0 1
61902: PPUSH
61903: LD_INT 3
61905: PPUSH
61906: CALL_OW 275
61910: PUSH
61911: EMPTY
61912: LIST
61913: LIST
61914: LIST
61915: ST_TO_ADDR
// end ;
61916: LD_VAR 0 2
61920: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
61921: LD_INT 0
61923: PPUSH
61924: PPUSH
// result := array ;
61925: LD_ADDR_VAR 0 3
61929: PUSH
61930: LD_VAR 0 1
61934: ST_TO_ADDR
// if size >= result then
61935: LD_VAR 0 2
61939: PUSH
61940: LD_VAR 0 3
61944: GREATEREQUAL
61945: IFFALSE 61949
// exit ;
61947: GO 61999
// if size then
61949: LD_VAR 0 2
61953: IFFALSE 61999
// for i := array downto size do
61955: LD_ADDR_VAR 0 4
61959: PUSH
61960: DOUBLE
61961: LD_VAR 0 1
61965: INC
61966: ST_TO_ADDR
61967: LD_VAR 0 2
61971: PUSH
61972: FOR_DOWNTO
61973: IFFALSE 61997
// result := Delete ( result , result ) ;
61975: LD_ADDR_VAR 0 3
61979: PUSH
61980: LD_VAR 0 3
61984: PPUSH
61985: LD_VAR 0 3
61989: PPUSH
61990: CALL_OW 3
61994: ST_TO_ADDR
61995: GO 61972
61997: POP
61998: POP
// end ;
61999: LD_VAR 0 3
62003: RET
// export function ComExit ( unit ) ; var tmp ; begin
62004: LD_INT 0
62006: PPUSH
62007: PPUSH
// if not IsInUnit ( unit ) then
62008: LD_VAR 0 1
62012: PPUSH
62013: CALL_OW 310
62017: NOT
62018: IFFALSE 62022
// exit ;
62020: GO 62082
// tmp := IsInUnit ( unit ) ;
62022: LD_ADDR_VAR 0 3
62026: PUSH
62027: LD_VAR 0 1
62031: PPUSH
62032: CALL_OW 310
62036: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
62037: LD_VAR 0 3
62041: PPUSH
62042: CALL_OW 247
62046: PUSH
62047: LD_INT 2
62049: EQUAL
62050: IFFALSE 62063
// ComExitVehicle ( unit ) else
62052: LD_VAR 0 1
62056: PPUSH
62057: CALL_OW 121
62061: GO 62072
// ComExitBuilding ( unit ) ;
62063: LD_VAR 0 1
62067: PPUSH
62068: CALL_OW 122
// result := tmp ;
62072: LD_ADDR_VAR 0 2
62076: PUSH
62077: LD_VAR 0 3
62081: ST_TO_ADDR
// end ;
62082: LD_VAR 0 2
62086: RET
// export function ComExitAll ( units ) ; var i ; begin
62087: LD_INT 0
62089: PPUSH
62090: PPUSH
// if not units then
62091: LD_VAR 0 1
62095: NOT
62096: IFFALSE 62100
// exit ;
62098: GO 62126
// for i in units do
62100: LD_ADDR_VAR 0 3
62104: PUSH
62105: LD_VAR 0 1
62109: PUSH
62110: FOR_IN
62111: IFFALSE 62124
// ComExit ( i ) ;
62113: LD_VAR 0 3
62117: PPUSH
62118: CALL 62004 0 1
62122: GO 62110
62124: POP
62125: POP
// end ;
62126: LD_VAR 0 2
62130: RET
// export function ResetHc ; begin
62131: LD_INT 0
62133: PPUSH
// InitHc ;
62134: CALL_OW 19
// hc_importance := 0 ;
62138: LD_ADDR_OWVAR 32
62142: PUSH
62143: LD_INT 0
62145: ST_TO_ADDR
// end ;
62146: LD_VAR 0 1
62150: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
62151: LD_INT 0
62153: PPUSH
62154: PPUSH
62155: PPUSH
// _x := ( x1 + x2 ) div 2 ;
62156: LD_ADDR_VAR 0 6
62160: PUSH
62161: LD_VAR 0 1
62165: PUSH
62166: LD_VAR 0 3
62170: PLUS
62171: PUSH
62172: LD_INT 2
62174: DIV
62175: ST_TO_ADDR
// if _x < 0 then
62176: LD_VAR 0 6
62180: PUSH
62181: LD_INT 0
62183: LESS
62184: IFFALSE 62201
// _x := _x * - 1 ;
62186: LD_ADDR_VAR 0 6
62190: PUSH
62191: LD_VAR 0 6
62195: PUSH
62196: LD_INT 1
62198: NEG
62199: MUL
62200: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
62201: LD_ADDR_VAR 0 7
62205: PUSH
62206: LD_VAR 0 2
62210: PUSH
62211: LD_VAR 0 4
62215: PLUS
62216: PUSH
62217: LD_INT 2
62219: DIV
62220: ST_TO_ADDR
// if _y < 0 then
62221: LD_VAR 0 7
62225: PUSH
62226: LD_INT 0
62228: LESS
62229: IFFALSE 62246
// _y := _y * - 1 ;
62231: LD_ADDR_VAR 0 7
62235: PUSH
62236: LD_VAR 0 7
62240: PUSH
62241: LD_INT 1
62243: NEG
62244: MUL
62245: ST_TO_ADDR
// result := [ _x , _y ] ;
62246: LD_ADDR_VAR 0 5
62250: PUSH
62251: LD_VAR 0 6
62255: PUSH
62256: LD_VAR 0 7
62260: PUSH
62261: EMPTY
62262: LIST
62263: LIST
62264: ST_TO_ADDR
// end ;
62265: LD_VAR 0 5
62269: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
62270: LD_INT 0
62272: PPUSH
62273: PPUSH
62274: PPUSH
62275: PPUSH
// task := GetTaskList ( unit ) ;
62276: LD_ADDR_VAR 0 7
62280: PUSH
62281: LD_VAR 0 1
62285: PPUSH
62286: CALL_OW 437
62290: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
62291: LD_VAR 0 7
62295: NOT
62296: PUSH
62297: LD_VAR 0 1
62301: PPUSH
62302: LD_VAR 0 2
62306: PPUSH
62307: CALL_OW 308
62311: NOT
62312: AND
62313: IFFALSE 62317
// exit ;
62315: GO 62435
// if IsInArea ( unit , area ) then
62317: LD_VAR 0 1
62321: PPUSH
62322: LD_VAR 0 2
62326: PPUSH
62327: CALL_OW 308
62331: IFFALSE 62349
// begin ComMoveToArea ( unit , goAway ) ;
62333: LD_VAR 0 1
62337: PPUSH
62338: LD_VAR 0 3
62342: PPUSH
62343: CALL_OW 113
// exit ;
62347: GO 62435
// end ; if task [ 1 ] [ 1 ] <> M then
62349: LD_VAR 0 7
62353: PUSH
62354: LD_INT 1
62356: ARRAY
62357: PUSH
62358: LD_INT 1
62360: ARRAY
62361: PUSH
62362: LD_STRING M
62364: NONEQUAL
62365: IFFALSE 62369
// exit ;
62367: GO 62435
// x := task [ 1 ] [ 2 ] ;
62369: LD_ADDR_VAR 0 5
62373: PUSH
62374: LD_VAR 0 7
62378: PUSH
62379: LD_INT 1
62381: ARRAY
62382: PUSH
62383: LD_INT 2
62385: ARRAY
62386: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
62387: LD_ADDR_VAR 0 6
62391: PUSH
62392: LD_VAR 0 7
62396: PUSH
62397: LD_INT 1
62399: ARRAY
62400: PUSH
62401: LD_INT 3
62403: ARRAY
62404: ST_TO_ADDR
// if InArea ( x , y , area ) then
62405: LD_VAR 0 5
62409: PPUSH
62410: LD_VAR 0 6
62414: PPUSH
62415: LD_VAR 0 2
62419: PPUSH
62420: CALL_OW 309
62424: IFFALSE 62435
// ComStop ( unit ) ;
62426: LD_VAR 0 1
62430: PPUSH
62431: CALL_OW 141
// end ;
62435: LD_VAR 0 4
62439: RET
// export function Abs ( value ) ; begin
62440: LD_INT 0
62442: PPUSH
// result := value ;
62443: LD_ADDR_VAR 0 2
62447: PUSH
62448: LD_VAR 0 1
62452: ST_TO_ADDR
// if value < 0 then
62453: LD_VAR 0 1
62457: PUSH
62458: LD_INT 0
62460: LESS
62461: IFFALSE 62478
// result := value * - 1 ;
62463: LD_ADDR_VAR 0 2
62467: PUSH
62468: LD_VAR 0 1
62472: PUSH
62473: LD_INT 1
62475: NEG
62476: MUL
62477: ST_TO_ADDR
// end ;
62478: LD_VAR 0 2
62482: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
62483: LD_INT 0
62485: PPUSH
62486: PPUSH
62487: PPUSH
62488: PPUSH
62489: PPUSH
62490: PPUSH
62491: PPUSH
62492: PPUSH
// if not unit or not building then
62493: LD_VAR 0 1
62497: NOT
62498: PUSH
62499: LD_VAR 0 2
62503: NOT
62504: OR
62505: IFFALSE 62509
// exit ;
62507: GO 62735
// x := GetX ( building ) ;
62509: LD_ADDR_VAR 0 4
62513: PUSH
62514: LD_VAR 0 2
62518: PPUSH
62519: CALL_OW 250
62523: ST_TO_ADDR
// y := GetY ( building ) ;
62524: LD_ADDR_VAR 0 6
62528: PUSH
62529: LD_VAR 0 2
62533: PPUSH
62534: CALL_OW 251
62538: ST_TO_ADDR
// d := GetDir ( building ) ;
62539: LD_ADDR_VAR 0 8
62543: PUSH
62544: LD_VAR 0 2
62548: PPUSH
62549: CALL_OW 254
62553: ST_TO_ADDR
// r := 4 ;
62554: LD_ADDR_VAR 0 9
62558: PUSH
62559: LD_INT 4
62561: ST_TO_ADDR
// for i := 1 to 5 do
62562: LD_ADDR_VAR 0 10
62566: PUSH
62567: DOUBLE
62568: LD_INT 1
62570: DEC
62571: ST_TO_ADDR
62572: LD_INT 5
62574: PUSH
62575: FOR_TO
62576: IFFALSE 62733
// begin _x := ShiftX ( x , d , r + i ) ;
62578: LD_ADDR_VAR 0 5
62582: PUSH
62583: LD_VAR 0 4
62587: PPUSH
62588: LD_VAR 0 8
62592: PPUSH
62593: LD_VAR 0 9
62597: PUSH
62598: LD_VAR 0 10
62602: PLUS
62603: PPUSH
62604: CALL_OW 272
62608: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
62609: LD_ADDR_VAR 0 7
62613: PUSH
62614: LD_VAR 0 6
62618: PPUSH
62619: LD_VAR 0 8
62623: PPUSH
62624: LD_VAR 0 9
62628: PUSH
62629: LD_VAR 0 10
62633: PLUS
62634: PPUSH
62635: CALL_OW 273
62639: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
62640: LD_VAR 0 5
62644: PPUSH
62645: LD_VAR 0 7
62649: PPUSH
62650: CALL_OW 488
62654: PUSH
62655: LD_VAR 0 5
62659: PPUSH
62660: LD_VAR 0 7
62664: PPUSH
62665: CALL_OW 428
62669: PPUSH
62670: CALL_OW 247
62674: PUSH
62675: LD_INT 3
62677: PUSH
62678: LD_INT 2
62680: PUSH
62681: EMPTY
62682: LIST
62683: LIST
62684: IN
62685: NOT
62686: AND
62687: IFFALSE 62731
// begin ComMoveXY ( unit , _x , _y ) ;
62689: LD_VAR 0 1
62693: PPUSH
62694: LD_VAR 0 5
62698: PPUSH
62699: LD_VAR 0 7
62703: PPUSH
62704: CALL_OW 111
// result := [ _x , _y ] ;
62708: LD_ADDR_VAR 0 3
62712: PUSH
62713: LD_VAR 0 5
62717: PUSH
62718: LD_VAR 0 7
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: ST_TO_ADDR
// exit ;
62727: POP
62728: POP
62729: GO 62735
// end ; end ;
62731: GO 62575
62733: POP
62734: POP
// end ;
62735: LD_VAR 0 3
62739: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
62740: LD_INT 0
62742: PPUSH
62743: PPUSH
62744: PPUSH
// result := 0 ;
62745: LD_ADDR_VAR 0 3
62749: PUSH
62750: LD_INT 0
62752: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
62753: LD_VAR 0 1
62757: PUSH
62758: LD_INT 0
62760: LESS
62761: PUSH
62762: LD_VAR 0 1
62766: PUSH
62767: LD_INT 8
62769: GREATER
62770: OR
62771: PUSH
62772: LD_VAR 0 2
62776: PUSH
62777: LD_INT 0
62779: LESS
62780: OR
62781: PUSH
62782: LD_VAR 0 2
62786: PUSH
62787: LD_INT 8
62789: GREATER
62790: OR
62791: IFFALSE 62795
// exit ;
62793: GO 62870
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
62795: LD_ADDR_VAR 0 4
62799: PUSH
62800: LD_INT 22
62802: PUSH
62803: LD_VAR 0 2
62807: PUSH
62808: EMPTY
62809: LIST
62810: LIST
62811: PPUSH
62812: CALL_OW 69
62816: PUSH
62817: FOR_IN
62818: IFFALSE 62868
// begin un := UnitShoot ( i ) ;
62820: LD_ADDR_VAR 0 5
62824: PUSH
62825: LD_VAR 0 4
62829: PPUSH
62830: CALL_OW 504
62834: ST_TO_ADDR
// if GetSide ( un ) = side1 then
62835: LD_VAR 0 5
62839: PPUSH
62840: CALL_OW 255
62844: PUSH
62845: LD_VAR 0 1
62849: EQUAL
62850: IFFALSE 62866
// begin result := un ;
62852: LD_ADDR_VAR 0 3
62856: PUSH
62857: LD_VAR 0 5
62861: ST_TO_ADDR
// exit ;
62862: POP
62863: POP
62864: GO 62870
// end ; end ;
62866: GO 62817
62868: POP
62869: POP
// end ;
62870: LD_VAR 0 3
62874: RET
// export function GetCargoBay ( units ) ; begin
62875: LD_INT 0
62877: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
62878: LD_ADDR_VAR 0 2
62882: PUSH
62883: LD_VAR 0 1
62887: PPUSH
62888: LD_INT 2
62890: PUSH
62891: LD_INT 34
62893: PUSH
62894: LD_INT 12
62896: PUSH
62897: EMPTY
62898: LIST
62899: LIST
62900: PUSH
62901: LD_INT 34
62903: PUSH
62904: LD_INT 51
62906: PUSH
62907: EMPTY
62908: LIST
62909: LIST
62910: PUSH
62911: LD_INT 34
62913: PUSH
62914: LD_INT 32
62916: PUSH
62917: EMPTY
62918: LIST
62919: LIST
62920: PUSH
62921: LD_INT 34
62923: PUSH
62924: LD_INT 89
62926: PUSH
62927: EMPTY
62928: LIST
62929: LIST
62930: PUSH
62931: EMPTY
62932: LIST
62933: LIST
62934: LIST
62935: LIST
62936: LIST
62937: PPUSH
62938: CALL_OW 72
62942: ST_TO_ADDR
// end ;
62943: LD_VAR 0 2
62947: RET
// export function Negate ( value ) ; begin
62948: LD_INT 0
62950: PPUSH
// result := not value ;
62951: LD_ADDR_VAR 0 2
62955: PUSH
62956: LD_VAR 0 1
62960: NOT
62961: ST_TO_ADDR
// end ;
62962: LD_VAR 0 2
62966: RET
// export function Inc ( value ) ; begin
62967: LD_INT 0
62969: PPUSH
// result := value + 1 ;
62970: LD_ADDR_VAR 0 2
62974: PUSH
62975: LD_VAR 0 1
62979: PUSH
62980: LD_INT 1
62982: PLUS
62983: ST_TO_ADDR
// end ;
62984: LD_VAR 0 2
62988: RET
// export function Dec ( value ) ; begin
62989: LD_INT 0
62991: PPUSH
// result := value - 1 ;
62992: LD_ADDR_VAR 0 2
62996: PUSH
62997: LD_VAR 0 1
63001: PUSH
63002: LD_INT 1
63004: MINUS
63005: ST_TO_ADDR
// end ;
63006: LD_VAR 0 2
63010: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
63011: LD_INT 0
63013: PPUSH
63014: PPUSH
63015: PPUSH
63016: PPUSH
63017: PPUSH
63018: PPUSH
63019: PPUSH
63020: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
63021: LD_VAR 0 1
63025: PPUSH
63026: LD_VAR 0 2
63030: PPUSH
63031: CALL_OW 488
63035: NOT
63036: PUSH
63037: LD_VAR 0 3
63041: PPUSH
63042: LD_VAR 0 4
63046: PPUSH
63047: CALL_OW 488
63051: NOT
63052: OR
63053: IFFALSE 63066
// begin result := - 1 ;
63055: LD_ADDR_VAR 0 5
63059: PUSH
63060: LD_INT 1
63062: NEG
63063: ST_TO_ADDR
// exit ;
63064: GO 63301
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
63066: LD_ADDR_VAR 0 12
63070: PUSH
63071: LD_VAR 0 1
63075: PPUSH
63076: LD_VAR 0 2
63080: PPUSH
63081: LD_VAR 0 3
63085: PPUSH
63086: LD_VAR 0 4
63090: PPUSH
63091: CALL 62151 0 4
63095: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
63096: LD_ADDR_VAR 0 11
63100: PUSH
63101: LD_VAR 0 1
63105: PPUSH
63106: LD_VAR 0 2
63110: PPUSH
63111: LD_VAR 0 12
63115: PUSH
63116: LD_INT 1
63118: ARRAY
63119: PPUSH
63120: LD_VAR 0 12
63124: PUSH
63125: LD_INT 2
63127: ARRAY
63128: PPUSH
63129: CALL_OW 298
63133: ST_TO_ADDR
// distance := 9999 ;
63134: LD_ADDR_VAR 0 10
63138: PUSH
63139: LD_INT 9999
63141: ST_TO_ADDR
// for i := 0 to 5 do
63142: LD_ADDR_VAR 0 6
63146: PUSH
63147: DOUBLE
63148: LD_INT 0
63150: DEC
63151: ST_TO_ADDR
63152: LD_INT 5
63154: PUSH
63155: FOR_TO
63156: IFFALSE 63299
// begin _x := ShiftX ( x1 , i , centerDist ) ;
63158: LD_ADDR_VAR 0 7
63162: PUSH
63163: LD_VAR 0 1
63167: PPUSH
63168: LD_VAR 0 6
63172: PPUSH
63173: LD_VAR 0 11
63177: PPUSH
63178: CALL_OW 272
63182: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
63183: LD_ADDR_VAR 0 8
63187: PUSH
63188: LD_VAR 0 2
63192: PPUSH
63193: LD_VAR 0 6
63197: PPUSH
63198: LD_VAR 0 11
63202: PPUSH
63203: CALL_OW 273
63207: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
63208: LD_VAR 0 7
63212: PPUSH
63213: LD_VAR 0 8
63217: PPUSH
63218: CALL_OW 488
63222: NOT
63223: IFFALSE 63227
// continue ;
63225: GO 63155
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
63227: LD_ADDR_VAR 0 9
63231: PUSH
63232: LD_VAR 0 12
63236: PUSH
63237: LD_INT 1
63239: ARRAY
63240: PPUSH
63241: LD_VAR 0 12
63245: PUSH
63246: LD_INT 2
63248: ARRAY
63249: PPUSH
63250: LD_VAR 0 7
63254: PPUSH
63255: LD_VAR 0 8
63259: PPUSH
63260: CALL_OW 298
63264: ST_TO_ADDR
// if tmp < distance then
63265: LD_VAR 0 9
63269: PUSH
63270: LD_VAR 0 10
63274: LESS
63275: IFFALSE 63297
// begin result := i ;
63277: LD_ADDR_VAR 0 5
63281: PUSH
63282: LD_VAR 0 6
63286: ST_TO_ADDR
// distance := tmp ;
63287: LD_ADDR_VAR 0 10
63291: PUSH
63292: LD_VAR 0 9
63296: ST_TO_ADDR
// end ; end ;
63297: GO 63155
63299: POP
63300: POP
// end ;
63301: LD_VAR 0 5
63305: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63306: LD_INT 0
63308: PPUSH
63309: PPUSH
// if not driver or not IsInUnit ( driver ) then
63310: LD_VAR 0 1
63314: NOT
63315: PUSH
63316: LD_VAR 0 1
63320: PPUSH
63321: CALL_OW 310
63325: NOT
63326: OR
63327: IFFALSE 63331
// exit ;
63329: GO 63421
// vehicle := IsInUnit ( driver ) ;
63331: LD_ADDR_VAR 0 3
63335: PUSH
63336: LD_VAR 0 1
63340: PPUSH
63341: CALL_OW 310
63345: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63346: LD_VAR 0 1
63350: PPUSH
63351: LD_STRING \
63353: PUSH
63354: LD_INT 0
63356: PUSH
63357: LD_INT 0
63359: PUSH
63360: LD_INT 0
63362: PUSH
63363: LD_INT 0
63365: PUSH
63366: LD_INT 0
63368: PUSH
63369: LD_INT 0
63371: PUSH
63372: EMPTY
63373: LIST
63374: LIST
63375: LIST
63376: LIST
63377: LIST
63378: LIST
63379: LIST
63380: PUSH
63381: LD_STRING E
63383: PUSH
63384: LD_INT 0
63386: PUSH
63387: LD_INT 0
63389: PUSH
63390: LD_VAR 0 3
63394: PUSH
63395: LD_INT 0
63397: PUSH
63398: LD_INT 0
63400: PUSH
63401: LD_INT 0
63403: PUSH
63404: EMPTY
63405: LIST
63406: LIST
63407: LIST
63408: LIST
63409: LIST
63410: LIST
63411: LIST
63412: PUSH
63413: EMPTY
63414: LIST
63415: LIST
63416: PPUSH
63417: CALL_OW 446
// end ;
63421: LD_VAR 0 2
63425: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
63426: LD_INT 0
63428: PPUSH
63429: PPUSH
// if not driver or not IsInUnit ( driver ) then
63430: LD_VAR 0 1
63434: NOT
63435: PUSH
63436: LD_VAR 0 1
63440: PPUSH
63441: CALL_OW 310
63445: NOT
63446: OR
63447: IFFALSE 63451
// exit ;
63449: GO 63541
// vehicle := IsInUnit ( driver ) ;
63451: LD_ADDR_VAR 0 3
63455: PUSH
63456: LD_VAR 0 1
63460: PPUSH
63461: CALL_OW 310
63465: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
63466: LD_VAR 0 1
63470: PPUSH
63471: LD_STRING \
63473: PUSH
63474: LD_INT 0
63476: PUSH
63477: LD_INT 0
63479: PUSH
63480: LD_INT 0
63482: PUSH
63483: LD_INT 0
63485: PUSH
63486: LD_INT 0
63488: PUSH
63489: LD_INT 0
63491: PUSH
63492: EMPTY
63493: LIST
63494: LIST
63495: LIST
63496: LIST
63497: LIST
63498: LIST
63499: LIST
63500: PUSH
63501: LD_STRING E
63503: PUSH
63504: LD_INT 0
63506: PUSH
63507: LD_INT 0
63509: PUSH
63510: LD_VAR 0 3
63514: PUSH
63515: LD_INT 0
63517: PUSH
63518: LD_INT 0
63520: PUSH
63521: LD_INT 0
63523: PUSH
63524: EMPTY
63525: LIST
63526: LIST
63527: LIST
63528: LIST
63529: LIST
63530: LIST
63531: LIST
63532: PUSH
63533: EMPTY
63534: LIST
63535: LIST
63536: PPUSH
63537: CALL_OW 447
// end ;
63541: LD_VAR 0 2
63545: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
63546: LD_INT 0
63548: PPUSH
63549: PPUSH
63550: PPUSH
// tmp := [ ] ;
63551: LD_ADDR_VAR 0 5
63555: PUSH
63556: EMPTY
63557: ST_TO_ADDR
// for i in units do
63558: LD_ADDR_VAR 0 4
63562: PUSH
63563: LD_VAR 0 1
63567: PUSH
63568: FOR_IN
63569: IFFALSE 63607
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
63571: LD_ADDR_VAR 0 5
63575: PUSH
63576: LD_VAR 0 5
63580: PPUSH
63581: LD_VAR 0 5
63585: PUSH
63586: LD_INT 1
63588: PLUS
63589: PPUSH
63590: LD_VAR 0 4
63594: PPUSH
63595: CALL_OW 256
63599: PPUSH
63600: CALL_OW 2
63604: ST_TO_ADDR
63605: GO 63568
63607: POP
63608: POP
// if not tmp then
63609: LD_VAR 0 5
63613: NOT
63614: IFFALSE 63618
// exit ;
63616: GO 63666
// if asc then
63618: LD_VAR 0 2
63622: IFFALSE 63646
// result := SortListByListAsc ( units , tmp ) else
63624: LD_ADDR_VAR 0 3
63628: PUSH
63629: LD_VAR 0 1
63633: PPUSH
63634: LD_VAR 0 5
63638: PPUSH
63639: CALL_OW 76
63643: ST_TO_ADDR
63644: GO 63666
// result := SortListByListDesc ( units , tmp ) ;
63646: LD_ADDR_VAR 0 3
63650: PUSH
63651: LD_VAR 0 1
63655: PPUSH
63656: LD_VAR 0 5
63660: PPUSH
63661: CALL_OW 77
63665: ST_TO_ADDR
// end ;
63666: LD_VAR 0 3
63670: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
63671: LD_INT 0
63673: PPUSH
63674: PPUSH
// task := GetTaskList ( mech ) ;
63675: LD_ADDR_VAR 0 4
63679: PUSH
63680: LD_VAR 0 1
63684: PPUSH
63685: CALL_OW 437
63689: ST_TO_ADDR
// if not task then
63690: LD_VAR 0 4
63694: NOT
63695: IFFALSE 63699
// exit ;
63697: GO 63741
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
63699: LD_ADDR_VAR 0 3
63703: PUSH
63704: LD_VAR 0 4
63708: PUSH
63709: LD_INT 1
63711: ARRAY
63712: PUSH
63713: LD_INT 1
63715: ARRAY
63716: PUSH
63717: LD_STRING r
63719: EQUAL
63720: PUSH
63721: LD_VAR 0 4
63725: PUSH
63726: LD_INT 1
63728: ARRAY
63729: PUSH
63730: LD_INT 4
63732: ARRAY
63733: PUSH
63734: LD_VAR 0 2
63738: EQUAL
63739: AND
63740: ST_TO_ADDR
// end ;
63741: LD_VAR 0 3
63745: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
63746: LD_INT 0
63748: PPUSH
// SetDir ( unit , d ) ;
63749: LD_VAR 0 1
63753: PPUSH
63754: LD_VAR 0 4
63758: PPUSH
63759: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
63763: LD_VAR 0 1
63767: PPUSH
63768: LD_VAR 0 2
63772: PPUSH
63773: LD_VAR 0 3
63777: PPUSH
63778: LD_VAR 0 5
63782: PPUSH
63783: CALL_OW 48
// end ;
63787: LD_VAR 0 6
63791: RET
// export function ToNaturalNumber ( number ) ; begin
63792: LD_INT 0
63794: PPUSH
// result := number div 1 ;
63795: LD_ADDR_VAR 0 2
63799: PUSH
63800: LD_VAR 0 1
63804: PUSH
63805: LD_INT 1
63807: DIV
63808: ST_TO_ADDR
// if number < 0 then
63809: LD_VAR 0 1
63813: PUSH
63814: LD_INT 0
63816: LESS
63817: IFFALSE 63827
// result := 0 ;
63819: LD_ADDR_VAR 0 2
63823: PUSH
63824: LD_INT 0
63826: ST_TO_ADDR
// end ;
63827: LD_VAR 0 2
63831: RET
// export function SortByClass ( units , class ) ; var un ; begin
63832: LD_INT 0
63834: PPUSH
63835: PPUSH
// if not units or not class then
63836: LD_VAR 0 1
63840: NOT
63841: PUSH
63842: LD_VAR 0 2
63846: NOT
63847: OR
63848: IFFALSE 63852
// exit ;
63850: GO 63947
// result := [ ] ;
63852: LD_ADDR_VAR 0 3
63856: PUSH
63857: EMPTY
63858: ST_TO_ADDR
// for un in units do
63859: LD_ADDR_VAR 0 4
63863: PUSH
63864: LD_VAR 0 1
63868: PUSH
63869: FOR_IN
63870: IFFALSE 63945
// if GetClass ( un ) = class then
63872: LD_VAR 0 4
63876: PPUSH
63877: CALL_OW 257
63881: PUSH
63882: LD_VAR 0 2
63886: EQUAL
63887: IFFALSE 63914
// result := Insert ( result , 1 , un ) else
63889: LD_ADDR_VAR 0 3
63893: PUSH
63894: LD_VAR 0 3
63898: PPUSH
63899: LD_INT 1
63901: PPUSH
63902: LD_VAR 0 4
63906: PPUSH
63907: CALL_OW 2
63911: ST_TO_ADDR
63912: GO 63943
// result := Replace ( result , result + 1 , un ) ;
63914: LD_ADDR_VAR 0 3
63918: PUSH
63919: LD_VAR 0 3
63923: PPUSH
63924: LD_VAR 0 3
63928: PUSH
63929: LD_INT 1
63931: PLUS
63932: PPUSH
63933: LD_VAR 0 4
63937: PPUSH
63938: CALL_OW 1
63942: ST_TO_ADDR
63943: GO 63869
63945: POP
63946: POP
// end ;
63947: LD_VAR 0 3
63951: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
63952: LD_INT 0
63954: PPUSH
63955: PPUSH
63956: PPUSH
63957: PPUSH
63958: PPUSH
63959: PPUSH
63960: PPUSH
// result := [ ] ;
63961: LD_ADDR_VAR 0 4
63965: PUSH
63966: EMPTY
63967: ST_TO_ADDR
// if x - r < 0 then
63968: LD_VAR 0 1
63972: PUSH
63973: LD_VAR 0 3
63977: MINUS
63978: PUSH
63979: LD_INT 0
63981: LESS
63982: IFFALSE 63994
// min_x := 0 else
63984: LD_ADDR_VAR 0 8
63988: PUSH
63989: LD_INT 0
63991: ST_TO_ADDR
63992: GO 64010
// min_x := x - r ;
63994: LD_ADDR_VAR 0 8
63998: PUSH
63999: LD_VAR 0 1
64003: PUSH
64004: LD_VAR 0 3
64008: MINUS
64009: ST_TO_ADDR
// if y - r < 0 then
64010: LD_VAR 0 2
64014: PUSH
64015: LD_VAR 0 3
64019: MINUS
64020: PUSH
64021: LD_INT 0
64023: LESS
64024: IFFALSE 64036
// min_y := 0 else
64026: LD_ADDR_VAR 0 7
64030: PUSH
64031: LD_INT 0
64033: ST_TO_ADDR
64034: GO 64052
// min_y := y - r ;
64036: LD_ADDR_VAR 0 7
64040: PUSH
64041: LD_VAR 0 2
64045: PUSH
64046: LD_VAR 0 3
64050: MINUS
64051: ST_TO_ADDR
// max_x := x + r ;
64052: LD_ADDR_VAR 0 9
64056: PUSH
64057: LD_VAR 0 1
64061: PUSH
64062: LD_VAR 0 3
64066: PLUS
64067: ST_TO_ADDR
// max_y := y + r ;
64068: LD_ADDR_VAR 0 10
64072: PUSH
64073: LD_VAR 0 2
64077: PUSH
64078: LD_VAR 0 3
64082: PLUS
64083: ST_TO_ADDR
// for _x = min_x to max_x do
64084: LD_ADDR_VAR 0 5
64088: PUSH
64089: DOUBLE
64090: LD_VAR 0 8
64094: DEC
64095: ST_TO_ADDR
64096: LD_VAR 0 9
64100: PUSH
64101: FOR_TO
64102: IFFALSE 64203
// for _y = min_y to max_y do
64104: LD_ADDR_VAR 0 6
64108: PUSH
64109: DOUBLE
64110: LD_VAR 0 7
64114: DEC
64115: ST_TO_ADDR
64116: LD_VAR 0 10
64120: PUSH
64121: FOR_TO
64122: IFFALSE 64199
// begin if not ValidHex ( _x , _y ) then
64124: LD_VAR 0 5
64128: PPUSH
64129: LD_VAR 0 6
64133: PPUSH
64134: CALL_OW 488
64138: NOT
64139: IFFALSE 64143
// continue ;
64141: GO 64121
// if GetResourceTypeXY ( _x , _y ) then
64143: LD_VAR 0 5
64147: PPUSH
64148: LD_VAR 0 6
64152: PPUSH
64153: CALL_OW 283
64157: IFFALSE 64197
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
64159: LD_ADDR_VAR 0 4
64163: PUSH
64164: LD_VAR 0 4
64168: PPUSH
64169: LD_VAR 0 4
64173: PUSH
64174: LD_INT 1
64176: PLUS
64177: PPUSH
64178: LD_VAR 0 5
64182: PUSH
64183: LD_VAR 0 6
64187: PUSH
64188: EMPTY
64189: LIST
64190: LIST
64191: PPUSH
64192: CALL_OW 1
64196: ST_TO_ADDR
// end ;
64197: GO 64121
64199: POP
64200: POP
64201: GO 64101
64203: POP
64204: POP
// end ;
64205: LD_VAR 0 4
64209: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
64210: LD_INT 0
64212: PPUSH
64213: PPUSH
64214: PPUSH
64215: PPUSH
64216: PPUSH
64217: PPUSH
64218: PPUSH
64219: PPUSH
// if not units then
64220: LD_VAR 0 1
64224: NOT
64225: IFFALSE 64229
// exit ;
64227: GO 64753
// result := UnitFilter ( units , [ f_ok ] ) ;
64229: LD_ADDR_VAR 0 3
64233: PUSH
64234: LD_VAR 0 1
64238: PPUSH
64239: LD_INT 50
64241: PUSH
64242: EMPTY
64243: LIST
64244: PPUSH
64245: CALL_OW 72
64249: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
64250: LD_ADDR_VAR 0 8
64254: PUSH
64255: LD_VAR 0 1
64259: PUSH
64260: LD_INT 1
64262: ARRAY
64263: PPUSH
64264: CALL_OW 255
64268: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
64269: LD_ADDR_VAR 0 10
64273: PUSH
64274: LD_INT 29
64276: PUSH
64277: LD_INT 91
64279: PUSH
64280: LD_INT 49
64282: PUSH
64283: EMPTY
64284: LIST
64285: LIST
64286: LIST
64287: ST_TO_ADDR
// if not result then
64288: LD_VAR 0 3
64292: NOT
64293: IFFALSE 64297
// exit ;
64295: GO 64753
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
64297: LD_ADDR_VAR 0 5
64301: PUSH
64302: LD_INT 81
64304: PUSH
64305: LD_VAR 0 8
64309: PUSH
64310: EMPTY
64311: LIST
64312: LIST
64313: PPUSH
64314: CALL_OW 69
64318: ST_TO_ADDR
// for i in result do
64319: LD_ADDR_VAR 0 4
64323: PUSH
64324: LD_VAR 0 3
64328: PUSH
64329: FOR_IN
64330: IFFALSE 64751
// begin tag := GetTag ( i ) + 1 ;
64332: LD_ADDR_VAR 0 9
64336: PUSH
64337: LD_VAR 0 4
64341: PPUSH
64342: CALL_OW 110
64346: PUSH
64347: LD_INT 1
64349: PLUS
64350: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
64351: LD_ADDR_VAR 0 7
64355: PUSH
64356: LD_VAR 0 4
64360: PPUSH
64361: CALL_OW 250
64365: PPUSH
64366: LD_VAR 0 4
64370: PPUSH
64371: CALL_OW 251
64375: PPUSH
64376: LD_INT 6
64378: PPUSH
64379: CALL 63952 0 3
64383: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
64384: LD_VAR 0 4
64388: PPUSH
64389: CALL_OW 247
64393: PUSH
64394: LD_INT 2
64396: EQUAL
64397: PUSH
64398: LD_VAR 0 7
64402: AND
64403: PUSH
64404: LD_VAR 0 4
64408: PPUSH
64409: CALL_OW 264
64413: PUSH
64414: LD_VAR 0 10
64418: IN
64419: NOT
64420: AND
64421: IFFALSE 64460
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
64423: LD_VAR 0 4
64427: PPUSH
64428: LD_VAR 0 7
64432: PUSH
64433: LD_INT 1
64435: ARRAY
64436: PUSH
64437: LD_INT 1
64439: ARRAY
64440: PPUSH
64441: LD_VAR 0 7
64445: PUSH
64446: LD_INT 1
64448: ARRAY
64449: PUSH
64450: LD_INT 2
64452: ARRAY
64453: PPUSH
64454: CALL_OW 116
64458: GO 64749
// if path > tag then
64460: LD_VAR 0 2
64464: PUSH
64465: LD_VAR 0 9
64469: GREATER
64470: IFFALSE 64678
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
64472: LD_ADDR_VAR 0 6
64476: PUSH
64477: LD_VAR 0 5
64481: PPUSH
64482: LD_INT 91
64484: PUSH
64485: LD_VAR 0 4
64489: PUSH
64490: LD_INT 8
64492: PUSH
64493: EMPTY
64494: LIST
64495: LIST
64496: LIST
64497: PPUSH
64498: CALL_OW 72
64502: ST_TO_ADDR
// if nearEnemy then
64503: LD_VAR 0 6
64507: IFFALSE 64576
// begin if GetWeapon ( i ) = ru_time_lapser then
64509: LD_VAR 0 4
64513: PPUSH
64514: CALL_OW 264
64518: PUSH
64519: LD_INT 49
64521: EQUAL
64522: IFFALSE 64550
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
64524: LD_VAR 0 4
64528: PPUSH
64529: LD_VAR 0 6
64533: PPUSH
64534: LD_VAR 0 4
64538: PPUSH
64539: CALL_OW 74
64543: PPUSH
64544: CALL_OW 112
64548: GO 64574
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
64550: LD_VAR 0 4
64554: PPUSH
64555: LD_VAR 0 6
64559: PPUSH
64560: LD_VAR 0 4
64564: PPUSH
64565: CALL_OW 74
64569: PPUSH
64570: CALL 65678 0 2
// end else
64574: GO 64676
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
64576: LD_VAR 0 4
64580: PPUSH
64581: LD_VAR 0 2
64585: PUSH
64586: LD_VAR 0 9
64590: ARRAY
64591: PUSH
64592: LD_INT 1
64594: ARRAY
64595: PPUSH
64596: LD_VAR 0 2
64600: PUSH
64601: LD_VAR 0 9
64605: ARRAY
64606: PUSH
64607: LD_INT 2
64609: ARRAY
64610: PPUSH
64611: CALL_OW 297
64615: PUSH
64616: LD_INT 6
64618: GREATER
64619: IFFALSE 64662
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
64621: LD_VAR 0 4
64625: PPUSH
64626: LD_VAR 0 2
64630: PUSH
64631: LD_VAR 0 9
64635: ARRAY
64636: PUSH
64637: LD_INT 1
64639: ARRAY
64640: PPUSH
64641: LD_VAR 0 2
64645: PUSH
64646: LD_VAR 0 9
64650: ARRAY
64651: PUSH
64652: LD_INT 2
64654: ARRAY
64655: PPUSH
64656: CALL_OW 114
64660: GO 64676
// SetTag ( i , tag ) ;
64662: LD_VAR 0 4
64666: PPUSH
64667: LD_VAR 0 9
64671: PPUSH
64672: CALL_OW 109
// end else
64676: GO 64749
// if enemy then
64678: LD_VAR 0 5
64682: IFFALSE 64749
// begin if GetWeapon ( i ) = ru_time_lapser then
64684: LD_VAR 0 4
64688: PPUSH
64689: CALL_OW 264
64693: PUSH
64694: LD_INT 49
64696: EQUAL
64697: IFFALSE 64725
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
64699: LD_VAR 0 4
64703: PPUSH
64704: LD_VAR 0 5
64708: PPUSH
64709: LD_VAR 0 4
64713: PPUSH
64714: CALL_OW 74
64718: PPUSH
64719: CALL_OW 112
64723: GO 64749
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
64725: LD_VAR 0 4
64729: PPUSH
64730: LD_VAR 0 5
64734: PPUSH
64735: LD_VAR 0 4
64739: PPUSH
64740: CALL_OW 74
64744: PPUSH
64745: CALL 65678 0 2
// end ; end ;
64749: GO 64329
64751: POP
64752: POP
// end ;
64753: LD_VAR 0 3
64757: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
64758: LD_INT 0
64760: PPUSH
64761: PPUSH
64762: PPUSH
// if not unit or IsInUnit ( unit ) then
64763: LD_VAR 0 1
64767: NOT
64768: PUSH
64769: LD_VAR 0 1
64773: PPUSH
64774: CALL_OW 310
64778: OR
64779: IFFALSE 64783
// exit ;
64781: GO 64874
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
64783: LD_ADDR_VAR 0 4
64787: PUSH
64788: LD_VAR 0 1
64792: PPUSH
64793: CALL_OW 250
64797: PPUSH
64798: LD_VAR 0 2
64802: PPUSH
64803: LD_INT 1
64805: PPUSH
64806: CALL_OW 272
64810: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
64811: LD_ADDR_VAR 0 5
64815: PUSH
64816: LD_VAR 0 1
64820: PPUSH
64821: CALL_OW 251
64825: PPUSH
64826: LD_VAR 0 2
64830: PPUSH
64831: LD_INT 1
64833: PPUSH
64834: CALL_OW 273
64838: ST_TO_ADDR
// if ValidHex ( x , y ) then
64839: LD_VAR 0 4
64843: PPUSH
64844: LD_VAR 0 5
64848: PPUSH
64849: CALL_OW 488
64853: IFFALSE 64874
// ComTurnXY ( unit , x , y ) ;
64855: LD_VAR 0 1
64859: PPUSH
64860: LD_VAR 0 4
64864: PPUSH
64865: LD_VAR 0 5
64869: PPUSH
64870: CALL_OW 118
// end ;
64874: LD_VAR 0 3
64878: RET
// export function SeeUnits ( side , units ) ; var i ; begin
64879: LD_INT 0
64881: PPUSH
64882: PPUSH
// result := false ;
64883: LD_ADDR_VAR 0 3
64887: PUSH
64888: LD_INT 0
64890: ST_TO_ADDR
// if not units then
64891: LD_VAR 0 2
64895: NOT
64896: IFFALSE 64900
// exit ;
64898: GO 64945
// for i in units do
64900: LD_ADDR_VAR 0 4
64904: PUSH
64905: LD_VAR 0 2
64909: PUSH
64910: FOR_IN
64911: IFFALSE 64943
// if See ( side , i ) then
64913: LD_VAR 0 1
64917: PPUSH
64918: LD_VAR 0 4
64922: PPUSH
64923: CALL_OW 292
64927: IFFALSE 64941
// begin result := true ;
64929: LD_ADDR_VAR 0 3
64933: PUSH
64934: LD_INT 1
64936: ST_TO_ADDR
// exit ;
64937: POP
64938: POP
64939: GO 64945
// end ;
64941: GO 64910
64943: POP
64944: POP
// end ;
64945: LD_VAR 0 3
64949: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
64950: LD_INT 0
64952: PPUSH
64953: PPUSH
64954: PPUSH
64955: PPUSH
// if not unit or not points then
64956: LD_VAR 0 1
64960: NOT
64961: PUSH
64962: LD_VAR 0 2
64966: NOT
64967: OR
64968: IFFALSE 64972
// exit ;
64970: GO 65062
// dist := 99999 ;
64972: LD_ADDR_VAR 0 5
64976: PUSH
64977: LD_INT 99999
64979: ST_TO_ADDR
// for i in points do
64980: LD_ADDR_VAR 0 4
64984: PUSH
64985: LD_VAR 0 2
64989: PUSH
64990: FOR_IN
64991: IFFALSE 65060
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
64993: LD_ADDR_VAR 0 6
64997: PUSH
64998: LD_VAR 0 1
65002: PPUSH
65003: LD_VAR 0 4
65007: PUSH
65008: LD_INT 1
65010: ARRAY
65011: PPUSH
65012: LD_VAR 0 4
65016: PUSH
65017: LD_INT 2
65019: ARRAY
65020: PPUSH
65021: CALL_OW 297
65025: ST_TO_ADDR
// if tmpDist < dist then
65026: LD_VAR 0 6
65030: PUSH
65031: LD_VAR 0 5
65035: LESS
65036: IFFALSE 65058
// begin result := i ;
65038: LD_ADDR_VAR 0 3
65042: PUSH
65043: LD_VAR 0 4
65047: ST_TO_ADDR
// dist := tmpDist ;
65048: LD_ADDR_VAR 0 5
65052: PUSH
65053: LD_VAR 0 6
65057: ST_TO_ADDR
// end ; end ;
65058: GO 64990
65060: POP
65061: POP
// end ;
65062: LD_VAR 0 3
65066: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
65067: LD_INT 0
65069: PPUSH
// uc_side := side ;
65070: LD_ADDR_OWVAR 20
65074: PUSH
65075: LD_VAR 0 1
65079: ST_TO_ADDR
// uc_nation := 3 ;
65080: LD_ADDR_OWVAR 21
65084: PUSH
65085: LD_INT 3
65087: ST_TO_ADDR
// vc_chassis := 25 ;
65088: LD_ADDR_OWVAR 37
65092: PUSH
65093: LD_INT 25
65095: ST_TO_ADDR
// vc_engine := engine_siberite ;
65096: LD_ADDR_OWVAR 39
65100: PUSH
65101: LD_INT 3
65103: ST_TO_ADDR
// vc_control := control_computer ;
65104: LD_ADDR_OWVAR 38
65108: PUSH
65109: LD_INT 3
65111: ST_TO_ADDR
// vc_weapon := 59 ;
65112: LD_ADDR_OWVAR 40
65116: PUSH
65117: LD_INT 59
65119: ST_TO_ADDR
// result := CreateVehicle ;
65120: LD_ADDR_VAR 0 5
65124: PUSH
65125: CALL_OW 45
65129: ST_TO_ADDR
// SetDir ( result , d ) ;
65130: LD_VAR 0 5
65134: PPUSH
65135: LD_VAR 0 4
65139: PPUSH
65140: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
65144: LD_VAR 0 5
65148: PPUSH
65149: LD_VAR 0 2
65153: PPUSH
65154: LD_VAR 0 3
65158: PPUSH
65159: LD_INT 0
65161: PPUSH
65162: CALL_OW 48
// end ;
65166: LD_VAR 0 5
65170: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
65171: LD_INT 0
65173: PPUSH
65174: PPUSH
65175: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
65176: LD_ADDR_VAR 0 2
65180: PUSH
65181: LD_INT 0
65183: PUSH
65184: LD_INT 0
65186: PUSH
65187: LD_INT 0
65189: PUSH
65190: LD_INT 0
65192: PUSH
65193: EMPTY
65194: LIST
65195: LIST
65196: LIST
65197: LIST
65198: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
65199: LD_VAR 0 1
65203: NOT
65204: PUSH
65205: LD_VAR 0 1
65209: PPUSH
65210: CALL_OW 264
65214: PUSH
65215: LD_INT 12
65217: PUSH
65218: LD_INT 51
65220: PUSH
65221: LD_INT 32
65223: PUSH
65224: LD_INT 89
65226: PUSH
65227: EMPTY
65228: LIST
65229: LIST
65230: LIST
65231: LIST
65232: IN
65233: NOT
65234: OR
65235: IFFALSE 65239
// exit ;
65237: GO 65337
// for i := 1 to 3 do
65239: LD_ADDR_VAR 0 3
65243: PUSH
65244: DOUBLE
65245: LD_INT 1
65247: DEC
65248: ST_TO_ADDR
65249: LD_INT 3
65251: PUSH
65252: FOR_TO
65253: IFFALSE 65335
// begin tmp := GetCargo ( cargo , i ) ;
65255: LD_ADDR_VAR 0 4
65259: PUSH
65260: LD_VAR 0 1
65264: PPUSH
65265: LD_VAR 0 3
65269: PPUSH
65270: CALL_OW 289
65274: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
65275: LD_ADDR_VAR 0 2
65279: PUSH
65280: LD_VAR 0 2
65284: PPUSH
65285: LD_VAR 0 3
65289: PPUSH
65290: LD_VAR 0 4
65294: PPUSH
65295: CALL_OW 1
65299: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
65300: LD_ADDR_VAR 0 2
65304: PUSH
65305: LD_VAR 0 2
65309: PPUSH
65310: LD_INT 4
65312: PPUSH
65313: LD_VAR 0 2
65317: PUSH
65318: LD_INT 4
65320: ARRAY
65321: PUSH
65322: LD_VAR 0 4
65326: PLUS
65327: PPUSH
65328: CALL_OW 1
65332: ST_TO_ADDR
// end ;
65333: GO 65252
65335: POP
65336: POP
// end ;
65337: LD_VAR 0 2
65341: RET
// export function Length ( array ) ; begin
65342: LD_INT 0
65344: PPUSH
// result := array + 0 ;
65345: LD_ADDR_VAR 0 2
65349: PUSH
65350: LD_VAR 0 1
65354: PUSH
65355: LD_INT 0
65357: PLUS
65358: ST_TO_ADDR
// end ;
65359: LD_VAR 0 2
65363: RET
// export function PrepareArray ( array ) ; begin
65364: LD_INT 0
65366: PPUSH
// result := array diff 0 ;
65367: LD_ADDR_VAR 0 2
65371: PUSH
65372: LD_VAR 0 1
65376: PUSH
65377: LD_INT 0
65379: DIFF
65380: ST_TO_ADDR
// if not result [ 1 ] then
65381: LD_VAR 0 2
65385: PUSH
65386: LD_INT 1
65388: ARRAY
65389: NOT
65390: IFFALSE 65410
// result := Delete ( result , 1 ) ;
65392: LD_ADDR_VAR 0 2
65396: PUSH
65397: LD_VAR 0 2
65401: PPUSH
65402: LD_INT 1
65404: PPUSH
65405: CALL_OW 3
65409: ST_TO_ADDR
// end ;
65410: LD_VAR 0 2
65414: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
65415: LD_INT 0
65417: PPUSH
65418: PPUSH
65419: PPUSH
65420: PPUSH
// sibRocketRange := 25 ;
65421: LD_ADDR_VAR 0 6
65425: PUSH
65426: LD_INT 25
65428: ST_TO_ADDR
// result := false ;
65429: LD_ADDR_VAR 0 4
65433: PUSH
65434: LD_INT 0
65436: ST_TO_ADDR
// for i := 0 to 5 do
65437: LD_ADDR_VAR 0 5
65441: PUSH
65442: DOUBLE
65443: LD_INT 0
65445: DEC
65446: ST_TO_ADDR
65447: LD_INT 5
65449: PUSH
65450: FOR_TO
65451: IFFALSE 65518
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
65453: LD_VAR 0 1
65457: PPUSH
65458: LD_VAR 0 5
65462: PPUSH
65463: LD_VAR 0 6
65467: PPUSH
65468: CALL_OW 272
65472: PPUSH
65473: LD_VAR 0 2
65477: PPUSH
65478: LD_VAR 0 5
65482: PPUSH
65483: LD_VAR 0 6
65487: PPUSH
65488: CALL_OW 273
65492: PPUSH
65493: LD_VAR 0 3
65497: PPUSH
65498: CALL_OW 309
65502: IFFALSE 65516
// begin result := true ;
65504: LD_ADDR_VAR 0 4
65508: PUSH
65509: LD_INT 1
65511: ST_TO_ADDR
// exit ;
65512: POP
65513: POP
65514: GO 65520
// end ;
65516: GO 65450
65518: POP
65519: POP
// end ;
65520: LD_VAR 0 4
65524: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
65525: LD_INT 0
65527: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
65528: LD_VAR 0 1
65532: PPUSH
65533: LD_VAR 0 2
65537: PPUSH
65538: LD_INT 0
65540: PPUSH
65541: LD_INT 0
65543: PPUSH
65544: LD_INT 1
65546: PPUSH
65547: LD_INT 0
65549: PPUSH
65550: CALL_OW 587
// end ;
65554: LD_VAR 0 3
65558: RET
// export function CenterOnNow ( unit ) ; begin
65559: LD_INT 0
65561: PPUSH
// result := IsInUnit ( unit ) ;
65562: LD_ADDR_VAR 0 2
65566: PUSH
65567: LD_VAR 0 1
65571: PPUSH
65572: CALL_OW 310
65576: ST_TO_ADDR
// if not result then
65577: LD_VAR 0 2
65581: NOT
65582: IFFALSE 65594
// result := unit ;
65584: LD_ADDR_VAR 0 2
65588: PUSH
65589: LD_VAR 0 1
65593: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
65594: LD_VAR 0 1
65598: PPUSH
65599: CALL_OW 87
// end ;
65603: LD_VAR 0 2
65607: RET
// export function ComMoveHex ( unit , hex ) ; begin
65608: LD_INT 0
65610: PPUSH
// if not hex then
65611: LD_VAR 0 2
65615: NOT
65616: IFFALSE 65620
// exit ;
65618: GO 65673
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
65620: LD_VAR 0 2
65624: PUSH
65625: LD_INT 1
65627: ARRAY
65628: PPUSH
65629: LD_VAR 0 2
65633: PUSH
65634: LD_INT 2
65636: ARRAY
65637: PPUSH
65638: CALL_OW 428
65642: IFFALSE 65646
// exit ;
65644: GO 65673
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
65646: LD_VAR 0 1
65650: PPUSH
65651: LD_VAR 0 2
65655: PUSH
65656: LD_INT 1
65658: ARRAY
65659: PPUSH
65660: LD_VAR 0 2
65664: PUSH
65665: LD_INT 2
65667: ARRAY
65668: PPUSH
65669: CALL_OW 111
// end ;
65673: LD_VAR 0 3
65677: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
65678: LD_INT 0
65680: PPUSH
65681: PPUSH
65682: PPUSH
// if not unit or not enemy then
65683: LD_VAR 0 1
65687: NOT
65688: PUSH
65689: LD_VAR 0 2
65693: NOT
65694: OR
65695: IFFALSE 65699
// exit ;
65697: GO 65823
// x := GetX ( enemy ) ;
65699: LD_ADDR_VAR 0 4
65703: PUSH
65704: LD_VAR 0 2
65708: PPUSH
65709: CALL_OW 250
65713: ST_TO_ADDR
// y := GetY ( enemy ) ;
65714: LD_ADDR_VAR 0 5
65718: PUSH
65719: LD_VAR 0 2
65723: PPUSH
65724: CALL_OW 251
65728: ST_TO_ADDR
// if ValidHex ( x , y ) then
65729: LD_VAR 0 4
65733: PPUSH
65734: LD_VAR 0 5
65738: PPUSH
65739: CALL_OW 488
65743: IFFALSE 65823
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
65745: LD_VAR 0 2
65749: PPUSH
65750: CALL_OW 247
65754: PUSH
65755: LD_INT 3
65757: PUSH
65758: LD_INT 2
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: IN
65765: PUSH
65766: LD_VAR 0 1
65770: PPUSH
65771: CALL_OW 255
65775: PPUSH
65776: LD_VAR 0 2
65780: PPUSH
65781: CALL_OW 292
65785: AND
65786: IFFALSE 65804
// ComAttackUnit ( unit , enemy ) else
65788: LD_VAR 0 1
65792: PPUSH
65793: LD_VAR 0 2
65797: PPUSH
65798: CALL_OW 115
65802: GO 65823
// ComAgressiveMove ( unit , x , y ) ;
65804: LD_VAR 0 1
65808: PPUSH
65809: LD_VAR 0 4
65813: PPUSH
65814: LD_VAR 0 5
65818: PPUSH
65819: CALL_OW 114
// end ; end_of_file
65823: LD_VAR 0 3
65827: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
65828: LD_VAR 0 1
65832: PUSH
65833: LD_INT 200
65835: DOUBLE
65836: GREATEREQUAL
65837: IFFALSE 65845
65839: LD_INT 299
65841: DOUBLE
65842: LESSEQUAL
65843: IFTRUE 65847
65845: GO 65879
65847: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
65848: LD_VAR 0 1
65852: PPUSH
65853: LD_VAR 0 2
65857: PPUSH
65858: LD_VAR 0 3
65862: PPUSH
65863: LD_VAR 0 4
65867: PPUSH
65868: LD_VAR 0 5
65872: PPUSH
65873: CALL 3750 0 5
65877: GO 65956
65879: LD_INT 300
65881: DOUBLE
65882: GREATEREQUAL
65883: IFFALSE 65891
65885: LD_INT 399
65887: DOUBLE
65888: LESSEQUAL
65889: IFTRUE 65893
65891: GO 65955
65893: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
65894: LD_VAR 0 1
65898: PPUSH
65899: LD_VAR 0 2
65903: PPUSH
65904: LD_VAR 0 3
65908: PPUSH
65909: LD_VAR 0 4
65913: PPUSH
65914: LD_VAR 0 5
65918: PPUSH
65919: LD_VAR 0 6
65923: PPUSH
65924: LD_VAR 0 7
65928: PPUSH
65929: LD_VAR 0 8
65933: PPUSH
65934: LD_VAR 0 9
65938: PPUSH
65939: LD_VAR 0 10
65943: PPUSH
65944: LD_VAR 0 11
65948: PPUSH
65949: CALL 20605 0 11
65953: GO 65956
65955: POP
// end ;
65956: PPOPN 11
65958: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
65959: LD_VAR 0 1
65963: PPUSH
65964: LD_VAR 0 2
65968: PPUSH
65969: LD_VAR 0 3
65973: PPUSH
65974: LD_VAR 0 4
65978: PPUSH
65979: LD_VAR 0 5
65983: PPUSH
65984: CALL 3486 0 5
// end ; end_of_file
65988: PPOPN 5
65990: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
65991: LD_VAR 0 1
65995: PPUSH
65996: LD_VAR 0 2
66000: PPUSH
66001: LD_VAR 0 3
66005: PPUSH
66006: LD_VAR 0 4
66010: PPUSH
66011: LD_VAR 0 5
66015: PPUSH
66016: LD_VAR 0 6
66020: PPUSH
66021: CALL 8257 0 6
// end ;
66025: PPOPN 6
66027: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
66028: LD_INT 0
66030: PPUSH
// begin if not units then
66031: LD_VAR 0 1
66035: NOT
66036: IFFALSE 66040
// exit ;
66038: GO 66040
// end ;
66040: PPOPN 7
66042: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
66043: CALL 8161 0 0
// end ;
66047: PPOPN 1
66049: END
