// starting begin ResetFog ;
   0: CALL_OW 335
// PrepareGame ;
   4: CALL 13 0 0
// PrepareUnits ;
   8: CALL 299 0 0
// end ;
  12: END
// export mechanics , time_to_destroy , players , sib_bomb , time , veh_amount ; export p1 , p2 , p3 , p4 , p5 ; function PrepareGame ; var debug , i ; begin
  13: LD_INT 0
  15: PPUSH
  16: PPUSH
  17: PPUSH
// debug := false ;
  18: LD_ADDR_VAR 0 2
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// if debug then
  26: LD_VAR 0 2
  30: IFFALSE 81
// begin mechanics := 5 ;
  32: LD_ADDR_EXP 1
  36: PUSH
  37: LD_INT 5
  39: ST_TO_ADDR
// time_to_destroy := 45 ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_INT 45
  47: ST_TO_ADDR
// players := 4 ;
  48: LD_ADDR_EXP 3
  52: PUSH
  53: LD_INT 4
  55: ST_TO_ADDR
// sib_bomb := true ;
  56: LD_ADDR_EXP 4
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// time := 3 3$00 ;
  64: LD_ADDR_EXP 5
  68: PUSH
  69: LD_INT 6300
  71: ST_TO_ADDR
// FogOff ( 1 ) ;
  72: LD_INT 1
  74: PPUSH
  75: CALL_OW 344
// end else
  79: GO 214
// begin time := 3 3$00 ;
  81: LD_ADDR_EXP 5
  85: PUSH
  86: LD_INT 6300
  88: ST_TO_ADDR
// players := 4 ;
  89: LD_ADDR_EXP 3
  93: PUSH
  94: LD_INT 4
  96: ST_TO_ADDR
// sib_bomb := true ;
  97: LD_ADDR_EXP 4
 101: PUSH
 102: LD_INT 1
 104: ST_TO_ADDR
// mechanics := 4 ;
 105: LD_ADDR_EXP 1
 109: PUSH
 110: LD_INT 4
 112: ST_TO_ADDR
// mechanics := [ 3 , 4 , 5 ] [ GetMultiplayerSetting ( 0 ) ] ;
 113: LD_ADDR_EXP 1
 117: PUSH
 118: LD_INT 3
 120: PUSH
 121: LD_INT 4
 123: PUSH
 124: LD_INT 5
 126: PUSH
 127: EMPTY
 128: LIST
 129: LIST
 130: LIST
 131: PUSH
 132: LD_INT 0
 134: PPUSH
 135: CALL_OW 426
 139: ARRAY
 140: ST_TO_ADDR
// players := [ 3 , 4 , 5 ] [ GetMultiplayerSetting ( 1 ) ] ;
 141: LD_ADDR_EXP 3
 145: PUSH
 146: LD_INT 3
 148: PUSH
 149: LD_INT 4
 151: PUSH
 152: LD_INT 5
 154: PUSH
 155: EMPTY
 156: LIST
 157: LIST
 158: LIST
 159: PUSH
 160: LD_INT 1
 162: PPUSH
 163: CALL_OW 426
 167: ARRAY
 168: ST_TO_ADDR
// time := [ 3 3$00 , 5 5$00 , 10 10$00 ] [ GetMultiplayerSetting ( 2 ) ] ;
 169: LD_ADDR_EXP 5
 173: PUSH
 174: LD_INT 6300
 176: PUSH
 177: LD_INT 10500
 179: PUSH
 180: LD_INT 21000
 182: PUSH
 183: EMPTY
 184: LIST
 185: LIST
 186: LIST
 187: PUSH
 188: LD_INT 2
 190: PPUSH
 191: CALL_OW 426
 195: ARRAY
 196: ST_TO_ADDR
// sib_bomb := GetMultiplayerSetting ( 3 ) - 1 ;
 197: LD_ADDR_EXP 4
 201: PUSH
 202: LD_INT 3
 204: PPUSH
 205: CALL_OW 426
 209: PUSH
 210: LD_INT 1
 212: MINUS
 213: ST_TO_ADDR
// end ; p1 := 0 ;
 214: LD_ADDR_EXP 7
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// p2 := 0 ;
 222: LD_ADDR_EXP 8
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// p3 := 0 ;
 230: LD_ADDR_EXP 9
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// p4 := 0 ;
 238: LD_ADDR_EXP 10
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// p5 := 0 ;
 246: LD_ADDR_EXP 11
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// veh_amount := 12 ;
 254: LD_ADDR_EXP 6
 258: PUSH
 259: LD_INT 12
 261: ST_TO_ADDR
// for i = 1 to 7 do
 262: LD_ADDR_VAR 0 3
 266: PUSH
 267: DOUBLE
 268: LD_INT 1
 270: DEC
 271: ST_TO_ADDR
 272: LD_INT 7
 274: PUSH
 275: FOR_TO
 276: IFFALSE 292
// ChangeSideFog ( i , 8 ) ;
 278: LD_VAR 0 3
 282: PPUSH
 283: LD_INT 8
 285: PPUSH
 286: CALL_OW 343
 290: GO 275
 292: POP
 293: POP
// end ; end_of_file
 294: LD_VAR 0 1
 298: RET
// export function PrepareUnits ; var i , side ; begin
 299: LD_INT 0
 301: PPUSH
 302: PPUSH
 303: PPUSH
// side := players ;
 304: LD_ADDR_VAR 0 3
 308: PUSH
 309: LD_EXP 3
 313: ST_TO_ADDR
// uc_nation := 1 ;
 314: LD_ADDR_OWVAR 21
 318: PUSH
 319: LD_INT 1
 321: ST_TO_ADDR
// for i = 1 to mechanics do
 322: LD_ADDR_VAR 0 2
 326: PUSH
 327: DOUBLE
 328: LD_INT 1
 330: DEC
 331: ST_TO_ADDR
 332: LD_EXP 1
 336: PUSH
 337: FOR_TO
 338: IFFALSE 402
// for side = 1 to players do
 340: LD_ADDR_VAR 0 3
 344: PUSH
 345: DOUBLE
 346: LD_INT 1
 348: DEC
 349: ST_TO_ADDR
 350: LD_EXP 3
 354: PUSH
 355: FOR_TO
 356: IFFALSE 398
// begin uc_side := side ;
 358: LD_ADDR_OWVAR 20
 362: PUSH
 363: LD_VAR 0 3
 367: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
 368: LD_INT 0
 370: PPUSH
 371: LD_INT 3
 373: PPUSH
 374: LD_INT 10
 376: PPUSH
 377: CALL_OW 380
// PlaceUnitArea ( CreateHuman , mech_area , false ) ;
 381: CALL_OW 44
 385: PPUSH
 386: LD_INT 6
 388: PPUSH
 389: LD_INT 0
 391: PPUSH
 392: CALL_OW 49
// end ;
 396: GO 355
 398: POP
 399: POP
 400: GO 337
 402: POP
 403: POP
// end ;
 404: LD_VAR 0 1
 408: RET
// function ToSpawn ( side ) ; begin
 409: LD_INT 0
 411: PPUSH
// uc_side := side ;
 412: LD_ADDR_OWVAR 20
 416: PUSH
 417: LD_VAR 0 1
 421: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
 422: LD_INT 0
 424: PPUSH
 425: LD_INT 3
 427: PPUSH
 428: LD_INT 10
 430: PPUSH
 431: CALL_OW 380
// PlaceUnitArea ( CreateHuman , mech_area , false ) ;
 435: CALL_OW 44
 439: PPUSH
 440: LD_INT 6
 442: PPUSH
 443: LD_INT 0
 445: PPUSH
 446: CALL_OW 49
// end ;
 450: LD_VAR 0 2
 454: RET
// every 0 0$13 trigger time do var i , filter ;
 455: LD_EXP 5
 459: IFFALSE 569
 461: GO 463
 463: DISABLE
 464: LD_INT 0
 466: PPUSH
 467: PPUSH
// begin enable ;
 468: ENABLE
// for i = 1 to players do
 469: LD_ADDR_VAR 0 1
 473: PUSH
 474: DOUBLE
 475: LD_INT 1
 477: DEC
 478: ST_TO_ADDR
 479: LD_EXP 3
 483: PUSH
 484: FOR_TO
 485: IFFALSE 567
// begin filter := FilterAllUnits ( [ [ [ f_side , i ] , [ f_class , 3 ] , [ f_type , unit_human ] ] ] ) ;
 487: LD_ADDR_VAR 0 2
 491: PUSH
 492: LD_INT 22
 494: PUSH
 495: LD_VAR 0 1
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: PUSH
 504: LD_INT 25
 506: PUSH
 507: LD_INT 3
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: PUSH
 514: LD_INT 21
 516: PUSH
 517: LD_INT 1
 519: PUSH
 520: EMPTY
 521: LIST
 522: LIST
 523: PUSH
 524: EMPTY
 525: LIST
 526: LIST
 527: LIST
 528: PUSH
 529: EMPTY
 530: LIST
 531: PPUSH
 532: CALL_OW 69
 536: ST_TO_ADDR
// if filter < mechanics then
 537: LD_VAR 0 2
 541: PUSH
 542: LD_EXP 1
 546: LESS
 547: IFFALSE 565
// begin Wait ( 0 0$03 ) ;
 549: LD_INT 105
 551: PPUSH
 552: CALL_OW 67
// ToSpawn ( i ) ;
 556: LD_VAR 0 1
 560: PPUSH
 561: CALL 409 0 1
// end ; end ;
 565: GO 484
 567: POP
 568: POP
// end ;
 569: PPOPN 2
 571: END
// every 0 0$01 trigger time do var i , filter , filter2 , vehicles ;
 572: LD_EXP 5
 576: IFFALSE 943
 578: GO 580
 580: DISABLE
 581: LD_INT 0
 583: PPUSH
 584: PPUSH
 585: PPUSH
 586: PPUSH
// begin enable ;
 587: ENABLE
// filter2 := FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_not , [ f_side , 0 ] ] , [ f_not , [ f_side , 1 ] ] ] ) ;
 588: LD_ADDR_VAR 0 3
 592: PUSH
 593: LD_INT 21
 595: PUSH
 596: LD_INT 2
 598: PUSH
 599: EMPTY
 600: LIST
 601: LIST
 602: PUSH
 603: LD_INT 3
 605: PUSH
 606: LD_INT 22
 608: PUSH
 609: LD_INT 0
 611: PUSH
 612: EMPTY
 613: LIST
 614: LIST
 615: PUSH
 616: EMPTY
 617: LIST
 618: LIST
 619: PUSH
 620: LD_INT 3
 622: PUSH
 623: LD_INT 22
 625: PUSH
 626: LD_INT 1
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: PUSH
 633: EMPTY
 634: LIST
 635: LIST
 636: PUSH
 637: EMPTY
 638: LIST
 639: LIST
 640: LIST
 641: PPUSH
 642: CALL_OW 69
 646: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_side , 1 ] ] ] ) ;
 647: LD_ADDR_VAR 0 2
 651: PUSH
 652: LD_INT 21
 654: PUSH
 655: LD_INT 1
 657: PUSH
 658: EMPTY
 659: LIST
 660: LIST
 661: PUSH
 662: LD_INT 3
 664: PUSH
 665: LD_INT 54
 667: PUSH
 668: EMPTY
 669: LIST
 670: PUSH
 671: EMPTY
 672: LIST
 673: LIST
 674: PUSH
 675: LD_INT 3
 677: PUSH
 678: LD_INT 22
 680: PUSH
 681: LD_INT 1
 683: PUSH
 684: EMPTY
 685: LIST
 686: LIST
 687: PUSH
 688: EMPTY
 689: LIST
 690: LIST
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: LIST
 696: PPUSH
 697: CALL_OW 69
 701: ST_TO_ADDR
// vehicles := FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 702: LD_ADDR_VAR 0 4
 706: PUSH
 707: LD_INT 21
 709: PUSH
 710: LD_INT 2
 712: PUSH
 713: EMPTY
 714: LIST
 715: LIST
 716: PUSH
 717: LD_INT 58
 719: PUSH
 720: EMPTY
 721: LIST
 722: PUSH
 723: EMPTY
 724: LIST
 725: LIST
 726: PPUSH
 727: CALL_OW 69
 731: ST_TO_ADDR
// if filter and vehicles then
 732: LD_VAR 0 2
 736: PUSH
 737: LD_VAR 0 4
 741: AND
 742: IFFALSE 879
// for i = 1 to filter do
 744: LD_ADDR_VAR 0 1
 748: PUSH
 749: DOUBLE
 750: LD_INT 1
 752: DEC
 753: ST_TO_ADDR
 754: LD_VAR 0 2
 758: PUSH
 759: FOR_TO
 760: IFFALSE 877
// if not HasTask ( filter [ i ] ) and IsOk ( filter [ i ] ) then
 762: LD_VAR 0 2
 766: PUSH
 767: LD_VAR 0 1
 771: ARRAY
 772: PPUSH
 773: CALL_OW 314
 777: NOT
 778: PUSH
 779: LD_VAR 0 2
 783: PUSH
 784: LD_VAR 0 1
 788: ARRAY
 789: PPUSH
 790: CALL_OW 302
 794: AND
 795: IFFALSE 875
// if GetDistUnits ( filter [ i ] , NearestUnitToUnit ( vehicles , filter [ i ] ) ) < 45 then
 797: LD_VAR 0 2
 801: PUSH
 802: LD_VAR 0 1
 806: ARRAY
 807: PPUSH
 808: LD_VAR 0 4
 812: PPUSH
 813: LD_VAR 0 2
 817: PUSH
 818: LD_VAR 0 1
 822: ARRAY
 823: PPUSH
 824: CALL_OW 74
 828: PPUSH
 829: CALL_OW 296
 833: PUSH
 834: LD_INT 45
 836: LESS
 837: IFFALSE 875
// ComEnterUnit ( filter [ i ] , NearestUnitToUnit ( vehicles , filter [ i ] ) ) ;
 839: LD_VAR 0 2
 843: PUSH
 844: LD_VAR 0 1
 848: ARRAY
 849: PPUSH
 850: LD_VAR 0 4
 854: PPUSH
 855: LD_VAR 0 2
 859: PUSH
 860: LD_VAR 0 1
 864: ARRAY
 865: PPUSH
 866: CALL_OW 74
 870: PPUSH
 871: CALL_OW 120
 875: GO 759
 877: POP
 878: POP
// if filter2 then
 879: LD_VAR 0 3
 883: IFFALSE 943
// for i = 1 to filter2 do
 885: LD_ADDR_VAR 0 1
 889: PUSH
 890: DOUBLE
 891: LD_INT 1
 893: DEC
 894: ST_TO_ADDR
 895: LD_VAR 0 3
 899: PUSH
 900: FOR_TO
 901: IFFALSE 941
// if not HasTask ( filter2 [ i ] ) then
 903: LD_VAR 0 3
 907: PUSH
 908: LD_VAR 0 1
 912: ARRAY
 913: PPUSH
 914: CALL_OW 314
 918: NOT
 919: IFFALSE 939
// ComMoveToArea ( filter2 [ i ] , exit_area ) ;
 921: LD_VAR 0 3
 925: PUSH
 926: LD_VAR 0 1
 930: ARRAY
 931: PPUSH
 932: LD_INT 4
 934: PPUSH
 935: CALL_OW 113
 939: GO 900
 941: POP
 942: POP
// end ; end_of_file
 943: PPOPN 4
 945: END
// export function SpawnCar ( chas , area ) ; var i , e , veh , ar_chassis , ru_chassis , us_chassis , ar_weapons , ru_weapons , us_weapons , chassis , engine , weapon ; begin
 946: LD_INT 0
 948: PPUSH
 949: PPUSH
 950: PPUSH
 951: PPUSH
 952: PPUSH
 953: PPUSH
 954: PPUSH
 955: PPUSH
 956: PPUSH
 957: PPUSH
 958: PPUSH
 959: PPUSH
 960: PPUSH
// uc_side := 0 ;
 961: LD_ADDR_OWVAR 20
 965: PUSH
 966: LD_INT 0
 968: ST_TO_ADDR
// uc_nation := Rand ( 1 , 3 ) ;
 969: LD_ADDR_OWVAR 21
 973: PUSH
 974: LD_INT 1
 976: PPUSH
 977: LD_INT 3
 979: PPUSH
 980: CALL_OW 12
 984: ST_TO_ADDR
// ar_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ;
 985: LD_ADDR_VAR 0 7
 989: PUSH
 990: LD_INT 11
 992: PUSH
 993: LD_INT 12
 995: PUSH
 996: LD_INT 13
 998: PUSH
 999: LD_INT 14
1001: PUSH
1002: EMPTY
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: ST_TO_ADDR
// ru_chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ;
1008: LD_ADDR_VAR 0 8
1012: PUSH
1013: LD_INT 21
1015: PUSH
1016: LD_INT 22
1018: PUSH
1019: LD_INT 23
1021: PUSH
1022: LD_INT 24
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: ST_TO_ADDR
// us_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ;
1031: LD_ADDR_VAR 0 9
1035: PUSH
1036: LD_INT 1
1038: PUSH
1039: LD_INT 2
1041: PUSH
1042: LD_INT 3
1044: PUSH
1045: LD_INT 4
1047: PUSH
1048: LD_INT 5
1050: PUSH
1051: EMPTY
1052: LIST
1053: LIST
1054: LIST
1055: LIST
1056: LIST
1057: ST_TO_ADDR
// if chas > 0 then
1058: LD_VAR 0 1
1062: PUSH
1063: LD_INT 0
1065: GREATER
1066: IFFALSE 1080
// vc_chassis := chas else
1068: LD_ADDR_OWVAR 37
1072: PUSH
1073: LD_VAR 0 1
1077: ST_TO_ADDR
1078: GO 1173
// begin case uc_nation of 1 :
1080: LD_OWVAR 21
1084: PUSH
1085: LD_INT 1
1087: DOUBLE
1088: EQUAL
1089: IFTRUE 1093
1091: GO 1106
1093: POP
// chassis := us_chassis ; 2 :
1094: LD_ADDR_VAR 0 13
1098: PUSH
1099: LD_VAR 0 9
1103: ST_TO_ADDR
1104: GO 1149
1106: LD_INT 2
1108: DOUBLE
1109: EQUAL
1110: IFTRUE 1114
1112: GO 1127
1114: POP
// chassis := ar_chassis ; 3 :
1115: LD_ADDR_VAR 0 13
1119: PUSH
1120: LD_VAR 0 7
1124: ST_TO_ADDR
1125: GO 1149
1127: LD_INT 3
1129: DOUBLE
1130: EQUAL
1131: IFTRUE 1135
1133: GO 1148
1135: POP
// chassis := ru_chassis ; end ;
1136: LD_ADDR_VAR 0 13
1140: PUSH
1141: LD_VAR 0 8
1145: ST_TO_ADDR
1146: GO 1149
1148: POP
// vc_chassis := chassis [ Rand ( 1 , chassis ) ] ;
1149: LD_ADDR_OWVAR 37
1153: PUSH
1154: LD_VAR 0 13
1158: PUSH
1159: LD_INT 1
1161: PPUSH
1162: LD_VAR 0 13
1166: PPUSH
1167: CALL_OW 12
1171: ARRAY
1172: ST_TO_ADDR
// end ; if vc_chassis in [ ar_hovercraft , ar_light_trike , us_light_wheeled ] then
1173: LD_OWVAR 37
1177: PUSH
1178: LD_INT 11
1180: PUSH
1181: LD_INT 12
1183: PUSH
1184: LD_INT 1
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: LIST
1191: IN
1192: IFFALSE 1212
// engine := Rand ( 1 , 2 ) else
1194: LD_ADDR_VAR 0 14
1198: PUSH
1199: LD_INT 1
1201: PPUSH
1202: LD_INT 2
1204: PPUSH
1205: CALL_OW 12
1209: ST_TO_ADDR
1210: GO 1324
// begin if not vc_chassis in [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , us_heavy_tracked , us_morphling ] then
1212: LD_OWVAR 37
1216: PUSH
1217: LD_INT 21
1219: PUSH
1220: LD_INT 22
1222: PUSH
1223: LD_INT 23
1225: PUSH
1226: LD_INT 24
1228: PUSH
1229: LD_INT 4
1231: PUSH
1232: LD_INT 5
1234: PUSH
1235: EMPTY
1236: LIST
1237: LIST
1238: LIST
1239: LIST
1240: LIST
1241: LIST
1242: IN
1243: NOT
1244: IFFALSE 1264
// engine := Rand ( 1 , 3 ) else
1246: LD_ADDR_VAR 0 14
1250: PUSH
1251: LD_INT 1
1253: PPUSH
1254: LD_INT 3
1256: PPUSH
1257: CALL_OW 12
1261: ST_TO_ADDR
1262: GO 1280
// e := Rand ( 1 , 2 ) ;
1264: LD_ADDR_VAR 0 5
1268: PUSH
1269: LD_INT 1
1271: PPUSH
1272: LD_INT 2
1274: PPUSH
1275: CALL_OW 12
1279: ST_TO_ADDR
// case e of 1 :
1280: LD_VAR 0 5
1284: PUSH
1285: LD_INT 1
1287: DOUBLE
1288: EQUAL
1289: IFTRUE 1293
1291: GO 1304
1293: POP
// engine := engine_combustion ; 2 :
1294: LD_ADDR_VAR 0 14
1298: PUSH
1299: LD_INT 1
1301: ST_TO_ADDR
1302: GO 1324
1304: LD_INT 2
1306: DOUBLE
1307: EQUAL
1308: IFTRUE 1312
1310: GO 1323
1312: POP
// engine := engine_siberite ; end ;
1313: LD_ADDR_VAR 0 14
1317: PUSH
1318: LD_INT 3
1320: ST_TO_ADDR
1321: GO 1324
1323: POP
// end ; vc_engine := engine ;
1324: LD_ADDR_OWVAR 39
1328: PUSH
1329: LD_VAR 0 14
1333: ST_TO_ADDR
// vc_control := control_manual ;
1334: LD_ADDR_OWVAR 38
1338: PUSH
1339: LD_INT 1
1341: ST_TO_ADDR
// ar_weapons := [ ar_multimissile_ballista , ar_double_machine_gun , ar_light_gun , ar_radar , ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb , ar_flame_thrower ] ;
1342: LD_ADDR_VAR 0 10
1346: PUSH
1347: LD_INT 22
1349: PUSH
1350: LD_INT 24
1352: PUSH
1353: LD_INT 23
1355: PUSH
1356: LD_INT 30
1358: PUSH
1359: LD_INT 25
1361: PUSH
1362: LD_INT 27
1364: PUSH
1365: LD_INT 28
1367: PUSH
1368: LD_INT 29
1370: PUSH
1371: LD_INT 26
1373: PUSH
1374: EMPTY
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: LIST
1382: LIST
1383: LIST
1384: ST_TO_ADDR
// ru_weapons := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , 98 , ru_rocket_launcher , ru_heavy_gun , ru_rocket , ru_bulldozer , ru_time_lapser ] ;
1385: LD_ADDR_VAR 0 11
1389: PUSH
1390: LD_INT 42
1392: PUSH
1393: LD_INT 43
1395: PUSH
1396: LD_INT 44
1398: PUSH
1399: LD_INT 98
1401: PUSH
1402: LD_INT 45
1404: PUSH
1405: LD_INT 46
1407: PUSH
1408: LD_INT 47
1410: PUSH
1411: LD_INT 53
1413: PUSH
1414: LD_INT 49
1416: PUSH
1417: EMPTY
1418: LIST
1419: LIST
1420: LIST
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: LIST
1427: ST_TO_ADDR
// us_weapons := [ us_machine_gun , us_light_gun , us_radar , us_gatling_gun , us_double_gun , us_rocket_launcher , us_laser , us_heavy_gun , us_bulldozer , us_double_laser ] ;
1428: LD_ADDR_VAR 0 12
1432: PUSH
1433: LD_INT 2
1435: PUSH
1436: LD_INT 3
1438: PUSH
1439: LD_INT 11
1441: PUSH
1442: LD_INT 4
1444: PUSH
1445: LD_INT 5
1447: PUSH
1448: LD_INT 7
1450: PUSH
1451: LD_INT 9
1453: PUSH
1454: LD_INT 6
1456: PUSH
1457: LD_INT 14
1459: PUSH
1460: LD_INT 10
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: LIST
1473: LIST
1474: ST_TO_ADDR
// if uc_nation = nation_arabian then
1475: LD_OWVAR 21
1479: PUSH
1480: LD_INT 2
1482: EQUAL
1483: IFFALSE 1550
// begin if vc_chassis in [ ar_hovercraft , ar_light_trike ] then
1485: LD_OWVAR 37
1489: PUSH
1490: LD_INT 11
1492: PUSH
1493: LD_INT 12
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: IN
1500: IFFALSE 1526
// weapon := ar_weapons [ Rand ( 1 , 3 ) ] else
1502: LD_ADDR_VAR 0 15
1506: PUSH
1507: LD_VAR 0 10
1511: PUSH
1512: LD_INT 1
1514: PPUSH
1515: LD_INT 3
1517: PPUSH
1518: CALL_OW 12
1522: ARRAY
1523: ST_TO_ADDR
1524: GO 1550
// weapon := ar_weapons [ Rand ( 1 , ar_weapons ) ] ;
1526: LD_ADDR_VAR 0 15
1530: PUSH
1531: LD_VAR 0 10
1535: PUSH
1536: LD_INT 1
1538: PPUSH
1539: LD_VAR 0 10
1543: PPUSH
1544: CALL_OW 12
1548: ARRAY
1549: ST_TO_ADDR
// end ; if uc_nation = nation_russian then
1550: LD_OWVAR 21
1554: PUSH
1555: LD_INT 3
1557: EQUAL
1558: IFFALSE 1625
// begin if vc_chassis in [ ru_medium_wheeled , ru_medium_tracked ] then
1560: LD_OWVAR 37
1564: PUSH
1565: LD_INT 21
1567: PUSH
1568: LD_INT 22
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: IN
1575: IFFALSE 1601
// weapon := ru_weapons [ Rand ( 1 , 5 ) ] else
1577: LD_ADDR_VAR 0 15
1581: PUSH
1582: LD_VAR 0 11
1586: PUSH
1587: LD_INT 1
1589: PPUSH
1590: LD_INT 5
1592: PPUSH
1593: CALL_OW 12
1597: ARRAY
1598: ST_TO_ADDR
1599: GO 1625
// weapon := ru_weapons [ Rand ( 1 , ru_weapons ) ] ;
1601: LD_ADDR_VAR 0 15
1605: PUSH
1606: LD_VAR 0 11
1610: PUSH
1611: LD_INT 1
1613: PPUSH
1614: LD_VAR 0 11
1618: PPUSH
1619: CALL_OW 12
1623: ARRAY
1624: ST_TO_ADDR
// end ; if uc_nation = nation_american then
1625: LD_OWVAR 21
1629: PUSH
1630: LD_INT 1
1632: EQUAL
1633: IFFALSE 1742
// begin if vc_chassis = us_light_wheeled then
1635: LD_OWVAR 37
1639: PUSH
1640: LD_INT 1
1642: EQUAL
1643: IFFALSE 1667
// weapon := us_weapons [ Rand ( 1 , 3 ) ] ;
1645: LD_ADDR_VAR 0 15
1649: PUSH
1650: LD_VAR 0 12
1654: PUSH
1655: LD_INT 1
1657: PPUSH
1658: LD_INT 3
1660: PPUSH
1661: CALL_OW 12
1665: ARRAY
1666: ST_TO_ADDR
// if vc_chassis in [ us_medium_tracked , us_medium_wheeled ] then
1667: LD_OWVAR 37
1671: PUSH
1672: LD_INT 3
1674: PUSH
1675: LD_INT 2
1677: PUSH
1678: EMPTY
1679: LIST
1680: LIST
1681: IN
1682: IFFALSE 1708
// weapon := us_weapons [ Rand ( 1 , 7 ) ] else
1684: LD_ADDR_VAR 0 15
1688: PUSH
1689: LD_VAR 0 12
1693: PUSH
1694: LD_INT 1
1696: PPUSH
1697: LD_INT 7
1699: PPUSH
1700: CALL_OW 12
1704: ARRAY
1705: ST_TO_ADDR
1706: GO 1742
// if vc_chassis <> us_light_wheeled then
1708: LD_OWVAR 37
1712: PUSH
1713: LD_INT 1
1715: NONEQUAL
1716: IFFALSE 1742
// weapon := us_weapons [ Rand ( 1 , us_weapons ) ] ;
1718: LD_ADDR_VAR 0 15
1722: PUSH
1723: LD_VAR 0 12
1727: PUSH
1728: LD_INT 1
1730: PPUSH
1731: LD_VAR 0 12
1735: PPUSH
1736: CALL_OW 12
1740: ARRAY
1741: ST_TO_ADDR
// end ; vc_weapon := weapon ;
1742: LD_ADDR_OWVAR 40
1746: PUSH
1747: LD_VAR 0 15
1751: ST_TO_ADDR
// veh := CreateVehicle ;
1752: LD_ADDR_VAR 0 6
1756: PUSH
1757: CALL_OW 45
1761: ST_TO_ADDR
// PlaceUnitArea ( veh , area , true ) ;
1762: LD_VAR 0 6
1766: PPUSH
1767: LD_VAR 0 2
1771: PPUSH
1772: LD_INT 1
1774: PPUSH
1775: CALL_OW 49
// end ;
1779: LD_VAR 0 3
1783: RET
// export function SpawnSibRocket ( area ) ; var veh , p ; begin
1784: LD_INT 0
1786: PPUSH
1787: PPUSH
1788: PPUSH
// uc_side := 0 ;
1789: LD_ADDR_OWVAR 20
1793: PUSH
1794: LD_INT 0
1796: ST_TO_ADDR
// p := Rand ( 1 , 2 ) ;
1797: LD_ADDR_VAR 0 4
1801: PUSH
1802: LD_INT 1
1804: PPUSH
1805: LD_INT 2
1807: PPUSH
1808: CALL_OW 12
1812: ST_TO_ADDR
// case p of 1 :
1813: LD_VAR 0 4
1817: PUSH
1818: LD_INT 1
1820: DOUBLE
1821: EQUAL
1822: IFTRUE 1826
1824: GO 1869
1826: POP
// begin uc_nation := nation_american ;
1827: LD_ADDR_OWVAR 21
1831: PUSH
1832: LD_INT 1
1834: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
1835: LD_ADDR_OWVAR 37
1839: PUSH
1840: LD_INT 4
1842: ST_TO_ADDR
// vc_engine := engine_siberite ;
1843: LD_ADDR_OWVAR 39
1847: PUSH
1848: LD_INT 3
1850: ST_TO_ADDR
// vc_control := control_manual ;
1851: LD_ADDR_OWVAR 38
1855: PUSH
1856: LD_INT 1
1858: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
1859: LD_ADDR_OWVAR 40
1863: PUSH
1864: LD_INT 8
1866: ST_TO_ADDR
// end ; 2 :
1867: GO 1921
1869: LD_INT 2
1871: DOUBLE
1872: EQUAL
1873: IFTRUE 1877
1875: GO 1920
1877: POP
// begin uc_nation := nation_russian ;
1878: LD_ADDR_OWVAR 21
1882: PUSH
1883: LD_INT 3
1885: ST_TO_ADDR
// vc_chassis := ru_heavy_tracked ;
1886: LD_ADDR_OWVAR 37
1890: PUSH
1891: LD_INT 24
1893: ST_TO_ADDR
// vc_engine := engine_siberite ;
1894: LD_ADDR_OWVAR 39
1898: PUSH
1899: LD_INT 3
1901: ST_TO_ADDR
// vc_control := control_manual ;
1902: LD_ADDR_OWVAR 38
1906: PUSH
1907: LD_INT 1
1909: ST_TO_ADDR
// vc_weapon := ru_siberium_rocket ;
1910: LD_ADDR_OWVAR 40
1914: PUSH
1915: LD_INT 48
1917: ST_TO_ADDR
// end ; end ;
1918: GO 1921
1920: POP
// veh := CreateVehicle ;
1921: LD_ADDR_VAR 0 3
1925: PUSH
1926: CALL_OW 45
1930: ST_TO_ADDR
// PlaceUnitArea ( veh , area , true ) ;
1931: LD_VAR 0 3
1935: PPUSH
1936: LD_VAR 0 1
1940: PPUSH
1941: LD_INT 1
1943: PPUSH
1944: CALL_OW 49
// end ;
1948: LD_VAR 0 2
1952: RET
// export function ScoreBoard ( veh ) ; var points ; begin
1953: LD_INT 0
1955: PPUSH
1956: PPUSH
// points := 0 ;
1957: LD_ADDR_VAR 0 3
1961: PUSH
1962: LD_INT 0
1964: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_light_trike , us_light_wheeled ] then
1965: LD_VAR 0 1
1969: PPUSH
1970: CALL_OW 265
1974: PUSH
1975: LD_INT 12
1977: PUSH
1978: LD_INT 1
1980: PUSH
1981: EMPTY
1982: LIST
1983: LIST
1984: IN
1985: IFFALSE 2001
// points := points + 10 ;
1987: LD_ADDR_VAR 0 3
1991: PUSH
1992: LD_VAR 0 3
1996: PUSH
1997: LD_INT 10
1999: PLUS
2000: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_medium_trike , ru_medium_wheeled , us_medium_wheeled ] then
2001: LD_VAR 0 1
2005: PPUSH
2006: CALL_OW 265
2010: PUSH
2011: LD_INT 13
2013: PUSH
2014: LD_INT 21
2016: PUSH
2017: LD_INT 2
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: LIST
2024: IN
2025: IFFALSE 2041
// points := points + 15 ;
2027: LD_ADDR_VAR 0 3
2031: PUSH
2032: LD_VAR 0 3
2036: PUSH
2037: LD_INT 15
2039: PLUS
2040: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_half_tracked , ru_medium_tracked , us_medium_tracked ] then
2041: LD_VAR 0 1
2045: PPUSH
2046: CALL_OW 265
2050: PUSH
2051: LD_INT 14
2053: PUSH
2054: LD_INT 22
2056: PUSH
2057: LD_INT 3
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: LIST
2064: IN
2065: IFFALSE 2081
// points := points + 20 ;
2067: LD_ADDR_VAR 0 3
2071: PUSH
2072: LD_VAR 0 3
2076: PUSH
2077: LD_INT 20
2079: PLUS
2080: ST_TO_ADDR
// if GetChassis ( veh ) in [ ru_heavy_wheeled , ru_heavy_tracked , us_heavy_tracked ] then
2081: LD_VAR 0 1
2085: PPUSH
2086: CALL_OW 265
2090: PUSH
2091: LD_INT 23
2093: PUSH
2094: LD_INT 24
2096: PUSH
2097: LD_INT 4
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: LIST
2104: IN
2105: IFFALSE 2121
// points := points + 25 ;
2107: LD_ADDR_VAR 0 3
2111: PUSH
2112: LD_VAR 0 3
2116: PUSH
2117: LD_INT 25
2119: PLUS
2120: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_hovercraft , us_morphling ] then
2121: LD_VAR 0 1
2125: PPUSH
2126: CALL_OW 265
2130: PUSH
2131: LD_INT 11
2133: PUSH
2134: LD_INT 5
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: IN
2141: IFFALSE 2157
// points := points + 30 ;
2143: LD_ADDR_VAR 0 3
2147: PUSH
2148: LD_VAR 0 3
2152: PUSH
2153: LD_INT 30
2155: PLUS
2156: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_combustion ] then
2157: LD_VAR 0 1
2161: PPUSH
2162: CALL_OW 262
2166: PUSH
2167: LD_INT 1
2169: PUSH
2170: EMPTY
2171: LIST
2172: EQUAL
2173: IFFALSE 2189
// points := points + 5 ;
2175: LD_ADDR_VAR 0 3
2179: PUSH
2180: LD_VAR 0 3
2184: PUSH
2185: LD_INT 5
2187: PLUS
2188: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_solar ] then
2189: LD_VAR 0 1
2193: PPUSH
2194: CALL_OW 262
2198: PUSH
2199: LD_INT 2
2201: PUSH
2202: EMPTY
2203: LIST
2204: EQUAL
2205: IFFALSE 2221
// points := points + 15 ;
2207: LD_ADDR_VAR 0 3
2211: PUSH
2212: LD_VAR 0 3
2216: PUSH
2217: LD_INT 15
2219: PLUS
2220: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_siberite ] then
2221: LD_VAR 0 1
2225: PPUSH
2226: CALL_OW 262
2230: PUSH
2231: LD_INT 3
2233: PUSH
2234: EMPTY
2235: LIST
2236: EQUAL
2237: IFFALSE 2253
// points := points + 25 ;
2239: LD_ADDR_VAR 0 3
2243: PUSH
2244: LD_VAR 0 3
2248: PUSH
2249: LD_INT 25
2251: PLUS
2252: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_multimissile_ballista , ar_double_machine_gun , ar_light_gun , ru_heavy_machine_gun , us_machine_gun , us_light_gun ] then
2253: LD_VAR 0 1
2257: PPUSH
2258: CALL_OW 264
2262: PUSH
2263: LD_INT 22
2265: PUSH
2266: LD_INT 24
2268: PUSH
2269: LD_INT 23
2271: PUSH
2272: LD_INT 42
2274: PUSH
2275: LD_INT 2
2277: PUSH
2278: LD_INT 3
2280: PUSH
2281: EMPTY
2282: LIST
2283: LIST
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: IN
2289: IFFALSE 2305
// points := points + 5 ;
2291: LD_ADDR_VAR 0 3
2295: PUSH
2296: LD_VAR 0 3
2300: PUSH
2301: LD_INT 5
2303: PLUS
2304: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_gatling_gun , ar_gun , ru_gatling_gun , ru_gun , us_gatling_gun , us_double_gun ] then
2305: LD_VAR 0 1
2309: PPUSH
2310: CALL_OW 264
2314: PUSH
2315: LD_INT 25
2317: PUSH
2318: LD_INT 27
2320: PUSH
2321: LD_INT 43
2323: PUSH
2324: LD_INT 44
2326: PUSH
2327: LD_INT 4
2329: PUSH
2330: LD_INT 5
2332: PUSH
2333: EMPTY
2334: LIST
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: LIST
2340: IN
2341: IFFALSE 2357
// points := points + 10 ;
2343: LD_ADDR_VAR 0 3
2347: PUSH
2348: LD_VAR 0 3
2352: PUSH
2353: LD_INT 10
2355: PLUS
2356: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher ] then
2357: LD_VAR 0 1
2361: PPUSH
2362: CALL_OW 264
2366: PUSH
2367: LD_INT 28
2369: PUSH
2370: LD_INT 45
2372: PUSH
2373: LD_INT 7
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: LIST
2380: IN
2381: IFFALSE 2397
// points := points + 20 ;
2383: LD_ADDR_VAR 0 3
2387: PUSH
2388: LD_VAR 0 3
2392: PUSH
2393: LD_INT 20
2395: PLUS
2396: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ru_heavy_gun , us_heavy_gun ] then
2397: LD_VAR 0 1
2401: PPUSH
2402: CALL_OW 264
2406: PUSH
2407: LD_INT 46
2409: PUSH
2410: LD_INT 6
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: IN
2417: IFFALSE 2433
// points := points + 25 ;
2419: LD_ADDR_VAR 0 3
2423: PUSH
2424: LD_VAR 0 3
2428: PUSH
2429: LD_INT 25
2431: PLUS
2432: ST_TO_ADDR
// if GetWeapon ( veh ) in [ us_laser , us_radar , ar_radar ] then
2433: LD_VAR 0 1
2437: PPUSH
2438: CALL_OW 264
2442: PUSH
2443: LD_INT 9
2445: PUSH
2446: LD_INT 11
2448: PUSH
2449: LD_INT 30
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: LIST
2456: IN
2457: IFFALSE 2473
// points := points + 30 ;
2459: LD_ADDR_VAR 0 3
2463: PUSH
2464: LD_VAR 0 3
2468: PUSH
2469: LD_INT 30
2471: PLUS
2472: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_selfpropelled_bomb , ru_time_lapser , ru_rocket , us_double_laser ] then
2473: LD_VAR 0 1
2477: PPUSH
2478: CALL_OW 264
2482: PUSH
2483: LD_INT 29
2485: PUSH
2486: LD_INT 49
2488: PUSH
2489: LD_INT 47
2491: PUSH
2492: LD_INT 10
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: LIST
2499: LIST
2500: IN
2501: IFFALSE 2517
// points := points + 50 ;
2503: LD_ADDR_VAR 0 3
2507: PUSH
2508: LD_VAR 0 3
2512: PUSH
2513: LD_INT 50
2515: PLUS
2516: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ru_siberium_rocket , us_siberium_rocket ] then
2517: LD_VAR 0 1
2521: PPUSH
2522: CALL_OW 264
2526: PUSH
2527: LD_INT 48
2529: PUSH
2530: LD_INT 8
2532: PUSH
2533: EMPTY
2534: LIST
2535: LIST
2536: IN
2537: IFFALSE 2553
// points := points + 100 ;
2539: LD_ADDR_VAR 0 3
2543: PUSH
2544: LD_VAR 0 3
2548: PUSH
2549: LD_INT 100
2551: PLUS
2552: ST_TO_ADDR
// result := points ;
2553: LD_ADDR_VAR 0 2
2557: PUSH
2558: LD_VAR 0 3
2562: ST_TO_ADDR
// end ; end_of_file
2563: LD_VAR 0 2
2567: RET
// every 0 0$01 trigger time do var filter , i , side , driver , un ;
2568: LD_EXP 5
2572: IFFALSE 3217
2574: GO 2576
2576: DISABLE
2577: LD_INT 0
2579: PPUSH
2580: PPUSH
2581: PPUSH
2582: PPUSH
2583: PPUSH
// begin enable ;
2584: ENABLE
// if tick < 36 then
2585: LD_OWVAR 1
2589: PUSH
2590: LD_INT 36
2592: LESS
2593: IFFALSE 2605
// SetAreaMapShow ( exit_area , 1 ) ;
2595: LD_INT 4
2597: PPUSH
2598: LD_INT 1
2600: PPUSH
2601: CALL_OW 424
// time := time - 0 0$01 ;
2605: LD_ADDR_EXP 5
2609: PUSH
2610: LD_EXP 5
2614: PUSH
2615: LD_INT 35
2617: MINUS
2618: ST_TO_ADDR
// if time = 0 0$00 then
2619: LD_EXP 5
2623: PUSH
2624: LD_INT 0
2626: EQUAL
2627: IFFALSE 2690
// if p1 > p2 and p1 > p3 and p1 > p4 and p1 > p5 then
2629: LD_EXP 7
2633: PUSH
2634: LD_EXP 8
2638: GREATER
2639: PUSH
2640: LD_EXP 7
2644: PUSH
2645: LD_EXP 9
2649: GREATER
2650: AND
2651: PUSH
2652: LD_EXP 7
2656: PUSH
2657: LD_EXP 10
2661: GREATER
2662: AND
2663: PUSH
2664: LD_EXP 7
2668: PUSH
2669: LD_EXP 11
2673: GREATER
2674: AND
2675: IFFALSE 2683
// YouWin else
2677: CALL_OW 103
2681: GO 2690
// YouLost (  ) ;
2683: LD_STRING 
2685: PPUSH
2686: CALL_OW 104
// filter := FilterUnitsInArea ( exit_area , [ f_type , unit_vehicle ] ) ;
2690: LD_ADDR_VAR 0 1
2694: PUSH
2695: LD_INT 4
2697: PPUSH
2698: LD_INT 21
2700: PUSH
2701: LD_INT 2
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: PPUSH
2708: CALL_OW 70
2712: ST_TO_ADDR
// if filter then
2713: LD_VAR 0 1
2717: IFFALSE 3007
// for i = 1 to filter do
2719: LD_ADDR_VAR 0 2
2723: PUSH
2724: DOUBLE
2725: LD_INT 1
2727: DEC
2728: ST_TO_ADDR
2729: LD_VAR 0 1
2733: PUSH
2734: FOR_TO
2735: IFFALSE 3005
// begin side := GetSide ( filter [ i ] ) ;
2737: LD_ADDR_VAR 0 3
2741: PUSH
2742: LD_VAR 0 1
2746: PUSH
2747: LD_VAR 0 2
2751: ARRAY
2752: PPUSH
2753: CALL_OW 255
2757: ST_TO_ADDR
// driver := IsDrivenBy ( filter [ i ] ) ;
2758: LD_ADDR_VAR 0 4
2762: PUSH
2763: LD_VAR 0 1
2767: PUSH
2768: LD_VAR 0 2
2772: ARRAY
2773: PPUSH
2774: CALL_OW 311
2778: ST_TO_ADDR
// un := filter [ i ] ;
2779: LD_ADDR_VAR 0 5
2783: PUSH
2784: LD_VAR 0 1
2788: PUSH
2789: LD_VAR 0 2
2793: ARRAY
2794: ST_TO_ADDR
// if IsInUnit ( driver ) then
2795: LD_VAR 0 4
2799: PPUSH
2800: CALL_OW 310
2804: IFFALSE 2815
// ComExitVehicle ( driver ) ;
2806: LD_VAR 0 4
2810: PPUSH
2811: CALL_OW 121
// Wait ( 0 0$0.3 ) ;
2815: LD_INT 10
2817: PPUSH
2818: CALL_OW 67
// RemoveUnit ( filter [ i ] ) ;
2822: LD_VAR 0 1
2826: PUSH
2827: LD_VAR 0 2
2831: ARRAY
2832: PPUSH
2833: CALL_OW 64
// case side of 1 :
2837: LD_VAR 0 3
2841: PUSH
2842: LD_INT 1
2844: DOUBLE
2845: EQUAL
2846: IFTRUE 2850
2848: GO 2874
2850: POP
// p1 := p1 + ScoreBoard ( un ) ; 2 :
2851: LD_ADDR_EXP 7
2855: PUSH
2856: LD_EXP 7
2860: PUSH
2861: LD_VAR 0 5
2865: PPUSH
2866: CALL 1953 0 1
2870: PLUS
2871: ST_TO_ADDR
2872: GO 3003
2874: LD_INT 2
2876: DOUBLE
2877: EQUAL
2878: IFTRUE 2882
2880: GO 2906
2882: POP
// p2 := p2 + ScoreBoard ( un ) ; 3 :
2883: LD_ADDR_EXP 8
2887: PUSH
2888: LD_EXP 8
2892: PUSH
2893: LD_VAR 0 5
2897: PPUSH
2898: CALL 1953 0 1
2902: PLUS
2903: ST_TO_ADDR
2904: GO 3003
2906: LD_INT 3
2908: DOUBLE
2909: EQUAL
2910: IFTRUE 2914
2912: GO 2938
2914: POP
// p3 := p3 + ScoreBoard ( un ) ; 4 :
2915: LD_ADDR_EXP 9
2919: PUSH
2920: LD_EXP 9
2924: PUSH
2925: LD_VAR 0 5
2929: PPUSH
2930: CALL 1953 0 1
2934: PLUS
2935: ST_TO_ADDR
2936: GO 3003
2938: LD_INT 4
2940: DOUBLE
2941: EQUAL
2942: IFTRUE 2946
2944: GO 2970
2946: POP
// p4 := p4 + ScoreBoard ( un ) ; 5 :
2947: LD_ADDR_EXP 10
2951: PUSH
2952: LD_EXP 10
2956: PUSH
2957: LD_VAR 0 5
2961: PPUSH
2962: CALL 1953 0 1
2966: PLUS
2967: ST_TO_ADDR
2968: GO 3003
2970: LD_INT 5
2972: DOUBLE
2973: EQUAL
2974: IFTRUE 2978
2976: GO 3002
2978: POP
// p5 := p5 + ScoreBoard ( un ) ; end ;
2979: LD_ADDR_EXP 11
2983: PUSH
2984: LD_EXP 11
2988: PUSH
2989: LD_VAR 0 5
2993: PPUSH
2994: CALL 1953 0 1
2998: PLUS
2999: ST_TO_ADDR
3000: GO 3003
3002: POP
// end ;
3003: GO 2734
3005: POP
3006: POP
// case players of 3 :
3007: LD_EXP 3
3011: PUSH
3012: LD_INT 3
3014: DOUBLE
3015: EQUAL
3016: IFTRUE 3020
3018: GO 3070
3020: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 ] ;
3021: LD_ADDR_OWVAR 47
3025: PUSH
3026: LD_STRING #tick
3028: PUSH
3029: LD_EXP 5
3033: PUSH
3034: LD_STRING #player1
3036: PUSH
3037: LD_EXP 7
3041: PUSH
3042: LD_STRING #player2
3044: PUSH
3045: LD_EXP 8
3049: PUSH
3050: LD_STRING #player3
3052: PUSH
3053: LD_EXP 9
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: LIST
3064: LIST
3065: LIST
3066: LIST
3067: ST_TO_ADDR
// end ; 4 :
3068: GO 3217
3070: LD_INT 4
3072: DOUBLE
3073: EQUAL
3074: IFTRUE 3078
3076: GO 3138
3078: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 , #player4 , p4 ] ;
3079: LD_ADDR_OWVAR 47
3083: PUSH
3084: LD_STRING #tick
3086: PUSH
3087: LD_EXP 5
3091: PUSH
3092: LD_STRING #player1
3094: PUSH
3095: LD_EXP 7
3099: PUSH
3100: LD_STRING #player2
3102: PUSH
3103: LD_EXP 8
3107: PUSH
3108: LD_STRING #player3
3110: PUSH
3111: LD_EXP 9
3115: PUSH
3116: LD_STRING #player4
3118: PUSH
3119: LD_EXP 10
3123: PUSH
3124: EMPTY
3125: LIST
3126: LIST
3127: LIST
3128: LIST
3129: LIST
3130: LIST
3131: LIST
3132: LIST
3133: LIST
3134: LIST
3135: ST_TO_ADDR
// end ; 5 :
3136: GO 3217
3138: LD_INT 5
3140: DOUBLE
3141: EQUAL
3142: IFTRUE 3146
3144: GO 3216
3146: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 , #player4 , p4 , #player5 , p5 ] ;
3147: LD_ADDR_OWVAR 47
3151: PUSH
3152: LD_STRING #tick
3154: PUSH
3155: LD_EXP 5
3159: PUSH
3160: LD_STRING #player1
3162: PUSH
3163: LD_EXP 7
3167: PUSH
3168: LD_STRING #player2
3170: PUSH
3171: LD_EXP 8
3175: PUSH
3176: LD_STRING #player3
3178: PUSH
3179: LD_EXP 9
3183: PUSH
3184: LD_STRING #player4
3186: PUSH
3187: LD_EXP 10
3191: PUSH
3192: LD_STRING #player5
3194: PUSH
3195: LD_EXP 11
3199: PUSH
3200: EMPTY
3201: LIST
3202: LIST
3203: LIST
3204: LIST
3205: LIST
3206: LIST
3207: LIST
3208: LIST
3209: LIST
3210: LIST
3211: LIST
3212: LIST
3213: ST_TO_ADDR
// end ; end ;
3214: GO 3217
3216: POP
// end ;
3217: PPOPN 5
3219: END
// every 0 0$05 trigger time do var chance , p ;
3220: LD_EXP 5
3224: IFFALSE 3371
3226: GO 3228
3228: DISABLE
3229: LD_INT 0
3231: PPUSH
3232: PPUSH
// begin enable ;
3233: ENABLE
// Wait ( Rand ( 0 0$01 , 0 0$06 ) ) ;
3234: LD_INT 35
3236: PPUSH
3237: LD_INT 210
3239: PPUSH
3240: CALL_OW 12
3244: PPUSH
3245: CALL_OW 67
// if FilterAllUnits ( [ f_type , unit_vehicle ] ) < veh_amount then
3249: LD_INT 21
3251: PUSH
3252: LD_INT 2
3254: PUSH
3255: EMPTY
3256: LIST
3257: LIST
3258: PPUSH
3259: CALL_OW 69
3263: PUSH
3264: LD_EXP 6
3268: LESS
3269: IFFALSE 3371
// begin SpawnCar ( false , veh_spawn ) ;
3271: LD_INT 0
3273: PPUSH
3274: LD_INT 5
3276: PPUSH
3277: CALL 946 0 2
// if sib_bomb and FilterAllUnits ( [ f_or , [ [ f_weapon , us_siberium_rocket ] , [ f_weapon , ru_siberium_rocket ] ] ] ) = 0 then
3281: LD_EXP 4
3285: PUSH
3286: LD_INT 2
3288: PUSH
3289: LD_INT 34
3291: PUSH
3292: LD_INT 8
3294: PUSH
3295: EMPTY
3296: LIST
3297: LIST
3298: PUSH
3299: LD_INT 34
3301: PUSH
3302: LD_INT 48
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: PUSH
3309: EMPTY
3310: LIST
3311: LIST
3312: PUSH
3313: EMPTY
3314: LIST
3315: LIST
3316: PPUSH
3317: CALL_OW 69
3321: PUSH
3322: LD_INT 0
3324: EQUAL
3325: AND
3326: IFFALSE 3371
// begin chance := 23 ;
3328: LD_ADDR_VAR 0 1
3332: PUSH
3333: LD_INT 23
3335: ST_TO_ADDR
// p := Rand ( 0 , 100 ) ;
3336: LD_ADDR_VAR 0 2
3340: PUSH
3341: LD_INT 0
3343: PPUSH
3344: LD_INT 100
3346: PPUSH
3347: CALL_OW 12
3351: ST_TO_ADDR
// if p < chance then
3352: LD_VAR 0 2
3356: PUSH
3357: LD_VAR 0 1
3361: LESS
3362: IFFALSE 3371
// SpawnSibRocket ( veh_spawn ) ;
3364: LD_INT 5
3366: PPUSH
3367: CALL 1784 0 1
// end ; end ; end ; end_of_file
3371: PPOPN 2
3373: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
3374: LD_INT 0
3376: PPUSH
3377: PPUSH
3378: PPUSH
3379: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
3380: LD_VAR 0 1
3384: PPUSH
3385: CALL_OW 264
3389: PUSH
3390: LD_EXP 83
3394: EQUAL
3395: IFFALSE 3467
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
3397: LD_INT 68
3399: PPUSH
3400: LD_VAR 0 1
3404: PPUSH
3405: CALL_OW 255
3409: PPUSH
3410: CALL_OW 321
3414: PUSH
3415: LD_INT 2
3417: EQUAL
3418: IFFALSE 3430
// eff := 70 else
3420: LD_ADDR_VAR 0 4
3424: PUSH
3425: LD_INT 70
3427: ST_TO_ADDR
3428: GO 3438
// eff := 30 ;
3430: LD_ADDR_VAR 0 4
3434: PUSH
3435: LD_INT 30
3437: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
3438: LD_VAR 0 1
3442: PPUSH
3443: CALL_OW 250
3447: PPUSH
3448: LD_VAR 0 1
3452: PPUSH
3453: CALL_OW 251
3457: PPUSH
3458: LD_VAR 0 4
3462: PPUSH
3463: CALL_OW 495
// end ; end ;
3467: LD_VAR 0 2
3471: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
3472: LD_INT 0
3474: PPUSH
// end ;
3475: LD_VAR 0 4
3479: RET
// export function SOS_Command ( cmd ) ; begin
3480: LD_INT 0
3482: PPUSH
// end ;
3483: LD_VAR 0 2
3487: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
3488: LD_INT 0
3490: PPUSH
// if cmd = 121 then
3491: LD_VAR 0 1
3495: PUSH
3496: LD_INT 121
3498: EQUAL
3499: IFFALSE 3501
// end ;
3501: LD_VAR 0 6
3505: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
3506: LD_INT 0
3508: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
3509: LD_VAR 0 1
3513: PUSH
3514: LD_INT 250
3516: EQUAL
3517: PUSH
3518: LD_VAR 0 2
3522: PPUSH
3523: CALL_OW 264
3527: PUSH
3528: LD_EXP 86
3532: EQUAL
3533: AND
3534: IFFALSE 3555
// MinerPlaceMine ( unit , x , y ) ;
3536: LD_VAR 0 2
3540: PPUSH
3541: LD_VAR 0 4
3545: PPUSH
3546: LD_VAR 0 5
3550: PPUSH
3551: CALL 5904 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
3555: LD_VAR 0 1
3559: PUSH
3560: LD_INT 251
3562: EQUAL
3563: PUSH
3564: LD_VAR 0 2
3568: PPUSH
3569: CALL_OW 264
3573: PUSH
3574: LD_EXP 86
3578: EQUAL
3579: AND
3580: IFFALSE 3601
// MinerDetonateMine ( unit , x , y ) ;
3582: LD_VAR 0 2
3586: PPUSH
3587: LD_VAR 0 4
3591: PPUSH
3592: LD_VAR 0 5
3596: PPUSH
3597: CALL 6181 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
3601: LD_VAR 0 1
3605: PUSH
3606: LD_INT 252
3608: EQUAL
3609: PUSH
3610: LD_VAR 0 2
3614: PPUSH
3615: CALL_OW 264
3619: PUSH
3620: LD_EXP 86
3624: EQUAL
3625: AND
3626: IFFALSE 3647
// MinerCreateMinefield ( unit , x , y ) ;
3628: LD_VAR 0 2
3632: PPUSH
3633: LD_VAR 0 4
3637: PPUSH
3638: LD_VAR 0 5
3642: PPUSH
3643: CALL 6598 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
3647: LD_VAR 0 1
3651: PUSH
3652: LD_INT 253
3654: EQUAL
3655: PUSH
3656: LD_VAR 0 2
3660: PPUSH
3661: CALL_OW 257
3665: PUSH
3666: LD_INT 5
3668: EQUAL
3669: AND
3670: IFFALSE 3691
// ComBinocular ( unit , x , y ) ;
3672: LD_VAR 0 2
3676: PPUSH
3677: LD_VAR 0 4
3681: PPUSH
3682: LD_VAR 0 5
3686: PPUSH
3687: CALL 6969 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
3691: LD_VAR 0 1
3695: PUSH
3696: LD_INT 254
3698: EQUAL
3699: PUSH
3700: LD_VAR 0 2
3704: PPUSH
3705: CALL_OW 264
3709: PUSH
3710: LD_EXP 81
3714: EQUAL
3715: AND
3716: PUSH
3717: LD_VAR 0 3
3721: PPUSH
3722: CALL_OW 263
3726: PUSH
3727: LD_INT 3
3729: EQUAL
3730: AND
3731: IFFALSE 3747
// HackDestroyVehicle ( unit , selectedUnit ) ;
3733: LD_VAR 0 2
3737: PPUSH
3738: LD_VAR 0 3
3742: PPUSH
3743: CALL 5264 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
3747: LD_VAR 0 1
3751: PUSH
3752: LD_INT 255
3754: EQUAL
3755: PUSH
3756: LD_VAR 0 2
3760: PPUSH
3761: CALL_OW 264
3765: PUSH
3766: LD_INT 14
3768: PUSH
3769: LD_INT 53
3771: PUSH
3772: EMPTY
3773: LIST
3774: LIST
3775: IN
3776: AND
3777: PUSH
3778: LD_VAR 0 4
3782: PPUSH
3783: LD_VAR 0 5
3787: PPUSH
3788: CALL_OW 488
3792: AND
3793: IFFALSE 3817
// CutTreeXYR ( unit , x , y , 12 ) ;
3795: LD_VAR 0 2
3799: PPUSH
3800: LD_VAR 0 4
3804: PPUSH
3805: LD_VAR 0 5
3809: PPUSH
3810: LD_INT 12
3812: PPUSH
3813: CALL 3830 0 4
// end ;
3817: LD_VAR 0 6
3821: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
3822: LD_INT 0
3824: PPUSH
// end ;
3825: LD_VAR 0 4
3829: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
3830: LD_INT 0
3832: PPUSH
3833: PPUSH
3834: PPUSH
3835: PPUSH
3836: PPUSH
3837: PPUSH
3838: PPUSH
3839: PPUSH
3840: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
3841: LD_VAR 0 1
3845: NOT
3846: PUSH
3847: LD_VAR 0 2
3851: PPUSH
3852: LD_VAR 0 3
3856: PPUSH
3857: CALL_OW 488
3861: NOT
3862: OR
3863: PUSH
3864: LD_VAR 0 4
3868: NOT
3869: OR
3870: IFFALSE 3874
// exit ;
3872: GO 4214
// list := [ ] ;
3874: LD_ADDR_VAR 0 13
3878: PUSH
3879: EMPTY
3880: ST_TO_ADDR
// if x - r < 0 then
3881: LD_VAR 0 2
3885: PUSH
3886: LD_VAR 0 4
3890: MINUS
3891: PUSH
3892: LD_INT 0
3894: LESS
3895: IFFALSE 3907
// min_x := 0 else
3897: LD_ADDR_VAR 0 7
3901: PUSH
3902: LD_INT 0
3904: ST_TO_ADDR
3905: GO 3923
// min_x := x - r ;
3907: LD_ADDR_VAR 0 7
3911: PUSH
3912: LD_VAR 0 2
3916: PUSH
3917: LD_VAR 0 4
3921: MINUS
3922: ST_TO_ADDR
// if y - r < 0 then
3923: LD_VAR 0 3
3927: PUSH
3928: LD_VAR 0 4
3932: MINUS
3933: PUSH
3934: LD_INT 0
3936: LESS
3937: IFFALSE 3949
// min_y := 0 else
3939: LD_ADDR_VAR 0 8
3943: PUSH
3944: LD_INT 0
3946: ST_TO_ADDR
3947: GO 3965
// min_y := y - r ;
3949: LD_ADDR_VAR 0 8
3953: PUSH
3954: LD_VAR 0 3
3958: PUSH
3959: LD_VAR 0 4
3963: MINUS
3964: ST_TO_ADDR
// max_x := x + r ;
3965: LD_ADDR_VAR 0 9
3969: PUSH
3970: LD_VAR 0 2
3974: PUSH
3975: LD_VAR 0 4
3979: PLUS
3980: ST_TO_ADDR
// max_y := y + r ;
3981: LD_ADDR_VAR 0 10
3985: PUSH
3986: LD_VAR 0 3
3990: PUSH
3991: LD_VAR 0 4
3995: PLUS
3996: ST_TO_ADDR
// for _x = min_x to max_x do
3997: LD_ADDR_VAR 0 11
4001: PUSH
4002: DOUBLE
4003: LD_VAR 0 7
4007: DEC
4008: ST_TO_ADDR
4009: LD_VAR 0 9
4013: PUSH
4014: FOR_TO
4015: IFFALSE 4132
// for _y = min_y to max_y do
4017: LD_ADDR_VAR 0 12
4021: PUSH
4022: DOUBLE
4023: LD_VAR 0 8
4027: DEC
4028: ST_TO_ADDR
4029: LD_VAR 0 10
4033: PUSH
4034: FOR_TO
4035: IFFALSE 4128
// begin if not ValidHex ( _x , _y ) then
4037: LD_VAR 0 11
4041: PPUSH
4042: LD_VAR 0 12
4046: PPUSH
4047: CALL_OW 488
4051: NOT
4052: IFFALSE 4056
// continue ;
4054: GO 4034
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
4056: LD_VAR 0 11
4060: PPUSH
4061: LD_VAR 0 12
4065: PPUSH
4066: CALL_OW 351
4070: PUSH
4071: LD_VAR 0 11
4075: PPUSH
4076: LD_VAR 0 12
4080: PPUSH
4081: CALL_OW 554
4085: AND
4086: IFFALSE 4126
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
4088: LD_ADDR_VAR 0 13
4092: PUSH
4093: LD_VAR 0 13
4097: PPUSH
4098: LD_VAR 0 13
4102: PUSH
4103: LD_INT 1
4105: PLUS
4106: PPUSH
4107: LD_VAR 0 11
4111: PUSH
4112: LD_VAR 0 12
4116: PUSH
4117: EMPTY
4118: LIST
4119: LIST
4120: PPUSH
4121: CALL_OW 2
4125: ST_TO_ADDR
// end ;
4126: GO 4034
4128: POP
4129: POP
4130: GO 4014
4132: POP
4133: POP
// if not list then
4134: LD_VAR 0 13
4138: NOT
4139: IFFALSE 4143
// exit ;
4141: GO 4214
// for i in list do
4143: LD_ADDR_VAR 0 6
4147: PUSH
4148: LD_VAR 0 13
4152: PUSH
4153: FOR_IN
4154: IFFALSE 4212
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
4156: LD_VAR 0 1
4160: PPUSH
4161: LD_STRING M
4163: PUSH
4164: LD_VAR 0 6
4168: PUSH
4169: LD_INT 1
4171: ARRAY
4172: PUSH
4173: LD_VAR 0 6
4177: PUSH
4178: LD_INT 2
4180: ARRAY
4181: PUSH
4182: LD_INT 0
4184: PUSH
4185: LD_INT 0
4187: PUSH
4188: LD_INT 0
4190: PUSH
4191: LD_INT 0
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: LIST
4198: LIST
4199: LIST
4200: LIST
4201: LIST
4202: PUSH
4203: EMPTY
4204: LIST
4205: PPUSH
4206: CALL_OW 447
4210: GO 4153
4212: POP
4213: POP
// end ;
4214: LD_VAR 0 5
4218: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
4219: LD_EXP 14
4223: NOT
4224: IFFALSE 4274
4226: GO 4228
4228: DISABLE
// begin initHack := true ;
4229: LD_ADDR_EXP 14
4233: PUSH
4234: LD_INT 1
4236: ST_TO_ADDR
// hackTanks := [ ] ;
4237: LD_ADDR_EXP 15
4241: PUSH
4242: EMPTY
4243: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
4244: LD_ADDR_EXP 16
4248: PUSH
4249: EMPTY
4250: ST_TO_ADDR
// hackLimit := 3 ;
4251: LD_ADDR_EXP 17
4255: PUSH
4256: LD_INT 3
4258: ST_TO_ADDR
// hackDist := 12 ;
4259: LD_ADDR_EXP 18
4263: PUSH
4264: LD_INT 12
4266: ST_TO_ADDR
// hackCounter := [ ] ;
4267: LD_ADDR_EXP 19
4271: PUSH
4272: EMPTY
4273: ST_TO_ADDR
// end ;
4274: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
4275: LD_EXP 14
4279: PUSH
4280: LD_INT 34
4282: PUSH
4283: LD_EXP 81
4287: PUSH
4288: EMPTY
4289: LIST
4290: LIST
4291: PPUSH
4292: CALL_OW 69
4296: AND
4297: IFFALSE 4552
4299: GO 4301
4301: DISABLE
4302: LD_INT 0
4304: PPUSH
4305: PPUSH
// begin enable ;
4306: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
4307: LD_ADDR_VAR 0 1
4311: PUSH
4312: LD_INT 34
4314: PUSH
4315: LD_EXP 81
4319: PUSH
4320: EMPTY
4321: LIST
4322: LIST
4323: PPUSH
4324: CALL_OW 69
4328: PUSH
4329: FOR_IN
4330: IFFALSE 4550
// begin if not i in hackTanks then
4332: LD_VAR 0 1
4336: PUSH
4337: LD_EXP 15
4341: IN
4342: NOT
4343: IFFALSE 4426
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
4345: LD_ADDR_EXP 15
4349: PUSH
4350: LD_EXP 15
4354: PPUSH
4355: LD_EXP 15
4359: PUSH
4360: LD_INT 1
4362: PLUS
4363: PPUSH
4364: LD_VAR 0 1
4368: PPUSH
4369: CALL_OW 1
4373: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
4374: LD_ADDR_EXP 16
4378: PUSH
4379: LD_EXP 16
4383: PPUSH
4384: LD_EXP 16
4388: PUSH
4389: LD_INT 1
4391: PLUS
4392: PPUSH
4393: EMPTY
4394: PPUSH
4395: CALL_OW 1
4399: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
4400: LD_ADDR_EXP 19
4404: PUSH
4405: LD_EXP 19
4409: PPUSH
4410: LD_EXP 19
4414: PUSH
4415: LD_INT 1
4417: PLUS
4418: PPUSH
4419: EMPTY
4420: PPUSH
4421: CALL_OW 1
4425: ST_TO_ADDR
// end ; if not IsOk ( i ) then
4426: LD_VAR 0 1
4430: PPUSH
4431: CALL_OW 302
4435: NOT
4436: IFFALSE 4449
// begin HackUnlinkAll ( i ) ;
4438: LD_VAR 0 1
4442: PPUSH
4443: CALL 4555 0 1
// continue ;
4447: GO 4329
// end ; HackCheckCapturedStatus ( i ) ;
4449: LD_VAR 0 1
4453: PPUSH
4454: CALL 4998 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
4458: LD_ADDR_VAR 0 2
4462: PUSH
4463: LD_INT 81
4465: PUSH
4466: LD_VAR 0 1
4470: PPUSH
4471: CALL_OW 255
4475: PUSH
4476: EMPTY
4477: LIST
4478: LIST
4479: PUSH
4480: LD_INT 33
4482: PUSH
4483: LD_INT 3
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: PUSH
4490: LD_INT 91
4492: PUSH
4493: LD_VAR 0 1
4497: PUSH
4498: LD_EXP 18
4502: PUSH
4503: EMPTY
4504: LIST
4505: LIST
4506: LIST
4507: PUSH
4508: LD_INT 50
4510: PUSH
4511: EMPTY
4512: LIST
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: LIST
4518: LIST
4519: PPUSH
4520: CALL_OW 69
4524: ST_TO_ADDR
// if not tmp then
4525: LD_VAR 0 2
4529: NOT
4530: IFFALSE 4534
// continue ;
4532: GO 4329
// HackLink ( i , tmp ) ;
4534: LD_VAR 0 1
4538: PPUSH
4539: LD_VAR 0 2
4543: PPUSH
4544: CALL 4691 0 2
// end ;
4548: GO 4329
4550: POP
4551: POP
// end ;
4552: PPOPN 2
4554: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
4555: LD_INT 0
4557: PPUSH
4558: PPUSH
4559: PPUSH
// if not hack in hackTanks then
4560: LD_VAR 0 1
4564: PUSH
4565: LD_EXP 15
4569: IN
4570: NOT
4571: IFFALSE 4575
// exit ;
4573: GO 4686
// index := GetElementIndex ( hackTanks , hack ) ;
4575: LD_ADDR_VAR 0 4
4579: PUSH
4580: LD_EXP 15
4584: PPUSH
4585: LD_VAR 0 1
4589: PPUSH
4590: CALL 25500 0 2
4594: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
4595: LD_EXP 16
4599: PUSH
4600: LD_VAR 0 4
4604: ARRAY
4605: IFFALSE 4686
// begin for i in hackTanksCaptured [ index ] do
4607: LD_ADDR_VAR 0 3
4611: PUSH
4612: LD_EXP 16
4616: PUSH
4617: LD_VAR 0 4
4621: ARRAY
4622: PUSH
4623: FOR_IN
4624: IFFALSE 4650
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
4626: LD_VAR 0 3
4630: PUSH
4631: LD_INT 1
4633: ARRAY
4634: PPUSH
4635: LD_VAR 0 3
4639: PUSH
4640: LD_INT 2
4642: ARRAY
4643: PPUSH
4644: CALL_OW 235
4648: GO 4623
4650: POP
4651: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
4652: LD_ADDR_EXP 16
4656: PUSH
4657: LD_EXP 16
4661: PPUSH
4662: LD_VAR 0 4
4666: PPUSH
4667: EMPTY
4668: PPUSH
4669: CALL_OW 1
4673: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
4674: LD_VAR 0 1
4678: PPUSH
4679: LD_INT 0
4681: PPUSH
4682: CALL_OW 505
// end ; end ;
4686: LD_VAR 0 2
4690: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
4691: LD_INT 0
4693: PPUSH
4694: PPUSH
4695: PPUSH
// if not hack in hackTanks or not vehicles then
4696: LD_VAR 0 1
4700: PUSH
4701: LD_EXP 15
4705: IN
4706: NOT
4707: PUSH
4708: LD_VAR 0 2
4712: NOT
4713: OR
4714: IFFALSE 4718
// exit ;
4716: GO 4993
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
4718: LD_ADDR_VAR 0 2
4722: PUSH
4723: LD_VAR 0 1
4727: PPUSH
4728: LD_VAR 0 2
4732: PPUSH
4733: LD_INT 1
4735: PPUSH
4736: LD_INT 1
4738: PPUSH
4739: CALL 26150 0 4
4743: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
4744: LD_ADDR_VAR 0 5
4748: PUSH
4749: LD_EXP 15
4753: PPUSH
4754: LD_VAR 0 1
4758: PPUSH
4759: CALL 25500 0 2
4763: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
4764: LD_EXP 16
4768: PUSH
4769: LD_VAR 0 5
4773: ARRAY
4774: PUSH
4775: LD_EXP 17
4779: LESS
4780: IFFALSE 4969
// begin for i := 1 to vehicles do
4782: LD_ADDR_VAR 0 4
4786: PUSH
4787: DOUBLE
4788: LD_INT 1
4790: DEC
4791: ST_TO_ADDR
4792: LD_VAR 0 2
4796: PUSH
4797: FOR_TO
4798: IFFALSE 4967
// begin if hackTanksCaptured [ index ] = hackLimit then
4800: LD_EXP 16
4804: PUSH
4805: LD_VAR 0 5
4809: ARRAY
4810: PUSH
4811: LD_EXP 17
4815: EQUAL
4816: IFFALSE 4820
// break ;
4818: GO 4967
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
4820: LD_ADDR_EXP 19
4824: PUSH
4825: LD_EXP 19
4829: PPUSH
4830: LD_VAR 0 5
4834: PPUSH
4835: LD_EXP 19
4839: PUSH
4840: LD_VAR 0 5
4844: ARRAY
4845: PUSH
4846: LD_INT 1
4848: PLUS
4849: PPUSH
4850: CALL_OW 1
4854: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
4855: LD_ADDR_EXP 16
4859: PUSH
4860: LD_EXP 16
4864: PPUSH
4865: LD_VAR 0 5
4869: PUSH
4870: LD_EXP 16
4874: PUSH
4875: LD_VAR 0 5
4879: ARRAY
4880: PUSH
4881: LD_INT 1
4883: PLUS
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: PPUSH
4889: LD_VAR 0 2
4893: PUSH
4894: LD_VAR 0 4
4898: ARRAY
4899: PUSH
4900: LD_VAR 0 2
4904: PUSH
4905: LD_VAR 0 4
4909: ARRAY
4910: PPUSH
4911: CALL_OW 255
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: PPUSH
4920: CALL 25715 0 3
4924: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
4925: LD_VAR 0 2
4929: PUSH
4930: LD_VAR 0 4
4934: ARRAY
4935: PPUSH
4936: LD_VAR 0 1
4940: PPUSH
4941: CALL_OW 255
4945: PPUSH
4946: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
4950: LD_VAR 0 2
4954: PUSH
4955: LD_VAR 0 4
4959: ARRAY
4960: PPUSH
4961: CALL_OW 141
// end ;
4965: GO 4797
4967: POP
4968: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
4969: LD_VAR 0 1
4973: PPUSH
4974: LD_EXP 16
4978: PUSH
4979: LD_VAR 0 5
4983: ARRAY
4984: PUSH
4985: LD_INT 0
4987: PLUS
4988: PPUSH
4989: CALL_OW 505
// end ;
4993: LD_VAR 0 3
4997: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
4998: LD_INT 0
5000: PPUSH
5001: PPUSH
5002: PPUSH
5003: PPUSH
// if not hack in hackTanks then
5004: LD_VAR 0 1
5008: PUSH
5009: LD_EXP 15
5013: IN
5014: NOT
5015: IFFALSE 5019
// exit ;
5017: GO 5259
// index := GetElementIndex ( hackTanks , hack ) ;
5019: LD_ADDR_VAR 0 4
5023: PUSH
5024: LD_EXP 15
5028: PPUSH
5029: LD_VAR 0 1
5033: PPUSH
5034: CALL 25500 0 2
5038: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
5039: LD_ADDR_VAR 0 3
5043: PUSH
5044: DOUBLE
5045: LD_EXP 16
5049: PUSH
5050: LD_VAR 0 4
5054: ARRAY
5055: INC
5056: ST_TO_ADDR
5057: LD_INT 1
5059: PUSH
5060: FOR_DOWNTO
5061: IFFALSE 5233
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
5063: LD_ADDR_VAR 0 5
5067: PUSH
5068: LD_EXP 16
5072: PUSH
5073: LD_VAR 0 4
5077: ARRAY
5078: PUSH
5079: LD_VAR 0 3
5083: ARRAY
5084: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
5085: LD_VAR 0 5
5089: PUSH
5090: LD_INT 1
5092: ARRAY
5093: PPUSH
5094: CALL_OW 302
5098: NOT
5099: PUSH
5100: LD_VAR 0 5
5104: PUSH
5105: LD_INT 1
5107: ARRAY
5108: PPUSH
5109: CALL_OW 255
5113: PUSH
5114: LD_VAR 0 1
5118: PPUSH
5119: CALL_OW 255
5123: NONEQUAL
5124: OR
5125: IFFALSE 5231
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
5127: LD_VAR 0 5
5131: PUSH
5132: LD_INT 1
5134: ARRAY
5135: PPUSH
5136: CALL_OW 305
5140: PUSH
5141: LD_VAR 0 5
5145: PUSH
5146: LD_INT 1
5148: ARRAY
5149: PPUSH
5150: CALL_OW 255
5154: PUSH
5155: LD_VAR 0 1
5159: PPUSH
5160: CALL_OW 255
5164: EQUAL
5165: AND
5166: IFFALSE 5190
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
5168: LD_VAR 0 5
5172: PUSH
5173: LD_INT 1
5175: ARRAY
5176: PPUSH
5177: LD_VAR 0 5
5181: PUSH
5182: LD_INT 2
5184: ARRAY
5185: PPUSH
5186: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
5190: LD_ADDR_EXP 16
5194: PUSH
5195: LD_EXP 16
5199: PPUSH
5200: LD_VAR 0 4
5204: PPUSH
5205: LD_EXP 16
5209: PUSH
5210: LD_VAR 0 4
5214: ARRAY
5215: PPUSH
5216: LD_VAR 0 3
5220: PPUSH
5221: CALL_OW 3
5225: PPUSH
5226: CALL_OW 1
5230: ST_TO_ADDR
// end ; end ;
5231: GO 5060
5233: POP
5234: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
5235: LD_VAR 0 1
5239: PPUSH
5240: LD_EXP 16
5244: PUSH
5245: LD_VAR 0 4
5249: ARRAY
5250: PUSH
5251: LD_INT 0
5253: PLUS
5254: PPUSH
5255: CALL_OW 505
// end ;
5259: LD_VAR 0 2
5263: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
5264: LD_INT 0
5266: PPUSH
5267: PPUSH
5268: PPUSH
5269: PPUSH
// if not hack in hackTanks then
5270: LD_VAR 0 1
5274: PUSH
5275: LD_EXP 15
5279: IN
5280: NOT
5281: IFFALSE 5285
// exit ;
5283: GO 5370
// index := GetElementIndex ( hackTanks , hack ) ;
5285: LD_ADDR_VAR 0 5
5289: PUSH
5290: LD_EXP 15
5294: PPUSH
5295: LD_VAR 0 1
5299: PPUSH
5300: CALL 25500 0 2
5304: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
5305: LD_ADDR_VAR 0 4
5309: PUSH
5310: DOUBLE
5311: LD_INT 1
5313: DEC
5314: ST_TO_ADDR
5315: LD_EXP 16
5319: PUSH
5320: LD_VAR 0 5
5324: ARRAY
5325: PUSH
5326: FOR_TO
5327: IFFALSE 5368
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
5329: LD_EXP 16
5333: PUSH
5334: LD_VAR 0 5
5338: ARRAY
5339: PUSH
5340: LD_VAR 0 4
5344: ARRAY
5345: PUSH
5346: LD_INT 1
5348: ARRAY
5349: PUSH
5350: LD_VAR 0 2
5354: EQUAL
5355: IFFALSE 5366
// KillUnit ( vehicle ) ;
5357: LD_VAR 0 2
5361: PPUSH
5362: CALL_OW 66
5366: GO 5326
5368: POP
5369: POP
// end ;
5370: LD_VAR 0 3
5374: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
5375: LD_EXP 20
5379: NOT
5380: IFFALSE 5415
5382: GO 5384
5384: DISABLE
// begin initMiner := true ;
5385: LD_ADDR_EXP 20
5389: PUSH
5390: LD_INT 1
5392: ST_TO_ADDR
// minersList := [ ] ;
5393: LD_ADDR_EXP 21
5397: PUSH
5398: EMPTY
5399: ST_TO_ADDR
// minerMinesList := [ ] ;
5400: LD_ADDR_EXP 22
5404: PUSH
5405: EMPTY
5406: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
5407: LD_ADDR_EXP 23
5411: PUSH
5412: LD_INT 5
5414: ST_TO_ADDR
// end ;
5415: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
5416: LD_EXP 20
5420: PUSH
5421: LD_INT 34
5423: PUSH
5424: LD_EXP 86
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: PPUSH
5433: CALL_OW 69
5437: AND
5438: IFFALSE 5901
5440: GO 5442
5442: DISABLE
5443: LD_INT 0
5445: PPUSH
5446: PPUSH
5447: PPUSH
5448: PPUSH
// begin enable ;
5449: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
5450: LD_ADDR_VAR 0 1
5454: PUSH
5455: LD_INT 34
5457: PUSH
5458: LD_EXP 86
5462: PUSH
5463: EMPTY
5464: LIST
5465: LIST
5466: PPUSH
5467: CALL_OW 69
5471: PUSH
5472: FOR_IN
5473: IFFALSE 5545
// begin if not i in minersList then
5475: LD_VAR 0 1
5479: PUSH
5480: LD_EXP 21
5484: IN
5485: NOT
5486: IFFALSE 5543
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
5488: LD_ADDR_EXP 21
5492: PUSH
5493: LD_EXP 21
5497: PPUSH
5498: LD_EXP 21
5502: PUSH
5503: LD_INT 1
5505: PLUS
5506: PPUSH
5507: LD_VAR 0 1
5511: PPUSH
5512: CALL_OW 1
5516: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
5517: LD_ADDR_EXP 22
5521: PUSH
5522: LD_EXP 22
5526: PPUSH
5527: LD_EXP 22
5531: PUSH
5532: LD_INT 1
5534: PLUS
5535: PPUSH
5536: EMPTY
5537: PPUSH
5538: CALL_OW 1
5542: ST_TO_ADDR
// end end ;
5543: GO 5472
5545: POP
5546: POP
// for i := minerMinesList downto 1 do
5547: LD_ADDR_VAR 0 1
5551: PUSH
5552: DOUBLE
5553: LD_EXP 22
5557: INC
5558: ST_TO_ADDR
5559: LD_INT 1
5561: PUSH
5562: FOR_DOWNTO
5563: IFFALSE 5899
// begin if IsLive ( minersList [ i ] ) then
5565: LD_EXP 21
5569: PUSH
5570: LD_VAR 0 1
5574: ARRAY
5575: PPUSH
5576: CALL_OW 300
5580: IFFALSE 5608
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
5582: LD_EXP 21
5586: PUSH
5587: LD_VAR 0 1
5591: ARRAY
5592: PPUSH
5593: LD_EXP 22
5597: PUSH
5598: LD_VAR 0 1
5602: ARRAY
5603: PPUSH
5604: CALL_OW 505
// if not minerMinesList [ i ] then
5608: LD_EXP 22
5612: PUSH
5613: LD_VAR 0 1
5617: ARRAY
5618: NOT
5619: IFFALSE 5623
// continue ;
5621: GO 5562
// for j := minerMinesList [ i ] downto 1 do
5623: LD_ADDR_VAR 0 2
5627: PUSH
5628: DOUBLE
5629: LD_EXP 22
5633: PUSH
5634: LD_VAR 0 1
5638: ARRAY
5639: INC
5640: ST_TO_ADDR
5641: LD_INT 1
5643: PUSH
5644: FOR_DOWNTO
5645: IFFALSE 5895
// begin side := GetSide ( minersList [ i ] ) ;
5647: LD_ADDR_VAR 0 3
5651: PUSH
5652: LD_EXP 21
5656: PUSH
5657: LD_VAR 0 1
5661: ARRAY
5662: PPUSH
5663: CALL_OW 255
5667: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
5668: LD_ADDR_VAR 0 4
5672: PUSH
5673: LD_EXP 22
5677: PUSH
5678: LD_VAR 0 1
5682: ARRAY
5683: PUSH
5684: LD_VAR 0 2
5688: ARRAY
5689: PUSH
5690: LD_INT 1
5692: ARRAY
5693: PPUSH
5694: LD_EXP 22
5698: PUSH
5699: LD_VAR 0 1
5703: ARRAY
5704: PUSH
5705: LD_VAR 0 2
5709: ARRAY
5710: PUSH
5711: LD_INT 2
5713: ARRAY
5714: PPUSH
5715: CALL_OW 428
5719: ST_TO_ADDR
// if not tmp then
5720: LD_VAR 0 4
5724: NOT
5725: IFFALSE 5729
// continue ;
5727: GO 5644
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
5729: LD_VAR 0 4
5733: PUSH
5734: LD_INT 81
5736: PUSH
5737: LD_VAR 0 3
5741: PUSH
5742: EMPTY
5743: LIST
5744: LIST
5745: PPUSH
5746: CALL_OW 69
5750: IN
5751: PUSH
5752: LD_EXP 22
5756: PUSH
5757: LD_VAR 0 1
5761: ARRAY
5762: PUSH
5763: LD_VAR 0 2
5767: ARRAY
5768: PUSH
5769: LD_INT 1
5771: ARRAY
5772: PPUSH
5773: LD_EXP 22
5777: PUSH
5778: LD_VAR 0 1
5782: ARRAY
5783: PUSH
5784: LD_VAR 0 2
5788: ARRAY
5789: PUSH
5790: LD_INT 2
5792: ARRAY
5793: PPUSH
5794: CALL_OW 458
5798: AND
5799: IFFALSE 5893
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
5801: LD_EXP 22
5805: PUSH
5806: LD_VAR 0 1
5810: ARRAY
5811: PUSH
5812: LD_VAR 0 2
5816: ARRAY
5817: PUSH
5818: LD_INT 1
5820: ARRAY
5821: PPUSH
5822: LD_EXP 22
5826: PUSH
5827: LD_VAR 0 1
5831: ARRAY
5832: PUSH
5833: LD_VAR 0 2
5837: ARRAY
5838: PUSH
5839: LD_INT 2
5841: ARRAY
5842: PPUSH
5843: LD_VAR 0 3
5847: PPUSH
5848: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
5852: LD_ADDR_EXP 22
5856: PUSH
5857: LD_EXP 22
5861: PPUSH
5862: LD_VAR 0 1
5866: PPUSH
5867: LD_EXP 22
5871: PUSH
5872: LD_VAR 0 1
5876: ARRAY
5877: PPUSH
5878: LD_VAR 0 2
5882: PPUSH
5883: CALL_OW 3
5887: PPUSH
5888: CALL_OW 1
5892: ST_TO_ADDR
// end ; end ;
5893: GO 5644
5895: POP
5896: POP
// end ;
5897: GO 5562
5899: POP
5900: POP
// end ;
5901: PPOPN 4
5903: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
5904: LD_INT 0
5906: PPUSH
5907: PPUSH
// result := false ;
5908: LD_ADDR_VAR 0 4
5912: PUSH
5913: LD_INT 0
5915: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
5916: LD_VAR 0 1
5920: PPUSH
5921: CALL_OW 264
5925: PUSH
5926: LD_EXP 86
5930: EQUAL
5931: NOT
5932: IFFALSE 5936
// exit ;
5934: GO 6176
// index := GetElementIndex ( minersList , unit ) ;
5936: LD_ADDR_VAR 0 5
5940: PUSH
5941: LD_EXP 21
5945: PPUSH
5946: LD_VAR 0 1
5950: PPUSH
5951: CALL 25500 0 2
5955: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
5956: LD_EXP 22
5960: PUSH
5961: LD_VAR 0 5
5965: ARRAY
5966: PUSH
5967: LD_EXP 23
5971: GREATEREQUAL
5972: IFFALSE 5976
// exit ;
5974: GO 6176
// ComMoveXY ( unit , x , y ) ;
5976: LD_VAR 0 1
5980: PPUSH
5981: LD_VAR 0 2
5985: PPUSH
5986: LD_VAR 0 3
5990: PPUSH
5991: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
5995: LD_INT 35
5997: PPUSH
5998: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
6002: LD_VAR 0 1
6006: PPUSH
6007: LD_VAR 0 2
6011: PPUSH
6012: LD_VAR 0 3
6016: PPUSH
6017: CALL 56272 0 3
6021: NOT
6022: PUSH
6023: LD_VAR 0 1
6027: PPUSH
6028: CALL_OW 314
6032: AND
6033: IFFALSE 6037
// exit ;
6035: GO 6176
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
6037: LD_VAR 0 2
6041: PPUSH
6042: LD_VAR 0 3
6046: PPUSH
6047: CALL_OW 428
6051: PUSH
6052: LD_VAR 0 1
6056: EQUAL
6057: PUSH
6058: LD_VAR 0 1
6062: PPUSH
6063: CALL_OW 314
6067: NOT
6068: AND
6069: IFFALSE 5995
// PlaySoundXY ( x , y , PlantMine ) ;
6071: LD_VAR 0 2
6075: PPUSH
6076: LD_VAR 0 3
6080: PPUSH
6081: LD_STRING PlantMine
6083: PPUSH
6084: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
6088: LD_VAR 0 2
6092: PPUSH
6093: LD_VAR 0 3
6097: PPUSH
6098: LD_VAR 0 1
6102: PPUSH
6103: CALL_OW 255
6107: PPUSH
6108: LD_INT 0
6110: PPUSH
6111: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
6115: LD_ADDR_EXP 22
6119: PUSH
6120: LD_EXP 22
6124: PPUSH
6125: LD_VAR 0 5
6129: PUSH
6130: LD_EXP 22
6134: PUSH
6135: LD_VAR 0 5
6139: ARRAY
6140: PUSH
6141: LD_INT 1
6143: PLUS
6144: PUSH
6145: EMPTY
6146: LIST
6147: LIST
6148: PPUSH
6149: LD_VAR 0 2
6153: PUSH
6154: LD_VAR 0 3
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: PPUSH
6163: CALL 25715 0 3
6167: ST_TO_ADDR
// result := true ;
6168: LD_ADDR_VAR 0 4
6172: PUSH
6173: LD_INT 1
6175: ST_TO_ADDR
// end ;
6176: LD_VAR 0 4
6180: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
6181: LD_INT 0
6183: PPUSH
6184: PPUSH
6185: PPUSH
// if not unit in minersList then
6186: LD_VAR 0 1
6190: PUSH
6191: LD_EXP 21
6195: IN
6196: NOT
6197: IFFALSE 6201
// exit ;
6199: GO 6593
// index := GetElementIndex ( minersList , unit ) ;
6201: LD_ADDR_VAR 0 6
6205: PUSH
6206: LD_EXP 21
6210: PPUSH
6211: LD_VAR 0 1
6215: PPUSH
6216: CALL 25500 0 2
6220: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
6221: LD_ADDR_VAR 0 5
6225: PUSH
6226: DOUBLE
6227: LD_EXP 22
6231: PUSH
6232: LD_VAR 0 6
6236: ARRAY
6237: INC
6238: ST_TO_ADDR
6239: LD_INT 1
6241: PUSH
6242: FOR_DOWNTO
6243: IFFALSE 6404
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
6245: LD_EXP 22
6249: PUSH
6250: LD_VAR 0 6
6254: ARRAY
6255: PUSH
6256: LD_VAR 0 5
6260: ARRAY
6261: PUSH
6262: LD_INT 1
6264: ARRAY
6265: PUSH
6266: LD_VAR 0 2
6270: EQUAL
6271: PUSH
6272: LD_EXP 22
6276: PUSH
6277: LD_VAR 0 6
6281: ARRAY
6282: PUSH
6283: LD_VAR 0 5
6287: ARRAY
6288: PUSH
6289: LD_INT 2
6291: ARRAY
6292: PUSH
6293: LD_VAR 0 3
6297: EQUAL
6298: AND
6299: IFFALSE 6402
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
6301: LD_EXP 22
6305: PUSH
6306: LD_VAR 0 6
6310: ARRAY
6311: PUSH
6312: LD_VAR 0 5
6316: ARRAY
6317: PUSH
6318: LD_INT 1
6320: ARRAY
6321: PPUSH
6322: LD_EXP 22
6326: PUSH
6327: LD_VAR 0 6
6331: ARRAY
6332: PUSH
6333: LD_VAR 0 5
6337: ARRAY
6338: PUSH
6339: LD_INT 2
6341: ARRAY
6342: PPUSH
6343: LD_VAR 0 1
6347: PPUSH
6348: CALL_OW 255
6352: PPUSH
6353: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
6357: LD_ADDR_EXP 22
6361: PUSH
6362: LD_EXP 22
6366: PPUSH
6367: LD_VAR 0 6
6371: PPUSH
6372: LD_EXP 22
6376: PUSH
6377: LD_VAR 0 6
6381: ARRAY
6382: PPUSH
6383: LD_VAR 0 5
6387: PPUSH
6388: CALL_OW 3
6392: PPUSH
6393: CALL_OW 1
6397: ST_TO_ADDR
// exit ;
6398: POP
6399: POP
6400: GO 6593
// end ; end ;
6402: GO 6242
6404: POP
6405: POP
// for i := minerMinesList [ index ] downto 1 do
6406: LD_ADDR_VAR 0 5
6410: PUSH
6411: DOUBLE
6412: LD_EXP 22
6416: PUSH
6417: LD_VAR 0 6
6421: ARRAY
6422: INC
6423: ST_TO_ADDR
6424: LD_INT 1
6426: PUSH
6427: FOR_DOWNTO
6428: IFFALSE 6591
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
6430: LD_EXP 22
6434: PUSH
6435: LD_VAR 0 6
6439: ARRAY
6440: PUSH
6441: LD_VAR 0 5
6445: ARRAY
6446: PUSH
6447: LD_INT 1
6449: ARRAY
6450: PPUSH
6451: LD_EXP 22
6455: PUSH
6456: LD_VAR 0 6
6460: ARRAY
6461: PUSH
6462: LD_VAR 0 5
6466: ARRAY
6467: PUSH
6468: LD_INT 2
6470: ARRAY
6471: PPUSH
6472: LD_VAR 0 2
6476: PPUSH
6477: LD_VAR 0 3
6481: PPUSH
6482: CALL_OW 298
6486: PUSH
6487: LD_INT 6
6489: LESS
6490: IFFALSE 6589
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
6492: LD_EXP 22
6496: PUSH
6497: LD_VAR 0 6
6501: ARRAY
6502: PUSH
6503: LD_VAR 0 5
6507: ARRAY
6508: PUSH
6509: LD_INT 1
6511: ARRAY
6512: PPUSH
6513: LD_EXP 22
6517: PUSH
6518: LD_VAR 0 6
6522: ARRAY
6523: PUSH
6524: LD_VAR 0 5
6528: ARRAY
6529: PUSH
6530: LD_INT 2
6532: ARRAY
6533: PPUSH
6534: LD_VAR 0 1
6538: PPUSH
6539: CALL_OW 255
6543: PPUSH
6544: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
6548: LD_ADDR_EXP 22
6552: PUSH
6553: LD_EXP 22
6557: PPUSH
6558: LD_VAR 0 6
6562: PPUSH
6563: LD_EXP 22
6567: PUSH
6568: LD_VAR 0 6
6572: ARRAY
6573: PPUSH
6574: LD_VAR 0 5
6578: PPUSH
6579: CALL_OW 3
6583: PPUSH
6584: CALL_OW 1
6588: ST_TO_ADDR
// end ; end ;
6589: GO 6427
6591: POP
6592: POP
// end ;
6593: LD_VAR 0 4
6597: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
6598: LD_INT 0
6600: PPUSH
6601: PPUSH
6602: PPUSH
6603: PPUSH
6604: PPUSH
6605: PPUSH
6606: PPUSH
6607: PPUSH
6608: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
6609: LD_VAR 0 1
6613: PPUSH
6614: CALL_OW 264
6618: PUSH
6619: LD_EXP 86
6623: EQUAL
6624: NOT
6625: PUSH
6626: LD_VAR 0 1
6630: PUSH
6631: LD_EXP 21
6635: IN
6636: NOT
6637: OR
6638: IFFALSE 6642
// exit ;
6640: GO 6964
// index := GetElementIndex ( minersList , unit ) ;
6642: LD_ADDR_VAR 0 6
6646: PUSH
6647: LD_EXP 21
6651: PPUSH
6652: LD_VAR 0 1
6656: PPUSH
6657: CALL 25500 0 2
6661: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
6662: LD_ADDR_VAR 0 8
6666: PUSH
6667: LD_EXP 23
6671: PUSH
6672: LD_EXP 22
6676: PUSH
6677: LD_VAR 0 6
6681: ARRAY
6682: MINUS
6683: ST_TO_ADDR
// if not minesFreeAmount then
6684: LD_VAR 0 8
6688: NOT
6689: IFFALSE 6693
// exit ;
6691: GO 6964
// tmp := [ ] ;
6693: LD_ADDR_VAR 0 7
6697: PUSH
6698: EMPTY
6699: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
6700: LD_ADDR_VAR 0 5
6704: PUSH
6705: DOUBLE
6706: LD_INT 1
6708: DEC
6709: ST_TO_ADDR
6710: LD_VAR 0 8
6714: PUSH
6715: FOR_TO
6716: IFFALSE 6911
// begin _d := rand ( 0 , 5 ) ;
6718: LD_ADDR_VAR 0 11
6722: PUSH
6723: LD_INT 0
6725: PPUSH
6726: LD_INT 5
6728: PPUSH
6729: CALL_OW 12
6733: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
6734: LD_ADDR_VAR 0 12
6738: PUSH
6739: LD_INT 2
6741: PPUSH
6742: LD_INT 6
6744: PPUSH
6745: CALL_OW 12
6749: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
6750: LD_ADDR_VAR 0 9
6754: PUSH
6755: LD_VAR 0 2
6759: PPUSH
6760: LD_VAR 0 11
6764: PPUSH
6765: LD_VAR 0 12
6769: PPUSH
6770: CALL_OW 272
6774: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
6775: LD_ADDR_VAR 0 10
6779: PUSH
6780: LD_VAR 0 3
6784: PPUSH
6785: LD_VAR 0 11
6789: PPUSH
6790: LD_VAR 0 12
6794: PPUSH
6795: CALL_OW 273
6799: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
6800: LD_VAR 0 9
6804: PPUSH
6805: LD_VAR 0 10
6809: PPUSH
6810: CALL_OW 488
6814: PUSH
6815: LD_VAR 0 9
6819: PUSH
6820: LD_VAR 0 10
6824: PUSH
6825: EMPTY
6826: LIST
6827: LIST
6828: PUSH
6829: LD_VAR 0 7
6833: IN
6834: NOT
6835: AND
6836: PUSH
6837: LD_VAR 0 9
6841: PPUSH
6842: LD_VAR 0 10
6846: PPUSH
6847: CALL_OW 458
6851: NOT
6852: AND
6853: IFFALSE 6895
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
6855: LD_ADDR_VAR 0 7
6859: PUSH
6860: LD_VAR 0 7
6864: PPUSH
6865: LD_VAR 0 7
6869: PUSH
6870: LD_INT 1
6872: PLUS
6873: PPUSH
6874: LD_VAR 0 9
6878: PUSH
6879: LD_VAR 0 10
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: PPUSH
6888: CALL_OW 1
6892: ST_TO_ADDR
6893: GO 6909
// i := i - 1 ;
6895: LD_ADDR_VAR 0 5
6899: PUSH
6900: LD_VAR 0 5
6904: PUSH
6905: LD_INT 1
6907: MINUS
6908: ST_TO_ADDR
// end ;
6909: GO 6715
6911: POP
6912: POP
// for i in tmp do
6913: LD_ADDR_VAR 0 5
6917: PUSH
6918: LD_VAR 0 7
6922: PUSH
6923: FOR_IN
6924: IFFALSE 6962
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
6926: LD_VAR 0 1
6930: PPUSH
6931: LD_VAR 0 5
6935: PUSH
6936: LD_INT 1
6938: ARRAY
6939: PPUSH
6940: LD_VAR 0 5
6944: PUSH
6945: LD_INT 2
6947: ARRAY
6948: PPUSH
6949: CALL 5904 0 3
6953: NOT
6954: IFFALSE 6960
// exit ;
6956: POP
6957: POP
6958: GO 6964
6960: GO 6923
6962: POP
6963: POP
// end ;
6964: LD_VAR 0 4
6968: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
6969: LD_INT 0
6971: PPUSH
6972: PPUSH
6973: PPUSH
6974: PPUSH
6975: PPUSH
6976: PPUSH
6977: PPUSH
// if not GetClass ( unit ) = class_sniper then
6978: LD_VAR 0 1
6982: PPUSH
6983: CALL_OW 257
6987: PUSH
6988: LD_INT 5
6990: EQUAL
6991: NOT
6992: IFFALSE 6996
// exit ;
6994: GO 7384
// dist := 8 ;
6996: LD_ADDR_VAR 0 5
7000: PUSH
7001: LD_INT 8
7003: ST_TO_ADDR
// viewRange := 12 ;
7004: LD_ADDR_VAR 0 7
7008: PUSH
7009: LD_INT 12
7011: ST_TO_ADDR
// side := GetSide ( unit ) ;
7012: LD_ADDR_VAR 0 6
7016: PUSH
7017: LD_VAR 0 1
7021: PPUSH
7022: CALL_OW 255
7026: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
7027: LD_INT 61
7029: PPUSH
7030: LD_VAR 0 6
7034: PPUSH
7035: CALL_OW 321
7039: PUSH
7040: LD_INT 2
7042: EQUAL
7043: IFFALSE 7053
// viewRange := 16 ;
7045: LD_ADDR_VAR 0 7
7049: PUSH
7050: LD_INT 16
7052: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
7053: LD_VAR 0 1
7057: PPUSH
7058: LD_VAR 0 2
7062: PPUSH
7063: LD_VAR 0 3
7067: PPUSH
7068: CALL_OW 297
7072: PUSH
7073: LD_VAR 0 5
7077: GREATER
7078: IFFALSE 7157
// begin ComMoveXY ( unit , x , y ) ;
7080: LD_VAR 0 1
7084: PPUSH
7085: LD_VAR 0 2
7089: PPUSH
7090: LD_VAR 0 3
7094: PPUSH
7095: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7099: LD_INT 35
7101: PPUSH
7102: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
7106: LD_VAR 0 1
7110: PPUSH
7111: LD_VAR 0 2
7115: PPUSH
7116: LD_VAR 0 3
7120: PPUSH
7121: CALL 56272 0 3
7125: NOT
7126: IFFALSE 7130
// exit ;
7128: GO 7384
// until GetDistUnitXY ( unit , x , y ) < dist ;
7130: LD_VAR 0 1
7134: PPUSH
7135: LD_VAR 0 2
7139: PPUSH
7140: LD_VAR 0 3
7144: PPUSH
7145: CALL_OW 297
7149: PUSH
7150: LD_VAR 0 5
7154: LESS
7155: IFFALSE 7099
// end ; ComTurnXY ( unit , x , y ) ;
7157: LD_VAR 0 1
7161: PPUSH
7162: LD_VAR 0 2
7166: PPUSH
7167: LD_VAR 0 3
7171: PPUSH
7172: CALL_OW 118
// wait ( 5 ) ;
7176: LD_INT 5
7178: PPUSH
7179: CALL_OW 67
// _d := GetDir ( unit ) ;
7183: LD_ADDR_VAR 0 10
7187: PUSH
7188: LD_VAR 0 1
7192: PPUSH
7193: CALL_OW 254
7197: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
7198: LD_ADDR_VAR 0 8
7202: PUSH
7203: LD_VAR 0 1
7207: PPUSH
7208: CALL_OW 250
7212: PPUSH
7213: LD_VAR 0 10
7217: PPUSH
7218: LD_VAR 0 5
7222: PPUSH
7223: CALL_OW 272
7227: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
7228: LD_ADDR_VAR 0 9
7232: PUSH
7233: LD_VAR 0 1
7237: PPUSH
7238: CALL_OW 251
7242: PPUSH
7243: LD_VAR 0 10
7247: PPUSH
7248: LD_VAR 0 5
7252: PPUSH
7253: CALL_OW 273
7257: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
7258: LD_VAR 0 8
7262: PPUSH
7263: LD_VAR 0 9
7267: PPUSH
7268: CALL_OW 488
7272: NOT
7273: IFFALSE 7277
// exit ;
7275: GO 7384
// ComAnimCustom ( unit , 1 ) ;
7277: LD_VAR 0 1
7281: PPUSH
7282: LD_INT 1
7284: PPUSH
7285: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
7289: LD_VAR 0 8
7293: PPUSH
7294: LD_VAR 0 9
7298: PPUSH
7299: LD_VAR 0 6
7303: PPUSH
7304: LD_VAR 0 7
7308: PPUSH
7309: CALL_OW 330
// repeat wait ( 1 ) ;
7313: LD_INT 1
7315: PPUSH
7316: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
7320: LD_VAR 0 1
7324: PPUSH
7325: CALL_OW 316
7329: PUSH
7330: LD_VAR 0 1
7334: PPUSH
7335: CALL_OW 314
7339: OR
7340: PUSH
7341: LD_VAR 0 1
7345: PPUSH
7346: CALL_OW 302
7350: NOT
7351: OR
7352: PUSH
7353: LD_VAR 0 1
7357: PPUSH
7358: CALL_OW 301
7362: OR
7363: IFFALSE 7313
// RemoveSeeing ( _x , _y , side ) ;
7365: LD_VAR 0 8
7369: PPUSH
7370: LD_VAR 0 9
7374: PPUSH
7375: LD_VAR 0 6
7379: PPUSH
7380: CALL_OW 331
// end ; end_of_file
7384: LD_VAR 0 4
7388: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7389: LD_INT 0
7391: PPUSH
// if p2 = 100 then
7392: LD_VAR 0 2
7396: PUSH
7397: LD_INT 100
7399: EQUAL
7400: IFFALSE 8349
// begin if not StreamModeActive then
7402: LD_EXP 24
7406: NOT
7407: IFFALSE 7417
// StreamModeActive := true ;
7409: LD_ADDR_EXP 24
7413: PUSH
7414: LD_INT 1
7416: ST_TO_ADDR
// if p3 = 0 then
7417: LD_VAR 0 3
7421: PUSH
7422: LD_INT 0
7424: EQUAL
7425: IFFALSE 7431
// InitStreamMode ;
7427: CALL 8509 0 0
// if p3 = 1 then
7431: LD_VAR 0 3
7435: PUSH
7436: LD_INT 1
7438: EQUAL
7439: IFFALSE 7449
// sRocket := true ;
7441: LD_ADDR_EXP 29
7445: PUSH
7446: LD_INT 1
7448: ST_TO_ADDR
// if p3 = 2 then
7449: LD_VAR 0 3
7453: PUSH
7454: LD_INT 2
7456: EQUAL
7457: IFFALSE 7467
// sSpeed := true ;
7459: LD_ADDR_EXP 28
7463: PUSH
7464: LD_INT 1
7466: ST_TO_ADDR
// if p3 = 3 then
7467: LD_VAR 0 3
7471: PUSH
7472: LD_INT 3
7474: EQUAL
7475: IFFALSE 7485
// sEngine := true ;
7477: LD_ADDR_EXP 30
7481: PUSH
7482: LD_INT 1
7484: ST_TO_ADDR
// if p3 = 4 then
7485: LD_VAR 0 3
7489: PUSH
7490: LD_INT 4
7492: EQUAL
7493: IFFALSE 7503
// sSpec := true ;
7495: LD_ADDR_EXP 27
7499: PUSH
7500: LD_INT 1
7502: ST_TO_ADDR
// if p3 = 5 then
7503: LD_VAR 0 3
7507: PUSH
7508: LD_INT 5
7510: EQUAL
7511: IFFALSE 7521
// sLevel := true ;
7513: LD_ADDR_EXP 31
7517: PUSH
7518: LD_INT 1
7520: ST_TO_ADDR
// if p3 = 6 then
7521: LD_VAR 0 3
7525: PUSH
7526: LD_INT 6
7528: EQUAL
7529: IFFALSE 7539
// sArmoury := true ;
7531: LD_ADDR_EXP 32
7535: PUSH
7536: LD_INT 1
7538: ST_TO_ADDR
// if p3 = 7 then
7539: LD_VAR 0 3
7543: PUSH
7544: LD_INT 7
7546: EQUAL
7547: IFFALSE 7557
// sRadar := true ;
7549: LD_ADDR_EXP 33
7553: PUSH
7554: LD_INT 1
7556: ST_TO_ADDR
// if p3 = 8 then
7557: LD_VAR 0 3
7561: PUSH
7562: LD_INT 8
7564: EQUAL
7565: IFFALSE 7575
// sBunker := true ;
7567: LD_ADDR_EXP 34
7571: PUSH
7572: LD_INT 1
7574: ST_TO_ADDR
// if p3 = 9 then
7575: LD_VAR 0 3
7579: PUSH
7580: LD_INT 9
7582: EQUAL
7583: IFFALSE 7593
// sHack := true ;
7585: LD_ADDR_EXP 35
7589: PUSH
7590: LD_INT 1
7592: ST_TO_ADDR
// if p3 = 10 then
7593: LD_VAR 0 3
7597: PUSH
7598: LD_INT 10
7600: EQUAL
7601: IFFALSE 7611
// sFire := true ;
7603: LD_ADDR_EXP 36
7607: PUSH
7608: LD_INT 1
7610: ST_TO_ADDR
// if p3 = 11 then
7611: LD_VAR 0 3
7615: PUSH
7616: LD_INT 11
7618: EQUAL
7619: IFFALSE 7629
// sRefresh := true ;
7621: LD_ADDR_EXP 37
7625: PUSH
7626: LD_INT 1
7628: ST_TO_ADDR
// if p3 = 12 then
7629: LD_VAR 0 3
7633: PUSH
7634: LD_INT 12
7636: EQUAL
7637: IFFALSE 7647
// sExp := true ;
7639: LD_ADDR_EXP 38
7643: PUSH
7644: LD_INT 1
7646: ST_TO_ADDR
// if p3 = 13 then
7647: LD_VAR 0 3
7651: PUSH
7652: LD_INT 13
7654: EQUAL
7655: IFFALSE 7665
// sDepot := true ;
7657: LD_ADDR_EXP 39
7661: PUSH
7662: LD_INT 1
7664: ST_TO_ADDR
// if p3 = 14 then
7665: LD_VAR 0 3
7669: PUSH
7670: LD_INT 14
7672: EQUAL
7673: IFFALSE 7683
// sFlag := true ;
7675: LD_ADDR_EXP 40
7679: PUSH
7680: LD_INT 1
7682: ST_TO_ADDR
// if p3 = 15 then
7683: LD_VAR 0 3
7687: PUSH
7688: LD_INT 15
7690: EQUAL
7691: IFFALSE 7701
// sKamikadze := true ;
7693: LD_ADDR_EXP 48
7697: PUSH
7698: LD_INT 1
7700: ST_TO_ADDR
// if p3 = 16 then
7701: LD_VAR 0 3
7705: PUSH
7706: LD_INT 16
7708: EQUAL
7709: IFFALSE 7719
// sTroll := true ;
7711: LD_ADDR_EXP 49
7715: PUSH
7716: LD_INT 1
7718: ST_TO_ADDR
// if p3 = 17 then
7719: LD_VAR 0 3
7723: PUSH
7724: LD_INT 17
7726: EQUAL
7727: IFFALSE 7737
// sSlow := true ;
7729: LD_ADDR_EXP 50
7733: PUSH
7734: LD_INT 1
7736: ST_TO_ADDR
// if p3 = 18 then
7737: LD_VAR 0 3
7741: PUSH
7742: LD_INT 18
7744: EQUAL
7745: IFFALSE 7755
// sLack := true ;
7747: LD_ADDR_EXP 51
7751: PUSH
7752: LD_INT 1
7754: ST_TO_ADDR
// if p3 = 19 then
7755: LD_VAR 0 3
7759: PUSH
7760: LD_INT 19
7762: EQUAL
7763: IFFALSE 7773
// sTank := true ;
7765: LD_ADDR_EXP 53
7769: PUSH
7770: LD_INT 1
7772: ST_TO_ADDR
// if p3 = 20 then
7773: LD_VAR 0 3
7777: PUSH
7778: LD_INT 20
7780: EQUAL
7781: IFFALSE 7791
// sRemote := true ;
7783: LD_ADDR_EXP 54
7787: PUSH
7788: LD_INT 1
7790: ST_TO_ADDR
// if p3 = 21 then
7791: LD_VAR 0 3
7795: PUSH
7796: LD_INT 21
7798: EQUAL
7799: IFFALSE 7809
// sPowell := true ;
7801: LD_ADDR_EXP 55
7805: PUSH
7806: LD_INT 1
7808: ST_TO_ADDR
// if p3 = 22 then
7809: LD_VAR 0 3
7813: PUSH
7814: LD_INT 22
7816: EQUAL
7817: IFFALSE 7827
// sTeleport := true ;
7819: LD_ADDR_EXP 58
7823: PUSH
7824: LD_INT 1
7826: ST_TO_ADDR
// if p3 = 23 then
7827: LD_VAR 0 3
7831: PUSH
7832: LD_INT 23
7834: EQUAL
7835: IFFALSE 7845
// sOilTower := true ;
7837: LD_ADDR_EXP 60
7841: PUSH
7842: LD_INT 1
7844: ST_TO_ADDR
// if p3 = 24 then
7845: LD_VAR 0 3
7849: PUSH
7850: LD_INT 24
7852: EQUAL
7853: IFFALSE 7863
// sShovel := true ;
7855: LD_ADDR_EXP 61
7859: PUSH
7860: LD_INT 1
7862: ST_TO_ADDR
// if p3 = 25 then
7863: LD_VAR 0 3
7867: PUSH
7868: LD_INT 25
7870: EQUAL
7871: IFFALSE 7881
// sSheik := true ;
7873: LD_ADDR_EXP 62
7877: PUSH
7878: LD_INT 1
7880: ST_TO_ADDR
// if p3 = 26 then
7881: LD_VAR 0 3
7885: PUSH
7886: LD_INT 26
7888: EQUAL
7889: IFFALSE 7899
// sEarthquake := true ;
7891: LD_ADDR_EXP 64
7895: PUSH
7896: LD_INT 1
7898: ST_TO_ADDR
// if p3 = 27 then
7899: LD_VAR 0 3
7903: PUSH
7904: LD_INT 27
7906: EQUAL
7907: IFFALSE 7917
// sAI := true ;
7909: LD_ADDR_EXP 65
7913: PUSH
7914: LD_INT 1
7916: ST_TO_ADDR
// if p3 = 28 then
7917: LD_VAR 0 3
7921: PUSH
7922: LD_INT 28
7924: EQUAL
7925: IFFALSE 7935
// sCargo := true ;
7927: LD_ADDR_EXP 68
7931: PUSH
7932: LD_INT 1
7934: ST_TO_ADDR
// if p3 = 29 then
7935: LD_VAR 0 3
7939: PUSH
7940: LD_INT 29
7942: EQUAL
7943: IFFALSE 7953
// sDLaser := true ;
7945: LD_ADDR_EXP 69
7949: PUSH
7950: LD_INT 1
7952: ST_TO_ADDR
// if p3 = 30 then
7953: LD_VAR 0 3
7957: PUSH
7958: LD_INT 30
7960: EQUAL
7961: IFFALSE 7971
// sExchange := true ;
7963: LD_ADDR_EXP 70
7967: PUSH
7968: LD_INT 1
7970: ST_TO_ADDR
// if p3 = 31 then
7971: LD_VAR 0 3
7975: PUSH
7976: LD_INT 31
7978: EQUAL
7979: IFFALSE 7989
// sFac := true ;
7981: LD_ADDR_EXP 71
7985: PUSH
7986: LD_INT 1
7988: ST_TO_ADDR
// if p3 = 32 then
7989: LD_VAR 0 3
7993: PUSH
7994: LD_INT 32
7996: EQUAL
7997: IFFALSE 8007
// sPower := true ;
7999: LD_ADDR_EXP 72
8003: PUSH
8004: LD_INT 1
8006: ST_TO_ADDR
// if p3 = 33 then
8007: LD_VAR 0 3
8011: PUSH
8012: LD_INT 33
8014: EQUAL
8015: IFFALSE 8025
// sRandom := true ;
8017: LD_ADDR_EXP 73
8021: PUSH
8022: LD_INT 1
8024: ST_TO_ADDR
// if p3 = 34 then
8025: LD_VAR 0 3
8029: PUSH
8030: LD_INT 34
8032: EQUAL
8033: IFFALSE 8043
// sShield := true ;
8035: LD_ADDR_EXP 74
8039: PUSH
8040: LD_INT 1
8042: ST_TO_ADDR
// if p3 = 35 then
8043: LD_VAR 0 3
8047: PUSH
8048: LD_INT 35
8050: EQUAL
8051: IFFALSE 8061
// sTime := true ;
8053: LD_ADDR_EXP 75
8057: PUSH
8058: LD_INT 1
8060: ST_TO_ADDR
// if p3 = 36 then
8061: LD_VAR 0 3
8065: PUSH
8066: LD_INT 36
8068: EQUAL
8069: IFFALSE 8079
// sTools := true ;
8071: LD_ADDR_EXP 76
8075: PUSH
8076: LD_INT 1
8078: ST_TO_ADDR
// if p3 = 101 then
8079: LD_VAR 0 3
8083: PUSH
8084: LD_INT 101
8086: EQUAL
8087: IFFALSE 8097
// sSold := true ;
8089: LD_ADDR_EXP 41
8093: PUSH
8094: LD_INT 1
8096: ST_TO_ADDR
// if p3 = 102 then
8097: LD_VAR 0 3
8101: PUSH
8102: LD_INT 102
8104: EQUAL
8105: IFFALSE 8115
// sDiff := true ;
8107: LD_ADDR_EXP 42
8111: PUSH
8112: LD_INT 1
8114: ST_TO_ADDR
// if p3 = 103 then
8115: LD_VAR 0 3
8119: PUSH
8120: LD_INT 103
8122: EQUAL
8123: IFFALSE 8133
// sFog := true ;
8125: LD_ADDR_EXP 45
8129: PUSH
8130: LD_INT 1
8132: ST_TO_ADDR
// if p3 = 104 then
8133: LD_VAR 0 3
8137: PUSH
8138: LD_INT 104
8140: EQUAL
8141: IFFALSE 8151
// sReset := true ;
8143: LD_ADDR_EXP 46
8147: PUSH
8148: LD_INT 1
8150: ST_TO_ADDR
// if p3 = 105 then
8151: LD_VAR 0 3
8155: PUSH
8156: LD_INT 105
8158: EQUAL
8159: IFFALSE 8169
// sSun := true ;
8161: LD_ADDR_EXP 47
8165: PUSH
8166: LD_INT 1
8168: ST_TO_ADDR
// if p3 = 106 then
8169: LD_VAR 0 3
8173: PUSH
8174: LD_INT 106
8176: EQUAL
8177: IFFALSE 8187
// sTiger := true ;
8179: LD_ADDR_EXP 43
8183: PUSH
8184: LD_INT 1
8186: ST_TO_ADDR
// if p3 = 107 then
8187: LD_VAR 0 3
8191: PUSH
8192: LD_INT 107
8194: EQUAL
8195: IFFALSE 8205
// sBomb := true ;
8197: LD_ADDR_EXP 44
8201: PUSH
8202: LD_INT 1
8204: ST_TO_ADDR
// if p3 = 108 then
8205: LD_VAR 0 3
8209: PUSH
8210: LD_INT 108
8212: EQUAL
8213: IFFALSE 8223
// sWound := true ;
8215: LD_ADDR_EXP 52
8219: PUSH
8220: LD_INT 1
8222: ST_TO_ADDR
// if p3 = 109 then
8223: LD_VAR 0 3
8227: PUSH
8228: LD_INT 109
8230: EQUAL
8231: IFFALSE 8241
// sBetray := true ;
8233: LD_ADDR_EXP 56
8237: PUSH
8238: LD_INT 1
8240: ST_TO_ADDR
// if p3 = 110 then
8241: LD_VAR 0 3
8245: PUSH
8246: LD_INT 110
8248: EQUAL
8249: IFFALSE 8259
// sContamin := true ;
8251: LD_ADDR_EXP 57
8255: PUSH
8256: LD_INT 1
8258: ST_TO_ADDR
// if p3 = 111 then
8259: LD_VAR 0 3
8263: PUSH
8264: LD_INT 111
8266: EQUAL
8267: IFFALSE 8277
// sOil := true ;
8269: LD_ADDR_EXP 59
8273: PUSH
8274: LD_INT 1
8276: ST_TO_ADDR
// if p3 = 112 then
8277: LD_VAR 0 3
8281: PUSH
8282: LD_INT 112
8284: EQUAL
8285: IFFALSE 8295
// sStu := true ;
8287: LD_ADDR_EXP 63
8291: PUSH
8292: LD_INT 1
8294: ST_TO_ADDR
// if p3 = 113 then
8295: LD_VAR 0 3
8299: PUSH
8300: LD_INT 113
8302: EQUAL
8303: IFFALSE 8313
// sBazooka := true ;
8305: LD_ADDR_EXP 66
8309: PUSH
8310: LD_INT 1
8312: ST_TO_ADDR
// if p3 = 114 then
8313: LD_VAR 0 3
8317: PUSH
8318: LD_INT 114
8320: EQUAL
8321: IFFALSE 8331
// sMortar := true ;
8323: LD_ADDR_EXP 67
8327: PUSH
8328: LD_INT 1
8330: ST_TO_ADDR
// if p3 = 115 then
8331: LD_VAR 0 3
8335: PUSH
8336: LD_INT 115
8338: EQUAL
8339: IFFALSE 8349
// sRanger := true ;
8341: LD_ADDR_EXP 77
8345: PUSH
8346: LD_INT 1
8348: ST_TO_ADDR
// end ; if p2 = 101 then
8349: LD_VAR 0 2
8353: PUSH
8354: LD_INT 101
8356: EQUAL
8357: IFFALSE 8485
// begin case p3 of 1 :
8359: LD_VAR 0 3
8363: PUSH
8364: LD_INT 1
8366: DOUBLE
8367: EQUAL
8368: IFTRUE 8372
8370: GO 8379
8372: POP
// hHackUnlimitedResources ; 2 :
8373: CALL 19522 0 0
8377: GO 8485
8379: LD_INT 2
8381: DOUBLE
8382: EQUAL
8383: IFTRUE 8387
8385: GO 8394
8387: POP
// hHackSetLevel10 ; 3 :
8388: CALL 19655 0 0
8392: GO 8485
8394: LD_INT 3
8396: DOUBLE
8397: EQUAL
8398: IFTRUE 8402
8400: GO 8409
8402: POP
// hHackSetLevel10YourUnits ; 4 :
8403: CALL 19740 0 0
8407: GO 8485
8409: LD_INT 4
8411: DOUBLE
8412: EQUAL
8413: IFTRUE 8417
8415: GO 8424
8417: POP
// hHackInvincible ; 5 :
8418: CALL 20188 0 0
8422: GO 8485
8424: LD_INT 5
8426: DOUBLE
8427: EQUAL
8428: IFTRUE 8432
8430: GO 8439
8432: POP
// hHackInvisible ; 6 :
8433: CALL 20299 0 0
8437: GO 8485
8439: LD_INT 6
8441: DOUBLE
8442: EQUAL
8443: IFTRUE 8447
8445: GO 8454
8447: POP
// hHackChangeYourSide ; 7 :
8448: CALL 20356 0 0
8452: GO 8485
8454: LD_INT 7
8456: DOUBLE
8457: EQUAL
8458: IFTRUE 8462
8460: GO 8469
8462: POP
// hHackChangeUnitSide ; 8 :
8463: CALL 20398 0 0
8467: GO 8485
8469: LD_INT 8
8471: DOUBLE
8472: EQUAL
8473: IFTRUE 8477
8475: GO 8484
8477: POP
// hHackFog ; end ;
8478: CALL 20499 0 0
8482: GO 8485
8484: POP
// end ; end ;
8485: LD_VAR 0 7
8489: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
8490: GO 8492
8492: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
8493: LD_STRING initStreamRollete();
8495: PPUSH
8496: CALL_OW 559
// InitStreamMode ;
8500: CALL 8509 0 0
// DefineStreamItems ( ) ;
8504: CALL 8949 0 0
// end ;
8508: END
// function InitStreamMode ; begin
8509: LD_INT 0
8511: PPUSH
// streamModeActive := false ;
8512: LD_ADDR_EXP 24
8516: PUSH
8517: LD_INT 0
8519: ST_TO_ADDR
// normalCounter := 36 ;
8520: LD_ADDR_EXP 25
8524: PUSH
8525: LD_INT 36
8527: ST_TO_ADDR
// hardcoreCounter := 16 ;
8528: LD_ADDR_EXP 26
8532: PUSH
8533: LD_INT 16
8535: ST_TO_ADDR
// sRocket := false ;
8536: LD_ADDR_EXP 29
8540: PUSH
8541: LD_INT 0
8543: ST_TO_ADDR
// sSpeed := false ;
8544: LD_ADDR_EXP 28
8548: PUSH
8549: LD_INT 0
8551: ST_TO_ADDR
// sEngine := false ;
8552: LD_ADDR_EXP 30
8556: PUSH
8557: LD_INT 0
8559: ST_TO_ADDR
// sSpec := false ;
8560: LD_ADDR_EXP 27
8564: PUSH
8565: LD_INT 0
8567: ST_TO_ADDR
// sLevel := false ;
8568: LD_ADDR_EXP 31
8572: PUSH
8573: LD_INT 0
8575: ST_TO_ADDR
// sArmoury := false ;
8576: LD_ADDR_EXP 32
8580: PUSH
8581: LD_INT 0
8583: ST_TO_ADDR
// sRadar := false ;
8584: LD_ADDR_EXP 33
8588: PUSH
8589: LD_INT 0
8591: ST_TO_ADDR
// sBunker := false ;
8592: LD_ADDR_EXP 34
8596: PUSH
8597: LD_INT 0
8599: ST_TO_ADDR
// sHack := false ;
8600: LD_ADDR_EXP 35
8604: PUSH
8605: LD_INT 0
8607: ST_TO_ADDR
// sFire := false ;
8608: LD_ADDR_EXP 36
8612: PUSH
8613: LD_INT 0
8615: ST_TO_ADDR
// sRefresh := false ;
8616: LD_ADDR_EXP 37
8620: PUSH
8621: LD_INT 0
8623: ST_TO_ADDR
// sExp := false ;
8624: LD_ADDR_EXP 38
8628: PUSH
8629: LD_INT 0
8631: ST_TO_ADDR
// sDepot := false ;
8632: LD_ADDR_EXP 39
8636: PUSH
8637: LD_INT 0
8639: ST_TO_ADDR
// sFlag := false ;
8640: LD_ADDR_EXP 40
8644: PUSH
8645: LD_INT 0
8647: ST_TO_ADDR
// sKamikadze := false ;
8648: LD_ADDR_EXP 48
8652: PUSH
8653: LD_INT 0
8655: ST_TO_ADDR
// sTroll := false ;
8656: LD_ADDR_EXP 49
8660: PUSH
8661: LD_INT 0
8663: ST_TO_ADDR
// sSlow := false ;
8664: LD_ADDR_EXP 50
8668: PUSH
8669: LD_INT 0
8671: ST_TO_ADDR
// sLack := false ;
8672: LD_ADDR_EXP 51
8676: PUSH
8677: LD_INT 0
8679: ST_TO_ADDR
// sTank := false ;
8680: LD_ADDR_EXP 53
8684: PUSH
8685: LD_INT 0
8687: ST_TO_ADDR
// sRemote := false ;
8688: LD_ADDR_EXP 54
8692: PUSH
8693: LD_INT 0
8695: ST_TO_ADDR
// sPowell := false ;
8696: LD_ADDR_EXP 55
8700: PUSH
8701: LD_INT 0
8703: ST_TO_ADDR
// sTeleport := false ;
8704: LD_ADDR_EXP 58
8708: PUSH
8709: LD_INT 0
8711: ST_TO_ADDR
// sOilTower := false ;
8712: LD_ADDR_EXP 60
8716: PUSH
8717: LD_INT 0
8719: ST_TO_ADDR
// sShovel := false ;
8720: LD_ADDR_EXP 61
8724: PUSH
8725: LD_INT 0
8727: ST_TO_ADDR
// sSheik := false ;
8728: LD_ADDR_EXP 62
8732: PUSH
8733: LD_INT 0
8735: ST_TO_ADDR
// sEarthquake := false ;
8736: LD_ADDR_EXP 64
8740: PUSH
8741: LD_INT 0
8743: ST_TO_ADDR
// sAI := false ;
8744: LD_ADDR_EXP 65
8748: PUSH
8749: LD_INT 0
8751: ST_TO_ADDR
// sCargo := false ;
8752: LD_ADDR_EXP 68
8756: PUSH
8757: LD_INT 0
8759: ST_TO_ADDR
// sDLaser := false ;
8760: LD_ADDR_EXP 69
8764: PUSH
8765: LD_INT 0
8767: ST_TO_ADDR
// sExchange := false ;
8768: LD_ADDR_EXP 70
8772: PUSH
8773: LD_INT 0
8775: ST_TO_ADDR
// sFac := false ;
8776: LD_ADDR_EXP 71
8780: PUSH
8781: LD_INT 0
8783: ST_TO_ADDR
// sPower := false ;
8784: LD_ADDR_EXP 72
8788: PUSH
8789: LD_INT 0
8791: ST_TO_ADDR
// sRandom := false ;
8792: LD_ADDR_EXP 73
8796: PUSH
8797: LD_INT 0
8799: ST_TO_ADDR
// sShield := false ;
8800: LD_ADDR_EXP 74
8804: PUSH
8805: LD_INT 0
8807: ST_TO_ADDR
// sTime := false ;
8808: LD_ADDR_EXP 75
8812: PUSH
8813: LD_INT 0
8815: ST_TO_ADDR
// sTools := false ;
8816: LD_ADDR_EXP 76
8820: PUSH
8821: LD_INT 0
8823: ST_TO_ADDR
// sSold := false ;
8824: LD_ADDR_EXP 41
8828: PUSH
8829: LD_INT 0
8831: ST_TO_ADDR
// sDiff := false ;
8832: LD_ADDR_EXP 42
8836: PUSH
8837: LD_INT 0
8839: ST_TO_ADDR
// sFog := false ;
8840: LD_ADDR_EXP 45
8844: PUSH
8845: LD_INT 0
8847: ST_TO_ADDR
// sReset := false ;
8848: LD_ADDR_EXP 46
8852: PUSH
8853: LD_INT 0
8855: ST_TO_ADDR
// sSun := false ;
8856: LD_ADDR_EXP 47
8860: PUSH
8861: LD_INT 0
8863: ST_TO_ADDR
// sTiger := false ;
8864: LD_ADDR_EXP 43
8868: PUSH
8869: LD_INT 0
8871: ST_TO_ADDR
// sBomb := false ;
8872: LD_ADDR_EXP 44
8876: PUSH
8877: LD_INT 0
8879: ST_TO_ADDR
// sWound := false ;
8880: LD_ADDR_EXP 52
8884: PUSH
8885: LD_INT 0
8887: ST_TO_ADDR
// sBetray := false ;
8888: LD_ADDR_EXP 56
8892: PUSH
8893: LD_INT 0
8895: ST_TO_ADDR
// sContamin := false ;
8896: LD_ADDR_EXP 57
8900: PUSH
8901: LD_INT 0
8903: ST_TO_ADDR
// sOil := false ;
8904: LD_ADDR_EXP 59
8908: PUSH
8909: LD_INT 0
8911: ST_TO_ADDR
// sStu := false ;
8912: LD_ADDR_EXP 63
8916: PUSH
8917: LD_INT 0
8919: ST_TO_ADDR
// sBazooka := false ;
8920: LD_ADDR_EXP 66
8924: PUSH
8925: LD_INT 0
8927: ST_TO_ADDR
// sMortar := false ;
8928: LD_ADDR_EXP 67
8932: PUSH
8933: LD_INT 0
8935: ST_TO_ADDR
// sRanger := false ;
8936: LD_ADDR_EXP 77
8940: PUSH
8941: LD_INT 0
8943: ST_TO_ADDR
// end ;
8944: LD_VAR 0 1
8948: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
8949: LD_INT 0
8951: PPUSH
8952: PPUSH
8953: PPUSH
8954: PPUSH
8955: PPUSH
// result := [ ] ;
8956: LD_ADDR_VAR 0 1
8960: PUSH
8961: EMPTY
8962: ST_TO_ADDR
// if campaign_id = 1 then
8963: LD_OWVAR 69
8967: PUSH
8968: LD_INT 1
8970: EQUAL
8971: IFFALSE 11909
// begin case mission_number of 1 :
8973: LD_OWVAR 70
8977: PUSH
8978: LD_INT 1
8980: DOUBLE
8981: EQUAL
8982: IFTRUE 8986
8984: GO 9050
8986: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
8987: LD_ADDR_VAR 0 1
8991: PUSH
8992: LD_INT 2
8994: PUSH
8995: LD_INT 4
8997: PUSH
8998: LD_INT 11
9000: PUSH
9001: LD_INT 12
9003: PUSH
9004: LD_INT 15
9006: PUSH
9007: LD_INT 16
9009: PUSH
9010: LD_INT 22
9012: PUSH
9013: LD_INT 23
9015: PUSH
9016: LD_INT 26
9018: PUSH
9019: EMPTY
9020: LIST
9021: LIST
9022: LIST
9023: LIST
9024: LIST
9025: LIST
9026: LIST
9027: LIST
9028: LIST
9029: PUSH
9030: LD_INT 101
9032: PUSH
9033: LD_INT 102
9035: PUSH
9036: LD_INT 106
9038: PUSH
9039: EMPTY
9040: LIST
9041: LIST
9042: LIST
9043: PUSH
9044: EMPTY
9045: LIST
9046: LIST
9047: ST_TO_ADDR
9048: GO 11907
9050: LD_INT 2
9052: DOUBLE
9053: EQUAL
9054: IFTRUE 9058
9056: GO 9130
9058: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
9059: LD_ADDR_VAR 0 1
9063: PUSH
9064: LD_INT 2
9066: PUSH
9067: LD_INT 4
9069: PUSH
9070: LD_INT 11
9072: PUSH
9073: LD_INT 12
9075: PUSH
9076: LD_INT 15
9078: PUSH
9079: LD_INT 16
9081: PUSH
9082: LD_INT 22
9084: PUSH
9085: LD_INT 23
9087: PUSH
9088: LD_INT 26
9090: PUSH
9091: EMPTY
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: LIST
9098: LIST
9099: LIST
9100: LIST
9101: PUSH
9102: LD_INT 101
9104: PUSH
9105: LD_INT 102
9107: PUSH
9108: LD_INT 105
9110: PUSH
9111: LD_INT 106
9113: PUSH
9114: LD_INT 108
9116: PUSH
9117: EMPTY
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: LIST
9123: PUSH
9124: EMPTY
9125: LIST
9126: LIST
9127: ST_TO_ADDR
9128: GO 11907
9130: LD_INT 3
9132: DOUBLE
9133: EQUAL
9134: IFTRUE 9138
9136: GO 9214
9138: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
9139: LD_ADDR_VAR 0 1
9143: PUSH
9144: LD_INT 2
9146: PUSH
9147: LD_INT 4
9149: PUSH
9150: LD_INT 5
9152: PUSH
9153: LD_INT 11
9155: PUSH
9156: LD_INT 12
9158: PUSH
9159: LD_INT 15
9161: PUSH
9162: LD_INT 16
9164: PUSH
9165: LD_INT 22
9167: PUSH
9168: LD_INT 26
9170: PUSH
9171: LD_INT 36
9173: PUSH
9174: EMPTY
9175: LIST
9176: LIST
9177: LIST
9178: LIST
9179: LIST
9180: LIST
9181: LIST
9182: LIST
9183: LIST
9184: LIST
9185: PUSH
9186: LD_INT 101
9188: PUSH
9189: LD_INT 102
9191: PUSH
9192: LD_INT 105
9194: PUSH
9195: LD_INT 106
9197: PUSH
9198: LD_INT 108
9200: PUSH
9201: EMPTY
9202: LIST
9203: LIST
9204: LIST
9205: LIST
9206: LIST
9207: PUSH
9208: EMPTY
9209: LIST
9210: LIST
9211: ST_TO_ADDR
9212: GO 11907
9214: LD_INT 4
9216: DOUBLE
9217: EQUAL
9218: IFTRUE 9222
9220: GO 9306
9222: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
9223: LD_ADDR_VAR 0 1
9227: PUSH
9228: LD_INT 2
9230: PUSH
9231: LD_INT 4
9233: PUSH
9234: LD_INT 5
9236: PUSH
9237: LD_INT 8
9239: PUSH
9240: LD_INT 11
9242: PUSH
9243: LD_INT 12
9245: PUSH
9246: LD_INT 15
9248: PUSH
9249: LD_INT 16
9251: PUSH
9252: LD_INT 22
9254: PUSH
9255: LD_INT 23
9257: PUSH
9258: LD_INT 26
9260: PUSH
9261: LD_INT 36
9263: PUSH
9264: EMPTY
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: PUSH
9278: LD_INT 101
9280: PUSH
9281: LD_INT 102
9283: PUSH
9284: LD_INT 105
9286: PUSH
9287: LD_INT 106
9289: PUSH
9290: LD_INT 108
9292: PUSH
9293: EMPTY
9294: LIST
9295: LIST
9296: LIST
9297: LIST
9298: LIST
9299: PUSH
9300: EMPTY
9301: LIST
9302: LIST
9303: ST_TO_ADDR
9304: GO 11907
9306: LD_INT 5
9308: DOUBLE
9309: EQUAL
9310: IFTRUE 9314
9312: GO 9414
9314: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
9315: LD_ADDR_VAR 0 1
9319: PUSH
9320: LD_INT 2
9322: PUSH
9323: LD_INT 4
9325: PUSH
9326: LD_INT 5
9328: PUSH
9329: LD_INT 6
9331: PUSH
9332: LD_INT 8
9334: PUSH
9335: LD_INT 11
9337: PUSH
9338: LD_INT 12
9340: PUSH
9341: LD_INT 15
9343: PUSH
9344: LD_INT 16
9346: PUSH
9347: LD_INT 22
9349: PUSH
9350: LD_INT 23
9352: PUSH
9353: LD_INT 25
9355: PUSH
9356: LD_INT 26
9358: PUSH
9359: LD_INT 36
9361: PUSH
9362: EMPTY
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: PUSH
9378: LD_INT 101
9380: PUSH
9381: LD_INT 102
9383: PUSH
9384: LD_INT 105
9386: PUSH
9387: LD_INT 106
9389: PUSH
9390: LD_INT 108
9392: PUSH
9393: LD_INT 109
9395: PUSH
9396: LD_INT 112
9398: PUSH
9399: EMPTY
9400: LIST
9401: LIST
9402: LIST
9403: LIST
9404: LIST
9405: LIST
9406: LIST
9407: PUSH
9408: EMPTY
9409: LIST
9410: LIST
9411: ST_TO_ADDR
9412: GO 11907
9414: LD_INT 6
9416: DOUBLE
9417: EQUAL
9418: IFTRUE 9422
9420: GO 9542
9422: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
9423: LD_ADDR_VAR 0 1
9427: PUSH
9428: LD_INT 2
9430: PUSH
9431: LD_INT 4
9433: PUSH
9434: LD_INT 5
9436: PUSH
9437: LD_INT 6
9439: PUSH
9440: LD_INT 8
9442: PUSH
9443: LD_INT 11
9445: PUSH
9446: LD_INT 12
9448: PUSH
9449: LD_INT 15
9451: PUSH
9452: LD_INT 16
9454: PUSH
9455: LD_INT 20
9457: PUSH
9458: LD_INT 21
9460: PUSH
9461: LD_INT 22
9463: PUSH
9464: LD_INT 23
9466: PUSH
9467: LD_INT 25
9469: PUSH
9470: LD_INT 26
9472: PUSH
9473: LD_INT 30
9475: PUSH
9476: LD_INT 31
9478: PUSH
9479: LD_INT 32
9481: PUSH
9482: LD_INT 36
9484: PUSH
9485: EMPTY
9486: LIST
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: LIST
9501: LIST
9502: LIST
9503: LIST
9504: LIST
9505: PUSH
9506: LD_INT 101
9508: PUSH
9509: LD_INT 102
9511: PUSH
9512: LD_INT 105
9514: PUSH
9515: LD_INT 106
9517: PUSH
9518: LD_INT 108
9520: PUSH
9521: LD_INT 109
9523: PUSH
9524: LD_INT 112
9526: PUSH
9527: EMPTY
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: PUSH
9536: EMPTY
9537: LIST
9538: LIST
9539: ST_TO_ADDR
9540: GO 11907
9542: LD_INT 7
9544: DOUBLE
9545: EQUAL
9546: IFTRUE 9550
9548: GO 9650
9550: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
9551: LD_ADDR_VAR 0 1
9555: PUSH
9556: LD_INT 2
9558: PUSH
9559: LD_INT 4
9561: PUSH
9562: LD_INT 5
9564: PUSH
9565: LD_INT 7
9567: PUSH
9568: LD_INT 11
9570: PUSH
9571: LD_INT 12
9573: PUSH
9574: LD_INT 15
9576: PUSH
9577: LD_INT 16
9579: PUSH
9580: LD_INT 20
9582: PUSH
9583: LD_INT 21
9585: PUSH
9586: LD_INT 22
9588: PUSH
9589: LD_INT 23
9591: PUSH
9592: LD_INT 25
9594: PUSH
9595: LD_INT 26
9597: PUSH
9598: EMPTY
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: PUSH
9614: LD_INT 101
9616: PUSH
9617: LD_INT 102
9619: PUSH
9620: LD_INT 103
9622: PUSH
9623: LD_INT 105
9625: PUSH
9626: LD_INT 106
9628: PUSH
9629: LD_INT 108
9631: PUSH
9632: LD_INT 112
9634: PUSH
9635: EMPTY
9636: LIST
9637: LIST
9638: LIST
9639: LIST
9640: LIST
9641: LIST
9642: LIST
9643: PUSH
9644: EMPTY
9645: LIST
9646: LIST
9647: ST_TO_ADDR
9648: GO 11907
9650: LD_INT 8
9652: DOUBLE
9653: EQUAL
9654: IFTRUE 9658
9656: GO 9786
9658: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
9659: LD_ADDR_VAR 0 1
9663: PUSH
9664: LD_INT 2
9666: PUSH
9667: LD_INT 4
9669: PUSH
9670: LD_INT 5
9672: PUSH
9673: LD_INT 6
9675: PUSH
9676: LD_INT 7
9678: PUSH
9679: LD_INT 8
9681: PUSH
9682: LD_INT 11
9684: PUSH
9685: LD_INT 12
9687: PUSH
9688: LD_INT 15
9690: PUSH
9691: LD_INT 16
9693: PUSH
9694: LD_INT 20
9696: PUSH
9697: LD_INT 21
9699: PUSH
9700: LD_INT 22
9702: PUSH
9703: LD_INT 23
9705: PUSH
9706: LD_INT 25
9708: PUSH
9709: LD_INT 26
9711: PUSH
9712: LD_INT 30
9714: PUSH
9715: LD_INT 31
9717: PUSH
9718: LD_INT 32
9720: PUSH
9721: LD_INT 36
9723: PUSH
9724: EMPTY
9725: LIST
9726: LIST
9727: LIST
9728: LIST
9729: LIST
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: LIST
9739: LIST
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: PUSH
9746: LD_INT 101
9748: PUSH
9749: LD_INT 102
9751: PUSH
9752: LD_INT 103
9754: PUSH
9755: LD_INT 105
9757: PUSH
9758: LD_INT 106
9760: PUSH
9761: LD_INT 108
9763: PUSH
9764: LD_INT 109
9766: PUSH
9767: LD_INT 112
9769: PUSH
9770: EMPTY
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: PUSH
9780: EMPTY
9781: LIST
9782: LIST
9783: ST_TO_ADDR
9784: GO 11907
9786: LD_INT 9
9788: DOUBLE
9789: EQUAL
9790: IFTRUE 9794
9792: GO 9930
9794: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
9795: LD_ADDR_VAR 0 1
9799: PUSH
9800: LD_INT 2
9802: PUSH
9803: LD_INT 4
9805: PUSH
9806: LD_INT 5
9808: PUSH
9809: LD_INT 6
9811: PUSH
9812: LD_INT 7
9814: PUSH
9815: LD_INT 8
9817: PUSH
9818: LD_INT 11
9820: PUSH
9821: LD_INT 12
9823: PUSH
9824: LD_INT 15
9826: PUSH
9827: LD_INT 16
9829: PUSH
9830: LD_INT 20
9832: PUSH
9833: LD_INT 21
9835: PUSH
9836: LD_INT 22
9838: PUSH
9839: LD_INT 23
9841: PUSH
9842: LD_INT 25
9844: PUSH
9845: LD_INT 26
9847: PUSH
9848: LD_INT 28
9850: PUSH
9851: LD_INT 30
9853: PUSH
9854: LD_INT 31
9856: PUSH
9857: LD_INT 32
9859: PUSH
9860: LD_INT 36
9862: PUSH
9863: EMPTY
9864: LIST
9865: LIST
9866: LIST
9867: LIST
9868: LIST
9869: LIST
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: PUSH
9886: LD_INT 101
9888: PUSH
9889: LD_INT 102
9891: PUSH
9892: LD_INT 103
9894: PUSH
9895: LD_INT 105
9897: PUSH
9898: LD_INT 106
9900: PUSH
9901: LD_INT 108
9903: PUSH
9904: LD_INT 109
9906: PUSH
9907: LD_INT 112
9909: PUSH
9910: LD_INT 114
9912: PUSH
9913: EMPTY
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: LIST
9919: LIST
9920: LIST
9921: LIST
9922: LIST
9923: PUSH
9924: EMPTY
9925: LIST
9926: LIST
9927: ST_TO_ADDR
9928: GO 11907
9930: LD_INT 10
9932: DOUBLE
9933: EQUAL
9934: IFTRUE 9938
9936: GO 10122
9938: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
9939: LD_ADDR_VAR 0 1
9943: PUSH
9944: LD_INT 2
9946: PUSH
9947: LD_INT 4
9949: PUSH
9950: LD_INT 5
9952: PUSH
9953: LD_INT 6
9955: PUSH
9956: LD_INT 7
9958: PUSH
9959: LD_INT 8
9961: PUSH
9962: LD_INT 9
9964: PUSH
9965: LD_INT 10
9967: PUSH
9968: LD_INT 11
9970: PUSH
9971: LD_INT 12
9973: PUSH
9974: LD_INT 13
9976: PUSH
9977: LD_INT 14
9979: PUSH
9980: LD_INT 15
9982: PUSH
9983: LD_INT 16
9985: PUSH
9986: LD_INT 17
9988: PUSH
9989: LD_INT 18
9991: PUSH
9992: LD_INT 19
9994: PUSH
9995: LD_INT 20
9997: PUSH
9998: LD_INT 21
10000: PUSH
10001: LD_INT 22
10003: PUSH
10004: LD_INT 23
10006: PUSH
10007: LD_INT 24
10009: PUSH
10010: LD_INT 25
10012: PUSH
10013: LD_INT 26
10015: PUSH
10016: LD_INT 28
10018: PUSH
10019: LD_INT 30
10021: PUSH
10022: LD_INT 31
10024: PUSH
10025: LD_INT 32
10027: PUSH
10028: LD_INT 36
10030: PUSH
10031: EMPTY
10032: LIST
10033: LIST
10034: LIST
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: LIST
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: LIST
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: PUSH
10062: LD_INT 101
10064: PUSH
10065: LD_INT 102
10067: PUSH
10068: LD_INT 103
10070: PUSH
10071: LD_INT 104
10073: PUSH
10074: LD_INT 105
10076: PUSH
10077: LD_INT 106
10079: PUSH
10080: LD_INT 107
10082: PUSH
10083: LD_INT 108
10085: PUSH
10086: LD_INT 109
10088: PUSH
10089: LD_INT 110
10091: PUSH
10092: LD_INT 111
10094: PUSH
10095: LD_INT 112
10097: PUSH
10098: LD_INT 114
10100: PUSH
10101: EMPTY
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: PUSH
10116: EMPTY
10117: LIST
10118: LIST
10119: ST_TO_ADDR
10120: GO 11907
10122: LD_INT 11
10124: DOUBLE
10125: EQUAL
10126: IFTRUE 10130
10128: GO 10322
10130: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
10131: LD_ADDR_VAR 0 1
10135: PUSH
10136: LD_INT 2
10138: PUSH
10139: LD_INT 3
10141: PUSH
10142: LD_INT 4
10144: PUSH
10145: LD_INT 5
10147: PUSH
10148: LD_INT 6
10150: PUSH
10151: LD_INT 7
10153: PUSH
10154: LD_INT 8
10156: PUSH
10157: LD_INT 9
10159: PUSH
10160: LD_INT 10
10162: PUSH
10163: LD_INT 11
10165: PUSH
10166: LD_INT 12
10168: PUSH
10169: LD_INT 13
10171: PUSH
10172: LD_INT 14
10174: PUSH
10175: LD_INT 15
10177: PUSH
10178: LD_INT 16
10180: PUSH
10181: LD_INT 17
10183: PUSH
10184: LD_INT 18
10186: PUSH
10187: LD_INT 19
10189: PUSH
10190: LD_INT 20
10192: PUSH
10193: LD_INT 21
10195: PUSH
10196: LD_INT 22
10198: PUSH
10199: LD_INT 23
10201: PUSH
10202: LD_INT 24
10204: PUSH
10205: LD_INT 25
10207: PUSH
10208: LD_INT 26
10210: PUSH
10211: LD_INT 28
10213: PUSH
10214: LD_INT 30
10216: PUSH
10217: LD_INT 31
10219: PUSH
10220: LD_INT 32
10222: PUSH
10223: LD_INT 34
10225: PUSH
10226: LD_INT 36
10228: PUSH
10229: EMPTY
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: LIST
10236: LIST
10237: LIST
10238: LIST
10239: LIST
10240: LIST
10241: LIST
10242: LIST
10243: LIST
10244: LIST
10245: LIST
10246: LIST
10247: LIST
10248: LIST
10249: LIST
10250: LIST
10251: LIST
10252: LIST
10253: LIST
10254: LIST
10255: LIST
10256: LIST
10257: LIST
10258: LIST
10259: LIST
10260: LIST
10261: PUSH
10262: LD_INT 101
10264: PUSH
10265: LD_INT 102
10267: PUSH
10268: LD_INT 103
10270: PUSH
10271: LD_INT 104
10273: PUSH
10274: LD_INT 105
10276: PUSH
10277: LD_INT 106
10279: PUSH
10280: LD_INT 107
10282: PUSH
10283: LD_INT 108
10285: PUSH
10286: LD_INT 109
10288: PUSH
10289: LD_INT 110
10291: PUSH
10292: LD_INT 111
10294: PUSH
10295: LD_INT 112
10297: PUSH
10298: LD_INT 114
10300: PUSH
10301: EMPTY
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: PUSH
10316: EMPTY
10317: LIST
10318: LIST
10319: ST_TO_ADDR
10320: GO 11907
10322: LD_INT 12
10324: DOUBLE
10325: EQUAL
10326: IFTRUE 10330
10328: GO 10538
10330: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
10331: LD_ADDR_VAR 0 1
10335: PUSH
10336: LD_INT 1
10338: PUSH
10339: LD_INT 2
10341: PUSH
10342: LD_INT 3
10344: PUSH
10345: LD_INT 4
10347: PUSH
10348: LD_INT 5
10350: PUSH
10351: LD_INT 6
10353: PUSH
10354: LD_INT 7
10356: PUSH
10357: LD_INT 8
10359: PUSH
10360: LD_INT 9
10362: PUSH
10363: LD_INT 10
10365: PUSH
10366: LD_INT 11
10368: PUSH
10369: LD_INT 12
10371: PUSH
10372: LD_INT 13
10374: PUSH
10375: LD_INT 14
10377: PUSH
10378: LD_INT 15
10380: PUSH
10381: LD_INT 16
10383: PUSH
10384: LD_INT 17
10386: PUSH
10387: LD_INT 18
10389: PUSH
10390: LD_INT 19
10392: PUSH
10393: LD_INT 20
10395: PUSH
10396: LD_INT 21
10398: PUSH
10399: LD_INT 22
10401: PUSH
10402: LD_INT 23
10404: PUSH
10405: LD_INT 24
10407: PUSH
10408: LD_INT 25
10410: PUSH
10411: LD_INT 26
10413: PUSH
10414: LD_INT 27
10416: PUSH
10417: LD_INT 28
10419: PUSH
10420: LD_INT 30
10422: PUSH
10423: LD_INT 31
10425: PUSH
10426: LD_INT 32
10428: PUSH
10429: LD_INT 33
10431: PUSH
10432: LD_INT 34
10434: PUSH
10435: LD_INT 36
10437: PUSH
10438: EMPTY
10439: LIST
10440: LIST
10441: LIST
10442: LIST
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: LIST
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: LIST
10469: LIST
10470: LIST
10471: LIST
10472: LIST
10473: PUSH
10474: LD_INT 101
10476: PUSH
10477: LD_INT 102
10479: PUSH
10480: LD_INT 103
10482: PUSH
10483: LD_INT 104
10485: PUSH
10486: LD_INT 105
10488: PUSH
10489: LD_INT 106
10491: PUSH
10492: LD_INT 107
10494: PUSH
10495: LD_INT 108
10497: PUSH
10498: LD_INT 109
10500: PUSH
10501: LD_INT 110
10503: PUSH
10504: LD_INT 111
10506: PUSH
10507: LD_INT 112
10509: PUSH
10510: LD_INT 113
10512: PUSH
10513: LD_INT 114
10515: PUSH
10516: EMPTY
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: PUSH
10532: EMPTY
10533: LIST
10534: LIST
10535: ST_TO_ADDR
10536: GO 11907
10538: LD_INT 13
10540: DOUBLE
10541: EQUAL
10542: IFTRUE 10546
10544: GO 10742
10546: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
10547: LD_ADDR_VAR 0 1
10551: PUSH
10552: LD_INT 1
10554: PUSH
10555: LD_INT 2
10557: PUSH
10558: LD_INT 3
10560: PUSH
10561: LD_INT 4
10563: PUSH
10564: LD_INT 5
10566: PUSH
10567: LD_INT 8
10569: PUSH
10570: LD_INT 9
10572: PUSH
10573: LD_INT 10
10575: PUSH
10576: LD_INT 11
10578: PUSH
10579: LD_INT 12
10581: PUSH
10582: LD_INT 14
10584: PUSH
10585: LD_INT 15
10587: PUSH
10588: LD_INT 16
10590: PUSH
10591: LD_INT 17
10593: PUSH
10594: LD_INT 18
10596: PUSH
10597: LD_INT 19
10599: PUSH
10600: LD_INT 20
10602: PUSH
10603: LD_INT 21
10605: PUSH
10606: LD_INT 22
10608: PUSH
10609: LD_INT 23
10611: PUSH
10612: LD_INT 24
10614: PUSH
10615: LD_INT 25
10617: PUSH
10618: LD_INT 26
10620: PUSH
10621: LD_INT 27
10623: PUSH
10624: LD_INT 28
10626: PUSH
10627: LD_INT 30
10629: PUSH
10630: LD_INT 31
10632: PUSH
10633: LD_INT 32
10635: PUSH
10636: LD_INT 33
10638: PUSH
10639: LD_INT 34
10641: PUSH
10642: LD_INT 36
10644: PUSH
10645: EMPTY
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: LIST
10674: LIST
10675: LIST
10676: LIST
10677: PUSH
10678: LD_INT 101
10680: PUSH
10681: LD_INT 102
10683: PUSH
10684: LD_INT 103
10686: PUSH
10687: LD_INT 104
10689: PUSH
10690: LD_INT 105
10692: PUSH
10693: LD_INT 106
10695: PUSH
10696: LD_INT 107
10698: PUSH
10699: LD_INT 108
10701: PUSH
10702: LD_INT 109
10704: PUSH
10705: LD_INT 110
10707: PUSH
10708: LD_INT 111
10710: PUSH
10711: LD_INT 112
10713: PUSH
10714: LD_INT 113
10716: PUSH
10717: LD_INT 114
10719: PUSH
10720: EMPTY
10721: LIST
10722: LIST
10723: LIST
10724: LIST
10725: LIST
10726: LIST
10727: LIST
10728: LIST
10729: LIST
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: LIST
10735: PUSH
10736: EMPTY
10737: LIST
10738: LIST
10739: ST_TO_ADDR
10740: GO 11907
10742: LD_INT 14
10744: DOUBLE
10745: EQUAL
10746: IFTRUE 10750
10748: GO 10962
10750: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
10751: LD_ADDR_VAR 0 1
10755: PUSH
10756: LD_INT 1
10758: PUSH
10759: LD_INT 2
10761: PUSH
10762: LD_INT 3
10764: PUSH
10765: LD_INT 4
10767: PUSH
10768: LD_INT 5
10770: PUSH
10771: LD_INT 6
10773: PUSH
10774: LD_INT 7
10776: PUSH
10777: LD_INT 8
10779: PUSH
10780: LD_INT 9
10782: PUSH
10783: LD_INT 10
10785: PUSH
10786: LD_INT 11
10788: PUSH
10789: LD_INT 12
10791: PUSH
10792: LD_INT 13
10794: PUSH
10795: LD_INT 14
10797: PUSH
10798: LD_INT 15
10800: PUSH
10801: LD_INT 16
10803: PUSH
10804: LD_INT 17
10806: PUSH
10807: LD_INT 18
10809: PUSH
10810: LD_INT 19
10812: PUSH
10813: LD_INT 20
10815: PUSH
10816: LD_INT 21
10818: PUSH
10819: LD_INT 22
10821: PUSH
10822: LD_INT 23
10824: PUSH
10825: LD_INT 24
10827: PUSH
10828: LD_INT 25
10830: PUSH
10831: LD_INT 26
10833: PUSH
10834: LD_INT 27
10836: PUSH
10837: LD_INT 28
10839: PUSH
10840: LD_INT 29
10842: PUSH
10843: LD_INT 30
10845: PUSH
10846: LD_INT 31
10848: PUSH
10849: LD_INT 32
10851: PUSH
10852: LD_INT 33
10854: PUSH
10855: LD_INT 34
10857: PUSH
10858: LD_INT 36
10860: PUSH
10861: EMPTY
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: LIST
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: PUSH
10898: LD_INT 101
10900: PUSH
10901: LD_INT 102
10903: PUSH
10904: LD_INT 103
10906: PUSH
10907: LD_INT 104
10909: PUSH
10910: LD_INT 105
10912: PUSH
10913: LD_INT 106
10915: PUSH
10916: LD_INT 107
10918: PUSH
10919: LD_INT 108
10921: PUSH
10922: LD_INT 109
10924: PUSH
10925: LD_INT 110
10927: PUSH
10928: LD_INT 111
10930: PUSH
10931: LD_INT 112
10933: PUSH
10934: LD_INT 113
10936: PUSH
10937: LD_INT 114
10939: PUSH
10940: EMPTY
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: PUSH
10956: EMPTY
10957: LIST
10958: LIST
10959: ST_TO_ADDR
10960: GO 11907
10962: LD_INT 15
10964: DOUBLE
10965: EQUAL
10966: IFTRUE 10970
10968: GO 11182
10970: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
10971: LD_ADDR_VAR 0 1
10975: PUSH
10976: LD_INT 1
10978: PUSH
10979: LD_INT 2
10981: PUSH
10982: LD_INT 3
10984: PUSH
10985: LD_INT 4
10987: PUSH
10988: LD_INT 5
10990: PUSH
10991: LD_INT 6
10993: PUSH
10994: LD_INT 7
10996: PUSH
10997: LD_INT 8
10999: PUSH
11000: LD_INT 9
11002: PUSH
11003: LD_INT 10
11005: PUSH
11006: LD_INT 11
11008: PUSH
11009: LD_INT 12
11011: PUSH
11012: LD_INT 13
11014: PUSH
11015: LD_INT 14
11017: PUSH
11018: LD_INT 15
11020: PUSH
11021: LD_INT 16
11023: PUSH
11024: LD_INT 17
11026: PUSH
11027: LD_INT 18
11029: PUSH
11030: LD_INT 19
11032: PUSH
11033: LD_INT 20
11035: PUSH
11036: LD_INT 21
11038: PUSH
11039: LD_INT 22
11041: PUSH
11042: LD_INT 23
11044: PUSH
11045: LD_INT 24
11047: PUSH
11048: LD_INT 25
11050: PUSH
11051: LD_INT 26
11053: PUSH
11054: LD_INT 27
11056: PUSH
11057: LD_INT 28
11059: PUSH
11060: LD_INT 29
11062: PUSH
11063: LD_INT 30
11065: PUSH
11066: LD_INT 31
11068: PUSH
11069: LD_INT 32
11071: PUSH
11072: LD_INT 33
11074: PUSH
11075: LD_INT 34
11077: PUSH
11078: LD_INT 36
11080: PUSH
11081: EMPTY
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: LIST
11087: LIST
11088: LIST
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: LIST
11097: LIST
11098: LIST
11099: LIST
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: PUSH
11118: LD_INT 101
11120: PUSH
11121: LD_INT 102
11123: PUSH
11124: LD_INT 103
11126: PUSH
11127: LD_INT 104
11129: PUSH
11130: LD_INT 105
11132: PUSH
11133: LD_INT 106
11135: PUSH
11136: LD_INT 107
11138: PUSH
11139: LD_INT 108
11141: PUSH
11142: LD_INT 109
11144: PUSH
11145: LD_INT 110
11147: PUSH
11148: LD_INT 111
11150: PUSH
11151: LD_INT 112
11153: PUSH
11154: LD_INT 113
11156: PUSH
11157: LD_INT 114
11159: PUSH
11160: EMPTY
11161: LIST
11162: LIST
11163: LIST
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: LIST
11169: LIST
11170: LIST
11171: LIST
11172: LIST
11173: LIST
11174: LIST
11175: PUSH
11176: EMPTY
11177: LIST
11178: LIST
11179: ST_TO_ADDR
11180: GO 11907
11182: LD_INT 16
11184: DOUBLE
11185: EQUAL
11186: IFTRUE 11190
11188: GO 11314
11190: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
11191: LD_ADDR_VAR 0 1
11195: PUSH
11196: LD_INT 2
11198: PUSH
11199: LD_INT 4
11201: PUSH
11202: LD_INT 5
11204: PUSH
11205: LD_INT 7
11207: PUSH
11208: LD_INT 11
11210: PUSH
11211: LD_INT 12
11213: PUSH
11214: LD_INT 15
11216: PUSH
11217: LD_INT 16
11219: PUSH
11220: LD_INT 20
11222: PUSH
11223: LD_INT 21
11225: PUSH
11226: LD_INT 22
11228: PUSH
11229: LD_INT 23
11231: PUSH
11232: LD_INT 25
11234: PUSH
11235: LD_INT 26
11237: PUSH
11238: LD_INT 30
11240: PUSH
11241: LD_INT 31
11243: PUSH
11244: LD_INT 32
11246: PUSH
11247: LD_INT 33
11249: PUSH
11250: LD_INT 34
11252: PUSH
11253: EMPTY
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: LIST
11269: LIST
11270: LIST
11271: LIST
11272: LIST
11273: PUSH
11274: LD_INT 101
11276: PUSH
11277: LD_INT 102
11279: PUSH
11280: LD_INT 103
11282: PUSH
11283: LD_INT 106
11285: PUSH
11286: LD_INT 108
11288: PUSH
11289: LD_INT 112
11291: PUSH
11292: LD_INT 113
11294: PUSH
11295: LD_INT 114
11297: PUSH
11298: EMPTY
11299: LIST
11300: LIST
11301: LIST
11302: LIST
11303: LIST
11304: LIST
11305: LIST
11306: LIST
11307: PUSH
11308: EMPTY
11309: LIST
11310: LIST
11311: ST_TO_ADDR
11312: GO 11907
11314: LD_INT 17
11316: DOUBLE
11317: EQUAL
11318: IFTRUE 11322
11320: GO 11534
11322: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
11323: LD_ADDR_VAR 0 1
11327: PUSH
11328: LD_INT 1
11330: PUSH
11331: LD_INT 2
11333: PUSH
11334: LD_INT 3
11336: PUSH
11337: LD_INT 4
11339: PUSH
11340: LD_INT 5
11342: PUSH
11343: LD_INT 6
11345: PUSH
11346: LD_INT 7
11348: PUSH
11349: LD_INT 8
11351: PUSH
11352: LD_INT 9
11354: PUSH
11355: LD_INT 10
11357: PUSH
11358: LD_INT 11
11360: PUSH
11361: LD_INT 12
11363: PUSH
11364: LD_INT 13
11366: PUSH
11367: LD_INT 14
11369: PUSH
11370: LD_INT 15
11372: PUSH
11373: LD_INT 16
11375: PUSH
11376: LD_INT 17
11378: PUSH
11379: LD_INT 18
11381: PUSH
11382: LD_INT 19
11384: PUSH
11385: LD_INT 20
11387: PUSH
11388: LD_INT 21
11390: PUSH
11391: LD_INT 22
11393: PUSH
11394: LD_INT 23
11396: PUSH
11397: LD_INT 24
11399: PUSH
11400: LD_INT 25
11402: PUSH
11403: LD_INT 26
11405: PUSH
11406: LD_INT 27
11408: PUSH
11409: LD_INT 28
11411: PUSH
11412: LD_INT 29
11414: PUSH
11415: LD_INT 30
11417: PUSH
11418: LD_INT 31
11420: PUSH
11421: LD_INT 32
11423: PUSH
11424: LD_INT 33
11426: PUSH
11427: LD_INT 34
11429: PUSH
11430: LD_INT 36
11432: PUSH
11433: EMPTY
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: LIST
11465: LIST
11466: LIST
11467: LIST
11468: LIST
11469: PUSH
11470: LD_INT 101
11472: PUSH
11473: LD_INT 102
11475: PUSH
11476: LD_INT 103
11478: PUSH
11479: LD_INT 104
11481: PUSH
11482: LD_INT 105
11484: PUSH
11485: LD_INT 106
11487: PUSH
11488: LD_INT 107
11490: PUSH
11491: LD_INT 108
11493: PUSH
11494: LD_INT 109
11496: PUSH
11497: LD_INT 110
11499: PUSH
11500: LD_INT 111
11502: PUSH
11503: LD_INT 112
11505: PUSH
11506: LD_INT 113
11508: PUSH
11509: LD_INT 114
11511: PUSH
11512: EMPTY
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: LIST
11525: LIST
11526: LIST
11527: PUSH
11528: EMPTY
11529: LIST
11530: LIST
11531: ST_TO_ADDR
11532: GO 11907
11534: LD_INT 18
11536: DOUBLE
11537: EQUAL
11538: IFTRUE 11542
11540: GO 11678
11542: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
11543: LD_ADDR_VAR 0 1
11547: PUSH
11548: LD_INT 2
11550: PUSH
11551: LD_INT 4
11553: PUSH
11554: LD_INT 5
11556: PUSH
11557: LD_INT 7
11559: PUSH
11560: LD_INT 11
11562: PUSH
11563: LD_INT 12
11565: PUSH
11566: LD_INT 15
11568: PUSH
11569: LD_INT 16
11571: PUSH
11572: LD_INT 20
11574: PUSH
11575: LD_INT 21
11577: PUSH
11578: LD_INT 22
11580: PUSH
11581: LD_INT 23
11583: PUSH
11584: LD_INT 25
11586: PUSH
11587: LD_INT 26
11589: PUSH
11590: LD_INT 30
11592: PUSH
11593: LD_INT 31
11595: PUSH
11596: LD_INT 32
11598: PUSH
11599: LD_INT 33
11601: PUSH
11602: LD_INT 34
11604: PUSH
11605: LD_INT 35
11607: PUSH
11608: LD_INT 36
11610: PUSH
11611: EMPTY
11612: LIST
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: LIST
11619: LIST
11620: LIST
11621: LIST
11622: LIST
11623: LIST
11624: LIST
11625: LIST
11626: LIST
11627: LIST
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: LIST
11633: PUSH
11634: LD_INT 101
11636: PUSH
11637: LD_INT 102
11639: PUSH
11640: LD_INT 103
11642: PUSH
11643: LD_INT 106
11645: PUSH
11646: LD_INT 108
11648: PUSH
11649: LD_INT 112
11651: PUSH
11652: LD_INT 113
11654: PUSH
11655: LD_INT 114
11657: PUSH
11658: LD_INT 115
11660: PUSH
11661: EMPTY
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: PUSH
11672: EMPTY
11673: LIST
11674: LIST
11675: ST_TO_ADDR
11676: GO 11907
11678: LD_INT 19
11680: DOUBLE
11681: EQUAL
11682: IFTRUE 11686
11684: GO 11906
11686: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
11687: LD_ADDR_VAR 0 1
11691: PUSH
11692: LD_INT 1
11694: PUSH
11695: LD_INT 2
11697: PUSH
11698: LD_INT 3
11700: PUSH
11701: LD_INT 4
11703: PUSH
11704: LD_INT 5
11706: PUSH
11707: LD_INT 6
11709: PUSH
11710: LD_INT 7
11712: PUSH
11713: LD_INT 8
11715: PUSH
11716: LD_INT 9
11718: PUSH
11719: LD_INT 10
11721: PUSH
11722: LD_INT 11
11724: PUSH
11725: LD_INT 12
11727: PUSH
11728: LD_INT 13
11730: PUSH
11731: LD_INT 14
11733: PUSH
11734: LD_INT 15
11736: PUSH
11737: LD_INT 16
11739: PUSH
11740: LD_INT 17
11742: PUSH
11743: LD_INT 18
11745: PUSH
11746: LD_INT 19
11748: PUSH
11749: LD_INT 20
11751: PUSH
11752: LD_INT 21
11754: PUSH
11755: LD_INT 22
11757: PUSH
11758: LD_INT 23
11760: PUSH
11761: LD_INT 24
11763: PUSH
11764: LD_INT 25
11766: PUSH
11767: LD_INT 26
11769: PUSH
11770: LD_INT 27
11772: PUSH
11773: LD_INT 28
11775: PUSH
11776: LD_INT 29
11778: PUSH
11779: LD_INT 30
11781: PUSH
11782: LD_INT 31
11784: PUSH
11785: LD_INT 32
11787: PUSH
11788: LD_INT 33
11790: PUSH
11791: LD_INT 34
11793: PUSH
11794: LD_INT 35
11796: PUSH
11797: LD_INT 36
11799: PUSH
11800: EMPTY
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: LIST
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: LIST
11828: LIST
11829: LIST
11830: LIST
11831: LIST
11832: LIST
11833: LIST
11834: LIST
11835: LIST
11836: LIST
11837: PUSH
11838: LD_INT 101
11840: PUSH
11841: LD_INT 102
11843: PUSH
11844: LD_INT 103
11846: PUSH
11847: LD_INT 104
11849: PUSH
11850: LD_INT 105
11852: PUSH
11853: LD_INT 106
11855: PUSH
11856: LD_INT 107
11858: PUSH
11859: LD_INT 108
11861: PUSH
11862: LD_INT 109
11864: PUSH
11865: LD_INT 110
11867: PUSH
11868: LD_INT 111
11870: PUSH
11871: LD_INT 112
11873: PUSH
11874: LD_INT 113
11876: PUSH
11877: LD_INT 114
11879: PUSH
11880: LD_INT 115
11882: PUSH
11883: EMPTY
11884: LIST
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: LIST
11892: LIST
11893: LIST
11894: LIST
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: PUSH
11900: EMPTY
11901: LIST
11902: LIST
11903: ST_TO_ADDR
11904: GO 11907
11906: POP
// end else
11907: GO 12126
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
11909: LD_ADDR_VAR 0 1
11913: PUSH
11914: LD_INT 1
11916: PUSH
11917: LD_INT 2
11919: PUSH
11920: LD_INT 3
11922: PUSH
11923: LD_INT 4
11925: PUSH
11926: LD_INT 5
11928: PUSH
11929: LD_INT 6
11931: PUSH
11932: LD_INT 7
11934: PUSH
11935: LD_INT 8
11937: PUSH
11938: LD_INT 9
11940: PUSH
11941: LD_INT 10
11943: PUSH
11944: LD_INT 11
11946: PUSH
11947: LD_INT 12
11949: PUSH
11950: LD_INT 13
11952: PUSH
11953: LD_INT 14
11955: PUSH
11956: LD_INT 15
11958: PUSH
11959: LD_INT 16
11961: PUSH
11962: LD_INT 17
11964: PUSH
11965: LD_INT 18
11967: PUSH
11968: LD_INT 19
11970: PUSH
11971: LD_INT 20
11973: PUSH
11974: LD_INT 21
11976: PUSH
11977: LD_INT 22
11979: PUSH
11980: LD_INT 23
11982: PUSH
11983: LD_INT 24
11985: PUSH
11986: LD_INT 25
11988: PUSH
11989: LD_INT 26
11991: PUSH
11992: LD_INT 27
11994: PUSH
11995: LD_INT 28
11997: PUSH
11998: LD_INT 29
12000: PUSH
12001: LD_INT 30
12003: PUSH
12004: LD_INT 31
12006: PUSH
12007: LD_INT 32
12009: PUSH
12010: LD_INT 33
12012: PUSH
12013: LD_INT 34
12015: PUSH
12016: LD_INT 35
12018: PUSH
12019: LD_INT 36
12021: PUSH
12022: EMPTY
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: LIST
12028: LIST
12029: LIST
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: LIST
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: LIST
12045: LIST
12046: LIST
12047: LIST
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: PUSH
12060: LD_INT 101
12062: PUSH
12063: LD_INT 102
12065: PUSH
12066: LD_INT 103
12068: PUSH
12069: LD_INT 104
12071: PUSH
12072: LD_INT 105
12074: PUSH
12075: LD_INT 106
12077: PUSH
12078: LD_INT 107
12080: PUSH
12081: LD_INT 108
12083: PUSH
12084: LD_INT 109
12086: PUSH
12087: LD_INT 110
12089: PUSH
12090: LD_INT 111
12092: PUSH
12093: LD_INT 112
12095: PUSH
12096: LD_INT 113
12098: PUSH
12099: LD_INT 114
12101: PUSH
12102: LD_INT 115
12104: PUSH
12105: EMPTY
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: PUSH
12122: EMPTY
12123: LIST
12124: LIST
12125: ST_TO_ADDR
// if result then
12126: LD_VAR 0 1
12130: IFFALSE 12419
// begin normal :=  ;
12132: LD_ADDR_VAR 0 3
12136: PUSH
12137: LD_STRING 
12139: ST_TO_ADDR
// hardcore :=  ;
12140: LD_ADDR_VAR 0 4
12144: PUSH
12145: LD_STRING 
12147: ST_TO_ADDR
// for i = 1 to normalCounter do
12148: LD_ADDR_VAR 0 5
12152: PUSH
12153: DOUBLE
12154: LD_INT 1
12156: DEC
12157: ST_TO_ADDR
12158: LD_EXP 25
12162: PUSH
12163: FOR_TO
12164: IFFALSE 12265
// begin tmp := 0 ;
12166: LD_ADDR_VAR 0 2
12170: PUSH
12171: LD_STRING 0
12173: ST_TO_ADDR
// if result [ 1 ] then
12174: LD_VAR 0 1
12178: PUSH
12179: LD_INT 1
12181: ARRAY
12182: IFFALSE 12247
// if result [ 1 ] [ 1 ] = i then
12184: LD_VAR 0 1
12188: PUSH
12189: LD_INT 1
12191: ARRAY
12192: PUSH
12193: LD_INT 1
12195: ARRAY
12196: PUSH
12197: LD_VAR 0 5
12201: EQUAL
12202: IFFALSE 12247
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12204: LD_ADDR_VAR 0 1
12208: PUSH
12209: LD_VAR 0 1
12213: PPUSH
12214: LD_INT 1
12216: PPUSH
12217: LD_VAR 0 1
12221: PUSH
12222: LD_INT 1
12224: ARRAY
12225: PPUSH
12226: LD_INT 1
12228: PPUSH
12229: CALL_OW 3
12233: PPUSH
12234: CALL_OW 1
12238: ST_TO_ADDR
// tmp := 1 ;
12239: LD_ADDR_VAR 0 2
12243: PUSH
12244: LD_STRING 1
12246: ST_TO_ADDR
// end ; normal := normal & tmp ;
12247: LD_ADDR_VAR 0 3
12251: PUSH
12252: LD_VAR 0 3
12256: PUSH
12257: LD_VAR 0 2
12261: STR
12262: ST_TO_ADDR
// end ;
12263: GO 12163
12265: POP
12266: POP
// for i = 1 to hardcoreCounter do
12267: LD_ADDR_VAR 0 5
12271: PUSH
12272: DOUBLE
12273: LD_INT 1
12275: DEC
12276: ST_TO_ADDR
12277: LD_EXP 26
12281: PUSH
12282: FOR_TO
12283: IFFALSE 12388
// begin tmp := 0 ;
12285: LD_ADDR_VAR 0 2
12289: PUSH
12290: LD_STRING 0
12292: ST_TO_ADDR
// if result [ 2 ] then
12293: LD_VAR 0 1
12297: PUSH
12298: LD_INT 2
12300: ARRAY
12301: IFFALSE 12370
// if result [ 2 ] [ 1 ] = 100 + i then
12303: LD_VAR 0 1
12307: PUSH
12308: LD_INT 2
12310: ARRAY
12311: PUSH
12312: LD_INT 1
12314: ARRAY
12315: PUSH
12316: LD_INT 100
12318: PUSH
12319: LD_VAR 0 5
12323: PLUS
12324: EQUAL
12325: IFFALSE 12370
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12327: LD_ADDR_VAR 0 1
12331: PUSH
12332: LD_VAR 0 1
12336: PPUSH
12337: LD_INT 2
12339: PPUSH
12340: LD_VAR 0 1
12344: PUSH
12345: LD_INT 2
12347: ARRAY
12348: PPUSH
12349: LD_INT 1
12351: PPUSH
12352: CALL_OW 3
12356: PPUSH
12357: CALL_OW 1
12361: ST_TO_ADDR
// tmp := 1 ;
12362: LD_ADDR_VAR 0 2
12366: PUSH
12367: LD_STRING 1
12369: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12370: LD_ADDR_VAR 0 4
12374: PUSH
12375: LD_VAR 0 4
12379: PUSH
12380: LD_VAR 0 2
12384: STR
12385: ST_TO_ADDR
// end ;
12386: GO 12282
12388: POP
12389: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
12390: LD_STRING getStreamItemsFromMission("
12392: PUSH
12393: LD_VAR 0 3
12397: STR
12398: PUSH
12399: LD_STRING ","
12401: STR
12402: PUSH
12403: LD_VAR 0 4
12407: STR
12408: PUSH
12409: LD_STRING ")
12411: STR
12412: PPUSH
12413: CALL_OW 559
// end else
12417: GO 12426
// ToLua ( getStreamItemsFromMission("","") ) ;
12419: LD_STRING getStreamItemsFromMission("","")
12421: PPUSH
12422: CALL_OW 559
// end ;
12426: LD_VAR 0 1
12430: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
12431: LD_EXP 24
12435: PUSH
12436: LD_EXP 29
12440: AND
12441: IFFALSE 12565
12443: GO 12445
12445: DISABLE
12446: LD_INT 0
12448: PPUSH
12449: PPUSH
// begin enable ;
12450: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
12451: LD_ADDR_VAR 0 2
12455: PUSH
12456: LD_INT 22
12458: PUSH
12459: LD_OWVAR 2
12463: PUSH
12464: EMPTY
12465: LIST
12466: LIST
12467: PUSH
12468: LD_INT 2
12470: PUSH
12471: LD_INT 34
12473: PUSH
12474: LD_INT 7
12476: PUSH
12477: EMPTY
12478: LIST
12479: LIST
12480: PUSH
12481: LD_INT 34
12483: PUSH
12484: LD_INT 45
12486: PUSH
12487: EMPTY
12488: LIST
12489: LIST
12490: PUSH
12491: LD_INT 34
12493: PUSH
12494: LD_INT 28
12496: PUSH
12497: EMPTY
12498: LIST
12499: LIST
12500: PUSH
12501: LD_INT 34
12503: PUSH
12504: LD_INT 47
12506: PUSH
12507: EMPTY
12508: LIST
12509: LIST
12510: PUSH
12511: EMPTY
12512: LIST
12513: LIST
12514: LIST
12515: LIST
12516: LIST
12517: PUSH
12518: EMPTY
12519: LIST
12520: LIST
12521: PPUSH
12522: CALL_OW 69
12526: ST_TO_ADDR
// if not tmp then
12527: LD_VAR 0 2
12531: NOT
12532: IFFALSE 12536
// exit ;
12534: GO 12565
// for i in tmp do
12536: LD_ADDR_VAR 0 1
12540: PUSH
12541: LD_VAR 0 2
12545: PUSH
12546: FOR_IN
12547: IFFALSE 12563
// begin SetLives ( i , 0 ) ;
12549: LD_VAR 0 1
12553: PPUSH
12554: LD_INT 0
12556: PPUSH
12557: CALL_OW 234
// end ;
12561: GO 12546
12563: POP
12564: POP
// end ;
12565: PPOPN 2
12567: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12568: LD_EXP 24
12572: PUSH
12573: LD_EXP 30
12577: AND
12578: IFFALSE 12662
12580: GO 12582
12582: DISABLE
12583: LD_INT 0
12585: PPUSH
12586: PPUSH
// begin enable ;
12587: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
12588: LD_ADDR_VAR 0 2
12592: PUSH
12593: LD_INT 22
12595: PUSH
12596: LD_OWVAR 2
12600: PUSH
12601: EMPTY
12602: LIST
12603: LIST
12604: PUSH
12605: LD_INT 32
12607: PUSH
12608: LD_INT 3
12610: PUSH
12611: EMPTY
12612: LIST
12613: LIST
12614: PUSH
12615: EMPTY
12616: LIST
12617: LIST
12618: PPUSH
12619: CALL_OW 69
12623: ST_TO_ADDR
// if not tmp then
12624: LD_VAR 0 2
12628: NOT
12629: IFFALSE 12633
// exit ;
12631: GO 12662
// for i in tmp do
12633: LD_ADDR_VAR 0 1
12637: PUSH
12638: LD_VAR 0 2
12642: PUSH
12643: FOR_IN
12644: IFFALSE 12660
// begin SetLives ( i , 0 ) ;
12646: LD_VAR 0 1
12650: PPUSH
12651: LD_INT 0
12653: PPUSH
12654: CALL_OW 234
// end ;
12658: GO 12643
12660: POP
12661: POP
// end ;
12662: PPOPN 2
12664: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12665: LD_EXP 24
12669: PUSH
12670: LD_EXP 27
12674: AND
12675: IFFALSE 12768
12677: GO 12679
12679: DISABLE
12680: LD_INT 0
12682: PPUSH
// begin enable ;
12683: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
12684: LD_ADDR_VAR 0 1
12688: PUSH
12689: LD_INT 22
12691: PUSH
12692: LD_OWVAR 2
12696: PUSH
12697: EMPTY
12698: LIST
12699: LIST
12700: PUSH
12701: LD_INT 2
12703: PUSH
12704: LD_INT 25
12706: PUSH
12707: LD_INT 5
12709: PUSH
12710: EMPTY
12711: LIST
12712: LIST
12713: PUSH
12714: LD_INT 25
12716: PUSH
12717: LD_INT 9
12719: PUSH
12720: EMPTY
12721: LIST
12722: LIST
12723: PUSH
12724: LD_INT 25
12726: PUSH
12727: LD_INT 8
12729: PUSH
12730: EMPTY
12731: LIST
12732: LIST
12733: PUSH
12734: EMPTY
12735: LIST
12736: LIST
12737: LIST
12738: LIST
12739: PUSH
12740: EMPTY
12741: LIST
12742: LIST
12743: PPUSH
12744: CALL_OW 69
12748: PUSH
12749: FOR_IN
12750: IFFALSE 12766
// begin SetClass ( i , 1 ) ;
12752: LD_VAR 0 1
12756: PPUSH
12757: LD_INT 1
12759: PPUSH
12760: CALL_OW 336
// end ;
12764: GO 12749
12766: POP
12767: POP
// end ;
12768: PPOPN 1
12770: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
12771: LD_EXP 24
12775: PUSH
12776: LD_EXP 28
12780: AND
12781: PUSH
12782: LD_OWVAR 65
12786: PUSH
12787: LD_INT 7
12789: LESS
12790: AND
12791: IFFALSE 12805
12793: GO 12795
12795: DISABLE
// begin enable ;
12796: ENABLE
// game_speed := 7 ;
12797: LD_ADDR_OWVAR 65
12801: PUSH
12802: LD_INT 7
12804: ST_TO_ADDR
// end ;
12805: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
12806: LD_EXP 24
12810: PUSH
12811: LD_EXP 31
12815: AND
12816: IFFALSE 13018
12818: GO 12820
12820: DISABLE
12821: LD_INT 0
12823: PPUSH
12824: PPUSH
12825: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12826: LD_ADDR_VAR 0 3
12830: PUSH
12831: LD_INT 81
12833: PUSH
12834: LD_OWVAR 2
12838: PUSH
12839: EMPTY
12840: LIST
12841: LIST
12842: PUSH
12843: LD_INT 21
12845: PUSH
12846: LD_INT 1
12848: PUSH
12849: EMPTY
12850: LIST
12851: LIST
12852: PUSH
12853: EMPTY
12854: LIST
12855: LIST
12856: PPUSH
12857: CALL_OW 69
12861: ST_TO_ADDR
// if not tmp then
12862: LD_VAR 0 3
12866: NOT
12867: IFFALSE 12871
// exit ;
12869: GO 13018
// if tmp > 5 then
12871: LD_VAR 0 3
12875: PUSH
12876: LD_INT 5
12878: GREATER
12879: IFFALSE 12891
// k := 5 else
12881: LD_ADDR_VAR 0 2
12885: PUSH
12886: LD_INT 5
12888: ST_TO_ADDR
12889: GO 12901
// k := tmp ;
12891: LD_ADDR_VAR 0 2
12895: PUSH
12896: LD_VAR 0 3
12900: ST_TO_ADDR
// for i := 1 to k do
12901: LD_ADDR_VAR 0 1
12905: PUSH
12906: DOUBLE
12907: LD_INT 1
12909: DEC
12910: ST_TO_ADDR
12911: LD_VAR 0 2
12915: PUSH
12916: FOR_TO
12917: IFFALSE 13016
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12919: LD_VAR 0 3
12923: PUSH
12924: LD_VAR 0 1
12928: ARRAY
12929: PPUSH
12930: LD_VAR 0 1
12934: PUSH
12935: LD_INT 4
12937: MOD
12938: PUSH
12939: LD_INT 1
12941: PLUS
12942: PPUSH
12943: CALL_OW 259
12947: PUSH
12948: LD_INT 10
12950: LESS
12951: IFFALSE 13014
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12953: LD_VAR 0 3
12957: PUSH
12958: LD_VAR 0 1
12962: ARRAY
12963: PPUSH
12964: LD_VAR 0 1
12968: PUSH
12969: LD_INT 4
12971: MOD
12972: PUSH
12973: LD_INT 1
12975: PLUS
12976: PPUSH
12977: LD_VAR 0 3
12981: PUSH
12982: LD_VAR 0 1
12986: ARRAY
12987: PPUSH
12988: LD_VAR 0 1
12992: PUSH
12993: LD_INT 4
12995: MOD
12996: PUSH
12997: LD_INT 1
12999: PLUS
13000: PPUSH
13001: CALL_OW 259
13005: PUSH
13006: LD_INT 1
13008: PLUS
13009: PPUSH
13010: CALL_OW 237
13014: GO 12916
13016: POP
13017: POP
// end ;
13018: PPOPN 3
13020: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13021: LD_EXP 24
13025: PUSH
13026: LD_EXP 32
13030: AND
13031: IFFALSE 13051
13033: GO 13035
13035: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13036: LD_INT 4
13038: PPUSH
13039: LD_OWVAR 2
13043: PPUSH
13044: LD_INT 0
13046: PPUSH
13047: CALL_OW 324
13051: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13052: LD_EXP 24
13056: PUSH
13057: LD_EXP 61
13061: AND
13062: IFFALSE 13082
13064: GO 13066
13066: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13067: LD_INT 19
13069: PPUSH
13070: LD_OWVAR 2
13074: PPUSH
13075: LD_INT 0
13077: PPUSH
13078: CALL_OW 324
13082: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13083: LD_EXP 24
13087: PUSH
13088: LD_EXP 33
13092: AND
13093: IFFALSE 13195
13095: GO 13097
13097: DISABLE
13098: LD_INT 0
13100: PPUSH
13101: PPUSH
// begin enable ;
13102: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13103: LD_ADDR_VAR 0 2
13107: PUSH
13108: LD_INT 22
13110: PUSH
13111: LD_OWVAR 2
13115: PUSH
13116: EMPTY
13117: LIST
13118: LIST
13119: PUSH
13120: LD_INT 2
13122: PUSH
13123: LD_INT 34
13125: PUSH
13126: LD_INT 11
13128: PUSH
13129: EMPTY
13130: LIST
13131: LIST
13132: PUSH
13133: LD_INT 34
13135: PUSH
13136: LD_INT 30
13138: PUSH
13139: EMPTY
13140: LIST
13141: LIST
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: LIST
13147: PUSH
13148: EMPTY
13149: LIST
13150: LIST
13151: PPUSH
13152: CALL_OW 69
13156: ST_TO_ADDR
// if not tmp then
13157: LD_VAR 0 2
13161: NOT
13162: IFFALSE 13166
// exit ;
13164: GO 13195
// for i in tmp do
13166: LD_ADDR_VAR 0 1
13170: PUSH
13171: LD_VAR 0 2
13175: PUSH
13176: FOR_IN
13177: IFFALSE 13193
// begin SetLives ( i , 0 ) ;
13179: LD_VAR 0 1
13183: PPUSH
13184: LD_INT 0
13186: PPUSH
13187: CALL_OW 234
// end ;
13191: GO 13176
13193: POP
13194: POP
// end ;
13195: PPOPN 2
13197: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13198: LD_EXP 24
13202: PUSH
13203: LD_EXP 34
13207: AND
13208: IFFALSE 13228
13210: GO 13212
13212: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13213: LD_INT 32
13215: PPUSH
13216: LD_OWVAR 2
13220: PPUSH
13221: LD_INT 0
13223: PPUSH
13224: CALL_OW 324
13228: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13229: LD_EXP 24
13233: PUSH
13234: LD_EXP 35
13238: AND
13239: IFFALSE 13420
13241: GO 13243
13243: DISABLE
13244: LD_INT 0
13246: PPUSH
13247: PPUSH
13248: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13249: LD_ADDR_VAR 0 2
13253: PUSH
13254: LD_INT 22
13256: PUSH
13257: LD_OWVAR 2
13261: PUSH
13262: EMPTY
13263: LIST
13264: LIST
13265: PUSH
13266: LD_INT 33
13268: PUSH
13269: LD_INT 3
13271: PUSH
13272: EMPTY
13273: LIST
13274: LIST
13275: PUSH
13276: EMPTY
13277: LIST
13278: LIST
13279: PPUSH
13280: CALL_OW 69
13284: ST_TO_ADDR
// if not tmp then
13285: LD_VAR 0 2
13289: NOT
13290: IFFALSE 13294
// exit ;
13292: GO 13420
// side := 0 ;
13294: LD_ADDR_VAR 0 3
13298: PUSH
13299: LD_INT 0
13301: ST_TO_ADDR
// for i := 1 to 8 do
13302: LD_ADDR_VAR 0 1
13306: PUSH
13307: DOUBLE
13308: LD_INT 1
13310: DEC
13311: ST_TO_ADDR
13312: LD_INT 8
13314: PUSH
13315: FOR_TO
13316: IFFALSE 13364
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
13318: LD_OWVAR 2
13322: PUSH
13323: LD_VAR 0 1
13327: NONEQUAL
13328: PUSH
13329: LD_OWVAR 2
13333: PPUSH
13334: LD_VAR 0 1
13338: PPUSH
13339: CALL_OW 81
13343: PUSH
13344: LD_INT 2
13346: EQUAL
13347: AND
13348: IFFALSE 13362
// begin side := i ;
13350: LD_ADDR_VAR 0 3
13354: PUSH
13355: LD_VAR 0 1
13359: ST_TO_ADDR
// break ;
13360: GO 13364
// end ;
13362: GO 13315
13364: POP
13365: POP
// if not side then
13366: LD_VAR 0 3
13370: NOT
13371: IFFALSE 13375
// exit ;
13373: GO 13420
// for i := 1 to tmp do
13375: LD_ADDR_VAR 0 1
13379: PUSH
13380: DOUBLE
13381: LD_INT 1
13383: DEC
13384: ST_TO_ADDR
13385: LD_VAR 0 2
13389: PUSH
13390: FOR_TO
13391: IFFALSE 13418
// if Prob ( 60 ) then
13393: LD_INT 60
13395: PPUSH
13396: CALL_OW 13
13400: IFFALSE 13416
// SetSide ( i , side ) ;
13402: LD_VAR 0 1
13406: PPUSH
13407: LD_VAR 0 3
13411: PPUSH
13412: CALL_OW 235
13416: GO 13390
13418: POP
13419: POP
// end ;
13420: PPOPN 3
13422: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
13423: LD_EXP 24
13427: PUSH
13428: LD_EXP 37
13432: AND
13433: IFFALSE 13552
13435: GO 13437
13437: DISABLE
13438: LD_INT 0
13440: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
13441: LD_ADDR_VAR 0 1
13445: PUSH
13446: LD_INT 22
13448: PUSH
13449: LD_OWVAR 2
13453: PUSH
13454: EMPTY
13455: LIST
13456: LIST
13457: PUSH
13458: LD_INT 21
13460: PUSH
13461: LD_INT 1
13463: PUSH
13464: EMPTY
13465: LIST
13466: LIST
13467: PUSH
13468: LD_INT 3
13470: PUSH
13471: LD_INT 23
13473: PUSH
13474: LD_INT 0
13476: PUSH
13477: EMPTY
13478: LIST
13479: LIST
13480: PUSH
13481: EMPTY
13482: LIST
13483: LIST
13484: PUSH
13485: EMPTY
13486: LIST
13487: LIST
13488: LIST
13489: PPUSH
13490: CALL_OW 69
13494: PUSH
13495: FOR_IN
13496: IFFALSE 13550
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
13498: LD_VAR 0 1
13502: PPUSH
13503: CALL_OW 257
13507: PUSH
13508: LD_INT 1
13510: PUSH
13511: LD_INT 2
13513: PUSH
13514: LD_INT 3
13516: PUSH
13517: LD_INT 4
13519: PUSH
13520: EMPTY
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: IN
13526: IFFALSE 13548
// SetClass ( un , rand ( 1 , 4 ) ) ;
13528: LD_VAR 0 1
13532: PPUSH
13533: LD_INT 1
13535: PPUSH
13536: LD_INT 4
13538: PPUSH
13539: CALL_OW 12
13543: PPUSH
13544: CALL_OW 336
13548: GO 13495
13550: POP
13551: POP
// end ;
13552: PPOPN 1
13554: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
13555: LD_EXP 24
13559: PUSH
13560: LD_EXP 36
13564: AND
13565: IFFALSE 13644
13567: GO 13569
13569: DISABLE
13570: LD_INT 0
13572: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13573: LD_ADDR_VAR 0 1
13577: PUSH
13578: LD_INT 22
13580: PUSH
13581: LD_OWVAR 2
13585: PUSH
13586: EMPTY
13587: LIST
13588: LIST
13589: PUSH
13590: LD_INT 21
13592: PUSH
13593: LD_INT 3
13595: PUSH
13596: EMPTY
13597: LIST
13598: LIST
13599: PUSH
13600: EMPTY
13601: LIST
13602: LIST
13603: PPUSH
13604: CALL_OW 69
13608: ST_TO_ADDR
// if not tmp then
13609: LD_VAR 0 1
13613: NOT
13614: IFFALSE 13618
// exit ;
13616: GO 13644
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
13618: LD_VAR 0 1
13622: PUSH
13623: LD_INT 1
13625: PPUSH
13626: LD_VAR 0 1
13630: PPUSH
13631: CALL_OW 12
13635: ARRAY
13636: PPUSH
13637: LD_INT 100
13639: PPUSH
13640: CALL_OW 234
// end ;
13644: PPOPN 1
13646: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
13647: LD_EXP 24
13651: PUSH
13652: LD_EXP 38
13656: AND
13657: IFFALSE 13755
13659: GO 13661
13661: DISABLE
13662: LD_INT 0
13664: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13665: LD_ADDR_VAR 0 1
13669: PUSH
13670: LD_INT 22
13672: PUSH
13673: LD_OWVAR 2
13677: PUSH
13678: EMPTY
13679: LIST
13680: LIST
13681: PUSH
13682: LD_INT 21
13684: PUSH
13685: LD_INT 1
13687: PUSH
13688: EMPTY
13689: LIST
13690: LIST
13691: PUSH
13692: EMPTY
13693: LIST
13694: LIST
13695: PPUSH
13696: CALL_OW 69
13700: ST_TO_ADDR
// if not tmp then
13701: LD_VAR 0 1
13705: NOT
13706: IFFALSE 13710
// exit ;
13708: GO 13755
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
13710: LD_VAR 0 1
13714: PUSH
13715: LD_INT 1
13717: PPUSH
13718: LD_VAR 0 1
13722: PPUSH
13723: CALL_OW 12
13727: ARRAY
13728: PPUSH
13729: LD_INT 1
13731: PPUSH
13732: LD_INT 4
13734: PPUSH
13735: CALL_OW 12
13739: PPUSH
13740: LD_INT 3000
13742: PPUSH
13743: LD_INT 9000
13745: PPUSH
13746: CALL_OW 12
13750: PPUSH
13751: CALL_OW 492
// end ;
13755: PPOPN 1
13757: END
// every 0 0$1 trigger StreamModeActive and sDepot do
13758: LD_EXP 24
13762: PUSH
13763: LD_EXP 39
13767: AND
13768: IFFALSE 13788
13770: GO 13772
13772: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
13773: LD_INT 1
13775: PPUSH
13776: LD_OWVAR 2
13780: PPUSH
13781: LD_INT 0
13783: PPUSH
13784: CALL_OW 324
13788: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
13789: LD_EXP 24
13793: PUSH
13794: LD_EXP 40
13798: AND
13799: IFFALSE 13882
13801: GO 13803
13803: DISABLE
13804: LD_INT 0
13806: PPUSH
13807: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13808: LD_ADDR_VAR 0 2
13812: PUSH
13813: LD_INT 22
13815: PUSH
13816: LD_OWVAR 2
13820: PUSH
13821: EMPTY
13822: LIST
13823: LIST
13824: PUSH
13825: LD_INT 21
13827: PUSH
13828: LD_INT 3
13830: PUSH
13831: EMPTY
13832: LIST
13833: LIST
13834: PUSH
13835: EMPTY
13836: LIST
13837: LIST
13838: PPUSH
13839: CALL_OW 69
13843: ST_TO_ADDR
// if not tmp then
13844: LD_VAR 0 2
13848: NOT
13849: IFFALSE 13853
// exit ;
13851: GO 13882
// for i in tmp do
13853: LD_ADDR_VAR 0 1
13857: PUSH
13858: LD_VAR 0 2
13862: PUSH
13863: FOR_IN
13864: IFFALSE 13880
// SetBLevel ( i , 10 ) ;
13866: LD_VAR 0 1
13870: PPUSH
13871: LD_INT 10
13873: PPUSH
13874: CALL_OW 241
13878: GO 13863
13880: POP
13881: POP
// end ;
13882: PPOPN 2
13884: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
13885: LD_EXP 24
13889: PUSH
13890: LD_EXP 41
13894: AND
13895: IFFALSE 14006
13897: GO 13899
13899: DISABLE
13900: LD_INT 0
13902: PPUSH
13903: PPUSH
13904: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13905: LD_ADDR_VAR 0 3
13909: PUSH
13910: LD_INT 22
13912: PUSH
13913: LD_OWVAR 2
13917: PUSH
13918: EMPTY
13919: LIST
13920: LIST
13921: PUSH
13922: LD_INT 25
13924: PUSH
13925: LD_INT 1
13927: PUSH
13928: EMPTY
13929: LIST
13930: LIST
13931: PUSH
13932: EMPTY
13933: LIST
13934: LIST
13935: PPUSH
13936: CALL_OW 69
13940: ST_TO_ADDR
// if not tmp then
13941: LD_VAR 0 3
13945: NOT
13946: IFFALSE 13950
// exit ;
13948: GO 14006
// un := tmp [ rand ( 1 , tmp ) ] ;
13950: LD_ADDR_VAR 0 2
13954: PUSH
13955: LD_VAR 0 3
13959: PUSH
13960: LD_INT 1
13962: PPUSH
13963: LD_VAR 0 3
13967: PPUSH
13968: CALL_OW 12
13972: ARRAY
13973: ST_TO_ADDR
// if Crawls ( un ) then
13974: LD_VAR 0 2
13978: PPUSH
13979: CALL_OW 318
13983: IFFALSE 13994
// ComWalk ( un ) ;
13985: LD_VAR 0 2
13989: PPUSH
13990: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13994: LD_VAR 0 2
13998: PPUSH
13999: LD_INT 5
14001: PPUSH
14002: CALL_OW 336
// end ;
14006: PPOPN 3
14008: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
14009: LD_EXP 24
14013: PUSH
14014: LD_EXP 42
14018: AND
14019: PUSH
14020: LD_OWVAR 67
14024: PUSH
14025: LD_INT 3
14027: LESS
14028: AND
14029: IFFALSE 14048
14031: GO 14033
14033: DISABLE
// Difficulty := Difficulty + 1 ;
14034: LD_ADDR_OWVAR 67
14038: PUSH
14039: LD_OWVAR 67
14043: PUSH
14044: LD_INT 1
14046: PLUS
14047: ST_TO_ADDR
14048: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14049: LD_EXP 24
14053: PUSH
14054: LD_EXP 43
14058: AND
14059: IFFALSE 14162
14061: GO 14063
14063: DISABLE
14064: LD_INT 0
14066: PPUSH
// begin for i := 1 to 5 do
14067: LD_ADDR_VAR 0 1
14071: PUSH
14072: DOUBLE
14073: LD_INT 1
14075: DEC
14076: ST_TO_ADDR
14077: LD_INT 5
14079: PUSH
14080: FOR_TO
14081: IFFALSE 14160
// begin uc_nation := nation_nature ;
14083: LD_ADDR_OWVAR 21
14087: PUSH
14088: LD_INT 0
14090: ST_TO_ADDR
// uc_side := 0 ;
14091: LD_ADDR_OWVAR 20
14095: PUSH
14096: LD_INT 0
14098: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14099: LD_ADDR_OWVAR 29
14103: PUSH
14104: LD_INT 12
14106: PUSH
14107: LD_INT 12
14109: PUSH
14110: EMPTY
14111: LIST
14112: LIST
14113: ST_TO_ADDR
// hc_agressivity := 20 ;
14114: LD_ADDR_OWVAR 35
14118: PUSH
14119: LD_INT 20
14121: ST_TO_ADDR
// hc_class := class_tiger ;
14122: LD_ADDR_OWVAR 28
14126: PUSH
14127: LD_INT 14
14129: ST_TO_ADDR
// hc_gallery :=  ;
14130: LD_ADDR_OWVAR 33
14134: PUSH
14135: LD_STRING 
14137: ST_TO_ADDR
// hc_name :=  ;
14138: LD_ADDR_OWVAR 26
14142: PUSH
14143: LD_STRING 
14145: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14146: CALL_OW 44
14150: PPUSH
14151: LD_INT 0
14153: PPUSH
14154: CALL_OW 51
// end ;
14158: GO 14080
14160: POP
14161: POP
// end ;
14162: PPOPN 1
14164: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14165: LD_EXP 24
14169: PUSH
14170: LD_EXP 44
14174: AND
14175: IFFALSE 14184
14177: GO 14179
14179: DISABLE
// StreamSibBomb ;
14180: CALL 14185 0 0
14184: END
// export function StreamSibBomb ; var i , x , y ; begin
14185: LD_INT 0
14187: PPUSH
14188: PPUSH
14189: PPUSH
14190: PPUSH
// result := false ;
14191: LD_ADDR_VAR 0 1
14195: PUSH
14196: LD_INT 0
14198: ST_TO_ADDR
// for i := 1 to 16 do
14199: LD_ADDR_VAR 0 2
14203: PUSH
14204: DOUBLE
14205: LD_INT 1
14207: DEC
14208: ST_TO_ADDR
14209: LD_INT 16
14211: PUSH
14212: FOR_TO
14213: IFFALSE 14412
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14215: LD_ADDR_VAR 0 3
14219: PUSH
14220: LD_INT 10
14222: PUSH
14223: LD_INT 20
14225: PUSH
14226: LD_INT 30
14228: PUSH
14229: LD_INT 40
14231: PUSH
14232: LD_INT 50
14234: PUSH
14235: LD_INT 60
14237: PUSH
14238: LD_INT 70
14240: PUSH
14241: LD_INT 80
14243: PUSH
14244: LD_INT 90
14246: PUSH
14247: LD_INT 100
14249: PUSH
14250: LD_INT 110
14252: PUSH
14253: LD_INT 120
14255: PUSH
14256: LD_INT 130
14258: PUSH
14259: LD_INT 140
14261: PUSH
14262: LD_INT 150
14264: PUSH
14265: EMPTY
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: LIST
14276: LIST
14277: LIST
14278: LIST
14279: LIST
14280: LIST
14281: PUSH
14282: LD_INT 1
14284: PPUSH
14285: LD_INT 15
14287: PPUSH
14288: CALL_OW 12
14292: ARRAY
14293: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14294: LD_ADDR_VAR 0 4
14298: PUSH
14299: LD_INT 10
14301: PUSH
14302: LD_INT 20
14304: PUSH
14305: LD_INT 30
14307: PUSH
14308: LD_INT 40
14310: PUSH
14311: LD_INT 50
14313: PUSH
14314: LD_INT 60
14316: PUSH
14317: LD_INT 70
14319: PUSH
14320: LD_INT 80
14322: PUSH
14323: LD_INT 90
14325: PUSH
14326: LD_INT 100
14328: PUSH
14329: LD_INT 110
14331: PUSH
14332: LD_INT 120
14334: PUSH
14335: LD_INT 130
14337: PUSH
14338: LD_INT 140
14340: PUSH
14341: LD_INT 150
14343: PUSH
14344: EMPTY
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: LIST
14356: LIST
14357: LIST
14358: LIST
14359: LIST
14360: PUSH
14361: LD_INT 1
14363: PPUSH
14364: LD_INT 15
14366: PPUSH
14367: CALL_OW 12
14371: ARRAY
14372: ST_TO_ADDR
// if ValidHex ( x , y ) then
14373: LD_VAR 0 3
14377: PPUSH
14378: LD_VAR 0 4
14382: PPUSH
14383: CALL_OW 488
14387: IFFALSE 14410
// begin result := [ x , y ] ;
14389: LD_ADDR_VAR 0 1
14393: PUSH
14394: LD_VAR 0 3
14398: PUSH
14399: LD_VAR 0 4
14403: PUSH
14404: EMPTY
14405: LIST
14406: LIST
14407: ST_TO_ADDR
// break ;
14408: GO 14412
// end ; end ;
14410: GO 14212
14412: POP
14413: POP
// if result then
14414: LD_VAR 0 1
14418: IFFALSE 14478
// begin ToLua ( playSibBomb() ) ;
14420: LD_STRING playSibBomb()
14422: PPUSH
14423: CALL_OW 559
// wait ( 0 0$14 ) ;
14427: LD_INT 490
14429: PPUSH
14430: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
14434: LD_VAR 0 1
14438: PUSH
14439: LD_INT 1
14441: ARRAY
14442: PPUSH
14443: LD_VAR 0 1
14447: PUSH
14448: LD_INT 2
14450: ARRAY
14451: PPUSH
14452: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
14456: LD_VAR 0 1
14460: PUSH
14461: LD_INT 1
14463: ARRAY
14464: PPUSH
14465: LD_VAR 0 1
14469: PUSH
14470: LD_INT 2
14472: ARRAY
14473: PPUSH
14474: CALL_OW 429
// end ; end ;
14478: LD_VAR 0 1
14482: RET
// every 0 0$1 trigger StreamModeActive and sReset do
14483: LD_EXP 24
14487: PUSH
14488: LD_EXP 46
14492: AND
14493: IFFALSE 14505
14495: GO 14497
14497: DISABLE
// YouLost (  ) ;
14498: LD_STRING 
14500: PPUSH
14501: CALL_OW 104
14505: END
// every 0 0$1 trigger StreamModeActive and sFog do
14506: LD_EXP 24
14510: PUSH
14511: LD_EXP 45
14515: AND
14516: IFFALSE 14530
14518: GO 14520
14520: DISABLE
// FogOff ( your_side ) ;
14521: LD_OWVAR 2
14525: PPUSH
14526: CALL_OW 344
14530: END
// every 0 0$1 trigger StreamModeActive and sSun do
14531: LD_EXP 24
14535: PUSH
14536: LD_EXP 47
14540: AND
14541: IFFALSE 14569
14543: GO 14545
14545: DISABLE
// begin solar_recharge_percent := 0 ;
14546: LD_ADDR_OWVAR 79
14550: PUSH
14551: LD_INT 0
14553: ST_TO_ADDR
// wait ( 5 5$00 ) ;
14554: LD_INT 10500
14556: PPUSH
14557: CALL_OW 67
// solar_recharge_percent := 100 ;
14561: LD_ADDR_OWVAR 79
14565: PUSH
14566: LD_INT 100
14568: ST_TO_ADDR
// end ;
14569: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14570: LD_EXP 24
14574: PUSH
14575: LD_EXP 48
14579: AND
14580: IFFALSE 14819
14582: GO 14584
14584: DISABLE
14585: LD_INT 0
14587: PPUSH
14588: PPUSH
14589: PPUSH
// begin tmp := [ ] ;
14590: LD_ADDR_VAR 0 3
14594: PUSH
14595: EMPTY
14596: ST_TO_ADDR
// for i := 1 to 6 do
14597: LD_ADDR_VAR 0 1
14601: PUSH
14602: DOUBLE
14603: LD_INT 1
14605: DEC
14606: ST_TO_ADDR
14607: LD_INT 6
14609: PUSH
14610: FOR_TO
14611: IFFALSE 14716
// begin uc_nation := nation_nature ;
14613: LD_ADDR_OWVAR 21
14617: PUSH
14618: LD_INT 0
14620: ST_TO_ADDR
// uc_side := 0 ;
14621: LD_ADDR_OWVAR 20
14625: PUSH
14626: LD_INT 0
14628: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14629: LD_ADDR_OWVAR 29
14633: PUSH
14634: LD_INT 12
14636: PUSH
14637: LD_INT 12
14639: PUSH
14640: EMPTY
14641: LIST
14642: LIST
14643: ST_TO_ADDR
// hc_agressivity := 20 ;
14644: LD_ADDR_OWVAR 35
14648: PUSH
14649: LD_INT 20
14651: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
14652: LD_ADDR_OWVAR 28
14656: PUSH
14657: LD_INT 17
14659: ST_TO_ADDR
// hc_gallery :=  ;
14660: LD_ADDR_OWVAR 33
14664: PUSH
14665: LD_STRING 
14667: ST_TO_ADDR
// hc_name :=  ;
14668: LD_ADDR_OWVAR 26
14672: PUSH
14673: LD_STRING 
14675: ST_TO_ADDR
// un := CreateHuman ;
14676: LD_ADDR_VAR 0 2
14680: PUSH
14681: CALL_OW 44
14685: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
14686: LD_VAR 0 2
14690: PPUSH
14691: LD_INT 1
14693: PPUSH
14694: CALL_OW 51
// tmp := tmp ^ un ;
14698: LD_ADDR_VAR 0 3
14702: PUSH
14703: LD_VAR 0 3
14707: PUSH
14708: LD_VAR 0 2
14712: ADD
14713: ST_TO_ADDR
// end ;
14714: GO 14610
14716: POP
14717: POP
// repeat wait ( 0 0$1 ) ;
14718: LD_INT 35
14720: PPUSH
14721: CALL_OW 67
// for un in tmp do
14725: LD_ADDR_VAR 0 2
14729: PUSH
14730: LD_VAR 0 3
14734: PUSH
14735: FOR_IN
14736: IFFALSE 14810
// begin if IsDead ( un ) then
14738: LD_VAR 0 2
14742: PPUSH
14743: CALL_OW 301
14747: IFFALSE 14767
// begin tmp := tmp diff un ;
14749: LD_ADDR_VAR 0 3
14753: PUSH
14754: LD_VAR 0 3
14758: PUSH
14759: LD_VAR 0 2
14763: DIFF
14764: ST_TO_ADDR
// continue ;
14765: GO 14735
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
14767: LD_VAR 0 2
14771: PPUSH
14772: LD_INT 3
14774: PUSH
14775: LD_INT 22
14777: PUSH
14778: LD_INT 0
14780: PUSH
14781: EMPTY
14782: LIST
14783: LIST
14784: PUSH
14785: EMPTY
14786: LIST
14787: LIST
14788: PPUSH
14789: CALL_OW 69
14793: PPUSH
14794: LD_VAR 0 2
14798: PPUSH
14799: CALL_OW 74
14803: PPUSH
14804: CALL_OW 115
// end ;
14808: GO 14735
14810: POP
14811: POP
// until not tmp ;
14812: LD_VAR 0 3
14816: NOT
14817: IFFALSE 14718
// end ;
14819: PPOPN 3
14821: END
// every 0 0$1 trigger StreamModeActive and sTroll do
14822: LD_EXP 24
14826: PUSH
14827: LD_EXP 49
14831: AND
14832: IFFALSE 14886
14834: GO 14836
14836: DISABLE
// begin ToLua ( displayTroll(); ) ;
14837: LD_STRING displayTroll();
14839: PPUSH
14840: CALL_OW 559
// wait ( 3 3$00 ) ;
14844: LD_INT 6300
14846: PPUSH
14847: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14851: LD_STRING hideTroll();
14853: PPUSH
14854: CALL_OW 559
// wait ( 1 1$00 ) ;
14858: LD_INT 2100
14860: PPUSH
14861: CALL_OW 67
// ToLua ( displayTroll(); ) ;
14865: LD_STRING displayTroll();
14867: PPUSH
14868: CALL_OW 559
// wait ( 1 1$00 ) ;
14872: LD_INT 2100
14874: PPUSH
14875: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14879: LD_STRING hideTroll();
14881: PPUSH
14882: CALL_OW 559
// end ;
14886: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
14887: LD_EXP 24
14891: PUSH
14892: LD_EXP 50
14896: AND
14897: IFFALSE 14960
14899: GO 14901
14901: DISABLE
14902: LD_INT 0
14904: PPUSH
// begin p := 0 ;
14905: LD_ADDR_VAR 0 1
14909: PUSH
14910: LD_INT 0
14912: ST_TO_ADDR
// repeat game_speed := 1 ;
14913: LD_ADDR_OWVAR 65
14917: PUSH
14918: LD_INT 1
14920: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14921: LD_INT 35
14923: PPUSH
14924: CALL_OW 67
// p := p + 1 ;
14928: LD_ADDR_VAR 0 1
14932: PUSH
14933: LD_VAR 0 1
14937: PUSH
14938: LD_INT 1
14940: PLUS
14941: ST_TO_ADDR
// until p >= 60 ;
14942: LD_VAR 0 1
14946: PUSH
14947: LD_INT 60
14949: GREATEREQUAL
14950: IFFALSE 14913
// game_speed := 4 ;
14952: LD_ADDR_OWVAR 65
14956: PUSH
14957: LD_INT 4
14959: ST_TO_ADDR
// end ;
14960: PPOPN 1
14962: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14963: LD_EXP 24
14967: PUSH
14968: LD_EXP 51
14972: AND
14973: IFFALSE 15119
14975: GO 14977
14977: DISABLE
14978: LD_INT 0
14980: PPUSH
14981: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14982: LD_ADDR_VAR 0 1
14986: PUSH
14987: LD_INT 22
14989: PUSH
14990: LD_OWVAR 2
14994: PUSH
14995: EMPTY
14996: LIST
14997: LIST
14998: PUSH
14999: LD_INT 2
15001: PUSH
15002: LD_INT 30
15004: PUSH
15005: LD_INT 0
15007: PUSH
15008: EMPTY
15009: LIST
15010: LIST
15011: PUSH
15012: LD_INT 30
15014: PUSH
15015: LD_INT 1
15017: PUSH
15018: EMPTY
15019: LIST
15020: LIST
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: LIST
15026: PUSH
15027: EMPTY
15028: LIST
15029: LIST
15030: PPUSH
15031: CALL_OW 69
15035: ST_TO_ADDR
// if not depot then
15036: LD_VAR 0 1
15040: NOT
15041: IFFALSE 15045
// exit ;
15043: GO 15119
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15045: LD_ADDR_VAR 0 2
15049: PUSH
15050: LD_VAR 0 1
15054: PUSH
15055: LD_INT 1
15057: PPUSH
15058: LD_VAR 0 1
15062: PPUSH
15063: CALL_OW 12
15067: ARRAY
15068: PPUSH
15069: CALL_OW 274
15073: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15074: LD_VAR 0 2
15078: PPUSH
15079: LD_INT 1
15081: PPUSH
15082: LD_INT 0
15084: PPUSH
15085: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15089: LD_VAR 0 2
15093: PPUSH
15094: LD_INT 2
15096: PPUSH
15097: LD_INT 0
15099: PPUSH
15100: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15104: LD_VAR 0 2
15108: PPUSH
15109: LD_INT 3
15111: PPUSH
15112: LD_INT 0
15114: PPUSH
15115: CALL_OW 277
// end ;
15119: PPOPN 2
15121: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15122: LD_EXP 24
15126: PUSH
15127: LD_EXP 52
15131: AND
15132: IFFALSE 15229
15134: GO 15136
15136: DISABLE
15137: LD_INT 0
15139: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15140: LD_ADDR_VAR 0 1
15144: PUSH
15145: LD_INT 22
15147: PUSH
15148: LD_OWVAR 2
15152: PUSH
15153: EMPTY
15154: LIST
15155: LIST
15156: PUSH
15157: LD_INT 21
15159: PUSH
15160: LD_INT 1
15162: PUSH
15163: EMPTY
15164: LIST
15165: LIST
15166: PUSH
15167: LD_INT 3
15169: PUSH
15170: LD_INT 23
15172: PUSH
15173: LD_INT 0
15175: PUSH
15176: EMPTY
15177: LIST
15178: LIST
15179: PUSH
15180: EMPTY
15181: LIST
15182: LIST
15183: PUSH
15184: EMPTY
15185: LIST
15186: LIST
15187: LIST
15188: PPUSH
15189: CALL_OW 69
15193: ST_TO_ADDR
// if not tmp then
15194: LD_VAR 0 1
15198: NOT
15199: IFFALSE 15203
// exit ;
15201: GO 15229
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15203: LD_VAR 0 1
15207: PUSH
15208: LD_INT 1
15210: PPUSH
15211: LD_VAR 0 1
15215: PPUSH
15216: CALL_OW 12
15220: ARRAY
15221: PPUSH
15222: LD_INT 200
15224: PPUSH
15225: CALL_OW 234
// end ;
15229: PPOPN 1
15231: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15232: LD_EXP 24
15236: PUSH
15237: LD_EXP 53
15241: AND
15242: IFFALSE 15321
15244: GO 15246
15246: DISABLE
15247: LD_INT 0
15249: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15250: LD_ADDR_VAR 0 1
15254: PUSH
15255: LD_INT 22
15257: PUSH
15258: LD_OWVAR 2
15262: PUSH
15263: EMPTY
15264: LIST
15265: LIST
15266: PUSH
15267: LD_INT 21
15269: PUSH
15270: LD_INT 2
15272: PUSH
15273: EMPTY
15274: LIST
15275: LIST
15276: PUSH
15277: EMPTY
15278: LIST
15279: LIST
15280: PPUSH
15281: CALL_OW 69
15285: ST_TO_ADDR
// if not tmp then
15286: LD_VAR 0 1
15290: NOT
15291: IFFALSE 15295
// exit ;
15293: GO 15321
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15295: LD_VAR 0 1
15299: PUSH
15300: LD_INT 1
15302: PPUSH
15303: LD_VAR 0 1
15307: PPUSH
15308: CALL_OW 12
15312: ARRAY
15313: PPUSH
15314: LD_INT 60
15316: PPUSH
15317: CALL_OW 234
// end ;
15321: PPOPN 1
15323: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15324: LD_EXP 24
15328: PUSH
15329: LD_EXP 54
15333: AND
15334: IFFALSE 15433
15336: GO 15338
15338: DISABLE
15339: LD_INT 0
15341: PPUSH
15342: PPUSH
// begin enable ;
15343: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
15344: LD_ADDR_VAR 0 1
15348: PUSH
15349: LD_INT 22
15351: PUSH
15352: LD_OWVAR 2
15356: PUSH
15357: EMPTY
15358: LIST
15359: LIST
15360: PUSH
15361: LD_INT 61
15363: PUSH
15364: EMPTY
15365: LIST
15366: PUSH
15367: LD_INT 33
15369: PUSH
15370: LD_INT 2
15372: PUSH
15373: EMPTY
15374: LIST
15375: LIST
15376: PUSH
15377: EMPTY
15378: LIST
15379: LIST
15380: LIST
15381: PPUSH
15382: CALL_OW 69
15386: ST_TO_ADDR
// if not tmp then
15387: LD_VAR 0 1
15391: NOT
15392: IFFALSE 15396
// exit ;
15394: GO 15433
// for i in tmp do
15396: LD_ADDR_VAR 0 2
15400: PUSH
15401: LD_VAR 0 1
15405: PUSH
15406: FOR_IN
15407: IFFALSE 15431
// if IsControledBy ( i ) then
15409: LD_VAR 0 2
15413: PPUSH
15414: CALL_OW 312
15418: IFFALSE 15429
// ComUnlink ( i ) ;
15420: LD_VAR 0 2
15424: PPUSH
15425: CALL_OW 136
15429: GO 15406
15431: POP
15432: POP
// end ;
15433: PPOPN 2
15435: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
15436: LD_EXP 24
15440: PUSH
15441: LD_EXP 55
15445: AND
15446: IFFALSE 15586
15448: GO 15450
15450: DISABLE
15451: LD_INT 0
15453: PPUSH
15454: PPUSH
// begin ToLua ( displayPowell(); ) ;
15455: LD_STRING displayPowell();
15457: PPUSH
15458: CALL_OW 559
// uc_side := 0 ;
15462: LD_ADDR_OWVAR 20
15466: PUSH
15467: LD_INT 0
15469: ST_TO_ADDR
// uc_nation := 2 ;
15470: LD_ADDR_OWVAR 21
15474: PUSH
15475: LD_INT 2
15477: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
15478: LD_ADDR_OWVAR 37
15482: PUSH
15483: LD_INT 14
15485: ST_TO_ADDR
// vc_engine := engine_siberite ;
15486: LD_ADDR_OWVAR 39
15490: PUSH
15491: LD_INT 3
15493: ST_TO_ADDR
// vc_control := control_apeman ;
15494: LD_ADDR_OWVAR 38
15498: PUSH
15499: LD_INT 5
15501: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
15502: LD_ADDR_OWVAR 40
15506: PUSH
15507: LD_INT 29
15509: ST_TO_ADDR
// un := CreateVehicle ;
15510: LD_ADDR_VAR 0 2
15514: PUSH
15515: CALL_OW 45
15519: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15520: LD_VAR 0 2
15524: PPUSH
15525: LD_INT 1
15527: PPUSH
15528: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15532: LD_INT 35
15534: PPUSH
15535: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15539: LD_VAR 0 2
15543: PPUSH
15544: LD_INT 22
15546: PUSH
15547: LD_OWVAR 2
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: PPUSH
15556: CALL_OW 69
15560: PPUSH
15561: LD_VAR 0 2
15565: PPUSH
15566: CALL_OW 74
15570: PPUSH
15571: CALL_OW 115
// until IsDead ( un ) ;
15575: LD_VAR 0 2
15579: PPUSH
15580: CALL_OW 301
15584: IFFALSE 15532
// end ;
15586: PPOPN 2
15588: END
// every 0 0$1 trigger StreamModeActive and sStu do
15589: LD_EXP 24
15593: PUSH
15594: LD_EXP 63
15598: AND
15599: IFFALSE 15615
15601: GO 15603
15603: DISABLE
// begin ToLua ( displayStucuk(); ) ;
15604: LD_STRING displayStucuk();
15606: PPUSH
15607: CALL_OW 559
// ResetFog ;
15611: CALL_OW 335
// end ;
15615: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
15616: LD_EXP 24
15620: PUSH
15621: LD_EXP 56
15625: AND
15626: IFFALSE 15767
15628: GO 15630
15630: DISABLE
15631: LD_INT 0
15633: PPUSH
15634: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15635: LD_ADDR_VAR 0 2
15639: PUSH
15640: LD_INT 22
15642: PUSH
15643: LD_OWVAR 2
15647: PUSH
15648: EMPTY
15649: LIST
15650: LIST
15651: PUSH
15652: LD_INT 21
15654: PUSH
15655: LD_INT 1
15657: PUSH
15658: EMPTY
15659: LIST
15660: LIST
15661: PUSH
15662: EMPTY
15663: LIST
15664: LIST
15665: PPUSH
15666: CALL_OW 69
15670: ST_TO_ADDR
// if not tmp then
15671: LD_VAR 0 2
15675: NOT
15676: IFFALSE 15680
// exit ;
15678: GO 15767
// un := tmp [ rand ( 1 , tmp ) ] ;
15680: LD_ADDR_VAR 0 1
15684: PUSH
15685: LD_VAR 0 2
15689: PUSH
15690: LD_INT 1
15692: PPUSH
15693: LD_VAR 0 2
15697: PPUSH
15698: CALL_OW 12
15702: ARRAY
15703: ST_TO_ADDR
// SetSide ( un , 0 ) ;
15704: LD_VAR 0 1
15708: PPUSH
15709: LD_INT 0
15711: PPUSH
15712: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
15716: LD_VAR 0 1
15720: PPUSH
15721: LD_OWVAR 3
15725: PUSH
15726: LD_VAR 0 1
15730: DIFF
15731: PPUSH
15732: LD_VAR 0 1
15736: PPUSH
15737: CALL_OW 74
15741: PPUSH
15742: CALL_OW 115
// wait ( 0 0$20 ) ;
15746: LD_INT 700
15748: PPUSH
15749: CALL_OW 67
// SetSide ( un , your_side ) ;
15753: LD_VAR 0 1
15757: PPUSH
15758: LD_OWVAR 2
15762: PPUSH
15763: CALL_OW 235
// end ;
15767: PPOPN 2
15769: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
15770: LD_EXP 24
15774: PUSH
15775: LD_EXP 57
15779: AND
15780: IFFALSE 15886
15782: GO 15784
15784: DISABLE
15785: LD_INT 0
15787: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15788: LD_ADDR_VAR 0 1
15792: PUSH
15793: LD_INT 22
15795: PUSH
15796: LD_OWVAR 2
15800: PUSH
15801: EMPTY
15802: LIST
15803: LIST
15804: PUSH
15805: LD_INT 2
15807: PUSH
15808: LD_INT 30
15810: PUSH
15811: LD_INT 0
15813: PUSH
15814: EMPTY
15815: LIST
15816: LIST
15817: PUSH
15818: LD_INT 30
15820: PUSH
15821: LD_INT 1
15823: PUSH
15824: EMPTY
15825: LIST
15826: LIST
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: LIST
15832: PUSH
15833: EMPTY
15834: LIST
15835: LIST
15836: PPUSH
15837: CALL_OW 69
15841: ST_TO_ADDR
// if not depot then
15842: LD_VAR 0 1
15846: NOT
15847: IFFALSE 15851
// exit ;
15849: GO 15886
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
15851: LD_VAR 0 1
15855: PUSH
15856: LD_INT 1
15858: ARRAY
15859: PPUSH
15860: CALL_OW 250
15864: PPUSH
15865: LD_VAR 0 1
15869: PUSH
15870: LD_INT 1
15872: ARRAY
15873: PPUSH
15874: CALL_OW 251
15878: PPUSH
15879: LD_INT 70
15881: PPUSH
15882: CALL_OW 495
// end ;
15886: PPOPN 1
15888: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
15889: LD_EXP 24
15893: PUSH
15894: LD_EXP 58
15898: AND
15899: IFFALSE 16110
15901: GO 15903
15903: DISABLE
15904: LD_INT 0
15906: PPUSH
15907: PPUSH
15908: PPUSH
15909: PPUSH
15910: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15911: LD_ADDR_VAR 0 5
15915: PUSH
15916: LD_INT 22
15918: PUSH
15919: LD_OWVAR 2
15923: PUSH
15924: EMPTY
15925: LIST
15926: LIST
15927: PUSH
15928: LD_INT 21
15930: PUSH
15931: LD_INT 1
15933: PUSH
15934: EMPTY
15935: LIST
15936: LIST
15937: PUSH
15938: EMPTY
15939: LIST
15940: LIST
15941: PPUSH
15942: CALL_OW 69
15946: ST_TO_ADDR
// if not tmp then
15947: LD_VAR 0 5
15951: NOT
15952: IFFALSE 15956
// exit ;
15954: GO 16110
// for i in tmp do
15956: LD_ADDR_VAR 0 1
15960: PUSH
15961: LD_VAR 0 5
15965: PUSH
15966: FOR_IN
15967: IFFALSE 16108
// begin d := rand ( 0 , 5 ) ;
15969: LD_ADDR_VAR 0 4
15973: PUSH
15974: LD_INT 0
15976: PPUSH
15977: LD_INT 5
15979: PPUSH
15980: CALL_OW 12
15984: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15985: LD_ADDR_VAR 0 2
15989: PUSH
15990: LD_VAR 0 1
15994: PPUSH
15995: CALL_OW 250
15999: PPUSH
16000: LD_VAR 0 4
16004: PPUSH
16005: LD_INT 3
16007: PPUSH
16008: LD_INT 12
16010: PPUSH
16011: CALL_OW 12
16015: PPUSH
16016: CALL_OW 272
16020: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16021: LD_ADDR_VAR 0 3
16025: PUSH
16026: LD_VAR 0 1
16030: PPUSH
16031: CALL_OW 251
16035: PPUSH
16036: LD_VAR 0 4
16040: PPUSH
16041: LD_INT 3
16043: PPUSH
16044: LD_INT 12
16046: PPUSH
16047: CALL_OW 12
16051: PPUSH
16052: CALL_OW 273
16056: ST_TO_ADDR
// if ValidHex ( x , y ) then
16057: LD_VAR 0 2
16061: PPUSH
16062: LD_VAR 0 3
16066: PPUSH
16067: CALL_OW 488
16071: IFFALSE 16106
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16073: LD_VAR 0 1
16077: PPUSH
16078: LD_VAR 0 2
16082: PPUSH
16083: LD_VAR 0 3
16087: PPUSH
16088: LD_INT 3
16090: PPUSH
16091: LD_INT 6
16093: PPUSH
16094: CALL_OW 12
16098: PPUSH
16099: LD_INT 1
16101: PPUSH
16102: CALL_OW 483
// end ;
16106: GO 15966
16108: POP
16109: POP
// end ;
16110: PPOPN 5
16112: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16113: LD_EXP 24
16117: PUSH
16118: LD_EXP 59
16122: AND
16123: IFFALSE 16217
16125: GO 16127
16127: DISABLE
16128: LD_INT 0
16130: PPUSH
16131: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16132: LD_ADDR_VAR 0 2
16136: PUSH
16137: LD_INT 22
16139: PUSH
16140: LD_OWVAR 2
16144: PUSH
16145: EMPTY
16146: LIST
16147: LIST
16148: PUSH
16149: LD_INT 32
16151: PUSH
16152: LD_INT 1
16154: PUSH
16155: EMPTY
16156: LIST
16157: LIST
16158: PUSH
16159: LD_INT 21
16161: PUSH
16162: LD_INT 2
16164: PUSH
16165: EMPTY
16166: LIST
16167: LIST
16168: PUSH
16169: EMPTY
16170: LIST
16171: LIST
16172: LIST
16173: PPUSH
16174: CALL_OW 69
16178: ST_TO_ADDR
// if not tmp then
16179: LD_VAR 0 2
16183: NOT
16184: IFFALSE 16188
// exit ;
16186: GO 16217
// for i in tmp do
16188: LD_ADDR_VAR 0 1
16192: PUSH
16193: LD_VAR 0 2
16197: PUSH
16198: FOR_IN
16199: IFFALSE 16215
// SetFuel ( i , 0 ) ;
16201: LD_VAR 0 1
16205: PPUSH
16206: LD_INT 0
16208: PPUSH
16209: CALL_OW 240
16213: GO 16198
16215: POP
16216: POP
// end ;
16217: PPOPN 2
16219: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16220: LD_EXP 24
16224: PUSH
16225: LD_EXP 60
16229: AND
16230: IFFALSE 16296
16232: GO 16234
16234: DISABLE
16235: LD_INT 0
16237: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16238: LD_ADDR_VAR 0 1
16242: PUSH
16243: LD_INT 22
16245: PUSH
16246: LD_OWVAR 2
16250: PUSH
16251: EMPTY
16252: LIST
16253: LIST
16254: PUSH
16255: LD_INT 30
16257: PUSH
16258: LD_INT 29
16260: PUSH
16261: EMPTY
16262: LIST
16263: LIST
16264: PUSH
16265: EMPTY
16266: LIST
16267: LIST
16268: PPUSH
16269: CALL_OW 69
16273: ST_TO_ADDR
// if not tmp then
16274: LD_VAR 0 1
16278: NOT
16279: IFFALSE 16283
// exit ;
16281: GO 16296
// DestroyUnit ( tmp [ 1 ] ) ;
16283: LD_VAR 0 1
16287: PUSH
16288: LD_INT 1
16290: ARRAY
16291: PPUSH
16292: CALL_OW 65
// end ;
16296: PPOPN 1
16298: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16299: LD_EXP 24
16303: PUSH
16304: LD_EXP 62
16308: AND
16309: IFFALSE 16438
16311: GO 16313
16313: DISABLE
16314: LD_INT 0
16316: PPUSH
// begin uc_side := 0 ;
16317: LD_ADDR_OWVAR 20
16321: PUSH
16322: LD_INT 0
16324: ST_TO_ADDR
// uc_nation := nation_arabian ;
16325: LD_ADDR_OWVAR 21
16329: PUSH
16330: LD_INT 2
16332: ST_TO_ADDR
// hc_gallery :=  ;
16333: LD_ADDR_OWVAR 33
16337: PUSH
16338: LD_STRING 
16340: ST_TO_ADDR
// hc_name :=  ;
16341: LD_ADDR_OWVAR 26
16345: PUSH
16346: LD_STRING 
16348: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
16349: LD_INT 1
16351: PPUSH
16352: LD_INT 11
16354: PPUSH
16355: LD_INT 10
16357: PPUSH
16358: CALL_OW 380
// un := CreateHuman ;
16362: LD_ADDR_VAR 0 1
16366: PUSH
16367: CALL_OW 44
16371: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16372: LD_VAR 0 1
16376: PPUSH
16377: LD_INT 1
16379: PPUSH
16380: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16384: LD_INT 35
16386: PPUSH
16387: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16391: LD_VAR 0 1
16395: PPUSH
16396: LD_INT 22
16398: PUSH
16399: LD_OWVAR 2
16403: PUSH
16404: EMPTY
16405: LIST
16406: LIST
16407: PPUSH
16408: CALL_OW 69
16412: PPUSH
16413: LD_VAR 0 1
16417: PPUSH
16418: CALL_OW 74
16422: PPUSH
16423: CALL_OW 115
// until IsDead ( un ) ;
16427: LD_VAR 0 1
16431: PPUSH
16432: CALL_OW 301
16436: IFFALSE 16384
// end ;
16438: PPOPN 1
16440: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
16441: LD_EXP 24
16445: PUSH
16446: LD_EXP 64
16450: AND
16451: IFFALSE 16463
16453: GO 16455
16455: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
16456: LD_STRING earthquake(getX(game), 0, 32)
16458: PPUSH
16459: CALL_OW 559
16463: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
16464: LD_EXP 24
16468: PUSH
16469: LD_EXP 65
16473: AND
16474: IFFALSE 16565
16476: GO 16478
16478: DISABLE
16479: LD_INT 0
16481: PPUSH
// begin enable ;
16482: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
16483: LD_ADDR_VAR 0 1
16487: PUSH
16488: LD_INT 22
16490: PUSH
16491: LD_OWVAR 2
16495: PUSH
16496: EMPTY
16497: LIST
16498: LIST
16499: PUSH
16500: LD_INT 21
16502: PUSH
16503: LD_INT 2
16505: PUSH
16506: EMPTY
16507: LIST
16508: LIST
16509: PUSH
16510: LD_INT 33
16512: PUSH
16513: LD_INT 3
16515: PUSH
16516: EMPTY
16517: LIST
16518: LIST
16519: PUSH
16520: EMPTY
16521: LIST
16522: LIST
16523: LIST
16524: PPUSH
16525: CALL_OW 69
16529: ST_TO_ADDR
// if not tmp then
16530: LD_VAR 0 1
16534: NOT
16535: IFFALSE 16539
// exit ;
16537: GO 16565
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16539: LD_VAR 0 1
16543: PUSH
16544: LD_INT 1
16546: PPUSH
16547: LD_VAR 0 1
16551: PPUSH
16552: CALL_OW 12
16556: ARRAY
16557: PPUSH
16558: LD_INT 1
16560: PPUSH
16561: CALL_OW 234
// end ;
16565: PPOPN 1
16567: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
16568: LD_EXP 24
16572: PUSH
16573: LD_EXP 66
16577: AND
16578: IFFALSE 16719
16580: GO 16582
16582: DISABLE
16583: LD_INT 0
16585: PPUSH
16586: PPUSH
16587: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16588: LD_ADDR_VAR 0 3
16592: PUSH
16593: LD_INT 22
16595: PUSH
16596: LD_OWVAR 2
16600: PUSH
16601: EMPTY
16602: LIST
16603: LIST
16604: PUSH
16605: LD_INT 25
16607: PUSH
16608: LD_INT 1
16610: PUSH
16611: EMPTY
16612: LIST
16613: LIST
16614: PUSH
16615: EMPTY
16616: LIST
16617: LIST
16618: PPUSH
16619: CALL_OW 69
16623: ST_TO_ADDR
// if not tmp then
16624: LD_VAR 0 3
16628: NOT
16629: IFFALSE 16633
// exit ;
16631: GO 16719
// un := tmp [ rand ( 1 , tmp ) ] ;
16633: LD_ADDR_VAR 0 2
16637: PUSH
16638: LD_VAR 0 3
16642: PUSH
16643: LD_INT 1
16645: PPUSH
16646: LD_VAR 0 3
16650: PPUSH
16651: CALL_OW 12
16655: ARRAY
16656: ST_TO_ADDR
// if Crawls ( un ) then
16657: LD_VAR 0 2
16661: PPUSH
16662: CALL_OW 318
16666: IFFALSE 16677
// ComWalk ( un ) ;
16668: LD_VAR 0 2
16672: PPUSH
16673: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
16677: LD_VAR 0 2
16681: PPUSH
16682: LD_INT 9
16684: PPUSH
16685: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
16689: LD_INT 28
16691: PPUSH
16692: LD_OWVAR 2
16696: PPUSH
16697: LD_INT 2
16699: PPUSH
16700: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
16704: LD_INT 29
16706: PPUSH
16707: LD_OWVAR 2
16711: PPUSH
16712: LD_INT 2
16714: PPUSH
16715: CALL_OW 322
// end ;
16719: PPOPN 3
16721: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
16722: LD_EXP 24
16726: PUSH
16727: LD_EXP 67
16731: AND
16732: IFFALSE 16843
16734: GO 16736
16736: DISABLE
16737: LD_INT 0
16739: PPUSH
16740: PPUSH
16741: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16742: LD_ADDR_VAR 0 3
16746: PUSH
16747: LD_INT 22
16749: PUSH
16750: LD_OWVAR 2
16754: PUSH
16755: EMPTY
16756: LIST
16757: LIST
16758: PUSH
16759: LD_INT 25
16761: PUSH
16762: LD_INT 1
16764: PUSH
16765: EMPTY
16766: LIST
16767: LIST
16768: PUSH
16769: EMPTY
16770: LIST
16771: LIST
16772: PPUSH
16773: CALL_OW 69
16777: ST_TO_ADDR
// if not tmp then
16778: LD_VAR 0 3
16782: NOT
16783: IFFALSE 16787
// exit ;
16785: GO 16843
// un := tmp [ rand ( 1 , tmp ) ] ;
16787: LD_ADDR_VAR 0 2
16791: PUSH
16792: LD_VAR 0 3
16796: PUSH
16797: LD_INT 1
16799: PPUSH
16800: LD_VAR 0 3
16804: PPUSH
16805: CALL_OW 12
16809: ARRAY
16810: ST_TO_ADDR
// if Crawls ( un ) then
16811: LD_VAR 0 2
16815: PPUSH
16816: CALL_OW 318
16820: IFFALSE 16831
// ComWalk ( un ) ;
16822: LD_VAR 0 2
16826: PPUSH
16827: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16831: LD_VAR 0 2
16835: PPUSH
16836: LD_INT 8
16838: PPUSH
16839: CALL_OW 336
// end ;
16843: PPOPN 3
16845: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
16846: LD_EXP 24
16850: PUSH
16851: LD_EXP 68
16855: AND
16856: IFFALSE 17000
16858: GO 16860
16860: DISABLE
16861: LD_INT 0
16863: PPUSH
16864: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
16865: LD_ADDR_VAR 0 2
16869: PUSH
16870: LD_INT 22
16872: PUSH
16873: LD_OWVAR 2
16877: PUSH
16878: EMPTY
16879: LIST
16880: LIST
16881: PUSH
16882: LD_INT 21
16884: PUSH
16885: LD_INT 2
16887: PUSH
16888: EMPTY
16889: LIST
16890: LIST
16891: PUSH
16892: LD_INT 2
16894: PUSH
16895: LD_INT 34
16897: PUSH
16898: LD_INT 12
16900: PUSH
16901: EMPTY
16902: LIST
16903: LIST
16904: PUSH
16905: LD_INT 34
16907: PUSH
16908: LD_INT 51
16910: PUSH
16911: EMPTY
16912: LIST
16913: LIST
16914: PUSH
16915: LD_INT 34
16917: PUSH
16918: LD_INT 32
16920: PUSH
16921: EMPTY
16922: LIST
16923: LIST
16924: PUSH
16925: EMPTY
16926: LIST
16927: LIST
16928: LIST
16929: LIST
16930: PUSH
16931: EMPTY
16932: LIST
16933: LIST
16934: LIST
16935: PPUSH
16936: CALL_OW 69
16940: ST_TO_ADDR
// if not tmp then
16941: LD_VAR 0 2
16945: NOT
16946: IFFALSE 16950
// exit ;
16948: GO 17000
// for i in tmp do
16950: LD_ADDR_VAR 0 1
16954: PUSH
16955: LD_VAR 0 2
16959: PUSH
16960: FOR_IN
16961: IFFALSE 16998
// if GetCargo ( i , mat_artifact ) = 0 then
16963: LD_VAR 0 1
16967: PPUSH
16968: LD_INT 4
16970: PPUSH
16971: CALL_OW 289
16975: PUSH
16976: LD_INT 0
16978: EQUAL
16979: IFFALSE 16996
// SetCargo ( i , mat_siberit , 100 ) ;
16981: LD_VAR 0 1
16985: PPUSH
16986: LD_INT 3
16988: PPUSH
16989: LD_INT 100
16991: PPUSH
16992: CALL_OW 290
16996: GO 16960
16998: POP
16999: POP
// end ;
17000: PPOPN 2
17002: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17003: LD_EXP 24
17007: PUSH
17008: LD_EXP 69
17012: AND
17013: IFFALSE 17196
17015: GO 17017
17017: DISABLE
17018: LD_INT 0
17020: PPUSH
17021: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17022: LD_ADDR_VAR 0 2
17026: PUSH
17027: LD_INT 22
17029: PUSH
17030: LD_OWVAR 2
17034: PUSH
17035: EMPTY
17036: LIST
17037: LIST
17038: PPUSH
17039: CALL_OW 69
17043: ST_TO_ADDR
// if not tmp then
17044: LD_VAR 0 2
17048: NOT
17049: IFFALSE 17053
// exit ;
17051: GO 17196
// for i := 1 to 2 do
17053: LD_ADDR_VAR 0 1
17057: PUSH
17058: DOUBLE
17059: LD_INT 1
17061: DEC
17062: ST_TO_ADDR
17063: LD_INT 2
17065: PUSH
17066: FOR_TO
17067: IFFALSE 17194
// begin uc_side := your_side ;
17069: LD_ADDR_OWVAR 20
17073: PUSH
17074: LD_OWVAR 2
17078: ST_TO_ADDR
// uc_nation := nation_american ;
17079: LD_ADDR_OWVAR 21
17083: PUSH
17084: LD_INT 1
17086: ST_TO_ADDR
// vc_chassis := us_morphling ;
17087: LD_ADDR_OWVAR 37
17091: PUSH
17092: LD_INT 5
17094: ST_TO_ADDR
// vc_engine := engine_siberite ;
17095: LD_ADDR_OWVAR 39
17099: PUSH
17100: LD_INT 3
17102: ST_TO_ADDR
// vc_control := control_computer ;
17103: LD_ADDR_OWVAR 38
17107: PUSH
17108: LD_INT 3
17110: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17111: LD_ADDR_OWVAR 40
17115: PUSH
17116: LD_INT 10
17118: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17119: LD_VAR 0 2
17123: PUSH
17124: LD_INT 1
17126: ARRAY
17127: PPUSH
17128: CALL_OW 310
17132: NOT
17133: IFFALSE 17180
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17135: CALL_OW 45
17139: PPUSH
17140: LD_VAR 0 2
17144: PUSH
17145: LD_INT 1
17147: ARRAY
17148: PPUSH
17149: CALL_OW 250
17153: PPUSH
17154: LD_VAR 0 2
17158: PUSH
17159: LD_INT 1
17161: ARRAY
17162: PPUSH
17163: CALL_OW 251
17167: PPUSH
17168: LD_INT 12
17170: PPUSH
17171: LD_INT 1
17173: PPUSH
17174: CALL_OW 50
17178: GO 17192
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17180: CALL_OW 45
17184: PPUSH
17185: LD_INT 1
17187: PPUSH
17188: CALL_OW 51
// end ;
17192: GO 17066
17194: POP
17195: POP
// end ;
17196: PPOPN 2
17198: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17199: LD_EXP 24
17203: PUSH
17204: LD_EXP 70
17208: AND
17209: IFFALSE 17431
17211: GO 17213
17213: DISABLE
17214: LD_INT 0
17216: PPUSH
17217: PPUSH
17218: PPUSH
17219: PPUSH
17220: PPUSH
17221: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17222: LD_ADDR_VAR 0 6
17226: PUSH
17227: LD_INT 22
17229: PUSH
17230: LD_OWVAR 2
17234: PUSH
17235: EMPTY
17236: LIST
17237: LIST
17238: PUSH
17239: LD_INT 21
17241: PUSH
17242: LD_INT 1
17244: PUSH
17245: EMPTY
17246: LIST
17247: LIST
17248: PUSH
17249: LD_INT 3
17251: PUSH
17252: LD_INT 23
17254: PUSH
17255: LD_INT 0
17257: PUSH
17258: EMPTY
17259: LIST
17260: LIST
17261: PUSH
17262: EMPTY
17263: LIST
17264: LIST
17265: PUSH
17266: EMPTY
17267: LIST
17268: LIST
17269: LIST
17270: PPUSH
17271: CALL_OW 69
17275: ST_TO_ADDR
// if not tmp then
17276: LD_VAR 0 6
17280: NOT
17281: IFFALSE 17285
// exit ;
17283: GO 17431
// s1 := rand ( 1 , 4 ) ;
17285: LD_ADDR_VAR 0 2
17289: PUSH
17290: LD_INT 1
17292: PPUSH
17293: LD_INT 4
17295: PPUSH
17296: CALL_OW 12
17300: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17301: LD_ADDR_VAR 0 4
17305: PUSH
17306: LD_VAR 0 6
17310: PUSH
17311: LD_INT 1
17313: ARRAY
17314: PPUSH
17315: LD_VAR 0 2
17319: PPUSH
17320: CALL_OW 259
17324: ST_TO_ADDR
// if s1 = 1 then
17325: LD_VAR 0 2
17329: PUSH
17330: LD_INT 1
17332: EQUAL
17333: IFFALSE 17353
// s2 := rand ( 2 , 4 ) else
17335: LD_ADDR_VAR 0 3
17339: PUSH
17340: LD_INT 2
17342: PPUSH
17343: LD_INT 4
17345: PPUSH
17346: CALL_OW 12
17350: ST_TO_ADDR
17351: GO 17361
// s2 := 1 ;
17353: LD_ADDR_VAR 0 3
17357: PUSH
17358: LD_INT 1
17360: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
17361: LD_ADDR_VAR 0 5
17365: PUSH
17366: LD_VAR 0 6
17370: PUSH
17371: LD_INT 1
17373: ARRAY
17374: PPUSH
17375: LD_VAR 0 3
17379: PPUSH
17380: CALL_OW 259
17384: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
17385: LD_VAR 0 6
17389: PUSH
17390: LD_INT 1
17392: ARRAY
17393: PPUSH
17394: LD_VAR 0 2
17398: PPUSH
17399: LD_VAR 0 5
17403: PPUSH
17404: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
17408: LD_VAR 0 6
17412: PUSH
17413: LD_INT 1
17415: ARRAY
17416: PPUSH
17417: LD_VAR 0 3
17421: PPUSH
17422: LD_VAR 0 4
17426: PPUSH
17427: CALL_OW 237
// end ;
17431: PPOPN 6
17433: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
17434: LD_EXP 24
17438: PUSH
17439: LD_EXP 71
17443: AND
17444: IFFALSE 17523
17446: GO 17448
17448: DISABLE
17449: LD_INT 0
17451: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
17452: LD_ADDR_VAR 0 1
17456: PUSH
17457: LD_INT 22
17459: PUSH
17460: LD_OWVAR 2
17464: PUSH
17465: EMPTY
17466: LIST
17467: LIST
17468: PUSH
17469: LD_INT 30
17471: PUSH
17472: LD_INT 3
17474: PUSH
17475: EMPTY
17476: LIST
17477: LIST
17478: PUSH
17479: EMPTY
17480: LIST
17481: LIST
17482: PPUSH
17483: CALL_OW 69
17487: ST_TO_ADDR
// if not tmp then
17488: LD_VAR 0 1
17492: NOT
17493: IFFALSE 17497
// exit ;
17495: GO 17523
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17497: LD_VAR 0 1
17501: PUSH
17502: LD_INT 1
17504: PPUSH
17505: LD_VAR 0 1
17509: PPUSH
17510: CALL_OW 12
17514: ARRAY
17515: PPUSH
17516: LD_INT 1
17518: PPUSH
17519: CALL_OW 234
// end ;
17523: PPOPN 1
17525: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17526: LD_EXP 24
17530: PUSH
17531: LD_EXP 72
17535: AND
17536: IFFALSE 17648
17538: GO 17540
17540: DISABLE
17541: LD_INT 0
17543: PPUSH
17544: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
17545: LD_ADDR_VAR 0 2
17549: PUSH
17550: LD_INT 22
17552: PUSH
17553: LD_OWVAR 2
17557: PUSH
17558: EMPTY
17559: LIST
17560: LIST
17561: PUSH
17562: LD_INT 2
17564: PUSH
17565: LD_INT 30
17567: PUSH
17568: LD_INT 27
17570: PUSH
17571: EMPTY
17572: LIST
17573: LIST
17574: PUSH
17575: LD_INT 30
17577: PUSH
17578: LD_INT 26
17580: PUSH
17581: EMPTY
17582: LIST
17583: LIST
17584: PUSH
17585: LD_INT 30
17587: PUSH
17588: LD_INT 28
17590: PUSH
17591: EMPTY
17592: LIST
17593: LIST
17594: PUSH
17595: EMPTY
17596: LIST
17597: LIST
17598: LIST
17599: LIST
17600: PUSH
17601: EMPTY
17602: LIST
17603: LIST
17604: PPUSH
17605: CALL_OW 69
17609: ST_TO_ADDR
// if not tmp then
17610: LD_VAR 0 2
17614: NOT
17615: IFFALSE 17619
// exit ;
17617: GO 17648
// for i in tmp do
17619: LD_ADDR_VAR 0 1
17623: PUSH
17624: LD_VAR 0 2
17628: PUSH
17629: FOR_IN
17630: IFFALSE 17646
// SetLives ( i , 1 ) ;
17632: LD_VAR 0 1
17636: PPUSH
17637: LD_INT 1
17639: PPUSH
17640: CALL_OW 234
17644: GO 17629
17646: POP
17647: POP
// end ;
17648: PPOPN 2
17650: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
17651: LD_EXP 24
17655: PUSH
17656: LD_EXP 73
17660: AND
17661: IFFALSE 17935
17663: GO 17665
17665: DISABLE
17666: LD_INT 0
17668: PPUSH
17669: PPUSH
17670: PPUSH
// begin i := rand ( 1 , 7 ) ;
17671: LD_ADDR_VAR 0 1
17675: PUSH
17676: LD_INT 1
17678: PPUSH
17679: LD_INT 7
17681: PPUSH
17682: CALL_OW 12
17686: ST_TO_ADDR
// case i of 1 :
17687: LD_VAR 0 1
17691: PUSH
17692: LD_INT 1
17694: DOUBLE
17695: EQUAL
17696: IFTRUE 17700
17698: GO 17710
17700: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
17701: LD_STRING earthquake(getX(game), 0, 32)
17703: PPUSH
17704: CALL_OW 559
17708: GO 17935
17710: LD_INT 2
17712: DOUBLE
17713: EQUAL
17714: IFTRUE 17718
17716: GO 17732
17718: POP
// begin ToLua ( displayStucuk(); ) ;
17719: LD_STRING displayStucuk();
17721: PPUSH
17722: CALL_OW 559
// ResetFog ;
17726: CALL_OW 335
// end ; 3 :
17730: GO 17935
17732: LD_INT 3
17734: DOUBLE
17735: EQUAL
17736: IFTRUE 17740
17738: GO 17844
17740: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17741: LD_ADDR_VAR 0 2
17745: PUSH
17746: LD_INT 22
17748: PUSH
17749: LD_OWVAR 2
17753: PUSH
17754: EMPTY
17755: LIST
17756: LIST
17757: PUSH
17758: LD_INT 25
17760: PUSH
17761: LD_INT 1
17763: PUSH
17764: EMPTY
17765: LIST
17766: LIST
17767: PUSH
17768: EMPTY
17769: LIST
17770: LIST
17771: PPUSH
17772: CALL_OW 69
17776: ST_TO_ADDR
// if not tmp then
17777: LD_VAR 0 2
17781: NOT
17782: IFFALSE 17786
// exit ;
17784: GO 17935
// un := tmp [ rand ( 1 , tmp ) ] ;
17786: LD_ADDR_VAR 0 3
17790: PUSH
17791: LD_VAR 0 2
17795: PUSH
17796: LD_INT 1
17798: PPUSH
17799: LD_VAR 0 2
17803: PPUSH
17804: CALL_OW 12
17808: ARRAY
17809: ST_TO_ADDR
// if Crawls ( un ) then
17810: LD_VAR 0 3
17814: PPUSH
17815: CALL_OW 318
17819: IFFALSE 17830
// ComWalk ( un ) ;
17821: LD_VAR 0 3
17825: PPUSH
17826: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17830: LD_VAR 0 3
17834: PPUSH
17835: LD_INT 8
17837: PPUSH
17838: CALL_OW 336
// end ; 4 :
17842: GO 17935
17844: LD_INT 4
17846: DOUBLE
17847: EQUAL
17848: IFTRUE 17852
17850: GO 17913
17852: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17853: LD_ADDR_VAR 0 2
17857: PUSH
17858: LD_INT 22
17860: PUSH
17861: LD_OWVAR 2
17865: PUSH
17866: EMPTY
17867: LIST
17868: LIST
17869: PUSH
17870: LD_INT 30
17872: PUSH
17873: LD_INT 29
17875: PUSH
17876: EMPTY
17877: LIST
17878: LIST
17879: PUSH
17880: EMPTY
17881: LIST
17882: LIST
17883: PPUSH
17884: CALL_OW 69
17888: ST_TO_ADDR
// if not tmp then
17889: LD_VAR 0 2
17893: NOT
17894: IFFALSE 17898
// exit ;
17896: GO 17935
// DestroyUnit ( tmp [ 1 ] ) ;
17898: LD_VAR 0 2
17902: PUSH
17903: LD_INT 1
17905: ARRAY
17906: PPUSH
17907: CALL_OW 65
// end ; 5 .. 7 :
17911: GO 17935
17913: LD_INT 5
17915: DOUBLE
17916: GREATEREQUAL
17917: IFFALSE 17925
17919: LD_INT 7
17921: DOUBLE
17922: LESSEQUAL
17923: IFTRUE 17927
17925: GO 17934
17927: POP
// StreamSibBomb ; end ;
17928: CALL 14185 0 0
17932: GO 17935
17934: POP
// end ;
17935: PPOPN 3
17937: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17938: LD_EXP 24
17942: PUSH
17943: LD_EXP 74
17947: AND
17948: IFFALSE 18104
17950: GO 17952
17952: DISABLE
17953: LD_INT 0
17955: PPUSH
17956: PPUSH
17957: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17958: LD_ADDR_VAR 0 2
17962: PUSH
17963: LD_INT 81
17965: PUSH
17966: LD_OWVAR 2
17970: PUSH
17971: EMPTY
17972: LIST
17973: LIST
17974: PUSH
17975: LD_INT 2
17977: PUSH
17978: LD_INT 21
17980: PUSH
17981: LD_INT 1
17983: PUSH
17984: EMPTY
17985: LIST
17986: LIST
17987: PUSH
17988: LD_INT 21
17990: PUSH
17991: LD_INT 2
17993: PUSH
17994: EMPTY
17995: LIST
17996: LIST
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: LIST
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: PPUSH
18007: CALL_OW 69
18011: ST_TO_ADDR
// if not tmp then
18012: LD_VAR 0 2
18016: NOT
18017: IFFALSE 18021
// exit ;
18019: GO 18104
// p := 0 ;
18021: LD_ADDR_VAR 0 3
18025: PUSH
18026: LD_INT 0
18028: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18029: LD_INT 35
18031: PPUSH
18032: CALL_OW 67
// p := p + 1 ;
18036: LD_ADDR_VAR 0 3
18040: PUSH
18041: LD_VAR 0 3
18045: PUSH
18046: LD_INT 1
18048: PLUS
18049: ST_TO_ADDR
// for i in tmp do
18050: LD_ADDR_VAR 0 1
18054: PUSH
18055: LD_VAR 0 2
18059: PUSH
18060: FOR_IN
18061: IFFALSE 18092
// if GetLives ( i ) < 1000 then
18063: LD_VAR 0 1
18067: PPUSH
18068: CALL_OW 256
18072: PUSH
18073: LD_INT 1000
18075: LESS
18076: IFFALSE 18090
// SetLives ( i , 1000 ) ;
18078: LD_VAR 0 1
18082: PPUSH
18083: LD_INT 1000
18085: PPUSH
18086: CALL_OW 234
18090: GO 18060
18092: POP
18093: POP
// until p > 20 ;
18094: LD_VAR 0 3
18098: PUSH
18099: LD_INT 20
18101: GREATER
18102: IFFALSE 18029
// end ;
18104: PPOPN 3
18106: END
// every 0 0$1 trigger StreamModeActive and sTime do
18107: LD_EXP 24
18111: PUSH
18112: LD_EXP 75
18116: AND
18117: IFFALSE 18152
18119: GO 18121
18121: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18122: LD_INT 28
18124: PPUSH
18125: LD_OWVAR 2
18129: PPUSH
18130: LD_INT 2
18132: PPUSH
18133: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18137: LD_INT 30
18139: PPUSH
18140: LD_OWVAR 2
18144: PPUSH
18145: LD_INT 2
18147: PPUSH
18148: CALL_OW 322
// end ;
18152: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18153: LD_EXP 24
18157: PUSH
18158: LD_EXP 76
18162: AND
18163: IFFALSE 18284
18165: GO 18167
18167: DISABLE
18168: LD_INT 0
18170: PPUSH
18171: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18172: LD_ADDR_VAR 0 2
18176: PUSH
18177: LD_INT 22
18179: PUSH
18180: LD_OWVAR 2
18184: PUSH
18185: EMPTY
18186: LIST
18187: LIST
18188: PUSH
18189: LD_INT 21
18191: PUSH
18192: LD_INT 1
18194: PUSH
18195: EMPTY
18196: LIST
18197: LIST
18198: PUSH
18199: LD_INT 3
18201: PUSH
18202: LD_INT 23
18204: PUSH
18205: LD_INT 0
18207: PUSH
18208: EMPTY
18209: LIST
18210: LIST
18211: PUSH
18212: EMPTY
18213: LIST
18214: LIST
18215: PUSH
18216: EMPTY
18217: LIST
18218: LIST
18219: LIST
18220: PPUSH
18221: CALL_OW 69
18225: ST_TO_ADDR
// if not tmp then
18226: LD_VAR 0 2
18230: NOT
18231: IFFALSE 18235
// exit ;
18233: GO 18284
// for i in tmp do
18235: LD_ADDR_VAR 0 1
18239: PUSH
18240: LD_VAR 0 2
18244: PUSH
18245: FOR_IN
18246: IFFALSE 18282
// begin if Crawls ( i ) then
18248: LD_VAR 0 1
18252: PPUSH
18253: CALL_OW 318
18257: IFFALSE 18268
// ComWalk ( i ) ;
18259: LD_VAR 0 1
18263: PPUSH
18264: CALL_OW 138
// SetClass ( i , 2 ) ;
18268: LD_VAR 0 1
18272: PPUSH
18273: LD_INT 2
18275: PPUSH
18276: CALL_OW 336
// end ;
18280: GO 18245
18282: POP
18283: POP
// end ;
18284: PPOPN 2
18286: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18287: LD_EXP 24
18291: PUSH
18292: LD_EXP 77
18296: AND
18297: IFFALSE 18578
18299: GO 18301
18301: DISABLE
18302: LD_INT 0
18304: PPUSH
18305: PPUSH
18306: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18307: LD_OWVAR 2
18311: PPUSH
18312: LD_INT 9
18314: PPUSH
18315: LD_INT 1
18317: PPUSH
18318: LD_INT 1
18320: PPUSH
18321: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
18325: LD_INT 9
18327: PPUSH
18328: LD_OWVAR 2
18332: PPUSH
18333: CALL_OW 343
// uc_side := 9 ;
18337: LD_ADDR_OWVAR 20
18341: PUSH
18342: LD_INT 9
18344: ST_TO_ADDR
// uc_nation := 2 ;
18345: LD_ADDR_OWVAR 21
18349: PUSH
18350: LD_INT 2
18352: ST_TO_ADDR
// hc_name := Dark Warrior ;
18353: LD_ADDR_OWVAR 26
18357: PUSH
18358: LD_STRING Dark Warrior
18360: ST_TO_ADDR
// hc_gallery :=  ;
18361: LD_ADDR_OWVAR 33
18365: PUSH
18366: LD_STRING 
18368: ST_TO_ADDR
// hc_noskilllimit := true ;
18369: LD_ADDR_OWVAR 76
18373: PUSH
18374: LD_INT 1
18376: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
18377: LD_ADDR_OWVAR 31
18381: PUSH
18382: LD_INT 30
18384: PUSH
18385: LD_INT 30
18387: PUSH
18388: LD_INT 30
18390: PUSH
18391: LD_INT 30
18393: PUSH
18394: EMPTY
18395: LIST
18396: LIST
18397: LIST
18398: LIST
18399: ST_TO_ADDR
// un := CreateHuman ;
18400: LD_ADDR_VAR 0 3
18404: PUSH
18405: CALL_OW 44
18409: ST_TO_ADDR
// hc_noskilllimit := false ;
18410: LD_ADDR_OWVAR 76
18414: PUSH
18415: LD_INT 0
18417: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18418: LD_VAR 0 3
18422: PPUSH
18423: LD_INT 1
18425: PPUSH
18426: CALL_OW 51
// p := 0 ;
18430: LD_ADDR_VAR 0 2
18434: PUSH
18435: LD_INT 0
18437: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18438: LD_INT 35
18440: PPUSH
18441: CALL_OW 67
// p := p + 1 ;
18445: LD_ADDR_VAR 0 2
18449: PUSH
18450: LD_VAR 0 2
18454: PUSH
18455: LD_INT 1
18457: PLUS
18458: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
18459: LD_VAR 0 3
18463: PPUSH
18464: CALL_OW 256
18468: PUSH
18469: LD_INT 1000
18471: LESS
18472: IFFALSE 18486
// SetLives ( un , 1000 ) ;
18474: LD_VAR 0 3
18478: PPUSH
18479: LD_INT 1000
18481: PPUSH
18482: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
18486: LD_VAR 0 3
18490: PPUSH
18491: LD_INT 81
18493: PUSH
18494: LD_OWVAR 2
18498: PUSH
18499: EMPTY
18500: LIST
18501: LIST
18502: PUSH
18503: LD_INT 91
18505: PUSH
18506: LD_VAR 0 3
18510: PUSH
18511: LD_INT 30
18513: PUSH
18514: EMPTY
18515: LIST
18516: LIST
18517: LIST
18518: PUSH
18519: EMPTY
18520: LIST
18521: LIST
18522: PPUSH
18523: CALL_OW 69
18527: PPUSH
18528: LD_VAR 0 3
18532: PPUSH
18533: CALL_OW 74
18537: PPUSH
18538: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
18542: LD_VAR 0 2
18546: PUSH
18547: LD_INT 60
18549: GREATER
18550: PUSH
18551: LD_VAR 0 3
18555: PPUSH
18556: CALL_OW 301
18560: OR
18561: IFFALSE 18438
// if un then
18563: LD_VAR 0 3
18567: IFFALSE 18578
// RemoveUnit ( un ) ;
18569: LD_VAR 0 3
18573: PPUSH
18574: CALL_OW 64
// end ;
18578: PPOPN 3
18580: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18581: LD_INT 0
18583: PPUSH
// case cmd of 301 :
18584: LD_VAR 0 1
18588: PUSH
18589: LD_INT 301
18591: DOUBLE
18592: EQUAL
18593: IFTRUE 18597
18595: GO 18629
18597: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
18598: LD_VAR 0 6
18602: PPUSH
18603: LD_VAR 0 7
18607: PPUSH
18608: LD_VAR 0 8
18612: PPUSH
18613: LD_VAR 0 4
18617: PPUSH
18618: LD_VAR 0 5
18622: PPUSH
18623: CALL 19830 0 5
18627: GO 18750
18629: LD_INT 302
18631: DOUBLE
18632: EQUAL
18633: IFTRUE 18637
18635: GO 18674
18637: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18638: LD_VAR 0 6
18642: PPUSH
18643: LD_VAR 0 7
18647: PPUSH
18648: LD_VAR 0 8
18652: PPUSH
18653: LD_VAR 0 9
18657: PPUSH
18658: LD_VAR 0 4
18662: PPUSH
18663: LD_VAR 0 5
18667: PPUSH
18668: CALL 19921 0 6
18672: GO 18750
18674: LD_INT 303
18676: DOUBLE
18677: EQUAL
18678: IFTRUE 18682
18680: GO 18719
18682: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18683: LD_VAR 0 6
18687: PPUSH
18688: LD_VAR 0 7
18692: PPUSH
18693: LD_VAR 0 8
18697: PPUSH
18698: LD_VAR 0 9
18702: PPUSH
18703: LD_VAR 0 4
18707: PPUSH
18708: LD_VAR 0 5
18712: PPUSH
18713: CALL 18755 0 6
18717: GO 18750
18719: LD_INT 304
18721: DOUBLE
18722: EQUAL
18723: IFTRUE 18727
18725: GO 18749
18727: POP
// hHackTeleport ( unit , x , y ) ; end ;
18728: LD_VAR 0 2
18732: PPUSH
18733: LD_VAR 0 4
18737: PPUSH
18738: LD_VAR 0 5
18742: PPUSH
18743: CALL 20514 0 3
18747: GO 18750
18749: POP
// end ;
18750: LD_VAR 0 12
18754: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
18755: LD_INT 0
18757: PPUSH
18758: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
18759: LD_VAR 0 1
18763: PUSH
18764: LD_INT 1
18766: LESS
18767: PUSH
18768: LD_VAR 0 1
18772: PUSH
18773: LD_INT 3
18775: GREATER
18776: OR
18777: PUSH
18778: LD_VAR 0 5
18782: PPUSH
18783: LD_VAR 0 6
18787: PPUSH
18788: CALL_OW 428
18792: OR
18793: IFFALSE 18797
// exit ;
18795: GO 19517
// uc_side := your_side ;
18797: LD_ADDR_OWVAR 20
18801: PUSH
18802: LD_OWVAR 2
18806: ST_TO_ADDR
// uc_nation := nation ;
18807: LD_ADDR_OWVAR 21
18811: PUSH
18812: LD_VAR 0 1
18816: ST_TO_ADDR
// bc_level = 1 ;
18817: LD_ADDR_OWVAR 43
18821: PUSH
18822: LD_INT 1
18824: ST_TO_ADDR
// case btype of 1 :
18825: LD_VAR 0 2
18829: PUSH
18830: LD_INT 1
18832: DOUBLE
18833: EQUAL
18834: IFTRUE 18838
18836: GO 18849
18838: POP
// bc_type := b_depot ; 2 :
18839: LD_ADDR_OWVAR 42
18843: PUSH
18844: LD_INT 0
18846: ST_TO_ADDR
18847: GO 19461
18849: LD_INT 2
18851: DOUBLE
18852: EQUAL
18853: IFTRUE 18857
18855: GO 18868
18857: POP
// bc_type := b_warehouse ; 3 :
18858: LD_ADDR_OWVAR 42
18862: PUSH
18863: LD_INT 1
18865: ST_TO_ADDR
18866: GO 19461
18868: LD_INT 3
18870: DOUBLE
18871: EQUAL
18872: IFTRUE 18876
18874: GO 18887
18876: POP
// bc_type := b_lab ; 4 .. 9 :
18877: LD_ADDR_OWVAR 42
18881: PUSH
18882: LD_INT 6
18884: ST_TO_ADDR
18885: GO 19461
18887: LD_INT 4
18889: DOUBLE
18890: GREATEREQUAL
18891: IFFALSE 18899
18893: LD_INT 9
18895: DOUBLE
18896: LESSEQUAL
18897: IFTRUE 18901
18899: GO 18953
18901: POP
// begin bc_type := b_lab_half ;
18902: LD_ADDR_OWVAR 42
18906: PUSH
18907: LD_INT 7
18909: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18910: LD_ADDR_OWVAR 44
18914: PUSH
18915: LD_INT 10
18917: PUSH
18918: LD_INT 11
18920: PUSH
18921: LD_INT 12
18923: PUSH
18924: LD_INT 15
18926: PUSH
18927: LD_INT 14
18929: PUSH
18930: LD_INT 13
18932: PUSH
18933: EMPTY
18934: LIST
18935: LIST
18936: LIST
18937: LIST
18938: LIST
18939: LIST
18940: PUSH
18941: LD_VAR 0 2
18945: PUSH
18946: LD_INT 3
18948: MINUS
18949: ARRAY
18950: ST_TO_ADDR
// end ; 10 .. 13 :
18951: GO 19461
18953: LD_INT 10
18955: DOUBLE
18956: GREATEREQUAL
18957: IFFALSE 18965
18959: LD_INT 13
18961: DOUBLE
18962: LESSEQUAL
18963: IFTRUE 18967
18965: GO 19044
18967: POP
// begin bc_type := b_lab_full ;
18968: LD_ADDR_OWVAR 42
18972: PUSH
18973: LD_INT 8
18975: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18976: LD_ADDR_OWVAR 44
18980: PUSH
18981: LD_INT 10
18983: PUSH
18984: LD_INT 12
18986: PUSH
18987: LD_INT 14
18989: PUSH
18990: LD_INT 13
18992: PUSH
18993: EMPTY
18994: LIST
18995: LIST
18996: LIST
18997: LIST
18998: PUSH
18999: LD_VAR 0 2
19003: PUSH
19004: LD_INT 9
19006: MINUS
19007: ARRAY
19008: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
19009: LD_ADDR_OWVAR 45
19013: PUSH
19014: LD_INT 11
19016: PUSH
19017: LD_INT 15
19019: PUSH
19020: LD_INT 12
19022: PUSH
19023: LD_INT 15
19025: PUSH
19026: EMPTY
19027: LIST
19028: LIST
19029: LIST
19030: LIST
19031: PUSH
19032: LD_VAR 0 2
19036: PUSH
19037: LD_INT 9
19039: MINUS
19040: ARRAY
19041: ST_TO_ADDR
// end ; 14 :
19042: GO 19461
19044: LD_INT 14
19046: DOUBLE
19047: EQUAL
19048: IFTRUE 19052
19050: GO 19063
19052: POP
// bc_type := b_workshop ; 15 :
19053: LD_ADDR_OWVAR 42
19057: PUSH
19058: LD_INT 2
19060: ST_TO_ADDR
19061: GO 19461
19063: LD_INT 15
19065: DOUBLE
19066: EQUAL
19067: IFTRUE 19071
19069: GO 19082
19071: POP
// bc_type := b_factory ; 16 :
19072: LD_ADDR_OWVAR 42
19076: PUSH
19077: LD_INT 3
19079: ST_TO_ADDR
19080: GO 19461
19082: LD_INT 16
19084: DOUBLE
19085: EQUAL
19086: IFTRUE 19090
19088: GO 19101
19090: POP
// bc_type := b_ext_gun ; 17 :
19091: LD_ADDR_OWVAR 42
19095: PUSH
19096: LD_INT 17
19098: ST_TO_ADDR
19099: GO 19461
19101: LD_INT 17
19103: DOUBLE
19104: EQUAL
19105: IFTRUE 19109
19107: GO 19137
19109: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
19110: LD_ADDR_OWVAR 42
19114: PUSH
19115: LD_INT 19
19117: PUSH
19118: LD_INT 23
19120: PUSH
19121: LD_INT 19
19123: PUSH
19124: EMPTY
19125: LIST
19126: LIST
19127: LIST
19128: PUSH
19129: LD_VAR 0 1
19133: ARRAY
19134: ST_TO_ADDR
19135: GO 19461
19137: LD_INT 18
19139: DOUBLE
19140: EQUAL
19141: IFTRUE 19145
19143: GO 19156
19145: POP
// bc_type := b_ext_radar ; 19 :
19146: LD_ADDR_OWVAR 42
19150: PUSH
19151: LD_INT 20
19153: ST_TO_ADDR
19154: GO 19461
19156: LD_INT 19
19158: DOUBLE
19159: EQUAL
19160: IFTRUE 19164
19162: GO 19175
19164: POP
// bc_type := b_ext_radio ; 20 :
19165: LD_ADDR_OWVAR 42
19169: PUSH
19170: LD_INT 22
19172: ST_TO_ADDR
19173: GO 19461
19175: LD_INT 20
19177: DOUBLE
19178: EQUAL
19179: IFTRUE 19183
19181: GO 19194
19183: POP
// bc_type := b_ext_siberium ; 21 :
19184: LD_ADDR_OWVAR 42
19188: PUSH
19189: LD_INT 21
19191: ST_TO_ADDR
19192: GO 19461
19194: LD_INT 21
19196: DOUBLE
19197: EQUAL
19198: IFTRUE 19202
19200: GO 19213
19202: POP
// bc_type := b_ext_computer ; 22 :
19203: LD_ADDR_OWVAR 42
19207: PUSH
19208: LD_INT 24
19210: ST_TO_ADDR
19211: GO 19461
19213: LD_INT 22
19215: DOUBLE
19216: EQUAL
19217: IFTRUE 19221
19219: GO 19232
19221: POP
// bc_type := b_ext_track ; 23 :
19222: LD_ADDR_OWVAR 42
19226: PUSH
19227: LD_INT 16
19229: ST_TO_ADDR
19230: GO 19461
19232: LD_INT 23
19234: DOUBLE
19235: EQUAL
19236: IFTRUE 19240
19238: GO 19251
19240: POP
// bc_type := b_ext_laser ; 24 :
19241: LD_ADDR_OWVAR 42
19245: PUSH
19246: LD_INT 25
19248: ST_TO_ADDR
19249: GO 19461
19251: LD_INT 24
19253: DOUBLE
19254: EQUAL
19255: IFTRUE 19259
19257: GO 19270
19259: POP
// bc_type := b_control_tower ; 25 :
19260: LD_ADDR_OWVAR 42
19264: PUSH
19265: LD_INT 36
19267: ST_TO_ADDR
19268: GO 19461
19270: LD_INT 25
19272: DOUBLE
19273: EQUAL
19274: IFTRUE 19278
19276: GO 19289
19278: POP
// bc_type := b_breastwork ; 26 :
19279: LD_ADDR_OWVAR 42
19283: PUSH
19284: LD_INT 31
19286: ST_TO_ADDR
19287: GO 19461
19289: LD_INT 26
19291: DOUBLE
19292: EQUAL
19293: IFTRUE 19297
19295: GO 19308
19297: POP
// bc_type := b_bunker ; 27 :
19298: LD_ADDR_OWVAR 42
19302: PUSH
19303: LD_INT 32
19305: ST_TO_ADDR
19306: GO 19461
19308: LD_INT 27
19310: DOUBLE
19311: EQUAL
19312: IFTRUE 19316
19314: GO 19327
19316: POP
// bc_type := b_turret ; 28 :
19317: LD_ADDR_OWVAR 42
19321: PUSH
19322: LD_INT 33
19324: ST_TO_ADDR
19325: GO 19461
19327: LD_INT 28
19329: DOUBLE
19330: EQUAL
19331: IFTRUE 19335
19333: GO 19346
19335: POP
// bc_type := b_armoury ; 29 :
19336: LD_ADDR_OWVAR 42
19340: PUSH
19341: LD_INT 4
19343: ST_TO_ADDR
19344: GO 19461
19346: LD_INT 29
19348: DOUBLE
19349: EQUAL
19350: IFTRUE 19354
19352: GO 19365
19354: POP
// bc_type := b_barracks ; 30 :
19355: LD_ADDR_OWVAR 42
19359: PUSH
19360: LD_INT 5
19362: ST_TO_ADDR
19363: GO 19461
19365: LD_INT 30
19367: DOUBLE
19368: EQUAL
19369: IFTRUE 19373
19371: GO 19384
19373: POP
// bc_type := b_solar_power ; 31 :
19374: LD_ADDR_OWVAR 42
19378: PUSH
19379: LD_INT 27
19381: ST_TO_ADDR
19382: GO 19461
19384: LD_INT 31
19386: DOUBLE
19387: EQUAL
19388: IFTRUE 19392
19390: GO 19403
19392: POP
// bc_type := b_oil_power ; 32 :
19393: LD_ADDR_OWVAR 42
19397: PUSH
19398: LD_INT 26
19400: ST_TO_ADDR
19401: GO 19461
19403: LD_INT 32
19405: DOUBLE
19406: EQUAL
19407: IFTRUE 19411
19409: GO 19422
19411: POP
// bc_type := b_siberite_power ; 33 :
19412: LD_ADDR_OWVAR 42
19416: PUSH
19417: LD_INT 28
19419: ST_TO_ADDR
19420: GO 19461
19422: LD_INT 33
19424: DOUBLE
19425: EQUAL
19426: IFTRUE 19430
19428: GO 19441
19430: POP
// bc_type := b_oil_mine ; 34 :
19431: LD_ADDR_OWVAR 42
19435: PUSH
19436: LD_INT 29
19438: ST_TO_ADDR
19439: GO 19461
19441: LD_INT 34
19443: DOUBLE
19444: EQUAL
19445: IFTRUE 19449
19447: GO 19460
19449: POP
// bc_type := b_siberite_mine ; end ;
19450: LD_ADDR_OWVAR 42
19454: PUSH
19455: LD_INT 30
19457: ST_TO_ADDR
19458: GO 19461
19460: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
19461: LD_ADDR_VAR 0 8
19465: PUSH
19466: LD_VAR 0 5
19470: PPUSH
19471: LD_VAR 0 6
19475: PPUSH
19476: LD_VAR 0 3
19480: PPUSH
19481: CALL_OW 47
19485: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
19486: LD_OWVAR 42
19490: PUSH
19491: LD_INT 32
19493: PUSH
19494: LD_INT 33
19496: PUSH
19497: EMPTY
19498: LIST
19499: LIST
19500: IN
19501: IFFALSE 19517
// PlaceWeaponTurret ( b , weapon ) ;
19503: LD_VAR 0 8
19507: PPUSH
19508: LD_VAR 0 4
19512: PPUSH
19513: CALL_OW 431
// end ;
19517: LD_VAR 0 7
19521: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
19522: LD_INT 0
19524: PPUSH
19525: PPUSH
19526: PPUSH
19527: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19528: LD_ADDR_VAR 0 4
19532: PUSH
19533: LD_INT 22
19535: PUSH
19536: LD_OWVAR 2
19540: PUSH
19541: EMPTY
19542: LIST
19543: LIST
19544: PUSH
19545: LD_INT 2
19547: PUSH
19548: LD_INT 30
19550: PUSH
19551: LD_INT 0
19553: PUSH
19554: EMPTY
19555: LIST
19556: LIST
19557: PUSH
19558: LD_INT 30
19560: PUSH
19561: LD_INT 1
19563: PUSH
19564: EMPTY
19565: LIST
19566: LIST
19567: PUSH
19568: EMPTY
19569: LIST
19570: LIST
19571: LIST
19572: PUSH
19573: EMPTY
19574: LIST
19575: LIST
19576: PPUSH
19577: CALL_OW 69
19581: ST_TO_ADDR
// if not tmp then
19582: LD_VAR 0 4
19586: NOT
19587: IFFALSE 19591
// exit ;
19589: GO 19650
// for i in tmp do
19591: LD_ADDR_VAR 0 2
19595: PUSH
19596: LD_VAR 0 4
19600: PUSH
19601: FOR_IN
19602: IFFALSE 19648
// for j = 1 to 3 do
19604: LD_ADDR_VAR 0 3
19608: PUSH
19609: DOUBLE
19610: LD_INT 1
19612: DEC
19613: ST_TO_ADDR
19614: LD_INT 3
19616: PUSH
19617: FOR_TO
19618: IFFALSE 19644
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19620: LD_VAR 0 2
19624: PPUSH
19625: CALL_OW 274
19629: PPUSH
19630: LD_VAR 0 3
19634: PPUSH
19635: LD_INT 99999
19637: PPUSH
19638: CALL_OW 277
19642: GO 19617
19644: POP
19645: POP
19646: GO 19601
19648: POP
19649: POP
// end ;
19650: LD_VAR 0 1
19654: RET
// export function hHackSetLevel10 ; var i , j ; begin
19655: LD_INT 0
19657: PPUSH
19658: PPUSH
19659: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19660: LD_ADDR_VAR 0 2
19664: PUSH
19665: LD_INT 21
19667: PUSH
19668: LD_INT 1
19670: PUSH
19671: EMPTY
19672: LIST
19673: LIST
19674: PPUSH
19675: CALL_OW 69
19679: PUSH
19680: FOR_IN
19681: IFFALSE 19733
// if IsSelected ( i ) then
19683: LD_VAR 0 2
19687: PPUSH
19688: CALL_OW 306
19692: IFFALSE 19731
// begin for j := 1 to 4 do
19694: LD_ADDR_VAR 0 3
19698: PUSH
19699: DOUBLE
19700: LD_INT 1
19702: DEC
19703: ST_TO_ADDR
19704: LD_INT 4
19706: PUSH
19707: FOR_TO
19708: IFFALSE 19729
// SetSkill ( i , j , 10 ) ;
19710: LD_VAR 0 2
19714: PPUSH
19715: LD_VAR 0 3
19719: PPUSH
19720: LD_INT 10
19722: PPUSH
19723: CALL_OW 237
19727: GO 19707
19729: POP
19730: POP
// end ;
19731: GO 19680
19733: POP
19734: POP
// end ;
19735: LD_VAR 0 1
19739: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19740: LD_INT 0
19742: PPUSH
19743: PPUSH
19744: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19745: LD_ADDR_VAR 0 2
19749: PUSH
19750: LD_INT 22
19752: PUSH
19753: LD_OWVAR 2
19757: PUSH
19758: EMPTY
19759: LIST
19760: LIST
19761: PUSH
19762: LD_INT 21
19764: PUSH
19765: LD_INT 1
19767: PUSH
19768: EMPTY
19769: LIST
19770: LIST
19771: PUSH
19772: EMPTY
19773: LIST
19774: LIST
19775: PPUSH
19776: CALL_OW 69
19780: PUSH
19781: FOR_IN
19782: IFFALSE 19823
// begin for j := 1 to 4 do
19784: LD_ADDR_VAR 0 3
19788: PUSH
19789: DOUBLE
19790: LD_INT 1
19792: DEC
19793: ST_TO_ADDR
19794: LD_INT 4
19796: PUSH
19797: FOR_TO
19798: IFFALSE 19819
// SetSkill ( i , j , 10 ) ;
19800: LD_VAR 0 2
19804: PPUSH
19805: LD_VAR 0 3
19809: PPUSH
19810: LD_INT 10
19812: PPUSH
19813: CALL_OW 237
19817: GO 19797
19819: POP
19820: POP
// end ;
19821: GO 19781
19823: POP
19824: POP
// end ;
19825: LD_VAR 0 1
19829: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19830: LD_INT 0
19832: PPUSH
// uc_side := your_side ;
19833: LD_ADDR_OWVAR 20
19837: PUSH
19838: LD_OWVAR 2
19842: ST_TO_ADDR
// uc_nation := nation ;
19843: LD_ADDR_OWVAR 21
19847: PUSH
19848: LD_VAR 0 1
19852: ST_TO_ADDR
// InitHc ;
19853: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19857: LD_INT 0
19859: PPUSH
19860: LD_VAR 0 2
19864: PPUSH
19865: LD_VAR 0 3
19869: PPUSH
19870: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19874: LD_VAR 0 4
19878: PPUSH
19879: LD_VAR 0 5
19883: PPUSH
19884: CALL_OW 428
19888: PUSH
19889: LD_INT 0
19891: EQUAL
19892: IFFALSE 19916
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19894: CALL_OW 44
19898: PPUSH
19899: LD_VAR 0 4
19903: PPUSH
19904: LD_VAR 0 5
19908: PPUSH
19909: LD_INT 1
19911: PPUSH
19912: CALL_OW 48
// end ;
19916: LD_VAR 0 6
19920: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19921: LD_INT 0
19923: PPUSH
19924: PPUSH
// uc_side := your_side ;
19925: LD_ADDR_OWVAR 20
19929: PUSH
19930: LD_OWVAR 2
19934: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19935: LD_VAR 0 1
19939: PUSH
19940: LD_INT 1
19942: PUSH
19943: LD_INT 2
19945: PUSH
19946: LD_INT 3
19948: PUSH
19949: LD_INT 4
19951: PUSH
19952: LD_INT 5
19954: PUSH
19955: EMPTY
19956: LIST
19957: LIST
19958: LIST
19959: LIST
19960: LIST
19961: IN
19962: IFFALSE 19974
// uc_nation := nation_american else
19964: LD_ADDR_OWVAR 21
19968: PUSH
19969: LD_INT 1
19971: ST_TO_ADDR
19972: GO 20017
// if chassis in [ 11 , 12 , 13 , 14 ] then
19974: LD_VAR 0 1
19978: PUSH
19979: LD_INT 11
19981: PUSH
19982: LD_INT 12
19984: PUSH
19985: LD_INT 13
19987: PUSH
19988: LD_INT 14
19990: PUSH
19991: EMPTY
19992: LIST
19993: LIST
19994: LIST
19995: LIST
19996: IN
19997: IFFALSE 20009
// uc_nation := nation_arabian else
19999: LD_ADDR_OWVAR 21
20003: PUSH
20004: LD_INT 2
20006: ST_TO_ADDR
20007: GO 20017
// uc_nation := nation_russian ;
20009: LD_ADDR_OWVAR 21
20013: PUSH
20014: LD_INT 3
20016: ST_TO_ADDR
// vc_chassis := chassis ;
20017: LD_ADDR_OWVAR 37
20021: PUSH
20022: LD_VAR 0 1
20026: ST_TO_ADDR
// vc_engine := engine ;
20027: LD_ADDR_OWVAR 39
20031: PUSH
20032: LD_VAR 0 2
20036: ST_TO_ADDR
// vc_control := control ;
20037: LD_ADDR_OWVAR 38
20041: PUSH
20042: LD_VAR 0 3
20046: ST_TO_ADDR
// vc_weapon := weapon ;
20047: LD_ADDR_OWVAR 40
20051: PUSH
20052: LD_VAR 0 4
20056: ST_TO_ADDR
// un := CreateVehicle ;
20057: LD_ADDR_VAR 0 8
20061: PUSH
20062: CALL_OW 45
20066: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
20067: LD_VAR 0 8
20071: PPUSH
20072: LD_INT 0
20074: PPUSH
20075: LD_INT 5
20077: PPUSH
20078: CALL_OW 12
20082: PPUSH
20083: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
20087: LD_VAR 0 8
20091: PPUSH
20092: LD_VAR 0 5
20096: PPUSH
20097: LD_VAR 0 6
20101: PPUSH
20102: LD_INT 1
20104: PPUSH
20105: CALL_OW 48
// end ;
20109: LD_VAR 0 7
20113: RET
// export hInvincible ; every 1 do
20114: GO 20116
20116: DISABLE
// hInvincible := [ ] ;
20117: LD_ADDR_EXP 78
20121: PUSH
20122: EMPTY
20123: ST_TO_ADDR
20124: END
// every 10 do var i ;
20125: GO 20127
20127: DISABLE
20128: LD_INT 0
20130: PPUSH
// begin enable ;
20131: ENABLE
// if not hInvincible then
20132: LD_EXP 78
20136: NOT
20137: IFFALSE 20141
// exit ;
20139: GO 20185
// for i in hInvincible do
20141: LD_ADDR_VAR 0 1
20145: PUSH
20146: LD_EXP 78
20150: PUSH
20151: FOR_IN
20152: IFFALSE 20183
// if GetLives ( i ) < 1000 then
20154: LD_VAR 0 1
20158: PPUSH
20159: CALL_OW 256
20163: PUSH
20164: LD_INT 1000
20166: LESS
20167: IFFALSE 20181
// SetLives ( i , 1000 ) ;
20169: LD_VAR 0 1
20173: PPUSH
20174: LD_INT 1000
20176: PPUSH
20177: CALL_OW 234
20181: GO 20151
20183: POP
20184: POP
// end ;
20185: PPOPN 1
20187: END
// export function hHackInvincible ; var i ; begin
20188: LD_INT 0
20190: PPUSH
20191: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
20192: LD_ADDR_VAR 0 2
20196: PUSH
20197: LD_INT 2
20199: PUSH
20200: LD_INT 21
20202: PUSH
20203: LD_INT 1
20205: PUSH
20206: EMPTY
20207: LIST
20208: LIST
20209: PUSH
20210: LD_INT 21
20212: PUSH
20213: LD_INT 2
20215: PUSH
20216: EMPTY
20217: LIST
20218: LIST
20219: PUSH
20220: EMPTY
20221: LIST
20222: LIST
20223: LIST
20224: PPUSH
20225: CALL_OW 69
20229: PUSH
20230: FOR_IN
20231: IFFALSE 20292
// if IsSelected ( i ) then
20233: LD_VAR 0 2
20237: PPUSH
20238: CALL_OW 306
20242: IFFALSE 20290
// begin if i in hInvincible then
20244: LD_VAR 0 2
20248: PUSH
20249: LD_EXP 78
20253: IN
20254: IFFALSE 20274
// hInvincible := hInvincible diff i else
20256: LD_ADDR_EXP 78
20260: PUSH
20261: LD_EXP 78
20265: PUSH
20266: LD_VAR 0 2
20270: DIFF
20271: ST_TO_ADDR
20272: GO 20290
// hInvincible := hInvincible union i ;
20274: LD_ADDR_EXP 78
20278: PUSH
20279: LD_EXP 78
20283: PUSH
20284: LD_VAR 0 2
20288: UNION
20289: ST_TO_ADDR
// end ;
20290: GO 20230
20292: POP
20293: POP
// end ;
20294: LD_VAR 0 1
20298: RET
// export function hHackInvisible ; var i , j ; begin
20299: LD_INT 0
20301: PPUSH
20302: PPUSH
20303: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20304: LD_ADDR_VAR 0 2
20308: PUSH
20309: LD_INT 21
20311: PUSH
20312: LD_INT 1
20314: PUSH
20315: EMPTY
20316: LIST
20317: LIST
20318: PPUSH
20319: CALL_OW 69
20323: PUSH
20324: FOR_IN
20325: IFFALSE 20349
// if IsSelected ( i ) then
20327: LD_VAR 0 2
20331: PPUSH
20332: CALL_OW 306
20336: IFFALSE 20347
// ComForceInvisible ( i ) ;
20338: LD_VAR 0 2
20342: PPUSH
20343: CALL_OW 496
20347: GO 20324
20349: POP
20350: POP
// end ;
20351: LD_VAR 0 1
20355: RET
// export function hHackChangeYourSide ; begin
20356: LD_INT 0
20358: PPUSH
// if your_side = 8 then
20359: LD_OWVAR 2
20363: PUSH
20364: LD_INT 8
20366: EQUAL
20367: IFFALSE 20379
// your_side := 0 else
20369: LD_ADDR_OWVAR 2
20373: PUSH
20374: LD_INT 0
20376: ST_TO_ADDR
20377: GO 20393
// your_side := your_side + 1 ;
20379: LD_ADDR_OWVAR 2
20383: PUSH
20384: LD_OWVAR 2
20388: PUSH
20389: LD_INT 1
20391: PLUS
20392: ST_TO_ADDR
// end ;
20393: LD_VAR 0 1
20397: RET
// export function hHackChangeUnitSide ; var i , j ; begin
20398: LD_INT 0
20400: PPUSH
20401: PPUSH
20402: PPUSH
// for i in all_units do
20403: LD_ADDR_VAR 0 2
20407: PUSH
20408: LD_OWVAR 3
20412: PUSH
20413: FOR_IN
20414: IFFALSE 20492
// if IsSelected ( i ) then
20416: LD_VAR 0 2
20420: PPUSH
20421: CALL_OW 306
20425: IFFALSE 20490
// begin j := GetSide ( i ) ;
20427: LD_ADDR_VAR 0 3
20431: PUSH
20432: LD_VAR 0 2
20436: PPUSH
20437: CALL_OW 255
20441: ST_TO_ADDR
// if j = 8 then
20442: LD_VAR 0 3
20446: PUSH
20447: LD_INT 8
20449: EQUAL
20450: IFFALSE 20462
// j := 0 else
20452: LD_ADDR_VAR 0 3
20456: PUSH
20457: LD_INT 0
20459: ST_TO_ADDR
20460: GO 20476
// j := j + 1 ;
20462: LD_ADDR_VAR 0 3
20466: PUSH
20467: LD_VAR 0 3
20471: PUSH
20472: LD_INT 1
20474: PLUS
20475: ST_TO_ADDR
// SetSide ( i , j ) ;
20476: LD_VAR 0 2
20480: PPUSH
20481: LD_VAR 0 3
20485: PPUSH
20486: CALL_OW 235
// end ;
20490: GO 20413
20492: POP
20493: POP
// end ;
20494: LD_VAR 0 1
20498: RET
// export function hHackFog ; begin
20499: LD_INT 0
20501: PPUSH
// FogOff ( true ) ;
20502: LD_INT 1
20504: PPUSH
20505: CALL_OW 344
// end ;
20509: LD_VAR 0 1
20513: RET
// export function hHackTeleport ( unit , x , y ) ; begin
20514: LD_INT 0
20516: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
20517: LD_VAR 0 1
20521: PPUSH
20522: LD_VAR 0 2
20526: PPUSH
20527: LD_VAR 0 3
20531: PPUSH
20532: LD_INT 1
20534: PPUSH
20535: LD_INT 1
20537: PPUSH
20538: CALL_OW 483
// CenterOnXY ( x , y ) ;
20542: LD_VAR 0 2
20546: PPUSH
20547: LD_VAR 0 3
20551: PPUSH
20552: CALL_OW 84
// end ; end_of_file end_of_file
20556: LD_VAR 0 4
20560: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
20561: LD_INT 0
20563: PPUSH
// ar_miner := 81 ;
20564: LD_ADDR_EXP 86
20568: PUSH
20569: LD_INT 81
20571: ST_TO_ADDR
// ar_crane := 88 ;
20572: LD_ADDR_EXP 85
20576: PUSH
20577: LD_INT 88
20579: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
20580: LD_ADDR_EXP 80
20584: PUSH
20585: LD_INT 89
20587: ST_TO_ADDR
// us_hack := 99 ;
20588: LD_ADDR_EXP 81
20592: PUSH
20593: LD_INT 99
20595: ST_TO_ADDR
// us_artillery := 97 ;
20596: LD_ADDR_EXP 82
20600: PUSH
20601: LD_INT 97
20603: ST_TO_ADDR
// ar_bio_bomb := 91 ;
20604: LD_ADDR_EXP 83
20608: PUSH
20609: LD_INT 91
20611: ST_TO_ADDR
// ar_mortar := 92 ;
20612: LD_ADDR_EXP 84
20616: PUSH
20617: LD_INT 92
20619: ST_TO_ADDR
// ru_radar := 98 ;
20620: LD_ADDR_EXP 79
20624: PUSH
20625: LD_INT 98
20627: ST_TO_ADDR
// tech_Artillery := 80 ;
20628: LD_ADDR_EXP 87
20632: PUSH
20633: LD_INT 80
20635: ST_TO_ADDR
// tech_RadMat := 81 ;
20636: LD_ADDR_EXP 88
20640: PUSH
20641: LD_INT 81
20643: ST_TO_ADDR
// tech_BasicTools := 82 ;
20644: LD_ADDR_EXP 89
20648: PUSH
20649: LD_INT 82
20651: ST_TO_ADDR
// tech_Cargo := 83 ;
20652: LD_ADDR_EXP 90
20656: PUSH
20657: LD_INT 83
20659: ST_TO_ADDR
// tech_Track := 84 ;
20660: LD_ADDR_EXP 91
20664: PUSH
20665: LD_INT 84
20667: ST_TO_ADDR
// tech_Crane := 85 ;
20668: LD_ADDR_EXP 92
20672: PUSH
20673: LD_INT 85
20675: ST_TO_ADDR
// tech_Bulldozer := 86 ;
20676: LD_ADDR_EXP 93
20680: PUSH
20681: LD_INT 86
20683: ST_TO_ADDR
// tech_Hovercraft := 87 ;
20684: LD_ADDR_EXP 94
20688: PUSH
20689: LD_INT 87
20691: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
20692: LD_ADDR_EXP 95
20696: PUSH
20697: LD_INT 88
20699: ST_TO_ADDR
// class_mastodont := 31 ;
20700: LD_ADDR_EXP 96
20704: PUSH
20705: LD_INT 31
20707: ST_TO_ADDR
// class_horse := 21 ;
20708: LD_ADDR_EXP 97
20712: PUSH
20713: LD_INT 21
20715: ST_TO_ADDR
// end ;
20716: LD_VAR 0 1
20720: RET
// every 1 do
20721: GO 20723
20723: DISABLE
// InitGlobalVariables ; end_of_file
20724: CALL 20561 0 0
20728: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
20729: LD_INT 0
20731: PPUSH
20732: PPUSH
// if exist_mode then
20733: LD_VAR 0 2
20737: IFFALSE 20762
// unit := CreateCharacter ( prefix & ident ) else
20739: LD_ADDR_VAR 0 5
20743: PUSH
20744: LD_VAR 0 3
20748: PUSH
20749: LD_VAR 0 1
20753: STR
20754: PPUSH
20755: CALL_OW 34
20759: ST_TO_ADDR
20760: GO 20777
// unit := NewCharacter ( ident ) ;
20762: LD_ADDR_VAR 0 5
20766: PUSH
20767: LD_VAR 0 1
20771: PPUSH
20772: CALL_OW 25
20776: ST_TO_ADDR
// result := unit ;
20777: LD_ADDR_VAR 0 4
20781: PUSH
20782: LD_VAR 0 5
20786: ST_TO_ADDR
// end ;
20787: LD_VAR 0 4
20791: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
20792: LD_INT 0
20794: PPUSH
20795: PPUSH
// if not side or not nation then
20796: LD_VAR 0 1
20800: NOT
20801: PUSH
20802: LD_VAR 0 2
20806: NOT
20807: OR
20808: IFFALSE 20812
// exit ;
20810: GO 21580
// case nation of nation_american :
20812: LD_VAR 0 2
20816: PUSH
20817: LD_INT 1
20819: DOUBLE
20820: EQUAL
20821: IFTRUE 20825
20823: GO 21039
20825: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
20826: LD_ADDR_VAR 0 4
20830: PUSH
20831: LD_INT 35
20833: PUSH
20834: LD_INT 45
20836: PUSH
20837: LD_INT 46
20839: PUSH
20840: LD_INT 47
20842: PUSH
20843: LD_INT 82
20845: PUSH
20846: LD_INT 83
20848: PUSH
20849: LD_INT 84
20851: PUSH
20852: LD_INT 85
20854: PUSH
20855: LD_INT 86
20857: PUSH
20858: LD_INT 1
20860: PUSH
20861: LD_INT 2
20863: PUSH
20864: LD_INT 6
20866: PUSH
20867: LD_INT 15
20869: PUSH
20870: LD_INT 16
20872: PUSH
20873: LD_INT 7
20875: PUSH
20876: LD_INT 12
20878: PUSH
20879: LD_INT 13
20881: PUSH
20882: LD_INT 10
20884: PUSH
20885: LD_INT 14
20887: PUSH
20888: LD_INT 20
20890: PUSH
20891: LD_INT 21
20893: PUSH
20894: LD_INT 22
20896: PUSH
20897: LD_INT 25
20899: PUSH
20900: LD_INT 32
20902: PUSH
20903: LD_INT 27
20905: PUSH
20906: LD_INT 36
20908: PUSH
20909: LD_INT 69
20911: PUSH
20912: LD_INT 39
20914: PUSH
20915: LD_INT 34
20917: PUSH
20918: LD_INT 40
20920: PUSH
20921: LD_INT 48
20923: PUSH
20924: LD_INT 49
20926: PUSH
20927: LD_INT 50
20929: PUSH
20930: LD_INT 51
20932: PUSH
20933: LD_INT 52
20935: PUSH
20936: LD_INT 53
20938: PUSH
20939: LD_INT 54
20941: PUSH
20942: LD_INT 55
20944: PUSH
20945: LD_INT 56
20947: PUSH
20948: LD_INT 57
20950: PUSH
20951: LD_INT 58
20953: PUSH
20954: LD_INT 59
20956: PUSH
20957: LD_INT 60
20959: PUSH
20960: LD_INT 61
20962: PUSH
20963: LD_INT 62
20965: PUSH
20966: LD_INT 80
20968: PUSH
20969: LD_INT 82
20971: PUSH
20972: LD_INT 83
20974: PUSH
20975: LD_INT 84
20977: PUSH
20978: LD_INT 85
20980: PUSH
20981: LD_INT 86
20983: PUSH
20984: EMPTY
20985: LIST
20986: LIST
20987: LIST
20988: LIST
20989: LIST
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: LIST
21008: LIST
21009: LIST
21010: LIST
21011: LIST
21012: LIST
21013: LIST
21014: LIST
21015: LIST
21016: LIST
21017: LIST
21018: LIST
21019: LIST
21020: LIST
21021: LIST
21022: LIST
21023: LIST
21024: LIST
21025: LIST
21026: LIST
21027: LIST
21028: LIST
21029: LIST
21030: LIST
21031: LIST
21032: LIST
21033: LIST
21034: LIST
21035: LIST
21036: ST_TO_ADDR
21037: GO 21504
21039: LD_INT 2
21041: DOUBLE
21042: EQUAL
21043: IFTRUE 21047
21045: GO 21273
21047: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
21048: LD_ADDR_VAR 0 4
21052: PUSH
21053: LD_INT 35
21055: PUSH
21056: LD_INT 45
21058: PUSH
21059: LD_INT 46
21061: PUSH
21062: LD_INT 47
21064: PUSH
21065: LD_INT 82
21067: PUSH
21068: LD_INT 83
21070: PUSH
21071: LD_INT 84
21073: PUSH
21074: LD_INT 85
21076: PUSH
21077: LD_INT 87
21079: PUSH
21080: LD_INT 70
21082: PUSH
21083: LD_INT 1
21085: PUSH
21086: LD_INT 11
21088: PUSH
21089: LD_INT 3
21091: PUSH
21092: LD_INT 4
21094: PUSH
21095: LD_INT 5
21097: PUSH
21098: LD_INT 6
21100: PUSH
21101: LD_INT 15
21103: PUSH
21104: LD_INT 18
21106: PUSH
21107: LD_INT 7
21109: PUSH
21110: LD_INT 17
21112: PUSH
21113: LD_INT 8
21115: PUSH
21116: LD_INT 20
21118: PUSH
21119: LD_INT 21
21121: PUSH
21122: LD_INT 22
21124: PUSH
21125: LD_INT 72
21127: PUSH
21128: LD_INT 26
21130: PUSH
21131: LD_INT 69
21133: PUSH
21134: LD_INT 39
21136: PUSH
21137: LD_INT 40
21139: PUSH
21140: LD_INT 41
21142: PUSH
21143: LD_INT 42
21145: PUSH
21146: LD_INT 43
21148: PUSH
21149: LD_INT 48
21151: PUSH
21152: LD_INT 49
21154: PUSH
21155: LD_INT 50
21157: PUSH
21158: LD_INT 51
21160: PUSH
21161: LD_INT 52
21163: PUSH
21164: LD_INT 53
21166: PUSH
21167: LD_INT 54
21169: PUSH
21170: LD_INT 55
21172: PUSH
21173: LD_INT 56
21175: PUSH
21176: LD_INT 60
21178: PUSH
21179: LD_INT 61
21181: PUSH
21182: LD_INT 62
21184: PUSH
21185: LD_INT 66
21187: PUSH
21188: LD_INT 67
21190: PUSH
21191: LD_INT 68
21193: PUSH
21194: LD_INT 81
21196: PUSH
21197: LD_INT 82
21199: PUSH
21200: LD_INT 83
21202: PUSH
21203: LD_INT 84
21205: PUSH
21206: LD_INT 85
21208: PUSH
21209: LD_INT 87
21211: PUSH
21212: LD_INT 88
21214: PUSH
21215: EMPTY
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: LIST
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: LIST
21238: LIST
21239: LIST
21240: LIST
21241: LIST
21242: LIST
21243: LIST
21244: LIST
21245: LIST
21246: LIST
21247: LIST
21248: LIST
21249: LIST
21250: LIST
21251: LIST
21252: LIST
21253: LIST
21254: LIST
21255: LIST
21256: LIST
21257: LIST
21258: LIST
21259: LIST
21260: LIST
21261: LIST
21262: LIST
21263: LIST
21264: LIST
21265: LIST
21266: LIST
21267: LIST
21268: LIST
21269: LIST
21270: ST_TO_ADDR
21271: GO 21504
21273: LD_INT 3
21275: DOUBLE
21276: EQUAL
21277: IFTRUE 21281
21279: GO 21503
21281: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
21282: LD_ADDR_VAR 0 4
21286: PUSH
21287: LD_INT 46
21289: PUSH
21290: LD_INT 47
21292: PUSH
21293: LD_INT 1
21295: PUSH
21296: LD_INT 2
21298: PUSH
21299: LD_INT 82
21301: PUSH
21302: LD_INT 83
21304: PUSH
21305: LD_INT 84
21307: PUSH
21308: LD_INT 85
21310: PUSH
21311: LD_INT 86
21313: PUSH
21314: LD_INT 11
21316: PUSH
21317: LD_INT 9
21319: PUSH
21320: LD_INT 20
21322: PUSH
21323: LD_INT 19
21325: PUSH
21326: LD_INT 21
21328: PUSH
21329: LD_INT 24
21331: PUSH
21332: LD_INT 22
21334: PUSH
21335: LD_INT 25
21337: PUSH
21338: LD_INT 28
21340: PUSH
21341: LD_INT 29
21343: PUSH
21344: LD_INT 30
21346: PUSH
21347: LD_INT 31
21349: PUSH
21350: LD_INT 37
21352: PUSH
21353: LD_INT 38
21355: PUSH
21356: LD_INT 32
21358: PUSH
21359: LD_INT 27
21361: PUSH
21362: LD_INT 33
21364: PUSH
21365: LD_INT 69
21367: PUSH
21368: LD_INT 39
21370: PUSH
21371: LD_INT 34
21373: PUSH
21374: LD_INT 40
21376: PUSH
21377: LD_INT 71
21379: PUSH
21380: LD_INT 23
21382: PUSH
21383: LD_INT 44
21385: PUSH
21386: LD_INT 48
21388: PUSH
21389: LD_INT 49
21391: PUSH
21392: LD_INT 50
21394: PUSH
21395: LD_INT 51
21397: PUSH
21398: LD_INT 52
21400: PUSH
21401: LD_INT 53
21403: PUSH
21404: LD_INT 54
21406: PUSH
21407: LD_INT 55
21409: PUSH
21410: LD_INT 56
21412: PUSH
21413: LD_INT 57
21415: PUSH
21416: LD_INT 58
21418: PUSH
21419: LD_INT 59
21421: PUSH
21422: LD_INT 63
21424: PUSH
21425: LD_INT 64
21427: PUSH
21428: LD_INT 65
21430: PUSH
21431: LD_INT 82
21433: PUSH
21434: LD_INT 83
21436: PUSH
21437: LD_INT 84
21439: PUSH
21440: LD_INT 85
21442: PUSH
21443: LD_INT 86
21445: PUSH
21446: EMPTY
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: LIST
21468: LIST
21469: LIST
21470: LIST
21471: LIST
21472: LIST
21473: LIST
21474: LIST
21475: LIST
21476: LIST
21477: LIST
21478: LIST
21479: LIST
21480: LIST
21481: LIST
21482: LIST
21483: LIST
21484: LIST
21485: LIST
21486: LIST
21487: LIST
21488: LIST
21489: LIST
21490: LIST
21491: LIST
21492: LIST
21493: LIST
21494: LIST
21495: LIST
21496: LIST
21497: LIST
21498: LIST
21499: LIST
21500: ST_TO_ADDR
21501: GO 21504
21503: POP
// if state > - 1 and state < 3 then
21504: LD_VAR 0 3
21508: PUSH
21509: LD_INT 1
21511: NEG
21512: GREATER
21513: PUSH
21514: LD_VAR 0 3
21518: PUSH
21519: LD_INT 3
21521: LESS
21522: AND
21523: IFFALSE 21580
// for i in result do
21525: LD_ADDR_VAR 0 5
21529: PUSH
21530: LD_VAR 0 4
21534: PUSH
21535: FOR_IN
21536: IFFALSE 21578
// if GetTech ( i , side ) <> state then
21538: LD_VAR 0 5
21542: PPUSH
21543: LD_VAR 0 1
21547: PPUSH
21548: CALL_OW 321
21552: PUSH
21553: LD_VAR 0 3
21557: NONEQUAL
21558: IFFALSE 21576
// result := result diff i ;
21560: LD_ADDR_VAR 0 4
21564: PUSH
21565: LD_VAR 0 4
21569: PUSH
21570: LD_VAR 0 5
21574: DIFF
21575: ST_TO_ADDR
21576: GO 21535
21578: POP
21579: POP
// end ;
21580: LD_VAR 0 4
21584: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
21585: LD_INT 0
21587: PPUSH
21588: PPUSH
21589: PPUSH
// result := true ;
21590: LD_ADDR_VAR 0 3
21594: PUSH
21595: LD_INT 1
21597: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
21598: LD_ADDR_VAR 0 5
21602: PUSH
21603: LD_VAR 0 2
21607: PPUSH
21608: CALL_OW 480
21612: ST_TO_ADDR
// if not tmp then
21613: LD_VAR 0 5
21617: NOT
21618: IFFALSE 21622
// exit ;
21620: GO 21671
// for i in tmp do
21622: LD_ADDR_VAR 0 4
21626: PUSH
21627: LD_VAR 0 5
21631: PUSH
21632: FOR_IN
21633: IFFALSE 21669
// if GetTech ( i , side ) <> state_researched then
21635: LD_VAR 0 4
21639: PPUSH
21640: LD_VAR 0 1
21644: PPUSH
21645: CALL_OW 321
21649: PUSH
21650: LD_INT 2
21652: NONEQUAL
21653: IFFALSE 21667
// begin result := false ;
21655: LD_ADDR_VAR 0 3
21659: PUSH
21660: LD_INT 0
21662: ST_TO_ADDR
// exit ;
21663: POP
21664: POP
21665: GO 21671
// end ;
21667: GO 21632
21669: POP
21670: POP
// end ;
21671: LD_VAR 0 3
21675: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
21676: LD_INT 0
21678: PPUSH
21679: PPUSH
21680: PPUSH
21681: PPUSH
21682: PPUSH
21683: PPUSH
21684: PPUSH
21685: PPUSH
21686: PPUSH
21687: PPUSH
21688: PPUSH
21689: PPUSH
21690: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
21691: LD_VAR 0 1
21695: NOT
21696: PUSH
21697: LD_VAR 0 1
21701: PPUSH
21702: CALL_OW 257
21706: PUSH
21707: LD_INT 9
21709: NONEQUAL
21710: OR
21711: IFFALSE 21715
// exit ;
21713: GO 22288
// side := GetSide ( unit ) ;
21715: LD_ADDR_VAR 0 9
21719: PUSH
21720: LD_VAR 0 1
21724: PPUSH
21725: CALL_OW 255
21729: ST_TO_ADDR
// tech_space := tech_spacanom ;
21730: LD_ADDR_VAR 0 12
21734: PUSH
21735: LD_INT 29
21737: ST_TO_ADDR
// tech_time := tech_taurad ;
21738: LD_ADDR_VAR 0 13
21742: PUSH
21743: LD_INT 28
21745: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
21746: LD_ADDR_VAR 0 11
21750: PUSH
21751: LD_VAR 0 1
21755: PPUSH
21756: CALL_OW 310
21760: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
21761: LD_VAR 0 11
21765: PPUSH
21766: CALL_OW 247
21770: PUSH
21771: LD_INT 2
21773: EQUAL
21774: IFFALSE 21778
// exit ;
21776: GO 22288
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21778: LD_ADDR_VAR 0 8
21782: PUSH
21783: LD_INT 81
21785: PUSH
21786: LD_VAR 0 9
21790: PUSH
21791: EMPTY
21792: LIST
21793: LIST
21794: PUSH
21795: LD_INT 3
21797: PUSH
21798: LD_INT 21
21800: PUSH
21801: LD_INT 3
21803: PUSH
21804: EMPTY
21805: LIST
21806: LIST
21807: PUSH
21808: EMPTY
21809: LIST
21810: LIST
21811: PUSH
21812: EMPTY
21813: LIST
21814: LIST
21815: PPUSH
21816: CALL_OW 69
21820: ST_TO_ADDR
// if not tmp then
21821: LD_VAR 0 8
21825: NOT
21826: IFFALSE 21830
// exit ;
21828: GO 22288
// if in_unit then
21830: LD_VAR 0 11
21834: IFFALSE 21858
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
21836: LD_ADDR_VAR 0 10
21840: PUSH
21841: LD_VAR 0 8
21845: PPUSH
21846: LD_VAR 0 11
21850: PPUSH
21851: CALL_OW 74
21855: ST_TO_ADDR
21856: GO 21878
// enemy := NearestUnitToUnit ( tmp , unit ) ;
21858: LD_ADDR_VAR 0 10
21862: PUSH
21863: LD_VAR 0 8
21867: PPUSH
21868: LD_VAR 0 1
21872: PPUSH
21873: CALL_OW 74
21877: ST_TO_ADDR
// if not enemy then
21878: LD_VAR 0 10
21882: NOT
21883: IFFALSE 21887
// exit ;
21885: GO 22288
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
21887: LD_VAR 0 11
21891: PUSH
21892: LD_VAR 0 11
21896: PPUSH
21897: LD_VAR 0 10
21901: PPUSH
21902: CALL_OW 296
21906: PUSH
21907: LD_INT 13
21909: GREATER
21910: AND
21911: PUSH
21912: LD_VAR 0 1
21916: PPUSH
21917: LD_VAR 0 10
21921: PPUSH
21922: CALL_OW 296
21926: PUSH
21927: LD_INT 12
21929: GREATER
21930: OR
21931: IFFALSE 21935
// exit ;
21933: GO 22288
// missile := [ 1 ] ;
21935: LD_ADDR_VAR 0 14
21939: PUSH
21940: LD_INT 1
21942: PUSH
21943: EMPTY
21944: LIST
21945: ST_TO_ADDR
// if Researched ( side , tech_space ) then
21946: LD_VAR 0 9
21950: PPUSH
21951: LD_VAR 0 12
21955: PPUSH
21956: CALL_OW 325
21960: IFFALSE 21989
// missile := Insert ( missile , missile + 1 , 2 ) ;
21962: LD_ADDR_VAR 0 14
21966: PUSH
21967: LD_VAR 0 14
21971: PPUSH
21972: LD_VAR 0 14
21976: PUSH
21977: LD_INT 1
21979: PLUS
21980: PPUSH
21981: LD_INT 2
21983: PPUSH
21984: CALL_OW 2
21988: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
21989: LD_VAR 0 9
21993: PPUSH
21994: LD_VAR 0 13
21998: PPUSH
21999: CALL_OW 325
22003: PUSH
22004: LD_VAR 0 10
22008: PPUSH
22009: CALL_OW 255
22013: PPUSH
22014: LD_VAR 0 13
22018: PPUSH
22019: CALL_OW 325
22023: NOT
22024: AND
22025: IFFALSE 22054
// missile := Insert ( missile , missile + 1 , 3 ) ;
22027: LD_ADDR_VAR 0 14
22031: PUSH
22032: LD_VAR 0 14
22036: PPUSH
22037: LD_VAR 0 14
22041: PUSH
22042: LD_INT 1
22044: PLUS
22045: PPUSH
22046: LD_INT 3
22048: PPUSH
22049: CALL_OW 2
22053: ST_TO_ADDR
// if missile < 2 then
22054: LD_VAR 0 14
22058: PUSH
22059: LD_INT 2
22061: LESS
22062: IFFALSE 22066
// exit ;
22064: GO 22288
// x := GetX ( enemy ) ;
22066: LD_ADDR_VAR 0 4
22070: PUSH
22071: LD_VAR 0 10
22075: PPUSH
22076: CALL_OW 250
22080: ST_TO_ADDR
// y := GetY ( enemy ) ;
22081: LD_ADDR_VAR 0 5
22085: PUSH
22086: LD_VAR 0 10
22090: PPUSH
22091: CALL_OW 251
22095: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22096: LD_ADDR_VAR 0 6
22100: PUSH
22101: LD_VAR 0 4
22105: PUSH
22106: LD_INT 1
22108: NEG
22109: PPUSH
22110: LD_INT 1
22112: PPUSH
22113: CALL_OW 12
22117: PLUS
22118: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22119: LD_ADDR_VAR 0 7
22123: PUSH
22124: LD_VAR 0 5
22128: PUSH
22129: LD_INT 1
22131: NEG
22132: PPUSH
22133: LD_INT 1
22135: PPUSH
22136: CALL_OW 12
22140: PLUS
22141: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22142: LD_VAR 0 6
22146: PPUSH
22147: LD_VAR 0 7
22151: PPUSH
22152: CALL_OW 488
22156: NOT
22157: IFFALSE 22179
// begin _x := x ;
22159: LD_ADDR_VAR 0 6
22163: PUSH
22164: LD_VAR 0 4
22168: ST_TO_ADDR
// _y := y ;
22169: LD_ADDR_VAR 0 7
22173: PUSH
22174: LD_VAR 0 5
22178: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
22179: LD_ADDR_VAR 0 3
22183: PUSH
22184: LD_INT 1
22186: PPUSH
22187: LD_VAR 0 14
22191: PPUSH
22192: CALL_OW 12
22196: ST_TO_ADDR
// case i of 1 :
22197: LD_VAR 0 3
22201: PUSH
22202: LD_INT 1
22204: DOUBLE
22205: EQUAL
22206: IFTRUE 22210
22208: GO 22227
22210: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
22211: LD_VAR 0 1
22215: PPUSH
22216: LD_VAR 0 10
22220: PPUSH
22221: CALL_OW 115
22225: GO 22288
22227: LD_INT 2
22229: DOUBLE
22230: EQUAL
22231: IFTRUE 22235
22233: GO 22257
22235: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
22236: LD_VAR 0 1
22240: PPUSH
22241: LD_VAR 0 6
22245: PPUSH
22246: LD_VAR 0 7
22250: PPUSH
22251: CALL_OW 153
22255: GO 22288
22257: LD_INT 3
22259: DOUBLE
22260: EQUAL
22261: IFTRUE 22265
22263: GO 22287
22265: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
22266: LD_VAR 0 1
22270: PPUSH
22271: LD_VAR 0 6
22275: PPUSH
22276: LD_VAR 0 7
22280: PPUSH
22281: CALL_OW 154
22285: GO 22288
22287: POP
// end ;
22288: LD_VAR 0 2
22292: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
22293: LD_INT 0
22295: PPUSH
22296: PPUSH
22297: PPUSH
22298: PPUSH
22299: PPUSH
22300: PPUSH
// if not unit or not building then
22301: LD_VAR 0 1
22305: NOT
22306: PUSH
22307: LD_VAR 0 2
22311: NOT
22312: OR
22313: IFFALSE 22317
// exit ;
22315: GO 22475
// x := GetX ( building ) ;
22317: LD_ADDR_VAR 0 5
22321: PUSH
22322: LD_VAR 0 2
22326: PPUSH
22327: CALL_OW 250
22331: ST_TO_ADDR
// y := GetY ( building ) ;
22332: LD_ADDR_VAR 0 6
22336: PUSH
22337: LD_VAR 0 2
22341: PPUSH
22342: CALL_OW 251
22346: ST_TO_ADDR
// for i = 0 to 5 do
22347: LD_ADDR_VAR 0 4
22351: PUSH
22352: DOUBLE
22353: LD_INT 0
22355: DEC
22356: ST_TO_ADDR
22357: LD_INT 5
22359: PUSH
22360: FOR_TO
22361: IFFALSE 22473
// begin _x := ShiftX ( x , i , 3 ) ;
22363: LD_ADDR_VAR 0 7
22367: PUSH
22368: LD_VAR 0 5
22372: PPUSH
22373: LD_VAR 0 4
22377: PPUSH
22378: LD_INT 3
22380: PPUSH
22381: CALL_OW 272
22385: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
22386: LD_ADDR_VAR 0 8
22390: PUSH
22391: LD_VAR 0 6
22395: PPUSH
22396: LD_VAR 0 4
22400: PPUSH
22401: LD_INT 3
22403: PPUSH
22404: CALL_OW 273
22408: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22409: LD_VAR 0 7
22413: PPUSH
22414: LD_VAR 0 8
22418: PPUSH
22419: CALL_OW 488
22423: NOT
22424: IFFALSE 22428
// continue ;
22426: GO 22360
// if HexInfo ( _x , _y ) = 0 then
22428: LD_VAR 0 7
22432: PPUSH
22433: LD_VAR 0 8
22437: PPUSH
22438: CALL_OW 428
22442: PUSH
22443: LD_INT 0
22445: EQUAL
22446: IFFALSE 22471
// begin ComMoveXY ( unit , _x , _y ) ;
22448: LD_VAR 0 1
22452: PPUSH
22453: LD_VAR 0 7
22457: PPUSH
22458: LD_VAR 0 8
22462: PPUSH
22463: CALL_OW 111
// exit ;
22467: POP
22468: POP
22469: GO 22475
// end ; end ;
22471: GO 22360
22473: POP
22474: POP
// end ;
22475: LD_VAR 0 3
22479: RET
// export function ScanBase ( side , base_area ) ; begin
22480: LD_INT 0
22482: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
22483: LD_ADDR_VAR 0 3
22487: PUSH
22488: LD_VAR 0 2
22492: PPUSH
22493: LD_INT 81
22495: PUSH
22496: LD_VAR 0 1
22500: PUSH
22501: EMPTY
22502: LIST
22503: LIST
22504: PPUSH
22505: CALL_OW 70
22509: ST_TO_ADDR
// end ;
22510: LD_VAR 0 3
22514: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
22515: LD_INT 0
22517: PPUSH
22518: PPUSH
22519: PPUSH
22520: PPUSH
// result := false ;
22521: LD_ADDR_VAR 0 2
22525: PUSH
22526: LD_INT 0
22528: ST_TO_ADDR
// side := GetSide ( unit ) ;
22529: LD_ADDR_VAR 0 3
22533: PUSH
22534: LD_VAR 0 1
22538: PPUSH
22539: CALL_OW 255
22543: ST_TO_ADDR
// nat := GetNation ( unit ) ;
22544: LD_ADDR_VAR 0 4
22548: PUSH
22549: LD_VAR 0 1
22553: PPUSH
22554: CALL_OW 248
22558: ST_TO_ADDR
// case nat of 1 :
22559: LD_VAR 0 4
22563: PUSH
22564: LD_INT 1
22566: DOUBLE
22567: EQUAL
22568: IFTRUE 22572
22570: GO 22583
22572: POP
// tech := tech_lassight ; 2 :
22573: LD_ADDR_VAR 0 5
22577: PUSH
22578: LD_INT 12
22580: ST_TO_ADDR
22581: GO 22622
22583: LD_INT 2
22585: DOUBLE
22586: EQUAL
22587: IFTRUE 22591
22589: GO 22602
22591: POP
// tech := tech_mortar ; 3 :
22592: LD_ADDR_VAR 0 5
22596: PUSH
22597: LD_INT 41
22599: ST_TO_ADDR
22600: GO 22622
22602: LD_INT 3
22604: DOUBLE
22605: EQUAL
22606: IFTRUE 22610
22608: GO 22621
22610: POP
// tech := tech_bazooka ; end ;
22611: LD_ADDR_VAR 0 5
22615: PUSH
22616: LD_INT 44
22618: ST_TO_ADDR
22619: GO 22622
22621: POP
// if Researched ( side , tech ) then
22622: LD_VAR 0 3
22626: PPUSH
22627: LD_VAR 0 5
22631: PPUSH
22632: CALL_OW 325
22636: IFFALSE 22663
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
22638: LD_ADDR_VAR 0 2
22642: PUSH
22643: LD_INT 5
22645: PUSH
22646: LD_INT 8
22648: PUSH
22649: LD_INT 9
22651: PUSH
22652: EMPTY
22653: LIST
22654: LIST
22655: LIST
22656: PUSH
22657: LD_VAR 0 4
22661: ARRAY
22662: ST_TO_ADDR
// end ;
22663: LD_VAR 0 2
22667: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
22668: LD_INT 0
22670: PPUSH
22671: PPUSH
22672: PPUSH
// if not mines then
22673: LD_VAR 0 2
22677: NOT
22678: IFFALSE 22682
// exit ;
22680: GO 22826
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22682: LD_ADDR_VAR 0 5
22686: PUSH
22687: LD_INT 81
22689: PUSH
22690: LD_VAR 0 1
22694: PUSH
22695: EMPTY
22696: LIST
22697: LIST
22698: PUSH
22699: LD_INT 3
22701: PUSH
22702: LD_INT 21
22704: PUSH
22705: LD_INT 3
22707: PUSH
22708: EMPTY
22709: LIST
22710: LIST
22711: PUSH
22712: EMPTY
22713: LIST
22714: LIST
22715: PUSH
22716: EMPTY
22717: LIST
22718: LIST
22719: PPUSH
22720: CALL_OW 69
22724: ST_TO_ADDR
// for i in mines do
22725: LD_ADDR_VAR 0 4
22729: PUSH
22730: LD_VAR 0 2
22734: PUSH
22735: FOR_IN
22736: IFFALSE 22824
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
22738: LD_VAR 0 4
22742: PUSH
22743: LD_INT 1
22745: ARRAY
22746: PPUSH
22747: LD_VAR 0 4
22751: PUSH
22752: LD_INT 2
22754: ARRAY
22755: PPUSH
22756: CALL_OW 458
22760: NOT
22761: IFFALSE 22765
// continue ;
22763: GO 22735
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
22765: LD_VAR 0 4
22769: PUSH
22770: LD_INT 1
22772: ARRAY
22773: PPUSH
22774: LD_VAR 0 4
22778: PUSH
22779: LD_INT 2
22781: ARRAY
22782: PPUSH
22783: CALL_OW 428
22787: PUSH
22788: LD_VAR 0 5
22792: IN
22793: IFFALSE 22822
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
22795: LD_VAR 0 4
22799: PUSH
22800: LD_INT 1
22802: ARRAY
22803: PPUSH
22804: LD_VAR 0 4
22808: PUSH
22809: LD_INT 2
22811: ARRAY
22812: PPUSH
22813: LD_VAR 0 1
22817: PPUSH
22818: CALL_OW 456
// end ;
22822: GO 22735
22824: POP
22825: POP
// end ;
22826: LD_VAR 0 3
22830: RET
// export function Count ( array ) ; var i ; begin
22831: LD_INT 0
22833: PPUSH
22834: PPUSH
// result := 0 ;
22835: LD_ADDR_VAR 0 2
22839: PUSH
22840: LD_INT 0
22842: ST_TO_ADDR
// for i in array do
22843: LD_ADDR_VAR 0 3
22847: PUSH
22848: LD_VAR 0 1
22852: PUSH
22853: FOR_IN
22854: IFFALSE 22878
// if i then
22856: LD_VAR 0 3
22860: IFFALSE 22876
// result := result + 1 ;
22862: LD_ADDR_VAR 0 2
22866: PUSH
22867: LD_VAR 0 2
22871: PUSH
22872: LD_INT 1
22874: PLUS
22875: ST_TO_ADDR
22876: GO 22853
22878: POP
22879: POP
// end ;
22880: LD_VAR 0 2
22884: RET
// export function IsEmpty ( building ) ; begin
22885: LD_INT 0
22887: PPUSH
// if not building then
22888: LD_VAR 0 1
22892: NOT
22893: IFFALSE 22897
// exit ;
22895: GO 22940
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
22897: LD_ADDR_VAR 0 2
22901: PUSH
22902: LD_VAR 0 1
22906: PUSH
22907: LD_INT 22
22909: PUSH
22910: LD_VAR 0 1
22914: PPUSH
22915: CALL_OW 255
22919: PUSH
22920: EMPTY
22921: LIST
22922: LIST
22923: PUSH
22924: LD_INT 58
22926: PUSH
22927: EMPTY
22928: LIST
22929: PUSH
22930: EMPTY
22931: LIST
22932: LIST
22933: PPUSH
22934: CALL_OW 69
22938: IN
22939: ST_TO_ADDR
// end ;
22940: LD_VAR 0 2
22944: RET
// export function IsNotFull ( building ) ; begin
22945: LD_INT 0
22947: PPUSH
// if not building then
22948: LD_VAR 0 1
22952: NOT
22953: IFFALSE 22957
// exit ;
22955: GO 22976
// result := UnitsInside ( building ) < 6 ;
22957: LD_ADDR_VAR 0 2
22961: PUSH
22962: LD_VAR 0 1
22966: PPUSH
22967: CALL_OW 313
22971: PUSH
22972: LD_INT 6
22974: LESS
22975: ST_TO_ADDR
// end ;
22976: LD_VAR 0 2
22980: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
22981: LD_INT 0
22983: PPUSH
22984: PPUSH
22985: PPUSH
22986: PPUSH
// tmp := [ ] ;
22987: LD_ADDR_VAR 0 3
22991: PUSH
22992: EMPTY
22993: ST_TO_ADDR
// list := [ ] ;
22994: LD_ADDR_VAR 0 5
22998: PUSH
22999: EMPTY
23000: ST_TO_ADDR
// for i = 16 to 25 do
23001: LD_ADDR_VAR 0 4
23005: PUSH
23006: DOUBLE
23007: LD_INT 16
23009: DEC
23010: ST_TO_ADDR
23011: LD_INT 25
23013: PUSH
23014: FOR_TO
23015: IFFALSE 23088
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23017: LD_ADDR_VAR 0 3
23021: PUSH
23022: LD_VAR 0 3
23026: PUSH
23027: LD_INT 22
23029: PUSH
23030: LD_VAR 0 1
23034: PPUSH
23035: CALL_OW 255
23039: PUSH
23040: EMPTY
23041: LIST
23042: LIST
23043: PUSH
23044: LD_INT 91
23046: PUSH
23047: LD_VAR 0 1
23051: PUSH
23052: LD_INT 6
23054: PUSH
23055: EMPTY
23056: LIST
23057: LIST
23058: LIST
23059: PUSH
23060: LD_INT 30
23062: PUSH
23063: LD_VAR 0 4
23067: PUSH
23068: EMPTY
23069: LIST
23070: LIST
23071: PUSH
23072: EMPTY
23073: LIST
23074: LIST
23075: LIST
23076: PUSH
23077: EMPTY
23078: LIST
23079: PPUSH
23080: CALL_OW 69
23084: ADD
23085: ST_TO_ADDR
23086: GO 23014
23088: POP
23089: POP
// for i = 1 to tmp do
23090: LD_ADDR_VAR 0 4
23094: PUSH
23095: DOUBLE
23096: LD_INT 1
23098: DEC
23099: ST_TO_ADDR
23100: LD_VAR 0 3
23104: PUSH
23105: FOR_TO
23106: IFFALSE 23194
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23108: LD_ADDR_VAR 0 5
23112: PUSH
23113: LD_VAR 0 5
23117: PUSH
23118: LD_VAR 0 3
23122: PUSH
23123: LD_VAR 0 4
23127: ARRAY
23128: PPUSH
23129: CALL_OW 266
23133: PUSH
23134: LD_VAR 0 3
23138: PUSH
23139: LD_VAR 0 4
23143: ARRAY
23144: PPUSH
23145: CALL_OW 250
23149: PUSH
23150: LD_VAR 0 3
23154: PUSH
23155: LD_VAR 0 4
23159: ARRAY
23160: PPUSH
23161: CALL_OW 251
23165: PUSH
23166: LD_VAR 0 3
23170: PUSH
23171: LD_VAR 0 4
23175: ARRAY
23176: PPUSH
23177: CALL_OW 254
23181: PUSH
23182: EMPTY
23183: LIST
23184: LIST
23185: LIST
23186: LIST
23187: PUSH
23188: EMPTY
23189: LIST
23190: ADD
23191: ST_TO_ADDR
23192: GO 23105
23194: POP
23195: POP
// result := list ;
23196: LD_ADDR_VAR 0 2
23200: PUSH
23201: LD_VAR 0 5
23205: ST_TO_ADDR
// end ;
23206: LD_VAR 0 2
23210: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23211: LD_INT 0
23213: PPUSH
23214: PPUSH
23215: PPUSH
23216: PPUSH
23217: PPUSH
23218: PPUSH
23219: PPUSH
// if not factory then
23220: LD_VAR 0 1
23224: NOT
23225: IFFALSE 23229
// exit ;
23227: GO 23822
// if control = control_apeman then
23229: LD_VAR 0 4
23233: PUSH
23234: LD_INT 5
23236: EQUAL
23237: IFFALSE 23346
// begin tmp := UnitsInside ( factory ) ;
23239: LD_ADDR_VAR 0 8
23243: PUSH
23244: LD_VAR 0 1
23248: PPUSH
23249: CALL_OW 313
23253: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
23254: LD_VAR 0 8
23258: PPUSH
23259: LD_INT 25
23261: PUSH
23262: LD_INT 12
23264: PUSH
23265: EMPTY
23266: LIST
23267: LIST
23268: PPUSH
23269: CALL_OW 72
23273: NOT
23274: IFFALSE 23284
// control := control_manual ;
23276: LD_ADDR_VAR 0 4
23280: PUSH
23281: LD_INT 1
23283: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
23284: LD_ADDR_VAR 0 8
23288: PUSH
23289: LD_VAR 0 1
23293: PPUSH
23294: CALL 22981 0 1
23298: ST_TO_ADDR
// if tmp then
23299: LD_VAR 0 8
23303: IFFALSE 23346
// begin for i in tmp do
23305: LD_ADDR_VAR 0 7
23309: PUSH
23310: LD_VAR 0 8
23314: PUSH
23315: FOR_IN
23316: IFFALSE 23344
// if i [ 1 ] = b_ext_radio then
23318: LD_VAR 0 7
23322: PUSH
23323: LD_INT 1
23325: ARRAY
23326: PUSH
23327: LD_INT 22
23329: EQUAL
23330: IFFALSE 23342
// begin control := control_remote ;
23332: LD_ADDR_VAR 0 4
23336: PUSH
23337: LD_INT 2
23339: ST_TO_ADDR
// break ;
23340: GO 23344
// end ;
23342: GO 23315
23344: POP
23345: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23346: LD_VAR 0 1
23350: PPUSH
23351: LD_VAR 0 2
23355: PPUSH
23356: LD_VAR 0 3
23360: PPUSH
23361: LD_VAR 0 4
23365: PPUSH
23366: LD_VAR 0 5
23370: PPUSH
23371: CALL_OW 448
23375: IFFALSE 23410
// begin result := [ chassis , engine , control , weapon ] ;
23377: LD_ADDR_VAR 0 6
23381: PUSH
23382: LD_VAR 0 2
23386: PUSH
23387: LD_VAR 0 3
23391: PUSH
23392: LD_VAR 0 4
23396: PUSH
23397: LD_VAR 0 5
23401: PUSH
23402: EMPTY
23403: LIST
23404: LIST
23405: LIST
23406: LIST
23407: ST_TO_ADDR
// exit ;
23408: GO 23822
// end ; _chassis := AvailableChassisList ( factory ) ;
23410: LD_ADDR_VAR 0 9
23414: PUSH
23415: LD_VAR 0 1
23419: PPUSH
23420: CALL_OW 475
23424: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
23425: LD_ADDR_VAR 0 11
23429: PUSH
23430: LD_VAR 0 1
23434: PPUSH
23435: CALL_OW 476
23439: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
23440: LD_ADDR_VAR 0 12
23444: PUSH
23445: LD_VAR 0 1
23449: PPUSH
23450: CALL_OW 477
23454: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
23455: LD_ADDR_VAR 0 10
23459: PUSH
23460: LD_VAR 0 1
23464: PPUSH
23465: CALL_OW 478
23469: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
23470: LD_VAR 0 9
23474: NOT
23475: PUSH
23476: LD_VAR 0 11
23480: NOT
23481: OR
23482: PUSH
23483: LD_VAR 0 12
23487: NOT
23488: OR
23489: PUSH
23490: LD_VAR 0 10
23494: NOT
23495: OR
23496: IFFALSE 23531
// begin result := [ chassis , engine , control , weapon ] ;
23498: LD_ADDR_VAR 0 6
23502: PUSH
23503: LD_VAR 0 2
23507: PUSH
23508: LD_VAR 0 3
23512: PUSH
23513: LD_VAR 0 4
23517: PUSH
23518: LD_VAR 0 5
23522: PUSH
23523: EMPTY
23524: LIST
23525: LIST
23526: LIST
23527: LIST
23528: ST_TO_ADDR
// exit ;
23529: GO 23822
// end ; if not chassis in _chassis then
23531: LD_VAR 0 2
23535: PUSH
23536: LD_VAR 0 9
23540: IN
23541: NOT
23542: IFFALSE 23568
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
23544: LD_ADDR_VAR 0 2
23548: PUSH
23549: LD_VAR 0 9
23553: PUSH
23554: LD_INT 1
23556: PPUSH
23557: LD_VAR 0 9
23561: PPUSH
23562: CALL_OW 12
23566: ARRAY
23567: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
23568: LD_VAR 0 2
23572: PPUSH
23573: LD_VAR 0 3
23577: PPUSH
23578: CALL 23827 0 2
23582: NOT
23583: IFFALSE 23642
// repeat engine := _engine [ 1 ] ;
23585: LD_ADDR_VAR 0 3
23589: PUSH
23590: LD_VAR 0 11
23594: PUSH
23595: LD_INT 1
23597: ARRAY
23598: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
23599: LD_ADDR_VAR 0 11
23603: PUSH
23604: LD_VAR 0 11
23608: PPUSH
23609: LD_INT 1
23611: PPUSH
23612: CALL_OW 3
23616: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
23617: LD_VAR 0 2
23621: PPUSH
23622: LD_VAR 0 3
23626: PPUSH
23627: CALL 23827 0 2
23631: PUSH
23632: LD_VAR 0 11
23636: PUSH
23637: EMPTY
23638: EQUAL
23639: OR
23640: IFFALSE 23585
// if not control in _control then
23642: LD_VAR 0 4
23646: PUSH
23647: LD_VAR 0 12
23651: IN
23652: NOT
23653: IFFALSE 23679
// control := _control [ rand ( 1 , _control ) ] ;
23655: LD_ADDR_VAR 0 4
23659: PUSH
23660: LD_VAR 0 12
23664: PUSH
23665: LD_INT 1
23667: PPUSH
23668: LD_VAR 0 12
23672: PPUSH
23673: CALL_OW 12
23677: ARRAY
23678: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
23679: LD_VAR 0 2
23683: PPUSH
23684: LD_VAR 0 5
23688: PPUSH
23689: CALL 24047 0 2
23693: NOT
23694: IFFALSE 23753
// repeat weapon := _weapon [ 1 ] ;
23696: LD_ADDR_VAR 0 5
23700: PUSH
23701: LD_VAR 0 10
23705: PUSH
23706: LD_INT 1
23708: ARRAY
23709: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
23710: LD_ADDR_VAR 0 10
23714: PUSH
23715: LD_VAR 0 10
23719: PPUSH
23720: LD_INT 1
23722: PPUSH
23723: CALL_OW 3
23727: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
23728: LD_VAR 0 2
23732: PPUSH
23733: LD_VAR 0 5
23737: PPUSH
23738: CALL 24047 0 2
23742: PUSH
23743: LD_VAR 0 10
23747: PUSH
23748: EMPTY
23749: EQUAL
23750: OR
23751: IFFALSE 23696
// result := [ ] ;
23753: LD_ADDR_VAR 0 6
23757: PUSH
23758: EMPTY
23759: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23760: LD_VAR 0 1
23764: PPUSH
23765: LD_VAR 0 2
23769: PPUSH
23770: LD_VAR 0 3
23774: PPUSH
23775: LD_VAR 0 4
23779: PPUSH
23780: LD_VAR 0 5
23784: PPUSH
23785: CALL_OW 448
23789: IFFALSE 23822
// result := [ chassis , engine , control , weapon ] ;
23791: LD_ADDR_VAR 0 6
23795: PUSH
23796: LD_VAR 0 2
23800: PUSH
23801: LD_VAR 0 3
23805: PUSH
23806: LD_VAR 0 4
23810: PUSH
23811: LD_VAR 0 5
23815: PUSH
23816: EMPTY
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: ST_TO_ADDR
// end ;
23822: LD_VAR 0 6
23826: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
23827: LD_INT 0
23829: PPUSH
// if not chassis or not engine then
23830: LD_VAR 0 1
23834: NOT
23835: PUSH
23836: LD_VAR 0 2
23840: NOT
23841: OR
23842: IFFALSE 23846
// exit ;
23844: GO 24042
// case engine of engine_solar :
23846: LD_VAR 0 2
23850: PUSH
23851: LD_INT 2
23853: DOUBLE
23854: EQUAL
23855: IFTRUE 23859
23857: GO 23897
23859: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
23860: LD_ADDR_VAR 0 3
23864: PUSH
23865: LD_INT 11
23867: PUSH
23868: LD_INT 12
23870: PUSH
23871: LD_INT 13
23873: PUSH
23874: LD_INT 14
23876: PUSH
23877: LD_INT 1
23879: PUSH
23880: LD_INT 2
23882: PUSH
23883: LD_INT 3
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: LIST
23890: LIST
23891: LIST
23892: LIST
23893: LIST
23894: ST_TO_ADDR
23895: GO 24026
23897: LD_INT 1
23899: DOUBLE
23900: EQUAL
23901: IFTRUE 23905
23903: GO 23967
23905: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
23906: LD_ADDR_VAR 0 3
23910: PUSH
23911: LD_INT 11
23913: PUSH
23914: LD_INT 12
23916: PUSH
23917: LD_INT 13
23919: PUSH
23920: LD_INT 14
23922: PUSH
23923: LD_INT 1
23925: PUSH
23926: LD_INT 2
23928: PUSH
23929: LD_INT 3
23931: PUSH
23932: LD_INT 4
23934: PUSH
23935: LD_INT 5
23937: PUSH
23938: LD_INT 21
23940: PUSH
23941: LD_INT 23
23943: PUSH
23944: LD_INT 22
23946: PUSH
23947: LD_INT 24
23949: PUSH
23950: EMPTY
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: ST_TO_ADDR
23965: GO 24026
23967: LD_INT 3
23969: DOUBLE
23970: EQUAL
23971: IFTRUE 23975
23973: GO 24025
23975: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23976: LD_ADDR_VAR 0 3
23980: PUSH
23981: LD_INT 13
23983: PUSH
23984: LD_INT 14
23986: PUSH
23987: LD_INT 2
23989: PUSH
23990: LD_INT 3
23992: PUSH
23993: LD_INT 4
23995: PUSH
23996: LD_INT 5
23998: PUSH
23999: LD_INT 21
24001: PUSH
24002: LD_INT 22
24004: PUSH
24005: LD_INT 23
24007: PUSH
24008: LD_INT 24
24010: PUSH
24011: EMPTY
24012: LIST
24013: LIST
24014: LIST
24015: LIST
24016: LIST
24017: LIST
24018: LIST
24019: LIST
24020: LIST
24021: LIST
24022: ST_TO_ADDR
24023: GO 24026
24025: POP
// result := ( chassis in result ) ;
24026: LD_ADDR_VAR 0 3
24030: PUSH
24031: LD_VAR 0 1
24035: PUSH
24036: LD_VAR 0 3
24040: IN
24041: ST_TO_ADDR
// end ;
24042: LD_VAR 0 3
24046: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24047: LD_INT 0
24049: PPUSH
// if not chassis or not weapon then
24050: LD_VAR 0 1
24054: NOT
24055: PUSH
24056: LD_VAR 0 2
24060: NOT
24061: OR
24062: IFFALSE 24066
// exit ;
24064: GO 25128
// case weapon of us_machine_gun :
24066: LD_VAR 0 2
24070: PUSH
24071: LD_INT 2
24073: DOUBLE
24074: EQUAL
24075: IFTRUE 24079
24077: GO 24109
24079: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24080: LD_ADDR_VAR 0 3
24084: PUSH
24085: LD_INT 1
24087: PUSH
24088: LD_INT 2
24090: PUSH
24091: LD_INT 3
24093: PUSH
24094: LD_INT 4
24096: PUSH
24097: LD_INT 5
24099: PUSH
24100: EMPTY
24101: LIST
24102: LIST
24103: LIST
24104: LIST
24105: LIST
24106: ST_TO_ADDR
24107: GO 25112
24109: LD_INT 3
24111: DOUBLE
24112: EQUAL
24113: IFTRUE 24117
24115: GO 24147
24117: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24118: LD_ADDR_VAR 0 3
24122: PUSH
24123: LD_INT 1
24125: PUSH
24126: LD_INT 2
24128: PUSH
24129: LD_INT 3
24131: PUSH
24132: LD_INT 4
24134: PUSH
24135: LD_INT 5
24137: PUSH
24138: EMPTY
24139: LIST
24140: LIST
24141: LIST
24142: LIST
24143: LIST
24144: ST_TO_ADDR
24145: GO 25112
24147: LD_INT 11
24149: DOUBLE
24150: EQUAL
24151: IFTRUE 24155
24153: GO 24185
24155: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24156: LD_ADDR_VAR 0 3
24160: PUSH
24161: LD_INT 1
24163: PUSH
24164: LD_INT 2
24166: PUSH
24167: LD_INT 3
24169: PUSH
24170: LD_INT 4
24172: PUSH
24173: LD_INT 5
24175: PUSH
24176: EMPTY
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: ST_TO_ADDR
24183: GO 25112
24185: LD_INT 4
24187: DOUBLE
24188: EQUAL
24189: IFTRUE 24193
24191: GO 24219
24193: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24194: LD_ADDR_VAR 0 3
24198: PUSH
24199: LD_INT 2
24201: PUSH
24202: LD_INT 3
24204: PUSH
24205: LD_INT 4
24207: PUSH
24208: LD_INT 5
24210: PUSH
24211: EMPTY
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: ST_TO_ADDR
24217: GO 25112
24219: LD_INT 5
24221: DOUBLE
24222: EQUAL
24223: IFTRUE 24227
24225: GO 24253
24227: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24228: LD_ADDR_VAR 0 3
24232: PUSH
24233: LD_INT 2
24235: PUSH
24236: LD_INT 3
24238: PUSH
24239: LD_INT 4
24241: PUSH
24242: LD_INT 5
24244: PUSH
24245: EMPTY
24246: LIST
24247: LIST
24248: LIST
24249: LIST
24250: ST_TO_ADDR
24251: GO 25112
24253: LD_INT 9
24255: DOUBLE
24256: EQUAL
24257: IFTRUE 24261
24259: GO 24287
24261: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
24262: LD_ADDR_VAR 0 3
24266: PUSH
24267: LD_INT 2
24269: PUSH
24270: LD_INT 3
24272: PUSH
24273: LD_INT 4
24275: PUSH
24276: LD_INT 5
24278: PUSH
24279: EMPTY
24280: LIST
24281: LIST
24282: LIST
24283: LIST
24284: ST_TO_ADDR
24285: GO 25112
24287: LD_INT 7
24289: DOUBLE
24290: EQUAL
24291: IFTRUE 24295
24293: GO 24321
24295: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
24296: LD_ADDR_VAR 0 3
24300: PUSH
24301: LD_INT 2
24303: PUSH
24304: LD_INT 3
24306: PUSH
24307: LD_INT 4
24309: PUSH
24310: LD_INT 5
24312: PUSH
24313: EMPTY
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: ST_TO_ADDR
24319: GO 25112
24321: LD_INT 12
24323: DOUBLE
24324: EQUAL
24325: IFTRUE 24329
24327: GO 24355
24329: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
24330: LD_ADDR_VAR 0 3
24334: PUSH
24335: LD_INT 2
24337: PUSH
24338: LD_INT 3
24340: PUSH
24341: LD_INT 4
24343: PUSH
24344: LD_INT 5
24346: PUSH
24347: EMPTY
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: ST_TO_ADDR
24353: GO 25112
24355: LD_INT 13
24357: DOUBLE
24358: EQUAL
24359: IFTRUE 24363
24361: GO 24389
24363: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
24364: LD_ADDR_VAR 0 3
24368: PUSH
24369: LD_INT 2
24371: PUSH
24372: LD_INT 3
24374: PUSH
24375: LD_INT 4
24377: PUSH
24378: LD_INT 5
24380: PUSH
24381: EMPTY
24382: LIST
24383: LIST
24384: LIST
24385: LIST
24386: ST_TO_ADDR
24387: GO 25112
24389: LD_INT 14
24391: DOUBLE
24392: EQUAL
24393: IFTRUE 24397
24395: GO 24415
24397: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
24398: LD_ADDR_VAR 0 3
24402: PUSH
24403: LD_INT 4
24405: PUSH
24406: LD_INT 5
24408: PUSH
24409: EMPTY
24410: LIST
24411: LIST
24412: ST_TO_ADDR
24413: GO 25112
24415: LD_INT 6
24417: DOUBLE
24418: EQUAL
24419: IFTRUE 24423
24421: GO 24441
24423: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
24424: LD_ADDR_VAR 0 3
24428: PUSH
24429: LD_INT 4
24431: PUSH
24432: LD_INT 5
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: ST_TO_ADDR
24439: GO 25112
24441: LD_INT 10
24443: DOUBLE
24444: EQUAL
24445: IFTRUE 24449
24447: GO 24467
24449: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
24450: LD_ADDR_VAR 0 3
24454: PUSH
24455: LD_INT 4
24457: PUSH
24458: LD_INT 5
24460: PUSH
24461: EMPTY
24462: LIST
24463: LIST
24464: ST_TO_ADDR
24465: GO 25112
24467: LD_INT 22
24469: DOUBLE
24470: EQUAL
24471: IFTRUE 24475
24473: GO 24501
24475: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
24476: LD_ADDR_VAR 0 3
24480: PUSH
24481: LD_INT 11
24483: PUSH
24484: LD_INT 12
24486: PUSH
24487: LD_INT 13
24489: PUSH
24490: LD_INT 14
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: LIST
24497: LIST
24498: ST_TO_ADDR
24499: GO 25112
24501: LD_INT 23
24503: DOUBLE
24504: EQUAL
24505: IFTRUE 24509
24507: GO 24535
24509: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
24510: LD_ADDR_VAR 0 3
24514: PUSH
24515: LD_INT 11
24517: PUSH
24518: LD_INT 12
24520: PUSH
24521: LD_INT 13
24523: PUSH
24524: LD_INT 14
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: LIST
24531: LIST
24532: ST_TO_ADDR
24533: GO 25112
24535: LD_INT 24
24537: DOUBLE
24538: EQUAL
24539: IFTRUE 24543
24541: GO 24569
24543: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
24544: LD_ADDR_VAR 0 3
24548: PUSH
24549: LD_INT 11
24551: PUSH
24552: LD_INT 12
24554: PUSH
24555: LD_INT 13
24557: PUSH
24558: LD_INT 14
24560: PUSH
24561: EMPTY
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: ST_TO_ADDR
24567: GO 25112
24569: LD_INT 30
24571: DOUBLE
24572: EQUAL
24573: IFTRUE 24577
24575: GO 24603
24577: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
24578: LD_ADDR_VAR 0 3
24582: PUSH
24583: LD_INT 11
24585: PUSH
24586: LD_INT 12
24588: PUSH
24589: LD_INT 13
24591: PUSH
24592: LD_INT 14
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: LIST
24599: LIST
24600: ST_TO_ADDR
24601: GO 25112
24603: LD_INT 25
24605: DOUBLE
24606: EQUAL
24607: IFTRUE 24611
24609: GO 24629
24611: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
24612: LD_ADDR_VAR 0 3
24616: PUSH
24617: LD_INT 13
24619: PUSH
24620: LD_INT 14
24622: PUSH
24623: EMPTY
24624: LIST
24625: LIST
24626: ST_TO_ADDR
24627: GO 25112
24629: LD_INT 27
24631: DOUBLE
24632: EQUAL
24633: IFTRUE 24637
24635: GO 24655
24637: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
24638: LD_ADDR_VAR 0 3
24642: PUSH
24643: LD_INT 13
24645: PUSH
24646: LD_INT 14
24648: PUSH
24649: EMPTY
24650: LIST
24651: LIST
24652: ST_TO_ADDR
24653: GO 25112
24655: LD_EXP 84
24659: DOUBLE
24660: EQUAL
24661: IFTRUE 24665
24663: GO 24691
24665: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
24666: LD_ADDR_VAR 0 3
24670: PUSH
24671: LD_INT 11
24673: PUSH
24674: LD_INT 12
24676: PUSH
24677: LD_INT 13
24679: PUSH
24680: LD_INT 14
24682: PUSH
24683: EMPTY
24684: LIST
24685: LIST
24686: LIST
24687: LIST
24688: ST_TO_ADDR
24689: GO 25112
24691: LD_INT 28
24693: DOUBLE
24694: EQUAL
24695: IFTRUE 24699
24697: GO 24717
24699: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
24700: LD_ADDR_VAR 0 3
24704: PUSH
24705: LD_INT 13
24707: PUSH
24708: LD_INT 14
24710: PUSH
24711: EMPTY
24712: LIST
24713: LIST
24714: ST_TO_ADDR
24715: GO 25112
24717: LD_INT 29
24719: DOUBLE
24720: EQUAL
24721: IFTRUE 24725
24723: GO 24743
24725: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
24726: LD_ADDR_VAR 0 3
24730: PUSH
24731: LD_INT 13
24733: PUSH
24734: LD_INT 14
24736: PUSH
24737: EMPTY
24738: LIST
24739: LIST
24740: ST_TO_ADDR
24741: GO 25112
24743: LD_INT 31
24745: DOUBLE
24746: EQUAL
24747: IFTRUE 24751
24749: GO 24769
24751: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
24752: LD_ADDR_VAR 0 3
24756: PUSH
24757: LD_INT 13
24759: PUSH
24760: LD_INT 14
24762: PUSH
24763: EMPTY
24764: LIST
24765: LIST
24766: ST_TO_ADDR
24767: GO 25112
24769: LD_INT 26
24771: DOUBLE
24772: EQUAL
24773: IFTRUE 24777
24775: GO 24795
24777: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
24778: LD_ADDR_VAR 0 3
24782: PUSH
24783: LD_INT 13
24785: PUSH
24786: LD_INT 14
24788: PUSH
24789: EMPTY
24790: LIST
24791: LIST
24792: ST_TO_ADDR
24793: GO 25112
24795: LD_INT 42
24797: DOUBLE
24798: EQUAL
24799: IFTRUE 24803
24801: GO 24829
24803: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
24804: LD_ADDR_VAR 0 3
24808: PUSH
24809: LD_INT 21
24811: PUSH
24812: LD_INT 22
24814: PUSH
24815: LD_INT 23
24817: PUSH
24818: LD_INT 24
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: LIST
24825: LIST
24826: ST_TO_ADDR
24827: GO 25112
24829: LD_INT 43
24831: DOUBLE
24832: EQUAL
24833: IFTRUE 24837
24835: GO 24863
24837: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
24838: LD_ADDR_VAR 0 3
24842: PUSH
24843: LD_INT 21
24845: PUSH
24846: LD_INT 22
24848: PUSH
24849: LD_INT 23
24851: PUSH
24852: LD_INT 24
24854: PUSH
24855: EMPTY
24856: LIST
24857: LIST
24858: LIST
24859: LIST
24860: ST_TO_ADDR
24861: GO 25112
24863: LD_INT 44
24865: DOUBLE
24866: EQUAL
24867: IFTRUE 24871
24869: GO 24897
24871: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
24872: LD_ADDR_VAR 0 3
24876: PUSH
24877: LD_INT 21
24879: PUSH
24880: LD_INT 22
24882: PUSH
24883: LD_INT 23
24885: PUSH
24886: LD_INT 24
24888: PUSH
24889: EMPTY
24890: LIST
24891: LIST
24892: LIST
24893: LIST
24894: ST_TO_ADDR
24895: GO 25112
24897: LD_INT 45
24899: DOUBLE
24900: EQUAL
24901: IFTRUE 24905
24903: GO 24931
24905: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
24906: LD_ADDR_VAR 0 3
24910: PUSH
24911: LD_INT 21
24913: PUSH
24914: LD_INT 22
24916: PUSH
24917: LD_INT 23
24919: PUSH
24920: LD_INT 24
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: LIST
24927: LIST
24928: ST_TO_ADDR
24929: GO 25112
24931: LD_INT 49
24933: DOUBLE
24934: EQUAL
24935: IFTRUE 24939
24937: GO 24965
24939: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
24940: LD_ADDR_VAR 0 3
24944: PUSH
24945: LD_INT 21
24947: PUSH
24948: LD_INT 22
24950: PUSH
24951: LD_INT 23
24953: PUSH
24954: LD_INT 24
24956: PUSH
24957: EMPTY
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: ST_TO_ADDR
24963: GO 25112
24965: LD_INT 51
24967: DOUBLE
24968: EQUAL
24969: IFTRUE 24973
24971: GO 24999
24973: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
24974: LD_ADDR_VAR 0 3
24978: PUSH
24979: LD_INT 21
24981: PUSH
24982: LD_INT 22
24984: PUSH
24985: LD_INT 23
24987: PUSH
24988: LD_INT 24
24990: PUSH
24991: EMPTY
24992: LIST
24993: LIST
24994: LIST
24995: LIST
24996: ST_TO_ADDR
24997: GO 25112
24999: LD_INT 52
25001: DOUBLE
25002: EQUAL
25003: IFTRUE 25007
25005: GO 25033
25007: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25008: LD_ADDR_VAR 0 3
25012: PUSH
25013: LD_INT 21
25015: PUSH
25016: LD_INT 22
25018: PUSH
25019: LD_INT 23
25021: PUSH
25022: LD_INT 24
25024: PUSH
25025: EMPTY
25026: LIST
25027: LIST
25028: LIST
25029: LIST
25030: ST_TO_ADDR
25031: GO 25112
25033: LD_INT 53
25035: DOUBLE
25036: EQUAL
25037: IFTRUE 25041
25039: GO 25059
25041: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25042: LD_ADDR_VAR 0 3
25046: PUSH
25047: LD_INT 23
25049: PUSH
25050: LD_INT 24
25052: PUSH
25053: EMPTY
25054: LIST
25055: LIST
25056: ST_TO_ADDR
25057: GO 25112
25059: LD_INT 46
25061: DOUBLE
25062: EQUAL
25063: IFTRUE 25067
25065: GO 25085
25067: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25068: LD_ADDR_VAR 0 3
25072: PUSH
25073: LD_INT 23
25075: PUSH
25076: LD_INT 24
25078: PUSH
25079: EMPTY
25080: LIST
25081: LIST
25082: ST_TO_ADDR
25083: GO 25112
25085: LD_INT 47
25087: DOUBLE
25088: EQUAL
25089: IFTRUE 25093
25091: GO 25111
25093: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25094: LD_ADDR_VAR 0 3
25098: PUSH
25099: LD_INT 23
25101: PUSH
25102: LD_INT 24
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: ST_TO_ADDR
25109: GO 25112
25111: POP
// result := ( chassis in result ) ;
25112: LD_ADDR_VAR 0 3
25116: PUSH
25117: LD_VAR 0 1
25121: PUSH
25122: LD_VAR 0 3
25126: IN
25127: ST_TO_ADDR
// end ;
25128: LD_VAR 0 3
25132: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25133: LD_INT 0
25135: PPUSH
25136: PPUSH
25137: PPUSH
25138: PPUSH
25139: PPUSH
25140: PPUSH
25141: PPUSH
// result := array ;
25142: LD_ADDR_VAR 0 5
25146: PUSH
25147: LD_VAR 0 1
25151: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25152: LD_VAR 0 1
25156: NOT
25157: PUSH
25158: LD_VAR 0 2
25162: NOT
25163: OR
25164: PUSH
25165: LD_VAR 0 3
25169: NOT
25170: OR
25171: PUSH
25172: LD_VAR 0 2
25176: PUSH
25177: LD_VAR 0 1
25181: GREATER
25182: OR
25183: PUSH
25184: LD_VAR 0 3
25188: PUSH
25189: LD_VAR 0 1
25193: GREATER
25194: OR
25195: IFFALSE 25199
// exit ;
25197: GO 25495
// if direction then
25199: LD_VAR 0 4
25203: IFFALSE 25267
// begin d := 1 ;
25205: LD_ADDR_VAR 0 9
25209: PUSH
25210: LD_INT 1
25212: ST_TO_ADDR
// if i_from > i_to then
25213: LD_VAR 0 2
25217: PUSH
25218: LD_VAR 0 3
25222: GREATER
25223: IFFALSE 25249
// length := ( array - i_from ) + i_to else
25225: LD_ADDR_VAR 0 11
25229: PUSH
25230: LD_VAR 0 1
25234: PUSH
25235: LD_VAR 0 2
25239: MINUS
25240: PUSH
25241: LD_VAR 0 3
25245: PLUS
25246: ST_TO_ADDR
25247: GO 25265
// length := i_to - i_from ;
25249: LD_ADDR_VAR 0 11
25253: PUSH
25254: LD_VAR 0 3
25258: PUSH
25259: LD_VAR 0 2
25263: MINUS
25264: ST_TO_ADDR
// end else
25265: GO 25328
// begin d := - 1 ;
25267: LD_ADDR_VAR 0 9
25271: PUSH
25272: LD_INT 1
25274: NEG
25275: ST_TO_ADDR
// if i_from > i_to then
25276: LD_VAR 0 2
25280: PUSH
25281: LD_VAR 0 3
25285: GREATER
25286: IFFALSE 25306
// length := i_from - i_to else
25288: LD_ADDR_VAR 0 11
25292: PUSH
25293: LD_VAR 0 2
25297: PUSH
25298: LD_VAR 0 3
25302: MINUS
25303: ST_TO_ADDR
25304: GO 25328
// length := ( array - i_to ) + i_from ;
25306: LD_ADDR_VAR 0 11
25310: PUSH
25311: LD_VAR 0 1
25315: PUSH
25316: LD_VAR 0 3
25320: MINUS
25321: PUSH
25322: LD_VAR 0 2
25326: PLUS
25327: ST_TO_ADDR
// end ; if not length then
25328: LD_VAR 0 11
25332: NOT
25333: IFFALSE 25337
// exit ;
25335: GO 25495
// tmp := array ;
25337: LD_ADDR_VAR 0 10
25341: PUSH
25342: LD_VAR 0 1
25346: ST_TO_ADDR
// for i = 1 to length do
25347: LD_ADDR_VAR 0 6
25351: PUSH
25352: DOUBLE
25353: LD_INT 1
25355: DEC
25356: ST_TO_ADDR
25357: LD_VAR 0 11
25361: PUSH
25362: FOR_TO
25363: IFFALSE 25483
// begin for j = 1 to array do
25365: LD_ADDR_VAR 0 7
25369: PUSH
25370: DOUBLE
25371: LD_INT 1
25373: DEC
25374: ST_TO_ADDR
25375: LD_VAR 0 1
25379: PUSH
25380: FOR_TO
25381: IFFALSE 25469
// begin k := j + d ;
25383: LD_ADDR_VAR 0 8
25387: PUSH
25388: LD_VAR 0 7
25392: PUSH
25393: LD_VAR 0 9
25397: PLUS
25398: ST_TO_ADDR
// if k > array then
25399: LD_VAR 0 8
25403: PUSH
25404: LD_VAR 0 1
25408: GREATER
25409: IFFALSE 25419
// k := 1 ;
25411: LD_ADDR_VAR 0 8
25415: PUSH
25416: LD_INT 1
25418: ST_TO_ADDR
// if not k then
25419: LD_VAR 0 8
25423: NOT
25424: IFFALSE 25436
// k := array ;
25426: LD_ADDR_VAR 0 8
25430: PUSH
25431: LD_VAR 0 1
25435: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
25436: LD_ADDR_VAR 0 10
25440: PUSH
25441: LD_VAR 0 10
25445: PPUSH
25446: LD_VAR 0 8
25450: PPUSH
25451: LD_VAR 0 1
25455: PUSH
25456: LD_VAR 0 7
25460: ARRAY
25461: PPUSH
25462: CALL_OW 1
25466: ST_TO_ADDR
// end ;
25467: GO 25380
25469: POP
25470: POP
// array := tmp ;
25471: LD_ADDR_VAR 0 1
25475: PUSH
25476: LD_VAR 0 10
25480: ST_TO_ADDR
// end ;
25481: GO 25362
25483: POP
25484: POP
// result := array ;
25485: LD_ADDR_VAR 0 5
25489: PUSH
25490: LD_VAR 0 1
25494: ST_TO_ADDR
// end ;
25495: LD_VAR 0 5
25499: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
25500: LD_INT 0
25502: PPUSH
25503: PPUSH
// result := 0 ;
25504: LD_ADDR_VAR 0 3
25508: PUSH
25509: LD_INT 0
25511: ST_TO_ADDR
// if not array or not value in array then
25512: LD_VAR 0 1
25516: NOT
25517: PUSH
25518: LD_VAR 0 2
25522: PUSH
25523: LD_VAR 0 1
25527: IN
25528: NOT
25529: OR
25530: IFFALSE 25534
// exit ;
25532: GO 25588
// for i = 1 to array do
25534: LD_ADDR_VAR 0 4
25538: PUSH
25539: DOUBLE
25540: LD_INT 1
25542: DEC
25543: ST_TO_ADDR
25544: LD_VAR 0 1
25548: PUSH
25549: FOR_TO
25550: IFFALSE 25586
// if value = array [ i ] then
25552: LD_VAR 0 2
25556: PUSH
25557: LD_VAR 0 1
25561: PUSH
25562: LD_VAR 0 4
25566: ARRAY
25567: EQUAL
25568: IFFALSE 25584
// begin result := i ;
25570: LD_ADDR_VAR 0 3
25574: PUSH
25575: LD_VAR 0 4
25579: ST_TO_ADDR
// exit ;
25580: POP
25581: POP
25582: GO 25588
// end ;
25584: GO 25549
25586: POP
25587: POP
// end ;
25588: LD_VAR 0 3
25592: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
25593: LD_INT 0
25595: PPUSH
// vc_chassis := chassis ;
25596: LD_ADDR_OWVAR 37
25600: PUSH
25601: LD_VAR 0 1
25605: ST_TO_ADDR
// vc_engine := engine ;
25606: LD_ADDR_OWVAR 39
25610: PUSH
25611: LD_VAR 0 2
25615: ST_TO_ADDR
// vc_control := control ;
25616: LD_ADDR_OWVAR 38
25620: PUSH
25621: LD_VAR 0 3
25625: ST_TO_ADDR
// vc_weapon := weapon ;
25626: LD_ADDR_OWVAR 40
25630: PUSH
25631: LD_VAR 0 4
25635: ST_TO_ADDR
// vc_fuel_battery := fuel ;
25636: LD_ADDR_OWVAR 41
25640: PUSH
25641: LD_VAR 0 5
25645: ST_TO_ADDR
// end ;
25646: LD_VAR 0 6
25650: RET
// export function WantPlant ( unit ) ; var task ; begin
25651: LD_INT 0
25653: PPUSH
25654: PPUSH
// result := false ;
25655: LD_ADDR_VAR 0 2
25659: PUSH
25660: LD_INT 0
25662: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
25663: LD_ADDR_VAR 0 3
25667: PUSH
25668: LD_VAR 0 1
25672: PPUSH
25673: CALL_OW 437
25677: ST_TO_ADDR
// if task then
25678: LD_VAR 0 3
25682: IFFALSE 25710
// if task [ 1 ] [ 1 ] = p then
25684: LD_VAR 0 3
25688: PUSH
25689: LD_INT 1
25691: ARRAY
25692: PUSH
25693: LD_INT 1
25695: ARRAY
25696: PUSH
25697: LD_STRING p
25699: EQUAL
25700: IFFALSE 25710
// result := true ;
25702: LD_ADDR_VAR 0 2
25706: PUSH
25707: LD_INT 1
25709: ST_TO_ADDR
// end ;
25710: LD_VAR 0 2
25714: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
25715: LD_INT 0
25717: PPUSH
25718: PPUSH
25719: PPUSH
25720: PPUSH
// if pos < 1 then
25721: LD_VAR 0 2
25725: PUSH
25726: LD_INT 1
25728: LESS
25729: IFFALSE 25733
// exit ;
25731: GO 26036
// if pos = 1 then
25733: LD_VAR 0 2
25737: PUSH
25738: LD_INT 1
25740: EQUAL
25741: IFFALSE 25774
// result := Replace ( arr , pos [ 1 ] , value ) else
25743: LD_ADDR_VAR 0 4
25747: PUSH
25748: LD_VAR 0 1
25752: PPUSH
25753: LD_VAR 0 2
25757: PUSH
25758: LD_INT 1
25760: ARRAY
25761: PPUSH
25762: LD_VAR 0 3
25766: PPUSH
25767: CALL_OW 1
25771: ST_TO_ADDR
25772: GO 26036
// begin tmp := arr ;
25774: LD_ADDR_VAR 0 6
25778: PUSH
25779: LD_VAR 0 1
25783: ST_TO_ADDR
// s_arr := [ tmp ] ;
25784: LD_ADDR_VAR 0 7
25788: PUSH
25789: LD_VAR 0 6
25793: PUSH
25794: EMPTY
25795: LIST
25796: ST_TO_ADDR
// for i = 1 to pos - 1 do
25797: LD_ADDR_VAR 0 5
25801: PUSH
25802: DOUBLE
25803: LD_INT 1
25805: DEC
25806: ST_TO_ADDR
25807: LD_VAR 0 2
25811: PUSH
25812: LD_INT 1
25814: MINUS
25815: PUSH
25816: FOR_TO
25817: IFFALSE 25862
// begin tmp := tmp [ pos [ i ] ] ;
25819: LD_ADDR_VAR 0 6
25823: PUSH
25824: LD_VAR 0 6
25828: PUSH
25829: LD_VAR 0 2
25833: PUSH
25834: LD_VAR 0 5
25838: ARRAY
25839: ARRAY
25840: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
25841: LD_ADDR_VAR 0 7
25845: PUSH
25846: LD_VAR 0 7
25850: PUSH
25851: LD_VAR 0 6
25855: PUSH
25856: EMPTY
25857: LIST
25858: ADD
25859: ST_TO_ADDR
// end ;
25860: GO 25816
25862: POP
25863: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
25864: LD_ADDR_VAR 0 6
25868: PUSH
25869: LD_VAR 0 6
25873: PPUSH
25874: LD_VAR 0 2
25878: PUSH
25879: LD_VAR 0 2
25883: ARRAY
25884: PPUSH
25885: LD_VAR 0 3
25889: PPUSH
25890: CALL_OW 1
25894: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
25895: LD_ADDR_VAR 0 7
25899: PUSH
25900: LD_VAR 0 7
25904: PPUSH
25905: LD_VAR 0 7
25909: PPUSH
25910: LD_VAR 0 6
25914: PPUSH
25915: CALL_OW 1
25919: ST_TO_ADDR
// for i = s_arr downto 2 do
25920: LD_ADDR_VAR 0 5
25924: PUSH
25925: DOUBLE
25926: LD_VAR 0 7
25930: INC
25931: ST_TO_ADDR
25932: LD_INT 2
25934: PUSH
25935: FOR_DOWNTO
25936: IFFALSE 26020
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
25938: LD_ADDR_VAR 0 6
25942: PUSH
25943: LD_VAR 0 7
25947: PUSH
25948: LD_VAR 0 5
25952: PUSH
25953: LD_INT 1
25955: MINUS
25956: ARRAY
25957: PPUSH
25958: LD_VAR 0 2
25962: PUSH
25963: LD_VAR 0 5
25967: PUSH
25968: LD_INT 1
25970: MINUS
25971: ARRAY
25972: PPUSH
25973: LD_VAR 0 7
25977: PUSH
25978: LD_VAR 0 5
25982: ARRAY
25983: PPUSH
25984: CALL_OW 1
25988: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
25989: LD_ADDR_VAR 0 7
25993: PUSH
25994: LD_VAR 0 7
25998: PPUSH
25999: LD_VAR 0 5
26003: PUSH
26004: LD_INT 1
26006: MINUS
26007: PPUSH
26008: LD_VAR 0 6
26012: PPUSH
26013: CALL_OW 1
26017: ST_TO_ADDR
// end ;
26018: GO 25935
26020: POP
26021: POP
// result := s_arr [ 1 ] ;
26022: LD_ADDR_VAR 0 4
26026: PUSH
26027: LD_VAR 0 7
26031: PUSH
26032: LD_INT 1
26034: ARRAY
26035: ST_TO_ADDR
// end ; end ;
26036: LD_VAR 0 4
26040: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26041: LD_INT 0
26043: PPUSH
26044: PPUSH
// if not list then
26045: LD_VAR 0 1
26049: NOT
26050: IFFALSE 26054
// exit ;
26052: GO 26145
// i := list [ pos1 ] ;
26054: LD_ADDR_VAR 0 5
26058: PUSH
26059: LD_VAR 0 1
26063: PUSH
26064: LD_VAR 0 2
26068: ARRAY
26069: ST_TO_ADDR
// if not i then
26070: LD_VAR 0 5
26074: NOT
26075: IFFALSE 26079
// exit ;
26077: GO 26145
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26079: LD_ADDR_VAR 0 1
26083: PUSH
26084: LD_VAR 0 1
26088: PPUSH
26089: LD_VAR 0 2
26093: PPUSH
26094: LD_VAR 0 1
26098: PUSH
26099: LD_VAR 0 3
26103: ARRAY
26104: PPUSH
26105: CALL_OW 1
26109: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26110: LD_ADDR_VAR 0 1
26114: PUSH
26115: LD_VAR 0 1
26119: PPUSH
26120: LD_VAR 0 3
26124: PPUSH
26125: LD_VAR 0 5
26129: PPUSH
26130: CALL_OW 1
26134: ST_TO_ADDR
// result := list ;
26135: LD_ADDR_VAR 0 4
26139: PUSH
26140: LD_VAR 0 1
26144: ST_TO_ADDR
// end ;
26145: LD_VAR 0 4
26149: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26150: LD_INT 0
26152: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26153: LD_ADDR_VAR 0 5
26157: PUSH
26158: LD_VAR 0 1
26162: PPUSH
26163: CALL_OW 250
26167: PPUSH
26168: LD_VAR 0 1
26172: PPUSH
26173: CALL_OW 251
26177: PPUSH
26178: LD_VAR 0 2
26182: PPUSH
26183: LD_VAR 0 3
26187: PPUSH
26188: LD_VAR 0 4
26192: PPUSH
26193: CALL 26203 0 5
26197: ST_TO_ADDR
// end ;
26198: LD_VAR 0 5
26202: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26203: LD_INT 0
26205: PPUSH
26206: PPUSH
26207: PPUSH
26208: PPUSH
// if not list then
26209: LD_VAR 0 3
26213: NOT
26214: IFFALSE 26218
// exit ;
26216: GO 26606
// result := [ ] ;
26218: LD_ADDR_VAR 0 6
26222: PUSH
26223: EMPTY
26224: ST_TO_ADDR
// for i in list do
26225: LD_ADDR_VAR 0 7
26229: PUSH
26230: LD_VAR 0 3
26234: PUSH
26235: FOR_IN
26236: IFFALSE 26438
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26238: LD_ADDR_VAR 0 9
26242: PUSH
26243: LD_VAR 0 7
26247: PPUSH
26248: LD_VAR 0 1
26252: PPUSH
26253: LD_VAR 0 2
26257: PPUSH
26258: CALL_OW 297
26262: ST_TO_ADDR
// if not result then
26263: LD_VAR 0 6
26267: NOT
26268: IFFALSE 26294
// result := [ [ i , tmp ] ] else
26270: LD_ADDR_VAR 0 6
26274: PUSH
26275: LD_VAR 0 7
26279: PUSH
26280: LD_VAR 0 9
26284: PUSH
26285: EMPTY
26286: LIST
26287: LIST
26288: PUSH
26289: EMPTY
26290: LIST
26291: ST_TO_ADDR
26292: GO 26436
// begin if result [ result ] [ 2 ] < tmp then
26294: LD_VAR 0 6
26298: PUSH
26299: LD_VAR 0 6
26303: ARRAY
26304: PUSH
26305: LD_INT 2
26307: ARRAY
26308: PUSH
26309: LD_VAR 0 9
26313: LESS
26314: IFFALSE 26356
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
26316: LD_ADDR_VAR 0 6
26320: PUSH
26321: LD_VAR 0 6
26325: PPUSH
26326: LD_VAR 0 6
26330: PUSH
26331: LD_INT 1
26333: PLUS
26334: PPUSH
26335: LD_VAR 0 7
26339: PUSH
26340: LD_VAR 0 9
26344: PUSH
26345: EMPTY
26346: LIST
26347: LIST
26348: PPUSH
26349: CALL_OW 2
26353: ST_TO_ADDR
26354: GO 26436
// for j = 1 to result do
26356: LD_ADDR_VAR 0 8
26360: PUSH
26361: DOUBLE
26362: LD_INT 1
26364: DEC
26365: ST_TO_ADDR
26366: LD_VAR 0 6
26370: PUSH
26371: FOR_TO
26372: IFFALSE 26434
// begin if tmp < result [ j ] [ 2 ] then
26374: LD_VAR 0 9
26378: PUSH
26379: LD_VAR 0 6
26383: PUSH
26384: LD_VAR 0 8
26388: ARRAY
26389: PUSH
26390: LD_INT 2
26392: ARRAY
26393: LESS
26394: IFFALSE 26432
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26396: LD_ADDR_VAR 0 6
26400: PUSH
26401: LD_VAR 0 6
26405: PPUSH
26406: LD_VAR 0 8
26410: PPUSH
26411: LD_VAR 0 7
26415: PUSH
26416: LD_VAR 0 9
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PPUSH
26425: CALL_OW 2
26429: ST_TO_ADDR
// break ;
26430: GO 26434
// end ; end ;
26432: GO 26371
26434: POP
26435: POP
// end ; end ;
26436: GO 26235
26438: POP
26439: POP
// if result and not asc then
26440: LD_VAR 0 6
26444: PUSH
26445: LD_VAR 0 4
26449: NOT
26450: AND
26451: IFFALSE 26526
// begin tmp := result ;
26453: LD_ADDR_VAR 0 9
26457: PUSH
26458: LD_VAR 0 6
26462: ST_TO_ADDR
// for i = tmp downto 1 do
26463: LD_ADDR_VAR 0 7
26467: PUSH
26468: DOUBLE
26469: LD_VAR 0 9
26473: INC
26474: ST_TO_ADDR
26475: LD_INT 1
26477: PUSH
26478: FOR_DOWNTO
26479: IFFALSE 26524
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
26481: LD_ADDR_VAR 0 6
26485: PUSH
26486: LD_VAR 0 6
26490: PPUSH
26491: LD_VAR 0 9
26495: PUSH
26496: LD_VAR 0 7
26500: MINUS
26501: PUSH
26502: LD_INT 1
26504: PLUS
26505: PPUSH
26506: LD_VAR 0 9
26510: PUSH
26511: LD_VAR 0 7
26515: ARRAY
26516: PPUSH
26517: CALL_OW 1
26521: ST_TO_ADDR
26522: GO 26478
26524: POP
26525: POP
// end ; tmp := [ ] ;
26526: LD_ADDR_VAR 0 9
26530: PUSH
26531: EMPTY
26532: ST_TO_ADDR
// if mode then
26533: LD_VAR 0 5
26537: IFFALSE 26606
// begin for i = 1 to result do
26539: LD_ADDR_VAR 0 7
26543: PUSH
26544: DOUBLE
26545: LD_INT 1
26547: DEC
26548: ST_TO_ADDR
26549: LD_VAR 0 6
26553: PUSH
26554: FOR_TO
26555: IFFALSE 26594
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
26557: LD_ADDR_VAR 0 9
26561: PUSH
26562: LD_VAR 0 9
26566: PPUSH
26567: LD_VAR 0 7
26571: PPUSH
26572: LD_VAR 0 6
26576: PUSH
26577: LD_VAR 0 7
26581: ARRAY
26582: PUSH
26583: LD_INT 1
26585: ARRAY
26586: PPUSH
26587: CALL_OW 1
26591: ST_TO_ADDR
26592: GO 26554
26594: POP
26595: POP
// result := tmp ;
26596: LD_ADDR_VAR 0 6
26600: PUSH
26601: LD_VAR 0 9
26605: ST_TO_ADDR
// end ; end ;
26606: LD_VAR 0 6
26610: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
26611: LD_INT 0
26613: PPUSH
26614: PPUSH
26615: PPUSH
26616: PPUSH
26617: PPUSH
26618: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
26619: LD_ADDR_VAR 0 5
26623: PUSH
26624: LD_INT 0
26626: PUSH
26627: LD_INT 0
26629: PUSH
26630: LD_INT 0
26632: PUSH
26633: EMPTY
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: LIST
26639: LIST
26640: ST_TO_ADDR
// if not x or not y then
26641: LD_VAR 0 2
26645: NOT
26646: PUSH
26647: LD_VAR 0 3
26651: NOT
26652: OR
26653: IFFALSE 26657
// exit ;
26655: GO 28309
// if not range then
26657: LD_VAR 0 4
26661: NOT
26662: IFFALSE 26672
// range := 10 ;
26664: LD_ADDR_VAR 0 4
26668: PUSH
26669: LD_INT 10
26671: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26672: LD_ADDR_VAR 0 8
26676: PUSH
26677: LD_INT 81
26679: PUSH
26680: LD_VAR 0 1
26684: PUSH
26685: EMPTY
26686: LIST
26687: LIST
26688: PUSH
26689: LD_INT 92
26691: PUSH
26692: LD_VAR 0 2
26696: PUSH
26697: LD_VAR 0 3
26701: PUSH
26702: LD_VAR 0 4
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: LIST
26711: LIST
26712: PUSH
26713: LD_INT 3
26715: PUSH
26716: LD_INT 21
26718: PUSH
26719: LD_INT 3
26721: PUSH
26722: EMPTY
26723: LIST
26724: LIST
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: PUSH
26730: EMPTY
26731: LIST
26732: LIST
26733: LIST
26734: PPUSH
26735: CALL_OW 69
26739: ST_TO_ADDR
// if not tmp then
26740: LD_VAR 0 8
26744: NOT
26745: IFFALSE 26749
// exit ;
26747: GO 28309
// for i in tmp do
26749: LD_ADDR_VAR 0 6
26753: PUSH
26754: LD_VAR 0 8
26758: PUSH
26759: FOR_IN
26760: IFFALSE 28284
// begin points := [ 0 , 0 , 0 ] ;
26762: LD_ADDR_VAR 0 9
26766: PUSH
26767: LD_INT 0
26769: PUSH
26770: LD_INT 0
26772: PUSH
26773: LD_INT 0
26775: PUSH
26776: EMPTY
26777: LIST
26778: LIST
26779: LIST
26780: ST_TO_ADDR
// bpoints := 1 ;
26781: LD_ADDR_VAR 0 10
26785: PUSH
26786: LD_INT 1
26788: ST_TO_ADDR
// case GetType ( i ) of unit_human :
26789: LD_VAR 0 6
26793: PPUSH
26794: CALL_OW 247
26798: PUSH
26799: LD_INT 1
26801: DOUBLE
26802: EQUAL
26803: IFTRUE 26807
26805: GO 27385
26807: POP
// begin if GetClass ( i ) = 1 then
26808: LD_VAR 0 6
26812: PPUSH
26813: CALL_OW 257
26817: PUSH
26818: LD_INT 1
26820: EQUAL
26821: IFFALSE 26842
// points := [ 10 , 5 , 3 ] ;
26823: LD_ADDR_VAR 0 9
26827: PUSH
26828: LD_INT 10
26830: PUSH
26831: LD_INT 5
26833: PUSH
26834: LD_INT 3
26836: PUSH
26837: EMPTY
26838: LIST
26839: LIST
26840: LIST
26841: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
26842: LD_VAR 0 6
26846: PPUSH
26847: CALL_OW 257
26851: PUSH
26852: LD_INT 2
26854: PUSH
26855: LD_INT 3
26857: PUSH
26858: LD_INT 4
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: LIST
26865: IN
26866: IFFALSE 26887
// points := [ 3 , 2 , 1 ] ;
26868: LD_ADDR_VAR 0 9
26872: PUSH
26873: LD_INT 3
26875: PUSH
26876: LD_INT 2
26878: PUSH
26879: LD_INT 1
26881: PUSH
26882: EMPTY
26883: LIST
26884: LIST
26885: LIST
26886: ST_TO_ADDR
// if GetClass ( i ) = 5 then
26887: LD_VAR 0 6
26891: PPUSH
26892: CALL_OW 257
26896: PUSH
26897: LD_INT 5
26899: EQUAL
26900: IFFALSE 26921
// points := [ 130 , 5 , 2 ] ;
26902: LD_ADDR_VAR 0 9
26906: PUSH
26907: LD_INT 130
26909: PUSH
26910: LD_INT 5
26912: PUSH
26913: LD_INT 2
26915: PUSH
26916: EMPTY
26917: LIST
26918: LIST
26919: LIST
26920: ST_TO_ADDR
// if GetClass ( i ) = 8 then
26921: LD_VAR 0 6
26925: PPUSH
26926: CALL_OW 257
26930: PUSH
26931: LD_INT 8
26933: EQUAL
26934: IFFALSE 26955
// points := [ 35 , 35 , 30 ] ;
26936: LD_ADDR_VAR 0 9
26940: PUSH
26941: LD_INT 35
26943: PUSH
26944: LD_INT 35
26946: PUSH
26947: LD_INT 30
26949: PUSH
26950: EMPTY
26951: LIST
26952: LIST
26953: LIST
26954: ST_TO_ADDR
// if GetClass ( i ) = 9 then
26955: LD_VAR 0 6
26959: PPUSH
26960: CALL_OW 257
26964: PUSH
26965: LD_INT 9
26967: EQUAL
26968: IFFALSE 26989
// points := [ 20 , 55 , 40 ] ;
26970: LD_ADDR_VAR 0 9
26974: PUSH
26975: LD_INT 20
26977: PUSH
26978: LD_INT 55
26980: PUSH
26981: LD_INT 40
26983: PUSH
26984: EMPTY
26985: LIST
26986: LIST
26987: LIST
26988: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
26989: LD_VAR 0 6
26993: PPUSH
26994: CALL_OW 257
26998: PUSH
26999: LD_INT 12
27001: PUSH
27002: LD_INT 16
27004: PUSH
27005: EMPTY
27006: LIST
27007: LIST
27008: IN
27009: IFFALSE 27030
// points := [ 5 , 3 , 2 ] ;
27011: LD_ADDR_VAR 0 9
27015: PUSH
27016: LD_INT 5
27018: PUSH
27019: LD_INT 3
27021: PUSH
27022: LD_INT 2
27024: PUSH
27025: EMPTY
27026: LIST
27027: LIST
27028: LIST
27029: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27030: LD_VAR 0 6
27034: PPUSH
27035: CALL_OW 257
27039: PUSH
27040: LD_INT 17
27042: EQUAL
27043: IFFALSE 27064
// points := [ 100 , 50 , 75 ] ;
27045: LD_ADDR_VAR 0 9
27049: PUSH
27050: LD_INT 100
27052: PUSH
27053: LD_INT 50
27055: PUSH
27056: LD_INT 75
27058: PUSH
27059: EMPTY
27060: LIST
27061: LIST
27062: LIST
27063: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27064: LD_VAR 0 6
27068: PPUSH
27069: CALL_OW 257
27073: PUSH
27074: LD_INT 15
27076: EQUAL
27077: IFFALSE 27098
// points := [ 10 , 5 , 3 ] ;
27079: LD_ADDR_VAR 0 9
27083: PUSH
27084: LD_INT 10
27086: PUSH
27087: LD_INT 5
27089: PUSH
27090: LD_INT 3
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: LIST
27097: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27098: LD_VAR 0 6
27102: PPUSH
27103: CALL_OW 257
27107: PUSH
27108: LD_INT 14
27110: EQUAL
27111: IFFALSE 27132
// points := [ 10 , 0 , 0 ] ;
27113: LD_ADDR_VAR 0 9
27117: PUSH
27118: LD_INT 10
27120: PUSH
27121: LD_INT 0
27123: PUSH
27124: LD_INT 0
27126: PUSH
27127: EMPTY
27128: LIST
27129: LIST
27130: LIST
27131: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27132: LD_VAR 0 6
27136: PPUSH
27137: CALL_OW 257
27141: PUSH
27142: LD_INT 11
27144: EQUAL
27145: IFFALSE 27166
// points := [ 30 , 10 , 5 ] ;
27147: LD_ADDR_VAR 0 9
27151: PUSH
27152: LD_INT 30
27154: PUSH
27155: LD_INT 10
27157: PUSH
27158: LD_INT 5
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: LIST
27165: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27166: LD_VAR 0 1
27170: PPUSH
27171: LD_INT 5
27173: PPUSH
27174: CALL_OW 321
27178: PUSH
27179: LD_INT 2
27181: EQUAL
27182: IFFALSE 27199
// bpoints := bpoints * 1.8 ;
27184: LD_ADDR_VAR 0 10
27188: PUSH
27189: LD_VAR 0 10
27193: PUSH
27194: LD_REAL  1.80000000000000E+0000
27197: MUL
27198: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27199: LD_VAR 0 6
27203: PPUSH
27204: CALL_OW 257
27208: PUSH
27209: LD_INT 1
27211: PUSH
27212: LD_INT 2
27214: PUSH
27215: LD_INT 3
27217: PUSH
27218: LD_INT 4
27220: PUSH
27221: EMPTY
27222: LIST
27223: LIST
27224: LIST
27225: LIST
27226: IN
27227: PUSH
27228: LD_VAR 0 1
27232: PPUSH
27233: LD_INT 51
27235: PPUSH
27236: CALL_OW 321
27240: PUSH
27241: LD_INT 2
27243: EQUAL
27244: AND
27245: IFFALSE 27262
// bpoints := bpoints * 1.2 ;
27247: LD_ADDR_VAR 0 10
27251: PUSH
27252: LD_VAR 0 10
27256: PUSH
27257: LD_REAL  1.20000000000000E+0000
27260: MUL
27261: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27262: LD_VAR 0 6
27266: PPUSH
27267: CALL_OW 257
27271: PUSH
27272: LD_INT 5
27274: PUSH
27275: LD_INT 7
27277: PUSH
27278: LD_INT 9
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: LIST
27285: IN
27286: PUSH
27287: LD_VAR 0 1
27291: PPUSH
27292: LD_INT 52
27294: PPUSH
27295: CALL_OW 321
27299: PUSH
27300: LD_INT 2
27302: EQUAL
27303: AND
27304: IFFALSE 27321
// bpoints := bpoints * 1.5 ;
27306: LD_ADDR_VAR 0 10
27310: PUSH
27311: LD_VAR 0 10
27315: PUSH
27316: LD_REAL  1.50000000000000E+0000
27319: MUL
27320: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
27321: LD_VAR 0 1
27325: PPUSH
27326: LD_INT 66
27328: PPUSH
27329: CALL_OW 321
27333: PUSH
27334: LD_INT 2
27336: EQUAL
27337: IFFALSE 27354
// bpoints := bpoints * 1.1 ;
27339: LD_ADDR_VAR 0 10
27343: PUSH
27344: LD_VAR 0 10
27348: PUSH
27349: LD_REAL  1.10000000000000E+0000
27352: MUL
27353: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
27354: LD_ADDR_VAR 0 10
27358: PUSH
27359: LD_VAR 0 10
27363: PUSH
27364: LD_VAR 0 6
27368: PPUSH
27369: LD_INT 1
27371: PPUSH
27372: CALL_OW 259
27376: PUSH
27377: LD_REAL  1.15000000000000E+0000
27380: MUL
27381: MUL
27382: ST_TO_ADDR
// end ; unit_vehicle :
27383: GO 28213
27385: LD_INT 2
27387: DOUBLE
27388: EQUAL
27389: IFTRUE 27393
27391: GO 28201
27393: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
27394: LD_VAR 0 6
27398: PPUSH
27399: CALL_OW 264
27403: PUSH
27404: LD_INT 2
27406: PUSH
27407: LD_INT 42
27409: PUSH
27410: LD_INT 24
27412: PUSH
27413: EMPTY
27414: LIST
27415: LIST
27416: LIST
27417: IN
27418: IFFALSE 27439
// points := [ 25 , 5 , 3 ] ;
27420: LD_ADDR_VAR 0 9
27424: PUSH
27425: LD_INT 25
27427: PUSH
27428: LD_INT 5
27430: PUSH
27431: LD_INT 3
27433: PUSH
27434: EMPTY
27435: LIST
27436: LIST
27437: LIST
27438: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
27439: LD_VAR 0 6
27443: PPUSH
27444: CALL_OW 264
27448: PUSH
27449: LD_INT 4
27451: PUSH
27452: LD_INT 43
27454: PUSH
27455: LD_INT 25
27457: PUSH
27458: EMPTY
27459: LIST
27460: LIST
27461: LIST
27462: IN
27463: IFFALSE 27484
// points := [ 40 , 15 , 5 ] ;
27465: LD_ADDR_VAR 0 9
27469: PUSH
27470: LD_INT 40
27472: PUSH
27473: LD_INT 15
27475: PUSH
27476: LD_INT 5
27478: PUSH
27479: EMPTY
27480: LIST
27481: LIST
27482: LIST
27483: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
27484: LD_VAR 0 6
27488: PPUSH
27489: CALL_OW 264
27493: PUSH
27494: LD_INT 3
27496: PUSH
27497: LD_INT 23
27499: PUSH
27500: EMPTY
27501: LIST
27502: LIST
27503: IN
27504: IFFALSE 27525
// points := [ 7 , 25 , 8 ] ;
27506: LD_ADDR_VAR 0 9
27510: PUSH
27511: LD_INT 7
27513: PUSH
27514: LD_INT 25
27516: PUSH
27517: LD_INT 8
27519: PUSH
27520: EMPTY
27521: LIST
27522: LIST
27523: LIST
27524: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
27525: LD_VAR 0 6
27529: PPUSH
27530: CALL_OW 264
27534: PUSH
27535: LD_INT 5
27537: PUSH
27538: LD_INT 27
27540: PUSH
27541: LD_INT 44
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: LIST
27548: IN
27549: IFFALSE 27570
// points := [ 14 , 50 , 16 ] ;
27551: LD_ADDR_VAR 0 9
27555: PUSH
27556: LD_INT 14
27558: PUSH
27559: LD_INT 50
27561: PUSH
27562: LD_INT 16
27564: PUSH
27565: EMPTY
27566: LIST
27567: LIST
27568: LIST
27569: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
27570: LD_VAR 0 6
27574: PPUSH
27575: CALL_OW 264
27579: PUSH
27580: LD_INT 6
27582: PUSH
27583: LD_INT 46
27585: PUSH
27586: EMPTY
27587: LIST
27588: LIST
27589: IN
27590: IFFALSE 27611
// points := [ 32 , 120 , 70 ] ;
27592: LD_ADDR_VAR 0 9
27596: PUSH
27597: LD_INT 32
27599: PUSH
27600: LD_INT 120
27602: PUSH
27603: LD_INT 70
27605: PUSH
27606: EMPTY
27607: LIST
27608: LIST
27609: LIST
27610: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
27611: LD_VAR 0 6
27615: PPUSH
27616: CALL_OW 264
27620: PUSH
27621: LD_INT 7
27623: PUSH
27624: LD_INT 28
27626: PUSH
27627: LD_INT 45
27629: PUSH
27630: LD_EXP 84
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: IN
27641: IFFALSE 27662
// points := [ 35 , 20 , 45 ] ;
27643: LD_ADDR_VAR 0 9
27647: PUSH
27648: LD_INT 35
27650: PUSH
27651: LD_INT 20
27653: PUSH
27654: LD_INT 45
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: LIST
27661: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
27662: LD_VAR 0 6
27666: PPUSH
27667: CALL_OW 264
27671: PUSH
27672: LD_INT 47
27674: PUSH
27675: EMPTY
27676: LIST
27677: IN
27678: IFFALSE 27699
// points := [ 67 , 45 , 75 ] ;
27680: LD_ADDR_VAR 0 9
27684: PUSH
27685: LD_INT 67
27687: PUSH
27688: LD_INT 45
27690: PUSH
27691: LD_INT 75
27693: PUSH
27694: EMPTY
27695: LIST
27696: LIST
27697: LIST
27698: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
27699: LD_VAR 0 6
27703: PPUSH
27704: CALL_OW 264
27708: PUSH
27709: LD_INT 26
27711: PUSH
27712: EMPTY
27713: LIST
27714: IN
27715: IFFALSE 27736
// points := [ 120 , 30 , 80 ] ;
27717: LD_ADDR_VAR 0 9
27721: PUSH
27722: LD_INT 120
27724: PUSH
27725: LD_INT 30
27727: PUSH
27728: LD_INT 80
27730: PUSH
27731: EMPTY
27732: LIST
27733: LIST
27734: LIST
27735: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
27736: LD_VAR 0 6
27740: PPUSH
27741: CALL_OW 264
27745: PUSH
27746: LD_INT 22
27748: PUSH
27749: EMPTY
27750: LIST
27751: IN
27752: IFFALSE 27773
// points := [ 40 , 1 , 1 ] ;
27754: LD_ADDR_VAR 0 9
27758: PUSH
27759: LD_INT 40
27761: PUSH
27762: LD_INT 1
27764: PUSH
27765: LD_INT 1
27767: PUSH
27768: EMPTY
27769: LIST
27770: LIST
27771: LIST
27772: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
27773: LD_VAR 0 6
27777: PPUSH
27778: CALL_OW 264
27782: PUSH
27783: LD_INT 29
27785: PUSH
27786: EMPTY
27787: LIST
27788: IN
27789: IFFALSE 27810
// points := [ 70 , 200 , 400 ] ;
27791: LD_ADDR_VAR 0 9
27795: PUSH
27796: LD_INT 70
27798: PUSH
27799: LD_INT 200
27801: PUSH
27802: LD_INT 400
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: LIST
27809: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
27810: LD_VAR 0 6
27814: PPUSH
27815: CALL_OW 264
27819: PUSH
27820: LD_INT 14
27822: PUSH
27823: LD_INT 53
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: IN
27830: IFFALSE 27851
// points := [ 40 , 10 , 20 ] ;
27832: LD_ADDR_VAR 0 9
27836: PUSH
27837: LD_INT 40
27839: PUSH
27840: LD_INT 10
27842: PUSH
27843: LD_INT 20
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: LIST
27850: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
27851: LD_VAR 0 6
27855: PPUSH
27856: CALL_OW 264
27860: PUSH
27861: LD_INT 9
27863: PUSH
27864: EMPTY
27865: LIST
27866: IN
27867: IFFALSE 27888
// points := [ 5 , 70 , 20 ] ;
27869: LD_ADDR_VAR 0 9
27873: PUSH
27874: LD_INT 5
27876: PUSH
27877: LD_INT 70
27879: PUSH
27880: LD_INT 20
27882: PUSH
27883: EMPTY
27884: LIST
27885: LIST
27886: LIST
27887: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
27888: LD_VAR 0 6
27892: PPUSH
27893: CALL_OW 264
27897: PUSH
27898: LD_INT 10
27900: PUSH
27901: EMPTY
27902: LIST
27903: IN
27904: IFFALSE 27925
// points := [ 35 , 110 , 70 ] ;
27906: LD_ADDR_VAR 0 9
27910: PUSH
27911: LD_INT 35
27913: PUSH
27914: LD_INT 110
27916: PUSH
27917: LD_INT 70
27919: PUSH
27920: EMPTY
27921: LIST
27922: LIST
27923: LIST
27924: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
27925: LD_VAR 0 6
27929: PPUSH
27930: CALL_OW 265
27934: PUSH
27935: LD_INT 25
27937: EQUAL
27938: IFFALSE 27959
// points := [ 80 , 65 , 100 ] ;
27940: LD_ADDR_VAR 0 9
27944: PUSH
27945: LD_INT 80
27947: PUSH
27948: LD_INT 65
27950: PUSH
27951: LD_INT 100
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: LIST
27958: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
27959: LD_VAR 0 6
27963: PPUSH
27964: CALL_OW 263
27968: PUSH
27969: LD_INT 1
27971: EQUAL
27972: IFFALSE 28007
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
27974: LD_ADDR_VAR 0 10
27978: PUSH
27979: LD_VAR 0 10
27983: PUSH
27984: LD_VAR 0 6
27988: PPUSH
27989: CALL_OW 311
27993: PPUSH
27994: LD_INT 3
27996: PPUSH
27997: CALL_OW 259
28001: PUSH
28002: LD_INT 4
28004: MUL
28005: MUL
28006: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28007: LD_VAR 0 6
28011: PPUSH
28012: CALL_OW 263
28016: PUSH
28017: LD_INT 2
28019: EQUAL
28020: IFFALSE 28071
// begin j := IsControledBy ( i ) ;
28022: LD_ADDR_VAR 0 7
28026: PUSH
28027: LD_VAR 0 6
28031: PPUSH
28032: CALL_OW 312
28036: ST_TO_ADDR
// if j then
28037: LD_VAR 0 7
28041: IFFALSE 28071
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28043: LD_ADDR_VAR 0 10
28047: PUSH
28048: LD_VAR 0 10
28052: PUSH
28053: LD_VAR 0 7
28057: PPUSH
28058: LD_INT 3
28060: PPUSH
28061: CALL_OW 259
28065: PUSH
28066: LD_INT 3
28068: MUL
28069: MUL
28070: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28071: LD_VAR 0 6
28075: PPUSH
28076: CALL_OW 264
28080: PUSH
28081: LD_INT 5
28083: PUSH
28084: LD_INT 6
28086: PUSH
28087: LD_INT 46
28089: PUSH
28090: LD_INT 44
28092: PUSH
28093: LD_INT 47
28095: PUSH
28096: LD_INT 45
28098: PUSH
28099: LD_INT 28
28101: PUSH
28102: LD_INT 7
28104: PUSH
28105: LD_INT 27
28107: PUSH
28108: LD_INT 29
28110: PUSH
28111: EMPTY
28112: LIST
28113: LIST
28114: LIST
28115: LIST
28116: LIST
28117: LIST
28118: LIST
28119: LIST
28120: LIST
28121: LIST
28122: IN
28123: PUSH
28124: LD_VAR 0 1
28128: PPUSH
28129: LD_INT 52
28131: PPUSH
28132: CALL_OW 321
28136: PUSH
28137: LD_INT 2
28139: EQUAL
28140: AND
28141: IFFALSE 28158
// bpoints := bpoints * 1.2 ;
28143: LD_ADDR_VAR 0 10
28147: PUSH
28148: LD_VAR 0 10
28152: PUSH
28153: LD_REAL  1.20000000000000E+0000
28156: MUL
28157: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28158: LD_VAR 0 6
28162: PPUSH
28163: CALL_OW 264
28167: PUSH
28168: LD_INT 6
28170: PUSH
28171: LD_INT 46
28173: PUSH
28174: LD_INT 47
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: LIST
28181: IN
28182: IFFALSE 28199
// bpoints := bpoints * 1.2 ;
28184: LD_ADDR_VAR 0 10
28188: PUSH
28189: LD_VAR 0 10
28193: PUSH
28194: LD_REAL  1.20000000000000E+0000
28197: MUL
28198: ST_TO_ADDR
// end ; unit_building :
28199: GO 28213
28201: LD_INT 3
28203: DOUBLE
28204: EQUAL
28205: IFTRUE 28209
28207: GO 28212
28209: POP
// ; end ;
28210: GO 28213
28212: POP
// for j = 1 to 3 do
28213: LD_ADDR_VAR 0 7
28217: PUSH
28218: DOUBLE
28219: LD_INT 1
28221: DEC
28222: ST_TO_ADDR
28223: LD_INT 3
28225: PUSH
28226: FOR_TO
28227: IFFALSE 28280
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28229: LD_ADDR_VAR 0 5
28233: PUSH
28234: LD_VAR 0 5
28238: PPUSH
28239: LD_VAR 0 7
28243: PPUSH
28244: LD_VAR 0 5
28248: PUSH
28249: LD_VAR 0 7
28253: ARRAY
28254: PUSH
28255: LD_VAR 0 9
28259: PUSH
28260: LD_VAR 0 7
28264: ARRAY
28265: PUSH
28266: LD_VAR 0 10
28270: MUL
28271: PLUS
28272: PPUSH
28273: CALL_OW 1
28277: ST_TO_ADDR
28278: GO 28226
28280: POP
28281: POP
// end ;
28282: GO 26759
28284: POP
28285: POP
// result := Replace ( result , 4 , tmp ) ;
28286: LD_ADDR_VAR 0 5
28290: PUSH
28291: LD_VAR 0 5
28295: PPUSH
28296: LD_INT 4
28298: PPUSH
28299: LD_VAR 0 8
28303: PPUSH
28304: CALL_OW 1
28308: ST_TO_ADDR
// end ;
28309: LD_VAR 0 5
28313: RET
// export function DangerAtRange ( unit , range ) ; begin
28314: LD_INT 0
28316: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
28317: LD_ADDR_VAR 0 3
28321: PUSH
28322: LD_VAR 0 1
28326: PPUSH
28327: CALL_OW 255
28331: PPUSH
28332: LD_VAR 0 1
28336: PPUSH
28337: CALL_OW 250
28341: PPUSH
28342: LD_VAR 0 1
28346: PPUSH
28347: CALL_OW 251
28351: PPUSH
28352: LD_VAR 0 2
28356: PPUSH
28357: CALL 26611 0 4
28361: ST_TO_ADDR
// end ;
28362: LD_VAR 0 3
28366: RET
// export function DangerInArea ( side , area ) ; begin
28367: LD_INT 0
28369: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
28370: LD_ADDR_VAR 0 3
28374: PUSH
28375: LD_VAR 0 2
28379: PPUSH
28380: LD_INT 81
28382: PUSH
28383: LD_VAR 0 1
28387: PUSH
28388: EMPTY
28389: LIST
28390: LIST
28391: PPUSH
28392: CALL_OW 70
28396: ST_TO_ADDR
// end ;
28397: LD_VAR 0 3
28401: RET
// export function IsExtension ( b ) ; begin
28402: LD_INT 0
28404: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
28405: LD_ADDR_VAR 0 2
28409: PUSH
28410: LD_VAR 0 1
28414: PUSH
28415: LD_INT 23
28417: PUSH
28418: LD_INT 20
28420: PUSH
28421: LD_INT 22
28423: PUSH
28424: LD_INT 17
28426: PUSH
28427: LD_INT 24
28429: PUSH
28430: LD_INT 21
28432: PUSH
28433: LD_INT 19
28435: PUSH
28436: LD_INT 16
28438: PUSH
28439: LD_INT 25
28441: PUSH
28442: LD_INT 18
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: LIST
28449: LIST
28450: LIST
28451: LIST
28452: LIST
28453: LIST
28454: LIST
28455: LIST
28456: IN
28457: ST_TO_ADDR
// end ;
28458: LD_VAR 0 2
28462: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
28463: LD_INT 0
28465: PPUSH
28466: PPUSH
28467: PPUSH
// result := [ ] ;
28468: LD_ADDR_VAR 0 4
28472: PUSH
28473: EMPTY
28474: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
28475: LD_ADDR_VAR 0 5
28479: PUSH
28480: LD_VAR 0 2
28484: PPUSH
28485: LD_INT 21
28487: PUSH
28488: LD_INT 3
28490: PUSH
28491: EMPTY
28492: LIST
28493: LIST
28494: PPUSH
28495: CALL_OW 70
28499: ST_TO_ADDR
// if not tmp then
28500: LD_VAR 0 5
28504: NOT
28505: IFFALSE 28509
// exit ;
28507: GO 28573
// if checkLink then
28509: LD_VAR 0 3
28513: IFFALSE 28563
// begin for i in tmp do
28515: LD_ADDR_VAR 0 6
28519: PUSH
28520: LD_VAR 0 5
28524: PUSH
28525: FOR_IN
28526: IFFALSE 28561
// if GetBase ( i ) <> base then
28528: LD_VAR 0 6
28532: PPUSH
28533: CALL_OW 274
28537: PUSH
28538: LD_VAR 0 1
28542: NONEQUAL
28543: IFFALSE 28559
// ComLinkToBase ( base , i ) ;
28545: LD_VAR 0 1
28549: PPUSH
28550: LD_VAR 0 6
28554: PPUSH
28555: CALL_OW 169
28559: GO 28525
28561: POP
28562: POP
// end ; result := tmp ;
28563: LD_ADDR_VAR 0 4
28567: PUSH
28568: LD_VAR 0 5
28572: ST_TO_ADDR
// end ;
28573: LD_VAR 0 4
28577: RET
// export function ComComplete ( units , b ) ; var i ; begin
28578: LD_INT 0
28580: PPUSH
28581: PPUSH
// if not units then
28582: LD_VAR 0 1
28586: NOT
28587: IFFALSE 28591
// exit ;
28589: GO 28681
// for i in units do
28591: LD_ADDR_VAR 0 4
28595: PUSH
28596: LD_VAR 0 1
28600: PUSH
28601: FOR_IN
28602: IFFALSE 28679
// if BuildingStatus ( b ) = bs_build then
28604: LD_VAR 0 2
28608: PPUSH
28609: CALL_OW 461
28613: PUSH
28614: LD_INT 1
28616: EQUAL
28617: IFFALSE 28677
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
28619: LD_VAR 0 4
28623: PPUSH
28624: LD_STRING h
28626: PUSH
28627: LD_VAR 0 2
28631: PPUSH
28632: CALL_OW 250
28636: PUSH
28637: LD_VAR 0 2
28641: PPUSH
28642: CALL_OW 251
28646: PUSH
28647: LD_VAR 0 2
28651: PUSH
28652: LD_INT 0
28654: PUSH
28655: LD_INT 0
28657: PUSH
28658: LD_INT 0
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: LIST
28665: LIST
28666: LIST
28667: LIST
28668: LIST
28669: PUSH
28670: EMPTY
28671: LIST
28672: PPUSH
28673: CALL_OW 446
28677: GO 28601
28679: POP
28680: POP
// end ;
28681: LD_VAR 0 3
28685: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
28686: LD_INT 0
28688: PPUSH
28689: PPUSH
28690: PPUSH
28691: PPUSH
28692: PPUSH
28693: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
28694: LD_VAR 0 1
28698: NOT
28699: PUSH
28700: LD_VAR 0 1
28704: PPUSH
28705: CALL_OW 263
28709: PUSH
28710: LD_INT 2
28712: NONEQUAL
28713: OR
28714: IFFALSE 28718
// exit ;
28716: GO 29034
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
28718: LD_ADDR_VAR 0 6
28722: PUSH
28723: LD_INT 22
28725: PUSH
28726: LD_VAR 0 1
28730: PPUSH
28731: CALL_OW 255
28735: PUSH
28736: EMPTY
28737: LIST
28738: LIST
28739: PUSH
28740: LD_INT 2
28742: PUSH
28743: LD_INT 30
28745: PUSH
28746: LD_INT 36
28748: PUSH
28749: EMPTY
28750: LIST
28751: LIST
28752: PUSH
28753: LD_INT 34
28755: PUSH
28756: LD_INT 31
28758: PUSH
28759: EMPTY
28760: LIST
28761: LIST
28762: PUSH
28763: EMPTY
28764: LIST
28765: LIST
28766: LIST
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: PPUSH
28772: CALL_OW 69
28776: ST_TO_ADDR
// if not tmp then
28777: LD_VAR 0 6
28781: NOT
28782: IFFALSE 28786
// exit ;
28784: GO 29034
// result := [ ] ;
28786: LD_ADDR_VAR 0 2
28790: PUSH
28791: EMPTY
28792: ST_TO_ADDR
// for i in tmp do
28793: LD_ADDR_VAR 0 3
28797: PUSH
28798: LD_VAR 0 6
28802: PUSH
28803: FOR_IN
28804: IFFALSE 28875
// begin t := UnitsInside ( i ) ;
28806: LD_ADDR_VAR 0 4
28810: PUSH
28811: LD_VAR 0 3
28815: PPUSH
28816: CALL_OW 313
28820: ST_TO_ADDR
// if t then
28821: LD_VAR 0 4
28825: IFFALSE 28873
// for j in t do
28827: LD_ADDR_VAR 0 7
28831: PUSH
28832: LD_VAR 0 4
28836: PUSH
28837: FOR_IN
28838: IFFALSE 28871
// result := Replace ( result , result + 1 , j ) ;
28840: LD_ADDR_VAR 0 2
28844: PUSH
28845: LD_VAR 0 2
28849: PPUSH
28850: LD_VAR 0 2
28854: PUSH
28855: LD_INT 1
28857: PLUS
28858: PPUSH
28859: LD_VAR 0 7
28863: PPUSH
28864: CALL_OW 1
28868: ST_TO_ADDR
28869: GO 28837
28871: POP
28872: POP
// end ;
28873: GO 28803
28875: POP
28876: POP
// if not result then
28877: LD_VAR 0 2
28881: NOT
28882: IFFALSE 28886
// exit ;
28884: GO 29034
// mech := result [ 1 ] ;
28886: LD_ADDR_VAR 0 5
28890: PUSH
28891: LD_VAR 0 2
28895: PUSH
28896: LD_INT 1
28898: ARRAY
28899: ST_TO_ADDR
// if result > 1 then
28900: LD_VAR 0 2
28904: PUSH
28905: LD_INT 1
28907: GREATER
28908: IFFALSE 29020
// begin for i = 2 to result do
28910: LD_ADDR_VAR 0 3
28914: PUSH
28915: DOUBLE
28916: LD_INT 2
28918: DEC
28919: ST_TO_ADDR
28920: LD_VAR 0 2
28924: PUSH
28925: FOR_TO
28926: IFFALSE 29018
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
28928: LD_ADDR_VAR 0 4
28932: PUSH
28933: LD_VAR 0 2
28937: PUSH
28938: LD_VAR 0 3
28942: ARRAY
28943: PPUSH
28944: LD_INT 3
28946: PPUSH
28947: CALL_OW 259
28951: PUSH
28952: LD_VAR 0 2
28956: PUSH
28957: LD_VAR 0 3
28961: ARRAY
28962: PPUSH
28963: CALL_OW 432
28967: MINUS
28968: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
28969: LD_VAR 0 4
28973: PUSH
28974: LD_VAR 0 5
28978: PPUSH
28979: LD_INT 3
28981: PPUSH
28982: CALL_OW 259
28986: PUSH
28987: LD_VAR 0 5
28991: PPUSH
28992: CALL_OW 432
28996: MINUS
28997: GREATEREQUAL
28998: IFFALSE 29016
// mech := result [ i ] ;
29000: LD_ADDR_VAR 0 5
29004: PUSH
29005: LD_VAR 0 2
29009: PUSH
29010: LD_VAR 0 3
29014: ARRAY
29015: ST_TO_ADDR
// end ;
29016: GO 28925
29018: POP
29019: POP
// end ; ComLinkTo ( vehicle , mech ) ;
29020: LD_VAR 0 1
29024: PPUSH
29025: LD_VAR 0 5
29029: PPUSH
29030: CALL_OW 135
// end ;
29034: LD_VAR 0 2
29038: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29039: LD_INT 0
29041: PPUSH
29042: PPUSH
29043: PPUSH
29044: PPUSH
29045: PPUSH
29046: PPUSH
29047: PPUSH
29048: PPUSH
29049: PPUSH
29050: PPUSH
29051: PPUSH
29052: PPUSH
29053: PPUSH
// result := [ ] ;
29054: LD_ADDR_VAR 0 7
29058: PUSH
29059: EMPTY
29060: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29061: LD_VAR 0 1
29065: PPUSH
29066: CALL_OW 266
29070: PUSH
29071: LD_INT 0
29073: PUSH
29074: LD_INT 1
29076: PUSH
29077: EMPTY
29078: LIST
29079: LIST
29080: IN
29081: NOT
29082: IFFALSE 29086
// exit ;
29084: GO 30720
// if name then
29086: LD_VAR 0 3
29090: IFFALSE 29106
// SetBName ( base_dep , name ) ;
29092: LD_VAR 0 1
29096: PPUSH
29097: LD_VAR 0 3
29101: PPUSH
29102: CALL_OW 500
// base := GetBase ( base_dep ) ;
29106: LD_ADDR_VAR 0 15
29110: PUSH
29111: LD_VAR 0 1
29115: PPUSH
29116: CALL_OW 274
29120: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29121: LD_ADDR_VAR 0 16
29125: PUSH
29126: LD_VAR 0 1
29130: PPUSH
29131: CALL_OW 255
29135: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29136: LD_ADDR_VAR 0 17
29140: PUSH
29141: LD_VAR 0 1
29145: PPUSH
29146: CALL_OW 248
29150: ST_TO_ADDR
// if sources then
29151: LD_VAR 0 5
29155: IFFALSE 29202
// for i = 1 to 3 do
29157: LD_ADDR_VAR 0 8
29161: PUSH
29162: DOUBLE
29163: LD_INT 1
29165: DEC
29166: ST_TO_ADDR
29167: LD_INT 3
29169: PUSH
29170: FOR_TO
29171: IFFALSE 29200
// AddResourceType ( base , i , sources [ i ] ) ;
29173: LD_VAR 0 15
29177: PPUSH
29178: LD_VAR 0 8
29182: PPUSH
29183: LD_VAR 0 5
29187: PUSH
29188: LD_VAR 0 8
29192: ARRAY
29193: PPUSH
29194: CALL_OW 276
29198: GO 29170
29200: POP
29201: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
29202: LD_ADDR_VAR 0 18
29206: PUSH
29207: LD_VAR 0 15
29211: PPUSH
29212: LD_VAR 0 2
29216: PPUSH
29217: LD_INT 1
29219: PPUSH
29220: CALL 28463 0 3
29224: ST_TO_ADDR
// InitHc ;
29225: CALL_OW 19
// InitUc ;
29229: CALL_OW 18
// uc_side := side ;
29233: LD_ADDR_OWVAR 20
29237: PUSH
29238: LD_VAR 0 16
29242: ST_TO_ADDR
// uc_nation := nation ;
29243: LD_ADDR_OWVAR 21
29247: PUSH
29248: LD_VAR 0 17
29252: ST_TO_ADDR
// if buildings then
29253: LD_VAR 0 18
29257: IFFALSE 30579
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29259: LD_ADDR_VAR 0 19
29263: PUSH
29264: LD_VAR 0 18
29268: PPUSH
29269: LD_INT 2
29271: PUSH
29272: LD_INT 30
29274: PUSH
29275: LD_INT 29
29277: PUSH
29278: EMPTY
29279: LIST
29280: LIST
29281: PUSH
29282: LD_INT 30
29284: PUSH
29285: LD_INT 30
29287: PUSH
29288: EMPTY
29289: LIST
29290: LIST
29291: PUSH
29292: EMPTY
29293: LIST
29294: LIST
29295: LIST
29296: PPUSH
29297: CALL_OW 72
29301: ST_TO_ADDR
// if tmp then
29302: LD_VAR 0 19
29306: IFFALSE 29354
// for i in tmp do
29308: LD_ADDR_VAR 0 8
29312: PUSH
29313: LD_VAR 0 19
29317: PUSH
29318: FOR_IN
29319: IFFALSE 29352
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
29321: LD_VAR 0 8
29325: PPUSH
29326: CALL_OW 250
29330: PPUSH
29331: LD_VAR 0 8
29335: PPUSH
29336: CALL_OW 251
29340: PPUSH
29341: LD_VAR 0 16
29345: PPUSH
29346: CALL_OW 441
29350: GO 29318
29352: POP
29353: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
29354: LD_VAR 0 18
29358: PPUSH
29359: LD_INT 2
29361: PUSH
29362: LD_INT 30
29364: PUSH
29365: LD_INT 32
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: PUSH
29372: LD_INT 30
29374: PUSH
29375: LD_INT 33
29377: PUSH
29378: EMPTY
29379: LIST
29380: LIST
29381: PUSH
29382: EMPTY
29383: LIST
29384: LIST
29385: LIST
29386: PPUSH
29387: CALL_OW 72
29391: IFFALSE 29479
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
29393: LD_ADDR_VAR 0 8
29397: PUSH
29398: LD_VAR 0 18
29402: PPUSH
29403: LD_INT 2
29405: PUSH
29406: LD_INT 30
29408: PUSH
29409: LD_INT 32
29411: PUSH
29412: EMPTY
29413: LIST
29414: LIST
29415: PUSH
29416: LD_INT 30
29418: PUSH
29419: LD_INT 33
29421: PUSH
29422: EMPTY
29423: LIST
29424: LIST
29425: PUSH
29426: EMPTY
29427: LIST
29428: LIST
29429: LIST
29430: PPUSH
29431: CALL_OW 72
29435: PUSH
29436: FOR_IN
29437: IFFALSE 29477
// begin if not GetBWeapon ( i ) then
29439: LD_VAR 0 8
29443: PPUSH
29444: CALL_OW 269
29448: NOT
29449: IFFALSE 29475
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
29451: LD_VAR 0 8
29455: PPUSH
29456: LD_VAR 0 8
29460: PPUSH
29461: LD_VAR 0 2
29465: PPUSH
29466: CALL 30725 0 2
29470: PPUSH
29471: CALL_OW 431
// end ;
29475: GO 29436
29477: POP
29478: POP
// end ; for i = 1 to personel do
29479: LD_ADDR_VAR 0 8
29483: PUSH
29484: DOUBLE
29485: LD_INT 1
29487: DEC
29488: ST_TO_ADDR
29489: LD_VAR 0 6
29493: PUSH
29494: FOR_TO
29495: IFFALSE 30559
// begin if i > 4 then
29497: LD_VAR 0 8
29501: PUSH
29502: LD_INT 4
29504: GREATER
29505: IFFALSE 29509
// break ;
29507: GO 30559
// case i of 1 :
29509: LD_VAR 0 8
29513: PUSH
29514: LD_INT 1
29516: DOUBLE
29517: EQUAL
29518: IFTRUE 29522
29520: GO 29602
29522: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
29523: LD_ADDR_VAR 0 12
29527: PUSH
29528: LD_VAR 0 18
29532: PPUSH
29533: LD_INT 22
29535: PUSH
29536: LD_VAR 0 16
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PUSH
29545: LD_INT 58
29547: PUSH
29548: EMPTY
29549: LIST
29550: PUSH
29551: LD_INT 2
29553: PUSH
29554: LD_INT 30
29556: PUSH
29557: LD_INT 32
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PUSH
29564: LD_INT 30
29566: PUSH
29567: LD_INT 4
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: PUSH
29574: LD_INT 30
29576: PUSH
29577: LD_INT 5
29579: PUSH
29580: EMPTY
29581: LIST
29582: LIST
29583: PUSH
29584: EMPTY
29585: LIST
29586: LIST
29587: LIST
29588: LIST
29589: PUSH
29590: EMPTY
29591: LIST
29592: LIST
29593: LIST
29594: PPUSH
29595: CALL_OW 72
29599: ST_TO_ADDR
29600: GO 29824
29602: LD_INT 2
29604: DOUBLE
29605: EQUAL
29606: IFTRUE 29610
29608: GO 29672
29610: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
29611: LD_ADDR_VAR 0 12
29615: PUSH
29616: LD_VAR 0 18
29620: PPUSH
29621: LD_INT 22
29623: PUSH
29624: LD_VAR 0 16
29628: PUSH
29629: EMPTY
29630: LIST
29631: LIST
29632: PUSH
29633: LD_INT 2
29635: PUSH
29636: LD_INT 30
29638: PUSH
29639: LD_INT 0
29641: PUSH
29642: EMPTY
29643: LIST
29644: LIST
29645: PUSH
29646: LD_INT 30
29648: PUSH
29649: LD_INT 1
29651: PUSH
29652: EMPTY
29653: LIST
29654: LIST
29655: PUSH
29656: EMPTY
29657: LIST
29658: LIST
29659: LIST
29660: PUSH
29661: EMPTY
29662: LIST
29663: LIST
29664: PPUSH
29665: CALL_OW 72
29669: ST_TO_ADDR
29670: GO 29824
29672: LD_INT 3
29674: DOUBLE
29675: EQUAL
29676: IFTRUE 29680
29678: GO 29742
29680: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
29681: LD_ADDR_VAR 0 12
29685: PUSH
29686: LD_VAR 0 18
29690: PPUSH
29691: LD_INT 22
29693: PUSH
29694: LD_VAR 0 16
29698: PUSH
29699: EMPTY
29700: LIST
29701: LIST
29702: PUSH
29703: LD_INT 2
29705: PUSH
29706: LD_INT 30
29708: PUSH
29709: LD_INT 2
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: PUSH
29716: LD_INT 30
29718: PUSH
29719: LD_INT 3
29721: PUSH
29722: EMPTY
29723: LIST
29724: LIST
29725: PUSH
29726: EMPTY
29727: LIST
29728: LIST
29729: LIST
29730: PUSH
29731: EMPTY
29732: LIST
29733: LIST
29734: PPUSH
29735: CALL_OW 72
29739: ST_TO_ADDR
29740: GO 29824
29742: LD_INT 4
29744: DOUBLE
29745: EQUAL
29746: IFTRUE 29750
29748: GO 29823
29750: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
29751: LD_ADDR_VAR 0 12
29755: PUSH
29756: LD_VAR 0 18
29760: PPUSH
29761: LD_INT 22
29763: PUSH
29764: LD_VAR 0 16
29768: PUSH
29769: EMPTY
29770: LIST
29771: LIST
29772: PUSH
29773: LD_INT 2
29775: PUSH
29776: LD_INT 30
29778: PUSH
29779: LD_INT 6
29781: PUSH
29782: EMPTY
29783: LIST
29784: LIST
29785: PUSH
29786: LD_INT 30
29788: PUSH
29789: LD_INT 7
29791: PUSH
29792: EMPTY
29793: LIST
29794: LIST
29795: PUSH
29796: LD_INT 30
29798: PUSH
29799: LD_INT 8
29801: PUSH
29802: EMPTY
29803: LIST
29804: LIST
29805: PUSH
29806: EMPTY
29807: LIST
29808: LIST
29809: LIST
29810: LIST
29811: PUSH
29812: EMPTY
29813: LIST
29814: LIST
29815: PPUSH
29816: CALL_OW 72
29820: ST_TO_ADDR
29821: GO 29824
29823: POP
// if i = 1 then
29824: LD_VAR 0 8
29828: PUSH
29829: LD_INT 1
29831: EQUAL
29832: IFFALSE 29943
// begin tmp := [ ] ;
29834: LD_ADDR_VAR 0 19
29838: PUSH
29839: EMPTY
29840: ST_TO_ADDR
// for j in f do
29841: LD_ADDR_VAR 0 9
29845: PUSH
29846: LD_VAR 0 12
29850: PUSH
29851: FOR_IN
29852: IFFALSE 29925
// if GetBType ( j ) = b_bunker then
29854: LD_VAR 0 9
29858: PPUSH
29859: CALL_OW 266
29863: PUSH
29864: LD_INT 32
29866: EQUAL
29867: IFFALSE 29894
// tmp := Insert ( tmp , 1 , j ) else
29869: LD_ADDR_VAR 0 19
29873: PUSH
29874: LD_VAR 0 19
29878: PPUSH
29879: LD_INT 1
29881: PPUSH
29882: LD_VAR 0 9
29886: PPUSH
29887: CALL_OW 2
29891: ST_TO_ADDR
29892: GO 29923
// tmp := Insert ( tmp , tmp + 1 , j ) ;
29894: LD_ADDR_VAR 0 19
29898: PUSH
29899: LD_VAR 0 19
29903: PPUSH
29904: LD_VAR 0 19
29908: PUSH
29909: LD_INT 1
29911: PLUS
29912: PPUSH
29913: LD_VAR 0 9
29917: PPUSH
29918: CALL_OW 2
29922: ST_TO_ADDR
29923: GO 29851
29925: POP
29926: POP
// if tmp then
29927: LD_VAR 0 19
29931: IFFALSE 29943
// f := tmp ;
29933: LD_ADDR_VAR 0 12
29937: PUSH
29938: LD_VAR 0 19
29942: ST_TO_ADDR
// end ; x := personel [ i ] ;
29943: LD_ADDR_VAR 0 13
29947: PUSH
29948: LD_VAR 0 6
29952: PUSH
29953: LD_VAR 0 8
29957: ARRAY
29958: ST_TO_ADDR
// if x = - 1 then
29959: LD_VAR 0 13
29963: PUSH
29964: LD_INT 1
29966: NEG
29967: EQUAL
29968: IFFALSE 30177
// begin for j in f do
29970: LD_ADDR_VAR 0 9
29974: PUSH
29975: LD_VAR 0 12
29979: PUSH
29980: FOR_IN
29981: IFFALSE 30173
// repeat InitHc ;
29983: CALL_OW 19
// if GetBType ( j ) = b_barracks then
29987: LD_VAR 0 9
29991: PPUSH
29992: CALL_OW 266
29996: PUSH
29997: LD_INT 5
29999: EQUAL
30000: IFFALSE 30070
// begin if UnitsInside ( j ) < 3 then
30002: LD_VAR 0 9
30006: PPUSH
30007: CALL_OW 313
30011: PUSH
30012: LD_INT 3
30014: LESS
30015: IFFALSE 30051
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30017: LD_INT 0
30019: PPUSH
30020: LD_INT 5
30022: PUSH
30023: LD_INT 8
30025: PUSH
30026: LD_INT 9
30028: PUSH
30029: EMPTY
30030: LIST
30031: LIST
30032: LIST
30033: PUSH
30034: LD_VAR 0 17
30038: ARRAY
30039: PPUSH
30040: LD_VAR 0 4
30044: PPUSH
30045: CALL_OW 380
30049: GO 30068
// PrepareHuman ( false , i , skill ) ;
30051: LD_INT 0
30053: PPUSH
30054: LD_VAR 0 8
30058: PPUSH
30059: LD_VAR 0 4
30063: PPUSH
30064: CALL_OW 380
// end else
30068: GO 30087
// PrepareHuman ( false , i , skill ) ;
30070: LD_INT 0
30072: PPUSH
30073: LD_VAR 0 8
30077: PPUSH
30078: LD_VAR 0 4
30082: PPUSH
30083: CALL_OW 380
// un := CreateHuman ;
30087: LD_ADDR_VAR 0 14
30091: PUSH
30092: CALL_OW 44
30096: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30097: LD_ADDR_VAR 0 7
30101: PUSH
30102: LD_VAR 0 7
30106: PPUSH
30107: LD_INT 1
30109: PPUSH
30110: LD_VAR 0 14
30114: PPUSH
30115: CALL_OW 2
30119: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30120: LD_VAR 0 14
30124: PPUSH
30125: LD_VAR 0 9
30129: PPUSH
30130: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30134: LD_VAR 0 9
30138: PPUSH
30139: CALL_OW 313
30143: PUSH
30144: LD_INT 6
30146: EQUAL
30147: PUSH
30148: LD_VAR 0 9
30152: PPUSH
30153: CALL_OW 266
30157: PUSH
30158: LD_INT 32
30160: PUSH
30161: LD_INT 31
30163: PUSH
30164: EMPTY
30165: LIST
30166: LIST
30167: IN
30168: OR
30169: IFFALSE 29983
30171: GO 29980
30173: POP
30174: POP
// end else
30175: GO 30557
// for j = 1 to x do
30177: LD_ADDR_VAR 0 9
30181: PUSH
30182: DOUBLE
30183: LD_INT 1
30185: DEC
30186: ST_TO_ADDR
30187: LD_VAR 0 13
30191: PUSH
30192: FOR_TO
30193: IFFALSE 30555
// begin InitHc ;
30195: CALL_OW 19
// if not f then
30199: LD_VAR 0 12
30203: NOT
30204: IFFALSE 30293
// begin PrepareHuman ( false , i , skill ) ;
30206: LD_INT 0
30208: PPUSH
30209: LD_VAR 0 8
30213: PPUSH
30214: LD_VAR 0 4
30218: PPUSH
30219: CALL_OW 380
// un := CreateHuman ;
30223: LD_ADDR_VAR 0 14
30227: PUSH
30228: CALL_OW 44
30232: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30233: LD_ADDR_VAR 0 7
30237: PUSH
30238: LD_VAR 0 7
30242: PPUSH
30243: LD_INT 1
30245: PPUSH
30246: LD_VAR 0 14
30250: PPUSH
30251: CALL_OW 2
30255: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30256: LD_VAR 0 14
30260: PPUSH
30261: LD_VAR 0 1
30265: PPUSH
30266: CALL_OW 250
30270: PPUSH
30271: LD_VAR 0 1
30275: PPUSH
30276: CALL_OW 251
30280: PPUSH
30281: LD_INT 10
30283: PPUSH
30284: LD_INT 0
30286: PPUSH
30287: CALL_OW 50
// continue ;
30291: GO 30192
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30293: LD_VAR 0 12
30297: PUSH
30298: LD_INT 1
30300: ARRAY
30301: PPUSH
30302: CALL_OW 313
30306: PUSH
30307: LD_VAR 0 12
30311: PUSH
30312: LD_INT 1
30314: ARRAY
30315: PPUSH
30316: CALL_OW 266
30320: PUSH
30321: LD_INT 32
30323: PUSH
30324: LD_INT 31
30326: PUSH
30327: EMPTY
30328: LIST
30329: LIST
30330: IN
30331: AND
30332: PUSH
30333: LD_VAR 0 12
30337: PUSH
30338: LD_INT 1
30340: ARRAY
30341: PPUSH
30342: CALL_OW 313
30346: PUSH
30347: LD_INT 6
30349: EQUAL
30350: OR
30351: IFFALSE 30371
// f := Delete ( f , 1 ) ;
30353: LD_ADDR_VAR 0 12
30357: PUSH
30358: LD_VAR 0 12
30362: PPUSH
30363: LD_INT 1
30365: PPUSH
30366: CALL_OW 3
30370: ST_TO_ADDR
// if not f then
30371: LD_VAR 0 12
30375: NOT
30376: IFFALSE 30394
// begin x := x + 2 ;
30378: LD_ADDR_VAR 0 13
30382: PUSH
30383: LD_VAR 0 13
30387: PUSH
30388: LD_INT 2
30390: PLUS
30391: ST_TO_ADDR
// continue ;
30392: GO 30192
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
30394: LD_VAR 0 12
30398: PUSH
30399: LD_INT 1
30401: ARRAY
30402: PPUSH
30403: CALL_OW 266
30407: PUSH
30408: LD_INT 5
30410: EQUAL
30411: IFFALSE 30485
// begin if UnitsInside ( f [ 1 ] ) < 3 then
30413: LD_VAR 0 12
30417: PUSH
30418: LD_INT 1
30420: ARRAY
30421: PPUSH
30422: CALL_OW 313
30426: PUSH
30427: LD_INT 3
30429: LESS
30430: IFFALSE 30466
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30432: LD_INT 0
30434: PPUSH
30435: LD_INT 5
30437: PUSH
30438: LD_INT 8
30440: PUSH
30441: LD_INT 9
30443: PUSH
30444: EMPTY
30445: LIST
30446: LIST
30447: LIST
30448: PUSH
30449: LD_VAR 0 17
30453: ARRAY
30454: PPUSH
30455: LD_VAR 0 4
30459: PPUSH
30460: CALL_OW 380
30464: GO 30483
// PrepareHuman ( false , i , skill ) ;
30466: LD_INT 0
30468: PPUSH
30469: LD_VAR 0 8
30473: PPUSH
30474: LD_VAR 0 4
30478: PPUSH
30479: CALL_OW 380
// end else
30483: GO 30502
// PrepareHuman ( false , i , skill ) ;
30485: LD_INT 0
30487: PPUSH
30488: LD_VAR 0 8
30492: PPUSH
30493: LD_VAR 0 4
30497: PPUSH
30498: CALL_OW 380
// un := CreateHuman ;
30502: LD_ADDR_VAR 0 14
30506: PUSH
30507: CALL_OW 44
30511: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30512: LD_ADDR_VAR 0 7
30516: PUSH
30517: LD_VAR 0 7
30521: PPUSH
30522: LD_INT 1
30524: PPUSH
30525: LD_VAR 0 14
30529: PPUSH
30530: CALL_OW 2
30534: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
30535: LD_VAR 0 14
30539: PPUSH
30540: LD_VAR 0 12
30544: PUSH
30545: LD_INT 1
30547: ARRAY
30548: PPUSH
30549: CALL_OW 52
// end ;
30553: GO 30192
30555: POP
30556: POP
// end ;
30557: GO 29494
30559: POP
30560: POP
// result := result ^ buildings ;
30561: LD_ADDR_VAR 0 7
30565: PUSH
30566: LD_VAR 0 7
30570: PUSH
30571: LD_VAR 0 18
30575: ADD
30576: ST_TO_ADDR
// end else
30577: GO 30720
// begin for i = 1 to personel do
30579: LD_ADDR_VAR 0 8
30583: PUSH
30584: DOUBLE
30585: LD_INT 1
30587: DEC
30588: ST_TO_ADDR
30589: LD_VAR 0 6
30593: PUSH
30594: FOR_TO
30595: IFFALSE 30718
// begin if i > 4 then
30597: LD_VAR 0 8
30601: PUSH
30602: LD_INT 4
30604: GREATER
30605: IFFALSE 30609
// break ;
30607: GO 30718
// x := personel [ i ] ;
30609: LD_ADDR_VAR 0 13
30613: PUSH
30614: LD_VAR 0 6
30618: PUSH
30619: LD_VAR 0 8
30623: ARRAY
30624: ST_TO_ADDR
// if x = - 1 then
30625: LD_VAR 0 13
30629: PUSH
30630: LD_INT 1
30632: NEG
30633: EQUAL
30634: IFFALSE 30638
// continue ;
30636: GO 30594
// PrepareHuman ( false , i , skill ) ;
30638: LD_INT 0
30640: PPUSH
30641: LD_VAR 0 8
30645: PPUSH
30646: LD_VAR 0 4
30650: PPUSH
30651: CALL_OW 380
// un := CreateHuman ;
30655: LD_ADDR_VAR 0 14
30659: PUSH
30660: CALL_OW 44
30664: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30665: LD_VAR 0 14
30669: PPUSH
30670: LD_VAR 0 1
30674: PPUSH
30675: CALL_OW 250
30679: PPUSH
30680: LD_VAR 0 1
30684: PPUSH
30685: CALL_OW 251
30689: PPUSH
30690: LD_INT 10
30692: PPUSH
30693: LD_INT 0
30695: PPUSH
30696: CALL_OW 50
// result := result ^ un ;
30700: LD_ADDR_VAR 0 7
30704: PUSH
30705: LD_VAR 0 7
30709: PUSH
30710: LD_VAR 0 14
30714: ADD
30715: ST_TO_ADDR
// end ;
30716: GO 30594
30718: POP
30719: POP
// end ; end ;
30720: LD_VAR 0 7
30724: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
30725: LD_INT 0
30727: PPUSH
30728: PPUSH
30729: PPUSH
30730: PPUSH
30731: PPUSH
30732: PPUSH
30733: PPUSH
30734: PPUSH
30735: PPUSH
30736: PPUSH
30737: PPUSH
30738: PPUSH
30739: PPUSH
30740: PPUSH
30741: PPUSH
30742: PPUSH
// result := false ;
30743: LD_ADDR_VAR 0 3
30747: PUSH
30748: LD_INT 0
30750: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
30751: LD_VAR 0 1
30755: NOT
30756: PUSH
30757: LD_VAR 0 1
30761: PPUSH
30762: CALL_OW 266
30766: PUSH
30767: LD_INT 32
30769: PUSH
30770: LD_INT 33
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: IN
30777: NOT
30778: OR
30779: IFFALSE 30783
// exit ;
30781: GO 31892
// nat := GetNation ( tower ) ;
30783: LD_ADDR_VAR 0 12
30787: PUSH
30788: LD_VAR 0 1
30792: PPUSH
30793: CALL_OW 248
30797: ST_TO_ADDR
// side := GetSide ( tower ) ;
30798: LD_ADDR_VAR 0 16
30802: PUSH
30803: LD_VAR 0 1
30807: PPUSH
30808: CALL_OW 255
30812: ST_TO_ADDR
// x := GetX ( tower ) ;
30813: LD_ADDR_VAR 0 10
30817: PUSH
30818: LD_VAR 0 1
30822: PPUSH
30823: CALL_OW 250
30827: ST_TO_ADDR
// y := GetY ( tower ) ;
30828: LD_ADDR_VAR 0 11
30832: PUSH
30833: LD_VAR 0 1
30837: PPUSH
30838: CALL_OW 251
30842: ST_TO_ADDR
// if not x or not y then
30843: LD_VAR 0 10
30847: NOT
30848: PUSH
30849: LD_VAR 0 11
30853: NOT
30854: OR
30855: IFFALSE 30859
// exit ;
30857: GO 31892
// weapon := 0 ;
30859: LD_ADDR_VAR 0 18
30863: PUSH
30864: LD_INT 0
30866: ST_TO_ADDR
// fac_list := [ ] ;
30867: LD_ADDR_VAR 0 17
30871: PUSH
30872: EMPTY
30873: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
30874: LD_ADDR_VAR 0 6
30878: PUSH
30879: LD_VAR 0 1
30883: PPUSH
30884: CALL_OW 274
30888: PPUSH
30889: LD_VAR 0 2
30893: PPUSH
30894: LD_INT 0
30896: PPUSH
30897: CALL 28463 0 3
30901: PPUSH
30902: LD_INT 30
30904: PUSH
30905: LD_INT 3
30907: PUSH
30908: EMPTY
30909: LIST
30910: LIST
30911: PPUSH
30912: CALL_OW 72
30916: ST_TO_ADDR
// if not factories then
30917: LD_VAR 0 6
30921: NOT
30922: IFFALSE 30926
// exit ;
30924: GO 31892
// for i in factories do
30926: LD_ADDR_VAR 0 8
30930: PUSH
30931: LD_VAR 0 6
30935: PUSH
30936: FOR_IN
30937: IFFALSE 30962
// fac_list := fac_list union AvailableWeaponList ( i ) ;
30939: LD_ADDR_VAR 0 17
30943: PUSH
30944: LD_VAR 0 17
30948: PUSH
30949: LD_VAR 0 8
30953: PPUSH
30954: CALL_OW 478
30958: UNION
30959: ST_TO_ADDR
30960: GO 30936
30962: POP
30963: POP
// if not fac_list then
30964: LD_VAR 0 17
30968: NOT
30969: IFFALSE 30973
// exit ;
30971: GO 31892
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
30973: LD_ADDR_VAR 0 5
30977: PUSH
30978: LD_INT 4
30980: PUSH
30981: LD_INT 5
30983: PUSH
30984: LD_INT 9
30986: PUSH
30987: LD_INT 10
30989: PUSH
30990: LD_INT 6
30992: PUSH
30993: LD_INT 7
30995: PUSH
30996: LD_INT 11
30998: PUSH
30999: EMPTY
31000: LIST
31001: LIST
31002: LIST
31003: LIST
31004: LIST
31005: LIST
31006: LIST
31007: PUSH
31008: LD_INT 27
31010: PUSH
31011: LD_INT 28
31013: PUSH
31014: LD_INT 26
31016: PUSH
31017: LD_INT 30
31019: PUSH
31020: EMPTY
31021: LIST
31022: LIST
31023: LIST
31024: LIST
31025: PUSH
31026: LD_INT 43
31028: PUSH
31029: LD_INT 44
31031: PUSH
31032: LD_INT 46
31034: PUSH
31035: LD_INT 45
31037: PUSH
31038: LD_INT 47
31040: PUSH
31041: LD_INT 49
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: LIST
31048: LIST
31049: LIST
31050: LIST
31051: PUSH
31052: EMPTY
31053: LIST
31054: LIST
31055: LIST
31056: PUSH
31057: LD_VAR 0 12
31061: ARRAY
31062: ST_TO_ADDR
// list := list isect fac_list ;
31063: LD_ADDR_VAR 0 5
31067: PUSH
31068: LD_VAR 0 5
31072: PUSH
31073: LD_VAR 0 17
31077: ISECT
31078: ST_TO_ADDR
// if not list then
31079: LD_VAR 0 5
31083: NOT
31084: IFFALSE 31088
// exit ;
31086: GO 31892
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31088: LD_VAR 0 12
31092: PUSH
31093: LD_INT 3
31095: EQUAL
31096: PUSH
31097: LD_INT 49
31099: PUSH
31100: LD_VAR 0 5
31104: IN
31105: AND
31106: PUSH
31107: LD_INT 31
31109: PPUSH
31110: LD_VAR 0 16
31114: PPUSH
31115: CALL_OW 321
31119: PUSH
31120: LD_INT 2
31122: EQUAL
31123: AND
31124: IFFALSE 31184
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31126: LD_INT 22
31128: PUSH
31129: LD_VAR 0 16
31133: PUSH
31134: EMPTY
31135: LIST
31136: LIST
31137: PUSH
31138: LD_INT 35
31140: PUSH
31141: LD_INT 49
31143: PUSH
31144: EMPTY
31145: LIST
31146: LIST
31147: PUSH
31148: LD_INT 91
31150: PUSH
31151: LD_VAR 0 1
31155: PUSH
31156: LD_INT 10
31158: PUSH
31159: EMPTY
31160: LIST
31161: LIST
31162: LIST
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: LIST
31168: PPUSH
31169: CALL_OW 69
31173: NOT
31174: IFFALSE 31184
// weapon := ru_time_lapser ;
31176: LD_ADDR_VAR 0 18
31180: PUSH
31181: LD_INT 49
31183: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31184: LD_VAR 0 12
31188: PUSH
31189: LD_INT 1
31191: PUSH
31192: LD_INT 2
31194: PUSH
31195: EMPTY
31196: LIST
31197: LIST
31198: IN
31199: PUSH
31200: LD_INT 11
31202: PUSH
31203: LD_VAR 0 5
31207: IN
31208: PUSH
31209: LD_INT 30
31211: PUSH
31212: LD_VAR 0 5
31216: IN
31217: OR
31218: AND
31219: PUSH
31220: LD_INT 6
31222: PPUSH
31223: LD_VAR 0 16
31227: PPUSH
31228: CALL_OW 321
31232: PUSH
31233: LD_INT 2
31235: EQUAL
31236: AND
31237: IFFALSE 31402
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31239: LD_INT 22
31241: PUSH
31242: LD_VAR 0 16
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: PUSH
31251: LD_INT 2
31253: PUSH
31254: LD_INT 35
31256: PUSH
31257: LD_INT 11
31259: PUSH
31260: EMPTY
31261: LIST
31262: LIST
31263: PUSH
31264: LD_INT 35
31266: PUSH
31267: LD_INT 30
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: PUSH
31274: EMPTY
31275: LIST
31276: LIST
31277: LIST
31278: PUSH
31279: LD_INT 91
31281: PUSH
31282: LD_VAR 0 1
31286: PUSH
31287: LD_INT 18
31289: PUSH
31290: EMPTY
31291: LIST
31292: LIST
31293: LIST
31294: PUSH
31295: EMPTY
31296: LIST
31297: LIST
31298: LIST
31299: PPUSH
31300: CALL_OW 69
31304: NOT
31305: PUSH
31306: LD_INT 22
31308: PUSH
31309: LD_VAR 0 16
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: LD_INT 2
31320: PUSH
31321: LD_INT 30
31323: PUSH
31324: LD_INT 32
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: PUSH
31331: LD_INT 30
31333: PUSH
31334: LD_INT 33
31336: PUSH
31337: EMPTY
31338: LIST
31339: LIST
31340: PUSH
31341: EMPTY
31342: LIST
31343: LIST
31344: LIST
31345: PUSH
31346: LD_INT 91
31348: PUSH
31349: LD_VAR 0 1
31353: PUSH
31354: LD_INT 12
31356: PUSH
31357: EMPTY
31358: LIST
31359: LIST
31360: LIST
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: LIST
31366: PUSH
31367: EMPTY
31368: LIST
31369: PPUSH
31370: CALL_OW 69
31374: PUSH
31375: LD_INT 2
31377: GREATER
31378: AND
31379: IFFALSE 31402
// weapon := [ us_radar , ar_radar ] [ nat ] ;
31381: LD_ADDR_VAR 0 18
31385: PUSH
31386: LD_INT 11
31388: PUSH
31389: LD_INT 30
31391: PUSH
31392: EMPTY
31393: LIST
31394: LIST
31395: PUSH
31396: LD_VAR 0 12
31400: ARRAY
31401: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
31402: LD_VAR 0 18
31406: NOT
31407: PUSH
31408: LD_INT 40
31410: PPUSH
31411: LD_VAR 0 16
31415: PPUSH
31416: CALL_OW 321
31420: PUSH
31421: LD_INT 2
31423: EQUAL
31424: AND
31425: PUSH
31426: LD_INT 7
31428: PUSH
31429: LD_VAR 0 5
31433: IN
31434: PUSH
31435: LD_INT 28
31437: PUSH
31438: LD_VAR 0 5
31442: IN
31443: OR
31444: PUSH
31445: LD_INT 45
31447: PUSH
31448: LD_VAR 0 5
31452: IN
31453: OR
31454: AND
31455: IFFALSE 31709
// begin hex := GetHexInfo ( x , y ) ;
31457: LD_ADDR_VAR 0 4
31461: PUSH
31462: LD_VAR 0 10
31466: PPUSH
31467: LD_VAR 0 11
31471: PPUSH
31472: CALL_OW 546
31476: ST_TO_ADDR
// if hex [ 1 ] then
31477: LD_VAR 0 4
31481: PUSH
31482: LD_INT 1
31484: ARRAY
31485: IFFALSE 31489
// exit ;
31487: GO 31892
// height := hex [ 2 ] ;
31489: LD_ADDR_VAR 0 15
31493: PUSH
31494: LD_VAR 0 4
31498: PUSH
31499: LD_INT 2
31501: ARRAY
31502: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
31503: LD_ADDR_VAR 0 14
31507: PUSH
31508: LD_INT 0
31510: PUSH
31511: LD_INT 2
31513: PUSH
31514: LD_INT 3
31516: PUSH
31517: LD_INT 5
31519: PUSH
31520: EMPTY
31521: LIST
31522: LIST
31523: LIST
31524: LIST
31525: ST_TO_ADDR
// for i in tmp do
31526: LD_ADDR_VAR 0 8
31530: PUSH
31531: LD_VAR 0 14
31535: PUSH
31536: FOR_IN
31537: IFFALSE 31707
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
31539: LD_ADDR_VAR 0 9
31543: PUSH
31544: LD_VAR 0 10
31548: PPUSH
31549: LD_VAR 0 8
31553: PPUSH
31554: LD_INT 5
31556: PPUSH
31557: CALL_OW 272
31561: PUSH
31562: LD_VAR 0 11
31566: PPUSH
31567: LD_VAR 0 8
31571: PPUSH
31572: LD_INT 5
31574: PPUSH
31575: CALL_OW 273
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
31584: LD_VAR 0 9
31588: PUSH
31589: LD_INT 1
31591: ARRAY
31592: PPUSH
31593: LD_VAR 0 9
31597: PUSH
31598: LD_INT 2
31600: ARRAY
31601: PPUSH
31602: CALL_OW 488
31606: IFFALSE 31705
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
31608: LD_ADDR_VAR 0 4
31612: PUSH
31613: LD_VAR 0 9
31617: PUSH
31618: LD_INT 1
31620: ARRAY
31621: PPUSH
31622: LD_VAR 0 9
31626: PUSH
31627: LD_INT 2
31629: ARRAY
31630: PPUSH
31631: CALL_OW 546
31635: ST_TO_ADDR
// if hex [ 1 ] then
31636: LD_VAR 0 4
31640: PUSH
31641: LD_INT 1
31643: ARRAY
31644: IFFALSE 31648
// continue ;
31646: GO 31536
// h := hex [ 2 ] ;
31648: LD_ADDR_VAR 0 13
31652: PUSH
31653: LD_VAR 0 4
31657: PUSH
31658: LD_INT 2
31660: ARRAY
31661: ST_TO_ADDR
// if h + 7 < height then
31662: LD_VAR 0 13
31666: PUSH
31667: LD_INT 7
31669: PLUS
31670: PUSH
31671: LD_VAR 0 15
31675: LESS
31676: IFFALSE 31705
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
31678: LD_ADDR_VAR 0 18
31682: PUSH
31683: LD_INT 7
31685: PUSH
31686: LD_INT 28
31688: PUSH
31689: LD_INT 45
31691: PUSH
31692: EMPTY
31693: LIST
31694: LIST
31695: LIST
31696: PUSH
31697: LD_VAR 0 12
31701: ARRAY
31702: ST_TO_ADDR
// break ;
31703: GO 31707
// end ; end ; end ;
31705: GO 31536
31707: POP
31708: POP
// end ; if not weapon then
31709: LD_VAR 0 18
31713: NOT
31714: IFFALSE 31774
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
31716: LD_ADDR_VAR 0 5
31720: PUSH
31721: LD_VAR 0 5
31725: PUSH
31726: LD_INT 11
31728: PUSH
31729: LD_INT 30
31731: PUSH
31732: LD_INT 49
31734: PUSH
31735: EMPTY
31736: LIST
31737: LIST
31738: LIST
31739: DIFF
31740: ST_TO_ADDR
// if not list then
31741: LD_VAR 0 5
31745: NOT
31746: IFFALSE 31750
// exit ;
31748: GO 31892
// weapon := list [ rand ( 1 , list ) ] ;
31750: LD_ADDR_VAR 0 18
31754: PUSH
31755: LD_VAR 0 5
31759: PUSH
31760: LD_INT 1
31762: PPUSH
31763: LD_VAR 0 5
31767: PPUSH
31768: CALL_OW 12
31772: ARRAY
31773: ST_TO_ADDR
// end ; if weapon then
31774: LD_VAR 0 18
31778: IFFALSE 31892
// begin tmp := CostOfWeapon ( weapon ) ;
31780: LD_ADDR_VAR 0 14
31784: PUSH
31785: LD_VAR 0 18
31789: PPUSH
31790: CALL_OW 451
31794: ST_TO_ADDR
// j := GetBase ( tower ) ;
31795: LD_ADDR_VAR 0 9
31799: PUSH
31800: LD_VAR 0 1
31804: PPUSH
31805: CALL_OW 274
31809: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
31810: LD_VAR 0 9
31814: PPUSH
31815: LD_INT 1
31817: PPUSH
31818: CALL_OW 275
31822: PUSH
31823: LD_VAR 0 14
31827: PUSH
31828: LD_INT 1
31830: ARRAY
31831: GREATEREQUAL
31832: PUSH
31833: LD_VAR 0 9
31837: PPUSH
31838: LD_INT 2
31840: PPUSH
31841: CALL_OW 275
31845: PUSH
31846: LD_VAR 0 14
31850: PUSH
31851: LD_INT 2
31853: ARRAY
31854: GREATEREQUAL
31855: AND
31856: PUSH
31857: LD_VAR 0 9
31861: PPUSH
31862: LD_INT 3
31864: PPUSH
31865: CALL_OW 275
31869: PUSH
31870: LD_VAR 0 14
31874: PUSH
31875: LD_INT 3
31877: ARRAY
31878: GREATEREQUAL
31879: AND
31880: IFFALSE 31892
// result := weapon ;
31882: LD_ADDR_VAR 0 3
31886: PUSH
31887: LD_VAR 0 18
31891: ST_TO_ADDR
// end ; end ;
31892: LD_VAR 0 3
31896: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
31897: LD_INT 0
31899: PPUSH
31900: PPUSH
// result := true ;
31901: LD_ADDR_VAR 0 3
31905: PUSH
31906: LD_INT 1
31908: ST_TO_ADDR
// if array1 = array2 then
31909: LD_VAR 0 1
31913: PUSH
31914: LD_VAR 0 2
31918: EQUAL
31919: IFFALSE 31979
// begin for i = 1 to array1 do
31921: LD_ADDR_VAR 0 4
31925: PUSH
31926: DOUBLE
31927: LD_INT 1
31929: DEC
31930: ST_TO_ADDR
31931: LD_VAR 0 1
31935: PUSH
31936: FOR_TO
31937: IFFALSE 31975
// if array1 [ i ] <> array2 [ i ] then
31939: LD_VAR 0 1
31943: PUSH
31944: LD_VAR 0 4
31948: ARRAY
31949: PUSH
31950: LD_VAR 0 2
31954: PUSH
31955: LD_VAR 0 4
31959: ARRAY
31960: NONEQUAL
31961: IFFALSE 31973
// begin result := false ;
31963: LD_ADDR_VAR 0 3
31967: PUSH
31968: LD_INT 0
31970: ST_TO_ADDR
// break ;
31971: GO 31975
// end ;
31973: GO 31936
31975: POP
31976: POP
// end else
31977: GO 31987
// result := false ;
31979: LD_ADDR_VAR 0 3
31983: PUSH
31984: LD_INT 0
31986: ST_TO_ADDR
// end ;
31987: LD_VAR 0 3
31991: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
31992: LD_INT 0
31994: PPUSH
31995: PPUSH
// if not array1 or not array2 then
31996: LD_VAR 0 1
32000: NOT
32001: PUSH
32002: LD_VAR 0 2
32006: NOT
32007: OR
32008: IFFALSE 32012
// exit ;
32010: GO 32076
// result := true ;
32012: LD_ADDR_VAR 0 3
32016: PUSH
32017: LD_INT 1
32019: ST_TO_ADDR
// for i = 1 to array1 do
32020: LD_ADDR_VAR 0 4
32024: PUSH
32025: DOUBLE
32026: LD_INT 1
32028: DEC
32029: ST_TO_ADDR
32030: LD_VAR 0 1
32034: PUSH
32035: FOR_TO
32036: IFFALSE 32074
// if array1 [ i ] <> array2 [ i ] then
32038: LD_VAR 0 1
32042: PUSH
32043: LD_VAR 0 4
32047: ARRAY
32048: PUSH
32049: LD_VAR 0 2
32053: PUSH
32054: LD_VAR 0 4
32058: ARRAY
32059: NONEQUAL
32060: IFFALSE 32072
// begin result := false ;
32062: LD_ADDR_VAR 0 3
32066: PUSH
32067: LD_INT 0
32069: ST_TO_ADDR
// break ;
32070: GO 32074
// end ;
32072: GO 32035
32074: POP
32075: POP
// end ;
32076: LD_VAR 0 3
32080: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32081: LD_INT 0
32083: PPUSH
32084: PPUSH
32085: PPUSH
// pom := GetBase ( fac ) ;
32086: LD_ADDR_VAR 0 5
32090: PUSH
32091: LD_VAR 0 1
32095: PPUSH
32096: CALL_OW 274
32100: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32101: LD_ADDR_VAR 0 4
32105: PUSH
32106: LD_VAR 0 2
32110: PUSH
32111: LD_INT 1
32113: ARRAY
32114: PPUSH
32115: LD_VAR 0 2
32119: PUSH
32120: LD_INT 2
32122: ARRAY
32123: PPUSH
32124: LD_VAR 0 2
32128: PUSH
32129: LD_INT 3
32131: ARRAY
32132: PPUSH
32133: LD_VAR 0 2
32137: PUSH
32138: LD_INT 4
32140: ARRAY
32141: PPUSH
32142: CALL_OW 449
32146: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32147: LD_ADDR_VAR 0 3
32151: PUSH
32152: LD_VAR 0 5
32156: PPUSH
32157: LD_INT 1
32159: PPUSH
32160: CALL_OW 275
32164: PUSH
32165: LD_VAR 0 4
32169: PUSH
32170: LD_INT 1
32172: ARRAY
32173: GREATEREQUAL
32174: PUSH
32175: LD_VAR 0 5
32179: PPUSH
32180: LD_INT 2
32182: PPUSH
32183: CALL_OW 275
32187: PUSH
32188: LD_VAR 0 4
32192: PUSH
32193: LD_INT 2
32195: ARRAY
32196: GREATEREQUAL
32197: AND
32198: PUSH
32199: LD_VAR 0 5
32203: PPUSH
32204: LD_INT 3
32206: PPUSH
32207: CALL_OW 275
32211: PUSH
32212: LD_VAR 0 4
32216: PUSH
32217: LD_INT 3
32219: ARRAY
32220: GREATEREQUAL
32221: AND
32222: ST_TO_ADDR
// end ;
32223: LD_VAR 0 3
32227: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32228: LD_INT 0
32230: PPUSH
32231: PPUSH
32232: PPUSH
32233: PPUSH
// pom := GetBase ( building ) ;
32234: LD_ADDR_VAR 0 3
32238: PUSH
32239: LD_VAR 0 1
32243: PPUSH
32244: CALL_OW 274
32248: ST_TO_ADDR
// if not pom then
32249: LD_VAR 0 3
32253: NOT
32254: IFFALSE 32258
// exit ;
32256: GO 32428
// btype := GetBType ( building ) ;
32258: LD_ADDR_VAR 0 5
32262: PUSH
32263: LD_VAR 0 1
32267: PPUSH
32268: CALL_OW 266
32272: ST_TO_ADDR
// if btype = b_armoury then
32273: LD_VAR 0 5
32277: PUSH
32278: LD_INT 4
32280: EQUAL
32281: IFFALSE 32291
// btype := b_barracks ;
32283: LD_ADDR_VAR 0 5
32287: PUSH
32288: LD_INT 5
32290: ST_TO_ADDR
// if btype = b_depot then
32291: LD_VAR 0 5
32295: PUSH
32296: LD_INT 0
32298: EQUAL
32299: IFFALSE 32309
// btype := b_warehouse ;
32301: LD_ADDR_VAR 0 5
32305: PUSH
32306: LD_INT 1
32308: ST_TO_ADDR
// if btype = b_workshop then
32309: LD_VAR 0 5
32313: PUSH
32314: LD_INT 2
32316: EQUAL
32317: IFFALSE 32327
// btype := b_factory ;
32319: LD_ADDR_VAR 0 5
32323: PUSH
32324: LD_INT 3
32326: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32327: LD_ADDR_VAR 0 4
32331: PUSH
32332: LD_VAR 0 5
32336: PPUSH
32337: LD_VAR 0 1
32341: PPUSH
32342: CALL_OW 248
32346: PPUSH
32347: CALL_OW 450
32351: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32352: LD_ADDR_VAR 0 2
32356: PUSH
32357: LD_VAR 0 3
32361: PPUSH
32362: LD_INT 1
32364: PPUSH
32365: CALL_OW 275
32369: PUSH
32370: LD_VAR 0 4
32374: PUSH
32375: LD_INT 1
32377: ARRAY
32378: GREATEREQUAL
32379: PUSH
32380: LD_VAR 0 3
32384: PPUSH
32385: LD_INT 2
32387: PPUSH
32388: CALL_OW 275
32392: PUSH
32393: LD_VAR 0 4
32397: PUSH
32398: LD_INT 2
32400: ARRAY
32401: GREATEREQUAL
32402: AND
32403: PUSH
32404: LD_VAR 0 3
32408: PPUSH
32409: LD_INT 3
32411: PPUSH
32412: CALL_OW 275
32416: PUSH
32417: LD_VAR 0 4
32421: PUSH
32422: LD_INT 3
32424: ARRAY
32425: GREATEREQUAL
32426: AND
32427: ST_TO_ADDR
// end ;
32428: LD_VAR 0 2
32432: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
32433: LD_INT 0
32435: PPUSH
32436: PPUSH
32437: PPUSH
// pom := GetBase ( building ) ;
32438: LD_ADDR_VAR 0 4
32442: PUSH
32443: LD_VAR 0 1
32447: PPUSH
32448: CALL_OW 274
32452: ST_TO_ADDR
// if not pom then
32453: LD_VAR 0 4
32457: NOT
32458: IFFALSE 32462
// exit ;
32460: GO 32563
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32462: LD_ADDR_VAR 0 5
32466: PUSH
32467: LD_VAR 0 2
32471: PPUSH
32472: LD_VAR 0 1
32476: PPUSH
32477: CALL_OW 248
32481: PPUSH
32482: CALL_OW 450
32486: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32487: LD_ADDR_VAR 0 3
32491: PUSH
32492: LD_VAR 0 4
32496: PPUSH
32497: LD_INT 1
32499: PPUSH
32500: CALL_OW 275
32504: PUSH
32505: LD_VAR 0 5
32509: PUSH
32510: LD_INT 1
32512: ARRAY
32513: GREATEREQUAL
32514: PUSH
32515: LD_VAR 0 4
32519: PPUSH
32520: LD_INT 2
32522: PPUSH
32523: CALL_OW 275
32527: PUSH
32528: LD_VAR 0 5
32532: PUSH
32533: LD_INT 2
32535: ARRAY
32536: GREATEREQUAL
32537: AND
32538: PUSH
32539: LD_VAR 0 4
32543: PPUSH
32544: LD_INT 3
32546: PPUSH
32547: CALL_OW 275
32551: PUSH
32552: LD_VAR 0 5
32556: PUSH
32557: LD_INT 3
32559: ARRAY
32560: GREATEREQUAL
32561: AND
32562: ST_TO_ADDR
// end ;
32563: LD_VAR 0 3
32567: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
32568: LD_INT 0
32570: PPUSH
32571: PPUSH
32572: PPUSH
32573: PPUSH
32574: PPUSH
32575: PPUSH
32576: PPUSH
32577: PPUSH
32578: PPUSH
32579: PPUSH
32580: PPUSH
// result := false ;
32581: LD_ADDR_VAR 0 8
32585: PUSH
32586: LD_INT 0
32588: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
32589: LD_VAR 0 5
32593: NOT
32594: PUSH
32595: LD_VAR 0 1
32599: NOT
32600: OR
32601: PUSH
32602: LD_VAR 0 2
32606: NOT
32607: OR
32608: PUSH
32609: LD_VAR 0 3
32613: NOT
32614: OR
32615: IFFALSE 32619
// exit ;
32617: GO 33433
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
32619: LD_ADDR_VAR 0 14
32623: PUSH
32624: LD_VAR 0 1
32628: PPUSH
32629: LD_VAR 0 2
32633: PPUSH
32634: LD_VAR 0 3
32638: PPUSH
32639: LD_VAR 0 4
32643: PPUSH
32644: LD_VAR 0 5
32648: PUSH
32649: LD_INT 1
32651: ARRAY
32652: PPUSH
32653: CALL_OW 248
32657: PPUSH
32658: LD_INT 0
32660: PPUSH
32661: CALL 34670 0 6
32665: ST_TO_ADDR
// if not hexes then
32666: LD_VAR 0 14
32670: NOT
32671: IFFALSE 32675
// exit ;
32673: GO 33433
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32675: LD_ADDR_VAR 0 17
32679: PUSH
32680: LD_VAR 0 5
32684: PPUSH
32685: LD_INT 22
32687: PUSH
32688: LD_VAR 0 13
32692: PPUSH
32693: CALL_OW 255
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 2
32704: PUSH
32705: LD_INT 30
32707: PUSH
32708: LD_INT 0
32710: PUSH
32711: EMPTY
32712: LIST
32713: LIST
32714: PUSH
32715: LD_INT 30
32717: PUSH
32718: LD_INT 1
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: EMPTY
32726: LIST
32727: LIST
32728: LIST
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: PPUSH
32734: CALL_OW 72
32738: ST_TO_ADDR
// for i = 1 to hexes do
32739: LD_ADDR_VAR 0 9
32743: PUSH
32744: DOUBLE
32745: LD_INT 1
32747: DEC
32748: ST_TO_ADDR
32749: LD_VAR 0 14
32753: PUSH
32754: FOR_TO
32755: IFFALSE 33431
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32757: LD_ADDR_VAR 0 13
32761: PUSH
32762: LD_VAR 0 14
32766: PUSH
32767: LD_VAR 0 9
32771: ARRAY
32772: PUSH
32773: LD_INT 1
32775: ARRAY
32776: PPUSH
32777: LD_VAR 0 14
32781: PUSH
32782: LD_VAR 0 9
32786: ARRAY
32787: PUSH
32788: LD_INT 2
32790: ARRAY
32791: PPUSH
32792: CALL_OW 428
32796: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
32797: LD_VAR 0 14
32801: PUSH
32802: LD_VAR 0 9
32806: ARRAY
32807: PUSH
32808: LD_INT 1
32810: ARRAY
32811: PPUSH
32812: LD_VAR 0 14
32816: PUSH
32817: LD_VAR 0 9
32821: ARRAY
32822: PUSH
32823: LD_INT 2
32825: ARRAY
32826: PPUSH
32827: CALL_OW 351
32831: PUSH
32832: LD_VAR 0 14
32836: PUSH
32837: LD_VAR 0 9
32841: ARRAY
32842: PUSH
32843: LD_INT 1
32845: ARRAY
32846: PPUSH
32847: LD_VAR 0 14
32851: PUSH
32852: LD_VAR 0 9
32856: ARRAY
32857: PUSH
32858: LD_INT 2
32860: ARRAY
32861: PPUSH
32862: CALL_OW 488
32866: NOT
32867: OR
32868: PUSH
32869: LD_VAR 0 13
32873: PPUSH
32874: CALL_OW 247
32878: PUSH
32879: LD_INT 3
32881: EQUAL
32882: OR
32883: IFFALSE 32889
// exit ;
32885: POP
32886: POP
32887: GO 33433
// if not tmp then
32889: LD_VAR 0 13
32893: NOT
32894: IFFALSE 32898
// continue ;
32896: GO 32754
// result := true ;
32898: LD_ADDR_VAR 0 8
32902: PUSH
32903: LD_INT 1
32905: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
32906: LD_VAR 0 6
32910: PUSH
32911: LD_VAR 0 13
32915: PPUSH
32916: CALL_OW 247
32920: PUSH
32921: LD_INT 2
32923: EQUAL
32924: AND
32925: PUSH
32926: LD_VAR 0 13
32930: PPUSH
32931: CALL_OW 263
32935: PUSH
32936: LD_INT 1
32938: EQUAL
32939: AND
32940: IFFALSE 33104
// begin if IsDrivenBy ( tmp ) then
32942: LD_VAR 0 13
32946: PPUSH
32947: CALL_OW 311
32951: IFFALSE 32955
// continue ;
32953: GO 32754
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
32955: LD_VAR 0 6
32959: PPUSH
32960: LD_INT 3
32962: PUSH
32963: LD_INT 60
32965: PUSH
32966: EMPTY
32967: LIST
32968: PUSH
32969: EMPTY
32970: LIST
32971: LIST
32972: PUSH
32973: LD_INT 3
32975: PUSH
32976: LD_INT 55
32978: PUSH
32979: EMPTY
32980: LIST
32981: PUSH
32982: EMPTY
32983: LIST
32984: LIST
32985: PUSH
32986: EMPTY
32987: LIST
32988: LIST
32989: PPUSH
32990: CALL_OW 72
32994: IFFALSE 33102
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
32996: LD_ADDR_VAR 0 18
33000: PUSH
33001: LD_VAR 0 6
33005: PPUSH
33006: LD_INT 3
33008: PUSH
33009: LD_INT 60
33011: PUSH
33012: EMPTY
33013: LIST
33014: PUSH
33015: EMPTY
33016: LIST
33017: LIST
33018: PUSH
33019: LD_INT 3
33021: PUSH
33022: LD_INT 55
33024: PUSH
33025: EMPTY
33026: LIST
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: PUSH
33032: EMPTY
33033: LIST
33034: LIST
33035: PPUSH
33036: CALL_OW 72
33040: PUSH
33041: LD_INT 1
33043: ARRAY
33044: ST_TO_ADDR
// if IsInUnit ( driver ) then
33045: LD_VAR 0 18
33049: PPUSH
33050: CALL_OW 310
33054: IFFALSE 33065
// ComExit ( driver ) ;
33056: LD_VAR 0 18
33060: PPUSH
33061: CALL 57854 0 1
// AddComEnterUnit ( driver , tmp ) ;
33065: LD_VAR 0 18
33069: PPUSH
33070: LD_VAR 0 13
33074: PPUSH
33075: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
33079: LD_VAR 0 18
33083: PPUSH
33084: LD_VAR 0 7
33088: PPUSH
33089: CALL_OW 173
// AddComExitVehicle ( driver ) ;
33093: LD_VAR 0 18
33097: PPUSH
33098: CALL_OW 181
// end ; continue ;
33102: GO 32754
// end ; if not cleaners or not tmp in cleaners then
33104: LD_VAR 0 6
33108: NOT
33109: PUSH
33110: LD_VAR 0 13
33114: PUSH
33115: LD_VAR 0 6
33119: IN
33120: NOT
33121: OR
33122: IFFALSE 33429
// begin if dep then
33124: LD_VAR 0 17
33128: IFFALSE 33264
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33130: LD_ADDR_VAR 0 16
33134: PUSH
33135: LD_VAR 0 17
33139: PUSH
33140: LD_INT 1
33142: ARRAY
33143: PPUSH
33144: CALL_OW 250
33148: PPUSH
33149: LD_VAR 0 17
33153: PUSH
33154: LD_INT 1
33156: ARRAY
33157: PPUSH
33158: CALL_OW 254
33162: PPUSH
33163: LD_INT 5
33165: PPUSH
33166: CALL_OW 272
33170: PUSH
33171: LD_VAR 0 17
33175: PUSH
33176: LD_INT 1
33178: ARRAY
33179: PPUSH
33180: CALL_OW 251
33184: PPUSH
33185: LD_VAR 0 17
33189: PUSH
33190: LD_INT 1
33192: ARRAY
33193: PPUSH
33194: CALL_OW 254
33198: PPUSH
33199: LD_INT 5
33201: PPUSH
33202: CALL_OW 273
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33211: LD_VAR 0 16
33215: PUSH
33216: LD_INT 1
33218: ARRAY
33219: PPUSH
33220: LD_VAR 0 16
33224: PUSH
33225: LD_INT 2
33227: ARRAY
33228: PPUSH
33229: CALL_OW 488
33233: IFFALSE 33264
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33235: LD_VAR 0 13
33239: PPUSH
33240: LD_VAR 0 16
33244: PUSH
33245: LD_INT 1
33247: ARRAY
33248: PPUSH
33249: LD_VAR 0 16
33253: PUSH
33254: LD_INT 2
33256: ARRAY
33257: PPUSH
33258: CALL_OW 111
// continue ;
33262: GO 32754
// end ; end ; r := GetDir ( tmp ) ;
33264: LD_ADDR_VAR 0 15
33268: PUSH
33269: LD_VAR 0 13
33273: PPUSH
33274: CALL_OW 254
33278: ST_TO_ADDR
// if r = 5 then
33279: LD_VAR 0 15
33283: PUSH
33284: LD_INT 5
33286: EQUAL
33287: IFFALSE 33297
// r := 0 ;
33289: LD_ADDR_VAR 0 15
33293: PUSH
33294: LD_INT 0
33296: ST_TO_ADDR
// for j = r to 5 do
33297: LD_ADDR_VAR 0 10
33301: PUSH
33302: DOUBLE
33303: LD_VAR 0 15
33307: DEC
33308: ST_TO_ADDR
33309: LD_INT 5
33311: PUSH
33312: FOR_TO
33313: IFFALSE 33427
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33315: LD_ADDR_VAR 0 11
33319: PUSH
33320: LD_VAR 0 13
33324: PPUSH
33325: CALL_OW 250
33329: PPUSH
33330: LD_VAR 0 10
33334: PPUSH
33335: LD_INT 2
33337: PPUSH
33338: CALL_OW 272
33342: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33343: LD_ADDR_VAR 0 12
33347: PUSH
33348: LD_VAR 0 13
33352: PPUSH
33353: CALL_OW 251
33357: PPUSH
33358: LD_VAR 0 10
33362: PPUSH
33363: LD_INT 2
33365: PPUSH
33366: CALL_OW 273
33370: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33371: LD_VAR 0 11
33375: PPUSH
33376: LD_VAR 0 12
33380: PPUSH
33381: CALL_OW 488
33385: PUSH
33386: LD_VAR 0 11
33390: PPUSH
33391: LD_VAR 0 12
33395: PPUSH
33396: CALL_OW 428
33400: NOT
33401: AND
33402: IFFALSE 33425
// begin ComMoveXY ( tmp , _x , _y ) ;
33404: LD_VAR 0 13
33408: PPUSH
33409: LD_VAR 0 11
33413: PPUSH
33414: LD_VAR 0 12
33418: PPUSH
33419: CALL_OW 111
// break ;
33423: GO 33427
// end ; end ;
33425: GO 33312
33427: POP
33428: POP
// end ; end ;
33429: GO 32754
33431: POP
33432: POP
// end ;
33433: LD_VAR 0 8
33437: RET
// export function BuildingTechInvented ( side , btype ) ; begin
33438: LD_INT 0
33440: PPUSH
// result := true ;
33441: LD_ADDR_VAR 0 3
33445: PUSH
33446: LD_INT 1
33448: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
33449: LD_VAR 0 2
33453: PUSH
33454: LD_INT 24
33456: DOUBLE
33457: EQUAL
33458: IFTRUE 33468
33460: LD_INT 33
33462: DOUBLE
33463: EQUAL
33464: IFTRUE 33468
33466: GO 33493
33468: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
33469: LD_ADDR_VAR 0 3
33473: PUSH
33474: LD_INT 32
33476: PPUSH
33477: LD_VAR 0 1
33481: PPUSH
33482: CALL_OW 321
33486: PUSH
33487: LD_INT 2
33489: EQUAL
33490: ST_TO_ADDR
33491: GO 33813
33493: LD_INT 20
33495: DOUBLE
33496: EQUAL
33497: IFTRUE 33501
33499: GO 33526
33501: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
33502: LD_ADDR_VAR 0 3
33506: PUSH
33507: LD_INT 6
33509: PPUSH
33510: LD_VAR 0 1
33514: PPUSH
33515: CALL_OW 321
33519: PUSH
33520: LD_INT 2
33522: EQUAL
33523: ST_TO_ADDR
33524: GO 33813
33526: LD_INT 22
33528: DOUBLE
33529: EQUAL
33530: IFTRUE 33540
33532: LD_INT 36
33534: DOUBLE
33535: EQUAL
33536: IFTRUE 33540
33538: GO 33565
33540: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
33541: LD_ADDR_VAR 0 3
33545: PUSH
33546: LD_INT 15
33548: PPUSH
33549: LD_VAR 0 1
33553: PPUSH
33554: CALL_OW 321
33558: PUSH
33559: LD_INT 2
33561: EQUAL
33562: ST_TO_ADDR
33563: GO 33813
33565: LD_INT 30
33567: DOUBLE
33568: EQUAL
33569: IFTRUE 33573
33571: GO 33598
33573: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
33574: LD_ADDR_VAR 0 3
33578: PUSH
33579: LD_INT 20
33581: PPUSH
33582: LD_VAR 0 1
33586: PPUSH
33587: CALL_OW 321
33591: PUSH
33592: LD_INT 2
33594: EQUAL
33595: ST_TO_ADDR
33596: GO 33813
33598: LD_INT 28
33600: DOUBLE
33601: EQUAL
33602: IFTRUE 33612
33604: LD_INT 21
33606: DOUBLE
33607: EQUAL
33608: IFTRUE 33612
33610: GO 33637
33612: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
33613: LD_ADDR_VAR 0 3
33617: PUSH
33618: LD_INT 21
33620: PPUSH
33621: LD_VAR 0 1
33625: PPUSH
33626: CALL_OW 321
33630: PUSH
33631: LD_INT 2
33633: EQUAL
33634: ST_TO_ADDR
33635: GO 33813
33637: LD_INT 16
33639: DOUBLE
33640: EQUAL
33641: IFTRUE 33645
33643: GO 33672
33645: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
33646: LD_ADDR_VAR 0 3
33650: PUSH
33651: LD_EXP 91
33655: PPUSH
33656: LD_VAR 0 1
33660: PPUSH
33661: CALL_OW 321
33665: PUSH
33666: LD_INT 2
33668: EQUAL
33669: ST_TO_ADDR
33670: GO 33813
33672: LD_INT 19
33674: DOUBLE
33675: EQUAL
33676: IFTRUE 33686
33678: LD_INT 23
33680: DOUBLE
33681: EQUAL
33682: IFTRUE 33686
33684: GO 33713
33686: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
33687: LD_ADDR_VAR 0 3
33691: PUSH
33692: LD_EXP 90
33696: PPUSH
33697: LD_VAR 0 1
33701: PPUSH
33702: CALL_OW 321
33706: PUSH
33707: LD_INT 2
33709: EQUAL
33710: ST_TO_ADDR
33711: GO 33813
33713: LD_INT 17
33715: DOUBLE
33716: EQUAL
33717: IFTRUE 33721
33719: GO 33746
33721: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
33722: LD_ADDR_VAR 0 3
33726: PUSH
33727: LD_INT 39
33729: PPUSH
33730: LD_VAR 0 1
33734: PPUSH
33735: CALL_OW 321
33739: PUSH
33740: LD_INT 2
33742: EQUAL
33743: ST_TO_ADDR
33744: GO 33813
33746: LD_INT 18
33748: DOUBLE
33749: EQUAL
33750: IFTRUE 33754
33752: GO 33779
33754: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
33755: LD_ADDR_VAR 0 3
33759: PUSH
33760: LD_INT 40
33762: PPUSH
33763: LD_VAR 0 1
33767: PPUSH
33768: CALL_OW 321
33772: PUSH
33773: LD_INT 2
33775: EQUAL
33776: ST_TO_ADDR
33777: GO 33813
33779: LD_INT 27
33781: DOUBLE
33782: EQUAL
33783: IFTRUE 33787
33785: GO 33812
33787: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
33788: LD_ADDR_VAR 0 3
33792: PUSH
33793: LD_INT 35
33795: PPUSH
33796: LD_VAR 0 1
33800: PPUSH
33801: CALL_OW 321
33805: PUSH
33806: LD_INT 2
33808: EQUAL
33809: ST_TO_ADDR
33810: GO 33813
33812: POP
// end ;
33813: LD_VAR 0 3
33817: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
33818: LD_INT 0
33820: PPUSH
33821: PPUSH
33822: PPUSH
33823: PPUSH
33824: PPUSH
33825: PPUSH
33826: PPUSH
33827: PPUSH
33828: PPUSH
33829: PPUSH
33830: PPUSH
// result := false ;
33831: LD_ADDR_VAR 0 6
33835: PUSH
33836: LD_INT 0
33838: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
33839: LD_VAR 0 1
33843: NOT
33844: PUSH
33845: LD_VAR 0 1
33849: PPUSH
33850: CALL_OW 266
33854: PUSH
33855: LD_INT 0
33857: PUSH
33858: LD_INT 1
33860: PUSH
33861: EMPTY
33862: LIST
33863: LIST
33864: IN
33865: NOT
33866: OR
33867: PUSH
33868: LD_VAR 0 2
33872: NOT
33873: OR
33874: PUSH
33875: LD_VAR 0 5
33879: PUSH
33880: LD_INT 0
33882: PUSH
33883: LD_INT 1
33885: PUSH
33886: LD_INT 2
33888: PUSH
33889: LD_INT 3
33891: PUSH
33892: LD_INT 4
33894: PUSH
33895: LD_INT 5
33897: PUSH
33898: EMPTY
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: IN
33906: NOT
33907: OR
33908: PUSH
33909: LD_VAR 0 3
33913: PPUSH
33914: LD_VAR 0 4
33918: PPUSH
33919: CALL_OW 488
33923: NOT
33924: OR
33925: IFFALSE 33929
// exit ;
33927: GO 34665
// side := GetSide ( depot ) ;
33929: LD_ADDR_VAR 0 9
33933: PUSH
33934: LD_VAR 0 1
33938: PPUSH
33939: CALL_OW 255
33943: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
33944: LD_VAR 0 9
33948: PPUSH
33949: LD_VAR 0 2
33953: PPUSH
33954: CALL 33438 0 2
33958: NOT
33959: IFFALSE 33963
// exit ;
33961: GO 34665
// pom := GetBase ( depot ) ;
33963: LD_ADDR_VAR 0 10
33967: PUSH
33968: LD_VAR 0 1
33972: PPUSH
33973: CALL_OW 274
33977: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
33978: LD_ADDR_VAR 0 11
33982: PUSH
33983: LD_VAR 0 2
33987: PPUSH
33988: LD_VAR 0 1
33992: PPUSH
33993: CALL_OW 248
33997: PPUSH
33998: CALL_OW 450
34002: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
34003: LD_VAR 0 10
34007: PPUSH
34008: LD_INT 1
34010: PPUSH
34011: CALL_OW 275
34015: PUSH
34016: LD_VAR 0 11
34020: PUSH
34021: LD_INT 1
34023: ARRAY
34024: GREATEREQUAL
34025: PUSH
34026: LD_VAR 0 10
34030: PPUSH
34031: LD_INT 2
34033: PPUSH
34034: CALL_OW 275
34038: PUSH
34039: LD_VAR 0 11
34043: PUSH
34044: LD_INT 2
34046: ARRAY
34047: GREATEREQUAL
34048: AND
34049: PUSH
34050: LD_VAR 0 10
34054: PPUSH
34055: LD_INT 3
34057: PPUSH
34058: CALL_OW 275
34062: PUSH
34063: LD_VAR 0 11
34067: PUSH
34068: LD_INT 3
34070: ARRAY
34071: GREATEREQUAL
34072: AND
34073: NOT
34074: IFFALSE 34078
// exit ;
34076: GO 34665
// if GetBType ( depot ) = b_depot then
34078: LD_VAR 0 1
34082: PPUSH
34083: CALL_OW 266
34087: PUSH
34088: LD_INT 0
34090: EQUAL
34091: IFFALSE 34103
// dist := 28 else
34093: LD_ADDR_VAR 0 14
34097: PUSH
34098: LD_INT 28
34100: ST_TO_ADDR
34101: GO 34111
// dist := 36 ;
34103: LD_ADDR_VAR 0 14
34107: PUSH
34108: LD_INT 36
34110: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
34111: LD_VAR 0 1
34115: PPUSH
34116: LD_VAR 0 3
34120: PPUSH
34121: LD_VAR 0 4
34125: PPUSH
34126: CALL_OW 297
34130: PUSH
34131: LD_VAR 0 14
34135: GREATER
34136: IFFALSE 34140
// exit ;
34138: GO 34665
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
34140: LD_ADDR_VAR 0 12
34144: PUSH
34145: LD_VAR 0 2
34149: PPUSH
34150: LD_VAR 0 3
34154: PPUSH
34155: LD_VAR 0 4
34159: PPUSH
34160: LD_VAR 0 5
34164: PPUSH
34165: LD_VAR 0 1
34169: PPUSH
34170: CALL_OW 248
34174: PPUSH
34175: LD_INT 0
34177: PPUSH
34178: CALL 34670 0 6
34182: ST_TO_ADDR
// if not hexes then
34183: LD_VAR 0 12
34187: NOT
34188: IFFALSE 34192
// exit ;
34190: GO 34665
// hex := GetHexInfo ( x , y ) ;
34192: LD_ADDR_VAR 0 15
34196: PUSH
34197: LD_VAR 0 3
34201: PPUSH
34202: LD_VAR 0 4
34206: PPUSH
34207: CALL_OW 546
34211: ST_TO_ADDR
// if hex [ 1 ] then
34212: LD_VAR 0 15
34216: PUSH
34217: LD_INT 1
34219: ARRAY
34220: IFFALSE 34224
// exit ;
34222: GO 34665
// height := hex [ 2 ] ;
34224: LD_ADDR_VAR 0 13
34228: PUSH
34229: LD_VAR 0 15
34233: PUSH
34234: LD_INT 2
34236: ARRAY
34237: ST_TO_ADDR
// for i = 1 to hexes do
34238: LD_ADDR_VAR 0 7
34242: PUSH
34243: DOUBLE
34244: LD_INT 1
34246: DEC
34247: ST_TO_ADDR
34248: LD_VAR 0 12
34252: PUSH
34253: FOR_TO
34254: IFFALSE 34584
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
34256: LD_VAR 0 12
34260: PUSH
34261: LD_VAR 0 7
34265: ARRAY
34266: PUSH
34267: LD_INT 1
34269: ARRAY
34270: PPUSH
34271: LD_VAR 0 12
34275: PUSH
34276: LD_VAR 0 7
34280: ARRAY
34281: PUSH
34282: LD_INT 2
34284: ARRAY
34285: PPUSH
34286: CALL_OW 488
34290: NOT
34291: PUSH
34292: LD_VAR 0 12
34296: PUSH
34297: LD_VAR 0 7
34301: ARRAY
34302: PUSH
34303: LD_INT 1
34305: ARRAY
34306: PPUSH
34307: LD_VAR 0 12
34311: PUSH
34312: LD_VAR 0 7
34316: ARRAY
34317: PUSH
34318: LD_INT 2
34320: ARRAY
34321: PPUSH
34322: CALL_OW 428
34326: PUSH
34327: LD_INT 0
34329: GREATER
34330: OR
34331: PUSH
34332: LD_VAR 0 12
34336: PUSH
34337: LD_VAR 0 7
34341: ARRAY
34342: PUSH
34343: LD_INT 1
34345: ARRAY
34346: PPUSH
34347: LD_VAR 0 12
34351: PUSH
34352: LD_VAR 0 7
34356: ARRAY
34357: PUSH
34358: LD_INT 2
34360: ARRAY
34361: PPUSH
34362: CALL_OW 351
34366: OR
34367: IFFALSE 34373
// exit ;
34369: POP
34370: POP
34371: GO 34665
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34373: LD_ADDR_VAR 0 8
34377: PUSH
34378: LD_VAR 0 12
34382: PUSH
34383: LD_VAR 0 7
34387: ARRAY
34388: PUSH
34389: LD_INT 1
34391: ARRAY
34392: PPUSH
34393: LD_VAR 0 12
34397: PUSH
34398: LD_VAR 0 7
34402: ARRAY
34403: PUSH
34404: LD_INT 2
34406: ARRAY
34407: PPUSH
34408: CALL_OW 546
34412: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
34413: LD_VAR 0 8
34417: PUSH
34418: LD_INT 1
34420: ARRAY
34421: PUSH
34422: LD_VAR 0 8
34426: PUSH
34427: LD_INT 2
34429: ARRAY
34430: PUSH
34431: LD_VAR 0 13
34435: PUSH
34436: LD_INT 2
34438: PLUS
34439: GREATER
34440: OR
34441: PUSH
34442: LD_VAR 0 8
34446: PUSH
34447: LD_INT 2
34449: ARRAY
34450: PUSH
34451: LD_VAR 0 13
34455: PUSH
34456: LD_INT 2
34458: MINUS
34459: LESS
34460: OR
34461: PUSH
34462: LD_VAR 0 8
34466: PUSH
34467: LD_INT 3
34469: ARRAY
34470: PUSH
34471: LD_INT 0
34473: PUSH
34474: LD_INT 8
34476: PUSH
34477: LD_INT 9
34479: PUSH
34480: LD_INT 10
34482: PUSH
34483: LD_INT 11
34485: PUSH
34486: LD_INT 12
34488: PUSH
34489: LD_INT 13
34491: PUSH
34492: LD_INT 16
34494: PUSH
34495: LD_INT 17
34497: PUSH
34498: LD_INT 18
34500: PUSH
34501: LD_INT 19
34503: PUSH
34504: LD_INT 20
34506: PUSH
34507: LD_INT 21
34509: PUSH
34510: EMPTY
34511: LIST
34512: LIST
34513: LIST
34514: LIST
34515: LIST
34516: LIST
34517: LIST
34518: LIST
34519: LIST
34520: LIST
34521: LIST
34522: LIST
34523: LIST
34524: IN
34525: NOT
34526: OR
34527: PUSH
34528: LD_VAR 0 8
34532: PUSH
34533: LD_INT 5
34535: ARRAY
34536: NOT
34537: OR
34538: PUSH
34539: LD_VAR 0 8
34543: PUSH
34544: LD_INT 6
34546: ARRAY
34547: PUSH
34548: LD_INT 1
34550: PUSH
34551: LD_INT 2
34553: PUSH
34554: LD_INT 7
34556: PUSH
34557: LD_INT 9
34559: PUSH
34560: LD_INT 10
34562: PUSH
34563: LD_INT 11
34565: PUSH
34566: EMPTY
34567: LIST
34568: LIST
34569: LIST
34570: LIST
34571: LIST
34572: LIST
34573: IN
34574: NOT
34575: OR
34576: IFFALSE 34582
// exit ;
34578: POP
34579: POP
34580: GO 34665
// end ;
34582: GO 34253
34584: POP
34585: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34586: LD_VAR 0 9
34590: PPUSH
34591: LD_VAR 0 3
34595: PPUSH
34596: LD_VAR 0 4
34600: PPUSH
34601: LD_INT 20
34603: PPUSH
34604: CALL 26611 0 4
34608: PUSH
34609: LD_INT 4
34611: ARRAY
34612: IFFALSE 34616
// exit ;
34614: GO 34665
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
34616: LD_VAR 0 2
34620: PUSH
34621: LD_INT 29
34623: PUSH
34624: LD_INT 30
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: IN
34631: PUSH
34632: LD_VAR 0 3
34636: PPUSH
34637: LD_VAR 0 4
34641: PPUSH
34642: LD_VAR 0 9
34646: PPUSH
34647: CALL_OW 440
34651: NOT
34652: AND
34653: IFFALSE 34657
// exit ;
34655: GO 34665
// result := true ;
34657: LD_ADDR_VAR 0 6
34661: PUSH
34662: LD_INT 1
34664: ST_TO_ADDR
// end ;
34665: LD_VAR 0 6
34669: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
34670: LD_INT 0
34672: PPUSH
34673: PPUSH
34674: PPUSH
34675: PPUSH
34676: PPUSH
34677: PPUSH
34678: PPUSH
34679: PPUSH
34680: PPUSH
34681: PPUSH
34682: PPUSH
34683: PPUSH
34684: PPUSH
34685: PPUSH
34686: PPUSH
34687: PPUSH
34688: PPUSH
34689: PPUSH
34690: PPUSH
34691: PPUSH
34692: PPUSH
34693: PPUSH
34694: PPUSH
34695: PPUSH
34696: PPUSH
34697: PPUSH
34698: PPUSH
34699: PPUSH
34700: PPUSH
34701: PPUSH
34702: PPUSH
34703: PPUSH
34704: PPUSH
34705: PPUSH
34706: PPUSH
34707: PPUSH
34708: PPUSH
34709: PPUSH
34710: PPUSH
34711: PPUSH
34712: PPUSH
34713: PPUSH
34714: PPUSH
34715: PPUSH
34716: PPUSH
34717: PPUSH
34718: PPUSH
34719: PPUSH
34720: PPUSH
34721: PPUSH
34722: PPUSH
34723: PPUSH
34724: PPUSH
34725: PPUSH
34726: PPUSH
34727: PPUSH
34728: PPUSH
34729: PPUSH
// result = [ ] ;
34730: LD_ADDR_VAR 0 7
34734: PUSH
34735: EMPTY
34736: ST_TO_ADDR
// temp_list = [ ] ;
34737: LD_ADDR_VAR 0 9
34741: PUSH
34742: EMPTY
34743: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
34744: LD_VAR 0 4
34748: PUSH
34749: LD_INT 0
34751: PUSH
34752: LD_INT 1
34754: PUSH
34755: LD_INT 2
34757: PUSH
34758: LD_INT 3
34760: PUSH
34761: LD_INT 4
34763: PUSH
34764: LD_INT 5
34766: PUSH
34767: EMPTY
34768: LIST
34769: LIST
34770: LIST
34771: LIST
34772: LIST
34773: LIST
34774: IN
34775: NOT
34776: PUSH
34777: LD_VAR 0 1
34781: PUSH
34782: LD_INT 0
34784: PUSH
34785: LD_INT 1
34787: PUSH
34788: EMPTY
34789: LIST
34790: LIST
34791: IN
34792: PUSH
34793: LD_VAR 0 5
34797: PUSH
34798: LD_INT 1
34800: PUSH
34801: LD_INT 2
34803: PUSH
34804: LD_INT 3
34806: PUSH
34807: EMPTY
34808: LIST
34809: LIST
34810: LIST
34811: IN
34812: NOT
34813: AND
34814: OR
34815: IFFALSE 34819
// exit ;
34817: GO 53210
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
34819: LD_VAR 0 1
34823: PUSH
34824: LD_INT 6
34826: PUSH
34827: LD_INT 7
34829: PUSH
34830: LD_INT 8
34832: PUSH
34833: LD_INT 13
34835: PUSH
34836: LD_INT 12
34838: PUSH
34839: LD_INT 15
34841: PUSH
34842: LD_INT 11
34844: PUSH
34845: LD_INT 14
34847: PUSH
34848: LD_INT 10
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: LIST
34855: LIST
34856: LIST
34857: LIST
34858: LIST
34859: LIST
34860: LIST
34861: IN
34862: IFFALSE 34872
// btype = b_lab ;
34864: LD_ADDR_VAR 0 1
34868: PUSH
34869: LD_INT 6
34871: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
34872: LD_VAR 0 6
34876: PUSH
34877: LD_INT 0
34879: PUSH
34880: LD_INT 1
34882: PUSH
34883: LD_INT 2
34885: PUSH
34886: EMPTY
34887: LIST
34888: LIST
34889: LIST
34890: IN
34891: NOT
34892: PUSH
34893: LD_VAR 0 1
34897: PUSH
34898: LD_INT 0
34900: PUSH
34901: LD_INT 1
34903: PUSH
34904: LD_INT 2
34906: PUSH
34907: LD_INT 3
34909: PUSH
34910: LD_INT 6
34912: PUSH
34913: LD_INT 36
34915: PUSH
34916: LD_INT 4
34918: PUSH
34919: LD_INT 5
34921: PUSH
34922: LD_INT 31
34924: PUSH
34925: LD_INT 32
34927: PUSH
34928: LD_INT 33
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: IN
34944: NOT
34945: PUSH
34946: LD_VAR 0 6
34950: PUSH
34951: LD_INT 1
34953: EQUAL
34954: AND
34955: OR
34956: PUSH
34957: LD_VAR 0 1
34961: PUSH
34962: LD_INT 2
34964: PUSH
34965: LD_INT 3
34967: PUSH
34968: EMPTY
34969: LIST
34970: LIST
34971: IN
34972: NOT
34973: PUSH
34974: LD_VAR 0 6
34978: PUSH
34979: LD_INT 2
34981: EQUAL
34982: AND
34983: OR
34984: IFFALSE 34994
// mode = 0 ;
34986: LD_ADDR_VAR 0 6
34990: PUSH
34991: LD_INT 0
34993: ST_TO_ADDR
// case mode of 0 :
34994: LD_VAR 0 6
34998: PUSH
34999: LD_INT 0
35001: DOUBLE
35002: EQUAL
35003: IFTRUE 35007
35005: GO 46460
35007: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35008: LD_ADDR_VAR 0 11
35012: PUSH
35013: LD_INT 0
35015: PUSH
35016: LD_INT 0
35018: PUSH
35019: EMPTY
35020: LIST
35021: LIST
35022: PUSH
35023: LD_INT 0
35025: PUSH
35026: LD_INT 1
35028: NEG
35029: PUSH
35030: EMPTY
35031: LIST
35032: LIST
35033: PUSH
35034: LD_INT 1
35036: PUSH
35037: LD_INT 0
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: PUSH
35044: LD_INT 1
35046: PUSH
35047: LD_INT 1
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: PUSH
35054: LD_INT 0
35056: PUSH
35057: LD_INT 1
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: PUSH
35064: LD_INT 1
35066: NEG
35067: PUSH
35068: LD_INT 0
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: PUSH
35075: LD_INT 1
35077: NEG
35078: PUSH
35079: LD_INT 1
35081: NEG
35082: PUSH
35083: EMPTY
35084: LIST
35085: LIST
35086: PUSH
35087: LD_INT 1
35089: NEG
35090: PUSH
35091: LD_INT 2
35093: NEG
35094: PUSH
35095: EMPTY
35096: LIST
35097: LIST
35098: PUSH
35099: LD_INT 0
35101: PUSH
35102: LD_INT 2
35104: NEG
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: PUSH
35110: LD_INT 1
35112: PUSH
35113: LD_INT 1
35115: NEG
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: PUSH
35121: LD_INT 1
35123: PUSH
35124: LD_INT 2
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: PUSH
35131: LD_INT 0
35133: PUSH
35134: LD_INT 2
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: PUSH
35141: LD_INT 1
35143: NEG
35144: PUSH
35145: LD_INT 1
35147: PUSH
35148: EMPTY
35149: LIST
35150: LIST
35151: PUSH
35152: LD_INT 1
35154: PUSH
35155: LD_INT 3
35157: PUSH
35158: EMPTY
35159: LIST
35160: LIST
35161: PUSH
35162: LD_INT 0
35164: PUSH
35165: LD_INT 3
35167: PUSH
35168: EMPTY
35169: LIST
35170: LIST
35171: PUSH
35172: LD_INT 1
35174: NEG
35175: PUSH
35176: LD_INT 2
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: LIST
35187: LIST
35188: LIST
35189: LIST
35190: LIST
35191: LIST
35192: LIST
35193: LIST
35194: LIST
35195: LIST
35196: LIST
35197: LIST
35198: LIST
35199: LIST
35200: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35201: LD_ADDR_VAR 0 12
35205: PUSH
35206: LD_INT 0
35208: PUSH
35209: LD_INT 0
35211: PUSH
35212: EMPTY
35213: LIST
35214: LIST
35215: PUSH
35216: LD_INT 0
35218: PUSH
35219: LD_INT 1
35221: NEG
35222: PUSH
35223: EMPTY
35224: LIST
35225: LIST
35226: PUSH
35227: LD_INT 1
35229: PUSH
35230: LD_INT 0
35232: PUSH
35233: EMPTY
35234: LIST
35235: LIST
35236: PUSH
35237: LD_INT 1
35239: PUSH
35240: LD_INT 1
35242: PUSH
35243: EMPTY
35244: LIST
35245: LIST
35246: PUSH
35247: LD_INT 0
35249: PUSH
35250: LD_INT 1
35252: PUSH
35253: EMPTY
35254: LIST
35255: LIST
35256: PUSH
35257: LD_INT 1
35259: NEG
35260: PUSH
35261: LD_INT 0
35263: PUSH
35264: EMPTY
35265: LIST
35266: LIST
35267: PUSH
35268: LD_INT 1
35270: NEG
35271: PUSH
35272: LD_INT 1
35274: NEG
35275: PUSH
35276: EMPTY
35277: LIST
35278: LIST
35279: PUSH
35280: LD_INT 1
35282: PUSH
35283: LD_INT 1
35285: NEG
35286: PUSH
35287: EMPTY
35288: LIST
35289: LIST
35290: PUSH
35291: LD_INT 2
35293: PUSH
35294: LD_INT 0
35296: PUSH
35297: EMPTY
35298: LIST
35299: LIST
35300: PUSH
35301: LD_INT 2
35303: PUSH
35304: LD_INT 1
35306: PUSH
35307: EMPTY
35308: LIST
35309: LIST
35310: PUSH
35311: LD_INT 1
35313: NEG
35314: PUSH
35315: LD_INT 1
35317: PUSH
35318: EMPTY
35319: LIST
35320: LIST
35321: PUSH
35322: LD_INT 2
35324: NEG
35325: PUSH
35326: LD_INT 0
35328: PUSH
35329: EMPTY
35330: LIST
35331: LIST
35332: PUSH
35333: LD_INT 2
35335: NEG
35336: PUSH
35337: LD_INT 1
35339: NEG
35340: PUSH
35341: EMPTY
35342: LIST
35343: LIST
35344: PUSH
35345: LD_INT 2
35347: NEG
35348: PUSH
35349: LD_INT 1
35351: PUSH
35352: EMPTY
35353: LIST
35354: LIST
35355: PUSH
35356: LD_INT 3
35358: NEG
35359: PUSH
35360: LD_INT 0
35362: PUSH
35363: EMPTY
35364: LIST
35365: LIST
35366: PUSH
35367: LD_INT 3
35369: NEG
35370: PUSH
35371: LD_INT 1
35373: NEG
35374: PUSH
35375: EMPTY
35376: LIST
35377: LIST
35378: PUSH
35379: EMPTY
35380: LIST
35381: LIST
35382: LIST
35383: LIST
35384: LIST
35385: LIST
35386: LIST
35387: LIST
35388: LIST
35389: LIST
35390: LIST
35391: LIST
35392: LIST
35393: LIST
35394: LIST
35395: LIST
35396: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35397: LD_ADDR_VAR 0 13
35401: PUSH
35402: LD_INT 0
35404: PUSH
35405: LD_INT 0
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: PUSH
35412: LD_INT 0
35414: PUSH
35415: LD_INT 1
35417: NEG
35418: PUSH
35419: EMPTY
35420: LIST
35421: LIST
35422: PUSH
35423: LD_INT 1
35425: PUSH
35426: LD_INT 0
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: PUSH
35433: LD_INT 1
35435: PUSH
35436: LD_INT 1
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: PUSH
35443: LD_INT 0
35445: PUSH
35446: LD_INT 1
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: PUSH
35453: LD_INT 1
35455: NEG
35456: PUSH
35457: LD_INT 0
35459: PUSH
35460: EMPTY
35461: LIST
35462: LIST
35463: PUSH
35464: LD_INT 1
35466: NEG
35467: PUSH
35468: LD_INT 1
35470: NEG
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: PUSH
35476: LD_INT 1
35478: NEG
35479: PUSH
35480: LD_INT 2
35482: NEG
35483: PUSH
35484: EMPTY
35485: LIST
35486: LIST
35487: PUSH
35488: LD_INT 2
35490: PUSH
35491: LD_INT 1
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: PUSH
35498: LD_INT 2
35500: PUSH
35501: LD_INT 2
35503: PUSH
35504: EMPTY
35505: LIST
35506: LIST
35507: PUSH
35508: LD_INT 1
35510: PUSH
35511: LD_INT 2
35513: PUSH
35514: EMPTY
35515: LIST
35516: LIST
35517: PUSH
35518: LD_INT 2
35520: NEG
35521: PUSH
35522: LD_INT 1
35524: NEG
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PUSH
35530: LD_INT 2
35532: NEG
35533: PUSH
35534: LD_INT 2
35536: NEG
35537: PUSH
35538: EMPTY
35539: LIST
35540: LIST
35541: PUSH
35542: LD_INT 2
35544: NEG
35545: PUSH
35546: LD_INT 3
35548: NEG
35549: PUSH
35550: EMPTY
35551: LIST
35552: LIST
35553: PUSH
35554: LD_INT 3
35556: NEG
35557: PUSH
35558: LD_INT 2
35560: NEG
35561: PUSH
35562: EMPTY
35563: LIST
35564: LIST
35565: PUSH
35566: LD_INT 3
35568: NEG
35569: PUSH
35570: LD_INT 3
35572: NEG
35573: PUSH
35574: EMPTY
35575: LIST
35576: LIST
35577: PUSH
35578: EMPTY
35579: LIST
35580: LIST
35581: LIST
35582: LIST
35583: LIST
35584: LIST
35585: LIST
35586: LIST
35587: LIST
35588: LIST
35589: LIST
35590: LIST
35591: LIST
35592: LIST
35593: LIST
35594: LIST
35595: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35596: LD_ADDR_VAR 0 14
35600: PUSH
35601: LD_INT 0
35603: PUSH
35604: LD_INT 0
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: PUSH
35611: LD_INT 0
35613: PUSH
35614: LD_INT 1
35616: NEG
35617: PUSH
35618: EMPTY
35619: LIST
35620: LIST
35621: PUSH
35622: LD_INT 1
35624: PUSH
35625: LD_INT 0
35627: PUSH
35628: EMPTY
35629: LIST
35630: LIST
35631: PUSH
35632: LD_INT 1
35634: PUSH
35635: LD_INT 1
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: PUSH
35642: LD_INT 0
35644: PUSH
35645: LD_INT 1
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: PUSH
35652: LD_INT 1
35654: NEG
35655: PUSH
35656: LD_INT 0
35658: PUSH
35659: EMPTY
35660: LIST
35661: LIST
35662: PUSH
35663: LD_INT 1
35665: NEG
35666: PUSH
35667: LD_INT 1
35669: NEG
35670: PUSH
35671: EMPTY
35672: LIST
35673: LIST
35674: PUSH
35675: LD_INT 1
35677: NEG
35678: PUSH
35679: LD_INT 2
35681: NEG
35682: PUSH
35683: EMPTY
35684: LIST
35685: LIST
35686: PUSH
35687: LD_INT 0
35689: PUSH
35690: LD_INT 2
35692: NEG
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: PUSH
35698: LD_INT 1
35700: PUSH
35701: LD_INT 1
35703: NEG
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: PUSH
35709: LD_INT 1
35711: PUSH
35712: LD_INT 2
35714: PUSH
35715: EMPTY
35716: LIST
35717: LIST
35718: PUSH
35719: LD_INT 0
35721: PUSH
35722: LD_INT 2
35724: PUSH
35725: EMPTY
35726: LIST
35727: LIST
35728: PUSH
35729: LD_INT 1
35731: NEG
35732: PUSH
35733: LD_INT 1
35735: PUSH
35736: EMPTY
35737: LIST
35738: LIST
35739: PUSH
35740: LD_INT 1
35742: NEG
35743: PUSH
35744: LD_INT 3
35746: NEG
35747: PUSH
35748: EMPTY
35749: LIST
35750: LIST
35751: PUSH
35752: LD_INT 0
35754: PUSH
35755: LD_INT 3
35757: NEG
35758: PUSH
35759: EMPTY
35760: LIST
35761: LIST
35762: PUSH
35763: LD_INT 1
35765: PUSH
35766: LD_INT 2
35768: NEG
35769: PUSH
35770: EMPTY
35771: LIST
35772: LIST
35773: PUSH
35774: EMPTY
35775: LIST
35776: LIST
35777: LIST
35778: LIST
35779: LIST
35780: LIST
35781: LIST
35782: LIST
35783: LIST
35784: LIST
35785: LIST
35786: LIST
35787: LIST
35788: LIST
35789: LIST
35790: LIST
35791: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35792: LD_ADDR_VAR 0 15
35796: PUSH
35797: LD_INT 0
35799: PUSH
35800: LD_INT 0
35802: PUSH
35803: EMPTY
35804: LIST
35805: LIST
35806: PUSH
35807: LD_INT 0
35809: PUSH
35810: LD_INT 1
35812: NEG
35813: PUSH
35814: EMPTY
35815: LIST
35816: LIST
35817: PUSH
35818: LD_INT 1
35820: PUSH
35821: LD_INT 0
35823: PUSH
35824: EMPTY
35825: LIST
35826: LIST
35827: PUSH
35828: LD_INT 1
35830: PUSH
35831: LD_INT 1
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: PUSH
35838: LD_INT 0
35840: PUSH
35841: LD_INT 1
35843: PUSH
35844: EMPTY
35845: LIST
35846: LIST
35847: PUSH
35848: LD_INT 1
35850: NEG
35851: PUSH
35852: LD_INT 0
35854: PUSH
35855: EMPTY
35856: LIST
35857: LIST
35858: PUSH
35859: LD_INT 1
35861: NEG
35862: PUSH
35863: LD_INT 1
35865: NEG
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: PUSH
35871: LD_INT 1
35873: PUSH
35874: LD_INT 1
35876: NEG
35877: PUSH
35878: EMPTY
35879: LIST
35880: LIST
35881: PUSH
35882: LD_INT 2
35884: PUSH
35885: LD_INT 0
35887: PUSH
35888: EMPTY
35889: LIST
35890: LIST
35891: PUSH
35892: LD_INT 2
35894: PUSH
35895: LD_INT 1
35897: PUSH
35898: EMPTY
35899: LIST
35900: LIST
35901: PUSH
35902: LD_INT 1
35904: NEG
35905: PUSH
35906: LD_INT 1
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: PUSH
35913: LD_INT 2
35915: NEG
35916: PUSH
35917: LD_INT 0
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: PUSH
35924: LD_INT 2
35926: NEG
35927: PUSH
35928: LD_INT 1
35930: NEG
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: LD_INT 2
35938: PUSH
35939: LD_INT 1
35941: NEG
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: PUSH
35947: LD_INT 3
35949: PUSH
35950: LD_INT 0
35952: PUSH
35953: EMPTY
35954: LIST
35955: LIST
35956: PUSH
35957: LD_INT 3
35959: PUSH
35960: LD_INT 1
35962: PUSH
35963: EMPTY
35964: LIST
35965: LIST
35966: PUSH
35967: EMPTY
35968: LIST
35969: LIST
35970: LIST
35971: LIST
35972: LIST
35973: LIST
35974: LIST
35975: LIST
35976: LIST
35977: LIST
35978: LIST
35979: LIST
35980: LIST
35981: LIST
35982: LIST
35983: LIST
35984: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35985: LD_ADDR_VAR 0 16
35989: PUSH
35990: LD_INT 0
35992: PUSH
35993: LD_INT 0
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: PUSH
36000: LD_INT 0
36002: PUSH
36003: LD_INT 1
36005: NEG
36006: PUSH
36007: EMPTY
36008: LIST
36009: LIST
36010: PUSH
36011: LD_INT 1
36013: PUSH
36014: LD_INT 0
36016: PUSH
36017: EMPTY
36018: LIST
36019: LIST
36020: PUSH
36021: LD_INT 1
36023: PUSH
36024: LD_INT 1
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PUSH
36031: LD_INT 0
36033: PUSH
36034: LD_INT 1
36036: PUSH
36037: EMPTY
36038: LIST
36039: LIST
36040: PUSH
36041: LD_INT 1
36043: NEG
36044: PUSH
36045: LD_INT 0
36047: PUSH
36048: EMPTY
36049: LIST
36050: LIST
36051: PUSH
36052: LD_INT 1
36054: NEG
36055: PUSH
36056: LD_INT 1
36058: NEG
36059: PUSH
36060: EMPTY
36061: LIST
36062: LIST
36063: PUSH
36064: LD_INT 1
36066: NEG
36067: PUSH
36068: LD_INT 2
36070: NEG
36071: PUSH
36072: EMPTY
36073: LIST
36074: LIST
36075: PUSH
36076: LD_INT 2
36078: PUSH
36079: LD_INT 1
36081: PUSH
36082: EMPTY
36083: LIST
36084: LIST
36085: PUSH
36086: LD_INT 2
36088: PUSH
36089: LD_INT 2
36091: PUSH
36092: EMPTY
36093: LIST
36094: LIST
36095: PUSH
36096: LD_INT 1
36098: PUSH
36099: LD_INT 2
36101: PUSH
36102: EMPTY
36103: LIST
36104: LIST
36105: PUSH
36106: LD_INT 2
36108: NEG
36109: PUSH
36110: LD_INT 1
36112: NEG
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PUSH
36118: LD_INT 2
36120: NEG
36121: PUSH
36122: LD_INT 2
36124: NEG
36125: PUSH
36126: EMPTY
36127: LIST
36128: LIST
36129: PUSH
36130: LD_INT 3
36132: PUSH
36133: LD_INT 2
36135: PUSH
36136: EMPTY
36137: LIST
36138: LIST
36139: PUSH
36140: LD_INT 3
36142: PUSH
36143: LD_INT 3
36145: PUSH
36146: EMPTY
36147: LIST
36148: LIST
36149: PUSH
36150: LD_INT 2
36152: PUSH
36153: LD_INT 3
36155: PUSH
36156: EMPTY
36157: LIST
36158: LIST
36159: PUSH
36160: EMPTY
36161: LIST
36162: LIST
36163: LIST
36164: LIST
36165: LIST
36166: LIST
36167: LIST
36168: LIST
36169: LIST
36170: LIST
36171: LIST
36172: LIST
36173: LIST
36174: LIST
36175: LIST
36176: LIST
36177: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36178: LD_ADDR_VAR 0 17
36182: PUSH
36183: LD_INT 0
36185: PUSH
36186: LD_INT 0
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: PUSH
36193: LD_INT 0
36195: PUSH
36196: LD_INT 1
36198: NEG
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PUSH
36204: LD_INT 1
36206: PUSH
36207: LD_INT 0
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: LD_INT 1
36216: PUSH
36217: LD_INT 1
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: PUSH
36224: LD_INT 0
36226: PUSH
36227: LD_INT 1
36229: PUSH
36230: EMPTY
36231: LIST
36232: LIST
36233: PUSH
36234: LD_INT 1
36236: NEG
36237: PUSH
36238: LD_INT 0
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: PUSH
36245: LD_INT 1
36247: NEG
36248: PUSH
36249: LD_INT 1
36251: NEG
36252: PUSH
36253: EMPTY
36254: LIST
36255: LIST
36256: PUSH
36257: LD_INT 1
36259: NEG
36260: PUSH
36261: LD_INT 2
36263: NEG
36264: PUSH
36265: EMPTY
36266: LIST
36267: LIST
36268: PUSH
36269: LD_INT 0
36271: PUSH
36272: LD_INT 2
36274: NEG
36275: PUSH
36276: EMPTY
36277: LIST
36278: LIST
36279: PUSH
36280: LD_INT 1
36282: PUSH
36283: LD_INT 1
36285: NEG
36286: PUSH
36287: EMPTY
36288: LIST
36289: LIST
36290: PUSH
36291: LD_INT 2
36293: PUSH
36294: LD_INT 0
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: PUSH
36301: LD_INT 2
36303: PUSH
36304: LD_INT 1
36306: PUSH
36307: EMPTY
36308: LIST
36309: LIST
36310: PUSH
36311: LD_INT 2
36313: PUSH
36314: LD_INT 2
36316: PUSH
36317: EMPTY
36318: LIST
36319: LIST
36320: PUSH
36321: LD_INT 1
36323: PUSH
36324: LD_INT 2
36326: PUSH
36327: EMPTY
36328: LIST
36329: LIST
36330: PUSH
36331: LD_INT 0
36333: PUSH
36334: LD_INT 2
36336: PUSH
36337: EMPTY
36338: LIST
36339: LIST
36340: PUSH
36341: LD_INT 1
36343: NEG
36344: PUSH
36345: LD_INT 1
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: PUSH
36352: LD_INT 2
36354: NEG
36355: PUSH
36356: LD_INT 0
36358: PUSH
36359: EMPTY
36360: LIST
36361: LIST
36362: PUSH
36363: LD_INT 2
36365: NEG
36366: PUSH
36367: LD_INT 1
36369: NEG
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: PUSH
36375: LD_INT 2
36377: NEG
36378: PUSH
36379: LD_INT 2
36381: NEG
36382: PUSH
36383: EMPTY
36384: LIST
36385: LIST
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: LIST
36391: LIST
36392: LIST
36393: LIST
36394: LIST
36395: LIST
36396: LIST
36397: LIST
36398: LIST
36399: LIST
36400: LIST
36401: LIST
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36408: LD_ADDR_VAR 0 18
36412: PUSH
36413: LD_INT 0
36415: PUSH
36416: LD_INT 0
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PUSH
36423: LD_INT 0
36425: PUSH
36426: LD_INT 1
36428: NEG
36429: PUSH
36430: EMPTY
36431: LIST
36432: LIST
36433: PUSH
36434: LD_INT 1
36436: PUSH
36437: LD_INT 0
36439: PUSH
36440: EMPTY
36441: LIST
36442: LIST
36443: PUSH
36444: LD_INT 1
36446: PUSH
36447: LD_INT 1
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: PUSH
36454: LD_INT 0
36456: PUSH
36457: LD_INT 1
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: PUSH
36464: LD_INT 1
36466: NEG
36467: PUSH
36468: LD_INT 0
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PUSH
36475: LD_INT 1
36477: NEG
36478: PUSH
36479: LD_INT 1
36481: NEG
36482: PUSH
36483: EMPTY
36484: LIST
36485: LIST
36486: PUSH
36487: LD_INT 1
36489: NEG
36490: PUSH
36491: LD_INT 2
36493: NEG
36494: PUSH
36495: EMPTY
36496: LIST
36497: LIST
36498: PUSH
36499: LD_INT 0
36501: PUSH
36502: LD_INT 2
36504: NEG
36505: PUSH
36506: EMPTY
36507: LIST
36508: LIST
36509: PUSH
36510: LD_INT 1
36512: PUSH
36513: LD_INT 1
36515: NEG
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: PUSH
36521: LD_INT 2
36523: PUSH
36524: LD_INT 0
36526: PUSH
36527: EMPTY
36528: LIST
36529: LIST
36530: PUSH
36531: LD_INT 2
36533: PUSH
36534: LD_INT 1
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: PUSH
36541: LD_INT 2
36543: PUSH
36544: LD_INT 2
36546: PUSH
36547: EMPTY
36548: LIST
36549: LIST
36550: PUSH
36551: LD_INT 1
36553: PUSH
36554: LD_INT 2
36556: PUSH
36557: EMPTY
36558: LIST
36559: LIST
36560: PUSH
36561: LD_INT 0
36563: PUSH
36564: LD_INT 2
36566: PUSH
36567: EMPTY
36568: LIST
36569: LIST
36570: PUSH
36571: LD_INT 1
36573: NEG
36574: PUSH
36575: LD_INT 1
36577: PUSH
36578: EMPTY
36579: LIST
36580: LIST
36581: PUSH
36582: LD_INT 2
36584: NEG
36585: PUSH
36586: LD_INT 0
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: PUSH
36593: LD_INT 2
36595: NEG
36596: PUSH
36597: LD_INT 1
36599: NEG
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: PUSH
36605: LD_INT 2
36607: NEG
36608: PUSH
36609: LD_INT 2
36611: NEG
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: LIST
36621: LIST
36622: LIST
36623: LIST
36624: LIST
36625: LIST
36626: LIST
36627: LIST
36628: LIST
36629: LIST
36630: LIST
36631: LIST
36632: LIST
36633: LIST
36634: LIST
36635: LIST
36636: LIST
36637: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36638: LD_ADDR_VAR 0 19
36642: PUSH
36643: LD_INT 0
36645: PUSH
36646: LD_INT 0
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: PUSH
36653: LD_INT 0
36655: PUSH
36656: LD_INT 1
36658: NEG
36659: PUSH
36660: EMPTY
36661: LIST
36662: LIST
36663: PUSH
36664: LD_INT 1
36666: PUSH
36667: LD_INT 0
36669: PUSH
36670: EMPTY
36671: LIST
36672: LIST
36673: PUSH
36674: LD_INT 1
36676: PUSH
36677: LD_INT 1
36679: PUSH
36680: EMPTY
36681: LIST
36682: LIST
36683: PUSH
36684: LD_INT 0
36686: PUSH
36687: LD_INT 1
36689: PUSH
36690: EMPTY
36691: LIST
36692: LIST
36693: PUSH
36694: LD_INT 1
36696: NEG
36697: PUSH
36698: LD_INT 0
36700: PUSH
36701: EMPTY
36702: LIST
36703: LIST
36704: PUSH
36705: LD_INT 1
36707: NEG
36708: PUSH
36709: LD_INT 1
36711: NEG
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: PUSH
36717: LD_INT 1
36719: NEG
36720: PUSH
36721: LD_INT 2
36723: NEG
36724: PUSH
36725: EMPTY
36726: LIST
36727: LIST
36728: PUSH
36729: LD_INT 0
36731: PUSH
36732: LD_INT 2
36734: NEG
36735: PUSH
36736: EMPTY
36737: LIST
36738: LIST
36739: PUSH
36740: LD_INT 1
36742: PUSH
36743: LD_INT 1
36745: NEG
36746: PUSH
36747: EMPTY
36748: LIST
36749: LIST
36750: PUSH
36751: LD_INT 2
36753: PUSH
36754: LD_INT 0
36756: PUSH
36757: EMPTY
36758: LIST
36759: LIST
36760: PUSH
36761: LD_INT 2
36763: PUSH
36764: LD_INT 1
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: LD_INT 2
36773: PUSH
36774: LD_INT 2
36776: PUSH
36777: EMPTY
36778: LIST
36779: LIST
36780: PUSH
36781: LD_INT 1
36783: PUSH
36784: LD_INT 2
36786: PUSH
36787: EMPTY
36788: LIST
36789: LIST
36790: PUSH
36791: LD_INT 0
36793: PUSH
36794: LD_INT 2
36796: PUSH
36797: EMPTY
36798: LIST
36799: LIST
36800: PUSH
36801: LD_INT 1
36803: NEG
36804: PUSH
36805: LD_INT 1
36807: PUSH
36808: EMPTY
36809: LIST
36810: LIST
36811: PUSH
36812: LD_INT 2
36814: NEG
36815: PUSH
36816: LD_INT 0
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PUSH
36823: LD_INT 2
36825: NEG
36826: PUSH
36827: LD_INT 1
36829: NEG
36830: PUSH
36831: EMPTY
36832: LIST
36833: LIST
36834: PUSH
36835: LD_INT 2
36837: NEG
36838: PUSH
36839: LD_INT 2
36841: NEG
36842: PUSH
36843: EMPTY
36844: LIST
36845: LIST
36846: PUSH
36847: EMPTY
36848: LIST
36849: LIST
36850: LIST
36851: LIST
36852: LIST
36853: LIST
36854: LIST
36855: LIST
36856: LIST
36857: LIST
36858: LIST
36859: LIST
36860: LIST
36861: LIST
36862: LIST
36863: LIST
36864: LIST
36865: LIST
36866: LIST
36867: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36868: LD_ADDR_VAR 0 20
36872: PUSH
36873: LD_INT 0
36875: PUSH
36876: LD_INT 0
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: PUSH
36883: LD_INT 0
36885: PUSH
36886: LD_INT 1
36888: NEG
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: PUSH
36894: LD_INT 1
36896: PUSH
36897: LD_INT 0
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: PUSH
36904: LD_INT 1
36906: PUSH
36907: LD_INT 1
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: PUSH
36914: LD_INT 0
36916: PUSH
36917: LD_INT 1
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: PUSH
36924: LD_INT 1
36926: NEG
36927: PUSH
36928: LD_INT 0
36930: PUSH
36931: EMPTY
36932: LIST
36933: LIST
36934: PUSH
36935: LD_INT 1
36937: NEG
36938: PUSH
36939: LD_INT 1
36941: NEG
36942: PUSH
36943: EMPTY
36944: LIST
36945: LIST
36946: PUSH
36947: LD_INT 1
36949: NEG
36950: PUSH
36951: LD_INT 2
36953: NEG
36954: PUSH
36955: EMPTY
36956: LIST
36957: LIST
36958: PUSH
36959: LD_INT 0
36961: PUSH
36962: LD_INT 2
36964: NEG
36965: PUSH
36966: EMPTY
36967: LIST
36968: LIST
36969: PUSH
36970: LD_INT 1
36972: PUSH
36973: LD_INT 1
36975: NEG
36976: PUSH
36977: EMPTY
36978: LIST
36979: LIST
36980: PUSH
36981: LD_INT 2
36983: PUSH
36984: LD_INT 0
36986: PUSH
36987: EMPTY
36988: LIST
36989: LIST
36990: PUSH
36991: LD_INT 2
36993: PUSH
36994: LD_INT 1
36996: PUSH
36997: EMPTY
36998: LIST
36999: LIST
37000: PUSH
37001: LD_INT 2
37003: PUSH
37004: LD_INT 2
37006: PUSH
37007: EMPTY
37008: LIST
37009: LIST
37010: PUSH
37011: LD_INT 1
37013: PUSH
37014: LD_INT 2
37016: PUSH
37017: EMPTY
37018: LIST
37019: LIST
37020: PUSH
37021: LD_INT 0
37023: PUSH
37024: LD_INT 2
37026: PUSH
37027: EMPTY
37028: LIST
37029: LIST
37030: PUSH
37031: LD_INT 1
37033: NEG
37034: PUSH
37035: LD_INT 1
37037: PUSH
37038: EMPTY
37039: LIST
37040: LIST
37041: PUSH
37042: LD_INT 2
37044: NEG
37045: PUSH
37046: LD_INT 0
37048: PUSH
37049: EMPTY
37050: LIST
37051: LIST
37052: PUSH
37053: LD_INT 2
37055: NEG
37056: PUSH
37057: LD_INT 1
37059: NEG
37060: PUSH
37061: EMPTY
37062: LIST
37063: LIST
37064: PUSH
37065: LD_INT 2
37067: NEG
37068: PUSH
37069: LD_INT 2
37071: NEG
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: LIST
37081: LIST
37082: LIST
37083: LIST
37084: LIST
37085: LIST
37086: LIST
37087: LIST
37088: LIST
37089: LIST
37090: LIST
37091: LIST
37092: LIST
37093: LIST
37094: LIST
37095: LIST
37096: LIST
37097: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37098: LD_ADDR_VAR 0 21
37102: PUSH
37103: LD_INT 0
37105: PUSH
37106: LD_INT 0
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: PUSH
37113: LD_INT 0
37115: PUSH
37116: LD_INT 1
37118: NEG
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: PUSH
37124: LD_INT 1
37126: PUSH
37127: LD_INT 0
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: PUSH
37134: LD_INT 1
37136: PUSH
37137: LD_INT 1
37139: PUSH
37140: EMPTY
37141: LIST
37142: LIST
37143: PUSH
37144: LD_INT 0
37146: PUSH
37147: LD_INT 1
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: PUSH
37154: LD_INT 1
37156: NEG
37157: PUSH
37158: LD_INT 0
37160: PUSH
37161: EMPTY
37162: LIST
37163: LIST
37164: PUSH
37165: LD_INT 1
37167: NEG
37168: PUSH
37169: LD_INT 1
37171: NEG
37172: PUSH
37173: EMPTY
37174: LIST
37175: LIST
37176: PUSH
37177: LD_INT 1
37179: NEG
37180: PUSH
37181: LD_INT 2
37183: NEG
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: PUSH
37189: LD_INT 0
37191: PUSH
37192: LD_INT 2
37194: NEG
37195: PUSH
37196: EMPTY
37197: LIST
37198: LIST
37199: PUSH
37200: LD_INT 1
37202: PUSH
37203: LD_INT 1
37205: NEG
37206: PUSH
37207: EMPTY
37208: LIST
37209: LIST
37210: PUSH
37211: LD_INT 2
37213: PUSH
37214: LD_INT 0
37216: PUSH
37217: EMPTY
37218: LIST
37219: LIST
37220: PUSH
37221: LD_INT 2
37223: PUSH
37224: LD_INT 1
37226: PUSH
37227: EMPTY
37228: LIST
37229: LIST
37230: PUSH
37231: LD_INT 2
37233: PUSH
37234: LD_INT 2
37236: PUSH
37237: EMPTY
37238: LIST
37239: LIST
37240: PUSH
37241: LD_INT 1
37243: PUSH
37244: LD_INT 2
37246: PUSH
37247: EMPTY
37248: LIST
37249: LIST
37250: PUSH
37251: LD_INT 0
37253: PUSH
37254: LD_INT 2
37256: PUSH
37257: EMPTY
37258: LIST
37259: LIST
37260: PUSH
37261: LD_INT 1
37263: NEG
37264: PUSH
37265: LD_INT 1
37267: PUSH
37268: EMPTY
37269: LIST
37270: LIST
37271: PUSH
37272: LD_INT 2
37274: NEG
37275: PUSH
37276: LD_INT 0
37278: PUSH
37279: EMPTY
37280: LIST
37281: LIST
37282: PUSH
37283: LD_INT 2
37285: NEG
37286: PUSH
37287: LD_INT 1
37289: NEG
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: LD_INT 2
37297: NEG
37298: PUSH
37299: LD_INT 2
37301: NEG
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: LIST
37311: LIST
37312: LIST
37313: LIST
37314: LIST
37315: LIST
37316: LIST
37317: LIST
37318: LIST
37319: LIST
37320: LIST
37321: LIST
37322: LIST
37323: LIST
37324: LIST
37325: LIST
37326: LIST
37327: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37328: LD_ADDR_VAR 0 22
37332: PUSH
37333: LD_INT 0
37335: PUSH
37336: LD_INT 0
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: PUSH
37343: LD_INT 0
37345: PUSH
37346: LD_INT 1
37348: NEG
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: PUSH
37354: LD_INT 1
37356: PUSH
37357: LD_INT 0
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: PUSH
37364: LD_INT 1
37366: PUSH
37367: LD_INT 1
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: PUSH
37374: LD_INT 0
37376: PUSH
37377: LD_INT 1
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PUSH
37384: LD_INT 1
37386: NEG
37387: PUSH
37388: LD_INT 0
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: PUSH
37395: LD_INT 1
37397: NEG
37398: PUSH
37399: LD_INT 1
37401: NEG
37402: PUSH
37403: EMPTY
37404: LIST
37405: LIST
37406: PUSH
37407: LD_INT 1
37409: NEG
37410: PUSH
37411: LD_INT 2
37413: NEG
37414: PUSH
37415: EMPTY
37416: LIST
37417: LIST
37418: PUSH
37419: LD_INT 0
37421: PUSH
37422: LD_INT 2
37424: NEG
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: LD_INT 1
37432: PUSH
37433: LD_INT 1
37435: NEG
37436: PUSH
37437: EMPTY
37438: LIST
37439: LIST
37440: PUSH
37441: LD_INT 2
37443: PUSH
37444: LD_INT 0
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: LD_INT 2
37453: PUSH
37454: LD_INT 1
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: LD_INT 2
37463: PUSH
37464: LD_INT 2
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: PUSH
37471: LD_INT 1
37473: PUSH
37474: LD_INT 2
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: LD_INT 0
37483: PUSH
37484: LD_INT 2
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PUSH
37491: LD_INT 1
37493: NEG
37494: PUSH
37495: LD_INT 1
37497: PUSH
37498: EMPTY
37499: LIST
37500: LIST
37501: PUSH
37502: LD_INT 2
37504: NEG
37505: PUSH
37506: LD_INT 0
37508: PUSH
37509: EMPTY
37510: LIST
37511: LIST
37512: PUSH
37513: LD_INT 2
37515: NEG
37516: PUSH
37517: LD_INT 1
37519: NEG
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: PUSH
37525: LD_INT 2
37527: NEG
37528: PUSH
37529: LD_INT 2
37531: NEG
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: PUSH
37537: EMPTY
37538: LIST
37539: LIST
37540: LIST
37541: LIST
37542: LIST
37543: LIST
37544: LIST
37545: LIST
37546: LIST
37547: LIST
37548: LIST
37549: LIST
37550: LIST
37551: LIST
37552: LIST
37553: LIST
37554: LIST
37555: LIST
37556: LIST
37557: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37558: LD_ADDR_VAR 0 23
37562: PUSH
37563: LD_INT 0
37565: PUSH
37566: LD_INT 0
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: PUSH
37573: LD_INT 0
37575: PUSH
37576: LD_INT 1
37578: NEG
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: LD_INT 1
37586: PUSH
37587: LD_INT 0
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 1
37596: PUSH
37597: LD_INT 1
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: LD_INT 0
37606: PUSH
37607: LD_INT 1
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: LD_INT 1
37616: NEG
37617: PUSH
37618: LD_INT 0
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: PUSH
37625: LD_INT 1
37627: NEG
37628: PUSH
37629: LD_INT 1
37631: NEG
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PUSH
37637: LD_INT 1
37639: NEG
37640: PUSH
37641: LD_INT 2
37643: NEG
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: PUSH
37649: LD_INT 0
37651: PUSH
37652: LD_INT 2
37654: NEG
37655: PUSH
37656: EMPTY
37657: LIST
37658: LIST
37659: PUSH
37660: LD_INT 1
37662: PUSH
37663: LD_INT 1
37665: NEG
37666: PUSH
37667: EMPTY
37668: LIST
37669: LIST
37670: PUSH
37671: LD_INT 2
37673: PUSH
37674: LD_INT 0
37676: PUSH
37677: EMPTY
37678: LIST
37679: LIST
37680: PUSH
37681: LD_INT 2
37683: PUSH
37684: LD_INT 1
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: PUSH
37691: LD_INT 2
37693: PUSH
37694: LD_INT 2
37696: PUSH
37697: EMPTY
37698: LIST
37699: LIST
37700: PUSH
37701: LD_INT 1
37703: PUSH
37704: LD_INT 2
37706: PUSH
37707: EMPTY
37708: LIST
37709: LIST
37710: PUSH
37711: LD_INT 0
37713: PUSH
37714: LD_INT 2
37716: PUSH
37717: EMPTY
37718: LIST
37719: LIST
37720: PUSH
37721: LD_INT 1
37723: NEG
37724: PUSH
37725: LD_INT 1
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: PUSH
37732: LD_INT 2
37734: NEG
37735: PUSH
37736: LD_INT 0
37738: PUSH
37739: EMPTY
37740: LIST
37741: LIST
37742: PUSH
37743: LD_INT 2
37745: NEG
37746: PUSH
37747: LD_INT 1
37749: NEG
37750: PUSH
37751: EMPTY
37752: LIST
37753: LIST
37754: PUSH
37755: LD_INT 2
37757: NEG
37758: PUSH
37759: LD_INT 2
37761: NEG
37762: PUSH
37763: EMPTY
37764: LIST
37765: LIST
37766: PUSH
37767: LD_INT 2
37769: NEG
37770: PUSH
37771: LD_INT 3
37773: NEG
37774: PUSH
37775: EMPTY
37776: LIST
37777: LIST
37778: PUSH
37779: LD_INT 1
37781: NEG
37782: PUSH
37783: LD_INT 3
37785: NEG
37786: PUSH
37787: EMPTY
37788: LIST
37789: LIST
37790: PUSH
37791: LD_INT 1
37793: PUSH
37794: LD_INT 2
37796: NEG
37797: PUSH
37798: EMPTY
37799: LIST
37800: LIST
37801: PUSH
37802: LD_INT 2
37804: PUSH
37805: LD_INT 1
37807: NEG
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: PUSH
37813: EMPTY
37814: LIST
37815: LIST
37816: LIST
37817: LIST
37818: LIST
37819: LIST
37820: LIST
37821: LIST
37822: LIST
37823: LIST
37824: LIST
37825: LIST
37826: LIST
37827: LIST
37828: LIST
37829: LIST
37830: LIST
37831: LIST
37832: LIST
37833: LIST
37834: LIST
37835: LIST
37836: LIST
37837: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
37838: LD_ADDR_VAR 0 24
37842: PUSH
37843: LD_INT 0
37845: PUSH
37846: LD_INT 0
37848: PUSH
37849: EMPTY
37850: LIST
37851: LIST
37852: PUSH
37853: LD_INT 0
37855: PUSH
37856: LD_INT 1
37858: NEG
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: LD_INT 1
37866: PUSH
37867: LD_INT 0
37869: PUSH
37870: EMPTY
37871: LIST
37872: LIST
37873: PUSH
37874: LD_INT 1
37876: PUSH
37877: LD_INT 1
37879: PUSH
37880: EMPTY
37881: LIST
37882: LIST
37883: PUSH
37884: LD_INT 0
37886: PUSH
37887: LD_INT 1
37889: PUSH
37890: EMPTY
37891: LIST
37892: LIST
37893: PUSH
37894: LD_INT 1
37896: NEG
37897: PUSH
37898: LD_INT 0
37900: PUSH
37901: EMPTY
37902: LIST
37903: LIST
37904: PUSH
37905: LD_INT 1
37907: NEG
37908: PUSH
37909: LD_INT 1
37911: NEG
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: PUSH
37917: LD_INT 1
37919: NEG
37920: PUSH
37921: LD_INT 2
37923: NEG
37924: PUSH
37925: EMPTY
37926: LIST
37927: LIST
37928: PUSH
37929: LD_INT 0
37931: PUSH
37932: LD_INT 2
37934: NEG
37935: PUSH
37936: EMPTY
37937: LIST
37938: LIST
37939: PUSH
37940: LD_INT 1
37942: PUSH
37943: LD_INT 1
37945: NEG
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: LD_INT 2
37953: PUSH
37954: LD_INT 0
37956: PUSH
37957: EMPTY
37958: LIST
37959: LIST
37960: PUSH
37961: LD_INT 2
37963: PUSH
37964: LD_INT 1
37966: PUSH
37967: EMPTY
37968: LIST
37969: LIST
37970: PUSH
37971: LD_INT 2
37973: PUSH
37974: LD_INT 2
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: PUSH
37981: LD_INT 1
37983: PUSH
37984: LD_INT 2
37986: PUSH
37987: EMPTY
37988: LIST
37989: LIST
37990: PUSH
37991: LD_INT 0
37993: PUSH
37994: LD_INT 2
37996: PUSH
37997: EMPTY
37998: LIST
37999: LIST
38000: PUSH
38001: LD_INT 1
38003: NEG
38004: PUSH
38005: LD_INT 1
38007: PUSH
38008: EMPTY
38009: LIST
38010: LIST
38011: PUSH
38012: LD_INT 2
38014: NEG
38015: PUSH
38016: LD_INT 0
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: PUSH
38023: LD_INT 2
38025: NEG
38026: PUSH
38027: LD_INT 1
38029: NEG
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PUSH
38035: LD_INT 2
38037: NEG
38038: PUSH
38039: LD_INT 2
38041: NEG
38042: PUSH
38043: EMPTY
38044: LIST
38045: LIST
38046: PUSH
38047: LD_INT 1
38049: PUSH
38050: LD_INT 2
38052: NEG
38053: PUSH
38054: EMPTY
38055: LIST
38056: LIST
38057: PUSH
38058: LD_INT 2
38060: PUSH
38061: LD_INT 1
38063: NEG
38064: PUSH
38065: EMPTY
38066: LIST
38067: LIST
38068: PUSH
38069: LD_INT 3
38071: PUSH
38072: LD_INT 1
38074: PUSH
38075: EMPTY
38076: LIST
38077: LIST
38078: PUSH
38079: LD_INT 3
38081: PUSH
38082: LD_INT 2
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: LIST
38093: LIST
38094: LIST
38095: LIST
38096: LIST
38097: LIST
38098: LIST
38099: LIST
38100: LIST
38101: LIST
38102: LIST
38103: LIST
38104: LIST
38105: LIST
38106: LIST
38107: LIST
38108: LIST
38109: LIST
38110: LIST
38111: LIST
38112: LIST
38113: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
38114: LD_ADDR_VAR 0 25
38118: PUSH
38119: LD_INT 0
38121: PUSH
38122: LD_INT 0
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: PUSH
38129: LD_INT 0
38131: PUSH
38132: LD_INT 1
38134: NEG
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: PUSH
38140: LD_INT 1
38142: PUSH
38143: LD_INT 0
38145: PUSH
38146: EMPTY
38147: LIST
38148: LIST
38149: PUSH
38150: LD_INT 1
38152: PUSH
38153: LD_INT 1
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: PUSH
38160: LD_INT 0
38162: PUSH
38163: LD_INT 1
38165: PUSH
38166: EMPTY
38167: LIST
38168: LIST
38169: PUSH
38170: LD_INT 1
38172: NEG
38173: PUSH
38174: LD_INT 0
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: PUSH
38181: LD_INT 1
38183: NEG
38184: PUSH
38185: LD_INT 1
38187: NEG
38188: PUSH
38189: EMPTY
38190: LIST
38191: LIST
38192: PUSH
38193: LD_INT 1
38195: NEG
38196: PUSH
38197: LD_INT 2
38199: NEG
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: PUSH
38205: LD_INT 0
38207: PUSH
38208: LD_INT 2
38210: NEG
38211: PUSH
38212: EMPTY
38213: LIST
38214: LIST
38215: PUSH
38216: LD_INT 1
38218: PUSH
38219: LD_INT 1
38221: NEG
38222: PUSH
38223: EMPTY
38224: LIST
38225: LIST
38226: PUSH
38227: LD_INT 2
38229: PUSH
38230: LD_INT 0
38232: PUSH
38233: EMPTY
38234: LIST
38235: LIST
38236: PUSH
38237: LD_INT 2
38239: PUSH
38240: LD_INT 1
38242: PUSH
38243: EMPTY
38244: LIST
38245: LIST
38246: PUSH
38247: LD_INT 2
38249: PUSH
38250: LD_INT 2
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PUSH
38257: LD_INT 1
38259: PUSH
38260: LD_INT 2
38262: PUSH
38263: EMPTY
38264: LIST
38265: LIST
38266: PUSH
38267: LD_INT 0
38269: PUSH
38270: LD_INT 2
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: PUSH
38277: LD_INT 1
38279: NEG
38280: PUSH
38281: LD_INT 1
38283: PUSH
38284: EMPTY
38285: LIST
38286: LIST
38287: PUSH
38288: LD_INT 2
38290: NEG
38291: PUSH
38292: LD_INT 0
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: LD_INT 2
38301: NEG
38302: PUSH
38303: LD_INT 1
38305: NEG
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: PUSH
38311: LD_INT 2
38313: NEG
38314: PUSH
38315: LD_INT 2
38317: NEG
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: PUSH
38323: LD_INT 3
38325: PUSH
38326: LD_INT 1
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: PUSH
38333: LD_INT 3
38335: PUSH
38336: LD_INT 2
38338: PUSH
38339: EMPTY
38340: LIST
38341: LIST
38342: PUSH
38343: LD_INT 2
38345: PUSH
38346: LD_INT 3
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: LD_INT 1
38355: PUSH
38356: LD_INT 3
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: LIST
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: LIST
38372: LIST
38373: LIST
38374: LIST
38375: LIST
38376: LIST
38377: LIST
38378: LIST
38379: LIST
38380: LIST
38381: LIST
38382: LIST
38383: LIST
38384: LIST
38385: LIST
38386: LIST
38387: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38388: LD_ADDR_VAR 0 26
38392: PUSH
38393: LD_INT 0
38395: PUSH
38396: LD_INT 0
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PUSH
38403: LD_INT 0
38405: PUSH
38406: LD_INT 1
38408: NEG
38409: PUSH
38410: EMPTY
38411: LIST
38412: LIST
38413: PUSH
38414: LD_INT 1
38416: PUSH
38417: LD_INT 0
38419: PUSH
38420: EMPTY
38421: LIST
38422: LIST
38423: PUSH
38424: LD_INT 1
38426: PUSH
38427: LD_INT 1
38429: PUSH
38430: EMPTY
38431: LIST
38432: LIST
38433: PUSH
38434: LD_INT 0
38436: PUSH
38437: LD_INT 1
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: PUSH
38444: LD_INT 1
38446: NEG
38447: PUSH
38448: LD_INT 0
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: PUSH
38455: LD_INT 1
38457: NEG
38458: PUSH
38459: LD_INT 1
38461: NEG
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 1
38469: NEG
38470: PUSH
38471: LD_INT 2
38473: NEG
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: PUSH
38479: LD_INT 0
38481: PUSH
38482: LD_INT 2
38484: NEG
38485: PUSH
38486: EMPTY
38487: LIST
38488: LIST
38489: PUSH
38490: LD_INT 1
38492: PUSH
38493: LD_INT 1
38495: NEG
38496: PUSH
38497: EMPTY
38498: LIST
38499: LIST
38500: PUSH
38501: LD_INT 2
38503: PUSH
38504: LD_INT 0
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: PUSH
38511: LD_INT 2
38513: PUSH
38514: LD_INT 1
38516: PUSH
38517: EMPTY
38518: LIST
38519: LIST
38520: PUSH
38521: LD_INT 2
38523: PUSH
38524: LD_INT 2
38526: PUSH
38527: EMPTY
38528: LIST
38529: LIST
38530: PUSH
38531: LD_INT 1
38533: PUSH
38534: LD_INT 2
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: PUSH
38541: LD_INT 0
38543: PUSH
38544: LD_INT 2
38546: PUSH
38547: EMPTY
38548: LIST
38549: LIST
38550: PUSH
38551: LD_INT 1
38553: NEG
38554: PUSH
38555: LD_INT 1
38557: PUSH
38558: EMPTY
38559: LIST
38560: LIST
38561: PUSH
38562: LD_INT 2
38564: NEG
38565: PUSH
38566: LD_INT 0
38568: PUSH
38569: EMPTY
38570: LIST
38571: LIST
38572: PUSH
38573: LD_INT 2
38575: NEG
38576: PUSH
38577: LD_INT 1
38579: NEG
38580: PUSH
38581: EMPTY
38582: LIST
38583: LIST
38584: PUSH
38585: LD_INT 2
38587: NEG
38588: PUSH
38589: LD_INT 2
38591: NEG
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: LD_INT 2
38599: PUSH
38600: LD_INT 3
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: LD_INT 1
38609: PUSH
38610: LD_INT 3
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: PUSH
38617: LD_INT 1
38619: NEG
38620: PUSH
38621: LD_INT 2
38623: PUSH
38624: EMPTY
38625: LIST
38626: LIST
38627: PUSH
38628: LD_INT 2
38630: NEG
38631: PUSH
38632: LD_INT 1
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: LIST
38647: LIST
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: LIST
38656: LIST
38657: LIST
38658: LIST
38659: LIST
38660: LIST
38661: LIST
38662: LIST
38663: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38664: LD_ADDR_VAR 0 27
38668: PUSH
38669: LD_INT 0
38671: PUSH
38672: LD_INT 0
38674: PUSH
38675: EMPTY
38676: LIST
38677: LIST
38678: PUSH
38679: LD_INT 0
38681: PUSH
38682: LD_INT 1
38684: NEG
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PUSH
38690: LD_INT 1
38692: PUSH
38693: LD_INT 0
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: PUSH
38700: LD_INT 1
38702: PUSH
38703: LD_INT 1
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: PUSH
38710: LD_INT 0
38712: PUSH
38713: LD_INT 1
38715: PUSH
38716: EMPTY
38717: LIST
38718: LIST
38719: PUSH
38720: LD_INT 1
38722: NEG
38723: PUSH
38724: LD_INT 0
38726: PUSH
38727: EMPTY
38728: LIST
38729: LIST
38730: PUSH
38731: LD_INT 1
38733: NEG
38734: PUSH
38735: LD_INT 1
38737: NEG
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: PUSH
38743: LD_INT 1
38745: NEG
38746: PUSH
38747: LD_INT 2
38749: NEG
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: PUSH
38755: LD_INT 0
38757: PUSH
38758: LD_INT 2
38760: NEG
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: PUSH
38766: LD_INT 1
38768: PUSH
38769: LD_INT 1
38771: NEG
38772: PUSH
38773: EMPTY
38774: LIST
38775: LIST
38776: PUSH
38777: LD_INT 2
38779: PUSH
38780: LD_INT 0
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: PUSH
38787: LD_INT 2
38789: PUSH
38790: LD_INT 1
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: PUSH
38797: LD_INT 2
38799: PUSH
38800: LD_INT 2
38802: PUSH
38803: EMPTY
38804: LIST
38805: LIST
38806: PUSH
38807: LD_INT 1
38809: PUSH
38810: LD_INT 2
38812: PUSH
38813: EMPTY
38814: LIST
38815: LIST
38816: PUSH
38817: LD_INT 0
38819: PUSH
38820: LD_INT 2
38822: PUSH
38823: EMPTY
38824: LIST
38825: LIST
38826: PUSH
38827: LD_INT 1
38829: NEG
38830: PUSH
38831: LD_INT 1
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PUSH
38838: LD_INT 2
38840: NEG
38841: PUSH
38842: LD_INT 0
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: LD_INT 2
38851: NEG
38852: PUSH
38853: LD_INT 1
38855: NEG
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 2
38863: NEG
38864: PUSH
38865: LD_INT 2
38867: NEG
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 1
38875: NEG
38876: PUSH
38877: LD_INT 2
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: PUSH
38884: LD_INT 2
38886: NEG
38887: PUSH
38888: LD_INT 1
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: LD_INT 3
38897: NEG
38898: PUSH
38899: LD_INT 1
38901: NEG
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: PUSH
38907: LD_INT 3
38909: NEG
38910: PUSH
38911: LD_INT 2
38913: NEG
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: PUSH
38919: EMPTY
38920: LIST
38921: LIST
38922: LIST
38923: LIST
38924: LIST
38925: LIST
38926: LIST
38927: LIST
38928: LIST
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: LIST
38942: LIST
38943: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38944: LD_ADDR_VAR 0 28
38948: PUSH
38949: LD_INT 0
38951: PUSH
38952: LD_INT 0
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: PUSH
38959: LD_INT 0
38961: PUSH
38962: LD_INT 1
38964: NEG
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: PUSH
38970: LD_INT 1
38972: PUSH
38973: LD_INT 0
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: PUSH
38980: LD_INT 1
38982: PUSH
38983: LD_INT 1
38985: PUSH
38986: EMPTY
38987: LIST
38988: LIST
38989: PUSH
38990: LD_INT 0
38992: PUSH
38993: LD_INT 1
38995: PUSH
38996: EMPTY
38997: LIST
38998: LIST
38999: PUSH
39000: LD_INT 1
39002: NEG
39003: PUSH
39004: LD_INT 0
39006: PUSH
39007: EMPTY
39008: LIST
39009: LIST
39010: PUSH
39011: LD_INT 1
39013: NEG
39014: PUSH
39015: LD_INT 1
39017: NEG
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: LD_INT 1
39025: NEG
39026: PUSH
39027: LD_INT 2
39029: NEG
39030: PUSH
39031: EMPTY
39032: LIST
39033: LIST
39034: PUSH
39035: LD_INT 0
39037: PUSH
39038: LD_INT 2
39040: NEG
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: LD_INT 1
39048: PUSH
39049: LD_INT 1
39051: NEG
39052: PUSH
39053: EMPTY
39054: LIST
39055: LIST
39056: PUSH
39057: LD_INT 2
39059: PUSH
39060: LD_INT 0
39062: PUSH
39063: EMPTY
39064: LIST
39065: LIST
39066: PUSH
39067: LD_INT 2
39069: PUSH
39070: LD_INT 1
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: PUSH
39077: LD_INT 2
39079: PUSH
39080: LD_INT 2
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: PUSH
39087: LD_INT 1
39089: PUSH
39090: LD_INT 2
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: PUSH
39097: LD_INT 0
39099: PUSH
39100: LD_INT 2
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: PUSH
39107: LD_INT 1
39109: NEG
39110: PUSH
39111: LD_INT 1
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: PUSH
39118: LD_INT 2
39120: NEG
39121: PUSH
39122: LD_INT 0
39124: PUSH
39125: EMPTY
39126: LIST
39127: LIST
39128: PUSH
39129: LD_INT 2
39131: NEG
39132: PUSH
39133: LD_INT 1
39135: NEG
39136: PUSH
39137: EMPTY
39138: LIST
39139: LIST
39140: PUSH
39141: LD_INT 2
39143: NEG
39144: PUSH
39145: LD_INT 2
39147: NEG
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: LD_INT 2
39155: NEG
39156: PUSH
39157: LD_INT 3
39159: NEG
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: PUSH
39165: LD_INT 1
39167: NEG
39168: PUSH
39169: LD_INT 3
39171: NEG
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: LD_INT 3
39179: NEG
39180: PUSH
39181: LD_INT 1
39183: NEG
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: PUSH
39189: LD_INT 3
39191: NEG
39192: PUSH
39193: LD_INT 2
39195: NEG
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: EMPTY
39202: LIST
39203: LIST
39204: LIST
39205: LIST
39206: LIST
39207: LIST
39208: LIST
39209: LIST
39210: LIST
39211: LIST
39212: LIST
39213: LIST
39214: LIST
39215: LIST
39216: LIST
39217: LIST
39218: LIST
39219: LIST
39220: LIST
39221: LIST
39222: LIST
39223: LIST
39224: LIST
39225: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39226: LD_ADDR_VAR 0 29
39230: PUSH
39231: LD_INT 0
39233: PUSH
39234: LD_INT 0
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: LD_INT 0
39243: PUSH
39244: LD_INT 1
39246: NEG
39247: PUSH
39248: EMPTY
39249: LIST
39250: LIST
39251: PUSH
39252: LD_INT 1
39254: PUSH
39255: LD_INT 0
39257: PUSH
39258: EMPTY
39259: LIST
39260: LIST
39261: PUSH
39262: LD_INT 1
39264: PUSH
39265: LD_INT 1
39267: PUSH
39268: EMPTY
39269: LIST
39270: LIST
39271: PUSH
39272: LD_INT 0
39274: PUSH
39275: LD_INT 1
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PUSH
39282: LD_INT 1
39284: NEG
39285: PUSH
39286: LD_INT 0
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: PUSH
39293: LD_INT 1
39295: NEG
39296: PUSH
39297: LD_INT 1
39299: NEG
39300: PUSH
39301: EMPTY
39302: LIST
39303: LIST
39304: PUSH
39305: LD_INT 1
39307: NEG
39308: PUSH
39309: LD_INT 2
39311: NEG
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: PUSH
39317: LD_INT 0
39319: PUSH
39320: LD_INT 2
39322: NEG
39323: PUSH
39324: EMPTY
39325: LIST
39326: LIST
39327: PUSH
39328: LD_INT 1
39330: PUSH
39331: LD_INT 1
39333: NEG
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PUSH
39339: LD_INT 2
39341: PUSH
39342: LD_INT 0
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: PUSH
39349: LD_INT 2
39351: PUSH
39352: LD_INT 1
39354: PUSH
39355: EMPTY
39356: LIST
39357: LIST
39358: PUSH
39359: LD_INT 1
39361: PUSH
39362: LD_INT 2
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: PUSH
39369: LD_INT 0
39371: PUSH
39372: LD_INT 2
39374: PUSH
39375: EMPTY
39376: LIST
39377: LIST
39378: PUSH
39379: LD_INT 1
39381: NEG
39382: PUSH
39383: LD_INT 1
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: LD_INT 2
39392: NEG
39393: PUSH
39394: LD_INT 1
39396: NEG
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PUSH
39402: LD_INT 2
39404: NEG
39405: PUSH
39406: LD_INT 2
39408: NEG
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 2
39416: NEG
39417: PUSH
39418: LD_INT 3
39420: NEG
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: PUSH
39426: LD_INT 2
39428: PUSH
39429: LD_INT 1
39431: NEG
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 3
39439: PUSH
39440: LD_INT 1
39442: PUSH
39443: EMPTY
39444: LIST
39445: LIST
39446: PUSH
39447: LD_INT 1
39449: PUSH
39450: LD_INT 3
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: LD_INT 1
39459: NEG
39460: PUSH
39461: LD_INT 2
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: LD_INT 3
39470: NEG
39471: PUSH
39472: LD_INT 2
39474: NEG
39475: PUSH
39476: EMPTY
39477: LIST
39478: LIST
39479: PUSH
39480: EMPTY
39481: LIST
39482: LIST
39483: LIST
39484: LIST
39485: LIST
39486: LIST
39487: LIST
39488: LIST
39489: LIST
39490: LIST
39491: LIST
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: LIST
39504: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39505: LD_ADDR_VAR 0 30
39509: PUSH
39510: LD_INT 0
39512: PUSH
39513: LD_INT 0
39515: PUSH
39516: EMPTY
39517: LIST
39518: LIST
39519: PUSH
39520: LD_INT 0
39522: PUSH
39523: LD_INT 1
39525: NEG
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: PUSH
39531: LD_INT 1
39533: PUSH
39534: LD_INT 0
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: LD_INT 1
39543: PUSH
39544: LD_INT 1
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: PUSH
39551: LD_INT 0
39553: PUSH
39554: LD_INT 1
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PUSH
39561: LD_INT 1
39563: NEG
39564: PUSH
39565: LD_INT 0
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: PUSH
39572: LD_INT 1
39574: NEG
39575: PUSH
39576: LD_INT 1
39578: NEG
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 1
39586: NEG
39587: PUSH
39588: LD_INT 2
39590: NEG
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: PUSH
39596: LD_INT 0
39598: PUSH
39599: LD_INT 2
39601: NEG
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: PUSH
39607: LD_INT 1
39609: PUSH
39610: LD_INT 1
39612: NEG
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: PUSH
39618: LD_INT 2
39620: PUSH
39621: LD_INT 0
39623: PUSH
39624: EMPTY
39625: LIST
39626: LIST
39627: PUSH
39628: LD_INT 2
39630: PUSH
39631: LD_INT 1
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 2
39640: PUSH
39641: LD_INT 2
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 1
39650: PUSH
39651: LD_INT 2
39653: PUSH
39654: EMPTY
39655: LIST
39656: LIST
39657: PUSH
39658: LD_INT 1
39660: NEG
39661: PUSH
39662: LD_INT 1
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PUSH
39669: LD_INT 2
39671: NEG
39672: PUSH
39673: LD_INT 0
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: PUSH
39680: LD_INT 2
39682: NEG
39683: PUSH
39684: LD_INT 1
39686: NEG
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: PUSH
39692: LD_INT 1
39694: NEG
39695: PUSH
39696: LD_INT 3
39698: NEG
39699: PUSH
39700: EMPTY
39701: LIST
39702: LIST
39703: PUSH
39704: LD_INT 1
39706: PUSH
39707: LD_INT 2
39709: NEG
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: PUSH
39715: LD_INT 3
39717: PUSH
39718: LD_INT 2
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: PUSH
39725: LD_INT 2
39727: PUSH
39728: LD_INT 3
39730: PUSH
39731: EMPTY
39732: LIST
39733: LIST
39734: PUSH
39735: LD_INT 2
39737: NEG
39738: PUSH
39739: LD_INT 1
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PUSH
39746: LD_INT 3
39748: NEG
39749: PUSH
39750: LD_INT 1
39752: NEG
39753: PUSH
39754: EMPTY
39755: LIST
39756: LIST
39757: PUSH
39758: EMPTY
39759: LIST
39760: LIST
39761: LIST
39762: LIST
39763: LIST
39764: LIST
39765: LIST
39766: LIST
39767: LIST
39768: LIST
39769: LIST
39770: LIST
39771: LIST
39772: LIST
39773: LIST
39774: LIST
39775: LIST
39776: LIST
39777: LIST
39778: LIST
39779: LIST
39780: LIST
39781: LIST
39782: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39783: LD_ADDR_VAR 0 31
39787: PUSH
39788: LD_INT 0
39790: PUSH
39791: LD_INT 0
39793: PUSH
39794: EMPTY
39795: LIST
39796: LIST
39797: PUSH
39798: LD_INT 0
39800: PUSH
39801: LD_INT 1
39803: NEG
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: PUSH
39809: LD_INT 1
39811: PUSH
39812: LD_INT 0
39814: PUSH
39815: EMPTY
39816: LIST
39817: LIST
39818: PUSH
39819: LD_INT 1
39821: PUSH
39822: LD_INT 1
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: PUSH
39829: LD_INT 0
39831: PUSH
39832: LD_INT 1
39834: PUSH
39835: EMPTY
39836: LIST
39837: LIST
39838: PUSH
39839: LD_INT 1
39841: NEG
39842: PUSH
39843: LD_INT 0
39845: PUSH
39846: EMPTY
39847: LIST
39848: LIST
39849: PUSH
39850: LD_INT 1
39852: NEG
39853: PUSH
39854: LD_INT 1
39856: NEG
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: PUSH
39862: LD_INT 1
39864: NEG
39865: PUSH
39866: LD_INT 2
39868: NEG
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PUSH
39874: LD_INT 1
39876: PUSH
39877: LD_INT 1
39879: NEG
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: LD_INT 2
39887: PUSH
39888: LD_INT 0
39890: PUSH
39891: EMPTY
39892: LIST
39893: LIST
39894: PUSH
39895: LD_INT 2
39897: PUSH
39898: LD_INT 1
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 2
39907: PUSH
39908: LD_INT 2
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: LD_INT 1
39917: PUSH
39918: LD_INT 2
39920: PUSH
39921: EMPTY
39922: LIST
39923: LIST
39924: PUSH
39925: LD_INT 0
39927: PUSH
39928: LD_INT 2
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: PUSH
39935: LD_INT 1
39937: NEG
39938: PUSH
39939: LD_INT 1
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: LD_INT 2
39948: NEG
39949: PUSH
39950: LD_INT 1
39952: NEG
39953: PUSH
39954: EMPTY
39955: LIST
39956: LIST
39957: PUSH
39958: LD_INT 2
39960: NEG
39961: PUSH
39962: LD_INT 2
39964: NEG
39965: PUSH
39966: EMPTY
39967: LIST
39968: LIST
39969: PUSH
39970: LD_INT 2
39972: NEG
39973: PUSH
39974: LD_INT 3
39976: NEG
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PUSH
39982: LD_INT 2
39984: PUSH
39985: LD_INT 1
39987: NEG
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: PUSH
39993: LD_INT 3
39995: PUSH
39996: LD_INT 1
39998: PUSH
39999: EMPTY
40000: LIST
40001: LIST
40002: PUSH
40003: LD_INT 1
40005: PUSH
40006: LD_INT 3
40008: PUSH
40009: EMPTY
40010: LIST
40011: LIST
40012: PUSH
40013: LD_INT 1
40015: NEG
40016: PUSH
40017: LD_INT 2
40019: PUSH
40020: EMPTY
40021: LIST
40022: LIST
40023: PUSH
40024: LD_INT 3
40026: NEG
40027: PUSH
40028: LD_INT 2
40030: NEG
40031: PUSH
40032: EMPTY
40033: LIST
40034: LIST
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40061: LD_ADDR_VAR 0 32
40065: PUSH
40066: LD_INT 0
40068: PUSH
40069: LD_INT 0
40071: PUSH
40072: EMPTY
40073: LIST
40074: LIST
40075: PUSH
40076: LD_INT 0
40078: PUSH
40079: LD_INT 1
40081: NEG
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: PUSH
40087: LD_INT 1
40089: PUSH
40090: LD_INT 0
40092: PUSH
40093: EMPTY
40094: LIST
40095: LIST
40096: PUSH
40097: LD_INT 1
40099: PUSH
40100: LD_INT 1
40102: PUSH
40103: EMPTY
40104: LIST
40105: LIST
40106: PUSH
40107: LD_INT 0
40109: PUSH
40110: LD_INT 1
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: LD_INT 1
40119: NEG
40120: PUSH
40121: LD_INT 0
40123: PUSH
40124: EMPTY
40125: LIST
40126: LIST
40127: PUSH
40128: LD_INT 1
40130: NEG
40131: PUSH
40132: LD_INT 1
40134: NEG
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 1
40142: NEG
40143: PUSH
40144: LD_INT 2
40146: NEG
40147: PUSH
40148: EMPTY
40149: LIST
40150: LIST
40151: PUSH
40152: LD_INT 0
40154: PUSH
40155: LD_INT 2
40157: NEG
40158: PUSH
40159: EMPTY
40160: LIST
40161: LIST
40162: PUSH
40163: LD_INT 1
40165: PUSH
40166: LD_INT 1
40168: NEG
40169: PUSH
40170: EMPTY
40171: LIST
40172: LIST
40173: PUSH
40174: LD_INT 2
40176: PUSH
40177: LD_INT 1
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 2
40186: PUSH
40187: LD_INT 2
40189: PUSH
40190: EMPTY
40191: LIST
40192: LIST
40193: PUSH
40194: LD_INT 1
40196: PUSH
40197: LD_INT 2
40199: PUSH
40200: EMPTY
40201: LIST
40202: LIST
40203: PUSH
40204: LD_INT 0
40206: PUSH
40207: LD_INT 2
40209: PUSH
40210: EMPTY
40211: LIST
40212: LIST
40213: PUSH
40214: LD_INT 1
40216: NEG
40217: PUSH
40218: LD_INT 1
40220: PUSH
40221: EMPTY
40222: LIST
40223: LIST
40224: PUSH
40225: LD_INT 2
40227: NEG
40228: PUSH
40229: LD_INT 0
40231: PUSH
40232: EMPTY
40233: LIST
40234: LIST
40235: PUSH
40236: LD_INT 2
40238: NEG
40239: PUSH
40240: LD_INT 1
40242: NEG
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 1
40250: NEG
40251: PUSH
40252: LD_INT 3
40254: NEG
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 1
40262: PUSH
40263: LD_INT 2
40265: NEG
40266: PUSH
40267: EMPTY
40268: LIST
40269: LIST
40270: PUSH
40271: LD_INT 3
40273: PUSH
40274: LD_INT 2
40276: PUSH
40277: EMPTY
40278: LIST
40279: LIST
40280: PUSH
40281: LD_INT 2
40283: PUSH
40284: LD_INT 3
40286: PUSH
40287: EMPTY
40288: LIST
40289: LIST
40290: PUSH
40291: LD_INT 2
40293: NEG
40294: PUSH
40295: LD_INT 1
40297: PUSH
40298: EMPTY
40299: LIST
40300: LIST
40301: PUSH
40302: LD_INT 3
40304: NEG
40305: PUSH
40306: LD_INT 1
40308: NEG
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PUSH
40314: EMPTY
40315: LIST
40316: LIST
40317: LIST
40318: LIST
40319: LIST
40320: LIST
40321: LIST
40322: LIST
40323: LIST
40324: LIST
40325: LIST
40326: LIST
40327: LIST
40328: LIST
40329: LIST
40330: LIST
40331: LIST
40332: LIST
40333: LIST
40334: LIST
40335: LIST
40336: LIST
40337: LIST
40338: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40339: LD_ADDR_VAR 0 33
40343: PUSH
40344: LD_INT 0
40346: PUSH
40347: LD_INT 0
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: LD_INT 0
40356: PUSH
40357: LD_INT 1
40359: NEG
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 1
40367: PUSH
40368: LD_INT 0
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 1
40377: PUSH
40378: LD_INT 1
40380: PUSH
40381: EMPTY
40382: LIST
40383: LIST
40384: PUSH
40385: LD_INT 0
40387: PUSH
40388: LD_INT 1
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PUSH
40395: LD_INT 1
40397: NEG
40398: PUSH
40399: LD_INT 0
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: LD_INT 1
40408: NEG
40409: PUSH
40410: LD_INT 1
40412: NEG
40413: PUSH
40414: EMPTY
40415: LIST
40416: LIST
40417: PUSH
40418: LD_INT 1
40420: NEG
40421: PUSH
40422: LD_INT 2
40424: NEG
40425: PUSH
40426: EMPTY
40427: LIST
40428: LIST
40429: PUSH
40430: LD_INT 1
40432: PUSH
40433: LD_INT 1
40435: NEG
40436: PUSH
40437: EMPTY
40438: LIST
40439: LIST
40440: PUSH
40441: LD_INT 2
40443: PUSH
40444: LD_INT 0
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: PUSH
40451: LD_INT 2
40453: PUSH
40454: LD_INT 1
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: PUSH
40461: LD_INT 1
40463: PUSH
40464: LD_INT 2
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: PUSH
40471: LD_INT 0
40473: PUSH
40474: LD_INT 2
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: LD_INT 1
40483: NEG
40484: PUSH
40485: LD_INT 1
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PUSH
40492: LD_INT 2
40494: NEG
40495: PUSH
40496: LD_INT 0
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PUSH
40503: LD_INT 2
40505: NEG
40506: PUSH
40507: LD_INT 1
40509: NEG
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 2
40517: NEG
40518: PUSH
40519: LD_INT 2
40521: NEG
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 2
40529: NEG
40530: PUSH
40531: LD_INT 3
40533: NEG
40534: PUSH
40535: EMPTY
40536: LIST
40537: LIST
40538: PUSH
40539: LD_INT 2
40541: PUSH
40542: LD_INT 1
40544: NEG
40545: PUSH
40546: EMPTY
40547: LIST
40548: LIST
40549: PUSH
40550: LD_INT 3
40552: PUSH
40553: LD_INT 1
40555: PUSH
40556: EMPTY
40557: LIST
40558: LIST
40559: PUSH
40560: LD_INT 1
40562: PUSH
40563: LD_INT 3
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: PUSH
40570: LD_INT 1
40572: NEG
40573: PUSH
40574: LD_INT 2
40576: PUSH
40577: EMPTY
40578: LIST
40579: LIST
40580: PUSH
40581: LD_INT 3
40583: NEG
40584: PUSH
40585: LD_INT 2
40587: NEG
40588: PUSH
40589: EMPTY
40590: LIST
40591: LIST
40592: PUSH
40593: EMPTY
40594: LIST
40595: LIST
40596: LIST
40597: LIST
40598: LIST
40599: LIST
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40618: LD_ADDR_VAR 0 34
40622: PUSH
40623: LD_INT 0
40625: PUSH
40626: LD_INT 0
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: LD_INT 0
40635: PUSH
40636: LD_INT 1
40638: NEG
40639: PUSH
40640: EMPTY
40641: LIST
40642: LIST
40643: PUSH
40644: LD_INT 1
40646: PUSH
40647: LD_INT 0
40649: PUSH
40650: EMPTY
40651: LIST
40652: LIST
40653: PUSH
40654: LD_INT 1
40656: PUSH
40657: LD_INT 1
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 0
40666: PUSH
40667: LD_INT 1
40669: PUSH
40670: EMPTY
40671: LIST
40672: LIST
40673: PUSH
40674: LD_INT 1
40676: NEG
40677: PUSH
40678: LD_INT 0
40680: PUSH
40681: EMPTY
40682: LIST
40683: LIST
40684: PUSH
40685: LD_INT 1
40687: NEG
40688: PUSH
40689: LD_INT 1
40691: NEG
40692: PUSH
40693: EMPTY
40694: LIST
40695: LIST
40696: PUSH
40697: LD_INT 1
40699: NEG
40700: PUSH
40701: LD_INT 2
40703: NEG
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PUSH
40709: LD_INT 0
40711: PUSH
40712: LD_INT 2
40714: NEG
40715: PUSH
40716: EMPTY
40717: LIST
40718: LIST
40719: PUSH
40720: LD_INT 1
40722: PUSH
40723: LD_INT 1
40725: NEG
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 2
40733: PUSH
40734: LD_INT 1
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: PUSH
40741: LD_INT 2
40743: PUSH
40744: LD_INT 2
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: LD_INT 1
40753: PUSH
40754: LD_INT 2
40756: PUSH
40757: EMPTY
40758: LIST
40759: LIST
40760: PUSH
40761: LD_INT 1
40763: NEG
40764: PUSH
40765: LD_INT 1
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: LD_INT 2
40774: NEG
40775: PUSH
40776: LD_INT 0
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 2
40785: NEG
40786: PUSH
40787: LD_INT 1
40789: NEG
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: PUSH
40795: LD_INT 2
40797: NEG
40798: PUSH
40799: LD_INT 2
40801: NEG
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PUSH
40807: LD_INT 1
40809: NEG
40810: PUSH
40811: LD_INT 3
40813: NEG
40814: PUSH
40815: EMPTY
40816: LIST
40817: LIST
40818: PUSH
40819: LD_INT 1
40821: PUSH
40822: LD_INT 2
40824: NEG
40825: PUSH
40826: EMPTY
40827: LIST
40828: LIST
40829: PUSH
40830: LD_INT 3
40832: PUSH
40833: LD_INT 2
40835: PUSH
40836: EMPTY
40837: LIST
40838: LIST
40839: PUSH
40840: LD_INT 2
40842: PUSH
40843: LD_INT 3
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 2
40852: NEG
40853: PUSH
40854: LD_INT 1
40856: PUSH
40857: EMPTY
40858: LIST
40859: LIST
40860: PUSH
40861: LD_INT 3
40863: NEG
40864: PUSH
40865: LD_INT 1
40867: NEG
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40898: LD_ADDR_VAR 0 35
40902: PUSH
40903: LD_INT 0
40905: PUSH
40906: LD_INT 0
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 0
40915: PUSH
40916: LD_INT 1
40918: NEG
40919: PUSH
40920: EMPTY
40921: LIST
40922: LIST
40923: PUSH
40924: LD_INT 1
40926: PUSH
40927: LD_INT 0
40929: PUSH
40930: EMPTY
40931: LIST
40932: LIST
40933: PUSH
40934: LD_INT 1
40936: PUSH
40937: LD_INT 1
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: PUSH
40944: LD_INT 0
40946: PUSH
40947: LD_INT 1
40949: PUSH
40950: EMPTY
40951: LIST
40952: LIST
40953: PUSH
40954: LD_INT 1
40956: NEG
40957: PUSH
40958: LD_INT 0
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: PUSH
40965: LD_INT 1
40967: NEG
40968: PUSH
40969: LD_INT 1
40971: NEG
40972: PUSH
40973: EMPTY
40974: LIST
40975: LIST
40976: PUSH
40977: LD_INT 2
40979: PUSH
40980: LD_INT 1
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: PUSH
40987: LD_INT 2
40989: NEG
40990: PUSH
40991: LD_INT 1
40993: NEG
40994: PUSH
40995: EMPTY
40996: LIST
40997: LIST
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: LIST
41003: LIST
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: LIST
41009: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41010: LD_ADDR_VAR 0 36
41014: PUSH
41015: LD_INT 0
41017: PUSH
41018: LD_INT 0
41020: PUSH
41021: EMPTY
41022: LIST
41023: LIST
41024: PUSH
41025: LD_INT 0
41027: PUSH
41028: LD_INT 1
41030: NEG
41031: PUSH
41032: EMPTY
41033: LIST
41034: LIST
41035: PUSH
41036: LD_INT 1
41038: PUSH
41039: LD_INT 0
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: LD_INT 1
41048: PUSH
41049: LD_INT 1
41051: PUSH
41052: EMPTY
41053: LIST
41054: LIST
41055: PUSH
41056: LD_INT 0
41058: PUSH
41059: LD_INT 1
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 1
41068: NEG
41069: PUSH
41070: LD_INT 0
41072: PUSH
41073: EMPTY
41074: LIST
41075: LIST
41076: PUSH
41077: LD_INT 1
41079: NEG
41080: PUSH
41081: LD_INT 1
41083: NEG
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: LD_INT 1
41091: NEG
41092: PUSH
41093: LD_INT 2
41095: NEG
41096: PUSH
41097: EMPTY
41098: LIST
41099: LIST
41100: PUSH
41101: LD_INT 1
41103: PUSH
41104: LD_INT 2
41106: PUSH
41107: EMPTY
41108: LIST
41109: LIST
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41122: LD_ADDR_VAR 0 37
41126: PUSH
41127: LD_INT 0
41129: PUSH
41130: LD_INT 0
41132: PUSH
41133: EMPTY
41134: LIST
41135: LIST
41136: PUSH
41137: LD_INT 0
41139: PUSH
41140: LD_INT 1
41142: NEG
41143: PUSH
41144: EMPTY
41145: LIST
41146: LIST
41147: PUSH
41148: LD_INT 1
41150: PUSH
41151: LD_INT 0
41153: PUSH
41154: EMPTY
41155: LIST
41156: LIST
41157: PUSH
41158: LD_INT 1
41160: PUSH
41161: LD_INT 1
41163: PUSH
41164: EMPTY
41165: LIST
41166: LIST
41167: PUSH
41168: LD_INT 0
41170: PUSH
41171: LD_INT 1
41173: PUSH
41174: EMPTY
41175: LIST
41176: LIST
41177: PUSH
41178: LD_INT 1
41180: NEG
41181: PUSH
41182: LD_INT 0
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 1
41191: NEG
41192: PUSH
41193: LD_INT 1
41195: NEG
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: LD_INT 1
41203: PUSH
41204: LD_INT 1
41206: NEG
41207: PUSH
41208: EMPTY
41209: LIST
41210: LIST
41211: PUSH
41212: LD_INT 1
41214: NEG
41215: PUSH
41216: LD_INT 1
41218: PUSH
41219: EMPTY
41220: LIST
41221: LIST
41222: PUSH
41223: EMPTY
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: LIST
41230: LIST
41231: LIST
41232: LIST
41233: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41234: LD_ADDR_VAR 0 38
41238: PUSH
41239: LD_INT 0
41241: PUSH
41242: LD_INT 0
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 0
41251: PUSH
41252: LD_INT 1
41254: NEG
41255: PUSH
41256: EMPTY
41257: LIST
41258: LIST
41259: PUSH
41260: LD_INT 1
41262: PUSH
41263: LD_INT 0
41265: PUSH
41266: EMPTY
41267: LIST
41268: LIST
41269: PUSH
41270: LD_INT 1
41272: PUSH
41273: LD_INT 1
41275: PUSH
41276: EMPTY
41277: LIST
41278: LIST
41279: PUSH
41280: LD_INT 0
41282: PUSH
41283: LD_INT 1
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 1
41292: NEG
41293: PUSH
41294: LD_INT 0
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 1
41303: NEG
41304: PUSH
41305: LD_INT 1
41307: NEG
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PUSH
41313: LD_INT 2
41315: PUSH
41316: LD_INT 1
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: LD_INT 2
41325: NEG
41326: PUSH
41327: LD_INT 1
41329: NEG
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: EMPTY
41336: LIST
41337: LIST
41338: LIST
41339: LIST
41340: LIST
41341: LIST
41342: LIST
41343: LIST
41344: LIST
41345: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41346: LD_ADDR_VAR 0 39
41350: PUSH
41351: LD_INT 0
41353: PUSH
41354: LD_INT 0
41356: PUSH
41357: EMPTY
41358: LIST
41359: LIST
41360: PUSH
41361: LD_INT 0
41363: PUSH
41364: LD_INT 1
41366: NEG
41367: PUSH
41368: EMPTY
41369: LIST
41370: LIST
41371: PUSH
41372: LD_INT 1
41374: PUSH
41375: LD_INT 0
41377: PUSH
41378: EMPTY
41379: LIST
41380: LIST
41381: PUSH
41382: LD_INT 1
41384: PUSH
41385: LD_INT 1
41387: PUSH
41388: EMPTY
41389: LIST
41390: LIST
41391: PUSH
41392: LD_INT 0
41394: PUSH
41395: LD_INT 1
41397: PUSH
41398: EMPTY
41399: LIST
41400: LIST
41401: PUSH
41402: LD_INT 1
41404: NEG
41405: PUSH
41406: LD_INT 0
41408: PUSH
41409: EMPTY
41410: LIST
41411: LIST
41412: PUSH
41413: LD_INT 1
41415: NEG
41416: PUSH
41417: LD_INT 1
41419: NEG
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: LD_INT 1
41427: NEG
41428: PUSH
41429: LD_INT 2
41431: NEG
41432: PUSH
41433: EMPTY
41434: LIST
41435: LIST
41436: PUSH
41437: LD_INT 1
41439: PUSH
41440: LD_INT 2
41442: PUSH
41443: EMPTY
41444: LIST
41445: LIST
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41458: LD_ADDR_VAR 0 40
41462: PUSH
41463: LD_INT 0
41465: PUSH
41466: LD_INT 0
41468: PUSH
41469: EMPTY
41470: LIST
41471: LIST
41472: PUSH
41473: LD_INT 0
41475: PUSH
41476: LD_INT 1
41478: NEG
41479: PUSH
41480: EMPTY
41481: LIST
41482: LIST
41483: PUSH
41484: LD_INT 1
41486: PUSH
41487: LD_INT 0
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 1
41496: PUSH
41497: LD_INT 1
41499: PUSH
41500: EMPTY
41501: LIST
41502: LIST
41503: PUSH
41504: LD_INT 0
41506: PUSH
41507: LD_INT 1
41509: PUSH
41510: EMPTY
41511: LIST
41512: LIST
41513: PUSH
41514: LD_INT 1
41516: NEG
41517: PUSH
41518: LD_INT 0
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: PUSH
41525: LD_INT 1
41527: NEG
41528: PUSH
41529: LD_INT 1
41531: NEG
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: PUSH
41537: LD_INT 1
41539: PUSH
41540: LD_INT 1
41542: NEG
41543: PUSH
41544: EMPTY
41545: LIST
41546: LIST
41547: PUSH
41548: LD_INT 1
41550: NEG
41551: PUSH
41552: LD_INT 1
41554: PUSH
41555: EMPTY
41556: LIST
41557: LIST
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: LIST
41565: LIST
41566: LIST
41567: LIST
41568: LIST
41569: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41570: LD_ADDR_VAR 0 41
41574: PUSH
41575: LD_INT 0
41577: PUSH
41578: LD_INT 0
41580: PUSH
41581: EMPTY
41582: LIST
41583: LIST
41584: PUSH
41585: LD_INT 0
41587: PUSH
41588: LD_INT 1
41590: NEG
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 1
41598: PUSH
41599: LD_INT 0
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: PUSH
41606: LD_INT 1
41608: PUSH
41609: LD_INT 1
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 0
41618: PUSH
41619: LD_INT 1
41621: PUSH
41622: EMPTY
41623: LIST
41624: LIST
41625: PUSH
41626: LD_INT 1
41628: NEG
41629: PUSH
41630: LD_INT 0
41632: PUSH
41633: EMPTY
41634: LIST
41635: LIST
41636: PUSH
41637: LD_INT 1
41639: NEG
41640: PUSH
41641: LD_INT 1
41643: NEG
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: PUSH
41649: LD_INT 1
41651: NEG
41652: PUSH
41653: LD_INT 2
41655: NEG
41656: PUSH
41657: EMPTY
41658: LIST
41659: LIST
41660: PUSH
41661: LD_INT 1
41663: PUSH
41664: LD_INT 1
41666: NEG
41667: PUSH
41668: EMPTY
41669: LIST
41670: LIST
41671: PUSH
41672: LD_INT 2
41674: PUSH
41675: LD_INT 0
41677: PUSH
41678: EMPTY
41679: LIST
41680: LIST
41681: PUSH
41682: LD_INT 2
41684: PUSH
41685: LD_INT 1
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: PUSH
41692: LD_INT 2
41694: PUSH
41695: LD_INT 2
41697: PUSH
41698: EMPTY
41699: LIST
41700: LIST
41701: PUSH
41702: LD_INT 1
41704: PUSH
41705: LD_INT 2
41707: PUSH
41708: EMPTY
41709: LIST
41710: LIST
41711: PUSH
41712: LD_INT 1
41714: NEG
41715: PUSH
41716: LD_INT 1
41718: PUSH
41719: EMPTY
41720: LIST
41721: LIST
41722: PUSH
41723: LD_INT 2
41725: NEG
41726: PUSH
41727: LD_INT 0
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 2
41736: NEG
41737: PUSH
41738: LD_INT 1
41740: NEG
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: LD_INT 2
41748: NEG
41749: PUSH
41750: LD_INT 2
41752: NEG
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 2
41760: NEG
41761: PUSH
41762: LD_INT 3
41764: NEG
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 2
41772: PUSH
41773: LD_INT 1
41775: NEG
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 3
41783: PUSH
41784: LD_INT 0
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: LD_INT 3
41793: PUSH
41794: LD_INT 1
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: PUSH
41801: LD_INT 3
41803: PUSH
41804: LD_INT 2
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 3
41813: PUSH
41814: LD_INT 3
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 2
41823: PUSH
41824: LD_INT 3
41826: PUSH
41827: EMPTY
41828: LIST
41829: LIST
41830: PUSH
41831: LD_INT 2
41833: NEG
41834: PUSH
41835: LD_INT 1
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 3
41844: NEG
41845: PUSH
41846: LD_INT 0
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: LD_INT 3
41855: NEG
41856: PUSH
41857: LD_INT 1
41859: NEG
41860: PUSH
41861: EMPTY
41862: LIST
41863: LIST
41864: PUSH
41865: LD_INT 3
41867: NEG
41868: PUSH
41869: LD_INT 2
41871: NEG
41872: PUSH
41873: EMPTY
41874: LIST
41875: LIST
41876: PUSH
41877: LD_INT 3
41879: NEG
41880: PUSH
41881: LD_INT 3
41883: NEG
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: LIST
41893: LIST
41894: LIST
41895: LIST
41896: LIST
41897: LIST
41898: LIST
41899: LIST
41900: LIST
41901: LIST
41902: LIST
41903: LIST
41904: LIST
41905: LIST
41906: LIST
41907: LIST
41908: LIST
41909: LIST
41910: LIST
41911: LIST
41912: LIST
41913: LIST
41914: LIST
41915: LIST
41916: LIST
41917: LIST
41918: LIST
41919: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41920: LD_ADDR_VAR 0 42
41924: PUSH
41925: LD_INT 0
41927: PUSH
41928: LD_INT 0
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 0
41937: PUSH
41938: LD_INT 1
41940: NEG
41941: PUSH
41942: EMPTY
41943: LIST
41944: LIST
41945: PUSH
41946: LD_INT 1
41948: PUSH
41949: LD_INT 0
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: PUSH
41956: LD_INT 1
41958: PUSH
41959: LD_INT 1
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 0
41968: PUSH
41969: LD_INT 1
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 1
41978: NEG
41979: PUSH
41980: LD_INT 0
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 1
41989: NEG
41990: PUSH
41991: LD_INT 1
41993: NEG
41994: PUSH
41995: EMPTY
41996: LIST
41997: LIST
41998: PUSH
41999: LD_INT 1
42001: NEG
42002: PUSH
42003: LD_INT 2
42005: NEG
42006: PUSH
42007: EMPTY
42008: LIST
42009: LIST
42010: PUSH
42011: LD_INT 0
42013: PUSH
42014: LD_INT 2
42016: NEG
42017: PUSH
42018: EMPTY
42019: LIST
42020: LIST
42021: PUSH
42022: LD_INT 1
42024: PUSH
42025: LD_INT 1
42027: NEG
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: PUSH
42033: LD_INT 2
42035: PUSH
42036: LD_INT 1
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 2
42045: PUSH
42046: LD_INT 2
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 1
42055: PUSH
42056: LD_INT 2
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 0
42065: PUSH
42066: LD_INT 2
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 1
42075: NEG
42076: PUSH
42077: LD_INT 1
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 2
42086: NEG
42087: PUSH
42088: LD_INT 1
42090: NEG
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: LD_INT 2
42098: NEG
42099: PUSH
42100: LD_INT 2
42102: NEG
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: LD_INT 2
42110: NEG
42111: PUSH
42112: LD_INT 3
42114: NEG
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: LD_INT 1
42122: NEG
42123: PUSH
42124: LD_INT 3
42126: NEG
42127: PUSH
42128: EMPTY
42129: LIST
42130: LIST
42131: PUSH
42132: LD_INT 0
42134: PUSH
42135: LD_INT 3
42137: NEG
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: PUSH
42143: LD_INT 1
42145: PUSH
42146: LD_INT 2
42148: NEG
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_INT 3
42156: PUSH
42157: LD_INT 2
42159: PUSH
42160: EMPTY
42161: LIST
42162: LIST
42163: PUSH
42164: LD_INT 3
42166: PUSH
42167: LD_INT 3
42169: PUSH
42170: EMPTY
42171: LIST
42172: LIST
42173: PUSH
42174: LD_INT 2
42176: PUSH
42177: LD_INT 3
42179: PUSH
42180: EMPTY
42181: LIST
42182: LIST
42183: PUSH
42184: LD_INT 1
42186: PUSH
42187: LD_INT 3
42189: PUSH
42190: EMPTY
42191: LIST
42192: LIST
42193: PUSH
42194: LD_INT 0
42196: PUSH
42197: LD_INT 3
42199: PUSH
42200: EMPTY
42201: LIST
42202: LIST
42203: PUSH
42204: LD_INT 1
42206: NEG
42207: PUSH
42208: LD_INT 2
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: LD_INT 3
42217: NEG
42218: PUSH
42219: LD_INT 2
42221: NEG
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 3
42229: NEG
42230: PUSH
42231: LD_INT 3
42233: NEG
42234: PUSH
42235: EMPTY
42236: LIST
42237: LIST
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: LIST
42243: LIST
42244: LIST
42245: LIST
42246: LIST
42247: LIST
42248: LIST
42249: LIST
42250: LIST
42251: LIST
42252: LIST
42253: LIST
42254: LIST
42255: LIST
42256: LIST
42257: LIST
42258: LIST
42259: LIST
42260: LIST
42261: LIST
42262: LIST
42263: LIST
42264: LIST
42265: LIST
42266: LIST
42267: LIST
42268: LIST
42269: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42270: LD_ADDR_VAR 0 43
42274: PUSH
42275: LD_INT 0
42277: PUSH
42278: LD_INT 0
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: LD_INT 0
42287: PUSH
42288: LD_INT 1
42290: NEG
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 1
42298: PUSH
42299: LD_INT 0
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: LD_INT 1
42308: PUSH
42309: LD_INT 1
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 0
42318: PUSH
42319: LD_INT 1
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 1
42328: NEG
42329: PUSH
42330: LD_INT 0
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 1
42339: NEG
42340: PUSH
42341: LD_INT 1
42343: NEG
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 1
42351: NEG
42352: PUSH
42353: LD_INT 2
42355: NEG
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 0
42363: PUSH
42364: LD_INT 2
42366: NEG
42367: PUSH
42368: EMPTY
42369: LIST
42370: LIST
42371: PUSH
42372: LD_INT 1
42374: PUSH
42375: LD_INT 1
42377: NEG
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 2
42385: PUSH
42386: LD_INT 0
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 2
42395: PUSH
42396: LD_INT 1
42398: PUSH
42399: EMPTY
42400: LIST
42401: LIST
42402: PUSH
42403: LD_INT 1
42405: PUSH
42406: LD_INT 2
42408: PUSH
42409: EMPTY
42410: LIST
42411: LIST
42412: PUSH
42413: LD_INT 0
42415: PUSH
42416: LD_INT 2
42418: PUSH
42419: EMPTY
42420: LIST
42421: LIST
42422: PUSH
42423: LD_INT 1
42425: NEG
42426: PUSH
42427: LD_INT 1
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 2
42436: NEG
42437: PUSH
42438: LD_INT 0
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 2
42447: NEG
42448: PUSH
42449: LD_INT 1
42451: NEG
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 1
42459: NEG
42460: PUSH
42461: LD_INT 3
42463: NEG
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: PUSH
42469: LD_INT 0
42471: PUSH
42472: LD_INT 3
42474: NEG
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 1
42482: PUSH
42483: LD_INT 2
42485: NEG
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: LD_INT 2
42493: PUSH
42494: LD_INT 1
42496: NEG
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 3
42504: PUSH
42505: LD_INT 0
42507: PUSH
42508: EMPTY
42509: LIST
42510: LIST
42511: PUSH
42512: LD_INT 3
42514: PUSH
42515: LD_INT 1
42517: PUSH
42518: EMPTY
42519: LIST
42520: LIST
42521: PUSH
42522: LD_INT 1
42524: PUSH
42525: LD_INT 3
42527: PUSH
42528: EMPTY
42529: LIST
42530: LIST
42531: PUSH
42532: LD_INT 0
42534: PUSH
42535: LD_INT 3
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 1
42544: NEG
42545: PUSH
42546: LD_INT 2
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 2
42555: NEG
42556: PUSH
42557: LD_INT 1
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: LD_INT 3
42566: NEG
42567: PUSH
42568: LD_INT 0
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_INT 3
42577: NEG
42578: PUSH
42579: LD_INT 1
42581: NEG
42582: PUSH
42583: EMPTY
42584: LIST
42585: LIST
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: LIST
42591: LIST
42592: LIST
42593: LIST
42594: LIST
42595: LIST
42596: LIST
42597: LIST
42598: LIST
42599: LIST
42600: LIST
42601: LIST
42602: LIST
42603: LIST
42604: LIST
42605: LIST
42606: LIST
42607: LIST
42608: LIST
42609: LIST
42610: LIST
42611: LIST
42612: LIST
42613: LIST
42614: LIST
42615: LIST
42616: LIST
42617: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42618: LD_ADDR_VAR 0 44
42622: PUSH
42623: LD_INT 0
42625: PUSH
42626: LD_INT 0
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: LD_INT 0
42635: PUSH
42636: LD_INT 1
42638: NEG
42639: PUSH
42640: EMPTY
42641: LIST
42642: LIST
42643: PUSH
42644: LD_INT 1
42646: PUSH
42647: LD_INT 0
42649: PUSH
42650: EMPTY
42651: LIST
42652: LIST
42653: PUSH
42654: LD_INT 1
42656: PUSH
42657: LD_INT 1
42659: PUSH
42660: EMPTY
42661: LIST
42662: LIST
42663: PUSH
42664: LD_INT 0
42666: PUSH
42667: LD_INT 1
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: PUSH
42674: LD_INT 1
42676: NEG
42677: PUSH
42678: LD_INT 0
42680: PUSH
42681: EMPTY
42682: LIST
42683: LIST
42684: PUSH
42685: LD_INT 1
42687: NEG
42688: PUSH
42689: LD_INT 1
42691: NEG
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: PUSH
42697: LD_INT 1
42699: NEG
42700: PUSH
42701: LD_INT 2
42703: NEG
42704: PUSH
42705: EMPTY
42706: LIST
42707: LIST
42708: PUSH
42709: LD_INT 1
42711: PUSH
42712: LD_INT 1
42714: NEG
42715: PUSH
42716: EMPTY
42717: LIST
42718: LIST
42719: PUSH
42720: LD_INT 2
42722: PUSH
42723: LD_INT 0
42725: PUSH
42726: EMPTY
42727: LIST
42728: LIST
42729: PUSH
42730: LD_INT 2
42732: PUSH
42733: LD_INT 1
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: LD_INT 2
42742: PUSH
42743: LD_INT 2
42745: PUSH
42746: EMPTY
42747: LIST
42748: LIST
42749: PUSH
42750: LD_INT 1
42752: PUSH
42753: LD_INT 2
42755: PUSH
42756: EMPTY
42757: LIST
42758: LIST
42759: PUSH
42760: LD_INT 1
42762: NEG
42763: PUSH
42764: LD_INT 1
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: LD_INT 2
42773: NEG
42774: PUSH
42775: LD_INT 0
42777: PUSH
42778: EMPTY
42779: LIST
42780: LIST
42781: PUSH
42782: LD_INT 2
42784: NEG
42785: PUSH
42786: LD_INT 1
42788: NEG
42789: PUSH
42790: EMPTY
42791: LIST
42792: LIST
42793: PUSH
42794: LD_INT 2
42796: NEG
42797: PUSH
42798: LD_INT 2
42800: NEG
42801: PUSH
42802: EMPTY
42803: LIST
42804: LIST
42805: PUSH
42806: LD_INT 2
42808: NEG
42809: PUSH
42810: LD_INT 3
42812: NEG
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 2
42820: PUSH
42821: LD_INT 1
42823: NEG
42824: PUSH
42825: EMPTY
42826: LIST
42827: LIST
42828: PUSH
42829: LD_INT 3
42831: PUSH
42832: LD_INT 0
42834: PUSH
42835: EMPTY
42836: LIST
42837: LIST
42838: PUSH
42839: LD_INT 3
42841: PUSH
42842: LD_INT 1
42844: PUSH
42845: EMPTY
42846: LIST
42847: LIST
42848: PUSH
42849: LD_INT 3
42851: PUSH
42852: LD_INT 2
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: LD_INT 3
42861: PUSH
42862: LD_INT 3
42864: PUSH
42865: EMPTY
42866: LIST
42867: LIST
42868: PUSH
42869: LD_INT 2
42871: PUSH
42872: LD_INT 3
42874: PUSH
42875: EMPTY
42876: LIST
42877: LIST
42878: PUSH
42879: LD_INT 2
42881: NEG
42882: PUSH
42883: LD_INT 1
42885: PUSH
42886: EMPTY
42887: LIST
42888: LIST
42889: PUSH
42890: LD_INT 3
42892: NEG
42893: PUSH
42894: LD_INT 0
42896: PUSH
42897: EMPTY
42898: LIST
42899: LIST
42900: PUSH
42901: LD_INT 3
42903: NEG
42904: PUSH
42905: LD_INT 1
42907: NEG
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: PUSH
42913: LD_INT 3
42915: NEG
42916: PUSH
42917: LD_INT 2
42919: NEG
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 3
42927: NEG
42928: PUSH
42929: LD_INT 3
42931: NEG
42932: PUSH
42933: EMPTY
42934: LIST
42935: LIST
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: LIST
42941: LIST
42942: LIST
42943: LIST
42944: LIST
42945: LIST
42946: LIST
42947: LIST
42948: LIST
42949: LIST
42950: LIST
42951: LIST
42952: LIST
42953: LIST
42954: LIST
42955: LIST
42956: LIST
42957: LIST
42958: LIST
42959: LIST
42960: LIST
42961: LIST
42962: LIST
42963: LIST
42964: LIST
42965: LIST
42966: LIST
42967: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42968: LD_ADDR_VAR 0 45
42972: PUSH
42973: LD_INT 0
42975: PUSH
42976: LD_INT 0
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 0
42985: PUSH
42986: LD_INT 1
42988: NEG
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 1
42996: PUSH
42997: LD_INT 0
42999: PUSH
43000: EMPTY
43001: LIST
43002: LIST
43003: PUSH
43004: LD_INT 1
43006: PUSH
43007: LD_INT 1
43009: PUSH
43010: EMPTY
43011: LIST
43012: LIST
43013: PUSH
43014: LD_INT 0
43016: PUSH
43017: LD_INT 1
43019: PUSH
43020: EMPTY
43021: LIST
43022: LIST
43023: PUSH
43024: LD_INT 1
43026: NEG
43027: PUSH
43028: LD_INT 0
43030: PUSH
43031: EMPTY
43032: LIST
43033: LIST
43034: PUSH
43035: LD_INT 1
43037: NEG
43038: PUSH
43039: LD_INT 1
43041: NEG
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 1
43049: NEG
43050: PUSH
43051: LD_INT 2
43053: NEG
43054: PUSH
43055: EMPTY
43056: LIST
43057: LIST
43058: PUSH
43059: LD_INT 0
43061: PUSH
43062: LD_INT 2
43064: NEG
43065: PUSH
43066: EMPTY
43067: LIST
43068: LIST
43069: PUSH
43070: LD_INT 1
43072: PUSH
43073: LD_INT 1
43075: NEG
43076: PUSH
43077: EMPTY
43078: LIST
43079: LIST
43080: PUSH
43081: LD_INT 2
43083: PUSH
43084: LD_INT 1
43086: PUSH
43087: EMPTY
43088: LIST
43089: LIST
43090: PUSH
43091: LD_INT 2
43093: PUSH
43094: LD_INT 2
43096: PUSH
43097: EMPTY
43098: LIST
43099: LIST
43100: PUSH
43101: LD_INT 1
43103: PUSH
43104: LD_INT 2
43106: PUSH
43107: EMPTY
43108: LIST
43109: LIST
43110: PUSH
43111: LD_INT 0
43113: PUSH
43114: LD_INT 2
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 1
43123: NEG
43124: PUSH
43125: LD_INT 1
43127: PUSH
43128: EMPTY
43129: LIST
43130: LIST
43131: PUSH
43132: LD_INT 2
43134: NEG
43135: PUSH
43136: LD_INT 1
43138: NEG
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 2
43146: NEG
43147: PUSH
43148: LD_INT 2
43150: NEG
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 2
43158: NEG
43159: PUSH
43160: LD_INT 3
43162: NEG
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 1
43170: NEG
43171: PUSH
43172: LD_INT 3
43174: NEG
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 0
43182: PUSH
43183: LD_INT 3
43185: NEG
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: LD_INT 1
43193: PUSH
43194: LD_INT 2
43196: NEG
43197: PUSH
43198: EMPTY
43199: LIST
43200: LIST
43201: PUSH
43202: LD_INT 3
43204: PUSH
43205: LD_INT 2
43207: PUSH
43208: EMPTY
43209: LIST
43210: LIST
43211: PUSH
43212: LD_INT 3
43214: PUSH
43215: LD_INT 3
43217: PUSH
43218: EMPTY
43219: LIST
43220: LIST
43221: PUSH
43222: LD_INT 2
43224: PUSH
43225: LD_INT 3
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 1
43234: PUSH
43235: LD_INT 3
43237: PUSH
43238: EMPTY
43239: LIST
43240: LIST
43241: PUSH
43242: LD_INT 0
43244: PUSH
43245: LD_INT 3
43247: PUSH
43248: EMPTY
43249: LIST
43250: LIST
43251: PUSH
43252: LD_INT 1
43254: NEG
43255: PUSH
43256: LD_INT 2
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: LD_INT 3
43265: NEG
43266: PUSH
43267: LD_INT 2
43269: NEG
43270: PUSH
43271: EMPTY
43272: LIST
43273: LIST
43274: PUSH
43275: LD_INT 3
43277: NEG
43278: PUSH
43279: LD_INT 3
43281: NEG
43282: PUSH
43283: EMPTY
43284: LIST
43285: LIST
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: LIST
43291: LIST
43292: LIST
43293: LIST
43294: LIST
43295: LIST
43296: LIST
43297: LIST
43298: LIST
43299: LIST
43300: LIST
43301: LIST
43302: LIST
43303: LIST
43304: LIST
43305: LIST
43306: LIST
43307: LIST
43308: LIST
43309: LIST
43310: LIST
43311: LIST
43312: LIST
43313: LIST
43314: LIST
43315: LIST
43316: LIST
43317: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43318: LD_ADDR_VAR 0 46
43322: PUSH
43323: LD_INT 0
43325: PUSH
43326: LD_INT 0
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 0
43335: PUSH
43336: LD_INT 1
43338: NEG
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 1
43346: PUSH
43347: LD_INT 0
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: LD_INT 1
43356: PUSH
43357: LD_INT 1
43359: PUSH
43360: EMPTY
43361: LIST
43362: LIST
43363: PUSH
43364: LD_INT 0
43366: PUSH
43367: LD_INT 1
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: LD_INT 1
43376: NEG
43377: PUSH
43378: LD_INT 0
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 1
43387: NEG
43388: PUSH
43389: LD_INT 1
43391: NEG
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: PUSH
43397: LD_INT 1
43399: NEG
43400: PUSH
43401: LD_INT 2
43403: NEG
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 0
43411: PUSH
43412: LD_INT 2
43414: NEG
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 1
43422: PUSH
43423: LD_INT 1
43425: NEG
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 2
43433: PUSH
43434: LD_INT 0
43436: PUSH
43437: EMPTY
43438: LIST
43439: LIST
43440: PUSH
43441: LD_INT 2
43443: PUSH
43444: LD_INT 1
43446: PUSH
43447: EMPTY
43448: LIST
43449: LIST
43450: PUSH
43451: LD_INT 1
43453: PUSH
43454: LD_INT 2
43456: PUSH
43457: EMPTY
43458: LIST
43459: LIST
43460: PUSH
43461: LD_INT 0
43463: PUSH
43464: LD_INT 2
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: LD_INT 1
43473: NEG
43474: PUSH
43475: LD_INT 1
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 2
43484: NEG
43485: PUSH
43486: LD_INT 0
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 2
43495: NEG
43496: PUSH
43497: LD_INT 1
43499: NEG
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 1
43507: NEG
43508: PUSH
43509: LD_INT 3
43511: NEG
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 0
43519: PUSH
43520: LD_INT 3
43522: NEG
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 1
43530: PUSH
43531: LD_INT 2
43533: NEG
43534: PUSH
43535: EMPTY
43536: LIST
43537: LIST
43538: PUSH
43539: LD_INT 2
43541: PUSH
43542: LD_INT 1
43544: NEG
43545: PUSH
43546: EMPTY
43547: LIST
43548: LIST
43549: PUSH
43550: LD_INT 3
43552: PUSH
43553: LD_INT 0
43555: PUSH
43556: EMPTY
43557: LIST
43558: LIST
43559: PUSH
43560: LD_INT 3
43562: PUSH
43563: LD_INT 1
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: LD_INT 1
43572: PUSH
43573: LD_INT 3
43575: PUSH
43576: EMPTY
43577: LIST
43578: LIST
43579: PUSH
43580: LD_INT 0
43582: PUSH
43583: LD_INT 3
43585: PUSH
43586: EMPTY
43587: LIST
43588: LIST
43589: PUSH
43590: LD_INT 1
43592: NEG
43593: PUSH
43594: LD_INT 2
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: LD_INT 2
43603: NEG
43604: PUSH
43605: LD_INT 1
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: PUSH
43612: LD_INT 3
43614: NEG
43615: PUSH
43616: LD_INT 0
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 3
43625: NEG
43626: PUSH
43627: LD_INT 1
43629: NEG
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: LIST
43639: LIST
43640: LIST
43641: LIST
43642: LIST
43643: LIST
43644: LIST
43645: LIST
43646: LIST
43647: LIST
43648: LIST
43649: LIST
43650: LIST
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: LIST
43664: LIST
43665: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43666: LD_ADDR_VAR 0 47
43670: PUSH
43671: LD_INT 0
43673: PUSH
43674: LD_INT 0
43676: PUSH
43677: EMPTY
43678: LIST
43679: LIST
43680: PUSH
43681: LD_INT 0
43683: PUSH
43684: LD_INT 1
43686: NEG
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 1
43694: PUSH
43695: LD_INT 0
43697: PUSH
43698: EMPTY
43699: LIST
43700: LIST
43701: PUSH
43702: LD_INT 1
43704: PUSH
43705: LD_INT 1
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: LD_INT 0
43714: PUSH
43715: LD_INT 1
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 1
43724: NEG
43725: PUSH
43726: LD_INT 0
43728: PUSH
43729: EMPTY
43730: LIST
43731: LIST
43732: PUSH
43733: LD_INT 1
43735: NEG
43736: PUSH
43737: LD_INT 1
43739: NEG
43740: PUSH
43741: EMPTY
43742: LIST
43743: LIST
43744: PUSH
43745: LD_INT 1
43747: NEG
43748: PUSH
43749: LD_INT 2
43751: NEG
43752: PUSH
43753: EMPTY
43754: LIST
43755: LIST
43756: PUSH
43757: LD_INT 0
43759: PUSH
43760: LD_INT 2
43762: NEG
43763: PUSH
43764: EMPTY
43765: LIST
43766: LIST
43767: PUSH
43768: LD_INT 1
43770: PUSH
43771: LD_INT 1
43773: NEG
43774: PUSH
43775: EMPTY
43776: LIST
43777: LIST
43778: PUSH
43779: LD_INT 2
43781: NEG
43782: PUSH
43783: LD_INT 1
43785: NEG
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: LD_INT 2
43793: NEG
43794: PUSH
43795: LD_INT 2
43797: NEG
43798: PUSH
43799: EMPTY
43800: LIST
43801: LIST
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: LIST
43807: LIST
43808: LIST
43809: LIST
43810: LIST
43811: LIST
43812: LIST
43813: LIST
43814: LIST
43815: LIST
43816: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43817: LD_ADDR_VAR 0 48
43821: PUSH
43822: LD_INT 0
43824: PUSH
43825: LD_INT 0
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 0
43834: PUSH
43835: LD_INT 1
43837: NEG
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 1
43845: PUSH
43846: LD_INT 0
43848: PUSH
43849: EMPTY
43850: LIST
43851: LIST
43852: PUSH
43853: LD_INT 1
43855: PUSH
43856: LD_INT 1
43858: PUSH
43859: EMPTY
43860: LIST
43861: LIST
43862: PUSH
43863: LD_INT 0
43865: PUSH
43866: LD_INT 1
43868: PUSH
43869: EMPTY
43870: LIST
43871: LIST
43872: PUSH
43873: LD_INT 1
43875: NEG
43876: PUSH
43877: LD_INT 0
43879: PUSH
43880: EMPTY
43881: LIST
43882: LIST
43883: PUSH
43884: LD_INT 1
43886: NEG
43887: PUSH
43888: LD_INT 1
43890: NEG
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 1
43898: NEG
43899: PUSH
43900: LD_INT 2
43902: NEG
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 0
43910: PUSH
43911: LD_INT 2
43913: NEG
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: PUSH
43919: LD_INT 1
43921: PUSH
43922: LD_INT 1
43924: NEG
43925: PUSH
43926: EMPTY
43927: LIST
43928: LIST
43929: PUSH
43930: LD_INT 2
43932: PUSH
43933: LD_INT 0
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 2
43942: PUSH
43943: LD_INT 1
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: EMPTY
43951: LIST
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43964: LD_ADDR_VAR 0 49
43968: PUSH
43969: LD_INT 0
43971: PUSH
43972: LD_INT 0
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 0
43981: PUSH
43982: LD_INT 1
43984: NEG
43985: PUSH
43986: EMPTY
43987: LIST
43988: LIST
43989: PUSH
43990: LD_INT 1
43992: PUSH
43993: LD_INT 0
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 1
44002: PUSH
44003: LD_INT 1
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 0
44012: PUSH
44013: LD_INT 1
44015: PUSH
44016: EMPTY
44017: LIST
44018: LIST
44019: PUSH
44020: LD_INT 1
44022: NEG
44023: PUSH
44024: LD_INT 0
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 1
44033: NEG
44034: PUSH
44035: LD_INT 1
44037: NEG
44038: PUSH
44039: EMPTY
44040: LIST
44041: LIST
44042: PUSH
44043: LD_INT 1
44045: PUSH
44046: LD_INT 1
44048: NEG
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 2
44056: PUSH
44057: LD_INT 0
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 2
44066: PUSH
44067: LD_INT 1
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 2
44076: PUSH
44077: LD_INT 2
44079: PUSH
44080: EMPTY
44081: LIST
44082: LIST
44083: PUSH
44084: LD_INT 1
44086: PUSH
44087: LD_INT 2
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44108: LD_ADDR_VAR 0 50
44112: PUSH
44113: LD_INT 0
44115: PUSH
44116: LD_INT 0
44118: PUSH
44119: EMPTY
44120: LIST
44121: LIST
44122: PUSH
44123: LD_INT 0
44125: PUSH
44126: LD_INT 1
44128: NEG
44129: PUSH
44130: EMPTY
44131: LIST
44132: LIST
44133: PUSH
44134: LD_INT 1
44136: PUSH
44137: LD_INT 0
44139: PUSH
44140: EMPTY
44141: LIST
44142: LIST
44143: PUSH
44144: LD_INT 1
44146: PUSH
44147: LD_INT 1
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: PUSH
44154: LD_INT 0
44156: PUSH
44157: LD_INT 1
44159: PUSH
44160: EMPTY
44161: LIST
44162: LIST
44163: PUSH
44164: LD_INT 1
44166: NEG
44167: PUSH
44168: LD_INT 0
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: PUSH
44175: LD_INT 1
44177: NEG
44178: PUSH
44179: LD_INT 1
44181: NEG
44182: PUSH
44183: EMPTY
44184: LIST
44185: LIST
44186: PUSH
44187: LD_INT 2
44189: PUSH
44190: LD_INT 1
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 2
44199: PUSH
44200: LD_INT 2
44202: PUSH
44203: EMPTY
44204: LIST
44205: LIST
44206: PUSH
44207: LD_INT 1
44209: PUSH
44210: LD_INT 2
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: PUSH
44217: LD_INT 0
44219: PUSH
44220: LD_INT 2
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 1
44229: NEG
44230: PUSH
44231: LD_INT 1
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44252: LD_ADDR_VAR 0 51
44256: PUSH
44257: LD_INT 0
44259: PUSH
44260: LD_INT 0
44262: PUSH
44263: EMPTY
44264: LIST
44265: LIST
44266: PUSH
44267: LD_INT 0
44269: PUSH
44270: LD_INT 1
44272: NEG
44273: PUSH
44274: EMPTY
44275: LIST
44276: LIST
44277: PUSH
44278: LD_INT 1
44280: PUSH
44281: LD_INT 0
44283: PUSH
44284: EMPTY
44285: LIST
44286: LIST
44287: PUSH
44288: LD_INT 1
44290: PUSH
44291: LD_INT 1
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 0
44300: PUSH
44301: LD_INT 1
44303: PUSH
44304: EMPTY
44305: LIST
44306: LIST
44307: PUSH
44308: LD_INT 1
44310: NEG
44311: PUSH
44312: LD_INT 0
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: PUSH
44319: LD_INT 1
44321: NEG
44322: PUSH
44323: LD_INT 1
44325: NEG
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 1
44333: PUSH
44334: LD_INT 2
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 0
44343: PUSH
44344: LD_INT 2
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 1
44353: NEG
44354: PUSH
44355: LD_INT 1
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 2
44364: NEG
44365: PUSH
44366: LD_INT 0
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 2
44375: NEG
44376: PUSH
44377: LD_INT 1
44379: NEG
44380: PUSH
44381: EMPTY
44382: LIST
44383: LIST
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44399: LD_ADDR_VAR 0 52
44403: PUSH
44404: LD_INT 0
44406: PUSH
44407: LD_INT 0
44409: PUSH
44410: EMPTY
44411: LIST
44412: LIST
44413: PUSH
44414: LD_INT 0
44416: PUSH
44417: LD_INT 1
44419: NEG
44420: PUSH
44421: EMPTY
44422: LIST
44423: LIST
44424: PUSH
44425: LD_INT 1
44427: PUSH
44428: LD_INT 0
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 1
44437: PUSH
44438: LD_INT 1
44440: PUSH
44441: EMPTY
44442: LIST
44443: LIST
44444: PUSH
44445: LD_INT 0
44447: PUSH
44448: LD_INT 1
44450: PUSH
44451: EMPTY
44452: LIST
44453: LIST
44454: PUSH
44455: LD_INT 1
44457: NEG
44458: PUSH
44459: LD_INT 0
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 1
44468: NEG
44469: PUSH
44470: LD_INT 1
44472: NEG
44473: PUSH
44474: EMPTY
44475: LIST
44476: LIST
44477: PUSH
44478: LD_INT 1
44480: NEG
44481: PUSH
44482: LD_INT 2
44484: NEG
44485: PUSH
44486: EMPTY
44487: LIST
44488: LIST
44489: PUSH
44490: LD_INT 1
44492: NEG
44493: PUSH
44494: LD_INT 1
44496: PUSH
44497: EMPTY
44498: LIST
44499: LIST
44500: PUSH
44501: LD_INT 2
44503: NEG
44504: PUSH
44505: LD_INT 0
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 2
44514: NEG
44515: PUSH
44516: LD_INT 1
44518: NEG
44519: PUSH
44520: EMPTY
44521: LIST
44522: LIST
44523: PUSH
44524: LD_INT 2
44526: NEG
44527: PUSH
44528: LD_INT 2
44530: NEG
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: EMPTY
44537: LIST
44538: LIST
44539: LIST
44540: LIST
44541: LIST
44542: LIST
44543: LIST
44544: LIST
44545: LIST
44546: LIST
44547: LIST
44548: LIST
44549: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44550: LD_ADDR_VAR 0 53
44554: PUSH
44555: LD_INT 0
44557: PUSH
44558: LD_INT 0
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 0
44567: PUSH
44568: LD_INT 1
44570: NEG
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 1
44578: PUSH
44579: LD_INT 0
44581: PUSH
44582: EMPTY
44583: LIST
44584: LIST
44585: PUSH
44586: LD_INT 1
44588: PUSH
44589: LD_INT 1
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 0
44598: PUSH
44599: LD_INT 1
44601: PUSH
44602: EMPTY
44603: LIST
44604: LIST
44605: PUSH
44606: LD_INT 1
44608: NEG
44609: PUSH
44610: LD_INT 0
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: PUSH
44617: LD_INT 1
44619: NEG
44620: PUSH
44621: LD_INT 1
44623: NEG
44624: PUSH
44625: EMPTY
44626: LIST
44627: LIST
44628: PUSH
44629: LD_INT 1
44631: NEG
44632: PUSH
44633: LD_INT 2
44635: NEG
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 0
44643: PUSH
44644: LD_INT 2
44646: NEG
44647: PUSH
44648: EMPTY
44649: LIST
44650: LIST
44651: PUSH
44652: LD_INT 1
44654: PUSH
44655: LD_INT 1
44657: NEG
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 2
44665: PUSH
44666: LD_INT 0
44668: PUSH
44669: EMPTY
44670: LIST
44671: LIST
44672: PUSH
44673: LD_INT 2
44675: PUSH
44676: LD_INT 1
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 2
44685: PUSH
44686: LD_INT 2
44688: PUSH
44689: EMPTY
44690: LIST
44691: LIST
44692: PUSH
44693: LD_INT 1
44695: PUSH
44696: LD_INT 2
44698: PUSH
44699: EMPTY
44700: LIST
44701: LIST
44702: PUSH
44703: LD_INT 0
44705: PUSH
44706: LD_INT 2
44708: PUSH
44709: EMPTY
44710: LIST
44711: LIST
44712: PUSH
44713: LD_INT 1
44715: NEG
44716: PUSH
44717: LD_INT 1
44719: PUSH
44720: EMPTY
44721: LIST
44722: LIST
44723: PUSH
44724: LD_INT 2
44726: NEG
44727: PUSH
44728: LD_INT 0
44730: PUSH
44731: EMPTY
44732: LIST
44733: LIST
44734: PUSH
44735: LD_INT 2
44737: NEG
44738: PUSH
44739: LD_INT 1
44741: NEG
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 2
44749: NEG
44750: PUSH
44751: LD_INT 2
44753: NEG
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: LIST
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44780: LD_ADDR_VAR 0 54
44784: PUSH
44785: LD_INT 0
44787: PUSH
44788: LD_INT 0
44790: PUSH
44791: EMPTY
44792: LIST
44793: LIST
44794: PUSH
44795: LD_INT 0
44797: PUSH
44798: LD_INT 1
44800: NEG
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 1
44808: PUSH
44809: LD_INT 0
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 1
44818: PUSH
44819: LD_INT 1
44821: PUSH
44822: EMPTY
44823: LIST
44824: LIST
44825: PUSH
44826: LD_INT 0
44828: PUSH
44829: LD_INT 1
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 1
44838: NEG
44839: PUSH
44840: LD_INT 0
44842: PUSH
44843: EMPTY
44844: LIST
44845: LIST
44846: PUSH
44847: LD_INT 1
44849: NEG
44850: PUSH
44851: LD_INT 1
44853: NEG
44854: PUSH
44855: EMPTY
44856: LIST
44857: LIST
44858: PUSH
44859: LD_INT 1
44861: NEG
44862: PUSH
44863: LD_INT 2
44865: NEG
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 0
44873: PUSH
44874: LD_INT 2
44876: NEG
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 1
44884: PUSH
44885: LD_INT 1
44887: NEG
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 2
44895: PUSH
44896: LD_INT 0
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 2
44905: PUSH
44906: LD_INT 1
44908: PUSH
44909: EMPTY
44910: LIST
44911: LIST
44912: PUSH
44913: LD_INT 2
44915: PUSH
44916: LD_INT 2
44918: PUSH
44919: EMPTY
44920: LIST
44921: LIST
44922: PUSH
44923: LD_INT 1
44925: PUSH
44926: LD_INT 2
44928: PUSH
44929: EMPTY
44930: LIST
44931: LIST
44932: PUSH
44933: LD_INT 0
44935: PUSH
44936: LD_INT 2
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 1
44945: NEG
44946: PUSH
44947: LD_INT 1
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 2
44956: NEG
44957: PUSH
44958: LD_INT 0
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: LD_INT 2
44967: NEG
44968: PUSH
44969: LD_INT 1
44971: NEG
44972: PUSH
44973: EMPTY
44974: LIST
44975: LIST
44976: PUSH
44977: LD_INT 2
44979: NEG
44980: PUSH
44981: LD_INT 2
44983: NEG
44984: PUSH
44985: EMPTY
44986: LIST
44987: LIST
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: LIST
45005: LIST
45006: LIST
45007: LIST
45008: LIST
45009: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45010: LD_ADDR_VAR 0 55
45014: PUSH
45015: LD_INT 0
45017: PUSH
45018: LD_INT 0
45020: PUSH
45021: EMPTY
45022: LIST
45023: LIST
45024: PUSH
45025: LD_INT 0
45027: PUSH
45028: LD_INT 1
45030: NEG
45031: PUSH
45032: EMPTY
45033: LIST
45034: LIST
45035: PUSH
45036: LD_INT 1
45038: PUSH
45039: LD_INT 0
45041: PUSH
45042: EMPTY
45043: LIST
45044: LIST
45045: PUSH
45046: LD_INT 1
45048: PUSH
45049: LD_INT 1
45051: PUSH
45052: EMPTY
45053: LIST
45054: LIST
45055: PUSH
45056: LD_INT 0
45058: PUSH
45059: LD_INT 1
45061: PUSH
45062: EMPTY
45063: LIST
45064: LIST
45065: PUSH
45066: LD_INT 1
45068: NEG
45069: PUSH
45070: LD_INT 0
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: PUSH
45077: LD_INT 1
45079: NEG
45080: PUSH
45081: LD_INT 1
45083: NEG
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 1
45091: NEG
45092: PUSH
45093: LD_INT 2
45095: NEG
45096: PUSH
45097: EMPTY
45098: LIST
45099: LIST
45100: PUSH
45101: LD_INT 0
45103: PUSH
45104: LD_INT 2
45106: NEG
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: LD_INT 1
45114: PUSH
45115: LD_INT 1
45117: NEG
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 2
45125: PUSH
45126: LD_INT 0
45128: PUSH
45129: EMPTY
45130: LIST
45131: LIST
45132: PUSH
45133: LD_INT 2
45135: PUSH
45136: LD_INT 1
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: PUSH
45143: LD_INT 2
45145: PUSH
45146: LD_INT 2
45148: PUSH
45149: EMPTY
45150: LIST
45151: LIST
45152: PUSH
45153: LD_INT 1
45155: PUSH
45156: LD_INT 2
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 0
45165: PUSH
45166: LD_INT 2
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 1
45175: NEG
45176: PUSH
45177: LD_INT 1
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 2
45186: NEG
45187: PUSH
45188: LD_INT 0
45190: PUSH
45191: EMPTY
45192: LIST
45193: LIST
45194: PUSH
45195: LD_INT 2
45197: NEG
45198: PUSH
45199: LD_INT 1
45201: NEG
45202: PUSH
45203: EMPTY
45204: LIST
45205: LIST
45206: PUSH
45207: LD_INT 2
45209: NEG
45210: PUSH
45211: LD_INT 2
45213: NEG
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: LIST
45223: LIST
45224: LIST
45225: LIST
45226: LIST
45227: LIST
45228: LIST
45229: LIST
45230: LIST
45231: LIST
45232: LIST
45233: LIST
45234: LIST
45235: LIST
45236: LIST
45237: LIST
45238: LIST
45239: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45240: LD_ADDR_VAR 0 56
45244: PUSH
45245: LD_INT 0
45247: PUSH
45248: LD_INT 0
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: LD_INT 0
45257: PUSH
45258: LD_INT 1
45260: NEG
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 1
45268: PUSH
45269: LD_INT 0
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 1
45278: PUSH
45279: LD_INT 1
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 0
45288: PUSH
45289: LD_INT 1
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 1
45298: NEG
45299: PUSH
45300: LD_INT 0
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 1
45309: NEG
45310: PUSH
45311: LD_INT 1
45313: NEG
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: PUSH
45319: LD_INT 1
45321: NEG
45322: PUSH
45323: LD_INT 2
45325: NEG
45326: PUSH
45327: EMPTY
45328: LIST
45329: LIST
45330: PUSH
45331: LD_INT 0
45333: PUSH
45334: LD_INT 2
45336: NEG
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 1
45344: PUSH
45345: LD_INT 1
45347: NEG
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 2
45355: PUSH
45356: LD_INT 0
45358: PUSH
45359: EMPTY
45360: LIST
45361: LIST
45362: PUSH
45363: LD_INT 2
45365: PUSH
45366: LD_INT 1
45368: PUSH
45369: EMPTY
45370: LIST
45371: LIST
45372: PUSH
45373: LD_INT 2
45375: PUSH
45376: LD_INT 2
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 1
45385: PUSH
45386: LD_INT 2
45388: PUSH
45389: EMPTY
45390: LIST
45391: LIST
45392: PUSH
45393: LD_INT 0
45395: PUSH
45396: LD_INT 2
45398: PUSH
45399: EMPTY
45400: LIST
45401: LIST
45402: PUSH
45403: LD_INT 1
45405: NEG
45406: PUSH
45407: LD_INT 1
45409: PUSH
45410: EMPTY
45411: LIST
45412: LIST
45413: PUSH
45414: LD_INT 2
45416: NEG
45417: PUSH
45418: LD_INT 0
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 2
45427: NEG
45428: PUSH
45429: LD_INT 1
45431: NEG
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 2
45439: NEG
45440: PUSH
45441: LD_INT 2
45443: NEG
45444: PUSH
45445: EMPTY
45446: LIST
45447: LIST
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: LIST
45453: LIST
45454: LIST
45455: LIST
45456: LIST
45457: LIST
45458: LIST
45459: LIST
45460: LIST
45461: LIST
45462: LIST
45463: LIST
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: LIST
45469: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45470: LD_ADDR_VAR 0 57
45474: PUSH
45475: LD_INT 0
45477: PUSH
45478: LD_INT 0
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 0
45487: PUSH
45488: LD_INT 1
45490: NEG
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 1
45498: PUSH
45499: LD_INT 0
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 1
45508: PUSH
45509: LD_INT 1
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 0
45518: PUSH
45519: LD_INT 1
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 1
45528: NEG
45529: PUSH
45530: LD_INT 0
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: LD_INT 1
45539: NEG
45540: PUSH
45541: LD_INT 1
45543: NEG
45544: PUSH
45545: EMPTY
45546: LIST
45547: LIST
45548: PUSH
45549: LD_INT 1
45551: NEG
45552: PUSH
45553: LD_INT 2
45555: NEG
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 0
45563: PUSH
45564: LD_INT 2
45566: NEG
45567: PUSH
45568: EMPTY
45569: LIST
45570: LIST
45571: PUSH
45572: LD_INT 1
45574: PUSH
45575: LD_INT 1
45577: NEG
45578: PUSH
45579: EMPTY
45580: LIST
45581: LIST
45582: PUSH
45583: LD_INT 2
45585: PUSH
45586: LD_INT 0
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 2
45595: PUSH
45596: LD_INT 1
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 2
45605: PUSH
45606: LD_INT 2
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 1
45615: PUSH
45616: LD_INT 2
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 0
45625: PUSH
45626: LD_INT 2
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 1
45635: NEG
45636: PUSH
45637: LD_INT 1
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 2
45646: NEG
45647: PUSH
45648: LD_INT 0
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 2
45657: NEG
45658: PUSH
45659: LD_INT 1
45661: NEG
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 2
45669: NEG
45670: PUSH
45671: LD_INT 2
45673: NEG
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: EMPTY
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45700: LD_ADDR_VAR 0 58
45704: PUSH
45705: LD_INT 0
45707: PUSH
45708: LD_INT 0
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 0
45717: PUSH
45718: LD_INT 1
45720: NEG
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 1
45728: PUSH
45729: LD_INT 0
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 1
45738: PUSH
45739: LD_INT 1
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 0
45748: PUSH
45749: LD_INT 1
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 1
45758: NEG
45759: PUSH
45760: LD_INT 0
45762: PUSH
45763: EMPTY
45764: LIST
45765: LIST
45766: PUSH
45767: LD_INT 1
45769: NEG
45770: PUSH
45771: LD_INT 1
45773: NEG
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 1
45781: NEG
45782: PUSH
45783: LD_INT 2
45785: NEG
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 0
45793: PUSH
45794: LD_INT 2
45796: NEG
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 1
45804: PUSH
45805: LD_INT 1
45807: NEG
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 2
45815: PUSH
45816: LD_INT 0
45818: PUSH
45819: EMPTY
45820: LIST
45821: LIST
45822: PUSH
45823: LD_INT 2
45825: PUSH
45826: LD_INT 1
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: PUSH
45833: LD_INT 2
45835: PUSH
45836: LD_INT 2
45838: PUSH
45839: EMPTY
45840: LIST
45841: LIST
45842: PUSH
45843: LD_INT 1
45845: PUSH
45846: LD_INT 2
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 0
45855: PUSH
45856: LD_INT 2
45858: PUSH
45859: EMPTY
45860: LIST
45861: LIST
45862: PUSH
45863: LD_INT 1
45865: NEG
45866: PUSH
45867: LD_INT 1
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 2
45876: NEG
45877: PUSH
45878: LD_INT 0
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 2
45887: NEG
45888: PUSH
45889: LD_INT 1
45891: NEG
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 2
45899: NEG
45900: PUSH
45901: LD_INT 2
45903: NEG
45904: PUSH
45905: EMPTY
45906: LIST
45907: LIST
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: LIST
45913: LIST
45914: LIST
45915: LIST
45916: LIST
45917: LIST
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: LIST
45926: LIST
45927: LIST
45928: LIST
45929: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45930: LD_ADDR_VAR 0 59
45934: PUSH
45935: LD_INT 0
45937: PUSH
45938: LD_INT 0
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 0
45947: PUSH
45948: LD_INT 1
45950: NEG
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 1
45958: PUSH
45959: LD_INT 0
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 1
45968: PUSH
45969: LD_INT 1
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 0
45978: PUSH
45979: LD_INT 1
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 1
45988: NEG
45989: PUSH
45990: LD_INT 0
45992: PUSH
45993: EMPTY
45994: LIST
45995: LIST
45996: PUSH
45997: LD_INT 1
45999: NEG
46000: PUSH
46001: LD_INT 1
46003: NEG
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: LIST
46013: LIST
46014: LIST
46015: LIST
46016: LIST
46017: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46018: LD_ADDR_VAR 0 60
46022: PUSH
46023: LD_INT 0
46025: PUSH
46026: LD_INT 0
46028: PUSH
46029: EMPTY
46030: LIST
46031: LIST
46032: PUSH
46033: LD_INT 0
46035: PUSH
46036: LD_INT 1
46038: NEG
46039: PUSH
46040: EMPTY
46041: LIST
46042: LIST
46043: PUSH
46044: LD_INT 1
46046: PUSH
46047: LD_INT 0
46049: PUSH
46050: EMPTY
46051: LIST
46052: LIST
46053: PUSH
46054: LD_INT 1
46056: PUSH
46057: LD_INT 1
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 0
46066: PUSH
46067: LD_INT 1
46069: PUSH
46070: EMPTY
46071: LIST
46072: LIST
46073: PUSH
46074: LD_INT 1
46076: NEG
46077: PUSH
46078: LD_INT 0
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 1
46087: NEG
46088: PUSH
46089: LD_INT 1
46091: NEG
46092: PUSH
46093: EMPTY
46094: LIST
46095: LIST
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: LIST
46101: LIST
46102: LIST
46103: LIST
46104: LIST
46105: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46106: LD_ADDR_VAR 0 61
46110: PUSH
46111: LD_INT 0
46113: PUSH
46114: LD_INT 0
46116: PUSH
46117: EMPTY
46118: LIST
46119: LIST
46120: PUSH
46121: LD_INT 0
46123: PUSH
46124: LD_INT 1
46126: NEG
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 1
46134: PUSH
46135: LD_INT 0
46137: PUSH
46138: EMPTY
46139: LIST
46140: LIST
46141: PUSH
46142: LD_INT 1
46144: PUSH
46145: LD_INT 1
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 0
46154: PUSH
46155: LD_INT 1
46157: PUSH
46158: EMPTY
46159: LIST
46160: LIST
46161: PUSH
46162: LD_INT 1
46164: NEG
46165: PUSH
46166: LD_INT 0
46168: PUSH
46169: EMPTY
46170: LIST
46171: LIST
46172: PUSH
46173: LD_INT 1
46175: NEG
46176: PUSH
46177: LD_INT 1
46179: NEG
46180: PUSH
46181: EMPTY
46182: LIST
46183: LIST
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46194: LD_ADDR_VAR 0 62
46198: PUSH
46199: LD_INT 0
46201: PUSH
46202: LD_INT 0
46204: PUSH
46205: EMPTY
46206: LIST
46207: LIST
46208: PUSH
46209: LD_INT 0
46211: PUSH
46212: LD_INT 1
46214: NEG
46215: PUSH
46216: EMPTY
46217: LIST
46218: LIST
46219: PUSH
46220: LD_INT 1
46222: PUSH
46223: LD_INT 0
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: LD_INT 1
46232: PUSH
46233: LD_INT 1
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 0
46242: PUSH
46243: LD_INT 1
46245: PUSH
46246: EMPTY
46247: LIST
46248: LIST
46249: PUSH
46250: LD_INT 1
46252: NEG
46253: PUSH
46254: LD_INT 0
46256: PUSH
46257: EMPTY
46258: LIST
46259: LIST
46260: PUSH
46261: LD_INT 1
46263: NEG
46264: PUSH
46265: LD_INT 1
46267: NEG
46268: PUSH
46269: EMPTY
46270: LIST
46271: LIST
46272: PUSH
46273: EMPTY
46274: LIST
46275: LIST
46276: LIST
46277: LIST
46278: LIST
46279: LIST
46280: LIST
46281: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46282: LD_ADDR_VAR 0 63
46286: PUSH
46287: LD_INT 0
46289: PUSH
46290: LD_INT 0
46292: PUSH
46293: EMPTY
46294: LIST
46295: LIST
46296: PUSH
46297: LD_INT 0
46299: PUSH
46300: LD_INT 1
46302: NEG
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 1
46310: PUSH
46311: LD_INT 0
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 1
46320: PUSH
46321: LD_INT 1
46323: PUSH
46324: EMPTY
46325: LIST
46326: LIST
46327: PUSH
46328: LD_INT 0
46330: PUSH
46331: LD_INT 1
46333: PUSH
46334: EMPTY
46335: LIST
46336: LIST
46337: PUSH
46338: LD_INT 1
46340: NEG
46341: PUSH
46342: LD_INT 0
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 1
46351: NEG
46352: PUSH
46353: LD_INT 1
46355: NEG
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46370: LD_ADDR_VAR 0 64
46374: PUSH
46375: LD_INT 0
46377: PUSH
46378: LD_INT 0
46380: PUSH
46381: EMPTY
46382: LIST
46383: LIST
46384: PUSH
46385: LD_INT 0
46387: PUSH
46388: LD_INT 1
46390: NEG
46391: PUSH
46392: EMPTY
46393: LIST
46394: LIST
46395: PUSH
46396: LD_INT 1
46398: PUSH
46399: LD_INT 0
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 1
46408: PUSH
46409: LD_INT 1
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 0
46418: PUSH
46419: LD_INT 1
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 1
46428: NEG
46429: PUSH
46430: LD_INT 0
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 1
46439: NEG
46440: PUSH
46441: LD_INT 1
46443: NEG
46444: PUSH
46445: EMPTY
46446: LIST
46447: LIST
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: LIST
46453: LIST
46454: LIST
46455: LIST
46456: LIST
46457: ST_TO_ADDR
// end ; 1 :
46458: GO 52355
46460: LD_INT 1
46462: DOUBLE
46463: EQUAL
46464: IFTRUE 46468
46466: GO 49091
46468: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46469: LD_ADDR_VAR 0 11
46473: PUSH
46474: LD_INT 1
46476: NEG
46477: PUSH
46478: LD_INT 3
46480: NEG
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: LD_INT 0
46488: PUSH
46489: LD_INT 3
46491: NEG
46492: PUSH
46493: EMPTY
46494: LIST
46495: LIST
46496: PUSH
46497: LD_INT 1
46499: PUSH
46500: LD_INT 2
46502: NEG
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: LIST
46512: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46513: LD_ADDR_VAR 0 12
46517: PUSH
46518: LD_INT 2
46520: PUSH
46521: LD_INT 1
46523: NEG
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 3
46531: PUSH
46532: LD_INT 0
46534: PUSH
46535: EMPTY
46536: LIST
46537: LIST
46538: PUSH
46539: LD_INT 3
46541: PUSH
46542: LD_INT 1
46544: PUSH
46545: EMPTY
46546: LIST
46547: LIST
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: LIST
46553: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46554: LD_ADDR_VAR 0 13
46558: PUSH
46559: LD_INT 3
46561: PUSH
46562: LD_INT 2
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 3
46571: PUSH
46572: LD_INT 3
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 2
46581: PUSH
46582: LD_INT 3
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: EMPTY
46590: LIST
46591: LIST
46592: LIST
46593: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46594: LD_ADDR_VAR 0 14
46598: PUSH
46599: LD_INT 1
46601: PUSH
46602: LD_INT 3
46604: PUSH
46605: EMPTY
46606: LIST
46607: LIST
46608: PUSH
46609: LD_INT 0
46611: PUSH
46612: LD_INT 3
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 1
46621: NEG
46622: PUSH
46623: LD_INT 2
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: EMPTY
46631: LIST
46632: LIST
46633: LIST
46634: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46635: LD_ADDR_VAR 0 15
46639: PUSH
46640: LD_INT 2
46642: NEG
46643: PUSH
46644: LD_INT 1
46646: PUSH
46647: EMPTY
46648: LIST
46649: LIST
46650: PUSH
46651: LD_INT 3
46653: NEG
46654: PUSH
46655: LD_INT 0
46657: PUSH
46658: EMPTY
46659: LIST
46660: LIST
46661: PUSH
46662: LD_INT 3
46664: NEG
46665: PUSH
46666: LD_INT 1
46668: NEG
46669: PUSH
46670: EMPTY
46671: LIST
46672: LIST
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: LIST
46678: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46679: LD_ADDR_VAR 0 16
46683: PUSH
46684: LD_INT 2
46686: NEG
46687: PUSH
46688: LD_INT 3
46690: NEG
46691: PUSH
46692: EMPTY
46693: LIST
46694: LIST
46695: PUSH
46696: LD_INT 3
46698: NEG
46699: PUSH
46700: LD_INT 2
46702: NEG
46703: PUSH
46704: EMPTY
46705: LIST
46706: LIST
46707: PUSH
46708: LD_INT 3
46710: NEG
46711: PUSH
46712: LD_INT 3
46714: NEG
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: LIST
46724: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46725: LD_ADDR_VAR 0 17
46729: PUSH
46730: LD_INT 1
46732: NEG
46733: PUSH
46734: LD_INT 3
46736: NEG
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: LD_INT 0
46744: PUSH
46745: LD_INT 3
46747: NEG
46748: PUSH
46749: EMPTY
46750: LIST
46751: LIST
46752: PUSH
46753: LD_INT 1
46755: PUSH
46756: LD_INT 2
46758: NEG
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: EMPTY
46765: LIST
46766: LIST
46767: LIST
46768: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46769: LD_ADDR_VAR 0 18
46773: PUSH
46774: LD_INT 2
46776: PUSH
46777: LD_INT 1
46779: NEG
46780: PUSH
46781: EMPTY
46782: LIST
46783: LIST
46784: PUSH
46785: LD_INT 3
46787: PUSH
46788: LD_INT 0
46790: PUSH
46791: EMPTY
46792: LIST
46793: LIST
46794: PUSH
46795: LD_INT 3
46797: PUSH
46798: LD_INT 1
46800: PUSH
46801: EMPTY
46802: LIST
46803: LIST
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: LIST
46809: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46810: LD_ADDR_VAR 0 19
46814: PUSH
46815: LD_INT 3
46817: PUSH
46818: LD_INT 2
46820: PUSH
46821: EMPTY
46822: LIST
46823: LIST
46824: PUSH
46825: LD_INT 3
46827: PUSH
46828: LD_INT 3
46830: PUSH
46831: EMPTY
46832: LIST
46833: LIST
46834: PUSH
46835: LD_INT 2
46837: PUSH
46838: LD_INT 3
46840: PUSH
46841: EMPTY
46842: LIST
46843: LIST
46844: PUSH
46845: EMPTY
46846: LIST
46847: LIST
46848: LIST
46849: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46850: LD_ADDR_VAR 0 20
46854: PUSH
46855: LD_INT 1
46857: PUSH
46858: LD_INT 3
46860: PUSH
46861: EMPTY
46862: LIST
46863: LIST
46864: PUSH
46865: LD_INT 0
46867: PUSH
46868: LD_INT 3
46870: PUSH
46871: EMPTY
46872: LIST
46873: LIST
46874: PUSH
46875: LD_INT 1
46877: NEG
46878: PUSH
46879: LD_INT 2
46881: PUSH
46882: EMPTY
46883: LIST
46884: LIST
46885: PUSH
46886: EMPTY
46887: LIST
46888: LIST
46889: LIST
46890: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46891: LD_ADDR_VAR 0 21
46895: PUSH
46896: LD_INT 2
46898: NEG
46899: PUSH
46900: LD_INT 1
46902: PUSH
46903: EMPTY
46904: LIST
46905: LIST
46906: PUSH
46907: LD_INT 3
46909: NEG
46910: PUSH
46911: LD_INT 0
46913: PUSH
46914: EMPTY
46915: LIST
46916: LIST
46917: PUSH
46918: LD_INT 3
46920: NEG
46921: PUSH
46922: LD_INT 1
46924: NEG
46925: PUSH
46926: EMPTY
46927: LIST
46928: LIST
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: LIST
46934: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46935: LD_ADDR_VAR 0 22
46939: PUSH
46940: LD_INT 2
46942: NEG
46943: PUSH
46944: LD_INT 3
46946: NEG
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 3
46954: NEG
46955: PUSH
46956: LD_INT 2
46958: NEG
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 3
46966: NEG
46967: PUSH
46968: LD_INT 3
46970: NEG
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: PUSH
46976: EMPTY
46977: LIST
46978: LIST
46979: LIST
46980: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
46981: LD_ADDR_VAR 0 23
46985: PUSH
46986: LD_INT 0
46988: PUSH
46989: LD_INT 3
46991: NEG
46992: PUSH
46993: EMPTY
46994: LIST
46995: LIST
46996: PUSH
46997: LD_INT 1
46999: NEG
47000: PUSH
47001: LD_INT 4
47003: NEG
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 1
47011: PUSH
47012: LD_INT 3
47014: NEG
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: PUSH
47020: EMPTY
47021: LIST
47022: LIST
47023: LIST
47024: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
47025: LD_ADDR_VAR 0 24
47029: PUSH
47030: LD_INT 3
47032: PUSH
47033: LD_INT 0
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 3
47042: PUSH
47043: LD_INT 1
47045: NEG
47046: PUSH
47047: EMPTY
47048: LIST
47049: LIST
47050: PUSH
47051: LD_INT 4
47053: PUSH
47054: LD_INT 1
47056: PUSH
47057: EMPTY
47058: LIST
47059: LIST
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: LIST
47065: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
47066: LD_ADDR_VAR 0 25
47070: PUSH
47071: LD_INT 3
47073: PUSH
47074: LD_INT 3
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: PUSH
47081: LD_INT 4
47083: PUSH
47084: LD_INT 3
47086: PUSH
47087: EMPTY
47088: LIST
47089: LIST
47090: PUSH
47091: LD_INT 3
47093: PUSH
47094: LD_INT 4
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: LIST
47105: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
47106: LD_ADDR_VAR 0 26
47110: PUSH
47111: LD_INT 0
47113: PUSH
47114: LD_INT 3
47116: PUSH
47117: EMPTY
47118: LIST
47119: LIST
47120: PUSH
47121: LD_INT 1
47123: PUSH
47124: LD_INT 4
47126: PUSH
47127: EMPTY
47128: LIST
47129: LIST
47130: PUSH
47131: LD_INT 1
47133: NEG
47134: PUSH
47135: LD_INT 3
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: LIST
47146: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
47147: LD_ADDR_VAR 0 27
47151: PUSH
47152: LD_INT 3
47154: NEG
47155: PUSH
47156: LD_INT 0
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 3
47165: NEG
47166: PUSH
47167: LD_INT 1
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PUSH
47174: LD_INT 4
47176: NEG
47177: PUSH
47178: LD_INT 1
47180: NEG
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: LIST
47190: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
47191: LD_ADDR_VAR 0 28
47195: PUSH
47196: LD_INT 3
47198: NEG
47199: PUSH
47200: LD_INT 3
47202: NEG
47203: PUSH
47204: EMPTY
47205: LIST
47206: LIST
47207: PUSH
47208: LD_INT 3
47210: NEG
47211: PUSH
47212: LD_INT 4
47214: NEG
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: PUSH
47220: LD_INT 4
47222: NEG
47223: PUSH
47224: LD_INT 3
47226: NEG
47227: PUSH
47228: EMPTY
47229: LIST
47230: LIST
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: LIST
47236: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
47237: LD_ADDR_VAR 0 29
47241: PUSH
47242: LD_INT 1
47244: NEG
47245: PUSH
47246: LD_INT 3
47248: NEG
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 0
47256: PUSH
47257: LD_INT 3
47259: NEG
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 1
47267: PUSH
47268: LD_INT 2
47270: NEG
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 1
47278: NEG
47279: PUSH
47280: LD_INT 4
47282: NEG
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 0
47290: PUSH
47291: LD_INT 4
47293: NEG
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 1
47301: PUSH
47302: LD_INT 3
47304: NEG
47305: PUSH
47306: EMPTY
47307: LIST
47308: LIST
47309: PUSH
47310: LD_INT 1
47312: NEG
47313: PUSH
47314: LD_INT 5
47316: NEG
47317: PUSH
47318: EMPTY
47319: LIST
47320: LIST
47321: PUSH
47322: LD_INT 0
47324: PUSH
47325: LD_INT 5
47327: NEG
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 1
47335: PUSH
47336: LD_INT 4
47338: NEG
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 1
47346: NEG
47347: PUSH
47348: LD_INT 6
47350: NEG
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 0
47358: PUSH
47359: LD_INT 6
47361: NEG
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: LD_INT 1
47369: PUSH
47370: LD_INT 5
47372: NEG
47373: PUSH
47374: EMPTY
47375: LIST
47376: LIST
47377: PUSH
47378: EMPTY
47379: LIST
47380: LIST
47381: LIST
47382: LIST
47383: LIST
47384: LIST
47385: LIST
47386: LIST
47387: LIST
47388: LIST
47389: LIST
47390: LIST
47391: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
47392: LD_ADDR_VAR 0 30
47396: PUSH
47397: LD_INT 2
47399: PUSH
47400: LD_INT 1
47402: NEG
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 3
47410: PUSH
47411: LD_INT 0
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 3
47420: PUSH
47421: LD_INT 1
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 3
47430: PUSH
47431: LD_INT 1
47433: NEG
47434: PUSH
47435: EMPTY
47436: LIST
47437: LIST
47438: PUSH
47439: LD_INT 4
47441: PUSH
47442: LD_INT 0
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 4
47451: PUSH
47452: LD_INT 1
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 4
47461: PUSH
47462: LD_INT 1
47464: NEG
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 5
47472: PUSH
47473: LD_INT 0
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 5
47482: PUSH
47483: LD_INT 1
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 5
47492: PUSH
47493: LD_INT 1
47495: NEG
47496: PUSH
47497: EMPTY
47498: LIST
47499: LIST
47500: PUSH
47501: LD_INT 6
47503: PUSH
47504: LD_INT 0
47506: PUSH
47507: EMPTY
47508: LIST
47509: LIST
47510: PUSH
47511: LD_INT 6
47513: PUSH
47514: LD_INT 1
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: LIST
47528: LIST
47529: LIST
47530: LIST
47531: LIST
47532: LIST
47533: LIST
47534: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47535: LD_ADDR_VAR 0 31
47539: PUSH
47540: LD_INT 3
47542: PUSH
47543: LD_INT 2
47545: PUSH
47546: EMPTY
47547: LIST
47548: LIST
47549: PUSH
47550: LD_INT 3
47552: PUSH
47553: LD_INT 3
47555: PUSH
47556: EMPTY
47557: LIST
47558: LIST
47559: PUSH
47560: LD_INT 2
47562: PUSH
47563: LD_INT 3
47565: PUSH
47566: EMPTY
47567: LIST
47568: LIST
47569: PUSH
47570: LD_INT 4
47572: PUSH
47573: LD_INT 3
47575: PUSH
47576: EMPTY
47577: LIST
47578: LIST
47579: PUSH
47580: LD_INT 4
47582: PUSH
47583: LD_INT 4
47585: PUSH
47586: EMPTY
47587: LIST
47588: LIST
47589: PUSH
47590: LD_INT 3
47592: PUSH
47593: LD_INT 4
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 5
47602: PUSH
47603: LD_INT 4
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 5
47612: PUSH
47613: LD_INT 5
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 4
47622: PUSH
47623: LD_INT 5
47625: PUSH
47626: EMPTY
47627: LIST
47628: LIST
47629: PUSH
47630: LD_INT 6
47632: PUSH
47633: LD_INT 5
47635: PUSH
47636: EMPTY
47637: LIST
47638: LIST
47639: PUSH
47640: LD_INT 6
47642: PUSH
47643: LD_INT 6
47645: PUSH
47646: EMPTY
47647: LIST
47648: LIST
47649: PUSH
47650: LD_INT 5
47652: PUSH
47653: LD_INT 6
47655: PUSH
47656: EMPTY
47657: LIST
47658: LIST
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: LIST
47664: LIST
47665: LIST
47666: LIST
47667: LIST
47668: LIST
47669: LIST
47670: LIST
47671: LIST
47672: LIST
47673: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
47674: LD_ADDR_VAR 0 32
47678: PUSH
47679: LD_INT 1
47681: PUSH
47682: LD_INT 3
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 0
47691: PUSH
47692: LD_INT 3
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 1
47701: NEG
47702: PUSH
47703: LD_INT 2
47705: PUSH
47706: EMPTY
47707: LIST
47708: LIST
47709: PUSH
47710: LD_INT 1
47712: PUSH
47713: LD_INT 4
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 0
47722: PUSH
47723: LD_INT 4
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: LD_INT 1
47732: NEG
47733: PUSH
47734: LD_INT 3
47736: PUSH
47737: EMPTY
47738: LIST
47739: LIST
47740: PUSH
47741: LD_INT 1
47743: PUSH
47744: LD_INT 5
47746: PUSH
47747: EMPTY
47748: LIST
47749: LIST
47750: PUSH
47751: LD_INT 0
47753: PUSH
47754: LD_INT 5
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 1
47763: NEG
47764: PUSH
47765: LD_INT 4
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: PUSH
47772: LD_INT 1
47774: PUSH
47775: LD_INT 6
47777: PUSH
47778: EMPTY
47779: LIST
47780: LIST
47781: PUSH
47782: LD_INT 0
47784: PUSH
47785: LD_INT 6
47787: PUSH
47788: EMPTY
47789: LIST
47790: LIST
47791: PUSH
47792: LD_INT 1
47794: NEG
47795: PUSH
47796: LD_INT 5
47798: PUSH
47799: EMPTY
47800: LIST
47801: LIST
47802: PUSH
47803: EMPTY
47804: LIST
47805: LIST
47806: LIST
47807: LIST
47808: LIST
47809: LIST
47810: LIST
47811: LIST
47812: LIST
47813: LIST
47814: LIST
47815: LIST
47816: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
47817: LD_ADDR_VAR 0 33
47821: PUSH
47822: LD_INT 2
47824: NEG
47825: PUSH
47826: LD_INT 1
47828: PUSH
47829: EMPTY
47830: LIST
47831: LIST
47832: PUSH
47833: LD_INT 3
47835: NEG
47836: PUSH
47837: LD_INT 0
47839: PUSH
47840: EMPTY
47841: LIST
47842: LIST
47843: PUSH
47844: LD_INT 3
47846: NEG
47847: PUSH
47848: LD_INT 1
47850: NEG
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 3
47858: NEG
47859: PUSH
47860: LD_INT 1
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 4
47869: NEG
47870: PUSH
47871: LD_INT 0
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 4
47880: NEG
47881: PUSH
47882: LD_INT 1
47884: NEG
47885: PUSH
47886: EMPTY
47887: LIST
47888: LIST
47889: PUSH
47890: LD_INT 4
47892: NEG
47893: PUSH
47894: LD_INT 1
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 5
47903: NEG
47904: PUSH
47905: LD_INT 0
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 5
47914: NEG
47915: PUSH
47916: LD_INT 1
47918: NEG
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 5
47926: NEG
47927: PUSH
47928: LD_INT 1
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 6
47937: NEG
47938: PUSH
47939: LD_INT 0
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: PUSH
47946: LD_INT 6
47948: NEG
47949: PUSH
47950: LD_INT 1
47952: NEG
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
47972: LD_ADDR_VAR 0 34
47976: PUSH
47977: LD_INT 2
47979: NEG
47980: PUSH
47981: LD_INT 3
47983: NEG
47984: PUSH
47985: EMPTY
47986: LIST
47987: LIST
47988: PUSH
47989: LD_INT 3
47991: NEG
47992: PUSH
47993: LD_INT 2
47995: NEG
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 3
48003: NEG
48004: PUSH
48005: LD_INT 3
48007: NEG
48008: PUSH
48009: EMPTY
48010: LIST
48011: LIST
48012: PUSH
48013: LD_INT 3
48015: NEG
48016: PUSH
48017: LD_INT 4
48019: NEG
48020: PUSH
48021: EMPTY
48022: LIST
48023: LIST
48024: PUSH
48025: LD_INT 4
48027: NEG
48028: PUSH
48029: LD_INT 3
48031: NEG
48032: PUSH
48033: EMPTY
48034: LIST
48035: LIST
48036: PUSH
48037: LD_INT 4
48039: NEG
48040: PUSH
48041: LD_INT 4
48043: NEG
48044: PUSH
48045: EMPTY
48046: LIST
48047: LIST
48048: PUSH
48049: LD_INT 4
48051: NEG
48052: PUSH
48053: LD_INT 5
48055: NEG
48056: PUSH
48057: EMPTY
48058: LIST
48059: LIST
48060: PUSH
48061: LD_INT 5
48063: NEG
48064: PUSH
48065: LD_INT 4
48067: NEG
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 5
48075: NEG
48076: PUSH
48077: LD_INT 5
48079: NEG
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 5
48087: NEG
48088: PUSH
48089: LD_INT 6
48091: NEG
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: LD_INT 6
48099: NEG
48100: PUSH
48101: LD_INT 5
48103: NEG
48104: PUSH
48105: EMPTY
48106: LIST
48107: LIST
48108: PUSH
48109: LD_INT 6
48111: NEG
48112: PUSH
48113: LD_INT 6
48115: NEG
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: EMPTY
48122: LIST
48123: LIST
48124: LIST
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
48135: LD_ADDR_VAR 0 41
48139: PUSH
48140: LD_INT 0
48142: PUSH
48143: LD_INT 2
48145: NEG
48146: PUSH
48147: EMPTY
48148: LIST
48149: LIST
48150: PUSH
48151: LD_INT 1
48153: NEG
48154: PUSH
48155: LD_INT 3
48157: NEG
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 1
48165: PUSH
48166: LD_INT 2
48168: NEG
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: LIST
48178: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
48179: LD_ADDR_VAR 0 42
48183: PUSH
48184: LD_INT 2
48186: PUSH
48187: LD_INT 0
48189: PUSH
48190: EMPTY
48191: LIST
48192: LIST
48193: PUSH
48194: LD_INT 2
48196: PUSH
48197: LD_INT 1
48199: NEG
48200: PUSH
48201: EMPTY
48202: LIST
48203: LIST
48204: PUSH
48205: LD_INT 3
48207: PUSH
48208: LD_INT 1
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: LIST
48219: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
48220: LD_ADDR_VAR 0 43
48224: PUSH
48225: LD_INT 2
48227: PUSH
48228: LD_INT 2
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: PUSH
48235: LD_INT 3
48237: PUSH
48238: LD_INT 2
48240: PUSH
48241: EMPTY
48242: LIST
48243: LIST
48244: PUSH
48245: LD_INT 2
48247: PUSH
48248: LD_INT 3
48250: PUSH
48251: EMPTY
48252: LIST
48253: LIST
48254: PUSH
48255: EMPTY
48256: LIST
48257: LIST
48258: LIST
48259: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
48260: LD_ADDR_VAR 0 44
48264: PUSH
48265: LD_INT 0
48267: PUSH
48268: LD_INT 2
48270: PUSH
48271: EMPTY
48272: LIST
48273: LIST
48274: PUSH
48275: LD_INT 1
48277: PUSH
48278: LD_INT 3
48280: PUSH
48281: EMPTY
48282: LIST
48283: LIST
48284: PUSH
48285: LD_INT 1
48287: NEG
48288: PUSH
48289: LD_INT 2
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: LIST
48300: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48301: LD_ADDR_VAR 0 45
48305: PUSH
48306: LD_INT 2
48308: NEG
48309: PUSH
48310: LD_INT 0
48312: PUSH
48313: EMPTY
48314: LIST
48315: LIST
48316: PUSH
48317: LD_INT 2
48319: NEG
48320: PUSH
48321: LD_INT 1
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 3
48330: NEG
48331: PUSH
48332: LD_INT 1
48334: NEG
48335: PUSH
48336: EMPTY
48337: LIST
48338: LIST
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: LIST
48344: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
48345: LD_ADDR_VAR 0 46
48349: PUSH
48350: LD_INT 2
48352: NEG
48353: PUSH
48354: LD_INT 2
48356: NEG
48357: PUSH
48358: EMPTY
48359: LIST
48360: LIST
48361: PUSH
48362: LD_INT 2
48364: NEG
48365: PUSH
48366: LD_INT 3
48368: NEG
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 3
48376: NEG
48377: PUSH
48378: LD_INT 2
48380: NEG
48381: PUSH
48382: EMPTY
48383: LIST
48384: LIST
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: LIST
48390: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
48391: LD_ADDR_VAR 0 47
48395: PUSH
48396: LD_INT 2
48398: NEG
48399: PUSH
48400: LD_INT 3
48402: NEG
48403: PUSH
48404: EMPTY
48405: LIST
48406: LIST
48407: PUSH
48408: LD_INT 1
48410: NEG
48411: PUSH
48412: LD_INT 3
48414: NEG
48415: PUSH
48416: EMPTY
48417: LIST
48418: LIST
48419: PUSH
48420: EMPTY
48421: LIST
48422: LIST
48423: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
48424: LD_ADDR_VAR 0 48
48428: PUSH
48429: LD_INT 1
48431: PUSH
48432: LD_INT 2
48434: NEG
48435: PUSH
48436: EMPTY
48437: LIST
48438: LIST
48439: PUSH
48440: LD_INT 2
48442: PUSH
48443: LD_INT 1
48445: NEG
48446: PUSH
48447: EMPTY
48448: LIST
48449: LIST
48450: PUSH
48451: EMPTY
48452: LIST
48453: LIST
48454: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48455: LD_ADDR_VAR 0 49
48459: PUSH
48460: LD_INT 3
48462: PUSH
48463: LD_INT 1
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 3
48472: PUSH
48473: LD_INT 2
48475: PUSH
48476: EMPTY
48477: LIST
48478: LIST
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48484: LD_ADDR_VAR 0 50
48488: PUSH
48489: LD_INT 2
48491: PUSH
48492: LD_INT 3
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 1
48501: PUSH
48502: LD_INT 3
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48513: LD_ADDR_VAR 0 51
48517: PUSH
48518: LD_INT 1
48520: NEG
48521: PUSH
48522: LD_INT 2
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 2
48531: NEG
48532: PUSH
48533: LD_INT 1
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: EMPTY
48541: LIST
48542: LIST
48543: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48544: LD_ADDR_VAR 0 52
48548: PUSH
48549: LD_INT 3
48551: NEG
48552: PUSH
48553: LD_INT 1
48555: NEG
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 3
48563: NEG
48564: PUSH
48565: LD_INT 2
48567: NEG
48568: PUSH
48569: EMPTY
48570: LIST
48571: LIST
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48577: LD_ADDR_VAR 0 53
48581: PUSH
48582: LD_INT 1
48584: NEG
48585: PUSH
48586: LD_INT 3
48588: NEG
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: LD_INT 0
48596: PUSH
48597: LD_INT 3
48599: NEG
48600: PUSH
48601: EMPTY
48602: LIST
48603: LIST
48604: PUSH
48605: LD_INT 1
48607: PUSH
48608: LD_INT 2
48610: NEG
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: LIST
48620: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48621: LD_ADDR_VAR 0 54
48625: PUSH
48626: LD_INT 2
48628: PUSH
48629: LD_INT 1
48631: NEG
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: LD_INT 3
48639: PUSH
48640: LD_INT 0
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 3
48649: PUSH
48650: LD_INT 1
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: EMPTY
48658: LIST
48659: LIST
48660: LIST
48661: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48662: LD_ADDR_VAR 0 55
48666: PUSH
48667: LD_INT 3
48669: PUSH
48670: LD_INT 2
48672: PUSH
48673: EMPTY
48674: LIST
48675: LIST
48676: PUSH
48677: LD_INT 3
48679: PUSH
48680: LD_INT 3
48682: PUSH
48683: EMPTY
48684: LIST
48685: LIST
48686: PUSH
48687: LD_INT 2
48689: PUSH
48690: LD_INT 3
48692: PUSH
48693: EMPTY
48694: LIST
48695: LIST
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: LIST
48701: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48702: LD_ADDR_VAR 0 56
48706: PUSH
48707: LD_INT 1
48709: PUSH
48710: LD_INT 3
48712: PUSH
48713: EMPTY
48714: LIST
48715: LIST
48716: PUSH
48717: LD_INT 0
48719: PUSH
48720: LD_INT 3
48722: PUSH
48723: EMPTY
48724: LIST
48725: LIST
48726: PUSH
48727: LD_INT 1
48729: NEG
48730: PUSH
48731: LD_INT 2
48733: PUSH
48734: EMPTY
48735: LIST
48736: LIST
48737: PUSH
48738: EMPTY
48739: LIST
48740: LIST
48741: LIST
48742: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48743: LD_ADDR_VAR 0 57
48747: PUSH
48748: LD_INT 2
48750: NEG
48751: PUSH
48752: LD_INT 1
48754: PUSH
48755: EMPTY
48756: LIST
48757: LIST
48758: PUSH
48759: LD_INT 3
48761: NEG
48762: PUSH
48763: LD_INT 0
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 3
48772: NEG
48773: PUSH
48774: LD_INT 1
48776: NEG
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: LIST
48786: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48787: LD_ADDR_VAR 0 58
48791: PUSH
48792: LD_INT 2
48794: NEG
48795: PUSH
48796: LD_INT 3
48798: NEG
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 3
48806: NEG
48807: PUSH
48808: LD_INT 2
48810: NEG
48811: PUSH
48812: EMPTY
48813: LIST
48814: LIST
48815: PUSH
48816: LD_INT 3
48818: NEG
48819: PUSH
48820: LD_INT 3
48822: NEG
48823: PUSH
48824: EMPTY
48825: LIST
48826: LIST
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: LIST
48832: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
48833: LD_ADDR_VAR 0 59
48837: PUSH
48838: LD_INT 1
48840: NEG
48841: PUSH
48842: LD_INT 2
48844: NEG
48845: PUSH
48846: EMPTY
48847: LIST
48848: LIST
48849: PUSH
48850: LD_INT 0
48852: PUSH
48853: LD_INT 2
48855: NEG
48856: PUSH
48857: EMPTY
48858: LIST
48859: LIST
48860: PUSH
48861: LD_INT 1
48863: PUSH
48864: LD_INT 1
48866: NEG
48867: PUSH
48868: EMPTY
48869: LIST
48870: LIST
48871: PUSH
48872: EMPTY
48873: LIST
48874: LIST
48875: LIST
48876: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48877: LD_ADDR_VAR 0 60
48881: PUSH
48882: LD_INT 1
48884: PUSH
48885: LD_INT 1
48887: NEG
48888: PUSH
48889: EMPTY
48890: LIST
48891: LIST
48892: PUSH
48893: LD_INT 2
48895: PUSH
48896: LD_INT 0
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 2
48905: PUSH
48906: LD_INT 1
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: LIST
48917: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48918: LD_ADDR_VAR 0 61
48922: PUSH
48923: LD_INT 2
48925: PUSH
48926: LD_INT 1
48928: PUSH
48929: EMPTY
48930: LIST
48931: LIST
48932: PUSH
48933: LD_INT 2
48935: PUSH
48936: LD_INT 2
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: LD_INT 1
48945: PUSH
48946: LD_INT 2
48948: PUSH
48949: EMPTY
48950: LIST
48951: LIST
48952: PUSH
48953: EMPTY
48954: LIST
48955: LIST
48956: LIST
48957: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48958: LD_ADDR_VAR 0 62
48962: PUSH
48963: LD_INT 1
48965: PUSH
48966: LD_INT 2
48968: PUSH
48969: EMPTY
48970: LIST
48971: LIST
48972: PUSH
48973: LD_INT 0
48975: PUSH
48976: LD_INT 2
48978: PUSH
48979: EMPTY
48980: LIST
48981: LIST
48982: PUSH
48983: LD_INT 1
48985: NEG
48986: PUSH
48987: LD_INT 1
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: EMPTY
48995: LIST
48996: LIST
48997: LIST
48998: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48999: LD_ADDR_VAR 0 63
49003: PUSH
49004: LD_INT 1
49006: NEG
49007: PUSH
49008: LD_INT 1
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 2
49017: NEG
49018: PUSH
49019: LD_INT 0
49021: PUSH
49022: EMPTY
49023: LIST
49024: LIST
49025: PUSH
49026: LD_INT 2
49028: NEG
49029: PUSH
49030: LD_INT 1
49032: NEG
49033: PUSH
49034: EMPTY
49035: LIST
49036: LIST
49037: PUSH
49038: EMPTY
49039: LIST
49040: LIST
49041: LIST
49042: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49043: LD_ADDR_VAR 0 64
49047: PUSH
49048: LD_INT 1
49050: NEG
49051: PUSH
49052: LD_INT 2
49054: NEG
49055: PUSH
49056: EMPTY
49057: LIST
49058: LIST
49059: PUSH
49060: LD_INT 2
49062: NEG
49063: PUSH
49064: LD_INT 1
49066: NEG
49067: PUSH
49068: EMPTY
49069: LIST
49070: LIST
49071: PUSH
49072: LD_INT 2
49074: NEG
49075: PUSH
49076: LD_INT 2
49078: NEG
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: EMPTY
49085: LIST
49086: LIST
49087: LIST
49088: ST_TO_ADDR
// end ; 2 :
49089: GO 52355
49091: LD_INT 2
49093: DOUBLE
49094: EQUAL
49095: IFTRUE 49099
49097: GO 52354
49099: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
49100: LD_ADDR_VAR 0 29
49104: PUSH
49105: LD_INT 4
49107: PUSH
49108: LD_INT 0
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 4
49117: PUSH
49118: LD_INT 1
49120: NEG
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 5
49128: PUSH
49129: LD_INT 0
49131: PUSH
49132: EMPTY
49133: LIST
49134: LIST
49135: PUSH
49136: LD_INT 5
49138: PUSH
49139: LD_INT 1
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: LD_INT 4
49148: PUSH
49149: LD_INT 1
49151: PUSH
49152: EMPTY
49153: LIST
49154: LIST
49155: PUSH
49156: LD_INT 3
49158: PUSH
49159: LD_INT 0
49161: PUSH
49162: EMPTY
49163: LIST
49164: LIST
49165: PUSH
49166: LD_INT 3
49168: PUSH
49169: LD_INT 1
49171: NEG
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: LD_INT 3
49179: PUSH
49180: LD_INT 2
49182: NEG
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: PUSH
49188: LD_INT 5
49190: PUSH
49191: LD_INT 2
49193: PUSH
49194: EMPTY
49195: LIST
49196: LIST
49197: PUSH
49198: LD_INT 3
49200: PUSH
49201: LD_INT 3
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 3
49210: PUSH
49211: LD_INT 2
49213: PUSH
49214: EMPTY
49215: LIST
49216: LIST
49217: PUSH
49218: LD_INT 4
49220: PUSH
49221: LD_INT 3
49223: PUSH
49224: EMPTY
49225: LIST
49226: LIST
49227: PUSH
49228: LD_INT 4
49230: PUSH
49231: LD_INT 4
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: PUSH
49238: LD_INT 3
49240: PUSH
49241: LD_INT 4
49243: PUSH
49244: EMPTY
49245: LIST
49246: LIST
49247: PUSH
49248: LD_INT 2
49250: PUSH
49251: LD_INT 3
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 2
49260: PUSH
49261: LD_INT 2
49263: PUSH
49264: EMPTY
49265: LIST
49266: LIST
49267: PUSH
49268: LD_INT 4
49270: PUSH
49271: LD_INT 2
49273: PUSH
49274: EMPTY
49275: LIST
49276: LIST
49277: PUSH
49278: LD_INT 2
49280: PUSH
49281: LD_INT 4
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: PUSH
49288: LD_INT 0
49290: PUSH
49291: LD_INT 4
49293: PUSH
49294: EMPTY
49295: LIST
49296: LIST
49297: PUSH
49298: LD_INT 0
49300: PUSH
49301: LD_INT 3
49303: PUSH
49304: EMPTY
49305: LIST
49306: LIST
49307: PUSH
49308: LD_INT 1
49310: PUSH
49311: LD_INT 4
49313: PUSH
49314: EMPTY
49315: LIST
49316: LIST
49317: PUSH
49318: LD_INT 1
49320: PUSH
49321: LD_INT 5
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: PUSH
49328: LD_INT 0
49330: PUSH
49331: LD_INT 5
49333: PUSH
49334: EMPTY
49335: LIST
49336: LIST
49337: PUSH
49338: LD_INT 1
49340: NEG
49341: PUSH
49342: LD_INT 4
49344: PUSH
49345: EMPTY
49346: LIST
49347: LIST
49348: PUSH
49349: LD_INT 1
49351: NEG
49352: PUSH
49353: LD_INT 3
49355: PUSH
49356: EMPTY
49357: LIST
49358: LIST
49359: PUSH
49360: LD_INT 2
49362: PUSH
49363: LD_INT 5
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 2
49372: NEG
49373: PUSH
49374: LD_INT 3
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: LD_INT 3
49383: NEG
49384: PUSH
49385: LD_INT 0
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: LD_INT 3
49394: NEG
49395: PUSH
49396: LD_INT 1
49398: NEG
49399: PUSH
49400: EMPTY
49401: LIST
49402: LIST
49403: PUSH
49404: LD_INT 2
49406: NEG
49407: PUSH
49408: LD_INT 0
49410: PUSH
49411: EMPTY
49412: LIST
49413: LIST
49414: PUSH
49415: LD_INT 2
49417: NEG
49418: PUSH
49419: LD_INT 1
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: PUSH
49426: LD_INT 3
49428: NEG
49429: PUSH
49430: LD_INT 1
49432: PUSH
49433: EMPTY
49434: LIST
49435: LIST
49436: PUSH
49437: LD_INT 4
49439: NEG
49440: PUSH
49441: LD_INT 0
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: LD_INT 4
49450: NEG
49451: PUSH
49452: LD_INT 1
49454: NEG
49455: PUSH
49456: EMPTY
49457: LIST
49458: LIST
49459: PUSH
49460: LD_INT 4
49462: NEG
49463: PUSH
49464: LD_INT 2
49466: NEG
49467: PUSH
49468: EMPTY
49469: LIST
49470: LIST
49471: PUSH
49472: LD_INT 2
49474: NEG
49475: PUSH
49476: LD_INT 2
49478: PUSH
49479: EMPTY
49480: LIST
49481: LIST
49482: PUSH
49483: LD_INT 4
49485: NEG
49486: PUSH
49487: LD_INT 4
49489: NEG
49490: PUSH
49491: EMPTY
49492: LIST
49493: LIST
49494: PUSH
49495: LD_INT 4
49497: NEG
49498: PUSH
49499: LD_INT 5
49501: NEG
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: PUSH
49507: LD_INT 3
49509: NEG
49510: PUSH
49511: LD_INT 4
49513: NEG
49514: PUSH
49515: EMPTY
49516: LIST
49517: LIST
49518: PUSH
49519: LD_INT 3
49521: NEG
49522: PUSH
49523: LD_INT 3
49525: NEG
49526: PUSH
49527: EMPTY
49528: LIST
49529: LIST
49530: PUSH
49531: LD_INT 4
49533: NEG
49534: PUSH
49535: LD_INT 3
49537: NEG
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 5
49545: NEG
49546: PUSH
49547: LD_INT 4
49549: NEG
49550: PUSH
49551: EMPTY
49552: LIST
49553: LIST
49554: PUSH
49555: LD_INT 5
49557: NEG
49558: PUSH
49559: LD_INT 5
49561: NEG
49562: PUSH
49563: EMPTY
49564: LIST
49565: LIST
49566: PUSH
49567: LD_INT 3
49569: NEG
49570: PUSH
49571: LD_INT 5
49573: NEG
49574: PUSH
49575: EMPTY
49576: LIST
49577: LIST
49578: PUSH
49579: LD_INT 5
49581: NEG
49582: PUSH
49583: LD_INT 3
49585: NEG
49586: PUSH
49587: EMPTY
49588: LIST
49589: LIST
49590: PUSH
49591: EMPTY
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: LIST
49599: LIST
49600: LIST
49601: LIST
49602: LIST
49603: LIST
49604: LIST
49605: LIST
49606: LIST
49607: LIST
49608: LIST
49609: LIST
49610: LIST
49611: LIST
49612: LIST
49613: LIST
49614: LIST
49615: LIST
49616: LIST
49617: LIST
49618: LIST
49619: LIST
49620: LIST
49621: LIST
49622: LIST
49623: LIST
49624: LIST
49625: LIST
49626: LIST
49627: LIST
49628: LIST
49629: LIST
49630: LIST
49631: LIST
49632: LIST
49633: LIST
49634: LIST
49635: LIST
49636: LIST
49637: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49638: LD_ADDR_VAR 0 30
49642: PUSH
49643: LD_INT 4
49645: PUSH
49646: LD_INT 4
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 4
49655: PUSH
49656: LD_INT 3
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 5
49665: PUSH
49666: LD_INT 4
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 5
49675: PUSH
49676: LD_INT 5
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 4
49685: PUSH
49686: LD_INT 5
49688: PUSH
49689: EMPTY
49690: LIST
49691: LIST
49692: PUSH
49693: LD_INT 3
49695: PUSH
49696: LD_INT 4
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 3
49705: PUSH
49706: LD_INT 3
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 5
49715: PUSH
49716: LD_INT 3
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: LD_INT 3
49725: PUSH
49726: LD_INT 5
49728: PUSH
49729: EMPTY
49730: LIST
49731: LIST
49732: PUSH
49733: LD_INT 0
49735: PUSH
49736: LD_INT 3
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 0
49745: PUSH
49746: LD_INT 2
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 1
49755: PUSH
49756: LD_INT 3
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: PUSH
49763: LD_INT 1
49765: PUSH
49766: LD_INT 4
49768: PUSH
49769: EMPTY
49770: LIST
49771: LIST
49772: PUSH
49773: LD_INT 0
49775: PUSH
49776: LD_INT 4
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 1
49785: NEG
49786: PUSH
49787: LD_INT 3
49789: PUSH
49790: EMPTY
49791: LIST
49792: LIST
49793: PUSH
49794: LD_INT 1
49796: NEG
49797: PUSH
49798: LD_INT 2
49800: PUSH
49801: EMPTY
49802: LIST
49803: LIST
49804: PUSH
49805: LD_INT 2
49807: PUSH
49808: LD_INT 4
49810: PUSH
49811: EMPTY
49812: LIST
49813: LIST
49814: PUSH
49815: LD_INT 2
49817: NEG
49818: PUSH
49819: LD_INT 2
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 4
49828: NEG
49829: PUSH
49830: LD_INT 0
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 4
49839: NEG
49840: PUSH
49841: LD_INT 1
49843: NEG
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 3
49851: NEG
49852: PUSH
49853: LD_INT 0
49855: PUSH
49856: EMPTY
49857: LIST
49858: LIST
49859: PUSH
49860: LD_INT 3
49862: NEG
49863: PUSH
49864: LD_INT 1
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 4
49873: NEG
49874: PUSH
49875: LD_INT 1
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 5
49884: NEG
49885: PUSH
49886: LD_INT 0
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: LD_INT 5
49895: NEG
49896: PUSH
49897: LD_INT 1
49899: NEG
49900: PUSH
49901: EMPTY
49902: LIST
49903: LIST
49904: PUSH
49905: LD_INT 5
49907: NEG
49908: PUSH
49909: LD_INT 2
49911: NEG
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: PUSH
49917: LD_INT 3
49919: NEG
49920: PUSH
49921: LD_INT 2
49923: PUSH
49924: EMPTY
49925: LIST
49926: LIST
49927: PUSH
49928: LD_INT 3
49930: NEG
49931: PUSH
49932: LD_INT 3
49934: NEG
49935: PUSH
49936: EMPTY
49937: LIST
49938: LIST
49939: PUSH
49940: LD_INT 3
49942: NEG
49943: PUSH
49944: LD_INT 4
49946: NEG
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 2
49954: NEG
49955: PUSH
49956: LD_INT 3
49958: NEG
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 2
49966: NEG
49967: PUSH
49968: LD_INT 2
49970: NEG
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 3
49978: NEG
49979: PUSH
49980: LD_INT 2
49982: NEG
49983: PUSH
49984: EMPTY
49985: LIST
49986: LIST
49987: PUSH
49988: LD_INT 4
49990: NEG
49991: PUSH
49992: LD_INT 3
49994: NEG
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 4
50002: NEG
50003: PUSH
50004: LD_INT 4
50006: NEG
50007: PUSH
50008: EMPTY
50009: LIST
50010: LIST
50011: PUSH
50012: LD_INT 2
50014: NEG
50015: PUSH
50016: LD_INT 4
50018: NEG
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: PUSH
50024: LD_INT 4
50026: NEG
50027: PUSH
50028: LD_INT 2
50030: NEG
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 0
50038: PUSH
50039: LD_INT 4
50041: NEG
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 0
50049: PUSH
50050: LD_INT 5
50052: NEG
50053: PUSH
50054: EMPTY
50055: LIST
50056: LIST
50057: PUSH
50058: LD_INT 1
50060: PUSH
50061: LD_INT 4
50063: NEG
50064: PUSH
50065: EMPTY
50066: LIST
50067: LIST
50068: PUSH
50069: LD_INT 1
50071: PUSH
50072: LD_INT 3
50074: NEG
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: PUSH
50080: LD_INT 0
50082: PUSH
50083: LD_INT 3
50085: NEG
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 1
50093: NEG
50094: PUSH
50095: LD_INT 4
50097: NEG
50098: PUSH
50099: EMPTY
50100: LIST
50101: LIST
50102: PUSH
50103: LD_INT 1
50105: NEG
50106: PUSH
50107: LD_INT 5
50109: NEG
50110: PUSH
50111: EMPTY
50112: LIST
50113: LIST
50114: PUSH
50115: LD_INT 2
50117: PUSH
50118: LD_INT 3
50120: NEG
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: PUSH
50126: LD_INT 2
50128: NEG
50129: PUSH
50130: LD_INT 5
50132: NEG
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: EMPTY
50139: LIST
50140: LIST
50141: LIST
50142: LIST
50143: LIST
50144: LIST
50145: LIST
50146: LIST
50147: LIST
50148: LIST
50149: LIST
50150: LIST
50151: LIST
50152: LIST
50153: LIST
50154: LIST
50155: LIST
50156: LIST
50157: LIST
50158: LIST
50159: LIST
50160: LIST
50161: LIST
50162: LIST
50163: LIST
50164: LIST
50165: LIST
50166: LIST
50167: LIST
50168: LIST
50169: LIST
50170: LIST
50171: LIST
50172: LIST
50173: LIST
50174: LIST
50175: LIST
50176: LIST
50177: LIST
50178: LIST
50179: LIST
50180: LIST
50181: LIST
50182: LIST
50183: LIST
50184: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
50185: LD_ADDR_VAR 0 31
50189: PUSH
50190: LD_INT 0
50192: PUSH
50193: LD_INT 4
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 0
50202: PUSH
50203: LD_INT 3
50205: PUSH
50206: EMPTY
50207: LIST
50208: LIST
50209: PUSH
50210: LD_INT 1
50212: PUSH
50213: LD_INT 4
50215: PUSH
50216: EMPTY
50217: LIST
50218: LIST
50219: PUSH
50220: LD_INT 1
50222: PUSH
50223: LD_INT 5
50225: PUSH
50226: EMPTY
50227: LIST
50228: LIST
50229: PUSH
50230: LD_INT 0
50232: PUSH
50233: LD_INT 5
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 1
50242: NEG
50243: PUSH
50244: LD_INT 4
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: LD_INT 1
50253: NEG
50254: PUSH
50255: LD_INT 3
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: LD_INT 2
50264: PUSH
50265: LD_INT 5
50267: PUSH
50268: EMPTY
50269: LIST
50270: LIST
50271: PUSH
50272: LD_INT 2
50274: NEG
50275: PUSH
50276: LD_INT 3
50278: PUSH
50279: EMPTY
50280: LIST
50281: LIST
50282: PUSH
50283: LD_INT 3
50285: NEG
50286: PUSH
50287: LD_INT 0
50289: PUSH
50290: EMPTY
50291: LIST
50292: LIST
50293: PUSH
50294: LD_INT 3
50296: NEG
50297: PUSH
50298: LD_INT 1
50300: NEG
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 2
50308: NEG
50309: PUSH
50310: LD_INT 0
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 2
50319: NEG
50320: PUSH
50321: LD_INT 1
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 3
50330: NEG
50331: PUSH
50332: LD_INT 1
50334: PUSH
50335: EMPTY
50336: LIST
50337: LIST
50338: PUSH
50339: LD_INT 4
50341: NEG
50342: PUSH
50343: LD_INT 0
50345: PUSH
50346: EMPTY
50347: LIST
50348: LIST
50349: PUSH
50350: LD_INT 4
50352: NEG
50353: PUSH
50354: LD_INT 1
50356: NEG
50357: PUSH
50358: EMPTY
50359: LIST
50360: LIST
50361: PUSH
50362: LD_INT 4
50364: NEG
50365: PUSH
50366: LD_INT 2
50368: NEG
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 2
50376: NEG
50377: PUSH
50378: LD_INT 2
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 4
50387: NEG
50388: PUSH
50389: LD_INT 4
50391: NEG
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 4
50399: NEG
50400: PUSH
50401: LD_INT 5
50403: NEG
50404: PUSH
50405: EMPTY
50406: LIST
50407: LIST
50408: PUSH
50409: LD_INT 3
50411: NEG
50412: PUSH
50413: LD_INT 4
50415: NEG
50416: PUSH
50417: EMPTY
50418: LIST
50419: LIST
50420: PUSH
50421: LD_INT 3
50423: NEG
50424: PUSH
50425: LD_INT 3
50427: NEG
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 4
50435: NEG
50436: PUSH
50437: LD_INT 3
50439: NEG
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 5
50447: NEG
50448: PUSH
50449: LD_INT 4
50451: NEG
50452: PUSH
50453: EMPTY
50454: LIST
50455: LIST
50456: PUSH
50457: LD_INT 5
50459: NEG
50460: PUSH
50461: LD_INT 5
50463: NEG
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 3
50471: NEG
50472: PUSH
50473: LD_INT 5
50475: NEG
50476: PUSH
50477: EMPTY
50478: LIST
50479: LIST
50480: PUSH
50481: LD_INT 5
50483: NEG
50484: PUSH
50485: LD_INT 3
50487: NEG
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 0
50495: PUSH
50496: LD_INT 3
50498: NEG
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: PUSH
50504: LD_INT 0
50506: PUSH
50507: LD_INT 4
50509: NEG
50510: PUSH
50511: EMPTY
50512: LIST
50513: LIST
50514: PUSH
50515: LD_INT 1
50517: PUSH
50518: LD_INT 3
50520: NEG
50521: PUSH
50522: EMPTY
50523: LIST
50524: LIST
50525: PUSH
50526: LD_INT 1
50528: PUSH
50529: LD_INT 2
50531: NEG
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: PUSH
50537: LD_INT 0
50539: PUSH
50540: LD_INT 2
50542: NEG
50543: PUSH
50544: EMPTY
50545: LIST
50546: LIST
50547: PUSH
50548: LD_INT 1
50550: NEG
50551: PUSH
50552: LD_INT 3
50554: NEG
50555: PUSH
50556: EMPTY
50557: LIST
50558: LIST
50559: PUSH
50560: LD_INT 1
50562: NEG
50563: PUSH
50564: LD_INT 4
50566: NEG
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 2
50574: PUSH
50575: LD_INT 2
50577: NEG
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 2
50585: NEG
50586: PUSH
50587: LD_INT 4
50589: NEG
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 4
50597: PUSH
50598: LD_INT 0
50600: PUSH
50601: EMPTY
50602: LIST
50603: LIST
50604: PUSH
50605: LD_INT 4
50607: PUSH
50608: LD_INT 1
50610: NEG
50611: PUSH
50612: EMPTY
50613: LIST
50614: LIST
50615: PUSH
50616: LD_INT 5
50618: PUSH
50619: LD_INT 0
50621: PUSH
50622: EMPTY
50623: LIST
50624: LIST
50625: PUSH
50626: LD_INT 5
50628: PUSH
50629: LD_INT 1
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 4
50638: PUSH
50639: LD_INT 1
50641: PUSH
50642: EMPTY
50643: LIST
50644: LIST
50645: PUSH
50646: LD_INT 3
50648: PUSH
50649: LD_INT 0
50651: PUSH
50652: EMPTY
50653: LIST
50654: LIST
50655: PUSH
50656: LD_INT 3
50658: PUSH
50659: LD_INT 1
50661: NEG
50662: PUSH
50663: EMPTY
50664: LIST
50665: LIST
50666: PUSH
50667: LD_INT 3
50669: PUSH
50670: LD_INT 2
50672: NEG
50673: PUSH
50674: EMPTY
50675: LIST
50676: LIST
50677: PUSH
50678: LD_INT 5
50680: PUSH
50681: LD_INT 2
50683: PUSH
50684: EMPTY
50685: LIST
50686: LIST
50687: PUSH
50688: EMPTY
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: LIST
50707: LIST
50708: LIST
50709: LIST
50710: LIST
50711: LIST
50712: LIST
50713: LIST
50714: LIST
50715: LIST
50716: LIST
50717: LIST
50718: LIST
50719: LIST
50720: LIST
50721: LIST
50722: LIST
50723: LIST
50724: LIST
50725: LIST
50726: LIST
50727: LIST
50728: LIST
50729: LIST
50730: LIST
50731: LIST
50732: LIST
50733: LIST
50734: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
50735: LD_ADDR_VAR 0 32
50739: PUSH
50740: LD_INT 4
50742: NEG
50743: PUSH
50744: LD_INT 0
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 4
50753: NEG
50754: PUSH
50755: LD_INT 1
50757: NEG
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 3
50765: NEG
50766: PUSH
50767: LD_INT 0
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 3
50776: NEG
50777: PUSH
50778: LD_INT 1
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 4
50787: NEG
50788: PUSH
50789: LD_INT 1
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 5
50798: NEG
50799: PUSH
50800: LD_INT 0
50802: PUSH
50803: EMPTY
50804: LIST
50805: LIST
50806: PUSH
50807: LD_INT 5
50809: NEG
50810: PUSH
50811: LD_INT 1
50813: NEG
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 5
50821: NEG
50822: PUSH
50823: LD_INT 2
50825: NEG
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: LD_INT 3
50833: NEG
50834: PUSH
50835: LD_INT 2
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 3
50844: NEG
50845: PUSH
50846: LD_INT 3
50848: NEG
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 3
50856: NEG
50857: PUSH
50858: LD_INT 4
50860: NEG
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: LD_INT 2
50868: NEG
50869: PUSH
50870: LD_INT 3
50872: NEG
50873: PUSH
50874: EMPTY
50875: LIST
50876: LIST
50877: PUSH
50878: LD_INT 2
50880: NEG
50881: PUSH
50882: LD_INT 2
50884: NEG
50885: PUSH
50886: EMPTY
50887: LIST
50888: LIST
50889: PUSH
50890: LD_INT 3
50892: NEG
50893: PUSH
50894: LD_INT 2
50896: NEG
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: LD_INT 4
50904: NEG
50905: PUSH
50906: LD_INT 3
50908: NEG
50909: PUSH
50910: EMPTY
50911: LIST
50912: LIST
50913: PUSH
50914: LD_INT 4
50916: NEG
50917: PUSH
50918: LD_INT 4
50920: NEG
50921: PUSH
50922: EMPTY
50923: LIST
50924: LIST
50925: PUSH
50926: LD_INT 2
50928: NEG
50929: PUSH
50930: LD_INT 4
50932: NEG
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 4
50940: NEG
50941: PUSH
50942: LD_INT 2
50944: NEG
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: LD_INT 0
50952: PUSH
50953: LD_INT 4
50955: NEG
50956: PUSH
50957: EMPTY
50958: LIST
50959: LIST
50960: PUSH
50961: LD_INT 0
50963: PUSH
50964: LD_INT 5
50966: NEG
50967: PUSH
50968: EMPTY
50969: LIST
50970: LIST
50971: PUSH
50972: LD_INT 1
50974: PUSH
50975: LD_INT 4
50977: NEG
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: LD_INT 1
50985: PUSH
50986: LD_INT 3
50988: NEG
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: LD_INT 0
50996: PUSH
50997: LD_INT 3
50999: NEG
51000: PUSH
51001: EMPTY
51002: LIST
51003: LIST
51004: PUSH
51005: LD_INT 1
51007: NEG
51008: PUSH
51009: LD_INT 4
51011: NEG
51012: PUSH
51013: EMPTY
51014: LIST
51015: LIST
51016: PUSH
51017: LD_INT 1
51019: NEG
51020: PUSH
51021: LD_INT 5
51023: NEG
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 2
51031: PUSH
51032: LD_INT 3
51034: NEG
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 2
51042: NEG
51043: PUSH
51044: LD_INT 5
51046: NEG
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 3
51054: PUSH
51055: LD_INT 0
51057: PUSH
51058: EMPTY
51059: LIST
51060: LIST
51061: PUSH
51062: LD_INT 3
51064: PUSH
51065: LD_INT 1
51067: NEG
51068: PUSH
51069: EMPTY
51070: LIST
51071: LIST
51072: PUSH
51073: LD_INT 4
51075: PUSH
51076: LD_INT 0
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 4
51085: PUSH
51086: LD_INT 1
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: LD_INT 3
51095: PUSH
51096: LD_INT 1
51098: PUSH
51099: EMPTY
51100: LIST
51101: LIST
51102: PUSH
51103: LD_INT 2
51105: PUSH
51106: LD_INT 0
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 2
51115: PUSH
51116: LD_INT 1
51118: NEG
51119: PUSH
51120: EMPTY
51121: LIST
51122: LIST
51123: PUSH
51124: LD_INT 2
51126: PUSH
51127: LD_INT 2
51129: NEG
51130: PUSH
51131: EMPTY
51132: LIST
51133: LIST
51134: PUSH
51135: LD_INT 4
51137: PUSH
51138: LD_INT 2
51140: PUSH
51141: EMPTY
51142: LIST
51143: LIST
51144: PUSH
51145: LD_INT 4
51147: PUSH
51148: LD_INT 4
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: LD_INT 4
51157: PUSH
51158: LD_INT 3
51160: PUSH
51161: EMPTY
51162: LIST
51163: LIST
51164: PUSH
51165: LD_INT 5
51167: PUSH
51168: LD_INT 4
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 5
51177: PUSH
51178: LD_INT 5
51180: PUSH
51181: EMPTY
51182: LIST
51183: LIST
51184: PUSH
51185: LD_INT 4
51187: PUSH
51188: LD_INT 5
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 3
51197: PUSH
51198: LD_INT 4
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 3
51207: PUSH
51208: LD_INT 3
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: LD_INT 5
51217: PUSH
51218: LD_INT 3
51220: PUSH
51221: EMPTY
51222: LIST
51223: LIST
51224: PUSH
51225: LD_INT 3
51227: PUSH
51228: LD_INT 5
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: LIST
51239: LIST
51240: LIST
51241: LIST
51242: LIST
51243: LIST
51244: LIST
51245: LIST
51246: LIST
51247: LIST
51248: LIST
51249: LIST
51250: LIST
51251: LIST
51252: LIST
51253: LIST
51254: LIST
51255: LIST
51256: LIST
51257: LIST
51258: LIST
51259: LIST
51260: LIST
51261: LIST
51262: LIST
51263: LIST
51264: LIST
51265: LIST
51266: LIST
51267: LIST
51268: LIST
51269: LIST
51270: LIST
51271: LIST
51272: LIST
51273: LIST
51274: LIST
51275: LIST
51276: LIST
51277: LIST
51278: LIST
51279: LIST
51280: LIST
51281: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
51282: LD_ADDR_VAR 0 33
51286: PUSH
51287: LD_INT 4
51289: NEG
51290: PUSH
51291: LD_INT 4
51293: NEG
51294: PUSH
51295: EMPTY
51296: LIST
51297: LIST
51298: PUSH
51299: LD_INT 4
51301: NEG
51302: PUSH
51303: LD_INT 5
51305: NEG
51306: PUSH
51307: EMPTY
51308: LIST
51309: LIST
51310: PUSH
51311: LD_INT 3
51313: NEG
51314: PUSH
51315: LD_INT 4
51317: NEG
51318: PUSH
51319: EMPTY
51320: LIST
51321: LIST
51322: PUSH
51323: LD_INT 3
51325: NEG
51326: PUSH
51327: LD_INT 3
51329: NEG
51330: PUSH
51331: EMPTY
51332: LIST
51333: LIST
51334: PUSH
51335: LD_INT 4
51337: NEG
51338: PUSH
51339: LD_INT 3
51341: NEG
51342: PUSH
51343: EMPTY
51344: LIST
51345: LIST
51346: PUSH
51347: LD_INT 5
51349: NEG
51350: PUSH
51351: LD_INT 4
51353: NEG
51354: PUSH
51355: EMPTY
51356: LIST
51357: LIST
51358: PUSH
51359: LD_INT 5
51361: NEG
51362: PUSH
51363: LD_INT 5
51365: NEG
51366: PUSH
51367: EMPTY
51368: LIST
51369: LIST
51370: PUSH
51371: LD_INT 3
51373: NEG
51374: PUSH
51375: LD_INT 5
51377: NEG
51378: PUSH
51379: EMPTY
51380: LIST
51381: LIST
51382: PUSH
51383: LD_INT 5
51385: NEG
51386: PUSH
51387: LD_INT 3
51389: NEG
51390: PUSH
51391: EMPTY
51392: LIST
51393: LIST
51394: PUSH
51395: LD_INT 0
51397: PUSH
51398: LD_INT 3
51400: NEG
51401: PUSH
51402: EMPTY
51403: LIST
51404: LIST
51405: PUSH
51406: LD_INT 0
51408: PUSH
51409: LD_INT 4
51411: NEG
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: PUSH
51417: LD_INT 1
51419: PUSH
51420: LD_INT 3
51422: NEG
51423: PUSH
51424: EMPTY
51425: LIST
51426: LIST
51427: PUSH
51428: LD_INT 1
51430: PUSH
51431: LD_INT 2
51433: NEG
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 0
51441: PUSH
51442: LD_INT 2
51444: NEG
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: PUSH
51450: LD_INT 1
51452: NEG
51453: PUSH
51454: LD_INT 3
51456: NEG
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 1
51464: NEG
51465: PUSH
51466: LD_INT 4
51468: NEG
51469: PUSH
51470: EMPTY
51471: LIST
51472: LIST
51473: PUSH
51474: LD_INT 2
51476: PUSH
51477: LD_INT 2
51479: NEG
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 2
51487: NEG
51488: PUSH
51489: LD_INT 4
51491: NEG
51492: PUSH
51493: EMPTY
51494: LIST
51495: LIST
51496: PUSH
51497: LD_INT 4
51499: PUSH
51500: LD_INT 0
51502: PUSH
51503: EMPTY
51504: LIST
51505: LIST
51506: PUSH
51507: LD_INT 4
51509: PUSH
51510: LD_INT 1
51512: NEG
51513: PUSH
51514: EMPTY
51515: LIST
51516: LIST
51517: PUSH
51518: LD_INT 5
51520: PUSH
51521: LD_INT 0
51523: PUSH
51524: EMPTY
51525: LIST
51526: LIST
51527: PUSH
51528: LD_INT 5
51530: PUSH
51531: LD_INT 1
51533: PUSH
51534: EMPTY
51535: LIST
51536: LIST
51537: PUSH
51538: LD_INT 4
51540: PUSH
51541: LD_INT 1
51543: PUSH
51544: EMPTY
51545: LIST
51546: LIST
51547: PUSH
51548: LD_INT 3
51550: PUSH
51551: LD_INT 0
51553: PUSH
51554: EMPTY
51555: LIST
51556: LIST
51557: PUSH
51558: LD_INT 3
51560: PUSH
51561: LD_INT 1
51563: NEG
51564: PUSH
51565: EMPTY
51566: LIST
51567: LIST
51568: PUSH
51569: LD_INT 3
51571: PUSH
51572: LD_INT 2
51574: NEG
51575: PUSH
51576: EMPTY
51577: LIST
51578: LIST
51579: PUSH
51580: LD_INT 5
51582: PUSH
51583: LD_INT 2
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 3
51592: PUSH
51593: LD_INT 3
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 3
51602: PUSH
51603: LD_INT 2
51605: PUSH
51606: EMPTY
51607: LIST
51608: LIST
51609: PUSH
51610: LD_INT 4
51612: PUSH
51613: LD_INT 3
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 4
51622: PUSH
51623: LD_INT 4
51625: PUSH
51626: EMPTY
51627: LIST
51628: LIST
51629: PUSH
51630: LD_INT 3
51632: PUSH
51633: LD_INT 4
51635: PUSH
51636: EMPTY
51637: LIST
51638: LIST
51639: PUSH
51640: LD_INT 2
51642: PUSH
51643: LD_INT 3
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: PUSH
51650: LD_INT 2
51652: PUSH
51653: LD_INT 2
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: LD_INT 4
51662: PUSH
51663: LD_INT 2
51665: PUSH
51666: EMPTY
51667: LIST
51668: LIST
51669: PUSH
51670: LD_INT 2
51672: PUSH
51673: LD_INT 4
51675: PUSH
51676: EMPTY
51677: LIST
51678: LIST
51679: PUSH
51680: LD_INT 0
51682: PUSH
51683: LD_INT 4
51685: PUSH
51686: EMPTY
51687: LIST
51688: LIST
51689: PUSH
51690: LD_INT 0
51692: PUSH
51693: LD_INT 3
51695: PUSH
51696: EMPTY
51697: LIST
51698: LIST
51699: PUSH
51700: LD_INT 1
51702: PUSH
51703: LD_INT 4
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: LD_INT 1
51712: PUSH
51713: LD_INT 5
51715: PUSH
51716: EMPTY
51717: LIST
51718: LIST
51719: PUSH
51720: LD_INT 0
51722: PUSH
51723: LD_INT 5
51725: PUSH
51726: EMPTY
51727: LIST
51728: LIST
51729: PUSH
51730: LD_INT 1
51732: NEG
51733: PUSH
51734: LD_INT 4
51736: PUSH
51737: EMPTY
51738: LIST
51739: LIST
51740: PUSH
51741: LD_INT 1
51743: NEG
51744: PUSH
51745: LD_INT 3
51747: PUSH
51748: EMPTY
51749: LIST
51750: LIST
51751: PUSH
51752: LD_INT 2
51754: PUSH
51755: LD_INT 5
51757: PUSH
51758: EMPTY
51759: LIST
51760: LIST
51761: PUSH
51762: LD_INT 2
51764: NEG
51765: PUSH
51766: LD_INT 3
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: LIST
51777: LIST
51778: LIST
51779: LIST
51780: LIST
51781: LIST
51782: LIST
51783: LIST
51784: LIST
51785: LIST
51786: LIST
51787: LIST
51788: LIST
51789: LIST
51790: LIST
51791: LIST
51792: LIST
51793: LIST
51794: LIST
51795: LIST
51796: LIST
51797: LIST
51798: LIST
51799: LIST
51800: LIST
51801: LIST
51802: LIST
51803: LIST
51804: LIST
51805: LIST
51806: LIST
51807: LIST
51808: LIST
51809: LIST
51810: LIST
51811: LIST
51812: LIST
51813: LIST
51814: LIST
51815: LIST
51816: LIST
51817: LIST
51818: LIST
51819: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
51820: LD_ADDR_VAR 0 34
51824: PUSH
51825: LD_INT 0
51827: PUSH
51828: LD_INT 4
51830: NEG
51831: PUSH
51832: EMPTY
51833: LIST
51834: LIST
51835: PUSH
51836: LD_INT 0
51838: PUSH
51839: LD_INT 5
51841: NEG
51842: PUSH
51843: EMPTY
51844: LIST
51845: LIST
51846: PUSH
51847: LD_INT 1
51849: PUSH
51850: LD_INT 4
51852: NEG
51853: PUSH
51854: EMPTY
51855: LIST
51856: LIST
51857: PUSH
51858: LD_INT 1
51860: PUSH
51861: LD_INT 3
51863: NEG
51864: PUSH
51865: EMPTY
51866: LIST
51867: LIST
51868: PUSH
51869: LD_INT 0
51871: PUSH
51872: LD_INT 3
51874: NEG
51875: PUSH
51876: EMPTY
51877: LIST
51878: LIST
51879: PUSH
51880: LD_INT 1
51882: NEG
51883: PUSH
51884: LD_INT 4
51886: NEG
51887: PUSH
51888: EMPTY
51889: LIST
51890: LIST
51891: PUSH
51892: LD_INT 1
51894: NEG
51895: PUSH
51896: LD_INT 5
51898: NEG
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 2
51906: PUSH
51907: LD_INT 3
51909: NEG
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: PUSH
51915: LD_INT 2
51917: NEG
51918: PUSH
51919: LD_INT 5
51921: NEG
51922: PUSH
51923: EMPTY
51924: LIST
51925: LIST
51926: PUSH
51927: LD_INT 3
51929: PUSH
51930: LD_INT 0
51932: PUSH
51933: EMPTY
51934: LIST
51935: LIST
51936: PUSH
51937: LD_INT 3
51939: PUSH
51940: LD_INT 1
51942: NEG
51943: PUSH
51944: EMPTY
51945: LIST
51946: LIST
51947: PUSH
51948: LD_INT 4
51950: PUSH
51951: LD_INT 0
51953: PUSH
51954: EMPTY
51955: LIST
51956: LIST
51957: PUSH
51958: LD_INT 4
51960: PUSH
51961: LD_INT 1
51963: PUSH
51964: EMPTY
51965: LIST
51966: LIST
51967: PUSH
51968: LD_INT 3
51970: PUSH
51971: LD_INT 1
51973: PUSH
51974: EMPTY
51975: LIST
51976: LIST
51977: PUSH
51978: LD_INT 2
51980: PUSH
51981: LD_INT 0
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 2
51990: PUSH
51991: LD_INT 1
51993: NEG
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 2
52001: PUSH
52002: LD_INT 2
52004: NEG
52005: PUSH
52006: EMPTY
52007: LIST
52008: LIST
52009: PUSH
52010: LD_INT 4
52012: PUSH
52013: LD_INT 2
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 4
52022: PUSH
52023: LD_INT 4
52025: PUSH
52026: EMPTY
52027: LIST
52028: LIST
52029: PUSH
52030: LD_INT 4
52032: PUSH
52033: LD_INT 3
52035: PUSH
52036: EMPTY
52037: LIST
52038: LIST
52039: PUSH
52040: LD_INT 5
52042: PUSH
52043: LD_INT 4
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 5
52052: PUSH
52053: LD_INT 5
52055: PUSH
52056: EMPTY
52057: LIST
52058: LIST
52059: PUSH
52060: LD_INT 4
52062: PUSH
52063: LD_INT 5
52065: PUSH
52066: EMPTY
52067: LIST
52068: LIST
52069: PUSH
52070: LD_INT 3
52072: PUSH
52073: LD_INT 4
52075: PUSH
52076: EMPTY
52077: LIST
52078: LIST
52079: PUSH
52080: LD_INT 3
52082: PUSH
52083: LD_INT 3
52085: PUSH
52086: EMPTY
52087: LIST
52088: LIST
52089: PUSH
52090: LD_INT 5
52092: PUSH
52093: LD_INT 3
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 3
52102: PUSH
52103: LD_INT 5
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 0
52112: PUSH
52113: LD_INT 3
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 0
52122: PUSH
52123: LD_INT 2
52125: PUSH
52126: EMPTY
52127: LIST
52128: LIST
52129: PUSH
52130: LD_INT 1
52132: PUSH
52133: LD_INT 3
52135: PUSH
52136: EMPTY
52137: LIST
52138: LIST
52139: PUSH
52140: LD_INT 1
52142: PUSH
52143: LD_INT 4
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 0
52152: PUSH
52153: LD_INT 4
52155: PUSH
52156: EMPTY
52157: LIST
52158: LIST
52159: PUSH
52160: LD_INT 1
52162: NEG
52163: PUSH
52164: LD_INT 3
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 1
52173: NEG
52174: PUSH
52175: LD_INT 2
52177: PUSH
52178: EMPTY
52179: LIST
52180: LIST
52181: PUSH
52182: LD_INT 2
52184: PUSH
52185: LD_INT 4
52187: PUSH
52188: EMPTY
52189: LIST
52190: LIST
52191: PUSH
52192: LD_INT 2
52194: NEG
52195: PUSH
52196: LD_INT 2
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 4
52205: NEG
52206: PUSH
52207: LD_INT 0
52209: PUSH
52210: EMPTY
52211: LIST
52212: LIST
52213: PUSH
52214: LD_INT 4
52216: NEG
52217: PUSH
52218: LD_INT 1
52220: NEG
52221: PUSH
52222: EMPTY
52223: LIST
52224: LIST
52225: PUSH
52226: LD_INT 3
52228: NEG
52229: PUSH
52230: LD_INT 0
52232: PUSH
52233: EMPTY
52234: LIST
52235: LIST
52236: PUSH
52237: LD_INT 3
52239: NEG
52240: PUSH
52241: LD_INT 1
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 4
52250: NEG
52251: PUSH
52252: LD_INT 1
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 5
52261: NEG
52262: PUSH
52263: LD_INT 0
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 5
52272: NEG
52273: PUSH
52274: LD_INT 1
52276: NEG
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 5
52284: NEG
52285: PUSH
52286: LD_INT 2
52288: NEG
52289: PUSH
52290: EMPTY
52291: LIST
52292: LIST
52293: PUSH
52294: LD_INT 3
52296: NEG
52297: PUSH
52298: LD_INT 2
52300: PUSH
52301: EMPTY
52302: LIST
52303: LIST
52304: PUSH
52305: EMPTY
52306: LIST
52307: LIST
52308: LIST
52309: LIST
52310: LIST
52311: LIST
52312: LIST
52313: LIST
52314: LIST
52315: LIST
52316: LIST
52317: LIST
52318: LIST
52319: LIST
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: ST_TO_ADDR
// end ; end ;
52352: GO 52355
52354: POP
// case btype of b_depot , b_warehouse :
52355: LD_VAR 0 1
52359: PUSH
52360: LD_INT 0
52362: DOUBLE
52363: EQUAL
52364: IFTRUE 52374
52366: LD_INT 1
52368: DOUBLE
52369: EQUAL
52370: IFTRUE 52374
52372: GO 52575
52374: POP
// case nation of nation_american :
52375: LD_VAR 0 5
52379: PUSH
52380: LD_INT 1
52382: DOUBLE
52383: EQUAL
52384: IFTRUE 52388
52386: GO 52444
52388: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
52389: LD_ADDR_VAR 0 9
52393: PUSH
52394: LD_VAR 0 11
52398: PUSH
52399: LD_VAR 0 12
52403: PUSH
52404: LD_VAR 0 13
52408: PUSH
52409: LD_VAR 0 14
52413: PUSH
52414: LD_VAR 0 15
52418: PUSH
52419: LD_VAR 0 16
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: LIST
52430: LIST
52431: PUSH
52432: LD_VAR 0 4
52436: PUSH
52437: LD_INT 1
52439: PLUS
52440: ARRAY
52441: ST_TO_ADDR
52442: GO 52573
52444: LD_INT 2
52446: DOUBLE
52447: EQUAL
52448: IFTRUE 52452
52450: GO 52508
52452: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
52453: LD_ADDR_VAR 0 9
52457: PUSH
52458: LD_VAR 0 17
52462: PUSH
52463: LD_VAR 0 18
52467: PUSH
52468: LD_VAR 0 19
52472: PUSH
52473: LD_VAR 0 20
52477: PUSH
52478: LD_VAR 0 21
52482: PUSH
52483: LD_VAR 0 22
52487: PUSH
52488: EMPTY
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: PUSH
52496: LD_VAR 0 4
52500: PUSH
52501: LD_INT 1
52503: PLUS
52504: ARRAY
52505: ST_TO_ADDR
52506: GO 52573
52508: LD_INT 3
52510: DOUBLE
52511: EQUAL
52512: IFTRUE 52516
52514: GO 52572
52516: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52517: LD_ADDR_VAR 0 9
52521: PUSH
52522: LD_VAR 0 23
52526: PUSH
52527: LD_VAR 0 24
52531: PUSH
52532: LD_VAR 0 25
52536: PUSH
52537: LD_VAR 0 26
52541: PUSH
52542: LD_VAR 0 27
52546: PUSH
52547: LD_VAR 0 28
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: LIST
52556: LIST
52557: LIST
52558: LIST
52559: PUSH
52560: LD_VAR 0 4
52564: PUSH
52565: LD_INT 1
52567: PLUS
52568: ARRAY
52569: ST_TO_ADDR
52570: GO 52573
52572: POP
52573: GO 53128
52575: LD_INT 2
52577: DOUBLE
52578: EQUAL
52579: IFTRUE 52589
52581: LD_INT 3
52583: DOUBLE
52584: EQUAL
52585: IFTRUE 52589
52587: GO 52645
52589: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52590: LD_ADDR_VAR 0 9
52594: PUSH
52595: LD_VAR 0 29
52599: PUSH
52600: LD_VAR 0 30
52604: PUSH
52605: LD_VAR 0 31
52609: PUSH
52610: LD_VAR 0 32
52614: PUSH
52615: LD_VAR 0 33
52619: PUSH
52620: LD_VAR 0 34
52624: PUSH
52625: EMPTY
52626: LIST
52627: LIST
52628: LIST
52629: LIST
52630: LIST
52631: LIST
52632: PUSH
52633: LD_VAR 0 4
52637: PUSH
52638: LD_INT 1
52640: PLUS
52641: ARRAY
52642: ST_TO_ADDR
52643: GO 53128
52645: LD_INT 16
52647: DOUBLE
52648: EQUAL
52649: IFTRUE 52707
52651: LD_INT 17
52653: DOUBLE
52654: EQUAL
52655: IFTRUE 52707
52657: LD_INT 18
52659: DOUBLE
52660: EQUAL
52661: IFTRUE 52707
52663: LD_INT 19
52665: DOUBLE
52666: EQUAL
52667: IFTRUE 52707
52669: LD_INT 22
52671: DOUBLE
52672: EQUAL
52673: IFTRUE 52707
52675: LD_INT 20
52677: DOUBLE
52678: EQUAL
52679: IFTRUE 52707
52681: LD_INT 21
52683: DOUBLE
52684: EQUAL
52685: IFTRUE 52707
52687: LD_INT 23
52689: DOUBLE
52690: EQUAL
52691: IFTRUE 52707
52693: LD_INT 24
52695: DOUBLE
52696: EQUAL
52697: IFTRUE 52707
52699: LD_INT 25
52701: DOUBLE
52702: EQUAL
52703: IFTRUE 52707
52705: GO 52763
52707: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
52708: LD_ADDR_VAR 0 9
52712: PUSH
52713: LD_VAR 0 35
52717: PUSH
52718: LD_VAR 0 36
52722: PUSH
52723: LD_VAR 0 37
52727: PUSH
52728: LD_VAR 0 38
52732: PUSH
52733: LD_VAR 0 39
52737: PUSH
52738: LD_VAR 0 40
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: LIST
52747: LIST
52748: LIST
52749: LIST
52750: PUSH
52751: LD_VAR 0 4
52755: PUSH
52756: LD_INT 1
52758: PLUS
52759: ARRAY
52760: ST_TO_ADDR
52761: GO 53128
52763: LD_INT 6
52765: DOUBLE
52766: EQUAL
52767: IFTRUE 52819
52769: LD_INT 7
52771: DOUBLE
52772: EQUAL
52773: IFTRUE 52819
52775: LD_INT 8
52777: DOUBLE
52778: EQUAL
52779: IFTRUE 52819
52781: LD_INT 13
52783: DOUBLE
52784: EQUAL
52785: IFTRUE 52819
52787: LD_INT 12
52789: DOUBLE
52790: EQUAL
52791: IFTRUE 52819
52793: LD_INT 15
52795: DOUBLE
52796: EQUAL
52797: IFTRUE 52819
52799: LD_INT 11
52801: DOUBLE
52802: EQUAL
52803: IFTRUE 52819
52805: LD_INT 14
52807: DOUBLE
52808: EQUAL
52809: IFTRUE 52819
52811: LD_INT 10
52813: DOUBLE
52814: EQUAL
52815: IFTRUE 52819
52817: GO 52875
52819: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
52820: LD_ADDR_VAR 0 9
52824: PUSH
52825: LD_VAR 0 41
52829: PUSH
52830: LD_VAR 0 42
52834: PUSH
52835: LD_VAR 0 43
52839: PUSH
52840: LD_VAR 0 44
52844: PUSH
52845: LD_VAR 0 45
52849: PUSH
52850: LD_VAR 0 46
52854: PUSH
52855: EMPTY
52856: LIST
52857: LIST
52858: LIST
52859: LIST
52860: LIST
52861: LIST
52862: PUSH
52863: LD_VAR 0 4
52867: PUSH
52868: LD_INT 1
52870: PLUS
52871: ARRAY
52872: ST_TO_ADDR
52873: GO 53128
52875: LD_INT 36
52877: DOUBLE
52878: EQUAL
52879: IFTRUE 52883
52881: GO 52939
52883: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
52884: LD_ADDR_VAR 0 9
52888: PUSH
52889: LD_VAR 0 47
52893: PUSH
52894: LD_VAR 0 48
52898: PUSH
52899: LD_VAR 0 49
52903: PUSH
52904: LD_VAR 0 50
52908: PUSH
52909: LD_VAR 0 51
52913: PUSH
52914: LD_VAR 0 52
52918: PUSH
52919: EMPTY
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: PUSH
52927: LD_VAR 0 4
52931: PUSH
52932: LD_INT 1
52934: PLUS
52935: ARRAY
52936: ST_TO_ADDR
52937: GO 53128
52939: LD_INT 4
52941: DOUBLE
52942: EQUAL
52943: IFTRUE 52965
52945: LD_INT 5
52947: DOUBLE
52948: EQUAL
52949: IFTRUE 52965
52951: LD_INT 34
52953: DOUBLE
52954: EQUAL
52955: IFTRUE 52965
52957: LD_INT 37
52959: DOUBLE
52960: EQUAL
52961: IFTRUE 52965
52963: GO 53021
52965: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
52966: LD_ADDR_VAR 0 9
52970: PUSH
52971: LD_VAR 0 53
52975: PUSH
52976: LD_VAR 0 54
52980: PUSH
52981: LD_VAR 0 55
52985: PUSH
52986: LD_VAR 0 56
52990: PUSH
52991: LD_VAR 0 57
52995: PUSH
52996: LD_VAR 0 58
53000: PUSH
53001: EMPTY
53002: LIST
53003: LIST
53004: LIST
53005: LIST
53006: LIST
53007: LIST
53008: PUSH
53009: LD_VAR 0 4
53013: PUSH
53014: LD_INT 1
53016: PLUS
53017: ARRAY
53018: ST_TO_ADDR
53019: GO 53128
53021: LD_INT 31
53023: DOUBLE
53024: EQUAL
53025: IFTRUE 53071
53027: LD_INT 32
53029: DOUBLE
53030: EQUAL
53031: IFTRUE 53071
53033: LD_INT 33
53035: DOUBLE
53036: EQUAL
53037: IFTRUE 53071
53039: LD_INT 27
53041: DOUBLE
53042: EQUAL
53043: IFTRUE 53071
53045: LD_INT 26
53047: DOUBLE
53048: EQUAL
53049: IFTRUE 53071
53051: LD_INT 28
53053: DOUBLE
53054: EQUAL
53055: IFTRUE 53071
53057: LD_INT 29
53059: DOUBLE
53060: EQUAL
53061: IFTRUE 53071
53063: LD_INT 30
53065: DOUBLE
53066: EQUAL
53067: IFTRUE 53071
53069: GO 53127
53071: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
53072: LD_ADDR_VAR 0 9
53076: PUSH
53077: LD_VAR 0 59
53081: PUSH
53082: LD_VAR 0 60
53086: PUSH
53087: LD_VAR 0 61
53091: PUSH
53092: LD_VAR 0 62
53096: PUSH
53097: LD_VAR 0 63
53101: PUSH
53102: LD_VAR 0 64
53106: PUSH
53107: EMPTY
53108: LIST
53109: LIST
53110: LIST
53111: LIST
53112: LIST
53113: LIST
53114: PUSH
53115: LD_VAR 0 4
53119: PUSH
53120: LD_INT 1
53122: PLUS
53123: ARRAY
53124: ST_TO_ADDR
53125: GO 53128
53127: POP
// temp_list2 = [ ] ;
53128: LD_ADDR_VAR 0 10
53132: PUSH
53133: EMPTY
53134: ST_TO_ADDR
// for i in temp_list do
53135: LD_ADDR_VAR 0 8
53139: PUSH
53140: LD_VAR 0 9
53144: PUSH
53145: FOR_IN
53146: IFFALSE 53198
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
53148: LD_ADDR_VAR 0 10
53152: PUSH
53153: LD_VAR 0 10
53157: PUSH
53158: LD_VAR 0 8
53162: PUSH
53163: LD_INT 1
53165: ARRAY
53166: PUSH
53167: LD_VAR 0 2
53171: PLUS
53172: PUSH
53173: LD_VAR 0 8
53177: PUSH
53178: LD_INT 2
53180: ARRAY
53181: PUSH
53182: LD_VAR 0 3
53186: PLUS
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: EMPTY
53193: LIST
53194: ADD
53195: ST_TO_ADDR
53196: GO 53145
53198: POP
53199: POP
// result = temp_list2 ;
53200: LD_ADDR_VAR 0 7
53204: PUSH
53205: LD_VAR 0 10
53209: ST_TO_ADDR
// end ;
53210: LD_VAR 0 7
53214: RET
// export function EnemyInRange ( unit , dist ) ; begin
53215: LD_INT 0
53217: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
53218: LD_ADDR_VAR 0 3
53222: PUSH
53223: LD_VAR 0 1
53227: PPUSH
53228: CALL_OW 255
53232: PPUSH
53233: LD_VAR 0 1
53237: PPUSH
53238: CALL_OW 250
53242: PPUSH
53243: LD_VAR 0 1
53247: PPUSH
53248: CALL_OW 251
53252: PPUSH
53253: LD_VAR 0 2
53257: PPUSH
53258: CALL 26611 0 4
53262: PUSH
53263: LD_INT 4
53265: ARRAY
53266: ST_TO_ADDR
// end ;
53267: LD_VAR 0 3
53271: RET
// export function PlayerSeeMe ( unit ) ; begin
53272: LD_INT 0
53274: PPUSH
// result := See ( your_side , unit ) ;
53275: LD_ADDR_VAR 0 2
53279: PUSH
53280: LD_OWVAR 2
53284: PPUSH
53285: LD_VAR 0 1
53289: PPUSH
53290: CALL_OW 292
53294: ST_TO_ADDR
// end ;
53295: LD_VAR 0 2
53299: RET
// export function ReverseDir ( unit ) ; begin
53300: LD_INT 0
53302: PPUSH
// if not unit then
53303: LD_VAR 0 1
53307: NOT
53308: IFFALSE 53312
// exit ;
53310: GO 53335
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
53312: LD_ADDR_VAR 0 2
53316: PUSH
53317: LD_VAR 0 1
53321: PPUSH
53322: CALL_OW 254
53326: PUSH
53327: LD_INT 3
53329: PLUS
53330: PUSH
53331: LD_INT 6
53333: MOD
53334: ST_TO_ADDR
// end ;
53335: LD_VAR 0 2
53339: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
53340: LD_INT 0
53342: PPUSH
53343: PPUSH
53344: PPUSH
53345: PPUSH
53346: PPUSH
// if not hexes then
53347: LD_VAR 0 2
53351: NOT
53352: IFFALSE 53356
// exit ;
53354: GO 53504
// dist := 9999 ;
53356: LD_ADDR_VAR 0 5
53360: PUSH
53361: LD_INT 9999
53363: ST_TO_ADDR
// for i = 1 to hexes do
53364: LD_ADDR_VAR 0 4
53368: PUSH
53369: DOUBLE
53370: LD_INT 1
53372: DEC
53373: ST_TO_ADDR
53374: LD_VAR 0 2
53378: PUSH
53379: FOR_TO
53380: IFFALSE 53492
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
53382: LD_VAR 0 1
53386: PPUSH
53387: LD_VAR 0 2
53391: PUSH
53392: LD_VAR 0 4
53396: ARRAY
53397: PUSH
53398: LD_INT 1
53400: ARRAY
53401: PPUSH
53402: LD_VAR 0 2
53406: PUSH
53407: LD_VAR 0 4
53411: ARRAY
53412: PUSH
53413: LD_INT 2
53415: ARRAY
53416: PPUSH
53417: CALL_OW 297
53421: PUSH
53422: LD_VAR 0 5
53426: LESS
53427: IFFALSE 53490
// begin hex := hexes [ i ] ;
53429: LD_ADDR_VAR 0 7
53433: PUSH
53434: LD_VAR 0 2
53438: PUSH
53439: LD_VAR 0 4
53443: ARRAY
53444: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53445: LD_ADDR_VAR 0 5
53449: PUSH
53450: LD_VAR 0 1
53454: PPUSH
53455: LD_VAR 0 2
53459: PUSH
53460: LD_VAR 0 4
53464: ARRAY
53465: PUSH
53466: LD_INT 1
53468: ARRAY
53469: PPUSH
53470: LD_VAR 0 2
53474: PUSH
53475: LD_VAR 0 4
53479: ARRAY
53480: PUSH
53481: LD_INT 2
53483: ARRAY
53484: PPUSH
53485: CALL_OW 297
53489: ST_TO_ADDR
// end ; end ;
53490: GO 53379
53492: POP
53493: POP
// result := hex ;
53494: LD_ADDR_VAR 0 3
53498: PUSH
53499: LD_VAR 0 7
53503: ST_TO_ADDR
// end ;
53504: LD_VAR 0 3
53508: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53509: LD_INT 0
53511: PPUSH
53512: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53513: LD_VAR 0 1
53517: NOT
53518: PUSH
53519: LD_VAR 0 1
53523: PUSH
53524: LD_INT 21
53526: PUSH
53527: LD_INT 2
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 23
53536: PUSH
53537: LD_INT 2
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: EMPTY
53545: LIST
53546: LIST
53547: PPUSH
53548: CALL_OW 69
53552: IN
53553: NOT
53554: OR
53555: IFFALSE 53559
// exit ;
53557: GO 53606
// for i = 1 to 3 do
53559: LD_ADDR_VAR 0 3
53563: PUSH
53564: DOUBLE
53565: LD_INT 1
53567: DEC
53568: ST_TO_ADDR
53569: LD_INT 3
53571: PUSH
53572: FOR_TO
53573: IFFALSE 53604
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
53575: LD_VAR 0 1
53579: PPUSH
53580: CALL_OW 250
53584: PPUSH
53585: LD_VAR 0 1
53589: PPUSH
53590: CALL_OW 251
53594: PPUSH
53595: LD_INT 1
53597: PPUSH
53598: CALL_OW 453
53602: GO 53572
53604: POP
53605: POP
// end ;
53606: LD_VAR 0 2
53610: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53611: LD_INT 0
53613: PPUSH
53614: PPUSH
53615: PPUSH
53616: PPUSH
53617: PPUSH
53618: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
53619: LD_VAR 0 1
53623: NOT
53624: PUSH
53625: LD_VAR 0 2
53629: NOT
53630: OR
53631: PUSH
53632: LD_VAR 0 1
53636: PPUSH
53637: CALL_OW 314
53641: OR
53642: IFFALSE 53646
// exit ;
53644: GO 54087
// x := GetX ( enemy_unit ) ;
53646: LD_ADDR_VAR 0 7
53650: PUSH
53651: LD_VAR 0 2
53655: PPUSH
53656: CALL_OW 250
53660: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
53661: LD_ADDR_VAR 0 8
53665: PUSH
53666: LD_VAR 0 2
53670: PPUSH
53671: CALL_OW 251
53675: ST_TO_ADDR
// if not x or not y then
53676: LD_VAR 0 7
53680: NOT
53681: PUSH
53682: LD_VAR 0 8
53686: NOT
53687: OR
53688: IFFALSE 53692
// exit ;
53690: GO 54087
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
53692: LD_ADDR_VAR 0 6
53696: PUSH
53697: LD_VAR 0 7
53701: PPUSH
53702: LD_INT 0
53704: PPUSH
53705: LD_INT 4
53707: PPUSH
53708: CALL_OW 272
53712: PUSH
53713: LD_VAR 0 8
53717: PPUSH
53718: LD_INT 0
53720: PPUSH
53721: LD_INT 4
53723: PPUSH
53724: CALL_OW 273
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_VAR 0 7
53737: PPUSH
53738: LD_INT 1
53740: PPUSH
53741: LD_INT 4
53743: PPUSH
53744: CALL_OW 272
53748: PUSH
53749: LD_VAR 0 8
53753: PPUSH
53754: LD_INT 1
53756: PPUSH
53757: LD_INT 4
53759: PPUSH
53760: CALL_OW 273
53764: PUSH
53765: EMPTY
53766: LIST
53767: LIST
53768: PUSH
53769: LD_VAR 0 7
53773: PPUSH
53774: LD_INT 2
53776: PPUSH
53777: LD_INT 4
53779: PPUSH
53780: CALL_OW 272
53784: PUSH
53785: LD_VAR 0 8
53789: PPUSH
53790: LD_INT 2
53792: PPUSH
53793: LD_INT 4
53795: PPUSH
53796: CALL_OW 273
53800: PUSH
53801: EMPTY
53802: LIST
53803: LIST
53804: PUSH
53805: LD_VAR 0 7
53809: PPUSH
53810: LD_INT 3
53812: PPUSH
53813: LD_INT 4
53815: PPUSH
53816: CALL_OW 272
53820: PUSH
53821: LD_VAR 0 8
53825: PPUSH
53826: LD_INT 3
53828: PPUSH
53829: LD_INT 4
53831: PPUSH
53832: CALL_OW 273
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: LD_VAR 0 7
53845: PPUSH
53846: LD_INT 4
53848: PPUSH
53849: LD_INT 4
53851: PPUSH
53852: CALL_OW 272
53856: PUSH
53857: LD_VAR 0 8
53861: PPUSH
53862: LD_INT 4
53864: PPUSH
53865: LD_INT 4
53867: PPUSH
53868: CALL_OW 273
53872: PUSH
53873: EMPTY
53874: LIST
53875: LIST
53876: PUSH
53877: LD_VAR 0 7
53881: PPUSH
53882: LD_INT 5
53884: PPUSH
53885: LD_INT 4
53887: PPUSH
53888: CALL_OW 272
53892: PUSH
53893: LD_VAR 0 8
53897: PPUSH
53898: LD_INT 5
53900: PPUSH
53901: LD_INT 4
53903: PPUSH
53904: CALL_OW 273
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: EMPTY
53914: LIST
53915: LIST
53916: LIST
53917: LIST
53918: LIST
53919: LIST
53920: ST_TO_ADDR
// for i = tmp downto 1 do
53921: LD_ADDR_VAR 0 4
53925: PUSH
53926: DOUBLE
53927: LD_VAR 0 6
53931: INC
53932: ST_TO_ADDR
53933: LD_INT 1
53935: PUSH
53936: FOR_DOWNTO
53937: IFFALSE 54038
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
53939: LD_VAR 0 6
53943: PUSH
53944: LD_VAR 0 4
53948: ARRAY
53949: PUSH
53950: LD_INT 1
53952: ARRAY
53953: PPUSH
53954: LD_VAR 0 6
53958: PUSH
53959: LD_VAR 0 4
53963: ARRAY
53964: PUSH
53965: LD_INT 2
53967: ARRAY
53968: PPUSH
53969: CALL_OW 488
53973: NOT
53974: PUSH
53975: LD_VAR 0 6
53979: PUSH
53980: LD_VAR 0 4
53984: ARRAY
53985: PUSH
53986: LD_INT 1
53988: ARRAY
53989: PPUSH
53990: LD_VAR 0 6
53994: PUSH
53995: LD_VAR 0 4
53999: ARRAY
54000: PUSH
54001: LD_INT 2
54003: ARRAY
54004: PPUSH
54005: CALL_OW 428
54009: PUSH
54010: LD_INT 0
54012: NONEQUAL
54013: OR
54014: IFFALSE 54036
// tmp := Delete ( tmp , i ) ;
54016: LD_ADDR_VAR 0 6
54020: PUSH
54021: LD_VAR 0 6
54025: PPUSH
54026: LD_VAR 0 4
54030: PPUSH
54031: CALL_OW 3
54035: ST_TO_ADDR
54036: GO 53936
54038: POP
54039: POP
// j := GetClosestHex ( unit , tmp ) ;
54040: LD_ADDR_VAR 0 5
54044: PUSH
54045: LD_VAR 0 1
54049: PPUSH
54050: LD_VAR 0 6
54054: PPUSH
54055: CALL 53340 0 2
54059: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
54060: LD_VAR 0 1
54064: PPUSH
54065: LD_VAR 0 5
54069: PUSH
54070: LD_INT 1
54072: ARRAY
54073: PPUSH
54074: LD_VAR 0 5
54078: PUSH
54079: LD_INT 2
54081: ARRAY
54082: PPUSH
54083: CALL_OW 111
// end ;
54087: LD_VAR 0 3
54091: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
54092: LD_INT 0
54094: PPUSH
54095: PPUSH
54096: PPUSH
// uc_side = 0 ;
54097: LD_ADDR_OWVAR 20
54101: PUSH
54102: LD_INT 0
54104: ST_TO_ADDR
// uc_nation = 0 ;
54105: LD_ADDR_OWVAR 21
54109: PUSH
54110: LD_INT 0
54112: ST_TO_ADDR
// InitHc_All ( ) ;
54113: CALL_OW 584
// InitVc ;
54117: CALL_OW 20
// if mastodonts then
54121: LD_VAR 0 6
54125: IFFALSE 54192
// for i = 1 to mastodonts do
54127: LD_ADDR_VAR 0 11
54131: PUSH
54132: DOUBLE
54133: LD_INT 1
54135: DEC
54136: ST_TO_ADDR
54137: LD_VAR 0 6
54141: PUSH
54142: FOR_TO
54143: IFFALSE 54190
// begin vc_chassis := 31 ;
54145: LD_ADDR_OWVAR 37
54149: PUSH
54150: LD_INT 31
54152: ST_TO_ADDR
// vc_control := control_rider ;
54153: LD_ADDR_OWVAR 38
54157: PUSH
54158: LD_INT 4
54160: ST_TO_ADDR
// animal := CreateVehicle ;
54161: LD_ADDR_VAR 0 12
54165: PUSH
54166: CALL_OW 45
54170: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54171: LD_VAR 0 12
54175: PPUSH
54176: LD_VAR 0 8
54180: PPUSH
54181: LD_INT 0
54183: PPUSH
54184: CALL 56380 0 3
// end ;
54188: GO 54142
54190: POP
54191: POP
// if horses then
54192: LD_VAR 0 5
54196: IFFALSE 54263
// for i = 1 to horses do
54198: LD_ADDR_VAR 0 11
54202: PUSH
54203: DOUBLE
54204: LD_INT 1
54206: DEC
54207: ST_TO_ADDR
54208: LD_VAR 0 5
54212: PUSH
54213: FOR_TO
54214: IFFALSE 54261
// begin hc_class := 21 ;
54216: LD_ADDR_OWVAR 28
54220: PUSH
54221: LD_INT 21
54223: ST_TO_ADDR
// hc_gallery :=  ;
54224: LD_ADDR_OWVAR 33
54228: PUSH
54229: LD_STRING 
54231: ST_TO_ADDR
// animal := CreateHuman ;
54232: LD_ADDR_VAR 0 12
54236: PUSH
54237: CALL_OW 44
54241: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54242: LD_VAR 0 12
54246: PPUSH
54247: LD_VAR 0 8
54251: PPUSH
54252: LD_INT 0
54254: PPUSH
54255: CALL 56380 0 3
// end ;
54259: GO 54213
54261: POP
54262: POP
// if birds then
54263: LD_VAR 0 1
54267: IFFALSE 54334
// for i = 1 to birds do
54269: LD_ADDR_VAR 0 11
54273: PUSH
54274: DOUBLE
54275: LD_INT 1
54277: DEC
54278: ST_TO_ADDR
54279: LD_VAR 0 1
54283: PUSH
54284: FOR_TO
54285: IFFALSE 54332
// begin hc_class = 18 ;
54287: LD_ADDR_OWVAR 28
54291: PUSH
54292: LD_INT 18
54294: ST_TO_ADDR
// hc_gallery =  ;
54295: LD_ADDR_OWVAR 33
54299: PUSH
54300: LD_STRING 
54302: ST_TO_ADDR
// animal := CreateHuman ;
54303: LD_ADDR_VAR 0 12
54307: PUSH
54308: CALL_OW 44
54312: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54313: LD_VAR 0 12
54317: PPUSH
54318: LD_VAR 0 8
54322: PPUSH
54323: LD_INT 0
54325: PPUSH
54326: CALL 56380 0 3
// end ;
54330: GO 54284
54332: POP
54333: POP
// if tigers then
54334: LD_VAR 0 2
54338: IFFALSE 54422
// for i = 1 to tigers do
54340: LD_ADDR_VAR 0 11
54344: PUSH
54345: DOUBLE
54346: LD_INT 1
54348: DEC
54349: ST_TO_ADDR
54350: LD_VAR 0 2
54354: PUSH
54355: FOR_TO
54356: IFFALSE 54420
// begin hc_class = class_tiger ;
54358: LD_ADDR_OWVAR 28
54362: PUSH
54363: LD_INT 14
54365: ST_TO_ADDR
// hc_gallery =  ;
54366: LD_ADDR_OWVAR 33
54370: PUSH
54371: LD_STRING 
54373: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
54374: LD_ADDR_OWVAR 35
54378: PUSH
54379: LD_INT 7
54381: NEG
54382: PPUSH
54383: LD_INT 7
54385: PPUSH
54386: CALL_OW 12
54390: ST_TO_ADDR
// animal := CreateHuman ;
54391: LD_ADDR_VAR 0 12
54395: PUSH
54396: CALL_OW 44
54400: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54401: LD_VAR 0 12
54405: PPUSH
54406: LD_VAR 0 8
54410: PPUSH
54411: LD_INT 0
54413: PPUSH
54414: CALL 56380 0 3
// end ;
54418: GO 54355
54420: POP
54421: POP
// if apemans then
54422: LD_VAR 0 3
54426: IFFALSE 54549
// for i = 1 to apemans do
54428: LD_ADDR_VAR 0 11
54432: PUSH
54433: DOUBLE
54434: LD_INT 1
54436: DEC
54437: ST_TO_ADDR
54438: LD_VAR 0 3
54442: PUSH
54443: FOR_TO
54444: IFFALSE 54547
// begin hc_class = class_apeman ;
54446: LD_ADDR_OWVAR 28
54450: PUSH
54451: LD_INT 12
54453: ST_TO_ADDR
// hc_gallery =  ;
54454: LD_ADDR_OWVAR 33
54458: PUSH
54459: LD_STRING 
54461: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
54462: LD_ADDR_OWVAR 35
54466: PUSH
54467: LD_INT 2
54469: NEG
54470: PPUSH
54471: LD_INT 2
54473: PPUSH
54474: CALL_OW 12
54478: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
54479: LD_ADDR_OWVAR 31
54483: PUSH
54484: LD_INT 1
54486: PPUSH
54487: LD_INT 3
54489: PPUSH
54490: CALL_OW 12
54494: PUSH
54495: LD_INT 1
54497: PPUSH
54498: LD_INT 3
54500: PPUSH
54501: CALL_OW 12
54505: PUSH
54506: LD_INT 0
54508: PUSH
54509: LD_INT 0
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: ST_TO_ADDR
// animal := CreateHuman ;
54518: LD_ADDR_VAR 0 12
54522: PUSH
54523: CALL_OW 44
54527: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54528: LD_VAR 0 12
54532: PPUSH
54533: LD_VAR 0 8
54537: PPUSH
54538: LD_INT 0
54540: PPUSH
54541: CALL 56380 0 3
// end ;
54545: GO 54443
54547: POP
54548: POP
// if enchidnas then
54549: LD_VAR 0 4
54553: IFFALSE 54620
// for i = 1 to enchidnas do
54555: LD_ADDR_VAR 0 11
54559: PUSH
54560: DOUBLE
54561: LD_INT 1
54563: DEC
54564: ST_TO_ADDR
54565: LD_VAR 0 4
54569: PUSH
54570: FOR_TO
54571: IFFALSE 54618
// begin hc_class = 13 ;
54573: LD_ADDR_OWVAR 28
54577: PUSH
54578: LD_INT 13
54580: ST_TO_ADDR
// hc_gallery =  ;
54581: LD_ADDR_OWVAR 33
54585: PUSH
54586: LD_STRING 
54588: ST_TO_ADDR
// animal := CreateHuman ;
54589: LD_ADDR_VAR 0 12
54593: PUSH
54594: CALL_OW 44
54598: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54599: LD_VAR 0 12
54603: PPUSH
54604: LD_VAR 0 8
54608: PPUSH
54609: LD_INT 0
54611: PPUSH
54612: CALL 56380 0 3
// end ;
54616: GO 54570
54618: POP
54619: POP
// if fishes then
54620: LD_VAR 0 7
54624: IFFALSE 54691
// for i = 1 to fishes do
54626: LD_ADDR_VAR 0 11
54630: PUSH
54631: DOUBLE
54632: LD_INT 1
54634: DEC
54635: ST_TO_ADDR
54636: LD_VAR 0 7
54640: PUSH
54641: FOR_TO
54642: IFFALSE 54689
// begin hc_class = 20 ;
54644: LD_ADDR_OWVAR 28
54648: PUSH
54649: LD_INT 20
54651: ST_TO_ADDR
// hc_gallery =  ;
54652: LD_ADDR_OWVAR 33
54656: PUSH
54657: LD_STRING 
54659: ST_TO_ADDR
// animal := CreateHuman ;
54660: LD_ADDR_VAR 0 12
54664: PUSH
54665: CALL_OW 44
54669: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
54670: LD_VAR 0 12
54674: PPUSH
54675: LD_VAR 0 9
54679: PPUSH
54680: LD_INT 0
54682: PPUSH
54683: CALL 56380 0 3
// end ;
54687: GO 54641
54689: POP
54690: POP
// end ;
54691: LD_VAR 0 10
54695: RET
// export function WantHeal ( sci , unit ) ; begin
54696: LD_INT 0
54698: PPUSH
// if GetTaskList ( sci ) > 0 then
54699: LD_VAR 0 1
54703: PPUSH
54704: CALL_OW 437
54708: PUSH
54709: LD_INT 0
54711: GREATER
54712: IFFALSE 54782
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
54714: LD_VAR 0 1
54718: PPUSH
54719: CALL_OW 437
54723: PUSH
54724: LD_INT 1
54726: ARRAY
54727: PUSH
54728: LD_INT 1
54730: ARRAY
54731: PUSH
54732: LD_STRING l
54734: EQUAL
54735: PUSH
54736: LD_VAR 0 1
54740: PPUSH
54741: CALL_OW 437
54745: PUSH
54746: LD_INT 1
54748: ARRAY
54749: PUSH
54750: LD_INT 4
54752: ARRAY
54753: PUSH
54754: LD_VAR 0 2
54758: EQUAL
54759: AND
54760: IFFALSE 54772
// result := true else
54762: LD_ADDR_VAR 0 3
54766: PUSH
54767: LD_INT 1
54769: ST_TO_ADDR
54770: GO 54780
// result := false ;
54772: LD_ADDR_VAR 0 3
54776: PUSH
54777: LD_INT 0
54779: ST_TO_ADDR
// end else
54780: GO 54790
// result := false ;
54782: LD_ADDR_VAR 0 3
54786: PUSH
54787: LD_INT 0
54789: ST_TO_ADDR
// end ;
54790: LD_VAR 0 3
54794: RET
// export function HealTarget ( sci ) ; begin
54795: LD_INT 0
54797: PPUSH
// if not sci then
54798: LD_VAR 0 1
54802: NOT
54803: IFFALSE 54807
// exit ;
54805: GO 54872
// result := 0 ;
54807: LD_ADDR_VAR 0 2
54811: PUSH
54812: LD_INT 0
54814: ST_TO_ADDR
// if GetTaskList ( sci ) then
54815: LD_VAR 0 1
54819: PPUSH
54820: CALL_OW 437
54824: IFFALSE 54872
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
54826: LD_VAR 0 1
54830: PPUSH
54831: CALL_OW 437
54835: PUSH
54836: LD_INT 1
54838: ARRAY
54839: PUSH
54840: LD_INT 1
54842: ARRAY
54843: PUSH
54844: LD_STRING l
54846: EQUAL
54847: IFFALSE 54872
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
54849: LD_ADDR_VAR 0 2
54853: PUSH
54854: LD_VAR 0 1
54858: PPUSH
54859: CALL_OW 437
54863: PUSH
54864: LD_INT 1
54866: ARRAY
54867: PUSH
54868: LD_INT 4
54870: ARRAY
54871: ST_TO_ADDR
// end ;
54872: LD_VAR 0 2
54876: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
54877: LD_INT 0
54879: PPUSH
54880: PPUSH
54881: PPUSH
54882: PPUSH
// if not base_units then
54883: LD_VAR 0 1
54887: NOT
54888: IFFALSE 54892
// exit ;
54890: GO 54979
// result := false ;
54892: LD_ADDR_VAR 0 2
54896: PUSH
54897: LD_INT 0
54899: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
54900: LD_ADDR_VAR 0 5
54904: PUSH
54905: LD_VAR 0 1
54909: PPUSH
54910: LD_INT 21
54912: PUSH
54913: LD_INT 3
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PPUSH
54920: CALL_OW 72
54924: ST_TO_ADDR
// if not tmp then
54925: LD_VAR 0 5
54929: NOT
54930: IFFALSE 54934
// exit ;
54932: GO 54979
// for i in tmp do
54934: LD_ADDR_VAR 0 3
54938: PUSH
54939: LD_VAR 0 5
54943: PUSH
54944: FOR_IN
54945: IFFALSE 54977
// begin result := EnemyInRange ( i , 22 ) ;
54947: LD_ADDR_VAR 0 2
54951: PUSH
54952: LD_VAR 0 3
54956: PPUSH
54957: LD_INT 22
54959: PPUSH
54960: CALL 53215 0 2
54964: ST_TO_ADDR
// if result then
54965: LD_VAR 0 2
54969: IFFALSE 54975
// exit ;
54971: POP
54972: POP
54973: GO 54979
// end ;
54975: GO 54944
54977: POP
54978: POP
// end ;
54979: LD_VAR 0 2
54983: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
54984: LD_INT 0
54986: PPUSH
54987: PPUSH
// if not units then
54988: LD_VAR 0 1
54992: NOT
54993: IFFALSE 54997
// exit ;
54995: GO 55067
// result := [ ] ;
54997: LD_ADDR_VAR 0 3
55001: PUSH
55002: EMPTY
55003: ST_TO_ADDR
// for i in units do
55004: LD_ADDR_VAR 0 4
55008: PUSH
55009: LD_VAR 0 1
55013: PUSH
55014: FOR_IN
55015: IFFALSE 55065
// if GetTag ( i ) = tag then
55017: LD_VAR 0 4
55021: PPUSH
55022: CALL_OW 110
55026: PUSH
55027: LD_VAR 0 2
55031: EQUAL
55032: IFFALSE 55063
// result := Replace ( result , result + 1 , i ) ;
55034: LD_ADDR_VAR 0 3
55038: PUSH
55039: LD_VAR 0 3
55043: PPUSH
55044: LD_VAR 0 3
55048: PUSH
55049: LD_INT 1
55051: PLUS
55052: PPUSH
55053: LD_VAR 0 4
55057: PPUSH
55058: CALL_OW 1
55062: ST_TO_ADDR
55063: GO 55014
55065: POP
55066: POP
// end ;
55067: LD_VAR 0 3
55071: RET
// export function IsDriver ( un ) ; begin
55072: LD_INT 0
55074: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
55075: LD_ADDR_VAR 0 2
55079: PUSH
55080: LD_VAR 0 1
55084: PUSH
55085: LD_INT 55
55087: PUSH
55088: EMPTY
55089: LIST
55090: PPUSH
55091: CALL_OW 69
55095: IN
55096: ST_TO_ADDR
// end ;
55097: LD_VAR 0 2
55101: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
55102: LD_INT 0
55104: PPUSH
55105: PPUSH
// list := [ ] ;
55106: LD_ADDR_VAR 0 5
55110: PUSH
55111: EMPTY
55112: ST_TO_ADDR
// case d of 0 :
55113: LD_VAR 0 3
55117: PUSH
55118: LD_INT 0
55120: DOUBLE
55121: EQUAL
55122: IFTRUE 55126
55124: GO 55259
55126: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
55127: LD_ADDR_VAR 0 5
55131: PUSH
55132: LD_VAR 0 1
55136: PUSH
55137: LD_INT 4
55139: MINUS
55140: PUSH
55141: LD_VAR 0 2
55145: PUSH
55146: LD_INT 4
55148: MINUS
55149: PUSH
55150: LD_INT 2
55152: PUSH
55153: EMPTY
55154: LIST
55155: LIST
55156: LIST
55157: PUSH
55158: LD_VAR 0 1
55162: PUSH
55163: LD_INT 3
55165: MINUS
55166: PUSH
55167: LD_VAR 0 2
55171: PUSH
55172: LD_INT 1
55174: PUSH
55175: EMPTY
55176: LIST
55177: LIST
55178: LIST
55179: PUSH
55180: LD_VAR 0 1
55184: PUSH
55185: LD_INT 4
55187: PLUS
55188: PUSH
55189: LD_VAR 0 2
55193: PUSH
55194: LD_INT 4
55196: PUSH
55197: EMPTY
55198: LIST
55199: LIST
55200: LIST
55201: PUSH
55202: LD_VAR 0 1
55206: PUSH
55207: LD_INT 3
55209: PLUS
55210: PUSH
55211: LD_VAR 0 2
55215: PUSH
55216: LD_INT 3
55218: PLUS
55219: PUSH
55220: LD_INT 5
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: LIST
55227: PUSH
55228: LD_VAR 0 1
55232: PUSH
55233: LD_VAR 0 2
55237: PUSH
55238: LD_INT 4
55240: PLUS
55241: PUSH
55242: LD_INT 0
55244: PUSH
55245: EMPTY
55246: LIST
55247: LIST
55248: LIST
55249: PUSH
55250: EMPTY
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: ST_TO_ADDR
// end ; 1 :
55257: GO 55957
55259: LD_INT 1
55261: DOUBLE
55262: EQUAL
55263: IFTRUE 55267
55265: GO 55400
55267: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
55268: LD_ADDR_VAR 0 5
55272: PUSH
55273: LD_VAR 0 1
55277: PUSH
55278: LD_VAR 0 2
55282: PUSH
55283: LD_INT 4
55285: MINUS
55286: PUSH
55287: LD_INT 3
55289: PUSH
55290: EMPTY
55291: LIST
55292: LIST
55293: LIST
55294: PUSH
55295: LD_VAR 0 1
55299: PUSH
55300: LD_INT 3
55302: MINUS
55303: PUSH
55304: LD_VAR 0 2
55308: PUSH
55309: LD_INT 3
55311: MINUS
55312: PUSH
55313: LD_INT 2
55315: PUSH
55316: EMPTY
55317: LIST
55318: LIST
55319: LIST
55320: PUSH
55321: LD_VAR 0 1
55325: PUSH
55326: LD_INT 4
55328: MINUS
55329: PUSH
55330: LD_VAR 0 2
55334: PUSH
55335: LD_INT 1
55337: PUSH
55338: EMPTY
55339: LIST
55340: LIST
55341: LIST
55342: PUSH
55343: LD_VAR 0 1
55347: PUSH
55348: LD_VAR 0 2
55352: PUSH
55353: LD_INT 3
55355: PLUS
55356: PUSH
55357: LD_INT 0
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: LIST
55364: PUSH
55365: LD_VAR 0 1
55369: PUSH
55370: LD_INT 4
55372: PLUS
55373: PUSH
55374: LD_VAR 0 2
55378: PUSH
55379: LD_INT 4
55381: PLUS
55382: PUSH
55383: LD_INT 5
55385: PUSH
55386: EMPTY
55387: LIST
55388: LIST
55389: LIST
55390: PUSH
55391: EMPTY
55392: LIST
55393: LIST
55394: LIST
55395: LIST
55396: LIST
55397: ST_TO_ADDR
// end ; 2 :
55398: GO 55957
55400: LD_INT 2
55402: DOUBLE
55403: EQUAL
55404: IFTRUE 55408
55406: GO 55537
55408: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
55409: LD_ADDR_VAR 0 5
55413: PUSH
55414: LD_VAR 0 1
55418: PUSH
55419: LD_VAR 0 2
55423: PUSH
55424: LD_INT 3
55426: MINUS
55427: PUSH
55428: LD_INT 3
55430: PUSH
55431: EMPTY
55432: LIST
55433: LIST
55434: LIST
55435: PUSH
55436: LD_VAR 0 1
55440: PUSH
55441: LD_INT 4
55443: PLUS
55444: PUSH
55445: LD_VAR 0 2
55449: PUSH
55450: LD_INT 4
55452: PUSH
55453: EMPTY
55454: LIST
55455: LIST
55456: LIST
55457: PUSH
55458: LD_VAR 0 1
55462: PUSH
55463: LD_VAR 0 2
55467: PUSH
55468: LD_INT 4
55470: PLUS
55471: PUSH
55472: LD_INT 0
55474: PUSH
55475: EMPTY
55476: LIST
55477: LIST
55478: LIST
55479: PUSH
55480: LD_VAR 0 1
55484: PUSH
55485: LD_INT 3
55487: MINUS
55488: PUSH
55489: LD_VAR 0 2
55493: PUSH
55494: LD_INT 1
55496: PUSH
55497: EMPTY
55498: LIST
55499: LIST
55500: LIST
55501: PUSH
55502: LD_VAR 0 1
55506: PUSH
55507: LD_INT 4
55509: MINUS
55510: PUSH
55511: LD_VAR 0 2
55515: PUSH
55516: LD_INT 4
55518: MINUS
55519: PUSH
55520: LD_INT 2
55522: PUSH
55523: EMPTY
55524: LIST
55525: LIST
55526: LIST
55527: PUSH
55528: EMPTY
55529: LIST
55530: LIST
55531: LIST
55532: LIST
55533: LIST
55534: ST_TO_ADDR
// end ; 3 :
55535: GO 55957
55537: LD_INT 3
55539: DOUBLE
55540: EQUAL
55541: IFTRUE 55545
55543: GO 55678
55545: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
55546: LD_ADDR_VAR 0 5
55550: PUSH
55551: LD_VAR 0 1
55555: PUSH
55556: LD_INT 3
55558: PLUS
55559: PUSH
55560: LD_VAR 0 2
55564: PUSH
55565: LD_INT 4
55567: PUSH
55568: EMPTY
55569: LIST
55570: LIST
55571: LIST
55572: PUSH
55573: LD_VAR 0 1
55577: PUSH
55578: LD_INT 4
55580: PLUS
55581: PUSH
55582: LD_VAR 0 2
55586: PUSH
55587: LD_INT 4
55589: PLUS
55590: PUSH
55591: LD_INT 5
55593: PUSH
55594: EMPTY
55595: LIST
55596: LIST
55597: LIST
55598: PUSH
55599: LD_VAR 0 1
55603: PUSH
55604: LD_INT 4
55606: MINUS
55607: PUSH
55608: LD_VAR 0 2
55612: PUSH
55613: LD_INT 1
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: LIST
55620: PUSH
55621: LD_VAR 0 1
55625: PUSH
55626: LD_VAR 0 2
55630: PUSH
55631: LD_INT 4
55633: MINUS
55634: PUSH
55635: LD_INT 3
55637: PUSH
55638: EMPTY
55639: LIST
55640: LIST
55641: LIST
55642: PUSH
55643: LD_VAR 0 1
55647: PUSH
55648: LD_INT 3
55650: MINUS
55651: PUSH
55652: LD_VAR 0 2
55656: PUSH
55657: LD_INT 3
55659: MINUS
55660: PUSH
55661: LD_INT 2
55663: PUSH
55664: EMPTY
55665: LIST
55666: LIST
55667: LIST
55668: PUSH
55669: EMPTY
55670: LIST
55671: LIST
55672: LIST
55673: LIST
55674: LIST
55675: ST_TO_ADDR
// end ; 4 :
55676: GO 55957
55678: LD_INT 4
55680: DOUBLE
55681: EQUAL
55682: IFTRUE 55686
55684: GO 55819
55686: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
55687: LD_ADDR_VAR 0 5
55691: PUSH
55692: LD_VAR 0 1
55696: PUSH
55697: LD_VAR 0 2
55701: PUSH
55702: LD_INT 4
55704: PLUS
55705: PUSH
55706: LD_INT 0
55708: PUSH
55709: EMPTY
55710: LIST
55711: LIST
55712: LIST
55713: PUSH
55714: LD_VAR 0 1
55718: PUSH
55719: LD_INT 3
55721: PLUS
55722: PUSH
55723: LD_VAR 0 2
55727: PUSH
55728: LD_INT 3
55730: PLUS
55731: PUSH
55732: LD_INT 5
55734: PUSH
55735: EMPTY
55736: LIST
55737: LIST
55738: LIST
55739: PUSH
55740: LD_VAR 0 1
55744: PUSH
55745: LD_INT 4
55747: PLUS
55748: PUSH
55749: LD_VAR 0 2
55753: PUSH
55754: LD_INT 4
55756: PUSH
55757: EMPTY
55758: LIST
55759: LIST
55760: LIST
55761: PUSH
55762: LD_VAR 0 1
55766: PUSH
55767: LD_VAR 0 2
55771: PUSH
55772: LD_INT 3
55774: MINUS
55775: PUSH
55776: LD_INT 3
55778: PUSH
55779: EMPTY
55780: LIST
55781: LIST
55782: LIST
55783: PUSH
55784: LD_VAR 0 1
55788: PUSH
55789: LD_INT 4
55791: MINUS
55792: PUSH
55793: LD_VAR 0 2
55797: PUSH
55798: LD_INT 4
55800: MINUS
55801: PUSH
55802: LD_INT 2
55804: PUSH
55805: EMPTY
55806: LIST
55807: LIST
55808: LIST
55809: PUSH
55810: EMPTY
55811: LIST
55812: LIST
55813: LIST
55814: LIST
55815: LIST
55816: ST_TO_ADDR
// end ; 5 :
55817: GO 55957
55819: LD_INT 5
55821: DOUBLE
55822: EQUAL
55823: IFTRUE 55827
55825: GO 55956
55827: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
55828: LD_ADDR_VAR 0 5
55832: PUSH
55833: LD_VAR 0 1
55837: PUSH
55838: LD_INT 4
55840: MINUS
55841: PUSH
55842: LD_VAR 0 2
55846: PUSH
55847: LD_INT 1
55849: PUSH
55850: EMPTY
55851: LIST
55852: LIST
55853: LIST
55854: PUSH
55855: LD_VAR 0 1
55859: PUSH
55860: LD_VAR 0 2
55864: PUSH
55865: LD_INT 4
55867: MINUS
55868: PUSH
55869: LD_INT 3
55871: PUSH
55872: EMPTY
55873: LIST
55874: LIST
55875: LIST
55876: PUSH
55877: LD_VAR 0 1
55881: PUSH
55882: LD_INT 4
55884: PLUS
55885: PUSH
55886: LD_VAR 0 2
55890: PUSH
55891: LD_INT 4
55893: PLUS
55894: PUSH
55895: LD_INT 5
55897: PUSH
55898: EMPTY
55899: LIST
55900: LIST
55901: LIST
55902: PUSH
55903: LD_VAR 0 1
55907: PUSH
55908: LD_INT 3
55910: PLUS
55911: PUSH
55912: LD_VAR 0 2
55916: PUSH
55917: LD_INT 4
55919: PUSH
55920: EMPTY
55921: LIST
55922: LIST
55923: LIST
55924: PUSH
55925: LD_VAR 0 1
55929: PUSH
55930: LD_VAR 0 2
55934: PUSH
55935: LD_INT 3
55937: PLUS
55938: PUSH
55939: LD_INT 0
55941: PUSH
55942: EMPTY
55943: LIST
55944: LIST
55945: LIST
55946: PUSH
55947: EMPTY
55948: LIST
55949: LIST
55950: LIST
55951: LIST
55952: LIST
55953: ST_TO_ADDR
// end ; end ;
55954: GO 55957
55956: POP
// result := list ;
55957: LD_ADDR_VAR 0 4
55961: PUSH
55962: LD_VAR 0 5
55966: ST_TO_ADDR
// end ;
55967: LD_VAR 0 4
55971: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
55972: LD_INT 0
55974: PPUSH
55975: PPUSH
55976: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
55977: LD_VAR 0 1
55981: NOT
55982: PUSH
55983: LD_VAR 0 2
55987: PUSH
55988: LD_INT 1
55990: PUSH
55991: LD_INT 2
55993: PUSH
55994: LD_INT 3
55996: PUSH
55997: LD_INT 4
55999: PUSH
56000: EMPTY
56001: LIST
56002: LIST
56003: LIST
56004: LIST
56005: IN
56006: NOT
56007: OR
56008: IFFALSE 56012
// exit ;
56010: GO 56104
// tmp := [ ] ;
56012: LD_ADDR_VAR 0 5
56016: PUSH
56017: EMPTY
56018: ST_TO_ADDR
// for i in units do
56019: LD_ADDR_VAR 0 4
56023: PUSH
56024: LD_VAR 0 1
56028: PUSH
56029: FOR_IN
56030: IFFALSE 56073
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
56032: LD_ADDR_VAR 0 5
56036: PUSH
56037: LD_VAR 0 5
56041: PPUSH
56042: LD_VAR 0 5
56046: PUSH
56047: LD_INT 1
56049: PLUS
56050: PPUSH
56051: LD_VAR 0 4
56055: PPUSH
56056: LD_VAR 0 2
56060: PPUSH
56061: CALL_OW 259
56065: PPUSH
56066: CALL_OW 2
56070: ST_TO_ADDR
56071: GO 56029
56073: POP
56074: POP
// if not tmp then
56075: LD_VAR 0 5
56079: NOT
56080: IFFALSE 56084
// exit ;
56082: GO 56104
// result := SortListByListDesc ( units , tmp ) ;
56084: LD_ADDR_VAR 0 3
56088: PUSH
56089: LD_VAR 0 1
56093: PPUSH
56094: LD_VAR 0 5
56098: PPUSH
56099: CALL_OW 77
56103: ST_TO_ADDR
// end ;
56104: LD_VAR 0 3
56108: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
56109: LD_INT 0
56111: PPUSH
56112: PPUSH
56113: PPUSH
// result := false ;
56114: LD_ADDR_VAR 0 3
56118: PUSH
56119: LD_INT 0
56121: ST_TO_ADDR
// x := GetX ( building ) ;
56122: LD_ADDR_VAR 0 4
56126: PUSH
56127: LD_VAR 0 2
56131: PPUSH
56132: CALL_OW 250
56136: ST_TO_ADDR
// y := GetY ( building ) ;
56137: LD_ADDR_VAR 0 5
56141: PUSH
56142: LD_VAR 0 2
56146: PPUSH
56147: CALL_OW 251
56151: ST_TO_ADDR
// if not building or not x or not y then
56152: LD_VAR 0 2
56156: NOT
56157: PUSH
56158: LD_VAR 0 4
56162: NOT
56163: OR
56164: PUSH
56165: LD_VAR 0 5
56169: NOT
56170: OR
56171: IFFALSE 56175
// exit ;
56173: GO 56267
// if GetTaskList ( unit ) then
56175: LD_VAR 0 1
56179: PPUSH
56180: CALL_OW 437
56184: IFFALSE 56267
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56186: LD_STRING e
56188: PUSH
56189: LD_VAR 0 1
56193: PPUSH
56194: CALL_OW 437
56198: PUSH
56199: LD_INT 1
56201: ARRAY
56202: PUSH
56203: LD_INT 1
56205: ARRAY
56206: EQUAL
56207: PUSH
56208: LD_VAR 0 4
56212: PUSH
56213: LD_VAR 0 1
56217: PPUSH
56218: CALL_OW 437
56222: PUSH
56223: LD_INT 1
56225: ARRAY
56226: PUSH
56227: LD_INT 2
56229: ARRAY
56230: EQUAL
56231: AND
56232: PUSH
56233: LD_VAR 0 5
56237: PUSH
56238: LD_VAR 0 1
56242: PPUSH
56243: CALL_OW 437
56247: PUSH
56248: LD_INT 1
56250: ARRAY
56251: PUSH
56252: LD_INT 3
56254: ARRAY
56255: EQUAL
56256: AND
56257: IFFALSE 56267
// result := true end ;
56259: LD_ADDR_VAR 0 3
56263: PUSH
56264: LD_INT 1
56266: ST_TO_ADDR
// end ;
56267: LD_VAR 0 3
56271: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
56272: LD_INT 0
56274: PPUSH
// result := false ;
56275: LD_ADDR_VAR 0 4
56279: PUSH
56280: LD_INT 0
56282: ST_TO_ADDR
// if GetTaskList ( unit ) then
56283: LD_VAR 0 1
56287: PPUSH
56288: CALL_OW 437
56292: IFFALSE 56375
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56294: LD_STRING M
56296: PUSH
56297: LD_VAR 0 1
56301: PPUSH
56302: CALL_OW 437
56306: PUSH
56307: LD_INT 1
56309: ARRAY
56310: PUSH
56311: LD_INT 1
56313: ARRAY
56314: EQUAL
56315: PUSH
56316: LD_VAR 0 2
56320: PUSH
56321: LD_VAR 0 1
56325: PPUSH
56326: CALL_OW 437
56330: PUSH
56331: LD_INT 1
56333: ARRAY
56334: PUSH
56335: LD_INT 2
56337: ARRAY
56338: EQUAL
56339: AND
56340: PUSH
56341: LD_VAR 0 3
56345: PUSH
56346: LD_VAR 0 1
56350: PPUSH
56351: CALL_OW 437
56355: PUSH
56356: LD_INT 1
56358: ARRAY
56359: PUSH
56360: LD_INT 3
56362: ARRAY
56363: EQUAL
56364: AND
56365: IFFALSE 56375
// result := true ;
56367: LD_ADDR_VAR 0 4
56371: PUSH
56372: LD_INT 1
56374: ST_TO_ADDR
// end ; end ;
56375: LD_VAR 0 4
56379: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
56380: LD_INT 0
56382: PPUSH
56383: PPUSH
56384: PPUSH
56385: PPUSH
// if not unit or not area then
56386: LD_VAR 0 1
56390: NOT
56391: PUSH
56392: LD_VAR 0 2
56396: NOT
56397: OR
56398: IFFALSE 56402
// exit ;
56400: GO 56566
// tmp := AreaToList ( area , i ) ;
56402: LD_ADDR_VAR 0 6
56406: PUSH
56407: LD_VAR 0 2
56411: PPUSH
56412: LD_VAR 0 5
56416: PPUSH
56417: CALL_OW 517
56421: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
56422: LD_ADDR_VAR 0 5
56426: PUSH
56427: DOUBLE
56428: LD_INT 1
56430: DEC
56431: ST_TO_ADDR
56432: LD_VAR 0 6
56436: PUSH
56437: LD_INT 1
56439: ARRAY
56440: PUSH
56441: FOR_TO
56442: IFFALSE 56564
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
56444: LD_ADDR_VAR 0 7
56448: PUSH
56449: LD_VAR 0 6
56453: PUSH
56454: LD_INT 1
56456: ARRAY
56457: PUSH
56458: LD_VAR 0 5
56462: ARRAY
56463: PUSH
56464: LD_VAR 0 6
56468: PUSH
56469: LD_INT 2
56471: ARRAY
56472: PUSH
56473: LD_VAR 0 5
56477: ARRAY
56478: PUSH
56479: EMPTY
56480: LIST
56481: LIST
56482: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
56483: LD_VAR 0 7
56487: PUSH
56488: LD_INT 1
56490: ARRAY
56491: PPUSH
56492: LD_VAR 0 7
56496: PUSH
56497: LD_INT 2
56499: ARRAY
56500: PPUSH
56501: CALL_OW 428
56505: PUSH
56506: LD_INT 0
56508: EQUAL
56509: IFFALSE 56562
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
56511: LD_VAR 0 1
56515: PPUSH
56516: LD_VAR 0 7
56520: PUSH
56521: LD_INT 1
56523: ARRAY
56524: PPUSH
56525: LD_VAR 0 7
56529: PUSH
56530: LD_INT 2
56532: ARRAY
56533: PPUSH
56534: LD_VAR 0 3
56538: PPUSH
56539: CALL_OW 48
// result := IsPlaced ( unit ) ;
56543: LD_ADDR_VAR 0 4
56547: PUSH
56548: LD_VAR 0 1
56552: PPUSH
56553: CALL_OW 305
56557: ST_TO_ADDR
// exit ;
56558: POP
56559: POP
56560: GO 56566
// end ; end ;
56562: GO 56441
56564: POP
56565: POP
// end ;
56566: LD_VAR 0 4
56570: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
56571: LD_INT 0
56573: PPUSH
56574: PPUSH
56575: PPUSH
// if not side or side > 8 then
56576: LD_VAR 0 1
56580: NOT
56581: PUSH
56582: LD_VAR 0 1
56586: PUSH
56587: LD_INT 8
56589: GREATER
56590: OR
56591: IFFALSE 56595
// exit ;
56593: GO 56782
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
56595: LD_ADDR_VAR 0 4
56599: PUSH
56600: LD_INT 22
56602: PUSH
56603: LD_VAR 0 1
56607: PUSH
56608: EMPTY
56609: LIST
56610: LIST
56611: PUSH
56612: LD_INT 21
56614: PUSH
56615: LD_INT 3
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: EMPTY
56623: LIST
56624: LIST
56625: PPUSH
56626: CALL_OW 69
56630: ST_TO_ADDR
// if not tmp then
56631: LD_VAR 0 4
56635: NOT
56636: IFFALSE 56640
// exit ;
56638: GO 56782
// enable_addtolog := true ;
56640: LD_ADDR_OWVAR 81
56644: PUSH
56645: LD_INT 1
56647: ST_TO_ADDR
// AddToLog ( [ ) ;
56648: LD_STRING [
56650: PPUSH
56651: CALL_OW 561
// for i in tmp do
56655: LD_ADDR_VAR 0 3
56659: PUSH
56660: LD_VAR 0 4
56664: PUSH
56665: FOR_IN
56666: IFFALSE 56773
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
56668: LD_STRING [
56670: PUSH
56671: LD_VAR 0 3
56675: PPUSH
56676: CALL_OW 266
56680: STR
56681: PUSH
56682: LD_STRING , 
56684: STR
56685: PUSH
56686: LD_VAR 0 3
56690: PPUSH
56691: CALL_OW 250
56695: STR
56696: PUSH
56697: LD_STRING , 
56699: STR
56700: PUSH
56701: LD_VAR 0 3
56705: PPUSH
56706: CALL_OW 251
56710: STR
56711: PUSH
56712: LD_STRING , 
56714: STR
56715: PUSH
56716: LD_VAR 0 3
56720: PPUSH
56721: CALL_OW 254
56725: STR
56726: PUSH
56727: LD_STRING , 
56729: STR
56730: PUSH
56731: LD_VAR 0 3
56735: PPUSH
56736: LD_INT 1
56738: PPUSH
56739: CALL_OW 268
56743: STR
56744: PUSH
56745: LD_STRING , 
56747: STR
56748: PUSH
56749: LD_VAR 0 3
56753: PPUSH
56754: LD_INT 2
56756: PPUSH
56757: CALL_OW 268
56761: STR
56762: PUSH
56763: LD_STRING ],
56765: STR
56766: PPUSH
56767: CALL_OW 561
// end ;
56771: GO 56665
56773: POP
56774: POP
// AddToLog ( ]; ) ;
56775: LD_STRING ];
56777: PPUSH
56778: CALL_OW 561
// end ;
56782: LD_VAR 0 2
56786: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
56787: LD_INT 0
56789: PPUSH
56790: PPUSH
56791: PPUSH
56792: PPUSH
56793: PPUSH
// if not area or not rate or not max then
56794: LD_VAR 0 1
56798: NOT
56799: PUSH
56800: LD_VAR 0 2
56804: NOT
56805: OR
56806: PUSH
56807: LD_VAR 0 4
56811: NOT
56812: OR
56813: IFFALSE 56817
// exit ;
56815: GO 57009
// while 1 do
56817: LD_INT 1
56819: IFFALSE 57009
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
56821: LD_ADDR_VAR 0 9
56825: PUSH
56826: LD_VAR 0 1
56830: PPUSH
56831: LD_INT 1
56833: PPUSH
56834: CALL_OW 287
56838: PUSH
56839: LD_INT 10
56841: MUL
56842: ST_TO_ADDR
// r := rate / 10 ;
56843: LD_ADDR_VAR 0 7
56847: PUSH
56848: LD_VAR 0 2
56852: PUSH
56853: LD_INT 10
56855: DIVREAL
56856: ST_TO_ADDR
// time := 1 1$00 ;
56857: LD_ADDR_VAR 0 8
56861: PUSH
56862: LD_INT 2100
56864: ST_TO_ADDR
// if amount < min then
56865: LD_VAR 0 9
56869: PUSH
56870: LD_VAR 0 3
56874: LESS
56875: IFFALSE 56893
// r := r * 2 else
56877: LD_ADDR_VAR 0 7
56881: PUSH
56882: LD_VAR 0 7
56886: PUSH
56887: LD_INT 2
56889: MUL
56890: ST_TO_ADDR
56891: GO 56919
// if amount > max then
56893: LD_VAR 0 9
56897: PUSH
56898: LD_VAR 0 4
56902: GREATER
56903: IFFALSE 56919
// r := r / 2 ;
56905: LD_ADDR_VAR 0 7
56909: PUSH
56910: LD_VAR 0 7
56914: PUSH
56915: LD_INT 2
56917: DIVREAL
56918: ST_TO_ADDR
// time := time / r ;
56919: LD_ADDR_VAR 0 8
56923: PUSH
56924: LD_VAR 0 8
56928: PUSH
56929: LD_VAR 0 7
56933: DIVREAL
56934: ST_TO_ADDR
// if time < 0 then
56935: LD_VAR 0 8
56939: PUSH
56940: LD_INT 0
56942: LESS
56943: IFFALSE 56960
// time := time * - 1 ;
56945: LD_ADDR_VAR 0 8
56949: PUSH
56950: LD_VAR 0 8
56954: PUSH
56955: LD_INT 1
56957: NEG
56958: MUL
56959: ST_TO_ADDR
// wait ( time ) ;
56960: LD_VAR 0 8
56964: PPUSH
56965: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
56969: LD_INT 35
56971: PPUSH
56972: LD_INT 875
56974: PPUSH
56975: CALL_OW 12
56979: PPUSH
56980: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
56984: LD_INT 1
56986: PPUSH
56987: LD_INT 5
56989: PPUSH
56990: CALL_OW 12
56994: PPUSH
56995: LD_VAR 0 1
56999: PPUSH
57000: LD_INT 1
57002: PPUSH
57003: CALL_OW 55
// end ;
57007: GO 56817
// end ;
57009: LD_VAR 0 5
57013: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
57014: LD_INT 0
57016: PPUSH
57017: PPUSH
57018: PPUSH
57019: PPUSH
57020: PPUSH
57021: PPUSH
57022: PPUSH
57023: PPUSH
// if not turrets or not factories then
57024: LD_VAR 0 1
57028: NOT
57029: PUSH
57030: LD_VAR 0 2
57034: NOT
57035: OR
57036: IFFALSE 57040
// exit ;
57038: GO 57347
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
57040: LD_ADDR_VAR 0 10
57044: PUSH
57045: LD_INT 5
57047: PUSH
57048: LD_INT 6
57050: PUSH
57051: EMPTY
57052: LIST
57053: LIST
57054: PUSH
57055: LD_INT 2
57057: PUSH
57058: LD_INT 4
57060: PUSH
57061: EMPTY
57062: LIST
57063: LIST
57064: PUSH
57065: LD_INT 3
57067: PUSH
57068: LD_INT 5
57070: PUSH
57071: EMPTY
57072: LIST
57073: LIST
57074: PUSH
57075: EMPTY
57076: LIST
57077: LIST
57078: LIST
57079: PUSH
57080: LD_INT 24
57082: PUSH
57083: LD_INT 25
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 23
57092: PUSH
57093: LD_INT 27
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: PUSH
57104: LD_INT 42
57106: PUSH
57107: LD_INT 43
57109: PUSH
57110: EMPTY
57111: LIST
57112: LIST
57113: PUSH
57114: LD_INT 44
57116: PUSH
57117: LD_INT 46
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: PUSH
57124: LD_INT 45
57126: PUSH
57127: LD_INT 47
57129: PUSH
57130: EMPTY
57131: LIST
57132: LIST
57133: PUSH
57134: EMPTY
57135: LIST
57136: LIST
57137: LIST
57138: PUSH
57139: EMPTY
57140: LIST
57141: LIST
57142: LIST
57143: ST_TO_ADDR
// result := [ ] ;
57144: LD_ADDR_VAR 0 3
57148: PUSH
57149: EMPTY
57150: ST_TO_ADDR
// for i in turrets do
57151: LD_ADDR_VAR 0 4
57155: PUSH
57156: LD_VAR 0 1
57160: PUSH
57161: FOR_IN
57162: IFFALSE 57345
// begin nat := GetNation ( i ) ;
57164: LD_ADDR_VAR 0 7
57168: PUSH
57169: LD_VAR 0 4
57173: PPUSH
57174: CALL_OW 248
57178: ST_TO_ADDR
// weapon := 0 ;
57179: LD_ADDR_VAR 0 8
57183: PUSH
57184: LD_INT 0
57186: ST_TO_ADDR
// if not nat then
57187: LD_VAR 0 7
57191: NOT
57192: IFFALSE 57196
// continue ;
57194: GO 57161
// for j in list [ nat ] do
57196: LD_ADDR_VAR 0 5
57200: PUSH
57201: LD_VAR 0 10
57205: PUSH
57206: LD_VAR 0 7
57210: ARRAY
57211: PUSH
57212: FOR_IN
57213: IFFALSE 57254
// if GetBWeapon ( i ) = j [ 1 ] then
57215: LD_VAR 0 4
57219: PPUSH
57220: CALL_OW 269
57224: PUSH
57225: LD_VAR 0 5
57229: PUSH
57230: LD_INT 1
57232: ARRAY
57233: EQUAL
57234: IFFALSE 57252
// begin weapon := j [ 2 ] ;
57236: LD_ADDR_VAR 0 8
57240: PUSH
57241: LD_VAR 0 5
57245: PUSH
57246: LD_INT 2
57248: ARRAY
57249: ST_TO_ADDR
// break ;
57250: GO 57254
// end ;
57252: GO 57212
57254: POP
57255: POP
// if not weapon then
57256: LD_VAR 0 8
57260: NOT
57261: IFFALSE 57265
// continue ;
57263: GO 57161
// for k in factories do
57265: LD_ADDR_VAR 0 6
57269: PUSH
57270: LD_VAR 0 2
57274: PUSH
57275: FOR_IN
57276: IFFALSE 57341
// begin weapons := AvailableWeaponList ( k ) ;
57278: LD_ADDR_VAR 0 9
57282: PUSH
57283: LD_VAR 0 6
57287: PPUSH
57288: CALL_OW 478
57292: ST_TO_ADDR
// if not weapons then
57293: LD_VAR 0 9
57297: NOT
57298: IFFALSE 57302
// continue ;
57300: GO 57275
// if weapon in weapons then
57302: LD_VAR 0 8
57306: PUSH
57307: LD_VAR 0 9
57311: IN
57312: IFFALSE 57339
// begin result := [ i , weapon ] ;
57314: LD_ADDR_VAR 0 3
57318: PUSH
57319: LD_VAR 0 4
57323: PUSH
57324: LD_VAR 0 8
57328: PUSH
57329: EMPTY
57330: LIST
57331: LIST
57332: ST_TO_ADDR
// exit ;
57333: POP
57334: POP
57335: POP
57336: POP
57337: GO 57347
// end ; end ;
57339: GO 57275
57341: POP
57342: POP
// end ;
57343: GO 57161
57345: POP
57346: POP
// end ;
57347: LD_VAR 0 3
57351: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
57352: LD_INT 0
57354: PPUSH
// if not side or side > 8 then
57355: LD_VAR 0 3
57359: NOT
57360: PUSH
57361: LD_VAR 0 3
57365: PUSH
57366: LD_INT 8
57368: GREATER
57369: OR
57370: IFFALSE 57374
// exit ;
57372: GO 57433
// if not range then
57374: LD_VAR 0 4
57378: NOT
57379: IFFALSE 57390
// range := - 12 ;
57381: LD_ADDR_VAR 0 4
57385: PUSH
57386: LD_INT 12
57388: NEG
57389: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
57390: LD_VAR 0 1
57394: PPUSH
57395: LD_VAR 0 2
57399: PPUSH
57400: LD_VAR 0 3
57404: PPUSH
57405: LD_VAR 0 4
57409: PPUSH
57410: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
57414: LD_VAR 0 1
57418: PPUSH
57419: LD_VAR 0 2
57423: PPUSH
57424: LD_VAR 0 3
57428: PPUSH
57429: CALL_OW 331
// end ;
57433: LD_VAR 0 5
57437: RET
// export function Video ( mode ) ; begin
57438: LD_INT 0
57440: PPUSH
// ingame_video = mode ;
57441: LD_ADDR_OWVAR 52
57445: PUSH
57446: LD_VAR 0 1
57450: ST_TO_ADDR
// interface_hidden = mode ;
57451: LD_ADDR_OWVAR 54
57455: PUSH
57456: LD_VAR 0 1
57460: ST_TO_ADDR
// end ;
57461: LD_VAR 0 2
57465: RET
// export function Join ( array , element ) ; begin
57466: LD_INT 0
57468: PPUSH
// result := Replace ( array , array + 1 , element ) ;
57469: LD_ADDR_VAR 0 3
57473: PUSH
57474: LD_VAR 0 1
57478: PPUSH
57479: LD_VAR 0 1
57483: PUSH
57484: LD_INT 1
57486: PLUS
57487: PPUSH
57488: LD_VAR 0 2
57492: PPUSH
57493: CALL_OW 1
57497: ST_TO_ADDR
// end ;
57498: LD_VAR 0 3
57502: RET
// export function JoinUnion ( array , element ) ; begin
57503: LD_INT 0
57505: PPUSH
// result := array union element ;
57506: LD_ADDR_VAR 0 3
57510: PUSH
57511: LD_VAR 0 1
57515: PUSH
57516: LD_VAR 0 2
57520: UNION
57521: ST_TO_ADDR
// end ;
57522: LD_VAR 0 3
57526: RET
// export function GetBehemoths ( side ) ; begin
57527: LD_INT 0
57529: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
57530: LD_ADDR_VAR 0 2
57534: PUSH
57535: LD_INT 22
57537: PUSH
57538: LD_VAR 0 1
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 31
57549: PUSH
57550: LD_INT 25
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PPUSH
57561: CALL_OW 69
57565: ST_TO_ADDR
// end ;
57566: LD_VAR 0 2
57570: RET
// export function Shuffle ( array ) ; var i , index ; begin
57571: LD_INT 0
57573: PPUSH
57574: PPUSH
57575: PPUSH
// result := [ ] ;
57576: LD_ADDR_VAR 0 2
57580: PUSH
57581: EMPTY
57582: ST_TO_ADDR
// if not array then
57583: LD_VAR 0 1
57587: NOT
57588: IFFALSE 57592
// exit ;
57590: GO 57691
// Randomize ;
57592: CALL_OW 10
// for i = array downto 1 do
57596: LD_ADDR_VAR 0 3
57600: PUSH
57601: DOUBLE
57602: LD_VAR 0 1
57606: INC
57607: ST_TO_ADDR
57608: LD_INT 1
57610: PUSH
57611: FOR_DOWNTO
57612: IFFALSE 57689
// begin index := rand ( 1 , array ) ;
57614: LD_ADDR_VAR 0 4
57618: PUSH
57619: LD_INT 1
57621: PPUSH
57622: LD_VAR 0 1
57626: PPUSH
57627: CALL_OW 12
57631: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
57632: LD_ADDR_VAR 0 2
57636: PUSH
57637: LD_VAR 0 2
57641: PPUSH
57642: LD_VAR 0 2
57646: PUSH
57647: LD_INT 1
57649: PLUS
57650: PPUSH
57651: LD_VAR 0 1
57655: PUSH
57656: LD_VAR 0 4
57660: ARRAY
57661: PPUSH
57662: CALL_OW 2
57666: ST_TO_ADDR
// array := Delete ( array , index ) ;
57667: LD_ADDR_VAR 0 1
57671: PUSH
57672: LD_VAR 0 1
57676: PPUSH
57677: LD_VAR 0 4
57681: PPUSH
57682: CALL_OW 3
57686: ST_TO_ADDR
// end ;
57687: GO 57611
57689: POP
57690: POP
// end ;
57691: LD_VAR 0 2
57695: RET
// export function GetBaseMaterials ( base ) ; begin
57696: LD_INT 0
57698: PPUSH
// result := [ 0 , 0 , 0 ] ;
57699: LD_ADDR_VAR 0 2
57703: PUSH
57704: LD_INT 0
57706: PUSH
57707: LD_INT 0
57709: PUSH
57710: LD_INT 0
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: LIST
57717: ST_TO_ADDR
// if not base then
57718: LD_VAR 0 1
57722: NOT
57723: IFFALSE 57727
// exit ;
57725: GO 57776
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
57727: LD_ADDR_VAR 0 2
57731: PUSH
57732: LD_VAR 0 1
57736: PPUSH
57737: LD_INT 1
57739: PPUSH
57740: CALL_OW 275
57744: PUSH
57745: LD_VAR 0 1
57749: PPUSH
57750: LD_INT 2
57752: PPUSH
57753: CALL_OW 275
57757: PUSH
57758: LD_VAR 0 1
57762: PPUSH
57763: LD_INT 3
57765: PPUSH
57766: CALL_OW 275
57770: PUSH
57771: EMPTY
57772: LIST
57773: LIST
57774: LIST
57775: ST_TO_ADDR
// end ;
57776: LD_VAR 0 2
57780: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
57781: LD_INT 0
57783: PPUSH
57784: PPUSH
// result := array ;
57785: LD_ADDR_VAR 0 3
57789: PUSH
57790: LD_VAR 0 1
57794: ST_TO_ADDR
// if size > 0 then
57795: LD_VAR 0 2
57799: PUSH
57800: LD_INT 0
57802: GREATER
57803: IFFALSE 57849
// for i := array downto size do
57805: LD_ADDR_VAR 0 4
57809: PUSH
57810: DOUBLE
57811: LD_VAR 0 1
57815: INC
57816: ST_TO_ADDR
57817: LD_VAR 0 2
57821: PUSH
57822: FOR_DOWNTO
57823: IFFALSE 57847
// result := Delete ( result , result ) ;
57825: LD_ADDR_VAR 0 3
57829: PUSH
57830: LD_VAR 0 3
57834: PPUSH
57835: LD_VAR 0 3
57839: PPUSH
57840: CALL_OW 3
57844: ST_TO_ADDR
57845: GO 57822
57847: POP
57848: POP
// end ;
57849: LD_VAR 0 3
57853: RET
// export function ComExit ( unit ) ; var tmp ; begin
57854: LD_INT 0
57856: PPUSH
57857: PPUSH
// if not IsInUnit ( unit ) then
57858: LD_VAR 0 1
57862: PPUSH
57863: CALL_OW 310
57867: NOT
57868: IFFALSE 57872
// exit ;
57870: GO 57932
// tmp := IsInUnit ( unit ) ;
57872: LD_ADDR_VAR 0 3
57876: PUSH
57877: LD_VAR 0 1
57881: PPUSH
57882: CALL_OW 310
57886: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
57887: LD_VAR 0 3
57891: PPUSH
57892: CALL_OW 247
57896: PUSH
57897: LD_INT 2
57899: EQUAL
57900: IFFALSE 57913
// ComExitVehicle ( unit ) else
57902: LD_VAR 0 1
57906: PPUSH
57907: CALL_OW 121
57911: GO 57922
// ComExitBuilding ( unit ) ;
57913: LD_VAR 0 1
57917: PPUSH
57918: CALL_OW 122
// result := tmp ;
57922: LD_ADDR_VAR 0 2
57926: PUSH
57927: LD_VAR 0 3
57931: ST_TO_ADDR
// end ;
57932: LD_VAR 0 2
57936: RET
// export function ComExitAll ( units ) ; var i ; begin
57937: LD_INT 0
57939: PPUSH
57940: PPUSH
// if not units then
57941: LD_VAR 0 1
57945: NOT
57946: IFFALSE 57950
// exit ;
57948: GO 57976
// for i in units do
57950: LD_ADDR_VAR 0 3
57954: PUSH
57955: LD_VAR 0 1
57959: PUSH
57960: FOR_IN
57961: IFFALSE 57974
// ComExit ( i ) ;
57963: LD_VAR 0 3
57967: PPUSH
57968: CALL 57854 0 1
57972: GO 57960
57974: POP
57975: POP
// end ;
57976: LD_VAR 0 2
57980: RET
// export function ResetHc ; begin
57981: LD_INT 0
57983: PPUSH
// InitHc ;
57984: CALL_OW 19
// hc_importance := 0 ;
57988: LD_ADDR_OWVAR 32
57992: PUSH
57993: LD_INT 0
57995: ST_TO_ADDR
// end ;
57996: LD_VAR 0 1
58000: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
58001: LD_INT 0
58003: PPUSH
58004: PPUSH
58005: PPUSH
// _x := ( x1 + x2 ) div 2 ;
58006: LD_ADDR_VAR 0 6
58010: PUSH
58011: LD_VAR 0 1
58015: PUSH
58016: LD_VAR 0 3
58020: PLUS
58021: PUSH
58022: LD_INT 2
58024: DIV
58025: ST_TO_ADDR
// if _x < 0 then
58026: LD_VAR 0 6
58030: PUSH
58031: LD_INT 0
58033: LESS
58034: IFFALSE 58051
// _x := _x * - 1 ;
58036: LD_ADDR_VAR 0 6
58040: PUSH
58041: LD_VAR 0 6
58045: PUSH
58046: LD_INT 1
58048: NEG
58049: MUL
58050: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
58051: LD_ADDR_VAR 0 7
58055: PUSH
58056: LD_VAR 0 2
58060: PUSH
58061: LD_VAR 0 4
58065: PLUS
58066: PUSH
58067: LD_INT 2
58069: DIV
58070: ST_TO_ADDR
// if _y < 0 then
58071: LD_VAR 0 7
58075: PUSH
58076: LD_INT 0
58078: LESS
58079: IFFALSE 58096
// _y := _y * - 1 ;
58081: LD_ADDR_VAR 0 7
58085: PUSH
58086: LD_VAR 0 7
58090: PUSH
58091: LD_INT 1
58093: NEG
58094: MUL
58095: ST_TO_ADDR
// result := [ _x , _y ] ;
58096: LD_ADDR_VAR 0 5
58100: PUSH
58101: LD_VAR 0 6
58105: PUSH
58106: LD_VAR 0 7
58110: PUSH
58111: EMPTY
58112: LIST
58113: LIST
58114: ST_TO_ADDR
// end ;
58115: LD_VAR 0 5
58119: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
58120: LD_INT 0
58122: PPUSH
58123: PPUSH
58124: PPUSH
58125: PPUSH
// task := GetTaskList ( unit ) ;
58126: LD_ADDR_VAR 0 7
58130: PUSH
58131: LD_VAR 0 1
58135: PPUSH
58136: CALL_OW 437
58140: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
58141: LD_VAR 0 7
58145: NOT
58146: PUSH
58147: LD_VAR 0 1
58151: PPUSH
58152: LD_VAR 0 2
58156: PPUSH
58157: CALL_OW 308
58161: NOT
58162: AND
58163: IFFALSE 58167
// exit ;
58165: GO 58285
// if IsInArea ( unit , area ) then
58167: LD_VAR 0 1
58171: PPUSH
58172: LD_VAR 0 2
58176: PPUSH
58177: CALL_OW 308
58181: IFFALSE 58199
// begin ComMoveToArea ( unit , goAway ) ;
58183: LD_VAR 0 1
58187: PPUSH
58188: LD_VAR 0 3
58192: PPUSH
58193: CALL_OW 113
// exit ;
58197: GO 58285
// end ; if task [ 1 ] [ 1 ] <> M then
58199: LD_VAR 0 7
58203: PUSH
58204: LD_INT 1
58206: ARRAY
58207: PUSH
58208: LD_INT 1
58210: ARRAY
58211: PUSH
58212: LD_STRING M
58214: NONEQUAL
58215: IFFALSE 58219
// exit ;
58217: GO 58285
// x := task [ 1 ] [ 2 ] ;
58219: LD_ADDR_VAR 0 5
58223: PUSH
58224: LD_VAR 0 7
58228: PUSH
58229: LD_INT 1
58231: ARRAY
58232: PUSH
58233: LD_INT 2
58235: ARRAY
58236: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
58237: LD_ADDR_VAR 0 6
58241: PUSH
58242: LD_VAR 0 7
58246: PUSH
58247: LD_INT 1
58249: ARRAY
58250: PUSH
58251: LD_INT 3
58253: ARRAY
58254: ST_TO_ADDR
// if InArea ( x , y , area ) then
58255: LD_VAR 0 5
58259: PPUSH
58260: LD_VAR 0 6
58264: PPUSH
58265: LD_VAR 0 2
58269: PPUSH
58270: CALL_OW 309
58274: IFFALSE 58285
// ComStop ( unit ) ;
58276: LD_VAR 0 1
58280: PPUSH
58281: CALL_OW 141
// end ;
58285: LD_VAR 0 4
58289: RET
// export function Abs ( value ) ; begin
58290: LD_INT 0
58292: PPUSH
// result := value ;
58293: LD_ADDR_VAR 0 2
58297: PUSH
58298: LD_VAR 0 1
58302: ST_TO_ADDR
// if value < 0 then
58303: LD_VAR 0 1
58307: PUSH
58308: LD_INT 0
58310: LESS
58311: IFFALSE 58328
// result := value * - 1 ;
58313: LD_ADDR_VAR 0 2
58317: PUSH
58318: LD_VAR 0 1
58322: PUSH
58323: LD_INT 1
58325: NEG
58326: MUL
58327: ST_TO_ADDR
// end ;
58328: LD_VAR 0 2
58332: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
58333: LD_INT 0
58335: PPUSH
58336: PPUSH
58337: PPUSH
58338: PPUSH
58339: PPUSH
58340: PPUSH
58341: PPUSH
58342: PPUSH
// if not unit or not building then
58343: LD_VAR 0 1
58347: NOT
58348: PUSH
58349: LD_VAR 0 2
58353: NOT
58354: OR
58355: IFFALSE 58359
// exit ;
58357: GO 58585
// x := GetX ( building ) ;
58359: LD_ADDR_VAR 0 4
58363: PUSH
58364: LD_VAR 0 2
58368: PPUSH
58369: CALL_OW 250
58373: ST_TO_ADDR
// y := GetY ( building ) ;
58374: LD_ADDR_VAR 0 6
58378: PUSH
58379: LD_VAR 0 2
58383: PPUSH
58384: CALL_OW 251
58388: ST_TO_ADDR
// d := GetDir ( building ) ;
58389: LD_ADDR_VAR 0 8
58393: PUSH
58394: LD_VAR 0 2
58398: PPUSH
58399: CALL_OW 254
58403: ST_TO_ADDR
// r := 4 ;
58404: LD_ADDR_VAR 0 9
58408: PUSH
58409: LD_INT 4
58411: ST_TO_ADDR
// for i := 1 to 5 do
58412: LD_ADDR_VAR 0 10
58416: PUSH
58417: DOUBLE
58418: LD_INT 1
58420: DEC
58421: ST_TO_ADDR
58422: LD_INT 5
58424: PUSH
58425: FOR_TO
58426: IFFALSE 58583
// begin _x := ShiftX ( x , d , r + i ) ;
58428: LD_ADDR_VAR 0 5
58432: PUSH
58433: LD_VAR 0 4
58437: PPUSH
58438: LD_VAR 0 8
58442: PPUSH
58443: LD_VAR 0 9
58447: PUSH
58448: LD_VAR 0 10
58452: PLUS
58453: PPUSH
58454: CALL_OW 272
58458: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
58459: LD_ADDR_VAR 0 7
58463: PUSH
58464: LD_VAR 0 6
58468: PPUSH
58469: LD_VAR 0 8
58473: PPUSH
58474: LD_VAR 0 9
58478: PUSH
58479: LD_VAR 0 10
58483: PLUS
58484: PPUSH
58485: CALL_OW 273
58489: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
58490: LD_VAR 0 5
58494: PPUSH
58495: LD_VAR 0 7
58499: PPUSH
58500: CALL_OW 488
58504: PUSH
58505: LD_VAR 0 5
58509: PPUSH
58510: LD_VAR 0 7
58514: PPUSH
58515: CALL_OW 428
58519: PPUSH
58520: CALL_OW 247
58524: PUSH
58525: LD_INT 3
58527: PUSH
58528: LD_INT 2
58530: PUSH
58531: EMPTY
58532: LIST
58533: LIST
58534: IN
58535: NOT
58536: AND
58537: IFFALSE 58581
// begin ComMoveXY ( unit , _x , _y ) ;
58539: LD_VAR 0 1
58543: PPUSH
58544: LD_VAR 0 5
58548: PPUSH
58549: LD_VAR 0 7
58553: PPUSH
58554: CALL_OW 111
// result := [ _x , _y ] ;
58558: LD_ADDR_VAR 0 3
58562: PUSH
58563: LD_VAR 0 5
58567: PUSH
58568: LD_VAR 0 7
58572: PUSH
58573: EMPTY
58574: LIST
58575: LIST
58576: ST_TO_ADDR
// exit ;
58577: POP
58578: POP
58579: GO 58585
// end ; end ;
58581: GO 58425
58583: POP
58584: POP
// end ;
58585: LD_VAR 0 3
58589: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
58590: LD_INT 0
58592: PPUSH
58593: PPUSH
58594: PPUSH
// result := 0 ;
58595: LD_ADDR_VAR 0 3
58599: PUSH
58600: LD_INT 0
58602: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
58603: LD_VAR 0 1
58607: PUSH
58608: LD_INT 0
58610: LESS
58611: PUSH
58612: LD_VAR 0 1
58616: PUSH
58617: LD_INT 8
58619: GREATER
58620: OR
58621: PUSH
58622: LD_VAR 0 2
58626: PUSH
58627: LD_INT 0
58629: LESS
58630: OR
58631: PUSH
58632: LD_VAR 0 2
58636: PUSH
58637: LD_INT 8
58639: GREATER
58640: OR
58641: IFFALSE 58645
// exit ;
58643: GO 58720
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
58645: LD_ADDR_VAR 0 4
58649: PUSH
58650: LD_INT 22
58652: PUSH
58653: LD_VAR 0 2
58657: PUSH
58658: EMPTY
58659: LIST
58660: LIST
58661: PPUSH
58662: CALL_OW 69
58666: PUSH
58667: FOR_IN
58668: IFFALSE 58718
// begin un := UnitShoot ( i ) ;
58670: LD_ADDR_VAR 0 5
58674: PUSH
58675: LD_VAR 0 4
58679: PPUSH
58680: CALL_OW 504
58684: ST_TO_ADDR
// if GetSide ( un ) = side1 then
58685: LD_VAR 0 5
58689: PPUSH
58690: CALL_OW 255
58694: PUSH
58695: LD_VAR 0 1
58699: EQUAL
58700: IFFALSE 58716
// begin result := un ;
58702: LD_ADDR_VAR 0 3
58706: PUSH
58707: LD_VAR 0 5
58711: ST_TO_ADDR
// exit ;
58712: POP
58713: POP
58714: GO 58720
// end ; end ;
58716: GO 58667
58718: POP
58719: POP
// end ;
58720: LD_VAR 0 3
58724: RET
// export function GetCargoBay ( units ) ; begin
58725: LD_INT 0
58727: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
58728: LD_ADDR_VAR 0 2
58732: PUSH
58733: LD_VAR 0 1
58737: PPUSH
58738: LD_INT 2
58740: PUSH
58741: LD_INT 34
58743: PUSH
58744: LD_INT 12
58746: PUSH
58747: EMPTY
58748: LIST
58749: LIST
58750: PUSH
58751: LD_INT 34
58753: PUSH
58754: LD_INT 51
58756: PUSH
58757: EMPTY
58758: LIST
58759: LIST
58760: PUSH
58761: LD_INT 34
58763: PUSH
58764: LD_INT 32
58766: PUSH
58767: EMPTY
58768: LIST
58769: LIST
58770: PUSH
58771: LD_INT 34
58773: PUSH
58774: LD_EXP 80
58778: PUSH
58779: EMPTY
58780: LIST
58781: LIST
58782: PUSH
58783: EMPTY
58784: LIST
58785: LIST
58786: LIST
58787: LIST
58788: LIST
58789: PPUSH
58790: CALL_OW 72
58794: ST_TO_ADDR
// end ;
58795: LD_VAR 0 2
58799: RET
// export function Negate ( value ) ; begin
58800: LD_INT 0
58802: PPUSH
// result := not value ;
58803: LD_ADDR_VAR 0 2
58807: PUSH
58808: LD_VAR 0 1
58812: NOT
58813: ST_TO_ADDR
// end ;
58814: LD_VAR 0 2
58818: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
58819: LD_INT 0
58821: PPUSH
// if x1 = x2 then
58822: LD_VAR 0 1
58826: PUSH
58827: LD_VAR 0 3
58831: EQUAL
58832: IFFALSE 58866
// begin if y1 > y2 then
58834: LD_VAR 0 2
58838: PUSH
58839: LD_VAR 0 4
58843: GREATER
58844: IFFALSE 58856
// result := 0 else
58846: LD_ADDR_VAR 0 5
58850: PUSH
58851: LD_INT 0
58853: ST_TO_ADDR
58854: GO 58864
// result := 3 ;
58856: LD_ADDR_VAR 0 5
58860: PUSH
58861: LD_INT 3
58863: ST_TO_ADDR
// exit ;
58864: GO 58952
// end ; if y1 = y2 then
58866: LD_VAR 0 2
58870: PUSH
58871: LD_VAR 0 4
58875: EQUAL
58876: IFFALSE 58910
// begin if x1 > x2 then
58878: LD_VAR 0 1
58882: PUSH
58883: LD_VAR 0 3
58887: GREATER
58888: IFFALSE 58900
// result := 1 else
58890: LD_ADDR_VAR 0 5
58894: PUSH
58895: LD_INT 1
58897: ST_TO_ADDR
58898: GO 58908
// result := 4 ;
58900: LD_ADDR_VAR 0 5
58904: PUSH
58905: LD_INT 4
58907: ST_TO_ADDR
// exit ;
58908: GO 58952
// end ; if x1 > x2 and y1 > y2 then
58910: LD_VAR 0 1
58914: PUSH
58915: LD_VAR 0 3
58919: GREATER
58920: PUSH
58921: LD_VAR 0 2
58925: PUSH
58926: LD_VAR 0 4
58930: GREATER
58931: AND
58932: IFFALSE 58944
// result := 2 else
58934: LD_ADDR_VAR 0 5
58938: PUSH
58939: LD_INT 2
58941: ST_TO_ADDR
58942: GO 58952
// result := 5 ;
58944: LD_ADDR_VAR 0 5
58948: PUSH
58949: LD_INT 5
58951: ST_TO_ADDR
// end ;
58952: LD_VAR 0 5
58956: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
58957: LD_INT 0
58959: PPUSH
58960: PPUSH
// if not driver or not IsInUnit ( driver ) then
58961: LD_VAR 0 1
58965: NOT
58966: PUSH
58967: LD_VAR 0 1
58971: PPUSH
58972: CALL_OW 310
58976: NOT
58977: OR
58978: IFFALSE 58982
// exit ;
58980: GO 59072
// vehicle := IsInUnit ( driver ) ;
58982: LD_ADDR_VAR 0 3
58986: PUSH
58987: LD_VAR 0 1
58991: PPUSH
58992: CALL_OW 310
58996: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
58997: LD_VAR 0 1
59001: PPUSH
59002: LD_STRING \
59004: PUSH
59005: LD_INT 0
59007: PUSH
59008: LD_INT 0
59010: PUSH
59011: LD_INT 0
59013: PUSH
59014: LD_INT 0
59016: PUSH
59017: LD_INT 0
59019: PUSH
59020: LD_INT 0
59022: PUSH
59023: EMPTY
59024: LIST
59025: LIST
59026: LIST
59027: LIST
59028: LIST
59029: LIST
59030: LIST
59031: PUSH
59032: LD_STRING E
59034: PUSH
59035: LD_INT 0
59037: PUSH
59038: LD_INT 0
59040: PUSH
59041: LD_VAR 0 3
59045: PUSH
59046: LD_INT 0
59048: PUSH
59049: LD_INT 0
59051: PUSH
59052: LD_INT 0
59054: PUSH
59055: EMPTY
59056: LIST
59057: LIST
59058: LIST
59059: LIST
59060: LIST
59061: LIST
59062: LIST
59063: PUSH
59064: EMPTY
59065: LIST
59066: LIST
59067: PPUSH
59068: CALL_OW 446
// end ;
59072: LD_VAR 0 2
59076: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
59077: LD_INT 0
59079: PPUSH
59080: PPUSH
// if not driver or not IsInUnit ( driver ) then
59081: LD_VAR 0 1
59085: NOT
59086: PUSH
59087: LD_VAR 0 1
59091: PPUSH
59092: CALL_OW 310
59096: NOT
59097: OR
59098: IFFALSE 59102
// exit ;
59100: GO 59192
// vehicle := IsInUnit ( driver ) ;
59102: LD_ADDR_VAR 0 3
59106: PUSH
59107: LD_VAR 0 1
59111: PPUSH
59112: CALL_OW 310
59116: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
59117: LD_VAR 0 1
59121: PPUSH
59122: LD_STRING \
59124: PUSH
59125: LD_INT 0
59127: PUSH
59128: LD_INT 0
59130: PUSH
59131: LD_INT 0
59133: PUSH
59134: LD_INT 0
59136: PUSH
59137: LD_INT 0
59139: PUSH
59140: LD_INT 0
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: LIST
59150: LIST
59151: PUSH
59152: LD_STRING E
59154: PUSH
59155: LD_INT 0
59157: PUSH
59158: LD_INT 0
59160: PUSH
59161: LD_VAR 0 3
59165: PUSH
59166: LD_INT 0
59168: PUSH
59169: LD_INT 0
59171: PUSH
59172: LD_INT 0
59174: PUSH
59175: EMPTY
59176: LIST
59177: LIST
59178: LIST
59179: LIST
59180: LIST
59181: LIST
59182: LIST
59183: PUSH
59184: EMPTY
59185: LIST
59186: LIST
59187: PPUSH
59188: CALL_OW 447
// end ;
59192: LD_VAR 0 2
59196: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
59197: LD_INT 0
59199: PPUSH
59200: PPUSH
59201: PPUSH
// tmp := [ ] ;
59202: LD_ADDR_VAR 0 5
59206: PUSH
59207: EMPTY
59208: ST_TO_ADDR
// for i in units do
59209: LD_ADDR_VAR 0 4
59213: PUSH
59214: LD_VAR 0 1
59218: PUSH
59219: FOR_IN
59220: IFFALSE 59258
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
59222: LD_ADDR_VAR 0 5
59226: PUSH
59227: LD_VAR 0 5
59231: PPUSH
59232: LD_VAR 0 5
59236: PUSH
59237: LD_INT 1
59239: PLUS
59240: PPUSH
59241: LD_VAR 0 4
59245: PPUSH
59246: CALL_OW 256
59250: PPUSH
59251: CALL_OW 2
59255: ST_TO_ADDR
59256: GO 59219
59258: POP
59259: POP
// if not tmp then
59260: LD_VAR 0 5
59264: NOT
59265: IFFALSE 59269
// exit ;
59267: GO 59317
// if asc then
59269: LD_VAR 0 2
59273: IFFALSE 59297
// result := SortListByListAsc ( units , tmp ) else
59275: LD_ADDR_VAR 0 3
59279: PUSH
59280: LD_VAR 0 1
59284: PPUSH
59285: LD_VAR 0 5
59289: PPUSH
59290: CALL_OW 76
59294: ST_TO_ADDR
59295: GO 59317
// result := SortListByListDesc ( units , tmp ) ;
59297: LD_ADDR_VAR 0 3
59301: PUSH
59302: LD_VAR 0 1
59306: PPUSH
59307: LD_VAR 0 5
59311: PPUSH
59312: CALL_OW 77
59316: ST_TO_ADDR
// end ;
59317: LD_VAR 0 3
59321: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
59322: LD_INT 0
59324: PPUSH
59325: PPUSH
// task := GetTaskList ( mech ) ;
59326: LD_ADDR_VAR 0 4
59330: PUSH
59331: LD_VAR 0 1
59335: PPUSH
59336: CALL_OW 437
59340: ST_TO_ADDR
// if not task then
59341: LD_VAR 0 4
59345: NOT
59346: IFFALSE 59350
// exit ;
59348: GO 59392
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
59350: LD_ADDR_VAR 0 3
59354: PUSH
59355: LD_VAR 0 4
59359: PUSH
59360: LD_INT 1
59362: ARRAY
59363: PUSH
59364: LD_INT 1
59366: ARRAY
59367: PUSH
59368: LD_STRING r
59370: EQUAL
59371: PUSH
59372: LD_VAR 0 4
59376: PUSH
59377: LD_INT 1
59379: ARRAY
59380: PUSH
59381: LD_INT 4
59383: ARRAY
59384: PUSH
59385: LD_VAR 0 2
59389: EQUAL
59390: AND
59391: ST_TO_ADDR
// end ;
59392: LD_VAR 0 3
59396: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
59397: LD_INT 0
59399: PPUSH
// SetDir ( unit , d ) ;
59400: LD_VAR 0 1
59404: PPUSH
59405: LD_VAR 0 4
59409: PPUSH
59410: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
59414: LD_VAR 0 1
59418: PPUSH
59419: LD_VAR 0 2
59423: PPUSH
59424: LD_VAR 0 3
59428: PPUSH
59429: LD_VAR 0 5
59433: PPUSH
59434: CALL_OW 48
// end ;
59438: LD_VAR 0 6
59442: RET
// export function ToNaturalNumber ( number ) ; begin
59443: LD_INT 0
59445: PPUSH
// result := number div 1 ;
59446: LD_ADDR_VAR 0 2
59450: PUSH
59451: LD_VAR 0 1
59455: PUSH
59456: LD_INT 1
59458: DIV
59459: ST_TO_ADDR
// if number < 0 then
59460: LD_VAR 0 1
59464: PUSH
59465: LD_INT 0
59467: LESS
59468: IFFALSE 59478
// result := 0 ;
59470: LD_ADDR_VAR 0 2
59474: PUSH
59475: LD_INT 0
59477: ST_TO_ADDR
// end ;
59478: LD_VAR 0 2
59482: RET
// export function SortByClass ( units , class ) ; var un ; begin
59483: LD_INT 0
59485: PPUSH
59486: PPUSH
// if not units or not class then
59487: LD_VAR 0 1
59491: NOT
59492: PUSH
59493: LD_VAR 0 2
59497: NOT
59498: OR
59499: IFFALSE 59503
// exit ;
59501: GO 59598
// result := [ ] ;
59503: LD_ADDR_VAR 0 3
59507: PUSH
59508: EMPTY
59509: ST_TO_ADDR
// for un in units do
59510: LD_ADDR_VAR 0 4
59514: PUSH
59515: LD_VAR 0 1
59519: PUSH
59520: FOR_IN
59521: IFFALSE 59596
// if GetClass ( un ) = class then
59523: LD_VAR 0 4
59527: PPUSH
59528: CALL_OW 257
59532: PUSH
59533: LD_VAR 0 2
59537: EQUAL
59538: IFFALSE 59565
// result := Insert ( result , 1 , un ) else
59540: LD_ADDR_VAR 0 3
59544: PUSH
59545: LD_VAR 0 3
59549: PPUSH
59550: LD_INT 1
59552: PPUSH
59553: LD_VAR 0 4
59557: PPUSH
59558: CALL_OW 2
59562: ST_TO_ADDR
59563: GO 59594
// result := Replace ( result , result + 1 , un ) ;
59565: LD_ADDR_VAR 0 3
59569: PUSH
59570: LD_VAR 0 3
59574: PPUSH
59575: LD_VAR 0 3
59579: PUSH
59580: LD_INT 1
59582: PLUS
59583: PPUSH
59584: LD_VAR 0 4
59588: PPUSH
59589: CALL_OW 1
59593: ST_TO_ADDR
59594: GO 59520
59596: POP
59597: POP
// end ;
59598: LD_VAR 0 3
59602: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
59603: LD_INT 0
59605: PPUSH
59606: PPUSH
59607: PPUSH
59608: PPUSH
59609: PPUSH
59610: PPUSH
59611: PPUSH
// result := [ ] ;
59612: LD_ADDR_VAR 0 4
59616: PUSH
59617: EMPTY
59618: ST_TO_ADDR
// if x - r < 0 then
59619: LD_VAR 0 1
59623: PUSH
59624: LD_VAR 0 3
59628: MINUS
59629: PUSH
59630: LD_INT 0
59632: LESS
59633: IFFALSE 59645
// min_x := 0 else
59635: LD_ADDR_VAR 0 8
59639: PUSH
59640: LD_INT 0
59642: ST_TO_ADDR
59643: GO 59661
// min_x := x - r ;
59645: LD_ADDR_VAR 0 8
59649: PUSH
59650: LD_VAR 0 1
59654: PUSH
59655: LD_VAR 0 3
59659: MINUS
59660: ST_TO_ADDR
// if y - r < 0 then
59661: LD_VAR 0 2
59665: PUSH
59666: LD_VAR 0 3
59670: MINUS
59671: PUSH
59672: LD_INT 0
59674: LESS
59675: IFFALSE 59687
// min_y := 0 else
59677: LD_ADDR_VAR 0 7
59681: PUSH
59682: LD_INT 0
59684: ST_TO_ADDR
59685: GO 59703
// min_y := y - r ;
59687: LD_ADDR_VAR 0 7
59691: PUSH
59692: LD_VAR 0 2
59696: PUSH
59697: LD_VAR 0 3
59701: MINUS
59702: ST_TO_ADDR
// max_x := x + r ;
59703: LD_ADDR_VAR 0 9
59707: PUSH
59708: LD_VAR 0 1
59712: PUSH
59713: LD_VAR 0 3
59717: PLUS
59718: ST_TO_ADDR
// max_y := y + r ;
59719: LD_ADDR_VAR 0 10
59723: PUSH
59724: LD_VAR 0 2
59728: PUSH
59729: LD_VAR 0 3
59733: PLUS
59734: ST_TO_ADDR
// for _x = min_x to max_x do
59735: LD_ADDR_VAR 0 5
59739: PUSH
59740: DOUBLE
59741: LD_VAR 0 8
59745: DEC
59746: ST_TO_ADDR
59747: LD_VAR 0 9
59751: PUSH
59752: FOR_TO
59753: IFFALSE 59854
// for _y = min_y to max_y do
59755: LD_ADDR_VAR 0 6
59759: PUSH
59760: DOUBLE
59761: LD_VAR 0 7
59765: DEC
59766: ST_TO_ADDR
59767: LD_VAR 0 10
59771: PUSH
59772: FOR_TO
59773: IFFALSE 59850
// begin if not ValidHex ( _x , _y ) then
59775: LD_VAR 0 5
59779: PPUSH
59780: LD_VAR 0 6
59784: PPUSH
59785: CALL_OW 488
59789: NOT
59790: IFFALSE 59794
// continue ;
59792: GO 59772
// if GetResourceTypeXY ( _x , _y ) then
59794: LD_VAR 0 5
59798: PPUSH
59799: LD_VAR 0 6
59803: PPUSH
59804: CALL_OW 283
59808: IFFALSE 59848
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
59810: LD_ADDR_VAR 0 4
59814: PUSH
59815: LD_VAR 0 4
59819: PPUSH
59820: LD_VAR 0 4
59824: PUSH
59825: LD_INT 1
59827: PLUS
59828: PPUSH
59829: LD_VAR 0 5
59833: PUSH
59834: LD_VAR 0 6
59838: PUSH
59839: EMPTY
59840: LIST
59841: LIST
59842: PPUSH
59843: CALL_OW 1
59847: ST_TO_ADDR
// end ;
59848: GO 59772
59850: POP
59851: POP
59852: GO 59752
59854: POP
59855: POP
// end ;
59856: LD_VAR 0 4
59860: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
59861: LD_INT 0
59863: PPUSH
59864: PPUSH
59865: PPUSH
59866: PPUSH
59867: PPUSH
59868: PPUSH
// if not units then
59869: LD_VAR 0 1
59873: NOT
59874: IFFALSE 59878
// exit ;
59876: GO 60279
// result := UnitFilter ( units , [ f_ok ] ) ;
59878: LD_ADDR_VAR 0 3
59882: PUSH
59883: LD_VAR 0 1
59887: PPUSH
59888: LD_INT 50
59890: PUSH
59891: EMPTY
59892: LIST
59893: PPUSH
59894: CALL_OW 72
59898: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
59899: LD_ADDR_VAR 0 7
59903: PUSH
59904: LD_VAR 0 1
59908: PUSH
59909: LD_INT 1
59911: ARRAY
59912: PPUSH
59913: CALL_OW 255
59917: ST_TO_ADDR
// if not result then
59918: LD_VAR 0 3
59922: NOT
59923: IFFALSE 59927
// exit ;
59925: GO 60279
// for i in result do
59927: LD_ADDR_VAR 0 4
59931: PUSH
59932: LD_VAR 0 3
59936: PUSH
59937: FOR_IN
59938: IFFALSE 60277
// begin tag := GetTag ( i ) + 1 ;
59940: LD_ADDR_VAR 0 8
59944: PUSH
59945: LD_VAR 0 4
59949: PPUSH
59950: CALL_OW 110
59954: PUSH
59955: LD_INT 1
59957: PLUS
59958: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
59959: LD_ADDR_VAR 0 6
59963: PUSH
59964: LD_VAR 0 4
59968: PPUSH
59969: CALL_OW 250
59973: PPUSH
59974: LD_VAR 0 4
59978: PPUSH
59979: CALL_OW 251
59983: PPUSH
59984: LD_INT 6
59986: PPUSH
59987: CALL 59603 0 3
59991: ST_TO_ADDR
// if cr then
59992: LD_VAR 0 6
59996: IFFALSE 60035
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
59998: LD_VAR 0 4
60002: PPUSH
60003: LD_VAR 0 6
60007: PUSH
60008: LD_INT 1
60010: ARRAY
60011: PUSH
60012: LD_INT 1
60014: ARRAY
60015: PPUSH
60016: LD_VAR 0 6
60020: PUSH
60021: LD_INT 1
60023: ARRAY
60024: PUSH
60025: LD_INT 2
60027: ARRAY
60028: PPUSH
60029: CALL_OW 116
60033: GO 60275
// if path > tag then
60035: LD_VAR 0 2
60039: PUSH
60040: LD_VAR 0 8
60044: GREATER
60045: IFFALSE 60223
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
60047: LD_ADDR_VAR 0 5
60051: PUSH
60052: LD_INT 81
60054: PUSH
60055: LD_VAR 0 7
60059: PUSH
60060: EMPTY
60061: LIST
60062: LIST
60063: PUSH
60064: LD_INT 91
60066: PUSH
60067: LD_VAR 0 4
60071: PUSH
60072: LD_INT 12
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: LIST
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PPUSH
60084: CALL_OW 69
60088: ST_TO_ADDR
// if enemy then
60089: LD_VAR 0 5
60093: IFFALSE 60121
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
60095: LD_VAR 0 4
60099: PPUSH
60100: LD_VAR 0 5
60104: PPUSH
60105: LD_VAR 0 4
60109: PPUSH
60110: CALL_OW 74
60114: PPUSH
60115: CALL_OW 115
60119: GO 60221
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
60121: LD_VAR 0 4
60125: PPUSH
60126: LD_VAR 0 2
60130: PUSH
60131: LD_VAR 0 8
60135: ARRAY
60136: PUSH
60137: LD_INT 1
60139: ARRAY
60140: PPUSH
60141: LD_VAR 0 2
60145: PUSH
60146: LD_VAR 0 8
60150: ARRAY
60151: PUSH
60152: LD_INT 2
60154: ARRAY
60155: PPUSH
60156: CALL_OW 297
60160: PUSH
60161: LD_INT 6
60163: GREATER
60164: IFFALSE 60207
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
60166: LD_VAR 0 4
60170: PPUSH
60171: LD_VAR 0 2
60175: PUSH
60176: LD_VAR 0 8
60180: ARRAY
60181: PUSH
60182: LD_INT 1
60184: ARRAY
60185: PPUSH
60186: LD_VAR 0 2
60190: PUSH
60191: LD_VAR 0 8
60195: ARRAY
60196: PUSH
60197: LD_INT 2
60199: ARRAY
60200: PPUSH
60201: CALL_OW 114
60205: GO 60221
// SetTag ( i , tag ) ;
60207: LD_VAR 0 4
60211: PPUSH
60212: LD_VAR 0 8
60216: PPUSH
60217: CALL_OW 109
// end else
60221: GO 60275
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
60223: LD_ADDR_VAR 0 5
60227: PUSH
60228: LD_INT 81
60230: PUSH
60231: LD_VAR 0 7
60235: PUSH
60236: EMPTY
60237: LIST
60238: LIST
60239: PPUSH
60240: CALL_OW 69
60244: ST_TO_ADDR
// if enemy then
60245: LD_VAR 0 5
60249: IFFALSE 60275
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
60251: LD_VAR 0 4
60255: PPUSH
60256: LD_VAR 0 5
60260: PPUSH
60261: LD_VAR 0 4
60265: PPUSH
60266: CALL_OW 74
60270: PPUSH
60271: CALL_OW 115
// end ; end ;
60275: GO 59937
60277: POP
60278: POP
// end ; end_of_file
60279: LD_VAR 0 3
60283: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
60284: LD_VAR 0 1
60288: PUSH
60289: LD_INT 200
60291: DOUBLE
60292: GREATEREQUAL
60293: IFFALSE 60301
60295: LD_INT 299
60297: DOUBLE
60298: LESSEQUAL
60299: IFTRUE 60303
60301: GO 60335
60303: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
60304: LD_VAR 0 1
60308: PPUSH
60309: LD_VAR 0 2
60313: PPUSH
60314: LD_VAR 0 3
60318: PPUSH
60319: LD_VAR 0 4
60323: PPUSH
60324: LD_VAR 0 5
60328: PPUSH
60329: CALL 3506 0 5
60333: GO 60412
60335: LD_INT 300
60337: DOUBLE
60338: GREATEREQUAL
60339: IFFALSE 60347
60341: LD_INT 399
60343: DOUBLE
60344: LESSEQUAL
60345: IFTRUE 60349
60347: GO 60411
60349: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
60350: LD_VAR 0 1
60354: PPUSH
60355: LD_VAR 0 2
60359: PPUSH
60360: LD_VAR 0 3
60364: PPUSH
60365: LD_VAR 0 4
60369: PPUSH
60370: LD_VAR 0 5
60374: PPUSH
60375: LD_VAR 0 6
60379: PPUSH
60380: LD_VAR 0 7
60384: PPUSH
60385: LD_VAR 0 8
60389: PPUSH
60390: LD_VAR 0 9
60394: PPUSH
60395: LD_VAR 0 10
60399: PPUSH
60400: LD_VAR 0 11
60404: PPUSH
60405: CALL 18581 0 11
60409: GO 60412
60411: POP
// end ;
60412: PPOPN 11
60414: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
60415: LD_VAR 0 1
60419: PPUSH
60420: LD_VAR 0 2
60424: PPUSH
60425: LD_VAR 0 3
60429: PPUSH
60430: LD_VAR 0 4
60434: PPUSH
60435: LD_VAR 0 5
60439: PPUSH
60440: CALL 3488 0 5
// end ; end_of_file
60444: PPOPN 5
60446: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
60447: LD_VAR 0 1
60451: PPUSH
60452: LD_VAR 0 2
60456: PPUSH
60457: LD_VAR 0 3
60461: PPUSH
60462: LD_VAR 0 4
60466: PPUSH
60467: LD_VAR 0 5
60471: PPUSH
60472: LD_VAR 0 6
60476: PPUSH
60477: CALL 7389 0 6
// end ;
60481: PPOPN 6
60483: END
