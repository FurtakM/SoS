// starting begin ResetFog ;
   0: CALL_OW 335
// PrepareGame ;
   4: CALL 13 0 0
// PrepareUnits ;
   8: CALL 299 0 0
// end ;
  12: END
// export mechanics , time_to_destroy , players , sib_bomb , time , veh_amount ; export p1 , p2 , p3 , p4 , p5 ; function PrepareGame ; var debug , i ; begin
  13: LD_INT 0
  15: PPUSH
  16: PPUSH
  17: PPUSH
// debug := false ;
  18: LD_ADDR_VAR 0 2
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// if debug then
  26: LD_VAR 0 2
  30: IFFALSE 81
// begin mechanics := 5 ;
  32: LD_ADDR_EXP 1
  36: PUSH
  37: LD_INT 5
  39: ST_TO_ADDR
// time_to_destroy := 45 ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_INT 45
  47: ST_TO_ADDR
// players := 4 ;
  48: LD_ADDR_EXP 3
  52: PUSH
  53: LD_INT 4
  55: ST_TO_ADDR
// sib_bomb := true ;
  56: LD_ADDR_EXP 4
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// time := 3 3$00 ;
  64: LD_ADDR_EXP 5
  68: PUSH
  69: LD_INT 6300
  71: ST_TO_ADDR
// FogOff ( 1 ) ;
  72: LD_INT 1
  74: PPUSH
  75: CALL_OW 344
// end else
  79: GO 214
// begin time := 3 3$00 ;
  81: LD_ADDR_EXP 5
  85: PUSH
  86: LD_INT 6300
  88: ST_TO_ADDR
// players := 4 ;
  89: LD_ADDR_EXP 3
  93: PUSH
  94: LD_INT 4
  96: ST_TO_ADDR
// sib_bomb := true ;
  97: LD_ADDR_EXP 4
 101: PUSH
 102: LD_INT 1
 104: ST_TO_ADDR
// mechanics := 4 ;
 105: LD_ADDR_EXP 1
 109: PUSH
 110: LD_INT 4
 112: ST_TO_ADDR
// mechanics := [ 3 , 4 , 5 ] [ GetMultiplayerSetting ( 0 ) ] ;
 113: LD_ADDR_EXP 1
 117: PUSH
 118: LD_INT 3
 120: PUSH
 121: LD_INT 4
 123: PUSH
 124: LD_INT 5
 126: PUSH
 127: EMPTY
 128: LIST
 129: LIST
 130: LIST
 131: PUSH
 132: LD_INT 0
 134: PPUSH
 135: CALL_OW 426
 139: ARRAY
 140: ST_TO_ADDR
// players := [ 3 , 4 , 5 ] [ GetMultiplayerSetting ( 1 ) ] ;
 141: LD_ADDR_EXP 3
 145: PUSH
 146: LD_INT 3
 148: PUSH
 149: LD_INT 4
 151: PUSH
 152: LD_INT 5
 154: PUSH
 155: EMPTY
 156: LIST
 157: LIST
 158: LIST
 159: PUSH
 160: LD_INT 1
 162: PPUSH
 163: CALL_OW 426
 167: ARRAY
 168: ST_TO_ADDR
// time := [ 3 3$00 , 5 5$00 , 10 10$00 ] [ GetMultiplayerSetting ( 2 ) ] ;
 169: LD_ADDR_EXP 5
 173: PUSH
 174: LD_INT 6300
 176: PUSH
 177: LD_INT 10500
 179: PUSH
 180: LD_INT 21000
 182: PUSH
 183: EMPTY
 184: LIST
 185: LIST
 186: LIST
 187: PUSH
 188: LD_INT 2
 190: PPUSH
 191: CALL_OW 426
 195: ARRAY
 196: ST_TO_ADDR
// sib_bomb := GetMultiplayerSetting ( 3 ) - 1 ;
 197: LD_ADDR_EXP 4
 201: PUSH
 202: LD_INT 3
 204: PPUSH
 205: CALL_OW 426
 209: PUSH
 210: LD_INT 1
 212: MINUS
 213: ST_TO_ADDR
// end ; p1 := 0 ;
 214: LD_ADDR_EXP 7
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// p2 := 0 ;
 222: LD_ADDR_EXP 8
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// p3 := 0 ;
 230: LD_ADDR_EXP 9
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// p4 := 0 ;
 238: LD_ADDR_EXP 10
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// p5 := 0 ;
 246: LD_ADDR_EXP 11
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// veh_amount := 12 ;
 254: LD_ADDR_EXP 6
 258: PUSH
 259: LD_INT 12
 261: ST_TO_ADDR
// for i = 1 to 7 do
 262: LD_ADDR_VAR 0 3
 266: PUSH
 267: DOUBLE
 268: LD_INT 1
 270: DEC
 271: ST_TO_ADDR
 272: LD_INT 7
 274: PUSH
 275: FOR_TO
 276: IFFALSE 292
// ChangeSideFog ( i , 8 ) ;
 278: LD_VAR 0 3
 282: PPUSH
 283: LD_INT 8
 285: PPUSH
 286: CALL_OW 343
 290: GO 275
 292: POP
 293: POP
// end ; end_of_file
 294: LD_VAR 0 1
 298: RET
// export function PrepareUnits ; var i , side ; begin
 299: LD_INT 0
 301: PPUSH
 302: PPUSH
 303: PPUSH
// side := players ;
 304: LD_ADDR_VAR 0 3
 308: PUSH
 309: LD_EXP 3
 313: ST_TO_ADDR
// uc_nation := 1 ;
 314: LD_ADDR_OWVAR 21
 318: PUSH
 319: LD_INT 1
 321: ST_TO_ADDR
// for i = 1 to mechanics do
 322: LD_ADDR_VAR 0 2
 326: PUSH
 327: DOUBLE
 328: LD_INT 1
 330: DEC
 331: ST_TO_ADDR
 332: LD_EXP 1
 336: PUSH
 337: FOR_TO
 338: IFFALSE 402
// for side = 1 to players do
 340: LD_ADDR_VAR 0 3
 344: PUSH
 345: DOUBLE
 346: LD_INT 1
 348: DEC
 349: ST_TO_ADDR
 350: LD_EXP 3
 354: PUSH
 355: FOR_TO
 356: IFFALSE 398
// begin uc_side := side ;
 358: LD_ADDR_OWVAR 20
 362: PUSH
 363: LD_VAR 0 3
 367: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
 368: LD_INT 0
 370: PPUSH
 371: LD_INT 3
 373: PPUSH
 374: LD_INT 10
 376: PPUSH
 377: CALL_OW 380
// PlaceUnitArea ( CreateHuman , mech_area , false ) ;
 381: CALL_OW 44
 385: PPUSH
 386: LD_INT 6
 388: PPUSH
 389: LD_INT 0
 391: PPUSH
 392: CALL_OW 49
// end ;
 396: GO 355
 398: POP
 399: POP
 400: GO 337
 402: POP
 403: POP
// end ;
 404: LD_VAR 0 1
 408: RET
// function ToSpawn ( side ) ; begin
 409: LD_INT 0
 411: PPUSH
// uc_side := side ;
 412: LD_ADDR_OWVAR 20
 416: PUSH
 417: LD_VAR 0 1
 421: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
 422: LD_INT 0
 424: PPUSH
 425: LD_INT 3
 427: PPUSH
 428: LD_INT 10
 430: PPUSH
 431: CALL_OW 380
// PlaceUnitArea ( CreateHuman , mech_area , false ) ;
 435: CALL_OW 44
 439: PPUSH
 440: LD_INT 6
 442: PPUSH
 443: LD_INT 0
 445: PPUSH
 446: CALL_OW 49
// end ;
 450: LD_VAR 0 2
 454: RET
// every 0 0$13 trigger time do var i , filter ;
 455: LD_EXP 5
 459: IFFALSE 569
 461: GO 463
 463: DISABLE
 464: LD_INT 0
 466: PPUSH
 467: PPUSH
// begin enable ;
 468: ENABLE
// for i = 1 to players do
 469: LD_ADDR_VAR 0 1
 473: PUSH
 474: DOUBLE
 475: LD_INT 1
 477: DEC
 478: ST_TO_ADDR
 479: LD_EXP 3
 483: PUSH
 484: FOR_TO
 485: IFFALSE 567
// begin filter := FilterAllUnits ( [ [ [ f_side , i ] , [ f_class , 3 ] , [ f_type , unit_human ] ] ] ) ;
 487: LD_ADDR_VAR 0 2
 491: PUSH
 492: LD_INT 22
 494: PUSH
 495: LD_VAR 0 1
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: PUSH
 504: LD_INT 25
 506: PUSH
 507: LD_INT 3
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: PUSH
 514: LD_INT 21
 516: PUSH
 517: LD_INT 1
 519: PUSH
 520: EMPTY
 521: LIST
 522: LIST
 523: PUSH
 524: EMPTY
 525: LIST
 526: LIST
 527: LIST
 528: PUSH
 529: EMPTY
 530: LIST
 531: PPUSH
 532: CALL_OW 69
 536: ST_TO_ADDR
// if filter < mechanics then
 537: LD_VAR 0 2
 541: PUSH
 542: LD_EXP 1
 546: LESS
 547: IFFALSE 565
// begin Wait ( 0 0$03 ) ;
 549: LD_INT 105
 551: PPUSH
 552: CALL_OW 67
// ToSpawn ( i ) ;
 556: LD_VAR 0 1
 560: PPUSH
 561: CALL 409 0 1
// end ; end ;
 565: GO 484
 567: POP
 568: POP
// end ;
 569: PPOPN 2
 571: END
// every 0 0$01 trigger time do var i , filter , filter2 , vehicles ;
 572: LD_EXP 5
 576: IFFALSE 943
 578: GO 580
 580: DISABLE
 581: LD_INT 0
 583: PPUSH
 584: PPUSH
 585: PPUSH
 586: PPUSH
// begin enable ;
 587: ENABLE
// filter2 := FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_not , [ f_side , 0 ] ] , [ f_not , [ f_side , 1 ] ] ] ) ;
 588: LD_ADDR_VAR 0 3
 592: PUSH
 593: LD_INT 21
 595: PUSH
 596: LD_INT 2
 598: PUSH
 599: EMPTY
 600: LIST
 601: LIST
 602: PUSH
 603: LD_INT 3
 605: PUSH
 606: LD_INT 22
 608: PUSH
 609: LD_INT 0
 611: PUSH
 612: EMPTY
 613: LIST
 614: LIST
 615: PUSH
 616: EMPTY
 617: LIST
 618: LIST
 619: PUSH
 620: LD_INT 3
 622: PUSH
 623: LD_INT 22
 625: PUSH
 626: LD_INT 1
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: PUSH
 633: EMPTY
 634: LIST
 635: LIST
 636: PUSH
 637: EMPTY
 638: LIST
 639: LIST
 640: LIST
 641: PPUSH
 642: CALL_OW 69
 646: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_side , 1 ] ] ] ) ;
 647: LD_ADDR_VAR 0 2
 651: PUSH
 652: LD_INT 21
 654: PUSH
 655: LD_INT 1
 657: PUSH
 658: EMPTY
 659: LIST
 660: LIST
 661: PUSH
 662: LD_INT 3
 664: PUSH
 665: LD_INT 54
 667: PUSH
 668: EMPTY
 669: LIST
 670: PUSH
 671: EMPTY
 672: LIST
 673: LIST
 674: PUSH
 675: LD_INT 3
 677: PUSH
 678: LD_INT 22
 680: PUSH
 681: LD_INT 1
 683: PUSH
 684: EMPTY
 685: LIST
 686: LIST
 687: PUSH
 688: EMPTY
 689: LIST
 690: LIST
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: LIST
 696: PPUSH
 697: CALL_OW 69
 701: ST_TO_ADDR
// vehicles := FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 702: LD_ADDR_VAR 0 4
 706: PUSH
 707: LD_INT 21
 709: PUSH
 710: LD_INT 2
 712: PUSH
 713: EMPTY
 714: LIST
 715: LIST
 716: PUSH
 717: LD_INT 58
 719: PUSH
 720: EMPTY
 721: LIST
 722: PUSH
 723: EMPTY
 724: LIST
 725: LIST
 726: PPUSH
 727: CALL_OW 69
 731: ST_TO_ADDR
// if filter and vehicles then
 732: LD_VAR 0 2
 736: PUSH
 737: LD_VAR 0 4
 741: AND
 742: IFFALSE 879
// for i = 1 to filter do
 744: LD_ADDR_VAR 0 1
 748: PUSH
 749: DOUBLE
 750: LD_INT 1
 752: DEC
 753: ST_TO_ADDR
 754: LD_VAR 0 2
 758: PUSH
 759: FOR_TO
 760: IFFALSE 877
// if not HasTask ( filter [ i ] ) and IsOk ( filter [ i ] ) then
 762: LD_VAR 0 2
 766: PUSH
 767: LD_VAR 0 1
 771: ARRAY
 772: PPUSH
 773: CALL_OW 314
 777: NOT
 778: PUSH
 779: LD_VAR 0 2
 783: PUSH
 784: LD_VAR 0 1
 788: ARRAY
 789: PPUSH
 790: CALL_OW 302
 794: AND
 795: IFFALSE 875
// if GetDistUnits ( filter [ i ] , NearestUnitToUnit ( vehicles , filter [ i ] ) ) < 45 then
 797: LD_VAR 0 2
 801: PUSH
 802: LD_VAR 0 1
 806: ARRAY
 807: PPUSH
 808: LD_VAR 0 4
 812: PPUSH
 813: LD_VAR 0 2
 817: PUSH
 818: LD_VAR 0 1
 822: ARRAY
 823: PPUSH
 824: CALL_OW 74
 828: PPUSH
 829: CALL_OW 296
 833: PUSH
 834: LD_INT 45
 836: LESS
 837: IFFALSE 875
// ComEnterUnit ( filter [ i ] , NearestUnitToUnit ( vehicles , filter [ i ] ) ) ;
 839: LD_VAR 0 2
 843: PUSH
 844: LD_VAR 0 1
 848: ARRAY
 849: PPUSH
 850: LD_VAR 0 4
 854: PPUSH
 855: LD_VAR 0 2
 859: PUSH
 860: LD_VAR 0 1
 864: ARRAY
 865: PPUSH
 866: CALL_OW 74
 870: PPUSH
 871: CALL_OW 120
 875: GO 759
 877: POP
 878: POP
// if filter2 then
 879: LD_VAR 0 3
 883: IFFALSE 943
// for i = 1 to filter2 do
 885: LD_ADDR_VAR 0 1
 889: PUSH
 890: DOUBLE
 891: LD_INT 1
 893: DEC
 894: ST_TO_ADDR
 895: LD_VAR 0 3
 899: PUSH
 900: FOR_TO
 901: IFFALSE 941
// if not HasTask ( filter2 [ i ] ) then
 903: LD_VAR 0 3
 907: PUSH
 908: LD_VAR 0 1
 912: ARRAY
 913: PPUSH
 914: CALL_OW 314
 918: NOT
 919: IFFALSE 939
// ComMoveToArea ( filter2 [ i ] , exit_area ) ;
 921: LD_VAR 0 3
 925: PUSH
 926: LD_VAR 0 1
 930: ARRAY
 931: PPUSH
 932: LD_INT 4
 934: PPUSH
 935: CALL_OW 113
 939: GO 900
 941: POP
 942: POP
// end ; end_of_file
 943: PPOPN 4
 945: END
// export function SpawnCar ( chas , area ) ; var i , e , veh , ar_chassis , ru_chassis , us_chassis , ar_weapons , ru_weapons , us_weapons , chassis , engine , weapon ; begin
 946: LD_INT 0
 948: PPUSH
 949: PPUSH
 950: PPUSH
 951: PPUSH
 952: PPUSH
 953: PPUSH
 954: PPUSH
 955: PPUSH
 956: PPUSH
 957: PPUSH
 958: PPUSH
 959: PPUSH
 960: PPUSH
// uc_side := 0 ;
 961: LD_ADDR_OWVAR 20
 965: PUSH
 966: LD_INT 0
 968: ST_TO_ADDR
// uc_nation := Rand ( 1 , 3 ) ;
 969: LD_ADDR_OWVAR 21
 973: PUSH
 974: LD_INT 1
 976: PPUSH
 977: LD_INT 3
 979: PPUSH
 980: CALL_OW 12
 984: ST_TO_ADDR
// ar_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ;
 985: LD_ADDR_VAR 0 7
 989: PUSH
 990: LD_INT 11
 992: PUSH
 993: LD_INT 12
 995: PUSH
 996: LD_INT 13
 998: PUSH
 999: LD_INT 14
1001: PUSH
1002: EMPTY
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: ST_TO_ADDR
// ru_chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ;
1008: LD_ADDR_VAR 0 8
1012: PUSH
1013: LD_INT 21
1015: PUSH
1016: LD_INT 22
1018: PUSH
1019: LD_INT 23
1021: PUSH
1022: LD_INT 24
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: ST_TO_ADDR
// us_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ;
1031: LD_ADDR_VAR 0 9
1035: PUSH
1036: LD_INT 1
1038: PUSH
1039: LD_INT 2
1041: PUSH
1042: LD_INT 3
1044: PUSH
1045: LD_INT 4
1047: PUSH
1048: LD_INT 5
1050: PUSH
1051: EMPTY
1052: LIST
1053: LIST
1054: LIST
1055: LIST
1056: LIST
1057: ST_TO_ADDR
// if chas > 0 then
1058: LD_VAR 0 1
1062: PUSH
1063: LD_INT 0
1065: GREATER
1066: IFFALSE 1080
// vc_chassis := chas else
1068: LD_ADDR_OWVAR 37
1072: PUSH
1073: LD_VAR 0 1
1077: ST_TO_ADDR
1078: GO 1173
// begin case uc_nation of 1 :
1080: LD_OWVAR 21
1084: PUSH
1085: LD_INT 1
1087: DOUBLE
1088: EQUAL
1089: IFTRUE 1093
1091: GO 1106
1093: POP
// chassis := us_chassis ; 2 :
1094: LD_ADDR_VAR 0 13
1098: PUSH
1099: LD_VAR 0 9
1103: ST_TO_ADDR
1104: GO 1149
1106: LD_INT 2
1108: DOUBLE
1109: EQUAL
1110: IFTRUE 1114
1112: GO 1127
1114: POP
// chassis := ar_chassis ; 3 :
1115: LD_ADDR_VAR 0 13
1119: PUSH
1120: LD_VAR 0 7
1124: ST_TO_ADDR
1125: GO 1149
1127: LD_INT 3
1129: DOUBLE
1130: EQUAL
1131: IFTRUE 1135
1133: GO 1148
1135: POP
// chassis := ru_chassis ; end ;
1136: LD_ADDR_VAR 0 13
1140: PUSH
1141: LD_VAR 0 8
1145: ST_TO_ADDR
1146: GO 1149
1148: POP
// vc_chassis := chassis [ Rand ( 1 , chassis ) ] ;
1149: LD_ADDR_OWVAR 37
1153: PUSH
1154: LD_VAR 0 13
1158: PUSH
1159: LD_INT 1
1161: PPUSH
1162: LD_VAR 0 13
1166: PPUSH
1167: CALL_OW 12
1171: ARRAY
1172: ST_TO_ADDR
// end ; if vc_chassis in [ ar_hovercraft , ar_light_trike , us_light_wheeled ] then
1173: LD_OWVAR 37
1177: PUSH
1178: LD_INT 11
1180: PUSH
1181: LD_INT 12
1183: PUSH
1184: LD_INT 1
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: LIST
1191: IN
1192: IFFALSE 1212
// engine := Rand ( 1 , 2 ) else
1194: LD_ADDR_VAR 0 14
1198: PUSH
1199: LD_INT 1
1201: PPUSH
1202: LD_INT 2
1204: PPUSH
1205: CALL_OW 12
1209: ST_TO_ADDR
1210: GO 1324
// begin if not vc_chassis in [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , us_heavy_tracked , us_morphling ] then
1212: LD_OWVAR 37
1216: PUSH
1217: LD_INT 21
1219: PUSH
1220: LD_INT 22
1222: PUSH
1223: LD_INT 23
1225: PUSH
1226: LD_INT 24
1228: PUSH
1229: LD_INT 4
1231: PUSH
1232: LD_INT 5
1234: PUSH
1235: EMPTY
1236: LIST
1237: LIST
1238: LIST
1239: LIST
1240: LIST
1241: LIST
1242: IN
1243: NOT
1244: IFFALSE 1264
// engine := Rand ( 1 , 3 ) else
1246: LD_ADDR_VAR 0 14
1250: PUSH
1251: LD_INT 1
1253: PPUSH
1254: LD_INT 3
1256: PPUSH
1257: CALL_OW 12
1261: ST_TO_ADDR
1262: GO 1280
// e := Rand ( 1 , 2 ) ;
1264: LD_ADDR_VAR 0 5
1268: PUSH
1269: LD_INT 1
1271: PPUSH
1272: LD_INT 2
1274: PPUSH
1275: CALL_OW 12
1279: ST_TO_ADDR
// case e of 1 :
1280: LD_VAR 0 5
1284: PUSH
1285: LD_INT 1
1287: DOUBLE
1288: EQUAL
1289: IFTRUE 1293
1291: GO 1304
1293: POP
// engine := engine_combustion ; 2 :
1294: LD_ADDR_VAR 0 14
1298: PUSH
1299: LD_INT 1
1301: ST_TO_ADDR
1302: GO 1324
1304: LD_INT 2
1306: DOUBLE
1307: EQUAL
1308: IFTRUE 1312
1310: GO 1323
1312: POP
// engine := engine_siberite ; end ;
1313: LD_ADDR_VAR 0 14
1317: PUSH
1318: LD_INT 3
1320: ST_TO_ADDR
1321: GO 1324
1323: POP
// end ; vc_engine := engine ;
1324: LD_ADDR_OWVAR 39
1328: PUSH
1329: LD_VAR 0 14
1333: ST_TO_ADDR
// vc_control := control_manual ;
1334: LD_ADDR_OWVAR 38
1338: PUSH
1339: LD_INT 1
1341: ST_TO_ADDR
// ar_weapons := [ ar_multimissile_ballista , ar_double_machine_gun , ar_light_gun , ar_radar , ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb , ar_flame_thrower ] ;
1342: LD_ADDR_VAR 0 10
1346: PUSH
1347: LD_INT 22
1349: PUSH
1350: LD_INT 24
1352: PUSH
1353: LD_INT 23
1355: PUSH
1356: LD_INT 30
1358: PUSH
1359: LD_INT 25
1361: PUSH
1362: LD_INT 27
1364: PUSH
1365: LD_INT 28
1367: PUSH
1368: LD_INT 29
1370: PUSH
1371: LD_INT 26
1373: PUSH
1374: EMPTY
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: LIST
1382: LIST
1383: LIST
1384: ST_TO_ADDR
// ru_weapons := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , 98 , ru_rocket_launcher , ru_heavy_gun , ru_rocket , ru_bulldozer , ru_time_lapser ] ;
1385: LD_ADDR_VAR 0 11
1389: PUSH
1390: LD_INT 42
1392: PUSH
1393: LD_INT 43
1395: PUSH
1396: LD_INT 44
1398: PUSH
1399: LD_INT 98
1401: PUSH
1402: LD_INT 45
1404: PUSH
1405: LD_INT 46
1407: PUSH
1408: LD_INT 47
1410: PUSH
1411: LD_INT 53
1413: PUSH
1414: LD_INT 49
1416: PUSH
1417: EMPTY
1418: LIST
1419: LIST
1420: LIST
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: LIST
1427: ST_TO_ADDR
// us_weapons := [ us_machine_gun , us_light_gun , us_radar , us_gatling_gun , us_double_gun , us_rocket_launcher , us_laser , us_heavy_gun , us_bulldozer , us_double_laser ] ;
1428: LD_ADDR_VAR 0 12
1432: PUSH
1433: LD_INT 2
1435: PUSH
1436: LD_INT 3
1438: PUSH
1439: LD_INT 11
1441: PUSH
1442: LD_INT 4
1444: PUSH
1445: LD_INT 5
1447: PUSH
1448: LD_INT 7
1450: PUSH
1451: LD_INT 9
1453: PUSH
1454: LD_INT 6
1456: PUSH
1457: LD_INT 14
1459: PUSH
1460: LD_INT 10
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: LIST
1473: LIST
1474: ST_TO_ADDR
// if uc_nation = nation_arabian then
1475: LD_OWVAR 21
1479: PUSH
1480: LD_INT 2
1482: EQUAL
1483: IFFALSE 1550
// begin if vc_chassis in [ ar_hovercraft , ar_light_trike ] then
1485: LD_OWVAR 37
1489: PUSH
1490: LD_INT 11
1492: PUSH
1493: LD_INT 12
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: IN
1500: IFFALSE 1526
// weapon := ar_weapons [ Rand ( 1 , 3 ) ] else
1502: LD_ADDR_VAR 0 15
1506: PUSH
1507: LD_VAR 0 10
1511: PUSH
1512: LD_INT 1
1514: PPUSH
1515: LD_INT 3
1517: PPUSH
1518: CALL_OW 12
1522: ARRAY
1523: ST_TO_ADDR
1524: GO 1550
// weapon := ar_weapons [ Rand ( 1 , ar_weapons ) ] ;
1526: LD_ADDR_VAR 0 15
1530: PUSH
1531: LD_VAR 0 10
1535: PUSH
1536: LD_INT 1
1538: PPUSH
1539: LD_VAR 0 10
1543: PPUSH
1544: CALL_OW 12
1548: ARRAY
1549: ST_TO_ADDR
// end ; if uc_nation = nation_russian then
1550: LD_OWVAR 21
1554: PUSH
1555: LD_INT 3
1557: EQUAL
1558: IFFALSE 1625
// begin if vc_chassis in [ ru_medium_wheeled , ru_medium_tracked ] then
1560: LD_OWVAR 37
1564: PUSH
1565: LD_INT 21
1567: PUSH
1568: LD_INT 22
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: IN
1575: IFFALSE 1601
// weapon := ru_weapons [ Rand ( 1 , 5 ) ] else
1577: LD_ADDR_VAR 0 15
1581: PUSH
1582: LD_VAR 0 11
1586: PUSH
1587: LD_INT 1
1589: PPUSH
1590: LD_INT 5
1592: PPUSH
1593: CALL_OW 12
1597: ARRAY
1598: ST_TO_ADDR
1599: GO 1625
// weapon := ru_weapons [ Rand ( 1 , ru_weapons ) ] ;
1601: LD_ADDR_VAR 0 15
1605: PUSH
1606: LD_VAR 0 11
1610: PUSH
1611: LD_INT 1
1613: PPUSH
1614: LD_VAR 0 11
1618: PPUSH
1619: CALL_OW 12
1623: ARRAY
1624: ST_TO_ADDR
// end ; if uc_nation = nation_american then
1625: LD_OWVAR 21
1629: PUSH
1630: LD_INT 1
1632: EQUAL
1633: IFFALSE 1742
// begin if vc_chassis = us_light_wheeled then
1635: LD_OWVAR 37
1639: PUSH
1640: LD_INT 1
1642: EQUAL
1643: IFFALSE 1667
// weapon := us_weapons [ Rand ( 1 , 3 ) ] ;
1645: LD_ADDR_VAR 0 15
1649: PUSH
1650: LD_VAR 0 12
1654: PUSH
1655: LD_INT 1
1657: PPUSH
1658: LD_INT 3
1660: PPUSH
1661: CALL_OW 12
1665: ARRAY
1666: ST_TO_ADDR
// if vc_chassis in [ us_medium_tracked , us_medium_wheeled ] then
1667: LD_OWVAR 37
1671: PUSH
1672: LD_INT 3
1674: PUSH
1675: LD_INT 2
1677: PUSH
1678: EMPTY
1679: LIST
1680: LIST
1681: IN
1682: IFFALSE 1708
// weapon := us_weapons [ Rand ( 1 , 7 ) ] else
1684: LD_ADDR_VAR 0 15
1688: PUSH
1689: LD_VAR 0 12
1693: PUSH
1694: LD_INT 1
1696: PPUSH
1697: LD_INT 7
1699: PPUSH
1700: CALL_OW 12
1704: ARRAY
1705: ST_TO_ADDR
1706: GO 1742
// if vc_chassis <> us_light_wheeled then
1708: LD_OWVAR 37
1712: PUSH
1713: LD_INT 1
1715: NONEQUAL
1716: IFFALSE 1742
// weapon := us_weapons [ Rand ( 1 , us_weapons ) ] ;
1718: LD_ADDR_VAR 0 15
1722: PUSH
1723: LD_VAR 0 12
1727: PUSH
1728: LD_INT 1
1730: PPUSH
1731: LD_VAR 0 12
1735: PPUSH
1736: CALL_OW 12
1740: ARRAY
1741: ST_TO_ADDR
// end ; vc_weapon := weapon ;
1742: LD_ADDR_OWVAR 40
1746: PUSH
1747: LD_VAR 0 15
1751: ST_TO_ADDR
// veh := CreateVehicle ;
1752: LD_ADDR_VAR 0 6
1756: PUSH
1757: CALL_OW 45
1761: ST_TO_ADDR
// PlaceUnitArea ( veh , area , true ) ;
1762: LD_VAR 0 6
1766: PPUSH
1767: LD_VAR 0 2
1771: PPUSH
1772: LD_INT 1
1774: PPUSH
1775: CALL_OW 49
// end ;
1779: LD_VAR 0 3
1783: RET
// export function SpawnSibRocket ( area ) ; var veh , p ; begin
1784: LD_INT 0
1786: PPUSH
1787: PPUSH
1788: PPUSH
// uc_side := 0 ;
1789: LD_ADDR_OWVAR 20
1793: PUSH
1794: LD_INT 0
1796: ST_TO_ADDR
// p := Rand ( 1 , 2 ) ;
1797: LD_ADDR_VAR 0 4
1801: PUSH
1802: LD_INT 1
1804: PPUSH
1805: LD_INT 2
1807: PPUSH
1808: CALL_OW 12
1812: ST_TO_ADDR
// case p of 1 :
1813: LD_VAR 0 4
1817: PUSH
1818: LD_INT 1
1820: DOUBLE
1821: EQUAL
1822: IFTRUE 1826
1824: GO 1869
1826: POP
// begin uc_nation := nation_american ;
1827: LD_ADDR_OWVAR 21
1831: PUSH
1832: LD_INT 1
1834: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
1835: LD_ADDR_OWVAR 37
1839: PUSH
1840: LD_INT 4
1842: ST_TO_ADDR
// vc_engine := engine_siberite ;
1843: LD_ADDR_OWVAR 39
1847: PUSH
1848: LD_INT 3
1850: ST_TO_ADDR
// vc_control := control_manual ;
1851: LD_ADDR_OWVAR 38
1855: PUSH
1856: LD_INT 1
1858: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
1859: LD_ADDR_OWVAR 40
1863: PUSH
1864: LD_INT 8
1866: ST_TO_ADDR
// end ; 2 :
1867: GO 1921
1869: LD_INT 2
1871: DOUBLE
1872: EQUAL
1873: IFTRUE 1877
1875: GO 1920
1877: POP
// begin uc_nation := nation_russian ;
1878: LD_ADDR_OWVAR 21
1882: PUSH
1883: LD_INT 3
1885: ST_TO_ADDR
// vc_chassis := ru_heavy_tracked ;
1886: LD_ADDR_OWVAR 37
1890: PUSH
1891: LD_INT 24
1893: ST_TO_ADDR
// vc_engine := engine_siberite ;
1894: LD_ADDR_OWVAR 39
1898: PUSH
1899: LD_INT 3
1901: ST_TO_ADDR
// vc_control := control_manual ;
1902: LD_ADDR_OWVAR 38
1906: PUSH
1907: LD_INT 1
1909: ST_TO_ADDR
// vc_weapon := ru_siberium_rocket ;
1910: LD_ADDR_OWVAR 40
1914: PUSH
1915: LD_INT 48
1917: ST_TO_ADDR
// end ; end ;
1918: GO 1921
1920: POP
// veh := CreateVehicle ;
1921: LD_ADDR_VAR 0 3
1925: PUSH
1926: CALL_OW 45
1930: ST_TO_ADDR
// PlaceUnitArea ( veh , area , true ) ;
1931: LD_VAR 0 3
1935: PPUSH
1936: LD_VAR 0 1
1940: PPUSH
1941: LD_INT 1
1943: PPUSH
1944: CALL_OW 49
// end ;
1948: LD_VAR 0 2
1952: RET
// export function ScoreBoard ( veh ) ; var points ; begin
1953: LD_INT 0
1955: PPUSH
1956: PPUSH
// points := 0 ;
1957: LD_ADDR_VAR 0 3
1961: PUSH
1962: LD_INT 0
1964: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_light_trike , us_light_wheeled ] then
1965: LD_VAR 0 1
1969: PPUSH
1970: CALL_OW 265
1974: PUSH
1975: LD_INT 12
1977: PUSH
1978: LD_INT 1
1980: PUSH
1981: EMPTY
1982: LIST
1983: LIST
1984: IN
1985: IFFALSE 2001
// points := points + 10 ;
1987: LD_ADDR_VAR 0 3
1991: PUSH
1992: LD_VAR 0 3
1996: PUSH
1997: LD_INT 10
1999: PLUS
2000: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_medium_trike , ru_medium_wheeled , us_medium_wheeled ] then
2001: LD_VAR 0 1
2005: PPUSH
2006: CALL_OW 265
2010: PUSH
2011: LD_INT 13
2013: PUSH
2014: LD_INT 21
2016: PUSH
2017: LD_INT 2
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: LIST
2024: IN
2025: IFFALSE 2041
// points := points + 15 ;
2027: LD_ADDR_VAR 0 3
2031: PUSH
2032: LD_VAR 0 3
2036: PUSH
2037: LD_INT 15
2039: PLUS
2040: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_half_tracked , ru_medium_tracked , us_medium_tracked ] then
2041: LD_VAR 0 1
2045: PPUSH
2046: CALL_OW 265
2050: PUSH
2051: LD_INT 14
2053: PUSH
2054: LD_INT 22
2056: PUSH
2057: LD_INT 3
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: LIST
2064: IN
2065: IFFALSE 2081
// points := points + 20 ;
2067: LD_ADDR_VAR 0 3
2071: PUSH
2072: LD_VAR 0 3
2076: PUSH
2077: LD_INT 20
2079: PLUS
2080: ST_TO_ADDR
// if GetChassis ( veh ) in [ ru_heavy_wheeled , ru_heavy_tracked , us_heavy_tracked ] then
2081: LD_VAR 0 1
2085: PPUSH
2086: CALL_OW 265
2090: PUSH
2091: LD_INT 23
2093: PUSH
2094: LD_INT 24
2096: PUSH
2097: LD_INT 4
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: LIST
2104: IN
2105: IFFALSE 2121
// points := points + 25 ;
2107: LD_ADDR_VAR 0 3
2111: PUSH
2112: LD_VAR 0 3
2116: PUSH
2117: LD_INT 25
2119: PLUS
2120: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_hovercraft , us_morphling ] then
2121: LD_VAR 0 1
2125: PPUSH
2126: CALL_OW 265
2130: PUSH
2131: LD_INT 11
2133: PUSH
2134: LD_INT 5
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: IN
2141: IFFALSE 2157
// points := points + 30 ;
2143: LD_ADDR_VAR 0 3
2147: PUSH
2148: LD_VAR 0 3
2152: PUSH
2153: LD_INT 30
2155: PLUS
2156: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_combustion ] then
2157: LD_VAR 0 1
2161: PPUSH
2162: CALL_OW 262
2166: PUSH
2167: LD_INT 1
2169: PUSH
2170: EMPTY
2171: LIST
2172: EQUAL
2173: IFFALSE 2189
// points := points + 5 ;
2175: LD_ADDR_VAR 0 3
2179: PUSH
2180: LD_VAR 0 3
2184: PUSH
2185: LD_INT 5
2187: PLUS
2188: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_solar ] then
2189: LD_VAR 0 1
2193: PPUSH
2194: CALL_OW 262
2198: PUSH
2199: LD_INT 2
2201: PUSH
2202: EMPTY
2203: LIST
2204: EQUAL
2205: IFFALSE 2221
// points := points + 15 ;
2207: LD_ADDR_VAR 0 3
2211: PUSH
2212: LD_VAR 0 3
2216: PUSH
2217: LD_INT 15
2219: PLUS
2220: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_siberite ] then
2221: LD_VAR 0 1
2225: PPUSH
2226: CALL_OW 262
2230: PUSH
2231: LD_INT 3
2233: PUSH
2234: EMPTY
2235: LIST
2236: EQUAL
2237: IFFALSE 2253
// points := points + 25 ;
2239: LD_ADDR_VAR 0 3
2243: PUSH
2244: LD_VAR 0 3
2248: PUSH
2249: LD_INT 25
2251: PLUS
2252: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_multimissile_ballista , ar_double_machine_gun , ar_light_gun , ru_heavy_machine_gun , us_machine_gun , us_light_gun ] then
2253: LD_VAR 0 1
2257: PPUSH
2258: CALL_OW 264
2262: PUSH
2263: LD_INT 22
2265: PUSH
2266: LD_INT 24
2268: PUSH
2269: LD_INT 23
2271: PUSH
2272: LD_INT 42
2274: PUSH
2275: LD_INT 2
2277: PUSH
2278: LD_INT 3
2280: PUSH
2281: EMPTY
2282: LIST
2283: LIST
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: IN
2289: IFFALSE 2305
// points := points + 5 ;
2291: LD_ADDR_VAR 0 3
2295: PUSH
2296: LD_VAR 0 3
2300: PUSH
2301: LD_INT 5
2303: PLUS
2304: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_gatling_gun , ar_gun , ru_gatling_gun , ru_gun , us_gatling_gun , us_double_gun ] then
2305: LD_VAR 0 1
2309: PPUSH
2310: CALL_OW 264
2314: PUSH
2315: LD_INT 25
2317: PUSH
2318: LD_INT 27
2320: PUSH
2321: LD_INT 43
2323: PUSH
2324: LD_INT 44
2326: PUSH
2327: LD_INT 4
2329: PUSH
2330: LD_INT 5
2332: PUSH
2333: EMPTY
2334: LIST
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: LIST
2340: IN
2341: IFFALSE 2357
// points := points + 10 ;
2343: LD_ADDR_VAR 0 3
2347: PUSH
2348: LD_VAR 0 3
2352: PUSH
2353: LD_INT 10
2355: PLUS
2356: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher ] then
2357: LD_VAR 0 1
2361: PPUSH
2362: CALL_OW 264
2366: PUSH
2367: LD_INT 28
2369: PUSH
2370: LD_INT 45
2372: PUSH
2373: LD_INT 7
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: LIST
2380: IN
2381: IFFALSE 2397
// points := points + 20 ;
2383: LD_ADDR_VAR 0 3
2387: PUSH
2388: LD_VAR 0 3
2392: PUSH
2393: LD_INT 20
2395: PLUS
2396: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ru_heavy_gun , us_heavy_gun ] then
2397: LD_VAR 0 1
2401: PPUSH
2402: CALL_OW 264
2406: PUSH
2407: LD_INT 46
2409: PUSH
2410: LD_INT 6
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: IN
2417: IFFALSE 2433
// points := points + 25 ;
2419: LD_ADDR_VAR 0 3
2423: PUSH
2424: LD_VAR 0 3
2428: PUSH
2429: LD_INT 25
2431: PLUS
2432: ST_TO_ADDR
// if GetWeapon ( veh ) in [ us_laser , us_radar , ar_radar ] then
2433: LD_VAR 0 1
2437: PPUSH
2438: CALL_OW 264
2442: PUSH
2443: LD_INT 9
2445: PUSH
2446: LD_INT 11
2448: PUSH
2449: LD_INT 30
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: LIST
2456: IN
2457: IFFALSE 2473
// points := points + 30 ;
2459: LD_ADDR_VAR 0 3
2463: PUSH
2464: LD_VAR 0 3
2468: PUSH
2469: LD_INT 30
2471: PLUS
2472: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_selfpropelled_bomb , ru_time_lapser , ru_rocket , us_double_laser ] then
2473: LD_VAR 0 1
2477: PPUSH
2478: CALL_OW 264
2482: PUSH
2483: LD_INT 29
2485: PUSH
2486: LD_INT 49
2488: PUSH
2489: LD_INT 47
2491: PUSH
2492: LD_INT 10
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: LIST
2499: LIST
2500: IN
2501: IFFALSE 2517
// points := points + 50 ;
2503: LD_ADDR_VAR 0 3
2507: PUSH
2508: LD_VAR 0 3
2512: PUSH
2513: LD_INT 50
2515: PLUS
2516: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ru_siberium_rocket , us_siberium_rocket ] then
2517: LD_VAR 0 1
2521: PPUSH
2522: CALL_OW 264
2526: PUSH
2527: LD_INT 48
2529: PUSH
2530: LD_INT 8
2532: PUSH
2533: EMPTY
2534: LIST
2535: LIST
2536: IN
2537: IFFALSE 2553
// points := points + 100 ;
2539: LD_ADDR_VAR 0 3
2543: PUSH
2544: LD_VAR 0 3
2548: PUSH
2549: LD_INT 100
2551: PLUS
2552: ST_TO_ADDR
// result := points ;
2553: LD_ADDR_VAR 0 2
2557: PUSH
2558: LD_VAR 0 3
2562: ST_TO_ADDR
// end ; end_of_file
2563: LD_VAR 0 2
2567: RET
// every 0 0$01 trigger time do var filter , i , side , driver , un ;
2568: LD_EXP 5
2572: IFFALSE 3217
2574: GO 2576
2576: DISABLE
2577: LD_INT 0
2579: PPUSH
2580: PPUSH
2581: PPUSH
2582: PPUSH
2583: PPUSH
// begin enable ;
2584: ENABLE
// if tick < 36 then
2585: LD_OWVAR 1
2589: PUSH
2590: LD_INT 36
2592: LESS
2593: IFFALSE 2605
// SetAreaMapShow ( exit_area , 1 ) ;
2595: LD_INT 4
2597: PPUSH
2598: LD_INT 1
2600: PPUSH
2601: CALL_OW 424
// time := time - 0 0$01 ;
2605: LD_ADDR_EXP 5
2609: PUSH
2610: LD_EXP 5
2614: PUSH
2615: LD_INT 35
2617: MINUS
2618: ST_TO_ADDR
// if time = 0 0$00 then
2619: LD_EXP 5
2623: PUSH
2624: LD_INT 0
2626: EQUAL
2627: IFFALSE 2690
// if p1 > p2 and p1 > p3 and p1 > p4 and p1 > p5 then
2629: LD_EXP 7
2633: PUSH
2634: LD_EXP 8
2638: GREATER
2639: PUSH
2640: LD_EXP 7
2644: PUSH
2645: LD_EXP 9
2649: GREATER
2650: AND
2651: PUSH
2652: LD_EXP 7
2656: PUSH
2657: LD_EXP 10
2661: GREATER
2662: AND
2663: PUSH
2664: LD_EXP 7
2668: PUSH
2669: LD_EXP 11
2673: GREATER
2674: AND
2675: IFFALSE 2683
// YouWin else
2677: CALL_OW 103
2681: GO 2690
// YouLost (  ) ;
2683: LD_STRING 
2685: PPUSH
2686: CALL_OW 104
// filter := FilterUnitsInArea ( exit_area , [ f_type , unit_vehicle ] ) ;
2690: LD_ADDR_VAR 0 1
2694: PUSH
2695: LD_INT 4
2697: PPUSH
2698: LD_INT 21
2700: PUSH
2701: LD_INT 2
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: PPUSH
2708: CALL_OW 70
2712: ST_TO_ADDR
// if filter then
2713: LD_VAR 0 1
2717: IFFALSE 3007
// for i = 1 to filter do
2719: LD_ADDR_VAR 0 2
2723: PUSH
2724: DOUBLE
2725: LD_INT 1
2727: DEC
2728: ST_TO_ADDR
2729: LD_VAR 0 1
2733: PUSH
2734: FOR_TO
2735: IFFALSE 3005
// begin side := GetSide ( filter [ i ] ) ;
2737: LD_ADDR_VAR 0 3
2741: PUSH
2742: LD_VAR 0 1
2746: PUSH
2747: LD_VAR 0 2
2751: ARRAY
2752: PPUSH
2753: CALL_OW 255
2757: ST_TO_ADDR
// driver := IsDrivenBy ( filter [ i ] ) ;
2758: LD_ADDR_VAR 0 4
2762: PUSH
2763: LD_VAR 0 1
2767: PUSH
2768: LD_VAR 0 2
2772: ARRAY
2773: PPUSH
2774: CALL_OW 311
2778: ST_TO_ADDR
// un := filter [ i ] ;
2779: LD_ADDR_VAR 0 5
2783: PUSH
2784: LD_VAR 0 1
2788: PUSH
2789: LD_VAR 0 2
2793: ARRAY
2794: ST_TO_ADDR
// if IsInUnit ( driver ) then
2795: LD_VAR 0 4
2799: PPUSH
2800: CALL_OW 310
2804: IFFALSE 2815
// ComExitVehicle ( driver ) ;
2806: LD_VAR 0 4
2810: PPUSH
2811: CALL_OW 121
// Wait ( 0 0$0.3 ) ;
2815: LD_INT 10
2817: PPUSH
2818: CALL_OW 67
// RemoveUnit ( filter [ i ] ) ;
2822: LD_VAR 0 1
2826: PUSH
2827: LD_VAR 0 2
2831: ARRAY
2832: PPUSH
2833: CALL_OW 64
// case side of 1 :
2837: LD_VAR 0 3
2841: PUSH
2842: LD_INT 1
2844: DOUBLE
2845: EQUAL
2846: IFTRUE 2850
2848: GO 2874
2850: POP
// p1 := p1 + ScoreBoard ( un ) ; 2 :
2851: LD_ADDR_EXP 7
2855: PUSH
2856: LD_EXP 7
2860: PUSH
2861: LD_VAR 0 5
2865: PPUSH
2866: CALL 1953 0 1
2870: PLUS
2871: ST_TO_ADDR
2872: GO 3003
2874: LD_INT 2
2876: DOUBLE
2877: EQUAL
2878: IFTRUE 2882
2880: GO 2906
2882: POP
// p2 := p2 + ScoreBoard ( un ) ; 3 :
2883: LD_ADDR_EXP 8
2887: PUSH
2888: LD_EXP 8
2892: PUSH
2893: LD_VAR 0 5
2897: PPUSH
2898: CALL 1953 0 1
2902: PLUS
2903: ST_TO_ADDR
2904: GO 3003
2906: LD_INT 3
2908: DOUBLE
2909: EQUAL
2910: IFTRUE 2914
2912: GO 2938
2914: POP
// p3 := p3 + ScoreBoard ( un ) ; 4 :
2915: LD_ADDR_EXP 9
2919: PUSH
2920: LD_EXP 9
2924: PUSH
2925: LD_VAR 0 5
2929: PPUSH
2930: CALL 1953 0 1
2934: PLUS
2935: ST_TO_ADDR
2936: GO 3003
2938: LD_INT 4
2940: DOUBLE
2941: EQUAL
2942: IFTRUE 2946
2944: GO 2970
2946: POP
// p4 := p4 + ScoreBoard ( un ) ; 5 :
2947: LD_ADDR_EXP 10
2951: PUSH
2952: LD_EXP 10
2956: PUSH
2957: LD_VAR 0 5
2961: PPUSH
2962: CALL 1953 0 1
2966: PLUS
2967: ST_TO_ADDR
2968: GO 3003
2970: LD_INT 5
2972: DOUBLE
2973: EQUAL
2974: IFTRUE 2978
2976: GO 3002
2978: POP
// p5 := p5 + ScoreBoard ( un ) ; end ;
2979: LD_ADDR_EXP 11
2983: PUSH
2984: LD_EXP 11
2988: PUSH
2989: LD_VAR 0 5
2993: PPUSH
2994: CALL 1953 0 1
2998: PLUS
2999: ST_TO_ADDR
3000: GO 3003
3002: POP
// end ;
3003: GO 2734
3005: POP
3006: POP
// case players of 3 :
3007: LD_EXP 3
3011: PUSH
3012: LD_INT 3
3014: DOUBLE
3015: EQUAL
3016: IFTRUE 3020
3018: GO 3070
3020: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 ] ;
3021: LD_ADDR_OWVAR 47
3025: PUSH
3026: LD_STRING #tick
3028: PUSH
3029: LD_EXP 5
3033: PUSH
3034: LD_STRING #player1
3036: PUSH
3037: LD_EXP 7
3041: PUSH
3042: LD_STRING #player2
3044: PUSH
3045: LD_EXP 8
3049: PUSH
3050: LD_STRING #player3
3052: PUSH
3053: LD_EXP 9
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: LIST
3064: LIST
3065: LIST
3066: LIST
3067: ST_TO_ADDR
// end ; 4 :
3068: GO 3217
3070: LD_INT 4
3072: DOUBLE
3073: EQUAL
3074: IFTRUE 3078
3076: GO 3138
3078: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 , #player4 , p4 ] ;
3079: LD_ADDR_OWVAR 47
3083: PUSH
3084: LD_STRING #tick
3086: PUSH
3087: LD_EXP 5
3091: PUSH
3092: LD_STRING #player1
3094: PUSH
3095: LD_EXP 7
3099: PUSH
3100: LD_STRING #player2
3102: PUSH
3103: LD_EXP 8
3107: PUSH
3108: LD_STRING #player3
3110: PUSH
3111: LD_EXP 9
3115: PUSH
3116: LD_STRING #player4
3118: PUSH
3119: LD_EXP 10
3123: PUSH
3124: EMPTY
3125: LIST
3126: LIST
3127: LIST
3128: LIST
3129: LIST
3130: LIST
3131: LIST
3132: LIST
3133: LIST
3134: LIST
3135: ST_TO_ADDR
// end ; 5 :
3136: GO 3217
3138: LD_INT 5
3140: DOUBLE
3141: EQUAL
3142: IFTRUE 3146
3144: GO 3216
3146: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 , #player4 , p4 , #player5 , p5 ] ;
3147: LD_ADDR_OWVAR 47
3151: PUSH
3152: LD_STRING #tick
3154: PUSH
3155: LD_EXP 5
3159: PUSH
3160: LD_STRING #player1
3162: PUSH
3163: LD_EXP 7
3167: PUSH
3168: LD_STRING #player2
3170: PUSH
3171: LD_EXP 8
3175: PUSH
3176: LD_STRING #player3
3178: PUSH
3179: LD_EXP 9
3183: PUSH
3184: LD_STRING #player4
3186: PUSH
3187: LD_EXP 10
3191: PUSH
3192: LD_STRING #player5
3194: PUSH
3195: LD_EXP 11
3199: PUSH
3200: EMPTY
3201: LIST
3202: LIST
3203: LIST
3204: LIST
3205: LIST
3206: LIST
3207: LIST
3208: LIST
3209: LIST
3210: LIST
3211: LIST
3212: LIST
3213: ST_TO_ADDR
// end ; end ;
3214: GO 3217
3216: POP
// end ;
3217: PPOPN 5
3219: END
// every 0 0$05 trigger time do var chance , p ;
3220: LD_EXP 5
3224: IFFALSE 3371
3226: GO 3228
3228: DISABLE
3229: LD_INT 0
3231: PPUSH
3232: PPUSH
// begin enable ;
3233: ENABLE
// Wait ( Rand ( 0 0$01 , 0 0$06 ) ) ;
3234: LD_INT 35
3236: PPUSH
3237: LD_INT 210
3239: PPUSH
3240: CALL_OW 12
3244: PPUSH
3245: CALL_OW 67
// if FilterAllUnits ( [ f_type , unit_vehicle ] ) < veh_amount then
3249: LD_INT 21
3251: PUSH
3252: LD_INT 2
3254: PUSH
3255: EMPTY
3256: LIST
3257: LIST
3258: PPUSH
3259: CALL_OW 69
3263: PUSH
3264: LD_EXP 6
3268: LESS
3269: IFFALSE 3371
// begin SpawnCar ( false , veh_spawn ) ;
3271: LD_INT 0
3273: PPUSH
3274: LD_INT 5
3276: PPUSH
3277: CALL 946 0 2
// if sib_bomb and FilterAllUnits ( [ f_or , [ [ f_weapon , us_siberium_rocket ] , [ f_weapon , ru_siberium_rocket ] ] ] ) = 0 then
3281: LD_EXP 4
3285: PUSH
3286: LD_INT 2
3288: PUSH
3289: LD_INT 34
3291: PUSH
3292: LD_INT 8
3294: PUSH
3295: EMPTY
3296: LIST
3297: LIST
3298: PUSH
3299: LD_INT 34
3301: PUSH
3302: LD_INT 48
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: PUSH
3309: EMPTY
3310: LIST
3311: LIST
3312: PUSH
3313: EMPTY
3314: LIST
3315: LIST
3316: PPUSH
3317: CALL_OW 69
3321: PUSH
3322: LD_INT 0
3324: EQUAL
3325: AND
3326: IFFALSE 3371
// begin chance := 23 ;
3328: LD_ADDR_VAR 0 1
3332: PUSH
3333: LD_INT 23
3335: ST_TO_ADDR
// p := Rand ( 0 , 100 ) ;
3336: LD_ADDR_VAR 0 2
3340: PUSH
3341: LD_INT 0
3343: PPUSH
3344: LD_INT 100
3346: PPUSH
3347: CALL_OW 12
3351: ST_TO_ADDR
// if p < chance then
3352: LD_VAR 0 2
3356: PUSH
3357: LD_VAR 0 1
3361: LESS
3362: IFFALSE 3371
// SpawnSibRocket ( veh_spawn ) ;
3364: LD_INT 5
3366: PPUSH
3367: CALL 1784 0 1
// end ; end ; end ; end_of_file
3371: PPOPN 2
3373: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
3374: LD_INT 0
3376: PPUSH
3377: PPUSH
3378: PPUSH
3379: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
3380: LD_VAR 0 1
3384: PPUSH
3385: CALL_OW 264
3389: PUSH
3390: LD_INT 91
3392: EQUAL
3393: IFFALSE 3465
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
3395: LD_INT 68
3397: PPUSH
3398: LD_VAR 0 1
3402: PPUSH
3403: CALL_OW 255
3407: PPUSH
3408: CALL_OW 321
3412: PUSH
3413: LD_INT 2
3415: EQUAL
3416: IFFALSE 3428
// eff := 70 else
3418: LD_ADDR_VAR 0 4
3422: PUSH
3423: LD_INT 70
3425: ST_TO_ADDR
3426: GO 3436
// eff := 30 ;
3428: LD_ADDR_VAR 0 4
3432: PUSH
3433: LD_INT 30
3435: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
3436: LD_VAR 0 1
3440: PPUSH
3441: CALL_OW 250
3445: PPUSH
3446: LD_VAR 0 1
3450: PPUSH
3451: CALL_OW 251
3455: PPUSH
3456: LD_VAR 0 4
3460: PPUSH
3461: CALL_OW 495
// end ; end ;
3465: LD_VAR 0 2
3469: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
3470: LD_INT 0
3472: PPUSH
// end ;
3473: LD_VAR 0 4
3477: RET
// export function SOS_Command ( cmd ) ; begin
3478: LD_INT 0
3480: PPUSH
// end ;
3481: LD_VAR 0 2
3485: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
3486: LD_INT 0
3488: PPUSH
// end ;
3489: LD_VAR 0 6
3493: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
3494: LD_INT 0
3496: PPUSH
3497: PPUSH
// if not vehicle or not factory then
3498: LD_VAR 0 1
3502: NOT
3503: PUSH
3504: LD_VAR 0 2
3508: NOT
3509: OR
3510: IFFALSE 3514
// exit ;
3512: GO 3745
// if factoryWaypoints >= factory then
3514: LD_EXP 80
3518: PUSH
3519: LD_VAR 0 2
3523: GREATEREQUAL
3524: IFFALSE 3745
// if factoryWaypoints [ factory ] then
3526: LD_EXP 80
3530: PUSH
3531: LD_VAR 0 2
3535: ARRAY
3536: IFFALSE 3745
// begin if GetControl ( vehicle ) = control_manual then
3538: LD_VAR 0 1
3542: PPUSH
3543: CALL_OW 263
3547: PUSH
3548: LD_INT 1
3550: EQUAL
3551: IFFALSE 3632
// begin driver := IsDrivenBy ( vehicle ) ;
3553: LD_ADDR_VAR 0 4
3557: PUSH
3558: LD_VAR 0 1
3562: PPUSH
3563: CALL_OW 311
3567: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
3568: LD_VAR 0 4
3572: PPUSH
3573: LD_EXP 80
3577: PUSH
3578: LD_VAR 0 2
3582: ARRAY
3583: PUSH
3584: LD_INT 3
3586: ARRAY
3587: PPUSH
3588: LD_EXP 80
3592: PUSH
3593: LD_VAR 0 2
3597: ARRAY
3598: PUSH
3599: LD_INT 4
3601: ARRAY
3602: PPUSH
3603: CALL_OW 171
// AddComExitVehicle ( driver ) ;
3607: LD_VAR 0 4
3611: PPUSH
3612: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
3616: LD_VAR 0 4
3620: PPUSH
3621: LD_VAR 0 2
3625: PPUSH
3626: CALL_OW 180
// end else
3630: GO 3745
// if GetControl ( vehicle ) = control_remote then
3632: LD_VAR 0 1
3636: PPUSH
3637: CALL_OW 263
3641: PUSH
3642: LD_INT 2
3644: EQUAL
3645: IFFALSE 3706
// begin wait ( 0 0$2 ) ;
3647: LD_INT 70
3649: PPUSH
3650: CALL_OW 67
// if Connect ( vehicle ) then
3654: LD_VAR 0 1
3658: PPUSH
3659: CALL 31418 0 1
3663: IFFALSE 3704
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
3665: LD_VAR 0 1
3669: PPUSH
3670: LD_EXP 80
3674: PUSH
3675: LD_VAR 0 2
3679: ARRAY
3680: PUSH
3681: LD_INT 3
3683: ARRAY
3684: PPUSH
3685: LD_EXP 80
3689: PUSH
3690: LD_VAR 0 2
3694: ARRAY
3695: PUSH
3696: LD_INT 4
3698: ARRAY
3699: PPUSH
3700: CALL_OW 171
// end else
3704: GO 3745
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
3706: LD_VAR 0 1
3710: PPUSH
3711: LD_EXP 80
3715: PUSH
3716: LD_VAR 0 2
3720: ARRAY
3721: PUSH
3722: LD_INT 3
3724: ARRAY
3725: PPUSH
3726: LD_EXP 80
3730: PUSH
3731: LD_VAR 0 2
3735: ARRAY
3736: PUSH
3737: LD_INT 4
3739: ARRAY
3740: PPUSH
3741: CALL_OW 171
// end ; end ;
3745: LD_VAR 0 3
3749: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
3750: LD_INT 0
3752: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
3753: LD_VAR 0 1
3757: PUSH
3758: LD_INT 250
3760: EQUAL
3761: PUSH
3762: LD_VAR 0 2
3766: PPUSH
3767: CALL_OW 264
3771: PUSH
3772: LD_INT 81
3774: EQUAL
3775: AND
3776: IFFALSE 3797
// MinerPlaceMine ( unit , x , y ) ;
3778: LD_VAR 0 2
3782: PPUSH
3783: LD_VAR 0 4
3787: PPUSH
3788: LD_VAR 0 5
3792: PPUSH
3793: CALL 6182 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
3797: LD_VAR 0 1
3801: PUSH
3802: LD_INT 251
3804: EQUAL
3805: PUSH
3806: LD_VAR 0 2
3810: PPUSH
3811: CALL_OW 264
3815: PUSH
3816: LD_INT 81
3818: EQUAL
3819: AND
3820: IFFALSE 3841
// MinerDetonateMine ( unit , x , y ) ;
3822: LD_VAR 0 2
3826: PPUSH
3827: LD_VAR 0 4
3831: PPUSH
3832: LD_VAR 0 5
3836: PPUSH
3837: CALL 6457 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
3841: LD_VAR 0 1
3845: PUSH
3846: LD_INT 252
3848: EQUAL
3849: PUSH
3850: LD_VAR 0 2
3854: PPUSH
3855: CALL_OW 264
3859: PUSH
3860: LD_INT 81
3862: EQUAL
3863: AND
3864: IFFALSE 3885
// MinerCreateMinefield ( unit , x , y ) ;
3866: LD_VAR 0 2
3870: PPUSH
3871: LD_VAR 0 4
3875: PPUSH
3876: LD_VAR 0 5
3880: PPUSH
3881: CALL 6874 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
3885: LD_VAR 0 1
3889: PUSH
3890: LD_INT 253
3892: EQUAL
3893: PUSH
3894: LD_VAR 0 2
3898: PPUSH
3899: CALL_OW 257
3903: PUSH
3904: LD_INT 5
3906: EQUAL
3907: AND
3908: IFFALSE 3929
// ComBinocular ( unit , x , y ) ;
3910: LD_VAR 0 2
3914: PPUSH
3915: LD_VAR 0 4
3919: PPUSH
3920: LD_VAR 0 5
3924: PPUSH
3925: CALL 7243 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
3929: LD_VAR 0 1
3933: PUSH
3934: LD_INT 254
3936: EQUAL
3937: PUSH
3938: LD_VAR 0 2
3942: PPUSH
3943: CALL_OW 264
3947: PUSH
3948: LD_INT 99
3950: EQUAL
3951: AND
3952: PUSH
3953: LD_VAR 0 3
3957: PPUSH
3958: CALL_OW 263
3962: PUSH
3963: LD_INT 3
3965: EQUAL
3966: AND
3967: IFFALSE 3983
// HackDestroyVehicle ( unit , selectedUnit ) ;
3969: LD_VAR 0 2
3973: PPUSH
3974: LD_VAR 0 3
3978: PPUSH
3979: CALL 5546 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
3983: LD_VAR 0 1
3987: PUSH
3988: LD_INT 255
3990: EQUAL
3991: PUSH
3992: LD_VAR 0 2
3996: PPUSH
3997: CALL_OW 264
4001: PUSH
4002: LD_INT 14
4004: PUSH
4005: LD_INT 53
4007: PUSH
4008: EMPTY
4009: LIST
4010: LIST
4011: IN
4012: AND
4013: PUSH
4014: LD_VAR 0 4
4018: PPUSH
4019: LD_VAR 0 5
4023: PPUSH
4024: CALL_OW 488
4028: AND
4029: IFFALSE 4053
// CutTreeXYR ( unit , x , y , 12 ) ;
4031: LD_VAR 0 2
4035: PPUSH
4036: LD_VAR 0 4
4040: PPUSH
4041: LD_VAR 0 5
4045: PPUSH
4046: LD_INT 12
4048: PPUSH
4049: CALL 4116 0 4
// if cmd = 256 then
4053: LD_VAR 0 1
4057: PUSH
4058: LD_INT 256
4060: EQUAL
4061: IFFALSE 4082
// SetFactoryWaypoint ( unit , x , y ) ;
4063: LD_VAR 0 2
4067: PPUSH
4068: LD_VAR 0 4
4072: PPUSH
4073: LD_VAR 0 5
4077: PPUSH
4078: CALL 22001 0 3
// if cmd = 257 then
4082: LD_VAR 0 1
4086: PUSH
4087: LD_INT 257
4089: EQUAL
4090: IFFALSE 4111
// SetWarehouseGatheringPoint ( unit , x , y ) ;
4092: LD_VAR 0 2
4096: PPUSH
4097: LD_VAR 0 4
4101: PPUSH
4102: LD_VAR 0 5
4106: PPUSH
4107: CALL 22363 0 3
// end ;
4111: LD_VAR 0 6
4115: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
4116: LD_INT 0
4118: PPUSH
4119: PPUSH
4120: PPUSH
4121: PPUSH
4122: PPUSH
4123: PPUSH
4124: PPUSH
4125: PPUSH
4126: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
4127: LD_VAR 0 1
4131: NOT
4132: PUSH
4133: LD_VAR 0 2
4137: PPUSH
4138: LD_VAR 0 3
4142: PPUSH
4143: CALL_OW 488
4147: NOT
4148: OR
4149: PUSH
4150: LD_VAR 0 4
4154: NOT
4155: OR
4156: IFFALSE 4160
// exit ;
4158: GO 4500
// list := [ ] ;
4160: LD_ADDR_VAR 0 13
4164: PUSH
4165: EMPTY
4166: ST_TO_ADDR
// if x - r < 0 then
4167: LD_VAR 0 2
4171: PUSH
4172: LD_VAR 0 4
4176: MINUS
4177: PUSH
4178: LD_INT 0
4180: LESS
4181: IFFALSE 4193
// min_x := 0 else
4183: LD_ADDR_VAR 0 7
4187: PUSH
4188: LD_INT 0
4190: ST_TO_ADDR
4191: GO 4209
// min_x := x - r ;
4193: LD_ADDR_VAR 0 7
4197: PUSH
4198: LD_VAR 0 2
4202: PUSH
4203: LD_VAR 0 4
4207: MINUS
4208: ST_TO_ADDR
// if y - r < 0 then
4209: LD_VAR 0 3
4213: PUSH
4214: LD_VAR 0 4
4218: MINUS
4219: PUSH
4220: LD_INT 0
4222: LESS
4223: IFFALSE 4235
// min_y := 0 else
4225: LD_ADDR_VAR 0 8
4229: PUSH
4230: LD_INT 0
4232: ST_TO_ADDR
4233: GO 4251
// min_y := y - r ;
4235: LD_ADDR_VAR 0 8
4239: PUSH
4240: LD_VAR 0 3
4244: PUSH
4245: LD_VAR 0 4
4249: MINUS
4250: ST_TO_ADDR
// max_x := x + r ;
4251: LD_ADDR_VAR 0 9
4255: PUSH
4256: LD_VAR 0 2
4260: PUSH
4261: LD_VAR 0 4
4265: PLUS
4266: ST_TO_ADDR
// max_y := y + r ;
4267: LD_ADDR_VAR 0 10
4271: PUSH
4272: LD_VAR 0 3
4276: PUSH
4277: LD_VAR 0 4
4281: PLUS
4282: ST_TO_ADDR
// for _x = min_x to max_x do
4283: LD_ADDR_VAR 0 11
4287: PUSH
4288: DOUBLE
4289: LD_VAR 0 7
4293: DEC
4294: ST_TO_ADDR
4295: LD_VAR 0 9
4299: PUSH
4300: FOR_TO
4301: IFFALSE 4418
// for _y = min_y to max_y do
4303: LD_ADDR_VAR 0 12
4307: PUSH
4308: DOUBLE
4309: LD_VAR 0 8
4313: DEC
4314: ST_TO_ADDR
4315: LD_VAR 0 10
4319: PUSH
4320: FOR_TO
4321: IFFALSE 4414
// begin if not ValidHex ( _x , _y ) then
4323: LD_VAR 0 11
4327: PPUSH
4328: LD_VAR 0 12
4332: PPUSH
4333: CALL_OW 488
4337: NOT
4338: IFFALSE 4342
// continue ;
4340: GO 4320
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
4342: LD_VAR 0 11
4346: PPUSH
4347: LD_VAR 0 12
4351: PPUSH
4352: CALL_OW 351
4356: PUSH
4357: LD_VAR 0 11
4361: PPUSH
4362: LD_VAR 0 12
4366: PPUSH
4367: CALL_OW 554
4371: AND
4372: IFFALSE 4412
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
4374: LD_ADDR_VAR 0 13
4378: PUSH
4379: LD_VAR 0 13
4383: PPUSH
4384: LD_VAR 0 13
4388: PUSH
4389: LD_INT 1
4391: PLUS
4392: PPUSH
4393: LD_VAR 0 11
4397: PUSH
4398: LD_VAR 0 12
4402: PUSH
4403: EMPTY
4404: LIST
4405: LIST
4406: PPUSH
4407: CALL_OW 2
4411: ST_TO_ADDR
// end ;
4412: GO 4320
4414: POP
4415: POP
4416: GO 4300
4418: POP
4419: POP
// if not list then
4420: LD_VAR 0 13
4424: NOT
4425: IFFALSE 4429
// exit ;
4427: GO 4500
// for i in list do
4429: LD_ADDR_VAR 0 6
4433: PUSH
4434: LD_VAR 0 13
4438: PUSH
4439: FOR_IN
4440: IFFALSE 4498
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
4442: LD_VAR 0 1
4446: PPUSH
4447: LD_STRING M
4449: PUSH
4450: LD_VAR 0 6
4454: PUSH
4455: LD_INT 1
4457: ARRAY
4458: PUSH
4459: LD_VAR 0 6
4463: PUSH
4464: LD_INT 2
4466: ARRAY
4467: PUSH
4468: LD_INT 0
4470: PUSH
4471: LD_INT 0
4473: PUSH
4474: LD_INT 0
4476: PUSH
4477: LD_INT 0
4479: PUSH
4480: EMPTY
4481: LIST
4482: LIST
4483: LIST
4484: LIST
4485: LIST
4486: LIST
4487: LIST
4488: PUSH
4489: EMPTY
4490: LIST
4491: PPUSH
4492: CALL_OW 447
4496: GO 4439
4498: POP
4499: POP
// end ;
4500: LD_VAR 0 5
4504: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
4505: LD_EXP 12
4509: NOT
4510: IFFALSE 4560
4512: GO 4514
4514: DISABLE
// begin initHack := true ;
4515: LD_ADDR_EXP 12
4519: PUSH
4520: LD_INT 1
4522: ST_TO_ADDR
// hackTanks := [ ] ;
4523: LD_ADDR_EXP 13
4527: PUSH
4528: EMPTY
4529: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
4530: LD_ADDR_EXP 14
4534: PUSH
4535: EMPTY
4536: ST_TO_ADDR
// hackLimit := 3 ;
4537: LD_ADDR_EXP 15
4541: PUSH
4542: LD_INT 3
4544: ST_TO_ADDR
// hackDist := 12 ;
4545: LD_ADDR_EXP 16
4549: PUSH
4550: LD_INT 12
4552: ST_TO_ADDR
// hackCounter := [ ] ;
4553: LD_ADDR_EXP 17
4557: PUSH
4558: EMPTY
4559: ST_TO_ADDR
// end ;
4560: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
4561: LD_EXP 12
4565: PUSH
4566: LD_INT 34
4568: PUSH
4569: LD_INT 99
4571: PUSH
4572: EMPTY
4573: LIST
4574: LIST
4575: PPUSH
4576: CALL_OW 69
4580: AND
4581: IFFALSE 4834
4583: GO 4585
4585: DISABLE
4586: LD_INT 0
4588: PPUSH
4589: PPUSH
// begin enable ;
4590: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
4591: LD_ADDR_VAR 0 1
4595: PUSH
4596: LD_INT 34
4598: PUSH
4599: LD_INT 99
4601: PUSH
4602: EMPTY
4603: LIST
4604: LIST
4605: PPUSH
4606: CALL_OW 69
4610: PUSH
4611: FOR_IN
4612: IFFALSE 4832
// begin if not i in hackTanks then
4614: LD_VAR 0 1
4618: PUSH
4619: LD_EXP 13
4623: IN
4624: NOT
4625: IFFALSE 4708
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
4627: LD_ADDR_EXP 13
4631: PUSH
4632: LD_EXP 13
4636: PPUSH
4637: LD_EXP 13
4641: PUSH
4642: LD_INT 1
4644: PLUS
4645: PPUSH
4646: LD_VAR 0 1
4650: PPUSH
4651: CALL_OW 1
4655: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
4656: LD_ADDR_EXP 14
4660: PUSH
4661: LD_EXP 14
4665: PPUSH
4666: LD_EXP 14
4670: PUSH
4671: LD_INT 1
4673: PLUS
4674: PPUSH
4675: EMPTY
4676: PPUSH
4677: CALL_OW 1
4681: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
4682: LD_ADDR_EXP 17
4686: PUSH
4687: LD_EXP 17
4691: PPUSH
4692: LD_EXP 17
4696: PUSH
4697: LD_INT 1
4699: PLUS
4700: PPUSH
4701: EMPTY
4702: PPUSH
4703: CALL_OW 1
4707: ST_TO_ADDR
// end ; if not IsOk ( i ) then
4708: LD_VAR 0 1
4712: PPUSH
4713: CALL_OW 302
4717: NOT
4718: IFFALSE 4731
// begin HackUnlinkAll ( i ) ;
4720: LD_VAR 0 1
4724: PPUSH
4725: CALL 4837 0 1
// continue ;
4729: GO 4611
// end ; HackCheckCapturedStatus ( i ) ;
4731: LD_VAR 0 1
4735: PPUSH
4736: CALL 5280 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
4740: LD_ADDR_VAR 0 2
4744: PUSH
4745: LD_INT 81
4747: PUSH
4748: LD_VAR 0 1
4752: PPUSH
4753: CALL_OW 255
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: PUSH
4762: LD_INT 33
4764: PUSH
4765: LD_INT 3
4767: PUSH
4768: EMPTY
4769: LIST
4770: LIST
4771: PUSH
4772: LD_INT 91
4774: PUSH
4775: LD_VAR 0 1
4779: PUSH
4780: LD_EXP 16
4784: PUSH
4785: EMPTY
4786: LIST
4787: LIST
4788: LIST
4789: PUSH
4790: LD_INT 50
4792: PUSH
4793: EMPTY
4794: LIST
4795: PUSH
4796: EMPTY
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: PPUSH
4802: CALL_OW 69
4806: ST_TO_ADDR
// if not tmp then
4807: LD_VAR 0 2
4811: NOT
4812: IFFALSE 4816
// continue ;
4814: GO 4611
// HackLink ( i , tmp ) ;
4816: LD_VAR 0 1
4820: PPUSH
4821: LD_VAR 0 2
4825: PPUSH
4826: CALL 4973 0 2
// end ;
4830: GO 4611
4832: POP
4833: POP
// end ;
4834: PPOPN 2
4836: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
4837: LD_INT 0
4839: PPUSH
4840: PPUSH
4841: PPUSH
// if not hack in hackTanks then
4842: LD_VAR 0 1
4846: PUSH
4847: LD_EXP 13
4851: IN
4852: NOT
4853: IFFALSE 4857
// exit ;
4855: GO 4968
// index := GetElementIndex ( hackTanks , hack ) ;
4857: LD_ADDR_VAR 0 4
4861: PUSH
4862: LD_EXP 13
4866: PPUSH
4867: LD_VAR 0 1
4871: PPUSH
4872: CALL 28234 0 2
4876: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
4877: LD_EXP 14
4881: PUSH
4882: LD_VAR 0 4
4886: ARRAY
4887: IFFALSE 4968
// begin for i in hackTanksCaptured [ index ] do
4889: LD_ADDR_VAR 0 3
4893: PUSH
4894: LD_EXP 14
4898: PUSH
4899: LD_VAR 0 4
4903: ARRAY
4904: PUSH
4905: FOR_IN
4906: IFFALSE 4932
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
4908: LD_VAR 0 3
4912: PUSH
4913: LD_INT 1
4915: ARRAY
4916: PPUSH
4917: LD_VAR 0 3
4921: PUSH
4922: LD_INT 2
4924: ARRAY
4925: PPUSH
4926: CALL_OW 235
4930: GO 4905
4932: POP
4933: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
4934: LD_ADDR_EXP 14
4938: PUSH
4939: LD_EXP 14
4943: PPUSH
4944: LD_VAR 0 4
4948: PPUSH
4949: EMPTY
4950: PPUSH
4951: CALL_OW 1
4955: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
4956: LD_VAR 0 1
4960: PPUSH
4961: LD_INT 0
4963: PPUSH
4964: CALL_OW 505
// end ; end ;
4968: LD_VAR 0 2
4972: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
4973: LD_INT 0
4975: PPUSH
4976: PPUSH
4977: PPUSH
// if not hack in hackTanks or not vehicles then
4978: LD_VAR 0 1
4982: PUSH
4983: LD_EXP 13
4987: IN
4988: NOT
4989: PUSH
4990: LD_VAR 0 2
4994: NOT
4995: OR
4996: IFFALSE 5000
// exit ;
4998: GO 5275
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
5000: LD_ADDR_VAR 0 2
5004: PUSH
5005: LD_VAR 0 1
5009: PPUSH
5010: LD_VAR 0 2
5014: PPUSH
5015: LD_INT 1
5017: PPUSH
5018: LD_INT 1
5020: PPUSH
5021: CALL 28884 0 4
5025: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
5026: LD_ADDR_VAR 0 5
5030: PUSH
5031: LD_EXP 13
5035: PPUSH
5036: LD_VAR 0 1
5040: PPUSH
5041: CALL 28234 0 2
5045: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
5046: LD_EXP 14
5050: PUSH
5051: LD_VAR 0 5
5055: ARRAY
5056: PUSH
5057: LD_EXP 15
5061: LESS
5062: IFFALSE 5251
// begin for i := 1 to vehicles do
5064: LD_ADDR_VAR 0 4
5068: PUSH
5069: DOUBLE
5070: LD_INT 1
5072: DEC
5073: ST_TO_ADDR
5074: LD_VAR 0 2
5078: PUSH
5079: FOR_TO
5080: IFFALSE 5249
// begin if hackTanksCaptured [ index ] = hackLimit then
5082: LD_EXP 14
5086: PUSH
5087: LD_VAR 0 5
5091: ARRAY
5092: PUSH
5093: LD_EXP 15
5097: EQUAL
5098: IFFALSE 5102
// break ;
5100: GO 5249
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
5102: LD_ADDR_EXP 17
5106: PUSH
5107: LD_EXP 17
5111: PPUSH
5112: LD_VAR 0 5
5116: PPUSH
5117: LD_EXP 17
5121: PUSH
5122: LD_VAR 0 5
5126: ARRAY
5127: PUSH
5128: LD_INT 1
5130: PLUS
5131: PPUSH
5132: CALL_OW 1
5136: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
5137: LD_ADDR_EXP 14
5141: PUSH
5142: LD_EXP 14
5146: PPUSH
5147: LD_VAR 0 5
5151: PUSH
5152: LD_EXP 14
5156: PUSH
5157: LD_VAR 0 5
5161: ARRAY
5162: PUSH
5163: LD_INT 1
5165: PLUS
5166: PUSH
5167: EMPTY
5168: LIST
5169: LIST
5170: PPUSH
5171: LD_VAR 0 2
5175: PUSH
5176: LD_VAR 0 4
5180: ARRAY
5181: PUSH
5182: LD_VAR 0 2
5186: PUSH
5187: LD_VAR 0 4
5191: ARRAY
5192: PPUSH
5193: CALL_OW 255
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: PPUSH
5202: CALL 28449 0 3
5206: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
5207: LD_VAR 0 2
5211: PUSH
5212: LD_VAR 0 4
5216: ARRAY
5217: PPUSH
5218: LD_VAR 0 1
5222: PPUSH
5223: CALL_OW 255
5227: PPUSH
5228: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
5232: LD_VAR 0 2
5236: PUSH
5237: LD_VAR 0 4
5241: ARRAY
5242: PPUSH
5243: CALL_OW 141
// end ;
5247: GO 5079
5249: POP
5250: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
5251: LD_VAR 0 1
5255: PPUSH
5256: LD_EXP 14
5260: PUSH
5261: LD_VAR 0 5
5265: ARRAY
5266: PUSH
5267: LD_INT 0
5269: PLUS
5270: PPUSH
5271: CALL_OW 505
// end ;
5275: LD_VAR 0 3
5279: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
5280: LD_INT 0
5282: PPUSH
5283: PPUSH
5284: PPUSH
5285: PPUSH
// if not hack in hackTanks then
5286: LD_VAR 0 1
5290: PUSH
5291: LD_EXP 13
5295: IN
5296: NOT
5297: IFFALSE 5301
// exit ;
5299: GO 5541
// index := GetElementIndex ( hackTanks , hack ) ;
5301: LD_ADDR_VAR 0 4
5305: PUSH
5306: LD_EXP 13
5310: PPUSH
5311: LD_VAR 0 1
5315: PPUSH
5316: CALL 28234 0 2
5320: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
5321: LD_ADDR_VAR 0 3
5325: PUSH
5326: DOUBLE
5327: LD_EXP 14
5331: PUSH
5332: LD_VAR 0 4
5336: ARRAY
5337: INC
5338: ST_TO_ADDR
5339: LD_INT 1
5341: PUSH
5342: FOR_DOWNTO
5343: IFFALSE 5515
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
5345: LD_ADDR_VAR 0 5
5349: PUSH
5350: LD_EXP 14
5354: PUSH
5355: LD_VAR 0 4
5359: ARRAY
5360: PUSH
5361: LD_VAR 0 3
5365: ARRAY
5366: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
5367: LD_VAR 0 5
5371: PUSH
5372: LD_INT 1
5374: ARRAY
5375: PPUSH
5376: CALL_OW 302
5380: NOT
5381: PUSH
5382: LD_VAR 0 5
5386: PUSH
5387: LD_INT 1
5389: ARRAY
5390: PPUSH
5391: CALL_OW 255
5395: PUSH
5396: LD_VAR 0 1
5400: PPUSH
5401: CALL_OW 255
5405: NONEQUAL
5406: OR
5407: IFFALSE 5513
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
5409: LD_VAR 0 5
5413: PUSH
5414: LD_INT 1
5416: ARRAY
5417: PPUSH
5418: CALL_OW 305
5422: PUSH
5423: LD_VAR 0 5
5427: PUSH
5428: LD_INT 1
5430: ARRAY
5431: PPUSH
5432: CALL_OW 255
5436: PUSH
5437: LD_VAR 0 1
5441: PPUSH
5442: CALL_OW 255
5446: EQUAL
5447: AND
5448: IFFALSE 5472
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
5450: LD_VAR 0 5
5454: PUSH
5455: LD_INT 1
5457: ARRAY
5458: PPUSH
5459: LD_VAR 0 5
5463: PUSH
5464: LD_INT 2
5466: ARRAY
5467: PPUSH
5468: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
5472: LD_ADDR_EXP 14
5476: PUSH
5477: LD_EXP 14
5481: PPUSH
5482: LD_VAR 0 4
5486: PPUSH
5487: LD_EXP 14
5491: PUSH
5492: LD_VAR 0 4
5496: ARRAY
5497: PPUSH
5498: LD_VAR 0 3
5502: PPUSH
5503: CALL_OW 3
5507: PPUSH
5508: CALL_OW 1
5512: ST_TO_ADDR
// end ; end ;
5513: GO 5342
5515: POP
5516: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
5517: LD_VAR 0 1
5521: PPUSH
5522: LD_EXP 14
5526: PUSH
5527: LD_VAR 0 4
5531: ARRAY
5532: PUSH
5533: LD_INT 0
5535: PLUS
5536: PPUSH
5537: CALL_OW 505
// end ;
5541: LD_VAR 0 2
5545: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
5546: LD_INT 0
5548: PPUSH
5549: PPUSH
5550: PPUSH
5551: PPUSH
// if not hack in hackTanks then
5552: LD_VAR 0 1
5556: PUSH
5557: LD_EXP 13
5561: IN
5562: NOT
5563: IFFALSE 5567
// exit ;
5565: GO 5652
// index := GetElementIndex ( hackTanks , hack ) ;
5567: LD_ADDR_VAR 0 5
5571: PUSH
5572: LD_EXP 13
5576: PPUSH
5577: LD_VAR 0 1
5581: PPUSH
5582: CALL 28234 0 2
5586: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
5587: LD_ADDR_VAR 0 4
5591: PUSH
5592: DOUBLE
5593: LD_INT 1
5595: DEC
5596: ST_TO_ADDR
5597: LD_EXP 14
5601: PUSH
5602: LD_VAR 0 5
5606: ARRAY
5607: PUSH
5608: FOR_TO
5609: IFFALSE 5650
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
5611: LD_EXP 14
5615: PUSH
5616: LD_VAR 0 5
5620: ARRAY
5621: PUSH
5622: LD_VAR 0 4
5626: ARRAY
5627: PUSH
5628: LD_INT 1
5630: ARRAY
5631: PUSH
5632: LD_VAR 0 2
5636: EQUAL
5637: IFFALSE 5648
// KillUnit ( vehicle ) ;
5639: LD_VAR 0 2
5643: PPUSH
5644: CALL_OW 66
5648: GO 5608
5650: POP
5651: POP
// end ;
5652: LD_VAR 0 3
5656: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
5657: LD_EXP 18
5661: NOT
5662: IFFALSE 5697
5664: GO 5666
5666: DISABLE
// begin initMiner := true ;
5667: LD_ADDR_EXP 18
5671: PUSH
5672: LD_INT 1
5674: ST_TO_ADDR
// minersList := [ ] ;
5675: LD_ADDR_EXP 19
5679: PUSH
5680: EMPTY
5681: ST_TO_ADDR
// minerMinesList := [ ] ;
5682: LD_ADDR_EXP 20
5686: PUSH
5687: EMPTY
5688: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
5689: LD_ADDR_EXP 21
5693: PUSH
5694: LD_INT 5
5696: ST_TO_ADDR
// end ;
5697: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
5698: LD_EXP 18
5702: PUSH
5703: LD_INT 34
5705: PUSH
5706: LD_INT 81
5708: PUSH
5709: EMPTY
5710: LIST
5711: LIST
5712: PPUSH
5713: CALL_OW 69
5717: AND
5718: IFFALSE 6179
5720: GO 5722
5722: DISABLE
5723: LD_INT 0
5725: PPUSH
5726: PPUSH
5727: PPUSH
5728: PPUSH
// begin enable ;
5729: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
5730: LD_ADDR_VAR 0 1
5734: PUSH
5735: LD_INT 34
5737: PUSH
5738: LD_INT 81
5740: PUSH
5741: EMPTY
5742: LIST
5743: LIST
5744: PPUSH
5745: CALL_OW 69
5749: PUSH
5750: FOR_IN
5751: IFFALSE 5823
// begin if not i in minersList then
5753: LD_VAR 0 1
5757: PUSH
5758: LD_EXP 19
5762: IN
5763: NOT
5764: IFFALSE 5821
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
5766: LD_ADDR_EXP 19
5770: PUSH
5771: LD_EXP 19
5775: PPUSH
5776: LD_EXP 19
5780: PUSH
5781: LD_INT 1
5783: PLUS
5784: PPUSH
5785: LD_VAR 0 1
5789: PPUSH
5790: CALL_OW 1
5794: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
5795: LD_ADDR_EXP 20
5799: PUSH
5800: LD_EXP 20
5804: PPUSH
5805: LD_EXP 20
5809: PUSH
5810: LD_INT 1
5812: PLUS
5813: PPUSH
5814: EMPTY
5815: PPUSH
5816: CALL_OW 1
5820: ST_TO_ADDR
// end end ;
5821: GO 5750
5823: POP
5824: POP
// for i := minerMinesList downto 1 do
5825: LD_ADDR_VAR 0 1
5829: PUSH
5830: DOUBLE
5831: LD_EXP 20
5835: INC
5836: ST_TO_ADDR
5837: LD_INT 1
5839: PUSH
5840: FOR_DOWNTO
5841: IFFALSE 6177
// begin if IsLive ( minersList [ i ] ) then
5843: LD_EXP 19
5847: PUSH
5848: LD_VAR 0 1
5852: ARRAY
5853: PPUSH
5854: CALL_OW 300
5858: IFFALSE 5886
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
5860: LD_EXP 19
5864: PUSH
5865: LD_VAR 0 1
5869: ARRAY
5870: PPUSH
5871: LD_EXP 20
5875: PUSH
5876: LD_VAR 0 1
5880: ARRAY
5881: PPUSH
5882: CALL_OW 505
// if not minerMinesList [ i ] then
5886: LD_EXP 20
5890: PUSH
5891: LD_VAR 0 1
5895: ARRAY
5896: NOT
5897: IFFALSE 5901
// continue ;
5899: GO 5840
// for j := minerMinesList [ i ] downto 1 do
5901: LD_ADDR_VAR 0 2
5905: PUSH
5906: DOUBLE
5907: LD_EXP 20
5911: PUSH
5912: LD_VAR 0 1
5916: ARRAY
5917: INC
5918: ST_TO_ADDR
5919: LD_INT 1
5921: PUSH
5922: FOR_DOWNTO
5923: IFFALSE 6173
// begin side := GetSide ( minersList [ i ] ) ;
5925: LD_ADDR_VAR 0 3
5929: PUSH
5930: LD_EXP 19
5934: PUSH
5935: LD_VAR 0 1
5939: ARRAY
5940: PPUSH
5941: CALL_OW 255
5945: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
5946: LD_ADDR_VAR 0 4
5950: PUSH
5951: LD_EXP 20
5955: PUSH
5956: LD_VAR 0 1
5960: ARRAY
5961: PUSH
5962: LD_VAR 0 2
5966: ARRAY
5967: PUSH
5968: LD_INT 1
5970: ARRAY
5971: PPUSH
5972: LD_EXP 20
5976: PUSH
5977: LD_VAR 0 1
5981: ARRAY
5982: PUSH
5983: LD_VAR 0 2
5987: ARRAY
5988: PUSH
5989: LD_INT 2
5991: ARRAY
5992: PPUSH
5993: CALL_OW 428
5997: ST_TO_ADDR
// if not tmp then
5998: LD_VAR 0 4
6002: NOT
6003: IFFALSE 6007
// continue ;
6005: GO 5922
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
6007: LD_VAR 0 4
6011: PUSH
6012: LD_INT 81
6014: PUSH
6015: LD_VAR 0 3
6019: PUSH
6020: EMPTY
6021: LIST
6022: LIST
6023: PPUSH
6024: CALL_OW 69
6028: IN
6029: PUSH
6030: LD_EXP 20
6034: PUSH
6035: LD_VAR 0 1
6039: ARRAY
6040: PUSH
6041: LD_VAR 0 2
6045: ARRAY
6046: PUSH
6047: LD_INT 1
6049: ARRAY
6050: PPUSH
6051: LD_EXP 20
6055: PUSH
6056: LD_VAR 0 1
6060: ARRAY
6061: PUSH
6062: LD_VAR 0 2
6066: ARRAY
6067: PUSH
6068: LD_INT 2
6070: ARRAY
6071: PPUSH
6072: CALL_OW 458
6076: AND
6077: IFFALSE 6171
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
6079: LD_EXP 20
6083: PUSH
6084: LD_VAR 0 1
6088: ARRAY
6089: PUSH
6090: LD_VAR 0 2
6094: ARRAY
6095: PUSH
6096: LD_INT 1
6098: ARRAY
6099: PPUSH
6100: LD_EXP 20
6104: PUSH
6105: LD_VAR 0 1
6109: ARRAY
6110: PUSH
6111: LD_VAR 0 2
6115: ARRAY
6116: PUSH
6117: LD_INT 2
6119: ARRAY
6120: PPUSH
6121: LD_VAR 0 3
6125: PPUSH
6126: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
6130: LD_ADDR_EXP 20
6134: PUSH
6135: LD_EXP 20
6139: PPUSH
6140: LD_VAR 0 1
6144: PPUSH
6145: LD_EXP 20
6149: PUSH
6150: LD_VAR 0 1
6154: ARRAY
6155: PPUSH
6156: LD_VAR 0 2
6160: PPUSH
6161: CALL_OW 3
6165: PPUSH
6166: CALL_OW 1
6170: ST_TO_ADDR
// end ; end ;
6171: GO 5922
6173: POP
6174: POP
// end ;
6175: GO 5840
6177: POP
6178: POP
// end ;
6179: PPOPN 4
6181: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
6182: LD_INT 0
6184: PPUSH
6185: PPUSH
// result := false ;
6186: LD_ADDR_VAR 0 4
6190: PUSH
6191: LD_INT 0
6193: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
6194: LD_VAR 0 1
6198: PPUSH
6199: CALL_OW 264
6203: PUSH
6204: LD_INT 81
6206: EQUAL
6207: NOT
6208: IFFALSE 6212
// exit ;
6210: GO 6452
// index := GetElementIndex ( minersList , unit ) ;
6212: LD_ADDR_VAR 0 5
6216: PUSH
6217: LD_EXP 19
6221: PPUSH
6222: LD_VAR 0 1
6226: PPUSH
6227: CALL 28234 0 2
6231: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
6232: LD_EXP 20
6236: PUSH
6237: LD_VAR 0 5
6241: ARRAY
6242: PUSH
6243: LD_EXP 21
6247: GREATEREQUAL
6248: IFFALSE 6252
// exit ;
6250: GO 6452
// ComMoveXY ( unit , x , y ) ;
6252: LD_VAR 0 1
6256: PPUSH
6257: LD_VAR 0 2
6261: PPUSH
6262: LD_VAR 0 3
6266: PPUSH
6267: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6271: LD_INT 35
6273: PPUSH
6274: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
6278: LD_VAR 0 1
6282: PPUSH
6283: LD_VAR 0 2
6287: PPUSH
6288: LD_VAR 0 3
6292: PPUSH
6293: CALL 59497 0 3
6297: NOT
6298: PUSH
6299: LD_VAR 0 1
6303: PPUSH
6304: CALL_OW 314
6308: AND
6309: IFFALSE 6313
// exit ;
6311: GO 6452
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
6313: LD_VAR 0 2
6317: PPUSH
6318: LD_VAR 0 3
6322: PPUSH
6323: CALL_OW 428
6327: PUSH
6328: LD_VAR 0 1
6332: EQUAL
6333: PUSH
6334: LD_VAR 0 1
6338: PPUSH
6339: CALL_OW 314
6343: NOT
6344: AND
6345: IFFALSE 6271
// PlaySoundXY ( x , y , PlantMine ) ;
6347: LD_VAR 0 2
6351: PPUSH
6352: LD_VAR 0 3
6356: PPUSH
6357: LD_STRING PlantMine
6359: PPUSH
6360: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
6364: LD_VAR 0 2
6368: PPUSH
6369: LD_VAR 0 3
6373: PPUSH
6374: LD_VAR 0 1
6378: PPUSH
6379: CALL_OW 255
6383: PPUSH
6384: LD_INT 0
6386: PPUSH
6387: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
6391: LD_ADDR_EXP 20
6395: PUSH
6396: LD_EXP 20
6400: PPUSH
6401: LD_VAR 0 5
6405: PUSH
6406: LD_EXP 20
6410: PUSH
6411: LD_VAR 0 5
6415: ARRAY
6416: PUSH
6417: LD_INT 1
6419: PLUS
6420: PUSH
6421: EMPTY
6422: LIST
6423: LIST
6424: PPUSH
6425: LD_VAR 0 2
6429: PUSH
6430: LD_VAR 0 3
6434: PUSH
6435: EMPTY
6436: LIST
6437: LIST
6438: PPUSH
6439: CALL 28449 0 3
6443: ST_TO_ADDR
// result := true ;
6444: LD_ADDR_VAR 0 4
6448: PUSH
6449: LD_INT 1
6451: ST_TO_ADDR
// end ;
6452: LD_VAR 0 4
6456: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
6457: LD_INT 0
6459: PPUSH
6460: PPUSH
6461: PPUSH
// if not unit in minersList then
6462: LD_VAR 0 1
6466: PUSH
6467: LD_EXP 19
6471: IN
6472: NOT
6473: IFFALSE 6477
// exit ;
6475: GO 6869
// index := GetElementIndex ( minersList , unit ) ;
6477: LD_ADDR_VAR 0 6
6481: PUSH
6482: LD_EXP 19
6486: PPUSH
6487: LD_VAR 0 1
6491: PPUSH
6492: CALL 28234 0 2
6496: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
6497: LD_ADDR_VAR 0 5
6501: PUSH
6502: DOUBLE
6503: LD_EXP 20
6507: PUSH
6508: LD_VAR 0 6
6512: ARRAY
6513: INC
6514: ST_TO_ADDR
6515: LD_INT 1
6517: PUSH
6518: FOR_DOWNTO
6519: IFFALSE 6680
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
6521: LD_EXP 20
6525: PUSH
6526: LD_VAR 0 6
6530: ARRAY
6531: PUSH
6532: LD_VAR 0 5
6536: ARRAY
6537: PUSH
6538: LD_INT 1
6540: ARRAY
6541: PUSH
6542: LD_VAR 0 2
6546: EQUAL
6547: PUSH
6548: LD_EXP 20
6552: PUSH
6553: LD_VAR 0 6
6557: ARRAY
6558: PUSH
6559: LD_VAR 0 5
6563: ARRAY
6564: PUSH
6565: LD_INT 2
6567: ARRAY
6568: PUSH
6569: LD_VAR 0 3
6573: EQUAL
6574: AND
6575: IFFALSE 6678
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
6577: LD_EXP 20
6581: PUSH
6582: LD_VAR 0 6
6586: ARRAY
6587: PUSH
6588: LD_VAR 0 5
6592: ARRAY
6593: PUSH
6594: LD_INT 1
6596: ARRAY
6597: PPUSH
6598: LD_EXP 20
6602: PUSH
6603: LD_VAR 0 6
6607: ARRAY
6608: PUSH
6609: LD_VAR 0 5
6613: ARRAY
6614: PUSH
6615: LD_INT 2
6617: ARRAY
6618: PPUSH
6619: LD_VAR 0 1
6623: PPUSH
6624: CALL_OW 255
6628: PPUSH
6629: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
6633: LD_ADDR_EXP 20
6637: PUSH
6638: LD_EXP 20
6642: PPUSH
6643: LD_VAR 0 6
6647: PPUSH
6648: LD_EXP 20
6652: PUSH
6653: LD_VAR 0 6
6657: ARRAY
6658: PPUSH
6659: LD_VAR 0 5
6663: PPUSH
6664: CALL_OW 3
6668: PPUSH
6669: CALL_OW 1
6673: ST_TO_ADDR
// exit ;
6674: POP
6675: POP
6676: GO 6869
// end ; end ;
6678: GO 6518
6680: POP
6681: POP
// for i := minerMinesList [ index ] downto 1 do
6682: LD_ADDR_VAR 0 5
6686: PUSH
6687: DOUBLE
6688: LD_EXP 20
6692: PUSH
6693: LD_VAR 0 6
6697: ARRAY
6698: INC
6699: ST_TO_ADDR
6700: LD_INT 1
6702: PUSH
6703: FOR_DOWNTO
6704: IFFALSE 6867
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
6706: LD_EXP 20
6710: PUSH
6711: LD_VAR 0 6
6715: ARRAY
6716: PUSH
6717: LD_VAR 0 5
6721: ARRAY
6722: PUSH
6723: LD_INT 1
6725: ARRAY
6726: PPUSH
6727: LD_EXP 20
6731: PUSH
6732: LD_VAR 0 6
6736: ARRAY
6737: PUSH
6738: LD_VAR 0 5
6742: ARRAY
6743: PUSH
6744: LD_INT 2
6746: ARRAY
6747: PPUSH
6748: LD_VAR 0 2
6752: PPUSH
6753: LD_VAR 0 3
6757: PPUSH
6758: CALL_OW 298
6762: PUSH
6763: LD_INT 6
6765: LESS
6766: IFFALSE 6865
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
6768: LD_EXP 20
6772: PUSH
6773: LD_VAR 0 6
6777: ARRAY
6778: PUSH
6779: LD_VAR 0 5
6783: ARRAY
6784: PUSH
6785: LD_INT 1
6787: ARRAY
6788: PPUSH
6789: LD_EXP 20
6793: PUSH
6794: LD_VAR 0 6
6798: ARRAY
6799: PUSH
6800: LD_VAR 0 5
6804: ARRAY
6805: PUSH
6806: LD_INT 2
6808: ARRAY
6809: PPUSH
6810: LD_VAR 0 1
6814: PPUSH
6815: CALL_OW 255
6819: PPUSH
6820: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
6824: LD_ADDR_EXP 20
6828: PUSH
6829: LD_EXP 20
6833: PPUSH
6834: LD_VAR 0 6
6838: PPUSH
6839: LD_EXP 20
6843: PUSH
6844: LD_VAR 0 6
6848: ARRAY
6849: PPUSH
6850: LD_VAR 0 5
6854: PPUSH
6855: CALL_OW 3
6859: PPUSH
6860: CALL_OW 1
6864: ST_TO_ADDR
// end ; end ;
6865: GO 6703
6867: POP
6868: POP
// end ;
6869: LD_VAR 0 4
6873: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
6874: LD_INT 0
6876: PPUSH
6877: PPUSH
6878: PPUSH
6879: PPUSH
6880: PPUSH
6881: PPUSH
6882: PPUSH
6883: PPUSH
6884: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
6885: LD_VAR 0 1
6889: PPUSH
6890: CALL_OW 264
6894: PUSH
6895: LD_INT 81
6897: EQUAL
6898: NOT
6899: PUSH
6900: LD_VAR 0 1
6904: PUSH
6905: LD_EXP 19
6909: IN
6910: NOT
6911: OR
6912: IFFALSE 6916
// exit ;
6914: GO 7238
// index := GetElementIndex ( minersList , unit ) ;
6916: LD_ADDR_VAR 0 6
6920: PUSH
6921: LD_EXP 19
6925: PPUSH
6926: LD_VAR 0 1
6930: PPUSH
6931: CALL 28234 0 2
6935: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
6936: LD_ADDR_VAR 0 8
6940: PUSH
6941: LD_EXP 21
6945: PUSH
6946: LD_EXP 20
6950: PUSH
6951: LD_VAR 0 6
6955: ARRAY
6956: MINUS
6957: ST_TO_ADDR
// if not minesFreeAmount then
6958: LD_VAR 0 8
6962: NOT
6963: IFFALSE 6967
// exit ;
6965: GO 7238
// tmp := [ ] ;
6967: LD_ADDR_VAR 0 7
6971: PUSH
6972: EMPTY
6973: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
6974: LD_ADDR_VAR 0 5
6978: PUSH
6979: DOUBLE
6980: LD_INT 1
6982: DEC
6983: ST_TO_ADDR
6984: LD_VAR 0 8
6988: PUSH
6989: FOR_TO
6990: IFFALSE 7185
// begin _d := rand ( 0 , 5 ) ;
6992: LD_ADDR_VAR 0 11
6996: PUSH
6997: LD_INT 0
6999: PPUSH
7000: LD_INT 5
7002: PPUSH
7003: CALL_OW 12
7007: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
7008: LD_ADDR_VAR 0 12
7012: PUSH
7013: LD_INT 2
7015: PPUSH
7016: LD_INT 6
7018: PPUSH
7019: CALL_OW 12
7023: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
7024: LD_ADDR_VAR 0 9
7028: PUSH
7029: LD_VAR 0 2
7033: PPUSH
7034: LD_VAR 0 11
7038: PPUSH
7039: LD_VAR 0 12
7043: PPUSH
7044: CALL_OW 272
7048: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
7049: LD_ADDR_VAR 0 10
7053: PUSH
7054: LD_VAR 0 3
7058: PPUSH
7059: LD_VAR 0 11
7063: PPUSH
7064: LD_VAR 0 12
7068: PPUSH
7069: CALL_OW 273
7073: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
7074: LD_VAR 0 9
7078: PPUSH
7079: LD_VAR 0 10
7083: PPUSH
7084: CALL_OW 488
7088: PUSH
7089: LD_VAR 0 9
7093: PUSH
7094: LD_VAR 0 10
7098: PUSH
7099: EMPTY
7100: LIST
7101: LIST
7102: PUSH
7103: LD_VAR 0 7
7107: IN
7108: NOT
7109: AND
7110: PUSH
7111: LD_VAR 0 9
7115: PPUSH
7116: LD_VAR 0 10
7120: PPUSH
7121: CALL_OW 458
7125: NOT
7126: AND
7127: IFFALSE 7169
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
7129: LD_ADDR_VAR 0 7
7133: PUSH
7134: LD_VAR 0 7
7138: PPUSH
7139: LD_VAR 0 7
7143: PUSH
7144: LD_INT 1
7146: PLUS
7147: PPUSH
7148: LD_VAR 0 9
7152: PUSH
7153: LD_VAR 0 10
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: PPUSH
7162: CALL_OW 1
7166: ST_TO_ADDR
7167: GO 7183
// i := i - 1 ;
7169: LD_ADDR_VAR 0 5
7173: PUSH
7174: LD_VAR 0 5
7178: PUSH
7179: LD_INT 1
7181: MINUS
7182: ST_TO_ADDR
// end ;
7183: GO 6989
7185: POP
7186: POP
// for i in tmp do
7187: LD_ADDR_VAR 0 5
7191: PUSH
7192: LD_VAR 0 7
7196: PUSH
7197: FOR_IN
7198: IFFALSE 7236
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
7200: LD_VAR 0 1
7204: PPUSH
7205: LD_VAR 0 5
7209: PUSH
7210: LD_INT 1
7212: ARRAY
7213: PPUSH
7214: LD_VAR 0 5
7218: PUSH
7219: LD_INT 2
7221: ARRAY
7222: PPUSH
7223: CALL 6182 0 3
7227: NOT
7228: IFFALSE 7234
// exit ;
7230: POP
7231: POP
7232: GO 7238
7234: GO 7197
7236: POP
7237: POP
// end ;
7238: LD_VAR 0 4
7242: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
7243: LD_INT 0
7245: PPUSH
7246: PPUSH
7247: PPUSH
7248: PPUSH
7249: PPUSH
7250: PPUSH
7251: PPUSH
// if not GetClass ( unit ) = class_sniper then
7252: LD_VAR 0 1
7256: PPUSH
7257: CALL_OW 257
7261: PUSH
7262: LD_INT 5
7264: EQUAL
7265: NOT
7266: IFFALSE 7270
// exit ;
7268: GO 7658
// dist := 8 ;
7270: LD_ADDR_VAR 0 5
7274: PUSH
7275: LD_INT 8
7277: ST_TO_ADDR
// viewRange := 12 ;
7278: LD_ADDR_VAR 0 7
7282: PUSH
7283: LD_INT 12
7285: ST_TO_ADDR
// side := GetSide ( unit ) ;
7286: LD_ADDR_VAR 0 6
7290: PUSH
7291: LD_VAR 0 1
7295: PPUSH
7296: CALL_OW 255
7300: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
7301: LD_INT 61
7303: PPUSH
7304: LD_VAR 0 6
7308: PPUSH
7309: CALL_OW 321
7313: PUSH
7314: LD_INT 2
7316: EQUAL
7317: IFFALSE 7327
// viewRange := 16 ;
7319: LD_ADDR_VAR 0 7
7323: PUSH
7324: LD_INT 16
7326: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
7327: LD_VAR 0 1
7331: PPUSH
7332: LD_VAR 0 2
7336: PPUSH
7337: LD_VAR 0 3
7341: PPUSH
7342: CALL_OW 297
7346: PUSH
7347: LD_VAR 0 5
7351: GREATER
7352: IFFALSE 7431
// begin ComMoveXY ( unit , x , y ) ;
7354: LD_VAR 0 1
7358: PPUSH
7359: LD_VAR 0 2
7363: PPUSH
7364: LD_VAR 0 3
7368: PPUSH
7369: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7373: LD_INT 35
7375: PPUSH
7376: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
7380: LD_VAR 0 1
7384: PPUSH
7385: LD_VAR 0 2
7389: PPUSH
7390: LD_VAR 0 3
7394: PPUSH
7395: CALL 59497 0 3
7399: NOT
7400: IFFALSE 7404
// exit ;
7402: GO 7658
// until GetDistUnitXY ( unit , x , y ) < dist ;
7404: LD_VAR 0 1
7408: PPUSH
7409: LD_VAR 0 2
7413: PPUSH
7414: LD_VAR 0 3
7418: PPUSH
7419: CALL_OW 297
7423: PUSH
7424: LD_VAR 0 5
7428: LESS
7429: IFFALSE 7373
// end ; ComTurnXY ( unit , x , y ) ;
7431: LD_VAR 0 1
7435: PPUSH
7436: LD_VAR 0 2
7440: PPUSH
7441: LD_VAR 0 3
7445: PPUSH
7446: CALL_OW 118
// wait ( 5 ) ;
7450: LD_INT 5
7452: PPUSH
7453: CALL_OW 67
// _d := GetDir ( unit ) ;
7457: LD_ADDR_VAR 0 10
7461: PUSH
7462: LD_VAR 0 1
7466: PPUSH
7467: CALL_OW 254
7471: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
7472: LD_ADDR_VAR 0 8
7476: PUSH
7477: LD_VAR 0 1
7481: PPUSH
7482: CALL_OW 250
7486: PPUSH
7487: LD_VAR 0 10
7491: PPUSH
7492: LD_VAR 0 5
7496: PPUSH
7497: CALL_OW 272
7501: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
7502: LD_ADDR_VAR 0 9
7506: PUSH
7507: LD_VAR 0 1
7511: PPUSH
7512: CALL_OW 251
7516: PPUSH
7517: LD_VAR 0 10
7521: PPUSH
7522: LD_VAR 0 5
7526: PPUSH
7527: CALL_OW 273
7531: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
7532: LD_VAR 0 8
7536: PPUSH
7537: LD_VAR 0 9
7541: PPUSH
7542: CALL_OW 488
7546: NOT
7547: IFFALSE 7551
// exit ;
7549: GO 7658
// ComAnimCustom ( unit , 1 ) ;
7551: LD_VAR 0 1
7555: PPUSH
7556: LD_INT 1
7558: PPUSH
7559: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
7563: LD_VAR 0 8
7567: PPUSH
7568: LD_VAR 0 9
7572: PPUSH
7573: LD_VAR 0 6
7577: PPUSH
7578: LD_VAR 0 7
7582: PPUSH
7583: CALL_OW 330
// repeat wait ( 1 ) ;
7587: LD_INT 1
7589: PPUSH
7590: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
7594: LD_VAR 0 1
7598: PPUSH
7599: CALL_OW 316
7603: PUSH
7604: LD_VAR 0 1
7608: PPUSH
7609: CALL_OW 314
7613: OR
7614: PUSH
7615: LD_VAR 0 1
7619: PPUSH
7620: CALL_OW 302
7624: NOT
7625: OR
7626: PUSH
7627: LD_VAR 0 1
7631: PPUSH
7632: CALL_OW 301
7636: OR
7637: IFFALSE 7587
// RemoveSeeing ( _x , _y , side ) ;
7639: LD_VAR 0 8
7643: PPUSH
7644: LD_VAR 0 9
7648: PPUSH
7649: LD_VAR 0 6
7653: PPUSH
7654: CALL_OW 331
// end ; end_of_file
7658: LD_VAR 0 4
7662: RET
// every 0 0$1 do
7663: GO 7665
7665: DISABLE
// begin enable ;
7666: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7667: LD_STRING updateTimer(
7669: PUSH
7670: LD_OWVAR 1
7674: STR
7675: PUSH
7676: LD_STRING );
7678: STR
7679: PPUSH
7680: CALL_OW 559
// end ;
7684: END
// export function SOS_MapStart ( ) ; begin
7685: LD_INT 0
7687: PPUSH
// if streamModeActive then
7688: LD_EXP 22
7692: IFFALSE 7701
// DefineStreamItems ( true ) ;
7694: LD_INT 1
7696: PPUSH
7697: CALL 9355 0 1
// UpdateFactoryWaypoints ( ) ;
7701: CALL 22216 0 0
// UpdateWarehouseGatheringPoints ( ) ;
7705: CALL 22473 0 0
// end ;
7709: LD_VAR 0 1
7713: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7714: LD_INT 0
7716: PPUSH
// if p2 = 100 then
7717: LD_VAR 0 2
7721: PUSH
7722: LD_INT 100
7724: EQUAL
7725: IFFALSE 8728
// begin if not StreamModeActive then
7727: LD_EXP 22
7731: NOT
7732: IFFALSE 7742
// StreamModeActive := true ;
7734: LD_ADDR_EXP 22
7738: PUSH
7739: LD_INT 1
7741: ST_TO_ADDR
// if p3 = 0 then
7742: LD_VAR 0 3
7746: PUSH
7747: LD_INT 0
7749: EQUAL
7750: IFFALSE 7756
// InitStreamMode ;
7752: CALL 8891 0 0
// if p3 = 1 then
7756: LD_VAR 0 3
7760: PUSH
7761: LD_INT 1
7763: EQUAL
7764: IFFALSE 7774
// sRocket := true ;
7766: LD_ADDR_EXP 27
7770: PUSH
7771: LD_INT 1
7773: ST_TO_ADDR
// if p3 = 2 then
7774: LD_VAR 0 3
7778: PUSH
7779: LD_INT 2
7781: EQUAL
7782: IFFALSE 7792
// sSpeed := true ;
7784: LD_ADDR_EXP 26
7788: PUSH
7789: LD_INT 1
7791: ST_TO_ADDR
// if p3 = 3 then
7792: LD_VAR 0 3
7796: PUSH
7797: LD_INT 3
7799: EQUAL
7800: IFFALSE 7810
// sEngine := true ;
7802: LD_ADDR_EXP 28
7806: PUSH
7807: LD_INT 1
7809: ST_TO_ADDR
// if p3 = 4 then
7810: LD_VAR 0 3
7814: PUSH
7815: LD_INT 4
7817: EQUAL
7818: IFFALSE 7828
// sSpec := true ;
7820: LD_ADDR_EXP 25
7824: PUSH
7825: LD_INT 1
7827: ST_TO_ADDR
// if p3 = 5 then
7828: LD_VAR 0 3
7832: PUSH
7833: LD_INT 5
7835: EQUAL
7836: IFFALSE 7846
// sLevel := true ;
7838: LD_ADDR_EXP 29
7842: PUSH
7843: LD_INT 1
7845: ST_TO_ADDR
// if p3 = 6 then
7846: LD_VAR 0 3
7850: PUSH
7851: LD_INT 6
7853: EQUAL
7854: IFFALSE 7864
// sArmoury := true ;
7856: LD_ADDR_EXP 30
7860: PUSH
7861: LD_INT 1
7863: ST_TO_ADDR
// if p3 = 7 then
7864: LD_VAR 0 3
7868: PUSH
7869: LD_INT 7
7871: EQUAL
7872: IFFALSE 7882
// sRadar := true ;
7874: LD_ADDR_EXP 31
7878: PUSH
7879: LD_INT 1
7881: ST_TO_ADDR
// if p3 = 8 then
7882: LD_VAR 0 3
7886: PUSH
7887: LD_INT 8
7889: EQUAL
7890: IFFALSE 7900
// sBunker := true ;
7892: LD_ADDR_EXP 32
7896: PUSH
7897: LD_INT 1
7899: ST_TO_ADDR
// if p3 = 9 then
7900: LD_VAR 0 3
7904: PUSH
7905: LD_INT 9
7907: EQUAL
7908: IFFALSE 7918
// sHack := true ;
7910: LD_ADDR_EXP 33
7914: PUSH
7915: LD_INT 1
7917: ST_TO_ADDR
// if p3 = 10 then
7918: LD_VAR 0 3
7922: PUSH
7923: LD_INT 10
7925: EQUAL
7926: IFFALSE 7936
// sFire := true ;
7928: LD_ADDR_EXP 34
7932: PUSH
7933: LD_INT 1
7935: ST_TO_ADDR
// if p3 = 11 then
7936: LD_VAR 0 3
7940: PUSH
7941: LD_INT 11
7943: EQUAL
7944: IFFALSE 7954
// sRefresh := true ;
7946: LD_ADDR_EXP 35
7950: PUSH
7951: LD_INT 1
7953: ST_TO_ADDR
// if p3 = 12 then
7954: LD_VAR 0 3
7958: PUSH
7959: LD_INT 12
7961: EQUAL
7962: IFFALSE 7972
// sExp := true ;
7964: LD_ADDR_EXP 36
7968: PUSH
7969: LD_INT 1
7971: ST_TO_ADDR
// if p3 = 13 then
7972: LD_VAR 0 3
7976: PUSH
7977: LD_INT 13
7979: EQUAL
7980: IFFALSE 7990
// sDepot := true ;
7982: LD_ADDR_EXP 37
7986: PUSH
7987: LD_INT 1
7989: ST_TO_ADDR
// if p3 = 14 then
7990: LD_VAR 0 3
7994: PUSH
7995: LD_INT 14
7997: EQUAL
7998: IFFALSE 8008
// sFlag := true ;
8000: LD_ADDR_EXP 38
8004: PUSH
8005: LD_INT 1
8007: ST_TO_ADDR
// if p3 = 15 then
8008: LD_VAR 0 3
8012: PUSH
8013: LD_INT 15
8015: EQUAL
8016: IFFALSE 8026
// sKamikadze := true ;
8018: LD_ADDR_EXP 46
8022: PUSH
8023: LD_INT 1
8025: ST_TO_ADDR
// if p3 = 16 then
8026: LD_VAR 0 3
8030: PUSH
8031: LD_INT 16
8033: EQUAL
8034: IFFALSE 8044
// sTroll := true ;
8036: LD_ADDR_EXP 47
8040: PUSH
8041: LD_INT 1
8043: ST_TO_ADDR
// if p3 = 17 then
8044: LD_VAR 0 3
8048: PUSH
8049: LD_INT 17
8051: EQUAL
8052: IFFALSE 8062
// sSlow := true ;
8054: LD_ADDR_EXP 48
8058: PUSH
8059: LD_INT 1
8061: ST_TO_ADDR
// if p3 = 18 then
8062: LD_VAR 0 3
8066: PUSH
8067: LD_INT 18
8069: EQUAL
8070: IFFALSE 8080
// sLack := true ;
8072: LD_ADDR_EXP 49
8076: PUSH
8077: LD_INT 1
8079: ST_TO_ADDR
// if p3 = 19 then
8080: LD_VAR 0 3
8084: PUSH
8085: LD_INT 19
8087: EQUAL
8088: IFFALSE 8098
// sTank := true ;
8090: LD_ADDR_EXP 51
8094: PUSH
8095: LD_INT 1
8097: ST_TO_ADDR
// if p3 = 20 then
8098: LD_VAR 0 3
8102: PUSH
8103: LD_INT 20
8105: EQUAL
8106: IFFALSE 8116
// sRemote := true ;
8108: LD_ADDR_EXP 52
8112: PUSH
8113: LD_INT 1
8115: ST_TO_ADDR
// if p3 = 21 then
8116: LD_VAR 0 3
8120: PUSH
8121: LD_INT 21
8123: EQUAL
8124: IFFALSE 8134
// sPowell := true ;
8126: LD_ADDR_EXP 53
8130: PUSH
8131: LD_INT 1
8133: ST_TO_ADDR
// if p3 = 22 then
8134: LD_VAR 0 3
8138: PUSH
8139: LD_INT 22
8141: EQUAL
8142: IFFALSE 8152
// sTeleport := true ;
8144: LD_ADDR_EXP 56
8148: PUSH
8149: LD_INT 1
8151: ST_TO_ADDR
// if p3 = 23 then
8152: LD_VAR 0 3
8156: PUSH
8157: LD_INT 23
8159: EQUAL
8160: IFFALSE 8170
// sOilTower := true ;
8162: LD_ADDR_EXP 58
8166: PUSH
8167: LD_INT 1
8169: ST_TO_ADDR
// if p3 = 24 then
8170: LD_VAR 0 3
8174: PUSH
8175: LD_INT 24
8177: EQUAL
8178: IFFALSE 8188
// sShovel := true ;
8180: LD_ADDR_EXP 59
8184: PUSH
8185: LD_INT 1
8187: ST_TO_ADDR
// if p3 = 25 then
8188: LD_VAR 0 3
8192: PUSH
8193: LD_INT 25
8195: EQUAL
8196: IFFALSE 8206
// sSheik := true ;
8198: LD_ADDR_EXP 60
8202: PUSH
8203: LD_INT 1
8205: ST_TO_ADDR
// if p3 = 26 then
8206: LD_VAR 0 3
8210: PUSH
8211: LD_INT 26
8213: EQUAL
8214: IFFALSE 8224
// sEarthquake := true ;
8216: LD_ADDR_EXP 62
8220: PUSH
8221: LD_INT 1
8223: ST_TO_ADDR
// if p3 = 27 then
8224: LD_VAR 0 3
8228: PUSH
8229: LD_INT 27
8231: EQUAL
8232: IFFALSE 8242
// sAI := true ;
8234: LD_ADDR_EXP 63
8238: PUSH
8239: LD_INT 1
8241: ST_TO_ADDR
// if p3 = 28 then
8242: LD_VAR 0 3
8246: PUSH
8247: LD_INT 28
8249: EQUAL
8250: IFFALSE 8260
// sCargo := true ;
8252: LD_ADDR_EXP 66
8256: PUSH
8257: LD_INT 1
8259: ST_TO_ADDR
// if p3 = 29 then
8260: LD_VAR 0 3
8264: PUSH
8265: LD_INT 29
8267: EQUAL
8268: IFFALSE 8278
// sDLaser := true ;
8270: LD_ADDR_EXP 67
8274: PUSH
8275: LD_INT 1
8277: ST_TO_ADDR
// if p3 = 30 then
8278: LD_VAR 0 3
8282: PUSH
8283: LD_INT 30
8285: EQUAL
8286: IFFALSE 8296
// sExchange := true ;
8288: LD_ADDR_EXP 68
8292: PUSH
8293: LD_INT 1
8295: ST_TO_ADDR
// if p3 = 31 then
8296: LD_VAR 0 3
8300: PUSH
8301: LD_INT 31
8303: EQUAL
8304: IFFALSE 8314
// sFac := true ;
8306: LD_ADDR_EXP 69
8310: PUSH
8311: LD_INT 1
8313: ST_TO_ADDR
// if p3 = 32 then
8314: LD_VAR 0 3
8318: PUSH
8319: LD_INT 32
8321: EQUAL
8322: IFFALSE 8332
// sPower := true ;
8324: LD_ADDR_EXP 70
8328: PUSH
8329: LD_INT 1
8331: ST_TO_ADDR
// if p3 = 33 then
8332: LD_VAR 0 3
8336: PUSH
8337: LD_INT 33
8339: EQUAL
8340: IFFALSE 8350
// sRandom := true ;
8342: LD_ADDR_EXP 71
8346: PUSH
8347: LD_INT 1
8349: ST_TO_ADDR
// if p3 = 34 then
8350: LD_VAR 0 3
8354: PUSH
8355: LD_INT 34
8357: EQUAL
8358: IFFALSE 8368
// sShield := true ;
8360: LD_ADDR_EXP 72
8364: PUSH
8365: LD_INT 1
8367: ST_TO_ADDR
// if p3 = 35 then
8368: LD_VAR 0 3
8372: PUSH
8373: LD_INT 35
8375: EQUAL
8376: IFFALSE 8386
// sTime := true ;
8378: LD_ADDR_EXP 73
8382: PUSH
8383: LD_INT 1
8385: ST_TO_ADDR
// if p3 = 36 then
8386: LD_VAR 0 3
8390: PUSH
8391: LD_INT 36
8393: EQUAL
8394: IFFALSE 8404
// sTools := true ;
8396: LD_ADDR_EXP 74
8400: PUSH
8401: LD_INT 1
8403: ST_TO_ADDR
// if p3 = 101 then
8404: LD_VAR 0 3
8408: PUSH
8409: LD_INT 101
8411: EQUAL
8412: IFFALSE 8422
// sSold := true ;
8414: LD_ADDR_EXP 39
8418: PUSH
8419: LD_INT 1
8421: ST_TO_ADDR
// if p3 = 102 then
8422: LD_VAR 0 3
8426: PUSH
8427: LD_INT 102
8429: EQUAL
8430: IFFALSE 8440
// sDiff := true ;
8432: LD_ADDR_EXP 40
8436: PUSH
8437: LD_INT 1
8439: ST_TO_ADDR
// if p3 = 103 then
8440: LD_VAR 0 3
8444: PUSH
8445: LD_INT 103
8447: EQUAL
8448: IFFALSE 8458
// sFog := true ;
8450: LD_ADDR_EXP 43
8454: PUSH
8455: LD_INT 1
8457: ST_TO_ADDR
// if p3 = 104 then
8458: LD_VAR 0 3
8462: PUSH
8463: LD_INT 104
8465: EQUAL
8466: IFFALSE 8476
// sReset := true ;
8468: LD_ADDR_EXP 44
8472: PUSH
8473: LD_INT 1
8475: ST_TO_ADDR
// if p3 = 105 then
8476: LD_VAR 0 3
8480: PUSH
8481: LD_INT 105
8483: EQUAL
8484: IFFALSE 8494
// sSun := true ;
8486: LD_ADDR_EXP 45
8490: PUSH
8491: LD_INT 1
8493: ST_TO_ADDR
// if p3 = 106 then
8494: LD_VAR 0 3
8498: PUSH
8499: LD_INT 106
8501: EQUAL
8502: IFFALSE 8512
// sTiger := true ;
8504: LD_ADDR_EXP 41
8508: PUSH
8509: LD_INT 1
8511: ST_TO_ADDR
// if p3 = 107 then
8512: LD_VAR 0 3
8516: PUSH
8517: LD_INT 107
8519: EQUAL
8520: IFFALSE 8530
// sBomb := true ;
8522: LD_ADDR_EXP 42
8526: PUSH
8527: LD_INT 1
8529: ST_TO_ADDR
// if p3 = 108 then
8530: LD_VAR 0 3
8534: PUSH
8535: LD_INT 108
8537: EQUAL
8538: IFFALSE 8548
// sWound := true ;
8540: LD_ADDR_EXP 50
8544: PUSH
8545: LD_INT 1
8547: ST_TO_ADDR
// if p3 = 109 then
8548: LD_VAR 0 3
8552: PUSH
8553: LD_INT 109
8555: EQUAL
8556: IFFALSE 8566
// sBetray := true ;
8558: LD_ADDR_EXP 54
8562: PUSH
8563: LD_INT 1
8565: ST_TO_ADDR
// if p3 = 110 then
8566: LD_VAR 0 3
8570: PUSH
8571: LD_INT 110
8573: EQUAL
8574: IFFALSE 8584
// sContamin := true ;
8576: LD_ADDR_EXP 55
8580: PUSH
8581: LD_INT 1
8583: ST_TO_ADDR
// if p3 = 111 then
8584: LD_VAR 0 3
8588: PUSH
8589: LD_INT 111
8591: EQUAL
8592: IFFALSE 8602
// sOil := true ;
8594: LD_ADDR_EXP 57
8598: PUSH
8599: LD_INT 1
8601: ST_TO_ADDR
// if p3 = 112 then
8602: LD_VAR 0 3
8606: PUSH
8607: LD_INT 112
8609: EQUAL
8610: IFFALSE 8620
// sStu := true ;
8612: LD_ADDR_EXP 61
8616: PUSH
8617: LD_INT 1
8619: ST_TO_ADDR
// if p3 = 113 then
8620: LD_VAR 0 3
8624: PUSH
8625: LD_INT 113
8627: EQUAL
8628: IFFALSE 8638
// sBazooka := true ;
8630: LD_ADDR_EXP 64
8634: PUSH
8635: LD_INT 1
8637: ST_TO_ADDR
// if p3 = 114 then
8638: LD_VAR 0 3
8642: PUSH
8643: LD_INT 114
8645: EQUAL
8646: IFFALSE 8656
// sMortar := true ;
8648: LD_ADDR_EXP 65
8652: PUSH
8653: LD_INT 1
8655: ST_TO_ADDR
// if p3 = 115 then
8656: LD_VAR 0 3
8660: PUSH
8661: LD_INT 115
8663: EQUAL
8664: IFFALSE 8674
// sRanger := true ;
8666: LD_ADDR_EXP 75
8670: PUSH
8671: LD_INT 1
8673: ST_TO_ADDR
// if p3 = 116 then
8674: LD_VAR 0 3
8678: PUSH
8679: LD_INT 116
8681: EQUAL
8682: IFFALSE 8692
// sComputer := true ;
8684: LD_ADDR_EXP 76
8688: PUSH
8689: LD_INT 1
8691: ST_TO_ADDR
// if p3 = 117 then
8692: LD_VAR 0 3
8696: PUSH
8697: LD_INT 117
8699: EQUAL
8700: IFFALSE 8710
// s30 := true ;
8702: LD_ADDR_EXP 77
8706: PUSH
8707: LD_INT 1
8709: ST_TO_ADDR
// if p3 = 118 then
8710: LD_VAR 0 3
8714: PUSH
8715: LD_INT 118
8717: EQUAL
8718: IFFALSE 8728
// s60 := true ;
8720: LD_ADDR_EXP 78
8724: PUSH
8725: LD_INT 1
8727: ST_TO_ADDR
// end ; if p2 = 101 then
8728: LD_VAR 0 2
8732: PUSH
8733: LD_INT 101
8735: EQUAL
8736: IFFALSE 8864
// begin case p3 of 1 :
8738: LD_VAR 0 3
8742: PUSH
8743: LD_INT 1
8745: DOUBLE
8746: EQUAL
8747: IFTRUE 8751
8749: GO 8758
8751: POP
// hHackUnlimitedResources ; 2 :
8752: CALL 20962 0 0
8756: GO 8864
8758: LD_INT 2
8760: DOUBLE
8761: EQUAL
8762: IFTRUE 8766
8764: GO 8773
8766: POP
// hHackSetLevel10 ; 3 :
8767: CALL 21095 0 0
8771: GO 8864
8773: LD_INT 3
8775: DOUBLE
8776: EQUAL
8777: IFTRUE 8781
8779: GO 8788
8781: POP
// hHackSetLevel10YourUnits ; 4 :
8782: CALL 21180 0 0
8786: GO 8864
8788: LD_INT 4
8790: DOUBLE
8791: EQUAL
8792: IFTRUE 8796
8794: GO 8803
8796: POP
// hHackInvincible ; 5 :
8797: CALL 21628 0 0
8801: GO 8864
8803: LD_INT 5
8805: DOUBLE
8806: EQUAL
8807: IFTRUE 8811
8809: GO 8818
8811: POP
// hHackInvisible ; 6 :
8812: CALL 21739 0 0
8816: GO 8864
8818: LD_INT 6
8820: DOUBLE
8821: EQUAL
8822: IFTRUE 8826
8824: GO 8833
8826: POP
// hHackChangeYourSide ; 7 :
8827: CALL 21796 0 0
8831: GO 8864
8833: LD_INT 7
8835: DOUBLE
8836: EQUAL
8837: IFTRUE 8841
8839: GO 8848
8841: POP
// hHackChangeUnitSide ; 8 :
8842: CALL 21838 0 0
8846: GO 8864
8848: LD_INT 8
8850: DOUBLE
8851: EQUAL
8852: IFTRUE 8856
8854: GO 8863
8856: POP
// hHackFog ; end ;
8857: CALL 21939 0 0
8861: GO 8864
8863: POP
// end ; end ;
8864: LD_VAR 0 7
8868: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
8869: GO 8871
8871: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
8872: LD_STRING initStreamRollete();
8874: PPUSH
8875: CALL_OW 559
// InitStreamMode ;
8879: CALL 8891 0 0
// DefineStreamItems ( false ) ;
8883: LD_INT 0
8885: PPUSH
8886: CALL 9355 0 1
// end ;
8890: END
// function InitStreamMode ; begin
8891: LD_INT 0
8893: PPUSH
// streamModeActive := false ;
8894: LD_ADDR_EXP 22
8898: PUSH
8899: LD_INT 0
8901: ST_TO_ADDR
// normalCounter := 36 ;
8902: LD_ADDR_EXP 23
8906: PUSH
8907: LD_INT 36
8909: ST_TO_ADDR
// hardcoreCounter := 18 ;
8910: LD_ADDR_EXP 24
8914: PUSH
8915: LD_INT 18
8917: ST_TO_ADDR
// sRocket := false ;
8918: LD_ADDR_EXP 27
8922: PUSH
8923: LD_INT 0
8925: ST_TO_ADDR
// sSpeed := false ;
8926: LD_ADDR_EXP 26
8930: PUSH
8931: LD_INT 0
8933: ST_TO_ADDR
// sEngine := false ;
8934: LD_ADDR_EXP 28
8938: PUSH
8939: LD_INT 0
8941: ST_TO_ADDR
// sSpec := false ;
8942: LD_ADDR_EXP 25
8946: PUSH
8947: LD_INT 0
8949: ST_TO_ADDR
// sLevel := false ;
8950: LD_ADDR_EXP 29
8954: PUSH
8955: LD_INT 0
8957: ST_TO_ADDR
// sArmoury := false ;
8958: LD_ADDR_EXP 30
8962: PUSH
8963: LD_INT 0
8965: ST_TO_ADDR
// sRadar := false ;
8966: LD_ADDR_EXP 31
8970: PUSH
8971: LD_INT 0
8973: ST_TO_ADDR
// sBunker := false ;
8974: LD_ADDR_EXP 32
8978: PUSH
8979: LD_INT 0
8981: ST_TO_ADDR
// sHack := false ;
8982: LD_ADDR_EXP 33
8986: PUSH
8987: LD_INT 0
8989: ST_TO_ADDR
// sFire := false ;
8990: LD_ADDR_EXP 34
8994: PUSH
8995: LD_INT 0
8997: ST_TO_ADDR
// sRefresh := false ;
8998: LD_ADDR_EXP 35
9002: PUSH
9003: LD_INT 0
9005: ST_TO_ADDR
// sExp := false ;
9006: LD_ADDR_EXP 36
9010: PUSH
9011: LD_INT 0
9013: ST_TO_ADDR
// sDepot := false ;
9014: LD_ADDR_EXP 37
9018: PUSH
9019: LD_INT 0
9021: ST_TO_ADDR
// sFlag := false ;
9022: LD_ADDR_EXP 38
9026: PUSH
9027: LD_INT 0
9029: ST_TO_ADDR
// sKamikadze := false ;
9030: LD_ADDR_EXP 46
9034: PUSH
9035: LD_INT 0
9037: ST_TO_ADDR
// sTroll := false ;
9038: LD_ADDR_EXP 47
9042: PUSH
9043: LD_INT 0
9045: ST_TO_ADDR
// sSlow := false ;
9046: LD_ADDR_EXP 48
9050: PUSH
9051: LD_INT 0
9053: ST_TO_ADDR
// sLack := false ;
9054: LD_ADDR_EXP 49
9058: PUSH
9059: LD_INT 0
9061: ST_TO_ADDR
// sTank := false ;
9062: LD_ADDR_EXP 51
9066: PUSH
9067: LD_INT 0
9069: ST_TO_ADDR
// sRemote := false ;
9070: LD_ADDR_EXP 52
9074: PUSH
9075: LD_INT 0
9077: ST_TO_ADDR
// sPowell := false ;
9078: LD_ADDR_EXP 53
9082: PUSH
9083: LD_INT 0
9085: ST_TO_ADDR
// sTeleport := false ;
9086: LD_ADDR_EXP 56
9090: PUSH
9091: LD_INT 0
9093: ST_TO_ADDR
// sOilTower := false ;
9094: LD_ADDR_EXP 58
9098: PUSH
9099: LD_INT 0
9101: ST_TO_ADDR
// sShovel := false ;
9102: LD_ADDR_EXP 59
9106: PUSH
9107: LD_INT 0
9109: ST_TO_ADDR
// sSheik := false ;
9110: LD_ADDR_EXP 60
9114: PUSH
9115: LD_INT 0
9117: ST_TO_ADDR
// sEarthquake := false ;
9118: LD_ADDR_EXP 62
9122: PUSH
9123: LD_INT 0
9125: ST_TO_ADDR
// sAI := false ;
9126: LD_ADDR_EXP 63
9130: PUSH
9131: LD_INT 0
9133: ST_TO_ADDR
// sCargo := false ;
9134: LD_ADDR_EXP 66
9138: PUSH
9139: LD_INT 0
9141: ST_TO_ADDR
// sDLaser := false ;
9142: LD_ADDR_EXP 67
9146: PUSH
9147: LD_INT 0
9149: ST_TO_ADDR
// sExchange := false ;
9150: LD_ADDR_EXP 68
9154: PUSH
9155: LD_INT 0
9157: ST_TO_ADDR
// sFac := false ;
9158: LD_ADDR_EXP 69
9162: PUSH
9163: LD_INT 0
9165: ST_TO_ADDR
// sPower := false ;
9166: LD_ADDR_EXP 70
9170: PUSH
9171: LD_INT 0
9173: ST_TO_ADDR
// sRandom := false ;
9174: LD_ADDR_EXP 71
9178: PUSH
9179: LD_INT 0
9181: ST_TO_ADDR
// sShield := false ;
9182: LD_ADDR_EXP 72
9186: PUSH
9187: LD_INT 0
9189: ST_TO_ADDR
// sTime := false ;
9190: LD_ADDR_EXP 73
9194: PUSH
9195: LD_INT 0
9197: ST_TO_ADDR
// sTools := false ;
9198: LD_ADDR_EXP 74
9202: PUSH
9203: LD_INT 0
9205: ST_TO_ADDR
// sSold := false ;
9206: LD_ADDR_EXP 39
9210: PUSH
9211: LD_INT 0
9213: ST_TO_ADDR
// sDiff := false ;
9214: LD_ADDR_EXP 40
9218: PUSH
9219: LD_INT 0
9221: ST_TO_ADDR
// sFog := false ;
9222: LD_ADDR_EXP 43
9226: PUSH
9227: LD_INT 0
9229: ST_TO_ADDR
// sReset := false ;
9230: LD_ADDR_EXP 44
9234: PUSH
9235: LD_INT 0
9237: ST_TO_ADDR
// sSun := false ;
9238: LD_ADDR_EXP 45
9242: PUSH
9243: LD_INT 0
9245: ST_TO_ADDR
// sTiger := false ;
9246: LD_ADDR_EXP 41
9250: PUSH
9251: LD_INT 0
9253: ST_TO_ADDR
// sBomb := false ;
9254: LD_ADDR_EXP 42
9258: PUSH
9259: LD_INT 0
9261: ST_TO_ADDR
// sWound := false ;
9262: LD_ADDR_EXP 50
9266: PUSH
9267: LD_INT 0
9269: ST_TO_ADDR
// sBetray := false ;
9270: LD_ADDR_EXP 54
9274: PUSH
9275: LD_INT 0
9277: ST_TO_ADDR
// sContamin := false ;
9278: LD_ADDR_EXP 55
9282: PUSH
9283: LD_INT 0
9285: ST_TO_ADDR
// sOil := false ;
9286: LD_ADDR_EXP 57
9290: PUSH
9291: LD_INT 0
9293: ST_TO_ADDR
// sStu := false ;
9294: LD_ADDR_EXP 61
9298: PUSH
9299: LD_INT 0
9301: ST_TO_ADDR
// sBazooka := false ;
9302: LD_ADDR_EXP 64
9306: PUSH
9307: LD_INT 0
9309: ST_TO_ADDR
// sMortar := false ;
9310: LD_ADDR_EXP 65
9314: PUSH
9315: LD_INT 0
9317: ST_TO_ADDR
// sRanger := false ;
9318: LD_ADDR_EXP 75
9322: PUSH
9323: LD_INT 0
9325: ST_TO_ADDR
// sComputer := false ;
9326: LD_ADDR_EXP 76
9330: PUSH
9331: LD_INT 0
9333: ST_TO_ADDR
// s30 := false ;
9334: LD_ADDR_EXP 77
9338: PUSH
9339: LD_INT 0
9341: ST_TO_ADDR
// s60 := false ;
9342: LD_ADDR_EXP 78
9346: PUSH
9347: LD_INT 0
9349: ST_TO_ADDR
// end ;
9350: LD_VAR 0 1
9354: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
9355: LD_INT 0
9357: PPUSH
9358: PPUSH
9359: PPUSH
9360: PPUSH
9361: PPUSH
9362: PPUSH
9363: PPUSH
// result := [ ] ;
9364: LD_ADDR_VAR 0 2
9368: PUSH
9369: EMPTY
9370: ST_TO_ADDR
// if campaign_id = 1 then
9371: LD_OWVAR 69
9375: PUSH
9376: LD_INT 1
9378: EQUAL
9379: IFFALSE 12545
// begin case mission_number of 1 :
9381: LD_OWVAR 70
9385: PUSH
9386: LD_INT 1
9388: DOUBLE
9389: EQUAL
9390: IFTRUE 9394
9392: GO 9470
9394: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
9395: LD_ADDR_VAR 0 2
9399: PUSH
9400: LD_INT 2
9402: PUSH
9403: LD_INT 4
9405: PUSH
9406: LD_INT 11
9408: PUSH
9409: LD_INT 12
9411: PUSH
9412: LD_INT 15
9414: PUSH
9415: LD_INT 16
9417: PUSH
9418: LD_INT 22
9420: PUSH
9421: LD_INT 23
9423: PUSH
9424: LD_INT 26
9426: PUSH
9427: EMPTY
9428: LIST
9429: LIST
9430: LIST
9431: LIST
9432: LIST
9433: LIST
9434: LIST
9435: LIST
9436: LIST
9437: PUSH
9438: LD_INT 101
9440: PUSH
9441: LD_INT 102
9443: PUSH
9444: LD_INT 106
9446: PUSH
9447: LD_INT 116
9449: PUSH
9450: LD_INT 117
9452: PUSH
9453: LD_INT 118
9455: PUSH
9456: EMPTY
9457: LIST
9458: LIST
9459: LIST
9460: LIST
9461: LIST
9462: LIST
9463: PUSH
9464: EMPTY
9465: LIST
9466: LIST
9467: ST_TO_ADDR
9468: GO 12543
9470: LD_INT 2
9472: DOUBLE
9473: EQUAL
9474: IFTRUE 9478
9476: GO 9562
9478: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9479: LD_ADDR_VAR 0 2
9483: PUSH
9484: LD_INT 2
9486: PUSH
9487: LD_INT 4
9489: PUSH
9490: LD_INT 11
9492: PUSH
9493: LD_INT 12
9495: PUSH
9496: LD_INT 15
9498: PUSH
9499: LD_INT 16
9501: PUSH
9502: LD_INT 22
9504: PUSH
9505: LD_INT 23
9507: PUSH
9508: LD_INT 26
9510: PUSH
9511: EMPTY
9512: LIST
9513: LIST
9514: LIST
9515: LIST
9516: LIST
9517: LIST
9518: LIST
9519: LIST
9520: LIST
9521: PUSH
9522: LD_INT 101
9524: PUSH
9525: LD_INT 102
9527: PUSH
9528: LD_INT 105
9530: PUSH
9531: LD_INT 106
9533: PUSH
9534: LD_INT 108
9536: PUSH
9537: LD_INT 116
9539: PUSH
9540: LD_INT 117
9542: PUSH
9543: LD_INT 118
9545: PUSH
9546: EMPTY
9547: LIST
9548: LIST
9549: LIST
9550: LIST
9551: LIST
9552: LIST
9553: LIST
9554: LIST
9555: PUSH
9556: EMPTY
9557: LIST
9558: LIST
9559: ST_TO_ADDR
9560: GO 12543
9562: LD_INT 3
9564: DOUBLE
9565: EQUAL
9566: IFTRUE 9570
9568: GO 9658
9570: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9571: LD_ADDR_VAR 0 2
9575: PUSH
9576: LD_INT 2
9578: PUSH
9579: LD_INT 4
9581: PUSH
9582: LD_INT 5
9584: PUSH
9585: LD_INT 11
9587: PUSH
9588: LD_INT 12
9590: PUSH
9591: LD_INT 15
9593: PUSH
9594: LD_INT 16
9596: PUSH
9597: LD_INT 22
9599: PUSH
9600: LD_INT 26
9602: PUSH
9603: LD_INT 36
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: PUSH
9618: LD_INT 101
9620: PUSH
9621: LD_INT 102
9623: PUSH
9624: LD_INT 105
9626: PUSH
9627: LD_INT 106
9629: PUSH
9630: LD_INT 108
9632: PUSH
9633: LD_INT 116
9635: PUSH
9636: LD_INT 117
9638: PUSH
9639: LD_INT 118
9641: PUSH
9642: EMPTY
9643: LIST
9644: LIST
9645: LIST
9646: LIST
9647: LIST
9648: LIST
9649: LIST
9650: LIST
9651: PUSH
9652: EMPTY
9653: LIST
9654: LIST
9655: ST_TO_ADDR
9656: GO 12543
9658: LD_INT 4
9660: DOUBLE
9661: EQUAL
9662: IFTRUE 9666
9664: GO 9762
9666: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9667: LD_ADDR_VAR 0 2
9671: PUSH
9672: LD_INT 2
9674: PUSH
9675: LD_INT 4
9677: PUSH
9678: LD_INT 5
9680: PUSH
9681: LD_INT 8
9683: PUSH
9684: LD_INT 11
9686: PUSH
9687: LD_INT 12
9689: PUSH
9690: LD_INT 15
9692: PUSH
9693: LD_INT 16
9695: PUSH
9696: LD_INT 22
9698: PUSH
9699: LD_INT 23
9701: PUSH
9702: LD_INT 26
9704: PUSH
9705: LD_INT 36
9707: PUSH
9708: EMPTY
9709: LIST
9710: LIST
9711: LIST
9712: LIST
9713: LIST
9714: LIST
9715: LIST
9716: LIST
9717: LIST
9718: LIST
9719: LIST
9720: LIST
9721: PUSH
9722: LD_INT 101
9724: PUSH
9725: LD_INT 102
9727: PUSH
9728: LD_INT 105
9730: PUSH
9731: LD_INT 106
9733: PUSH
9734: LD_INT 108
9736: PUSH
9737: LD_INT 116
9739: PUSH
9740: LD_INT 117
9742: PUSH
9743: LD_INT 118
9745: PUSH
9746: EMPTY
9747: LIST
9748: LIST
9749: LIST
9750: LIST
9751: LIST
9752: LIST
9753: LIST
9754: LIST
9755: PUSH
9756: EMPTY
9757: LIST
9758: LIST
9759: ST_TO_ADDR
9760: GO 12543
9762: LD_INT 5
9764: DOUBLE
9765: EQUAL
9766: IFTRUE 9770
9768: GO 9882
9770: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9771: LD_ADDR_VAR 0 2
9775: PUSH
9776: LD_INT 2
9778: PUSH
9779: LD_INT 4
9781: PUSH
9782: LD_INT 5
9784: PUSH
9785: LD_INT 6
9787: PUSH
9788: LD_INT 8
9790: PUSH
9791: LD_INT 11
9793: PUSH
9794: LD_INT 12
9796: PUSH
9797: LD_INT 15
9799: PUSH
9800: LD_INT 16
9802: PUSH
9803: LD_INT 22
9805: PUSH
9806: LD_INT 23
9808: PUSH
9809: LD_INT 25
9811: PUSH
9812: LD_INT 26
9814: PUSH
9815: LD_INT 36
9817: PUSH
9818: EMPTY
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: PUSH
9834: LD_INT 101
9836: PUSH
9837: LD_INT 102
9839: PUSH
9840: LD_INT 105
9842: PUSH
9843: LD_INT 106
9845: PUSH
9846: LD_INT 108
9848: PUSH
9849: LD_INT 109
9851: PUSH
9852: LD_INT 112
9854: PUSH
9855: LD_INT 116
9857: PUSH
9858: LD_INT 117
9860: PUSH
9861: LD_INT 118
9863: PUSH
9864: EMPTY
9865: LIST
9866: LIST
9867: LIST
9868: LIST
9869: LIST
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: PUSH
9876: EMPTY
9877: LIST
9878: LIST
9879: ST_TO_ADDR
9880: GO 12543
9882: LD_INT 6
9884: DOUBLE
9885: EQUAL
9886: IFTRUE 9890
9888: GO 10022
9890: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9891: LD_ADDR_VAR 0 2
9895: PUSH
9896: LD_INT 2
9898: PUSH
9899: LD_INT 4
9901: PUSH
9902: LD_INT 5
9904: PUSH
9905: LD_INT 6
9907: PUSH
9908: LD_INT 8
9910: PUSH
9911: LD_INT 11
9913: PUSH
9914: LD_INT 12
9916: PUSH
9917: LD_INT 15
9919: PUSH
9920: LD_INT 16
9922: PUSH
9923: LD_INT 20
9925: PUSH
9926: LD_INT 21
9928: PUSH
9929: LD_INT 22
9931: PUSH
9932: LD_INT 23
9934: PUSH
9935: LD_INT 25
9937: PUSH
9938: LD_INT 26
9940: PUSH
9941: LD_INT 30
9943: PUSH
9944: LD_INT 31
9946: PUSH
9947: LD_INT 32
9949: PUSH
9950: LD_INT 36
9952: PUSH
9953: EMPTY
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: LIST
9960: LIST
9961: LIST
9962: LIST
9963: LIST
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: PUSH
9974: LD_INT 101
9976: PUSH
9977: LD_INT 102
9979: PUSH
9980: LD_INT 105
9982: PUSH
9983: LD_INT 106
9985: PUSH
9986: LD_INT 108
9988: PUSH
9989: LD_INT 109
9991: PUSH
9992: LD_INT 112
9994: PUSH
9995: LD_INT 116
9997: PUSH
9998: LD_INT 117
10000: PUSH
10001: LD_INT 118
10003: PUSH
10004: EMPTY
10005: LIST
10006: LIST
10007: LIST
10008: LIST
10009: LIST
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: PUSH
10016: EMPTY
10017: LIST
10018: LIST
10019: ST_TO_ADDR
10020: GO 12543
10022: LD_INT 7
10024: DOUBLE
10025: EQUAL
10026: IFTRUE 10030
10028: GO 10142
10030: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
10031: LD_ADDR_VAR 0 2
10035: PUSH
10036: LD_INT 2
10038: PUSH
10039: LD_INT 4
10041: PUSH
10042: LD_INT 5
10044: PUSH
10045: LD_INT 7
10047: PUSH
10048: LD_INT 11
10050: PUSH
10051: LD_INT 12
10053: PUSH
10054: LD_INT 15
10056: PUSH
10057: LD_INT 16
10059: PUSH
10060: LD_INT 20
10062: PUSH
10063: LD_INT 21
10065: PUSH
10066: LD_INT 22
10068: PUSH
10069: LD_INT 23
10071: PUSH
10072: LD_INT 25
10074: PUSH
10075: LD_INT 26
10077: PUSH
10078: EMPTY
10079: LIST
10080: LIST
10081: LIST
10082: LIST
10083: LIST
10084: LIST
10085: LIST
10086: LIST
10087: LIST
10088: LIST
10089: LIST
10090: LIST
10091: LIST
10092: LIST
10093: PUSH
10094: LD_INT 101
10096: PUSH
10097: LD_INT 102
10099: PUSH
10100: LD_INT 103
10102: PUSH
10103: LD_INT 105
10105: PUSH
10106: LD_INT 106
10108: PUSH
10109: LD_INT 108
10111: PUSH
10112: LD_INT 112
10114: PUSH
10115: LD_INT 116
10117: PUSH
10118: LD_INT 117
10120: PUSH
10121: LD_INT 118
10123: PUSH
10124: EMPTY
10125: LIST
10126: LIST
10127: LIST
10128: LIST
10129: LIST
10130: LIST
10131: LIST
10132: LIST
10133: LIST
10134: LIST
10135: PUSH
10136: EMPTY
10137: LIST
10138: LIST
10139: ST_TO_ADDR
10140: GO 12543
10142: LD_INT 8
10144: DOUBLE
10145: EQUAL
10146: IFTRUE 10150
10148: GO 10290
10150: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
10151: LD_ADDR_VAR 0 2
10155: PUSH
10156: LD_INT 2
10158: PUSH
10159: LD_INT 4
10161: PUSH
10162: LD_INT 5
10164: PUSH
10165: LD_INT 6
10167: PUSH
10168: LD_INT 7
10170: PUSH
10171: LD_INT 8
10173: PUSH
10174: LD_INT 11
10176: PUSH
10177: LD_INT 12
10179: PUSH
10180: LD_INT 15
10182: PUSH
10183: LD_INT 16
10185: PUSH
10186: LD_INT 20
10188: PUSH
10189: LD_INT 21
10191: PUSH
10192: LD_INT 22
10194: PUSH
10195: LD_INT 23
10197: PUSH
10198: LD_INT 25
10200: PUSH
10201: LD_INT 26
10203: PUSH
10204: LD_INT 30
10206: PUSH
10207: LD_INT 31
10209: PUSH
10210: LD_INT 32
10212: PUSH
10213: LD_INT 36
10215: PUSH
10216: EMPTY
10217: LIST
10218: LIST
10219: LIST
10220: LIST
10221: LIST
10222: LIST
10223: LIST
10224: LIST
10225: LIST
10226: LIST
10227: LIST
10228: LIST
10229: LIST
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: LIST
10236: LIST
10237: PUSH
10238: LD_INT 101
10240: PUSH
10241: LD_INT 102
10243: PUSH
10244: LD_INT 103
10246: PUSH
10247: LD_INT 105
10249: PUSH
10250: LD_INT 106
10252: PUSH
10253: LD_INT 108
10255: PUSH
10256: LD_INT 109
10258: PUSH
10259: LD_INT 112
10261: PUSH
10262: LD_INT 116
10264: PUSH
10265: LD_INT 117
10267: PUSH
10268: LD_INT 118
10270: PUSH
10271: EMPTY
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: LIST
10281: LIST
10282: LIST
10283: PUSH
10284: EMPTY
10285: LIST
10286: LIST
10287: ST_TO_ADDR
10288: GO 12543
10290: LD_INT 9
10292: DOUBLE
10293: EQUAL
10294: IFTRUE 10298
10296: GO 10446
10298: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
10299: LD_ADDR_VAR 0 2
10303: PUSH
10304: LD_INT 2
10306: PUSH
10307: LD_INT 4
10309: PUSH
10310: LD_INT 5
10312: PUSH
10313: LD_INT 6
10315: PUSH
10316: LD_INT 7
10318: PUSH
10319: LD_INT 8
10321: PUSH
10322: LD_INT 11
10324: PUSH
10325: LD_INT 12
10327: PUSH
10328: LD_INT 15
10330: PUSH
10331: LD_INT 16
10333: PUSH
10334: LD_INT 20
10336: PUSH
10337: LD_INT 21
10339: PUSH
10340: LD_INT 22
10342: PUSH
10343: LD_INT 23
10345: PUSH
10346: LD_INT 25
10348: PUSH
10349: LD_INT 26
10351: PUSH
10352: LD_INT 28
10354: PUSH
10355: LD_INT 30
10357: PUSH
10358: LD_INT 31
10360: PUSH
10361: LD_INT 32
10363: PUSH
10364: LD_INT 36
10366: PUSH
10367: EMPTY
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: LIST
10388: LIST
10389: PUSH
10390: LD_INT 101
10392: PUSH
10393: LD_INT 102
10395: PUSH
10396: LD_INT 103
10398: PUSH
10399: LD_INT 105
10401: PUSH
10402: LD_INT 106
10404: PUSH
10405: LD_INT 108
10407: PUSH
10408: LD_INT 109
10410: PUSH
10411: LD_INT 112
10413: PUSH
10414: LD_INT 114
10416: PUSH
10417: LD_INT 116
10419: PUSH
10420: LD_INT 117
10422: PUSH
10423: LD_INT 118
10425: PUSH
10426: EMPTY
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: PUSH
10440: EMPTY
10441: LIST
10442: LIST
10443: ST_TO_ADDR
10444: GO 12543
10446: LD_INT 10
10448: DOUBLE
10449: EQUAL
10450: IFTRUE 10454
10452: GO 10650
10454: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10455: LD_ADDR_VAR 0 2
10459: PUSH
10460: LD_INT 2
10462: PUSH
10463: LD_INT 4
10465: PUSH
10466: LD_INT 5
10468: PUSH
10469: LD_INT 6
10471: PUSH
10472: LD_INT 7
10474: PUSH
10475: LD_INT 8
10477: PUSH
10478: LD_INT 9
10480: PUSH
10481: LD_INT 10
10483: PUSH
10484: LD_INT 11
10486: PUSH
10487: LD_INT 12
10489: PUSH
10490: LD_INT 13
10492: PUSH
10493: LD_INT 14
10495: PUSH
10496: LD_INT 15
10498: PUSH
10499: LD_INT 16
10501: PUSH
10502: LD_INT 17
10504: PUSH
10505: LD_INT 18
10507: PUSH
10508: LD_INT 19
10510: PUSH
10511: LD_INT 20
10513: PUSH
10514: LD_INT 21
10516: PUSH
10517: LD_INT 22
10519: PUSH
10520: LD_INT 23
10522: PUSH
10523: LD_INT 24
10525: PUSH
10526: LD_INT 25
10528: PUSH
10529: LD_INT 26
10531: PUSH
10532: LD_INT 28
10534: PUSH
10535: LD_INT 30
10537: PUSH
10538: LD_INT 31
10540: PUSH
10541: LD_INT 32
10543: PUSH
10544: LD_INT 36
10546: PUSH
10547: EMPTY
10548: LIST
10549: LIST
10550: LIST
10551: LIST
10552: LIST
10553: LIST
10554: LIST
10555: LIST
10556: LIST
10557: LIST
10558: LIST
10559: LIST
10560: LIST
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: PUSH
10578: LD_INT 101
10580: PUSH
10581: LD_INT 102
10583: PUSH
10584: LD_INT 103
10586: PUSH
10587: LD_INT 104
10589: PUSH
10590: LD_INT 105
10592: PUSH
10593: LD_INT 106
10595: PUSH
10596: LD_INT 107
10598: PUSH
10599: LD_INT 108
10601: PUSH
10602: LD_INT 109
10604: PUSH
10605: LD_INT 110
10607: PUSH
10608: LD_INT 111
10610: PUSH
10611: LD_INT 112
10613: PUSH
10614: LD_INT 114
10616: PUSH
10617: LD_INT 116
10619: PUSH
10620: LD_INT 117
10622: PUSH
10623: LD_INT 118
10625: PUSH
10626: EMPTY
10627: LIST
10628: LIST
10629: LIST
10630: LIST
10631: LIST
10632: LIST
10633: LIST
10634: LIST
10635: LIST
10636: LIST
10637: LIST
10638: LIST
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: PUSH
10644: EMPTY
10645: LIST
10646: LIST
10647: ST_TO_ADDR
10648: GO 12543
10650: LD_INT 11
10652: DOUBLE
10653: EQUAL
10654: IFTRUE 10658
10656: GO 10862
10658: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10659: LD_ADDR_VAR 0 2
10663: PUSH
10664: LD_INT 2
10666: PUSH
10667: LD_INT 3
10669: PUSH
10670: LD_INT 4
10672: PUSH
10673: LD_INT 5
10675: PUSH
10676: LD_INT 6
10678: PUSH
10679: LD_INT 7
10681: PUSH
10682: LD_INT 8
10684: PUSH
10685: LD_INT 9
10687: PUSH
10688: LD_INT 10
10690: PUSH
10691: LD_INT 11
10693: PUSH
10694: LD_INT 12
10696: PUSH
10697: LD_INT 13
10699: PUSH
10700: LD_INT 14
10702: PUSH
10703: LD_INT 15
10705: PUSH
10706: LD_INT 16
10708: PUSH
10709: LD_INT 17
10711: PUSH
10712: LD_INT 18
10714: PUSH
10715: LD_INT 19
10717: PUSH
10718: LD_INT 20
10720: PUSH
10721: LD_INT 21
10723: PUSH
10724: LD_INT 22
10726: PUSH
10727: LD_INT 23
10729: PUSH
10730: LD_INT 24
10732: PUSH
10733: LD_INT 25
10735: PUSH
10736: LD_INT 26
10738: PUSH
10739: LD_INT 28
10741: PUSH
10742: LD_INT 30
10744: PUSH
10745: LD_INT 31
10747: PUSH
10748: LD_INT 32
10750: PUSH
10751: LD_INT 34
10753: PUSH
10754: LD_INT 36
10756: PUSH
10757: EMPTY
10758: LIST
10759: LIST
10760: LIST
10761: LIST
10762: LIST
10763: LIST
10764: LIST
10765: LIST
10766: LIST
10767: LIST
10768: LIST
10769: LIST
10770: LIST
10771: LIST
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: PUSH
10790: LD_INT 101
10792: PUSH
10793: LD_INT 102
10795: PUSH
10796: LD_INT 103
10798: PUSH
10799: LD_INT 104
10801: PUSH
10802: LD_INT 105
10804: PUSH
10805: LD_INT 106
10807: PUSH
10808: LD_INT 107
10810: PUSH
10811: LD_INT 108
10813: PUSH
10814: LD_INT 109
10816: PUSH
10817: LD_INT 110
10819: PUSH
10820: LD_INT 111
10822: PUSH
10823: LD_INT 112
10825: PUSH
10826: LD_INT 114
10828: PUSH
10829: LD_INT 116
10831: PUSH
10832: LD_INT 117
10834: PUSH
10835: LD_INT 118
10837: PUSH
10838: EMPTY
10839: LIST
10840: LIST
10841: LIST
10842: LIST
10843: LIST
10844: LIST
10845: LIST
10846: LIST
10847: LIST
10848: LIST
10849: LIST
10850: LIST
10851: LIST
10852: LIST
10853: LIST
10854: LIST
10855: PUSH
10856: EMPTY
10857: LIST
10858: LIST
10859: ST_TO_ADDR
10860: GO 12543
10862: LD_INT 12
10864: DOUBLE
10865: EQUAL
10866: IFTRUE 10870
10868: GO 11090
10870: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10871: LD_ADDR_VAR 0 2
10875: PUSH
10876: LD_INT 1
10878: PUSH
10879: LD_INT 2
10881: PUSH
10882: LD_INT 3
10884: PUSH
10885: LD_INT 4
10887: PUSH
10888: LD_INT 5
10890: PUSH
10891: LD_INT 6
10893: PUSH
10894: LD_INT 7
10896: PUSH
10897: LD_INT 8
10899: PUSH
10900: LD_INT 9
10902: PUSH
10903: LD_INT 10
10905: PUSH
10906: LD_INT 11
10908: PUSH
10909: LD_INT 12
10911: PUSH
10912: LD_INT 13
10914: PUSH
10915: LD_INT 14
10917: PUSH
10918: LD_INT 15
10920: PUSH
10921: LD_INT 16
10923: PUSH
10924: LD_INT 17
10926: PUSH
10927: LD_INT 18
10929: PUSH
10930: LD_INT 19
10932: PUSH
10933: LD_INT 20
10935: PUSH
10936: LD_INT 21
10938: PUSH
10939: LD_INT 22
10941: PUSH
10942: LD_INT 23
10944: PUSH
10945: LD_INT 24
10947: PUSH
10948: LD_INT 25
10950: PUSH
10951: LD_INT 26
10953: PUSH
10954: LD_INT 27
10956: PUSH
10957: LD_INT 28
10959: PUSH
10960: LD_INT 30
10962: PUSH
10963: LD_INT 31
10965: PUSH
10966: LD_INT 32
10968: PUSH
10969: LD_INT 33
10971: PUSH
10972: LD_INT 34
10974: PUSH
10975: LD_INT 36
10977: PUSH
10978: EMPTY
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: LIST
11006: LIST
11007: LIST
11008: LIST
11009: LIST
11010: LIST
11011: LIST
11012: LIST
11013: PUSH
11014: LD_INT 101
11016: PUSH
11017: LD_INT 102
11019: PUSH
11020: LD_INT 103
11022: PUSH
11023: LD_INT 104
11025: PUSH
11026: LD_INT 105
11028: PUSH
11029: LD_INT 106
11031: PUSH
11032: LD_INT 107
11034: PUSH
11035: LD_INT 108
11037: PUSH
11038: LD_INT 109
11040: PUSH
11041: LD_INT 110
11043: PUSH
11044: LD_INT 111
11046: PUSH
11047: LD_INT 112
11049: PUSH
11050: LD_INT 113
11052: PUSH
11053: LD_INT 114
11055: PUSH
11056: LD_INT 116
11058: PUSH
11059: LD_INT 117
11061: PUSH
11062: LD_INT 118
11064: PUSH
11065: EMPTY
11066: LIST
11067: LIST
11068: LIST
11069: LIST
11070: LIST
11071: LIST
11072: LIST
11073: LIST
11074: LIST
11075: LIST
11076: LIST
11077: LIST
11078: LIST
11079: LIST
11080: LIST
11081: LIST
11082: LIST
11083: PUSH
11084: EMPTY
11085: LIST
11086: LIST
11087: ST_TO_ADDR
11088: GO 12543
11090: LD_INT 13
11092: DOUBLE
11093: EQUAL
11094: IFTRUE 11098
11096: GO 11306
11098: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
11099: LD_ADDR_VAR 0 2
11103: PUSH
11104: LD_INT 1
11106: PUSH
11107: LD_INT 2
11109: PUSH
11110: LD_INT 3
11112: PUSH
11113: LD_INT 4
11115: PUSH
11116: LD_INT 5
11118: PUSH
11119: LD_INT 8
11121: PUSH
11122: LD_INT 9
11124: PUSH
11125: LD_INT 10
11127: PUSH
11128: LD_INT 11
11130: PUSH
11131: LD_INT 12
11133: PUSH
11134: LD_INT 14
11136: PUSH
11137: LD_INT 15
11139: PUSH
11140: LD_INT 16
11142: PUSH
11143: LD_INT 17
11145: PUSH
11146: LD_INT 18
11148: PUSH
11149: LD_INT 19
11151: PUSH
11152: LD_INT 20
11154: PUSH
11155: LD_INT 21
11157: PUSH
11158: LD_INT 22
11160: PUSH
11161: LD_INT 23
11163: PUSH
11164: LD_INT 24
11166: PUSH
11167: LD_INT 25
11169: PUSH
11170: LD_INT 26
11172: PUSH
11173: LD_INT 27
11175: PUSH
11176: LD_INT 28
11178: PUSH
11179: LD_INT 30
11181: PUSH
11182: LD_INT 31
11184: PUSH
11185: LD_INT 32
11187: PUSH
11188: LD_INT 33
11190: PUSH
11191: LD_INT 34
11193: PUSH
11194: LD_INT 36
11196: PUSH
11197: EMPTY
11198: LIST
11199: LIST
11200: LIST
11201: LIST
11202: LIST
11203: LIST
11204: LIST
11205: LIST
11206: LIST
11207: LIST
11208: LIST
11209: LIST
11210: LIST
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: PUSH
11230: LD_INT 101
11232: PUSH
11233: LD_INT 102
11235: PUSH
11236: LD_INT 103
11238: PUSH
11239: LD_INT 104
11241: PUSH
11242: LD_INT 105
11244: PUSH
11245: LD_INT 106
11247: PUSH
11248: LD_INT 107
11250: PUSH
11251: LD_INT 108
11253: PUSH
11254: LD_INT 109
11256: PUSH
11257: LD_INT 110
11259: PUSH
11260: LD_INT 111
11262: PUSH
11263: LD_INT 112
11265: PUSH
11266: LD_INT 113
11268: PUSH
11269: LD_INT 114
11271: PUSH
11272: LD_INT 116
11274: PUSH
11275: LD_INT 117
11277: PUSH
11278: LD_INT 118
11280: PUSH
11281: EMPTY
11282: LIST
11283: LIST
11284: LIST
11285: LIST
11286: LIST
11287: LIST
11288: LIST
11289: LIST
11290: LIST
11291: LIST
11292: LIST
11293: LIST
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: PUSH
11300: EMPTY
11301: LIST
11302: LIST
11303: ST_TO_ADDR
11304: GO 12543
11306: LD_INT 14
11308: DOUBLE
11309: EQUAL
11310: IFTRUE 11314
11312: GO 11538
11314: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
11315: LD_ADDR_VAR 0 2
11319: PUSH
11320: LD_INT 1
11322: PUSH
11323: LD_INT 2
11325: PUSH
11326: LD_INT 3
11328: PUSH
11329: LD_INT 4
11331: PUSH
11332: LD_INT 5
11334: PUSH
11335: LD_INT 6
11337: PUSH
11338: LD_INT 7
11340: PUSH
11341: LD_INT 8
11343: PUSH
11344: LD_INT 9
11346: PUSH
11347: LD_INT 10
11349: PUSH
11350: LD_INT 11
11352: PUSH
11353: LD_INT 12
11355: PUSH
11356: LD_INT 13
11358: PUSH
11359: LD_INT 14
11361: PUSH
11362: LD_INT 15
11364: PUSH
11365: LD_INT 16
11367: PUSH
11368: LD_INT 17
11370: PUSH
11371: LD_INT 18
11373: PUSH
11374: LD_INT 19
11376: PUSH
11377: LD_INT 20
11379: PUSH
11380: LD_INT 21
11382: PUSH
11383: LD_INT 22
11385: PUSH
11386: LD_INT 23
11388: PUSH
11389: LD_INT 24
11391: PUSH
11392: LD_INT 25
11394: PUSH
11395: LD_INT 26
11397: PUSH
11398: LD_INT 27
11400: PUSH
11401: LD_INT 28
11403: PUSH
11404: LD_INT 29
11406: PUSH
11407: LD_INT 30
11409: PUSH
11410: LD_INT 31
11412: PUSH
11413: LD_INT 32
11415: PUSH
11416: LD_INT 33
11418: PUSH
11419: LD_INT 34
11421: PUSH
11422: LD_INT 36
11424: PUSH
11425: EMPTY
11426: LIST
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: PUSH
11462: LD_INT 101
11464: PUSH
11465: LD_INT 102
11467: PUSH
11468: LD_INT 103
11470: PUSH
11471: LD_INT 104
11473: PUSH
11474: LD_INT 105
11476: PUSH
11477: LD_INT 106
11479: PUSH
11480: LD_INT 107
11482: PUSH
11483: LD_INT 108
11485: PUSH
11486: LD_INT 109
11488: PUSH
11489: LD_INT 110
11491: PUSH
11492: LD_INT 111
11494: PUSH
11495: LD_INT 112
11497: PUSH
11498: LD_INT 113
11500: PUSH
11501: LD_INT 114
11503: PUSH
11504: LD_INT 116
11506: PUSH
11507: LD_INT 117
11509: PUSH
11510: LD_INT 118
11512: PUSH
11513: EMPTY
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: LIST
11522: LIST
11523: LIST
11524: LIST
11525: LIST
11526: LIST
11527: LIST
11528: LIST
11529: LIST
11530: LIST
11531: PUSH
11532: EMPTY
11533: LIST
11534: LIST
11535: ST_TO_ADDR
11536: GO 12543
11538: LD_INT 15
11540: DOUBLE
11541: EQUAL
11542: IFTRUE 11546
11544: GO 11770
11546: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11547: LD_ADDR_VAR 0 2
11551: PUSH
11552: LD_INT 1
11554: PUSH
11555: LD_INT 2
11557: PUSH
11558: LD_INT 3
11560: PUSH
11561: LD_INT 4
11563: PUSH
11564: LD_INT 5
11566: PUSH
11567: LD_INT 6
11569: PUSH
11570: LD_INT 7
11572: PUSH
11573: LD_INT 8
11575: PUSH
11576: LD_INT 9
11578: PUSH
11579: LD_INT 10
11581: PUSH
11582: LD_INT 11
11584: PUSH
11585: LD_INT 12
11587: PUSH
11588: LD_INT 13
11590: PUSH
11591: LD_INT 14
11593: PUSH
11594: LD_INT 15
11596: PUSH
11597: LD_INT 16
11599: PUSH
11600: LD_INT 17
11602: PUSH
11603: LD_INT 18
11605: PUSH
11606: LD_INT 19
11608: PUSH
11609: LD_INT 20
11611: PUSH
11612: LD_INT 21
11614: PUSH
11615: LD_INT 22
11617: PUSH
11618: LD_INT 23
11620: PUSH
11621: LD_INT 24
11623: PUSH
11624: LD_INT 25
11626: PUSH
11627: LD_INT 26
11629: PUSH
11630: LD_INT 27
11632: PUSH
11633: LD_INT 28
11635: PUSH
11636: LD_INT 29
11638: PUSH
11639: LD_INT 30
11641: PUSH
11642: LD_INT 31
11644: PUSH
11645: LD_INT 32
11647: PUSH
11648: LD_INT 33
11650: PUSH
11651: LD_INT 34
11653: PUSH
11654: LD_INT 36
11656: PUSH
11657: EMPTY
11658: LIST
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: LIST
11682: LIST
11683: LIST
11684: LIST
11685: LIST
11686: LIST
11687: LIST
11688: LIST
11689: LIST
11690: LIST
11691: LIST
11692: LIST
11693: PUSH
11694: LD_INT 101
11696: PUSH
11697: LD_INT 102
11699: PUSH
11700: LD_INT 103
11702: PUSH
11703: LD_INT 104
11705: PUSH
11706: LD_INT 105
11708: PUSH
11709: LD_INT 106
11711: PUSH
11712: LD_INT 107
11714: PUSH
11715: LD_INT 108
11717: PUSH
11718: LD_INT 109
11720: PUSH
11721: LD_INT 110
11723: PUSH
11724: LD_INT 111
11726: PUSH
11727: LD_INT 112
11729: PUSH
11730: LD_INT 113
11732: PUSH
11733: LD_INT 114
11735: PUSH
11736: LD_INT 116
11738: PUSH
11739: LD_INT 117
11741: PUSH
11742: LD_INT 118
11744: PUSH
11745: EMPTY
11746: LIST
11747: LIST
11748: LIST
11749: LIST
11750: LIST
11751: LIST
11752: LIST
11753: LIST
11754: LIST
11755: LIST
11756: LIST
11757: LIST
11758: LIST
11759: LIST
11760: LIST
11761: LIST
11762: LIST
11763: PUSH
11764: EMPTY
11765: LIST
11766: LIST
11767: ST_TO_ADDR
11768: GO 12543
11770: LD_INT 16
11772: DOUBLE
11773: EQUAL
11774: IFTRUE 11778
11776: GO 11914
11778: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11779: LD_ADDR_VAR 0 2
11783: PUSH
11784: LD_INT 2
11786: PUSH
11787: LD_INT 4
11789: PUSH
11790: LD_INT 5
11792: PUSH
11793: LD_INT 7
11795: PUSH
11796: LD_INT 11
11798: PUSH
11799: LD_INT 12
11801: PUSH
11802: LD_INT 15
11804: PUSH
11805: LD_INT 16
11807: PUSH
11808: LD_INT 20
11810: PUSH
11811: LD_INT 21
11813: PUSH
11814: LD_INT 22
11816: PUSH
11817: LD_INT 23
11819: PUSH
11820: LD_INT 25
11822: PUSH
11823: LD_INT 26
11825: PUSH
11826: LD_INT 30
11828: PUSH
11829: LD_INT 31
11831: PUSH
11832: LD_INT 32
11834: PUSH
11835: LD_INT 33
11837: PUSH
11838: LD_INT 34
11840: PUSH
11841: EMPTY
11842: LIST
11843: LIST
11844: LIST
11845: LIST
11846: LIST
11847: LIST
11848: LIST
11849: LIST
11850: LIST
11851: LIST
11852: LIST
11853: LIST
11854: LIST
11855: LIST
11856: LIST
11857: LIST
11858: LIST
11859: LIST
11860: LIST
11861: PUSH
11862: LD_INT 101
11864: PUSH
11865: LD_INT 102
11867: PUSH
11868: LD_INT 103
11870: PUSH
11871: LD_INT 106
11873: PUSH
11874: LD_INT 108
11876: PUSH
11877: LD_INT 112
11879: PUSH
11880: LD_INT 113
11882: PUSH
11883: LD_INT 114
11885: PUSH
11886: LD_INT 116
11888: PUSH
11889: LD_INT 117
11891: PUSH
11892: LD_INT 118
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: LIST
11904: LIST
11905: LIST
11906: LIST
11907: PUSH
11908: EMPTY
11909: LIST
11910: LIST
11911: ST_TO_ADDR
11912: GO 12543
11914: LD_INT 17
11916: DOUBLE
11917: EQUAL
11918: IFTRUE 11922
11920: GO 12146
11922: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11923: LD_ADDR_VAR 0 2
11927: PUSH
11928: LD_INT 1
11930: PUSH
11931: LD_INT 2
11933: PUSH
11934: LD_INT 3
11936: PUSH
11937: LD_INT 4
11939: PUSH
11940: LD_INT 5
11942: PUSH
11943: LD_INT 6
11945: PUSH
11946: LD_INT 7
11948: PUSH
11949: LD_INT 8
11951: PUSH
11952: LD_INT 9
11954: PUSH
11955: LD_INT 10
11957: PUSH
11958: LD_INT 11
11960: PUSH
11961: LD_INT 12
11963: PUSH
11964: LD_INT 13
11966: PUSH
11967: LD_INT 14
11969: PUSH
11970: LD_INT 15
11972: PUSH
11973: LD_INT 16
11975: PUSH
11976: LD_INT 17
11978: PUSH
11979: LD_INT 18
11981: PUSH
11982: LD_INT 19
11984: PUSH
11985: LD_INT 20
11987: PUSH
11988: LD_INT 21
11990: PUSH
11991: LD_INT 22
11993: PUSH
11994: LD_INT 23
11996: PUSH
11997: LD_INT 24
11999: PUSH
12000: LD_INT 25
12002: PUSH
12003: LD_INT 26
12005: PUSH
12006: LD_INT 27
12008: PUSH
12009: LD_INT 28
12011: PUSH
12012: LD_INT 29
12014: PUSH
12015: LD_INT 30
12017: PUSH
12018: LD_INT 31
12020: PUSH
12021: LD_INT 32
12023: PUSH
12024: LD_INT 33
12026: PUSH
12027: LD_INT 34
12029: PUSH
12030: LD_INT 36
12032: PUSH
12033: EMPTY
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: LIST
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: LIST
12045: LIST
12046: LIST
12047: LIST
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: LIST
12057: LIST
12058: LIST
12059: LIST
12060: LIST
12061: LIST
12062: LIST
12063: LIST
12064: LIST
12065: LIST
12066: LIST
12067: LIST
12068: LIST
12069: PUSH
12070: LD_INT 101
12072: PUSH
12073: LD_INT 102
12075: PUSH
12076: LD_INT 103
12078: PUSH
12079: LD_INT 104
12081: PUSH
12082: LD_INT 105
12084: PUSH
12085: LD_INT 106
12087: PUSH
12088: LD_INT 107
12090: PUSH
12091: LD_INT 108
12093: PUSH
12094: LD_INT 109
12096: PUSH
12097: LD_INT 110
12099: PUSH
12100: LD_INT 111
12102: PUSH
12103: LD_INT 112
12105: PUSH
12106: LD_INT 113
12108: PUSH
12109: LD_INT 114
12111: PUSH
12112: LD_INT 116
12114: PUSH
12115: LD_INT 117
12117: PUSH
12118: LD_INT 118
12120: PUSH
12121: EMPTY
12122: LIST
12123: LIST
12124: LIST
12125: LIST
12126: LIST
12127: LIST
12128: LIST
12129: LIST
12130: LIST
12131: LIST
12132: LIST
12133: LIST
12134: LIST
12135: LIST
12136: LIST
12137: LIST
12138: LIST
12139: PUSH
12140: EMPTY
12141: LIST
12142: LIST
12143: ST_TO_ADDR
12144: GO 12543
12146: LD_INT 18
12148: DOUBLE
12149: EQUAL
12150: IFTRUE 12154
12152: GO 12302
12154: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
12155: LD_ADDR_VAR 0 2
12159: PUSH
12160: LD_INT 2
12162: PUSH
12163: LD_INT 4
12165: PUSH
12166: LD_INT 5
12168: PUSH
12169: LD_INT 7
12171: PUSH
12172: LD_INT 11
12174: PUSH
12175: LD_INT 12
12177: PUSH
12178: LD_INT 15
12180: PUSH
12181: LD_INT 16
12183: PUSH
12184: LD_INT 20
12186: PUSH
12187: LD_INT 21
12189: PUSH
12190: LD_INT 22
12192: PUSH
12193: LD_INT 23
12195: PUSH
12196: LD_INT 25
12198: PUSH
12199: LD_INT 26
12201: PUSH
12202: LD_INT 30
12204: PUSH
12205: LD_INT 31
12207: PUSH
12208: LD_INT 32
12210: PUSH
12211: LD_INT 33
12213: PUSH
12214: LD_INT 34
12216: PUSH
12217: LD_INT 35
12219: PUSH
12220: LD_INT 36
12222: PUSH
12223: EMPTY
12224: LIST
12225: LIST
12226: LIST
12227: LIST
12228: LIST
12229: LIST
12230: LIST
12231: LIST
12232: LIST
12233: LIST
12234: LIST
12235: LIST
12236: LIST
12237: LIST
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: LIST
12245: PUSH
12246: LD_INT 101
12248: PUSH
12249: LD_INT 102
12251: PUSH
12252: LD_INT 103
12254: PUSH
12255: LD_INT 106
12257: PUSH
12258: LD_INT 108
12260: PUSH
12261: LD_INT 112
12263: PUSH
12264: LD_INT 113
12266: PUSH
12267: LD_INT 114
12269: PUSH
12270: LD_INT 115
12272: PUSH
12273: LD_INT 116
12275: PUSH
12276: LD_INT 117
12278: PUSH
12279: LD_INT 118
12281: PUSH
12282: EMPTY
12283: LIST
12284: LIST
12285: LIST
12286: LIST
12287: LIST
12288: LIST
12289: LIST
12290: LIST
12291: LIST
12292: LIST
12293: LIST
12294: LIST
12295: PUSH
12296: EMPTY
12297: LIST
12298: LIST
12299: ST_TO_ADDR
12300: GO 12543
12302: LD_INT 19
12304: DOUBLE
12305: EQUAL
12306: IFTRUE 12310
12308: GO 12542
12310: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
12311: LD_ADDR_VAR 0 2
12315: PUSH
12316: LD_INT 1
12318: PUSH
12319: LD_INT 2
12321: PUSH
12322: LD_INT 3
12324: PUSH
12325: LD_INT 4
12327: PUSH
12328: LD_INT 5
12330: PUSH
12331: LD_INT 6
12333: PUSH
12334: LD_INT 7
12336: PUSH
12337: LD_INT 8
12339: PUSH
12340: LD_INT 9
12342: PUSH
12343: LD_INT 10
12345: PUSH
12346: LD_INT 11
12348: PUSH
12349: LD_INT 12
12351: PUSH
12352: LD_INT 13
12354: PUSH
12355: LD_INT 14
12357: PUSH
12358: LD_INT 15
12360: PUSH
12361: LD_INT 16
12363: PUSH
12364: LD_INT 17
12366: PUSH
12367: LD_INT 18
12369: PUSH
12370: LD_INT 19
12372: PUSH
12373: LD_INT 20
12375: PUSH
12376: LD_INT 21
12378: PUSH
12379: LD_INT 22
12381: PUSH
12382: LD_INT 23
12384: PUSH
12385: LD_INT 24
12387: PUSH
12388: LD_INT 25
12390: PUSH
12391: LD_INT 26
12393: PUSH
12394: LD_INT 27
12396: PUSH
12397: LD_INT 28
12399: PUSH
12400: LD_INT 29
12402: PUSH
12403: LD_INT 30
12405: PUSH
12406: LD_INT 31
12408: PUSH
12409: LD_INT 32
12411: PUSH
12412: LD_INT 33
12414: PUSH
12415: LD_INT 34
12417: PUSH
12418: LD_INT 35
12420: PUSH
12421: LD_INT 36
12423: PUSH
12424: EMPTY
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: LIST
12446: LIST
12447: LIST
12448: LIST
12449: LIST
12450: LIST
12451: LIST
12452: LIST
12453: LIST
12454: LIST
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: PUSH
12462: LD_INT 101
12464: PUSH
12465: LD_INT 102
12467: PUSH
12468: LD_INT 103
12470: PUSH
12471: LD_INT 104
12473: PUSH
12474: LD_INT 105
12476: PUSH
12477: LD_INT 106
12479: PUSH
12480: LD_INT 107
12482: PUSH
12483: LD_INT 108
12485: PUSH
12486: LD_INT 109
12488: PUSH
12489: LD_INT 110
12491: PUSH
12492: LD_INT 111
12494: PUSH
12495: LD_INT 112
12497: PUSH
12498: LD_INT 113
12500: PUSH
12501: LD_INT 114
12503: PUSH
12504: LD_INT 115
12506: PUSH
12507: LD_INT 116
12509: PUSH
12510: LD_INT 117
12512: PUSH
12513: LD_INT 118
12515: PUSH
12516: EMPTY
12517: LIST
12518: LIST
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: LIST
12530: LIST
12531: LIST
12532: LIST
12533: LIST
12534: LIST
12535: PUSH
12536: EMPTY
12537: LIST
12538: LIST
12539: ST_TO_ADDR
12540: GO 12543
12542: POP
// end else
12543: GO 12774
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12545: LD_ADDR_VAR 0 2
12549: PUSH
12550: LD_INT 1
12552: PUSH
12553: LD_INT 2
12555: PUSH
12556: LD_INT 3
12558: PUSH
12559: LD_INT 4
12561: PUSH
12562: LD_INT 5
12564: PUSH
12565: LD_INT 6
12567: PUSH
12568: LD_INT 7
12570: PUSH
12571: LD_INT 8
12573: PUSH
12574: LD_INT 9
12576: PUSH
12577: LD_INT 10
12579: PUSH
12580: LD_INT 11
12582: PUSH
12583: LD_INT 12
12585: PUSH
12586: LD_INT 13
12588: PUSH
12589: LD_INT 14
12591: PUSH
12592: LD_INT 15
12594: PUSH
12595: LD_INT 16
12597: PUSH
12598: LD_INT 17
12600: PUSH
12601: LD_INT 18
12603: PUSH
12604: LD_INT 19
12606: PUSH
12607: LD_INT 20
12609: PUSH
12610: LD_INT 21
12612: PUSH
12613: LD_INT 22
12615: PUSH
12616: LD_INT 23
12618: PUSH
12619: LD_INT 24
12621: PUSH
12622: LD_INT 25
12624: PUSH
12625: LD_INT 26
12627: PUSH
12628: LD_INT 27
12630: PUSH
12631: LD_INT 28
12633: PUSH
12634: LD_INT 29
12636: PUSH
12637: LD_INT 30
12639: PUSH
12640: LD_INT 31
12642: PUSH
12643: LD_INT 32
12645: PUSH
12646: LD_INT 33
12648: PUSH
12649: LD_INT 34
12651: PUSH
12652: LD_INT 35
12654: PUSH
12655: LD_INT 36
12657: PUSH
12658: EMPTY
12659: LIST
12660: LIST
12661: LIST
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: LIST
12681: LIST
12682: LIST
12683: LIST
12684: LIST
12685: LIST
12686: LIST
12687: LIST
12688: LIST
12689: LIST
12690: LIST
12691: LIST
12692: LIST
12693: LIST
12694: LIST
12695: PUSH
12696: LD_INT 101
12698: PUSH
12699: LD_INT 102
12701: PUSH
12702: LD_INT 103
12704: PUSH
12705: LD_INT 104
12707: PUSH
12708: LD_INT 105
12710: PUSH
12711: LD_INT 106
12713: PUSH
12714: LD_INT 107
12716: PUSH
12717: LD_INT 108
12719: PUSH
12720: LD_INT 109
12722: PUSH
12723: LD_INT 110
12725: PUSH
12726: LD_INT 111
12728: PUSH
12729: LD_INT 112
12731: PUSH
12732: LD_INT 113
12734: PUSH
12735: LD_INT 114
12737: PUSH
12738: LD_INT 115
12740: PUSH
12741: LD_INT 116
12743: PUSH
12744: LD_INT 117
12746: PUSH
12747: LD_INT 118
12749: PUSH
12750: EMPTY
12751: LIST
12752: LIST
12753: LIST
12754: LIST
12755: LIST
12756: LIST
12757: LIST
12758: LIST
12759: LIST
12760: LIST
12761: LIST
12762: LIST
12763: LIST
12764: LIST
12765: LIST
12766: LIST
12767: LIST
12768: LIST
12769: PUSH
12770: EMPTY
12771: LIST
12772: LIST
12773: ST_TO_ADDR
// if result then
12774: LD_VAR 0 2
12778: IFFALSE 13564
// begin normal :=  ;
12780: LD_ADDR_VAR 0 5
12784: PUSH
12785: LD_STRING 
12787: ST_TO_ADDR
// hardcore :=  ;
12788: LD_ADDR_VAR 0 6
12792: PUSH
12793: LD_STRING 
12795: ST_TO_ADDR
// active :=  ;
12796: LD_ADDR_VAR 0 7
12800: PUSH
12801: LD_STRING 
12803: ST_TO_ADDR
// for i = 1 to normalCounter do
12804: LD_ADDR_VAR 0 8
12808: PUSH
12809: DOUBLE
12810: LD_INT 1
12812: DEC
12813: ST_TO_ADDR
12814: LD_EXP 23
12818: PUSH
12819: FOR_TO
12820: IFFALSE 12921
// begin tmp := 0 ;
12822: LD_ADDR_VAR 0 3
12826: PUSH
12827: LD_STRING 0
12829: ST_TO_ADDR
// if result [ 1 ] then
12830: LD_VAR 0 2
12834: PUSH
12835: LD_INT 1
12837: ARRAY
12838: IFFALSE 12903
// if result [ 1 ] [ 1 ] = i then
12840: LD_VAR 0 2
12844: PUSH
12845: LD_INT 1
12847: ARRAY
12848: PUSH
12849: LD_INT 1
12851: ARRAY
12852: PUSH
12853: LD_VAR 0 8
12857: EQUAL
12858: IFFALSE 12903
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12860: LD_ADDR_VAR 0 2
12864: PUSH
12865: LD_VAR 0 2
12869: PPUSH
12870: LD_INT 1
12872: PPUSH
12873: LD_VAR 0 2
12877: PUSH
12878: LD_INT 1
12880: ARRAY
12881: PPUSH
12882: LD_INT 1
12884: PPUSH
12885: CALL_OW 3
12889: PPUSH
12890: CALL_OW 1
12894: ST_TO_ADDR
// tmp := 1 ;
12895: LD_ADDR_VAR 0 3
12899: PUSH
12900: LD_STRING 1
12902: ST_TO_ADDR
// end ; normal := normal & tmp ;
12903: LD_ADDR_VAR 0 5
12907: PUSH
12908: LD_VAR 0 5
12912: PUSH
12913: LD_VAR 0 3
12917: STR
12918: ST_TO_ADDR
// end ;
12919: GO 12819
12921: POP
12922: POP
// for i = 1 to hardcoreCounter do
12923: LD_ADDR_VAR 0 8
12927: PUSH
12928: DOUBLE
12929: LD_INT 1
12931: DEC
12932: ST_TO_ADDR
12933: LD_EXP 24
12937: PUSH
12938: FOR_TO
12939: IFFALSE 13044
// begin tmp := 0 ;
12941: LD_ADDR_VAR 0 3
12945: PUSH
12946: LD_STRING 0
12948: ST_TO_ADDR
// if result [ 2 ] then
12949: LD_VAR 0 2
12953: PUSH
12954: LD_INT 2
12956: ARRAY
12957: IFFALSE 13026
// if result [ 2 ] [ 1 ] = 100 + i then
12959: LD_VAR 0 2
12963: PUSH
12964: LD_INT 2
12966: ARRAY
12967: PUSH
12968: LD_INT 1
12970: ARRAY
12971: PUSH
12972: LD_INT 100
12974: PUSH
12975: LD_VAR 0 8
12979: PLUS
12980: EQUAL
12981: IFFALSE 13026
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12983: LD_ADDR_VAR 0 2
12987: PUSH
12988: LD_VAR 0 2
12992: PPUSH
12993: LD_INT 2
12995: PPUSH
12996: LD_VAR 0 2
13000: PUSH
13001: LD_INT 2
13003: ARRAY
13004: PPUSH
13005: LD_INT 1
13007: PPUSH
13008: CALL_OW 3
13012: PPUSH
13013: CALL_OW 1
13017: ST_TO_ADDR
// tmp := 1 ;
13018: LD_ADDR_VAR 0 3
13022: PUSH
13023: LD_STRING 1
13025: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13026: LD_ADDR_VAR 0 6
13030: PUSH
13031: LD_VAR 0 6
13035: PUSH
13036: LD_VAR 0 3
13040: STR
13041: ST_TO_ADDR
// end ;
13042: GO 12938
13044: POP
13045: POP
// if isGameLoad then
13046: LD_VAR 0 1
13050: IFFALSE 13525
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
13052: LD_ADDR_VAR 0 4
13056: PUSH
13057: LD_EXP 27
13061: PUSH
13062: LD_EXP 26
13066: PUSH
13067: LD_EXP 28
13071: PUSH
13072: LD_EXP 25
13076: PUSH
13077: LD_EXP 29
13081: PUSH
13082: LD_EXP 30
13086: PUSH
13087: LD_EXP 31
13091: PUSH
13092: LD_EXP 32
13096: PUSH
13097: LD_EXP 33
13101: PUSH
13102: LD_EXP 34
13106: PUSH
13107: LD_EXP 35
13111: PUSH
13112: LD_EXP 36
13116: PUSH
13117: LD_EXP 37
13121: PUSH
13122: LD_EXP 38
13126: PUSH
13127: LD_EXP 46
13131: PUSH
13132: LD_EXP 47
13136: PUSH
13137: LD_EXP 48
13141: PUSH
13142: LD_EXP 49
13146: PUSH
13147: LD_EXP 51
13151: PUSH
13152: LD_EXP 52
13156: PUSH
13157: LD_EXP 53
13161: PUSH
13162: LD_EXP 56
13166: PUSH
13167: LD_EXP 58
13171: PUSH
13172: LD_EXP 59
13176: PUSH
13177: LD_EXP 60
13181: PUSH
13182: LD_EXP 62
13186: PUSH
13187: LD_EXP 63
13191: PUSH
13192: LD_EXP 66
13196: PUSH
13197: LD_EXP 67
13201: PUSH
13202: LD_EXP 68
13206: PUSH
13207: LD_EXP 69
13211: PUSH
13212: LD_EXP 70
13216: PUSH
13217: LD_EXP 71
13221: PUSH
13222: LD_EXP 72
13226: PUSH
13227: LD_EXP 73
13231: PUSH
13232: LD_EXP 74
13236: PUSH
13237: LD_EXP 39
13241: PUSH
13242: LD_EXP 40
13246: PUSH
13247: LD_EXP 43
13251: PUSH
13252: LD_EXP 44
13256: PUSH
13257: LD_EXP 45
13261: PUSH
13262: LD_EXP 41
13266: PUSH
13267: LD_EXP 42
13271: PUSH
13272: LD_EXP 50
13276: PUSH
13277: LD_EXP 54
13281: PUSH
13282: LD_EXP 55
13286: PUSH
13287: LD_EXP 57
13291: PUSH
13292: LD_EXP 61
13296: PUSH
13297: LD_EXP 64
13301: PUSH
13302: LD_EXP 65
13306: PUSH
13307: LD_EXP 75
13311: PUSH
13312: LD_EXP 76
13316: PUSH
13317: LD_EXP 77
13321: PUSH
13322: LD_EXP 78
13326: PUSH
13327: EMPTY
13328: LIST
13329: LIST
13330: LIST
13331: LIST
13332: LIST
13333: LIST
13334: LIST
13335: LIST
13336: LIST
13337: LIST
13338: LIST
13339: LIST
13340: LIST
13341: LIST
13342: LIST
13343: LIST
13344: LIST
13345: LIST
13346: LIST
13347: LIST
13348: LIST
13349: LIST
13350: LIST
13351: LIST
13352: LIST
13353: LIST
13354: LIST
13355: LIST
13356: LIST
13357: LIST
13358: LIST
13359: LIST
13360: LIST
13361: LIST
13362: LIST
13363: LIST
13364: LIST
13365: LIST
13366: LIST
13367: LIST
13368: LIST
13369: LIST
13370: LIST
13371: LIST
13372: LIST
13373: LIST
13374: LIST
13375: LIST
13376: LIST
13377: LIST
13378: LIST
13379: LIST
13380: LIST
13381: LIST
13382: ST_TO_ADDR
// tmp :=  ;
13383: LD_ADDR_VAR 0 3
13387: PUSH
13388: LD_STRING 
13390: ST_TO_ADDR
// for i = 1 to normalCounter do
13391: LD_ADDR_VAR 0 8
13395: PUSH
13396: DOUBLE
13397: LD_INT 1
13399: DEC
13400: ST_TO_ADDR
13401: LD_EXP 23
13405: PUSH
13406: FOR_TO
13407: IFFALSE 13443
// begin if flags [ i ] then
13409: LD_VAR 0 4
13413: PUSH
13414: LD_VAR 0 8
13418: ARRAY
13419: IFFALSE 13441
// tmp := tmp & i & ; ;
13421: LD_ADDR_VAR 0 3
13425: PUSH
13426: LD_VAR 0 3
13430: PUSH
13431: LD_VAR 0 8
13435: STR
13436: PUSH
13437: LD_STRING ;
13439: STR
13440: ST_TO_ADDR
// end ;
13441: GO 13406
13443: POP
13444: POP
// for i = 1 to hardcoreCounter do
13445: LD_ADDR_VAR 0 8
13449: PUSH
13450: DOUBLE
13451: LD_INT 1
13453: DEC
13454: ST_TO_ADDR
13455: LD_EXP 24
13459: PUSH
13460: FOR_TO
13461: IFFALSE 13507
// begin if flags [ normalCounter + i ] then
13463: LD_VAR 0 4
13467: PUSH
13468: LD_EXP 23
13472: PUSH
13473: LD_VAR 0 8
13477: PLUS
13478: ARRAY
13479: IFFALSE 13505
// tmp := tmp & ( 100 + i ) & ; ;
13481: LD_ADDR_VAR 0 3
13485: PUSH
13486: LD_VAR 0 3
13490: PUSH
13491: LD_INT 100
13493: PUSH
13494: LD_VAR 0 8
13498: PLUS
13499: STR
13500: PUSH
13501: LD_STRING ;
13503: STR
13504: ST_TO_ADDR
// end ;
13505: GO 13460
13507: POP
13508: POP
// if tmp then
13509: LD_VAR 0 3
13513: IFFALSE 13525
// active := tmp ;
13515: LD_ADDR_VAR 0 7
13519: PUSH
13520: LD_VAR 0 3
13524: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13525: LD_STRING getStreamItemsFromMission("
13527: PUSH
13528: LD_VAR 0 5
13532: STR
13533: PUSH
13534: LD_STRING ","
13536: STR
13537: PUSH
13538: LD_VAR 0 6
13542: STR
13543: PUSH
13544: LD_STRING ","
13546: STR
13547: PUSH
13548: LD_VAR 0 7
13552: STR
13553: PUSH
13554: LD_STRING ")
13556: STR
13557: PPUSH
13558: CALL_OW 559
// end else
13562: GO 13571
// ToLua ( getStreamItemsFromMission("","","") ) ;
13564: LD_STRING getStreamItemsFromMission("","","")
13566: PPUSH
13567: CALL_OW 559
// end ;
13571: LD_VAR 0 2
13575: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13576: LD_EXP 22
13580: PUSH
13581: LD_EXP 27
13585: AND
13586: IFFALSE 13710
13588: GO 13590
13590: DISABLE
13591: LD_INT 0
13593: PPUSH
13594: PPUSH
// begin enable ;
13595: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13596: LD_ADDR_VAR 0 2
13600: PUSH
13601: LD_INT 22
13603: PUSH
13604: LD_OWVAR 2
13608: PUSH
13609: EMPTY
13610: LIST
13611: LIST
13612: PUSH
13613: LD_INT 2
13615: PUSH
13616: LD_INT 34
13618: PUSH
13619: LD_INT 7
13621: PUSH
13622: EMPTY
13623: LIST
13624: LIST
13625: PUSH
13626: LD_INT 34
13628: PUSH
13629: LD_INT 45
13631: PUSH
13632: EMPTY
13633: LIST
13634: LIST
13635: PUSH
13636: LD_INT 34
13638: PUSH
13639: LD_INT 28
13641: PUSH
13642: EMPTY
13643: LIST
13644: LIST
13645: PUSH
13646: LD_INT 34
13648: PUSH
13649: LD_INT 47
13651: PUSH
13652: EMPTY
13653: LIST
13654: LIST
13655: PUSH
13656: EMPTY
13657: LIST
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: PUSH
13663: EMPTY
13664: LIST
13665: LIST
13666: PPUSH
13667: CALL_OW 69
13671: ST_TO_ADDR
// if not tmp then
13672: LD_VAR 0 2
13676: NOT
13677: IFFALSE 13681
// exit ;
13679: GO 13710
// for i in tmp do
13681: LD_ADDR_VAR 0 1
13685: PUSH
13686: LD_VAR 0 2
13690: PUSH
13691: FOR_IN
13692: IFFALSE 13708
// begin SetLives ( i , 0 ) ;
13694: LD_VAR 0 1
13698: PPUSH
13699: LD_INT 0
13701: PPUSH
13702: CALL_OW 234
// end ;
13706: GO 13691
13708: POP
13709: POP
// end ;
13710: PPOPN 2
13712: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13713: LD_EXP 22
13717: PUSH
13718: LD_EXP 28
13722: AND
13723: IFFALSE 13807
13725: GO 13727
13727: DISABLE
13728: LD_INT 0
13730: PPUSH
13731: PPUSH
// begin enable ;
13732: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13733: LD_ADDR_VAR 0 2
13737: PUSH
13738: LD_INT 22
13740: PUSH
13741: LD_OWVAR 2
13745: PUSH
13746: EMPTY
13747: LIST
13748: LIST
13749: PUSH
13750: LD_INT 32
13752: PUSH
13753: LD_INT 3
13755: PUSH
13756: EMPTY
13757: LIST
13758: LIST
13759: PUSH
13760: EMPTY
13761: LIST
13762: LIST
13763: PPUSH
13764: CALL_OW 69
13768: ST_TO_ADDR
// if not tmp then
13769: LD_VAR 0 2
13773: NOT
13774: IFFALSE 13778
// exit ;
13776: GO 13807
// for i in tmp do
13778: LD_ADDR_VAR 0 1
13782: PUSH
13783: LD_VAR 0 2
13787: PUSH
13788: FOR_IN
13789: IFFALSE 13805
// begin SetLives ( i , 0 ) ;
13791: LD_VAR 0 1
13795: PPUSH
13796: LD_INT 0
13798: PPUSH
13799: CALL_OW 234
// end ;
13803: GO 13788
13805: POP
13806: POP
// end ;
13807: PPOPN 2
13809: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13810: LD_EXP 22
13814: PUSH
13815: LD_EXP 25
13819: AND
13820: IFFALSE 13913
13822: GO 13824
13824: DISABLE
13825: LD_INT 0
13827: PPUSH
// begin enable ;
13828: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13829: LD_ADDR_VAR 0 1
13833: PUSH
13834: LD_INT 22
13836: PUSH
13837: LD_OWVAR 2
13841: PUSH
13842: EMPTY
13843: LIST
13844: LIST
13845: PUSH
13846: LD_INT 2
13848: PUSH
13849: LD_INT 25
13851: PUSH
13852: LD_INT 5
13854: PUSH
13855: EMPTY
13856: LIST
13857: LIST
13858: PUSH
13859: LD_INT 25
13861: PUSH
13862: LD_INT 9
13864: PUSH
13865: EMPTY
13866: LIST
13867: LIST
13868: PUSH
13869: LD_INT 25
13871: PUSH
13872: LD_INT 8
13874: PUSH
13875: EMPTY
13876: LIST
13877: LIST
13878: PUSH
13879: EMPTY
13880: LIST
13881: LIST
13882: LIST
13883: LIST
13884: PUSH
13885: EMPTY
13886: LIST
13887: LIST
13888: PPUSH
13889: CALL_OW 69
13893: PUSH
13894: FOR_IN
13895: IFFALSE 13911
// begin SetClass ( i , 1 ) ;
13897: LD_VAR 0 1
13901: PPUSH
13902: LD_INT 1
13904: PPUSH
13905: CALL_OW 336
// end ;
13909: GO 13894
13911: POP
13912: POP
// end ;
13913: PPOPN 1
13915: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13916: LD_EXP 22
13920: PUSH
13921: LD_EXP 26
13925: AND
13926: PUSH
13927: LD_OWVAR 65
13931: PUSH
13932: LD_INT 7
13934: LESS
13935: AND
13936: IFFALSE 13950
13938: GO 13940
13940: DISABLE
// begin enable ;
13941: ENABLE
// game_speed := 7 ;
13942: LD_ADDR_OWVAR 65
13946: PUSH
13947: LD_INT 7
13949: ST_TO_ADDR
// end ;
13950: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13951: LD_EXP 22
13955: PUSH
13956: LD_EXP 29
13960: AND
13961: IFFALSE 14163
13963: GO 13965
13965: DISABLE
13966: LD_INT 0
13968: PPUSH
13969: PPUSH
13970: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13971: LD_ADDR_VAR 0 3
13975: PUSH
13976: LD_INT 81
13978: PUSH
13979: LD_OWVAR 2
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: PUSH
13988: LD_INT 21
13990: PUSH
13991: LD_INT 1
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: PUSH
13998: EMPTY
13999: LIST
14000: LIST
14001: PPUSH
14002: CALL_OW 69
14006: ST_TO_ADDR
// if not tmp then
14007: LD_VAR 0 3
14011: NOT
14012: IFFALSE 14016
// exit ;
14014: GO 14163
// if tmp > 5 then
14016: LD_VAR 0 3
14020: PUSH
14021: LD_INT 5
14023: GREATER
14024: IFFALSE 14036
// k := 5 else
14026: LD_ADDR_VAR 0 2
14030: PUSH
14031: LD_INT 5
14033: ST_TO_ADDR
14034: GO 14046
// k := tmp ;
14036: LD_ADDR_VAR 0 2
14040: PUSH
14041: LD_VAR 0 3
14045: ST_TO_ADDR
// for i := 1 to k do
14046: LD_ADDR_VAR 0 1
14050: PUSH
14051: DOUBLE
14052: LD_INT 1
14054: DEC
14055: ST_TO_ADDR
14056: LD_VAR 0 2
14060: PUSH
14061: FOR_TO
14062: IFFALSE 14161
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
14064: LD_VAR 0 3
14068: PUSH
14069: LD_VAR 0 1
14073: ARRAY
14074: PPUSH
14075: LD_VAR 0 1
14079: PUSH
14080: LD_INT 4
14082: MOD
14083: PUSH
14084: LD_INT 1
14086: PLUS
14087: PPUSH
14088: CALL_OW 259
14092: PUSH
14093: LD_INT 10
14095: LESS
14096: IFFALSE 14159
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14098: LD_VAR 0 3
14102: PUSH
14103: LD_VAR 0 1
14107: ARRAY
14108: PPUSH
14109: LD_VAR 0 1
14113: PUSH
14114: LD_INT 4
14116: MOD
14117: PUSH
14118: LD_INT 1
14120: PLUS
14121: PPUSH
14122: LD_VAR 0 3
14126: PUSH
14127: LD_VAR 0 1
14131: ARRAY
14132: PPUSH
14133: LD_VAR 0 1
14137: PUSH
14138: LD_INT 4
14140: MOD
14141: PUSH
14142: LD_INT 1
14144: PLUS
14145: PPUSH
14146: CALL_OW 259
14150: PUSH
14151: LD_INT 1
14153: PLUS
14154: PPUSH
14155: CALL_OW 237
14159: GO 14061
14161: POP
14162: POP
// end ;
14163: PPOPN 3
14165: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
14166: LD_EXP 22
14170: PUSH
14171: LD_EXP 30
14175: AND
14176: IFFALSE 14196
14178: GO 14180
14180: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
14181: LD_INT 4
14183: PPUSH
14184: LD_OWVAR 2
14188: PPUSH
14189: LD_INT 0
14191: PPUSH
14192: CALL_OW 324
14196: END
// every 0 0$1 trigger StreamModeActive and sShovel do
14197: LD_EXP 22
14201: PUSH
14202: LD_EXP 59
14206: AND
14207: IFFALSE 14227
14209: GO 14211
14211: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14212: LD_INT 19
14214: PPUSH
14215: LD_OWVAR 2
14219: PPUSH
14220: LD_INT 0
14222: PPUSH
14223: CALL_OW 324
14227: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14228: LD_EXP 22
14232: PUSH
14233: LD_EXP 31
14237: AND
14238: IFFALSE 14340
14240: GO 14242
14242: DISABLE
14243: LD_INT 0
14245: PPUSH
14246: PPUSH
// begin enable ;
14247: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14248: LD_ADDR_VAR 0 2
14252: PUSH
14253: LD_INT 22
14255: PUSH
14256: LD_OWVAR 2
14260: PUSH
14261: EMPTY
14262: LIST
14263: LIST
14264: PUSH
14265: LD_INT 2
14267: PUSH
14268: LD_INT 34
14270: PUSH
14271: LD_INT 11
14273: PUSH
14274: EMPTY
14275: LIST
14276: LIST
14277: PUSH
14278: LD_INT 34
14280: PUSH
14281: LD_INT 30
14283: PUSH
14284: EMPTY
14285: LIST
14286: LIST
14287: PUSH
14288: EMPTY
14289: LIST
14290: LIST
14291: LIST
14292: PUSH
14293: EMPTY
14294: LIST
14295: LIST
14296: PPUSH
14297: CALL_OW 69
14301: ST_TO_ADDR
// if not tmp then
14302: LD_VAR 0 2
14306: NOT
14307: IFFALSE 14311
// exit ;
14309: GO 14340
// for i in tmp do
14311: LD_ADDR_VAR 0 1
14315: PUSH
14316: LD_VAR 0 2
14320: PUSH
14321: FOR_IN
14322: IFFALSE 14338
// begin SetLives ( i , 0 ) ;
14324: LD_VAR 0 1
14328: PPUSH
14329: LD_INT 0
14331: PPUSH
14332: CALL_OW 234
// end ;
14336: GO 14321
14338: POP
14339: POP
// end ;
14340: PPOPN 2
14342: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14343: LD_EXP 22
14347: PUSH
14348: LD_EXP 32
14352: AND
14353: IFFALSE 14373
14355: GO 14357
14357: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14358: LD_INT 32
14360: PPUSH
14361: LD_OWVAR 2
14365: PPUSH
14366: LD_INT 0
14368: PPUSH
14369: CALL_OW 324
14373: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14374: LD_EXP 22
14378: PUSH
14379: LD_EXP 33
14383: AND
14384: IFFALSE 14565
14386: GO 14388
14388: DISABLE
14389: LD_INT 0
14391: PPUSH
14392: PPUSH
14393: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14394: LD_ADDR_VAR 0 2
14398: PUSH
14399: LD_INT 22
14401: PUSH
14402: LD_OWVAR 2
14406: PUSH
14407: EMPTY
14408: LIST
14409: LIST
14410: PUSH
14411: LD_INT 33
14413: PUSH
14414: LD_INT 3
14416: PUSH
14417: EMPTY
14418: LIST
14419: LIST
14420: PUSH
14421: EMPTY
14422: LIST
14423: LIST
14424: PPUSH
14425: CALL_OW 69
14429: ST_TO_ADDR
// if not tmp then
14430: LD_VAR 0 2
14434: NOT
14435: IFFALSE 14439
// exit ;
14437: GO 14565
// side := 0 ;
14439: LD_ADDR_VAR 0 3
14443: PUSH
14444: LD_INT 0
14446: ST_TO_ADDR
// for i := 1 to 8 do
14447: LD_ADDR_VAR 0 1
14451: PUSH
14452: DOUBLE
14453: LD_INT 1
14455: DEC
14456: ST_TO_ADDR
14457: LD_INT 8
14459: PUSH
14460: FOR_TO
14461: IFFALSE 14509
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14463: LD_OWVAR 2
14467: PUSH
14468: LD_VAR 0 1
14472: NONEQUAL
14473: PUSH
14474: LD_OWVAR 2
14478: PPUSH
14479: LD_VAR 0 1
14483: PPUSH
14484: CALL_OW 81
14488: PUSH
14489: LD_INT 2
14491: EQUAL
14492: AND
14493: IFFALSE 14507
// begin side := i ;
14495: LD_ADDR_VAR 0 3
14499: PUSH
14500: LD_VAR 0 1
14504: ST_TO_ADDR
// break ;
14505: GO 14509
// end ;
14507: GO 14460
14509: POP
14510: POP
// if not side then
14511: LD_VAR 0 3
14515: NOT
14516: IFFALSE 14520
// exit ;
14518: GO 14565
// for i := 1 to tmp do
14520: LD_ADDR_VAR 0 1
14524: PUSH
14525: DOUBLE
14526: LD_INT 1
14528: DEC
14529: ST_TO_ADDR
14530: LD_VAR 0 2
14534: PUSH
14535: FOR_TO
14536: IFFALSE 14563
// if Prob ( 60 ) then
14538: LD_INT 60
14540: PPUSH
14541: CALL_OW 13
14545: IFFALSE 14561
// SetSide ( i , side ) ;
14547: LD_VAR 0 1
14551: PPUSH
14552: LD_VAR 0 3
14556: PPUSH
14557: CALL_OW 235
14561: GO 14535
14563: POP
14564: POP
// end ;
14565: PPOPN 3
14567: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14568: LD_EXP 22
14572: PUSH
14573: LD_EXP 35
14577: AND
14578: IFFALSE 14697
14580: GO 14582
14582: DISABLE
14583: LD_INT 0
14585: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14586: LD_ADDR_VAR 0 1
14590: PUSH
14591: LD_INT 22
14593: PUSH
14594: LD_OWVAR 2
14598: PUSH
14599: EMPTY
14600: LIST
14601: LIST
14602: PUSH
14603: LD_INT 21
14605: PUSH
14606: LD_INT 1
14608: PUSH
14609: EMPTY
14610: LIST
14611: LIST
14612: PUSH
14613: LD_INT 3
14615: PUSH
14616: LD_INT 23
14618: PUSH
14619: LD_INT 0
14621: PUSH
14622: EMPTY
14623: LIST
14624: LIST
14625: PUSH
14626: EMPTY
14627: LIST
14628: LIST
14629: PUSH
14630: EMPTY
14631: LIST
14632: LIST
14633: LIST
14634: PPUSH
14635: CALL_OW 69
14639: PUSH
14640: FOR_IN
14641: IFFALSE 14695
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14643: LD_VAR 0 1
14647: PPUSH
14648: CALL_OW 257
14652: PUSH
14653: LD_INT 1
14655: PUSH
14656: LD_INT 2
14658: PUSH
14659: LD_INT 3
14661: PUSH
14662: LD_INT 4
14664: PUSH
14665: EMPTY
14666: LIST
14667: LIST
14668: LIST
14669: LIST
14670: IN
14671: IFFALSE 14693
// SetClass ( un , rand ( 1 , 4 ) ) ;
14673: LD_VAR 0 1
14677: PPUSH
14678: LD_INT 1
14680: PPUSH
14681: LD_INT 4
14683: PPUSH
14684: CALL_OW 12
14688: PPUSH
14689: CALL_OW 336
14693: GO 14640
14695: POP
14696: POP
// end ;
14697: PPOPN 1
14699: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14700: LD_EXP 22
14704: PUSH
14705: LD_EXP 34
14709: AND
14710: IFFALSE 14789
14712: GO 14714
14714: DISABLE
14715: LD_INT 0
14717: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14718: LD_ADDR_VAR 0 1
14722: PUSH
14723: LD_INT 22
14725: PUSH
14726: LD_OWVAR 2
14730: PUSH
14731: EMPTY
14732: LIST
14733: LIST
14734: PUSH
14735: LD_INT 21
14737: PUSH
14738: LD_INT 3
14740: PUSH
14741: EMPTY
14742: LIST
14743: LIST
14744: PUSH
14745: EMPTY
14746: LIST
14747: LIST
14748: PPUSH
14749: CALL_OW 69
14753: ST_TO_ADDR
// if not tmp then
14754: LD_VAR 0 1
14758: NOT
14759: IFFALSE 14763
// exit ;
14761: GO 14789
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14763: LD_VAR 0 1
14767: PUSH
14768: LD_INT 1
14770: PPUSH
14771: LD_VAR 0 1
14775: PPUSH
14776: CALL_OW 12
14780: ARRAY
14781: PPUSH
14782: LD_INT 100
14784: PPUSH
14785: CALL_OW 234
// end ;
14789: PPOPN 1
14791: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14792: LD_EXP 22
14796: PUSH
14797: LD_EXP 36
14801: AND
14802: IFFALSE 14900
14804: GO 14806
14806: DISABLE
14807: LD_INT 0
14809: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14810: LD_ADDR_VAR 0 1
14814: PUSH
14815: LD_INT 22
14817: PUSH
14818: LD_OWVAR 2
14822: PUSH
14823: EMPTY
14824: LIST
14825: LIST
14826: PUSH
14827: LD_INT 21
14829: PUSH
14830: LD_INT 1
14832: PUSH
14833: EMPTY
14834: LIST
14835: LIST
14836: PUSH
14837: EMPTY
14838: LIST
14839: LIST
14840: PPUSH
14841: CALL_OW 69
14845: ST_TO_ADDR
// if not tmp then
14846: LD_VAR 0 1
14850: NOT
14851: IFFALSE 14855
// exit ;
14853: GO 14900
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14855: LD_VAR 0 1
14859: PUSH
14860: LD_INT 1
14862: PPUSH
14863: LD_VAR 0 1
14867: PPUSH
14868: CALL_OW 12
14872: ARRAY
14873: PPUSH
14874: LD_INT 1
14876: PPUSH
14877: LD_INT 4
14879: PPUSH
14880: CALL_OW 12
14884: PPUSH
14885: LD_INT 3000
14887: PPUSH
14888: LD_INT 9000
14890: PPUSH
14891: CALL_OW 12
14895: PPUSH
14896: CALL_OW 492
// end ;
14900: PPOPN 1
14902: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14903: LD_EXP 22
14907: PUSH
14908: LD_EXP 37
14912: AND
14913: IFFALSE 14933
14915: GO 14917
14917: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14918: LD_INT 1
14920: PPUSH
14921: LD_OWVAR 2
14925: PPUSH
14926: LD_INT 0
14928: PPUSH
14929: CALL_OW 324
14933: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14934: LD_EXP 22
14938: PUSH
14939: LD_EXP 38
14943: AND
14944: IFFALSE 15027
14946: GO 14948
14948: DISABLE
14949: LD_INT 0
14951: PPUSH
14952: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14953: LD_ADDR_VAR 0 2
14957: PUSH
14958: LD_INT 22
14960: PUSH
14961: LD_OWVAR 2
14965: PUSH
14966: EMPTY
14967: LIST
14968: LIST
14969: PUSH
14970: LD_INT 21
14972: PUSH
14973: LD_INT 3
14975: PUSH
14976: EMPTY
14977: LIST
14978: LIST
14979: PUSH
14980: EMPTY
14981: LIST
14982: LIST
14983: PPUSH
14984: CALL_OW 69
14988: ST_TO_ADDR
// if not tmp then
14989: LD_VAR 0 2
14993: NOT
14994: IFFALSE 14998
// exit ;
14996: GO 15027
// for i in tmp do
14998: LD_ADDR_VAR 0 1
15002: PUSH
15003: LD_VAR 0 2
15007: PUSH
15008: FOR_IN
15009: IFFALSE 15025
// SetBLevel ( i , 10 ) ;
15011: LD_VAR 0 1
15015: PPUSH
15016: LD_INT 10
15018: PPUSH
15019: CALL_OW 241
15023: GO 15008
15025: POP
15026: POP
// end ;
15027: PPOPN 2
15029: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
15030: LD_EXP 22
15034: PUSH
15035: LD_EXP 39
15039: AND
15040: IFFALSE 15151
15042: GO 15044
15044: DISABLE
15045: LD_INT 0
15047: PPUSH
15048: PPUSH
15049: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15050: LD_ADDR_VAR 0 3
15054: PUSH
15055: LD_INT 22
15057: PUSH
15058: LD_OWVAR 2
15062: PUSH
15063: EMPTY
15064: LIST
15065: LIST
15066: PUSH
15067: LD_INT 25
15069: PUSH
15070: LD_INT 1
15072: PUSH
15073: EMPTY
15074: LIST
15075: LIST
15076: PUSH
15077: EMPTY
15078: LIST
15079: LIST
15080: PPUSH
15081: CALL_OW 69
15085: ST_TO_ADDR
// if not tmp then
15086: LD_VAR 0 3
15090: NOT
15091: IFFALSE 15095
// exit ;
15093: GO 15151
// un := tmp [ rand ( 1 , tmp ) ] ;
15095: LD_ADDR_VAR 0 2
15099: PUSH
15100: LD_VAR 0 3
15104: PUSH
15105: LD_INT 1
15107: PPUSH
15108: LD_VAR 0 3
15112: PPUSH
15113: CALL_OW 12
15117: ARRAY
15118: ST_TO_ADDR
// if Crawls ( un ) then
15119: LD_VAR 0 2
15123: PPUSH
15124: CALL_OW 318
15128: IFFALSE 15139
// ComWalk ( un ) ;
15130: LD_VAR 0 2
15134: PPUSH
15135: CALL_OW 138
// SetClass ( un , class_sniper ) ;
15139: LD_VAR 0 2
15143: PPUSH
15144: LD_INT 5
15146: PPUSH
15147: CALL_OW 336
// end ;
15151: PPOPN 3
15153: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
15154: LD_EXP 22
15158: PUSH
15159: LD_EXP 40
15163: AND
15164: PUSH
15165: LD_OWVAR 67
15169: PUSH
15170: LD_INT 4
15172: LESS
15173: AND
15174: IFFALSE 15193
15176: GO 15178
15178: DISABLE
// begin Difficulty := Difficulty + 1 ;
15179: LD_ADDR_OWVAR 67
15183: PUSH
15184: LD_OWVAR 67
15188: PUSH
15189: LD_INT 1
15191: PLUS
15192: ST_TO_ADDR
// end ;
15193: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
15194: LD_EXP 22
15198: PUSH
15199: LD_EXP 41
15203: AND
15204: IFFALSE 15307
15206: GO 15208
15208: DISABLE
15209: LD_INT 0
15211: PPUSH
// begin for i := 1 to 5 do
15212: LD_ADDR_VAR 0 1
15216: PUSH
15217: DOUBLE
15218: LD_INT 1
15220: DEC
15221: ST_TO_ADDR
15222: LD_INT 5
15224: PUSH
15225: FOR_TO
15226: IFFALSE 15305
// begin uc_nation := nation_nature ;
15228: LD_ADDR_OWVAR 21
15232: PUSH
15233: LD_INT 0
15235: ST_TO_ADDR
// uc_side := 0 ;
15236: LD_ADDR_OWVAR 20
15240: PUSH
15241: LD_INT 0
15243: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15244: LD_ADDR_OWVAR 29
15248: PUSH
15249: LD_INT 12
15251: PUSH
15252: LD_INT 12
15254: PUSH
15255: EMPTY
15256: LIST
15257: LIST
15258: ST_TO_ADDR
// hc_agressivity := 20 ;
15259: LD_ADDR_OWVAR 35
15263: PUSH
15264: LD_INT 20
15266: ST_TO_ADDR
// hc_class := class_tiger ;
15267: LD_ADDR_OWVAR 28
15271: PUSH
15272: LD_INT 14
15274: ST_TO_ADDR
// hc_gallery :=  ;
15275: LD_ADDR_OWVAR 33
15279: PUSH
15280: LD_STRING 
15282: ST_TO_ADDR
// hc_name :=  ;
15283: LD_ADDR_OWVAR 26
15287: PUSH
15288: LD_STRING 
15290: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15291: CALL_OW 44
15295: PPUSH
15296: LD_INT 0
15298: PPUSH
15299: CALL_OW 51
// end ;
15303: GO 15225
15305: POP
15306: POP
// end ;
15307: PPOPN 1
15309: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15310: LD_EXP 22
15314: PUSH
15315: LD_EXP 42
15319: AND
15320: IFFALSE 15329
15322: GO 15324
15324: DISABLE
// StreamSibBomb ;
15325: CALL 15330 0 0
15329: END
// export function StreamSibBomb ; var i , x , y ; begin
15330: LD_INT 0
15332: PPUSH
15333: PPUSH
15334: PPUSH
15335: PPUSH
// result := false ;
15336: LD_ADDR_VAR 0 1
15340: PUSH
15341: LD_INT 0
15343: ST_TO_ADDR
// for i := 1 to 16 do
15344: LD_ADDR_VAR 0 2
15348: PUSH
15349: DOUBLE
15350: LD_INT 1
15352: DEC
15353: ST_TO_ADDR
15354: LD_INT 16
15356: PUSH
15357: FOR_TO
15358: IFFALSE 15557
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15360: LD_ADDR_VAR 0 3
15364: PUSH
15365: LD_INT 10
15367: PUSH
15368: LD_INT 20
15370: PUSH
15371: LD_INT 30
15373: PUSH
15374: LD_INT 40
15376: PUSH
15377: LD_INT 50
15379: PUSH
15380: LD_INT 60
15382: PUSH
15383: LD_INT 70
15385: PUSH
15386: LD_INT 80
15388: PUSH
15389: LD_INT 90
15391: PUSH
15392: LD_INT 100
15394: PUSH
15395: LD_INT 110
15397: PUSH
15398: LD_INT 120
15400: PUSH
15401: LD_INT 130
15403: PUSH
15404: LD_INT 140
15406: PUSH
15407: LD_INT 150
15409: PUSH
15410: EMPTY
15411: LIST
15412: LIST
15413: LIST
15414: LIST
15415: LIST
15416: LIST
15417: LIST
15418: LIST
15419: LIST
15420: LIST
15421: LIST
15422: LIST
15423: LIST
15424: LIST
15425: LIST
15426: PUSH
15427: LD_INT 1
15429: PPUSH
15430: LD_INT 15
15432: PPUSH
15433: CALL_OW 12
15437: ARRAY
15438: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15439: LD_ADDR_VAR 0 4
15443: PUSH
15444: LD_INT 10
15446: PUSH
15447: LD_INT 20
15449: PUSH
15450: LD_INT 30
15452: PUSH
15453: LD_INT 40
15455: PUSH
15456: LD_INT 50
15458: PUSH
15459: LD_INT 60
15461: PUSH
15462: LD_INT 70
15464: PUSH
15465: LD_INT 80
15467: PUSH
15468: LD_INT 90
15470: PUSH
15471: LD_INT 100
15473: PUSH
15474: LD_INT 110
15476: PUSH
15477: LD_INT 120
15479: PUSH
15480: LD_INT 130
15482: PUSH
15483: LD_INT 140
15485: PUSH
15486: LD_INT 150
15488: PUSH
15489: EMPTY
15490: LIST
15491: LIST
15492: LIST
15493: LIST
15494: LIST
15495: LIST
15496: LIST
15497: LIST
15498: LIST
15499: LIST
15500: LIST
15501: LIST
15502: LIST
15503: LIST
15504: LIST
15505: PUSH
15506: LD_INT 1
15508: PPUSH
15509: LD_INT 15
15511: PPUSH
15512: CALL_OW 12
15516: ARRAY
15517: ST_TO_ADDR
// if ValidHex ( x , y ) then
15518: LD_VAR 0 3
15522: PPUSH
15523: LD_VAR 0 4
15527: PPUSH
15528: CALL_OW 488
15532: IFFALSE 15555
// begin result := [ x , y ] ;
15534: LD_ADDR_VAR 0 1
15538: PUSH
15539: LD_VAR 0 3
15543: PUSH
15544: LD_VAR 0 4
15548: PUSH
15549: EMPTY
15550: LIST
15551: LIST
15552: ST_TO_ADDR
// break ;
15553: GO 15557
// end ; end ;
15555: GO 15357
15557: POP
15558: POP
// if result then
15559: LD_VAR 0 1
15563: IFFALSE 15623
// begin ToLua ( playSibBomb() ) ;
15565: LD_STRING playSibBomb()
15567: PPUSH
15568: CALL_OW 559
// wait ( 0 0$14 ) ;
15572: LD_INT 490
15574: PPUSH
15575: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15579: LD_VAR 0 1
15583: PUSH
15584: LD_INT 1
15586: ARRAY
15587: PPUSH
15588: LD_VAR 0 1
15592: PUSH
15593: LD_INT 2
15595: ARRAY
15596: PPUSH
15597: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15601: LD_VAR 0 1
15605: PUSH
15606: LD_INT 1
15608: ARRAY
15609: PPUSH
15610: LD_VAR 0 1
15614: PUSH
15615: LD_INT 2
15617: ARRAY
15618: PPUSH
15619: CALL_OW 429
// end ; end ;
15623: LD_VAR 0 1
15627: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15628: LD_EXP 22
15632: PUSH
15633: LD_EXP 44
15637: AND
15638: IFFALSE 15650
15640: GO 15642
15642: DISABLE
// YouLost (  ) ;
15643: LD_STRING 
15645: PPUSH
15646: CALL_OW 104
15650: END
// every 0 0$1 trigger StreamModeActive and sFog do
15651: LD_EXP 22
15655: PUSH
15656: LD_EXP 43
15660: AND
15661: IFFALSE 15675
15663: GO 15665
15665: DISABLE
// FogOff ( your_side ) ;
15666: LD_OWVAR 2
15670: PPUSH
15671: CALL_OW 344
15675: END
// every 0 0$1 trigger StreamModeActive and sSun do
15676: LD_EXP 22
15680: PUSH
15681: LD_EXP 45
15685: AND
15686: IFFALSE 15714
15688: GO 15690
15690: DISABLE
// begin solar_recharge_percent := 0 ;
15691: LD_ADDR_OWVAR 79
15695: PUSH
15696: LD_INT 0
15698: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15699: LD_INT 10500
15701: PPUSH
15702: CALL_OW 67
// solar_recharge_percent := 100 ;
15706: LD_ADDR_OWVAR 79
15710: PUSH
15711: LD_INT 100
15713: ST_TO_ADDR
// end ;
15714: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15715: LD_EXP 22
15719: PUSH
15720: LD_EXP 46
15724: AND
15725: IFFALSE 15964
15727: GO 15729
15729: DISABLE
15730: LD_INT 0
15732: PPUSH
15733: PPUSH
15734: PPUSH
// begin tmp := [ ] ;
15735: LD_ADDR_VAR 0 3
15739: PUSH
15740: EMPTY
15741: ST_TO_ADDR
// for i := 1 to 6 do
15742: LD_ADDR_VAR 0 1
15746: PUSH
15747: DOUBLE
15748: LD_INT 1
15750: DEC
15751: ST_TO_ADDR
15752: LD_INT 6
15754: PUSH
15755: FOR_TO
15756: IFFALSE 15861
// begin uc_nation := nation_nature ;
15758: LD_ADDR_OWVAR 21
15762: PUSH
15763: LD_INT 0
15765: ST_TO_ADDR
// uc_side := 0 ;
15766: LD_ADDR_OWVAR 20
15770: PUSH
15771: LD_INT 0
15773: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15774: LD_ADDR_OWVAR 29
15778: PUSH
15779: LD_INT 12
15781: PUSH
15782: LD_INT 12
15784: PUSH
15785: EMPTY
15786: LIST
15787: LIST
15788: ST_TO_ADDR
// hc_agressivity := 20 ;
15789: LD_ADDR_OWVAR 35
15793: PUSH
15794: LD_INT 20
15796: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15797: LD_ADDR_OWVAR 28
15801: PUSH
15802: LD_INT 17
15804: ST_TO_ADDR
// hc_gallery :=  ;
15805: LD_ADDR_OWVAR 33
15809: PUSH
15810: LD_STRING 
15812: ST_TO_ADDR
// hc_name :=  ;
15813: LD_ADDR_OWVAR 26
15817: PUSH
15818: LD_STRING 
15820: ST_TO_ADDR
// un := CreateHuman ;
15821: LD_ADDR_VAR 0 2
15825: PUSH
15826: CALL_OW 44
15830: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15831: LD_VAR 0 2
15835: PPUSH
15836: LD_INT 1
15838: PPUSH
15839: CALL_OW 51
// tmp := tmp ^ un ;
15843: LD_ADDR_VAR 0 3
15847: PUSH
15848: LD_VAR 0 3
15852: PUSH
15853: LD_VAR 0 2
15857: ADD
15858: ST_TO_ADDR
// end ;
15859: GO 15755
15861: POP
15862: POP
// repeat wait ( 0 0$1 ) ;
15863: LD_INT 35
15865: PPUSH
15866: CALL_OW 67
// for un in tmp do
15870: LD_ADDR_VAR 0 2
15874: PUSH
15875: LD_VAR 0 3
15879: PUSH
15880: FOR_IN
15881: IFFALSE 15955
// begin if IsDead ( un ) then
15883: LD_VAR 0 2
15887: PPUSH
15888: CALL_OW 301
15892: IFFALSE 15912
// begin tmp := tmp diff un ;
15894: LD_ADDR_VAR 0 3
15898: PUSH
15899: LD_VAR 0 3
15903: PUSH
15904: LD_VAR 0 2
15908: DIFF
15909: ST_TO_ADDR
// continue ;
15910: GO 15880
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15912: LD_VAR 0 2
15916: PPUSH
15917: LD_INT 3
15919: PUSH
15920: LD_INT 22
15922: PUSH
15923: LD_INT 0
15925: PUSH
15926: EMPTY
15927: LIST
15928: LIST
15929: PUSH
15930: EMPTY
15931: LIST
15932: LIST
15933: PPUSH
15934: CALL_OW 69
15938: PPUSH
15939: LD_VAR 0 2
15943: PPUSH
15944: CALL_OW 74
15948: PPUSH
15949: CALL_OW 115
// end ;
15953: GO 15880
15955: POP
15956: POP
// until not tmp ;
15957: LD_VAR 0 3
15961: NOT
15962: IFFALSE 15863
// end ;
15964: PPOPN 3
15966: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15967: LD_EXP 22
15971: PUSH
15972: LD_EXP 47
15976: AND
15977: IFFALSE 16031
15979: GO 15981
15981: DISABLE
// begin ToLua ( displayTroll(); ) ;
15982: LD_STRING displayTroll();
15984: PPUSH
15985: CALL_OW 559
// wait ( 3 3$00 ) ;
15989: LD_INT 6300
15991: PPUSH
15992: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15996: LD_STRING hideTroll();
15998: PPUSH
15999: CALL_OW 559
// wait ( 1 1$00 ) ;
16003: LD_INT 2100
16005: PPUSH
16006: CALL_OW 67
// ToLua ( displayTroll(); ) ;
16010: LD_STRING displayTroll();
16012: PPUSH
16013: CALL_OW 559
// wait ( 1 1$00 ) ;
16017: LD_INT 2100
16019: PPUSH
16020: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16024: LD_STRING hideTroll();
16026: PPUSH
16027: CALL_OW 559
// end ;
16031: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
16032: LD_EXP 22
16036: PUSH
16037: LD_EXP 48
16041: AND
16042: IFFALSE 16105
16044: GO 16046
16046: DISABLE
16047: LD_INT 0
16049: PPUSH
// begin p := 0 ;
16050: LD_ADDR_VAR 0 1
16054: PUSH
16055: LD_INT 0
16057: ST_TO_ADDR
// repeat game_speed := 1 ;
16058: LD_ADDR_OWVAR 65
16062: PUSH
16063: LD_INT 1
16065: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16066: LD_INT 35
16068: PPUSH
16069: CALL_OW 67
// p := p + 1 ;
16073: LD_ADDR_VAR 0 1
16077: PUSH
16078: LD_VAR 0 1
16082: PUSH
16083: LD_INT 1
16085: PLUS
16086: ST_TO_ADDR
// until p >= 60 ;
16087: LD_VAR 0 1
16091: PUSH
16092: LD_INT 60
16094: GREATEREQUAL
16095: IFFALSE 16058
// game_speed := 4 ;
16097: LD_ADDR_OWVAR 65
16101: PUSH
16102: LD_INT 4
16104: ST_TO_ADDR
// end ;
16105: PPOPN 1
16107: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16108: LD_EXP 22
16112: PUSH
16113: LD_EXP 49
16117: AND
16118: IFFALSE 16264
16120: GO 16122
16122: DISABLE
16123: LD_INT 0
16125: PPUSH
16126: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16127: LD_ADDR_VAR 0 1
16131: PUSH
16132: LD_INT 22
16134: PUSH
16135: LD_OWVAR 2
16139: PUSH
16140: EMPTY
16141: LIST
16142: LIST
16143: PUSH
16144: LD_INT 2
16146: PUSH
16147: LD_INT 30
16149: PUSH
16150: LD_INT 0
16152: PUSH
16153: EMPTY
16154: LIST
16155: LIST
16156: PUSH
16157: LD_INT 30
16159: PUSH
16160: LD_INT 1
16162: PUSH
16163: EMPTY
16164: LIST
16165: LIST
16166: PUSH
16167: EMPTY
16168: LIST
16169: LIST
16170: LIST
16171: PUSH
16172: EMPTY
16173: LIST
16174: LIST
16175: PPUSH
16176: CALL_OW 69
16180: ST_TO_ADDR
// if not depot then
16181: LD_VAR 0 1
16185: NOT
16186: IFFALSE 16190
// exit ;
16188: GO 16264
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
16190: LD_ADDR_VAR 0 2
16194: PUSH
16195: LD_VAR 0 1
16199: PUSH
16200: LD_INT 1
16202: PPUSH
16203: LD_VAR 0 1
16207: PPUSH
16208: CALL_OW 12
16212: ARRAY
16213: PPUSH
16214: CALL_OW 274
16218: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16219: LD_VAR 0 2
16223: PPUSH
16224: LD_INT 1
16226: PPUSH
16227: LD_INT 0
16229: PPUSH
16230: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16234: LD_VAR 0 2
16238: PPUSH
16239: LD_INT 2
16241: PPUSH
16242: LD_INT 0
16244: PPUSH
16245: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16249: LD_VAR 0 2
16253: PPUSH
16254: LD_INT 3
16256: PPUSH
16257: LD_INT 0
16259: PPUSH
16260: CALL_OW 277
// end ;
16264: PPOPN 2
16266: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16267: LD_EXP 22
16271: PUSH
16272: LD_EXP 50
16276: AND
16277: IFFALSE 16374
16279: GO 16281
16281: DISABLE
16282: LD_INT 0
16284: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16285: LD_ADDR_VAR 0 1
16289: PUSH
16290: LD_INT 22
16292: PUSH
16293: LD_OWVAR 2
16297: PUSH
16298: EMPTY
16299: LIST
16300: LIST
16301: PUSH
16302: LD_INT 21
16304: PUSH
16305: LD_INT 1
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: PUSH
16312: LD_INT 3
16314: PUSH
16315: LD_INT 23
16317: PUSH
16318: LD_INT 0
16320: PUSH
16321: EMPTY
16322: LIST
16323: LIST
16324: PUSH
16325: EMPTY
16326: LIST
16327: LIST
16328: PUSH
16329: EMPTY
16330: LIST
16331: LIST
16332: LIST
16333: PPUSH
16334: CALL_OW 69
16338: ST_TO_ADDR
// if not tmp then
16339: LD_VAR 0 1
16343: NOT
16344: IFFALSE 16348
// exit ;
16346: GO 16374
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16348: LD_VAR 0 1
16352: PUSH
16353: LD_INT 1
16355: PPUSH
16356: LD_VAR 0 1
16360: PPUSH
16361: CALL_OW 12
16365: ARRAY
16366: PPUSH
16367: LD_INT 200
16369: PPUSH
16370: CALL_OW 234
// end ;
16374: PPOPN 1
16376: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16377: LD_EXP 22
16381: PUSH
16382: LD_EXP 51
16386: AND
16387: IFFALSE 16466
16389: GO 16391
16391: DISABLE
16392: LD_INT 0
16394: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16395: LD_ADDR_VAR 0 1
16399: PUSH
16400: LD_INT 22
16402: PUSH
16403: LD_OWVAR 2
16407: PUSH
16408: EMPTY
16409: LIST
16410: LIST
16411: PUSH
16412: LD_INT 21
16414: PUSH
16415: LD_INT 2
16417: PUSH
16418: EMPTY
16419: LIST
16420: LIST
16421: PUSH
16422: EMPTY
16423: LIST
16424: LIST
16425: PPUSH
16426: CALL_OW 69
16430: ST_TO_ADDR
// if not tmp then
16431: LD_VAR 0 1
16435: NOT
16436: IFFALSE 16440
// exit ;
16438: GO 16466
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16440: LD_VAR 0 1
16444: PUSH
16445: LD_INT 1
16447: PPUSH
16448: LD_VAR 0 1
16452: PPUSH
16453: CALL_OW 12
16457: ARRAY
16458: PPUSH
16459: LD_INT 60
16461: PPUSH
16462: CALL_OW 234
// end ;
16466: PPOPN 1
16468: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16469: LD_EXP 22
16473: PUSH
16474: LD_EXP 52
16478: AND
16479: IFFALSE 16578
16481: GO 16483
16483: DISABLE
16484: LD_INT 0
16486: PPUSH
16487: PPUSH
// begin enable ;
16488: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16489: LD_ADDR_VAR 0 1
16493: PUSH
16494: LD_INT 22
16496: PUSH
16497: LD_OWVAR 2
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: PUSH
16506: LD_INT 61
16508: PUSH
16509: EMPTY
16510: LIST
16511: PUSH
16512: LD_INT 33
16514: PUSH
16515: LD_INT 2
16517: PUSH
16518: EMPTY
16519: LIST
16520: LIST
16521: PUSH
16522: EMPTY
16523: LIST
16524: LIST
16525: LIST
16526: PPUSH
16527: CALL_OW 69
16531: ST_TO_ADDR
// if not tmp then
16532: LD_VAR 0 1
16536: NOT
16537: IFFALSE 16541
// exit ;
16539: GO 16578
// for i in tmp do
16541: LD_ADDR_VAR 0 2
16545: PUSH
16546: LD_VAR 0 1
16550: PUSH
16551: FOR_IN
16552: IFFALSE 16576
// if IsControledBy ( i ) then
16554: LD_VAR 0 2
16558: PPUSH
16559: CALL_OW 312
16563: IFFALSE 16574
// ComUnlink ( i ) ;
16565: LD_VAR 0 2
16569: PPUSH
16570: CALL_OW 136
16574: GO 16551
16576: POP
16577: POP
// end ;
16578: PPOPN 2
16580: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16581: LD_EXP 22
16585: PUSH
16586: LD_EXP 53
16590: AND
16591: IFFALSE 16731
16593: GO 16595
16595: DISABLE
16596: LD_INT 0
16598: PPUSH
16599: PPUSH
// begin ToLua ( displayPowell(); ) ;
16600: LD_STRING displayPowell();
16602: PPUSH
16603: CALL_OW 559
// uc_side := 0 ;
16607: LD_ADDR_OWVAR 20
16611: PUSH
16612: LD_INT 0
16614: ST_TO_ADDR
// uc_nation := 2 ;
16615: LD_ADDR_OWVAR 21
16619: PUSH
16620: LD_INT 2
16622: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16623: LD_ADDR_OWVAR 37
16627: PUSH
16628: LD_INT 14
16630: ST_TO_ADDR
// vc_engine := engine_siberite ;
16631: LD_ADDR_OWVAR 39
16635: PUSH
16636: LD_INT 3
16638: ST_TO_ADDR
// vc_control := control_apeman ;
16639: LD_ADDR_OWVAR 38
16643: PUSH
16644: LD_INT 5
16646: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16647: LD_ADDR_OWVAR 40
16651: PUSH
16652: LD_INT 29
16654: ST_TO_ADDR
// un := CreateVehicle ;
16655: LD_ADDR_VAR 0 2
16659: PUSH
16660: CALL_OW 45
16664: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16665: LD_VAR 0 2
16669: PPUSH
16670: LD_INT 1
16672: PPUSH
16673: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16677: LD_INT 35
16679: PPUSH
16680: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16684: LD_VAR 0 2
16688: PPUSH
16689: LD_INT 22
16691: PUSH
16692: LD_OWVAR 2
16696: PUSH
16697: EMPTY
16698: LIST
16699: LIST
16700: PPUSH
16701: CALL_OW 69
16705: PPUSH
16706: LD_VAR 0 2
16710: PPUSH
16711: CALL_OW 74
16715: PPUSH
16716: CALL_OW 115
// until IsDead ( un ) ;
16720: LD_VAR 0 2
16724: PPUSH
16725: CALL_OW 301
16729: IFFALSE 16677
// end ;
16731: PPOPN 2
16733: END
// every 0 0$1 trigger StreamModeActive and sStu do
16734: LD_EXP 22
16738: PUSH
16739: LD_EXP 61
16743: AND
16744: IFFALSE 16760
16746: GO 16748
16748: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16749: LD_STRING displayStucuk();
16751: PPUSH
16752: CALL_OW 559
// ResetFog ;
16756: CALL_OW 335
// end ;
16760: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16761: LD_EXP 22
16765: PUSH
16766: LD_EXP 54
16770: AND
16771: IFFALSE 16912
16773: GO 16775
16775: DISABLE
16776: LD_INT 0
16778: PPUSH
16779: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16780: LD_ADDR_VAR 0 2
16784: PUSH
16785: LD_INT 22
16787: PUSH
16788: LD_OWVAR 2
16792: PUSH
16793: EMPTY
16794: LIST
16795: LIST
16796: PUSH
16797: LD_INT 21
16799: PUSH
16800: LD_INT 1
16802: PUSH
16803: EMPTY
16804: LIST
16805: LIST
16806: PUSH
16807: EMPTY
16808: LIST
16809: LIST
16810: PPUSH
16811: CALL_OW 69
16815: ST_TO_ADDR
// if not tmp then
16816: LD_VAR 0 2
16820: NOT
16821: IFFALSE 16825
// exit ;
16823: GO 16912
// un := tmp [ rand ( 1 , tmp ) ] ;
16825: LD_ADDR_VAR 0 1
16829: PUSH
16830: LD_VAR 0 2
16834: PUSH
16835: LD_INT 1
16837: PPUSH
16838: LD_VAR 0 2
16842: PPUSH
16843: CALL_OW 12
16847: ARRAY
16848: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16849: LD_VAR 0 1
16853: PPUSH
16854: LD_INT 0
16856: PPUSH
16857: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16861: LD_VAR 0 1
16865: PPUSH
16866: LD_OWVAR 3
16870: PUSH
16871: LD_VAR 0 1
16875: DIFF
16876: PPUSH
16877: LD_VAR 0 1
16881: PPUSH
16882: CALL_OW 74
16886: PPUSH
16887: CALL_OW 115
// wait ( 0 0$20 ) ;
16891: LD_INT 700
16893: PPUSH
16894: CALL_OW 67
// SetSide ( un , your_side ) ;
16898: LD_VAR 0 1
16902: PPUSH
16903: LD_OWVAR 2
16907: PPUSH
16908: CALL_OW 235
// end ;
16912: PPOPN 2
16914: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16915: LD_EXP 22
16919: PUSH
16920: LD_EXP 55
16924: AND
16925: IFFALSE 17031
16927: GO 16929
16929: DISABLE
16930: LD_INT 0
16932: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16933: LD_ADDR_VAR 0 1
16937: PUSH
16938: LD_INT 22
16940: PUSH
16941: LD_OWVAR 2
16945: PUSH
16946: EMPTY
16947: LIST
16948: LIST
16949: PUSH
16950: LD_INT 2
16952: PUSH
16953: LD_INT 30
16955: PUSH
16956: LD_INT 0
16958: PUSH
16959: EMPTY
16960: LIST
16961: LIST
16962: PUSH
16963: LD_INT 30
16965: PUSH
16966: LD_INT 1
16968: PUSH
16969: EMPTY
16970: LIST
16971: LIST
16972: PUSH
16973: EMPTY
16974: LIST
16975: LIST
16976: LIST
16977: PUSH
16978: EMPTY
16979: LIST
16980: LIST
16981: PPUSH
16982: CALL_OW 69
16986: ST_TO_ADDR
// if not depot then
16987: LD_VAR 0 1
16991: NOT
16992: IFFALSE 16996
// exit ;
16994: GO 17031
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16996: LD_VAR 0 1
17000: PUSH
17001: LD_INT 1
17003: ARRAY
17004: PPUSH
17005: CALL_OW 250
17009: PPUSH
17010: LD_VAR 0 1
17014: PUSH
17015: LD_INT 1
17017: ARRAY
17018: PPUSH
17019: CALL_OW 251
17023: PPUSH
17024: LD_INT 70
17026: PPUSH
17027: CALL_OW 495
// end ;
17031: PPOPN 1
17033: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
17034: LD_EXP 22
17038: PUSH
17039: LD_EXP 56
17043: AND
17044: IFFALSE 17255
17046: GO 17048
17048: DISABLE
17049: LD_INT 0
17051: PPUSH
17052: PPUSH
17053: PPUSH
17054: PPUSH
17055: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17056: LD_ADDR_VAR 0 5
17060: PUSH
17061: LD_INT 22
17063: PUSH
17064: LD_OWVAR 2
17068: PUSH
17069: EMPTY
17070: LIST
17071: LIST
17072: PUSH
17073: LD_INT 21
17075: PUSH
17076: LD_INT 1
17078: PUSH
17079: EMPTY
17080: LIST
17081: LIST
17082: PUSH
17083: EMPTY
17084: LIST
17085: LIST
17086: PPUSH
17087: CALL_OW 69
17091: ST_TO_ADDR
// if not tmp then
17092: LD_VAR 0 5
17096: NOT
17097: IFFALSE 17101
// exit ;
17099: GO 17255
// for i in tmp do
17101: LD_ADDR_VAR 0 1
17105: PUSH
17106: LD_VAR 0 5
17110: PUSH
17111: FOR_IN
17112: IFFALSE 17253
// begin d := rand ( 0 , 5 ) ;
17114: LD_ADDR_VAR 0 4
17118: PUSH
17119: LD_INT 0
17121: PPUSH
17122: LD_INT 5
17124: PPUSH
17125: CALL_OW 12
17129: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
17130: LD_ADDR_VAR 0 2
17134: PUSH
17135: LD_VAR 0 1
17139: PPUSH
17140: CALL_OW 250
17144: PPUSH
17145: LD_VAR 0 4
17149: PPUSH
17150: LD_INT 3
17152: PPUSH
17153: LD_INT 12
17155: PPUSH
17156: CALL_OW 12
17160: PPUSH
17161: CALL_OW 272
17165: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
17166: LD_ADDR_VAR 0 3
17170: PUSH
17171: LD_VAR 0 1
17175: PPUSH
17176: CALL_OW 251
17180: PPUSH
17181: LD_VAR 0 4
17185: PPUSH
17186: LD_INT 3
17188: PPUSH
17189: LD_INT 12
17191: PPUSH
17192: CALL_OW 12
17196: PPUSH
17197: CALL_OW 273
17201: ST_TO_ADDR
// if ValidHex ( x , y ) then
17202: LD_VAR 0 2
17206: PPUSH
17207: LD_VAR 0 3
17211: PPUSH
17212: CALL_OW 488
17216: IFFALSE 17251
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17218: LD_VAR 0 1
17222: PPUSH
17223: LD_VAR 0 2
17227: PPUSH
17228: LD_VAR 0 3
17232: PPUSH
17233: LD_INT 3
17235: PPUSH
17236: LD_INT 6
17238: PPUSH
17239: CALL_OW 12
17243: PPUSH
17244: LD_INT 1
17246: PPUSH
17247: CALL_OW 483
// end ;
17251: GO 17111
17253: POP
17254: POP
// end ;
17255: PPOPN 5
17257: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17258: LD_EXP 22
17262: PUSH
17263: LD_EXP 57
17267: AND
17268: IFFALSE 17362
17270: GO 17272
17272: DISABLE
17273: LD_INT 0
17275: PPUSH
17276: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17277: LD_ADDR_VAR 0 2
17281: PUSH
17282: LD_INT 22
17284: PUSH
17285: LD_OWVAR 2
17289: PUSH
17290: EMPTY
17291: LIST
17292: LIST
17293: PUSH
17294: LD_INT 32
17296: PUSH
17297: LD_INT 1
17299: PUSH
17300: EMPTY
17301: LIST
17302: LIST
17303: PUSH
17304: LD_INT 21
17306: PUSH
17307: LD_INT 2
17309: PUSH
17310: EMPTY
17311: LIST
17312: LIST
17313: PUSH
17314: EMPTY
17315: LIST
17316: LIST
17317: LIST
17318: PPUSH
17319: CALL_OW 69
17323: ST_TO_ADDR
// if not tmp then
17324: LD_VAR 0 2
17328: NOT
17329: IFFALSE 17333
// exit ;
17331: GO 17362
// for i in tmp do
17333: LD_ADDR_VAR 0 1
17337: PUSH
17338: LD_VAR 0 2
17342: PUSH
17343: FOR_IN
17344: IFFALSE 17360
// SetFuel ( i , 0 ) ;
17346: LD_VAR 0 1
17350: PPUSH
17351: LD_INT 0
17353: PPUSH
17354: CALL_OW 240
17358: GO 17343
17360: POP
17361: POP
// end ;
17362: PPOPN 2
17364: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17365: LD_EXP 22
17369: PUSH
17370: LD_EXP 58
17374: AND
17375: IFFALSE 17441
17377: GO 17379
17379: DISABLE
17380: LD_INT 0
17382: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17383: LD_ADDR_VAR 0 1
17387: PUSH
17388: LD_INT 22
17390: PUSH
17391: LD_OWVAR 2
17395: PUSH
17396: EMPTY
17397: LIST
17398: LIST
17399: PUSH
17400: LD_INT 30
17402: PUSH
17403: LD_INT 29
17405: PUSH
17406: EMPTY
17407: LIST
17408: LIST
17409: PUSH
17410: EMPTY
17411: LIST
17412: LIST
17413: PPUSH
17414: CALL_OW 69
17418: ST_TO_ADDR
// if not tmp then
17419: LD_VAR 0 1
17423: NOT
17424: IFFALSE 17428
// exit ;
17426: GO 17441
// DestroyUnit ( tmp [ 1 ] ) ;
17428: LD_VAR 0 1
17432: PUSH
17433: LD_INT 1
17435: ARRAY
17436: PPUSH
17437: CALL_OW 65
// end ;
17441: PPOPN 1
17443: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17444: LD_EXP 22
17448: PUSH
17449: LD_EXP 60
17453: AND
17454: IFFALSE 17583
17456: GO 17458
17458: DISABLE
17459: LD_INT 0
17461: PPUSH
// begin uc_side := 0 ;
17462: LD_ADDR_OWVAR 20
17466: PUSH
17467: LD_INT 0
17469: ST_TO_ADDR
// uc_nation := nation_arabian ;
17470: LD_ADDR_OWVAR 21
17474: PUSH
17475: LD_INT 2
17477: ST_TO_ADDR
// hc_gallery :=  ;
17478: LD_ADDR_OWVAR 33
17482: PUSH
17483: LD_STRING 
17485: ST_TO_ADDR
// hc_name :=  ;
17486: LD_ADDR_OWVAR 26
17490: PUSH
17491: LD_STRING 
17493: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17494: LD_INT 1
17496: PPUSH
17497: LD_INT 11
17499: PPUSH
17500: LD_INT 10
17502: PPUSH
17503: CALL_OW 380
// un := CreateHuman ;
17507: LD_ADDR_VAR 0 1
17511: PUSH
17512: CALL_OW 44
17516: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17517: LD_VAR 0 1
17521: PPUSH
17522: LD_INT 1
17524: PPUSH
17525: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17529: LD_INT 35
17531: PPUSH
17532: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17536: LD_VAR 0 1
17540: PPUSH
17541: LD_INT 22
17543: PUSH
17544: LD_OWVAR 2
17548: PUSH
17549: EMPTY
17550: LIST
17551: LIST
17552: PPUSH
17553: CALL_OW 69
17557: PPUSH
17558: LD_VAR 0 1
17562: PPUSH
17563: CALL_OW 74
17567: PPUSH
17568: CALL_OW 115
// until IsDead ( un ) ;
17572: LD_VAR 0 1
17576: PPUSH
17577: CALL_OW 301
17581: IFFALSE 17529
// end ;
17583: PPOPN 1
17585: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17586: LD_EXP 22
17590: PUSH
17591: LD_EXP 62
17595: AND
17596: IFFALSE 17608
17598: GO 17600
17600: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17601: LD_STRING earthquake(getX(game), 0, 32)
17603: PPUSH
17604: CALL_OW 559
17608: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17609: LD_EXP 22
17613: PUSH
17614: LD_EXP 63
17618: AND
17619: IFFALSE 17710
17621: GO 17623
17623: DISABLE
17624: LD_INT 0
17626: PPUSH
// begin enable ;
17627: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17628: LD_ADDR_VAR 0 1
17632: PUSH
17633: LD_INT 22
17635: PUSH
17636: LD_OWVAR 2
17640: PUSH
17641: EMPTY
17642: LIST
17643: LIST
17644: PUSH
17645: LD_INT 21
17647: PUSH
17648: LD_INT 2
17650: PUSH
17651: EMPTY
17652: LIST
17653: LIST
17654: PUSH
17655: LD_INT 33
17657: PUSH
17658: LD_INT 3
17660: PUSH
17661: EMPTY
17662: LIST
17663: LIST
17664: PUSH
17665: EMPTY
17666: LIST
17667: LIST
17668: LIST
17669: PPUSH
17670: CALL_OW 69
17674: ST_TO_ADDR
// if not tmp then
17675: LD_VAR 0 1
17679: NOT
17680: IFFALSE 17684
// exit ;
17682: GO 17710
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17684: LD_VAR 0 1
17688: PUSH
17689: LD_INT 1
17691: PPUSH
17692: LD_VAR 0 1
17696: PPUSH
17697: CALL_OW 12
17701: ARRAY
17702: PPUSH
17703: LD_INT 1
17705: PPUSH
17706: CALL_OW 234
// end ;
17710: PPOPN 1
17712: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17713: LD_EXP 22
17717: PUSH
17718: LD_EXP 64
17722: AND
17723: IFFALSE 17864
17725: GO 17727
17727: DISABLE
17728: LD_INT 0
17730: PPUSH
17731: PPUSH
17732: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17733: LD_ADDR_VAR 0 3
17737: PUSH
17738: LD_INT 22
17740: PUSH
17741: LD_OWVAR 2
17745: PUSH
17746: EMPTY
17747: LIST
17748: LIST
17749: PUSH
17750: LD_INT 25
17752: PUSH
17753: LD_INT 1
17755: PUSH
17756: EMPTY
17757: LIST
17758: LIST
17759: PUSH
17760: EMPTY
17761: LIST
17762: LIST
17763: PPUSH
17764: CALL_OW 69
17768: ST_TO_ADDR
// if not tmp then
17769: LD_VAR 0 3
17773: NOT
17774: IFFALSE 17778
// exit ;
17776: GO 17864
// un := tmp [ rand ( 1 , tmp ) ] ;
17778: LD_ADDR_VAR 0 2
17782: PUSH
17783: LD_VAR 0 3
17787: PUSH
17788: LD_INT 1
17790: PPUSH
17791: LD_VAR 0 3
17795: PPUSH
17796: CALL_OW 12
17800: ARRAY
17801: ST_TO_ADDR
// if Crawls ( un ) then
17802: LD_VAR 0 2
17806: PPUSH
17807: CALL_OW 318
17811: IFFALSE 17822
// ComWalk ( un ) ;
17813: LD_VAR 0 2
17817: PPUSH
17818: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17822: LD_VAR 0 2
17826: PPUSH
17827: LD_INT 9
17829: PPUSH
17830: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17834: LD_INT 28
17836: PPUSH
17837: LD_OWVAR 2
17841: PPUSH
17842: LD_INT 2
17844: PPUSH
17845: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17849: LD_INT 29
17851: PPUSH
17852: LD_OWVAR 2
17856: PPUSH
17857: LD_INT 2
17859: PPUSH
17860: CALL_OW 322
// end ;
17864: PPOPN 3
17866: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17867: LD_EXP 22
17871: PUSH
17872: LD_EXP 65
17876: AND
17877: IFFALSE 17988
17879: GO 17881
17881: DISABLE
17882: LD_INT 0
17884: PPUSH
17885: PPUSH
17886: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17887: LD_ADDR_VAR 0 3
17891: PUSH
17892: LD_INT 22
17894: PUSH
17895: LD_OWVAR 2
17899: PUSH
17900: EMPTY
17901: LIST
17902: LIST
17903: PUSH
17904: LD_INT 25
17906: PUSH
17907: LD_INT 1
17909: PUSH
17910: EMPTY
17911: LIST
17912: LIST
17913: PUSH
17914: EMPTY
17915: LIST
17916: LIST
17917: PPUSH
17918: CALL_OW 69
17922: ST_TO_ADDR
// if not tmp then
17923: LD_VAR 0 3
17927: NOT
17928: IFFALSE 17932
// exit ;
17930: GO 17988
// un := tmp [ rand ( 1 , tmp ) ] ;
17932: LD_ADDR_VAR 0 2
17936: PUSH
17937: LD_VAR 0 3
17941: PUSH
17942: LD_INT 1
17944: PPUSH
17945: LD_VAR 0 3
17949: PPUSH
17950: CALL_OW 12
17954: ARRAY
17955: ST_TO_ADDR
// if Crawls ( un ) then
17956: LD_VAR 0 2
17960: PPUSH
17961: CALL_OW 318
17965: IFFALSE 17976
// ComWalk ( un ) ;
17967: LD_VAR 0 2
17971: PPUSH
17972: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17976: LD_VAR 0 2
17980: PPUSH
17981: LD_INT 8
17983: PPUSH
17984: CALL_OW 336
// end ;
17988: PPOPN 3
17990: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17991: LD_EXP 22
17995: PUSH
17996: LD_EXP 66
18000: AND
18001: IFFALSE 18145
18003: GO 18005
18005: DISABLE
18006: LD_INT 0
18008: PPUSH
18009: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
18010: LD_ADDR_VAR 0 2
18014: PUSH
18015: LD_INT 22
18017: PUSH
18018: LD_OWVAR 2
18022: PUSH
18023: EMPTY
18024: LIST
18025: LIST
18026: PUSH
18027: LD_INT 21
18029: PUSH
18030: LD_INT 2
18032: PUSH
18033: EMPTY
18034: LIST
18035: LIST
18036: PUSH
18037: LD_INT 2
18039: PUSH
18040: LD_INT 34
18042: PUSH
18043: LD_INT 12
18045: PUSH
18046: EMPTY
18047: LIST
18048: LIST
18049: PUSH
18050: LD_INT 34
18052: PUSH
18053: LD_INT 51
18055: PUSH
18056: EMPTY
18057: LIST
18058: LIST
18059: PUSH
18060: LD_INT 34
18062: PUSH
18063: LD_INT 32
18065: PUSH
18066: EMPTY
18067: LIST
18068: LIST
18069: PUSH
18070: EMPTY
18071: LIST
18072: LIST
18073: LIST
18074: LIST
18075: PUSH
18076: EMPTY
18077: LIST
18078: LIST
18079: LIST
18080: PPUSH
18081: CALL_OW 69
18085: ST_TO_ADDR
// if not tmp then
18086: LD_VAR 0 2
18090: NOT
18091: IFFALSE 18095
// exit ;
18093: GO 18145
// for i in tmp do
18095: LD_ADDR_VAR 0 1
18099: PUSH
18100: LD_VAR 0 2
18104: PUSH
18105: FOR_IN
18106: IFFALSE 18143
// if GetCargo ( i , mat_artifact ) = 0 then
18108: LD_VAR 0 1
18112: PPUSH
18113: LD_INT 4
18115: PPUSH
18116: CALL_OW 289
18120: PUSH
18121: LD_INT 0
18123: EQUAL
18124: IFFALSE 18141
// SetCargo ( i , mat_siberit , 100 ) ;
18126: LD_VAR 0 1
18130: PPUSH
18131: LD_INT 3
18133: PPUSH
18134: LD_INT 100
18136: PPUSH
18137: CALL_OW 290
18141: GO 18105
18143: POP
18144: POP
// end ;
18145: PPOPN 2
18147: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
18148: LD_EXP 22
18152: PUSH
18153: LD_EXP 67
18157: AND
18158: IFFALSE 18341
18160: GO 18162
18162: DISABLE
18163: LD_INT 0
18165: PPUSH
18166: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18167: LD_ADDR_VAR 0 2
18171: PUSH
18172: LD_INT 22
18174: PUSH
18175: LD_OWVAR 2
18179: PUSH
18180: EMPTY
18181: LIST
18182: LIST
18183: PPUSH
18184: CALL_OW 69
18188: ST_TO_ADDR
// if not tmp then
18189: LD_VAR 0 2
18193: NOT
18194: IFFALSE 18198
// exit ;
18196: GO 18341
// for i := 1 to 2 do
18198: LD_ADDR_VAR 0 1
18202: PUSH
18203: DOUBLE
18204: LD_INT 1
18206: DEC
18207: ST_TO_ADDR
18208: LD_INT 2
18210: PUSH
18211: FOR_TO
18212: IFFALSE 18339
// begin uc_side := your_side ;
18214: LD_ADDR_OWVAR 20
18218: PUSH
18219: LD_OWVAR 2
18223: ST_TO_ADDR
// uc_nation := nation_american ;
18224: LD_ADDR_OWVAR 21
18228: PUSH
18229: LD_INT 1
18231: ST_TO_ADDR
// vc_chassis := us_morphling ;
18232: LD_ADDR_OWVAR 37
18236: PUSH
18237: LD_INT 5
18239: ST_TO_ADDR
// vc_engine := engine_siberite ;
18240: LD_ADDR_OWVAR 39
18244: PUSH
18245: LD_INT 3
18247: ST_TO_ADDR
// vc_control := control_computer ;
18248: LD_ADDR_OWVAR 38
18252: PUSH
18253: LD_INT 3
18255: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18256: LD_ADDR_OWVAR 40
18260: PUSH
18261: LD_INT 10
18263: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
18264: LD_VAR 0 2
18268: PUSH
18269: LD_INT 1
18271: ARRAY
18272: PPUSH
18273: CALL_OW 310
18277: NOT
18278: IFFALSE 18325
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
18280: CALL_OW 45
18284: PPUSH
18285: LD_VAR 0 2
18289: PUSH
18290: LD_INT 1
18292: ARRAY
18293: PPUSH
18294: CALL_OW 250
18298: PPUSH
18299: LD_VAR 0 2
18303: PUSH
18304: LD_INT 1
18306: ARRAY
18307: PPUSH
18308: CALL_OW 251
18312: PPUSH
18313: LD_INT 12
18315: PPUSH
18316: LD_INT 1
18318: PPUSH
18319: CALL_OW 50
18323: GO 18337
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18325: CALL_OW 45
18329: PPUSH
18330: LD_INT 1
18332: PPUSH
18333: CALL_OW 51
// end ;
18337: GO 18211
18339: POP
18340: POP
// end ;
18341: PPOPN 2
18343: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18344: LD_EXP 22
18348: PUSH
18349: LD_EXP 68
18353: AND
18354: IFFALSE 18576
18356: GO 18358
18358: DISABLE
18359: LD_INT 0
18361: PPUSH
18362: PPUSH
18363: PPUSH
18364: PPUSH
18365: PPUSH
18366: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18367: LD_ADDR_VAR 0 6
18371: PUSH
18372: LD_INT 22
18374: PUSH
18375: LD_OWVAR 2
18379: PUSH
18380: EMPTY
18381: LIST
18382: LIST
18383: PUSH
18384: LD_INT 21
18386: PUSH
18387: LD_INT 1
18389: PUSH
18390: EMPTY
18391: LIST
18392: LIST
18393: PUSH
18394: LD_INT 3
18396: PUSH
18397: LD_INT 23
18399: PUSH
18400: LD_INT 0
18402: PUSH
18403: EMPTY
18404: LIST
18405: LIST
18406: PUSH
18407: EMPTY
18408: LIST
18409: LIST
18410: PUSH
18411: EMPTY
18412: LIST
18413: LIST
18414: LIST
18415: PPUSH
18416: CALL_OW 69
18420: ST_TO_ADDR
// if not tmp then
18421: LD_VAR 0 6
18425: NOT
18426: IFFALSE 18430
// exit ;
18428: GO 18576
// s1 := rand ( 1 , 4 ) ;
18430: LD_ADDR_VAR 0 2
18434: PUSH
18435: LD_INT 1
18437: PPUSH
18438: LD_INT 4
18440: PPUSH
18441: CALL_OW 12
18445: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18446: LD_ADDR_VAR 0 4
18450: PUSH
18451: LD_VAR 0 6
18455: PUSH
18456: LD_INT 1
18458: ARRAY
18459: PPUSH
18460: LD_VAR 0 2
18464: PPUSH
18465: CALL_OW 259
18469: ST_TO_ADDR
// if s1 = 1 then
18470: LD_VAR 0 2
18474: PUSH
18475: LD_INT 1
18477: EQUAL
18478: IFFALSE 18498
// s2 := rand ( 2 , 4 ) else
18480: LD_ADDR_VAR 0 3
18484: PUSH
18485: LD_INT 2
18487: PPUSH
18488: LD_INT 4
18490: PPUSH
18491: CALL_OW 12
18495: ST_TO_ADDR
18496: GO 18506
// s2 := 1 ;
18498: LD_ADDR_VAR 0 3
18502: PUSH
18503: LD_INT 1
18505: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18506: LD_ADDR_VAR 0 5
18510: PUSH
18511: LD_VAR 0 6
18515: PUSH
18516: LD_INT 1
18518: ARRAY
18519: PPUSH
18520: LD_VAR 0 3
18524: PPUSH
18525: CALL_OW 259
18529: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18530: LD_VAR 0 6
18534: PUSH
18535: LD_INT 1
18537: ARRAY
18538: PPUSH
18539: LD_VAR 0 2
18543: PPUSH
18544: LD_VAR 0 5
18548: PPUSH
18549: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18553: LD_VAR 0 6
18557: PUSH
18558: LD_INT 1
18560: ARRAY
18561: PPUSH
18562: LD_VAR 0 3
18566: PPUSH
18567: LD_VAR 0 4
18571: PPUSH
18572: CALL_OW 237
// end ;
18576: PPOPN 6
18578: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18579: LD_EXP 22
18583: PUSH
18584: LD_EXP 69
18588: AND
18589: IFFALSE 18668
18591: GO 18593
18593: DISABLE
18594: LD_INT 0
18596: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18597: LD_ADDR_VAR 0 1
18601: PUSH
18602: LD_INT 22
18604: PUSH
18605: LD_OWVAR 2
18609: PUSH
18610: EMPTY
18611: LIST
18612: LIST
18613: PUSH
18614: LD_INT 30
18616: PUSH
18617: LD_INT 3
18619: PUSH
18620: EMPTY
18621: LIST
18622: LIST
18623: PUSH
18624: EMPTY
18625: LIST
18626: LIST
18627: PPUSH
18628: CALL_OW 69
18632: ST_TO_ADDR
// if not tmp then
18633: LD_VAR 0 1
18637: NOT
18638: IFFALSE 18642
// exit ;
18640: GO 18668
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18642: LD_VAR 0 1
18646: PUSH
18647: LD_INT 1
18649: PPUSH
18650: LD_VAR 0 1
18654: PPUSH
18655: CALL_OW 12
18659: ARRAY
18660: PPUSH
18661: LD_INT 1
18663: PPUSH
18664: CALL_OW 234
// end ;
18668: PPOPN 1
18670: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18671: LD_EXP 22
18675: PUSH
18676: LD_EXP 70
18680: AND
18681: IFFALSE 18793
18683: GO 18685
18685: DISABLE
18686: LD_INT 0
18688: PPUSH
18689: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18690: LD_ADDR_VAR 0 2
18694: PUSH
18695: LD_INT 22
18697: PUSH
18698: LD_OWVAR 2
18702: PUSH
18703: EMPTY
18704: LIST
18705: LIST
18706: PUSH
18707: LD_INT 2
18709: PUSH
18710: LD_INT 30
18712: PUSH
18713: LD_INT 27
18715: PUSH
18716: EMPTY
18717: LIST
18718: LIST
18719: PUSH
18720: LD_INT 30
18722: PUSH
18723: LD_INT 26
18725: PUSH
18726: EMPTY
18727: LIST
18728: LIST
18729: PUSH
18730: LD_INT 30
18732: PUSH
18733: LD_INT 28
18735: PUSH
18736: EMPTY
18737: LIST
18738: LIST
18739: PUSH
18740: EMPTY
18741: LIST
18742: LIST
18743: LIST
18744: LIST
18745: PUSH
18746: EMPTY
18747: LIST
18748: LIST
18749: PPUSH
18750: CALL_OW 69
18754: ST_TO_ADDR
// if not tmp then
18755: LD_VAR 0 2
18759: NOT
18760: IFFALSE 18764
// exit ;
18762: GO 18793
// for i in tmp do
18764: LD_ADDR_VAR 0 1
18768: PUSH
18769: LD_VAR 0 2
18773: PUSH
18774: FOR_IN
18775: IFFALSE 18791
// SetLives ( i , 1 ) ;
18777: LD_VAR 0 1
18781: PPUSH
18782: LD_INT 1
18784: PPUSH
18785: CALL_OW 234
18789: GO 18774
18791: POP
18792: POP
// end ;
18793: PPOPN 2
18795: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18796: LD_EXP 22
18800: PUSH
18801: LD_EXP 71
18805: AND
18806: IFFALSE 19093
18808: GO 18810
18810: DISABLE
18811: LD_INT 0
18813: PPUSH
18814: PPUSH
18815: PPUSH
// begin i := rand ( 1 , 7 ) ;
18816: LD_ADDR_VAR 0 1
18820: PUSH
18821: LD_INT 1
18823: PPUSH
18824: LD_INT 7
18826: PPUSH
18827: CALL_OW 12
18831: ST_TO_ADDR
// case i of 1 :
18832: LD_VAR 0 1
18836: PUSH
18837: LD_INT 1
18839: DOUBLE
18840: EQUAL
18841: IFTRUE 18845
18843: GO 18855
18845: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18846: LD_STRING earthquake(getX(game), 0, 32)
18848: PPUSH
18849: CALL_OW 559
18853: GO 19093
18855: LD_INT 2
18857: DOUBLE
18858: EQUAL
18859: IFTRUE 18863
18861: GO 18877
18863: POP
// begin ToLua ( displayStucuk(); ) ;
18864: LD_STRING displayStucuk();
18866: PPUSH
18867: CALL_OW 559
// ResetFog ;
18871: CALL_OW 335
// end ; 3 :
18875: GO 19093
18877: LD_INT 3
18879: DOUBLE
18880: EQUAL
18881: IFTRUE 18885
18883: GO 18989
18885: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18886: LD_ADDR_VAR 0 2
18890: PUSH
18891: LD_INT 22
18893: PUSH
18894: LD_OWVAR 2
18898: PUSH
18899: EMPTY
18900: LIST
18901: LIST
18902: PUSH
18903: LD_INT 25
18905: PUSH
18906: LD_INT 1
18908: PUSH
18909: EMPTY
18910: LIST
18911: LIST
18912: PUSH
18913: EMPTY
18914: LIST
18915: LIST
18916: PPUSH
18917: CALL_OW 69
18921: ST_TO_ADDR
// if not tmp then
18922: LD_VAR 0 2
18926: NOT
18927: IFFALSE 18931
// exit ;
18929: GO 19093
// un := tmp [ rand ( 1 , tmp ) ] ;
18931: LD_ADDR_VAR 0 3
18935: PUSH
18936: LD_VAR 0 2
18940: PUSH
18941: LD_INT 1
18943: PPUSH
18944: LD_VAR 0 2
18948: PPUSH
18949: CALL_OW 12
18953: ARRAY
18954: ST_TO_ADDR
// if Crawls ( un ) then
18955: LD_VAR 0 3
18959: PPUSH
18960: CALL_OW 318
18964: IFFALSE 18975
// ComWalk ( un ) ;
18966: LD_VAR 0 3
18970: PPUSH
18971: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18975: LD_VAR 0 3
18979: PPUSH
18980: LD_INT 8
18982: PPUSH
18983: CALL_OW 336
// end ; 4 :
18987: GO 19093
18989: LD_INT 4
18991: DOUBLE
18992: EQUAL
18993: IFTRUE 18997
18995: GO 19071
18997: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18998: LD_ADDR_VAR 0 2
19002: PUSH
19003: LD_INT 22
19005: PUSH
19006: LD_OWVAR 2
19010: PUSH
19011: EMPTY
19012: LIST
19013: LIST
19014: PUSH
19015: LD_INT 30
19017: PUSH
19018: LD_INT 29
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: PUSH
19025: EMPTY
19026: LIST
19027: LIST
19028: PPUSH
19029: CALL_OW 69
19033: ST_TO_ADDR
// if not tmp then
19034: LD_VAR 0 2
19038: NOT
19039: IFFALSE 19043
// exit ;
19041: GO 19093
// CenterNowOnUnits ( tmp [ 1 ] ) ;
19043: LD_VAR 0 2
19047: PUSH
19048: LD_INT 1
19050: ARRAY
19051: PPUSH
19052: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
19056: LD_VAR 0 2
19060: PUSH
19061: LD_INT 1
19063: ARRAY
19064: PPUSH
19065: CALL_OW 65
// end ; 5 .. 7 :
19069: GO 19093
19071: LD_INT 5
19073: DOUBLE
19074: GREATEREQUAL
19075: IFFALSE 19083
19077: LD_INT 7
19079: DOUBLE
19080: LESSEQUAL
19081: IFTRUE 19085
19083: GO 19092
19085: POP
// StreamSibBomb ; end ;
19086: CALL 15330 0 0
19090: GO 19093
19092: POP
// end ;
19093: PPOPN 3
19095: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19096: LD_EXP 22
19100: PUSH
19101: LD_EXP 72
19105: AND
19106: IFFALSE 19262
19108: GO 19110
19110: DISABLE
19111: LD_INT 0
19113: PPUSH
19114: PPUSH
19115: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
19116: LD_ADDR_VAR 0 2
19120: PUSH
19121: LD_INT 81
19123: PUSH
19124: LD_OWVAR 2
19128: PUSH
19129: EMPTY
19130: LIST
19131: LIST
19132: PUSH
19133: LD_INT 2
19135: PUSH
19136: LD_INT 21
19138: PUSH
19139: LD_INT 1
19141: PUSH
19142: EMPTY
19143: LIST
19144: LIST
19145: PUSH
19146: LD_INT 21
19148: PUSH
19149: LD_INT 2
19151: PUSH
19152: EMPTY
19153: LIST
19154: LIST
19155: PUSH
19156: EMPTY
19157: LIST
19158: LIST
19159: LIST
19160: PUSH
19161: EMPTY
19162: LIST
19163: LIST
19164: PPUSH
19165: CALL_OW 69
19169: ST_TO_ADDR
// if not tmp then
19170: LD_VAR 0 2
19174: NOT
19175: IFFALSE 19179
// exit ;
19177: GO 19262
// p := 0 ;
19179: LD_ADDR_VAR 0 3
19183: PUSH
19184: LD_INT 0
19186: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19187: LD_INT 35
19189: PPUSH
19190: CALL_OW 67
// p := p + 1 ;
19194: LD_ADDR_VAR 0 3
19198: PUSH
19199: LD_VAR 0 3
19203: PUSH
19204: LD_INT 1
19206: PLUS
19207: ST_TO_ADDR
// for i in tmp do
19208: LD_ADDR_VAR 0 1
19212: PUSH
19213: LD_VAR 0 2
19217: PUSH
19218: FOR_IN
19219: IFFALSE 19250
// if GetLives ( i ) < 1000 then
19221: LD_VAR 0 1
19225: PPUSH
19226: CALL_OW 256
19230: PUSH
19231: LD_INT 1000
19233: LESS
19234: IFFALSE 19248
// SetLives ( i , 1000 ) ;
19236: LD_VAR 0 1
19240: PPUSH
19241: LD_INT 1000
19243: PPUSH
19244: CALL_OW 234
19248: GO 19218
19250: POP
19251: POP
// until p > 20 ;
19252: LD_VAR 0 3
19256: PUSH
19257: LD_INT 20
19259: GREATER
19260: IFFALSE 19187
// end ;
19262: PPOPN 3
19264: END
// every 0 0$1 trigger StreamModeActive and sTime do
19265: LD_EXP 22
19269: PUSH
19270: LD_EXP 73
19274: AND
19275: IFFALSE 19310
19277: GO 19279
19279: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19280: LD_INT 28
19282: PPUSH
19283: LD_OWVAR 2
19287: PPUSH
19288: LD_INT 2
19290: PPUSH
19291: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19295: LD_INT 30
19297: PPUSH
19298: LD_OWVAR 2
19302: PPUSH
19303: LD_INT 2
19305: PPUSH
19306: CALL_OW 322
// end ;
19310: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19311: LD_EXP 22
19315: PUSH
19316: LD_EXP 74
19320: AND
19321: IFFALSE 19442
19323: GO 19325
19325: DISABLE
19326: LD_INT 0
19328: PPUSH
19329: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19330: LD_ADDR_VAR 0 2
19334: PUSH
19335: LD_INT 22
19337: PUSH
19338: LD_OWVAR 2
19342: PUSH
19343: EMPTY
19344: LIST
19345: LIST
19346: PUSH
19347: LD_INT 21
19349: PUSH
19350: LD_INT 1
19352: PUSH
19353: EMPTY
19354: LIST
19355: LIST
19356: PUSH
19357: LD_INT 3
19359: PUSH
19360: LD_INT 23
19362: PUSH
19363: LD_INT 0
19365: PUSH
19366: EMPTY
19367: LIST
19368: LIST
19369: PUSH
19370: EMPTY
19371: LIST
19372: LIST
19373: PUSH
19374: EMPTY
19375: LIST
19376: LIST
19377: LIST
19378: PPUSH
19379: CALL_OW 69
19383: ST_TO_ADDR
// if not tmp then
19384: LD_VAR 0 2
19388: NOT
19389: IFFALSE 19393
// exit ;
19391: GO 19442
// for i in tmp do
19393: LD_ADDR_VAR 0 1
19397: PUSH
19398: LD_VAR 0 2
19402: PUSH
19403: FOR_IN
19404: IFFALSE 19440
// begin if Crawls ( i ) then
19406: LD_VAR 0 1
19410: PPUSH
19411: CALL_OW 318
19415: IFFALSE 19426
// ComWalk ( i ) ;
19417: LD_VAR 0 1
19421: PPUSH
19422: CALL_OW 138
// SetClass ( i , 2 ) ;
19426: LD_VAR 0 1
19430: PPUSH
19431: LD_INT 2
19433: PPUSH
19434: CALL_OW 336
// end ;
19438: GO 19403
19440: POP
19441: POP
// end ;
19442: PPOPN 2
19444: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19445: LD_EXP 22
19449: PUSH
19450: LD_EXP 75
19454: AND
19455: IFFALSE 19743
19457: GO 19459
19459: DISABLE
19460: LD_INT 0
19462: PPUSH
19463: PPUSH
19464: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19465: LD_OWVAR 2
19469: PPUSH
19470: LD_INT 9
19472: PPUSH
19473: LD_INT 1
19475: PPUSH
19476: LD_INT 1
19478: PPUSH
19479: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19483: LD_INT 9
19485: PPUSH
19486: LD_OWVAR 2
19490: PPUSH
19491: CALL_OW 343
// uc_side := 9 ;
19495: LD_ADDR_OWVAR 20
19499: PUSH
19500: LD_INT 9
19502: ST_TO_ADDR
// uc_nation := 2 ;
19503: LD_ADDR_OWVAR 21
19507: PUSH
19508: LD_INT 2
19510: ST_TO_ADDR
// hc_name := Dark Warrior ;
19511: LD_ADDR_OWVAR 26
19515: PUSH
19516: LD_STRING Dark Warrior
19518: ST_TO_ADDR
// hc_gallery :=  ;
19519: LD_ADDR_OWVAR 33
19523: PUSH
19524: LD_STRING 
19526: ST_TO_ADDR
// hc_noskilllimit := true ;
19527: LD_ADDR_OWVAR 76
19531: PUSH
19532: LD_INT 1
19534: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19535: LD_ADDR_OWVAR 31
19539: PUSH
19540: LD_INT 30
19542: PUSH
19543: LD_INT 30
19545: PUSH
19546: LD_INT 30
19548: PUSH
19549: LD_INT 30
19551: PUSH
19552: EMPTY
19553: LIST
19554: LIST
19555: LIST
19556: LIST
19557: ST_TO_ADDR
// un := CreateHuman ;
19558: LD_ADDR_VAR 0 3
19562: PUSH
19563: CALL_OW 44
19567: ST_TO_ADDR
// hc_noskilllimit := false ;
19568: LD_ADDR_OWVAR 76
19572: PUSH
19573: LD_INT 0
19575: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19576: LD_VAR 0 3
19580: PPUSH
19581: LD_INT 1
19583: PPUSH
19584: CALL_OW 51
// ToLua ( playRanger() ) ;
19588: LD_STRING playRanger()
19590: PPUSH
19591: CALL_OW 559
// p := 0 ;
19595: LD_ADDR_VAR 0 2
19599: PUSH
19600: LD_INT 0
19602: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19603: LD_INT 35
19605: PPUSH
19606: CALL_OW 67
// p := p + 1 ;
19610: LD_ADDR_VAR 0 2
19614: PUSH
19615: LD_VAR 0 2
19619: PUSH
19620: LD_INT 1
19622: PLUS
19623: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19624: LD_VAR 0 3
19628: PPUSH
19629: CALL_OW 256
19633: PUSH
19634: LD_INT 1000
19636: LESS
19637: IFFALSE 19651
// SetLives ( un , 1000 ) ;
19639: LD_VAR 0 3
19643: PPUSH
19644: LD_INT 1000
19646: PPUSH
19647: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19651: LD_VAR 0 3
19655: PPUSH
19656: LD_INT 81
19658: PUSH
19659: LD_OWVAR 2
19663: PUSH
19664: EMPTY
19665: LIST
19666: LIST
19667: PUSH
19668: LD_INT 91
19670: PUSH
19671: LD_VAR 0 3
19675: PUSH
19676: LD_INT 30
19678: PUSH
19679: EMPTY
19680: LIST
19681: LIST
19682: LIST
19683: PUSH
19684: EMPTY
19685: LIST
19686: LIST
19687: PPUSH
19688: CALL_OW 69
19692: PPUSH
19693: LD_VAR 0 3
19697: PPUSH
19698: CALL_OW 74
19702: PPUSH
19703: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19707: LD_VAR 0 2
19711: PUSH
19712: LD_INT 80
19714: GREATER
19715: PUSH
19716: LD_VAR 0 3
19720: PPUSH
19721: CALL_OW 301
19725: OR
19726: IFFALSE 19603
// if un then
19728: LD_VAR 0 3
19732: IFFALSE 19743
// RemoveUnit ( un ) ;
19734: LD_VAR 0 3
19738: PPUSH
19739: CALL_OW 64
// end ;
19743: PPOPN 3
19745: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19746: LD_EXP 76
19750: IFFALSE 19866
19752: GO 19754
19754: DISABLE
19755: LD_INT 0
19757: PPUSH
19758: PPUSH
19759: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19760: LD_ADDR_VAR 0 2
19764: PUSH
19765: LD_INT 81
19767: PUSH
19768: LD_OWVAR 2
19772: PUSH
19773: EMPTY
19774: LIST
19775: LIST
19776: PUSH
19777: LD_INT 21
19779: PUSH
19780: LD_INT 1
19782: PUSH
19783: EMPTY
19784: LIST
19785: LIST
19786: PUSH
19787: EMPTY
19788: LIST
19789: LIST
19790: PPUSH
19791: CALL_OW 69
19795: ST_TO_ADDR
// ToLua ( playComputer() ) ;
19796: LD_STRING playComputer()
19798: PPUSH
19799: CALL_OW 559
// if not tmp then
19803: LD_VAR 0 2
19807: NOT
19808: IFFALSE 19812
// exit ;
19810: GO 19866
// for i in tmp do
19812: LD_ADDR_VAR 0 1
19816: PUSH
19817: LD_VAR 0 2
19821: PUSH
19822: FOR_IN
19823: IFFALSE 19864
// for j := 1 to 4 do
19825: LD_ADDR_VAR 0 3
19829: PUSH
19830: DOUBLE
19831: LD_INT 1
19833: DEC
19834: ST_TO_ADDR
19835: LD_INT 4
19837: PUSH
19838: FOR_TO
19839: IFFALSE 19860
// SetSkill ( i , j , 10 ) ;
19841: LD_VAR 0 1
19845: PPUSH
19846: LD_VAR 0 3
19850: PPUSH
19851: LD_INT 10
19853: PPUSH
19854: CALL_OW 237
19858: GO 19838
19860: POP
19861: POP
19862: GO 19822
19864: POP
19865: POP
// end ;
19866: PPOPN 3
19868: END
// every 0 0$1 trigger s30 do var i , tmp ;
19869: LD_EXP 77
19873: IFFALSE 19942
19875: GO 19877
19877: DISABLE
19878: LD_INT 0
19880: PPUSH
19881: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19882: LD_ADDR_VAR 0 2
19886: PUSH
19887: LD_INT 22
19889: PUSH
19890: LD_OWVAR 2
19894: PUSH
19895: EMPTY
19896: LIST
19897: LIST
19898: PPUSH
19899: CALL_OW 69
19903: ST_TO_ADDR
// if not tmp then
19904: LD_VAR 0 2
19908: NOT
19909: IFFALSE 19913
// exit ;
19911: GO 19942
// for i in tmp do
19913: LD_ADDR_VAR 0 1
19917: PUSH
19918: LD_VAR 0 2
19922: PUSH
19923: FOR_IN
19924: IFFALSE 19940
// SetLives ( i , 300 ) ;
19926: LD_VAR 0 1
19930: PPUSH
19931: LD_INT 300
19933: PPUSH
19934: CALL_OW 234
19938: GO 19923
19940: POP
19941: POP
// end ;
19942: PPOPN 2
19944: END
// every 0 0$1 trigger s60 do var i , tmp ;
19945: LD_EXP 78
19949: IFFALSE 20018
19951: GO 19953
19953: DISABLE
19954: LD_INT 0
19956: PPUSH
19957: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19958: LD_ADDR_VAR 0 2
19962: PUSH
19963: LD_INT 22
19965: PUSH
19966: LD_OWVAR 2
19970: PUSH
19971: EMPTY
19972: LIST
19973: LIST
19974: PPUSH
19975: CALL_OW 69
19979: ST_TO_ADDR
// if not tmp then
19980: LD_VAR 0 2
19984: NOT
19985: IFFALSE 19989
// exit ;
19987: GO 20018
// for i in tmp do
19989: LD_ADDR_VAR 0 1
19993: PUSH
19994: LD_VAR 0 2
19998: PUSH
19999: FOR_IN
20000: IFFALSE 20016
// SetLives ( i , 600 ) ;
20002: LD_VAR 0 1
20006: PPUSH
20007: LD_INT 600
20009: PPUSH
20010: CALL_OW 234
20014: GO 19999
20016: POP
20017: POP
// end ;
20018: PPOPN 2
20020: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20021: LD_INT 0
20023: PPUSH
// case cmd of 301 :
20024: LD_VAR 0 1
20028: PUSH
20029: LD_INT 301
20031: DOUBLE
20032: EQUAL
20033: IFTRUE 20037
20035: GO 20069
20037: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
20038: LD_VAR 0 6
20042: PPUSH
20043: LD_VAR 0 7
20047: PPUSH
20048: LD_VAR 0 8
20052: PPUSH
20053: LD_VAR 0 4
20057: PPUSH
20058: LD_VAR 0 5
20062: PPUSH
20063: CALL 21270 0 5
20067: GO 20190
20069: LD_INT 302
20071: DOUBLE
20072: EQUAL
20073: IFTRUE 20077
20075: GO 20114
20077: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
20078: LD_VAR 0 6
20082: PPUSH
20083: LD_VAR 0 7
20087: PPUSH
20088: LD_VAR 0 8
20092: PPUSH
20093: LD_VAR 0 9
20097: PPUSH
20098: LD_VAR 0 4
20102: PPUSH
20103: LD_VAR 0 5
20107: PPUSH
20108: CALL 21361 0 6
20112: GO 20190
20114: LD_INT 303
20116: DOUBLE
20117: EQUAL
20118: IFTRUE 20122
20120: GO 20159
20122: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
20123: LD_VAR 0 6
20127: PPUSH
20128: LD_VAR 0 7
20132: PPUSH
20133: LD_VAR 0 8
20137: PPUSH
20138: LD_VAR 0 9
20142: PPUSH
20143: LD_VAR 0 4
20147: PPUSH
20148: LD_VAR 0 5
20152: PPUSH
20153: CALL 20195 0 6
20157: GO 20190
20159: LD_INT 304
20161: DOUBLE
20162: EQUAL
20163: IFTRUE 20167
20165: GO 20189
20167: POP
// hHackTeleport ( unit , x , y ) ; end ;
20168: LD_VAR 0 2
20172: PPUSH
20173: LD_VAR 0 4
20177: PPUSH
20178: LD_VAR 0 5
20182: PPUSH
20183: CALL 21954 0 3
20187: GO 20190
20189: POP
// end ;
20190: LD_VAR 0 12
20194: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
20195: LD_INT 0
20197: PPUSH
20198: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
20199: LD_VAR 0 1
20203: PUSH
20204: LD_INT 1
20206: LESS
20207: PUSH
20208: LD_VAR 0 1
20212: PUSH
20213: LD_INT 3
20215: GREATER
20216: OR
20217: PUSH
20218: LD_VAR 0 5
20222: PPUSH
20223: LD_VAR 0 6
20227: PPUSH
20228: CALL_OW 428
20232: OR
20233: IFFALSE 20237
// exit ;
20235: GO 20957
// uc_side := your_side ;
20237: LD_ADDR_OWVAR 20
20241: PUSH
20242: LD_OWVAR 2
20246: ST_TO_ADDR
// uc_nation := nation ;
20247: LD_ADDR_OWVAR 21
20251: PUSH
20252: LD_VAR 0 1
20256: ST_TO_ADDR
// bc_level = 1 ;
20257: LD_ADDR_OWVAR 43
20261: PUSH
20262: LD_INT 1
20264: ST_TO_ADDR
// case btype of 1 :
20265: LD_VAR 0 2
20269: PUSH
20270: LD_INT 1
20272: DOUBLE
20273: EQUAL
20274: IFTRUE 20278
20276: GO 20289
20278: POP
// bc_type := b_depot ; 2 :
20279: LD_ADDR_OWVAR 42
20283: PUSH
20284: LD_INT 0
20286: ST_TO_ADDR
20287: GO 20901
20289: LD_INT 2
20291: DOUBLE
20292: EQUAL
20293: IFTRUE 20297
20295: GO 20308
20297: POP
// bc_type := b_warehouse ; 3 :
20298: LD_ADDR_OWVAR 42
20302: PUSH
20303: LD_INT 1
20305: ST_TO_ADDR
20306: GO 20901
20308: LD_INT 3
20310: DOUBLE
20311: EQUAL
20312: IFTRUE 20316
20314: GO 20327
20316: POP
// bc_type := b_lab ; 4 .. 9 :
20317: LD_ADDR_OWVAR 42
20321: PUSH
20322: LD_INT 6
20324: ST_TO_ADDR
20325: GO 20901
20327: LD_INT 4
20329: DOUBLE
20330: GREATEREQUAL
20331: IFFALSE 20339
20333: LD_INT 9
20335: DOUBLE
20336: LESSEQUAL
20337: IFTRUE 20341
20339: GO 20393
20341: POP
// begin bc_type := b_lab_half ;
20342: LD_ADDR_OWVAR 42
20346: PUSH
20347: LD_INT 7
20349: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
20350: LD_ADDR_OWVAR 44
20354: PUSH
20355: LD_INT 10
20357: PUSH
20358: LD_INT 11
20360: PUSH
20361: LD_INT 12
20363: PUSH
20364: LD_INT 15
20366: PUSH
20367: LD_INT 14
20369: PUSH
20370: LD_INT 13
20372: PUSH
20373: EMPTY
20374: LIST
20375: LIST
20376: LIST
20377: LIST
20378: LIST
20379: LIST
20380: PUSH
20381: LD_VAR 0 2
20385: PUSH
20386: LD_INT 3
20388: MINUS
20389: ARRAY
20390: ST_TO_ADDR
// end ; 10 .. 13 :
20391: GO 20901
20393: LD_INT 10
20395: DOUBLE
20396: GREATEREQUAL
20397: IFFALSE 20405
20399: LD_INT 13
20401: DOUBLE
20402: LESSEQUAL
20403: IFTRUE 20407
20405: GO 20484
20407: POP
// begin bc_type := b_lab_full ;
20408: LD_ADDR_OWVAR 42
20412: PUSH
20413: LD_INT 8
20415: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
20416: LD_ADDR_OWVAR 44
20420: PUSH
20421: LD_INT 10
20423: PUSH
20424: LD_INT 12
20426: PUSH
20427: LD_INT 14
20429: PUSH
20430: LD_INT 13
20432: PUSH
20433: EMPTY
20434: LIST
20435: LIST
20436: LIST
20437: LIST
20438: PUSH
20439: LD_VAR 0 2
20443: PUSH
20444: LD_INT 9
20446: MINUS
20447: ARRAY
20448: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20449: LD_ADDR_OWVAR 45
20453: PUSH
20454: LD_INT 11
20456: PUSH
20457: LD_INT 15
20459: PUSH
20460: LD_INT 12
20462: PUSH
20463: LD_INT 15
20465: PUSH
20466: EMPTY
20467: LIST
20468: LIST
20469: LIST
20470: LIST
20471: PUSH
20472: LD_VAR 0 2
20476: PUSH
20477: LD_INT 9
20479: MINUS
20480: ARRAY
20481: ST_TO_ADDR
// end ; 14 :
20482: GO 20901
20484: LD_INT 14
20486: DOUBLE
20487: EQUAL
20488: IFTRUE 20492
20490: GO 20503
20492: POP
// bc_type := b_workshop ; 15 :
20493: LD_ADDR_OWVAR 42
20497: PUSH
20498: LD_INT 2
20500: ST_TO_ADDR
20501: GO 20901
20503: LD_INT 15
20505: DOUBLE
20506: EQUAL
20507: IFTRUE 20511
20509: GO 20522
20511: POP
// bc_type := b_factory ; 16 :
20512: LD_ADDR_OWVAR 42
20516: PUSH
20517: LD_INT 3
20519: ST_TO_ADDR
20520: GO 20901
20522: LD_INT 16
20524: DOUBLE
20525: EQUAL
20526: IFTRUE 20530
20528: GO 20541
20530: POP
// bc_type := b_ext_gun ; 17 :
20531: LD_ADDR_OWVAR 42
20535: PUSH
20536: LD_INT 17
20538: ST_TO_ADDR
20539: GO 20901
20541: LD_INT 17
20543: DOUBLE
20544: EQUAL
20545: IFTRUE 20549
20547: GO 20577
20549: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20550: LD_ADDR_OWVAR 42
20554: PUSH
20555: LD_INT 19
20557: PUSH
20558: LD_INT 23
20560: PUSH
20561: LD_INT 19
20563: PUSH
20564: EMPTY
20565: LIST
20566: LIST
20567: LIST
20568: PUSH
20569: LD_VAR 0 1
20573: ARRAY
20574: ST_TO_ADDR
20575: GO 20901
20577: LD_INT 18
20579: DOUBLE
20580: EQUAL
20581: IFTRUE 20585
20583: GO 20596
20585: POP
// bc_type := b_ext_radar ; 19 :
20586: LD_ADDR_OWVAR 42
20590: PUSH
20591: LD_INT 20
20593: ST_TO_ADDR
20594: GO 20901
20596: LD_INT 19
20598: DOUBLE
20599: EQUAL
20600: IFTRUE 20604
20602: GO 20615
20604: POP
// bc_type := b_ext_radio ; 20 :
20605: LD_ADDR_OWVAR 42
20609: PUSH
20610: LD_INT 22
20612: ST_TO_ADDR
20613: GO 20901
20615: LD_INT 20
20617: DOUBLE
20618: EQUAL
20619: IFTRUE 20623
20621: GO 20634
20623: POP
// bc_type := b_ext_siberium ; 21 :
20624: LD_ADDR_OWVAR 42
20628: PUSH
20629: LD_INT 21
20631: ST_TO_ADDR
20632: GO 20901
20634: LD_INT 21
20636: DOUBLE
20637: EQUAL
20638: IFTRUE 20642
20640: GO 20653
20642: POP
// bc_type := b_ext_computer ; 22 :
20643: LD_ADDR_OWVAR 42
20647: PUSH
20648: LD_INT 24
20650: ST_TO_ADDR
20651: GO 20901
20653: LD_INT 22
20655: DOUBLE
20656: EQUAL
20657: IFTRUE 20661
20659: GO 20672
20661: POP
// bc_type := b_ext_track ; 23 :
20662: LD_ADDR_OWVAR 42
20666: PUSH
20667: LD_INT 16
20669: ST_TO_ADDR
20670: GO 20901
20672: LD_INT 23
20674: DOUBLE
20675: EQUAL
20676: IFTRUE 20680
20678: GO 20691
20680: POP
// bc_type := b_ext_laser ; 24 :
20681: LD_ADDR_OWVAR 42
20685: PUSH
20686: LD_INT 25
20688: ST_TO_ADDR
20689: GO 20901
20691: LD_INT 24
20693: DOUBLE
20694: EQUAL
20695: IFTRUE 20699
20697: GO 20710
20699: POP
// bc_type := b_control_tower ; 25 :
20700: LD_ADDR_OWVAR 42
20704: PUSH
20705: LD_INT 36
20707: ST_TO_ADDR
20708: GO 20901
20710: LD_INT 25
20712: DOUBLE
20713: EQUAL
20714: IFTRUE 20718
20716: GO 20729
20718: POP
// bc_type := b_breastwork ; 26 :
20719: LD_ADDR_OWVAR 42
20723: PUSH
20724: LD_INT 31
20726: ST_TO_ADDR
20727: GO 20901
20729: LD_INT 26
20731: DOUBLE
20732: EQUAL
20733: IFTRUE 20737
20735: GO 20748
20737: POP
// bc_type := b_bunker ; 27 :
20738: LD_ADDR_OWVAR 42
20742: PUSH
20743: LD_INT 32
20745: ST_TO_ADDR
20746: GO 20901
20748: LD_INT 27
20750: DOUBLE
20751: EQUAL
20752: IFTRUE 20756
20754: GO 20767
20756: POP
// bc_type := b_turret ; 28 :
20757: LD_ADDR_OWVAR 42
20761: PUSH
20762: LD_INT 33
20764: ST_TO_ADDR
20765: GO 20901
20767: LD_INT 28
20769: DOUBLE
20770: EQUAL
20771: IFTRUE 20775
20773: GO 20786
20775: POP
// bc_type := b_armoury ; 29 :
20776: LD_ADDR_OWVAR 42
20780: PUSH
20781: LD_INT 4
20783: ST_TO_ADDR
20784: GO 20901
20786: LD_INT 29
20788: DOUBLE
20789: EQUAL
20790: IFTRUE 20794
20792: GO 20805
20794: POP
// bc_type := b_barracks ; 30 :
20795: LD_ADDR_OWVAR 42
20799: PUSH
20800: LD_INT 5
20802: ST_TO_ADDR
20803: GO 20901
20805: LD_INT 30
20807: DOUBLE
20808: EQUAL
20809: IFTRUE 20813
20811: GO 20824
20813: POP
// bc_type := b_solar_power ; 31 :
20814: LD_ADDR_OWVAR 42
20818: PUSH
20819: LD_INT 27
20821: ST_TO_ADDR
20822: GO 20901
20824: LD_INT 31
20826: DOUBLE
20827: EQUAL
20828: IFTRUE 20832
20830: GO 20843
20832: POP
// bc_type := b_oil_power ; 32 :
20833: LD_ADDR_OWVAR 42
20837: PUSH
20838: LD_INT 26
20840: ST_TO_ADDR
20841: GO 20901
20843: LD_INT 32
20845: DOUBLE
20846: EQUAL
20847: IFTRUE 20851
20849: GO 20862
20851: POP
// bc_type := b_siberite_power ; 33 :
20852: LD_ADDR_OWVAR 42
20856: PUSH
20857: LD_INT 28
20859: ST_TO_ADDR
20860: GO 20901
20862: LD_INT 33
20864: DOUBLE
20865: EQUAL
20866: IFTRUE 20870
20868: GO 20881
20870: POP
// bc_type := b_oil_mine ; 34 :
20871: LD_ADDR_OWVAR 42
20875: PUSH
20876: LD_INT 29
20878: ST_TO_ADDR
20879: GO 20901
20881: LD_INT 34
20883: DOUBLE
20884: EQUAL
20885: IFTRUE 20889
20887: GO 20900
20889: POP
// bc_type := b_siberite_mine ; end ;
20890: LD_ADDR_OWVAR 42
20894: PUSH
20895: LD_INT 30
20897: ST_TO_ADDR
20898: GO 20901
20900: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20901: LD_ADDR_VAR 0 8
20905: PUSH
20906: LD_VAR 0 5
20910: PPUSH
20911: LD_VAR 0 6
20915: PPUSH
20916: LD_VAR 0 3
20920: PPUSH
20921: CALL_OW 47
20925: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20926: LD_OWVAR 42
20930: PUSH
20931: LD_INT 32
20933: PUSH
20934: LD_INT 33
20936: PUSH
20937: EMPTY
20938: LIST
20939: LIST
20940: IN
20941: IFFALSE 20957
// PlaceWeaponTurret ( b , weapon ) ;
20943: LD_VAR 0 8
20947: PPUSH
20948: LD_VAR 0 4
20952: PPUSH
20953: CALL_OW 431
// end ;
20957: LD_VAR 0 7
20961: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20962: LD_INT 0
20964: PPUSH
20965: PPUSH
20966: PPUSH
20967: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20968: LD_ADDR_VAR 0 4
20972: PUSH
20973: LD_INT 22
20975: PUSH
20976: LD_OWVAR 2
20980: PUSH
20981: EMPTY
20982: LIST
20983: LIST
20984: PUSH
20985: LD_INT 2
20987: PUSH
20988: LD_INT 30
20990: PUSH
20991: LD_INT 0
20993: PUSH
20994: EMPTY
20995: LIST
20996: LIST
20997: PUSH
20998: LD_INT 30
21000: PUSH
21001: LD_INT 1
21003: PUSH
21004: EMPTY
21005: LIST
21006: LIST
21007: PUSH
21008: EMPTY
21009: LIST
21010: LIST
21011: LIST
21012: PUSH
21013: EMPTY
21014: LIST
21015: LIST
21016: PPUSH
21017: CALL_OW 69
21021: ST_TO_ADDR
// if not tmp then
21022: LD_VAR 0 4
21026: NOT
21027: IFFALSE 21031
// exit ;
21029: GO 21090
// for i in tmp do
21031: LD_ADDR_VAR 0 2
21035: PUSH
21036: LD_VAR 0 4
21040: PUSH
21041: FOR_IN
21042: IFFALSE 21088
// for j = 1 to 3 do
21044: LD_ADDR_VAR 0 3
21048: PUSH
21049: DOUBLE
21050: LD_INT 1
21052: DEC
21053: ST_TO_ADDR
21054: LD_INT 3
21056: PUSH
21057: FOR_TO
21058: IFFALSE 21084
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
21060: LD_VAR 0 2
21064: PPUSH
21065: CALL_OW 274
21069: PPUSH
21070: LD_VAR 0 3
21074: PPUSH
21075: LD_INT 99999
21077: PPUSH
21078: CALL_OW 277
21082: GO 21057
21084: POP
21085: POP
21086: GO 21041
21088: POP
21089: POP
// end ;
21090: LD_VAR 0 1
21094: RET
// export function hHackSetLevel10 ; var i , j ; begin
21095: LD_INT 0
21097: PPUSH
21098: PPUSH
21099: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21100: LD_ADDR_VAR 0 2
21104: PUSH
21105: LD_INT 21
21107: PUSH
21108: LD_INT 1
21110: PUSH
21111: EMPTY
21112: LIST
21113: LIST
21114: PPUSH
21115: CALL_OW 69
21119: PUSH
21120: FOR_IN
21121: IFFALSE 21173
// if IsSelected ( i ) then
21123: LD_VAR 0 2
21127: PPUSH
21128: CALL_OW 306
21132: IFFALSE 21171
// begin for j := 1 to 4 do
21134: LD_ADDR_VAR 0 3
21138: PUSH
21139: DOUBLE
21140: LD_INT 1
21142: DEC
21143: ST_TO_ADDR
21144: LD_INT 4
21146: PUSH
21147: FOR_TO
21148: IFFALSE 21169
// SetSkill ( i , j , 10 ) ;
21150: LD_VAR 0 2
21154: PPUSH
21155: LD_VAR 0 3
21159: PPUSH
21160: LD_INT 10
21162: PPUSH
21163: CALL_OW 237
21167: GO 21147
21169: POP
21170: POP
// end ;
21171: GO 21120
21173: POP
21174: POP
// end ;
21175: LD_VAR 0 1
21179: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
21180: LD_INT 0
21182: PPUSH
21183: PPUSH
21184: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21185: LD_ADDR_VAR 0 2
21189: PUSH
21190: LD_INT 22
21192: PUSH
21193: LD_OWVAR 2
21197: PUSH
21198: EMPTY
21199: LIST
21200: LIST
21201: PUSH
21202: LD_INT 21
21204: PUSH
21205: LD_INT 1
21207: PUSH
21208: EMPTY
21209: LIST
21210: LIST
21211: PUSH
21212: EMPTY
21213: LIST
21214: LIST
21215: PPUSH
21216: CALL_OW 69
21220: PUSH
21221: FOR_IN
21222: IFFALSE 21263
// begin for j := 1 to 4 do
21224: LD_ADDR_VAR 0 3
21228: PUSH
21229: DOUBLE
21230: LD_INT 1
21232: DEC
21233: ST_TO_ADDR
21234: LD_INT 4
21236: PUSH
21237: FOR_TO
21238: IFFALSE 21259
// SetSkill ( i , j , 10 ) ;
21240: LD_VAR 0 2
21244: PPUSH
21245: LD_VAR 0 3
21249: PPUSH
21250: LD_INT 10
21252: PPUSH
21253: CALL_OW 237
21257: GO 21237
21259: POP
21260: POP
// end ;
21261: GO 21221
21263: POP
21264: POP
// end ;
21265: LD_VAR 0 1
21269: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
21270: LD_INT 0
21272: PPUSH
// uc_side := your_side ;
21273: LD_ADDR_OWVAR 20
21277: PUSH
21278: LD_OWVAR 2
21282: ST_TO_ADDR
// uc_nation := nation ;
21283: LD_ADDR_OWVAR 21
21287: PUSH
21288: LD_VAR 0 1
21292: ST_TO_ADDR
// InitHc ;
21293: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21297: LD_INT 0
21299: PPUSH
21300: LD_VAR 0 2
21304: PPUSH
21305: LD_VAR 0 3
21309: PPUSH
21310: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
21314: LD_VAR 0 4
21318: PPUSH
21319: LD_VAR 0 5
21323: PPUSH
21324: CALL_OW 428
21328: PUSH
21329: LD_INT 0
21331: EQUAL
21332: IFFALSE 21356
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
21334: CALL_OW 44
21338: PPUSH
21339: LD_VAR 0 4
21343: PPUSH
21344: LD_VAR 0 5
21348: PPUSH
21349: LD_INT 1
21351: PPUSH
21352: CALL_OW 48
// end ;
21356: LD_VAR 0 6
21360: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
21361: LD_INT 0
21363: PPUSH
21364: PPUSH
// uc_side := your_side ;
21365: LD_ADDR_OWVAR 20
21369: PUSH
21370: LD_OWVAR 2
21374: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
21375: LD_VAR 0 1
21379: PUSH
21380: LD_INT 1
21382: PUSH
21383: LD_INT 2
21385: PUSH
21386: LD_INT 3
21388: PUSH
21389: LD_INT 4
21391: PUSH
21392: LD_INT 5
21394: PUSH
21395: EMPTY
21396: LIST
21397: LIST
21398: LIST
21399: LIST
21400: LIST
21401: IN
21402: IFFALSE 21414
// uc_nation := nation_american else
21404: LD_ADDR_OWVAR 21
21408: PUSH
21409: LD_INT 1
21411: ST_TO_ADDR
21412: GO 21457
// if chassis in [ 11 , 12 , 13 , 14 ] then
21414: LD_VAR 0 1
21418: PUSH
21419: LD_INT 11
21421: PUSH
21422: LD_INT 12
21424: PUSH
21425: LD_INT 13
21427: PUSH
21428: LD_INT 14
21430: PUSH
21431: EMPTY
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: IN
21437: IFFALSE 21449
// uc_nation := nation_arabian else
21439: LD_ADDR_OWVAR 21
21443: PUSH
21444: LD_INT 2
21446: ST_TO_ADDR
21447: GO 21457
// uc_nation := nation_russian ;
21449: LD_ADDR_OWVAR 21
21453: PUSH
21454: LD_INT 3
21456: ST_TO_ADDR
// vc_chassis := chassis ;
21457: LD_ADDR_OWVAR 37
21461: PUSH
21462: LD_VAR 0 1
21466: ST_TO_ADDR
// vc_engine := engine ;
21467: LD_ADDR_OWVAR 39
21471: PUSH
21472: LD_VAR 0 2
21476: ST_TO_ADDR
// vc_control := control ;
21477: LD_ADDR_OWVAR 38
21481: PUSH
21482: LD_VAR 0 3
21486: ST_TO_ADDR
// vc_weapon := weapon ;
21487: LD_ADDR_OWVAR 40
21491: PUSH
21492: LD_VAR 0 4
21496: ST_TO_ADDR
// un := CreateVehicle ;
21497: LD_ADDR_VAR 0 8
21501: PUSH
21502: CALL_OW 45
21506: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21507: LD_VAR 0 8
21511: PPUSH
21512: LD_INT 0
21514: PPUSH
21515: LD_INT 5
21517: PPUSH
21518: CALL_OW 12
21522: PPUSH
21523: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21527: LD_VAR 0 8
21531: PPUSH
21532: LD_VAR 0 5
21536: PPUSH
21537: LD_VAR 0 6
21541: PPUSH
21542: LD_INT 1
21544: PPUSH
21545: CALL_OW 48
// end ;
21549: LD_VAR 0 7
21553: RET
// export hInvincible ; every 1 do
21554: GO 21556
21556: DISABLE
// hInvincible := [ ] ;
21557: LD_ADDR_EXP 79
21561: PUSH
21562: EMPTY
21563: ST_TO_ADDR
21564: END
// every 10 do var i ;
21565: GO 21567
21567: DISABLE
21568: LD_INT 0
21570: PPUSH
// begin enable ;
21571: ENABLE
// if not hInvincible then
21572: LD_EXP 79
21576: NOT
21577: IFFALSE 21581
// exit ;
21579: GO 21625
// for i in hInvincible do
21581: LD_ADDR_VAR 0 1
21585: PUSH
21586: LD_EXP 79
21590: PUSH
21591: FOR_IN
21592: IFFALSE 21623
// if GetLives ( i ) < 1000 then
21594: LD_VAR 0 1
21598: PPUSH
21599: CALL_OW 256
21603: PUSH
21604: LD_INT 1000
21606: LESS
21607: IFFALSE 21621
// SetLives ( i , 1000 ) ;
21609: LD_VAR 0 1
21613: PPUSH
21614: LD_INT 1000
21616: PPUSH
21617: CALL_OW 234
21621: GO 21591
21623: POP
21624: POP
// end ;
21625: PPOPN 1
21627: END
// export function hHackInvincible ; var i ; begin
21628: LD_INT 0
21630: PPUSH
21631: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21632: LD_ADDR_VAR 0 2
21636: PUSH
21637: LD_INT 2
21639: PUSH
21640: LD_INT 21
21642: PUSH
21643: LD_INT 1
21645: PUSH
21646: EMPTY
21647: LIST
21648: LIST
21649: PUSH
21650: LD_INT 21
21652: PUSH
21653: LD_INT 2
21655: PUSH
21656: EMPTY
21657: LIST
21658: LIST
21659: PUSH
21660: EMPTY
21661: LIST
21662: LIST
21663: LIST
21664: PPUSH
21665: CALL_OW 69
21669: PUSH
21670: FOR_IN
21671: IFFALSE 21732
// if IsSelected ( i ) then
21673: LD_VAR 0 2
21677: PPUSH
21678: CALL_OW 306
21682: IFFALSE 21730
// begin if i in hInvincible then
21684: LD_VAR 0 2
21688: PUSH
21689: LD_EXP 79
21693: IN
21694: IFFALSE 21714
// hInvincible := hInvincible diff i else
21696: LD_ADDR_EXP 79
21700: PUSH
21701: LD_EXP 79
21705: PUSH
21706: LD_VAR 0 2
21710: DIFF
21711: ST_TO_ADDR
21712: GO 21730
// hInvincible := hInvincible union i ;
21714: LD_ADDR_EXP 79
21718: PUSH
21719: LD_EXP 79
21723: PUSH
21724: LD_VAR 0 2
21728: UNION
21729: ST_TO_ADDR
// end ;
21730: GO 21670
21732: POP
21733: POP
// end ;
21734: LD_VAR 0 1
21738: RET
// export function hHackInvisible ; var i , j ; begin
21739: LD_INT 0
21741: PPUSH
21742: PPUSH
21743: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21744: LD_ADDR_VAR 0 2
21748: PUSH
21749: LD_INT 21
21751: PUSH
21752: LD_INT 1
21754: PUSH
21755: EMPTY
21756: LIST
21757: LIST
21758: PPUSH
21759: CALL_OW 69
21763: PUSH
21764: FOR_IN
21765: IFFALSE 21789
// if IsSelected ( i ) then
21767: LD_VAR 0 2
21771: PPUSH
21772: CALL_OW 306
21776: IFFALSE 21787
// ComForceInvisible ( i ) ;
21778: LD_VAR 0 2
21782: PPUSH
21783: CALL_OW 496
21787: GO 21764
21789: POP
21790: POP
// end ;
21791: LD_VAR 0 1
21795: RET
// export function hHackChangeYourSide ; begin
21796: LD_INT 0
21798: PPUSH
// if your_side = 8 then
21799: LD_OWVAR 2
21803: PUSH
21804: LD_INT 8
21806: EQUAL
21807: IFFALSE 21819
// your_side := 0 else
21809: LD_ADDR_OWVAR 2
21813: PUSH
21814: LD_INT 0
21816: ST_TO_ADDR
21817: GO 21833
// your_side := your_side + 1 ;
21819: LD_ADDR_OWVAR 2
21823: PUSH
21824: LD_OWVAR 2
21828: PUSH
21829: LD_INT 1
21831: PLUS
21832: ST_TO_ADDR
// end ;
21833: LD_VAR 0 1
21837: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21838: LD_INT 0
21840: PPUSH
21841: PPUSH
21842: PPUSH
// for i in all_units do
21843: LD_ADDR_VAR 0 2
21847: PUSH
21848: LD_OWVAR 3
21852: PUSH
21853: FOR_IN
21854: IFFALSE 21932
// if IsSelected ( i ) then
21856: LD_VAR 0 2
21860: PPUSH
21861: CALL_OW 306
21865: IFFALSE 21930
// begin j := GetSide ( i ) ;
21867: LD_ADDR_VAR 0 3
21871: PUSH
21872: LD_VAR 0 2
21876: PPUSH
21877: CALL_OW 255
21881: ST_TO_ADDR
// if j = 8 then
21882: LD_VAR 0 3
21886: PUSH
21887: LD_INT 8
21889: EQUAL
21890: IFFALSE 21902
// j := 0 else
21892: LD_ADDR_VAR 0 3
21896: PUSH
21897: LD_INT 0
21899: ST_TO_ADDR
21900: GO 21916
// j := j + 1 ;
21902: LD_ADDR_VAR 0 3
21906: PUSH
21907: LD_VAR 0 3
21911: PUSH
21912: LD_INT 1
21914: PLUS
21915: ST_TO_ADDR
// SetSide ( i , j ) ;
21916: LD_VAR 0 2
21920: PPUSH
21921: LD_VAR 0 3
21925: PPUSH
21926: CALL_OW 235
// end ;
21930: GO 21853
21932: POP
21933: POP
// end ;
21934: LD_VAR 0 1
21938: RET
// export function hHackFog ; begin
21939: LD_INT 0
21941: PPUSH
// FogOff ( true ) ;
21942: LD_INT 1
21944: PPUSH
21945: CALL_OW 344
// end ;
21949: LD_VAR 0 1
21953: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21954: LD_INT 0
21956: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21957: LD_VAR 0 1
21961: PPUSH
21962: LD_VAR 0 2
21966: PPUSH
21967: LD_VAR 0 3
21971: PPUSH
21972: LD_INT 1
21974: PPUSH
21975: LD_INT 1
21977: PPUSH
21978: CALL_OW 483
// CenterOnXY ( x , y ) ;
21982: LD_VAR 0 2
21986: PPUSH
21987: LD_VAR 0 3
21991: PPUSH
21992: CALL_OW 84
// end ;
21996: LD_VAR 0 4
22000: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
22001: LD_INT 0
22003: PPUSH
22004: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
22005: LD_VAR 0 1
22009: NOT
22010: PUSH
22011: LD_VAR 0 2
22015: PPUSH
22016: LD_VAR 0 3
22020: PPUSH
22021: CALL_OW 488
22025: NOT
22026: OR
22027: PUSH
22028: LD_VAR 0 1
22032: PPUSH
22033: CALL_OW 266
22037: PUSH
22038: LD_INT 3
22040: NONEQUAL
22041: PUSH
22042: LD_VAR 0 1
22046: PPUSH
22047: CALL_OW 247
22051: PUSH
22052: LD_INT 1
22054: EQUAL
22055: NOT
22056: AND
22057: OR
22058: IFFALSE 22062
// exit ;
22060: GO 22211
// if GetType ( factory ) = unit_human then
22062: LD_VAR 0 1
22066: PPUSH
22067: CALL_OW 247
22071: PUSH
22072: LD_INT 1
22074: EQUAL
22075: IFFALSE 22092
// factory := IsInUnit ( factory ) ;
22077: LD_ADDR_VAR 0 1
22081: PUSH
22082: LD_VAR 0 1
22086: PPUSH
22087: CALL_OW 310
22091: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
22092: LD_VAR 0 1
22096: PPUSH
22097: CALL_OW 266
22101: PUSH
22102: LD_INT 3
22104: NONEQUAL
22105: IFFALSE 22109
// exit ;
22107: GO 22211
// if HexInfo ( x , y ) = factory then
22109: LD_VAR 0 2
22113: PPUSH
22114: LD_VAR 0 3
22118: PPUSH
22119: CALL_OW 428
22123: PUSH
22124: LD_VAR 0 1
22128: EQUAL
22129: IFFALSE 22156
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
22131: LD_ADDR_EXP 80
22135: PUSH
22136: LD_EXP 80
22140: PPUSH
22141: LD_VAR 0 1
22145: PPUSH
22146: LD_INT 0
22148: PPUSH
22149: CALL_OW 1
22153: ST_TO_ADDR
22154: GO 22207
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
22156: LD_ADDR_EXP 80
22160: PUSH
22161: LD_EXP 80
22165: PPUSH
22166: LD_VAR 0 1
22170: PPUSH
22171: LD_VAR 0 1
22175: PPUSH
22176: CALL_OW 255
22180: PUSH
22181: LD_VAR 0 1
22185: PUSH
22186: LD_VAR 0 2
22190: PUSH
22191: LD_VAR 0 3
22195: PUSH
22196: EMPTY
22197: LIST
22198: LIST
22199: LIST
22200: LIST
22201: PPUSH
22202: CALL_OW 1
22206: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22207: CALL 22216 0 0
// end ;
22211: LD_VAR 0 4
22215: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
22216: LD_INT 0
22218: PPUSH
22219: PPUSH
22220: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
22221: LD_STRING resetFactoryWaypoint();
22223: PPUSH
22224: CALL_OW 559
// if factoryWaypoints then
22228: LD_EXP 80
22232: IFFALSE 22358
// begin list := PrepareArray ( factoryWaypoints ) ;
22234: LD_ADDR_VAR 0 3
22238: PUSH
22239: LD_EXP 80
22243: PPUSH
22244: CALL 64446 0 1
22248: ST_TO_ADDR
// for i := 1 to list do
22249: LD_ADDR_VAR 0 2
22253: PUSH
22254: DOUBLE
22255: LD_INT 1
22257: DEC
22258: ST_TO_ADDR
22259: LD_VAR 0 3
22263: PUSH
22264: FOR_TO
22265: IFFALSE 22356
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22267: LD_STRING setFactoryWaypointXY(
22269: PUSH
22270: LD_VAR 0 3
22274: PUSH
22275: LD_VAR 0 2
22279: ARRAY
22280: PUSH
22281: LD_INT 1
22283: ARRAY
22284: STR
22285: PUSH
22286: LD_STRING ,
22288: STR
22289: PUSH
22290: LD_VAR 0 3
22294: PUSH
22295: LD_VAR 0 2
22299: ARRAY
22300: PUSH
22301: LD_INT 2
22303: ARRAY
22304: STR
22305: PUSH
22306: LD_STRING ,
22308: STR
22309: PUSH
22310: LD_VAR 0 3
22314: PUSH
22315: LD_VAR 0 2
22319: ARRAY
22320: PUSH
22321: LD_INT 3
22323: ARRAY
22324: STR
22325: PUSH
22326: LD_STRING ,
22328: STR
22329: PUSH
22330: LD_VAR 0 3
22334: PUSH
22335: LD_VAR 0 2
22339: ARRAY
22340: PUSH
22341: LD_INT 4
22343: ARRAY
22344: STR
22345: PUSH
22346: LD_STRING )
22348: STR
22349: PPUSH
22350: CALL_OW 559
22354: GO 22264
22356: POP
22357: POP
// end ; end ;
22358: LD_VAR 0 1
22362: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
22363: LD_INT 0
22365: PPUSH
// if HexInfo ( x , y ) = warehouse then
22366: LD_VAR 0 2
22370: PPUSH
22371: LD_VAR 0 3
22375: PPUSH
22376: CALL_OW 428
22380: PUSH
22381: LD_VAR 0 1
22385: EQUAL
22386: IFFALSE 22413
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
22388: LD_ADDR_EXP 81
22392: PUSH
22393: LD_EXP 81
22397: PPUSH
22398: LD_VAR 0 1
22402: PPUSH
22403: LD_INT 0
22405: PPUSH
22406: CALL_OW 1
22410: ST_TO_ADDR
22411: GO 22464
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
22413: LD_ADDR_EXP 81
22417: PUSH
22418: LD_EXP 81
22422: PPUSH
22423: LD_VAR 0 1
22427: PPUSH
22428: LD_VAR 0 1
22432: PPUSH
22433: CALL_OW 255
22437: PUSH
22438: LD_VAR 0 1
22442: PUSH
22443: LD_VAR 0 2
22447: PUSH
22448: LD_VAR 0 3
22452: PUSH
22453: EMPTY
22454: LIST
22455: LIST
22456: LIST
22457: LIST
22458: PPUSH
22459: CALL_OW 1
22463: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
22464: CALL 22473 0 0
// end ;
22468: LD_VAR 0 4
22472: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
22473: LD_INT 0
22475: PPUSH
22476: PPUSH
22477: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
22478: LD_STRING resetWarehouseGatheringPoints();
22480: PPUSH
22481: CALL_OW 559
// if warehouseGatheringPoints then
22485: LD_EXP 81
22489: IFFALSE 22615
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
22491: LD_ADDR_VAR 0 3
22495: PUSH
22496: LD_EXP 81
22500: PPUSH
22501: CALL 64446 0 1
22505: ST_TO_ADDR
// for i := 1 to list do
22506: LD_ADDR_VAR 0 2
22510: PUSH
22511: DOUBLE
22512: LD_INT 1
22514: DEC
22515: ST_TO_ADDR
22516: LD_VAR 0 3
22520: PUSH
22521: FOR_TO
22522: IFFALSE 22613
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22524: LD_STRING setWarehouseGatheringPointXY(
22526: PUSH
22527: LD_VAR 0 3
22531: PUSH
22532: LD_VAR 0 2
22536: ARRAY
22537: PUSH
22538: LD_INT 1
22540: ARRAY
22541: STR
22542: PUSH
22543: LD_STRING ,
22545: STR
22546: PUSH
22547: LD_VAR 0 3
22551: PUSH
22552: LD_VAR 0 2
22556: ARRAY
22557: PUSH
22558: LD_INT 2
22560: ARRAY
22561: STR
22562: PUSH
22563: LD_STRING ,
22565: STR
22566: PUSH
22567: LD_VAR 0 3
22571: PUSH
22572: LD_VAR 0 2
22576: ARRAY
22577: PUSH
22578: LD_INT 3
22580: ARRAY
22581: STR
22582: PUSH
22583: LD_STRING ,
22585: STR
22586: PUSH
22587: LD_VAR 0 3
22591: PUSH
22592: LD_VAR 0 2
22596: ARRAY
22597: PUSH
22598: LD_INT 4
22600: ARRAY
22601: STR
22602: PUSH
22603: LD_STRING )
22605: STR
22606: PPUSH
22607: CALL_OW 559
22611: GO 22521
22613: POP
22614: POP
// end ; end ;
22615: LD_VAR 0 1
22619: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
22620: LD_EXP 81
22624: IFFALSE 23309
22626: GO 22628
22628: DISABLE
22629: LD_INT 0
22631: PPUSH
22632: PPUSH
22633: PPUSH
22634: PPUSH
22635: PPUSH
22636: PPUSH
22637: PPUSH
22638: PPUSH
22639: PPUSH
// begin enable ;
22640: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
22641: LD_ADDR_VAR 0 3
22645: PUSH
22646: LD_EXP 81
22650: PPUSH
22651: CALL 64446 0 1
22655: ST_TO_ADDR
// if not list then
22656: LD_VAR 0 3
22660: NOT
22661: IFFALSE 22665
// exit ;
22663: GO 23309
// for i := 1 to list do
22665: LD_ADDR_VAR 0 1
22669: PUSH
22670: DOUBLE
22671: LD_INT 1
22673: DEC
22674: ST_TO_ADDR
22675: LD_VAR 0 3
22679: PUSH
22680: FOR_TO
22681: IFFALSE 23307
// begin depot := list [ i ] [ 2 ] ;
22683: LD_ADDR_VAR 0 8
22687: PUSH
22688: LD_VAR 0 3
22692: PUSH
22693: LD_VAR 0 1
22697: ARRAY
22698: PUSH
22699: LD_INT 2
22701: ARRAY
22702: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
22703: LD_ADDR_VAR 0 5
22707: PUSH
22708: LD_VAR 0 3
22712: PUSH
22713: LD_VAR 0 1
22717: ARRAY
22718: PUSH
22719: LD_INT 1
22721: ARRAY
22722: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
22723: LD_VAR 0 8
22727: PPUSH
22728: CALL_OW 301
22732: PUSH
22733: LD_VAR 0 5
22737: PUSH
22738: LD_VAR 0 8
22742: PPUSH
22743: CALL_OW 255
22747: NONEQUAL
22748: OR
22749: IFFALSE 22778
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
22751: LD_ADDR_EXP 81
22755: PUSH
22756: LD_EXP 81
22760: PPUSH
22761: LD_VAR 0 8
22765: PPUSH
22766: LD_INT 0
22768: PPUSH
22769: CALL_OW 1
22773: ST_TO_ADDR
// exit ;
22774: POP
22775: POP
22776: GO 23309
// end ; x := list [ i ] [ 3 ] ;
22778: LD_ADDR_VAR 0 6
22782: PUSH
22783: LD_VAR 0 3
22787: PUSH
22788: LD_VAR 0 1
22792: ARRAY
22793: PUSH
22794: LD_INT 3
22796: ARRAY
22797: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
22798: LD_ADDR_VAR 0 7
22802: PUSH
22803: LD_VAR 0 3
22807: PUSH
22808: LD_VAR 0 1
22812: ARRAY
22813: PUSH
22814: LD_INT 4
22816: ARRAY
22817: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
22818: LD_ADDR_VAR 0 9
22822: PUSH
22823: LD_VAR 0 6
22827: PPUSH
22828: LD_VAR 0 7
22832: PPUSH
22833: LD_INT 16
22835: PPUSH
22836: CALL 63034 0 3
22840: ST_TO_ADDR
// if not cratesNearbyPoint then
22841: LD_VAR 0 9
22845: NOT
22846: IFFALSE 22852
// exit ;
22848: POP
22849: POP
22850: GO 23309
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
22852: LD_ADDR_VAR 0 4
22856: PUSH
22857: LD_INT 22
22859: PUSH
22860: LD_VAR 0 5
22864: PUSH
22865: EMPTY
22866: LIST
22867: LIST
22868: PUSH
22869: LD_INT 3
22871: PUSH
22872: LD_INT 60
22874: PUSH
22875: EMPTY
22876: LIST
22877: PUSH
22878: EMPTY
22879: LIST
22880: LIST
22881: PUSH
22882: LD_INT 91
22884: PUSH
22885: LD_VAR 0 8
22889: PUSH
22890: LD_INT 6
22892: PUSH
22893: EMPTY
22894: LIST
22895: LIST
22896: LIST
22897: PUSH
22898: LD_INT 2
22900: PUSH
22901: LD_INT 25
22903: PUSH
22904: LD_INT 2
22906: PUSH
22907: EMPTY
22908: LIST
22909: LIST
22910: PUSH
22911: LD_INT 25
22913: PUSH
22914: LD_INT 16
22916: PUSH
22917: EMPTY
22918: LIST
22919: LIST
22920: PUSH
22921: EMPTY
22922: LIST
22923: LIST
22924: LIST
22925: PUSH
22926: EMPTY
22927: LIST
22928: LIST
22929: LIST
22930: LIST
22931: PPUSH
22932: CALL_OW 69
22936: PUSH
22937: LD_VAR 0 8
22941: PPUSH
22942: CALL_OW 313
22946: PPUSH
22947: LD_INT 3
22949: PUSH
22950: LD_INT 60
22952: PUSH
22953: EMPTY
22954: LIST
22955: PUSH
22956: EMPTY
22957: LIST
22958: LIST
22959: PUSH
22960: LD_INT 2
22962: PUSH
22963: LD_INT 25
22965: PUSH
22966: LD_INT 2
22968: PUSH
22969: EMPTY
22970: LIST
22971: LIST
22972: PUSH
22973: LD_INT 25
22975: PUSH
22976: LD_INT 16
22978: PUSH
22979: EMPTY
22980: LIST
22981: LIST
22982: PUSH
22983: EMPTY
22984: LIST
22985: LIST
22986: LIST
22987: PUSH
22988: EMPTY
22989: LIST
22990: LIST
22991: PPUSH
22992: CALL_OW 72
22996: UNION
22997: ST_TO_ADDR
// if tmp then
22998: LD_VAR 0 4
23002: IFFALSE 23082
// begin tmp := ShrinkArray ( tmp , 3 ) ;
23004: LD_ADDR_VAR 0 4
23008: PUSH
23009: LD_VAR 0 4
23013: PPUSH
23014: LD_INT 3
23016: PPUSH
23017: CALL 61003 0 2
23021: ST_TO_ADDR
// for j in tmp do
23022: LD_ADDR_VAR 0 2
23026: PUSH
23027: LD_VAR 0 4
23031: PUSH
23032: FOR_IN
23033: IFFALSE 23076
// begin if IsInUnit ( j ) then
23035: LD_VAR 0 2
23039: PPUSH
23040: CALL_OW 310
23044: IFFALSE 23055
// ComExit ( j ) ;
23046: LD_VAR 0 2
23050: PPUSH
23051: CALL 61086 0 1
// AddComCollect ( j , x , y ) ;
23055: LD_VAR 0 2
23059: PPUSH
23060: LD_VAR 0 6
23064: PPUSH
23065: LD_VAR 0 7
23069: PPUSH
23070: CALL_OW 177
// end ;
23074: GO 23032
23076: POP
23077: POP
// exit ;
23078: POP
23079: POP
23080: GO 23309
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
23082: LD_ADDR_VAR 0 4
23086: PUSH
23087: LD_INT 22
23089: PUSH
23090: LD_VAR 0 5
23094: PUSH
23095: EMPTY
23096: LIST
23097: LIST
23098: PUSH
23099: LD_INT 91
23101: PUSH
23102: LD_VAR 0 8
23106: PUSH
23107: LD_INT 8
23109: PUSH
23110: EMPTY
23111: LIST
23112: LIST
23113: LIST
23114: PUSH
23115: LD_INT 2
23117: PUSH
23118: LD_INT 34
23120: PUSH
23121: LD_INT 12
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: PUSH
23128: LD_INT 34
23130: PUSH
23131: LD_INT 51
23133: PUSH
23134: EMPTY
23135: LIST
23136: LIST
23137: PUSH
23138: LD_INT 34
23140: PUSH
23141: LD_INT 32
23143: PUSH
23144: EMPTY
23145: LIST
23146: LIST
23147: PUSH
23148: LD_INT 34
23150: PUSH
23151: LD_INT 89
23153: PUSH
23154: EMPTY
23155: LIST
23156: LIST
23157: PUSH
23158: EMPTY
23159: LIST
23160: LIST
23161: LIST
23162: LIST
23163: LIST
23164: PUSH
23165: EMPTY
23166: LIST
23167: LIST
23168: LIST
23169: PPUSH
23170: CALL_OW 69
23174: ST_TO_ADDR
// if tmp then
23175: LD_VAR 0 4
23179: IFFALSE 23305
// begin for j in tmp do
23181: LD_ADDR_VAR 0 2
23185: PUSH
23186: LD_VAR 0 4
23190: PUSH
23191: FOR_IN
23192: IFFALSE 23303
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
23194: LD_VAR 0 2
23198: PPUSH
23199: CALL_OW 262
23203: PUSH
23204: LD_INT 3
23206: EQUAL
23207: PUSH
23208: LD_VAR 0 2
23212: PPUSH
23213: CALL_OW 261
23217: PUSH
23218: LD_INT 20
23220: GREATER
23221: OR
23222: PUSH
23223: LD_VAR 0 2
23227: PPUSH
23228: CALL_OW 314
23232: NOT
23233: AND
23234: PUSH
23235: LD_VAR 0 2
23239: PPUSH
23240: CALL_OW 263
23244: PUSH
23245: LD_INT 1
23247: NONEQUAL
23248: PUSH
23249: LD_VAR 0 2
23253: PPUSH
23254: CALL_OW 311
23258: OR
23259: AND
23260: IFFALSE 23301
// begin ComCollect ( j , x , y ) ;
23262: LD_VAR 0 2
23266: PPUSH
23267: LD_VAR 0 6
23271: PPUSH
23272: LD_VAR 0 7
23276: PPUSH
23277: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
23281: LD_VAR 0 2
23285: PPUSH
23286: LD_VAR 0 8
23290: PPUSH
23291: CALL_OW 172
// exit ;
23295: POP
23296: POP
23297: POP
23298: POP
23299: GO 23309
// end ;
23301: GO 23191
23303: POP
23304: POP
// end ; end ;
23305: GO 22680
23307: POP
23308: POP
// end ; end_of_file end_of_file
23309: PPOPN 9
23311: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
23312: LD_INT 0
23314: PPUSH
23315: PPUSH
// if exist_mode then
23316: LD_VAR 0 2
23320: IFFALSE 23345
// unit := CreateCharacter ( prefix & ident ) else
23322: LD_ADDR_VAR 0 5
23326: PUSH
23327: LD_VAR 0 3
23331: PUSH
23332: LD_VAR 0 1
23336: STR
23337: PPUSH
23338: CALL_OW 34
23342: ST_TO_ADDR
23343: GO 23360
// unit := NewCharacter ( ident ) ;
23345: LD_ADDR_VAR 0 5
23349: PUSH
23350: LD_VAR 0 1
23354: PPUSH
23355: CALL_OW 25
23359: ST_TO_ADDR
// result := unit ;
23360: LD_ADDR_VAR 0 4
23364: PUSH
23365: LD_VAR 0 5
23369: ST_TO_ADDR
// end ;
23370: LD_VAR 0 4
23374: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
23375: LD_INT 0
23377: PPUSH
23378: PPUSH
// if not side or not nation then
23379: LD_VAR 0 1
23383: NOT
23384: PUSH
23385: LD_VAR 0 2
23389: NOT
23390: OR
23391: IFFALSE 23395
// exit ;
23393: GO 24163
// case nation of nation_american :
23395: LD_VAR 0 2
23399: PUSH
23400: LD_INT 1
23402: DOUBLE
23403: EQUAL
23404: IFTRUE 23408
23406: GO 23622
23408: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
23409: LD_ADDR_VAR 0 4
23413: PUSH
23414: LD_INT 35
23416: PUSH
23417: LD_INT 45
23419: PUSH
23420: LD_INT 46
23422: PUSH
23423: LD_INT 47
23425: PUSH
23426: LD_INT 82
23428: PUSH
23429: LD_INT 83
23431: PUSH
23432: LD_INT 84
23434: PUSH
23435: LD_INT 85
23437: PUSH
23438: LD_INT 86
23440: PUSH
23441: LD_INT 1
23443: PUSH
23444: LD_INT 2
23446: PUSH
23447: LD_INT 6
23449: PUSH
23450: LD_INT 15
23452: PUSH
23453: LD_INT 16
23455: PUSH
23456: LD_INT 7
23458: PUSH
23459: LD_INT 12
23461: PUSH
23462: LD_INT 13
23464: PUSH
23465: LD_INT 10
23467: PUSH
23468: LD_INT 14
23470: PUSH
23471: LD_INT 20
23473: PUSH
23474: LD_INT 21
23476: PUSH
23477: LD_INT 22
23479: PUSH
23480: LD_INT 25
23482: PUSH
23483: LD_INT 32
23485: PUSH
23486: LD_INT 27
23488: PUSH
23489: LD_INT 36
23491: PUSH
23492: LD_INT 69
23494: PUSH
23495: LD_INT 39
23497: PUSH
23498: LD_INT 34
23500: PUSH
23501: LD_INT 40
23503: PUSH
23504: LD_INT 48
23506: PUSH
23507: LD_INT 49
23509: PUSH
23510: LD_INT 50
23512: PUSH
23513: LD_INT 51
23515: PUSH
23516: LD_INT 52
23518: PUSH
23519: LD_INT 53
23521: PUSH
23522: LD_INT 54
23524: PUSH
23525: LD_INT 55
23527: PUSH
23528: LD_INT 56
23530: PUSH
23531: LD_INT 57
23533: PUSH
23534: LD_INT 58
23536: PUSH
23537: LD_INT 59
23539: PUSH
23540: LD_INT 60
23542: PUSH
23543: LD_INT 61
23545: PUSH
23546: LD_INT 62
23548: PUSH
23549: LD_INT 80
23551: PUSH
23552: LD_INT 82
23554: PUSH
23555: LD_INT 83
23557: PUSH
23558: LD_INT 84
23560: PUSH
23561: LD_INT 85
23563: PUSH
23564: LD_INT 86
23566: PUSH
23567: EMPTY
23568: LIST
23569: LIST
23570: LIST
23571: LIST
23572: LIST
23573: LIST
23574: LIST
23575: LIST
23576: LIST
23577: LIST
23578: LIST
23579: LIST
23580: LIST
23581: LIST
23582: LIST
23583: LIST
23584: LIST
23585: LIST
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: LIST
23596: LIST
23597: LIST
23598: LIST
23599: LIST
23600: LIST
23601: LIST
23602: LIST
23603: LIST
23604: LIST
23605: LIST
23606: LIST
23607: LIST
23608: LIST
23609: LIST
23610: LIST
23611: LIST
23612: LIST
23613: LIST
23614: LIST
23615: LIST
23616: LIST
23617: LIST
23618: LIST
23619: ST_TO_ADDR
23620: GO 24087
23622: LD_INT 2
23624: DOUBLE
23625: EQUAL
23626: IFTRUE 23630
23628: GO 23856
23630: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
23631: LD_ADDR_VAR 0 4
23635: PUSH
23636: LD_INT 35
23638: PUSH
23639: LD_INT 45
23641: PUSH
23642: LD_INT 46
23644: PUSH
23645: LD_INT 47
23647: PUSH
23648: LD_INT 82
23650: PUSH
23651: LD_INT 83
23653: PUSH
23654: LD_INT 84
23656: PUSH
23657: LD_INT 85
23659: PUSH
23660: LD_INT 87
23662: PUSH
23663: LD_INT 70
23665: PUSH
23666: LD_INT 1
23668: PUSH
23669: LD_INT 11
23671: PUSH
23672: LD_INT 3
23674: PUSH
23675: LD_INT 4
23677: PUSH
23678: LD_INT 5
23680: PUSH
23681: LD_INT 6
23683: PUSH
23684: LD_INT 15
23686: PUSH
23687: LD_INT 18
23689: PUSH
23690: LD_INT 7
23692: PUSH
23693: LD_INT 17
23695: PUSH
23696: LD_INT 8
23698: PUSH
23699: LD_INT 20
23701: PUSH
23702: LD_INT 21
23704: PUSH
23705: LD_INT 22
23707: PUSH
23708: LD_INT 72
23710: PUSH
23711: LD_INT 26
23713: PUSH
23714: LD_INT 69
23716: PUSH
23717: LD_INT 39
23719: PUSH
23720: LD_INT 40
23722: PUSH
23723: LD_INT 41
23725: PUSH
23726: LD_INT 42
23728: PUSH
23729: LD_INT 43
23731: PUSH
23732: LD_INT 48
23734: PUSH
23735: LD_INT 49
23737: PUSH
23738: LD_INT 50
23740: PUSH
23741: LD_INT 51
23743: PUSH
23744: LD_INT 52
23746: PUSH
23747: LD_INT 53
23749: PUSH
23750: LD_INT 54
23752: PUSH
23753: LD_INT 55
23755: PUSH
23756: LD_INT 56
23758: PUSH
23759: LD_INT 60
23761: PUSH
23762: LD_INT 61
23764: PUSH
23765: LD_INT 62
23767: PUSH
23768: LD_INT 66
23770: PUSH
23771: LD_INT 67
23773: PUSH
23774: LD_INT 68
23776: PUSH
23777: LD_INT 81
23779: PUSH
23780: LD_INT 82
23782: PUSH
23783: LD_INT 83
23785: PUSH
23786: LD_INT 84
23788: PUSH
23789: LD_INT 85
23791: PUSH
23792: LD_INT 87
23794: PUSH
23795: LD_INT 88
23797: PUSH
23798: EMPTY
23799: LIST
23800: LIST
23801: LIST
23802: LIST
23803: LIST
23804: LIST
23805: LIST
23806: LIST
23807: LIST
23808: LIST
23809: LIST
23810: LIST
23811: LIST
23812: LIST
23813: LIST
23814: LIST
23815: LIST
23816: LIST
23817: LIST
23818: LIST
23819: LIST
23820: LIST
23821: LIST
23822: LIST
23823: LIST
23824: LIST
23825: LIST
23826: LIST
23827: LIST
23828: LIST
23829: LIST
23830: LIST
23831: LIST
23832: LIST
23833: LIST
23834: LIST
23835: LIST
23836: LIST
23837: LIST
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: LIST
23849: LIST
23850: LIST
23851: LIST
23852: LIST
23853: ST_TO_ADDR
23854: GO 24087
23856: LD_INT 3
23858: DOUBLE
23859: EQUAL
23860: IFTRUE 23864
23862: GO 24086
23864: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
23865: LD_ADDR_VAR 0 4
23869: PUSH
23870: LD_INT 46
23872: PUSH
23873: LD_INT 47
23875: PUSH
23876: LD_INT 1
23878: PUSH
23879: LD_INT 2
23881: PUSH
23882: LD_INT 82
23884: PUSH
23885: LD_INT 83
23887: PUSH
23888: LD_INT 84
23890: PUSH
23891: LD_INT 85
23893: PUSH
23894: LD_INT 86
23896: PUSH
23897: LD_INT 11
23899: PUSH
23900: LD_INT 9
23902: PUSH
23903: LD_INT 20
23905: PUSH
23906: LD_INT 19
23908: PUSH
23909: LD_INT 21
23911: PUSH
23912: LD_INT 24
23914: PUSH
23915: LD_INT 22
23917: PUSH
23918: LD_INT 25
23920: PUSH
23921: LD_INT 28
23923: PUSH
23924: LD_INT 29
23926: PUSH
23927: LD_INT 30
23929: PUSH
23930: LD_INT 31
23932: PUSH
23933: LD_INT 37
23935: PUSH
23936: LD_INT 38
23938: PUSH
23939: LD_INT 32
23941: PUSH
23942: LD_INT 27
23944: PUSH
23945: LD_INT 33
23947: PUSH
23948: LD_INT 69
23950: PUSH
23951: LD_INT 39
23953: PUSH
23954: LD_INT 34
23956: PUSH
23957: LD_INT 40
23959: PUSH
23960: LD_INT 71
23962: PUSH
23963: LD_INT 23
23965: PUSH
23966: LD_INT 44
23968: PUSH
23969: LD_INT 48
23971: PUSH
23972: LD_INT 49
23974: PUSH
23975: LD_INT 50
23977: PUSH
23978: LD_INT 51
23980: PUSH
23981: LD_INT 52
23983: PUSH
23984: LD_INT 53
23986: PUSH
23987: LD_INT 54
23989: PUSH
23990: LD_INT 55
23992: PUSH
23993: LD_INT 56
23995: PUSH
23996: LD_INT 57
23998: PUSH
23999: LD_INT 58
24001: PUSH
24002: LD_INT 59
24004: PUSH
24005: LD_INT 63
24007: PUSH
24008: LD_INT 64
24010: PUSH
24011: LD_INT 65
24013: PUSH
24014: LD_INT 82
24016: PUSH
24017: LD_INT 83
24019: PUSH
24020: LD_INT 84
24022: PUSH
24023: LD_INT 85
24025: PUSH
24026: LD_INT 86
24028: PUSH
24029: EMPTY
24030: LIST
24031: LIST
24032: LIST
24033: LIST
24034: LIST
24035: LIST
24036: LIST
24037: LIST
24038: LIST
24039: LIST
24040: LIST
24041: LIST
24042: LIST
24043: LIST
24044: LIST
24045: LIST
24046: LIST
24047: LIST
24048: LIST
24049: LIST
24050: LIST
24051: LIST
24052: LIST
24053: LIST
24054: LIST
24055: LIST
24056: LIST
24057: LIST
24058: LIST
24059: LIST
24060: LIST
24061: LIST
24062: LIST
24063: LIST
24064: LIST
24065: LIST
24066: LIST
24067: LIST
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: LIST
24074: LIST
24075: LIST
24076: LIST
24077: LIST
24078: LIST
24079: LIST
24080: LIST
24081: LIST
24082: LIST
24083: ST_TO_ADDR
24084: GO 24087
24086: POP
// if state > - 1 and state < 3 then
24087: LD_VAR 0 3
24091: PUSH
24092: LD_INT 1
24094: NEG
24095: GREATER
24096: PUSH
24097: LD_VAR 0 3
24101: PUSH
24102: LD_INT 3
24104: LESS
24105: AND
24106: IFFALSE 24163
// for i in result do
24108: LD_ADDR_VAR 0 5
24112: PUSH
24113: LD_VAR 0 4
24117: PUSH
24118: FOR_IN
24119: IFFALSE 24161
// if GetTech ( i , side ) <> state then
24121: LD_VAR 0 5
24125: PPUSH
24126: LD_VAR 0 1
24130: PPUSH
24131: CALL_OW 321
24135: PUSH
24136: LD_VAR 0 3
24140: NONEQUAL
24141: IFFALSE 24159
// result := result diff i ;
24143: LD_ADDR_VAR 0 4
24147: PUSH
24148: LD_VAR 0 4
24152: PUSH
24153: LD_VAR 0 5
24157: DIFF
24158: ST_TO_ADDR
24159: GO 24118
24161: POP
24162: POP
// end ;
24163: LD_VAR 0 4
24167: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
24168: LD_INT 0
24170: PPUSH
24171: PPUSH
24172: PPUSH
// result := true ;
24173: LD_ADDR_VAR 0 3
24177: PUSH
24178: LD_INT 1
24180: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
24181: LD_ADDR_VAR 0 5
24185: PUSH
24186: LD_VAR 0 2
24190: PPUSH
24191: CALL_OW 480
24195: ST_TO_ADDR
// if not tmp then
24196: LD_VAR 0 5
24200: NOT
24201: IFFALSE 24205
// exit ;
24203: GO 24254
// for i in tmp do
24205: LD_ADDR_VAR 0 4
24209: PUSH
24210: LD_VAR 0 5
24214: PUSH
24215: FOR_IN
24216: IFFALSE 24252
// if GetTech ( i , side ) <> state_researched then
24218: LD_VAR 0 4
24222: PPUSH
24223: LD_VAR 0 1
24227: PPUSH
24228: CALL_OW 321
24232: PUSH
24233: LD_INT 2
24235: NONEQUAL
24236: IFFALSE 24250
// begin result := false ;
24238: LD_ADDR_VAR 0 3
24242: PUSH
24243: LD_INT 0
24245: ST_TO_ADDR
// exit ;
24246: POP
24247: POP
24248: GO 24254
// end ;
24250: GO 24215
24252: POP
24253: POP
// end ;
24254: LD_VAR 0 3
24258: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
24259: LD_INT 0
24261: PPUSH
24262: PPUSH
24263: PPUSH
24264: PPUSH
24265: PPUSH
24266: PPUSH
24267: PPUSH
24268: PPUSH
24269: PPUSH
24270: PPUSH
24271: PPUSH
24272: PPUSH
24273: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
24274: LD_VAR 0 1
24278: NOT
24279: PUSH
24280: LD_VAR 0 1
24284: PPUSH
24285: CALL_OW 257
24289: PUSH
24290: LD_INT 9
24292: NONEQUAL
24293: OR
24294: IFFALSE 24298
// exit ;
24296: GO 24871
// side := GetSide ( unit ) ;
24298: LD_ADDR_VAR 0 9
24302: PUSH
24303: LD_VAR 0 1
24307: PPUSH
24308: CALL_OW 255
24312: ST_TO_ADDR
// tech_space := tech_spacanom ;
24313: LD_ADDR_VAR 0 12
24317: PUSH
24318: LD_INT 29
24320: ST_TO_ADDR
// tech_time := tech_taurad ;
24321: LD_ADDR_VAR 0 13
24325: PUSH
24326: LD_INT 28
24328: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
24329: LD_ADDR_VAR 0 11
24333: PUSH
24334: LD_VAR 0 1
24338: PPUSH
24339: CALL_OW 310
24343: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
24344: LD_VAR 0 11
24348: PPUSH
24349: CALL_OW 247
24353: PUSH
24354: LD_INT 2
24356: EQUAL
24357: IFFALSE 24361
// exit ;
24359: GO 24871
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24361: LD_ADDR_VAR 0 8
24365: PUSH
24366: LD_INT 81
24368: PUSH
24369: LD_VAR 0 9
24373: PUSH
24374: EMPTY
24375: LIST
24376: LIST
24377: PUSH
24378: LD_INT 3
24380: PUSH
24381: LD_INT 21
24383: PUSH
24384: LD_INT 3
24386: PUSH
24387: EMPTY
24388: LIST
24389: LIST
24390: PUSH
24391: EMPTY
24392: LIST
24393: LIST
24394: PUSH
24395: EMPTY
24396: LIST
24397: LIST
24398: PPUSH
24399: CALL_OW 69
24403: ST_TO_ADDR
// if not tmp then
24404: LD_VAR 0 8
24408: NOT
24409: IFFALSE 24413
// exit ;
24411: GO 24871
// if in_unit then
24413: LD_VAR 0 11
24417: IFFALSE 24441
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
24419: LD_ADDR_VAR 0 10
24423: PUSH
24424: LD_VAR 0 8
24428: PPUSH
24429: LD_VAR 0 11
24433: PPUSH
24434: CALL_OW 74
24438: ST_TO_ADDR
24439: GO 24461
// enemy := NearestUnitToUnit ( tmp , unit ) ;
24441: LD_ADDR_VAR 0 10
24445: PUSH
24446: LD_VAR 0 8
24450: PPUSH
24451: LD_VAR 0 1
24455: PPUSH
24456: CALL_OW 74
24460: ST_TO_ADDR
// if not enemy then
24461: LD_VAR 0 10
24465: NOT
24466: IFFALSE 24470
// exit ;
24468: GO 24871
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
24470: LD_VAR 0 11
24474: PUSH
24475: LD_VAR 0 11
24479: PPUSH
24480: LD_VAR 0 10
24484: PPUSH
24485: CALL_OW 296
24489: PUSH
24490: LD_INT 13
24492: GREATER
24493: AND
24494: PUSH
24495: LD_VAR 0 1
24499: PPUSH
24500: LD_VAR 0 10
24504: PPUSH
24505: CALL_OW 296
24509: PUSH
24510: LD_INT 12
24512: GREATER
24513: OR
24514: IFFALSE 24518
// exit ;
24516: GO 24871
// missile := [ 1 ] ;
24518: LD_ADDR_VAR 0 14
24522: PUSH
24523: LD_INT 1
24525: PUSH
24526: EMPTY
24527: LIST
24528: ST_TO_ADDR
// if Researched ( side , tech_space ) then
24529: LD_VAR 0 9
24533: PPUSH
24534: LD_VAR 0 12
24538: PPUSH
24539: CALL_OW 325
24543: IFFALSE 24572
// missile := Replace ( missile , missile + 1 , 2 ) ;
24545: LD_ADDR_VAR 0 14
24549: PUSH
24550: LD_VAR 0 14
24554: PPUSH
24555: LD_VAR 0 14
24559: PUSH
24560: LD_INT 1
24562: PLUS
24563: PPUSH
24564: LD_INT 2
24566: PPUSH
24567: CALL_OW 1
24571: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
24572: LD_VAR 0 9
24576: PPUSH
24577: LD_VAR 0 13
24581: PPUSH
24582: CALL_OW 325
24586: PUSH
24587: LD_VAR 0 10
24591: PPUSH
24592: CALL_OW 255
24596: PPUSH
24597: LD_VAR 0 13
24601: PPUSH
24602: CALL_OW 325
24606: NOT
24607: AND
24608: IFFALSE 24637
// missile := Replace ( missile , missile + 1 , 3 ) ;
24610: LD_ADDR_VAR 0 14
24614: PUSH
24615: LD_VAR 0 14
24619: PPUSH
24620: LD_VAR 0 14
24624: PUSH
24625: LD_INT 1
24627: PLUS
24628: PPUSH
24629: LD_INT 3
24631: PPUSH
24632: CALL_OW 1
24636: ST_TO_ADDR
// if missile < 2 then
24637: LD_VAR 0 14
24641: PUSH
24642: LD_INT 2
24644: LESS
24645: IFFALSE 24649
// exit ;
24647: GO 24871
// x := GetX ( enemy ) ;
24649: LD_ADDR_VAR 0 4
24653: PUSH
24654: LD_VAR 0 10
24658: PPUSH
24659: CALL_OW 250
24663: ST_TO_ADDR
// y := GetY ( enemy ) ;
24664: LD_ADDR_VAR 0 5
24668: PUSH
24669: LD_VAR 0 10
24673: PPUSH
24674: CALL_OW 251
24678: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
24679: LD_ADDR_VAR 0 6
24683: PUSH
24684: LD_VAR 0 4
24688: PUSH
24689: LD_INT 1
24691: NEG
24692: PPUSH
24693: LD_INT 1
24695: PPUSH
24696: CALL_OW 12
24700: PLUS
24701: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
24702: LD_ADDR_VAR 0 7
24706: PUSH
24707: LD_VAR 0 5
24711: PUSH
24712: LD_INT 1
24714: NEG
24715: PPUSH
24716: LD_INT 1
24718: PPUSH
24719: CALL_OW 12
24723: PLUS
24724: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24725: LD_VAR 0 6
24729: PPUSH
24730: LD_VAR 0 7
24734: PPUSH
24735: CALL_OW 488
24739: NOT
24740: IFFALSE 24762
// begin _x := x ;
24742: LD_ADDR_VAR 0 6
24746: PUSH
24747: LD_VAR 0 4
24751: ST_TO_ADDR
// _y := y ;
24752: LD_ADDR_VAR 0 7
24756: PUSH
24757: LD_VAR 0 5
24761: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
24762: LD_ADDR_VAR 0 3
24766: PUSH
24767: LD_INT 1
24769: PPUSH
24770: LD_VAR 0 14
24774: PPUSH
24775: CALL_OW 12
24779: ST_TO_ADDR
// case i of 1 :
24780: LD_VAR 0 3
24784: PUSH
24785: LD_INT 1
24787: DOUBLE
24788: EQUAL
24789: IFTRUE 24793
24791: GO 24810
24793: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
24794: LD_VAR 0 1
24798: PPUSH
24799: LD_VAR 0 10
24803: PPUSH
24804: CALL_OW 115
24808: GO 24871
24810: LD_INT 2
24812: DOUBLE
24813: EQUAL
24814: IFTRUE 24818
24816: GO 24840
24818: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
24819: LD_VAR 0 1
24823: PPUSH
24824: LD_VAR 0 6
24828: PPUSH
24829: LD_VAR 0 7
24833: PPUSH
24834: CALL_OW 153
24838: GO 24871
24840: LD_INT 3
24842: DOUBLE
24843: EQUAL
24844: IFTRUE 24848
24846: GO 24870
24848: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
24849: LD_VAR 0 1
24853: PPUSH
24854: LD_VAR 0 6
24858: PPUSH
24859: LD_VAR 0 7
24863: PPUSH
24864: CALL_OW 154
24868: GO 24871
24870: POP
// end ;
24871: LD_VAR 0 2
24875: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
24876: LD_INT 0
24878: PPUSH
24879: PPUSH
24880: PPUSH
24881: PPUSH
24882: PPUSH
24883: PPUSH
// if not unit or not building then
24884: LD_VAR 0 1
24888: NOT
24889: PUSH
24890: LD_VAR 0 2
24894: NOT
24895: OR
24896: IFFALSE 24900
// exit ;
24898: GO 25058
// x := GetX ( building ) ;
24900: LD_ADDR_VAR 0 5
24904: PUSH
24905: LD_VAR 0 2
24909: PPUSH
24910: CALL_OW 250
24914: ST_TO_ADDR
// y := GetY ( building ) ;
24915: LD_ADDR_VAR 0 6
24919: PUSH
24920: LD_VAR 0 2
24924: PPUSH
24925: CALL_OW 251
24929: ST_TO_ADDR
// for i = 0 to 5 do
24930: LD_ADDR_VAR 0 4
24934: PUSH
24935: DOUBLE
24936: LD_INT 0
24938: DEC
24939: ST_TO_ADDR
24940: LD_INT 5
24942: PUSH
24943: FOR_TO
24944: IFFALSE 25056
// begin _x := ShiftX ( x , i , 3 ) ;
24946: LD_ADDR_VAR 0 7
24950: PUSH
24951: LD_VAR 0 5
24955: PPUSH
24956: LD_VAR 0 4
24960: PPUSH
24961: LD_INT 3
24963: PPUSH
24964: CALL_OW 272
24968: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
24969: LD_ADDR_VAR 0 8
24973: PUSH
24974: LD_VAR 0 6
24978: PPUSH
24979: LD_VAR 0 4
24983: PPUSH
24984: LD_INT 3
24986: PPUSH
24987: CALL_OW 273
24991: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24992: LD_VAR 0 7
24996: PPUSH
24997: LD_VAR 0 8
25001: PPUSH
25002: CALL_OW 488
25006: NOT
25007: IFFALSE 25011
// continue ;
25009: GO 24943
// if HexInfo ( _x , _y ) = 0 then
25011: LD_VAR 0 7
25015: PPUSH
25016: LD_VAR 0 8
25020: PPUSH
25021: CALL_OW 428
25025: PUSH
25026: LD_INT 0
25028: EQUAL
25029: IFFALSE 25054
// begin ComMoveXY ( unit , _x , _y ) ;
25031: LD_VAR 0 1
25035: PPUSH
25036: LD_VAR 0 7
25040: PPUSH
25041: LD_VAR 0 8
25045: PPUSH
25046: CALL_OW 111
// exit ;
25050: POP
25051: POP
25052: GO 25058
// end ; end ;
25054: GO 24943
25056: POP
25057: POP
// end ;
25058: LD_VAR 0 3
25062: RET
// export function ScanBase ( side , base_area ) ; begin
25063: LD_INT 0
25065: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
25066: LD_ADDR_VAR 0 3
25070: PUSH
25071: LD_VAR 0 2
25075: PPUSH
25076: LD_INT 81
25078: PUSH
25079: LD_VAR 0 1
25083: PUSH
25084: EMPTY
25085: LIST
25086: LIST
25087: PPUSH
25088: CALL_OW 70
25092: ST_TO_ADDR
// end ;
25093: LD_VAR 0 3
25097: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
25098: LD_INT 0
25100: PPUSH
25101: PPUSH
25102: PPUSH
25103: PPUSH
// result := false ;
25104: LD_ADDR_VAR 0 2
25108: PUSH
25109: LD_INT 0
25111: ST_TO_ADDR
// side := GetSide ( unit ) ;
25112: LD_ADDR_VAR 0 3
25116: PUSH
25117: LD_VAR 0 1
25121: PPUSH
25122: CALL_OW 255
25126: ST_TO_ADDR
// nat := GetNation ( unit ) ;
25127: LD_ADDR_VAR 0 4
25131: PUSH
25132: LD_VAR 0 1
25136: PPUSH
25137: CALL_OW 248
25141: ST_TO_ADDR
// case nat of 1 :
25142: LD_VAR 0 4
25146: PUSH
25147: LD_INT 1
25149: DOUBLE
25150: EQUAL
25151: IFTRUE 25155
25153: GO 25166
25155: POP
// tech := tech_lassight ; 2 :
25156: LD_ADDR_VAR 0 5
25160: PUSH
25161: LD_INT 12
25163: ST_TO_ADDR
25164: GO 25205
25166: LD_INT 2
25168: DOUBLE
25169: EQUAL
25170: IFTRUE 25174
25172: GO 25185
25174: POP
// tech := tech_mortar ; 3 :
25175: LD_ADDR_VAR 0 5
25179: PUSH
25180: LD_INT 41
25182: ST_TO_ADDR
25183: GO 25205
25185: LD_INT 3
25187: DOUBLE
25188: EQUAL
25189: IFTRUE 25193
25191: GO 25204
25193: POP
// tech := tech_bazooka ; end ;
25194: LD_ADDR_VAR 0 5
25198: PUSH
25199: LD_INT 44
25201: ST_TO_ADDR
25202: GO 25205
25204: POP
// if Researched ( side , tech ) then
25205: LD_VAR 0 3
25209: PPUSH
25210: LD_VAR 0 5
25214: PPUSH
25215: CALL_OW 325
25219: IFFALSE 25246
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
25221: LD_ADDR_VAR 0 2
25225: PUSH
25226: LD_INT 5
25228: PUSH
25229: LD_INT 8
25231: PUSH
25232: LD_INT 9
25234: PUSH
25235: EMPTY
25236: LIST
25237: LIST
25238: LIST
25239: PUSH
25240: LD_VAR 0 4
25244: ARRAY
25245: ST_TO_ADDR
// end ;
25246: LD_VAR 0 2
25250: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
25251: LD_INT 0
25253: PPUSH
25254: PPUSH
25255: PPUSH
// if not mines then
25256: LD_VAR 0 2
25260: NOT
25261: IFFALSE 25265
// exit ;
25263: GO 25409
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25265: LD_ADDR_VAR 0 5
25269: PUSH
25270: LD_INT 81
25272: PUSH
25273: LD_VAR 0 1
25277: PUSH
25278: EMPTY
25279: LIST
25280: LIST
25281: PUSH
25282: LD_INT 3
25284: PUSH
25285: LD_INT 21
25287: PUSH
25288: LD_INT 3
25290: PUSH
25291: EMPTY
25292: LIST
25293: LIST
25294: PUSH
25295: EMPTY
25296: LIST
25297: LIST
25298: PUSH
25299: EMPTY
25300: LIST
25301: LIST
25302: PPUSH
25303: CALL_OW 69
25307: ST_TO_ADDR
// for i in mines do
25308: LD_ADDR_VAR 0 4
25312: PUSH
25313: LD_VAR 0 2
25317: PUSH
25318: FOR_IN
25319: IFFALSE 25407
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
25321: LD_VAR 0 4
25325: PUSH
25326: LD_INT 1
25328: ARRAY
25329: PPUSH
25330: LD_VAR 0 4
25334: PUSH
25335: LD_INT 2
25337: ARRAY
25338: PPUSH
25339: CALL_OW 458
25343: NOT
25344: IFFALSE 25348
// continue ;
25346: GO 25318
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
25348: LD_VAR 0 4
25352: PUSH
25353: LD_INT 1
25355: ARRAY
25356: PPUSH
25357: LD_VAR 0 4
25361: PUSH
25362: LD_INT 2
25364: ARRAY
25365: PPUSH
25366: CALL_OW 428
25370: PUSH
25371: LD_VAR 0 5
25375: IN
25376: IFFALSE 25405
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
25378: LD_VAR 0 4
25382: PUSH
25383: LD_INT 1
25385: ARRAY
25386: PPUSH
25387: LD_VAR 0 4
25391: PUSH
25392: LD_INT 2
25394: ARRAY
25395: PPUSH
25396: LD_VAR 0 1
25400: PPUSH
25401: CALL_OW 456
// end ;
25405: GO 25318
25407: POP
25408: POP
// end ;
25409: LD_VAR 0 3
25413: RET
// export function Count ( array ) ; var i ; begin
25414: LD_INT 0
25416: PPUSH
25417: PPUSH
// result := 0 ;
25418: LD_ADDR_VAR 0 2
25422: PUSH
25423: LD_INT 0
25425: ST_TO_ADDR
// for i in array do
25426: LD_ADDR_VAR 0 3
25430: PUSH
25431: LD_VAR 0 1
25435: PUSH
25436: FOR_IN
25437: IFFALSE 25461
// if i then
25439: LD_VAR 0 3
25443: IFFALSE 25459
// result := result + 1 ;
25445: LD_ADDR_VAR 0 2
25449: PUSH
25450: LD_VAR 0 2
25454: PUSH
25455: LD_INT 1
25457: PLUS
25458: ST_TO_ADDR
25459: GO 25436
25461: POP
25462: POP
// end ;
25463: LD_VAR 0 2
25467: RET
// export function IsEmpty ( building ) ; begin
25468: LD_INT 0
25470: PPUSH
// if not building then
25471: LD_VAR 0 1
25475: NOT
25476: IFFALSE 25480
// exit ;
25478: GO 25523
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
25480: LD_ADDR_VAR 0 2
25484: PUSH
25485: LD_VAR 0 1
25489: PUSH
25490: LD_INT 22
25492: PUSH
25493: LD_VAR 0 1
25497: PPUSH
25498: CALL_OW 255
25502: PUSH
25503: EMPTY
25504: LIST
25505: LIST
25506: PUSH
25507: LD_INT 58
25509: PUSH
25510: EMPTY
25511: LIST
25512: PUSH
25513: EMPTY
25514: LIST
25515: LIST
25516: PPUSH
25517: CALL_OW 69
25521: IN
25522: ST_TO_ADDR
// end ;
25523: LD_VAR 0 2
25527: RET
// export function IsNotFull ( building ) ; var places ; begin
25528: LD_INT 0
25530: PPUSH
25531: PPUSH
// if not building then
25532: LD_VAR 0 1
25536: NOT
25537: IFFALSE 25541
// exit ;
25539: GO 25712
// result := false ;
25541: LD_ADDR_VAR 0 2
25545: PUSH
25546: LD_INT 0
25548: ST_TO_ADDR
// places := 0 ;
25549: LD_ADDR_VAR 0 3
25553: PUSH
25554: LD_INT 0
25556: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
25557: LD_VAR 0 1
25561: PPUSH
25562: CALL_OW 266
25566: PUSH
25567: LD_INT 0
25569: DOUBLE
25570: EQUAL
25571: IFTRUE 25629
25573: LD_INT 1
25575: DOUBLE
25576: EQUAL
25577: IFTRUE 25629
25579: LD_INT 6
25581: DOUBLE
25582: EQUAL
25583: IFTRUE 25629
25585: LD_INT 7
25587: DOUBLE
25588: EQUAL
25589: IFTRUE 25629
25591: LD_INT 8
25593: DOUBLE
25594: EQUAL
25595: IFTRUE 25629
25597: LD_INT 4
25599: DOUBLE
25600: EQUAL
25601: IFTRUE 25629
25603: LD_INT 5
25605: DOUBLE
25606: EQUAL
25607: IFTRUE 25629
25609: LD_INT 2
25611: DOUBLE
25612: EQUAL
25613: IFTRUE 25629
25615: LD_INT 3
25617: DOUBLE
25618: EQUAL
25619: IFTRUE 25629
25621: LD_INT 35
25623: DOUBLE
25624: EQUAL
25625: IFTRUE 25629
25627: GO 25640
25629: POP
// places := 6 ; b_bunker , b_breastwork :
25630: LD_ADDR_VAR 0 3
25634: PUSH
25635: LD_INT 6
25637: ST_TO_ADDR
25638: GO 25685
25640: LD_INT 32
25642: DOUBLE
25643: EQUAL
25644: IFTRUE 25654
25646: LD_INT 31
25648: DOUBLE
25649: EQUAL
25650: IFTRUE 25654
25652: GO 25665
25654: POP
// places := 1 ; b_control_tower :
25655: LD_ADDR_VAR 0 3
25659: PUSH
25660: LD_INT 1
25662: ST_TO_ADDR
25663: GO 25685
25665: LD_INT 36
25667: DOUBLE
25668: EQUAL
25669: IFTRUE 25673
25671: GO 25684
25673: POP
// places := 3 ; end ;
25674: LD_ADDR_VAR 0 3
25678: PUSH
25679: LD_INT 3
25681: ST_TO_ADDR
25682: GO 25685
25684: POP
// if places then
25685: LD_VAR 0 3
25689: IFFALSE 25712
// result := UnitsInside ( building ) < places ;
25691: LD_ADDR_VAR 0 2
25695: PUSH
25696: LD_VAR 0 1
25700: PPUSH
25701: CALL_OW 313
25705: PUSH
25706: LD_VAR 0 3
25710: LESS
25711: ST_TO_ADDR
// end ;
25712: LD_VAR 0 2
25716: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
25717: LD_INT 0
25719: PPUSH
25720: PPUSH
25721: PPUSH
25722: PPUSH
// tmp := [ ] ;
25723: LD_ADDR_VAR 0 3
25727: PUSH
25728: EMPTY
25729: ST_TO_ADDR
// list := [ ] ;
25730: LD_ADDR_VAR 0 5
25734: PUSH
25735: EMPTY
25736: ST_TO_ADDR
// for i = 16 to 25 do
25737: LD_ADDR_VAR 0 4
25741: PUSH
25742: DOUBLE
25743: LD_INT 16
25745: DEC
25746: ST_TO_ADDR
25747: LD_INT 25
25749: PUSH
25750: FOR_TO
25751: IFFALSE 25824
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
25753: LD_ADDR_VAR 0 3
25757: PUSH
25758: LD_VAR 0 3
25762: PUSH
25763: LD_INT 22
25765: PUSH
25766: LD_VAR 0 1
25770: PPUSH
25771: CALL_OW 255
25775: PUSH
25776: EMPTY
25777: LIST
25778: LIST
25779: PUSH
25780: LD_INT 91
25782: PUSH
25783: LD_VAR 0 1
25787: PUSH
25788: LD_INT 6
25790: PUSH
25791: EMPTY
25792: LIST
25793: LIST
25794: LIST
25795: PUSH
25796: LD_INT 30
25798: PUSH
25799: LD_VAR 0 4
25803: PUSH
25804: EMPTY
25805: LIST
25806: LIST
25807: PUSH
25808: EMPTY
25809: LIST
25810: LIST
25811: LIST
25812: PUSH
25813: EMPTY
25814: LIST
25815: PPUSH
25816: CALL_OW 69
25820: ADD
25821: ST_TO_ADDR
25822: GO 25750
25824: POP
25825: POP
// for i = 1 to tmp do
25826: LD_ADDR_VAR 0 4
25830: PUSH
25831: DOUBLE
25832: LD_INT 1
25834: DEC
25835: ST_TO_ADDR
25836: LD_VAR 0 3
25840: PUSH
25841: FOR_TO
25842: IFFALSE 25930
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
25844: LD_ADDR_VAR 0 5
25848: PUSH
25849: LD_VAR 0 5
25853: PUSH
25854: LD_VAR 0 3
25858: PUSH
25859: LD_VAR 0 4
25863: ARRAY
25864: PPUSH
25865: CALL_OW 266
25869: PUSH
25870: LD_VAR 0 3
25874: PUSH
25875: LD_VAR 0 4
25879: ARRAY
25880: PPUSH
25881: CALL_OW 250
25885: PUSH
25886: LD_VAR 0 3
25890: PUSH
25891: LD_VAR 0 4
25895: ARRAY
25896: PPUSH
25897: CALL_OW 251
25901: PUSH
25902: LD_VAR 0 3
25906: PUSH
25907: LD_VAR 0 4
25911: ARRAY
25912: PPUSH
25913: CALL_OW 254
25917: PUSH
25918: EMPTY
25919: LIST
25920: LIST
25921: LIST
25922: LIST
25923: PUSH
25924: EMPTY
25925: LIST
25926: ADD
25927: ST_TO_ADDR
25928: GO 25841
25930: POP
25931: POP
// result := list ;
25932: LD_ADDR_VAR 0 2
25936: PUSH
25937: LD_VAR 0 5
25941: ST_TO_ADDR
// end ;
25942: LD_VAR 0 2
25946: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
25947: LD_INT 0
25949: PPUSH
25950: PPUSH
25951: PPUSH
25952: PPUSH
25953: PPUSH
25954: PPUSH
25955: PPUSH
// if not factory then
25956: LD_VAR 0 1
25960: NOT
25961: IFFALSE 25965
// exit ;
25963: GO 26558
// if control = control_apeman then
25965: LD_VAR 0 4
25969: PUSH
25970: LD_INT 5
25972: EQUAL
25973: IFFALSE 26082
// begin tmp := UnitsInside ( factory ) ;
25975: LD_ADDR_VAR 0 8
25979: PUSH
25980: LD_VAR 0 1
25984: PPUSH
25985: CALL_OW 313
25989: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
25990: LD_VAR 0 8
25994: PPUSH
25995: LD_INT 25
25997: PUSH
25998: LD_INT 12
26000: PUSH
26001: EMPTY
26002: LIST
26003: LIST
26004: PPUSH
26005: CALL_OW 72
26009: NOT
26010: IFFALSE 26020
// control := control_manual ;
26012: LD_ADDR_VAR 0 4
26016: PUSH
26017: LD_INT 1
26019: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
26020: LD_ADDR_VAR 0 8
26024: PUSH
26025: LD_VAR 0 1
26029: PPUSH
26030: CALL 25717 0 1
26034: ST_TO_ADDR
// if tmp then
26035: LD_VAR 0 8
26039: IFFALSE 26082
// begin for i in tmp do
26041: LD_ADDR_VAR 0 7
26045: PUSH
26046: LD_VAR 0 8
26050: PUSH
26051: FOR_IN
26052: IFFALSE 26080
// if i [ 1 ] = b_ext_radio then
26054: LD_VAR 0 7
26058: PUSH
26059: LD_INT 1
26061: ARRAY
26062: PUSH
26063: LD_INT 22
26065: EQUAL
26066: IFFALSE 26078
// begin control := control_remote ;
26068: LD_ADDR_VAR 0 4
26072: PUSH
26073: LD_INT 2
26075: ST_TO_ADDR
// break ;
26076: GO 26080
// end ;
26078: GO 26051
26080: POP
26081: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26082: LD_VAR 0 1
26086: PPUSH
26087: LD_VAR 0 2
26091: PPUSH
26092: LD_VAR 0 3
26096: PPUSH
26097: LD_VAR 0 4
26101: PPUSH
26102: LD_VAR 0 5
26106: PPUSH
26107: CALL_OW 448
26111: IFFALSE 26146
// begin result := [ chassis , engine , control , weapon ] ;
26113: LD_ADDR_VAR 0 6
26117: PUSH
26118: LD_VAR 0 2
26122: PUSH
26123: LD_VAR 0 3
26127: PUSH
26128: LD_VAR 0 4
26132: PUSH
26133: LD_VAR 0 5
26137: PUSH
26138: EMPTY
26139: LIST
26140: LIST
26141: LIST
26142: LIST
26143: ST_TO_ADDR
// exit ;
26144: GO 26558
// end ; _chassis := AvailableChassisList ( factory ) ;
26146: LD_ADDR_VAR 0 9
26150: PUSH
26151: LD_VAR 0 1
26155: PPUSH
26156: CALL_OW 475
26160: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
26161: LD_ADDR_VAR 0 11
26165: PUSH
26166: LD_VAR 0 1
26170: PPUSH
26171: CALL_OW 476
26175: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
26176: LD_ADDR_VAR 0 12
26180: PUSH
26181: LD_VAR 0 1
26185: PPUSH
26186: CALL_OW 477
26190: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
26191: LD_ADDR_VAR 0 10
26195: PUSH
26196: LD_VAR 0 1
26200: PPUSH
26201: CALL_OW 478
26205: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
26206: LD_VAR 0 9
26210: NOT
26211: PUSH
26212: LD_VAR 0 11
26216: NOT
26217: OR
26218: PUSH
26219: LD_VAR 0 12
26223: NOT
26224: OR
26225: PUSH
26226: LD_VAR 0 10
26230: NOT
26231: OR
26232: IFFALSE 26267
// begin result := [ chassis , engine , control , weapon ] ;
26234: LD_ADDR_VAR 0 6
26238: PUSH
26239: LD_VAR 0 2
26243: PUSH
26244: LD_VAR 0 3
26248: PUSH
26249: LD_VAR 0 4
26253: PUSH
26254: LD_VAR 0 5
26258: PUSH
26259: EMPTY
26260: LIST
26261: LIST
26262: LIST
26263: LIST
26264: ST_TO_ADDR
// exit ;
26265: GO 26558
// end ; if not chassis in _chassis then
26267: LD_VAR 0 2
26271: PUSH
26272: LD_VAR 0 9
26276: IN
26277: NOT
26278: IFFALSE 26304
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
26280: LD_ADDR_VAR 0 2
26284: PUSH
26285: LD_VAR 0 9
26289: PUSH
26290: LD_INT 1
26292: PPUSH
26293: LD_VAR 0 9
26297: PPUSH
26298: CALL_OW 12
26302: ARRAY
26303: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
26304: LD_VAR 0 2
26308: PPUSH
26309: LD_VAR 0 3
26313: PPUSH
26314: CALL 26563 0 2
26318: NOT
26319: IFFALSE 26378
// repeat engine := _engine [ 1 ] ;
26321: LD_ADDR_VAR 0 3
26325: PUSH
26326: LD_VAR 0 11
26330: PUSH
26331: LD_INT 1
26333: ARRAY
26334: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
26335: LD_ADDR_VAR 0 11
26339: PUSH
26340: LD_VAR 0 11
26344: PPUSH
26345: LD_INT 1
26347: PPUSH
26348: CALL_OW 3
26352: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
26353: LD_VAR 0 2
26357: PPUSH
26358: LD_VAR 0 3
26362: PPUSH
26363: CALL 26563 0 2
26367: PUSH
26368: LD_VAR 0 11
26372: PUSH
26373: EMPTY
26374: EQUAL
26375: OR
26376: IFFALSE 26321
// if not control in _control then
26378: LD_VAR 0 4
26382: PUSH
26383: LD_VAR 0 12
26387: IN
26388: NOT
26389: IFFALSE 26415
// control := _control [ rand ( 1 , _control ) ] ;
26391: LD_ADDR_VAR 0 4
26395: PUSH
26396: LD_VAR 0 12
26400: PUSH
26401: LD_INT 1
26403: PPUSH
26404: LD_VAR 0 12
26408: PPUSH
26409: CALL_OW 12
26413: ARRAY
26414: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
26415: LD_VAR 0 2
26419: PPUSH
26420: LD_VAR 0 5
26424: PPUSH
26425: CALL 26783 0 2
26429: NOT
26430: IFFALSE 26489
// repeat weapon := _weapon [ 1 ] ;
26432: LD_ADDR_VAR 0 5
26436: PUSH
26437: LD_VAR 0 10
26441: PUSH
26442: LD_INT 1
26444: ARRAY
26445: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
26446: LD_ADDR_VAR 0 10
26450: PUSH
26451: LD_VAR 0 10
26455: PPUSH
26456: LD_INT 1
26458: PPUSH
26459: CALL_OW 3
26463: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
26464: LD_VAR 0 2
26468: PPUSH
26469: LD_VAR 0 5
26473: PPUSH
26474: CALL 26783 0 2
26478: PUSH
26479: LD_VAR 0 10
26483: PUSH
26484: EMPTY
26485: EQUAL
26486: OR
26487: IFFALSE 26432
// result := [ ] ;
26489: LD_ADDR_VAR 0 6
26493: PUSH
26494: EMPTY
26495: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26496: LD_VAR 0 1
26500: PPUSH
26501: LD_VAR 0 2
26505: PPUSH
26506: LD_VAR 0 3
26510: PPUSH
26511: LD_VAR 0 4
26515: PPUSH
26516: LD_VAR 0 5
26520: PPUSH
26521: CALL_OW 448
26525: IFFALSE 26558
// result := [ chassis , engine , control , weapon ] ;
26527: LD_ADDR_VAR 0 6
26531: PUSH
26532: LD_VAR 0 2
26536: PUSH
26537: LD_VAR 0 3
26541: PUSH
26542: LD_VAR 0 4
26546: PUSH
26547: LD_VAR 0 5
26551: PUSH
26552: EMPTY
26553: LIST
26554: LIST
26555: LIST
26556: LIST
26557: ST_TO_ADDR
// end ;
26558: LD_VAR 0 6
26562: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
26563: LD_INT 0
26565: PPUSH
// if not chassis or not engine then
26566: LD_VAR 0 1
26570: NOT
26571: PUSH
26572: LD_VAR 0 2
26576: NOT
26577: OR
26578: IFFALSE 26582
// exit ;
26580: GO 26778
// case engine of engine_solar :
26582: LD_VAR 0 2
26586: PUSH
26587: LD_INT 2
26589: DOUBLE
26590: EQUAL
26591: IFTRUE 26595
26593: GO 26633
26595: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
26596: LD_ADDR_VAR 0 3
26600: PUSH
26601: LD_INT 11
26603: PUSH
26604: LD_INT 12
26606: PUSH
26607: LD_INT 13
26609: PUSH
26610: LD_INT 14
26612: PUSH
26613: LD_INT 1
26615: PUSH
26616: LD_INT 2
26618: PUSH
26619: LD_INT 3
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: LIST
26626: LIST
26627: LIST
26628: LIST
26629: LIST
26630: ST_TO_ADDR
26631: GO 26762
26633: LD_INT 1
26635: DOUBLE
26636: EQUAL
26637: IFTRUE 26641
26639: GO 26703
26641: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
26642: LD_ADDR_VAR 0 3
26646: PUSH
26647: LD_INT 11
26649: PUSH
26650: LD_INT 12
26652: PUSH
26653: LD_INT 13
26655: PUSH
26656: LD_INT 14
26658: PUSH
26659: LD_INT 1
26661: PUSH
26662: LD_INT 2
26664: PUSH
26665: LD_INT 3
26667: PUSH
26668: LD_INT 4
26670: PUSH
26671: LD_INT 5
26673: PUSH
26674: LD_INT 21
26676: PUSH
26677: LD_INT 23
26679: PUSH
26680: LD_INT 22
26682: PUSH
26683: LD_INT 24
26685: PUSH
26686: EMPTY
26687: LIST
26688: LIST
26689: LIST
26690: LIST
26691: LIST
26692: LIST
26693: LIST
26694: LIST
26695: LIST
26696: LIST
26697: LIST
26698: LIST
26699: LIST
26700: ST_TO_ADDR
26701: GO 26762
26703: LD_INT 3
26705: DOUBLE
26706: EQUAL
26707: IFTRUE 26711
26709: GO 26761
26711: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26712: LD_ADDR_VAR 0 3
26716: PUSH
26717: LD_INT 13
26719: PUSH
26720: LD_INT 14
26722: PUSH
26723: LD_INT 2
26725: PUSH
26726: LD_INT 3
26728: PUSH
26729: LD_INT 4
26731: PUSH
26732: LD_INT 5
26734: PUSH
26735: LD_INT 21
26737: PUSH
26738: LD_INT 22
26740: PUSH
26741: LD_INT 23
26743: PUSH
26744: LD_INT 24
26746: PUSH
26747: EMPTY
26748: LIST
26749: LIST
26750: LIST
26751: LIST
26752: LIST
26753: LIST
26754: LIST
26755: LIST
26756: LIST
26757: LIST
26758: ST_TO_ADDR
26759: GO 26762
26761: POP
// result := ( chassis in result ) ;
26762: LD_ADDR_VAR 0 3
26766: PUSH
26767: LD_VAR 0 1
26771: PUSH
26772: LD_VAR 0 3
26776: IN
26777: ST_TO_ADDR
// end ;
26778: LD_VAR 0 3
26782: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
26783: LD_INT 0
26785: PPUSH
// if not chassis or not weapon then
26786: LD_VAR 0 1
26790: NOT
26791: PUSH
26792: LD_VAR 0 2
26796: NOT
26797: OR
26798: IFFALSE 26802
// exit ;
26800: GO 27862
// case weapon of us_machine_gun :
26802: LD_VAR 0 2
26806: PUSH
26807: LD_INT 2
26809: DOUBLE
26810: EQUAL
26811: IFTRUE 26815
26813: GO 26845
26815: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
26816: LD_ADDR_VAR 0 3
26820: PUSH
26821: LD_INT 1
26823: PUSH
26824: LD_INT 2
26826: PUSH
26827: LD_INT 3
26829: PUSH
26830: LD_INT 4
26832: PUSH
26833: LD_INT 5
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: LIST
26840: LIST
26841: LIST
26842: ST_TO_ADDR
26843: GO 27846
26845: LD_INT 3
26847: DOUBLE
26848: EQUAL
26849: IFTRUE 26853
26851: GO 26883
26853: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
26854: LD_ADDR_VAR 0 3
26858: PUSH
26859: LD_INT 1
26861: PUSH
26862: LD_INT 2
26864: PUSH
26865: LD_INT 3
26867: PUSH
26868: LD_INT 4
26870: PUSH
26871: LD_INT 5
26873: PUSH
26874: EMPTY
26875: LIST
26876: LIST
26877: LIST
26878: LIST
26879: LIST
26880: ST_TO_ADDR
26881: GO 27846
26883: LD_INT 11
26885: DOUBLE
26886: EQUAL
26887: IFTRUE 26891
26889: GO 26921
26891: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
26892: LD_ADDR_VAR 0 3
26896: PUSH
26897: LD_INT 1
26899: PUSH
26900: LD_INT 2
26902: PUSH
26903: LD_INT 3
26905: PUSH
26906: LD_INT 4
26908: PUSH
26909: LD_INT 5
26911: PUSH
26912: EMPTY
26913: LIST
26914: LIST
26915: LIST
26916: LIST
26917: LIST
26918: ST_TO_ADDR
26919: GO 27846
26921: LD_INT 4
26923: DOUBLE
26924: EQUAL
26925: IFTRUE 26929
26927: GO 26955
26929: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
26930: LD_ADDR_VAR 0 3
26934: PUSH
26935: LD_INT 2
26937: PUSH
26938: LD_INT 3
26940: PUSH
26941: LD_INT 4
26943: PUSH
26944: LD_INT 5
26946: PUSH
26947: EMPTY
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: ST_TO_ADDR
26953: GO 27846
26955: LD_INT 5
26957: DOUBLE
26958: EQUAL
26959: IFTRUE 26963
26961: GO 26989
26963: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
26964: LD_ADDR_VAR 0 3
26968: PUSH
26969: LD_INT 2
26971: PUSH
26972: LD_INT 3
26974: PUSH
26975: LD_INT 4
26977: PUSH
26978: LD_INT 5
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: LIST
26985: LIST
26986: ST_TO_ADDR
26987: GO 27846
26989: LD_INT 9
26991: DOUBLE
26992: EQUAL
26993: IFTRUE 26997
26995: GO 27023
26997: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
26998: LD_ADDR_VAR 0 3
27002: PUSH
27003: LD_INT 2
27005: PUSH
27006: LD_INT 3
27008: PUSH
27009: LD_INT 4
27011: PUSH
27012: LD_INT 5
27014: PUSH
27015: EMPTY
27016: LIST
27017: LIST
27018: LIST
27019: LIST
27020: ST_TO_ADDR
27021: GO 27846
27023: LD_INT 7
27025: DOUBLE
27026: EQUAL
27027: IFTRUE 27031
27029: GO 27057
27031: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
27032: LD_ADDR_VAR 0 3
27036: PUSH
27037: LD_INT 2
27039: PUSH
27040: LD_INT 3
27042: PUSH
27043: LD_INT 4
27045: PUSH
27046: LD_INT 5
27048: PUSH
27049: EMPTY
27050: LIST
27051: LIST
27052: LIST
27053: LIST
27054: ST_TO_ADDR
27055: GO 27846
27057: LD_INT 12
27059: DOUBLE
27060: EQUAL
27061: IFTRUE 27065
27063: GO 27091
27065: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
27066: LD_ADDR_VAR 0 3
27070: PUSH
27071: LD_INT 2
27073: PUSH
27074: LD_INT 3
27076: PUSH
27077: LD_INT 4
27079: PUSH
27080: LD_INT 5
27082: PUSH
27083: EMPTY
27084: LIST
27085: LIST
27086: LIST
27087: LIST
27088: ST_TO_ADDR
27089: GO 27846
27091: LD_INT 13
27093: DOUBLE
27094: EQUAL
27095: IFTRUE 27099
27097: GO 27125
27099: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
27100: LD_ADDR_VAR 0 3
27104: PUSH
27105: LD_INT 2
27107: PUSH
27108: LD_INT 3
27110: PUSH
27111: LD_INT 4
27113: PUSH
27114: LD_INT 5
27116: PUSH
27117: EMPTY
27118: LIST
27119: LIST
27120: LIST
27121: LIST
27122: ST_TO_ADDR
27123: GO 27846
27125: LD_INT 14
27127: DOUBLE
27128: EQUAL
27129: IFTRUE 27133
27131: GO 27151
27133: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
27134: LD_ADDR_VAR 0 3
27138: PUSH
27139: LD_INT 4
27141: PUSH
27142: LD_INT 5
27144: PUSH
27145: EMPTY
27146: LIST
27147: LIST
27148: ST_TO_ADDR
27149: GO 27846
27151: LD_INT 6
27153: DOUBLE
27154: EQUAL
27155: IFTRUE 27159
27157: GO 27177
27159: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
27160: LD_ADDR_VAR 0 3
27164: PUSH
27165: LD_INT 4
27167: PUSH
27168: LD_INT 5
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: ST_TO_ADDR
27175: GO 27846
27177: LD_INT 10
27179: DOUBLE
27180: EQUAL
27181: IFTRUE 27185
27183: GO 27203
27185: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
27186: LD_ADDR_VAR 0 3
27190: PUSH
27191: LD_INT 4
27193: PUSH
27194: LD_INT 5
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: ST_TO_ADDR
27201: GO 27846
27203: LD_INT 22
27205: DOUBLE
27206: EQUAL
27207: IFTRUE 27211
27209: GO 27237
27211: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
27212: LD_ADDR_VAR 0 3
27216: PUSH
27217: LD_INT 11
27219: PUSH
27220: LD_INT 12
27222: PUSH
27223: LD_INT 13
27225: PUSH
27226: LD_INT 14
27228: PUSH
27229: EMPTY
27230: LIST
27231: LIST
27232: LIST
27233: LIST
27234: ST_TO_ADDR
27235: GO 27846
27237: LD_INT 23
27239: DOUBLE
27240: EQUAL
27241: IFTRUE 27245
27243: GO 27271
27245: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
27246: LD_ADDR_VAR 0 3
27250: PUSH
27251: LD_INT 11
27253: PUSH
27254: LD_INT 12
27256: PUSH
27257: LD_INT 13
27259: PUSH
27260: LD_INT 14
27262: PUSH
27263: EMPTY
27264: LIST
27265: LIST
27266: LIST
27267: LIST
27268: ST_TO_ADDR
27269: GO 27846
27271: LD_INT 24
27273: DOUBLE
27274: EQUAL
27275: IFTRUE 27279
27277: GO 27305
27279: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
27280: LD_ADDR_VAR 0 3
27284: PUSH
27285: LD_INT 11
27287: PUSH
27288: LD_INT 12
27290: PUSH
27291: LD_INT 13
27293: PUSH
27294: LD_INT 14
27296: PUSH
27297: EMPTY
27298: LIST
27299: LIST
27300: LIST
27301: LIST
27302: ST_TO_ADDR
27303: GO 27846
27305: LD_INT 30
27307: DOUBLE
27308: EQUAL
27309: IFTRUE 27313
27311: GO 27339
27313: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
27314: LD_ADDR_VAR 0 3
27318: PUSH
27319: LD_INT 11
27321: PUSH
27322: LD_INT 12
27324: PUSH
27325: LD_INT 13
27327: PUSH
27328: LD_INT 14
27330: PUSH
27331: EMPTY
27332: LIST
27333: LIST
27334: LIST
27335: LIST
27336: ST_TO_ADDR
27337: GO 27846
27339: LD_INT 25
27341: DOUBLE
27342: EQUAL
27343: IFTRUE 27347
27345: GO 27365
27347: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
27348: LD_ADDR_VAR 0 3
27352: PUSH
27353: LD_INT 13
27355: PUSH
27356: LD_INT 14
27358: PUSH
27359: EMPTY
27360: LIST
27361: LIST
27362: ST_TO_ADDR
27363: GO 27846
27365: LD_INT 27
27367: DOUBLE
27368: EQUAL
27369: IFTRUE 27373
27371: GO 27391
27373: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
27374: LD_ADDR_VAR 0 3
27378: PUSH
27379: LD_INT 13
27381: PUSH
27382: LD_INT 14
27384: PUSH
27385: EMPTY
27386: LIST
27387: LIST
27388: ST_TO_ADDR
27389: GO 27846
27391: LD_INT 92
27393: DOUBLE
27394: EQUAL
27395: IFTRUE 27399
27397: GO 27425
27399: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
27400: LD_ADDR_VAR 0 3
27404: PUSH
27405: LD_INT 11
27407: PUSH
27408: LD_INT 12
27410: PUSH
27411: LD_INT 13
27413: PUSH
27414: LD_INT 14
27416: PUSH
27417: EMPTY
27418: LIST
27419: LIST
27420: LIST
27421: LIST
27422: ST_TO_ADDR
27423: GO 27846
27425: LD_INT 28
27427: DOUBLE
27428: EQUAL
27429: IFTRUE 27433
27431: GO 27451
27433: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
27434: LD_ADDR_VAR 0 3
27438: PUSH
27439: LD_INT 13
27441: PUSH
27442: LD_INT 14
27444: PUSH
27445: EMPTY
27446: LIST
27447: LIST
27448: ST_TO_ADDR
27449: GO 27846
27451: LD_INT 29
27453: DOUBLE
27454: EQUAL
27455: IFTRUE 27459
27457: GO 27477
27459: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
27460: LD_ADDR_VAR 0 3
27464: PUSH
27465: LD_INT 13
27467: PUSH
27468: LD_INT 14
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: ST_TO_ADDR
27475: GO 27846
27477: LD_INT 31
27479: DOUBLE
27480: EQUAL
27481: IFTRUE 27485
27483: GO 27503
27485: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
27486: LD_ADDR_VAR 0 3
27490: PUSH
27491: LD_INT 13
27493: PUSH
27494: LD_INT 14
27496: PUSH
27497: EMPTY
27498: LIST
27499: LIST
27500: ST_TO_ADDR
27501: GO 27846
27503: LD_INT 26
27505: DOUBLE
27506: EQUAL
27507: IFTRUE 27511
27509: GO 27529
27511: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
27512: LD_ADDR_VAR 0 3
27516: PUSH
27517: LD_INT 13
27519: PUSH
27520: LD_INT 14
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: ST_TO_ADDR
27527: GO 27846
27529: LD_INT 42
27531: DOUBLE
27532: EQUAL
27533: IFTRUE 27537
27535: GO 27563
27537: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
27538: LD_ADDR_VAR 0 3
27542: PUSH
27543: LD_INT 21
27545: PUSH
27546: LD_INT 22
27548: PUSH
27549: LD_INT 23
27551: PUSH
27552: LD_INT 24
27554: PUSH
27555: EMPTY
27556: LIST
27557: LIST
27558: LIST
27559: LIST
27560: ST_TO_ADDR
27561: GO 27846
27563: LD_INT 43
27565: DOUBLE
27566: EQUAL
27567: IFTRUE 27571
27569: GO 27597
27571: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
27572: LD_ADDR_VAR 0 3
27576: PUSH
27577: LD_INT 21
27579: PUSH
27580: LD_INT 22
27582: PUSH
27583: LD_INT 23
27585: PUSH
27586: LD_INT 24
27588: PUSH
27589: EMPTY
27590: LIST
27591: LIST
27592: LIST
27593: LIST
27594: ST_TO_ADDR
27595: GO 27846
27597: LD_INT 44
27599: DOUBLE
27600: EQUAL
27601: IFTRUE 27605
27603: GO 27631
27605: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
27606: LD_ADDR_VAR 0 3
27610: PUSH
27611: LD_INT 21
27613: PUSH
27614: LD_INT 22
27616: PUSH
27617: LD_INT 23
27619: PUSH
27620: LD_INT 24
27622: PUSH
27623: EMPTY
27624: LIST
27625: LIST
27626: LIST
27627: LIST
27628: ST_TO_ADDR
27629: GO 27846
27631: LD_INT 45
27633: DOUBLE
27634: EQUAL
27635: IFTRUE 27639
27637: GO 27665
27639: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
27640: LD_ADDR_VAR 0 3
27644: PUSH
27645: LD_INT 21
27647: PUSH
27648: LD_INT 22
27650: PUSH
27651: LD_INT 23
27653: PUSH
27654: LD_INT 24
27656: PUSH
27657: EMPTY
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: ST_TO_ADDR
27663: GO 27846
27665: LD_INT 49
27667: DOUBLE
27668: EQUAL
27669: IFTRUE 27673
27671: GO 27699
27673: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
27674: LD_ADDR_VAR 0 3
27678: PUSH
27679: LD_INT 21
27681: PUSH
27682: LD_INT 22
27684: PUSH
27685: LD_INT 23
27687: PUSH
27688: LD_INT 24
27690: PUSH
27691: EMPTY
27692: LIST
27693: LIST
27694: LIST
27695: LIST
27696: ST_TO_ADDR
27697: GO 27846
27699: LD_INT 51
27701: DOUBLE
27702: EQUAL
27703: IFTRUE 27707
27705: GO 27733
27707: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
27708: LD_ADDR_VAR 0 3
27712: PUSH
27713: LD_INT 21
27715: PUSH
27716: LD_INT 22
27718: PUSH
27719: LD_INT 23
27721: PUSH
27722: LD_INT 24
27724: PUSH
27725: EMPTY
27726: LIST
27727: LIST
27728: LIST
27729: LIST
27730: ST_TO_ADDR
27731: GO 27846
27733: LD_INT 52
27735: DOUBLE
27736: EQUAL
27737: IFTRUE 27741
27739: GO 27767
27741: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
27742: LD_ADDR_VAR 0 3
27746: PUSH
27747: LD_INT 21
27749: PUSH
27750: LD_INT 22
27752: PUSH
27753: LD_INT 23
27755: PUSH
27756: LD_INT 24
27758: PUSH
27759: EMPTY
27760: LIST
27761: LIST
27762: LIST
27763: LIST
27764: ST_TO_ADDR
27765: GO 27846
27767: LD_INT 53
27769: DOUBLE
27770: EQUAL
27771: IFTRUE 27775
27773: GO 27793
27775: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
27776: LD_ADDR_VAR 0 3
27780: PUSH
27781: LD_INT 23
27783: PUSH
27784: LD_INT 24
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: ST_TO_ADDR
27791: GO 27846
27793: LD_INT 46
27795: DOUBLE
27796: EQUAL
27797: IFTRUE 27801
27799: GO 27819
27801: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
27802: LD_ADDR_VAR 0 3
27806: PUSH
27807: LD_INT 23
27809: PUSH
27810: LD_INT 24
27812: PUSH
27813: EMPTY
27814: LIST
27815: LIST
27816: ST_TO_ADDR
27817: GO 27846
27819: LD_INT 47
27821: DOUBLE
27822: EQUAL
27823: IFTRUE 27827
27825: GO 27845
27827: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27828: LD_ADDR_VAR 0 3
27832: PUSH
27833: LD_INT 23
27835: PUSH
27836: LD_INT 24
27838: PUSH
27839: EMPTY
27840: LIST
27841: LIST
27842: ST_TO_ADDR
27843: GO 27846
27845: POP
// result := ( chassis in result ) ;
27846: LD_ADDR_VAR 0 3
27850: PUSH
27851: LD_VAR 0 1
27855: PUSH
27856: LD_VAR 0 3
27860: IN
27861: ST_TO_ADDR
// end ;
27862: LD_VAR 0 3
27866: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
27867: LD_INT 0
27869: PPUSH
27870: PPUSH
27871: PPUSH
27872: PPUSH
27873: PPUSH
27874: PPUSH
27875: PPUSH
// result := array ;
27876: LD_ADDR_VAR 0 5
27880: PUSH
27881: LD_VAR 0 1
27885: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
27886: LD_VAR 0 1
27890: NOT
27891: PUSH
27892: LD_VAR 0 2
27896: NOT
27897: OR
27898: PUSH
27899: LD_VAR 0 3
27903: NOT
27904: OR
27905: PUSH
27906: LD_VAR 0 2
27910: PUSH
27911: LD_VAR 0 1
27915: GREATER
27916: OR
27917: PUSH
27918: LD_VAR 0 3
27922: PUSH
27923: LD_VAR 0 1
27927: GREATER
27928: OR
27929: IFFALSE 27933
// exit ;
27931: GO 28229
// if direction then
27933: LD_VAR 0 4
27937: IFFALSE 28001
// begin d := 1 ;
27939: LD_ADDR_VAR 0 9
27943: PUSH
27944: LD_INT 1
27946: ST_TO_ADDR
// if i_from > i_to then
27947: LD_VAR 0 2
27951: PUSH
27952: LD_VAR 0 3
27956: GREATER
27957: IFFALSE 27983
// length := ( array - i_from ) + i_to else
27959: LD_ADDR_VAR 0 11
27963: PUSH
27964: LD_VAR 0 1
27968: PUSH
27969: LD_VAR 0 2
27973: MINUS
27974: PUSH
27975: LD_VAR 0 3
27979: PLUS
27980: ST_TO_ADDR
27981: GO 27999
// length := i_to - i_from ;
27983: LD_ADDR_VAR 0 11
27987: PUSH
27988: LD_VAR 0 3
27992: PUSH
27993: LD_VAR 0 2
27997: MINUS
27998: ST_TO_ADDR
// end else
27999: GO 28062
// begin d := - 1 ;
28001: LD_ADDR_VAR 0 9
28005: PUSH
28006: LD_INT 1
28008: NEG
28009: ST_TO_ADDR
// if i_from > i_to then
28010: LD_VAR 0 2
28014: PUSH
28015: LD_VAR 0 3
28019: GREATER
28020: IFFALSE 28040
// length := i_from - i_to else
28022: LD_ADDR_VAR 0 11
28026: PUSH
28027: LD_VAR 0 2
28031: PUSH
28032: LD_VAR 0 3
28036: MINUS
28037: ST_TO_ADDR
28038: GO 28062
// length := ( array - i_to ) + i_from ;
28040: LD_ADDR_VAR 0 11
28044: PUSH
28045: LD_VAR 0 1
28049: PUSH
28050: LD_VAR 0 3
28054: MINUS
28055: PUSH
28056: LD_VAR 0 2
28060: PLUS
28061: ST_TO_ADDR
// end ; if not length then
28062: LD_VAR 0 11
28066: NOT
28067: IFFALSE 28071
// exit ;
28069: GO 28229
// tmp := array ;
28071: LD_ADDR_VAR 0 10
28075: PUSH
28076: LD_VAR 0 1
28080: ST_TO_ADDR
// for i = 1 to length do
28081: LD_ADDR_VAR 0 6
28085: PUSH
28086: DOUBLE
28087: LD_INT 1
28089: DEC
28090: ST_TO_ADDR
28091: LD_VAR 0 11
28095: PUSH
28096: FOR_TO
28097: IFFALSE 28217
// begin for j = 1 to array do
28099: LD_ADDR_VAR 0 7
28103: PUSH
28104: DOUBLE
28105: LD_INT 1
28107: DEC
28108: ST_TO_ADDR
28109: LD_VAR 0 1
28113: PUSH
28114: FOR_TO
28115: IFFALSE 28203
// begin k := j + d ;
28117: LD_ADDR_VAR 0 8
28121: PUSH
28122: LD_VAR 0 7
28126: PUSH
28127: LD_VAR 0 9
28131: PLUS
28132: ST_TO_ADDR
// if k > array then
28133: LD_VAR 0 8
28137: PUSH
28138: LD_VAR 0 1
28142: GREATER
28143: IFFALSE 28153
// k := 1 ;
28145: LD_ADDR_VAR 0 8
28149: PUSH
28150: LD_INT 1
28152: ST_TO_ADDR
// if not k then
28153: LD_VAR 0 8
28157: NOT
28158: IFFALSE 28170
// k := array ;
28160: LD_ADDR_VAR 0 8
28164: PUSH
28165: LD_VAR 0 1
28169: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
28170: LD_ADDR_VAR 0 10
28174: PUSH
28175: LD_VAR 0 10
28179: PPUSH
28180: LD_VAR 0 8
28184: PPUSH
28185: LD_VAR 0 1
28189: PUSH
28190: LD_VAR 0 7
28194: ARRAY
28195: PPUSH
28196: CALL_OW 1
28200: ST_TO_ADDR
// end ;
28201: GO 28114
28203: POP
28204: POP
// array := tmp ;
28205: LD_ADDR_VAR 0 1
28209: PUSH
28210: LD_VAR 0 10
28214: ST_TO_ADDR
// end ;
28215: GO 28096
28217: POP
28218: POP
// result := array ;
28219: LD_ADDR_VAR 0 5
28223: PUSH
28224: LD_VAR 0 1
28228: ST_TO_ADDR
// end ;
28229: LD_VAR 0 5
28233: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
28234: LD_INT 0
28236: PPUSH
28237: PPUSH
// result := 0 ;
28238: LD_ADDR_VAR 0 3
28242: PUSH
28243: LD_INT 0
28245: ST_TO_ADDR
// if not array or not value in array then
28246: LD_VAR 0 1
28250: NOT
28251: PUSH
28252: LD_VAR 0 2
28256: PUSH
28257: LD_VAR 0 1
28261: IN
28262: NOT
28263: OR
28264: IFFALSE 28268
// exit ;
28266: GO 28322
// for i = 1 to array do
28268: LD_ADDR_VAR 0 4
28272: PUSH
28273: DOUBLE
28274: LD_INT 1
28276: DEC
28277: ST_TO_ADDR
28278: LD_VAR 0 1
28282: PUSH
28283: FOR_TO
28284: IFFALSE 28320
// if value = array [ i ] then
28286: LD_VAR 0 2
28290: PUSH
28291: LD_VAR 0 1
28295: PUSH
28296: LD_VAR 0 4
28300: ARRAY
28301: EQUAL
28302: IFFALSE 28318
// begin result := i ;
28304: LD_ADDR_VAR 0 3
28308: PUSH
28309: LD_VAR 0 4
28313: ST_TO_ADDR
// exit ;
28314: POP
28315: POP
28316: GO 28322
// end ;
28318: GO 28283
28320: POP
28321: POP
// end ;
28322: LD_VAR 0 3
28326: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
28327: LD_INT 0
28329: PPUSH
// vc_chassis := chassis ;
28330: LD_ADDR_OWVAR 37
28334: PUSH
28335: LD_VAR 0 1
28339: ST_TO_ADDR
// vc_engine := engine ;
28340: LD_ADDR_OWVAR 39
28344: PUSH
28345: LD_VAR 0 2
28349: ST_TO_ADDR
// vc_control := control ;
28350: LD_ADDR_OWVAR 38
28354: PUSH
28355: LD_VAR 0 3
28359: ST_TO_ADDR
// vc_weapon := weapon ;
28360: LD_ADDR_OWVAR 40
28364: PUSH
28365: LD_VAR 0 4
28369: ST_TO_ADDR
// vc_fuel_battery := fuel ;
28370: LD_ADDR_OWVAR 41
28374: PUSH
28375: LD_VAR 0 5
28379: ST_TO_ADDR
// end ;
28380: LD_VAR 0 6
28384: RET
// export function WantPlant ( unit ) ; var task ; begin
28385: LD_INT 0
28387: PPUSH
28388: PPUSH
// result := false ;
28389: LD_ADDR_VAR 0 2
28393: PUSH
28394: LD_INT 0
28396: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
28397: LD_ADDR_VAR 0 3
28401: PUSH
28402: LD_VAR 0 1
28406: PPUSH
28407: CALL_OW 437
28411: ST_TO_ADDR
// if task then
28412: LD_VAR 0 3
28416: IFFALSE 28444
// if task [ 1 ] [ 1 ] = p then
28418: LD_VAR 0 3
28422: PUSH
28423: LD_INT 1
28425: ARRAY
28426: PUSH
28427: LD_INT 1
28429: ARRAY
28430: PUSH
28431: LD_STRING p
28433: EQUAL
28434: IFFALSE 28444
// result := true ;
28436: LD_ADDR_VAR 0 2
28440: PUSH
28441: LD_INT 1
28443: ST_TO_ADDR
// end ;
28444: LD_VAR 0 2
28448: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
28449: LD_INT 0
28451: PPUSH
28452: PPUSH
28453: PPUSH
28454: PPUSH
// if pos < 1 then
28455: LD_VAR 0 2
28459: PUSH
28460: LD_INT 1
28462: LESS
28463: IFFALSE 28467
// exit ;
28465: GO 28770
// if pos = 1 then
28467: LD_VAR 0 2
28471: PUSH
28472: LD_INT 1
28474: EQUAL
28475: IFFALSE 28508
// result := Replace ( arr , pos [ 1 ] , value ) else
28477: LD_ADDR_VAR 0 4
28481: PUSH
28482: LD_VAR 0 1
28486: PPUSH
28487: LD_VAR 0 2
28491: PUSH
28492: LD_INT 1
28494: ARRAY
28495: PPUSH
28496: LD_VAR 0 3
28500: PPUSH
28501: CALL_OW 1
28505: ST_TO_ADDR
28506: GO 28770
// begin tmp := arr ;
28508: LD_ADDR_VAR 0 6
28512: PUSH
28513: LD_VAR 0 1
28517: ST_TO_ADDR
// s_arr := [ tmp ] ;
28518: LD_ADDR_VAR 0 7
28522: PUSH
28523: LD_VAR 0 6
28527: PUSH
28528: EMPTY
28529: LIST
28530: ST_TO_ADDR
// for i = 1 to pos - 1 do
28531: LD_ADDR_VAR 0 5
28535: PUSH
28536: DOUBLE
28537: LD_INT 1
28539: DEC
28540: ST_TO_ADDR
28541: LD_VAR 0 2
28545: PUSH
28546: LD_INT 1
28548: MINUS
28549: PUSH
28550: FOR_TO
28551: IFFALSE 28596
// begin tmp := tmp [ pos [ i ] ] ;
28553: LD_ADDR_VAR 0 6
28557: PUSH
28558: LD_VAR 0 6
28562: PUSH
28563: LD_VAR 0 2
28567: PUSH
28568: LD_VAR 0 5
28572: ARRAY
28573: ARRAY
28574: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
28575: LD_ADDR_VAR 0 7
28579: PUSH
28580: LD_VAR 0 7
28584: PUSH
28585: LD_VAR 0 6
28589: PUSH
28590: EMPTY
28591: LIST
28592: ADD
28593: ST_TO_ADDR
// end ;
28594: GO 28550
28596: POP
28597: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
28598: LD_ADDR_VAR 0 6
28602: PUSH
28603: LD_VAR 0 6
28607: PPUSH
28608: LD_VAR 0 2
28612: PUSH
28613: LD_VAR 0 2
28617: ARRAY
28618: PPUSH
28619: LD_VAR 0 3
28623: PPUSH
28624: CALL_OW 1
28628: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
28629: LD_ADDR_VAR 0 7
28633: PUSH
28634: LD_VAR 0 7
28638: PPUSH
28639: LD_VAR 0 7
28643: PPUSH
28644: LD_VAR 0 6
28648: PPUSH
28649: CALL_OW 1
28653: ST_TO_ADDR
// for i = s_arr downto 2 do
28654: LD_ADDR_VAR 0 5
28658: PUSH
28659: DOUBLE
28660: LD_VAR 0 7
28664: INC
28665: ST_TO_ADDR
28666: LD_INT 2
28668: PUSH
28669: FOR_DOWNTO
28670: IFFALSE 28754
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
28672: LD_ADDR_VAR 0 6
28676: PUSH
28677: LD_VAR 0 7
28681: PUSH
28682: LD_VAR 0 5
28686: PUSH
28687: LD_INT 1
28689: MINUS
28690: ARRAY
28691: PPUSH
28692: LD_VAR 0 2
28696: PUSH
28697: LD_VAR 0 5
28701: PUSH
28702: LD_INT 1
28704: MINUS
28705: ARRAY
28706: PPUSH
28707: LD_VAR 0 7
28711: PUSH
28712: LD_VAR 0 5
28716: ARRAY
28717: PPUSH
28718: CALL_OW 1
28722: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
28723: LD_ADDR_VAR 0 7
28727: PUSH
28728: LD_VAR 0 7
28732: PPUSH
28733: LD_VAR 0 5
28737: PUSH
28738: LD_INT 1
28740: MINUS
28741: PPUSH
28742: LD_VAR 0 6
28746: PPUSH
28747: CALL_OW 1
28751: ST_TO_ADDR
// end ;
28752: GO 28669
28754: POP
28755: POP
// result := s_arr [ 1 ] ;
28756: LD_ADDR_VAR 0 4
28760: PUSH
28761: LD_VAR 0 7
28765: PUSH
28766: LD_INT 1
28768: ARRAY
28769: ST_TO_ADDR
// end ; end ;
28770: LD_VAR 0 4
28774: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
28775: LD_INT 0
28777: PPUSH
28778: PPUSH
// if not list then
28779: LD_VAR 0 1
28783: NOT
28784: IFFALSE 28788
// exit ;
28786: GO 28879
// i := list [ pos1 ] ;
28788: LD_ADDR_VAR 0 5
28792: PUSH
28793: LD_VAR 0 1
28797: PUSH
28798: LD_VAR 0 2
28802: ARRAY
28803: ST_TO_ADDR
// if not i then
28804: LD_VAR 0 5
28808: NOT
28809: IFFALSE 28813
// exit ;
28811: GO 28879
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
28813: LD_ADDR_VAR 0 1
28817: PUSH
28818: LD_VAR 0 1
28822: PPUSH
28823: LD_VAR 0 2
28827: PPUSH
28828: LD_VAR 0 1
28832: PUSH
28833: LD_VAR 0 3
28837: ARRAY
28838: PPUSH
28839: CALL_OW 1
28843: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
28844: LD_ADDR_VAR 0 1
28848: PUSH
28849: LD_VAR 0 1
28853: PPUSH
28854: LD_VAR 0 3
28858: PPUSH
28859: LD_VAR 0 5
28863: PPUSH
28864: CALL_OW 1
28868: ST_TO_ADDR
// result := list ;
28869: LD_ADDR_VAR 0 4
28873: PUSH
28874: LD_VAR 0 1
28878: ST_TO_ADDR
// end ;
28879: LD_VAR 0 4
28883: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
28884: LD_INT 0
28886: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
28887: LD_ADDR_VAR 0 5
28891: PUSH
28892: LD_VAR 0 1
28896: PPUSH
28897: CALL_OW 250
28901: PPUSH
28902: LD_VAR 0 1
28906: PPUSH
28907: CALL_OW 251
28911: PPUSH
28912: LD_VAR 0 2
28916: PPUSH
28917: LD_VAR 0 3
28921: PPUSH
28922: LD_VAR 0 4
28926: PPUSH
28927: CALL 28937 0 5
28931: ST_TO_ADDR
// end ;
28932: LD_VAR 0 5
28936: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
28937: LD_INT 0
28939: PPUSH
28940: PPUSH
28941: PPUSH
28942: PPUSH
// if not list then
28943: LD_VAR 0 3
28947: NOT
28948: IFFALSE 28952
// exit ;
28950: GO 29340
// result := [ ] ;
28952: LD_ADDR_VAR 0 6
28956: PUSH
28957: EMPTY
28958: ST_TO_ADDR
// for i in list do
28959: LD_ADDR_VAR 0 7
28963: PUSH
28964: LD_VAR 0 3
28968: PUSH
28969: FOR_IN
28970: IFFALSE 29172
// begin tmp := GetDistUnitXY ( i , x , y ) ;
28972: LD_ADDR_VAR 0 9
28976: PUSH
28977: LD_VAR 0 7
28981: PPUSH
28982: LD_VAR 0 1
28986: PPUSH
28987: LD_VAR 0 2
28991: PPUSH
28992: CALL_OW 297
28996: ST_TO_ADDR
// if not result then
28997: LD_VAR 0 6
29001: NOT
29002: IFFALSE 29028
// result := [ [ i , tmp ] ] else
29004: LD_ADDR_VAR 0 6
29008: PUSH
29009: LD_VAR 0 7
29013: PUSH
29014: LD_VAR 0 9
29018: PUSH
29019: EMPTY
29020: LIST
29021: LIST
29022: PUSH
29023: EMPTY
29024: LIST
29025: ST_TO_ADDR
29026: GO 29170
// begin if result [ result ] [ 2 ] < tmp then
29028: LD_VAR 0 6
29032: PUSH
29033: LD_VAR 0 6
29037: ARRAY
29038: PUSH
29039: LD_INT 2
29041: ARRAY
29042: PUSH
29043: LD_VAR 0 9
29047: LESS
29048: IFFALSE 29090
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
29050: LD_ADDR_VAR 0 6
29054: PUSH
29055: LD_VAR 0 6
29059: PPUSH
29060: LD_VAR 0 6
29064: PUSH
29065: LD_INT 1
29067: PLUS
29068: PPUSH
29069: LD_VAR 0 7
29073: PUSH
29074: LD_VAR 0 9
29078: PUSH
29079: EMPTY
29080: LIST
29081: LIST
29082: PPUSH
29083: CALL_OW 2
29087: ST_TO_ADDR
29088: GO 29170
// for j = 1 to result do
29090: LD_ADDR_VAR 0 8
29094: PUSH
29095: DOUBLE
29096: LD_INT 1
29098: DEC
29099: ST_TO_ADDR
29100: LD_VAR 0 6
29104: PUSH
29105: FOR_TO
29106: IFFALSE 29168
// begin if tmp < result [ j ] [ 2 ] then
29108: LD_VAR 0 9
29112: PUSH
29113: LD_VAR 0 6
29117: PUSH
29118: LD_VAR 0 8
29122: ARRAY
29123: PUSH
29124: LD_INT 2
29126: ARRAY
29127: LESS
29128: IFFALSE 29166
// begin result := Insert ( result , j , [ i , tmp ] ) ;
29130: LD_ADDR_VAR 0 6
29134: PUSH
29135: LD_VAR 0 6
29139: PPUSH
29140: LD_VAR 0 8
29144: PPUSH
29145: LD_VAR 0 7
29149: PUSH
29150: LD_VAR 0 9
29154: PUSH
29155: EMPTY
29156: LIST
29157: LIST
29158: PPUSH
29159: CALL_OW 2
29163: ST_TO_ADDR
// break ;
29164: GO 29168
// end ; end ;
29166: GO 29105
29168: POP
29169: POP
// end ; end ;
29170: GO 28969
29172: POP
29173: POP
// if result and not asc then
29174: LD_VAR 0 6
29178: PUSH
29179: LD_VAR 0 4
29183: NOT
29184: AND
29185: IFFALSE 29260
// begin tmp := result ;
29187: LD_ADDR_VAR 0 9
29191: PUSH
29192: LD_VAR 0 6
29196: ST_TO_ADDR
// for i = tmp downto 1 do
29197: LD_ADDR_VAR 0 7
29201: PUSH
29202: DOUBLE
29203: LD_VAR 0 9
29207: INC
29208: ST_TO_ADDR
29209: LD_INT 1
29211: PUSH
29212: FOR_DOWNTO
29213: IFFALSE 29258
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
29215: LD_ADDR_VAR 0 6
29219: PUSH
29220: LD_VAR 0 6
29224: PPUSH
29225: LD_VAR 0 9
29229: PUSH
29230: LD_VAR 0 7
29234: MINUS
29235: PUSH
29236: LD_INT 1
29238: PLUS
29239: PPUSH
29240: LD_VAR 0 9
29244: PUSH
29245: LD_VAR 0 7
29249: ARRAY
29250: PPUSH
29251: CALL_OW 1
29255: ST_TO_ADDR
29256: GO 29212
29258: POP
29259: POP
// end ; tmp := [ ] ;
29260: LD_ADDR_VAR 0 9
29264: PUSH
29265: EMPTY
29266: ST_TO_ADDR
// if mode then
29267: LD_VAR 0 5
29271: IFFALSE 29340
// begin for i = 1 to result do
29273: LD_ADDR_VAR 0 7
29277: PUSH
29278: DOUBLE
29279: LD_INT 1
29281: DEC
29282: ST_TO_ADDR
29283: LD_VAR 0 6
29287: PUSH
29288: FOR_TO
29289: IFFALSE 29328
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
29291: LD_ADDR_VAR 0 9
29295: PUSH
29296: LD_VAR 0 9
29300: PPUSH
29301: LD_VAR 0 7
29305: PPUSH
29306: LD_VAR 0 6
29310: PUSH
29311: LD_VAR 0 7
29315: ARRAY
29316: PUSH
29317: LD_INT 1
29319: ARRAY
29320: PPUSH
29321: CALL_OW 1
29325: ST_TO_ADDR
29326: GO 29288
29328: POP
29329: POP
// result := tmp ;
29330: LD_ADDR_VAR 0 6
29334: PUSH
29335: LD_VAR 0 9
29339: ST_TO_ADDR
// end ; end ;
29340: LD_VAR 0 6
29344: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
29345: LD_INT 0
29347: PPUSH
29348: PPUSH
29349: PPUSH
29350: PPUSH
29351: PPUSH
29352: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
29353: LD_ADDR_VAR 0 5
29357: PUSH
29358: LD_INT 0
29360: PUSH
29361: LD_INT 0
29363: PUSH
29364: LD_INT 0
29366: PUSH
29367: EMPTY
29368: PUSH
29369: EMPTY
29370: LIST
29371: LIST
29372: LIST
29373: LIST
29374: ST_TO_ADDR
// if not x or not y then
29375: LD_VAR 0 2
29379: NOT
29380: PUSH
29381: LD_VAR 0 3
29385: NOT
29386: OR
29387: IFFALSE 29391
// exit ;
29389: GO 31041
// if not range then
29391: LD_VAR 0 4
29395: NOT
29396: IFFALSE 29406
// range := 10 ;
29398: LD_ADDR_VAR 0 4
29402: PUSH
29403: LD_INT 10
29405: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29406: LD_ADDR_VAR 0 8
29410: PUSH
29411: LD_INT 81
29413: PUSH
29414: LD_VAR 0 1
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: PUSH
29423: LD_INT 92
29425: PUSH
29426: LD_VAR 0 2
29430: PUSH
29431: LD_VAR 0 3
29435: PUSH
29436: LD_VAR 0 4
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: LIST
29445: LIST
29446: PUSH
29447: LD_INT 3
29449: PUSH
29450: LD_INT 21
29452: PUSH
29453: LD_INT 3
29455: PUSH
29456: EMPTY
29457: LIST
29458: LIST
29459: PUSH
29460: EMPTY
29461: LIST
29462: LIST
29463: PUSH
29464: EMPTY
29465: LIST
29466: LIST
29467: LIST
29468: PPUSH
29469: CALL_OW 69
29473: ST_TO_ADDR
// if not tmp then
29474: LD_VAR 0 8
29478: NOT
29479: IFFALSE 29483
// exit ;
29481: GO 31041
// for i in tmp do
29483: LD_ADDR_VAR 0 6
29487: PUSH
29488: LD_VAR 0 8
29492: PUSH
29493: FOR_IN
29494: IFFALSE 31016
// begin points := [ 0 , 0 , 0 ] ;
29496: LD_ADDR_VAR 0 9
29500: PUSH
29501: LD_INT 0
29503: PUSH
29504: LD_INT 0
29506: PUSH
29507: LD_INT 0
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: LIST
29514: ST_TO_ADDR
// bpoints := 1 ;
29515: LD_ADDR_VAR 0 10
29519: PUSH
29520: LD_INT 1
29522: ST_TO_ADDR
// case GetType ( i ) of unit_human :
29523: LD_VAR 0 6
29527: PPUSH
29528: CALL_OW 247
29532: PUSH
29533: LD_INT 1
29535: DOUBLE
29536: EQUAL
29537: IFTRUE 29541
29539: GO 30119
29541: POP
// begin if GetClass ( i ) = 1 then
29542: LD_VAR 0 6
29546: PPUSH
29547: CALL_OW 257
29551: PUSH
29552: LD_INT 1
29554: EQUAL
29555: IFFALSE 29576
// points := [ 10 , 5 , 3 ] ;
29557: LD_ADDR_VAR 0 9
29561: PUSH
29562: LD_INT 10
29564: PUSH
29565: LD_INT 5
29567: PUSH
29568: LD_INT 3
29570: PUSH
29571: EMPTY
29572: LIST
29573: LIST
29574: LIST
29575: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
29576: LD_VAR 0 6
29580: PPUSH
29581: CALL_OW 257
29585: PUSH
29586: LD_INT 2
29588: PUSH
29589: LD_INT 3
29591: PUSH
29592: LD_INT 4
29594: PUSH
29595: EMPTY
29596: LIST
29597: LIST
29598: LIST
29599: IN
29600: IFFALSE 29621
// points := [ 3 , 2 , 1 ] ;
29602: LD_ADDR_VAR 0 9
29606: PUSH
29607: LD_INT 3
29609: PUSH
29610: LD_INT 2
29612: PUSH
29613: LD_INT 1
29615: PUSH
29616: EMPTY
29617: LIST
29618: LIST
29619: LIST
29620: ST_TO_ADDR
// if GetClass ( i ) = 5 then
29621: LD_VAR 0 6
29625: PPUSH
29626: CALL_OW 257
29630: PUSH
29631: LD_INT 5
29633: EQUAL
29634: IFFALSE 29655
// points := [ 130 , 5 , 2 ] ;
29636: LD_ADDR_VAR 0 9
29640: PUSH
29641: LD_INT 130
29643: PUSH
29644: LD_INT 5
29646: PUSH
29647: LD_INT 2
29649: PUSH
29650: EMPTY
29651: LIST
29652: LIST
29653: LIST
29654: ST_TO_ADDR
// if GetClass ( i ) = 8 then
29655: LD_VAR 0 6
29659: PPUSH
29660: CALL_OW 257
29664: PUSH
29665: LD_INT 8
29667: EQUAL
29668: IFFALSE 29689
// points := [ 35 , 35 , 30 ] ;
29670: LD_ADDR_VAR 0 9
29674: PUSH
29675: LD_INT 35
29677: PUSH
29678: LD_INT 35
29680: PUSH
29681: LD_INT 30
29683: PUSH
29684: EMPTY
29685: LIST
29686: LIST
29687: LIST
29688: ST_TO_ADDR
// if GetClass ( i ) = 9 then
29689: LD_VAR 0 6
29693: PPUSH
29694: CALL_OW 257
29698: PUSH
29699: LD_INT 9
29701: EQUAL
29702: IFFALSE 29723
// points := [ 20 , 55 , 40 ] ;
29704: LD_ADDR_VAR 0 9
29708: PUSH
29709: LD_INT 20
29711: PUSH
29712: LD_INT 55
29714: PUSH
29715: LD_INT 40
29717: PUSH
29718: EMPTY
29719: LIST
29720: LIST
29721: LIST
29722: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
29723: LD_VAR 0 6
29727: PPUSH
29728: CALL_OW 257
29732: PUSH
29733: LD_INT 12
29735: PUSH
29736: LD_INT 16
29738: PUSH
29739: EMPTY
29740: LIST
29741: LIST
29742: IN
29743: IFFALSE 29764
// points := [ 5 , 3 , 2 ] ;
29745: LD_ADDR_VAR 0 9
29749: PUSH
29750: LD_INT 5
29752: PUSH
29753: LD_INT 3
29755: PUSH
29756: LD_INT 2
29758: PUSH
29759: EMPTY
29760: LIST
29761: LIST
29762: LIST
29763: ST_TO_ADDR
// if GetClass ( i ) = 17 then
29764: LD_VAR 0 6
29768: PPUSH
29769: CALL_OW 257
29773: PUSH
29774: LD_INT 17
29776: EQUAL
29777: IFFALSE 29798
// points := [ 100 , 50 , 75 ] ;
29779: LD_ADDR_VAR 0 9
29783: PUSH
29784: LD_INT 100
29786: PUSH
29787: LD_INT 50
29789: PUSH
29790: LD_INT 75
29792: PUSH
29793: EMPTY
29794: LIST
29795: LIST
29796: LIST
29797: ST_TO_ADDR
// if GetClass ( i ) = 15 then
29798: LD_VAR 0 6
29802: PPUSH
29803: CALL_OW 257
29807: PUSH
29808: LD_INT 15
29810: EQUAL
29811: IFFALSE 29832
// points := [ 10 , 5 , 3 ] ;
29813: LD_ADDR_VAR 0 9
29817: PUSH
29818: LD_INT 10
29820: PUSH
29821: LD_INT 5
29823: PUSH
29824: LD_INT 3
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: LIST
29831: ST_TO_ADDR
// if GetClass ( i ) = 14 then
29832: LD_VAR 0 6
29836: PPUSH
29837: CALL_OW 257
29841: PUSH
29842: LD_INT 14
29844: EQUAL
29845: IFFALSE 29866
// points := [ 10 , 0 , 0 ] ;
29847: LD_ADDR_VAR 0 9
29851: PUSH
29852: LD_INT 10
29854: PUSH
29855: LD_INT 0
29857: PUSH
29858: LD_INT 0
29860: PUSH
29861: EMPTY
29862: LIST
29863: LIST
29864: LIST
29865: ST_TO_ADDR
// if GetClass ( i ) = 11 then
29866: LD_VAR 0 6
29870: PPUSH
29871: CALL_OW 257
29875: PUSH
29876: LD_INT 11
29878: EQUAL
29879: IFFALSE 29900
// points := [ 30 , 10 , 5 ] ;
29881: LD_ADDR_VAR 0 9
29885: PUSH
29886: LD_INT 30
29888: PUSH
29889: LD_INT 10
29891: PUSH
29892: LD_INT 5
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: LIST
29899: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
29900: LD_VAR 0 1
29904: PPUSH
29905: LD_INT 5
29907: PPUSH
29908: CALL_OW 321
29912: PUSH
29913: LD_INT 2
29915: EQUAL
29916: IFFALSE 29933
// bpoints := bpoints * 1.8 ;
29918: LD_ADDR_VAR 0 10
29922: PUSH
29923: LD_VAR 0 10
29927: PUSH
29928: LD_REAL  1.80000000000000E+0000
29931: MUL
29932: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
29933: LD_VAR 0 6
29937: PPUSH
29938: CALL_OW 257
29942: PUSH
29943: LD_INT 1
29945: PUSH
29946: LD_INT 2
29948: PUSH
29949: LD_INT 3
29951: PUSH
29952: LD_INT 4
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: LIST
29959: LIST
29960: IN
29961: PUSH
29962: LD_VAR 0 1
29966: PPUSH
29967: LD_INT 51
29969: PPUSH
29970: CALL_OW 321
29974: PUSH
29975: LD_INT 2
29977: EQUAL
29978: AND
29979: IFFALSE 29996
// bpoints := bpoints * 1.2 ;
29981: LD_ADDR_VAR 0 10
29985: PUSH
29986: LD_VAR 0 10
29990: PUSH
29991: LD_REAL  1.20000000000000E+0000
29994: MUL
29995: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
29996: LD_VAR 0 6
30000: PPUSH
30001: CALL_OW 257
30005: PUSH
30006: LD_INT 5
30008: PUSH
30009: LD_INT 7
30011: PUSH
30012: LD_INT 9
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: LIST
30019: IN
30020: PUSH
30021: LD_VAR 0 1
30025: PPUSH
30026: LD_INT 52
30028: PPUSH
30029: CALL_OW 321
30033: PUSH
30034: LD_INT 2
30036: EQUAL
30037: AND
30038: IFFALSE 30055
// bpoints := bpoints * 1.5 ;
30040: LD_ADDR_VAR 0 10
30044: PUSH
30045: LD_VAR 0 10
30049: PUSH
30050: LD_REAL  1.50000000000000E+0000
30053: MUL
30054: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
30055: LD_VAR 0 1
30059: PPUSH
30060: LD_INT 66
30062: PPUSH
30063: CALL_OW 321
30067: PUSH
30068: LD_INT 2
30070: EQUAL
30071: IFFALSE 30088
// bpoints := bpoints * 1.1 ;
30073: LD_ADDR_VAR 0 10
30077: PUSH
30078: LD_VAR 0 10
30082: PUSH
30083: LD_REAL  1.10000000000000E+0000
30086: MUL
30087: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
30088: LD_ADDR_VAR 0 10
30092: PUSH
30093: LD_VAR 0 10
30097: PUSH
30098: LD_VAR 0 6
30102: PPUSH
30103: LD_INT 1
30105: PPUSH
30106: CALL_OW 259
30110: PUSH
30111: LD_REAL  1.15000000000000E+0000
30114: MUL
30115: MUL
30116: ST_TO_ADDR
// end ; unit_vehicle :
30117: GO 30945
30119: LD_INT 2
30121: DOUBLE
30122: EQUAL
30123: IFTRUE 30127
30125: GO 30933
30127: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
30128: LD_VAR 0 6
30132: PPUSH
30133: CALL_OW 264
30137: PUSH
30138: LD_INT 2
30140: PUSH
30141: LD_INT 42
30143: PUSH
30144: LD_INT 24
30146: PUSH
30147: EMPTY
30148: LIST
30149: LIST
30150: LIST
30151: IN
30152: IFFALSE 30173
// points := [ 25 , 5 , 3 ] ;
30154: LD_ADDR_VAR 0 9
30158: PUSH
30159: LD_INT 25
30161: PUSH
30162: LD_INT 5
30164: PUSH
30165: LD_INT 3
30167: PUSH
30168: EMPTY
30169: LIST
30170: LIST
30171: LIST
30172: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
30173: LD_VAR 0 6
30177: PPUSH
30178: CALL_OW 264
30182: PUSH
30183: LD_INT 4
30185: PUSH
30186: LD_INT 43
30188: PUSH
30189: LD_INT 25
30191: PUSH
30192: EMPTY
30193: LIST
30194: LIST
30195: LIST
30196: IN
30197: IFFALSE 30218
// points := [ 40 , 15 , 5 ] ;
30199: LD_ADDR_VAR 0 9
30203: PUSH
30204: LD_INT 40
30206: PUSH
30207: LD_INT 15
30209: PUSH
30210: LD_INT 5
30212: PUSH
30213: EMPTY
30214: LIST
30215: LIST
30216: LIST
30217: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
30218: LD_VAR 0 6
30222: PPUSH
30223: CALL_OW 264
30227: PUSH
30228: LD_INT 3
30230: PUSH
30231: LD_INT 23
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: IN
30238: IFFALSE 30259
// points := [ 7 , 25 , 8 ] ;
30240: LD_ADDR_VAR 0 9
30244: PUSH
30245: LD_INT 7
30247: PUSH
30248: LD_INT 25
30250: PUSH
30251: LD_INT 8
30253: PUSH
30254: EMPTY
30255: LIST
30256: LIST
30257: LIST
30258: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
30259: LD_VAR 0 6
30263: PPUSH
30264: CALL_OW 264
30268: PUSH
30269: LD_INT 5
30271: PUSH
30272: LD_INT 27
30274: PUSH
30275: LD_INT 44
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: LIST
30282: IN
30283: IFFALSE 30304
// points := [ 14 , 50 , 16 ] ;
30285: LD_ADDR_VAR 0 9
30289: PUSH
30290: LD_INT 14
30292: PUSH
30293: LD_INT 50
30295: PUSH
30296: LD_INT 16
30298: PUSH
30299: EMPTY
30300: LIST
30301: LIST
30302: LIST
30303: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
30304: LD_VAR 0 6
30308: PPUSH
30309: CALL_OW 264
30313: PUSH
30314: LD_INT 6
30316: PUSH
30317: LD_INT 46
30319: PUSH
30320: EMPTY
30321: LIST
30322: LIST
30323: IN
30324: IFFALSE 30345
// points := [ 32 , 120 , 70 ] ;
30326: LD_ADDR_VAR 0 9
30330: PUSH
30331: LD_INT 32
30333: PUSH
30334: LD_INT 120
30336: PUSH
30337: LD_INT 70
30339: PUSH
30340: EMPTY
30341: LIST
30342: LIST
30343: LIST
30344: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
30345: LD_VAR 0 6
30349: PPUSH
30350: CALL_OW 264
30354: PUSH
30355: LD_INT 7
30357: PUSH
30358: LD_INT 28
30360: PUSH
30361: LD_INT 45
30363: PUSH
30364: LD_INT 92
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: LIST
30371: LIST
30372: IN
30373: IFFALSE 30394
// points := [ 35 , 20 , 45 ] ;
30375: LD_ADDR_VAR 0 9
30379: PUSH
30380: LD_INT 35
30382: PUSH
30383: LD_INT 20
30385: PUSH
30386: LD_INT 45
30388: PUSH
30389: EMPTY
30390: LIST
30391: LIST
30392: LIST
30393: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
30394: LD_VAR 0 6
30398: PPUSH
30399: CALL_OW 264
30403: PUSH
30404: LD_INT 47
30406: PUSH
30407: EMPTY
30408: LIST
30409: IN
30410: IFFALSE 30431
// points := [ 67 , 45 , 75 ] ;
30412: LD_ADDR_VAR 0 9
30416: PUSH
30417: LD_INT 67
30419: PUSH
30420: LD_INT 45
30422: PUSH
30423: LD_INT 75
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: LIST
30430: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
30431: LD_VAR 0 6
30435: PPUSH
30436: CALL_OW 264
30440: PUSH
30441: LD_INT 26
30443: PUSH
30444: EMPTY
30445: LIST
30446: IN
30447: IFFALSE 30468
// points := [ 120 , 30 , 80 ] ;
30449: LD_ADDR_VAR 0 9
30453: PUSH
30454: LD_INT 120
30456: PUSH
30457: LD_INT 30
30459: PUSH
30460: LD_INT 80
30462: PUSH
30463: EMPTY
30464: LIST
30465: LIST
30466: LIST
30467: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
30468: LD_VAR 0 6
30472: PPUSH
30473: CALL_OW 264
30477: PUSH
30478: LD_INT 22
30480: PUSH
30481: EMPTY
30482: LIST
30483: IN
30484: IFFALSE 30505
// points := [ 40 , 1 , 1 ] ;
30486: LD_ADDR_VAR 0 9
30490: PUSH
30491: LD_INT 40
30493: PUSH
30494: LD_INT 1
30496: PUSH
30497: LD_INT 1
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: LIST
30504: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
30505: LD_VAR 0 6
30509: PPUSH
30510: CALL_OW 264
30514: PUSH
30515: LD_INT 29
30517: PUSH
30518: EMPTY
30519: LIST
30520: IN
30521: IFFALSE 30542
// points := [ 70 , 200 , 400 ] ;
30523: LD_ADDR_VAR 0 9
30527: PUSH
30528: LD_INT 70
30530: PUSH
30531: LD_INT 200
30533: PUSH
30534: LD_INT 400
30536: PUSH
30537: EMPTY
30538: LIST
30539: LIST
30540: LIST
30541: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
30542: LD_VAR 0 6
30546: PPUSH
30547: CALL_OW 264
30551: PUSH
30552: LD_INT 14
30554: PUSH
30555: LD_INT 53
30557: PUSH
30558: EMPTY
30559: LIST
30560: LIST
30561: IN
30562: IFFALSE 30583
// points := [ 40 , 10 , 20 ] ;
30564: LD_ADDR_VAR 0 9
30568: PUSH
30569: LD_INT 40
30571: PUSH
30572: LD_INT 10
30574: PUSH
30575: LD_INT 20
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: LIST
30582: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
30583: LD_VAR 0 6
30587: PPUSH
30588: CALL_OW 264
30592: PUSH
30593: LD_INT 9
30595: PUSH
30596: EMPTY
30597: LIST
30598: IN
30599: IFFALSE 30620
// points := [ 5 , 70 , 20 ] ;
30601: LD_ADDR_VAR 0 9
30605: PUSH
30606: LD_INT 5
30608: PUSH
30609: LD_INT 70
30611: PUSH
30612: LD_INT 20
30614: PUSH
30615: EMPTY
30616: LIST
30617: LIST
30618: LIST
30619: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
30620: LD_VAR 0 6
30624: PPUSH
30625: CALL_OW 264
30629: PUSH
30630: LD_INT 10
30632: PUSH
30633: EMPTY
30634: LIST
30635: IN
30636: IFFALSE 30657
// points := [ 35 , 110 , 70 ] ;
30638: LD_ADDR_VAR 0 9
30642: PUSH
30643: LD_INT 35
30645: PUSH
30646: LD_INT 110
30648: PUSH
30649: LD_INT 70
30651: PUSH
30652: EMPTY
30653: LIST
30654: LIST
30655: LIST
30656: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
30657: LD_VAR 0 6
30661: PPUSH
30662: CALL_OW 265
30666: PUSH
30667: LD_INT 25
30669: EQUAL
30670: IFFALSE 30691
// points := [ 80 , 65 , 100 ] ;
30672: LD_ADDR_VAR 0 9
30676: PUSH
30677: LD_INT 80
30679: PUSH
30680: LD_INT 65
30682: PUSH
30683: LD_INT 100
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: LIST
30690: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
30691: LD_VAR 0 6
30695: PPUSH
30696: CALL_OW 263
30700: PUSH
30701: LD_INT 1
30703: EQUAL
30704: IFFALSE 30739
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
30706: LD_ADDR_VAR 0 10
30710: PUSH
30711: LD_VAR 0 10
30715: PUSH
30716: LD_VAR 0 6
30720: PPUSH
30721: CALL_OW 311
30725: PPUSH
30726: LD_INT 3
30728: PPUSH
30729: CALL_OW 259
30733: PUSH
30734: LD_INT 4
30736: MUL
30737: MUL
30738: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
30739: LD_VAR 0 6
30743: PPUSH
30744: CALL_OW 263
30748: PUSH
30749: LD_INT 2
30751: EQUAL
30752: IFFALSE 30803
// begin j := IsControledBy ( i ) ;
30754: LD_ADDR_VAR 0 7
30758: PUSH
30759: LD_VAR 0 6
30763: PPUSH
30764: CALL_OW 312
30768: ST_TO_ADDR
// if j then
30769: LD_VAR 0 7
30773: IFFALSE 30803
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
30775: LD_ADDR_VAR 0 10
30779: PUSH
30780: LD_VAR 0 10
30784: PUSH
30785: LD_VAR 0 7
30789: PPUSH
30790: LD_INT 3
30792: PPUSH
30793: CALL_OW 259
30797: PUSH
30798: LD_INT 3
30800: MUL
30801: MUL
30802: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
30803: LD_VAR 0 6
30807: PPUSH
30808: CALL_OW 264
30812: PUSH
30813: LD_INT 5
30815: PUSH
30816: LD_INT 6
30818: PUSH
30819: LD_INT 46
30821: PUSH
30822: LD_INT 44
30824: PUSH
30825: LD_INT 47
30827: PUSH
30828: LD_INT 45
30830: PUSH
30831: LD_INT 28
30833: PUSH
30834: LD_INT 7
30836: PUSH
30837: LD_INT 27
30839: PUSH
30840: LD_INT 29
30842: PUSH
30843: EMPTY
30844: LIST
30845: LIST
30846: LIST
30847: LIST
30848: LIST
30849: LIST
30850: LIST
30851: LIST
30852: LIST
30853: LIST
30854: IN
30855: PUSH
30856: LD_VAR 0 1
30860: PPUSH
30861: LD_INT 52
30863: PPUSH
30864: CALL_OW 321
30868: PUSH
30869: LD_INT 2
30871: EQUAL
30872: AND
30873: IFFALSE 30890
// bpoints := bpoints * 1.2 ;
30875: LD_ADDR_VAR 0 10
30879: PUSH
30880: LD_VAR 0 10
30884: PUSH
30885: LD_REAL  1.20000000000000E+0000
30888: MUL
30889: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
30890: LD_VAR 0 6
30894: PPUSH
30895: CALL_OW 264
30899: PUSH
30900: LD_INT 6
30902: PUSH
30903: LD_INT 46
30905: PUSH
30906: LD_INT 47
30908: PUSH
30909: EMPTY
30910: LIST
30911: LIST
30912: LIST
30913: IN
30914: IFFALSE 30931
// bpoints := bpoints * 1.2 ;
30916: LD_ADDR_VAR 0 10
30920: PUSH
30921: LD_VAR 0 10
30925: PUSH
30926: LD_REAL  1.20000000000000E+0000
30929: MUL
30930: ST_TO_ADDR
// end ; unit_building :
30931: GO 30945
30933: LD_INT 3
30935: DOUBLE
30936: EQUAL
30937: IFTRUE 30941
30939: GO 30944
30941: POP
// ; end ;
30942: GO 30945
30944: POP
// for j = 1 to 3 do
30945: LD_ADDR_VAR 0 7
30949: PUSH
30950: DOUBLE
30951: LD_INT 1
30953: DEC
30954: ST_TO_ADDR
30955: LD_INT 3
30957: PUSH
30958: FOR_TO
30959: IFFALSE 31012
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
30961: LD_ADDR_VAR 0 5
30965: PUSH
30966: LD_VAR 0 5
30970: PPUSH
30971: LD_VAR 0 7
30975: PPUSH
30976: LD_VAR 0 5
30980: PUSH
30981: LD_VAR 0 7
30985: ARRAY
30986: PUSH
30987: LD_VAR 0 9
30991: PUSH
30992: LD_VAR 0 7
30996: ARRAY
30997: PUSH
30998: LD_VAR 0 10
31002: MUL
31003: PLUS
31004: PPUSH
31005: CALL_OW 1
31009: ST_TO_ADDR
31010: GO 30958
31012: POP
31013: POP
// end ;
31014: GO 29493
31016: POP
31017: POP
// result := Replace ( result , 4 , tmp ) ;
31018: LD_ADDR_VAR 0 5
31022: PUSH
31023: LD_VAR 0 5
31027: PPUSH
31028: LD_INT 4
31030: PPUSH
31031: LD_VAR 0 8
31035: PPUSH
31036: CALL_OW 1
31040: ST_TO_ADDR
// end ;
31041: LD_VAR 0 5
31045: RET
// export function DangerAtRange ( unit , range ) ; begin
31046: LD_INT 0
31048: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
31049: LD_ADDR_VAR 0 3
31053: PUSH
31054: LD_VAR 0 1
31058: PPUSH
31059: CALL_OW 255
31063: PPUSH
31064: LD_VAR 0 1
31068: PPUSH
31069: CALL_OW 250
31073: PPUSH
31074: LD_VAR 0 1
31078: PPUSH
31079: CALL_OW 251
31083: PPUSH
31084: LD_VAR 0 2
31088: PPUSH
31089: CALL 29345 0 4
31093: ST_TO_ADDR
// end ;
31094: LD_VAR 0 3
31098: RET
// export function DangerInArea ( side , area ) ; begin
31099: LD_INT 0
31101: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
31102: LD_ADDR_VAR 0 3
31106: PUSH
31107: LD_VAR 0 2
31111: PPUSH
31112: LD_INT 81
31114: PUSH
31115: LD_VAR 0 1
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: PPUSH
31124: CALL_OW 70
31128: ST_TO_ADDR
// end ;
31129: LD_VAR 0 3
31133: RET
// export function IsExtension ( b ) ; begin
31134: LD_INT 0
31136: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
31137: LD_ADDR_VAR 0 2
31141: PUSH
31142: LD_VAR 0 1
31146: PUSH
31147: LD_INT 23
31149: PUSH
31150: LD_INT 20
31152: PUSH
31153: LD_INT 22
31155: PUSH
31156: LD_INT 17
31158: PUSH
31159: LD_INT 24
31161: PUSH
31162: LD_INT 21
31164: PUSH
31165: LD_INT 19
31167: PUSH
31168: LD_INT 16
31170: PUSH
31171: LD_INT 25
31173: PUSH
31174: LD_INT 18
31176: PUSH
31177: EMPTY
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: LIST
31185: LIST
31186: LIST
31187: LIST
31188: IN
31189: ST_TO_ADDR
// end ;
31190: LD_VAR 0 2
31194: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
31195: LD_INT 0
31197: PPUSH
31198: PPUSH
31199: PPUSH
// result := [ ] ;
31200: LD_ADDR_VAR 0 4
31204: PUSH
31205: EMPTY
31206: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
31207: LD_ADDR_VAR 0 5
31211: PUSH
31212: LD_VAR 0 2
31216: PPUSH
31217: LD_INT 21
31219: PUSH
31220: LD_INT 3
31222: PUSH
31223: EMPTY
31224: LIST
31225: LIST
31226: PPUSH
31227: CALL_OW 70
31231: ST_TO_ADDR
// if not tmp then
31232: LD_VAR 0 5
31236: NOT
31237: IFFALSE 31241
// exit ;
31239: GO 31305
// if checkLink then
31241: LD_VAR 0 3
31245: IFFALSE 31295
// begin for i in tmp do
31247: LD_ADDR_VAR 0 6
31251: PUSH
31252: LD_VAR 0 5
31256: PUSH
31257: FOR_IN
31258: IFFALSE 31293
// if GetBase ( i ) <> base then
31260: LD_VAR 0 6
31264: PPUSH
31265: CALL_OW 274
31269: PUSH
31270: LD_VAR 0 1
31274: NONEQUAL
31275: IFFALSE 31291
// ComLinkToBase ( base , i ) ;
31277: LD_VAR 0 1
31281: PPUSH
31282: LD_VAR 0 6
31286: PPUSH
31287: CALL_OW 169
31291: GO 31257
31293: POP
31294: POP
// end ; result := tmp ;
31295: LD_ADDR_VAR 0 4
31299: PUSH
31300: LD_VAR 0 5
31304: ST_TO_ADDR
// end ;
31305: LD_VAR 0 4
31309: RET
// export function ComComplete ( units , b ) ; var i ; begin
31310: LD_INT 0
31312: PPUSH
31313: PPUSH
// if not units then
31314: LD_VAR 0 1
31318: NOT
31319: IFFALSE 31323
// exit ;
31321: GO 31413
// for i in units do
31323: LD_ADDR_VAR 0 4
31327: PUSH
31328: LD_VAR 0 1
31332: PUSH
31333: FOR_IN
31334: IFFALSE 31411
// if BuildingStatus ( b ) = bs_build then
31336: LD_VAR 0 2
31340: PPUSH
31341: CALL_OW 461
31345: PUSH
31346: LD_INT 1
31348: EQUAL
31349: IFFALSE 31409
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
31351: LD_VAR 0 4
31355: PPUSH
31356: LD_STRING h
31358: PUSH
31359: LD_VAR 0 2
31363: PPUSH
31364: CALL_OW 250
31368: PUSH
31369: LD_VAR 0 2
31373: PPUSH
31374: CALL_OW 251
31378: PUSH
31379: LD_VAR 0 2
31383: PUSH
31384: LD_INT 0
31386: PUSH
31387: LD_INT 0
31389: PUSH
31390: LD_INT 0
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: LIST
31397: LIST
31398: LIST
31399: LIST
31400: LIST
31401: PUSH
31402: EMPTY
31403: LIST
31404: PPUSH
31405: CALL_OW 446
31409: GO 31333
31411: POP
31412: POP
// end ;
31413: LD_VAR 0 3
31417: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
31418: LD_INT 0
31420: PPUSH
31421: PPUSH
31422: PPUSH
31423: PPUSH
31424: PPUSH
31425: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
31426: LD_VAR 0 1
31430: NOT
31431: PUSH
31432: LD_VAR 0 1
31436: PPUSH
31437: CALL_OW 263
31441: PUSH
31442: LD_INT 2
31444: NONEQUAL
31445: OR
31446: IFFALSE 31450
// exit ;
31448: GO 31766
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
31450: LD_ADDR_VAR 0 6
31454: PUSH
31455: LD_INT 22
31457: PUSH
31458: LD_VAR 0 1
31462: PPUSH
31463: CALL_OW 255
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: LD_INT 2
31474: PUSH
31475: LD_INT 30
31477: PUSH
31478: LD_INT 36
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: PUSH
31485: LD_INT 34
31487: PUSH
31488: LD_INT 31
31490: PUSH
31491: EMPTY
31492: LIST
31493: LIST
31494: PUSH
31495: EMPTY
31496: LIST
31497: LIST
31498: LIST
31499: PUSH
31500: EMPTY
31501: LIST
31502: LIST
31503: PPUSH
31504: CALL_OW 69
31508: ST_TO_ADDR
// if not tmp then
31509: LD_VAR 0 6
31513: NOT
31514: IFFALSE 31518
// exit ;
31516: GO 31766
// result := [ ] ;
31518: LD_ADDR_VAR 0 2
31522: PUSH
31523: EMPTY
31524: ST_TO_ADDR
// for i in tmp do
31525: LD_ADDR_VAR 0 3
31529: PUSH
31530: LD_VAR 0 6
31534: PUSH
31535: FOR_IN
31536: IFFALSE 31607
// begin t := UnitsInside ( i ) ;
31538: LD_ADDR_VAR 0 4
31542: PUSH
31543: LD_VAR 0 3
31547: PPUSH
31548: CALL_OW 313
31552: ST_TO_ADDR
// if t then
31553: LD_VAR 0 4
31557: IFFALSE 31605
// for j in t do
31559: LD_ADDR_VAR 0 7
31563: PUSH
31564: LD_VAR 0 4
31568: PUSH
31569: FOR_IN
31570: IFFALSE 31603
// result := Replace ( result , result + 1 , j ) ;
31572: LD_ADDR_VAR 0 2
31576: PUSH
31577: LD_VAR 0 2
31581: PPUSH
31582: LD_VAR 0 2
31586: PUSH
31587: LD_INT 1
31589: PLUS
31590: PPUSH
31591: LD_VAR 0 7
31595: PPUSH
31596: CALL_OW 1
31600: ST_TO_ADDR
31601: GO 31569
31603: POP
31604: POP
// end ;
31605: GO 31535
31607: POP
31608: POP
// if not result then
31609: LD_VAR 0 2
31613: NOT
31614: IFFALSE 31618
// exit ;
31616: GO 31766
// mech := result [ 1 ] ;
31618: LD_ADDR_VAR 0 5
31622: PUSH
31623: LD_VAR 0 2
31627: PUSH
31628: LD_INT 1
31630: ARRAY
31631: ST_TO_ADDR
// if result > 1 then
31632: LD_VAR 0 2
31636: PUSH
31637: LD_INT 1
31639: GREATER
31640: IFFALSE 31752
// begin for i = 2 to result do
31642: LD_ADDR_VAR 0 3
31646: PUSH
31647: DOUBLE
31648: LD_INT 2
31650: DEC
31651: ST_TO_ADDR
31652: LD_VAR 0 2
31656: PUSH
31657: FOR_TO
31658: IFFALSE 31750
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
31660: LD_ADDR_VAR 0 4
31664: PUSH
31665: LD_VAR 0 2
31669: PUSH
31670: LD_VAR 0 3
31674: ARRAY
31675: PPUSH
31676: LD_INT 3
31678: PPUSH
31679: CALL_OW 259
31683: PUSH
31684: LD_VAR 0 2
31688: PUSH
31689: LD_VAR 0 3
31693: ARRAY
31694: PPUSH
31695: CALL_OW 432
31699: MINUS
31700: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
31701: LD_VAR 0 4
31705: PUSH
31706: LD_VAR 0 5
31710: PPUSH
31711: LD_INT 3
31713: PPUSH
31714: CALL_OW 259
31718: PUSH
31719: LD_VAR 0 5
31723: PPUSH
31724: CALL_OW 432
31728: MINUS
31729: GREATEREQUAL
31730: IFFALSE 31748
// mech := result [ i ] ;
31732: LD_ADDR_VAR 0 5
31736: PUSH
31737: LD_VAR 0 2
31741: PUSH
31742: LD_VAR 0 3
31746: ARRAY
31747: ST_TO_ADDR
// end ;
31748: GO 31657
31750: POP
31751: POP
// end ; ComLinkTo ( vehicle , mech ) ;
31752: LD_VAR 0 1
31756: PPUSH
31757: LD_VAR 0 5
31761: PPUSH
31762: CALL_OW 135
// end ;
31766: LD_VAR 0 2
31770: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
31771: LD_INT 0
31773: PPUSH
31774: PPUSH
31775: PPUSH
31776: PPUSH
31777: PPUSH
31778: PPUSH
31779: PPUSH
31780: PPUSH
31781: PPUSH
31782: PPUSH
31783: PPUSH
31784: PPUSH
31785: PPUSH
// result := [ ] ;
31786: LD_ADDR_VAR 0 7
31790: PUSH
31791: EMPTY
31792: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
31793: LD_VAR 0 1
31797: PPUSH
31798: CALL_OW 266
31802: PUSH
31803: LD_INT 0
31805: PUSH
31806: LD_INT 1
31808: PUSH
31809: EMPTY
31810: LIST
31811: LIST
31812: IN
31813: NOT
31814: IFFALSE 31818
// exit ;
31816: GO 33452
// if name then
31818: LD_VAR 0 3
31822: IFFALSE 31838
// SetBName ( base_dep , name ) ;
31824: LD_VAR 0 1
31828: PPUSH
31829: LD_VAR 0 3
31833: PPUSH
31834: CALL_OW 500
// base := GetBase ( base_dep ) ;
31838: LD_ADDR_VAR 0 15
31842: PUSH
31843: LD_VAR 0 1
31847: PPUSH
31848: CALL_OW 274
31852: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
31853: LD_ADDR_VAR 0 16
31857: PUSH
31858: LD_VAR 0 1
31862: PPUSH
31863: CALL_OW 255
31867: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
31868: LD_ADDR_VAR 0 17
31872: PUSH
31873: LD_VAR 0 1
31877: PPUSH
31878: CALL_OW 248
31882: ST_TO_ADDR
// if sources then
31883: LD_VAR 0 5
31887: IFFALSE 31934
// for i = 1 to 3 do
31889: LD_ADDR_VAR 0 8
31893: PUSH
31894: DOUBLE
31895: LD_INT 1
31897: DEC
31898: ST_TO_ADDR
31899: LD_INT 3
31901: PUSH
31902: FOR_TO
31903: IFFALSE 31932
// AddResourceType ( base , i , sources [ i ] ) ;
31905: LD_VAR 0 15
31909: PPUSH
31910: LD_VAR 0 8
31914: PPUSH
31915: LD_VAR 0 5
31919: PUSH
31920: LD_VAR 0 8
31924: ARRAY
31925: PPUSH
31926: CALL_OW 276
31930: GO 31902
31932: POP
31933: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
31934: LD_ADDR_VAR 0 18
31938: PUSH
31939: LD_VAR 0 15
31943: PPUSH
31944: LD_VAR 0 2
31948: PPUSH
31949: LD_INT 1
31951: PPUSH
31952: CALL 31195 0 3
31956: ST_TO_ADDR
// InitHc ;
31957: CALL_OW 19
// InitUc ;
31961: CALL_OW 18
// uc_side := side ;
31965: LD_ADDR_OWVAR 20
31969: PUSH
31970: LD_VAR 0 16
31974: ST_TO_ADDR
// uc_nation := nation ;
31975: LD_ADDR_OWVAR 21
31979: PUSH
31980: LD_VAR 0 17
31984: ST_TO_ADDR
// if buildings then
31985: LD_VAR 0 18
31989: IFFALSE 33311
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
31991: LD_ADDR_VAR 0 19
31995: PUSH
31996: LD_VAR 0 18
32000: PPUSH
32001: LD_INT 2
32003: PUSH
32004: LD_INT 30
32006: PUSH
32007: LD_INT 29
32009: PUSH
32010: EMPTY
32011: LIST
32012: LIST
32013: PUSH
32014: LD_INT 30
32016: PUSH
32017: LD_INT 30
32019: PUSH
32020: EMPTY
32021: LIST
32022: LIST
32023: PUSH
32024: EMPTY
32025: LIST
32026: LIST
32027: LIST
32028: PPUSH
32029: CALL_OW 72
32033: ST_TO_ADDR
// if tmp then
32034: LD_VAR 0 19
32038: IFFALSE 32086
// for i in tmp do
32040: LD_ADDR_VAR 0 8
32044: PUSH
32045: LD_VAR 0 19
32049: PUSH
32050: FOR_IN
32051: IFFALSE 32084
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
32053: LD_VAR 0 8
32057: PPUSH
32058: CALL_OW 250
32062: PPUSH
32063: LD_VAR 0 8
32067: PPUSH
32068: CALL_OW 251
32072: PPUSH
32073: LD_VAR 0 16
32077: PPUSH
32078: CALL_OW 441
32082: GO 32050
32084: POP
32085: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
32086: LD_VAR 0 18
32090: PPUSH
32091: LD_INT 2
32093: PUSH
32094: LD_INT 30
32096: PUSH
32097: LD_INT 32
32099: PUSH
32100: EMPTY
32101: LIST
32102: LIST
32103: PUSH
32104: LD_INT 30
32106: PUSH
32107: LD_INT 33
32109: PUSH
32110: EMPTY
32111: LIST
32112: LIST
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: LIST
32118: PPUSH
32119: CALL_OW 72
32123: IFFALSE 32211
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
32125: LD_ADDR_VAR 0 8
32129: PUSH
32130: LD_VAR 0 18
32134: PPUSH
32135: LD_INT 2
32137: PUSH
32138: LD_INT 30
32140: PUSH
32141: LD_INT 32
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: PUSH
32148: LD_INT 30
32150: PUSH
32151: LD_INT 33
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: EMPTY
32159: LIST
32160: LIST
32161: LIST
32162: PPUSH
32163: CALL_OW 72
32167: PUSH
32168: FOR_IN
32169: IFFALSE 32209
// begin if not GetBWeapon ( i ) then
32171: LD_VAR 0 8
32175: PPUSH
32176: CALL_OW 269
32180: NOT
32181: IFFALSE 32207
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
32183: LD_VAR 0 8
32187: PPUSH
32188: LD_VAR 0 8
32192: PPUSH
32193: LD_VAR 0 2
32197: PPUSH
32198: CALL 33457 0 2
32202: PPUSH
32203: CALL_OW 431
// end ;
32207: GO 32168
32209: POP
32210: POP
// end ; for i = 1 to personel do
32211: LD_ADDR_VAR 0 8
32215: PUSH
32216: DOUBLE
32217: LD_INT 1
32219: DEC
32220: ST_TO_ADDR
32221: LD_VAR 0 6
32225: PUSH
32226: FOR_TO
32227: IFFALSE 33291
// begin if i > 4 then
32229: LD_VAR 0 8
32233: PUSH
32234: LD_INT 4
32236: GREATER
32237: IFFALSE 32241
// break ;
32239: GO 33291
// case i of 1 :
32241: LD_VAR 0 8
32245: PUSH
32246: LD_INT 1
32248: DOUBLE
32249: EQUAL
32250: IFTRUE 32254
32252: GO 32334
32254: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
32255: LD_ADDR_VAR 0 12
32259: PUSH
32260: LD_VAR 0 18
32264: PPUSH
32265: LD_INT 22
32267: PUSH
32268: LD_VAR 0 16
32272: PUSH
32273: EMPTY
32274: LIST
32275: LIST
32276: PUSH
32277: LD_INT 58
32279: PUSH
32280: EMPTY
32281: LIST
32282: PUSH
32283: LD_INT 2
32285: PUSH
32286: LD_INT 30
32288: PUSH
32289: LD_INT 32
32291: PUSH
32292: EMPTY
32293: LIST
32294: LIST
32295: PUSH
32296: LD_INT 30
32298: PUSH
32299: LD_INT 4
32301: PUSH
32302: EMPTY
32303: LIST
32304: LIST
32305: PUSH
32306: LD_INT 30
32308: PUSH
32309: LD_INT 5
32311: PUSH
32312: EMPTY
32313: LIST
32314: LIST
32315: PUSH
32316: EMPTY
32317: LIST
32318: LIST
32319: LIST
32320: LIST
32321: PUSH
32322: EMPTY
32323: LIST
32324: LIST
32325: LIST
32326: PPUSH
32327: CALL_OW 72
32331: ST_TO_ADDR
32332: GO 32556
32334: LD_INT 2
32336: DOUBLE
32337: EQUAL
32338: IFTRUE 32342
32340: GO 32404
32342: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
32343: LD_ADDR_VAR 0 12
32347: PUSH
32348: LD_VAR 0 18
32352: PPUSH
32353: LD_INT 22
32355: PUSH
32356: LD_VAR 0 16
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: LD_INT 2
32367: PUSH
32368: LD_INT 30
32370: PUSH
32371: LD_INT 0
32373: PUSH
32374: EMPTY
32375: LIST
32376: LIST
32377: PUSH
32378: LD_INT 30
32380: PUSH
32381: LD_INT 1
32383: PUSH
32384: EMPTY
32385: LIST
32386: LIST
32387: PUSH
32388: EMPTY
32389: LIST
32390: LIST
32391: LIST
32392: PUSH
32393: EMPTY
32394: LIST
32395: LIST
32396: PPUSH
32397: CALL_OW 72
32401: ST_TO_ADDR
32402: GO 32556
32404: LD_INT 3
32406: DOUBLE
32407: EQUAL
32408: IFTRUE 32412
32410: GO 32474
32412: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
32413: LD_ADDR_VAR 0 12
32417: PUSH
32418: LD_VAR 0 18
32422: PPUSH
32423: LD_INT 22
32425: PUSH
32426: LD_VAR 0 16
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: PUSH
32435: LD_INT 2
32437: PUSH
32438: LD_INT 30
32440: PUSH
32441: LD_INT 2
32443: PUSH
32444: EMPTY
32445: LIST
32446: LIST
32447: PUSH
32448: LD_INT 30
32450: PUSH
32451: LD_INT 3
32453: PUSH
32454: EMPTY
32455: LIST
32456: LIST
32457: PUSH
32458: EMPTY
32459: LIST
32460: LIST
32461: LIST
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: PPUSH
32467: CALL_OW 72
32471: ST_TO_ADDR
32472: GO 32556
32474: LD_INT 4
32476: DOUBLE
32477: EQUAL
32478: IFTRUE 32482
32480: GO 32555
32482: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
32483: LD_ADDR_VAR 0 12
32487: PUSH
32488: LD_VAR 0 18
32492: PPUSH
32493: LD_INT 22
32495: PUSH
32496: LD_VAR 0 16
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: PUSH
32505: LD_INT 2
32507: PUSH
32508: LD_INT 30
32510: PUSH
32511: LD_INT 6
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: PUSH
32518: LD_INT 30
32520: PUSH
32521: LD_INT 7
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: PUSH
32528: LD_INT 30
32530: PUSH
32531: LD_INT 8
32533: PUSH
32534: EMPTY
32535: LIST
32536: LIST
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: PUSH
32544: EMPTY
32545: LIST
32546: LIST
32547: PPUSH
32548: CALL_OW 72
32552: ST_TO_ADDR
32553: GO 32556
32555: POP
// if i = 1 then
32556: LD_VAR 0 8
32560: PUSH
32561: LD_INT 1
32563: EQUAL
32564: IFFALSE 32675
// begin tmp := [ ] ;
32566: LD_ADDR_VAR 0 19
32570: PUSH
32571: EMPTY
32572: ST_TO_ADDR
// for j in f do
32573: LD_ADDR_VAR 0 9
32577: PUSH
32578: LD_VAR 0 12
32582: PUSH
32583: FOR_IN
32584: IFFALSE 32657
// if GetBType ( j ) = b_bunker then
32586: LD_VAR 0 9
32590: PPUSH
32591: CALL_OW 266
32595: PUSH
32596: LD_INT 32
32598: EQUAL
32599: IFFALSE 32626
// tmp := Insert ( tmp , 1 , j ) else
32601: LD_ADDR_VAR 0 19
32605: PUSH
32606: LD_VAR 0 19
32610: PPUSH
32611: LD_INT 1
32613: PPUSH
32614: LD_VAR 0 9
32618: PPUSH
32619: CALL_OW 2
32623: ST_TO_ADDR
32624: GO 32655
// tmp := Insert ( tmp , tmp + 1 , j ) ;
32626: LD_ADDR_VAR 0 19
32630: PUSH
32631: LD_VAR 0 19
32635: PPUSH
32636: LD_VAR 0 19
32640: PUSH
32641: LD_INT 1
32643: PLUS
32644: PPUSH
32645: LD_VAR 0 9
32649: PPUSH
32650: CALL_OW 2
32654: ST_TO_ADDR
32655: GO 32583
32657: POP
32658: POP
// if tmp then
32659: LD_VAR 0 19
32663: IFFALSE 32675
// f := tmp ;
32665: LD_ADDR_VAR 0 12
32669: PUSH
32670: LD_VAR 0 19
32674: ST_TO_ADDR
// end ; x := personel [ i ] ;
32675: LD_ADDR_VAR 0 13
32679: PUSH
32680: LD_VAR 0 6
32684: PUSH
32685: LD_VAR 0 8
32689: ARRAY
32690: ST_TO_ADDR
// if x = - 1 then
32691: LD_VAR 0 13
32695: PUSH
32696: LD_INT 1
32698: NEG
32699: EQUAL
32700: IFFALSE 32909
// begin for j in f do
32702: LD_ADDR_VAR 0 9
32706: PUSH
32707: LD_VAR 0 12
32711: PUSH
32712: FOR_IN
32713: IFFALSE 32905
// repeat InitHc ;
32715: CALL_OW 19
// if GetBType ( j ) = b_barracks then
32719: LD_VAR 0 9
32723: PPUSH
32724: CALL_OW 266
32728: PUSH
32729: LD_INT 5
32731: EQUAL
32732: IFFALSE 32802
// begin if UnitsInside ( j ) < 3 then
32734: LD_VAR 0 9
32738: PPUSH
32739: CALL_OW 313
32743: PUSH
32744: LD_INT 3
32746: LESS
32747: IFFALSE 32783
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32749: LD_INT 0
32751: PPUSH
32752: LD_INT 5
32754: PUSH
32755: LD_INT 8
32757: PUSH
32758: LD_INT 9
32760: PUSH
32761: EMPTY
32762: LIST
32763: LIST
32764: LIST
32765: PUSH
32766: LD_VAR 0 17
32770: ARRAY
32771: PPUSH
32772: LD_VAR 0 4
32776: PPUSH
32777: CALL_OW 380
32781: GO 32800
// PrepareHuman ( false , i , skill ) ;
32783: LD_INT 0
32785: PPUSH
32786: LD_VAR 0 8
32790: PPUSH
32791: LD_VAR 0 4
32795: PPUSH
32796: CALL_OW 380
// end else
32800: GO 32819
// PrepareHuman ( false , i , skill ) ;
32802: LD_INT 0
32804: PPUSH
32805: LD_VAR 0 8
32809: PPUSH
32810: LD_VAR 0 4
32814: PPUSH
32815: CALL_OW 380
// un := CreateHuman ;
32819: LD_ADDR_VAR 0 14
32823: PUSH
32824: CALL_OW 44
32828: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32829: LD_ADDR_VAR 0 7
32833: PUSH
32834: LD_VAR 0 7
32838: PPUSH
32839: LD_INT 1
32841: PPUSH
32842: LD_VAR 0 14
32846: PPUSH
32847: CALL_OW 2
32851: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
32852: LD_VAR 0 14
32856: PPUSH
32857: LD_VAR 0 9
32861: PPUSH
32862: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
32866: LD_VAR 0 9
32870: PPUSH
32871: CALL_OW 313
32875: PUSH
32876: LD_INT 6
32878: EQUAL
32879: PUSH
32880: LD_VAR 0 9
32884: PPUSH
32885: CALL_OW 266
32889: PUSH
32890: LD_INT 32
32892: PUSH
32893: LD_INT 31
32895: PUSH
32896: EMPTY
32897: LIST
32898: LIST
32899: IN
32900: OR
32901: IFFALSE 32715
32903: GO 32712
32905: POP
32906: POP
// end else
32907: GO 33289
// for j = 1 to x do
32909: LD_ADDR_VAR 0 9
32913: PUSH
32914: DOUBLE
32915: LD_INT 1
32917: DEC
32918: ST_TO_ADDR
32919: LD_VAR 0 13
32923: PUSH
32924: FOR_TO
32925: IFFALSE 33287
// begin InitHc ;
32927: CALL_OW 19
// if not f then
32931: LD_VAR 0 12
32935: NOT
32936: IFFALSE 33025
// begin PrepareHuman ( false , i , skill ) ;
32938: LD_INT 0
32940: PPUSH
32941: LD_VAR 0 8
32945: PPUSH
32946: LD_VAR 0 4
32950: PPUSH
32951: CALL_OW 380
// un := CreateHuman ;
32955: LD_ADDR_VAR 0 14
32959: PUSH
32960: CALL_OW 44
32964: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32965: LD_ADDR_VAR 0 7
32969: PUSH
32970: LD_VAR 0 7
32974: PPUSH
32975: LD_INT 1
32977: PPUSH
32978: LD_VAR 0 14
32982: PPUSH
32983: CALL_OW 2
32987: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32988: LD_VAR 0 14
32992: PPUSH
32993: LD_VAR 0 1
32997: PPUSH
32998: CALL_OW 250
33002: PPUSH
33003: LD_VAR 0 1
33007: PPUSH
33008: CALL_OW 251
33012: PPUSH
33013: LD_INT 10
33015: PPUSH
33016: LD_INT 0
33018: PPUSH
33019: CALL_OW 50
// continue ;
33023: GO 32924
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
33025: LD_VAR 0 12
33029: PUSH
33030: LD_INT 1
33032: ARRAY
33033: PPUSH
33034: CALL_OW 313
33038: PUSH
33039: LD_VAR 0 12
33043: PUSH
33044: LD_INT 1
33046: ARRAY
33047: PPUSH
33048: CALL_OW 266
33052: PUSH
33053: LD_INT 32
33055: PUSH
33056: LD_INT 31
33058: PUSH
33059: EMPTY
33060: LIST
33061: LIST
33062: IN
33063: AND
33064: PUSH
33065: LD_VAR 0 12
33069: PUSH
33070: LD_INT 1
33072: ARRAY
33073: PPUSH
33074: CALL_OW 313
33078: PUSH
33079: LD_INT 6
33081: EQUAL
33082: OR
33083: IFFALSE 33103
// f := Delete ( f , 1 ) ;
33085: LD_ADDR_VAR 0 12
33089: PUSH
33090: LD_VAR 0 12
33094: PPUSH
33095: LD_INT 1
33097: PPUSH
33098: CALL_OW 3
33102: ST_TO_ADDR
// if not f then
33103: LD_VAR 0 12
33107: NOT
33108: IFFALSE 33126
// begin x := x + 2 ;
33110: LD_ADDR_VAR 0 13
33114: PUSH
33115: LD_VAR 0 13
33119: PUSH
33120: LD_INT 2
33122: PLUS
33123: ST_TO_ADDR
// continue ;
33124: GO 32924
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
33126: LD_VAR 0 12
33130: PUSH
33131: LD_INT 1
33133: ARRAY
33134: PPUSH
33135: CALL_OW 266
33139: PUSH
33140: LD_INT 5
33142: EQUAL
33143: IFFALSE 33217
// begin if UnitsInside ( f [ 1 ] ) < 3 then
33145: LD_VAR 0 12
33149: PUSH
33150: LD_INT 1
33152: ARRAY
33153: PPUSH
33154: CALL_OW 313
33158: PUSH
33159: LD_INT 3
33161: LESS
33162: IFFALSE 33198
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33164: LD_INT 0
33166: PPUSH
33167: LD_INT 5
33169: PUSH
33170: LD_INT 8
33172: PUSH
33173: LD_INT 9
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: LIST
33180: PUSH
33181: LD_VAR 0 17
33185: ARRAY
33186: PPUSH
33187: LD_VAR 0 4
33191: PPUSH
33192: CALL_OW 380
33196: GO 33215
// PrepareHuman ( false , i , skill ) ;
33198: LD_INT 0
33200: PPUSH
33201: LD_VAR 0 8
33205: PPUSH
33206: LD_VAR 0 4
33210: PPUSH
33211: CALL_OW 380
// end else
33215: GO 33234
// PrepareHuman ( false , i , skill ) ;
33217: LD_INT 0
33219: PPUSH
33220: LD_VAR 0 8
33224: PPUSH
33225: LD_VAR 0 4
33229: PPUSH
33230: CALL_OW 380
// un := CreateHuman ;
33234: LD_ADDR_VAR 0 14
33238: PUSH
33239: CALL_OW 44
33243: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33244: LD_ADDR_VAR 0 7
33248: PUSH
33249: LD_VAR 0 7
33253: PPUSH
33254: LD_INT 1
33256: PPUSH
33257: LD_VAR 0 14
33261: PPUSH
33262: CALL_OW 2
33266: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
33267: LD_VAR 0 14
33271: PPUSH
33272: LD_VAR 0 12
33276: PUSH
33277: LD_INT 1
33279: ARRAY
33280: PPUSH
33281: CALL_OW 52
// end ;
33285: GO 32924
33287: POP
33288: POP
// end ;
33289: GO 32226
33291: POP
33292: POP
// result := result ^ buildings ;
33293: LD_ADDR_VAR 0 7
33297: PUSH
33298: LD_VAR 0 7
33302: PUSH
33303: LD_VAR 0 18
33307: ADD
33308: ST_TO_ADDR
// end else
33309: GO 33452
// begin for i = 1 to personel do
33311: LD_ADDR_VAR 0 8
33315: PUSH
33316: DOUBLE
33317: LD_INT 1
33319: DEC
33320: ST_TO_ADDR
33321: LD_VAR 0 6
33325: PUSH
33326: FOR_TO
33327: IFFALSE 33450
// begin if i > 4 then
33329: LD_VAR 0 8
33333: PUSH
33334: LD_INT 4
33336: GREATER
33337: IFFALSE 33341
// break ;
33339: GO 33450
// x := personel [ i ] ;
33341: LD_ADDR_VAR 0 13
33345: PUSH
33346: LD_VAR 0 6
33350: PUSH
33351: LD_VAR 0 8
33355: ARRAY
33356: ST_TO_ADDR
// if x = - 1 then
33357: LD_VAR 0 13
33361: PUSH
33362: LD_INT 1
33364: NEG
33365: EQUAL
33366: IFFALSE 33370
// continue ;
33368: GO 33326
// PrepareHuman ( false , i , skill ) ;
33370: LD_INT 0
33372: PPUSH
33373: LD_VAR 0 8
33377: PPUSH
33378: LD_VAR 0 4
33382: PPUSH
33383: CALL_OW 380
// un := CreateHuman ;
33387: LD_ADDR_VAR 0 14
33391: PUSH
33392: CALL_OW 44
33396: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33397: LD_VAR 0 14
33401: PPUSH
33402: LD_VAR 0 1
33406: PPUSH
33407: CALL_OW 250
33411: PPUSH
33412: LD_VAR 0 1
33416: PPUSH
33417: CALL_OW 251
33421: PPUSH
33422: LD_INT 10
33424: PPUSH
33425: LD_INT 0
33427: PPUSH
33428: CALL_OW 50
// result := result ^ un ;
33432: LD_ADDR_VAR 0 7
33436: PUSH
33437: LD_VAR 0 7
33441: PUSH
33442: LD_VAR 0 14
33446: ADD
33447: ST_TO_ADDR
// end ;
33448: GO 33326
33450: POP
33451: POP
// end ; end ;
33452: LD_VAR 0 7
33456: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
33457: LD_INT 0
33459: PPUSH
33460: PPUSH
33461: PPUSH
33462: PPUSH
33463: PPUSH
33464: PPUSH
33465: PPUSH
33466: PPUSH
33467: PPUSH
33468: PPUSH
33469: PPUSH
33470: PPUSH
33471: PPUSH
33472: PPUSH
33473: PPUSH
33474: PPUSH
// result := false ;
33475: LD_ADDR_VAR 0 3
33479: PUSH
33480: LD_INT 0
33482: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
33483: LD_VAR 0 1
33487: NOT
33488: PUSH
33489: LD_VAR 0 1
33493: PPUSH
33494: CALL_OW 266
33498: PUSH
33499: LD_INT 32
33501: PUSH
33502: LD_INT 33
33504: PUSH
33505: EMPTY
33506: LIST
33507: LIST
33508: IN
33509: NOT
33510: OR
33511: IFFALSE 33515
// exit ;
33513: GO 34624
// nat := GetNation ( tower ) ;
33515: LD_ADDR_VAR 0 12
33519: PUSH
33520: LD_VAR 0 1
33524: PPUSH
33525: CALL_OW 248
33529: ST_TO_ADDR
// side := GetSide ( tower ) ;
33530: LD_ADDR_VAR 0 16
33534: PUSH
33535: LD_VAR 0 1
33539: PPUSH
33540: CALL_OW 255
33544: ST_TO_ADDR
// x := GetX ( tower ) ;
33545: LD_ADDR_VAR 0 10
33549: PUSH
33550: LD_VAR 0 1
33554: PPUSH
33555: CALL_OW 250
33559: ST_TO_ADDR
// y := GetY ( tower ) ;
33560: LD_ADDR_VAR 0 11
33564: PUSH
33565: LD_VAR 0 1
33569: PPUSH
33570: CALL_OW 251
33574: ST_TO_ADDR
// if not x or not y then
33575: LD_VAR 0 10
33579: NOT
33580: PUSH
33581: LD_VAR 0 11
33585: NOT
33586: OR
33587: IFFALSE 33591
// exit ;
33589: GO 34624
// weapon := 0 ;
33591: LD_ADDR_VAR 0 18
33595: PUSH
33596: LD_INT 0
33598: ST_TO_ADDR
// fac_list := [ ] ;
33599: LD_ADDR_VAR 0 17
33603: PUSH
33604: EMPTY
33605: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
33606: LD_ADDR_VAR 0 6
33610: PUSH
33611: LD_VAR 0 1
33615: PPUSH
33616: CALL_OW 274
33620: PPUSH
33621: LD_VAR 0 2
33625: PPUSH
33626: LD_INT 0
33628: PPUSH
33629: CALL 31195 0 3
33633: PPUSH
33634: LD_INT 30
33636: PUSH
33637: LD_INT 3
33639: PUSH
33640: EMPTY
33641: LIST
33642: LIST
33643: PPUSH
33644: CALL_OW 72
33648: ST_TO_ADDR
// if not factories then
33649: LD_VAR 0 6
33653: NOT
33654: IFFALSE 33658
// exit ;
33656: GO 34624
// for i in factories do
33658: LD_ADDR_VAR 0 8
33662: PUSH
33663: LD_VAR 0 6
33667: PUSH
33668: FOR_IN
33669: IFFALSE 33694
// fac_list := fac_list union AvailableWeaponList ( i ) ;
33671: LD_ADDR_VAR 0 17
33675: PUSH
33676: LD_VAR 0 17
33680: PUSH
33681: LD_VAR 0 8
33685: PPUSH
33686: CALL_OW 478
33690: UNION
33691: ST_TO_ADDR
33692: GO 33668
33694: POP
33695: POP
// if not fac_list then
33696: LD_VAR 0 17
33700: NOT
33701: IFFALSE 33705
// exit ;
33703: GO 34624
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
33705: LD_ADDR_VAR 0 5
33709: PUSH
33710: LD_INT 4
33712: PUSH
33713: LD_INT 5
33715: PUSH
33716: LD_INT 9
33718: PUSH
33719: LD_INT 10
33721: PUSH
33722: LD_INT 6
33724: PUSH
33725: LD_INT 7
33727: PUSH
33728: LD_INT 11
33730: PUSH
33731: EMPTY
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: PUSH
33740: LD_INT 27
33742: PUSH
33743: LD_INT 28
33745: PUSH
33746: LD_INT 26
33748: PUSH
33749: LD_INT 30
33751: PUSH
33752: EMPTY
33753: LIST
33754: LIST
33755: LIST
33756: LIST
33757: PUSH
33758: LD_INT 43
33760: PUSH
33761: LD_INT 44
33763: PUSH
33764: LD_INT 46
33766: PUSH
33767: LD_INT 45
33769: PUSH
33770: LD_INT 47
33772: PUSH
33773: LD_INT 49
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: LIST
33780: LIST
33781: LIST
33782: LIST
33783: PUSH
33784: EMPTY
33785: LIST
33786: LIST
33787: LIST
33788: PUSH
33789: LD_VAR 0 12
33793: ARRAY
33794: ST_TO_ADDR
// list := list isect fac_list ;
33795: LD_ADDR_VAR 0 5
33799: PUSH
33800: LD_VAR 0 5
33804: PUSH
33805: LD_VAR 0 17
33809: ISECT
33810: ST_TO_ADDR
// if not list then
33811: LD_VAR 0 5
33815: NOT
33816: IFFALSE 33820
// exit ;
33818: GO 34624
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
33820: LD_VAR 0 12
33824: PUSH
33825: LD_INT 3
33827: EQUAL
33828: PUSH
33829: LD_INT 49
33831: PUSH
33832: LD_VAR 0 5
33836: IN
33837: AND
33838: PUSH
33839: LD_INT 31
33841: PPUSH
33842: LD_VAR 0 16
33846: PPUSH
33847: CALL_OW 321
33851: PUSH
33852: LD_INT 2
33854: EQUAL
33855: AND
33856: IFFALSE 33916
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
33858: LD_INT 22
33860: PUSH
33861: LD_VAR 0 16
33865: PUSH
33866: EMPTY
33867: LIST
33868: LIST
33869: PUSH
33870: LD_INT 35
33872: PUSH
33873: LD_INT 49
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: PUSH
33880: LD_INT 91
33882: PUSH
33883: LD_VAR 0 1
33887: PUSH
33888: LD_INT 10
33890: PUSH
33891: EMPTY
33892: LIST
33893: LIST
33894: LIST
33895: PUSH
33896: EMPTY
33897: LIST
33898: LIST
33899: LIST
33900: PPUSH
33901: CALL_OW 69
33905: NOT
33906: IFFALSE 33916
// weapon := ru_time_lapser ;
33908: LD_ADDR_VAR 0 18
33912: PUSH
33913: LD_INT 49
33915: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
33916: LD_VAR 0 12
33920: PUSH
33921: LD_INT 1
33923: PUSH
33924: LD_INT 2
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: IN
33931: PUSH
33932: LD_INT 11
33934: PUSH
33935: LD_VAR 0 5
33939: IN
33940: PUSH
33941: LD_INT 30
33943: PUSH
33944: LD_VAR 0 5
33948: IN
33949: OR
33950: AND
33951: PUSH
33952: LD_INT 6
33954: PPUSH
33955: LD_VAR 0 16
33959: PPUSH
33960: CALL_OW 321
33964: PUSH
33965: LD_INT 2
33967: EQUAL
33968: AND
33969: IFFALSE 34134
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
33971: LD_INT 22
33973: PUSH
33974: LD_VAR 0 16
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: PUSH
33983: LD_INT 2
33985: PUSH
33986: LD_INT 35
33988: PUSH
33989: LD_INT 11
33991: PUSH
33992: EMPTY
33993: LIST
33994: LIST
33995: PUSH
33996: LD_INT 35
33998: PUSH
33999: LD_INT 30
34001: PUSH
34002: EMPTY
34003: LIST
34004: LIST
34005: PUSH
34006: EMPTY
34007: LIST
34008: LIST
34009: LIST
34010: PUSH
34011: LD_INT 91
34013: PUSH
34014: LD_VAR 0 1
34018: PUSH
34019: LD_INT 18
34021: PUSH
34022: EMPTY
34023: LIST
34024: LIST
34025: LIST
34026: PUSH
34027: EMPTY
34028: LIST
34029: LIST
34030: LIST
34031: PPUSH
34032: CALL_OW 69
34036: NOT
34037: PUSH
34038: LD_INT 22
34040: PUSH
34041: LD_VAR 0 16
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PUSH
34050: LD_INT 2
34052: PUSH
34053: LD_INT 30
34055: PUSH
34056: LD_INT 32
34058: PUSH
34059: EMPTY
34060: LIST
34061: LIST
34062: PUSH
34063: LD_INT 30
34065: PUSH
34066: LD_INT 33
34068: PUSH
34069: EMPTY
34070: LIST
34071: LIST
34072: PUSH
34073: EMPTY
34074: LIST
34075: LIST
34076: LIST
34077: PUSH
34078: LD_INT 91
34080: PUSH
34081: LD_VAR 0 1
34085: PUSH
34086: LD_INT 12
34088: PUSH
34089: EMPTY
34090: LIST
34091: LIST
34092: LIST
34093: PUSH
34094: EMPTY
34095: LIST
34096: LIST
34097: LIST
34098: PUSH
34099: EMPTY
34100: LIST
34101: PPUSH
34102: CALL_OW 69
34106: PUSH
34107: LD_INT 2
34109: GREATER
34110: AND
34111: IFFALSE 34134
// weapon := [ us_radar , ar_radar ] [ nat ] ;
34113: LD_ADDR_VAR 0 18
34117: PUSH
34118: LD_INT 11
34120: PUSH
34121: LD_INT 30
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: PUSH
34128: LD_VAR 0 12
34132: ARRAY
34133: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
34134: LD_VAR 0 18
34138: NOT
34139: PUSH
34140: LD_INT 40
34142: PPUSH
34143: LD_VAR 0 16
34147: PPUSH
34148: CALL_OW 321
34152: PUSH
34153: LD_INT 2
34155: EQUAL
34156: AND
34157: PUSH
34158: LD_INT 7
34160: PUSH
34161: LD_VAR 0 5
34165: IN
34166: PUSH
34167: LD_INT 28
34169: PUSH
34170: LD_VAR 0 5
34174: IN
34175: OR
34176: PUSH
34177: LD_INT 45
34179: PUSH
34180: LD_VAR 0 5
34184: IN
34185: OR
34186: AND
34187: IFFALSE 34441
// begin hex := GetHexInfo ( x , y ) ;
34189: LD_ADDR_VAR 0 4
34193: PUSH
34194: LD_VAR 0 10
34198: PPUSH
34199: LD_VAR 0 11
34203: PPUSH
34204: CALL_OW 546
34208: ST_TO_ADDR
// if hex [ 1 ] then
34209: LD_VAR 0 4
34213: PUSH
34214: LD_INT 1
34216: ARRAY
34217: IFFALSE 34221
// exit ;
34219: GO 34624
// height := hex [ 2 ] ;
34221: LD_ADDR_VAR 0 15
34225: PUSH
34226: LD_VAR 0 4
34230: PUSH
34231: LD_INT 2
34233: ARRAY
34234: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
34235: LD_ADDR_VAR 0 14
34239: PUSH
34240: LD_INT 0
34242: PUSH
34243: LD_INT 2
34245: PUSH
34246: LD_INT 3
34248: PUSH
34249: LD_INT 5
34251: PUSH
34252: EMPTY
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: ST_TO_ADDR
// for i in tmp do
34258: LD_ADDR_VAR 0 8
34262: PUSH
34263: LD_VAR 0 14
34267: PUSH
34268: FOR_IN
34269: IFFALSE 34439
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
34271: LD_ADDR_VAR 0 9
34275: PUSH
34276: LD_VAR 0 10
34280: PPUSH
34281: LD_VAR 0 8
34285: PPUSH
34286: LD_INT 5
34288: PPUSH
34289: CALL_OW 272
34293: PUSH
34294: LD_VAR 0 11
34298: PPUSH
34299: LD_VAR 0 8
34303: PPUSH
34304: LD_INT 5
34306: PPUSH
34307: CALL_OW 273
34311: PUSH
34312: EMPTY
34313: LIST
34314: LIST
34315: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
34316: LD_VAR 0 9
34320: PUSH
34321: LD_INT 1
34323: ARRAY
34324: PPUSH
34325: LD_VAR 0 9
34329: PUSH
34330: LD_INT 2
34332: ARRAY
34333: PPUSH
34334: CALL_OW 488
34338: IFFALSE 34437
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
34340: LD_ADDR_VAR 0 4
34344: PUSH
34345: LD_VAR 0 9
34349: PUSH
34350: LD_INT 1
34352: ARRAY
34353: PPUSH
34354: LD_VAR 0 9
34358: PUSH
34359: LD_INT 2
34361: ARRAY
34362: PPUSH
34363: CALL_OW 546
34367: ST_TO_ADDR
// if hex [ 1 ] then
34368: LD_VAR 0 4
34372: PUSH
34373: LD_INT 1
34375: ARRAY
34376: IFFALSE 34380
// continue ;
34378: GO 34268
// h := hex [ 2 ] ;
34380: LD_ADDR_VAR 0 13
34384: PUSH
34385: LD_VAR 0 4
34389: PUSH
34390: LD_INT 2
34392: ARRAY
34393: ST_TO_ADDR
// if h + 7 < height then
34394: LD_VAR 0 13
34398: PUSH
34399: LD_INT 7
34401: PLUS
34402: PUSH
34403: LD_VAR 0 15
34407: LESS
34408: IFFALSE 34437
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
34410: LD_ADDR_VAR 0 18
34414: PUSH
34415: LD_INT 7
34417: PUSH
34418: LD_INT 28
34420: PUSH
34421: LD_INT 45
34423: PUSH
34424: EMPTY
34425: LIST
34426: LIST
34427: LIST
34428: PUSH
34429: LD_VAR 0 12
34433: ARRAY
34434: ST_TO_ADDR
// break ;
34435: GO 34439
// end ; end ; end ;
34437: GO 34268
34439: POP
34440: POP
// end ; if not weapon then
34441: LD_VAR 0 18
34445: NOT
34446: IFFALSE 34506
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
34448: LD_ADDR_VAR 0 5
34452: PUSH
34453: LD_VAR 0 5
34457: PUSH
34458: LD_INT 11
34460: PUSH
34461: LD_INT 30
34463: PUSH
34464: LD_INT 49
34466: PUSH
34467: EMPTY
34468: LIST
34469: LIST
34470: LIST
34471: DIFF
34472: ST_TO_ADDR
// if not list then
34473: LD_VAR 0 5
34477: NOT
34478: IFFALSE 34482
// exit ;
34480: GO 34624
// weapon := list [ rand ( 1 , list ) ] ;
34482: LD_ADDR_VAR 0 18
34486: PUSH
34487: LD_VAR 0 5
34491: PUSH
34492: LD_INT 1
34494: PPUSH
34495: LD_VAR 0 5
34499: PPUSH
34500: CALL_OW 12
34504: ARRAY
34505: ST_TO_ADDR
// end ; if weapon then
34506: LD_VAR 0 18
34510: IFFALSE 34624
// begin tmp := CostOfWeapon ( weapon ) ;
34512: LD_ADDR_VAR 0 14
34516: PUSH
34517: LD_VAR 0 18
34521: PPUSH
34522: CALL_OW 451
34526: ST_TO_ADDR
// j := GetBase ( tower ) ;
34527: LD_ADDR_VAR 0 9
34531: PUSH
34532: LD_VAR 0 1
34536: PPUSH
34537: CALL_OW 274
34541: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
34542: LD_VAR 0 9
34546: PPUSH
34547: LD_INT 1
34549: PPUSH
34550: CALL_OW 275
34554: PUSH
34555: LD_VAR 0 14
34559: PUSH
34560: LD_INT 1
34562: ARRAY
34563: GREATEREQUAL
34564: PUSH
34565: LD_VAR 0 9
34569: PPUSH
34570: LD_INT 2
34572: PPUSH
34573: CALL_OW 275
34577: PUSH
34578: LD_VAR 0 14
34582: PUSH
34583: LD_INT 2
34585: ARRAY
34586: GREATEREQUAL
34587: AND
34588: PUSH
34589: LD_VAR 0 9
34593: PPUSH
34594: LD_INT 3
34596: PPUSH
34597: CALL_OW 275
34601: PUSH
34602: LD_VAR 0 14
34606: PUSH
34607: LD_INT 3
34609: ARRAY
34610: GREATEREQUAL
34611: AND
34612: IFFALSE 34624
// result := weapon ;
34614: LD_ADDR_VAR 0 3
34618: PUSH
34619: LD_VAR 0 18
34623: ST_TO_ADDR
// end ; end ;
34624: LD_VAR 0 3
34628: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
34629: LD_INT 0
34631: PPUSH
34632: PPUSH
// result := true ;
34633: LD_ADDR_VAR 0 3
34637: PUSH
34638: LD_INT 1
34640: ST_TO_ADDR
// if array1 = array2 then
34641: LD_VAR 0 1
34645: PUSH
34646: LD_VAR 0 2
34650: EQUAL
34651: IFFALSE 34711
// begin for i = 1 to array1 do
34653: LD_ADDR_VAR 0 4
34657: PUSH
34658: DOUBLE
34659: LD_INT 1
34661: DEC
34662: ST_TO_ADDR
34663: LD_VAR 0 1
34667: PUSH
34668: FOR_TO
34669: IFFALSE 34707
// if array1 [ i ] <> array2 [ i ] then
34671: LD_VAR 0 1
34675: PUSH
34676: LD_VAR 0 4
34680: ARRAY
34681: PUSH
34682: LD_VAR 0 2
34686: PUSH
34687: LD_VAR 0 4
34691: ARRAY
34692: NONEQUAL
34693: IFFALSE 34705
// begin result := false ;
34695: LD_ADDR_VAR 0 3
34699: PUSH
34700: LD_INT 0
34702: ST_TO_ADDR
// break ;
34703: GO 34707
// end ;
34705: GO 34668
34707: POP
34708: POP
// end else
34709: GO 34719
// result := false ;
34711: LD_ADDR_VAR 0 3
34715: PUSH
34716: LD_INT 0
34718: ST_TO_ADDR
// end ;
34719: LD_VAR 0 3
34723: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
34724: LD_INT 0
34726: PPUSH
34727: PPUSH
// if not array1 or not array2 then
34728: LD_VAR 0 1
34732: NOT
34733: PUSH
34734: LD_VAR 0 2
34738: NOT
34739: OR
34740: IFFALSE 34744
// exit ;
34742: GO 34808
// result := true ;
34744: LD_ADDR_VAR 0 3
34748: PUSH
34749: LD_INT 1
34751: ST_TO_ADDR
// for i = 1 to array1 do
34752: LD_ADDR_VAR 0 4
34756: PUSH
34757: DOUBLE
34758: LD_INT 1
34760: DEC
34761: ST_TO_ADDR
34762: LD_VAR 0 1
34766: PUSH
34767: FOR_TO
34768: IFFALSE 34806
// if array1 [ i ] <> array2 [ i ] then
34770: LD_VAR 0 1
34774: PUSH
34775: LD_VAR 0 4
34779: ARRAY
34780: PUSH
34781: LD_VAR 0 2
34785: PUSH
34786: LD_VAR 0 4
34790: ARRAY
34791: NONEQUAL
34792: IFFALSE 34804
// begin result := false ;
34794: LD_ADDR_VAR 0 3
34798: PUSH
34799: LD_INT 0
34801: ST_TO_ADDR
// break ;
34802: GO 34806
// end ;
34804: GO 34767
34806: POP
34807: POP
// end ;
34808: LD_VAR 0 3
34812: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
34813: LD_INT 0
34815: PPUSH
34816: PPUSH
34817: PPUSH
// pom := GetBase ( fac ) ;
34818: LD_ADDR_VAR 0 5
34822: PUSH
34823: LD_VAR 0 1
34827: PPUSH
34828: CALL_OW 274
34832: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
34833: LD_ADDR_VAR 0 4
34837: PUSH
34838: LD_VAR 0 2
34842: PUSH
34843: LD_INT 1
34845: ARRAY
34846: PPUSH
34847: LD_VAR 0 2
34851: PUSH
34852: LD_INT 2
34854: ARRAY
34855: PPUSH
34856: LD_VAR 0 2
34860: PUSH
34861: LD_INT 3
34863: ARRAY
34864: PPUSH
34865: LD_VAR 0 2
34869: PUSH
34870: LD_INT 4
34872: ARRAY
34873: PPUSH
34874: CALL_OW 449
34878: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34879: LD_ADDR_VAR 0 3
34883: PUSH
34884: LD_VAR 0 5
34888: PPUSH
34889: LD_INT 1
34891: PPUSH
34892: CALL_OW 275
34896: PUSH
34897: LD_VAR 0 4
34901: PUSH
34902: LD_INT 1
34904: ARRAY
34905: GREATEREQUAL
34906: PUSH
34907: LD_VAR 0 5
34911: PPUSH
34912: LD_INT 2
34914: PPUSH
34915: CALL_OW 275
34919: PUSH
34920: LD_VAR 0 4
34924: PUSH
34925: LD_INT 2
34927: ARRAY
34928: GREATEREQUAL
34929: AND
34930: PUSH
34931: LD_VAR 0 5
34935: PPUSH
34936: LD_INT 3
34938: PPUSH
34939: CALL_OW 275
34943: PUSH
34944: LD_VAR 0 4
34948: PUSH
34949: LD_INT 3
34951: ARRAY
34952: GREATEREQUAL
34953: AND
34954: ST_TO_ADDR
// end ;
34955: LD_VAR 0 3
34959: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
34960: LD_INT 0
34962: PPUSH
34963: PPUSH
34964: PPUSH
34965: PPUSH
// pom := GetBase ( building ) ;
34966: LD_ADDR_VAR 0 3
34970: PUSH
34971: LD_VAR 0 1
34975: PPUSH
34976: CALL_OW 274
34980: ST_TO_ADDR
// if not pom then
34981: LD_VAR 0 3
34985: NOT
34986: IFFALSE 34990
// exit ;
34988: GO 35160
// btype := GetBType ( building ) ;
34990: LD_ADDR_VAR 0 5
34994: PUSH
34995: LD_VAR 0 1
34999: PPUSH
35000: CALL_OW 266
35004: ST_TO_ADDR
// if btype = b_armoury then
35005: LD_VAR 0 5
35009: PUSH
35010: LD_INT 4
35012: EQUAL
35013: IFFALSE 35023
// btype := b_barracks ;
35015: LD_ADDR_VAR 0 5
35019: PUSH
35020: LD_INT 5
35022: ST_TO_ADDR
// if btype = b_depot then
35023: LD_VAR 0 5
35027: PUSH
35028: LD_INT 0
35030: EQUAL
35031: IFFALSE 35041
// btype := b_warehouse ;
35033: LD_ADDR_VAR 0 5
35037: PUSH
35038: LD_INT 1
35040: ST_TO_ADDR
// if btype = b_workshop then
35041: LD_VAR 0 5
35045: PUSH
35046: LD_INT 2
35048: EQUAL
35049: IFFALSE 35059
// btype := b_factory ;
35051: LD_ADDR_VAR 0 5
35055: PUSH
35056: LD_INT 3
35058: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35059: LD_ADDR_VAR 0 4
35063: PUSH
35064: LD_VAR 0 5
35068: PPUSH
35069: LD_VAR 0 1
35073: PPUSH
35074: CALL_OW 248
35078: PPUSH
35079: CALL_OW 450
35083: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35084: LD_ADDR_VAR 0 2
35088: PUSH
35089: LD_VAR 0 3
35093: PPUSH
35094: LD_INT 1
35096: PPUSH
35097: CALL_OW 275
35101: PUSH
35102: LD_VAR 0 4
35106: PUSH
35107: LD_INT 1
35109: ARRAY
35110: GREATEREQUAL
35111: PUSH
35112: LD_VAR 0 3
35116: PPUSH
35117: LD_INT 2
35119: PPUSH
35120: CALL_OW 275
35124: PUSH
35125: LD_VAR 0 4
35129: PUSH
35130: LD_INT 2
35132: ARRAY
35133: GREATEREQUAL
35134: AND
35135: PUSH
35136: LD_VAR 0 3
35140: PPUSH
35141: LD_INT 3
35143: PPUSH
35144: CALL_OW 275
35148: PUSH
35149: LD_VAR 0 4
35153: PUSH
35154: LD_INT 3
35156: ARRAY
35157: GREATEREQUAL
35158: AND
35159: ST_TO_ADDR
// end ;
35160: LD_VAR 0 2
35164: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
35165: LD_INT 0
35167: PPUSH
35168: PPUSH
35169: PPUSH
// pom := GetBase ( building ) ;
35170: LD_ADDR_VAR 0 4
35174: PUSH
35175: LD_VAR 0 1
35179: PPUSH
35180: CALL_OW 274
35184: ST_TO_ADDR
// if not pom then
35185: LD_VAR 0 4
35189: NOT
35190: IFFALSE 35194
// exit ;
35192: GO 35295
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35194: LD_ADDR_VAR 0 5
35198: PUSH
35199: LD_VAR 0 2
35203: PPUSH
35204: LD_VAR 0 1
35208: PPUSH
35209: CALL_OW 248
35213: PPUSH
35214: CALL_OW 450
35218: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35219: LD_ADDR_VAR 0 3
35223: PUSH
35224: LD_VAR 0 4
35228: PPUSH
35229: LD_INT 1
35231: PPUSH
35232: CALL_OW 275
35236: PUSH
35237: LD_VAR 0 5
35241: PUSH
35242: LD_INT 1
35244: ARRAY
35245: GREATEREQUAL
35246: PUSH
35247: LD_VAR 0 4
35251: PPUSH
35252: LD_INT 2
35254: PPUSH
35255: CALL_OW 275
35259: PUSH
35260: LD_VAR 0 5
35264: PUSH
35265: LD_INT 2
35267: ARRAY
35268: GREATEREQUAL
35269: AND
35270: PUSH
35271: LD_VAR 0 4
35275: PPUSH
35276: LD_INT 3
35278: PPUSH
35279: CALL_OW 275
35283: PUSH
35284: LD_VAR 0 5
35288: PUSH
35289: LD_INT 3
35291: ARRAY
35292: GREATEREQUAL
35293: AND
35294: ST_TO_ADDR
// end ;
35295: LD_VAR 0 3
35299: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
35300: LD_INT 0
35302: PPUSH
35303: PPUSH
35304: PPUSH
35305: PPUSH
35306: PPUSH
35307: PPUSH
35308: PPUSH
35309: PPUSH
35310: PPUSH
35311: PPUSH
35312: PPUSH
// result := false ;
35313: LD_ADDR_VAR 0 8
35317: PUSH
35318: LD_INT 0
35320: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
35321: LD_VAR 0 5
35325: NOT
35326: PUSH
35327: LD_VAR 0 1
35331: NOT
35332: OR
35333: PUSH
35334: LD_VAR 0 2
35338: NOT
35339: OR
35340: PUSH
35341: LD_VAR 0 3
35345: NOT
35346: OR
35347: IFFALSE 35351
// exit ;
35349: GO 36165
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
35351: LD_ADDR_VAR 0 14
35355: PUSH
35356: LD_VAR 0 1
35360: PPUSH
35361: LD_VAR 0 2
35365: PPUSH
35366: LD_VAR 0 3
35370: PPUSH
35371: LD_VAR 0 4
35375: PPUSH
35376: LD_VAR 0 5
35380: PUSH
35381: LD_INT 1
35383: ARRAY
35384: PPUSH
35385: CALL_OW 248
35389: PPUSH
35390: LD_INT 0
35392: PPUSH
35393: CALL 37398 0 6
35397: ST_TO_ADDR
// if not hexes then
35398: LD_VAR 0 14
35402: NOT
35403: IFFALSE 35407
// exit ;
35405: GO 36165
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35407: LD_ADDR_VAR 0 17
35411: PUSH
35412: LD_VAR 0 5
35416: PPUSH
35417: LD_INT 22
35419: PUSH
35420: LD_VAR 0 13
35424: PPUSH
35425: CALL_OW 255
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: PUSH
35434: LD_INT 2
35436: PUSH
35437: LD_INT 30
35439: PUSH
35440: LD_INT 0
35442: PUSH
35443: EMPTY
35444: LIST
35445: LIST
35446: PUSH
35447: LD_INT 30
35449: PUSH
35450: LD_INT 1
35452: PUSH
35453: EMPTY
35454: LIST
35455: LIST
35456: PUSH
35457: EMPTY
35458: LIST
35459: LIST
35460: LIST
35461: PUSH
35462: EMPTY
35463: LIST
35464: LIST
35465: PPUSH
35466: CALL_OW 72
35470: ST_TO_ADDR
// for i = 1 to hexes do
35471: LD_ADDR_VAR 0 9
35475: PUSH
35476: DOUBLE
35477: LD_INT 1
35479: DEC
35480: ST_TO_ADDR
35481: LD_VAR 0 14
35485: PUSH
35486: FOR_TO
35487: IFFALSE 36163
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35489: LD_ADDR_VAR 0 13
35493: PUSH
35494: LD_VAR 0 14
35498: PUSH
35499: LD_VAR 0 9
35503: ARRAY
35504: PUSH
35505: LD_INT 1
35507: ARRAY
35508: PPUSH
35509: LD_VAR 0 14
35513: PUSH
35514: LD_VAR 0 9
35518: ARRAY
35519: PUSH
35520: LD_INT 2
35522: ARRAY
35523: PPUSH
35524: CALL_OW 428
35528: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
35529: LD_VAR 0 14
35533: PUSH
35534: LD_VAR 0 9
35538: ARRAY
35539: PUSH
35540: LD_INT 1
35542: ARRAY
35543: PPUSH
35544: LD_VAR 0 14
35548: PUSH
35549: LD_VAR 0 9
35553: ARRAY
35554: PUSH
35555: LD_INT 2
35557: ARRAY
35558: PPUSH
35559: CALL_OW 351
35563: PUSH
35564: LD_VAR 0 14
35568: PUSH
35569: LD_VAR 0 9
35573: ARRAY
35574: PUSH
35575: LD_INT 1
35577: ARRAY
35578: PPUSH
35579: LD_VAR 0 14
35583: PUSH
35584: LD_VAR 0 9
35588: ARRAY
35589: PUSH
35590: LD_INT 2
35592: ARRAY
35593: PPUSH
35594: CALL_OW 488
35598: NOT
35599: OR
35600: PUSH
35601: LD_VAR 0 13
35605: PPUSH
35606: CALL_OW 247
35610: PUSH
35611: LD_INT 3
35613: EQUAL
35614: OR
35615: IFFALSE 35621
// exit ;
35617: POP
35618: POP
35619: GO 36165
// if not tmp then
35621: LD_VAR 0 13
35625: NOT
35626: IFFALSE 35630
// continue ;
35628: GO 35486
// result := true ;
35630: LD_ADDR_VAR 0 8
35634: PUSH
35635: LD_INT 1
35637: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
35638: LD_VAR 0 6
35642: PUSH
35643: LD_VAR 0 13
35647: PPUSH
35648: CALL_OW 247
35652: PUSH
35653: LD_INT 2
35655: EQUAL
35656: AND
35657: PUSH
35658: LD_VAR 0 13
35662: PPUSH
35663: CALL_OW 263
35667: PUSH
35668: LD_INT 1
35670: EQUAL
35671: AND
35672: IFFALSE 35836
// begin if IsDrivenBy ( tmp ) then
35674: LD_VAR 0 13
35678: PPUSH
35679: CALL_OW 311
35683: IFFALSE 35687
// continue ;
35685: GO 35486
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
35687: LD_VAR 0 6
35691: PPUSH
35692: LD_INT 3
35694: PUSH
35695: LD_INT 60
35697: PUSH
35698: EMPTY
35699: LIST
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: PUSH
35705: LD_INT 3
35707: PUSH
35708: LD_INT 55
35710: PUSH
35711: EMPTY
35712: LIST
35713: PUSH
35714: EMPTY
35715: LIST
35716: LIST
35717: PUSH
35718: EMPTY
35719: LIST
35720: LIST
35721: PPUSH
35722: CALL_OW 72
35726: IFFALSE 35834
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
35728: LD_ADDR_VAR 0 18
35732: PUSH
35733: LD_VAR 0 6
35737: PPUSH
35738: LD_INT 3
35740: PUSH
35741: LD_INT 60
35743: PUSH
35744: EMPTY
35745: LIST
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: PUSH
35751: LD_INT 3
35753: PUSH
35754: LD_INT 55
35756: PUSH
35757: EMPTY
35758: LIST
35759: PUSH
35760: EMPTY
35761: LIST
35762: LIST
35763: PUSH
35764: EMPTY
35765: LIST
35766: LIST
35767: PPUSH
35768: CALL_OW 72
35772: PUSH
35773: LD_INT 1
35775: ARRAY
35776: ST_TO_ADDR
// if IsInUnit ( driver ) then
35777: LD_VAR 0 18
35781: PPUSH
35782: CALL_OW 310
35786: IFFALSE 35797
// ComExit ( driver ) ;
35788: LD_VAR 0 18
35792: PPUSH
35793: CALL 61086 0 1
// AddComEnterUnit ( driver , tmp ) ;
35797: LD_VAR 0 18
35801: PPUSH
35802: LD_VAR 0 13
35806: PPUSH
35807: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
35811: LD_VAR 0 18
35815: PPUSH
35816: LD_VAR 0 7
35820: PPUSH
35821: CALL_OW 173
// AddComExitVehicle ( driver ) ;
35825: LD_VAR 0 18
35829: PPUSH
35830: CALL_OW 181
// end ; continue ;
35834: GO 35486
// end ; if not cleaners or not tmp in cleaners then
35836: LD_VAR 0 6
35840: NOT
35841: PUSH
35842: LD_VAR 0 13
35846: PUSH
35847: LD_VAR 0 6
35851: IN
35852: NOT
35853: OR
35854: IFFALSE 36161
// begin if dep then
35856: LD_VAR 0 17
35860: IFFALSE 35996
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
35862: LD_ADDR_VAR 0 16
35866: PUSH
35867: LD_VAR 0 17
35871: PUSH
35872: LD_INT 1
35874: ARRAY
35875: PPUSH
35876: CALL_OW 250
35880: PPUSH
35881: LD_VAR 0 17
35885: PUSH
35886: LD_INT 1
35888: ARRAY
35889: PPUSH
35890: CALL_OW 254
35894: PPUSH
35895: LD_INT 5
35897: PPUSH
35898: CALL_OW 272
35902: PUSH
35903: LD_VAR 0 17
35907: PUSH
35908: LD_INT 1
35910: ARRAY
35911: PPUSH
35912: CALL_OW 251
35916: PPUSH
35917: LD_VAR 0 17
35921: PUSH
35922: LD_INT 1
35924: ARRAY
35925: PPUSH
35926: CALL_OW 254
35930: PPUSH
35931: LD_INT 5
35933: PPUSH
35934: CALL_OW 273
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
35943: LD_VAR 0 16
35947: PUSH
35948: LD_INT 1
35950: ARRAY
35951: PPUSH
35952: LD_VAR 0 16
35956: PUSH
35957: LD_INT 2
35959: ARRAY
35960: PPUSH
35961: CALL_OW 488
35965: IFFALSE 35996
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
35967: LD_VAR 0 13
35971: PPUSH
35972: LD_VAR 0 16
35976: PUSH
35977: LD_INT 1
35979: ARRAY
35980: PPUSH
35981: LD_VAR 0 16
35985: PUSH
35986: LD_INT 2
35988: ARRAY
35989: PPUSH
35990: CALL_OW 111
// continue ;
35994: GO 35486
// end ; end ; r := GetDir ( tmp ) ;
35996: LD_ADDR_VAR 0 15
36000: PUSH
36001: LD_VAR 0 13
36005: PPUSH
36006: CALL_OW 254
36010: ST_TO_ADDR
// if r = 5 then
36011: LD_VAR 0 15
36015: PUSH
36016: LD_INT 5
36018: EQUAL
36019: IFFALSE 36029
// r := 0 ;
36021: LD_ADDR_VAR 0 15
36025: PUSH
36026: LD_INT 0
36028: ST_TO_ADDR
// for j = r to 5 do
36029: LD_ADDR_VAR 0 10
36033: PUSH
36034: DOUBLE
36035: LD_VAR 0 15
36039: DEC
36040: ST_TO_ADDR
36041: LD_INT 5
36043: PUSH
36044: FOR_TO
36045: IFFALSE 36159
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
36047: LD_ADDR_VAR 0 11
36051: PUSH
36052: LD_VAR 0 13
36056: PPUSH
36057: CALL_OW 250
36061: PPUSH
36062: LD_VAR 0 10
36066: PPUSH
36067: LD_INT 2
36069: PPUSH
36070: CALL_OW 272
36074: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
36075: LD_ADDR_VAR 0 12
36079: PUSH
36080: LD_VAR 0 13
36084: PPUSH
36085: CALL_OW 251
36089: PPUSH
36090: LD_VAR 0 10
36094: PPUSH
36095: LD_INT 2
36097: PPUSH
36098: CALL_OW 273
36102: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
36103: LD_VAR 0 11
36107: PPUSH
36108: LD_VAR 0 12
36112: PPUSH
36113: CALL_OW 488
36117: PUSH
36118: LD_VAR 0 11
36122: PPUSH
36123: LD_VAR 0 12
36127: PPUSH
36128: CALL_OW 428
36132: NOT
36133: AND
36134: IFFALSE 36157
// begin ComMoveXY ( tmp , _x , _y ) ;
36136: LD_VAR 0 13
36140: PPUSH
36141: LD_VAR 0 11
36145: PPUSH
36146: LD_VAR 0 12
36150: PPUSH
36151: CALL_OW 111
// break ;
36155: GO 36159
// end ; end ;
36157: GO 36044
36159: POP
36160: POP
// end ; end ;
36161: GO 35486
36163: POP
36164: POP
// end ;
36165: LD_VAR 0 8
36169: RET
// export function BuildingTechInvented ( side , btype ) ; begin
36170: LD_INT 0
36172: PPUSH
// result := true ;
36173: LD_ADDR_VAR 0 3
36177: PUSH
36178: LD_INT 1
36180: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
36181: LD_VAR 0 2
36185: PUSH
36186: LD_INT 24
36188: DOUBLE
36189: EQUAL
36190: IFTRUE 36200
36192: LD_INT 33
36194: DOUBLE
36195: EQUAL
36196: IFTRUE 36200
36198: GO 36225
36200: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
36201: LD_ADDR_VAR 0 3
36205: PUSH
36206: LD_INT 32
36208: PPUSH
36209: LD_VAR 0 1
36213: PPUSH
36214: CALL_OW 321
36218: PUSH
36219: LD_INT 2
36221: EQUAL
36222: ST_TO_ADDR
36223: GO 36541
36225: LD_INT 20
36227: DOUBLE
36228: EQUAL
36229: IFTRUE 36233
36231: GO 36258
36233: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
36234: LD_ADDR_VAR 0 3
36238: PUSH
36239: LD_INT 6
36241: PPUSH
36242: LD_VAR 0 1
36246: PPUSH
36247: CALL_OW 321
36251: PUSH
36252: LD_INT 2
36254: EQUAL
36255: ST_TO_ADDR
36256: GO 36541
36258: LD_INT 22
36260: DOUBLE
36261: EQUAL
36262: IFTRUE 36272
36264: LD_INT 36
36266: DOUBLE
36267: EQUAL
36268: IFTRUE 36272
36270: GO 36297
36272: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
36273: LD_ADDR_VAR 0 3
36277: PUSH
36278: LD_INT 15
36280: PPUSH
36281: LD_VAR 0 1
36285: PPUSH
36286: CALL_OW 321
36290: PUSH
36291: LD_INT 2
36293: EQUAL
36294: ST_TO_ADDR
36295: GO 36541
36297: LD_INT 30
36299: DOUBLE
36300: EQUAL
36301: IFTRUE 36305
36303: GO 36330
36305: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
36306: LD_ADDR_VAR 0 3
36310: PUSH
36311: LD_INT 20
36313: PPUSH
36314: LD_VAR 0 1
36318: PPUSH
36319: CALL_OW 321
36323: PUSH
36324: LD_INT 2
36326: EQUAL
36327: ST_TO_ADDR
36328: GO 36541
36330: LD_INT 28
36332: DOUBLE
36333: EQUAL
36334: IFTRUE 36344
36336: LD_INT 21
36338: DOUBLE
36339: EQUAL
36340: IFTRUE 36344
36342: GO 36369
36344: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
36345: LD_ADDR_VAR 0 3
36349: PUSH
36350: LD_INT 21
36352: PPUSH
36353: LD_VAR 0 1
36357: PPUSH
36358: CALL_OW 321
36362: PUSH
36363: LD_INT 2
36365: EQUAL
36366: ST_TO_ADDR
36367: GO 36541
36369: LD_INT 16
36371: DOUBLE
36372: EQUAL
36373: IFTRUE 36377
36375: GO 36402
36377: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
36378: LD_ADDR_VAR 0 3
36382: PUSH
36383: LD_INT 84
36385: PPUSH
36386: LD_VAR 0 1
36390: PPUSH
36391: CALL_OW 321
36395: PUSH
36396: LD_INT 2
36398: EQUAL
36399: ST_TO_ADDR
36400: GO 36541
36402: LD_INT 19
36404: DOUBLE
36405: EQUAL
36406: IFTRUE 36416
36408: LD_INT 23
36410: DOUBLE
36411: EQUAL
36412: IFTRUE 36416
36414: GO 36441
36416: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
36417: LD_ADDR_VAR 0 3
36421: PUSH
36422: LD_INT 83
36424: PPUSH
36425: LD_VAR 0 1
36429: PPUSH
36430: CALL_OW 321
36434: PUSH
36435: LD_INT 2
36437: EQUAL
36438: ST_TO_ADDR
36439: GO 36541
36441: LD_INT 17
36443: DOUBLE
36444: EQUAL
36445: IFTRUE 36449
36447: GO 36474
36449: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
36450: LD_ADDR_VAR 0 3
36454: PUSH
36455: LD_INT 39
36457: PPUSH
36458: LD_VAR 0 1
36462: PPUSH
36463: CALL_OW 321
36467: PUSH
36468: LD_INT 2
36470: EQUAL
36471: ST_TO_ADDR
36472: GO 36541
36474: LD_INT 18
36476: DOUBLE
36477: EQUAL
36478: IFTRUE 36482
36480: GO 36507
36482: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
36483: LD_ADDR_VAR 0 3
36487: PUSH
36488: LD_INT 40
36490: PPUSH
36491: LD_VAR 0 1
36495: PPUSH
36496: CALL_OW 321
36500: PUSH
36501: LD_INT 2
36503: EQUAL
36504: ST_TO_ADDR
36505: GO 36541
36507: LD_INT 27
36509: DOUBLE
36510: EQUAL
36511: IFTRUE 36515
36513: GO 36540
36515: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
36516: LD_ADDR_VAR 0 3
36520: PUSH
36521: LD_INT 35
36523: PPUSH
36524: LD_VAR 0 1
36528: PPUSH
36529: CALL_OW 321
36533: PUSH
36534: LD_INT 2
36536: EQUAL
36537: ST_TO_ADDR
36538: GO 36541
36540: POP
// end ;
36541: LD_VAR 0 3
36545: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
36546: LD_INT 0
36548: PPUSH
36549: PPUSH
36550: PPUSH
36551: PPUSH
36552: PPUSH
36553: PPUSH
36554: PPUSH
36555: PPUSH
36556: PPUSH
36557: PPUSH
36558: PPUSH
// result := false ;
36559: LD_ADDR_VAR 0 6
36563: PUSH
36564: LD_INT 0
36566: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
36567: LD_VAR 0 1
36571: NOT
36572: PUSH
36573: LD_VAR 0 1
36577: PPUSH
36578: CALL_OW 266
36582: PUSH
36583: LD_INT 0
36585: PUSH
36586: LD_INT 1
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: IN
36593: NOT
36594: OR
36595: PUSH
36596: LD_VAR 0 2
36600: NOT
36601: OR
36602: PUSH
36603: LD_VAR 0 5
36607: PUSH
36608: LD_INT 0
36610: PUSH
36611: LD_INT 1
36613: PUSH
36614: LD_INT 2
36616: PUSH
36617: LD_INT 3
36619: PUSH
36620: LD_INT 4
36622: PUSH
36623: LD_INT 5
36625: PUSH
36626: EMPTY
36627: LIST
36628: LIST
36629: LIST
36630: LIST
36631: LIST
36632: LIST
36633: IN
36634: NOT
36635: OR
36636: PUSH
36637: LD_VAR 0 3
36641: PPUSH
36642: LD_VAR 0 4
36646: PPUSH
36647: CALL_OW 488
36651: NOT
36652: OR
36653: IFFALSE 36657
// exit ;
36655: GO 37393
// side := GetSide ( depot ) ;
36657: LD_ADDR_VAR 0 9
36661: PUSH
36662: LD_VAR 0 1
36666: PPUSH
36667: CALL_OW 255
36671: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
36672: LD_VAR 0 9
36676: PPUSH
36677: LD_VAR 0 2
36681: PPUSH
36682: CALL 36170 0 2
36686: NOT
36687: IFFALSE 36691
// exit ;
36689: GO 37393
// pom := GetBase ( depot ) ;
36691: LD_ADDR_VAR 0 10
36695: PUSH
36696: LD_VAR 0 1
36700: PPUSH
36701: CALL_OW 274
36705: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
36706: LD_ADDR_VAR 0 11
36710: PUSH
36711: LD_VAR 0 2
36715: PPUSH
36716: LD_VAR 0 1
36720: PPUSH
36721: CALL_OW 248
36725: PPUSH
36726: CALL_OW 450
36730: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
36731: LD_VAR 0 10
36735: PPUSH
36736: LD_INT 1
36738: PPUSH
36739: CALL_OW 275
36743: PUSH
36744: LD_VAR 0 11
36748: PUSH
36749: LD_INT 1
36751: ARRAY
36752: GREATEREQUAL
36753: PUSH
36754: LD_VAR 0 10
36758: PPUSH
36759: LD_INT 2
36761: PPUSH
36762: CALL_OW 275
36766: PUSH
36767: LD_VAR 0 11
36771: PUSH
36772: LD_INT 2
36774: ARRAY
36775: GREATEREQUAL
36776: AND
36777: PUSH
36778: LD_VAR 0 10
36782: PPUSH
36783: LD_INT 3
36785: PPUSH
36786: CALL_OW 275
36790: PUSH
36791: LD_VAR 0 11
36795: PUSH
36796: LD_INT 3
36798: ARRAY
36799: GREATEREQUAL
36800: AND
36801: NOT
36802: IFFALSE 36806
// exit ;
36804: GO 37393
// if GetBType ( depot ) = b_depot then
36806: LD_VAR 0 1
36810: PPUSH
36811: CALL_OW 266
36815: PUSH
36816: LD_INT 0
36818: EQUAL
36819: IFFALSE 36831
// dist := 28 else
36821: LD_ADDR_VAR 0 14
36825: PUSH
36826: LD_INT 28
36828: ST_TO_ADDR
36829: GO 36839
// dist := 36 ;
36831: LD_ADDR_VAR 0 14
36835: PUSH
36836: LD_INT 36
36838: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
36839: LD_VAR 0 1
36843: PPUSH
36844: LD_VAR 0 3
36848: PPUSH
36849: LD_VAR 0 4
36853: PPUSH
36854: CALL_OW 297
36858: PUSH
36859: LD_VAR 0 14
36863: GREATER
36864: IFFALSE 36868
// exit ;
36866: GO 37393
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
36868: LD_ADDR_VAR 0 12
36872: PUSH
36873: LD_VAR 0 2
36877: PPUSH
36878: LD_VAR 0 3
36882: PPUSH
36883: LD_VAR 0 4
36887: PPUSH
36888: LD_VAR 0 5
36892: PPUSH
36893: LD_VAR 0 1
36897: PPUSH
36898: CALL_OW 248
36902: PPUSH
36903: LD_INT 0
36905: PPUSH
36906: CALL 37398 0 6
36910: ST_TO_ADDR
// if not hexes then
36911: LD_VAR 0 12
36915: NOT
36916: IFFALSE 36920
// exit ;
36918: GO 37393
// hex := GetHexInfo ( x , y ) ;
36920: LD_ADDR_VAR 0 15
36924: PUSH
36925: LD_VAR 0 3
36929: PPUSH
36930: LD_VAR 0 4
36934: PPUSH
36935: CALL_OW 546
36939: ST_TO_ADDR
// if hex [ 1 ] then
36940: LD_VAR 0 15
36944: PUSH
36945: LD_INT 1
36947: ARRAY
36948: IFFALSE 36952
// exit ;
36950: GO 37393
// height := hex [ 2 ] ;
36952: LD_ADDR_VAR 0 13
36956: PUSH
36957: LD_VAR 0 15
36961: PUSH
36962: LD_INT 2
36964: ARRAY
36965: ST_TO_ADDR
// for i = 1 to hexes do
36966: LD_ADDR_VAR 0 7
36970: PUSH
36971: DOUBLE
36972: LD_INT 1
36974: DEC
36975: ST_TO_ADDR
36976: LD_VAR 0 12
36980: PUSH
36981: FOR_TO
36982: IFFALSE 37312
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
36984: LD_VAR 0 12
36988: PUSH
36989: LD_VAR 0 7
36993: ARRAY
36994: PUSH
36995: LD_INT 1
36997: ARRAY
36998: PPUSH
36999: LD_VAR 0 12
37003: PUSH
37004: LD_VAR 0 7
37008: ARRAY
37009: PUSH
37010: LD_INT 2
37012: ARRAY
37013: PPUSH
37014: CALL_OW 488
37018: NOT
37019: PUSH
37020: LD_VAR 0 12
37024: PUSH
37025: LD_VAR 0 7
37029: ARRAY
37030: PUSH
37031: LD_INT 1
37033: ARRAY
37034: PPUSH
37035: LD_VAR 0 12
37039: PUSH
37040: LD_VAR 0 7
37044: ARRAY
37045: PUSH
37046: LD_INT 2
37048: ARRAY
37049: PPUSH
37050: CALL_OW 428
37054: PUSH
37055: LD_INT 0
37057: GREATER
37058: OR
37059: PUSH
37060: LD_VAR 0 12
37064: PUSH
37065: LD_VAR 0 7
37069: ARRAY
37070: PUSH
37071: LD_INT 1
37073: ARRAY
37074: PPUSH
37075: LD_VAR 0 12
37079: PUSH
37080: LD_VAR 0 7
37084: ARRAY
37085: PUSH
37086: LD_INT 2
37088: ARRAY
37089: PPUSH
37090: CALL_OW 351
37094: OR
37095: IFFALSE 37101
// exit ;
37097: POP
37098: POP
37099: GO 37393
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37101: LD_ADDR_VAR 0 8
37105: PUSH
37106: LD_VAR 0 12
37110: PUSH
37111: LD_VAR 0 7
37115: ARRAY
37116: PUSH
37117: LD_INT 1
37119: ARRAY
37120: PPUSH
37121: LD_VAR 0 12
37125: PUSH
37126: LD_VAR 0 7
37130: ARRAY
37131: PUSH
37132: LD_INT 2
37134: ARRAY
37135: PPUSH
37136: CALL_OW 546
37140: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
37141: LD_VAR 0 8
37145: PUSH
37146: LD_INT 1
37148: ARRAY
37149: PUSH
37150: LD_VAR 0 8
37154: PUSH
37155: LD_INT 2
37157: ARRAY
37158: PUSH
37159: LD_VAR 0 13
37163: PUSH
37164: LD_INT 2
37166: PLUS
37167: GREATER
37168: OR
37169: PUSH
37170: LD_VAR 0 8
37174: PUSH
37175: LD_INT 2
37177: ARRAY
37178: PUSH
37179: LD_VAR 0 13
37183: PUSH
37184: LD_INT 2
37186: MINUS
37187: LESS
37188: OR
37189: PUSH
37190: LD_VAR 0 8
37194: PUSH
37195: LD_INT 3
37197: ARRAY
37198: PUSH
37199: LD_INT 0
37201: PUSH
37202: LD_INT 8
37204: PUSH
37205: LD_INT 9
37207: PUSH
37208: LD_INT 10
37210: PUSH
37211: LD_INT 11
37213: PUSH
37214: LD_INT 12
37216: PUSH
37217: LD_INT 13
37219: PUSH
37220: LD_INT 16
37222: PUSH
37223: LD_INT 17
37225: PUSH
37226: LD_INT 18
37228: PUSH
37229: LD_INT 19
37231: PUSH
37232: LD_INT 20
37234: PUSH
37235: LD_INT 21
37237: PUSH
37238: EMPTY
37239: LIST
37240: LIST
37241: LIST
37242: LIST
37243: LIST
37244: LIST
37245: LIST
37246: LIST
37247: LIST
37248: LIST
37249: LIST
37250: LIST
37251: LIST
37252: IN
37253: NOT
37254: OR
37255: PUSH
37256: LD_VAR 0 8
37260: PUSH
37261: LD_INT 5
37263: ARRAY
37264: NOT
37265: OR
37266: PUSH
37267: LD_VAR 0 8
37271: PUSH
37272: LD_INT 6
37274: ARRAY
37275: PUSH
37276: LD_INT 1
37278: PUSH
37279: LD_INT 2
37281: PUSH
37282: LD_INT 7
37284: PUSH
37285: LD_INT 9
37287: PUSH
37288: LD_INT 10
37290: PUSH
37291: LD_INT 11
37293: PUSH
37294: EMPTY
37295: LIST
37296: LIST
37297: LIST
37298: LIST
37299: LIST
37300: LIST
37301: IN
37302: NOT
37303: OR
37304: IFFALSE 37310
// exit ;
37306: POP
37307: POP
37308: GO 37393
// end ;
37310: GO 36981
37312: POP
37313: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
37314: LD_VAR 0 9
37318: PPUSH
37319: LD_VAR 0 3
37323: PPUSH
37324: LD_VAR 0 4
37328: PPUSH
37329: LD_INT 20
37331: PPUSH
37332: CALL 29345 0 4
37336: PUSH
37337: LD_INT 4
37339: ARRAY
37340: IFFALSE 37344
// exit ;
37342: GO 37393
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
37344: LD_VAR 0 2
37348: PUSH
37349: LD_INT 29
37351: PUSH
37352: LD_INT 30
37354: PUSH
37355: EMPTY
37356: LIST
37357: LIST
37358: IN
37359: PUSH
37360: LD_VAR 0 3
37364: PPUSH
37365: LD_VAR 0 4
37369: PPUSH
37370: LD_VAR 0 9
37374: PPUSH
37375: CALL_OW 440
37379: NOT
37380: AND
37381: IFFALSE 37385
// exit ;
37383: GO 37393
// result := true ;
37385: LD_ADDR_VAR 0 6
37389: PUSH
37390: LD_INT 1
37392: ST_TO_ADDR
// end ;
37393: LD_VAR 0 6
37397: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
37398: LD_INT 0
37400: PPUSH
37401: PPUSH
37402: PPUSH
37403: PPUSH
37404: PPUSH
37405: PPUSH
37406: PPUSH
37407: PPUSH
37408: PPUSH
37409: PPUSH
37410: PPUSH
37411: PPUSH
37412: PPUSH
37413: PPUSH
37414: PPUSH
37415: PPUSH
37416: PPUSH
37417: PPUSH
37418: PPUSH
37419: PPUSH
37420: PPUSH
37421: PPUSH
37422: PPUSH
37423: PPUSH
37424: PPUSH
37425: PPUSH
37426: PPUSH
37427: PPUSH
37428: PPUSH
37429: PPUSH
37430: PPUSH
37431: PPUSH
37432: PPUSH
37433: PPUSH
37434: PPUSH
37435: PPUSH
37436: PPUSH
37437: PPUSH
37438: PPUSH
37439: PPUSH
37440: PPUSH
37441: PPUSH
37442: PPUSH
37443: PPUSH
37444: PPUSH
37445: PPUSH
37446: PPUSH
37447: PPUSH
37448: PPUSH
37449: PPUSH
37450: PPUSH
37451: PPUSH
37452: PPUSH
37453: PPUSH
37454: PPUSH
37455: PPUSH
37456: PPUSH
37457: PPUSH
// result = [ ] ;
37458: LD_ADDR_VAR 0 7
37462: PUSH
37463: EMPTY
37464: ST_TO_ADDR
// temp_list = [ ] ;
37465: LD_ADDR_VAR 0 9
37469: PUSH
37470: EMPTY
37471: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
37472: LD_VAR 0 4
37476: PUSH
37477: LD_INT 0
37479: PUSH
37480: LD_INT 1
37482: PUSH
37483: LD_INT 2
37485: PUSH
37486: LD_INT 3
37488: PUSH
37489: LD_INT 4
37491: PUSH
37492: LD_INT 5
37494: PUSH
37495: EMPTY
37496: LIST
37497: LIST
37498: LIST
37499: LIST
37500: LIST
37501: LIST
37502: IN
37503: NOT
37504: PUSH
37505: LD_VAR 0 1
37509: PUSH
37510: LD_INT 0
37512: PUSH
37513: LD_INT 1
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: IN
37520: PUSH
37521: LD_VAR 0 5
37525: PUSH
37526: LD_INT 1
37528: PUSH
37529: LD_INT 2
37531: PUSH
37532: LD_INT 3
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: LIST
37539: IN
37540: NOT
37541: AND
37542: OR
37543: IFFALSE 37547
// exit ;
37545: GO 55938
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
37547: LD_VAR 0 1
37551: PUSH
37552: LD_INT 6
37554: PUSH
37555: LD_INT 7
37557: PUSH
37558: LD_INT 8
37560: PUSH
37561: LD_INT 13
37563: PUSH
37564: LD_INT 12
37566: PUSH
37567: LD_INT 15
37569: PUSH
37570: LD_INT 11
37572: PUSH
37573: LD_INT 14
37575: PUSH
37576: LD_INT 10
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: LIST
37583: LIST
37584: LIST
37585: LIST
37586: LIST
37587: LIST
37588: LIST
37589: IN
37590: IFFALSE 37600
// btype = b_lab ;
37592: LD_ADDR_VAR 0 1
37596: PUSH
37597: LD_INT 6
37599: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
37600: LD_VAR 0 6
37604: PUSH
37605: LD_INT 0
37607: PUSH
37608: LD_INT 1
37610: PUSH
37611: LD_INT 2
37613: PUSH
37614: EMPTY
37615: LIST
37616: LIST
37617: LIST
37618: IN
37619: NOT
37620: PUSH
37621: LD_VAR 0 1
37625: PUSH
37626: LD_INT 0
37628: PUSH
37629: LD_INT 1
37631: PUSH
37632: LD_INT 2
37634: PUSH
37635: LD_INT 3
37637: PUSH
37638: LD_INT 6
37640: PUSH
37641: LD_INT 36
37643: PUSH
37644: LD_INT 4
37646: PUSH
37647: LD_INT 5
37649: PUSH
37650: LD_INT 31
37652: PUSH
37653: LD_INT 32
37655: PUSH
37656: LD_INT 33
37658: PUSH
37659: EMPTY
37660: LIST
37661: LIST
37662: LIST
37663: LIST
37664: LIST
37665: LIST
37666: LIST
37667: LIST
37668: LIST
37669: LIST
37670: LIST
37671: IN
37672: NOT
37673: PUSH
37674: LD_VAR 0 6
37678: PUSH
37679: LD_INT 1
37681: EQUAL
37682: AND
37683: OR
37684: PUSH
37685: LD_VAR 0 1
37689: PUSH
37690: LD_INT 2
37692: PUSH
37693: LD_INT 3
37695: PUSH
37696: EMPTY
37697: LIST
37698: LIST
37699: IN
37700: NOT
37701: PUSH
37702: LD_VAR 0 6
37706: PUSH
37707: LD_INT 2
37709: EQUAL
37710: AND
37711: OR
37712: IFFALSE 37722
// mode = 0 ;
37714: LD_ADDR_VAR 0 6
37718: PUSH
37719: LD_INT 0
37721: ST_TO_ADDR
// case mode of 0 :
37722: LD_VAR 0 6
37726: PUSH
37727: LD_INT 0
37729: DOUBLE
37730: EQUAL
37731: IFTRUE 37735
37733: GO 49188
37735: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37736: LD_ADDR_VAR 0 11
37740: PUSH
37741: LD_INT 0
37743: PUSH
37744: LD_INT 0
37746: PUSH
37747: EMPTY
37748: LIST
37749: LIST
37750: PUSH
37751: LD_INT 0
37753: PUSH
37754: LD_INT 1
37756: NEG
37757: PUSH
37758: EMPTY
37759: LIST
37760: LIST
37761: PUSH
37762: LD_INT 1
37764: PUSH
37765: LD_INT 0
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: PUSH
37772: LD_INT 1
37774: PUSH
37775: LD_INT 1
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: PUSH
37782: LD_INT 0
37784: PUSH
37785: LD_INT 1
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PUSH
37792: LD_INT 1
37794: NEG
37795: PUSH
37796: LD_INT 0
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: PUSH
37803: LD_INT 1
37805: NEG
37806: PUSH
37807: LD_INT 1
37809: NEG
37810: PUSH
37811: EMPTY
37812: LIST
37813: LIST
37814: PUSH
37815: LD_INT 1
37817: NEG
37818: PUSH
37819: LD_INT 2
37821: NEG
37822: PUSH
37823: EMPTY
37824: LIST
37825: LIST
37826: PUSH
37827: LD_INT 0
37829: PUSH
37830: LD_INT 2
37832: NEG
37833: PUSH
37834: EMPTY
37835: LIST
37836: LIST
37837: PUSH
37838: LD_INT 1
37840: PUSH
37841: LD_INT 1
37843: NEG
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: PUSH
37849: LD_INT 1
37851: PUSH
37852: LD_INT 2
37854: PUSH
37855: EMPTY
37856: LIST
37857: LIST
37858: PUSH
37859: LD_INT 0
37861: PUSH
37862: LD_INT 2
37864: PUSH
37865: EMPTY
37866: LIST
37867: LIST
37868: PUSH
37869: LD_INT 1
37871: NEG
37872: PUSH
37873: LD_INT 1
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: PUSH
37880: LD_INT 1
37882: PUSH
37883: LD_INT 3
37885: PUSH
37886: EMPTY
37887: LIST
37888: LIST
37889: PUSH
37890: LD_INT 0
37892: PUSH
37893: LD_INT 3
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: PUSH
37900: LD_INT 1
37902: NEG
37903: PUSH
37904: LD_INT 2
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: PUSH
37911: EMPTY
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37929: LD_ADDR_VAR 0 12
37933: PUSH
37934: LD_INT 0
37936: PUSH
37937: LD_INT 0
37939: PUSH
37940: EMPTY
37941: LIST
37942: LIST
37943: PUSH
37944: LD_INT 0
37946: PUSH
37947: LD_INT 1
37949: NEG
37950: PUSH
37951: EMPTY
37952: LIST
37953: LIST
37954: PUSH
37955: LD_INT 1
37957: PUSH
37958: LD_INT 0
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: PUSH
37965: LD_INT 1
37967: PUSH
37968: LD_INT 1
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: LD_INT 0
37977: PUSH
37978: LD_INT 1
37980: PUSH
37981: EMPTY
37982: LIST
37983: LIST
37984: PUSH
37985: LD_INT 1
37987: NEG
37988: PUSH
37989: LD_INT 0
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: PUSH
37996: LD_INT 1
37998: NEG
37999: PUSH
38000: LD_INT 1
38002: NEG
38003: PUSH
38004: EMPTY
38005: LIST
38006: LIST
38007: PUSH
38008: LD_INT 1
38010: PUSH
38011: LD_INT 1
38013: NEG
38014: PUSH
38015: EMPTY
38016: LIST
38017: LIST
38018: PUSH
38019: LD_INT 2
38021: PUSH
38022: LD_INT 0
38024: PUSH
38025: EMPTY
38026: LIST
38027: LIST
38028: PUSH
38029: LD_INT 2
38031: PUSH
38032: LD_INT 1
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: LD_INT 1
38041: NEG
38042: PUSH
38043: LD_INT 1
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: PUSH
38050: LD_INT 2
38052: NEG
38053: PUSH
38054: LD_INT 0
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: PUSH
38061: LD_INT 2
38063: NEG
38064: PUSH
38065: LD_INT 1
38067: NEG
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: PUSH
38073: LD_INT 2
38075: NEG
38076: PUSH
38077: LD_INT 1
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: PUSH
38084: LD_INT 3
38086: NEG
38087: PUSH
38088: LD_INT 0
38090: PUSH
38091: EMPTY
38092: LIST
38093: LIST
38094: PUSH
38095: LD_INT 3
38097: NEG
38098: PUSH
38099: LD_INT 1
38101: NEG
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: LIST
38111: LIST
38112: LIST
38113: LIST
38114: LIST
38115: LIST
38116: LIST
38117: LIST
38118: LIST
38119: LIST
38120: LIST
38121: LIST
38122: LIST
38123: LIST
38124: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38125: LD_ADDR_VAR 0 13
38129: PUSH
38130: LD_INT 0
38132: PUSH
38133: LD_INT 0
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: PUSH
38140: LD_INT 0
38142: PUSH
38143: LD_INT 1
38145: NEG
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PUSH
38151: LD_INT 1
38153: PUSH
38154: LD_INT 0
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: PUSH
38161: LD_INT 1
38163: PUSH
38164: LD_INT 1
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: PUSH
38171: LD_INT 0
38173: PUSH
38174: LD_INT 1
38176: PUSH
38177: EMPTY
38178: LIST
38179: LIST
38180: PUSH
38181: LD_INT 1
38183: NEG
38184: PUSH
38185: LD_INT 0
38187: PUSH
38188: EMPTY
38189: LIST
38190: LIST
38191: PUSH
38192: LD_INT 1
38194: NEG
38195: PUSH
38196: LD_INT 1
38198: NEG
38199: PUSH
38200: EMPTY
38201: LIST
38202: LIST
38203: PUSH
38204: LD_INT 1
38206: NEG
38207: PUSH
38208: LD_INT 2
38210: NEG
38211: PUSH
38212: EMPTY
38213: LIST
38214: LIST
38215: PUSH
38216: LD_INT 2
38218: PUSH
38219: LD_INT 1
38221: PUSH
38222: EMPTY
38223: LIST
38224: LIST
38225: PUSH
38226: LD_INT 2
38228: PUSH
38229: LD_INT 2
38231: PUSH
38232: EMPTY
38233: LIST
38234: LIST
38235: PUSH
38236: LD_INT 1
38238: PUSH
38239: LD_INT 2
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: PUSH
38246: LD_INT 2
38248: NEG
38249: PUSH
38250: LD_INT 1
38252: NEG
38253: PUSH
38254: EMPTY
38255: LIST
38256: LIST
38257: PUSH
38258: LD_INT 2
38260: NEG
38261: PUSH
38262: LD_INT 2
38264: NEG
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: PUSH
38270: LD_INT 2
38272: NEG
38273: PUSH
38274: LD_INT 3
38276: NEG
38277: PUSH
38278: EMPTY
38279: LIST
38280: LIST
38281: PUSH
38282: LD_INT 3
38284: NEG
38285: PUSH
38286: LD_INT 2
38288: NEG
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: PUSH
38294: LD_INT 3
38296: NEG
38297: PUSH
38298: LD_INT 3
38300: NEG
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: EMPTY
38307: LIST
38308: LIST
38309: LIST
38310: LIST
38311: LIST
38312: LIST
38313: LIST
38314: LIST
38315: LIST
38316: LIST
38317: LIST
38318: LIST
38319: LIST
38320: LIST
38321: LIST
38322: LIST
38323: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38324: LD_ADDR_VAR 0 14
38328: PUSH
38329: LD_INT 0
38331: PUSH
38332: LD_INT 0
38334: PUSH
38335: EMPTY
38336: LIST
38337: LIST
38338: PUSH
38339: LD_INT 0
38341: PUSH
38342: LD_INT 1
38344: NEG
38345: PUSH
38346: EMPTY
38347: LIST
38348: LIST
38349: PUSH
38350: LD_INT 1
38352: PUSH
38353: LD_INT 0
38355: PUSH
38356: EMPTY
38357: LIST
38358: LIST
38359: PUSH
38360: LD_INT 1
38362: PUSH
38363: LD_INT 1
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: PUSH
38370: LD_INT 0
38372: PUSH
38373: LD_INT 1
38375: PUSH
38376: EMPTY
38377: LIST
38378: LIST
38379: PUSH
38380: LD_INT 1
38382: NEG
38383: PUSH
38384: LD_INT 0
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: LD_INT 1
38393: NEG
38394: PUSH
38395: LD_INT 1
38397: NEG
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PUSH
38403: LD_INT 1
38405: NEG
38406: PUSH
38407: LD_INT 2
38409: NEG
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: PUSH
38415: LD_INT 0
38417: PUSH
38418: LD_INT 2
38420: NEG
38421: PUSH
38422: EMPTY
38423: LIST
38424: LIST
38425: PUSH
38426: LD_INT 1
38428: PUSH
38429: LD_INT 1
38431: NEG
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: PUSH
38437: LD_INT 1
38439: PUSH
38440: LD_INT 2
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: PUSH
38447: LD_INT 0
38449: PUSH
38450: LD_INT 2
38452: PUSH
38453: EMPTY
38454: LIST
38455: LIST
38456: PUSH
38457: LD_INT 1
38459: NEG
38460: PUSH
38461: LD_INT 1
38463: PUSH
38464: EMPTY
38465: LIST
38466: LIST
38467: PUSH
38468: LD_INT 1
38470: NEG
38471: PUSH
38472: LD_INT 3
38474: NEG
38475: PUSH
38476: EMPTY
38477: LIST
38478: LIST
38479: PUSH
38480: LD_INT 0
38482: PUSH
38483: LD_INT 3
38485: NEG
38486: PUSH
38487: EMPTY
38488: LIST
38489: LIST
38490: PUSH
38491: LD_INT 1
38493: PUSH
38494: LD_INT 2
38496: NEG
38497: PUSH
38498: EMPTY
38499: LIST
38500: LIST
38501: PUSH
38502: EMPTY
38503: LIST
38504: LIST
38505: LIST
38506: LIST
38507: LIST
38508: LIST
38509: LIST
38510: LIST
38511: LIST
38512: LIST
38513: LIST
38514: LIST
38515: LIST
38516: LIST
38517: LIST
38518: LIST
38519: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38520: LD_ADDR_VAR 0 15
38524: PUSH
38525: LD_INT 0
38527: PUSH
38528: LD_INT 0
38530: PUSH
38531: EMPTY
38532: LIST
38533: LIST
38534: PUSH
38535: LD_INT 0
38537: PUSH
38538: LD_INT 1
38540: NEG
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 1
38548: PUSH
38549: LD_INT 0
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: PUSH
38556: LD_INT 1
38558: PUSH
38559: LD_INT 1
38561: PUSH
38562: EMPTY
38563: LIST
38564: LIST
38565: PUSH
38566: LD_INT 0
38568: PUSH
38569: LD_INT 1
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: PUSH
38576: LD_INT 1
38578: NEG
38579: PUSH
38580: LD_INT 0
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 1
38589: NEG
38590: PUSH
38591: LD_INT 1
38593: NEG
38594: PUSH
38595: EMPTY
38596: LIST
38597: LIST
38598: PUSH
38599: LD_INT 1
38601: PUSH
38602: LD_INT 1
38604: NEG
38605: PUSH
38606: EMPTY
38607: LIST
38608: LIST
38609: PUSH
38610: LD_INT 2
38612: PUSH
38613: LD_INT 0
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: PUSH
38620: LD_INT 2
38622: PUSH
38623: LD_INT 1
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: PUSH
38630: LD_INT 1
38632: NEG
38633: PUSH
38634: LD_INT 1
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: PUSH
38641: LD_INT 2
38643: NEG
38644: PUSH
38645: LD_INT 0
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: LD_INT 2
38654: NEG
38655: PUSH
38656: LD_INT 1
38658: NEG
38659: PUSH
38660: EMPTY
38661: LIST
38662: LIST
38663: PUSH
38664: LD_INT 2
38666: PUSH
38667: LD_INT 1
38669: NEG
38670: PUSH
38671: EMPTY
38672: LIST
38673: LIST
38674: PUSH
38675: LD_INT 3
38677: PUSH
38678: LD_INT 0
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: PUSH
38685: LD_INT 3
38687: PUSH
38688: LD_INT 1
38690: PUSH
38691: EMPTY
38692: LIST
38693: LIST
38694: PUSH
38695: EMPTY
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: LIST
38701: LIST
38702: LIST
38703: LIST
38704: LIST
38705: LIST
38706: LIST
38707: LIST
38708: LIST
38709: LIST
38710: LIST
38711: LIST
38712: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38713: LD_ADDR_VAR 0 16
38717: PUSH
38718: LD_INT 0
38720: PUSH
38721: LD_INT 0
38723: PUSH
38724: EMPTY
38725: LIST
38726: LIST
38727: PUSH
38728: LD_INT 0
38730: PUSH
38731: LD_INT 1
38733: NEG
38734: PUSH
38735: EMPTY
38736: LIST
38737: LIST
38738: PUSH
38739: LD_INT 1
38741: PUSH
38742: LD_INT 0
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PUSH
38749: LD_INT 1
38751: PUSH
38752: LD_INT 1
38754: PUSH
38755: EMPTY
38756: LIST
38757: LIST
38758: PUSH
38759: LD_INT 0
38761: PUSH
38762: LD_INT 1
38764: PUSH
38765: EMPTY
38766: LIST
38767: LIST
38768: PUSH
38769: LD_INT 1
38771: NEG
38772: PUSH
38773: LD_INT 0
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: PUSH
38780: LD_INT 1
38782: NEG
38783: PUSH
38784: LD_INT 1
38786: NEG
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: PUSH
38792: LD_INT 1
38794: NEG
38795: PUSH
38796: LD_INT 2
38798: NEG
38799: PUSH
38800: EMPTY
38801: LIST
38802: LIST
38803: PUSH
38804: LD_INT 2
38806: PUSH
38807: LD_INT 1
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: PUSH
38814: LD_INT 2
38816: PUSH
38817: LD_INT 2
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: PUSH
38824: LD_INT 1
38826: PUSH
38827: LD_INT 2
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: PUSH
38834: LD_INT 2
38836: NEG
38837: PUSH
38838: LD_INT 1
38840: NEG
38841: PUSH
38842: EMPTY
38843: LIST
38844: LIST
38845: PUSH
38846: LD_INT 2
38848: NEG
38849: PUSH
38850: LD_INT 2
38852: NEG
38853: PUSH
38854: EMPTY
38855: LIST
38856: LIST
38857: PUSH
38858: LD_INT 3
38860: PUSH
38861: LD_INT 2
38863: PUSH
38864: EMPTY
38865: LIST
38866: LIST
38867: PUSH
38868: LD_INT 3
38870: PUSH
38871: LD_INT 3
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: PUSH
38878: LD_INT 2
38880: PUSH
38881: LD_INT 3
38883: PUSH
38884: EMPTY
38885: LIST
38886: LIST
38887: PUSH
38888: EMPTY
38889: LIST
38890: LIST
38891: LIST
38892: LIST
38893: LIST
38894: LIST
38895: LIST
38896: LIST
38897: LIST
38898: LIST
38899: LIST
38900: LIST
38901: LIST
38902: LIST
38903: LIST
38904: LIST
38905: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38906: LD_ADDR_VAR 0 17
38910: PUSH
38911: LD_INT 0
38913: PUSH
38914: LD_INT 0
38916: PUSH
38917: EMPTY
38918: LIST
38919: LIST
38920: PUSH
38921: LD_INT 0
38923: PUSH
38924: LD_INT 1
38926: NEG
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: PUSH
38932: LD_INT 1
38934: PUSH
38935: LD_INT 0
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: PUSH
38942: LD_INT 1
38944: PUSH
38945: LD_INT 1
38947: PUSH
38948: EMPTY
38949: LIST
38950: LIST
38951: PUSH
38952: LD_INT 0
38954: PUSH
38955: LD_INT 1
38957: PUSH
38958: EMPTY
38959: LIST
38960: LIST
38961: PUSH
38962: LD_INT 1
38964: NEG
38965: PUSH
38966: LD_INT 0
38968: PUSH
38969: EMPTY
38970: LIST
38971: LIST
38972: PUSH
38973: LD_INT 1
38975: NEG
38976: PUSH
38977: LD_INT 1
38979: NEG
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PUSH
38985: LD_INT 1
38987: NEG
38988: PUSH
38989: LD_INT 2
38991: NEG
38992: PUSH
38993: EMPTY
38994: LIST
38995: LIST
38996: PUSH
38997: LD_INT 0
38999: PUSH
39000: LD_INT 2
39002: NEG
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 1
39010: PUSH
39011: LD_INT 1
39013: NEG
39014: PUSH
39015: EMPTY
39016: LIST
39017: LIST
39018: PUSH
39019: LD_INT 2
39021: PUSH
39022: LD_INT 0
39024: PUSH
39025: EMPTY
39026: LIST
39027: LIST
39028: PUSH
39029: LD_INT 2
39031: PUSH
39032: LD_INT 1
39034: PUSH
39035: EMPTY
39036: LIST
39037: LIST
39038: PUSH
39039: LD_INT 2
39041: PUSH
39042: LD_INT 2
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: PUSH
39049: LD_INT 1
39051: PUSH
39052: LD_INT 2
39054: PUSH
39055: EMPTY
39056: LIST
39057: LIST
39058: PUSH
39059: LD_INT 0
39061: PUSH
39062: LD_INT 2
39064: PUSH
39065: EMPTY
39066: LIST
39067: LIST
39068: PUSH
39069: LD_INT 1
39071: NEG
39072: PUSH
39073: LD_INT 1
39075: PUSH
39076: EMPTY
39077: LIST
39078: LIST
39079: PUSH
39080: LD_INT 2
39082: NEG
39083: PUSH
39084: LD_INT 0
39086: PUSH
39087: EMPTY
39088: LIST
39089: LIST
39090: PUSH
39091: LD_INT 2
39093: NEG
39094: PUSH
39095: LD_INT 1
39097: NEG
39098: PUSH
39099: EMPTY
39100: LIST
39101: LIST
39102: PUSH
39103: LD_INT 2
39105: NEG
39106: PUSH
39107: LD_INT 2
39109: NEG
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: LIST
39119: LIST
39120: LIST
39121: LIST
39122: LIST
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39136: LD_ADDR_VAR 0 18
39140: PUSH
39141: LD_INT 0
39143: PUSH
39144: LD_INT 0
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: PUSH
39151: LD_INT 0
39153: PUSH
39154: LD_INT 1
39156: NEG
39157: PUSH
39158: EMPTY
39159: LIST
39160: LIST
39161: PUSH
39162: LD_INT 1
39164: PUSH
39165: LD_INT 0
39167: PUSH
39168: EMPTY
39169: LIST
39170: LIST
39171: PUSH
39172: LD_INT 1
39174: PUSH
39175: LD_INT 1
39177: PUSH
39178: EMPTY
39179: LIST
39180: LIST
39181: PUSH
39182: LD_INT 0
39184: PUSH
39185: LD_INT 1
39187: PUSH
39188: EMPTY
39189: LIST
39190: LIST
39191: PUSH
39192: LD_INT 1
39194: NEG
39195: PUSH
39196: LD_INT 0
39198: PUSH
39199: EMPTY
39200: LIST
39201: LIST
39202: PUSH
39203: LD_INT 1
39205: NEG
39206: PUSH
39207: LD_INT 1
39209: NEG
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: PUSH
39215: LD_INT 1
39217: NEG
39218: PUSH
39219: LD_INT 2
39221: NEG
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: PUSH
39227: LD_INT 0
39229: PUSH
39230: LD_INT 2
39232: NEG
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: PUSH
39238: LD_INT 1
39240: PUSH
39241: LD_INT 1
39243: NEG
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PUSH
39249: LD_INT 2
39251: PUSH
39252: LD_INT 0
39254: PUSH
39255: EMPTY
39256: LIST
39257: LIST
39258: PUSH
39259: LD_INT 2
39261: PUSH
39262: LD_INT 1
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: PUSH
39269: LD_INT 2
39271: PUSH
39272: LD_INT 2
39274: PUSH
39275: EMPTY
39276: LIST
39277: LIST
39278: PUSH
39279: LD_INT 1
39281: PUSH
39282: LD_INT 2
39284: PUSH
39285: EMPTY
39286: LIST
39287: LIST
39288: PUSH
39289: LD_INT 0
39291: PUSH
39292: LD_INT 2
39294: PUSH
39295: EMPTY
39296: LIST
39297: LIST
39298: PUSH
39299: LD_INT 1
39301: NEG
39302: PUSH
39303: LD_INT 1
39305: PUSH
39306: EMPTY
39307: LIST
39308: LIST
39309: PUSH
39310: LD_INT 2
39312: NEG
39313: PUSH
39314: LD_INT 0
39316: PUSH
39317: EMPTY
39318: LIST
39319: LIST
39320: PUSH
39321: LD_INT 2
39323: NEG
39324: PUSH
39325: LD_INT 1
39327: NEG
39328: PUSH
39329: EMPTY
39330: LIST
39331: LIST
39332: PUSH
39333: LD_INT 2
39335: NEG
39336: PUSH
39337: LD_INT 2
39339: NEG
39340: PUSH
39341: EMPTY
39342: LIST
39343: LIST
39344: PUSH
39345: EMPTY
39346: LIST
39347: LIST
39348: LIST
39349: LIST
39350: LIST
39351: LIST
39352: LIST
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: LIST
39360: LIST
39361: LIST
39362: LIST
39363: LIST
39364: LIST
39365: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39366: LD_ADDR_VAR 0 19
39370: PUSH
39371: LD_INT 0
39373: PUSH
39374: LD_INT 0
39376: PUSH
39377: EMPTY
39378: LIST
39379: LIST
39380: PUSH
39381: LD_INT 0
39383: PUSH
39384: LD_INT 1
39386: NEG
39387: PUSH
39388: EMPTY
39389: LIST
39390: LIST
39391: PUSH
39392: LD_INT 1
39394: PUSH
39395: LD_INT 0
39397: PUSH
39398: EMPTY
39399: LIST
39400: LIST
39401: PUSH
39402: LD_INT 1
39404: PUSH
39405: LD_INT 1
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: LD_INT 0
39414: PUSH
39415: LD_INT 1
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: PUSH
39422: LD_INT 1
39424: NEG
39425: PUSH
39426: LD_INT 0
39428: PUSH
39429: EMPTY
39430: LIST
39431: LIST
39432: PUSH
39433: LD_INT 1
39435: NEG
39436: PUSH
39437: LD_INT 1
39439: NEG
39440: PUSH
39441: EMPTY
39442: LIST
39443: LIST
39444: PUSH
39445: LD_INT 1
39447: NEG
39448: PUSH
39449: LD_INT 2
39451: NEG
39452: PUSH
39453: EMPTY
39454: LIST
39455: LIST
39456: PUSH
39457: LD_INT 0
39459: PUSH
39460: LD_INT 2
39462: NEG
39463: PUSH
39464: EMPTY
39465: LIST
39466: LIST
39467: PUSH
39468: LD_INT 1
39470: PUSH
39471: LD_INT 1
39473: NEG
39474: PUSH
39475: EMPTY
39476: LIST
39477: LIST
39478: PUSH
39479: LD_INT 2
39481: PUSH
39482: LD_INT 0
39484: PUSH
39485: EMPTY
39486: LIST
39487: LIST
39488: PUSH
39489: LD_INT 2
39491: PUSH
39492: LD_INT 1
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: PUSH
39499: LD_INT 2
39501: PUSH
39502: LD_INT 2
39504: PUSH
39505: EMPTY
39506: LIST
39507: LIST
39508: PUSH
39509: LD_INT 1
39511: PUSH
39512: LD_INT 2
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PUSH
39519: LD_INT 0
39521: PUSH
39522: LD_INT 2
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: PUSH
39529: LD_INT 1
39531: NEG
39532: PUSH
39533: LD_INT 1
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: LD_INT 2
39542: NEG
39543: PUSH
39544: LD_INT 0
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: PUSH
39551: LD_INT 2
39553: NEG
39554: PUSH
39555: LD_INT 1
39557: NEG
39558: PUSH
39559: EMPTY
39560: LIST
39561: LIST
39562: PUSH
39563: LD_INT 2
39565: NEG
39566: PUSH
39567: LD_INT 2
39569: NEG
39570: PUSH
39571: EMPTY
39572: LIST
39573: LIST
39574: PUSH
39575: EMPTY
39576: LIST
39577: LIST
39578: LIST
39579: LIST
39580: LIST
39581: LIST
39582: LIST
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39596: LD_ADDR_VAR 0 20
39600: PUSH
39601: LD_INT 0
39603: PUSH
39604: LD_INT 0
39606: PUSH
39607: EMPTY
39608: LIST
39609: LIST
39610: PUSH
39611: LD_INT 0
39613: PUSH
39614: LD_INT 1
39616: NEG
39617: PUSH
39618: EMPTY
39619: LIST
39620: LIST
39621: PUSH
39622: LD_INT 1
39624: PUSH
39625: LD_INT 0
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: LD_INT 1
39634: PUSH
39635: LD_INT 1
39637: PUSH
39638: EMPTY
39639: LIST
39640: LIST
39641: PUSH
39642: LD_INT 0
39644: PUSH
39645: LD_INT 1
39647: PUSH
39648: EMPTY
39649: LIST
39650: LIST
39651: PUSH
39652: LD_INT 1
39654: NEG
39655: PUSH
39656: LD_INT 0
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: PUSH
39663: LD_INT 1
39665: NEG
39666: PUSH
39667: LD_INT 1
39669: NEG
39670: PUSH
39671: EMPTY
39672: LIST
39673: LIST
39674: PUSH
39675: LD_INT 1
39677: NEG
39678: PUSH
39679: LD_INT 2
39681: NEG
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: PUSH
39687: LD_INT 0
39689: PUSH
39690: LD_INT 2
39692: NEG
39693: PUSH
39694: EMPTY
39695: LIST
39696: LIST
39697: PUSH
39698: LD_INT 1
39700: PUSH
39701: LD_INT 1
39703: NEG
39704: PUSH
39705: EMPTY
39706: LIST
39707: LIST
39708: PUSH
39709: LD_INT 2
39711: PUSH
39712: LD_INT 0
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: LD_INT 2
39721: PUSH
39722: LD_INT 1
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: PUSH
39729: LD_INT 2
39731: PUSH
39732: LD_INT 2
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: PUSH
39739: LD_INT 1
39741: PUSH
39742: LD_INT 2
39744: PUSH
39745: EMPTY
39746: LIST
39747: LIST
39748: PUSH
39749: LD_INT 0
39751: PUSH
39752: LD_INT 2
39754: PUSH
39755: EMPTY
39756: LIST
39757: LIST
39758: PUSH
39759: LD_INT 1
39761: NEG
39762: PUSH
39763: LD_INT 1
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: PUSH
39770: LD_INT 2
39772: NEG
39773: PUSH
39774: LD_INT 0
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: LD_INT 2
39783: NEG
39784: PUSH
39785: LD_INT 1
39787: NEG
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: PUSH
39793: LD_INT 2
39795: NEG
39796: PUSH
39797: LD_INT 2
39799: NEG
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: PUSH
39805: EMPTY
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: LIST
39825: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39826: LD_ADDR_VAR 0 21
39830: PUSH
39831: LD_INT 0
39833: PUSH
39834: LD_INT 0
39836: PUSH
39837: EMPTY
39838: LIST
39839: LIST
39840: PUSH
39841: LD_INT 0
39843: PUSH
39844: LD_INT 1
39846: NEG
39847: PUSH
39848: EMPTY
39849: LIST
39850: LIST
39851: PUSH
39852: LD_INT 1
39854: PUSH
39855: LD_INT 0
39857: PUSH
39858: EMPTY
39859: LIST
39860: LIST
39861: PUSH
39862: LD_INT 1
39864: PUSH
39865: LD_INT 1
39867: PUSH
39868: EMPTY
39869: LIST
39870: LIST
39871: PUSH
39872: LD_INT 0
39874: PUSH
39875: LD_INT 1
39877: PUSH
39878: EMPTY
39879: LIST
39880: LIST
39881: PUSH
39882: LD_INT 1
39884: NEG
39885: PUSH
39886: LD_INT 0
39888: PUSH
39889: EMPTY
39890: LIST
39891: LIST
39892: PUSH
39893: LD_INT 1
39895: NEG
39896: PUSH
39897: LD_INT 1
39899: NEG
39900: PUSH
39901: EMPTY
39902: LIST
39903: LIST
39904: PUSH
39905: LD_INT 1
39907: NEG
39908: PUSH
39909: LD_INT 2
39911: NEG
39912: PUSH
39913: EMPTY
39914: LIST
39915: LIST
39916: PUSH
39917: LD_INT 0
39919: PUSH
39920: LD_INT 2
39922: NEG
39923: PUSH
39924: EMPTY
39925: LIST
39926: LIST
39927: PUSH
39928: LD_INT 1
39930: PUSH
39931: LD_INT 1
39933: NEG
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 2
39941: PUSH
39942: LD_INT 0
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PUSH
39949: LD_INT 2
39951: PUSH
39952: LD_INT 1
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: PUSH
39959: LD_INT 2
39961: PUSH
39962: LD_INT 2
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: LD_INT 1
39971: PUSH
39972: LD_INT 2
39974: PUSH
39975: EMPTY
39976: LIST
39977: LIST
39978: PUSH
39979: LD_INT 0
39981: PUSH
39982: LD_INT 2
39984: PUSH
39985: EMPTY
39986: LIST
39987: LIST
39988: PUSH
39989: LD_INT 1
39991: NEG
39992: PUSH
39993: LD_INT 1
39995: PUSH
39996: EMPTY
39997: LIST
39998: LIST
39999: PUSH
40000: LD_INT 2
40002: NEG
40003: PUSH
40004: LD_INT 0
40006: PUSH
40007: EMPTY
40008: LIST
40009: LIST
40010: PUSH
40011: LD_INT 2
40013: NEG
40014: PUSH
40015: LD_INT 1
40017: NEG
40018: PUSH
40019: EMPTY
40020: LIST
40021: LIST
40022: PUSH
40023: LD_INT 2
40025: NEG
40026: PUSH
40027: LD_INT 2
40029: NEG
40030: PUSH
40031: EMPTY
40032: LIST
40033: LIST
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: LIST
40039: LIST
40040: LIST
40041: LIST
40042: LIST
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40056: LD_ADDR_VAR 0 22
40060: PUSH
40061: LD_INT 0
40063: PUSH
40064: LD_INT 0
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: LD_INT 0
40073: PUSH
40074: LD_INT 1
40076: NEG
40077: PUSH
40078: EMPTY
40079: LIST
40080: LIST
40081: PUSH
40082: LD_INT 1
40084: PUSH
40085: LD_INT 0
40087: PUSH
40088: EMPTY
40089: LIST
40090: LIST
40091: PUSH
40092: LD_INT 1
40094: PUSH
40095: LD_INT 1
40097: PUSH
40098: EMPTY
40099: LIST
40100: LIST
40101: PUSH
40102: LD_INT 0
40104: PUSH
40105: LD_INT 1
40107: PUSH
40108: EMPTY
40109: LIST
40110: LIST
40111: PUSH
40112: LD_INT 1
40114: NEG
40115: PUSH
40116: LD_INT 0
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: PUSH
40123: LD_INT 1
40125: NEG
40126: PUSH
40127: LD_INT 1
40129: NEG
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: PUSH
40135: LD_INT 1
40137: NEG
40138: PUSH
40139: LD_INT 2
40141: NEG
40142: PUSH
40143: EMPTY
40144: LIST
40145: LIST
40146: PUSH
40147: LD_INT 0
40149: PUSH
40150: LD_INT 2
40152: NEG
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 1
40160: PUSH
40161: LD_INT 1
40163: NEG
40164: PUSH
40165: EMPTY
40166: LIST
40167: LIST
40168: PUSH
40169: LD_INT 2
40171: PUSH
40172: LD_INT 0
40174: PUSH
40175: EMPTY
40176: LIST
40177: LIST
40178: PUSH
40179: LD_INT 2
40181: PUSH
40182: LD_INT 1
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 2
40191: PUSH
40192: LD_INT 2
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 1
40201: PUSH
40202: LD_INT 2
40204: PUSH
40205: EMPTY
40206: LIST
40207: LIST
40208: PUSH
40209: LD_INT 0
40211: PUSH
40212: LD_INT 2
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: PUSH
40219: LD_INT 1
40221: NEG
40222: PUSH
40223: LD_INT 1
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: PUSH
40230: LD_INT 2
40232: NEG
40233: PUSH
40234: LD_INT 0
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 2
40243: NEG
40244: PUSH
40245: LD_INT 1
40247: NEG
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 2
40255: NEG
40256: PUSH
40257: LD_INT 2
40259: NEG
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: EMPTY
40266: LIST
40267: LIST
40268: LIST
40269: LIST
40270: LIST
40271: LIST
40272: LIST
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40286: LD_ADDR_VAR 0 23
40290: PUSH
40291: LD_INT 0
40293: PUSH
40294: LD_INT 0
40296: PUSH
40297: EMPTY
40298: LIST
40299: LIST
40300: PUSH
40301: LD_INT 0
40303: PUSH
40304: LD_INT 1
40306: NEG
40307: PUSH
40308: EMPTY
40309: LIST
40310: LIST
40311: PUSH
40312: LD_INT 1
40314: PUSH
40315: LD_INT 0
40317: PUSH
40318: EMPTY
40319: LIST
40320: LIST
40321: PUSH
40322: LD_INT 1
40324: PUSH
40325: LD_INT 1
40327: PUSH
40328: EMPTY
40329: LIST
40330: LIST
40331: PUSH
40332: LD_INT 0
40334: PUSH
40335: LD_INT 1
40337: PUSH
40338: EMPTY
40339: LIST
40340: LIST
40341: PUSH
40342: LD_INT 1
40344: NEG
40345: PUSH
40346: LD_INT 0
40348: PUSH
40349: EMPTY
40350: LIST
40351: LIST
40352: PUSH
40353: LD_INT 1
40355: NEG
40356: PUSH
40357: LD_INT 1
40359: NEG
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: PUSH
40365: LD_INT 1
40367: NEG
40368: PUSH
40369: LD_INT 2
40371: NEG
40372: PUSH
40373: EMPTY
40374: LIST
40375: LIST
40376: PUSH
40377: LD_INT 0
40379: PUSH
40380: LD_INT 2
40382: NEG
40383: PUSH
40384: EMPTY
40385: LIST
40386: LIST
40387: PUSH
40388: LD_INT 1
40390: PUSH
40391: LD_INT 1
40393: NEG
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 2
40401: PUSH
40402: LD_INT 0
40404: PUSH
40405: EMPTY
40406: LIST
40407: LIST
40408: PUSH
40409: LD_INT 2
40411: PUSH
40412: LD_INT 1
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: PUSH
40419: LD_INT 2
40421: PUSH
40422: LD_INT 2
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: LD_INT 1
40431: PUSH
40432: LD_INT 2
40434: PUSH
40435: EMPTY
40436: LIST
40437: LIST
40438: PUSH
40439: LD_INT 0
40441: PUSH
40442: LD_INT 2
40444: PUSH
40445: EMPTY
40446: LIST
40447: LIST
40448: PUSH
40449: LD_INT 1
40451: NEG
40452: PUSH
40453: LD_INT 1
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: PUSH
40460: LD_INT 2
40462: NEG
40463: PUSH
40464: LD_INT 0
40466: PUSH
40467: EMPTY
40468: LIST
40469: LIST
40470: PUSH
40471: LD_INT 2
40473: NEG
40474: PUSH
40475: LD_INT 1
40477: NEG
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: LD_INT 2
40485: NEG
40486: PUSH
40487: LD_INT 2
40489: NEG
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 2
40497: NEG
40498: PUSH
40499: LD_INT 3
40501: NEG
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: LD_INT 1
40509: NEG
40510: PUSH
40511: LD_INT 3
40513: NEG
40514: PUSH
40515: EMPTY
40516: LIST
40517: LIST
40518: PUSH
40519: LD_INT 1
40521: PUSH
40522: LD_INT 2
40524: NEG
40525: PUSH
40526: EMPTY
40527: LIST
40528: LIST
40529: PUSH
40530: LD_INT 2
40532: PUSH
40533: LD_INT 1
40535: NEG
40536: PUSH
40537: EMPTY
40538: LIST
40539: LIST
40540: PUSH
40541: EMPTY
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
40566: LD_ADDR_VAR 0 24
40570: PUSH
40571: LD_INT 0
40573: PUSH
40574: LD_INT 0
40576: PUSH
40577: EMPTY
40578: LIST
40579: LIST
40580: PUSH
40581: LD_INT 0
40583: PUSH
40584: LD_INT 1
40586: NEG
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: PUSH
40592: LD_INT 1
40594: PUSH
40595: LD_INT 0
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: PUSH
40602: LD_INT 1
40604: PUSH
40605: LD_INT 1
40607: PUSH
40608: EMPTY
40609: LIST
40610: LIST
40611: PUSH
40612: LD_INT 0
40614: PUSH
40615: LD_INT 1
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_INT 1
40624: NEG
40625: PUSH
40626: LD_INT 0
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: LD_INT 1
40635: NEG
40636: PUSH
40637: LD_INT 1
40639: NEG
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: PUSH
40645: LD_INT 1
40647: NEG
40648: PUSH
40649: LD_INT 2
40651: NEG
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 0
40659: PUSH
40660: LD_INT 2
40662: NEG
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 1
40670: PUSH
40671: LD_INT 1
40673: NEG
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 2
40681: PUSH
40682: LD_INT 0
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 2
40691: PUSH
40692: LD_INT 1
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: LD_INT 2
40701: PUSH
40702: LD_INT 2
40704: PUSH
40705: EMPTY
40706: LIST
40707: LIST
40708: PUSH
40709: LD_INT 1
40711: PUSH
40712: LD_INT 2
40714: PUSH
40715: EMPTY
40716: LIST
40717: LIST
40718: PUSH
40719: LD_INT 0
40721: PUSH
40722: LD_INT 2
40724: PUSH
40725: EMPTY
40726: LIST
40727: LIST
40728: PUSH
40729: LD_INT 1
40731: NEG
40732: PUSH
40733: LD_INT 1
40735: PUSH
40736: EMPTY
40737: LIST
40738: LIST
40739: PUSH
40740: LD_INT 2
40742: NEG
40743: PUSH
40744: LD_INT 0
40746: PUSH
40747: EMPTY
40748: LIST
40749: LIST
40750: PUSH
40751: LD_INT 2
40753: NEG
40754: PUSH
40755: LD_INT 1
40757: NEG
40758: PUSH
40759: EMPTY
40760: LIST
40761: LIST
40762: PUSH
40763: LD_INT 2
40765: NEG
40766: PUSH
40767: LD_INT 2
40769: NEG
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: LD_INT 1
40777: PUSH
40778: LD_INT 2
40780: NEG
40781: PUSH
40782: EMPTY
40783: LIST
40784: LIST
40785: PUSH
40786: LD_INT 2
40788: PUSH
40789: LD_INT 1
40791: NEG
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 3
40799: PUSH
40800: LD_INT 1
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PUSH
40807: LD_INT 3
40809: PUSH
40810: LD_INT 2
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: EMPTY
40818: LIST
40819: LIST
40820: LIST
40821: LIST
40822: LIST
40823: LIST
40824: LIST
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
40842: LD_ADDR_VAR 0 25
40846: PUSH
40847: LD_INT 0
40849: PUSH
40850: LD_INT 0
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: LD_INT 0
40859: PUSH
40860: LD_INT 1
40862: NEG
40863: PUSH
40864: EMPTY
40865: LIST
40866: LIST
40867: PUSH
40868: LD_INT 1
40870: PUSH
40871: LD_INT 0
40873: PUSH
40874: EMPTY
40875: LIST
40876: LIST
40877: PUSH
40878: LD_INT 1
40880: PUSH
40881: LD_INT 1
40883: PUSH
40884: EMPTY
40885: LIST
40886: LIST
40887: PUSH
40888: LD_INT 0
40890: PUSH
40891: LD_INT 1
40893: PUSH
40894: EMPTY
40895: LIST
40896: LIST
40897: PUSH
40898: LD_INT 1
40900: NEG
40901: PUSH
40902: LD_INT 0
40904: PUSH
40905: EMPTY
40906: LIST
40907: LIST
40908: PUSH
40909: LD_INT 1
40911: NEG
40912: PUSH
40913: LD_INT 1
40915: NEG
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: PUSH
40921: LD_INT 1
40923: NEG
40924: PUSH
40925: LD_INT 2
40927: NEG
40928: PUSH
40929: EMPTY
40930: LIST
40931: LIST
40932: PUSH
40933: LD_INT 0
40935: PUSH
40936: LD_INT 2
40938: NEG
40939: PUSH
40940: EMPTY
40941: LIST
40942: LIST
40943: PUSH
40944: LD_INT 1
40946: PUSH
40947: LD_INT 1
40949: NEG
40950: PUSH
40951: EMPTY
40952: LIST
40953: LIST
40954: PUSH
40955: LD_INT 2
40957: PUSH
40958: LD_INT 0
40960: PUSH
40961: EMPTY
40962: LIST
40963: LIST
40964: PUSH
40965: LD_INT 2
40967: PUSH
40968: LD_INT 1
40970: PUSH
40971: EMPTY
40972: LIST
40973: LIST
40974: PUSH
40975: LD_INT 2
40977: PUSH
40978: LD_INT 2
40980: PUSH
40981: EMPTY
40982: LIST
40983: LIST
40984: PUSH
40985: LD_INT 1
40987: PUSH
40988: LD_INT 2
40990: PUSH
40991: EMPTY
40992: LIST
40993: LIST
40994: PUSH
40995: LD_INT 0
40997: PUSH
40998: LD_INT 2
41000: PUSH
41001: EMPTY
41002: LIST
41003: LIST
41004: PUSH
41005: LD_INT 1
41007: NEG
41008: PUSH
41009: LD_INT 1
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: LD_INT 2
41018: NEG
41019: PUSH
41020: LD_INT 0
41022: PUSH
41023: EMPTY
41024: LIST
41025: LIST
41026: PUSH
41027: LD_INT 2
41029: NEG
41030: PUSH
41031: LD_INT 1
41033: NEG
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: LD_INT 2
41041: NEG
41042: PUSH
41043: LD_INT 2
41045: NEG
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: LD_INT 3
41053: PUSH
41054: LD_INT 1
41056: PUSH
41057: EMPTY
41058: LIST
41059: LIST
41060: PUSH
41061: LD_INT 3
41063: PUSH
41064: LD_INT 2
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: LD_INT 2
41073: PUSH
41074: LD_INT 3
41076: PUSH
41077: EMPTY
41078: LIST
41079: LIST
41080: PUSH
41081: LD_INT 1
41083: PUSH
41084: LD_INT 3
41086: PUSH
41087: EMPTY
41088: LIST
41089: LIST
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: LIST
41095: LIST
41096: LIST
41097: LIST
41098: LIST
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: LIST
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41116: LD_ADDR_VAR 0 26
41120: PUSH
41121: LD_INT 0
41123: PUSH
41124: LD_INT 0
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 0
41133: PUSH
41134: LD_INT 1
41136: NEG
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 1
41144: PUSH
41145: LD_INT 0
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 1
41154: PUSH
41155: LD_INT 1
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 0
41164: PUSH
41165: LD_INT 1
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: LD_INT 1
41174: NEG
41175: PUSH
41176: LD_INT 0
41178: PUSH
41179: EMPTY
41180: LIST
41181: LIST
41182: PUSH
41183: LD_INT 1
41185: NEG
41186: PUSH
41187: LD_INT 1
41189: NEG
41190: PUSH
41191: EMPTY
41192: LIST
41193: LIST
41194: PUSH
41195: LD_INT 1
41197: NEG
41198: PUSH
41199: LD_INT 2
41201: NEG
41202: PUSH
41203: EMPTY
41204: LIST
41205: LIST
41206: PUSH
41207: LD_INT 0
41209: PUSH
41210: LD_INT 2
41212: NEG
41213: PUSH
41214: EMPTY
41215: LIST
41216: LIST
41217: PUSH
41218: LD_INT 1
41220: PUSH
41221: LD_INT 1
41223: NEG
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: LD_INT 2
41231: PUSH
41232: LD_INT 0
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 2
41241: PUSH
41242: LD_INT 1
41244: PUSH
41245: EMPTY
41246: LIST
41247: LIST
41248: PUSH
41249: LD_INT 2
41251: PUSH
41252: LD_INT 2
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 1
41261: PUSH
41262: LD_INT 2
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: LD_INT 0
41271: PUSH
41272: LD_INT 2
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: LD_INT 1
41281: NEG
41282: PUSH
41283: LD_INT 1
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 2
41292: NEG
41293: PUSH
41294: LD_INT 0
41296: PUSH
41297: EMPTY
41298: LIST
41299: LIST
41300: PUSH
41301: LD_INT 2
41303: NEG
41304: PUSH
41305: LD_INT 1
41307: NEG
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PUSH
41313: LD_INT 2
41315: NEG
41316: PUSH
41317: LD_INT 2
41319: NEG
41320: PUSH
41321: EMPTY
41322: LIST
41323: LIST
41324: PUSH
41325: LD_INT 2
41327: PUSH
41328: LD_INT 3
41330: PUSH
41331: EMPTY
41332: LIST
41333: LIST
41334: PUSH
41335: LD_INT 1
41337: PUSH
41338: LD_INT 3
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: LD_INT 1
41347: NEG
41348: PUSH
41349: LD_INT 2
41351: PUSH
41352: EMPTY
41353: LIST
41354: LIST
41355: PUSH
41356: LD_INT 2
41358: NEG
41359: PUSH
41360: LD_INT 1
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: EMPTY
41368: LIST
41369: LIST
41370: LIST
41371: LIST
41372: LIST
41373: LIST
41374: LIST
41375: LIST
41376: LIST
41377: LIST
41378: LIST
41379: LIST
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41392: LD_ADDR_VAR 0 27
41396: PUSH
41397: LD_INT 0
41399: PUSH
41400: LD_INT 0
41402: PUSH
41403: EMPTY
41404: LIST
41405: LIST
41406: PUSH
41407: LD_INT 0
41409: PUSH
41410: LD_INT 1
41412: NEG
41413: PUSH
41414: EMPTY
41415: LIST
41416: LIST
41417: PUSH
41418: LD_INT 1
41420: PUSH
41421: LD_INT 0
41423: PUSH
41424: EMPTY
41425: LIST
41426: LIST
41427: PUSH
41428: LD_INT 1
41430: PUSH
41431: LD_INT 1
41433: PUSH
41434: EMPTY
41435: LIST
41436: LIST
41437: PUSH
41438: LD_INT 0
41440: PUSH
41441: LD_INT 1
41443: PUSH
41444: EMPTY
41445: LIST
41446: LIST
41447: PUSH
41448: LD_INT 1
41450: NEG
41451: PUSH
41452: LD_INT 0
41454: PUSH
41455: EMPTY
41456: LIST
41457: LIST
41458: PUSH
41459: LD_INT 1
41461: NEG
41462: PUSH
41463: LD_INT 1
41465: NEG
41466: PUSH
41467: EMPTY
41468: LIST
41469: LIST
41470: PUSH
41471: LD_INT 1
41473: NEG
41474: PUSH
41475: LD_INT 2
41477: NEG
41478: PUSH
41479: EMPTY
41480: LIST
41481: LIST
41482: PUSH
41483: LD_INT 0
41485: PUSH
41486: LD_INT 2
41488: NEG
41489: PUSH
41490: EMPTY
41491: LIST
41492: LIST
41493: PUSH
41494: LD_INT 1
41496: PUSH
41497: LD_INT 1
41499: NEG
41500: PUSH
41501: EMPTY
41502: LIST
41503: LIST
41504: PUSH
41505: LD_INT 2
41507: PUSH
41508: LD_INT 0
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 2
41517: PUSH
41518: LD_INT 1
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: PUSH
41525: LD_INT 2
41527: PUSH
41528: LD_INT 2
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: LD_INT 1
41537: PUSH
41538: LD_INT 2
41540: PUSH
41541: EMPTY
41542: LIST
41543: LIST
41544: PUSH
41545: LD_INT 0
41547: PUSH
41548: LD_INT 2
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: LD_INT 1
41557: NEG
41558: PUSH
41559: LD_INT 1
41561: PUSH
41562: EMPTY
41563: LIST
41564: LIST
41565: PUSH
41566: LD_INT 2
41568: NEG
41569: PUSH
41570: LD_INT 0
41572: PUSH
41573: EMPTY
41574: LIST
41575: LIST
41576: PUSH
41577: LD_INT 2
41579: NEG
41580: PUSH
41581: LD_INT 1
41583: NEG
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: PUSH
41589: LD_INT 2
41591: NEG
41592: PUSH
41593: LD_INT 2
41595: NEG
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: LD_INT 1
41603: NEG
41604: PUSH
41605: LD_INT 2
41607: PUSH
41608: EMPTY
41609: LIST
41610: LIST
41611: PUSH
41612: LD_INT 2
41614: NEG
41615: PUSH
41616: LD_INT 1
41618: PUSH
41619: EMPTY
41620: LIST
41621: LIST
41622: PUSH
41623: LD_INT 3
41625: NEG
41626: PUSH
41627: LD_INT 1
41629: NEG
41630: PUSH
41631: EMPTY
41632: LIST
41633: LIST
41634: PUSH
41635: LD_INT 3
41637: NEG
41638: PUSH
41639: LD_INT 2
41641: NEG
41642: PUSH
41643: EMPTY
41644: LIST
41645: LIST
41646: PUSH
41647: EMPTY
41648: LIST
41649: LIST
41650: LIST
41651: LIST
41652: LIST
41653: LIST
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41672: LD_ADDR_VAR 0 28
41676: PUSH
41677: LD_INT 0
41679: PUSH
41680: LD_INT 0
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 0
41689: PUSH
41690: LD_INT 1
41692: NEG
41693: PUSH
41694: EMPTY
41695: LIST
41696: LIST
41697: PUSH
41698: LD_INT 1
41700: PUSH
41701: LD_INT 0
41703: PUSH
41704: EMPTY
41705: LIST
41706: LIST
41707: PUSH
41708: LD_INT 1
41710: PUSH
41711: LD_INT 1
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: PUSH
41718: LD_INT 0
41720: PUSH
41721: LD_INT 1
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: PUSH
41728: LD_INT 1
41730: NEG
41731: PUSH
41732: LD_INT 0
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: PUSH
41739: LD_INT 1
41741: NEG
41742: PUSH
41743: LD_INT 1
41745: NEG
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PUSH
41751: LD_INT 1
41753: NEG
41754: PUSH
41755: LD_INT 2
41757: NEG
41758: PUSH
41759: EMPTY
41760: LIST
41761: LIST
41762: PUSH
41763: LD_INT 0
41765: PUSH
41766: LD_INT 2
41768: NEG
41769: PUSH
41770: EMPTY
41771: LIST
41772: LIST
41773: PUSH
41774: LD_INT 1
41776: PUSH
41777: LD_INT 1
41779: NEG
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 2
41787: PUSH
41788: LD_INT 0
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 2
41797: PUSH
41798: LD_INT 1
41800: PUSH
41801: EMPTY
41802: LIST
41803: LIST
41804: PUSH
41805: LD_INT 2
41807: PUSH
41808: LD_INT 2
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: LD_INT 1
41817: PUSH
41818: LD_INT 2
41820: PUSH
41821: EMPTY
41822: LIST
41823: LIST
41824: PUSH
41825: LD_INT 0
41827: PUSH
41828: LD_INT 2
41830: PUSH
41831: EMPTY
41832: LIST
41833: LIST
41834: PUSH
41835: LD_INT 1
41837: NEG
41838: PUSH
41839: LD_INT 1
41841: PUSH
41842: EMPTY
41843: LIST
41844: LIST
41845: PUSH
41846: LD_INT 2
41848: NEG
41849: PUSH
41850: LD_INT 0
41852: PUSH
41853: EMPTY
41854: LIST
41855: LIST
41856: PUSH
41857: LD_INT 2
41859: NEG
41860: PUSH
41861: LD_INT 1
41863: NEG
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 2
41871: NEG
41872: PUSH
41873: LD_INT 2
41875: NEG
41876: PUSH
41877: EMPTY
41878: LIST
41879: LIST
41880: PUSH
41881: LD_INT 2
41883: NEG
41884: PUSH
41885: LD_INT 3
41887: NEG
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 1
41895: NEG
41896: PUSH
41897: LD_INT 3
41899: NEG
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PUSH
41905: LD_INT 3
41907: NEG
41908: PUSH
41909: LD_INT 1
41911: NEG
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: PUSH
41917: LD_INT 3
41919: NEG
41920: PUSH
41921: LD_INT 2
41923: NEG
41924: PUSH
41925: EMPTY
41926: LIST
41927: LIST
41928: PUSH
41929: EMPTY
41930: LIST
41931: LIST
41932: LIST
41933: LIST
41934: LIST
41935: LIST
41936: LIST
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41954: LD_ADDR_VAR 0 29
41958: PUSH
41959: LD_INT 0
41961: PUSH
41962: LD_INT 0
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 0
41971: PUSH
41972: LD_INT 1
41974: NEG
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: LD_INT 1
41982: PUSH
41983: LD_INT 0
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: LD_INT 1
41992: PUSH
41993: LD_INT 1
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: LD_INT 0
42002: PUSH
42003: LD_INT 1
42005: PUSH
42006: EMPTY
42007: LIST
42008: LIST
42009: PUSH
42010: LD_INT 1
42012: NEG
42013: PUSH
42014: LD_INT 0
42016: PUSH
42017: EMPTY
42018: LIST
42019: LIST
42020: PUSH
42021: LD_INT 1
42023: NEG
42024: PUSH
42025: LD_INT 1
42027: NEG
42028: PUSH
42029: EMPTY
42030: LIST
42031: LIST
42032: PUSH
42033: LD_INT 1
42035: NEG
42036: PUSH
42037: LD_INT 2
42039: NEG
42040: PUSH
42041: EMPTY
42042: LIST
42043: LIST
42044: PUSH
42045: LD_INT 0
42047: PUSH
42048: LD_INT 2
42050: NEG
42051: PUSH
42052: EMPTY
42053: LIST
42054: LIST
42055: PUSH
42056: LD_INT 1
42058: PUSH
42059: LD_INT 1
42061: NEG
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: LD_INT 2
42069: PUSH
42070: LD_INT 0
42072: PUSH
42073: EMPTY
42074: LIST
42075: LIST
42076: PUSH
42077: LD_INT 2
42079: PUSH
42080: LD_INT 1
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: LD_INT 1
42089: PUSH
42090: LD_INT 2
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: LD_INT 0
42099: PUSH
42100: LD_INT 2
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 1
42109: NEG
42110: PUSH
42111: LD_INT 1
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 2
42120: NEG
42121: PUSH
42122: LD_INT 1
42124: NEG
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 2
42132: NEG
42133: PUSH
42134: LD_INT 2
42136: NEG
42137: PUSH
42138: EMPTY
42139: LIST
42140: LIST
42141: PUSH
42142: LD_INT 2
42144: NEG
42145: PUSH
42146: LD_INT 3
42148: NEG
42149: PUSH
42150: EMPTY
42151: LIST
42152: LIST
42153: PUSH
42154: LD_INT 2
42156: PUSH
42157: LD_INT 1
42159: NEG
42160: PUSH
42161: EMPTY
42162: LIST
42163: LIST
42164: PUSH
42165: LD_INT 3
42167: PUSH
42168: LD_INT 1
42170: PUSH
42171: EMPTY
42172: LIST
42173: LIST
42174: PUSH
42175: LD_INT 1
42177: PUSH
42178: LD_INT 3
42180: PUSH
42181: EMPTY
42182: LIST
42183: LIST
42184: PUSH
42185: LD_INT 1
42187: NEG
42188: PUSH
42189: LD_INT 2
42191: PUSH
42192: EMPTY
42193: LIST
42194: LIST
42195: PUSH
42196: LD_INT 3
42198: NEG
42199: PUSH
42200: LD_INT 2
42202: NEG
42203: PUSH
42204: EMPTY
42205: LIST
42206: LIST
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: LIST
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42233: LD_ADDR_VAR 0 30
42237: PUSH
42238: LD_INT 0
42240: PUSH
42241: LD_INT 0
42243: PUSH
42244: EMPTY
42245: LIST
42246: LIST
42247: PUSH
42248: LD_INT 0
42250: PUSH
42251: LD_INT 1
42253: NEG
42254: PUSH
42255: EMPTY
42256: LIST
42257: LIST
42258: PUSH
42259: LD_INT 1
42261: PUSH
42262: LD_INT 0
42264: PUSH
42265: EMPTY
42266: LIST
42267: LIST
42268: PUSH
42269: LD_INT 1
42271: PUSH
42272: LD_INT 1
42274: PUSH
42275: EMPTY
42276: LIST
42277: LIST
42278: PUSH
42279: LD_INT 0
42281: PUSH
42282: LD_INT 1
42284: PUSH
42285: EMPTY
42286: LIST
42287: LIST
42288: PUSH
42289: LD_INT 1
42291: NEG
42292: PUSH
42293: LD_INT 0
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 1
42302: NEG
42303: PUSH
42304: LD_INT 1
42306: NEG
42307: PUSH
42308: EMPTY
42309: LIST
42310: LIST
42311: PUSH
42312: LD_INT 1
42314: NEG
42315: PUSH
42316: LD_INT 2
42318: NEG
42319: PUSH
42320: EMPTY
42321: LIST
42322: LIST
42323: PUSH
42324: LD_INT 0
42326: PUSH
42327: LD_INT 2
42329: NEG
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 1
42337: PUSH
42338: LD_INT 1
42340: NEG
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 2
42348: PUSH
42349: LD_INT 0
42351: PUSH
42352: EMPTY
42353: LIST
42354: LIST
42355: PUSH
42356: LD_INT 2
42358: PUSH
42359: LD_INT 1
42361: PUSH
42362: EMPTY
42363: LIST
42364: LIST
42365: PUSH
42366: LD_INT 2
42368: PUSH
42369: LD_INT 2
42371: PUSH
42372: EMPTY
42373: LIST
42374: LIST
42375: PUSH
42376: LD_INT 1
42378: PUSH
42379: LD_INT 2
42381: PUSH
42382: EMPTY
42383: LIST
42384: LIST
42385: PUSH
42386: LD_INT 1
42388: NEG
42389: PUSH
42390: LD_INT 1
42392: PUSH
42393: EMPTY
42394: LIST
42395: LIST
42396: PUSH
42397: LD_INT 2
42399: NEG
42400: PUSH
42401: LD_INT 0
42403: PUSH
42404: EMPTY
42405: LIST
42406: LIST
42407: PUSH
42408: LD_INT 2
42410: NEG
42411: PUSH
42412: LD_INT 1
42414: NEG
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: PUSH
42420: LD_INT 1
42422: NEG
42423: PUSH
42424: LD_INT 3
42426: NEG
42427: PUSH
42428: EMPTY
42429: LIST
42430: LIST
42431: PUSH
42432: LD_INT 1
42434: PUSH
42435: LD_INT 2
42437: NEG
42438: PUSH
42439: EMPTY
42440: LIST
42441: LIST
42442: PUSH
42443: LD_INT 3
42445: PUSH
42446: LD_INT 2
42448: PUSH
42449: EMPTY
42450: LIST
42451: LIST
42452: PUSH
42453: LD_INT 2
42455: PUSH
42456: LD_INT 3
42458: PUSH
42459: EMPTY
42460: LIST
42461: LIST
42462: PUSH
42463: LD_INT 2
42465: NEG
42466: PUSH
42467: LD_INT 1
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 3
42476: NEG
42477: PUSH
42478: LD_INT 1
42480: NEG
42481: PUSH
42482: EMPTY
42483: LIST
42484: LIST
42485: PUSH
42486: EMPTY
42487: LIST
42488: LIST
42489: LIST
42490: LIST
42491: LIST
42492: LIST
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42511: LD_ADDR_VAR 0 31
42515: PUSH
42516: LD_INT 0
42518: PUSH
42519: LD_INT 0
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 0
42528: PUSH
42529: LD_INT 1
42531: NEG
42532: PUSH
42533: EMPTY
42534: LIST
42535: LIST
42536: PUSH
42537: LD_INT 1
42539: PUSH
42540: LD_INT 0
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 1
42549: PUSH
42550: LD_INT 1
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 0
42559: PUSH
42560: LD_INT 1
42562: PUSH
42563: EMPTY
42564: LIST
42565: LIST
42566: PUSH
42567: LD_INT 1
42569: NEG
42570: PUSH
42571: LD_INT 0
42573: PUSH
42574: EMPTY
42575: LIST
42576: LIST
42577: PUSH
42578: LD_INT 1
42580: NEG
42581: PUSH
42582: LD_INT 1
42584: NEG
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 1
42592: NEG
42593: PUSH
42594: LD_INT 2
42596: NEG
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PUSH
42602: LD_INT 1
42604: PUSH
42605: LD_INT 1
42607: NEG
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 2
42615: PUSH
42616: LD_INT 0
42618: PUSH
42619: EMPTY
42620: LIST
42621: LIST
42622: PUSH
42623: LD_INT 2
42625: PUSH
42626: LD_INT 1
42628: PUSH
42629: EMPTY
42630: LIST
42631: LIST
42632: PUSH
42633: LD_INT 2
42635: PUSH
42636: LD_INT 2
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: LD_INT 1
42645: PUSH
42646: LD_INT 2
42648: PUSH
42649: EMPTY
42650: LIST
42651: LIST
42652: PUSH
42653: LD_INT 0
42655: PUSH
42656: LD_INT 2
42658: PUSH
42659: EMPTY
42660: LIST
42661: LIST
42662: PUSH
42663: LD_INT 1
42665: NEG
42666: PUSH
42667: LD_INT 1
42669: PUSH
42670: EMPTY
42671: LIST
42672: LIST
42673: PUSH
42674: LD_INT 2
42676: NEG
42677: PUSH
42678: LD_INT 1
42680: NEG
42681: PUSH
42682: EMPTY
42683: LIST
42684: LIST
42685: PUSH
42686: LD_INT 2
42688: NEG
42689: PUSH
42690: LD_INT 2
42692: NEG
42693: PUSH
42694: EMPTY
42695: LIST
42696: LIST
42697: PUSH
42698: LD_INT 2
42700: NEG
42701: PUSH
42702: LD_INT 3
42704: NEG
42705: PUSH
42706: EMPTY
42707: LIST
42708: LIST
42709: PUSH
42710: LD_INT 2
42712: PUSH
42713: LD_INT 1
42715: NEG
42716: PUSH
42717: EMPTY
42718: LIST
42719: LIST
42720: PUSH
42721: LD_INT 3
42723: PUSH
42724: LD_INT 1
42726: PUSH
42727: EMPTY
42728: LIST
42729: LIST
42730: PUSH
42731: LD_INT 1
42733: PUSH
42734: LD_INT 3
42736: PUSH
42737: EMPTY
42738: LIST
42739: LIST
42740: PUSH
42741: LD_INT 1
42743: NEG
42744: PUSH
42745: LD_INT 2
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 3
42754: NEG
42755: PUSH
42756: LD_INT 2
42758: NEG
42759: PUSH
42760: EMPTY
42761: LIST
42762: LIST
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: LIST
42768: LIST
42769: LIST
42770: LIST
42771: LIST
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42789: LD_ADDR_VAR 0 32
42793: PUSH
42794: LD_INT 0
42796: PUSH
42797: LD_INT 0
42799: PUSH
42800: EMPTY
42801: LIST
42802: LIST
42803: PUSH
42804: LD_INT 0
42806: PUSH
42807: LD_INT 1
42809: NEG
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: PUSH
42815: LD_INT 1
42817: PUSH
42818: LD_INT 0
42820: PUSH
42821: EMPTY
42822: LIST
42823: LIST
42824: PUSH
42825: LD_INT 1
42827: PUSH
42828: LD_INT 1
42830: PUSH
42831: EMPTY
42832: LIST
42833: LIST
42834: PUSH
42835: LD_INT 0
42837: PUSH
42838: LD_INT 1
42840: PUSH
42841: EMPTY
42842: LIST
42843: LIST
42844: PUSH
42845: LD_INT 1
42847: NEG
42848: PUSH
42849: LD_INT 0
42851: PUSH
42852: EMPTY
42853: LIST
42854: LIST
42855: PUSH
42856: LD_INT 1
42858: NEG
42859: PUSH
42860: LD_INT 1
42862: NEG
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: PUSH
42868: LD_INT 1
42870: NEG
42871: PUSH
42872: LD_INT 2
42874: NEG
42875: PUSH
42876: EMPTY
42877: LIST
42878: LIST
42879: PUSH
42880: LD_INT 0
42882: PUSH
42883: LD_INT 2
42885: NEG
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 1
42893: PUSH
42894: LD_INT 1
42896: NEG
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 2
42904: PUSH
42905: LD_INT 1
42907: PUSH
42908: EMPTY
42909: LIST
42910: LIST
42911: PUSH
42912: LD_INT 2
42914: PUSH
42915: LD_INT 2
42917: PUSH
42918: EMPTY
42919: LIST
42920: LIST
42921: PUSH
42922: LD_INT 1
42924: PUSH
42925: LD_INT 2
42927: PUSH
42928: EMPTY
42929: LIST
42930: LIST
42931: PUSH
42932: LD_INT 0
42934: PUSH
42935: LD_INT 2
42937: PUSH
42938: EMPTY
42939: LIST
42940: LIST
42941: PUSH
42942: LD_INT 1
42944: NEG
42945: PUSH
42946: LD_INT 1
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 2
42955: NEG
42956: PUSH
42957: LD_INT 0
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PUSH
42964: LD_INT 2
42966: NEG
42967: PUSH
42968: LD_INT 1
42970: NEG
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 1
42978: NEG
42979: PUSH
42980: LD_INT 3
42982: NEG
42983: PUSH
42984: EMPTY
42985: LIST
42986: LIST
42987: PUSH
42988: LD_INT 1
42990: PUSH
42991: LD_INT 2
42993: NEG
42994: PUSH
42995: EMPTY
42996: LIST
42997: LIST
42998: PUSH
42999: LD_INT 3
43001: PUSH
43002: LD_INT 2
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: PUSH
43009: LD_INT 2
43011: PUSH
43012: LD_INT 3
43014: PUSH
43015: EMPTY
43016: LIST
43017: LIST
43018: PUSH
43019: LD_INT 2
43021: NEG
43022: PUSH
43023: LD_INT 1
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 3
43032: NEG
43033: PUSH
43034: LD_INT 1
43036: NEG
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: EMPTY
43043: LIST
43044: LIST
43045: LIST
43046: LIST
43047: LIST
43048: LIST
43049: LIST
43050: LIST
43051: LIST
43052: LIST
43053: LIST
43054: LIST
43055: LIST
43056: LIST
43057: LIST
43058: LIST
43059: LIST
43060: LIST
43061: LIST
43062: LIST
43063: LIST
43064: LIST
43065: LIST
43066: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43067: LD_ADDR_VAR 0 33
43071: PUSH
43072: LD_INT 0
43074: PUSH
43075: LD_INT 0
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 0
43084: PUSH
43085: LD_INT 1
43087: NEG
43088: PUSH
43089: EMPTY
43090: LIST
43091: LIST
43092: PUSH
43093: LD_INT 1
43095: PUSH
43096: LD_INT 0
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: PUSH
43103: LD_INT 1
43105: PUSH
43106: LD_INT 1
43108: PUSH
43109: EMPTY
43110: LIST
43111: LIST
43112: PUSH
43113: LD_INT 0
43115: PUSH
43116: LD_INT 1
43118: PUSH
43119: EMPTY
43120: LIST
43121: LIST
43122: PUSH
43123: LD_INT 1
43125: NEG
43126: PUSH
43127: LD_INT 0
43129: PUSH
43130: EMPTY
43131: LIST
43132: LIST
43133: PUSH
43134: LD_INT 1
43136: NEG
43137: PUSH
43138: LD_INT 1
43140: NEG
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_INT 1
43148: NEG
43149: PUSH
43150: LD_INT 2
43152: NEG
43153: PUSH
43154: EMPTY
43155: LIST
43156: LIST
43157: PUSH
43158: LD_INT 1
43160: PUSH
43161: LD_INT 1
43163: NEG
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: PUSH
43169: LD_INT 2
43171: PUSH
43172: LD_INT 0
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: LD_INT 2
43181: PUSH
43182: LD_INT 1
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PUSH
43189: LD_INT 1
43191: PUSH
43192: LD_INT 2
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: LD_INT 0
43201: PUSH
43202: LD_INT 2
43204: PUSH
43205: EMPTY
43206: LIST
43207: LIST
43208: PUSH
43209: LD_INT 1
43211: NEG
43212: PUSH
43213: LD_INT 1
43215: PUSH
43216: EMPTY
43217: LIST
43218: LIST
43219: PUSH
43220: LD_INT 2
43222: NEG
43223: PUSH
43224: LD_INT 0
43226: PUSH
43227: EMPTY
43228: LIST
43229: LIST
43230: PUSH
43231: LD_INT 2
43233: NEG
43234: PUSH
43235: LD_INT 1
43237: NEG
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 2
43245: NEG
43246: PUSH
43247: LD_INT 2
43249: NEG
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 2
43257: NEG
43258: PUSH
43259: LD_INT 3
43261: NEG
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: LD_INT 2
43269: PUSH
43270: LD_INT 1
43272: NEG
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 3
43280: PUSH
43281: LD_INT 1
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 1
43290: PUSH
43291: LD_INT 3
43293: PUSH
43294: EMPTY
43295: LIST
43296: LIST
43297: PUSH
43298: LD_INT 1
43300: NEG
43301: PUSH
43302: LD_INT 2
43304: PUSH
43305: EMPTY
43306: LIST
43307: LIST
43308: PUSH
43309: LD_INT 3
43311: NEG
43312: PUSH
43313: LD_INT 2
43315: NEG
43316: PUSH
43317: EMPTY
43318: LIST
43319: LIST
43320: PUSH
43321: EMPTY
43322: LIST
43323: LIST
43324: LIST
43325: LIST
43326: LIST
43327: LIST
43328: LIST
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43346: LD_ADDR_VAR 0 34
43350: PUSH
43351: LD_INT 0
43353: PUSH
43354: LD_INT 0
43356: PUSH
43357: EMPTY
43358: LIST
43359: LIST
43360: PUSH
43361: LD_INT 0
43363: PUSH
43364: LD_INT 1
43366: NEG
43367: PUSH
43368: EMPTY
43369: LIST
43370: LIST
43371: PUSH
43372: LD_INT 1
43374: PUSH
43375: LD_INT 0
43377: PUSH
43378: EMPTY
43379: LIST
43380: LIST
43381: PUSH
43382: LD_INT 1
43384: PUSH
43385: LD_INT 1
43387: PUSH
43388: EMPTY
43389: LIST
43390: LIST
43391: PUSH
43392: LD_INT 0
43394: PUSH
43395: LD_INT 1
43397: PUSH
43398: EMPTY
43399: LIST
43400: LIST
43401: PUSH
43402: LD_INT 1
43404: NEG
43405: PUSH
43406: LD_INT 0
43408: PUSH
43409: EMPTY
43410: LIST
43411: LIST
43412: PUSH
43413: LD_INT 1
43415: NEG
43416: PUSH
43417: LD_INT 1
43419: NEG
43420: PUSH
43421: EMPTY
43422: LIST
43423: LIST
43424: PUSH
43425: LD_INT 1
43427: NEG
43428: PUSH
43429: LD_INT 2
43431: NEG
43432: PUSH
43433: EMPTY
43434: LIST
43435: LIST
43436: PUSH
43437: LD_INT 0
43439: PUSH
43440: LD_INT 2
43442: NEG
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 1
43450: PUSH
43451: LD_INT 1
43453: NEG
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 2
43461: PUSH
43462: LD_INT 1
43464: PUSH
43465: EMPTY
43466: LIST
43467: LIST
43468: PUSH
43469: LD_INT 2
43471: PUSH
43472: LD_INT 2
43474: PUSH
43475: EMPTY
43476: LIST
43477: LIST
43478: PUSH
43479: LD_INT 1
43481: PUSH
43482: LD_INT 2
43484: PUSH
43485: EMPTY
43486: LIST
43487: LIST
43488: PUSH
43489: LD_INT 1
43491: NEG
43492: PUSH
43493: LD_INT 1
43495: PUSH
43496: EMPTY
43497: LIST
43498: LIST
43499: PUSH
43500: LD_INT 2
43502: NEG
43503: PUSH
43504: LD_INT 0
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 2
43513: NEG
43514: PUSH
43515: LD_INT 1
43517: NEG
43518: PUSH
43519: EMPTY
43520: LIST
43521: LIST
43522: PUSH
43523: LD_INT 2
43525: NEG
43526: PUSH
43527: LD_INT 2
43529: NEG
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 1
43537: NEG
43538: PUSH
43539: LD_INT 3
43541: NEG
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 1
43549: PUSH
43550: LD_INT 2
43552: NEG
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 3
43560: PUSH
43561: LD_INT 2
43563: PUSH
43564: EMPTY
43565: LIST
43566: LIST
43567: PUSH
43568: LD_INT 2
43570: PUSH
43571: LD_INT 3
43573: PUSH
43574: EMPTY
43575: LIST
43576: LIST
43577: PUSH
43578: LD_INT 2
43580: NEG
43581: PUSH
43582: LD_INT 1
43584: PUSH
43585: EMPTY
43586: LIST
43587: LIST
43588: PUSH
43589: LD_INT 3
43591: NEG
43592: PUSH
43593: LD_INT 1
43595: NEG
43596: PUSH
43597: EMPTY
43598: LIST
43599: LIST
43600: PUSH
43601: EMPTY
43602: LIST
43603: LIST
43604: LIST
43605: LIST
43606: LIST
43607: LIST
43608: LIST
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43626: LD_ADDR_VAR 0 35
43630: PUSH
43631: LD_INT 0
43633: PUSH
43634: LD_INT 0
43636: PUSH
43637: EMPTY
43638: LIST
43639: LIST
43640: PUSH
43641: LD_INT 0
43643: PUSH
43644: LD_INT 1
43646: NEG
43647: PUSH
43648: EMPTY
43649: LIST
43650: LIST
43651: PUSH
43652: LD_INT 1
43654: PUSH
43655: LD_INT 0
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 1
43664: PUSH
43665: LD_INT 1
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: PUSH
43672: LD_INT 0
43674: PUSH
43675: LD_INT 1
43677: PUSH
43678: EMPTY
43679: LIST
43680: LIST
43681: PUSH
43682: LD_INT 1
43684: NEG
43685: PUSH
43686: LD_INT 0
43688: PUSH
43689: EMPTY
43690: LIST
43691: LIST
43692: PUSH
43693: LD_INT 1
43695: NEG
43696: PUSH
43697: LD_INT 1
43699: NEG
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 2
43707: PUSH
43708: LD_INT 1
43710: PUSH
43711: EMPTY
43712: LIST
43713: LIST
43714: PUSH
43715: LD_INT 2
43717: NEG
43718: PUSH
43719: LD_INT 1
43721: NEG
43722: PUSH
43723: EMPTY
43724: LIST
43725: LIST
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: LIST
43731: LIST
43732: LIST
43733: LIST
43734: LIST
43735: LIST
43736: LIST
43737: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43738: LD_ADDR_VAR 0 36
43742: PUSH
43743: LD_INT 0
43745: PUSH
43746: LD_INT 0
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 0
43755: PUSH
43756: LD_INT 1
43758: NEG
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: PUSH
43764: LD_INT 1
43766: PUSH
43767: LD_INT 0
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: LD_INT 1
43776: PUSH
43777: LD_INT 1
43779: PUSH
43780: EMPTY
43781: LIST
43782: LIST
43783: PUSH
43784: LD_INT 0
43786: PUSH
43787: LD_INT 1
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 1
43796: NEG
43797: PUSH
43798: LD_INT 0
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 1
43807: NEG
43808: PUSH
43809: LD_INT 1
43811: NEG
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 1
43819: NEG
43820: PUSH
43821: LD_INT 2
43823: NEG
43824: PUSH
43825: EMPTY
43826: LIST
43827: LIST
43828: PUSH
43829: LD_INT 1
43831: PUSH
43832: LD_INT 2
43834: PUSH
43835: EMPTY
43836: LIST
43837: LIST
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: LIST
43843: LIST
43844: LIST
43845: LIST
43846: LIST
43847: LIST
43848: LIST
43849: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43850: LD_ADDR_VAR 0 37
43854: PUSH
43855: LD_INT 0
43857: PUSH
43858: LD_INT 0
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 0
43867: PUSH
43868: LD_INT 1
43870: NEG
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: PUSH
43876: LD_INT 1
43878: PUSH
43879: LD_INT 0
43881: PUSH
43882: EMPTY
43883: LIST
43884: LIST
43885: PUSH
43886: LD_INT 1
43888: PUSH
43889: LD_INT 1
43891: PUSH
43892: EMPTY
43893: LIST
43894: LIST
43895: PUSH
43896: LD_INT 0
43898: PUSH
43899: LD_INT 1
43901: PUSH
43902: EMPTY
43903: LIST
43904: LIST
43905: PUSH
43906: LD_INT 1
43908: NEG
43909: PUSH
43910: LD_INT 0
43912: PUSH
43913: EMPTY
43914: LIST
43915: LIST
43916: PUSH
43917: LD_INT 1
43919: NEG
43920: PUSH
43921: LD_INT 1
43923: NEG
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 1
43931: PUSH
43932: LD_INT 1
43934: NEG
43935: PUSH
43936: EMPTY
43937: LIST
43938: LIST
43939: PUSH
43940: LD_INT 1
43942: NEG
43943: PUSH
43944: LD_INT 1
43946: PUSH
43947: EMPTY
43948: LIST
43949: LIST
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: LIST
43955: LIST
43956: LIST
43957: LIST
43958: LIST
43959: LIST
43960: LIST
43961: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43962: LD_ADDR_VAR 0 38
43966: PUSH
43967: LD_INT 0
43969: PUSH
43970: LD_INT 0
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 0
43979: PUSH
43980: LD_INT 1
43982: NEG
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 1
43990: PUSH
43991: LD_INT 0
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 1
44000: PUSH
44001: LD_INT 1
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 0
44010: PUSH
44011: LD_INT 1
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 1
44020: NEG
44021: PUSH
44022: LD_INT 0
44024: PUSH
44025: EMPTY
44026: LIST
44027: LIST
44028: PUSH
44029: LD_INT 1
44031: NEG
44032: PUSH
44033: LD_INT 1
44035: NEG
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 2
44043: PUSH
44044: LD_INT 1
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 2
44053: NEG
44054: PUSH
44055: LD_INT 1
44057: NEG
44058: PUSH
44059: EMPTY
44060: LIST
44061: LIST
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: LIST
44067: LIST
44068: LIST
44069: LIST
44070: LIST
44071: LIST
44072: LIST
44073: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44074: LD_ADDR_VAR 0 39
44078: PUSH
44079: LD_INT 0
44081: PUSH
44082: LD_INT 0
44084: PUSH
44085: EMPTY
44086: LIST
44087: LIST
44088: PUSH
44089: LD_INT 0
44091: PUSH
44092: LD_INT 1
44094: NEG
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: PUSH
44100: LD_INT 1
44102: PUSH
44103: LD_INT 0
44105: PUSH
44106: EMPTY
44107: LIST
44108: LIST
44109: PUSH
44110: LD_INT 1
44112: PUSH
44113: LD_INT 1
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 0
44122: PUSH
44123: LD_INT 1
44125: PUSH
44126: EMPTY
44127: LIST
44128: LIST
44129: PUSH
44130: LD_INT 1
44132: NEG
44133: PUSH
44134: LD_INT 0
44136: PUSH
44137: EMPTY
44138: LIST
44139: LIST
44140: PUSH
44141: LD_INT 1
44143: NEG
44144: PUSH
44145: LD_INT 1
44147: NEG
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 1
44155: NEG
44156: PUSH
44157: LD_INT 2
44159: NEG
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: PUSH
44165: LD_INT 1
44167: PUSH
44168: LD_INT 2
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: LIST
44179: LIST
44180: LIST
44181: LIST
44182: LIST
44183: LIST
44184: LIST
44185: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44186: LD_ADDR_VAR 0 40
44190: PUSH
44191: LD_INT 0
44193: PUSH
44194: LD_INT 0
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 0
44203: PUSH
44204: LD_INT 1
44206: NEG
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: PUSH
44212: LD_INT 1
44214: PUSH
44215: LD_INT 0
44217: PUSH
44218: EMPTY
44219: LIST
44220: LIST
44221: PUSH
44222: LD_INT 1
44224: PUSH
44225: LD_INT 1
44227: PUSH
44228: EMPTY
44229: LIST
44230: LIST
44231: PUSH
44232: LD_INT 0
44234: PUSH
44235: LD_INT 1
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: PUSH
44242: LD_INT 1
44244: NEG
44245: PUSH
44246: LD_INT 0
44248: PUSH
44249: EMPTY
44250: LIST
44251: LIST
44252: PUSH
44253: LD_INT 1
44255: NEG
44256: PUSH
44257: LD_INT 1
44259: NEG
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 1
44267: PUSH
44268: LD_INT 1
44270: NEG
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: PUSH
44276: LD_INT 1
44278: NEG
44279: PUSH
44280: LD_INT 1
44282: PUSH
44283: EMPTY
44284: LIST
44285: LIST
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44298: LD_ADDR_VAR 0 41
44302: PUSH
44303: LD_INT 0
44305: PUSH
44306: LD_INT 0
44308: PUSH
44309: EMPTY
44310: LIST
44311: LIST
44312: PUSH
44313: LD_INT 0
44315: PUSH
44316: LD_INT 1
44318: NEG
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 1
44326: PUSH
44327: LD_INT 0
44329: PUSH
44330: EMPTY
44331: LIST
44332: LIST
44333: PUSH
44334: LD_INT 1
44336: PUSH
44337: LD_INT 1
44339: PUSH
44340: EMPTY
44341: LIST
44342: LIST
44343: PUSH
44344: LD_INT 0
44346: PUSH
44347: LD_INT 1
44349: PUSH
44350: EMPTY
44351: LIST
44352: LIST
44353: PUSH
44354: LD_INT 1
44356: NEG
44357: PUSH
44358: LD_INT 0
44360: PUSH
44361: EMPTY
44362: LIST
44363: LIST
44364: PUSH
44365: LD_INT 1
44367: NEG
44368: PUSH
44369: LD_INT 1
44371: NEG
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 1
44379: NEG
44380: PUSH
44381: LD_INT 2
44383: NEG
44384: PUSH
44385: EMPTY
44386: LIST
44387: LIST
44388: PUSH
44389: LD_INT 1
44391: PUSH
44392: LD_INT 1
44394: NEG
44395: PUSH
44396: EMPTY
44397: LIST
44398: LIST
44399: PUSH
44400: LD_INT 2
44402: PUSH
44403: LD_INT 0
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 2
44412: PUSH
44413: LD_INT 1
44415: PUSH
44416: EMPTY
44417: LIST
44418: LIST
44419: PUSH
44420: LD_INT 2
44422: PUSH
44423: LD_INT 2
44425: PUSH
44426: EMPTY
44427: LIST
44428: LIST
44429: PUSH
44430: LD_INT 1
44432: PUSH
44433: LD_INT 2
44435: PUSH
44436: EMPTY
44437: LIST
44438: LIST
44439: PUSH
44440: LD_INT 1
44442: NEG
44443: PUSH
44444: LD_INT 1
44446: PUSH
44447: EMPTY
44448: LIST
44449: LIST
44450: PUSH
44451: LD_INT 2
44453: NEG
44454: PUSH
44455: LD_INT 0
44457: PUSH
44458: EMPTY
44459: LIST
44460: LIST
44461: PUSH
44462: LD_INT 2
44464: NEG
44465: PUSH
44466: LD_INT 1
44468: NEG
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 2
44476: NEG
44477: PUSH
44478: LD_INT 2
44480: NEG
44481: PUSH
44482: EMPTY
44483: LIST
44484: LIST
44485: PUSH
44486: LD_INT 2
44488: NEG
44489: PUSH
44490: LD_INT 3
44492: NEG
44493: PUSH
44494: EMPTY
44495: LIST
44496: LIST
44497: PUSH
44498: LD_INT 2
44500: PUSH
44501: LD_INT 1
44503: NEG
44504: PUSH
44505: EMPTY
44506: LIST
44507: LIST
44508: PUSH
44509: LD_INT 3
44511: PUSH
44512: LD_INT 0
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: PUSH
44519: LD_INT 3
44521: PUSH
44522: LD_INT 1
44524: PUSH
44525: EMPTY
44526: LIST
44527: LIST
44528: PUSH
44529: LD_INT 3
44531: PUSH
44532: LD_INT 2
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 3
44541: PUSH
44542: LD_INT 3
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: PUSH
44549: LD_INT 2
44551: PUSH
44552: LD_INT 3
44554: PUSH
44555: EMPTY
44556: LIST
44557: LIST
44558: PUSH
44559: LD_INT 2
44561: NEG
44562: PUSH
44563: LD_INT 1
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 3
44572: NEG
44573: PUSH
44574: LD_INT 0
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 3
44583: NEG
44584: PUSH
44585: LD_INT 1
44587: NEG
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 3
44595: NEG
44596: PUSH
44597: LD_INT 2
44599: NEG
44600: PUSH
44601: EMPTY
44602: LIST
44603: LIST
44604: PUSH
44605: LD_INT 3
44607: NEG
44608: PUSH
44609: LD_INT 3
44611: NEG
44612: PUSH
44613: EMPTY
44614: LIST
44615: LIST
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: LIST
44621: LIST
44622: LIST
44623: LIST
44624: LIST
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44648: LD_ADDR_VAR 0 42
44652: PUSH
44653: LD_INT 0
44655: PUSH
44656: LD_INT 0
44658: PUSH
44659: EMPTY
44660: LIST
44661: LIST
44662: PUSH
44663: LD_INT 0
44665: PUSH
44666: LD_INT 1
44668: NEG
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 1
44676: PUSH
44677: LD_INT 0
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 1
44686: PUSH
44687: LD_INT 1
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 0
44696: PUSH
44697: LD_INT 1
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 1
44706: NEG
44707: PUSH
44708: LD_INT 0
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 1
44717: NEG
44718: PUSH
44719: LD_INT 1
44721: NEG
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: PUSH
44727: LD_INT 1
44729: NEG
44730: PUSH
44731: LD_INT 2
44733: NEG
44734: PUSH
44735: EMPTY
44736: LIST
44737: LIST
44738: PUSH
44739: LD_INT 0
44741: PUSH
44742: LD_INT 2
44744: NEG
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: LD_INT 1
44752: PUSH
44753: LD_INT 1
44755: NEG
44756: PUSH
44757: EMPTY
44758: LIST
44759: LIST
44760: PUSH
44761: LD_INT 2
44763: PUSH
44764: LD_INT 1
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: PUSH
44771: LD_INT 2
44773: PUSH
44774: LD_INT 2
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 1
44783: PUSH
44784: LD_INT 2
44786: PUSH
44787: EMPTY
44788: LIST
44789: LIST
44790: PUSH
44791: LD_INT 0
44793: PUSH
44794: LD_INT 2
44796: PUSH
44797: EMPTY
44798: LIST
44799: LIST
44800: PUSH
44801: LD_INT 1
44803: NEG
44804: PUSH
44805: LD_INT 1
44807: PUSH
44808: EMPTY
44809: LIST
44810: LIST
44811: PUSH
44812: LD_INT 2
44814: NEG
44815: PUSH
44816: LD_INT 1
44818: NEG
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 2
44826: NEG
44827: PUSH
44828: LD_INT 2
44830: NEG
44831: PUSH
44832: EMPTY
44833: LIST
44834: LIST
44835: PUSH
44836: LD_INT 2
44838: NEG
44839: PUSH
44840: LD_INT 3
44842: NEG
44843: PUSH
44844: EMPTY
44845: LIST
44846: LIST
44847: PUSH
44848: LD_INT 1
44850: NEG
44851: PUSH
44852: LD_INT 3
44854: NEG
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 0
44862: PUSH
44863: LD_INT 3
44865: NEG
44866: PUSH
44867: EMPTY
44868: LIST
44869: LIST
44870: PUSH
44871: LD_INT 1
44873: PUSH
44874: LD_INT 2
44876: NEG
44877: PUSH
44878: EMPTY
44879: LIST
44880: LIST
44881: PUSH
44882: LD_INT 3
44884: PUSH
44885: LD_INT 2
44887: PUSH
44888: EMPTY
44889: LIST
44890: LIST
44891: PUSH
44892: LD_INT 3
44894: PUSH
44895: LD_INT 3
44897: PUSH
44898: EMPTY
44899: LIST
44900: LIST
44901: PUSH
44902: LD_INT 2
44904: PUSH
44905: LD_INT 3
44907: PUSH
44908: EMPTY
44909: LIST
44910: LIST
44911: PUSH
44912: LD_INT 1
44914: PUSH
44915: LD_INT 3
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 0
44924: PUSH
44925: LD_INT 3
44927: PUSH
44928: EMPTY
44929: LIST
44930: LIST
44931: PUSH
44932: LD_INT 1
44934: NEG
44935: PUSH
44936: LD_INT 2
44938: PUSH
44939: EMPTY
44940: LIST
44941: LIST
44942: PUSH
44943: LD_INT 3
44945: NEG
44946: PUSH
44947: LD_INT 2
44949: NEG
44950: PUSH
44951: EMPTY
44952: LIST
44953: LIST
44954: PUSH
44955: LD_INT 3
44957: NEG
44958: PUSH
44959: LD_INT 3
44961: NEG
44962: PUSH
44963: EMPTY
44964: LIST
44965: LIST
44966: PUSH
44967: EMPTY
44968: LIST
44969: LIST
44970: LIST
44971: LIST
44972: LIST
44973: LIST
44974: LIST
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44998: LD_ADDR_VAR 0 43
45002: PUSH
45003: LD_INT 0
45005: PUSH
45006: LD_INT 0
45008: PUSH
45009: EMPTY
45010: LIST
45011: LIST
45012: PUSH
45013: LD_INT 0
45015: PUSH
45016: LD_INT 1
45018: NEG
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PUSH
45024: LD_INT 1
45026: PUSH
45027: LD_INT 0
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 1
45036: PUSH
45037: LD_INT 1
45039: PUSH
45040: EMPTY
45041: LIST
45042: LIST
45043: PUSH
45044: LD_INT 0
45046: PUSH
45047: LD_INT 1
45049: PUSH
45050: EMPTY
45051: LIST
45052: LIST
45053: PUSH
45054: LD_INT 1
45056: NEG
45057: PUSH
45058: LD_INT 0
45060: PUSH
45061: EMPTY
45062: LIST
45063: LIST
45064: PUSH
45065: LD_INT 1
45067: NEG
45068: PUSH
45069: LD_INT 1
45071: NEG
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: PUSH
45077: LD_INT 1
45079: NEG
45080: PUSH
45081: LD_INT 2
45083: NEG
45084: PUSH
45085: EMPTY
45086: LIST
45087: LIST
45088: PUSH
45089: LD_INT 0
45091: PUSH
45092: LD_INT 2
45094: NEG
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 1
45102: PUSH
45103: LD_INT 1
45105: NEG
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 2
45113: PUSH
45114: LD_INT 0
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: PUSH
45121: LD_INT 2
45123: PUSH
45124: LD_INT 1
45126: PUSH
45127: EMPTY
45128: LIST
45129: LIST
45130: PUSH
45131: LD_INT 1
45133: PUSH
45134: LD_INT 2
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PUSH
45141: LD_INT 0
45143: PUSH
45144: LD_INT 2
45146: PUSH
45147: EMPTY
45148: LIST
45149: LIST
45150: PUSH
45151: LD_INT 1
45153: NEG
45154: PUSH
45155: LD_INT 1
45157: PUSH
45158: EMPTY
45159: LIST
45160: LIST
45161: PUSH
45162: LD_INT 2
45164: NEG
45165: PUSH
45166: LD_INT 0
45168: PUSH
45169: EMPTY
45170: LIST
45171: LIST
45172: PUSH
45173: LD_INT 2
45175: NEG
45176: PUSH
45177: LD_INT 1
45179: NEG
45180: PUSH
45181: EMPTY
45182: LIST
45183: LIST
45184: PUSH
45185: LD_INT 1
45187: NEG
45188: PUSH
45189: LD_INT 3
45191: NEG
45192: PUSH
45193: EMPTY
45194: LIST
45195: LIST
45196: PUSH
45197: LD_INT 0
45199: PUSH
45200: LD_INT 3
45202: NEG
45203: PUSH
45204: EMPTY
45205: LIST
45206: LIST
45207: PUSH
45208: LD_INT 1
45210: PUSH
45211: LD_INT 2
45213: NEG
45214: PUSH
45215: EMPTY
45216: LIST
45217: LIST
45218: PUSH
45219: LD_INT 2
45221: PUSH
45222: LD_INT 1
45224: NEG
45225: PUSH
45226: EMPTY
45227: LIST
45228: LIST
45229: PUSH
45230: LD_INT 3
45232: PUSH
45233: LD_INT 0
45235: PUSH
45236: EMPTY
45237: LIST
45238: LIST
45239: PUSH
45240: LD_INT 3
45242: PUSH
45243: LD_INT 1
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 1
45252: PUSH
45253: LD_INT 3
45255: PUSH
45256: EMPTY
45257: LIST
45258: LIST
45259: PUSH
45260: LD_INT 0
45262: PUSH
45263: LD_INT 3
45265: PUSH
45266: EMPTY
45267: LIST
45268: LIST
45269: PUSH
45270: LD_INT 1
45272: NEG
45273: PUSH
45274: LD_INT 2
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 2
45283: NEG
45284: PUSH
45285: LD_INT 1
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 3
45294: NEG
45295: PUSH
45296: LD_INT 0
45298: PUSH
45299: EMPTY
45300: LIST
45301: LIST
45302: PUSH
45303: LD_INT 3
45305: NEG
45306: PUSH
45307: LD_INT 1
45309: NEG
45310: PUSH
45311: EMPTY
45312: LIST
45313: LIST
45314: PUSH
45315: EMPTY
45316: LIST
45317: LIST
45318: LIST
45319: LIST
45320: LIST
45321: LIST
45322: LIST
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45346: LD_ADDR_VAR 0 44
45350: PUSH
45351: LD_INT 0
45353: PUSH
45354: LD_INT 0
45356: PUSH
45357: EMPTY
45358: LIST
45359: LIST
45360: PUSH
45361: LD_INT 0
45363: PUSH
45364: LD_INT 1
45366: NEG
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 1
45374: PUSH
45375: LD_INT 0
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: PUSH
45382: LD_INT 1
45384: PUSH
45385: LD_INT 1
45387: PUSH
45388: EMPTY
45389: LIST
45390: LIST
45391: PUSH
45392: LD_INT 0
45394: PUSH
45395: LD_INT 1
45397: PUSH
45398: EMPTY
45399: LIST
45400: LIST
45401: PUSH
45402: LD_INT 1
45404: NEG
45405: PUSH
45406: LD_INT 0
45408: PUSH
45409: EMPTY
45410: LIST
45411: LIST
45412: PUSH
45413: LD_INT 1
45415: NEG
45416: PUSH
45417: LD_INT 1
45419: NEG
45420: PUSH
45421: EMPTY
45422: LIST
45423: LIST
45424: PUSH
45425: LD_INT 1
45427: NEG
45428: PUSH
45429: LD_INT 2
45431: NEG
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 1
45439: PUSH
45440: LD_INT 1
45442: NEG
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 2
45450: PUSH
45451: LD_INT 0
45453: PUSH
45454: EMPTY
45455: LIST
45456: LIST
45457: PUSH
45458: LD_INT 2
45460: PUSH
45461: LD_INT 1
45463: PUSH
45464: EMPTY
45465: LIST
45466: LIST
45467: PUSH
45468: LD_INT 2
45470: PUSH
45471: LD_INT 2
45473: PUSH
45474: EMPTY
45475: LIST
45476: LIST
45477: PUSH
45478: LD_INT 1
45480: PUSH
45481: LD_INT 2
45483: PUSH
45484: EMPTY
45485: LIST
45486: LIST
45487: PUSH
45488: LD_INT 1
45490: NEG
45491: PUSH
45492: LD_INT 1
45494: PUSH
45495: EMPTY
45496: LIST
45497: LIST
45498: PUSH
45499: LD_INT 2
45501: NEG
45502: PUSH
45503: LD_INT 0
45505: PUSH
45506: EMPTY
45507: LIST
45508: LIST
45509: PUSH
45510: LD_INT 2
45512: NEG
45513: PUSH
45514: LD_INT 1
45516: NEG
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 2
45524: NEG
45525: PUSH
45526: LD_INT 2
45528: NEG
45529: PUSH
45530: EMPTY
45531: LIST
45532: LIST
45533: PUSH
45534: LD_INT 2
45536: NEG
45537: PUSH
45538: LD_INT 3
45540: NEG
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 2
45548: PUSH
45549: LD_INT 1
45551: NEG
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 3
45559: PUSH
45560: LD_INT 0
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 3
45569: PUSH
45570: LD_INT 1
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 3
45579: PUSH
45580: LD_INT 2
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 3
45589: PUSH
45590: LD_INT 3
45592: PUSH
45593: EMPTY
45594: LIST
45595: LIST
45596: PUSH
45597: LD_INT 2
45599: PUSH
45600: LD_INT 3
45602: PUSH
45603: EMPTY
45604: LIST
45605: LIST
45606: PUSH
45607: LD_INT 2
45609: NEG
45610: PUSH
45611: LD_INT 1
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 3
45620: NEG
45621: PUSH
45622: LD_INT 0
45624: PUSH
45625: EMPTY
45626: LIST
45627: LIST
45628: PUSH
45629: LD_INT 3
45631: NEG
45632: PUSH
45633: LD_INT 1
45635: NEG
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 3
45643: NEG
45644: PUSH
45645: LD_INT 2
45647: NEG
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: LD_INT 3
45655: NEG
45656: PUSH
45657: LD_INT 3
45659: NEG
45660: PUSH
45661: EMPTY
45662: LIST
45663: LIST
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: LIST
45669: LIST
45670: LIST
45671: LIST
45672: LIST
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45696: LD_ADDR_VAR 0 45
45700: PUSH
45701: LD_INT 0
45703: PUSH
45704: LD_INT 0
45706: PUSH
45707: EMPTY
45708: LIST
45709: LIST
45710: PUSH
45711: LD_INT 0
45713: PUSH
45714: LD_INT 1
45716: NEG
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 1
45724: PUSH
45725: LD_INT 0
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 1
45734: PUSH
45735: LD_INT 1
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 0
45744: PUSH
45745: LD_INT 1
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 1
45754: NEG
45755: PUSH
45756: LD_INT 0
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 1
45765: NEG
45766: PUSH
45767: LD_INT 1
45769: NEG
45770: PUSH
45771: EMPTY
45772: LIST
45773: LIST
45774: PUSH
45775: LD_INT 1
45777: NEG
45778: PUSH
45779: LD_INT 2
45781: NEG
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 0
45789: PUSH
45790: LD_INT 2
45792: NEG
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 1
45800: PUSH
45801: LD_INT 1
45803: NEG
45804: PUSH
45805: EMPTY
45806: LIST
45807: LIST
45808: PUSH
45809: LD_INT 2
45811: PUSH
45812: LD_INT 1
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: PUSH
45819: LD_INT 2
45821: PUSH
45822: LD_INT 2
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: LD_INT 1
45831: PUSH
45832: LD_INT 2
45834: PUSH
45835: EMPTY
45836: LIST
45837: LIST
45838: PUSH
45839: LD_INT 0
45841: PUSH
45842: LD_INT 2
45844: PUSH
45845: EMPTY
45846: LIST
45847: LIST
45848: PUSH
45849: LD_INT 1
45851: NEG
45852: PUSH
45853: LD_INT 1
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 2
45862: NEG
45863: PUSH
45864: LD_INT 1
45866: NEG
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 2
45874: NEG
45875: PUSH
45876: LD_INT 2
45878: NEG
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 2
45886: NEG
45887: PUSH
45888: LD_INT 3
45890: NEG
45891: PUSH
45892: EMPTY
45893: LIST
45894: LIST
45895: PUSH
45896: LD_INT 1
45898: NEG
45899: PUSH
45900: LD_INT 3
45902: NEG
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 0
45910: PUSH
45911: LD_INT 3
45913: NEG
45914: PUSH
45915: EMPTY
45916: LIST
45917: LIST
45918: PUSH
45919: LD_INT 1
45921: PUSH
45922: LD_INT 2
45924: NEG
45925: PUSH
45926: EMPTY
45927: LIST
45928: LIST
45929: PUSH
45930: LD_INT 3
45932: PUSH
45933: LD_INT 2
45935: PUSH
45936: EMPTY
45937: LIST
45938: LIST
45939: PUSH
45940: LD_INT 3
45942: PUSH
45943: LD_INT 3
45945: PUSH
45946: EMPTY
45947: LIST
45948: LIST
45949: PUSH
45950: LD_INT 2
45952: PUSH
45953: LD_INT 3
45955: PUSH
45956: EMPTY
45957: LIST
45958: LIST
45959: PUSH
45960: LD_INT 1
45962: PUSH
45963: LD_INT 3
45965: PUSH
45966: EMPTY
45967: LIST
45968: LIST
45969: PUSH
45970: LD_INT 0
45972: PUSH
45973: LD_INT 3
45975: PUSH
45976: EMPTY
45977: LIST
45978: LIST
45979: PUSH
45980: LD_INT 1
45982: NEG
45983: PUSH
45984: LD_INT 2
45986: PUSH
45987: EMPTY
45988: LIST
45989: LIST
45990: PUSH
45991: LD_INT 3
45993: NEG
45994: PUSH
45995: LD_INT 2
45997: NEG
45998: PUSH
45999: EMPTY
46000: LIST
46001: LIST
46002: PUSH
46003: LD_INT 3
46005: NEG
46006: PUSH
46007: LD_INT 3
46009: NEG
46010: PUSH
46011: EMPTY
46012: LIST
46013: LIST
46014: PUSH
46015: EMPTY
46016: LIST
46017: LIST
46018: LIST
46019: LIST
46020: LIST
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: LIST
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46046: LD_ADDR_VAR 0 46
46050: PUSH
46051: LD_INT 0
46053: PUSH
46054: LD_INT 0
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 0
46063: PUSH
46064: LD_INT 1
46066: NEG
46067: PUSH
46068: EMPTY
46069: LIST
46070: LIST
46071: PUSH
46072: LD_INT 1
46074: PUSH
46075: LD_INT 0
46077: PUSH
46078: EMPTY
46079: LIST
46080: LIST
46081: PUSH
46082: LD_INT 1
46084: PUSH
46085: LD_INT 1
46087: PUSH
46088: EMPTY
46089: LIST
46090: LIST
46091: PUSH
46092: LD_INT 0
46094: PUSH
46095: LD_INT 1
46097: PUSH
46098: EMPTY
46099: LIST
46100: LIST
46101: PUSH
46102: LD_INT 1
46104: NEG
46105: PUSH
46106: LD_INT 0
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 1
46115: NEG
46116: PUSH
46117: LD_INT 1
46119: NEG
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 1
46127: NEG
46128: PUSH
46129: LD_INT 2
46131: NEG
46132: PUSH
46133: EMPTY
46134: LIST
46135: LIST
46136: PUSH
46137: LD_INT 0
46139: PUSH
46140: LD_INT 2
46142: NEG
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 1
46150: PUSH
46151: LD_INT 1
46153: NEG
46154: PUSH
46155: EMPTY
46156: LIST
46157: LIST
46158: PUSH
46159: LD_INT 2
46161: PUSH
46162: LD_INT 0
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: PUSH
46169: LD_INT 2
46171: PUSH
46172: LD_INT 1
46174: PUSH
46175: EMPTY
46176: LIST
46177: LIST
46178: PUSH
46179: LD_INT 1
46181: PUSH
46182: LD_INT 2
46184: PUSH
46185: EMPTY
46186: LIST
46187: LIST
46188: PUSH
46189: LD_INT 0
46191: PUSH
46192: LD_INT 2
46194: PUSH
46195: EMPTY
46196: LIST
46197: LIST
46198: PUSH
46199: LD_INT 1
46201: NEG
46202: PUSH
46203: LD_INT 1
46205: PUSH
46206: EMPTY
46207: LIST
46208: LIST
46209: PUSH
46210: LD_INT 2
46212: NEG
46213: PUSH
46214: LD_INT 0
46216: PUSH
46217: EMPTY
46218: LIST
46219: LIST
46220: PUSH
46221: LD_INT 2
46223: NEG
46224: PUSH
46225: LD_INT 1
46227: NEG
46228: PUSH
46229: EMPTY
46230: LIST
46231: LIST
46232: PUSH
46233: LD_INT 1
46235: NEG
46236: PUSH
46237: LD_INT 3
46239: NEG
46240: PUSH
46241: EMPTY
46242: LIST
46243: LIST
46244: PUSH
46245: LD_INT 0
46247: PUSH
46248: LD_INT 3
46250: NEG
46251: PUSH
46252: EMPTY
46253: LIST
46254: LIST
46255: PUSH
46256: LD_INT 1
46258: PUSH
46259: LD_INT 2
46261: NEG
46262: PUSH
46263: EMPTY
46264: LIST
46265: LIST
46266: PUSH
46267: LD_INT 2
46269: PUSH
46270: LD_INT 1
46272: NEG
46273: PUSH
46274: EMPTY
46275: LIST
46276: LIST
46277: PUSH
46278: LD_INT 3
46280: PUSH
46281: LD_INT 0
46283: PUSH
46284: EMPTY
46285: LIST
46286: LIST
46287: PUSH
46288: LD_INT 3
46290: PUSH
46291: LD_INT 1
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 1
46300: PUSH
46301: LD_INT 3
46303: PUSH
46304: EMPTY
46305: LIST
46306: LIST
46307: PUSH
46308: LD_INT 0
46310: PUSH
46311: LD_INT 3
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 1
46320: NEG
46321: PUSH
46322: LD_INT 2
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 2
46331: NEG
46332: PUSH
46333: LD_INT 1
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 3
46342: NEG
46343: PUSH
46344: LD_INT 0
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 3
46353: NEG
46354: PUSH
46355: LD_INT 1
46357: NEG
46358: PUSH
46359: EMPTY
46360: LIST
46361: LIST
46362: PUSH
46363: EMPTY
46364: LIST
46365: LIST
46366: LIST
46367: LIST
46368: LIST
46369: LIST
46370: LIST
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: LIST
46393: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46394: LD_ADDR_VAR 0 47
46398: PUSH
46399: LD_INT 0
46401: PUSH
46402: LD_INT 0
46404: PUSH
46405: EMPTY
46406: LIST
46407: LIST
46408: PUSH
46409: LD_INT 0
46411: PUSH
46412: LD_INT 1
46414: NEG
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 1
46422: PUSH
46423: LD_INT 0
46425: PUSH
46426: EMPTY
46427: LIST
46428: LIST
46429: PUSH
46430: LD_INT 1
46432: PUSH
46433: LD_INT 1
46435: PUSH
46436: EMPTY
46437: LIST
46438: LIST
46439: PUSH
46440: LD_INT 0
46442: PUSH
46443: LD_INT 1
46445: PUSH
46446: EMPTY
46447: LIST
46448: LIST
46449: PUSH
46450: LD_INT 1
46452: NEG
46453: PUSH
46454: LD_INT 0
46456: PUSH
46457: EMPTY
46458: LIST
46459: LIST
46460: PUSH
46461: LD_INT 1
46463: NEG
46464: PUSH
46465: LD_INT 1
46467: NEG
46468: PUSH
46469: EMPTY
46470: LIST
46471: LIST
46472: PUSH
46473: LD_INT 1
46475: NEG
46476: PUSH
46477: LD_INT 2
46479: NEG
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 0
46487: PUSH
46488: LD_INT 2
46490: NEG
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 1
46498: PUSH
46499: LD_INT 1
46501: NEG
46502: PUSH
46503: EMPTY
46504: LIST
46505: LIST
46506: PUSH
46507: LD_INT 2
46509: NEG
46510: PUSH
46511: LD_INT 1
46513: NEG
46514: PUSH
46515: EMPTY
46516: LIST
46517: LIST
46518: PUSH
46519: LD_INT 2
46521: NEG
46522: PUSH
46523: LD_INT 2
46525: NEG
46526: PUSH
46527: EMPTY
46528: LIST
46529: LIST
46530: PUSH
46531: EMPTY
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46545: LD_ADDR_VAR 0 48
46549: PUSH
46550: LD_INT 0
46552: PUSH
46553: LD_INT 0
46555: PUSH
46556: EMPTY
46557: LIST
46558: LIST
46559: PUSH
46560: LD_INT 0
46562: PUSH
46563: LD_INT 1
46565: NEG
46566: PUSH
46567: EMPTY
46568: LIST
46569: LIST
46570: PUSH
46571: LD_INT 1
46573: PUSH
46574: LD_INT 0
46576: PUSH
46577: EMPTY
46578: LIST
46579: LIST
46580: PUSH
46581: LD_INT 1
46583: PUSH
46584: LD_INT 1
46586: PUSH
46587: EMPTY
46588: LIST
46589: LIST
46590: PUSH
46591: LD_INT 0
46593: PUSH
46594: LD_INT 1
46596: PUSH
46597: EMPTY
46598: LIST
46599: LIST
46600: PUSH
46601: LD_INT 1
46603: NEG
46604: PUSH
46605: LD_INT 0
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: LD_INT 1
46614: NEG
46615: PUSH
46616: LD_INT 1
46618: NEG
46619: PUSH
46620: EMPTY
46621: LIST
46622: LIST
46623: PUSH
46624: LD_INT 1
46626: NEG
46627: PUSH
46628: LD_INT 2
46630: NEG
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 0
46638: PUSH
46639: LD_INT 2
46641: NEG
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 1
46649: PUSH
46650: LD_INT 1
46652: NEG
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 2
46660: PUSH
46661: LD_INT 0
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 2
46670: PUSH
46671: LD_INT 1
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: EMPTY
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46692: LD_ADDR_VAR 0 49
46696: PUSH
46697: LD_INT 0
46699: PUSH
46700: LD_INT 0
46702: PUSH
46703: EMPTY
46704: LIST
46705: LIST
46706: PUSH
46707: LD_INT 0
46709: PUSH
46710: LD_INT 1
46712: NEG
46713: PUSH
46714: EMPTY
46715: LIST
46716: LIST
46717: PUSH
46718: LD_INT 1
46720: PUSH
46721: LD_INT 0
46723: PUSH
46724: EMPTY
46725: LIST
46726: LIST
46727: PUSH
46728: LD_INT 1
46730: PUSH
46731: LD_INT 1
46733: PUSH
46734: EMPTY
46735: LIST
46736: LIST
46737: PUSH
46738: LD_INT 0
46740: PUSH
46741: LD_INT 1
46743: PUSH
46744: EMPTY
46745: LIST
46746: LIST
46747: PUSH
46748: LD_INT 1
46750: NEG
46751: PUSH
46752: LD_INT 0
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 1
46761: NEG
46762: PUSH
46763: LD_INT 1
46765: NEG
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: LD_INT 1
46773: PUSH
46774: LD_INT 1
46776: NEG
46777: PUSH
46778: EMPTY
46779: LIST
46780: LIST
46781: PUSH
46782: LD_INT 2
46784: PUSH
46785: LD_INT 0
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 2
46794: PUSH
46795: LD_INT 1
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: LD_INT 2
46804: PUSH
46805: LD_INT 2
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 1
46814: PUSH
46815: LD_INT 2
46817: PUSH
46818: EMPTY
46819: LIST
46820: LIST
46821: PUSH
46822: EMPTY
46823: LIST
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46836: LD_ADDR_VAR 0 50
46840: PUSH
46841: LD_INT 0
46843: PUSH
46844: LD_INT 0
46846: PUSH
46847: EMPTY
46848: LIST
46849: LIST
46850: PUSH
46851: LD_INT 0
46853: PUSH
46854: LD_INT 1
46856: NEG
46857: PUSH
46858: EMPTY
46859: LIST
46860: LIST
46861: PUSH
46862: LD_INT 1
46864: PUSH
46865: LD_INT 0
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 1
46874: PUSH
46875: LD_INT 1
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 0
46884: PUSH
46885: LD_INT 1
46887: PUSH
46888: EMPTY
46889: LIST
46890: LIST
46891: PUSH
46892: LD_INT 1
46894: NEG
46895: PUSH
46896: LD_INT 0
46898: PUSH
46899: EMPTY
46900: LIST
46901: LIST
46902: PUSH
46903: LD_INT 1
46905: NEG
46906: PUSH
46907: LD_INT 1
46909: NEG
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 2
46917: PUSH
46918: LD_INT 1
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 2
46927: PUSH
46928: LD_INT 2
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 1
46937: PUSH
46938: LD_INT 2
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 0
46947: PUSH
46948: LD_INT 2
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 1
46957: NEG
46958: PUSH
46959: LD_INT 1
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: EMPTY
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46980: LD_ADDR_VAR 0 51
46984: PUSH
46985: LD_INT 0
46987: PUSH
46988: LD_INT 0
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 0
46997: PUSH
46998: LD_INT 1
47000: NEG
47001: PUSH
47002: EMPTY
47003: LIST
47004: LIST
47005: PUSH
47006: LD_INT 1
47008: PUSH
47009: LD_INT 0
47011: PUSH
47012: EMPTY
47013: LIST
47014: LIST
47015: PUSH
47016: LD_INT 1
47018: PUSH
47019: LD_INT 1
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 0
47028: PUSH
47029: LD_INT 1
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 1
47038: NEG
47039: PUSH
47040: LD_INT 0
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: PUSH
47047: LD_INT 1
47049: NEG
47050: PUSH
47051: LD_INT 1
47053: NEG
47054: PUSH
47055: EMPTY
47056: LIST
47057: LIST
47058: PUSH
47059: LD_INT 1
47061: PUSH
47062: LD_INT 2
47064: PUSH
47065: EMPTY
47066: LIST
47067: LIST
47068: PUSH
47069: LD_INT 0
47071: PUSH
47072: LD_INT 2
47074: PUSH
47075: EMPTY
47076: LIST
47077: LIST
47078: PUSH
47079: LD_INT 1
47081: NEG
47082: PUSH
47083: LD_INT 1
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 2
47092: NEG
47093: PUSH
47094: LD_INT 0
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 2
47103: NEG
47104: PUSH
47105: LD_INT 1
47107: NEG
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: EMPTY
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47127: LD_ADDR_VAR 0 52
47131: PUSH
47132: LD_INT 0
47134: PUSH
47135: LD_INT 0
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 0
47144: PUSH
47145: LD_INT 1
47147: NEG
47148: PUSH
47149: EMPTY
47150: LIST
47151: LIST
47152: PUSH
47153: LD_INT 1
47155: PUSH
47156: LD_INT 0
47158: PUSH
47159: EMPTY
47160: LIST
47161: LIST
47162: PUSH
47163: LD_INT 1
47165: PUSH
47166: LD_INT 1
47168: PUSH
47169: EMPTY
47170: LIST
47171: LIST
47172: PUSH
47173: LD_INT 0
47175: PUSH
47176: LD_INT 1
47178: PUSH
47179: EMPTY
47180: LIST
47181: LIST
47182: PUSH
47183: LD_INT 1
47185: NEG
47186: PUSH
47187: LD_INT 0
47189: PUSH
47190: EMPTY
47191: LIST
47192: LIST
47193: PUSH
47194: LD_INT 1
47196: NEG
47197: PUSH
47198: LD_INT 1
47200: NEG
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 1
47208: NEG
47209: PUSH
47210: LD_INT 2
47212: NEG
47213: PUSH
47214: EMPTY
47215: LIST
47216: LIST
47217: PUSH
47218: LD_INT 1
47220: NEG
47221: PUSH
47222: LD_INT 1
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 2
47231: NEG
47232: PUSH
47233: LD_INT 0
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 2
47242: NEG
47243: PUSH
47244: LD_INT 1
47246: NEG
47247: PUSH
47248: EMPTY
47249: LIST
47250: LIST
47251: PUSH
47252: LD_INT 2
47254: NEG
47255: PUSH
47256: LD_INT 2
47258: NEG
47259: PUSH
47260: EMPTY
47261: LIST
47262: LIST
47263: PUSH
47264: EMPTY
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47278: LD_ADDR_VAR 0 53
47282: PUSH
47283: LD_INT 0
47285: PUSH
47286: LD_INT 0
47288: PUSH
47289: EMPTY
47290: LIST
47291: LIST
47292: PUSH
47293: LD_INT 0
47295: PUSH
47296: LD_INT 1
47298: NEG
47299: PUSH
47300: EMPTY
47301: LIST
47302: LIST
47303: PUSH
47304: LD_INT 1
47306: PUSH
47307: LD_INT 0
47309: PUSH
47310: EMPTY
47311: LIST
47312: LIST
47313: PUSH
47314: LD_INT 1
47316: PUSH
47317: LD_INT 1
47319: PUSH
47320: EMPTY
47321: LIST
47322: LIST
47323: PUSH
47324: LD_INT 0
47326: PUSH
47327: LD_INT 1
47329: PUSH
47330: EMPTY
47331: LIST
47332: LIST
47333: PUSH
47334: LD_INT 1
47336: NEG
47337: PUSH
47338: LD_INT 0
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 1
47347: NEG
47348: PUSH
47349: LD_INT 1
47351: NEG
47352: PUSH
47353: EMPTY
47354: LIST
47355: LIST
47356: PUSH
47357: LD_INT 1
47359: NEG
47360: PUSH
47361: LD_INT 2
47363: NEG
47364: PUSH
47365: EMPTY
47366: LIST
47367: LIST
47368: PUSH
47369: LD_INT 0
47371: PUSH
47372: LD_INT 2
47374: NEG
47375: PUSH
47376: EMPTY
47377: LIST
47378: LIST
47379: PUSH
47380: LD_INT 1
47382: PUSH
47383: LD_INT 1
47385: NEG
47386: PUSH
47387: EMPTY
47388: LIST
47389: LIST
47390: PUSH
47391: LD_INT 2
47393: PUSH
47394: LD_INT 0
47396: PUSH
47397: EMPTY
47398: LIST
47399: LIST
47400: PUSH
47401: LD_INT 2
47403: PUSH
47404: LD_INT 1
47406: PUSH
47407: EMPTY
47408: LIST
47409: LIST
47410: PUSH
47411: LD_INT 2
47413: PUSH
47414: LD_INT 2
47416: PUSH
47417: EMPTY
47418: LIST
47419: LIST
47420: PUSH
47421: LD_INT 1
47423: PUSH
47424: LD_INT 2
47426: PUSH
47427: EMPTY
47428: LIST
47429: LIST
47430: PUSH
47431: LD_INT 0
47433: PUSH
47434: LD_INT 2
47436: PUSH
47437: EMPTY
47438: LIST
47439: LIST
47440: PUSH
47441: LD_INT 1
47443: NEG
47444: PUSH
47445: LD_INT 1
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: PUSH
47452: LD_INT 2
47454: NEG
47455: PUSH
47456: LD_INT 0
47458: PUSH
47459: EMPTY
47460: LIST
47461: LIST
47462: PUSH
47463: LD_INT 2
47465: NEG
47466: PUSH
47467: LD_INT 1
47469: NEG
47470: PUSH
47471: EMPTY
47472: LIST
47473: LIST
47474: PUSH
47475: LD_INT 2
47477: NEG
47478: PUSH
47479: LD_INT 2
47481: NEG
47482: PUSH
47483: EMPTY
47484: LIST
47485: LIST
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: LIST
47491: LIST
47492: LIST
47493: LIST
47494: LIST
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47508: LD_ADDR_VAR 0 54
47512: PUSH
47513: LD_INT 0
47515: PUSH
47516: LD_INT 0
47518: PUSH
47519: EMPTY
47520: LIST
47521: LIST
47522: PUSH
47523: LD_INT 0
47525: PUSH
47526: LD_INT 1
47528: NEG
47529: PUSH
47530: EMPTY
47531: LIST
47532: LIST
47533: PUSH
47534: LD_INT 1
47536: PUSH
47537: LD_INT 0
47539: PUSH
47540: EMPTY
47541: LIST
47542: LIST
47543: PUSH
47544: LD_INT 1
47546: PUSH
47547: LD_INT 1
47549: PUSH
47550: EMPTY
47551: LIST
47552: LIST
47553: PUSH
47554: LD_INT 0
47556: PUSH
47557: LD_INT 1
47559: PUSH
47560: EMPTY
47561: LIST
47562: LIST
47563: PUSH
47564: LD_INT 1
47566: NEG
47567: PUSH
47568: LD_INT 0
47570: PUSH
47571: EMPTY
47572: LIST
47573: LIST
47574: PUSH
47575: LD_INT 1
47577: NEG
47578: PUSH
47579: LD_INT 1
47581: NEG
47582: PUSH
47583: EMPTY
47584: LIST
47585: LIST
47586: PUSH
47587: LD_INT 1
47589: NEG
47590: PUSH
47591: LD_INT 2
47593: NEG
47594: PUSH
47595: EMPTY
47596: LIST
47597: LIST
47598: PUSH
47599: LD_INT 0
47601: PUSH
47602: LD_INT 2
47604: NEG
47605: PUSH
47606: EMPTY
47607: LIST
47608: LIST
47609: PUSH
47610: LD_INT 1
47612: PUSH
47613: LD_INT 1
47615: NEG
47616: PUSH
47617: EMPTY
47618: LIST
47619: LIST
47620: PUSH
47621: LD_INT 2
47623: PUSH
47624: LD_INT 0
47626: PUSH
47627: EMPTY
47628: LIST
47629: LIST
47630: PUSH
47631: LD_INT 2
47633: PUSH
47634: LD_INT 1
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 2
47643: PUSH
47644: LD_INT 2
47646: PUSH
47647: EMPTY
47648: LIST
47649: LIST
47650: PUSH
47651: LD_INT 1
47653: PUSH
47654: LD_INT 2
47656: PUSH
47657: EMPTY
47658: LIST
47659: LIST
47660: PUSH
47661: LD_INT 0
47663: PUSH
47664: LD_INT 2
47666: PUSH
47667: EMPTY
47668: LIST
47669: LIST
47670: PUSH
47671: LD_INT 1
47673: NEG
47674: PUSH
47675: LD_INT 1
47677: PUSH
47678: EMPTY
47679: LIST
47680: LIST
47681: PUSH
47682: LD_INT 2
47684: NEG
47685: PUSH
47686: LD_INT 0
47688: PUSH
47689: EMPTY
47690: LIST
47691: LIST
47692: PUSH
47693: LD_INT 2
47695: NEG
47696: PUSH
47697: LD_INT 1
47699: NEG
47700: PUSH
47701: EMPTY
47702: LIST
47703: LIST
47704: PUSH
47705: LD_INT 2
47707: NEG
47708: PUSH
47709: LD_INT 2
47711: NEG
47712: PUSH
47713: EMPTY
47714: LIST
47715: LIST
47716: PUSH
47717: EMPTY
47718: LIST
47719: LIST
47720: LIST
47721: LIST
47722: LIST
47723: LIST
47724: LIST
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47738: LD_ADDR_VAR 0 55
47742: PUSH
47743: LD_INT 0
47745: PUSH
47746: LD_INT 0
47748: PUSH
47749: EMPTY
47750: LIST
47751: LIST
47752: PUSH
47753: LD_INT 0
47755: PUSH
47756: LD_INT 1
47758: NEG
47759: PUSH
47760: EMPTY
47761: LIST
47762: LIST
47763: PUSH
47764: LD_INT 1
47766: PUSH
47767: LD_INT 0
47769: PUSH
47770: EMPTY
47771: LIST
47772: LIST
47773: PUSH
47774: LD_INT 1
47776: PUSH
47777: LD_INT 1
47779: PUSH
47780: EMPTY
47781: LIST
47782: LIST
47783: PUSH
47784: LD_INT 0
47786: PUSH
47787: LD_INT 1
47789: PUSH
47790: EMPTY
47791: LIST
47792: LIST
47793: PUSH
47794: LD_INT 1
47796: NEG
47797: PUSH
47798: LD_INT 0
47800: PUSH
47801: EMPTY
47802: LIST
47803: LIST
47804: PUSH
47805: LD_INT 1
47807: NEG
47808: PUSH
47809: LD_INT 1
47811: NEG
47812: PUSH
47813: EMPTY
47814: LIST
47815: LIST
47816: PUSH
47817: LD_INT 1
47819: NEG
47820: PUSH
47821: LD_INT 2
47823: NEG
47824: PUSH
47825: EMPTY
47826: LIST
47827: LIST
47828: PUSH
47829: LD_INT 0
47831: PUSH
47832: LD_INT 2
47834: NEG
47835: PUSH
47836: EMPTY
47837: LIST
47838: LIST
47839: PUSH
47840: LD_INT 1
47842: PUSH
47843: LD_INT 1
47845: NEG
47846: PUSH
47847: EMPTY
47848: LIST
47849: LIST
47850: PUSH
47851: LD_INT 2
47853: PUSH
47854: LD_INT 0
47856: PUSH
47857: EMPTY
47858: LIST
47859: LIST
47860: PUSH
47861: LD_INT 2
47863: PUSH
47864: LD_INT 1
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: PUSH
47871: LD_INT 2
47873: PUSH
47874: LD_INT 2
47876: PUSH
47877: EMPTY
47878: LIST
47879: LIST
47880: PUSH
47881: LD_INT 1
47883: PUSH
47884: LD_INT 2
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 0
47893: PUSH
47894: LD_INT 2
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PUSH
47901: LD_INT 1
47903: NEG
47904: PUSH
47905: LD_INT 1
47907: PUSH
47908: EMPTY
47909: LIST
47910: LIST
47911: PUSH
47912: LD_INT 2
47914: NEG
47915: PUSH
47916: LD_INT 0
47918: PUSH
47919: EMPTY
47920: LIST
47921: LIST
47922: PUSH
47923: LD_INT 2
47925: NEG
47926: PUSH
47927: LD_INT 1
47929: NEG
47930: PUSH
47931: EMPTY
47932: LIST
47933: LIST
47934: PUSH
47935: LD_INT 2
47937: NEG
47938: PUSH
47939: LD_INT 2
47941: NEG
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: EMPTY
47948: LIST
47949: LIST
47950: LIST
47951: LIST
47952: LIST
47953: LIST
47954: LIST
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47968: LD_ADDR_VAR 0 56
47972: PUSH
47973: LD_INT 0
47975: PUSH
47976: LD_INT 0
47978: PUSH
47979: EMPTY
47980: LIST
47981: LIST
47982: PUSH
47983: LD_INT 0
47985: PUSH
47986: LD_INT 1
47988: NEG
47989: PUSH
47990: EMPTY
47991: LIST
47992: LIST
47993: PUSH
47994: LD_INT 1
47996: PUSH
47997: LD_INT 0
47999: PUSH
48000: EMPTY
48001: LIST
48002: LIST
48003: PUSH
48004: LD_INT 1
48006: PUSH
48007: LD_INT 1
48009: PUSH
48010: EMPTY
48011: LIST
48012: LIST
48013: PUSH
48014: LD_INT 0
48016: PUSH
48017: LD_INT 1
48019: PUSH
48020: EMPTY
48021: LIST
48022: LIST
48023: PUSH
48024: LD_INT 1
48026: NEG
48027: PUSH
48028: LD_INT 0
48030: PUSH
48031: EMPTY
48032: LIST
48033: LIST
48034: PUSH
48035: LD_INT 1
48037: NEG
48038: PUSH
48039: LD_INT 1
48041: NEG
48042: PUSH
48043: EMPTY
48044: LIST
48045: LIST
48046: PUSH
48047: LD_INT 1
48049: NEG
48050: PUSH
48051: LD_INT 2
48053: NEG
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: PUSH
48059: LD_INT 0
48061: PUSH
48062: LD_INT 2
48064: NEG
48065: PUSH
48066: EMPTY
48067: LIST
48068: LIST
48069: PUSH
48070: LD_INT 1
48072: PUSH
48073: LD_INT 1
48075: NEG
48076: PUSH
48077: EMPTY
48078: LIST
48079: LIST
48080: PUSH
48081: LD_INT 2
48083: PUSH
48084: LD_INT 0
48086: PUSH
48087: EMPTY
48088: LIST
48089: LIST
48090: PUSH
48091: LD_INT 2
48093: PUSH
48094: LD_INT 1
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: PUSH
48101: LD_INT 2
48103: PUSH
48104: LD_INT 2
48106: PUSH
48107: EMPTY
48108: LIST
48109: LIST
48110: PUSH
48111: LD_INT 1
48113: PUSH
48114: LD_INT 2
48116: PUSH
48117: EMPTY
48118: LIST
48119: LIST
48120: PUSH
48121: LD_INT 0
48123: PUSH
48124: LD_INT 2
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 1
48133: NEG
48134: PUSH
48135: LD_INT 1
48137: PUSH
48138: EMPTY
48139: LIST
48140: LIST
48141: PUSH
48142: LD_INT 2
48144: NEG
48145: PUSH
48146: LD_INT 0
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 2
48155: NEG
48156: PUSH
48157: LD_INT 1
48159: NEG
48160: PUSH
48161: EMPTY
48162: LIST
48163: LIST
48164: PUSH
48165: LD_INT 2
48167: NEG
48168: PUSH
48169: LD_INT 2
48171: NEG
48172: PUSH
48173: EMPTY
48174: LIST
48175: LIST
48176: PUSH
48177: EMPTY
48178: LIST
48179: LIST
48180: LIST
48181: LIST
48182: LIST
48183: LIST
48184: LIST
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48198: LD_ADDR_VAR 0 57
48202: PUSH
48203: LD_INT 0
48205: PUSH
48206: LD_INT 0
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 0
48215: PUSH
48216: LD_INT 1
48218: NEG
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 1
48226: PUSH
48227: LD_INT 0
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: LD_INT 1
48236: PUSH
48237: LD_INT 1
48239: PUSH
48240: EMPTY
48241: LIST
48242: LIST
48243: PUSH
48244: LD_INT 0
48246: PUSH
48247: LD_INT 1
48249: PUSH
48250: EMPTY
48251: LIST
48252: LIST
48253: PUSH
48254: LD_INT 1
48256: NEG
48257: PUSH
48258: LD_INT 0
48260: PUSH
48261: EMPTY
48262: LIST
48263: LIST
48264: PUSH
48265: LD_INT 1
48267: NEG
48268: PUSH
48269: LD_INT 1
48271: NEG
48272: PUSH
48273: EMPTY
48274: LIST
48275: LIST
48276: PUSH
48277: LD_INT 1
48279: NEG
48280: PUSH
48281: LD_INT 2
48283: NEG
48284: PUSH
48285: EMPTY
48286: LIST
48287: LIST
48288: PUSH
48289: LD_INT 0
48291: PUSH
48292: LD_INT 2
48294: NEG
48295: PUSH
48296: EMPTY
48297: LIST
48298: LIST
48299: PUSH
48300: LD_INT 1
48302: PUSH
48303: LD_INT 1
48305: NEG
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 2
48313: PUSH
48314: LD_INT 0
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 2
48323: PUSH
48324: LD_INT 1
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: LD_INT 2
48333: PUSH
48334: LD_INT 2
48336: PUSH
48337: EMPTY
48338: LIST
48339: LIST
48340: PUSH
48341: LD_INT 1
48343: PUSH
48344: LD_INT 2
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 0
48353: PUSH
48354: LD_INT 2
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 1
48363: NEG
48364: PUSH
48365: LD_INT 1
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 2
48374: NEG
48375: PUSH
48376: LD_INT 0
48378: PUSH
48379: EMPTY
48380: LIST
48381: LIST
48382: PUSH
48383: LD_INT 2
48385: NEG
48386: PUSH
48387: LD_INT 1
48389: NEG
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 2
48397: NEG
48398: PUSH
48399: LD_INT 2
48401: NEG
48402: PUSH
48403: EMPTY
48404: LIST
48405: LIST
48406: PUSH
48407: EMPTY
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48428: LD_ADDR_VAR 0 58
48432: PUSH
48433: LD_INT 0
48435: PUSH
48436: LD_INT 0
48438: PUSH
48439: EMPTY
48440: LIST
48441: LIST
48442: PUSH
48443: LD_INT 0
48445: PUSH
48446: LD_INT 1
48448: NEG
48449: PUSH
48450: EMPTY
48451: LIST
48452: LIST
48453: PUSH
48454: LD_INT 1
48456: PUSH
48457: LD_INT 0
48459: PUSH
48460: EMPTY
48461: LIST
48462: LIST
48463: PUSH
48464: LD_INT 1
48466: PUSH
48467: LD_INT 1
48469: PUSH
48470: EMPTY
48471: LIST
48472: LIST
48473: PUSH
48474: LD_INT 0
48476: PUSH
48477: LD_INT 1
48479: PUSH
48480: EMPTY
48481: LIST
48482: LIST
48483: PUSH
48484: LD_INT 1
48486: NEG
48487: PUSH
48488: LD_INT 0
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_INT 1
48497: NEG
48498: PUSH
48499: LD_INT 1
48501: NEG
48502: PUSH
48503: EMPTY
48504: LIST
48505: LIST
48506: PUSH
48507: LD_INT 1
48509: NEG
48510: PUSH
48511: LD_INT 2
48513: NEG
48514: PUSH
48515: EMPTY
48516: LIST
48517: LIST
48518: PUSH
48519: LD_INT 0
48521: PUSH
48522: LD_INT 2
48524: NEG
48525: PUSH
48526: EMPTY
48527: LIST
48528: LIST
48529: PUSH
48530: LD_INT 1
48532: PUSH
48533: LD_INT 1
48535: NEG
48536: PUSH
48537: EMPTY
48538: LIST
48539: LIST
48540: PUSH
48541: LD_INT 2
48543: PUSH
48544: LD_INT 0
48546: PUSH
48547: EMPTY
48548: LIST
48549: LIST
48550: PUSH
48551: LD_INT 2
48553: PUSH
48554: LD_INT 1
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: LD_INT 2
48563: PUSH
48564: LD_INT 2
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 1
48573: PUSH
48574: LD_INT 2
48576: PUSH
48577: EMPTY
48578: LIST
48579: LIST
48580: PUSH
48581: LD_INT 0
48583: PUSH
48584: LD_INT 2
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: PUSH
48591: LD_INT 1
48593: NEG
48594: PUSH
48595: LD_INT 1
48597: PUSH
48598: EMPTY
48599: LIST
48600: LIST
48601: PUSH
48602: LD_INT 2
48604: NEG
48605: PUSH
48606: LD_INT 0
48608: PUSH
48609: EMPTY
48610: LIST
48611: LIST
48612: PUSH
48613: LD_INT 2
48615: NEG
48616: PUSH
48617: LD_INT 1
48619: NEG
48620: PUSH
48621: EMPTY
48622: LIST
48623: LIST
48624: PUSH
48625: LD_INT 2
48627: NEG
48628: PUSH
48629: LD_INT 2
48631: NEG
48632: PUSH
48633: EMPTY
48634: LIST
48635: LIST
48636: PUSH
48637: EMPTY
48638: LIST
48639: LIST
48640: LIST
48641: LIST
48642: LIST
48643: LIST
48644: LIST
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48658: LD_ADDR_VAR 0 59
48662: PUSH
48663: LD_INT 0
48665: PUSH
48666: LD_INT 0
48668: PUSH
48669: EMPTY
48670: LIST
48671: LIST
48672: PUSH
48673: LD_INT 0
48675: PUSH
48676: LD_INT 1
48678: NEG
48679: PUSH
48680: EMPTY
48681: LIST
48682: LIST
48683: PUSH
48684: LD_INT 1
48686: PUSH
48687: LD_INT 0
48689: PUSH
48690: EMPTY
48691: LIST
48692: LIST
48693: PUSH
48694: LD_INT 1
48696: PUSH
48697: LD_INT 1
48699: PUSH
48700: EMPTY
48701: LIST
48702: LIST
48703: PUSH
48704: LD_INT 0
48706: PUSH
48707: LD_INT 1
48709: PUSH
48710: EMPTY
48711: LIST
48712: LIST
48713: PUSH
48714: LD_INT 1
48716: NEG
48717: PUSH
48718: LD_INT 0
48720: PUSH
48721: EMPTY
48722: LIST
48723: LIST
48724: PUSH
48725: LD_INT 1
48727: NEG
48728: PUSH
48729: LD_INT 1
48731: NEG
48732: PUSH
48733: EMPTY
48734: LIST
48735: LIST
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: LIST
48741: LIST
48742: LIST
48743: LIST
48744: LIST
48745: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48746: LD_ADDR_VAR 0 60
48750: PUSH
48751: LD_INT 0
48753: PUSH
48754: LD_INT 0
48756: PUSH
48757: EMPTY
48758: LIST
48759: LIST
48760: PUSH
48761: LD_INT 0
48763: PUSH
48764: LD_INT 1
48766: NEG
48767: PUSH
48768: EMPTY
48769: LIST
48770: LIST
48771: PUSH
48772: LD_INT 1
48774: PUSH
48775: LD_INT 0
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: LD_INT 1
48784: PUSH
48785: LD_INT 1
48787: PUSH
48788: EMPTY
48789: LIST
48790: LIST
48791: PUSH
48792: LD_INT 0
48794: PUSH
48795: LD_INT 1
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: LD_INT 1
48804: NEG
48805: PUSH
48806: LD_INT 0
48808: PUSH
48809: EMPTY
48810: LIST
48811: LIST
48812: PUSH
48813: LD_INT 1
48815: NEG
48816: PUSH
48817: LD_INT 1
48819: NEG
48820: PUSH
48821: EMPTY
48822: LIST
48823: LIST
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: LIST
48829: LIST
48830: LIST
48831: LIST
48832: LIST
48833: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48834: LD_ADDR_VAR 0 61
48838: PUSH
48839: LD_INT 0
48841: PUSH
48842: LD_INT 0
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 0
48851: PUSH
48852: LD_INT 1
48854: NEG
48855: PUSH
48856: EMPTY
48857: LIST
48858: LIST
48859: PUSH
48860: LD_INT 1
48862: PUSH
48863: LD_INT 0
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 1
48872: PUSH
48873: LD_INT 1
48875: PUSH
48876: EMPTY
48877: LIST
48878: LIST
48879: PUSH
48880: LD_INT 0
48882: PUSH
48883: LD_INT 1
48885: PUSH
48886: EMPTY
48887: LIST
48888: LIST
48889: PUSH
48890: LD_INT 1
48892: NEG
48893: PUSH
48894: LD_INT 0
48896: PUSH
48897: EMPTY
48898: LIST
48899: LIST
48900: PUSH
48901: LD_INT 1
48903: NEG
48904: PUSH
48905: LD_INT 1
48907: NEG
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: LIST
48917: LIST
48918: LIST
48919: LIST
48920: LIST
48921: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48922: LD_ADDR_VAR 0 62
48926: PUSH
48927: LD_INT 0
48929: PUSH
48930: LD_INT 0
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 0
48939: PUSH
48940: LD_INT 1
48942: NEG
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 1
48950: PUSH
48951: LD_INT 0
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 1
48960: PUSH
48961: LD_INT 1
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: LD_INT 0
48970: PUSH
48971: LD_INT 1
48973: PUSH
48974: EMPTY
48975: LIST
48976: LIST
48977: PUSH
48978: LD_INT 1
48980: NEG
48981: PUSH
48982: LD_INT 0
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: LD_INT 1
48991: NEG
48992: PUSH
48993: LD_INT 1
48995: NEG
48996: PUSH
48997: EMPTY
48998: LIST
48999: LIST
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: LIST
49005: LIST
49006: LIST
49007: LIST
49008: LIST
49009: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49010: LD_ADDR_VAR 0 63
49014: PUSH
49015: LD_INT 0
49017: PUSH
49018: LD_INT 0
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 0
49027: PUSH
49028: LD_INT 1
49030: NEG
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 1
49038: PUSH
49039: LD_INT 0
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 1
49048: PUSH
49049: LD_INT 1
49051: PUSH
49052: EMPTY
49053: LIST
49054: LIST
49055: PUSH
49056: LD_INT 0
49058: PUSH
49059: LD_INT 1
49061: PUSH
49062: EMPTY
49063: LIST
49064: LIST
49065: PUSH
49066: LD_INT 1
49068: NEG
49069: PUSH
49070: LD_INT 0
49072: PUSH
49073: EMPTY
49074: LIST
49075: LIST
49076: PUSH
49077: LD_INT 1
49079: NEG
49080: PUSH
49081: LD_INT 1
49083: NEG
49084: PUSH
49085: EMPTY
49086: LIST
49087: LIST
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: LIST
49093: LIST
49094: LIST
49095: LIST
49096: LIST
49097: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49098: LD_ADDR_VAR 0 64
49102: PUSH
49103: LD_INT 0
49105: PUSH
49106: LD_INT 0
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 0
49115: PUSH
49116: LD_INT 1
49118: NEG
49119: PUSH
49120: EMPTY
49121: LIST
49122: LIST
49123: PUSH
49124: LD_INT 1
49126: PUSH
49127: LD_INT 0
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 1
49136: PUSH
49137: LD_INT 1
49139: PUSH
49140: EMPTY
49141: LIST
49142: LIST
49143: PUSH
49144: LD_INT 0
49146: PUSH
49147: LD_INT 1
49149: PUSH
49150: EMPTY
49151: LIST
49152: LIST
49153: PUSH
49154: LD_INT 1
49156: NEG
49157: PUSH
49158: LD_INT 0
49160: PUSH
49161: EMPTY
49162: LIST
49163: LIST
49164: PUSH
49165: LD_INT 1
49167: NEG
49168: PUSH
49169: LD_INT 1
49171: NEG
49172: PUSH
49173: EMPTY
49174: LIST
49175: LIST
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: LIST
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: ST_TO_ADDR
// end ; 1 :
49186: GO 55083
49188: LD_INT 1
49190: DOUBLE
49191: EQUAL
49192: IFTRUE 49196
49194: GO 51819
49196: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49197: LD_ADDR_VAR 0 11
49201: PUSH
49202: LD_INT 1
49204: NEG
49205: PUSH
49206: LD_INT 3
49208: NEG
49209: PUSH
49210: EMPTY
49211: LIST
49212: LIST
49213: PUSH
49214: LD_INT 0
49216: PUSH
49217: LD_INT 3
49219: NEG
49220: PUSH
49221: EMPTY
49222: LIST
49223: LIST
49224: PUSH
49225: LD_INT 1
49227: PUSH
49228: LD_INT 2
49230: NEG
49231: PUSH
49232: EMPTY
49233: LIST
49234: LIST
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: LIST
49240: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49241: LD_ADDR_VAR 0 12
49245: PUSH
49246: LD_INT 2
49248: PUSH
49249: LD_INT 1
49251: NEG
49252: PUSH
49253: EMPTY
49254: LIST
49255: LIST
49256: PUSH
49257: LD_INT 3
49259: PUSH
49260: LD_INT 0
49262: PUSH
49263: EMPTY
49264: LIST
49265: LIST
49266: PUSH
49267: LD_INT 3
49269: PUSH
49270: LD_INT 1
49272: PUSH
49273: EMPTY
49274: LIST
49275: LIST
49276: PUSH
49277: EMPTY
49278: LIST
49279: LIST
49280: LIST
49281: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49282: LD_ADDR_VAR 0 13
49286: PUSH
49287: LD_INT 3
49289: PUSH
49290: LD_INT 2
49292: PUSH
49293: EMPTY
49294: LIST
49295: LIST
49296: PUSH
49297: LD_INT 3
49299: PUSH
49300: LD_INT 3
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: PUSH
49307: LD_INT 2
49309: PUSH
49310: LD_INT 3
49312: PUSH
49313: EMPTY
49314: LIST
49315: LIST
49316: PUSH
49317: EMPTY
49318: LIST
49319: LIST
49320: LIST
49321: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49322: LD_ADDR_VAR 0 14
49326: PUSH
49327: LD_INT 1
49329: PUSH
49330: LD_INT 3
49332: PUSH
49333: EMPTY
49334: LIST
49335: LIST
49336: PUSH
49337: LD_INT 0
49339: PUSH
49340: LD_INT 3
49342: PUSH
49343: EMPTY
49344: LIST
49345: LIST
49346: PUSH
49347: LD_INT 1
49349: NEG
49350: PUSH
49351: LD_INT 2
49353: PUSH
49354: EMPTY
49355: LIST
49356: LIST
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: LIST
49362: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49363: LD_ADDR_VAR 0 15
49367: PUSH
49368: LD_INT 2
49370: NEG
49371: PUSH
49372: LD_INT 1
49374: PUSH
49375: EMPTY
49376: LIST
49377: LIST
49378: PUSH
49379: LD_INT 3
49381: NEG
49382: PUSH
49383: LD_INT 0
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: PUSH
49390: LD_INT 3
49392: NEG
49393: PUSH
49394: LD_INT 1
49396: NEG
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: EMPTY
49403: LIST
49404: LIST
49405: LIST
49406: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49407: LD_ADDR_VAR 0 16
49411: PUSH
49412: LD_INT 2
49414: NEG
49415: PUSH
49416: LD_INT 3
49418: NEG
49419: PUSH
49420: EMPTY
49421: LIST
49422: LIST
49423: PUSH
49424: LD_INT 3
49426: NEG
49427: PUSH
49428: LD_INT 2
49430: NEG
49431: PUSH
49432: EMPTY
49433: LIST
49434: LIST
49435: PUSH
49436: LD_INT 3
49438: NEG
49439: PUSH
49440: LD_INT 3
49442: NEG
49443: PUSH
49444: EMPTY
49445: LIST
49446: LIST
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: LIST
49452: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49453: LD_ADDR_VAR 0 17
49457: PUSH
49458: LD_INT 1
49460: NEG
49461: PUSH
49462: LD_INT 3
49464: NEG
49465: PUSH
49466: EMPTY
49467: LIST
49468: LIST
49469: PUSH
49470: LD_INT 0
49472: PUSH
49473: LD_INT 3
49475: NEG
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 1
49483: PUSH
49484: LD_INT 2
49486: NEG
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: LIST
49496: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49497: LD_ADDR_VAR 0 18
49501: PUSH
49502: LD_INT 2
49504: PUSH
49505: LD_INT 1
49507: NEG
49508: PUSH
49509: EMPTY
49510: LIST
49511: LIST
49512: PUSH
49513: LD_INT 3
49515: PUSH
49516: LD_INT 0
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 3
49525: PUSH
49526: LD_INT 1
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: EMPTY
49534: LIST
49535: LIST
49536: LIST
49537: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49538: LD_ADDR_VAR 0 19
49542: PUSH
49543: LD_INT 3
49545: PUSH
49546: LD_INT 2
49548: PUSH
49549: EMPTY
49550: LIST
49551: LIST
49552: PUSH
49553: LD_INT 3
49555: PUSH
49556: LD_INT 3
49558: PUSH
49559: EMPTY
49560: LIST
49561: LIST
49562: PUSH
49563: LD_INT 2
49565: PUSH
49566: LD_INT 3
49568: PUSH
49569: EMPTY
49570: LIST
49571: LIST
49572: PUSH
49573: EMPTY
49574: LIST
49575: LIST
49576: LIST
49577: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49578: LD_ADDR_VAR 0 20
49582: PUSH
49583: LD_INT 1
49585: PUSH
49586: LD_INT 3
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: LD_INT 0
49595: PUSH
49596: LD_INT 3
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 1
49605: NEG
49606: PUSH
49607: LD_INT 2
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: LIST
49618: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49619: LD_ADDR_VAR 0 21
49623: PUSH
49624: LD_INT 2
49626: NEG
49627: PUSH
49628: LD_INT 1
49630: PUSH
49631: EMPTY
49632: LIST
49633: LIST
49634: PUSH
49635: LD_INT 3
49637: NEG
49638: PUSH
49639: LD_INT 0
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: PUSH
49646: LD_INT 3
49648: NEG
49649: PUSH
49650: LD_INT 1
49652: NEG
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: EMPTY
49659: LIST
49660: LIST
49661: LIST
49662: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49663: LD_ADDR_VAR 0 22
49667: PUSH
49668: LD_INT 2
49670: NEG
49671: PUSH
49672: LD_INT 3
49674: NEG
49675: PUSH
49676: EMPTY
49677: LIST
49678: LIST
49679: PUSH
49680: LD_INT 3
49682: NEG
49683: PUSH
49684: LD_INT 2
49686: NEG
49687: PUSH
49688: EMPTY
49689: LIST
49690: LIST
49691: PUSH
49692: LD_INT 3
49694: NEG
49695: PUSH
49696: LD_INT 3
49698: NEG
49699: PUSH
49700: EMPTY
49701: LIST
49702: LIST
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: LIST
49708: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
49709: LD_ADDR_VAR 0 23
49713: PUSH
49714: LD_INT 0
49716: PUSH
49717: LD_INT 3
49719: NEG
49720: PUSH
49721: EMPTY
49722: LIST
49723: LIST
49724: PUSH
49725: LD_INT 1
49727: NEG
49728: PUSH
49729: LD_INT 4
49731: NEG
49732: PUSH
49733: EMPTY
49734: LIST
49735: LIST
49736: PUSH
49737: LD_INT 1
49739: PUSH
49740: LD_INT 3
49742: NEG
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: EMPTY
49749: LIST
49750: LIST
49751: LIST
49752: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
49753: LD_ADDR_VAR 0 24
49757: PUSH
49758: LD_INT 3
49760: PUSH
49761: LD_INT 0
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: PUSH
49768: LD_INT 3
49770: PUSH
49771: LD_INT 1
49773: NEG
49774: PUSH
49775: EMPTY
49776: LIST
49777: LIST
49778: PUSH
49779: LD_INT 4
49781: PUSH
49782: LD_INT 1
49784: PUSH
49785: EMPTY
49786: LIST
49787: LIST
49788: PUSH
49789: EMPTY
49790: LIST
49791: LIST
49792: LIST
49793: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
49794: LD_ADDR_VAR 0 25
49798: PUSH
49799: LD_INT 3
49801: PUSH
49802: LD_INT 3
49804: PUSH
49805: EMPTY
49806: LIST
49807: LIST
49808: PUSH
49809: LD_INT 4
49811: PUSH
49812: LD_INT 3
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 3
49821: PUSH
49822: LD_INT 4
49824: PUSH
49825: EMPTY
49826: LIST
49827: LIST
49828: PUSH
49829: EMPTY
49830: LIST
49831: LIST
49832: LIST
49833: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
49834: LD_ADDR_VAR 0 26
49838: PUSH
49839: LD_INT 0
49841: PUSH
49842: LD_INT 3
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: LD_INT 1
49851: PUSH
49852: LD_INT 4
49854: PUSH
49855: EMPTY
49856: LIST
49857: LIST
49858: PUSH
49859: LD_INT 1
49861: NEG
49862: PUSH
49863: LD_INT 3
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: EMPTY
49871: LIST
49872: LIST
49873: LIST
49874: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
49875: LD_ADDR_VAR 0 27
49879: PUSH
49880: LD_INT 3
49882: NEG
49883: PUSH
49884: LD_INT 0
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 3
49893: NEG
49894: PUSH
49895: LD_INT 1
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: PUSH
49902: LD_INT 4
49904: NEG
49905: PUSH
49906: LD_INT 1
49908: NEG
49909: PUSH
49910: EMPTY
49911: LIST
49912: LIST
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: LIST
49918: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
49919: LD_ADDR_VAR 0 28
49923: PUSH
49924: LD_INT 3
49926: NEG
49927: PUSH
49928: LD_INT 3
49930: NEG
49931: PUSH
49932: EMPTY
49933: LIST
49934: LIST
49935: PUSH
49936: LD_INT 3
49938: NEG
49939: PUSH
49940: LD_INT 4
49942: NEG
49943: PUSH
49944: EMPTY
49945: LIST
49946: LIST
49947: PUSH
49948: LD_INT 4
49950: NEG
49951: PUSH
49952: LD_INT 3
49954: NEG
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: LIST
49964: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
49965: LD_ADDR_VAR 0 29
49969: PUSH
49970: LD_INT 1
49972: NEG
49973: PUSH
49974: LD_INT 3
49976: NEG
49977: PUSH
49978: EMPTY
49979: LIST
49980: LIST
49981: PUSH
49982: LD_INT 0
49984: PUSH
49985: LD_INT 3
49987: NEG
49988: PUSH
49989: EMPTY
49990: LIST
49991: LIST
49992: PUSH
49993: LD_INT 1
49995: PUSH
49996: LD_INT 2
49998: NEG
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 1
50006: NEG
50007: PUSH
50008: LD_INT 4
50010: NEG
50011: PUSH
50012: EMPTY
50013: LIST
50014: LIST
50015: PUSH
50016: LD_INT 0
50018: PUSH
50019: LD_INT 4
50021: NEG
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 1
50029: PUSH
50030: LD_INT 3
50032: NEG
50033: PUSH
50034: EMPTY
50035: LIST
50036: LIST
50037: PUSH
50038: LD_INT 1
50040: NEG
50041: PUSH
50042: LD_INT 5
50044: NEG
50045: PUSH
50046: EMPTY
50047: LIST
50048: LIST
50049: PUSH
50050: LD_INT 0
50052: PUSH
50053: LD_INT 5
50055: NEG
50056: PUSH
50057: EMPTY
50058: LIST
50059: LIST
50060: PUSH
50061: LD_INT 1
50063: PUSH
50064: LD_INT 4
50066: NEG
50067: PUSH
50068: EMPTY
50069: LIST
50070: LIST
50071: PUSH
50072: LD_INT 1
50074: NEG
50075: PUSH
50076: LD_INT 6
50078: NEG
50079: PUSH
50080: EMPTY
50081: LIST
50082: LIST
50083: PUSH
50084: LD_INT 0
50086: PUSH
50087: LD_INT 6
50089: NEG
50090: PUSH
50091: EMPTY
50092: LIST
50093: LIST
50094: PUSH
50095: LD_INT 1
50097: PUSH
50098: LD_INT 5
50100: NEG
50101: PUSH
50102: EMPTY
50103: LIST
50104: LIST
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: LIST
50110: LIST
50111: LIST
50112: LIST
50113: LIST
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
50120: LD_ADDR_VAR 0 30
50124: PUSH
50125: LD_INT 2
50127: PUSH
50128: LD_INT 1
50130: NEG
50131: PUSH
50132: EMPTY
50133: LIST
50134: LIST
50135: PUSH
50136: LD_INT 3
50138: PUSH
50139: LD_INT 0
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 3
50148: PUSH
50149: LD_INT 1
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 3
50158: PUSH
50159: LD_INT 1
50161: NEG
50162: PUSH
50163: EMPTY
50164: LIST
50165: LIST
50166: PUSH
50167: LD_INT 4
50169: PUSH
50170: LD_INT 0
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 4
50179: PUSH
50180: LD_INT 1
50182: PUSH
50183: EMPTY
50184: LIST
50185: LIST
50186: PUSH
50187: LD_INT 4
50189: PUSH
50190: LD_INT 1
50192: NEG
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: PUSH
50198: LD_INT 5
50200: PUSH
50201: LD_INT 0
50203: PUSH
50204: EMPTY
50205: LIST
50206: LIST
50207: PUSH
50208: LD_INT 5
50210: PUSH
50211: LD_INT 1
50213: PUSH
50214: EMPTY
50215: LIST
50216: LIST
50217: PUSH
50218: LD_INT 5
50220: PUSH
50221: LD_INT 1
50223: NEG
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 6
50231: PUSH
50232: LD_INT 0
50234: PUSH
50235: EMPTY
50236: LIST
50237: LIST
50238: PUSH
50239: LD_INT 6
50241: PUSH
50242: LD_INT 1
50244: PUSH
50245: EMPTY
50246: LIST
50247: LIST
50248: PUSH
50249: EMPTY
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
50263: LD_ADDR_VAR 0 31
50267: PUSH
50268: LD_INT 3
50270: PUSH
50271: LD_INT 2
50273: PUSH
50274: EMPTY
50275: LIST
50276: LIST
50277: PUSH
50278: LD_INT 3
50280: PUSH
50281: LD_INT 3
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: PUSH
50288: LD_INT 2
50290: PUSH
50291: LD_INT 3
50293: PUSH
50294: EMPTY
50295: LIST
50296: LIST
50297: PUSH
50298: LD_INT 4
50300: PUSH
50301: LD_INT 3
50303: PUSH
50304: EMPTY
50305: LIST
50306: LIST
50307: PUSH
50308: LD_INT 4
50310: PUSH
50311: LD_INT 4
50313: PUSH
50314: EMPTY
50315: LIST
50316: LIST
50317: PUSH
50318: LD_INT 3
50320: PUSH
50321: LD_INT 4
50323: PUSH
50324: EMPTY
50325: LIST
50326: LIST
50327: PUSH
50328: LD_INT 5
50330: PUSH
50331: LD_INT 4
50333: PUSH
50334: EMPTY
50335: LIST
50336: LIST
50337: PUSH
50338: LD_INT 5
50340: PUSH
50341: LD_INT 5
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 4
50350: PUSH
50351: LD_INT 5
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 6
50360: PUSH
50361: LD_INT 5
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 6
50370: PUSH
50371: LD_INT 6
50373: PUSH
50374: EMPTY
50375: LIST
50376: LIST
50377: PUSH
50378: LD_INT 5
50380: PUSH
50381: LD_INT 6
50383: PUSH
50384: EMPTY
50385: LIST
50386: LIST
50387: PUSH
50388: EMPTY
50389: LIST
50390: LIST
50391: LIST
50392: LIST
50393: LIST
50394: LIST
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
50402: LD_ADDR_VAR 0 32
50406: PUSH
50407: LD_INT 1
50409: PUSH
50410: LD_INT 3
50412: PUSH
50413: EMPTY
50414: LIST
50415: LIST
50416: PUSH
50417: LD_INT 0
50419: PUSH
50420: LD_INT 3
50422: PUSH
50423: EMPTY
50424: LIST
50425: LIST
50426: PUSH
50427: LD_INT 1
50429: NEG
50430: PUSH
50431: LD_INT 2
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 1
50440: PUSH
50441: LD_INT 4
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: LD_INT 0
50450: PUSH
50451: LD_INT 4
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 1
50460: NEG
50461: PUSH
50462: LD_INT 3
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 1
50471: PUSH
50472: LD_INT 5
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: LD_INT 0
50481: PUSH
50482: LD_INT 5
50484: PUSH
50485: EMPTY
50486: LIST
50487: LIST
50488: PUSH
50489: LD_INT 1
50491: NEG
50492: PUSH
50493: LD_INT 4
50495: PUSH
50496: EMPTY
50497: LIST
50498: LIST
50499: PUSH
50500: LD_INT 1
50502: PUSH
50503: LD_INT 6
50505: PUSH
50506: EMPTY
50507: LIST
50508: LIST
50509: PUSH
50510: LD_INT 0
50512: PUSH
50513: LD_INT 6
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 1
50522: NEG
50523: PUSH
50524: LD_INT 5
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: EMPTY
50532: LIST
50533: LIST
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
50545: LD_ADDR_VAR 0 33
50549: PUSH
50550: LD_INT 2
50552: NEG
50553: PUSH
50554: LD_INT 1
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 3
50563: NEG
50564: PUSH
50565: LD_INT 0
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 3
50574: NEG
50575: PUSH
50576: LD_INT 1
50578: NEG
50579: PUSH
50580: EMPTY
50581: LIST
50582: LIST
50583: PUSH
50584: LD_INT 3
50586: NEG
50587: PUSH
50588: LD_INT 1
50590: PUSH
50591: EMPTY
50592: LIST
50593: LIST
50594: PUSH
50595: LD_INT 4
50597: NEG
50598: PUSH
50599: LD_INT 0
50601: PUSH
50602: EMPTY
50603: LIST
50604: LIST
50605: PUSH
50606: LD_INT 4
50608: NEG
50609: PUSH
50610: LD_INT 1
50612: NEG
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 4
50620: NEG
50621: PUSH
50622: LD_INT 1
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 5
50631: NEG
50632: PUSH
50633: LD_INT 0
50635: PUSH
50636: EMPTY
50637: LIST
50638: LIST
50639: PUSH
50640: LD_INT 5
50642: NEG
50643: PUSH
50644: LD_INT 1
50646: NEG
50647: PUSH
50648: EMPTY
50649: LIST
50650: LIST
50651: PUSH
50652: LD_INT 5
50654: NEG
50655: PUSH
50656: LD_INT 1
50658: PUSH
50659: EMPTY
50660: LIST
50661: LIST
50662: PUSH
50663: LD_INT 6
50665: NEG
50666: PUSH
50667: LD_INT 0
50669: PUSH
50670: EMPTY
50671: LIST
50672: LIST
50673: PUSH
50674: LD_INT 6
50676: NEG
50677: PUSH
50678: LD_INT 1
50680: NEG
50681: PUSH
50682: EMPTY
50683: LIST
50684: LIST
50685: PUSH
50686: EMPTY
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
50700: LD_ADDR_VAR 0 34
50704: PUSH
50705: LD_INT 2
50707: NEG
50708: PUSH
50709: LD_INT 3
50711: NEG
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 3
50719: NEG
50720: PUSH
50721: LD_INT 2
50723: NEG
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 3
50731: NEG
50732: PUSH
50733: LD_INT 3
50735: NEG
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 3
50743: NEG
50744: PUSH
50745: LD_INT 4
50747: NEG
50748: PUSH
50749: EMPTY
50750: LIST
50751: LIST
50752: PUSH
50753: LD_INT 4
50755: NEG
50756: PUSH
50757: LD_INT 3
50759: NEG
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 4
50767: NEG
50768: PUSH
50769: LD_INT 4
50771: NEG
50772: PUSH
50773: EMPTY
50774: LIST
50775: LIST
50776: PUSH
50777: LD_INT 4
50779: NEG
50780: PUSH
50781: LD_INT 5
50783: NEG
50784: PUSH
50785: EMPTY
50786: LIST
50787: LIST
50788: PUSH
50789: LD_INT 5
50791: NEG
50792: PUSH
50793: LD_INT 4
50795: NEG
50796: PUSH
50797: EMPTY
50798: LIST
50799: LIST
50800: PUSH
50801: LD_INT 5
50803: NEG
50804: PUSH
50805: LD_INT 5
50807: NEG
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 5
50815: NEG
50816: PUSH
50817: LD_INT 6
50819: NEG
50820: PUSH
50821: EMPTY
50822: LIST
50823: LIST
50824: PUSH
50825: LD_INT 6
50827: NEG
50828: PUSH
50829: LD_INT 5
50831: NEG
50832: PUSH
50833: EMPTY
50834: LIST
50835: LIST
50836: PUSH
50837: LD_INT 6
50839: NEG
50840: PUSH
50841: LD_INT 6
50843: NEG
50844: PUSH
50845: EMPTY
50846: LIST
50847: LIST
50848: PUSH
50849: EMPTY
50850: LIST
50851: LIST
50852: LIST
50853: LIST
50854: LIST
50855: LIST
50856: LIST
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
50863: LD_ADDR_VAR 0 41
50867: PUSH
50868: LD_INT 0
50870: PUSH
50871: LD_INT 2
50873: NEG
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 1
50881: NEG
50882: PUSH
50883: LD_INT 3
50885: NEG
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 1
50893: PUSH
50894: LD_INT 2
50896: NEG
50897: PUSH
50898: EMPTY
50899: LIST
50900: LIST
50901: PUSH
50902: EMPTY
50903: LIST
50904: LIST
50905: LIST
50906: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
50907: LD_ADDR_VAR 0 42
50911: PUSH
50912: LD_INT 2
50914: PUSH
50915: LD_INT 0
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 2
50924: PUSH
50925: LD_INT 1
50927: NEG
50928: PUSH
50929: EMPTY
50930: LIST
50931: LIST
50932: PUSH
50933: LD_INT 3
50935: PUSH
50936: LD_INT 1
50938: PUSH
50939: EMPTY
50940: LIST
50941: LIST
50942: PUSH
50943: EMPTY
50944: LIST
50945: LIST
50946: LIST
50947: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
50948: LD_ADDR_VAR 0 43
50952: PUSH
50953: LD_INT 2
50955: PUSH
50956: LD_INT 2
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 3
50965: PUSH
50966: LD_INT 2
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 2
50975: PUSH
50976: LD_INT 3
50978: PUSH
50979: EMPTY
50980: LIST
50981: LIST
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: LIST
50987: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
50988: LD_ADDR_VAR 0 44
50992: PUSH
50993: LD_INT 0
50995: PUSH
50996: LD_INT 2
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: PUSH
51003: LD_INT 1
51005: PUSH
51006: LD_INT 3
51008: PUSH
51009: EMPTY
51010: LIST
51011: LIST
51012: PUSH
51013: LD_INT 1
51015: NEG
51016: PUSH
51017: LD_INT 2
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: EMPTY
51025: LIST
51026: LIST
51027: LIST
51028: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51029: LD_ADDR_VAR 0 45
51033: PUSH
51034: LD_INT 2
51036: NEG
51037: PUSH
51038: LD_INT 0
51040: PUSH
51041: EMPTY
51042: LIST
51043: LIST
51044: PUSH
51045: LD_INT 2
51047: NEG
51048: PUSH
51049: LD_INT 1
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: PUSH
51056: LD_INT 3
51058: NEG
51059: PUSH
51060: LD_INT 1
51062: NEG
51063: PUSH
51064: EMPTY
51065: LIST
51066: LIST
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: LIST
51072: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
51073: LD_ADDR_VAR 0 46
51077: PUSH
51078: LD_INT 2
51080: NEG
51081: PUSH
51082: LD_INT 2
51084: NEG
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 2
51092: NEG
51093: PUSH
51094: LD_INT 3
51096: NEG
51097: PUSH
51098: EMPTY
51099: LIST
51100: LIST
51101: PUSH
51102: LD_INT 3
51104: NEG
51105: PUSH
51106: LD_INT 2
51108: NEG
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: LIST
51118: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
51119: LD_ADDR_VAR 0 47
51123: PUSH
51124: LD_INT 2
51126: NEG
51127: PUSH
51128: LD_INT 3
51130: NEG
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 1
51138: NEG
51139: PUSH
51140: LD_INT 3
51142: NEG
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51152: LD_ADDR_VAR 0 48
51156: PUSH
51157: LD_INT 1
51159: PUSH
51160: LD_INT 2
51162: NEG
51163: PUSH
51164: EMPTY
51165: LIST
51166: LIST
51167: PUSH
51168: LD_INT 2
51170: PUSH
51171: LD_INT 1
51173: NEG
51174: PUSH
51175: EMPTY
51176: LIST
51177: LIST
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
51183: LD_ADDR_VAR 0 49
51187: PUSH
51188: LD_INT 3
51190: PUSH
51191: LD_INT 1
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 3
51200: PUSH
51201: LD_INT 2
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: EMPTY
51209: LIST
51210: LIST
51211: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
51212: LD_ADDR_VAR 0 50
51216: PUSH
51217: LD_INT 2
51219: PUSH
51220: LD_INT 3
51222: PUSH
51223: EMPTY
51224: LIST
51225: LIST
51226: PUSH
51227: LD_INT 1
51229: PUSH
51230: LD_INT 3
51232: PUSH
51233: EMPTY
51234: LIST
51235: LIST
51236: PUSH
51237: EMPTY
51238: LIST
51239: LIST
51240: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51241: LD_ADDR_VAR 0 51
51245: PUSH
51246: LD_INT 1
51248: NEG
51249: PUSH
51250: LD_INT 2
51252: PUSH
51253: EMPTY
51254: LIST
51255: LIST
51256: PUSH
51257: LD_INT 2
51259: NEG
51260: PUSH
51261: LD_INT 1
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: PUSH
51268: EMPTY
51269: LIST
51270: LIST
51271: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51272: LD_ADDR_VAR 0 52
51276: PUSH
51277: LD_INT 3
51279: NEG
51280: PUSH
51281: LD_INT 1
51283: NEG
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 3
51291: NEG
51292: PUSH
51293: LD_INT 2
51295: NEG
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: EMPTY
51302: LIST
51303: LIST
51304: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51305: LD_ADDR_VAR 0 53
51309: PUSH
51310: LD_INT 1
51312: NEG
51313: PUSH
51314: LD_INT 3
51316: NEG
51317: PUSH
51318: EMPTY
51319: LIST
51320: LIST
51321: PUSH
51322: LD_INT 0
51324: PUSH
51325: LD_INT 3
51327: NEG
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: PUSH
51333: LD_INT 1
51335: PUSH
51336: LD_INT 2
51338: NEG
51339: PUSH
51340: EMPTY
51341: LIST
51342: LIST
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: LIST
51348: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51349: LD_ADDR_VAR 0 54
51353: PUSH
51354: LD_INT 2
51356: PUSH
51357: LD_INT 1
51359: NEG
51360: PUSH
51361: EMPTY
51362: LIST
51363: LIST
51364: PUSH
51365: LD_INT 3
51367: PUSH
51368: LD_INT 0
51370: PUSH
51371: EMPTY
51372: LIST
51373: LIST
51374: PUSH
51375: LD_INT 3
51377: PUSH
51378: LD_INT 1
51380: PUSH
51381: EMPTY
51382: LIST
51383: LIST
51384: PUSH
51385: EMPTY
51386: LIST
51387: LIST
51388: LIST
51389: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51390: LD_ADDR_VAR 0 55
51394: PUSH
51395: LD_INT 3
51397: PUSH
51398: LD_INT 2
51400: PUSH
51401: EMPTY
51402: LIST
51403: LIST
51404: PUSH
51405: LD_INT 3
51407: PUSH
51408: LD_INT 3
51410: PUSH
51411: EMPTY
51412: LIST
51413: LIST
51414: PUSH
51415: LD_INT 2
51417: PUSH
51418: LD_INT 3
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: EMPTY
51426: LIST
51427: LIST
51428: LIST
51429: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51430: LD_ADDR_VAR 0 56
51434: PUSH
51435: LD_INT 1
51437: PUSH
51438: LD_INT 3
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 0
51447: PUSH
51448: LD_INT 3
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 1
51457: NEG
51458: PUSH
51459: LD_INT 2
51461: PUSH
51462: EMPTY
51463: LIST
51464: LIST
51465: PUSH
51466: EMPTY
51467: LIST
51468: LIST
51469: LIST
51470: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51471: LD_ADDR_VAR 0 57
51475: PUSH
51476: LD_INT 2
51478: NEG
51479: PUSH
51480: LD_INT 1
51482: PUSH
51483: EMPTY
51484: LIST
51485: LIST
51486: PUSH
51487: LD_INT 3
51489: NEG
51490: PUSH
51491: LD_INT 0
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: PUSH
51498: LD_INT 3
51500: NEG
51501: PUSH
51502: LD_INT 1
51504: NEG
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: LIST
51514: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51515: LD_ADDR_VAR 0 58
51519: PUSH
51520: LD_INT 2
51522: NEG
51523: PUSH
51524: LD_INT 3
51526: NEG
51527: PUSH
51528: EMPTY
51529: LIST
51530: LIST
51531: PUSH
51532: LD_INT 3
51534: NEG
51535: PUSH
51536: LD_INT 2
51538: NEG
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 3
51546: NEG
51547: PUSH
51548: LD_INT 3
51550: NEG
51551: PUSH
51552: EMPTY
51553: LIST
51554: LIST
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: LIST
51560: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
51561: LD_ADDR_VAR 0 59
51565: PUSH
51566: LD_INT 1
51568: NEG
51569: PUSH
51570: LD_INT 2
51572: NEG
51573: PUSH
51574: EMPTY
51575: LIST
51576: LIST
51577: PUSH
51578: LD_INT 0
51580: PUSH
51581: LD_INT 2
51583: NEG
51584: PUSH
51585: EMPTY
51586: LIST
51587: LIST
51588: PUSH
51589: LD_INT 1
51591: PUSH
51592: LD_INT 1
51594: NEG
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: EMPTY
51601: LIST
51602: LIST
51603: LIST
51604: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51605: LD_ADDR_VAR 0 60
51609: PUSH
51610: LD_INT 1
51612: PUSH
51613: LD_INT 1
51615: NEG
51616: PUSH
51617: EMPTY
51618: LIST
51619: LIST
51620: PUSH
51621: LD_INT 2
51623: PUSH
51624: LD_INT 0
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 2
51633: PUSH
51634: LD_INT 1
51636: PUSH
51637: EMPTY
51638: LIST
51639: LIST
51640: PUSH
51641: EMPTY
51642: LIST
51643: LIST
51644: LIST
51645: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51646: LD_ADDR_VAR 0 61
51650: PUSH
51651: LD_INT 2
51653: PUSH
51654: LD_INT 1
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 2
51663: PUSH
51664: LD_INT 2
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: LD_INT 1
51673: PUSH
51674: LD_INT 2
51676: PUSH
51677: EMPTY
51678: LIST
51679: LIST
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: LIST
51685: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51686: LD_ADDR_VAR 0 62
51690: PUSH
51691: LD_INT 1
51693: PUSH
51694: LD_INT 2
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: LD_INT 0
51703: PUSH
51704: LD_INT 2
51706: PUSH
51707: EMPTY
51708: LIST
51709: LIST
51710: PUSH
51711: LD_INT 1
51713: NEG
51714: PUSH
51715: LD_INT 1
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: EMPTY
51723: LIST
51724: LIST
51725: LIST
51726: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51727: LD_ADDR_VAR 0 63
51731: PUSH
51732: LD_INT 1
51734: NEG
51735: PUSH
51736: LD_INT 1
51738: PUSH
51739: EMPTY
51740: LIST
51741: LIST
51742: PUSH
51743: LD_INT 2
51745: NEG
51746: PUSH
51747: LD_INT 0
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: PUSH
51754: LD_INT 2
51756: NEG
51757: PUSH
51758: LD_INT 1
51760: NEG
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: LIST
51770: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51771: LD_ADDR_VAR 0 64
51775: PUSH
51776: LD_INT 1
51778: NEG
51779: PUSH
51780: LD_INT 2
51782: NEG
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 2
51790: NEG
51791: PUSH
51792: LD_INT 1
51794: NEG
51795: PUSH
51796: EMPTY
51797: LIST
51798: LIST
51799: PUSH
51800: LD_INT 2
51802: NEG
51803: PUSH
51804: LD_INT 2
51806: NEG
51807: PUSH
51808: EMPTY
51809: LIST
51810: LIST
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: LIST
51816: ST_TO_ADDR
// end ; 2 :
51817: GO 55083
51819: LD_INT 2
51821: DOUBLE
51822: EQUAL
51823: IFTRUE 51827
51825: GO 55082
51827: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
51828: LD_ADDR_VAR 0 29
51832: PUSH
51833: LD_INT 4
51835: PUSH
51836: LD_INT 0
51838: PUSH
51839: EMPTY
51840: LIST
51841: LIST
51842: PUSH
51843: LD_INT 4
51845: PUSH
51846: LD_INT 1
51848: NEG
51849: PUSH
51850: EMPTY
51851: LIST
51852: LIST
51853: PUSH
51854: LD_INT 5
51856: PUSH
51857: LD_INT 0
51859: PUSH
51860: EMPTY
51861: LIST
51862: LIST
51863: PUSH
51864: LD_INT 5
51866: PUSH
51867: LD_INT 1
51869: PUSH
51870: EMPTY
51871: LIST
51872: LIST
51873: PUSH
51874: LD_INT 4
51876: PUSH
51877: LD_INT 1
51879: PUSH
51880: EMPTY
51881: LIST
51882: LIST
51883: PUSH
51884: LD_INT 3
51886: PUSH
51887: LD_INT 0
51889: PUSH
51890: EMPTY
51891: LIST
51892: LIST
51893: PUSH
51894: LD_INT 3
51896: PUSH
51897: LD_INT 1
51899: NEG
51900: PUSH
51901: EMPTY
51902: LIST
51903: LIST
51904: PUSH
51905: LD_INT 3
51907: PUSH
51908: LD_INT 2
51910: NEG
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: LD_INT 5
51918: PUSH
51919: LD_INT 2
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 3
51928: PUSH
51929: LD_INT 3
51931: PUSH
51932: EMPTY
51933: LIST
51934: LIST
51935: PUSH
51936: LD_INT 3
51938: PUSH
51939: LD_INT 2
51941: PUSH
51942: EMPTY
51943: LIST
51944: LIST
51945: PUSH
51946: LD_INT 4
51948: PUSH
51949: LD_INT 3
51951: PUSH
51952: EMPTY
51953: LIST
51954: LIST
51955: PUSH
51956: LD_INT 4
51958: PUSH
51959: LD_INT 4
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: PUSH
51966: LD_INT 3
51968: PUSH
51969: LD_INT 4
51971: PUSH
51972: EMPTY
51973: LIST
51974: LIST
51975: PUSH
51976: LD_INT 2
51978: PUSH
51979: LD_INT 3
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 2
51988: PUSH
51989: LD_INT 2
51991: PUSH
51992: EMPTY
51993: LIST
51994: LIST
51995: PUSH
51996: LD_INT 4
51998: PUSH
51999: LD_INT 2
52001: PUSH
52002: EMPTY
52003: LIST
52004: LIST
52005: PUSH
52006: LD_INT 2
52008: PUSH
52009: LD_INT 4
52011: PUSH
52012: EMPTY
52013: LIST
52014: LIST
52015: PUSH
52016: LD_INT 0
52018: PUSH
52019: LD_INT 4
52021: PUSH
52022: EMPTY
52023: LIST
52024: LIST
52025: PUSH
52026: LD_INT 0
52028: PUSH
52029: LD_INT 3
52031: PUSH
52032: EMPTY
52033: LIST
52034: LIST
52035: PUSH
52036: LD_INT 1
52038: PUSH
52039: LD_INT 4
52041: PUSH
52042: EMPTY
52043: LIST
52044: LIST
52045: PUSH
52046: LD_INT 1
52048: PUSH
52049: LD_INT 5
52051: PUSH
52052: EMPTY
52053: LIST
52054: LIST
52055: PUSH
52056: LD_INT 0
52058: PUSH
52059: LD_INT 5
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 1
52068: NEG
52069: PUSH
52070: LD_INT 4
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 1
52079: NEG
52080: PUSH
52081: LD_INT 3
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 2
52090: PUSH
52091: LD_INT 5
52093: PUSH
52094: EMPTY
52095: LIST
52096: LIST
52097: PUSH
52098: LD_INT 2
52100: NEG
52101: PUSH
52102: LD_INT 3
52104: PUSH
52105: EMPTY
52106: LIST
52107: LIST
52108: PUSH
52109: LD_INT 3
52111: NEG
52112: PUSH
52113: LD_INT 0
52115: PUSH
52116: EMPTY
52117: LIST
52118: LIST
52119: PUSH
52120: LD_INT 3
52122: NEG
52123: PUSH
52124: LD_INT 1
52126: NEG
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 2
52134: NEG
52135: PUSH
52136: LD_INT 0
52138: PUSH
52139: EMPTY
52140: LIST
52141: LIST
52142: PUSH
52143: LD_INT 2
52145: NEG
52146: PUSH
52147: LD_INT 1
52149: PUSH
52150: EMPTY
52151: LIST
52152: LIST
52153: PUSH
52154: LD_INT 3
52156: NEG
52157: PUSH
52158: LD_INT 1
52160: PUSH
52161: EMPTY
52162: LIST
52163: LIST
52164: PUSH
52165: LD_INT 4
52167: NEG
52168: PUSH
52169: LD_INT 0
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 4
52178: NEG
52179: PUSH
52180: LD_INT 1
52182: NEG
52183: PUSH
52184: EMPTY
52185: LIST
52186: LIST
52187: PUSH
52188: LD_INT 4
52190: NEG
52191: PUSH
52192: LD_INT 2
52194: NEG
52195: PUSH
52196: EMPTY
52197: LIST
52198: LIST
52199: PUSH
52200: LD_INT 2
52202: NEG
52203: PUSH
52204: LD_INT 2
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 4
52213: NEG
52214: PUSH
52215: LD_INT 4
52217: NEG
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 4
52225: NEG
52226: PUSH
52227: LD_INT 5
52229: NEG
52230: PUSH
52231: EMPTY
52232: LIST
52233: LIST
52234: PUSH
52235: LD_INT 3
52237: NEG
52238: PUSH
52239: LD_INT 4
52241: NEG
52242: PUSH
52243: EMPTY
52244: LIST
52245: LIST
52246: PUSH
52247: LD_INT 3
52249: NEG
52250: PUSH
52251: LD_INT 3
52253: NEG
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 4
52261: NEG
52262: PUSH
52263: LD_INT 3
52265: NEG
52266: PUSH
52267: EMPTY
52268: LIST
52269: LIST
52270: PUSH
52271: LD_INT 5
52273: NEG
52274: PUSH
52275: LD_INT 4
52277: NEG
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 5
52285: NEG
52286: PUSH
52287: LD_INT 5
52289: NEG
52290: PUSH
52291: EMPTY
52292: LIST
52293: LIST
52294: PUSH
52295: LD_INT 3
52297: NEG
52298: PUSH
52299: LD_INT 5
52301: NEG
52302: PUSH
52303: EMPTY
52304: LIST
52305: LIST
52306: PUSH
52307: LD_INT 5
52309: NEG
52310: PUSH
52311: LD_INT 3
52313: NEG
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: LIST
52323: LIST
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
52366: LD_ADDR_VAR 0 30
52370: PUSH
52371: LD_INT 4
52373: PUSH
52374: LD_INT 4
52376: PUSH
52377: EMPTY
52378: LIST
52379: LIST
52380: PUSH
52381: LD_INT 4
52383: PUSH
52384: LD_INT 3
52386: PUSH
52387: EMPTY
52388: LIST
52389: LIST
52390: PUSH
52391: LD_INT 5
52393: PUSH
52394: LD_INT 4
52396: PUSH
52397: EMPTY
52398: LIST
52399: LIST
52400: PUSH
52401: LD_INT 5
52403: PUSH
52404: LD_INT 5
52406: PUSH
52407: EMPTY
52408: LIST
52409: LIST
52410: PUSH
52411: LD_INT 4
52413: PUSH
52414: LD_INT 5
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 3
52423: PUSH
52424: LD_INT 4
52426: PUSH
52427: EMPTY
52428: LIST
52429: LIST
52430: PUSH
52431: LD_INT 3
52433: PUSH
52434: LD_INT 3
52436: PUSH
52437: EMPTY
52438: LIST
52439: LIST
52440: PUSH
52441: LD_INT 5
52443: PUSH
52444: LD_INT 3
52446: PUSH
52447: EMPTY
52448: LIST
52449: LIST
52450: PUSH
52451: LD_INT 3
52453: PUSH
52454: LD_INT 5
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 0
52463: PUSH
52464: LD_INT 3
52466: PUSH
52467: EMPTY
52468: LIST
52469: LIST
52470: PUSH
52471: LD_INT 0
52473: PUSH
52474: LD_INT 2
52476: PUSH
52477: EMPTY
52478: LIST
52479: LIST
52480: PUSH
52481: LD_INT 1
52483: PUSH
52484: LD_INT 3
52486: PUSH
52487: EMPTY
52488: LIST
52489: LIST
52490: PUSH
52491: LD_INT 1
52493: PUSH
52494: LD_INT 4
52496: PUSH
52497: EMPTY
52498: LIST
52499: LIST
52500: PUSH
52501: LD_INT 0
52503: PUSH
52504: LD_INT 4
52506: PUSH
52507: EMPTY
52508: LIST
52509: LIST
52510: PUSH
52511: LD_INT 1
52513: NEG
52514: PUSH
52515: LD_INT 3
52517: PUSH
52518: EMPTY
52519: LIST
52520: LIST
52521: PUSH
52522: LD_INT 1
52524: NEG
52525: PUSH
52526: LD_INT 2
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 2
52535: PUSH
52536: LD_INT 4
52538: PUSH
52539: EMPTY
52540: LIST
52541: LIST
52542: PUSH
52543: LD_INT 2
52545: NEG
52546: PUSH
52547: LD_INT 2
52549: PUSH
52550: EMPTY
52551: LIST
52552: LIST
52553: PUSH
52554: LD_INT 4
52556: NEG
52557: PUSH
52558: LD_INT 0
52560: PUSH
52561: EMPTY
52562: LIST
52563: LIST
52564: PUSH
52565: LD_INT 4
52567: NEG
52568: PUSH
52569: LD_INT 1
52571: NEG
52572: PUSH
52573: EMPTY
52574: LIST
52575: LIST
52576: PUSH
52577: LD_INT 3
52579: NEG
52580: PUSH
52581: LD_INT 0
52583: PUSH
52584: EMPTY
52585: LIST
52586: LIST
52587: PUSH
52588: LD_INT 3
52590: NEG
52591: PUSH
52592: LD_INT 1
52594: PUSH
52595: EMPTY
52596: LIST
52597: LIST
52598: PUSH
52599: LD_INT 4
52601: NEG
52602: PUSH
52603: LD_INT 1
52605: PUSH
52606: EMPTY
52607: LIST
52608: LIST
52609: PUSH
52610: LD_INT 5
52612: NEG
52613: PUSH
52614: LD_INT 0
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 5
52623: NEG
52624: PUSH
52625: LD_INT 1
52627: NEG
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 5
52635: NEG
52636: PUSH
52637: LD_INT 2
52639: NEG
52640: PUSH
52641: EMPTY
52642: LIST
52643: LIST
52644: PUSH
52645: LD_INT 3
52647: NEG
52648: PUSH
52649: LD_INT 2
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 3
52658: NEG
52659: PUSH
52660: LD_INT 3
52662: NEG
52663: PUSH
52664: EMPTY
52665: LIST
52666: LIST
52667: PUSH
52668: LD_INT 3
52670: NEG
52671: PUSH
52672: LD_INT 4
52674: NEG
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: PUSH
52680: LD_INT 2
52682: NEG
52683: PUSH
52684: LD_INT 3
52686: NEG
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: PUSH
52692: LD_INT 2
52694: NEG
52695: PUSH
52696: LD_INT 2
52698: NEG
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 3
52706: NEG
52707: PUSH
52708: LD_INT 2
52710: NEG
52711: PUSH
52712: EMPTY
52713: LIST
52714: LIST
52715: PUSH
52716: LD_INT 4
52718: NEG
52719: PUSH
52720: LD_INT 3
52722: NEG
52723: PUSH
52724: EMPTY
52725: LIST
52726: LIST
52727: PUSH
52728: LD_INT 4
52730: NEG
52731: PUSH
52732: LD_INT 4
52734: NEG
52735: PUSH
52736: EMPTY
52737: LIST
52738: LIST
52739: PUSH
52740: LD_INT 2
52742: NEG
52743: PUSH
52744: LD_INT 4
52746: NEG
52747: PUSH
52748: EMPTY
52749: LIST
52750: LIST
52751: PUSH
52752: LD_INT 4
52754: NEG
52755: PUSH
52756: LD_INT 2
52758: NEG
52759: PUSH
52760: EMPTY
52761: LIST
52762: LIST
52763: PUSH
52764: LD_INT 0
52766: PUSH
52767: LD_INT 4
52769: NEG
52770: PUSH
52771: EMPTY
52772: LIST
52773: LIST
52774: PUSH
52775: LD_INT 0
52777: PUSH
52778: LD_INT 5
52780: NEG
52781: PUSH
52782: EMPTY
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 1
52788: PUSH
52789: LD_INT 4
52791: NEG
52792: PUSH
52793: EMPTY
52794: LIST
52795: LIST
52796: PUSH
52797: LD_INT 1
52799: PUSH
52800: LD_INT 3
52802: NEG
52803: PUSH
52804: EMPTY
52805: LIST
52806: LIST
52807: PUSH
52808: LD_INT 0
52810: PUSH
52811: LD_INT 3
52813: NEG
52814: PUSH
52815: EMPTY
52816: LIST
52817: LIST
52818: PUSH
52819: LD_INT 1
52821: NEG
52822: PUSH
52823: LD_INT 4
52825: NEG
52826: PUSH
52827: EMPTY
52828: LIST
52829: LIST
52830: PUSH
52831: LD_INT 1
52833: NEG
52834: PUSH
52835: LD_INT 5
52837: NEG
52838: PUSH
52839: EMPTY
52840: LIST
52841: LIST
52842: PUSH
52843: LD_INT 2
52845: PUSH
52846: LD_INT 3
52848: NEG
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 2
52856: NEG
52857: PUSH
52858: LD_INT 5
52860: NEG
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: EMPTY
52867: LIST
52868: LIST
52869: LIST
52870: LIST
52871: LIST
52872: LIST
52873: LIST
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
52913: LD_ADDR_VAR 0 31
52917: PUSH
52918: LD_INT 0
52920: PUSH
52921: LD_INT 4
52923: PUSH
52924: EMPTY
52925: LIST
52926: LIST
52927: PUSH
52928: LD_INT 0
52930: PUSH
52931: LD_INT 3
52933: PUSH
52934: EMPTY
52935: LIST
52936: LIST
52937: PUSH
52938: LD_INT 1
52940: PUSH
52941: LD_INT 4
52943: PUSH
52944: EMPTY
52945: LIST
52946: LIST
52947: PUSH
52948: LD_INT 1
52950: PUSH
52951: LD_INT 5
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 0
52960: PUSH
52961: LD_INT 5
52963: PUSH
52964: EMPTY
52965: LIST
52966: LIST
52967: PUSH
52968: LD_INT 1
52970: NEG
52971: PUSH
52972: LD_INT 4
52974: PUSH
52975: EMPTY
52976: LIST
52977: LIST
52978: PUSH
52979: LD_INT 1
52981: NEG
52982: PUSH
52983: LD_INT 3
52985: PUSH
52986: EMPTY
52987: LIST
52988: LIST
52989: PUSH
52990: LD_INT 2
52992: PUSH
52993: LD_INT 5
52995: PUSH
52996: EMPTY
52997: LIST
52998: LIST
52999: PUSH
53000: LD_INT 2
53002: NEG
53003: PUSH
53004: LD_INT 3
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: LD_INT 3
53013: NEG
53014: PUSH
53015: LD_INT 0
53017: PUSH
53018: EMPTY
53019: LIST
53020: LIST
53021: PUSH
53022: LD_INT 3
53024: NEG
53025: PUSH
53026: LD_INT 1
53028: NEG
53029: PUSH
53030: EMPTY
53031: LIST
53032: LIST
53033: PUSH
53034: LD_INT 2
53036: NEG
53037: PUSH
53038: LD_INT 0
53040: PUSH
53041: EMPTY
53042: LIST
53043: LIST
53044: PUSH
53045: LD_INT 2
53047: NEG
53048: PUSH
53049: LD_INT 1
53051: PUSH
53052: EMPTY
53053: LIST
53054: LIST
53055: PUSH
53056: LD_INT 3
53058: NEG
53059: PUSH
53060: LD_INT 1
53062: PUSH
53063: EMPTY
53064: LIST
53065: LIST
53066: PUSH
53067: LD_INT 4
53069: NEG
53070: PUSH
53071: LD_INT 0
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 4
53080: NEG
53081: PUSH
53082: LD_INT 1
53084: NEG
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 4
53092: NEG
53093: PUSH
53094: LD_INT 2
53096: NEG
53097: PUSH
53098: EMPTY
53099: LIST
53100: LIST
53101: PUSH
53102: LD_INT 2
53104: NEG
53105: PUSH
53106: LD_INT 2
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 4
53115: NEG
53116: PUSH
53117: LD_INT 4
53119: NEG
53120: PUSH
53121: EMPTY
53122: LIST
53123: LIST
53124: PUSH
53125: LD_INT 4
53127: NEG
53128: PUSH
53129: LD_INT 5
53131: NEG
53132: PUSH
53133: EMPTY
53134: LIST
53135: LIST
53136: PUSH
53137: LD_INT 3
53139: NEG
53140: PUSH
53141: LD_INT 4
53143: NEG
53144: PUSH
53145: EMPTY
53146: LIST
53147: LIST
53148: PUSH
53149: LD_INT 3
53151: NEG
53152: PUSH
53153: LD_INT 3
53155: NEG
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 4
53163: NEG
53164: PUSH
53165: LD_INT 3
53167: NEG
53168: PUSH
53169: EMPTY
53170: LIST
53171: LIST
53172: PUSH
53173: LD_INT 5
53175: NEG
53176: PUSH
53177: LD_INT 4
53179: NEG
53180: PUSH
53181: EMPTY
53182: LIST
53183: LIST
53184: PUSH
53185: LD_INT 5
53187: NEG
53188: PUSH
53189: LD_INT 5
53191: NEG
53192: PUSH
53193: EMPTY
53194: LIST
53195: LIST
53196: PUSH
53197: LD_INT 3
53199: NEG
53200: PUSH
53201: LD_INT 5
53203: NEG
53204: PUSH
53205: EMPTY
53206: LIST
53207: LIST
53208: PUSH
53209: LD_INT 5
53211: NEG
53212: PUSH
53213: LD_INT 3
53215: NEG
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 0
53223: PUSH
53224: LD_INT 3
53226: NEG
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 0
53234: PUSH
53235: LD_INT 4
53237: NEG
53238: PUSH
53239: EMPTY
53240: LIST
53241: LIST
53242: PUSH
53243: LD_INT 1
53245: PUSH
53246: LD_INT 3
53248: NEG
53249: PUSH
53250: EMPTY
53251: LIST
53252: LIST
53253: PUSH
53254: LD_INT 1
53256: PUSH
53257: LD_INT 2
53259: NEG
53260: PUSH
53261: EMPTY
53262: LIST
53263: LIST
53264: PUSH
53265: LD_INT 0
53267: PUSH
53268: LD_INT 2
53270: NEG
53271: PUSH
53272: EMPTY
53273: LIST
53274: LIST
53275: PUSH
53276: LD_INT 1
53278: NEG
53279: PUSH
53280: LD_INT 3
53282: NEG
53283: PUSH
53284: EMPTY
53285: LIST
53286: LIST
53287: PUSH
53288: LD_INT 1
53290: NEG
53291: PUSH
53292: LD_INT 4
53294: NEG
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 2
53302: PUSH
53303: LD_INT 2
53305: NEG
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 2
53313: NEG
53314: PUSH
53315: LD_INT 4
53317: NEG
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 4
53325: PUSH
53326: LD_INT 0
53328: PUSH
53329: EMPTY
53330: LIST
53331: LIST
53332: PUSH
53333: LD_INT 4
53335: PUSH
53336: LD_INT 1
53338: NEG
53339: PUSH
53340: EMPTY
53341: LIST
53342: LIST
53343: PUSH
53344: LD_INT 5
53346: PUSH
53347: LD_INT 0
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 5
53356: PUSH
53357: LD_INT 1
53359: PUSH
53360: EMPTY
53361: LIST
53362: LIST
53363: PUSH
53364: LD_INT 4
53366: PUSH
53367: LD_INT 1
53369: PUSH
53370: EMPTY
53371: LIST
53372: LIST
53373: PUSH
53374: LD_INT 3
53376: PUSH
53377: LD_INT 0
53379: PUSH
53380: EMPTY
53381: LIST
53382: LIST
53383: PUSH
53384: LD_INT 3
53386: PUSH
53387: LD_INT 1
53389: NEG
53390: PUSH
53391: EMPTY
53392: LIST
53393: LIST
53394: PUSH
53395: LD_INT 3
53397: PUSH
53398: LD_INT 2
53400: NEG
53401: PUSH
53402: EMPTY
53403: LIST
53404: LIST
53405: PUSH
53406: LD_INT 5
53408: PUSH
53409: LD_INT 2
53411: PUSH
53412: EMPTY
53413: LIST
53414: LIST
53415: PUSH
53416: EMPTY
53417: LIST
53418: LIST
53419: LIST
53420: LIST
53421: LIST
53422: LIST
53423: LIST
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
53463: LD_ADDR_VAR 0 32
53467: PUSH
53468: LD_INT 4
53470: NEG
53471: PUSH
53472: LD_INT 0
53474: PUSH
53475: EMPTY
53476: LIST
53477: LIST
53478: PUSH
53479: LD_INT 4
53481: NEG
53482: PUSH
53483: LD_INT 1
53485: NEG
53486: PUSH
53487: EMPTY
53488: LIST
53489: LIST
53490: PUSH
53491: LD_INT 3
53493: NEG
53494: PUSH
53495: LD_INT 0
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 3
53504: NEG
53505: PUSH
53506: LD_INT 1
53508: PUSH
53509: EMPTY
53510: LIST
53511: LIST
53512: PUSH
53513: LD_INT 4
53515: NEG
53516: PUSH
53517: LD_INT 1
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 5
53526: NEG
53527: PUSH
53528: LD_INT 0
53530: PUSH
53531: EMPTY
53532: LIST
53533: LIST
53534: PUSH
53535: LD_INT 5
53537: NEG
53538: PUSH
53539: LD_INT 1
53541: NEG
53542: PUSH
53543: EMPTY
53544: LIST
53545: LIST
53546: PUSH
53547: LD_INT 5
53549: NEG
53550: PUSH
53551: LD_INT 2
53553: NEG
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: PUSH
53559: LD_INT 3
53561: NEG
53562: PUSH
53563: LD_INT 2
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: PUSH
53570: LD_INT 3
53572: NEG
53573: PUSH
53574: LD_INT 3
53576: NEG
53577: PUSH
53578: EMPTY
53579: LIST
53580: LIST
53581: PUSH
53582: LD_INT 3
53584: NEG
53585: PUSH
53586: LD_INT 4
53588: NEG
53589: PUSH
53590: EMPTY
53591: LIST
53592: LIST
53593: PUSH
53594: LD_INT 2
53596: NEG
53597: PUSH
53598: LD_INT 3
53600: NEG
53601: PUSH
53602: EMPTY
53603: LIST
53604: LIST
53605: PUSH
53606: LD_INT 2
53608: NEG
53609: PUSH
53610: LD_INT 2
53612: NEG
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 3
53620: NEG
53621: PUSH
53622: LD_INT 2
53624: NEG
53625: PUSH
53626: EMPTY
53627: LIST
53628: LIST
53629: PUSH
53630: LD_INT 4
53632: NEG
53633: PUSH
53634: LD_INT 3
53636: NEG
53637: PUSH
53638: EMPTY
53639: LIST
53640: LIST
53641: PUSH
53642: LD_INT 4
53644: NEG
53645: PUSH
53646: LD_INT 4
53648: NEG
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: PUSH
53654: LD_INT 2
53656: NEG
53657: PUSH
53658: LD_INT 4
53660: NEG
53661: PUSH
53662: EMPTY
53663: LIST
53664: LIST
53665: PUSH
53666: LD_INT 4
53668: NEG
53669: PUSH
53670: LD_INT 2
53672: NEG
53673: PUSH
53674: EMPTY
53675: LIST
53676: LIST
53677: PUSH
53678: LD_INT 0
53680: PUSH
53681: LD_INT 4
53683: NEG
53684: PUSH
53685: EMPTY
53686: LIST
53687: LIST
53688: PUSH
53689: LD_INT 0
53691: PUSH
53692: LD_INT 5
53694: NEG
53695: PUSH
53696: EMPTY
53697: LIST
53698: LIST
53699: PUSH
53700: LD_INT 1
53702: PUSH
53703: LD_INT 4
53705: NEG
53706: PUSH
53707: EMPTY
53708: LIST
53709: LIST
53710: PUSH
53711: LD_INT 1
53713: PUSH
53714: LD_INT 3
53716: NEG
53717: PUSH
53718: EMPTY
53719: LIST
53720: LIST
53721: PUSH
53722: LD_INT 0
53724: PUSH
53725: LD_INT 3
53727: NEG
53728: PUSH
53729: EMPTY
53730: LIST
53731: LIST
53732: PUSH
53733: LD_INT 1
53735: NEG
53736: PUSH
53737: LD_INT 4
53739: NEG
53740: PUSH
53741: EMPTY
53742: LIST
53743: LIST
53744: PUSH
53745: LD_INT 1
53747: NEG
53748: PUSH
53749: LD_INT 5
53751: NEG
53752: PUSH
53753: EMPTY
53754: LIST
53755: LIST
53756: PUSH
53757: LD_INT 2
53759: PUSH
53760: LD_INT 3
53762: NEG
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 2
53770: NEG
53771: PUSH
53772: LD_INT 5
53774: NEG
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 3
53782: PUSH
53783: LD_INT 0
53785: PUSH
53786: EMPTY
53787: LIST
53788: LIST
53789: PUSH
53790: LD_INT 3
53792: PUSH
53793: LD_INT 1
53795: NEG
53796: PUSH
53797: EMPTY
53798: LIST
53799: LIST
53800: PUSH
53801: LD_INT 4
53803: PUSH
53804: LD_INT 0
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 4
53813: PUSH
53814: LD_INT 1
53816: PUSH
53817: EMPTY
53818: LIST
53819: LIST
53820: PUSH
53821: LD_INT 3
53823: PUSH
53824: LD_INT 1
53826: PUSH
53827: EMPTY
53828: LIST
53829: LIST
53830: PUSH
53831: LD_INT 2
53833: PUSH
53834: LD_INT 0
53836: PUSH
53837: EMPTY
53838: LIST
53839: LIST
53840: PUSH
53841: LD_INT 2
53843: PUSH
53844: LD_INT 1
53846: NEG
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 2
53854: PUSH
53855: LD_INT 2
53857: NEG
53858: PUSH
53859: EMPTY
53860: LIST
53861: LIST
53862: PUSH
53863: LD_INT 4
53865: PUSH
53866: LD_INT 2
53868: PUSH
53869: EMPTY
53870: LIST
53871: LIST
53872: PUSH
53873: LD_INT 4
53875: PUSH
53876: LD_INT 4
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 4
53885: PUSH
53886: LD_INT 3
53888: PUSH
53889: EMPTY
53890: LIST
53891: LIST
53892: PUSH
53893: LD_INT 5
53895: PUSH
53896: LD_INT 4
53898: PUSH
53899: EMPTY
53900: LIST
53901: LIST
53902: PUSH
53903: LD_INT 5
53905: PUSH
53906: LD_INT 5
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 4
53915: PUSH
53916: LD_INT 5
53918: PUSH
53919: EMPTY
53920: LIST
53921: LIST
53922: PUSH
53923: LD_INT 3
53925: PUSH
53926: LD_INT 4
53928: PUSH
53929: EMPTY
53930: LIST
53931: LIST
53932: PUSH
53933: LD_INT 3
53935: PUSH
53936: LD_INT 3
53938: PUSH
53939: EMPTY
53940: LIST
53941: LIST
53942: PUSH
53943: LD_INT 5
53945: PUSH
53946: LD_INT 3
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 3
53955: PUSH
53956: LD_INT 5
53958: PUSH
53959: EMPTY
53960: LIST
53961: LIST
53962: PUSH
53963: EMPTY
53964: LIST
53965: LIST
53966: LIST
53967: LIST
53968: LIST
53969: LIST
53970: LIST
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
54010: LD_ADDR_VAR 0 33
54014: PUSH
54015: LD_INT 4
54017: NEG
54018: PUSH
54019: LD_INT 4
54021: NEG
54022: PUSH
54023: EMPTY
54024: LIST
54025: LIST
54026: PUSH
54027: LD_INT 4
54029: NEG
54030: PUSH
54031: LD_INT 5
54033: NEG
54034: PUSH
54035: EMPTY
54036: LIST
54037: LIST
54038: PUSH
54039: LD_INT 3
54041: NEG
54042: PUSH
54043: LD_INT 4
54045: NEG
54046: PUSH
54047: EMPTY
54048: LIST
54049: LIST
54050: PUSH
54051: LD_INT 3
54053: NEG
54054: PUSH
54055: LD_INT 3
54057: NEG
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 4
54065: NEG
54066: PUSH
54067: LD_INT 3
54069: NEG
54070: PUSH
54071: EMPTY
54072: LIST
54073: LIST
54074: PUSH
54075: LD_INT 5
54077: NEG
54078: PUSH
54079: LD_INT 4
54081: NEG
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: LD_INT 5
54089: NEG
54090: PUSH
54091: LD_INT 5
54093: NEG
54094: PUSH
54095: EMPTY
54096: LIST
54097: LIST
54098: PUSH
54099: LD_INT 3
54101: NEG
54102: PUSH
54103: LD_INT 5
54105: NEG
54106: PUSH
54107: EMPTY
54108: LIST
54109: LIST
54110: PUSH
54111: LD_INT 5
54113: NEG
54114: PUSH
54115: LD_INT 3
54117: NEG
54118: PUSH
54119: EMPTY
54120: LIST
54121: LIST
54122: PUSH
54123: LD_INT 0
54125: PUSH
54126: LD_INT 3
54128: NEG
54129: PUSH
54130: EMPTY
54131: LIST
54132: LIST
54133: PUSH
54134: LD_INT 0
54136: PUSH
54137: LD_INT 4
54139: NEG
54140: PUSH
54141: EMPTY
54142: LIST
54143: LIST
54144: PUSH
54145: LD_INT 1
54147: PUSH
54148: LD_INT 3
54150: NEG
54151: PUSH
54152: EMPTY
54153: LIST
54154: LIST
54155: PUSH
54156: LD_INT 1
54158: PUSH
54159: LD_INT 2
54161: NEG
54162: PUSH
54163: EMPTY
54164: LIST
54165: LIST
54166: PUSH
54167: LD_INT 0
54169: PUSH
54170: LD_INT 2
54172: NEG
54173: PUSH
54174: EMPTY
54175: LIST
54176: LIST
54177: PUSH
54178: LD_INT 1
54180: NEG
54181: PUSH
54182: LD_INT 3
54184: NEG
54185: PUSH
54186: EMPTY
54187: LIST
54188: LIST
54189: PUSH
54190: LD_INT 1
54192: NEG
54193: PUSH
54194: LD_INT 4
54196: NEG
54197: PUSH
54198: EMPTY
54199: LIST
54200: LIST
54201: PUSH
54202: LD_INT 2
54204: PUSH
54205: LD_INT 2
54207: NEG
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 2
54215: NEG
54216: PUSH
54217: LD_INT 4
54219: NEG
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 4
54227: PUSH
54228: LD_INT 0
54230: PUSH
54231: EMPTY
54232: LIST
54233: LIST
54234: PUSH
54235: LD_INT 4
54237: PUSH
54238: LD_INT 1
54240: NEG
54241: PUSH
54242: EMPTY
54243: LIST
54244: LIST
54245: PUSH
54246: LD_INT 5
54248: PUSH
54249: LD_INT 0
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 5
54258: PUSH
54259: LD_INT 1
54261: PUSH
54262: EMPTY
54263: LIST
54264: LIST
54265: PUSH
54266: LD_INT 4
54268: PUSH
54269: LD_INT 1
54271: PUSH
54272: EMPTY
54273: LIST
54274: LIST
54275: PUSH
54276: LD_INT 3
54278: PUSH
54279: LD_INT 0
54281: PUSH
54282: EMPTY
54283: LIST
54284: LIST
54285: PUSH
54286: LD_INT 3
54288: PUSH
54289: LD_INT 1
54291: NEG
54292: PUSH
54293: EMPTY
54294: LIST
54295: LIST
54296: PUSH
54297: LD_INT 3
54299: PUSH
54300: LD_INT 2
54302: NEG
54303: PUSH
54304: EMPTY
54305: LIST
54306: LIST
54307: PUSH
54308: LD_INT 5
54310: PUSH
54311: LD_INT 2
54313: PUSH
54314: EMPTY
54315: LIST
54316: LIST
54317: PUSH
54318: LD_INT 3
54320: PUSH
54321: LD_INT 3
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 3
54330: PUSH
54331: LD_INT 2
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: PUSH
54338: LD_INT 4
54340: PUSH
54341: LD_INT 3
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: PUSH
54348: LD_INT 4
54350: PUSH
54351: LD_INT 4
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 3
54360: PUSH
54361: LD_INT 4
54363: PUSH
54364: EMPTY
54365: LIST
54366: LIST
54367: PUSH
54368: LD_INT 2
54370: PUSH
54371: LD_INT 3
54373: PUSH
54374: EMPTY
54375: LIST
54376: LIST
54377: PUSH
54378: LD_INT 2
54380: PUSH
54381: LD_INT 2
54383: PUSH
54384: EMPTY
54385: LIST
54386: LIST
54387: PUSH
54388: LD_INT 4
54390: PUSH
54391: LD_INT 2
54393: PUSH
54394: EMPTY
54395: LIST
54396: LIST
54397: PUSH
54398: LD_INT 2
54400: PUSH
54401: LD_INT 4
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_INT 0
54410: PUSH
54411: LD_INT 4
54413: PUSH
54414: EMPTY
54415: LIST
54416: LIST
54417: PUSH
54418: LD_INT 0
54420: PUSH
54421: LD_INT 3
54423: PUSH
54424: EMPTY
54425: LIST
54426: LIST
54427: PUSH
54428: LD_INT 1
54430: PUSH
54431: LD_INT 4
54433: PUSH
54434: EMPTY
54435: LIST
54436: LIST
54437: PUSH
54438: LD_INT 1
54440: PUSH
54441: LD_INT 5
54443: PUSH
54444: EMPTY
54445: LIST
54446: LIST
54447: PUSH
54448: LD_INT 0
54450: PUSH
54451: LD_INT 5
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 1
54460: NEG
54461: PUSH
54462: LD_INT 4
54464: PUSH
54465: EMPTY
54466: LIST
54467: LIST
54468: PUSH
54469: LD_INT 1
54471: NEG
54472: PUSH
54473: LD_INT 3
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_INT 2
54482: PUSH
54483: LD_INT 5
54485: PUSH
54486: EMPTY
54487: LIST
54488: LIST
54489: PUSH
54490: LD_INT 2
54492: NEG
54493: PUSH
54494: LD_INT 3
54496: PUSH
54497: EMPTY
54498: LIST
54499: LIST
54500: PUSH
54501: EMPTY
54502: LIST
54503: LIST
54504: LIST
54505: LIST
54506: LIST
54507: LIST
54508: LIST
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
54548: LD_ADDR_VAR 0 34
54552: PUSH
54553: LD_INT 0
54555: PUSH
54556: LD_INT 4
54558: NEG
54559: PUSH
54560: EMPTY
54561: LIST
54562: LIST
54563: PUSH
54564: LD_INT 0
54566: PUSH
54567: LD_INT 5
54569: NEG
54570: PUSH
54571: EMPTY
54572: LIST
54573: LIST
54574: PUSH
54575: LD_INT 1
54577: PUSH
54578: LD_INT 4
54580: NEG
54581: PUSH
54582: EMPTY
54583: LIST
54584: LIST
54585: PUSH
54586: LD_INT 1
54588: PUSH
54589: LD_INT 3
54591: NEG
54592: PUSH
54593: EMPTY
54594: LIST
54595: LIST
54596: PUSH
54597: LD_INT 0
54599: PUSH
54600: LD_INT 3
54602: NEG
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 1
54610: NEG
54611: PUSH
54612: LD_INT 4
54614: NEG
54615: PUSH
54616: EMPTY
54617: LIST
54618: LIST
54619: PUSH
54620: LD_INT 1
54622: NEG
54623: PUSH
54624: LD_INT 5
54626: NEG
54627: PUSH
54628: EMPTY
54629: LIST
54630: LIST
54631: PUSH
54632: LD_INT 2
54634: PUSH
54635: LD_INT 3
54637: NEG
54638: PUSH
54639: EMPTY
54640: LIST
54641: LIST
54642: PUSH
54643: LD_INT 2
54645: NEG
54646: PUSH
54647: LD_INT 5
54649: NEG
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: PUSH
54655: LD_INT 3
54657: PUSH
54658: LD_INT 0
54660: PUSH
54661: EMPTY
54662: LIST
54663: LIST
54664: PUSH
54665: LD_INT 3
54667: PUSH
54668: LD_INT 1
54670: NEG
54671: PUSH
54672: EMPTY
54673: LIST
54674: LIST
54675: PUSH
54676: LD_INT 4
54678: PUSH
54679: LD_INT 0
54681: PUSH
54682: EMPTY
54683: LIST
54684: LIST
54685: PUSH
54686: LD_INT 4
54688: PUSH
54689: LD_INT 1
54691: PUSH
54692: EMPTY
54693: LIST
54694: LIST
54695: PUSH
54696: LD_INT 3
54698: PUSH
54699: LD_INT 1
54701: PUSH
54702: EMPTY
54703: LIST
54704: LIST
54705: PUSH
54706: LD_INT 2
54708: PUSH
54709: LD_INT 0
54711: PUSH
54712: EMPTY
54713: LIST
54714: LIST
54715: PUSH
54716: LD_INT 2
54718: PUSH
54719: LD_INT 1
54721: NEG
54722: PUSH
54723: EMPTY
54724: LIST
54725: LIST
54726: PUSH
54727: LD_INT 2
54729: PUSH
54730: LD_INT 2
54732: NEG
54733: PUSH
54734: EMPTY
54735: LIST
54736: LIST
54737: PUSH
54738: LD_INT 4
54740: PUSH
54741: LD_INT 2
54743: PUSH
54744: EMPTY
54745: LIST
54746: LIST
54747: PUSH
54748: LD_INT 4
54750: PUSH
54751: LD_INT 4
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 4
54760: PUSH
54761: LD_INT 3
54763: PUSH
54764: EMPTY
54765: LIST
54766: LIST
54767: PUSH
54768: LD_INT 5
54770: PUSH
54771: LD_INT 4
54773: PUSH
54774: EMPTY
54775: LIST
54776: LIST
54777: PUSH
54778: LD_INT 5
54780: PUSH
54781: LD_INT 5
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 4
54790: PUSH
54791: LD_INT 5
54793: PUSH
54794: EMPTY
54795: LIST
54796: LIST
54797: PUSH
54798: LD_INT 3
54800: PUSH
54801: LD_INT 4
54803: PUSH
54804: EMPTY
54805: LIST
54806: LIST
54807: PUSH
54808: LD_INT 3
54810: PUSH
54811: LD_INT 3
54813: PUSH
54814: EMPTY
54815: LIST
54816: LIST
54817: PUSH
54818: LD_INT 5
54820: PUSH
54821: LD_INT 3
54823: PUSH
54824: EMPTY
54825: LIST
54826: LIST
54827: PUSH
54828: LD_INT 3
54830: PUSH
54831: LD_INT 5
54833: PUSH
54834: EMPTY
54835: LIST
54836: LIST
54837: PUSH
54838: LD_INT 0
54840: PUSH
54841: LD_INT 3
54843: PUSH
54844: EMPTY
54845: LIST
54846: LIST
54847: PUSH
54848: LD_INT 0
54850: PUSH
54851: LD_INT 2
54853: PUSH
54854: EMPTY
54855: LIST
54856: LIST
54857: PUSH
54858: LD_INT 1
54860: PUSH
54861: LD_INT 3
54863: PUSH
54864: EMPTY
54865: LIST
54866: LIST
54867: PUSH
54868: LD_INT 1
54870: PUSH
54871: LD_INT 4
54873: PUSH
54874: EMPTY
54875: LIST
54876: LIST
54877: PUSH
54878: LD_INT 0
54880: PUSH
54881: LD_INT 4
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 1
54890: NEG
54891: PUSH
54892: LD_INT 3
54894: PUSH
54895: EMPTY
54896: LIST
54897: LIST
54898: PUSH
54899: LD_INT 1
54901: NEG
54902: PUSH
54903: LD_INT 2
54905: PUSH
54906: EMPTY
54907: LIST
54908: LIST
54909: PUSH
54910: LD_INT 2
54912: PUSH
54913: LD_INT 4
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: PUSH
54920: LD_INT 2
54922: NEG
54923: PUSH
54924: LD_INT 2
54926: PUSH
54927: EMPTY
54928: LIST
54929: LIST
54930: PUSH
54931: LD_INT 4
54933: NEG
54934: PUSH
54935: LD_INT 0
54937: PUSH
54938: EMPTY
54939: LIST
54940: LIST
54941: PUSH
54942: LD_INT 4
54944: NEG
54945: PUSH
54946: LD_INT 1
54948: NEG
54949: PUSH
54950: EMPTY
54951: LIST
54952: LIST
54953: PUSH
54954: LD_INT 3
54956: NEG
54957: PUSH
54958: LD_INT 0
54960: PUSH
54961: EMPTY
54962: LIST
54963: LIST
54964: PUSH
54965: LD_INT 3
54967: NEG
54968: PUSH
54969: LD_INT 1
54971: PUSH
54972: EMPTY
54973: LIST
54974: LIST
54975: PUSH
54976: LD_INT 4
54978: NEG
54979: PUSH
54980: LD_INT 1
54982: PUSH
54983: EMPTY
54984: LIST
54985: LIST
54986: PUSH
54987: LD_INT 5
54989: NEG
54990: PUSH
54991: LD_INT 0
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 5
55000: NEG
55001: PUSH
55002: LD_INT 1
55004: NEG
55005: PUSH
55006: EMPTY
55007: LIST
55008: LIST
55009: PUSH
55010: LD_INT 5
55012: NEG
55013: PUSH
55014: LD_INT 2
55016: NEG
55017: PUSH
55018: EMPTY
55019: LIST
55020: LIST
55021: PUSH
55022: LD_INT 3
55024: NEG
55025: PUSH
55026: LD_INT 2
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: EMPTY
55034: LIST
55035: LIST
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: ST_TO_ADDR
// end ; end ;
55080: GO 55083
55082: POP
// case btype of b_depot , b_warehouse :
55083: LD_VAR 0 1
55087: PUSH
55088: LD_INT 0
55090: DOUBLE
55091: EQUAL
55092: IFTRUE 55102
55094: LD_INT 1
55096: DOUBLE
55097: EQUAL
55098: IFTRUE 55102
55100: GO 55303
55102: POP
// case nation of nation_american :
55103: LD_VAR 0 5
55107: PUSH
55108: LD_INT 1
55110: DOUBLE
55111: EQUAL
55112: IFTRUE 55116
55114: GO 55172
55116: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
55117: LD_ADDR_VAR 0 9
55121: PUSH
55122: LD_VAR 0 11
55126: PUSH
55127: LD_VAR 0 12
55131: PUSH
55132: LD_VAR 0 13
55136: PUSH
55137: LD_VAR 0 14
55141: PUSH
55142: LD_VAR 0 15
55146: PUSH
55147: LD_VAR 0 16
55151: PUSH
55152: EMPTY
55153: LIST
55154: LIST
55155: LIST
55156: LIST
55157: LIST
55158: LIST
55159: PUSH
55160: LD_VAR 0 4
55164: PUSH
55165: LD_INT 1
55167: PLUS
55168: ARRAY
55169: ST_TO_ADDR
55170: GO 55301
55172: LD_INT 2
55174: DOUBLE
55175: EQUAL
55176: IFTRUE 55180
55178: GO 55236
55180: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
55181: LD_ADDR_VAR 0 9
55185: PUSH
55186: LD_VAR 0 17
55190: PUSH
55191: LD_VAR 0 18
55195: PUSH
55196: LD_VAR 0 19
55200: PUSH
55201: LD_VAR 0 20
55205: PUSH
55206: LD_VAR 0 21
55210: PUSH
55211: LD_VAR 0 22
55215: PUSH
55216: EMPTY
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: PUSH
55224: LD_VAR 0 4
55228: PUSH
55229: LD_INT 1
55231: PLUS
55232: ARRAY
55233: ST_TO_ADDR
55234: GO 55301
55236: LD_INT 3
55238: DOUBLE
55239: EQUAL
55240: IFTRUE 55244
55242: GO 55300
55244: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
55245: LD_ADDR_VAR 0 9
55249: PUSH
55250: LD_VAR 0 23
55254: PUSH
55255: LD_VAR 0 24
55259: PUSH
55260: LD_VAR 0 25
55264: PUSH
55265: LD_VAR 0 26
55269: PUSH
55270: LD_VAR 0 27
55274: PUSH
55275: LD_VAR 0 28
55279: PUSH
55280: EMPTY
55281: LIST
55282: LIST
55283: LIST
55284: LIST
55285: LIST
55286: LIST
55287: PUSH
55288: LD_VAR 0 4
55292: PUSH
55293: LD_INT 1
55295: PLUS
55296: ARRAY
55297: ST_TO_ADDR
55298: GO 55301
55300: POP
55301: GO 55856
55303: LD_INT 2
55305: DOUBLE
55306: EQUAL
55307: IFTRUE 55317
55309: LD_INT 3
55311: DOUBLE
55312: EQUAL
55313: IFTRUE 55317
55315: GO 55373
55317: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
55318: LD_ADDR_VAR 0 9
55322: PUSH
55323: LD_VAR 0 29
55327: PUSH
55328: LD_VAR 0 30
55332: PUSH
55333: LD_VAR 0 31
55337: PUSH
55338: LD_VAR 0 32
55342: PUSH
55343: LD_VAR 0 33
55347: PUSH
55348: LD_VAR 0 34
55352: PUSH
55353: EMPTY
55354: LIST
55355: LIST
55356: LIST
55357: LIST
55358: LIST
55359: LIST
55360: PUSH
55361: LD_VAR 0 4
55365: PUSH
55366: LD_INT 1
55368: PLUS
55369: ARRAY
55370: ST_TO_ADDR
55371: GO 55856
55373: LD_INT 16
55375: DOUBLE
55376: EQUAL
55377: IFTRUE 55435
55379: LD_INT 17
55381: DOUBLE
55382: EQUAL
55383: IFTRUE 55435
55385: LD_INT 18
55387: DOUBLE
55388: EQUAL
55389: IFTRUE 55435
55391: LD_INT 19
55393: DOUBLE
55394: EQUAL
55395: IFTRUE 55435
55397: LD_INT 22
55399: DOUBLE
55400: EQUAL
55401: IFTRUE 55435
55403: LD_INT 20
55405: DOUBLE
55406: EQUAL
55407: IFTRUE 55435
55409: LD_INT 21
55411: DOUBLE
55412: EQUAL
55413: IFTRUE 55435
55415: LD_INT 23
55417: DOUBLE
55418: EQUAL
55419: IFTRUE 55435
55421: LD_INT 24
55423: DOUBLE
55424: EQUAL
55425: IFTRUE 55435
55427: LD_INT 25
55429: DOUBLE
55430: EQUAL
55431: IFTRUE 55435
55433: GO 55491
55435: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
55436: LD_ADDR_VAR 0 9
55440: PUSH
55441: LD_VAR 0 35
55445: PUSH
55446: LD_VAR 0 36
55450: PUSH
55451: LD_VAR 0 37
55455: PUSH
55456: LD_VAR 0 38
55460: PUSH
55461: LD_VAR 0 39
55465: PUSH
55466: LD_VAR 0 40
55470: PUSH
55471: EMPTY
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: PUSH
55479: LD_VAR 0 4
55483: PUSH
55484: LD_INT 1
55486: PLUS
55487: ARRAY
55488: ST_TO_ADDR
55489: GO 55856
55491: LD_INT 6
55493: DOUBLE
55494: EQUAL
55495: IFTRUE 55547
55497: LD_INT 7
55499: DOUBLE
55500: EQUAL
55501: IFTRUE 55547
55503: LD_INT 8
55505: DOUBLE
55506: EQUAL
55507: IFTRUE 55547
55509: LD_INT 13
55511: DOUBLE
55512: EQUAL
55513: IFTRUE 55547
55515: LD_INT 12
55517: DOUBLE
55518: EQUAL
55519: IFTRUE 55547
55521: LD_INT 15
55523: DOUBLE
55524: EQUAL
55525: IFTRUE 55547
55527: LD_INT 11
55529: DOUBLE
55530: EQUAL
55531: IFTRUE 55547
55533: LD_INT 14
55535: DOUBLE
55536: EQUAL
55537: IFTRUE 55547
55539: LD_INT 10
55541: DOUBLE
55542: EQUAL
55543: IFTRUE 55547
55545: GO 55603
55547: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
55548: LD_ADDR_VAR 0 9
55552: PUSH
55553: LD_VAR 0 41
55557: PUSH
55558: LD_VAR 0 42
55562: PUSH
55563: LD_VAR 0 43
55567: PUSH
55568: LD_VAR 0 44
55572: PUSH
55573: LD_VAR 0 45
55577: PUSH
55578: LD_VAR 0 46
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: LIST
55587: LIST
55588: LIST
55589: LIST
55590: PUSH
55591: LD_VAR 0 4
55595: PUSH
55596: LD_INT 1
55598: PLUS
55599: ARRAY
55600: ST_TO_ADDR
55601: GO 55856
55603: LD_INT 36
55605: DOUBLE
55606: EQUAL
55607: IFTRUE 55611
55609: GO 55667
55611: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
55612: LD_ADDR_VAR 0 9
55616: PUSH
55617: LD_VAR 0 47
55621: PUSH
55622: LD_VAR 0 48
55626: PUSH
55627: LD_VAR 0 49
55631: PUSH
55632: LD_VAR 0 50
55636: PUSH
55637: LD_VAR 0 51
55641: PUSH
55642: LD_VAR 0 52
55646: PUSH
55647: EMPTY
55648: LIST
55649: LIST
55650: LIST
55651: LIST
55652: LIST
55653: LIST
55654: PUSH
55655: LD_VAR 0 4
55659: PUSH
55660: LD_INT 1
55662: PLUS
55663: ARRAY
55664: ST_TO_ADDR
55665: GO 55856
55667: LD_INT 4
55669: DOUBLE
55670: EQUAL
55671: IFTRUE 55693
55673: LD_INT 5
55675: DOUBLE
55676: EQUAL
55677: IFTRUE 55693
55679: LD_INT 34
55681: DOUBLE
55682: EQUAL
55683: IFTRUE 55693
55685: LD_INT 37
55687: DOUBLE
55688: EQUAL
55689: IFTRUE 55693
55691: GO 55749
55693: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
55694: LD_ADDR_VAR 0 9
55698: PUSH
55699: LD_VAR 0 53
55703: PUSH
55704: LD_VAR 0 54
55708: PUSH
55709: LD_VAR 0 55
55713: PUSH
55714: LD_VAR 0 56
55718: PUSH
55719: LD_VAR 0 57
55723: PUSH
55724: LD_VAR 0 58
55728: PUSH
55729: EMPTY
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: LIST
55736: PUSH
55737: LD_VAR 0 4
55741: PUSH
55742: LD_INT 1
55744: PLUS
55745: ARRAY
55746: ST_TO_ADDR
55747: GO 55856
55749: LD_INT 31
55751: DOUBLE
55752: EQUAL
55753: IFTRUE 55799
55755: LD_INT 32
55757: DOUBLE
55758: EQUAL
55759: IFTRUE 55799
55761: LD_INT 33
55763: DOUBLE
55764: EQUAL
55765: IFTRUE 55799
55767: LD_INT 27
55769: DOUBLE
55770: EQUAL
55771: IFTRUE 55799
55773: LD_INT 26
55775: DOUBLE
55776: EQUAL
55777: IFTRUE 55799
55779: LD_INT 28
55781: DOUBLE
55782: EQUAL
55783: IFTRUE 55799
55785: LD_INT 29
55787: DOUBLE
55788: EQUAL
55789: IFTRUE 55799
55791: LD_INT 30
55793: DOUBLE
55794: EQUAL
55795: IFTRUE 55799
55797: GO 55855
55799: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
55800: LD_ADDR_VAR 0 9
55804: PUSH
55805: LD_VAR 0 59
55809: PUSH
55810: LD_VAR 0 60
55814: PUSH
55815: LD_VAR 0 61
55819: PUSH
55820: LD_VAR 0 62
55824: PUSH
55825: LD_VAR 0 63
55829: PUSH
55830: LD_VAR 0 64
55834: PUSH
55835: EMPTY
55836: LIST
55837: LIST
55838: LIST
55839: LIST
55840: LIST
55841: LIST
55842: PUSH
55843: LD_VAR 0 4
55847: PUSH
55848: LD_INT 1
55850: PLUS
55851: ARRAY
55852: ST_TO_ADDR
55853: GO 55856
55855: POP
// temp_list2 = [ ] ;
55856: LD_ADDR_VAR 0 10
55860: PUSH
55861: EMPTY
55862: ST_TO_ADDR
// for i in temp_list do
55863: LD_ADDR_VAR 0 8
55867: PUSH
55868: LD_VAR 0 9
55872: PUSH
55873: FOR_IN
55874: IFFALSE 55926
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
55876: LD_ADDR_VAR 0 10
55880: PUSH
55881: LD_VAR 0 10
55885: PUSH
55886: LD_VAR 0 8
55890: PUSH
55891: LD_INT 1
55893: ARRAY
55894: PUSH
55895: LD_VAR 0 2
55899: PLUS
55900: PUSH
55901: LD_VAR 0 8
55905: PUSH
55906: LD_INT 2
55908: ARRAY
55909: PUSH
55910: LD_VAR 0 3
55914: PLUS
55915: PUSH
55916: EMPTY
55917: LIST
55918: LIST
55919: PUSH
55920: EMPTY
55921: LIST
55922: ADD
55923: ST_TO_ADDR
55924: GO 55873
55926: POP
55927: POP
// result = temp_list2 ;
55928: LD_ADDR_VAR 0 7
55932: PUSH
55933: LD_VAR 0 10
55937: ST_TO_ADDR
// end ;
55938: LD_VAR 0 7
55942: RET
// export function EnemyInRange ( unit , dist ) ; begin
55943: LD_INT 0
55945: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
55946: LD_ADDR_VAR 0 3
55950: PUSH
55951: LD_VAR 0 1
55955: PPUSH
55956: CALL_OW 255
55960: PPUSH
55961: LD_VAR 0 1
55965: PPUSH
55966: CALL_OW 250
55970: PPUSH
55971: LD_VAR 0 1
55975: PPUSH
55976: CALL_OW 251
55980: PPUSH
55981: LD_VAR 0 2
55985: PPUSH
55986: CALL 29345 0 4
55990: PUSH
55991: LD_INT 4
55993: ARRAY
55994: ST_TO_ADDR
// end ;
55995: LD_VAR 0 3
55999: RET
// export function PlayerSeeMe ( unit ) ; begin
56000: LD_INT 0
56002: PPUSH
// result := See ( your_side , unit ) ;
56003: LD_ADDR_VAR 0 2
56007: PUSH
56008: LD_OWVAR 2
56012: PPUSH
56013: LD_VAR 0 1
56017: PPUSH
56018: CALL_OW 292
56022: ST_TO_ADDR
// end ;
56023: LD_VAR 0 2
56027: RET
// export function ReverseDir ( unit ) ; begin
56028: LD_INT 0
56030: PPUSH
// if not unit then
56031: LD_VAR 0 1
56035: NOT
56036: IFFALSE 56040
// exit ;
56038: GO 56063
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
56040: LD_ADDR_VAR 0 2
56044: PUSH
56045: LD_VAR 0 1
56049: PPUSH
56050: CALL_OW 254
56054: PUSH
56055: LD_INT 3
56057: PLUS
56058: PUSH
56059: LD_INT 6
56061: MOD
56062: ST_TO_ADDR
// end ;
56063: LD_VAR 0 2
56067: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
56068: LD_INT 0
56070: PPUSH
56071: PPUSH
56072: PPUSH
56073: PPUSH
56074: PPUSH
56075: PPUSH
// if not unit or not hexes then
56076: LD_VAR 0 1
56080: NOT
56081: PUSH
56082: LD_VAR 0 2
56086: NOT
56087: OR
56088: IFFALSE 56092
// exit ;
56090: GO 56215
// dist := 9999 ;
56092: LD_ADDR_VAR 0 5
56096: PUSH
56097: LD_INT 9999
56099: ST_TO_ADDR
// for i = 1 to hexes do
56100: LD_ADDR_VAR 0 4
56104: PUSH
56105: DOUBLE
56106: LD_INT 1
56108: DEC
56109: ST_TO_ADDR
56110: LD_VAR 0 2
56114: PUSH
56115: FOR_TO
56116: IFFALSE 56203
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56118: LD_ADDR_VAR 0 6
56122: PUSH
56123: LD_VAR 0 1
56127: PPUSH
56128: LD_VAR 0 2
56132: PUSH
56133: LD_VAR 0 4
56137: ARRAY
56138: PUSH
56139: LD_INT 1
56141: ARRAY
56142: PPUSH
56143: LD_VAR 0 2
56147: PUSH
56148: LD_VAR 0 4
56152: ARRAY
56153: PUSH
56154: LD_INT 2
56156: ARRAY
56157: PPUSH
56158: CALL_OW 297
56162: ST_TO_ADDR
// if tdist < dist then
56163: LD_VAR 0 6
56167: PUSH
56168: LD_VAR 0 5
56172: LESS
56173: IFFALSE 56201
// begin hex := hexes [ i ] ;
56175: LD_ADDR_VAR 0 8
56179: PUSH
56180: LD_VAR 0 2
56184: PUSH
56185: LD_VAR 0 4
56189: ARRAY
56190: ST_TO_ADDR
// dist := tdist ;
56191: LD_ADDR_VAR 0 5
56195: PUSH
56196: LD_VAR 0 6
56200: ST_TO_ADDR
// end ; end ;
56201: GO 56115
56203: POP
56204: POP
// result := hex ;
56205: LD_ADDR_VAR 0 3
56209: PUSH
56210: LD_VAR 0 8
56214: ST_TO_ADDR
// end ;
56215: LD_VAR 0 3
56219: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
56220: LD_INT 0
56222: PPUSH
56223: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
56224: LD_VAR 0 1
56228: NOT
56229: PUSH
56230: LD_VAR 0 1
56234: PUSH
56235: LD_INT 21
56237: PUSH
56238: LD_INT 2
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: PUSH
56245: LD_INT 23
56247: PUSH
56248: LD_INT 2
56250: PUSH
56251: EMPTY
56252: LIST
56253: LIST
56254: PUSH
56255: EMPTY
56256: LIST
56257: LIST
56258: PPUSH
56259: CALL_OW 69
56263: IN
56264: NOT
56265: OR
56266: IFFALSE 56270
// exit ;
56268: GO 56317
// for i = 1 to 3 do
56270: LD_ADDR_VAR 0 3
56274: PUSH
56275: DOUBLE
56276: LD_INT 1
56278: DEC
56279: ST_TO_ADDR
56280: LD_INT 3
56282: PUSH
56283: FOR_TO
56284: IFFALSE 56315
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
56286: LD_VAR 0 1
56290: PPUSH
56291: CALL_OW 250
56295: PPUSH
56296: LD_VAR 0 1
56300: PPUSH
56301: CALL_OW 251
56305: PPUSH
56306: LD_INT 1
56308: PPUSH
56309: CALL_OW 453
56313: GO 56283
56315: POP
56316: POP
// end ;
56317: LD_VAR 0 2
56321: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
56322: LD_INT 0
56324: PPUSH
56325: PPUSH
56326: PPUSH
56327: PPUSH
56328: PPUSH
56329: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
56330: LD_VAR 0 1
56334: NOT
56335: PUSH
56336: LD_VAR 0 2
56340: NOT
56341: OR
56342: PUSH
56343: LD_VAR 0 1
56347: PPUSH
56348: CALL_OW 314
56352: OR
56353: IFFALSE 56357
// exit ;
56355: GO 56798
// x := GetX ( enemy_unit ) ;
56357: LD_ADDR_VAR 0 7
56361: PUSH
56362: LD_VAR 0 2
56366: PPUSH
56367: CALL_OW 250
56371: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
56372: LD_ADDR_VAR 0 8
56376: PUSH
56377: LD_VAR 0 2
56381: PPUSH
56382: CALL_OW 251
56386: ST_TO_ADDR
// if not x or not y then
56387: LD_VAR 0 7
56391: NOT
56392: PUSH
56393: LD_VAR 0 8
56397: NOT
56398: OR
56399: IFFALSE 56403
// exit ;
56401: GO 56798
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
56403: LD_ADDR_VAR 0 6
56407: PUSH
56408: LD_VAR 0 7
56412: PPUSH
56413: LD_INT 0
56415: PPUSH
56416: LD_INT 4
56418: PPUSH
56419: CALL_OW 272
56423: PUSH
56424: LD_VAR 0 8
56428: PPUSH
56429: LD_INT 0
56431: PPUSH
56432: LD_INT 4
56434: PPUSH
56435: CALL_OW 273
56439: PUSH
56440: EMPTY
56441: LIST
56442: LIST
56443: PUSH
56444: LD_VAR 0 7
56448: PPUSH
56449: LD_INT 1
56451: PPUSH
56452: LD_INT 4
56454: PPUSH
56455: CALL_OW 272
56459: PUSH
56460: LD_VAR 0 8
56464: PPUSH
56465: LD_INT 1
56467: PPUSH
56468: LD_INT 4
56470: PPUSH
56471: CALL_OW 273
56475: PUSH
56476: EMPTY
56477: LIST
56478: LIST
56479: PUSH
56480: LD_VAR 0 7
56484: PPUSH
56485: LD_INT 2
56487: PPUSH
56488: LD_INT 4
56490: PPUSH
56491: CALL_OW 272
56495: PUSH
56496: LD_VAR 0 8
56500: PPUSH
56501: LD_INT 2
56503: PPUSH
56504: LD_INT 4
56506: PPUSH
56507: CALL_OW 273
56511: PUSH
56512: EMPTY
56513: LIST
56514: LIST
56515: PUSH
56516: LD_VAR 0 7
56520: PPUSH
56521: LD_INT 3
56523: PPUSH
56524: LD_INT 4
56526: PPUSH
56527: CALL_OW 272
56531: PUSH
56532: LD_VAR 0 8
56536: PPUSH
56537: LD_INT 3
56539: PPUSH
56540: LD_INT 4
56542: PPUSH
56543: CALL_OW 273
56547: PUSH
56548: EMPTY
56549: LIST
56550: LIST
56551: PUSH
56552: LD_VAR 0 7
56556: PPUSH
56557: LD_INT 4
56559: PPUSH
56560: LD_INT 4
56562: PPUSH
56563: CALL_OW 272
56567: PUSH
56568: LD_VAR 0 8
56572: PPUSH
56573: LD_INT 4
56575: PPUSH
56576: LD_INT 4
56578: PPUSH
56579: CALL_OW 273
56583: PUSH
56584: EMPTY
56585: LIST
56586: LIST
56587: PUSH
56588: LD_VAR 0 7
56592: PPUSH
56593: LD_INT 5
56595: PPUSH
56596: LD_INT 4
56598: PPUSH
56599: CALL_OW 272
56603: PUSH
56604: LD_VAR 0 8
56608: PPUSH
56609: LD_INT 5
56611: PPUSH
56612: LD_INT 4
56614: PPUSH
56615: CALL_OW 273
56619: PUSH
56620: EMPTY
56621: LIST
56622: LIST
56623: PUSH
56624: EMPTY
56625: LIST
56626: LIST
56627: LIST
56628: LIST
56629: LIST
56630: LIST
56631: ST_TO_ADDR
// for i = tmp downto 1 do
56632: LD_ADDR_VAR 0 4
56636: PUSH
56637: DOUBLE
56638: LD_VAR 0 6
56642: INC
56643: ST_TO_ADDR
56644: LD_INT 1
56646: PUSH
56647: FOR_DOWNTO
56648: IFFALSE 56749
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
56650: LD_VAR 0 6
56654: PUSH
56655: LD_VAR 0 4
56659: ARRAY
56660: PUSH
56661: LD_INT 1
56663: ARRAY
56664: PPUSH
56665: LD_VAR 0 6
56669: PUSH
56670: LD_VAR 0 4
56674: ARRAY
56675: PUSH
56676: LD_INT 2
56678: ARRAY
56679: PPUSH
56680: CALL_OW 488
56684: NOT
56685: PUSH
56686: LD_VAR 0 6
56690: PUSH
56691: LD_VAR 0 4
56695: ARRAY
56696: PUSH
56697: LD_INT 1
56699: ARRAY
56700: PPUSH
56701: LD_VAR 0 6
56705: PUSH
56706: LD_VAR 0 4
56710: ARRAY
56711: PUSH
56712: LD_INT 2
56714: ARRAY
56715: PPUSH
56716: CALL_OW 428
56720: PUSH
56721: LD_INT 0
56723: NONEQUAL
56724: OR
56725: IFFALSE 56747
// tmp := Delete ( tmp , i ) ;
56727: LD_ADDR_VAR 0 6
56731: PUSH
56732: LD_VAR 0 6
56736: PPUSH
56737: LD_VAR 0 4
56741: PPUSH
56742: CALL_OW 3
56746: ST_TO_ADDR
56747: GO 56647
56749: POP
56750: POP
// j := GetClosestHex ( unit , tmp ) ;
56751: LD_ADDR_VAR 0 5
56755: PUSH
56756: LD_VAR 0 1
56760: PPUSH
56761: LD_VAR 0 6
56765: PPUSH
56766: CALL 56068 0 2
56770: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
56771: LD_VAR 0 1
56775: PPUSH
56776: LD_VAR 0 5
56780: PUSH
56781: LD_INT 1
56783: ARRAY
56784: PPUSH
56785: LD_VAR 0 5
56789: PUSH
56790: LD_INT 2
56792: ARRAY
56793: PPUSH
56794: CALL_OW 111
// end ;
56798: LD_VAR 0 3
56802: RET
// export function PrepareApemanSoldier ( ) ; begin
56803: LD_INT 0
56805: PPUSH
// uc_nation := 0 ;
56806: LD_ADDR_OWVAR 21
56810: PUSH
56811: LD_INT 0
56813: ST_TO_ADDR
// hc_sex := sex_male ;
56814: LD_ADDR_OWVAR 27
56818: PUSH
56819: LD_INT 1
56821: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
56822: LD_ADDR_OWVAR 28
56826: PUSH
56827: LD_INT 15
56829: ST_TO_ADDR
// hc_gallery :=  ;
56830: LD_ADDR_OWVAR 33
56834: PUSH
56835: LD_STRING 
56837: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
56838: LD_ADDR_OWVAR 31
56842: PUSH
56843: LD_INT 0
56845: PPUSH
56846: LD_INT 3
56848: PPUSH
56849: CALL_OW 12
56853: PUSH
56854: LD_INT 0
56856: PPUSH
56857: LD_INT 3
56859: PPUSH
56860: CALL_OW 12
56864: PUSH
56865: LD_INT 0
56867: PUSH
56868: LD_INT 0
56870: PUSH
56871: EMPTY
56872: LIST
56873: LIST
56874: LIST
56875: LIST
56876: ST_TO_ADDR
// end ;
56877: LD_VAR 0 1
56881: RET
// export function PrepareApemanEngineer ( ) ; begin
56882: LD_INT 0
56884: PPUSH
// uc_nation := 0 ;
56885: LD_ADDR_OWVAR 21
56889: PUSH
56890: LD_INT 0
56892: ST_TO_ADDR
// hc_sex := sex_male ;
56893: LD_ADDR_OWVAR 27
56897: PUSH
56898: LD_INT 1
56900: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
56901: LD_ADDR_OWVAR 28
56905: PUSH
56906: LD_INT 16
56908: ST_TO_ADDR
// hc_gallery :=  ;
56909: LD_ADDR_OWVAR 33
56913: PUSH
56914: LD_STRING 
56916: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
56917: LD_ADDR_OWVAR 31
56921: PUSH
56922: LD_INT 0
56924: PPUSH
56925: LD_INT 3
56927: PPUSH
56928: CALL_OW 12
56932: PUSH
56933: LD_INT 0
56935: PPUSH
56936: LD_INT 3
56938: PPUSH
56939: CALL_OW 12
56943: PUSH
56944: LD_INT 0
56946: PUSH
56947: LD_INT 0
56949: PUSH
56950: EMPTY
56951: LIST
56952: LIST
56953: LIST
56954: LIST
56955: ST_TO_ADDR
// end ;
56956: LD_VAR 0 1
56960: RET
// export function PrepareApeman ( agressivity ) ; begin
56961: LD_INT 0
56963: PPUSH
// uc_side := 0 ;
56964: LD_ADDR_OWVAR 20
56968: PUSH
56969: LD_INT 0
56971: ST_TO_ADDR
// uc_nation := 0 ;
56972: LD_ADDR_OWVAR 21
56976: PUSH
56977: LD_INT 0
56979: ST_TO_ADDR
// hc_sex := sex_male ;
56980: LD_ADDR_OWVAR 27
56984: PUSH
56985: LD_INT 1
56987: ST_TO_ADDR
// hc_class := class_apeman ;
56988: LD_ADDR_OWVAR 28
56992: PUSH
56993: LD_INT 12
56995: ST_TO_ADDR
// hc_gallery :=  ;
56996: LD_ADDR_OWVAR 33
57000: PUSH
57001: LD_STRING 
57003: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
57004: LD_ADDR_OWVAR 35
57008: PUSH
57009: LD_VAR 0 1
57013: NEG
57014: PPUSH
57015: LD_VAR 0 1
57019: PPUSH
57020: CALL_OW 12
57024: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57025: LD_ADDR_OWVAR 31
57029: PUSH
57030: LD_INT 0
57032: PPUSH
57033: LD_INT 3
57035: PPUSH
57036: CALL_OW 12
57040: PUSH
57041: LD_INT 0
57043: PPUSH
57044: LD_INT 3
57046: PPUSH
57047: CALL_OW 12
57051: PUSH
57052: LD_INT 0
57054: PUSH
57055: LD_INT 0
57057: PUSH
57058: EMPTY
57059: LIST
57060: LIST
57061: LIST
57062: LIST
57063: ST_TO_ADDR
// end ;
57064: LD_VAR 0 2
57068: RET
// export function PrepareTiger ( agressivity ) ; begin
57069: LD_INT 0
57071: PPUSH
// uc_side := 0 ;
57072: LD_ADDR_OWVAR 20
57076: PUSH
57077: LD_INT 0
57079: ST_TO_ADDR
// uc_nation := 0 ;
57080: LD_ADDR_OWVAR 21
57084: PUSH
57085: LD_INT 0
57087: ST_TO_ADDR
// hc_class := class_tiger ;
57088: LD_ADDR_OWVAR 28
57092: PUSH
57093: LD_INT 14
57095: ST_TO_ADDR
// hc_gallery :=  ;
57096: LD_ADDR_OWVAR 33
57100: PUSH
57101: LD_STRING 
57103: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
57104: LD_ADDR_OWVAR 35
57108: PUSH
57109: LD_VAR 0 1
57113: NEG
57114: PPUSH
57115: LD_VAR 0 1
57119: PPUSH
57120: CALL_OW 12
57124: ST_TO_ADDR
// end ;
57125: LD_VAR 0 2
57129: RET
// export function PrepareEnchidna ( ) ; begin
57130: LD_INT 0
57132: PPUSH
// uc_side := 0 ;
57133: LD_ADDR_OWVAR 20
57137: PUSH
57138: LD_INT 0
57140: ST_TO_ADDR
// uc_nation := 0 ;
57141: LD_ADDR_OWVAR 21
57145: PUSH
57146: LD_INT 0
57148: ST_TO_ADDR
// hc_class := class_baggie ;
57149: LD_ADDR_OWVAR 28
57153: PUSH
57154: LD_INT 13
57156: ST_TO_ADDR
// hc_gallery :=  ;
57157: LD_ADDR_OWVAR 33
57161: PUSH
57162: LD_STRING 
57164: ST_TO_ADDR
// end ;
57165: LD_VAR 0 1
57169: RET
// export function PrepareFrog ( ) ; begin
57170: LD_INT 0
57172: PPUSH
// uc_side := 0 ;
57173: LD_ADDR_OWVAR 20
57177: PUSH
57178: LD_INT 0
57180: ST_TO_ADDR
// uc_nation := 0 ;
57181: LD_ADDR_OWVAR 21
57185: PUSH
57186: LD_INT 0
57188: ST_TO_ADDR
// hc_class := class_frog ;
57189: LD_ADDR_OWVAR 28
57193: PUSH
57194: LD_INT 19
57196: ST_TO_ADDR
// hc_gallery :=  ;
57197: LD_ADDR_OWVAR 33
57201: PUSH
57202: LD_STRING 
57204: ST_TO_ADDR
// end ;
57205: LD_VAR 0 1
57209: RET
// export function PrepareFish ( ) ; begin
57210: LD_INT 0
57212: PPUSH
// uc_side := 0 ;
57213: LD_ADDR_OWVAR 20
57217: PUSH
57218: LD_INT 0
57220: ST_TO_ADDR
// uc_nation := 0 ;
57221: LD_ADDR_OWVAR 21
57225: PUSH
57226: LD_INT 0
57228: ST_TO_ADDR
// hc_class := class_fish ;
57229: LD_ADDR_OWVAR 28
57233: PUSH
57234: LD_INT 20
57236: ST_TO_ADDR
// hc_gallery :=  ;
57237: LD_ADDR_OWVAR 33
57241: PUSH
57242: LD_STRING 
57244: ST_TO_ADDR
// end ;
57245: LD_VAR 0 1
57249: RET
// export function PrepareBird ( ) ; begin
57250: LD_INT 0
57252: PPUSH
// uc_side := 0 ;
57253: LD_ADDR_OWVAR 20
57257: PUSH
57258: LD_INT 0
57260: ST_TO_ADDR
// uc_nation := 0 ;
57261: LD_ADDR_OWVAR 21
57265: PUSH
57266: LD_INT 0
57268: ST_TO_ADDR
// hc_class := class_phororhacos ;
57269: LD_ADDR_OWVAR 28
57273: PUSH
57274: LD_INT 18
57276: ST_TO_ADDR
// hc_gallery :=  ;
57277: LD_ADDR_OWVAR 33
57281: PUSH
57282: LD_STRING 
57284: ST_TO_ADDR
// end ;
57285: LD_VAR 0 1
57289: RET
// export function PrepareHorse ( ) ; begin
57290: LD_INT 0
57292: PPUSH
// uc_side := 0 ;
57293: LD_ADDR_OWVAR 20
57297: PUSH
57298: LD_INT 0
57300: ST_TO_ADDR
// uc_nation := 0 ;
57301: LD_ADDR_OWVAR 21
57305: PUSH
57306: LD_INT 0
57308: ST_TO_ADDR
// hc_class := class_horse ;
57309: LD_ADDR_OWVAR 28
57313: PUSH
57314: LD_INT 21
57316: ST_TO_ADDR
// hc_gallery :=  ;
57317: LD_ADDR_OWVAR 33
57321: PUSH
57322: LD_STRING 
57324: ST_TO_ADDR
// end ;
57325: LD_VAR 0 1
57329: RET
// export function PrepareMastodont ( ) ; begin
57330: LD_INT 0
57332: PPUSH
// uc_side := 0 ;
57333: LD_ADDR_OWVAR 20
57337: PUSH
57338: LD_INT 0
57340: ST_TO_ADDR
// uc_nation := 0 ;
57341: LD_ADDR_OWVAR 21
57345: PUSH
57346: LD_INT 0
57348: ST_TO_ADDR
// vc_chassis := class_mastodont ;
57349: LD_ADDR_OWVAR 37
57353: PUSH
57354: LD_INT 31
57356: ST_TO_ADDR
// vc_control := control_rider ;
57357: LD_ADDR_OWVAR 38
57361: PUSH
57362: LD_INT 4
57364: ST_TO_ADDR
// end ;
57365: LD_VAR 0 1
57369: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
57370: LD_INT 0
57372: PPUSH
57373: PPUSH
57374: PPUSH
// uc_side = 0 ;
57375: LD_ADDR_OWVAR 20
57379: PUSH
57380: LD_INT 0
57382: ST_TO_ADDR
// uc_nation = 0 ;
57383: LD_ADDR_OWVAR 21
57387: PUSH
57388: LD_INT 0
57390: ST_TO_ADDR
// InitHc_All ( ) ;
57391: CALL_OW 584
// InitVc ;
57395: CALL_OW 20
// if mastodonts then
57399: LD_VAR 0 6
57403: IFFALSE 57470
// for i = 1 to mastodonts do
57405: LD_ADDR_VAR 0 11
57409: PUSH
57410: DOUBLE
57411: LD_INT 1
57413: DEC
57414: ST_TO_ADDR
57415: LD_VAR 0 6
57419: PUSH
57420: FOR_TO
57421: IFFALSE 57468
// begin vc_chassis := 31 ;
57423: LD_ADDR_OWVAR 37
57427: PUSH
57428: LD_INT 31
57430: ST_TO_ADDR
// vc_control := control_rider ;
57431: LD_ADDR_OWVAR 38
57435: PUSH
57436: LD_INT 4
57438: ST_TO_ADDR
// animal := CreateVehicle ;
57439: LD_ADDR_VAR 0 12
57443: PUSH
57444: CALL_OW 45
57448: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57449: LD_VAR 0 12
57453: PPUSH
57454: LD_VAR 0 8
57458: PPUSH
57459: LD_INT 0
57461: PPUSH
57462: CALL 59605 0 3
// end ;
57466: GO 57420
57468: POP
57469: POP
// if horses then
57470: LD_VAR 0 5
57474: IFFALSE 57541
// for i = 1 to horses do
57476: LD_ADDR_VAR 0 11
57480: PUSH
57481: DOUBLE
57482: LD_INT 1
57484: DEC
57485: ST_TO_ADDR
57486: LD_VAR 0 5
57490: PUSH
57491: FOR_TO
57492: IFFALSE 57539
// begin hc_class := 21 ;
57494: LD_ADDR_OWVAR 28
57498: PUSH
57499: LD_INT 21
57501: ST_TO_ADDR
// hc_gallery :=  ;
57502: LD_ADDR_OWVAR 33
57506: PUSH
57507: LD_STRING 
57509: ST_TO_ADDR
// animal := CreateHuman ;
57510: LD_ADDR_VAR 0 12
57514: PUSH
57515: CALL_OW 44
57519: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57520: LD_VAR 0 12
57524: PPUSH
57525: LD_VAR 0 8
57529: PPUSH
57530: LD_INT 0
57532: PPUSH
57533: CALL 59605 0 3
// end ;
57537: GO 57491
57539: POP
57540: POP
// if birds then
57541: LD_VAR 0 1
57545: IFFALSE 57612
// for i = 1 to birds do
57547: LD_ADDR_VAR 0 11
57551: PUSH
57552: DOUBLE
57553: LD_INT 1
57555: DEC
57556: ST_TO_ADDR
57557: LD_VAR 0 1
57561: PUSH
57562: FOR_TO
57563: IFFALSE 57610
// begin hc_class = 18 ;
57565: LD_ADDR_OWVAR 28
57569: PUSH
57570: LD_INT 18
57572: ST_TO_ADDR
// hc_gallery =  ;
57573: LD_ADDR_OWVAR 33
57577: PUSH
57578: LD_STRING 
57580: ST_TO_ADDR
// animal := CreateHuman ;
57581: LD_ADDR_VAR 0 12
57585: PUSH
57586: CALL_OW 44
57590: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57591: LD_VAR 0 12
57595: PPUSH
57596: LD_VAR 0 8
57600: PPUSH
57601: LD_INT 0
57603: PPUSH
57604: CALL 59605 0 3
// end ;
57608: GO 57562
57610: POP
57611: POP
// if tigers then
57612: LD_VAR 0 2
57616: IFFALSE 57700
// for i = 1 to tigers do
57618: LD_ADDR_VAR 0 11
57622: PUSH
57623: DOUBLE
57624: LD_INT 1
57626: DEC
57627: ST_TO_ADDR
57628: LD_VAR 0 2
57632: PUSH
57633: FOR_TO
57634: IFFALSE 57698
// begin hc_class = class_tiger ;
57636: LD_ADDR_OWVAR 28
57640: PUSH
57641: LD_INT 14
57643: ST_TO_ADDR
// hc_gallery =  ;
57644: LD_ADDR_OWVAR 33
57648: PUSH
57649: LD_STRING 
57651: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
57652: LD_ADDR_OWVAR 35
57656: PUSH
57657: LD_INT 7
57659: NEG
57660: PPUSH
57661: LD_INT 7
57663: PPUSH
57664: CALL_OW 12
57668: ST_TO_ADDR
// animal := CreateHuman ;
57669: LD_ADDR_VAR 0 12
57673: PUSH
57674: CALL_OW 44
57678: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57679: LD_VAR 0 12
57683: PPUSH
57684: LD_VAR 0 8
57688: PPUSH
57689: LD_INT 0
57691: PPUSH
57692: CALL 59605 0 3
// end ;
57696: GO 57633
57698: POP
57699: POP
// if apemans then
57700: LD_VAR 0 3
57704: IFFALSE 57827
// for i = 1 to apemans do
57706: LD_ADDR_VAR 0 11
57710: PUSH
57711: DOUBLE
57712: LD_INT 1
57714: DEC
57715: ST_TO_ADDR
57716: LD_VAR 0 3
57720: PUSH
57721: FOR_TO
57722: IFFALSE 57825
// begin hc_class = class_apeman ;
57724: LD_ADDR_OWVAR 28
57728: PUSH
57729: LD_INT 12
57731: ST_TO_ADDR
// hc_gallery =  ;
57732: LD_ADDR_OWVAR 33
57736: PUSH
57737: LD_STRING 
57739: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
57740: LD_ADDR_OWVAR 35
57744: PUSH
57745: LD_INT 2
57747: NEG
57748: PPUSH
57749: LD_INT 2
57751: PPUSH
57752: CALL_OW 12
57756: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
57757: LD_ADDR_OWVAR 31
57761: PUSH
57762: LD_INT 1
57764: PPUSH
57765: LD_INT 3
57767: PPUSH
57768: CALL_OW 12
57772: PUSH
57773: LD_INT 1
57775: PPUSH
57776: LD_INT 3
57778: PPUSH
57779: CALL_OW 12
57783: PUSH
57784: LD_INT 0
57786: PUSH
57787: LD_INT 0
57789: PUSH
57790: EMPTY
57791: LIST
57792: LIST
57793: LIST
57794: LIST
57795: ST_TO_ADDR
// animal := CreateHuman ;
57796: LD_ADDR_VAR 0 12
57800: PUSH
57801: CALL_OW 44
57805: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57806: LD_VAR 0 12
57810: PPUSH
57811: LD_VAR 0 8
57815: PPUSH
57816: LD_INT 0
57818: PPUSH
57819: CALL 59605 0 3
// end ;
57823: GO 57721
57825: POP
57826: POP
// if enchidnas then
57827: LD_VAR 0 4
57831: IFFALSE 57898
// for i = 1 to enchidnas do
57833: LD_ADDR_VAR 0 11
57837: PUSH
57838: DOUBLE
57839: LD_INT 1
57841: DEC
57842: ST_TO_ADDR
57843: LD_VAR 0 4
57847: PUSH
57848: FOR_TO
57849: IFFALSE 57896
// begin hc_class = 13 ;
57851: LD_ADDR_OWVAR 28
57855: PUSH
57856: LD_INT 13
57858: ST_TO_ADDR
// hc_gallery =  ;
57859: LD_ADDR_OWVAR 33
57863: PUSH
57864: LD_STRING 
57866: ST_TO_ADDR
// animal := CreateHuman ;
57867: LD_ADDR_VAR 0 12
57871: PUSH
57872: CALL_OW 44
57876: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57877: LD_VAR 0 12
57881: PPUSH
57882: LD_VAR 0 8
57886: PPUSH
57887: LD_INT 0
57889: PPUSH
57890: CALL 59605 0 3
// end ;
57894: GO 57848
57896: POP
57897: POP
// if fishes then
57898: LD_VAR 0 7
57902: IFFALSE 57969
// for i = 1 to fishes do
57904: LD_ADDR_VAR 0 11
57908: PUSH
57909: DOUBLE
57910: LD_INT 1
57912: DEC
57913: ST_TO_ADDR
57914: LD_VAR 0 7
57918: PUSH
57919: FOR_TO
57920: IFFALSE 57967
// begin hc_class = 20 ;
57922: LD_ADDR_OWVAR 28
57926: PUSH
57927: LD_INT 20
57929: ST_TO_ADDR
// hc_gallery =  ;
57930: LD_ADDR_OWVAR 33
57934: PUSH
57935: LD_STRING 
57937: ST_TO_ADDR
// animal := CreateHuman ;
57938: LD_ADDR_VAR 0 12
57942: PUSH
57943: CALL_OW 44
57947: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
57948: LD_VAR 0 12
57952: PPUSH
57953: LD_VAR 0 9
57957: PPUSH
57958: LD_INT 0
57960: PPUSH
57961: CALL 59605 0 3
// end ;
57965: GO 57919
57967: POP
57968: POP
// end ;
57969: LD_VAR 0 10
57973: RET
// export function WantHeal ( sci , unit ) ; begin
57974: LD_INT 0
57976: PPUSH
// if GetTaskList ( sci ) > 0 then
57977: LD_VAR 0 1
57981: PPUSH
57982: CALL_OW 437
57986: PUSH
57987: LD_INT 0
57989: GREATER
57990: IFFALSE 58060
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
57992: LD_VAR 0 1
57996: PPUSH
57997: CALL_OW 437
58001: PUSH
58002: LD_INT 1
58004: ARRAY
58005: PUSH
58006: LD_INT 1
58008: ARRAY
58009: PUSH
58010: LD_STRING l
58012: EQUAL
58013: PUSH
58014: LD_VAR 0 1
58018: PPUSH
58019: CALL_OW 437
58023: PUSH
58024: LD_INT 1
58026: ARRAY
58027: PUSH
58028: LD_INT 4
58030: ARRAY
58031: PUSH
58032: LD_VAR 0 2
58036: EQUAL
58037: AND
58038: IFFALSE 58050
// result := true else
58040: LD_ADDR_VAR 0 3
58044: PUSH
58045: LD_INT 1
58047: ST_TO_ADDR
58048: GO 58058
// result := false ;
58050: LD_ADDR_VAR 0 3
58054: PUSH
58055: LD_INT 0
58057: ST_TO_ADDR
// end else
58058: GO 58068
// result := false ;
58060: LD_ADDR_VAR 0 3
58064: PUSH
58065: LD_INT 0
58067: ST_TO_ADDR
// end ;
58068: LD_VAR 0 3
58072: RET
// export function HealTarget ( sci ) ; begin
58073: LD_INT 0
58075: PPUSH
// if not sci then
58076: LD_VAR 0 1
58080: NOT
58081: IFFALSE 58085
// exit ;
58083: GO 58150
// result := 0 ;
58085: LD_ADDR_VAR 0 2
58089: PUSH
58090: LD_INT 0
58092: ST_TO_ADDR
// if GetTaskList ( sci ) then
58093: LD_VAR 0 1
58097: PPUSH
58098: CALL_OW 437
58102: IFFALSE 58150
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
58104: LD_VAR 0 1
58108: PPUSH
58109: CALL_OW 437
58113: PUSH
58114: LD_INT 1
58116: ARRAY
58117: PUSH
58118: LD_INT 1
58120: ARRAY
58121: PUSH
58122: LD_STRING l
58124: EQUAL
58125: IFFALSE 58150
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
58127: LD_ADDR_VAR 0 2
58131: PUSH
58132: LD_VAR 0 1
58136: PPUSH
58137: CALL_OW 437
58141: PUSH
58142: LD_INT 1
58144: ARRAY
58145: PUSH
58146: LD_INT 4
58148: ARRAY
58149: ST_TO_ADDR
// end ;
58150: LD_VAR 0 2
58154: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
58155: LD_INT 0
58157: PPUSH
58158: PPUSH
58159: PPUSH
58160: PPUSH
// if not base_units then
58161: LD_VAR 0 1
58165: NOT
58166: IFFALSE 58170
// exit ;
58168: GO 58257
// result := false ;
58170: LD_ADDR_VAR 0 2
58174: PUSH
58175: LD_INT 0
58177: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
58178: LD_ADDR_VAR 0 5
58182: PUSH
58183: LD_VAR 0 1
58187: PPUSH
58188: LD_INT 21
58190: PUSH
58191: LD_INT 3
58193: PUSH
58194: EMPTY
58195: LIST
58196: LIST
58197: PPUSH
58198: CALL_OW 72
58202: ST_TO_ADDR
// if not tmp then
58203: LD_VAR 0 5
58207: NOT
58208: IFFALSE 58212
// exit ;
58210: GO 58257
// for i in tmp do
58212: LD_ADDR_VAR 0 3
58216: PUSH
58217: LD_VAR 0 5
58221: PUSH
58222: FOR_IN
58223: IFFALSE 58255
// begin result := EnemyInRange ( i , 22 ) ;
58225: LD_ADDR_VAR 0 2
58229: PUSH
58230: LD_VAR 0 3
58234: PPUSH
58235: LD_INT 22
58237: PPUSH
58238: CALL 55943 0 2
58242: ST_TO_ADDR
// if result then
58243: LD_VAR 0 2
58247: IFFALSE 58253
// exit ;
58249: POP
58250: POP
58251: GO 58257
// end ;
58253: GO 58222
58255: POP
58256: POP
// end ;
58257: LD_VAR 0 2
58261: RET
// export function FilterByTag ( units , tag ) ; begin
58262: LD_INT 0
58264: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
58265: LD_ADDR_VAR 0 3
58269: PUSH
58270: LD_VAR 0 1
58274: PPUSH
58275: LD_INT 120
58277: PUSH
58278: LD_VAR 0 2
58282: PUSH
58283: EMPTY
58284: LIST
58285: LIST
58286: PPUSH
58287: CALL_OW 72
58291: ST_TO_ADDR
// end ;
58292: LD_VAR 0 3
58296: RET
// export function IsDriver ( un ) ; begin
58297: LD_INT 0
58299: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
58300: LD_ADDR_VAR 0 2
58304: PUSH
58305: LD_VAR 0 1
58309: PUSH
58310: LD_INT 55
58312: PUSH
58313: EMPTY
58314: LIST
58315: PPUSH
58316: CALL_OW 69
58320: IN
58321: ST_TO_ADDR
// end ;
58322: LD_VAR 0 2
58326: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
58327: LD_INT 0
58329: PPUSH
58330: PPUSH
// list := [ ] ;
58331: LD_ADDR_VAR 0 5
58335: PUSH
58336: EMPTY
58337: ST_TO_ADDR
// case d of 0 :
58338: LD_VAR 0 3
58342: PUSH
58343: LD_INT 0
58345: DOUBLE
58346: EQUAL
58347: IFTRUE 58351
58349: GO 58484
58351: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
58352: LD_ADDR_VAR 0 5
58356: PUSH
58357: LD_VAR 0 1
58361: PUSH
58362: LD_INT 4
58364: MINUS
58365: PUSH
58366: LD_VAR 0 2
58370: PUSH
58371: LD_INT 4
58373: MINUS
58374: PUSH
58375: LD_INT 2
58377: PUSH
58378: EMPTY
58379: LIST
58380: LIST
58381: LIST
58382: PUSH
58383: LD_VAR 0 1
58387: PUSH
58388: LD_INT 3
58390: MINUS
58391: PUSH
58392: LD_VAR 0 2
58396: PUSH
58397: LD_INT 1
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: LIST
58404: PUSH
58405: LD_VAR 0 1
58409: PUSH
58410: LD_INT 4
58412: PLUS
58413: PUSH
58414: LD_VAR 0 2
58418: PUSH
58419: LD_INT 4
58421: PUSH
58422: EMPTY
58423: LIST
58424: LIST
58425: LIST
58426: PUSH
58427: LD_VAR 0 1
58431: PUSH
58432: LD_INT 3
58434: PLUS
58435: PUSH
58436: LD_VAR 0 2
58440: PUSH
58441: LD_INT 3
58443: PLUS
58444: PUSH
58445: LD_INT 5
58447: PUSH
58448: EMPTY
58449: LIST
58450: LIST
58451: LIST
58452: PUSH
58453: LD_VAR 0 1
58457: PUSH
58458: LD_VAR 0 2
58462: PUSH
58463: LD_INT 4
58465: PLUS
58466: PUSH
58467: LD_INT 0
58469: PUSH
58470: EMPTY
58471: LIST
58472: LIST
58473: LIST
58474: PUSH
58475: EMPTY
58476: LIST
58477: LIST
58478: LIST
58479: LIST
58480: LIST
58481: ST_TO_ADDR
// end ; 1 :
58482: GO 59182
58484: LD_INT 1
58486: DOUBLE
58487: EQUAL
58488: IFTRUE 58492
58490: GO 58625
58492: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
58493: LD_ADDR_VAR 0 5
58497: PUSH
58498: LD_VAR 0 1
58502: PUSH
58503: LD_VAR 0 2
58507: PUSH
58508: LD_INT 4
58510: MINUS
58511: PUSH
58512: LD_INT 3
58514: PUSH
58515: EMPTY
58516: LIST
58517: LIST
58518: LIST
58519: PUSH
58520: LD_VAR 0 1
58524: PUSH
58525: LD_INT 3
58527: MINUS
58528: PUSH
58529: LD_VAR 0 2
58533: PUSH
58534: LD_INT 3
58536: MINUS
58537: PUSH
58538: LD_INT 2
58540: PUSH
58541: EMPTY
58542: LIST
58543: LIST
58544: LIST
58545: PUSH
58546: LD_VAR 0 1
58550: PUSH
58551: LD_INT 4
58553: MINUS
58554: PUSH
58555: LD_VAR 0 2
58559: PUSH
58560: LD_INT 1
58562: PUSH
58563: EMPTY
58564: LIST
58565: LIST
58566: LIST
58567: PUSH
58568: LD_VAR 0 1
58572: PUSH
58573: LD_VAR 0 2
58577: PUSH
58578: LD_INT 3
58580: PLUS
58581: PUSH
58582: LD_INT 0
58584: PUSH
58585: EMPTY
58586: LIST
58587: LIST
58588: LIST
58589: PUSH
58590: LD_VAR 0 1
58594: PUSH
58595: LD_INT 4
58597: PLUS
58598: PUSH
58599: LD_VAR 0 2
58603: PUSH
58604: LD_INT 4
58606: PLUS
58607: PUSH
58608: LD_INT 5
58610: PUSH
58611: EMPTY
58612: LIST
58613: LIST
58614: LIST
58615: PUSH
58616: EMPTY
58617: LIST
58618: LIST
58619: LIST
58620: LIST
58621: LIST
58622: ST_TO_ADDR
// end ; 2 :
58623: GO 59182
58625: LD_INT 2
58627: DOUBLE
58628: EQUAL
58629: IFTRUE 58633
58631: GO 58762
58633: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
58634: LD_ADDR_VAR 0 5
58638: PUSH
58639: LD_VAR 0 1
58643: PUSH
58644: LD_VAR 0 2
58648: PUSH
58649: LD_INT 3
58651: MINUS
58652: PUSH
58653: LD_INT 3
58655: PUSH
58656: EMPTY
58657: LIST
58658: LIST
58659: LIST
58660: PUSH
58661: LD_VAR 0 1
58665: PUSH
58666: LD_INT 4
58668: PLUS
58669: PUSH
58670: LD_VAR 0 2
58674: PUSH
58675: LD_INT 4
58677: PUSH
58678: EMPTY
58679: LIST
58680: LIST
58681: LIST
58682: PUSH
58683: LD_VAR 0 1
58687: PUSH
58688: LD_VAR 0 2
58692: PUSH
58693: LD_INT 4
58695: PLUS
58696: PUSH
58697: LD_INT 0
58699: PUSH
58700: EMPTY
58701: LIST
58702: LIST
58703: LIST
58704: PUSH
58705: LD_VAR 0 1
58709: PUSH
58710: LD_INT 3
58712: MINUS
58713: PUSH
58714: LD_VAR 0 2
58718: PUSH
58719: LD_INT 1
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: LIST
58726: PUSH
58727: LD_VAR 0 1
58731: PUSH
58732: LD_INT 4
58734: MINUS
58735: PUSH
58736: LD_VAR 0 2
58740: PUSH
58741: LD_INT 4
58743: MINUS
58744: PUSH
58745: LD_INT 2
58747: PUSH
58748: EMPTY
58749: LIST
58750: LIST
58751: LIST
58752: PUSH
58753: EMPTY
58754: LIST
58755: LIST
58756: LIST
58757: LIST
58758: LIST
58759: ST_TO_ADDR
// end ; 3 :
58760: GO 59182
58762: LD_INT 3
58764: DOUBLE
58765: EQUAL
58766: IFTRUE 58770
58768: GO 58903
58770: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
58771: LD_ADDR_VAR 0 5
58775: PUSH
58776: LD_VAR 0 1
58780: PUSH
58781: LD_INT 3
58783: PLUS
58784: PUSH
58785: LD_VAR 0 2
58789: PUSH
58790: LD_INT 4
58792: PUSH
58793: EMPTY
58794: LIST
58795: LIST
58796: LIST
58797: PUSH
58798: LD_VAR 0 1
58802: PUSH
58803: LD_INT 4
58805: PLUS
58806: PUSH
58807: LD_VAR 0 2
58811: PUSH
58812: LD_INT 4
58814: PLUS
58815: PUSH
58816: LD_INT 5
58818: PUSH
58819: EMPTY
58820: LIST
58821: LIST
58822: LIST
58823: PUSH
58824: LD_VAR 0 1
58828: PUSH
58829: LD_INT 4
58831: MINUS
58832: PUSH
58833: LD_VAR 0 2
58837: PUSH
58838: LD_INT 1
58840: PUSH
58841: EMPTY
58842: LIST
58843: LIST
58844: LIST
58845: PUSH
58846: LD_VAR 0 1
58850: PUSH
58851: LD_VAR 0 2
58855: PUSH
58856: LD_INT 4
58858: MINUS
58859: PUSH
58860: LD_INT 3
58862: PUSH
58863: EMPTY
58864: LIST
58865: LIST
58866: LIST
58867: PUSH
58868: LD_VAR 0 1
58872: PUSH
58873: LD_INT 3
58875: MINUS
58876: PUSH
58877: LD_VAR 0 2
58881: PUSH
58882: LD_INT 3
58884: MINUS
58885: PUSH
58886: LD_INT 2
58888: PUSH
58889: EMPTY
58890: LIST
58891: LIST
58892: LIST
58893: PUSH
58894: EMPTY
58895: LIST
58896: LIST
58897: LIST
58898: LIST
58899: LIST
58900: ST_TO_ADDR
// end ; 4 :
58901: GO 59182
58903: LD_INT 4
58905: DOUBLE
58906: EQUAL
58907: IFTRUE 58911
58909: GO 59044
58911: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
58912: LD_ADDR_VAR 0 5
58916: PUSH
58917: LD_VAR 0 1
58921: PUSH
58922: LD_VAR 0 2
58926: PUSH
58927: LD_INT 4
58929: PLUS
58930: PUSH
58931: LD_INT 0
58933: PUSH
58934: EMPTY
58935: LIST
58936: LIST
58937: LIST
58938: PUSH
58939: LD_VAR 0 1
58943: PUSH
58944: LD_INT 3
58946: PLUS
58947: PUSH
58948: LD_VAR 0 2
58952: PUSH
58953: LD_INT 3
58955: PLUS
58956: PUSH
58957: LD_INT 5
58959: PUSH
58960: EMPTY
58961: LIST
58962: LIST
58963: LIST
58964: PUSH
58965: LD_VAR 0 1
58969: PUSH
58970: LD_INT 4
58972: PLUS
58973: PUSH
58974: LD_VAR 0 2
58978: PUSH
58979: LD_INT 4
58981: PUSH
58982: EMPTY
58983: LIST
58984: LIST
58985: LIST
58986: PUSH
58987: LD_VAR 0 1
58991: PUSH
58992: LD_VAR 0 2
58996: PUSH
58997: LD_INT 3
58999: MINUS
59000: PUSH
59001: LD_INT 3
59003: PUSH
59004: EMPTY
59005: LIST
59006: LIST
59007: LIST
59008: PUSH
59009: LD_VAR 0 1
59013: PUSH
59014: LD_INT 4
59016: MINUS
59017: PUSH
59018: LD_VAR 0 2
59022: PUSH
59023: LD_INT 4
59025: MINUS
59026: PUSH
59027: LD_INT 2
59029: PUSH
59030: EMPTY
59031: LIST
59032: LIST
59033: LIST
59034: PUSH
59035: EMPTY
59036: LIST
59037: LIST
59038: LIST
59039: LIST
59040: LIST
59041: ST_TO_ADDR
// end ; 5 :
59042: GO 59182
59044: LD_INT 5
59046: DOUBLE
59047: EQUAL
59048: IFTRUE 59052
59050: GO 59181
59052: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
59053: LD_ADDR_VAR 0 5
59057: PUSH
59058: LD_VAR 0 1
59062: PUSH
59063: LD_INT 4
59065: MINUS
59066: PUSH
59067: LD_VAR 0 2
59071: PUSH
59072: LD_INT 1
59074: PUSH
59075: EMPTY
59076: LIST
59077: LIST
59078: LIST
59079: PUSH
59080: LD_VAR 0 1
59084: PUSH
59085: LD_VAR 0 2
59089: PUSH
59090: LD_INT 4
59092: MINUS
59093: PUSH
59094: LD_INT 3
59096: PUSH
59097: EMPTY
59098: LIST
59099: LIST
59100: LIST
59101: PUSH
59102: LD_VAR 0 1
59106: PUSH
59107: LD_INT 4
59109: PLUS
59110: PUSH
59111: LD_VAR 0 2
59115: PUSH
59116: LD_INT 4
59118: PLUS
59119: PUSH
59120: LD_INT 5
59122: PUSH
59123: EMPTY
59124: LIST
59125: LIST
59126: LIST
59127: PUSH
59128: LD_VAR 0 1
59132: PUSH
59133: LD_INT 3
59135: PLUS
59136: PUSH
59137: LD_VAR 0 2
59141: PUSH
59142: LD_INT 4
59144: PUSH
59145: EMPTY
59146: LIST
59147: LIST
59148: LIST
59149: PUSH
59150: LD_VAR 0 1
59154: PUSH
59155: LD_VAR 0 2
59159: PUSH
59160: LD_INT 3
59162: PLUS
59163: PUSH
59164: LD_INT 0
59166: PUSH
59167: EMPTY
59168: LIST
59169: LIST
59170: LIST
59171: PUSH
59172: EMPTY
59173: LIST
59174: LIST
59175: LIST
59176: LIST
59177: LIST
59178: ST_TO_ADDR
// end ; end ;
59179: GO 59182
59181: POP
// result := list ;
59182: LD_ADDR_VAR 0 4
59186: PUSH
59187: LD_VAR 0 5
59191: ST_TO_ADDR
// end ;
59192: LD_VAR 0 4
59196: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
59197: LD_INT 0
59199: PPUSH
59200: PPUSH
59201: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
59202: LD_VAR 0 1
59206: NOT
59207: PUSH
59208: LD_VAR 0 2
59212: PUSH
59213: LD_INT 1
59215: PUSH
59216: LD_INT 2
59218: PUSH
59219: LD_INT 3
59221: PUSH
59222: LD_INT 4
59224: PUSH
59225: EMPTY
59226: LIST
59227: LIST
59228: LIST
59229: LIST
59230: IN
59231: NOT
59232: OR
59233: IFFALSE 59237
// exit ;
59235: GO 59329
// tmp := [ ] ;
59237: LD_ADDR_VAR 0 5
59241: PUSH
59242: EMPTY
59243: ST_TO_ADDR
// for i in units do
59244: LD_ADDR_VAR 0 4
59248: PUSH
59249: LD_VAR 0 1
59253: PUSH
59254: FOR_IN
59255: IFFALSE 59298
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
59257: LD_ADDR_VAR 0 5
59261: PUSH
59262: LD_VAR 0 5
59266: PPUSH
59267: LD_VAR 0 5
59271: PUSH
59272: LD_INT 1
59274: PLUS
59275: PPUSH
59276: LD_VAR 0 4
59280: PPUSH
59281: LD_VAR 0 2
59285: PPUSH
59286: CALL_OW 259
59290: PPUSH
59291: CALL_OW 2
59295: ST_TO_ADDR
59296: GO 59254
59298: POP
59299: POP
// if not tmp then
59300: LD_VAR 0 5
59304: NOT
59305: IFFALSE 59309
// exit ;
59307: GO 59329
// result := SortListByListDesc ( units , tmp ) ;
59309: LD_ADDR_VAR 0 3
59313: PUSH
59314: LD_VAR 0 1
59318: PPUSH
59319: LD_VAR 0 5
59323: PPUSH
59324: CALL_OW 77
59328: ST_TO_ADDR
// end ;
59329: LD_VAR 0 3
59333: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
59334: LD_INT 0
59336: PPUSH
59337: PPUSH
59338: PPUSH
// result := false ;
59339: LD_ADDR_VAR 0 3
59343: PUSH
59344: LD_INT 0
59346: ST_TO_ADDR
// x := GetX ( building ) ;
59347: LD_ADDR_VAR 0 4
59351: PUSH
59352: LD_VAR 0 2
59356: PPUSH
59357: CALL_OW 250
59361: ST_TO_ADDR
// y := GetY ( building ) ;
59362: LD_ADDR_VAR 0 5
59366: PUSH
59367: LD_VAR 0 2
59371: PPUSH
59372: CALL_OW 251
59376: ST_TO_ADDR
// if not building or not x or not y then
59377: LD_VAR 0 2
59381: NOT
59382: PUSH
59383: LD_VAR 0 4
59387: NOT
59388: OR
59389: PUSH
59390: LD_VAR 0 5
59394: NOT
59395: OR
59396: IFFALSE 59400
// exit ;
59398: GO 59492
// if GetTaskList ( unit ) then
59400: LD_VAR 0 1
59404: PPUSH
59405: CALL_OW 437
59409: IFFALSE 59492
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59411: LD_STRING e
59413: PUSH
59414: LD_VAR 0 1
59418: PPUSH
59419: CALL_OW 437
59423: PUSH
59424: LD_INT 1
59426: ARRAY
59427: PUSH
59428: LD_INT 1
59430: ARRAY
59431: EQUAL
59432: PUSH
59433: LD_VAR 0 4
59437: PUSH
59438: LD_VAR 0 1
59442: PPUSH
59443: CALL_OW 437
59447: PUSH
59448: LD_INT 1
59450: ARRAY
59451: PUSH
59452: LD_INT 2
59454: ARRAY
59455: EQUAL
59456: AND
59457: PUSH
59458: LD_VAR 0 5
59462: PUSH
59463: LD_VAR 0 1
59467: PPUSH
59468: CALL_OW 437
59472: PUSH
59473: LD_INT 1
59475: ARRAY
59476: PUSH
59477: LD_INT 3
59479: ARRAY
59480: EQUAL
59481: AND
59482: IFFALSE 59492
// result := true end ;
59484: LD_ADDR_VAR 0 3
59488: PUSH
59489: LD_INT 1
59491: ST_TO_ADDR
// end ;
59492: LD_VAR 0 3
59496: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
59497: LD_INT 0
59499: PPUSH
// result := false ;
59500: LD_ADDR_VAR 0 4
59504: PUSH
59505: LD_INT 0
59507: ST_TO_ADDR
// if GetTaskList ( unit ) then
59508: LD_VAR 0 1
59512: PPUSH
59513: CALL_OW 437
59517: IFFALSE 59600
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59519: LD_STRING M
59521: PUSH
59522: LD_VAR 0 1
59526: PPUSH
59527: CALL_OW 437
59531: PUSH
59532: LD_INT 1
59534: ARRAY
59535: PUSH
59536: LD_INT 1
59538: ARRAY
59539: EQUAL
59540: PUSH
59541: LD_VAR 0 2
59545: PUSH
59546: LD_VAR 0 1
59550: PPUSH
59551: CALL_OW 437
59555: PUSH
59556: LD_INT 1
59558: ARRAY
59559: PUSH
59560: LD_INT 2
59562: ARRAY
59563: EQUAL
59564: AND
59565: PUSH
59566: LD_VAR 0 3
59570: PUSH
59571: LD_VAR 0 1
59575: PPUSH
59576: CALL_OW 437
59580: PUSH
59581: LD_INT 1
59583: ARRAY
59584: PUSH
59585: LD_INT 3
59587: ARRAY
59588: EQUAL
59589: AND
59590: IFFALSE 59600
// result := true ;
59592: LD_ADDR_VAR 0 4
59596: PUSH
59597: LD_INT 1
59599: ST_TO_ADDR
// end ; end ;
59600: LD_VAR 0 4
59604: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
59605: LD_INT 0
59607: PPUSH
59608: PPUSH
59609: PPUSH
59610: PPUSH
// if not unit or not area then
59611: LD_VAR 0 1
59615: NOT
59616: PUSH
59617: LD_VAR 0 2
59621: NOT
59622: OR
59623: IFFALSE 59627
// exit ;
59625: GO 59791
// tmp := AreaToList ( area , i ) ;
59627: LD_ADDR_VAR 0 6
59631: PUSH
59632: LD_VAR 0 2
59636: PPUSH
59637: LD_VAR 0 5
59641: PPUSH
59642: CALL_OW 517
59646: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
59647: LD_ADDR_VAR 0 5
59651: PUSH
59652: DOUBLE
59653: LD_INT 1
59655: DEC
59656: ST_TO_ADDR
59657: LD_VAR 0 6
59661: PUSH
59662: LD_INT 1
59664: ARRAY
59665: PUSH
59666: FOR_TO
59667: IFFALSE 59789
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
59669: LD_ADDR_VAR 0 7
59673: PUSH
59674: LD_VAR 0 6
59678: PUSH
59679: LD_INT 1
59681: ARRAY
59682: PUSH
59683: LD_VAR 0 5
59687: ARRAY
59688: PUSH
59689: LD_VAR 0 6
59693: PUSH
59694: LD_INT 2
59696: ARRAY
59697: PUSH
59698: LD_VAR 0 5
59702: ARRAY
59703: PUSH
59704: EMPTY
59705: LIST
59706: LIST
59707: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
59708: LD_VAR 0 7
59712: PUSH
59713: LD_INT 1
59715: ARRAY
59716: PPUSH
59717: LD_VAR 0 7
59721: PUSH
59722: LD_INT 2
59724: ARRAY
59725: PPUSH
59726: CALL_OW 428
59730: PUSH
59731: LD_INT 0
59733: EQUAL
59734: IFFALSE 59787
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
59736: LD_VAR 0 1
59740: PPUSH
59741: LD_VAR 0 7
59745: PUSH
59746: LD_INT 1
59748: ARRAY
59749: PPUSH
59750: LD_VAR 0 7
59754: PUSH
59755: LD_INT 2
59757: ARRAY
59758: PPUSH
59759: LD_VAR 0 3
59763: PPUSH
59764: CALL_OW 48
// result := IsPlaced ( unit ) ;
59768: LD_ADDR_VAR 0 4
59772: PUSH
59773: LD_VAR 0 1
59777: PPUSH
59778: CALL_OW 305
59782: ST_TO_ADDR
// exit ;
59783: POP
59784: POP
59785: GO 59791
// end ; end ;
59787: GO 59666
59789: POP
59790: POP
// end ;
59791: LD_VAR 0 4
59795: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
59796: LD_INT 0
59798: PPUSH
59799: PPUSH
59800: PPUSH
// if not side or side > 8 then
59801: LD_VAR 0 1
59805: NOT
59806: PUSH
59807: LD_VAR 0 1
59811: PUSH
59812: LD_INT 8
59814: GREATER
59815: OR
59816: IFFALSE 59820
// exit ;
59818: GO 60007
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
59820: LD_ADDR_VAR 0 4
59824: PUSH
59825: LD_INT 22
59827: PUSH
59828: LD_VAR 0 1
59832: PUSH
59833: EMPTY
59834: LIST
59835: LIST
59836: PUSH
59837: LD_INT 21
59839: PUSH
59840: LD_INT 3
59842: PUSH
59843: EMPTY
59844: LIST
59845: LIST
59846: PUSH
59847: EMPTY
59848: LIST
59849: LIST
59850: PPUSH
59851: CALL_OW 69
59855: ST_TO_ADDR
// if not tmp then
59856: LD_VAR 0 4
59860: NOT
59861: IFFALSE 59865
// exit ;
59863: GO 60007
// enable_addtolog := true ;
59865: LD_ADDR_OWVAR 81
59869: PUSH
59870: LD_INT 1
59872: ST_TO_ADDR
// AddToLog ( [ ) ;
59873: LD_STRING [
59875: PPUSH
59876: CALL_OW 561
// for i in tmp do
59880: LD_ADDR_VAR 0 3
59884: PUSH
59885: LD_VAR 0 4
59889: PUSH
59890: FOR_IN
59891: IFFALSE 59998
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
59893: LD_STRING [
59895: PUSH
59896: LD_VAR 0 3
59900: PPUSH
59901: CALL_OW 266
59905: STR
59906: PUSH
59907: LD_STRING , 
59909: STR
59910: PUSH
59911: LD_VAR 0 3
59915: PPUSH
59916: CALL_OW 250
59920: STR
59921: PUSH
59922: LD_STRING , 
59924: STR
59925: PUSH
59926: LD_VAR 0 3
59930: PPUSH
59931: CALL_OW 251
59935: STR
59936: PUSH
59937: LD_STRING , 
59939: STR
59940: PUSH
59941: LD_VAR 0 3
59945: PPUSH
59946: CALL_OW 254
59950: STR
59951: PUSH
59952: LD_STRING , 
59954: STR
59955: PUSH
59956: LD_VAR 0 3
59960: PPUSH
59961: LD_INT 1
59963: PPUSH
59964: CALL_OW 268
59968: STR
59969: PUSH
59970: LD_STRING , 
59972: STR
59973: PUSH
59974: LD_VAR 0 3
59978: PPUSH
59979: LD_INT 2
59981: PPUSH
59982: CALL_OW 268
59986: STR
59987: PUSH
59988: LD_STRING ],
59990: STR
59991: PPUSH
59992: CALL_OW 561
// end ;
59996: GO 59890
59998: POP
59999: POP
// AddToLog ( ]; ) ;
60000: LD_STRING ];
60002: PPUSH
60003: CALL_OW 561
// end ;
60007: LD_VAR 0 2
60011: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60012: LD_INT 0
60014: PPUSH
60015: PPUSH
60016: PPUSH
60017: PPUSH
60018: PPUSH
// if not area or not rate or not max then
60019: LD_VAR 0 1
60023: NOT
60024: PUSH
60025: LD_VAR 0 2
60029: NOT
60030: OR
60031: PUSH
60032: LD_VAR 0 4
60036: NOT
60037: OR
60038: IFFALSE 60042
// exit ;
60040: GO 60231
// while 1 do
60042: LD_INT 1
60044: IFFALSE 60231
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
60046: LD_ADDR_VAR 0 9
60050: PUSH
60051: LD_VAR 0 1
60055: PPUSH
60056: LD_INT 1
60058: PPUSH
60059: CALL_OW 287
60063: PUSH
60064: LD_INT 10
60066: MUL
60067: ST_TO_ADDR
// r := rate / 10 ;
60068: LD_ADDR_VAR 0 7
60072: PUSH
60073: LD_VAR 0 2
60077: PUSH
60078: LD_INT 10
60080: DIVREAL
60081: ST_TO_ADDR
// time := 1 1$00 ;
60082: LD_ADDR_VAR 0 8
60086: PUSH
60087: LD_INT 2100
60089: ST_TO_ADDR
// if amount < min then
60090: LD_VAR 0 9
60094: PUSH
60095: LD_VAR 0 3
60099: LESS
60100: IFFALSE 60118
// r := r * 2 else
60102: LD_ADDR_VAR 0 7
60106: PUSH
60107: LD_VAR 0 7
60111: PUSH
60112: LD_INT 2
60114: MUL
60115: ST_TO_ADDR
60116: GO 60144
// if amount > max then
60118: LD_VAR 0 9
60122: PUSH
60123: LD_VAR 0 4
60127: GREATER
60128: IFFALSE 60144
// r := r / 2 ;
60130: LD_ADDR_VAR 0 7
60134: PUSH
60135: LD_VAR 0 7
60139: PUSH
60140: LD_INT 2
60142: DIVREAL
60143: ST_TO_ADDR
// time := time / r ;
60144: LD_ADDR_VAR 0 8
60148: PUSH
60149: LD_VAR 0 8
60153: PUSH
60154: LD_VAR 0 7
60158: DIVREAL
60159: ST_TO_ADDR
// if time < 0 then
60160: LD_VAR 0 8
60164: PUSH
60165: LD_INT 0
60167: LESS
60168: IFFALSE 60185
// time := time * - 1 ;
60170: LD_ADDR_VAR 0 8
60174: PUSH
60175: LD_VAR 0 8
60179: PUSH
60180: LD_INT 1
60182: NEG
60183: MUL
60184: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
60185: LD_VAR 0 8
60189: PUSH
60190: LD_INT 35
60192: PPUSH
60193: LD_INT 875
60195: PPUSH
60196: CALL_OW 12
60200: PLUS
60201: PPUSH
60202: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
60206: LD_INT 1
60208: PPUSH
60209: LD_INT 5
60211: PPUSH
60212: CALL_OW 12
60216: PPUSH
60217: LD_VAR 0 1
60221: PPUSH
60222: LD_INT 1
60224: PPUSH
60225: CALL_OW 55
// end ;
60229: GO 60042
// end ;
60231: LD_VAR 0 5
60235: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
60236: LD_INT 0
60238: PPUSH
60239: PPUSH
60240: PPUSH
60241: PPUSH
60242: PPUSH
60243: PPUSH
60244: PPUSH
60245: PPUSH
// if not turrets or not factories then
60246: LD_VAR 0 1
60250: NOT
60251: PUSH
60252: LD_VAR 0 2
60256: NOT
60257: OR
60258: IFFALSE 60262
// exit ;
60260: GO 60569
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
60262: LD_ADDR_VAR 0 10
60266: PUSH
60267: LD_INT 5
60269: PUSH
60270: LD_INT 6
60272: PUSH
60273: EMPTY
60274: LIST
60275: LIST
60276: PUSH
60277: LD_INT 2
60279: PUSH
60280: LD_INT 4
60282: PUSH
60283: EMPTY
60284: LIST
60285: LIST
60286: PUSH
60287: LD_INT 3
60289: PUSH
60290: LD_INT 5
60292: PUSH
60293: EMPTY
60294: LIST
60295: LIST
60296: PUSH
60297: EMPTY
60298: LIST
60299: LIST
60300: LIST
60301: PUSH
60302: LD_INT 24
60304: PUSH
60305: LD_INT 25
60307: PUSH
60308: EMPTY
60309: LIST
60310: LIST
60311: PUSH
60312: LD_INT 23
60314: PUSH
60315: LD_INT 27
60317: PUSH
60318: EMPTY
60319: LIST
60320: LIST
60321: PUSH
60322: EMPTY
60323: LIST
60324: LIST
60325: PUSH
60326: LD_INT 42
60328: PUSH
60329: LD_INT 43
60331: PUSH
60332: EMPTY
60333: LIST
60334: LIST
60335: PUSH
60336: LD_INT 44
60338: PUSH
60339: LD_INT 46
60341: PUSH
60342: EMPTY
60343: LIST
60344: LIST
60345: PUSH
60346: LD_INT 45
60348: PUSH
60349: LD_INT 47
60351: PUSH
60352: EMPTY
60353: LIST
60354: LIST
60355: PUSH
60356: EMPTY
60357: LIST
60358: LIST
60359: LIST
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: LIST
60365: ST_TO_ADDR
// result := [ ] ;
60366: LD_ADDR_VAR 0 3
60370: PUSH
60371: EMPTY
60372: ST_TO_ADDR
// for i in turrets do
60373: LD_ADDR_VAR 0 4
60377: PUSH
60378: LD_VAR 0 1
60382: PUSH
60383: FOR_IN
60384: IFFALSE 60567
// begin nat := GetNation ( i ) ;
60386: LD_ADDR_VAR 0 7
60390: PUSH
60391: LD_VAR 0 4
60395: PPUSH
60396: CALL_OW 248
60400: ST_TO_ADDR
// weapon := 0 ;
60401: LD_ADDR_VAR 0 8
60405: PUSH
60406: LD_INT 0
60408: ST_TO_ADDR
// if not nat then
60409: LD_VAR 0 7
60413: NOT
60414: IFFALSE 60418
// continue ;
60416: GO 60383
// for j in list [ nat ] do
60418: LD_ADDR_VAR 0 5
60422: PUSH
60423: LD_VAR 0 10
60427: PUSH
60428: LD_VAR 0 7
60432: ARRAY
60433: PUSH
60434: FOR_IN
60435: IFFALSE 60476
// if GetBWeapon ( i ) = j [ 1 ] then
60437: LD_VAR 0 4
60441: PPUSH
60442: CALL_OW 269
60446: PUSH
60447: LD_VAR 0 5
60451: PUSH
60452: LD_INT 1
60454: ARRAY
60455: EQUAL
60456: IFFALSE 60474
// begin weapon := j [ 2 ] ;
60458: LD_ADDR_VAR 0 8
60462: PUSH
60463: LD_VAR 0 5
60467: PUSH
60468: LD_INT 2
60470: ARRAY
60471: ST_TO_ADDR
// break ;
60472: GO 60476
// end ;
60474: GO 60434
60476: POP
60477: POP
// if not weapon then
60478: LD_VAR 0 8
60482: NOT
60483: IFFALSE 60487
// continue ;
60485: GO 60383
// for k in factories do
60487: LD_ADDR_VAR 0 6
60491: PUSH
60492: LD_VAR 0 2
60496: PUSH
60497: FOR_IN
60498: IFFALSE 60563
// begin weapons := AvailableWeaponList ( k ) ;
60500: LD_ADDR_VAR 0 9
60504: PUSH
60505: LD_VAR 0 6
60509: PPUSH
60510: CALL_OW 478
60514: ST_TO_ADDR
// if not weapons then
60515: LD_VAR 0 9
60519: NOT
60520: IFFALSE 60524
// continue ;
60522: GO 60497
// if weapon in weapons then
60524: LD_VAR 0 8
60528: PUSH
60529: LD_VAR 0 9
60533: IN
60534: IFFALSE 60561
// begin result := [ i , weapon ] ;
60536: LD_ADDR_VAR 0 3
60540: PUSH
60541: LD_VAR 0 4
60545: PUSH
60546: LD_VAR 0 8
60550: PUSH
60551: EMPTY
60552: LIST
60553: LIST
60554: ST_TO_ADDR
// exit ;
60555: POP
60556: POP
60557: POP
60558: POP
60559: GO 60569
// end ; end ;
60561: GO 60497
60563: POP
60564: POP
// end ;
60565: GO 60383
60567: POP
60568: POP
// end ;
60569: LD_VAR 0 3
60573: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
60574: LD_INT 0
60576: PPUSH
// if not side or side > 8 then
60577: LD_VAR 0 3
60581: NOT
60582: PUSH
60583: LD_VAR 0 3
60587: PUSH
60588: LD_INT 8
60590: GREATER
60591: OR
60592: IFFALSE 60596
// exit ;
60594: GO 60655
// if not range then
60596: LD_VAR 0 4
60600: NOT
60601: IFFALSE 60612
// range := - 12 ;
60603: LD_ADDR_VAR 0 4
60607: PUSH
60608: LD_INT 12
60610: NEG
60611: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
60612: LD_VAR 0 1
60616: PPUSH
60617: LD_VAR 0 2
60621: PPUSH
60622: LD_VAR 0 3
60626: PPUSH
60627: LD_VAR 0 4
60631: PPUSH
60632: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
60636: LD_VAR 0 1
60640: PPUSH
60641: LD_VAR 0 2
60645: PPUSH
60646: LD_VAR 0 3
60650: PPUSH
60651: CALL_OW 331
// end ;
60655: LD_VAR 0 5
60659: RET
// export function Video ( mode ) ; begin
60660: LD_INT 0
60662: PPUSH
// ingame_video = mode ;
60663: LD_ADDR_OWVAR 52
60667: PUSH
60668: LD_VAR 0 1
60672: ST_TO_ADDR
// interface_hidden = mode ;
60673: LD_ADDR_OWVAR 54
60677: PUSH
60678: LD_VAR 0 1
60682: ST_TO_ADDR
// end ;
60683: LD_VAR 0 2
60687: RET
// export function Join ( array , element ) ; begin
60688: LD_INT 0
60690: PPUSH
// result := Replace ( array , array + 1 , element ) ;
60691: LD_ADDR_VAR 0 3
60695: PUSH
60696: LD_VAR 0 1
60700: PPUSH
60701: LD_VAR 0 1
60705: PUSH
60706: LD_INT 1
60708: PLUS
60709: PPUSH
60710: LD_VAR 0 2
60714: PPUSH
60715: CALL_OW 1
60719: ST_TO_ADDR
// end ;
60720: LD_VAR 0 3
60724: RET
// export function JoinUnion ( array , element ) ; begin
60725: LD_INT 0
60727: PPUSH
// result := array union element ;
60728: LD_ADDR_VAR 0 3
60732: PUSH
60733: LD_VAR 0 1
60737: PUSH
60738: LD_VAR 0 2
60742: UNION
60743: ST_TO_ADDR
// end ;
60744: LD_VAR 0 3
60748: RET
// export function GetBehemoths ( side ) ; begin
60749: LD_INT 0
60751: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
60752: LD_ADDR_VAR 0 2
60756: PUSH
60757: LD_INT 22
60759: PUSH
60760: LD_VAR 0 1
60764: PUSH
60765: EMPTY
60766: LIST
60767: LIST
60768: PUSH
60769: LD_INT 31
60771: PUSH
60772: LD_INT 25
60774: PUSH
60775: EMPTY
60776: LIST
60777: LIST
60778: PUSH
60779: EMPTY
60780: LIST
60781: LIST
60782: PPUSH
60783: CALL_OW 69
60787: ST_TO_ADDR
// end ;
60788: LD_VAR 0 2
60792: RET
// export function Shuffle ( array ) ; var i , index ; begin
60793: LD_INT 0
60795: PPUSH
60796: PPUSH
60797: PPUSH
// result := [ ] ;
60798: LD_ADDR_VAR 0 2
60802: PUSH
60803: EMPTY
60804: ST_TO_ADDR
// if not array then
60805: LD_VAR 0 1
60809: NOT
60810: IFFALSE 60814
// exit ;
60812: GO 60913
// Randomize ;
60814: CALL_OW 10
// for i = array downto 1 do
60818: LD_ADDR_VAR 0 3
60822: PUSH
60823: DOUBLE
60824: LD_VAR 0 1
60828: INC
60829: ST_TO_ADDR
60830: LD_INT 1
60832: PUSH
60833: FOR_DOWNTO
60834: IFFALSE 60911
// begin index := rand ( 1 , array ) ;
60836: LD_ADDR_VAR 0 4
60840: PUSH
60841: LD_INT 1
60843: PPUSH
60844: LD_VAR 0 1
60848: PPUSH
60849: CALL_OW 12
60853: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
60854: LD_ADDR_VAR 0 2
60858: PUSH
60859: LD_VAR 0 2
60863: PPUSH
60864: LD_VAR 0 2
60868: PUSH
60869: LD_INT 1
60871: PLUS
60872: PPUSH
60873: LD_VAR 0 1
60877: PUSH
60878: LD_VAR 0 4
60882: ARRAY
60883: PPUSH
60884: CALL_OW 2
60888: ST_TO_ADDR
// array := Delete ( array , index ) ;
60889: LD_ADDR_VAR 0 1
60893: PUSH
60894: LD_VAR 0 1
60898: PPUSH
60899: LD_VAR 0 4
60903: PPUSH
60904: CALL_OW 3
60908: ST_TO_ADDR
// end ;
60909: GO 60833
60911: POP
60912: POP
// end ;
60913: LD_VAR 0 2
60917: RET
// export function GetBaseMaterials ( base ) ; begin
60918: LD_INT 0
60920: PPUSH
// result := [ 0 , 0 , 0 ] ;
60921: LD_ADDR_VAR 0 2
60925: PUSH
60926: LD_INT 0
60928: PUSH
60929: LD_INT 0
60931: PUSH
60932: LD_INT 0
60934: PUSH
60935: EMPTY
60936: LIST
60937: LIST
60938: LIST
60939: ST_TO_ADDR
// if not base then
60940: LD_VAR 0 1
60944: NOT
60945: IFFALSE 60949
// exit ;
60947: GO 60998
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
60949: LD_ADDR_VAR 0 2
60953: PUSH
60954: LD_VAR 0 1
60958: PPUSH
60959: LD_INT 1
60961: PPUSH
60962: CALL_OW 275
60966: PUSH
60967: LD_VAR 0 1
60971: PPUSH
60972: LD_INT 2
60974: PPUSH
60975: CALL_OW 275
60979: PUSH
60980: LD_VAR 0 1
60984: PPUSH
60985: LD_INT 3
60987: PPUSH
60988: CALL_OW 275
60992: PUSH
60993: EMPTY
60994: LIST
60995: LIST
60996: LIST
60997: ST_TO_ADDR
// end ;
60998: LD_VAR 0 2
61002: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
61003: LD_INT 0
61005: PPUSH
61006: PPUSH
// result := array ;
61007: LD_ADDR_VAR 0 3
61011: PUSH
61012: LD_VAR 0 1
61016: ST_TO_ADDR
// if size >= result then
61017: LD_VAR 0 2
61021: PUSH
61022: LD_VAR 0 3
61026: GREATEREQUAL
61027: IFFALSE 61031
// exit ;
61029: GO 61081
// if size then
61031: LD_VAR 0 2
61035: IFFALSE 61081
// for i := array downto size do
61037: LD_ADDR_VAR 0 4
61041: PUSH
61042: DOUBLE
61043: LD_VAR 0 1
61047: INC
61048: ST_TO_ADDR
61049: LD_VAR 0 2
61053: PUSH
61054: FOR_DOWNTO
61055: IFFALSE 61079
// result := Delete ( result , result ) ;
61057: LD_ADDR_VAR 0 3
61061: PUSH
61062: LD_VAR 0 3
61066: PPUSH
61067: LD_VAR 0 3
61071: PPUSH
61072: CALL_OW 3
61076: ST_TO_ADDR
61077: GO 61054
61079: POP
61080: POP
// end ;
61081: LD_VAR 0 3
61085: RET
// export function ComExit ( unit ) ; var tmp ; begin
61086: LD_INT 0
61088: PPUSH
61089: PPUSH
// if not IsInUnit ( unit ) then
61090: LD_VAR 0 1
61094: PPUSH
61095: CALL_OW 310
61099: NOT
61100: IFFALSE 61104
// exit ;
61102: GO 61164
// tmp := IsInUnit ( unit ) ;
61104: LD_ADDR_VAR 0 3
61108: PUSH
61109: LD_VAR 0 1
61113: PPUSH
61114: CALL_OW 310
61118: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
61119: LD_VAR 0 3
61123: PPUSH
61124: CALL_OW 247
61128: PUSH
61129: LD_INT 2
61131: EQUAL
61132: IFFALSE 61145
// ComExitVehicle ( unit ) else
61134: LD_VAR 0 1
61138: PPUSH
61139: CALL_OW 121
61143: GO 61154
// ComExitBuilding ( unit ) ;
61145: LD_VAR 0 1
61149: PPUSH
61150: CALL_OW 122
// result := tmp ;
61154: LD_ADDR_VAR 0 2
61158: PUSH
61159: LD_VAR 0 3
61163: ST_TO_ADDR
// end ;
61164: LD_VAR 0 2
61168: RET
// export function ComExitAll ( units ) ; var i ; begin
61169: LD_INT 0
61171: PPUSH
61172: PPUSH
// if not units then
61173: LD_VAR 0 1
61177: NOT
61178: IFFALSE 61182
// exit ;
61180: GO 61208
// for i in units do
61182: LD_ADDR_VAR 0 3
61186: PUSH
61187: LD_VAR 0 1
61191: PUSH
61192: FOR_IN
61193: IFFALSE 61206
// ComExit ( i ) ;
61195: LD_VAR 0 3
61199: PPUSH
61200: CALL 61086 0 1
61204: GO 61192
61206: POP
61207: POP
// end ;
61208: LD_VAR 0 2
61212: RET
// export function ResetHc ; begin
61213: LD_INT 0
61215: PPUSH
// InitHc ;
61216: CALL_OW 19
// hc_importance := 0 ;
61220: LD_ADDR_OWVAR 32
61224: PUSH
61225: LD_INT 0
61227: ST_TO_ADDR
// end ;
61228: LD_VAR 0 1
61232: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
61233: LD_INT 0
61235: PPUSH
61236: PPUSH
61237: PPUSH
// _x := ( x1 + x2 ) div 2 ;
61238: LD_ADDR_VAR 0 6
61242: PUSH
61243: LD_VAR 0 1
61247: PUSH
61248: LD_VAR 0 3
61252: PLUS
61253: PUSH
61254: LD_INT 2
61256: DIV
61257: ST_TO_ADDR
// if _x < 0 then
61258: LD_VAR 0 6
61262: PUSH
61263: LD_INT 0
61265: LESS
61266: IFFALSE 61283
// _x := _x * - 1 ;
61268: LD_ADDR_VAR 0 6
61272: PUSH
61273: LD_VAR 0 6
61277: PUSH
61278: LD_INT 1
61280: NEG
61281: MUL
61282: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
61283: LD_ADDR_VAR 0 7
61287: PUSH
61288: LD_VAR 0 2
61292: PUSH
61293: LD_VAR 0 4
61297: PLUS
61298: PUSH
61299: LD_INT 2
61301: DIV
61302: ST_TO_ADDR
// if _y < 0 then
61303: LD_VAR 0 7
61307: PUSH
61308: LD_INT 0
61310: LESS
61311: IFFALSE 61328
// _y := _y * - 1 ;
61313: LD_ADDR_VAR 0 7
61317: PUSH
61318: LD_VAR 0 7
61322: PUSH
61323: LD_INT 1
61325: NEG
61326: MUL
61327: ST_TO_ADDR
// result := [ _x , _y ] ;
61328: LD_ADDR_VAR 0 5
61332: PUSH
61333: LD_VAR 0 6
61337: PUSH
61338: LD_VAR 0 7
61342: PUSH
61343: EMPTY
61344: LIST
61345: LIST
61346: ST_TO_ADDR
// end ;
61347: LD_VAR 0 5
61351: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
61352: LD_INT 0
61354: PPUSH
61355: PPUSH
61356: PPUSH
61357: PPUSH
// task := GetTaskList ( unit ) ;
61358: LD_ADDR_VAR 0 7
61362: PUSH
61363: LD_VAR 0 1
61367: PPUSH
61368: CALL_OW 437
61372: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
61373: LD_VAR 0 7
61377: NOT
61378: PUSH
61379: LD_VAR 0 1
61383: PPUSH
61384: LD_VAR 0 2
61388: PPUSH
61389: CALL_OW 308
61393: NOT
61394: AND
61395: IFFALSE 61399
// exit ;
61397: GO 61517
// if IsInArea ( unit , area ) then
61399: LD_VAR 0 1
61403: PPUSH
61404: LD_VAR 0 2
61408: PPUSH
61409: CALL_OW 308
61413: IFFALSE 61431
// begin ComMoveToArea ( unit , goAway ) ;
61415: LD_VAR 0 1
61419: PPUSH
61420: LD_VAR 0 3
61424: PPUSH
61425: CALL_OW 113
// exit ;
61429: GO 61517
// end ; if task [ 1 ] [ 1 ] <> M then
61431: LD_VAR 0 7
61435: PUSH
61436: LD_INT 1
61438: ARRAY
61439: PUSH
61440: LD_INT 1
61442: ARRAY
61443: PUSH
61444: LD_STRING M
61446: NONEQUAL
61447: IFFALSE 61451
// exit ;
61449: GO 61517
// x := task [ 1 ] [ 2 ] ;
61451: LD_ADDR_VAR 0 5
61455: PUSH
61456: LD_VAR 0 7
61460: PUSH
61461: LD_INT 1
61463: ARRAY
61464: PUSH
61465: LD_INT 2
61467: ARRAY
61468: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
61469: LD_ADDR_VAR 0 6
61473: PUSH
61474: LD_VAR 0 7
61478: PUSH
61479: LD_INT 1
61481: ARRAY
61482: PUSH
61483: LD_INT 3
61485: ARRAY
61486: ST_TO_ADDR
// if InArea ( x , y , area ) then
61487: LD_VAR 0 5
61491: PPUSH
61492: LD_VAR 0 6
61496: PPUSH
61497: LD_VAR 0 2
61501: PPUSH
61502: CALL_OW 309
61506: IFFALSE 61517
// ComStop ( unit ) ;
61508: LD_VAR 0 1
61512: PPUSH
61513: CALL_OW 141
// end ;
61517: LD_VAR 0 4
61521: RET
// export function Abs ( value ) ; begin
61522: LD_INT 0
61524: PPUSH
// result := value ;
61525: LD_ADDR_VAR 0 2
61529: PUSH
61530: LD_VAR 0 1
61534: ST_TO_ADDR
// if value < 0 then
61535: LD_VAR 0 1
61539: PUSH
61540: LD_INT 0
61542: LESS
61543: IFFALSE 61560
// result := value * - 1 ;
61545: LD_ADDR_VAR 0 2
61549: PUSH
61550: LD_VAR 0 1
61554: PUSH
61555: LD_INT 1
61557: NEG
61558: MUL
61559: ST_TO_ADDR
// end ;
61560: LD_VAR 0 2
61564: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
61565: LD_INT 0
61567: PPUSH
61568: PPUSH
61569: PPUSH
61570: PPUSH
61571: PPUSH
61572: PPUSH
61573: PPUSH
61574: PPUSH
// if not unit or not building then
61575: LD_VAR 0 1
61579: NOT
61580: PUSH
61581: LD_VAR 0 2
61585: NOT
61586: OR
61587: IFFALSE 61591
// exit ;
61589: GO 61817
// x := GetX ( building ) ;
61591: LD_ADDR_VAR 0 4
61595: PUSH
61596: LD_VAR 0 2
61600: PPUSH
61601: CALL_OW 250
61605: ST_TO_ADDR
// y := GetY ( building ) ;
61606: LD_ADDR_VAR 0 6
61610: PUSH
61611: LD_VAR 0 2
61615: PPUSH
61616: CALL_OW 251
61620: ST_TO_ADDR
// d := GetDir ( building ) ;
61621: LD_ADDR_VAR 0 8
61625: PUSH
61626: LD_VAR 0 2
61630: PPUSH
61631: CALL_OW 254
61635: ST_TO_ADDR
// r := 4 ;
61636: LD_ADDR_VAR 0 9
61640: PUSH
61641: LD_INT 4
61643: ST_TO_ADDR
// for i := 1 to 5 do
61644: LD_ADDR_VAR 0 10
61648: PUSH
61649: DOUBLE
61650: LD_INT 1
61652: DEC
61653: ST_TO_ADDR
61654: LD_INT 5
61656: PUSH
61657: FOR_TO
61658: IFFALSE 61815
// begin _x := ShiftX ( x , d , r + i ) ;
61660: LD_ADDR_VAR 0 5
61664: PUSH
61665: LD_VAR 0 4
61669: PPUSH
61670: LD_VAR 0 8
61674: PPUSH
61675: LD_VAR 0 9
61679: PUSH
61680: LD_VAR 0 10
61684: PLUS
61685: PPUSH
61686: CALL_OW 272
61690: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
61691: LD_ADDR_VAR 0 7
61695: PUSH
61696: LD_VAR 0 6
61700: PPUSH
61701: LD_VAR 0 8
61705: PPUSH
61706: LD_VAR 0 9
61710: PUSH
61711: LD_VAR 0 10
61715: PLUS
61716: PPUSH
61717: CALL_OW 273
61721: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
61722: LD_VAR 0 5
61726: PPUSH
61727: LD_VAR 0 7
61731: PPUSH
61732: CALL_OW 488
61736: PUSH
61737: LD_VAR 0 5
61741: PPUSH
61742: LD_VAR 0 7
61746: PPUSH
61747: CALL_OW 428
61751: PPUSH
61752: CALL_OW 247
61756: PUSH
61757: LD_INT 3
61759: PUSH
61760: LD_INT 2
61762: PUSH
61763: EMPTY
61764: LIST
61765: LIST
61766: IN
61767: NOT
61768: AND
61769: IFFALSE 61813
// begin ComMoveXY ( unit , _x , _y ) ;
61771: LD_VAR 0 1
61775: PPUSH
61776: LD_VAR 0 5
61780: PPUSH
61781: LD_VAR 0 7
61785: PPUSH
61786: CALL_OW 111
// result := [ _x , _y ] ;
61790: LD_ADDR_VAR 0 3
61794: PUSH
61795: LD_VAR 0 5
61799: PUSH
61800: LD_VAR 0 7
61804: PUSH
61805: EMPTY
61806: LIST
61807: LIST
61808: ST_TO_ADDR
// exit ;
61809: POP
61810: POP
61811: GO 61817
// end ; end ;
61813: GO 61657
61815: POP
61816: POP
// end ;
61817: LD_VAR 0 3
61821: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
61822: LD_INT 0
61824: PPUSH
61825: PPUSH
61826: PPUSH
// result := 0 ;
61827: LD_ADDR_VAR 0 3
61831: PUSH
61832: LD_INT 0
61834: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
61835: LD_VAR 0 1
61839: PUSH
61840: LD_INT 0
61842: LESS
61843: PUSH
61844: LD_VAR 0 1
61848: PUSH
61849: LD_INT 8
61851: GREATER
61852: OR
61853: PUSH
61854: LD_VAR 0 2
61858: PUSH
61859: LD_INT 0
61861: LESS
61862: OR
61863: PUSH
61864: LD_VAR 0 2
61868: PUSH
61869: LD_INT 8
61871: GREATER
61872: OR
61873: IFFALSE 61877
// exit ;
61875: GO 61952
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
61877: LD_ADDR_VAR 0 4
61881: PUSH
61882: LD_INT 22
61884: PUSH
61885: LD_VAR 0 2
61889: PUSH
61890: EMPTY
61891: LIST
61892: LIST
61893: PPUSH
61894: CALL_OW 69
61898: PUSH
61899: FOR_IN
61900: IFFALSE 61950
// begin un := UnitShoot ( i ) ;
61902: LD_ADDR_VAR 0 5
61906: PUSH
61907: LD_VAR 0 4
61911: PPUSH
61912: CALL_OW 504
61916: ST_TO_ADDR
// if GetSide ( un ) = side1 then
61917: LD_VAR 0 5
61921: PPUSH
61922: CALL_OW 255
61926: PUSH
61927: LD_VAR 0 1
61931: EQUAL
61932: IFFALSE 61948
// begin result := un ;
61934: LD_ADDR_VAR 0 3
61938: PUSH
61939: LD_VAR 0 5
61943: ST_TO_ADDR
// exit ;
61944: POP
61945: POP
61946: GO 61952
// end ; end ;
61948: GO 61899
61950: POP
61951: POP
// end ;
61952: LD_VAR 0 3
61956: RET
// export function GetCargoBay ( units ) ; begin
61957: LD_INT 0
61959: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
61960: LD_ADDR_VAR 0 2
61964: PUSH
61965: LD_VAR 0 1
61969: PPUSH
61970: LD_INT 2
61972: PUSH
61973: LD_INT 34
61975: PUSH
61976: LD_INT 12
61978: PUSH
61979: EMPTY
61980: LIST
61981: LIST
61982: PUSH
61983: LD_INT 34
61985: PUSH
61986: LD_INT 51
61988: PUSH
61989: EMPTY
61990: LIST
61991: LIST
61992: PUSH
61993: LD_INT 34
61995: PUSH
61996: LD_INT 32
61998: PUSH
61999: EMPTY
62000: LIST
62001: LIST
62002: PUSH
62003: LD_INT 34
62005: PUSH
62006: LD_INT 89
62008: PUSH
62009: EMPTY
62010: LIST
62011: LIST
62012: PUSH
62013: EMPTY
62014: LIST
62015: LIST
62016: LIST
62017: LIST
62018: LIST
62019: PPUSH
62020: CALL_OW 72
62024: ST_TO_ADDR
// end ;
62025: LD_VAR 0 2
62029: RET
// export function Negate ( value ) ; begin
62030: LD_INT 0
62032: PPUSH
// result := not value ;
62033: LD_ADDR_VAR 0 2
62037: PUSH
62038: LD_VAR 0 1
62042: NOT
62043: ST_TO_ADDR
// end ;
62044: LD_VAR 0 2
62048: RET
// export function Inc ( value ) ; begin
62049: LD_INT 0
62051: PPUSH
// result := value + 1 ;
62052: LD_ADDR_VAR 0 2
62056: PUSH
62057: LD_VAR 0 1
62061: PUSH
62062: LD_INT 1
62064: PLUS
62065: ST_TO_ADDR
// end ;
62066: LD_VAR 0 2
62070: RET
// export function Dec ( value ) ; begin
62071: LD_INT 0
62073: PPUSH
// result := value - 1 ;
62074: LD_ADDR_VAR 0 2
62078: PUSH
62079: LD_VAR 0 1
62083: PUSH
62084: LD_INT 1
62086: MINUS
62087: ST_TO_ADDR
// end ;
62088: LD_VAR 0 2
62092: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
62093: LD_INT 0
62095: PPUSH
62096: PPUSH
62097: PPUSH
62098: PPUSH
62099: PPUSH
62100: PPUSH
62101: PPUSH
62102: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
62103: LD_VAR 0 1
62107: PPUSH
62108: LD_VAR 0 2
62112: PPUSH
62113: CALL_OW 488
62117: NOT
62118: PUSH
62119: LD_VAR 0 3
62123: PPUSH
62124: LD_VAR 0 4
62128: PPUSH
62129: CALL_OW 488
62133: NOT
62134: OR
62135: IFFALSE 62148
// begin result := - 1 ;
62137: LD_ADDR_VAR 0 5
62141: PUSH
62142: LD_INT 1
62144: NEG
62145: ST_TO_ADDR
// exit ;
62146: GO 62383
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
62148: LD_ADDR_VAR 0 12
62152: PUSH
62153: LD_VAR 0 1
62157: PPUSH
62158: LD_VAR 0 2
62162: PPUSH
62163: LD_VAR 0 3
62167: PPUSH
62168: LD_VAR 0 4
62172: PPUSH
62173: CALL 61233 0 4
62177: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
62178: LD_ADDR_VAR 0 11
62182: PUSH
62183: LD_VAR 0 1
62187: PPUSH
62188: LD_VAR 0 2
62192: PPUSH
62193: LD_VAR 0 12
62197: PUSH
62198: LD_INT 1
62200: ARRAY
62201: PPUSH
62202: LD_VAR 0 12
62206: PUSH
62207: LD_INT 2
62209: ARRAY
62210: PPUSH
62211: CALL_OW 298
62215: ST_TO_ADDR
// distance := 9999 ;
62216: LD_ADDR_VAR 0 10
62220: PUSH
62221: LD_INT 9999
62223: ST_TO_ADDR
// for i := 0 to 5 do
62224: LD_ADDR_VAR 0 6
62228: PUSH
62229: DOUBLE
62230: LD_INT 0
62232: DEC
62233: ST_TO_ADDR
62234: LD_INT 5
62236: PUSH
62237: FOR_TO
62238: IFFALSE 62381
// begin _x := ShiftX ( x1 , i , centerDist ) ;
62240: LD_ADDR_VAR 0 7
62244: PUSH
62245: LD_VAR 0 1
62249: PPUSH
62250: LD_VAR 0 6
62254: PPUSH
62255: LD_VAR 0 11
62259: PPUSH
62260: CALL_OW 272
62264: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
62265: LD_ADDR_VAR 0 8
62269: PUSH
62270: LD_VAR 0 2
62274: PPUSH
62275: LD_VAR 0 6
62279: PPUSH
62280: LD_VAR 0 11
62284: PPUSH
62285: CALL_OW 273
62289: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
62290: LD_VAR 0 7
62294: PPUSH
62295: LD_VAR 0 8
62299: PPUSH
62300: CALL_OW 488
62304: NOT
62305: IFFALSE 62309
// continue ;
62307: GO 62237
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
62309: LD_ADDR_VAR 0 9
62313: PUSH
62314: LD_VAR 0 12
62318: PUSH
62319: LD_INT 1
62321: ARRAY
62322: PPUSH
62323: LD_VAR 0 12
62327: PUSH
62328: LD_INT 2
62330: ARRAY
62331: PPUSH
62332: LD_VAR 0 7
62336: PPUSH
62337: LD_VAR 0 8
62341: PPUSH
62342: CALL_OW 298
62346: ST_TO_ADDR
// if tmp < distance then
62347: LD_VAR 0 9
62351: PUSH
62352: LD_VAR 0 10
62356: LESS
62357: IFFALSE 62379
// begin result := i ;
62359: LD_ADDR_VAR 0 5
62363: PUSH
62364: LD_VAR 0 6
62368: ST_TO_ADDR
// distance := tmp ;
62369: LD_ADDR_VAR 0 10
62373: PUSH
62374: LD_VAR 0 9
62378: ST_TO_ADDR
// end ; end ;
62379: GO 62237
62381: POP
62382: POP
// end ;
62383: LD_VAR 0 5
62387: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62388: LD_INT 0
62390: PPUSH
62391: PPUSH
// if not driver or not IsInUnit ( driver ) then
62392: LD_VAR 0 1
62396: NOT
62397: PUSH
62398: LD_VAR 0 1
62402: PPUSH
62403: CALL_OW 310
62407: NOT
62408: OR
62409: IFFALSE 62413
// exit ;
62411: GO 62503
// vehicle := IsInUnit ( driver ) ;
62413: LD_ADDR_VAR 0 3
62417: PUSH
62418: LD_VAR 0 1
62422: PPUSH
62423: CALL_OW 310
62427: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62428: LD_VAR 0 1
62432: PPUSH
62433: LD_STRING \
62435: PUSH
62436: LD_INT 0
62438: PUSH
62439: LD_INT 0
62441: PUSH
62442: LD_INT 0
62444: PUSH
62445: LD_INT 0
62447: PUSH
62448: LD_INT 0
62450: PUSH
62451: LD_INT 0
62453: PUSH
62454: EMPTY
62455: LIST
62456: LIST
62457: LIST
62458: LIST
62459: LIST
62460: LIST
62461: LIST
62462: PUSH
62463: LD_STRING E
62465: PUSH
62466: LD_INT 0
62468: PUSH
62469: LD_INT 0
62471: PUSH
62472: LD_VAR 0 3
62476: PUSH
62477: LD_INT 0
62479: PUSH
62480: LD_INT 0
62482: PUSH
62483: LD_INT 0
62485: PUSH
62486: EMPTY
62487: LIST
62488: LIST
62489: LIST
62490: LIST
62491: LIST
62492: LIST
62493: LIST
62494: PUSH
62495: EMPTY
62496: LIST
62497: LIST
62498: PPUSH
62499: CALL_OW 446
// end ;
62503: LD_VAR 0 2
62507: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62508: LD_INT 0
62510: PPUSH
62511: PPUSH
// if not driver or not IsInUnit ( driver ) then
62512: LD_VAR 0 1
62516: NOT
62517: PUSH
62518: LD_VAR 0 1
62522: PPUSH
62523: CALL_OW 310
62527: NOT
62528: OR
62529: IFFALSE 62533
// exit ;
62531: GO 62623
// vehicle := IsInUnit ( driver ) ;
62533: LD_ADDR_VAR 0 3
62537: PUSH
62538: LD_VAR 0 1
62542: PPUSH
62543: CALL_OW 310
62547: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62548: LD_VAR 0 1
62552: PPUSH
62553: LD_STRING \
62555: PUSH
62556: LD_INT 0
62558: PUSH
62559: LD_INT 0
62561: PUSH
62562: LD_INT 0
62564: PUSH
62565: LD_INT 0
62567: PUSH
62568: LD_INT 0
62570: PUSH
62571: LD_INT 0
62573: PUSH
62574: EMPTY
62575: LIST
62576: LIST
62577: LIST
62578: LIST
62579: LIST
62580: LIST
62581: LIST
62582: PUSH
62583: LD_STRING E
62585: PUSH
62586: LD_INT 0
62588: PUSH
62589: LD_INT 0
62591: PUSH
62592: LD_VAR 0 3
62596: PUSH
62597: LD_INT 0
62599: PUSH
62600: LD_INT 0
62602: PUSH
62603: LD_INT 0
62605: PUSH
62606: EMPTY
62607: LIST
62608: LIST
62609: LIST
62610: LIST
62611: LIST
62612: LIST
62613: LIST
62614: PUSH
62615: EMPTY
62616: LIST
62617: LIST
62618: PPUSH
62619: CALL_OW 447
// end ;
62623: LD_VAR 0 2
62627: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
62628: LD_INT 0
62630: PPUSH
62631: PPUSH
62632: PPUSH
// tmp := [ ] ;
62633: LD_ADDR_VAR 0 5
62637: PUSH
62638: EMPTY
62639: ST_TO_ADDR
// for i in units do
62640: LD_ADDR_VAR 0 4
62644: PUSH
62645: LD_VAR 0 1
62649: PUSH
62650: FOR_IN
62651: IFFALSE 62689
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
62653: LD_ADDR_VAR 0 5
62657: PUSH
62658: LD_VAR 0 5
62662: PPUSH
62663: LD_VAR 0 5
62667: PUSH
62668: LD_INT 1
62670: PLUS
62671: PPUSH
62672: LD_VAR 0 4
62676: PPUSH
62677: CALL_OW 256
62681: PPUSH
62682: CALL_OW 2
62686: ST_TO_ADDR
62687: GO 62650
62689: POP
62690: POP
// if not tmp then
62691: LD_VAR 0 5
62695: NOT
62696: IFFALSE 62700
// exit ;
62698: GO 62748
// if asc then
62700: LD_VAR 0 2
62704: IFFALSE 62728
// result := SortListByListAsc ( units , tmp ) else
62706: LD_ADDR_VAR 0 3
62710: PUSH
62711: LD_VAR 0 1
62715: PPUSH
62716: LD_VAR 0 5
62720: PPUSH
62721: CALL_OW 76
62725: ST_TO_ADDR
62726: GO 62748
// result := SortListByListDesc ( units , tmp ) ;
62728: LD_ADDR_VAR 0 3
62732: PUSH
62733: LD_VAR 0 1
62737: PPUSH
62738: LD_VAR 0 5
62742: PPUSH
62743: CALL_OW 77
62747: ST_TO_ADDR
// end ;
62748: LD_VAR 0 3
62752: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
62753: LD_INT 0
62755: PPUSH
62756: PPUSH
// task := GetTaskList ( mech ) ;
62757: LD_ADDR_VAR 0 4
62761: PUSH
62762: LD_VAR 0 1
62766: PPUSH
62767: CALL_OW 437
62771: ST_TO_ADDR
// if not task then
62772: LD_VAR 0 4
62776: NOT
62777: IFFALSE 62781
// exit ;
62779: GO 62823
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
62781: LD_ADDR_VAR 0 3
62785: PUSH
62786: LD_VAR 0 4
62790: PUSH
62791: LD_INT 1
62793: ARRAY
62794: PUSH
62795: LD_INT 1
62797: ARRAY
62798: PUSH
62799: LD_STRING r
62801: EQUAL
62802: PUSH
62803: LD_VAR 0 4
62807: PUSH
62808: LD_INT 1
62810: ARRAY
62811: PUSH
62812: LD_INT 4
62814: ARRAY
62815: PUSH
62816: LD_VAR 0 2
62820: EQUAL
62821: AND
62822: ST_TO_ADDR
// end ;
62823: LD_VAR 0 3
62827: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
62828: LD_INT 0
62830: PPUSH
// SetDir ( unit , d ) ;
62831: LD_VAR 0 1
62835: PPUSH
62836: LD_VAR 0 4
62840: PPUSH
62841: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
62845: LD_VAR 0 1
62849: PPUSH
62850: LD_VAR 0 2
62854: PPUSH
62855: LD_VAR 0 3
62859: PPUSH
62860: LD_VAR 0 5
62864: PPUSH
62865: CALL_OW 48
// end ;
62869: LD_VAR 0 6
62873: RET
// export function ToNaturalNumber ( number ) ; begin
62874: LD_INT 0
62876: PPUSH
// result := number div 1 ;
62877: LD_ADDR_VAR 0 2
62881: PUSH
62882: LD_VAR 0 1
62886: PUSH
62887: LD_INT 1
62889: DIV
62890: ST_TO_ADDR
// if number < 0 then
62891: LD_VAR 0 1
62895: PUSH
62896: LD_INT 0
62898: LESS
62899: IFFALSE 62909
// result := 0 ;
62901: LD_ADDR_VAR 0 2
62905: PUSH
62906: LD_INT 0
62908: ST_TO_ADDR
// end ;
62909: LD_VAR 0 2
62913: RET
// export function SortByClass ( units , class ) ; var un ; begin
62914: LD_INT 0
62916: PPUSH
62917: PPUSH
// if not units or not class then
62918: LD_VAR 0 1
62922: NOT
62923: PUSH
62924: LD_VAR 0 2
62928: NOT
62929: OR
62930: IFFALSE 62934
// exit ;
62932: GO 63029
// result := [ ] ;
62934: LD_ADDR_VAR 0 3
62938: PUSH
62939: EMPTY
62940: ST_TO_ADDR
// for un in units do
62941: LD_ADDR_VAR 0 4
62945: PUSH
62946: LD_VAR 0 1
62950: PUSH
62951: FOR_IN
62952: IFFALSE 63027
// if GetClass ( un ) = class then
62954: LD_VAR 0 4
62958: PPUSH
62959: CALL_OW 257
62963: PUSH
62964: LD_VAR 0 2
62968: EQUAL
62969: IFFALSE 62996
// result := Insert ( result , 1 , un ) else
62971: LD_ADDR_VAR 0 3
62975: PUSH
62976: LD_VAR 0 3
62980: PPUSH
62981: LD_INT 1
62983: PPUSH
62984: LD_VAR 0 4
62988: PPUSH
62989: CALL_OW 2
62993: ST_TO_ADDR
62994: GO 63025
// result := Replace ( result , result + 1 , un ) ;
62996: LD_ADDR_VAR 0 3
63000: PUSH
63001: LD_VAR 0 3
63005: PPUSH
63006: LD_VAR 0 3
63010: PUSH
63011: LD_INT 1
63013: PLUS
63014: PPUSH
63015: LD_VAR 0 4
63019: PPUSH
63020: CALL_OW 1
63024: ST_TO_ADDR
63025: GO 62951
63027: POP
63028: POP
// end ;
63029: LD_VAR 0 3
63033: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
63034: LD_INT 0
63036: PPUSH
63037: PPUSH
63038: PPUSH
63039: PPUSH
63040: PPUSH
63041: PPUSH
63042: PPUSH
// result := [ ] ;
63043: LD_ADDR_VAR 0 4
63047: PUSH
63048: EMPTY
63049: ST_TO_ADDR
// if x - r < 0 then
63050: LD_VAR 0 1
63054: PUSH
63055: LD_VAR 0 3
63059: MINUS
63060: PUSH
63061: LD_INT 0
63063: LESS
63064: IFFALSE 63076
// min_x := 0 else
63066: LD_ADDR_VAR 0 8
63070: PUSH
63071: LD_INT 0
63073: ST_TO_ADDR
63074: GO 63092
// min_x := x - r ;
63076: LD_ADDR_VAR 0 8
63080: PUSH
63081: LD_VAR 0 1
63085: PUSH
63086: LD_VAR 0 3
63090: MINUS
63091: ST_TO_ADDR
// if y - r < 0 then
63092: LD_VAR 0 2
63096: PUSH
63097: LD_VAR 0 3
63101: MINUS
63102: PUSH
63103: LD_INT 0
63105: LESS
63106: IFFALSE 63118
// min_y := 0 else
63108: LD_ADDR_VAR 0 7
63112: PUSH
63113: LD_INT 0
63115: ST_TO_ADDR
63116: GO 63134
// min_y := y - r ;
63118: LD_ADDR_VAR 0 7
63122: PUSH
63123: LD_VAR 0 2
63127: PUSH
63128: LD_VAR 0 3
63132: MINUS
63133: ST_TO_ADDR
// max_x := x + r ;
63134: LD_ADDR_VAR 0 9
63138: PUSH
63139: LD_VAR 0 1
63143: PUSH
63144: LD_VAR 0 3
63148: PLUS
63149: ST_TO_ADDR
// max_y := y + r ;
63150: LD_ADDR_VAR 0 10
63154: PUSH
63155: LD_VAR 0 2
63159: PUSH
63160: LD_VAR 0 3
63164: PLUS
63165: ST_TO_ADDR
// for _x = min_x to max_x do
63166: LD_ADDR_VAR 0 5
63170: PUSH
63171: DOUBLE
63172: LD_VAR 0 8
63176: DEC
63177: ST_TO_ADDR
63178: LD_VAR 0 9
63182: PUSH
63183: FOR_TO
63184: IFFALSE 63285
// for _y = min_y to max_y do
63186: LD_ADDR_VAR 0 6
63190: PUSH
63191: DOUBLE
63192: LD_VAR 0 7
63196: DEC
63197: ST_TO_ADDR
63198: LD_VAR 0 10
63202: PUSH
63203: FOR_TO
63204: IFFALSE 63281
// begin if not ValidHex ( _x , _y ) then
63206: LD_VAR 0 5
63210: PPUSH
63211: LD_VAR 0 6
63215: PPUSH
63216: CALL_OW 488
63220: NOT
63221: IFFALSE 63225
// continue ;
63223: GO 63203
// if GetResourceTypeXY ( _x , _y ) then
63225: LD_VAR 0 5
63229: PPUSH
63230: LD_VAR 0 6
63234: PPUSH
63235: CALL_OW 283
63239: IFFALSE 63279
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
63241: LD_ADDR_VAR 0 4
63245: PUSH
63246: LD_VAR 0 4
63250: PPUSH
63251: LD_VAR 0 4
63255: PUSH
63256: LD_INT 1
63258: PLUS
63259: PPUSH
63260: LD_VAR 0 5
63264: PUSH
63265: LD_VAR 0 6
63269: PUSH
63270: EMPTY
63271: LIST
63272: LIST
63273: PPUSH
63274: CALL_OW 1
63278: ST_TO_ADDR
// end ;
63279: GO 63203
63281: POP
63282: POP
63283: GO 63183
63285: POP
63286: POP
// end ;
63287: LD_VAR 0 4
63291: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
63292: LD_INT 0
63294: PPUSH
63295: PPUSH
63296: PPUSH
63297: PPUSH
63298: PPUSH
63299: PPUSH
63300: PPUSH
63301: PPUSH
// if not units then
63302: LD_VAR 0 1
63306: NOT
63307: IFFALSE 63311
// exit ;
63309: GO 63835
// result := UnitFilter ( units , [ f_ok ] ) ;
63311: LD_ADDR_VAR 0 3
63315: PUSH
63316: LD_VAR 0 1
63320: PPUSH
63321: LD_INT 50
63323: PUSH
63324: EMPTY
63325: LIST
63326: PPUSH
63327: CALL_OW 72
63331: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
63332: LD_ADDR_VAR 0 8
63336: PUSH
63337: LD_VAR 0 1
63341: PUSH
63342: LD_INT 1
63344: ARRAY
63345: PPUSH
63346: CALL_OW 255
63350: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
63351: LD_ADDR_VAR 0 10
63355: PUSH
63356: LD_INT 29
63358: PUSH
63359: LD_INT 91
63361: PUSH
63362: LD_INT 49
63364: PUSH
63365: EMPTY
63366: LIST
63367: LIST
63368: LIST
63369: ST_TO_ADDR
// if not result then
63370: LD_VAR 0 3
63374: NOT
63375: IFFALSE 63379
// exit ;
63377: GO 63835
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
63379: LD_ADDR_VAR 0 5
63383: PUSH
63384: LD_INT 81
63386: PUSH
63387: LD_VAR 0 8
63391: PUSH
63392: EMPTY
63393: LIST
63394: LIST
63395: PPUSH
63396: CALL_OW 69
63400: ST_TO_ADDR
// for i in result do
63401: LD_ADDR_VAR 0 4
63405: PUSH
63406: LD_VAR 0 3
63410: PUSH
63411: FOR_IN
63412: IFFALSE 63833
// begin tag := GetTag ( i ) + 1 ;
63414: LD_ADDR_VAR 0 9
63418: PUSH
63419: LD_VAR 0 4
63423: PPUSH
63424: CALL_OW 110
63428: PUSH
63429: LD_INT 1
63431: PLUS
63432: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
63433: LD_ADDR_VAR 0 7
63437: PUSH
63438: LD_VAR 0 4
63442: PPUSH
63443: CALL_OW 250
63447: PPUSH
63448: LD_VAR 0 4
63452: PPUSH
63453: CALL_OW 251
63457: PPUSH
63458: LD_INT 6
63460: PPUSH
63461: CALL 63034 0 3
63465: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
63466: LD_VAR 0 4
63470: PPUSH
63471: CALL_OW 247
63475: PUSH
63476: LD_INT 2
63478: EQUAL
63479: PUSH
63480: LD_VAR 0 7
63484: AND
63485: PUSH
63486: LD_VAR 0 4
63490: PPUSH
63491: CALL_OW 264
63495: PUSH
63496: LD_VAR 0 10
63500: IN
63501: NOT
63502: AND
63503: IFFALSE 63542
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
63505: LD_VAR 0 4
63509: PPUSH
63510: LD_VAR 0 7
63514: PUSH
63515: LD_INT 1
63517: ARRAY
63518: PUSH
63519: LD_INT 1
63521: ARRAY
63522: PPUSH
63523: LD_VAR 0 7
63527: PUSH
63528: LD_INT 1
63530: ARRAY
63531: PUSH
63532: LD_INT 2
63534: ARRAY
63535: PPUSH
63536: CALL_OW 116
63540: GO 63831
// if path > tag then
63542: LD_VAR 0 2
63546: PUSH
63547: LD_VAR 0 9
63551: GREATER
63552: IFFALSE 63760
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
63554: LD_ADDR_VAR 0 6
63558: PUSH
63559: LD_VAR 0 5
63563: PPUSH
63564: LD_INT 91
63566: PUSH
63567: LD_VAR 0 4
63571: PUSH
63572: LD_INT 8
63574: PUSH
63575: EMPTY
63576: LIST
63577: LIST
63578: LIST
63579: PPUSH
63580: CALL_OW 72
63584: ST_TO_ADDR
// if nearEnemy then
63585: LD_VAR 0 6
63589: IFFALSE 63658
// begin if GetWeapon ( i ) = ru_time_lapser then
63591: LD_VAR 0 4
63595: PPUSH
63596: CALL_OW 264
63600: PUSH
63601: LD_INT 49
63603: EQUAL
63604: IFFALSE 63632
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
63606: LD_VAR 0 4
63610: PPUSH
63611: LD_VAR 0 6
63615: PPUSH
63616: LD_VAR 0 4
63620: PPUSH
63621: CALL_OW 74
63625: PPUSH
63626: CALL_OW 112
63630: GO 63656
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
63632: LD_VAR 0 4
63636: PPUSH
63637: LD_VAR 0 6
63641: PPUSH
63642: LD_VAR 0 4
63646: PPUSH
63647: CALL_OW 74
63651: PPUSH
63652: CALL_OW 115
// end else
63656: GO 63758
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
63658: LD_VAR 0 4
63662: PPUSH
63663: LD_VAR 0 2
63667: PUSH
63668: LD_VAR 0 9
63672: ARRAY
63673: PUSH
63674: LD_INT 1
63676: ARRAY
63677: PPUSH
63678: LD_VAR 0 2
63682: PUSH
63683: LD_VAR 0 9
63687: ARRAY
63688: PUSH
63689: LD_INT 2
63691: ARRAY
63692: PPUSH
63693: CALL_OW 297
63697: PUSH
63698: LD_INT 6
63700: GREATER
63701: IFFALSE 63744
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
63703: LD_VAR 0 4
63707: PPUSH
63708: LD_VAR 0 2
63712: PUSH
63713: LD_VAR 0 9
63717: ARRAY
63718: PUSH
63719: LD_INT 1
63721: ARRAY
63722: PPUSH
63723: LD_VAR 0 2
63727: PUSH
63728: LD_VAR 0 9
63732: ARRAY
63733: PUSH
63734: LD_INT 2
63736: ARRAY
63737: PPUSH
63738: CALL_OW 114
63742: GO 63758
// SetTag ( i , tag ) ;
63744: LD_VAR 0 4
63748: PPUSH
63749: LD_VAR 0 9
63753: PPUSH
63754: CALL_OW 109
// end else
63758: GO 63831
// if enemy then
63760: LD_VAR 0 5
63764: IFFALSE 63831
// begin if GetWeapon ( i ) = ru_time_lapser then
63766: LD_VAR 0 4
63770: PPUSH
63771: CALL_OW 264
63775: PUSH
63776: LD_INT 49
63778: EQUAL
63779: IFFALSE 63807
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
63781: LD_VAR 0 4
63785: PPUSH
63786: LD_VAR 0 5
63790: PPUSH
63791: LD_VAR 0 4
63795: PPUSH
63796: CALL_OW 74
63800: PPUSH
63801: CALL_OW 112
63805: GO 63831
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
63807: LD_VAR 0 4
63811: PPUSH
63812: LD_VAR 0 5
63816: PPUSH
63817: LD_VAR 0 4
63821: PPUSH
63822: CALL_OW 74
63826: PPUSH
63827: CALL_OW 115
// end ; end ;
63831: GO 63411
63833: POP
63834: POP
// end ;
63835: LD_VAR 0 3
63839: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
63840: LD_INT 0
63842: PPUSH
63843: PPUSH
63844: PPUSH
// if not unit or IsInUnit ( unit ) then
63845: LD_VAR 0 1
63849: NOT
63850: PUSH
63851: LD_VAR 0 1
63855: PPUSH
63856: CALL_OW 310
63860: OR
63861: IFFALSE 63865
// exit ;
63863: GO 63956
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
63865: LD_ADDR_VAR 0 4
63869: PUSH
63870: LD_VAR 0 1
63874: PPUSH
63875: CALL_OW 250
63879: PPUSH
63880: LD_VAR 0 2
63884: PPUSH
63885: LD_INT 1
63887: PPUSH
63888: CALL_OW 272
63892: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
63893: LD_ADDR_VAR 0 5
63897: PUSH
63898: LD_VAR 0 1
63902: PPUSH
63903: CALL_OW 251
63907: PPUSH
63908: LD_VAR 0 2
63912: PPUSH
63913: LD_INT 1
63915: PPUSH
63916: CALL_OW 273
63920: ST_TO_ADDR
// if ValidHex ( x , y ) then
63921: LD_VAR 0 4
63925: PPUSH
63926: LD_VAR 0 5
63930: PPUSH
63931: CALL_OW 488
63935: IFFALSE 63956
// ComTurnXY ( unit , x , y ) ;
63937: LD_VAR 0 1
63941: PPUSH
63942: LD_VAR 0 4
63946: PPUSH
63947: LD_VAR 0 5
63951: PPUSH
63952: CALL_OW 118
// end ;
63956: LD_VAR 0 3
63960: RET
// export function SeeUnits ( side , units ) ; var i ; begin
63961: LD_INT 0
63963: PPUSH
63964: PPUSH
// result := false ;
63965: LD_ADDR_VAR 0 3
63969: PUSH
63970: LD_INT 0
63972: ST_TO_ADDR
// if not units then
63973: LD_VAR 0 2
63977: NOT
63978: IFFALSE 63982
// exit ;
63980: GO 64027
// for i in units do
63982: LD_ADDR_VAR 0 4
63986: PUSH
63987: LD_VAR 0 2
63991: PUSH
63992: FOR_IN
63993: IFFALSE 64025
// if See ( side , i ) then
63995: LD_VAR 0 1
63999: PPUSH
64000: LD_VAR 0 4
64004: PPUSH
64005: CALL_OW 292
64009: IFFALSE 64023
// begin result := true ;
64011: LD_ADDR_VAR 0 3
64015: PUSH
64016: LD_INT 1
64018: ST_TO_ADDR
// exit ;
64019: POP
64020: POP
64021: GO 64027
// end ;
64023: GO 63992
64025: POP
64026: POP
// end ;
64027: LD_VAR 0 3
64031: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
64032: LD_INT 0
64034: PPUSH
64035: PPUSH
64036: PPUSH
64037: PPUSH
// if not unit or not points then
64038: LD_VAR 0 1
64042: NOT
64043: PUSH
64044: LD_VAR 0 2
64048: NOT
64049: OR
64050: IFFALSE 64054
// exit ;
64052: GO 64144
// dist := 99999 ;
64054: LD_ADDR_VAR 0 5
64058: PUSH
64059: LD_INT 99999
64061: ST_TO_ADDR
// for i in points do
64062: LD_ADDR_VAR 0 4
64066: PUSH
64067: LD_VAR 0 2
64071: PUSH
64072: FOR_IN
64073: IFFALSE 64142
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
64075: LD_ADDR_VAR 0 6
64079: PUSH
64080: LD_VAR 0 1
64084: PPUSH
64085: LD_VAR 0 4
64089: PUSH
64090: LD_INT 1
64092: ARRAY
64093: PPUSH
64094: LD_VAR 0 4
64098: PUSH
64099: LD_INT 2
64101: ARRAY
64102: PPUSH
64103: CALL_OW 297
64107: ST_TO_ADDR
// if tmpDist < dist then
64108: LD_VAR 0 6
64112: PUSH
64113: LD_VAR 0 5
64117: LESS
64118: IFFALSE 64140
// begin result := i ;
64120: LD_ADDR_VAR 0 3
64124: PUSH
64125: LD_VAR 0 4
64129: ST_TO_ADDR
// dist := tmpDist ;
64130: LD_ADDR_VAR 0 5
64134: PUSH
64135: LD_VAR 0 6
64139: ST_TO_ADDR
// end ; end ;
64140: GO 64072
64142: POP
64143: POP
// end ;
64144: LD_VAR 0 3
64148: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
64149: LD_INT 0
64151: PPUSH
// uc_side := side ;
64152: LD_ADDR_OWVAR 20
64156: PUSH
64157: LD_VAR 0 1
64161: ST_TO_ADDR
// uc_nation := 3 ;
64162: LD_ADDR_OWVAR 21
64166: PUSH
64167: LD_INT 3
64169: ST_TO_ADDR
// vc_chassis := 25 ;
64170: LD_ADDR_OWVAR 37
64174: PUSH
64175: LD_INT 25
64177: ST_TO_ADDR
// vc_engine := engine_siberite ;
64178: LD_ADDR_OWVAR 39
64182: PUSH
64183: LD_INT 3
64185: ST_TO_ADDR
// vc_control := control_computer ;
64186: LD_ADDR_OWVAR 38
64190: PUSH
64191: LD_INT 3
64193: ST_TO_ADDR
// vc_weapon := 59 ;
64194: LD_ADDR_OWVAR 40
64198: PUSH
64199: LD_INT 59
64201: ST_TO_ADDR
// result := CreateVehicle ;
64202: LD_ADDR_VAR 0 5
64206: PUSH
64207: CALL_OW 45
64211: ST_TO_ADDR
// SetDir ( result , d ) ;
64212: LD_VAR 0 5
64216: PPUSH
64217: LD_VAR 0 4
64221: PPUSH
64222: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
64226: LD_VAR 0 5
64230: PPUSH
64231: LD_VAR 0 2
64235: PPUSH
64236: LD_VAR 0 3
64240: PPUSH
64241: LD_INT 0
64243: PPUSH
64244: CALL_OW 48
// end ;
64248: LD_VAR 0 5
64252: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
64253: LD_INT 0
64255: PPUSH
64256: PPUSH
64257: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
64258: LD_ADDR_VAR 0 2
64262: PUSH
64263: LD_INT 0
64265: PUSH
64266: LD_INT 0
64268: PUSH
64269: LD_INT 0
64271: PUSH
64272: LD_INT 0
64274: PUSH
64275: EMPTY
64276: LIST
64277: LIST
64278: LIST
64279: LIST
64280: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
64281: LD_VAR 0 1
64285: NOT
64286: PUSH
64287: LD_VAR 0 1
64291: PPUSH
64292: CALL_OW 264
64296: PUSH
64297: LD_INT 12
64299: PUSH
64300: LD_INT 51
64302: PUSH
64303: LD_INT 32
64305: PUSH
64306: LD_INT 89
64308: PUSH
64309: EMPTY
64310: LIST
64311: LIST
64312: LIST
64313: LIST
64314: IN
64315: NOT
64316: OR
64317: IFFALSE 64321
// exit ;
64319: GO 64419
// for i := 1 to 3 do
64321: LD_ADDR_VAR 0 3
64325: PUSH
64326: DOUBLE
64327: LD_INT 1
64329: DEC
64330: ST_TO_ADDR
64331: LD_INT 3
64333: PUSH
64334: FOR_TO
64335: IFFALSE 64417
// begin tmp := GetCargo ( cargo , i ) ;
64337: LD_ADDR_VAR 0 4
64341: PUSH
64342: LD_VAR 0 1
64346: PPUSH
64347: LD_VAR 0 3
64351: PPUSH
64352: CALL_OW 289
64356: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
64357: LD_ADDR_VAR 0 2
64361: PUSH
64362: LD_VAR 0 2
64366: PPUSH
64367: LD_VAR 0 3
64371: PPUSH
64372: LD_VAR 0 4
64376: PPUSH
64377: CALL_OW 1
64381: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
64382: LD_ADDR_VAR 0 2
64386: PUSH
64387: LD_VAR 0 2
64391: PPUSH
64392: LD_INT 4
64394: PPUSH
64395: LD_VAR 0 2
64399: PUSH
64400: LD_INT 4
64402: ARRAY
64403: PUSH
64404: LD_VAR 0 4
64408: PLUS
64409: PPUSH
64410: CALL_OW 1
64414: ST_TO_ADDR
// end ;
64415: GO 64334
64417: POP
64418: POP
// end ;
64419: LD_VAR 0 2
64423: RET
// export function Length ( array ) ; begin
64424: LD_INT 0
64426: PPUSH
// result := array + 0 ;
64427: LD_ADDR_VAR 0 2
64431: PUSH
64432: LD_VAR 0 1
64436: PUSH
64437: LD_INT 0
64439: PLUS
64440: ST_TO_ADDR
// end ;
64441: LD_VAR 0 2
64445: RET
// export function PrepareArray ( array ) ; begin
64446: LD_INT 0
64448: PPUSH
// result := array diff 0 ;
64449: LD_ADDR_VAR 0 2
64453: PUSH
64454: LD_VAR 0 1
64458: PUSH
64459: LD_INT 0
64461: DIFF
64462: ST_TO_ADDR
// if not result [ 1 ] then
64463: LD_VAR 0 2
64467: PUSH
64468: LD_INT 1
64470: ARRAY
64471: NOT
64472: IFFALSE 64492
// result := Delete ( result , 1 ) ;
64474: LD_ADDR_VAR 0 2
64478: PUSH
64479: LD_VAR 0 2
64483: PPUSH
64484: LD_INT 1
64486: PPUSH
64487: CALL_OW 3
64491: ST_TO_ADDR
// end ; end_of_file
64492: LD_VAR 0 2
64496: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
64497: LD_VAR 0 1
64501: PUSH
64502: LD_INT 200
64504: DOUBLE
64505: GREATEREQUAL
64506: IFFALSE 64514
64508: LD_INT 299
64510: DOUBLE
64511: LESSEQUAL
64512: IFTRUE 64516
64514: GO 64548
64516: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
64517: LD_VAR 0 1
64521: PPUSH
64522: LD_VAR 0 2
64526: PPUSH
64527: LD_VAR 0 3
64531: PPUSH
64532: LD_VAR 0 4
64536: PPUSH
64537: LD_VAR 0 5
64541: PPUSH
64542: CALL 3750 0 5
64546: GO 64625
64548: LD_INT 300
64550: DOUBLE
64551: GREATEREQUAL
64552: IFFALSE 64560
64554: LD_INT 399
64556: DOUBLE
64557: LESSEQUAL
64558: IFTRUE 64562
64560: GO 64624
64562: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
64563: LD_VAR 0 1
64567: PPUSH
64568: LD_VAR 0 2
64572: PPUSH
64573: LD_VAR 0 3
64577: PPUSH
64578: LD_VAR 0 4
64582: PPUSH
64583: LD_VAR 0 5
64587: PPUSH
64588: LD_VAR 0 6
64592: PPUSH
64593: LD_VAR 0 7
64597: PPUSH
64598: LD_VAR 0 8
64602: PPUSH
64603: LD_VAR 0 9
64607: PPUSH
64608: LD_VAR 0 10
64612: PPUSH
64613: LD_VAR 0 11
64617: PPUSH
64618: CALL 20021 0 11
64622: GO 64625
64624: POP
// end ;
64625: PPOPN 11
64627: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
64628: LD_VAR 0 1
64632: PPUSH
64633: LD_VAR 0 2
64637: PPUSH
64638: LD_VAR 0 3
64642: PPUSH
64643: LD_VAR 0 4
64647: PPUSH
64648: LD_VAR 0 5
64652: PPUSH
64653: CALL 3486 0 5
// end ; end_of_file
64657: PPOPN 5
64659: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
64660: LD_VAR 0 1
64664: PPUSH
64665: LD_VAR 0 2
64669: PPUSH
64670: LD_VAR 0 3
64674: PPUSH
64675: LD_VAR 0 4
64679: PPUSH
64680: LD_VAR 0 5
64684: PPUSH
64685: LD_VAR 0 6
64689: PPUSH
64690: CALL 7714 0 6
// end ;
64694: PPOPN 6
64696: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
64697: LD_INT 0
64699: PPUSH
// begin if not units then
64700: LD_VAR 0 1
64704: NOT
64705: IFFALSE 64709
// exit ;
64707: GO 64709
// end ;
64709: PPOPN 7
64711: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
64712: CALL 7685 0 0
// end ;
64716: PPOPN 1
64718: END
