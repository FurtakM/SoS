// starting begin ResetFog ;
   0: CALL_OW 335
// PrepareGame ;
   4: CALL 13 0 0
// PrepareUnits ;
   8: CALL 299 0 0
// end ;
  12: END
// export mechanics , time_to_destroy , players , sib_bomb , time , veh_amount ; export p1 , p2 , p3 , p4 , p5 ; function PrepareGame ; var debug , i ; begin
  13: LD_INT 0
  15: PPUSH
  16: PPUSH
  17: PPUSH
// debug := false ;
  18: LD_ADDR_VAR 0 2
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// if debug then
  26: LD_VAR 0 2
  30: IFFALSE 81
// begin mechanics := 5 ;
  32: LD_ADDR_EXP 1
  36: PUSH
  37: LD_INT 5
  39: ST_TO_ADDR
// time_to_destroy := 45 ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_INT 45
  47: ST_TO_ADDR
// players := 4 ;
  48: LD_ADDR_EXP 3
  52: PUSH
  53: LD_INT 4
  55: ST_TO_ADDR
// sib_bomb := true ;
  56: LD_ADDR_EXP 4
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// time := 3 3$00 ;
  64: LD_ADDR_EXP 5
  68: PUSH
  69: LD_INT 6300
  71: ST_TO_ADDR
// FogOff ( 1 ) ;
  72: LD_INT 1
  74: PPUSH
  75: CALL_OW 344
// end else
  79: GO 214
// begin time := 3 3$00 ;
  81: LD_ADDR_EXP 5
  85: PUSH
  86: LD_INT 6300
  88: ST_TO_ADDR
// players := 4 ;
  89: LD_ADDR_EXP 3
  93: PUSH
  94: LD_INT 4
  96: ST_TO_ADDR
// sib_bomb := true ;
  97: LD_ADDR_EXP 4
 101: PUSH
 102: LD_INT 1
 104: ST_TO_ADDR
// mechanics := 4 ;
 105: LD_ADDR_EXP 1
 109: PUSH
 110: LD_INT 4
 112: ST_TO_ADDR
// mechanics := [ 3 , 4 , 5 ] [ GetMultiplayerSetting ( 0 ) ] ;
 113: LD_ADDR_EXP 1
 117: PUSH
 118: LD_INT 3
 120: PUSH
 121: LD_INT 4
 123: PUSH
 124: LD_INT 5
 126: PUSH
 127: EMPTY
 128: LIST
 129: LIST
 130: LIST
 131: PUSH
 132: LD_INT 0
 134: PPUSH
 135: CALL_OW 426
 139: ARRAY
 140: ST_TO_ADDR
// players := [ 3 , 4 , 5 ] [ GetMultiplayerSetting ( 1 ) ] ;
 141: LD_ADDR_EXP 3
 145: PUSH
 146: LD_INT 3
 148: PUSH
 149: LD_INT 4
 151: PUSH
 152: LD_INT 5
 154: PUSH
 155: EMPTY
 156: LIST
 157: LIST
 158: LIST
 159: PUSH
 160: LD_INT 1
 162: PPUSH
 163: CALL_OW 426
 167: ARRAY
 168: ST_TO_ADDR
// time := [ 3 3$00 , 5 5$00 , 10 10$00 ] [ GetMultiplayerSetting ( 2 ) ] ;
 169: LD_ADDR_EXP 5
 173: PUSH
 174: LD_INT 6300
 176: PUSH
 177: LD_INT 10500
 179: PUSH
 180: LD_INT 21000
 182: PUSH
 183: EMPTY
 184: LIST
 185: LIST
 186: LIST
 187: PUSH
 188: LD_INT 2
 190: PPUSH
 191: CALL_OW 426
 195: ARRAY
 196: ST_TO_ADDR
// sib_bomb := GetMultiplayerSetting ( 3 ) - 1 ;
 197: LD_ADDR_EXP 4
 201: PUSH
 202: LD_INT 3
 204: PPUSH
 205: CALL_OW 426
 209: PUSH
 210: LD_INT 1
 212: MINUS
 213: ST_TO_ADDR
// end ; p1 := 0 ;
 214: LD_ADDR_EXP 7
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// p2 := 0 ;
 222: LD_ADDR_EXP 8
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// p3 := 0 ;
 230: LD_ADDR_EXP 9
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// p4 := 0 ;
 238: LD_ADDR_EXP 10
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// p5 := 0 ;
 246: LD_ADDR_EXP 11
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// veh_amount := 12 ;
 254: LD_ADDR_EXP 6
 258: PUSH
 259: LD_INT 12
 261: ST_TO_ADDR
// for i = 1 to 7 do
 262: LD_ADDR_VAR 0 3
 266: PUSH
 267: DOUBLE
 268: LD_INT 1
 270: DEC
 271: ST_TO_ADDR
 272: LD_INT 7
 274: PUSH
 275: FOR_TO
 276: IFFALSE 292
// ChangeSideFog ( i , 8 ) ;
 278: LD_VAR 0 3
 282: PPUSH
 283: LD_INT 8
 285: PPUSH
 286: CALL_OW 343
 290: GO 275
 292: POP
 293: POP
// end ; end_of_file
 294: LD_VAR 0 1
 298: RET
// export function PrepareUnits ; var i , side ; begin
 299: LD_INT 0
 301: PPUSH
 302: PPUSH
 303: PPUSH
// side := players ;
 304: LD_ADDR_VAR 0 3
 308: PUSH
 309: LD_EXP 3
 313: ST_TO_ADDR
// uc_nation := 1 ;
 314: LD_ADDR_OWVAR 21
 318: PUSH
 319: LD_INT 1
 321: ST_TO_ADDR
// for i = 1 to mechanics do
 322: LD_ADDR_VAR 0 2
 326: PUSH
 327: DOUBLE
 328: LD_INT 1
 330: DEC
 331: ST_TO_ADDR
 332: LD_EXP 1
 336: PUSH
 337: FOR_TO
 338: IFFALSE 402
// for side = 1 to players do
 340: LD_ADDR_VAR 0 3
 344: PUSH
 345: DOUBLE
 346: LD_INT 1
 348: DEC
 349: ST_TO_ADDR
 350: LD_EXP 3
 354: PUSH
 355: FOR_TO
 356: IFFALSE 398
// begin uc_side := side ;
 358: LD_ADDR_OWVAR 20
 362: PUSH
 363: LD_VAR 0 3
 367: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
 368: LD_INT 0
 370: PPUSH
 371: LD_INT 3
 373: PPUSH
 374: LD_INT 10
 376: PPUSH
 377: CALL_OW 380
// PlaceUnitArea ( CreateHuman , mech_area , false ) ;
 381: CALL_OW 44
 385: PPUSH
 386: LD_INT 6
 388: PPUSH
 389: LD_INT 0
 391: PPUSH
 392: CALL_OW 49
// end ;
 396: GO 355
 398: POP
 399: POP
 400: GO 337
 402: POP
 403: POP
// end ;
 404: LD_VAR 0 1
 408: RET
// function ToSpawn ( side ) ; begin
 409: LD_INT 0
 411: PPUSH
// uc_side := side ;
 412: LD_ADDR_OWVAR 20
 416: PUSH
 417: LD_VAR 0 1
 421: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
 422: LD_INT 0
 424: PPUSH
 425: LD_INT 3
 427: PPUSH
 428: LD_INT 10
 430: PPUSH
 431: CALL_OW 380
// PlaceUnitArea ( CreateHuman , mech_area , false ) ;
 435: CALL_OW 44
 439: PPUSH
 440: LD_INT 6
 442: PPUSH
 443: LD_INT 0
 445: PPUSH
 446: CALL_OW 49
// end ;
 450: LD_VAR 0 2
 454: RET
// every 0 0$13 trigger time do var i , filter ;
 455: LD_EXP 5
 459: IFFALSE 569
 461: GO 463
 463: DISABLE
 464: LD_INT 0
 466: PPUSH
 467: PPUSH
// begin enable ;
 468: ENABLE
// for i = 1 to players do
 469: LD_ADDR_VAR 0 1
 473: PUSH
 474: DOUBLE
 475: LD_INT 1
 477: DEC
 478: ST_TO_ADDR
 479: LD_EXP 3
 483: PUSH
 484: FOR_TO
 485: IFFALSE 567
// begin filter := FilterAllUnits ( [ [ [ f_side , i ] , [ f_class , 3 ] , [ f_type , unit_human ] ] ] ) ;
 487: LD_ADDR_VAR 0 2
 491: PUSH
 492: LD_INT 22
 494: PUSH
 495: LD_VAR 0 1
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: PUSH
 504: LD_INT 25
 506: PUSH
 507: LD_INT 3
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: PUSH
 514: LD_INT 21
 516: PUSH
 517: LD_INT 1
 519: PUSH
 520: EMPTY
 521: LIST
 522: LIST
 523: PUSH
 524: EMPTY
 525: LIST
 526: LIST
 527: LIST
 528: PUSH
 529: EMPTY
 530: LIST
 531: PPUSH
 532: CALL_OW 69
 536: ST_TO_ADDR
// if filter < mechanics then
 537: LD_VAR 0 2
 541: PUSH
 542: LD_EXP 1
 546: LESS
 547: IFFALSE 565
// begin Wait ( 0 0$03 ) ;
 549: LD_INT 105
 551: PPUSH
 552: CALL_OW 67
// ToSpawn ( i ) ;
 556: LD_VAR 0 1
 560: PPUSH
 561: CALL 409 0 1
// end ; end ;
 565: GO 484
 567: POP
 568: POP
// end ;
 569: PPOPN 2
 571: END
// every 0 0$01 trigger time do var i , filter , filter2 , vehicles ;
 572: LD_EXP 5
 576: IFFALSE 943
 578: GO 580
 580: DISABLE
 581: LD_INT 0
 583: PPUSH
 584: PPUSH
 585: PPUSH
 586: PPUSH
// begin enable ;
 587: ENABLE
// filter2 := FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_not , [ f_side , 0 ] ] , [ f_not , [ f_side , 1 ] ] ] ) ;
 588: LD_ADDR_VAR 0 3
 592: PUSH
 593: LD_INT 21
 595: PUSH
 596: LD_INT 2
 598: PUSH
 599: EMPTY
 600: LIST
 601: LIST
 602: PUSH
 603: LD_INT 3
 605: PUSH
 606: LD_INT 22
 608: PUSH
 609: LD_INT 0
 611: PUSH
 612: EMPTY
 613: LIST
 614: LIST
 615: PUSH
 616: EMPTY
 617: LIST
 618: LIST
 619: PUSH
 620: LD_INT 3
 622: PUSH
 623: LD_INT 22
 625: PUSH
 626: LD_INT 1
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: PUSH
 633: EMPTY
 634: LIST
 635: LIST
 636: PUSH
 637: EMPTY
 638: LIST
 639: LIST
 640: LIST
 641: PPUSH
 642: CALL_OW 69
 646: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_side , 1 ] ] ] ) ;
 647: LD_ADDR_VAR 0 2
 651: PUSH
 652: LD_INT 21
 654: PUSH
 655: LD_INT 1
 657: PUSH
 658: EMPTY
 659: LIST
 660: LIST
 661: PUSH
 662: LD_INT 3
 664: PUSH
 665: LD_INT 54
 667: PUSH
 668: EMPTY
 669: LIST
 670: PUSH
 671: EMPTY
 672: LIST
 673: LIST
 674: PUSH
 675: LD_INT 3
 677: PUSH
 678: LD_INT 22
 680: PUSH
 681: LD_INT 1
 683: PUSH
 684: EMPTY
 685: LIST
 686: LIST
 687: PUSH
 688: EMPTY
 689: LIST
 690: LIST
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: LIST
 696: PPUSH
 697: CALL_OW 69
 701: ST_TO_ADDR
// vehicles := FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 702: LD_ADDR_VAR 0 4
 706: PUSH
 707: LD_INT 21
 709: PUSH
 710: LD_INT 2
 712: PUSH
 713: EMPTY
 714: LIST
 715: LIST
 716: PUSH
 717: LD_INT 58
 719: PUSH
 720: EMPTY
 721: LIST
 722: PUSH
 723: EMPTY
 724: LIST
 725: LIST
 726: PPUSH
 727: CALL_OW 69
 731: ST_TO_ADDR
// if filter and vehicles then
 732: LD_VAR 0 2
 736: PUSH
 737: LD_VAR 0 4
 741: AND
 742: IFFALSE 879
// for i = 1 to filter do
 744: LD_ADDR_VAR 0 1
 748: PUSH
 749: DOUBLE
 750: LD_INT 1
 752: DEC
 753: ST_TO_ADDR
 754: LD_VAR 0 2
 758: PUSH
 759: FOR_TO
 760: IFFALSE 877
// if not HasTask ( filter [ i ] ) and IsOk ( filter [ i ] ) then
 762: LD_VAR 0 2
 766: PUSH
 767: LD_VAR 0 1
 771: ARRAY
 772: PPUSH
 773: CALL_OW 314
 777: NOT
 778: PUSH
 779: LD_VAR 0 2
 783: PUSH
 784: LD_VAR 0 1
 788: ARRAY
 789: PPUSH
 790: CALL_OW 302
 794: AND
 795: IFFALSE 875
// if GetDistUnits ( filter [ i ] , NearestUnitToUnit ( vehicles , filter [ i ] ) ) < 45 then
 797: LD_VAR 0 2
 801: PUSH
 802: LD_VAR 0 1
 806: ARRAY
 807: PPUSH
 808: LD_VAR 0 4
 812: PPUSH
 813: LD_VAR 0 2
 817: PUSH
 818: LD_VAR 0 1
 822: ARRAY
 823: PPUSH
 824: CALL_OW 74
 828: PPUSH
 829: CALL_OW 296
 833: PUSH
 834: LD_INT 45
 836: LESS
 837: IFFALSE 875
// ComEnterUnit ( filter [ i ] , NearestUnitToUnit ( vehicles , filter [ i ] ) ) ;
 839: LD_VAR 0 2
 843: PUSH
 844: LD_VAR 0 1
 848: ARRAY
 849: PPUSH
 850: LD_VAR 0 4
 854: PPUSH
 855: LD_VAR 0 2
 859: PUSH
 860: LD_VAR 0 1
 864: ARRAY
 865: PPUSH
 866: CALL_OW 74
 870: PPUSH
 871: CALL_OW 120
 875: GO 759
 877: POP
 878: POP
// if filter2 then
 879: LD_VAR 0 3
 883: IFFALSE 943
// for i = 1 to filter2 do
 885: LD_ADDR_VAR 0 1
 889: PUSH
 890: DOUBLE
 891: LD_INT 1
 893: DEC
 894: ST_TO_ADDR
 895: LD_VAR 0 3
 899: PUSH
 900: FOR_TO
 901: IFFALSE 941
// if not HasTask ( filter2 [ i ] ) then
 903: LD_VAR 0 3
 907: PUSH
 908: LD_VAR 0 1
 912: ARRAY
 913: PPUSH
 914: CALL_OW 314
 918: NOT
 919: IFFALSE 939
// ComMoveToArea ( filter2 [ i ] , exit_area ) ;
 921: LD_VAR 0 3
 925: PUSH
 926: LD_VAR 0 1
 930: ARRAY
 931: PPUSH
 932: LD_INT 4
 934: PPUSH
 935: CALL_OW 113
 939: GO 900
 941: POP
 942: POP
// end ; end_of_file
 943: PPOPN 4
 945: END
// export function SpawnCar ( chas , area ) ; var i , e , veh , ar_chassis , ru_chassis , us_chassis , ar_weapons , ru_weapons , us_weapons , chassis , engine , weapon ; begin
 946: LD_INT 0
 948: PPUSH
 949: PPUSH
 950: PPUSH
 951: PPUSH
 952: PPUSH
 953: PPUSH
 954: PPUSH
 955: PPUSH
 956: PPUSH
 957: PPUSH
 958: PPUSH
 959: PPUSH
 960: PPUSH
// uc_side := 0 ;
 961: LD_ADDR_OWVAR 20
 965: PUSH
 966: LD_INT 0
 968: ST_TO_ADDR
// uc_nation := Rand ( 1 , 3 ) ;
 969: LD_ADDR_OWVAR 21
 973: PUSH
 974: LD_INT 1
 976: PPUSH
 977: LD_INT 3
 979: PPUSH
 980: CALL_OW 12
 984: ST_TO_ADDR
// ar_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ;
 985: LD_ADDR_VAR 0 7
 989: PUSH
 990: LD_INT 11
 992: PUSH
 993: LD_INT 12
 995: PUSH
 996: LD_INT 13
 998: PUSH
 999: LD_INT 14
1001: PUSH
1002: EMPTY
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: ST_TO_ADDR
// ru_chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ;
1008: LD_ADDR_VAR 0 8
1012: PUSH
1013: LD_INT 21
1015: PUSH
1016: LD_INT 22
1018: PUSH
1019: LD_INT 23
1021: PUSH
1022: LD_INT 24
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: ST_TO_ADDR
// us_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ;
1031: LD_ADDR_VAR 0 9
1035: PUSH
1036: LD_INT 1
1038: PUSH
1039: LD_INT 2
1041: PUSH
1042: LD_INT 3
1044: PUSH
1045: LD_INT 4
1047: PUSH
1048: LD_INT 5
1050: PUSH
1051: EMPTY
1052: LIST
1053: LIST
1054: LIST
1055: LIST
1056: LIST
1057: ST_TO_ADDR
// if chas > 0 then
1058: LD_VAR 0 1
1062: PUSH
1063: LD_INT 0
1065: GREATER
1066: IFFALSE 1080
// vc_chassis := chas else
1068: LD_ADDR_OWVAR 37
1072: PUSH
1073: LD_VAR 0 1
1077: ST_TO_ADDR
1078: GO 1173
// begin case uc_nation of 1 :
1080: LD_OWVAR 21
1084: PUSH
1085: LD_INT 1
1087: DOUBLE
1088: EQUAL
1089: IFTRUE 1093
1091: GO 1106
1093: POP
// chassis := us_chassis ; 2 :
1094: LD_ADDR_VAR 0 13
1098: PUSH
1099: LD_VAR 0 9
1103: ST_TO_ADDR
1104: GO 1149
1106: LD_INT 2
1108: DOUBLE
1109: EQUAL
1110: IFTRUE 1114
1112: GO 1127
1114: POP
// chassis := ar_chassis ; 3 :
1115: LD_ADDR_VAR 0 13
1119: PUSH
1120: LD_VAR 0 7
1124: ST_TO_ADDR
1125: GO 1149
1127: LD_INT 3
1129: DOUBLE
1130: EQUAL
1131: IFTRUE 1135
1133: GO 1148
1135: POP
// chassis := ru_chassis ; end ;
1136: LD_ADDR_VAR 0 13
1140: PUSH
1141: LD_VAR 0 8
1145: ST_TO_ADDR
1146: GO 1149
1148: POP
// vc_chassis := chassis [ Rand ( 1 , chassis ) ] ;
1149: LD_ADDR_OWVAR 37
1153: PUSH
1154: LD_VAR 0 13
1158: PUSH
1159: LD_INT 1
1161: PPUSH
1162: LD_VAR 0 13
1166: PPUSH
1167: CALL_OW 12
1171: ARRAY
1172: ST_TO_ADDR
// end ; if vc_chassis in [ ar_hovercraft , ar_light_trike , us_light_wheeled ] then
1173: LD_OWVAR 37
1177: PUSH
1178: LD_INT 11
1180: PUSH
1181: LD_INT 12
1183: PUSH
1184: LD_INT 1
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: LIST
1191: IN
1192: IFFALSE 1212
// engine := Rand ( 1 , 2 ) else
1194: LD_ADDR_VAR 0 14
1198: PUSH
1199: LD_INT 1
1201: PPUSH
1202: LD_INT 2
1204: PPUSH
1205: CALL_OW 12
1209: ST_TO_ADDR
1210: GO 1324
// begin if not vc_chassis in [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , us_heavy_tracked , us_morphling ] then
1212: LD_OWVAR 37
1216: PUSH
1217: LD_INT 21
1219: PUSH
1220: LD_INT 22
1222: PUSH
1223: LD_INT 23
1225: PUSH
1226: LD_INT 24
1228: PUSH
1229: LD_INT 4
1231: PUSH
1232: LD_INT 5
1234: PUSH
1235: EMPTY
1236: LIST
1237: LIST
1238: LIST
1239: LIST
1240: LIST
1241: LIST
1242: IN
1243: NOT
1244: IFFALSE 1264
// engine := Rand ( 1 , 3 ) else
1246: LD_ADDR_VAR 0 14
1250: PUSH
1251: LD_INT 1
1253: PPUSH
1254: LD_INT 3
1256: PPUSH
1257: CALL_OW 12
1261: ST_TO_ADDR
1262: GO 1280
// e := Rand ( 1 , 2 ) ;
1264: LD_ADDR_VAR 0 5
1268: PUSH
1269: LD_INT 1
1271: PPUSH
1272: LD_INT 2
1274: PPUSH
1275: CALL_OW 12
1279: ST_TO_ADDR
// case e of 1 :
1280: LD_VAR 0 5
1284: PUSH
1285: LD_INT 1
1287: DOUBLE
1288: EQUAL
1289: IFTRUE 1293
1291: GO 1304
1293: POP
// engine := engine_combustion ; 2 :
1294: LD_ADDR_VAR 0 14
1298: PUSH
1299: LD_INT 1
1301: ST_TO_ADDR
1302: GO 1324
1304: LD_INT 2
1306: DOUBLE
1307: EQUAL
1308: IFTRUE 1312
1310: GO 1323
1312: POP
// engine := engine_siberite ; end ;
1313: LD_ADDR_VAR 0 14
1317: PUSH
1318: LD_INT 3
1320: ST_TO_ADDR
1321: GO 1324
1323: POP
// end ; vc_engine := engine ;
1324: LD_ADDR_OWVAR 39
1328: PUSH
1329: LD_VAR 0 14
1333: ST_TO_ADDR
// vc_control := control_manual ;
1334: LD_ADDR_OWVAR 38
1338: PUSH
1339: LD_INT 1
1341: ST_TO_ADDR
// ar_weapons := [ ar_multimissile_ballista , ar_double_machine_gun , ar_light_gun , ar_radar , ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb , ar_flame_thrower ] ;
1342: LD_ADDR_VAR 0 10
1346: PUSH
1347: LD_INT 22
1349: PUSH
1350: LD_INT 24
1352: PUSH
1353: LD_INT 23
1355: PUSH
1356: LD_INT 30
1358: PUSH
1359: LD_INT 25
1361: PUSH
1362: LD_INT 27
1364: PUSH
1365: LD_INT 28
1367: PUSH
1368: LD_INT 29
1370: PUSH
1371: LD_INT 26
1373: PUSH
1374: EMPTY
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: LIST
1382: LIST
1383: LIST
1384: ST_TO_ADDR
// ru_weapons := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , 98 , ru_rocket_launcher , ru_heavy_gun , ru_rocket , ru_bulldozer , ru_time_lapser ] ;
1385: LD_ADDR_VAR 0 11
1389: PUSH
1390: LD_INT 42
1392: PUSH
1393: LD_INT 43
1395: PUSH
1396: LD_INT 44
1398: PUSH
1399: LD_INT 98
1401: PUSH
1402: LD_INT 45
1404: PUSH
1405: LD_INT 46
1407: PUSH
1408: LD_INT 47
1410: PUSH
1411: LD_INT 53
1413: PUSH
1414: LD_INT 49
1416: PUSH
1417: EMPTY
1418: LIST
1419: LIST
1420: LIST
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: LIST
1427: ST_TO_ADDR
// us_weapons := [ us_machine_gun , us_light_gun , us_radar , us_gatling_gun , us_double_gun , us_rocket_launcher , us_laser , us_heavy_gun , us_bulldozer , us_double_laser ] ;
1428: LD_ADDR_VAR 0 12
1432: PUSH
1433: LD_INT 2
1435: PUSH
1436: LD_INT 3
1438: PUSH
1439: LD_INT 11
1441: PUSH
1442: LD_INT 4
1444: PUSH
1445: LD_INT 5
1447: PUSH
1448: LD_INT 7
1450: PUSH
1451: LD_INT 9
1453: PUSH
1454: LD_INT 6
1456: PUSH
1457: LD_INT 14
1459: PUSH
1460: LD_INT 10
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: LIST
1473: LIST
1474: ST_TO_ADDR
// if uc_nation = nation_arabian then
1475: LD_OWVAR 21
1479: PUSH
1480: LD_INT 2
1482: EQUAL
1483: IFFALSE 1550
// begin if vc_chassis in [ ar_hovercraft , ar_light_trike ] then
1485: LD_OWVAR 37
1489: PUSH
1490: LD_INT 11
1492: PUSH
1493: LD_INT 12
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: IN
1500: IFFALSE 1526
// weapon := ar_weapons [ Rand ( 1 , 3 ) ] else
1502: LD_ADDR_VAR 0 15
1506: PUSH
1507: LD_VAR 0 10
1511: PUSH
1512: LD_INT 1
1514: PPUSH
1515: LD_INT 3
1517: PPUSH
1518: CALL_OW 12
1522: ARRAY
1523: ST_TO_ADDR
1524: GO 1550
// weapon := ar_weapons [ Rand ( 1 , ar_weapons ) ] ;
1526: LD_ADDR_VAR 0 15
1530: PUSH
1531: LD_VAR 0 10
1535: PUSH
1536: LD_INT 1
1538: PPUSH
1539: LD_VAR 0 10
1543: PPUSH
1544: CALL_OW 12
1548: ARRAY
1549: ST_TO_ADDR
// end ; if uc_nation = nation_russian then
1550: LD_OWVAR 21
1554: PUSH
1555: LD_INT 3
1557: EQUAL
1558: IFFALSE 1625
// begin if vc_chassis in [ ru_medium_wheeled , ru_medium_tracked ] then
1560: LD_OWVAR 37
1564: PUSH
1565: LD_INT 21
1567: PUSH
1568: LD_INT 22
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: IN
1575: IFFALSE 1601
// weapon := ru_weapons [ Rand ( 1 , 5 ) ] else
1577: LD_ADDR_VAR 0 15
1581: PUSH
1582: LD_VAR 0 11
1586: PUSH
1587: LD_INT 1
1589: PPUSH
1590: LD_INT 5
1592: PPUSH
1593: CALL_OW 12
1597: ARRAY
1598: ST_TO_ADDR
1599: GO 1625
// weapon := ru_weapons [ Rand ( 1 , ru_weapons ) ] ;
1601: LD_ADDR_VAR 0 15
1605: PUSH
1606: LD_VAR 0 11
1610: PUSH
1611: LD_INT 1
1613: PPUSH
1614: LD_VAR 0 11
1618: PPUSH
1619: CALL_OW 12
1623: ARRAY
1624: ST_TO_ADDR
// end ; if uc_nation = nation_american then
1625: LD_OWVAR 21
1629: PUSH
1630: LD_INT 1
1632: EQUAL
1633: IFFALSE 1742
// begin if vc_chassis = us_light_wheeled then
1635: LD_OWVAR 37
1639: PUSH
1640: LD_INT 1
1642: EQUAL
1643: IFFALSE 1667
// weapon := us_weapons [ Rand ( 1 , 3 ) ] ;
1645: LD_ADDR_VAR 0 15
1649: PUSH
1650: LD_VAR 0 12
1654: PUSH
1655: LD_INT 1
1657: PPUSH
1658: LD_INT 3
1660: PPUSH
1661: CALL_OW 12
1665: ARRAY
1666: ST_TO_ADDR
// if vc_chassis in [ us_medium_tracked , us_medium_wheeled ] then
1667: LD_OWVAR 37
1671: PUSH
1672: LD_INT 3
1674: PUSH
1675: LD_INT 2
1677: PUSH
1678: EMPTY
1679: LIST
1680: LIST
1681: IN
1682: IFFALSE 1708
// weapon := us_weapons [ Rand ( 1 , 7 ) ] else
1684: LD_ADDR_VAR 0 15
1688: PUSH
1689: LD_VAR 0 12
1693: PUSH
1694: LD_INT 1
1696: PPUSH
1697: LD_INT 7
1699: PPUSH
1700: CALL_OW 12
1704: ARRAY
1705: ST_TO_ADDR
1706: GO 1742
// if vc_chassis <> us_light_wheeled then
1708: LD_OWVAR 37
1712: PUSH
1713: LD_INT 1
1715: NONEQUAL
1716: IFFALSE 1742
// weapon := us_weapons [ Rand ( 1 , us_weapons ) ] ;
1718: LD_ADDR_VAR 0 15
1722: PUSH
1723: LD_VAR 0 12
1727: PUSH
1728: LD_INT 1
1730: PPUSH
1731: LD_VAR 0 12
1735: PPUSH
1736: CALL_OW 12
1740: ARRAY
1741: ST_TO_ADDR
// end ; vc_weapon := weapon ;
1742: LD_ADDR_OWVAR 40
1746: PUSH
1747: LD_VAR 0 15
1751: ST_TO_ADDR
// veh := CreateVehicle ;
1752: LD_ADDR_VAR 0 6
1756: PUSH
1757: CALL_OW 45
1761: ST_TO_ADDR
// PlaceUnitArea ( veh , area , true ) ;
1762: LD_VAR 0 6
1766: PPUSH
1767: LD_VAR 0 2
1771: PPUSH
1772: LD_INT 1
1774: PPUSH
1775: CALL_OW 49
// end ;
1779: LD_VAR 0 3
1783: RET
// export function SpawnSibRocket ( area ) ; var veh , p ; begin
1784: LD_INT 0
1786: PPUSH
1787: PPUSH
1788: PPUSH
// uc_side := 0 ;
1789: LD_ADDR_OWVAR 20
1793: PUSH
1794: LD_INT 0
1796: ST_TO_ADDR
// p := Rand ( 1 , 2 ) ;
1797: LD_ADDR_VAR 0 4
1801: PUSH
1802: LD_INT 1
1804: PPUSH
1805: LD_INT 2
1807: PPUSH
1808: CALL_OW 12
1812: ST_TO_ADDR
// case p of 1 :
1813: LD_VAR 0 4
1817: PUSH
1818: LD_INT 1
1820: DOUBLE
1821: EQUAL
1822: IFTRUE 1826
1824: GO 1869
1826: POP
// begin uc_nation := nation_american ;
1827: LD_ADDR_OWVAR 21
1831: PUSH
1832: LD_INT 1
1834: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
1835: LD_ADDR_OWVAR 37
1839: PUSH
1840: LD_INT 4
1842: ST_TO_ADDR
// vc_engine := engine_siberite ;
1843: LD_ADDR_OWVAR 39
1847: PUSH
1848: LD_INT 3
1850: ST_TO_ADDR
// vc_control := control_manual ;
1851: LD_ADDR_OWVAR 38
1855: PUSH
1856: LD_INT 1
1858: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
1859: LD_ADDR_OWVAR 40
1863: PUSH
1864: LD_INT 8
1866: ST_TO_ADDR
// end ; 2 :
1867: GO 1921
1869: LD_INT 2
1871: DOUBLE
1872: EQUAL
1873: IFTRUE 1877
1875: GO 1920
1877: POP
// begin uc_nation := nation_russian ;
1878: LD_ADDR_OWVAR 21
1882: PUSH
1883: LD_INT 3
1885: ST_TO_ADDR
// vc_chassis := ru_heavy_tracked ;
1886: LD_ADDR_OWVAR 37
1890: PUSH
1891: LD_INT 24
1893: ST_TO_ADDR
// vc_engine := engine_siberite ;
1894: LD_ADDR_OWVAR 39
1898: PUSH
1899: LD_INT 3
1901: ST_TO_ADDR
// vc_control := control_manual ;
1902: LD_ADDR_OWVAR 38
1906: PUSH
1907: LD_INT 1
1909: ST_TO_ADDR
// vc_weapon := ru_siberium_rocket ;
1910: LD_ADDR_OWVAR 40
1914: PUSH
1915: LD_INT 48
1917: ST_TO_ADDR
// end ; end ;
1918: GO 1921
1920: POP
// veh := CreateVehicle ;
1921: LD_ADDR_VAR 0 3
1925: PUSH
1926: CALL_OW 45
1930: ST_TO_ADDR
// PlaceUnitArea ( veh , area , true ) ;
1931: LD_VAR 0 3
1935: PPUSH
1936: LD_VAR 0 1
1940: PPUSH
1941: LD_INT 1
1943: PPUSH
1944: CALL_OW 49
// end ;
1948: LD_VAR 0 2
1952: RET
// export function ScoreBoard ( veh ) ; var points ; begin
1953: LD_INT 0
1955: PPUSH
1956: PPUSH
// points := 0 ;
1957: LD_ADDR_VAR 0 3
1961: PUSH
1962: LD_INT 0
1964: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_light_trike , us_light_wheeled ] then
1965: LD_VAR 0 1
1969: PPUSH
1970: CALL_OW 265
1974: PUSH
1975: LD_INT 12
1977: PUSH
1978: LD_INT 1
1980: PUSH
1981: EMPTY
1982: LIST
1983: LIST
1984: IN
1985: IFFALSE 2001
// points := points + 10 ;
1987: LD_ADDR_VAR 0 3
1991: PUSH
1992: LD_VAR 0 3
1996: PUSH
1997: LD_INT 10
1999: PLUS
2000: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_medium_trike , ru_medium_wheeled , us_medium_wheeled ] then
2001: LD_VAR 0 1
2005: PPUSH
2006: CALL_OW 265
2010: PUSH
2011: LD_INT 13
2013: PUSH
2014: LD_INT 21
2016: PUSH
2017: LD_INT 2
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: LIST
2024: IN
2025: IFFALSE 2041
// points := points + 15 ;
2027: LD_ADDR_VAR 0 3
2031: PUSH
2032: LD_VAR 0 3
2036: PUSH
2037: LD_INT 15
2039: PLUS
2040: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_half_tracked , ru_medium_tracked , us_medium_tracked ] then
2041: LD_VAR 0 1
2045: PPUSH
2046: CALL_OW 265
2050: PUSH
2051: LD_INT 14
2053: PUSH
2054: LD_INT 22
2056: PUSH
2057: LD_INT 3
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: LIST
2064: IN
2065: IFFALSE 2081
// points := points + 20 ;
2067: LD_ADDR_VAR 0 3
2071: PUSH
2072: LD_VAR 0 3
2076: PUSH
2077: LD_INT 20
2079: PLUS
2080: ST_TO_ADDR
// if GetChassis ( veh ) in [ ru_heavy_wheeled , ru_heavy_tracked , us_heavy_tracked ] then
2081: LD_VAR 0 1
2085: PPUSH
2086: CALL_OW 265
2090: PUSH
2091: LD_INT 23
2093: PUSH
2094: LD_INT 24
2096: PUSH
2097: LD_INT 4
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: LIST
2104: IN
2105: IFFALSE 2121
// points := points + 25 ;
2107: LD_ADDR_VAR 0 3
2111: PUSH
2112: LD_VAR 0 3
2116: PUSH
2117: LD_INT 25
2119: PLUS
2120: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_hovercraft , us_morphling ] then
2121: LD_VAR 0 1
2125: PPUSH
2126: CALL_OW 265
2130: PUSH
2131: LD_INT 11
2133: PUSH
2134: LD_INT 5
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: IN
2141: IFFALSE 2157
// points := points + 30 ;
2143: LD_ADDR_VAR 0 3
2147: PUSH
2148: LD_VAR 0 3
2152: PUSH
2153: LD_INT 30
2155: PLUS
2156: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_combustion ] then
2157: LD_VAR 0 1
2161: PPUSH
2162: CALL_OW 262
2166: PUSH
2167: LD_INT 1
2169: PUSH
2170: EMPTY
2171: LIST
2172: EQUAL
2173: IFFALSE 2189
// points := points + 5 ;
2175: LD_ADDR_VAR 0 3
2179: PUSH
2180: LD_VAR 0 3
2184: PUSH
2185: LD_INT 5
2187: PLUS
2188: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_solar ] then
2189: LD_VAR 0 1
2193: PPUSH
2194: CALL_OW 262
2198: PUSH
2199: LD_INT 2
2201: PUSH
2202: EMPTY
2203: LIST
2204: EQUAL
2205: IFFALSE 2221
// points := points + 15 ;
2207: LD_ADDR_VAR 0 3
2211: PUSH
2212: LD_VAR 0 3
2216: PUSH
2217: LD_INT 15
2219: PLUS
2220: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_siberite ] then
2221: LD_VAR 0 1
2225: PPUSH
2226: CALL_OW 262
2230: PUSH
2231: LD_INT 3
2233: PUSH
2234: EMPTY
2235: LIST
2236: EQUAL
2237: IFFALSE 2253
// points := points + 25 ;
2239: LD_ADDR_VAR 0 3
2243: PUSH
2244: LD_VAR 0 3
2248: PUSH
2249: LD_INT 25
2251: PLUS
2252: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_multimissile_ballista , ar_double_machine_gun , ar_light_gun , ru_heavy_machine_gun , us_machine_gun , us_light_gun ] then
2253: LD_VAR 0 1
2257: PPUSH
2258: CALL_OW 264
2262: PUSH
2263: LD_INT 22
2265: PUSH
2266: LD_INT 24
2268: PUSH
2269: LD_INT 23
2271: PUSH
2272: LD_INT 42
2274: PUSH
2275: LD_INT 2
2277: PUSH
2278: LD_INT 3
2280: PUSH
2281: EMPTY
2282: LIST
2283: LIST
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: IN
2289: IFFALSE 2305
// points := points + 5 ;
2291: LD_ADDR_VAR 0 3
2295: PUSH
2296: LD_VAR 0 3
2300: PUSH
2301: LD_INT 5
2303: PLUS
2304: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_gatling_gun , ar_gun , ru_gatling_gun , ru_gun , us_gatling_gun , us_double_gun ] then
2305: LD_VAR 0 1
2309: PPUSH
2310: CALL_OW 264
2314: PUSH
2315: LD_INT 25
2317: PUSH
2318: LD_INT 27
2320: PUSH
2321: LD_INT 43
2323: PUSH
2324: LD_INT 44
2326: PUSH
2327: LD_INT 4
2329: PUSH
2330: LD_INT 5
2332: PUSH
2333: EMPTY
2334: LIST
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: LIST
2340: IN
2341: IFFALSE 2357
// points := points + 10 ;
2343: LD_ADDR_VAR 0 3
2347: PUSH
2348: LD_VAR 0 3
2352: PUSH
2353: LD_INT 10
2355: PLUS
2356: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher ] then
2357: LD_VAR 0 1
2361: PPUSH
2362: CALL_OW 264
2366: PUSH
2367: LD_INT 28
2369: PUSH
2370: LD_INT 45
2372: PUSH
2373: LD_INT 7
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: LIST
2380: IN
2381: IFFALSE 2397
// points := points + 20 ;
2383: LD_ADDR_VAR 0 3
2387: PUSH
2388: LD_VAR 0 3
2392: PUSH
2393: LD_INT 20
2395: PLUS
2396: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ru_heavy_gun , us_heavy_gun ] then
2397: LD_VAR 0 1
2401: PPUSH
2402: CALL_OW 264
2406: PUSH
2407: LD_INT 46
2409: PUSH
2410: LD_INT 6
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: IN
2417: IFFALSE 2433
// points := points + 25 ;
2419: LD_ADDR_VAR 0 3
2423: PUSH
2424: LD_VAR 0 3
2428: PUSH
2429: LD_INT 25
2431: PLUS
2432: ST_TO_ADDR
// if GetWeapon ( veh ) in [ us_laser , us_radar , ar_radar ] then
2433: LD_VAR 0 1
2437: PPUSH
2438: CALL_OW 264
2442: PUSH
2443: LD_INT 9
2445: PUSH
2446: LD_INT 11
2448: PUSH
2449: LD_INT 30
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: LIST
2456: IN
2457: IFFALSE 2473
// points := points + 30 ;
2459: LD_ADDR_VAR 0 3
2463: PUSH
2464: LD_VAR 0 3
2468: PUSH
2469: LD_INT 30
2471: PLUS
2472: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_selfpropelled_bomb , ru_time_lapser , ru_rocket , us_double_laser ] then
2473: LD_VAR 0 1
2477: PPUSH
2478: CALL_OW 264
2482: PUSH
2483: LD_INT 29
2485: PUSH
2486: LD_INT 49
2488: PUSH
2489: LD_INT 47
2491: PUSH
2492: LD_INT 10
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: LIST
2499: LIST
2500: IN
2501: IFFALSE 2517
// points := points + 50 ;
2503: LD_ADDR_VAR 0 3
2507: PUSH
2508: LD_VAR 0 3
2512: PUSH
2513: LD_INT 50
2515: PLUS
2516: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ru_siberium_rocket , us_siberium_rocket ] then
2517: LD_VAR 0 1
2521: PPUSH
2522: CALL_OW 264
2526: PUSH
2527: LD_INT 48
2529: PUSH
2530: LD_INT 8
2532: PUSH
2533: EMPTY
2534: LIST
2535: LIST
2536: IN
2537: IFFALSE 2553
// points := points + 100 ;
2539: LD_ADDR_VAR 0 3
2543: PUSH
2544: LD_VAR 0 3
2548: PUSH
2549: LD_INT 100
2551: PLUS
2552: ST_TO_ADDR
// result := points ;
2553: LD_ADDR_VAR 0 2
2557: PUSH
2558: LD_VAR 0 3
2562: ST_TO_ADDR
// end ; end_of_file
2563: LD_VAR 0 2
2567: RET
// every 0 0$01 trigger time do var filter , i , side , driver , un ;
2568: LD_EXP 5
2572: IFFALSE 3217
2574: GO 2576
2576: DISABLE
2577: LD_INT 0
2579: PPUSH
2580: PPUSH
2581: PPUSH
2582: PPUSH
2583: PPUSH
// begin enable ;
2584: ENABLE
// if tick < 36 then
2585: LD_OWVAR 1
2589: PUSH
2590: LD_INT 36
2592: LESS
2593: IFFALSE 2605
// SetAreaMapShow ( exit_area , 1 ) ;
2595: LD_INT 4
2597: PPUSH
2598: LD_INT 1
2600: PPUSH
2601: CALL_OW 424
// time := time - 0 0$01 ;
2605: LD_ADDR_EXP 5
2609: PUSH
2610: LD_EXP 5
2614: PUSH
2615: LD_INT 35
2617: MINUS
2618: ST_TO_ADDR
// if time = 0 0$00 then
2619: LD_EXP 5
2623: PUSH
2624: LD_INT 0
2626: EQUAL
2627: IFFALSE 2690
// if p1 > p2 and p1 > p3 and p1 > p4 and p1 > p5 then
2629: LD_EXP 7
2633: PUSH
2634: LD_EXP 8
2638: GREATER
2639: PUSH
2640: LD_EXP 7
2644: PUSH
2645: LD_EXP 9
2649: GREATER
2650: AND
2651: PUSH
2652: LD_EXP 7
2656: PUSH
2657: LD_EXP 10
2661: GREATER
2662: AND
2663: PUSH
2664: LD_EXP 7
2668: PUSH
2669: LD_EXP 11
2673: GREATER
2674: AND
2675: IFFALSE 2683
// YouWin else
2677: CALL_OW 103
2681: GO 2690
// YouLost (  ) ;
2683: LD_STRING 
2685: PPUSH
2686: CALL_OW 104
// filter := FilterUnitsInArea ( exit_area , [ f_type , unit_vehicle ] ) ;
2690: LD_ADDR_VAR 0 1
2694: PUSH
2695: LD_INT 4
2697: PPUSH
2698: LD_INT 21
2700: PUSH
2701: LD_INT 2
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: PPUSH
2708: CALL_OW 70
2712: ST_TO_ADDR
// if filter then
2713: LD_VAR 0 1
2717: IFFALSE 3007
// for i = 1 to filter do
2719: LD_ADDR_VAR 0 2
2723: PUSH
2724: DOUBLE
2725: LD_INT 1
2727: DEC
2728: ST_TO_ADDR
2729: LD_VAR 0 1
2733: PUSH
2734: FOR_TO
2735: IFFALSE 3005
// begin side := GetSide ( filter [ i ] ) ;
2737: LD_ADDR_VAR 0 3
2741: PUSH
2742: LD_VAR 0 1
2746: PUSH
2747: LD_VAR 0 2
2751: ARRAY
2752: PPUSH
2753: CALL_OW 255
2757: ST_TO_ADDR
// driver := IsDrivenBy ( filter [ i ] ) ;
2758: LD_ADDR_VAR 0 4
2762: PUSH
2763: LD_VAR 0 1
2767: PUSH
2768: LD_VAR 0 2
2772: ARRAY
2773: PPUSH
2774: CALL_OW 311
2778: ST_TO_ADDR
// un := filter [ i ] ;
2779: LD_ADDR_VAR 0 5
2783: PUSH
2784: LD_VAR 0 1
2788: PUSH
2789: LD_VAR 0 2
2793: ARRAY
2794: ST_TO_ADDR
// if IsInUnit ( driver ) then
2795: LD_VAR 0 4
2799: PPUSH
2800: CALL_OW 310
2804: IFFALSE 2815
// ComExitVehicle ( driver ) ;
2806: LD_VAR 0 4
2810: PPUSH
2811: CALL_OW 121
// Wait ( 0 0$0.3 ) ;
2815: LD_INT 10
2817: PPUSH
2818: CALL_OW 67
// RemoveUnit ( filter [ i ] ) ;
2822: LD_VAR 0 1
2826: PUSH
2827: LD_VAR 0 2
2831: ARRAY
2832: PPUSH
2833: CALL_OW 64
// case side of 1 :
2837: LD_VAR 0 3
2841: PUSH
2842: LD_INT 1
2844: DOUBLE
2845: EQUAL
2846: IFTRUE 2850
2848: GO 2874
2850: POP
// p1 := p1 + ScoreBoard ( un ) ; 2 :
2851: LD_ADDR_EXP 7
2855: PUSH
2856: LD_EXP 7
2860: PUSH
2861: LD_VAR 0 5
2865: PPUSH
2866: CALL 1953 0 1
2870: PLUS
2871: ST_TO_ADDR
2872: GO 3003
2874: LD_INT 2
2876: DOUBLE
2877: EQUAL
2878: IFTRUE 2882
2880: GO 2906
2882: POP
// p2 := p2 + ScoreBoard ( un ) ; 3 :
2883: LD_ADDR_EXP 8
2887: PUSH
2888: LD_EXP 8
2892: PUSH
2893: LD_VAR 0 5
2897: PPUSH
2898: CALL 1953 0 1
2902: PLUS
2903: ST_TO_ADDR
2904: GO 3003
2906: LD_INT 3
2908: DOUBLE
2909: EQUAL
2910: IFTRUE 2914
2912: GO 2938
2914: POP
// p3 := p3 + ScoreBoard ( un ) ; 4 :
2915: LD_ADDR_EXP 9
2919: PUSH
2920: LD_EXP 9
2924: PUSH
2925: LD_VAR 0 5
2929: PPUSH
2930: CALL 1953 0 1
2934: PLUS
2935: ST_TO_ADDR
2936: GO 3003
2938: LD_INT 4
2940: DOUBLE
2941: EQUAL
2942: IFTRUE 2946
2944: GO 2970
2946: POP
// p4 := p4 + ScoreBoard ( un ) ; 5 :
2947: LD_ADDR_EXP 10
2951: PUSH
2952: LD_EXP 10
2956: PUSH
2957: LD_VAR 0 5
2961: PPUSH
2962: CALL 1953 0 1
2966: PLUS
2967: ST_TO_ADDR
2968: GO 3003
2970: LD_INT 5
2972: DOUBLE
2973: EQUAL
2974: IFTRUE 2978
2976: GO 3002
2978: POP
// p5 := p5 + ScoreBoard ( un ) ; end ;
2979: LD_ADDR_EXP 11
2983: PUSH
2984: LD_EXP 11
2988: PUSH
2989: LD_VAR 0 5
2993: PPUSH
2994: CALL 1953 0 1
2998: PLUS
2999: ST_TO_ADDR
3000: GO 3003
3002: POP
// end ;
3003: GO 2734
3005: POP
3006: POP
// case players of 3 :
3007: LD_EXP 3
3011: PUSH
3012: LD_INT 3
3014: DOUBLE
3015: EQUAL
3016: IFTRUE 3020
3018: GO 3070
3020: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 ] ;
3021: LD_ADDR_OWVAR 47
3025: PUSH
3026: LD_STRING #tick
3028: PUSH
3029: LD_EXP 5
3033: PUSH
3034: LD_STRING #player1
3036: PUSH
3037: LD_EXP 7
3041: PUSH
3042: LD_STRING #player2
3044: PUSH
3045: LD_EXP 8
3049: PUSH
3050: LD_STRING #player3
3052: PUSH
3053: LD_EXP 9
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: LIST
3064: LIST
3065: LIST
3066: LIST
3067: ST_TO_ADDR
// end ; 4 :
3068: GO 3217
3070: LD_INT 4
3072: DOUBLE
3073: EQUAL
3074: IFTRUE 3078
3076: GO 3138
3078: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 , #player4 , p4 ] ;
3079: LD_ADDR_OWVAR 47
3083: PUSH
3084: LD_STRING #tick
3086: PUSH
3087: LD_EXP 5
3091: PUSH
3092: LD_STRING #player1
3094: PUSH
3095: LD_EXP 7
3099: PUSH
3100: LD_STRING #player2
3102: PUSH
3103: LD_EXP 8
3107: PUSH
3108: LD_STRING #player3
3110: PUSH
3111: LD_EXP 9
3115: PUSH
3116: LD_STRING #player4
3118: PUSH
3119: LD_EXP 10
3123: PUSH
3124: EMPTY
3125: LIST
3126: LIST
3127: LIST
3128: LIST
3129: LIST
3130: LIST
3131: LIST
3132: LIST
3133: LIST
3134: LIST
3135: ST_TO_ADDR
// end ; 5 :
3136: GO 3217
3138: LD_INT 5
3140: DOUBLE
3141: EQUAL
3142: IFTRUE 3146
3144: GO 3216
3146: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 , #player4 , p4 , #player5 , p5 ] ;
3147: LD_ADDR_OWVAR 47
3151: PUSH
3152: LD_STRING #tick
3154: PUSH
3155: LD_EXP 5
3159: PUSH
3160: LD_STRING #player1
3162: PUSH
3163: LD_EXP 7
3167: PUSH
3168: LD_STRING #player2
3170: PUSH
3171: LD_EXP 8
3175: PUSH
3176: LD_STRING #player3
3178: PUSH
3179: LD_EXP 9
3183: PUSH
3184: LD_STRING #player4
3186: PUSH
3187: LD_EXP 10
3191: PUSH
3192: LD_STRING #player5
3194: PUSH
3195: LD_EXP 11
3199: PUSH
3200: EMPTY
3201: LIST
3202: LIST
3203: LIST
3204: LIST
3205: LIST
3206: LIST
3207: LIST
3208: LIST
3209: LIST
3210: LIST
3211: LIST
3212: LIST
3213: ST_TO_ADDR
// end ; end ;
3214: GO 3217
3216: POP
// end ;
3217: PPOPN 5
3219: END
// every 0 0$05 trigger time do var chance , p ;
3220: LD_EXP 5
3224: IFFALSE 3371
3226: GO 3228
3228: DISABLE
3229: LD_INT 0
3231: PPUSH
3232: PPUSH
// begin enable ;
3233: ENABLE
// Wait ( Rand ( 0 0$01 , 0 0$06 ) ) ;
3234: LD_INT 35
3236: PPUSH
3237: LD_INT 210
3239: PPUSH
3240: CALL_OW 12
3244: PPUSH
3245: CALL_OW 67
// if FilterAllUnits ( [ f_type , unit_vehicle ] ) < veh_amount then
3249: LD_INT 21
3251: PUSH
3252: LD_INT 2
3254: PUSH
3255: EMPTY
3256: LIST
3257: LIST
3258: PPUSH
3259: CALL_OW 69
3263: PUSH
3264: LD_EXP 6
3268: LESS
3269: IFFALSE 3371
// begin SpawnCar ( false , veh_spawn ) ;
3271: LD_INT 0
3273: PPUSH
3274: LD_INT 5
3276: PPUSH
3277: CALL 946 0 2
// if sib_bomb and FilterAllUnits ( [ f_or , [ [ f_weapon , us_siberium_rocket ] , [ f_weapon , ru_siberium_rocket ] ] ] ) = 0 then
3281: LD_EXP 4
3285: PUSH
3286: LD_INT 2
3288: PUSH
3289: LD_INT 34
3291: PUSH
3292: LD_INT 8
3294: PUSH
3295: EMPTY
3296: LIST
3297: LIST
3298: PUSH
3299: LD_INT 34
3301: PUSH
3302: LD_INT 48
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: PUSH
3309: EMPTY
3310: LIST
3311: LIST
3312: PUSH
3313: EMPTY
3314: LIST
3315: LIST
3316: PPUSH
3317: CALL_OW 69
3321: PUSH
3322: LD_INT 0
3324: EQUAL
3325: AND
3326: IFFALSE 3371
// begin chance := 23 ;
3328: LD_ADDR_VAR 0 1
3332: PUSH
3333: LD_INT 23
3335: ST_TO_ADDR
// p := Rand ( 0 , 100 ) ;
3336: LD_ADDR_VAR 0 2
3340: PUSH
3341: LD_INT 0
3343: PPUSH
3344: LD_INT 100
3346: PPUSH
3347: CALL_OW 12
3351: ST_TO_ADDR
// if p < chance then
3352: LD_VAR 0 2
3356: PUSH
3357: LD_VAR 0 1
3361: LESS
3362: IFFALSE 3371
// SpawnSibRocket ( veh_spawn ) ;
3364: LD_INT 5
3366: PPUSH
3367: CALL 1784 0 1
// end ; end ; end ; end_of_file
3371: PPOPN 2
3373: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
3374: LD_INT 0
3376: PPUSH
3377: PPUSH
3378: PPUSH
3379: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
3380: LD_VAR 0 1
3384: PPUSH
3385: CALL_OW 264
3389: PUSH
3390: LD_INT 91
3392: EQUAL
3393: IFFALSE 3465
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
3395: LD_INT 68
3397: PPUSH
3398: LD_VAR 0 1
3402: PPUSH
3403: CALL_OW 255
3407: PPUSH
3408: CALL_OW 321
3412: PUSH
3413: LD_INT 2
3415: EQUAL
3416: IFFALSE 3428
// eff := 70 else
3418: LD_ADDR_VAR 0 4
3422: PUSH
3423: LD_INT 70
3425: ST_TO_ADDR
3426: GO 3436
// eff := 30 ;
3428: LD_ADDR_VAR 0 4
3432: PUSH
3433: LD_INT 30
3435: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
3436: LD_VAR 0 1
3440: PPUSH
3441: CALL_OW 250
3445: PPUSH
3446: LD_VAR 0 1
3450: PPUSH
3451: CALL_OW 251
3455: PPUSH
3456: LD_VAR 0 4
3460: PPUSH
3461: CALL_OW 495
// end ; end ;
3465: LD_VAR 0 2
3469: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
3470: LD_INT 0
3472: PPUSH
// end ;
3473: LD_VAR 0 4
3477: RET
// export function SOS_Command ( cmd ) ; begin
3478: LD_INT 0
3480: PPUSH
// end ;
3481: LD_VAR 0 2
3485: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
3486: LD_INT 0
3488: PPUSH
// end ;
3489: LD_VAR 0 6
3493: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
3494: LD_INT 0
3496: PPUSH
3497: PPUSH
// if not vehicle or not factory then
3498: LD_VAR 0 1
3502: NOT
3503: PUSH
3504: LD_VAR 0 2
3508: NOT
3509: OR
3510: IFFALSE 3514
// exit ;
3512: GO 3745
// if factoryWaypoints >= factory then
3514: LD_EXP 81
3518: PUSH
3519: LD_VAR 0 2
3523: GREATEREQUAL
3524: IFFALSE 3745
// if factoryWaypoints [ factory ] then
3526: LD_EXP 81
3530: PUSH
3531: LD_VAR 0 2
3535: ARRAY
3536: IFFALSE 3745
// begin if GetControl ( vehicle ) = control_manual then
3538: LD_VAR 0 1
3542: PPUSH
3543: CALL_OW 263
3547: PUSH
3548: LD_INT 1
3550: EQUAL
3551: IFFALSE 3632
// begin driver := IsDrivenBy ( vehicle ) ;
3553: LD_ADDR_VAR 0 4
3557: PUSH
3558: LD_VAR 0 1
3562: PPUSH
3563: CALL_OW 311
3567: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
3568: LD_VAR 0 4
3572: PPUSH
3573: LD_EXP 81
3577: PUSH
3578: LD_VAR 0 2
3582: ARRAY
3583: PUSH
3584: LD_INT 3
3586: ARRAY
3587: PPUSH
3588: LD_EXP 81
3592: PUSH
3593: LD_VAR 0 2
3597: ARRAY
3598: PUSH
3599: LD_INT 4
3601: ARRAY
3602: PPUSH
3603: CALL_OW 171
// AddComExitVehicle ( driver ) ;
3607: LD_VAR 0 4
3611: PPUSH
3612: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
3616: LD_VAR 0 4
3620: PPUSH
3621: LD_VAR 0 2
3625: PPUSH
3626: CALL_OW 180
// end else
3630: GO 3745
// if GetControl ( vehicle ) = control_remote then
3632: LD_VAR 0 1
3636: PPUSH
3637: CALL_OW 263
3641: PUSH
3642: LD_INT 2
3644: EQUAL
3645: IFFALSE 3706
// begin wait ( 0 0$2 ) ;
3647: LD_INT 70
3649: PPUSH
3650: CALL_OW 67
// if Connect ( vehicle ) then
3654: LD_VAR 0 1
3658: PPUSH
3659: CALL 31563 0 1
3663: IFFALSE 3704
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
3665: LD_VAR 0 1
3669: PPUSH
3670: LD_EXP 81
3674: PUSH
3675: LD_VAR 0 2
3679: ARRAY
3680: PUSH
3681: LD_INT 3
3683: ARRAY
3684: PPUSH
3685: LD_EXP 81
3689: PUSH
3690: LD_VAR 0 2
3694: ARRAY
3695: PUSH
3696: LD_INT 4
3698: ARRAY
3699: PPUSH
3700: CALL_OW 171
// end else
3704: GO 3745
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
3706: LD_VAR 0 1
3710: PPUSH
3711: LD_EXP 81
3715: PUSH
3716: LD_VAR 0 2
3720: ARRAY
3721: PUSH
3722: LD_INT 3
3724: ARRAY
3725: PPUSH
3726: LD_EXP 81
3730: PUSH
3731: LD_VAR 0 2
3735: ARRAY
3736: PUSH
3737: LD_INT 4
3739: ARRAY
3740: PPUSH
3741: CALL_OW 171
// end ; end ;
3745: LD_VAR 0 3
3749: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
3750: LD_INT 0
3752: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
3753: LD_VAR 0 1
3757: PUSH
3758: LD_INT 250
3760: EQUAL
3761: PUSH
3762: LD_VAR 0 2
3766: PPUSH
3767: CALL_OW 264
3771: PUSH
3772: LD_INT 81
3774: EQUAL
3775: AND
3776: IFFALSE 3797
// MinerPlaceMine ( unit , x , y ) ;
3778: LD_VAR 0 2
3782: PPUSH
3783: LD_VAR 0 4
3787: PPUSH
3788: LD_VAR 0 5
3792: PPUSH
3793: CALL 6182 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
3797: LD_VAR 0 1
3801: PUSH
3802: LD_INT 251
3804: EQUAL
3805: PUSH
3806: LD_VAR 0 2
3810: PPUSH
3811: CALL_OW 264
3815: PUSH
3816: LD_INT 81
3818: EQUAL
3819: AND
3820: IFFALSE 3841
// MinerDetonateMine ( unit , x , y ) ;
3822: LD_VAR 0 2
3826: PPUSH
3827: LD_VAR 0 4
3831: PPUSH
3832: LD_VAR 0 5
3836: PPUSH
3837: CALL 6457 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
3841: LD_VAR 0 1
3845: PUSH
3846: LD_INT 252
3848: EQUAL
3849: PUSH
3850: LD_VAR 0 2
3854: PPUSH
3855: CALL_OW 264
3859: PUSH
3860: LD_INT 81
3862: EQUAL
3863: AND
3864: IFFALSE 3885
// MinerCreateMinefield ( unit , x , y ) ;
3866: LD_VAR 0 2
3870: PPUSH
3871: LD_VAR 0 4
3875: PPUSH
3876: LD_VAR 0 5
3880: PPUSH
3881: CALL 6874 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
3885: LD_VAR 0 1
3889: PUSH
3890: LD_INT 253
3892: EQUAL
3893: PUSH
3894: LD_VAR 0 2
3898: PPUSH
3899: CALL_OW 257
3903: PUSH
3904: LD_INT 5
3906: EQUAL
3907: AND
3908: IFFALSE 3929
// ComBinocular ( unit , x , y ) ;
3910: LD_VAR 0 2
3914: PPUSH
3915: LD_VAR 0 4
3919: PPUSH
3920: LD_VAR 0 5
3924: PPUSH
3925: CALL 7243 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
3929: LD_VAR 0 1
3933: PUSH
3934: LD_INT 254
3936: EQUAL
3937: PUSH
3938: LD_VAR 0 2
3942: PPUSH
3943: CALL_OW 264
3947: PUSH
3948: LD_INT 99
3950: EQUAL
3951: AND
3952: PUSH
3953: LD_VAR 0 3
3957: PPUSH
3958: CALL_OW 263
3962: PUSH
3963: LD_INT 3
3965: EQUAL
3966: AND
3967: IFFALSE 3983
// HackDestroyVehicle ( unit , selectedUnit ) ;
3969: LD_VAR 0 2
3973: PPUSH
3974: LD_VAR 0 3
3978: PPUSH
3979: CALL 5546 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
3983: LD_VAR 0 1
3987: PUSH
3988: LD_INT 255
3990: EQUAL
3991: PUSH
3992: LD_VAR 0 2
3996: PPUSH
3997: CALL_OW 264
4001: PUSH
4002: LD_INT 14
4004: PUSH
4005: LD_INT 53
4007: PUSH
4008: EMPTY
4009: LIST
4010: LIST
4011: IN
4012: AND
4013: PUSH
4014: LD_VAR 0 4
4018: PPUSH
4019: LD_VAR 0 5
4023: PPUSH
4024: CALL_OW 488
4028: AND
4029: IFFALSE 4053
// CutTreeXYR ( unit , x , y , 12 ) ;
4031: LD_VAR 0 2
4035: PPUSH
4036: LD_VAR 0 4
4040: PPUSH
4041: LD_VAR 0 5
4045: PPUSH
4046: LD_INT 12
4048: PPUSH
4049: CALL 4116 0 4
// if cmd = 256 then
4053: LD_VAR 0 1
4057: PUSH
4058: LD_INT 256
4060: EQUAL
4061: IFFALSE 4082
// SetFactoryWaypoint ( unit , x , y ) ;
4063: LD_VAR 0 2
4067: PPUSH
4068: LD_VAR 0 4
4072: PPUSH
4073: LD_VAR 0 5
4077: PPUSH
4078: CALL 22146 0 3
// if cmd = 257 then
4082: LD_VAR 0 1
4086: PUSH
4087: LD_INT 257
4089: EQUAL
4090: IFFALSE 4111
// SetWarehouseGatheringPoint ( unit , x , y ) ;
4092: LD_VAR 0 2
4096: PPUSH
4097: LD_VAR 0 4
4101: PPUSH
4102: LD_VAR 0 5
4106: PPUSH
4107: CALL 22508 0 3
// end ;
4111: LD_VAR 0 6
4115: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
4116: LD_INT 0
4118: PPUSH
4119: PPUSH
4120: PPUSH
4121: PPUSH
4122: PPUSH
4123: PPUSH
4124: PPUSH
4125: PPUSH
4126: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
4127: LD_VAR 0 1
4131: NOT
4132: PUSH
4133: LD_VAR 0 2
4137: PPUSH
4138: LD_VAR 0 3
4142: PPUSH
4143: CALL_OW 488
4147: NOT
4148: OR
4149: PUSH
4150: LD_VAR 0 4
4154: NOT
4155: OR
4156: IFFALSE 4160
// exit ;
4158: GO 4500
// list := [ ] ;
4160: LD_ADDR_VAR 0 13
4164: PUSH
4165: EMPTY
4166: ST_TO_ADDR
// if x - r < 0 then
4167: LD_VAR 0 2
4171: PUSH
4172: LD_VAR 0 4
4176: MINUS
4177: PUSH
4178: LD_INT 0
4180: LESS
4181: IFFALSE 4193
// min_x := 0 else
4183: LD_ADDR_VAR 0 7
4187: PUSH
4188: LD_INT 0
4190: ST_TO_ADDR
4191: GO 4209
// min_x := x - r ;
4193: LD_ADDR_VAR 0 7
4197: PUSH
4198: LD_VAR 0 2
4202: PUSH
4203: LD_VAR 0 4
4207: MINUS
4208: ST_TO_ADDR
// if y - r < 0 then
4209: LD_VAR 0 3
4213: PUSH
4214: LD_VAR 0 4
4218: MINUS
4219: PUSH
4220: LD_INT 0
4222: LESS
4223: IFFALSE 4235
// min_y := 0 else
4225: LD_ADDR_VAR 0 8
4229: PUSH
4230: LD_INT 0
4232: ST_TO_ADDR
4233: GO 4251
// min_y := y - r ;
4235: LD_ADDR_VAR 0 8
4239: PUSH
4240: LD_VAR 0 3
4244: PUSH
4245: LD_VAR 0 4
4249: MINUS
4250: ST_TO_ADDR
// max_x := x + r ;
4251: LD_ADDR_VAR 0 9
4255: PUSH
4256: LD_VAR 0 2
4260: PUSH
4261: LD_VAR 0 4
4265: PLUS
4266: ST_TO_ADDR
// max_y := y + r ;
4267: LD_ADDR_VAR 0 10
4271: PUSH
4272: LD_VAR 0 3
4276: PUSH
4277: LD_VAR 0 4
4281: PLUS
4282: ST_TO_ADDR
// for _x = min_x to max_x do
4283: LD_ADDR_VAR 0 11
4287: PUSH
4288: DOUBLE
4289: LD_VAR 0 7
4293: DEC
4294: ST_TO_ADDR
4295: LD_VAR 0 9
4299: PUSH
4300: FOR_TO
4301: IFFALSE 4418
// for _y = min_y to max_y do
4303: LD_ADDR_VAR 0 12
4307: PUSH
4308: DOUBLE
4309: LD_VAR 0 8
4313: DEC
4314: ST_TO_ADDR
4315: LD_VAR 0 10
4319: PUSH
4320: FOR_TO
4321: IFFALSE 4414
// begin if not ValidHex ( _x , _y ) then
4323: LD_VAR 0 11
4327: PPUSH
4328: LD_VAR 0 12
4332: PPUSH
4333: CALL_OW 488
4337: NOT
4338: IFFALSE 4342
// continue ;
4340: GO 4320
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
4342: LD_VAR 0 11
4346: PPUSH
4347: LD_VAR 0 12
4351: PPUSH
4352: CALL_OW 351
4356: PUSH
4357: LD_VAR 0 11
4361: PPUSH
4362: LD_VAR 0 12
4366: PPUSH
4367: CALL_OW 554
4371: AND
4372: IFFALSE 4412
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
4374: LD_ADDR_VAR 0 13
4378: PUSH
4379: LD_VAR 0 13
4383: PPUSH
4384: LD_VAR 0 13
4388: PUSH
4389: LD_INT 1
4391: PLUS
4392: PPUSH
4393: LD_VAR 0 11
4397: PUSH
4398: LD_VAR 0 12
4402: PUSH
4403: EMPTY
4404: LIST
4405: LIST
4406: PPUSH
4407: CALL_OW 2
4411: ST_TO_ADDR
// end ;
4412: GO 4320
4414: POP
4415: POP
4416: GO 4300
4418: POP
4419: POP
// if not list then
4420: LD_VAR 0 13
4424: NOT
4425: IFFALSE 4429
// exit ;
4427: GO 4500
// for i in list do
4429: LD_ADDR_VAR 0 6
4433: PUSH
4434: LD_VAR 0 13
4438: PUSH
4439: FOR_IN
4440: IFFALSE 4498
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
4442: LD_VAR 0 1
4446: PPUSH
4447: LD_STRING M
4449: PUSH
4450: LD_VAR 0 6
4454: PUSH
4455: LD_INT 1
4457: ARRAY
4458: PUSH
4459: LD_VAR 0 6
4463: PUSH
4464: LD_INT 2
4466: ARRAY
4467: PUSH
4468: LD_INT 0
4470: PUSH
4471: LD_INT 0
4473: PUSH
4474: LD_INT 0
4476: PUSH
4477: LD_INT 0
4479: PUSH
4480: EMPTY
4481: LIST
4482: LIST
4483: LIST
4484: LIST
4485: LIST
4486: LIST
4487: LIST
4488: PUSH
4489: EMPTY
4490: LIST
4491: PPUSH
4492: CALL_OW 447
4496: GO 4439
4498: POP
4499: POP
// end ;
4500: LD_VAR 0 5
4504: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
4505: LD_EXP 12
4509: NOT
4510: IFFALSE 4560
4512: GO 4514
4514: DISABLE
// begin initHack := true ;
4515: LD_ADDR_EXP 12
4519: PUSH
4520: LD_INT 1
4522: ST_TO_ADDR
// hackTanks := [ ] ;
4523: LD_ADDR_EXP 13
4527: PUSH
4528: EMPTY
4529: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
4530: LD_ADDR_EXP 14
4534: PUSH
4535: EMPTY
4536: ST_TO_ADDR
// hackLimit := 3 ;
4537: LD_ADDR_EXP 15
4541: PUSH
4542: LD_INT 3
4544: ST_TO_ADDR
// hackDist := 12 ;
4545: LD_ADDR_EXP 16
4549: PUSH
4550: LD_INT 12
4552: ST_TO_ADDR
// hackCounter := [ ] ;
4553: LD_ADDR_EXP 17
4557: PUSH
4558: EMPTY
4559: ST_TO_ADDR
// end ;
4560: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
4561: LD_EXP 12
4565: PUSH
4566: LD_INT 34
4568: PUSH
4569: LD_INT 99
4571: PUSH
4572: EMPTY
4573: LIST
4574: LIST
4575: PPUSH
4576: CALL_OW 69
4580: AND
4581: IFFALSE 4834
4583: GO 4585
4585: DISABLE
4586: LD_INT 0
4588: PPUSH
4589: PPUSH
// begin enable ;
4590: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
4591: LD_ADDR_VAR 0 1
4595: PUSH
4596: LD_INT 34
4598: PUSH
4599: LD_INT 99
4601: PUSH
4602: EMPTY
4603: LIST
4604: LIST
4605: PPUSH
4606: CALL_OW 69
4610: PUSH
4611: FOR_IN
4612: IFFALSE 4832
// begin if not i in hackTanks then
4614: LD_VAR 0 1
4618: PUSH
4619: LD_EXP 13
4623: IN
4624: NOT
4625: IFFALSE 4708
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
4627: LD_ADDR_EXP 13
4631: PUSH
4632: LD_EXP 13
4636: PPUSH
4637: LD_EXP 13
4641: PUSH
4642: LD_INT 1
4644: PLUS
4645: PPUSH
4646: LD_VAR 0 1
4650: PPUSH
4651: CALL_OW 1
4655: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
4656: LD_ADDR_EXP 14
4660: PUSH
4661: LD_EXP 14
4665: PPUSH
4666: LD_EXP 14
4670: PUSH
4671: LD_INT 1
4673: PLUS
4674: PPUSH
4675: EMPTY
4676: PPUSH
4677: CALL_OW 1
4681: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
4682: LD_ADDR_EXP 17
4686: PUSH
4687: LD_EXP 17
4691: PPUSH
4692: LD_EXP 17
4696: PUSH
4697: LD_INT 1
4699: PLUS
4700: PPUSH
4701: EMPTY
4702: PPUSH
4703: CALL_OW 1
4707: ST_TO_ADDR
// end ; if not IsOk ( i ) then
4708: LD_VAR 0 1
4712: PPUSH
4713: CALL_OW 302
4717: NOT
4718: IFFALSE 4731
// begin HackUnlinkAll ( i ) ;
4720: LD_VAR 0 1
4724: PPUSH
4725: CALL 4837 0 1
// continue ;
4729: GO 4611
// end ; HackCheckCapturedStatus ( i ) ;
4731: LD_VAR 0 1
4735: PPUSH
4736: CALL 5280 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
4740: LD_ADDR_VAR 0 2
4744: PUSH
4745: LD_INT 81
4747: PUSH
4748: LD_VAR 0 1
4752: PPUSH
4753: CALL_OW 255
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: PUSH
4762: LD_INT 33
4764: PUSH
4765: LD_INT 3
4767: PUSH
4768: EMPTY
4769: LIST
4770: LIST
4771: PUSH
4772: LD_INT 91
4774: PUSH
4775: LD_VAR 0 1
4779: PUSH
4780: LD_EXP 16
4784: PUSH
4785: EMPTY
4786: LIST
4787: LIST
4788: LIST
4789: PUSH
4790: LD_INT 50
4792: PUSH
4793: EMPTY
4794: LIST
4795: PUSH
4796: EMPTY
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: PPUSH
4802: CALL_OW 69
4806: ST_TO_ADDR
// if not tmp then
4807: LD_VAR 0 2
4811: NOT
4812: IFFALSE 4816
// continue ;
4814: GO 4611
// HackLink ( i , tmp ) ;
4816: LD_VAR 0 1
4820: PPUSH
4821: LD_VAR 0 2
4825: PPUSH
4826: CALL 4973 0 2
// end ;
4830: GO 4611
4832: POP
4833: POP
// end ;
4834: PPOPN 2
4836: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
4837: LD_INT 0
4839: PPUSH
4840: PPUSH
4841: PPUSH
// if not hack in hackTanks then
4842: LD_VAR 0 1
4846: PUSH
4847: LD_EXP 13
4851: IN
4852: NOT
4853: IFFALSE 4857
// exit ;
4855: GO 4968
// index := GetElementIndex ( hackTanks , hack ) ;
4857: LD_ADDR_VAR 0 4
4861: PUSH
4862: LD_EXP 13
4866: PPUSH
4867: LD_VAR 0 1
4871: PPUSH
4872: CALL 28379 0 2
4876: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
4877: LD_EXP 14
4881: PUSH
4882: LD_VAR 0 4
4886: ARRAY
4887: IFFALSE 4968
// begin for i in hackTanksCaptured [ index ] do
4889: LD_ADDR_VAR 0 3
4893: PUSH
4894: LD_EXP 14
4898: PUSH
4899: LD_VAR 0 4
4903: ARRAY
4904: PUSH
4905: FOR_IN
4906: IFFALSE 4932
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
4908: LD_VAR 0 3
4912: PUSH
4913: LD_INT 1
4915: ARRAY
4916: PPUSH
4917: LD_VAR 0 3
4921: PUSH
4922: LD_INT 2
4924: ARRAY
4925: PPUSH
4926: CALL_OW 235
4930: GO 4905
4932: POP
4933: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
4934: LD_ADDR_EXP 14
4938: PUSH
4939: LD_EXP 14
4943: PPUSH
4944: LD_VAR 0 4
4948: PPUSH
4949: EMPTY
4950: PPUSH
4951: CALL_OW 1
4955: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
4956: LD_VAR 0 1
4960: PPUSH
4961: LD_INT 0
4963: PPUSH
4964: CALL_OW 505
// end ; end ;
4968: LD_VAR 0 2
4972: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
4973: LD_INT 0
4975: PPUSH
4976: PPUSH
4977: PPUSH
// if not hack in hackTanks or not vehicles then
4978: LD_VAR 0 1
4982: PUSH
4983: LD_EXP 13
4987: IN
4988: NOT
4989: PUSH
4990: LD_VAR 0 2
4994: NOT
4995: OR
4996: IFFALSE 5000
// exit ;
4998: GO 5275
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
5000: LD_ADDR_VAR 0 2
5004: PUSH
5005: LD_VAR 0 1
5009: PPUSH
5010: LD_VAR 0 2
5014: PPUSH
5015: LD_INT 1
5017: PPUSH
5018: LD_INT 1
5020: PPUSH
5021: CALL 29029 0 4
5025: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
5026: LD_ADDR_VAR 0 5
5030: PUSH
5031: LD_EXP 13
5035: PPUSH
5036: LD_VAR 0 1
5040: PPUSH
5041: CALL 28379 0 2
5045: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
5046: LD_EXP 14
5050: PUSH
5051: LD_VAR 0 5
5055: ARRAY
5056: PUSH
5057: LD_EXP 15
5061: LESS
5062: IFFALSE 5251
// begin for i := 1 to vehicles do
5064: LD_ADDR_VAR 0 4
5068: PUSH
5069: DOUBLE
5070: LD_INT 1
5072: DEC
5073: ST_TO_ADDR
5074: LD_VAR 0 2
5078: PUSH
5079: FOR_TO
5080: IFFALSE 5249
// begin if hackTanksCaptured [ index ] = hackLimit then
5082: LD_EXP 14
5086: PUSH
5087: LD_VAR 0 5
5091: ARRAY
5092: PUSH
5093: LD_EXP 15
5097: EQUAL
5098: IFFALSE 5102
// break ;
5100: GO 5249
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
5102: LD_ADDR_EXP 17
5106: PUSH
5107: LD_EXP 17
5111: PPUSH
5112: LD_VAR 0 5
5116: PPUSH
5117: LD_EXP 17
5121: PUSH
5122: LD_VAR 0 5
5126: ARRAY
5127: PUSH
5128: LD_INT 1
5130: PLUS
5131: PPUSH
5132: CALL_OW 1
5136: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
5137: LD_ADDR_EXP 14
5141: PUSH
5142: LD_EXP 14
5146: PPUSH
5147: LD_VAR 0 5
5151: PUSH
5152: LD_EXP 14
5156: PUSH
5157: LD_VAR 0 5
5161: ARRAY
5162: PUSH
5163: LD_INT 1
5165: PLUS
5166: PUSH
5167: EMPTY
5168: LIST
5169: LIST
5170: PPUSH
5171: LD_VAR 0 2
5175: PUSH
5176: LD_VAR 0 4
5180: ARRAY
5181: PUSH
5182: LD_VAR 0 2
5186: PUSH
5187: LD_VAR 0 4
5191: ARRAY
5192: PPUSH
5193: CALL_OW 255
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: PPUSH
5202: CALL 28594 0 3
5206: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
5207: LD_VAR 0 2
5211: PUSH
5212: LD_VAR 0 4
5216: ARRAY
5217: PPUSH
5218: LD_VAR 0 1
5222: PPUSH
5223: CALL_OW 255
5227: PPUSH
5228: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
5232: LD_VAR 0 2
5236: PUSH
5237: LD_VAR 0 4
5241: ARRAY
5242: PPUSH
5243: CALL_OW 141
// end ;
5247: GO 5079
5249: POP
5250: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
5251: LD_VAR 0 1
5255: PPUSH
5256: LD_EXP 14
5260: PUSH
5261: LD_VAR 0 5
5265: ARRAY
5266: PUSH
5267: LD_INT 0
5269: PLUS
5270: PPUSH
5271: CALL_OW 505
// end ;
5275: LD_VAR 0 3
5279: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
5280: LD_INT 0
5282: PPUSH
5283: PPUSH
5284: PPUSH
5285: PPUSH
// if not hack in hackTanks then
5286: LD_VAR 0 1
5290: PUSH
5291: LD_EXP 13
5295: IN
5296: NOT
5297: IFFALSE 5301
// exit ;
5299: GO 5541
// index := GetElementIndex ( hackTanks , hack ) ;
5301: LD_ADDR_VAR 0 4
5305: PUSH
5306: LD_EXP 13
5310: PPUSH
5311: LD_VAR 0 1
5315: PPUSH
5316: CALL 28379 0 2
5320: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
5321: LD_ADDR_VAR 0 3
5325: PUSH
5326: DOUBLE
5327: LD_EXP 14
5331: PUSH
5332: LD_VAR 0 4
5336: ARRAY
5337: INC
5338: ST_TO_ADDR
5339: LD_INT 1
5341: PUSH
5342: FOR_DOWNTO
5343: IFFALSE 5515
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
5345: LD_ADDR_VAR 0 5
5349: PUSH
5350: LD_EXP 14
5354: PUSH
5355: LD_VAR 0 4
5359: ARRAY
5360: PUSH
5361: LD_VAR 0 3
5365: ARRAY
5366: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
5367: LD_VAR 0 5
5371: PUSH
5372: LD_INT 1
5374: ARRAY
5375: PPUSH
5376: CALL_OW 302
5380: NOT
5381: PUSH
5382: LD_VAR 0 5
5386: PUSH
5387: LD_INT 1
5389: ARRAY
5390: PPUSH
5391: CALL_OW 255
5395: PUSH
5396: LD_VAR 0 1
5400: PPUSH
5401: CALL_OW 255
5405: NONEQUAL
5406: OR
5407: IFFALSE 5513
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
5409: LD_VAR 0 5
5413: PUSH
5414: LD_INT 1
5416: ARRAY
5417: PPUSH
5418: CALL_OW 305
5422: PUSH
5423: LD_VAR 0 5
5427: PUSH
5428: LD_INT 1
5430: ARRAY
5431: PPUSH
5432: CALL_OW 255
5436: PUSH
5437: LD_VAR 0 1
5441: PPUSH
5442: CALL_OW 255
5446: EQUAL
5447: AND
5448: IFFALSE 5472
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
5450: LD_VAR 0 5
5454: PUSH
5455: LD_INT 1
5457: ARRAY
5458: PPUSH
5459: LD_VAR 0 5
5463: PUSH
5464: LD_INT 2
5466: ARRAY
5467: PPUSH
5468: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
5472: LD_ADDR_EXP 14
5476: PUSH
5477: LD_EXP 14
5481: PPUSH
5482: LD_VAR 0 4
5486: PPUSH
5487: LD_EXP 14
5491: PUSH
5492: LD_VAR 0 4
5496: ARRAY
5497: PPUSH
5498: LD_VAR 0 3
5502: PPUSH
5503: CALL_OW 3
5507: PPUSH
5508: CALL_OW 1
5512: ST_TO_ADDR
// end ; end ;
5513: GO 5342
5515: POP
5516: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
5517: LD_VAR 0 1
5521: PPUSH
5522: LD_EXP 14
5526: PUSH
5527: LD_VAR 0 4
5531: ARRAY
5532: PUSH
5533: LD_INT 0
5535: PLUS
5536: PPUSH
5537: CALL_OW 505
// end ;
5541: LD_VAR 0 2
5545: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
5546: LD_INT 0
5548: PPUSH
5549: PPUSH
5550: PPUSH
5551: PPUSH
// if not hack in hackTanks then
5552: LD_VAR 0 1
5556: PUSH
5557: LD_EXP 13
5561: IN
5562: NOT
5563: IFFALSE 5567
// exit ;
5565: GO 5652
// index := GetElementIndex ( hackTanks , hack ) ;
5567: LD_ADDR_VAR 0 5
5571: PUSH
5572: LD_EXP 13
5576: PPUSH
5577: LD_VAR 0 1
5581: PPUSH
5582: CALL 28379 0 2
5586: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
5587: LD_ADDR_VAR 0 4
5591: PUSH
5592: DOUBLE
5593: LD_INT 1
5595: DEC
5596: ST_TO_ADDR
5597: LD_EXP 14
5601: PUSH
5602: LD_VAR 0 5
5606: ARRAY
5607: PUSH
5608: FOR_TO
5609: IFFALSE 5650
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
5611: LD_EXP 14
5615: PUSH
5616: LD_VAR 0 5
5620: ARRAY
5621: PUSH
5622: LD_VAR 0 4
5626: ARRAY
5627: PUSH
5628: LD_INT 1
5630: ARRAY
5631: PUSH
5632: LD_VAR 0 2
5636: EQUAL
5637: IFFALSE 5648
// KillUnit ( vehicle ) ;
5639: LD_VAR 0 2
5643: PPUSH
5644: CALL_OW 66
5648: GO 5608
5650: POP
5651: POP
// end ;
5652: LD_VAR 0 3
5656: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
5657: LD_EXP 18
5661: NOT
5662: IFFALSE 5697
5664: GO 5666
5666: DISABLE
// begin initMiner := true ;
5667: LD_ADDR_EXP 18
5671: PUSH
5672: LD_INT 1
5674: ST_TO_ADDR
// minersList := [ ] ;
5675: LD_ADDR_EXP 19
5679: PUSH
5680: EMPTY
5681: ST_TO_ADDR
// minerMinesList := [ ] ;
5682: LD_ADDR_EXP 20
5686: PUSH
5687: EMPTY
5688: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
5689: LD_ADDR_EXP 21
5693: PUSH
5694: LD_INT 5
5696: ST_TO_ADDR
// end ;
5697: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
5698: LD_EXP 18
5702: PUSH
5703: LD_INT 34
5705: PUSH
5706: LD_INT 81
5708: PUSH
5709: EMPTY
5710: LIST
5711: LIST
5712: PPUSH
5713: CALL_OW 69
5717: AND
5718: IFFALSE 6179
5720: GO 5722
5722: DISABLE
5723: LD_INT 0
5725: PPUSH
5726: PPUSH
5727: PPUSH
5728: PPUSH
// begin enable ;
5729: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
5730: LD_ADDR_VAR 0 1
5734: PUSH
5735: LD_INT 34
5737: PUSH
5738: LD_INT 81
5740: PUSH
5741: EMPTY
5742: LIST
5743: LIST
5744: PPUSH
5745: CALL_OW 69
5749: PUSH
5750: FOR_IN
5751: IFFALSE 5823
// begin if not i in minersList then
5753: LD_VAR 0 1
5757: PUSH
5758: LD_EXP 19
5762: IN
5763: NOT
5764: IFFALSE 5821
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
5766: LD_ADDR_EXP 19
5770: PUSH
5771: LD_EXP 19
5775: PPUSH
5776: LD_EXP 19
5780: PUSH
5781: LD_INT 1
5783: PLUS
5784: PPUSH
5785: LD_VAR 0 1
5789: PPUSH
5790: CALL_OW 1
5794: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
5795: LD_ADDR_EXP 20
5799: PUSH
5800: LD_EXP 20
5804: PPUSH
5805: LD_EXP 20
5809: PUSH
5810: LD_INT 1
5812: PLUS
5813: PPUSH
5814: EMPTY
5815: PPUSH
5816: CALL_OW 1
5820: ST_TO_ADDR
// end end ;
5821: GO 5750
5823: POP
5824: POP
// for i := minerMinesList downto 1 do
5825: LD_ADDR_VAR 0 1
5829: PUSH
5830: DOUBLE
5831: LD_EXP 20
5835: INC
5836: ST_TO_ADDR
5837: LD_INT 1
5839: PUSH
5840: FOR_DOWNTO
5841: IFFALSE 6177
// begin if IsLive ( minersList [ i ] ) then
5843: LD_EXP 19
5847: PUSH
5848: LD_VAR 0 1
5852: ARRAY
5853: PPUSH
5854: CALL_OW 300
5858: IFFALSE 5886
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
5860: LD_EXP 19
5864: PUSH
5865: LD_VAR 0 1
5869: ARRAY
5870: PPUSH
5871: LD_EXP 20
5875: PUSH
5876: LD_VAR 0 1
5880: ARRAY
5881: PPUSH
5882: CALL_OW 505
// if not minerMinesList [ i ] then
5886: LD_EXP 20
5890: PUSH
5891: LD_VAR 0 1
5895: ARRAY
5896: NOT
5897: IFFALSE 5901
// continue ;
5899: GO 5840
// for j := minerMinesList [ i ] downto 1 do
5901: LD_ADDR_VAR 0 2
5905: PUSH
5906: DOUBLE
5907: LD_EXP 20
5911: PUSH
5912: LD_VAR 0 1
5916: ARRAY
5917: INC
5918: ST_TO_ADDR
5919: LD_INT 1
5921: PUSH
5922: FOR_DOWNTO
5923: IFFALSE 6173
// begin side := GetSide ( minersList [ i ] ) ;
5925: LD_ADDR_VAR 0 3
5929: PUSH
5930: LD_EXP 19
5934: PUSH
5935: LD_VAR 0 1
5939: ARRAY
5940: PPUSH
5941: CALL_OW 255
5945: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
5946: LD_ADDR_VAR 0 4
5950: PUSH
5951: LD_EXP 20
5955: PUSH
5956: LD_VAR 0 1
5960: ARRAY
5961: PUSH
5962: LD_VAR 0 2
5966: ARRAY
5967: PUSH
5968: LD_INT 1
5970: ARRAY
5971: PPUSH
5972: LD_EXP 20
5976: PUSH
5977: LD_VAR 0 1
5981: ARRAY
5982: PUSH
5983: LD_VAR 0 2
5987: ARRAY
5988: PUSH
5989: LD_INT 2
5991: ARRAY
5992: PPUSH
5993: CALL_OW 428
5997: ST_TO_ADDR
// if not tmp then
5998: LD_VAR 0 4
6002: NOT
6003: IFFALSE 6007
// continue ;
6005: GO 5922
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
6007: LD_VAR 0 4
6011: PUSH
6012: LD_INT 81
6014: PUSH
6015: LD_VAR 0 3
6019: PUSH
6020: EMPTY
6021: LIST
6022: LIST
6023: PPUSH
6024: CALL_OW 69
6028: IN
6029: PUSH
6030: LD_EXP 20
6034: PUSH
6035: LD_VAR 0 1
6039: ARRAY
6040: PUSH
6041: LD_VAR 0 2
6045: ARRAY
6046: PUSH
6047: LD_INT 1
6049: ARRAY
6050: PPUSH
6051: LD_EXP 20
6055: PUSH
6056: LD_VAR 0 1
6060: ARRAY
6061: PUSH
6062: LD_VAR 0 2
6066: ARRAY
6067: PUSH
6068: LD_INT 2
6070: ARRAY
6071: PPUSH
6072: CALL_OW 458
6076: AND
6077: IFFALSE 6171
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
6079: LD_EXP 20
6083: PUSH
6084: LD_VAR 0 1
6088: ARRAY
6089: PUSH
6090: LD_VAR 0 2
6094: ARRAY
6095: PUSH
6096: LD_INT 1
6098: ARRAY
6099: PPUSH
6100: LD_EXP 20
6104: PUSH
6105: LD_VAR 0 1
6109: ARRAY
6110: PUSH
6111: LD_VAR 0 2
6115: ARRAY
6116: PUSH
6117: LD_INT 2
6119: ARRAY
6120: PPUSH
6121: LD_VAR 0 3
6125: PPUSH
6126: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
6130: LD_ADDR_EXP 20
6134: PUSH
6135: LD_EXP 20
6139: PPUSH
6140: LD_VAR 0 1
6144: PPUSH
6145: LD_EXP 20
6149: PUSH
6150: LD_VAR 0 1
6154: ARRAY
6155: PPUSH
6156: LD_VAR 0 2
6160: PPUSH
6161: CALL_OW 3
6165: PPUSH
6166: CALL_OW 1
6170: ST_TO_ADDR
// end ; end ;
6171: GO 5922
6173: POP
6174: POP
// end ;
6175: GO 5840
6177: POP
6178: POP
// end ;
6179: PPOPN 4
6181: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
6182: LD_INT 0
6184: PPUSH
6185: PPUSH
// result := false ;
6186: LD_ADDR_VAR 0 4
6190: PUSH
6191: LD_INT 0
6193: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
6194: LD_VAR 0 1
6198: PPUSH
6199: CALL_OW 264
6203: PUSH
6204: LD_INT 81
6206: EQUAL
6207: NOT
6208: IFFALSE 6212
// exit ;
6210: GO 6452
// index := GetElementIndex ( minersList , unit ) ;
6212: LD_ADDR_VAR 0 5
6216: PUSH
6217: LD_EXP 19
6221: PPUSH
6222: LD_VAR 0 1
6226: PPUSH
6227: CALL 28379 0 2
6231: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
6232: LD_EXP 20
6236: PUSH
6237: LD_VAR 0 5
6241: ARRAY
6242: PUSH
6243: LD_EXP 21
6247: GREATEREQUAL
6248: IFFALSE 6252
// exit ;
6250: GO 6452
// ComMoveXY ( unit , x , y ) ;
6252: LD_VAR 0 1
6256: PPUSH
6257: LD_VAR 0 2
6261: PPUSH
6262: LD_VAR 0 3
6266: PPUSH
6267: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6271: LD_INT 35
6273: PPUSH
6274: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
6278: LD_VAR 0 1
6282: PPUSH
6283: LD_VAR 0 2
6287: PPUSH
6288: LD_VAR 0 3
6292: PPUSH
6293: CALL 59734 0 3
6297: NOT
6298: PUSH
6299: LD_VAR 0 1
6303: PPUSH
6304: CALL_OW 314
6308: AND
6309: IFFALSE 6313
// exit ;
6311: GO 6452
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
6313: LD_VAR 0 2
6317: PPUSH
6318: LD_VAR 0 3
6322: PPUSH
6323: CALL_OW 428
6327: PUSH
6328: LD_VAR 0 1
6332: EQUAL
6333: PUSH
6334: LD_VAR 0 1
6338: PPUSH
6339: CALL_OW 314
6343: NOT
6344: AND
6345: IFFALSE 6271
// PlaySoundXY ( x , y , PlantMine ) ;
6347: LD_VAR 0 2
6351: PPUSH
6352: LD_VAR 0 3
6356: PPUSH
6357: LD_STRING PlantMine
6359: PPUSH
6360: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
6364: LD_VAR 0 2
6368: PPUSH
6369: LD_VAR 0 3
6373: PPUSH
6374: LD_VAR 0 1
6378: PPUSH
6379: CALL_OW 255
6383: PPUSH
6384: LD_INT 0
6386: PPUSH
6387: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
6391: LD_ADDR_EXP 20
6395: PUSH
6396: LD_EXP 20
6400: PPUSH
6401: LD_VAR 0 5
6405: PUSH
6406: LD_EXP 20
6410: PUSH
6411: LD_VAR 0 5
6415: ARRAY
6416: PUSH
6417: LD_INT 1
6419: PLUS
6420: PUSH
6421: EMPTY
6422: LIST
6423: LIST
6424: PPUSH
6425: LD_VAR 0 2
6429: PUSH
6430: LD_VAR 0 3
6434: PUSH
6435: EMPTY
6436: LIST
6437: LIST
6438: PPUSH
6439: CALL 28594 0 3
6443: ST_TO_ADDR
// result := true ;
6444: LD_ADDR_VAR 0 4
6448: PUSH
6449: LD_INT 1
6451: ST_TO_ADDR
// end ;
6452: LD_VAR 0 4
6456: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
6457: LD_INT 0
6459: PPUSH
6460: PPUSH
6461: PPUSH
// if not unit in minersList then
6462: LD_VAR 0 1
6466: PUSH
6467: LD_EXP 19
6471: IN
6472: NOT
6473: IFFALSE 6477
// exit ;
6475: GO 6869
// index := GetElementIndex ( minersList , unit ) ;
6477: LD_ADDR_VAR 0 6
6481: PUSH
6482: LD_EXP 19
6486: PPUSH
6487: LD_VAR 0 1
6491: PPUSH
6492: CALL 28379 0 2
6496: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
6497: LD_ADDR_VAR 0 5
6501: PUSH
6502: DOUBLE
6503: LD_EXP 20
6507: PUSH
6508: LD_VAR 0 6
6512: ARRAY
6513: INC
6514: ST_TO_ADDR
6515: LD_INT 1
6517: PUSH
6518: FOR_DOWNTO
6519: IFFALSE 6680
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
6521: LD_EXP 20
6525: PUSH
6526: LD_VAR 0 6
6530: ARRAY
6531: PUSH
6532: LD_VAR 0 5
6536: ARRAY
6537: PUSH
6538: LD_INT 1
6540: ARRAY
6541: PUSH
6542: LD_VAR 0 2
6546: EQUAL
6547: PUSH
6548: LD_EXP 20
6552: PUSH
6553: LD_VAR 0 6
6557: ARRAY
6558: PUSH
6559: LD_VAR 0 5
6563: ARRAY
6564: PUSH
6565: LD_INT 2
6567: ARRAY
6568: PUSH
6569: LD_VAR 0 3
6573: EQUAL
6574: AND
6575: IFFALSE 6678
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
6577: LD_EXP 20
6581: PUSH
6582: LD_VAR 0 6
6586: ARRAY
6587: PUSH
6588: LD_VAR 0 5
6592: ARRAY
6593: PUSH
6594: LD_INT 1
6596: ARRAY
6597: PPUSH
6598: LD_EXP 20
6602: PUSH
6603: LD_VAR 0 6
6607: ARRAY
6608: PUSH
6609: LD_VAR 0 5
6613: ARRAY
6614: PUSH
6615: LD_INT 2
6617: ARRAY
6618: PPUSH
6619: LD_VAR 0 1
6623: PPUSH
6624: CALL_OW 255
6628: PPUSH
6629: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
6633: LD_ADDR_EXP 20
6637: PUSH
6638: LD_EXP 20
6642: PPUSH
6643: LD_VAR 0 6
6647: PPUSH
6648: LD_EXP 20
6652: PUSH
6653: LD_VAR 0 6
6657: ARRAY
6658: PPUSH
6659: LD_VAR 0 5
6663: PPUSH
6664: CALL_OW 3
6668: PPUSH
6669: CALL_OW 1
6673: ST_TO_ADDR
// exit ;
6674: POP
6675: POP
6676: GO 6869
// end ; end ;
6678: GO 6518
6680: POP
6681: POP
// for i := minerMinesList [ index ] downto 1 do
6682: LD_ADDR_VAR 0 5
6686: PUSH
6687: DOUBLE
6688: LD_EXP 20
6692: PUSH
6693: LD_VAR 0 6
6697: ARRAY
6698: INC
6699: ST_TO_ADDR
6700: LD_INT 1
6702: PUSH
6703: FOR_DOWNTO
6704: IFFALSE 6867
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
6706: LD_EXP 20
6710: PUSH
6711: LD_VAR 0 6
6715: ARRAY
6716: PUSH
6717: LD_VAR 0 5
6721: ARRAY
6722: PUSH
6723: LD_INT 1
6725: ARRAY
6726: PPUSH
6727: LD_EXP 20
6731: PUSH
6732: LD_VAR 0 6
6736: ARRAY
6737: PUSH
6738: LD_VAR 0 5
6742: ARRAY
6743: PUSH
6744: LD_INT 2
6746: ARRAY
6747: PPUSH
6748: LD_VAR 0 2
6752: PPUSH
6753: LD_VAR 0 3
6757: PPUSH
6758: CALL_OW 298
6762: PUSH
6763: LD_INT 6
6765: LESS
6766: IFFALSE 6865
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
6768: LD_EXP 20
6772: PUSH
6773: LD_VAR 0 6
6777: ARRAY
6778: PUSH
6779: LD_VAR 0 5
6783: ARRAY
6784: PUSH
6785: LD_INT 1
6787: ARRAY
6788: PPUSH
6789: LD_EXP 20
6793: PUSH
6794: LD_VAR 0 6
6798: ARRAY
6799: PUSH
6800: LD_VAR 0 5
6804: ARRAY
6805: PUSH
6806: LD_INT 2
6808: ARRAY
6809: PPUSH
6810: LD_VAR 0 1
6814: PPUSH
6815: CALL_OW 255
6819: PPUSH
6820: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
6824: LD_ADDR_EXP 20
6828: PUSH
6829: LD_EXP 20
6833: PPUSH
6834: LD_VAR 0 6
6838: PPUSH
6839: LD_EXP 20
6843: PUSH
6844: LD_VAR 0 6
6848: ARRAY
6849: PPUSH
6850: LD_VAR 0 5
6854: PPUSH
6855: CALL_OW 3
6859: PPUSH
6860: CALL_OW 1
6864: ST_TO_ADDR
// end ; end ;
6865: GO 6703
6867: POP
6868: POP
// end ;
6869: LD_VAR 0 4
6873: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
6874: LD_INT 0
6876: PPUSH
6877: PPUSH
6878: PPUSH
6879: PPUSH
6880: PPUSH
6881: PPUSH
6882: PPUSH
6883: PPUSH
6884: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
6885: LD_VAR 0 1
6889: PPUSH
6890: CALL_OW 264
6894: PUSH
6895: LD_INT 81
6897: EQUAL
6898: NOT
6899: PUSH
6900: LD_VAR 0 1
6904: PUSH
6905: LD_EXP 19
6909: IN
6910: NOT
6911: OR
6912: IFFALSE 6916
// exit ;
6914: GO 7238
// index := GetElementIndex ( minersList , unit ) ;
6916: LD_ADDR_VAR 0 6
6920: PUSH
6921: LD_EXP 19
6925: PPUSH
6926: LD_VAR 0 1
6930: PPUSH
6931: CALL 28379 0 2
6935: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
6936: LD_ADDR_VAR 0 8
6940: PUSH
6941: LD_EXP 21
6945: PUSH
6946: LD_EXP 20
6950: PUSH
6951: LD_VAR 0 6
6955: ARRAY
6956: MINUS
6957: ST_TO_ADDR
// if not minesFreeAmount then
6958: LD_VAR 0 8
6962: NOT
6963: IFFALSE 6967
// exit ;
6965: GO 7238
// tmp := [ ] ;
6967: LD_ADDR_VAR 0 7
6971: PUSH
6972: EMPTY
6973: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
6974: LD_ADDR_VAR 0 5
6978: PUSH
6979: DOUBLE
6980: LD_INT 1
6982: DEC
6983: ST_TO_ADDR
6984: LD_VAR 0 8
6988: PUSH
6989: FOR_TO
6990: IFFALSE 7185
// begin _d := rand ( 0 , 5 ) ;
6992: LD_ADDR_VAR 0 11
6996: PUSH
6997: LD_INT 0
6999: PPUSH
7000: LD_INT 5
7002: PPUSH
7003: CALL_OW 12
7007: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
7008: LD_ADDR_VAR 0 12
7012: PUSH
7013: LD_INT 2
7015: PPUSH
7016: LD_INT 6
7018: PPUSH
7019: CALL_OW 12
7023: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
7024: LD_ADDR_VAR 0 9
7028: PUSH
7029: LD_VAR 0 2
7033: PPUSH
7034: LD_VAR 0 11
7038: PPUSH
7039: LD_VAR 0 12
7043: PPUSH
7044: CALL_OW 272
7048: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
7049: LD_ADDR_VAR 0 10
7053: PUSH
7054: LD_VAR 0 3
7058: PPUSH
7059: LD_VAR 0 11
7063: PPUSH
7064: LD_VAR 0 12
7068: PPUSH
7069: CALL_OW 273
7073: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
7074: LD_VAR 0 9
7078: PPUSH
7079: LD_VAR 0 10
7083: PPUSH
7084: CALL_OW 488
7088: PUSH
7089: LD_VAR 0 9
7093: PUSH
7094: LD_VAR 0 10
7098: PUSH
7099: EMPTY
7100: LIST
7101: LIST
7102: PUSH
7103: LD_VAR 0 7
7107: IN
7108: NOT
7109: AND
7110: PUSH
7111: LD_VAR 0 9
7115: PPUSH
7116: LD_VAR 0 10
7120: PPUSH
7121: CALL_OW 458
7125: NOT
7126: AND
7127: IFFALSE 7169
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
7129: LD_ADDR_VAR 0 7
7133: PUSH
7134: LD_VAR 0 7
7138: PPUSH
7139: LD_VAR 0 7
7143: PUSH
7144: LD_INT 1
7146: PLUS
7147: PPUSH
7148: LD_VAR 0 9
7152: PUSH
7153: LD_VAR 0 10
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: PPUSH
7162: CALL_OW 1
7166: ST_TO_ADDR
7167: GO 7183
// i := i - 1 ;
7169: LD_ADDR_VAR 0 5
7173: PUSH
7174: LD_VAR 0 5
7178: PUSH
7179: LD_INT 1
7181: MINUS
7182: ST_TO_ADDR
// end ;
7183: GO 6989
7185: POP
7186: POP
// for i in tmp do
7187: LD_ADDR_VAR 0 5
7191: PUSH
7192: LD_VAR 0 7
7196: PUSH
7197: FOR_IN
7198: IFFALSE 7236
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
7200: LD_VAR 0 1
7204: PPUSH
7205: LD_VAR 0 5
7209: PUSH
7210: LD_INT 1
7212: ARRAY
7213: PPUSH
7214: LD_VAR 0 5
7218: PUSH
7219: LD_INT 2
7221: ARRAY
7222: PPUSH
7223: CALL 6182 0 3
7227: NOT
7228: IFFALSE 7234
// exit ;
7230: POP
7231: POP
7232: GO 7238
7234: GO 7197
7236: POP
7237: POP
// end ;
7238: LD_VAR 0 4
7242: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
7243: LD_INT 0
7245: PPUSH
7246: PPUSH
7247: PPUSH
7248: PPUSH
7249: PPUSH
7250: PPUSH
7251: PPUSH
// if not GetClass ( unit ) = class_sniper then
7252: LD_VAR 0 1
7256: PPUSH
7257: CALL_OW 257
7261: PUSH
7262: LD_INT 5
7264: EQUAL
7265: NOT
7266: IFFALSE 7270
// exit ;
7268: GO 7658
// dist := 8 ;
7270: LD_ADDR_VAR 0 5
7274: PUSH
7275: LD_INT 8
7277: ST_TO_ADDR
// viewRange := 12 ;
7278: LD_ADDR_VAR 0 7
7282: PUSH
7283: LD_INT 12
7285: ST_TO_ADDR
// side := GetSide ( unit ) ;
7286: LD_ADDR_VAR 0 6
7290: PUSH
7291: LD_VAR 0 1
7295: PPUSH
7296: CALL_OW 255
7300: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
7301: LD_INT 61
7303: PPUSH
7304: LD_VAR 0 6
7308: PPUSH
7309: CALL_OW 321
7313: PUSH
7314: LD_INT 2
7316: EQUAL
7317: IFFALSE 7327
// viewRange := 16 ;
7319: LD_ADDR_VAR 0 7
7323: PUSH
7324: LD_INT 16
7326: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
7327: LD_VAR 0 1
7331: PPUSH
7332: LD_VAR 0 2
7336: PPUSH
7337: LD_VAR 0 3
7341: PPUSH
7342: CALL_OW 297
7346: PUSH
7347: LD_VAR 0 5
7351: GREATER
7352: IFFALSE 7431
// begin ComMoveXY ( unit , x , y ) ;
7354: LD_VAR 0 1
7358: PPUSH
7359: LD_VAR 0 2
7363: PPUSH
7364: LD_VAR 0 3
7368: PPUSH
7369: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7373: LD_INT 35
7375: PPUSH
7376: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
7380: LD_VAR 0 1
7384: PPUSH
7385: LD_VAR 0 2
7389: PPUSH
7390: LD_VAR 0 3
7394: PPUSH
7395: CALL 59734 0 3
7399: NOT
7400: IFFALSE 7404
// exit ;
7402: GO 7658
// until GetDistUnitXY ( unit , x , y ) < dist ;
7404: LD_VAR 0 1
7408: PPUSH
7409: LD_VAR 0 2
7413: PPUSH
7414: LD_VAR 0 3
7418: PPUSH
7419: CALL_OW 297
7423: PUSH
7424: LD_VAR 0 5
7428: LESS
7429: IFFALSE 7373
// end ; ComTurnXY ( unit , x , y ) ;
7431: LD_VAR 0 1
7435: PPUSH
7436: LD_VAR 0 2
7440: PPUSH
7441: LD_VAR 0 3
7445: PPUSH
7446: CALL_OW 118
// wait ( 5 ) ;
7450: LD_INT 5
7452: PPUSH
7453: CALL_OW 67
// _d := GetDir ( unit ) ;
7457: LD_ADDR_VAR 0 10
7461: PUSH
7462: LD_VAR 0 1
7466: PPUSH
7467: CALL_OW 254
7471: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
7472: LD_ADDR_VAR 0 8
7476: PUSH
7477: LD_VAR 0 1
7481: PPUSH
7482: CALL_OW 250
7486: PPUSH
7487: LD_VAR 0 10
7491: PPUSH
7492: LD_VAR 0 5
7496: PPUSH
7497: CALL_OW 272
7501: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
7502: LD_ADDR_VAR 0 9
7506: PUSH
7507: LD_VAR 0 1
7511: PPUSH
7512: CALL_OW 251
7516: PPUSH
7517: LD_VAR 0 10
7521: PPUSH
7522: LD_VAR 0 5
7526: PPUSH
7527: CALL_OW 273
7531: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
7532: LD_VAR 0 8
7536: PPUSH
7537: LD_VAR 0 9
7541: PPUSH
7542: CALL_OW 488
7546: NOT
7547: IFFALSE 7551
// exit ;
7549: GO 7658
// ComAnimCustom ( unit , 1 ) ;
7551: LD_VAR 0 1
7555: PPUSH
7556: LD_INT 1
7558: PPUSH
7559: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
7563: LD_VAR 0 8
7567: PPUSH
7568: LD_VAR 0 9
7572: PPUSH
7573: LD_VAR 0 6
7577: PPUSH
7578: LD_VAR 0 7
7582: PPUSH
7583: CALL_OW 330
// repeat wait ( 1 ) ;
7587: LD_INT 1
7589: PPUSH
7590: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
7594: LD_VAR 0 1
7598: PPUSH
7599: CALL_OW 316
7603: PUSH
7604: LD_VAR 0 1
7608: PPUSH
7609: CALL_OW 314
7613: OR
7614: PUSH
7615: LD_VAR 0 1
7619: PPUSH
7620: CALL_OW 302
7624: NOT
7625: OR
7626: PUSH
7627: LD_VAR 0 1
7631: PPUSH
7632: CALL_OW 301
7636: OR
7637: IFFALSE 7587
// RemoveSeeing ( _x , _y , side ) ;
7639: LD_VAR 0 8
7643: PPUSH
7644: LD_VAR 0 9
7648: PPUSH
7649: LD_VAR 0 6
7653: PPUSH
7654: CALL_OW 331
// end ; end_of_file
7658: LD_VAR 0 4
7662: RET
// export globalGameSaveCounter ; every 0 0$1 do
7663: GO 7665
7665: DISABLE
// begin enable ;
7666: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7667: LD_STRING updateTimer(
7669: PUSH
7670: LD_OWVAR 1
7674: STR
7675: PUSH
7676: LD_STRING );
7678: STR
7679: PPUSH
7680: CALL_OW 559
// end ;
7684: END
// every 0 0$1 do
7685: GO 7687
7687: DISABLE
// begin globalGameSaveCounter := 0 ;
7688: LD_ADDR_EXP 22
7692: PUSH
7693: LD_INT 0
7695: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
7696: LD_STRING setGameSaveCounter(0)
7698: PPUSH
7699: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
7703: LD_STRING initStreamRollete();
7705: PPUSH
7706: CALL_OW 559
// InitStreamMode ;
7710: CALL 9036 0 0
// DefineStreamItems ( false ) ;
7714: LD_INT 0
7716: PPUSH
7717: CALL 9500 0 1
// end ;
7721: END
// export function SOS_MapStart ( ) ; begin
7722: LD_INT 0
7724: PPUSH
// if streamModeActive then
7725: LD_EXP 23
7729: IFFALSE 7738
// DefineStreamItems ( true ) ;
7731: LD_INT 1
7733: PPUSH
7734: CALL 9500 0 1
// UpdateLuaVariables ( ) ;
7738: CALL 7755 0 0
// UpdateFactoryWaypoints ( ) ;
7742: CALL 22361 0 0
// UpdateWarehouseGatheringPoints ( ) ;
7746: CALL 22618 0 0
// end ;
7750: LD_VAR 0 1
7754: RET
// function UpdateLuaVariables ( ) ; begin
7755: LD_INT 0
7757: PPUSH
// if globalGameSaveCounter then
7758: LD_EXP 22
7762: IFFALSE 7796
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
7764: LD_ADDR_EXP 22
7768: PUSH
7769: LD_EXP 22
7773: PPUSH
7774: CALL 62286 0 1
7778: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
7779: LD_STRING setGameSaveCounter(
7781: PUSH
7782: LD_EXP 22
7786: STR
7787: PUSH
7788: LD_STRING )
7790: STR
7791: PPUSH
7792: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
7796: LD_STRING setGameDifficulty(
7798: PUSH
7799: LD_OWVAR 67
7803: STR
7804: PUSH
7805: LD_STRING )
7807: STR
7808: PPUSH
7809: CALL_OW 559
// end ;
7813: LD_VAR 0 1
7817: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7818: LD_INT 0
7820: PPUSH
// if p2 = stream_mode then
7821: LD_VAR 0 2
7825: PUSH
7826: LD_INT 100
7828: EQUAL
7829: IFFALSE 8832
// begin if not StreamModeActive then
7831: LD_EXP 23
7835: NOT
7836: IFFALSE 7846
// StreamModeActive := true ;
7838: LD_ADDR_EXP 23
7842: PUSH
7843: LD_INT 1
7845: ST_TO_ADDR
// if p3 = 0 then
7846: LD_VAR 0 3
7850: PUSH
7851: LD_INT 0
7853: EQUAL
7854: IFFALSE 7860
// InitStreamMode ;
7856: CALL 9036 0 0
// if p3 = 1 then
7860: LD_VAR 0 3
7864: PUSH
7865: LD_INT 1
7867: EQUAL
7868: IFFALSE 7878
// sRocket := true ;
7870: LD_ADDR_EXP 28
7874: PUSH
7875: LD_INT 1
7877: ST_TO_ADDR
// if p3 = 2 then
7878: LD_VAR 0 3
7882: PUSH
7883: LD_INT 2
7885: EQUAL
7886: IFFALSE 7896
// sSpeed := true ;
7888: LD_ADDR_EXP 27
7892: PUSH
7893: LD_INT 1
7895: ST_TO_ADDR
// if p3 = 3 then
7896: LD_VAR 0 3
7900: PUSH
7901: LD_INT 3
7903: EQUAL
7904: IFFALSE 7914
// sEngine := true ;
7906: LD_ADDR_EXP 29
7910: PUSH
7911: LD_INT 1
7913: ST_TO_ADDR
// if p3 = 4 then
7914: LD_VAR 0 3
7918: PUSH
7919: LD_INT 4
7921: EQUAL
7922: IFFALSE 7932
// sSpec := true ;
7924: LD_ADDR_EXP 26
7928: PUSH
7929: LD_INT 1
7931: ST_TO_ADDR
// if p3 = 5 then
7932: LD_VAR 0 3
7936: PUSH
7937: LD_INT 5
7939: EQUAL
7940: IFFALSE 7950
// sLevel := true ;
7942: LD_ADDR_EXP 30
7946: PUSH
7947: LD_INT 1
7949: ST_TO_ADDR
// if p3 = 6 then
7950: LD_VAR 0 3
7954: PUSH
7955: LD_INT 6
7957: EQUAL
7958: IFFALSE 7968
// sArmoury := true ;
7960: LD_ADDR_EXP 31
7964: PUSH
7965: LD_INT 1
7967: ST_TO_ADDR
// if p3 = 7 then
7968: LD_VAR 0 3
7972: PUSH
7973: LD_INT 7
7975: EQUAL
7976: IFFALSE 7986
// sRadar := true ;
7978: LD_ADDR_EXP 32
7982: PUSH
7983: LD_INT 1
7985: ST_TO_ADDR
// if p3 = 8 then
7986: LD_VAR 0 3
7990: PUSH
7991: LD_INT 8
7993: EQUAL
7994: IFFALSE 8004
// sBunker := true ;
7996: LD_ADDR_EXP 33
8000: PUSH
8001: LD_INT 1
8003: ST_TO_ADDR
// if p3 = 9 then
8004: LD_VAR 0 3
8008: PUSH
8009: LD_INT 9
8011: EQUAL
8012: IFFALSE 8022
// sHack := true ;
8014: LD_ADDR_EXP 34
8018: PUSH
8019: LD_INT 1
8021: ST_TO_ADDR
// if p3 = 10 then
8022: LD_VAR 0 3
8026: PUSH
8027: LD_INT 10
8029: EQUAL
8030: IFFALSE 8040
// sFire := true ;
8032: LD_ADDR_EXP 35
8036: PUSH
8037: LD_INT 1
8039: ST_TO_ADDR
// if p3 = 11 then
8040: LD_VAR 0 3
8044: PUSH
8045: LD_INT 11
8047: EQUAL
8048: IFFALSE 8058
// sRefresh := true ;
8050: LD_ADDR_EXP 36
8054: PUSH
8055: LD_INT 1
8057: ST_TO_ADDR
// if p3 = 12 then
8058: LD_VAR 0 3
8062: PUSH
8063: LD_INT 12
8065: EQUAL
8066: IFFALSE 8076
// sExp := true ;
8068: LD_ADDR_EXP 37
8072: PUSH
8073: LD_INT 1
8075: ST_TO_ADDR
// if p3 = 13 then
8076: LD_VAR 0 3
8080: PUSH
8081: LD_INT 13
8083: EQUAL
8084: IFFALSE 8094
// sDepot := true ;
8086: LD_ADDR_EXP 38
8090: PUSH
8091: LD_INT 1
8093: ST_TO_ADDR
// if p3 = 14 then
8094: LD_VAR 0 3
8098: PUSH
8099: LD_INT 14
8101: EQUAL
8102: IFFALSE 8112
// sFlag := true ;
8104: LD_ADDR_EXP 39
8108: PUSH
8109: LD_INT 1
8111: ST_TO_ADDR
// if p3 = 15 then
8112: LD_VAR 0 3
8116: PUSH
8117: LD_INT 15
8119: EQUAL
8120: IFFALSE 8130
// sKamikadze := true ;
8122: LD_ADDR_EXP 47
8126: PUSH
8127: LD_INT 1
8129: ST_TO_ADDR
// if p3 = 16 then
8130: LD_VAR 0 3
8134: PUSH
8135: LD_INT 16
8137: EQUAL
8138: IFFALSE 8148
// sTroll := true ;
8140: LD_ADDR_EXP 48
8144: PUSH
8145: LD_INT 1
8147: ST_TO_ADDR
// if p3 = 17 then
8148: LD_VAR 0 3
8152: PUSH
8153: LD_INT 17
8155: EQUAL
8156: IFFALSE 8166
// sSlow := true ;
8158: LD_ADDR_EXP 49
8162: PUSH
8163: LD_INT 1
8165: ST_TO_ADDR
// if p3 = 18 then
8166: LD_VAR 0 3
8170: PUSH
8171: LD_INT 18
8173: EQUAL
8174: IFFALSE 8184
// sLack := true ;
8176: LD_ADDR_EXP 50
8180: PUSH
8181: LD_INT 1
8183: ST_TO_ADDR
// if p3 = 19 then
8184: LD_VAR 0 3
8188: PUSH
8189: LD_INT 19
8191: EQUAL
8192: IFFALSE 8202
// sTank := true ;
8194: LD_ADDR_EXP 52
8198: PUSH
8199: LD_INT 1
8201: ST_TO_ADDR
// if p3 = 20 then
8202: LD_VAR 0 3
8206: PUSH
8207: LD_INT 20
8209: EQUAL
8210: IFFALSE 8220
// sRemote := true ;
8212: LD_ADDR_EXP 53
8216: PUSH
8217: LD_INT 1
8219: ST_TO_ADDR
// if p3 = 21 then
8220: LD_VAR 0 3
8224: PUSH
8225: LD_INT 21
8227: EQUAL
8228: IFFALSE 8238
// sPowell := true ;
8230: LD_ADDR_EXP 54
8234: PUSH
8235: LD_INT 1
8237: ST_TO_ADDR
// if p3 = 22 then
8238: LD_VAR 0 3
8242: PUSH
8243: LD_INT 22
8245: EQUAL
8246: IFFALSE 8256
// sTeleport := true ;
8248: LD_ADDR_EXP 57
8252: PUSH
8253: LD_INT 1
8255: ST_TO_ADDR
// if p3 = 23 then
8256: LD_VAR 0 3
8260: PUSH
8261: LD_INT 23
8263: EQUAL
8264: IFFALSE 8274
// sOilTower := true ;
8266: LD_ADDR_EXP 59
8270: PUSH
8271: LD_INT 1
8273: ST_TO_ADDR
// if p3 = 24 then
8274: LD_VAR 0 3
8278: PUSH
8279: LD_INT 24
8281: EQUAL
8282: IFFALSE 8292
// sShovel := true ;
8284: LD_ADDR_EXP 60
8288: PUSH
8289: LD_INT 1
8291: ST_TO_ADDR
// if p3 = 25 then
8292: LD_VAR 0 3
8296: PUSH
8297: LD_INT 25
8299: EQUAL
8300: IFFALSE 8310
// sSheik := true ;
8302: LD_ADDR_EXP 61
8306: PUSH
8307: LD_INT 1
8309: ST_TO_ADDR
// if p3 = 26 then
8310: LD_VAR 0 3
8314: PUSH
8315: LD_INT 26
8317: EQUAL
8318: IFFALSE 8328
// sEarthquake := true ;
8320: LD_ADDR_EXP 63
8324: PUSH
8325: LD_INT 1
8327: ST_TO_ADDR
// if p3 = 27 then
8328: LD_VAR 0 3
8332: PUSH
8333: LD_INT 27
8335: EQUAL
8336: IFFALSE 8346
// sAI := true ;
8338: LD_ADDR_EXP 64
8342: PUSH
8343: LD_INT 1
8345: ST_TO_ADDR
// if p3 = 28 then
8346: LD_VAR 0 3
8350: PUSH
8351: LD_INT 28
8353: EQUAL
8354: IFFALSE 8364
// sCargo := true ;
8356: LD_ADDR_EXP 67
8360: PUSH
8361: LD_INT 1
8363: ST_TO_ADDR
// if p3 = 29 then
8364: LD_VAR 0 3
8368: PUSH
8369: LD_INT 29
8371: EQUAL
8372: IFFALSE 8382
// sDLaser := true ;
8374: LD_ADDR_EXP 68
8378: PUSH
8379: LD_INT 1
8381: ST_TO_ADDR
// if p3 = 30 then
8382: LD_VAR 0 3
8386: PUSH
8387: LD_INT 30
8389: EQUAL
8390: IFFALSE 8400
// sExchange := true ;
8392: LD_ADDR_EXP 69
8396: PUSH
8397: LD_INT 1
8399: ST_TO_ADDR
// if p3 = 31 then
8400: LD_VAR 0 3
8404: PUSH
8405: LD_INT 31
8407: EQUAL
8408: IFFALSE 8418
// sFac := true ;
8410: LD_ADDR_EXP 70
8414: PUSH
8415: LD_INT 1
8417: ST_TO_ADDR
// if p3 = 32 then
8418: LD_VAR 0 3
8422: PUSH
8423: LD_INT 32
8425: EQUAL
8426: IFFALSE 8436
// sPower := true ;
8428: LD_ADDR_EXP 71
8432: PUSH
8433: LD_INT 1
8435: ST_TO_ADDR
// if p3 = 33 then
8436: LD_VAR 0 3
8440: PUSH
8441: LD_INT 33
8443: EQUAL
8444: IFFALSE 8454
// sRandom := true ;
8446: LD_ADDR_EXP 72
8450: PUSH
8451: LD_INT 1
8453: ST_TO_ADDR
// if p3 = 34 then
8454: LD_VAR 0 3
8458: PUSH
8459: LD_INT 34
8461: EQUAL
8462: IFFALSE 8472
// sShield := true ;
8464: LD_ADDR_EXP 73
8468: PUSH
8469: LD_INT 1
8471: ST_TO_ADDR
// if p3 = 35 then
8472: LD_VAR 0 3
8476: PUSH
8477: LD_INT 35
8479: EQUAL
8480: IFFALSE 8490
// sTime := true ;
8482: LD_ADDR_EXP 74
8486: PUSH
8487: LD_INT 1
8489: ST_TO_ADDR
// if p3 = 36 then
8490: LD_VAR 0 3
8494: PUSH
8495: LD_INT 36
8497: EQUAL
8498: IFFALSE 8508
// sTools := true ;
8500: LD_ADDR_EXP 75
8504: PUSH
8505: LD_INT 1
8507: ST_TO_ADDR
// if p3 = 101 then
8508: LD_VAR 0 3
8512: PUSH
8513: LD_INT 101
8515: EQUAL
8516: IFFALSE 8526
// sSold := true ;
8518: LD_ADDR_EXP 40
8522: PUSH
8523: LD_INT 1
8525: ST_TO_ADDR
// if p3 = 102 then
8526: LD_VAR 0 3
8530: PUSH
8531: LD_INT 102
8533: EQUAL
8534: IFFALSE 8544
// sDiff := true ;
8536: LD_ADDR_EXP 41
8540: PUSH
8541: LD_INT 1
8543: ST_TO_ADDR
// if p3 = 103 then
8544: LD_VAR 0 3
8548: PUSH
8549: LD_INT 103
8551: EQUAL
8552: IFFALSE 8562
// sFog := true ;
8554: LD_ADDR_EXP 44
8558: PUSH
8559: LD_INT 1
8561: ST_TO_ADDR
// if p3 = 104 then
8562: LD_VAR 0 3
8566: PUSH
8567: LD_INT 104
8569: EQUAL
8570: IFFALSE 8580
// sReset := true ;
8572: LD_ADDR_EXP 45
8576: PUSH
8577: LD_INT 1
8579: ST_TO_ADDR
// if p3 = 105 then
8580: LD_VAR 0 3
8584: PUSH
8585: LD_INT 105
8587: EQUAL
8588: IFFALSE 8598
// sSun := true ;
8590: LD_ADDR_EXP 46
8594: PUSH
8595: LD_INT 1
8597: ST_TO_ADDR
// if p3 = 106 then
8598: LD_VAR 0 3
8602: PUSH
8603: LD_INT 106
8605: EQUAL
8606: IFFALSE 8616
// sTiger := true ;
8608: LD_ADDR_EXP 42
8612: PUSH
8613: LD_INT 1
8615: ST_TO_ADDR
// if p3 = 107 then
8616: LD_VAR 0 3
8620: PUSH
8621: LD_INT 107
8623: EQUAL
8624: IFFALSE 8634
// sBomb := true ;
8626: LD_ADDR_EXP 43
8630: PUSH
8631: LD_INT 1
8633: ST_TO_ADDR
// if p3 = 108 then
8634: LD_VAR 0 3
8638: PUSH
8639: LD_INT 108
8641: EQUAL
8642: IFFALSE 8652
// sWound := true ;
8644: LD_ADDR_EXP 51
8648: PUSH
8649: LD_INT 1
8651: ST_TO_ADDR
// if p3 = 109 then
8652: LD_VAR 0 3
8656: PUSH
8657: LD_INT 109
8659: EQUAL
8660: IFFALSE 8670
// sBetray := true ;
8662: LD_ADDR_EXP 55
8666: PUSH
8667: LD_INT 1
8669: ST_TO_ADDR
// if p3 = 110 then
8670: LD_VAR 0 3
8674: PUSH
8675: LD_INT 110
8677: EQUAL
8678: IFFALSE 8688
// sContamin := true ;
8680: LD_ADDR_EXP 56
8684: PUSH
8685: LD_INT 1
8687: ST_TO_ADDR
// if p3 = 111 then
8688: LD_VAR 0 3
8692: PUSH
8693: LD_INT 111
8695: EQUAL
8696: IFFALSE 8706
// sOil := true ;
8698: LD_ADDR_EXP 58
8702: PUSH
8703: LD_INT 1
8705: ST_TO_ADDR
// if p3 = 112 then
8706: LD_VAR 0 3
8710: PUSH
8711: LD_INT 112
8713: EQUAL
8714: IFFALSE 8724
// sStu := true ;
8716: LD_ADDR_EXP 62
8720: PUSH
8721: LD_INT 1
8723: ST_TO_ADDR
// if p3 = 113 then
8724: LD_VAR 0 3
8728: PUSH
8729: LD_INT 113
8731: EQUAL
8732: IFFALSE 8742
// sBazooka := true ;
8734: LD_ADDR_EXP 65
8738: PUSH
8739: LD_INT 1
8741: ST_TO_ADDR
// if p3 = 114 then
8742: LD_VAR 0 3
8746: PUSH
8747: LD_INT 114
8749: EQUAL
8750: IFFALSE 8760
// sMortar := true ;
8752: LD_ADDR_EXP 66
8756: PUSH
8757: LD_INT 1
8759: ST_TO_ADDR
// if p3 = 115 then
8760: LD_VAR 0 3
8764: PUSH
8765: LD_INT 115
8767: EQUAL
8768: IFFALSE 8778
// sRanger := true ;
8770: LD_ADDR_EXP 76
8774: PUSH
8775: LD_INT 1
8777: ST_TO_ADDR
// if p3 = 116 then
8778: LD_VAR 0 3
8782: PUSH
8783: LD_INT 116
8785: EQUAL
8786: IFFALSE 8796
// sComputer := true ;
8788: LD_ADDR_EXP 77
8792: PUSH
8793: LD_INT 1
8795: ST_TO_ADDR
// if p3 = 117 then
8796: LD_VAR 0 3
8800: PUSH
8801: LD_INT 117
8803: EQUAL
8804: IFFALSE 8814
// s30 := true ;
8806: LD_ADDR_EXP 78
8810: PUSH
8811: LD_INT 1
8813: ST_TO_ADDR
// if p3 = 118 then
8814: LD_VAR 0 3
8818: PUSH
8819: LD_INT 118
8821: EQUAL
8822: IFFALSE 8832
// s60 := true ;
8824: LD_ADDR_EXP 79
8828: PUSH
8829: LD_INT 1
8831: ST_TO_ADDR
// end ; if p2 = hack_mode then
8832: LD_VAR 0 2
8836: PUSH
8837: LD_INT 101
8839: EQUAL
8840: IFFALSE 8968
// begin case p3 of 1 :
8842: LD_VAR 0 3
8846: PUSH
8847: LD_INT 1
8849: DOUBLE
8850: EQUAL
8851: IFTRUE 8855
8853: GO 8862
8855: POP
// hHackUnlimitedResources ; 2 :
8856: CALL 21107 0 0
8860: GO 8968
8862: LD_INT 2
8864: DOUBLE
8865: EQUAL
8866: IFTRUE 8870
8868: GO 8877
8870: POP
// hHackSetLevel10 ; 3 :
8871: CALL 21240 0 0
8875: GO 8968
8877: LD_INT 3
8879: DOUBLE
8880: EQUAL
8881: IFTRUE 8885
8883: GO 8892
8885: POP
// hHackSetLevel10YourUnits ; 4 :
8886: CALL 21325 0 0
8890: GO 8968
8892: LD_INT 4
8894: DOUBLE
8895: EQUAL
8896: IFTRUE 8900
8898: GO 8907
8900: POP
// hHackInvincible ; 5 :
8901: CALL 21773 0 0
8905: GO 8968
8907: LD_INT 5
8909: DOUBLE
8910: EQUAL
8911: IFTRUE 8915
8913: GO 8922
8915: POP
// hHackInvisible ; 6 :
8916: CALL 21884 0 0
8920: GO 8968
8922: LD_INT 6
8924: DOUBLE
8925: EQUAL
8926: IFTRUE 8930
8928: GO 8937
8930: POP
// hHackChangeYourSide ; 7 :
8931: CALL 21941 0 0
8935: GO 8968
8937: LD_INT 7
8939: DOUBLE
8940: EQUAL
8941: IFTRUE 8945
8943: GO 8952
8945: POP
// hHackChangeUnitSide ; 8 :
8946: CALL 21983 0 0
8950: GO 8968
8952: LD_INT 8
8954: DOUBLE
8955: EQUAL
8956: IFTRUE 8960
8958: GO 8967
8960: POP
// hHackFog ; end ;
8961: CALL 22084 0 0
8965: GO 8968
8967: POP
// end ; if p2 = game_save_mode then
8968: LD_VAR 0 2
8972: PUSH
8973: LD_INT 102
8975: EQUAL
8976: IFFALSE 9031
// begin if p3 = 1 then
8978: LD_VAR 0 3
8982: PUSH
8983: LD_INT 1
8985: EQUAL
8986: IFFALSE 8998
// globalGameSaveCounter := p4 ;
8988: LD_ADDR_EXP 22
8992: PUSH
8993: LD_VAR 0 4
8997: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
8998: LD_VAR 0 3
9002: PUSH
9003: LD_INT 2
9005: EQUAL
9006: PUSH
9007: LD_EXP 22
9011: AND
9012: IFFALSE 9031
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
9014: LD_STRING setGameSaveCounter(
9016: PUSH
9017: LD_EXP 22
9021: STR
9022: PUSH
9023: LD_STRING )
9025: STR
9026: PPUSH
9027: CALL_OW 559
// end ; end ;
9031: LD_VAR 0 7
9035: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
9036: LD_INT 0
9038: PPUSH
// streamModeActive := false ;
9039: LD_ADDR_EXP 23
9043: PUSH
9044: LD_INT 0
9046: ST_TO_ADDR
// normalCounter := 36 ;
9047: LD_ADDR_EXP 24
9051: PUSH
9052: LD_INT 36
9054: ST_TO_ADDR
// hardcoreCounter := 18 ;
9055: LD_ADDR_EXP 25
9059: PUSH
9060: LD_INT 18
9062: ST_TO_ADDR
// sRocket := false ;
9063: LD_ADDR_EXP 28
9067: PUSH
9068: LD_INT 0
9070: ST_TO_ADDR
// sSpeed := false ;
9071: LD_ADDR_EXP 27
9075: PUSH
9076: LD_INT 0
9078: ST_TO_ADDR
// sEngine := false ;
9079: LD_ADDR_EXP 29
9083: PUSH
9084: LD_INT 0
9086: ST_TO_ADDR
// sSpec := false ;
9087: LD_ADDR_EXP 26
9091: PUSH
9092: LD_INT 0
9094: ST_TO_ADDR
// sLevel := false ;
9095: LD_ADDR_EXP 30
9099: PUSH
9100: LD_INT 0
9102: ST_TO_ADDR
// sArmoury := false ;
9103: LD_ADDR_EXP 31
9107: PUSH
9108: LD_INT 0
9110: ST_TO_ADDR
// sRadar := false ;
9111: LD_ADDR_EXP 32
9115: PUSH
9116: LD_INT 0
9118: ST_TO_ADDR
// sBunker := false ;
9119: LD_ADDR_EXP 33
9123: PUSH
9124: LD_INT 0
9126: ST_TO_ADDR
// sHack := false ;
9127: LD_ADDR_EXP 34
9131: PUSH
9132: LD_INT 0
9134: ST_TO_ADDR
// sFire := false ;
9135: LD_ADDR_EXP 35
9139: PUSH
9140: LD_INT 0
9142: ST_TO_ADDR
// sRefresh := false ;
9143: LD_ADDR_EXP 36
9147: PUSH
9148: LD_INT 0
9150: ST_TO_ADDR
// sExp := false ;
9151: LD_ADDR_EXP 37
9155: PUSH
9156: LD_INT 0
9158: ST_TO_ADDR
// sDepot := false ;
9159: LD_ADDR_EXP 38
9163: PUSH
9164: LD_INT 0
9166: ST_TO_ADDR
// sFlag := false ;
9167: LD_ADDR_EXP 39
9171: PUSH
9172: LD_INT 0
9174: ST_TO_ADDR
// sKamikadze := false ;
9175: LD_ADDR_EXP 47
9179: PUSH
9180: LD_INT 0
9182: ST_TO_ADDR
// sTroll := false ;
9183: LD_ADDR_EXP 48
9187: PUSH
9188: LD_INT 0
9190: ST_TO_ADDR
// sSlow := false ;
9191: LD_ADDR_EXP 49
9195: PUSH
9196: LD_INT 0
9198: ST_TO_ADDR
// sLack := false ;
9199: LD_ADDR_EXP 50
9203: PUSH
9204: LD_INT 0
9206: ST_TO_ADDR
// sTank := false ;
9207: LD_ADDR_EXP 52
9211: PUSH
9212: LD_INT 0
9214: ST_TO_ADDR
// sRemote := false ;
9215: LD_ADDR_EXP 53
9219: PUSH
9220: LD_INT 0
9222: ST_TO_ADDR
// sPowell := false ;
9223: LD_ADDR_EXP 54
9227: PUSH
9228: LD_INT 0
9230: ST_TO_ADDR
// sTeleport := false ;
9231: LD_ADDR_EXP 57
9235: PUSH
9236: LD_INT 0
9238: ST_TO_ADDR
// sOilTower := false ;
9239: LD_ADDR_EXP 59
9243: PUSH
9244: LD_INT 0
9246: ST_TO_ADDR
// sShovel := false ;
9247: LD_ADDR_EXP 60
9251: PUSH
9252: LD_INT 0
9254: ST_TO_ADDR
// sSheik := false ;
9255: LD_ADDR_EXP 61
9259: PUSH
9260: LD_INT 0
9262: ST_TO_ADDR
// sEarthquake := false ;
9263: LD_ADDR_EXP 63
9267: PUSH
9268: LD_INT 0
9270: ST_TO_ADDR
// sAI := false ;
9271: LD_ADDR_EXP 64
9275: PUSH
9276: LD_INT 0
9278: ST_TO_ADDR
// sCargo := false ;
9279: LD_ADDR_EXP 67
9283: PUSH
9284: LD_INT 0
9286: ST_TO_ADDR
// sDLaser := false ;
9287: LD_ADDR_EXP 68
9291: PUSH
9292: LD_INT 0
9294: ST_TO_ADDR
// sExchange := false ;
9295: LD_ADDR_EXP 69
9299: PUSH
9300: LD_INT 0
9302: ST_TO_ADDR
// sFac := false ;
9303: LD_ADDR_EXP 70
9307: PUSH
9308: LD_INT 0
9310: ST_TO_ADDR
// sPower := false ;
9311: LD_ADDR_EXP 71
9315: PUSH
9316: LD_INT 0
9318: ST_TO_ADDR
// sRandom := false ;
9319: LD_ADDR_EXP 72
9323: PUSH
9324: LD_INT 0
9326: ST_TO_ADDR
// sShield := false ;
9327: LD_ADDR_EXP 73
9331: PUSH
9332: LD_INT 0
9334: ST_TO_ADDR
// sTime := false ;
9335: LD_ADDR_EXP 74
9339: PUSH
9340: LD_INT 0
9342: ST_TO_ADDR
// sTools := false ;
9343: LD_ADDR_EXP 75
9347: PUSH
9348: LD_INT 0
9350: ST_TO_ADDR
// sSold := false ;
9351: LD_ADDR_EXP 40
9355: PUSH
9356: LD_INT 0
9358: ST_TO_ADDR
// sDiff := false ;
9359: LD_ADDR_EXP 41
9363: PUSH
9364: LD_INT 0
9366: ST_TO_ADDR
// sFog := false ;
9367: LD_ADDR_EXP 44
9371: PUSH
9372: LD_INT 0
9374: ST_TO_ADDR
// sReset := false ;
9375: LD_ADDR_EXP 45
9379: PUSH
9380: LD_INT 0
9382: ST_TO_ADDR
// sSun := false ;
9383: LD_ADDR_EXP 46
9387: PUSH
9388: LD_INT 0
9390: ST_TO_ADDR
// sTiger := false ;
9391: LD_ADDR_EXP 42
9395: PUSH
9396: LD_INT 0
9398: ST_TO_ADDR
// sBomb := false ;
9399: LD_ADDR_EXP 43
9403: PUSH
9404: LD_INT 0
9406: ST_TO_ADDR
// sWound := false ;
9407: LD_ADDR_EXP 51
9411: PUSH
9412: LD_INT 0
9414: ST_TO_ADDR
// sBetray := false ;
9415: LD_ADDR_EXP 55
9419: PUSH
9420: LD_INT 0
9422: ST_TO_ADDR
// sContamin := false ;
9423: LD_ADDR_EXP 56
9427: PUSH
9428: LD_INT 0
9430: ST_TO_ADDR
// sOil := false ;
9431: LD_ADDR_EXP 58
9435: PUSH
9436: LD_INT 0
9438: ST_TO_ADDR
// sStu := false ;
9439: LD_ADDR_EXP 62
9443: PUSH
9444: LD_INT 0
9446: ST_TO_ADDR
// sBazooka := false ;
9447: LD_ADDR_EXP 65
9451: PUSH
9452: LD_INT 0
9454: ST_TO_ADDR
// sMortar := false ;
9455: LD_ADDR_EXP 66
9459: PUSH
9460: LD_INT 0
9462: ST_TO_ADDR
// sRanger := false ;
9463: LD_ADDR_EXP 76
9467: PUSH
9468: LD_INT 0
9470: ST_TO_ADDR
// sComputer := false ;
9471: LD_ADDR_EXP 77
9475: PUSH
9476: LD_INT 0
9478: ST_TO_ADDR
// s30 := false ;
9479: LD_ADDR_EXP 78
9483: PUSH
9484: LD_INT 0
9486: ST_TO_ADDR
// s60 := false ;
9487: LD_ADDR_EXP 79
9491: PUSH
9492: LD_INT 0
9494: ST_TO_ADDR
// end ;
9495: LD_VAR 0 1
9499: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
9500: LD_INT 0
9502: PPUSH
9503: PPUSH
9504: PPUSH
9505: PPUSH
9506: PPUSH
9507: PPUSH
9508: PPUSH
// result := [ ] ;
9509: LD_ADDR_VAR 0 2
9513: PUSH
9514: EMPTY
9515: ST_TO_ADDR
// if campaign_id = 1 then
9516: LD_OWVAR 69
9520: PUSH
9521: LD_INT 1
9523: EQUAL
9524: IFFALSE 12690
// begin case mission_number of 1 :
9526: LD_OWVAR 70
9530: PUSH
9531: LD_INT 1
9533: DOUBLE
9534: EQUAL
9535: IFTRUE 9539
9537: GO 9615
9539: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
9540: LD_ADDR_VAR 0 2
9544: PUSH
9545: LD_INT 2
9547: PUSH
9548: LD_INT 4
9550: PUSH
9551: LD_INT 11
9553: PUSH
9554: LD_INT 12
9556: PUSH
9557: LD_INT 15
9559: PUSH
9560: LD_INT 16
9562: PUSH
9563: LD_INT 22
9565: PUSH
9566: LD_INT 23
9568: PUSH
9569: LD_INT 26
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: PUSH
9583: LD_INT 101
9585: PUSH
9586: LD_INT 102
9588: PUSH
9589: LD_INT 106
9591: PUSH
9592: LD_INT 116
9594: PUSH
9595: LD_INT 117
9597: PUSH
9598: LD_INT 118
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: PUSH
9609: EMPTY
9610: LIST
9611: LIST
9612: ST_TO_ADDR
9613: GO 12688
9615: LD_INT 2
9617: DOUBLE
9618: EQUAL
9619: IFTRUE 9623
9621: GO 9707
9623: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9624: LD_ADDR_VAR 0 2
9628: PUSH
9629: LD_INT 2
9631: PUSH
9632: LD_INT 4
9634: PUSH
9635: LD_INT 11
9637: PUSH
9638: LD_INT 12
9640: PUSH
9641: LD_INT 15
9643: PUSH
9644: LD_INT 16
9646: PUSH
9647: LD_INT 22
9649: PUSH
9650: LD_INT 23
9652: PUSH
9653: LD_INT 26
9655: PUSH
9656: EMPTY
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: PUSH
9667: LD_INT 101
9669: PUSH
9670: LD_INT 102
9672: PUSH
9673: LD_INT 105
9675: PUSH
9676: LD_INT 106
9678: PUSH
9679: LD_INT 108
9681: PUSH
9682: LD_INT 116
9684: PUSH
9685: LD_INT 117
9687: PUSH
9688: LD_INT 118
9690: PUSH
9691: EMPTY
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: PUSH
9701: EMPTY
9702: LIST
9703: LIST
9704: ST_TO_ADDR
9705: GO 12688
9707: LD_INT 3
9709: DOUBLE
9710: EQUAL
9711: IFTRUE 9715
9713: GO 9803
9715: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9716: LD_ADDR_VAR 0 2
9720: PUSH
9721: LD_INT 2
9723: PUSH
9724: LD_INT 4
9726: PUSH
9727: LD_INT 5
9729: PUSH
9730: LD_INT 11
9732: PUSH
9733: LD_INT 12
9735: PUSH
9736: LD_INT 15
9738: PUSH
9739: LD_INT 16
9741: PUSH
9742: LD_INT 22
9744: PUSH
9745: LD_INT 26
9747: PUSH
9748: LD_INT 36
9750: PUSH
9751: EMPTY
9752: LIST
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: PUSH
9763: LD_INT 101
9765: PUSH
9766: LD_INT 102
9768: PUSH
9769: LD_INT 105
9771: PUSH
9772: LD_INT 106
9774: PUSH
9775: LD_INT 108
9777: PUSH
9778: LD_INT 116
9780: PUSH
9781: LD_INT 117
9783: PUSH
9784: LD_INT 118
9786: PUSH
9787: EMPTY
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: ST_TO_ADDR
9801: GO 12688
9803: LD_INT 4
9805: DOUBLE
9806: EQUAL
9807: IFTRUE 9811
9809: GO 9907
9811: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9812: LD_ADDR_VAR 0 2
9816: PUSH
9817: LD_INT 2
9819: PUSH
9820: LD_INT 4
9822: PUSH
9823: LD_INT 5
9825: PUSH
9826: LD_INT 8
9828: PUSH
9829: LD_INT 11
9831: PUSH
9832: LD_INT 12
9834: PUSH
9835: LD_INT 15
9837: PUSH
9838: LD_INT 16
9840: PUSH
9841: LD_INT 22
9843: PUSH
9844: LD_INT 23
9846: PUSH
9847: LD_INT 26
9849: PUSH
9850: LD_INT 36
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: LIST
9857: LIST
9858: LIST
9859: LIST
9860: LIST
9861: LIST
9862: LIST
9863: LIST
9864: LIST
9865: LIST
9866: PUSH
9867: LD_INT 101
9869: PUSH
9870: LD_INT 102
9872: PUSH
9873: LD_INT 105
9875: PUSH
9876: LD_INT 106
9878: PUSH
9879: LD_INT 108
9881: PUSH
9882: LD_INT 116
9884: PUSH
9885: LD_INT 117
9887: PUSH
9888: LD_INT 118
9890: PUSH
9891: EMPTY
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: PUSH
9901: EMPTY
9902: LIST
9903: LIST
9904: ST_TO_ADDR
9905: GO 12688
9907: LD_INT 5
9909: DOUBLE
9910: EQUAL
9911: IFTRUE 9915
9913: GO 10027
9915: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9916: LD_ADDR_VAR 0 2
9920: PUSH
9921: LD_INT 2
9923: PUSH
9924: LD_INT 4
9926: PUSH
9927: LD_INT 5
9929: PUSH
9930: LD_INT 6
9932: PUSH
9933: LD_INT 8
9935: PUSH
9936: LD_INT 11
9938: PUSH
9939: LD_INT 12
9941: PUSH
9942: LD_INT 15
9944: PUSH
9945: LD_INT 16
9947: PUSH
9948: LD_INT 22
9950: PUSH
9951: LD_INT 23
9953: PUSH
9954: LD_INT 25
9956: PUSH
9957: LD_INT 26
9959: PUSH
9960: LD_INT 36
9962: PUSH
9963: EMPTY
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: PUSH
9979: LD_INT 101
9981: PUSH
9982: LD_INT 102
9984: PUSH
9985: LD_INT 105
9987: PUSH
9988: LD_INT 106
9990: PUSH
9991: LD_INT 108
9993: PUSH
9994: LD_INT 109
9996: PUSH
9997: LD_INT 112
9999: PUSH
10000: LD_INT 116
10002: PUSH
10003: LD_INT 117
10005: PUSH
10006: LD_INT 118
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: PUSH
10021: EMPTY
10022: LIST
10023: LIST
10024: ST_TO_ADDR
10025: GO 12688
10027: LD_INT 6
10029: DOUBLE
10030: EQUAL
10031: IFTRUE 10035
10033: GO 10167
10035: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
10036: LD_ADDR_VAR 0 2
10040: PUSH
10041: LD_INT 2
10043: PUSH
10044: LD_INT 4
10046: PUSH
10047: LD_INT 5
10049: PUSH
10050: LD_INT 6
10052: PUSH
10053: LD_INT 8
10055: PUSH
10056: LD_INT 11
10058: PUSH
10059: LD_INT 12
10061: PUSH
10062: LD_INT 15
10064: PUSH
10065: LD_INT 16
10067: PUSH
10068: LD_INT 20
10070: PUSH
10071: LD_INT 21
10073: PUSH
10074: LD_INT 22
10076: PUSH
10077: LD_INT 23
10079: PUSH
10080: LD_INT 25
10082: PUSH
10083: LD_INT 26
10085: PUSH
10086: LD_INT 30
10088: PUSH
10089: LD_INT 31
10091: PUSH
10092: LD_INT 32
10094: PUSH
10095: LD_INT 36
10097: PUSH
10098: EMPTY
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: PUSH
10119: LD_INT 101
10121: PUSH
10122: LD_INT 102
10124: PUSH
10125: LD_INT 105
10127: PUSH
10128: LD_INT 106
10130: PUSH
10131: LD_INT 108
10133: PUSH
10134: LD_INT 109
10136: PUSH
10137: LD_INT 112
10139: PUSH
10140: LD_INT 116
10142: PUSH
10143: LD_INT 117
10145: PUSH
10146: LD_INT 118
10148: PUSH
10149: EMPTY
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: PUSH
10161: EMPTY
10162: LIST
10163: LIST
10164: ST_TO_ADDR
10165: GO 12688
10167: LD_INT 7
10169: DOUBLE
10170: EQUAL
10171: IFTRUE 10175
10173: GO 10287
10175: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
10176: LD_ADDR_VAR 0 2
10180: PUSH
10181: LD_INT 2
10183: PUSH
10184: LD_INT 4
10186: PUSH
10187: LD_INT 5
10189: PUSH
10190: LD_INT 7
10192: PUSH
10193: LD_INT 11
10195: PUSH
10196: LD_INT 12
10198: PUSH
10199: LD_INT 15
10201: PUSH
10202: LD_INT 16
10204: PUSH
10205: LD_INT 20
10207: PUSH
10208: LD_INT 21
10210: PUSH
10211: LD_INT 22
10213: PUSH
10214: LD_INT 23
10216: PUSH
10217: LD_INT 25
10219: PUSH
10220: LD_INT 26
10222: PUSH
10223: EMPTY
10224: LIST
10225: LIST
10226: LIST
10227: LIST
10228: LIST
10229: LIST
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: LIST
10236: LIST
10237: LIST
10238: PUSH
10239: LD_INT 101
10241: PUSH
10242: LD_INT 102
10244: PUSH
10245: LD_INT 103
10247: PUSH
10248: LD_INT 105
10250: PUSH
10251: LD_INT 106
10253: PUSH
10254: LD_INT 108
10256: PUSH
10257: LD_INT 112
10259: PUSH
10260: LD_INT 116
10262: PUSH
10263: LD_INT 117
10265: PUSH
10266: LD_INT 118
10268: PUSH
10269: EMPTY
10270: LIST
10271: LIST
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: PUSH
10281: EMPTY
10282: LIST
10283: LIST
10284: ST_TO_ADDR
10285: GO 12688
10287: LD_INT 8
10289: DOUBLE
10290: EQUAL
10291: IFTRUE 10295
10293: GO 10435
10295: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
10296: LD_ADDR_VAR 0 2
10300: PUSH
10301: LD_INT 2
10303: PUSH
10304: LD_INT 4
10306: PUSH
10307: LD_INT 5
10309: PUSH
10310: LD_INT 6
10312: PUSH
10313: LD_INT 7
10315: PUSH
10316: LD_INT 8
10318: PUSH
10319: LD_INT 11
10321: PUSH
10322: LD_INT 12
10324: PUSH
10325: LD_INT 15
10327: PUSH
10328: LD_INT 16
10330: PUSH
10331: LD_INT 20
10333: PUSH
10334: LD_INT 21
10336: PUSH
10337: LD_INT 22
10339: PUSH
10340: LD_INT 23
10342: PUSH
10343: LD_INT 25
10345: PUSH
10346: LD_INT 26
10348: PUSH
10349: LD_INT 30
10351: PUSH
10352: LD_INT 31
10354: PUSH
10355: LD_INT 32
10357: PUSH
10358: LD_INT 36
10360: PUSH
10361: EMPTY
10362: LIST
10363: LIST
10364: LIST
10365: LIST
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: PUSH
10383: LD_INT 101
10385: PUSH
10386: LD_INT 102
10388: PUSH
10389: LD_INT 103
10391: PUSH
10392: LD_INT 105
10394: PUSH
10395: LD_INT 106
10397: PUSH
10398: LD_INT 108
10400: PUSH
10401: LD_INT 109
10403: PUSH
10404: LD_INT 112
10406: PUSH
10407: LD_INT 116
10409: PUSH
10410: LD_INT 117
10412: PUSH
10413: LD_INT 118
10415: PUSH
10416: EMPTY
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: PUSH
10429: EMPTY
10430: LIST
10431: LIST
10432: ST_TO_ADDR
10433: GO 12688
10435: LD_INT 9
10437: DOUBLE
10438: EQUAL
10439: IFTRUE 10443
10441: GO 10591
10443: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
10444: LD_ADDR_VAR 0 2
10448: PUSH
10449: LD_INT 2
10451: PUSH
10452: LD_INT 4
10454: PUSH
10455: LD_INT 5
10457: PUSH
10458: LD_INT 6
10460: PUSH
10461: LD_INT 7
10463: PUSH
10464: LD_INT 8
10466: PUSH
10467: LD_INT 11
10469: PUSH
10470: LD_INT 12
10472: PUSH
10473: LD_INT 15
10475: PUSH
10476: LD_INT 16
10478: PUSH
10479: LD_INT 20
10481: PUSH
10482: LD_INT 21
10484: PUSH
10485: LD_INT 22
10487: PUSH
10488: LD_INT 23
10490: PUSH
10491: LD_INT 25
10493: PUSH
10494: LD_INT 26
10496: PUSH
10497: LD_INT 28
10499: PUSH
10500: LD_INT 30
10502: PUSH
10503: LD_INT 31
10505: PUSH
10506: LD_INT 32
10508: PUSH
10509: LD_INT 36
10511: PUSH
10512: EMPTY
10513: LIST
10514: LIST
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: PUSH
10535: LD_INT 101
10537: PUSH
10538: LD_INT 102
10540: PUSH
10541: LD_INT 103
10543: PUSH
10544: LD_INT 105
10546: PUSH
10547: LD_INT 106
10549: PUSH
10550: LD_INT 108
10552: PUSH
10553: LD_INT 109
10555: PUSH
10556: LD_INT 112
10558: PUSH
10559: LD_INT 114
10561: PUSH
10562: LD_INT 116
10564: PUSH
10565: LD_INT 117
10567: PUSH
10568: LD_INT 118
10570: PUSH
10571: EMPTY
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: ST_TO_ADDR
10589: GO 12688
10591: LD_INT 10
10593: DOUBLE
10594: EQUAL
10595: IFTRUE 10599
10597: GO 10795
10599: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10600: LD_ADDR_VAR 0 2
10604: PUSH
10605: LD_INT 2
10607: PUSH
10608: LD_INT 4
10610: PUSH
10611: LD_INT 5
10613: PUSH
10614: LD_INT 6
10616: PUSH
10617: LD_INT 7
10619: PUSH
10620: LD_INT 8
10622: PUSH
10623: LD_INT 9
10625: PUSH
10626: LD_INT 10
10628: PUSH
10629: LD_INT 11
10631: PUSH
10632: LD_INT 12
10634: PUSH
10635: LD_INT 13
10637: PUSH
10638: LD_INT 14
10640: PUSH
10641: LD_INT 15
10643: PUSH
10644: LD_INT 16
10646: PUSH
10647: LD_INT 17
10649: PUSH
10650: LD_INT 18
10652: PUSH
10653: LD_INT 19
10655: PUSH
10656: LD_INT 20
10658: PUSH
10659: LD_INT 21
10661: PUSH
10662: LD_INT 22
10664: PUSH
10665: LD_INT 23
10667: PUSH
10668: LD_INT 24
10670: PUSH
10671: LD_INT 25
10673: PUSH
10674: LD_INT 26
10676: PUSH
10677: LD_INT 28
10679: PUSH
10680: LD_INT 30
10682: PUSH
10683: LD_INT 31
10685: PUSH
10686: LD_INT 32
10688: PUSH
10689: LD_INT 36
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: LIST
10696: LIST
10697: LIST
10698: LIST
10699: LIST
10700: LIST
10701: LIST
10702: LIST
10703: LIST
10704: LIST
10705: LIST
10706: LIST
10707: LIST
10708: LIST
10709: LIST
10710: LIST
10711: LIST
10712: LIST
10713: LIST
10714: LIST
10715: LIST
10716: LIST
10717: LIST
10718: LIST
10719: LIST
10720: LIST
10721: LIST
10722: PUSH
10723: LD_INT 101
10725: PUSH
10726: LD_INT 102
10728: PUSH
10729: LD_INT 103
10731: PUSH
10732: LD_INT 104
10734: PUSH
10735: LD_INT 105
10737: PUSH
10738: LD_INT 106
10740: PUSH
10741: LD_INT 107
10743: PUSH
10744: LD_INT 108
10746: PUSH
10747: LD_INT 109
10749: PUSH
10750: LD_INT 110
10752: PUSH
10753: LD_INT 111
10755: PUSH
10756: LD_INT 112
10758: PUSH
10759: LD_INT 114
10761: PUSH
10762: LD_INT 116
10764: PUSH
10765: LD_INT 117
10767: PUSH
10768: LD_INT 118
10770: PUSH
10771: EMPTY
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: PUSH
10789: EMPTY
10790: LIST
10791: LIST
10792: ST_TO_ADDR
10793: GO 12688
10795: LD_INT 11
10797: DOUBLE
10798: EQUAL
10799: IFTRUE 10803
10801: GO 11007
10803: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10804: LD_ADDR_VAR 0 2
10808: PUSH
10809: LD_INT 2
10811: PUSH
10812: LD_INT 3
10814: PUSH
10815: LD_INT 4
10817: PUSH
10818: LD_INT 5
10820: PUSH
10821: LD_INT 6
10823: PUSH
10824: LD_INT 7
10826: PUSH
10827: LD_INT 8
10829: PUSH
10830: LD_INT 9
10832: PUSH
10833: LD_INT 10
10835: PUSH
10836: LD_INT 11
10838: PUSH
10839: LD_INT 12
10841: PUSH
10842: LD_INT 13
10844: PUSH
10845: LD_INT 14
10847: PUSH
10848: LD_INT 15
10850: PUSH
10851: LD_INT 16
10853: PUSH
10854: LD_INT 17
10856: PUSH
10857: LD_INT 18
10859: PUSH
10860: LD_INT 19
10862: PUSH
10863: LD_INT 20
10865: PUSH
10866: LD_INT 21
10868: PUSH
10869: LD_INT 22
10871: PUSH
10872: LD_INT 23
10874: PUSH
10875: LD_INT 24
10877: PUSH
10878: LD_INT 25
10880: PUSH
10881: LD_INT 26
10883: PUSH
10884: LD_INT 28
10886: PUSH
10887: LD_INT 30
10889: PUSH
10890: LD_INT 31
10892: PUSH
10893: LD_INT 32
10895: PUSH
10896: LD_INT 34
10898: PUSH
10899: LD_INT 36
10901: PUSH
10902: EMPTY
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: PUSH
10935: LD_INT 101
10937: PUSH
10938: LD_INT 102
10940: PUSH
10941: LD_INT 103
10943: PUSH
10944: LD_INT 104
10946: PUSH
10947: LD_INT 105
10949: PUSH
10950: LD_INT 106
10952: PUSH
10953: LD_INT 107
10955: PUSH
10956: LD_INT 108
10958: PUSH
10959: LD_INT 109
10961: PUSH
10962: LD_INT 110
10964: PUSH
10965: LD_INT 111
10967: PUSH
10968: LD_INT 112
10970: PUSH
10971: LD_INT 114
10973: PUSH
10974: LD_INT 116
10976: PUSH
10977: LD_INT 117
10979: PUSH
10980: LD_INT 118
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: PUSH
11001: EMPTY
11002: LIST
11003: LIST
11004: ST_TO_ADDR
11005: GO 12688
11007: LD_INT 12
11009: DOUBLE
11010: EQUAL
11011: IFTRUE 11015
11013: GO 11235
11015: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
11016: LD_ADDR_VAR 0 2
11020: PUSH
11021: LD_INT 1
11023: PUSH
11024: LD_INT 2
11026: PUSH
11027: LD_INT 3
11029: PUSH
11030: LD_INT 4
11032: PUSH
11033: LD_INT 5
11035: PUSH
11036: LD_INT 6
11038: PUSH
11039: LD_INT 7
11041: PUSH
11042: LD_INT 8
11044: PUSH
11045: LD_INT 9
11047: PUSH
11048: LD_INT 10
11050: PUSH
11051: LD_INT 11
11053: PUSH
11054: LD_INT 12
11056: PUSH
11057: LD_INT 13
11059: PUSH
11060: LD_INT 14
11062: PUSH
11063: LD_INT 15
11065: PUSH
11066: LD_INT 16
11068: PUSH
11069: LD_INT 17
11071: PUSH
11072: LD_INT 18
11074: PUSH
11075: LD_INT 19
11077: PUSH
11078: LD_INT 20
11080: PUSH
11081: LD_INT 21
11083: PUSH
11084: LD_INT 22
11086: PUSH
11087: LD_INT 23
11089: PUSH
11090: LD_INT 24
11092: PUSH
11093: LD_INT 25
11095: PUSH
11096: LD_INT 26
11098: PUSH
11099: LD_INT 27
11101: PUSH
11102: LD_INT 28
11104: PUSH
11105: LD_INT 30
11107: PUSH
11108: LD_INT 31
11110: PUSH
11111: LD_INT 32
11113: PUSH
11114: LD_INT 33
11116: PUSH
11117: LD_INT 34
11119: PUSH
11120: LD_INT 36
11122: PUSH
11123: EMPTY
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: LIST
11151: LIST
11152: LIST
11153: LIST
11154: LIST
11155: LIST
11156: LIST
11157: LIST
11158: PUSH
11159: LD_INT 101
11161: PUSH
11162: LD_INT 102
11164: PUSH
11165: LD_INT 103
11167: PUSH
11168: LD_INT 104
11170: PUSH
11171: LD_INT 105
11173: PUSH
11174: LD_INT 106
11176: PUSH
11177: LD_INT 107
11179: PUSH
11180: LD_INT 108
11182: PUSH
11183: LD_INT 109
11185: PUSH
11186: LD_INT 110
11188: PUSH
11189: LD_INT 111
11191: PUSH
11192: LD_INT 112
11194: PUSH
11195: LD_INT 113
11197: PUSH
11198: LD_INT 114
11200: PUSH
11201: LD_INT 116
11203: PUSH
11204: LD_INT 117
11206: PUSH
11207: LD_INT 118
11209: PUSH
11210: EMPTY
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: PUSH
11229: EMPTY
11230: LIST
11231: LIST
11232: ST_TO_ADDR
11233: GO 12688
11235: LD_INT 13
11237: DOUBLE
11238: EQUAL
11239: IFTRUE 11243
11241: GO 11451
11243: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
11244: LD_ADDR_VAR 0 2
11248: PUSH
11249: LD_INT 1
11251: PUSH
11252: LD_INT 2
11254: PUSH
11255: LD_INT 3
11257: PUSH
11258: LD_INT 4
11260: PUSH
11261: LD_INT 5
11263: PUSH
11264: LD_INT 8
11266: PUSH
11267: LD_INT 9
11269: PUSH
11270: LD_INT 10
11272: PUSH
11273: LD_INT 11
11275: PUSH
11276: LD_INT 12
11278: PUSH
11279: LD_INT 14
11281: PUSH
11282: LD_INT 15
11284: PUSH
11285: LD_INT 16
11287: PUSH
11288: LD_INT 17
11290: PUSH
11291: LD_INT 18
11293: PUSH
11294: LD_INT 19
11296: PUSH
11297: LD_INT 20
11299: PUSH
11300: LD_INT 21
11302: PUSH
11303: LD_INT 22
11305: PUSH
11306: LD_INT 23
11308: PUSH
11309: LD_INT 24
11311: PUSH
11312: LD_INT 25
11314: PUSH
11315: LD_INT 26
11317: PUSH
11318: LD_INT 27
11320: PUSH
11321: LD_INT 28
11323: PUSH
11324: LD_INT 30
11326: PUSH
11327: LD_INT 31
11329: PUSH
11330: LD_INT 32
11332: PUSH
11333: LD_INT 33
11335: PUSH
11336: LD_INT 34
11338: PUSH
11339: LD_INT 36
11341: PUSH
11342: EMPTY
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: LIST
11359: LIST
11360: LIST
11361: LIST
11362: LIST
11363: LIST
11364: LIST
11365: LIST
11366: LIST
11367: LIST
11368: LIST
11369: LIST
11370: LIST
11371: LIST
11372: LIST
11373: LIST
11374: PUSH
11375: LD_INT 101
11377: PUSH
11378: LD_INT 102
11380: PUSH
11381: LD_INT 103
11383: PUSH
11384: LD_INT 104
11386: PUSH
11387: LD_INT 105
11389: PUSH
11390: LD_INT 106
11392: PUSH
11393: LD_INT 107
11395: PUSH
11396: LD_INT 108
11398: PUSH
11399: LD_INT 109
11401: PUSH
11402: LD_INT 110
11404: PUSH
11405: LD_INT 111
11407: PUSH
11408: LD_INT 112
11410: PUSH
11411: LD_INT 113
11413: PUSH
11414: LD_INT 114
11416: PUSH
11417: LD_INT 116
11419: PUSH
11420: LD_INT 117
11422: PUSH
11423: LD_INT 118
11425: PUSH
11426: EMPTY
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: PUSH
11445: EMPTY
11446: LIST
11447: LIST
11448: ST_TO_ADDR
11449: GO 12688
11451: LD_INT 14
11453: DOUBLE
11454: EQUAL
11455: IFTRUE 11459
11457: GO 11683
11459: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
11460: LD_ADDR_VAR 0 2
11464: PUSH
11465: LD_INT 1
11467: PUSH
11468: LD_INT 2
11470: PUSH
11471: LD_INT 3
11473: PUSH
11474: LD_INT 4
11476: PUSH
11477: LD_INT 5
11479: PUSH
11480: LD_INT 6
11482: PUSH
11483: LD_INT 7
11485: PUSH
11486: LD_INT 8
11488: PUSH
11489: LD_INT 9
11491: PUSH
11492: LD_INT 10
11494: PUSH
11495: LD_INT 11
11497: PUSH
11498: LD_INT 12
11500: PUSH
11501: LD_INT 13
11503: PUSH
11504: LD_INT 14
11506: PUSH
11507: LD_INT 15
11509: PUSH
11510: LD_INT 16
11512: PUSH
11513: LD_INT 17
11515: PUSH
11516: LD_INT 18
11518: PUSH
11519: LD_INT 19
11521: PUSH
11522: LD_INT 20
11524: PUSH
11525: LD_INT 21
11527: PUSH
11528: LD_INT 22
11530: PUSH
11531: LD_INT 23
11533: PUSH
11534: LD_INT 24
11536: PUSH
11537: LD_INT 25
11539: PUSH
11540: LD_INT 26
11542: PUSH
11543: LD_INT 27
11545: PUSH
11546: LD_INT 28
11548: PUSH
11549: LD_INT 29
11551: PUSH
11552: LD_INT 30
11554: PUSH
11555: LD_INT 31
11557: PUSH
11558: LD_INT 32
11560: PUSH
11561: LD_INT 33
11563: PUSH
11564: LD_INT 34
11566: PUSH
11567: LD_INT 36
11569: PUSH
11570: EMPTY
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: PUSH
11607: LD_INT 101
11609: PUSH
11610: LD_INT 102
11612: PUSH
11613: LD_INT 103
11615: PUSH
11616: LD_INT 104
11618: PUSH
11619: LD_INT 105
11621: PUSH
11622: LD_INT 106
11624: PUSH
11625: LD_INT 107
11627: PUSH
11628: LD_INT 108
11630: PUSH
11631: LD_INT 109
11633: PUSH
11634: LD_INT 110
11636: PUSH
11637: LD_INT 111
11639: PUSH
11640: LD_INT 112
11642: PUSH
11643: LD_INT 113
11645: PUSH
11646: LD_INT 114
11648: PUSH
11649: LD_INT 116
11651: PUSH
11652: LD_INT 117
11654: PUSH
11655: LD_INT 118
11657: PUSH
11658: EMPTY
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: PUSH
11677: EMPTY
11678: LIST
11679: LIST
11680: ST_TO_ADDR
11681: GO 12688
11683: LD_INT 15
11685: DOUBLE
11686: EQUAL
11687: IFTRUE 11691
11689: GO 11915
11691: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11692: LD_ADDR_VAR 0 2
11696: PUSH
11697: LD_INT 1
11699: PUSH
11700: LD_INT 2
11702: PUSH
11703: LD_INT 3
11705: PUSH
11706: LD_INT 4
11708: PUSH
11709: LD_INT 5
11711: PUSH
11712: LD_INT 6
11714: PUSH
11715: LD_INT 7
11717: PUSH
11718: LD_INT 8
11720: PUSH
11721: LD_INT 9
11723: PUSH
11724: LD_INT 10
11726: PUSH
11727: LD_INT 11
11729: PUSH
11730: LD_INT 12
11732: PUSH
11733: LD_INT 13
11735: PUSH
11736: LD_INT 14
11738: PUSH
11739: LD_INT 15
11741: PUSH
11742: LD_INT 16
11744: PUSH
11745: LD_INT 17
11747: PUSH
11748: LD_INT 18
11750: PUSH
11751: LD_INT 19
11753: PUSH
11754: LD_INT 20
11756: PUSH
11757: LD_INT 21
11759: PUSH
11760: LD_INT 22
11762: PUSH
11763: LD_INT 23
11765: PUSH
11766: LD_INT 24
11768: PUSH
11769: LD_INT 25
11771: PUSH
11772: LD_INT 26
11774: PUSH
11775: LD_INT 27
11777: PUSH
11778: LD_INT 28
11780: PUSH
11781: LD_INT 29
11783: PUSH
11784: LD_INT 30
11786: PUSH
11787: LD_INT 31
11789: PUSH
11790: LD_INT 32
11792: PUSH
11793: LD_INT 33
11795: PUSH
11796: LD_INT 34
11798: PUSH
11799: LD_INT 36
11801: PUSH
11802: EMPTY
11803: LIST
11804: LIST
11805: LIST
11806: LIST
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: LIST
11828: LIST
11829: LIST
11830: LIST
11831: LIST
11832: LIST
11833: LIST
11834: LIST
11835: LIST
11836: LIST
11837: LIST
11838: PUSH
11839: LD_INT 101
11841: PUSH
11842: LD_INT 102
11844: PUSH
11845: LD_INT 103
11847: PUSH
11848: LD_INT 104
11850: PUSH
11851: LD_INT 105
11853: PUSH
11854: LD_INT 106
11856: PUSH
11857: LD_INT 107
11859: PUSH
11860: LD_INT 108
11862: PUSH
11863: LD_INT 109
11865: PUSH
11866: LD_INT 110
11868: PUSH
11869: LD_INT 111
11871: PUSH
11872: LD_INT 112
11874: PUSH
11875: LD_INT 113
11877: PUSH
11878: LD_INT 114
11880: PUSH
11881: LD_INT 116
11883: PUSH
11884: LD_INT 117
11886: PUSH
11887: LD_INT 118
11889: PUSH
11890: EMPTY
11891: LIST
11892: LIST
11893: LIST
11894: LIST
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: LIST
11904: LIST
11905: LIST
11906: LIST
11907: LIST
11908: PUSH
11909: EMPTY
11910: LIST
11911: LIST
11912: ST_TO_ADDR
11913: GO 12688
11915: LD_INT 16
11917: DOUBLE
11918: EQUAL
11919: IFTRUE 11923
11921: GO 12059
11923: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11924: LD_ADDR_VAR 0 2
11928: PUSH
11929: LD_INT 2
11931: PUSH
11932: LD_INT 4
11934: PUSH
11935: LD_INT 5
11937: PUSH
11938: LD_INT 7
11940: PUSH
11941: LD_INT 11
11943: PUSH
11944: LD_INT 12
11946: PUSH
11947: LD_INT 15
11949: PUSH
11950: LD_INT 16
11952: PUSH
11953: LD_INT 20
11955: PUSH
11956: LD_INT 21
11958: PUSH
11959: LD_INT 22
11961: PUSH
11962: LD_INT 23
11964: PUSH
11965: LD_INT 25
11967: PUSH
11968: LD_INT 26
11970: PUSH
11971: LD_INT 30
11973: PUSH
11974: LD_INT 31
11976: PUSH
11977: LD_INT 32
11979: PUSH
11980: LD_INT 33
11982: PUSH
11983: LD_INT 34
11985: PUSH
11986: EMPTY
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: LIST
12006: PUSH
12007: LD_INT 101
12009: PUSH
12010: LD_INT 102
12012: PUSH
12013: LD_INT 103
12015: PUSH
12016: LD_INT 106
12018: PUSH
12019: LD_INT 108
12021: PUSH
12022: LD_INT 112
12024: PUSH
12025: LD_INT 113
12027: PUSH
12028: LD_INT 114
12030: PUSH
12031: LD_INT 116
12033: PUSH
12034: LD_INT 117
12036: PUSH
12037: LD_INT 118
12039: PUSH
12040: EMPTY
12041: LIST
12042: LIST
12043: LIST
12044: LIST
12045: LIST
12046: LIST
12047: LIST
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: PUSH
12053: EMPTY
12054: LIST
12055: LIST
12056: ST_TO_ADDR
12057: GO 12688
12059: LD_INT 17
12061: DOUBLE
12062: EQUAL
12063: IFTRUE 12067
12065: GO 12291
12067: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
12068: LD_ADDR_VAR 0 2
12072: PUSH
12073: LD_INT 1
12075: PUSH
12076: LD_INT 2
12078: PUSH
12079: LD_INT 3
12081: PUSH
12082: LD_INT 4
12084: PUSH
12085: LD_INT 5
12087: PUSH
12088: LD_INT 6
12090: PUSH
12091: LD_INT 7
12093: PUSH
12094: LD_INT 8
12096: PUSH
12097: LD_INT 9
12099: PUSH
12100: LD_INT 10
12102: PUSH
12103: LD_INT 11
12105: PUSH
12106: LD_INT 12
12108: PUSH
12109: LD_INT 13
12111: PUSH
12112: LD_INT 14
12114: PUSH
12115: LD_INT 15
12117: PUSH
12118: LD_INT 16
12120: PUSH
12121: LD_INT 17
12123: PUSH
12124: LD_INT 18
12126: PUSH
12127: LD_INT 19
12129: PUSH
12130: LD_INT 20
12132: PUSH
12133: LD_INT 21
12135: PUSH
12136: LD_INT 22
12138: PUSH
12139: LD_INT 23
12141: PUSH
12142: LD_INT 24
12144: PUSH
12145: LD_INT 25
12147: PUSH
12148: LD_INT 26
12150: PUSH
12151: LD_INT 27
12153: PUSH
12154: LD_INT 28
12156: PUSH
12157: LD_INT 29
12159: PUSH
12160: LD_INT 30
12162: PUSH
12163: LD_INT 31
12165: PUSH
12166: LD_INT 32
12168: PUSH
12169: LD_INT 33
12171: PUSH
12172: LD_INT 34
12174: PUSH
12175: LD_INT 36
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: PUSH
12215: LD_INT 101
12217: PUSH
12218: LD_INT 102
12220: PUSH
12221: LD_INT 103
12223: PUSH
12224: LD_INT 104
12226: PUSH
12227: LD_INT 105
12229: PUSH
12230: LD_INT 106
12232: PUSH
12233: LD_INT 107
12235: PUSH
12236: LD_INT 108
12238: PUSH
12239: LD_INT 109
12241: PUSH
12242: LD_INT 110
12244: PUSH
12245: LD_INT 111
12247: PUSH
12248: LD_INT 112
12250: PUSH
12251: LD_INT 113
12253: PUSH
12254: LD_INT 114
12256: PUSH
12257: LD_INT 116
12259: PUSH
12260: LD_INT 117
12262: PUSH
12263: LD_INT 118
12265: PUSH
12266: EMPTY
12267: LIST
12268: LIST
12269: LIST
12270: LIST
12271: LIST
12272: LIST
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: LIST
12280: LIST
12281: LIST
12282: LIST
12283: LIST
12284: PUSH
12285: EMPTY
12286: LIST
12287: LIST
12288: ST_TO_ADDR
12289: GO 12688
12291: LD_INT 18
12293: DOUBLE
12294: EQUAL
12295: IFTRUE 12299
12297: GO 12447
12299: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
12300: LD_ADDR_VAR 0 2
12304: PUSH
12305: LD_INT 2
12307: PUSH
12308: LD_INT 4
12310: PUSH
12311: LD_INT 5
12313: PUSH
12314: LD_INT 7
12316: PUSH
12317: LD_INT 11
12319: PUSH
12320: LD_INT 12
12322: PUSH
12323: LD_INT 15
12325: PUSH
12326: LD_INT 16
12328: PUSH
12329: LD_INT 20
12331: PUSH
12332: LD_INT 21
12334: PUSH
12335: LD_INT 22
12337: PUSH
12338: LD_INT 23
12340: PUSH
12341: LD_INT 25
12343: PUSH
12344: LD_INT 26
12346: PUSH
12347: LD_INT 30
12349: PUSH
12350: LD_INT 31
12352: PUSH
12353: LD_INT 32
12355: PUSH
12356: LD_INT 33
12358: PUSH
12359: LD_INT 34
12361: PUSH
12362: LD_INT 35
12364: PUSH
12365: LD_INT 36
12367: PUSH
12368: EMPTY
12369: LIST
12370: LIST
12371: LIST
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: LIST
12377: LIST
12378: LIST
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: PUSH
12391: LD_INT 101
12393: PUSH
12394: LD_INT 102
12396: PUSH
12397: LD_INT 103
12399: PUSH
12400: LD_INT 106
12402: PUSH
12403: LD_INT 108
12405: PUSH
12406: LD_INT 112
12408: PUSH
12409: LD_INT 113
12411: PUSH
12412: LD_INT 114
12414: PUSH
12415: LD_INT 115
12417: PUSH
12418: LD_INT 116
12420: PUSH
12421: LD_INT 117
12423: PUSH
12424: LD_INT 118
12426: PUSH
12427: EMPTY
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: PUSH
12441: EMPTY
12442: LIST
12443: LIST
12444: ST_TO_ADDR
12445: GO 12688
12447: LD_INT 19
12449: DOUBLE
12450: EQUAL
12451: IFTRUE 12455
12453: GO 12687
12455: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
12456: LD_ADDR_VAR 0 2
12460: PUSH
12461: LD_INT 1
12463: PUSH
12464: LD_INT 2
12466: PUSH
12467: LD_INT 3
12469: PUSH
12470: LD_INT 4
12472: PUSH
12473: LD_INT 5
12475: PUSH
12476: LD_INT 6
12478: PUSH
12479: LD_INT 7
12481: PUSH
12482: LD_INT 8
12484: PUSH
12485: LD_INT 9
12487: PUSH
12488: LD_INT 10
12490: PUSH
12491: LD_INT 11
12493: PUSH
12494: LD_INT 12
12496: PUSH
12497: LD_INT 13
12499: PUSH
12500: LD_INT 14
12502: PUSH
12503: LD_INT 15
12505: PUSH
12506: LD_INT 16
12508: PUSH
12509: LD_INT 17
12511: PUSH
12512: LD_INT 18
12514: PUSH
12515: LD_INT 19
12517: PUSH
12518: LD_INT 20
12520: PUSH
12521: LD_INT 21
12523: PUSH
12524: LD_INT 22
12526: PUSH
12527: LD_INT 23
12529: PUSH
12530: LD_INT 24
12532: PUSH
12533: LD_INT 25
12535: PUSH
12536: LD_INT 26
12538: PUSH
12539: LD_INT 27
12541: PUSH
12542: LD_INT 28
12544: PUSH
12545: LD_INT 29
12547: PUSH
12548: LD_INT 30
12550: PUSH
12551: LD_INT 31
12553: PUSH
12554: LD_INT 32
12556: PUSH
12557: LD_INT 33
12559: PUSH
12560: LD_INT 34
12562: PUSH
12563: LD_INT 35
12565: PUSH
12566: LD_INT 36
12568: PUSH
12569: EMPTY
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: LIST
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: LIST
12596: LIST
12597: LIST
12598: LIST
12599: LIST
12600: LIST
12601: LIST
12602: LIST
12603: LIST
12604: LIST
12605: LIST
12606: PUSH
12607: LD_INT 101
12609: PUSH
12610: LD_INT 102
12612: PUSH
12613: LD_INT 103
12615: PUSH
12616: LD_INT 104
12618: PUSH
12619: LD_INT 105
12621: PUSH
12622: LD_INT 106
12624: PUSH
12625: LD_INT 107
12627: PUSH
12628: LD_INT 108
12630: PUSH
12631: LD_INT 109
12633: PUSH
12634: LD_INT 110
12636: PUSH
12637: LD_INT 111
12639: PUSH
12640: LD_INT 112
12642: PUSH
12643: LD_INT 113
12645: PUSH
12646: LD_INT 114
12648: PUSH
12649: LD_INT 115
12651: PUSH
12652: LD_INT 116
12654: PUSH
12655: LD_INT 117
12657: PUSH
12658: LD_INT 118
12660: PUSH
12661: EMPTY
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: PUSH
12681: EMPTY
12682: LIST
12683: LIST
12684: ST_TO_ADDR
12685: GO 12688
12687: POP
// end else
12688: GO 12919
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12690: LD_ADDR_VAR 0 2
12694: PUSH
12695: LD_INT 1
12697: PUSH
12698: LD_INT 2
12700: PUSH
12701: LD_INT 3
12703: PUSH
12704: LD_INT 4
12706: PUSH
12707: LD_INT 5
12709: PUSH
12710: LD_INT 6
12712: PUSH
12713: LD_INT 7
12715: PUSH
12716: LD_INT 8
12718: PUSH
12719: LD_INT 9
12721: PUSH
12722: LD_INT 10
12724: PUSH
12725: LD_INT 11
12727: PUSH
12728: LD_INT 12
12730: PUSH
12731: LD_INT 13
12733: PUSH
12734: LD_INT 14
12736: PUSH
12737: LD_INT 15
12739: PUSH
12740: LD_INT 16
12742: PUSH
12743: LD_INT 17
12745: PUSH
12746: LD_INT 18
12748: PUSH
12749: LD_INT 19
12751: PUSH
12752: LD_INT 20
12754: PUSH
12755: LD_INT 21
12757: PUSH
12758: LD_INT 22
12760: PUSH
12761: LD_INT 23
12763: PUSH
12764: LD_INT 24
12766: PUSH
12767: LD_INT 25
12769: PUSH
12770: LD_INT 26
12772: PUSH
12773: LD_INT 27
12775: PUSH
12776: LD_INT 28
12778: PUSH
12779: LD_INT 29
12781: PUSH
12782: LD_INT 30
12784: PUSH
12785: LD_INT 31
12787: PUSH
12788: LD_INT 32
12790: PUSH
12791: LD_INT 33
12793: PUSH
12794: LD_INT 34
12796: PUSH
12797: LD_INT 35
12799: PUSH
12800: LD_INT 36
12802: PUSH
12803: EMPTY
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: LIST
12829: LIST
12830: LIST
12831: LIST
12832: LIST
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: LIST
12838: LIST
12839: LIST
12840: PUSH
12841: LD_INT 101
12843: PUSH
12844: LD_INT 102
12846: PUSH
12847: LD_INT 103
12849: PUSH
12850: LD_INT 104
12852: PUSH
12853: LD_INT 105
12855: PUSH
12856: LD_INT 106
12858: PUSH
12859: LD_INT 107
12861: PUSH
12862: LD_INT 108
12864: PUSH
12865: LD_INT 109
12867: PUSH
12868: LD_INT 110
12870: PUSH
12871: LD_INT 111
12873: PUSH
12874: LD_INT 112
12876: PUSH
12877: LD_INT 113
12879: PUSH
12880: LD_INT 114
12882: PUSH
12883: LD_INT 115
12885: PUSH
12886: LD_INT 116
12888: PUSH
12889: LD_INT 117
12891: PUSH
12892: LD_INT 118
12894: PUSH
12895: EMPTY
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: PUSH
12915: EMPTY
12916: LIST
12917: LIST
12918: ST_TO_ADDR
// if result then
12919: LD_VAR 0 2
12923: IFFALSE 13709
// begin normal :=  ;
12925: LD_ADDR_VAR 0 5
12929: PUSH
12930: LD_STRING 
12932: ST_TO_ADDR
// hardcore :=  ;
12933: LD_ADDR_VAR 0 6
12937: PUSH
12938: LD_STRING 
12940: ST_TO_ADDR
// active :=  ;
12941: LD_ADDR_VAR 0 7
12945: PUSH
12946: LD_STRING 
12948: ST_TO_ADDR
// for i = 1 to normalCounter do
12949: LD_ADDR_VAR 0 8
12953: PUSH
12954: DOUBLE
12955: LD_INT 1
12957: DEC
12958: ST_TO_ADDR
12959: LD_EXP 24
12963: PUSH
12964: FOR_TO
12965: IFFALSE 13066
// begin tmp := 0 ;
12967: LD_ADDR_VAR 0 3
12971: PUSH
12972: LD_STRING 0
12974: ST_TO_ADDR
// if result [ 1 ] then
12975: LD_VAR 0 2
12979: PUSH
12980: LD_INT 1
12982: ARRAY
12983: IFFALSE 13048
// if result [ 1 ] [ 1 ] = i then
12985: LD_VAR 0 2
12989: PUSH
12990: LD_INT 1
12992: ARRAY
12993: PUSH
12994: LD_INT 1
12996: ARRAY
12997: PUSH
12998: LD_VAR 0 8
13002: EQUAL
13003: IFFALSE 13048
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
13005: LD_ADDR_VAR 0 2
13009: PUSH
13010: LD_VAR 0 2
13014: PPUSH
13015: LD_INT 1
13017: PPUSH
13018: LD_VAR 0 2
13022: PUSH
13023: LD_INT 1
13025: ARRAY
13026: PPUSH
13027: LD_INT 1
13029: PPUSH
13030: CALL_OW 3
13034: PPUSH
13035: CALL_OW 1
13039: ST_TO_ADDR
// tmp := 1 ;
13040: LD_ADDR_VAR 0 3
13044: PUSH
13045: LD_STRING 1
13047: ST_TO_ADDR
// end ; normal := normal & tmp ;
13048: LD_ADDR_VAR 0 5
13052: PUSH
13053: LD_VAR 0 5
13057: PUSH
13058: LD_VAR 0 3
13062: STR
13063: ST_TO_ADDR
// end ;
13064: GO 12964
13066: POP
13067: POP
// for i = 1 to hardcoreCounter do
13068: LD_ADDR_VAR 0 8
13072: PUSH
13073: DOUBLE
13074: LD_INT 1
13076: DEC
13077: ST_TO_ADDR
13078: LD_EXP 25
13082: PUSH
13083: FOR_TO
13084: IFFALSE 13189
// begin tmp := 0 ;
13086: LD_ADDR_VAR 0 3
13090: PUSH
13091: LD_STRING 0
13093: ST_TO_ADDR
// if result [ 2 ] then
13094: LD_VAR 0 2
13098: PUSH
13099: LD_INT 2
13101: ARRAY
13102: IFFALSE 13171
// if result [ 2 ] [ 1 ] = 100 + i then
13104: LD_VAR 0 2
13108: PUSH
13109: LD_INT 2
13111: ARRAY
13112: PUSH
13113: LD_INT 1
13115: ARRAY
13116: PUSH
13117: LD_INT 100
13119: PUSH
13120: LD_VAR 0 8
13124: PLUS
13125: EQUAL
13126: IFFALSE 13171
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
13128: LD_ADDR_VAR 0 2
13132: PUSH
13133: LD_VAR 0 2
13137: PPUSH
13138: LD_INT 2
13140: PPUSH
13141: LD_VAR 0 2
13145: PUSH
13146: LD_INT 2
13148: ARRAY
13149: PPUSH
13150: LD_INT 1
13152: PPUSH
13153: CALL_OW 3
13157: PPUSH
13158: CALL_OW 1
13162: ST_TO_ADDR
// tmp := 1 ;
13163: LD_ADDR_VAR 0 3
13167: PUSH
13168: LD_STRING 1
13170: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13171: LD_ADDR_VAR 0 6
13175: PUSH
13176: LD_VAR 0 6
13180: PUSH
13181: LD_VAR 0 3
13185: STR
13186: ST_TO_ADDR
// end ;
13187: GO 13083
13189: POP
13190: POP
// if isGameLoad then
13191: LD_VAR 0 1
13195: IFFALSE 13670
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
13197: LD_ADDR_VAR 0 4
13201: PUSH
13202: LD_EXP 28
13206: PUSH
13207: LD_EXP 27
13211: PUSH
13212: LD_EXP 29
13216: PUSH
13217: LD_EXP 26
13221: PUSH
13222: LD_EXP 30
13226: PUSH
13227: LD_EXP 31
13231: PUSH
13232: LD_EXP 32
13236: PUSH
13237: LD_EXP 33
13241: PUSH
13242: LD_EXP 34
13246: PUSH
13247: LD_EXP 35
13251: PUSH
13252: LD_EXP 36
13256: PUSH
13257: LD_EXP 37
13261: PUSH
13262: LD_EXP 38
13266: PUSH
13267: LD_EXP 39
13271: PUSH
13272: LD_EXP 47
13276: PUSH
13277: LD_EXP 48
13281: PUSH
13282: LD_EXP 49
13286: PUSH
13287: LD_EXP 50
13291: PUSH
13292: LD_EXP 52
13296: PUSH
13297: LD_EXP 53
13301: PUSH
13302: LD_EXP 54
13306: PUSH
13307: LD_EXP 57
13311: PUSH
13312: LD_EXP 59
13316: PUSH
13317: LD_EXP 60
13321: PUSH
13322: LD_EXP 61
13326: PUSH
13327: LD_EXP 63
13331: PUSH
13332: LD_EXP 64
13336: PUSH
13337: LD_EXP 67
13341: PUSH
13342: LD_EXP 68
13346: PUSH
13347: LD_EXP 69
13351: PUSH
13352: LD_EXP 70
13356: PUSH
13357: LD_EXP 71
13361: PUSH
13362: LD_EXP 72
13366: PUSH
13367: LD_EXP 73
13371: PUSH
13372: LD_EXP 74
13376: PUSH
13377: LD_EXP 75
13381: PUSH
13382: LD_EXP 40
13386: PUSH
13387: LD_EXP 41
13391: PUSH
13392: LD_EXP 44
13396: PUSH
13397: LD_EXP 45
13401: PUSH
13402: LD_EXP 46
13406: PUSH
13407: LD_EXP 42
13411: PUSH
13412: LD_EXP 43
13416: PUSH
13417: LD_EXP 51
13421: PUSH
13422: LD_EXP 55
13426: PUSH
13427: LD_EXP 56
13431: PUSH
13432: LD_EXP 58
13436: PUSH
13437: LD_EXP 62
13441: PUSH
13442: LD_EXP 65
13446: PUSH
13447: LD_EXP 66
13451: PUSH
13452: LD_EXP 76
13456: PUSH
13457: LD_EXP 77
13461: PUSH
13462: LD_EXP 78
13466: PUSH
13467: LD_EXP 79
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: LIST
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: LIST
13487: LIST
13488: LIST
13489: LIST
13490: LIST
13491: LIST
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: ST_TO_ADDR
// tmp :=  ;
13528: LD_ADDR_VAR 0 3
13532: PUSH
13533: LD_STRING 
13535: ST_TO_ADDR
// for i = 1 to normalCounter do
13536: LD_ADDR_VAR 0 8
13540: PUSH
13541: DOUBLE
13542: LD_INT 1
13544: DEC
13545: ST_TO_ADDR
13546: LD_EXP 24
13550: PUSH
13551: FOR_TO
13552: IFFALSE 13588
// begin if flags [ i ] then
13554: LD_VAR 0 4
13558: PUSH
13559: LD_VAR 0 8
13563: ARRAY
13564: IFFALSE 13586
// tmp := tmp & i & ; ;
13566: LD_ADDR_VAR 0 3
13570: PUSH
13571: LD_VAR 0 3
13575: PUSH
13576: LD_VAR 0 8
13580: STR
13581: PUSH
13582: LD_STRING ;
13584: STR
13585: ST_TO_ADDR
// end ;
13586: GO 13551
13588: POP
13589: POP
// for i = 1 to hardcoreCounter do
13590: LD_ADDR_VAR 0 8
13594: PUSH
13595: DOUBLE
13596: LD_INT 1
13598: DEC
13599: ST_TO_ADDR
13600: LD_EXP 25
13604: PUSH
13605: FOR_TO
13606: IFFALSE 13652
// begin if flags [ normalCounter + i ] then
13608: LD_VAR 0 4
13612: PUSH
13613: LD_EXP 24
13617: PUSH
13618: LD_VAR 0 8
13622: PLUS
13623: ARRAY
13624: IFFALSE 13650
// tmp := tmp & ( 100 + i ) & ; ;
13626: LD_ADDR_VAR 0 3
13630: PUSH
13631: LD_VAR 0 3
13635: PUSH
13636: LD_INT 100
13638: PUSH
13639: LD_VAR 0 8
13643: PLUS
13644: STR
13645: PUSH
13646: LD_STRING ;
13648: STR
13649: ST_TO_ADDR
// end ;
13650: GO 13605
13652: POP
13653: POP
// if tmp then
13654: LD_VAR 0 3
13658: IFFALSE 13670
// active := tmp ;
13660: LD_ADDR_VAR 0 7
13664: PUSH
13665: LD_VAR 0 3
13669: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13670: LD_STRING getStreamItemsFromMission("
13672: PUSH
13673: LD_VAR 0 5
13677: STR
13678: PUSH
13679: LD_STRING ","
13681: STR
13682: PUSH
13683: LD_VAR 0 6
13687: STR
13688: PUSH
13689: LD_STRING ","
13691: STR
13692: PUSH
13693: LD_VAR 0 7
13697: STR
13698: PUSH
13699: LD_STRING ")
13701: STR
13702: PPUSH
13703: CALL_OW 559
// end else
13707: GO 13716
// ToLua ( getStreamItemsFromMission("","","") ) ;
13709: LD_STRING getStreamItemsFromMission("","","")
13711: PPUSH
13712: CALL_OW 559
// end ;
13716: LD_VAR 0 2
13720: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13721: LD_EXP 23
13725: PUSH
13726: LD_EXP 28
13730: AND
13731: IFFALSE 13855
13733: GO 13735
13735: DISABLE
13736: LD_INT 0
13738: PPUSH
13739: PPUSH
// begin enable ;
13740: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13741: LD_ADDR_VAR 0 2
13745: PUSH
13746: LD_INT 22
13748: PUSH
13749: LD_OWVAR 2
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: PUSH
13758: LD_INT 2
13760: PUSH
13761: LD_INT 34
13763: PUSH
13764: LD_INT 7
13766: PUSH
13767: EMPTY
13768: LIST
13769: LIST
13770: PUSH
13771: LD_INT 34
13773: PUSH
13774: LD_INT 45
13776: PUSH
13777: EMPTY
13778: LIST
13779: LIST
13780: PUSH
13781: LD_INT 34
13783: PUSH
13784: LD_INT 28
13786: PUSH
13787: EMPTY
13788: LIST
13789: LIST
13790: PUSH
13791: LD_INT 34
13793: PUSH
13794: LD_INT 47
13796: PUSH
13797: EMPTY
13798: LIST
13799: LIST
13800: PUSH
13801: EMPTY
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: PUSH
13808: EMPTY
13809: LIST
13810: LIST
13811: PPUSH
13812: CALL_OW 69
13816: ST_TO_ADDR
// if not tmp then
13817: LD_VAR 0 2
13821: NOT
13822: IFFALSE 13826
// exit ;
13824: GO 13855
// for i in tmp do
13826: LD_ADDR_VAR 0 1
13830: PUSH
13831: LD_VAR 0 2
13835: PUSH
13836: FOR_IN
13837: IFFALSE 13853
// begin SetLives ( i , 0 ) ;
13839: LD_VAR 0 1
13843: PPUSH
13844: LD_INT 0
13846: PPUSH
13847: CALL_OW 234
// end ;
13851: GO 13836
13853: POP
13854: POP
// end ;
13855: PPOPN 2
13857: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13858: LD_EXP 23
13862: PUSH
13863: LD_EXP 29
13867: AND
13868: IFFALSE 13952
13870: GO 13872
13872: DISABLE
13873: LD_INT 0
13875: PPUSH
13876: PPUSH
// begin enable ;
13877: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13878: LD_ADDR_VAR 0 2
13882: PUSH
13883: LD_INT 22
13885: PUSH
13886: LD_OWVAR 2
13890: PUSH
13891: EMPTY
13892: LIST
13893: LIST
13894: PUSH
13895: LD_INT 32
13897: PUSH
13898: LD_INT 3
13900: PUSH
13901: EMPTY
13902: LIST
13903: LIST
13904: PUSH
13905: EMPTY
13906: LIST
13907: LIST
13908: PPUSH
13909: CALL_OW 69
13913: ST_TO_ADDR
// if not tmp then
13914: LD_VAR 0 2
13918: NOT
13919: IFFALSE 13923
// exit ;
13921: GO 13952
// for i in tmp do
13923: LD_ADDR_VAR 0 1
13927: PUSH
13928: LD_VAR 0 2
13932: PUSH
13933: FOR_IN
13934: IFFALSE 13950
// begin SetLives ( i , 0 ) ;
13936: LD_VAR 0 1
13940: PPUSH
13941: LD_INT 0
13943: PPUSH
13944: CALL_OW 234
// end ;
13948: GO 13933
13950: POP
13951: POP
// end ;
13952: PPOPN 2
13954: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13955: LD_EXP 23
13959: PUSH
13960: LD_EXP 26
13964: AND
13965: IFFALSE 14058
13967: GO 13969
13969: DISABLE
13970: LD_INT 0
13972: PPUSH
// begin enable ;
13973: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13974: LD_ADDR_VAR 0 1
13978: PUSH
13979: LD_INT 22
13981: PUSH
13982: LD_OWVAR 2
13986: PUSH
13987: EMPTY
13988: LIST
13989: LIST
13990: PUSH
13991: LD_INT 2
13993: PUSH
13994: LD_INT 25
13996: PUSH
13997: LD_INT 5
13999: PUSH
14000: EMPTY
14001: LIST
14002: LIST
14003: PUSH
14004: LD_INT 25
14006: PUSH
14007: LD_INT 9
14009: PUSH
14010: EMPTY
14011: LIST
14012: LIST
14013: PUSH
14014: LD_INT 25
14016: PUSH
14017: LD_INT 8
14019: PUSH
14020: EMPTY
14021: LIST
14022: LIST
14023: PUSH
14024: EMPTY
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: PUSH
14030: EMPTY
14031: LIST
14032: LIST
14033: PPUSH
14034: CALL_OW 69
14038: PUSH
14039: FOR_IN
14040: IFFALSE 14056
// begin SetClass ( i , 1 ) ;
14042: LD_VAR 0 1
14046: PPUSH
14047: LD_INT 1
14049: PPUSH
14050: CALL_OW 336
// end ;
14054: GO 14039
14056: POP
14057: POP
// end ;
14058: PPOPN 1
14060: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
14061: LD_EXP 23
14065: PUSH
14066: LD_EXP 27
14070: AND
14071: PUSH
14072: LD_OWVAR 65
14076: PUSH
14077: LD_INT 7
14079: LESS
14080: AND
14081: IFFALSE 14095
14083: GO 14085
14085: DISABLE
// begin enable ;
14086: ENABLE
// game_speed := 7 ;
14087: LD_ADDR_OWVAR 65
14091: PUSH
14092: LD_INT 7
14094: ST_TO_ADDR
// end ;
14095: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
14096: LD_EXP 23
14100: PUSH
14101: LD_EXP 30
14105: AND
14106: IFFALSE 14308
14108: GO 14110
14110: DISABLE
14111: LD_INT 0
14113: PPUSH
14114: PPUSH
14115: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14116: LD_ADDR_VAR 0 3
14120: PUSH
14121: LD_INT 81
14123: PUSH
14124: LD_OWVAR 2
14128: PUSH
14129: EMPTY
14130: LIST
14131: LIST
14132: PUSH
14133: LD_INT 21
14135: PUSH
14136: LD_INT 1
14138: PUSH
14139: EMPTY
14140: LIST
14141: LIST
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: PPUSH
14147: CALL_OW 69
14151: ST_TO_ADDR
// if not tmp then
14152: LD_VAR 0 3
14156: NOT
14157: IFFALSE 14161
// exit ;
14159: GO 14308
// if tmp > 5 then
14161: LD_VAR 0 3
14165: PUSH
14166: LD_INT 5
14168: GREATER
14169: IFFALSE 14181
// k := 5 else
14171: LD_ADDR_VAR 0 2
14175: PUSH
14176: LD_INT 5
14178: ST_TO_ADDR
14179: GO 14191
// k := tmp ;
14181: LD_ADDR_VAR 0 2
14185: PUSH
14186: LD_VAR 0 3
14190: ST_TO_ADDR
// for i := 1 to k do
14191: LD_ADDR_VAR 0 1
14195: PUSH
14196: DOUBLE
14197: LD_INT 1
14199: DEC
14200: ST_TO_ADDR
14201: LD_VAR 0 2
14205: PUSH
14206: FOR_TO
14207: IFFALSE 14306
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
14209: LD_VAR 0 3
14213: PUSH
14214: LD_VAR 0 1
14218: ARRAY
14219: PPUSH
14220: LD_VAR 0 1
14224: PUSH
14225: LD_INT 4
14227: MOD
14228: PUSH
14229: LD_INT 1
14231: PLUS
14232: PPUSH
14233: CALL_OW 259
14237: PUSH
14238: LD_INT 10
14240: LESS
14241: IFFALSE 14304
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14243: LD_VAR 0 3
14247: PUSH
14248: LD_VAR 0 1
14252: ARRAY
14253: PPUSH
14254: LD_VAR 0 1
14258: PUSH
14259: LD_INT 4
14261: MOD
14262: PUSH
14263: LD_INT 1
14265: PLUS
14266: PPUSH
14267: LD_VAR 0 3
14271: PUSH
14272: LD_VAR 0 1
14276: ARRAY
14277: PPUSH
14278: LD_VAR 0 1
14282: PUSH
14283: LD_INT 4
14285: MOD
14286: PUSH
14287: LD_INT 1
14289: PLUS
14290: PPUSH
14291: CALL_OW 259
14295: PUSH
14296: LD_INT 1
14298: PLUS
14299: PPUSH
14300: CALL_OW 237
14304: GO 14206
14306: POP
14307: POP
// end ;
14308: PPOPN 3
14310: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
14311: LD_EXP 23
14315: PUSH
14316: LD_EXP 31
14320: AND
14321: IFFALSE 14341
14323: GO 14325
14325: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
14326: LD_INT 4
14328: PPUSH
14329: LD_OWVAR 2
14333: PPUSH
14334: LD_INT 0
14336: PPUSH
14337: CALL_OW 324
14341: END
// every 0 0$1 trigger StreamModeActive and sShovel do
14342: LD_EXP 23
14346: PUSH
14347: LD_EXP 60
14351: AND
14352: IFFALSE 14372
14354: GO 14356
14356: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14357: LD_INT 19
14359: PPUSH
14360: LD_OWVAR 2
14364: PPUSH
14365: LD_INT 0
14367: PPUSH
14368: CALL_OW 324
14372: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14373: LD_EXP 23
14377: PUSH
14378: LD_EXP 32
14382: AND
14383: IFFALSE 14485
14385: GO 14387
14387: DISABLE
14388: LD_INT 0
14390: PPUSH
14391: PPUSH
// begin enable ;
14392: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14393: LD_ADDR_VAR 0 2
14397: PUSH
14398: LD_INT 22
14400: PUSH
14401: LD_OWVAR 2
14405: PUSH
14406: EMPTY
14407: LIST
14408: LIST
14409: PUSH
14410: LD_INT 2
14412: PUSH
14413: LD_INT 34
14415: PUSH
14416: LD_INT 11
14418: PUSH
14419: EMPTY
14420: LIST
14421: LIST
14422: PUSH
14423: LD_INT 34
14425: PUSH
14426: LD_INT 30
14428: PUSH
14429: EMPTY
14430: LIST
14431: LIST
14432: PUSH
14433: EMPTY
14434: LIST
14435: LIST
14436: LIST
14437: PUSH
14438: EMPTY
14439: LIST
14440: LIST
14441: PPUSH
14442: CALL_OW 69
14446: ST_TO_ADDR
// if not tmp then
14447: LD_VAR 0 2
14451: NOT
14452: IFFALSE 14456
// exit ;
14454: GO 14485
// for i in tmp do
14456: LD_ADDR_VAR 0 1
14460: PUSH
14461: LD_VAR 0 2
14465: PUSH
14466: FOR_IN
14467: IFFALSE 14483
// begin SetLives ( i , 0 ) ;
14469: LD_VAR 0 1
14473: PPUSH
14474: LD_INT 0
14476: PPUSH
14477: CALL_OW 234
// end ;
14481: GO 14466
14483: POP
14484: POP
// end ;
14485: PPOPN 2
14487: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14488: LD_EXP 23
14492: PUSH
14493: LD_EXP 33
14497: AND
14498: IFFALSE 14518
14500: GO 14502
14502: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14503: LD_INT 32
14505: PPUSH
14506: LD_OWVAR 2
14510: PPUSH
14511: LD_INT 0
14513: PPUSH
14514: CALL_OW 324
14518: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14519: LD_EXP 23
14523: PUSH
14524: LD_EXP 34
14528: AND
14529: IFFALSE 14710
14531: GO 14533
14533: DISABLE
14534: LD_INT 0
14536: PPUSH
14537: PPUSH
14538: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14539: LD_ADDR_VAR 0 2
14543: PUSH
14544: LD_INT 22
14546: PUSH
14547: LD_OWVAR 2
14551: PUSH
14552: EMPTY
14553: LIST
14554: LIST
14555: PUSH
14556: LD_INT 33
14558: PUSH
14559: LD_INT 3
14561: PUSH
14562: EMPTY
14563: LIST
14564: LIST
14565: PUSH
14566: EMPTY
14567: LIST
14568: LIST
14569: PPUSH
14570: CALL_OW 69
14574: ST_TO_ADDR
// if not tmp then
14575: LD_VAR 0 2
14579: NOT
14580: IFFALSE 14584
// exit ;
14582: GO 14710
// side := 0 ;
14584: LD_ADDR_VAR 0 3
14588: PUSH
14589: LD_INT 0
14591: ST_TO_ADDR
// for i := 1 to 8 do
14592: LD_ADDR_VAR 0 1
14596: PUSH
14597: DOUBLE
14598: LD_INT 1
14600: DEC
14601: ST_TO_ADDR
14602: LD_INT 8
14604: PUSH
14605: FOR_TO
14606: IFFALSE 14654
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14608: LD_OWVAR 2
14612: PUSH
14613: LD_VAR 0 1
14617: NONEQUAL
14618: PUSH
14619: LD_OWVAR 2
14623: PPUSH
14624: LD_VAR 0 1
14628: PPUSH
14629: CALL_OW 81
14633: PUSH
14634: LD_INT 2
14636: EQUAL
14637: AND
14638: IFFALSE 14652
// begin side := i ;
14640: LD_ADDR_VAR 0 3
14644: PUSH
14645: LD_VAR 0 1
14649: ST_TO_ADDR
// break ;
14650: GO 14654
// end ;
14652: GO 14605
14654: POP
14655: POP
// if not side then
14656: LD_VAR 0 3
14660: NOT
14661: IFFALSE 14665
// exit ;
14663: GO 14710
// for i := 1 to tmp do
14665: LD_ADDR_VAR 0 1
14669: PUSH
14670: DOUBLE
14671: LD_INT 1
14673: DEC
14674: ST_TO_ADDR
14675: LD_VAR 0 2
14679: PUSH
14680: FOR_TO
14681: IFFALSE 14708
// if Prob ( 60 ) then
14683: LD_INT 60
14685: PPUSH
14686: CALL_OW 13
14690: IFFALSE 14706
// SetSide ( i , side ) ;
14692: LD_VAR 0 1
14696: PPUSH
14697: LD_VAR 0 3
14701: PPUSH
14702: CALL_OW 235
14706: GO 14680
14708: POP
14709: POP
// end ;
14710: PPOPN 3
14712: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14713: LD_EXP 23
14717: PUSH
14718: LD_EXP 36
14722: AND
14723: IFFALSE 14842
14725: GO 14727
14727: DISABLE
14728: LD_INT 0
14730: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14731: LD_ADDR_VAR 0 1
14735: PUSH
14736: LD_INT 22
14738: PUSH
14739: LD_OWVAR 2
14743: PUSH
14744: EMPTY
14745: LIST
14746: LIST
14747: PUSH
14748: LD_INT 21
14750: PUSH
14751: LD_INT 1
14753: PUSH
14754: EMPTY
14755: LIST
14756: LIST
14757: PUSH
14758: LD_INT 3
14760: PUSH
14761: LD_INT 23
14763: PUSH
14764: LD_INT 0
14766: PUSH
14767: EMPTY
14768: LIST
14769: LIST
14770: PUSH
14771: EMPTY
14772: LIST
14773: LIST
14774: PUSH
14775: EMPTY
14776: LIST
14777: LIST
14778: LIST
14779: PPUSH
14780: CALL_OW 69
14784: PUSH
14785: FOR_IN
14786: IFFALSE 14840
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14788: LD_VAR 0 1
14792: PPUSH
14793: CALL_OW 257
14797: PUSH
14798: LD_INT 1
14800: PUSH
14801: LD_INT 2
14803: PUSH
14804: LD_INT 3
14806: PUSH
14807: LD_INT 4
14809: PUSH
14810: EMPTY
14811: LIST
14812: LIST
14813: LIST
14814: LIST
14815: IN
14816: IFFALSE 14838
// SetClass ( un , rand ( 1 , 4 ) ) ;
14818: LD_VAR 0 1
14822: PPUSH
14823: LD_INT 1
14825: PPUSH
14826: LD_INT 4
14828: PPUSH
14829: CALL_OW 12
14833: PPUSH
14834: CALL_OW 336
14838: GO 14785
14840: POP
14841: POP
// end ;
14842: PPOPN 1
14844: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14845: LD_EXP 23
14849: PUSH
14850: LD_EXP 35
14854: AND
14855: IFFALSE 14934
14857: GO 14859
14859: DISABLE
14860: LD_INT 0
14862: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14863: LD_ADDR_VAR 0 1
14867: PUSH
14868: LD_INT 22
14870: PUSH
14871: LD_OWVAR 2
14875: PUSH
14876: EMPTY
14877: LIST
14878: LIST
14879: PUSH
14880: LD_INT 21
14882: PUSH
14883: LD_INT 3
14885: PUSH
14886: EMPTY
14887: LIST
14888: LIST
14889: PUSH
14890: EMPTY
14891: LIST
14892: LIST
14893: PPUSH
14894: CALL_OW 69
14898: ST_TO_ADDR
// if not tmp then
14899: LD_VAR 0 1
14903: NOT
14904: IFFALSE 14908
// exit ;
14906: GO 14934
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14908: LD_VAR 0 1
14912: PUSH
14913: LD_INT 1
14915: PPUSH
14916: LD_VAR 0 1
14920: PPUSH
14921: CALL_OW 12
14925: ARRAY
14926: PPUSH
14927: LD_INT 100
14929: PPUSH
14930: CALL_OW 234
// end ;
14934: PPOPN 1
14936: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14937: LD_EXP 23
14941: PUSH
14942: LD_EXP 37
14946: AND
14947: IFFALSE 15045
14949: GO 14951
14951: DISABLE
14952: LD_INT 0
14954: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14955: LD_ADDR_VAR 0 1
14959: PUSH
14960: LD_INT 22
14962: PUSH
14963: LD_OWVAR 2
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: PUSH
14972: LD_INT 21
14974: PUSH
14975: LD_INT 1
14977: PUSH
14978: EMPTY
14979: LIST
14980: LIST
14981: PUSH
14982: EMPTY
14983: LIST
14984: LIST
14985: PPUSH
14986: CALL_OW 69
14990: ST_TO_ADDR
// if not tmp then
14991: LD_VAR 0 1
14995: NOT
14996: IFFALSE 15000
// exit ;
14998: GO 15045
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15000: LD_VAR 0 1
15004: PUSH
15005: LD_INT 1
15007: PPUSH
15008: LD_VAR 0 1
15012: PPUSH
15013: CALL_OW 12
15017: ARRAY
15018: PPUSH
15019: LD_INT 1
15021: PPUSH
15022: LD_INT 4
15024: PPUSH
15025: CALL_OW 12
15029: PPUSH
15030: LD_INT 3000
15032: PPUSH
15033: LD_INT 9000
15035: PPUSH
15036: CALL_OW 12
15040: PPUSH
15041: CALL_OW 492
// end ;
15045: PPOPN 1
15047: END
// every 0 0$1 trigger StreamModeActive and sDepot do
15048: LD_EXP 23
15052: PUSH
15053: LD_EXP 38
15057: AND
15058: IFFALSE 15078
15060: GO 15062
15062: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
15063: LD_INT 1
15065: PPUSH
15066: LD_OWVAR 2
15070: PPUSH
15071: LD_INT 0
15073: PPUSH
15074: CALL_OW 324
15078: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
15079: LD_EXP 23
15083: PUSH
15084: LD_EXP 39
15088: AND
15089: IFFALSE 15172
15091: GO 15093
15093: DISABLE
15094: LD_INT 0
15096: PPUSH
15097: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15098: LD_ADDR_VAR 0 2
15102: PUSH
15103: LD_INT 22
15105: PUSH
15106: LD_OWVAR 2
15110: PUSH
15111: EMPTY
15112: LIST
15113: LIST
15114: PUSH
15115: LD_INT 21
15117: PUSH
15118: LD_INT 3
15120: PUSH
15121: EMPTY
15122: LIST
15123: LIST
15124: PUSH
15125: EMPTY
15126: LIST
15127: LIST
15128: PPUSH
15129: CALL_OW 69
15133: ST_TO_ADDR
// if not tmp then
15134: LD_VAR 0 2
15138: NOT
15139: IFFALSE 15143
// exit ;
15141: GO 15172
// for i in tmp do
15143: LD_ADDR_VAR 0 1
15147: PUSH
15148: LD_VAR 0 2
15152: PUSH
15153: FOR_IN
15154: IFFALSE 15170
// SetBLevel ( i , 10 ) ;
15156: LD_VAR 0 1
15160: PPUSH
15161: LD_INT 10
15163: PPUSH
15164: CALL_OW 241
15168: GO 15153
15170: POP
15171: POP
// end ;
15172: PPOPN 2
15174: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
15175: LD_EXP 23
15179: PUSH
15180: LD_EXP 40
15184: AND
15185: IFFALSE 15296
15187: GO 15189
15189: DISABLE
15190: LD_INT 0
15192: PPUSH
15193: PPUSH
15194: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15195: LD_ADDR_VAR 0 3
15199: PUSH
15200: LD_INT 22
15202: PUSH
15203: LD_OWVAR 2
15207: PUSH
15208: EMPTY
15209: LIST
15210: LIST
15211: PUSH
15212: LD_INT 25
15214: PUSH
15215: LD_INT 1
15217: PUSH
15218: EMPTY
15219: LIST
15220: LIST
15221: PUSH
15222: EMPTY
15223: LIST
15224: LIST
15225: PPUSH
15226: CALL_OW 69
15230: ST_TO_ADDR
// if not tmp then
15231: LD_VAR 0 3
15235: NOT
15236: IFFALSE 15240
// exit ;
15238: GO 15296
// un := tmp [ rand ( 1 , tmp ) ] ;
15240: LD_ADDR_VAR 0 2
15244: PUSH
15245: LD_VAR 0 3
15249: PUSH
15250: LD_INT 1
15252: PPUSH
15253: LD_VAR 0 3
15257: PPUSH
15258: CALL_OW 12
15262: ARRAY
15263: ST_TO_ADDR
// if Crawls ( un ) then
15264: LD_VAR 0 2
15268: PPUSH
15269: CALL_OW 318
15273: IFFALSE 15284
// ComWalk ( un ) ;
15275: LD_VAR 0 2
15279: PPUSH
15280: CALL_OW 138
// SetClass ( un , class_sniper ) ;
15284: LD_VAR 0 2
15288: PPUSH
15289: LD_INT 5
15291: PPUSH
15292: CALL_OW 336
// end ;
15296: PPOPN 3
15298: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
15299: LD_EXP 23
15303: PUSH
15304: LD_EXP 41
15308: AND
15309: PUSH
15310: LD_OWVAR 67
15314: PUSH
15315: LD_INT 4
15317: LESS
15318: AND
15319: IFFALSE 15338
15321: GO 15323
15323: DISABLE
// begin Difficulty := Difficulty + 1 ;
15324: LD_ADDR_OWVAR 67
15328: PUSH
15329: LD_OWVAR 67
15333: PUSH
15334: LD_INT 1
15336: PLUS
15337: ST_TO_ADDR
// end ;
15338: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
15339: LD_EXP 23
15343: PUSH
15344: LD_EXP 42
15348: AND
15349: IFFALSE 15452
15351: GO 15353
15353: DISABLE
15354: LD_INT 0
15356: PPUSH
// begin for i := 1 to 5 do
15357: LD_ADDR_VAR 0 1
15361: PUSH
15362: DOUBLE
15363: LD_INT 1
15365: DEC
15366: ST_TO_ADDR
15367: LD_INT 5
15369: PUSH
15370: FOR_TO
15371: IFFALSE 15450
// begin uc_nation := nation_nature ;
15373: LD_ADDR_OWVAR 21
15377: PUSH
15378: LD_INT 0
15380: ST_TO_ADDR
// uc_side := 0 ;
15381: LD_ADDR_OWVAR 20
15385: PUSH
15386: LD_INT 0
15388: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15389: LD_ADDR_OWVAR 29
15393: PUSH
15394: LD_INT 12
15396: PUSH
15397: LD_INT 12
15399: PUSH
15400: EMPTY
15401: LIST
15402: LIST
15403: ST_TO_ADDR
// hc_agressivity := 20 ;
15404: LD_ADDR_OWVAR 35
15408: PUSH
15409: LD_INT 20
15411: ST_TO_ADDR
// hc_class := class_tiger ;
15412: LD_ADDR_OWVAR 28
15416: PUSH
15417: LD_INT 14
15419: ST_TO_ADDR
// hc_gallery :=  ;
15420: LD_ADDR_OWVAR 33
15424: PUSH
15425: LD_STRING 
15427: ST_TO_ADDR
// hc_name :=  ;
15428: LD_ADDR_OWVAR 26
15432: PUSH
15433: LD_STRING 
15435: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15436: CALL_OW 44
15440: PPUSH
15441: LD_INT 0
15443: PPUSH
15444: CALL_OW 51
// end ;
15448: GO 15370
15450: POP
15451: POP
// end ;
15452: PPOPN 1
15454: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15455: LD_EXP 23
15459: PUSH
15460: LD_EXP 43
15464: AND
15465: IFFALSE 15474
15467: GO 15469
15469: DISABLE
// StreamSibBomb ;
15470: CALL 15475 0 0
15474: END
// export function StreamSibBomb ; var i , x , y ; begin
15475: LD_INT 0
15477: PPUSH
15478: PPUSH
15479: PPUSH
15480: PPUSH
// result := false ;
15481: LD_ADDR_VAR 0 1
15485: PUSH
15486: LD_INT 0
15488: ST_TO_ADDR
// for i := 1 to 16 do
15489: LD_ADDR_VAR 0 2
15493: PUSH
15494: DOUBLE
15495: LD_INT 1
15497: DEC
15498: ST_TO_ADDR
15499: LD_INT 16
15501: PUSH
15502: FOR_TO
15503: IFFALSE 15702
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15505: LD_ADDR_VAR 0 3
15509: PUSH
15510: LD_INT 10
15512: PUSH
15513: LD_INT 20
15515: PUSH
15516: LD_INT 30
15518: PUSH
15519: LD_INT 40
15521: PUSH
15522: LD_INT 50
15524: PUSH
15525: LD_INT 60
15527: PUSH
15528: LD_INT 70
15530: PUSH
15531: LD_INT 80
15533: PUSH
15534: LD_INT 90
15536: PUSH
15537: LD_INT 100
15539: PUSH
15540: LD_INT 110
15542: PUSH
15543: LD_INT 120
15545: PUSH
15546: LD_INT 130
15548: PUSH
15549: LD_INT 140
15551: PUSH
15552: LD_INT 150
15554: PUSH
15555: EMPTY
15556: LIST
15557: LIST
15558: LIST
15559: LIST
15560: LIST
15561: LIST
15562: LIST
15563: LIST
15564: LIST
15565: LIST
15566: LIST
15567: LIST
15568: LIST
15569: LIST
15570: LIST
15571: PUSH
15572: LD_INT 1
15574: PPUSH
15575: LD_INT 15
15577: PPUSH
15578: CALL_OW 12
15582: ARRAY
15583: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15584: LD_ADDR_VAR 0 4
15588: PUSH
15589: LD_INT 10
15591: PUSH
15592: LD_INT 20
15594: PUSH
15595: LD_INT 30
15597: PUSH
15598: LD_INT 40
15600: PUSH
15601: LD_INT 50
15603: PUSH
15604: LD_INT 60
15606: PUSH
15607: LD_INT 70
15609: PUSH
15610: LD_INT 80
15612: PUSH
15613: LD_INT 90
15615: PUSH
15616: LD_INT 100
15618: PUSH
15619: LD_INT 110
15621: PUSH
15622: LD_INT 120
15624: PUSH
15625: LD_INT 130
15627: PUSH
15628: LD_INT 140
15630: PUSH
15631: LD_INT 150
15633: PUSH
15634: EMPTY
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: PUSH
15651: LD_INT 1
15653: PPUSH
15654: LD_INT 15
15656: PPUSH
15657: CALL_OW 12
15661: ARRAY
15662: ST_TO_ADDR
// if ValidHex ( x , y ) then
15663: LD_VAR 0 3
15667: PPUSH
15668: LD_VAR 0 4
15672: PPUSH
15673: CALL_OW 488
15677: IFFALSE 15700
// begin result := [ x , y ] ;
15679: LD_ADDR_VAR 0 1
15683: PUSH
15684: LD_VAR 0 3
15688: PUSH
15689: LD_VAR 0 4
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: ST_TO_ADDR
// break ;
15698: GO 15702
// end ; end ;
15700: GO 15502
15702: POP
15703: POP
// if result then
15704: LD_VAR 0 1
15708: IFFALSE 15768
// begin ToLua ( playSibBomb() ) ;
15710: LD_STRING playSibBomb()
15712: PPUSH
15713: CALL_OW 559
// wait ( 0 0$14 ) ;
15717: LD_INT 490
15719: PPUSH
15720: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15724: LD_VAR 0 1
15728: PUSH
15729: LD_INT 1
15731: ARRAY
15732: PPUSH
15733: LD_VAR 0 1
15737: PUSH
15738: LD_INT 2
15740: ARRAY
15741: PPUSH
15742: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15746: LD_VAR 0 1
15750: PUSH
15751: LD_INT 1
15753: ARRAY
15754: PPUSH
15755: LD_VAR 0 1
15759: PUSH
15760: LD_INT 2
15762: ARRAY
15763: PPUSH
15764: CALL_OW 429
// end ; end ;
15768: LD_VAR 0 1
15772: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15773: LD_EXP 23
15777: PUSH
15778: LD_EXP 45
15782: AND
15783: IFFALSE 15795
15785: GO 15787
15787: DISABLE
// YouLost (  ) ;
15788: LD_STRING 
15790: PPUSH
15791: CALL_OW 104
15795: END
// every 0 0$1 trigger StreamModeActive and sFog do
15796: LD_EXP 23
15800: PUSH
15801: LD_EXP 44
15805: AND
15806: IFFALSE 15820
15808: GO 15810
15810: DISABLE
// FogOff ( your_side ) ;
15811: LD_OWVAR 2
15815: PPUSH
15816: CALL_OW 344
15820: END
// every 0 0$1 trigger StreamModeActive and sSun do
15821: LD_EXP 23
15825: PUSH
15826: LD_EXP 46
15830: AND
15831: IFFALSE 15859
15833: GO 15835
15835: DISABLE
// begin solar_recharge_percent := 0 ;
15836: LD_ADDR_OWVAR 79
15840: PUSH
15841: LD_INT 0
15843: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15844: LD_INT 10500
15846: PPUSH
15847: CALL_OW 67
// solar_recharge_percent := 100 ;
15851: LD_ADDR_OWVAR 79
15855: PUSH
15856: LD_INT 100
15858: ST_TO_ADDR
// end ;
15859: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15860: LD_EXP 23
15864: PUSH
15865: LD_EXP 47
15869: AND
15870: IFFALSE 16109
15872: GO 15874
15874: DISABLE
15875: LD_INT 0
15877: PPUSH
15878: PPUSH
15879: PPUSH
// begin tmp := [ ] ;
15880: LD_ADDR_VAR 0 3
15884: PUSH
15885: EMPTY
15886: ST_TO_ADDR
// for i := 1 to 6 do
15887: LD_ADDR_VAR 0 1
15891: PUSH
15892: DOUBLE
15893: LD_INT 1
15895: DEC
15896: ST_TO_ADDR
15897: LD_INT 6
15899: PUSH
15900: FOR_TO
15901: IFFALSE 16006
// begin uc_nation := nation_nature ;
15903: LD_ADDR_OWVAR 21
15907: PUSH
15908: LD_INT 0
15910: ST_TO_ADDR
// uc_side := 0 ;
15911: LD_ADDR_OWVAR 20
15915: PUSH
15916: LD_INT 0
15918: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15919: LD_ADDR_OWVAR 29
15923: PUSH
15924: LD_INT 12
15926: PUSH
15927: LD_INT 12
15929: PUSH
15930: EMPTY
15931: LIST
15932: LIST
15933: ST_TO_ADDR
// hc_agressivity := 20 ;
15934: LD_ADDR_OWVAR 35
15938: PUSH
15939: LD_INT 20
15941: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15942: LD_ADDR_OWVAR 28
15946: PUSH
15947: LD_INT 17
15949: ST_TO_ADDR
// hc_gallery :=  ;
15950: LD_ADDR_OWVAR 33
15954: PUSH
15955: LD_STRING 
15957: ST_TO_ADDR
// hc_name :=  ;
15958: LD_ADDR_OWVAR 26
15962: PUSH
15963: LD_STRING 
15965: ST_TO_ADDR
// un := CreateHuman ;
15966: LD_ADDR_VAR 0 2
15970: PUSH
15971: CALL_OW 44
15975: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15976: LD_VAR 0 2
15980: PPUSH
15981: LD_INT 1
15983: PPUSH
15984: CALL_OW 51
// tmp := tmp ^ un ;
15988: LD_ADDR_VAR 0 3
15992: PUSH
15993: LD_VAR 0 3
15997: PUSH
15998: LD_VAR 0 2
16002: ADD
16003: ST_TO_ADDR
// end ;
16004: GO 15900
16006: POP
16007: POP
// repeat wait ( 0 0$1 ) ;
16008: LD_INT 35
16010: PPUSH
16011: CALL_OW 67
// for un in tmp do
16015: LD_ADDR_VAR 0 2
16019: PUSH
16020: LD_VAR 0 3
16024: PUSH
16025: FOR_IN
16026: IFFALSE 16100
// begin if IsDead ( un ) then
16028: LD_VAR 0 2
16032: PPUSH
16033: CALL_OW 301
16037: IFFALSE 16057
// begin tmp := tmp diff un ;
16039: LD_ADDR_VAR 0 3
16043: PUSH
16044: LD_VAR 0 3
16048: PUSH
16049: LD_VAR 0 2
16053: DIFF
16054: ST_TO_ADDR
// continue ;
16055: GO 16025
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
16057: LD_VAR 0 2
16061: PPUSH
16062: LD_INT 3
16064: PUSH
16065: LD_INT 22
16067: PUSH
16068: LD_INT 0
16070: PUSH
16071: EMPTY
16072: LIST
16073: LIST
16074: PUSH
16075: EMPTY
16076: LIST
16077: LIST
16078: PPUSH
16079: CALL_OW 69
16083: PPUSH
16084: LD_VAR 0 2
16088: PPUSH
16089: CALL_OW 74
16093: PPUSH
16094: CALL_OW 115
// end ;
16098: GO 16025
16100: POP
16101: POP
// until not tmp ;
16102: LD_VAR 0 3
16106: NOT
16107: IFFALSE 16008
// end ;
16109: PPOPN 3
16111: END
// every 0 0$1 trigger StreamModeActive and sTroll do
16112: LD_EXP 23
16116: PUSH
16117: LD_EXP 48
16121: AND
16122: IFFALSE 16176
16124: GO 16126
16126: DISABLE
// begin ToLua ( displayTroll(); ) ;
16127: LD_STRING displayTroll();
16129: PPUSH
16130: CALL_OW 559
// wait ( 3 3$00 ) ;
16134: LD_INT 6300
16136: PPUSH
16137: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16141: LD_STRING hideTroll();
16143: PPUSH
16144: CALL_OW 559
// wait ( 1 1$00 ) ;
16148: LD_INT 2100
16150: PPUSH
16151: CALL_OW 67
// ToLua ( displayTroll(); ) ;
16155: LD_STRING displayTroll();
16157: PPUSH
16158: CALL_OW 559
// wait ( 1 1$00 ) ;
16162: LD_INT 2100
16164: PPUSH
16165: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16169: LD_STRING hideTroll();
16171: PPUSH
16172: CALL_OW 559
// end ;
16176: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
16177: LD_EXP 23
16181: PUSH
16182: LD_EXP 49
16186: AND
16187: IFFALSE 16250
16189: GO 16191
16191: DISABLE
16192: LD_INT 0
16194: PPUSH
// begin p := 0 ;
16195: LD_ADDR_VAR 0 1
16199: PUSH
16200: LD_INT 0
16202: ST_TO_ADDR
// repeat game_speed := 1 ;
16203: LD_ADDR_OWVAR 65
16207: PUSH
16208: LD_INT 1
16210: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16211: LD_INT 35
16213: PPUSH
16214: CALL_OW 67
// p := p + 1 ;
16218: LD_ADDR_VAR 0 1
16222: PUSH
16223: LD_VAR 0 1
16227: PUSH
16228: LD_INT 1
16230: PLUS
16231: ST_TO_ADDR
// until p >= 60 ;
16232: LD_VAR 0 1
16236: PUSH
16237: LD_INT 60
16239: GREATEREQUAL
16240: IFFALSE 16203
// game_speed := 4 ;
16242: LD_ADDR_OWVAR 65
16246: PUSH
16247: LD_INT 4
16249: ST_TO_ADDR
// end ;
16250: PPOPN 1
16252: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16253: LD_EXP 23
16257: PUSH
16258: LD_EXP 50
16262: AND
16263: IFFALSE 16409
16265: GO 16267
16267: DISABLE
16268: LD_INT 0
16270: PPUSH
16271: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16272: LD_ADDR_VAR 0 1
16276: PUSH
16277: LD_INT 22
16279: PUSH
16280: LD_OWVAR 2
16284: PUSH
16285: EMPTY
16286: LIST
16287: LIST
16288: PUSH
16289: LD_INT 2
16291: PUSH
16292: LD_INT 30
16294: PUSH
16295: LD_INT 0
16297: PUSH
16298: EMPTY
16299: LIST
16300: LIST
16301: PUSH
16302: LD_INT 30
16304: PUSH
16305: LD_INT 1
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: PUSH
16312: EMPTY
16313: LIST
16314: LIST
16315: LIST
16316: PUSH
16317: EMPTY
16318: LIST
16319: LIST
16320: PPUSH
16321: CALL_OW 69
16325: ST_TO_ADDR
// if not depot then
16326: LD_VAR 0 1
16330: NOT
16331: IFFALSE 16335
// exit ;
16333: GO 16409
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
16335: LD_ADDR_VAR 0 2
16339: PUSH
16340: LD_VAR 0 1
16344: PUSH
16345: LD_INT 1
16347: PPUSH
16348: LD_VAR 0 1
16352: PPUSH
16353: CALL_OW 12
16357: ARRAY
16358: PPUSH
16359: CALL_OW 274
16363: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16364: LD_VAR 0 2
16368: PPUSH
16369: LD_INT 1
16371: PPUSH
16372: LD_INT 0
16374: PPUSH
16375: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16379: LD_VAR 0 2
16383: PPUSH
16384: LD_INT 2
16386: PPUSH
16387: LD_INT 0
16389: PPUSH
16390: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16394: LD_VAR 0 2
16398: PPUSH
16399: LD_INT 3
16401: PPUSH
16402: LD_INT 0
16404: PPUSH
16405: CALL_OW 277
// end ;
16409: PPOPN 2
16411: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16412: LD_EXP 23
16416: PUSH
16417: LD_EXP 51
16421: AND
16422: IFFALSE 16519
16424: GO 16426
16426: DISABLE
16427: LD_INT 0
16429: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16430: LD_ADDR_VAR 0 1
16434: PUSH
16435: LD_INT 22
16437: PUSH
16438: LD_OWVAR 2
16442: PUSH
16443: EMPTY
16444: LIST
16445: LIST
16446: PUSH
16447: LD_INT 21
16449: PUSH
16450: LD_INT 1
16452: PUSH
16453: EMPTY
16454: LIST
16455: LIST
16456: PUSH
16457: LD_INT 3
16459: PUSH
16460: LD_INT 23
16462: PUSH
16463: LD_INT 0
16465: PUSH
16466: EMPTY
16467: LIST
16468: LIST
16469: PUSH
16470: EMPTY
16471: LIST
16472: LIST
16473: PUSH
16474: EMPTY
16475: LIST
16476: LIST
16477: LIST
16478: PPUSH
16479: CALL_OW 69
16483: ST_TO_ADDR
// if not tmp then
16484: LD_VAR 0 1
16488: NOT
16489: IFFALSE 16493
// exit ;
16491: GO 16519
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16493: LD_VAR 0 1
16497: PUSH
16498: LD_INT 1
16500: PPUSH
16501: LD_VAR 0 1
16505: PPUSH
16506: CALL_OW 12
16510: ARRAY
16511: PPUSH
16512: LD_INT 200
16514: PPUSH
16515: CALL_OW 234
// end ;
16519: PPOPN 1
16521: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16522: LD_EXP 23
16526: PUSH
16527: LD_EXP 52
16531: AND
16532: IFFALSE 16611
16534: GO 16536
16536: DISABLE
16537: LD_INT 0
16539: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16540: LD_ADDR_VAR 0 1
16544: PUSH
16545: LD_INT 22
16547: PUSH
16548: LD_OWVAR 2
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: PUSH
16557: LD_INT 21
16559: PUSH
16560: LD_INT 2
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: PPUSH
16571: CALL_OW 69
16575: ST_TO_ADDR
// if not tmp then
16576: LD_VAR 0 1
16580: NOT
16581: IFFALSE 16585
// exit ;
16583: GO 16611
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16585: LD_VAR 0 1
16589: PUSH
16590: LD_INT 1
16592: PPUSH
16593: LD_VAR 0 1
16597: PPUSH
16598: CALL_OW 12
16602: ARRAY
16603: PPUSH
16604: LD_INT 60
16606: PPUSH
16607: CALL_OW 234
// end ;
16611: PPOPN 1
16613: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16614: LD_EXP 23
16618: PUSH
16619: LD_EXP 53
16623: AND
16624: IFFALSE 16723
16626: GO 16628
16628: DISABLE
16629: LD_INT 0
16631: PPUSH
16632: PPUSH
// begin enable ;
16633: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16634: LD_ADDR_VAR 0 1
16638: PUSH
16639: LD_INT 22
16641: PUSH
16642: LD_OWVAR 2
16646: PUSH
16647: EMPTY
16648: LIST
16649: LIST
16650: PUSH
16651: LD_INT 61
16653: PUSH
16654: EMPTY
16655: LIST
16656: PUSH
16657: LD_INT 33
16659: PUSH
16660: LD_INT 2
16662: PUSH
16663: EMPTY
16664: LIST
16665: LIST
16666: PUSH
16667: EMPTY
16668: LIST
16669: LIST
16670: LIST
16671: PPUSH
16672: CALL_OW 69
16676: ST_TO_ADDR
// if not tmp then
16677: LD_VAR 0 1
16681: NOT
16682: IFFALSE 16686
// exit ;
16684: GO 16723
// for i in tmp do
16686: LD_ADDR_VAR 0 2
16690: PUSH
16691: LD_VAR 0 1
16695: PUSH
16696: FOR_IN
16697: IFFALSE 16721
// if IsControledBy ( i ) then
16699: LD_VAR 0 2
16703: PPUSH
16704: CALL_OW 312
16708: IFFALSE 16719
// ComUnlink ( i ) ;
16710: LD_VAR 0 2
16714: PPUSH
16715: CALL_OW 136
16719: GO 16696
16721: POP
16722: POP
// end ;
16723: PPOPN 2
16725: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16726: LD_EXP 23
16730: PUSH
16731: LD_EXP 54
16735: AND
16736: IFFALSE 16876
16738: GO 16740
16740: DISABLE
16741: LD_INT 0
16743: PPUSH
16744: PPUSH
// begin ToLua ( displayPowell(); ) ;
16745: LD_STRING displayPowell();
16747: PPUSH
16748: CALL_OW 559
// uc_side := 0 ;
16752: LD_ADDR_OWVAR 20
16756: PUSH
16757: LD_INT 0
16759: ST_TO_ADDR
// uc_nation := 2 ;
16760: LD_ADDR_OWVAR 21
16764: PUSH
16765: LD_INT 2
16767: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16768: LD_ADDR_OWVAR 37
16772: PUSH
16773: LD_INT 14
16775: ST_TO_ADDR
// vc_engine := engine_siberite ;
16776: LD_ADDR_OWVAR 39
16780: PUSH
16781: LD_INT 3
16783: ST_TO_ADDR
// vc_control := control_apeman ;
16784: LD_ADDR_OWVAR 38
16788: PUSH
16789: LD_INT 5
16791: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16792: LD_ADDR_OWVAR 40
16796: PUSH
16797: LD_INT 29
16799: ST_TO_ADDR
// un := CreateVehicle ;
16800: LD_ADDR_VAR 0 2
16804: PUSH
16805: CALL_OW 45
16809: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16810: LD_VAR 0 2
16814: PPUSH
16815: LD_INT 1
16817: PPUSH
16818: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16822: LD_INT 35
16824: PPUSH
16825: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16829: LD_VAR 0 2
16833: PPUSH
16834: LD_INT 22
16836: PUSH
16837: LD_OWVAR 2
16841: PUSH
16842: EMPTY
16843: LIST
16844: LIST
16845: PPUSH
16846: CALL_OW 69
16850: PPUSH
16851: LD_VAR 0 2
16855: PPUSH
16856: CALL_OW 74
16860: PPUSH
16861: CALL_OW 115
// until IsDead ( un ) ;
16865: LD_VAR 0 2
16869: PPUSH
16870: CALL_OW 301
16874: IFFALSE 16822
// end ;
16876: PPOPN 2
16878: END
// every 0 0$1 trigger StreamModeActive and sStu do
16879: LD_EXP 23
16883: PUSH
16884: LD_EXP 62
16888: AND
16889: IFFALSE 16905
16891: GO 16893
16893: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16894: LD_STRING displayStucuk();
16896: PPUSH
16897: CALL_OW 559
// ResetFog ;
16901: CALL_OW 335
// end ;
16905: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16906: LD_EXP 23
16910: PUSH
16911: LD_EXP 55
16915: AND
16916: IFFALSE 17057
16918: GO 16920
16920: DISABLE
16921: LD_INT 0
16923: PPUSH
16924: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16925: LD_ADDR_VAR 0 2
16929: PUSH
16930: LD_INT 22
16932: PUSH
16933: LD_OWVAR 2
16937: PUSH
16938: EMPTY
16939: LIST
16940: LIST
16941: PUSH
16942: LD_INT 21
16944: PUSH
16945: LD_INT 1
16947: PUSH
16948: EMPTY
16949: LIST
16950: LIST
16951: PUSH
16952: EMPTY
16953: LIST
16954: LIST
16955: PPUSH
16956: CALL_OW 69
16960: ST_TO_ADDR
// if not tmp then
16961: LD_VAR 0 2
16965: NOT
16966: IFFALSE 16970
// exit ;
16968: GO 17057
// un := tmp [ rand ( 1 , tmp ) ] ;
16970: LD_ADDR_VAR 0 1
16974: PUSH
16975: LD_VAR 0 2
16979: PUSH
16980: LD_INT 1
16982: PPUSH
16983: LD_VAR 0 2
16987: PPUSH
16988: CALL_OW 12
16992: ARRAY
16993: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16994: LD_VAR 0 1
16998: PPUSH
16999: LD_INT 0
17001: PPUSH
17002: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17006: LD_VAR 0 1
17010: PPUSH
17011: LD_OWVAR 3
17015: PUSH
17016: LD_VAR 0 1
17020: DIFF
17021: PPUSH
17022: LD_VAR 0 1
17026: PPUSH
17027: CALL_OW 74
17031: PPUSH
17032: CALL_OW 115
// wait ( 0 0$20 ) ;
17036: LD_INT 700
17038: PPUSH
17039: CALL_OW 67
// SetSide ( un , your_side ) ;
17043: LD_VAR 0 1
17047: PPUSH
17048: LD_OWVAR 2
17052: PPUSH
17053: CALL_OW 235
// end ;
17057: PPOPN 2
17059: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
17060: LD_EXP 23
17064: PUSH
17065: LD_EXP 56
17069: AND
17070: IFFALSE 17176
17072: GO 17074
17074: DISABLE
17075: LD_INT 0
17077: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17078: LD_ADDR_VAR 0 1
17082: PUSH
17083: LD_INT 22
17085: PUSH
17086: LD_OWVAR 2
17090: PUSH
17091: EMPTY
17092: LIST
17093: LIST
17094: PUSH
17095: LD_INT 2
17097: PUSH
17098: LD_INT 30
17100: PUSH
17101: LD_INT 0
17103: PUSH
17104: EMPTY
17105: LIST
17106: LIST
17107: PUSH
17108: LD_INT 30
17110: PUSH
17111: LD_INT 1
17113: PUSH
17114: EMPTY
17115: LIST
17116: LIST
17117: PUSH
17118: EMPTY
17119: LIST
17120: LIST
17121: LIST
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: PPUSH
17127: CALL_OW 69
17131: ST_TO_ADDR
// if not depot then
17132: LD_VAR 0 1
17136: NOT
17137: IFFALSE 17141
// exit ;
17139: GO 17176
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
17141: LD_VAR 0 1
17145: PUSH
17146: LD_INT 1
17148: ARRAY
17149: PPUSH
17150: CALL_OW 250
17154: PPUSH
17155: LD_VAR 0 1
17159: PUSH
17160: LD_INT 1
17162: ARRAY
17163: PPUSH
17164: CALL_OW 251
17168: PPUSH
17169: LD_INT 70
17171: PPUSH
17172: CALL_OW 495
// end ;
17176: PPOPN 1
17178: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
17179: LD_EXP 23
17183: PUSH
17184: LD_EXP 57
17188: AND
17189: IFFALSE 17400
17191: GO 17193
17193: DISABLE
17194: LD_INT 0
17196: PPUSH
17197: PPUSH
17198: PPUSH
17199: PPUSH
17200: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17201: LD_ADDR_VAR 0 5
17205: PUSH
17206: LD_INT 22
17208: PUSH
17209: LD_OWVAR 2
17213: PUSH
17214: EMPTY
17215: LIST
17216: LIST
17217: PUSH
17218: LD_INT 21
17220: PUSH
17221: LD_INT 1
17223: PUSH
17224: EMPTY
17225: LIST
17226: LIST
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: PPUSH
17232: CALL_OW 69
17236: ST_TO_ADDR
// if not tmp then
17237: LD_VAR 0 5
17241: NOT
17242: IFFALSE 17246
// exit ;
17244: GO 17400
// for i in tmp do
17246: LD_ADDR_VAR 0 1
17250: PUSH
17251: LD_VAR 0 5
17255: PUSH
17256: FOR_IN
17257: IFFALSE 17398
// begin d := rand ( 0 , 5 ) ;
17259: LD_ADDR_VAR 0 4
17263: PUSH
17264: LD_INT 0
17266: PPUSH
17267: LD_INT 5
17269: PPUSH
17270: CALL_OW 12
17274: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
17275: LD_ADDR_VAR 0 2
17279: PUSH
17280: LD_VAR 0 1
17284: PPUSH
17285: CALL_OW 250
17289: PPUSH
17290: LD_VAR 0 4
17294: PPUSH
17295: LD_INT 3
17297: PPUSH
17298: LD_INT 12
17300: PPUSH
17301: CALL_OW 12
17305: PPUSH
17306: CALL_OW 272
17310: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
17311: LD_ADDR_VAR 0 3
17315: PUSH
17316: LD_VAR 0 1
17320: PPUSH
17321: CALL_OW 251
17325: PPUSH
17326: LD_VAR 0 4
17330: PPUSH
17331: LD_INT 3
17333: PPUSH
17334: LD_INT 12
17336: PPUSH
17337: CALL_OW 12
17341: PPUSH
17342: CALL_OW 273
17346: ST_TO_ADDR
// if ValidHex ( x , y ) then
17347: LD_VAR 0 2
17351: PPUSH
17352: LD_VAR 0 3
17356: PPUSH
17357: CALL_OW 488
17361: IFFALSE 17396
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17363: LD_VAR 0 1
17367: PPUSH
17368: LD_VAR 0 2
17372: PPUSH
17373: LD_VAR 0 3
17377: PPUSH
17378: LD_INT 3
17380: PPUSH
17381: LD_INT 6
17383: PPUSH
17384: CALL_OW 12
17388: PPUSH
17389: LD_INT 1
17391: PPUSH
17392: CALL_OW 483
// end ;
17396: GO 17256
17398: POP
17399: POP
// end ;
17400: PPOPN 5
17402: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17403: LD_EXP 23
17407: PUSH
17408: LD_EXP 58
17412: AND
17413: IFFALSE 17507
17415: GO 17417
17417: DISABLE
17418: LD_INT 0
17420: PPUSH
17421: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17422: LD_ADDR_VAR 0 2
17426: PUSH
17427: LD_INT 22
17429: PUSH
17430: LD_OWVAR 2
17434: PUSH
17435: EMPTY
17436: LIST
17437: LIST
17438: PUSH
17439: LD_INT 32
17441: PUSH
17442: LD_INT 1
17444: PUSH
17445: EMPTY
17446: LIST
17447: LIST
17448: PUSH
17449: LD_INT 21
17451: PUSH
17452: LD_INT 2
17454: PUSH
17455: EMPTY
17456: LIST
17457: LIST
17458: PUSH
17459: EMPTY
17460: LIST
17461: LIST
17462: LIST
17463: PPUSH
17464: CALL_OW 69
17468: ST_TO_ADDR
// if not tmp then
17469: LD_VAR 0 2
17473: NOT
17474: IFFALSE 17478
// exit ;
17476: GO 17507
// for i in tmp do
17478: LD_ADDR_VAR 0 1
17482: PUSH
17483: LD_VAR 0 2
17487: PUSH
17488: FOR_IN
17489: IFFALSE 17505
// SetFuel ( i , 0 ) ;
17491: LD_VAR 0 1
17495: PPUSH
17496: LD_INT 0
17498: PPUSH
17499: CALL_OW 240
17503: GO 17488
17505: POP
17506: POP
// end ;
17507: PPOPN 2
17509: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17510: LD_EXP 23
17514: PUSH
17515: LD_EXP 59
17519: AND
17520: IFFALSE 17586
17522: GO 17524
17524: DISABLE
17525: LD_INT 0
17527: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17528: LD_ADDR_VAR 0 1
17532: PUSH
17533: LD_INT 22
17535: PUSH
17536: LD_OWVAR 2
17540: PUSH
17541: EMPTY
17542: LIST
17543: LIST
17544: PUSH
17545: LD_INT 30
17547: PUSH
17548: LD_INT 29
17550: PUSH
17551: EMPTY
17552: LIST
17553: LIST
17554: PUSH
17555: EMPTY
17556: LIST
17557: LIST
17558: PPUSH
17559: CALL_OW 69
17563: ST_TO_ADDR
// if not tmp then
17564: LD_VAR 0 1
17568: NOT
17569: IFFALSE 17573
// exit ;
17571: GO 17586
// DestroyUnit ( tmp [ 1 ] ) ;
17573: LD_VAR 0 1
17577: PUSH
17578: LD_INT 1
17580: ARRAY
17581: PPUSH
17582: CALL_OW 65
// end ;
17586: PPOPN 1
17588: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17589: LD_EXP 23
17593: PUSH
17594: LD_EXP 61
17598: AND
17599: IFFALSE 17728
17601: GO 17603
17603: DISABLE
17604: LD_INT 0
17606: PPUSH
// begin uc_side := 0 ;
17607: LD_ADDR_OWVAR 20
17611: PUSH
17612: LD_INT 0
17614: ST_TO_ADDR
// uc_nation := nation_arabian ;
17615: LD_ADDR_OWVAR 21
17619: PUSH
17620: LD_INT 2
17622: ST_TO_ADDR
// hc_gallery :=  ;
17623: LD_ADDR_OWVAR 33
17627: PUSH
17628: LD_STRING 
17630: ST_TO_ADDR
// hc_name :=  ;
17631: LD_ADDR_OWVAR 26
17635: PUSH
17636: LD_STRING 
17638: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17639: LD_INT 1
17641: PPUSH
17642: LD_INT 11
17644: PPUSH
17645: LD_INT 10
17647: PPUSH
17648: CALL_OW 380
// un := CreateHuman ;
17652: LD_ADDR_VAR 0 1
17656: PUSH
17657: CALL_OW 44
17661: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17662: LD_VAR 0 1
17666: PPUSH
17667: LD_INT 1
17669: PPUSH
17670: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17674: LD_INT 35
17676: PPUSH
17677: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17681: LD_VAR 0 1
17685: PPUSH
17686: LD_INT 22
17688: PUSH
17689: LD_OWVAR 2
17693: PUSH
17694: EMPTY
17695: LIST
17696: LIST
17697: PPUSH
17698: CALL_OW 69
17702: PPUSH
17703: LD_VAR 0 1
17707: PPUSH
17708: CALL_OW 74
17712: PPUSH
17713: CALL_OW 115
// until IsDead ( un ) ;
17717: LD_VAR 0 1
17721: PPUSH
17722: CALL_OW 301
17726: IFFALSE 17674
// end ;
17728: PPOPN 1
17730: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17731: LD_EXP 23
17735: PUSH
17736: LD_EXP 63
17740: AND
17741: IFFALSE 17753
17743: GO 17745
17745: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17746: LD_STRING earthquake(getX(game), 0, 32)
17748: PPUSH
17749: CALL_OW 559
17753: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17754: LD_EXP 23
17758: PUSH
17759: LD_EXP 64
17763: AND
17764: IFFALSE 17855
17766: GO 17768
17768: DISABLE
17769: LD_INT 0
17771: PPUSH
// begin enable ;
17772: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17773: LD_ADDR_VAR 0 1
17777: PUSH
17778: LD_INT 22
17780: PUSH
17781: LD_OWVAR 2
17785: PUSH
17786: EMPTY
17787: LIST
17788: LIST
17789: PUSH
17790: LD_INT 21
17792: PUSH
17793: LD_INT 2
17795: PUSH
17796: EMPTY
17797: LIST
17798: LIST
17799: PUSH
17800: LD_INT 33
17802: PUSH
17803: LD_INT 3
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: PUSH
17810: EMPTY
17811: LIST
17812: LIST
17813: LIST
17814: PPUSH
17815: CALL_OW 69
17819: ST_TO_ADDR
// if not tmp then
17820: LD_VAR 0 1
17824: NOT
17825: IFFALSE 17829
// exit ;
17827: GO 17855
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17829: LD_VAR 0 1
17833: PUSH
17834: LD_INT 1
17836: PPUSH
17837: LD_VAR 0 1
17841: PPUSH
17842: CALL_OW 12
17846: ARRAY
17847: PPUSH
17848: LD_INT 1
17850: PPUSH
17851: CALL_OW 234
// end ;
17855: PPOPN 1
17857: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17858: LD_EXP 23
17862: PUSH
17863: LD_EXP 65
17867: AND
17868: IFFALSE 18009
17870: GO 17872
17872: DISABLE
17873: LD_INT 0
17875: PPUSH
17876: PPUSH
17877: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17878: LD_ADDR_VAR 0 3
17882: PUSH
17883: LD_INT 22
17885: PUSH
17886: LD_OWVAR 2
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: PUSH
17895: LD_INT 25
17897: PUSH
17898: LD_INT 1
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: PPUSH
17909: CALL_OW 69
17913: ST_TO_ADDR
// if not tmp then
17914: LD_VAR 0 3
17918: NOT
17919: IFFALSE 17923
// exit ;
17921: GO 18009
// un := tmp [ rand ( 1 , tmp ) ] ;
17923: LD_ADDR_VAR 0 2
17927: PUSH
17928: LD_VAR 0 3
17932: PUSH
17933: LD_INT 1
17935: PPUSH
17936: LD_VAR 0 3
17940: PPUSH
17941: CALL_OW 12
17945: ARRAY
17946: ST_TO_ADDR
// if Crawls ( un ) then
17947: LD_VAR 0 2
17951: PPUSH
17952: CALL_OW 318
17956: IFFALSE 17967
// ComWalk ( un ) ;
17958: LD_VAR 0 2
17962: PPUSH
17963: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17967: LD_VAR 0 2
17971: PPUSH
17972: LD_INT 9
17974: PPUSH
17975: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17979: LD_INT 28
17981: PPUSH
17982: LD_OWVAR 2
17986: PPUSH
17987: LD_INT 2
17989: PPUSH
17990: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17994: LD_INT 29
17996: PPUSH
17997: LD_OWVAR 2
18001: PPUSH
18002: LD_INT 2
18004: PPUSH
18005: CALL_OW 322
// end ;
18009: PPOPN 3
18011: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18012: LD_EXP 23
18016: PUSH
18017: LD_EXP 66
18021: AND
18022: IFFALSE 18133
18024: GO 18026
18026: DISABLE
18027: LD_INT 0
18029: PPUSH
18030: PPUSH
18031: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18032: LD_ADDR_VAR 0 3
18036: PUSH
18037: LD_INT 22
18039: PUSH
18040: LD_OWVAR 2
18044: PUSH
18045: EMPTY
18046: LIST
18047: LIST
18048: PUSH
18049: LD_INT 25
18051: PUSH
18052: LD_INT 1
18054: PUSH
18055: EMPTY
18056: LIST
18057: LIST
18058: PUSH
18059: EMPTY
18060: LIST
18061: LIST
18062: PPUSH
18063: CALL_OW 69
18067: ST_TO_ADDR
// if not tmp then
18068: LD_VAR 0 3
18072: NOT
18073: IFFALSE 18077
// exit ;
18075: GO 18133
// un := tmp [ rand ( 1 , tmp ) ] ;
18077: LD_ADDR_VAR 0 2
18081: PUSH
18082: LD_VAR 0 3
18086: PUSH
18087: LD_INT 1
18089: PPUSH
18090: LD_VAR 0 3
18094: PPUSH
18095: CALL_OW 12
18099: ARRAY
18100: ST_TO_ADDR
// if Crawls ( un ) then
18101: LD_VAR 0 2
18105: PPUSH
18106: CALL_OW 318
18110: IFFALSE 18121
// ComWalk ( un ) ;
18112: LD_VAR 0 2
18116: PPUSH
18117: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18121: LD_VAR 0 2
18125: PPUSH
18126: LD_INT 8
18128: PPUSH
18129: CALL_OW 336
// end ;
18133: PPOPN 3
18135: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
18136: LD_EXP 23
18140: PUSH
18141: LD_EXP 67
18145: AND
18146: IFFALSE 18290
18148: GO 18150
18150: DISABLE
18151: LD_INT 0
18153: PPUSH
18154: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
18155: LD_ADDR_VAR 0 2
18159: PUSH
18160: LD_INT 22
18162: PUSH
18163: LD_OWVAR 2
18167: PUSH
18168: EMPTY
18169: LIST
18170: LIST
18171: PUSH
18172: LD_INT 21
18174: PUSH
18175: LD_INT 2
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: PUSH
18182: LD_INT 2
18184: PUSH
18185: LD_INT 34
18187: PUSH
18188: LD_INT 12
18190: PUSH
18191: EMPTY
18192: LIST
18193: LIST
18194: PUSH
18195: LD_INT 34
18197: PUSH
18198: LD_INT 51
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: PUSH
18205: LD_INT 34
18207: PUSH
18208: LD_INT 32
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: PUSH
18215: EMPTY
18216: LIST
18217: LIST
18218: LIST
18219: LIST
18220: PUSH
18221: EMPTY
18222: LIST
18223: LIST
18224: LIST
18225: PPUSH
18226: CALL_OW 69
18230: ST_TO_ADDR
// if not tmp then
18231: LD_VAR 0 2
18235: NOT
18236: IFFALSE 18240
// exit ;
18238: GO 18290
// for i in tmp do
18240: LD_ADDR_VAR 0 1
18244: PUSH
18245: LD_VAR 0 2
18249: PUSH
18250: FOR_IN
18251: IFFALSE 18288
// if GetCargo ( i , mat_artifact ) = 0 then
18253: LD_VAR 0 1
18257: PPUSH
18258: LD_INT 4
18260: PPUSH
18261: CALL_OW 289
18265: PUSH
18266: LD_INT 0
18268: EQUAL
18269: IFFALSE 18286
// SetCargo ( i , mat_siberit , 100 ) ;
18271: LD_VAR 0 1
18275: PPUSH
18276: LD_INT 3
18278: PPUSH
18279: LD_INT 100
18281: PPUSH
18282: CALL_OW 290
18286: GO 18250
18288: POP
18289: POP
// end ;
18290: PPOPN 2
18292: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
18293: LD_EXP 23
18297: PUSH
18298: LD_EXP 68
18302: AND
18303: IFFALSE 18486
18305: GO 18307
18307: DISABLE
18308: LD_INT 0
18310: PPUSH
18311: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18312: LD_ADDR_VAR 0 2
18316: PUSH
18317: LD_INT 22
18319: PUSH
18320: LD_OWVAR 2
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: PPUSH
18329: CALL_OW 69
18333: ST_TO_ADDR
// if not tmp then
18334: LD_VAR 0 2
18338: NOT
18339: IFFALSE 18343
// exit ;
18341: GO 18486
// for i := 1 to 2 do
18343: LD_ADDR_VAR 0 1
18347: PUSH
18348: DOUBLE
18349: LD_INT 1
18351: DEC
18352: ST_TO_ADDR
18353: LD_INT 2
18355: PUSH
18356: FOR_TO
18357: IFFALSE 18484
// begin uc_side := your_side ;
18359: LD_ADDR_OWVAR 20
18363: PUSH
18364: LD_OWVAR 2
18368: ST_TO_ADDR
// uc_nation := nation_american ;
18369: LD_ADDR_OWVAR 21
18373: PUSH
18374: LD_INT 1
18376: ST_TO_ADDR
// vc_chassis := us_morphling ;
18377: LD_ADDR_OWVAR 37
18381: PUSH
18382: LD_INT 5
18384: ST_TO_ADDR
// vc_engine := engine_siberite ;
18385: LD_ADDR_OWVAR 39
18389: PUSH
18390: LD_INT 3
18392: ST_TO_ADDR
// vc_control := control_computer ;
18393: LD_ADDR_OWVAR 38
18397: PUSH
18398: LD_INT 3
18400: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18401: LD_ADDR_OWVAR 40
18405: PUSH
18406: LD_INT 10
18408: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
18409: LD_VAR 0 2
18413: PUSH
18414: LD_INT 1
18416: ARRAY
18417: PPUSH
18418: CALL_OW 310
18422: NOT
18423: IFFALSE 18470
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
18425: CALL_OW 45
18429: PPUSH
18430: LD_VAR 0 2
18434: PUSH
18435: LD_INT 1
18437: ARRAY
18438: PPUSH
18439: CALL_OW 250
18443: PPUSH
18444: LD_VAR 0 2
18448: PUSH
18449: LD_INT 1
18451: ARRAY
18452: PPUSH
18453: CALL_OW 251
18457: PPUSH
18458: LD_INT 12
18460: PPUSH
18461: LD_INT 1
18463: PPUSH
18464: CALL_OW 50
18468: GO 18482
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18470: CALL_OW 45
18474: PPUSH
18475: LD_INT 1
18477: PPUSH
18478: CALL_OW 51
// end ;
18482: GO 18356
18484: POP
18485: POP
// end ;
18486: PPOPN 2
18488: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18489: LD_EXP 23
18493: PUSH
18494: LD_EXP 69
18498: AND
18499: IFFALSE 18721
18501: GO 18503
18503: DISABLE
18504: LD_INT 0
18506: PPUSH
18507: PPUSH
18508: PPUSH
18509: PPUSH
18510: PPUSH
18511: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18512: LD_ADDR_VAR 0 6
18516: PUSH
18517: LD_INT 22
18519: PUSH
18520: LD_OWVAR 2
18524: PUSH
18525: EMPTY
18526: LIST
18527: LIST
18528: PUSH
18529: LD_INT 21
18531: PUSH
18532: LD_INT 1
18534: PUSH
18535: EMPTY
18536: LIST
18537: LIST
18538: PUSH
18539: LD_INT 3
18541: PUSH
18542: LD_INT 23
18544: PUSH
18545: LD_INT 0
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: LIST
18560: PPUSH
18561: CALL_OW 69
18565: ST_TO_ADDR
// if not tmp then
18566: LD_VAR 0 6
18570: NOT
18571: IFFALSE 18575
// exit ;
18573: GO 18721
// s1 := rand ( 1 , 4 ) ;
18575: LD_ADDR_VAR 0 2
18579: PUSH
18580: LD_INT 1
18582: PPUSH
18583: LD_INT 4
18585: PPUSH
18586: CALL_OW 12
18590: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18591: LD_ADDR_VAR 0 4
18595: PUSH
18596: LD_VAR 0 6
18600: PUSH
18601: LD_INT 1
18603: ARRAY
18604: PPUSH
18605: LD_VAR 0 2
18609: PPUSH
18610: CALL_OW 259
18614: ST_TO_ADDR
// if s1 = 1 then
18615: LD_VAR 0 2
18619: PUSH
18620: LD_INT 1
18622: EQUAL
18623: IFFALSE 18643
// s2 := rand ( 2 , 4 ) else
18625: LD_ADDR_VAR 0 3
18629: PUSH
18630: LD_INT 2
18632: PPUSH
18633: LD_INT 4
18635: PPUSH
18636: CALL_OW 12
18640: ST_TO_ADDR
18641: GO 18651
// s2 := 1 ;
18643: LD_ADDR_VAR 0 3
18647: PUSH
18648: LD_INT 1
18650: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18651: LD_ADDR_VAR 0 5
18655: PUSH
18656: LD_VAR 0 6
18660: PUSH
18661: LD_INT 1
18663: ARRAY
18664: PPUSH
18665: LD_VAR 0 3
18669: PPUSH
18670: CALL_OW 259
18674: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18675: LD_VAR 0 6
18679: PUSH
18680: LD_INT 1
18682: ARRAY
18683: PPUSH
18684: LD_VAR 0 2
18688: PPUSH
18689: LD_VAR 0 5
18693: PPUSH
18694: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18698: LD_VAR 0 6
18702: PUSH
18703: LD_INT 1
18705: ARRAY
18706: PPUSH
18707: LD_VAR 0 3
18711: PPUSH
18712: LD_VAR 0 4
18716: PPUSH
18717: CALL_OW 237
// end ;
18721: PPOPN 6
18723: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18724: LD_EXP 23
18728: PUSH
18729: LD_EXP 70
18733: AND
18734: IFFALSE 18813
18736: GO 18738
18738: DISABLE
18739: LD_INT 0
18741: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18742: LD_ADDR_VAR 0 1
18746: PUSH
18747: LD_INT 22
18749: PUSH
18750: LD_OWVAR 2
18754: PUSH
18755: EMPTY
18756: LIST
18757: LIST
18758: PUSH
18759: LD_INT 30
18761: PUSH
18762: LD_INT 3
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: PPUSH
18773: CALL_OW 69
18777: ST_TO_ADDR
// if not tmp then
18778: LD_VAR 0 1
18782: NOT
18783: IFFALSE 18787
// exit ;
18785: GO 18813
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18787: LD_VAR 0 1
18791: PUSH
18792: LD_INT 1
18794: PPUSH
18795: LD_VAR 0 1
18799: PPUSH
18800: CALL_OW 12
18804: ARRAY
18805: PPUSH
18806: LD_INT 1
18808: PPUSH
18809: CALL_OW 234
// end ;
18813: PPOPN 1
18815: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18816: LD_EXP 23
18820: PUSH
18821: LD_EXP 71
18825: AND
18826: IFFALSE 18938
18828: GO 18830
18830: DISABLE
18831: LD_INT 0
18833: PPUSH
18834: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18835: LD_ADDR_VAR 0 2
18839: PUSH
18840: LD_INT 22
18842: PUSH
18843: LD_OWVAR 2
18847: PUSH
18848: EMPTY
18849: LIST
18850: LIST
18851: PUSH
18852: LD_INT 2
18854: PUSH
18855: LD_INT 30
18857: PUSH
18858: LD_INT 27
18860: PUSH
18861: EMPTY
18862: LIST
18863: LIST
18864: PUSH
18865: LD_INT 30
18867: PUSH
18868: LD_INT 26
18870: PUSH
18871: EMPTY
18872: LIST
18873: LIST
18874: PUSH
18875: LD_INT 30
18877: PUSH
18878: LD_INT 28
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: PUSH
18885: EMPTY
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: PPUSH
18895: CALL_OW 69
18899: ST_TO_ADDR
// if not tmp then
18900: LD_VAR 0 2
18904: NOT
18905: IFFALSE 18909
// exit ;
18907: GO 18938
// for i in tmp do
18909: LD_ADDR_VAR 0 1
18913: PUSH
18914: LD_VAR 0 2
18918: PUSH
18919: FOR_IN
18920: IFFALSE 18936
// SetLives ( i , 1 ) ;
18922: LD_VAR 0 1
18926: PPUSH
18927: LD_INT 1
18929: PPUSH
18930: CALL_OW 234
18934: GO 18919
18936: POP
18937: POP
// end ;
18938: PPOPN 2
18940: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18941: LD_EXP 23
18945: PUSH
18946: LD_EXP 72
18950: AND
18951: IFFALSE 19238
18953: GO 18955
18955: DISABLE
18956: LD_INT 0
18958: PPUSH
18959: PPUSH
18960: PPUSH
// begin i := rand ( 1 , 7 ) ;
18961: LD_ADDR_VAR 0 1
18965: PUSH
18966: LD_INT 1
18968: PPUSH
18969: LD_INT 7
18971: PPUSH
18972: CALL_OW 12
18976: ST_TO_ADDR
// case i of 1 :
18977: LD_VAR 0 1
18981: PUSH
18982: LD_INT 1
18984: DOUBLE
18985: EQUAL
18986: IFTRUE 18990
18988: GO 19000
18990: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18991: LD_STRING earthquake(getX(game), 0, 32)
18993: PPUSH
18994: CALL_OW 559
18998: GO 19238
19000: LD_INT 2
19002: DOUBLE
19003: EQUAL
19004: IFTRUE 19008
19006: GO 19022
19008: POP
// begin ToLua ( displayStucuk(); ) ;
19009: LD_STRING displayStucuk();
19011: PPUSH
19012: CALL_OW 559
// ResetFog ;
19016: CALL_OW 335
// end ; 3 :
19020: GO 19238
19022: LD_INT 3
19024: DOUBLE
19025: EQUAL
19026: IFTRUE 19030
19028: GO 19134
19030: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19031: LD_ADDR_VAR 0 2
19035: PUSH
19036: LD_INT 22
19038: PUSH
19039: LD_OWVAR 2
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: PUSH
19048: LD_INT 25
19050: PUSH
19051: LD_INT 1
19053: PUSH
19054: EMPTY
19055: LIST
19056: LIST
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: PPUSH
19062: CALL_OW 69
19066: ST_TO_ADDR
// if not tmp then
19067: LD_VAR 0 2
19071: NOT
19072: IFFALSE 19076
// exit ;
19074: GO 19238
// un := tmp [ rand ( 1 , tmp ) ] ;
19076: LD_ADDR_VAR 0 3
19080: PUSH
19081: LD_VAR 0 2
19085: PUSH
19086: LD_INT 1
19088: PPUSH
19089: LD_VAR 0 2
19093: PPUSH
19094: CALL_OW 12
19098: ARRAY
19099: ST_TO_ADDR
// if Crawls ( un ) then
19100: LD_VAR 0 3
19104: PPUSH
19105: CALL_OW 318
19109: IFFALSE 19120
// ComWalk ( un ) ;
19111: LD_VAR 0 3
19115: PPUSH
19116: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19120: LD_VAR 0 3
19124: PPUSH
19125: LD_INT 8
19127: PPUSH
19128: CALL_OW 336
// end ; 4 :
19132: GO 19238
19134: LD_INT 4
19136: DOUBLE
19137: EQUAL
19138: IFTRUE 19142
19140: GO 19216
19142: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19143: LD_ADDR_VAR 0 2
19147: PUSH
19148: LD_INT 22
19150: PUSH
19151: LD_OWVAR 2
19155: PUSH
19156: EMPTY
19157: LIST
19158: LIST
19159: PUSH
19160: LD_INT 30
19162: PUSH
19163: LD_INT 29
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: PPUSH
19174: CALL_OW 69
19178: ST_TO_ADDR
// if not tmp then
19179: LD_VAR 0 2
19183: NOT
19184: IFFALSE 19188
// exit ;
19186: GO 19238
// CenterNowOnUnits ( tmp [ 1 ] ) ;
19188: LD_VAR 0 2
19192: PUSH
19193: LD_INT 1
19195: ARRAY
19196: PPUSH
19197: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
19201: LD_VAR 0 2
19205: PUSH
19206: LD_INT 1
19208: ARRAY
19209: PPUSH
19210: CALL_OW 65
// end ; 5 .. 7 :
19214: GO 19238
19216: LD_INT 5
19218: DOUBLE
19219: GREATEREQUAL
19220: IFFALSE 19228
19222: LD_INT 7
19224: DOUBLE
19225: LESSEQUAL
19226: IFTRUE 19230
19228: GO 19237
19230: POP
// StreamSibBomb ; end ;
19231: CALL 15475 0 0
19235: GO 19238
19237: POP
// end ;
19238: PPOPN 3
19240: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19241: LD_EXP 23
19245: PUSH
19246: LD_EXP 73
19250: AND
19251: IFFALSE 19407
19253: GO 19255
19255: DISABLE
19256: LD_INT 0
19258: PPUSH
19259: PPUSH
19260: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
19261: LD_ADDR_VAR 0 2
19265: PUSH
19266: LD_INT 81
19268: PUSH
19269: LD_OWVAR 2
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: PUSH
19278: LD_INT 2
19280: PUSH
19281: LD_INT 21
19283: PUSH
19284: LD_INT 1
19286: PUSH
19287: EMPTY
19288: LIST
19289: LIST
19290: PUSH
19291: LD_INT 21
19293: PUSH
19294: LD_INT 2
19296: PUSH
19297: EMPTY
19298: LIST
19299: LIST
19300: PUSH
19301: EMPTY
19302: LIST
19303: LIST
19304: LIST
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: PPUSH
19310: CALL_OW 69
19314: ST_TO_ADDR
// if not tmp then
19315: LD_VAR 0 2
19319: NOT
19320: IFFALSE 19324
// exit ;
19322: GO 19407
// p := 0 ;
19324: LD_ADDR_VAR 0 3
19328: PUSH
19329: LD_INT 0
19331: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19332: LD_INT 35
19334: PPUSH
19335: CALL_OW 67
// p := p + 1 ;
19339: LD_ADDR_VAR 0 3
19343: PUSH
19344: LD_VAR 0 3
19348: PUSH
19349: LD_INT 1
19351: PLUS
19352: ST_TO_ADDR
// for i in tmp do
19353: LD_ADDR_VAR 0 1
19357: PUSH
19358: LD_VAR 0 2
19362: PUSH
19363: FOR_IN
19364: IFFALSE 19395
// if GetLives ( i ) < 1000 then
19366: LD_VAR 0 1
19370: PPUSH
19371: CALL_OW 256
19375: PUSH
19376: LD_INT 1000
19378: LESS
19379: IFFALSE 19393
// SetLives ( i , 1000 ) ;
19381: LD_VAR 0 1
19385: PPUSH
19386: LD_INT 1000
19388: PPUSH
19389: CALL_OW 234
19393: GO 19363
19395: POP
19396: POP
// until p > 20 ;
19397: LD_VAR 0 3
19401: PUSH
19402: LD_INT 20
19404: GREATER
19405: IFFALSE 19332
// end ;
19407: PPOPN 3
19409: END
// every 0 0$1 trigger StreamModeActive and sTime do
19410: LD_EXP 23
19414: PUSH
19415: LD_EXP 74
19419: AND
19420: IFFALSE 19455
19422: GO 19424
19424: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19425: LD_INT 28
19427: PPUSH
19428: LD_OWVAR 2
19432: PPUSH
19433: LD_INT 2
19435: PPUSH
19436: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19440: LD_INT 30
19442: PPUSH
19443: LD_OWVAR 2
19447: PPUSH
19448: LD_INT 2
19450: PPUSH
19451: CALL_OW 322
// end ;
19455: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19456: LD_EXP 23
19460: PUSH
19461: LD_EXP 75
19465: AND
19466: IFFALSE 19587
19468: GO 19470
19470: DISABLE
19471: LD_INT 0
19473: PPUSH
19474: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19475: LD_ADDR_VAR 0 2
19479: PUSH
19480: LD_INT 22
19482: PUSH
19483: LD_OWVAR 2
19487: PUSH
19488: EMPTY
19489: LIST
19490: LIST
19491: PUSH
19492: LD_INT 21
19494: PUSH
19495: LD_INT 1
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: PUSH
19502: LD_INT 3
19504: PUSH
19505: LD_INT 23
19507: PUSH
19508: LD_INT 0
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: LIST
19523: PPUSH
19524: CALL_OW 69
19528: ST_TO_ADDR
// if not tmp then
19529: LD_VAR 0 2
19533: NOT
19534: IFFALSE 19538
// exit ;
19536: GO 19587
// for i in tmp do
19538: LD_ADDR_VAR 0 1
19542: PUSH
19543: LD_VAR 0 2
19547: PUSH
19548: FOR_IN
19549: IFFALSE 19585
// begin if Crawls ( i ) then
19551: LD_VAR 0 1
19555: PPUSH
19556: CALL_OW 318
19560: IFFALSE 19571
// ComWalk ( i ) ;
19562: LD_VAR 0 1
19566: PPUSH
19567: CALL_OW 138
// SetClass ( i , 2 ) ;
19571: LD_VAR 0 1
19575: PPUSH
19576: LD_INT 2
19578: PPUSH
19579: CALL_OW 336
// end ;
19583: GO 19548
19585: POP
19586: POP
// end ;
19587: PPOPN 2
19589: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19590: LD_EXP 23
19594: PUSH
19595: LD_EXP 76
19599: AND
19600: IFFALSE 19888
19602: GO 19604
19604: DISABLE
19605: LD_INT 0
19607: PPUSH
19608: PPUSH
19609: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19610: LD_OWVAR 2
19614: PPUSH
19615: LD_INT 9
19617: PPUSH
19618: LD_INT 1
19620: PPUSH
19621: LD_INT 1
19623: PPUSH
19624: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19628: LD_INT 9
19630: PPUSH
19631: LD_OWVAR 2
19635: PPUSH
19636: CALL_OW 343
// uc_side := 9 ;
19640: LD_ADDR_OWVAR 20
19644: PUSH
19645: LD_INT 9
19647: ST_TO_ADDR
// uc_nation := 2 ;
19648: LD_ADDR_OWVAR 21
19652: PUSH
19653: LD_INT 2
19655: ST_TO_ADDR
// hc_name := Dark Warrior ;
19656: LD_ADDR_OWVAR 26
19660: PUSH
19661: LD_STRING Dark Warrior
19663: ST_TO_ADDR
// hc_gallery :=  ;
19664: LD_ADDR_OWVAR 33
19668: PUSH
19669: LD_STRING 
19671: ST_TO_ADDR
// hc_noskilllimit := true ;
19672: LD_ADDR_OWVAR 76
19676: PUSH
19677: LD_INT 1
19679: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19680: LD_ADDR_OWVAR 31
19684: PUSH
19685: LD_INT 30
19687: PUSH
19688: LD_INT 30
19690: PUSH
19691: LD_INT 30
19693: PUSH
19694: LD_INT 30
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: ST_TO_ADDR
// un := CreateHuman ;
19703: LD_ADDR_VAR 0 3
19707: PUSH
19708: CALL_OW 44
19712: ST_TO_ADDR
// hc_noskilllimit := false ;
19713: LD_ADDR_OWVAR 76
19717: PUSH
19718: LD_INT 0
19720: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19721: LD_VAR 0 3
19725: PPUSH
19726: LD_INT 1
19728: PPUSH
19729: CALL_OW 51
// ToLua ( playRanger() ) ;
19733: LD_STRING playRanger()
19735: PPUSH
19736: CALL_OW 559
// p := 0 ;
19740: LD_ADDR_VAR 0 2
19744: PUSH
19745: LD_INT 0
19747: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19748: LD_INT 35
19750: PPUSH
19751: CALL_OW 67
// p := p + 1 ;
19755: LD_ADDR_VAR 0 2
19759: PUSH
19760: LD_VAR 0 2
19764: PUSH
19765: LD_INT 1
19767: PLUS
19768: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19769: LD_VAR 0 3
19773: PPUSH
19774: CALL_OW 256
19778: PUSH
19779: LD_INT 1000
19781: LESS
19782: IFFALSE 19796
// SetLives ( un , 1000 ) ;
19784: LD_VAR 0 3
19788: PPUSH
19789: LD_INT 1000
19791: PPUSH
19792: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19796: LD_VAR 0 3
19800: PPUSH
19801: LD_INT 81
19803: PUSH
19804: LD_OWVAR 2
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: PUSH
19813: LD_INT 91
19815: PUSH
19816: LD_VAR 0 3
19820: PUSH
19821: LD_INT 30
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: LIST
19828: PUSH
19829: EMPTY
19830: LIST
19831: LIST
19832: PPUSH
19833: CALL_OW 69
19837: PPUSH
19838: LD_VAR 0 3
19842: PPUSH
19843: CALL_OW 74
19847: PPUSH
19848: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19852: LD_VAR 0 2
19856: PUSH
19857: LD_INT 80
19859: GREATER
19860: PUSH
19861: LD_VAR 0 3
19865: PPUSH
19866: CALL_OW 301
19870: OR
19871: IFFALSE 19748
// if un then
19873: LD_VAR 0 3
19877: IFFALSE 19888
// RemoveUnit ( un ) ;
19879: LD_VAR 0 3
19883: PPUSH
19884: CALL_OW 64
// end ;
19888: PPOPN 3
19890: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19891: LD_EXP 77
19895: IFFALSE 20011
19897: GO 19899
19899: DISABLE
19900: LD_INT 0
19902: PPUSH
19903: PPUSH
19904: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19905: LD_ADDR_VAR 0 2
19909: PUSH
19910: LD_INT 81
19912: PUSH
19913: LD_OWVAR 2
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: PUSH
19922: LD_INT 21
19924: PUSH
19925: LD_INT 1
19927: PUSH
19928: EMPTY
19929: LIST
19930: LIST
19931: PUSH
19932: EMPTY
19933: LIST
19934: LIST
19935: PPUSH
19936: CALL_OW 69
19940: ST_TO_ADDR
// ToLua ( playComputer() ) ;
19941: LD_STRING playComputer()
19943: PPUSH
19944: CALL_OW 559
// if not tmp then
19948: LD_VAR 0 2
19952: NOT
19953: IFFALSE 19957
// exit ;
19955: GO 20011
// for i in tmp do
19957: LD_ADDR_VAR 0 1
19961: PUSH
19962: LD_VAR 0 2
19966: PUSH
19967: FOR_IN
19968: IFFALSE 20009
// for j := 1 to 4 do
19970: LD_ADDR_VAR 0 3
19974: PUSH
19975: DOUBLE
19976: LD_INT 1
19978: DEC
19979: ST_TO_ADDR
19980: LD_INT 4
19982: PUSH
19983: FOR_TO
19984: IFFALSE 20005
// SetSkill ( i , j , 10 ) ;
19986: LD_VAR 0 1
19990: PPUSH
19991: LD_VAR 0 3
19995: PPUSH
19996: LD_INT 10
19998: PPUSH
19999: CALL_OW 237
20003: GO 19983
20005: POP
20006: POP
20007: GO 19967
20009: POP
20010: POP
// end ;
20011: PPOPN 3
20013: END
// every 0 0$1 trigger s30 do var i , tmp ;
20014: LD_EXP 78
20018: IFFALSE 20087
20020: GO 20022
20022: DISABLE
20023: LD_INT 0
20025: PPUSH
20026: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20027: LD_ADDR_VAR 0 2
20031: PUSH
20032: LD_INT 22
20034: PUSH
20035: LD_OWVAR 2
20039: PUSH
20040: EMPTY
20041: LIST
20042: LIST
20043: PPUSH
20044: CALL_OW 69
20048: ST_TO_ADDR
// if not tmp then
20049: LD_VAR 0 2
20053: NOT
20054: IFFALSE 20058
// exit ;
20056: GO 20087
// for i in tmp do
20058: LD_ADDR_VAR 0 1
20062: PUSH
20063: LD_VAR 0 2
20067: PUSH
20068: FOR_IN
20069: IFFALSE 20085
// SetLives ( i , 300 ) ;
20071: LD_VAR 0 1
20075: PPUSH
20076: LD_INT 300
20078: PPUSH
20079: CALL_OW 234
20083: GO 20068
20085: POP
20086: POP
// end ;
20087: PPOPN 2
20089: END
// every 0 0$1 trigger s60 do var i , tmp ;
20090: LD_EXP 79
20094: IFFALSE 20163
20096: GO 20098
20098: DISABLE
20099: LD_INT 0
20101: PPUSH
20102: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20103: LD_ADDR_VAR 0 2
20107: PUSH
20108: LD_INT 22
20110: PUSH
20111: LD_OWVAR 2
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: PPUSH
20120: CALL_OW 69
20124: ST_TO_ADDR
// if not tmp then
20125: LD_VAR 0 2
20129: NOT
20130: IFFALSE 20134
// exit ;
20132: GO 20163
// for i in tmp do
20134: LD_ADDR_VAR 0 1
20138: PUSH
20139: LD_VAR 0 2
20143: PUSH
20144: FOR_IN
20145: IFFALSE 20161
// SetLives ( i , 600 ) ;
20147: LD_VAR 0 1
20151: PPUSH
20152: LD_INT 600
20154: PPUSH
20155: CALL_OW 234
20159: GO 20144
20161: POP
20162: POP
// end ;
20163: PPOPN 2
20165: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20166: LD_INT 0
20168: PPUSH
// case cmd of 301 :
20169: LD_VAR 0 1
20173: PUSH
20174: LD_INT 301
20176: DOUBLE
20177: EQUAL
20178: IFTRUE 20182
20180: GO 20214
20182: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
20183: LD_VAR 0 6
20187: PPUSH
20188: LD_VAR 0 7
20192: PPUSH
20193: LD_VAR 0 8
20197: PPUSH
20198: LD_VAR 0 4
20202: PPUSH
20203: LD_VAR 0 5
20207: PPUSH
20208: CALL 21415 0 5
20212: GO 20335
20214: LD_INT 302
20216: DOUBLE
20217: EQUAL
20218: IFTRUE 20222
20220: GO 20259
20222: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
20223: LD_VAR 0 6
20227: PPUSH
20228: LD_VAR 0 7
20232: PPUSH
20233: LD_VAR 0 8
20237: PPUSH
20238: LD_VAR 0 9
20242: PPUSH
20243: LD_VAR 0 4
20247: PPUSH
20248: LD_VAR 0 5
20252: PPUSH
20253: CALL 21506 0 6
20257: GO 20335
20259: LD_INT 303
20261: DOUBLE
20262: EQUAL
20263: IFTRUE 20267
20265: GO 20304
20267: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
20268: LD_VAR 0 6
20272: PPUSH
20273: LD_VAR 0 7
20277: PPUSH
20278: LD_VAR 0 8
20282: PPUSH
20283: LD_VAR 0 9
20287: PPUSH
20288: LD_VAR 0 4
20292: PPUSH
20293: LD_VAR 0 5
20297: PPUSH
20298: CALL 20340 0 6
20302: GO 20335
20304: LD_INT 304
20306: DOUBLE
20307: EQUAL
20308: IFTRUE 20312
20310: GO 20334
20312: POP
// hHackTeleport ( unit , x , y ) ; end ;
20313: LD_VAR 0 2
20317: PPUSH
20318: LD_VAR 0 4
20322: PPUSH
20323: LD_VAR 0 5
20327: PPUSH
20328: CALL 22099 0 3
20332: GO 20335
20334: POP
// end ;
20335: LD_VAR 0 12
20339: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
20340: LD_INT 0
20342: PPUSH
20343: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
20344: LD_VAR 0 1
20348: PUSH
20349: LD_INT 1
20351: LESS
20352: PUSH
20353: LD_VAR 0 1
20357: PUSH
20358: LD_INT 3
20360: GREATER
20361: OR
20362: PUSH
20363: LD_VAR 0 5
20367: PPUSH
20368: LD_VAR 0 6
20372: PPUSH
20373: CALL_OW 428
20377: OR
20378: IFFALSE 20382
// exit ;
20380: GO 21102
// uc_side := your_side ;
20382: LD_ADDR_OWVAR 20
20386: PUSH
20387: LD_OWVAR 2
20391: ST_TO_ADDR
// uc_nation := nation ;
20392: LD_ADDR_OWVAR 21
20396: PUSH
20397: LD_VAR 0 1
20401: ST_TO_ADDR
// bc_level = 1 ;
20402: LD_ADDR_OWVAR 43
20406: PUSH
20407: LD_INT 1
20409: ST_TO_ADDR
// case btype of 1 :
20410: LD_VAR 0 2
20414: PUSH
20415: LD_INT 1
20417: DOUBLE
20418: EQUAL
20419: IFTRUE 20423
20421: GO 20434
20423: POP
// bc_type := b_depot ; 2 :
20424: LD_ADDR_OWVAR 42
20428: PUSH
20429: LD_INT 0
20431: ST_TO_ADDR
20432: GO 21046
20434: LD_INT 2
20436: DOUBLE
20437: EQUAL
20438: IFTRUE 20442
20440: GO 20453
20442: POP
// bc_type := b_warehouse ; 3 :
20443: LD_ADDR_OWVAR 42
20447: PUSH
20448: LD_INT 1
20450: ST_TO_ADDR
20451: GO 21046
20453: LD_INT 3
20455: DOUBLE
20456: EQUAL
20457: IFTRUE 20461
20459: GO 20472
20461: POP
// bc_type := b_lab ; 4 .. 9 :
20462: LD_ADDR_OWVAR 42
20466: PUSH
20467: LD_INT 6
20469: ST_TO_ADDR
20470: GO 21046
20472: LD_INT 4
20474: DOUBLE
20475: GREATEREQUAL
20476: IFFALSE 20484
20478: LD_INT 9
20480: DOUBLE
20481: LESSEQUAL
20482: IFTRUE 20486
20484: GO 20538
20486: POP
// begin bc_type := b_lab_half ;
20487: LD_ADDR_OWVAR 42
20491: PUSH
20492: LD_INT 7
20494: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
20495: LD_ADDR_OWVAR 44
20499: PUSH
20500: LD_INT 10
20502: PUSH
20503: LD_INT 11
20505: PUSH
20506: LD_INT 12
20508: PUSH
20509: LD_INT 15
20511: PUSH
20512: LD_INT 14
20514: PUSH
20515: LD_INT 13
20517: PUSH
20518: EMPTY
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: PUSH
20526: LD_VAR 0 2
20530: PUSH
20531: LD_INT 3
20533: MINUS
20534: ARRAY
20535: ST_TO_ADDR
// end ; 10 .. 13 :
20536: GO 21046
20538: LD_INT 10
20540: DOUBLE
20541: GREATEREQUAL
20542: IFFALSE 20550
20544: LD_INT 13
20546: DOUBLE
20547: LESSEQUAL
20548: IFTRUE 20552
20550: GO 20629
20552: POP
// begin bc_type := b_lab_full ;
20553: LD_ADDR_OWVAR 42
20557: PUSH
20558: LD_INT 8
20560: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
20561: LD_ADDR_OWVAR 44
20565: PUSH
20566: LD_INT 10
20568: PUSH
20569: LD_INT 12
20571: PUSH
20572: LD_INT 14
20574: PUSH
20575: LD_INT 13
20577: PUSH
20578: EMPTY
20579: LIST
20580: LIST
20581: LIST
20582: LIST
20583: PUSH
20584: LD_VAR 0 2
20588: PUSH
20589: LD_INT 9
20591: MINUS
20592: ARRAY
20593: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20594: LD_ADDR_OWVAR 45
20598: PUSH
20599: LD_INT 11
20601: PUSH
20602: LD_INT 15
20604: PUSH
20605: LD_INT 12
20607: PUSH
20608: LD_INT 15
20610: PUSH
20611: EMPTY
20612: LIST
20613: LIST
20614: LIST
20615: LIST
20616: PUSH
20617: LD_VAR 0 2
20621: PUSH
20622: LD_INT 9
20624: MINUS
20625: ARRAY
20626: ST_TO_ADDR
// end ; 14 :
20627: GO 21046
20629: LD_INT 14
20631: DOUBLE
20632: EQUAL
20633: IFTRUE 20637
20635: GO 20648
20637: POP
// bc_type := b_workshop ; 15 :
20638: LD_ADDR_OWVAR 42
20642: PUSH
20643: LD_INT 2
20645: ST_TO_ADDR
20646: GO 21046
20648: LD_INT 15
20650: DOUBLE
20651: EQUAL
20652: IFTRUE 20656
20654: GO 20667
20656: POP
// bc_type := b_factory ; 16 :
20657: LD_ADDR_OWVAR 42
20661: PUSH
20662: LD_INT 3
20664: ST_TO_ADDR
20665: GO 21046
20667: LD_INT 16
20669: DOUBLE
20670: EQUAL
20671: IFTRUE 20675
20673: GO 20686
20675: POP
// bc_type := b_ext_gun ; 17 :
20676: LD_ADDR_OWVAR 42
20680: PUSH
20681: LD_INT 17
20683: ST_TO_ADDR
20684: GO 21046
20686: LD_INT 17
20688: DOUBLE
20689: EQUAL
20690: IFTRUE 20694
20692: GO 20722
20694: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20695: LD_ADDR_OWVAR 42
20699: PUSH
20700: LD_INT 19
20702: PUSH
20703: LD_INT 23
20705: PUSH
20706: LD_INT 19
20708: PUSH
20709: EMPTY
20710: LIST
20711: LIST
20712: LIST
20713: PUSH
20714: LD_VAR 0 1
20718: ARRAY
20719: ST_TO_ADDR
20720: GO 21046
20722: LD_INT 18
20724: DOUBLE
20725: EQUAL
20726: IFTRUE 20730
20728: GO 20741
20730: POP
// bc_type := b_ext_radar ; 19 :
20731: LD_ADDR_OWVAR 42
20735: PUSH
20736: LD_INT 20
20738: ST_TO_ADDR
20739: GO 21046
20741: LD_INT 19
20743: DOUBLE
20744: EQUAL
20745: IFTRUE 20749
20747: GO 20760
20749: POP
// bc_type := b_ext_radio ; 20 :
20750: LD_ADDR_OWVAR 42
20754: PUSH
20755: LD_INT 22
20757: ST_TO_ADDR
20758: GO 21046
20760: LD_INT 20
20762: DOUBLE
20763: EQUAL
20764: IFTRUE 20768
20766: GO 20779
20768: POP
// bc_type := b_ext_siberium ; 21 :
20769: LD_ADDR_OWVAR 42
20773: PUSH
20774: LD_INT 21
20776: ST_TO_ADDR
20777: GO 21046
20779: LD_INT 21
20781: DOUBLE
20782: EQUAL
20783: IFTRUE 20787
20785: GO 20798
20787: POP
// bc_type := b_ext_computer ; 22 :
20788: LD_ADDR_OWVAR 42
20792: PUSH
20793: LD_INT 24
20795: ST_TO_ADDR
20796: GO 21046
20798: LD_INT 22
20800: DOUBLE
20801: EQUAL
20802: IFTRUE 20806
20804: GO 20817
20806: POP
// bc_type := b_ext_track ; 23 :
20807: LD_ADDR_OWVAR 42
20811: PUSH
20812: LD_INT 16
20814: ST_TO_ADDR
20815: GO 21046
20817: LD_INT 23
20819: DOUBLE
20820: EQUAL
20821: IFTRUE 20825
20823: GO 20836
20825: POP
// bc_type := b_ext_laser ; 24 :
20826: LD_ADDR_OWVAR 42
20830: PUSH
20831: LD_INT 25
20833: ST_TO_ADDR
20834: GO 21046
20836: LD_INT 24
20838: DOUBLE
20839: EQUAL
20840: IFTRUE 20844
20842: GO 20855
20844: POP
// bc_type := b_control_tower ; 25 :
20845: LD_ADDR_OWVAR 42
20849: PUSH
20850: LD_INT 36
20852: ST_TO_ADDR
20853: GO 21046
20855: LD_INT 25
20857: DOUBLE
20858: EQUAL
20859: IFTRUE 20863
20861: GO 20874
20863: POP
// bc_type := b_breastwork ; 26 :
20864: LD_ADDR_OWVAR 42
20868: PUSH
20869: LD_INT 31
20871: ST_TO_ADDR
20872: GO 21046
20874: LD_INT 26
20876: DOUBLE
20877: EQUAL
20878: IFTRUE 20882
20880: GO 20893
20882: POP
// bc_type := b_bunker ; 27 :
20883: LD_ADDR_OWVAR 42
20887: PUSH
20888: LD_INT 32
20890: ST_TO_ADDR
20891: GO 21046
20893: LD_INT 27
20895: DOUBLE
20896: EQUAL
20897: IFTRUE 20901
20899: GO 20912
20901: POP
// bc_type := b_turret ; 28 :
20902: LD_ADDR_OWVAR 42
20906: PUSH
20907: LD_INT 33
20909: ST_TO_ADDR
20910: GO 21046
20912: LD_INT 28
20914: DOUBLE
20915: EQUAL
20916: IFTRUE 20920
20918: GO 20931
20920: POP
// bc_type := b_armoury ; 29 :
20921: LD_ADDR_OWVAR 42
20925: PUSH
20926: LD_INT 4
20928: ST_TO_ADDR
20929: GO 21046
20931: LD_INT 29
20933: DOUBLE
20934: EQUAL
20935: IFTRUE 20939
20937: GO 20950
20939: POP
// bc_type := b_barracks ; 30 :
20940: LD_ADDR_OWVAR 42
20944: PUSH
20945: LD_INT 5
20947: ST_TO_ADDR
20948: GO 21046
20950: LD_INT 30
20952: DOUBLE
20953: EQUAL
20954: IFTRUE 20958
20956: GO 20969
20958: POP
// bc_type := b_solar_power ; 31 :
20959: LD_ADDR_OWVAR 42
20963: PUSH
20964: LD_INT 27
20966: ST_TO_ADDR
20967: GO 21046
20969: LD_INT 31
20971: DOUBLE
20972: EQUAL
20973: IFTRUE 20977
20975: GO 20988
20977: POP
// bc_type := b_oil_power ; 32 :
20978: LD_ADDR_OWVAR 42
20982: PUSH
20983: LD_INT 26
20985: ST_TO_ADDR
20986: GO 21046
20988: LD_INT 32
20990: DOUBLE
20991: EQUAL
20992: IFTRUE 20996
20994: GO 21007
20996: POP
// bc_type := b_siberite_power ; 33 :
20997: LD_ADDR_OWVAR 42
21001: PUSH
21002: LD_INT 28
21004: ST_TO_ADDR
21005: GO 21046
21007: LD_INT 33
21009: DOUBLE
21010: EQUAL
21011: IFTRUE 21015
21013: GO 21026
21015: POP
// bc_type := b_oil_mine ; 34 :
21016: LD_ADDR_OWVAR 42
21020: PUSH
21021: LD_INT 29
21023: ST_TO_ADDR
21024: GO 21046
21026: LD_INT 34
21028: DOUBLE
21029: EQUAL
21030: IFTRUE 21034
21032: GO 21045
21034: POP
// bc_type := b_siberite_mine ; end ;
21035: LD_ADDR_OWVAR 42
21039: PUSH
21040: LD_INT 30
21042: ST_TO_ADDR
21043: GO 21046
21045: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
21046: LD_ADDR_VAR 0 8
21050: PUSH
21051: LD_VAR 0 5
21055: PPUSH
21056: LD_VAR 0 6
21060: PPUSH
21061: LD_VAR 0 3
21065: PPUSH
21066: CALL_OW 47
21070: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
21071: LD_OWVAR 42
21075: PUSH
21076: LD_INT 32
21078: PUSH
21079: LD_INT 33
21081: PUSH
21082: EMPTY
21083: LIST
21084: LIST
21085: IN
21086: IFFALSE 21102
// PlaceWeaponTurret ( b , weapon ) ;
21088: LD_VAR 0 8
21092: PPUSH
21093: LD_VAR 0 4
21097: PPUSH
21098: CALL_OW 431
// end ;
21102: LD_VAR 0 7
21106: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
21107: LD_INT 0
21109: PPUSH
21110: PPUSH
21111: PPUSH
21112: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21113: LD_ADDR_VAR 0 4
21117: PUSH
21118: LD_INT 22
21120: PUSH
21121: LD_OWVAR 2
21125: PUSH
21126: EMPTY
21127: LIST
21128: LIST
21129: PUSH
21130: LD_INT 2
21132: PUSH
21133: LD_INT 30
21135: PUSH
21136: LD_INT 0
21138: PUSH
21139: EMPTY
21140: LIST
21141: LIST
21142: PUSH
21143: LD_INT 30
21145: PUSH
21146: LD_INT 1
21148: PUSH
21149: EMPTY
21150: LIST
21151: LIST
21152: PUSH
21153: EMPTY
21154: LIST
21155: LIST
21156: LIST
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: PPUSH
21162: CALL_OW 69
21166: ST_TO_ADDR
// if not tmp then
21167: LD_VAR 0 4
21171: NOT
21172: IFFALSE 21176
// exit ;
21174: GO 21235
// for i in tmp do
21176: LD_ADDR_VAR 0 2
21180: PUSH
21181: LD_VAR 0 4
21185: PUSH
21186: FOR_IN
21187: IFFALSE 21233
// for j = 1 to 3 do
21189: LD_ADDR_VAR 0 3
21193: PUSH
21194: DOUBLE
21195: LD_INT 1
21197: DEC
21198: ST_TO_ADDR
21199: LD_INT 3
21201: PUSH
21202: FOR_TO
21203: IFFALSE 21229
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
21205: LD_VAR 0 2
21209: PPUSH
21210: CALL_OW 274
21214: PPUSH
21215: LD_VAR 0 3
21219: PPUSH
21220: LD_INT 99999
21222: PPUSH
21223: CALL_OW 277
21227: GO 21202
21229: POP
21230: POP
21231: GO 21186
21233: POP
21234: POP
// end ;
21235: LD_VAR 0 1
21239: RET
// export function hHackSetLevel10 ; var i , j ; begin
21240: LD_INT 0
21242: PPUSH
21243: PPUSH
21244: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21245: LD_ADDR_VAR 0 2
21249: PUSH
21250: LD_INT 21
21252: PUSH
21253: LD_INT 1
21255: PUSH
21256: EMPTY
21257: LIST
21258: LIST
21259: PPUSH
21260: CALL_OW 69
21264: PUSH
21265: FOR_IN
21266: IFFALSE 21318
// if IsSelected ( i ) then
21268: LD_VAR 0 2
21272: PPUSH
21273: CALL_OW 306
21277: IFFALSE 21316
// begin for j := 1 to 4 do
21279: LD_ADDR_VAR 0 3
21283: PUSH
21284: DOUBLE
21285: LD_INT 1
21287: DEC
21288: ST_TO_ADDR
21289: LD_INT 4
21291: PUSH
21292: FOR_TO
21293: IFFALSE 21314
// SetSkill ( i , j , 10 ) ;
21295: LD_VAR 0 2
21299: PPUSH
21300: LD_VAR 0 3
21304: PPUSH
21305: LD_INT 10
21307: PPUSH
21308: CALL_OW 237
21312: GO 21292
21314: POP
21315: POP
// end ;
21316: GO 21265
21318: POP
21319: POP
// end ;
21320: LD_VAR 0 1
21324: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
21325: LD_INT 0
21327: PPUSH
21328: PPUSH
21329: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21330: LD_ADDR_VAR 0 2
21334: PUSH
21335: LD_INT 22
21337: PUSH
21338: LD_OWVAR 2
21342: PUSH
21343: EMPTY
21344: LIST
21345: LIST
21346: PUSH
21347: LD_INT 21
21349: PUSH
21350: LD_INT 1
21352: PUSH
21353: EMPTY
21354: LIST
21355: LIST
21356: PUSH
21357: EMPTY
21358: LIST
21359: LIST
21360: PPUSH
21361: CALL_OW 69
21365: PUSH
21366: FOR_IN
21367: IFFALSE 21408
// begin for j := 1 to 4 do
21369: LD_ADDR_VAR 0 3
21373: PUSH
21374: DOUBLE
21375: LD_INT 1
21377: DEC
21378: ST_TO_ADDR
21379: LD_INT 4
21381: PUSH
21382: FOR_TO
21383: IFFALSE 21404
// SetSkill ( i , j , 10 ) ;
21385: LD_VAR 0 2
21389: PPUSH
21390: LD_VAR 0 3
21394: PPUSH
21395: LD_INT 10
21397: PPUSH
21398: CALL_OW 237
21402: GO 21382
21404: POP
21405: POP
// end ;
21406: GO 21366
21408: POP
21409: POP
// end ;
21410: LD_VAR 0 1
21414: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
21415: LD_INT 0
21417: PPUSH
// uc_side := your_side ;
21418: LD_ADDR_OWVAR 20
21422: PUSH
21423: LD_OWVAR 2
21427: ST_TO_ADDR
// uc_nation := nation ;
21428: LD_ADDR_OWVAR 21
21432: PUSH
21433: LD_VAR 0 1
21437: ST_TO_ADDR
// InitHc ;
21438: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21442: LD_INT 0
21444: PPUSH
21445: LD_VAR 0 2
21449: PPUSH
21450: LD_VAR 0 3
21454: PPUSH
21455: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
21459: LD_VAR 0 4
21463: PPUSH
21464: LD_VAR 0 5
21468: PPUSH
21469: CALL_OW 428
21473: PUSH
21474: LD_INT 0
21476: EQUAL
21477: IFFALSE 21501
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
21479: CALL_OW 44
21483: PPUSH
21484: LD_VAR 0 4
21488: PPUSH
21489: LD_VAR 0 5
21493: PPUSH
21494: LD_INT 1
21496: PPUSH
21497: CALL_OW 48
// end ;
21501: LD_VAR 0 6
21505: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
21506: LD_INT 0
21508: PPUSH
21509: PPUSH
// uc_side := your_side ;
21510: LD_ADDR_OWVAR 20
21514: PUSH
21515: LD_OWVAR 2
21519: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
21520: LD_VAR 0 1
21524: PUSH
21525: LD_INT 1
21527: PUSH
21528: LD_INT 2
21530: PUSH
21531: LD_INT 3
21533: PUSH
21534: LD_INT 4
21536: PUSH
21537: LD_INT 5
21539: PUSH
21540: EMPTY
21541: LIST
21542: LIST
21543: LIST
21544: LIST
21545: LIST
21546: IN
21547: IFFALSE 21559
// uc_nation := nation_american else
21549: LD_ADDR_OWVAR 21
21553: PUSH
21554: LD_INT 1
21556: ST_TO_ADDR
21557: GO 21602
// if chassis in [ 11 , 12 , 13 , 14 ] then
21559: LD_VAR 0 1
21563: PUSH
21564: LD_INT 11
21566: PUSH
21567: LD_INT 12
21569: PUSH
21570: LD_INT 13
21572: PUSH
21573: LD_INT 14
21575: PUSH
21576: EMPTY
21577: LIST
21578: LIST
21579: LIST
21580: LIST
21581: IN
21582: IFFALSE 21594
// uc_nation := nation_arabian else
21584: LD_ADDR_OWVAR 21
21588: PUSH
21589: LD_INT 2
21591: ST_TO_ADDR
21592: GO 21602
// uc_nation := nation_russian ;
21594: LD_ADDR_OWVAR 21
21598: PUSH
21599: LD_INT 3
21601: ST_TO_ADDR
// vc_chassis := chassis ;
21602: LD_ADDR_OWVAR 37
21606: PUSH
21607: LD_VAR 0 1
21611: ST_TO_ADDR
// vc_engine := engine ;
21612: LD_ADDR_OWVAR 39
21616: PUSH
21617: LD_VAR 0 2
21621: ST_TO_ADDR
// vc_control := control ;
21622: LD_ADDR_OWVAR 38
21626: PUSH
21627: LD_VAR 0 3
21631: ST_TO_ADDR
// vc_weapon := weapon ;
21632: LD_ADDR_OWVAR 40
21636: PUSH
21637: LD_VAR 0 4
21641: ST_TO_ADDR
// un := CreateVehicle ;
21642: LD_ADDR_VAR 0 8
21646: PUSH
21647: CALL_OW 45
21651: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21652: LD_VAR 0 8
21656: PPUSH
21657: LD_INT 0
21659: PPUSH
21660: LD_INT 5
21662: PPUSH
21663: CALL_OW 12
21667: PPUSH
21668: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21672: LD_VAR 0 8
21676: PPUSH
21677: LD_VAR 0 5
21681: PPUSH
21682: LD_VAR 0 6
21686: PPUSH
21687: LD_INT 1
21689: PPUSH
21690: CALL_OW 48
// end ;
21694: LD_VAR 0 7
21698: RET
// export hInvincible ; every 1 do
21699: GO 21701
21701: DISABLE
// hInvincible := [ ] ;
21702: LD_ADDR_EXP 80
21706: PUSH
21707: EMPTY
21708: ST_TO_ADDR
21709: END
// every 10 do var i ;
21710: GO 21712
21712: DISABLE
21713: LD_INT 0
21715: PPUSH
// begin enable ;
21716: ENABLE
// if not hInvincible then
21717: LD_EXP 80
21721: NOT
21722: IFFALSE 21726
// exit ;
21724: GO 21770
// for i in hInvincible do
21726: LD_ADDR_VAR 0 1
21730: PUSH
21731: LD_EXP 80
21735: PUSH
21736: FOR_IN
21737: IFFALSE 21768
// if GetLives ( i ) < 1000 then
21739: LD_VAR 0 1
21743: PPUSH
21744: CALL_OW 256
21748: PUSH
21749: LD_INT 1000
21751: LESS
21752: IFFALSE 21766
// SetLives ( i , 1000 ) ;
21754: LD_VAR 0 1
21758: PPUSH
21759: LD_INT 1000
21761: PPUSH
21762: CALL_OW 234
21766: GO 21736
21768: POP
21769: POP
// end ;
21770: PPOPN 1
21772: END
// export function hHackInvincible ; var i ; begin
21773: LD_INT 0
21775: PPUSH
21776: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21777: LD_ADDR_VAR 0 2
21781: PUSH
21782: LD_INT 2
21784: PUSH
21785: LD_INT 21
21787: PUSH
21788: LD_INT 1
21790: PUSH
21791: EMPTY
21792: LIST
21793: LIST
21794: PUSH
21795: LD_INT 21
21797: PUSH
21798: LD_INT 2
21800: PUSH
21801: EMPTY
21802: LIST
21803: LIST
21804: PUSH
21805: EMPTY
21806: LIST
21807: LIST
21808: LIST
21809: PPUSH
21810: CALL_OW 69
21814: PUSH
21815: FOR_IN
21816: IFFALSE 21877
// if IsSelected ( i ) then
21818: LD_VAR 0 2
21822: PPUSH
21823: CALL_OW 306
21827: IFFALSE 21875
// begin if i in hInvincible then
21829: LD_VAR 0 2
21833: PUSH
21834: LD_EXP 80
21838: IN
21839: IFFALSE 21859
// hInvincible := hInvincible diff i else
21841: LD_ADDR_EXP 80
21845: PUSH
21846: LD_EXP 80
21850: PUSH
21851: LD_VAR 0 2
21855: DIFF
21856: ST_TO_ADDR
21857: GO 21875
// hInvincible := hInvincible union i ;
21859: LD_ADDR_EXP 80
21863: PUSH
21864: LD_EXP 80
21868: PUSH
21869: LD_VAR 0 2
21873: UNION
21874: ST_TO_ADDR
// end ;
21875: GO 21815
21877: POP
21878: POP
// end ;
21879: LD_VAR 0 1
21883: RET
// export function hHackInvisible ; var i , j ; begin
21884: LD_INT 0
21886: PPUSH
21887: PPUSH
21888: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21889: LD_ADDR_VAR 0 2
21893: PUSH
21894: LD_INT 21
21896: PUSH
21897: LD_INT 1
21899: PUSH
21900: EMPTY
21901: LIST
21902: LIST
21903: PPUSH
21904: CALL_OW 69
21908: PUSH
21909: FOR_IN
21910: IFFALSE 21934
// if IsSelected ( i ) then
21912: LD_VAR 0 2
21916: PPUSH
21917: CALL_OW 306
21921: IFFALSE 21932
// ComForceInvisible ( i ) ;
21923: LD_VAR 0 2
21927: PPUSH
21928: CALL_OW 496
21932: GO 21909
21934: POP
21935: POP
// end ;
21936: LD_VAR 0 1
21940: RET
// export function hHackChangeYourSide ; begin
21941: LD_INT 0
21943: PPUSH
// if your_side = 8 then
21944: LD_OWVAR 2
21948: PUSH
21949: LD_INT 8
21951: EQUAL
21952: IFFALSE 21964
// your_side := 0 else
21954: LD_ADDR_OWVAR 2
21958: PUSH
21959: LD_INT 0
21961: ST_TO_ADDR
21962: GO 21978
// your_side := your_side + 1 ;
21964: LD_ADDR_OWVAR 2
21968: PUSH
21969: LD_OWVAR 2
21973: PUSH
21974: LD_INT 1
21976: PLUS
21977: ST_TO_ADDR
// end ;
21978: LD_VAR 0 1
21982: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21983: LD_INT 0
21985: PPUSH
21986: PPUSH
21987: PPUSH
// for i in all_units do
21988: LD_ADDR_VAR 0 2
21992: PUSH
21993: LD_OWVAR 3
21997: PUSH
21998: FOR_IN
21999: IFFALSE 22077
// if IsSelected ( i ) then
22001: LD_VAR 0 2
22005: PPUSH
22006: CALL_OW 306
22010: IFFALSE 22075
// begin j := GetSide ( i ) ;
22012: LD_ADDR_VAR 0 3
22016: PUSH
22017: LD_VAR 0 2
22021: PPUSH
22022: CALL_OW 255
22026: ST_TO_ADDR
// if j = 8 then
22027: LD_VAR 0 3
22031: PUSH
22032: LD_INT 8
22034: EQUAL
22035: IFFALSE 22047
// j := 0 else
22037: LD_ADDR_VAR 0 3
22041: PUSH
22042: LD_INT 0
22044: ST_TO_ADDR
22045: GO 22061
// j := j + 1 ;
22047: LD_ADDR_VAR 0 3
22051: PUSH
22052: LD_VAR 0 3
22056: PUSH
22057: LD_INT 1
22059: PLUS
22060: ST_TO_ADDR
// SetSide ( i , j ) ;
22061: LD_VAR 0 2
22065: PPUSH
22066: LD_VAR 0 3
22070: PPUSH
22071: CALL_OW 235
// end ;
22075: GO 21998
22077: POP
22078: POP
// end ;
22079: LD_VAR 0 1
22083: RET
// export function hHackFog ; begin
22084: LD_INT 0
22086: PPUSH
// FogOff ( true ) ;
22087: LD_INT 1
22089: PPUSH
22090: CALL_OW 344
// end ;
22094: LD_VAR 0 1
22098: RET
// export function hHackTeleport ( unit , x , y ) ; begin
22099: LD_INT 0
22101: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
22102: LD_VAR 0 1
22106: PPUSH
22107: LD_VAR 0 2
22111: PPUSH
22112: LD_VAR 0 3
22116: PPUSH
22117: LD_INT 1
22119: PPUSH
22120: LD_INT 1
22122: PPUSH
22123: CALL_OW 483
// CenterOnXY ( x , y ) ;
22127: LD_VAR 0 2
22131: PPUSH
22132: LD_VAR 0 3
22136: PPUSH
22137: CALL_OW 84
// end ;
22141: LD_VAR 0 4
22145: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
22146: LD_INT 0
22148: PPUSH
22149: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
22150: LD_VAR 0 1
22154: NOT
22155: PUSH
22156: LD_VAR 0 2
22160: PPUSH
22161: LD_VAR 0 3
22165: PPUSH
22166: CALL_OW 488
22170: NOT
22171: OR
22172: PUSH
22173: LD_VAR 0 1
22177: PPUSH
22178: CALL_OW 266
22182: PUSH
22183: LD_INT 3
22185: NONEQUAL
22186: PUSH
22187: LD_VAR 0 1
22191: PPUSH
22192: CALL_OW 247
22196: PUSH
22197: LD_INT 1
22199: EQUAL
22200: NOT
22201: AND
22202: OR
22203: IFFALSE 22207
// exit ;
22205: GO 22356
// if GetType ( factory ) = unit_human then
22207: LD_VAR 0 1
22211: PPUSH
22212: CALL_OW 247
22216: PUSH
22217: LD_INT 1
22219: EQUAL
22220: IFFALSE 22237
// factory := IsInUnit ( factory ) ;
22222: LD_ADDR_VAR 0 1
22226: PUSH
22227: LD_VAR 0 1
22231: PPUSH
22232: CALL_OW 310
22236: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
22237: LD_VAR 0 1
22241: PPUSH
22242: CALL_OW 266
22246: PUSH
22247: LD_INT 3
22249: NONEQUAL
22250: IFFALSE 22254
// exit ;
22252: GO 22356
// if HexInfo ( x , y ) = factory then
22254: LD_VAR 0 2
22258: PPUSH
22259: LD_VAR 0 3
22263: PPUSH
22264: CALL_OW 428
22268: PUSH
22269: LD_VAR 0 1
22273: EQUAL
22274: IFFALSE 22301
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
22276: LD_ADDR_EXP 81
22280: PUSH
22281: LD_EXP 81
22285: PPUSH
22286: LD_VAR 0 1
22290: PPUSH
22291: LD_INT 0
22293: PPUSH
22294: CALL_OW 1
22298: ST_TO_ADDR
22299: GO 22352
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
22301: LD_ADDR_EXP 81
22305: PUSH
22306: LD_EXP 81
22310: PPUSH
22311: LD_VAR 0 1
22315: PPUSH
22316: LD_VAR 0 1
22320: PPUSH
22321: CALL_OW 255
22325: PUSH
22326: LD_VAR 0 1
22330: PUSH
22331: LD_VAR 0 2
22335: PUSH
22336: LD_VAR 0 3
22340: PUSH
22341: EMPTY
22342: LIST
22343: LIST
22344: LIST
22345: LIST
22346: PPUSH
22347: CALL_OW 1
22351: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22352: CALL 22361 0 0
// end ;
22356: LD_VAR 0 4
22360: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
22361: LD_INT 0
22363: PPUSH
22364: PPUSH
22365: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
22366: LD_STRING resetFactoryWaypoint();
22368: PPUSH
22369: CALL_OW 559
// if factoryWaypoints then
22373: LD_EXP 81
22377: IFFALSE 22503
// begin list := PrepareArray ( factoryWaypoints ) ;
22379: LD_ADDR_VAR 0 3
22383: PUSH
22384: LD_EXP 81
22388: PPUSH
22389: CALL 64683 0 1
22393: ST_TO_ADDR
// for i := 1 to list do
22394: LD_ADDR_VAR 0 2
22398: PUSH
22399: DOUBLE
22400: LD_INT 1
22402: DEC
22403: ST_TO_ADDR
22404: LD_VAR 0 3
22408: PUSH
22409: FOR_TO
22410: IFFALSE 22501
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22412: LD_STRING setFactoryWaypointXY(
22414: PUSH
22415: LD_VAR 0 3
22419: PUSH
22420: LD_VAR 0 2
22424: ARRAY
22425: PUSH
22426: LD_INT 1
22428: ARRAY
22429: STR
22430: PUSH
22431: LD_STRING ,
22433: STR
22434: PUSH
22435: LD_VAR 0 3
22439: PUSH
22440: LD_VAR 0 2
22444: ARRAY
22445: PUSH
22446: LD_INT 2
22448: ARRAY
22449: STR
22450: PUSH
22451: LD_STRING ,
22453: STR
22454: PUSH
22455: LD_VAR 0 3
22459: PUSH
22460: LD_VAR 0 2
22464: ARRAY
22465: PUSH
22466: LD_INT 3
22468: ARRAY
22469: STR
22470: PUSH
22471: LD_STRING ,
22473: STR
22474: PUSH
22475: LD_VAR 0 3
22479: PUSH
22480: LD_VAR 0 2
22484: ARRAY
22485: PUSH
22486: LD_INT 4
22488: ARRAY
22489: STR
22490: PUSH
22491: LD_STRING )
22493: STR
22494: PPUSH
22495: CALL_OW 559
22499: GO 22409
22501: POP
22502: POP
// end ; end ;
22503: LD_VAR 0 1
22507: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
22508: LD_INT 0
22510: PPUSH
// if HexInfo ( x , y ) = warehouse then
22511: LD_VAR 0 2
22515: PPUSH
22516: LD_VAR 0 3
22520: PPUSH
22521: CALL_OW 428
22525: PUSH
22526: LD_VAR 0 1
22530: EQUAL
22531: IFFALSE 22558
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
22533: LD_ADDR_EXP 82
22537: PUSH
22538: LD_EXP 82
22542: PPUSH
22543: LD_VAR 0 1
22547: PPUSH
22548: LD_INT 0
22550: PPUSH
22551: CALL_OW 1
22555: ST_TO_ADDR
22556: GO 22609
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
22558: LD_ADDR_EXP 82
22562: PUSH
22563: LD_EXP 82
22567: PPUSH
22568: LD_VAR 0 1
22572: PPUSH
22573: LD_VAR 0 1
22577: PPUSH
22578: CALL_OW 255
22582: PUSH
22583: LD_VAR 0 1
22587: PUSH
22588: LD_VAR 0 2
22592: PUSH
22593: LD_VAR 0 3
22597: PUSH
22598: EMPTY
22599: LIST
22600: LIST
22601: LIST
22602: LIST
22603: PPUSH
22604: CALL_OW 1
22608: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
22609: CALL 22618 0 0
// end ;
22613: LD_VAR 0 4
22617: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
22618: LD_INT 0
22620: PPUSH
22621: PPUSH
22622: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
22623: LD_STRING resetWarehouseGatheringPoints();
22625: PPUSH
22626: CALL_OW 559
// if warehouseGatheringPoints then
22630: LD_EXP 82
22634: IFFALSE 22760
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
22636: LD_ADDR_VAR 0 3
22640: PUSH
22641: LD_EXP 82
22645: PPUSH
22646: CALL 64683 0 1
22650: ST_TO_ADDR
// for i := 1 to list do
22651: LD_ADDR_VAR 0 2
22655: PUSH
22656: DOUBLE
22657: LD_INT 1
22659: DEC
22660: ST_TO_ADDR
22661: LD_VAR 0 3
22665: PUSH
22666: FOR_TO
22667: IFFALSE 22758
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22669: LD_STRING setWarehouseGatheringPointXY(
22671: PUSH
22672: LD_VAR 0 3
22676: PUSH
22677: LD_VAR 0 2
22681: ARRAY
22682: PUSH
22683: LD_INT 1
22685: ARRAY
22686: STR
22687: PUSH
22688: LD_STRING ,
22690: STR
22691: PUSH
22692: LD_VAR 0 3
22696: PUSH
22697: LD_VAR 0 2
22701: ARRAY
22702: PUSH
22703: LD_INT 2
22705: ARRAY
22706: STR
22707: PUSH
22708: LD_STRING ,
22710: STR
22711: PUSH
22712: LD_VAR 0 3
22716: PUSH
22717: LD_VAR 0 2
22721: ARRAY
22722: PUSH
22723: LD_INT 3
22725: ARRAY
22726: STR
22727: PUSH
22728: LD_STRING ,
22730: STR
22731: PUSH
22732: LD_VAR 0 3
22736: PUSH
22737: LD_VAR 0 2
22741: ARRAY
22742: PUSH
22743: LD_INT 4
22745: ARRAY
22746: STR
22747: PUSH
22748: LD_STRING )
22750: STR
22751: PPUSH
22752: CALL_OW 559
22756: GO 22666
22758: POP
22759: POP
// end ; end ;
22760: LD_VAR 0 1
22764: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
22765: LD_EXP 82
22769: IFFALSE 23454
22771: GO 22773
22773: DISABLE
22774: LD_INT 0
22776: PPUSH
22777: PPUSH
22778: PPUSH
22779: PPUSH
22780: PPUSH
22781: PPUSH
22782: PPUSH
22783: PPUSH
22784: PPUSH
// begin enable ;
22785: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
22786: LD_ADDR_VAR 0 3
22790: PUSH
22791: LD_EXP 82
22795: PPUSH
22796: CALL 64683 0 1
22800: ST_TO_ADDR
// if not list then
22801: LD_VAR 0 3
22805: NOT
22806: IFFALSE 22810
// exit ;
22808: GO 23454
// for i := 1 to list do
22810: LD_ADDR_VAR 0 1
22814: PUSH
22815: DOUBLE
22816: LD_INT 1
22818: DEC
22819: ST_TO_ADDR
22820: LD_VAR 0 3
22824: PUSH
22825: FOR_TO
22826: IFFALSE 23452
// begin depot := list [ i ] [ 2 ] ;
22828: LD_ADDR_VAR 0 8
22832: PUSH
22833: LD_VAR 0 3
22837: PUSH
22838: LD_VAR 0 1
22842: ARRAY
22843: PUSH
22844: LD_INT 2
22846: ARRAY
22847: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
22848: LD_ADDR_VAR 0 5
22852: PUSH
22853: LD_VAR 0 3
22857: PUSH
22858: LD_VAR 0 1
22862: ARRAY
22863: PUSH
22864: LD_INT 1
22866: ARRAY
22867: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
22868: LD_VAR 0 8
22872: PPUSH
22873: CALL_OW 301
22877: PUSH
22878: LD_VAR 0 5
22882: PUSH
22883: LD_VAR 0 8
22887: PPUSH
22888: CALL_OW 255
22892: NONEQUAL
22893: OR
22894: IFFALSE 22923
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
22896: LD_ADDR_EXP 82
22900: PUSH
22901: LD_EXP 82
22905: PPUSH
22906: LD_VAR 0 8
22910: PPUSH
22911: LD_INT 0
22913: PPUSH
22914: CALL_OW 1
22918: ST_TO_ADDR
// exit ;
22919: POP
22920: POP
22921: GO 23454
// end ; x := list [ i ] [ 3 ] ;
22923: LD_ADDR_VAR 0 6
22927: PUSH
22928: LD_VAR 0 3
22932: PUSH
22933: LD_VAR 0 1
22937: ARRAY
22938: PUSH
22939: LD_INT 3
22941: ARRAY
22942: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
22943: LD_ADDR_VAR 0 7
22947: PUSH
22948: LD_VAR 0 3
22952: PUSH
22953: LD_VAR 0 1
22957: ARRAY
22958: PUSH
22959: LD_INT 4
22961: ARRAY
22962: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
22963: LD_ADDR_VAR 0 9
22967: PUSH
22968: LD_VAR 0 6
22972: PPUSH
22973: LD_VAR 0 7
22977: PPUSH
22978: LD_INT 16
22980: PPUSH
22981: CALL 63271 0 3
22985: ST_TO_ADDR
// if not cratesNearbyPoint then
22986: LD_VAR 0 9
22990: NOT
22991: IFFALSE 22997
// exit ;
22993: POP
22994: POP
22995: GO 23454
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
22997: LD_ADDR_VAR 0 4
23001: PUSH
23002: LD_INT 22
23004: PUSH
23005: LD_VAR 0 5
23009: PUSH
23010: EMPTY
23011: LIST
23012: LIST
23013: PUSH
23014: LD_INT 3
23016: PUSH
23017: LD_INT 60
23019: PUSH
23020: EMPTY
23021: LIST
23022: PUSH
23023: EMPTY
23024: LIST
23025: LIST
23026: PUSH
23027: LD_INT 91
23029: PUSH
23030: LD_VAR 0 8
23034: PUSH
23035: LD_INT 6
23037: PUSH
23038: EMPTY
23039: LIST
23040: LIST
23041: LIST
23042: PUSH
23043: LD_INT 2
23045: PUSH
23046: LD_INT 25
23048: PUSH
23049: LD_INT 2
23051: PUSH
23052: EMPTY
23053: LIST
23054: LIST
23055: PUSH
23056: LD_INT 25
23058: PUSH
23059: LD_INT 16
23061: PUSH
23062: EMPTY
23063: LIST
23064: LIST
23065: PUSH
23066: EMPTY
23067: LIST
23068: LIST
23069: LIST
23070: PUSH
23071: EMPTY
23072: LIST
23073: LIST
23074: LIST
23075: LIST
23076: PPUSH
23077: CALL_OW 69
23081: PUSH
23082: LD_VAR 0 8
23086: PPUSH
23087: CALL_OW 313
23091: PPUSH
23092: LD_INT 3
23094: PUSH
23095: LD_INT 60
23097: PUSH
23098: EMPTY
23099: LIST
23100: PUSH
23101: EMPTY
23102: LIST
23103: LIST
23104: PUSH
23105: LD_INT 2
23107: PUSH
23108: LD_INT 25
23110: PUSH
23111: LD_INT 2
23113: PUSH
23114: EMPTY
23115: LIST
23116: LIST
23117: PUSH
23118: LD_INT 25
23120: PUSH
23121: LD_INT 16
23123: PUSH
23124: EMPTY
23125: LIST
23126: LIST
23127: PUSH
23128: EMPTY
23129: LIST
23130: LIST
23131: LIST
23132: PUSH
23133: EMPTY
23134: LIST
23135: LIST
23136: PPUSH
23137: CALL_OW 72
23141: UNION
23142: ST_TO_ADDR
// if tmp then
23143: LD_VAR 0 4
23147: IFFALSE 23227
// begin tmp := ShrinkArray ( tmp , 3 ) ;
23149: LD_ADDR_VAR 0 4
23153: PUSH
23154: LD_VAR 0 4
23158: PPUSH
23159: LD_INT 3
23161: PPUSH
23162: CALL 61240 0 2
23166: ST_TO_ADDR
// for j in tmp do
23167: LD_ADDR_VAR 0 2
23171: PUSH
23172: LD_VAR 0 4
23176: PUSH
23177: FOR_IN
23178: IFFALSE 23221
// begin if IsInUnit ( j ) then
23180: LD_VAR 0 2
23184: PPUSH
23185: CALL_OW 310
23189: IFFALSE 23200
// ComExit ( j ) ;
23191: LD_VAR 0 2
23195: PPUSH
23196: CALL 61323 0 1
// AddComCollect ( j , x , y ) ;
23200: LD_VAR 0 2
23204: PPUSH
23205: LD_VAR 0 6
23209: PPUSH
23210: LD_VAR 0 7
23214: PPUSH
23215: CALL_OW 177
// end ;
23219: GO 23177
23221: POP
23222: POP
// exit ;
23223: POP
23224: POP
23225: GO 23454
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
23227: LD_ADDR_VAR 0 4
23231: PUSH
23232: LD_INT 22
23234: PUSH
23235: LD_VAR 0 5
23239: PUSH
23240: EMPTY
23241: LIST
23242: LIST
23243: PUSH
23244: LD_INT 91
23246: PUSH
23247: LD_VAR 0 8
23251: PUSH
23252: LD_INT 8
23254: PUSH
23255: EMPTY
23256: LIST
23257: LIST
23258: LIST
23259: PUSH
23260: LD_INT 2
23262: PUSH
23263: LD_INT 34
23265: PUSH
23266: LD_INT 12
23268: PUSH
23269: EMPTY
23270: LIST
23271: LIST
23272: PUSH
23273: LD_INT 34
23275: PUSH
23276: LD_INT 51
23278: PUSH
23279: EMPTY
23280: LIST
23281: LIST
23282: PUSH
23283: LD_INT 34
23285: PUSH
23286: LD_INT 32
23288: PUSH
23289: EMPTY
23290: LIST
23291: LIST
23292: PUSH
23293: LD_INT 34
23295: PUSH
23296: LD_INT 89
23298: PUSH
23299: EMPTY
23300: LIST
23301: LIST
23302: PUSH
23303: EMPTY
23304: LIST
23305: LIST
23306: LIST
23307: LIST
23308: LIST
23309: PUSH
23310: EMPTY
23311: LIST
23312: LIST
23313: LIST
23314: PPUSH
23315: CALL_OW 69
23319: ST_TO_ADDR
// if tmp then
23320: LD_VAR 0 4
23324: IFFALSE 23450
// begin for j in tmp do
23326: LD_ADDR_VAR 0 2
23330: PUSH
23331: LD_VAR 0 4
23335: PUSH
23336: FOR_IN
23337: IFFALSE 23448
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
23339: LD_VAR 0 2
23343: PPUSH
23344: CALL_OW 262
23348: PUSH
23349: LD_INT 3
23351: EQUAL
23352: PUSH
23353: LD_VAR 0 2
23357: PPUSH
23358: CALL_OW 261
23362: PUSH
23363: LD_INT 20
23365: GREATER
23366: OR
23367: PUSH
23368: LD_VAR 0 2
23372: PPUSH
23373: CALL_OW 314
23377: NOT
23378: AND
23379: PUSH
23380: LD_VAR 0 2
23384: PPUSH
23385: CALL_OW 263
23389: PUSH
23390: LD_INT 1
23392: NONEQUAL
23393: PUSH
23394: LD_VAR 0 2
23398: PPUSH
23399: CALL_OW 311
23403: OR
23404: AND
23405: IFFALSE 23446
// begin ComCollect ( j , x , y ) ;
23407: LD_VAR 0 2
23411: PPUSH
23412: LD_VAR 0 6
23416: PPUSH
23417: LD_VAR 0 7
23421: PPUSH
23422: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
23426: LD_VAR 0 2
23430: PPUSH
23431: LD_VAR 0 8
23435: PPUSH
23436: CALL_OW 172
// exit ;
23440: POP
23441: POP
23442: POP
23443: POP
23444: GO 23454
// end ;
23446: GO 23336
23448: POP
23449: POP
// end ; end ;
23450: GO 22825
23452: POP
23453: POP
// end ; end_of_file end_of_file
23454: PPOPN 9
23456: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
23457: LD_INT 0
23459: PPUSH
23460: PPUSH
// if exist_mode then
23461: LD_VAR 0 2
23465: IFFALSE 23490
// unit := CreateCharacter ( prefix & ident ) else
23467: LD_ADDR_VAR 0 5
23471: PUSH
23472: LD_VAR 0 3
23476: PUSH
23477: LD_VAR 0 1
23481: STR
23482: PPUSH
23483: CALL_OW 34
23487: ST_TO_ADDR
23488: GO 23505
// unit := NewCharacter ( ident ) ;
23490: LD_ADDR_VAR 0 5
23494: PUSH
23495: LD_VAR 0 1
23499: PPUSH
23500: CALL_OW 25
23504: ST_TO_ADDR
// result := unit ;
23505: LD_ADDR_VAR 0 4
23509: PUSH
23510: LD_VAR 0 5
23514: ST_TO_ADDR
// end ;
23515: LD_VAR 0 4
23519: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
23520: LD_INT 0
23522: PPUSH
23523: PPUSH
// if not side or not nation then
23524: LD_VAR 0 1
23528: NOT
23529: PUSH
23530: LD_VAR 0 2
23534: NOT
23535: OR
23536: IFFALSE 23540
// exit ;
23538: GO 24308
// case nation of nation_american :
23540: LD_VAR 0 2
23544: PUSH
23545: LD_INT 1
23547: DOUBLE
23548: EQUAL
23549: IFTRUE 23553
23551: GO 23767
23553: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
23554: LD_ADDR_VAR 0 4
23558: PUSH
23559: LD_INT 35
23561: PUSH
23562: LD_INT 45
23564: PUSH
23565: LD_INT 46
23567: PUSH
23568: LD_INT 47
23570: PUSH
23571: LD_INT 82
23573: PUSH
23574: LD_INT 83
23576: PUSH
23577: LD_INT 84
23579: PUSH
23580: LD_INT 85
23582: PUSH
23583: LD_INT 86
23585: PUSH
23586: LD_INT 1
23588: PUSH
23589: LD_INT 2
23591: PUSH
23592: LD_INT 6
23594: PUSH
23595: LD_INT 15
23597: PUSH
23598: LD_INT 16
23600: PUSH
23601: LD_INT 7
23603: PUSH
23604: LD_INT 12
23606: PUSH
23607: LD_INT 13
23609: PUSH
23610: LD_INT 10
23612: PUSH
23613: LD_INT 14
23615: PUSH
23616: LD_INT 20
23618: PUSH
23619: LD_INT 21
23621: PUSH
23622: LD_INT 22
23624: PUSH
23625: LD_INT 25
23627: PUSH
23628: LD_INT 32
23630: PUSH
23631: LD_INT 27
23633: PUSH
23634: LD_INT 36
23636: PUSH
23637: LD_INT 69
23639: PUSH
23640: LD_INT 39
23642: PUSH
23643: LD_INT 34
23645: PUSH
23646: LD_INT 40
23648: PUSH
23649: LD_INT 48
23651: PUSH
23652: LD_INT 49
23654: PUSH
23655: LD_INT 50
23657: PUSH
23658: LD_INT 51
23660: PUSH
23661: LD_INT 52
23663: PUSH
23664: LD_INT 53
23666: PUSH
23667: LD_INT 54
23669: PUSH
23670: LD_INT 55
23672: PUSH
23673: LD_INT 56
23675: PUSH
23676: LD_INT 57
23678: PUSH
23679: LD_INT 58
23681: PUSH
23682: LD_INT 59
23684: PUSH
23685: LD_INT 60
23687: PUSH
23688: LD_INT 61
23690: PUSH
23691: LD_INT 62
23693: PUSH
23694: LD_INT 80
23696: PUSH
23697: LD_INT 82
23699: PUSH
23700: LD_INT 83
23702: PUSH
23703: LD_INT 84
23705: PUSH
23706: LD_INT 85
23708: PUSH
23709: LD_INT 86
23711: PUSH
23712: EMPTY
23713: LIST
23714: LIST
23715: LIST
23716: LIST
23717: LIST
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: ST_TO_ADDR
23765: GO 24232
23767: LD_INT 2
23769: DOUBLE
23770: EQUAL
23771: IFTRUE 23775
23773: GO 24001
23775: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
23776: LD_ADDR_VAR 0 4
23780: PUSH
23781: LD_INT 35
23783: PUSH
23784: LD_INT 45
23786: PUSH
23787: LD_INT 46
23789: PUSH
23790: LD_INT 47
23792: PUSH
23793: LD_INT 82
23795: PUSH
23796: LD_INT 83
23798: PUSH
23799: LD_INT 84
23801: PUSH
23802: LD_INT 85
23804: PUSH
23805: LD_INT 87
23807: PUSH
23808: LD_INT 70
23810: PUSH
23811: LD_INT 1
23813: PUSH
23814: LD_INT 11
23816: PUSH
23817: LD_INT 3
23819: PUSH
23820: LD_INT 4
23822: PUSH
23823: LD_INT 5
23825: PUSH
23826: LD_INT 6
23828: PUSH
23829: LD_INT 15
23831: PUSH
23832: LD_INT 18
23834: PUSH
23835: LD_INT 7
23837: PUSH
23838: LD_INT 17
23840: PUSH
23841: LD_INT 8
23843: PUSH
23844: LD_INT 20
23846: PUSH
23847: LD_INT 21
23849: PUSH
23850: LD_INT 22
23852: PUSH
23853: LD_INT 72
23855: PUSH
23856: LD_INT 26
23858: PUSH
23859: LD_INT 69
23861: PUSH
23862: LD_INT 39
23864: PUSH
23865: LD_INT 40
23867: PUSH
23868: LD_INT 41
23870: PUSH
23871: LD_INT 42
23873: PUSH
23874: LD_INT 43
23876: PUSH
23877: LD_INT 48
23879: PUSH
23880: LD_INT 49
23882: PUSH
23883: LD_INT 50
23885: PUSH
23886: LD_INT 51
23888: PUSH
23889: LD_INT 52
23891: PUSH
23892: LD_INT 53
23894: PUSH
23895: LD_INT 54
23897: PUSH
23898: LD_INT 55
23900: PUSH
23901: LD_INT 56
23903: PUSH
23904: LD_INT 60
23906: PUSH
23907: LD_INT 61
23909: PUSH
23910: LD_INT 62
23912: PUSH
23913: LD_INT 66
23915: PUSH
23916: LD_INT 67
23918: PUSH
23919: LD_INT 68
23921: PUSH
23922: LD_INT 81
23924: PUSH
23925: LD_INT 82
23927: PUSH
23928: LD_INT 83
23930: PUSH
23931: LD_INT 84
23933: PUSH
23934: LD_INT 85
23936: PUSH
23937: LD_INT 87
23939: PUSH
23940: LD_INT 88
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: LIST
23947: LIST
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: ST_TO_ADDR
23999: GO 24232
24001: LD_INT 3
24003: DOUBLE
24004: EQUAL
24005: IFTRUE 24009
24007: GO 24231
24009: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
24010: LD_ADDR_VAR 0 4
24014: PUSH
24015: LD_INT 46
24017: PUSH
24018: LD_INT 47
24020: PUSH
24021: LD_INT 1
24023: PUSH
24024: LD_INT 2
24026: PUSH
24027: LD_INT 82
24029: PUSH
24030: LD_INT 83
24032: PUSH
24033: LD_INT 84
24035: PUSH
24036: LD_INT 85
24038: PUSH
24039: LD_INT 86
24041: PUSH
24042: LD_INT 11
24044: PUSH
24045: LD_INT 9
24047: PUSH
24048: LD_INT 20
24050: PUSH
24051: LD_INT 19
24053: PUSH
24054: LD_INT 21
24056: PUSH
24057: LD_INT 24
24059: PUSH
24060: LD_INT 22
24062: PUSH
24063: LD_INT 25
24065: PUSH
24066: LD_INT 28
24068: PUSH
24069: LD_INT 29
24071: PUSH
24072: LD_INT 30
24074: PUSH
24075: LD_INT 31
24077: PUSH
24078: LD_INT 37
24080: PUSH
24081: LD_INT 38
24083: PUSH
24084: LD_INT 32
24086: PUSH
24087: LD_INT 27
24089: PUSH
24090: LD_INT 33
24092: PUSH
24093: LD_INT 69
24095: PUSH
24096: LD_INT 39
24098: PUSH
24099: LD_INT 34
24101: PUSH
24102: LD_INT 40
24104: PUSH
24105: LD_INT 71
24107: PUSH
24108: LD_INT 23
24110: PUSH
24111: LD_INT 44
24113: PUSH
24114: LD_INT 48
24116: PUSH
24117: LD_INT 49
24119: PUSH
24120: LD_INT 50
24122: PUSH
24123: LD_INT 51
24125: PUSH
24126: LD_INT 52
24128: PUSH
24129: LD_INT 53
24131: PUSH
24132: LD_INT 54
24134: PUSH
24135: LD_INT 55
24137: PUSH
24138: LD_INT 56
24140: PUSH
24141: LD_INT 57
24143: PUSH
24144: LD_INT 58
24146: PUSH
24147: LD_INT 59
24149: PUSH
24150: LD_INT 63
24152: PUSH
24153: LD_INT 64
24155: PUSH
24156: LD_INT 65
24158: PUSH
24159: LD_INT 82
24161: PUSH
24162: LD_INT 83
24164: PUSH
24165: LD_INT 84
24167: PUSH
24168: LD_INT 85
24170: PUSH
24171: LD_INT 86
24173: PUSH
24174: EMPTY
24175: LIST
24176: LIST
24177: LIST
24178: LIST
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: ST_TO_ADDR
24229: GO 24232
24231: POP
// if state > - 1 and state < 3 then
24232: LD_VAR 0 3
24236: PUSH
24237: LD_INT 1
24239: NEG
24240: GREATER
24241: PUSH
24242: LD_VAR 0 3
24246: PUSH
24247: LD_INT 3
24249: LESS
24250: AND
24251: IFFALSE 24308
// for i in result do
24253: LD_ADDR_VAR 0 5
24257: PUSH
24258: LD_VAR 0 4
24262: PUSH
24263: FOR_IN
24264: IFFALSE 24306
// if GetTech ( i , side ) <> state then
24266: LD_VAR 0 5
24270: PPUSH
24271: LD_VAR 0 1
24275: PPUSH
24276: CALL_OW 321
24280: PUSH
24281: LD_VAR 0 3
24285: NONEQUAL
24286: IFFALSE 24304
// result := result diff i ;
24288: LD_ADDR_VAR 0 4
24292: PUSH
24293: LD_VAR 0 4
24297: PUSH
24298: LD_VAR 0 5
24302: DIFF
24303: ST_TO_ADDR
24304: GO 24263
24306: POP
24307: POP
// end ;
24308: LD_VAR 0 4
24312: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
24313: LD_INT 0
24315: PPUSH
24316: PPUSH
24317: PPUSH
// result := true ;
24318: LD_ADDR_VAR 0 3
24322: PUSH
24323: LD_INT 1
24325: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
24326: LD_ADDR_VAR 0 5
24330: PUSH
24331: LD_VAR 0 2
24335: PPUSH
24336: CALL_OW 480
24340: ST_TO_ADDR
// if not tmp then
24341: LD_VAR 0 5
24345: NOT
24346: IFFALSE 24350
// exit ;
24348: GO 24399
// for i in tmp do
24350: LD_ADDR_VAR 0 4
24354: PUSH
24355: LD_VAR 0 5
24359: PUSH
24360: FOR_IN
24361: IFFALSE 24397
// if GetTech ( i , side ) <> state_researched then
24363: LD_VAR 0 4
24367: PPUSH
24368: LD_VAR 0 1
24372: PPUSH
24373: CALL_OW 321
24377: PUSH
24378: LD_INT 2
24380: NONEQUAL
24381: IFFALSE 24395
// begin result := false ;
24383: LD_ADDR_VAR 0 3
24387: PUSH
24388: LD_INT 0
24390: ST_TO_ADDR
// exit ;
24391: POP
24392: POP
24393: GO 24399
// end ;
24395: GO 24360
24397: POP
24398: POP
// end ;
24399: LD_VAR 0 3
24403: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
24404: LD_INT 0
24406: PPUSH
24407: PPUSH
24408: PPUSH
24409: PPUSH
24410: PPUSH
24411: PPUSH
24412: PPUSH
24413: PPUSH
24414: PPUSH
24415: PPUSH
24416: PPUSH
24417: PPUSH
24418: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
24419: LD_VAR 0 1
24423: NOT
24424: PUSH
24425: LD_VAR 0 1
24429: PPUSH
24430: CALL_OW 257
24434: PUSH
24435: LD_INT 9
24437: NONEQUAL
24438: OR
24439: IFFALSE 24443
// exit ;
24441: GO 25016
// side := GetSide ( unit ) ;
24443: LD_ADDR_VAR 0 9
24447: PUSH
24448: LD_VAR 0 1
24452: PPUSH
24453: CALL_OW 255
24457: ST_TO_ADDR
// tech_space := tech_spacanom ;
24458: LD_ADDR_VAR 0 12
24462: PUSH
24463: LD_INT 29
24465: ST_TO_ADDR
// tech_time := tech_taurad ;
24466: LD_ADDR_VAR 0 13
24470: PUSH
24471: LD_INT 28
24473: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
24474: LD_ADDR_VAR 0 11
24478: PUSH
24479: LD_VAR 0 1
24483: PPUSH
24484: CALL_OW 310
24488: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
24489: LD_VAR 0 11
24493: PPUSH
24494: CALL_OW 247
24498: PUSH
24499: LD_INT 2
24501: EQUAL
24502: IFFALSE 24506
// exit ;
24504: GO 25016
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24506: LD_ADDR_VAR 0 8
24510: PUSH
24511: LD_INT 81
24513: PUSH
24514: LD_VAR 0 9
24518: PUSH
24519: EMPTY
24520: LIST
24521: LIST
24522: PUSH
24523: LD_INT 3
24525: PUSH
24526: LD_INT 21
24528: PUSH
24529: LD_INT 3
24531: PUSH
24532: EMPTY
24533: LIST
24534: LIST
24535: PUSH
24536: EMPTY
24537: LIST
24538: LIST
24539: PUSH
24540: EMPTY
24541: LIST
24542: LIST
24543: PPUSH
24544: CALL_OW 69
24548: ST_TO_ADDR
// if not tmp then
24549: LD_VAR 0 8
24553: NOT
24554: IFFALSE 24558
// exit ;
24556: GO 25016
// if in_unit then
24558: LD_VAR 0 11
24562: IFFALSE 24586
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
24564: LD_ADDR_VAR 0 10
24568: PUSH
24569: LD_VAR 0 8
24573: PPUSH
24574: LD_VAR 0 11
24578: PPUSH
24579: CALL_OW 74
24583: ST_TO_ADDR
24584: GO 24606
// enemy := NearestUnitToUnit ( tmp , unit ) ;
24586: LD_ADDR_VAR 0 10
24590: PUSH
24591: LD_VAR 0 8
24595: PPUSH
24596: LD_VAR 0 1
24600: PPUSH
24601: CALL_OW 74
24605: ST_TO_ADDR
// if not enemy then
24606: LD_VAR 0 10
24610: NOT
24611: IFFALSE 24615
// exit ;
24613: GO 25016
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
24615: LD_VAR 0 11
24619: PUSH
24620: LD_VAR 0 11
24624: PPUSH
24625: LD_VAR 0 10
24629: PPUSH
24630: CALL_OW 296
24634: PUSH
24635: LD_INT 13
24637: GREATER
24638: AND
24639: PUSH
24640: LD_VAR 0 1
24644: PPUSH
24645: LD_VAR 0 10
24649: PPUSH
24650: CALL_OW 296
24654: PUSH
24655: LD_INT 12
24657: GREATER
24658: OR
24659: IFFALSE 24663
// exit ;
24661: GO 25016
// missile := [ 1 ] ;
24663: LD_ADDR_VAR 0 14
24667: PUSH
24668: LD_INT 1
24670: PUSH
24671: EMPTY
24672: LIST
24673: ST_TO_ADDR
// if Researched ( side , tech_space ) then
24674: LD_VAR 0 9
24678: PPUSH
24679: LD_VAR 0 12
24683: PPUSH
24684: CALL_OW 325
24688: IFFALSE 24717
// missile := Replace ( missile , missile + 1 , 2 ) ;
24690: LD_ADDR_VAR 0 14
24694: PUSH
24695: LD_VAR 0 14
24699: PPUSH
24700: LD_VAR 0 14
24704: PUSH
24705: LD_INT 1
24707: PLUS
24708: PPUSH
24709: LD_INT 2
24711: PPUSH
24712: CALL_OW 1
24716: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
24717: LD_VAR 0 9
24721: PPUSH
24722: LD_VAR 0 13
24726: PPUSH
24727: CALL_OW 325
24731: PUSH
24732: LD_VAR 0 10
24736: PPUSH
24737: CALL_OW 255
24741: PPUSH
24742: LD_VAR 0 13
24746: PPUSH
24747: CALL_OW 325
24751: NOT
24752: AND
24753: IFFALSE 24782
// missile := Replace ( missile , missile + 1 , 3 ) ;
24755: LD_ADDR_VAR 0 14
24759: PUSH
24760: LD_VAR 0 14
24764: PPUSH
24765: LD_VAR 0 14
24769: PUSH
24770: LD_INT 1
24772: PLUS
24773: PPUSH
24774: LD_INT 3
24776: PPUSH
24777: CALL_OW 1
24781: ST_TO_ADDR
// if missile < 2 then
24782: LD_VAR 0 14
24786: PUSH
24787: LD_INT 2
24789: LESS
24790: IFFALSE 24794
// exit ;
24792: GO 25016
// x := GetX ( enemy ) ;
24794: LD_ADDR_VAR 0 4
24798: PUSH
24799: LD_VAR 0 10
24803: PPUSH
24804: CALL_OW 250
24808: ST_TO_ADDR
// y := GetY ( enemy ) ;
24809: LD_ADDR_VAR 0 5
24813: PUSH
24814: LD_VAR 0 10
24818: PPUSH
24819: CALL_OW 251
24823: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
24824: LD_ADDR_VAR 0 6
24828: PUSH
24829: LD_VAR 0 4
24833: PUSH
24834: LD_INT 1
24836: NEG
24837: PPUSH
24838: LD_INT 1
24840: PPUSH
24841: CALL_OW 12
24845: PLUS
24846: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
24847: LD_ADDR_VAR 0 7
24851: PUSH
24852: LD_VAR 0 5
24856: PUSH
24857: LD_INT 1
24859: NEG
24860: PPUSH
24861: LD_INT 1
24863: PPUSH
24864: CALL_OW 12
24868: PLUS
24869: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24870: LD_VAR 0 6
24874: PPUSH
24875: LD_VAR 0 7
24879: PPUSH
24880: CALL_OW 488
24884: NOT
24885: IFFALSE 24907
// begin _x := x ;
24887: LD_ADDR_VAR 0 6
24891: PUSH
24892: LD_VAR 0 4
24896: ST_TO_ADDR
// _y := y ;
24897: LD_ADDR_VAR 0 7
24901: PUSH
24902: LD_VAR 0 5
24906: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
24907: LD_ADDR_VAR 0 3
24911: PUSH
24912: LD_INT 1
24914: PPUSH
24915: LD_VAR 0 14
24919: PPUSH
24920: CALL_OW 12
24924: ST_TO_ADDR
// case i of 1 :
24925: LD_VAR 0 3
24929: PUSH
24930: LD_INT 1
24932: DOUBLE
24933: EQUAL
24934: IFTRUE 24938
24936: GO 24955
24938: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
24939: LD_VAR 0 1
24943: PPUSH
24944: LD_VAR 0 10
24948: PPUSH
24949: CALL_OW 115
24953: GO 25016
24955: LD_INT 2
24957: DOUBLE
24958: EQUAL
24959: IFTRUE 24963
24961: GO 24985
24963: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
24964: LD_VAR 0 1
24968: PPUSH
24969: LD_VAR 0 6
24973: PPUSH
24974: LD_VAR 0 7
24978: PPUSH
24979: CALL_OW 153
24983: GO 25016
24985: LD_INT 3
24987: DOUBLE
24988: EQUAL
24989: IFTRUE 24993
24991: GO 25015
24993: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
24994: LD_VAR 0 1
24998: PPUSH
24999: LD_VAR 0 6
25003: PPUSH
25004: LD_VAR 0 7
25008: PPUSH
25009: CALL_OW 154
25013: GO 25016
25015: POP
// end ;
25016: LD_VAR 0 2
25020: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
25021: LD_INT 0
25023: PPUSH
25024: PPUSH
25025: PPUSH
25026: PPUSH
25027: PPUSH
25028: PPUSH
// if not unit or not building then
25029: LD_VAR 0 1
25033: NOT
25034: PUSH
25035: LD_VAR 0 2
25039: NOT
25040: OR
25041: IFFALSE 25045
// exit ;
25043: GO 25203
// x := GetX ( building ) ;
25045: LD_ADDR_VAR 0 5
25049: PUSH
25050: LD_VAR 0 2
25054: PPUSH
25055: CALL_OW 250
25059: ST_TO_ADDR
// y := GetY ( building ) ;
25060: LD_ADDR_VAR 0 6
25064: PUSH
25065: LD_VAR 0 2
25069: PPUSH
25070: CALL_OW 251
25074: ST_TO_ADDR
// for i = 0 to 5 do
25075: LD_ADDR_VAR 0 4
25079: PUSH
25080: DOUBLE
25081: LD_INT 0
25083: DEC
25084: ST_TO_ADDR
25085: LD_INT 5
25087: PUSH
25088: FOR_TO
25089: IFFALSE 25201
// begin _x := ShiftX ( x , i , 3 ) ;
25091: LD_ADDR_VAR 0 7
25095: PUSH
25096: LD_VAR 0 5
25100: PPUSH
25101: LD_VAR 0 4
25105: PPUSH
25106: LD_INT 3
25108: PPUSH
25109: CALL_OW 272
25113: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
25114: LD_ADDR_VAR 0 8
25118: PUSH
25119: LD_VAR 0 6
25123: PPUSH
25124: LD_VAR 0 4
25128: PPUSH
25129: LD_INT 3
25131: PPUSH
25132: CALL_OW 273
25136: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25137: LD_VAR 0 7
25141: PPUSH
25142: LD_VAR 0 8
25146: PPUSH
25147: CALL_OW 488
25151: NOT
25152: IFFALSE 25156
// continue ;
25154: GO 25088
// if HexInfo ( _x , _y ) = 0 then
25156: LD_VAR 0 7
25160: PPUSH
25161: LD_VAR 0 8
25165: PPUSH
25166: CALL_OW 428
25170: PUSH
25171: LD_INT 0
25173: EQUAL
25174: IFFALSE 25199
// begin ComMoveXY ( unit , _x , _y ) ;
25176: LD_VAR 0 1
25180: PPUSH
25181: LD_VAR 0 7
25185: PPUSH
25186: LD_VAR 0 8
25190: PPUSH
25191: CALL_OW 111
// exit ;
25195: POP
25196: POP
25197: GO 25203
// end ; end ;
25199: GO 25088
25201: POP
25202: POP
// end ;
25203: LD_VAR 0 3
25207: RET
// export function ScanBase ( side , base_area ) ; begin
25208: LD_INT 0
25210: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
25211: LD_ADDR_VAR 0 3
25215: PUSH
25216: LD_VAR 0 2
25220: PPUSH
25221: LD_INT 81
25223: PUSH
25224: LD_VAR 0 1
25228: PUSH
25229: EMPTY
25230: LIST
25231: LIST
25232: PPUSH
25233: CALL_OW 70
25237: ST_TO_ADDR
// end ;
25238: LD_VAR 0 3
25242: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
25243: LD_INT 0
25245: PPUSH
25246: PPUSH
25247: PPUSH
25248: PPUSH
// result := false ;
25249: LD_ADDR_VAR 0 2
25253: PUSH
25254: LD_INT 0
25256: ST_TO_ADDR
// side := GetSide ( unit ) ;
25257: LD_ADDR_VAR 0 3
25261: PUSH
25262: LD_VAR 0 1
25266: PPUSH
25267: CALL_OW 255
25271: ST_TO_ADDR
// nat := GetNation ( unit ) ;
25272: LD_ADDR_VAR 0 4
25276: PUSH
25277: LD_VAR 0 1
25281: PPUSH
25282: CALL_OW 248
25286: ST_TO_ADDR
// case nat of 1 :
25287: LD_VAR 0 4
25291: PUSH
25292: LD_INT 1
25294: DOUBLE
25295: EQUAL
25296: IFTRUE 25300
25298: GO 25311
25300: POP
// tech := tech_lassight ; 2 :
25301: LD_ADDR_VAR 0 5
25305: PUSH
25306: LD_INT 12
25308: ST_TO_ADDR
25309: GO 25350
25311: LD_INT 2
25313: DOUBLE
25314: EQUAL
25315: IFTRUE 25319
25317: GO 25330
25319: POP
// tech := tech_mortar ; 3 :
25320: LD_ADDR_VAR 0 5
25324: PUSH
25325: LD_INT 41
25327: ST_TO_ADDR
25328: GO 25350
25330: LD_INT 3
25332: DOUBLE
25333: EQUAL
25334: IFTRUE 25338
25336: GO 25349
25338: POP
// tech := tech_bazooka ; end ;
25339: LD_ADDR_VAR 0 5
25343: PUSH
25344: LD_INT 44
25346: ST_TO_ADDR
25347: GO 25350
25349: POP
// if Researched ( side , tech ) then
25350: LD_VAR 0 3
25354: PPUSH
25355: LD_VAR 0 5
25359: PPUSH
25360: CALL_OW 325
25364: IFFALSE 25391
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
25366: LD_ADDR_VAR 0 2
25370: PUSH
25371: LD_INT 5
25373: PUSH
25374: LD_INT 8
25376: PUSH
25377: LD_INT 9
25379: PUSH
25380: EMPTY
25381: LIST
25382: LIST
25383: LIST
25384: PUSH
25385: LD_VAR 0 4
25389: ARRAY
25390: ST_TO_ADDR
// end ;
25391: LD_VAR 0 2
25395: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
25396: LD_INT 0
25398: PPUSH
25399: PPUSH
25400: PPUSH
// if not mines then
25401: LD_VAR 0 2
25405: NOT
25406: IFFALSE 25410
// exit ;
25408: GO 25554
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25410: LD_ADDR_VAR 0 5
25414: PUSH
25415: LD_INT 81
25417: PUSH
25418: LD_VAR 0 1
25422: PUSH
25423: EMPTY
25424: LIST
25425: LIST
25426: PUSH
25427: LD_INT 3
25429: PUSH
25430: LD_INT 21
25432: PUSH
25433: LD_INT 3
25435: PUSH
25436: EMPTY
25437: LIST
25438: LIST
25439: PUSH
25440: EMPTY
25441: LIST
25442: LIST
25443: PUSH
25444: EMPTY
25445: LIST
25446: LIST
25447: PPUSH
25448: CALL_OW 69
25452: ST_TO_ADDR
// for i in mines do
25453: LD_ADDR_VAR 0 4
25457: PUSH
25458: LD_VAR 0 2
25462: PUSH
25463: FOR_IN
25464: IFFALSE 25552
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
25466: LD_VAR 0 4
25470: PUSH
25471: LD_INT 1
25473: ARRAY
25474: PPUSH
25475: LD_VAR 0 4
25479: PUSH
25480: LD_INT 2
25482: ARRAY
25483: PPUSH
25484: CALL_OW 458
25488: NOT
25489: IFFALSE 25493
// continue ;
25491: GO 25463
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
25493: LD_VAR 0 4
25497: PUSH
25498: LD_INT 1
25500: ARRAY
25501: PPUSH
25502: LD_VAR 0 4
25506: PUSH
25507: LD_INT 2
25509: ARRAY
25510: PPUSH
25511: CALL_OW 428
25515: PUSH
25516: LD_VAR 0 5
25520: IN
25521: IFFALSE 25550
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
25523: LD_VAR 0 4
25527: PUSH
25528: LD_INT 1
25530: ARRAY
25531: PPUSH
25532: LD_VAR 0 4
25536: PUSH
25537: LD_INT 2
25539: ARRAY
25540: PPUSH
25541: LD_VAR 0 1
25545: PPUSH
25546: CALL_OW 456
// end ;
25550: GO 25463
25552: POP
25553: POP
// end ;
25554: LD_VAR 0 3
25558: RET
// export function Count ( array ) ; var i ; begin
25559: LD_INT 0
25561: PPUSH
25562: PPUSH
// result := 0 ;
25563: LD_ADDR_VAR 0 2
25567: PUSH
25568: LD_INT 0
25570: ST_TO_ADDR
// for i in array do
25571: LD_ADDR_VAR 0 3
25575: PUSH
25576: LD_VAR 0 1
25580: PUSH
25581: FOR_IN
25582: IFFALSE 25606
// if i then
25584: LD_VAR 0 3
25588: IFFALSE 25604
// result := result + 1 ;
25590: LD_ADDR_VAR 0 2
25594: PUSH
25595: LD_VAR 0 2
25599: PUSH
25600: LD_INT 1
25602: PLUS
25603: ST_TO_ADDR
25604: GO 25581
25606: POP
25607: POP
// end ;
25608: LD_VAR 0 2
25612: RET
// export function IsEmpty ( building ) ; begin
25613: LD_INT 0
25615: PPUSH
// if not building then
25616: LD_VAR 0 1
25620: NOT
25621: IFFALSE 25625
// exit ;
25623: GO 25668
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
25625: LD_ADDR_VAR 0 2
25629: PUSH
25630: LD_VAR 0 1
25634: PUSH
25635: LD_INT 22
25637: PUSH
25638: LD_VAR 0 1
25642: PPUSH
25643: CALL_OW 255
25647: PUSH
25648: EMPTY
25649: LIST
25650: LIST
25651: PUSH
25652: LD_INT 58
25654: PUSH
25655: EMPTY
25656: LIST
25657: PUSH
25658: EMPTY
25659: LIST
25660: LIST
25661: PPUSH
25662: CALL_OW 69
25666: IN
25667: ST_TO_ADDR
// end ;
25668: LD_VAR 0 2
25672: RET
// export function IsNotFull ( building ) ; var places ; begin
25673: LD_INT 0
25675: PPUSH
25676: PPUSH
// if not building then
25677: LD_VAR 0 1
25681: NOT
25682: IFFALSE 25686
// exit ;
25684: GO 25857
// result := false ;
25686: LD_ADDR_VAR 0 2
25690: PUSH
25691: LD_INT 0
25693: ST_TO_ADDR
// places := 0 ;
25694: LD_ADDR_VAR 0 3
25698: PUSH
25699: LD_INT 0
25701: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
25702: LD_VAR 0 1
25706: PPUSH
25707: CALL_OW 266
25711: PUSH
25712: LD_INT 0
25714: DOUBLE
25715: EQUAL
25716: IFTRUE 25774
25718: LD_INT 1
25720: DOUBLE
25721: EQUAL
25722: IFTRUE 25774
25724: LD_INT 6
25726: DOUBLE
25727: EQUAL
25728: IFTRUE 25774
25730: LD_INT 7
25732: DOUBLE
25733: EQUAL
25734: IFTRUE 25774
25736: LD_INT 8
25738: DOUBLE
25739: EQUAL
25740: IFTRUE 25774
25742: LD_INT 4
25744: DOUBLE
25745: EQUAL
25746: IFTRUE 25774
25748: LD_INT 5
25750: DOUBLE
25751: EQUAL
25752: IFTRUE 25774
25754: LD_INT 2
25756: DOUBLE
25757: EQUAL
25758: IFTRUE 25774
25760: LD_INT 3
25762: DOUBLE
25763: EQUAL
25764: IFTRUE 25774
25766: LD_INT 35
25768: DOUBLE
25769: EQUAL
25770: IFTRUE 25774
25772: GO 25785
25774: POP
// places := 6 ; b_bunker , b_breastwork :
25775: LD_ADDR_VAR 0 3
25779: PUSH
25780: LD_INT 6
25782: ST_TO_ADDR
25783: GO 25830
25785: LD_INT 32
25787: DOUBLE
25788: EQUAL
25789: IFTRUE 25799
25791: LD_INT 31
25793: DOUBLE
25794: EQUAL
25795: IFTRUE 25799
25797: GO 25810
25799: POP
// places := 1 ; b_control_tower :
25800: LD_ADDR_VAR 0 3
25804: PUSH
25805: LD_INT 1
25807: ST_TO_ADDR
25808: GO 25830
25810: LD_INT 36
25812: DOUBLE
25813: EQUAL
25814: IFTRUE 25818
25816: GO 25829
25818: POP
// places := 3 ; end ;
25819: LD_ADDR_VAR 0 3
25823: PUSH
25824: LD_INT 3
25826: ST_TO_ADDR
25827: GO 25830
25829: POP
// if places then
25830: LD_VAR 0 3
25834: IFFALSE 25857
// result := UnitsInside ( building ) < places ;
25836: LD_ADDR_VAR 0 2
25840: PUSH
25841: LD_VAR 0 1
25845: PPUSH
25846: CALL_OW 313
25850: PUSH
25851: LD_VAR 0 3
25855: LESS
25856: ST_TO_ADDR
// end ;
25857: LD_VAR 0 2
25861: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
25862: LD_INT 0
25864: PPUSH
25865: PPUSH
25866: PPUSH
25867: PPUSH
// tmp := [ ] ;
25868: LD_ADDR_VAR 0 3
25872: PUSH
25873: EMPTY
25874: ST_TO_ADDR
// list := [ ] ;
25875: LD_ADDR_VAR 0 5
25879: PUSH
25880: EMPTY
25881: ST_TO_ADDR
// for i = 16 to 25 do
25882: LD_ADDR_VAR 0 4
25886: PUSH
25887: DOUBLE
25888: LD_INT 16
25890: DEC
25891: ST_TO_ADDR
25892: LD_INT 25
25894: PUSH
25895: FOR_TO
25896: IFFALSE 25969
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
25898: LD_ADDR_VAR 0 3
25902: PUSH
25903: LD_VAR 0 3
25907: PUSH
25908: LD_INT 22
25910: PUSH
25911: LD_VAR 0 1
25915: PPUSH
25916: CALL_OW 255
25920: PUSH
25921: EMPTY
25922: LIST
25923: LIST
25924: PUSH
25925: LD_INT 91
25927: PUSH
25928: LD_VAR 0 1
25932: PUSH
25933: LD_INT 6
25935: PUSH
25936: EMPTY
25937: LIST
25938: LIST
25939: LIST
25940: PUSH
25941: LD_INT 30
25943: PUSH
25944: LD_VAR 0 4
25948: PUSH
25949: EMPTY
25950: LIST
25951: LIST
25952: PUSH
25953: EMPTY
25954: LIST
25955: LIST
25956: LIST
25957: PUSH
25958: EMPTY
25959: LIST
25960: PPUSH
25961: CALL_OW 69
25965: ADD
25966: ST_TO_ADDR
25967: GO 25895
25969: POP
25970: POP
// for i = 1 to tmp do
25971: LD_ADDR_VAR 0 4
25975: PUSH
25976: DOUBLE
25977: LD_INT 1
25979: DEC
25980: ST_TO_ADDR
25981: LD_VAR 0 3
25985: PUSH
25986: FOR_TO
25987: IFFALSE 26075
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
25989: LD_ADDR_VAR 0 5
25993: PUSH
25994: LD_VAR 0 5
25998: PUSH
25999: LD_VAR 0 3
26003: PUSH
26004: LD_VAR 0 4
26008: ARRAY
26009: PPUSH
26010: CALL_OW 266
26014: PUSH
26015: LD_VAR 0 3
26019: PUSH
26020: LD_VAR 0 4
26024: ARRAY
26025: PPUSH
26026: CALL_OW 250
26030: PUSH
26031: LD_VAR 0 3
26035: PUSH
26036: LD_VAR 0 4
26040: ARRAY
26041: PPUSH
26042: CALL_OW 251
26046: PUSH
26047: LD_VAR 0 3
26051: PUSH
26052: LD_VAR 0 4
26056: ARRAY
26057: PPUSH
26058: CALL_OW 254
26062: PUSH
26063: EMPTY
26064: LIST
26065: LIST
26066: LIST
26067: LIST
26068: PUSH
26069: EMPTY
26070: LIST
26071: ADD
26072: ST_TO_ADDR
26073: GO 25986
26075: POP
26076: POP
// result := list ;
26077: LD_ADDR_VAR 0 2
26081: PUSH
26082: LD_VAR 0 5
26086: ST_TO_ADDR
// end ;
26087: LD_VAR 0 2
26091: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
26092: LD_INT 0
26094: PPUSH
26095: PPUSH
26096: PPUSH
26097: PPUSH
26098: PPUSH
26099: PPUSH
26100: PPUSH
// if not factory then
26101: LD_VAR 0 1
26105: NOT
26106: IFFALSE 26110
// exit ;
26108: GO 26703
// if control = control_apeman then
26110: LD_VAR 0 4
26114: PUSH
26115: LD_INT 5
26117: EQUAL
26118: IFFALSE 26227
// begin tmp := UnitsInside ( factory ) ;
26120: LD_ADDR_VAR 0 8
26124: PUSH
26125: LD_VAR 0 1
26129: PPUSH
26130: CALL_OW 313
26134: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26135: LD_VAR 0 8
26139: PPUSH
26140: LD_INT 25
26142: PUSH
26143: LD_INT 12
26145: PUSH
26146: EMPTY
26147: LIST
26148: LIST
26149: PPUSH
26150: CALL_OW 72
26154: NOT
26155: IFFALSE 26165
// control := control_manual ;
26157: LD_ADDR_VAR 0 4
26161: PUSH
26162: LD_INT 1
26164: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
26165: LD_ADDR_VAR 0 8
26169: PUSH
26170: LD_VAR 0 1
26174: PPUSH
26175: CALL 25862 0 1
26179: ST_TO_ADDR
// if tmp then
26180: LD_VAR 0 8
26184: IFFALSE 26227
// begin for i in tmp do
26186: LD_ADDR_VAR 0 7
26190: PUSH
26191: LD_VAR 0 8
26195: PUSH
26196: FOR_IN
26197: IFFALSE 26225
// if i [ 1 ] = b_ext_radio then
26199: LD_VAR 0 7
26203: PUSH
26204: LD_INT 1
26206: ARRAY
26207: PUSH
26208: LD_INT 22
26210: EQUAL
26211: IFFALSE 26223
// begin control := control_remote ;
26213: LD_ADDR_VAR 0 4
26217: PUSH
26218: LD_INT 2
26220: ST_TO_ADDR
// break ;
26221: GO 26225
// end ;
26223: GO 26196
26225: POP
26226: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26227: LD_VAR 0 1
26231: PPUSH
26232: LD_VAR 0 2
26236: PPUSH
26237: LD_VAR 0 3
26241: PPUSH
26242: LD_VAR 0 4
26246: PPUSH
26247: LD_VAR 0 5
26251: PPUSH
26252: CALL_OW 448
26256: IFFALSE 26291
// begin result := [ chassis , engine , control , weapon ] ;
26258: LD_ADDR_VAR 0 6
26262: PUSH
26263: LD_VAR 0 2
26267: PUSH
26268: LD_VAR 0 3
26272: PUSH
26273: LD_VAR 0 4
26277: PUSH
26278: LD_VAR 0 5
26282: PUSH
26283: EMPTY
26284: LIST
26285: LIST
26286: LIST
26287: LIST
26288: ST_TO_ADDR
// exit ;
26289: GO 26703
// end ; _chassis := AvailableChassisList ( factory ) ;
26291: LD_ADDR_VAR 0 9
26295: PUSH
26296: LD_VAR 0 1
26300: PPUSH
26301: CALL_OW 475
26305: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
26306: LD_ADDR_VAR 0 11
26310: PUSH
26311: LD_VAR 0 1
26315: PPUSH
26316: CALL_OW 476
26320: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
26321: LD_ADDR_VAR 0 12
26325: PUSH
26326: LD_VAR 0 1
26330: PPUSH
26331: CALL_OW 477
26335: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
26336: LD_ADDR_VAR 0 10
26340: PUSH
26341: LD_VAR 0 1
26345: PPUSH
26346: CALL_OW 478
26350: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
26351: LD_VAR 0 9
26355: NOT
26356: PUSH
26357: LD_VAR 0 11
26361: NOT
26362: OR
26363: PUSH
26364: LD_VAR 0 12
26368: NOT
26369: OR
26370: PUSH
26371: LD_VAR 0 10
26375: NOT
26376: OR
26377: IFFALSE 26412
// begin result := [ chassis , engine , control , weapon ] ;
26379: LD_ADDR_VAR 0 6
26383: PUSH
26384: LD_VAR 0 2
26388: PUSH
26389: LD_VAR 0 3
26393: PUSH
26394: LD_VAR 0 4
26398: PUSH
26399: LD_VAR 0 5
26403: PUSH
26404: EMPTY
26405: LIST
26406: LIST
26407: LIST
26408: LIST
26409: ST_TO_ADDR
// exit ;
26410: GO 26703
// end ; if not chassis in _chassis then
26412: LD_VAR 0 2
26416: PUSH
26417: LD_VAR 0 9
26421: IN
26422: NOT
26423: IFFALSE 26449
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
26425: LD_ADDR_VAR 0 2
26429: PUSH
26430: LD_VAR 0 9
26434: PUSH
26435: LD_INT 1
26437: PPUSH
26438: LD_VAR 0 9
26442: PPUSH
26443: CALL_OW 12
26447: ARRAY
26448: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
26449: LD_VAR 0 2
26453: PPUSH
26454: LD_VAR 0 3
26458: PPUSH
26459: CALL 26708 0 2
26463: NOT
26464: IFFALSE 26523
// repeat engine := _engine [ 1 ] ;
26466: LD_ADDR_VAR 0 3
26470: PUSH
26471: LD_VAR 0 11
26475: PUSH
26476: LD_INT 1
26478: ARRAY
26479: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
26480: LD_ADDR_VAR 0 11
26484: PUSH
26485: LD_VAR 0 11
26489: PPUSH
26490: LD_INT 1
26492: PPUSH
26493: CALL_OW 3
26497: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
26498: LD_VAR 0 2
26502: PPUSH
26503: LD_VAR 0 3
26507: PPUSH
26508: CALL 26708 0 2
26512: PUSH
26513: LD_VAR 0 11
26517: PUSH
26518: EMPTY
26519: EQUAL
26520: OR
26521: IFFALSE 26466
// if not control in _control then
26523: LD_VAR 0 4
26527: PUSH
26528: LD_VAR 0 12
26532: IN
26533: NOT
26534: IFFALSE 26560
// control := _control [ rand ( 1 , _control ) ] ;
26536: LD_ADDR_VAR 0 4
26540: PUSH
26541: LD_VAR 0 12
26545: PUSH
26546: LD_INT 1
26548: PPUSH
26549: LD_VAR 0 12
26553: PPUSH
26554: CALL_OW 12
26558: ARRAY
26559: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
26560: LD_VAR 0 2
26564: PPUSH
26565: LD_VAR 0 5
26569: PPUSH
26570: CALL 26928 0 2
26574: NOT
26575: IFFALSE 26634
// repeat weapon := _weapon [ 1 ] ;
26577: LD_ADDR_VAR 0 5
26581: PUSH
26582: LD_VAR 0 10
26586: PUSH
26587: LD_INT 1
26589: ARRAY
26590: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
26591: LD_ADDR_VAR 0 10
26595: PUSH
26596: LD_VAR 0 10
26600: PPUSH
26601: LD_INT 1
26603: PPUSH
26604: CALL_OW 3
26608: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
26609: LD_VAR 0 2
26613: PPUSH
26614: LD_VAR 0 5
26618: PPUSH
26619: CALL 26928 0 2
26623: PUSH
26624: LD_VAR 0 10
26628: PUSH
26629: EMPTY
26630: EQUAL
26631: OR
26632: IFFALSE 26577
// result := [ ] ;
26634: LD_ADDR_VAR 0 6
26638: PUSH
26639: EMPTY
26640: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26641: LD_VAR 0 1
26645: PPUSH
26646: LD_VAR 0 2
26650: PPUSH
26651: LD_VAR 0 3
26655: PPUSH
26656: LD_VAR 0 4
26660: PPUSH
26661: LD_VAR 0 5
26665: PPUSH
26666: CALL_OW 448
26670: IFFALSE 26703
// result := [ chassis , engine , control , weapon ] ;
26672: LD_ADDR_VAR 0 6
26676: PUSH
26677: LD_VAR 0 2
26681: PUSH
26682: LD_VAR 0 3
26686: PUSH
26687: LD_VAR 0 4
26691: PUSH
26692: LD_VAR 0 5
26696: PUSH
26697: EMPTY
26698: LIST
26699: LIST
26700: LIST
26701: LIST
26702: ST_TO_ADDR
// end ;
26703: LD_VAR 0 6
26707: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
26708: LD_INT 0
26710: PPUSH
// if not chassis or not engine then
26711: LD_VAR 0 1
26715: NOT
26716: PUSH
26717: LD_VAR 0 2
26721: NOT
26722: OR
26723: IFFALSE 26727
// exit ;
26725: GO 26923
// case engine of engine_solar :
26727: LD_VAR 0 2
26731: PUSH
26732: LD_INT 2
26734: DOUBLE
26735: EQUAL
26736: IFTRUE 26740
26738: GO 26778
26740: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
26741: LD_ADDR_VAR 0 3
26745: PUSH
26746: LD_INT 11
26748: PUSH
26749: LD_INT 12
26751: PUSH
26752: LD_INT 13
26754: PUSH
26755: LD_INT 14
26757: PUSH
26758: LD_INT 1
26760: PUSH
26761: LD_INT 2
26763: PUSH
26764: LD_INT 3
26766: PUSH
26767: EMPTY
26768: LIST
26769: LIST
26770: LIST
26771: LIST
26772: LIST
26773: LIST
26774: LIST
26775: ST_TO_ADDR
26776: GO 26907
26778: LD_INT 1
26780: DOUBLE
26781: EQUAL
26782: IFTRUE 26786
26784: GO 26848
26786: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
26787: LD_ADDR_VAR 0 3
26791: PUSH
26792: LD_INT 11
26794: PUSH
26795: LD_INT 12
26797: PUSH
26798: LD_INT 13
26800: PUSH
26801: LD_INT 14
26803: PUSH
26804: LD_INT 1
26806: PUSH
26807: LD_INT 2
26809: PUSH
26810: LD_INT 3
26812: PUSH
26813: LD_INT 4
26815: PUSH
26816: LD_INT 5
26818: PUSH
26819: LD_INT 21
26821: PUSH
26822: LD_INT 23
26824: PUSH
26825: LD_INT 22
26827: PUSH
26828: LD_INT 24
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: LIST
26835: LIST
26836: LIST
26837: LIST
26838: LIST
26839: LIST
26840: LIST
26841: LIST
26842: LIST
26843: LIST
26844: LIST
26845: ST_TO_ADDR
26846: GO 26907
26848: LD_INT 3
26850: DOUBLE
26851: EQUAL
26852: IFTRUE 26856
26854: GO 26906
26856: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26857: LD_ADDR_VAR 0 3
26861: PUSH
26862: LD_INT 13
26864: PUSH
26865: LD_INT 14
26867: PUSH
26868: LD_INT 2
26870: PUSH
26871: LD_INT 3
26873: PUSH
26874: LD_INT 4
26876: PUSH
26877: LD_INT 5
26879: PUSH
26880: LD_INT 21
26882: PUSH
26883: LD_INT 22
26885: PUSH
26886: LD_INT 23
26888: PUSH
26889: LD_INT 24
26891: PUSH
26892: EMPTY
26893: LIST
26894: LIST
26895: LIST
26896: LIST
26897: LIST
26898: LIST
26899: LIST
26900: LIST
26901: LIST
26902: LIST
26903: ST_TO_ADDR
26904: GO 26907
26906: POP
// result := ( chassis in result ) ;
26907: LD_ADDR_VAR 0 3
26911: PUSH
26912: LD_VAR 0 1
26916: PUSH
26917: LD_VAR 0 3
26921: IN
26922: ST_TO_ADDR
// end ;
26923: LD_VAR 0 3
26927: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
26928: LD_INT 0
26930: PPUSH
// if not chassis or not weapon then
26931: LD_VAR 0 1
26935: NOT
26936: PUSH
26937: LD_VAR 0 2
26941: NOT
26942: OR
26943: IFFALSE 26947
// exit ;
26945: GO 28007
// case weapon of us_machine_gun :
26947: LD_VAR 0 2
26951: PUSH
26952: LD_INT 2
26954: DOUBLE
26955: EQUAL
26956: IFTRUE 26960
26958: GO 26990
26960: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
26961: LD_ADDR_VAR 0 3
26965: PUSH
26966: LD_INT 1
26968: PUSH
26969: LD_INT 2
26971: PUSH
26972: LD_INT 3
26974: PUSH
26975: LD_INT 4
26977: PUSH
26978: LD_INT 5
26980: PUSH
26981: EMPTY
26982: LIST
26983: LIST
26984: LIST
26985: LIST
26986: LIST
26987: ST_TO_ADDR
26988: GO 27991
26990: LD_INT 3
26992: DOUBLE
26993: EQUAL
26994: IFTRUE 26998
26996: GO 27028
26998: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
26999: LD_ADDR_VAR 0 3
27003: PUSH
27004: LD_INT 1
27006: PUSH
27007: LD_INT 2
27009: PUSH
27010: LD_INT 3
27012: PUSH
27013: LD_INT 4
27015: PUSH
27016: LD_INT 5
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: LIST
27023: LIST
27024: LIST
27025: ST_TO_ADDR
27026: GO 27991
27028: LD_INT 11
27030: DOUBLE
27031: EQUAL
27032: IFTRUE 27036
27034: GO 27066
27036: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27037: LD_ADDR_VAR 0 3
27041: PUSH
27042: LD_INT 1
27044: PUSH
27045: LD_INT 2
27047: PUSH
27048: LD_INT 3
27050: PUSH
27051: LD_INT 4
27053: PUSH
27054: LD_INT 5
27056: PUSH
27057: EMPTY
27058: LIST
27059: LIST
27060: LIST
27061: LIST
27062: LIST
27063: ST_TO_ADDR
27064: GO 27991
27066: LD_INT 4
27068: DOUBLE
27069: EQUAL
27070: IFTRUE 27074
27072: GO 27100
27074: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
27075: LD_ADDR_VAR 0 3
27079: PUSH
27080: LD_INT 2
27082: PUSH
27083: LD_INT 3
27085: PUSH
27086: LD_INT 4
27088: PUSH
27089: LD_INT 5
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: LIST
27096: LIST
27097: ST_TO_ADDR
27098: GO 27991
27100: LD_INT 5
27102: DOUBLE
27103: EQUAL
27104: IFTRUE 27108
27106: GO 27134
27108: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27109: LD_ADDR_VAR 0 3
27113: PUSH
27114: LD_INT 2
27116: PUSH
27117: LD_INT 3
27119: PUSH
27120: LD_INT 4
27122: PUSH
27123: LD_INT 5
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: LIST
27130: LIST
27131: ST_TO_ADDR
27132: GO 27991
27134: LD_INT 9
27136: DOUBLE
27137: EQUAL
27138: IFTRUE 27142
27140: GO 27168
27142: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
27143: LD_ADDR_VAR 0 3
27147: PUSH
27148: LD_INT 2
27150: PUSH
27151: LD_INT 3
27153: PUSH
27154: LD_INT 4
27156: PUSH
27157: LD_INT 5
27159: PUSH
27160: EMPTY
27161: LIST
27162: LIST
27163: LIST
27164: LIST
27165: ST_TO_ADDR
27166: GO 27991
27168: LD_INT 7
27170: DOUBLE
27171: EQUAL
27172: IFTRUE 27176
27174: GO 27202
27176: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
27177: LD_ADDR_VAR 0 3
27181: PUSH
27182: LD_INT 2
27184: PUSH
27185: LD_INT 3
27187: PUSH
27188: LD_INT 4
27190: PUSH
27191: LD_INT 5
27193: PUSH
27194: EMPTY
27195: LIST
27196: LIST
27197: LIST
27198: LIST
27199: ST_TO_ADDR
27200: GO 27991
27202: LD_INT 12
27204: DOUBLE
27205: EQUAL
27206: IFTRUE 27210
27208: GO 27236
27210: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
27211: LD_ADDR_VAR 0 3
27215: PUSH
27216: LD_INT 2
27218: PUSH
27219: LD_INT 3
27221: PUSH
27222: LD_INT 4
27224: PUSH
27225: LD_INT 5
27227: PUSH
27228: EMPTY
27229: LIST
27230: LIST
27231: LIST
27232: LIST
27233: ST_TO_ADDR
27234: GO 27991
27236: LD_INT 13
27238: DOUBLE
27239: EQUAL
27240: IFTRUE 27244
27242: GO 27270
27244: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
27245: LD_ADDR_VAR 0 3
27249: PUSH
27250: LD_INT 2
27252: PUSH
27253: LD_INT 3
27255: PUSH
27256: LD_INT 4
27258: PUSH
27259: LD_INT 5
27261: PUSH
27262: EMPTY
27263: LIST
27264: LIST
27265: LIST
27266: LIST
27267: ST_TO_ADDR
27268: GO 27991
27270: LD_INT 14
27272: DOUBLE
27273: EQUAL
27274: IFTRUE 27278
27276: GO 27296
27278: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
27279: LD_ADDR_VAR 0 3
27283: PUSH
27284: LD_INT 4
27286: PUSH
27287: LD_INT 5
27289: PUSH
27290: EMPTY
27291: LIST
27292: LIST
27293: ST_TO_ADDR
27294: GO 27991
27296: LD_INT 6
27298: DOUBLE
27299: EQUAL
27300: IFTRUE 27304
27302: GO 27322
27304: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
27305: LD_ADDR_VAR 0 3
27309: PUSH
27310: LD_INT 4
27312: PUSH
27313: LD_INT 5
27315: PUSH
27316: EMPTY
27317: LIST
27318: LIST
27319: ST_TO_ADDR
27320: GO 27991
27322: LD_INT 10
27324: DOUBLE
27325: EQUAL
27326: IFTRUE 27330
27328: GO 27348
27330: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
27331: LD_ADDR_VAR 0 3
27335: PUSH
27336: LD_INT 4
27338: PUSH
27339: LD_INT 5
27341: PUSH
27342: EMPTY
27343: LIST
27344: LIST
27345: ST_TO_ADDR
27346: GO 27991
27348: LD_INT 22
27350: DOUBLE
27351: EQUAL
27352: IFTRUE 27356
27354: GO 27382
27356: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
27357: LD_ADDR_VAR 0 3
27361: PUSH
27362: LD_INT 11
27364: PUSH
27365: LD_INT 12
27367: PUSH
27368: LD_INT 13
27370: PUSH
27371: LD_INT 14
27373: PUSH
27374: EMPTY
27375: LIST
27376: LIST
27377: LIST
27378: LIST
27379: ST_TO_ADDR
27380: GO 27991
27382: LD_INT 23
27384: DOUBLE
27385: EQUAL
27386: IFTRUE 27390
27388: GO 27416
27390: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
27391: LD_ADDR_VAR 0 3
27395: PUSH
27396: LD_INT 11
27398: PUSH
27399: LD_INT 12
27401: PUSH
27402: LD_INT 13
27404: PUSH
27405: LD_INT 14
27407: PUSH
27408: EMPTY
27409: LIST
27410: LIST
27411: LIST
27412: LIST
27413: ST_TO_ADDR
27414: GO 27991
27416: LD_INT 24
27418: DOUBLE
27419: EQUAL
27420: IFTRUE 27424
27422: GO 27450
27424: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
27425: LD_ADDR_VAR 0 3
27429: PUSH
27430: LD_INT 11
27432: PUSH
27433: LD_INT 12
27435: PUSH
27436: LD_INT 13
27438: PUSH
27439: LD_INT 14
27441: PUSH
27442: EMPTY
27443: LIST
27444: LIST
27445: LIST
27446: LIST
27447: ST_TO_ADDR
27448: GO 27991
27450: LD_INT 30
27452: DOUBLE
27453: EQUAL
27454: IFTRUE 27458
27456: GO 27484
27458: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
27459: LD_ADDR_VAR 0 3
27463: PUSH
27464: LD_INT 11
27466: PUSH
27467: LD_INT 12
27469: PUSH
27470: LD_INT 13
27472: PUSH
27473: LD_INT 14
27475: PUSH
27476: EMPTY
27477: LIST
27478: LIST
27479: LIST
27480: LIST
27481: ST_TO_ADDR
27482: GO 27991
27484: LD_INT 25
27486: DOUBLE
27487: EQUAL
27488: IFTRUE 27492
27490: GO 27510
27492: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
27493: LD_ADDR_VAR 0 3
27497: PUSH
27498: LD_INT 13
27500: PUSH
27501: LD_INT 14
27503: PUSH
27504: EMPTY
27505: LIST
27506: LIST
27507: ST_TO_ADDR
27508: GO 27991
27510: LD_INT 27
27512: DOUBLE
27513: EQUAL
27514: IFTRUE 27518
27516: GO 27536
27518: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
27519: LD_ADDR_VAR 0 3
27523: PUSH
27524: LD_INT 13
27526: PUSH
27527: LD_INT 14
27529: PUSH
27530: EMPTY
27531: LIST
27532: LIST
27533: ST_TO_ADDR
27534: GO 27991
27536: LD_INT 92
27538: DOUBLE
27539: EQUAL
27540: IFTRUE 27544
27542: GO 27570
27544: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
27545: LD_ADDR_VAR 0 3
27549: PUSH
27550: LD_INT 11
27552: PUSH
27553: LD_INT 12
27555: PUSH
27556: LD_INT 13
27558: PUSH
27559: LD_INT 14
27561: PUSH
27562: EMPTY
27563: LIST
27564: LIST
27565: LIST
27566: LIST
27567: ST_TO_ADDR
27568: GO 27991
27570: LD_INT 28
27572: DOUBLE
27573: EQUAL
27574: IFTRUE 27578
27576: GO 27596
27578: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
27579: LD_ADDR_VAR 0 3
27583: PUSH
27584: LD_INT 13
27586: PUSH
27587: LD_INT 14
27589: PUSH
27590: EMPTY
27591: LIST
27592: LIST
27593: ST_TO_ADDR
27594: GO 27991
27596: LD_INT 29
27598: DOUBLE
27599: EQUAL
27600: IFTRUE 27604
27602: GO 27622
27604: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
27605: LD_ADDR_VAR 0 3
27609: PUSH
27610: LD_INT 13
27612: PUSH
27613: LD_INT 14
27615: PUSH
27616: EMPTY
27617: LIST
27618: LIST
27619: ST_TO_ADDR
27620: GO 27991
27622: LD_INT 31
27624: DOUBLE
27625: EQUAL
27626: IFTRUE 27630
27628: GO 27648
27630: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
27631: LD_ADDR_VAR 0 3
27635: PUSH
27636: LD_INT 13
27638: PUSH
27639: LD_INT 14
27641: PUSH
27642: EMPTY
27643: LIST
27644: LIST
27645: ST_TO_ADDR
27646: GO 27991
27648: LD_INT 26
27650: DOUBLE
27651: EQUAL
27652: IFTRUE 27656
27654: GO 27674
27656: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
27657: LD_ADDR_VAR 0 3
27661: PUSH
27662: LD_INT 13
27664: PUSH
27665: LD_INT 14
27667: PUSH
27668: EMPTY
27669: LIST
27670: LIST
27671: ST_TO_ADDR
27672: GO 27991
27674: LD_INT 42
27676: DOUBLE
27677: EQUAL
27678: IFTRUE 27682
27680: GO 27708
27682: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
27683: LD_ADDR_VAR 0 3
27687: PUSH
27688: LD_INT 21
27690: PUSH
27691: LD_INT 22
27693: PUSH
27694: LD_INT 23
27696: PUSH
27697: LD_INT 24
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: LIST
27704: LIST
27705: ST_TO_ADDR
27706: GO 27991
27708: LD_INT 43
27710: DOUBLE
27711: EQUAL
27712: IFTRUE 27716
27714: GO 27742
27716: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
27717: LD_ADDR_VAR 0 3
27721: PUSH
27722: LD_INT 21
27724: PUSH
27725: LD_INT 22
27727: PUSH
27728: LD_INT 23
27730: PUSH
27731: LD_INT 24
27733: PUSH
27734: EMPTY
27735: LIST
27736: LIST
27737: LIST
27738: LIST
27739: ST_TO_ADDR
27740: GO 27991
27742: LD_INT 44
27744: DOUBLE
27745: EQUAL
27746: IFTRUE 27750
27748: GO 27776
27750: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
27751: LD_ADDR_VAR 0 3
27755: PUSH
27756: LD_INT 21
27758: PUSH
27759: LD_INT 22
27761: PUSH
27762: LD_INT 23
27764: PUSH
27765: LD_INT 24
27767: PUSH
27768: EMPTY
27769: LIST
27770: LIST
27771: LIST
27772: LIST
27773: ST_TO_ADDR
27774: GO 27991
27776: LD_INT 45
27778: DOUBLE
27779: EQUAL
27780: IFTRUE 27784
27782: GO 27810
27784: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
27785: LD_ADDR_VAR 0 3
27789: PUSH
27790: LD_INT 21
27792: PUSH
27793: LD_INT 22
27795: PUSH
27796: LD_INT 23
27798: PUSH
27799: LD_INT 24
27801: PUSH
27802: EMPTY
27803: LIST
27804: LIST
27805: LIST
27806: LIST
27807: ST_TO_ADDR
27808: GO 27991
27810: LD_INT 49
27812: DOUBLE
27813: EQUAL
27814: IFTRUE 27818
27816: GO 27844
27818: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
27819: LD_ADDR_VAR 0 3
27823: PUSH
27824: LD_INT 21
27826: PUSH
27827: LD_INT 22
27829: PUSH
27830: LD_INT 23
27832: PUSH
27833: LD_INT 24
27835: PUSH
27836: EMPTY
27837: LIST
27838: LIST
27839: LIST
27840: LIST
27841: ST_TO_ADDR
27842: GO 27991
27844: LD_INT 51
27846: DOUBLE
27847: EQUAL
27848: IFTRUE 27852
27850: GO 27878
27852: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
27853: LD_ADDR_VAR 0 3
27857: PUSH
27858: LD_INT 21
27860: PUSH
27861: LD_INT 22
27863: PUSH
27864: LD_INT 23
27866: PUSH
27867: LD_INT 24
27869: PUSH
27870: EMPTY
27871: LIST
27872: LIST
27873: LIST
27874: LIST
27875: ST_TO_ADDR
27876: GO 27991
27878: LD_INT 52
27880: DOUBLE
27881: EQUAL
27882: IFTRUE 27886
27884: GO 27912
27886: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
27887: LD_ADDR_VAR 0 3
27891: PUSH
27892: LD_INT 21
27894: PUSH
27895: LD_INT 22
27897: PUSH
27898: LD_INT 23
27900: PUSH
27901: LD_INT 24
27903: PUSH
27904: EMPTY
27905: LIST
27906: LIST
27907: LIST
27908: LIST
27909: ST_TO_ADDR
27910: GO 27991
27912: LD_INT 53
27914: DOUBLE
27915: EQUAL
27916: IFTRUE 27920
27918: GO 27938
27920: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
27921: LD_ADDR_VAR 0 3
27925: PUSH
27926: LD_INT 23
27928: PUSH
27929: LD_INT 24
27931: PUSH
27932: EMPTY
27933: LIST
27934: LIST
27935: ST_TO_ADDR
27936: GO 27991
27938: LD_INT 46
27940: DOUBLE
27941: EQUAL
27942: IFTRUE 27946
27944: GO 27964
27946: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
27947: LD_ADDR_VAR 0 3
27951: PUSH
27952: LD_INT 23
27954: PUSH
27955: LD_INT 24
27957: PUSH
27958: EMPTY
27959: LIST
27960: LIST
27961: ST_TO_ADDR
27962: GO 27991
27964: LD_INT 47
27966: DOUBLE
27967: EQUAL
27968: IFTRUE 27972
27970: GO 27990
27972: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27973: LD_ADDR_VAR 0 3
27977: PUSH
27978: LD_INT 23
27980: PUSH
27981: LD_INT 24
27983: PUSH
27984: EMPTY
27985: LIST
27986: LIST
27987: ST_TO_ADDR
27988: GO 27991
27990: POP
// result := ( chassis in result ) ;
27991: LD_ADDR_VAR 0 3
27995: PUSH
27996: LD_VAR 0 1
28000: PUSH
28001: LD_VAR 0 3
28005: IN
28006: ST_TO_ADDR
// end ;
28007: LD_VAR 0 3
28011: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28012: LD_INT 0
28014: PPUSH
28015: PPUSH
28016: PPUSH
28017: PPUSH
28018: PPUSH
28019: PPUSH
28020: PPUSH
// result := array ;
28021: LD_ADDR_VAR 0 5
28025: PUSH
28026: LD_VAR 0 1
28030: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28031: LD_VAR 0 1
28035: NOT
28036: PUSH
28037: LD_VAR 0 2
28041: NOT
28042: OR
28043: PUSH
28044: LD_VAR 0 3
28048: NOT
28049: OR
28050: PUSH
28051: LD_VAR 0 2
28055: PUSH
28056: LD_VAR 0 1
28060: GREATER
28061: OR
28062: PUSH
28063: LD_VAR 0 3
28067: PUSH
28068: LD_VAR 0 1
28072: GREATER
28073: OR
28074: IFFALSE 28078
// exit ;
28076: GO 28374
// if direction then
28078: LD_VAR 0 4
28082: IFFALSE 28146
// begin d := 1 ;
28084: LD_ADDR_VAR 0 9
28088: PUSH
28089: LD_INT 1
28091: ST_TO_ADDR
// if i_from > i_to then
28092: LD_VAR 0 2
28096: PUSH
28097: LD_VAR 0 3
28101: GREATER
28102: IFFALSE 28128
// length := ( array - i_from ) + i_to else
28104: LD_ADDR_VAR 0 11
28108: PUSH
28109: LD_VAR 0 1
28113: PUSH
28114: LD_VAR 0 2
28118: MINUS
28119: PUSH
28120: LD_VAR 0 3
28124: PLUS
28125: ST_TO_ADDR
28126: GO 28144
// length := i_to - i_from ;
28128: LD_ADDR_VAR 0 11
28132: PUSH
28133: LD_VAR 0 3
28137: PUSH
28138: LD_VAR 0 2
28142: MINUS
28143: ST_TO_ADDR
// end else
28144: GO 28207
// begin d := - 1 ;
28146: LD_ADDR_VAR 0 9
28150: PUSH
28151: LD_INT 1
28153: NEG
28154: ST_TO_ADDR
// if i_from > i_to then
28155: LD_VAR 0 2
28159: PUSH
28160: LD_VAR 0 3
28164: GREATER
28165: IFFALSE 28185
// length := i_from - i_to else
28167: LD_ADDR_VAR 0 11
28171: PUSH
28172: LD_VAR 0 2
28176: PUSH
28177: LD_VAR 0 3
28181: MINUS
28182: ST_TO_ADDR
28183: GO 28207
// length := ( array - i_to ) + i_from ;
28185: LD_ADDR_VAR 0 11
28189: PUSH
28190: LD_VAR 0 1
28194: PUSH
28195: LD_VAR 0 3
28199: MINUS
28200: PUSH
28201: LD_VAR 0 2
28205: PLUS
28206: ST_TO_ADDR
// end ; if not length then
28207: LD_VAR 0 11
28211: NOT
28212: IFFALSE 28216
// exit ;
28214: GO 28374
// tmp := array ;
28216: LD_ADDR_VAR 0 10
28220: PUSH
28221: LD_VAR 0 1
28225: ST_TO_ADDR
// for i = 1 to length do
28226: LD_ADDR_VAR 0 6
28230: PUSH
28231: DOUBLE
28232: LD_INT 1
28234: DEC
28235: ST_TO_ADDR
28236: LD_VAR 0 11
28240: PUSH
28241: FOR_TO
28242: IFFALSE 28362
// begin for j = 1 to array do
28244: LD_ADDR_VAR 0 7
28248: PUSH
28249: DOUBLE
28250: LD_INT 1
28252: DEC
28253: ST_TO_ADDR
28254: LD_VAR 0 1
28258: PUSH
28259: FOR_TO
28260: IFFALSE 28348
// begin k := j + d ;
28262: LD_ADDR_VAR 0 8
28266: PUSH
28267: LD_VAR 0 7
28271: PUSH
28272: LD_VAR 0 9
28276: PLUS
28277: ST_TO_ADDR
// if k > array then
28278: LD_VAR 0 8
28282: PUSH
28283: LD_VAR 0 1
28287: GREATER
28288: IFFALSE 28298
// k := 1 ;
28290: LD_ADDR_VAR 0 8
28294: PUSH
28295: LD_INT 1
28297: ST_TO_ADDR
// if not k then
28298: LD_VAR 0 8
28302: NOT
28303: IFFALSE 28315
// k := array ;
28305: LD_ADDR_VAR 0 8
28309: PUSH
28310: LD_VAR 0 1
28314: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
28315: LD_ADDR_VAR 0 10
28319: PUSH
28320: LD_VAR 0 10
28324: PPUSH
28325: LD_VAR 0 8
28329: PPUSH
28330: LD_VAR 0 1
28334: PUSH
28335: LD_VAR 0 7
28339: ARRAY
28340: PPUSH
28341: CALL_OW 1
28345: ST_TO_ADDR
// end ;
28346: GO 28259
28348: POP
28349: POP
// array := tmp ;
28350: LD_ADDR_VAR 0 1
28354: PUSH
28355: LD_VAR 0 10
28359: ST_TO_ADDR
// end ;
28360: GO 28241
28362: POP
28363: POP
// result := array ;
28364: LD_ADDR_VAR 0 5
28368: PUSH
28369: LD_VAR 0 1
28373: ST_TO_ADDR
// end ;
28374: LD_VAR 0 5
28378: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
28379: LD_INT 0
28381: PPUSH
28382: PPUSH
// result := 0 ;
28383: LD_ADDR_VAR 0 3
28387: PUSH
28388: LD_INT 0
28390: ST_TO_ADDR
// if not array or not value in array then
28391: LD_VAR 0 1
28395: NOT
28396: PUSH
28397: LD_VAR 0 2
28401: PUSH
28402: LD_VAR 0 1
28406: IN
28407: NOT
28408: OR
28409: IFFALSE 28413
// exit ;
28411: GO 28467
// for i = 1 to array do
28413: LD_ADDR_VAR 0 4
28417: PUSH
28418: DOUBLE
28419: LD_INT 1
28421: DEC
28422: ST_TO_ADDR
28423: LD_VAR 0 1
28427: PUSH
28428: FOR_TO
28429: IFFALSE 28465
// if value = array [ i ] then
28431: LD_VAR 0 2
28435: PUSH
28436: LD_VAR 0 1
28440: PUSH
28441: LD_VAR 0 4
28445: ARRAY
28446: EQUAL
28447: IFFALSE 28463
// begin result := i ;
28449: LD_ADDR_VAR 0 3
28453: PUSH
28454: LD_VAR 0 4
28458: ST_TO_ADDR
// exit ;
28459: POP
28460: POP
28461: GO 28467
// end ;
28463: GO 28428
28465: POP
28466: POP
// end ;
28467: LD_VAR 0 3
28471: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
28472: LD_INT 0
28474: PPUSH
// vc_chassis := chassis ;
28475: LD_ADDR_OWVAR 37
28479: PUSH
28480: LD_VAR 0 1
28484: ST_TO_ADDR
// vc_engine := engine ;
28485: LD_ADDR_OWVAR 39
28489: PUSH
28490: LD_VAR 0 2
28494: ST_TO_ADDR
// vc_control := control ;
28495: LD_ADDR_OWVAR 38
28499: PUSH
28500: LD_VAR 0 3
28504: ST_TO_ADDR
// vc_weapon := weapon ;
28505: LD_ADDR_OWVAR 40
28509: PUSH
28510: LD_VAR 0 4
28514: ST_TO_ADDR
// vc_fuel_battery := fuel ;
28515: LD_ADDR_OWVAR 41
28519: PUSH
28520: LD_VAR 0 5
28524: ST_TO_ADDR
// end ;
28525: LD_VAR 0 6
28529: RET
// export function WantPlant ( unit ) ; var task ; begin
28530: LD_INT 0
28532: PPUSH
28533: PPUSH
// result := false ;
28534: LD_ADDR_VAR 0 2
28538: PUSH
28539: LD_INT 0
28541: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
28542: LD_ADDR_VAR 0 3
28546: PUSH
28547: LD_VAR 0 1
28551: PPUSH
28552: CALL_OW 437
28556: ST_TO_ADDR
// if task then
28557: LD_VAR 0 3
28561: IFFALSE 28589
// if task [ 1 ] [ 1 ] = p then
28563: LD_VAR 0 3
28567: PUSH
28568: LD_INT 1
28570: ARRAY
28571: PUSH
28572: LD_INT 1
28574: ARRAY
28575: PUSH
28576: LD_STRING p
28578: EQUAL
28579: IFFALSE 28589
// result := true ;
28581: LD_ADDR_VAR 0 2
28585: PUSH
28586: LD_INT 1
28588: ST_TO_ADDR
// end ;
28589: LD_VAR 0 2
28593: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
28594: LD_INT 0
28596: PPUSH
28597: PPUSH
28598: PPUSH
28599: PPUSH
// if pos < 1 then
28600: LD_VAR 0 2
28604: PUSH
28605: LD_INT 1
28607: LESS
28608: IFFALSE 28612
// exit ;
28610: GO 28915
// if pos = 1 then
28612: LD_VAR 0 2
28616: PUSH
28617: LD_INT 1
28619: EQUAL
28620: IFFALSE 28653
// result := Replace ( arr , pos [ 1 ] , value ) else
28622: LD_ADDR_VAR 0 4
28626: PUSH
28627: LD_VAR 0 1
28631: PPUSH
28632: LD_VAR 0 2
28636: PUSH
28637: LD_INT 1
28639: ARRAY
28640: PPUSH
28641: LD_VAR 0 3
28645: PPUSH
28646: CALL_OW 1
28650: ST_TO_ADDR
28651: GO 28915
// begin tmp := arr ;
28653: LD_ADDR_VAR 0 6
28657: PUSH
28658: LD_VAR 0 1
28662: ST_TO_ADDR
// s_arr := [ tmp ] ;
28663: LD_ADDR_VAR 0 7
28667: PUSH
28668: LD_VAR 0 6
28672: PUSH
28673: EMPTY
28674: LIST
28675: ST_TO_ADDR
// for i = 1 to pos - 1 do
28676: LD_ADDR_VAR 0 5
28680: PUSH
28681: DOUBLE
28682: LD_INT 1
28684: DEC
28685: ST_TO_ADDR
28686: LD_VAR 0 2
28690: PUSH
28691: LD_INT 1
28693: MINUS
28694: PUSH
28695: FOR_TO
28696: IFFALSE 28741
// begin tmp := tmp [ pos [ i ] ] ;
28698: LD_ADDR_VAR 0 6
28702: PUSH
28703: LD_VAR 0 6
28707: PUSH
28708: LD_VAR 0 2
28712: PUSH
28713: LD_VAR 0 5
28717: ARRAY
28718: ARRAY
28719: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
28720: LD_ADDR_VAR 0 7
28724: PUSH
28725: LD_VAR 0 7
28729: PUSH
28730: LD_VAR 0 6
28734: PUSH
28735: EMPTY
28736: LIST
28737: ADD
28738: ST_TO_ADDR
// end ;
28739: GO 28695
28741: POP
28742: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
28743: LD_ADDR_VAR 0 6
28747: PUSH
28748: LD_VAR 0 6
28752: PPUSH
28753: LD_VAR 0 2
28757: PUSH
28758: LD_VAR 0 2
28762: ARRAY
28763: PPUSH
28764: LD_VAR 0 3
28768: PPUSH
28769: CALL_OW 1
28773: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
28774: LD_ADDR_VAR 0 7
28778: PUSH
28779: LD_VAR 0 7
28783: PPUSH
28784: LD_VAR 0 7
28788: PPUSH
28789: LD_VAR 0 6
28793: PPUSH
28794: CALL_OW 1
28798: ST_TO_ADDR
// for i = s_arr downto 2 do
28799: LD_ADDR_VAR 0 5
28803: PUSH
28804: DOUBLE
28805: LD_VAR 0 7
28809: INC
28810: ST_TO_ADDR
28811: LD_INT 2
28813: PUSH
28814: FOR_DOWNTO
28815: IFFALSE 28899
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
28817: LD_ADDR_VAR 0 6
28821: PUSH
28822: LD_VAR 0 7
28826: PUSH
28827: LD_VAR 0 5
28831: PUSH
28832: LD_INT 1
28834: MINUS
28835: ARRAY
28836: PPUSH
28837: LD_VAR 0 2
28841: PUSH
28842: LD_VAR 0 5
28846: PUSH
28847: LD_INT 1
28849: MINUS
28850: ARRAY
28851: PPUSH
28852: LD_VAR 0 7
28856: PUSH
28857: LD_VAR 0 5
28861: ARRAY
28862: PPUSH
28863: CALL_OW 1
28867: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
28868: LD_ADDR_VAR 0 7
28872: PUSH
28873: LD_VAR 0 7
28877: PPUSH
28878: LD_VAR 0 5
28882: PUSH
28883: LD_INT 1
28885: MINUS
28886: PPUSH
28887: LD_VAR 0 6
28891: PPUSH
28892: CALL_OW 1
28896: ST_TO_ADDR
// end ;
28897: GO 28814
28899: POP
28900: POP
// result := s_arr [ 1 ] ;
28901: LD_ADDR_VAR 0 4
28905: PUSH
28906: LD_VAR 0 7
28910: PUSH
28911: LD_INT 1
28913: ARRAY
28914: ST_TO_ADDR
// end ; end ;
28915: LD_VAR 0 4
28919: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
28920: LD_INT 0
28922: PPUSH
28923: PPUSH
// if not list then
28924: LD_VAR 0 1
28928: NOT
28929: IFFALSE 28933
// exit ;
28931: GO 29024
// i := list [ pos1 ] ;
28933: LD_ADDR_VAR 0 5
28937: PUSH
28938: LD_VAR 0 1
28942: PUSH
28943: LD_VAR 0 2
28947: ARRAY
28948: ST_TO_ADDR
// if not i then
28949: LD_VAR 0 5
28953: NOT
28954: IFFALSE 28958
// exit ;
28956: GO 29024
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
28958: LD_ADDR_VAR 0 1
28962: PUSH
28963: LD_VAR 0 1
28967: PPUSH
28968: LD_VAR 0 2
28972: PPUSH
28973: LD_VAR 0 1
28977: PUSH
28978: LD_VAR 0 3
28982: ARRAY
28983: PPUSH
28984: CALL_OW 1
28988: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
28989: LD_ADDR_VAR 0 1
28993: PUSH
28994: LD_VAR 0 1
28998: PPUSH
28999: LD_VAR 0 3
29003: PPUSH
29004: LD_VAR 0 5
29008: PPUSH
29009: CALL_OW 1
29013: ST_TO_ADDR
// result := list ;
29014: LD_ADDR_VAR 0 4
29018: PUSH
29019: LD_VAR 0 1
29023: ST_TO_ADDR
// end ;
29024: LD_VAR 0 4
29028: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29029: LD_INT 0
29031: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29032: LD_ADDR_VAR 0 5
29036: PUSH
29037: LD_VAR 0 1
29041: PPUSH
29042: CALL_OW 250
29046: PPUSH
29047: LD_VAR 0 1
29051: PPUSH
29052: CALL_OW 251
29056: PPUSH
29057: LD_VAR 0 2
29061: PPUSH
29062: LD_VAR 0 3
29066: PPUSH
29067: LD_VAR 0 4
29071: PPUSH
29072: CALL 29082 0 5
29076: ST_TO_ADDR
// end ;
29077: LD_VAR 0 5
29081: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
29082: LD_INT 0
29084: PPUSH
29085: PPUSH
29086: PPUSH
29087: PPUSH
// if not list then
29088: LD_VAR 0 3
29092: NOT
29093: IFFALSE 29097
// exit ;
29095: GO 29485
// result := [ ] ;
29097: LD_ADDR_VAR 0 6
29101: PUSH
29102: EMPTY
29103: ST_TO_ADDR
// for i in list do
29104: LD_ADDR_VAR 0 7
29108: PUSH
29109: LD_VAR 0 3
29113: PUSH
29114: FOR_IN
29115: IFFALSE 29317
// begin tmp := GetDistUnitXY ( i , x , y ) ;
29117: LD_ADDR_VAR 0 9
29121: PUSH
29122: LD_VAR 0 7
29126: PPUSH
29127: LD_VAR 0 1
29131: PPUSH
29132: LD_VAR 0 2
29136: PPUSH
29137: CALL_OW 297
29141: ST_TO_ADDR
// if not result then
29142: LD_VAR 0 6
29146: NOT
29147: IFFALSE 29173
// result := [ [ i , tmp ] ] else
29149: LD_ADDR_VAR 0 6
29153: PUSH
29154: LD_VAR 0 7
29158: PUSH
29159: LD_VAR 0 9
29163: PUSH
29164: EMPTY
29165: LIST
29166: LIST
29167: PUSH
29168: EMPTY
29169: LIST
29170: ST_TO_ADDR
29171: GO 29315
// begin if result [ result ] [ 2 ] < tmp then
29173: LD_VAR 0 6
29177: PUSH
29178: LD_VAR 0 6
29182: ARRAY
29183: PUSH
29184: LD_INT 2
29186: ARRAY
29187: PUSH
29188: LD_VAR 0 9
29192: LESS
29193: IFFALSE 29235
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
29195: LD_ADDR_VAR 0 6
29199: PUSH
29200: LD_VAR 0 6
29204: PPUSH
29205: LD_VAR 0 6
29209: PUSH
29210: LD_INT 1
29212: PLUS
29213: PPUSH
29214: LD_VAR 0 7
29218: PUSH
29219: LD_VAR 0 9
29223: PUSH
29224: EMPTY
29225: LIST
29226: LIST
29227: PPUSH
29228: CALL_OW 2
29232: ST_TO_ADDR
29233: GO 29315
// for j = 1 to result do
29235: LD_ADDR_VAR 0 8
29239: PUSH
29240: DOUBLE
29241: LD_INT 1
29243: DEC
29244: ST_TO_ADDR
29245: LD_VAR 0 6
29249: PUSH
29250: FOR_TO
29251: IFFALSE 29313
// begin if tmp < result [ j ] [ 2 ] then
29253: LD_VAR 0 9
29257: PUSH
29258: LD_VAR 0 6
29262: PUSH
29263: LD_VAR 0 8
29267: ARRAY
29268: PUSH
29269: LD_INT 2
29271: ARRAY
29272: LESS
29273: IFFALSE 29311
// begin result := Insert ( result , j , [ i , tmp ] ) ;
29275: LD_ADDR_VAR 0 6
29279: PUSH
29280: LD_VAR 0 6
29284: PPUSH
29285: LD_VAR 0 8
29289: PPUSH
29290: LD_VAR 0 7
29294: PUSH
29295: LD_VAR 0 9
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: PPUSH
29304: CALL_OW 2
29308: ST_TO_ADDR
// break ;
29309: GO 29313
// end ; end ;
29311: GO 29250
29313: POP
29314: POP
// end ; end ;
29315: GO 29114
29317: POP
29318: POP
// if result and not asc then
29319: LD_VAR 0 6
29323: PUSH
29324: LD_VAR 0 4
29328: NOT
29329: AND
29330: IFFALSE 29405
// begin tmp := result ;
29332: LD_ADDR_VAR 0 9
29336: PUSH
29337: LD_VAR 0 6
29341: ST_TO_ADDR
// for i = tmp downto 1 do
29342: LD_ADDR_VAR 0 7
29346: PUSH
29347: DOUBLE
29348: LD_VAR 0 9
29352: INC
29353: ST_TO_ADDR
29354: LD_INT 1
29356: PUSH
29357: FOR_DOWNTO
29358: IFFALSE 29403
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
29360: LD_ADDR_VAR 0 6
29364: PUSH
29365: LD_VAR 0 6
29369: PPUSH
29370: LD_VAR 0 9
29374: PUSH
29375: LD_VAR 0 7
29379: MINUS
29380: PUSH
29381: LD_INT 1
29383: PLUS
29384: PPUSH
29385: LD_VAR 0 9
29389: PUSH
29390: LD_VAR 0 7
29394: ARRAY
29395: PPUSH
29396: CALL_OW 1
29400: ST_TO_ADDR
29401: GO 29357
29403: POP
29404: POP
// end ; tmp := [ ] ;
29405: LD_ADDR_VAR 0 9
29409: PUSH
29410: EMPTY
29411: ST_TO_ADDR
// if mode then
29412: LD_VAR 0 5
29416: IFFALSE 29485
// begin for i = 1 to result do
29418: LD_ADDR_VAR 0 7
29422: PUSH
29423: DOUBLE
29424: LD_INT 1
29426: DEC
29427: ST_TO_ADDR
29428: LD_VAR 0 6
29432: PUSH
29433: FOR_TO
29434: IFFALSE 29473
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
29436: LD_ADDR_VAR 0 9
29440: PUSH
29441: LD_VAR 0 9
29445: PPUSH
29446: LD_VAR 0 7
29450: PPUSH
29451: LD_VAR 0 6
29455: PUSH
29456: LD_VAR 0 7
29460: ARRAY
29461: PUSH
29462: LD_INT 1
29464: ARRAY
29465: PPUSH
29466: CALL_OW 1
29470: ST_TO_ADDR
29471: GO 29433
29473: POP
29474: POP
// result := tmp ;
29475: LD_ADDR_VAR 0 6
29479: PUSH
29480: LD_VAR 0 9
29484: ST_TO_ADDR
// end ; end ;
29485: LD_VAR 0 6
29489: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
29490: LD_INT 0
29492: PPUSH
29493: PPUSH
29494: PPUSH
29495: PPUSH
29496: PPUSH
29497: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
29498: LD_ADDR_VAR 0 5
29502: PUSH
29503: LD_INT 0
29505: PUSH
29506: LD_INT 0
29508: PUSH
29509: LD_INT 0
29511: PUSH
29512: EMPTY
29513: PUSH
29514: EMPTY
29515: LIST
29516: LIST
29517: LIST
29518: LIST
29519: ST_TO_ADDR
// if not x or not y then
29520: LD_VAR 0 2
29524: NOT
29525: PUSH
29526: LD_VAR 0 3
29530: NOT
29531: OR
29532: IFFALSE 29536
// exit ;
29534: GO 31186
// if not range then
29536: LD_VAR 0 4
29540: NOT
29541: IFFALSE 29551
// range := 10 ;
29543: LD_ADDR_VAR 0 4
29547: PUSH
29548: LD_INT 10
29550: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29551: LD_ADDR_VAR 0 8
29555: PUSH
29556: LD_INT 81
29558: PUSH
29559: LD_VAR 0 1
29563: PUSH
29564: EMPTY
29565: LIST
29566: LIST
29567: PUSH
29568: LD_INT 92
29570: PUSH
29571: LD_VAR 0 2
29575: PUSH
29576: LD_VAR 0 3
29580: PUSH
29581: LD_VAR 0 4
29585: PUSH
29586: EMPTY
29587: LIST
29588: LIST
29589: LIST
29590: LIST
29591: PUSH
29592: LD_INT 3
29594: PUSH
29595: LD_INT 21
29597: PUSH
29598: LD_INT 3
29600: PUSH
29601: EMPTY
29602: LIST
29603: LIST
29604: PUSH
29605: EMPTY
29606: LIST
29607: LIST
29608: PUSH
29609: EMPTY
29610: LIST
29611: LIST
29612: LIST
29613: PPUSH
29614: CALL_OW 69
29618: ST_TO_ADDR
// if not tmp then
29619: LD_VAR 0 8
29623: NOT
29624: IFFALSE 29628
// exit ;
29626: GO 31186
// for i in tmp do
29628: LD_ADDR_VAR 0 6
29632: PUSH
29633: LD_VAR 0 8
29637: PUSH
29638: FOR_IN
29639: IFFALSE 31161
// begin points := [ 0 , 0 , 0 ] ;
29641: LD_ADDR_VAR 0 9
29645: PUSH
29646: LD_INT 0
29648: PUSH
29649: LD_INT 0
29651: PUSH
29652: LD_INT 0
29654: PUSH
29655: EMPTY
29656: LIST
29657: LIST
29658: LIST
29659: ST_TO_ADDR
// bpoints := 1 ;
29660: LD_ADDR_VAR 0 10
29664: PUSH
29665: LD_INT 1
29667: ST_TO_ADDR
// case GetType ( i ) of unit_human :
29668: LD_VAR 0 6
29672: PPUSH
29673: CALL_OW 247
29677: PUSH
29678: LD_INT 1
29680: DOUBLE
29681: EQUAL
29682: IFTRUE 29686
29684: GO 30264
29686: POP
// begin if GetClass ( i ) = 1 then
29687: LD_VAR 0 6
29691: PPUSH
29692: CALL_OW 257
29696: PUSH
29697: LD_INT 1
29699: EQUAL
29700: IFFALSE 29721
// points := [ 10 , 5 , 3 ] ;
29702: LD_ADDR_VAR 0 9
29706: PUSH
29707: LD_INT 10
29709: PUSH
29710: LD_INT 5
29712: PUSH
29713: LD_INT 3
29715: PUSH
29716: EMPTY
29717: LIST
29718: LIST
29719: LIST
29720: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
29721: LD_VAR 0 6
29725: PPUSH
29726: CALL_OW 257
29730: PUSH
29731: LD_INT 2
29733: PUSH
29734: LD_INT 3
29736: PUSH
29737: LD_INT 4
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: LIST
29744: IN
29745: IFFALSE 29766
// points := [ 3 , 2 , 1 ] ;
29747: LD_ADDR_VAR 0 9
29751: PUSH
29752: LD_INT 3
29754: PUSH
29755: LD_INT 2
29757: PUSH
29758: LD_INT 1
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: LIST
29765: ST_TO_ADDR
// if GetClass ( i ) = 5 then
29766: LD_VAR 0 6
29770: PPUSH
29771: CALL_OW 257
29775: PUSH
29776: LD_INT 5
29778: EQUAL
29779: IFFALSE 29800
// points := [ 130 , 5 , 2 ] ;
29781: LD_ADDR_VAR 0 9
29785: PUSH
29786: LD_INT 130
29788: PUSH
29789: LD_INT 5
29791: PUSH
29792: LD_INT 2
29794: PUSH
29795: EMPTY
29796: LIST
29797: LIST
29798: LIST
29799: ST_TO_ADDR
// if GetClass ( i ) = 8 then
29800: LD_VAR 0 6
29804: PPUSH
29805: CALL_OW 257
29809: PUSH
29810: LD_INT 8
29812: EQUAL
29813: IFFALSE 29834
// points := [ 35 , 35 , 30 ] ;
29815: LD_ADDR_VAR 0 9
29819: PUSH
29820: LD_INT 35
29822: PUSH
29823: LD_INT 35
29825: PUSH
29826: LD_INT 30
29828: PUSH
29829: EMPTY
29830: LIST
29831: LIST
29832: LIST
29833: ST_TO_ADDR
// if GetClass ( i ) = 9 then
29834: LD_VAR 0 6
29838: PPUSH
29839: CALL_OW 257
29843: PUSH
29844: LD_INT 9
29846: EQUAL
29847: IFFALSE 29868
// points := [ 20 , 55 , 40 ] ;
29849: LD_ADDR_VAR 0 9
29853: PUSH
29854: LD_INT 20
29856: PUSH
29857: LD_INT 55
29859: PUSH
29860: LD_INT 40
29862: PUSH
29863: EMPTY
29864: LIST
29865: LIST
29866: LIST
29867: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
29868: LD_VAR 0 6
29872: PPUSH
29873: CALL_OW 257
29877: PUSH
29878: LD_INT 12
29880: PUSH
29881: LD_INT 16
29883: PUSH
29884: EMPTY
29885: LIST
29886: LIST
29887: IN
29888: IFFALSE 29909
// points := [ 5 , 3 , 2 ] ;
29890: LD_ADDR_VAR 0 9
29894: PUSH
29895: LD_INT 5
29897: PUSH
29898: LD_INT 3
29900: PUSH
29901: LD_INT 2
29903: PUSH
29904: EMPTY
29905: LIST
29906: LIST
29907: LIST
29908: ST_TO_ADDR
// if GetClass ( i ) = 17 then
29909: LD_VAR 0 6
29913: PPUSH
29914: CALL_OW 257
29918: PUSH
29919: LD_INT 17
29921: EQUAL
29922: IFFALSE 29943
// points := [ 100 , 50 , 75 ] ;
29924: LD_ADDR_VAR 0 9
29928: PUSH
29929: LD_INT 100
29931: PUSH
29932: LD_INT 50
29934: PUSH
29935: LD_INT 75
29937: PUSH
29938: EMPTY
29939: LIST
29940: LIST
29941: LIST
29942: ST_TO_ADDR
// if GetClass ( i ) = 15 then
29943: LD_VAR 0 6
29947: PPUSH
29948: CALL_OW 257
29952: PUSH
29953: LD_INT 15
29955: EQUAL
29956: IFFALSE 29977
// points := [ 10 , 5 , 3 ] ;
29958: LD_ADDR_VAR 0 9
29962: PUSH
29963: LD_INT 10
29965: PUSH
29966: LD_INT 5
29968: PUSH
29969: LD_INT 3
29971: PUSH
29972: EMPTY
29973: LIST
29974: LIST
29975: LIST
29976: ST_TO_ADDR
// if GetClass ( i ) = 14 then
29977: LD_VAR 0 6
29981: PPUSH
29982: CALL_OW 257
29986: PUSH
29987: LD_INT 14
29989: EQUAL
29990: IFFALSE 30011
// points := [ 10 , 0 , 0 ] ;
29992: LD_ADDR_VAR 0 9
29996: PUSH
29997: LD_INT 10
29999: PUSH
30000: LD_INT 0
30002: PUSH
30003: LD_INT 0
30005: PUSH
30006: EMPTY
30007: LIST
30008: LIST
30009: LIST
30010: ST_TO_ADDR
// if GetClass ( i ) = 11 then
30011: LD_VAR 0 6
30015: PPUSH
30016: CALL_OW 257
30020: PUSH
30021: LD_INT 11
30023: EQUAL
30024: IFFALSE 30045
// points := [ 30 , 10 , 5 ] ;
30026: LD_ADDR_VAR 0 9
30030: PUSH
30031: LD_INT 30
30033: PUSH
30034: LD_INT 10
30036: PUSH
30037: LD_INT 5
30039: PUSH
30040: EMPTY
30041: LIST
30042: LIST
30043: LIST
30044: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
30045: LD_VAR 0 1
30049: PPUSH
30050: LD_INT 5
30052: PPUSH
30053: CALL_OW 321
30057: PUSH
30058: LD_INT 2
30060: EQUAL
30061: IFFALSE 30078
// bpoints := bpoints * 1.8 ;
30063: LD_ADDR_VAR 0 10
30067: PUSH
30068: LD_VAR 0 10
30072: PUSH
30073: LD_REAL  1.80000000000000E+0000
30076: MUL
30077: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
30078: LD_VAR 0 6
30082: PPUSH
30083: CALL_OW 257
30087: PUSH
30088: LD_INT 1
30090: PUSH
30091: LD_INT 2
30093: PUSH
30094: LD_INT 3
30096: PUSH
30097: LD_INT 4
30099: PUSH
30100: EMPTY
30101: LIST
30102: LIST
30103: LIST
30104: LIST
30105: IN
30106: PUSH
30107: LD_VAR 0 1
30111: PPUSH
30112: LD_INT 51
30114: PPUSH
30115: CALL_OW 321
30119: PUSH
30120: LD_INT 2
30122: EQUAL
30123: AND
30124: IFFALSE 30141
// bpoints := bpoints * 1.2 ;
30126: LD_ADDR_VAR 0 10
30130: PUSH
30131: LD_VAR 0 10
30135: PUSH
30136: LD_REAL  1.20000000000000E+0000
30139: MUL
30140: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
30141: LD_VAR 0 6
30145: PPUSH
30146: CALL_OW 257
30150: PUSH
30151: LD_INT 5
30153: PUSH
30154: LD_INT 7
30156: PUSH
30157: LD_INT 9
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: LIST
30164: IN
30165: PUSH
30166: LD_VAR 0 1
30170: PPUSH
30171: LD_INT 52
30173: PPUSH
30174: CALL_OW 321
30178: PUSH
30179: LD_INT 2
30181: EQUAL
30182: AND
30183: IFFALSE 30200
// bpoints := bpoints * 1.5 ;
30185: LD_ADDR_VAR 0 10
30189: PUSH
30190: LD_VAR 0 10
30194: PUSH
30195: LD_REAL  1.50000000000000E+0000
30198: MUL
30199: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
30200: LD_VAR 0 1
30204: PPUSH
30205: LD_INT 66
30207: PPUSH
30208: CALL_OW 321
30212: PUSH
30213: LD_INT 2
30215: EQUAL
30216: IFFALSE 30233
// bpoints := bpoints * 1.1 ;
30218: LD_ADDR_VAR 0 10
30222: PUSH
30223: LD_VAR 0 10
30227: PUSH
30228: LD_REAL  1.10000000000000E+0000
30231: MUL
30232: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
30233: LD_ADDR_VAR 0 10
30237: PUSH
30238: LD_VAR 0 10
30242: PUSH
30243: LD_VAR 0 6
30247: PPUSH
30248: LD_INT 1
30250: PPUSH
30251: CALL_OW 259
30255: PUSH
30256: LD_REAL  1.15000000000000E+0000
30259: MUL
30260: MUL
30261: ST_TO_ADDR
// end ; unit_vehicle :
30262: GO 31090
30264: LD_INT 2
30266: DOUBLE
30267: EQUAL
30268: IFTRUE 30272
30270: GO 31078
30272: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
30273: LD_VAR 0 6
30277: PPUSH
30278: CALL_OW 264
30282: PUSH
30283: LD_INT 2
30285: PUSH
30286: LD_INT 42
30288: PUSH
30289: LD_INT 24
30291: PUSH
30292: EMPTY
30293: LIST
30294: LIST
30295: LIST
30296: IN
30297: IFFALSE 30318
// points := [ 25 , 5 , 3 ] ;
30299: LD_ADDR_VAR 0 9
30303: PUSH
30304: LD_INT 25
30306: PUSH
30307: LD_INT 5
30309: PUSH
30310: LD_INT 3
30312: PUSH
30313: EMPTY
30314: LIST
30315: LIST
30316: LIST
30317: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
30318: LD_VAR 0 6
30322: PPUSH
30323: CALL_OW 264
30327: PUSH
30328: LD_INT 4
30330: PUSH
30331: LD_INT 43
30333: PUSH
30334: LD_INT 25
30336: PUSH
30337: EMPTY
30338: LIST
30339: LIST
30340: LIST
30341: IN
30342: IFFALSE 30363
// points := [ 40 , 15 , 5 ] ;
30344: LD_ADDR_VAR 0 9
30348: PUSH
30349: LD_INT 40
30351: PUSH
30352: LD_INT 15
30354: PUSH
30355: LD_INT 5
30357: PUSH
30358: EMPTY
30359: LIST
30360: LIST
30361: LIST
30362: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
30363: LD_VAR 0 6
30367: PPUSH
30368: CALL_OW 264
30372: PUSH
30373: LD_INT 3
30375: PUSH
30376: LD_INT 23
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: IN
30383: IFFALSE 30404
// points := [ 7 , 25 , 8 ] ;
30385: LD_ADDR_VAR 0 9
30389: PUSH
30390: LD_INT 7
30392: PUSH
30393: LD_INT 25
30395: PUSH
30396: LD_INT 8
30398: PUSH
30399: EMPTY
30400: LIST
30401: LIST
30402: LIST
30403: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
30404: LD_VAR 0 6
30408: PPUSH
30409: CALL_OW 264
30413: PUSH
30414: LD_INT 5
30416: PUSH
30417: LD_INT 27
30419: PUSH
30420: LD_INT 44
30422: PUSH
30423: EMPTY
30424: LIST
30425: LIST
30426: LIST
30427: IN
30428: IFFALSE 30449
// points := [ 14 , 50 , 16 ] ;
30430: LD_ADDR_VAR 0 9
30434: PUSH
30435: LD_INT 14
30437: PUSH
30438: LD_INT 50
30440: PUSH
30441: LD_INT 16
30443: PUSH
30444: EMPTY
30445: LIST
30446: LIST
30447: LIST
30448: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
30449: LD_VAR 0 6
30453: PPUSH
30454: CALL_OW 264
30458: PUSH
30459: LD_INT 6
30461: PUSH
30462: LD_INT 46
30464: PUSH
30465: EMPTY
30466: LIST
30467: LIST
30468: IN
30469: IFFALSE 30490
// points := [ 32 , 120 , 70 ] ;
30471: LD_ADDR_VAR 0 9
30475: PUSH
30476: LD_INT 32
30478: PUSH
30479: LD_INT 120
30481: PUSH
30482: LD_INT 70
30484: PUSH
30485: EMPTY
30486: LIST
30487: LIST
30488: LIST
30489: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
30490: LD_VAR 0 6
30494: PPUSH
30495: CALL_OW 264
30499: PUSH
30500: LD_INT 7
30502: PUSH
30503: LD_INT 28
30505: PUSH
30506: LD_INT 45
30508: PUSH
30509: LD_INT 92
30511: PUSH
30512: EMPTY
30513: LIST
30514: LIST
30515: LIST
30516: LIST
30517: IN
30518: IFFALSE 30539
// points := [ 35 , 20 , 45 ] ;
30520: LD_ADDR_VAR 0 9
30524: PUSH
30525: LD_INT 35
30527: PUSH
30528: LD_INT 20
30530: PUSH
30531: LD_INT 45
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: LIST
30538: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
30539: LD_VAR 0 6
30543: PPUSH
30544: CALL_OW 264
30548: PUSH
30549: LD_INT 47
30551: PUSH
30552: EMPTY
30553: LIST
30554: IN
30555: IFFALSE 30576
// points := [ 67 , 45 , 75 ] ;
30557: LD_ADDR_VAR 0 9
30561: PUSH
30562: LD_INT 67
30564: PUSH
30565: LD_INT 45
30567: PUSH
30568: LD_INT 75
30570: PUSH
30571: EMPTY
30572: LIST
30573: LIST
30574: LIST
30575: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
30576: LD_VAR 0 6
30580: PPUSH
30581: CALL_OW 264
30585: PUSH
30586: LD_INT 26
30588: PUSH
30589: EMPTY
30590: LIST
30591: IN
30592: IFFALSE 30613
// points := [ 120 , 30 , 80 ] ;
30594: LD_ADDR_VAR 0 9
30598: PUSH
30599: LD_INT 120
30601: PUSH
30602: LD_INT 30
30604: PUSH
30605: LD_INT 80
30607: PUSH
30608: EMPTY
30609: LIST
30610: LIST
30611: LIST
30612: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
30613: LD_VAR 0 6
30617: PPUSH
30618: CALL_OW 264
30622: PUSH
30623: LD_INT 22
30625: PUSH
30626: EMPTY
30627: LIST
30628: IN
30629: IFFALSE 30650
// points := [ 40 , 1 , 1 ] ;
30631: LD_ADDR_VAR 0 9
30635: PUSH
30636: LD_INT 40
30638: PUSH
30639: LD_INT 1
30641: PUSH
30642: LD_INT 1
30644: PUSH
30645: EMPTY
30646: LIST
30647: LIST
30648: LIST
30649: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
30650: LD_VAR 0 6
30654: PPUSH
30655: CALL_OW 264
30659: PUSH
30660: LD_INT 29
30662: PUSH
30663: EMPTY
30664: LIST
30665: IN
30666: IFFALSE 30687
// points := [ 70 , 200 , 400 ] ;
30668: LD_ADDR_VAR 0 9
30672: PUSH
30673: LD_INT 70
30675: PUSH
30676: LD_INT 200
30678: PUSH
30679: LD_INT 400
30681: PUSH
30682: EMPTY
30683: LIST
30684: LIST
30685: LIST
30686: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
30687: LD_VAR 0 6
30691: PPUSH
30692: CALL_OW 264
30696: PUSH
30697: LD_INT 14
30699: PUSH
30700: LD_INT 53
30702: PUSH
30703: EMPTY
30704: LIST
30705: LIST
30706: IN
30707: IFFALSE 30728
// points := [ 40 , 10 , 20 ] ;
30709: LD_ADDR_VAR 0 9
30713: PUSH
30714: LD_INT 40
30716: PUSH
30717: LD_INT 10
30719: PUSH
30720: LD_INT 20
30722: PUSH
30723: EMPTY
30724: LIST
30725: LIST
30726: LIST
30727: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
30728: LD_VAR 0 6
30732: PPUSH
30733: CALL_OW 264
30737: PUSH
30738: LD_INT 9
30740: PUSH
30741: EMPTY
30742: LIST
30743: IN
30744: IFFALSE 30765
// points := [ 5 , 70 , 20 ] ;
30746: LD_ADDR_VAR 0 9
30750: PUSH
30751: LD_INT 5
30753: PUSH
30754: LD_INT 70
30756: PUSH
30757: LD_INT 20
30759: PUSH
30760: EMPTY
30761: LIST
30762: LIST
30763: LIST
30764: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
30765: LD_VAR 0 6
30769: PPUSH
30770: CALL_OW 264
30774: PUSH
30775: LD_INT 10
30777: PUSH
30778: EMPTY
30779: LIST
30780: IN
30781: IFFALSE 30802
// points := [ 35 , 110 , 70 ] ;
30783: LD_ADDR_VAR 0 9
30787: PUSH
30788: LD_INT 35
30790: PUSH
30791: LD_INT 110
30793: PUSH
30794: LD_INT 70
30796: PUSH
30797: EMPTY
30798: LIST
30799: LIST
30800: LIST
30801: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
30802: LD_VAR 0 6
30806: PPUSH
30807: CALL_OW 265
30811: PUSH
30812: LD_INT 25
30814: EQUAL
30815: IFFALSE 30836
// points := [ 80 , 65 , 100 ] ;
30817: LD_ADDR_VAR 0 9
30821: PUSH
30822: LD_INT 80
30824: PUSH
30825: LD_INT 65
30827: PUSH
30828: LD_INT 100
30830: PUSH
30831: EMPTY
30832: LIST
30833: LIST
30834: LIST
30835: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
30836: LD_VAR 0 6
30840: PPUSH
30841: CALL_OW 263
30845: PUSH
30846: LD_INT 1
30848: EQUAL
30849: IFFALSE 30884
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
30851: LD_ADDR_VAR 0 10
30855: PUSH
30856: LD_VAR 0 10
30860: PUSH
30861: LD_VAR 0 6
30865: PPUSH
30866: CALL_OW 311
30870: PPUSH
30871: LD_INT 3
30873: PPUSH
30874: CALL_OW 259
30878: PUSH
30879: LD_INT 4
30881: MUL
30882: MUL
30883: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
30884: LD_VAR 0 6
30888: PPUSH
30889: CALL_OW 263
30893: PUSH
30894: LD_INT 2
30896: EQUAL
30897: IFFALSE 30948
// begin j := IsControledBy ( i ) ;
30899: LD_ADDR_VAR 0 7
30903: PUSH
30904: LD_VAR 0 6
30908: PPUSH
30909: CALL_OW 312
30913: ST_TO_ADDR
// if j then
30914: LD_VAR 0 7
30918: IFFALSE 30948
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
30920: LD_ADDR_VAR 0 10
30924: PUSH
30925: LD_VAR 0 10
30929: PUSH
30930: LD_VAR 0 7
30934: PPUSH
30935: LD_INT 3
30937: PPUSH
30938: CALL_OW 259
30942: PUSH
30943: LD_INT 3
30945: MUL
30946: MUL
30947: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
30948: LD_VAR 0 6
30952: PPUSH
30953: CALL_OW 264
30957: PUSH
30958: LD_INT 5
30960: PUSH
30961: LD_INT 6
30963: PUSH
30964: LD_INT 46
30966: PUSH
30967: LD_INT 44
30969: PUSH
30970: LD_INT 47
30972: PUSH
30973: LD_INT 45
30975: PUSH
30976: LD_INT 28
30978: PUSH
30979: LD_INT 7
30981: PUSH
30982: LD_INT 27
30984: PUSH
30985: LD_INT 29
30987: PUSH
30988: EMPTY
30989: LIST
30990: LIST
30991: LIST
30992: LIST
30993: LIST
30994: LIST
30995: LIST
30996: LIST
30997: LIST
30998: LIST
30999: IN
31000: PUSH
31001: LD_VAR 0 1
31005: PPUSH
31006: LD_INT 52
31008: PPUSH
31009: CALL_OW 321
31013: PUSH
31014: LD_INT 2
31016: EQUAL
31017: AND
31018: IFFALSE 31035
// bpoints := bpoints * 1.2 ;
31020: LD_ADDR_VAR 0 10
31024: PUSH
31025: LD_VAR 0 10
31029: PUSH
31030: LD_REAL  1.20000000000000E+0000
31033: MUL
31034: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
31035: LD_VAR 0 6
31039: PPUSH
31040: CALL_OW 264
31044: PUSH
31045: LD_INT 6
31047: PUSH
31048: LD_INT 46
31050: PUSH
31051: LD_INT 47
31053: PUSH
31054: EMPTY
31055: LIST
31056: LIST
31057: LIST
31058: IN
31059: IFFALSE 31076
// bpoints := bpoints * 1.2 ;
31061: LD_ADDR_VAR 0 10
31065: PUSH
31066: LD_VAR 0 10
31070: PUSH
31071: LD_REAL  1.20000000000000E+0000
31074: MUL
31075: ST_TO_ADDR
// end ; unit_building :
31076: GO 31090
31078: LD_INT 3
31080: DOUBLE
31081: EQUAL
31082: IFTRUE 31086
31084: GO 31089
31086: POP
// ; end ;
31087: GO 31090
31089: POP
// for j = 1 to 3 do
31090: LD_ADDR_VAR 0 7
31094: PUSH
31095: DOUBLE
31096: LD_INT 1
31098: DEC
31099: ST_TO_ADDR
31100: LD_INT 3
31102: PUSH
31103: FOR_TO
31104: IFFALSE 31157
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
31106: LD_ADDR_VAR 0 5
31110: PUSH
31111: LD_VAR 0 5
31115: PPUSH
31116: LD_VAR 0 7
31120: PPUSH
31121: LD_VAR 0 5
31125: PUSH
31126: LD_VAR 0 7
31130: ARRAY
31131: PUSH
31132: LD_VAR 0 9
31136: PUSH
31137: LD_VAR 0 7
31141: ARRAY
31142: PUSH
31143: LD_VAR 0 10
31147: MUL
31148: PLUS
31149: PPUSH
31150: CALL_OW 1
31154: ST_TO_ADDR
31155: GO 31103
31157: POP
31158: POP
// end ;
31159: GO 29638
31161: POP
31162: POP
// result := Replace ( result , 4 , tmp ) ;
31163: LD_ADDR_VAR 0 5
31167: PUSH
31168: LD_VAR 0 5
31172: PPUSH
31173: LD_INT 4
31175: PPUSH
31176: LD_VAR 0 8
31180: PPUSH
31181: CALL_OW 1
31185: ST_TO_ADDR
// end ;
31186: LD_VAR 0 5
31190: RET
// export function DangerAtRange ( unit , range ) ; begin
31191: LD_INT 0
31193: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
31194: LD_ADDR_VAR 0 3
31198: PUSH
31199: LD_VAR 0 1
31203: PPUSH
31204: CALL_OW 255
31208: PPUSH
31209: LD_VAR 0 1
31213: PPUSH
31214: CALL_OW 250
31218: PPUSH
31219: LD_VAR 0 1
31223: PPUSH
31224: CALL_OW 251
31228: PPUSH
31229: LD_VAR 0 2
31233: PPUSH
31234: CALL 29490 0 4
31238: ST_TO_ADDR
// end ;
31239: LD_VAR 0 3
31243: RET
// export function DangerInArea ( side , area ) ; begin
31244: LD_INT 0
31246: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
31247: LD_ADDR_VAR 0 3
31251: PUSH
31252: LD_VAR 0 2
31256: PPUSH
31257: LD_INT 81
31259: PUSH
31260: LD_VAR 0 1
31264: PUSH
31265: EMPTY
31266: LIST
31267: LIST
31268: PPUSH
31269: CALL_OW 70
31273: ST_TO_ADDR
// end ;
31274: LD_VAR 0 3
31278: RET
// export function IsExtension ( b ) ; begin
31279: LD_INT 0
31281: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
31282: LD_ADDR_VAR 0 2
31286: PUSH
31287: LD_VAR 0 1
31291: PUSH
31292: LD_INT 23
31294: PUSH
31295: LD_INT 20
31297: PUSH
31298: LD_INT 22
31300: PUSH
31301: LD_INT 17
31303: PUSH
31304: LD_INT 24
31306: PUSH
31307: LD_INT 21
31309: PUSH
31310: LD_INT 19
31312: PUSH
31313: LD_INT 16
31315: PUSH
31316: LD_INT 25
31318: PUSH
31319: LD_INT 18
31321: PUSH
31322: EMPTY
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: LIST
31333: IN
31334: ST_TO_ADDR
// end ;
31335: LD_VAR 0 2
31339: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
31340: LD_INT 0
31342: PPUSH
31343: PPUSH
31344: PPUSH
// result := [ ] ;
31345: LD_ADDR_VAR 0 4
31349: PUSH
31350: EMPTY
31351: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
31352: LD_ADDR_VAR 0 5
31356: PUSH
31357: LD_VAR 0 2
31361: PPUSH
31362: LD_INT 21
31364: PUSH
31365: LD_INT 3
31367: PUSH
31368: EMPTY
31369: LIST
31370: LIST
31371: PPUSH
31372: CALL_OW 70
31376: ST_TO_ADDR
// if not tmp then
31377: LD_VAR 0 5
31381: NOT
31382: IFFALSE 31386
// exit ;
31384: GO 31450
// if checkLink then
31386: LD_VAR 0 3
31390: IFFALSE 31440
// begin for i in tmp do
31392: LD_ADDR_VAR 0 6
31396: PUSH
31397: LD_VAR 0 5
31401: PUSH
31402: FOR_IN
31403: IFFALSE 31438
// if GetBase ( i ) <> base then
31405: LD_VAR 0 6
31409: PPUSH
31410: CALL_OW 274
31414: PUSH
31415: LD_VAR 0 1
31419: NONEQUAL
31420: IFFALSE 31436
// ComLinkToBase ( base , i ) ;
31422: LD_VAR 0 1
31426: PPUSH
31427: LD_VAR 0 6
31431: PPUSH
31432: CALL_OW 169
31436: GO 31402
31438: POP
31439: POP
// end ; result := tmp ;
31440: LD_ADDR_VAR 0 4
31444: PUSH
31445: LD_VAR 0 5
31449: ST_TO_ADDR
// end ;
31450: LD_VAR 0 4
31454: RET
// export function ComComplete ( units , b ) ; var i ; begin
31455: LD_INT 0
31457: PPUSH
31458: PPUSH
// if not units then
31459: LD_VAR 0 1
31463: NOT
31464: IFFALSE 31468
// exit ;
31466: GO 31558
// for i in units do
31468: LD_ADDR_VAR 0 4
31472: PUSH
31473: LD_VAR 0 1
31477: PUSH
31478: FOR_IN
31479: IFFALSE 31556
// if BuildingStatus ( b ) = bs_build then
31481: LD_VAR 0 2
31485: PPUSH
31486: CALL_OW 461
31490: PUSH
31491: LD_INT 1
31493: EQUAL
31494: IFFALSE 31554
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
31496: LD_VAR 0 4
31500: PPUSH
31501: LD_STRING h
31503: PUSH
31504: LD_VAR 0 2
31508: PPUSH
31509: CALL_OW 250
31513: PUSH
31514: LD_VAR 0 2
31518: PPUSH
31519: CALL_OW 251
31523: PUSH
31524: LD_VAR 0 2
31528: PUSH
31529: LD_INT 0
31531: PUSH
31532: LD_INT 0
31534: PUSH
31535: LD_INT 0
31537: PUSH
31538: EMPTY
31539: LIST
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: PUSH
31547: EMPTY
31548: LIST
31549: PPUSH
31550: CALL_OW 446
31554: GO 31478
31556: POP
31557: POP
// end ;
31558: LD_VAR 0 3
31562: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
31563: LD_INT 0
31565: PPUSH
31566: PPUSH
31567: PPUSH
31568: PPUSH
31569: PPUSH
31570: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
31571: LD_VAR 0 1
31575: NOT
31576: PUSH
31577: LD_VAR 0 1
31581: PPUSH
31582: CALL_OW 263
31586: PUSH
31587: LD_INT 2
31589: NONEQUAL
31590: OR
31591: IFFALSE 31595
// exit ;
31593: GO 31911
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
31595: LD_ADDR_VAR 0 6
31599: PUSH
31600: LD_INT 22
31602: PUSH
31603: LD_VAR 0 1
31607: PPUSH
31608: CALL_OW 255
31612: PUSH
31613: EMPTY
31614: LIST
31615: LIST
31616: PUSH
31617: LD_INT 2
31619: PUSH
31620: LD_INT 30
31622: PUSH
31623: LD_INT 36
31625: PUSH
31626: EMPTY
31627: LIST
31628: LIST
31629: PUSH
31630: LD_INT 34
31632: PUSH
31633: LD_INT 31
31635: PUSH
31636: EMPTY
31637: LIST
31638: LIST
31639: PUSH
31640: EMPTY
31641: LIST
31642: LIST
31643: LIST
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PPUSH
31649: CALL_OW 69
31653: ST_TO_ADDR
// if not tmp then
31654: LD_VAR 0 6
31658: NOT
31659: IFFALSE 31663
// exit ;
31661: GO 31911
// result := [ ] ;
31663: LD_ADDR_VAR 0 2
31667: PUSH
31668: EMPTY
31669: ST_TO_ADDR
// for i in tmp do
31670: LD_ADDR_VAR 0 3
31674: PUSH
31675: LD_VAR 0 6
31679: PUSH
31680: FOR_IN
31681: IFFALSE 31752
// begin t := UnitsInside ( i ) ;
31683: LD_ADDR_VAR 0 4
31687: PUSH
31688: LD_VAR 0 3
31692: PPUSH
31693: CALL_OW 313
31697: ST_TO_ADDR
// if t then
31698: LD_VAR 0 4
31702: IFFALSE 31750
// for j in t do
31704: LD_ADDR_VAR 0 7
31708: PUSH
31709: LD_VAR 0 4
31713: PUSH
31714: FOR_IN
31715: IFFALSE 31748
// result := Replace ( result , result + 1 , j ) ;
31717: LD_ADDR_VAR 0 2
31721: PUSH
31722: LD_VAR 0 2
31726: PPUSH
31727: LD_VAR 0 2
31731: PUSH
31732: LD_INT 1
31734: PLUS
31735: PPUSH
31736: LD_VAR 0 7
31740: PPUSH
31741: CALL_OW 1
31745: ST_TO_ADDR
31746: GO 31714
31748: POP
31749: POP
// end ;
31750: GO 31680
31752: POP
31753: POP
// if not result then
31754: LD_VAR 0 2
31758: NOT
31759: IFFALSE 31763
// exit ;
31761: GO 31911
// mech := result [ 1 ] ;
31763: LD_ADDR_VAR 0 5
31767: PUSH
31768: LD_VAR 0 2
31772: PUSH
31773: LD_INT 1
31775: ARRAY
31776: ST_TO_ADDR
// if result > 1 then
31777: LD_VAR 0 2
31781: PUSH
31782: LD_INT 1
31784: GREATER
31785: IFFALSE 31897
// begin for i = 2 to result do
31787: LD_ADDR_VAR 0 3
31791: PUSH
31792: DOUBLE
31793: LD_INT 2
31795: DEC
31796: ST_TO_ADDR
31797: LD_VAR 0 2
31801: PUSH
31802: FOR_TO
31803: IFFALSE 31895
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
31805: LD_ADDR_VAR 0 4
31809: PUSH
31810: LD_VAR 0 2
31814: PUSH
31815: LD_VAR 0 3
31819: ARRAY
31820: PPUSH
31821: LD_INT 3
31823: PPUSH
31824: CALL_OW 259
31828: PUSH
31829: LD_VAR 0 2
31833: PUSH
31834: LD_VAR 0 3
31838: ARRAY
31839: PPUSH
31840: CALL_OW 432
31844: MINUS
31845: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
31846: LD_VAR 0 4
31850: PUSH
31851: LD_VAR 0 5
31855: PPUSH
31856: LD_INT 3
31858: PPUSH
31859: CALL_OW 259
31863: PUSH
31864: LD_VAR 0 5
31868: PPUSH
31869: CALL_OW 432
31873: MINUS
31874: GREATEREQUAL
31875: IFFALSE 31893
// mech := result [ i ] ;
31877: LD_ADDR_VAR 0 5
31881: PUSH
31882: LD_VAR 0 2
31886: PUSH
31887: LD_VAR 0 3
31891: ARRAY
31892: ST_TO_ADDR
// end ;
31893: GO 31802
31895: POP
31896: POP
// end ; ComLinkTo ( vehicle , mech ) ;
31897: LD_VAR 0 1
31901: PPUSH
31902: LD_VAR 0 5
31906: PPUSH
31907: CALL_OW 135
// end ;
31911: LD_VAR 0 2
31915: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
31916: LD_INT 0
31918: PPUSH
31919: PPUSH
31920: PPUSH
31921: PPUSH
31922: PPUSH
31923: PPUSH
31924: PPUSH
31925: PPUSH
31926: PPUSH
31927: PPUSH
31928: PPUSH
31929: PPUSH
31930: PPUSH
// result := [ ] ;
31931: LD_ADDR_VAR 0 7
31935: PUSH
31936: EMPTY
31937: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
31938: LD_VAR 0 1
31942: PPUSH
31943: CALL_OW 266
31947: PUSH
31948: LD_INT 0
31950: PUSH
31951: LD_INT 1
31953: PUSH
31954: EMPTY
31955: LIST
31956: LIST
31957: IN
31958: NOT
31959: IFFALSE 31963
// exit ;
31961: GO 33597
// if name then
31963: LD_VAR 0 3
31967: IFFALSE 31983
// SetBName ( base_dep , name ) ;
31969: LD_VAR 0 1
31973: PPUSH
31974: LD_VAR 0 3
31978: PPUSH
31979: CALL_OW 500
// base := GetBase ( base_dep ) ;
31983: LD_ADDR_VAR 0 15
31987: PUSH
31988: LD_VAR 0 1
31992: PPUSH
31993: CALL_OW 274
31997: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
31998: LD_ADDR_VAR 0 16
32002: PUSH
32003: LD_VAR 0 1
32007: PPUSH
32008: CALL_OW 255
32012: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
32013: LD_ADDR_VAR 0 17
32017: PUSH
32018: LD_VAR 0 1
32022: PPUSH
32023: CALL_OW 248
32027: ST_TO_ADDR
// if sources then
32028: LD_VAR 0 5
32032: IFFALSE 32079
// for i = 1 to 3 do
32034: LD_ADDR_VAR 0 8
32038: PUSH
32039: DOUBLE
32040: LD_INT 1
32042: DEC
32043: ST_TO_ADDR
32044: LD_INT 3
32046: PUSH
32047: FOR_TO
32048: IFFALSE 32077
// AddResourceType ( base , i , sources [ i ] ) ;
32050: LD_VAR 0 15
32054: PPUSH
32055: LD_VAR 0 8
32059: PPUSH
32060: LD_VAR 0 5
32064: PUSH
32065: LD_VAR 0 8
32069: ARRAY
32070: PPUSH
32071: CALL_OW 276
32075: GO 32047
32077: POP
32078: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
32079: LD_ADDR_VAR 0 18
32083: PUSH
32084: LD_VAR 0 15
32088: PPUSH
32089: LD_VAR 0 2
32093: PPUSH
32094: LD_INT 1
32096: PPUSH
32097: CALL 31340 0 3
32101: ST_TO_ADDR
// InitHc ;
32102: CALL_OW 19
// InitUc ;
32106: CALL_OW 18
// uc_side := side ;
32110: LD_ADDR_OWVAR 20
32114: PUSH
32115: LD_VAR 0 16
32119: ST_TO_ADDR
// uc_nation := nation ;
32120: LD_ADDR_OWVAR 21
32124: PUSH
32125: LD_VAR 0 17
32129: ST_TO_ADDR
// if buildings then
32130: LD_VAR 0 18
32134: IFFALSE 33456
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
32136: LD_ADDR_VAR 0 19
32140: PUSH
32141: LD_VAR 0 18
32145: PPUSH
32146: LD_INT 2
32148: PUSH
32149: LD_INT 30
32151: PUSH
32152: LD_INT 29
32154: PUSH
32155: EMPTY
32156: LIST
32157: LIST
32158: PUSH
32159: LD_INT 30
32161: PUSH
32162: LD_INT 30
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: PUSH
32169: EMPTY
32170: LIST
32171: LIST
32172: LIST
32173: PPUSH
32174: CALL_OW 72
32178: ST_TO_ADDR
// if tmp then
32179: LD_VAR 0 19
32183: IFFALSE 32231
// for i in tmp do
32185: LD_ADDR_VAR 0 8
32189: PUSH
32190: LD_VAR 0 19
32194: PUSH
32195: FOR_IN
32196: IFFALSE 32229
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
32198: LD_VAR 0 8
32202: PPUSH
32203: CALL_OW 250
32207: PPUSH
32208: LD_VAR 0 8
32212: PPUSH
32213: CALL_OW 251
32217: PPUSH
32218: LD_VAR 0 16
32222: PPUSH
32223: CALL_OW 441
32227: GO 32195
32229: POP
32230: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
32231: LD_VAR 0 18
32235: PPUSH
32236: LD_INT 2
32238: PUSH
32239: LD_INT 30
32241: PUSH
32242: LD_INT 32
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: PUSH
32249: LD_INT 30
32251: PUSH
32252: LD_INT 33
32254: PUSH
32255: EMPTY
32256: LIST
32257: LIST
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: LIST
32263: PPUSH
32264: CALL_OW 72
32268: IFFALSE 32356
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
32270: LD_ADDR_VAR 0 8
32274: PUSH
32275: LD_VAR 0 18
32279: PPUSH
32280: LD_INT 2
32282: PUSH
32283: LD_INT 30
32285: PUSH
32286: LD_INT 32
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: PUSH
32293: LD_INT 30
32295: PUSH
32296: LD_INT 33
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: LIST
32307: PPUSH
32308: CALL_OW 72
32312: PUSH
32313: FOR_IN
32314: IFFALSE 32354
// begin if not GetBWeapon ( i ) then
32316: LD_VAR 0 8
32320: PPUSH
32321: CALL_OW 269
32325: NOT
32326: IFFALSE 32352
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
32328: LD_VAR 0 8
32332: PPUSH
32333: LD_VAR 0 8
32337: PPUSH
32338: LD_VAR 0 2
32342: PPUSH
32343: CALL 33602 0 2
32347: PPUSH
32348: CALL_OW 431
// end ;
32352: GO 32313
32354: POP
32355: POP
// end ; for i = 1 to personel do
32356: LD_ADDR_VAR 0 8
32360: PUSH
32361: DOUBLE
32362: LD_INT 1
32364: DEC
32365: ST_TO_ADDR
32366: LD_VAR 0 6
32370: PUSH
32371: FOR_TO
32372: IFFALSE 33436
// begin if i > 4 then
32374: LD_VAR 0 8
32378: PUSH
32379: LD_INT 4
32381: GREATER
32382: IFFALSE 32386
// break ;
32384: GO 33436
// case i of 1 :
32386: LD_VAR 0 8
32390: PUSH
32391: LD_INT 1
32393: DOUBLE
32394: EQUAL
32395: IFTRUE 32399
32397: GO 32479
32399: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
32400: LD_ADDR_VAR 0 12
32404: PUSH
32405: LD_VAR 0 18
32409: PPUSH
32410: LD_INT 22
32412: PUSH
32413: LD_VAR 0 16
32417: PUSH
32418: EMPTY
32419: LIST
32420: LIST
32421: PUSH
32422: LD_INT 58
32424: PUSH
32425: EMPTY
32426: LIST
32427: PUSH
32428: LD_INT 2
32430: PUSH
32431: LD_INT 30
32433: PUSH
32434: LD_INT 32
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PUSH
32441: LD_INT 30
32443: PUSH
32444: LD_INT 4
32446: PUSH
32447: EMPTY
32448: LIST
32449: LIST
32450: PUSH
32451: LD_INT 30
32453: PUSH
32454: LD_INT 5
32456: PUSH
32457: EMPTY
32458: LIST
32459: LIST
32460: PUSH
32461: EMPTY
32462: LIST
32463: LIST
32464: LIST
32465: LIST
32466: PUSH
32467: EMPTY
32468: LIST
32469: LIST
32470: LIST
32471: PPUSH
32472: CALL_OW 72
32476: ST_TO_ADDR
32477: GO 32701
32479: LD_INT 2
32481: DOUBLE
32482: EQUAL
32483: IFTRUE 32487
32485: GO 32549
32487: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
32488: LD_ADDR_VAR 0 12
32492: PUSH
32493: LD_VAR 0 18
32497: PPUSH
32498: LD_INT 22
32500: PUSH
32501: LD_VAR 0 16
32505: PUSH
32506: EMPTY
32507: LIST
32508: LIST
32509: PUSH
32510: LD_INT 2
32512: PUSH
32513: LD_INT 30
32515: PUSH
32516: LD_INT 0
32518: PUSH
32519: EMPTY
32520: LIST
32521: LIST
32522: PUSH
32523: LD_INT 30
32525: PUSH
32526: LD_INT 1
32528: PUSH
32529: EMPTY
32530: LIST
32531: LIST
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: LIST
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: PPUSH
32542: CALL_OW 72
32546: ST_TO_ADDR
32547: GO 32701
32549: LD_INT 3
32551: DOUBLE
32552: EQUAL
32553: IFTRUE 32557
32555: GO 32619
32557: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
32558: LD_ADDR_VAR 0 12
32562: PUSH
32563: LD_VAR 0 18
32567: PPUSH
32568: LD_INT 22
32570: PUSH
32571: LD_VAR 0 16
32575: PUSH
32576: EMPTY
32577: LIST
32578: LIST
32579: PUSH
32580: LD_INT 2
32582: PUSH
32583: LD_INT 30
32585: PUSH
32586: LD_INT 2
32588: PUSH
32589: EMPTY
32590: LIST
32591: LIST
32592: PUSH
32593: LD_INT 30
32595: PUSH
32596: LD_INT 3
32598: PUSH
32599: EMPTY
32600: LIST
32601: LIST
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: LIST
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: PPUSH
32612: CALL_OW 72
32616: ST_TO_ADDR
32617: GO 32701
32619: LD_INT 4
32621: DOUBLE
32622: EQUAL
32623: IFTRUE 32627
32625: GO 32700
32627: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
32628: LD_ADDR_VAR 0 12
32632: PUSH
32633: LD_VAR 0 18
32637: PPUSH
32638: LD_INT 22
32640: PUSH
32641: LD_VAR 0 16
32645: PUSH
32646: EMPTY
32647: LIST
32648: LIST
32649: PUSH
32650: LD_INT 2
32652: PUSH
32653: LD_INT 30
32655: PUSH
32656: LD_INT 6
32658: PUSH
32659: EMPTY
32660: LIST
32661: LIST
32662: PUSH
32663: LD_INT 30
32665: PUSH
32666: LD_INT 7
32668: PUSH
32669: EMPTY
32670: LIST
32671: LIST
32672: PUSH
32673: LD_INT 30
32675: PUSH
32676: LD_INT 8
32678: PUSH
32679: EMPTY
32680: LIST
32681: LIST
32682: PUSH
32683: EMPTY
32684: LIST
32685: LIST
32686: LIST
32687: LIST
32688: PUSH
32689: EMPTY
32690: LIST
32691: LIST
32692: PPUSH
32693: CALL_OW 72
32697: ST_TO_ADDR
32698: GO 32701
32700: POP
// if i = 1 then
32701: LD_VAR 0 8
32705: PUSH
32706: LD_INT 1
32708: EQUAL
32709: IFFALSE 32820
// begin tmp := [ ] ;
32711: LD_ADDR_VAR 0 19
32715: PUSH
32716: EMPTY
32717: ST_TO_ADDR
// for j in f do
32718: LD_ADDR_VAR 0 9
32722: PUSH
32723: LD_VAR 0 12
32727: PUSH
32728: FOR_IN
32729: IFFALSE 32802
// if GetBType ( j ) = b_bunker then
32731: LD_VAR 0 9
32735: PPUSH
32736: CALL_OW 266
32740: PUSH
32741: LD_INT 32
32743: EQUAL
32744: IFFALSE 32771
// tmp := Insert ( tmp , 1 , j ) else
32746: LD_ADDR_VAR 0 19
32750: PUSH
32751: LD_VAR 0 19
32755: PPUSH
32756: LD_INT 1
32758: PPUSH
32759: LD_VAR 0 9
32763: PPUSH
32764: CALL_OW 2
32768: ST_TO_ADDR
32769: GO 32800
// tmp := Insert ( tmp , tmp + 1 , j ) ;
32771: LD_ADDR_VAR 0 19
32775: PUSH
32776: LD_VAR 0 19
32780: PPUSH
32781: LD_VAR 0 19
32785: PUSH
32786: LD_INT 1
32788: PLUS
32789: PPUSH
32790: LD_VAR 0 9
32794: PPUSH
32795: CALL_OW 2
32799: ST_TO_ADDR
32800: GO 32728
32802: POP
32803: POP
// if tmp then
32804: LD_VAR 0 19
32808: IFFALSE 32820
// f := tmp ;
32810: LD_ADDR_VAR 0 12
32814: PUSH
32815: LD_VAR 0 19
32819: ST_TO_ADDR
// end ; x := personel [ i ] ;
32820: LD_ADDR_VAR 0 13
32824: PUSH
32825: LD_VAR 0 6
32829: PUSH
32830: LD_VAR 0 8
32834: ARRAY
32835: ST_TO_ADDR
// if x = - 1 then
32836: LD_VAR 0 13
32840: PUSH
32841: LD_INT 1
32843: NEG
32844: EQUAL
32845: IFFALSE 33054
// begin for j in f do
32847: LD_ADDR_VAR 0 9
32851: PUSH
32852: LD_VAR 0 12
32856: PUSH
32857: FOR_IN
32858: IFFALSE 33050
// repeat InitHc ;
32860: CALL_OW 19
// if GetBType ( j ) = b_barracks then
32864: LD_VAR 0 9
32868: PPUSH
32869: CALL_OW 266
32873: PUSH
32874: LD_INT 5
32876: EQUAL
32877: IFFALSE 32947
// begin if UnitsInside ( j ) < 3 then
32879: LD_VAR 0 9
32883: PPUSH
32884: CALL_OW 313
32888: PUSH
32889: LD_INT 3
32891: LESS
32892: IFFALSE 32928
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32894: LD_INT 0
32896: PPUSH
32897: LD_INT 5
32899: PUSH
32900: LD_INT 8
32902: PUSH
32903: LD_INT 9
32905: PUSH
32906: EMPTY
32907: LIST
32908: LIST
32909: LIST
32910: PUSH
32911: LD_VAR 0 17
32915: ARRAY
32916: PPUSH
32917: LD_VAR 0 4
32921: PPUSH
32922: CALL_OW 380
32926: GO 32945
// PrepareHuman ( false , i , skill ) ;
32928: LD_INT 0
32930: PPUSH
32931: LD_VAR 0 8
32935: PPUSH
32936: LD_VAR 0 4
32940: PPUSH
32941: CALL_OW 380
// end else
32945: GO 32964
// PrepareHuman ( false , i , skill ) ;
32947: LD_INT 0
32949: PPUSH
32950: LD_VAR 0 8
32954: PPUSH
32955: LD_VAR 0 4
32959: PPUSH
32960: CALL_OW 380
// un := CreateHuman ;
32964: LD_ADDR_VAR 0 14
32968: PUSH
32969: CALL_OW 44
32973: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32974: LD_ADDR_VAR 0 7
32978: PUSH
32979: LD_VAR 0 7
32983: PPUSH
32984: LD_INT 1
32986: PPUSH
32987: LD_VAR 0 14
32991: PPUSH
32992: CALL_OW 2
32996: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
32997: LD_VAR 0 14
33001: PPUSH
33002: LD_VAR 0 9
33006: PPUSH
33007: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
33011: LD_VAR 0 9
33015: PPUSH
33016: CALL_OW 313
33020: PUSH
33021: LD_INT 6
33023: EQUAL
33024: PUSH
33025: LD_VAR 0 9
33029: PPUSH
33030: CALL_OW 266
33034: PUSH
33035: LD_INT 32
33037: PUSH
33038: LD_INT 31
33040: PUSH
33041: EMPTY
33042: LIST
33043: LIST
33044: IN
33045: OR
33046: IFFALSE 32860
33048: GO 32857
33050: POP
33051: POP
// end else
33052: GO 33434
// for j = 1 to x do
33054: LD_ADDR_VAR 0 9
33058: PUSH
33059: DOUBLE
33060: LD_INT 1
33062: DEC
33063: ST_TO_ADDR
33064: LD_VAR 0 13
33068: PUSH
33069: FOR_TO
33070: IFFALSE 33432
// begin InitHc ;
33072: CALL_OW 19
// if not f then
33076: LD_VAR 0 12
33080: NOT
33081: IFFALSE 33170
// begin PrepareHuman ( false , i , skill ) ;
33083: LD_INT 0
33085: PPUSH
33086: LD_VAR 0 8
33090: PPUSH
33091: LD_VAR 0 4
33095: PPUSH
33096: CALL_OW 380
// un := CreateHuman ;
33100: LD_ADDR_VAR 0 14
33104: PUSH
33105: CALL_OW 44
33109: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33110: LD_ADDR_VAR 0 7
33114: PUSH
33115: LD_VAR 0 7
33119: PPUSH
33120: LD_INT 1
33122: PPUSH
33123: LD_VAR 0 14
33127: PPUSH
33128: CALL_OW 2
33132: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33133: LD_VAR 0 14
33137: PPUSH
33138: LD_VAR 0 1
33142: PPUSH
33143: CALL_OW 250
33147: PPUSH
33148: LD_VAR 0 1
33152: PPUSH
33153: CALL_OW 251
33157: PPUSH
33158: LD_INT 10
33160: PPUSH
33161: LD_INT 0
33163: PPUSH
33164: CALL_OW 50
// continue ;
33168: GO 33069
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
33170: LD_VAR 0 12
33174: PUSH
33175: LD_INT 1
33177: ARRAY
33178: PPUSH
33179: CALL_OW 313
33183: PUSH
33184: LD_VAR 0 12
33188: PUSH
33189: LD_INT 1
33191: ARRAY
33192: PPUSH
33193: CALL_OW 266
33197: PUSH
33198: LD_INT 32
33200: PUSH
33201: LD_INT 31
33203: PUSH
33204: EMPTY
33205: LIST
33206: LIST
33207: IN
33208: AND
33209: PUSH
33210: LD_VAR 0 12
33214: PUSH
33215: LD_INT 1
33217: ARRAY
33218: PPUSH
33219: CALL_OW 313
33223: PUSH
33224: LD_INT 6
33226: EQUAL
33227: OR
33228: IFFALSE 33248
// f := Delete ( f , 1 ) ;
33230: LD_ADDR_VAR 0 12
33234: PUSH
33235: LD_VAR 0 12
33239: PPUSH
33240: LD_INT 1
33242: PPUSH
33243: CALL_OW 3
33247: ST_TO_ADDR
// if not f then
33248: LD_VAR 0 12
33252: NOT
33253: IFFALSE 33271
// begin x := x + 2 ;
33255: LD_ADDR_VAR 0 13
33259: PUSH
33260: LD_VAR 0 13
33264: PUSH
33265: LD_INT 2
33267: PLUS
33268: ST_TO_ADDR
// continue ;
33269: GO 33069
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
33271: LD_VAR 0 12
33275: PUSH
33276: LD_INT 1
33278: ARRAY
33279: PPUSH
33280: CALL_OW 266
33284: PUSH
33285: LD_INT 5
33287: EQUAL
33288: IFFALSE 33362
// begin if UnitsInside ( f [ 1 ] ) < 3 then
33290: LD_VAR 0 12
33294: PUSH
33295: LD_INT 1
33297: ARRAY
33298: PPUSH
33299: CALL_OW 313
33303: PUSH
33304: LD_INT 3
33306: LESS
33307: IFFALSE 33343
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33309: LD_INT 0
33311: PPUSH
33312: LD_INT 5
33314: PUSH
33315: LD_INT 8
33317: PUSH
33318: LD_INT 9
33320: PUSH
33321: EMPTY
33322: LIST
33323: LIST
33324: LIST
33325: PUSH
33326: LD_VAR 0 17
33330: ARRAY
33331: PPUSH
33332: LD_VAR 0 4
33336: PPUSH
33337: CALL_OW 380
33341: GO 33360
// PrepareHuman ( false , i , skill ) ;
33343: LD_INT 0
33345: PPUSH
33346: LD_VAR 0 8
33350: PPUSH
33351: LD_VAR 0 4
33355: PPUSH
33356: CALL_OW 380
// end else
33360: GO 33379
// PrepareHuman ( false , i , skill ) ;
33362: LD_INT 0
33364: PPUSH
33365: LD_VAR 0 8
33369: PPUSH
33370: LD_VAR 0 4
33374: PPUSH
33375: CALL_OW 380
// un := CreateHuman ;
33379: LD_ADDR_VAR 0 14
33383: PUSH
33384: CALL_OW 44
33388: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33389: LD_ADDR_VAR 0 7
33393: PUSH
33394: LD_VAR 0 7
33398: PPUSH
33399: LD_INT 1
33401: PPUSH
33402: LD_VAR 0 14
33406: PPUSH
33407: CALL_OW 2
33411: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
33412: LD_VAR 0 14
33416: PPUSH
33417: LD_VAR 0 12
33421: PUSH
33422: LD_INT 1
33424: ARRAY
33425: PPUSH
33426: CALL_OW 52
// end ;
33430: GO 33069
33432: POP
33433: POP
// end ;
33434: GO 32371
33436: POP
33437: POP
// result := result ^ buildings ;
33438: LD_ADDR_VAR 0 7
33442: PUSH
33443: LD_VAR 0 7
33447: PUSH
33448: LD_VAR 0 18
33452: ADD
33453: ST_TO_ADDR
// end else
33454: GO 33597
// begin for i = 1 to personel do
33456: LD_ADDR_VAR 0 8
33460: PUSH
33461: DOUBLE
33462: LD_INT 1
33464: DEC
33465: ST_TO_ADDR
33466: LD_VAR 0 6
33470: PUSH
33471: FOR_TO
33472: IFFALSE 33595
// begin if i > 4 then
33474: LD_VAR 0 8
33478: PUSH
33479: LD_INT 4
33481: GREATER
33482: IFFALSE 33486
// break ;
33484: GO 33595
// x := personel [ i ] ;
33486: LD_ADDR_VAR 0 13
33490: PUSH
33491: LD_VAR 0 6
33495: PUSH
33496: LD_VAR 0 8
33500: ARRAY
33501: ST_TO_ADDR
// if x = - 1 then
33502: LD_VAR 0 13
33506: PUSH
33507: LD_INT 1
33509: NEG
33510: EQUAL
33511: IFFALSE 33515
// continue ;
33513: GO 33471
// PrepareHuman ( false , i , skill ) ;
33515: LD_INT 0
33517: PPUSH
33518: LD_VAR 0 8
33522: PPUSH
33523: LD_VAR 0 4
33527: PPUSH
33528: CALL_OW 380
// un := CreateHuman ;
33532: LD_ADDR_VAR 0 14
33536: PUSH
33537: CALL_OW 44
33541: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33542: LD_VAR 0 14
33546: PPUSH
33547: LD_VAR 0 1
33551: PPUSH
33552: CALL_OW 250
33556: PPUSH
33557: LD_VAR 0 1
33561: PPUSH
33562: CALL_OW 251
33566: PPUSH
33567: LD_INT 10
33569: PPUSH
33570: LD_INT 0
33572: PPUSH
33573: CALL_OW 50
// result := result ^ un ;
33577: LD_ADDR_VAR 0 7
33581: PUSH
33582: LD_VAR 0 7
33586: PUSH
33587: LD_VAR 0 14
33591: ADD
33592: ST_TO_ADDR
// end ;
33593: GO 33471
33595: POP
33596: POP
// end ; end ;
33597: LD_VAR 0 7
33601: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
33602: LD_INT 0
33604: PPUSH
33605: PPUSH
33606: PPUSH
33607: PPUSH
33608: PPUSH
33609: PPUSH
33610: PPUSH
33611: PPUSH
33612: PPUSH
33613: PPUSH
33614: PPUSH
33615: PPUSH
33616: PPUSH
33617: PPUSH
33618: PPUSH
33619: PPUSH
// result := false ;
33620: LD_ADDR_VAR 0 3
33624: PUSH
33625: LD_INT 0
33627: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
33628: LD_VAR 0 1
33632: NOT
33633: PUSH
33634: LD_VAR 0 1
33638: PPUSH
33639: CALL_OW 266
33643: PUSH
33644: LD_INT 32
33646: PUSH
33647: LD_INT 33
33649: PUSH
33650: EMPTY
33651: LIST
33652: LIST
33653: IN
33654: NOT
33655: OR
33656: IFFALSE 33660
// exit ;
33658: GO 34769
// nat := GetNation ( tower ) ;
33660: LD_ADDR_VAR 0 12
33664: PUSH
33665: LD_VAR 0 1
33669: PPUSH
33670: CALL_OW 248
33674: ST_TO_ADDR
// side := GetSide ( tower ) ;
33675: LD_ADDR_VAR 0 16
33679: PUSH
33680: LD_VAR 0 1
33684: PPUSH
33685: CALL_OW 255
33689: ST_TO_ADDR
// x := GetX ( tower ) ;
33690: LD_ADDR_VAR 0 10
33694: PUSH
33695: LD_VAR 0 1
33699: PPUSH
33700: CALL_OW 250
33704: ST_TO_ADDR
// y := GetY ( tower ) ;
33705: LD_ADDR_VAR 0 11
33709: PUSH
33710: LD_VAR 0 1
33714: PPUSH
33715: CALL_OW 251
33719: ST_TO_ADDR
// if not x or not y then
33720: LD_VAR 0 10
33724: NOT
33725: PUSH
33726: LD_VAR 0 11
33730: NOT
33731: OR
33732: IFFALSE 33736
// exit ;
33734: GO 34769
// weapon := 0 ;
33736: LD_ADDR_VAR 0 18
33740: PUSH
33741: LD_INT 0
33743: ST_TO_ADDR
// fac_list := [ ] ;
33744: LD_ADDR_VAR 0 17
33748: PUSH
33749: EMPTY
33750: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
33751: LD_ADDR_VAR 0 6
33755: PUSH
33756: LD_VAR 0 1
33760: PPUSH
33761: CALL_OW 274
33765: PPUSH
33766: LD_VAR 0 2
33770: PPUSH
33771: LD_INT 0
33773: PPUSH
33774: CALL 31340 0 3
33778: PPUSH
33779: LD_INT 30
33781: PUSH
33782: LD_INT 3
33784: PUSH
33785: EMPTY
33786: LIST
33787: LIST
33788: PPUSH
33789: CALL_OW 72
33793: ST_TO_ADDR
// if not factories then
33794: LD_VAR 0 6
33798: NOT
33799: IFFALSE 33803
// exit ;
33801: GO 34769
// for i in factories do
33803: LD_ADDR_VAR 0 8
33807: PUSH
33808: LD_VAR 0 6
33812: PUSH
33813: FOR_IN
33814: IFFALSE 33839
// fac_list := fac_list union AvailableWeaponList ( i ) ;
33816: LD_ADDR_VAR 0 17
33820: PUSH
33821: LD_VAR 0 17
33825: PUSH
33826: LD_VAR 0 8
33830: PPUSH
33831: CALL_OW 478
33835: UNION
33836: ST_TO_ADDR
33837: GO 33813
33839: POP
33840: POP
// if not fac_list then
33841: LD_VAR 0 17
33845: NOT
33846: IFFALSE 33850
// exit ;
33848: GO 34769
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
33850: LD_ADDR_VAR 0 5
33854: PUSH
33855: LD_INT 4
33857: PUSH
33858: LD_INT 5
33860: PUSH
33861: LD_INT 9
33863: PUSH
33864: LD_INT 10
33866: PUSH
33867: LD_INT 6
33869: PUSH
33870: LD_INT 7
33872: PUSH
33873: LD_INT 11
33875: PUSH
33876: EMPTY
33877: LIST
33878: LIST
33879: LIST
33880: LIST
33881: LIST
33882: LIST
33883: LIST
33884: PUSH
33885: LD_INT 27
33887: PUSH
33888: LD_INT 28
33890: PUSH
33891: LD_INT 26
33893: PUSH
33894: LD_INT 30
33896: PUSH
33897: EMPTY
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: PUSH
33903: LD_INT 43
33905: PUSH
33906: LD_INT 44
33908: PUSH
33909: LD_INT 46
33911: PUSH
33912: LD_INT 45
33914: PUSH
33915: LD_INT 47
33917: PUSH
33918: LD_INT 49
33920: PUSH
33921: EMPTY
33922: LIST
33923: LIST
33924: LIST
33925: LIST
33926: LIST
33927: LIST
33928: PUSH
33929: EMPTY
33930: LIST
33931: LIST
33932: LIST
33933: PUSH
33934: LD_VAR 0 12
33938: ARRAY
33939: ST_TO_ADDR
// list := list isect fac_list ;
33940: LD_ADDR_VAR 0 5
33944: PUSH
33945: LD_VAR 0 5
33949: PUSH
33950: LD_VAR 0 17
33954: ISECT
33955: ST_TO_ADDR
// if not list then
33956: LD_VAR 0 5
33960: NOT
33961: IFFALSE 33965
// exit ;
33963: GO 34769
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
33965: LD_VAR 0 12
33969: PUSH
33970: LD_INT 3
33972: EQUAL
33973: PUSH
33974: LD_INT 49
33976: PUSH
33977: LD_VAR 0 5
33981: IN
33982: AND
33983: PUSH
33984: LD_INT 31
33986: PPUSH
33987: LD_VAR 0 16
33991: PPUSH
33992: CALL_OW 321
33996: PUSH
33997: LD_INT 2
33999: EQUAL
34000: AND
34001: IFFALSE 34061
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
34003: LD_INT 22
34005: PUSH
34006: LD_VAR 0 16
34010: PUSH
34011: EMPTY
34012: LIST
34013: LIST
34014: PUSH
34015: LD_INT 35
34017: PUSH
34018: LD_INT 49
34020: PUSH
34021: EMPTY
34022: LIST
34023: LIST
34024: PUSH
34025: LD_INT 91
34027: PUSH
34028: LD_VAR 0 1
34032: PUSH
34033: LD_INT 10
34035: PUSH
34036: EMPTY
34037: LIST
34038: LIST
34039: LIST
34040: PUSH
34041: EMPTY
34042: LIST
34043: LIST
34044: LIST
34045: PPUSH
34046: CALL_OW 69
34050: NOT
34051: IFFALSE 34061
// weapon := ru_time_lapser ;
34053: LD_ADDR_VAR 0 18
34057: PUSH
34058: LD_INT 49
34060: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
34061: LD_VAR 0 12
34065: PUSH
34066: LD_INT 1
34068: PUSH
34069: LD_INT 2
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: IN
34076: PUSH
34077: LD_INT 11
34079: PUSH
34080: LD_VAR 0 5
34084: IN
34085: PUSH
34086: LD_INT 30
34088: PUSH
34089: LD_VAR 0 5
34093: IN
34094: OR
34095: AND
34096: PUSH
34097: LD_INT 6
34099: PPUSH
34100: LD_VAR 0 16
34104: PPUSH
34105: CALL_OW 321
34109: PUSH
34110: LD_INT 2
34112: EQUAL
34113: AND
34114: IFFALSE 34279
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
34116: LD_INT 22
34118: PUSH
34119: LD_VAR 0 16
34123: PUSH
34124: EMPTY
34125: LIST
34126: LIST
34127: PUSH
34128: LD_INT 2
34130: PUSH
34131: LD_INT 35
34133: PUSH
34134: LD_INT 11
34136: PUSH
34137: EMPTY
34138: LIST
34139: LIST
34140: PUSH
34141: LD_INT 35
34143: PUSH
34144: LD_INT 30
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: PUSH
34151: EMPTY
34152: LIST
34153: LIST
34154: LIST
34155: PUSH
34156: LD_INT 91
34158: PUSH
34159: LD_VAR 0 1
34163: PUSH
34164: LD_INT 18
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: LIST
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: LIST
34176: PPUSH
34177: CALL_OW 69
34181: NOT
34182: PUSH
34183: LD_INT 22
34185: PUSH
34186: LD_VAR 0 16
34190: PUSH
34191: EMPTY
34192: LIST
34193: LIST
34194: PUSH
34195: LD_INT 2
34197: PUSH
34198: LD_INT 30
34200: PUSH
34201: LD_INT 32
34203: PUSH
34204: EMPTY
34205: LIST
34206: LIST
34207: PUSH
34208: LD_INT 30
34210: PUSH
34211: LD_INT 33
34213: PUSH
34214: EMPTY
34215: LIST
34216: LIST
34217: PUSH
34218: EMPTY
34219: LIST
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 91
34225: PUSH
34226: LD_VAR 0 1
34230: PUSH
34231: LD_INT 12
34233: PUSH
34234: EMPTY
34235: LIST
34236: LIST
34237: LIST
34238: PUSH
34239: EMPTY
34240: LIST
34241: LIST
34242: LIST
34243: PUSH
34244: EMPTY
34245: LIST
34246: PPUSH
34247: CALL_OW 69
34251: PUSH
34252: LD_INT 2
34254: GREATER
34255: AND
34256: IFFALSE 34279
// weapon := [ us_radar , ar_radar ] [ nat ] ;
34258: LD_ADDR_VAR 0 18
34262: PUSH
34263: LD_INT 11
34265: PUSH
34266: LD_INT 30
34268: PUSH
34269: EMPTY
34270: LIST
34271: LIST
34272: PUSH
34273: LD_VAR 0 12
34277: ARRAY
34278: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
34279: LD_VAR 0 18
34283: NOT
34284: PUSH
34285: LD_INT 40
34287: PPUSH
34288: LD_VAR 0 16
34292: PPUSH
34293: CALL_OW 321
34297: PUSH
34298: LD_INT 2
34300: EQUAL
34301: AND
34302: PUSH
34303: LD_INT 7
34305: PUSH
34306: LD_VAR 0 5
34310: IN
34311: PUSH
34312: LD_INT 28
34314: PUSH
34315: LD_VAR 0 5
34319: IN
34320: OR
34321: PUSH
34322: LD_INT 45
34324: PUSH
34325: LD_VAR 0 5
34329: IN
34330: OR
34331: AND
34332: IFFALSE 34586
// begin hex := GetHexInfo ( x , y ) ;
34334: LD_ADDR_VAR 0 4
34338: PUSH
34339: LD_VAR 0 10
34343: PPUSH
34344: LD_VAR 0 11
34348: PPUSH
34349: CALL_OW 546
34353: ST_TO_ADDR
// if hex [ 1 ] then
34354: LD_VAR 0 4
34358: PUSH
34359: LD_INT 1
34361: ARRAY
34362: IFFALSE 34366
// exit ;
34364: GO 34769
// height := hex [ 2 ] ;
34366: LD_ADDR_VAR 0 15
34370: PUSH
34371: LD_VAR 0 4
34375: PUSH
34376: LD_INT 2
34378: ARRAY
34379: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
34380: LD_ADDR_VAR 0 14
34384: PUSH
34385: LD_INT 0
34387: PUSH
34388: LD_INT 2
34390: PUSH
34391: LD_INT 3
34393: PUSH
34394: LD_INT 5
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: LIST
34401: LIST
34402: ST_TO_ADDR
// for i in tmp do
34403: LD_ADDR_VAR 0 8
34407: PUSH
34408: LD_VAR 0 14
34412: PUSH
34413: FOR_IN
34414: IFFALSE 34584
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
34416: LD_ADDR_VAR 0 9
34420: PUSH
34421: LD_VAR 0 10
34425: PPUSH
34426: LD_VAR 0 8
34430: PPUSH
34431: LD_INT 5
34433: PPUSH
34434: CALL_OW 272
34438: PUSH
34439: LD_VAR 0 11
34443: PPUSH
34444: LD_VAR 0 8
34448: PPUSH
34449: LD_INT 5
34451: PPUSH
34452: CALL_OW 273
34456: PUSH
34457: EMPTY
34458: LIST
34459: LIST
34460: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
34461: LD_VAR 0 9
34465: PUSH
34466: LD_INT 1
34468: ARRAY
34469: PPUSH
34470: LD_VAR 0 9
34474: PUSH
34475: LD_INT 2
34477: ARRAY
34478: PPUSH
34479: CALL_OW 488
34483: IFFALSE 34582
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
34485: LD_ADDR_VAR 0 4
34489: PUSH
34490: LD_VAR 0 9
34494: PUSH
34495: LD_INT 1
34497: ARRAY
34498: PPUSH
34499: LD_VAR 0 9
34503: PUSH
34504: LD_INT 2
34506: ARRAY
34507: PPUSH
34508: CALL_OW 546
34512: ST_TO_ADDR
// if hex [ 1 ] then
34513: LD_VAR 0 4
34517: PUSH
34518: LD_INT 1
34520: ARRAY
34521: IFFALSE 34525
// continue ;
34523: GO 34413
// h := hex [ 2 ] ;
34525: LD_ADDR_VAR 0 13
34529: PUSH
34530: LD_VAR 0 4
34534: PUSH
34535: LD_INT 2
34537: ARRAY
34538: ST_TO_ADDR
// if h + 7 < height then
34539: LD_VAR 0 13
34543: PUSH
34544: LD_INT 7
34546: PLUS
34547: PUSH
34548: LD_VAR 0 15
34552: LESS
34553: IFFALSE 34582
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
34555: LD_ADDR_VAR 0 18
34559: PUSH
34560: LD_INT 7
34562: PUSH
34563: LD_INT 28
34565: PUSH
34566: LD_INT 45
34568: PUSH
34569: EMPTY
34570: LIST
34571: LIST
34572: LIST
34573: PUSH
34574: LD_VAR 0 12
34578: ARRAY
34579: ST_TO_ADDR
// break ;
34580: GO 34584
// end ; end ; end ;
34582: GO 34413
34584: POP
34585: POP
// end ; if not weapon then
34586: LD_VAR 0 18
34590: NOT
34591: IFFALSE 34651
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
34593: LD_ADDR_VAR 0 5
34597: PUSH
34598: LD_VAR 0 5
34602: PUSH
34603: LD_INT 11
34605: PUSH
34606: LD_INT 30
34608: PUSH
34609: LD_INT 49
34611: PUSH
34612: EMPTY
34613: LIST
34614: LIST
34615: LIST
34616: DIFF
34617: ST_TO_ADDR
// if not list then
34618: LD_VAR 0 5
34622: NOT
34623: IFFALSE 34627
// exit ;
34625: GO 34769
// weapon := list [ rand ( 1 , list ) ] ;
34627: LD_ADDR_VAR 0 18
34631: PUSH
34632: LD_VAR 0 5
34636: PUSH
34637: LD_INT 1
34639: PPUSH
34640: LD_VAR 0 5
34644: PPUSH
34645: CALL_OW 12
34649: ARRAY
34650: ST_TO_ADDR
// end ; if weapon then
34651: LD_VAR 0 18
34655: IFFALSE 34769
// begin tmp := CostOfWeapon ( weapon ) ;
34657: LD_ADDR_VAR 0 14
34661: PUSH
34662: LD_VAR 0 18
34666: PPUSH
34667: CALL_OW 451
34671: ST_TO_ADDR
// j := GetBase ( tower ) ;
34672: LD_ADDR_VAR 0 9
34676: PUSH
34677: LD_VAR 0 1
34681: PPUSH
34682: CALL_OW 274
34686: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
34687: LD_VAR 0 9
34691: PPUSH
34692: LD_INT 1
34694: PPUSH
34695: CALL_OW 275
34699: PUSH
34700: LD_VAR 0 14
34704: PUSH
34705: LD_INT 1
34707: ARRAY
34708: GREATEREQUAL
34709: PUSH
34710: LD_VAR 0 9
34714: PPUSH
34715: LD_INT 2
34717: PPUSH
34718: CALL_OW 275
34722: PUSH
34723: LD_VAR 0 14
34727: PUSH
34728: LD_INT 2
34730: ARRAY
34731: GREATEREQUAL
34732: AND
34733: PUSH
34734: LD_VAR 0 9
34738: PPUSH
34739: LD_INT 3
34741: PPUSH
34742: CALL_OW 275
34746: PUSH
34747: LD_VAR 0 14
34751: PUSH
34752: LD_INT 3
34754: ARRAY
34755: GREATEREQUAL
34756: AND
34757: IFFALSE 34769
// result := weapon ;
34759: LD_ADDR_VAR 0 3
34763: PUSH
34764: LD_VAR 0 18
34768: ST_TO_ADDR
// end ; end ;
34769: LD_VAR 0 3
34773: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
34774: LD_INT 0
34776: PPUSH
34777: PPUSH
// result := true ;
34778: LD_ADDR_VAR 0 3
34782: PUSH
34783: LD_INT 1
34785: ST_TO_ADDR
// if array1 = array2 then
34786: LD_VAR 0 1
34790: PUSH
34791: LD_VAR 0 2
34795: EQUAL
34796: IFFALSE 34856
// begin for i = 1 to array1 do
34798: LD_ADDR_VAR 0 4
34802: PUSH
34803: DOUBLE
34804: LD_INT 1
34806: DEC
34807: ST_TO_ADDR
34808: LD_VAR 0 1
34812: PUSH
34813: FOR_TO
34814: IFFALSE 34852
// if array1 [ i ] <> array2 [ i ] then
34816: LD_VAR 0 1
34820: PUSH
34821: LD_VAR 0 4
34825: ARRAY
34826: PUSH
34827: LD_VAR 0 2
34831: PUSH
34832: LD_VAR 0 4
34836: ARRAY
34837: NONEQUAL
34838: IFFALSE 34850
// begin result := false ;
34840: LD_ADDR_VAR 0 3
34844: PUSH
34845: LD_INT 0
34847: ST_TO_ADDR
// break ;
34848: GO 34852
// end ;
34850: GO 34813
34852: POP
34853: POP
// end else
34854: GO 34864
// result := false ;
34856: LD_ADDR_VAR 0 3
34860: PUSH
34861: LD_INT 0
34863: ST_TO_ADDR
// end ;
34864: LD_VAR 0 3
34868: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
34869: LD_INT 0
34871: PPUSH
34872: PPUSH
// if not array1 or not array2 then
34873: LD_VAR 0 1
34877: NOT
34878: PUSH
34879: LD_VAR 0 2
34883: NOT
34884: OR
34885: IFFALSE 34889
// exit ;
34887: GO 34953
// result := true ;
34889: LD_ADDR_VAR 0 3
34893: PUSH
34894: LD_INT 1
34896: ST_TO_ADDR
// for i = 1 to array1 do
34897: LD_ADDR_VAR 0 4
34901: PUSH
34902: DOUBLE
34903: LD_INT 1
34905: DEC
34906: ST_TO_ADDR
34907: LD_VAR 0 1
34911: PUSH
34912: FOR_TO
34913: IFFALSE 34951
// if array1 [ i ] <> array2 [ i ] then
34915: LD_VAR 0 1
34919: PUSH
34920: LD_VAR 0 4
34924: ARRAY
34925: PUSH
34926: LD_VAR 0 2
34930: PUSH
34931: LD_VAR 0 4
34935: ARRAY
34936: NONEQUAL
34937: IFFALSE 34949
// begin result := false ;
34939: LD_ADDR_VAR 0 3
34943: PUSH
34944: LD_INT 0
34946: ST_TO_ADDR
// break ;
34947: GO 34951
// end ;
34949: GO 34912
34951: POP
34952: POP
// end ;
34953: LD_VAR 0 3
34957: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
34958: LD_INT 0
34960: PPUSH
34961: PPUSH
34962: PPUSH
// pom := GetBase ( fac ) ;
34963: LD_ADDR_VAR 0 5
34967: PUSH
34968: LD_VAR 0 1
34972: PPUSH
34973: CALL_OW 274
34977: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
34978: LD_ADDR_VAR 0 4
34982: PUSH
34983: LD_VAR 0 2
34987: PUSH
34988: LD_INT 1
34990: ARRAY
34991: PPUSH
34992: LD_VAR 0 2
34996: PUSH
34997: LD_INT 2
34999: ARRAY
35000: PPUSH
35001: LD_VAR 0 2
35005: PUSH
35006: LD_INT 3
35008: ARRAY
35009: PPUSH
35010: LD_VAR 0 2
35014: PUSH
35015: LD_INT 4
35017: ARRAY
35018: PPUSH
35019: CALL_OW 449
35023: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35024: LD_ADDR_VAR 0 3
35028: PUSH
35029: LD_VAR 0 5
35033: PPUSH
35034: LD_INT 1
35036: PPUSH
35037: CALL_OW 275
35041: PUSH
35042: LD_VAR 0 4
35046: PUSH
35047: LD_INT 1
35049: ARRAY
35050: GREATEREQUAL
35051: PUSH
35052: LD_VAR 0 5
35056: PPUSH
35057: LD_INT 2
35059: PPUSH
35060: CALL_OW 275
35064: PUSH
35065: LD_VAR 0 4
35069: PUSH
35070: LD_INT 2
35072: ARRAY
35073: GREATEREQUAL
35074: AND
35075: PUSH
35076: LD_VAR 0 5
35080: PPUSH
35081: LD_INT 3
35083: PPUSH
35084: CALL_OW 275
35088: PUSH
35089: LD_VAR 0 4
35093: PUSH
35094: LD_INT 3
35096: ARRAY
35097: GREATEREQUAL
35098: AND
35099: ST_TO_ADDR
// end ;
35100: LD_VAR 0 3
35104: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
35105: LD_INT 0
35107: PPUSH
35108: PPUSH
35109: PPUSH
35110: PPUSH
// pom := GetBase ( building ) ;
35111: LD_ADDR_VAR 0 3
35115: PUSH
35116: LD_VAR 0 1
35120: PPUSH
35121: CALL_OW 274
35125: ST_TO_ADDR
// if not pom then
35126: LD_VAR 0 3
35130: NOT
35131: IFFALSE 35135
// exit ;
35133: GO 35305
// btype := GetBType ( building ) ;
35135: LD_ADDR_VAR 0 5
35139: PUSH
35140: LD_VAR 0 1
35144: PPUSH
35145: CALL_OW 266
35149: ST_TO_ADDR
// if btype = b_armoury then
35150: LD_VAR 0 5
35154: PUSH
35155: LD_INT 4
35157: EQUAL
35158: IFFALSE 35168
// btype := b_barracks ;
35160: LD_ADDR_VAR 0 5
35164: PUSH
35165: LD_INT 5
35167: ST_TO_ADDR
// if btype = b_depot then
35168: LD_VAR 0 5
35172: PUSH
35173: LD_INT 0
35175: EQUAL
35176: IFFALSE 35186
// btype := b_warehouse ;
35178: LD_ADDR_VAR 0 5
35182: PUSH
35183: LD_INT 1
35185: ST_TO_ADDR
// if btype = b_workshop then
35186: LD_VAR 0 5
35190: PUSH
35191: LD_INT 2
35193: EQUAL
35194: IFFALSE 35204
// btype := b_factory ;
35196: LD_ADDR_VAR 0 5
35200: PUSH
35201: LD_INT 3
35203: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35204: LD_ADDR_VAR 0 4
35208: PUSH
35209: LD_VAR 0 5
35213: PPUSH
35214: LD_VAR 0 1
35218: PPUSH
35219: CALL_OW 248
35223: PPUSH
35224: CALL_OW 450
35228: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35229: LD_ADDR_VAR 0 2
35233: PUSH
35234: LD_VAR 0 3
35238: PPUSH
35239: LD_INT 1
35241: PPUSH
35242: CALL_OW 275
35246: PUSH
35247: LD_VAR 0 4
35251: PUSH
35252: LD_INT 1
35254: ARRAY
35255: GREATEREQUAL
35256: PUSH
35257: LD_VAR 0 3
35261: PPUSH
35262: LD_INT 2
35264: PPUSH
35265: CALL_OW 275
35269: PUSH
35270: LD_VAR 0 4
35274: PUSH
35275: LD_INT 2
35277: ARRAY
35278: GREATEREQUAL
35279: AND
35280: PUSH
35281: LD_VAR 0 3
35285: PPUSH
35286: LD_INT 3
35288: PPUSH
35289: CALL_OW 275
35293: PUSH
35294: LD_VAR 0 4
35298: PUSH
35299: LD_INT 3
35301: ARRAY
35302: GREATEREQUAL
35303: AND
35304: ST_TO_ADDR
// end ;
35305: LD_VAR 0 2
35309: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
35310: LD_INT 0
35312: PPUSH
35313: PPUSH
35314: PPUSH
// pom := GetBase ( building ) ;
35315: LD_ADDR_VAR 0 4
35319: PUSH
35320: LD_VAR 0 1
35324: PPUSH
35325: CALL_OW 274
35329: ST_TO_ADDR
// if not pom then
35330: LD_VAR 0 4
35334: NOT
35335: IFFALSE 35339
// exit ;
35337: GO 35440
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35339: LD_ADDR_VAR 0 5
35343: PUSH
35344: LD_VAR 0 2
35348: PPUSH
35349: LD_VAR 0 1
35353: PPUSH
35354: CALL_OW 248
35358: PPUSH
35359: CALL_OW 450
35363: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35364: LD_ADDR_VAR 0 3
35368: PUSH
35369: LD_VAR 0 4
35373: PPUSH
35374: LD_INT 1
35376: PPUSH
35377: CALL_OW 275
35381: PUSH
35382: LD_VAR 0 5
35386: PUSH
35387: LD_INT 1
35389: ARRAY
35390: GREATEREQUAL
35391: PUSH
35392: LD_VAR 0 4
35396: PPUSH
35397: LD_INT 2
35399: PPUSH
35400: CALL_OW 275
35404: PUSH
35405: LD_VAR 0 5
35409: PUSH
35410: LD_INT 2
35412: ARRAY
35413: GREATEREQUAL
35414: AND
35415: PUSH
35416: LD_VAR 0 4
35420: PPUSH
35421: LD_INT 3
35423: PPUSH
35424: CALL_OW 275
35428: PUSH
35429: LD_VAR 0 5
35433: PUSH
35434: LD_INT 3
35436: ARRAY
35437: GREATEREQUAL
35438: AND
35439: ST_TO_ADDR
// end ;
35440: LD_VAR 0 3
35444: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
35445: LD_INT 0
35447: PPUSH
35448: PPUSH
35449: PPUSH
35450: PPUSH
35451: PPUSH
35452: PPUSH
35453: PPUSH
35454: PPUSH
35455: PPUSH
35456: PPUSH
35457: PPUSH
// result := false ;
35458: LD_ADDR_VAR 0 8
35462: PUSH
35463: LD_INT 0
35465: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
35466: LD_VAR 0 5
35470: NOT
35471: PUSH
35472: LD_VAR 0 1
35476: NOT
35477: OR
35478: PUSH
35479: LD_VAR 0 2
35483: NOT
35484: OR
35485: PUSH
35486: LD_VAR 0 3
35490: NOT
35491: OR
35492: IFFALSE 35496
// exit ;
35494: GO 36310
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
35496: LD_ADDR_VAR 0 14
35500: PUSH
35501: LD_VAR 0 1
35505: PPUSH
35506: LD_VAR 0 2
35510: PPUSH
35511: LD_VAR 0 3
35515: PPUSH
35516: LD_VAR 0 4
35520: PPUSH
35521: LD_VAR 0 5
35525: PUSH
35526: LD_INT 1
35528: ARRAY
35529: PPUSH
35530: CALL_OW 248
35534: PPUSH
35535: LD_INT 0
35537: PPUSH
35538: CALL 37543 0 6
35542: ST_TO_ADDR
// if not hexes then
35543: LD_VAR 0 14
35547: NOT
35548: IFFALSE 35552
// exit ;
35550: GO 36310
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35552: LD_ADDR_VAR 0 17
35556: PUSH
35557: LD_VAR 0 5
35561: PPUSH
35562: LD_INT 22
35564: PUSH
35565: LD_VAR 0 13
35569: PPUSH
35570: CALL_OW 255
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: PUSH
35579: LD_INT 2
35581: PUSH
35582: LD_INT 30
35584: PUSH
35585: LD_INT 0
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: PUSH
35592: LD_INT 30
35594: PUSH
35595: LD_INT 1
35597: PUSH
35598: EMPTY
35599: LIST
35600: LIST
35601: PUSH
35602: EMPTY
35603: LIST
35604: LIST
35605: LIST
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: PPUSH
35611: CALL_OW 72
35615: ST_TO_ADDR
// for i = 1 to hexes do
35616: LD_ADDR_VAR 0 9
35620: PUSH
35621: DOUBLE
35622: LD_INT 1
35624: DEC
35625: ST_TO_ADDR
35626: LD_VAR 0 14
35630: PUSH
35631: FOR_TO
35632: IFFALSE 36308
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35634: LD_ADDR_VAR 0 13
35638: PUSH
35639: LD_VAR 0 14
35643: PUSH
35644: LD_VAR 0 9
35648: ARRAY
35649: PUSH
35650: LD_INT 1
35652: ARRAY
35653: PPUSH
35654: LD_VAR 0 14
35658: PUSH
35659: LD_VAR 0 9
35663: ARRAY
35664: PUSH
35665: LD_INT 2
35667: ARRAY
35668: PPUSH
35669: CALL_OW 428
35673: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
35674: LD_VAR 0 14
35678: PUSH
35679: LD_VAR 0 9
35683: ARRAY
35684: PUSH
35685: LD_INT 1
35687: ARRAY
35688: PPUSH
35689: LD_VAR 0 14
35693: PUSH
35694: LD_VAR 0 9
35698: ARRAY
35699: PUSH
35700: LD_INT 2
35702: ARRAY
35703: PPUSH
35704: CALL_OW 351
35708: PUSH
35709: LD_VAR 0 14
35713: PUSH
35714: LD_VAR 0 9
35718: ARRAY
35719: PUSH
35720: LD_INT 1
35722: ARRAY
35723: PPUSH
35724: LD_VAR 0 14
35728: PUSH
35729: LD_VAR 0 9
35733: ARRAY
35734: PUSH
35735: LD_INT 2
35737: ARRAY
35738: PPUSH
35739: CALL_OW 488
35743: NOT
35744: OR
35745: PUSH
35746: LD_VAR 0 13
35750: PPUSH
35751: CALL_OW 247
35755: PUSH
35756: LD_INT 3
35758: EQUAL
35759: OR
35760: IFFALSE 35766
// exit ;
35762: POP
35763: POP
35764: GO 36310
// if not tmp then
35766: LD_VAR 0 13
35770: NOT
35771: IFFALSE 35775
// continue ;
35773: GO 35631
// result := true ;
35775: LD_ADDR_VAR 0 8
35779: PUSH
35780: LD_INT 1
35782: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
35783: LD_VAR 0 6
35787: PUSH
35788: LD_VAR 0 13
35792: PPUSH
35793: CALL_OW 247
35797: PUSH
35798: LD_INT 2
35800: EQUAL
35801: AND
35802: PUSH
35803: LD_VAR 0 13
35807: PPUSH
35808: CALL_OW 263
35812: PUSH
35813: LD_INT 1
35815: EQUAL
35816: AND
35817: IFFALSE 35981
// begin if IsDrivenBy ( tmp ) then
35819: LD_VAR 0 13
35823: PPUSH
35824: CALL_OW 311
35828: IFFALSE 35832
// continue ;
35830: GO 35631
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
35832: LD_VAR 0 6
35836: PPUSH
35837: LD_INT 3
35839: PUSH
35840: LD_INT 60
35842: PUSH
35843: EMPTY
35844: LIST
35845: PUSH
35846: EMPTY
35847: LIST
35848: LIST
35849: PUSH
35850: LD_INT 3
35852: PUSH
35853: LD_INT 55
35855: PUSH
35856: EMPTY
35857: LIST
35858: PUSH
35859: EMPTY
35860: LIST
35861: LIST
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PPUSH
35867: CALL_OW 72
35871: IFFALSE 35979
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
35873: LD_ADDR_VAR 0 18
35877: PUSH
35878: LD_VAR 0 6
35882: PPUSH
35883: LD_INT 3
35885: PUSH
35886: LD_INT 60
35888: PUSH
35889: EMPTY
35890: LIST
35891: PUSH
35892: EMPTY
35893: LIST
35894: LIST
35895: PUSH
35896: LD_INT 3
35898: PUSH
35899: LD_INT 55
35901: PUSH
35902: EMPTY
35903: LIST
35904: PUSH
35905: EMPTY
35906: LIST
35907: LIST
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: PPUSH
35913: CALL_OW 72
35917: PUSH
35918: LD_INT 1
35920: ARRAY
35921: ST_TO_ADDR
// if IsInUnit ( driver ) then
35922: LD_VAR 0 18
35926: PPUSH
35927: CALL_OW 310
35931: IFFALSE 35942
// ComExit ( driver ) ;
35933: LD_VAR 0 18
35937: PPUSH
35938: CALL 61323 0 1
// AddComEnterUnit ( driver , tmp ) ;
35942: LD_VAR 0 18
35946: PPUSH
35947: LD_VAR 0 13
35951: PPUSH
35952: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
35956: LD_VAR 0 18
35960: PPUSH
35961: LD_VAR 0 7
35965: PPUSH
35966: CALL_OW 173
// AddComExitVehicle ( driver ) ;
35970: LD_VAR 0 18
35974: PPUSH
35975: CALL_OW 181
// end ; continue ;
35979: GO 35631
// end ; if not cleaners or not tmp in cleaners then
35981: LD_VAR 0 6
35985: NOT
35986: PUSH
35987: LD_VAR 0 13
35991: PUSH
35992: LD_VAR 0 6
35996: IN
35997: NOT
35998: OR
35999: IFFALSE 36306
// begin if dep then
36001: LD_VAR 0 17
36005: IFFALSE 36141
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
36007: LD_ADDR_VAR 0 16
36011: PUSH
36012: LD_VAR 0 17
36016: PUSH
36017: LD_INT 1
36019: ARRAY
36020: PPUSH
36021: CALL_OW 250
36025: PPUSH
36026: LD_VAR 0 17
36030: PUSH
36031: LD_INT 1
36033: ARRAY
36034: PPUSH
36035: CALL_OW 254
36039: PPUSH
36040: LD_INT 5
36042: PPUSH
36043: CALL_OW 272
36047: PUSH
36048: LD_VAR 0 17
36052: PUSH
36053: LD_INT 1
36055: ARRAY
36056: PPUSH
36057: CALL_OW 251
36061: PPUSH
36062: LD_VAR 0 17
36066: PUSH
36067: LD_INT 1
36069: ARRAY
36070: PPUSH
36071: CALL_OW 254
36075: PPUSH
36076: LD_INT 5
36078: PPUSH
36079: CALL_OW 273
36083: PUSH
36084: EMPTY
36085: LIST
36086: LIST
36087: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
36088: LD_VAR 0 16
36092: PUSH
36093: LD_INT 1
36095: ARRAY
36096: PPUSH
36097: LD_VAR 0 16
36101: PUSH
36102: LD_INT 2
36104: ARRAY
36105: PPUSH
36106: CALL_OW 488
36110: IFFALSE 36141
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
36112: LD_VAR 0 13
36116: PPUSH
36117: LD_VAR 0 16
36121: PUSH
36122: LD_INT 1
36124: ARRAY
36125: PPUSH
36126: LD_VAR 0 16
36130: PUSH
36131: LD_INT 2
36133: ARRAY
36134: PPUSH
36135: CALL_OW 111
// continue ;
36139: GO 35631
// end ; end ; r := GetDir ( tmp ) ;
36141: LD_ADDR_VAR 0 15
36145: PUSH
36146: LD_VAR 0 13
36150: PPUSH
36151: CALL_OW 254
36155: ST_TO_ADDR
// if r = 5 then
36156: LD_VAR 0 15
36160: PUSH
36161: LD_INT 5
36163: EQUAL
36164: IFFALSE 36174
// r := 0 ;
36166: LD_ADDR_VAR 0 15
36170: PUSH
36171: LD_INT 0
36173: ST_TO_ADDR
// for j = r to 5 do
36174: LD_ADDR_VAR 0 10
36178: PUSH
36179: DOUBLE
36180: LD_VAR 0 15
36184: DEC
36185: ST_TO_ADDR
36186: LD_INT 5
36188: PUSH
36189: FOR_TO
36190: IFFALSE 36304
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
36192: LD_ADDR_VAR 0 11
36196: PUSH
36197: LD_VAR 0 13
36201: PPUSH
36202: CALL_OW 250
36206: PPUSH
36207: LD_VAR 0 10
36211: PPUSH
36212: LD_INT 2
36214: PPUSH
36215: CALL_OW 272
36219: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
36220: LD_ADDR_VAR 0 12
36224: PUSH
36225: LD_VAR 0 13
36229: PPUSH
36230: CALL_OW 251
36234: PPUSH
36235: LD_VAR 0 10
36239: PPUSH
36240: LD_INT 2
36242: PPUSH
36243: CALL_OW 273
36247: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
36248: LD_VAR 0 11
36252: PPUSH
36253: LD_VAR 0 12
36257: PPUSH
36258: CALL_OW 488
36262: PUSH
36263: LD_VAR 0 11
36267: PPUSH
36268: LD_VAR 0 12
36272: PPUSH
36273: CALL_OW 428
36277: NOT
36278: AND
36279: IFFALSE 36302
// begin ComMoveXY ( tmp , _x , _y ) ;
36281: LD_VAR 0 13
36285: PPUSH
36286: LD_VAR 0 11
36290: PPUSH
36291: LD_VAR 0 12
36295: PPUSH
36296: CALL_OW 111
// break ;
36300: GO 36304
// end ; end ;
36302: GO 36189
36304: POP
36305: POP
// end ; end ;
36306: GO 35631
36308: POP
36309: POP
// end ;
36310: LD_VAR 0 8
36314: RET
// export function BuildingTechInvented ( side , btype ) ; begin
36315: LD_INT 0
36317: PPUSH
// result := true ;
36318: LD_ADDR_VAR 0 3
36322: PUSH
36323: LD_INT 1
36325: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
36326: LD_VAR 0 2
36330: PUSH
36331: LD_INT 24
36333: DOUBLE
36334: EQUAL
36335: IFTRUE 36345
36337: LD_INT 33
36339: DOUBLE
36340: EQUAL
36341: IFTRUE 36345
36343: GO 36370
36345: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
36346: LD_ADDR_VAR 0 3
36350: PUSH
36351: LD_INT 32
36353: PPUSH
36354: LD_VAR 0 1
36358: PPUSH
36359: CALL_OW 321
36363: PUSH
36364: LD_INT 2
36366: EQUAL
36367: ST_TO_ADDR
36368: GO 36686
36370: LD_INT 20
36372: DOUBLE
36373: EQUAL
36374: IFTRUE 36378
36376: GO 36403
36378: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
36379: LD_ADDR_VAR 0 3
36383: PUSH
36384: LD_INT 6
36386: PPUSH
36387: LD_VAR 0 1
36391: PPUSH
36392: CALL_OW 321
36396: PUSH
36397: LD_INT 2
36399: EQUAL
36400: ST_TO_ADDR
36401: GO 36686
36403: LD_INT 22
36405: DOUBLE
36406: EQUAL
36407: IFTRUE 36417
36409: LD_INT 36
36411: DOUBLE
36412: EQUAL
36413: IFTRUE 36417
36415: GO 36442
36417: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
36418: LD_ADDR_VAR 0 3
36422: PUSH
36423: LD_INT 15
36425: PPUSH
36426: LD_VAR 0 1
36430: PPUSH
36431: CALL_OW 321
36435: PUSH
36436: LD_INT 2
36438: EQUAL
36439: ST_TO_ADDR
36440: GO 36686
36442: LD_INT 30
36444: DOUBLE
36445: EQUAL
36446: IFTRUE 36450
36448: GO 36475
36450: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
36451: LD_ADDR_VAR 0 3
36455: PUSH
36456: LD_INT 20
36458: PPUSH
36459: LD_VAR 0 1
36463: PPUSH
36464: CALL_OW 321
36468: PUSH
36469: LD_INT 2
36471: EQUAL
36472: ST_TO_ADDR
36473: GO 36686
36475: LD_INT 28
36477: DOUBLE
36478: EQUAL
36479: IFTRUE 36489
36481: LD_INT 21
36483: DOUBLE
36484: EQUAL
36485: IFTRUE 36489
36487: GO 36514
36489: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
36490: LD_ADDR_VAR 0 3
36494: PUSH
36495: LD_INT 21
36497: PPUSH
36498: LD_VAR 0 1
36502: PPUSH
36503: CALL_OW 321
36507: PUSH
36508: LD_INT 2
36510: EQUAL
36511: ST_TO_ADDR
36512: GO 36686
36514: LD_INT 16
36516: DOUBLE
36517: EQUAL
36518: IFTRUE 36522
36520: GO 36547
36522: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
36523: LD_ADDR_VAR 0 3
36527: PUSH
36528: LD_INT 84
36530: PPUSH
36531: LD_VAR 0 1
36535: PPUSH
36536: CALL_OW 321
36540: PUSH
36541: LD_INT 2
36543: EQUAL
36544: ST_TO_ADDR
36545: GO 36686
36547: LD_INT 19
36549: DOUBLE
36550: EQUAL
36551: IFTRUE 36561
36553: LD_INT 23
36555: DOUBLE
36556: EQUAL
36557: IFTRUE 36561
36559: GO 36586
36561: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
36562: LD_ADDR_VAR 0 3
36566: PUSH
36567: LD_INT 83
36569: PPUSH
36570: LD_VAR 0 1
36574: PPUSH
36575: CALL_OW 321
36579: PUSH
36580: LD_INT 2
36582: EQUAL
36583: ST_TO_ADDR
36584: GO 36686
36586: LD_INT 17
36588: DOUBLE
36589: EQUAL
36590: IFTRUE 36594
36592: GO 36619
36594: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
36595: LD_ADDR_VAR 0 3
36599: PUSH
36600: LD_INT 39
36602: PPUSH
36603: LD_VAR 0 1
36607: PPUSH
36608: CALL_OW 321
36612: PUSH
36613: LD_INT 2
36615: EQUAL
36616: ST_TO_ADDR
36617: GO 36686
36619: LD_INT 18
36621: DOUBLE
36622: EQUAL
36623: IFTRUE 36627
36625: GO 36652
36627: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
36628: LD_ADDR_VAR 0 3
36632: PUSH
36633: LD_INT 40
36635: PPUSH
36636: LD_VAR 0 1
36640: PPUSH
36641: CALL_OW 321
36645: PUSH
36646: LD_INT 2
36648: EQUAL
36649: ST_TO_ADDR
36650: GO 36686
36652: LD_INT 27
36654: DOUBLE
36655: EQUAL
36656: IFTRUE 36660
36658: GO 36685
36660: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
36661: LD_ADDR_VAR 0 3
36665: PUSH
36666: LD_INT 35
36668: PPUSH
36669: LD_VAR 0 1
36673: PPUSH
36674: CALL_OW 321
36678: PUSH
36679: LD_INT 2
36681: EQUAL
36682: ST_TO_ADDR
36683: GO 36686
36685: POP
// end ;
36686: LD_VAR 0 3
36690: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
36691: LD_INT 0
36693: PPUSH
36694: PPUSH
36695: PPUSH
36696: PPUSH
36697: PPUSH
36698: PPUSH
36699: PPUSH
36700: PPUSH
36701: PPUSH
36702: PPUSH
36703: PPUSH
// result := false ;
36704: LD_ADDR_VAR 0 6
36708: PUSH
36709: LD_INT 0
36711: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
36712: LD_VAR 0 1
36716: NOT
36717: PUSH
36718: LD_VAR 0 1
36722: PPUSH
36723: CALL_OW 266
36727: PUSH
36728: LD_INT 0
36730: PUSH
36731: LD_INT 1
36733: PUSH
36734: EMPTY
36735: LIST
36736: LIST
36737: IN
36738: NOT
36739: OR
36740: PUSH
36741: LD_VAR 0 2
36745: NOT
36746: OR
36747: PUSH
36748: LD_VAR 0 5
36752: PUSH
36753: LD_INT 0
36755: PUSH
36756: LD_INT 1
36758: PUSH
36759: LD_INT 2
36761: PUSH
36762: LD_INT 3
36764: PUSH
36765: LD_INT 4
36767: PUSH
36768: LD_INT 5
36770: PUSH
36771: EMPTY
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: IN
36779: NOT
36780: OR
36781: PUSH
36782: LD_VAR 0 3
36786: PPUSH
36787: LD_VAR 0 4
36791: PPUSH
36792: CALL_OW 488
36796: NOT
36797: OR
36798: IFFALSE 36802
// exit ;
36800: GO 37538
// side := GetSide ( depot ) ;
36802: LD_ADDR_VAR 0 9
36806: PUSH
36807: LD_VAR 0 1
36811: PPUSH
36812: CALL_OW 255
36816: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
36817: LD_VAR 0 9
36821: PPUSH
36822: LD_VAR 0 2
36826: PPUSH
36827: CALL 36315 0 2
36831: NOT
36832: IFFALSE 36836
// exit ;
36834: GO 37538
// pom := GetBase ( depot ) ;
36836: LD_ADDR_VAR 0 10
36840: PUSH
36841: LD_VAR 0 1
36845: PPUSH
36846: CALL_OW 274
36850: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
36851: LD_ADDR_VAR 0 11
36855: PUSH
36856: LD_VAR 0 2
36860: PPUSH
36861: LD_VAR 0 1
36865: PPUSH
36866: CALL_OW 248
36870: PPUSH
36871: CALL_OW 450
36875: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
36876: LD_VAR 0 10
36880: PPUSH
36881: LD_INT 1
36883: PPUSH
36884: CALL_OW 275
36888: PUSH
36889: LD_VAR 0 11
36893: PUSH
36894: LD_INT 1
36896: ARRAY
36897: GREATEREQUAL
36898: PUSH
36899: LD_VAR 0 10
36903: PPUSH
36904: LD_INT 2
36906: PPUSH
36907: CALL_OW 275
36911: PUSH
36912: LD_VAR 0 11
36916: PUSH
36917: LD_INT 2
36919: ARRAY
36920: GREATEREQUAL
36921: AND
36922: PUSH
36923: LD_VAR 0 10
36927: PPUSH
36928: LD_INT 3
36930: PPUSH
36931: CALL_OW 275
36935: PUSH
36936: LD_VAR 0 11
36940: PUSH
36941: LD_INT 3
36943: ARRAY
36944: GREATEREQUAL
36945: AND
36946: NOT
36947: IFFALSE 36951
// exit ;
36949: GO 37538
// if GetBType ( depot ) = b_depot then
36951: LD_VAR 0 1
36955: PPUSH
36956: CALL_OW 266
36960: PUSH
36961: LD_INT 0
36963: EQUAL
36964: IFFALSE 36976
// dist := 28 else
36966: LD_ADDR_VAR 0 14
36970: PUSH
36971: LD_INT 28
36973: ST_TO_ADDR
36974: GO 36984
// dist := 36 ;
36976: LD_ADDR_VAR 0 14
36980: PUSH
36981: LD_INT 36
36983: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
36984: LD_VAR 0 1
36988: PPUSH
36989: LD_VAR 0 3
36993: PPUSH
36994: LD_VAR 0 4
36998: PPUSH
36999: CALL_OW 297
37003: PUSH
37004: LD_VAR 0 14
37008: GREATER
37009: IFFALSE 37013
// exit ;
37011: GO 37538
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
37013: LD_ADDR_VAR 0 12
37017: PUSH
37018: LD_VAR 0 2
37022: PPUSH
37023: LD_VAR 0 3
37027: PPUSH
37028: LD_VAR 0 4
37032: PPUSH
37033: LD_VAR 0 5
37037: PPUSH
37038: LD_VAR 0 1
37042: PPUSH
37043: CALL_OW 248
37047: PPUSH
37048: LD_INT 0
37050: PPUSH
37051: CALL 37543 0 6
37055: ST_TO_ADDR
// if not hexes then
37056: LD_VAR 0 12
37060: NOT
37061: IFFALSE 37065
// exit ;
37063: GO 37538
// hex := GetHexInfo ( x , y ) ;
37065: LD_ADDR_VAR 0 15
37069: PUSH
37070: LD_VAR 0 3
37074: PPUSH
37075: LD_VAR 0 4
37079: PPUSH
37080: CALL_OW 546
37084: ST_TO_ADDR
// if hex [ 1 ] then
37085: LD_VAR 0 15
37089: PUSH
37090: LD_INT 1
37092: ARRAY
37093: IFFALSE 37097
// exit ;
37095: GO 37538
// height := hex [ 2 ] ;
37097: LD_ADDR_VAR 0 13
37101: PUSH
37102: LD_VAR 0 15
37106: PUSH
37107: LD_INT 2
37109: ARRAY
37110: ST_TO_ADDR
// for i = 1 to hexes do
37111: LD_ADDR_VAR 0 7
37115: PUSH
37116: DOUBLE
37117: LD_INT 1
37119: DEC
37120: ST_TO_ADDR
37121: LD_VAR 0 12
37125: PUSH
37126: FOR_TO
37127: IFFALSE 37457
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
37129: LD_VAR 0 12
37133: PUSH
37134: LD_VAR 0 7
37138: ARRAY
37139: PUSH
37140: LD_INT 1
37142: ARRAY
37143: PPUSH
37144: LD_VAR 0 12
37148: PUSH
37149: LD_VAR 0 7
37153: ARRAY
37154: PUSH
37155: LD_INT 2
37157: ARRAY
37158: PPUSH
37159: CALL_OW 488
37163: NOT
37164: PUSH
37165: LD_VAR 0 12
37169: PUSH
37170: LD_VAR 0 7
37174: ARRAY
37175: PUSH
37176: LD_INT 1
37178: ARRAY
37179: PPUSH
37180: LD_VAR 0 12
37184: PUSH
37185: LD_VAR 0 7
37189: ARRAY
37190: PUSH
37191: LD_INT 2
37193: ARRAY
37194: PPUSH
37195: CALL_OW 428
37199: PUSH
37200: LD_INT 0
37202: GREATER
37203: OR
37204: PUSH
37205: LD_VAR 0 12
37209: PUSH
37210: LD_VAR 0 7
37214: ARRAY
37215: PUSH
37216: LD_INT 1
37218: ARRAY
37219: PPUSH
37220: LD_VAR 0 12
37224: PUSH
37225: LD_VAR 0 7
37229: ARRAY
37230: PUSH
37231: LD_INT 2
37233: ARRAY
37234: PPUSH
37235: CALL_OW 351
37239: OR
37240: IFFALSE 37246
// exit ;
37242: POP
37243: POP
37244: GO 37538
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37246: LD_ADDR_VAR 0 8
37250: PUSH
37251: LD_VAR 0 12
37255: PUSH
37256: LD_VAR 0 7
37260: ARRAY
37261: PUSH
37262: LD_INT 1
37264: ARRAY
37265: PPUSH
37266: LD_VAR 0 12
37270: PUSH
37271: LD_VAR 0 7
37275: ARRAY
37276: PUSH
37277: LD_INT 2
37279: ARRAY
37280: PPUSH
37281: CALL_OW 546
37285: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
37286: LD_VAR 0 8
37290: PUSH
37291: LD_INT 1
37293: ARRAY
37294: PUSH
37295: LD_VAR 0 8
37299: PUSH
37300: LD_INT 2
37302: ARRAY
37303: PUSH
37304: LD_VAR 0 13
37308: PUSH
37309: LD_INT 2
37311: PLUS
37312: GREATER
37313: OR
37314: PUSH
37315: LD_VAR 0 8
37319: PUSH
37320: LD_INT 2
37322: ARRAY
37323: PUSH
37324: LD_VAR 0 13
37328: PUSH
37329: LD_INT 2
37331: MINUS
37332: LESS
37333: OR
37334: PUSH
37335: LD_VAR 0 8
37339: PUSH
37340: LD_INT 3
37342: ARRAY
37343: PUSH
37344: LD_INT 0
37346: PUSH
37347: LD_INT 8
37349: PUSH
37350: LD_INT 9
37352: PUSH
37353: LD_INT 10
37355: PUSH
37356: LD_INT 11
37358: PUSH
37359: LD_INT 12
37361: PUSH
37362: LD_INT 13
37364: PUSH
37365: LD_INT 16
37367: PUSH
37368: LD_INT 17
37370: PUSH
37371: LD_INT 18
37373: PUSH
37374: LD_INT 19
37376: PUSH
37377: LD_INT 20
37379: PUSH
37380: LD_INT 21
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: IN
37398: NOT
37399: OR
37400: PUSH
37401: LD_VAR 0 8
37405: PUSH
37406: LD_INT 5
37408: ARRAY
37409: NOT
37410: OR
37411: PUSH
37412: LD_VAR 0 8
37416: PUSH
37417: LD_INT 6
37419: ARRAY
37420: PUSH
37421: LD_INT 1
37423: PUSH
37424: LD_INT 2
37426: PUSH
37427: LD_INT 7
37429: PUSH
37430: LD_INT 9
37432: PUSH
37433: LD_INT 10
37435: PUSH
37436: LD_INT 11
37438: PUSH
37439: EMPTY
37440: LIST
37441: LIST
37442: LIST
37443: LIST
37444: LIST
37445: LIST
37446: IN
37447: NOT
37448: OR
37449: IFFALSE 37455
// exit ;
37451: POP
37452: POP
37453: GO 37538
// end ;
37455: GO 37126
37457: POP
37458: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
37459: LD_VAR 0 9
37463: PPUSH
37464: LD_VAR 0 3
37468: PPUSH
37469: LD_VAR 0 4
37473: PPUSH
37474: LD_INT 20
37476: PPUSH
37477: CALL 29490 0 4
37481: PUSH
37482: LD_INT 4
37484: ARRAY
37485: IFFALSE 37489
// exit ;
37487: GO 37538
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
37489: LD_VAR 0 2
37493: PUSH
37494: LD_INT 29
37496: PUSH
37497: LD_INT 30
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: IN
37504: PUSH
37505: LD_VAR 0 3
37509: PPUSH
37510: LD_VAR 0 4
37514: PPUSH
37515: LD_VAR 0 9
37519: PPUSH
37520: CALL_OW 440
37524: NOT
37525: AND
37526: IFFALSE 37530
// exit ;
37528: GO 37538
// result := true ;
37530: LD_ADDR_VAR 0 6
37534: PUSH
37535: LD_INT 1
37537: ST_TO_ADDR
// end ;
37538: LD_VAR 0 6
37542: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
37543: LD_INT 0
37545: PPUSH
37546: PPUSH
37547: PPUSH
37548: PPUSH
37549: PPUSH
37550: PPUSH
37551: PPUSH
37552: PPUSH
37553: PPUSH
37554: PPUSH
37555: PPUSH
37556: PPUSH
37557: PPUSH
37558: PPUSH
37559: PPUSH
37560: PPUSH
37561: PPUSH
37562: PPUSH
37563: PPUSH
37564: PPUSH
37565: PPUSH
37566: PPUSH
37567: PPUSH
37568: PPUSH
37569: PPUSH
37570: PPUSH
37571: PPUSH
37572: PPUSH
37573: PPUSH
37574: PPUSH
37575: PPUSH
37576: PPUSH
37577: PPUSH
37578: PPUSH
37579: PPUSH
37580: PPUSH
37581: PPUSH
37582: PPUSH
37583: PPUSH
37584: PPUSH
37585: PPUSH
37586: PPUSH
37587: PPUSH
37588: PPUSH
37589: PPUSH
37590: PPUSH
37591: PPUSH
37592: PPUSH
37593: PPUSH
37594: PPUSH
37595: PPUSH
37596: PPUSH
37597: PPUSH
37598: PPUSH
37599: PPUSH
37600: PPUSH
37601: PPUSH
37602: PPUSH
// result = [ ] ;
37603: LD_ADDR_VAR 0 7
37607: PUSH
37608: EMPTY
37609: ST_TO_ADDR
// temp_list = [ ] ;
37610: LD_ADDR_VAR 0 9
37614: PUSH
37615: EMPTY
37616: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
37617: LD_VAR 0 4
37621: PUSH
37622: LD_INT 0
37624: PUSH
37625: LD_INT 1
37627: PUSH
37628: LD_INT 2
37630: PUSH
37631: LD_INT 3
37633: PUSH
37634: LD_INT 4
37636: PUSH
37637: LD_INT 5
37639: PUSH
37640: EMPTY
37641: LIST
37642: LIST
37643: LIST
37644: LIST
37645: LIST
37646: LIST
37647: IN
37648: NOT
37649: PUSH
37650: LD_VAR 0 1
37654: PUSH
37655: LD_INT 0
37657: PUSH
37658: LD_INT 1
37660: PUSH
37661: EMPTY
37662: LIST
37663: LIST
37664: IN
37665: PUSH
37666: LD_VAR 0 5
37670: PUSH
37671: LD_INT 1
37673: PUSH
37674: LD_INT 2
37676: PUSH
37677: LD_INT 3
37679: PUSH
37680: EMPTY
37681: LIST
37682: LIST
37683: LIST
37684: IN
37685: NOT
37686: AND
37687: OR
37688: IFFALSE 37692
// exit ;
37690: GO 56083
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
37692: LD_VAR 0 1
37696: PUSH
37697: LD_INT 6
37699: PUSH
37700: LD_INT 7
37702: PUSH
37703: LD_INT 8
37705: PUSH
37706: LD_INT 13
37708: PUSH
37709: LD_INT 12
37711: PUSH
37712: LD_INT 15
37714: PUSH
37715: LD_INT 11
37717: PUSH
37718: LD_INT 14
37720: PUSH
37721: LD_INT 10
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: LIST
37728: LIST
37729: LIST
37730: LIST
37731: LIST
37732: LIST
37733: LIST
37734: IN
37735: IFFALSE 37745
// btype = b_lab ;
37737: LD_ADDR_VAR 0 1
37741: PUSH
37742: LD_INT 6
37744: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
37745: LD_VAR 0 6
37749: PUSH
37750: LD_INT 0
37752: PUSH
37753: LD_INT 1
37755: PUSH
37756: LD_INT 2
37758: PUSH
37759: EMPTY
37760: LIST
37761: LIST
37762: LIST
37763: IN
37764: NOT
37765: PUSH
37766: LD_VAR 0 1
37770: PUSH
37771: LD_INT 0
37773: PUSH
37774: LD_INT 1
37776: PUSH
37777: LD_INT 2
37779: PUSH
37780: LD_INT 3
37782: PUSH
37783: LD_INT 6
37785: PUSH
37786: LD_INT 36
37788: PUSH
37789: LD_INT 4
37791: PUSH
37792: LD_INT 5
37794: PUSH
37795: LD_INT 31
37797: PUSH
37798: LD_INT 32
37800: PUSH
37801: LD_INT 33
37803: PUSH
37804: EMPTY
37805: LIST
37806: LIST
37807: LIST
37808: LIST
37809: LIST
37810: LIST
37811: LIST
37812: LIST
37813: LIST
37814: LIST
37815: LIST
37816: IN
37817: NOT
37818: PUSH
37819: LD_VAR 0 6
37823: PUSH
37824: LD_INT 1
37826: EQUAL
37827: AND
37828: OR
37829: PUSH
37830: LD_VAR 0 1
37834: PUSH
37835: LD_INT 2
37837: PUSH
37838: LD_INT 3
37840: PUSH
37841: EMPTY
37842: LIST
37843: LIST
37844: IN
37845: NOT
37846: PUSH
37847: LD_VAR 0 6
37851: PUSH
37852: LD_INT 2
37854: EQUAL
37855: AND
37856: OR
37857: IFFALSE 37867
// mode = 0 ;
37859: LD_ADDR_VAR 0 6
37863: PUSH
37864: LD_INT 0
37866: ST_TO_ADDR
// case mode of 0 :
37867: LD_VAR 0 6
37871: PUSH
37872: LD_INT 0
37874: DOUBLE
37875: EQUAL
37876: IFTRUE 37880
37878: GO 49333
37880: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37881: LD_ADDR_VAR 0 11
37885: PUSH
37886: LD_INT 0
37888: PUSH
37889: LD_INT 0
37891: PUSH
37892: EMPTY
37893: LIST
37894: LIST
37895: PUSH
37896: LD_INT 0
37898: PUSH
37899: LD_INT 1
37901: NEG
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: LD_INT 1
37909: PUSH
37910: LD_INT 0
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: PUSH
37917: LD_INT 1
37919: PUSH
37920: LD_INT 1
37922: PUSH
37923: EMPTY
37924: LIST
37925: LIST
37926: PUSH
37927: LD_INT 0
37929: PUSH
37930: LD_INT 1
37932: PUSH
37933: EMPTY
37934: LIST
37935: LIST
37936: PUSH
37937: LD_INT 1
37939: NEG
37940: PUSH
37941: LD_INT 0
37943: PUSH
37944: EMPTY
37945: LIST
37946: LIST
37947: PUSH
37948: LD_INT 1
37950: NEG
37951: PUSH
37952: LD_INT 1
37954: NEG
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: LD_INT 1
37962: NEG
37963: PUSH
37964: LD_INT 2
37966: NEG
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: LD_INT 0
37974: PUSH
37975: LD_INT 2
37977: NEG
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: LD_INT 1
37985: PUSH
37986: LD_INT 1
37988: NEG
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: LD_INT 1
37996: PUSH
37997: LD_INT 2
37999: PUSH
38000: EMPTY
38001: LIST
38002: LIST
38003: PUSH
38004: LD_INT 0
38006: PUSH
38007: LD_INT 2
38009: PUSH
38010: EMPTY
38011: LIST
38012: LIST
38013: PUSH
38014: LD_INT 1
38016: NEG
38017: PUSH
38018: LD_INT 1
38020: PUSH
38021: EMPTY
38022: LIST
38023: LIST
38024: PUSH
38025: LD_INT 1
38027: PUSH
38028: LD_INT 3
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PUSH
38035: LD_INT 0
38037: PUSH
38038: LD_INT 3
38040: PUSH
38041: EMPTY
38042: LIST
38043: LIST
38044: PUSH
38045: LD_INT 1
38047: NEG
38048: PUSH
38049: LD_INT 2
38051: PUSH
38052: EMPTY
38053: LIST
38054: LIST
38055: PUSH
38056: EMPTY
38057: LIST
38058: LIST
38059: LIST
38060: LIST
38061: LIST
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: LIST
38073: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38074: LD_ADDR_VAR 0 12
38078: PUSH
38079: LD_INT 0
38081: PUSH
38082: LD_INT 0
38084: PUSH
38085: EMPTY
38086: LIST
38087: LIST
38088: PUSH
38089: LD_INT 0
38091: PUSH
38092: LD_INT 1
38094: NEG
38095: PUSH
38096: EMPTY
38097: LIST
38098: LIST
38099: PUSH
38100: LD_INT 1
38102: PUSH
38103: LD_INT 0
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: PUSH
38110: LD_INT 1
38112: PUSH
38113: LD_INT 1
38115: PUSH
38116: EMPTY
38117: LIST
38118: LIST
38119: PUSH
38120: LD_INT 0
38122: PUSH
38123: LD_INT 1
38125: PUSH
38126: EMPTY
38127: LIST
38128: LIST
38129: PUSH
38130: LD_INT 1
38132: NEG
38133: PUSH
38134: LD_INT 0
38136: PUSH
38137: EMPTY
38138: LIST
38139: LIST
38140: PUSH
38141: LD_INT 1
38143: NEG
38144: PUSH
38145: LD_INT 1
38147: NEG
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: PUSH
38153: LD_INT 1
38155: PUSH
38156: LD_INT 1
38158: NEG
38159: PUSH
38160: EMPTY
38161: LIST
38162: LIST
38163: PUSH
38164: LD_INT 2
38166: PUSH
38167: LD_INT 0
38169: PUSH
38170: EMPTY
38171: LIST
38172: LIST
38173: PUSH
38174: LD_INT 2
38176: PUSH
38177: LD_INT 1
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: LD_INT 1
38186: NEG
38187: PUSH
38188: LD_INT 1
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: PUSH
38195: LD_INT 2
38197: NEG
38198: PUSH
38199: LD_INT 0
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: PUSH
38206: LD_INT 2
38208: NEG
38209: PUSH
38210: LD_INT 1
38212: NEG
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: PUSH
38218: LD_INT 2
38220: NEG
38221: PUSH
38222: LD_INT 1
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: PUSH
38229: LD_INT 3
38231: NEG
38232: PUSH
38233: LD_INT 0
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: LD_INT 3
38242: NEG
38243: PUSH
38244: LD_INT 1
38246: NEG
38247: PUSH
38248: EMPTY
38249: LIST
38250: LIST
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: LIST
38256: LIST
38257: LIST
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38270: LD_ADDR_VAR 0 13
38274: PUSH
38275: LD_INT 0
38277: PUSH
38278: LD_INT 0
38280: PUSH
38281: EMPTY
38282: LIST
38283: LIST
38284: PUSH
38285: LD_INT 0
38287: PUSH
38288: LD_INT 1
38290: NEG
38291: PUSH
38292: EMPTY
38293: LIST
38294: LIST
38295: PUSH
38296: LD_INT 1
38298: PUSH
38299: LD_INT 0
38301: PUSH
38302: EMPTY
38303: LIST
38304: LIST
38305: PUSH
38306: LD_INT 1
38308: PUSH
38309: LD_INT 1
38311: PUSH
38312: EMPTY
38313: LIST
38314: LIST
38315: PUSH
38316: LD_INT 0
38318: PUSH
38319: LD_INT 1
38321: PUSH
38322: EMPTY
38323: LIST
38324: LIST
38325: PUSH
38326: LD_INT 1
38328: NEG
38329: PUSH
38330: LD_INT 0
38332: PUSH
38333: EMPTY
38334: LIST
38335: LIST
38336: PUSH
38337: LD_INT 1
38339: NEG
38340: PUSH
38341: LD_INT 1
38343: NEG
38344: PUSH
38345: EMPTY
38346: LIST
38347: LIST
38348: PUSH
38349: LD_INT 1
38351: NEG
38352: PUSH
38353: LD_INT 2
38355: NEG
38356: PUSH
38357: EMPTY
38358: LIST
38359: LIST
38360: PUSH
38361: LD_INT 2
38363: PUSH
38364: LD_INT 1
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 2
38373: PUSH
38374: LD_INT 2
38376: PUSH
38377: EMPTY
38378: LIST
38379: LIST
38380: PUSH
38381: LD_INT 1
38383: PUSH
38384: LD_INT 2
38386: PUSH
38387: EMPTY
38388: LIST
38389: LIST
38390: PUSH
38391: LD_INT 2
38393: NEG
38394: PUSH
38395: LD_INT 1
38397: NEG
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: PUSH
38403: LD_INT 2
38405: NEG
38406: PUSH
38407: LD_INT 2
38409: NEG
38410: PUSH
38411: EMPTY
38412: LIST
38413: LIST
38414: PUSH
38415: LD_INT 2
38417: NEG
38418: PUSH
38419: LD_INT 3
38421: NEG
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: PUSH
38427: LD_INT 3
38429: NEG
38430: PUSH
38431: LD_INT 2
38433: NEG
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: PUSH
38439: LD_INT 3
38441: NEG
38442: PUSH
38443: LD_INT 3
38445: NEG
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: PUSH
38451: EMPTY
38452: LIST
38453: LIST
38454: LIST
38455: LIST
38456: LIST
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38469: LD_ADDR_VAR 0 14
38473: PUSH
38474: LD_INT 0
38476: PUSH
38477: LD_INT 0
38479: PUSH
38480: EMPTY
38481: LIST
38482: LIST
38483: PUSH
38484: LD_INT 0
38486: PUSH
38487: LD_INT 1
38489: NEG
38490: PUSH
38491: EMPTY
38492: LIST
38493: LIST
38494: PUSH
38495: LD_INT 1
38497: PUSH
38498: LD_INT 0
38500: PUSH
38501: EMPTY
38502: LIST
38503: LIST
38504: PUSH
38505: LD_INT 1
38507: PUSH
38508: LD_INT 1
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: PUSH
38515: LD_INT 0
38517: PUSH
38518: LD_INT 1
38520: PUSH
38521: EMPTY
38522: LIST
38523: LIST
38524: PUSH
38525: LD_INT 1
38527: NEG
38528: PUSH
38529: LD_INT 0
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 1
38538: NEG
38539: PUSH
38540: LD_INT 1
38542: NEG
38543: PUSH
38544: EMPTY
38545: LIST
38546: LIST
38547: PUSH
38548: LD_INT 1
38550: NEG
38551: PUSH
38552: LD_INT 2
38554: NEG
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: PUSH
38560: LD_INT 0
38562: PUSH
38563: LD_INT 2
38565: NEG
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: PUSH
38571: LD_INT 1
38573: PUSH
38574: LD_INT 1
38576: NEG
38577: PUSH
38578: EMPTY
38579: LIST
38580: LIST
38581: PUSH
38582: LD_INT 1
38584: PUSH
38585: LD_INT 2
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PUSH
38592: LD_INT 0
38594: PUSH
38595: LD_INT 2
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: PUSH
38602: LD_INT 1
38604: NEG
38605: PUSH
38606: LD_INT 1
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PUSH
38613: LD_INT 1
38615: NEG
38616: PUSH
38617: LD_INT 3
38619: NEG
38620: PUSH
38621: EMPTY
38622: LIST
38623: LIST
38624: PUSH
38625: LD_INT 0
38627: PUSH
38628: LD_INT 3
38630: NEG
38631: PUSH
38632: EMPTY
38633: LIST
38634: LIST
38635: PUSH
38636: LD_INT 1
38638: PUSH
38639: LD_INT 2
38641: NEG
38642: PUSH
38643: EMPTY
38644: LIST
38645: LIST
38646: PUSH
38647: EMPTY
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: LIST
38653: LIST
38654: LIST
38655: LIST
38656: LIST
38657: LIST
38658: LIST
38659: LIST
38660: LIST
38661: LIST
38662: LIST
38663: LIST
38664: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38665: LD_ADDR_VAR 0 15
38669: PUSH
38670: LD_INT 0
38672: PUSH
38673: LD_INT 0
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PUSH
38680: LD_INT 0
38682: PUSH
38683: LD_INT 1
38685: NEG
38686: PUSH
38687: EMPTY
38688: LIST
38689: LIST
38690: PUSH
38691: LD_INT 1
38693: PUSH
38694: LD_INT 0
38696: PUSH
38697: EMPTY
38698: LIST
38699: LIST
38700: PUSH
38701: LD_INT 1
38703: PUSH
38704: LD_INT 1
38706: PUSH
38707: EMPTY
38708: LIST
38709: LIST
38710: PUSH
38711: LD_INT 0
38713: PUSH
38714: LD_INT 1
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: PUSH
38721: LD_INT 1
38723: NEG
38724: PUSH
38725: LD_INT 0
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: LD_INT 1
38734: NEG
38735: PUSH
38736: LD_INT 1
38738: NEG
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PUSH
38744: LD_INT 1
38746: PUSH
38747: LD_INT 1
38749: NEG
38750: PUSH
38751: EMPTY
38752: LIST
38753: LIST
38754: PUSH
38755: LD_INT 2
38757: PUSH
38758: LD_INT 0
38760: PUSH
38761: EMPTY
38762: LIST
38763: LIST
38764: PUSH
38765: LD_INT 2
38767: PUSH
38768: LD_INT 1
38770: PUSH
38771: EMPTY
38772: LIST
38773: LIST
38774: PUSH
38775: LD_INT 1
38777: NEG
38778: PUSH
38779: LD_INT 1
38781: PUSH
38782: EMPTY
38783: LIST
38784: LIST
38785: PUSH
38786: LD_INT 2
38788: NEG
38789: PUSH
38790: LD_INT 0
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: PUSH
38797: LD_INT 2
38799: NEG
38800: PUSH
38801: LD_INT 1
38803: NEG
38804: PUSH
38805: EMPTY
38806: LIST
38807: LIST
38808: PUSH
38809: LD_INT 2
38811: PUSH
38812: LD_INT 1
38814: NEG
38815: PUSH
38816: EMPTY
38817: LIST
38818: LIST
38819: PUSH
38820: LD_INT 3
38822: PUSH
38823: LD_INT 0
38825: PUSH
38826: EMPTY
38827: LIST
38828: LIST
38829: PUSH
38830: LD_INT 3
38832: PUSH
38833: LD_INT 1
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: LIST
38844: LIST
38845: LIST
38846: LIST
38847: LIST
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38858: LD_ADDR_VAR 0 16
38862: PUSH
38863: LD_INT 0
38865: PUSH
38866: LD_INT 0
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 0
38875: PUSH
38876: LD_INT 1
38878: NEG
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: PUSH
38884: LD_INT 1
38886: PUSH
38887: LD_INT 0
38889: PUSH
38890: EMPTY
38891: LIST
38892: LIST
38893: PUSH
38894: LD_INT 1
38896: PUSH
38897: LD_INT 1
38899: PUSH
38900: EMPTY
38901: LIST
38902: LIST
38903: PUSH
38904: LD_INT 0
38906: PUSH
38907: LD_INT 1
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PUSH
38914: LD_INT 1
38916: NEG
38917: PUSH
38918: LD_INT 0
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PUSH
38925: LD_INT 1
38927: NEG
38928: PUSH
38929: LD_INT 1
38931: NEG
38932: PUSH
38933: EMPTY
38934: LIST
38935: LIST
38936: PUSH
38937: LD_INT 1
38939: NEG
38940: PUSH
38941: LD_INT 2
38943: NEG
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: PUSH
38949: LD_INT 2
38951: PUSH
38952: LD_INT 1
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: PUSH
38959: LD_INT 2
38961: PUSH
38962: LD_INT 2
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PUSH
38969: LD_INT 1
38971: PUSH
38972: LD_INT 2
38974: PUSH
38975: EMPTY
38976: LIST
38977: LIST
38978: PUSH
38979: LD_INT 2
38981: NEG
38982: PUSH
38983: LD_INT 1
38985: NEG
38986: PUSH
38987: EMPTY
38988: LIST
38989: LIST
38990: PUSH
38991: LD_INT 2
38993: NEG
38994: PUSH
38995: LD_INT 2
38997: NEG
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 3
39005: PUSH
39006: LD_INT 2
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PUSH
39013: LD_INT 3
39015: PUSH
39016: LD_INT 3
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: LD_INT 2
39025: PUSH
39026: LD_INT 3
39028: PUSH
39029: EMPTY
39030: LIST
39031: LIST
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: LIST
39037: LIST
39038: LIST
39039: LIST
39040: LIST
39041: LIST
39042: LIST
39043: LIST
39044: LIST
39045: LIST
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39051: LD_ADDR_VAR 0 17
39055: PUSH
39056: LD_INT 0
39058: PUSH
39059: LD_INT 0
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: PUSH
39066: LD_INT 0
39068: PUSH
39069: LD_INT 1
39071: NEG
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: PUSH
39077: LD_INT 1
39079: PUSH
39080: LD_INT 0
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: PUSH
39087: LD_INT 1
39089: PUSH
39090: LD_INT 1
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: PUSH
39097: LD_INT 0
39099: PUSH
39100: LD_INT 1
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: PUSH
39107: LD_INT 1
39109: NEG
39110: PUSH
39111: LD_INT 0
39113: PUSH
39114: EMPTY
39115: LIST
39116: LIST
39117: PUSH
39118: LD_INT 1
39120: NEG
39121: PUSH
39122: LD_INT 1
39124: NEG
39125: PUSH
39126: EMPTY
39127: LIST
39128: LIST
39129: PUSH
39130: LD_INT 1
39132: NEG
39133: PUSH
39134: LD_INT 2
39136: NEG
39137: PUSH
39138: EMPTY
39139: LIST
39140: LIST
39141: PUSH
39142: LD_INT 0
39144: PUSH
39145: LD_INT 2
39147: NEG
39148: PUSH
39149: EMPTY
39150: LIST
39151: LIST
39152: PUSH
39153: LD_INT 1
39155: PUSH
39156: LD_INT 1
39158: NEG
39159: PUSH
39160: EMPTY
39161: LIST
39162: LIST
39163: PUSH
39164: LD_INT 2
39166: PUSH
39167: LD_INT 0
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PUSH
39174: LD_INT 2
39176: PUSH
39177: LD_INT 1
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 2
39186: PUSH
39187: LD_INT 2
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 1
39196: PUSH
39197: LD_INT 2
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 0
39206: PUSH
39207: LD_INT 2
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: LD_INT 1
39216: NEG
39217: PUSH
39218: LD_INT 1
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PUSH
39225: LD_INT 2
39227: NEG
39228: PUSH
39229: LD_INT 0
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: PUSH
39236: LD_INT 2
39238: NEG
39239: PUSH
39240: LD_INT 1
39242: NEG
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: PUSH
39248: LD_INT 2
39250: NEG
39251: PUSH
39252: LD_INT 2
39254: NEG
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: EMPTY
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: LIST
39266: LIST
39267: LIST
39268: LIST
39269: LIST
39270: LIST
39271: LIST
39272: LIST
39273: LIST
39274: LIST
39275: LIST
39276: LIST
39277: LIST
39278: LIST
39279: LIST
39280: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39281: LD_ADDR_VAR 0 18
39285: PUSH
39286: LD_INT 0
39288: PUSH
39289: LD_INT 0
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 0
39298: PUSH
39299: LD_INT 1
39301: NEG
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: PUSH
39307: LD_INT 1
39309: PUSH
39310: LD_INT 0
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: PUSH
39317: LD_INT 1
39319: PUSH
39320: LD_INT 1
39322: PUSH
39323: EMPTY
39324: LIST
39325: LIST
39326: PUSH
39327: LD_INT 0
39329: PUSH
39330: LD_INT 1
39332: PUSH
39333: EMPTY
39334: LIST
39335: LIST
39336: PUSH
39337: LD_INT 1
39339: NEG
39340: PUSH
39341: LD_INT 0
39343: PUSH
39344: EMPTY
39345: LIST
39346: LIST
39347: PUSH
39348: LD_INT 1
39350: NEG
39351: PUSH
39352: LD_INT 1
39354: NEG
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: LD_INT 1
39362: NEG
39363: PUSH
39364: LD_INT 2
39366: NEG
39367: PUSH
39368: EMPTY
39369: LIST
39370: LIST
39371: PUSH
39372: LD_INT 0
39374: PUSH
39375: LD_INT 2
39377: NEG
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 1
39385: PUSH
39386: LD_INT 1
39388: NEG
39389: PUSH
39390: EMPTY
39391: LIST
39392: LIST
39393: PUSH
39394: LD_INT 2
39396: PUSH
39397: LD_INT 0
39399: PUSH
39400: EMPTY
39401: LIST
39402: LIST
39403: PUSH
39404: LD_INT 2
39406: PUSH
39407: LD_INT 1
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 2
39416: PUSH
39417: LD_INT 2
39419: PUSH
39420: EMPTY
39421: LIST
39422: LIST
39423: PUSH
39424: LD_INT 1
39426: PUSH
39427: LD_INT 2
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: LD_INT 0
39436: PUSH
39437: LD_INT 2
39439: PUSH
39440: EMPTY
39441: LIST
39442: LIST
39443: PUSH
39444: LD_INT 1
39446: NEG
39447: PUSH
39448: LD_INT 1
39450: PUSH
39451: EMPTY
39452: LIST
39453: LIST
39454: PUSH
39455: LD_INT 2
39457: NEG
39458: PUSH
39459: LD_INT 0
39461: PUSH
39462: EMPTY
39463: LIST
39464: LIST
39465: PUSH
39466: LD_INT 2
39468: NEG
39469: PUSH
39470: LD_INT 1
39472: NEG
39473: PUSH
39474: EMPTY
39475: LIST
39476: LIST
39477: PUSH
39478: LD_INT 2
39480: NEG
39481: PUSH
39482: LD_INT 2
39484: NEG
39485: PUSH
39486: EMPTY
39487: LIST
39488: LIST
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: LIST
39494: LIST
39495: LIST
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39511: LD_ADDR_VAR 0 19
39515: PUSH
39516: LD_INT 0
39518: PUSH
39519: LD_INT 0
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: PUSH
39526: LD_INT 0
39528: PUSH
39529: LD_INT 1
39531: NEG
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PUSH
39537: LD_INT 1
39539: PUSH
39540: LD_INT 0
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: PUSH
39547: LD_INT 1
39549: PUSH
39550: LD_INT 1
39552: PUSH
39553: EMPTY
39554: LIST
39555: LIST
39556: PUSH
39557: LD_INT 0
39559: PUSH
39560: LD_INT 1
39562: PUSH
39563: EMPTY
39564: LIST
39565: LIST
39566: PUSH
39567: LD_INT 1
39569: NEG
39570: PUSH
39571: LD_INT 0
39573: PUSH
39574: EMPTY
39575: LIST
39576: LIST
39577: PUSH
39578: LD_INT 1
39580: NEG
39581: PUSH
39582: LD_INT 1
39584: NEG
39585: PUSH
39586: EMPTY
39587: LIST
39588: LIST
39589: PUSH
39590: LD_INT 1
39592: NEG
39593: PUSH
39594: LD_INT 2
39596: NEG
39597: PUSH
39598: EMPTY
39599: LIST
39600: LIST
39601: PUSH
39602: LD_INT 0
39604: PUSH
39605: LD_INT 2
39607: NEG
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: PUSH
39613: LD_INT 1
39615: PUSH
39616: LD_INT 1
39618: NEG
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: PUSH
39624: LD_INT 2
39626: PUSH
39627: LD_INT 0
39629: PUSH
39630: EMPTY
39631: LIST
39632: LIST
39633: PUSH
39634: LD_INT 2
39636: PUSH
39637: LD_INT 1
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PUSH
39644: LD_INT 2
39646: PUSH
39647: LD_INT 2
39649: PUSH
39650: EMPTY
39651: LIST
39652: LIST
39653: PUSH
39654: LD_INT 1
39656: PUSH
39657: LD_INT 2
39659: PUSH
39660: EMPTY
39661: LIST
39662: LIST
39663: PUSH
39664: LD_INT 0
39666: PUSH
39667: LD_INT 2
39669: PUSH
39670: EMPTY
39671: LIST
39672: LIST
39673: PUSH
39674: LD_INT 1
39676: NEG
39677: PUSH
39678: LD_INT 1
39680: PUSH
39681: EMPTY
39682: LIST
39683: LIST
39684: PUSH
39685: LD_INT 2
39687: NEG
39688: PUSH
39689: LD_INT 0
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: LD_INT 2
39698: NEG
39699: PUSH
39700: LD_INT 1
39702: NEG
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: PUSH
39708: LD_INT 2
39710: NEG
39711: PUSH
39712: LD_INT 2
39714: NEG
39715: PUSH
39716: EMPTY
39717: LIST
39718: LIST
39719: PUSH
39720: EMPTY
39721: LIST
39722: LIST
39723: LIST
39724: LIST
39725: LIST
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39741: LD_ADDR_VAR 0 20
39745: PUSH
39746: LD_INT 0
39748: PUSH
39749: LD_INT 0
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: LD_INT 0
39758: PUSH
39759: LD_INT 1
39761: NEG
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: LD_INT 1
39769: PUSH
39770: LD_INT 0
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: PUSH
39777: LD_INT 1
39779: PUSH
39780: LD_INT 1
39782: PUSH
39783: EMPTY
39784: LIST
39785: LIST
39786: PUSH
39787: LD_INT 0
39789: PUSH
39790: LD_INT 1
39792: PUSH
39793: EMPTY
39794: LIST
39795: LIST
39796: PUSH
39797: LD_INT 1
39799: NEG
39800: PUSH
39801: LD_INT 0
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: PUSH
39808: LD_INT 1
39810: NEG
39811: PUSH
39812: LD_INT 1
39814: NEG
39815: PUSH
39816: EMPTY
39817: LIST
39818: LIST
39819: PUSH
39820: LD_INT 1
39822: NEG
39823: PUSH
39824: LD_INT 2
39826: NEG
39827: PUSH
39828: EMPTY
39829: LIST
39830: LIST
39831: PUSH
39832: LD_INT 0
39834: PUSH
39835: LD_INT 2
39837: NEG
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PUSH
39843: LD_INT 1
39845: PUSH
39846: LD_INT 1
39848: NEG
39849: PUSH
39850: EMPTY
39851: LIST
39852: LIST
39853: PUSH
39854: LD_INT 2
39856: PUSH
39857: LD_INT 0
39859: PUSH
39860: EMPTY
39861: LIST
39862: LIST
39863: PUSH
39864: LD_INT 2
39866: PUSH
39867: LD_INT 1
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PUSH
39874: LD_INT 2
39876: PUSH
39877: LD_INT 2
39879: PUSH
39880: EMPTY
39881: LIST
39882: LIST
39883: PUSH
39884: LD_INT 1
39886: PUSH
39887: LD_INT 2
39889: PUSH
39890: EMPTY
39891: LIST
39892: LIST
39893: PUSH
39894: LD_INT 0
39896: PUSH
39897: LD_INT 2
39899: PUSH
39900: EMPTY
39901: LIST
39902: LIST
39903: PUSH
39904: LD_INT 1
39906: NEG
39907: PUSH
39908: LD_INT 1
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: LD_INT 2
39917: NEG
39918: PUSH
39919: LD_INT 0
39921: PUSH
39922: EMPTY
39923: LIST
39924: LIST
39925: PUSH
39926: LD_INT 2
39928: NEG
39929: PUSH
39930: LD_INT 1
39932: NEG
39933: PUSH
39934: EMPTY
39935: LIST
39936: LIST
39937: PUSH
39938: LD_INT 2
39940: NEG
39941: PUSH
39942: LD_INT 2
39944: NEG
39945: PUSH
39946: EMPTY
39947: LIST
39948: LIST
39949: PUSH
39950: EMPTY
39951: LIST
39952: LIST
39953: LIST
39954: LIST
39955: LIST
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: LIST
39970: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39971: LD_ADDR_VAR 0 21
39975: PUSH
39976: LD_INT 0
39978: PUSH
39979: LD_INT 0
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: LD_INT 0
39988: PUSH
39989: LD_INT 1
39991: NEG
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 1
39999: PUSH
40000: LD_INT 0
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: LD_INT 1
40009: PUSH
40010: LD_INT 1
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: LD_INT 0
40019: PUSH
40020: LD_INT 1
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: LD_INT 1
40029: NEG
40030: PUSH
40031: LD_INT 0
40033: PUSH
40034: EMPTY
40035: LIST
40036: LIST
40037: PUSH
40038: LD_INT 1
40040: NEG
40041: PUSH
40042: LD_INT 1
40044: NEG
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 1
40052: NEG
40053: PUSH
40054: LD_INT 2
40056: NEG
40057: PUSH
40058: EMPTY
40059: LIST
40060: LIST
40061: PUSH
40062: LD_INT 0
40064: PUSH
40065: LD_INT 2
40067: NEG
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: PUSH
40073: LD_INT 1
40075: PUSH
40076: LD_INT 1
40078: NEG
40079: PUSH
40080: EMPTY
40081: LIST
40082: LIST
40083: PUSH
40084: LD_INT 2
40086: PUSH
40087: LD_INT 0
40089: PUSH
40090: EMPTY
40091: LIST
40092: LIST
40093: PUSH
40094: LD_INT 2
40096: PUSH
40097: LD_INT 1
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: PUSH
40104: LD_INT 2
40106: PUSH
40107: LD_INT 2
40109: PUSH
40110: EMPTY
40111: LIST
40112: LIST
40113: PUSH
40114: LD_INT 1
40116: PUSH
40117: LD_INT 2
40119: PUSH
40120: EMPTY
40121: LIST
40122: LIST
40123: PUSH
40124: LD_INT 0
40126: PUSH
40127: LD_INT 2
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: PUSH
40134: LD_INT 1
40136: NEG
40137: PUSH
40138: LD_INT 1
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: PUSH
40145: LD_INT 2
40147: NEG
40148: PUSH
40149: LD_INT 0
40151: PUSH
40152: EMPTY
40153: LIST
40154: LIST
40155: PUSH
40156: LD_INT 2
40158: NEG
40159: PUSH
40160: LD_INT 1
40162: NEG
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: LD_INT 2
40170: NEG
40171: PUSH
40172: LD_INT 2
40174: NEG
40175: PUSH
40176: EMPTY
40177: LIST
40178: LIST
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: LIST
40184: LIST
40185: LIST
40186: LIST
40187: LIST
40188: LIST
40189: LIST
40190: LIST
40191: LIST
40192: LIST
40193: LIST
40194: LIST
40195: LIST
40196: LIST
40197: LIST
40198: LIST
40199: LIST
40200: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40201: LD_ADDR_VAR 0 22
40205: PUSH
40206: LD_INT 0
40208: PUSH
40209: LD_INT 0
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: LD_INT 0
40218: PUSH
40219: LD_INT 1
40221: NEG
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 1
40229: PUSH
40230: LD_INT 0
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: PUSH
40237: LD_INT 1
40239: PUSH
40240: LD_INT 1
40242: PUSH
40243: EMPTY
40244: LIST
40245: LIST
40246: PUSH
40247: LD_INT 0
40249: PUSH
40250: LD_INT 1
40252: PUSH
40253: EMPTY
40254: LIST
40255: LIST
40256: PUSH
40257: LD_INT 1
40259: NEG
40260: PUSH
40261: LD_INT 0
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PUSH
40268: LD_INT 1
40270: NEG
40271: PUSH
40272: LD_INT 1
40274: NEG
40275: PUSH
40276: EMPTY
40277: LIST
40278: LIST
40279: PUSH
40280: LD_INT 1
40282: NEG
40283: PUSH
40284: LD_INT 2
40286: NEG
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: LD_INT 0
40294: PUSH
40295: LD_INT 2
40297: NEG
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 1
40305: PUSH
40306: LD_INT 1
40308: NEG
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PUSH
40314: LD_INT 2
40316: PUSH
40317: LD_INT 0
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 2
40326: PUSH
40327: LD_INT 1
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 2
40336: PUSH
40337: LD_INT 2
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 1
40346: PUSH
40347: LD_INT 2
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: LD_INT 0
40356: PUSH
40357: LD_INT 2
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: PUSH
40364: LD_INT 1
40366: NEG
40367: PUSH
40368: LD_INT 1
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 2
40377: NEG
40378: PUSH
40379: LD_INT 0
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 2
40388: NEG
40389: PUSH
40390: LD_INT 1
40392: NEG
40393: PUSH
40394: EMPTY
40395: LIST
40396: LIST
40397: PUSH
40398: LD_INT 2
40400: NEG
40401: PUSH
40402: LD_INT 2
40404: NEG
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: LIST
40414: LIST
40415: LIST
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40431: LD_ADDR_VAR 0 23
40435: PUSH
40436: LD_INT 0
40438: PUSH
40439: LD_INT 0
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 0
40448: PUSH
40449: LD_INT 1
40451: NEG
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 1
40459: PUSH
40460: LD_INT 0
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 1
40469: PUSH
40470: LD_INT 1
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 0
40479: PUSH
40480: LD_INT 1
40482: PUSH
40483: EMPTY
40484: LIST
40485: LIST
40486: PUSH
40487: LD_INT 1
40489: NEG
40490: PUSH
40491: LD_INT 0
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 1
40500: NEG
40501: PUSH
40502: LD_INT 1
40504: NEG
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 1
40512: NEG
40513: PUSH
40514: LD_INT 2
40516: NEG
40517: PUSH
40518: EMPTY
40519: LIST
40520: LIST
40521: PUSH
40522: LD_INT 0
40524: PUSH
40525: LD_INT 2
40527: NEG
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: LD_INT 1
40535: PUSH
40536: LD_INT 1
40538: NEG
40539: PUSH
40540: EMPTY
40541: LIST
40542: LIST
40543: PUSH
40544: LD_INT 2
40546: PUSH
40547: LD_INT 0
40549: PUSH
40550: EMPTY
40551: LIST
40552: LIST
40553: PUSH
40554: LD_INT 2
40556: PUSH
40557: LD_INT 1
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 2
40566: PUSH
40567: LD_INT 2
40569: PUSH
40570: EMPTY
40571: LIST
40572: LIST
40573: PUSH
40574: LD_INT 1
40576: PUSH
40577: LD_INT 2
40579: PUSH
40580: EMPTY
40581: LIST
40582: LIST
40583: PUSH
40584: LD_INT 0
40586: PUSH
40587: LD_INT 2
40589: PUSH
40590: EMPTY
40591: LIST
40592: LIST
40593: PUSH
40594: LD_INT 1
40596: NEG
40597: PUSH
40598: LD_INT 1
40600: PUSH
40601: EMPTY
40602: LIST
40603: LIST
40604: PUSH
40605: LD_INT 2
40607: NEG
40608: PUSH
40609: LD_INT 0
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 2
40618: NEG
40619: PUSH
40620: LD_INT 1
40622: NEG
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 2
40630: NEG
40631: PUSH
40632: LD_INT 2
40634: NEG
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PUSH
40640: LD_INT 2
40642: NEG
40643: PUSH
40644: LD_INT 3
40646: NEG
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: LD_INT 1
40654: NEG
40655: PUSH
40656: LD_INT 3
40658: NEG
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 1
40666: PUSH
40667: LD_INT 2
40669: NEG
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PUSH
40675: LD_INT 2
40677: PUSH
40678: LD_INT 1
40680: NEG
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: LIST
40690: LIST
40691: LIST
40692: LIST
40693: LIST
40694: LIST
40695: LIST
40696: LIST
40697: LIST
40698: LIST
40699: LIST
40700: LIST
40701: LIST
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: LIST
40707: LIST
40708: LIST
40709: LIST
40710: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
40711: LD_ADDR_VAR 0 24
40715: PUSH
40716: LD_INT 0
40718: PUSH
40719: LD_INT 0
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 0
40728: PUSH
40729: LD_INT 1
40731: NEG
40732: PUSH
40733: EMPTY
40734: LIST
40735: LIST
40736: PUSH
40737: LD_INT 1
40739: PUSH
40740: LD_INT 0
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: PUSH
40747: LD_INT 1
40749: PUSH
40750: LD_INT 1
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 0
40759: PUSH
40760: LD_INT 1
40762: PUSH
40763: EMPTY
40764: LIST
40765: LIST
40766: PUSH
40767: LD_INT 1
40769: NEG
40770: PUSH
40771: LD_INT 0
40773: PUSH
40774: EMPTY
40775: LIST
40776: LIST
40777: PUSH
40778: LD_INT 1
40780: NEG
40781: PUSH
40782: LD_INT 1
40784: NEG
40785: PUSH
40786: EMPTY
40787: LIST
40788: LIST
40789: PUSH
40790: LD_INT 1
40792: NEG
40793: PUSH
40794: LD_INT 2
40796: NEG
40797: PUSH
40798: EMPTY
40799: LIST
40800: LIST
40801: PUSH
40802: LD_INT 0
40804: PUSH
40805: LD_INT 2
40807: NEG
40808: PUSH
40809: EMPTY
40810: LIST
40811: LIST
40812: PUSH
40813: LD_INT 1
40815: PUSH
40816: LD_INT 1
40818: NEG
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 2
40826: PUSH
40827: LD_INT 0
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: LD_INT 2
40836: PUSH
40837: LD_INT 1
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: LD_INT 2
40846: PUSH
40847: LD_INT 2
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: LD_INT 1
40856: PUSH
40857: LD_INT 2
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: PUSH
40864: LD_INT 0
40866: PUSH
40867: LD_INT 2
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: LD_INT 1
40876: NEG
40877: PUSH
40878: LD_INT 1
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: LD_INT 2
40887: NEG
40888: PUSH
40889: LD_INT 0
40891: PUSH
40892: EMPTY
40893: LIST
40894: LIST
40895: PUSH
40896: LD_INT 2
40898: NEG
40899: PUSH
40900: LD_INT 1
40902: NEG
40903: PUSH
40904: EMPTY
40905: LIST
40906: LIST
40907: PUSH
40908: LD_INT 2
40910: NEG
40911: PUSH
40912: LD_INT 2
40914: NEG
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: PUSH
40920: LD_INT 1
40922: PUSH
40923: LD_INT 2
40925: NEG
40926: PUSH
40927: EMPTY
40928: LIST
40929: LIST
40930: PUSH
40931: LD_INT 2
40933: PUSH
40934: LD_INT 1
40936: NEG
40937: PUSH
40938: EMPTY
40939: LIST
40940: LIST
40941: PUSH
40942: LD_INT 3
40944: PUSH
40945: LD_INT 1
40947: PUSH
40948: EMPTY
40949: LIST
40950: LIST
40951: PUSH
40952: LD_INT 3
40954: PUSH
40955: LD_INT 2
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: EMPTY
40963: LIST
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
40987: LD_ADDR_VAR 0 25
40991: PUSH
40992: LD_INT 0
40994: PUSH
40995: LD_INT 0
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: LD_INT 0
41004: PUSH
41005: LD_INT 1
41007: NEG
41008: PUSH
41009: EMPTY
41010: LIST
41011: LIST
41012: PUSH
41013: LD_INT 1
41015: PUSH
41016: LD_INT 0
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 1
41025: PUSH
41026: LD_INT 1
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: LD_INT 0
41035: PUSH
41036: LD_INT 1
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: PUSH
41043: LD_INT 1
41045: NEG
41046: PUSH
41047: LD_INT 0
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: PUSH
41054: LD_INT 1
41056: NEG
41057: PUSH
41058: LD_INT 1
41060: NEG
41061: PUSH
41062: EMPTY
41063: LIST
41064: LIST
41065: PUSH
41066: LD_INT 1
41068: NEG
41069: PUSH
41070: LD_INT 2
41072: NEG
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 0
41080: PUSH
41081: LD_INT 2
41083: NEG
41084: PUSH
41085: EMPTY
41086: LIST
41087: LIST
41088: PUSH
41089: LD_INT 1
41091: PUSH
41092: LD_INT 1
41094: NEG
41095: PUSH
41096: EMPTY
41097: LIST
41098: LIST
41099: PUSH
41100: LD_INT 2
41102: PUSH
41103: LD_INT 0
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: PUSH
41110: LD_INT 2
41112: PUSH
41113: LD_INT 1
41115: PUSH
41116: EMPTY
41117: LIST
41118: LIST
41119: PUSH
41120: LD_INT 2
41122: PUSH
41123: LD_INT 2
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: PUSH
41130: LD_INT 1
41132: PUSH
41133: LD_INT 2
41135: PUSH
41136: EMPTY
41137: LIST
41138: LIST
41139: PUSH
41140: LD_INT 0
41142: PUSH
41143: LD_INT 2
41145: PUSH
41146: EMPTY
41147: LIST
41148: LIST
41149: PUSH
41150: LD_INT 1
41152: NEG
41153: PUSH
41154: LD_INT 1
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 2
41163: NEG
41164: PUSH
41165: LD_INT 0
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: LD_INT 2
41174: NEG
41175: PUSH
41176: LD_INT 1
41178: NEG
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PUSH
41184: LD_INT 2
41186: NEG
41187: PUSH
41188: LD_INT 2
41190: NEG
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 3
41198: PUSH
41199: LD_INT 1
41201: PUSH
41202: EMPTY
41203: LIST
41204: LIST
41205: PUSH
41206: LD_INT 3
41208: PUSH
41209: LD_INT 2
41211: PUSH
41212: EMPTY
41213: LIST
41214: LIST
41215: PUSH
41216: LD_INT 2
41218: PUSH
41219: LD_INT 3
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: PUSH
41226: LD_INT 1
41228: PUSH
41229: LD_INT 3
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: EMPTY
41237: LIST
41238: LIST
41239: LIST
41240: LIST
41241: LIST
41242: LIST
41243: LIST
41244: LIST
41245: LIST
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: LIST
41256: LIST
41257: LIST
41258: LIST
41259: LIST
41260: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41261: LD_ADDR_VAR 0 26
41265: PUSH
41266: LD_INT 0
41268: PUSH
41269: LD_INT 0
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 0
41278: PUSH
41279: LD_INT 1
41281: NEG
41282: PUSH
41283: EMPTY
41284: LIST
41285: LIST
41286: PUSH
41287: LD_INT 1
41289: PUSH
41290: LD_INT 0
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 1
41299: PUSH
41300: LD_INT 1
41302: PUSH
41303: EMPTY
41304: LIST
41305: LIST
41306: PUSH
41307: LD_INT 0
41309: PUSH
41310: LD_INT 1
41312: PUSH
41313: EMPTY
41314: LIST
41315: LIST
41316: PUSH
41317: LD_INT 1
41319: NEG
41320: PUSH
41321: LD_INT 0
41323: PUSH
41324: EMPTY
41325: LIST
41326: LIST
41327: PUSH
41328: LD_INT 1
41330: NEG
41331: PUSH
41332: LD_INT 1
41334: NEG
41335: PUSH
41336: EMPTY
41337: LIST
41338: LIST
41339: PUSH
41340: LD_INT 1
41342: NEG
41343: PUSH
41344: LD_INT 2
41346: NEG
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 0
41354: PUSH
41355: LD_INT 2
41357: NEG
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: LD_INT 1
41365: PUSH
41366: LD_INT 1
41368: NEG
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: LD_INT 2
41376: PUSH
41377: LD_INT 0
41379: PUSH
41380: EMPTY
41381: LIST
41382: LIST
41383: PUSH
41384: LD_INT 2
41386: PUSH
41387: LD_INT 1
41389: PUSH
41390: EMPTY
41391: LIST
41392: LIST
41393: PUSH
41394: LD_INT 2
41396: PUSH
41397: LD_INT 2
41399: PUSH
41400: EMPTY
41401: LIST
41402: LIST
41403: PUSH
41404: LD_INT 1
41406: PUSH
41407: LD_INT 2
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: PUSH
41414: LD_INT 0
41416: PUSH
41417: LD_INT 2
41419: PUSH
41420: EMPTY
41421: LIST
41422: LIST
41423: PUSH
41424: LD_INT 1
41426: NEG
41427: PUSH
41428: LD_INT 1
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: PUSH
41435: LD_INT 2
41437: NEG
41438: PUSH
41439: LD_INT 0
41441: PUSH
41442: EMPTY
41443: LIST
41444: LIST
41445: PUSH
41446: LD_INT 2
41448: NEG
41449: PUSH
41450: LD_INT 1
41452: NEG
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: PUSH
41458: LD_INT 2
41460: NEG
41461: PUSH
41462: LD_INT 2
41464: NEG
41465: PUSH
41466: EMPTY
41467: LIST
41468: LIST
41469: PUSH
41470: LD_INT 2
41472: PUSH
41473: LD_INT 3
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: PUSH
41480: LD_INT 1
41482: PUSH
41483: LD_INT 3
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 1
41492: NEG
41493: PUSH
41494: LD_INT 2
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PUSH
41501: LD_INT 2
41503: NEG
41504: PUSH
41505: LD_INT 1
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: LIST
41516: LIST
41517: LIST
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41537: LD_ADDR_VAR 0 27
41541: PUSH
41542: LD_INT 0
41544: PUSH
41545: LD_INT 0
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: LD_INT 0
41554: PUSH
41555: LD_INT 1
41557: NEG
41558: PUSH
41559: EMPTY
41560: LIST
41561: LIST
41562: PUSH
41563: LD_INT 1
41565: PUSH
41566: LD_INT 0
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 1
41575: PUSH
41576: LD_INT 1
41578: PUSH
41579: EMPTY
41580: LIST
41581: LIST
41582: PUSH
41583: LD_INT 0
41585: PUSH
41586: LD_INT 1
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: PUSH
41593: LD_INT 1
41595: NEG
41596: PUSH
41597: LD_INT 0
41599: PUSH
41600: EMPTY
41601: LIST
41602: LIST
41603: PUSH
41604: LD_INT 1
41606: NEG
41607: PUSH
41608: LD_INT 1
41610: NEG
41611: PUSH
41612: EMPTY
41613: LIST
41614: LIST
41615: PUSH
41616: LD_INT 1
41618: NEG
41619: PUSH
41620: LD_INT 2
41622: NEG
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: PUSH
41628: LD_INT 0
41630: PUSH
41631: LD_INT 2
41633: NEG
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PUSH
41639: LD_INT 1
41641: PUSH
41642: LD_INT 1
41644: NEG
41645: PUSH
41646: EMPTY
41647: LIST
41648: LIST
41649: PUSH
41650: LD_INT 2
41652: PUSH
41653: LD_INT 0
41655: PUSH
41656: EMPTY
41657: LIST
41658: LIST
41659: PUSH
41660: LD_INT 2
41662: PUSH
41663: LD_INT 1
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: PUSH
41670: LD_INT 2
41672: PUSH
41673: LD_INT 2
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: LD_INT 1
41682: PUSH
41683: LD_INT 2
41685: PUSH
41686: EMPTY
41687: LIST
41688: LIST
41689: PUSH
41690: LD_INT 0
41692: PUSH
41693: LD_INT 2
41695: PUSH
41696: EMPTY
41697: LIST
41698: LIST
41699: PUSH
41700: LD_INT 1
41702: NEG
41703: PUSH
41704: LD_INT 1
41706: PUSH
41707: EMPTY
41708: LIST
41709: LIST
41710: PUSH
41711: LD_INT 2
41713: NEG
41714: PUSH
41715: LD_INT 0
41717: PUSH
41718: EMPTY
41719: LIST
41720: LIST
41721: PUSH
41722: LD_INT 2
41724: NEG
41725: PUSH
41726: LD_INT 1
41728: NEG
41729: PUSH
41730: EMPTY
41731: LIST
41732: LIST
41733: PUSH
41734: LD_INT 2
41736: NEG
41737: PUSH
41738: LD_INT 2
41740: NEG
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: LD_INT 1
41748: NEG
41749: PUSH
41750: LD_INT 2
41752: PUSH
41753: EMPTY
41754: LIST
41755: LIST
41756: PUSH
41757: LD_INT 2
41759: NEG
41760: PUSH
41761: LD_INT 1
41763: PUSH
41764: EMPTY
41765: LIST
41766: LIST
41767: PUSH
41768: LD_INT 3
41770: NEG
41771: PUSH
41772: LD_INT 1
41774: NEG
41775: PUSH
41776: EMPTY
41777: LIST
41778: LIST
41779: PUSH
41780: LD_INT 3
41782: NEG
41783: PUSH
41784: LD_INT 2
41786: NEG
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: EMPTY
41793: LIST
41794: LIST
41795: LIST
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41817: LD_ADDR_VAR 0 28
41821: PUSH
41822: LD_INT 0
41824: PUSH
41825: LD_INT 0
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 0
41834: PUSH
41835: LD_INT 1
41837: NEG
41838: PUSH
41839: EMPTY
41840: LIST
41841: LIST
41842: PUSH
41843: LD_INT 1
41845: PUSH
41846: LD_INT 0
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: LD_INT 1
41855: PUSH
41856: LD_INT 1
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PUSH
41863: LD_INT 0
41865: PUSH
41866: LD_INT 1
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 1
41875: NEG
41876: PUSH
41877: LD_INT 0
41879: PUSH
41880: EMPTY
41881: LIST
41882: LIST
41883: PUSH
41884: LD_INT 1
41886: NEG
41887: PUSH
41888: LD_INT 1
41890: NEG
41891: PUSH
41892: EMPTY
41893: LIST
41894: LIST
41895: PUSH
41896: LD_INT 1
41898: NEG
41899: PUSH
41900: LD_INT 2
41902: NEG
41903: PUSH
41904: EMPTY
41905: LIST
41906: LIST
41907: PUSH
41908: LD_INT 0
41910: PUSH
41911: LD_INT 2
41913: NEG
41914: PUSH
41915: EMPTY
41916: LIST
41917: LIST
41918: PUSH
41919: LD_INT 1
41921: PUSH
41922: LD_INT 1
41924: NEG
41925: PUSH
41926: EMPTY
41927: LIST
41928: LIST
41929: PUSH
41930: LD_INT 2
41932: PUSH
41933: LD_INT 0
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: PUSH
41940: LD_INT 2
41942: PUSH
41943: LD_INT 1
41945: PUSH
41946: EMPTY
41947: LIST
41948: LIST
41949: PUSH
41950: LD_INT 2
41952: PUSH
41953: LD_INT 2
41955: PUSH
41956: EMPTY
41957: LIST
41958: LIST
41959: PUSH
41960: LD_INT 1
41962: PUSH
41963: LD_INT 2
41965: PUSH
41966: EMPTY
41967: LIST
41968: LIST
41969: PUSH
41970: LD_INT 0
41972: PUSH
41973: LD_INT 2
41975: PUSH
41976: EMPTY
41977: LIST
41978: LIST
41979: PUSH
41980: LD_INT 1
41982: NEG
41983: PUSH
41984: LD_INT 1
41986: PUSH
41987: EMPTY
41988: LIST
41989: LIST
41990: PUSH
41991: LD_INT 2
41993: NEG
41994: PUSH
41995: LD_INT 0
41997: PUSH
41998: EMPTY
41999: LIST
42000: LIST
42001: PUSH
42002: LD_INT 2
42004: NEG
42005: PUSH
42006: LD_INT 1
42008: NEG
42009: PUSH
42010: EMPTY
42011: LIST
42012: LIST
42013: PUSH
42014: LD_INT 2
42016: NEG
42017: PUSH
42018: LD_INT 2
42020: NEG
42021: PUSH
42022: EMPTY
42023: LIST
42024: LIST
42025: PUSH
42026: LD_INT 2
42028: NEG
42029: PUSH
42030: LD_INT 3
42032: NEG
42033: PUSH
42034: EMPTY
42035: LIST
42036: LIST
42037: PUSH
42038: LD_INT 1
42040: NEG
42041: PUSH
42042: LD_INT 3
42044: NEG
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: LD_INT 3
42052: NEG
42053: PUSH
42054: LD_INT 1
42056: NEG
42057: PUSH
42058: EMPTY
42059: LIST
42060: LIST
42061: PUSH
42062: LD_INT 3
42064: NEG
42065: PUSH
42066: LD_INT 2
42068: NEG
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: LIST
42080: LIST
42081: LIST
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42099: LD_ADDR_VAR 0 29
42103: PUSH
42104: LD_INT 0
42106: PUSH
42107: LD_INT 0
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 0
42116: PUSH
42117: LD_INT 1
42119: NEG
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 1
42127: PUSH
42128: LD_INT 0
42130: PUSH
42131: EMPTY
42132: LIST
42133: LIST
42134: PUSH
42135: LD_INT 1
42137: PUSH
42138: LD_INT 1
42140: PUSH
42141: EMPTY
42142: LIST
42143: LIST
42144: PUSH
42145: LD_INT 0
42147: PUSH
42148: LD_INT 1
42150: PUSH
42151: EMPTY
42152: LIST
42153: LIST
42154: PUSH
42155: LD_INT 1
42157: NEG
42158: PUSH
42159: LD_INT 0
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: PUSH
42166: LD_INT 1
42168: NEG
42169: PUSH
42170: LD_INT 1
42172: NEG
42173: PUSH
42174: EMPTY
42175: LIST
42176: LIST
42177: PUSH
42178: LD_INT 1
42180: NEG
42181: PUSH
42182: LD_INT 2
42184: NEG
42185: PUSH
42186: EMPTY
42187: LIST
42188: LIST
42189: PUSH
42190: LD_INT 0
42192: PUSH
42193: LD_INT 2
42195: NEG
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 1
42203: PUSH
42204: LD_INT 1
42206: NEG
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 2
42214: PUSH
42215: LD_INT 0
42217: PUSH
42218: EMPTY
42219: LIST
42220: LIST
42221: PUSH
42222: LD_INT 2
42224: PUSH
42225: LD_INT 1
42227: PUSH
42228: EMPTY
42229: LIST
42230: LIST
42231: PUSH
42232: LD_INT 1
42234: PUSH
42235: LD_INT 2
42237: PUSH
42238: EMPTY
42239: LIST
42240: LIST
42241: PUSH
42242: LD_INT 0
42244: PUSH
42245: LD_INT 2
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: LD_INT 1
42254: NEG
42255: PUSH
42256: LD_INT 1
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: LD_INT 2
42265: NEG
42266: PUSH
42267: LD_INT 1
42269: NEG
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PUSH
42275: LD_INT 2
42277: NEG
42278: PUSH
42279: LD_INT 2
42281: NEG
42282: PUSH
42283: EMPTY
42284: LIST
42285: LIST
42286: PUSH
42287: LD_INT 2
42289: NEG
42290: PUSH
42291: LD_INT 3
42293: NEG
42294: PUSH
42295: EMPTY
42296: LIST
42297: LIST
42298: PUSH
42299: LD_INT 2
42301: PUSH
42302: LD_INT 1
42304: NEG
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_INT 3
42312: PUSH
42313: LD_INT 1
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: LD_INT 1
42322: PUSH
42323: LD_INT 3
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PUSH
42330: LD_INT 1
42332: NEG
42333: PUSH
42334: LD_INT 2
42336: PUSH
42337: EMPTY
42338: LIST
42339: LIST
42340: PUSH
42341: LD_INT 3
42343: NEG
42344: PUSH
42345: LD_INT 2
42347: NEG
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: EMPTY
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: LIST
42375: LIST
42376: LIST
42377: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42378: LD_ADDR_VAR 0 30
42382: PUSH
42383: LD_INT 0
42385: PUSH
42386: LD_INT 0
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 0
42395: PUSH
42396: LD_INT 1
42398: NEG
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 1
42406: PUSH
42407: LD_INT 0
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 1
42416: PUSH
42417: LD_INT 1
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: LD_INT 0
42426: PUSH
42427: LD_INT 1
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 1
42436: NEG
42437: PUSH
42438: LD_INT 0
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 1
42447: NEG
42448: PUSH
42449: LD_INT 1
42451: NEG
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 1
42459: NEG
42460: PUSH
42461: LD_INT 2
42463: NEG
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: PUSH
42469: LD_INT 0
42471: PUSH
42472: LD_INT 2
42474: NEG
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 1
42482: PUSH
42483: LD_INT 1
42485: NEG
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: LD_INT 2
42493: PUSH
42494: LD_INT 0
42496: PUSH
42497: EMPTY
42498: LIST
42499: LIST
42500: PUSH
42501: LD_INT 2
42503: PUSH
42504: LD_INT 1
42506: PUSH
42507: EMPTY
42508: LIST
42509: LIST
42510: PUSH
42511: LD_INT 2
42513: PUSH
42514: LD_INT 2
42516: PUSH
42517: EMPTY
42518: LIST
42519: LIST
42520: PUSH
42521: LD_INT 1
42523: PUSH
42524: LD_INT 2
42526: PUSH
42527: EMPTY
42528: LIST
42529: LIST
42530: PUSH
42531: LD_INT 1
42533: NEG
42534: PUSH
42535: LD_INT 1
42537: PUSH
42538: EMPTY
42539: LIST
42540: LIST
42541: PUSH
42542: LD_INT 2
42544: NEG
42545: PUSH
42546: LD_INT 0
42548: PUSH
42549: EMPTY
42550: LIST
42551: LIST
42552: PUSH
42553: LD_INT 2
42555: NEG
42556: PUSH
42557: LD_INT 1
42559: NEG
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: LD_INT 1
42567: NEG
42568: PUSH
42569: LD_INT 3
42571: NEG
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 1
42579: PUSH
42580: LD_INT 2
42582: NEG
42583: PUSH
42584: EMPTY
42585: LIST
42586: LIST
42587: PUSH
42588: LD_INT 3
42590: PUSH
42591: LD_INT 2
42593: PUSH
42594: EMPTY
42595: LIST
42596: LIST
42597: PUSH
42598: LD_INT 2
42600: PUSH
42601: LD_INT 3
42603: PUSH
42604: EMPTY
42605: LIST
42606: LIST
42607: PUSH
42608: LD_INT 2
42610: NEG
42611: PUSH
42612: LD_INT 1
42614: PUSH
42615: EMPTY
42616: LIST
42617: LIST
42618: PUSH
42619: LD_INT 3
42621: NEG
42622: PUSH
42623: LD_INT 1
42625: NEG
42626: PUSH
42627: EMPTY
42628: LIST
42629: LIST
42630: PUSH
42631: EMPTY
42632: LIST
42633: LIST
42634: LIST
42635: LIST
42636: LIST
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: LIST
42645: LIST
42646: LIST
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: LIST
42655: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42656: LD_ADDR_VAR 0 31
42660: PUSH
42661: LD_INT 0
42663: PUSH
42664: LD_INT 0
42666: PUSH
42667: EMPTY
42668: LIST
42669: LIST
42670: PUSH
42671: LD_INT 0
42673: PUSH
42674: LD_INT 1
42676: NEG
42677: PUSH
42678: EMPTY
42679: LIST
42680: LIST
42681: PUSH
42682: LD_INT 1
42684: PUSH
42685: LD_INT 0
42687: PUSH
42688: EMPTY
42689: LIST
42690: LIST
42691: PUSH
42692: LD_INT 1
42694: PUSH
42695: LD_INT 1
42697: PUSH
42698: EMPTY
42699: LIST
42700: LIST
42701: PUSH
42702: LD_INT 0
42704: PUSH
42705: LD_INT 1
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 1
42714: NEG
42715: PUSH
42716: LD_INT 0
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_INT 1
42725: NEG
42726: PUSH
42727: LD_INT 1
42729: NEG
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: PUSH
42735: LD_INT 1
42737: NEG
42738: PUSH
42739: LD_INT 2
42741: NEG
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 1
42749: PUSH
42750: LD_INT 1
42752: NEG
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 2
42760: PUSH
42761: LD_INT 0
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 2
42770: PUSH
42771: LD_INT 1
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: LD_INT 2
42780: PUSH
42781: LD_INT 2
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: LD_INT 1
42790: PUSH
42791: LD_INT 2
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: LD_INT 0
42800: PUSH
42801: LD_INT 2
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: LD_INT 1
42810: NEG
42811: PUSH
42812: LD_INT 1
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: LD_INT 2
42821: NEG
42822: PUSH
42823: LD_INT 1
42825: NEG
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 2
42833: NEG
42834: PUSH
42835: LD_INT 2
42837: NEG
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: LD_INT 2
42845: NEG
42846: PUSH
42847: LD_INT 3
42849: NEG
42850: PUSH
42851: EMPTY
42852: LIST
42853: LIST
42854: PUSH
42855: LD_INT 2
42857: PUSH
42858: LD_INT 1
42860: NEG
42861: PUSH
42862: EMPTY
42863: LIST
42864: LIST
42865: PUSH
42866: LD_INT 3
42868: PUSH
42869: LD_INT 1
42871: PUSH
42872: EMPTY
42873: LIST
42874: LIST
42875: PUSH
42876: LD_INT 1
42878: PUSH
42879: LD_INT 3
42881: PUSH
42882: EMPTY
42883: LIST
42884: LIST
42885: PUSH
42886: LD_INT 1
42888: NEG
42889: PUSH
42890: LD_INT 2
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: PUSH
42897: LD_INT 3
42899: NEG
42900: PUSH
42901: LD_INT 2
42903: NEG
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: EMPTY
42910: LIST
42911: LIST
42912: LIST
42913: LIST
42914: LIST
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42934: LD_ADDR_VAR 0 32
42938: PUSH
42939: LD_INT 0
42941: PUSH
42942: LD_INT 0
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 0
42951: PUSH
42952: LD_INT 1
42954: NEG
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 1
42962: PUSH
42963: LD_INT 0
42965: PUSH
42966: EMPTY
42967: LIST
42968: LIST
42969: PUSH
42970: LD_INT 1
42972: PUSH
42973: LD_INT 1
42975: PUSH
42976: EMPTY
42977: LIST
42978: LIST
42979: PUSH
42980: LD_INT 0
42982: PUSH
42983: LD_INT 1
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: PUSH
42990: LD_INT 1
42992: NEG
42993: PUSH
42994: LD_INT 0
42996: PUSH
42997: EMPTY
42998: LIST
42999: LIST
43000: PUSH
43001: LD_INT 1
43003: NEG
43004: PUSH
43005: LD_INT 1
43007: NEG
43008: PUSH
43009: EMPTY
43010: LIST
43011: LIST
43012: PUSH
43013: LD_INT 1
43015: NEG
43016: PUSH
43017: LD_INT 2
43019: NEG
43020: PUSH
43021: EMPTY
43022: LIST
43023: LIST
43024: PUSH
43025: LD_INT 0
43027: PUSH
43028: LD_INT 2
43030: NEG
43031: PUSH
43032: EMPTY
43033: LIST
43034: LIST
43035: PUSH
43036: LD_INT 1
43038: PUSH
43039: LD_INT 1
43041: NEG
43042: PUSH
43043: EMPTY
43044: LIST
43045: LIST
43046: PUSH
43047: LD_INT 2
43049: PUSH
43050: LD_INT 1
43052: PUSH
43053: EMPTY
43054: LIST
43055: LIST
43056: PUSH
43057: LD_INT 2
43059: PUSH
43060: LD_INT 2
43062: PUSH
43063: EMPTY
43064: LIST
43065: LIST
43066: PUSH
43067: LD_INT 1
43069: PUSH
43070: LD_INT 2
43072: PUSH
43073: EMPTY
43074: LIST
43075: LIST
43076: PUSH
43077: LD_INT 0
43079: PUSH
43080: LD_INT 2
43082: PUSH
43083: EMPTY
43084: LIST
43085: LIST
43086: PUSH
43087: LD_INT 1
43089: NEG
43090: PUSH
43091: LD_INT 1
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 2
43100: NEG
43101: PUSH
43102: LD_INT 0
43104: PUSH
43105: EMPTY
43106: LIST
43107: LIST
43108: PUSH
43109: LD_INT 2
43111: NEG
43112: PUSH
43113: LD_INT 1
43115: NEG
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: PUSH
43121: LD_INT 1
43123: NEG
43124: PUSH
43125: LD_INT 3
43127: NEG
43128: PUSH
43129: EMPTY
43130: LIST
43131: LIST
43132: PUSH
43133: LD_INT 1
43135: PUSH
43136: LD_INT 2
43138: NEG
43139: PUSH
43140: EMPTY
43141: LIST
43142: LIST
43143: PUSH
43144: LD_INT 3
43146: PUSH
43147: LD_INT 2
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 2
43156: PUSH
43157: LD_INT 3
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 2
43166: NEG
43167: PUSH
43168: LD_INT 1
43170: PUSH
43171: EMPTY
43172: LIST
43173: LIST
43174: PUSH
43175: LD_INT 3
43177: NEG
43178: PUSH
43179: LD_INT 1
43181: NEG
43182: PUSH
43183: EMPTY
43184: LIST
43185: LIST
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: LIST
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43212: LD_ADDR_VAR 0 33
43216: PUSH
43217: LD_INT 0
43219: PUSH
43220: LD_INT 0
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 0
43229: PUSH
43230: LD_INT 1
43232: NEG
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 1
43240: PUSH
43241: LD_INT 0
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: LD_INT 1
43250: PUSH
43251: LD_INT 1
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 0
43260: PUSH
43261: LD_INT 1
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 1
43270: NEG
43271: PUSH
43272: LD_INT 0
43274: PUSH
43275: EMPTY
43276: LIST
43277: LIST
43278: PUSH
43279: LD_INT 1
43281: NEG
43282: PUSH
43283: LD_INT 1
43285: NEG
43286: PUSH
43287: EMPTY
43288: LIST
43289: LIST
43290: PUSH
43291: LD_INT 1
43293: NEG
43294: PUSH
43295: LD_INT 2
43297: NEG
43298: PUSH
43299: EMPTY
43300: LIST
43301: LIST
43302: PUSH
43303: LD_INT 1
43305: PUSH
43306: LD_INT 1
43308: NEG
43309: PUSH
43310: EMPTY
43311: LIST
43312: LIST
43313: PUSH
43314: LD_INT 2
43316: PUSH
43317: LD_INT 0
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 2
43326: PUSH
43327: LD_INT 1
43329: PUSH
43330: EMPTY
43331: LIST
43332: LIST
43333: PUSH
43334: LD_INT 1
43336: PUSH
43337: LD_INT 2
43339: PUSH
43340: EMPTY
43341: LIST
43342: LIST
43343: PUSH
43344: LD_INT 0
43346: PUSH
43347: LD_INT 2
43349: PUSH
43350: EMPTY
43351: LIST
43352: LIST
43353: PUSH
43354: LD_INT 1
43356: NEG
43357: PUSH
43358: LD_INT 1
43360: PUSH
43361: EMPTY
43362: LIST
43363: LIST
43364: PUSH
43365: LD_INT 2
43367: NEG
43368: PUSH
43369: LD_INT 0
43371: PUSH
43372: EMPTY
43373: LIST
43374: LIST
43375: PUSH
43376: LD_INT 2
43378: NEG
43379: PUSH
43380: LD_INT 1
43382: NEG
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 2
43390: NEG
43391: PUSH
43392: LD_INT 2
43394: NEG
43395: PUSH
43396: EMPTY
43397: LIST
43398: LIST
43399: PUSH
43400: LD_INT 2
43402: NEG
43403: PUSH
43404: LD_INT 3
43406: NEG
43407: PUSH
43408: EMPTY
43409: LIST
43410: LIST
43411: PUSH
43412: LD_INT 2
43414: PUSH
43415: LD_INT 1
43417: NEG
43418: PUSH
43419: EMPTY
43420: LIST
43421: LIST
43422: PUSH
43423: LD_INT 3
43425: PUSH
43426: LD_INT 1
43428: PUSH
43429: EMPTY
43430: LIST
43431: LIST
43432: PUSH
43433: LD_INT 1
43435: PUSH
43436: LD_INT 3
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 1
43445: NEG
43446: PUSH
43447: LD_INT 2
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 3
43456: NEG
43457: PUSH
43458: LD_INT 2
43460: NEG
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: EMPTY
43467: LIST
43468: LIST
43469: LIST
43470: LIST
43471: LIST
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: LIST
43487: LIST
43488: LIST
43489: LIST
43490: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43491: LD_ADDR_VAR 0 34
43495: PUSH
43496: LD_INT 0
43498: PUSH
43499: LD_INT 0
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 0
43508: PUSH
43509: LD_INT 1
43511: NEG
43512: PUSH
43513: EMPTY
43514: LIST
43515: LIST
43516: PUSH
43517: LD_INT 1
43519: PUSH
43520: LD_INT 0
43522: PUSH
43523: EMPTY
43524: LIST
43525: LIST
43526: PUSH
43527: LD_INT 1
43529: PUSH
43530: LD_INT 1
43532: PUSH
43533: EMPTY
43534: LIST
43535: LIST
43536: PUSH
43537: LD_INT 0
43539: PUSH
43540: LD_INT 1
43542: PUSH
43543: EMPTY
43544: LIST
43545: LIST
43546: PUSH
43547: LD_INT 1
43549: NEG
43550: PUSH
43551: LD_INT 0
43553: PUSH
43554: EMPTY
43555: LIST
43556: LIST
43557: PUSH
43558: LD_INT 1
43560: NEG
43561: PUSH
43562: LD_INT 1
43564: NEG
43565: PUSH
43566: EMPTY
43567: LIST
43568: LIST
43569: PUSH
43570: LD_INT 1
43572: NEG
43573: PUSH
43574: LD_INT 2
43576: NEG
43577: PUSH
43578: EMPTY
43579: LIST
43580: LIST
43581: PUSH
43582: LD_INT 0
43584: PUSH
43585: LD_INT 2
43587: NEG
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 1
43595: PUSH
43596: LD_INT 1
43598: NEG
43599: PUSH
43600: EMPTY
43601: LIST
43602: LIST
43603: PUSH
43604: LD_INT 2
43606: PUSH
43607: LD_INT 1
43609: PUSH
43610: EMPTY
43611: LIST
43612: LIST
43613: PUSH
43614: LD_INT 2
43616: PUSH
43617: LD_INT 2
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 1
43626: PUSH
43627: LD_INT 2
43629: PUSH
43630: EMPTY
43631: LIST
43632: LIST
43633: PUSH
43634: LD_INT 1
43636: NEG
43637: PUSH
43638: LD_INT 1
43640: PUSH
43641: EMPTY
43642: LIST
43643: LIST
43644: PUSH
43645: LD_INT 2
43647: NEG
43648: PUSH
43649: LD_INT 0
43651: PUSH
43652: EMPTY
43653: LIST
43654: LIST
43655: PUSH
43656: LD_INT 2
43658: NEG
43659: PUSH
43660: LD_INT 1
43662: NEG
43663: PUSH
43664: EMPTY
43665: LIST
43666: LIST
43667: PUSH
43668: LD_INT 2
43670: NEG
43671: PUSH
43672: LD_INT 2
43674: NEG
43675: PUSH
43676: EMPTY
43677: LIST
43678: LIST
43679: PUSH
43680: LD_INT 1
43682: NEG
43683: PUSH
43684: LD_INT 3
43686: NEG
43687: PUSH
43688: EMPTY
43689: LIST
43690: LIST
43691: PUSH
43692: LD_INT 1
43694: PUSH
43695: LD_INT 2
43697: NEG
43698: PUSH
43699: EMPTY
43700: LIST
43701: LIST
43702: PUSH
43703: LD_INT 3
43705: PUSH
43706: LD_INT 2
43708: PUSH
43709: EMPTY
43710: LIST
43711: LIST
43712: PUSH
43713: LD_INT 2
43715: PUSH
43716: LD_INT 3
43718: PUSH
43719: EMPTY
43720: LIST
43721: LIST
43722: PUSH
43723: LD_INT 2
43725: NEG
43726: PUSH
43727: LD_INT 1
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: LD_INT 3
43736: NEG
43737: PUSH
43738: LD_INT 1
43740: NEG
43741: PUSH
43742: EMPTY
43743: LIST
43744: LIST
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: LIST
43750: LIST
43751: LIST
43752: LIST
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43771: LD_ADDR_VAR 0 35
43775: PUSH
43776: LD_INT 0
43778: PUSH
43779: LD_INT 0
43781: PUSH
43782: EMPTY
43783: LIST
43784: LIST
43785: PUSH
43786: LD_INT 0
43788: PUSH
43789: LD_INT 1
43791: NEG
43792: PUSH
43793: EMPTY
43794: LIST
43795: LIST
43796: PUSH
43797: LD_INT 1
43799: PUSH
43800: LD_INT 0
43802: PUSH
43803: EMPTY
43804: LIST
43805: LIST
43806: PUSH
43807: LD_INT 1
43809: PUSH
43810: LD_INT 1
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: PUSH
43817: LD_INT 0
43819: PUSH
43820: LD_INT 1
43822: PUSH
43823: EMPTY
43824: LIST
43825: LIST
43826: PUSH
43827: LD_INT 1
43829: NEG
43830: PUSH
43831: LD_INT 0
43833: PUSH
43834: EMPTY
43835: LIST
43836: LIST
43837: PUSH
43838: LD_INT 1
43840: NEG
43841: PUSH
43842: LD_INT 1
43844: NEG
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: PUSH
43850: LD_INT 2
43852: PUSH
43853: LD_INT 1
43855: PUSH
43856: EMPTY
43857: LIST
43858: LIST
43859: PUSH
43860: LD_INT 2
43862: NEG
43863: PUSH
43864: LD_INT 1
43866: NEG
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: EMPTY
43873: LIST
43874: LIST
43875: LIST
43876: LIST
43877: LIST
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43883: LD_ADDR_VAR 0 36
43887: PUSH
43888: LD_INT 0
43890: PUSH
43891: LD_INT 0
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_INT 0
43900: PUSH
43901: LD_INT 1
43903: NEG
43904: PUSH
43905: EMPTY
43906: LIST
43907: LIST
43908: PUSH
43909: LD_INT 1
43911: PUSH
43912: LD_INT 0
43914: PUSH
43915: EMPTY
43916: LIST
43917: LIST
43918: PUSH
43919: LD_INT 1
43921: PUSH
43922: LD_INT 1
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 0
43931: PUSH
43932: LD_INT 1
43934: PUSH
43935: EMPTY
43936: LIST
43937: LIST
43938: PUSH
43939: LD_INT 1
43941: NEG
43942: PUSH
43943: LD_INT 0
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: PUSH
43950: LD_INT 1
43952: NEG
43953: PUSH
43954: LD_INT 1
43956: NEG
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: PUSH
43962: LD_INT 1
43964: NEG
43965: PUSH
43966: LD_INT 2
43968: NEG
43969: PUSH
43970: EMPTY
43971: LIST
43972: LIST
43973: PUSH
43974: LD_INT 1
43976: PUSH
43977: LD_INT 2
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: LIST
43988: LIST
43989: LIST
43990: LIST
43991: LIST
43992: LIST
43993: LIST
43994: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43995: LD_ADDR_VAR 0 37
43999: PUSH
44000: LD_INT 0
44002: PUSH
44003: LD_INT 0
44005: PUSH
44006: EMPTY
44007: LIST
44008: LIST
44009: PUSH
44010: LD_INT 0
44012: PUSH
44013: LD_INT 1
44015: NEG
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: LD_INT 1
44023: PUSH
44024: LD_INT 0
44026: PUSH
44027: EMPTY
44028: LIST
44029: LIST
44030: PUSH
44031: LD_INT 1
44033: PUSH
44034: LD_INT 1
44036: PUSH
44037: EMPTY
44038: LIST
44039: LIST
44040: PUSH
44041: LD_INT 0
44043: PUSH
44044: LD_INT 1
44046: PUSH
44047: EMPTY
44048: LIST
44049: LIST
44050: PUSH
44051: LD_INT 1
44053: NEG
44054: PUSH
44055: LD_INT 0
44057: PUSH
44058: EMPTY
44059: LIST
44060: LIST
44061: PUSH
44062: LD_INT 1
44064: NEG
44065: PUSH
44066: LD_INT 1
44068: NEG
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 1
44076: PUSH
44077: LD_INT 1
44079: NEG
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 1
44087: NEG
44088: PUSH
44089: LD_INT 1
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: EMPTY
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44107: LD_ADDR_VAR 0 38
44111: PUSH
44112: LD_INT 0
44114: PUSH
44115: LD_INT 0
44117: PUSH
44118: EMPTY
44119: LIST
44120: LIST
44121: PUSH
44122: LD_INT 0
44124: PUSH
44125: LD_INT 1
44127: NEG
44128: PUSH
44129: EMPTY
44130: LIST
44131: LIST
44132: PUSH
44133: LD_INT 1
44135: PUSH
44136: LD_INT 0
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 1
44145: PUSH
44146: LD_INT 1
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 0
44155: PUSH
44156: LD_INT 1
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 1
44165: NEG
44166: PUSH
44167: LD_INT 0
44169: PUSH
44170: EMPTY
44171: LIST
44172: LIST
44173: PUSH
44174: LD_INT 1
44176: NEG
44177: PUSH
44178: LD_INT 1
44180: NEG
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: PUSH
44186: LD_INT 2
44188: PUSH
44189: LD_INT 1
44191: PUSH
44192: EMPTY
44193: LIST
44194: LIST
44195: PUSH
44196: LD_INT 2
44198: NEG
44199: PUSH
44200: LD_INT 1
44202: NEG
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: EMPTY
44209: LIST
44210: LIST
44211: LIST
44212: LIST
44213: LIST
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44219: LD_ADDR_VAR 0 39
44223: PUSH
44224: LD_INT 0
44226: PUSH
44227: LD_INT 0
44229: PUSH
44230: EMPTY
44231: LIST
44232: LIST
44233: PUSH
44234: LD_INT 0
44236: PUSH
44237: LD_INT 1
44239: NEG
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 1
44247: PUSH
44248: LD_INT 0
44250: PUSH
44251: EMPTY
44252: LIST
44253: LIST
44254: PUSH
44255: LD_INT 1
44257: PUSH
44258: LD_INT 1
44260: PUSH
44261: EMPTY
44262: LIST
44263: LIST
44264: PUSH
44265: LD_INT 0
44267: PUSH
44268: LD_INT 1
44270: PUSH
44271: EMPTY
44272: LIST
44273: LIST
44274: PUSH
44275: LD_INT 1
44277: NEG
44278: PUSH
44279: LD_INT 0
44281: PUSH
44282: EMPTY
44283: LIST
44284: LIST
44285: PUSH
44286: LD_INT 1
44288: NEG
44289: PUSH
44290: LD_INT 1
44292: NEG
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: PUSH
44298: LD_INT 1
44300: NEG
44301: PUSH
44302: LD_INT 2
44304: NEG
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PUSH
44310: LD_INT 1
44312: PUSH
44313: LD_INT 2
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44331: LD_ADDR_VAR 0 40
44335: PUSH
44336: LD_INT 0
44338: PUSH
44339: LD_INT 0
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 0
44348: PUSH
44349: LD_INT 1
44351: NEG
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 1
44359: PUSH
44360: LD_INT 0
44362: PUSH
44363: EMPTY
44364: LIST
44365: LIST
44366: PUSH
44367: LD_INT 1
44369: PUSH
44370: LD_INT 1
44372: PUSH
44373: EMPTY
44374: LIST
44375: LIST
44376: PUSH
44377: LD_INT 0
44379: PUSH
44380: LD_INT 1
44382: PUSH
44383: EMPTY
44384: LIST
44385: LIST
44386: PUSH
44387: LD_INT 1
44389: NEG
44390: PUSH
44391: LD_INT 0
44393: PUSH
44394: EMPTY
44395: LIST
44396: LIST
44397: PUSH
44398: LD_INT 1
44400: NEG
44401: PUSH
44402: LD_INT 1
44404: NEG
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: PUSH
44410: LD_INT 1
44412: PUSH
44413: LD_INT 1
44415: NEG
44416: PUSH
44417: EMPTY
44418: LIST
44419: LIST
44420: PUSH
44421: LD_INT 1
44423: NEG
44424: PUSH
44425: LD_INT 1
44427: PUSH
44428: EMPTY
44429: LIST
44430: LIST
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: LIST
44436: LIST
44437: LIST
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44443: LD_ADDR_VAR 0 41
44447: PUSH
44448: LD_INT 0
44450: PUSH
44451: LD_INT 0
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 0
44460: PUSH
44461: LD_INT 1
44463: NEG
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 1
44471: PUSH
44472: LD_INT 0
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 1
44481: PUSH
44482: LD_INT 1
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: LD_INT 0
44491: PUSH
44492: LD_INT 1
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 1
44501: NEG
44502: PUSH
44503: LD_INT 0
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 1
44512: NEG
44513: PUSH
44514: LD_INT 1
44516: NEG
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 1
44524: NEG
44525: PUSH
44526: LD_INT 2
44528: NEG
44529: PUSH
44530: EMPTY
44531: LIST
44532: LIST
44533: PUSH
44534: LD_INT 1
44536: PUSH
44537: LD_INT 1
44539: NEG
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: LD_INT 2
44547: PUSH
44548: LD_INT 0
44550: PUSH
44551: EMPTY
44552: LIST
44553: LIST
44554: PUSH
44555: LD_INT 2
44557: PUSH
44558: LD_INT 1
44560: PUSH
44561: EMPTY
44562: LIST
44563: LIST
44564: PUSH
44565: LD_INT 2
44567: PUSH
44568: LD_INT 2
44570: PUSH
44571: EMPTY
44572: LIST
44573: LIST
44574: PUSH
44575: LD_INT 1
44577: PUSH
44578: LD_INT 2
44580: PUSH
44581: EMPTY
44582: LIST
44583: LIST
44584: PUSH
44585: LD_INT 1
44587: NEG
44588: PUSH
44589: LD_INT 1
44591: PUSH
44592: EMPTY
44593: LIST
44594: LIST
44595: PUSH
44596: LD_INT 2
44598: NEG
44599: PUSH
44600: LD_INT 0
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 2
44609: NEG
44610: PUSH
44611: LD_INT 1
44613: NEG
44614: PUSH
44615: EMPTY
44616: LIST
44617: LIST
44618: PUSH
44619: LD_INT 2
44621: NEG
44622: PUSH
44623: LD_INT 2
44625: NEG
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 2
44633: NEG
44634: PUSH
44635: LD_INT 3
44637: NEG
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: PUSH
44643: LD_INT 2
44645: PUSH
44646: LD_INT 1
44648: NEG
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 3
44656: PUSH
44657: LD_INT 0
44659: PUSH
44660: EMPTY
44661: LIST
44662: LIST
44663: PUSH
44664: LD_INT 3
44666: PUSH
44667: LD_INT 1
44669: PUSH
44670: EMPTY
44671: LIST
44672: LIST
44673: PUSH
44674: LD_INT 3
44676: PUSH
44677: LD_INT 2
44679: PUSH
44680: EMPTY
44681: LIST
44682: LIST
44683: PUSH
44684: LD_INT 3
44686: PUSH
44687: LD_INT 3
44689: PUSH
44690: EMPTY
44691: LIST
44692: LIST
44693: PUSH
44694: LD_INT 2
44696: PUSH
44697: LD_INT 3
44699: PUSH
44700: EMPTY
44701: LIST
44702: LIST
44703: PUSH
44704: LD_INT 2
44706: NEG
44707: PUSH
44708: LD_INT 1
44710: PUSH
44711: EMPTY
44712: LIST
44713: LIST
44714: PUSH
44715: LD_INT 3
44717: NEG
44718: PUSH
44719: LD_INT 0
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 3
44728: NEG
44729: PUSH
44730: LD_INT 1
44732: NEG
44733: PUSH
44734: EMPTY
44735: LIST
44736: LIST
44737: PUSH
44738: LD_INT 3
44740: NEG
44741: PUSH
44742: LD_INT 2
44744: NEG
44745: PUSH
44746: EMPTY
44747: LIST
44748: LIST
44749: PUSH
44750: LD_INT 3
44752: NEG
44753: PUSH
44754: LD_INT 3
44756: NEG
44757: PUSH
44758: EMPTY
44759: LIST
44760: LIST
44761: PUSH
44762: EMPTY
44763: LIST
44764: LIST
44765: LIST
44766: LIST
44767: LIST
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44793: LD_ADDR_VAR 0 42
44797: PUSH
44798: LD_INT 0
44800: PUSH
44801: LD_INT 0
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 0
44810: PUSH
44811: LD_INT 1
44813: NEG
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 1
44821: PUSH
44822: LD_INT 0
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 1
44831: PUSH
44832: LD_INT 1
44834: PUSH
44835: EMPTY
44836: LIST
44837: LIST
44838: PUSH
44839: LD_INT 0
44841: PUSH
44842: LD_INT 1
44844: PUSH
44845: EMPTY
44846: LIST
44847: LIST
44848: PUSH
44849: LD_INT 1
44851: NEG
44852: PUSH
44853: LD_INT 0
44855: PUSH
44856: EMPTY
44857: LIST
44858: LIST
44859: PUSH
44860: LD_INT 1
44862: NEG
44863: PUSH
44864: LD_INT 1
44866: NEG
44867: PUSH
44868: EMPTY
44869: LIST
44870: LIST
44871: PUSH
44872: LD_INT 1
44874: NEG
44875: PUSH
44876: LD_INT 2
44878: NEG
44879: PUSH
44880: EMPTY
44881: LIST
44882: LIST
44883: PUSH
44884: LD_INT 0
44886: PUSH
44887: LD_INT 2
44889: NEG
44890: PUSH
44891: EMPTY
44892: LIST
44893: LIST
44894: PUSH
44895: LD_INT 1
44897: PUSH
44898: LD_INT 1
44900: NEG
44901: PUSH
44902: EMPTY
44903: LIST
44904: LIST
44905: PUSH
44906: LD_INT 2
44908: PUSH
44909: LD_INT 1
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: PUSH
44916: LD_INT 2
44918: PUSH
44919: LD_INT 2
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 1
44928: PUSH
44929: LD_INT 2
44931: PUSH
44932: EMPTY
44933: LIST
44934: LIST
44935: PUSH
44936: LD_INT 0
44938: PUSH
44939: LD_INT 2
44941: PUSH
44942: EMPTY
44943: LIST
44944: LIST
44945: PUSH
44946: LD_INT 1
44948: NEG
44949: PUSH
44950: LD_INT 1
44952: PUSH
44953: EMPTY
44954: LIST
44955: LIST
44956: PUSH
44957: LD_INT 2
44959: NEG
44960: PUSH
44961: LD_INT 1
44963: NEG
44964: PUSH
44965: EMPTY
44966: LIST
44967: LIST
44968: PUSH
44969: LD_INT 2
44971: NEG
44972: PUSH
44973: LD_INT 2
44975: NEG
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 2
44983: NEG
44984: PUSH
44985: LD_INT 3
44987: NEG
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 1
44995: NEG
44996: PUSH
44997: LD_INT 3
44999: NEG
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: LD_INT 0
45007: PUSH
45008: LD_INT 3
45010: NEG
45011: PUSH
45012: EMPTY
45013: LIST
45014: LIST
45015: PUSH
45016: LD_INT 1
45018: PUSH
45019: LD_INT 2
45021: NEG
45022: PUSH
45023: EMPTY
45024: LIST
45025: LIST
45026: PUSH
45027: LD_INT 3
45029: PUSH
45030: LD_INT 2
45032: PUSH
45033: EMPTY
45034: LIST
45035: LIST
45036: PUSH
45037: LD_INT 3
45039: PUSH
45040: LD_INT 3
45042: PUSH
45043: EMPTY
45044: LIST
45045: LIST
45046: PUSH
45047: LD_INT 2
45049: PUSH
45050: LD_INT 3
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 1
45059: PUSH
45060: LD_INT 3
45062: PUSH
45063: EMPTY
45064: LIST
45065: LIST
45066: PUSH
45067: LD_INT 0
45069: PUSH
45070: LD_INT 3
45072: PUSH
45073: EMPTY
45074: LIST
45075: LIST
45076: PUSH
45077: LD_INT 1
45079: NEG
45080: PUSH
45081: LD_INT 2
45083: PUSH
45084: EMPTY
45085: LIST
45086: LIST
45087: PUSH
45088: LD_INT 3
45090: NEG
45091: PUSH
45092: LD_INT 2
45094: NEG
45095: PUSH
45096: EMPTY
45097: LIST
45098: LIST
45099: PUSH
45100: LD_INT 3
45102: NEG
45103: PUSH
45104: LD_INT 3
45106: NEG
45107: PUSH
45108: EMPTY
45109: LIST
45110: LIST
45111: PUSH
45112: EMPTY
45113: LIST
45114: LIST
45115: LIST
45116: LIST
45117: LIST
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: LIST
45139: LIST
45140: LIST
45141: LIST
45142: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45143: LD_ADDR_VAR 0 43
45147: PUSH
45148: LD_INT 0
45150: PUSH
45151: LD_INT 0
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 0
45160: PUSH
45161: LD_INT 1
45163: NEG
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 1
45171: PUSH
45172: LD_INT 0
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 1
45181: PUSH
45182: LD_INT 1
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 0
45191: PUSH
45192: LD_INT 1
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 1
45201: NEG
45202: PUSH
45203: LD_INT 0
45205: PUSH
45206: EMPTY
45207: LIST
45208: LIST
45209: PUSH
45210: LD_INT 1
45212: NEG
45213: PUSH
45214: LD_INT 1
45216: NEG
45217: PUSH
45218: EMPTY
45219: LIST
45220: LIST
45221: PUSH
45222: LD_INT 1
45224: NEG
45225: PUSH
45226: LD_INT 2
45228: NEG
45229: PUSH
45230: EMPTY
45231: LIST
45232: LIST
45233: PUSH
45234: LD_INT 0
45236: PUSH
45237: LD_INT 2
45239: NEG
45240: PUSH
45241: EMPTY
45242: LIST
45243: LIST
45244: PUSH
45245: LD_INT 1
45247: PUSH
45248: LD_INT 1
45250: NEG
45251: PUSH
45252: EMPTY
45253: LIST
45254: LIST
45255: PUSH
45256: LD_INT 2
45258: PUSH
45259: LD_INT 0
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 2
45268: PUSH
45269: LD_INT 1
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 1
45278: PUSH
45279: LD_INT 2
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 0
45288: PUSH
45289: LD_INT 2
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 1
45298: NEG
45299: PUSH
45300: LD_INT 1
45302: PUSH
45303: EMPTY
45304: LIST
45305: LIST
45306: PUSH
45307: LD_INT 2
45309: NEG
45310: PUSH
45311: LD_INT 0
45313: PUSH
45314: EMPTY
45315: LIST
45316: LIST
45317: PUSH
45318: LD_INT 2
45320: NEG
45321: PUSH
45322: LD_INT 1
45324: NEG
45325: PUSH
45326: EMPTY
45327: LIST
45328: LIST
45329: PUSH
45330: LD_INT 1
45332: NEG
45333: PUSH
45334: LD_INT 3
45336: NEG
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 0
45344: PUSH
45345: LD_INT 3
45347: NEG
45348: PUSH
45349: EMPTY
45350: LIST
45351: LIST
45352: PUSH
45353: LD_INT 1
45355: PUSH
45356: LD_INT 2
45358: NEG
45359: PUSH
45360: EMPTY
45361: LIST
45362: LIST
45363: PUSH
45364: LD_INT 2
45366: PUSH
45367: LD_INT 1
45369: NEG
45370: PUSH
45371: EMPTY
45372: LIST
45373: LIST
45374: PUSH
45375: LD_INT 3
45377: PUSH
45378: LD_INT 0
45380: PUSH
45381: EMPTY
45382: LIST
45383: LIST
45384: PUSH
45385: LD_INT 3
45387: PUSH
45388: LD_INT 1
45390: PUSH
45391: EMPTY
45392: LIST
45393: LIST
45394: PUSH
45395: LD_INT 1
45397: PUSH
45398: LD_INT 3
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 0
45407: PUSH
45408: LD_INT 3
45410: PUSH
45411: EMPTY
45412: LIST
45413: LIST
45414: PUSH
45415: LD_INT 1
45417: NEG
45418: PUSH
45419: LD_INT 2
45421: PUSH
45422: EMPTY
45423: LIST
45424: LIST
45425: PUSH
45426: LD_INT 2
45428: NEG
45429: PUSH
45430: LD_INT 1
45432: PUSH
45433: EMPTY
45434: LIST
45435: LIST
45436: PUSH
45437: LD_INT 3
45439: NEG
45440: PUSH
45441: LD_INT 0
45443: PUSH
45444: EMPTY
45445: LIST
45446: LIST
45447: PUSH
45448: LD_INT 3
45450: NEG
45451: PUSH
45452: LD_INT 1
45454: NEG
45455: PUSH
45456: EMPTY
45457: LIST
45458: LIST
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: LIST
45464: LIST
45465: LIST
45466: LIST
45467: LIST
45468: LIST
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45491: LD_ADDR_VAR 0 44
45495: PUSH
45496: LD_INT 0
45498: PUSH
45499: LD_INT 0
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 0
45508: PUSH
45509: LD_INT 1
45511: NEG
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 1
45519: PUSH
45520: LD_INT 0
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 1
45529: PUSH
45530: LD_INT 1
45532: PUSH
45533: EMPTY
45534: LIST
45535: LIST
45536: PUSH
45537: LD_INT 0
45539: PUSH
45540: LD_INT 1
45542: PUSH
45543: EMPTY
45544: LIST
45545: LIST
45546: PUSH
45547: LD_INT 1
45549: NEG
45550: PUSH
45551: LD_INT 0
45553: PUSH
45554: EMPTY
45555: LIST
45556: LIST
45557: PUSH
45558: LD_INT 1
45560: NEG
45561: PUSH
45562: LD_INT 1
45564: NEG
45565: PUSH
45566: EMPTY
45567: LIST
45568: LIST
45569: PUSH
45570: LD_INT 1
45572: NEG
45573: PUSH
45574: LD_INT 2
45576: NEG
45577: PUSH
45578: EMPTY
45579: LIST
45580: LIST
45581: PUSH
45582: LD_INT 1
45584: PUSH
45585: LD_INT 1
45587: NEG
45588: PUSH
45589: EMPTY
45590: LIST
45591: LIST
45592: PUSH
45593: LD_INT 2
45595: PUSH
45596: LD_INT 0
45598: PUSH
45599: EMPTY
45600: LIST
45601: LIST
45602: PUSH
45603: LD_INT 2
45605: PUSH
45606: LD_INT 1
45608: PUSH
45609: EMPTY
45610: LIST
45611: LIST
45612: PUSH
45613: LD_INT 2
45615: PUSH
45616: LD_INT 2
45618: PUSH
45619: EMPTY
45620: LIST
45621: LIST
45622: PUSH
45623: LD_INT 1
45625: PUSH
45626: LD_INT 2
45628: PUSH
45629: EMPTY
45630: LIST
45631: LIST
45632: PUSH
45633: LD_INT 1
45635: NEG
45636: PUSH
45637: LD_INT 1
45639: PUSH
45640: EMPTY
45641: LIST
45642: LIST
45643: PUSH
45644: LD_INT 2
45646: NEG
45647: PUSH
45648: LD_INT 0
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 2
45657: NEG
45658: PUSH
45659: LD_INT 1
45661: NEG
45662: PUSH
45663: EMPTY
45664: LIST
45665: LIST
45666: PUSH
45667: LD_INT 2
45669: NEG
45670: PUSH
45671: LD_INT 2
45673: NEG
45674: PUSH
45675: EMPTY
45676: LIST
45677: LIST
45678: PUSH
45679: LD_INT 2
45681: NEG
45682: PUSH
45683: LD_INT 3
45685: NEG
45686: PUSH
45687: EMPTY
45688: LIST
45689: LIST
45690: PUSH
45691: LD_INT 2
45693: PUSH
45694: LD_INT 1
45696: NEG
45697: PUSH
45698: EMPTY
45699: LIST
45700: LIST
45701: PUSH
45702: LD_INT 3
45704: PUSH
45705: LD_INT 0
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 3
45714: PUSH
45715: LD_INT 1
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 3
45724: PUSH
45725: LD_INT 2
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: LD_INT 3
45734: PUSH
45735: LD_INT 3
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 2
45744: PUSH
45745: LD_INT 3
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 2
45754: NEG
45755: PUSH
45756: LD_INT 1
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 3
45765: NEG
45766: PUSH
45767: LD_INT 0
45769: PUSH
45770: EMPTY
45771: LIST
45772: LIST
45773: PUSH
45774: LD_INT 3
45776: NEG
45777: PUSH
45778: LD_INT 1
45780: NEG
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 3
45788: NEG
45789: PUSH
45790: LD_INT 2
45792: NEG
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 3
45800: NEG
45801: PUSH
45802: LD_INT 3
45804: NEG
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: LIST
45814: LIST
45815: LIST
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45841: LD_ADDR_VAR 0 45
45845: PUSH
45846: LD_INT 0
45848: PUSH
45849: LD_INT 0
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 0
45858: PUSH
45859: LD_INT 1
45861: NEG
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 1
45869: PUSH
45870: LD_INT 0
45872: PUSH
45873: EMPTY
45874: LIST
45875: LIST
45876: PUSH
45877: LD_INT 1
45879: PUSH
45880: LD_INT 1
45882: PUSH
45883: EMPTY
45884: LIST
45885: LIST
45886: PUSH
45887: LD_INT 0
45889: PUSH
45890: LD_INT 1
45892: PUSH
45893: EMPTY
45894: LIST
45895: LIST
45896: PUSH
45897: LD_INT 1
45899: NEG
45900: PUSH
45901: LD_INT 0
45903: PUSH
45904: EMPTY
45905: LIST
45906: LIST
45907: PUSH
45908: LD_INT 1
45910: NEG
45911: PUSH
45912: LD_INT 1
45914: NEG
45915: PUSH
45916: EMPTY
45917: LIST
45918: LIST
45919: PUSH
45920: LD_INT 1
45922: NEG
45923: PUSH
45924: LD_INT 2
45926: NEG
45927: PUSH
45928: EMPTY
45929: LIST
45930: LIST
45931: PUSH
45932: LD_INT 0
45934: PUSH
45935: LD_INT 2
45937: NEG
45938: PUSH
45939: EMPTY
45940: LIST
45941: LIST
45942: PUSH
45943: LD_INT 1
45945: PUSH
45946: LD_INT 1
45948: NEG
45949: PUSH
45950: EMPTY
45951: LIST
45952: LIST
45953: PUSH
45954: LD_INT 2
45956: PUSH
45957: LD_INT 1
45959: PUSH
45960: EMPTY
45961: LIST
45962: LIST
45963: PUSH
45964: LD_INT 2
45966: PUSH
45967: LD_INT 2
45969: PUSH
45970: EMPTY
45971: LIST
45972: LIST
45973: PUSH
45974: LD_INT 1
45976: PUSH
45977: LD_INT 2
45979: PUSH
45980: EMPTY
45981: LIST
45982: LIST
45983: PUSH
45984: LD_INT 0
45986: PUSH
45987: LD_INT 2
45989: PUSH
45990: EMPTY
45991: LIST
45992: LIST
45993: PUSH
45994: LD_INT 1
45996: NEG
45997: PUSH
45998: LD_INT 1
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: LD_INT 2
46007: NEG
46008: PUSH
46009: LD_INT 1
46011: NEG
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 2
46019: NEG
46020: PUSH
46021: LD_INT 2
46023: NEG
46024: PUSH
46025: EMPTY
46026: LIST
46027: LIST
46028: PUSH
46029: LD_INT 2
46031: NEG
46032: PUSH
46033: LD_INT 3
46035: NEG
46036: PUSH
46037: EMPTY
46038: LIST
46039: LIST
46040: PUSH
46041: LD_INT 1
46043: NEG
46044: PUSH
46045: LD_INT 3
46047: NEG
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 0
46055: PUSH
46056: LD_INT 3
46058: NEG
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: LD_INT 1
46066: PUSH
46067: LD_INT 2
46069: NEG
46070: PUSH
46071: EMPTY
46072: LIST
46073: LIST
46074: PUSH
46075: LD_INT 3
46077: PUSH
46078: LD_INT 2
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 3
46087: PUSH
46088: LD_INT 3
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 2
46097: PUSH
46098: LD_INT 3
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: LD_INT 1
46107: PUSH
46108: LD_INT 3
46110: PUSH
46111: EMPTY
46112: LIST
46113: LIST
46114: PUSH
46115: LD_INT 0
46117: PUSH
46118: LD_INT 3
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 1
46127: NEG
46128: PUSH
46129: LD_INT 2
46131: PUSH
46132: EMPTY
46133: LIST
46134: LIST
46135: PUSH
46136: LD_INT 3
46138: NEG
46139: PUSH
46140: LD_INT 2
46142: NEG
46143: PUSH
46144: EMPTY
46145: LIST
46146: LIST
46147: PUSH
46148: LD_INT 3
46150: NEG
46151: PUSH
46152: LD_INT 3
46154: NEG
46155: PUSH
46156: EMPTY
46157: LIST
46158: LIST
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: LIST
46164: LIST
46165: LIST
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46191: LD_ADDR_VAR 0 46
46195: PUSH
46196: LD_INT 0
46198: PUSH
46199: LD_INT 0
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 0
46208: PUSH
46209: LD_INT 1
46211: NEG
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 1
46219: PUSH
46220: LD_INT 0
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 1
46229: PUSH
46230: LD_INT 1
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 0
46239: PUSH
46240: LD_INT 1
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 1
46249: NEG
46250: PUSH
46251: LD_INT 0
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 1
46260: NEG
46261: PUSH
46262: LD_INT 1
46264: NEG
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 1
46272: NEG
46273: PUSH
46274: LD_INT 2
46276: NEG
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: LD_INT 0
46284: PUSH
46285: LD_INT 2
46287: NEG
46288: PUSH
46289: EMPTY
46290: LIST
46291: LIST
46292: PUSH
46293: LD_INT 1
46295: PUSH
46296: LD_INT 1
46298: NEG
46299: PUSH
46300: EMPTY
46301: LIST
46302: LIST
46303: PUSH
46304: LD_INT 2
46306: PUSH
46307: LD_INT 0
46309: PUSH
46310: EMPTY
46311: LIST
46312: LIST
46313: PUSH
46314: LD_INT 2
46316: PUSH
46317: LD_INT 1
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: PUSH
46324: LD_INT 1
46326: PUSH
46327: LD_INT 2
46329: PUSH
46330: EMPTY
46331: LIST
46332: LIST
46333: PUSH
46334: LD_INT 0
46336: PUSH
46337: LD_INT 2
46339: PUSH
46340: EMPTY
46341: LIST
46342: LIST
46343: PUSH
46344: LD_INT 1
46346: NEG
46347: PUSH
46348: LD_INT 1
46350: PUSH
46351: EMPTY
46352: LIST
46353: LIST
46354: PUSH
46355: LD_INT 2
46357: NEG
46358: PUSH
46359: LD_INT 0
46361: PUSH
46362: EMPTY
46363: LIST
46364: LIST
46365: PUSH
46366: LD_INT 2
46368: NEG
46369: PUSH
46370: LD_INT 1
46372: NEG
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 1
46380: NEG
46381: PUSH
46382: LD_INT 3
46384: NEG
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 0
46392: PUSH
46393: LD_INT 3
46395: NEG
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: LD_INT 1
46403: PUSH
46404: LD_INT 2
46406: NEG
46407: PUSH
46408: EMPTY
46409: LIST
46410: LIST
46411: PUSH
46412: LD_INT 2
46414: PUSH
46415: LD_INT 1
46417: NEG
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 3
46425: PUSH
46426: LD_INT 0
46428: PUSH
46429: EMPTY
46430: LIST
46431: LIST
46432: PUSH
46433: LD_INT 3
46435: PUSH
46436: LD_INT 1
46438: PUSH
46439: EMPTY
46440: LIST
46441: LIST
46442: PUSH
46443: LD_INT 1
46445: PUSH
46446: LD_INT 3
46448: PUSH
46449: EMPTY
46450: LIST
46451: LIST
46452: PUSH
46453: LD_INT 0
46455: PUSH
46456: LD_INT 3
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 1
46465: NEG
46466: PUSH
46467: LD_INT 2
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 2
46476: NEG
46477: PUSH
46478: LD_INT 1
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 3
46487: NEG
46488: PUSH
46489: LD_INT 0
46491: PUSH
46492: EMPTY
46493: LIST
46494: LIST
46495: PUSH
46496: LD_INT 3
46498: NEG
46499: PUSH
46500: LD_INT 1
46502: NEG
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: LIST
46512: LIST
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46539: LD_ADDR_VAR 0 47
46543: PUSH
46544: LD_INT 0
46546: PUSH
46547: LD_INT 0
46549: PUSH
46550: EMPTY
46551: LIST
46552: LIST
46553: PUSH
46554: LD_INT 0
46556: PUSH
46557: LD_INT 1
46559: NEG
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 1
46567: PUSH
46568: LD_INT 0
46570: PUSH
46571: EMPTY
46572: LIST
46573: LIST
46574: PUSH
46575: LD_INT 1
46577: PUSH
46578: LD_INT 1
46580: PUSH
46581: EMPTY
46582: LIST
46583: LIST
46584: PUSH
46585: LD_INT 0
46587: PUSH
46588: LD_INT 1
46590: PUSH
46591: EMPTY
46592: LIST
46593: LIST
46594: PUSH
46595: LD_INT 1
46597: NEG
46598: PUSH
46599: LD_INT 0
46601: PUSH
46602: EMPTY
46603: LIST
46604: LIST
46605: PUSH
46606: LD_INT 1
46608: NEG
46609: PUSH
46610: LD_INT 1
46612: NEG
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 1
46620: NEG
46621: PUSH
46622: LD_INT 2
46624: NEG
46625: PUSH
46626: EMPTY
46627: LIST
46628: LIST
46629: PUSH
46630: LD_INT 0
46632: PUSH
46633: LD_INT 2
46635: NEG
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 1
46643: PUSH
46644: LD_INT 1
46646: NEG
46647: PUSH
46648: EMPTY
46649: LIST
46650: LIST
46651: PUSH
46652: LD_INT 2
46654: NEG
46655: PUSH
46656: LD_INT 1
46658: NEG
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 2
46666: NEG
46667: PUSH
46668: LD_INT 2
46670: NEG
46671: PUSH
46672: EMPTY
46673: LIST
46674: LIST
46675: PUSH
46676: EMPTY
46677: LIST
46678: LIST
46679: LIST
46680: LIST
46681: LIST
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46690: LD_ADDR_VAR 0 48
46694: PUSH
46695: LD_INT 0
46697: PUSH
46698: LD_INT 0
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 0
46707: PUSH
46708: LD_INT 1
46710: NEG
46711: PUSH
46712: EMPTY
46713: LIST
46714: LIST
46715: PUSH
46716: LD_INT 1
46718: PUSH
46719: LD_INT 0
46721: PUSH
46722: EMPTY
46723: LIST
46724: LIST
46725: PUSH
46726: LD_INT 1
46728: PUSH
46729: LD_INT 1
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 0
46738: PUSH
46739: LD_INT 1
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: PUSH
46746: LD_INT 1
46748: NEG
46749: PUSH
46750: LD_INT 0
46752: PUSH
46753: EMPTY
46754: LIST
46755: LIST
46756: PUSH
46757: LD_INT 1
46759: NEG
46760: PUSH
46761: LD_INT 1
46763: NEG
46764: PUSH
46765: EMPTY
46766: LIST
46767: LIST
46768: PUSH
46769: LD_INT 1
46771: NEG
46772: PUSH
46773: LD_INT 2
46775: NEG
46776: PUSH
46777: EMPTY
46778: LIST
46779: LIST
46780: PUSH
46781: LD_INT 0
46783: PUSH
46784: LD_INT 2
46786: NEG
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 1
46794: PUSH
46795: LD_INT 1
46797: NEG
46798: PUSH
46799: EMPTY
46800: LIST
46801: LIST
46802: PUSH
46803: LD_INT 2
46805: PUSH
46806: LD_INT 0
46808: PUSH
46809: EMPTY
46810: LIST
46811: LIST
46812: PUSH
46813: LD_INT 2
46815: PUSH
46816: LD_INT 1
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: EMPTY
46824: LIST
46825: LIST
46826: LIST
46827: LIST
46828: LIST
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46837: LD_ADDR_VAR 0 49
46841: PUSH
46842: LD_INT 0
46844: PUSH
46845: LD_INT 0
46847: PUSH
46848: EMPTY
46849: LIST
46850: LIST
46851: PUSH
46852: LD_INT 0
46854: PUSH
46855: LD_INT 1
46857: NEG
46858: PUSH
46859: EMPTY
46860: LIST
46861: LIST
46862: PUSH
46863: LD_INT 1
46865: PUSH
46866: LD_INT 0
46868: PUSH
46869: EMPTY
46870: LIST
46871: LIST
46872: PUSH
46873: LD_INT 1
46875: PUSH
46876: LD_INT 1
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 0
46885: PUSH
46886: LD_INT 1
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 1
46895: NEG
46896: PUSH
46897: LD_INT 0
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 1
46906: NEG
46907: PUSH
46908: LD_INT 1
46910: NEG
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 1
46918: PUSH
46919: LD_INT 1
46921: NEG
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 2
46929: PUSH
46930: LD_INT 0
46932: PUSH
46933: EMPTY
46934: LIST
46935: LIST
46936: PUSH
46937: LD_INT 2
46939: PUSH
46940: LD_INT 1
46942: PUSH
46943: EMPTY
46944: LIST
46945: LIST
46946: PUSH
46947: LD_INT 2
46949: PUSH
46950: LD_INT 2
46952: PUSH
46953: EMPTY
46954: LIST
46955: LIST
46956: PUSH
46957: LD_INT 1
46959: PUSH
46960: LD_INT 2
46962: PUSH
46963: EMPTY
46964: LIST
46965: LIST
46966: PUSH
46967: EMPTY
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: LIST
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46981: LD_ADDR_VAR 0 50
46985: PUSH
46986: LD_INT 0
46988: PUSH
46989: LD_INT 0
46991: PUSH
46992: EMPTY
46993: LIST
46994: LIST
46995: PUSH
46996: LD_INT 0
46998: PUSH
46999: LD_INT 1
47001: NEG
47002: PUSH
47003: EMPTY
47004: LIST
47005: LIST
47006: PUSH
47007: LD_INT 1
47009: PUSH
47010: LD_INT 0
47012: PUSH
47013: EMPTY
47014: LIST
47015: LIST
47016: PUSH
47017: LD_INT 1
47019: PUSH
47020: LD_INT 1
47022: PUSH
47023: EMPTY
47024: LIST
47025: LIST
47026: PUSH
47027: LD_INT 0
47029: PUSH
47030: LD_INT 1
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 1
47039: NEG
47040: PUSH
47041: LD_INT 0
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 1
47050: NEG
47051: PUSH
47052: LD_INT 1
47054: NEG
47055: PUSH
47056: EMPTY
47057: LIST
47058: LIST
47059: PUSH
47060: LD_INT 2
47062: PUSH
47063: LD_INT 1
47065: PUSH
47066: EMPTY
47067: LIST
47068: LIST
47069: PUSH
47070: LD_INT 2
47072: PUSH
47073: LD_INT 2
47075: PUSH
47076: EMPTY
47077: LIST
47078: LIST
47079: PUSH
47080: LD_INT 1
47082: PUSH
47083: LD_INT 2
47085: PUSH
47086: EMPTY
47087: LIST
47088: LIST
47089: PUSH
47090: LD_INT 0
47092: PUSH
47093: LD_INT 2
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 1
47102: NEG
47103: PUSH
47104: LD_INT 1
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: LIST
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47125: LD_ADDR_VAR 0 51
47129: PUSH
47130: LD_INT 0
47132: PUSH
47133: LD_INT 0
47135: PUSH
47136: EMPTY
47137: LIST
47138: LIST
47139: PUSH
47140: LD_INT 0
47142: PUSH
47143: LD_INT 1
47145: NEG
47146: PUSH
47147: EMPTY
47148: LIST
47149: LIST
47150: PUSH
47151: LD_INT 1
47153: PUSH
47154: LD_INT 0
47156: PUSH
47157: EMPTY
47158: LIST
47159: LIST
47160: PUSH
47161: LD_INT 1
47163: PUSH
47164: LD_INT 1
47166: PUSH
47167: EMPTY
47168: LIST
47169: LIST
47170: PUSH
47171: LD_INT 0
47173: PUSH
47174: LD_INT 1
47176: PUSH
47177: EMPTY
47178: LIST
47179: LIST
47180: PUSH
47181: LD_INT 1
47183: NEG
47184: PUSH
47185: LD_INT 0
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: LD_INT 1
47194: NEG
47195: PUSH
47196: LD_INT 1
47198: NEG
47199: PUSH
47200: EMPTY
47201: LIST
47202: LIST
47203: PUSH
47204: LD_INT 1
47206: PUSH
47207: LD_INT 2
47209: PUSH
47210: EMPTY
47211: LIST
47212: LIST
47213: PUSH
47214: LD_INT 0
47216: PUSH
47217: LD_INT 2
47219: PUSH
47220: EMPTY
47221: LIST
47222: LIST
47223: PUSH
47224: LD_INT 1
47226: NEG
47227: PUSH
47228: LD_INT 1
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: PUSH
47235: LD_INT 2
47237: NEG
47238: PUSH
47239: LD_INT 0
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: PUSH
47246: LD_INT 2
47248: NEG
47249: PUSH
47250: LD_INT 1
47252: NEG
47253: PUSH
47254: EMPTY
47255: LIST
47256: LIST
47257: PUSH
47258: EMPTY
47259: LIST
47260: LIST
47261: LIST
47262: LIST
47263: LIST
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47272: LD_ADDR_VAR 0 52
47276: PUSH
47277: LD_INT 0
47279: PUSH
47280: LD_INT 0
47282: PUSH
47283: EMPTY
47284: LIST
47285: LIST
47286: PUSH
47287: LD_INT 0
47289: PUSH
47290: LD_INT 1
47292: NEG
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 1
47300: PUSH
47301: LD_INT 0
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 1
47310: PUSH
47311: LD_INT 1
47313: PUSH
47314: EMPTY
47315: LIST
47316: LIST
47317: PUSH
47318: LD_INT 0
47320: PUSH
47321: LD_INT 1
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 1
47330: NEG
47331: PUSH
47332: LD_INT 0
47334: PUSH
47335: EMPTY
47336: LIST
47337: LIST
47338: PUSH
47339: LD_INT 1
47341: NEG
47342: PUSH
47343: LD_INT 1
47345: NEG
47346: PUSH
47347: EMPTY
47348: LIST
47349: LIST
47350: PUSH
47351: LD_INT 1
47353: NEG
47354: PUSH
47355: LD_INT 2
47357: NEG
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: PUSH
47363: LD_INT 1
47365: NEG
47366: PUSH
47367: LD_INT 1
47369: PUSH
47370: EMPTY
47371: LIST
47372: LIST
47373: PUSH
47374: LD_INT 2
47376: NEG
47377: PUSH
47378: LD_INT 0
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 2
47387: NEG
47388: PUSH
47389: LD_INT 1
47391: NEG
47392: PUSH
47393: EMPTY
47394: LIST
47395: LIST
47396: PUSH
47397: LD_INT 2
47399: NEG
47400: PUSH
47401: LD_INT 2
47403: NEG
47404: PUSH
47405: EMPTY
47406: LIST
47407: LIST
47408: PUSH
47409: EMPTY
47410: LIST
47411: LIST
47412: LIST
47413: LIST
47414: LIST
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47423: LD_ADDR_VAR 0 53
47427: PUSH
47428: LD_INT 0
47430: PUSH
47431: LD_INT 0
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 0
47440: PUSH
47441: LD_INT 1
47443: NEG
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 1
47451: PUSH
47452: LD_INT 0
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 1
47461: PUSH
47462: LD_INT 1
47464: PUSH
47465: EMPTY
47466: LIST
47467: LIST
47468: PUSH
47469: LD_INT 0
47471: PUSH
47472: LD_INT 1
47474: PUSH
47475: EMPTY
47476: LIST
47477: LIST
47478: PUSH
47479: LD_INT 1
47481: NEG
47482: PUSH
47483: LD_INT 0
47485: PUSH
47486: EMPTY
47487: LIST
47488: LIST
47489: PUSH
47490: LD_INT 1
47492: NEG
47493: PUSH
47494: LD_INT 1
47496: NEG
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 1
47504: NEG
47505: PUSH
47506: LD_INT 2
47508: NEG
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: LD_INT 0
47516: PUSH
47517: LD_INT 2
47519: NEG
47520: PUSH
47521: EMPTY
47522: LIST
47523: LIST
47524: PUSH
47525: LD_INT 1
47527: PUSH
47528: LD_INT 1
47530: NEG
47531: PUSH
47532: EMPTY
47533: LIST
47534: LIST
47535: PUSH
47536: LD_INT 2
47538: PUSH
47539: LD_INT 0
47541: PUSH
47542: EMPTY
47543: LIST
47544: LIST
47545: PUSH
47546: LD_INT 2
47548: PUSH
47549: LD_INT 1
47551: PUSH
47552: EMPTY
47553: LIST
47554: LIST
47555: PUSH
47556: LD_INT 2
47558: PUSH
47559: LD_INT 2
47561: PUSH
47562: EMPTY
47563: LIST
47564: LIST
47565: PUSH
47566: LD_INT 1
47568: PUSH
47569: LD_INT 2
47571: PUSH
47572: EMPTY
47573: LIST
47574: LIST
47575: PUSH
47576: LD_INT 0
47578: PUSH
47579: LD_INT 2
47581: PUSH
47582: EMPTY
47583: LIST
47584: LIST
47585: PUSH
47586: LD_INT 1
47588: NEG
47589: PUSH
47590: LD_INT 1
47592: PUSH
47593: EMPTY
47594: LIST
47595: LIST
47596: PUSH
47597: LD_INT 2
47599: NEG
47600: PUSH
47601: LD_INT 0
47603: PUSH
47604: EMPTY
47605: LIST
47606: LIST
47607: PUSH
47608: LD_INT 2
47610: NEG
47611: PUSH
47612: LD_INT 1
47614: NEG
47615: PUSH
47616: EMPTY
47617: LIST
47618: LIST
47619: PUSH
47620: LD_INT 2
47622: NEG
47623: PUSH
47624: LD_INT 2
47626: NEG
47627: PUSH
47628: EMPTY
47629: LIST
47630: LIST
47631: PUSH
47632: EMPTY
47633: LIST
47634: LIST
47635: LIST
47636: LIST
47637: LIST
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47653: LD_ADDR_VAR 0 54
47657: PUSH
47658: LD_INT 0
47660: PUSH
47661: LD_INT 0
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 0
47670: PUSH
47671: LD_INT 1
47673: NEG
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 1
47681: PUSH
47682: LD_INT 0
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 1
47691: PUSH
47692: LD_INT 1
47694: PUSH
47695: EMPTY
47696: LIST
47697: LIST
47698: PUSH
47699: LD_INT 0
47701: PUSH
47702: LD_INT 1
47704: PUSH
47705: EMPTY
47706: LIST
47707: LIST
47708: PUSH
47709: LD_INT 1
47711: NEG
47712: PUSH
47713: LD_INT 0
47715: PUSH
47716: EMPTY
47717: LIST
47718: LIST
47719: PUSH
47720: LD_INT 1
47722: NEG
47723: PUSH
47724: LD_INT 1
47726: NEG
47727: PUSH
47728: EMPTY
47729: LIST
47730: LIST
47731: PUSH
47732: LD_INT 1
47734: NEG
47735: PUSH
47736: LD_INT 2
47738: NEG
47739: PUSH
47740: EMPTY
47741: LIST
47742: LIST
47743: PUSH
47744: LD_INT 0
47746: PUSH
47747: LD_INT 2
47749: NEG
47750: PUSH
47751: EMPTY
47752: LIST
47753: LIST
47754: PUSH
47755: LD_INT 1
47757: PUSH
47758: LD_INT 1
47760: NEG
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 2
47768: PUSH
47769: LD_INT 0
47771: PUSH
47772: EMPTY
47773: LIST
47774: LIST
47775: PUSH
47776: LD_INT 2
47778: PUSH
47779: LD_INT 1
47781: PUSH
47782: EMPTY
47783: LIST
47784: LIST
47785: PUSH
47786: LD_INT 2
47788: PUSH
47789: LD_INT 2
47791: PUSH
47792: EMPTY
47793: LIST
47794: LIST
47795: PUSH
47796: LD_INT 1
47798: PUSH
47799: LD_INT 2
47801: PUSH
47802: EMPTY
47803: LIST
47804: LIST
47805: PUSH
47806: LD_INT 0
47808: PUSH
47809: LD_INT 2
47811: PUSH
47812: EMPTY
47813: LIST
47814: LIST
47815: PUSH
47816: LD_INT 1
47818: NEG
47819: PUSH
47820: LD_INT 1
47822: PUSH
47823: EMPTY
47824: LIST
47825: LIST
47826: PUSH
47827: LD_INT 2
47829: NEG
47830: PUSH
47831: LD_INT 0
47833: PUSH
47834: EMPTY
47835: LIST
47836: LIST
47837: PUSH
47838: LD_INT 2
47840: NEG
47841: PUSH
47842: LD_INT 1
47844: NEG
47845: PUSH
47846: EMPTY
47847: LIST
47848: LIST
47849: PUSH
47850: LD_INT 2
47852: NEG
47853: PUSH
47854: LD_INT 2
47856: NEG
47857: PUSH
47858: EMPTY
47859: LIST
47860: LIST
47861: PUSH
47862: EMPTY
47863: LIST
47864: LIST
47865: LIST
47866: LIST
47867: LIST
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47883: LD_ADDR_VAR 0 55
47887: PUSH
47888: LD_INT 0
47890: PUSH
47891: LD_INT 0
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 0
47900: PUSH
47901: LD_INT 1
47903: NEG
47904: PUSH
47905: EMPTY
47906: LIST
47907: LIST
47908: PUSH
47909: LD_INT 1
47911: PUSH
47912: LD_INT 0
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 1
47921: PUSH
47922: LD_INT 1
47924: PUSH
47925: EMPTY
47926: LIST
47927: LIST
47928: PUSH
47929: LD_INT 0
47931: PUSH
47932: LD_INT 1
47934: PUSH
47935: EMPTY
47936: LIST
47937: LIST
47938: PUSH
47939: LD_INT 1
47941: NEG
47942: PUSH
47943: LD_INT 0
47945: PUSH
47946: EMPTY
47947: LIST
47948: LIST
47949: PUSH
47950: LD_INT 1
47952: NEG
47953: PUSH
47954: LD_INT 1
47956: NEG
47957: PUSH
47958: EMPTY
47959: LIST
47960: LIST
47961: PUSH
47962: LD_INT 1
47964: NEG
47965: PUSH
47966: LD_INT 2
47968: NEG
47969: PUSH
47970: EMPTY
47971: LIST
47972: LIST
47973: PUSH
47974: LD_INT 0
47976: PUSH
47977: LD_INT 2
47979: NEG
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: PUSH
47985: LD_INT 1
47987: PUSH
47988: LD_INT 1
47990: NEG
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 2
47998: PUSH
47999: LD_INT 0
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 2
48008: PUSH
48009: LD_INT 1
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 2
48018: PUSH
48019: LD_INT 2
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 1
48028: PUSH
48029: LD_INT 2
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: LD_INT 0
48038: PUSH
48039: LD_INT 2
48041: PUSH
48042: EMPTY
48043: LIST
48044: LIST
48045: PUSH
48046: LD_INT 1
48048: NEG
48049: PUSH
48050: LD_INT 1
48052: PUSH
48053: EMPTY
48054: LIST
48055: LIST
48056: PUSH
48057: LD_INT 2
48059: NEG
48060: PUSH
48061: LD_INT 0
48063: PUSH
48064: EMPTY
48065: LIST
48066: LIST
48067: PUSH
48068: LD_INT 2
48070: NEG
48071: PUSH
48072: LD_INT 1
48074: NEG
48075: PUSH
48076: EMPTY
48077: LIST
48078: LIST
48079: PUSH
48080: LD_INT 2
48082: NEG
48083: PUSH
48084: LD_INT 2
48086: NEG
48087: PUSH
48088: EMPTY
48089: LIST
48090: LIST
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: LIST
48096: LIST
48097: LIST
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48113: LD_ADDR_VAR 0 56
48117: PUSH
48118: LD_INT 0
48120: PUSH
48121: LD_INT 0
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 0
48130: PUSH
48131: LD_INT 1
48133: NEG
48134: PUSH
48135: EMPTY
48136: LIST
48137: LIST
48138: PUSH
48139: LD_INT 1
48141: PUSH
48142: LD_INT 0
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 1
48151: PUSH
48152: LD_INT 1
48154: PUSH
48155: EMPTY
48156: LIST
48157: LIST
48158: PUSH
48159: LD_INT 0
48161: PUSH
48162: LD_INT 1
48164: PUSH
48165: EMPTY
48166: LIST
48167: LIST
48168: PUSH
48169: LD_INT 1
48171: NEG
48172: PUSH
48173: LD_INT 0
48175: PUSH
48176: EMPTY
48177: LIST
48178: LIST
48179: PUSH
48180: LD_INT 1
48182: NEG
48183: PUSH
48184: LD_INT 1
48186: NEG
48187: PUSH
48188: EMPTY
48189: LIST
48190: LIST
48191: PUSH
48192: LD_INT 1
48194: NEG
48195: PUSH
48196: LD_INT 2
48198: NEG
48199: PUSH
48200: EMPTY
48201: LIST
48202: LIST
48203: PUSH
48204: LD_INT 0
48206: PUSH
48207: LD_INT 2
48209: NEG
48210: PUSH
48211: EMPTY
48212: LIST
48213: LIST
48214: PUSH
48215: LD_INT 1
48217: PUSH
48218: LD_INT 1
48220: NEG
48221: PUSH
48222: EMPTY
48223: LIST
48224: LIST
48225: PUSH
48226: LD_INT 2
48228: PUSH
48229: LD_INT 0
48231: PUSH
48232: EMPTY
48233: LIST
48234: LIST
48235: PUSH
48236: LD_INT 2
48238: PUSH
48239: LD_INT 1
48241: PUSH
48242: EMPTY
48243: LIST
48244: LIST
48245: PUSH
48246: LD_INT 2
48248: PUSH
48249: LD_INT 2
48251: PUSH
48252: EMPTY
48253: LIST
48254: LIST
48255: PUSH
48256: LD_INT 1
48258: PUSH
48259: LD_INT 2
48261: PUSH
48262: EMPTY
48263: LIST
48264: LIST
48265: PUSH
48266: LD_INT 0
48268: PUSH
48269: LD_INT 2
48271: PUSH
48272: EMPTY
48273: LIST
48274: LIST
48275: PUSH
48276: LD_INT 1
48278: NEG
48279: PUSH
48280: LD_INT 1
48282: PUSH
48283: EMPTY
48284: LIST
48285: LIST
48286: PUSH
48287: LD_INT 2
48289: NEG
48290: PUSH
48291: LD_INT 0
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: PUSH
48298: LD_INT 2
48300: NEG
48301: PUSH
48302: LD_INT 1
48304: NEG
48305: PUSH
48306: EMPTY
48307: LIST
48308: LIST
48309: PUSH
48310: LD_INT 2
48312: NEG
48313: PUSH
48314: LD_INT 2
48316: NEG
48317: PUSH
48318: EMPTY
48319: LIST
48320: LIST
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: LIST
48326: LIST
48327: LIST
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48343: LD_ADDR_VAR 0 57
48347: PUSH
48348: LD_INT 0
48350: PUSH
48351: LD_INT 0
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 0
48360: PUSH
48361: LD_INT 1
48363: NEG
48364: PUSH
48365: EMPTY
48366: LIST
48367: LIST
48368: PUSH
48369: LD_INT 1
48371: PUSH
48372: LD_INT 0
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 1
48381: PUSH
48382: LD_INT 1
48384: PUSH
48385: EMPTY
48386: LIST
48387: LIST
48388: PUSH
48389: LD_INT 0
48391: PUSH
48392: LD_INT 1
48394: PUSH
48395: EMPTY
48396: LIST
48397: LIST
48398: PUSH
48399: LD_INT 1
48401: NEG
48402: PUSH
48403: LD_INT 0
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: PUSH
48410: LD_INT 1
48412: NEG
48413: PUSH
48414: LD_INT 1
48416: NEG
48417: PUSH
48418: EMPTY
48419: LIST
48420: LIST
48421: PUSH
48422: LD_INT 1
48424: NEG
48425: PUSH
48426: LD_INT 2
48428: NEG
48429: PUSH
48430: EMPTY
48431: LIST
48432: LIST
48433: PUSH
48434: LD_INT 0
48436: PUSH
48437: LD_INT 2
48439: NEG
48440: PUSH
48441: EMPTY
48442: LIST
48443: LIST
48444: PUSH
48445: LD_INT 1
48447: PUSH
48448: LD_INT 1
48450: NEG
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: LD_INT 2
48458: PUSH
48459: LD_INT 0
48461: PUSH
48462: EMPTY
48463: LIST
48464: LIST
48465: PUSH
48466: LD_INT 2
48468: PUSH
48469: LD_INT 1
48471: PUSH
48472: EMPTY
48473: LIST
48474: LIST
48475: PUSH
48476: LD_INT 2
48478: PUSH
48479: LD_INT 2
48481: PUSH
48482: EMPTY
48483: LIST
48484: LIST
48485: PUSH
48486: LD_INT 1
48488: PUSH
48489: LD_INT 2
48491: PUSH
48492: EMPTY
48493: LIST
48494: LIST
48495: PUSH
48496: LD_INT 0
48498: PUSH
48499: LD_INT 2
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: PUSH
48506: LD_INT 1
48508: NEG
48509: PUSH
48510: LD_INT 1
48512: PUSH
48513: EMPTY
48514: LIST
48515: LIST
48516: PUSH
48517: LD_INT 2
48519: NEG
48520: PUSH
48521: LD_INT 0
48523: PUSH
48524: EMPTY
48525: LIST
48526: LIST
48527: PUSH
48528: LD_INT 2
48530: NEG
48531: PUSH
48532: LD_INT 1
48534: NEG
48535: PUSH
48536: EMPTY
48537: LIST
48538: LIST
48539: PUSH
48540: LD_INT 2
48542: NEG
48543: PUSH
48544: LD_INT 2
48546: NEG
48547: PUSH
48548: EMPTY
48549: LIST
48550: LIST
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: LIST
48556: LIST
48557: LIST
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48573: LD_ADDR_VAR 0 58
48577: PUSH
48578: LD_INT 0
48580: PUSH
48581: LD_INT 0
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 0
48590: PUSH
48591: LD_INT 1
48593: NEG
48594: PUSH
48595: EMPTY
48596: LIST
48597: LIST
48598: PUSH
48599: LD_INT 1
48601: PUSH
48602: LD_INT 0
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 1
48611: PUSH
48612: LD_INT 1
48614: PUSH
48615: EMPTY
48616: LIST
48617: LIST
48618: PUSH
48619: LD_INT 0
48621: PUSH
48622: LD_INT 1
48624: PUSH
48625: EMPTY
48626: LIST
48627: LIST
48628: PUSH
48629: LD_INT 1
48631: NEG
48632: PUSH
48633: LD_INT 0
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 1
48642: NEG
48643: PUSH
48644: LD_INT 1
48646: NEG
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 1
48654: NEG
48655: PUSH
48656: LD_INT 2
48658: NEG
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 0
48666: PUSH
48667: LD_INT 2
48669: NEG
48670: PUSH
48671: EMPTY
48672: LIST
48673: LIST
48674: PUSH
48675: LD_INT 1
48677: PUSH
48678: LD_INT 1
48680: NEG
48681: PUSH
48682: EMPTY
48683: LIST
48684: LIST
48685: PUSH
48686: LD_INT 2
48688: PUSH
48689: LD_INT 0
48691: PUSH
48692: EMPTY
48693: LIST
48694: LIST
48695: PUSH
48696: LD_INT 2
48698: PUSH
48699: LD_INT 1
48701: PUSH
48702: EMPTY
48703: LIST
48704: LIST
48705: PUSH
48706: LD_INT 2
48708: PUSH
48709: LD_INT 2
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: PUSH
48716: LD_INT 1
48718: PUSH
48719: LD_INT 2
48721: PUSH
48722: EMPTY
48723: LIST
48724: LIST
48725: PUSH
48726: LD_INT 0
48728: PUSH
48729: LD_INT 2
48731: PUSH
48732: EMPTY
48733: LIST
48734: LIST
48735: PUSH
48736: LD_INT 1
48738: NEG
48739: PUSH
48740: LD_INT 1
48742: PUSH
48743: EMPTY
48744: LIST
48745: LIST
48746: PUSH
48747: LD_INT 2
48749: NEG
48750: PUSH
48751: LD_INT 0
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: LD_INT 2
48760: NEG
48761: PUSH
48762: LD_INT 1
48764: NEG
48765: PUSH
48766: EMPTY
48767: LIST
48768: LIST
48769: PUSH
48770: LD_INT 2
48772: NEG
48773: PUSH
48774: LD_INT 2
48776: NEG
48777: PUSH
48778: EMPTY
48779: LIST
48780: LIST
48781: PUSH
48782: EMPTY
48783: LIST
48784: LIST
48785: LIST
48786: LIST
48787: LIST
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48803: LD_ADDR_VAR 0 59
48807: PUSH
48808: LD_INT 0
48810: PUSH
48811: LD_INT 0
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: LD_INT 0
48820: PUSH
48821: LD_INT 1
48823: NEG
48824: PUSH
48825: EMPTY
48826: LIST
48827: LIST
48828: PUSH
48829: LD_INT 1
48831: PUSH
48832: LD_INT 0
48834: PUSH
48835: EMPTY
48836: LIST
48837: LIST
48838: PUSH
48839: LD_INT 1
48841: PUSH
48842: LD_INT 1
48844: PUSH
48845: EMPTY
48846: LIST
48847: LIST
48848: PUSH
48849: LD_INT 0
48851: PUSH
48852: LD_INT 1
48854: PUSH
48855: EMPTY
48856: LIST
48857: LIST
48858: PUSH
48859: LD_INT 1
48861: NEG
48862: PUSH
48863: LD_INT 0
48865: PUSH
48866: EMPTY
48867: LIST
48868: LIST
48869: PUSH
48870: LD_INT 1
48872: NEG
48873: PUSH
48874: LD_INT 1
48876: NEG
48877: PUSH
48878: EMPTY
48879: LIST
48880: LIST
48881: PUSH
48882: EMPTY
48883: LIST
48884: LIST
48885: LIST
48886: LIST
48887: LIST
48888: LIST
48889: LIST
48890: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48891: LD_ADDR_VAR 0 60
48895: PUSH
48896: LD_INT 0
48898: PUSH
48899: LD_INT 0
48901: PUSH
48902: EMPTY
48903: LIST
48904: LIST
48905: PUSH
48906: LD_INT 0
48908: PUSH
48909: LD_INT 1
48911: NEG
48912: PUSH
48913: EMPTY
48914: LIST
48915: LIST
48916: PUSH
48917: LD_INT 1
48919: PUSH
48920: LD_INT 0
48922: PUSH
48923: EMPTY
48924: LIST
48925: LIST
48926: PUSH
48927: LD_INT 1
48929: PUSH
48930: LD_INT 1
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 0
48939: PUSH
48940: LD_INT 1
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: PUSH
48947: LD_INT 1
48949: NEG
48950: PUSH
48951: LD_INT 0
48953: PUSH
48954: EMPTY
48955: LIST
48956: LIST
48957: PUSH
48958: LD_INT 1
48960: NEG
48961: PUSH
48962: LD_INT 1
48964: NEG
48965: PUSH
48966: EMPTY
48967: LIST
48968: LIST
48969: PUSH
48970: EMPTY
48971: LIST
48972: LIST
48973: LIST
48974: LIST
48975: LIST
48976: LIST
48977: LIST
48978: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48979: LD_ADDR_VAR 0 61
48983: PUSH
48984: LD_INT 0
48986: PUSH
48987: LD_INT 0
48989: PUSH
48990: EMPTY
48991: LIST
48992: LIST
48993: PUSH
48994: LD_INT 0
48996: PUSH
48997: LD_INT 1
48999: NEG
49000: PUSH
49001: EMPTY
49002: LIST
49003: LIST
49004: PUSH
49005: LD_INT 1
49007: PUSH
49008: LD_INT 0
49010: PUSH
49011: EMPTY
49012: LIST
49013: LIST
49014: PUSH
49015: LD_INT 1
49017: PUSH
49018: LD_INT 1
49020: PUSH
49021: EMPTY
49022: LIST
49023: LIST
49024: PUSH
49025: LD_INT 0
49027: PUSH
49028: LD_INT 1
49030: PUSH
49031: EMPTY
49032: LIST
49033: LIST
49034: PUSH
49035: LD_INT 1
49037: NEG
49038: PUSH
49039: LD_INT 0
49041: PUSH
49042: EMPTY
49043: LIST
49044: LIST
49045: PUSH
49046: LD_INT 1
49048: NEG
49049: PUSH
49050: LD_INT 1
49052: NEG
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: EMPTY
49059: LIST
49060: LIST
49061: LIST
49062: LIST
49063: LIST
49064: LIST
49065: LIST
49066: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49067: LD_ADDR_VAR 0 62
49071: PUSH
49072: LD_INT 0
49074: PUSH
49075: LD_INT 0
49077: PUSH
49078: EMPTY
49079: LIST
49080: LIST
49081: PUSH
49082: LD_INT 0
49084: PUSH
49085: LD_INT 1
49087: NEG
49088: PUSH
49089: EMPTY
49090: LIST
49091: LIST
49092: PUSH
49093: LD_INT 1
49095: PUSH
49096: LD_INT 0
49098: PUSH
49099: EMPTY
49100: LIST
49101: LIST
49102: PUSH
49103: LD_INT 1
49105: PUSH
49106: LD_INT 1
49108: PUSH
49109: EMPTY
49110: LIST
49111: LIST
49112: PUSH
49113: LD_INT 0
49115: PUSH
49116: LD_INT 1
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 1
49125: NEG
49126: PUSH
49127: LD_INT 0
49129: PUSH
49130: EMPTY
49131: LIST
49132: LIST
49133: PUSH
49134: LD_INT 1
49136: NEG
49137: PUSH
49138: LD_INT 1
49140: NEG
49141: PUSH
49142: EMPTY
49143: LIST
49144: LIST
49145: PUSH
49146: EMPTY
49147: LIST
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49155: LD_ADDR_VAR 0 63
49159: PUSH
49160: LD_INT 0
49162: PUSH
49163: LD_INT 0
49165: PUSH
49166: EMPTY
49167: LIST
49168: LIST
49169: PUSH
49170: LD_INT 0
49172: PUSH
49173: LD_INT 1
49175: NEG
49176: PUSH
49177: EMPTY
49178: LIST
49179: LIST
49180: PUSH
49181: LD_INT 1
49183: PUSH
49184: LD_INT 0
49186: PUSH
49187: EMPTY
49188: LIST
49189: LIST
49190: PUSH
49191: LD_INT 1
49193: PUSH
49194: LD_INT 1
49196: PUSH
49197: EMPTY
49198: LIST
49199: LIST
49200: PUSH
49201: LD_INT 0
49203: PUSH
49204: LD_INT 1
49206: PUSH
49207: EMPTY
49208: LIST
49209: LIST
49210: PUSH
49211: LD_INT 1
49213: NEG
49214: PUSH
49215: LD_INT 0
49217: PUSH
49218: EMPTY
49219: LIST
49220: LIST
49221: PUSH
49222: LD_INT 1
49224: NEG
49225: PUSH
49226: LD_INT 1
49228: NEG
49229: PUSH
49230: EMPTY
49231: LIST
49232: LIST
49233: PUSH
49234: EMPTY
49235: LIST
49236: LIST
49237: LIST
49238: LIST
49239: LIST
49240: LIST
49241: LIST
49242: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49243: LD_ADDR_VAR 0 64
49247: PUSH
49248: LD_INT 0
49250: PUSH
49251: LD_INT 0
49253: PUSH
49254: EMPTY
49255: LIST
49256: LIST
49257: PUSH
49258: LD_INT 0
49260: PUSH
49261: LD_INT 1
49263: NEG
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 1
49271: PUSH
49272: LD_INT 0
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 1
49281: PUSH
49282: LD_INT 1
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 0
49291: PUSH
49292: LD_INT 1
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 1
49301: NEG
49302: PUSH
49303: LD_INT 0
49305: PUSH
49306: EMPTY
49307: LIST
49308: LIST
49309: PUSH
49310: LD_INT 1
49312: NEG
49313: PUSH
49314: LD_INT 1
49316: NEG
49317: PUSH
49318: EMPTY
49319: LIST
49320: LIST
49321: PUSH
49322: EMPTY
49323: LIST
49324: LIST
49325: LIST
49326: LIST
49327: LIST
49328: LIST
49329: LIST
49330: ST_TO_ADDR
// end ; 1 :
49331: GO 55228
49333: LD_INT 1
49335: DOUBLE
49336: EQUAL
49337: IFTRUE 49341
49339: GO 51964
49341: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49342: LD_ADDR_VAR 0 11
49346: PUSH
49347: LD_INT 1
49349: NEG
49350: PUSH
49351: LD_INT 3
49353: NEG
49354: PUSH
49355: EMPTY
49356: LIST
49357: LIST
49358: PUSH
49359: LD_INT 0
49361: PUSH
49362: LD_INT 3
49364: NEG
49365: PUSH
49366: EMPTY
49367: LIST
49368: LIST
49369: PUSH
49370: LD_INT 1
49372: PUSH
49373: LD_INT 2
49375: NEG
49376: PUSH
49377: EMPTY
49378: LIST
49379: LIST
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: LIST
49385: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49386: LD_ADDR_VAR 0 12
49390: PUSH
49391: LD_INT 2
49393: PUSH
49394: LD_INT 1
49396: NEG
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 3
49404: PUSH
49405: LD_INT 0
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 3
49414: PUSH
49415: LD_INT 1
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: EMPTY
49423: LIST
49424: LIST
49425: LIST
49426: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49427: LD_ADDR_VAR 0 13
49431: PUSH
49432: LD_INT 3
49434: PUSH
49435: LD_INT 2
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: LD_INT 3
49444: PUSH
49445: LD_INT 3
49447: PUSH
49448: EMPTY
49449: LIST
49450: LIST
49451: PUSH
49452: LD_INT 2
49454: PUSH
49455: LD_INT 3
49457: PUSH
49458: EMPTY
49459: LIST
49460: LIST
49461: PUSH
49462: EMPTY
49463: LIST
49464: LIST
49465: LIST
49466: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49467: LD_ADDR_VAR 0 14
49471: PUSH
49472: LD_INT 1
49474: PUSH
49475: LD_INT 3
49477: PUSH
49478: EMPTY
49479: LIST
49480: LIST
49481: PUSH
49482: LD_INT 0
49484: PUSH
49485: LD_INT 3
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 1
49494: NEG
49495: PUSH
49496: LD_INT 2
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: PUSH
49503: EMPTY
49504: LIST
49505: LIST
49506: LIST
49507: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49508: LD_ADDR_VAR 0 15
49512: PUSH
49513: LD_INT 2
49515: NEG
49516: PUSH
49517: LD_INT 1
49519: PUSH
49520: EMPTY
49521: LIST
49522: LIST
49523: PUSH
49524: LD_INT 3
49526: NEG
49527: PUSH
49528: LD_INT 0
49530: PUSH
49531: EMPTY
49532: LIST
49533: LIST
49534: PUSH
49535: LD_INT 3
49537: NEG
49538: PUSH
49539: LD_INT 1
49541: NEG
49542: PUSH
49543: EMPTY
49544: LIST
49545: LIST
49546: PUSH
49547: EMPTY
49548: LIST
49549: LIST
49550: LIST
49551: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49552: LD_ADDR_VAR 0 16
49556: PUSH
49557: LD_INT 2
49559: NEG
49560: PUSH
49561: LD_INT 3
49563: NEG
49564: PUSH
49565: EMPTY
49566: LIST
49567: LIST
49568: PUSH
49569: LD_INT 3
49571: NEG
49572: PUSH
49573: LD_INT 2
49575: NEG
49576: PUSH
49577: EMPTY
49578: LIST
49579: LIST
49580: PUSH
49581: LD_INT 3
49583: NEG
49584: PUSH
49585: LD_INT 3
49587: NEG
49588: PUSH
49589: EMPTY
49590: LIST
49591: LIST
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: LIST
49597: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49598: LD_ADDR_VAR 0 17
49602: PUSH
49603: LD_INT 1
49605: NEG
49606: PUSH
49607: LD_INT 3
49609: NEG
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 0
49617: PUSH
49618: LD_INT 3
49620: NEG
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 1
49628: PUSH
49629: LD_INT 2
49631: NEG
49632: PUSH
49633: EMPTY
49634: LIST
49635: LIST
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: LIST
49641: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49642: LD_ADDR_VAR 0 18
49646: PUSH
49647: LD_INT 2
49649: PUSH
49650: LD_INT 1
49652: NEG
49653: PUSH
49654: EMPTY
49655: LIST
49656: LIST
49657: PUSH
49658: LD_INT 3
49660: PUSH
49661: LD_INT 0
49663: PUSH
49664: EMPTY
49665: LIST
49666: LIST
49667: PUSH
49668: LD_INT 3
49670: PUSH
49671: LD_INT 1
49673: PUSH
49674: EMPTY
49675: LIST
49676: LIST
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: LIST
49682: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49683: LD_ADDR_VAR 0 19
49687: PUSH
49688: LD_INT 3
49690: PUSH
49691: LD_INT 2
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: PUSH
49698: LD_INT 3
49700: PUSH
49701: LD_INT 3
49703: PUSH
49704: EMPTY
49705: LIST
49706: LIST
49707: PUSH
49708: LD_INT 2
49710: PUSH
49711: LD_INT 3
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: EMPTY
49719: LIST
49720: LIST
49721: LIST
49722: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49723: LD_ADDR_VAR 0 20
49727: PUSH
49728: LD_INT 1
49730: PUSH
49731: LD_INT 3
49733: PUSH
49734: EMPTY
49735: LIST
49736: LIST
49737: PUSH
49738: LD_INT 0
49740: PUSH
49741: LD_INT 3
49743: PUSH
49744: EMPTY
49745: LIST
49746: LIST
49747: PUSH
49748: LD_INT 1
49750: NEG
49751: PUSH
49752: LD_INT 2
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: EMPTY
49760: LIST
49761: LIST
49762: LIST
49763: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49764: LD_ADDR_VAR 0 21
49768: PUSH
49769: LD_INT 2
49771: NEG
49772: PUSH
49773: LD_INT 1
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 3
49782: NEG
49783: PUSH
49784: LD_INT 0
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 3
49793: NEG
49794: PUSH
49795: LD_INT 1
49797: NEG
49798: PUSH
49799: EMPTY
49800: LIST
49801: LIST
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: LIST
49807: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49808: LD_ADDR_VAR 0 22
49812: PUSH
49813: LD_INT 2
49815: NEG
49816: PUSH
49817: LD_INT 3
49819: NEG
49820: PUSH
49821: EMPTY
49822: LIST
49823: LIST
49824: PUSH
49825: LD_INT 3
49827: NEG
49828: PUSH
49829: LD_INT 2
49831: NEG
49832: PUSH
49833: EMPTY
49834: LIST
49835: LIST
49836: PUSH
49837: LD_INT 3
49839: NEG
49840: PUSH
49841: LD_INT 3
49843: NEG
49844: PUSH
49845: EMPTY
49846: LIST
49847: LIST
49848: PUSH
49849: EMPTY
49850: LIST
49851: LIST
49852: LIST
49853: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
49854: LD_ADDR_VAR 0 23
49858: PUSH
49859: LD_INT 0
49861: PUSH
49862: LD_INT 3
49864: NEG
49865: PUSH
49866: EMPTY
49867: LIST
49868: LIST
49869: PUSH
49870: LD_INT 1
49872: NEG
49873: PUSH
49874: LD_INT 4
49876: NEG
49877: PUSH
49878: EMPTY
49879: LIST
49880: LIST
49881: PUSH
49882: LD_INT 1
49884: PUSH
49885: LD_INT 3
49887: NEG
49888: PUSH
49889: EMPTY
49890: LIST
49891: LIST
49892: PUSH
49893: EMPTY
49894: LIST
49895: LIST
49896: LIST
49897: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
49898: LD_ADDR_VAR 0 24
49902: PUSH
49903: LD_INT 3
49905: PUSH
49906: LD_INT 0
49908: PUSH
49909: EMPTY
49910: LIST
49911: LIST
49912: PUSH
49913: LD_INT 3
49915: PUSH
49916: LD_INT 1
49918: NEG
49919: PUSH
49920: EMPTY
49921: LIST
49922: LIST
49923: PUSH
49924: LD_INT 4
49926: PUSH
49927: LD_INT 1
49929: PUSH
49930: EMPTY
49931: LIST
49932: LIST
49933: PUSH
49934: EMPTY
49935: LIST
49936: LIST
49937: LIST
49938: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
49939: LD_ADDR_VAR 0 25
49943: PUSH
49944: LD_INT 3
49946: PUSH
49947: LD_INT 3
49949: PUSH
49950: EMPTY
49951: LIST
49952: LIST
49953: PUSH
49954: LD_INT 4
49956: PUSH
49957: LD_INT 3
49959: PUSH
49960: EMPTY
49961: LIST
49962: LIST
49963: PUSH
49964: LD_INT 3
49966: PUSH
49967: LD_INT 4
49969: PUSH
49970: EMPTY
49971: LIST
49972: LIST
49973: PUSH
49974: EMPTY
49975: LIST
49976: LIST
49977: LIST
49978: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
49979: LD_ADDR_VAR 0 26
49983: PUSH
49984: LD_INT 0
49986: PUSH
49987: LD_INT 3
49989: PUSH
49990: EMPTY
49991: LIST
49992: LIST
49993: PUSH
49994: LD_INT 1
49996: PUSH
49997: LD_INT 4
49999: PUSH
50000: EMPTY
50001: LIST
50002: LIST
50003: PUSH
50004: LD_INT 1
50006: NEG
50007: PUSH
50008: LD_INT 3
50010: PUSH
50011: EMPTY
50012: LIST
50013: LIST
50014: PUSH
50015: EMPTY
50016: LIST
50017: LIST
50018: LIST
50019: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
50020: LD_ADDR_VAR 0 27
50024: PUSH
50025: LD_INT 3
50027: NEG
50028: PUSH
50029: LD_INT 0
50031: PUSH
50032: EMPTY
50033: LIST
50034: LIST
50035: PUSH
50036: LD_INT 3
50038: NEG
50039: PUSH
50040: LD_INT 1
50042: PUSH
50043: EMPTY
50044: LIST
50045: LIST
50046: PUSH
50047: LD_INT 4
50049: NEG
50050: PUSH
50051: LD_INT 1
50053: NEG
50054: PUSH
50055: EMPTY
50056: LIST
50057: LIST
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: LIST
50063: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
50064: LD_ADDR_VAR 0 28
50068: PUSH
50069: LD_INT 3
50071: NEG
50072: PUSH
50073: LD_INT 3
50075: NEG
50076: PUSH
50077: EMPTY
50078: LIST
50079: LIST
50080: PUSH
50081: LD_INT 3
50083: NEG
50084: PUSH
50085: LD_INT 4
50087: NEG
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 4
50095: NEG
50096: PUSH
50097: LD_INT 3
50099: NEG
50100: PUSH
50101: EMPTY
50102: LIST
50103: LIST
50104: PUSH
50105: EMPTY
50106: LIST
50107: LIST
50108: LIST
50109: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
50110: LD_ADDR_VAR 0 29
50114: PUSH
50115: LD_INT 1
50117: NEG
50118: PUSH
50119: LD_INT 3
50121: NEG
50122: PUSH
50123: EMPTY
50124: LIST
50125: LIST
50126: PUSH
50127: LD_INT 0
50129: PUSH
50130: LD_INT 3
50132: NEG
50133: PUSH
50134: EMPTY
50135: LIST
50136: LIST
50137: PUSH
50138: LD_INT 1
50140: PUSH
50141: LD_INT 2
50143: NEG
50144: PUSH
50145: EMPTY
50146: LIST
50147: LIST
50148: PUSH
50149: LD_INT 1
50151: NEG
50152: PUSH
50153: LD_INT 4
50155: NEG
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 0
50163: PUSH
50164: LD_INT 4
50166: NEG
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 1
50174: PUSH
50175: LD_INT 3
50177: NEG
50178: PUSH
50179: EMPTY
50180: LIST
50181: LIST
50182: PUSH
50183: LD_INT 1
50185: NEG
50186: PUSH
50187: LD_INT 5
50189: NEG
50190: PUSH
50191: EMPTY
50192: LIST
50193: LIST
50194: PUSH
50195: LD_INT 0
50197: PUSH
50198: LD_INT 5
50200: NEG
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: PUSH
50206: LD_INT 1
50208: PUSH
50209: LD_INT 4
50211: NEG
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: PUSH
50217: LD_INT 1
50219: NEG
50220: PUSH
50221: LD_INT 6
50223: NEG
50224: PUSH
50225: EMPTY
50226: LIST
50227: LIST
50228: PUSH
50229: LD_INT 0
50231: PUSH
50232: LD_INT 6
50234: NEG
50235: PUSH
50236: EMPTY
50237: LIST
50238: LIST
50239: PUSH
50240: LD_INT 1
50242: PUSH
50243: LD_INT 5
50245: NEG
50246: PUSH
50247: EMPTY
50248: LIST
50249: LIST
50250: PUSH
50251: EMPTY
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
50265: LD_ADDR_VAR 0 30
50269: PUSH
50270: LD_INT 2
50272: PUSH
50273: LD_INT 1
50275: NEG
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 3
50283: PUSH
50284: LD_INT 0
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: LD_INT 3
50293: PUSH
50294: LD_INT 1
50296: PUSH
50297: EMPTY
50298: LIST
50299: LIST
50300: PUSH
50301: LD_INT 3
50303: PUSH
50304: LD_INT 1
50306: NEG
50307: PUSH
50308: EMPTY
50309: LIST
50310: LIST
50311: PUSH
50312: LD_INT 4
50314: PUSH
50315: LD_INT 0
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: LD_INT 4
50324: PUSH
50325: LD_INT 1
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: PUSH
50332: LD_INT 4
50334: PUSH
50335: LD_INT 1
50337: NEG
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 5
50345: PUSH
50346: LD_INT 0
50348: PUSH
50349: EMPTY
50350: LIST
50351: LIST
50352: PUSH
50353: LD_INT 5
50355: PUSH
50356: LD_INT 1
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 5
50365: PUSH
50366: LD_INT 1
50368: NEG
50369: PUSH
50370: EMPTY
50371: LIST
50372: LIST
50373: PUSH
50374: LD_INT 6
50376: PUSH
50377: LD_INT 0
50379: PUSH
50380: EMPTY
50381: LIST
50382: LIST
50383: PUSH
50384: LD_INT 6
50386: PUSH
50387: LD_INT 1
50389: PUSH
50390: EMPTY
50391: LIST
50392: LIST
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
50408: LD_ADDR_VAR 0 31
50412: PUSH
50413: LD_INT 3
50415: PUSH
50416: LD_INT 2
50418: PUSH
50419: EMPTY
50420: LIST
50421: LIST
50422: PUSH
50423: LD_INT 3
50425: PUSH
50426: LD_INT 3
50428: PUSH
50429: EMPTY
50430: LIST
50431: LIST
50432: PUSH
50433: LD_INT 2
50435: PUSH
50436: LD_INT 3
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: PUSH
50443: LD_INT 4
50445: PUSH
50446: LD_INT 3
50448: PUSH
50449: EMPTY
50450: LIST
50451: LIST
50452: PUSH
50453: LD_INT 4
50455: PUSH
50456: LD_INT 4
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 3
50465: PUSH
50466: LD_INT 4
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: PUSH
50473: LD_INT 5
50475: PUSH
50476: LD_INT 4
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: PUSH
50483: LD_INT 5
50485: PUSH
50486: LD_INT 5
50488: PUSH
50489: EMPTY
50490: LIST
50491: LIST
50492: PUSH
50493: LD_INT 4
50495: PUSH
50496: LD_INT 5
50498: PUSH
50499: EMPTY
50500: LIST
50501: LIST
50502: PUSH
50503: LD_INT 6
50505: PUSH
50506: LD_INT 5
50508: PUSH
50509: EMPTY
50510: LIST
50511: LIST
50512: PUSH
50513: LD_INT 6
50515: PUSH
50516: LD_INT 6
50518: PUSH
50519: EMPTY
50520: LIST
50521: LIST
50522: PUSH
50523: LD_INT 5
50525: PUSH
50526: LD_INT 6
50528: PUSH
50529: EMPTY
50530: LIST
50531: LIST
50532: PUSH
50533: EMPTY
50534: LIST
50535: LIST
50536: LIST
50537: LIST
50538: LIST
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
50547: LD_ADDR_VAR 0 32
50551: PUSH
50552: LD_INT 1
50554: PUSH
50555: LD_INT 3
50557: PUSH
50558: EMPTY
50559: LIST
50560: LIST
50561: PUSH
50562: LD_INT 0
50564: PUSH
50565: LD_INT 3
50567: PUSH
50568: EMPTY
50569: LIST
50570: LIST
50571: PUSH
50572: LD_INT 1
50574: NEG
50575: PUSH
50576: LD_INT 2
50578: PUSH
50579: EMPTY
50580: LIST
50581: LIST
50582: PUSH
50583: LD_INT 1
50585: PUSH
50586: LD_INT 4
50588: PUSH
50589: EMPTY
50590: LIST
50591: LIST
50592: PUSH
50593: LD_INT 0
50595: PUSH
50596: LD_INT 4
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 1
50605: NEG
50606: PUSH
50607: LD_INT 3
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: PUSH
50614: LD_INT 1
50616: PUSH
50617: LD_INT 5
50619: PUSH
50620: EMPTY
50621: LIST
50622: LIST
50623: PUSH
50624: LD_INT 0
50626: PUSH
50627: LD_INT 5
50629: PUSH
50630: EMPTY
50631: LIST
50632: LIST
50633: PUSH
50634: LD_INT 1
50636: NEG
50637: PUSH
50638: LD_INT 4
50640: PUSH
50641: EMPTY
50642: LIST
50643: LIST
50644: PUSH
50645: LD_INT 1
50647: PUSH
50648: LD_INT 6
50650: PUSH
50651: EMPTY
50652: LIST
50653: LIST
50654: PUSH
50655: LD_INT 0
50657: PUSH
50658: LD_INT 6
50660: PUSH
50661: EMPTY
50662: LIST
50663: LIST
50664: PUSH
50665: LD_INT 1
50667: NEG
50668: PUSH
50669: LD_INT 5
50671: PUSH
50672: EMPTY
50673: LIST
50674: LIST
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: LIST
50680: LIST
50681: LIST
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
50690: LD_ADDR_VAR 0 33
50694: PUSH
50695: LD_INT 2
50697: NEG
50698: PUSH
50699: LD_INT 1
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 3
50708: NEG
50709: PUSH
50710: LD_INT 0
50712: PUSH
50713: EMPTY
50714: LIST
50715: LIST
50716: PUSH
50717: LD_INT 3
50719: NEG
50720: PUSH
50721: LD_INT 1
50723: NEG
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 3
50731: NEG
50732: PUSH
50733: LD_INT 1
50735: PUSH
50736: EMPTY
50737: LIST
50738: LIST
50739: PUSH
50740: LD_INT 4
50742: NEG
50743: PUSH
50744: LD_INT 0
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 4
50753: NEG
50754: PUSH
50755: LD_INT 1
50757: NEG
50758: PUSH
50759: EMPTY
50760: LIST
50761: LIST
50762: PUSH
50763: LD_INT 4
50765: NEG
50766: PUSH
50767: LD_INT 1
50769: PUSH
50770: EMPTY
50771: LIST
50772: LIST
50773: PUSH
50774: LD_INT 5
50776: NEG
50777: PUSH
50778: LD_INT 0
50780: PUSH
50781: EMPTY
50782: LIST
50783: LIST
50784: PUSH
50785: LD_INT 5
50787: NEG
50788: PUSH
50789: LD_INT 1
50791: NEG
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 5
50799: NEG
50800: PUSH
50801: LD_INT 1
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 6
50810: NEG
50811: PUSH
50812: LD_INT 0
50814: PUSH
50815: EMPTY
50816: LIST
50817: LIST
50818: PUSH
50819: LD_INT 6
50821: NEG
50822: PUSH
50823: LD_INT 1
50825: NEG
50826: PUSH
50827: EMPTY
50828: LIST
50829: LIST
50830: PUSH
50831: EMPTY
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
50845: LD_ADDR_VAR 0 34
50849: PUSH
50850: LD_INT 2
50852: NEG
50853: PUSH
50854: LD_INT 3
50856: NEG
50857: PUSH
50858: EMPTY
50859: LIST
50860: LIST
50861: PUSH
50862: LD_INT 3
50864: NEG
50865: PUSH
50866: LD_INT 2
50868: NEG
50869: PUSH
50870: EMPTY
50871: LIST
50872: LIST
50873: PUSH
50874: LD_INT 3
50876: NEG
50877: PUSH
50878: LD_INT 3
50880: NEG
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 3
50888: NEG
50889: PUSH
50890: LD_INT 4
50892: NEG
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 4
50900: NEG
50901: PUSH
50902: LD_INT 3
50904: NEG
50905: PUSH
50906: EMPTY
50907: LIST
50908: LIST
50909: PUSH
50910: LD_INT 4
50912: NEG
50913: PUSH
50914: LD_INT 4
50916: NEG
50917: PUSH
50918: EMPTY
50919: LIST
50920: LIST
50921: PUSH
50922: LD_INT 4
50924: NEG
50925: PUSH
50926: LD_INT 5
50928: NEG
50929: PUSH
50930: EMPTY
50931: LIST
50932: LIST
50933: PUSH
50934: LD_INT 5
50936: NEG
50937: PUSH
50938: LD_INT 4
50940: NEG
50941: PUSH
50942: EMPTY
50943: LIST
50944: LIST
50945: PUSH
50946: LD_INT 5
50948: NEG
50949: PUSH
50950: LD_INT 5
50952: NEG
50953: PUSH
50954: EMPTY
50955: LIST
50956: LIST
50957: PUSH
50958: LD_INT 5
50960: NEG
50961: PUSH
50962: LD_INT 6
50964: NEG
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 6
50972: NEG
50973: PUSH
50974: LD_INT 5
50976: NEG
50977: PUSH
50978: EMPTY
50979: LIST
50980: LIST
50981: PUSH
50982: LD_INT 6
50984: NEG
50985: PUSH
50986: LD_INT 6
50988: NEG
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: PUSH
50994: EMPTY
50995: LIST
50996: LIST
50997: LIST
50998: LIST
50999: LIST
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
51008: LD_ADDR_VAR 0 41
51012: PUSH
51013: LD_INT 0
51015: PUSH
51016: LD_INT 2
51018: NEG
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 1
51026: NEG
51027: PUSH
51028: LD_INT 3
51030: NEG
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 1
51038: PUSH
51039: LD_INT 2
51041: NEG
51042: PUSH
51043: EMPTY
51044: LIST
51045: LIST
51046: PUSH
51047: EMPTY
51048: LIST
51049: LIST
51050: LIST
51051: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
51052: LD_ADDR_VAR 0 42
51056: PUSH
51057: LD_INT 2
51059: PUSH
51060: LD_INT 0
51062: PUSH
51063: EMPTY
51064: LIST
51065: LIST
51066: PUSH
51067: LD_INT 2
51069: PUSH
51070: LD_INT 1
51072: NEG
51073: PUSH
51074: EMPTY
51075: LIST
51076: LIST
51077: PUSH
51078: LD_INT 3
51080: PUSH
51081: LD_INT 1
51083: PUSH
51084: EMPTY
51085: LIST
51086: LIST
51087: PUSH
51088: EMPTY
51089: LIST
51090: LIST
51091: LIST
51092: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
51093: LD_ADDR_VAR 0 43
51097: PUSH
51098: LD_INT 2
51100: PUSH
51101: LD_INT 2
51103: PUSH
51104: EMPTY
51105: LIST
51106: LIST
51107: PUSH
51108: LD_INT 3
51110: PUSH
51111: LD_INT 2
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 2
51120: PUSH
51121: LD_INT 3
51123: PUSH
51124: EMPTY
51125: LIST
51126: LIST
51127: PUSH
51128: EMPTY
51129: LIST
51130: LIST
51131: LIST
51132: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
51133: LD_ADDR_VAR 0 44
51137: PUSH
51138: LD_INT 0
51140: PUSH
51141: LD_INT 2
51143: PUSH
51144: EMPTY
51145: LIST
51146: LIST
51147: PUSH
51148: LD_INT 1
51150: PUSH
51151: LD_INT 3
51153: PUSH
51154: EMPTY
51155: LIST
51156: LIST
51157: PUSH
51158: LD_INT 1
51160: NEG
51161: PUSH
51162: LD_INT 2
51164: PUSH
51165: EMPTY
51166: LIST
51167: LIST
51168: PUSH
51169: EMPTY
51170: LIST
51171: LIST
51172: LIST
51173: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51174: LD_ADDR_VAR 0 45
51178: PUSH
51179: LD_INT 2
51181: NEG
51182: PUSH
51183: LD_INT 0
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: PUSH
51190: LD_INT 2
51192: NEG
51193: PUSH
51194: LD_INT 1
51196: PUSH
51197: EMPTY
51198: LIST
51199: LIST
51200: PUSH
51201: LD_INT 3
51203: NEG
51204: PUSH
51205: LD_INT 1
51207: NEG
51208: PUSH
51209: EMPTY
51210: LIST
51211: LIST
51212: PUSH
51213: EMPTY
51214: LIST
51215: LIST
51216: LIST
51217: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
51218: LD_ADDR_VAR 0 46
51222: PUSH
51223: LD_INT 2
51225: NEG
51226: PUSH
51227: LD_INT 2
51229: NEG
51230: PUSH
51231: EMPTY
51232: LIST
51233: LIST
51234: PUSH
51235: LD_INT 2
51237: NEG
51238: PUSH
51239: LD_INT 3
51241: NEG
51242: PUSH
51243: EMPTY
51244: LIST
51245: LIST
51246: PUSH
51247: LD_INT 3
51249: NEG
51250: PUSH
51251: LD_INT 2
51253: NEG
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: EMPTY
51260: LIST
51261: LIST
51262: LIST
51263: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
51264: LD_ADDR_VAR 0 47
51268: PUSH
51269: LD_INT 2
51271: NEG
51272: PUSH
51273: LD_INT 3
51275: NEG
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 1
51283: NEG
51284: PUSH
51285: LD_INT 3
51287: NEG
51288: PUSH
51289: EMPTY
51290: LIST
51291: LIST
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51297: LD_ADDR_VAR 0 48
51301: PUSH
51302: LD_INT 1
51304: PUSH
51305: LD_INT 2
51307: NEG
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 2
51315: PUSH
51316: LD_INT 1
51318: NEG
51319: PUSH
51320: EMPTY
51321: LIST
51322: LIST
51323: PUSH
51324: EMPTY
51325: LIST
51326: LIST
51327: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
51328: LD_ADDR_VAR 0 49
51332: PUSH
51333: LD_INT 3
51335: PUSH
51336: LD_INT 1
51338: PUSH
51339: EMPTY
51340: LIST
51341: LIST
51342: PUSH
51343: LD_INT 3
51345: PUSH
51346: LD_INT 2
51348: PUSH
51349: EMPTY
51350: LIST
51351: LIST
51352: PUSH
51353: EMPTY
51354: LIST
51355: LIST
51356: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
51357: LD_ADDR_VAR 0 50
51361: PUSH
51362: LD_INT 2
51364: PUSH
51365: LD_INT 3
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 1
51374: PUSH
51375: LD_INT 3
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: EMPTY
51383: LIST
51384: LIST
51385: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51386: LD_ADDR_VAR 0 51
51390: PUSH
51391: LD_INT 1
51393: NEG
51394: PUSH
51395: LD_INT 2
51397: PUSH
51398: EMPTY
51399: LIST
51400: LIST
51401: PUSH
51402: LD_INT 2
51404: NEG
51405: PUSH
51406: LD_INT 1
51408: PUSH
51409: EMPTY
51410: LIST
51411: LIST
51412: PUSH
51413: EMPTY
51414: LIST
51415: LIST
51416: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51417: LD_ADDR_VAR 0 52
51421: PUSH
51422: LD_INT 3
51424: NEG
51425: PUSH
51426: LD_INT 1
51428: NEG
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 3
51436: NEG
51437: PUSH
51438: LD_INT 2
51440: NEG
51441: PUSH
51442: EMPTY
51443: LIST
51444: LIST
51445: PUSH
51446: EMPTY
51447: LIST
51448: LIST
51449: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51450: LD_ADDR_VAR 0 53
51454: PUSH
51455: LD_INT 1
51457: NEG
51458: PUSH
51459: LD_INT 3
51461: NEG
51462: PUSH
51463: EMPTY
51464: LIST
51465: LIST
51466: PUSH
51467: LD_INT 0
51469: PUSH
51470: LD_INT 3
51472: NEG
51473: PUSH
51474: EMPTY
51475: LIST
51476: LIST
51477: PUSH
51478: LD_INT 1
51480: PUSH
51481: LD_INT 2
51483: NEG
51484: PUSH
51485: EMPTY
51486: LIST
51487: LIST
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: LIST
51493: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51494: LD_ADDR_VAR 0 54
51498: PUSH
51499: LD_INT 2
51501: PUSH
51502: LD_INT 1
51504: NEG
51505: PUSH
51506: EMPTY
51507: LIST
51508: LIST
51509: PUSH
51510: LD_INT 3
51512: PUSH
51513: LD_INT 0
51515: PUSH
51516: EMPTY
51517: LIST
51518: LIST
51519: PUSH
51520: LD_INT 3
51522: PUSH
51523: LD_INT 1
51525: PUSH
51526: EMPTY
51527: LIST
51528: LIST
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: LIST
51534: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51535: LD_ADDR_VAR 0 55
51539: PUSH
51540: LD_INT 3
51542: PUSH
51543: LD_INT 2
51545: PUSH
51546: EMPTY
51547: LIST
51548: LIST
51549: PUSH
51550: LD_INT 3
51552: PUSH
51553: LD_INT 3
51555: PUSH
51556: EMPTY
51557: LIST
51558: LIST
51559: PUSH
51560: LD_INT 2
51562: PUSH
51563: LD_INT 3
51565: PUSH
51566: EMPTY
51567: LIST
51568: LIST
51569: PUSH
51570: EMPTY
51571: LIST
51572: LIST
51573: LIST
51574: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51575: LD_ADDR_VAR 0 56
51579: PUSH
51580: LD_INT 1
51582: PUSH
51583: LD_INT 3
51585: PUSH
51586: EMPTY
51587: LIST
51588: LIST
51589: PUSH
51590: LD_INT 0
51592: PUSH
51593: LD_INT 3
51595: PUSH
51596: EMPTY
51597: LIST
51598: LIST
51599: PUSH
51600: LD_INT 1
51602: NEG
51603: PUSH
51604: LD_INT 2
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: PUSH
51611: EMPTY
51612: LIST
51613: LIST
51614: LIST
51615: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51616: LD_ADDR_VAR 0 57
51620: PUSH
51621: LD_INT 2
51623: NEG
51624: PUSH
51625: LD_INT 1
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 3
51634: NEG
51635: PUSH
51636: LD_INT 0
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 3
51645: NEG
51646: PUSH
51647: LD_INT 1
51649: NEG
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: EMPTY
51656: LIST
51657: LIST
51658: LIST
51659: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51660: LD_ADDR_VAR 0 58
51664: PUSH
51665: LD_INT 2
51667: NEG
51668: PUSH
51669: LD_INT 3
51671: NEG
51672: PUSH
51673: EMPTY
51674: LIST
51675: LIST
51676: PUSH
51677: LD_INT 3
51679: NEG
51680: PUSH
51681: LD_INT 2
51683: NEG
51684: PUSH
51685: EMPTY
51686: LIST
51687: LIST
51688: PUSH
51689: LD_INT 3
51691: NEG
51692: PUSH
51693: LD_INT 3
51695: NEG
51696: PUSH
51697: EMPTY
51698: LIST
51699: LIST
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: LIST
51705: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
51706: LD_ADDR_VAR 0 59
51710: PUSH
51711: LD_INT 1
51713: NEG
51714: PUSH
51715: LD_INT 2
51717: NEG
51718: PUSH
51719: EMPTY
51720: LIST
51721: LIST
51722: PUSH
51723: LD_INT 0
51725: PUSH
51726: LD_INT 2
51728: NEG
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 1
51736: PUSH
51737: LD_INT 1
51739: NEG
51740: PUSH
51741: EMPTY
51742: LIST
51743: LIST
51744: PUSH
51745: EMPTY
51746: LIST
51747: LIST
51748: LIST
51749: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51750: LD_ADDR_VAR 0 60
51754: PUSH
51755: LD_INT 1
51757: PUSH
51758: LD_INT 1
51760: NEG
51761: PUSH
51762: EMPTY
51763: LIST
51764: LIST
51765: PUSH
51766: LD_INT 2
51768: PUSH
51769: LD_INT 0
51771: PUSH
51772: EMPTY
51773: LIST
51774: LIST
51775: PUSH
51776: LD_INT 2
51778: PUSH
51779: LD_INT 1
51781: PUSH
51782: EMPTY
51783: LIST
51784: LIST
51785: PUSH
51786: EMPTY
51787: LIST
51788: LIST
51789: LIST
51790: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51791: LD_ADDR_VAR 0 61
51795: PUSH
51796: LD_INT 2
51798: PUSH
51799: LD_INT 1
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 2
51808: PUSH
51809: LD_INT 2
51811: PUSH
51812: EMPTY
51813: LIST
51814: LIST
51815: PUSH
51816: LD_INT 1
51818: PUSH
51819: LD_INT 2
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: EMPTY
51827: LIST
51828: LIST
51829: LIST
51830: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51831: LD_ADDR_VAR 0 62
51835: PUSH
51836: LD_INT 1
51838: PUSH
51839: LD_INT 2
51841: PUSH
51842: EMPTY
51843: LIST
51844: LIST
51845: PUSH
51846: LD_INT 0
51848: PUSH
51849: LD_INT 2
51851: PUSH
51852: EMPTY
51853: LIST
51854: LIST
51855: PUSH
51856: LD_INT 1
51858: NEG
51859: PUSH
51860: LD_INT 1
51862: PUSH
51863: EMPTY
51864: LIST
51865: LIST
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: LIST
51871: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51872: LD_ADDR_VAR 0 63
51876: PUSH
51877: LD_INT 1
51879: NEG
51880: PUSH
51881: LD_INT 1
51883: PUSH
51884: EMPTY
51885: LIST
51886: LIST
51887: PUSH
51888: LD_INT 2
51890: NEG
51891: PUSH
51892: LD_INT 0
51894: PUSH
51895: EMPTY
51896: LIST
51897: LIST
51898: PUSH
51899: LD_INT 2
51901: NEG
51902: PUSH
51903: LD_INT 1
51905: NEG
51906: PUSH
51907: EMPTY
51908: LIST
51909: LIST
51910: PUSH
51911: EMPTY
51912: LIST
51913: LIST
51914: LIST
51915: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51916: LD_ADDR_VAR 0 64
51920: PUSH
51921: LD_INT 1
51923: NEG
51924: PUSH
51925: LD_INT 2
51927: NEG
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 2
51935: NEG
51936: PUSH
51937: LD_INT 1
51939: NEG
51940: PUSH
51941: EMPTY
51942: LIST
51943: LIST
51944: PUSH
51945: LD_INT 2
51947: NEG
51948: PUSH
51949: LD_INT 2
51951: NEG
51952: PUSH
51953: EMPTY
51954: LIST
51955: LIST
51956: PUSH
51957: EMPTY
51958: LIST
51959: LIST
51960: LIST
51961: ST_TO_ADDR
// end ; 2 :
51962: GO 55228
51964: LD_INT 2
51966: DOUBLE
51967: EQUAL
51968: IFTRUE 51972
51970: GO 55227
51972: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
51973: LD_ADDR_VAR 0 29
51977: PUSH
51978: LD_INT 4
51980: PUSH
51981: LD_INT 0
51983: PUSH
51984: EMPTY
51985: LIST
51986: LIST
51987: PUSH
51988: LD_INT 4
51990: PUSH
51991: LD_INT 1
51993: NEG
51994: PUSH
51995: EMPTY
51996: LIST
51997: LIST
51998: PUSH
51999: LD_INT 5
52001: PUSH
52002: LD_INT 0
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 5
52011: PUSH
52012: LD_INT 1
52014: PUSH
52015: EMPTY
52016: LIST
52017: LIST
52018: PUSH
52019: LD_INT 4
52021: PUSH
52022: LD_INT 1
52024: PUSH
52025: EMPTY
52026: LIST
52027: LIST
52028: PUSH
52029: LD_INT 3
52031: PUSH
52032: LD_INT 0
52034: PUSH
52035: EMPTY
52036: LIST
52037: LIST
52038: PUSH
52039: LD_INT 3
52041: PUSH
52042: LD_INT 1
52044: NEG
52045: PUSH
52046: EMPTY
52047: LIST
52048: LIST
52049: PUSH
52050: LD_INT 3
52052: PUSH
52053: LD_INT 2
52055: NEG
52056: PUSH
52057: EMPTY
52058: LIST
52059: LIST
52060: PUSH
52061: LD_INT 5
52063: PUSH
52064: LD_INT 2
52066: PUSH
52067: EMPTY
52068: LIST
52069: LIST
52070: PUSH
52071: LD_INT 3
52073: PUSH
52074: LD_INT 3
52076: PUSH
52077: EMPTY
52078: LIST
52079: LIST
52080: PUSH
52081: LD_INT 3
52083: PUSH
52084: LD_INT 2
52086: PUSH
52087: EMPTY
52088: LIST
52089: LIST
52090: PUSH
52091: LD_INT 4
52093: PUSH
52094: LD_INT 3
52096: PUSH
52097: EMPTY
52098: LIST
52099: LIST
52100: PUSH
52101: LD_INT 4
52103: PUSH
52104: LD_INT 4
52106: PUSH
52107: EMPTY
52108: LIST
52109: LIST
52110: PUSH
52111: LD_INT 3
52113: PUSH
52114: LD_INT 4
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 2
52123: PUSH
52124: LD_INT 3
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 2
52133: PUSH
52134: LD_INT 2
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 4
52143: PUSH
52144: LD_INT 2
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 2
52153: PUSH
52154: LD_INT 4
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 0
52163: PUSH
52164: LD_INT 4
52166: PUSH
52167: EMPTY
52168: LIST
52169: LIST
52170: PUSH
52171: LD_INT 0
52173: PUSH
52174: LD_INT 3
52176: PUSH
52177: EMPTY
52178: LIST
52179: LIST
52180: PUSH
52181: LD_INT 1
52183: PUSH
52184: LD_INT 4
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 1
52193: PUSH
52194: LD_INT 5
52196: PUSH
52197: EMPTY
52198: LIST
52199: LIST
52200: PUSH
52201: LD_INT 0
52203: PUSH
52204: LD_INT 5
52206: PUSH
52207: EMPTY
52208: LIST
52209: LIST
52210: PUSH
52211: LD_INT 1
52213: NEG
52214: PUSH
52215: LD_INT 4
52217: PUSH
52218: EMPTY
52219: LIST
52220: LIST
52221: PUSH
52222: LD_INT 1
52224: NEG
52225: PUSH
52226: LD_INT 3
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 2
52235: PUSH
52236: LD_INT 5
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 2
52245: NEG
52246: PUSH
52247: LD_INT 3
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 3
52256: NEG
52257: PUSH
52258: LD_INT 0
52260: PUSH
52261: EMPTY
52262: LIST
52263: LIST
52264: PUSH
52265: LD_INT 3
52267: NEG
52268: PUSH
52269: LD_INT 1
52271: NEG
52272: PUSH
52273: EMPTY
52274: LIST
52275: LIST
52276: PUSH
52277: LD_INT 2
52279: NEG
52280: PUSH
52281: LD_INT 0
52283: PUSH
52284: EMPTY
52285: LIST
52286: LIST
52287: PUSH
52288: LD_INT 2
52290: NEG
52291: PUSH
52292: LD_INT 1
52294: PUSH
52295: EMPTY
52296: LIST
52297: LIST
52298: PUSH
52299: LD_INT 3
52301: NEG
52302: PUSH
52303: LD_INT 1
52305: PUSH
52306: EMPTY
52307: LIST
52308: LIST
52309: PUSH
52310: LD_INT 4
52312: NEG
52313: PUSH
52314: LD_INT 0
52316: PUSH
52317: EMPTY
52318: LIST
52319: LIST
52320: PUSH
52321: LD_INT 4
52323: NEG
52324: PUSH
52325: LD_INT 1
52327: NEG
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 4
52335: NEG
52336: PUSH
52337: LD_INT 2
52339: NEG
52340: PUSH
52341: EMPTY
52342: LIST
52343: LIST
52344: PUSH
52345: LD_INT 2
52347: NEG
52348: PUSH
52349: LD_INT 2
52351: PUSH
52352: EMPTY
52353: LIST
52354: LIST
52355: PUSH
52356: LD_INT 4
52358: NEG
52359: PUSH
52360: LD_INT 4
52362: NEG
52363: PUSH
52364: EMPTY
52365: LIST
52366: LIST
52367: PUSH
52368: LD_INT 4
52370: NEG
52371: PUSH
52372: LD_INT 5
52374: NEG
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: PUSH
52380: LD_INT 3
52382: NEG
52383: PUSH
52384: LD_INT 4
52386: NEG
52387: PUSH
52388: EMPTY
52389: LIST
52390: LIST
52391: PUSH
52392: LD_INT 3
52394: NEG
52395: PUSH
52396: LD_INT 3
52398: NEG
52399: PUSH
52400: EMPTY
52401: LIST
52402: LIST
52403: PUSH
52404: LD_INT 4
52406: NEG
52407: PUSH
52408: LD_INT 3
52410: NEG
52411: PUSH
52412: EMPTY
52413: LIST
52414: LIST
52415: PUSH
52416: LD_INT 5
52418: NEG
52419: PUSH
52420: LD_INT 4
52422: NEG
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 5
52430: NEG
52431: PUSH
52432: LD_INT 5
52434: NEG
52435: PUSH
52436: EMPTY
52437: LIST
52438: LIST
52439: PUSH
52440: LD_INT 3
52442: NEG
52443: PUSH
52444: LD_INT 5
52446: NEG
52447: PUSH
52448: EMPTY
52449: LIST
52450: LIST
52451: PUSH
52452: LD_INT 5
52454: NEG
52455: PUSH
52456: LD_INT 3
52458: NEG
52459: PUSH
52460: EMPTY
52461: LIST
52462: LIST
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: LIST
52468: LIST
52469: LIST
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
52511: LD_ADDR_VAR 0 30
52515: PUSH
52516: LD_INT 4
52518: PUSH
52519: LD_INT 4
52521: PUSH
52522: EMPTY
52523: LIST
52524: LIST
52525: PUSH
52526: LD_INT 4
52528: PUSH
52529: LD_INT 3
52531: PUSH
52532: EMPTY
52533: LIST
52534: LIST
52535: PUSH
52536: LD_INT 5
52538: PUSH
52539: LD_INT 4
52541: PUSH
52542: EMPTY
52543: LIST
52544: LIST
52545: PUSH
52546: LD_INT 5
52548: PUSH
52549: LD_INT 5
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 4
52558: PUSH
52559: LD_INT 5
52561: PUSH
52562: EMPTY
52563: LIST
52564: LIST
52565: PUSH
52566: LD_INT 3
52568: PUSH
52569: LD_INT 4
52571: PUSH
52572: EMPTY
52573: LIST
52574: LIST
52575: PUSH
52576: LD_INT 3
52578: PUSH
52579: LD_INT 3
52581: PUSH
52582: EMPTY
52583: LIST
52584: LIST
52585: PUSH
52586: LD_INT 5
52588: PUSH
52589: LD_INT 3
52591: PUSH
52592: EMPTY
52593: LIST
52594: LIST
52595: PUSH
52596: LD_INT 3
52598: PUSH
52599: LD_INT 5
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 0
52608: PUSH
52609: LD_INT 3
52611: PUSH
52612: EMPTY
52613: LIST
52614: LIST
52615: PUSH
52616: LD_INT 0
52618: PUSH
52619: LD_INT 2
52621: PUSH
52622: EMPTY
52623: LIST
52624: LIST
52625: PUSH
52626: LD_INT 1
52628: PUSH
52629: LD_INT 3
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 1
52638: PUSH
52639: LD_INT 4
52641: PUSH
52642: EMPTY
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 0
52648: PUSH
52649: LD_INT 4
52651: PUSH
52652: EMPTY
52653: LIST
52654: LIST
52655: PUSH
52656: LD_INT 1
52658: NEG
52659: PUSH
52660: LD_INT 3
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: PUSH
52667: LD_INT 1
52669: NEG
52670: PUSH
52671: LD_INT 2
52673: PUSH
52674: EMPTY
52675: LIST
52676: LIST
52677: PUSH
52678: LD_INT 2
52680: PUSH
52681: LD_INT 4
52683: PUSH
52684: EMPTY
52685: LIST
52686: LIST
52687: PUSH
52688: LD_INT 2
52690: NEG
52691: PUSH
52692: LD_INT 2
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 4
52701: NEG
52702: PUSH
52703: LD_INT 0
52705: PUSH
52706: EMPTY
52707: LIST
52708: LIST
52709: PUSH
52710: LD_INT 4
52712: NEG
52713: PUSH
52714: LD_INT 1
52716: NEG
52717: PUSH
52718: EMPTY
52719: LIST
52720: LIST
52721: PUSH
52722: LD_INT 3
52724: NEG
52725: PUSH
52726: LD_INT 0
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 3
52735: NEG
52736: PUSH
52737: LD_INT 1
52739: PUSH
52740: EMPTY
52741: LIST
52742: LIST
52743: PUSH
52744: LD_INT 4
52746: NEG
52747: PUSH
52748: LD_INT 1
52750: PUSH
52751: EMPTY
52752: LIST
52753: LIST
52754: PUSH
52755: LD_INT 5
52757: NEG
52758: PUSH
52759: LD_INT 0
52761: PUSH
52762: EMPTY
52763: LIST
52764: LIST
52765: PUSH
52766: LD_INT 5
52768: NEG
52769: PUSH
52770: LD_INT 1
52772: NEG
52773: PUSH
52774: EMPTY
52775: LIST
52776: LIST
52777: PUSH
52778: LD_INT 5
52780: NEG
52781: PUSH
52782: LD_INT 2
52784: NEG
52785: PUSH
52786: EMPTY
52787: LIST
52788: LIST
52789: PUSH
52790: LD_INT 3
52792: NEG
52793: PUSH
52794: LD_INT 2
52796: PUSH
52797: EMPTY
52798: LIST
52799: LIST
52800: PUSH
52801: LD_INT 3
52803: NEG
52804: PUSH
52805: LD_INT 3
52807: NEG
52808: PUSH
52809: EMPTY
52810: LIST
52811: LIST
52812: PUSH
52813: LD_INT 3
52815: NEG
52816: PUSH
52817: LD_INT 4
52819: NEG
52820: PUSH
52821: EMPTY
52822: LIST
52823: LIST
52824: PUSH
52825: LD_INT 2
52827: NEG
52828: PUSH
52829: LD_INT 3
52831: NEG
52832: PUSH
52833: EMPTY
52834: LIST
52835: LIST
52836: PUSH
52837: LD_INT 2
52839: NEG
52840: PUSH
52841: LD_INT 2
52843: NEG
52844: PUSH
52845: EMPTY
52846: LIST
52847: LIST
52848: PUSH
52849: LD_INT 3
52851: NEG
52852: PUSH
52853: LD_INT 2
52855: NEG
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 4
52863: NEG
52864: PUSH
52865: LD_INT 3
52867: NEG
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 4
52875: NEG
52876: PUSH
52877: LD_INT 4
52879: NEG
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 2
52887: NEG
52888: PUSH
52889: LD_INT 4
52891: NEG
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 4
52899: NEG
52900: PUSH
52901: LD_INT 2
52903: NEG
52904: PUSH
52905: EMPTY
52906: LIST
52907: LIST
52908: PUSH
52909: LD_INT 0
52911: PUSH
52912: LD_INT 4
52914: NEG
52915: PUSH
52916: EMPTY
52917: LIST
52918: LIST
52919: PUSH
52920: LD_INT 0
52922: PUSH
52923: LD_INT 5
52925: NEG
52926: PUSH
52927: EMPTY
52928: LIST
52929: LIST
52930: PUSH
52931: LD_INT 1
52933: PUSH
52934: LD_INT 4
52936: NEG
52937: PUSH
52938: EMPTY
52939: LIST
52940: LIST
52941: PUSH
52942: LD_INT 1
52944: PUSH
52945: LD_INT 3
52947: NEG
52948: PUSH
52949: EMPTY
52950: LIST
52951: LIST
52952: PUSH
52953: LD_INT 0
52955: PUSH
52956: LD_INT 3
52958: NEG
52959: PUSH
52960: EMPTY
52961: LIST
52962: LIST
52963: PUSH
52964: LD_INT 1
52966: NEG
52967: PUSH
52968: LD_INT 4
52970: NEG
52971: PUSH
52972: EMPTY
52973: LIST
52974: LIST
52975: PUSH
52976: LD_INT 1
52978: NEG
52979: PUSH
52980: LD_INT 5
52982: NEG
52983: PUSH
52984: EMPTY
52985: LIST
52986: LIST
52987: PUSH
52988: LD_INT 2
52990: PUSH
52991: LD_INT 3
52993: NEG
52994: PUSH
52995: EMPTY
52996: LIST
52997: LIST
52998: PUSH
52999: LD_INT 2
53001: NEG
53002: PUSH
53003: LD_INT 5
53005: NEG
53006: PUSH
53007: EMPTY
53008: LIST
53009: LIST
53010: PUSH
53011: EMPTY
53012: LIST
53013: LIST
53014: LIST
53015: LIST
53016: LIST
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
53058: LD_ADDR_VAR 0 31
53062: PUSH
53063: LD_INT 0
53065: PUSH
53066: LD_INT 4
53068: PUSH
53069: EMPTY
53070: LIST
53071: LIST
53072: PUSH
53073: LD_INT 0
53075: PUSH
53076: LD_INT 3
53078: PUSH
53079: EMPTY
53080: LIST
53081: LIST
53082: PUSH
53083: LD_INT 1
53085: PUSH
53086: LD_INT 4
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 1
53095: PUSH
53096: LD_INT 5
53098: PUSH
53099: EMPTY
53100: LIST
53101: LIST
53102: PUSH
53103: LD_INT 0
53105: PUSH
53106: LD_INT 5
53108: PUSH
53109: EMPTY
53110: LIST
53111: LIST
53112: PUSH
53113: LD_INT 1
53115: NEG
53116: PUSH
53117: LD_INT 4
53119: PUSH
53120: EMPTY
53121: LIST
53122: LIST
53123: PUSH
53124: LD_INT 1
53126: NEG
53127: PUSH
53128: LD_INT 3
53130: PUSH
53131: EMPTY
53132: LIST
53133: LIST
53134: PUSH
53135: LD_INT 2
53137: PUSH
53138: LD_INT 5
53140: PUSH
53141: EMPTY
53142: LIST
53143: LIST
53144: PUSH
53145: LD_INT 2
53147: NEG
53148: PUSH
53149: LD_INT 3
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 3
53158: NEG
53159: PUSH
53160: LD_INT 0
53162: PUSH
53163: EMPTY
53164: LIST
53165: LIST
53166: PUSH
53167: LD_INT 3
53169: NEG
53170: PUSH
53171: LD_INT 1
53173: NEG
53174: PUSH
53175: EMPTY
53176: LIST
53177: LIST
53178: PUSH
53179: LD_INT 2
53181: NEG
53182: PUSH
53183: LD_INT 0
53185: PUSH
53186: EMPTY
53187: LIST
53188: LIST
53189: PUSH
53190: LD_INT 2
53192: NEG
53193: PUSH
53194: LD_INT 1
53196: PUSH
53197: EMPTY
53198: LIST
53199: LIST
53200: PUSH
53201: LD_INT 3
53203: NEG
53204: PUSH
53205: LD_INT 1
53207: PUSH
53208: EMPTY
53209: LIST
53210: LIST
53211: PUSH
53212: LD_INT 4
53214: NEG
53215: PUSH
53216: LD_INT 0
53218: PUSH
53219: EMPTY
53220: LIST
53221: LIST
53222: PUSH
53223: LD_INT 4
53225: NEG
53226: PUSH
53227: LD_INT 1
53229: NEG
53230: PUSH
53231: EMPTY
53232: LIST
53233: LIST
53234: PUSH
53235: LD_INT 4
53237: NEG
53238: PUSH
53239: LD_INT 2
53241: NEG
53242: PUSH
53243: EMPTY
53244: LIST
53245: LIST
53246: PUSH
53247: LD_INT 2
53249: NEG
53250: PUSH
53251: LD_INT 2
53253: PUSH
53254: EMPTY
53255: LIST
53256: LIST
53257: PUSH
53258: LD_INT 4
53260: NEG
53261: PUSH
53262: LD_INT 4
53264: NEG
53265: PUSH
53266: EMPTY
53267: LIST
53268: LIST
53269: PUSH
53270: LD_INT 4
53272: NEG
53273: PUSH
53274: LD_INT 5
53276: NEG
53277: PUSH
53278: EMPTY
53279: LIST
53280: LIST
53281: PUSH
53282: LD_INT 3
53284: NEG
53285: PUSH
53286: LD_INT 4
53288: NEG
53289: PUSH
53290: EMPTY
53291: LIST
53292: LIST
53293: PUSH
53294: LD_INT 3
53296: NEG
53297: PUSH
53298: LD_INT 3
53300: NEG
53301: PUSH
53302: EMPTY
53303: LIST
53304: LIST
53305: PUSH
53306: LD_INT 4
53308: NEG
53309: PUSH
53310: LD_INT 3
53312: NEG
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 5
53320: NEG
53321: PUSH
53322: LD_INT 4
53324: NEG
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 5
53332: NEG
53333: PUSH
53334: LD_INT 5
53336: NEG
53337: PUSH
53338: EMPTY
53339: LIST
53340: LIST
53341: PUSH
53342: LD_INT 3
53344: NEG
53345: PUSH
53346: LD_INT 5
53348: NEG
53349: PUSH
53350: EMPTY
53351: LIST
53352: LIST
53353: PUSH
53354: LD_INT 5
53356: NEG
53357: PUSH
53358: LD_INT 3
53360: NEG
53361: PUSH
53362: EMPTY
53363: LIST
53364: LIST
53365: PUSH
53366: LD_INT 0
53368: PUSH
53369: LD_INT 3
53371: NEG
53372: PUSH
53373: EMPTY
53374: LIST
53375: LIST
53376: PUSH
53377: LD_INT 0
53379: PUSH
53380: LD_INT 4
53382: NEG
53383: PUSH
53384: EMPTY
53385: LIST
53386: LIST
53387: PUSH
53388: LD_INT 1
53390: PUSH
53391: LD_INT 3
53393: NEG
53394: PUSH
53395: EMPTY
53396: LIST
53397: LIST
53398: PUSH
53399: LD_INT 1
53401: PUSH
53402: LD_INT 2
53404: NEG
53405: PUSH
53406: EMPTY
53407: LIST
53408: LIST
53409: PUSH
53410: LD_INT 0
53412: PUSH
53413: LD_INT 2
53415: NEG
53416: PUSH
53417: EMPTY
53418: LIST
53419: LIST
53420: PUSH
53421: LD_INT 1
53423: NEG
53424: PUSH
53425: LD_INT 3
53427: NEG
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_INT 1
53435: NEG
53436: PUSH
53437: LD_INT 4
53439: NEG
53440: PUSH
53441: EMPTY
53442: LIST
53443: LIST
53444: PUSH
53445: LD_INT 2
53447: PUSH
53448: LD_INT 2
53450: NEG
53451: PUSH
53452: EMPTY
53453: LIST
53454: LIST
53455: PUSH
53456: LD_INT 2
53458: NEG
53459: PUSH
53460: LD_INT 4
53462: NEG
53463: PUSH
53464: EMPTY
53465: LIST
53466: LIST
53467: PUSH
53468: LD_INT 4
53470: PUSH
53471: LD_INT 0
53473: PUSH
53474: EMPTY
53475: LIST
53476: LIST
53477: PUSH
53478: LD_INT 4
53480: PUSH
53481: LD_INT 1
53483: NEG
53484: PUSH
53485: EMPTY
53486: LIST
53487: LIST
53488: PUSH
53489: LD_INT 5
53491: PUSH
53492: LD_INT 0
53494: PUSH
53495: EMPTY
53496: LIST
53497: LIST
53498: PUSH
53499: LD_INT 5
53501: PUSH
53502: LD_INT 1
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 4
53511: PUSH
53512: LD_INT 1
53514: PUSH
53515: EMPTY
53516: LIST
53517: LIST
53518: PUSH
53519: LD_INT 3
53521: PUSH
53522: LD_INT 0
53524: PUSH
53525: EMPTY
53526: LIST
53527: LIST
53528: PUSH
53529: LD_INT 3
53531: PUSH
53532: LD_INT 1
53534: NEG
53535: PUSH
53536: EMPTY
53537: LIST
53538: LIST
53539: PUSH
53540: LD_INT 3
53542: PUSH
53543: LD_INT 2
53545: NEG
53546: PUSH
53547: EMPTY
53548: LIST
53549: LIST
53550: PUSH
53551: LD_INT 5
53553: PUSH
53554: LD_INT 2
53556: PUSH
53557: EMPTY
53558: LIST
53559: LIST
53560: PUSH
53561: EMPTY
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
53608: LD_ADDR_VAR 0 32
53612: PUSH
53613: LD_INT 4
53615: NEG
53616: PUSH
53617: LD_INT 0
53619: PUSH
53620: EMPTY
53621: LIST
53622: LIST
53623: PUSH
53624: LD_INT 4
53626: NEG
53627: PUSH
53628: LD_INT 1
53630: NEG
53631: PUSH
53632: EMPTY
53633: LIST
53634: LIST
53635: PUSH
53636: LD_INT 3
53638: NEG
53639: PUSH
53640: LD_INT 0
53642: PUSH
53643: EMPTY
53644: LIST
53645: LIST
53646: PUSH
53647: LD_INT 3
53649: NEG
53650: PUSH
53651: LD_INT 1
53653: PUSH
53654: EMPTY
53655: LIST
53656: LIST
53657: PUSH
53658: LD_INT 4
53660: NEG
53661: PUSH
53662: LD_INT 1
53664: PUSH
53665: EMPTY
53666: LIST
53667: LIST
53668: PUSH
53669: LD_INT 5
53671: NEG
53672: PUSH
53673: LD_INT 0
53675: PUSH
53676: EMPTY
53677: LIST
53678: LIST
53679: PUSH
53680: LD_INT 5
53682: NEG
53683: PUSH
53684: LD_INT 1
53686: NEG
53687: PUSH
53688: EMPTY
53689: LIST
53690: LIST
53691: PUSH
53692: LD_INT 5
53694: NEG
53695: PUSH
53696: LD_INT 2
53698: NEG
53699: PUSH
53700: EMPTY
53701: LIST
53702: LIST
53703: PUSH
53704: LD_INT 3
53706: NEG
53707: PUSH
53708: LD_INT 2
53710: PUSH
53711: EMPTY
53712: LIST
53713: LIST
53714: PUSH
53715: LD_INT 3
53717: NEG
53718: PUSH
53719: LD_INT 3
53721: NEG
53722: PUSH
53723: EMPTY
53724: LIST
53725: LIST
53726: PUSH
53727: LD_INT 3
53729: NEG
53730: PUSH
53731: LD_INT 4
53733: NEG
53734: PUSH
53735: EMPTY
53736: LIST
53737: LIST
53738: PUSH
53739: LD_INT 2
53741: NEG
53742: PUSH
53743: LD_INT 3
53745: NEG
53746: PUSH
53747: EMPTY
53748: LIST
53749: LIST
53750: PUSH
53751: LD_INT 2
53753: NEG
53754: PUSH
53755: LD_INT 2
53757: NEG
53758: PUSH
53759: EMPTY
53760: LIST
53761: LIST
53762: PUSH
53763: LD_INT 3
53765: NEG
53766: PUSH
53767: LD_INT 2
53769: NEG
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 4
53777: NEG
53778: PUSH
53779: LD_INT 3
53781: NEG
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 4
53789: NEG
53790: PUSH
53791: LD_INT 4
53793: NEG
53794: PUSH
53795: EMPTY
53796: LIST
53797: LIST
53798: PUSH
53799: LD_INT 2
53801: NEG
53802: PUSH
53803: LD_INT 4
53805: NEG
53806: PUSH
53807: EMPTY
53808: LIST
53809: LIST
53810: PUSH
53811: LD_INT 4
53813: NEG
53814: PUSH
53815: LD_INT 2
53817: NEG
53818: PUSH
53819: EMPTY
53820: LIST
53821: LIST
53822: PUSH
53823: LD_INT 0
53825: PUSH
53826: LD_INT 4
53828: NEG
53829: PUSH
53830: EMPTY
53831: LIST
53832: LIST
53833: PUSH
53834: LD_INT 0
53836: PUSH
53837: LD_INT 5
53839: NEG
53840: PUSH
53841: EMPTY
53842: LIST
53843: LIST
53844: PUSH
53845: LD_INT 1
53847: PUSH
53848: LD_INT 4
53850: NEG
53851: PUSH
53852: EMPTY
53853: LIST
53854: LIST
53855: PUSH
53856: LD_INT 1
53858: PUSH
53859: LD_INT 3
53861: NEG
53862: PUSH
53863: EMPTY
53864: LIST
53865: LIST
53866: PUSH
53867: LD_INT 0
53869: PUSH
53870: LD_INT 3
53872: NEG
53873: PUSH
53874: EMPTY
53875: LIST
53876: LIST
53877: PUSH
53878: LD_INT 1
53880: NEG
53881: PUSH
53882: LD_INT 4
53884: NEG
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 1
53892: NEG
53893: PUSH
53894: LD_INT 5
53896: NEG
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 2
53904: PUSH
53905: LD_INT 3
53907: NEG
53908: PUSH
53909: EMPTY
53910: LIST
53911: LIST
53912: PUSH
53913: LD_INT 2
53915: NEG
53916: PUSH
53917: LD_INT 5
53919: NEG
53920: PUSH
53921: EMPTY
53922: LIST
53923: LIST
53924: PUSH
53925: LD_INT 3
53927: PUSH
53928: LD_INT 0
53930: PUSH
53931: EMPTY
53932: LIST
53933: LIST
53934: PUSH
53935: LD_INT 3
53937: PUSH
53938: LD_INT 1
53940: NEG
53941: PUSH
53942: EMPTY
53943: LIST
53944: LIST
53945: PUSH
53946: LD_INT 4
53948: PUSH
53949: LD_INT 0
53951: PUSH
53952: EMPTY
53953: LIST
53954: LIST
53955: PUSH
53956: LD_INT 4
53958: PUSH
53959: LD_INT 1
53961: PUSH
53962: EMPTY
53963: LIST
53964: LIST
53965: PUSH
53966: LD_INT 3
53968: PUSH
53969: LD_INT 1
53971: PUSH
53972: EMPTY
53973: LIST
53974: LIST
53975: PUSH
53976: LD_INT 2
53978: PUSH
53979: LD_INT 0
53981: PUSH
53982: EMPTY
53983: LIST
53984: LIST
53985: PUSH
53986: LD_INT 2
53988: PUSH
53989: LD_INT 1
53991: NEG
53992: PUSH
53993: EMPTY
53994: LIST
53995: LIST
53996: PUSH
53997: LD_INT 2
53999: PUSH
54000: LD_INT 2
54002: NEG
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 4
54010: PUSH
54011: LD_INT 2
54013: PUSH
54014: EMPTY
54015: LIST
54016: LIST
54017: PUSH
54018: LD_INT 4
54020: PUSH
54021: LD_INT 4
54023: PUSH
54024: EMPTY
54025: LIST
54026: LIST
54027: PUSH
54028: LD_INT 4
54030: PUSH
54031: LD_INT 3
54033: PUSH
54034: EMPTY
54035: LIST
54036: LIST
54037: PUSH
54038: LD_INT 5
54040: PUSH
54041: LD_INT 4
54043: PUSH
54044: EMPTY
54045: LIST
54046: LIST
54047: PUSH
54048: LD_INT 5
54050: PUSH
54051: LD_INT 5
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 4
54060: PUSH
54061: LD_INT 5
54063: PUSH
54064: EMPTY
54065: LIST
54066: LIST
54067: PUSH
54068: LD_INT 3
54070: PUSH
54071: LD_INT 4
54073: PUSH
54074: EMPTY
54075: LIST
54076: LIST
54077: PUSH
54078: LD_INT 3
54080: PUSH
54081: LD_INT 3
54083: PUSH
54084: EMPTY
54085: LIST
54086: LIST
54087: PUSH
54088: LD_INT 5
54090: PUSH
54091: LD_INT 3
54093: PUSH
54094: EMPTY
54095: LIST
54096: LIST
54097: PUSH
54098: LD_INT 3
54100: PUSH
54101: LD_INT 5
54103: PUSH
54104: EMPTY
54105: LIST
54106: LIST
54107: PUSH
54108: EMPTY
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
54155: LD_ADDR_VAR 0 33
54159: PUSH
54160: LD_INT 4
54162: NEG
54163: PUSH
54164: LD_INT 4
54166: NEG
54167: PUSH
54168: EMPTY
54169: LIST
54170: LIST
54171: PUSH
54172: LD_INT 4
54174: NEG
54175: PUSH
54176: LD_INT 5
54178: NEG
54179: PUSH
54180: EMPTY
54181: LIST
54182: LIST
54183: PUSH
54184: LD_INT 3
54186: NEG
54187: PUSH
54188: LD_INT 4
54190: NEG
54191: PUSH
54192: EMPTY
54193: LIST
54194: LIST
54195: PUSH
54196: LD_INT 3
54198: NEG
54199: PUSH
54200: LD_INT 3
54202: NEG
54203: PUSH
54204: EMPTY
54205: LIST
54206: LIST
54207: PUSH
54208: LD_INT 4
54210: NEG
54211: PUSH
54212: LD_INT 3
54214: NEG
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 5
54222: NEG
54223: PUSH
54224: LD_INT 4
54226: NEG
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 5
54234: NEG
54235: PUSH
54236: LD_INT 5
54238: NEG
54239: PUSH
54240: EMPTY
54241: LIST
54242: LIST
54243: PUSH
54244: LD_INT 3
54246: NEG
54247: PUSH
54248: LD_INT 5
54250: NEG
54251: PUSH
54252: EMPTY
54253: LIST
54254: LIST
54255: PUSH
54256: LD_INT 5
54258: NEG
54259: PUSH
54260: LD_INT 3
54262: NEG
54263: PUSH
54264: EMPTY
54265: LIST
54266: LIST
54267: PUSH
54268: LD_INT 0
54270: PUSH
54271: LD_INT 3
54273: NEG
54274: PUSH
54275: EMPTY
54276: LIST
54277: LIST
54278: PUSH
54279: LD_INT 0
54281: PUSH
54282: LD_INT 4
54284: NEG
54285: PUSH
54286: EMPTY
54287: LIST
54288: LIST
54289: PUSH
54290: LD_INT 1
54292: PUSH
54293: LD_INT 3
54295: NEG
54296: PUSH
54297: EMPTY
54298: LIST
54299: LIST
54300: PUSH
54301: LD_INT 1
54303: PUSH
54304: LD_INT 2
54306: NEG
54307: PUSH
54308: EMPTY
54309: LIST
54310: LIST
54311: PUSH
54312: LD_INT 0
54314: PUSH
54315: LD_INT 2
54317: NEG
54318: PUSH
54319: EMPTY
54320: LIST
54321: LIST
54322: PUSH
54323: LD_INT 1
54325: NEG
54326: PUSH
54327: LD_INT 3
54329: NEG
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 1
54337: NEG
54338: PUSH
54339: LD_INT 4
54341: NEG
54342: PUSH
54343: EMPTY
54344: LIST
54345: LIST
54346: PUSH
54347: LD_INT 2
54349: PUSH
54350: LD_INT 2
54352: NEG
54353: PUSH
54354: EMPTY
54355: LIST
54356: LIST
54357: PUSH
54358: LD_INT 2
54360: NEG
54361: PUSH
54362: LD_INT 4
54364: NEG
54365: PUSH
54366: EMPTY
54367: LIST
54368: LIST
54369: PUSH
54370: LD_INT 4
54372: PUSH
54373: LD_INT 0
54375: PUSH
54376: EMPTY
54377: LIST
54378: LIST
54379: PUSH
54380: LD_INT 4
54382: PUSH
54383: LD_INT 1
54385: NEG
54386: PUSH
54387: EMPTY
54388: LIST
54389: LIST
54390: PUSH
54391: LD_INT 5
54393: PUSH
54394: LD_INT 0
54396: PUSH
54397: EMPTY
54398: LIST
54399: LIST
54400: PUSH
54401: LD_INT 5
54403: PUSH
54404: LD_INT 1
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: PUSH
54411: LD_INT 4
54413: PUSH
54414: LD_INT 1
54416: PUSH
54417: EMPTY
54418: LIST
54419: LIST
54420: PUSH
54421: LD_INT 3
54423: PUSH
54424: LD_INT 0
54426: PUSH
54427: EMPTY
54428: LIST
54429: LIST
54430: PUSH
54431: LD_INT 3
54433: PUSH
54434: LD_INT 1
54436: NEG
54437: PUSH
54438: EMPTY
54439: LIST
54440: LIST
54441: PUSH
54442: LD_INT 3
54444: PUSH
54445: LD_INT 2
54447: NEG
54448: PUSH
54449: EMPTY
54450: LIST
54451: LIST
54452: PUSH
54453: LD_INT 5
54455: PUSH
54456: LD_INT 2
54458: PUSH
54459: EMPTY
54460: LIST
54461: LIST
54462: PUSH
54463: LD_INT 3
54465: PUSH
54466: LD_INT 3
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: PUSH
54473: LD_INT 3
54475: PUSH
54476: LD_INT 2
54478: PUSH
54479: EMPTY
54480: LIST
54481: LIST
54482: PUSH
54483: LD_INT 4
54485: PUSH
54486: LD_INT 3
54488: PUSH
54489: EMPTY
54490: LIST
54491: LIST
54492: PUSH
54493: LD_INT 4
54495: PUSH
54496: LD_INT 4
54498: PUSH
54499: EMPTY
54500: LIST
54501: LIST
54502: PUSH
54503: LD_INT 3
54505: PUSH
54506: LD_INT 4
54508: PUSH
54509: EMPTY
54510: LIST
54511: LIST
54512: PUSH
54513: LD_INT 2
54515: PUSH
54516: LD_INT 3
54518: PUSH
54519: EMPTY
54520: LIST
54521: LIST
54522: PUSH
54523: LD_INT 2
54525: PUSH
54526: LD_INT 2
54528: PUSH
54529: EMPTY
54530: LIST
54531: LIST
54532: PUSH
54533: LD_INT 4
54535: PUSH
54536: LD_INT 2
54538: PUSH
54539: EMPTY
54540: LIST
54541: LIST
54542: PUSH
54543: LD_INT 2
54545: PUSH
54546: LD_INT 4
54548: PUSH
54549: EMPTY
54550: LIST
54551: LIST
54552: PUSH
54553: LD_INT 0
54555: PUSH
54556: LD_INT 4
54558: PUSH
54559: EMPTY
54560: LIST
54561: LIST
54562: PUSH
54563: LD_INT 0
54565: PUSH
54566: LD_INT 3
54568: PUSH
54569: EMPTY
54570: LIST
54571: LIST
54572: PUSH
54573: LD_INT 1
54575: PUSH
54576: LD_INT 4
54578: PUSH
54579: EMPTY
54580: LIST
54581: LIST
54582: PUSH
54583: LD_INT 1
54585: PUSH
54586: LD_INT 5
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 0
54595: PUSH
54596: LD_INT 5
54598: PUSH
54599: EMPTY
54600: LIST
54601: LIST
54602: PUSH
54603: LD_INT 1
54605: NEG
54606: PUSH
54607: LD_INT 4
54609: PUSH
54610: EMPTY
54611: LIST
54612: LIST
54613: PUSH
54614: LD_INT 1
54616: NEG
54617: PUSH
54618: LD_INT 3
54620: PUSH
54621: EMPTY
54622: LIST
54623: LIST
54624: PUSH
54625: LD_INT 2
54627: PUSH
54628: LD_INT 5
54630: PUSH
54631: EMPTY
54632: LIST
54633: LIST
54634: PUSH
54635: LD_INT 2
54637: NEG
54638: PUSH
54639: LD_INT 3
54641: PUSH
54642: EMPTY
54643: LIST
54644: LIST
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: LIST
54650: LIST
54651: LIST
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
54693: LD_ADDR_VAR 0 34
54697: PUSH
54698: LD_INT 0
54700: PUSH
54701: LD_INT 4
54703: NEG
54704: PUSH
54705: EMPTY
54706: LIST
54707: LIST
54708: PUSH
54709: LD_INT 0
54711: PUSH
54712: LD_INT 5
54714: NEG
54715: PUSH
54716: EMPTY
54717: LIST
54718: LIST
54719: PUSH
54720: LD_INT 1
54722: PUSH
54723: LD_INT 4
54725: NEG
54726: PUSH
54727: EMPTY
54728: LIST
54729: LIST
54730: PUSH
54731: LD_INT 1
54733: PUSH
54734: LD_INT 3
54736: NEG
54737: PUSH
54738: EMPTY
54739: LIST
54740: LIST
54741: PUSH
54742: LD_INT 0
54744: PUSH
54745: LD_INT 3
54747: NEG
54748: PUSH
54749: EMPTY
54750: LIST
54751: LIST
54752: PUSH
54753: LD_INT 1
54755: NEG
54756: PUSH
54757: LD_INT 4
54759: NEG
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 1
54767: NEG
54768: PUSH
54769: LD_INT 5
54771: NEG
54772: PUSH
54773: EMPTY
54774: LIST
54775: LIST
54776: PUSH
54777: LD_INT 2
54779: PUSH
54780: LD_INT 3
54782: NEG
54783: PUSH
54784: EMPTY
54785: LIST
54786: LIST
54787: PUSH
54788: LD_INT 2
54790: NEG
54791: PUSH
54792: LD_INT 5
54794: NEG
54795: PUSH
54796: EMPTY
54797: LIST
54798: LIST
54799: PUSH
54800: LD_INT 3
54802: PUSH
54803: LD_INT 0
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: PUSH
54810: LD_INT 3
54812: PUSH
54813: LD_INT 1
54815: NEG
54816: PUSH
54817: EMPTY
54818: LIST
54819: LIST
54820: PUSH
54821: LD_INT 4
54823: PUSH
54824: LD_INT 0
54826: PUSH
54827: EMPTY
54828: LIST
54829: LIST
54830: PUSH
54831: LD_INT 4
54833: PUSH
54834: LD_INT 1
54836: PUSH
54837: EMPTY
54838: LIST
54839: LIST
54840: PUSH
54841: LD_INT 3
54843: PUSH
54844: LD_INT 1
54846: PUSH
54847: EMPTY
54848: LIST
54849: LIST
54850: PUSH
54851: LD_INT 2
54853: PUSH
54854: LD_INT 0
54856: PUSH
54857: EMPTY
54858: LIST
54859: LIST
54860: PUSH
54861: LD_INT 2
54863: PUSH
54864: LD_INT 1
54866: NEG
54867: PUSH
54868: EMPTY
54869: LIST
54870: LIST
54871: PUSH
54872: LD_INT 2
54874: PUSH
54875: LD_INT 2
54877: NEG
54878: PUSH
54879: EMPTY
54880: LIST
54881: LIST
54882: PUSH
54883: LD_INT 4
54885: PUSH
54886: LD_INT 2
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: PUSH
54893: LD_INT 4
54895: PUSH
54896: LD_INT 4
54898: PUSH
54899: EMPTY
54900: LIST
54901: LIST
54902: PUSH
54903: LD_INT 4
54905: PUSH
54906: LD_INT 3
54908: PUSH
54909: EMPTY
54910: LIST
54911: LIST
54912: PUSH
54913: LD_INT 5
54915: PUSH
54916: LD_INT 4
54918: PUSH
54919: EMPTY
54920: LIST
54921: LIST
54922: PUSH
54923: LD_INT 5
54925: PUSH
54926: LD_INT 5
54928: PUSH
54929: EMPTY
54930: LIST
54931: LIST
54932: PUSH
54933: LD_INT 4
54935: PUSH
54936: LD_INT 5
54938: PUSH
54939: EMPTY
54940: LIST
54941: LIST
54942: PUSH
54943: LD_INT 3
54945: PUSH
54946: LD_INT 4
54948: PUSH
54949: EMPTY
54950: LIST
54951: LIST
54952: PUSH
54953: LD_INT 3
54955: PUSH
54956: LD_INT 3
54958: PUSH
54959: EMPTY
54960: LIST
54961: LIST
54962: PUSH
54963: LD_INT 5
54965: PUSH
54966: LD_INT 3
54968: PUSH
54969: EMPTY
54970: LIST
54971: LIST
54972: PUSH
54973: LD_INT 3
54975: PUSH
54976: LD_INT 5
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 0
54985: PUSH
54986: LD_INT 3
54988: PUSH
54989: EMPTY
54990: LIST
54991: LIST
54992: PUSH
54993: LD_INT 0
54995: PUSH
54996: LD_INT 2
54998: PUSH
54999: EMPTY
55000: LIST
55001: LIST
55002: PUSH
55003: LD_INT 1
55005: PUSH
55006: LD_INT 3
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: PUSH
55013: LD_INT 1
55015: PUSH
55016: LD_INT 4
55018: PUSH
55019: EMPTY
55020: LIST
55021: LIST
55022: PUSH
55023: LD_INT 0
55025: PUSH
55026: LD_INT 4
55028: PUSH
55029: EMPTY
55030: LIST
55031: LIST
55032: PUSH
55033: LD_INT 1
55035: NEG
55036: PUSH
55037: LD_INT 3
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: PUSH
55044: LD_INT 1
55046: NEG
55047: PUSH
55048: LD_INT 2
55050: PUSH
55051: EMPTY
55052: LIST
55053: LIST
55054: PUSH
55055: LD_INT 2
55057: PUSH
55058: LD_INT 4
55060: PUSH
55061: EMPTY
55062: LIST
55063: LIST
55064: PUSH
55065: LD_INT 2
55067: NEG
55068: PUSH
55069: LD_INT 2
55071: PUSH
55072: EMPTY
55073: LIST
55074: LIST
55075: PUSH
55076: LD_INT 4
55078: NEG
55079: PUSH
55080: LD_INT 0
55082: PUSH
55083: EMPTY
55084: LIST
55085: LIST
55086: PUSH
55087: LD_INT 4
55089: NEG
55090: PUSH
55091: LD_INT 1
55093: NEG
55094: PUSH
55095: EMPTY
55096: LIST
55097: LIST
55098: PUSH
55099: LD_INT 3
55101: NEG
55102: PUSH
55103: LD_INT 0
55105: PUSH
55106: EMPTY
55107: LIST
55108: LIST
55109: PUSH
55110: LD_INT 3
55112: NEG
55113: PUSH
55114: LD_INT 1
55116: PUSH
55117: EMPTY
55118: LIST
55119: LIST
55120: PUSH
55121: LD_INT 4
55123: NEG
55124: PUSH
55125: LD_INT 1
55127: PUSH
55128: EMPTY
55129: LIST
55130: LIST
55131: PUSH
55132: LD_INT 5
55134: NEG
55135: PUSH
55136: LD_INT 0
55138: PUSH
55139: EMPTY
55140: LIST
55141: LIST
55142: PUSH
55143: LD_INT 5
55145: NEG
55146: PUSH
55147: LD_INT 1
55149: NEG
55150: PUSH
55151: EMPTY
55152: LIST
55153: LIST
55154: PUSH
55155: LD_INT 5
55157: NEG
55158: PUSH
55159: LD_INT 2
55161: NEG
55162: PUSH
55163: EMPTY
55164: LIST
55165: LIST
55166: PUSH
55167: LD_INT 3
55169: NEG
55170: PUSH
55171: LD_INT 2
55173: PUSH
55174: EMPTY
55175: LIST
55176: LIST
55177: PUSH
55178: EMPTY
55179: LIST
55180: LIST
55181: LIST
55182: LIST
55183: LIST
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: ST_TO_ADDR
// end ; end ;
55225: GO 55228
55227: POP
// case btype of b_depot , b_warehouse :
55228: LD_VAR 0 1
55232: PUSH
55233: LD_INT 0
55235: DOUBLE
55236: EQUAL
55237: IFTRUE 55247
55239: LD_INT 1
55241: DOUBLE
55242: EQUAL
55243: IFTRUE 55247
55245: GO 55448
55247: POP
// case nation of nation_american :
55248: LD_VAR 0 5
55252: PUSH
55253: LD_INT 1
55255: DOUBLE
55256: EQUAL
55257: IFTRUE 55261
55259: GO 55317
55261: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
55262: LD_ADDR_VAR 0 9
55266: PUSH
55267: LD_VAR 0 11
55271: PUSH
55272: LD_VAR 0 12
55276: PUSH
55277: LD_VAR 0 13
55281: PUSH
55282: LD_VAR 0 14
55286: PUSH
55287: LD_VAR 0 15
55291: PUSH
55292: LD_VAR 0 16
55296: PUSH
55297: EMPTY
55298: LIST
55299: LIST
55300: LIST
55301: LIST
55302: LIST
55303: LIST
55304: PUSH
55305: LD_VAR 0 4
55309: PUSH
55310: LD_INT 1
55312: PLUS
55313: ARRAY
55314: ST_TO_ADDR
55315: GO 55446
55317: LD_INT 2
55319: DOUBLE
55320: EQUAL
55321: IFTRUE 55325
55323: GO 55381
55325: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
55326: LD_ADDR_VAR 0 9
55330: PUSH
55331: LD_VAR 0 17
55335: PUSH
55336: LD_VAR 0 18
55340: PUSH
55341: LD_VAR 0 19
55345: PUSH
55346: LD_VAR 0 20
55350: PUSH
55351: LD_VAR 0 21
55355: PUSH
55356: LD_VAR 0 22
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: LIST
55368: PUSH
55369: LD_VAR 0 4
55373: PUSH
55374: LD_INT 1
55376: PLUS
55377: ARRAY
55378: ST_TO_ADDR
55379: GO 55446
55381: LD_INT 3
55383: DOUBLE
55384: EQUAL
55385: IFTRUE 55389
55387: GO 55445
55389: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
55390: LD_ADDR_VAR 0 9
55394: PUSH
55395: LD_VAR 0 23
55399: PUSH
55400: LD_VAR 0 24
55404: PUSH
55405: LD_VAR 0 25
55409: PUSH
55410: LD_VAR 0 26
55414: PUSH
55415: LD_VAR 0 27
55419: PUSH
55420: LD_VAR 0 28
55424: PUSH
55425: EMPTY
55426: LIST
55427: LIST
55428: LIST
55429: LIST
55430: LIST
55431: LIST
55432: PUSH
55433: LD_VAR 0 4
55437: PUSH
55438: LD_INT 1
55440: PLUS
55441: ARRAY
55442: ST_TO_ADDR
55443: GO 55446
55445: POP
55446: GO 56001
55448: LD_INT 2
55450: DOUBLE
55451: EQUAL
55452: IFTRUE 55462
55454: LD_INT 3
55456: DOUBLE
55457: EQUAL
55458: IFTRUE 55462
55460: GO 55518
55462: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
55463: LD_ADDR_VAR 0 9
55467: PUSH
55468: LD_VAR 0 29
55472: PUSH
55473: LD_VAR 0 30
55477: PUSH
55478: LD_VAR 0 31
55482: PUSH
55483: LD_VAR 0 32
55487: PUSH
55488: LD_VAR 0 33
55492: PUSH
55493: LD_VAR 0 34
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: PUSH
55506: LD_VAR 0 4
55510: PUSH
55511: LD_INT 1
55513: PLUS
55514: ARRAY
55515: ST_TO_ADDR
55516: GO 56001
55518: LD_INT 16
55520: DOUBLE
55521: EQUAL
55522: IFTRUE 55580
55524: LD_INT 17
55526: DOUBLE
55527: EQUAL
55528: IFTRUE 55580
55530: LD_INT 18
55532: DOUBLE
55533: EQUAL
55534: IFTRUE 55580
55536: LD_INT 19
55538: DOUBLE
55539: EQUAL
55540: IFTRUE 55580
55542: LD_INT 22
55544: DOUBLE
55545: EQUAL
55546: IFTRUE 55580
55548: LD_INT 20
55550: DOUBLE
55551: EQUAL
55552: IFTRUE 55580
55554: LD_INT 21
55556: DOUBLE
55557: EQUAL
55558: IFTRUE 55580
55560: LD_INT 23
55562: DOUBLE
55563: EQUAL
55564: IFTRUE 55580
55566: LD_INT 24
55568: DOUBLE
55569: EQUAL
55570: IFTRUE 55580
55572: LD_INT 25
55574: DOUBLE
55575: EQUAL
55576: IFTRUE 55580
55578: GO 55636
55580: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
55581: LD_ADDR_VAR 0 9
55585: PUSH
55586: LD_VAR 0 35
55590: PUSH
55591: LD_VAR 0 36
55595: PUSH
55596: LD_VAR 0 37
55600: PUSH
55601: LD_VAR 0 38
55605: PUSH
55606: LD_VAR 0 39
55610: PUSH
55611: LD_VAR 0 40
55615: PUSH
55616: EMPTY
55617: LIST
55618: LIST
55619: LIST
55620: LIST
55621: LIST
55622: LIST
55623: PUSH
55624: LD_VAR 0 4
55628: PUSH
55629: LD_INT 1
55631: PLUS
55632: ARRAY
55633: ST_TO_ADDR
55634: GO 56001
55636: LD_INT 6
55638: DOUBLE
55639: EQUAL
55640: IFTRUE 55692
55642: LD_INT 7
55644: DOUBLE
55645: EQUAL
55646: IFTRUE 55692
55648: LD_INT 8
55650: DOUBLE
55651: EQUAL
55652: IFTRUE 55692
55654: LD_INT 13
55656: DOUBLE
55657: EQUAL
55658: IFTRUE 55692
55660: LD_INT 12
55662: DOUBLE
55663: EQUAL
55664: IFTRUE 55692
55666: LD_INT 15
55668: DOUBLE
55669: EQUAL
55670: IFTRUE 55692
55672: LD_INT 11
55674: DOUBLE
55675: EQUAL
55676: IFTRUE 55692
55678: LD_INT 14
55680: DOUBLE
55681: EQUAL
55682: IFTRUE 55692
55684: LD_INT 10
55686: DOUBLE
55687: EQUAL
55688: IFTRUE 55692
55690: GO 55748
55692: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
55693: LD_ADDR_VAR 0 9
55697: PUSH
55698: LD_VAR 0 41
55702: PUSH
55703: LD_VAR 0 42
55707: PUSH
55708: LD_VAR 0 43
55712: PUSH
55713: LD_VAR 0 44
55717: PUSH
55718: LD_VAR 0 45
55722: PUSH
55723: LD_VAR 0 46
55727: PUSH
55728: EMPTY
55729: LIST
55730: LIST
55731: LIST
55732: LIST
55733: LIST
55734: LIST
55735: PUSH
55736: LD_VAR 0 4
55740: PUSH
55741: LD_INT 1
55743: PLUS
55744: ARRAY
55745: ST_TO_ADDR
55746: GO 56001
55748: LD_INT 36
55750: DOUBLE
55751: EQUAL
55752: IFTRUE 55756
55754: GO 55812
55756: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
55757: LD_ADDR_VAR 0 9
55761: PUSH
55762: LD_VAR 0 47
55766: PUSH
55767: LD_VAR 0 48
55771: PUSH
55772: LD_VAR 0 49
55776: PUSH
55777: LD_VAR 0 50
55781: PUSH
55782: LD_VAR 0 51
55786: PUSH
55787: LD_VAR 0 52
55791: PUSH
55792: EMPTY
55793: LIST
55794: LIST
55795: LIST
55796: LIST
55797: LIST
55798: LIST
55799: PUSH
55800: LD_VAR 0 4
55804: PUSH
55805: LD_INT 1
55807: PLUS
55808: ARRAY
55809: ST_TO_ADDR
55810: GO 56001
55812: LD_INT 4
55814: DOUBLE
55815: EQUAL
55816: IFTRUE 55838
55818: LD_INT 5
55820: DOUBLE
55821: EQUAL
55822: IFTRUE 55838
55824: LD_INT 34
55826: DOUBLE
55827: EQUAL
55828: IFTRUE 55838
55830: LD_INT 37
55832: DOUBLE
55833: EQUAL
55834: IFTRUE 55838
55836: GO 55894
55838: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
55839: LD_ADDR_VAR 0 9
55843: PUSH
55844: LD_VAR 0 53
55848: PUSH
55849: LD_VAR 0 54
55853: PUSH
55854: LD_VAR 0 55
55858: PUSH
55859: LD_VAR 0 56
55863: PUSH
55864: LD_VAR 0 57
55868: PUSH
55869: LD_VAR 0 58
55873: PUSH
55874: EMPTY
55875: LIST
55876: LIST
55877: LIST
55878: LIST
55879: LIST
55880: LIST
55881: PUSH
55882: LD_VAR 0 4
55886: PUSH
55887: LD_INT 1
55889: PLUS
55890: ARRAY
55891: ST_TO_ADDR
55892: GO 56001
55894: LD_INT 31
55896: DOUBLE
55897: EQUAL
55898: IFTRUE 55944
55900: LD_INT 32
55902: DOUBLE
55903: EQUAL
55904: IFTRUE 55944
55906: LD_INT 33
55908: DOUBLE
55909: EQUAL
55910: IFTRUE 55944
55912: LD_INT 27
55914: DOUBLE
55915: EQUAL
55916: IFTRUE 55944
55918: LD_INT 26
55920: DOUBLE
55921: EQUAL
55922: IFTRUE 55944
55924: LD_INT 28
55926: DOUBLE
55927: EQUAL
55928: IFTRUE 55944
55930: LD_INT 29
55932: DOUBLE
55933: EQUAL
55934: IFTRUE 55944
55936: LD_INT 30
55938: DOUBLE
55939: EQUAL
55940: IFTRUE 55944
55942: GO 56000
55944: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
55945: LD_ADDR_VAR 0 9
55949: PUSH
55950: LD_VAR 0 59
55954: PUSH
55955: LD_VAR 0 60
55959: PUSH
55960: LD_VAR 0 61
55964: PUSH
55965: LD_VAR 0 62
55969: PUSH
55970: LD_VAR 0 63
55974: PUSH
55975: LD_VAR 0 64
55979: PUSH
55980: EMPTY
55981: LIST
55982: LIST
55983: LIST
55984: LIST
55985: LIST
55986: LIST
55987: PUSH
55988: LD_VAR 0 4
55992: PUSH
55993: LD_INT 1
55995: PLUS
55996: ARRAY
55997: ST_TO_ADDR
55998: GO 56001
56000: POP
// temp_list2 = [ ] ;
56001: LD_ADDR_VAR 0 10
56005: PUSH
56006: EMPTY
56007: ST_TO_ADDR
// for i in temp_list do
56008: LD_ADDR_VAR 0 8
56012: PUSH
56013: LD_VAR 0 9
56017: PUSH
56018: FOR_IN
56019: IFFALSE 56071
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
56021: LD_ADDR_VAR 0 10
56025: PUSH
56026: LD_VAR 0 10
56030: PUSH
56031: LD_VAR 0 8
56035: PUSH
56036: LD_INT 1
56038: ARRAY
56039: PUSH
56040: LD_VAR 0 2
56044: PLUS
56045: PUSH
56046: LD_VAR 0 8
56050: PUSH
56051: LD_INT 2
56053: ARRAY
56054: PUSH
56055: LD_VAR 0 3
56059: PLUS
56060: PUSH
56061: EMPTY
56062: LIST
56063: LIST
56064: PUSH
56065: EMPTY
56066: LIST
56067: ADD
56068: ST_TO_ADDR
56069: GO 56018
56071: POP
56072: POP
// result = temp_list2 ;
56073: LD_ADDR_VAR 0 7
56077: PUSH
56078: LD_VAR 0 10
56082: ST_TO_ADDR
// end ;
56083: LD_VAR 0 7
56087: RET
// export function EnemyInRange ( unit , dist ) ; begin
56088: LD_INT 0
56090: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
56091: LD_ADDR_VAR 0 3
56095: PUSH
56096: LD_VAR 0 1
56100: PPUSH
56101: CALL_OW 255
56105: PPUSH
56106: LD_VAR 0 1
56110: PPUSH
56111: CALL_OW 250
56115: PPUSH
56116: LD_VAR 0 1
56120: PPUSH
56121: CALL_OW 251
56125: PPUSH
56126: LD_VAR 0 2
56130: PPUSH
56131: CALL 29490 0 4
56135: PUSH
56136: LD_INT 4
56138: ARRAY
56139: ST_TO_ADDR
// end ;
56140: LD_VAR 0 3
56144: RET
// export function PlayerSeeMe ( unit ) ; begin
56145: LD_INT 0
56147: PPUSH
// result := See ( your_side , unit ) ;
56148: LD_ADDR_VAR 0 2
56152: PUSH
56153: LD_OWVAR 2
56157: PPUSH
56158: LD_VAR 0 1
56162: PPUSH
56163: CALL_OW 292
56167: ST_TO_ADDR
// end ;
56168: LD_VAR 0 2
56172: RET
// export function ReverseDir ( unit ) ; begin
56173: LD_INT 0
56175: PPUSH
// if not unit then
56176: LD_VAR 0 1
56180: NOT
56181: IFFALSE 56185
// exit ;
56183: GO 56208
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
56185: LD_ADDR_VAR 0 2
56189: PUSH
56190: LD_VAR 0 1
56194: PPUSH
56195: CALL_OW 254
56199: PUSH
56200: LD_INT 3
56202: PLUS
56203: PUSH
56204: LD_INT 6
56206: MOD
56207: ST_TO_ADDR
// end ;
56208: LD_VAR 0 2
56212: RET
// export function ReverseArray ( array ) ; var i ; begin
56213: LD_INT 0
56215: PPUSH
56216: PPUSH
// if not array then
56217: LD_VAR 0 1
56221: NOT
56222: IFFALSE 56226
// exit ;
56224: GO 56281
// result := [ ] ;
56226: LD_ADDR_VAR 0 2
56230: PUSH
56231: EMPTY
56232: ST_TO_ADDR
// for i := array downto 1 do
56233: LD_ADDR_VAR 0 3
56237: PUSH
56238: DOUBLE
56239: LD_VAR 0 1
56243: INC
56244: ST_TO_ADDR
56245: LD_INT 1
56247: PUSH
56248: FOR_DOWNTO
56249: IFFALSE 56279
// result := Join ( result , array [ i ] ) ;
56251: LD_ADDR_VAR 0 2
56255: PUSH
56256: LD_VAR 0 2
56260: PPUSH
56261: LD_VAR 0 1
56265: PUSH
56266: LD_VAR 0 3
56270: ARRAY
56271: PPUSH
56272: CALL 60925 0 2
56276: ST_TO_ADDR
56277: GO 56248
56279: POP
56280: POP
// end ;
56281: LD_VAR 0 2
56285: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
56286: LD_INT 0
56288: PPUSH
56289: PPUSH
56290: PPUSH
56291: PPUSH
56292: PPUSH
56293: PPUSH
// if not unit or not hexes then
56294: LD_VAR 0 1
56298: NOT
56299: PUSH
56300: LD_VAR 0 2
56304: NOT
56305: OR
56306: IFFALSE 56310
// exit ;
56308: GO 56433
// dist := 9999 ;
56310: LD_ADDR_VAR 0 5
56314: PUSH
56315: LD_INT 9999
56317: ST_TO_ADDR
// for i = 1 to hexes do
56318: LD_ADDR_VAR 0 4
56322: PUSH
56323: DOUBLE
56324: LD_INT 1
56326: DEC
56327: ST_TO_ADDR
56328: LD_VAR 0 2
56332: PUSH
56333: FOR_TO
56334: IFFALSE 56421
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56336: LD_ADDR_VAR 0 6
56340: PUSH
56341: LD_VAR 0 1
56345: PPUSH
56346: LD_VAR 0 2
56350: PUSH
56351: LD_VAR 0 4
56355: ARRAY
56356: PUSH
56357: LD_INT 1
56359: ARRAY
56360: PPUSH
56361: LD_VAR 0 2
56365: PUSH
56366: LD_VAR 0 4
56370: ARRAY
56371: PUSH
56372: LD_INT 2
56374: ARRAY
56375: PPUSH
56376: CALL_OW 297
56380: ST_TO_ADDR
// if tdist < dist then
56381: LD_VAR 0 6
56385: PUSH
56386: LD_VAR 0 5
56390: LESS
56391: IFFALSE 56419
// begin hex := hexes [ i ] ;
56393: LD_ADDR_VAR 0 8
56397: PUSH
56398: LD_VAR 0 2
56402: PUSH
56403: LD_VAR 0 4
56407: ARRAY
56408: ST_TO_ADDR
// dist := tdist ;
56409: LD_ADDR_VAR 0 5
56413: PUSH
56414: LD_VAR 0 6
56418: ST_TO_ADDR
// end ; end ;
56419: GO 56333
56421: POP
56422: POP
// result := hex ;
56423: LD_ADDR_VAR 0 3
56427: PUSH
56428: LD_VAR 0 8
56432: ST_TO_ADDR
// end ;
56433: LD_VAR 0 3
56437: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
56438: LD_INT 0
56440: PPUSH
56441: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
56442: LD_VAR 0 1
56446: NOT
56447: PUSH
56448: LD_VAR 0 1
56452: PUSH
56453: LD_INT 21
56455: PUSH
56456: LD_INT 2
56458: PUSH
56459: EMPTY
56460: LIST
56461: LIST
56462: PUSH
56463: LD_INT 23
56465: PUSH
56466: LD_INT 2
56468: PUSH
56469: EMPTY
56470: LIST
56471: LIST
56472: PUSH
56473: EMPTY
56474: LIST
56475: LIST
56476: PPUSH
56477: CALL_OW 69
56481: IN
56482: NOT
56483: OR
56484: IFFALSE 56488
// exit ;
56486: GO 56535
// for i = 1 to 3 do
56488: LD_ADDR_VAR 0 3
56492: PUSH
56493: DOUBLE
56494: LD_INT 1
56496: DEC
56497: ST_TO_ADDR
56498: LD_INT 3
56500: PUSH
56501: FOR_TO
56502: IFFALSE 56533
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
56504: LD_VAR 0 1
56508: PPUSH
56509: CALL_OW 250
56513: PPUSH
56514: LD_VAR 0 1
56518: PPUSH
56519: CALL_OW 251
56523: PPUSH
56524: LD_INT 1
56526: PPUSH
56527: CALL_OW 453
56531: GO 56501
56533: POP
56534: POP
// end ;
56535: LD_VAR 0 2
56539: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
56540: LD_INT 0
56542: PPUSH
56543: PPUSH
56544: PPUSH
56545: PPUSH
56546: PPUSH
56547: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
56548: LD_VAR 0 1
56552: NOT
56553: PUSH
56554: LD_VAR 0 2
56558: NOT
56559: OR
56560: PUSH
56561: LD_VAR 0 1
56565: PPUSH
56566: CALL_OW 314
56570: OR
56571: IFFALSE 56575
// exit ;
56573: GO 57042
// if GetLives ( i ) < 250 then
56575: LD_VAR 0 4
56579: PPUSH
56580: CALL_OW 256
56584: PUSH
56585: LD_INT 250
56587: LESS
56588: IFFALSE 56601
// begin ComAutodestruct ( i ) ;
56590: LD_VAR 0 4
56594: PPUSH
56595: CALL 56438 0 1
// exit ;
56599: GO 57042
// end ; x := GetX ( enemy_unit ) ;
56601: LD_ADDR_VAR 0 7
56605: PUSH
56606: LD_VAR 0 2
56610: PPUSH
56611: CALL_OW 250
56615: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
56616: LD_ADDR_VAR 0 8
56620: PUSH
56621: LD_VAR 0 2
56625: PPUSH
56626: CALL_OW 251
56630: ST_TO_ADDR
// if not x or not y then
56631: LD_VAR 0 7
56635: NOT
56636: PUSH
56637: LD_VAR 0 8
56641: NOT
56642: OR
56643: IFFALSE 56647
// exit ;
56645: GO 57042
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
56647: LD_ADDR_VAR 0 6
56651: PUSH
56652: LD_VAR 0 7
56656: PPUSH
56657: LD_INT 0
56659: PPUSH
56660: LD_INT 4
56662: PPUSH
56663: CALL_OW 272
56667: PUSH
56668: LD_VAR 0 8
56672: PPUSH
56673: LD_INT 0
56675: PPUSH
56676: LD_INT 4
56678: PPUSH
56679: CALL_OW 273
56683: PUSH
56684: EMPTY
56685: LIST
56686: LIST
56687: PUSH
56688: LD_VAR 0 7
56692: PPUSH
56693: LD_INT 1
56695: PPUSH
56696: LD_INT 4
56698: PPUSH
56699: CALL_OW 272
56703: PUSH
56704: LD_VAR 0 8
56708: PPUSH
56709: LD_INT 1
56711: PPUSH
56712: LD_INT 4
56714: PPUSH
56715: CALL_OW 273
56719: PUSH
56720: EMPTY
56721: LIST
56722: LIST
56723: PUSH
56724: LD_VAR 0 7
56728: PPUSH
56729: LD_INT 2
56731: PPUSH
56732: LD_INT 4
56734: PPUSH
56735: CALL_OW 272
56739: PUSH
56740: LD_VAR 0 8
56744: PPUSH
56745: LD_INT 2
56747: PPUSH
56748: LD_INT 4
56750: PPUSH
56751: CALL_OW 273
56755: PUSH
56756: EMPTY
56757: LIST
56758: LIST
56759: PUSH
56760: LD_VAR 0 7
56764: PPUSH
56765: LD_INT 3
56767: PPUSH
56768: LD_INT 4
56770: PPUSH
56771: CALL_OW 272
56775: PUSH
56776: LD_VAR 0 8
56780: PPUSH
56781: LD_INT 3
56783: PPUSH
56784: LD_INT 4
56786: PPUSH
56787: CALL_OW 273
56791: PUSH
56792: EMPTY
56793: LIST
56794: LIST
56795: PUSH
56796: LD_VAR 0 7
56800: PPUSH
56801: LD_INT 4
56803: PPUSH
56804: LD_INT 4
56806: PPUSH
56807: CALL_OW 272
56811: PUSH
56812: LD_VAR 0 8
56816: PPUSH
56817: LD_INT 4
56819: PPUSH
56820: LD_INT 4
56822: PPUSH
56823: CALL_OW 273
56827: PUSH
56828: EMPTY
56829: LIST
56830: LIST
56831: PUSH
56832: LD_VAR 0 7
56836: PPUSH
56837: LD_INT 5
56839: PPUSH
56840: LD_INT 4
56842: PPUSH
56843: CALL_OW 272
56847: PUSH
56848: LD_VAR 0 8
56852: PPUSH
56853: LD_INT 5
56855: PPUSH
56856: LD_INT 4
56858: PPUSH
56859: CALL_OW 273
56863: PUSH
56864: EMPTY
56865: LIST
56866: LIST
56867: PUSH
56868: EMPTY
56869: LIST
56870: LIST
56871: LIST
56872: LIST
56873: LIST
56874: LIST
56875: ST_TO_ADDR
// for i = tmp downto 1 do
56876: LD_ADDR_VAR 0 4
56880: PUSH
56881: DOUBLE
56882: LD_VAR 0 6
56886: INC
56887: ST_TO_ADDR
56888: LD_INT 1
56890: PUSH
56891: FOR_DOWNTO
56892: IFFALSE 56993
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
56894: LD_VAR 0 6
56898: PUSH
56899: LD_VAR 0 4
56903: ARRAY
56904: PUSH
56905: LD_INT 1
56907: ARRAY
56908: PPUSH
56909: LD_VAR 0 6
56913: PUSH
56914: LD_VAR 0 4
56918: ARRAY
56919: PUSH
56920: LD_INT 2
56922: ARRAY
56923: PPUSH
56924: CALL_OW 488
56928: NOT
56929: PUSH
56930: LD_VAR 0 6
56934: PUSH
56935: LD_VAR 0 4
56939: ARRAY
56940: PUSH
56941: LD_INT 1
56943: ARRAY
56944: PPUSH
56945: LD_VAR 0 6
56949: PUSH
56950: LD_VAR 0 4
56954: ARRAY
56955: PUSH
56956: LD_INT 2
56958: ARRAY
56959: PPUSH
56960: CALL_OW 428
56964: PUSH
56965: LD_INT 0
56967: NONEQUAL
56968: OR
56969: IFFALSE 56991
// tmp := Delete ( tmp , i ) ;
56971: LD_ADDR_VAR 0 6
56975: PUSH
56976: LD_VAR 0 6
56980: PPUSH
56981: LD_VAR 0 4
56985: PPUSH
56986: CALL_OW 3
56990: ST_TO_ADDR
56991: GO 56891
56993: POP
56994: POP
// j := GetClosestHex ( unit , tmp ) ;
56995: LD_ADDR_VAR 0 5
56999: PUSH
57000: LD_VAR 0 1
57004: PPUSH
57005: LD_VAR 0 6
57009: PPUSH
57010: CALL 56286 0 2
57014: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
57015: LD_VAR 0 1
57019: PPUSH
57020: LD_VAR 0 5
57024: PUSH
57025: LD_INT 1
57027: ARRAY
57028: PPUSH
57029: LD_VAR 0 5
57033: PUSH
57034: LD_INT 2
57036: ARRAY
57037: PPUSH
57038: CALL_OW 111
// end ;
57042: LD_VAR 0 3
57046: RET
// export function PrepareApemanSoldier ( ) ; begin
57047: LD_INT 0
57049: PPUSH
// uc_nation := 0 ;
57050: LD_ADDR_OWVAR 21
57054: PUSH
57055: LD_INT 0
57057: ST_TO_ADDR
// hc_sex := sex_male ;
57058: LD_ADDR_OWVAR 27
57062: PUSH
57063: LD_INT 1
57065: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
57066: LD_ADDR_OWVAR 28
57070: PUSH
57071: LD_INT 15
57073: ST_TO_ADDR
// hc_gallery :=  ;
57074: LD_ADDR_OWVAR 33
57078: PUSH
57079: LD_STRING 
57081: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57082: LD_ADDR_OWVAR 31
57086: PUSH
57087: LD_INT 0
57089: PPUSH
57090: LD_INT 3
57092: PPUSH
57093: CALL_OW 12
57097: PUSH
57098: LD_INT 0
57100: PPUSH
57101: LD_INT 3
57103: PPUSH
57104: CALL_OW 12
57108: PUSH
57109: LD_INT 0
57111: PUSH
57112: LD_INT 0
57114: PUSH
57115: EMPTY
57116: LIST
57117: LIST
57118: LIST
57119: LIST
57120: ST_TO_ADDR
// end ;
57121: LD_VAR 0 1
57125: RET
// export function PrepareApemanEngineer ( ) ; begin
57126: LD_INT 0
57128: PPUSH
// uc_nation := 0 ;
57129: LD_ADDR_OWVAR 21
57133: PUSH
57134: LD_INT 0
57136: ST_TO_ADDR
// hc_sex := sex_male ;
57137: LD_ADDR_OWVAR 27
57141: PUSH
57142: LD_INT 1
57144: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
57145: LD_ADDR_OWVAR 28
57149: PUSH
57150: LD_INT 16
57152: ST_TO_ADDR
// hc_gallery :=  ;
57153: LD_ADDR_OWVAR 33
57157: PUSH
57158: LD_STRING 
57160: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57161: LD_ADDR_OWVAR 31
57165: PUSH
57166: LD_INT 0
57168: PPUSH
57169: LD_INT 3
57171: PPUSH
57172: CALL_OW 12
57176: PUSH
57177: LD_INT 0
57179: PPUSH
57180: LD_INT 3
57182: PPUSH
57183: CALL_OW 12
57187: PUSH
57188: LD_INT 0
57190: PUSH
57191: LD_INT 0
57193: PUSH
57194: EMPTY
57195: LIST
57196: LIST
57197: LIST
57198: LIST
57199: ST_TO_ADDR
// end ;
57200: LD_VAR 0 1
57204: RET
// export function PrepareApeman ( agressivity ) ; begin
57205: LD_INT 0
57207: PPUSH
// uc_side := 0 ;
57208: LD_ADDR_OWVAR 20
57212: PUSH
57213: LD_INT 0
57215: ST_TO_ADDR
// uc_nation := 0 ;
57216: LD_ADDR_OWVAR 21
57220: PUSH
57221: LD_INT 0
57223: ST_TO_ADDR
// hc_sex := sex_male ;
57224: LD_ADDR_OWVAR 27
57228: PUSH
57229: LD_INT 1
57231: ST_TO_ADDR
// hc_class := class_apeman ;
57232: LD_ADDR_OWVAR 28
57236: PUSH
57237: LD_INT 12
57239: ST_TO_ADDR
// hc_gallery :=  ;
57240: LD_ADDR_OWVAR 33
57244: PUSH
57245: LD_STRING 
57247: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
57248: LD_ADDR_OWVAR 35
57252: PUSH
57253: LD_VAR 0 1
57257: NEG
57258: PPUSH
57259: LD_VAR 0 1
57263: PPUSH
57264: CALL_OW 12
57268: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57269: LD_ADDR_OWVAR 31
57273: PUSH
57274: LD_INT 0
57276: PPUSH
57277: LD_INT 3
57279: PPUSH
57280: CALL_OW 12
57284: PUSH
57285: LD_INT 0
57287: PPUSH
57288: LD_INT 3
57290: PPUSH
57291: CALL_OW 12
57295: PUSH
57296: LD_INT 0
57298: PUSH
57299: LD_INT 0
57301: PUSH
57302: EMPTY
57303: LIST
57304: LIST
57305: LIST
57306: LIST
57307: ST_TO_ADDR
// end ;
57308: LD_VAR 0 2
57312: RET
// export function PrepareTiger ( agressivity ) ; begin
57313: LD_INT 0
57315: PPUSH
// uc_side := 0 ;
57316: LD_ADDR_OWVAR 20
57320: PUSH
57321: LD_INT 0
57323: ST_TO_ADDR
// uc_nation := 0 ;
57324: LD_ADDR_OWVAR 21
57328: PUSH
57329: LD_INT 0
57331: ST_TO_ADDR
// hc_class := class_tiger ;
57332: LD_ADDR_OWVAR 28
57336: PUSH
57337: LD_INT 14
57339: ST_TO_ADDR
// hc_gallery :=  ;
57340: LD_ADDR_OWVAR 33
57344: PUSH
57345: LD_STRING 
57347: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
57348: LD_ADDR_OWVAR 35
57352: PUSH
57353: LD_VAR 0 1
57357: NEG
57358: PPUSH
57359: LD_VAR 0 1
57363: PPUSH
57364: CALL_OW 12
57368: ST_TO_ADDR
// end ;
57369: LD_VAR 0 2
57373: RET
// export function PrepareEnchidna ( ) ; begin
57374: LD_INT 0
57376: PPUSH
// uc_side := 0 ;
57377: LD_ADDR_OWVAR 20
57381: PUSH
57382: LD_INT 0
57384: ST_TO_ADDR
// uc_nation := 0 ;
57385: LD_ADDR_OWVAR 21
57389: PUSH
57390: LD_INT 0
57392: ST_TO_ADDR
// hc_class := class_baggie ;
57393: LD_ADDR_OWVAR 28
57397: PUSH
57398: LD_INT 13
57400: ST_TO_ADDR
// hc_gallery :=  ;
57401: LD_ADDR_OWVAR 33
57405: PUSH
57406: LD_STRING 
57408: ST_TO_ADDR
// end ;
57409: LD_VAR 0 1
57413: RET
// export function PrepareFrog ( ) ; begin
57414: LD_INT 0
57416: PPUSH
// uc_side := 0 ;
57417: LD_ADDR_OWVAR 20
57421: PUSH
57422: LD_INT 0
57424: ST_TO_ADDR
// uc_nation := 0 ;
57425: LD_ADDR_OWVAR 21
57429: PUSH
57430: LD_INT 0
57432: ST_TO_ADDR
// hc_class := class_frog ;
57433: LD_ADDR_OWVAR 28
57437: PUSH
57438: LD_INT 19
57440: ST_TO_ADDR
// hc_gallery :=  ;
57441: LD_ADDR_OWVAR 33
57445: PUSH
57446: LD_STRING 
57448: ST_TO_ADDR
// end ;
57449: LD_VAR 0 1
57453: RET
// export function PrepareFish ( ) ; begin
57454: LD_INT 0
57456: PPUSH
// uc_side := 0 ;
57457: LD_ADDR_OWVAR 20
57461: PUSH
57462: LD_INT 0
57464: ST_TO_ADDR
// uc_nation := 0 ;
57465: LD_ADDR_OWVAR 21
57469: PUSH
57470: LD_INT 0
57472: ST_TO_ADDR
// hc_class := class_fish ;
57473: LD_ADDR_OWVAR 28
57477: PUSH
57478: LD_INT 20
57480: ST_TO_ADDR
// hc_gallery :=  ;
57481: LD_ADDR_OWVAR 33
57485: PUSH
57486: LD_STRING 
57488: ST_TO_ADDR
// end ;
57489: LD_VAR 0 1
57493: RET
// export function PrepareBird ( ) ; begin
57494: LD_INT 0
57496: PPUSH
// uc_side := 0 ;
57497: LD_ADDR_OWVAR 20
57501: PUSH
57502: LD_INT 0
57504: ST_TO_ADDR
// uc_nation := 0 ;
57505: LD_ADDR_OWVAR 21
57509: PUSH
57510: LD_INT 0
57512: ST_TO_ADDR
// hc_class := class_phororhacos ;
57513: LD_ADDR_OWVAR 28
57517: PUSH
57518: LD_INT 18
57520: ST_TO_ADDR
// hc_gallery :=  ;
57521: LD_ADDR_OWVAR 33
57525: PUSH
57526: LD_STRING 
57528: ST_TO_ADDR
// end ;
57529: LD_VAR 0 1
57533: RET
// export function PrepareHorse ( ) ; begin
57534: LD_INT 0
57536: PPUSH
// uc_side := 0 ;
57537: LD_ADDR_OWVAR 20
57541: PUSH
57542: LD_INT 0
57544: ST_TO_ADDR
// uc_nation := 0 ;
57545: LD_ADDR_OWVAR 21
57549: PUSH
57550: LD_INT 0
57552: ST_TO_ADDR
// hc_class := class_horse ;
57553: LD_ADDR_OWVAR 28
57557: PUSH
57558: LD_INT 21
57560: ST_TO_ADDR
// hc_gallery :=  ;
57561: LD_ADDR_OWVAR 33
57565: PUSH
57566: LD_STRING 
57568: ST_TO_ADDR
// end ;
57569: LD_VAR 0 1
57573: RET
// export function PrepareMastodont ( ) ; begin
57574: LD_INT 0
57576: PPUSH
// uc_side := 0 ;
57577: LD_ADDR_OWVAR 20
57581: PUSH
57582: LD_INT 0
57584: ST_TO_ADDR
// uc_nation := 0 ;
57585: LD_ADDR_OWVAR 21
57589: PUSH
57590: LD_INT 0
57592: ST_TO_ADDR
// vc_chassis := class_mastodont ;
57593: LD_ADDR_OWVAR 37
57597: PUSH
57598: LD_INT 31
57600: ST_TO_ADDR
// vc_control := control_rider ;
57601: LD_ADDR_OWVAR 38
57605: PUSH
57606: LD_INT 4
57608: ST_TO_ADDR
// end ;
57609: LD_VAR 0 1
57613: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
57614: LD_INT 0
57616: PPUSH
57617: PPUSH
57618: PPUSH
// uc_side = 0 ;
57619: LD_ADDR_OWVAR 20
57623: PUSH
57624: LD_INT 0
57626: ST_TO_ADDR
// uc_nation = 0 ;
57627: LD_ADDR_OWVAR 21
57631: PUSH
57632: LD_INT 0
57634: ST_TO_ADDR
// InitHc_All ( ) ;
57635: CALL_OW 584
// InitVc ;
57639: CALL_OW 20
// if mastodonts then
57643: LD_VAR 0 6
57647: IFFALSE 57714
// for i = 1 to mastodonts do
57649: LD_ADDR_VAR 0 11
57653: PUSH
57654: DOUBLE
57655: LD_INT 1
57657: DEC
57658: ST_TO_ADDR
57659: LD_VAR 0 6
57663: PUSH
57664: FOR_TO
57665: IFFALSE 57712
// begin vc_chassis := 31 ;
57667: LD_ADDR_OWVAR 37
57671: PUSH
57672: LD_INT 31
57674: ST_TO_ADDR
// vc_control := control_rider ;
57675: LD_ADDR_OWVAR 38
57679: PUSH
57680: LD_INT 4
57682: ST_TO_ADDR
// animal := CreateVehicle ;
57683: LD_ADDR_VAR 0 12
57687: PUSH
57688: CALL_OW 45
57692: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57693: LD_VAR 0 12
57697: PPUSH
57698: LD_VAR 0 8
57702: PPUSH
57703: LD_INT 0
57705: PPUSH
57706: CALL 59842 0 3
// end ;
57710: GO 57664
57712: POP
57713: POP
// if horses then
57714: LD_VAR 0 5
57718: IFFALSE 57785
// for i = 1 to horses do
57720: LD_ADDR_VAR 0 11
57724: PUSH
57725: DOUBLE
57726: LD_INT 1
57728: DEC
57729: ST_TO_ADDR
57730: LD_VAR 0 5
57734: PUSH
57735: FOR_TO
57736: IFFALSE 57783
// begin hc_class := 21 ;
57738: LD_ADDR_OWVAR 28
57742: PUSH
57743: LD_INT 21
57745: ST_TO_ADDR
// hc_gallery :=  ;
57746: LD_ADDR_OWVAR 33
57750: PUSH
57751: LD_STRING 
57753: ST_TO_ADDR
// animal := CreateHuman ;
57754: LD_ADDR_VAR 0 12
57758: PUSH
57759: CALL_OW 44
57763: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57764: LD_VAR 0 12
57768: PPUSH
57769: LD_VAR 0 8
57773: PPUSH
57774: LD_INT 0
57776: PPUSH
57777: CALL 59842 0 3
// end ;
57781: GO 57735
57783: POP
57784: POP
// if birds then
57785: LD_VAR 0 1
57789: IFFALSE 57856
// for i = 1 to birds do
57791: LD_ADDR_VAR 0 11
57795: PUSH
57796: DOUBLE
57797: LD_INT 1
57799: DEC
57800: ST_TO_ADDR
57801: LD_VAR 0 1
57805: PUSH
57806: FOR_TO
57807: IFFALSE 57854
// begin hc_class = 18 ;
57809: LD_ADDR_OWVAR 28
57813: PUSH
57814: LD_INT 18
57816: ST_TO_ADDR
// hc_gallery =  ;
57817: LD_ADDR_OWVAR 33
57821: PUSH
57822: LD_STRING 
57824: ST_TO_ADDR
// animal := CreateHuman ;
57825: LD_ADDR_VAR 0 12
57829: PUSH
57830: CALL_OW 44
57834: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57835: LD_VAR 0 12
57839: PPUSH
57840: LD_VAR 0 8
57844: PPUSH
57845: LD_INT 0
57847: PPUSH
57848: CALL 59842 0 3
// end ;
57852: GO 57806
57854: POP
57855: POP
// if tigers then
57856: LD_VAR 0 2
57860: IFFALSE 57944
// for i = 1 to tigers do
57862: LD_ADDR_VAR 0 11
57866: PUSH
57867: DOUBLE
57868: LD_INT 1
57870: DEC
57871: ST_TO_ADDR
57872: LD_VAR 0 2
57876: PUSH
57877: FOR_TO
57878: IFFALSE 57942
// begin hc_class = class_tiger ;
57880: LD_ADDR_OWVAR 28
57884: PUSH
57885: LD_INT 14
57887: ST_TO_ADDR
// hc_gallery =  ;
57888: LD_ADDR_OWVAR 33
57892: PUSH
57893: LD_STRING 
57895: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
57896: LD_ADDR_OWVAR 35
57900: PUSH
57901: LD_INT 7
57903: NEG
57904: PPUSH
57905: LD_INT 7
57907: PPUSH
57908: CALL_OW 12
57912: ST_TO_ADDR
// animal := CreateHuman ;
57913: LD_ADDR_VAR 0 12
57917: PUSH
57918: CALL_OW 44
57922: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57923: LD_VAR 0 12
57927: PPUSH
57928: LD_VAR 0 8
57932: PPUSH
57933: LD_INT 0
57935: PPUSH
57936: CALL 59842 0 3
// end ;
57940: GO 57877
57942: POP
57943: POP
// if apemans then
57944: LD_VAR 0 3
57948: IFFALSE 58071
// for i = 1 to apemans do
57950: LD_ADDR_VAR 0 11
57954: PUSH
57955: DOUBLE
57956: LD_INT 1
57958: DEC
57959: ST_TO_ADDR
57960: LD_VAR 0 3
57964: PUSH
57965: FOR_TO
57966: IFFALSE 58069
// begin hc_class = class_apeman ;
57968: LD_ADDR_OWVAR 28
57972: PUSH
57973: LD_INT 12
57975: ST_TO_ADDR
// hc_gallery =  ;
57976: LD_ADDR_OWVAR 33
57980: PUSH
57981: LD_STRING 
57983: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
57984: LD_ADDR_OWVAR 35
57988: PUSH
57989: LD_INT 2
57991: NEG
57992: PPUSH
57993: LD_INT 2
57995: PPUSH
57996: CALL_OW 12
58000: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58001: LD_ADDR_OWVAR 31
58005: PUSH
58006: LD_INT 1
58008: PPUSH
58009: LD_INT 3
58011: PPUSH
58012: CALL_OW 12
58016: PUSH
58017: LD_INT 1
58019: PPUSH
58020: LD_INT 3
58022: PPUSH
58023: CALL_OW 12
58027: PUSH
58028: LD_INT 0
58030: PUSH
58031: LD_INT 0
58033: PUSH
58034: EMPTY
58035: LIST
58036: LIST
58037: LIST
58038: LIST
58039: ST_TO_ADDR
// animal := CreateHuman ;
58040: LD_ADDR_VAR 0 12
58044: PUSH
58045: CALL_OW 44
58049: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58050: LD_VAR 0 12
58054: PPUSH
58055: LD_VAR 0 8
58059: PPUSH
58060: LD_INT 0
58062: PPUSH
58063: CALL 59842 0 3
// end ;
58067: GO 57965
58069: POP
58070: POP
// if enchidnas then
58071: LD_VAR 0 4
58075: IFFALSE 58142
// for i = 1 to enchidnas do
58077: LD_ADDR_VAR 0 11
58081: PUSH
58082: DOUBLE
58083: LD_INT 1
58085: DEC
58086: ST_TO_ADDR
58087: LD_VAR 0 4
58091: PUSH
58092: FOR_TO
58093: IFFALSE 58140
// begin hc_class = 13 ;
58095: LD_ADDR_OWVAR 28
58099: PUSH
58100: LD_INT 13
58102: ST_TO_ADDR
// hc_gallery =  ;
58103: LD_ADDR_OWVAR 33
58107: PUSH
58108: LD_STRING 
58110: ST_TO_ADDR
// animal := CreateHuman ;
58111: LD_ADDR_VAR 0 12
58115: PUSH
58116: CALL_OW 44
58120: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58121: LD_VAR 0 12
58125: PPUSH
58126: LD_VAR 0 8
58130: PPUSH
58131: LD_INT 0
58133: PPUSH
58134: CALL 59842 0 3
// end ;
58138: GO 58092
58140: POP
58141: POP
// if fishes then
58142: LD_VAR 0 7
58146: IFFALSE 58213
// for i = 1 to fishes do
58148: LD_ADDR_VAR 0 11
58152: PUSH
58153: DOUBLE
58154: LD_INT 1
58156: DEC
58157: ST_TO_ADDR
58158: LD_VAR 0 7
58162: PUSH
58163: FOR_TO
58164: IFFALSE 58211
// begin hc_class = 20 ;
58166: LD_ADDR_OWVAR 28
58170: PUSH
58171: LD_INT 20
58173: ST_TO_ADDR
// hc_gallery =  ;
58174: LD_ADDR_OWVAR 33
58178: PUSH
58179: LD_STRING 
58181: ST_TO_ADDR
// animal := CreateHuman ;
58182: LD_ADDR_VAR 0 12
58186: PUSH
58187: CALL_OW 44
58191: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58192: LD_VAR 0 12
58196: PPUSH
58197: LD_VAR 0 9
58201: PPUSH
58202: LD_INT 0
58204: PPUSH
58205: CALL 59842 0 3
// end ;
58209: GO 58163
58211: POP
58212: POP
// end ;
58213: LD_VAR 0 10
58217: RET
// export function WantHeal ( sci , unit ) ; begin
58218: LD_INT 0
58220: PPUSH
// if GetTaskList ( sci ) > 0 then
58221: LD_VAR 0 1
58225: PPUSH
58226: CALL_OW 437
58230: PUSH
58231: LD_INT 0
58233: GREATER
58234: IFFALSE 58304
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
58236: LD_VAR 0 1
58240: PPUSH
58241: CALL_OW 437
58245: PUSH
58246: LD_INT 1
58248: ARRAY
58249: PUSH
58250: LD_INT 1
58252: ARRAY
58253: PUSH
58254: LD_STRING l
58256: EQUAL
58257: PUSH
58258: LD_VAR 0 1
58262: PPUSH
58263: CALL_OW 437
58267: PUSH
58268: LD_INT 1
58270: ARRAY
58271: PUSH
58272: LD_INT 4
58274: ARRAY
58275: PUSH
58276: LD_VAR 0 2
58280: EQUAL
58281: AND
58282: IFFALSE 58294
// result := true else
58284: LD_ADDR_VAR 0 3
58288: PUSH
58289: LD_INT 1
58291: ST_TO_ADDR
58292: GO 58302
// result := false ;
58294: LD_ADDR_VAR 0 3
58298: PUSH
58299: LD_INT 0
58301: ST_TO_ADDR
// end else
58302: GO 58312
// result := false ;
58304: LD_ADDR_VAR 0 3
58308: PUSH
58309: LD_INT 0
58311: ST_TO_ADDR
// end ;
58312: LD_VAR 0 3
58316: RET
// export function HealTarget ( sci ) ; begin
58317: LD_INT 0
58319: PPUSH
// if not sci then
58320: LD_VAR 0 1
58324: NOT
58325: IFFALSE 58329
// exit ;
58327: GO 58394
// result := 0 ;
58329: LD_ADDR_VAR 0 2
58333: PUSH
58334: LD_INT 0
58336: ST_TO_ADDR
// if GetTaskList ( sci ) then
58337: LD_VAR 0 1
58341: PPUSH
58342: CALL_OW 437
58346: IFFALSE 58394
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
58348: LD_VAR 0 1
58352: PPUSH
58353: CALL_OW 437
58357: PUSH
58358: LD_INT 1
58360: ARRAY
58361: PUSH
58362: LD_INT 1
58364: ARRAY
58365: PUSH
58366: LD_STRING l
58368: EQUAL
58369: IFFALSE 58394
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
58371: LD_ADDR_VAR 0 2
58375: PUSH
58376: LD_VAR 0 1
58380: PPUSH
58381: CALL_OW 437
58385: PUSH
58386: LD_INT 1
58388: ARRAY
58389: PUSH
58390: LD_INT 4
58392: ARRAY
58393: ST_TO_ADDR
// end ;
58394: LD_VAR 0 2
58398: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
58399: LD_INT 0
58401: PPUSH
58402: PPUSH
58403: PPUSH
58404: PPUSH
// if not base_units then
58405: LD_VAR 0 1
58409: NOT
58410: IFFALSE 58414
// exit ;
58412: GO 58501
// result := false ;
58414: LD_ADDR_VAR 0 2
58418: PUSH
58419: LD_INT 0
58421: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
58422: LD_ADDR_VAR 0 5
58426: PUSH
58427: LD_VAR 0 1
58431: PPUSH
58432: LD_INT 21
58434: PUSH
58435: LD_INT 3
58437: PUSH
58438: EMPTY
58439: LIST
58440: LIST
58441: PPUSH
58442: CALL_OW 72
58446: ST_TO_ADDR
// if not tmp then
58447: LD_VAR 0 5
58451: NOT
58452: IFFALSE 58456
// exit ;
58454: GO 58501
// for i in tmp do
58456: LD_ADDR_VAR 0 3
58460: PUSH
58461: LD_VAR 0 5
58465: PUSH
58466: FOR_IN
58467: IFFALSE 58499
// begin result := EnemyInRange ( i , 22 ) ;
58469: LD_ADDR_VAR 0 2
58473: PUSH
58474: LD_VAR 0 3
58478: PPUSH
58479: LD_INT 22
58481: PPUSH
58482: CALL 56088 0 2
58486: ST_TO_ADDR
// if result then
58487: LD_VAR 0 2
58491: IFFALSE 58497
// exit ;
58493: POP
58494: POP
58495: GO 58501
// end ;
58497: GO 58466
58499: POP
58500: POP
// end ;
58501: LD_VAR 0 2
58505: RET
// export function FilterByTag ( units , tag ) ; begin
58506: LD_INT 0
58508: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
58509: LD_ADDR_VAR 0 3
58513: PUSH
58514: LD_VAR 0 1
58518: PPUSH
58519: LD_INT 120
58521: PUSH
58522: LD_VAR 0 2
58526: PUSH
58527: EMPTY
58528: LIST
58529: LIST
58530: PPUSH
58531: CALL_OW 72
58535: ST_TO_ADDR
// end ;
58536: LD_VAR 0 3
58540: RET
// export function IsDriver ( un ) ; begin
58541: LD_INT 0
58543: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
58544: LD_ADDR_VAR 0 2
58548: PUSH
58549: LD_VAR 0 1
58553: PUSH
58554: LD_INT 55
58556: PUSH
58557: EMPTY
58558: LIST
58559: PPUSH
58560: CALL_OW 69
58564: IN
58565: ST_TO_ADDR
// end ;
58566: LD_VAR 0 2
58570: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
58571: LD_INT 0
58573: PPUSH
58574: PPUSH
// list := [ ] ;
58575: LD_ADDR_VAR 0 5
58579: PUSH
58580: EMPTY
58581: ST_TO_ADDR
// case d of 0 :
58582: LD_VAR 0 3
58586: PUSH
58587: LD_INT 0
58589: DOUBLE
58590: EQUAL
58591: IFTRUE 58595
58593: GO 58728
58595: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
58596: LD_ADDR_VAR 0 5
58600: PUSH
58601: LD_VAR 0 1
58605: PUSH
58606: LD_INT 4
58608: MINUS
58609: PUSH
58610: LD_VAR 0 2
58614: PUSH
58615: LD_INT 4
58617: MINUS
58618: PUSH
58619: LD_INT 2
58621: PUSH
58622: EMPTY
58623: LIST
58624: LIST
58625: LIST
58626: PUSH
58627: LD_VAR 0 1
58631: PUSH
58632: LD_INT 3
58634: MINUS
58635: PUSH
58636: LD_VAR 0 2
58640: PUSH
58641: LD_INT 1
58643: PUSH
58644: EMPTY
58645: LIST
58646: LIST
58647: LIST
58648: PUSH
58649: LD_VAR 0 1
58653: PUSH
58654: LD_INT 4
58656: PLUS
58657: PUSH
58658: LD_VAR 0 2
58662: PUSH
58663: LD_INT 4
58665: PUSH
58666: EMPTY
58667: LIST
58668: LIST
58669: LIST
58670: PUSH
58671: LD_VAR 0 1
58675: PUSH
58676: LD_INT 3
58678: PLUS
58679: PUSH
58680: LD_VAR 0 2
58684: PUSH
58685: LD_INT 3
58687: PLUS
58688: PUSH
58689: LD_INT 5
58691: PUSH
58692: EMPTY
58693: LIST
58694: LIST
58695: LIST
58696: PUSH
58697: LD_VAR 0 1
58701: PUSH
58702: LD_VAR 0 2
58706: PUSH
58707: LD_INT 4
58709: PLUS
58710: PUSH
58711: LD_INT 0
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: LIST
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: LIST
58723: LIST
58724: LIST
58725: ST_TO_ADDR
// end ; 1 :
58726: GO 59426
58728: LD_INT 1
58730: DOUBLE
58731: EQUAL
58732: IFTRUE 58736
58734: GO 58869
58736: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
58737: LD_ADDR_VAR 0 5
58741: PUSH
58742: LD_VAR 0 1
58746: PUSH
58747: LD_VAR 0 2
58751: PUSH
58752: LD_INT 4
58754: MINUS
58755: PUSH
58756: LD_INT 3
58758: PUSH
58759: EMPTY
58760: LIST
58761: LIST
58762: LIST
58763: PUSH
58764: LD_VAR 0 1
58768: PUSH
58769: LD_INT 3
58771: MINUS
58772: PUSH
58773: LD_VAR 0 2
58777: PUSH
58778: LD_INT 3
58780: MINUS
58781: PUSH
58782: LD_INT 2
58784: PUSH
58785: EMPTY
58786: LIST
58787: LIST
58788: LIST
58789: PUSH
58790: LD_VAR 0 1
58794: PUSH
58795: LD_INT 4
58797: MINUS
58798: PUSH
58799: LD_VAR 0 2
58803: PUSH
58804: LD_INT 1
58806: PUSH
58807: EMPTY
58808: LIST
58809: LIST
58810: LIST
58811: PUSH
58812: LD_VAR 0 1
58816: PUSH
58817: LD_VAR 0 2
58821: PUSH
58822: LD_INT 3
58824: PLUS
58825: PUSH
58826: LD_INT 0
58828: PUSH
58829: EMPTY
58830: LIST
58831: LIST
58832: LIST
58833: PUSH
58834: LD_VAR 0 1
58838: PUSH
58839: LD_INT 4
58841: PLUS
58842: PUSH
58843: LD_VAR 0 2
58847: PUSH
58848: LD_INT 4
58850: PLUS
58851: PUSH
58852: LD_INT 5
58854: PUSH
58855: EMPTY
58856: LIST
58857: LIST
58858: LIST
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: LIST
58866: ST_TO_ADDR
// end ; 2 :
58867: GO 59426
58869: LD_INT 2
58871: DOUBLE
58872: EQUAL
58873: IFTRUE 58877
58875: GO 59006
58877: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
58878: LD_ADDR_VAR 0 5
58882: PUSH
58883: LD_VAR 0 1
58887: PUSH
58888: LD_VAR 0 2
58892: PUSH
58893: LD_INT 3
58895: MINUS
58896: PUSH
58897: LD_INT 3
58899: PUSH
58900: EMPTY
58901: LIST
58902: LIST
58903: LIST
58904: PUSH
58905: LD_VAR 0 1
58909: PUSH
58910: LD_INT 4
58912: PLUS
58913: PUSH
58914: LD_VAR 0 2
58918: PUSH
58919: LD_INT 4
58921: PUSH
58922: EMPTY
58923: LIST
58924: LIST
58925: LIST
58926: PUSH
58927: LD_VAR 0 1
58931: PUSH
58932: LD_VAR 0 2
58936: PUSH
58937: LD_INT 4
58939: PLUS
58940: PUSH
58941: LD_INT 0
58943: PUSH
58944: EMPTY
58945: LIST
58946: LIST
58947: LIST
58948: PUSH
58949: LD_VAR 0 1
58953: PUSH
58954: LD_INT 3
58956: MINUS
58957: PUSH
58958: LD_VAR 0 2
58962: PUSH
58963: LD_INT 1
58965: PUSH
58966: EMPTY
58967: LIST
58968: LIST
58969: LIST
58970: PUSH
58971: LD_VAR 0 1
58975: PUSH
58976: LD_INT 4
58978: MINUS
58979: PUSH
58980: LD_VAR 0 2
58984: PUSH
58985: LD_INT 4
58987: MINUS
58988: PUSH
58989: LD_INT 2
58991: PUSH
58992: EMPTY
58993: LIST
58994: LIST
58995: LIST
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: LIST
59001: LIST
59002: LIST
59003: ST_TO_ADDR
// end ; 3 :
59004: GO 59426
59006: LD_INT 3
59008: DOUBLE
59009: EQUAL
59010: IFTRUE 59014
59012: GO 59147
59014: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59015: LD_ADDR_VAR 0 5
59019: PUSH
59020: LD_VAR 0 1
59024: PUSH
59025: LD_INT 3
59027: PLUS
59028: PUSH
59029: LD_VAR 0 2
59033: PUSH
59034: LD_INT 4
59036: PUSH
59037: EMPTY
59038: LIST
59039: LIST
59040: LIST
59041: PUSH
59042: LD_VAR 0 1
59046: PUSH
59047: LD_INT 4
59049: PLUS
59050: PUSH
59051: LD_VAR 0 2
59055: PUSH
59056: LD_INT 4
59058: PLUS
59059: PUSH
59060: LD_INT 5
59062: PUSH
59063: EMPTY
59064: LIST
59065: LIST
59066: LIST
59067: PUSH
59068: LD_VAR 0 1
59072: PUSH
59073: LD_INT 4
59075: MINUS
59076: PUSH
59077: LD_VAR 0 2
59081: PUSH
59082: LD_INT 1
59084: PUSH
59085: EMPTY
59086: LIST
59087: LIST
59088: LIST
59089: PUSH
59090: LD_VAR 0 1
59094: PUSH
59095: LD_VAR 0 2
59099: PUSH
59100: LD_INT 4
59102: MINUS
59103: PUSH
59104: LD_INT 3
59106: PUSH
59107: EMPTY
59108: LIST
59109: LIST
59110: LIST
59111: PUSH
59112: LD_VAR 0 1
59116: PUSH
59117: LD_INT 3
59119: MINUS
59120: PUSH
59121: LD_VAR 0 2
59125: PUSH
59126: LD_INT 3
59128: MINUS
59129: PUSH
59130: LD_INT 2
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: LIST
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: LIST
59142: LIST
59143: LIST
59144: ST_TO_ADDR
// end ; 4 :
59145: GO 59426
59147: LD_INT 4
59149: DOUBLE
59150: EQUAL
59151: IFTRUE 59155
59153: GO 59288
59155: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59156: LD_ADDR_VAR 0 5
59160: PUSH
59161: LD_VAR 0 1
59165: PUSH
59166: LD_VAR 0 2
59170: PUSH
59171: LD_INT 4
59173: PLUS
59174: PUSH
59175: LD_INT 0
59177: PUSH
59178: EMPTY
59179: LIST
59180: LIST
59181: LIST
59182: PUSH
59183: LD_VAR 0 1
59187: PUSH
59188: LD_INT 3
59190: PLUS
59191: PUSH
59192: LD_VAR 0 2
59196: PUSH
59197: LD_INT 3
59199: PLUS
59200: PUSH
59201: LD_INT 5
59203: PUSH
59204: EMPTY
59205: LIST
59206: LIST
59207: LIST
59208: PUSH
59209: LD_VAR 0 1
59213: PUSH
59214: LD_INT 4
59216: PLUS
59217: PUSH
59218: LD_VAR 0 2
59222: PUSH
59223: LD_INT 4
59225: PUSH
59226: EMPTY
59227: LIST
59228: LIST
59229: LIST
59230: PUSH
59231: LD_VAR 0 1
59235: PUSH
59236: LD_VAR 0 2
59240: PUSH
59241: LD_INT 3
59243: MINUS
59244: PUSH
59245: LD_INT 3
59247: PUSH
59248: EMPTY
59249: LIST
59250: LIST
59251: LIST
59252: PUSH
59253: LD_VAR 0 1
59257: PUSH
59258: LD_INT 4
59260: MINUS
59261: PUSH
59262: LD_VAR 0 2
59266: PUSH
59267: LD_INT 4
59269: MINUS
59270: PUSH
59271: LD_INT 2
59273: PUSH
59274: EMPTY
59275: LIST
59276: LIST
59277: LIST
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: LIST
59285: ST_TO_ADDR
// end ; 5 :
59286: GO 59426
59288: LD_INT 5
59290: DOUBLE
59291: EQUAL
59292: IFTRUE 59296
59294: GO 59425
59296: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
59297: LD_ADDR_VAR 0 5
59301: PUSH
59302: LD_VAR 0 1
59306: PUSH
59307: LD_INT 4
59309: MINUS
59310: PUSH
59311: LD_VAR 0 2
59315: PUSH
59316: LD_INT 1
59318: PUSH
59319: EMPTY
59320: LIST
59321: LIST
59322: LIST
59323: PUSH
59324: LD_VAR 0 1
59328: PUSH
59329: LD_VAR 0 2
59333: PUSH
59334: LD_INT 4
59336: MINUS
59337: PUSH
59338: LD_INT 3
59340: PUSH
59341: EMPTY
59342: LIST
59343: LIST
59344: LIST
59345: PUSH
59346: LD_VAR 0 1
59350: PUSH
59351: LD_INT 4
59353: PLUS
59354: PUSH
59355: LD_VAR 0 2
59359: PUSH
59360: LD_INT 4
59362: PLUS
59363: PUSH
59364: LD_INT 5
59366: PUSH
59367: EMPTY
59368: LIST
59369: LIST
59370: LIST
59371: PUSH
59372: LD_VAR 0 1
59376: PUSH
59377: LD_INT 3
59379: PLUS
59380: PUSH
59381: LD_VAR 0 2
59385: PUSH
59386: LD_INT 4
59388: PUSH
59389: EMPTY
59390: LIST
59391: LIST
59392: LIST
59393: PUSH
59394: LD_VAR 0 1
59398: PUSH
59399: LD_VAR 0 2
59403: PUSH
59404: LD_INT 3
59406: PLUS
59407: PUSH
59408: LD_INT 0
59410: PUSH
59411: EMPTY
59412: LIST
59413: LIST
59414: LIST
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: LIST
59420: LIST
59421: LIST
59422: ST_TO_ADDR
// end ; end ;
59423: GO 59426
59425: POP
// result := list ;
59426: LD_ADDR_VAR 0 4
59430: PUSH
59431: LD_VAR 0 5
59435: ST_TO_ADDR
// end ;
59436: LD_VAR 0 4
59440: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
59441: LD_INT 0
59443: PPUSH
59444: PPUSH
59445: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
59446: LD_VAR 0 1
59450: NOT
59451: PUSH
59452: LD_VAR 0 2
59456: PUSH
59457: LD_INT 1
59459: PUSH
59460: LD_INT 2
59462: PUSH
59463: LD_INT 3
59465: PUSH
59466: LD_INT 4
59468: PUSH
59469: EMPTY
59470: LIST
59471: LIST
59472: LIST
59473: LIST
59474: IN
59475: NOT
59476: OR
59477: IFFALSE 59481
// exit ;
59479: GO 59564
// tmp := [ ] ;
59481: LD_ADDR_VAR 0 5
59485: PUSH
59486: EMPTY
59487: ST_TO_ADDR
// for i in units do
59488: LD_ADDR_VAR 0 4
59492: PUSH
59493: LD_VAR 0 1
59497: PUSH
59498: FOR_IN
59499: IFFALSE 59533
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
59501: LD_ADDR_VAR 0 5
59505: PUSH
59506: LD_VAR 0 5
59510: PPUSH
59511: LD_VAR 0 4
59515: PPUSH
59516: LD_VAR 0 2
59520: PPUSH
59521: CALL_OW 259
59525: PPUSH
59526: CALL 60925 0 2
59530: ST_TO_ADDR
59531: GO 59498
59533: POP
59534: POP
// if not tmp then
59535: LD_VAR 0 5
59539: NOT
59540: IFFALSE 59544
// exit ;
59542: GO 59564
// result := SortListByListDesc ( units , tmp ) ;
59544: LD_ADDR_VAR 0 3
59548: PUSH
59549: LD_VAR 0 1
59553: PPUSH
59554: LD_VAR 0 5
59558: PPUSH
59559: CALL_OW 77
59563: ST_TO_ADDR
// end ;
59564: LD_VAR 0 3
59568: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
59569: LD_INT 0
59571: PPUSH
59572: PPUSH
59573: PPUSH
// result := false ;
59574: LD_ADDR_VAR 0 3
59578: PUSH
59579: LD_INT 0
59581: ST_TO_ADDR
// if not building then
59582: LD_VAR 0 2
59586: NOT
59587: IFFALSE 59591
// exit ;
59589: GO 59729
// x := GetX ( building ) ;
59591: LD_ADDR_VAR 0 4
59595: PUSH
59596: LD_VAR 0 2
59600: PPUSH
59601: CALL_OW 250
59605: ST_TO_ADDR
// y := GetY ( building ) ;
59606: LD_ADDR_VAR 0 5
59610: PUSH
59611: LD_VAR 0 2
59615: PPUSH
59616: CALL_OW 251
59620: ST_TO_ADDR
// if not x or not y then
59621: LD_VAR 0 4
59625: NOT
59626: PUSH
59627: LD_VAR 0 5
59631: NOT
59632: OR
59633: IFFALSE 59637
// exit ;
59635: GO 59729
// if GetTaskList ( unit ) then
59637: LD_VAR 0 1
59641: PPUSH
59642: CALL_OW 437
59646: IFFALSE 59729
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59648: LD_STRING e
59650: PUSH
59651: LD_VAR 0 1
59655: PPUSH
59656: CALL_OW 437
59660: PUSH
59661: LD_INT 1
59663: ARRAY
59664: PUSH
59665: LD_INT 1
59667: ARRAY
59668: EQUAL
59669: PUSH
59670: LD_VAR 0 4
59674: PUSH
59675: LD_VAR 0 1
59679: PPUSH
59680: CALL_OW 437
59684: PUSH
59685: LD_INT 1
59687: ARRAY
59688: PUSH
59689: LD_INT 2
59691: ARRAY
59692: EQUAL
59693: AND
59694: PUSH
59695: LD_VAR 0 5
59699: PUSH
59700: LD_VAR 0 1
59704: PPUSH
59705: CALL_OW 437
59709: PUSH
59710: LD_INT 1
59712: ARRAY
59713: PUSH
59714: LD_INT 3
59716: ARRAY
59717: EQUAL
59718: AND
59719: IFFALSE 59729
// result := true end ;
59721: LD_ADDR_VAR 0 3
59725: PUSH
59726: LD_INT 1
59728: ST_TO_ADDR
// end ;
59729: LD_VAR 0 3
59733: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
59734: LD_INT 0
59736: PPUSH
// result := false ;
59737: LD_ADDR_VAR 0 4
59741: PUSH
59742: LD_INT 0
59744: ST_TO_ADDR
// if GetTaskList ( unit ) then
59745: LD_VAR 0 1
59749: PPUSH
59750: CALL_OW 437
59754: IFFALSE 59837
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59756: LD_STRING M
59758: PUSH
59759: LD_VAR 0 1
59763: PPUSH
59764: CALL_OW 437
59768: PUSH
59769: LD_INT 1
59771: ARRAY
59772: PUSH
59773: LD_INT 1
59775: ARRAY
59776: EQUAL
59777: PUSH
59778: LD_VAR 0 2
59782: PUSH
59783: LD_VAR 0 1
59787: PPUSH
59788: CALL_OW 437
59792: PUSH
59793: LD_INT 1
59795: ARRAY
59796: PUSH
59797: LD_INT 2
59799: ARRAY
59800: EQUAL
59801: AND
59802: PUSH
59803: LD_VAR 0 3
59807: PUSH
59808: LD_VAR 0 1
59812: PPUSH
59813: CALL_OW 437
59817: PUSH
59818: LD_INT 1
59820: ARRAY
59821: PUSH
59822: LD_INT 3
59824: ARRAY
59825: EQUAL
59826: AND
59827: IFFALSE 59837
// result := true ;
59829: LD_ADDR_VAR 0 4
59833: PUSH
59834: LD_INT 1
59836: ST_TO_ADDR
// end ; end ;
59837: LD_VAR 0 4
59841: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
59842: LD_INT 0
59844: PPUSH
59845: PPUSH
59846: PPUSH
59847: PPUSH
// if not unit or not area then
59848: LD_VAR 0 1
59852: NOT
59853: PUSH
59854: LD_VAR 0 2
59858: NOT
59859: OR
59860: IFFALSE 59864
// exit ;
59862: GO 60028
// tmp := AreaToList ( area , i ) ;
59864: LD_ADDR_VAR 0 6
59868: PUSH
59869: LD_VAR 0 2
59873: PPUSH
59874: LD_VAR 0 5
59878: PPUSH
59879: CALL_OW 517
59883: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
59884: LD_ADDR_VAR 0 5
59888: PUSH
59889: DOUBLE
59890: LD_INT 1
59892: DEC
59893: ST_TO_ADDR
59894: LD_VAR 0 6
59898: PUSH
59899: LD_INT 1
59901: ARRAY
59902: PUSH
59903: FOR_TO
59904: IFFALSE 60026
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
59906: LD_ADDR_VAR 0 7
59910: PUSH
59911: LD_VAR 0 6
59915: PUSH
59916: LD_INT 1
59918: ARRAY
59919: PUSH
59920: LD_VAR 0 5
59924: ARRAY
59925: PUSH
59926: LD_VAR 0 6
59930: PUSH
59931: LD_INT 2
59933: ARRAY
59934: PUSH
59935: LD_VAR 0 5
59939: ARRAY
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
59945: LD_VAR 0 7
59949: PUSH
59950: LD_INT 1
59952: ARRAY
59953: PPUSH
59954: LD_VAR 0 7
59958: PUSH
59959: LD_INT 2
59961: ARRAY
59962: PPUSH
59963: CALL_OW 428
59967: PUSH
59968: LD_INT 0
59970: EQUAL
59971: IFFALSE 60024
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
59973: LD_VAR 0 1
59977: PPUSH
59978: LD_VAR 0 7
59982: PUSH
59983: LD_INT 1
59985: ARRAY
59986: PPUSH
59987: LD_VAR 0 7
59991: PUSH
59992: LD_INT 2
59994: ARRAY
59995: PPUSH
59996: LD_VAR 0 3
60000: PPUSH
60001: CALL_OW 48
// result := IsPlaced ( unit ) ;
60005: LD_ADDR_VAR 0 4
60009: PUSH
60010: LD_VAR 0 1
60014: PPUSH
60015: CALL_OW 305
60019: ST_TO_ADDR
// exit ;
60020: POP
60021: POP
60022: GO 60028
// end ; end ;
60024: GO 59903
60026: POP
60027: POP
// end ;
60028: LD_VAR 0 4
60032: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60033: LD_INT 0
60035: PPUSH
60036: PPUSH
60037: PPUSH
// if not side or side > 8 then
60038: LD_VAR 0 1
60042: NOT
60043: PUSH
60044: LD_VAR 0 1
60048: PUSH
60049: LD_INT 8
60051: GREATER
60052: OR
60053: IFFALSE 60057
// exit ;
60055: GO 60244
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60057: LD_ADDR_VAR 0 4
60061: PUSH
60062: LD_INT 22
60064: PUSH
60065: LD_VAR 0 1
60069: PUSH
60070: EMPTY
60071: LIST
60072: LIST
60073: PUSH
60074: LD_INT 21
60076: PUSH
60077: LD_INT 3
60079: PUSH
60080: EMPTY
60081: LIST
60082: LIST
60083: PUSH
60084: EMPTY
60085: LIST
60086: LIST
60087: PPUSH
60088: CALL_OW 69
60092: ST_TO_ADDR
// if not tmp then
60093: LD_VAR 0 4
60097: NOT
60098: IFFALSE 60102
// exit ;
60100: GO 60244
// enable_addtolog := true ;
60102: LD_ADDR_OWVAR 81
60106: PUSH
60107: LD_INT 1
60109: ST_TO_ADDR
// AddToLog ( [ ) ;
60110: LD_STRING [
60112: PPUSH
60113: CALL_OW 561
// for i in tmp do
60117: LD_ADDR_VAR 0 3
60121: PUSH
60122: LD_VAR 0 4
60126: PUSH
60127: FOR_IN
60128: IFFALSE 60235
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60130: LD_STRING [
60132: PUSH
60133: LD_VAR 0 3
60137: PPUSH
60138: CALL_OW 266
60142: STR
60143: PUSH
60144: LD_STRING , 
60146: STR
60147: PUSH
60148: LD_VAR 0 3
60152: PPUSH
60153: CALL_OW 250
60157: STR
60158: PUSH
60159: LD_STRING , 
60161: STR
60162: PUSH
60163: LD_VAR 0 3
60167: PPUSH
60168: CALL_OW 251
60172: STR
60173: PUSH
60174: LD_STRING , 
60176: STR
60177: PUSH
60178: LD_VAR 0 3
60182: PPUSH
60183: CALL_OW 254
60187: STR
60188: PUSH
60189: LD_STRING , 
60191: STR
60192: PUSH
60193: LD_VAR 0 3
60197: PPUSH
60198: LD_INT 1
60200: PPUSH
60201: CALL_OW 268
60205: STR
60206: PUSH
60207: LD_STRING , 
60209: STR
60210: PUSH
60211: LD_VAR 0 3
60215: PPUSH
60216: LD_INT 2
60218: PPUSH
60219: CALL_OW 268
60223: STR
60224: PUSH
60225: LD_STRING ],
60227: STR
60228: PPUSH
60229: CALL_OW 561
// end ;
60233: GO 60127
60235: POP
60236: POP
// AddToLog ( ]; ) ;
60237: LD_STRING ];
60239: PPUSH
60240: CALL_OW 561
// end ;
60244: LD_VAR 0 2
60248: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60249: LD_INT 0
60251: PPUSH
60252: PPUSH
60253: PPUSH
60254: PPUSH
60255: PPUSH
// if not area or not rate or not max then
60256: LD_VAR 0 1
60260: NOT
60261: PUSH
60262: LD_VAR 0 2
60266: NOT
60267: OR
60268: PUSH
60269: LD_VAR 0 4
60273: NOT
60274: OR
60275: IFFALSE 60279
// exit ;
60277: GO 60468
// while 1 do
60279: LD_INT 1
60281: IFFALSE 60468
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
60283: LD_ADDR_VAR 0 9
60287: PUSH
60288: LD_VAR 0 1
60292: PPUSH
60293: LD_INT 1
60295: PPUSH
60296: CALL_OW 287
60300: PUSH
60301: LD_INT 10
60303: MUL
60304: ST_TO_ADDR
// r := rate / 10 ;
60305: LD_ADDR_VAR 0 7
60309: PUSH
60310: LD_VAR 0 2
60314: PUSH
60315: LD_INT 10
60317: DIVREAL
60318: ST_TO_ADDR
// time := 1 1$00 ;
60319: LD_ADDR_VAR 0 8
60323: PUSH
60324: LD_INT 2100
60326: ST_TO_ADDR
// if amount < min then
60327: LD_VAR 0 9
60331: PUSH
60332: LD_VAR 0 3
60336: LESS
60337: IFFALSE 60355
// r := r * 2 else
60339: LD_ADDR_VAR 0 7
60343: PUSH
60344: LD_VAR 0 7
60348: PUSH
60349: LD_INT 2
60351: MUL
60352: ST_TO_ADDR
60353: GO 60381
// if amount > max then
60355: LD_VAR 0 9
60359: PUSH
60360: LD_VAR 0 4
60364: GREATER
60365: IFFALSE 60381
// r := r / 2 ;
60367: LD_ADDR_VAR 0 7
60371: PUSH
60372: LD_VAR 0 7
60376: PUSH
60377: LD_INT 2
60379: DIVREAL
60380: ST_TO_ADDR
// time := time / r ;
60381: LD_ADDR_VAR 0 8
60385: PUSH
60386: LD_VAR 0 8
60390: PUSH
60391: LD_VAR 0 7
60395: DIVREAL
60396: ST_TO_ADDR
// if time < 0 then
60397: LD_VAR 0 8
60401: PUSH
60402: LD_INT 0
60404: LESS
60405: IFFALSE 60422
// time := time * - 1 ;
60407: LD_ADDR_VAR 0 8
60411: PUSH
60412: LD_VAR 0 8
60416: PUSH
60417: LD_INT 1
60419: NEG
60420: MUL
60421: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
60422: LD_VAR 0 8
60426: PUSH
60427: LD_INT 35
60429: PPUSH
60430: LD_INT 875
60432: PPUSH
60433: CALL_OW 12
60437: PLUS
60438: PPUSH
60439: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
60443: LD_INT 1
60445: PPUSH
60446: LD_INT 5
60448: PPUSH
60449: CALL_OW 12
60453: PPUSH
60454: LD_VAR 0 1
60458: PPUSH
60459: LD_INT 1
60461: PPUSH
60462: CALL_OW 55
// end ;
60466: GO 60279
// end ;
60468: LD_VAR 0 5
60472: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
60473: LD_INT 0
60475: PPUSH
60476: PPUSH
60477: PPUSH
60478: PPUSH
60479: PPUSH
60480: PPUSH
60481: PPUSH
60482: PPUSH
// if not turrets or not factories then
60483: LD_VAR 0 1
60487: NOT
60488: PUSH
60489: LD_VAR 0 2
60493: NOT
60494: OR
60495: IFFALSE 60499
// exit ;
60497: GO 60806
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
60499: LD_ADDR_VAR 0 10
60503: PUSH
60504: LD_INT 5
60506: PUSH
60507: LD_INT 6
60509: PUSH
60510: EMPTY
60511: LIST
60512: LIST
60513: PUSH
60514: LD_INT 2
60516: PUSH
60517: LD_INT 4
60519: PUSH
60520: EMPTY
60521: LIST
60522: LIST
60523: PUSH
60524: LD_INT 3
60526: PUSH
60527: LD_INT 5
60529: PUSH
60530: EMPTY
60531: LIST
60532: LIST
60533: PUSH
60534: EMPTY
60535: LIST
60536: LIST
60537: LIST
60538: PUSH
60539: LD_INT 24
60541: PUSH
60542: LD_INT 25
60544: PUSH
60545: EMPTY
60546: LIST
60547: LIST
60548: PUSH
60549: LD_INT 23
60551: PUSH
60552: LD_INT 27
60554: PUSH
60555: EMPTY
60556: LIST
60557: LIST
60558: PUSH
60559: EMPTY
60560: LIST
60561: LIST
60562: PUSH
60563: LD_INT 42
60565: PUSH
60566: LD_INT 43
60568: PUSH
60569: EMPTY
60570: LIST
60571: LIST
60572: PUSH
60573: LD_INT 44
60575: PUSH
60576: LD_INT 46
60578: PUSH
60579: EMPTY
60580: LIST
60581: LIST
60582: PUSH
60583: LD_INT 45
60585: PUSH
60586: LD_INT 47
60588: PUSH
60589: EMPTY
60590: LIST
60591: LIST
60592: PUSH
60593: EMPTY
60594: LIST
60595: LIST
60596: LIST
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: LIST
60602: ST_TO_ADDR
// result := [ ] ;
60603: LD_ADDR_VAR 0 3
60607: PUSH
60608: EMPTY
60609: ST_TO_ADDR
// for i in turrets do
60610: LD_ADDR_VAR 0 4
60614: PUSH
60615: LD_VAR 0 1
60619: PUSH
60620: FOR_IN
60621: IFFALSE 60804
// begin nat := GetNation ( i ) ;
60623: LD_ADDR_VAR 0 7
60627: PUSH
60628: LD_VAR 0 4
60632: PPUSH
60633: CALL_OW 248
60637: ST_TO_ADDR
// weapon := 0 ;
60638: LD_ADDR_VAR 0 8
60642: PUSH
60643: LD_INT 0
60645: ST_TO_ADDR
// if not nat then
60646: LD_VAR 0 7
60650: NOT
60651: IFFALSE 60655
// continue ;
60653: GO 60620
// for j in list [ nat ] do
60655: LD_ADDR_VAR 0 5
60659: PUSH
60660: LD_VAR 0 10
60664: PUSH
60665: LD_VAR 0 7
60669: ARRAY
60670: PUSH
60671: FOR_IN
60672: IFFALSE 60713
// if GetBWeapon ( i ) = j [ 1 ] then
60674: LD_VAR 0 4
60678: PPUSH
60679: CALL_OW 269
60683: PUSH
60684: LD_VAR 0 5
60688: PUSH
60689: LD_INT 1
60691: ARRAY
60692: EQUAL
60693: IFFALSE 60711
// begin weapon := j [ 2 ] ;
60695: LD_ADDR_VAR 0 8
60699: PUSH
60700: LD_VAR 0 5
60704: PUSH
60705: LD_INT 2
60707: ARRAY
60708: ST_TO_ADDR
// break ;
60709: GO 60713
// end ;
60711: GO 60671
60713: POP
60714: POP
// if not weapon then
60715: LD_VAR 0 8
60719: NOT
60720: IFFALSE 60724
// continue ;
60722: GO 60620
// for k in factories do
60724: LD_ADDR_VAR 0 6
60728: PUSH
60729: LD_VAR 0 2
60733: PUSH
60734: FOR_IN
60735: IFFALSE 60800
// begin weapons := AvailableWeaponList ( k ) ;
60737: LD_ADDR_VAR 0 9
60741: PUSH
60742: LD_VAR 0 6
60746: PPUSH
60747: CALL_OW 478
60751: ST_TO_ADDR
// if not weapons then
60752: LD_VAR 0 9
60756: NOT
60757: IFFALSE 60761
// continue ;
60759: GO 60734
// if weapon in weapons then
60761: LD_VAR 0 8
60765: PUSH
60766: LD_VAR 0 9
60770: IN
60771: IFFALSE 60798
// begin result := [ i , weapon ] ;
60773: LD_ADDR_VAR 0 3
60777: PUSH
60778: LD_VAR 0 4
60782: PUSH
60783: LD_VAR 0 8
60787: PUSH
60788: EMPTY
60789: LIST
60790: LIST
60791: ST_TO_ADDR
// exit ;
60792: POP
60793: POP
60794: POP
60795: POP
60796: GO 60806
// end ; end ;
60798: GO 60734
60800: POP
60801: POP
// end ;
60802: GO 60620
60804: POP
60805: POP
// end ;
60806: LD_VAR 0 3
60810: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
60811: LD_INT 0
60813: PPUSH
// if not side or side > 8 then
60814: LD_VAR 0 3
60818: NOT
60819: PUSH
60820: LD_VAR 0 3
60824: PUSH
60825: LD_INT 8
60827: GREATER
60828: OR
60829: IFFALSE 60833
// exit ;
60831: GO 60892
// if not range then
60833: LD_VAR 0 4
60837: NOT
60838: IFFALSE 60849
// range := - 12 ;
60840: LD_ADDR_VAR 0 4
60844: PUSH
60845: LD_INT 12
60847: NEG
60848: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
60849: LD_VAR 0 1
60853: PPUSH
60854: LD_VAR 0 2
60858: PPUSH
60859: LD_VAR 0 3
60863: PPUSH
60864: LD_VAR 0 4
60868: PPUSH
60869: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
60873: LD_VAR 0 1
60877: PPUSH
60878: LD_VAR 0 2
60882: PPUSH
60883: LD_VAR 0 3
60887: PPUSH
60888: CALL_OW 331
// end ;
60892: LD_VAR 0 5
60896: RET
// export function Video ( mode ) ; begin
60897: LD_INT 0
60899: PPUSH
// ingame_video = mode ;
60900: LD_ADDR_OWVAR 52
60904: PUSH
60905: LD_VAR 0 1
60909: ST_TO_ADDR
// interface_hidden = mode ;
60910: LD_ADDR_OWVAR 54
60914: PUSH
60915: LD_VAR 0 1
60919: ST_TO_ADDR
// end ;
60920: LD_VAR 0 2
60924: RET
// export function Join ( array , element ) ; begin
60925: LD_INT 0
60927: PPUSH
// result := Replace ( array , array + 1 , element ) ;
60928: LD_ADDR_VAR 0 3
60932: PUSH
60933: LD_VAR 0 1
60937: PPUSH
60938: LD_VAR 0 1
60942: PUSH
60943: LD_INT 1
60945: PLUS
60946: PPUSH
60947: LD_VAR 0 2
60951: PPUSH
60952: CALL_OW 1
60956: ST_TO_ADDR
// end ;
60957: LD_VAR 0 3
60961: RET
// export function JoinUnion ( array , element ) ; begin
60962: LD_INT 0
60964: PPUSH
// result := array union element ;
60965: LD_ADDR_VAR 0 3
60969: PUSH
60970: LD_VAR 0 1
60974: PUSH
60975: LD_VAR 0 2
60979: UNION
60980: ST_TO_ADDR
// end ;
60981: LD_VAR 0 3
60985: RET
// export function GetBehemoths ( side ) ; begin
60986: LD_INT 0
60988: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
60989: LD_ADDR_VAR 0 2
60993: PUSH
60994: LD_INT 22
60996: PUSH
60997: LD_VAR 0 1
61001: PUSH
61002: EMPTY
61003: LIST
61004: LIST
61005: PUSH
61006: LD_INT 31
61008: PUSH
61009: LD_INT 25
61011: PUSH
61012: EMPTY
61013: LIST
61014: LIST
61015: PUSH
61016: EMPTY
61017: LIST
61018: LIST
61019: PPUSH
61020: CALL_OW 69
61024: ST_TO_ADDR
// end ;
61025: LD_VAR 0 2
61029: RET
// export function Shuffle ( array ) ; var i , index ; begin
61030: LD_INT 0
61032: PPUSH
61033: PPUSH
61034: PPUSH
// result := [ ] ;
61035: LD_ADDR_VAR 0 2
61039: PUSH
61040: EMPTY
61041: ST_TO_ADDR
// if not array then
61042: LD_VAR 0 1
61046: NOT
61047: IFFALSE 61051
// exit ;
61049: GO 61150
// Randomize ;
61051: CALL_OW 10
// for i = array downto 1 do
61055: LD_ADDR_VAR 0 3
61059: PUSH
61060: DOUBLE
61061: LD_VAR 0 1
61065: INC
61066: ST_TO_ADDR
61067: LD_INT 1
61069: PUSH
61070: FOR_DOWNTO
61071: IFFALSE 61148
// begin index := rand ( 1 , array ) ;
61073: LD_ADDR_VAR 0 4
61077: PUSH
61078: LD_INT 1
61080: PPUSH
61081: LD_VAR 0 1
61085: PPUSH
61086: CALL_OW 12
61090: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61091: LD_ADDR_VAR 0 2
61095: PUSH
61096: LD_VAR 0 2
61100: PPUSH
61101: LD_VAR 0 2
61105: PUSH
61106: LD_INT 1
61108: PLUS
61109: PPUSH
61110: LD_VAR 0 1
61114: PUSH
61115: LD_VAR 0 4
61119: ARRAY
61120: PPUSH
61121: CALL_OW 2
61125: ST_TO_ADDR
// array := Delete ( array , index ) ;
61126: LD_ADDR_VAR 0 1
61130: PUSH
61131: LD_VAR 0 1
61135: PPUSH
61136: LD_VAR 0 4
61140: PPUSH
61141: CALL_OW 3
61145: ST_TO_ADDR
// end ;
61146: GO 61070
61148: POP
61149: POP
// end ;
61150: LD_VAR 0 2
61154: RET
// export function GetBaseMaterials ( base ) ; begin
61155: LD_INT 0
61157: PPUSH
// result := [ 0 , 0 , 0 ] ;
61158: LD_ADDR_VAR 0 2
61162: PUSH
61163: LD_INT 0
61165: PUSH
61166: LD_INT 0
61168: PUSH
61169: LD_INT 0
61171: PUSH
61172: EMPTY
61173: LIST
61174: LIST
61175: LIST
61176: ST_TO_ADDR
// if not base then
61177: LD_VAR 0 1
61181: NOT
61182: IFFALSE 61186
// exit ;
61184: GO 61235
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61186: LD_ADDR_VAR 0 2
61190: PUSH
61191: LD_VAR 0 1
61195: PPUSH
61196: LD_INT 1
61198: PPUSH
61199: CALL_OW 275
61203: PUSH
61204: LD_VAR 0 1
61208: PPUSH
61209: LD_INT 2
61211: PPUSH
61212: CALL_OW 275
61216: PUSH
61217: LD_VAR 0 1
61221: PPUSH
61222: LD_INT 3
61224: PPUSH
61225: CALL_OW 275
61229: PUSH
61230: EMPTY
61231: LIST
61232: LIST
61233: LIST
61234: ST_TO_ADDR
// end ;
61235: LD_VAR 0 2
61239: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
61240: LD_INT 0
61242: PPUSH
61243: PPUSH
// result := array ;
61244: LD_ADDR_VAR 0 3
61248: PUSH
61249: LD_VAR 0 1
61253: ST_TO_ADDR
// if size >= result then
61254: LD_VAR 0 2
61258: PUSH
61259: LD_VAR 0 3
61263: GREATEREQUAL
61264: IFFALSE 61268
// exit ;
61266: GO 61318
// if size then
61268: LD_VAR 0 2
61272: IFFALSE 61318
// for i := array downto size do
61274: LD_ADDR_VAR 0 4
61278: PUSH
61279: DOUBLE
61280: LD_VAR 0 1
61284: INC
61285: ST_TO_ADDR
61286: LD_VAR 0 2
61290: PUSH
61291: FOR_DOWNTO
61292: IFFALSE 61316
// result := Delete ( result , result ) ;
61294: LD_ADDR_VAR 0 3
61298: PUSH
61299: LD_VAR 0 3
61303: PPUSH
61304: LD_VAR 0 3
61308: PPUSH
61309: CALL_OW 3
61313: ST_TO_ADDR
61314: GO 61291
61316: POP
61317: POP
// end ;
61318: LD_VAR 0 3
61322: RET
// export function ComExit ( unit ) ; var tmp ; begin
61323: LD_INT 0
61325: PPUSH
61326: PPUSH
// if not IsInUnit ( unit ) then
61327: LD_VAR 0 1
61331: PPUSH
61332: CALL_OW 310
61336: NOT
61337: IFFALSE 61341
// exit ;
61339: GO 61401
// tmp := IsInUnit ( unit ) ;
61341: LD_ADDR_VAR 0 3
61345: PUSH
61346: LD_VAR 0 1
61350: PPUSH
61351: CALL_OW 310
61355: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
61356: LD_VAR 0 3
61360: PPUSH
61361: CALL_OW 247
61365: PUSH
61366: LD_INT 2
61368: EQUAL
61369: IFFALSE 61382
// ComExitVehicle ( unit ) else
61371: LD_VAR 0 1
61375: PPUSH
61376: CALL_OW 121
61380: GO 61391
// ComExitBuilding ( unit ) ;
61382: LD_VAR 0 1
61386: PPUSH
61387: CALL_OW 122
// result := tmp ;
61391: LD_ADDR_VAR 0 2
61395: PUSH
61396: LD_VAR 0 3
61400: ST_TO_ADDR
// end ;
61401: LD_VAR 0 2
61405: RET
// export function ComExitAll ( units ) ; var i ; begin
61406: LD_INT 0
61408: PPUSH
61409: PPUSH
// if not units then
61410: LD_VAR 0 1
61414: NOT
61415: IFFALSE 61419
// exit ;
61417: GO 61445
// for i in units do
61419: LD_ADDR_VAR 0 3
61423: PUSH
61424: LD_VAR 0 1
61428: PUSH
61429: FOR_IN
61430: IFFALSE 61443
// ComExit ( i ) ;
61432: LD_VAR 0 3
61436: PPUSH
61437: CALL 61323 0 1
61441: GO 61429
61443: POP
61444: POP
// end ;
61445: LD_VAR 0 2
61449: RET
// export function ResetHc ; begin
61450: LD_INT 0
61452: PPUSH
// InitHc ;
61453: CALL_OW 19
// hc_importance := 0 ;
61457: LD_ADDR_OWVAR 32
61461: PUSH
61462: LD_INT 0
61464: ST_TO_ADDR
// end ;
61465: LD_VAR 0 1
61469: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
61470: LD_INT 0
61472: PPUSH
61473: PPUSH
61474: PPUSH
// _x := ( x1 + x2 ) div 2 ;
61475: LD_ADDR_VAR 0 6
61479: PUSH
61480: LD_VAR 0 1
61484: PUSH
61485: LD_VAR 0 3
61489: PLUS
61490: PUSH
61491: LD_INT 2
61493: DIV
61494: ST_TO_ADDR
// if _x < 0 then
61495: LD_VAR 0 6
61499: PUSH
61500: LD_INT 0
61502: LESS
61503: IFFALSE 61520
// _x := _x * - 1 ;
61505: LD_ADDR_VAR 0 6
61509: PUSH
61510: LD_VAR 0 6
61514: PUSH
61515: LD_INT 1
61517: NEG
61518: MUL
61519: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
61520: LD_ADDR_VAR 0 7
61524: PUSH
61525: LD_VAR 0 2
61529: PUSH
61530: LD_VAR 0 4
61534: PLUS
61535: PUSH
61536: LD_INT 2
61538: DIV
61539: ST_TO_ADDR
// if _y < 0 then
61540: LD_VAR 0 7
61544: PUSH
61545: LD_INT 0
61547: LESS
61548: IFFALSE 61565
// _y := _y * - 1 ;
61550: LD_ADDR_VAR 0 7
61554: PUSH
61555: LD_VAR 0 7
61559: PUSH
61560: LD_INT 1
61562: NEG
61563: MUL
61564: ST_TO_ADDR
// result := [ _x , _y ] ;
61565: LD_ADDR_VAR 0 5
61569: PUSH
61570: LD_VAR 0 6
61574: PUSH
61575: LD_VAR 0 7
61579: PUSH
61580: EMPTY
61581: LIST
61582: LIST
61583: ST_TO_ADDR
// end ;
61584: LD_VAR 0 5
61588: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
61589: LD_INT 0
61591: PPUSH
61592: PPUSH
61593: PPUSH
61594: PPUSH
// task := GetTaskList ( unit ) ;
61595: LD_ADDR_VAR 0 7
61599: PUSH
61600: LD_VAR 0 1
61604: PPUSH
61605: CALL_OW 437
61609: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
61610: LD_VAR 0 7
61614: NOT
61615: PUSH
61616: LD_VAR 0 1
61620: PPUSH
61621: LD_VAR 0 2
61625: PPUSH
61626: CALL_OW 308
61630: NOT
61631: AND
61632: IFFALSE 61636
// exit ;
61634: GO 61754
// if IsInArea ( unit , area ) then
61636: LD_VAR 0 1
61640: PPUSH
61641: LD_VAR 0 2
61645: PPUSH
61646: CALL_OW 308
61650: IFFALSE 61668
// begin ComMoveToArea ( unit , goAway ) ;
61652: LD_VAR 0 1
61656: PPUSH
61657: LD_VAR 0 3
61661: PPUSH
61662: CALL_OW 113
// exit ;
61666: GO 61754
// end ; if task [ 1 ] [ 1 ] <> M then
61668: LD_VAR 0 7
61672: PUSH
61673: LD_INT 1
61675: ARRAY
61676: PUSH
61677: LD_INT 1
61679: ARRAY
61680: PUSH
61681: LD_STRING M
61683: NONEQUAL
61684: IFFALSE 61688
// exit ;
61686: GO 61754
// x := task [ 1 ] [ 2 ] ;
61688: LD_ADDR_VAR 0 5
61692: PUSH
61693: LD_VAR 0 7
61697: PUSH
61698: LD_INT 1
61700: ARRAY
61701: PUSH
61702: LD_INT 2
61704: ARRAY
61705: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
61706: LD_ADDR_VAR 0 6
61710: PUSH
61711: LD_VAR 0 7
61715: PUSH
61716: LD_INT 1
61718: ARRAY
61719: PUSH
61720: LD_INT 3
61722: ARRAY
61723: ST_TO_ADDR
// if InArea ( x , y , area ) then
61724: LD_VAR 0 5
61728: PPUSH
61729: LD_VAR 0 6
61733: PPUSH
61734: LD_VAR 0 2
61738: PPUSH
61739: CALL_OW 309
61743: IFFALSE 61754
// ComStop ( unit ) ;
61745: LD_VAR 0 1
61749: PPUSH
61750: CALL_OW 141
// end ;
61754: LD_VAR 0 4
61758: RET
// export function Abs ( value ) ; begin
61759: LD_INT 0
61761: PPUSH
// result := value ;
61762: LD_ADDR_VAR 0 2
61766: PUSH
61767: LD_VAR 0 1
61771: ST_TO_ADDR
// if value < 0 then
61772: LD_VAR 0 1
61776: PUSH
61777: LD_INT 0
61779: LESS
61780: IFFALSE 61797
// result := value * - 1 ;
61782: LD_ADDR_VAR 0 2
61786: PUSH
61787: LD_VAR 0 1
61791: PUSH
61792: LD_INT 1
61794: NEG
61795: MUL
61796: ST_TO_ADDR
// end ;
61797: LD_VAR 0 2
61801: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
61802: LD_INT 0
61804: PPUSH
61805: PPUSH
61806: PPUSH
61807: PPUSH
61808: PPUSH
61809: PPUSH
61810: PPUSH
61811: PPUSH
// if not unit or not building then
61812: LD_VAR 0 1
61816: NOT
61817: PUSH
61818: LD_VAR 0 2
61822: NOT
61823: OR
61824: IFFALSE 61828
// exit ;
61826: GO 62054
// x := GetX ( building ) ;
61828: LD_ADDR_VAR 0 4
61832: PUSH
61833: LD_VAR 0 2
61837: PPUSH
61838: CALL_OW 250
61842: ST_TO_ADDR
// y := GetY ( building ) ;
61843: LD_ADDR_VAR 0 6
61847: PUSH
61848: LD_VAR 0 2
61852: PPUSH
61853: CALL_OW 251
61857: ST_TO_ADDR
// d := GetDir ( building ) ;
61858: LD_ADDR_VAR 0 8
61862: PUSH
61863: LD_VAR 0 2
61867: PPUSH
61868: CALL_OW 254
61872: ST_TO_ADDR
// r := 4 ;
61873: LD_ADDR_VAR 0 9
61877: PUSH
61878: LD_INT 4
61880: ST_TO_ADDR
// for i := 1 to 5 do
61881: LD_ADDR_VAR 0 10
61885: PUSH
61886: DOUBLE
61887: LD_INT 1
61889: DEC
61890: ST_TO_ADDR
61891: LD_INT 5
61893: PUSH
61894: FOR_TO
61895: IFFALSE 62052
// begin _x := ShiftX ( x , d , r + i ) ;
61897: LD_ADDR_VAR 0 5
61901: PUSH
61902: LD_VAR 0 4
61906: PPUSH
61907: LD_VAR 0 8
61911: PPUSH
61912: LD_VAR 0 9
61916: PUSH
61917: LD_VAR 0 10
61921: PLUS
61922: PPUSH
61923: CALL_OW 272
61927: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
61928: LD_ADDR_VAR 0 7
61932: PUSH
61933: LD_VAR 0 6
61937: PPUSH
61938: LD_VAR 0 8
61942: PPUSH
61943: LD_VAR 0 9
61947: PUSH
61948: LD_VAR 0 10
61952: PLUS
61953: PPUSH
61954: CALL_OW 273
61958: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
61959: LD_VAR 0 5
61963: PPUSH
61964: LD_VAR 0 7
61968: PPUSH
61969: CALL_OW 488
61973: PUSH
61974: LD_VAR 0 5
61978: PPUSH
61979: LD_VAR 0 7
61983: PPUSH
61984: CALL_OW 428
61988: PPUSH
61989: CALL_OW 247
61993: PUSH
61994: LD_INT 3
61996: PUSH
61997: LD_INT 2
61999: PUSH
62000: EMPTY
62001: LIST
62002: LIST
62003: IN
62004: NOT
62005: AND
62006: IFFALSE 62050
// begin ComMoveXY ( unit , _x , _y ) ;
62008: LD_VAR 0 1
62012: PPUSH
62013: LD_VAR 0 5
62017: PPUSH
62018: LD_VAR 0 7
62022: PPUSH
62023: CALL_OW 111
// result := [ _x , _y ] ;
62027: LD_ADDR_VAR 0 3
62031: PUSH
62032: LD_VAR 0 5
62036: PUSH
62037: LD_VAR 0 7
62041: PUSH
62042: EMPTY
62043: LIST
62044: LIST
62045: ST_TO_ADDR
// exit ;
62046: POP
62047: POP
62048: GO 62054
// end ; end ;
62050: GO 61894
62052: POP
62053: POP
// end ;
62054: LD_VAR 0 3
62058: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
62059: LD_INT 0
62061: PPUSH
62062: PPUSH
62063: PPUSH
// result := 0 ;
62064: LD_ADDR_VAR 0 3
62068: PUSH
62069: LD_INT 0
62071: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
62072: LD_VAR 0 1
62076: PUSH
62077: LD_INT 0
62079: LESS
62080: PUSH
62081: LD_VAR 0 1
62085: PUSH
62086: LD_INT 8
62088: GREATER
62089: OR
62090: PUSH
62091: LD_VAR 0 2
62095: PUSH
62096: LD_INT 0
62098: LESS
62099: OR
62100: PUSH
62101: LD_VAR 0 2
62105: PUSH
62106: LD_INT 8
62108: GREATER
62109: OR
62110: IFFALSE 62114
// exit ;
62112: GO 62189
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
62114: LD_ADDR_VAR 0 4
62118: PUSH
62119: LD_INT 22
62121: PUSH
62122: LD_VAR 0 2
62126: PUSH
62127: EMPTY
62128: LIST
62129: LIST
62130: PPUSH
62131: CALL_OW 69
62135: PUSH
62136: FOR_IN
62137: IFFALSE 62187
// begin un := UnitShoot ( i ) ;
62139: LD_ADDR_VAR 0 5
62143: PUSH
62144: LD_VAR 0 4
62148: PPUSH
62149: CALL_OW 504
62153: ST_TO_ADDR
// if GetSide ( un ) = side1 then
62154: LD_VAR 0 5
62158: PPUSH
62159: CALL_OW 255
62163: PUSH
62164: LD_VAR 0 1
62168: EQUAL
62169: IFFALSE 62185
// begin result := un ;
62171: LD_ADDR_VAR 0 3
62175: PUSH
62176: LD_VAR 0 5
62180: ST_TO_ADDR
// exit ;
62181: POP
62182: POP
62183: GO 62189
// end ; end ;
62185: GO 62136
62187: POP
62188: POP
// end ;
62189: LD_VAR 0 3
62193: RET
// export function GetCargoBay ( units ) ; begin
62194: LD_INT 0
62196: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
62197: LD_ADDR_VAR 0 2
62201: PUSH
62202: LD_VAR 0 1
62206: PPUSH
62207: LD_INT 2
62209: PUSH
62210: LD_INT 34
62212: PUSH
62213: LD_INT 12
62215: PUSH
62216: EMPTY
62217: LIST
62218: LIST
62219: PUSH
62220: LD_INT 34
62222: PUSH
62223: LD_INT 51
62225: PUSH
62226: EMPTY
62227: LIST
62228: LIST
62229: PUSH
62230: LD_INT 34
62232: PUSH
62233: LD_INT 32
62235: PUSH
62236: EMPTY
62237: LIST
62238: LIST
62239: PUSH
62240: LD_INT 34
62242: PUSH
62243: LD_INT 89
62245: PUSH
62246: EMPTY
62247: LIST
62248: LIST
62249: PUSH
62250: EMPTY
62251: LIST
62252: LIST
62253: LIST
62254: LIST
62255: LIST
62256: PPUSH
62257: CALL_OW 72
62261: ST_TO_ADDR
// end ;
62262: LD_VAR 0 2
62266: RET
// export function Negate ( value ) ; begin
62267: LD_INT 0
62269: PPUSH
// result := not value ;
62270: LD_ADDR_VAR 0 2
62274: PUSH
62275: LD_VAR 0 1
62279: NOT
62280: ST_TO_ADDR
// end ;
62281: LD_VAR 0 2
62285: RET
// export function Inc ( value ) ; begin
62286: LD_INT 0
62288: PPUSH
// result := value + 1 ;
62289: LD_ADDR_VAR 0 2
62293: PUSH
62294: LD_VAR 0 1
62298: PUSH
62299: LD_INT 1
62301: PLUS
62302: ST_TO_ADDR
// end ;
62303: LD_VAR 0 2
62307: RET
// export function Dec ( value ) ; begin
62308: LD_INT 0
62310: PPUSH
// result := value - 1 ;
62311: LD_ADDR_VAR 0 2
62315: PUSH
62316: LD_VAR 0 1
62320: PUSH
62321: LD_INT 1
62323: MINUS
62324: ST_TO_ADDR
// end ;
62325: LD_VAR 0 2
62329: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
62330: LD_INT 0
62332: PPUSH
62333: PPUSH
62334: PPUSH
62335: PPUSH
62336: PPUSH
62337: PPUSH
62338: PPUSH
62339: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
62340: LD_VAR 0 1
62344: PPUSH
62345: LD_VAR 0 2
62349: PPUSH
62350: CALL_OW 488
62354: NOT
62355: PUSH
62356: LD_VAR 0 3
62360: PPUSH
62361: LD_VAR 0 4
62365: PPUSH
62366: CALL_OW 488
62370: NOT
62371: OR
62372: IFFALSE 62385
// begin result := - 1 ;
62374: LD_ADDR_VAR 0 5
62378: PUSH
62379: LD_INT 1
62381: NEG
62382: ST_TO_ADDR
// exit ;
62383: GO 62620
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
62385: LD_ADDR_VAR 0 12
62389: PUSH
62390: LD_VAR 0 1
62394: PPUSH
62395: LD_VAR 0 2
62399: PPUSH
62400: LD_VAR 0 3
62404: PPUSH
62405: LD_VAR 0 4
62409: PPUSH
62410: CALL 61470 0 4
62414: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
62415: LD_ADDR_VAR 0 11
62419: PUSH
62420: LD_VAR 0 1
62424: PPUSH
62425: LD_VAR 0 2
62429: PPUSH
62430: LD_VAR 0 12
62434: PUSH
62435: LD_INT 1
62437: ARRAY
62438: PPUSH
62439: LD_VAR 0 12
62443: PUSH
62444: LD_INT 2
62446: ARRAY
62447: PPUSH
62448: CALL_OW 298
62452: ST_TO_ADDR
// distance := 9999 ;
62453: LD_ADDR_VAR 0 10
62457: PUSH
62458: LD_INT 9999
62460: ST_TO_ADDR
// for i := 0 to 5 do
62461: LD_ADDR_VAR 0 6
62465: PUSH
62466: DOUBLE
62467: LD_INT 0
62469: DEC
62470: ST_TO_ADDR
62471: LD_INT 5
62473: PUSH
62474: FOR_TO
62475: IFFALSE 62618
// begin _x := ShiftX ( x1 , i , centerDist ) ;
62477: LD_ADDR_VAR 0 7
62481: PUSH
62482: LD_VAR 0 1
62486: PPUSH
62487: LD_VAR 0 6
62491: PPUSH
62492: LD_VAR 0 11
62496: PPUSH
62497: CALL_OW 272
62501: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
62502: LD_ADDR_VAR 0 8
62506: PUSH
62507: LD_VAR 0 2
62511: PPUSH
62512: LD_VAR 0 6
62516: PPUSH
62517: LD_VAR 0 11
62521: PPUSH
62522: CALL_OW 273
62526: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
62527: LD_VAR 0 7
62531: PPUSH
62532: LD_VAR 0 8
62536: PPUSH
62537: CALL_OW 488
62541: NOT
62542: IFFALSE 62546
// continue ;
62544: GO 62474
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
62546: LD_ADDR_VAR 0 9
62550: PUSH
62551: LD_VAR 0 12
62555: PUSH
62556: LD_INT 1
62558: ARRAY
62559: PPUSH
62560: LD_VAR 0 12
62564: PUSH
62565: LD_INT 2
62567: ARRAY
62568: PPUSH
62569: LD_VAR 0 7
62573: PPUSH
62574: LD_VAR 0 8
62578: PPUSH
62579: CALL_OW 298
62583: ST_TO_ADDR
// if tmp < distance then
62584: LD_VAR 0 9
62588: PUSH
62589: LD_VAR 0 10
62593: LESS
62594: IFFALSE 62616
// begin result := i ;
62596: LD_ADDR_VAR 0 5
62600: PUSH
62601: LD_VAR 0 6
62605: ST_TO_ADDR
// distance := tmp ;
62606: LD_ADDR_VAR 0 10
62610: PUSH
62611: LD_VAR 0 9
62615: ST_TO_ADDR
// end ; end ;
62616: GO 62474
62618: POP
62619: POP
// end ;
62620: LD_VAR 0 5
62624: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62625: LD_INT 0
62627: PPUSH
62628: PPUSH
// if not driver or not IsInUnit ( driver ) then
62629: LD_VAR 0 1
62633: NOT
62634: PUSH
62635: LD_VAR 0 1
62639: PPUSH
62640: CALL_OW 310
62644: NOT
62645: OR
62646: IFFALSE 62650
// exit ;
62648: GO 62740
// vehicle := IsInUnit ( driver ) ;
62650: LD_ADDR_VAR 0 3
62654: PUSH
62655: LD_VAR 0 1
62659: PPUSH
62660: CALL_OW 310
62664: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62665: LD_VAR 0 1
62669: PPUSH
62670: LD_STRING \
62672: PUSH
62673: LD_INT 0
62675: PUSH
62676: LD_INT 0
62678: PUSH
62679: LD_INT 0
62681: PUSH
62682: LD_INT 0
62684: PUSH
62685: LD_INT 0
62687: PUSH
62688: LD_INT 0
62690: PUSH
62691: EMPTY
62692: LIST
62693: LIST
62694: LIST
62695: LIST
62696: LIST
62697: LIST
62698: LIST
62699: PUSH
62700: LD_STRING E
62702: PUSH
62703: LD_INT 0
62705: PUSH
62706: LD_INT 0
62708: PUSH
62709: LD_VAR 0 3
62713: PUSH
62714: LD_INT 0
62716: PUSH
62717: LD_INT 0
62719: PUSH
62720: LD_INT 0
62722: PUSH
62723: EMPTY
62724: LIST
62725: LIST
62726: LIST
62727: LIST
62728: LIST
62729: LIST
62730: LIST
62731: PUSH
62732: EMPTY
62733: LIST
62734: LIST
62735: PPUSH
62736: CALL_OW 446
// end ;
62740: LD_VAR 0 2
62744: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62745: LD_INT 0
62747: PPUSH
62748: PPUSH
// if not driver or not IsInUnit ( driver ) then
62749: LD_VAR 0 1
62753: NOT
62754: PUSH
62755: LD_VAR 0 1
62759: PPUSH
62760: CALL_OW 310
62764: NOT
62765: OR
62766: IFFALSE 62770
// exit ;
62768: GO 62860
// vehicle := IsInUnit ( driver ) ;
62770: LD_ADDR_VAR 0 3
62774: PUSH
62775: LD_VAR 0 1
62779: PPUSH
62780: CALL_OW 310
62784: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62785: LD_VAR 0 1
62789: PPUSH
62790: LD_STRING \
62792: PUSH
62793: LD_INT 0
62795: PUSH
62796: LD_INT 0
62798: PUSH
62799: LD_INT 0
62801: PUSH
62802: LD_INT 0
62804: PUSH
62805: LD_INT 0
62807: PUSH
62808: LD_INT 0
62810: PUSH
62811: EMPTY
62812: LIST
62813: LIST
62814: LIST
62815: LIST
62816: LIST
62817: LIST
62818: LIST
62819: PUSH
62820: LD_STRING E
62822: PUSH
62823: LD_INT 0
62825: PUSH
62826: LD_INT 0
62828: PUSH
62829: LD_VAR 0 3
62833: PUSH
62834: LD_INT 0
62836: PUSH
62837: LD_INT 0
62839: PUSH
62840: LD_INT 0
62842: PUSH
62843: EMPTY
62844: LIST
62845: LIST
62846: LIST
62847: LIST
62848: LIST
62849: LIST
62850: LIST
62851: PUSH
62852: EMPTY
62853: LIST
62854: LIST
62855: PPUSH
62856: CALL_OW 447
// end ;
62860: LD_VAR 0 2
62864: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
62865: LD_INT 0
62867: PPUSH
62868: PPUSH
62869: PPUSH
// tmp := [ ] ;
62870: LD_ADDR_VAR 0 5
62874: PUSH
62875: EMPTY
62876: ST_TO_ADDR
// for i in units do
62877: LD_ADDR_VAR 0 4
62881: PUSH
62882: LD_VAR 0 1
62886: PUSH
62887: FOR_IN
62888: IFFALSE 62926
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
62890: LD_ADDR_VAR 0 5
62894: PUSH
62895: LD_VAR 0 5
62899: PPUSH
62900: LD_VAR 0 5
62904: PUSH
62905: LD_INT 1
62907: PLUS
62908: PPUSH
62909: LD_VAR 0 4
62913: PPUSH
62914: CALL_OW 256
62918: PPUSH
62919: CALL_OW 2
62923: ST_TO_ADDR
62924: GO 62887
62926: POP
62927: POP
// if not tmp then
62928: LD_VAR 0 5
62932: NOT
62933: IFFALSE 62937
// exit ;
62935: GO 62985
// if asc then
62937: LD_VAR 0 2
62941: IFFALSE 62965
// result := SortListByListAsc ( units , tmp ) else
62943: LD_ADDR_VAR 0 3
62947: PUSH
62948: LD_VAR 0 1
62952: PPUSH
62953: LD_VAR 0 5
62957: PPUSH
62958: CALL_OW 76
62962: ST_TO_ADDR
62963: GO 62985
// result := SortListByListDesc ( units , tmp ) ;
62965: LD_ADDR_VAR 0 3
62969: PUSH
62970: LD_VAR 0 1
62974: PPUSH
62975: LD_VAR 0 5
62979: PPUSH
62980: CALL_OW 77
62984: ST_TO_ADDR
// end ;
62985: LD_VAR 0 3
62989: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
62990: LD_INT 0
62992: PPUSH
62993: PPUSH
// task := GetTaskList ( mech ) ;
62994: LD_ADDR_VAR 0 4
62998: PUSH
62999: LD_VAR 0 1
63003: PPUSH
63004: CALL_OW 437
63008: ST_TO_ADDR
// if not task then
63009: LD_VAR 0 4
63013: NOT
63014: IFFALSE 63018
// exit ;
63016: GO 63060
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
63018: LD_ADDR_VAR 0 3
63022: PUSH
63023: LD_VAR 0 4
63027: PUSH
63028: LD_INT 1
63030: ARRAY
63031: PUSH
63032: LD_INT 1
63034: ARRAY
63035: PUSH
63036: LD_STRING r
63038: EQUAL
63039: PUSH
63040: LD_VAR 0 4
63044: PUSH
63045: LD_INT 1
63047: ARRAY
63048: PUSH
63049: LD_INT 4
63051: ARRAY
63052: PUSH
63053: LD_VAR 0 2
63057: EQUAL
63058: AND
63059: ST_TO_ADDR
// end ;
63060: LD_VAR 0 3
63064: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
63065: LD_INT 0
63067: PPUSH
// SetDir ( unit , d ) ;
63068: LD_VAR 0 1
63072: PPUSH
63073: LD_VAR 0 4
63077: PPUSH
63078: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
63082: LD_VAR 0 1
63086: PPUSH
63087: LD_VAR 0 2
63091: PPUSH
63092: LD_VAR 0 3
63096: PPUSH
63097: LD_VAR 0 5
63101: PPUSH
63102: CALL_OW 48
// end ;
63106: LD_VAR 0 6
63110: RET
// export function ToNaturalNumber ( number ) ; begin
63111: LD_INT 0
63113: PPUSH
// result := number div 1 ;
63114: LD_ADDR_VAR 0 2
63118: PUSH
63119: LD_VAR 0 1
63123: PUSH
63124: LD_INT 1
63126: DIV
63127: ST_TO_ADDR
// if number < 0 then
63128: LD_VAR 0 1
63132: PUSH
63133: LD_INT 0
63135: LESS
63136: IFFALSE 63146
// result := 0 ;
63138: LD_ADDR_VAR 0 2
63142: PUSH
63143: LD_INT 0
63145: ST_TO_ADDR
// end ;
63146: LD_VAR 0 2
63150: RET
// export function SortByClass ( units , class ) ; var un ; begin
63151: LD_INT 0
63153: PPUSH
63154: PPUSH
// if not units or not class then
63155: LD_VAR 0 1
63159: NOT
63160: PUSH
63161: LD_VAR 0 2
63165: NOT
63166: OR
63167: IFFALSE 63171
// exit ;
63169: GO 63266
// result := [ ] ;
63171: LD_ADDR_VAR 0 3
63175: PUSH
63176: EMPTY
63177: ST_TO_ADDR
// for un in units do
63178: LD_ADDR_VAR 0 4
63182: PUSH
63183: LD_VAR 0 1
63187: PUSH
63188: FOR_IN
63189: IFFALSE 63264
// if GetClass ( un ) = class then
63191: LD_VAR 0 4
63195: PPUSH
63196: CALL_OW 257
63200: PUSH
63201: LD_VAR 0 2
63205: EQUAL
63206: IFFALSE 63233
// result := Insert ( result , 1 , un ) else
63208: LD_ADDR_VAR 0 3
63212: PUSH
63213: LD_VAR 0 3
63217: PPUSH
63218: LD_INT 1
63220: PPUSH
63221: LD_VAR 0 4
63225: PPUSH
63226: CALL_OW 2
63230: ST_TO_ADDR
63231: GO 63262
// result := Replace ( result , result + 1 , un ) ;
63233: LD_ADDR_VAR 0 3
63237: PUSH
63238: LD_VAR 0 3
63242: PPUSH
63243: LD_VAR 0 3
63247: PUSH
63248: LD_INT 1
63250: PLUS
63251: PPUSH
63252: LD_VAR 0 4
63256: PPUSH
63257: CALL_OW 1
63261: ST_TO_ADDR
63262: GO 63188
63264: POP
63265: POP
// end ;
63266: LD_VAR 0 3
63270: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
63271: LD_INT 0
63273: PPUSH
63274: PPUSH
63275: PPUSH
63276: PPUSH
63277: PPUSH
63278: PPUSH
63279: PPUSH
// result := [ ] ;
63280: LD_ADDR_VAR 0 4
63284: PUSH
63285: EMPTY
63286: ST_TO_ADDR
// if x - r < 0 then
63287: LD_VAR 0 1
63291: PUSH
63292: LD_VAR 0 3
63296: MINUS
63297: PUSH
63298: LD_INT 0
63300: LESS
63301: IFFALSE 63313
// min_x := 0 else
63303: LD_ADDR_VAR 0 8
63307: PUSH
63308: LD_INT 0
63310: ST_TO_ADDR
63311: GO 63329
// min_x := x - r ;
63313: LD_ADDR_VAR 0 8
63317: PUSH
63318: LD_VAR 0 1
63322: PUSH
63323: LD_VAR 0 3
63327: MINUS
63328: ST_TO_ADDR
// if y - r < 0 then
63329: LD_VAR 0 2
63333: PUSH
63334: LD_VAR 0 3
63338: MINUS
63339: PUSH
63340: LD_INT 0
63342: LESS
63343: IFFALSE 63355
// min_y := 0 else
63345: LD_ADDR_VAR 0 7
63349: PUSH
63350: LD_INT 0
63352: ST_TO_ADDR
63353: GO 63371
// min_y := y - r ;
63355: LD_ADDR_VAR 0 7
63359: PUSH
63360: LD_VAR 0 2
63364: PUSH
63365: LD_VAR 0 3
63369: MINUS
63370: ST_TO_ADDR
// max_x := x + r ;
63371: LD_ADDR_VAR 0 9
63375: PUSH
63376: LD_VAR 0 1
63380: PUSH
63381: LD_VAR 0 3
63385: PLUS
63386: ST_TO_ADDR
// max_y := y + r ;
63387: LD_ADDR_VAR 0 10
63391: PUSH
63392: LD_VAR 0 2
63396: PUSH
63397: LD_VAR 0 3
63401: PLUS
63402: ST_TO_ADDR
// for _x = min_x to max_x do
63403: LD_ADDR_VAR 0 5
63407: PUSH
63408: DOUBLE
63409: LD_VAR 0 8
63413: DEC
63414: ST_TO_ADDR
63415: LD_VAR 0 9
63419: PUSH
63420: FOR_TO
63421: IFFALSE 63522
// for _y = min_y to max_y do
63423: LD_ADDR_VAR 0 6
63427: PUSH
63428: DOUBLE
63429: LD_VAR 0 7
63433: DEC
63434: ST_TO_ADDR
63435: LD_VAR 0 10
63439: PUSH
63440: FOR_TO
63441: IFFALSE 63518
// begin if not ValidHex ( _x , _y ) then
63443: LD_VAR 0 5
63447: PPUSH
63448: LD_VAR 0 6
63452: PPUSH
63453: CALL_OW 488
63457: NOT
63458: IFFALSE 63462
// continue ;
63460: GO 63440
// if GetResourceTypeXY ( _x , _y ) then
63462: LD_VAR 0 5
63466: PPUSH
63467: LD_VAR 0 6
63471: PPUSH
63472: CALL_OW 283
63476: IFFALSE 63516
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
63478: LD_ADDR_VAR 0 4
63482: PUSH
63483: LD_VAR 0 4
63487: PPUSH
63488: LD_VAR 0 4
63492: PUSH
63493: LD_INT 1
63495: PLUS
63496: PPUSH
63497: LD_VAR 0 5
63501: PUSH
63502: LD_VAR 0 6
63506: PUSH
63507: EMPTY
63508: LIST
63509: LIST
63510: PPUSH
63511: CALL_OW 1
63515: ST_TO_ADDR
// end ;
63516: GO 63440
63518: POP
63519: POP
63520: GO 63420
63522: POP
63523: POP
// end ;
63524: LD_VAR 0 4
63528: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
63529: LD_INT 0
63531: PPUSH
63532: PPUSH
63533: PPUSH
63534: PPUSH
63535: PPUSH
63536: PPUSH
63537: PPUSH
63538: PPUSH
// if not units then
63539: LD_VAR 0 1
63543: NOT
63544: IFFALSE 63548
// exit ;
63546: GO 64072
// result := UnitFilter ( units , [ f_ok ] ) ;
63548: LD_ADDR_VAR 0 3
63552: PUSH
63553: LD_VAR 0 1
63557: PPUSH
63558: LD_INT 50
63560: PUSH
63561: EMPTY
63562: LIST
63563: PPUSH
63564: CALL_OW 72
63568: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
63569: LD_ADDR_VAR 0 8
63573: PUSH
63574: LD_VAR 0 1
63578: PUSH
63579: LD_INT 1
63581: ARRAY
63582: PPUSH
63583: CALL_OW 255
63587: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
63588: LD_ADDR_VAR 0 10
63592: PUSH
63593: LD_INT 29
63595: PUSH
63596: LD_INT 91
63598: PUSH
63599: LD_INT 49
63601: PUSH
63602: EMPTY
63603: LIST
63604: LIST
63605: LIST
63606: ST_TO_ADDR
// if not result then
63607: LD_VAR 0 3
63611: NOT
63612: IFFALSE 63616
// exit ;
63614: GO 64072
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
63616: LD_ADDR_VAR 0 5
63620: PUSH
63621: LD_INT 81
63623: PUSH
63624: LD_VAR 0 8
63628: PUSH
63629: EMPTY
63630: LIST
63631: LIST
63632: PPUSH
63633: CALL_OW 69
63637: ST_TO_ADDR
// for i in result do
63638: LD_ADDR_VAR 0 4
63642: PUSH
63643: LD_VAR 0 3
63647: PUSH
63648: FOR_IN
63649: IFFALSE 64070
// begin tag := GetTag ( i ) + 1 ;
63651: LD_ADDR_VAR 0 9
63655: PUSH
63656: LD_VAR 0 4
63660: PPUSH
63661: CALL_OW 110
63665: PUSH
63666: LD_INT 1
63668: PLUS
63669: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
63670: LD_ADDR_VAR 0 7
63674: PUSH
63675: LD_VAR 0 4
63679: PPUSH
63680: CALL_OW 250
63684: PPUSH
63685: LD_VAR 0 4
63689: PPUSH
63690: CALL_OW 251
63694: PPUSH
63695: LD_INT 6
63697: PPUSH
63698: CALL 63271 0 3
63702: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
63703: LD_VAR 0 4
63707: PPUSH
63708: CALL_OW 247
63712: PUSH
63713: LD_INT 2
63715: EQUAL
63716: PUSH
63717: LD_VAR 0 7
63721: AND
63722: PUSH
63723: LD_VAR 0 4
63727: PPUSH
63728: CALL_OW 264
63732: PUSH
63733: LD_VAR 0 10
63737: IN
63738: NOT
63739: AND
63740: IFFALSE 63779
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
63742: LD_VAR 0 4
63746: PPUSH
63747: LD_VAR 0 7
63751: PUSH
63752: LD_INT 1
63754: ARRAY
63755: PUSH
63756: LD_INT 1
63758: ARRAY
63759: PPUSH
63760: LD_VAR 0 7
63764: PUSH
63765: LD_INT 1
63767: ARRAY
63768: PUSH
63769: LD_INT 2
63771: ARRAY
63772: PPUSH
63773: CALL_OW 116
63777: GO 64068
// if path > tag then
63779: LD_VAR 0 2
63783: PUSH
63784: LD_VAR 0 9
63788: GREATER
63789: IFFALSE 63997
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
63791: LD_ADDR_VAR 0 6
63795: PUSH
63796: LD_VAR 0 5
63800: PPUSH
63801: LD_INT 91
63803: PUSH
63804: LD_VAR 0 4
63808: PUSH
63809: LD_INT 8
63811: PUSH
63812: EMPTY
63813: LIST
63814: LIST
63815: LIST
63816: PPUSH
63817: CALL_OW 72
63821: ST_TO_ADDR
// if nearEnemy then
63822: LD_VAR 0 6
63826: IFFALSE 63895
// begin if GetWeapon ( i ) = ru_time_lapser then
63828: LD_VAR 0 4
63832: PPUSH
63833: CALL_OW 264
63837: PUSH
63838: LD_INT 49
63840: EQUAL
63841: IFFALSE 63869
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
63843: LD_VAR 0 4
63847: PPUSH
63848: LD_VAR 0 6
63852: PPUSH
63853: LD_VAR 0 4
63857: PPUSH
63858: CALL_OW 74
63862: PPUSH
63863: CALL_OW 112
63867: GO 63893
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
63869: LD_VAR 0 4
63873: PPUSH
63874: LD_VAR 0 6
63878: PPUSH
63879: LD_VAR 0 4
63883: PPUSH
63884: CALL_OW 74
63888: PPUSH
63889: CALL_OW 115
// end else
63893: GO 63995
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
63895: LD_VAR 0 4
63899: PPUSH
63900: LD_VAR 0 2
63904: PUSH
63905: LD_VAR 0 9
63909: ARRAY
63910: PUSH
63911: LD_INT 1
63913: ARRAY
63914: PPUSH
63915: LD_VAR 0 2
63919: PUSH
63920: LD_VAR 0 9
63924: ARRAY
63925: PUSH
63926: LD_INT 2
63928: ARRAY
63929: PPUSH
63930: CALL_OW 297
63934: PUSH
63935: LD_INT 6
63937: GREATER
63938: IFFALSE 63981
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
63940: LD_VAR 0 4
63944: PPUSH
63945: LD_VAR 0 2
63949: PUSH
63950: LD_VAR 0 9
63954: ARRAY
63955: PUSH
63956: LD_INT 1
63958: ARRAY
63959: PPUSH
63960: LD_VAR 0 2
63964: PUSH
63965: LD_VAR 0 9
63969: ARRAY
63970: PUSH
63971: LD_INT 2
63973: ARRAY
63974: PPUSH
63975: CALL_OW 114
63979: GO 63995
// SetTag ( i , tag ) ;
63981: LD_VAR 0 4
63985: PPUSH
63986: LD_VAR 0 9
63990: PPUSH
63991: CALL_OW 109
// end else
63995: GO 64068
// if enemy then
63997: LD_VAR 0 5
64001: IFFALSE 64068
// begin if GetWeapon ( i ) = ru_time_lapser then
64003: LD_VAR 0 4
64007: PPUSH
64008: CALL_OW 264
64012: PUSH
64013: LD_INT 49
64015: EQUAL
64016: IFFALSE 64044
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
64018: LD_VAR 0 4
64022: PPUSH
64023: LD_VAR 0 5
64027: PPUSH
64028: LD_VAR 0 4
64032: PPUSH
64033: CALL_OW 74
64037: PPUSH
64038: CALL_OW 112
64042: GO 64068
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
64044: LD_VAR 0 4
64048: PPUSH
64049: LD_VAR 0 5
64053: PPUSH
64054: LD_VAR 0 4
64058: PPUSH
64059: CALL_OW 74
64063: PPUSH
64064: CALL_OW 115
// end ; end ;
64068: GO 63648
64070: POP
64071: POP
// end ;
64072: LD_VAR 0 3
64076: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
64077: LD_INT 0
64079: PPUSH
64080: PPUSH
64081: PPUSH
// if not unit or IsInUnit ( unit ) then
64082: LD_VAR 0 1
64086: NOT
64087: PUSH
64088: LD_VAR 0 1
64092: PPUSH
64093: CALL_OW 310
64097: OR
64098: IFFALSE 64102
// exit ;
64100: GO 64193
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
64102: LD_ADDR_VAR 0 4
64106: PUSH
64107: LD_VAR 0 1
64111: PPUSH
64112: CALL_OW 250
64116: PPUSH
64117: LD_VAR 0 2
64121: PPUSH
64122: LD_INT 1
64124: PPUSH
64125: CALL_OW 272
64129: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
64130: LD_ADDR_VAR 0 5
64134: PUSH
64135: LD_VAR 0 1
64139: PPUSH
64140: CALL_OW 251
64144: PPUSH
64145: LD_VAR 0 2
64149: PPUSH
64150: LD_INT 1
64152: PPUSH
64153: CALL_OW 273
64157: ST_TO_ADDR
// if ValidHex ( x , y ) then
64158: LD_VAR 0 4
64162: PPUSH
64163: LD_VAR 0 5
64167: PPUSH
64168: CALL_OW 488
64172: IFFALSE 64193
// ComTurnXY ( unit , x , y ) ;
64174: LD_VAR 0 1
64178: PPUSH
64179: LD_VAR 0 4
64183: PPUSH
64184: LD_VAR 0 5
64188: PPUSH
64189: CALL_OW 118
// end ;
64193: LD_VAR 0 3
64197: RET
// export function SeeUnits ( side , units ) ; var i ; begin
64198: LD_INT 0
64200: PPUSH
64201: PPUSH
// result := false ;
64202: LD_ADDR_VAR 0 3
64206: PUSH
64207: LD_INT 0
64209: ST_TO_ADDR
// if not units then
64210: LD_VAR 0 2
64214: NOT
64215: IFFALSE 64219
// exit ;
64217: GO 64264
// for i in units do
64219: LD_ADDR_VAR 0 4
64223: PUSH
64224: LD_VAR 0 2
64228: PUSH
64229: FOR_IN
64230: IFFALSE 64262
// if See ( side , i ) then
64232: LD_VAR 0 1
64236: PPUSH
64237: LD_VAR 0 4
64241: PPUSH
64242: CALL_OW 292
64246: IFFALSE 64260
// begin result := true ;
64248: LD_ADDR_VAR 0 3
64252: PUSH
64253: LD_INT 1
64255: ST_TO_ADDR
// exit ;
64256: POP
64257: POP
64258: GO 64264
// end ;
64260: GO 64229
64262: POP
64263: POP
// end ;
64264: LD_VAR 0 3
64268: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
64269: LD_INT 0
64271: PPUSH
64272: PPUSH
64273: PPUSH
64274: PPUSH
// if not unit or not points then
64275: LD_VAR 0 1
64279: NOT
64280: PUSH
64281: LD_VAR 0 2
64285: NOT
64286: OR
64287: IFFALSE 64291
// exit ;
64289: GO 64381
// dist := 99999 ;
64291: LD_ADDR_VAR 0 5
64295: PUSH
64296: LD_INT 99999
64298: ST_TO_ADDR
// for i in points do
64299: LD_ADDR_VAR 0 4
64303: PUSH
64304: LD_VAR 0 2
64308: PUSH
64309: FOR_IN
64310: IFFALSE 64379
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
64312: LD_ADDR_VAR 0 6
64316: PUSH
64317: LD_VAR 0 1
64321: PPUSH
64322: LD_VAR 0 4
64326: PUSH
64327: LD_INT 1
64329: ARRAY
64330: PPUSH
64331: LD_VAR 0 4
64335: PUSH
64336: LD_INT 2
64338: ARRAY
64339: PPUSH
64340: CALL_OW 297
64344: ST_TO_ADDR
// if tmpDist < dist then
64345: LD_VAR 0 6
64349: PUSH
64350: LD_VAR 0 5
64354: LESS
64355: IFFALSE 64377
// begin result := i ;
64357: LD_ADDR_VAR 0 3
64361: PUSH
64362: LD_VAR 0 4
64366: ST_TO_ADDR
// dist := tmpDist ;
64367: LD_ADDR_VAR 0 5
64371: PUSH
64372: LD_VAR 0 6
64376: ST_TO_ADDR
// end ; end ;
64377: GO 64309
64379: POP
64380: POP
// end ;
64381: LD_VAR 0 3
64385: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
64386: LD_INT 0
64388: PPUSH
// uc_side := side ;
64389: LD_ADDR_OWVAR 20
64393: PUSH
64394: LD_VAR 0 1
64398: ST_TO_ADDR
// uc_nation := 3 ;
64399: LD_ADDR_OWVAR 21
64403: PUSH
64404: LD_INT 3
64406: ST_TO_ADDR
// vc_chassis := 25 ;
64407: LD_ADDR_OWVAR 37
64411: PUSH
64412: LD_INT 25
64414: ST_TO_ADDR
// vc_engine := engine_siberite ;
64415: LD_ADDR_OWVAR 39
64419: PUSH
64420: LD_INT 3
64422: ST_TO_ADDR
// vc_control := control_computer ;
64423: LD_ADDR_OWVAR 38
64427: PUSH
64428: LD_INT 3
64430: ST_TO_ADDR
// vc_weapon := 59 ;
64431: LD_ADDR_OWVAR 40
64435: PUSH
64436: LD_INT 59
64438: ST_TO_ADDR
// result := CreateVehicle ;
64439: LD_ADDR_VAR 0 5
64443: PUSH
64444: CALL_OW 45
64448: ST_TO_ADDR
// SetDir ( result , d ) ;
64449: LD_VAR 0 5
64453: PPUSH
64454: LD_VAR 0 4
64458: PPUSH
64459: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
64463: LD_VAR 0 5
64467: PPUSH
64468: LD_VAR 0 2
64472: PPUSH
64473: LD_VAR 0 3
64477: PPUSH
64478: LD_INT 0
64480: PPUSH
64481: CALL_OW 48
// end ;
64485: LD_VAR 0 5
64489: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
64490: LD_INT 0
64492: PPUSH
64493: PPUSH
64494: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
64495: LD_ADDR_VAR 0 2
64499: PUSH
64500: LD_INT 0
64502: PUSH
64503: LD_INT 0
64505: PUSH
64506: LD_INT 0
64508: PUSH
64509: LD_INT 0
64511: PUSH
64512: EMPTY
64513: LIST
64514: LIST
64515: LIST
64516: LIST
64517: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
64518: LD_VAR 0 1
64522: NOT
64523: PUSH
64524: LD_VAR 0 1
64528: PPUSH
64529: CALL_OW 264
64533: PUSH
64534: LD_INT 12
64536: PUSH
64537: LD_INT 51
64539: PUSH
64540: LD_INT 32
64542: PUSH
64543: LD_INT 89
64545: PUSH
64546: EMPTY
64547: LIST
64548: LIST
64549: LIST
64550: LIST
64551: IN
64552: NOT
64553: OR
64554: IFFALSE 64558
// exit ;
64556: GO 64656
// for i := 1 to 3 do
64558: LD_ADDR_VAR 0 3
64562: PUSH
64563: DOUBLE
64564: LD_INT 1
64566: DEC
64567: ST_TO_ADDR
64568: LD_INT 3
64570: PUSH
64571: FOR_TO
64572: IFFALSE 64654
// begin tmp := GetCargo ( cargo , i ) ;
64574: LD_ADDR_VAR 0 4
64578: PUSH
64579: LD_VAR 0 1
64583: PPUSH
64584: LD_VAR 0 3
64588: PPUSH
64589: CALL_OW 289
64593: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
64594: LD_ADDR_VAR 0 2
64598: PUSH
64599: LD_VAR 0 2
64603: PPUSH
64604: LD_VAR 0 3
64608: PPUSH
64609: LD_VAR 0 4
64613: PPUSH
64614: CALL_OW 1
64618: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
64619: LD_ADDR_VAR 0 2
64623: PUSH
64624: LD_VAR 0 2
64628: PPUSH
64629: LD_INT 4
64631: PPUSH
64632: LD_VAR 0 2
64636: PUSH
64637: LD_INT 4
64639: ARRAY
64640: PUSH
64641: LD_VAR 0 4
64645: PLUS
64646: PPUSH
64647: CALL_OW 1
64651: ST_TO_ADDR
// end ;
64652: GO 64571
64654: POP
64655: POP
// end ;
64656: LD_VAR 0 2
64660: RET
// export function Length ( array ) ; begin
64661: LD_INT 0
64663: PPUSH
// result := array + 0 ;
64664: LD_ADDR_VAR 0 2
64668: PUSH
64669: LD_VAR 0 1
64673: PUSH
64674: LD_INT 0
64676: PLUS
64677: ST_TO_ADDR
// end ;
64678: LD_VAR 0 2
64682: RET
// export function PrepareArray ( array ) ; begin
64683: LD_INT 0
64685: PPUSH
// result := array diff 0 ;
64686: LD_ADDR_VAR 0 2
64690: PUSH
64691: LD_VAR 0 1
64695: PUSH
64696: LD_INT 0
64698: DIFF
64699: ST_TO_ADDR
// if not result [ 1 ] then
64700: LD_VAR 0 2
64704: PUSH
64705: LD_INT 1
64707: ARRAY
64708: NOT
64709: IFFALSE 64729
// result := Delete ( result , 1 ) ;
64711: LD_ADDR_VAR 0 2
64715: PUSH
64716: LD_VAR 0 2
64720: PPUSH
64721: LD_INT 1
64723: PPUSH
64724: CALL_OW 3
64728: ST_TO_ADDR
// end ;
64729: LD_VAR 0 2
64733: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
64734: LD_INT 0
64736: PPUSH
64737: PPUSH
64738: PPUSH
64739: PPUSH
// sibRocketRange := 25 ;
64740: LD_ADDR_VAR 0 6
64744: PUSH
64745: LD_INT 25
64747: ST_TO_ADDR
// result := false ;
64748: LD_ADDR_VAR 0 4
64752: PUSH
64753: LD_INT 0
64755: ST_TO_ADDR
// for i := 0 to 5 do
64756: LD_ADDR_VAR 0 5
64760: PUSH
64761: DOUBLE
64762: LD_INT 0
64764: DEC
64765: ST_TO_ADDR
64766: LD_INT 5
64768: PUSH
64769: FOR_TO
64770: IFFALSE 64837
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
64772: LD_VAR 0 1
64776: PPUSH
64777: LD_VAR 0 5
64781: PPUSH
64782: LD_VAR 0 6
64786: PPUSH
64787: CALL_OW 272
64791: PPUSH
64792: LD_VAR 0 2
64796: PPUSH
64797: LD_VAR 0 5
64801: PPUSH
64802: LD_VAR 0 6
64806: PPUSH
64807: CALL_OW 273
64811: PPUSH
64812: LD_VAR 0 3
64816: PPUSH
64817: CALL_OW 309
64821: IFFALSE 64835
// begin result := true ;
64823: LD_ADDR_VAR 0 4
64827: PUSH
64828: LD_INT 1
64830: ST_TO_ADDR
// exit ;
64831: POP
64832: POP
64833: GO 64839
// end ;
64835: GO 64769
64837: POP
64838: POP
// end ;
64839: LD_VAR 0 4
64843: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
64844: LD_INT 0
64846: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
64847: LD_VAR 0 1
64851: PPUSH
64852: LD_VAR 0 2
64856: PPUSH
64857: LD_INT 0
64859: PPUSH
64860: LD_INT 0
64862: PPUSH
64863: LD_INT 1
64865: PPUSH
64866: LD_INT 0
64868: PPUSH
64869: CALL_OW 587
// end ; end_of_file
64873: LD_VAR 0 3
64877: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
64878: LD_VAR 0 1
64882: PUSH
64883: LD_INT 200
64885: DOUBLE
64886: GREATEREQUAL
64887: IFFALSE 64895
64889: LD_INT 299
64891: DOUBLE
64892: LESSEQUAL
64893: IFTRUE 64897
64895: GO 64929
64897: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
64898: LD_VAR 0 1
64902: PPUSH
64903: LD_VAR 0 2
64907: PPUSH
64908: LD_VAR 0 3
64912: PPUSH
64913: LD_VAR 0 4
64917: PPUSH
64918: LD_VAR 0 5
64922: PPUSH
64923: CALL 3750 0 5
64927: GO 65006
64929: LD_INT 300
64931: DOUBLE
64932: GREATEREQUAL
64933: IFFALSE 64941
64935: LD_INT 399
64937: DOUBLE
64938: LESSEQUAL
64939: IFTRUE 64943
64941: GO 65005
64943: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
64944: LD_VAR 0 1
64948: PPUSH
64949: LD_VAR 0 2
64953: PPUSH
64954: LD_VAR 0 3
64958: PPUSH
64959: LD_VAR 0 4
64963: PPUSH
64964: LD_VAR 0 5
64968: PPUSH
64969: LD_VAR 0 6
64973: PPUSH
64974: LD_VAR 0 7
64978: PPUSH
64979: LD_VAR 0 8
64983: PPUSH
64984: LD_VAR 0 9
64988: PPUSH
64989: LD_VAR 0 10
64993: PPUSH
64994: LD_VAR 0 11
64998: PPUSH
64999: CALL 20166 0 11
65003: GO 65006
65005: POP
// end ;
65006: PPOPN 11
65008: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
65009: LD_VAR 0 1
65013: PPUSH
65014: LD_VAR 0 2
65018: PPUSH
65019: LD_VAR 0 3
65023: PPUSH
65024: LD_VAR 0 4
65028: PPUSH
65029: LD_VAR 0 5
65033: PPUSH
65034: CALL 3486 0 5
// end ; end_of_file
65038: PPOPN 5
65040: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
65041: LD_VAR 0 1
65045: PPUSH
65046: LD_VAR 0 2
65050: PPUSH
65051: LD_VAR 0 3
65055: PPUSH
65056: LD_VAR 0 4
65060: PPUSH
65061: LD_VAR 0 5
65065: PPUSH
65066: LD_VAR 0 6
65070: PPUSH
65071: CALL 7818 0 6
// end ;
65075: PPOPN 6
65077: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
65078: LD_INT 0
65080: PPUSH
// begin if not units then
65081: LD_VAR 0 1
65085: NOT
65086: IFFALSE 65090
// exit ;
65088: GO 65090
// end ;
65090: PPOPN 7
65092: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
65093: CALL 7722 0 0
// end ;
65097: PPOPN 1
65099: END
