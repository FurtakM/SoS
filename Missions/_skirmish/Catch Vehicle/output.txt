// starting begin ResetFog ;
   0: CALL_OW 335
// PrepareGame ;
   4: CALL 13 0 0
// PrepareUnits ;
   8: CALL 299 0 0
// end ;
  12: END
// export mechanics , time_to_destroy , players , sib_bomb , time , veh_amount ; export p1 , p2 , p3 , p4 , p5 ; function PrepareGame ; var debug , i ; begin
  13: LD_INT 0
  15: PPUSH
  16: PPUSH
  17: PPUSH
// debug := false ;
  18: LD_ADDR_VAR 0 2
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// if debug then
  26: LD_VAR 0 2
  30: IFFALSE 81
// begin mechanics := 5 ;
  32: LD_ADDR_EXP 1
  36: PUSH
  37: LD_INT 5
  39: ST_TO_ADDR
// time_to_destroy := 45 ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_INT 45
  47: ST_TO_ADDR
// players := 4 ;
  48: LD_ADDR_EXP 3
  52: PUSH
  53: LD_INT 4
  55: ST_TO_ADDR
// sib_bomb := true ;
  56: LD_ADDR_EXP 4
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// time := 3 3$00 ;
  64: LD_ADDR_EXP 5
  68: PUSH
  69: LD_INT 6300
  71: ST_TO_ADDR
// FogOff ( 1 ) ;
  72: LD_INT 1
  74: PPUSH
  75: CALL_OW 344
// end else
  79: GO 214
// begin time := 3 3$00 ;
  81: LD_ADDR_EXP 5
  85: PUSH
  86: LD_INT 6300
  88: ST_TO_ADDR
// players := 4 ;
  89: LD_ADDR_EXP 3
  93: PUSH
  94: LD_INT 4
  96: ST_TO_ADDR
// sib_bomb := true ;
  97: LD_ADDR_EXP 4
 101: PUSH
 102: LD_INT 1
 104: ST_TO_ADDR
// mechanics := 4 ;
 105: LD_ADDR_EXP 1
 109: PUSH
 110: LD_INT 4
 112: ST_TO_ADDR
// mechanics := [ 3 , 4 , 5 ] [ GetMultiplayerSetting ( 0 ) ] ;
 113: LD_ADDR_EXP 1
 117: PUSH
 118: LD_INT 3
 120: PUSH
 121: LD_INT 4
 123: PUSH
 124: LD_INT 5
 126: PUSH
 127: EMPTY
 128: LIST
 129: LIST
 130: LIST
 131: PUSH
 132: LD_INT 0
 134: PPUSH
 135: CALL_OW 426
 139: ARRAY
 140: ST_TO_ADDR
// players := [ 3 , 4 , 5 ] [ GetMultiplayerSetting ( 1 ) ] ;
 141: LD_ADDR_EXP 3
 145: PUSH
 146: LD_INT 3
 148: PUSH
 149: LD_INT 4
 151: PUSH
 152: LD_INT 5
 154: PUSH
 155: EMPTY
 156: LIST
 157: LIST
 158: LIST
 159: PUSH
 160: LD_INT 1
 162: PPUSH
 163: CALL_OW 426
 167: ARRAY
 168: ST_TO_ADDR
// time := [ 3 3$00 , 5 5$00 , 10 10$00 ] [ GetMultiplayerSetting ( 2 ) ] ;
 169: LD_ADDR_EXP 5
 173: PUSH
 174: LD_INT 6300
 176: PUSH
 177: LD_INT 10500
 179: PUSH
 180: LD_INT 21000
 182: PUSH
 183: EMPTY
 184: LIST
 185: LIST
 186: LIST
 187: PUSH
 188: LD_INT 2
 190: PPUSH
 191: CALL_OW 426
 195: ARRAY
 196: ST_TO_ADDR
// sib_bomb := GetMultiplayerSetting ( 3 ) - 1 ;
 197: LD_ADDR_EXP 4
 201: PUSH
 202: LD_INT 3
 204: PPUSH
 205: CALL_OW 426
 209: PUSH
 210: LD_INT 1
 212: MINUS
 213: ST_TO_ADDR
// end ; p1 := 0 ;
 214: LD_ADDR_EXP 7
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// p2 := 0 ;
 222: LD_ADDR_EXP 8
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// p3 := 0 ;
 230: LD_ADDR_EXP 9
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// p4 := 0 ;
 238: LD_ADDR_EXP 10
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// p5 := 0 ;
 246: LD_ADDR_EXP 11
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// veh_amount := 12 ;
 254: LD_ADDR_EXP 6
 258: PUSH
 259: LD_INT 12
 261: ST_TO_ADDR
// for i = 1 to 7 do
 262: LD_ADDR_VAR 0 3
 266: PUSH
 267: DOUBLE
 268: LD_INT 1
 270: DEC
 271: ST_TO_ADDR
 272: LD_INT 7
 274: PUSH
 275: FOR_TO
 276: IFFALSE 292
// ChangeSideFog ( i , 8 ) ;
 278: LD_VAR 0 3
 282: PPUSH
 283: LD_INT 8
 285: PPUSH
 286: CALL_OW 343
 290: GO 275
 292: POP
 293: POP
// end ; end_of_file
 294: LD_VAR 0 1
 298: RET
// export function PrepareUnits ; var i , side ; begin
 299: LD_INT 0
 301: PPUSH
 302: PPUSH
 303: PPUSH
// side := players ;
 304: LD_ADDR_VAR 0 3
 308: PUSH
 309: LD_EXP 3
 313: ST_TO_ADDR
// uc_nation := 1 ;
 314: LD_ADDR_OWVAR 21
 318: PUSH
 319: LD_INT 1
 321: ST_TO_ADDR
// for i = 1 to mechanics do
 322: LD_ADDR_VAR 0 2
 326: PUSH
 327: DOUBLE
 328: LD_INT 1
 330: DEC
 331: ST_TO_ADDR
 332: LD_EXP 1
 336: PUSH
 337: FOR_TO
 338: IFFALSE 402
// for side = 1 to players do
 340: LD_ADDR_VAR 0 3
 344: PUSH
 345: DOUBLE
 346: LD_INT 1
 348: DEC
 349: ST_TO_ADDR
 350: LD_EXP 3
 354: PUSH
 355: FOR_TO
 356: IFFALSE 398
// begin uc_side := side ;
 358: LD_ADDR_OWVAR 20
 362: PUSH
 363: LD_VAR 0 3
 367: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
 368: LD_INT 0
 370: PPUSH
 371: LD_INT 3
 373: PPUSH
 374: LD_INT 10
 376: PPUSH
 377: CALL_OW 380
// PlaceUnitArea ( CreateHuman , mech_area , false ) ;
 381: CALL_OW 44
 385: PPUSH
 386: LD_INT 6
 388: PPUSH
 389: LD_INT 0
 391: PPUSH
 392: CALL_OW 49
// end ;
 396: GO 355
 398: POP
 399: POP
 400: GO 337
 402: POP
 403: POP
// end ;
 404: LD_VAR 0 1
 408: RET
// function ToSpawn ( side ) ; begin
 409: LD_INT 0
 411: PPUSH
// uc_side := side ;
 412: LD_ADDR_OWVAR 20
 416: PUSH
 417: LD_VAR 0 1
 421: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
 422: LD_INT 0
 424: PPUSH
 425: LD_INT 3
 427: PPUSH
 428: LD_INT 10
 430: PPUSH
 431: CALL_OW 380
// PlaceUnitArea ( CreateHuman , mech_area , false ) ;
 435: CALL_OW 44
 439: PPUSH
 440: LD_INT 6
 442: PPUSH
 443: LD_INT 0
 445: PPUSH
 446: CALL_OW 49
// end ;
 450: LD_VAR 0 2
 454: RET
// every 0 0$13 trigger time do var i , filter ;
 455: LD_EXP 5
 459: IFFALSE 569
 461: GO 463
 463: DISABLE
 464: LD_INT 0
 466: PPUSH
 467: PPUSH
// begin enable ;
 468: ENABLE
// for i = 1 to players do
 469: LD_ADDR_VAR 0 1
 473: PUSH
 474: DOUBLE
 475: LD_INT 1
 477: DEC
 478: ST_TO_ADDR
 479: LD_EXP 3
 483: PUSH
 484: FOR_TO
 485: IFFALSE 567
// begin filter := FilterAllUnits ( [ [ [ f_side , i ] , [ f_class , 3 ] , [ f_type , unit_human ] ] ] ) ;
 487: LD_ADDR_VAR 0 2
 491: PUSH
 492: LD_INT 22
 494: PUSH
 495: LD_VAR 0 1
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: PUSH
 504: LD_INT 25
 506: PUSH
 507: LD_INT 3
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: PUSH
 514: LD_INT 21
 516: PUSH
 517: LD_INT 1
 519: PUSH
 520: EMPTY
 521: LIST
 522: LIST
 523: PUSH
 524: EMPTY
 525: LIST
 526: LIST
 527: LIST
 528: PUSH
 529: EMPTY
 530: LIST
 531: PPUSH
 532: CALL_OW 69
 536: ST_TO_ADDR
// if filter < mechanics then
 537: LD_VAR 0 2
 541: PUSH
 542: LD_EXP 1
 546: LESS
 547: IFFALSE 565
// begin Wait ( 0 0$03 ) ;
 549: LD_INT 105
 551: PPUSH
 552: CALL_OW 67
// ToSpawn ( i ) ;
 556: LD_VAR 0 1
 560: PPUSH
 561: CALL 409 0 1
// end ; end ;
 565: GO 484
 567: POP
 568: POP
// end ;
 569: PPOPN 2
 571: END
// every 0 0$01 trigger time do var i , filter , filter2 , vehicles ;
 572: LD_EXP 5
 576: IFFALSE 943
 578: GO 580
 580: DISABLE
 581: LD_INT 0
 583: PPUSH
 584: PPUSH
 585: PPUSH
 586: PPUSH
// begin enable ;
 587: ENABLE
// filter2 := FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_not , [ f_side , 0 ] ] , [ f_not , [ f_side , 1 ] ] ] ) ;
 588: LD_ADDR_VAR 0 3
 592: PUSH
 593: LD_INT 21
 595: PUSH
 596: LD_INT 2
 598: PUSH
 599: EMPTY
 600: LIST
 601: LIST
 602: PUSH
 603: LD_INT 3
 605: PUSH
 606: LD_INT 22
 608: PUSH
 609: LD_INT 0
 611: PUSH
 612: EMPTY
 613: LIST
 614: LIST
 615: PUSH
 616: EMPTY
 617: LIST
 618: LIST
 619: PUSH
 620: LD_INT 3
 622: PUSH
 623: LD_INT 22
 625: PUSH
 626: LD_INT 1
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: PUSH
 633: EMPTY
 634: LIST
 635: LIST
 636: PUSH
 637: EMPTY
 638: LIST
 639: LIST
 640: LIST
 641: PPUSH
 642: CALL_OW 69
 646: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_side , 1 ] ] ] ) ;
 647: LD_ADDR_VAR 0 2
 651: PUSH
 652: LD_INT 21
 654: PUSH
 655: LD_INT 1
 657: PUSH
 658: EMPTY
 659: LIST
 660: LIST
 661: PUSH
 662: LD_INT 3
 664: PUSH
 665: LD_INT 54
 667: PUSH
 668: EMPTY
 669: LIST
 670: PUSH
 671: EMPTY
 672: LIST
 673: LIST
 674: PUSH
 675: LD_INT 3
 677: PUSH
 678: LD_INT 22
 680: PUSH
 681: LD_INT 1
 683: PUSH
 684: EMPTY
 685: LIST
 686: LIST
 687: PUSH
 688: EMPTY
 689: LIST
 690: LIST
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: LIST
 696: PPUSH
 697: CALL_OW 69
 701: ST_TO_ADDR
// vehicles := FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 702: LD_ADDR_VAR 0 4
 706: PUSH
 707: LD_INT 21
 709: PUSH
 710: LD_INT 2
 712: PUSH
 713: EMPTY
 714: LIST
 715: LIST
 716: PUSH
 717: LD_INT 58
 719: PUSH
 720: EMPTY
 721: LIST
 722: PUSH
 723: EMPTY
 724: LIST
 725: LIST
 726: PPUSH
 727: CALL_OW 69
 731: ST_TO_ADDR
// if filter and vehicles then
 732: LD_VAR 0 2
 736: PUSH
 737: LD_VAR 0 4
 741: AND
 742: IFFALSE 879
// for i = 1 to filter do
 744: LD_ADDR_VAR 0 1
 748: PUSH
 749: DOUBLE
 750: LD_INT 1
 752: DEC
 753: ST_TO_ADDR
 754: LD_VAR 0 2
 758: PUSH
 759: FOR_TO
 760: IFFALSE 877
// if not HasTask ( filter [ i ] ) and IsOk ( filter [ i ] ) then
 762: LD_VAR 0 2
 766: PUSH
 767: LD_VAR 0 1
 771: ARRAY
 772: PPUSH
 773: CALL_OW 314
 777: NOT
 778: PUSH
 779: LD_VAR 0 2
 783: PUSH
 784: LD_VAR 0 1
 788: ARRAY
 789: PPUSH
 790: CALL_OW 302
 794: AND
 795: IFFALSE 875
// if GetDistUnits ( filter [ i ] , NearestUnitToUnit ( vehicles , filter [ i ] ) ) < 45 then
 797: LD_VAR 0 2
 801: PUSH
 802: LD_VAR 0 1
 806: ARRAY
 807: PPUSH
 808: LD_VAR 0 4
 812: PPUSH
 813: LD_VAR 0 2
 817: PUSH
 818: LD_VAR 0 1
 822: ARRAY
 823: PPUSH
 824: CALL_OW 74
 828: PPUSH
 829: CALL_OW 296
 833: PUSH
 834: LD_INT 45
 836: LESS
 837: IFFALSE 875
// ComEnterUnit ( filter [ i ] , NearestUnitToUnit ( vehicles , filter [ i ] ) ) ;
 839: LD_VAR 0 2
 843: PUSH
 844: LD_VAR 0 1
 848: ARRAY
 849: PPUSH
 850: LD_VAR 0 4
 854: PPUSH
 855: LD_VAR 0 2
 859: PUSH
 860: LD_VAR 0 1
 864: ARRAY
 865: PPUSH
 866: CALL_OW 74
 870: PPUSH
 871: CALL_OW 120
 875: GO 759
 877: POP
 878: POP
// if filter2 then
 879: LD_VAR 0 3
 883: IFFALSE 943
// for i = 1 to filter2 do
 885: LD_ADDR_VAR 0 1
 889: PUSH
 890: DOUBLE
 891: LD_INT 1
 893: DEC
 894: ST_TO_ADDR
 895: LD_VAR 0 3
 899: PUSH
 900: FOR_TO
 901: IFFALSE 941
// if not HasTask ( filter2 [ i ] ) then
 903: LD_VAR 0 3
 907: PUSH
 908: LD_VAR 0 1
 912: ARRAY
 913: PPUSH
 914: CALL_OW 314
 918: NOT
 919: IFFALSE 939
// ComMoveToArea ( filter2 [ i ] , exit_area ) ;
 921: LD_VAR 0 3
 925: PUSH
 926: LD_VAR 0 1
 930: ARRAY
 931: PPUSH
 932: LD_INT 4
 934: PPUSH
 935: CALL_OW 113
 939: GO 900
 941: POP
 942: POP
// end ; end_of_file
 943: PPOPN 4
 945: END
// export function SpawnCar ( chas , area ) ; var i , e , veh , ar_chassis , ru_chassis , us_chassis , ar_weapons , ru_weapons , us_weapons , chassis , engine , weapon ; begin
 946: LD_INT 0
 948: PPUSH
 949: PPUSH
 950: PPUSH
 951: PPUSH
 952: PPUSH
 953: PPUSH
 954: PPUSH
 955: PPUSH
 956: PPUSH
 957: PPUSH
 958: PPUSH
 959: PPUSH
 960: PPUSH
// uc_side := 0 ;
 961: LD_ADDR_OWVAR 20
 965: PUSH
 966: LD_INT 0
 968: ST_TO_ADDR
// uc_nation := Rand ( 1 , 3 ) ;
 969: LD_ADDR_OWVAR 21
 973: PUSH
 974: LD_INT 1
 976: PPUSH
 977: LD_INT 3
 979: PPUSH
 980: CALL_OW 12
 984: ST_TO_ADDR
// ar_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ;
 985: LD_ADDR_VAR 0 7
 989: PUSH
 990: LD_INT 11
 992: PUSH
 993: LD_INT 12
 995: PUSH
 996: LD_INT 13
 998: PUSH
 999: LD_INT 14
1001: PUSH
1002: EMPTY
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: ST_TO_ADDR
// ru_chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ;
1008: LD_ADDR_VAR 0 8
1012: PUSH
1013: LD_INT 21
1015: PUSH
1016: LD_INT 22
1018: PUSH
1019: LD_INT 23
1021: PUSH
1022: LD_INT 24
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: ST_TO_ADDR
// us_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ;
1031: LD_ADDR_VAR 0 9
1035: PUSH
1036: LD_INT 1
1038: PUSH
1039: LD_INT 2
1041: PUSH
1042: LD_INT 3
1044: PUSH
1045: LD_INT 4
1047: PUSH
1048: LD_INT 5
1050: PUSH
1051: EMPTY
1052: LIST
1053: LIST
1054: LIST
1055: LIST
1056: LIST
1057: ST_TO_ADDR
// if chas > 0 then
1058: LD_VAR 0 1
1062: PUSH
1063: LD_INT 0
1065: GREATER
1066: IFFALSE 1080
// vc_chassis := chas else
1068: LD_ADDR_OWVAR 37
1072: PUSH
1073: LD_VAR 0 1
1077: ST_TO_ADDR
1078: GO 1173
// begin case uc_nation of 1 :
1080: LD_OWVAR 21
1084: PUSH
1085: LD_INT 1
1087: DOUBLE
1088: EQUAL
1089: IFTRUE 1093
1091: GO 1106
1093: POP
// chassis := us_chassis ; 2 :
1094: LD_ADDR_VAR 0 13
1098: PUSH
1099: LD_VAR 0 9
1103: ST_TO_ADDR
1104: GO 1149
1106: LD_INT 2
1108: DOUBLE
1109: EQUAL
1110: IFTRUE 1114
1112: GO 1127
1114: POP
// chassis := ar_chassis ; 3 :
1115: LD_ADDR_VAR 0 13
1119: PUSH
1120: LD_VAR 0 7
1124: ST_TO_ADDR
1125: GO 1149
1127: LD_INT 3
1129: DOUBLE
1130: EQUAL
1131: IFTRUE 1135
1133: GO 1148
1135: POP
// chassis := ru_chassis ; end ;
1136: LD_ADDR_VAR 0 13
1140: PUSH
1141: LD_VAR 0 8
1145: ST_TO_ADDR
1146: GO 1149
1148: POP
// vc_chassis := chassis [ Rand ( 1 , chassis ) ] ;
1149: LD_ADDR_OWVAR 37
1153: PUSH
1154: LD_VAR 0 13
1158: PUSH
1159: LD_INT 1
1161: PPUSH
1162: LD_VAR 0 13
1166: PPUSH
1167: CALL_OW 12
1171: ARRAY
1172: ST_TO_ADDR
// end ; if vc_chassis in [ ar_hovercraft , ar_light_trike , us_light_wheeled ] then
1173: LD_OWVAR 37
1177: PUSH
1178: LD_INT 11
1180: PUSH
1181: LD_INT 12
1183: PUSH
1184: LD_INT 1
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: LIST
1191: IN
1192: IFFALSE 1212
// engine := Rand ( 1 , 2 ) else
1194: LD_ADDR_VAR 0 14
1198: PUSH
1199: LD_INT 1
1201: PPUSH
1202: LD_INT 2
1204: PPUSH
1205: CALL_OW 12
1209: ST_TO_ADDR
1210: GO 1324
// begin if not vc_chassis in [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , us_heavy_tracked , us_morphling ] then
1212: LD_OWVAR 37
1216: PUSH
1217: LD_INT 21
1219: PUSH
1220: LD_INT 22
1222: PUSH
1223: LD_INT 23
1225: PUSH
1226: LD_INT 24
1228: PUSH
1229: LD_INT 4
1231: PUSH
1232: LD_INT 5
1234: PUSH
1235: EMPTY
1236: LIST
1237: LIST
1238: LIST
1239: LIST
1240: LIST
1241: LIST
1242: IN
1243: NOT
1244: IFFALSE 1264
// engine := Rand ( 1 , 3 ) else
1246: LD_ADDR_VAR 0 14
1250: PUSH
1251: LD_INT 1
1253: PPUSH
1254: LD_INT 3
1256: PPUSH
1257: CALL_OW 12
1261: ST_TO_ADDR
1262: GO 1280
// e := Rand ( 1 , 2 ) ;
1264: LD_ADDR_VAR 0 5
1268: PUSH
1269: LD_INT 1
1271: PPUSH
1272: LD_INT 2
1274: PPUSH
1275: CALL_OW 12
1279: ST_TO_ADDR
// case e of 1 :
1280: LD_VAR 0 5
1284: PUSH
1285: LD_INT 1
1287: DOUBLE
1288: EQUAL
1289: IFTRUE 1293
1291: GO 1304
1293: POP
// engine := engine_combustion ; 2 :
1294: LD_ADDR_VAR 0 14
1298: PUSH
1299: LD_INT 1
1301: ST_TO_ADDR
1302: GO 1324
1304: LD_INT 2
1306: DOUBLE
1307: EQUAL
1308: IFTRUE 1312
1310: GO 1323
1312: POP
// engine := engine_siberite ; end ;
1313: LD_ADDR_VAR 0 14
1317: PUSH
1318: LD_INT 3
1320: ST_TO_ADDR
1321: GO 1324
1323: POP
// end ; vc_engine := engine ;
1324: LD_ADDR_OWVAR 39
1328: PUSH
1329: LD_VAR 0 14
1333: ST_TO_ADDR
// vc_control := control_manual ;
1334: LD_ADDR_OWVAR 38
1338: PUSH
1339: LD_INT 1
1341: ST_TO_ADDR
// ar_weapons := [ ar_multimissile_ballista , ar_double_machine_gun , ar_light_gun , ar_radar , ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb , ar_flame_thrower ] ;
1342: LD_ADDR_VAR 0 10
1346: PUSH
1347: LD_INT 22
1349: PUSH
1350: LD_INT 24
1352: PUSH
1353: LD_INT 23
1355: PUSH
1356: LD_INT 30
1358: PUSH
1359: LD_INT 25
1361: PUSH
1362: LD_INT 27
1364: PUSH
1365: LD_INT 28
1367: PUSH
1368: LD_INT 29
1370: PUSH
1371: LD_INT 26
1373: PUSH
1374: EMPTY
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: LIST
1382: LIST
1383: LIST
1384: ST_TO_ADDR
// ru_weapons := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , 98 , ru_rocket_launcher , ru_heavy_gun , ru_rocket , ru_bulldozer , ru_time_lapser ] ;
1385: LD_ADDR_VAR 0 11
1389: PUSH
1390: LD_INT 42
1392: PUSH
1393: LD_INT 43
1395: PUSH
1396: LD_INT 44
1398: PUSH
1399: LD_INT 98
1401: PUSH
1402: LD_INT 45
1404: PUSH
1405: LD_INT 46
1407: PUSH
1408: LD_INT 47
1410: PUSH
1411: LD_INT 53
1413: PUSH
1414: LD_INT 49
1416: PUSH
1417: EMPTY
1418: LIST
1419: LIST
1420: LIST
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: LIST
1427: ST_TO_ADDR
// us_weapons := [ us_machine_gun , us_light_gun , us_radar , us_gatling_gun , us_double_gun , us_rocket_launcher , us_laser , us_heavy_gun , us_bulldozer , us_double_laser ] ;
1428: LD_ADDR_VAR 0 12
1432: PUSH
1433: LD_INT 2
1435: PUSH
1436: LD_INT 3
1438: PUSH
1439: LD_INT 11
1441: PUSH
1442: LD_INT 4
1444: PUSH
1445: LD_INT 5
1447: PUSH
1448: LD_INT 7
1450: PUSH
1451: LD_INT 9
1453: PUSH
1454: LD_INT 6
1456: PUSH
1457: LD_INT 14
1459: PUSH
1460: LD_INT 10
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: LIST
1473: LIST
1474: ST_TO_ADDR
// if uc_nation = nation_arabian then
1475: LD_OWVAR 21
1479: PUSH
1480: LD_INT 2
1482: EQUAL
1483: IFFALSE 1550
// begin if vc_chassis in [ ar_hovercraft , ar_light_trike ] then
1485: LD_OWVAR 37
1489: PUSH
1490: LD_INT 11
1492: PUSH
1493: LD_INT 12
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: IN
1500: IFFALSE 1526
// weapon := ar_weapons [ Rand ( 1 , 3 ) ] else
1502: LD_ADDR_VAR 0 15
1506: PUSH
1507: LD_VAR 0 10
1511: PUSH
1512: LD_INT 1
1514: PPUSH
1515: LD_INT 3
1517: PPUSH
1518: CALL_OW 12
1522: ARRAY
1523: ST_TO_ADDR
1524: GO 1550
// weapon := ar_weapons [ Rand ( 1 , ar_weapons ) ] ;
1526: LD_ADDR_VAR 0 15
1530: PUSH
1531: LD_VAR 0 10
1535: PUSH
1536: LD_INT 1
1538: PPUSH
1539: LD_VAR 0 10
1543: PPUSH
1544: CALL_OW 12
1548: ARRAY
1549: ST_TO_ADDR
// end ; if uc_nation = nation_russian then
1550: LD_OWVAR 21
1554: PUSH
1555: LD_INT 3
1557: EQUAL
1558: IFFALSE 1625
// begin if vc_chassis in [ ru_medium_wheeled , ru_medium_tracked ] then
1560: LD_OWVAR 37
1564: PUSH
1565: LD_INT 21
1567: PUSH
1568: LD_INT 22
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: IN
1575: IFFALSE 1601
// weapon := ru_weapons [ Rand ( 1 , 5 ) ] else
1577: LD_ADDR_VAR 0 15
1581: PUSH
1582: LD_VAR 0 11
1586: PUSH
1587: LD_INT 1
1589: PPUSH
1590: LD_INT 5
1592: PPUSH
1593: CALL_OW 12
1597: ARRAY
1598: ST_TO_ADDR
1599: GO 1625
// weapon := ru_weapons [ Rand ( 1 , ru_weapons ) ] ;
1601: LD_ADDR_VAR 0 15
1605: PUSH
1606: LD_VAR 0 11
1610: PUSH
1611: LD_INT 1
1613: PPUSH
1614: LD_VAR 0 11
1618: PPUSH
1619: CALL_OW 12
1623: ARRAY
1624: ST_TO_ADDR
// end ; if uc_nation = nation_american then
1625: LD_OWVAR 21
1629: PUSH
1630: LD_INT 1
1632: EQUAL
1633: IFFALSE 1742
// begin if vc_chassis = us_light_wheeled then
1635: LD_OWVAR 37
1639: PUSH
1640: LD_INT 1
1642: EQUAL
1643: IFFALSE 1667
// weapon := us_weapons [ Rand ( 1 , 3 ) ] ;
1645: LD_ADDR_VAR 0 15
1649: PUSH
1650: LD_VAR 0 12
1654: PUSH
1655: LD_INT 1
1657: PPUSH
1658: LD_INT 3
1660: PPUSH
1661: CALL_OW 12
1665: ARRAY
1666: ST_TO_ADDR
// if vc_chassis in [ us_medium_tracked , us_medium_wheeled ] then
1667: LD_OWVAR 37
1671: PUSH
1672: LD_INT 3
1674: PUSH
1675: LD_INT 2
1677: PUSH
1678: EMPTY
1679: LIST
1680: LIST
1681: IN
1682: IFFALSE 1708
// weapon := us_weapons [ Rand ( 1 , 7 ) ] else
1684: LD_ADDR_VAR 0 15
1688: PUSH
1689: LD_VAR 0 12
1693: PUSH
1694: LD_INT 1
1696: PPUSH
1697: LD_INT 7
1699: PPUSH
1700: CALL_OW 12
1704: ARRAY
1705: ST_TO_ADDR
1706: GO 1742
// if vc_chassis <> us_light_wheeled then
1708: LD_OWVAR 37
1712: PUSH
1713: LD_INT 1
1715: NONEQUAL
1716: IFFALSE 1742
// weapon := us_weapons [ Rand ( 1 , us_weapons ) ] ;
1718: LD_ADDR_VAR 0 15
1722: PUSH
1723: LD_VAR 0 12
1727: PUSH
1728: LD_INT 1
1730: PPUSH
1731: LD_VAR 0 12
1735: PPUSH
1736: CALL_OW 12
1740: ARRAY
1741: ST_TO_ADDR
// end ; vc_weapon := weapon ;
1742: LD_ADDR_OWVAR 40
1746: PUSH
1747: LD_VAR 0 15
1751: ST_TO_ADDR
// veh := CreateVehicle ;
1752: LD_ADDR_VAR 0 6
1756: PUSH
1757: CALL_OW 45
1761: ST_TO_ADDR
// PlaceUnitArea ( veh , area , true ) ;
1762: LD_VAR 0 6
1766: PPUSH
1767: LD_VAR 0 2
1771: PPUSH
1772: LD_INT 1
1774: PPUSH
1775: CALL_OW 49
// end ;
1779: LD_VAR 0 3
1783: RET
// export function SpawnSibRocket ( area ) ; var veh , p ; begin
1784: LD_INT 0
1786: PPUSH
1787: PPUSH
1788: PPUSH
// uc_side := 0 ;
1789: LD_ADDR_OWVAR 20
1793: PUSH
1794: LD_INT 0
1796: ST_TO_ADDR
// p := Rand ( 1 , 2 ) ;
1797: LD_ADDR_VAR 0 4
1801: PUSH
1802: LD_INT 1
1804: PPUSH
1805: LD_INT 2
1807: PPUSH
1808: CALL_OW 12
1812: ST_TO_ADDR
// case p of 1 :
1813: LD_VAR 0 4
1817: PUSH
1818: LD_INT 1
1820: DOUBLE
1821: EQUAL
1822: IFTRUE 1826
1824: GO 1869
1826: POP
// begin uc_nation := nation_american ;
1827: LD_ADDR_OWVAR 21
1831: PUSH
1832: LD_INT 1
1834: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
1835: LD_ADDR_OWVAR 37
1839: PUSH
1840: LD_INT 4
1842: ST_TO_ADDR
// vc_engine := engine_siberite ;
1843: LD_ADDR_OWVAR 39
1847: PUSH
1848: LD_INT 3
1850: ST_TO_ADDR
// vc_control := control_manual ;
1851: LD_ADDR_OWVAR 38
1855: PUSH
1856: LD_INT 1
1858: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
1859: LD_ADDR_OWVAR 40
1863: PUSH
1864: LD_INT 8
1866: ST_TO_ADDR
// end ; 2 :
1867: GO 1921
1869: LD_INT 2
1871: DOUBLE
1872: EQUAL
1873: IFTRUE 1877
1875: GO 1920
1877: POP
// begin uc_nation := nation_russian ;
1878: LD_ADDR_OWVAR 21
1882: PUSH
1883: LD_INT 3
1885: ST_TO_ADDR
// vc_chassis := ru_heavy_tracked ;
1886: LD_ADDR_OWVAR 37
1890: PUSH
1891: LD_INT 24
1893: ST_TO_ADDR
// vc_engine := engine_siberite ;
1894: LD_ADDR_OWVAR 39
1898: PUSH
1899: LD_INT 3
1901: ST_TO_ADDR
// vc_control := control_manual ;
1902: LD_ADDR_OWVAR 38
1906: PUSH
1907: LD_INT 1
1909: ST_TO_ADDR
// vc_weapon := ru_siberium_rocket ;
1910: LD_ADDR_OWVAR 40
1914: PUSH
1915: LD_INT 48
1917: ST_TO_ADDR
// end ; end ;
1918: GO 1921
1920: POP
// veh := CreateVehicle ;
1921: LD_ADDR_VAR 0 3
1925: PUSH
1926: CALL_OW 45
1930: ST_TO_ADDR
// PlaceUnitArea ( veh , area , true ) ;
1931: LD_VAR 0 3
1935: PPUSH
1936: LD_VAR 0 1
1940: PPUSH
1941: LD_INT 1
1943: PPUSH
1944: CALL_OW 49
// end ;
1948: LD_VAR 0 2
1952: RET
// export function ScoreBoard ( veh ) ; var points ; begin
1953: LD_INT 0
1955: PPUSH
1956: PPUSH
// points := 0 ;
1957: LD_ADDR_VAR 0 3
1961: PUSH
1962: LD_INT 0
1964: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_light_trike , us_light_wheeled ] then
1965: LD_VAR 0 1
1969: PPUSH
1970: CALL_OW 265
1974: PUSH
1975: LD_INT 12
1977: PUSH
1978: LD_INT 1
1980: PUSH
1981: EMPTY
1982: LIST
1983: LIST
1984: IN
1985: IFFALSE 2001
// points := points + 10 ;
1987: LD_ADDR_VAR 0 3
1991: PUSH
1992: LD_VAR 0 3
1996: PUSH
1997: LD_INT 10
1999: PLUS
2000: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_medium_trike , ru_medium_wheeled , us_medium_wheeled ] then
2001: LD_VAR 0 1
2005: PPUSH
2006: CALL_OW 265
2010: PUSH
2011: LD_INT 13
2013: PUSH
2014: LD_INT 21
2016: PUSH
2017: LD_INT 2
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: LIST
2024: IN
2025: IFFALSE 2041
// points := points + 15 ;
2027: LD_ADDR_VAR 0 3
2031: PUSH
2032: LD_VAR 0 3
2036: PUSH
2037: LD_INT 15
2039: PLUS
2040: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_half_tracked , ru_medium_tracked , us_medium_tracked ] then
2041: LD_VAR 0 1
2045: PPUSH
2046: CALL_OW 265
2050: PUSH
2051: LD_INT 14
2053: PUSH
2054: LD_INT 22
2056: PUSH
2057: LD_INT 3
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: LIST
2064: IN
2065: IFFALSE 2081
// points := points + 20 ;
2067: LD_ADDR_VAR 0 3
2071: PUSH
2072: LD_VAR 0 3
2076: PUSH
2077: LD_INT 20
2079: PLUS
2080: ST_TO_ADDR
// if GetChassis ( veh ) in [ ru_heavy_wheeled , ru_heavy_tracked , us_heavy_tracked ] then
2081: LD_VAR 0 1
2085: PPUSH
2086: CALL_OW 265
2090: PUSH
2091: LD_INT 23
2093: PUSH
2094: LD_INT 24
2096: PUSH
2097: LD_INT 4
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: LIST
2104: IN
2105: IFFALSE 2121
// points := points + 25 ;
2107: LD_ADDR_VAR 0 3
2111: PUSH
2112: LD_VAR 0 3
2116: PUSH
2117: LD_INT 25
2119: PLUS
2120: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_hovercraft , us_morphling ] then
2121: LD_VAR 0 1
2125: PPUSH
2126: CALL_OW 265
2130: PUSH
2131: LD_INT 11
2133: PUSH
2134: LD_INT 5
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: IN
2141: IFFALSE 2157
// points := points + 30 ;
2143: LD_ADDR_VAR 0 3
2147: PUSH
2148: LD_VAR 0 3
2152: PUSH
2153: LD_INT 30
2155: PLUS
2156: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_combustion ] then
2157: LD_VAR 0 1
2161: PPUSH
2162: CALL_OW 262
2166: PUSH
2167: LD_INT 1
2169: PUSH
2170: EMPTY
2171: LIST
2172: EQUAL
2173: IFFALSE 2189
// points := points + 5 ;
2175: LD_ADDR_VAR 0 3
2179: PUSH
2180: LD_VAR 0 3
2184: PUSH
2185: LD_INT 5
2187: PLUS
2188: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_solar ] then
2189: LD_VAR 0 1
2193: PPUSH
2194: CALL_OW 262
2198: PUSH
2199: LD_INT 2
2201: PUSH
2202: EMPTY
2203: LIST
2204: EQUAL
2205: IFFALSE 2221
// points := points + 15 ;
2207: LD_ADDR_VAR 0 3
2211: PUSH
2212: LD_VAR 0 3
2216: PUSH
2217: LD_INT 15
2219: PLUS
2220: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_siberite ] then
2221: LD_VAR 0 1
2225: PPUSH
2226: CALL_OW 262
2230: PUSH
2231: LD_INT 3
2233: PUSH
2234: EMPTY
2235: LIST
2236: EQUAL
2237: IFFALSE 2253
// points := points + 25 ;
2239: LD_ADDR_VAR 0 3
2243: PUSH
2244: LD_VAR 0 3
2248: PUSH
2249: LD_INT 25
2251: PLUS
2252: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_multimissile_ballista , ar_double_machine_gun , ar_light_gun , ru_heavy_machine_gun , us_machine_gun , us_light_gun ] then
2253: LD_VAR 0 1
2257: PPUSH
2258: CALL_OW 264
2262: PUSH
2263: LD_INT 22
2265: PUSH
2266: LD_INT 24
2268: PUSH
2269: LD_INT 23
2271: PUSH
2272: LD_INT 42
2274: PUSH
2275: LD_INT 2
2277: PUSH
2278: LD_INT 3
2280: PUSH
2281: EMPTY
2282: LIST
2283: LIST
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: IN
2289: IFFALSE 2305
// points := points + 5 ;
2291: LD_ADDR_VAR 0 3
2295: PUSH
2296: LD_VAR 0 3
2300: PUSH
2301: LD_INT 5
2303: PLUS
2304: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_gatling_gun , ar_gun , ru_gatling_gun , ru_gun , us_gatling_gun , us_double_gun ] then
2305: LD_VAR 0 1
2309: PPUSH
2310: CALL_OW 264
2314: PUSH
2315: LD_INT 25
2317: PUSH
2318: LD_INT 27
2320: PUSH
2321: LD_INT 43
2323: PUSH
2324: LD_INT 44
2326: PUSH
2327: LD_INT 4
2329: PUSH
2330: LD_INT 5
2332: PUSH
2333: EMPTY
2334: LIST
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: LIST
2340: IN
2341: IFFALSE 2357
// points := points + 10 ;
2343: LD_ADDR_VAR 0 3
2347: PUSH
2348: LD_VAR 0 3
2352: PUSH
2353: LD_INT 10
2355: PLUS
2356: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher ] then
2357: LD_VAR 0 1
2361: PPUSH
2362: CALL_OW 264
2366: PUSH
2367: LD_INT 28
2369: PUSH
2370: LD_INT 45
2372: PUSH
2373: LD_INT 7
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: LIST
2380: IN
2381: IFFALSE 2397
// points := points + 20 ;
2383: LD_ADDR_VAR 0 3
2387: PUSH
2388: LD_VAR 0 3
2392: PUSH
2393: LD_INT 20
2395: PLUS
2396: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ru_heavy_gun , us_heavy_gun ] then
2397: LD_VAR 0 1
2401: PPUSH
2402: CALL_OW 264
2406: PUSH
2407: LD_INT 46
2409: PUSH
2410: LD_INT 6
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: IN
2417: IFFALSE 2433
// points := points + 25 ;
2419: LD_ADDR_VAR 0 3
2423: PUSH
2424: LD_VAR 0 3
2428: PUSH
2429: LD_INT 25
2431: PLUS
2432: ST_TO_ADDR
// if GetWeapon ( veh ) in [ us_laser , us_radar , ar_radar ] then
2433: LD_VAR 0 1
2437: PPUSH
2438: CALL_OW 264
2442: PUSH
2443: LD_INT 9
2445: PUSH
2446: LD_INT 11
2448: PUSH
2449: LD_INT 30
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: LIST
2456: IN
2457: IFFALSE 2473
// points := points + 30 ;
2459: LD_ADDR_VAR 0 3
2463: PUSH
2464: LD_VAR 0 3
2468: PUSH
2469: LD_INT 30
2471: PLUS
2472: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_selfpropelled_bomb , ru_time_lapser , ru_rocket , us_double_laser ] then
2473: LD_VAR 0 1
2477: PPUSH
2478: CALL_OW 264
2482: PUSH
2483: LD_INT 29
2485: PUSH
2486: LD_INT 49
2488: PUSH
2489: LD_INT 47
2491: PUSH
2492: LD_INT 10
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: LIST
2499: LIST
2500: IN
2501: IFFALSE 2517
// points := points + 50 ;
2503: LD_ADDR_VAR 0 3
2507: PUSH
2508: LD_VAR 0 3
2512: PUSH
2513: LD_INT 50
2515: PLUS
2516: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ru_siberium_rocket , us_siberium_rocket ] then
2517: LD_VAR 0 1
2521: PPUSH
2522: CALL_OW 264
2526: PUSH
2527: LD_INT 48
2529: PUSH
2530: LD_INT 8
2532: PUSH
2533: EMPTY
2534: LIST
2535: LIST
2536: IN
2537: IFFALSE 2553
// points := points + 100 ;
2539: LD_ADDR_VAR 0 3
2543: PUSH
2544: LD_VAR 0 3
2548: PUSH
2549: LD_INT 100
2551: PLUS
2552: ST_TO_ADDR
// result := points ;
2553: LD_ADDR_VAR 0 2
2557: PUSH
2558: LD_VAR 0 3
2562: ST_TO_ADDR
// end ; end_of_file
2563: LD_VAR 0 2
2567: RET
// every 0 0$01 trigger time do var filter , i , side , driver , un ;
2568: LD_EXP 5
2572: IFFALSE 3217
2574: GO 2576
2576: DISABLE
2577: LD_INT 0
2579: PPUSH
2580: PPUSH
2581: PPUSH
2582: PPUSH
2583: PPUSH
// begin enable ;
2584: ENABLE
// if tick < 36 then
2585: LD_OWVAR 1
2589: PUSH
2590: LD_INT 36
2592: LESS
2593: IFFALSE 2605
// SetAreaMapShow ( exit_area , 1 ) ;
2595: LD_INT 4
2597: PPUSH
2598: LD_INT 1
2600: PPUSH
2601: CALL_OW 424
// time := time - 0 0$01 ;
2605: LD_ADDR_EXP 5
2609: PUSH
2610: LD_EXP 5
2614: PUSH
2615: LD_INT 35
2617: MINUS
2618: ST_TO_ADDR
// if time = 0 0$00 then
2619: LD_EXP 5
2623: PUSH
2624: LD_INT 0
2626: EQUAL
2627: IFFALSE 2690
// if p1 > p2 and p1 > p3 and p1 > p4 and p1 > p5 then
2629: LD_EXP 7
2633: PUSH
2634: LD_EXP 8
2638: GREATER
2639: PUSH
2640: LD_EXP 7
2644: PUSH
2645: LD_EXP 9
2649: GREATER
2650: AND
2651: PUSH
2652: LD_EXP 7
2656: PUSH
2657: LD_EXP 10
2661: GREATER
2662: AND
2663: PUSH
2664: LD_EXP 7
2668: PUSH
2669: LD_EXP 11
2673: GREATER
2674: AND
2675: IFFALSE 2683
// YouWin else
2677: CALL_OW 103
2681: GO 2690
// YouLost (  ) ;
2683: LD_STRING 
2685: PPUSH
2686: CALL_OW 104
// filter := FilterUnitsInArea ( exit_area , [ f_type , unit_vehicle ] ) ;
2690: LD_ADDR_VAR 0 1
2694: PUSH
2695: LD_INT 4
2697: PPUSH
2698: LD_INT 21
2700: PUSH
2701: LD_INT 2
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: PPUSH
2708: CALL_OW 70
2712: ST_TO_ADDR
// if filter then
2713: LD_VAR 0 1
2717: IFFALSE 3007
// for i = 1 to filter do
2719: LD_ADDR_VAR 0 2
2723: PUSH
2724: DOUBLE
2725: LD_INT 1
2727: DEC
2728: ST_TO_ADDR
2729: LD_VAR 0 1
2733: PUSH
2734: FOR_TO
2735: IFFALSE 3005
// begin side := GetSide ( filter [ i ] ) ;
2737: LD_ADDR_VAR 0 3
2741: PUSH
2742: LD_VAR 0 1
2746: PUSH
2747: LD_VAR 0 2
2751: ARRAY
2752: PPUSH
2753: CALL_OW 255
2757: ST_TO_ADDR
// driver := IsDrivenBy ( filter [ i ] ) ;
2758: LD_ADDR_VAR 0 4
2762: PUSH
2763: LD_VAR 0 1
2767: PUSH
2768: LD_VAR 0 2
2772: ARRAY
2773: PPUSH
2774: CALL_OW 311
2778: ST_TO_ADDR
// un := filter [ i ] ;
2779: LD_ADDR_VAR 0 5
2783: PUSH
2784: LD_VAR 0 1
2788: PUSH
2789: LD_VAR 0 2
2793: ARRAY
2794: ST_TO_ADDR
// if IsInUnit ( driver ) then
2795: LD_VAR 0 4
2799: PPUSH
2800: CALL_OW 310
2804: IFFALSE 2815
// ComExitVehicle ( driver ) ;
2806: LD_VAR 0 4
2810: PPUSH
2811: CALL_OW 121
// Wait ( 0 0$0.3 ) ;
2815: LD_INT 10
2817: PPUSH
2818: CALL_OW 67
// RemoveUnit ( filter [ i ] ) ;
2822: LD_VAR 0 1
2826: PUSH
2827: LD_VAR 0 2
2831: ARRAY
2832: PPUSH
2833: CALL_OW 64
// case side of 1 :
2837: LD_VAR 0 3
2841: PUSH
2842: LD_INT 1
2844: DOUBLE
2845: EQUAL
2846: IFTRUE 2850
2848: GO 2874
2850: POP
// p1 := p1 + ScoreBoard ( un ) ; 2 :
2851: LD_ADDR_EXP 7
2855: PUSH
2856: LD_EXP 7
2860: PUSH
2861: LD_VAR 0 5
2865: PPUSH
2866: CALL 1953 0 1
2870: PLUS
2871: ST_TO_ADDR
2872: GO 3003
2874: LD_INT 2
2876: DOUBLE
2877: EQUAL
2878: IFTRUE 2882
2880: GO 2906
2882: POP
// p2 := p2 + ScoreBoard ( un ) ; 3 :
2883: LD_ADDR_EXP 8
2887: PUSH
2888: LD_EXP 8
2892: PUSH
2893: LD_VAR 0 5
2897: PPUSH
2898: CALL 1953 0 1
2902: PLUS
2903: ST_TO_ADDR
2904: GO 3003
2906: LD_INT 3
2908: DOUBLE
2909: EQUAL
2910: IFTRUE 2914
2912: GO 2938
2914: POP
// p3 := p3 + ScoreBoard ( un ) ; 4 :
2915: LD_ADDR_EXP 9
2919: PUSH
2920: LD_EXP 9
2924: PUSH
2925: LD_VAR 0 5
2929: PPUSH
2930: CALL 1953 0 1
2934: PLUS
2935: ST_TO_ADDR
2936: GO 3003
2938: LD_INT 4
2940: DOUBLE
2941: EQUAL
2942: IFTRUE 2946
2944: GO 2970
2946: POP
// p4 := p4 + ScoreBoard ( un ) ; 5 :
2947: LD_ADDR_EXP 10
2951: PUSH
2952: LD_EXP 10
2956: PUSH
2957: LD_VAR 0 5
2961: PPUSH
2962: CALL 1953 0 1
2966: PLUS
2967: ST_TO_ADDR
2968: GO 3003
2970: LD_INT 5
2972: DOUBLE
2973: EQUAL
2974: IFTRUE 2978
2976: GO 3002
2978: POP
// p5 := p5 + ScoreBoard ( un ) ; end ;
2979: LD_ADDR_EXP 11
2983: PUSH
2984: LD_EXP 11
2988: PUSH
2989: LD_VAR 0 5
2993: PPUSH
2994: CALL 1953 0 1
2998: PLUS
2999: ST_TO_ADDR
3000: GO 3003
3002: POP
// end ;
3003: GO 2734
3005: POP
3006: POP
// case players of 3 :
3007: LD_EXP 3
3011: PUSH
3012: LD_INT 3
3014: DOUBLE
3015: EQUAL
3016: IFTRUE 3020
3018: GO 3070
3020: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 ] ;
3021: LD_ADDR_OWVAR 47
3025: PUSH
3026: LD_STRING #tick
3028: PUSH
3029: LD_EXP 5
3033: PUSH
3034: LD_STRING #player1
3036: PUSH
3037: LD_EXP 7
3041: PUSH
3042: LD_STRING #player2
3044: PUSH
3045: LD_EXP 8
3049: PUSH
3050: LD_STRING #player3
3052: PUSH
3053: LD_EXP 9
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: LIST
3064: LIST
3065: LIST
3066: LIST
3067: ST_TO_ADDR
// end ; 4 :
3068: GO 3217
3070: LD_INT 4
3072: DOUBLE
3073: EQUAL
3074: IFTRUE 3078
3076: GO 3138
3078: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 , #player4 , p4 ] ;
3079: LD_ADDR_OWVAR 47
3083: PUSH
3084: LD_STRING #tick
3086: PUSH
3087: LD_EXP 5
3091: PUSH
3092: LD_STRING #player1
3094: PUSH
3095: LD_EXP 7
3099: PUSH
3100: LD_STRING #player2
3102: PUSH
3103: LD_EXP 8
3107: PUSH
3108: LD_STRING #player3
3110: PUSH
3111: LD_EXP 9
3115: PUSH
3116: LD_STRING #player4
3118: PUSH
3119: LD_EXP 10
3123: PUSH
3124: EMPTY
3125: LIST
3126: LIST
3127: LIST
3128: LIST
3129: LIST
3130: LIST
3131: LIST
3132: LIST
3133: LIST
3134: LIST
3135: ST_TO_ADDR
// end ; 5 :
3136: GO 3217
3138: LD_INT 5
3140: DOUBLE
3141: EQUAL
3142: IFTRUE 3146
3144: GO 3216
3146: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 , #player4 , p4 , #player5 , p5 ] ;
3147: LD_ADDR_OWVAR 47
3151: PUSH
3152: LD_STRING #tick
3154: PUSH
3155: LD_EXP 5
3159: PUSH
3160: LD_STRING #player1
3162: PUSH
3163: LD_EXP 7
3167: PUSH
3168: LD_STRING #player2
3170: PUSH
3171: LD_EXP 8
3175: PUSH
3176: LD_STRING #player3
3178: PUSH
3179: LD_EXP 9
3183: PUSH
3184: LD_STRING #player4
3186: PUSH
3187: LD_EXP 10
3191: PUSH
3192: LD_STRING #player5
3194: PUSH
3195: LD_EXP 11
3199: PUSH
3200: EMPTY
3201: LIST
3202: LIST
3203: LIST
3204: LIST
3205: LIST
3206: LIST
3207: LIST
3208: LIST
3209: LIST
3210: LIST
3211: LIST
3212: LIST
3213: ST_TO_ADDR
// end ; end ;
3214: GO 3217
3216: POP
// end ;
3217: PPOPN 5
3219: END
// every 0 0$05 trigger time do var chance , p ;
3220: LD_EXP 5
3224: IFFALSE 3371
3226: GO 3228
3228: DISABLE
3229: LD_INT 0
3231: PPUSH
3232: PPUSH
// begin enable ;
3233: ENABLE
// Wait ( Rand ( 0 0$01 , 0 0$06 ) ) ;
3234: LD_INT 35
3236: PPUSH
3237: LD_INT 210
3239: PPUSH
3240: CALL_OW 12
3244: PPUSH
3245: CALL_OW 67
// if FilterAllUnits ( [ f_type , unit_vehicle ] ) < veh_amount then
3249: LD_INT 21
3251: PUSH
3252: LD_INT 2
3254: PUSH
3255: EMPTY
3256: LIST
3257: LIST
3258: PPUSH
3259: CALL_OW 69
3263: PUSH
3264: LD_EXP 6
3268: LESS
3269: IFFALSE 3371
// begin SpawnCar ( false , veh_spawn ) ;
3271: LD_INT 0
3273: PPUSH
3274: LD_INT 5
3276: PPUSH
3277: CALL 946 0 2
// if sib_bomb and FilterAllUnits ( [ f_or , [ [ f_weapon , us_siberium_rocket ] , [ f_weapon , ru_siberium_rocket ] ] ] ) = 0 then
3281: LD_EXP 4
3285: PUSH
3286: LD_INT 2
3288: PUSH
3289: LD_INT 34
3291: PUSH
3292: LD_INT 8
3294: PUSH
3295: EMPTY
3296: LIST
3297: LIST
3298: PUSH
3299: LD_INT 34
3301: PUSH
3302: LD_INT 48
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: PUSH
3309: EMPTY
3310: LIST
3311: LIST
3312: PUSH
3313: EMPTY
3314: LIST
3315: LIST
3316: PPUSH
3317: CALL_OW 69
3321: PUSH
3322: LD_INT 0
3324: EQUAL
3325: AND
3326: IFFALSE 3371
// begin chance := 23 ;
3328: LD_ADDR_VAR 0 1
3332: PUSH
3333: LD_INT 23
3335: ST_TO_ADDR
// p := Rand ( 0 , 100 ) ;
3336: LD_ADDR_VAR 0 2
3340: PUSH
3341: LD_INT 0
3343: PPUSH
3344: LD_INT 100
3346: PPUSH
3347: CALL_OW 12
3351: ST_TO_ADDR
// if p < chance then
3352: LD_VAR 0 2
3356: PUSH
3357: LD_VAR 0 1
3361: LESS
3362: IFFALSE 3371
// SpawnSibRocket ( veh_spawn ) ;
3364: LD_INT 5
3366: PPUSH
3367: CALL 1784 0 1
// end ; end ; end ; end_of_file
3371: PPOPN 2
3373: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
3374: LD_INT 0
3376: PPUSH
3377: PPUSH
3378: PPUSH
3379: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
3380: LD_VAR 0 1
3384: PPUSH
3385: CALL_OW 264
3389: PUSH
3390: LD_INT 91
3392: EQUAL
3393: IFFALSE 3465
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
3395: LD_INT 68
3397: PPUSH
3398: LD_VAR 0 1
3402: PPUSH
3403: CALL_OW 255
3407: PPUSH
3408: CALL_OW 321
3412: PUSH
3413: LD_INT 2
3415: EQUAL
3416: IFFALSE 3428
// eff := 70 else
3418: LD_ADDR_VAR 0 4
3422: PUSH
3423: LD_INT 70
3425: ST_TO_ADDR
3426: GO 3436
// eff := 30 ;
3428: LD_ADDR_VAR 0 4
3432: PUSH
3433: LD_INT 30
3435: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
3436: LD_VAR 0 1
3440: PPUSH
3441: CALL_OW 250
3445: PPUSH
3446: LD_VAR 0 1
3450: PPUSH
3451: CALL_OW 251
3455: PPUSH
3456: LD_VAR 0 4
3460: PPUSH
3461: CALL_OW 495
// end ; end ;
3465: LD_VAR 0 2
3469: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
3470: LD_INT 0
3472: PPUSH
// end ;
3473: LD_VAR 0 4
3477: RET
// export function SOS_Command ( cmd ) ; begin
3478: LD_INT 0
3480: PPUSH
// end ;
3481: LD_VAR 0 2
3485: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
3486: LD_INT 0
3488: PPUSH
// end ;
3489: LD_VAR 0 6
3493: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
3494: LD_INT 0
3496: PPUSH
3497: PPUSH
// if not vehicle or not factory then
3498: LD_VAR 0 1
3502: NOT
3503: PUSH
3504: LD_VAR 0 2
3508: NOT
3509: OR
3510: IFFALSE 3514
// exit ;
3512: GO 3745
// if factoryWaypoints >= factory then
3514: LD_EXP 81
3518: PUSH
3519: LD_VAR 0 2
3523: GREATEREQUAL
3524: IFFALSE 3745
// if factoryWaypoints [ factory ] then
3526: LD_EXP 81
3530: PUSH
3531: LD_VAR 0 2
3535: ARRAY
3536: IFFALSE 3745
// begin if GetControl ( vehicle ) = control_manual then
3538: LD_VAR 0 1
3542: PPUSH
3543: CALL_OW 263
3547: PUSH
3548: LD_INT 1
3550: EQUAL
3551: IFFALSE 3632
// begin driver := IsDrivenBy ( vehicle ) ;
3553: LD_ADDR_VAR 0 4
3557: PUSH
3558: LD_VAR 0 1
3562: PPUSH
3563: CALL_OW 311
3567: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
3568: LD_VAR 0 4
3572: PPUSH
3573: LD_EXP 81
3577: PUSH
3578: LD_VAR 0 2
3582: ARRAY
3583: PUSH
3584: LD_INT 3
3586: ARRAY
3587: PPUSH
3588: LD_EXP 81
3592: PUSH
3593: LD_VAR 0 2
3597: ARRAY
3598: PUSH
3599: LD_INT 4
3601: ARRAY
3602: PPUSH
3603: CALL_OW 171
// AddComExitVehicle ( driver ) ;
3607: LD_VAR 0 4
3611: PPUSH
3612: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
3616: LD_VAR 0 4
3620: PPUSH
3621: LD_VAR 0 2
3625: PPUSH
3626: CALL_OW 180
// end else
3630: GO 3745
// if GetControl ( vehicle ) = control_remote then
3632: LD_VAR 0 1
3636: PPUSH
3637: CALL_OW 263
3641: PUSH
3642: LD_INT 2
3644: EQUAL
3645: IFFALSE 3706
// begin wait ( 0 0$2 ) ;
3647: LD_INT 70
3649: PPUSH
3650: CALL_OW 67
// if Connect ( vehicle ) then
3654: LD_VAR 0 1
3658: PPUSH
3659: CALL 31568 0 1
3663: IFFALSE 3704
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
3665: LD_VAR 0 1
3669: PPUSH
3670: LD_EXP 81
3674: PUSH
3675: LD_VAR 0 2
3679: ARRAY
3680: PUSH
3681: LD_INT 3
3683: ARRAY
3684: PPUSH
3685: LD_EXP 81
3689: PUSH
3690: LD_VAR 0 2
3694: ARRAY
3695: PUSH
3696: LD_INT 4
3698: ARRAY
3699: PPUSH
3700: CALL_OW 171
// end else
3704: GO 3745
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
3706: LD_VAR 0 1
3710: PPUSH
3711: LD_EXP 81
3715: PUSH
3716: LD_VAR 0 2
3720: ARRAY
3721: PUSH
3722: LD_INT 3
3724: ARRAY
3725: PPUSH
3726: LD_EXP 81
3730: PUSH
3731: LD_VAR 0 2
3735: ARRAY
3736: PUSH
3737: LD_INT 4
3739: ARRAY
3740: PPUSH
3741: CALL_OW 171
// end ; end ;
3745: LD_VAR 0 3
3749: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
3750: LD_INT 0
3752: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
3753: LD_VAR 0 1
3757: PUSH
3758: LD_INT 250
3760: EQUAL
3761: PUSH
3762: LD_VAR 0 2
3766: PPUSH
3767: CALL_OW 264
3771: PUSH
3772: LD_INT 81
3774: EQUAL
3775: AND
3776: IFFALSE 3797
// MinerPlaceMine ( unit , x , y ) ;
3778: LD_VAR 0 2
3782: PPUSH
3783: LD_VAR 0 4
3787: PPUSH
3788: LD_VAR 0 5
3792: PPUSH
3793: CALL 6182 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
3797: LD_VAR 0 1
3801: PUSH
3802: LD_INT 251
3804: EQUAL
3805: PUSH
3806: LD_VAR 0 2
3810: PPUSH
3811: CALL_OW 264
3815: PUSH
3816: LD_INT 81
3818: EQUAL
3819: AND
3820: IFFALSE 3841
// MinerDetonateMine ( unit , x , y ) ;
3822: LD_VAR 0 2
3826: PPUSH
3827: LD_VAR 0 4
3831: PPUSH
3832: LD_VAR 0 5
3836: PPUSH
3837: CALL 6457 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
3841: LD_VAR 0 1
3845: PUSH
3846: LD_INT 252
3848: EQUAL
3849: PUSH
3850: LD_VAR 0 2
3854: PPUSH
3855: CALL_OW 264
3859: PUSH
3860: LD_INT 81
3862: EQUAL
3863: AND
3864: IFFALSE 3885
// MinerCreateMinefield ( unit , x , y ) ;
3866: LD_VAR 0 2
3870: PPUSH
3871: LD_VAR 0 4
3875: PPUSH
3876: LD_VAR 0 5
3880: PPUSH
3881: CALL 6874 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
3885: LD_VAR 0 1
3889: PUSH
3890: LD_INT 253
3892: EQUAL
3893: PUSH
3894: LD_VAR 0 2
3898: PPUSH
3899: CALL_OW 257
3903: PUSH
3904: LD_INT 5
3906: EQUAL
3907: AND
3908: IFFALSE 3929
// ComBinocular ( unit , x , y ) ;
3910: LD_VAR 0 2
3914: PPUSH
3915: LD_VAR 0 4
3919: PPUSH
3920: LD_VAR 0 5
3924: PPUSH
3925: CALL 7243 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
3929: LD_VAR 0 1
3933: PUSH
3934: LD_INT 254
3936: EQUAL
3937: PUSH
3938: LD_VAR 0 2
3942: PPUSH
3943: CALL_OW 264
3947: PUSH
3948: LD_INT 99
3950: EQUAL
3951: AND
3952: PUSH
3953: LD_VAR 0 3
3957: PPUSH
3958: CALL_OW 263
3962: PUSH
3963: LD_INT 3
3965: EQUAL
3966: AND
3967: IFFALSE 3983
// HackDestroyVehicle ( unit , selectedUnit ) ;
3969: LD_VAR 0 2
3973: PPUSH
3974: LD_VAR 0 3
3978: PPUSH
3979: CALL 5546 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
3983: LD_VAR 0 1
3987: PUSH
3988: LD_INT 255
3990: EQUAL
3991: PUSH
3992: LD_VAR 0 2
3996: PPUSH
3997: CALL_OW 264
4001: PUSH
4002: LD_INT 14
4004: PUSH
4005: LD_INT 53
4007: PUSH
4008: EMPTY
4009: LIST
4010: LIST
4011: IN
4012: AND
4013: PUSH
4014: LD_VAR 0 4
4018: PPUSH
4019: LD_VAR 0 5
4023: PPUSH
4024: CALL_OW 488
4028: AND
4029: IFFALSE 4053
// CutTreeXYR ( unit , x , y , 12 ) ;
4031: LD_VAR 0 2
4035: PPUSH
4036: LD_VAR 0 4
4040: PPUSH
4041: LD_VAR 0 5
4045: PPUSH
4046: LD_INT 12
4048: PPUSH
4049: CALL 4116 0 4
// if cmd = 256 then
4053: LD_VAR 0 1
4057: PUSH
4058: LD_INT 256
4060: EQUAL
4061: IFFALSE 4082
// SetFactoryWaypoint ( unit , x , y ) ;
4063: LD_VAR 0 2
4067: PPUSH
4068: LD_VAR 0 4
4072: PPUSH
4073: LD_VAR 0 5
4077: PPUSH
4078: CALL 22151 0 3
// if cmd = 257 then
4082: LD_VAR 0 1
4086: PUSH
4087: LD_INT 257
4089: EQUAL
4090: IFFALSE 4111
// SetWarehouseGatheringPoint ( unit , x , y ) ;
4092: LD_VAR 0 2
4096: PPUSH
4097: LD_VAR 0 4
4101: PPUSH
4102: LD_VAR 0 5
4106: PPUSH
4107: CALL 22513 0 3
// end ;
4111: LD_VAR 0 6
4115: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
4116: LD_INT 0
4118: PPUSH
4119: PPUSH
4120: PPUSH
4121: PPUSH
4122: PPUSH
4123: PPUSH
4124: PPUSH
4125: PPUSH
4126: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
4127: LD_VAR 0 1
4131: NOT
4132: PUSH
4133: LD_VAR 0 2
4137: PPUSH
4138: LD_VAR 0 3
4142: PPUSH
4143: CALL_OW 488
4147: NOT
4148: OR
4149: PUSH
4150: LD_VAR 0 4
4154: NOT
4155: OR
4156: IFFALSE 4160
// exit ;
4158: GO 4500
// list := [ ] ;
4160: LD_ADDR_VAR 0 13
4164: PUSH
4165: EMPTY
4166: ST_TO_ADDR
// if x - r < 0 then
4167: LD_VAR 0 2
4171: PUSH
4172: LD_VAR 0 4
4176: MINUS
4177: PUSH
4178: LD_INT 0
4180: LESS
4181: IFFALSE 4193
// min_x := 0 else
4183: LD_ADDR_VAR 0 7
4187: PUSH
4188: LD_INT 0
4190: ST_TO_ADDR
4191: GO 4209
// min_x := x - r ;
4193: LD_ADDR_VAR 0 7
4197: PUSH
4198: LD_VAR 0 2
4202: PUSH
4203: LD_VAR 0 4
4207: MINUS
4208: ST_TO_ADDR
// if y - r < 0 then
4209: LD_VAR 0 3
4213: PUSH
4214: LD_VAR 0 4
4218: MINUS
4219: PUSH
4220: LD_INT 0
4222: LESS
4223: IFFALSE 4235
// min_y := 0 else
4225: LD_ADDR_VAR 0 8
4229: PUSH
4230: LD_INT 0
4232: ST_TO_ADDR
4233: GO 4251
// min_y := y - r ;
4235: LD_ADDR_VAR 0 8
4239: PUSH
4240: LD_VAR 0 3
4244: PUSH
4245: LD_VAR 0 4
4249: MINUS
4250: ST_TO_ADDR
// max_x := x + r ;
4251: LD_ADDR_VAR 0 9
4255: PUSH
4256: LD_VAR 0 2
4260: PUSH
4261: LD_VAR 0 4
4265: PLUS
4266: ST_TO_ADDR
// max_y := y + r ;
4267: LD_ADDR_VAR 0 10
4271: PUSH
4272: LD_VAR 0 3
4276: PUSH
4277: LD_VAR 0 4
4281: PLUS
4282: ST_TO_ADDR
// for _x = min_x to max_x do
4283: LD_ADDR_VAR 0 11
4287: PUSH
4288: DOUBLE
4289: LD_VAR 0 7
4293: DEC
4294: ST_TO_ADDR
4295: LD_VAR 0 9
4299: PUSH
4300: FOR_TO
4301: IFFALSE 4418
// for _y = min_y to max_y do
4303: LD_ADDR_VAR 0 12
4307: PUSH
4308: DOUBLE
4309: LD_VAR 0 8
4313: DEC
4314: ST_TO_ADDR
4315: LD_VAR 0 10
4319: PUSH
4320: FOR_TO
4321: IFFALSE 4414
// begin if not ValidHex ( _x , _y ) then
4323: LD_VAR 0 11
4327: PPUSH
4328: LD_VAR 0 12
4332: PPUSH
4333: CALL_OW 488
4337: NOT
4338: IFFALSE 4342
// continue ;
4340: GO 4320
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
4342: LD_VAR 0 11
4346: PPUSH
4347: LD_VAR 0 12
4351: PPUSH
4352: CALL_OW 351
4356: PUSH
4357: LD_VAR 0 11
4361: PPUSH
4362: LD_VAR 0 12
4366: PPUSH
4367: CALL_OW 554
4371: AND
4372: IFFALSE 4412
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
4374: LD_ADDR_VAR 0 13
4378: PUSH
4379: LD_VAR 0 13
4383: PPUSH
4384: LD_VAR 0 13
4388: PUSH
4389: LD_INT 1
4391: PLUS
4392: PPUSH
4393: LD_VAR 0 11
4397: PUSH
4398: LD_VAR 0 12
4402: PUSH
4403: EMPTY
4404: LIST
4405: LIST
4406: PPUSH
4407: CALL_OW 2
4411: ST_TO_ADDR
// end ;
4412: GO 4320
4414: POP
4415: POP
4416: GO 4300
4418: POP
4419: POP
// if not list then
4420: LD_VAR 0 13
4424: NOT
4425: IFFALSE 4429
// exit ;
4427: GO 4500
// for i in list do
4429: LD_ADDR_VAR 0 6
4433: PUSH
4434: LD_VAR 0 13
4438: PUSH
4439: FOR_IN
4440: IFFALSE 4498
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
4442: LD_VAR 0 1
4446: PPUSH
4447: LD_STRING M
4449: PUSH
4450: LD_VAR 0 6
4454: PUSH
4455: LD_INT 1
4457: ARRAY
4458: PUSH
4459: LD_VAR 0 6
4463: PUSH
4464: LD_INT 2
4466: ARRAY
4467: PUSH
4468: LD_INT 0
4470: PUSH
4471: LD_INT 0
4473: PUSH
4474: LD_INT 0
4476: PUSH
4477: LD_INT 0
4479: PUSH
4480: EMPTY
4481: LIST
4482: LIST
4483: LIST
4484: LIST
4485: LIST
4486: LIST
4487: LIST
4488: PUSH
4489: EMPTY
4490: LIST
4491: PPUSH
4492: CALL_OW 447
4496: GO 4439
4498: POP
4499: POP
// end ;
4500: LD_VAR 0 5
4504: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
4505: LD_EXP 12
4509: NOT
4510: IFFALSE 4560
4512: GO 4514
4514: DISABLE
// begin initHack := true ;
4515: LD_ADDR_EXP 12
4519: PUSH
4520: LD_INT 1
4522: ST_TO_ADDR
// hackTanks := [ ] ;
4523: LD_ADDR_EXP 13
4527: PUSH
4528: EMPTY
4529: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
4530: LD_ADDR_EXP 14
4534: PUSH
4535: EMPTY
4536: ST_TO_ADDR
// hackLimit := 3 ;
4537: LD_ADDR_EXP 15
4541: PUSH
4542: LD_INT 3
4544: ST_TO_ADDR
// hackDist := 12 ;
4545: LD_ADDR_EXP 16
4549: PUSH
4550: LD_INT 12
4552: ST_TO_ADDR
// hackCounter := [ ] ;
4553: LD_ADDR_EXP 17
4557: PUSH
4558: EMPTY
4559: ST_TO_ADDR
// end ;
4560: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
4561: LD_EXP 12
4565: PUSH
4566: LD_INT 34
4568: PUSH
4569: LD_INT 99
4571: PUSH
4572: EMPTY
4573: LIST
4574: LIST
4575: PPUSH
4576: CALL_OW 69
4580: AND
4581: IFFALSE 4834
4583: GO 4585
4585: DISABLE
4586: LD_INT 0
4588: PPUSH
4589: PPUSH
// begin enable ;
4590: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
4591: LD_ADDR_VAR 0 1
4595: PUSH
4596: LD_INT 34
4598: PUSH
4599: LD_INT 99
4601: PUSH
4602: EMPTY
4603: LIST
4604: LIST
4605: PPUSH
4606: CALL_OW 69
4610: PUSH
4611: FOR_IN
4612: IFFALSE 4832
// begin if not i in hackTanks then
4614: LD_VAR 0 1
4618: PUSH
4619: LD_EXP 13
4623: IN
4624: NOT
4625: IFFALSE 4708
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
4627: LD_ADDR_EXP 13
4631: PUSH
4632: LD_EXP 13
4636: PPUSH
4637: LD_EXP 13
4641: PUSH
4642: LD_INT 1
4644: PLUS
4645: PPUSH
4646: LD_VAR 0 1
4650: PPUSH
4651: CALL_OW 1
4655: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
4656: LD_ADDR_EXP 14
4660: PUSH
4661: LD_EXP 14
4665: PPUSH
4666: LD_EXP 14
4670: PUSH
4671: LD_INT 1
4673: PLUS
4674: PPUSH
4675: EMPTY
4676: PPUSH
4677: CALL_OW 1
4681: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
4682: LD_ADDR_EXP 17
4686: PUSH
4687: LD_EXP 17
4691: PPUSH
4692: LD_EXP 17
4696: PUSH
4697: LD_INT 1
4699: PLUS
4700: PPUSH
4701: EMPTY
4702: PPUSH
4703: CALL_OW 1
4707: ST_TO_ADDR
// end ; if not IsOk ( i ) then
4708: LD_VAR 0 1
4712: PPUSH
4713: CALL_OW 302
4717: NOT
4718: IFFALSE 4731
// begin HackUnlinkAll ( i ) ;
4720: LD_VAR 0 1
4724: PPUSH
4725: CALL 4837 0 1
// continue ;
4729: GO 4611
// end ; HackCheckCapturedStatus ( i ) ;
4731: LD_VAR 0 1
4735: PPUSH
4736: CALL 5280 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
4740: LD_ADDR_VAR 0 2
4744: PUSH
4745: LD_INT 81
4747: PUSH
4748: LD_VAR 0 1
4752: PPUSH
4753: CALL_OW 255
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: PUSH
4762: LD_INT 33
4764: PUSH
4765: LD_INT 3
4767: PUSH
4768: EMPTY
4769: LIST
4770: LIST
4771: PUSH
4772: LD_INT 91
4774: PUSH
4775: LD_VAR 0 1
4779: PUSH
4780: LD_EXP 16
4784: PUSH
4785: EMPTY
4786: LIST
4787: LIST
4788: LIST
4789: PUSH
4790: LD_INT 50
4792: PUSH
4793: EMPTY
4794: LIST
4795: PUSH
4796: EMPTY
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: PPUSH
4802: CALL_OW 69
4806: ST_TO_ADDR
// if not tmp then
4807: LD_VAR 0 2
4811: NOT
4812: IFFALSE 4816
// continue ;
4814: GO 4611
// HackLink ( i , tmp ) ;
4816: LD_VAR 0 1
4820: PPUSH
4821: LD_VAR 0 2
4825: PPUSH
4826: CALL 4973 0 2
// end ;
4830: GO 4611
4832: POP
4833: POP
// end ;
4834: PPOPN 2
4836: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
4837: LD_INT 0
4839: PPUSH
4840: PPUSH
4841: PPUSH
// if not hack in hackTanks then
4842: LD_VAR 0 1
4846: PUSH
4847: LD_EXP 13
4851: IN
4852: NOT
4853: IFFALSE 4857
// exit ;
4855: GO 4968
// index := GetElementIndex ( hackTanks , hack ) ;
4857: LD_ADDR_VAR 0 4
4861: PUSH
4862: LD_EXP 13
4866: PPUSH
4867: LD_VAR 0 1
4871: PPUSH
4872: CALL 28384 0 2
4876: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
4877: LD_EXP 14
4881: PUSH
4882: LD_VAR 0 4
4886: ARRAY
4887: IFFALSE 4968
// begin for i in hackTanksCaptured [ index ] do
4889: LD_ADDR_VAR 0 3
4893: PUSH
4894: LD_EXP 14
4898: PUSH
4899: LD_VAR 0 4
4903: ARRAY
4904: PUSH
4905: FOR_IN
4906: IFFALSE 4932
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
4908: LD_VAR 0 3
4912: PUSH
4913: LD_INT 1
4915: ARRAY
4916: PPUSH
4917: LD_VAR 0 3
4921: PUSH
4922: LD_INT 2
4924: ARRAY
4925: PPUSH
4926: CALL_OW 235
4930: GO 4905
4932: POP
4933: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
4934: LD_ADDR_EXP 14
4938: PUSH
4939: LD_EXP 14
4943: PPUSH
4944: LD_VAR 0 4
4948: PPUSH
4949: EMPTY
4950: PPUSH
4951: CALL_OW 1
4955: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
4956: LD_VAR 0 1
4960: PPUSH
4961: LD_INT 0
4963: PPUSH
4964: CALL_OW 505
// end ; end ;
4968: LD_VAR 0 2
4972: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
4973: LD_INT 0
4975: PPUSH
4976: PPUSH
4977: PPUSH
// if not hack in hackTanks or not vehicles then
4978: LD_VAR 0 1
4982: PUSH
4983: LD_EXP 13
4987: IN
4988: NOT
4989: PUSH
4990: LD_VAR 0 2
4994: NOT
4995: OR
4996: IFFALSE 5000
// exit ;
4998: GO 5275
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
5000: LD_ADDR_VAR 0 2
5004: PUSH
5005: LD_VAR 0 1
5009: PPUSH
5010: LD_VAR 0 2
5014: PPUSH
5015: LD_INT 1
5017: PPUSH
5018: LD_INT 1
5020: PPUSH
5021: CALL 29034 0 4
5025: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
5026: LD_ADDR_VAR 0 5
5030: PUSH
5031: LD_EXP 13
5035: PPUSH
5036: LD_VAR 0 1
5040: PPUSH
5041: CALL 28384 0 2
5045: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
5046: LD_EXP 14
5050: PUSH
5051: LD_VAR 0 5
5055: ARRAY
5056: PUSH
5057: LD_EXP 15
5061: LESS
5062: IFFALSE 5251
// begin for i := 1 to vehicles do
5064: LD_ADDR_VAR 0 4
5068: PUSH
5069: DOUBLE
5070: LD_INT 1
5072: DEC
5073: ST_TO_ADDR
5074: LD_VAR 0 2
5078: PUSH
5079: FOR_TO
5080: IFFALSE 5249
// begin if hackTanksCaptured [ index ] = hackLimit then
5082: LD_EXP 14
5086: PUSH
5087: LD_VAR 0 5
5091: ARRAY
5092: PUSH
5093: LD_EXP 15
5097: EQUAL
5098: IFFALSE 5102
// break ;
5100: GO 5249
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
5102: LD_ADDR_EXP 17
5106: PUSH
5107: LD_EXP 17
5111: PPUSH
5112: LD_VAR 0 5
5116: PPUSH
5117: LD_EXP 17
5121: PUSH
5122: LD_VAR 0 5
5126: ARRAY
5127: PUSH
5128: LD_INT 1
5130: PLUS
5131: PPUSH
5132: CALL_OW 1
5136: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
5137: LD_ADDR_EXP 14
5141: PUSH
5142: LD_EXP 14
5146: PPUSH
5147: LD_VAR 0 5
5151: PUSH
5152: LD_EXP 14
5156: PUSH
5157: LD_VAR 0 5
5161: ARRAY
5162: PUSH
5163: LD_INT 1
5165: PLUS
5166: PUSH
5167: EMPTY
5168: LIST
5169: LIST
5170: PPUSH
5171: LD_VAR 0 2
5175: PUSH
5176: LD_VAR 0 4
5180: ARRAY
5181: PUSH
5182: LD_VAR 0 2
5186: PUSH
5187: LD_VAR 0 4
5191: ARRAY
5192: PPUSH
5193: CALL_OW 255
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: PPUSH
5202: CALL 28599 0 3
5206: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
5207: LD_VAR 0 2
5211: PUSH
5212: LD_VAR 0 4
5216: ARRAY
5217: PPUSH
5218: LD_VAR 0 1
5222: PPUSH
5223: CALL_OW 255
5227: PPUSH
5228: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
5232: LD_VAR 0 2
5236: PUSH
5237: LD_VAR 0 4
5241: ARRAY
5242: PPUSH
5243: CALL_OW 141
// end ;
5247: GO 5079
5249: POP
5250: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
5251: LD_VAR 0 1
5255: PPUSH
5256: LD_EXP 14
5260: PUSH
5261: LD_VAR 0 5
5265: ARRAY
5266: PUSH
5267: LD_INT 0
5269: PLUS
5270: PPUSH
5271: CALL_OW 505
// end ;
5275: LD_VAR 0 3
5279: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
5280: LD_INT 0
5282: PPUSH
5283: PPUSH
5284: PPUSH
5285: PPUSH
// if not hack in hackTanks then
5286: LD_VAR 0 1
5290: PUSH
5291: LD_EXP 13
5295: IN
5296: NOT
5297: IFFALSE 5301
// exit ;
5299: GO 5541
// index := GetElementIndex ( hackTanks , hack ) ;
5301: LD_ADDR_VAR 0 4
5305: PUSH
5306: LD_EXP 13
5310: PPUSH
5311: LD_VAR 0 1
5315: PPUSH
5316: CALL 28384 0 2
5320: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
5321: LD_ADDR_VAR 0 3
5325: PUSH
5326: DOUBLE
5327: LD_EXP 14
5331: PUSH
5332: LD_VAR 0 4
5336: ARRAY
5337: INC
5338: ST_TO_ADDR
5339: LD_INT 1
5341: PUSH
5342: FOR_DOWNTO
5343: IFFALSE 5515
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
5345: LD_ADDR_VAR 0 5
5349: PUSH
5350: LD_EXP 14
5354: PUSH
5355: LD_VAR 0 4
5359: ARRAY
5360: PUSH
5361: LD_VAR 0 3
5365: ARRAY
5366: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
5367: LD_VAR 0 5
5371: PUSH
5372: LD_INT 1
5374: ARRAY
5375: PPUSH
5376: CALL_OW 302
5380: NOT
5381: PUSH
5382: LD_VAR 0 5
5386: PUSH
5387: LD_INT 1
5389: ARRAY
5390: PPUSH
5391: CALL_OW 255
5395: PUSH
5396: LD_VAR 0 1
5400: PPUSH
5401: CALL_OW 255
5405: NONEQUAL
5406: OR
5407: IFFALSE 5513
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
5409: LD_VAR 0 5
5413: PUSH
5414: LD_INT 1
5416: ARRAY
5417: PPUSH
5418: CALL_OW 305
5422: PUSH
5423: LD_VAR 0 5
5427: PUSH
5428: LD_INT 1
5430: ARRAY
5431: PPUSH
5432: CALL_OW 255
5436: PUSH
5437: LD_VAR 0 1
5441: PPUSH
5442: CALL_OW 255
5446: EQUAL
5447: AND
5448: IFFALSE 5472
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
5450: LD_VAR 0 5
5454: PUSH
5455: LD_INT 1
5457: ARRAY
5458: PPUSH
5459: LD_VAR 0 5
5463: PUSH
5464: LD_INT 2
5466: ARRAY
5467: PPUSH
5468: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
5472: LD_ADDR_EXP 14
5476: PUSH
5477: LD_EXP 14
5481: PPUSH
5482: LD_VAR 0 4
5486: PPUSH
5487: LD_EXP 14
5491: PUSH
5492: LD_VAR 0 4
5496: ARRAY
5497: PPUSH
5498: LD_VAR 0 3
5502: PPUSH
5503: CALL_OW 3
5507: PPUSH
5508: CALL_OW 1
5512: ST_TO_ADDR
// end ; end ;
5513: GO 5342
5515: POP
5516: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
5517: LD_VAR 0 1
5521: PPUSH
5522: LD_EXP 14
5526: PUSH
5527: LD_VAR 0 4
5531: ARRAY
5532: PUSH
5533: LD_INT 0
5535: PLUS
5536: PPUSH
5537: CALL_OW 505
// end ;
5541: LD_VAR 0 2
5545: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
5546: LD_INT 0
5548: PPUSH
5549: PPUSH
5550: PPUSH
5551: PPUSH
// if not hack in hackTanks then
5552: LD_VAR 0 1
5556: PUSH
5557: LD_EXP 13
5561: IN
5562: NOT
5563: IFFALSE 5567
// exit ;
5565: GO 5652
// index := GetElementIndex ( hackTanks , hack ) ;
5567: LD_ADDR_VAR 0 5
5571: PUSH
5572: LD_EXP 13
5576: PPUSH
5577: LD_VAR 0 1
5581: PPUSH
5582: CALL 28384 0 2
5586: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
5587: LD_ADDR_VAR 0 4
5591: PUSH
5592: DOUBLE
5593: LD_INT 1
5595: DEC
5596: ST_TO_ADDR
5597: LD_EXP 14
5601: PUSH
5602: LD_VAR 0 5
5606: ARRAY
5607: PUSH
5608: FOR_TO
5609: IFFALSE 5650
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
5611: LD_EXP 14
5615: PUSH
5616: LD_VAR 0 5
5620: ARRAY
5621: PUSH
5622: LD_VAR 0 4
5626: ARRAY
5627: PUSH
5628: LD_INT 1
5630: ARRAY
5631: PUSH
5632: LD_VAR 0 2
5636: EQUAL
5637: IFFALSE 5648
// KillUnit ( vehicle ) ;
5639: LD_VAR 0 2
5643: PPUSH
5644: CALL_OW 66
5648: GO 5608
5650: POP
5651: POP
// end ;
5652: LD_VAR 0 3
5656: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
5657: LD_EXP 18
5661: NOT
5662: IFFALSE 5697
5664: GO 5666
5666: DISABLE
// begin initMiner := true ;
5667: LD_ADDR_EXP 18
5671: PUSH
5672: LD_INT 1
5674: ST_TO_ADDR
// minersList := [ ] ;
5675: LD_ADDR_EXP 19
5679: PUSH
5680: EMPTY
5681: ST_TO_ADDR
// minerMinesList := [ ] ;
5682: LD_ADDR_EXP 20
5686: PUSH
5687: EMPTY
5688: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
5689: LD_ADDR_EXP 21
5693: PUSH
5694: LD_INT 5
5696: ST_TO_ADDR
// end ;
5697: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
5698: LD_EXP 18
5702: PUSH
5703: LD_INT 34
5705: PUSH
5706: LD_INT 81
5708: PUSH
5709: EMPTY
5710: LIST
5711: LIST
5712: PPUSH
5713: CALL_OW 69
5717: AND
5718: IFFALSE 6179
5720: GO 5722
5722: DISABLE
5723: LD_INT 0
5725: PPUSH
5726: PPUSH
5727: PPUSH
5728: PPUSH
// begin enable ;
5729: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
5730: LD_ADDR_VAR 0 1
5734: PUSH
5735: LD_INT 34
5737: PUSH
5738: LD_INT 81
5740: PUSH
5741: EMPTY
5742: LIST
5743: LIST
5744: PPUSH
5745: CALL_OW 69
5749: PUSH
5750: FOR_IN
5751: IFFALSE 5823
// begin if not i in minersList then
5753: LD_VAR 0 1
5757: PUSH
5758: LD_EXP 19
5762: IN
5763: NOT
5764: IFFALSE 5821
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
5766: LD_ADDR_EXP 19
5770: PUSH
5771: LD_EXP 19
5775: PPUSH
5776: LD_EXP 19
5780: PUSH
5781: LD_INT 1
5783: PLUS
5784: PPUSH
5785: LD_VAR 0 1
5789: PPUSH
5790: CALL_OW 1
5794: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
5795: LD_ADDR_EXP 20
5799: PUSH
5800: LD_EXP 20
5804: PPUSH
5805: LD_EXP 20
5809: PUSH
5810: LD_INT 1
5812: PLUS
5813: PPUSH
5814: EMPTY
5815: PPUSH
5816: CALL_OW 1
5820: ST_TO_ADDR
// end end ;
5821: GO 5750
5823: POP
5824: POP
// for i := minerMinesList downto 1 do
5825: LD_ADDR_VAR 0 1
5829: PUSH
5830: DOUBLE
5831: LD_EXP 20
5835: INC
5836: ST_TO_ADDR
5837: LD_INT 1
5839: PUSH
5840: FOR_DOWNTO
5841: IFFALSE 6177
// begin if IsLive ( minersList [ i ] ) then
5843: LD_EXP 19
5847: PUSH
5848: LD_VAR 0 1
5852: ARRAY
5853: PPUSH
5854: CALL_OW 300
5858: IFFALSE 5886
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
5860: LD_EXP 19
5864: PUSH
5865: LD_VAR 0 1
5869: ARRAY
5870: PPUSH
5871: LD_EXP 20
5875: PUSH
5876: LD_VAR 0 1
5880: ARRAY
5881: PPUSH
5882: CALL_OW 505
// if not minerMinesList [ i ] then
5886: LD_EXP 20
5890: PUSH
5891: LD_VAR 0 1
5895: ARRAY
5896: NOT
5897: IFFALSE 5901
// continue ;
5899: GO 5840
// for j := minerMinesList [ i ] downto 1 do
5901: LD_ADDR_VAR 0 2
5905: PUSH
5906: DOUBLE
5907: LD_EXP 20
5911: PUSH
5912: LD_VAR 0 1
5916: ARRAY
5917: INC
5918: ST_TO_ADDR
5919: LD_INT 1
5921: PUSH
5922: FOR_DOWNTO
5923: IFFALSE 6173
// begin side := GetSide ( minersList [ i ] ) ;
5925: LD_ADDR_VAR 0 3
5929: PUSH
5930: LD_EXP 19
5934: PUSH
5935: LD_VAR 0 1
5939: ARRAY
5940: PPUSH
5941: CALL_OW 255
5945: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
5946: LD_ADDR_VAR 0 4
5950: PUSH
5951: LD_EXP 20
5955: PUSH
5956: LD_VAR 0 1
5960: ARRAY
5961: PUSH
5962: LD_VAR 0 2
5966: ARRAY
5967: PUSH
5968: LD_INT 1
5970: ARRAY
5971: PPUSH
5972: LD_EXP 20
5976: PUSH
5977: LD_VAR 0 1
5981: ARRAY
5982: PUSH
5983: LD_VAR 0 2
5987: ARRAY
5988: PUSH
5989: LD_INT 2
5991: ARRAY
5992: PPUSH
5993: CALL_OW 428
5997: ST_TO_ADDR
// if not tmp then
5998: LD_VAR 0 4
6002: NOT
6003: IFFALSE 6007
// continue ;
6005: GO 5922
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
6007: LD_VAR 0 4
6011: PUSH
6012: LD_INT 81
6014: PUSH
6015: LD_VAR 0 3
6019: PUSH
6020: EMPTY
6021: LIST
6022: LIST
6023: PPUSH
6024: CALL_OW 69
6028: IN
6029: PUSH
6030: LD_EXP 20
6034: PUSH
6035: LD_VAR 0 1
6039: ARRAY
6040: PUSH
6041: LD_VAR 0 2
6045: ARRAY
6046: PUSH
6047: LD_INT 1
6049: ARRAY
6050: PPUSH
6051: LD_EXP 20
6055: PUSH
6056: LD_VAR 0 1
6060: ARRAY
6061: PUSH
6062: LD_VAR 0 2
6066: ARRAY
6067: PUSH
6068: LD_INT 2
6070: ARRAY
6071: PPUSH
6072: CALL_OW 458
6076: AND
6077: IFFALSE 6171
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
6079: LD_EXP 20
6083: PUSH
6084: LD_VAR 0 1
6088: ARRAY
6089: PUSH
6090: LD_VAR 0 2
6094: ARRAY
6095: PUSH
6096: LD_INT 1
6098: ARRAY
6099: PPUSH
6100: LD_EXP 20
6104: PUSH
6105: LD_VAR 0 1
6109: ARRAY
6110: PUSH
6111: LD_VAR 0 2
6115: ARRAY
6116: PUSH
6117: LD_INT 2
6119: ARRAY
6120: PPUSH
6121: LD_VAR 0 3
6125: PPUSH
6126: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
6130: LD_ADDR_EXP 20
6134: PUSH
6135: LD_EXP 20
6139: PPUSH
6140: LD_VAR 0 1
6144: PPUSH
6145: LD_EXP 20
6149: PUSH
6150: LD_VAR 0 1
6154: ARRAY
6155: PPUSH
6156: LD_VAR 0 2
6160: PPUSH
6161: CALL_OW 3
6165: PPUSH
6166: CALL_OW 1
6170: ST_TO_ADDR
// end ; end ;
6171: GO 5922
6173: POP
6174: POP
// end ;
6175: GO 5840
6177: POP
6178: POP
// end ;
6179: PPOPN 4
6181: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
6182: LD_INT 0
6184: PPUSH
6185: PPUSH
// result := false ;
6186: LD_ADDR_VAR 0 4
6190: PUSH
6191: LD_INT 0
6193: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
6194: LD_VAR 0 1
6198: PPUSH
6199: CALL_OW 264
6203: PUSH
6204: LD_INT 81
6206: EQUAL
6207: NOT
6208: IFFALSE 6212
// exit ;
6210: GO 6452
// index := GetElementIndex ( minersList , unit ) ;
6212: LD_ADDR_VAR 0 5
6216: PUSH
6217: LD_EXP 19
6221: PPUSH
6222: LD_VAR 0 1
6226: PPUSH
6227: CALL 28384 0 2
6231: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
6232: LD_EXP 20
6236: PUSH
6237: LD_VAR 0 5
6241: ARRAY
6242: PUSH
6243: LD_EXP 21
6247: GREATEREQUAL
6248: IFFALSE 6252
// exit ;
6250: GO 6452
// ComMoveXY ( unit , x , y ) ;
6252: LD_VAR 0 1
6256: PPUSH
6257: LD_VAR 0 2
6261: PPUSH
6262: LD_VAR 0 3
6266: PPUSH
6267: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6271: LD_INT 35
6273: PPUSH
6274: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
6278: LD_VAR 0 1
6282: PPUSH
6283: LD_VAR 0 2
6287: PPUSH
6288: LD_VAR 0 3
6292: PPUSH
6293: CALL 59739 0 3
6297: NOT
6298: PUSH
6299: LD_VAR 0 1
6303: PPUSH
6304: CALL_OW 314
6308: AND
6309: IFFALSE 6313
// exit ;
6311: GO 6452
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
6313: LD_VAR 0 2
6317: PPUSH
6318: LD_VAR 0 3
6322: PPUSH
6323: CALL_OW 428
6327: PUSH
6328: LD_VAR 0 1
6332: EQUAL
6333: PUSH
6334: LD_VAR 0 1
6338: PPUSH
6339: CALL_OW 314
6343: NOT
6344: AND
6345: IFFALSE 6271
// PlaySoundXY ( x , y , PlantMine ) ;
6347: LD_VAR 0 2
6351: PPUSH
6352: LD_VAR 0 3
6356: PPUSH
6357: LD_STRING PlantMine
6359: PPUSH
6360: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
6364: LD_VAR 0 2
6368: PPUSH
6369: LD_VAR 0 3
6373: PPUSH
6374: LD_VAR 0 1
6378: PPUSH
6379: CALL_OW 255
6383: PPUSH
6384: LD_INT 0
6386: PPUSH
6387: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
6391: LD_ADDR_EXP 20
6395: PUSH
6396: LD_EXP 20
6400: PPUSH
6401: LD_VAR 0 5
6405: PUSH
6406: LD_EXP 20
6410: PUSH
6411: LD_VAR 0 5
6415: ARRAY
6416: PUSH
6417: LD_INT 1
6419: PLUS
6420: PUSH
6421: EMPTY
6422: LIST
6423: LIST
6424: PPUSH
6425: LD_VAR 0 2
6429: PUSH
6430: LD_VAR 0 3
6434: PUSH
6435: EMPTY
6436: LIST
6437: LIST
6438: PPUSH
6439: CALL 28599 0 3
6443: ST_TO_ADDR
// result := true ;
6444: LD_ADDR_VAR 0 4
6448: PUSH
6449: LD_INT 1
6451: ST_TO_ADDR
// end ;
6452: LD_VAR 0 4
6456: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
6457: LD_INT 0
6459: PPUSH
6460: PPUSH
6461: PPUSH
// if not unit in minersList then
6462: LD_VAR 0 1
6466: PUSH
6467: LD_EXP 19
6471: IN
6472: NOT
6473: IFFALSE 6477
// exit ;
6475: GO 6869
// index := GetElementIndex ( minersList , unit ) ;
6477: LD_ADDR_VAR 0 6
6481: PUSH
6482: LD_EXP 19
6486: PPUSH
6487: LD_VAR 0 1
6491: PPUSH
6492: CALL 28384 0 2
6496: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
6497: LD_ADDR_VAR 0 5
6501: PUSH
6502: DOUBLE
6503: LD_EXP 20
6507: PUSH
6508: LD_VAR 0 6
6512: ARRAY
6513: INC
6514: ST_TO_ADDR
6515: LD_INT 1
6517: PUSH
6518: FOR_DOWNTO
6519: IFFALSE 6680
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
6521: LD_EXP 20
6525: PUSH
6526: LD_VAR 0 6
6530: ARRAY
6531: PUSH
6532: LD_VAR 0 5
6536: ARRAY
6537: PUSH
6538: LD_INT 1
6540: ARRAY
6541: PUSH
6542: LD_VAR 0 2
6546: EQUAL
6547: PUSH
6548: LD_EXP 20
6552: PUSH
6553: LD_VAR 0 6
6557: ARRAY
6558: PUSH
6559: LD_VAR 0 5
6563: ARRAY
6564: PUSH
6565: LD_INT 2
6567: ARRAY
6568: PUSH
6569: LD_VAR 0 3
6573: EQUAL
6574: AND
6575: IFFALSE 6678
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
6577: LD_EXP 20
6581: PUSH
6582: LD_VAR 0 6
6586: ARRAY
6587: PUSH
6588: LD_VAR 0 5
6592: ARRAY
6593: PUSH
6594: LD_INT 1
6596: ARRAY
6597: PPUSH
6598: LD_EXP 20
6602: PUSH
6603: LD_VAR 0 6
6607: ARRAY
6608: PUSH
6609: LD_VAR 0 5
6613: ARRAY
6614: PUSH
6615: LD_INT 2
6617: ARRAY
6618: PPUSH
6619: LD_VAR 0 1
6623: PPUSH
6624: CALL_OW 255
6628: PPUSH
6629: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
6633: LD_ADDR_EXP 20
6637: PUSH
6638: LD_EXP 20
6642: PPUSH
6643: LD_VAR 0 6
6647: PPUSH
6648: LD_EXP 20
6652: PUSH
6653: LD_VAR 0 6
6657: ARRAY
6658: PPUSH
6659: LD_VAR 0 5
6663: PPUSH
6664: CALL_OW 3
6668: PPUSH
6669: CALL_OW 1
6673: ST_TO_ADDR
// exit ;
6674: POP
6675: POP
6676: GO 6869
// end ; end ;
6678: GO 6518
6680: POP
6681: POP
// for i := minerMinesList [ index ] downto 1 do
6682: LD_ADDR_VAR 0 5
6686: PUSH
6687: DOUBLE
6688: LD_EXP 20
6692: PUSH
6693: LD_VAR 0 6
6697: ARRAY
6698: INC
6699: ST_TO_ADDR
6700: LD_INT 1
6702: PUSH
6703: FOR_DOWNTO
6704: IFFALSE 6867
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
6706: LD_EXP 20
6710: PUSH
6711: LD_VAR 0 6
6715: ARRAY
6716: PUSH
6717: LD_VAR 0 5
6721: ARRAY
6722: PUSH
6723: LD_INT 1
6725: ARRAY
6726: PPUSH
6727: LD_EXP 20
6731: PUSH
6732: LD_VAR 0 6
6736: ARRAY
6737: PUSH
6738: LD_VAR 0 5
6742: ARRAY
6743: PUSH
6744: LD_INT 2
6746: ARRAY
6747: PPUSH
6748: LD_VAR 0 2
6752: PPUSH
6753: LD_VAR 0 3
6757: PPUSH
6758: CALL_OW 298
6762: PUSH
6763: LD_INT 6
6765: LESS
6766: IFFALSE 6865
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
6768: LD_EXP 20
6772: PUSH
6773: LD_VAR 0 6
6777: ARRAY
6778: PUSH
6779: LD_VAR 0 5
6783: ARRAY
6784: PUSH
6785: LD_INT 1
6787: ARRAY
6788: PPUSH
6789: LD_EXP 20
6793: PUSH
6794: LD_VAR 0 6
6798: ARRAY
6799: PUSH
6800: LD_VAR 0 5
6804: ARRAY
6805: PUSH
6806: LD_INT 2
6808: ARRAY
6809: PPUSH
6810: LD_VAR 0 1
6814: PPUSH
6815: CALL_OW 255
6819: PPUSH
6820: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
6824: LD_ADDR_EXP 20
6828: PUSH
6829: LD_EXP 20
6833: PPUSH
6834: LD_VAR 0 6
6838: PPUSH
6839: LD_EXP 20
6843: PUSH
6844: LD_VAR 0 6
6848: ARRAY
6849: PPUSH
6850: LD_VAR 0 5
6854: PPUSH
6855: CALL_OW 3
6859: PPUSH
6860: CALL_OW 1
6864: ST_TO_ADDR
// end ; end ;
6865: GO 6703
6867: POP
6868: POP
// end ;
6869: LD_VAR 0 4
6873: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
6874: LD_INT 0
6876: PPUSH
6877: PPUSH
6878: PPUSH
6879: PPUSH
6880: PPUSH
6881: PPUSH
6882: PPUSH
6883: PPUSH
6884: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
6885: LD_VAR 0 1
6889: PPUSH
6890: CALL_OW 264
6894: PUSH
6895: LD_INT 81
6897: EQUAL
6898: NOT
6899: PUSH
6900: LD_VAR 0 1
6904: PUSH
6905: LD_EXP 19
6909: IN
6910: NOT
6911: OR
6912: IFFALSE 6916
// exit ;
6914: GO 7238
// index := GetElementIndex ( minersList , unit ) ;
6916: LD_ADDR_VAR 0 6
6920: PUSH
6921: LD_EXP 19
6925: PPUSH
6926: LD_VAR 0 1
6930: PPUSH
6931: CALL 28384 0 2
6935: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
6936: LD_ADDR_VAR 0 8
6940: PUSH
6941: LD_EXP 21
6945: PUSH
6946: LD_EXP 20
6950: PUSH
6951: LD_VAR 0 6
6955: ARRAY
6956: MINUS
6957: ST_TO_ADDR
// if not minesFreeAmount then
6958: LD_VAR 0 8
6962: NOT
6963: IFFALSE 6967
// exit ;
6965: GO 7238
// tmp := [ ] ;
6967: LD_ADDR_VAR 0 7
6971: PUSH
6972: EMPTY
6973: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
6974: LD_ADDR_VAR 0 5
6978: PUSH
6979: DOUBLE
6980: LD_INT 1
6982: DEC
6983: ST_TO_ADDR
6984: LD_VAR 0 8
6988: PUSH
6989: FOR_TO
6990: IFFALSE 7185
// begin _d := rand ( 0 , 5 ) ;
6992: LD_ADDR_VAR 0 11
6996: PUSH
6997: LD_INT 0
6999: PPUSH
7000: LD_INT 5
7002: PPUSH
7003: CALL_OW 12
7007: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
7008: LD_ADDR_VAR 0 12
7012: PUSH
7013: LD_INT 2
7015: PPUSH
7016: LD_INT 6
7018: PPUSH
7019: CALL_OW 12
7023: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
7024: LD_ADDR_VAR 0 9
7028: PUSH
7029: LD_VAR 0 2
7033: PPUSH
7034: LD_VAR 0 11
7038: PPUSH
7039: LD_VAR 0 12
7043: PPUSH
7044: CALL_OW 272
7048: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
7049: LD_ADDR_VAR 0 10
7053: PUSH
7054: LD_VAR 0 3
7058: PPUSH
7059: LD_VAR 0 11
7063: PPUSH
7064: LD_VAR 0 12
7068: PPUSH
7069: CALL_OW 273
7073: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
7074: LD_VAR 0 9
7078: PPUSH
7079: LD_VAR 0 10
7083: PPUSH
7084: CALL_OW 488
7088: PUSH
7089: LD_VAR 0 9
7093: PUSH
7094: LD_VAR 0 10
7098: PUSH
7099: EMPTY
7100: LIST
7101: LIST
7102: PUSH
7103: LD_VAR 0 7
7107: IN
7108: NOT
7109: AND
7110: PUSH
7111: LD_VAR 0 9
7115: PPUSH
7116: LD_VAR 0 10
7120: PPUSH
7121: CALL_OW 458
7125: NOT
7126: AND
7127: IFFALSE 7169
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
7129: LD_ADDR_VAR 0 7
7133: PUSH
7134: LD_VAR 0 7
7138: PPUSH
7139: LD_VAR 0 7
7143: PUSH
7144: LD_INT 1
7146: PLUS
7147: PPUSH
7148: LD_VAR 0 9
7152: PUSH
7153: LD_VAR 0 10
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: PPUSH
7162: CALL_OW 1
7166: ST_TO_ADDR
7167: GO 7183
// i := i - 1 ;
7169: LD_ADDR_VAR 0 5
7173: PUSH
7174: LD_VAR 0 5
7178: PUSH
7179: LD_INT 1
7181: MINUS
7182: ST_TO_ADDR
// end ;
7183: GO 6989
7185: POP
7186: POP
// for i in tmp do
7187: LD_ADDR_VAR 0 5
7191: PUSH
7192: LD_VAR 0 7
7196: PUSH
7197: FOR_IN
7198: IFFALSE 7236
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
7200: LD_VAR 0 1
7204: PPUSH
7205: LD_VAR 0 5
7209: PUSH
7210: LD_INT 1
7212: ARRAY
7213: PPUSH
7214: LD_VAR 0 5
7218: PUSH
7219: LD_INT 2
7221: ARRAY
7222: PPUSH
7223: CALL 6182 0 3
7227: NOT
7228: IFFALSE 7234
// exit ;
7230: POP
7231: POP
7232: GO 7238
7234: GO 7197
7236: POP
7237: POP
// end ;
7238: LD_VAR 0 4
7242: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
7243: LD_INT 0
7245: PPUSH
7246: PPUSH
7247: PPUSH
7248: PPUSH
7249: PPUSH
7250: PPUSH
7251: PPUSH
// if not GetClass ( unit ) = class_sniper then
7252: LD_VAR 0 1
7256: PPUSH
7257: CALL_OW 257
7261: PUSH
7262: LD_INT 5
7264: EQUAL
7265: NOT
7266: IFFALSE 7270
// exit ;
7268: GO 7658
// dist := 8 ;
7270: LD_ADDR_VAR 0 5
7274: PUSH
7275: LD_INT 8
7277: ST_TO_ADDR
// viewRange := 12 ;
7278: LD_ADDR_VAR 0 7
7282: PUSH
7283: LD_INT 12
7285: ST_TO_ADDR
// side := GetSide ( unit ) ;
7286: LD_ADDR_VAR 0 6
7290: PUSH
7291: LD_VAR 0 1
7295: PPUSH
7296: CALL_OW 255
7300: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
7301: LD_INT 61
7303: PPUSH
7304: LD_VAR 0 6
7308: PPUSH
7309: CALL_OW 321
7313: PUSH
7314: LD_INT 2
7316: EQUAL
7317: IFFALSE 7327
// viewRange := 16 ;
7319: LD_ADDR_VAR 0 7
7323: PUSH
7324: LD_INT 16
7326: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
7327: LD_VAR 0 1
7331: PPUSH
7332: LD_VAR 0 2
7336: PPUSH
7337: LD_VAR 0 3
7341: PPUSH
7342: CALL_OW 297
7346: PUSH
7347: LD_VAR 0 5
7351: GREATER
7352: IFFALSE 7431
// begin ComMoveXY ( unit , x , y ) ;
7354: LD_VAR 0 1
7358: PPUSH
7359: LD_VAR 0 2
7363: PPUSH
7364: LD_VAR 0 3
7368: PPUSH
7369: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7373: LD_INT 35
7375: PPUSH
7376: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
7380: LD_VAR 0 1
7384: PPUSH
7385: LD_VAR 0 2
7389: PPUSH
7390: LD_VAR 0 3
7394: PPUSH
7395: CALL 59739 0 3
7399: NOT
7400: IFFALSE 7404
// exit ;
7402: GO 7658
// until GetDistUnitXY ( unit , x , y ) < dist ;
7404: LD_VAR 0 1
7408: PPUSH
7409: LD_VAR 0 2
7413: PPUSH
7414: LD_VAR 0 3
7418: PPUSH
7419: CALL_OW 297
7423: PUSH
7424: LD_VAR 0 5
7428: LESS
7429: IFFALSE 7373
// end ; ComTurnXY ( unit , x , y ) ;
7431: LD_VAR 0 1
7435: PPUSH
7436: LD_VAR 0 2
7440: PPUSH
7441: LD_VAR 0 3
7445: PPUSH
7446: CALL_OW 118
// wait ( 5 ) ;
7450: LD_INT 5
7452: PPUSH
7453: CALL_OW 67
// _d := GetDir ( unit ) ;
7457: LD_ADDR_VAR 0 10
7461: PUSH
7462: LD_VAR 0 1
7466: PPUSH
7467: CALL_OW 254
7471: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
7472: LD_ADDR_VAR 0 8
7476: PUSH
7477: LD_VAR 0 1
7481: PPUSH
7482: CALL_OW 250
7486: PPUSH
7487: LD_VAR 0 10
7491: PPUSH
7492: LD_VAR 0 5
7496: PPUSH
7497: CALL_OW 272
7501: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
7502: LD_ADDR_VAR 0 9
7506: PUSH
7507: LD_VAR 0 1
7511: PPUSH
7512: CALL_OW 251
7516: PPUSH
7517: LD_VAR 0 10
7521: PPUSH
7522: LD_VAR 0 5
7526: PPUSH
7527: CALL_OW 273
7531: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
7532: LD_VAR 0 8
7536: PPUSH
7537: LD_VAR 0 9
7541: PPUSH
7542: CALL_OW 488
7546: NOT
7547: IFFALSE 7551
// exit ;
7549: GO 7658
// ComAnimCustom ( unit , 1 ) ;
7551: LD_VAR 0 1
7555: PPUSH
7556: LD_INT 1
7558: PPUSH
7559: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
7563: LD_VAR 0 8
7567: PPUSH
7568: LD_VAR 0 9
7572: PPUSH
7573: LD_VAR 0 6
7577: PPUSH
7578: LD_VAR 0 7
7582: PPUSH
7583: CALL_OW 330
// repeat wait ( 1 ) ;
7587: LD_INT 1
7589: PPUSH
7590: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
7594: LD_VAR 0 1
7598: PPUSH
7599: CALL_OW 316
7603: PUSH
7604: LD_VAR 0 1
7608: PPUSH
7609: CALL_OW 314
7613: OR
7614: PUSH
7615: LD_VAR 0 1
7619: PPUSH
7620: CALL_OW 302
7624: NOT
7625: OR
7626: PUSH
7627: LD_VAR 0 1
7631: PPUSH
7632: CALL_OW 301
7636: OR
7637: IFFALSE 7587
// RemoveSeeing ( _x , _y , side ) ;
7639: LD_VAR 0 8
7643: PPUSH
7644: LD_VAR 0 9
7648: PPUSH
7649: LD_VAR 0 6
7653: PPUSH
7654: CALL_OW 331
// end ; end_of_file
7658: LD_VAR 0 4
7662: RET
// every 0 0$1 do
7663: GO 7665
7665: DISABLE
// begin enable ;
7666: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7667: LD_STRING updateTimer(
7669: PUSH
7670: LD_OWVAR 1
7674: STR
7675: PUSH
7676: LD_STRING );
7678: STR
7679: PPUSH
7680: CALL_OW 559
// end ;
7684: END
// export function SOS_MapStart ( ) ; begin
7685: LD_INT 0
7687: PPUSH
// if streamModeActive then
7688: LD_EXP 23
7692: IFFALSE 7701
// DefineStreamItems ( true ) ;
7694: LD_INT 1
7696: PPUSH
7697: CALL 9505 0 1
// UpdateLuaVariables ( ) ;
7701: CALL 7718 0 0
// UpdateFactoryWaypoints ( ) ;
7705: CALL 22366 0 0
// UpdateWarehouseGatheringPoints ( ) ;
7709: CALL 22623 0 0
// end ;
7713: LD_VAR 0 1
7717: RET
// export globalGameSaveCounter ; function UpdateLuaVariables ( ) ; begin
7718: LD_INT 0
7720: PPUSH
// if not globalGameSaveCounter then
7721: LD_EXP 22
7725: NOT
7726: IFFALSE 7737
// ToLua ( setGameSaveCounter(0) ) else
7728: LD_STRING setGameSaveCounter(0)
7730: PPUSH
7731: CALL_OW 559
7735: GO 7769
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
7737: LD_ADDR_EXP 22
7741: PUSH
7742: LD_EXP 22
7746: PPUSH
7747: CALL 62291 0 1
7751: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
7752: LD_STRING setGameSaveCounter(
7754: PUSH
7755: LD_EXP 22
7759: STR
7760: PUSH
7761: LD_STRING )
7763: STR
7764: PPUSH
7765: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
7769: LD_STRING setGameDifficulty(
7771: PUSH
7772: LD_OWVAR 67
7776: STR
7777: PUSH
7778: LD_STRING )
7780: STR
7781: PPUSH
7782: CALL_OW 559
// end ;
7786: LD_VAR 0 1
7790: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7791: LD_INT 0
7793: PPUSH
// if p2 = stream_mode then
7794: LD_VAR 0 2
7798: PUSH
7799: LD_INT 100
7801: EQUAL
7802: IFFALSE 8805
// begin if not StreamModeActive then
7804: LD_EXP 23
7808: NOT
7809: IFFALSE 7819
// StreamModeActive := true ;
7811: LD_ADDR_EXP 23
7815: PUSH
7816: LD_INT 1
7818: ST_TO_ADDR
// if p3 = 0 then
7819: LD_VAR 0 3
7823: PUSH
7824: LD_INT 0
7826: EQUAL
7827: IFFALSE 7833
// InitStreamMode ;
7829: CALL 9041 0 0
// if p3 = 1 then
7833: LD_VAR 0 3
7837: PUSH
7838: LD_INT 1
7840: EQUAL
7841: IFFALSE 7851
// sRocket := true ;
7843: LD_ADDR_EXP 28
7847: PUSH
7848: LD_INT 1
7850: ST_TO_ADDR
// if p3 = 2 then
7851: LD_VAR 0 3
7855: PUSH
7856: LD_INT 2
7858: EQUAL
7859: IFFALSE 7869
// sSpeed := true ;
7861: LD_ADDR_EXP 27
7865: PUSH
7866: LD_INT 1
7868: ST_TO_ADDR
// if p3 = 3 then
7869: LD_VAR 0 3
7873: PUSH
7874: LD_INT 3
7876: EQUAL
7877: IFFALSE 7887
// sEngine := true ;
7879: LD_ADDR_EXP 29
7883: PUSH
7884: LD_INT 1
7886: ST_TO_ADDR
// if p3 = 4 then
7887: LD_VAR 0 3
7891: PUSH
7892: LD_INT 4
7894: EQUAL
7895: IFFALSE 7905
// sSpec := true ;
7897: LD_ADDR_EXP 26
7901: PUSH
7902: LD_INT 1
7904: ST_TO_ADDR
// if p3 = 5 then
7905: LD_VAR 0 3
7909: PUSH
7910: LD_INT 5
7912: EQUAL
7913: IFFALSE 7923
// sLevel := true ;
7915: LD_ADDR_EXP 30
7919: PUSH
7920: LD_INT 1
7922: ST_TO_ADDR
// if p3 = 6 then
7923: LD_VAR 0 3
7927: PUSH
7928: LD_INT 6
7930: EQUAL
7931: IFFALSE 7941
// sArmoury := true ;
7933: LD_ADDR_EXP 31
7937: PUSH
7938: LD_INT 1
7940: ST_TO_ADDR
// if p3 = 7 then
7941: LD_VAR 0 3
7945: PUSH
7946: LD_INT 7
7948: EQUAL
7949: IFFALSE 7959
// sRadar := true ;
7951: LD_ADDR_EXP 32
7955: PUSH
7956: LD_INT 1
7958: ST_TO_ADDR
// if p3 = 8 then
7959: LD_VAR 0 3
7963: PUSH
7964: LD_INT 8
7966: EQUAL
7967: IFFALSE 7977
// sBunker := true ;
7969: LD_ADDR_EXP 33
7973: PUSH
7974: LD_INT 1
7976: ST_TO_ADDR
// if p3 = 9 then
7977: LD_VAR 0 3
7981: PUSH
7982: LD_INT 9
7984: EQUAL
7985: IFFALSE 7995
// sHack := true ;
7987: LD_ADDR_EXP 34
7991: PUSH
7992: LD_INT 1
7994: ST_TO_ADDR
// if p3 = 10 then
7995: LD_VAR 0 3
7999: PUSH
8000: LD_INT 10
8002: EQUAL
8003: IFFALSE 8013
// sFire := true ;
8005: LD_ADDR_EXP 35
8009: PUSH
8010: LD_INT 1
8012: ST_TO_ADDR
// if p3 = 11 then
8013: LD_VAR 0 3
8017: PUSH
8018: LD_INT 11
8020: EQUAL
8021: IFFALSE 8031
// sRefresh := true ;
8023: LD_ADDR_EXP 36
8027: PUSH
8028: LD_INT 1
8030: ST_TO_ADDR
// if p3 = 12 then
8031: LD_VAR 0 3
8035: PUSH
8036: LD_INT 12
8038: EQUAL
8039: IFFALSE 8049
// sExp := true ;
8041: LD_ADDR_EXP 37
8045: PUSH
8046: LD_INT 1
8048: ST_TO_ADDR
// if p3 = 13 then
8049: LD_VAR 0 3
8053: PUSH
8054: LD_INT 13
8056: EQUAL
8057: IFFALSE 8067
// sDepot := true ;
8059: LD_ADDR_EXP 38
8063: PUSH
8064: LD_INT 1
8066: ST_TO_ADDR
// if p3 = 14 then
8067: LD_VAR 0 3
8071: PUSH
8072: LD_INT 14
8074: EQUAL
8075: IFFALSE 8085
// sFlag := true ;
8077: LD_ADDR_EXP 39
8081: PUSH
8082: LD_INT 1
8084: ST_TO_ADDR
// if p3 = 15 then
8085: LD_VAR 0 3
8089: PUSH
8090: LD_INT 15
8092: EQUAL
8093: IFFALSE 8103
// sKamikadze := true ;
8095: LD_ADDR_EXP 47
8099: PUSH
8100: LD_INT 1
8102: ST_TO_ADDR
// if p3 = 16 then
8103: LD_VAR 0 3
8107: PUSH
8108: LD_INT 16
8110: EQUAL
8111: IFFALSE 8121
// sTroll := true ;
8113: LD_ADDR_EXP 48
8117: PUSH
8118: LD_INT 1
8120: ST_TO_ADDR
// if p3 = 17 then
8121: LD_VAR 0 3
8125: PUSH
8126: LD_INT 17
8128: EQUAL
8129: IFFALSE 8139
// sSlow := true ;
8131: LD_ADDR_EXP 49
8135: PUSH
8136: LD_INT 1
8138: ST_TO_ADDR
// if p3 = 18 then
8139: LD_VAR 0 3
8143: PUSH
8144: LD_INT 18
8146: EQUAL
8147: IFFALSE 8157
// sLack := true ;
8149: LD_ADDR_EXP 50
8153: PUSH
8154: LD_INT 1
8156: ST_TO_ADDR
// if p3 = 19 then
8157: LD_VAR 0 3
8161: PUSH
8162: LD_INT 19
8164: EQUAL
8165: IFFALSE 8175
// sTank := true ;
8167: LD_ADDR_EXP 52
8171: PUSH
8172: LD_INT 1
8174: ST_TO_ADDR
// if p3 = 20 then
8175: LD_VAR 0 3
8179: PUSH
8180: LD_INT 20
8182: EQUAL
8183: IFFALSE 8193
// sRemote := true ;
8185: LD_ADDR_EXP 53
8189: PUSH
8190: LD_INT 1
8192: ST_TO_ADDR
// if p3 = 21 then
8193: LD_VAR 0 3
8197: PUSH
8198: LD_INT 21
8200: EQUAL
8201: IFFALSE 8211
// sPowell := true ;
8203: LD_ADDR_EXP 54
8207: PUSH
8208: LD_INT 1
8210: ST_TO_ADDR
// if p3 = 22 then
8211: LD_VAR 0 3
8215: PUSH
8216: LD_INT 22
8218: EQUAL
8219: IFFALSE 8229
// sTeleport := true ;
8221: LD_ADDR_EXP 57
8225: PUSH
8226: LD_INT 1
8228: ST_TO_ADDR
// if p3 = 23 then
8229: LD_VAR 0 3
8233: PUSH
8234: LD_INT 23
8236: EQUAL
8237: IFFALSE 8247
// sOilTower := true ;
8239: LD_ADDR_EXP 59
8243: PUSH
8244: LD_INT 1
8246: ST_TO_ADDR
// if p3 = 24 then
8247: LD_VAR 0 3
8251: PUSH
8252: LD_INT 24
8254: EQUAL
8255: IFFALSE 8265
// sShovel := true ;
8257: LD_ADDR_EXP 60
8261: PUSH
8262: LD_INT 1
8264: ST_TO_ADDR
// if p3 = 25 then
8265: LD_VAR 0 3
8269: PUSH
8270: LD_INT 25
8272: EQUAL
8273: IFFALSE 8283
// sSheik := true ;
8275: LD_ADDR_EXP 61
8279: PUSH
8280: LD_INT 1
8282: ST_TO_ADDR
// if p3 = 26 then
8283: LD_VAR 0 3
8287: PUSH
8288: LD_INT 26
8290: EQUAL
8291: IFFALSE 8301
// sEarthquake := true ;
8293: LD_ADDR_EXP 63
8297: PUSH
8298: LD_INT 1
8300: ST_TO_ADDR
// if p3 = 27 then
8301: LD_VAR 0 3
8305: PUSH
8306: LD_INT 27
8308: EQUAL
8309: IFFALSE 8319
// sAI := true ;
8311: LD_ADDR_EXP 64
8315: PUSH
8316: LD_INT 1
8318: ST_TO_ADDR
// if p3 = 28 then
8319: LD_VAR 0 3
8323: PUSH
8324: LD_INT 28
8326: EQUAL
8327: IFFALSE 8337
// sCargo := true ;
8329: LD_ADDR_EXP 67
8333: PUSH
8334: LD_INT 1
8336: ST_TO_ADDR
// if p3 = 29 then
8337: LD_VAR 0 3
8341: PUSH
8342: LD_INT 29
8344: EQUAL
8345: IFFALSE 8355
// sDLaser := true ;
8347: LD_ADDR_EXP 68
8351: PUSH
8352: LD_INT 1
8354: ST_TO_ADDR
// if p3 = 30 then
8355: LD_VAR 0 3
8359: PUSH
8360: LD_INT 30
8362: EQUAL
8363: IFFALSE 8373
// sExchange := true ;
8365: LD_ADDR_EXP 69
8369: PUSH
8370: LD_INT 1
8372: ST_TO_ADDR
// if p3 = 31 then
8373: LD_VAR 0 3
8377: PUSH
8378: LD_INT 31
8380: EQUAL
8381: IFFALSE 8391
// sFac := true ;
8383: LD_ADDR_EXP 70
8387: PUSH
8388: LD_INT 1
8390: ST_TO_ADDR
// if p3 = 32 then
8391: LD_VAR 0 3
8395: PUSH
8396: LD_INT 32
8398: EQUAL
8399: IFFALSE 8409
// sPower := true ;
8401: LD_ADDR_EXP 71
8405: PUSH
8406: LD_INT 1
8408: ST_TO_ADDR
// if p3 = 33 then
8409: LD_VAR 0 3
8413: PUSH
8414: LD_INT 33
8416: EQUAL
8417: IFFALSE 8427
// sRandom := true ;
8419: LD_ADDR_EXP 72
8423: PUSH
8424: LD_INT 1
8426: ST_TO_ADDR
// if p3 = 34 then
8427: LD_VAR 0 3
8431: PUSH
8432: LD_INT 34
8434: EQUAL
8435: IFFALSE 8445
// sShield := true ;
8437: LD_ADDR_EXP 73
8441: PUSH
8442: LD_INT 1
8444: ST_TO_ADDR
// if p3 = 35 then
8445: LD_VAR 0 3
8449: PUSH
8450: LD_INT 35
8452: EQUAL
8453: IFFALSE 8463
// sTime := true ;
8455: LD_ADDR_EXP 74
8459: PUSH
8460: LD_INT 1
8462: ST_TO_ADDR
// if p3 = 36 then
8463: LD_VAR 0 3
8467: PUSH
8468: LD_INT 36
8470: EQUAL
8471: IFFALSE 8481
// sTools := true ;
8473: LD_ADDR_EXP 75
8477: PUSH
8478: LD_INT 1
8480: ST_TO_ADDR
// if p3 = 101 then
8481: LD_VAR 0 3
8485: PUSH
8486: LD_INT 101
8488: EQUAL
8489: IFFALSE 8499
// sSold := true ;
8491: LD_ADDR_EXP 40
8495: PUSH
8496: LD_INT 1
8498: ST_TO_ADDR
// if p3 = 102 then
8499: LD_VAR 0 3
8503: PUSH
8504: LD_INT 102
8506: EQUAL
8507: IFFALSE 8517
// sDiff := true ;
8509: LD_ADDR_EXP 41
8513: PUSH
8514: LD_INT 1
8516: ST_TO_ADDR
// if p3 = 103 then
8517: LD_VAR 0 3
8521: PUSH
8522: LD_INT 103
8524: EQUAL
8525: IFFALSE 8535
// sFog := true ;
8527: LD_ADDR_EXP 44
8531: PUSH
8532: LD_INT 1
8534: ST_TO_ADDR
// if p3 = 104 then
8535: LD_VAR 0 3
8539: PUSH
8540: LD_INT 104
8542: EQUAL
8543: IFFALSE 8553
// sReset := true ;
8545: LD_ADDR_EXP 45
8549: PUSH
8550: LD_INT 1
8552: ST_TO_ADDR
// if p3 = 105 then
8553: LD_VAR 0 3
8557: PUSH
8558: LD_INT 105
8560: EQUAL
8561: IFFALSE 8571
// sSun := true ;
8563: LD_ADDR_EXP 46
8567: PUSH
8568: LD_INT 1
8570: ST_TO_ADDR
// if p3 = 106 then
8571: LD_VAR 0 3
8575: PUSH
8576: LD_INT 106
8578: EQUAL
8579: IFFALSE 8589
// sTiger := true ;
8581: LD_ADDR_EXP 42
8585: PUSH
8586: LD_INT 1
8588: ST_TO_ADDR
// if p3 = 107 then
8589: LD_VAR 0 3
8593: PUSH
8594: LD_INT 107
8596: EQUAL
8597: IFFALSE 8607
// sBomb := true ;
8599: LD_ADDR_EXP 43
8603: PUSH
8604: LD_INT 1
8606: ST_TO_ADDR
// if p3 = 108 then
8607: LD_VAR 0 3
8611: PUSH
8612: LD_INT 108
8614: EQUAL
8615: IFFALSE 8625
// sWound := true ;
8617: LD_ADDR_EXP 51
8621: PUSH
8622: LD_INT 1
8624: ST_TO_ADDR
// if p3 = 109 then
8625: LD_VAR 0 3
8629: PUSH
8630: LD_INT 109
8632: EQUAL
8633: IFFALSE 8643
// sBetray := true ;
8635: LD_ADDR_EXP 55
8639: PUSH
8640: LD_INT 1
8642: ST_TO_ADDR
// if p3 = 110 then
8643: LD_VAR 0 3
8647: PUSH
8648: LD_INT 110
8650: EQUAL
8651: IFFALSE 8661
// sContamin := true ;
8653: LD_ADDR_EXP 56
8657: PUSH
8658: LD_INT 1
8660: ST_TO_ADDR
// if p3 = 111 then
8661: LD_VAR 0 3
8665: PUSH
8666: LD_INT 111
8668: EQUAL
8669: IFFALSE 8679
// sOil := true ;
8671: LD_ADDR_EXP 58
8675: PUSH
8676: LD_INT 1
8678: ST_TO_ADDR
// if p3 = 112 then
8679: LD_VAR 0 3
8683: PUSH
8684: LD_INT 112
8686: EQUAL
8687: IFFALSE 8697
// sStu := true ;
8689: LD_ADDR_EXP 62
8693: PUSH
8694: LD_INT 1
8696: ST_TO_ADDR
// if p3 = 113 then
8697: LD_VAR 0 3
8701: PUSH
8702: LD_INT 113
8704: EQUAL
8705: IFFALSE 8715
// sBazooka := true ;
8707: LD_ADDR_EXP 65
8711: PUSH
8712: LD_INT 1
8714: ST_TO_ADDR
// if p3 = 114 then
8715: LD_VAR 0 3
8719: PUSH
8720: LD_INT 114
8722: EQUAL
8723: IFFALSE 8733
// sMortar := true ;
8725: LD_ADDR_EXP 66
8729: PUSH
8730: LD_INT 1
8732: ST_TO_ADDR
// if p3 = 115 then
8733: LD_VAR 0 3
8737: PUSH
8738: LD_INT 115
8740: EQUAL
8741: IFFALSE 8751
// sRanger := true ;
8743: LD_ADDR_EXP 76
8747: PUSH
8748: LD_INT 1
8750: ST_TO_ADDR
// if p3 = 116 then
8751: LD_VAR 0 3
8755: PUSH
8756: LD_INT 116
8758: EQUAL
8759: IFFALSE 8769
// sComputer := true ;
8761: LD_ADDR_EXP 77
8765: PUSH
8766: LD_INT 1
8768: ST_TO_ADDR
// if p3 = 117 then
8769: LD_VAR 0 3
8773: PUSH
8774: LD_INT 117
8776: EQUAL
8777: IFFALSE 8787
// s30 := true ;
8779: LD_ADDR_EXP 78
8783: PUSH
8784: LD_INT 1
8786: ST_TO_ADDR
// if p3 = 118 then
8787: LD_VAR 0 3
8791: PUSH
8792: LD_INT 118
8794: EQUAL
8795: IFFALSE 8805
// s60 := true ;
8797: LD_ADDR_EXP 79
8801: PUSH
8802: LD_INT 1
8804: ST_TO_ADDR
// end ; if p2 = hack_mode then
8805: LD_VAR 0 2
8809: PUSH
8810: LD_INT 101
8812: EQUAL
8813: IFFALSE 8941
// begin case p3 of 1 :
8815: LD_VAR 0 3
8819: PUSH
8820: LD_INT 1
8822: DOUBLE
8823: EQUAL
8824: IFTRUE 8828
8826: GO 8835
8828: POP
// hHackUnlimitedResources ; 2 :
8829: CALL 21112 0 0
8833: GO 8941
8835: LD_INT 2
8837: DOUBLE
8838: EQUAL
8839: IFTRUE 8843
8841: GO 8850
8843: POP
// hHackSetLevel10 ; 3 :
8844: CALL 21245 0 0
8848: GO 8941
8850: LD_INT 3
8852: DOUBLE
8853: EQUAL
8854: IFTRUE 8858
8856: GO 8865
8858: POP
// hHackSetLevel10YourUnits ; 4 :
8859: CALL 21330 0 0
8863: GO 8941
8865: LD_INT 4
8867: DOUBLE
8868: EQUAL
8869: IFTRUE 8873
8871: GO 8880
8873: POP
// hHackInvincible ; 5 :
8874: CALL 21778 0 0
8878: GO 8941
8880: LD_INT 5
8882: DOUBLE
8883: EQUAL
8884: IFTRUE 8888
8886: GO 8895
8888: POP
// hHackInvisible ; 6 :
8889: CALL 21889 0 0
8893: GO 8941
8895: LD_INT 6
8897: DOUBLE
8898: EQUAL
8899: IFTRUE 8903
8901: GO 8910
8903: POP
// hHackChangeYourSide ; 7 :
8904: CALL 21946 0 0
8908: GO 8941
8910: LD_INT 7
8912: DOUBLE
8913: EQUAL
8914: IFTRUE 8918
8916: GO 8925
8918: POP
// hHackChangeUnitSide ; 8 :
8919: CALL 21988 0 0
8923: GO 8941
8925: LD_INT 8
8927: DOUBLE
8928: EQUAL
8929: IFTRUE 8933
8931: GO 8940
8933: POP
// hHackFog ; end ;
8934: CALL 22089 0 0
8938: GO 8941
8940: POP
// end ; if p2 = game_save_mode then
8941: LD_VAR 0 2
8945: PUSH
8946: LD_INT 102
8948: EQUAL
8949: IFFALSE 9014
// begin if p3 = 1 then
8951: LD_VAR 0 3
8955: PUSH
8956: LD_INT 1
8958: EQUAL
8959: IFFALSE 8971
// globalGameSaveCounter := p4 ;
8961: LD_ADDR_EXP 22
8965: PUSH
8966: LD_VAR 0 4
8970: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
8971: LD_VAR 0 3
8975: PUSH
8976: LD_INT 2
8978: EQUAL
8979: PUSH
8980: LD_EXP 22
8984: AND
8985: IFFALSE 9004
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
8987: LD_STRING setGameSaveCounter(
8989: PUSH
8990: LD_EXP 22
8994: STR
8995: PUSH
8996: LD_STRING )
8998: STR
8999: PPUSH
9000: CALL_OW 559
// display_strings := globalGameSaveCounter ;
9004: LD_ADDR_OWVAR 47
9008: PUSH
9009: LD_EXP 22
9013: ST_TO_ADDR
// end ; end ;
9014: LD_VAR 0 7
9018: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
9019: GO 9021
9021: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
9022: LD_STRING initStreamRollete();
9024: PPUSH
9025: CALL_OW 559
// InitStreamMode ;
9029: CALL 9041 0 0
// DefineStreamItems ( false ) ;
9033: LD_INT 0
9035: PPUSH
9036: CALL 9505 0 1
// end ;
9040: END
// function InitStreamMode ; begin
9041: LD_INT 0
9043: PPUSH
// streamModeActive := false ;
9044: LD_ADDR_EXP 23
9048: PUSH
9049: LD_INT 0
9051: ST_TO_ADDR
// normalCounter := 36 ;
9052: LD_ADDR_EXP 24
9056: PUSH
9057: LD_INT 36
9059: ST_TO_ADDR
// hardcoreCounter := 18 ;
9060: LD_ADDR_EXP 25
9064: PUSH
9065: LD_INT 18
9067: ST_TO_ADDR
// sRocket := false ;
9068: LD_ADDR_EXP 28
9072: PUSH
9073: LD_INT 0
9075: ST_TO_ADDR
// sSpeed := false ;
9076: LD_ADDR_EXP 27
9080: PUSH
9081: LD_INT 0
9083: ST_TO_ADDR
// sEngine := false ;
9084: LD_ADDR_EXP 29
9088: PUSH
9089: LD_INT 0
9091: ST_TO_ADDR
// sSpec := false ;
9092: LD_ADDR_EXP 26
9096: PUSH
9097: LD_INT 0
9099: ST_TO_ADDR
// sLevel := false ;
9100: LD_ADDR_EXP 30
9104: PUSH
9105: LD_INT 0
9107: ST_TO_ADDR
// sArmoury := false ;
9108: LD_ADDR_EXP 31
9112: PUSH
9113: LD_INT 0
9115: ST_TO_ADDR
// sRadar := false ;
9116: LD_ADDR_EXP 32
9120: PUSH
9121: LD_INT 0
9123: ST_TO_ADDR
// sBunker := false ;
9124: LD_ADDR_EXP 33
9128: PUSH
9129: LD_INT 0
9131: ST_TO_ADDR
// sHack := false ;
9132: LD_ADDR_EXP 34
9136: PUSH
9137: LD_INT 0
9139: ST_TO_ADDR
// sFire := false ;
9140: LD_ADDR_EXP 35
9144: PUSH
9145: LD_INT 0
9147: ST_TO_ADDR
// sRefresh := false ;
9148: LD_ADDR_EXP 36
9152: PUSH
9153: LD_INT 0
9155: ST_TO_ADDR
// sExp := false ;
9156: LD_ADDR_EXP 37
9160: PUSH
9161: LD_INT 0
9163: ST_TO_ADDR
// sDepot := false ;
9164: LD_ADDR_EXP 38
9168: PUSH
9169: LD_INT 0
9171: ST_TO_ADDR
// sFlag := false ;
9172: LD_ADDR_EXP 39
9176: PUSH
9177: LD_INT 0
9179: ST_TO_ADDR
// sKamikadze := false ;
9180: LD_ADDR_EXP 47
9184: PUSH
9185: LD_INT 0
9187: ST_TO_ADDR
// sTroll := false ;
9188: LD_ADDR_EXP 48
9192: PUSH
9193: LD_INT 0
9195: ST_TO_ADDR
// sSlow := false ;
9196: LD_ADDR_EXP 49
9200: PUSH
9201: LD_INT 0
9203: ST_TO_ADDR
// sLack := false ;
9204: LD_ADDR_EXP 50
9208: PUSH
9209: LD_INT 0
9211: ST_TO_ADDR
// sTank := false ;
9212: LD_ADDR_EXP 52
9216: PUSH
9217: LD_INT 0
9219: ST_TO_ADDR
// sRemote := false ;
9220: LD_ADDR_EXP 53
9224: PUSH
9225: LD_INT 0
9227: ST_TO_ADDR
// sPowell := false ;
9228: LD_ADDR_EXP 54
9232: PUSH
9233: LD_INT 0
9235: ST_TO_ADDR
// sTeleport := false ;
9236: LD_ADDR_EXP 57
9240: PUSH
9241: LD_INT 0
9243: ST_TO_ADDR
// sOilTower := false ;
9244: LD_ADDR_EXP 59
9248: PUSH
9249: LD_INT 0
9251: ST_TO_ADDR
// sShovel := false ;
9252: LD_ADDR_EXP 60
9256: PUSH
9257: LD_INT 0
9259: ST_TO_ADDR
// sSheik := false ;
9260: LD_ADDR_EXP 61
9264: PUSH
9265: LD_INT 0
9267: ST_TO_ADDR
// sEarthquake := false ;
9268: LD_ADDR_EXP 63
9272: PUSH
9273: LD_INT 0
9275: ST_TO_ADDR
// sAI := false ;
9276: LD_ADDR_EXP 64
9280: PUSH
9281: LD_INT 0
9283: ST_TO_ADDR
// sCargo := false ;
9284: LD_ADDR_EXP 67
9288: PUSH
9289: LD_INT 0
9291: ST_TO_ADDR
// sDLaser := false ;
9292: LD_ADDR_EXP 68
9296: PUSH
9297: LD_INT 0
9299: ST_TO_ADDR
// sExchange := false ;
9300: LD_ADDR_EXP 69
9304: PUSH
9305: LD_INT 0
9307: ST_TO_ADDR
// sFac := false ;
9308: LD_ADDR_EXP 70
9312: PUSH
9313: LD_INT 0
9315: ST_TO_ADDR
// sPower := false ;
9316: LD_ADDR_EXP 71
9320: PUSH
9321: LD_INT 0
9323: ST_TO_ADDR
// sRandom := false ;
9324: LD_ADDR_EXP 72
9328: PUSH
9329: LD_INT 0
9331: ST_TO_ADDR
// sShield := false ;
9332: LD_ADDR_EXP 73
9336: PUSH
9337: LD_INT 0
9339: ST_TO_ADDR
// sTime := false ;
9340: LD_ADDR_EXP 74
9344: PUSH
9345: LD_INT 0
9347: ST_TO_ADDR
// sTools := false ;
9348: LD_ADDR_EXP 75
9352: PUSH
9353: LD_INT 0
9355: ST_TO_ADDR
// sSold := false ;
9356: LD_ADDR_EXP 40
9360: PUSH
9361: LD_INT 0
9363: ST_TO_ADDR
// sDiff := false ;
9364: LD_ADDR_EXP 41
9368: PUSH
9369: LD_INT 0
9371: ST_TO_ADDR
// sFog := false ;
9372: LD_ADDR_EXP 44
9376: PUSH
9377: LD_INT 0
9379: ST_TO_ADDR
// sReset := false ;
9380: LD_ADDR_EXP 45
9384: PUSH
9385: LD_INT 0
9387: ST_TO_ADDR
// sSun := false ;
9388: LD_ADDR_EXP 46
9392: PUSH
9393: LD_INT 0
9395: ST_TO_ADDR
// sTiger := false ;
9396: LD_ADDR_EXP 42
9400: PUSH
9401: LD_INT 0
9403: ST_TO_ADDR
// sBomb := false ;
9404: LD_ADDR_EXP 43
9408: PUSH
9409: LD_INT 0
9411: ST_TO_ADDR
// sWound := false ;
9412: LD_ADDR_EXP 51
9416: PUSH
9417: LD_INT 0
9419: ST_TO_ADDR
// sBetray := false ;
9420: LD_ADDR_EXP 55
9424: PUSH
9425: LD_INT 0
9427: ST_TO_ADDR
// sContamin := false ;
9428: LD_ADDR_EXP 56
9432: PUSH
9433: LD_INT 0
9435: ST_TO_ADDR
// sOil := false ;
9436: LD_ADDR_EXP 58
9440: PUSH
9441: LD_INT 0
9443: ST_TO_ADDR
// sStu := false ;
9444: LD_ADDR_EXP 62
9448: PUSH
9449: LD_INT 0
9451: ST_TO_ADDR
// sBazooka := false ;
9452: LD_ADDR_EXP 65
9456: PUSH
9457: LD_INT 0
9459: ST_TO_ADDR
// sMortar := false ;
9460: LD_ADDR_EXP 66
9464: PUSH
9465: LD_INT 0
9467: ST_TO_ADDR
// sRanger := false ;
9468: LD_ADDR_EXP 76
9472: PUSH
9473: LD_INT 0
9475: ST_TO_ADDR
// sComputer := false ;
9476: LD_ADDR_EXP 77
9480: PUSH
9481: LD_INT 0
9483: ST_TO_ADDR
// s30 := false ;
9484: LD_ADDR_EXP 78
9488: PUSH
9489: LD_INT 0
9491: ST_TO_ADDR
// s60 := false ;
9492: LD_ADDR_EXP 79
9496: PUSH
9497: LD_INT 0
9499: ST_TO_ADDR
// end ;
9500: LD_VAR 0 1
9504: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
9505: LD_INT 0
9507: PPUSH
9508: PPUSH
9509: PPUSH
9510: PPUSH
9511: PPUSH
9512: PPUSH
9513: PPUSH
// result := [ ] ;
9514: LD_ADDR_VAR 0 2
9518: PUSH
9519: EMPTY
9520: ST_TO_ADDR
// if campaign_id = 1 then
9521: LD_OWVAR 69
9525: PUSH
9526: LD_INT 1
9528: EQUAL
9529: IFFALSE 12695
// begin case mission_number of 1 :
9531: LD_OWVAR 70
9535: PUSH
9536: LD_INT 1
9538: DOUBLE
9539: EQUAL
9540: IFTRUE 9544
9542: GO 9620
9544: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
9545: LD_ADDR_VAR 0 2
9549: PUSH
9550: LD_INT 2
9552: PUSH
9553: LD_INT 4
9555: PUSH
9556: LD_INT 11
9558: PUSH
9559: LD_INT 12
9561: PUSH
9562: LD_INT 15
9564: PUSH
9565: LD_INT 16
9567: PUSH
9568: LD_INT 22
9570: PUSH
9571: LD_INT 23
9573: PUSH
9574: LD_INT 26
9576: PUSH
9577: EMPTY
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: PUSH
9588: LD_INT 101
9590: PUSH
9591: LD_INT 102
9593: PUSH
9594: LD_INT 106
9596: PUSH
9597: LD_INT 116
9599: PUSH
9600: LD_INT 117
9602: PUSH
9603: LD_INT 118
9605: PUSH
9606: EMPTY
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: PUSH
9614: EMPTY
9615: LIST
9616: LIST
9617: ST_TO_ADDR
9618: GO 12693
9620: LD_INT 2
9622: DOUBLE
9623: EQUAL
9624: IFTRUE 9628
9626: GO 9712
9628: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9629: LD_ADDR_VAR 0 2
9633: PUSH
9634: LD_INT 2
9636: PUSH
9637: LD_INT 4
9639: PUSH
9640: LD_INT 11
9642: PUSH
9643: LD_INT 12
9645: PUSH
9646: LD_INT 15
9648: PUSH
9649: LD_INT 16
9651: PUSH
9652: LD_INT 22
9654: PUSH
9655: LD_INT 23
9657: PUSH
9658: LD_INT 26
9660: PUSH
9661: EMPTY
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: PUSH
9672: LD_INT 101
9674: PUSH
9675: LD_INT 102
9677: PUSH
9678: LD_INT 105
9680: PUSH
9681: LD_INT 106
9683: PUSH
9684: LD_INT 108
9686: PUSH
9687: LD_INT 116
9689: PUSH
9690: LD_INT 117
9692: PUSH
9693: LD_INT 118
9695: PUSH
9696: EMPTY
9697: LIST
9698: LIST
9699: LIST
9700: LIST
9701: LIST
9702: LIST
9703: LIST
9704: LIST
9705: PUSH
9706: EMPTY
9707: LIST
9708: LIST
9709: ST_TO_ADDR
9710: GO 12693
9712: LD_INT 3
9714: DOUBLE
9715: EQUAL
9716: IFTRUE 9720
9718: GO 9808
9720: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9721: LD_ADDR_VAR 0 2
9725: PUSH
9726: LD_INT 2
9728: PUSH
9729: LD_INT 4
9731: PUSH
9732: LD_INT 5
9734: PUSH
9735: LD_INT 11
9737: PUSH
9738: LD_INT 12
9740: PUSH
9741: LD_INT 15
9743: PUSH
9744: LD_INT 16
9746: PUSH
9747: LD_INT 22
9749: PUSH
9750: LD_INT 26
9752: PUSH
9753: LD_INT 36
9755: PUSH
9756: EMPTY
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: LIST
9763: LIST
9764: LIST
9765: LIST
9766: LIST
9767: PUSH
9768: LD_INT 101
9770: PUSH
9771: LD_INT 102
9773: PUSH
9774: LD_INT 105
9776: PUSH
9777: LD_INT 106
9779: PUSH
9780: LD_INT 108
9782: PUSH
9783: LD_INT 116
9785: PUSH
9786: LD_INT 117
9788: PUSH
9789: LD_INT 118
9791: PUSH
9792: EMPTY
9793: LIST
9794: LIST
9795: LIST
9796: LIST
9797: LIST
9798: LIST
9799: LIST
9800: LIST
9801: PUSH
9802: EMPTY
9803: LIST
9804: LIST
9805: ST_TO_ADDR
9806: GO 12693
9808: LD_INT 4
9810: DOUBLE
9811: EQUAL
9812: IFTRUE 9816
9814: GO 9912
9816: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9817: LD_ADDR_VAR 0 2
9821: PUSH
9822: LD_INT 2
9824: PUSH
9825: LD_INT 4
9827: PUSH
9828: LD_INT 5
9830: PUSH
9831: LD_INT 8
9833: PUSH
9834: LD_INT 11
9836: PUSH
9837: LD_INT 12
9839: PUSH
9840: LD_INT 15
9842: PUSH
9843: LD_INT 16
9845: PUSH
9846: LD_INT 22
9848: PUSH
9849: LD_INT 23
9851: PUSH
9852: LD_INT 26
9854: PUSH
9855: LD_INT 36
9857: PUSH
9858: EMPTY
9859: LIST
9860: LIST
9861: LIST
9862: LIST
9863: LIST
9864: LIST
9865: LIST
9866: LIST
9867: LIST
9868: LIST
9869: LIST
9870: LIST
9871: PUSH
9872: LD_INT 101
9874: PUSH
9875: LD_INT 102
9877: PUSH
9878: LD_INT 105
9880: PUSH
9881: LD_INT 106
9883: PUSH
9884: LD_INT 108
9886: PUSH
9887: LD_INT 116
9889: PUSH
9890: LD_INT 117
9892: PUSH
9893: LD_INT 118
9895: PUSH
9896: EMPTY
9897: LIST
9898: LIST
9899: LIST
9900: LIST
9901: LIST
9902: LIST
9903: LIST
9904: LIST
9905: PUSH
9906: EMPTY
9907: LIST
9908: LIST
9909: ST_TO_ADDR
9910: GO 12693
9912: LD_INT 5
9914: DOUBLE
9915: EQUAL
9916: IFTRUE 9920
9918: GO 10032
9920: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9921: LD_ADDR_VAR 0 2
9925: PUSH
9926: LD_INT 2
9928: PUSH
9929: LD_INT 4
9931: PUSH
9932: LD_INT 5
9934: PUSH
9935: LD_INT 6
9937: PUSH
9938: LD_INT 8
9940: PUSH
9941: LD_INT 11
9943: PUSH
9944: LD_INT 12
9946: PUSH
9947: LD_INT 15
9949: PUSH
9950: LD_INT 16
9952: PUSH
9953: LD_INT 22
9955: PUSH
9956: LD_INT 23
9958: PUSH
9959: LD_INT 25
9961: PUSH
9962: LD_INT 26
9964: PUSH
9965: LD_INT 36
9967: PUSH
9968: EMPTY
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: LIST
9979: LIST
9980: LIST
9981: LIST
9982: LIST
9983: PUSH
9984: LD_INT 101
9986: PUSH
9987: LD_INT 102
9989: PUSH
9990: LD_INT 105
9992: PUSH
9993: LD_INT 106
9995: PUSH
9996: LD_INT 108
9998: PUSH
9999: LD_INT 109
10001: PUSH
10002: LD_INT 112
10004: PUSH
10005: LD_INT 116
10007: PUSH
10008: LD_INT 117
10010: PUSH
10011: LD_INT 118
10013: PUSH
10014: EMPTY
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: PUSH
10026: EMPTY
10027: LIST
10028: LIST
10029: ST_TO_ADDR
10030: GO 12693
10032: LD_INT 6
10034: DOUBLE
10035: EQUAL
10036: IFTRUE 10040
10038: GO 10172
10040: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
10041: LD_ADDR_VAR 0 2
10045: PUSH
10046: LD_INT 2
10048: PUSH
10049: LD_INT 4
10051: PUSH
10052: LD_INT 5
10054: PUSH
10055: LD_INT 6
10057: PUSH
10058: LD_INT 8
10060: PUSH
10061: LD_INT 11
10063: PUSH
10064: LD_INT 12
10066: PUSH
10067: LD_INT 15
10069: PUSH
10070: LD_INT 16
10072: PUSH
10073: LD_INT 20
10075: PUSH
10076: LD_INT 21
10078: PUSH
10079: LD_INT 22
10081: PUSH
10082: LD_INT 23
10084: PUSH
10085: LD_INT 25
10087: PUSH
10088: LD_INT 26
10090: PUSH
10091: LD_INT 30
10093: PUSH
10094: LD_INT 31
10096: PUSH
10097: LD_INT 32
10099: PUSH
10100: LD_INT 36
10102: PUSH
10103: EMPTY
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: LIST
10119: LIST
10120: LIST
10121: LIST
10122: LIST
10123: PUSH
10124: LD_INT 101
10126: PUSH
10127: LD_INT 102
10129: PUSH
10130: LD_INT 105
10132: PUSH
10133: LD_INT 106
10135: PUSH
10136: LD_INT 108
10138: PUSH
10139: LD_INT 109
10141: PUSH
10142: LD_INT 112
10144: PUSH
10145: LD_INT 116
10147: PUSH
10148: LD_INT 117
10150: PUSH
10151: LD_INT 118
10153: PUSH
10154: EMPTY
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: LIST
10161: LIST
10162: LIST
10163: LIST
10164: LIST
10165: PUSH
10166: EMPTY
10167: LIST
10168: LIST
10169: ST_TO_ADDR
10170: GO 12693
10172: LD_INT 7
10174: DOUBLE
10175: EQUAL
10176: IFTRUE 10180
10178: GO 10292
10180: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
10181: LD_ADDR_VAR 0 2
10185: PUSH
10186: LD_INT 2
10188: PUSH
10189: LD_INT 4
10191: PUSH
10192: LD_INT 5
10194: PUSH
10195: LD_INT 7
10197: PUSH
10198: LD_INT 11
10200: PUSH
10201: LD_INT 12
10203: PUSH
10204: LD_INT 15
10206: PUSH
10207: LD_INT 16
10209: PUSH
10210: LD_INT 20
10212: PUSH
10213: LD_INT 21
10215: PUSH
10216: LD_INT 22
10218: PUSH
10219: LD_INT 23
10221: PUSH
10222: LD_INT 25
10224: PUSH
10225: LD_INT 26
10227: PUSH
10228: EMPTY
10229: LIST
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: LIST
10236: LIST
10237: LIST
10238: LIST
10239: LIST
10240: LIST
10241: LIST
10242: LIST
10243: PUSH
10244: LD_INT 101
10246: PUSH
10247: LD_INT 102
10249: PUSH
10250: LD_INT 103
10252: PUSH
10253: LD_INT 105
10255: PUSH
10256: LD_INT 106
10258: PUSH
10259: LD_INT 108
10261: PUSH
10262: LD_INT 112
10264: PUSH
10265: LD_INT 116
10267: PUSH
10268: LD_INT 117
10270: PUSH
10271: LD_INT 118
10273: PUSH
10274: EMPTY
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: LIST
10281: LIST
10282: LIST
10283: LIST
10284: LIST
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: ST_TO_ADDR
10290: GO 12693
10292: LD_INT 8
10294: DOUBLE
10295: EQUAL
10296: IFTRUE 10300
10298: GO 10440
10300: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
10301: LD_ADDR_VAR 0 2
10305: PUSH
10306: LD_INT 2
10308: PUSH
10309: LD_INT 4
10311: PUSH
10312: LD_INT 5
10314: PUSH
10315: LD_INT 6
10317: PUSH
10318: LD_INT 7
10320: PUSH
10321: LD_INT 8
10323: PUSH
10324: LD_INT 11
10326: PUSH
10327: LD_INT 12
10329: PUSH
10330: LD_INT 15
10332: PUSH
10333: LD_INT 16
10335: PUSH
10336: LD_INT 20
10338: PUSH
10339: LD_INT 21
10341: PUSH
10342: LD_INT 22
10344: PUSH
10345: LD_INT 23
10347: PUSH
10348: LD_INT 25
10350: PUSH
10351: LD_INT 26
10353: PUSH
10354: LD_INT 30
10356: PUSH
10357: LD_INT 31
10359: PUSH
10360: LD_INT 32
10362: PUSH
10363: LD_INT 36
10365: PUSH
10366: EMPTY
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: LIST
10383: LIST
10384: LIST
10385: LIST
10386: LIST
10387: PUSH
10388: LD_INT 101
10390: PUSH
10391: LD_INT 102
10393: PUSH
10394: LD_INT 103
10396: PUSH
10397: LD_INT 105
10399: PUSH
10400: LD_INT 106
10402: PUSH
10403: LD_INT 108
10405: PUSH
10406: LD_INT 109
10408: PUSH
10409: LD_INT 112
10411: PUSH
10412: LD_INT 116
10414: PUSH
10415: LD_INT 117
10417: PUSH
10418: LD_INT 118
10420: PUSH
10421: EMPTY
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: PUSH
10434: EMPTY
10435: LIST
10436: LIST
10437: ST_TO_ADDR
10438: GO 12693
10440: LD_INT 9
10442: DOUBLE
10443: EQUAL
10444: IFTRUE 10448
10446: GO 10596
10448: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
10449: LD_ADDR_VAR 0 2
10453: PUSH
10454: LD_INT 2
10456: PUSH
10457: LD_INT 4
10459: PUSH
10460: LD_INT 5
10462: PUSH
10463: LD_INT 6
10465: PUSH
10466: LD_INT 7
10468: PUSH
10469: LD_INT 8
10471: PUSH
10472: LD_INT 11
10474: PUSH
10475: LD_INT 12
10477: PUSH
10478: LD_INT 15
10480: PUSH
10481: LD_INT 16
10483: PUSH
10484: LD_INT 20
10486: PUSH
10487: LD_INT 21
10489: PUSH
10490: LD_INT 22
10492: PUSH
10493: LD_INT 23
10495: PUSH
10496: LD_INT 25
10498: PUSH
10499: LD_INT 26
10501: PUSH
10502: LD_INT 28
10504: PUSH
10505: LD_INT 30
10507: PUSH
10508: LD_INT 31
10510: PUSH
10511: LD_INT 32
10513: PUSH
10514: LD_INT 36
10516: PUSH
10517: EMPTY
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: LIST
10535: LIST
10536: LIST
10537: LIST
10538: LIST
10539: PUSH
10540: LD_INT 101
10542: PUSH
10543: LD_INT 102
10545: PUSH
10546: LD_INT 103
10548: PUSH
10549: LD_INT 105
10551: PUSH
10552: LD_INT 106
10554: PUSH
10555: LD_INT 108
10557: PUSH
10558: LD_INT 109
10560: PUSH
10561: LD_INT 112
10563: PUSH
10564: LD_INT 114
10566: PUSH
10567: LD_INT 116
10569: PUSH
10570: LD_INT 117
10572: PUSH
10573: LD_INT 118
10575: PUSH
10576: EMPTY
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: LIST
10585: LIST
10586: LIST
10587: LIST
10588: LIST
10589: PUSH
10590: EMPTY
10591: LIST
10592: LIST
10593: ST_TO_ADDR
10594: GO 12693
10596: LD_INT 10
10598: DOUBLE
10599: EQUAL
10600: IFTRUE 10604
10602: GO 10800
10604: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10605: LD_ADDR_VAR 0 2
10609: PUSH
10610: LD_INT 2
10612: PUSH
10613: LD_INT 4
10615: PUSH
10616: LD_INT 5
10618: PUSH
10619: LD_INT 6
10621: PUSH
10622: LD_INT 7
10624: PUSH
10625: LD_INT 8
10627: PUSH
10628: LD_INT 9
10630: PUSH
10631: LD_INT 10
10633: PUSH
10634: LD_INT 11
10636: PUSH
10637: LD_INT 12
10639: PUSH
10640: LD_INT 13
10642: PUSH
10643: LD_INT 14
10645: PUSH
10646: LD_INT 15
10648: PUSH
10649: LD_INT 16
10651: PUSH
10652: LD_INT 17
10654: PUSH
10655: LD_INT 18
10657: PUSH
10658: LD_INT 19
10660: PUSH
10661: LD_INT 20
10663: PUSH
10664: LD_INT 21
10666: PUSH
10667: LD_INT 22
10669: PUSH
10670: LD_INT 23
10672: PUSH
10673: LD_INT 24
10675: PUSH
10676: LD_INT 25
10678: PUSH
10679: LD_INT 26
10681: PUSH
10682: LD_INT 28
10684: PUSH
10685: LD_INT 30
10687: PUSH
10688: LD_INT 31
10690: PUSH
10691: LD_INT 32
10693: PUSH
10694: LD_INT 36
10696: PUSH
10697: EMPTY
10698: LIST
10699: LIST
10700: LIST
10701: LIST
10702: LIST
10703: LIST
10704: LIST
10705: LIST
10706: LIST
10707: LIST
10708: LIST
10709: LIST
10710: LIST
10711: LIST
10712: LIST
10713: LIST
10714: LIST
10715: LIST
10716: LIST
10717: LIST
10718: LIST
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: LIST
10724: LIST
10725: LIST
10726: LIST
10727: PUSH
10728: LD_INT 101
10730: PUSH
10731: LD_INT 102
10733: PUSH
10734: LD_INT 103
10736: PUSH
10737: LD_INT 104
10739: PUSH
10740: LD_INT 105
10742: PUSH
10743: LD_INT 106
10745: PUSH
10746: LD_INT 107
10748: PUSH
10749: LD_INT 108
10751: PUSH
10752: LD_INT 109
10754: PUSH
10755: LD_INT 110
10757: PUSH
10758: LD_INT 111
10760: PUSH
10761: LD_INT 112
10763: PUSH
10764: LD_INT 114
10766: PUSH
10767: LD_INT 116
10769: PUSH
10770: LD_INT 117
10772: PUSH
10773: LD_INT 118
10775: PUSH
10776: EMPTY
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: LIST
10789: LIST
10790: LIST
10791: LIST
10792: LIST
10793: PUSH
10794: EMPTY
10795: LIST
10796: LIST
10797: ST_TO_ADDR
10798: GO 12693
10800: LD_INT 11
10802: DOUBLE
10803: EQUAL
10804: IFTRUE 10808
10806: GO 11012
10808: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10809: LD_ADDR_VAR 0 2
10813: PUSH
10814: LD_INT 2
10816: PUSH
10817: LD_INT 3
10819: PUSH
10820: LD_INT 4
10822: PUSH
10823: LD_INT 5
10825: PUSH
10826: LD_INT 6
10828: PUSH
10829: LD_INT 7
10831: PUSH
10832: LD_INT 8
10834: PUSH
10835: LD_INT 9
10837: PUSH
10838: LD_INT 10
10840: PUSH
10841: LD_INT 11
10843: PUSH
10844: LD_INT 12
10846: PUSH
10847: LD_INT 13
10849: PUSH
10850: LD_INT 14
10852: PUSH
10853: LD_INT 15
10855: PUSH
10856: LD_INT 16
10858: PUSH
10859: LD_INT 17
10861: PUSH
10862: LD_INT 18
10864: PUSH
10865: LD_INT 19
10867: PUSH
10868: LD_INT 20
10870: PUSH
10871: LD_INT 21
10873: PUSH
10874: LD_INT 22
10876: PUSH
10877: LD_INT 23
10879: PUSH
10880: LD_INT 24
10882: PUSH
10883: LD_INT 25
10885: PUSH
10886: LD_INT 26
10888: PUSH
10889: LD_INT 28
10891: PUSH
10892: LD_INT 30
10894: PUSH
10895: LD_INT 31
10897: PUSH
10898: LD_INT 32
10900: PUSH
10901: LD_INT 34
10903: PUSH
10904: LD_INT 36
10906: PUSH
10907: EMPTY
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: LIST
10935: LIST
10936: LIST
10937: LIST
10938: LIST
10939: PUSH
10940: LD_INT 101
10942: PUSH
10943: LD_INT 102
10945: PUSH
10946: LD_INT 103
10948: PUSH
10949: LD_INT 104
10951: PUSH
10952: LD_INT 105
10954: PUSH
10955: LD_INT 106
10957: PUSH
10958: LD_INT 107
10960: PUSH
10961: LD_INT 108
10963: PUSH
10964: LD_INT 109
10966: PUSH
10967: LD_INT 110
10969: PUSH
10970: LD_INT 111
10972: PUSH
10973: LD_INT 112
10975: PUSH
10976: LD_INT 114
10978: PUSH
10979: LD_INT 116
10981: PUSH
10982: LD_INT 117
10984: PUSH
10985: LD_INT 118
10987: PUSH
10988: EMPTY
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: LIST
11001: LIST
11002: LIST
11003: LIST
11004: LIST
11005: PUSH
11006: EMPTY
11007: LIST
11008: LIST
11009: ST_TO_ADDR
11010: GO 12693
11012: LD_INT 12
11014: DOUBLE
11015: EQUAL
11016: IFTRUE 11020
11018: GO 11240
11020: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
11021: LD_ADDR_VAR 0 2
11025: PUSH
11026: LD_INT 1
11028: PUSH
11029: LD_INT 2
11031: PUSH
11032: LD_INT 3
11034: PUSH
11035: LD_INT 4
11037: PUSH
11038: LD_INT 5
11040: PUSH
11041: LD_INT 6
11043: PUSH
11044: LD_INT 7
11046: PUSH
11047: LD_INT 8
11049: PUSH
11050: LD_INT 9
11052: PUSH
11053: LD_INT 10
11055: PUSH
11056: LD_INT 11
11058: PUSH
11059: LD_INT 12
11061: PUSH
11062: LD_INT 13
11064: PUSH
11065: LD_INT 14
11067: PUSH
11068: LD_INT 15
11070: PUSH
11071: LD_INT 16
11073: PUSH
11074: LD_INT 17
11076: PUSH
11077: LD_INT 18
11079: PUSH
11080: LD_INT 19
11082: PUSH
11083: LD_INT 20
11085: PUSH
11086: LD_INT 21
11088: PUSH
11089: LD_INT 22
11091: PUSH
11092: LD_INT 23
11094: PUSH
11095: LD_INT 24
11097: PUSH
11098: LD_INT 25
11100: PUSH
11101: LD_INT 26
11103: PUSH
11104: LD_INT 27
11106: PUSH
11107: LD_INT 28
11109: PUSH
11110: LD_INT 30
11112: PUSH
11113: LD_INT 31
11115: PUSH
11116: LD_INT 32
11118: PUSH
11119: LD_INT 33
11121: PUSH
11122: LD_INT 34
11124: PUSH
11125: LD_INT 36
11127: PUSH
11128: EMPTY
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: LIST
11151: LIST
11152: LIST
11153: LIST
11154: LIST
11155: LIST
11156: LIST
11157: LIST
11158: LIST
11159: LIST
11160: LIST
11161: LIST
11162: LIST
11163: PUSH
11164: LD_INT 101
11166: PUSH
11167: LD_INT 102
11169: PUSH
11170: LD_INT 103
11172: PUSH
11173: LD_INT 104
11175: PUSH
11176: LD_INT 105
11178: PUSH
11179: LD_INT 106
11181: PUSH
11182: LD_INT 107
11184: PUSH
11185: LD_INT 108
11187: PUSH
11188: LD_INT 109
11190: PUSH
11191: LD_INT 110
11193: PUSH
11194: LD_INT 111
11196: PUSH
11197: LD_INT 112
11199: PUSH
11200: LD_INT 113
11202: PUSH
11203: LD_INT 114
11205: PUSH
11206: LD_INT 116
11208: PUSH
11209: LD_INT 117
11211: PUSH
11212: LD_INT 118
11214: PUSH
11215: EMPTY
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: LIST
11229: LIST
11230: LIST
11231: LIST
11232: LIST
11233: PUSH
11234: EMPTY
11235: LIST
11236: LIST
11237: ST_TO_ADDR
11238: GO 12693
11240: LD_INT 13
11242: DOUBLE
11243: EQUAL
11244: IFTRUE 11248
11246: GO 11456
11248: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
11249: LD_ADDR_VAR 0 2
11253: PUSH
11254: LD_INT 1
11256: PUSH
11257: LD_INT 2
11259: PUSH
11260: LD_INT 3
11262: PUSH
11263: LD_INT 4
11265: PUSH
11266: LD_INT 5
11268: PUSH
11269: LD_INT 8
11271: PUSH
11272: LD_INT 9
11274: PUSH
11275: LD_INT 10
11277: PUSH
11278: LD_INT 11
11280: PUSH
11281: LD_INT 12
11283: PUSH
11284: LD_INT 14
11286: PUSH
11287: LD_INT 15
11289: PUSH
11290: LD_INT 16
11292: PUSH
11293: LD_INT 17
11295: PUSH
11296: LD_INT 18
11298: PUSH
11299: LD_INT 19
11301: PUSH
11302: LD_INT 20
11304: PUSH
11305: LD_INT 21
11307: PUSH
11308: LD_INT 22
11310: PUSH
11311: LD_INT 23
11313: PUSH
11314: LD_INT 24
11316: PUSH
11317: LD_INT 25
11319: PUSH
11320: LD_INT 26
11322: PUSH
11323: LD_INT 27
11325: PUSH
11326: LD_INT 28
11328: PUSH
11329: LD_INT 30
11331: PUSH
11332: LD_INT 31
11334: PUSH
11335: LD_INT 32
11337: PUSH
11338: LD_INT 33
11340: PUSH
11341: LD_INT 34
11343: PUSH
11344: LD_INT 36
11346: PUSH
11347: EMPTY
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: LIST
11359: LIST
11360: LIST
11361: LIST
11362: LIST
11363: LIST
11364: LIST
11365: LIST
11366: LIST
11367: LIST
11368: LIST
11369: LIST
11370: LIST
11371: LIST
11372: LIST
11373: LIST
11374: LIST
11375: LIST
11376: LIST
11377: LIST
11378: LIST
11379: PUSH
11380: LD_INT 101
11382: PUSH
11383: LD_INT 102
11385: PUSH
11386: LD_INT 103
11388: PUSH
11389: LD_INT 104
11391: PUSH
11392: LD_INT 105
11394: PUSH
11395: LD_INT 106
11397: PUSH
11398: LD_INT 107
11400: PUSH
11401: LD_INT 108
11403: PUSH
11404: LD_INT 109
11406: PUSH
11407: LD_INT 110
11409: PUSH
11410: LD_INT 111
11412: PUSH
11413: LD_INT 112
11415: PUSH
11416: LD_INT 113
11418: PUSH
11419: LD_INT 114
11421: PUSH
11422: LD_INT 116
11424: PUSH
11425: LD_INT 117
11427: PUSH
11428: LD_INT 118
11430: PUSH
11431: EMPTY
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: PUSH
11450: EMPTY
11451: LIST
11452: LIST
11453: ST_TO_ADDR
11454: GO 12693
11456: LD_INT 14
11458: DOUBLE
11459: EQUAL
11460: IFTRUE 11464
11462: GO 11688
11464: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
11465: LD_ADDR_VAR 0 2
11469: PUSH
11470: LD_INT 1
11472: PUSH
11473: LD_INT 2
11475: PUSH
11476: LD_INT 3
11478: PUSH
11479: LD_INT 4
11481: PUSH
11482: LD_INT 5
11484: PUSH
11485: LD_INT 6
11487: PUSH
11488: LD_INT 7
11490: PUSH
11491: LD_INT 8
11493: PUSH
11494: LD_INT 9
11496: PUSH
11497: LD_INT 10
11499: PUSH
11500: LD_INT 11
11502: PUSH
11503: LD_INT 12
11505: PUSH
11506: LD_INT 13
11508: PUSH
11509: LD_INT 14
11511: PUSH
11512: LD_INT 15
11514: PUSH
11515: LD_INT 16
11517: PUSH
11518: LD_INT 17
11520: PUSH
11521: LD_INT 18
11523: PUSH
11524: LD_INT 19
11526: PUSH
11527: LD_INT 20
11529: PUSH
11530: LD_INT 21
11532: PUSH
11533: LD_INT 22
11535: PUSH
11536: LD_INT 23
11538: PUSH
11539: LD_INT 24
11541: PUSH
11542: LD_INT 25
11544: PUSH
11545: LD_INT 26
11547: PUSH
11548: LD_INT 27
11550: PUSH
11551: LD_INT 28
11553: PUSH
11554: LD_INT 29
11556: PUSH
11557: LD_INT 30
11559: PUSH
11560: LD_INT 31
11562: PUSH
11563: LD_INT 32
11565: PUSH
11566: LD_INT 33
11568: PUSH
11569: LD_INT 34
11571: PUSH
11572: LD_INT 36
11574: PUSH
11575: EMPTY
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: LIST
11607: LIST
11608: LIST
11609: LIST
11610: LIST
11611: PUSH
11612: LD_INT 101
11614: PUSH
11615: LD_INT 102
11617: PUSH
11618: LD_INT 103
11620: PUSH
11621: LD_INT 104
11623: PUSH
11624: LD_INT 105
11626: PUSH
11627: LD_INT 106
11629: PUSH
11630: LD_INT 107
11632: PUSH
11633: LD_INT 108
11635: PUSH
11636: LD_INT 109
11638: PUSH
11639: LD_INT 110
11641: PUSH
11642: LD_INT 111
11644: PUSH
11645: LD_INT 112
11647: PUSH
11648: LD_INT 113
11650: PUSH
11651: LD_INT 114
11653: PUSH
11654: LD_INT 116
11656: PUSH
11657: LD_INT 117
11659: PUSH
11660: LD_INT 118
11662: PUSH
11663: EMPTY
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: LIST
11677: LIST
11678: LIST
11679: LIST
11680: LIST
11681: PUSH
11682: EMPTY
11683: LIST
11684: LIST
11685: ST_TO_ADDR
11686: GO 12693
11688: LD_INT 15
11690: DOUBLE
11691: EQUAL
11692: IFTRUE 11696
11694: GO 11920
11696: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11697: LD_ADDR_VAR 0 2
11701: PUSH
11702: LD_INT 1
11704: PUSH
11705: LD_INT 2
11707: PUSH
11708: LD_INT 3
11710: PUSH
11711: LD_INT 4
11713: PUSH
11714: LD_INT 5
11716: PUSH
11717: LD_INT 6
11719: PUSH
11720: LD_INT 7
11722: PUSH
11723: LD_INT 8
11725: PUSH
11726: LD_INT 9
11728: PUSH
11729: LD_INT 10
11731: PUSH
11732: LD_INT 11
11734: PUSH
11735: LD_INT 12
11737: PUSH
11738: LD_INT 13
11740: PUSH
11741: LD_INT 14
11743: PUSH
11744: LD_INT 15
11746: PUSH
11747: LD_INT 16
11749: PUSH
11750: LD_INT 17
11752: PUSH
11753: LD_INT 18
11755: PUSH
11756: LD_INT 19
11758: PUSH
11759: LD_INT 20
11761: PUSH
11762: LD_INT 21
11764: PUSH
11765: LD_INT 22
11767: PUSH
11768: LD_INT 23
11770: PUSH
11771: LD_INT 24
11773: PUSH
11774: LD_INT 25
11776: PUSH
11777: LD_INT 26
11779: PUSH
11780: LD_INT 27
11782: PUSH
11783: LD_INT 28
11785: PUSH
11786: LD_INT 29
11788: PUSH
11789: LD_INT 30
11791: PUSH
11792: LD_INT 31
11794: PUSH
11795: LD_INT 32
11797: PUSH
11798: LD_INT 33
11800: PUSH
11801: LD_INT 34
11803: PUSH
11804: LD_INT 36
11806: PUSH
11807: EMPTY
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: LIST
11828: LIST
11829: LIST
11830: LIST
11831: LIST
11832: LIST
11833: LIST
11834: LIST
11835: LIST
11836: LIST
11837: LIST
11838: LIST
11839: LIST
11840: LIST
11841: LIST
11842: LIST
11843: PUSH
11844: LD_INT 101
11846: PUSH
11847: LD_INT 102
11849: PUSH
11850: LD_INT 103
11852: PUSH
11853: LD_INT 104
11855: PUSH
11856: LD_INT 105
11858: PUSH
11859: LD_INT 106
11861: PUSH
11862: LD_INT 107
11864: PUSH
11865: LD_INT 108
11867: PUSH
11868: LD_INT 109
11870: PUSH
11871: LD_INT 110
11873: PUSH
11874: LD_INT 111
11876: PUSH
11877: LD_INT 112
11879: PUSH
11880: LD_INT 113
11882: PUSH
11883: LD_INT 114
11885: PUSH
11886: LD_INT 116
11888: PUSH
11889: LD_INT 117
11891: PUSH
11892: LD_INT 118
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: LIST
11904: LIST
11905: LIST
11906: LIST
11907: LIST
11908: LIST
11909: LIST
11910: LIST
11911: LIST
11912: LIST
11913: PUSH
11914: EMPTY
11915: LIST
11916: LIST
11917: ST_TO_ADDR
11918: GO 12693
11920: LD_INT 16
11922: DOUBLE
11923: EQUAL
11924: IFTRUE 11928
11926: GO 12064
11928: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11929: LD_ADDR_VAR 0 2
11933: PUSH
11934: LD_INT 2
11936: PUSH
11937: LD_INT 4
11939: PUSH
11940: LD_INT 5
11942: PUSH
11943: LD_INT 7
11945: PUSH
11946: LD_INT 11
11948: PUSH
11949: LD_INT 12
11951: PUSH
11952: LD_INT 15
11954: PUSH
11955: LD_INT 16
11957: PUSH
11958: LD_INT 20
11960: PUSH
11961: LD_INT 21
11963: PUSH
11964: LD_INT 22
11966: PUSH
11967: LD_INT 23
11969: PUSH
11970: LD_INT 25
11972: PUSH
11973: LD_INT 26
11975: PUSH
11976: LD_INT 30
11978: PUSH
11979: LD_INT 31
11981: PUSH
11982: LD_INT 32
11984: PUSH
11985: LD_INT 33
11987: PUSH
11988: LD_INT 34
11990: PUSH
11991: EMPTY
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: LIST
12009: LIST
12010: LIST
12011: PUSH
12012: LD_INT 101
12014: PUSH
12015: LD_INT 102
12017: PUSH
12018: LD_INT 103
12020: PUSH
12021: LD_INT 106
12023: PUSH
12024: LD_INT 108
12026: PUSH
12027: LD_INT 112
12029: PUSH
12030: LD_INT 113
12032: PUSH
12033: LD_INT 114
12035: PUSH
12036: LD_INT 116
12038: PUSH
12039: LD_INT 117
12041: PUSH
12042: LD_INT 118
12044: PUSH
12045: EMPTY
12046: LIST
12047: LIST
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: LIST
12054: LIST
12055: LIST
12056: LIST
12057: PUSH
12058: EMPTY
12059: LIST
12060: LIST
12061: ST_TO_ADDR
12062: GO 12693
12064: LD_INT 17
12066: DOUBLE
12067: EQUAL
12068: IFTRUE 12072
12070: GO 12296
12072: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
12073: LD_ADDR_VAR 0 2
12077: PUSH
12078: LD_INT 1
12080: PUSH
12081: LD_INT 2
12083: PUSH
12084: LD_INT 3
12086: PUSH
12087: LD_INT 4
12089: PUSH
12090: LD_INT 5
12092: PUSH
12093: LD_INT 6
12095: PUSH
12096: LD_INT 7
12098: PUSH
12099: LD_INT 8
12101: PUSH
12102: LD_INT 9
12104: PUSH
12105: LD_INT 10
12107: PUSH
12108: LD_INT 11
12110: PUSH
12111: LD_INT 12
12113: PUSH
12114: LD_INT 13
12116: PUSH
12117: LD_INT 14
12119: PUSH
12120: LD_INT 15
12122: PUSH
12123: LD_INT 16
12125: PUSH
12126: LD_INT 17
12128: PUSH
12129: LD_INT 18
12131: PUSH
12132: LD_INT 19
12134: PUSH
12135: LD_INT 20
12137: PUSH
12138: LD_INT 21
12140: PUSH
12141: LD_INT 22
12143: PUSH
12144: LD_INT 23
12146: PUSH
12147: LD_INT 24
12149: PUSH
12150: LD_INT 25
12152: PUSH
12153: LD_INT 26
12155: PUSH
12156: LD_INT 27
12158: PUSH
12159: LD_INT 28
12161: PUSH
12162: LD_INT 29
12164: PUSH
12165: LD_INT 30
12167: PUSH
12168: LD_INT 31
12170: PUSH
12171: LD_INT 32
12173: PUSH
12174: LD_INT 33
12176: PUSH
12177: LD_INT 34
12179: PUSH
12180: LD_INT 36
12182: PUSH
12183: EMPTY
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: LIST
12215: LIST
12216: LIST
12217: LIST
12218: LIST
12219: PUSH
12220: LD_INT 101
12222: PUSH
12223: LD_INT 102
12225: PUSH
12226: LD_INT 103
12228: PUSH
12229: LD_INT 104
12231: PUSH
12232: LD_INT 105
12234: PUSH
12235: LD_INT 106
12237: PUSH
12238: LD_INT 107
12240: PUSH
12241: LD_INT 108
12243: PUSH
12244: LD_INT 109
12246: PUSH
12247: LD_INT 110
12249: PUSH
12250: LD_INT 111
12252: PUSH
12253: LD_INT 112
12255: PUSH
12256: LD_INT 113
12258: PUSH
12259: LD_INT 114
12261: PUSH
12262: LD_INT 116
12264: PUSH
12265: LD_INT 117
12267: PUSH
12268: LD_INT 118
12270: PUSH
12271: EMPTY
12272: LIST
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: LIST
12280: LIST
12281: LIST
12282: LIST
12283: LIST
12284: LIST
12285: LIST
12286: LIST
12287: LIST
12288: LIST
12289: PUSH
12290: EMPTY
12291: LIST
12292: LIST
12293: ST_TO_ADDR
12294: GO 12693
12296: LD_INT 18
12298: DOUBLE
12299: EQUAL
12300: IFTRUE 12304
12302: GO 12452
12304: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
12305: LD_ADDR_VAR 0 2
12309: PUSH
12310: LD_INT 2
12312: PUSH
12313: LD_INT 4
12315: PUSH
12316: LD_INT 5
12318: PUSH
12319: LD_INT 7
12321: PUSH
12322: LD_INT 11
12324: PUSH
12325: LD_INT 12
12327: PUSH
12328: LD_INT 15
12330: PUSH
12331: LD_INT 16
12333: PUSH
12334: LD_INT 20
12336: PUSH
12337: LD_INT 21
12339: PUSH
12340: LD_INT 22
12342: PUSH
12343: LD_INT 23
12345: PUSH
12346: LD_INT 25
12348: PUSH
12349: LD_INT 26
12351: PUSH
12352: LD_INT 30
12354: PUSH
12355: LD_INT 31
12357: PUSH
12358: LD_INT 32
12360: PUSH
12361: LD_INT 33
12363: PUSH
12364: LD_INT 34
12366: PUSH
12367: LD_INT 35
12369: PUSH
12370: LD_INT 36
12372: PUSH
12373: EMPTY
12374: LIST
12375: LIST
12376: LIST
12377: LIST
12378: LIST
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: LIST
12393: LIST
12394: LIST
12395: PUSH
12396: LD_INT 101
12398: PUSH
12399: LD_INT 102
12401: PUSH
12402: LD_INT 103
12404: PUSH
12405: LD_INT 106
12407: PUSH
12408: LD_INT 108
12410: PUSH
12411: LD_INT 112
12413: PUSH
12414: LD_INT 113
12416: PUSH
12417: LD_INT 114
12419: PUSH
12420: LD_INT 115
12422: PUSH
12423: LD_INT 116
12425: PUSH
12426: LD_INT 117
12428: PUSH
12429: LD_INT 118
12431: PUSH
12432: EMPTY
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: LIST
12441: LIST
12442: LIST
12443: LIST
12444: LIST
12445: PUSH
12446: EMPTY
12447: LIST
12448: LIST
12449: ST_TO_ADDR
12450: GO 12693
12452: LD_INT 19
12454: DOUBLE
12455: EQUAL
12456: IFTRUE 12460
12458: GO 12692
12460: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
12461: LD_ADDR_VAR 0 2
12465: PUSH
12466: LD_INT 1
12468: PUSH
12469: LD_INT 2
12471: PUSH
12472: LD_INT 3
12474: PUSH
12475: LD_INT 4
12477: PUSH
12478: LD_INT 5
12480: PUSH
12481: LD_INT 6
12483: PUSH
12484: LD_INT 7
12486: PUSH
12487: LD_INT 8
12489: PUSH
12490: LD_INT 9
12492: PUSH
12493: LD_INT 10
12495: PUSH
12496: LD_INT 11
12498: PUSH
12499: LD_INT 12
12501: PUSH
12502: LD_INT 13
12504: PUSH
12505: LD_INT 14
12507: PUSH
12508: LD_INT 15
12510: PUSH
12511: LD_INT 16
12513: PUSH
12514: LD_INT 17
12516: PUSH
12517: LD_INT 18
12519: PUSH
12520: LD_INT 19
12522: PUSH
12523: LD_INT 20
12525: PUSH
12526: LD_INT 21
12528: PUSH
12529: LD_INT 22
12531: PUSH
12532: LD_INT 23
12534: PUSH
12535: LD_INT 24
12537: PUSH
12538: LD_INT 25
12540: PUSH
12541: LD_INT 26
12543: PUSH
12544: LD_INT 27
12546: PUSH
12547: LD_INT 28
12549: PUSH
12550: LD_INT 29
12552: PUSH
12553: LD_INT 30
12555: PUSH
12556: LD_INT 31
12558: PUSH
12559: LD_INT 32
12561: PUSH
12562: LD_INT 33
12564: PUSH
12565: LD_INT 34
12567: PUSH
12568: LD_INT 35
12570: PUSH
12571: LD_INT 36
12573: PUSH
12574: EMPTY
12575: LIST
12576: LIST
12577: LIST
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: LIST
12596: LIST
12597: LIST
12598: LIST
12599: LIST
12600: LIST
12601: LIST
12602: LIST
12603: LIST
12604: LIST
12605: LIST
12606: LIST
12607: LIST
12608: LIST
12609: LIST
12610: LIST
12611: PUSH
12612: LD_INT 101
12614: PUSH
12615: LD_INT 102
12617: PUSH
12618: LD_INT 103
12620: PUSH
12621: LD_INT 104
12623: PUSH
12624: LD_INT 105
12626: PUSH
12627: LD_INT 106
12629: PUSH
12630: LD_INT 107
12632: PUSH
12633: LD_INT 108
12635: PUSH
12636: LD_INT 109
12638: PUSH
12639: LD_INT 110
12641: PUSH
12642: LD_INT 111
12644: PUSH
12645: LD_INT 112
12647: PUSH
12648: LD_INT 113
12650: PUSH
12651: LD_INT 114
12653: PUSH
12654: LD_INT 115
12656: PUSH
12657: LD_INT 116
12659: PUSH
12660: LD_INT 117
12662: PUSH
12663: LD_INT 118
12665: PUSH
12666: EMPTY
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: LIST
12681: LIST
12682: LIST
12683: LIST
12684: LIST
12685: PUSH
12686: EMPTY
12687: LIST
12688: LIST
12689: ST_TO_ADDR
12690: GO 12693
12692: POP
// end else
12693: GO 12924
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12695: LD_ADDR_VAR 0 2
12699: PUSH
12700: LD_INT 1
12702: PUSH
12703: LD_INT 2
12705: PUSH
12706: LD_INT 3
12708: PUSH
12709: LD_INT 4
12711: PUSH
12712: LD_INT 5
12714: PUSH
12715: LD_INT 6
12717: PUSH
12718: LD_INT 7
12720: PUSH
12721: LD_INT 8
12723: PUSH
12724: LD_INT 9
12726: PUSH
12727: LD_INT 10
12729: PUSH
12730: LD_INT 11
12732: PUSH
12733: LD_INT 12
12735: PUSH
12736: LD_INT 13
12738: PUSH
12739: LD_INT 14
12741: PUSH
12742: LD_INT 15
12744: PUSH
12745: LD_INT 16
12747: PUSH
12748: LD_INT 17
12750: PUSH
12751: LD_INT 18
12753: PUSH
12754: LD_INT 19
12756: PUSH
12757: LD_INT 20
12759: PUSH
12760: LD_INT 21
12762: PUSH
12763: LD_INT 22
12765: PUSH
12766: LD_INT 23
12768: PUSH
12769: LD_INT 24
12771: PUSH
12772: LD_INT 25
12774: PUSH
12775: LD_INT 26
12777: PUSH
12778: LD_INT 27
12780: PUSH
12781: LD_INT 28
12783: PUSH
12784: LD_INT 29
12786: PUSH
12787: LD_INT 30
12789: PUSH
12790: LD_INT 31
12792: PUSH
12793: LD_INT 32
12795: PUSH
12796: LD_INT 33
12798: PUSH
12799: LD_INT 34
12801: PUSH
12802: LD_INT 35
12804: PUSH
12805: LD_INT 36
12807: PUSH
12808: EMPTY
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: LIST
12829: LIST
12830: LIST
12831: LIST
12832: LIST
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: LIST
12838: LIST
12839: LIST
12840: LIST
12841: LIST
12842: LIST
12843: LIST
12844: LIST
12845: PUSH
12846: LD_INT 101
12848: PUSH
12849: LD_INT 102
12851: PUSH
12852: LD_INT 103
12854: PUSH
12855: LD_INT 104
12857: PUSH
12858: LD_INT 105
12860: PUSH
12861: LD_INT 106
12863: PUSH
12864: LD_INT 107
12866: PUSH
12867: LD_INT 108
12869: PUSH
12870: LD_INT 109
12872: PUSH
12873: LD_INT 110
12875: PUSH
12876: LD_INT 111
12878: PUSH
12879: LD_INT 112
12881: PUSH
12882: LD_INT 113
12884: PUSH
12885: LD_INT 114
12887: PUSH
12888: LD_INT 115
12890: PUSH
12891: LD_INT 116
12893: PUSH
12894: LD_INT 117
12896: PUSH
12897: LD_INT 118
12899: PUSH
12900: EMPTY
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: LIST
12917: LIST
12918: LIST
12919: PUSH
12920: EMPTY
12921: LIST
12922: LIST
12923: ST_TO_ADDR
// if result then
12924: LD_VAR 0 2
12928: IFFALSE 13714
// begin normal :=  ;
12930: LD_ADDR_VAR 0 5
12934: PUSH
12935: LD_STRING 
12937: ST_TO_ADDR
// hardcore :=  ;
12938: LD_ADDR_VAR 0 6
12942: PUSH
12943: LD_STRING 
12945: ST_TO_ADDR
// active :=  ;
12946: LD_ADDR_VAR 0 7
12950: PUSH
12951: LD_STRING 
12953: ST_TO_ADDR
// for i = 1 to normalCounter do
12954: LD_ADDR_VAR 0 8
12958: PUSH
12959: DOUBLE
12960: LD_INT 1
12962: DEC
12963: ST_TO_ADDR
12964: LD_EXP 24
12968: PUSH
12969: FOR_TO
12970: IFFALSE 13071
// begin tmp := 0 ;
12972: LD_ADDR_VAR 0 3
12976: PUSH
12977: LD_STRING 0
12979: ST_TO_ADDR
// if result [ 1 ] then
12980: LD_VAR 0 2
12984: PUSH
12985: LD_INT 1
12987: ARRAY
12988: IFFALSE 13053
// if result [ 1 ] [ 1 ] = i then
12990: LD_VAR 0 2
12994: PUSH
12995: LD_INT 1
12997: ARRAY
12998: PUSH
12999: LD_INT 1
13001: ARRAY
13002: PUSH
13003: LD_VAR 0 8
13007: EQUAL
13008: IFFALSE 13053
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
13010: LD_ADDR_VAR 0 2
13014: PUSH
13015: LD_VAR 0 2
13019: PPUSH
13020: LD_INT 1
13022: PPUSH
13023: LD_VAR 0 2
13027: PUSH
13028: LD_INT 1
13030: ARRAY
13031: PPUSH
13032: LD_INT 1
13034: PPUSH
13035: CALL_OW 3
13039: PPUSH
13040: CALL_OW 1
13044: ST_TO_ADDR
// tmp := 1 ;
13045: LD_ADDR_VAR 0 3
13049: PUSH
13050: LD_STRING 1
13052: ST_TO_ADDR
// end ; normal := normal & tmp ;
13053: LD_ADDR_VAR 0 5
13057: PUSH
13058: LD_VAR 0 5
13062: PUSH
13063: LD_VAR 0 3
13067: STR
13068: ST_TO_ADDR
// end ;
13069: GO 12969
13071: POP
13072: POP
// for i = 1 to hardcoreCounter do
13073: LD_ADDR_VAR 0 8
13077: PUSH
13078: DOUBLE
13079: LD_INT 1
13081: DEC
13082: ST_TO_ADDR
13083: LD_EXP 25
13087: PUSH
13088: FOR_TO
13089: IFFALSE 13194
// begin tmp := 0 ;
13091: LD_ADDR_VAR 0 3
13095: PUSH
13096: LD_STRING 0
13098: ST_TO_ADDR
// if result [ 2 ] then
13099: LD_VAR 0 2
13103: PUSH
13104: LD_INT 2
13106: ARRAY
13107: IFFALSE 13176
// if result [ 2 ] [ 1 ] = 100 + i then
13109: LD_VAR 0 2
13113: PUSH
13114: LD_INT 2
13116: ARRAY
13117: PUSH
13118: LD_INT 1
13120: ARRAY
13121: PUSH
13122: LD_INT 100
13124: PUSH
13125: LD_VAR 0 8
13129: PLUS
13130: EQUAL
13131: IFFALSE 13176
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
13133: LD_ADDR_VAR 0 2
13137: PUSH
13138: LD_VAR 0 2
13142: PPUSH
13143: LD_INT 2
13145: PPUSH
13146: LD_VAR 0 2
13150: PUSH
13151: LD_INT 2
13153: ARRAY
13154: PPUSH
13155: LD_INT 1
13157: PPUSH
13158: CALL_OW 3
13162: PPUSH
13163: CALL_OW 1
13167: ST_TO_ADDR
// tmp := 1 ;
13168: LD_ADDR_VAR 0 3
13172: PUSH
13173: LD_STRING 1
13175: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13176: LD_ADDR_VAR 0 6
13180: PUSH
13181: LD_VAR 0 6
13185: PUSH
13186: LD_VAR 0 3
13190: STR
13191: ST_TO_ADDR
// end ;
13192: GO 13088
13194: POP
13195: POP
// if isGameLoad then
13196: LD_VAR 0 1
13200: IFFALSE 13675
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
13202: LD_ADDR_VAR 0 4
13206: PUSH
13207: LD_EXP 28
13211: PUSH
13212: LD_EXP 27
13216: PUSH
13217: LD_EXP 29
13221: PUSH
13222: LD_EXP 26
13226: PUSH
13227: LD_EXP 30
13231: PUSH
13232: LD_EXP 31
13236: PUSH
13237: LD_EXP 32
13241: PUSH
13242: LD_EXP 33
13246: PUSH
13247: LD_EXP 34
13251: PUSH
13252: LD_EXP 35
13256: PUSH
13257: LD_EXP 36
13261: PUSH
13262: LD_EXP 37
13266: PUSH
13267: LD_EXP 38
13271: PUSH
13272: LD_EXP 39
13276: PUSH
13277: LD_EXP 47
13281: PUSH
13282: LD_EXP 48
13286: PUSH
13287: LD_EXP 49
13291: PUSH
13292: LD_EXP 50
13296: PUSH
13297: LD_EXP 52
13301: PUSH
13302: LD_EXP 53
13306: PUSH
13307: LD_EXP 54
13311: PUSH
13312: LD_EXP 57
13316: PUSH
13317: LD_EXP 59
13321: PUSH
13322: LD_EXP 60
13326: PUSH
13327: LD_EXP 61
13331: PUSH
13332: LD_EXP 63
13336: PUSH
13337: LD_EXP 64
13341: PUSH
13342: LD_EXP 67
13346: PUSH
13347: LD_EXP 68
13351: PUSH
13352: LD_EXP 69
13356: PUSH
13357: LD_EXP 70
13361: PUSH
13362: LD_EXP 71
13366: PUSH
13367: LD_EXP 72
13371: PUSH
13372: LD_EXP 73
13376: PUSH
13377: LD_EXP 74
13381: PUSH
13382: LD_EXP 75
13386: PUSH
13387: LD_EXP 40
13391: PUSH
13392: LD_EXP 41
13396: PUSH
13397: LD_EXP 44
13401: PUSH
13402: LD_EXP 45
13406: PUSH
13407: LD_EXP 46
13411: PUSH
13412: LD_EXP 42
13416: PUSH
13417: LD_EXP 43
13421: PUSH
13422: LD_EXP 51
13426: PUSH
13427: LD_EXP 55
13431: PUSH
13432: LD_EXP 56
13436: PUSH
13437: LD_EXP 58
13441: PUSH
13442: LD_EXP 62
13446: PUSH
13447: LD_EXP 65
13451: PUSH
13452: LD_EXP 66
13456: PUSH
13457: LD_EXP 76
13461: PUSH
13462: LD_EXP 77
13466: PUSH
13467: LD_EXP 78
13471: PUSH
13472: LD_EXP 79
13476: PUSH
13477: EMPTY
13478: LIST
13479: LIST
13480: LIST
13481: LIST
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: LIST
13487: LIST
13488: LIST
13489: LIST
13490: LIST
13491: LIST
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: LIST
13531: LIST
13532: ST_TO_ADDR
// tmp :=  ;
13533: LD_ADDR_VAR 0 3
13537: PUSH
13538: LD_STRING 
13540: ST_TO_ADDR
// for i = 1 to normalCounter do
13541: LD_ADDR_VAR 0 8
13545: PUSH
13546: DOUBLE
13547: LD_INT 1
13549: DEC
13550: ST_TO_ADDR
13551: LD_EXP 24
13555: PUSH
13556: FOR_TO
13557: IFFALSE 13593
// begin if flags [ i ] then
13559: LD_VAR 0 4
13563: PUSH
13564: LD_VAR 0 8
13568: ARRAY
13569: IFFALSE 13591
// tmp := tmp & i & ; ;
13571: LD_ADDR_VAR 0 3
13575: PUSH
13576: LD_VAR 0 3
13580: PUSH
13581: LD_VAR 0 8
13585: STR
13586: PUSH
13587: LD_STRING ;
13589: STR
13590: ST_TO_ADDR
// end ;
13591: GO 13556
13593: POP
13594: POP
// for i = 1 to hardcoreCounter do
13595: LD_ADDR_VAR 0 8
13599: PUSH
13600: DOUBLE
13601: LD_INT 1
13603: DEC
13604: ST_TO_ADDR
13605: LD_EXP 25
13609: PUSH
13610: FOR_TO
13611: IFFALSE 13657
// begin if flags [ normalCounter + i ] then
13613: LD_VAR 0 4
13617: PUSH
13618: LD_EXP 24
13622: PUSH
13623: LD_VAR 0 8
13627: PLUS
13628: ARRAY
13629: IFFALSE 13655
// tmp := tmp & ( 100 + i ) & ; ;
13631: LD_ADDR_VAR 0 3
13635: PUSH
13636: LD_VAR 0 3
13640: PUSH
13641: LD_INT 100
13643: PUSH
13644: LD_VAR 0 8
13648: PLUS
13649: STR
13650: PUSH
13651: LD_STRING ;
13653: STR
13654: ST_TO_ADDR
// end ;
13655: GO 13610
13657: POP
13658: POP
// if tmp then
13659: LD_VAR 0 3
13663: IFFALSE 13675
// active := tmp ;
13665: LD_ADDR_VAR 0 7
13669: PUSH
13670: LD_VAR 0 3
13674: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13675: LD_STRING getStreamItemsFromMission("
13677: PUSH
13678: LD_VAR 0 5
13682: STR
13683: PUSH
13684: LD_STRING ","
13686: STR
13687: PUSH
13688: LD_VAR 0 6
13692: STR
13693: PUSH
13694: LD_STRING ","
13696: STR
13697: PUSH
13698: LD_VAR 0 7
13702: STR
13703: PUSH
13704: LD_STRING ")
13706: STR
13707: PPUSH
13708: CALL_OW 559
// end else
13712: GO 13721
// ToLua ( getStreamItemsFromMission("","","") ) ;
13714: LD_STRING getStreamItemsFromMission("","","")
13716: PPUSH
13717: CALL_OW 559
// end ;
13721: LD_VAR 0 2
13725: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13726: LD_EXP 23
13730: PUSH
13731: LD_EXP 28
13735: AND
13736: IFFALSE 13860
13738: GO 13740
13740: DISABLE
13741: LD_INT 0
13743: PPUSH
13744: PPUSH
// begin enable ;
13745: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13746: LD_ADDR_VAR 0 2
13750: PUSH
13751: LD_INT 22
13753: PUSH
13754: LD_OWVAR 2
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: PUSH
13763: LD_INT 2
13765: PUSH
13766: LD_INT 34
13768: PUSH
13769: LD_INT 7
13771: PUSH
13772: EMPTY
13773: LIST
13774: LIST
13775: PUSH
13776: LD_INT 34
13778: PUSH
13779: LD_INT 45
13781: PUSH
13782: EMPTY
13783: LIST
13784: LIST
13785: PUSH
13786: LD_INT 34
13788: PUSH
13789: LD_INT 28
13791: PUSH
13792: EMPTY
13793: LIST
13794: LIST
13795: PUSH
13796: LD_INT 34
13798: PUSH
13799: LD_INT 47
13801: PUSH
13802: EMPTY
13803: LIST
13804: LIST
13805: PUSH
13806: EMPTY
13807: LIST
13808: LIST
13809: LIST
13810: LIST
13811: LIST
13812: PUSH
13813: EMPTY
13814: LIST
13815: LIST
13816: PPUSH
13817: CALL_OW 69
13821: ST_TO_ADDR
// if not tmp then
13822: LD_VAR 0 2
13826: NOT
13827: IFFALSE 13831
// exit ;
13829: GO 13860
// for i in tmp do
13831: LD_ADDR_VAR 0 1
13835: PUSH
13836: LD_VAR 0 2
13840: PUSH
13841: FOR_IN
13842: IFFALSE 13858
// begin SetLives ( i , 0 ) ;
13844: LD_VAR 0 1
13848: PPUSH
13849: LD_INT 0
13851: PPUSH
13852: CALL_OW 234
// end ;
13856: GO 13841
13858: POP
13859: POP
// end ;
13860: PPOPN 2
13862: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13863: LD_EXP 23
13867: PUSH
13868: LD_EXP 29
13872: AND
13873: IFFALSE 13957
13875: GO 13877
13877: DISABLE
13878: LD_INT 0
13880: PPUSH
13881: PPUSH
// begin enable ;
13882: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13883: LD_ADDR_VAR 0 2
13887: PUSH
13888: LD_INT 22
13890: PUSH
13891: LD_OWVAR 2
13895: PUSH
13896: EMPTY
13897: LIST
13898: LIST
13899: PUSH
13900: LD_INT 32
13902: PUSH
13903: LD_INT 3
13905: PUSH
13906: EMPTY
13907: LIST
13908: LIST
13909: PUSH
13910: EMPTY
13911: LIST
13912: LIST
13913: PPUSH
13914: CALL_OW 69
13918: ST_TO_ADDR
// if not tmp then
13919: LD_VAR 0 2
13923: NOT
13924: IFFALSE 13928
// exit ;
13926: GO 13957
// for i in tmp do
13928: LD_ADDR_VAR 0 1
13932: PUSH
13933: LD_VAR 0 2
13937: PUSH
13938: FOR_IN
13939: IFFALSE 13955
// begin SetLives ( i , 0 ) ;
13941: LD_VAR 0 1
13945: PPUSH
13946: LD_INT 0
13948: PPUSH
13949: CALL_OW 234
// end ;
13953: GO 13938
13955: POP
13956: POP
// end ;
13957: PPOPN 2
13959: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13960: LD_EXP 23
13964: PUSH
13965: LD_EXP 26
13969: AND
13970: IFFALSE 14063
13972: GO 13974
13974: DISABLE
13975: LD_INT 0
13977: PPUSH
// begin enable ;
13978: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13979: LD_ADDR_VAR 0 1
13983: PUSH
13984: LD_INT 22
13986: PUSH
13987: LD_OWVAR 2
13991: PUSH
13992: EMPTY
13993: LIST
13994: LIST
13995: PUSH
13996: LD_INT 2
13998: PUSH
13999: LD_INT 25
14001: PUSH
14002: LD_INT 5
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: PUSH
14009: LD_INT 25
14011: PUSH
14012: LD_INT 9
14014: PUSH
14015: EMPTY
14016: LIST
14017: LIST
14018: PUSH
14019: LD_INT 25
14021: PUSH
14022: LD_INT 8
14024: PUSH
14025: EMPTY
14026: LIST
14027: LIST
14028: PUSH
14029: EMPTY
14030: LIST
14031: LIST
14032: LIST
14033: LIST
14034: PUSH
14035: EMPTY
14036: LIST
14037: LIST
14038: PPUSH
14039: CALL_OW 69
14043: PUSH
14044: FOR_IN
14045: IFFALSE 14061
// begin SetClass ( i , 1 ) ;
14047: LD_VAR 0 1
14051: PPUSH
14052: LD_INT 1
14054: PPUSH
14055: CALL_OW 336
// end ;
14059: GO 14044
14061: POP
14062: POP
// end ;
14063: PPOPN 1
14065: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
14066: LD_EXP 23
14070: PUSH
14071: LD_EXP 27
14075: AND
14076: PUSH
14077: LD_OWVAR 65
14081: PUSH
14082: LD_INT 7
14084: LESS
14085: AND
14086: IFFALSE 14100
14088: GO 14090
14090: DISABLE
// begin enable ;
14091: ENABLE
// game_speed := 7 ;
14092: LD_ADDR_OWVAR 65
14096: PUSH
14097: LD_INT 7
14099: ST_TO_ADDR
// end ;
14100: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
14101: LD_EXP 23
14105: PUSH
14106: LD_EXP 30
14110: AND
14111: IFFALSE 14313
14113: GO 14115
14115: DISABLE
14116: LD_INT 0
14118: PPUSH
14119: PPUSH
14120: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14121: LD_ADDR_VAR 0 3
14125: PUSH
14126: LD_INT 81
14128: PUSH
14129: LD_OWVAR 2
14133: PUSH
14134: EMPTY
14135: LIST
14136: LIST
14137: PUSH
14138: LD_INT 21
14140: PUSH
14141: LD_INT 1
14143: PUSH
14144: EMPTY
14145: LIST
14146: LIST
14147: PUSH
14148: EMPTY
14149: LIST
14150: LIST
14151: PPUSH
14152: CALL_OW 69
14156: ST_TO_ADDR
// if not tmp then
14157: LD_VAR 0 3
14161: NOT
14162: IFFALSE 14166
// exit ;
14164: GO 14313
// if tmp > 5 then
14166: LD_VAR 0 3
14170: PUSH
14171: LD_INT 5
14173: GREATER
14174: IFFALSE 14186
// k := 5 else
14176: LD_ADDR_VAR 0 2
14180: PUSH
14181: LD_INT 5
14183: ST_TO_ADDR
14184: GO 14196
// k := tmp ;
14186: LD_ADDR_VAR 0 2
14190: PUSH
14191: LD_VAR 0 3
14195: ST_TO_ADDR
// for i := 1 to k do
14196: LD_ADDR_VAR 0 1
14200: PUSH
14201: DOUBLE
14202: LD_INT 1
14204: DEC
14205: ST_TO_ADDR
14206: LD_VAR 0 2
14210: PUSH
14211: FOR_TO
14212: IFFALSE 14311
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
14214: LD_VAR 0 3
14218: PUSH
14219: LD_VAR 0 1
14223: ARRAY
14224: PPUSH
14225: LD_VAR 0 1
14229: PUSH
14230: LD_INT 4
14232: MOD
14233: PUSH
14234: LD_INT 1
14236: PLUS
14237: PPUSH
14238: CALL_OW 259
14242: PUSH
14243: LD_INT 10
14245: LESS
14246: IFFALSE 14309
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14248: LD_VAR 0 3
14252: PUSH
14253: LD_VAR 0 1
14257: ARRAY
14258: PPUSH
14259: LD_VAR 0 1
14263: PUSH
14264: LD_INT 4
14266: MOD
14267: PUSH
14268: LD_INT 1
14270: PLUS
14271: PPUSH
14272: LD_VAR 0 3
14276: PUSH
14277: LD_VAR 0 1
14281: ARRAY
14282: PPUSH
14283: LD_VAR 0 1
14287: PUSH
14288: LD_INT 4
14290: MOD
14291: PUSH
14292: LD_INT 1
14294: PLUS
14295: PPUSH
14296: CALL_OW 259
14300: PUSH
14301: LD_INT 1
14303: PLUS
14304: PPUSH
14305: CALL_OW 237
14309: GO 14211
14311: POP
14312: POP
// end ;
14313: PPOPN 3
14315: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
14316: LD_EXP 23
14320: PUSH
14321: LD_EXP 31
14325: AND
14326: IFFALSE 14346
14328: GO 14330
14330: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
14331: LD_INT 4
14333: PPUSH
14334: LD_OWVAR 2
14338: PPUSH
14339: LD_INT 0
14341: PPUSH
14342: CALL_OW 324
14346: END
// every 0 0$1 trigger StreamModeActive and sShovel do
14347: LD_EXP 23
14351: PUSH
14352: LD_EXP 60
14356: AND
14357: IFFALSE 14377
14359: GO 14361
14361: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14362: LD_INT 19
14364: PPUSH
14365: LD_OWVAR 2
14369: PPUSH
14370: LD_INT 0
14372: PPUSH
14373: CALL_OW 324
14377: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14378: LD_EXP 23
14382: PUSH
14383: LD_EXP 32
14387: AND
14388: IFFALSE 14490
14390: GO 14392
14392: DISABLE
14393: LD_INT 0
14395: PPUSH
14396: PPUSH
// begin enable ;
14397: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14398: LD_ADDR_VAR 0 2
14402: PUSH
14403: LD_INT 22
14405: PUSH
14406: LD_OWVAR 2
14410: PUSH
14411: EMPTY
14412: LIST
14413: LIST
14414: PUSH
14415: LD_INT 2
14417: PUSH
14418: LD_INT 34
14420: PUSH
14421: LD_INT 11
14423: PUSH
14424: EMPTY
14425: LIST
14426: LIST
14427: PUSH
14428: LD_INT 34
14430: PUSH
14431: LD_INT 30
14433: PUSH
14434: EMPTY
14435: LIST
14436: LIST
14437: PUSH
14438: EMPTY
14439: LIST
14440: LIST
14441: LIST
14442: PUSH
14443: EMPTY
14444: LIST
14445: LIST
14446: PPUSH
14447: CALL_OW 69
14451: ST_TO_ADDR
// if not tmp then
14452: LD_VAR 0 2
14456: NOT
14457: IFFALSE 14461
// exit ;
14459: GO 14490
// for i in tmp do
14461: LD_ADDR_VAR 0 1
14465: PUSH
14466: LD_VAR 0 2
14470: PUSH
14471: FOR_IN
14472: IFFALSE 14488
// begin SetLives ( i , 0 ) ;
14474: LD_VAR 0 1
14478: PPUSH
14479: LD_INT 0
14481: PPUSH
14482: CALL_OW 234
// end ;
14486: GO 14471
14488: POP
14489: POP
// end ;
14490: PPOPN 2
14492: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14493: LD_EXP 23
14497: PUSH
14498: LD_EXP 33
14502: AND
14503: IFFALSE 14523
14505: GO 14507
14507: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14508: LD_INT 32
14510: PPUSH
14511: LD_OWVAR 2
14515: PPUSH
14516: LD_INT 0
14518: PPUSH
14519: CALL_OW 324
14523: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14524: LD_EXP 23
14528: PUSH
14529: LD_EXP 34
14533: AND
14534: IFFALSE 14715
14536: GO 14538
14538: DISABLE
14539: LD_INT 0
14541: PPUSH
14542: PPUSH
14543: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14544: LD_ADDR_VAR 0 2
14548: PUSH
14549: LD_INT 22
14551: PUSH
14552: LD_OWVAR 2
14556: PUSH
14557: EMPTY
14558: LIST
14559: LIST
14560: PUSH
14561: LD_INT 33
14563: PUSH
14564: LD_INT 3
14566: PUSH
14567: EMPTY
14568: LIST
14569: LIST
14570: PUSH
14571: EMPTY
14572: LIST
14573: LIST
14574: PPUSH
14575: CALL_OW 69
14579: ST_TO_ADDR
// if not tmp then
14580: LD_VAR 0 2
14584: NOT
14585: IFFALSE 14589
// exit ;
14587: GO 14715
// side := 0 ;
14589: LD_ADDR_VAR 0 3
14593: PUSH
14594: LD_INT 0
14596: ST_TO_ADDR
// for i := 1 to 8 do
14597: LD_ADDR_VAR 0 1
14601: PUSH
14602: DOUBLE
14603: LD_INT 1
14605: DEC
14606: ST_TO_ADDR
14607: LD_INT 8
14609: PUSH
14610: FOR_TO
14611: IFFALSE 14659
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14613: LD_OWVAR 2
14617: PUSH
14618: LD_VAR 0 1
14622: NONEQUAL
14623: PUSH
14624: LD_OWVAR 2
14628: PPUSH
14629: LD_VAR 0 1
14633: PPUSH
14634: CALL_OW 81
14638: PUSH
14639: LD_INT 2
14641: EQUAL
14642: AND
14643: IFFALSE 14657
// begin side := i ;
14645: LD_ADDR_VAR 0 3
14649: PUSH
14650: LD_VAR 0 1
14654: ST_TO_ADDR
// break ;
14655: GO 14659
// end ;
14657: GO 14610
14659: POP
14660: POP
// if not side then
14661: LD_VAR 0 3
14665: NOT
14666: IFFALSE 14670
// exit ;
14668: GO 14715
// for i := 1 to tmp do
14670: LD_ADDR_VAR 0 1
14674: PUSH
14675: DOUBLE
14676: LD_INT 1
14678: DEC
14679: ST_TO_ADDR
14680: LD_VAR 0 2
14684: PUSH
14685: FOR_TO
14686: IFFALSE 14713
// if Prob ( 60 ) then
14688: LD_INT 60
14690: PPUSH
14691: CALL_OW 13
14695: IFFALSE 14711
// SetSide ( i , side ) ;
14697: LD_VAR 0 1
14701: PPUSH
14702: LD_VAR 0 3
14706: PPUSH
14707: CALL_OW 235
14711: GO 14685
14713: POP
14714: POP
// end ;
14715: PPOPN 3
14717: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14718: LD_EXP 23
14722: PUSH
14723: LD_EXP 36
14727: AND
14728: IFFALSE 14847
14730: GO 14732
14732: DISABLE
14733: LD_INT 0
14735: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14736: LD_ADDR_VAR 0 1
14740: PUSH
14741: LD_INT 22
14743: PUSH
14744: LD_OWVAR 2
14748: PUSH
14749: EMPTY
14750: LIST
14751: LIST
14752: PUSH
14753: LD_INT 21
14755: PUSH
14756: LD_INT 1
14758: PUSH
14759: EMPTY
14760: LIST
14761: LIST
14762: PUSH
14763: LD_INT 3
14765: PUSH
14766: LD_INT 23
14768: PUSH
14769: LD_INT 0
14771: PUSH
14772: EMPTY
14773: LIST
14774: LIST
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: PUSH
14780: EMPTY
14781: LIST
14782: LIST
14783: LIST
14784: PPUSH
14785: CALL_OW 69
14789: PUSH
14790: FOR_IN
14791: IFFALSE 14845
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14793: LD_VAR 0 1
14797: PPUSH
14798: CALL_OW 257
14802: PUSH
14803: LD_INT 1
14805: PUSH
14806: LD_INT 2
14808: PUSH
14809: LD_INT 3
14811: PUSH
14812: LD_INT 4
14814: PUSH
14815: EMPTY
14816: LIST
14817: LIST
14818: LIST
14819: LIST
14820: IN
14821: IFFALSE 14843
// SetClass ( un , rand ( 1 , 4 ) ) ;
14823: LD_VAR 0 1
14827: PPUSH
14828: LD_INT 1
14830: PPUSH
14831: LD_INT 4
14833: PPUSH
14834: CALL_OW 12
14838: PPUSH
14839: CALL_OW 336
14843: GO 14790
14845: POP
14846: POP
// end ;
14847: PPOPN 1
14849: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14850: LD_EXP 23
14854: PUSH
14855: LD_EXP 35
14859: AND
14860: IFFALSE 14939
14862: GO 14864
14864: DISABLE
14865: LD_INT 0
14867: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14868: LD_ADDR_VAR 0 1
14872: PUSH
14873: LD_INT 22
14875: PUSH
14876: LD_OWVAR 2
14880: PUSH
14881: EMPTY
14882: LIST
14883: LIST
14884: PUSH
14885: LD_INT 21
14887: PUSH
14888: LD_INT 3
14890: PUSH
14891: EMPTY
14892: LIST
14893: LIST
14894: PUSH
14895: EMPTY
14896: LIST
14897: LIST
14898: PPUSH
14899: CALL_OW 69
14903: ST_TO_ADDR
// if not tmp then
14904: LD_VAR 0 1
14908: NOT
14909: IFFALSE 14913
// exit ;
14911: GO 14939
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14913: LD_VAR 0 1
14917: PUSH
14918: LD_INT 1
14920: PPUSH
14921: LD_VAR 0 1
14925: PPUSH
14926: CALL_OW 12
14930: ARRAY
14931: PPUSH
14932: LD_INT 100
14934: PPUSH
14935: CALL_OW 234
// end ;
14939: PPOPN 1
14941: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14942: LD_EXP 23
14946: PUSH
14947: LD_EXP 37
14951: AND
14952: IFFALSE 15050
14954: GO 14956
14956: DISABLE
14957: LD_INT 0
14959: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14960: LD_ADDR_VAR 0 1
14964: PUSH
14965: LD_INT 22
14967: PUSH
14968: LD_OWVAR 2
14972: PUSH
14973: EMPTY
14974: LIST
14975: LIST
14976: PUSH
14977: LD_INT 21
14979: PUSH
14980: LD_INT 1
14982: PUSH
14983: EMPTY
14984: LIST
14985: LIST
14986: PUSH
14987: EMPTY
14988: LIST
14989: LIST
14990: PPUSH
14991: CALL_OW 69
14995: ST_TO_ADDR
// if not tmp then
14996: LD_VAR 0 1
15000: NOT
15001: IFFALSE 15005
// exit ;
15003: GO 15050
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15005: LD_VAR 0 1
15009: PUSH
15010: LD_INT 1
15012: PPUSH
15013: LD_VAR 0 1
15017: PPUSH
15018: CALL_OW 12
15022: ARRAY
15023: PPUSH
15024: LD_INT 1
15026: PPUSH
15027: LD_INT 4
15029: PPUSH
15030: CALL_OW 12
15034: PPUSH
15035: LD_INT 3000
15037: PPUSH
15038: LD_INT 9000
15040: PPUSH
15041: CALL_OW 12
15045: PPUSH
15046: CALL_OW 492
// end ;
15050: PPOPN 1
15052: END
// every 0 0$1 trigger StreamModeActive and sDepot do
15053: LD_EXP 23
15057: PUSH
15058: LD_EXP 38
15062: AND
15063: IFFALSE 15083
15065: GO 15067
15067: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
15068: LD_INT 1
15070: PPUSH
15071: LD_OWVAR 2
15075: PPUSH
15076: LD_INT 0
15078: PPUSH
15079: CALL_OW 324
15083: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
15084: LD_EXP 23
15088: PUSH
15089: LD_EXP 39
15093: AND
15094: IFFALSE 15177
15096: GO 15098
15098: DISABLE
15099: LD_INT 0
15101: PPUSH
15102: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15103: LD_ADDR_VAR 0 2
15107: PUSH
15108: LD_INT 22
15110: PUSH
15111: LD_OWVAR 2
15115: PUSH
15116: EMPTY
15117: LIST
15118: LIST
15119: PUSH
15120: LD_INT 21
15122: PUSH
15123: LD_INT 3
15125: PUSH
15126: EMPTY
15127: LIST
15128: LIST
15129: PUSH
15130: EMPTY
15131: LIST
15132: LIST
15133: PPUSH
15134: CALL_OW 69
15138: ST_TO_ADDR
// if not tmp then
15139: LD_VAR 0 2
15143: NOT
15144: IFFALSE 15148
// exit ;
15146: GO 15177
// for i in tmp do
15148: LD_ADDR_VAR 0 1
15152: PUSH
15153: LD_VAR 0 2
15157: PUSH
15158: FOR_IN
15159: IFFALSE 15175
// SetBLevel ( i , 10 ) ;
15161: LD_VAR 0 1
15165: PPUSH
15166: LD_INT 10
15168: PPUSH
15169: CALL_OW 241
15173: GO 15158
15175: POP
15176: POP
// end ;
15177: PPOPN 2
15179: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
15180: LD_EXP 23
15184: PUSH
15185: LD_EXP 40
15189: AND
15190: IFFALSE 15301
15192: GO 15194
15194: DISABLE
15195: LD_INT 0
15197: PPUSH
15198: PPUSH
15199: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15200: LD_ADDR_VAR 0 3
15204: PUSH
15205: LD_INT 22
15207: PUSH
15208: LD_OWVAR 2
15212: PUSH
15213: EMPTY
15214: LIST
15215: LIST
15216: PUSH
15217: LD_INT 25
15219: PUSH
15220: LD_INT 1
15222: PUSH
15223: EMPTY
15224: LIST
15225: LIST
15226: PUSH
15227: EMPTY
15228: LIST
15229: LIST
15230: PPUSH
15231: CALL_OW 69
15235: ST_TO_ADDR
// if not tmp then
15236: LD_VAR 0 3
15240: NOT
15241: IFFALSE 15245
// exit ;
15243: GO 15301
// un := tmp [ rand ( 1 , tmp ) ] ;
15245: LD_ADDR_VAR 0 2
15249: PUSH
15250: LD_VAR 0 3
15254: PUSH
15255: LD_INT 1
15257: PPUSH
15258: LD_VAR 0 3
15262: PPUSH
15263: CALL_OW 12
15267: ARRAY
15268: ST_TO_ADDR
// if Crawls ( un ) then
15269: LD_VAR 0 2
15273: PPUSH
15274: CALL_OW 318
15278: IFFALSE 15289
// ComWalk ( un ) ;
15280: LD_VAR 0 2
15284: PPUSH
15285: CALL_OW 138
// SetClass ( un , class_sniper ) ;
15289: LD_VAR 0 2
15293: PPUSH
15294: LD_INT 5
15296: PPUSH
15297: CALL_OW 336
// end ;
15301: PPOPN 3
15303: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
15304: LD_EXP 23
15308: PUSH
15309: LD_EXP 41
15313: AND
15314: PUSH
15315: LD_OWVAR 67
15319: PUSH
15320: LD_INT 4
15322: LESS
15323: AND
15324: IFFALSE 15343
15326: GO 15328
15328: DISABLE
// begin Difficulty := Difficulty + 1 ;
15329: LD_ADDR_OWVAR 67
15333: PUSH
15334: LD_OWVAR 67
15338: PUSH
15339: LD_INT 1
15341: PLUS
15342: ST_TO_ADDR
// end ;
15343: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
15344: LD_EXP 23
15348: PUSH
15349: LD_EXP 42
15353: AND
15354: IFFALSE 15457
15356: GO 15358
15358: DISABLE
15359: LD_INT 0
15361: PPUSH
// begin for i := 1 to 5 do
15362: LD_ADDR_VAR 0 1
15366: PUSH
15367: DOUBLE
15368: LD_INT 1
15370: DEC
15371: ST_TO_ADDR
15372: LD_INT 5
15374: PUSH
15375: FOR_TO
15376: IFFALSE 15455
// begin uc_nation := nation_nature ;
15378: LD_ADDR_OWVAR 21
15382: PUSH
15383: LD_INT 0
15385: ST_TO_ADDR
// uc_side := 0 ;
15386: LD_ADDR_OWVAR 20
15390: PUSH
15391: LD_INT 0
15393: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15394: LD_ADDR_OWVAR 29
15398: PUSH
15399: LD_INT 12
15401: PUSH
15402: LD_INT 12
15404: PUSH
15405: EMPTY
15406: LIST
15407: LIST
15408: ST_TO_ADDR
// hc_agressivity := 20 ;
15409: LD_ADDR_OWVAR 35
15413: PUSH
15414: LD_INT 20
15416: ST_TO_ADDR
// hc_class := class_tiger ;
15417: LD_ADDR_OWVAR 28
15421: PUSH
15422: LD_INT 14
15424: ST_TO_ADDR
// hc_gallery :=  ;
15425: LD_ADDR_OWVAR 33
15429: PUSH
15430: LD_STRING 
15432: ST_TO_ADDR
// hc_name :=  ;
15433: LD_ADDR_OWVAR 26
15437: PUSH
15438: LD_STRING 
15440: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15441: CALL_OW 44
15445: PPUSH
15446: LD_INT 0
15448: PPUSH
15449: CALL_OW 51
// end ;
15453: GO 15375
15455: POP
15456: POP
// end ;
15457: PPOPN 1
15459: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15460: LD_EXP 23
15464: PUSH
15465: LD_EXP 43
15469: AND
15470: IFFALSE 15479
15472: GO 15474
15474: DISABLE
// StreamSibBomb ;
15475: CALL 15480 0 0
15479: END
// export function StreamSibBomb ; var i , x , y ; begin
15480: LD_INT 0
15482: PPUSH
15483: PPUSH
15484: PPUSH
15485: PPUSH
// result := false ;
15486: LD_ADDR_VAR 0 1
15490: PUSH
15491: LD_INT 0
15493: ST_TO_ADDR
// for i := 1 to 16 do
15494: LD_ADDR_VAR 0 2
15498: PUSH
15499: DOUBLE
15500: LD_INT 1
15502: DEC
15503: ST_TO_ADDR
15504: LD_INT 16
15506: PUSH
15507: FOR_TO
15508: IFFALSE 15707
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15510: LD_ADDR_VAR 0 3
15514: PUSH
15515: LD_INT 10
15517: PUSH
15518: LD_INT 20
15520: PUSH
15521: LD_INT 30
15523: PUSH
15524: LD_INT 40
15526: PUSH
15527: LD_INT 50
15529: PUSH
15530: LD_INT 60
15532: PUSH
15533: LD_INT 70
15535: PUSH
15536: LD_INT 80
15538: PUSH
15539: LD_INT 90
15541: PUSH
15542: LD_INT 100
15544: PUSH
15545: LD_INT 110
15547: PUSH
15548: LD_INT 120
15550: PUSH
15551: LD_INT 130
15553: PUSH
15554: LD_INT 140
15556: PUSH
15557: LD_INT 150
15559: PUSH
15560: EMPTY
15561: LIST
15562: LIST
15563: LIST
15564: LIST
15565: LIST
15566: LIST
15567: LIST
15568: LIST
15569: LIST
15570: LIST
15571: LIST
15572: LIST
15573: LIST
15574: LIST
15575: LIST
15576: PUSH
15577: LD_INT 1
15579: PPUSH
15580: LD_INT 15
15582: PPUSH
15583: CALL_OW 12
15587: ARRAY
15588: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15589: LD_ADDR_VAR 0 4
15593: PUSH
15594: LD_INT 10
15596: PUSH
15597: LD_INT 20
15599: PUSH
15600: LD_INT 30
15602: PUSH
15603: LD_INT 40
15605: PUSH
15606: LD_INT 50
15608: PUSH
15609: LD_INT 60
15611: PUSH
15612: LD_INT 70
15614: PUSH
15615: LD_INT 80
15617: PUSH
15618: LD_INT 90
15620: PUSH
15621: LD_INT 100
15623: PUSH
15624: LD_INT 110
15626: PUSH
15627: LD_INT 120
15629: PUSH
15630: LD_INT 130
15632: PUSH
15633: LD_INT 140
15635: PUSH
15636: LD_INT 150
15638: PUSH
15639: EMPTY
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: LIST
15651: LIST
15652: LIST
15653: LIST
15654: LIST
15655: PUSH
15656: LD_INT 1
15658: PPUSH
15659: LD_INT 15
15661: PPUSH
15662: CALL_OW 12
15666: ARRAY
15667: ST_TO_ADDR
// if ValidHex ( x , y ) then
15668: LD_VAR 0 3
15672: PPUSH
15673: LD_VAR 0 4
15677: PPUSH
15678: CALL_OW 488
15682: IFFALSE 15705
// begin result := [ x , y ] ;
15684: LD_ADDR_VAR 0 1
15688: PUSH
15689: LD_VAR 0 3
15693: PUSH
15694: LD_VAR 0 4
15698: PUSH
15699: EMPTY
15700: LIST
15701: LIST
15702: ST_TO_ADDR
// break ;
15703: GO 15707
// end ; end ;
15705: GO 15507
15707: POP
15708: POP
// if result then
15709: LD_VAR 0 1
15713: IFFALSE 15773
// begin ToLua ( playSibBomb() ) ;
15715: LD_STRING playSibBomb()
15717: PPUSH
15718: CALL_OW 559
// wait ( 0 0$14 ) ;
15722: LD_INT 490
15724: PPUSH
15725: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15729: LD_VAR 0 1
15733: PUSH
15734: LD_INT 1
15736: ARRAY
15737: PPUSH
15738: LD_VAR 0 1
15742: PUSH
15743: LD_INT 2
15745: ARRAY
15746: PPUSH
15747: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15751: LD_VAR 0 1
15755: PUSH
15756: LD_INT 1
15758: ARRAY
15759: PPUSH
15760: LD_VAR 0 1
15764: PUSH
15765: LD_INT 2
15767: ARRAY
15768: PPUSH
15769: CALL_OW 429
// end ; end ;
15773: LD_VAR 0 1
15777: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15778: LD_EXP 23
15782: PUSH
15783: LD_EXP 45
15787: AND
15788: IFFALSE 15800
15790: GO 15792
15792: DISABLE
// YouLost (  ) ;
15793: LD_STRING 
15795: PPUSH
15796: CALL_OW 104
15800: END
// every 0 0$1 trigger StreamModeActive and sFog do
15801: LD_EXP 23
15805: PUSH
15806: LD_EXP 44
15810: AND
15811: IFFALSE 15825
15813: GO 15815
15815: DISABLE
// FogOff ( your_side ) ;
15816: LD_OWVAR 2
15820: PPUSH
15821: CALL_OW 344
15825: END
// every 0 0$1 trigger StreamModeActive and sSun do
15826: LD_EXP 23
15830: PUSH
15831: LD_EXP 46
15835: AND
15836: IFFALSE 15864
15838: GO 15840
15840: DISABLE
// begin solar_recharge_percent := 0 ;
15841: LD_ADDR_OWVAR 79
15845: PUSH
15846: LD_INT 0
15848: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15849: LD_INT 10500
15851: PPUSH
15852: CALL_OW 67
// solar_recharge_percent := 100 ;
15856: LD_ADDR_OWVAR 79
15860: PUSH
15861: LD_INT 100
15863: ST_TO_ADDR
// end ;
15864: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15865: LD_EXP 23
15869: PUSH
15870: LD_EXP 47
15874: AND
15875: IFFALSE 16114
15877: GO 15879
15879: DISABLE
15880: LD_INT 0
15882: PPUSH
15883: PPUSH
15884: PPUSH
// begin tmp := [ ] ;
15885: LD_ADDR_VAR 0 3
15889: PUSH
15890: EMPTY
15891: ST_TO_ADDR
// for i := 1 to 6 do
15892: LD_ADDR_VAR 0 1
15896: PUSH
15897: DOUBLE
15898: LD_INT 1
15900: DEC
15901: ST_TO_ADDR
15902: LD_INT 6
15904: PUSH
15905: FOR_TO
15906: IFFALSE 16011
// begin uc_nation := nation_nature ;
15908: LD_ADDR_OWVAR 21
15912: PUSH
15913: LD_INT 0
15915: ST_TO_ADDR
// uc_side := 0 ;
15916: LD_ADDR_OWVAR 20
15920: PUSH
15921: LD_INT 0
15923: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15924: LD_ADDR_OWVAR 29
15928: PUSH
15929: LD_INT 12
15931: PUSH
15932: LD_INT 12
15934: PUSH
15935: EMPTY
15936: LIST
15937: LIST
15938: ST_TO_ADDR
// hc_agressivity := 20 ;
15939: LD_ADDR_OWVAR 35
15943: PUSH
15944: LD_INT 20
15946: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15947: LD_ADDR_OWVAR 28
15951: PUSH
15952: LD_INT 17
15954: ST_TO_ADDR
// hc_gallery :=  ;
15955: LD_ADDR_OWVAR 33
15959: PUSH
15960: LD_STRING 
15962: ST_TO_ADDR
// hc_name :=  ;
15963: LD_ADDR_OWVAR 26
15967: PUSH
15968: LD_STRING 
15970: ST_TO_ADDR
// un := CreateHuman ;
15971: LD_ADDR_VAR 0 2
15975: PUSH
15976: CALL_OW 44
15980: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15981: LD_VAR 0 2
15985: PPUSH
15986: LD_INT 1
15988: PPUSH
15989: CALL_OW 51
// tmp := tmp ^ un ;
15993: LD_ADDR_VAR 0 3
15997: PUSH
15998: LD_VAR 0 3
16002: PUSH
16003: LD_VAR 0 2
16007: ADD
16008: ST_TO_ADDR
// end ;
16009: GO 15905
16011: POP
16012: POP
// repeat wait ( 0 0$1 ) ;
16013: LD_INT 35
16015: PPUSH
16016: CALL_OW 67
// for un in tmp do
16020: LD_ADDR_VAR 0 2
16024: PUSH
16025: LD_VAR 0 3
16029: PUSH
16030: FOR_IN
16031: IFFALSE 16105
// begin if IsDead ( un ) then
16033: LD_VAR 0 2
16037: PPUSH
16038: CALL_OW 301
16042: IFFALSE 16062
// begin tmp := tmp diff un ;
16044: LD_ADDR_VAR 0 3
16048: PUSH
16049: LD_VAR 0 3
16053: PUSH
16054: LD_VAR 0 2
16058: DIFF
16059: ST_TO_ADDR
// continue ;
16060: GO 16030
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
16062: LD_VAR 0 2
16066: PPUSH
16067: LD_INT 3
16069: PUSH
16070: LD_INT 22
16072: PUSH
16073: LD_INT 0
16075: PUSH
16076: EMPTY
16077: LIST
16078: LIST
16079: PUSH
16080: EMPTY
16081: LIST
16082: LIST
16083: PPUSH
16084: CALL_OW 69
16088: PPUSH
16089: LD_VAR 0 2
16093: PPUSH
16094: CALL_OW 74
16098: PPUSH
16099: CALL_OW 115
// end ;
16103: GO 16030
16105: POP
16106: POP
// until not tmp ;
16107: LD_VAR 0 3
16111: NOT
16112: IFFALSE 16013
// end ;
16114: PPOPN 3
16116: END
// every 0 0$1 trigger StreamModeActive and sTroll do
16117: LD_EXP 23
16121: PUSH
16122: LD_EXP 48
16126: AND
16127: IFFALSE 16181
16129: GO 16131
16131: DISABLE
// begin ToLua ( displayTroll(); ) ;
16132: LD_STRING displayTroll();
16134: PPUSH
16135: CALL_OW 559
// wait ( 3 3$00 ) ;
16139: LD_INT 6300
16141: PPUSH
16142: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16146: LD_STRING hideTroll();
16148: PPUSH
16149: CALL_OW 559
// wait ( 1 1$00 ) ;
16153: LD_INT 2100
16155: PPUSH
16156: CALL_OW 67
// ToLua ( displayTroll(); ) ;
16160: LD_STRING displayTroll();
16162: PPUSH
16163: CALL_OW 559
// wait ( 1 1$00 ) ;
16167: LD_INT 2100
16169: PPUSH
16170: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16174: LD_STRING hideTroll();
16176: PPUSH
16177: CALL_OW 559
// end ;
16181: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
16182: LD_EXP 23
16186: PUSH
16187: LD_EXP 49
16191: AND
16192: IFFALSE 16255
16194: GO 16196
16196: DISABLE
16197: LD_INT 0
16199: PPUSH
// begin p := 0 ;
16200: LD_ADDR_VAR 0 1
16204: PUSH
16205: LD_INT 0
16207: ST_TO_ADDR
// repeat game_speed := 1 ;
16208: LD_ADDR_OWVAR 65
16212: PUSH
16213: LD_INT 1
16215: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16216: LD_INT 35
16218: PPUSH
16219: CALL_OW 67
// p := p + 1 ;
16223: LD_ADDR_VAR 0 1
16227: PUSH
16228: LD_VAR 0 1
16232: PUSH
16233: LD_INT 1
16235: PLUS
16236: ST_TO_ADDR
// until p >= 60 ;
16237: LD_VAR 0 1
16241: PUSH
16242: LD_INT 60
16244: GREATEREQUAL
16245: IFFALSE 16208
// game_speed := 4 ;
16247: LD_ADDR_OWVAR 65
16251: PUSH
16252: LD_INT 4
16254: ST_TO_ADDR
// end ;
16255: PPOPN 1
16257: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16258: LD_EXP 23
16262: PUSH
16263: LD_EXP 50
16267: AND
16268: IFFALSE 16414
16270: GO 16272
16272: DISABLE
16273: LD_INT 0
16275: PPUSH
16276: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16277: LD_ADDR_VAR 0 1
16281: PUSH
16282: LD_INT 22
16284: PUSH
16285: LD_OWVAR 2
16289: PUSH
16290: EMPTY
16291: LIST
16292: LIST
16293: PUSH
16294: LD_INT 2
16296: PUSH
16297: LD_INT 30
16299: PUSH
16300: LD_INT 0
16302: PUSH
16303: EMPTY
16304: LIST
16305: LIST
16306: PUSH
16307: LD_INT 30
16309: PUSH
16310: LD_INT 1
16312: PUSH
16313: EMPTY
16314: LIST
16315: LIST
16316: PUSH
16317: EMPTY
16318: LIST
16319: LIST
16320: LIST
16321: PUSH
16322: EMPTY
16323: LIST
16324: LIST
16325: PPUSH
16326: CALL_OW 69
16330: ST_TO_ADDR
// if not depot then
16331: LD_VAR 0 1
16335: NOT
16336: IFFALSE 16340
// exit ;
16338: GO 16414
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
16340: LD_ADDR_VAR 0 2
16344: PUSH
16345: LD_VAR 0 1
16349: PUSH
16350: LD_INT 1
16352: PPUSH
16353: LD_VAR 0 1
16357: PPUSH
16358: CALL_OW 12
16362: ARRAY
16363: PPUSH
16364: CALL_OW 274
16368: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16369: LD_VAR 0 2
16373: PPUSH
16374: LD_INT 1
16376: PPUSH
16377: LD_INT 0
16379: PPUSH
16380: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16384: LD_VAR 0 2
16388: PPUSH
16389: LD_INT 2
16391: PPUSH
16392: LD_INT 0
16394: PPUSH
16395: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16399: LD_VAR 0 2
16403: PPUSH
16404: LD_INT 3
16406: PPUSH
16407: LD_INT 0
16409: PPUSH
16410: CALL_OW 277
// end ;
16414: PPOPN 2
16416: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16417: LD_EXP 23
16421: PUSH
16422: LD_EXP 51
16426: AND
16427: IFFALSE 16524
16429: GO 16431
16431: DISABLE
16432: LD_INT 0
16434: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16435: LD_ADDR_VAR 0 1
16439: PUSH
16440: LD_INT 22
16442: PUSH
16443: LD_OWVAR 2
16447: PUSH
16448: EMPTY
16449: LIST
16450: LIST
16451: PUSH
16452: LD_INT 21
16454: PUSH
16455: LD_INT 1
16457: PUSH
16458: EMPTY
16459: LIST
16460: LIST
16461: PUSH
16462: LD_INT 3
16464: PUSH
16465: LD_INT 23
16467: PUSH
16468: LD_INT 0
16470: PUSH
16471: EMPTY
16472: LIST
16473: LIST
16474: PUSH
16475: EMPTY
16476: LIST
16477: LIST
16478: PUSH
16479: EMPTY
16480: LIST
16481: LIST
16482: LIST
16483: PPUSH
16484: CALL_OW 69
16488: ST_TO_ADDR
// if not tmp then
16489: LD_VAR 0 1
16493: NOT
16494: IFFALSE 16498
// exit ;
16496: GO 16524
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16498: LD_VAR 0 1
16502: PUSH
16503: LD_INT 1
16505: PPUSH
16506: LD_VAR 0 1
16510: PPUSH
16511: CALL_OW 12
16515: ARRAY
16516: PPUSH
16517: LD_INT 200
16519: PPUSH
16520: CALL_OW 234
// end ;
16524: PPOPN 1
16526: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16527: LD_EXP 23
16531: PUSH
16532: LD_EXP 52
16536: AND
16537: IFFALSE 16616
16539: GO 16541
16541: DISABLE
16542: LD_INT 0
16544: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16545: LD_ADDR_VAR 0 1
16549: PUSH
16550: LD_INT 22
16552: PUSH
16553: LD_OWVAR 2
16557: PUSH
16558: EMPTY
16559: LIST
16560: LIST
16561: PUSH
16562: LD_INT 21
16564: PUSH
16565: LD_INT 2
16567: PUSH
16568: EMPTY
16569: LIST
16570: LIST
16571: PUSH
16572: EMPTY
16573: LIST
16574: LIST
16575: PPUSH
16576: CALL_OW 69
16580: ST_TO_ADDR
// if not tmp then
16581: LD_VAR 0 1
16585: NOT
16586: IFFALSE 16590
// exit ;
16588: GO 16616
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16590: LD_VAR 0 1
16594: PUSH
16595: LD_INT 1
16597: PPUSH
16598: LD_VAR 0 1
16602: PPUSH
16603: CALL_OW 12
16607: ARRAY
16608: PPUSH
16609: LD_INT 60
16611: PPUSH
16612: CALL_OW 234
// end ;
16616: PPOPN 1
16618: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16619: LD_EXP 23
16623: PUSH
16624: LD_EXP 53
16628: AND
16629: IFFALSE 16728
16631: GO 16633
16633: DISABLE
16634: LD_INT 0
16636: PPUSH
16637: PPUSH
// begin enable ;
16638: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16639: LD_ADDR_VAR 0 1
16643: PUSH
16644: LD_INT 22
16646: PUSH
16647: LD_OWVAR 2
16651: PUSH
16652: EMPTY
16653: LIST
16654: LIST
16655: PUSH
16656: LD_INT 61
16658: PUSH
16659: EMPTY
16660: LIST
16661: PUSH
16662: LD_INT 33
16664: PUSH
16665: LD_INT 2
16667: PUSH
16668: EMPTY
16669: LIST
16670: LIST
16671: PUSH
16672: EMPTY
16673: LIST
16674: LIST
16675: LIST
16676: PPUSH
16677: CALL_OW 69
16681: ST_TO_ADDR
// if not tmp then
16682: LD_VAR 0 1
16686: NOT
16687: IFFALSE 16691
// exit ;
16689: GO 16728
// for i in tmp do
16691: LD_ADDR_VAR 0 2
16695: PUSH
16696: LD_VAR 0 1
16700: PUSH
16701: FOR_IN
16702: IFFALSE 16726
// if IsControledBy ( i ) then
16704: LD_VAR 0 2
16708: PPUSH
16709: CALL_OW 312
16713: IFFALSE 16724
// ComUnlink ( i ) ;
16715: LD_VAR 0 2
16719: PPUSH
16720: CALL_OW 136
16724: GO 16701
16726: POP
16727: POP
// end ;
16728: PPOPN 2
16730: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16731: LD_EXP 23
16735: PUSH
16736: LD_EXP 54
16740: AND
16741: IFFALSE 16881
16743: GO 16745
16745: DISABLE
16746: LD_INT 0
16748: PPUSH
16749: PPUSH
// begin ToLua ( displayPowell(); ) ;
16750: LD_STRING displayPowell();
16752: PPUSH
16753: CALL_OW 559
// uc_side := 0 ;
16757: LD_ADDR_OWVAR 20
16761: PUSH
16762: LD_INT 0
16764: ST_TO_ADDR
// uc_nation := 2 ;
16765: LD_ADDR_OWVAR 21
16769: PUSH
16770: LD_INT 2
16772: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16773: LD_ADDR_OWVAR 37
16777: PUSH
16778: LD_INT 14
16780: ST_TO_ADDR
// vc_engine := engine_siberite ;
16781: LD_ADDR_OWVAR 39
16785: PUSH
16786: LD_INT 3
16788: ST_TO_ADDR
// vc_control := control_apeman ;
16789: LD_ADDR_OWVAR 38
16793: PUSH
16794: LD_INT 5
16796: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16797: LD_ADDR_OWVAR 40
16801: PUSH
16802: LD_INT 29
16804: ST_TO_ADDR
// un := CreateVehicle ;
16805: LD_ADDR_VAR 0 2
16809: PUSH
16810: CALL_OW 45
16814: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16815: LD_VAR 0 2
16819: PPUSH
16820: LD_INT 1
16822: PPUSH
16823: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16827: LD_INT 35
16829: PPUSH
16830: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16834: LD_VAR 0 2
16838: PPUSH
16839: LD_INT 22
16841: PUSH
16842: LD_OWVAR 2
16846: PUSH
16847: EMPTY
16848: LIST
16849: LIST
16850: PPUSH
16851: CALL_OW 69
16855: PPUSH
16856: LD_VAR 0 2
16860: PPUSH
16861: CALL_OW 74
16865: PPUSH
16866: CALL_OW 115
// until IsDead ( un ) ;
16870: LD_VAR 0 2
16874: PPUSH
16875: CALL_OW 301
16879: IFFALSE 16827
// end ;
16881: PPOPN 2
16883: END
// every 0 0$1 trigger StreamModeActive and sStu do
16884: LD_EXP 23
16888: PUSH
16889: LD_EXP 62
16893: AND
16894: IFFALSE 16910
16896: GO 16898
16898: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16899: LD_STRING displayStucuk();
16901: PPUSH
16902: CALL_OW 559
// ResetFog ;
16906: CALL_OW 335
// end ;
16910: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16911: LD_EXP 23
16915: PUSH
16916: LD_EXP 55
16920: AND
16921: IFFALSE 17062
16923: GO 16925
16925: DISABLE
16926: LD_INT 0
16928: PPUSH
16929: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16930: LD_ADDR_VAR 0 2
16934: PUSH
16935: LD_INT 22
16937: PUSH
16938: LD_OWVAR 2
16942: PUSH
16943: EMPTY
16944: LIST
16945: LIST
16946: PUSH
16947: LD_INT 21
16949: PUSH
16950: LD_INT 1
16952: PUSH
16953: EMPTY
16954: LIST
16955: LIST
16956: PUSH
16957: EMPTY
16958: LIST
16959: LIST
16960: PPUSH
16961: CALL_OW 69
16965: ST_TO_ADDR
// if not tmp then
16966: LD_VAR 0 2
16970: NOT
16971: IFFALSE 16975
// exit ;
16973: GO 17062
// un := tmp [ rand ( 1 , tmp ) ] ;
16975: LD_ADDR_VAR 0 1
16979: PUSH
16980: LD_VAR 0 2
16984: PUSH
16985: LD_INT 1
16987: PPUSH
16988: LD_VAR 0 2
16992: PPUSH
16993: CALL_OW 12
16997: ARRAY
16998: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16999: LD_VAR 0 1
17003: PPUSH
17004: LD_INT 0
17006: PPUSH
17007: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17011: LD_VAR 0 1
17015: PPUSH
17016: LD_OWVAR 3
17020: PUSH
17021: LD_VAR 0 1
17025: DIFF
17026: PPUSH
17027: LD_VAR 0 1
17031: PPUSH
17032: CALL_OW 74
17036: PPUSH
17037: CALL_OW 115
// wait ( 0 0$20 ) ;
17041: LD_INT 700
17043: PPUSH
17044: CALL_OW 67
// SetSide ( un , your_side ) ;
17048: LD_VAR 0 1
17052: PPUSH
17053: LD_OWVAR 2
17057: PPUSH
17058: CALL_OW 235
// end ;
17062: PPOPN 2
17064: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
17065: LD_EXP 23
17069: PUSH
17070: LD_EXP 56
17074: AND
17075: IFFALSE 17181
17077: GO 17079
17079: DISABLE
17080: LD_INT 0
17082: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17083: LD_ADDR_VAR 0 1
17087: PUSH
17088: LD_INT 22
17090: PUSH
17091: LD_OWVAR 2
17095: PUSH
17096: EMPTY
17097: LIST
17098: LIST
17099: PUSH
17100: LD_INT 2
17102: PUSH
17103: LD_INT 30
17105: PUSH
17106: LD_INT 0
17108: PUSH
17109: EMPTY
17110: LIST
17111: LIST
17112: PUSH
17113: LD_INT 30
17115: PUSH
17116: LD_INT 1
17118: PUSH
17119: EMPTY
17120: LIST
17121: LIST
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: LIST
17127: PUSH
17128: EMPTY
17129: LIST
17130: LIST
17131: PPUSH
17132: CALL_OW 69
17136: ST_TO_ADDR
// if not depot then
17137: LD_VAR 0 1
17141: NOT
17142: IFFALSE 17146
// exit ;
17144: GO 17181
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
17146: LD_VAR 0 1
17150: PUSH
17151: LD_INT 1
17153: ARRAY
17154: PPUSH
17155: CALL_OW 250
17159: PPUSH
17160: LD_VAR 0 1
17164: PUSH
17165: LD_INT 1
17167: ARRAY
17168: PPUSH
17169: CALL_OW 251
17173: PPUSH
17174: LD_INT 70
17176: PPUSH
17177: CALL_OW 495
// end ;
17181: PPOPN 1
17183: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
17184: LD_EXP 23
17188: PUSH
17189: LD_EXP 57
17193: AND
17194: IFFALSE 17405
17196: GO 17198
17198: DISABLE
17199: LD_INT 0
17201: PPUSH
17202: PPUSH
17203: PPUSH
17204: PPUSH
17205: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17206: LD_ADDR_VAR 0 5
17210: PUSH
17211: LD_INT 22
17213: PUSH
17214: LD_OWVAR 2
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: PUSH
17223: LD_INT 21
17225: PUSH
17226: LD_INT 1
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: PPUSH
17237: CALL_OW 69
17241: ST_TO_ADDR
// if not tmp then
17242: LD_VAR 0 5
17246: NOT
17247: IFFALSE 17251
// exit ;
17249: GO 17405
// for i in tmp do
17251: LD_ADDR_VAR 0 1
17255: PUSH
17256: LD_VAR 0 5
17260: PUSH
17261: FOR_IN
17262: IFFALSE 17403
// begin d := rand ( 0 , 5 ) ;
17264: LD_ADDR_VAR 0 4
17268: PUSH
17269: LD_INT 0
17271: PPUSH
17272: LD_INT 5
17274: PPUSH
17275: CALL_OW 12
17279: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
17280: LD_ADDR_VAR 0 2
17284: PUSH
17285: LD_VAR 0 1
17289: PPUSH
17290: CALL_OW 250
17294: PPUSH
17295: LD_VAR 0 4
17299: PPUSH
17300: LD_INT 3
17302: PPUSH
17303: LD_INT 12
17305: PPUSH
17306: CALL_OW 12
17310: PPUSH
17311: CALL_OW 272
17315: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
17316: LD_ADDR_VAR 0 3
17320: PUSH
17321: LD_VAR 0 1
17325: PPUSH
17326: CALL_OW 251
17330: PPUSH
17331: LD_VAR 0 4
17335: PPUSH
17336: LD_INT 3
17338: PPUSH
17339: LD_INT 12
17341: PPUSH
17342: CALL_OW 12
17346: PPUSH
17347: CALL_OW 273
17351: ST_TO_ADDR
// if ValidHex ( x , y ) then
17352: LD_VAR 0 2
17356: PPUSH
17357: LD_VAR 0 3
17361: PPUSH
17362: CALL_OW 488
17366: IFFALSE 17401
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17368: LD_VAR 0 1
17372: PPUSH
17373: LD_VAR 0 2
17377: PPUSH
17378: LD_VAR 0 3
17382: PPUSH
17383: LD_INT 3
17385: PPUSH
17386: LD_INT 6
17388: PPUSH
17389: CALL_OW 12
17393: PPUSH
17394: LD_INT 1
17396: PPUSH
17397: CALL_OW 483
// end ;
17401: GO 17261
17403: POP
17404: POP
// end ;
17405: PPOPN 5
17407: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17408: LD_EXP 23
17412: PUSH
17413: LD_EXP 58
17417: AND
17418: IFFALSE 17512
17420: GO 17422
17422: DISABLE
17423: LD_INT 0
17425: PPUSH
17426: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17427: LD_ADDR_VAR 0 2
17431: PUSH
17432: LD_INT 22
17434: PUSH
17435: LD_OWVAR 2
17439: PUSH
17440: EMPTY
17441: LIST
17442: LIST
17443: PUSH
17444: LD_INT 32
17446: PUSH
17447: LD_INT 1
17449: PUSH
17450: EMPTY
17451: LIST
17452: LIST
17453: PUSH
17454: LD_INT 21
17456: PUSH
17457: LD_INT 2
17459: PUSH
17460: EMPTY
17461: LIST
17462: LIST
17463: PUSH
17464: EMPTY
17465: LIST
17466: LIST
17467: LIST
17468: PPUSH
17469: CALL_OW 69
17473: ST_TO_ADDR
// if not tmp then
17474: LD_VAR 0 2
17478: NOT
17479: IFFALSE 17483
// exit ;
17481: GO 17512
// for i in tmp do
17483: LD_ADDR_VAR 0 1
17487: PUSH
17488: LD_VAR 0 2
17492: PUSH
17493: FOR_IN
17494: IFFALSE 17510
// SetFuel ( i , 0 ) ;
17496: LD_VAR 0 1
17500: PPUSH
17501: LD_INT 0
17503: PPUSH
17504: CALL_OW 240
17508: GO 17493
17510: POP
17511: POP
// end ;
17512: PPOPN 2
17514: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17515: LD_EXP 23
17519: PUSH
17520: LD_EXP 59
17524: AND
17525: IFFALSE 17591
17527: GO 17529
17529: DISABLE
17530: LD_INT 0
17532: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17533: LD_ADDR_VAR 0 1
17537: PUSH
17538: LD_INT 22
17540: PUSH
17541: LD_OWVAR 2
17545: PUSH
17546: EMPTY
17547: LIST
17548: LIST
17549: PUSH
17550: LD_INT 30
17552: PUSH
17553: LD_INT 29
17555: PUSH
17556: EMPTY
17557: LIST
17558: LIST
17559: PUSH
17560: EMPTY
17561: LIST
17562: LIST
17563: PPUSH
17564: CALL_OW 69
17568: ST_TO_ADDR
// if not tmp then
17569: LD_VAR 0 1
17573: NOT
17574: IFFALSE 17578
// exit ;
17576: GO 17591
// DestroyUnit ( tmp [ 1 ] ) ;
17578: LD_VAR 0 1
17582: PUSH
17583: LD_INT 1
17585: ARRAY
17586: PPUSH
17587: CALL_OW 65
// end ;
17591: PPOPN 1
17593: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17594: LD_EXP 23
17598: PUSH
17599: LD_EXP 61
17603: AND
17604: IFFALSE 17733
17606: GO 17608
17608: DISABLE
17609: LD_INT 0
17611: PPUSH
// begin uc_side := 0 ;
17612: LD_ADDR_OWVAR 20
17616: PUSH
17617: LD_INT 0
17619: ST_TO_ADDR
// uc_nation := nation_arabian ;
17620: LD_ADDR_OWVAR 21
17624: PUSH
17625: LD_INT 2
17627: ST_TO_ADDR
// hc_gallery :=  ;
17628: LD_ADDR_OWVAR 33
17632: PUSH
17633: LD_STRING 
17635: ST_TO_ADDR
// hc_name :=  ;
17636: LD_ADDR_OWVAR 26
17640: PUSH
17641: LD_STRING 
17643: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17644: LD_INT 1
17646: PPUSH
17647: LD_INT 11
17649: PPUSH
17650: LD_INT 10
17652: PPUSH
17653: CALL_OW 380
// un := CreateHuman ;
17657: LD_ADDR_VAR 0 1
17661: PUSH
17662: CALL_OW 44
17666: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17667: LD_VAR 0 1
17671: PPUSH
17672: LD_INT 1
17674: PPUSH
17675: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17679: LD_INT 35
17681: PPUSH
17682: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17686: LD_VAR 0 1
17690: PPUSH
17691: LD_INT 22
17693: PUSH
17694: LD_OWVAR 2
17698: PUSH
17699: EMPTY
17700: LIST
17701: LIST
17702: PPUSH
17703: CALL_OW 69
17707: PPUSH
17708: LD_VAR 0 1
17712: PPUSH
17713: CALL_OW 74
17717: PPUSH
17718: CALL_OW 115
// until IsDead ( un ) ;
17722: LD_VAR 0 1
17726: PPUSH
17727: CALL_OW 301
17731: IFFALSE 17679
// end ;
17733: PPOPN 1
17735: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17736: LD_EXP 23
17740: PUSH
17741: LD_EXP 63
17745: AND
17746: IFFALSE 17758
17748: GO 17750
17750: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17751: LD_STRING earthquake(getX(game), 0, 32)
17753: PPUSH
17754: CALL_OW 559
17758: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17759: LD_EXP 23
17763: PUSH
17764: LD_EXP 64
17768: AND
17769: IFFALSE 17860
17771: GO 17773
17773: DISABLE
17774: LD_INT 0
17776: PPUSH
// begin enable ;
17777: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17778: LD_ADDR_VAR 0 1
17782: PUSH
17783: LD_INT 22
17785: PUSH
17786: LD_OWVAR 2
17790: PUSH
17791: EMPTY
17792: LIST
17793: LIST
17794: PUSH
17795: LD_INT 21
17797: PUSH
17798: LD_INT 2
17800: PUSH
17801: EMPTY
17802: LIST
17803: LIST
17804: PUSH
17805: LD_INT 33
17807: PUSH
17808: LD_INT 3
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: PUSH
17815: EMPTY
17816: LIST
17817: LIST
17818: LIST
17819: PPUSH
17820: CALL_OW 69
17824: ST_TO_ADDR
// if not tmp then
17825: LD_VAR 0 1
17829: NOT
17830: IFFALSE 17834
// exit ;
17832: GO 17860
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17834: LD_VAR 0 1
17838: PUSH
17839: LD_INT 1
17841: PPUSH
17842: LD_VAR 0 1
17846: PPUSH
17847: CALL_OW 12
17851: ARRAY
17852: PPUSH
17853: LD_INT 1
17855: PPUSH
17856: CALL_OW 234
// end ;
17860: PPOPN 1
17862: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17863: LD_EXP 23
17867: PUSH
17868: LD_EXP 65
17872: AND
17873: IFFALSE 18014
17875: GO 17877
17877: DISABLE
17878: LD_INT 0
17880: PPUSH
17881: PPUSH
17882: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17883: LD_ADDR_VAR 0 3
17887: PUSH
17888: LD_INT 22
17890: PUSH
17891: LD_OWVAR 2
17895: PUSH
17896: EMPTY
17897: LIST
17898: LIST
17899: PUSH
17900: LD_INT 25
17902: PUSH
17903: LD_INT 1
17905: PUSH
17906: EMPTY
17907: LIST
17908: LIST
17909: PUSH
17910: EMPTY
17911: LIST
17912: LIST
17913: PPUSH
17914: CALL_OW 69
17918: ST_TO_ADDR
// if not tmp then
17919: LD_VAR 0 3
17923: NOT
17924: IFFALSE 17928
// exit ;
17926: GO 18014
// un := tmp [ rand ( 1 , tmp ) ] ;
17928: LD_ADDR_VAR 0 2
17932: PUSH
17933: LD_VAR 0 3
17937: PUSH
17938: LD_INT 1
17940: PPUSH
17941: LD_VAR 0 3
17945: PPUSH
17946: CALL_OW 12
17950: ARRAY
17951: ST_TO_ADDR
// if Crawls ( un ) then
17952: LD_VAR 0 2
17956: PPUSH
17957: CALL_OW 318
17961: IFFALSE 17972
// ComWalk ( un ) ;
17963: LD_VAR 0 2
17967: PPUSH
17968: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17972: LD_VAR 0 2
17976: PPUSH
17977: LD_INT 9
17979: PPUSH
17980: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17984: LD_INT 28
17986: PPUSH
17987: LD_OWVAR 2
17991: PPUSH
17992: LD_INT 2
17994: PPUSH
17995: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17999: LD_INT 29
18001: PPUSH
18002: LD_OWVAR 2
18006: PPUSH
18007: LD_INT 2
18009: PPUSH
18010: CALL_OW 322
// end ;
18014: PPOPN 3
18016: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18017: LD_EXP 23
18021: PUSH
18022: LD_EXP 66
18026: AND
18027: IFFALSE 18138
18029: GO 18031
18031: DISABLE
18032: LD_INT 0
18034: PPUSH
18035: PPUSH
18036: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18037: LD_ADDR_VAR 0 3
18041: PUSH
18042: LD_INT 22
18044: PUSH
18045: LD_OWVAR 2
18049: PUSH
18050: EMPTY
18051: LIST
18052: LIST
18053: PUSH
18054: LD_INT 25
18056: PUSH
18057: LD_INT 1
18059: PUSH
18060: EMPTY
18061: LIST
18062: LIST
18063: PUSH
18064: EMPTY
18065: LIST
18066: LIST
18067: PPUSH
18068: CALL_OW 69
18072: ST_TO_ADDR
// if not tmp then
18073: LD_VAR 0 3
18077: NOT
18078: IFFALSE 18082
// exit ;
18080: GO 18138
// un := tmp [ rand ( 1 , tmp ) ] ;
18082: LD_ADDR_VAR 0 2
18086: PUSH
18087: LD_VAR 0 3
18091: PUSH
18092: LD_INT 1
18094: PPUSH
18095: LD_VAR 0 3
18099: PPUSH
18100: CALL_OW 12
18104: ARRAY
18105: ST_TO_ADDR
// if Crawls ( un ) then
18106: LD_VAR 0 2
18110: PPUSH
18111: CALL_OW 318
18115: IFFALSE 18126
// ComWalk ( un ) ;
18117: LD_VAR 0 2
18121: PPUSH
18122: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18126: LD_VAR 0 2
18130: PPUSH
18131: LD_INT 8
18133: PPUSH
18134: CALL_OW 336
// end ;
18138: PPOPN 3
18140: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
18141: LD_EXP 23
18145: PUSH
18146: LD_EXP 67
18150: AND
18151: IFFALSE 18295
18153: GO 18155
18155: DISABLE
18156: LD_INT 0
18158: PPUSH
18159: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
18160: LD_ADDR_VAR 0 2
18164: PUSH
18165: LD_INT 22
18167: PUSH
18168: LD_OWVAR 2
18172: PUSH
18173: EMPTY
18174: LIST
18175: LIST
18176: PUSH
18177: LD_INT 21
18179: PUSH
18180: LD_INT 2
18182: PUSH
18183: EMPTY
18184: LIST
18185: LIST
18186: PUSH
18187: LD_INT 2
18189: PUSH
18190: LD_INT 34
18192: PUSH
18193: LD_INT 12
18195: PUSH
18196: EMPTY
18197: LIST
18198: LIST
18199: PUSH
18200: LD_INT 34
18202: PUSH
18203: LD_INT 51
18205: PUSH
18206: EMPTY
18207: LIST
18208: LIST
18209: PUSH
18210: LD_INT 34
18212: PUSH
18213: LD_INT 32
18215: PUSH
18216: EMPTY
18217: LIST
18218: LIST
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: LIST
18224: LIST
18225: PUSH
18226: EMPTY
18227: LIST
18228: LIST
18229: LIST
18230: PPUSH
18231: CALL_OW 69
18235: ST_TO_ADDR
// if not tmp then
18236: LD_VAR 0 2
18240: NOT
18241: IFFALSE 18245
// exit ;
18243: GO 18295
// for i in tmp do
18245: LD_ADDR_VAR 0 1
18249: PUSH
18250: LD_VAR 0 2
18254: PUSH
18255: FOR_IN
18256: IFFALSE 18293
// if GetCargo ( i , mat_artifact ) = 0 then
18258: LD_VAR 0 1
18262: PPUSH
18263: LD_INT 4
18265: PPUSH
18266: CALL_OW 289
18270: PUSH
18271: LD_INT 0
18273: EQUAL
18274: IFFALSE 18291
// SetCargo ( i , mat_siberit , 100 ) ;
18276: LD_VAR 0 1
18280: PPUSH
18281: LD_INT 3
18283: PPUSH
18284: LD_INT 100
18286: PPUSH
18287: CALL_OW 290
18291: GO 18255
18293: POP
18294: POP
// end ;
18295: PPOPN 2
18297: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
18298: LD_EXP 23
18302: PUSH
18303: LD_EXP 68
18307: AND
18308: IFFALSE 18491
18310: GO 18312
18312: DISABLE
18313: LD_INT 0
18315: PPUSH
18316: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18317: LD_ADDR_VAR 0 2
18321: PUSH
18322: LD_INT 22
18324: PUSH
18325: LD_OWVAR 2
18329: PUSH
18330: EMPTY
18331: LIST
18332: LIST
18333: PPUSH
18334: CALL_OW 69
18338: ST_TO_ADDR
// if not tmp then
18339: LD_VAR 0 2
18343: NOT
18344: IFFALSE 18348
// exit ;
18346: GO 18491
// for i := 1 to 2 do
18348: LD_ADDR_VAR 0 1
18352: PUSH
18353: DOUBLE
18354: LD_INT 1
18356: DEC
18357: ST_TO_ADDR
18358: LD_INT 2
18360: PUSH
18361: FOR_TO
18362: IFFALSE 18489
// begin uc_side := your_side ;
18364: LD_ADDR_OWVAR 20
18368: PUSH
18369: LD_OWVAR 2
18373: ST_TO_ADDR
// uc_nation := nation_american ;
18374: LD_ADDR_OWVAR 21
18378: PUSH
18379: LD_INT 1
18381: ST_TO_ADDR
// vc_chassis := us_morphling ;
18382: LD_ADDR_OWVAR 37
18386: PUSH
18387: LD_INT 5
18389: ST_TO_ADDR
// vc_engine := engine_siberite ;
18390: LD_ADDR_OWVAR 39
18394: PUSH
18395: LD_INT 3
18397: ST_TO_ADDR
// vc_control := control_computer ;
18398: LD_ADDR_OWVAR 38
18402: PUSH
18403: LD_INT 3
18405: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18406: LD_ADDR_OWVAR 40
18410: PUSH
18411: LD_INT 10
18413: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
18414: LD_VAR 0 2
18418: PUSH
18419: LD_INT 1
18421: ARRAY
18422: PPUSH
18423: CALL_OW 310
18427: NOT
18428: IFFALSE 18475
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
18430: CALL_OW 45
18434: PPUSH
18435: LD_VAR 0 2
18439: PUSH
18440: LD_INT 1
18442: ARRAY
18443: PPUSH
18444: CALL_OW 250
18448: PPUSH
18449: LD_VAR 0 2
18453: PUSH
18454: LD_INT 1
18456: ARRAY
18457: PPUSH
18458: CALL_OW 251
18462: PPUSH
18463: LD_INT 12
18465: PPUSH
18466: LD_INT 1
18468: PPUSH
18469: CALL_OW 50
18473: GO 18487
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18475: CALL_OW 45
18479: PPUSH
18480: LD_INT 1
18482: PPUSH
18483: CALL_OW 51
// end ;
18487: GO 18361
18489: POP
18490: POP
// end ;
18491: PPOPN 2
18493: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18494: LD_EXP 23
18498: PUSH
18499: LD_EXP 69
18503: AND
18504: IFFALSE 18726
18506: GO 18508
18508: DISABLE
18509: LD_INT 0
18511: PPUSH
18512: PPUSH
18513: PPUSH
18514: PPUSH
18515: PPUSH
18516: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18517: LD_ADDR_VAR 0 6
18521: PUSH
18522: LD_INT 22
18524: PUSH
18525: LD_OWVAR 2
18529: PUSH
18530: EMPTY
18531: LIST
18532: LIST
18533: PUSH
18534: LD_INT 21
18536: PUSH
18537: LD_INT 1
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: PUSH
18544: LD_INT 3
18546: PUSH
18547: LD_INT 23
18549: PUSH
18550: LD_INT 0
18552: PUSH
18553: EMPTY
18554: LIST
18555: LIST
18556: PUSH
18557: EMPTY
18558: LIST
18559: LIST
18560: PUSH
18561: EMPTY
18562: LIST
18563: LIST
18564: LIST
18565: PPUSH
18566: CALL_OW 69
18570: ST_TO_ADDR
// if not tmp then
18571: LD_VAR 0 6
18575: NOT
18576: IFFALSE 18580
// exit ;
18578: GO 18726
// s1 := rand ( 1 , 4 ) ;
18580: LD_ADDR_VAR 0 2
18584: PUSH
18585: LD_INT 1
18587: PPUSH
18588: LD_INT 4
18590: PPUSH
18591: CALL_OW 12
18595: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18596: LD_ADDR_VAR 0 4
18600: PUSH
18601: LD_VAR 0 6
18605: PUSH
18606: LD_INT 1
18608: ARRAY
18609: PPUSH
18610: LD_VAR 0 2
18614: PPUSH
18615: CALL_OW 259
18619: ST_TO_ADDR
// if s1 = 1 then
18620: LD_VAR 0 2
18624: PUSH
18625: LD_INT 1
18627: EQUAL
18628: IFFALSE 18648
// s2 := rand ( 2 , 4 ) else
18630: LD_ADDR_VAR 0 3
18634: PUSH
18635: LD_INT 2
18637: PPUSH
18638: LD_INT 4
18640: PPUSH
18641: CALL_OW 12
18645: ST_TO_ADDR
18646: GO 18656
// s2 := 1 ;
18648: LD_ADDR_VAR 0 3
18652: PUSH
18653: LD_INT 1
18655: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18656: LD_ADDR_VAR 0 5
18660: PUSH
18661: LD_VAR 0 6
18665: PUSH
18666: LD_INT 1
18668: ARRAY
18669: PPUSH
18670: LD_VAR 0 3
18674: PPUSH
18675: CALL_OW 259
18679: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18680: LD_VAR 0 6
18684: PUSH
18685: LD_INT 1
18687: ARRAY
18688: PPUSH
18689: LD_VAR 0 2
18693: PPUSH
18694: LD_VAR 0 5
18698: PPUSH
18699: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18703: LD_VAR 0 6
18707: PUSH
18708: LD_INT 1
18710: ARRAY
18711: PPUSH
18712: LD_VAR 0 3
18716: PPUSH
18717: LD_VAR 0 4
18721: PPUSH
18722: CALL_OW 237
// end ;
18726: PPOPN 6
18728: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18729: LD_EXP 23
18733: PUSH
18734: LD_EXP 70
18738: AND
18739: IFFALSE 18818
18741: GO 18743
18743: DISABLE
18744: LD_INT 0
18746: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18747: LD_ADDR_VAR 0 1
18751: PUSH
18752: LD_INT 22
18754: PUSH
18755: LD_OWVAR 2
18759: PUSH
18760: EMPTY
18761: LIST
18762: LIST
18763: PUSH
18764: LD_INT 30
18766: PUSH
18767: LD_INT 3
18769: PUSH
18770: EMPTY
18771: LIST
18772: LIST
18773: PUSH
18774: EMPTY
18775: LIST
18776: LIST
18777: PPUSH
18778: CALL_OW 69
18782: ST_TO_ADDR
// if not tmp then
18783: LD_VAR 0 1
18787: NOT
18788: IFFALSE 18792
// exit ;
18790: GO 18818
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18792: LD_VAR 0 1
18796: PUSH
18797: LD_INT 1
18799: PPUSH
18800: LD_VAR 0 1
18804: PPUSH
18805: CALL_OW 12
18809: ARRAY
18810: PPUSH
18811: LD_INT 1
18813: PPUSH
18814: CALL_OW 234
// end ;
18818: PPOPN 1
18820: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18821: LD_EXP 23
18825: PUSH
18826: LD_EXP 71
18830: AND
18831: IFFALSE 18943
18833: GO 18835
18835: DISABLE
18836: LD_INT 0
18838: PPUSH
18839: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18840: LD_ADDR_VAR 0 2
18844: PUSH
18845: LD_INT 22
18847: PUSH
18848: LD_OWVAR 2
18852: PUSH
18853: EMPTY
18854: LIST
18855: LIST
18856: PUSH
18857: LD_INT 2
18859: PUSH
18860: LD_INT 30
18862: PUSH
18863: LD_INT 27
18865: PUSH
18866: EMPTY
18867: LIST
18868: LIST
18869: PUSH
18870: LD_INT 30
18872: PUSH
18873: LD_INT 26
18875: PUSH
18876: EMPTY
18877: LIST
18878: LIST
18879: PUSH
18880: LD_INT 30
18882: PUSH
18883: LD_INT 28
18885: PUSH
18886: EMPTY
18887: LIST
18888: LIST
18889: PUSH
18890: EMPTY
18891: LIST
18892: LIST
18893: LIST
18894: LIST
18895: PUSH
18896: EMPTY
18897: LIST
18898: LIST
18899: PPUSH
18900: CALL_OW 69
18904: ST_TO_ADDR
// if not tmp then
18905: LD_VAR 0 2
18909: NOT
18910: IFFALSE 18914
// exit ;
18912: GO 18943
// for i in tmp do
18914: LD_ADDR_VAR 0 1
18918: PUSH
18919: LD_VAR 0 2
18923: PUSH
18924: FOR_IN
18925: IFFALSE 18941
// SetLives ( i , 1 ) ;
18927: LD_VAR 0 1
18931: PPUSH
18932: LD_INT 1
18934: PPUSH
18935: CALL_OW 234
18939: GO 18924
18941: POP
18942: POP
// end ;
18943: PPOPN 2
18945: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18946: LD_EXP 23
18950: PUSH
18951: LD_EXP 72
18955: AND
18956: IFFALSE 19243
18958: GO 18960
18960: DISABLE
18961: LD_INT 0
18963: PPUSH
18964: PPUSH
18965: PPUSH
// begin i := rand ( 1 , 7 ) ;
18966: LD_ADDR_VAR 0 1
18970: PUSH
18971: LD_INT 1
18973: PPUSH
18974: LD_INT 7
18976: PPUSH
18977: CALL_OW 12
18981: ST_TO_ADDR
// case i of 1 :
18982: LD_VAR 0 1
18986: PUSH
18987: LD_INT 1
18989: DOUBLE
18990: EQUAL
18991: IFTRUE 18995
18993: GO 19005
18995: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18996: LD_STRING earthquake(getX(game), 0, 32)
18998: PPUSH
18999: CALL_OW 559
19003: GO 19243
19005: LD_INT 2
19007: DOUBLE
19008: EQUAL
19009: IFTRUE 19013
19011: GO 19027
19013: POP
// begin ToLua ( displayStucuk(); ) ;
19014: LD_STRING displayStucuk();
19016: PPUSH
19017: CALL_OW 559
// ResetFog ;
19021: CALL_OW 335
// end ; 3 :
19025: GO 19243
19027: LD_INT 3
19029: DOUBLE
19030: EQUAL
19031: IFTRUE 19035
19033: GO 19139
19035: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19036: LD_ADDR_VAR 0 2
19040: PUSH
19041: LD_INT 22
19043: PUSH
19044: LD_OWVAR 2
19048: PUSH
19049: EMPTY
19050: LIST
19051: LIST
19052: PUSH
19053: LD_INT 25
19055: PUSH
19056: LD_INT 1
19058: PUSH
19059: EMPTY
19060: LIST
19061: LIST
19062: PUSH
19063: EMPTY
19064: LIST
19065: LIST
19066: PPUSH
19067: CALL_OW 69
19071: ST_TO_ADDR
// if not tmp then
19072: LD_VAR 0 2
19076: NOT
19077: IFFALSE 19081
// exit ;
19079: GO 19243
// un := tmp [ rand ( 1 , tmp ) ] ;
19081: LD_ADDR_VAR 0 3
19085: PUSH
19086: LD_VAR 0 2
19090: PUSH
19091: LD_INT 1
19093: PPUSH
19094: LD_VAR 0 2
19098: PPUSH
19099: CALL_OW 12
19103: ARRAY
19104: ST_TO_ADDR
// if Crawls ( un ) then
19105: LD_VAR 0 3
19109: PPUSH
19110: CALL_OW 318
19114: IFFALSE 19125
// ComWalk ( un ) ;
19116: LD_VAR 0 3
19120: PPUSH
19121: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19125: LD_VAR 0 3
19129: PPUSH
19130: LD_INT 8
19132: PPUSH
19133: CALL_OW 336
// end ; 4 :
19137: GO 19243
19139: LD_INT 4
19141: DOUBLE
19142: EQUAL
19143: IFTRUE 19147
19145: GO 19221
19147: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19148: LD_ADDR_VAR 0 2
19152: PUSH
19153: LD_INT 22
19155: PUSH
19156: LD_OWVAR 2
19160: PUSH
19161: EMPTY
19162: LIST
19163: LIST
19164: PUSH
19165: LD_INT 30
19167: PUSH
19168: LD_INT 29
19170: PUSH
19171: EMPTY
19172: LIST
19173: LIST
19174: PUSH
19175: EMPTY
19176: LIST
19177: LIST
19178: PPUSH
19179: CALL_OW 69
19183: ST_TO_ADDR
// if not tmp then
19184: LD_VAR 0 2
19188: NOT
19189: IFFALSE 19193
// exit ;
19191: GO 19243
// CenterNowOnUnits ( tmp [ 1 ] ) ;
19193: LD_VAR 0 2
19197: PUSH
19198: LD_INT 1
19200: ARRAY
19201: PPUSH
19202: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
19206: LD_VAR 0 2
19210: PUSH
19211: LD_INT 1
19213: ARRAY
19214: PPUSH
19215: CALL_OW 65
// end ; 5 .. 7 :
19219: GO 19243
19221: LD_INT 5
19223: DOUBLE
19224: GREATEREQUAL
19225: IFFALSE 19233
19227: LD_INT 7
19229: DOUBLE
19230: LESSEQUAL
19231: IFTRUE 19235
19233: GO 19242
19235: POP
// StreamSibBomb ; end ;
19236: CALL 15480 0 0
19240: GO 19243
19242: POP
// end ;
19243: PPOPN 3
19245: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19246: LD_EXP 23
19250: PUSH
19251: LD_EXP 73
19255: AND
19256: IFFALSE 19412
19258: GO 19260
19260: DISABLE
19261: LD_INT 0
19263: PPUSH
19264: PPUSH
19265: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
19266: LD_ADDR_VAR 0 2
19270: PUSH
19271: LD_INT 81
19273: PUSH
19274: LD_OWVAR 2
19278: PUSH
19279: EMPTY
19280: LIST
19281: LIST
19282: PUSH
19283: LD_INT 2
19285: PUSH
19286: LD_INT 21
19288: PUSH
19289: LD_INT 1
19291: PUSH
19292: EMPTY
19293: LIST
19294: LIST
19295: PUSH
19296: LD_INT 21
19298: PUSH
19299: LD_INT 2
19301: PUSH
19302: EMPTY
19303: LIST
19304: LIST
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: LIST
19310: PUSH
19311: EMPTY
19312: LIST
19313: LIST
19314: PPUSH
19315: CALL_OW 69
19319: ST_TO_ADDR
// if not tmp then
19320: LD_VAR 0 2
19324: NOT
19325: IFFALSE 19329
// exit ;
19327: GO 19412
// p := 0 ;
19329: LD_ADDR_VAR 0 3
19333: PUSH
19334: LD_INT 0
19336: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19337: LD_INT 35
19339: PPUSH
19340: CALL_OW 67
// p := p + 1 ;
19344: LD_ADDR_VAR 0 3
19348: PUSH
19349: LD_VAR 0 3
19353: PUSH
19354: LD_INT 1
19356: PLUS
19357: ST_TO_ADDR
// for i in tmp do
19358: LD_ADDR_VAR 0 1
19362: PUSH
19363: LD_VAR 0 2
19367: PUSH
19368: FOR_IN
19369: IFFALSE 19400
// if GetLives ( i ) < 1000 then
19371: LD_VAR 0 1
19375: PPUSH
19376: CALL_OW 256
19380: PUSH
19381: LD_INT 1000
19383: LESS
19384: IFFALSE 19398
// SetLives ( i , 1000 ) ;
19386: LD_VAR 0 1
19390: PPUSH
19391: LD_INT 1000
19393: PPUSH
19394: CALL_OW 234
19398: GO 19368
19400: POP
19401: POP
// until p > 20 ;
19402: LD_VAR 0 3
19406: PUSH
19407: LD_INT 20
19409: GREATER
19410: IFFALSE 19337
// end ;
19412: PPOPN 3
19414: END
// every 0 0$1 trigger StreamModeActive and sTime do
19415: LD_EXP 23
19419: PUSH
19420: LD_EXP 74
19424: AND
19425: IFFALSE 19460
19427: GO 19429
19429: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19430: LD_INT 28
19432: PPUSH
19433: LD_OWVAR 2
19437: PPUSH
19438: LD_INT 2
19440: PPUSH
19441: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19445: LD_INT 30
19447: PPUSH
19448: LD_OWVAR 2
19452: PPUSH
19453: LD_INT 2
19455: PPUSH
19456: CALL_OW 322
// end ;
19460: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19461: LD_EXP 23
19465: PUSH
19466: LD_EXP 75
19470: AND
19471: IFFALSE 19592
19473: GO 19475
19475: DISABLE
19476: LD_INT 0
19478: PPUSH
19479: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19480: LD_ADDR_VAR 0 2
19484: PUSH
19485: LD_INT 22
19487: PUSH
19488: LD_OWVAR 2
19492: PUSH
19493: EMPTY
19494: LIST
19495: LIST
19496: PUSH
19497: LD_INT 21
19499: PUSH
19500: LD_INT 1
19502: PUSH
19503: EMPTY
19504: LIST
19505: LIST
19506: PUSH
19507: LD_INT 3
19509: PUSH
19510: LD_INT 23
19512: PUSH
19513: LD_INT 0
19515: PUSH
19516: EMPTY
19517: LIST
19518: LIST
19519: PUSH
19520: EMPTY
19521: LIST
19522: LIST
19523: PUSH
19524: EMPTY
19525: LIST
19526: LIST
19527: LIST
19528: PPUSH
19529: CALL_OW 69
19533: ST_TO_ADDR
// if not tmp then
19534: LD_VAR 0 2
19538: NOT
19539: IFFALSE 19543
// exit ;
19541: GO 19592
// for i in tmp do
19543: LD_ADDR_VAR 0 1
19547: PUSH
19548: LD_VAR 0 2
19552: PUSH
19553: FOR_IN
19554: IFFALSE 19590
// begin if Crawls ( i ) then
19556: LD_VAR 0 1
19560: PPUSH
19561: CALL_OW 318
19565: IFFALSE 19576
// ComWalk ( i ) ;
19567: LD_VAR 0 1
19571: PPUSH
19572: CALL_OW 138
// SetClass ( i , 2 ) ;
19576: LD_VAR 0 1
19580: PPUSH
19581: LD_INT 2
19583: PPUSH
19584: CALL_OW 336
// end ;
19588: GO 19553
19590: POP
19591: POP
// end ;
19592: PPOPN 2
19594: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19595: LD_EXP 23
19599: PUSH
19600: LD_EXP 76
19604: AND
19605: IFFALSE 19893
19607: GO 19609
19609: DISABLE
19610: LD_INT 0
19612: PPUSH
19613: PPUSH
19614: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19615: LD_OWVAR 2
19619: PPUSH
19620: LD_INT 9
19622: PPUSH
19623: LD_INT 1
19625: PPUSH
19626: LD_INT 1
19628: PPUSH
19629: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19633: LD_INT 9
19635: PPUSH
19636: LD_OWVAR 2
19640: PPUSH
19641: CALL_OW 343
// uc_side := 9 ;
19645: LD_ADDR_OWVAR 20
19649: PUSH
19650: LD_INT 9
19652: ST_TO_ADDR
// uc_nation := 2 ;
19653: LD_ADDR_OWVAR 21
19657: PUSH
19658: LD_INT 2
19660: ST_TO_ADDR
// hc_name := Dark Warrior ;
19661: LD_ADDR_OWVAR 26
19665: PUSH
19666: LD_STRING Dark Warrior
19668: ST_TO_ADDR
// hc_gallery :=  ;
19669: LD_ADDR_OWVAR 33
19673: PUSH
19674: LD_STRING 
19676: ST_TO_ADDR
// hc_noskilllimit := true ;
19677: LD_ADDR_OWVAR 76
19681: PUSH
19682: LD_INT 1
19684: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19685: LD_ADDR_OWVAR 31
19689: PUSH
19690: LD_INT 30
19692: PUSH
19693: LD_INT 30
19695: PUSH
19696: LD_INT 30
19698: PUSH
19699: LD_INT 30
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: LIST
19706: LIST
19707: ST_TO_ADDR
// un := CreateHuman ;
19708: LD_ADDR_VAR 0 3
19712: PUSH
19713: CALL_OW 44
19717: ST_TO_ADDR
// hc_noskilllimit := false ;
19718: LD_ADDR_OWVAR 76
19722: PUSH
19723: LD_INT 0
19725: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19726: LD_VAR 0 3
19730: PPUSH
19731: LD_INT 1
19733: PPUSH
19734: CALL_OW 51
// ToLua ( playRanger() ) ;
19738: LD_STRING playRanger()
19740: PPUSH
19741: CALL_OW 559
// p := 0 ;
19745: LD_ADDR_VAR 0 2
19749: PUSH
19750: LD_INT 0
19752: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19753: LD_INT 35
19755: PPUSH
19756: CALL_OW 67
// p := p + 1 ;
19760: LD_ADDR_VAR 0 2
19764: PUSH
19765: LD_VAR 0 2
19769: PUSH
19770: LD_INT 1
19772: PLUS
19773: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19774: LD_VAR 0 3
19778: PPUSH
19779: CALL_OW 256
19783: PUSH
19784: LD_INT 1000
19786: LESS
19787: IFFALSE 19801
// SetLives ( un , 1000 ) ;
19789: LD_VAR 0 3
19793: PPUSH
19794: LD_INT 1000
19796: PPUSH
19797: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19801: LD_VAR 0 3
19805: PPUSH
19806: LD_INT 81
19808: PUSH
19809: LD_OWVAR 2
19813: PUSH
19814: EMPTY
19815: LIST
19816: LIST
19817: PUSH
19818: LD_INT 91
19820: PUSH
19821: LD_VAR 0 3
19825: PUSH
19826: LD_INT 30
19828: PUSH
19829: EMPTY
19830: LIST
19831: LIST
19832: LIST
19833: PUSH
19834: EMPTY
19835: LIST
19836: LIST
19837: PPUSH
19838: CALL_OW 69
19842: PPUSH
19843: LD_VAR 0 3
19847: PPUSH
19848: CALL_OW 74
19852: PPUSH
19853: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19857: LD_VAR 0 2
19861: PUSH
19862: LD_INT 80
19864: GREATER
19865: PUSH
19866: LD_VAR 0 3
19870: PPUSH
19871: CALL_OW 301
19875: OR
19876: IFFALSE 19753
// if un then
19878: LD_VAR 0 3
19882: IFFALSE 19893
// RemoveUnit ( un ) ;
19884: LD_VAR 0 3
19888: PPUSH
19889: CALL_OW 64
// end ;
19893: PPOPN 3
19895: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19896: LD_EXP 77
19900: IFFALSE 20016
19902: GO 19904
19904: DISABLE
19905: LD_INT 0
19907: PPUSH
19908: PPUSH
19909: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19910: LD_ADDR_VAR 0 2
19914: PUSH
19915: LD_INT 81
19917: PUSH
19918: LD_OWVAR 2
19922: PUSH
19923: EMPTY
19924: LIST
19925: LIST
19926: PUSH
19927: LD_INT 21
19929: PUSH
19930: LD_INT 1
19932: PUSH
19933: EMPTY
19934: LIST
19935: LIST
19936: PUSH
19937: EMPTY
19938: LIST
19939: LIST
19940: PPUSH
19941: CALL_OW 69
19945: ST_TO_ADDR
// ToLua ( playComputer() ) ;
19946: LD_STRING playComputer()
19948: PPUSH
19949: CALL_OW 559
// if not tmp then
19953: LD_VAR 0 2
19957: NOT
19958: IFFALSE 19962
// exit ;
19960: GO 20016
// for i in tmp do
19962: LD_ADDR_VAR 0 1
19966: PUSH
19967: LD_VAR 0 2
19971: PUSH
19972: FOR_IN
19973: IFFALSE 20014
// for j := 1 to 4 do
19975: LD_ADDR_VAR 0 3
19979: PUSH
19980: DOUBLE
19981: LD_INT 1
19983: DEC
19984: ST_TO_ADDR
19985: LD_INT 4
19987: PUSH
19988: FOR_TO
19989: IFFALSE 20010
// SetSkill ( i , j , 10 ) ;
19991: LD_VAR 0 1
19995: PPUSH
19996: LD_VAR 0 3
20000: PPUSH
20001: LD_INT 10
20003: PPUSH
20004: CALL_OW 237
20008: GO 19988
20010: POP
20011: POP
20012: GO 19972
20014: POP
20015: POP
// end ;
20016: PPOPN 3
20018: END
// every 0 0$1 trigger s30 do var i , tmp ;
20019: LD_EXP 78
20023: IFFALSE 20092
20025: GO 20027
20027: DISABLE
20028: LD_INT 0
20030: PPUSH
20031: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20032: LD_ADDR_VAR 0 2
20036: PUSH
20037: LD_INT 22
20039: PUSH
20040: LD_OWVAR 2
20044: PUSH
20045: EMPTY
20046: LIST
20047: LIST
20048: PPUSH
20049: CALL_OW 69
20053: ST_TO_ADDR
// if not tmp then
20054: LD_VAR 0 2
20058: NOT
20059: IFFALSE 20063
// exit ;
20061: GO 20092
// for i in tmp do
20063: LD_ADDR_VAR 0 1
20067: PUSH
20068: LD_VAR 0 2
20072: PUSH
20073: FOR_IN
20074: IFFALSE 20090
// SetLives ( i , 300 ) ;
20076: LD_VAR 0 1
20080: PPUSH
20081: LD_INT 300
20083: PPUSH
20084: CALL_OW 234
20088: GO 20073
20090: POP
20091: POP
// end ;
20092: PPOPN 2
20094: END
// every 0 0$1 trigger s60 do var i , tmp ;
20095: LD_EXP 79
20099: IFFALSE 20168
20101: GO 20103
20103: DISABLE
20104: LD_INT 0
20106: PPUSH
20107: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20108: LD_ADDR_VAR 0 2
20112: PUSH
20113: LD_INT 22
20115: PUSH
20116: LD_OWVAR 2
20120: PUSH
20121: EMPTY
20122: LIST
20123: LIST
20124: PPUSH
20125: CALL_OW 69
20129: ST_TO_ADDR
// if not tmp then
20130: LD_VAR 0 2
20134: NOT
20135: IFFALSE 20139
// exit ;
20137: GO 20168
// for i in tmp do
20139: LD_ADDR_VAR 0 1
20143: PUSH
20144: LD_VAR 0 2
20148: PUSH
20149: FOR_IN
20150: IFFALSE 20166
// SetLives ( i , 600 ) ;
20152: LD_VAR 0 1
20156: PPUSH
20157: LD_INT 600
20159: PPUSH
20160: CALL_OW 234
20164: GO 20149
20166: POP
20167: POP
// end ;
20168: PPOPN 2
20170: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20171: LD_INT 0
20173: PPUSH
// case cmd of 301 :
20174: LD_VAR 0 1
20178: PUSH
20179: LD_INT 301
20181: DOUBLE
20182: EQUAL
20183: IFTRUE 20187
20185: GO 20219
20187: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
20188: LD_VAR 0 6
20192: PPUSH
20193: LD_VAR 0 7
20197: PPUSH
20198: LD_VAR 0 8
20202: PPUSH
20203: LD_VAR 0 4
20207: PPUSH
20208: LD_VAR 0 5
20212: PPUSH
20213: CALL 21420 0 5
20217: GO 20340
20219: LD_INT 302
20221: DOUBLE
20222: EQUAL
20223: IFTRUE 20227
20225: GO 20264
20227: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
20228: LD_VAR 0 6
20232: PPUSH
20233: LD_VAR 0 7
20237: PPUSH
20238: LD_VAR 0 8
20242: PPUSH
20243: LD_VAR 0 9
20247: PPUSH
20248: LD_VAR 0 4
20252: PPUSH
20253: LD_VAR 0 5
20257: PPUSH
20258: CALL 21511 0 6
20262: GO 20340
20264: LD_INT 303
20266: DOUBLE
20267: EQUAL
20268: IFTRUE 20272
20270: GO 20309
20272: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
20273: LD_VAR 0 6
20277: PPUSH
20278: LD_VAR 0 7
20282: PPUSH
20283: LD_VAR 0 8
20287: PPUSH
20288: LD_VAR 0 9
20292: PPUSH
20293: LD_VAR 0 4
20297: PPUSH
20298: LD_VAR 0 5
20302: PPUSH
20303: CALL 20345 0 6
20307: GO 20340
20309: LD_INT 304
20311: DOUBLE
20312: EQUAL
20313: IFTRUE 20317
20315: GO 20339
20317: POP
// hHackTeleport ( unit , x , y ) ; end ;
20318: LD_VAR 0 2
20322: PPUSH
20323: LD_VAR 0 4
20327: PPUSH
20328: LD_VAR 0 5
20332: PPUSH
20333: CALL 22104 0 3
20337: GO 20340
20339: POP
// end ;
20340: LD_VAR 0 12
20344: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
20345: LD_INT 0
20347: PPUSH
20348: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
20349: LD_VAR 0 1
20353: PUSH
20354: LD_INT 1
20356: LESS
20357: PUSH
20358: LD_VAR 0 1
20362: PUSH
20363: LD_INT 3
20365: GREATER
20366: OR
20367: PUSH
20368: LD_VAR 0 5
20372: PPUSH
20373: LD_VAR 0 6
20377: PPUSH
20378: CALL_OW 428
20382: OR
20383: IFFALSE 20387
// exit ;
20385: GO 21107
// uc_side := your_side ;
20387: LD_ADDR_OWVAR 20
20391: PUSH
20392: LD_OWVAR 2
20396: ST_TO_ADDR
// uc_nation := nation ;
20397: LD_ADDR_OWVAR 21
20401: PUSH
20402: LD_VAR 0 1
20406: ST_TO_ADDR
// bc_level = 1 ;
20407: LD_ADDR_OWVAR 43
20411: PUSH
20412: LD_INT 1
20414: ST_TO_ADDR
// case btype of 1 :
20415: LD_VAR 0 2
20419: PUSH
20420: LD_INT 1
20422: DOUBLE
20423: EQUAL
20424: IFTRUE 20428
20426: GO 20439
20428: POP
// bc_type := b_depot ; 2 :
20429: LD_ADDR_OWVAR 42
20433: PUSH
20434: LD_INT 0
20436: ST_TO_ADDR
20437: GO 21051
20439: LD_INT 2
20441: DOUBLE
20442: EQUAL
20443: IFTRUE 20447
20445: GO 20458
20447: POP
// bc_type := b_warehouse ; 3 :
20448: LD_ADDR_OWVAR 42
20452: PUSH
20453: LD_INT 1
20455: ST_TO_ADDR
20456: GO 21051
20458: LD_INT 3
20460: DOUBLE
20461: EQUAL
20462: IFTRUE 20466
20464: GO 20477
20466: POP
// bc_type := b_lab ; 4 .. 9 :
20467: LD_ADDR_OWVAR 42
20471: PUSH
20472: LD_INT 6
20474: ST_TO_ADDR
20475: GO 21051
20477: LD_INT 4
20479: DOUBLE
20480: GREATEREQUAL
20481: IFFALSE 20489
20483: LD_INT 9
20485: DOUBLE
20486: LESSEQUAL
20487: IFTRUE 20491
20489: GO 20543
20491: POP
// begin bc_type := b_lab_half ;
20492: LD_ADDR_OWVAR 42
20496: PUSH
20497: LD_INT 7
20499: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
20500: LD_ADDR_OWVAR 44
20504: PUSH
20505: LD_INT 10
20507: PUSH
20508: LD_INT 11
20510: PUSH
20511: LD_INT 12
20513: PUSH
20514: LD_INT 15
20516: PUSH
20517: LD_INT 14
20519: PUSH
20520: LD_INT 13
20522: PUSH
20523: EMPTY
20524: LIST
20525: LIST
20526: LIST
20527: LIST
20528: LIST
20529: LIST
20530: PUSH
20531: LD_VAR 0 2
20535: PUSH
20536: LD_INT 3
20538: MINUS
20539: ARRAY
20540: ST_TO_ADDR
// end ; 10 .. 13 :
20541: GO 21051
20543: LD_INT 10
20545: DOUBLE
20546: GREATEREQUAL
20547: IFFALSE 20555
20549: LD_INT 13
20551: DOUBLE
20552: LESSEQUAL
20553: IFTRUE 20557
20555: GO 20634
20557: POP
// begin bc_type := b_lab_full ;
20558: LD_ADDR_OWVAR 42
20562: PUSH
20563: LD_INT 8
20565: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
20566: LD_ADDR_OWVAR 44
20570: PUSH
20571: LD_INT 10
20573: PUSH
20574: LD_INT 12
20576: PUSH
20577: LD_INT 14
20579: PUSH
20580: LD_INT 13
20582: PUSH
20583: EMPTY
20584: LIST
20585: LIST
20586: LIST
20587: LIST
20588: PUSH
20589: LD_VAR 0 2
20593: PUSH
20594: LD_INT 9
20596: MINUS
20597: ARRAY
20598: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20599: LD_ADDR_OWVAR 45
20603: PUSH
20604: LD_INT 11
20606: PUSH
20607: LD_INT 15
20609: PUSH
20610: LD_INT 12
20612: PUSH
20613: LD_INT 15
20615: PUSH
20616: EMPTY
20617: LIST
20618: LIST
20619: LIST
20620: LIST
20621: PUSH
20622: LD_VAR 0 2
20626: PUSH
20627: LD_INT 9
20629: MINUS
20630: ARRAY
20631: ST_TO_ADDR
// end ; 14 :
20632: GO 21051
20634: LD_INT 14
20636: DOUBLE
20637: EQUAL
20638: IFTRUE 20642
20640: GO 20653
20642: POP
// bc_type := b_workshop ; 15 :
20643: LD_ADDR_OWVAR 42
20647: PUSH
20648: LD_INT 2
20650: ST_TO_ADDR
20651: GO 21051
20653: LD_INT 15
20655: DOUBLE
20656: EQUAL
20657: IFTRUE 20661
20659: GO 20672
20661: POP
// bc_type := b_factory ; 16 :
20662: LD_ADDR_OWVAR 42
20666: PUSH
20667: LD_INT 3
20669: ST_TO_ADDR
20670: GO 21051
20672: LD_INT 16
20674: DOUBLE
20675: EQUAL
20676: IFTRUE 20680
20678: GO 20691
20680: POP
// bc_type := b_ext_gun ; 17 :
20681: LD_ADDR_OWVAR 42
20685: PUSH
20686: LD_INT 17
20688: ST_TO_ADDR
20689: GO 21051
20691: LD_INT 17
20693: DOUBLE
20694: EQUAL
20695: IFTRUE 20699
20697: GO 20727
20699: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20700: LD_ADDR_OWVAR 42
20704: PUSH
20705: LD_INT 19
20707: PUSH
20708: LD_INT 23
20710: PUSH
20711: LD_INT 19
20713: PUSH
20714: EMPTY
20715: LIST
20716: LIST
20717: LIST
20718: PUSH
20719: LD_VAR 0 1
20723: ARRAY
20724: ST_TO_ADDR
20725: GO 21051
20727: LD_INT 18
20729: DOUBLE
20730: EQUAL
20731: IFTRUE 20735
20733: GO 20746
20735: POP
// bc_type := b_ext_radar ; 19 :
20736: LD_ADDR_OWVAR 42
20740: PUSH
20741: LD_INT 20
20743: ST_TO_ADDR
20744: GO 21051
20746: LD_INT 19
20748: DOUBLE
20749: EQUAL
20750: IFTRUE 20754
20752: GO 20765
20754: POP
// bc_type := b_ext_radio ; 20 :
20755: LD_ADDR_OWVAR 42
20759: PUSH
20760: LD_INT 22
20762: ST_TO_ADDR
20763: GO 21051
20765: LD_INT 20
20767: DOUBLE
20768: EQUAL
20769: IFTRUE 20773
20771: GO 20784
20773: POP
// bc_type := b_ext_siberium ; 21 :
20774: LD_ADDR_OWVAR 42
20778: PUSH
20779: LD_INT 21
20781: ST_TO_ADDR
20782: GO 21051
20784: LD_INT 21
20786: DOUBLE
20787: EQUAL
20788: IFTRUE 20792
20790: GO 20803
20792: POP
// bc_type := b_ext_computer ; 22 :
20793: LD_ADDR_OWVAR 42
20797: PUSH
20798: LD_INT 24
20800: ST_TO_ADDR
20801: GO 21051
20803: LD_INT 22
20805: DOUBLE
20806: EQUAL
20807: IFTRUE 20811
20809: GO 20822
20811: POP
// bc_type := b_ext_track ; 23 :
20812: LD_ADDR_OWVAR 42
20816: PUSH
20817: LD_INT 16
20819: ST_TO_ADDR
20820: GO 21051
20822: LD_INT 23
20824: DOUBLE
20825: EQUAL
20826: IFTRUE 20830
20828: GO 20841
20830: POP
// bc_type := b_ext_laser ; 24 :
20831: LD_ADDR_OWVAR 42
20835: PUSH
20836: LD_INT 25
20838: ST_TO_ADDR
20839: GO 21051
20841: LD_INT 24
20843: DOUBLE
20844: EQUAL
20845: IFTRUE 20849
20847: GO 20860
20849: POP
// bc_type := b_control_tower ; 25 :
20850: LD_ADDR_OWVAR 42
20854: PUSH
20855: LD_INT 36
20857: ST_TO_ADDR
20858: GO 21051
20860: LD_INT 25
20862: DOUBLE
20863: EQUAL
20864: IFTRUE 20868
20866: GO 20879
20868: POP
// bc_type := b_breastwork ; 26 :
20869: LD_ADDR_OWVAR 42
20873: PUSH
20874: LD_INT 31
20876: ST_TO_ADDR
20877: GO 21051
20879: LD_INT 26
20881: DOUBLE
20882: EQUAL
20883: IFTRUE 20887
20885: GO 20898
20887: POP
// bc_type := b_bunker ; 27 :
20888: LD_ADDR_OWVAR 42
20892: PUSH
20893: LD_INT 32
20895: ST_TO_ADDR
20896: GO 21051
20898: LD_INT 27
20900: DOUBLE
20901: EQUAL
20902: IFTRUE 20906
20904: GO 20917
20906: POP
// bc_type := b_turret ; 28 :
20907: LD_ADDR_OWVAR 42
20911: PUSH
20912: LD_INT 33
20914: ST_TO_ADDR
20915: GO 21051
20917: LD_INT 28
20919: DOUBLE
20920: EQUAL
20921: IFTRUE 20925
20923: GO 20936
20925: POP
// bc_type := b_armoury ; 29 :
20926: LD_ADDR_OWVAR 42
20930: PUSH
20931: LD_INT 4
20933: ST_TO_ADDR
20934: GO 21051
20936: LD_INT 29
20938: DOUBLE
20939: EQUAL
20940: IFTRUE 20944
20942: GO 20955
20944: POP
// bc_type := b_barracks ; 30 :
20945: LD_ADDR_OWVAR 42
20949: PUSH
20950: LD_INT 5
20952: ST_TO_ADDR
20953: GO 21051
20955: LD_INT 30
20957: DOUBLE
20958: EQUAL
20959: IFTRUE 20963
20961: GO 20974
20963: POP
// bc_type := b_solar_power ; 31 :
20964: LD_ADDR_OWVAR 42
20968: PUSH
20969: LD_INT 27
20971: ST_TO_ADDR
20972: GO 21051
20974: LD_INT 31
20976: DOUBLE
20977: EQUAL
20978: IFTRUE 20982
20980: GO 20993
20982: POP
// bc_type := b_oil_power ; 32 :
20983: LD_ADDR_OWVAR 42
20987: PUSH
20988: LD_INT 26
20990: ST_TO_ADDR
20991: GO 21051
20993: LD_INT 32
20995: DOUBLE
20996: EQUAL
20997: IFTRUE 21001
20999: GO 21012
21001: POP
// bc_type := b_siberite_power ; 33 :
21002: LD_ADDR_OWVAR 42
21006: PUSH
21007: LD_INT 28
21009: ST_TO_ADDR
21010: GO 21051
21012: LD_INT 33
21014: DOUBLE
21015: EQUAL
21016: IFTRUE 21020
21018: GO 21031
21020: POP
// bc_type := b_oil_mine ; 34 :
21021: LD_ADDR_OWVAR 42
21025: PUSH
21026: LD_INT 29
21028: ST_TO_ADDR
21029: GO 21051
21031: LD_INT 34
21033: DOUBLE
21034: EQUAL
21035: IFTRUE 21039
21037: GO 21050
21039: POP
// bc_type := b_siberite_mine ; end ;
21040: LD_ADDR_OWVAR 42
21044: PUSH
21045: LD_INT 30
21047: ST_TO_ADDR
21048: GO 21051
21050: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
21051: LD_ADDR_VAR 0 8
21055: PUSH
21056: LD_VAR 0 5
21060: PPUSH
21061: LD_VAR 0 6
21065: PPUSH
21066: LD_VAR 0 3
21070: PPUSH
21071: CALL_OW 47
21075: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
21076: LD_OWVAR 42
21080: PUSH
21081: LD_INT 32
21083: PUSH
21084: LD_INT 33
21086: PUSH
21087: EMPTY
21088: LIST
21089: LIST
21090: IN
21091: IFFALSE 21107
// PlaceWeaponTurret ( b , weapon ) ;
21093: LD_VAR 0 8
21097: PPUSH
21098: LD_VAR 0 4
21102: PPUSH
21103: CALL_OW 431
// end ;
21107: LD_VAR 0 7
21111: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
21112: LD_INT 0
21114: PPUSH
21115: PPUSH
21116: PPUSH
21117: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21118: LD_ADDR_VAR 0 4
21122: PUSH
21123: LD_INT 22
21125: PUSH
21126: LD_OWVAR 2
21130: PUSH
21131: EMPTY
21132: LIST
21133: LIST
21134: PUSH
21135: LD_INT 2
21137: PUSH
21138: LD_INT 30
21140: PUSH
21141: LD_INT 0
21143: PUSH
21144: EMPTY
21145: LIST
21146: LIST
21147: PUSH
21148: LD_INT 30
21150: PUSH
21151: LD_INT 1
21153: PUSH
21154: EMPTY
21155: LIST
21156: LIST
21157: PUSH
21158: EMPTY
21159: LIST
21160: LIST
21161: LIST
21162: PUSH
21163: EMPTY
21164: LIST
21165: LIST
21166: PPUSH
21167: CALL_OW 69
21171: ST_TO_ADDR
// if not tmp then
21172: LD_VAR 0 4
21176: NOT
21177: IFFALSE 21181
// exit ;
21179: GO 21240
// for i in tmp do
21181: LD_ADDR_VAR 0 2
21185: PUSH
21186: LD_VAR 0 4
21190: PUSH
21191: FOR_IN
21192: IFFALSE 21238
// for j = 1 to 3 do
21194: LD_ADDR_VAR 0 3
21198: PUSH
21199: DOUBLE
21200: LD_INT 1
21202: DEC
21203: ST_TO_ADDR
21204: LD_INT 3
21206: PUSH
21207: FOR_TO
21208: IFFALSE 21234
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
21210: LD_VAR 0 2
21214: PPUSH
21215: CALL_OW 274
21219: PPUSH
21220: LD_VAR 0 3
21224: PPUSH
21225: LD_INT 99999
21227: PPUSH
21228: CALL_OW 277
21232: GO 21207
21234: POP
21235: POP
21236: GO 21191
21238: POP
21239: POP
// end ;
21240: LD_VAR 0 1
21244: RET
// export function hHackSetLevel10 ; var i , j ; begin
21245: LD_INT 0
21247: PPUSH
21248: PPUSH
21249: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21250: LD_ADDR_VAR 0 2
21254: PUSH
21255: LD_INT 21
21257: PUSH
21258: LD_INT 1
21260: PUSH
21261: EMPTY
21262: LIST
21263: LIST
21264: PPUSH
21265: CALL_OW 69
21269: PUSH
21270: FOR_IN
21271: IFFALSE 21323
// if IsSelected ( i ) then
21273: LD_VAR 0 2
21277: PPUSH
21278: CALL_OW 306
21282: IFFALSE 21321
// begin for j := 1 to 4 do
21284: LD_ADDR_VAR 0 3
21288: PUSH
21289: DOUBLE
21290: LD_INT 1
21292: DEC
21293: ST_TO_ADDR
21294: LD_INT 4
21296: PUSH
21297: FOR_TO
21298: IFFALSE 21319
// SetSkill ( i , j , 10 ) ;
21300: LD_VAR 0 2
21304: PPUSH
21305: LD_VAR 0 3
21309: PPUSH
21310: LD_INT 10
21312: PPUSH
21313: CALL_OW 237
21317: GO 21297
21319: POP
21320: POP
// end ;
21321: GO 21270
21323: POP
21324: POP
// end ;
21325: LD_VAR 0 1
21329: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
21330: LD_INT 0
21332: PPUSH
21333: PPUSH
21334: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21335: LD_ADDR_VAR 0 2
21339: PUSH
21340: LD_INT 22
21342: PUSH
21343: LD_OWVAR 2
21347: PUSH
21348: EMPTY
21349: LIST
21350: LIST
21351: PUSH
21352: LD_INT 21
21354: PUSH
21355: LD_INT 1
21357: PUSH
21358: EMPTY
21359: LIST
21360: LIST
21361: PUSH
21362: EMPTY
21363: LIST
21364: LIST
21365: PPUSH
21366: CALL_OW 69
21370: PUSH
21371: FOR_IN
21372: IFFALSE 21413
// begin for j := 1 to 4 do
21374: LD_ADDR_VAR 0 3
21378: PUSH
21379: DOUBLE
21380: LD_INT 1
21382: DEC
21383: ST_TO_ADDR
21384: LD_INT 4
21386: PUSH
21387: FOR_TO
21388: IFFALSE 21409
// SetSkill ( i , j , 10 ) ;
21390: LD_VAR 0 2
21394: PPUSH
21395: LD_VAR 0 3
21399: PPUSH
21400: LD_INT 10
21402: PPUSH
21403: CALL_OW 237
21407: GO 21387
21409: POP
21410: POP
// end ;
21411: GO 21371
21413: POP
21414: POP
// end ;
21415: LD_VAR 0 1
21419: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
21420: LD_INT 0
21422: PPUSH
// uc_side := your_side ;
21423: LD_ADDR_OWVAR 20
21427: PUSH
21428: LD_OWVAR 2
21432: ST_TO_ADDR
// uc_nation := nation ;
21433: LD_ADDR_OWVAR 21
21437: PUSH
21438: LD_VAR 0 1
21442: ST_TO_ADDR
// InitHc ;
21443: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21447: LD_INT 0
21449: PPUSH
21450: LD_VAR 0 2
21454: PPUSH
21455: LD_VAR 0 3
21459: PPUSH
21460: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
21464: LD_VAR 0 4
21468: PPUSH
21469: LD_VAR 0 5
21473: PPUSH
21474: CALL_OW 428
21478: PUSH
21479: LD_INT 0
21481: EQUAL
21482: IFFALSE 21506
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
21484: CALL_OW 44
21488: PPUSH
21489: LD_VAR 0 4
21493: PPUSH
21494: LD_VAR 0 5
21498: PPUSH
21499: LD_INT 1
21501: PPUSH
21502: CALL_OW 48
// end ;
21506: LD_VAR 0 6
21510: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
21511: LD_INT 0
21513: PPUSH
21514: PPUSH
// uc_side := your_side ;
21515: LD_ADDR_OWVAR 20
21519: PUSH
21520: LD_OWVAR 2
21524: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
21525: LD_VAR 0 1
21529: PUSH
21530: LD_INT 1
21532: PUSH
21533: LD_INT 2
21535: PUSH
21536: LD_INT 3
21538: PUSH
21539: LD_INT 4
21541: PUSH
21542: LD_INT 5
21544: PUSH
21545: EMPTY
21546: LIST
21547: LIST
21548: LIST
21549: LIST
21550: LIST
21551: IN
21552: IFFALSE 21564
// uc_nation := nation_american else
21554: LD_ADDR_OWVAR 21
21558: PUSH
21559: LD_INT 1
21561: ST_TO_ADDR
21562: GO 21607
// if chassis in [ 11 , 12 , 13 , 14 ] then
21564: LD_VAR 0 1
21568: PUSH
21569: LD_INT 11
21571: PUSH
21572: LD_INT 12
21574: PUSH
21575: LD_INT 13
21577: PUSH
21578: LD_INT 14
21580: PUSH
21581: EMPTY
21582: LIST
21583: LIST
21584: LIST
21585: LIST
21586: IN
21587: IFFALSE 21599
// uc_nation := nation_arabian else
21589: LD_ADDR_OWVAR 21
21593: PUSH
21594: LD_INT 2
21596: ST_TO_ADDR
21597: GO 21607
// uc_nation := nation_russian ;
21599: LD_ADDR_OWVAR 21
21603: PUSH
21604: LD_INT 3
21606: ST_TO_ADDR
// vc_chassis := chassis ;
21607: LD_ADDR_OWVAR 37
21611: PUSH
21612: LD_VAR 0 1
21616: ST_TO_ADDR
// vc_engine := engine ;
21617: LD_ADDR_OWVAR 39
21621: PUSH
21622: LD_VAR 0 2
21626: ST_TO_ADDR
// vc_control := control ;
21627: LD_ADDR_OWVAR 38
21631: PUSH
21632: LD_VAR 0 3
21636: ST_TO_ADDR
// vc_weapon := weapon ;
21637: LD_ADDR_OWVAR 40
21641: PUSH
21642: LD_VAR 0 4
21646: ST_TO_ADDR
// un := CreateVehicle ;
21647: LD_ADDR_VAR 0 8
21651: PUSH
21652: CALL_OW 45
21656: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21657: LD_VAR 0 8
21661: PPUSH
21662: LD_INT 0
21664: PPUSH
21665: LD_INT 5
21667: PPUSH
21668: CALL_OW 12
21672: PPUSH
21673: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21677: LD_VAR 0 8
21681: PPUSH
21682: LD_VAR 0 5
21686: PPUSH
21687: LD_VAR 0 6
21691: PPUSH
21692: LD_INT 1
21694: PPUSH
21695: CALL_OW 48
// end ;
21699: LD_VAR 0 7
21703: RET
// export hInvincible ; every 1 do
21704: GO 21706
21706: DISABLE
// hInvincible := [ ] ;
21707: LD_ADDR_EXP 80
21711: PUSH
21712: EMPTY
21713: ST_TO_ADDR
21714: END
// every 10 do var i ;
21715: GO 21717
21717: DISABLE
21718: LD_INT 0
21720: PPUSH
// begin enable ;
21721: ENABLE
// if not hInvincible then
21722: LD_EXP 80
21726: NOT
21727: IFFALSE 21731
// exit ;
21729: GO 21775
// for i in hInvincible do
21731: LD_ADDR_VAR 0 1
21735: PUSH
21736: LD_EXP 80
21740: PUSH
21741: FOR_IN
21742: IFFALSE 21773
// if GetLives ( i ) < 1000 then
21744: LD_VAR 0 1
21748: PPUSH
21749: CALL_OW 256
21753: PUSH
21754: LD_INT 1000
21756: LESS
21757: IFFALSE 21771
// SetLives ( i , 1000 ) ;
21759: LD_VAR 0 1
21763: PPUSH
21764: LD_INT 1000
21766: PPUSH
21767: CALL_OW 234
21771: GO 21741
21773: POP
21774: POP
// end ;
21775: PPOPN 1
21777: END
// export function hHackInvincible ; var i ; begin
21778: LD_INT 0
21780: PPUSH
21781: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21782: LD_ADDR_VAR 0 2
21786: PUSH
21787: LD_INT 2
21789: PUSH
21790: LD_INT 21
21792: PUSH
21793: LD_INT 1
21795: PUSH
21796: EMPTY
21797: LIST
21798: LIST
21799: PUSH
21800: LD_INT 21
21802: PUSH
21803: LD_INT 2
21805: PUSH
21806: EMPTY
21807: LIST
21808: LIST
21809: PUSH
21810: EMPTY
21811: LIST
21812: LIST
21813: LIST
21814: PPUSH
21815: CALL_OW 69
21819: PUSH
21820: FOR_IN
21821: IFFALSE 21882
// if IsSelected ( i ) then
21823: LD_VAR 0 2
21827: PPUSH
21828: CALL_OW 306
21832: IFFALSE 21880
// begin if i in hInvincible then
21834: LD_VAR 0 2
21838: PUSH
21839: LD_EXP 80
21843: IN
21844: IFFALSE 21864
// hInvincible := hInvincible diff i else
21846: LD_ADDR_EXP 80
21850: PUSH
21851: LD_EXP 80
21855: PUSH
21856: LD_VAR 0 2
21860: DIFF
21861: ST_TO_ADDR
21862: GO 21880
// hInvincible := hInvincible union i ;
21864: LD_ADDR_EXP 80
21868: PUSH
21869: LD_EXP 80
21873: PUSH
21874: LD_VAR 0 2
21878: UNION
21879: ST_TO_ADDR
// end ;
21880: GO 21820
21882: POP
21883: POP
// end ;
21884: LD_VAR 0 1
21888: RET
// export function hHackInvisible ; var i , j ; begin
21889: LD_INT 0
21891: PPUSH
21892: PPUSH
21893: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21894: LD_ADDR_VAR 0 2
21898: PUSH
21899: LD_INT 21
21901: PUSH
21902: LD_INT 1
21904: PUSH
21905: EMPTY
21906: LIST
21907: LIST
21908: PPUSH
21909: CALL_OW 69
21913: PUSH
21914: FOR_IN
21915: IFFALSE 21939
// if IsSelected ( i ) then
21917: LD_VAR 0 2
21921: PPUSH
21922: CALL_OW 306
21926: IFFALSE 21937
// ComForceInvisible ( i ) ;
21928: LD_VAR 0 2
21932: PPUSH
21933: CALL_OW 496
21937: GO 21914
21939: POP
21940: POP
// end ;
21941: LD_VAR 0 1
21945: RET
// export function hHackChangeYourSide ; begin
21946: LD_INT 0
21948: PPUSH
// if your_side = 8 then
21949: LD_OWVAR 2
21953: PUSH
21954: LD_INT 8
21956: EQUAL
21957: IFFALSE 21969
// your_side := 0 else
21959: LD_ADDR_OWVAR 2
21963: PUSH
21964: LD_INT 0
21966: ST_TO_ADDR
21967: GO 21983
// your_side := your_side + 1 ;
21969: LD_ADDR_OWVAR 2
21973: PUSH
21974: LD_OWVAR 2
21978: PUSH
21979: LD_INT 1
21981: PLUS
21982: ST_TO_ADDR
// end ;
21983: LD_VAR 0 1
21987: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21988: LD_INT 0
21990: PPUSH
21991: PPUSH
21992: PPUSH
// for i in all_units do
21993: LD_ADDR_VAR 0 2
21997: PUSH
21998: LD_OWVAR 3
22002: PUSH
22003: FOR_IN
22004: IFFALSE 22082
// if IsSelected ( i ) then
22006: LD_VAR 0 2
22010: PPUSH
22011: CALL_OW 306
22015: IFFALSE 22080
// begin j := GetSide ( i ) ;
22017: LD_ADDR_VAR 0 3
22021: PUSH
22022: LD_VAR 0 2
22026: PPUSH
22027: CALL_OW 255
22031: ST_TO_ADDR
// if j = 8 then
22032: LD_VAR 0 3
22036: PUSH
22037: LD_INT 8
22039: EQUAL
22040: IFFALSE 22052
// j := 0 else
22042: LD_ADDR_VAR 0 3
22046: PUSH
22047: LD_INT 0
22049: ST_TO_ADDR
22050: GO 22066
// j := j + 1 ;
22052: LD_ADDR_VAR 0 3
22056: PUSH
22057: LD_VAR 0 3
22061: PUSH
22062: LD_INT 1
22064: PLUS
22065: ST_TO_ADDR
// SetSide ( i , j ) ;
22066: LD_VAR 0 2
22070: PPUSH
22071: LD_VAR 0 3
22075: PPUSH
22076: CALL_OW 235
// end ;
22080: GO 22003
22082: POP
22083: POP
// end ;
22084: LD_VAR 0 1
22088: RET
// export function hHackFog ; begin
22089: LD_INT 0
22091: PPUSH
// FogOff ( true ) ;
22092: LD_INT 1
22094: PPUSH
22095: CALL_OW 344
// end ;
22099: LD_VAR 0 1
22103: RET
// export function hHackTeleport ( unit , x , y ) ; begin
22104: LD_INT 0
22106: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
22107: LD_VAR 0 1
22111: PPUSH
22112: LD_VAR 0 2
22116: PPUSH
22117: LD_VAR 0 3
22121: PPUSH
22122: LD_INT 1
22124: PPUSH
22125: LD_INT 1
22127: PPUSH
22128: CALL_OW 483
// CenterOnXY ( x , y ) ;
22132: LD_VAR 0 2
22136: PPUSH
22137: LD_VAR 0 3
22141: PPUSH
22142: CALL_OW 84
// end ;
22146: LD_VAR 0 4
22150: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
22151: LD_INT 0
22153: PPUSH
22154: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
22155: LD_VAR 0 1
22159: NOT
22160: PUSH
22161: LD_VAR 0 2
22165: PPUSH
22166: LD_VAR 0 3
22170: PPUSH
22171: CALL_OW 488
22175: NOT
22176: OR
22177: PUSH
22178: LD_VAR 0 1
22182: PPUSH
22183: CALL_OW 266
22187: PUSH
22188: LD_INT 3
22190: NONEQUAL
22191: PUSH
22192: LD_VAR 0 1
22196: PPUSH
22197: CALL_OW 247
22201: PUSH
22202: LD_INT 1
22204: EQUAL
22205: NOT
22206: AND
22207: OR
22208: IFFALSE 22212
// exit ;
22210: GO 22361
// if GetType ( factory ) = unit_human then
22212: LD_VAR 0 1
22216: PPUSH
22217: CALL_OW 247
22221: PUSH
22222: LD_INT 1
22224: EQUAL
22225: IFFALSE 22242
// factory := IsInUnit ( factory ) ;
22227: LD_ADDR_VAR 0 1
22231: PUSH
22232: LD_VAR 0 1
22236: PPUSH
22237: CALL_OW 310
22241: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
22242: LD_VAR 0 1
22246: PPUSH
22247: CALL_OW 266
22251: PUSH
22252: LD_INT 3
22254: NONEQUAL
22255: IFFALSE 22259
// exit ;
22257: GO 22361
// if HexInfo ( x , y ) = factory then
22259: LD_VAR 0 2
22263: PPUSH
22264: LD_VAR 0 3
22268: PPUSH
22269: CALL_OW 428
22273: PUSH
22274: LD_VAR 0 1
22278: EQUAL
22279: IFFALSE 22306
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
22281: LD_ADDR_EXP 81
22285: PUSH
22286: LD_EXP 81
22290: PPUSH
22291: LD_VAR 0 1
22295: PPUSH
22296: LD_INT 0
22298: PPUSH
22299: CALL_OW 1
22303: ST_TO_ADDR
22304: GO 22357
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
22306: LD_ADDR_EXP 81
22310: PUSH
22311: LD_EXP 81
22315: PPUSH
22316: LD_VAR 0 1
22320: PPUSH
22321: LD_VAR 0 1
22325: PPUSH
22326: CALL_OW 255
22330: PUSH
22331: LD_VAR 0 1
22335: PUSH
22336: LD_VAR 0 2
22340: PUSH
22341: LD_VAR 0 3
22345: PUSH
22346: EMPTY
22347: LIST
22348: LIST
22349: LIST
22350: LIST
22351: PPUSH
22352: CALL_OW 1
22356: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22357: CALL 22366 0 0
// end ;
22361: LD_VAR 0 4
22365: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
22366: LD_INT 0
22368: PPUSH
22369: PPUSH
22370: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
22371: LD_STRING resetFactoryWaypoint();
22373: PPUSH
22374: CALL_OW 559
// if factoryWaypoints then
22378: LD_EXP 81
22382: IFFALSE 22508
// begin list := PrepareArray ( factoryWaypoints ) ;
22384: LD_ADDR_VAR 0 3
22388: PUSH
22389: LD_EXP 81
22393: PPUSH
22394: CALL 64688 0 1
22398: ST_TO_ADDR
// for i := 1 to list do
22399: LD_ADDR_VAR 0 2
22403: PUSH
22404: DOUBLE
22405: LD_INT 1
22407: DEC
22408: ST_TO_ADDR
22409: LD_VAR 0 3
22413: PUSH
22414: FOR_TO
22415: IFFALSE 22506
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22417: LD_STRING setFactoryWaypointXY(
22419: PUSH
22420: LD_VAR 0 3
22424: PUSH
22425: LD_VAR 0 2
22429: ARRAY
22430: PUSH
22431: LD_INT 1
22433: ARRAY
22434: STR
22435: PUSH
22436: LD_STRING ,
22438: STR
22439: PUSH
22440: LD_VAR 0 3
22444: PUSH
22445: LD_VAR 0 2
22449: ARRAY
22450: PUSH
22451: LD_INT 2
22453: ARRAY
22454: STR
22455: PUSH
22456: LD_STRING ,
22458: STR
22459: PUSH
22460: LD_VAR 0 3
22464: PUSH
22465: LD_VAR 0 2
22469: ARRAY
22470: PUSH
22471: LD_INT 3
22473: ARRAY
22474: STR
22475: PUSH
22476: LD_STRING ,
22478: STR
22479: PUSH
22480: LD_VAR 0 3
22484: PUSH
22485: LD_VAR 0 2
22489: ARRAY
22490: PUSH
22491: LD_INT 4
22493: ARRAY
22494: STR
22495: PUSH
22496: LD_STRING )
22498: STR
22499: PPUSH
22500: CALL_OW 559
22504: GO 22414
22506: POP
22507: POP
// end ; end ;
22508: LD_VAR 0 1
22512: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
22513: LD_INT 0
22515: PPUSH
// if HexInfo ( x , y ) = warehouse then
22516: LD_VAR 0 2
22520: PPUSH
22521: LD_VAR 0 3
22525: PPUSH
22526: CALL_OW 428
22530: PUSH
22531: LD_VAR 0 1
22535: EQUAL
22536: IFFALSE 22563
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
22538: LD_ADDR_EXP 82
22542: PUSH
22543: LD_EXP 82
22547: PPUSH
22548: LD_VAR 0 1
22552: PPUSH
22553: LD_INT 0
22555: PPUSH
22556: CALL_OW 1
22560: ST_TO_ADDR
22561: GO 22614
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
22563: LD_ADDR_EXP 82
22567: PUSH
22568: LD_EXP 82
22572: PPUSH
22573: LD_VAR 0 1
22577: PPUSH
22578: LD_VAR 0 1
22582: PPUSH
22583: CALL_OW 255
22587: PUSH
22588: LD_VAR 0 1
22592: PUSH
22593: LD_VAR 0 2
22597: PUSH
22598: LD_VAR 0 3
22602: PUSH
22603: EMPTY
22604: LIST
22605: LIST
22606: LIST
22607: LIST
22608: PPUSH
22609: CALL_OW 1
22613: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
22614: CALL 22623 0 0
// end ;
22618: LD_VAR 0 4
22622: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
22623: LD_INT 0
22625: PPUSH
22626: PPUSH
22627: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
22628: LD_STRING resetWarehouseGatheringPoints();
22630: PPUSH
22631: CALL_OW 559
// if warehouseGatheringPoints then
22635: LD_EXP 82
22639: IFFALSE 22765
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
22641: LD_ADDR_VAR 0 3
22645: PUSH
22646: LD_EXP 82
22650: PPUSH
22651: CALL 64688 0 1
22655: ST_TO_ADDR
// for i := 1 to list do
22656: LD_ADDR_VAR 0 2
22660: PUSH
22661: DOUBLE
22662: LD_INT 1
22664: DEC
22665: ST_TO_ADDR
22666: LD_VAR 0 3
22670: PUSH
22671: FOR_TO
22672: IFFALSE 22763
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22674: LD_STRING setWarehouseGatheringPointXY(
22676: PUSH
22677: LD_VAR 0 3
22681: PUSH
22682: LD_VAR 0 2
22686: ARRAY
22687: PUSH
22688: LD_INT 1
22690: ARRAY
22691: STR
22692: PUSH
22693: LD_STRING ,
22695: STR
22696: PUSH
22697: LD_VAR 0 3
22701: PUSH
22702: LD_VAR 0 2
22706: ARRAY
22707: PUSH
22708: LD_INT 2
22710: ARRAY
22711: STR
22712: PUSH
22713: LD_STRING ,
22715: STR
22716: PUSH
22717: LD_VAR 0 3
22721: PUSH
22722: LD_VAR 0 2
22726: ARRAY
22727: PUSH
22728: LD_INT 3
22730: ARRAY
22731: STR
22732: PUSH
22733: LD_STRING ,
22735: STR
22736: PUSH
22737: LD_VAR 0 3
22741: PUSH
22742: LD_VAR 0 2
22746: ARRAY
22747: PUSH
22748: LD_INT 4
22750: ARRAY
22751: STR
22752: PUSH
22753: LD_STRING )
22755: STR
22756: PPUSH
22757: CALL_OW 559
22761: GO 22671
22763: POP
22764: POP
// end ; end ;
22765: LD_VAR 0 1
22769: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
22770: LD_EXP 82
22774: IFFALSE 23459
22776: GO 22778
22778: DISABLE
22779: LD_INT 0
22781: PPUSH
22782: PPUSH
22783: PPUSH
22784: PPUSH
22785: PPUSH
22786: PPUSH
22787: PPUSH
22788: PPUSH
22789: PPUSH
// begin enable ;
22790: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
22791: LD_ADDR_VAR 0 3
22795: PUSH
22796: LD_EXP 82
22800: PPUSH
22801: CALL 64688 0 1
22805: ST_TO_ADDR
// if not list then
22806: LD_VAR 0 3
22810: NOT
22811: IFFALSE 22815
// exit ;
22813: GO 23459
// for i := 1 to list do
22815: LD_ADDR_VAR 0 1
22819: PUSH
22820: DOUBLE
22821: LD_INT 1
22823: DEC
22824: ST_TO_ADDR
22825: LD_VAR 0 3
22829: PUSH
22830: FOR_TO
22831: IFFALSE 23457
// begin depot := list [ i ] [ 2 ] ;
22833: LD_ADDR_VAR 0 8
22837: PUSH
22838: LD_VAR 0 3
22842: PUSH
22843: LD_VAR 0 1
22847: ARRAY
22848: PUSH
22849: LD_INT 2
22851: ARRAY
22852: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
22853: LD_ADDR_VAR 0 5
22857: PUSH
22858: LD_VAR 0 3
22862: PUSH
22863: LD_VAR 0 1
22867: ARRAY
22868: PUSH
22869: LD_INT 1
22871: ARRAY
22872: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
22873: LD_VAR 0 8
22877: PPUSH
22878: CALL_OW 301
22882: PUSH
22883: LD_VAR 0 5
22887: PUSH
22888: LD_VAR 0 8
22892: PPUSH
22893: CALL_OW 255
22897: NONEQUAL
22898: OR
22899: IFFALSE 22928
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
22901: LD_ADDR_EXP 82
22905: PUSH
22906: LD_EXP 82
22910: PPUSH
22911: LD_VAR 0 8
22915: PPUSH
22916: LD_INT 0
22918: PPUSH
22919: CALL_OW 1
22923: ST_TO_ADDR
// exit ;
22924: POP
22925: POP
22926: GO 23459
// end ; x := list [ i ] [ 3 ] ;
22928: LD_ADDR_VAR 0 6
22932: PUSH
22933: LD_VAR 0 3
22937: PUSH
22938: LD_VAR 0 1
22942: ARRAY
22943: PUSH
22944: LD_INT 3
22946: ARRAY
22947: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
22948: LD_ADDR_VAR 0 7
22952: PUSH
22953: LD_VAR 0 3
22957: PUSH
22958: LD_VAR 0 1
22962: ARRAY
22963: PUSH
22964: LD_INT 4
22966: ARRAY
22967: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
22968: LD_ADDR_VAR 0 9
22972: PUSH
22973: LD_VAR 0 6
22977: PPUSH
22978: LD_VAR 0 7
22982: PPUSH
22983: LD_INT 16
22985: PPUSH
22986: CALL 63276 0 3
22990: ST_TO_ADDR
// if not cratesNearbyPoint then
22991: LD_VAR 0 9
22995: NOT
22996: IFFALSE 23002
// exit ;
22998: POP
22999: POP
23000: GO 23459
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
23002: LD_ADDR_VAR 0 4
23006: PUSH
23007: LD_INT 22
23009: PUSH
23010: LD_VAR 0 5
23014: PUSH
23015: EMPTY
23016: LIST
23017: LIST
23018: PUSH
23019: LD_INT 3
23021: PUSH
23022: LD_INT 60
23024: PUSH
23025: EMPTY
23026: LIST
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: PUSH
23032: LD_INT 91
23034: PUSH
23035: LD_VAR 0 8
23039: PUSH
23040: LD_INT 6
23042: PUSH
23043: EMPTY
23044: LIST
23045: LIST
23046: LIST
23047: PUSH
23048: LD_INT 2
23050: PUSH
23051: LD_INT 25
23053: PUSH
23054: LD_INT 2
23056: PUSH
23057: EMPTY
23058: LIST
23059: LIST
23060: PUSH
23061: LD_INT 25
23063: PUSH
23064: LD_INT 16
23066: PUSH
23067: EMPTY
23068: LIST
23069: LIST
23070: PUSH
23071: EMPTY
23072: LIST
23073: LIST
23074: LIST
23075: PUSH
23076: EMPTY
23077: LIST
23078: LIST
23079: LIST
23080: LIST
23081: PPUSH
23082: CALL_OW 69
23086: PUSH
23087: LD_VAR 0 8
23091: PPUSH
23092: CALL_OW 313
23096: PPUSH
23097: LD_INT 3
23099: PUSH
23100: LD_INT 60
23102: PUSH
23103: EMPTY
23104: LIST
23105: PUSH
23106: EMPTY
23107: LIST
23108: LIST
23109: PUSH
23110: LD_INT 2
23112: PUSH
23113: LD_INT 25
23115: PUSH
23116: LD_INT 2
23118: PUSH
23119: EMPTY
23120: LIST
23121: LIST
23122: PUSH
23123: LD_INT 25
23125: PUSH
23126: LD_INT 16
23128: PUSH
23129: EMPTY
23130: LIST
23131: LIST
23132: PUSH
23133: EMPTY
23134: LIST
23135: LIST
23136: LIST
23137: PUSH
23138: EMPTY
23139: LIST
23140: LIST
23141: PPUSH
23142: CALL_OW 72
23146: UNION
23147: ST_TO_ADDR
// if tmp then
23148: LD_VAR 0 4
23152: IFFALSE 23232
// begin tmp := ShrinkArray ( tmp , 3 ) ;
23154: LD_ADDR_VAR 0 4
23158: PUSH
23159: LD_VAR 0 4
23163: PPUSH
23164: LD_INT 3
23166: PPUSH
23167: CALL 61245 0 2
23171: ST_TO_ADDR
// for j in tmp do
23172: LD_ADDR_VAR 0 2
23176: PUSH
23177: LD_VAR 0 4
23181: PUSH
23182: FOR_IN
23183: IFFALSE 23226
// begin if IsInUnit ( j ) then
23185: LD_VAR 0 2
23189: PPUSH
23190: CALL_OW 310
23194: IFFALSE 23205
// ComExit ( j ) ;
23196: LD_VAR 0 2
23200: PPUSH
23201: CALL 61328 0 1
// AddComCollect ( j , x , y ) ;
23205: LD_VAR 0 2
23209: PPUSH
23210: LD_VAR 0 6
23214: PPUSH
23215: LD_VAR 0 7
23219: PPUSH
23220: CALL_OW 177
// end ;
23224: GO 23182
23226: POP
23227: POP
// exit ;
23228: POP
23229: POP
23230: GO 23459
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
23232: LD_ADDR_VAR 0 4
23236: PUSH
23237: LD_INT 22
23239: PUSH
23240: LD_VAR 0 5
23244: PUSH
23245: EMPTY
23246: LIST
23247: LIST
23248: PUSH
23249: LD_INT 91
23251: PUSH
23252: LD_VAR 0 8
23256: PUSH
23257: LD_INT 8
23259: PUSH
23260: EMPTY
23261: LIST
23262: LIST
23263: LIST
23264: PUSH
23265: LD_INT 2
23267: PUSH
23268: LD_INT 34
23270: PUSH
23271: LD_INT 12
23273: PUSH
23274: EMPTY
23275: LIST
23276: LIST
23277: PUSH
23278: LD_INT 34
23280: PUSH
23281: LD_INT 51
23283: PUSH
23284: EMPTY
23285: LIST
23286: LIST
23287: PUSH
23288: LD_INT 34
23290: PUSH
23291: LD_INT 32
23293: PUSH
23294: EMPTY
23295: LIST
23296: LIST
23297: PUSH
23298: LD_INT 34
23300: PUSH
23301: LD_INT 89
23303: PUSH
23304: EMPTY
23305: LIST
23306: LIST
23307: PUSH
23308: EMPTY
23309: LIST
23310: LIST
23311: LIST
23312: LIST
23313: LIST
23314: PUSH
23315: EMPTY
23316: LIST
23317: LIST
23318: LIST
23319: PPUSH
23320: CALL_OW 69
23324: ST_TO_ADDR
// if tmp then
23325: LD_VAR 0 4
23329: IFFALSE 23455
// begin for j in tmp do
23331: LD_ADDR_VAR 0 2
23335: PUSH
23336: LD_VAR 0 4
23340: PUSH
23341: FOR_IN
23342: IFFALSE 23453
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
23344: LD_VAR 0 2
23348: PPUSH
23349: CALL_OW 262
23353: PUSH
23354: LD_INT 3
23356: EQUAL
23357: PUSH
23358: LD_VAR 0 2
23362: PPUSH
23363: CALL_OW 261
23367: PUSH
23368: LD_INT 20
23370: GREATER
23371: OR
23372: PUSH
23373: LD_VAR 0 2
23377: PPUSH
23378: CALL_OW 314
23382: NOT
23383: AND
23384: PUSH
23385: LD_VAR 0 2
23389: PPUSH
23390: CALL_OW 263
23394: PUSH
23395: LD_INT 1
23397: NONEQUAL
23398: PUSH
23399: LD_VAR 0 2
23403: PPUSH
23404: CALL_OW 311
23408: OR
23409: AND
23410: IFFALSE 23451
// begin ComCollect ( j , x , y ) ;
23412: LD_VAR 0 2
23416: PPUSH
23417: LD_VAR 0 6
23421: PPUSH
23422: LD_VAR 0 7
23426: PPUSH
23427: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
23431: LD_VAR 0 2
23435: PPUSH
23436: LD_VAR 0 8
23440: PPUSH
23441: CALL_OW 172
// exit ;
23445: POP
23446: POP
23447: POP
23448: POP
23449: GO 23459
// end ;
23451: GO 23341
23453: POP
23454: POP
// end ; end ;
23455: GO 22830
23457: POP
23458: POP
// end ; end_of_file end_of_file
23459: PPOPN 9
23461: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
23462: LD_INT 0
23464: PPUSH
23465: PPUSH
// if exist_mode then
23466: LD_VAR 0 2
23470: IFFALSE 23495
// unit := CreateCharacter ( prefix & ident ) else
23472: LD_ADDR_VAR 0 5
23476: PUSH
23477: LD_VAR 0 3
23481: PUSH
23482: LD_VAR 0 1
23486: STR
23487: PPUSH
23488: CALL_OW 34
23492: ST_TO_ADDR
23493: GO 23510
// unit := NewCharacter ( ident ) ;
23495: LD_ADDR_VAR 0 5
23499: PUSH
23500: LD_VAR 0 1
23504: PPUSH
23505: CALL_OW 25
23509: ST_TO_ADDR
// result := unit ;
23510: LD_ADDR_VAR 0 4
23514: PUSH
23515: LD_VAR 0 5
23519: ST_TO_ADDR
// end ;
23520: LD_VAR 0 4
23524: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
23525: LD_INT 0
23527: PPUSH
23528: PPUSH
// if not side or not nation then
23529: LD_VAR 0 1
23533: NOT
23534: PUSH
23535: LD_VAR 0 2
23539: NOT
23540: OR
23541: IFFALSE 23545
// exit ;
23543: GO 24313
// case nation of nation_american :
23545: LD_VAR 0 2
23549: PUSH
23550: LD_INT 1
23552: DOUBLE
23553: EQUAL
23554: IFTRUE 23558
23556: GO 23772
23558: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
23559: LD_ADDR_VAR 0 4
23563: PUSH
23564: LD_INT 35
23566: PUSH
23567: LD_INT 45
23569: PUSH
23570: LD_INT 46
23572: PUSH
23573: LD_INT 47
23575: PUSH
23576: LD_INT 82
23578: PUSH
23579: LD_INT 83
23581: PUSH
23582: LD_INT 84
23584: PUSH
23585: LD_INT 85
23587: PUSH
23588: LD_INT 86
23590: PUSH
23591: LD_INT 1
23593: PUSH
23594: LD_INT 2
23596: PUSH
23597: LD_INT 6
23599: PUSH
23600: LD_INT 15
23602: PUSH
23603: LD_INT 16
23605: PUSH
23606: LD_INT 7
23608: PUSH
23609: LD_INT 12
23611: PUSH
23612: LD_INT 13
23614: PUSH
23615: LD_INT 10
23617: PUSH
23618: LD_INT 14
23620: PUSH
23621: LD_INT 20
23623: PUSH
23624: LD_INT 21
23626: PUSH
23627: LD_INT 22
23629: PUSH
23630: LD_INT 25
23632: PUSH
23633: LD_INT 32
23635: PUSH
23636: LD_INT 27
23638: PUSH
23639: LD_INT 36
23641: PUSH
23642: LD_INT 69
23644: PUSH
23645: LD_INT 39
23647: PUSH
23648: LD_INT 34
23650: PUSH
23651: LD_INT 40
23653: PUSH
23654: LD_INT 48
23656: PUSH
23657: LD_INT 49
23659: PUSH
23660: LD_INT 50
23662: PUSH
23663: LD_INT 51
23665: PUSH
23666: LD_INT 52
23668: PUSH
23669: LD_INT 53
23671: PUSH
23672: LD_INT 54
23674: PUSH
23675: LD_INT 55
23677: PUSH
23678: LD_INT 56
23680: PUSH
23681: LD_INT 57
23683: PUSH
23684: LD_INT 58
23686: PUSH
23687: LD_INT 59
23689: PUSH
23690: LD_INT 60
23692: PUSH
23693: LD_INT 61
23695: PUSH
23696: LD_INT 62
23698: PUSH
23699: LD_INT 80
23701: PUSH
23702: LD_INT 82
23704: PUSH
23705: LD_INT 83
23707: PUSH
23708: LD_INT 84
23710: PUSH
23711: LD_INT 85
23713: PUSH
23714: LD_INT 86
23716: PUSH
23717: EMPTY
23718: LIST
23719: LIST
23720: LIST
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: ST_TO_ADDR
23770: GO 24237
23772: LD_INT 2
23774: DOUBLE
23775: EQUAL
23776: IFTRUE 23780
23778: GO 24006
23780: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
23781: LD_ADDR_VAR 0 4
23785: PUSH
23786: LD_INT 35
23788: PUSH
23789: LD_INT 45
23791: PUSH
23792: LD_INT 46
23794: PUSH
23795: LD_INT 47
23797: PUSH
23798: LD_INT 82
23800: PUSH
23801: LD_INT 83
23803: PUSH
23804: LD_INT 84
23806: PUSH
23807: LD_INT 85
23809: PUSH
23810: LD_INT 87
23812: PUSH
23813: LD_INT 70
23815: PUSH
23816: LD_INT 1
23818: PUSH
23819: LD_INT 11
23821: PUSH
23822: LD_INT 3
23824: PUSH
23825: LD_INT 4
23827: PUSH
23828: LD_INT 5
23830: PUSH
23831: LD_INT 6
23833: PUSH
23834: LD_INT 15
23836: PUSH
23837: LD_INT 18
23839: PUSH
23840: LD_INT 7
23842: PUSH
23843: LD_INT 17
23845: PUSH
23846: LD_INT 8
23848: PUSH
23849: LD_INT 20
23851: PUSH
23852: LD_INT 21
23854: PUSH
23855: LD_INT 22
23857: PUSH
23858: LD_INT 72
23860: PUSH
23861: LD_INT 26
23863: PUSH
23864: LD_INT 69
23866: PUSH
23867: LD_INT 39
23869: PUSH
23870: LD_INT 40
23872: PUSH
23873: LD_INT 41
23875: PUSH
23876: LD_INT 42
23878: PUSH
23879: LD_INT 43
23881: PUSH
23882: LD_INT 48
23884: PUSH
23885: LD_INT 49
23887: PUSH
23888: LD_INT 50
23890: PUSH
23891: LD_INT 51
23893: PUSH
23894: LD_INT 52
23896: PUSH
23897: LD_INT 53
23899: PUSH
23900: LD_INT 54
23902: PUSH
23903: LD_INT 55
23905: PUSH
23906: LD_INT 56
23908: PUSH
23909: LD_INT 60
23911: PUSH
23912: LD_INT 61
23914: PUSH
23915: LD_INT 62
23917: PUSH
23918: LD_INT 66
23920: PUSH
23921: LD_INT 67
23923: PUSH
23924: LD_INT 68
23926: PUSH
23927: LD_INT 81
23929: PUSH
23930: LD_INT 82
23932: PUSH
23933: LD_INT 83
23935: PUSH
23936: LD_INT 84
23938: PUSH
23939: LD_INT 85
23941: PUSH
23942: LD_INT 87
23944: PUSH
23945: LD_INT 88
23947: PUSH
23948: EMPTY
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: ST_TO_ADDR
24004: GO 24237
24006: LD_INT 3
24008: DOUBLE
24009: EQUAL
24010: IFTRUE 24014
24012: GO 24236
24014: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
24015: LD_ADDR_VAR 0 4
24019: PUSH
24020: LD_INT 46
24022: PUSH
24023: LD_INT 47
24025: PUSH
24026: LD_INT 1
24028: PUSH
24029: LD_INT 2
24031: PUSH
24032: LD_INT 82
24034: PUSH
24035: LD_INT 83
24037: PUSH
24038: LD_INT 84
24040: PUSH
24041: LD_INT 85
24043: PUSH
24044: LD_INT 86
24046: PUSH
24047: LD_INT 11
24049: PUSH
24050: LD_INT 9
24052: PUSH
24053: LD_INT 20
24055: PUSH
24056: LD_INT 19
24058: PUSH
24059: LD_INT 21
24061: PUSH
24062: LD_INT 24
24064: PUSH
24065: LD_INT 22
24067: PUSH
24068: LD_INT 25
24070: PUSH
24071: LD_INT 28
24073: PUSH
24074: LD_INT 29
24076: PUSH
24077: LD_INT 30
24079: PUSH
24080: LD_INT 31
24082: PUSH
24083: LD_INT 37
24085: PUSH
24086: LD_INT 38
24088: PUSH
24089: LD_INT 32
24091: PUSH
24092: LD_INT 27
24094: PUSH
24095: LD_INT 33
24097: PUSH
24098: LD_INT 69
24100: PUSH
24101: LD_INT 39
24103: PUSH
24104: LD_INT 34
24106: PUSH
24107: LD_INT 40
24109: PUSH
24110: LD_INT 71
24112: PUSH
24113: LD_INT 23
24115: PUSH
24116: LD_INT 44
24118: PUSH
24119: LD_INT 48
24121: PUSH
24122: LD_INT 49
24124: PUSH
24125: LD_INT 50
24127: PUSH
24128: LD_INT 51
24130: PUSH
24131: LD_INT 52
24133: PUSH
24134: LD_INT 53
24136: PUSH
24137: LD_INT 54
24139: PUSH
24140: LD_INT 55
24142: PUSH
24143: LD_INT 56
24145: PUSH
24146: LD_INT 57
24148: PUSH
24149: LD_INT 58
24151: PUSH
24152: LD_INT 59
24154: PUSH
24155: LD_INT 63
24157: PUSH
24158: LD_INT 64
24160: PUSH
24161: LD_INT 65
24163: PUSH
24164: LD_INT 82
24166: PUSH
24167: LD_INT 83
24169: PUSH
24170: LD_INT 84
24172: PUSH
24173: LD_INT 85
24175: PUSH
24176: LD_INT 86
24178: PUSH
24179: EMPTY
24180: LIST
24181: LIST
24182: LIST
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: ST_TO_ADDR
24234: GO 24237
24236: POP
// if state > - 1 and state < 3 then
24237: LD_VAR 0 3
24241: PUSH
24242: LD_INT 1
24244: NEG
24245: GREATER
24246: PUSH
24247: LD_VAR 0 3
24251: PUSH
24252: LD_INT 3
24254: LESS
24255: AND
24256: IFFALSE 24313
// for i in result do
24258: LD_ADDR_VAR 0 5
24262: PUSH
24263: LD_VAR 0 4
24267: PUSH
24268: FOR_IN
24269: IFFALSE 24311
// if GetTech ( i , side ) <> state then
24271: LD_VAR 0 5
24275: PPUSH
24276: LD_VAR 0 1
24280: PPUSH
24281: CALL_OW 321
24285: PUSH
24286: LD_VAR 0 3
24290: NONEQUAL
24291: IFFALSE 24309
// result := result diff i ;
24293: LD_ADDR_VAR 0 4
24297: PUSH
24298: LD_VAR 0 4
24302: PUSH
24303: LD_VAR 0 5
24307: DIFF
24308: ST_TO_ADDR
24309: GO 24268
24311: POP
24312: POP
// end ;
24313: LD_VAR 0 4
24317: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
24318: LD_INT 0
24320: PPUSH
24321: PPUSH
24322: PPUSH
// result := true ;
24323: LD_ADDR_VAR 0 3
24327: PUSH
24328: LD_INT 1
24330: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
24331: LD_ADDR_VAR 0 5
24335: PUSH
24336: LD_VAR 0 2
24340: PPUSH
24341: CALL_OW 480
24345: ST_TO_ADDR
// if not tmp then
24346: LD_VAR 0 5
24350: NOT
24351: IFFALSE 24355
// exit ;
24353: GO 24404
// for i in tmp do
24355: LD_ADDR_VAR 0 4
24359: PUSH
24360: LD_VAR 0 5
24364: PUSH
24365: FOR_IN
24366: IFFALSE 24402
// if GetTech ( i , side ) <> state_researched then
24368: LD_VAR 0 4
24372: PPUSH
24373: LD_VAR 0 1
24377: PPUSH
24378: CALL_OW 321
24382: PUSH
24383: LD_INT 2
24385: NONEQUAL
24386: IFFALSE 24400
// begin result := false ;
24388: LD_ADDR_VAR 0 3
24392: PUSH
24393: LD_INT 0
24395: ST_TO_ADDR
// exit ;
24396: POP
24397: POP
24398: GO 24404
// end ;
24400: GO 24365
24402: POP
24403: POP
// end ;
24404: LD_VAR 0 3
24408: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
24409: LD_INT 0
24411: PPUSH
24412: PPUSH
24413: PPUSH
24414: PPUSH
24415: PPUSH
24416: PPUSH
24417: PPUSH
24418: PPUSH
24419: PPUSH
24420: PPUSH
24421: PPUSH
24422: PPUSH
24423: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
24424: LD_VAR 0 1
24428: NOT
24429: PUSH
24430: LD_VAR 0 1
24434: PPUSH
24435: CALL_OW 257
24439: PUSH
24440: LD_INT 9
24442: NONEQUAL
24443: OR
24444: IFFALSE 24448
// exit ;
24446: GO 25021
// side := GetSide ( unit ) ;
24448: LD_ADDR_VAR 0 9
24452: PUSH
24453: LD_VAR 0 1
24457: PPUSH
24458: CALL_OW 255
24462: ST_TO_ADDR
// tech_space := tech_spacanom ;
24463: LD_ADDR_VAR 0 12
24467: PUSH
24468: LD_INT 29
24470: ST_TO_ADDR
// tech_time := tech_taurad ;
24471: LD_ADDR_VAR 0 13
24475: PUSH
24476: LD_INT 28
24478: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
24479: LD_ADDR_VAR 0 11
24483: PUSH
24484: LD_VAR 0 1
24488: PPUSH
24489: CALL_OW 310
24493: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
24494: LD_VAR 0 11
24498: PPUSH
24499: CALL_OW 247
24503: PUSH
24504: LD_INT 2
24506: EQUAL
24507: IFFALSE 24511
// exit ;
24509: GO 25021
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24511: LD_ADDR_VAR 0 8
24515: PUSH
24516: LD_INT 81
24518: PUSH
24519: LD_VAR 0 9
24523: PUSH
24524: EMPTY
24525: LIST
24526: LIST
24527: PUSH
24528: LD_INT 3
24530: PUSH
24531: LD_INT 21
24533: PUSH
24534: LD_INT 3
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: PUSH
24541: EMPTY
24542: LIST
24543: LIST
24544: PUSH
24545: EMPTY
24546: LIST
24547: LIST
24548: PPUSH
24549: CALL_OW 69
24553: ST_TO_ADDR
// if not tmp then
24554: LD_VAR 0 8
24558: NOT
24559: IFFALSE 24563
// exit ;
24561: GO 25021
// if in_unit then
24563: LD_VAR 0 11
24567: IFFALSE 24591
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
24569: LD_ADDR_VAR 0 10
24573: PUSH
24574: LD_VAR 0 8
24578: PPUSH
24579: LD_VAR 0 11
24583: PPUSH
24584: CALL_OW 74
24588: ST_TO_ADDR
24589: GO 24611
// enemy := NearestUnitToUnit ( tmp , unit ) ;
24591: LD_ADDR_VAR 0 10
24595: PUSH
24596: LD_VAR 0 8
24600: PPUSH
24601: LD_VAR 0 1
24605: PPUSH
24606: CALL_OW 74
24610: ST_TO_ADDR
// if not enemy then
24611: LD_VAR 0 10
24615: NOT
24616: IFFALSE 24620
// exit ;
24618: GO 25021
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
24620: LD_VAR 0 11
24624: PUSH
24625: LD_VAR 0 11
24629: PPUSH
24630: LD_VAR 0 10
24634: PPUSH
24635: CALL_OW 296
24639: PUSH
24640: LD_INT 13
24642: GREATER
24643: AND
24644: PUSH
24645: LD_VAR 0 1
24649: PPUSH
24650: LD_VAR 0 10
24654: PPUSH
24655: CALL_OW 296
24659: PUSH
24660: LD_INT 12
24662: GREATER
24663: OR
24664: IFFALSE 24668
// exit ;
24666: GO 25021
// missile := [ 1 ] ;
24668: LD_ADDR_VAR 0 14
24672: PUSH
24673: LD_INT 1
24675: PUSH
24676: EMPTY
24677: LIST
24678: ST_TO_ADDR
// if Researched ( side , tech_space ) then
24679: LD_VAR 0 9
24683: PPUSH
24684: LD_VAR 0 12
24688: PPUSH
24689: CALL_OW 325
24693: IFFALSE 24722
// missile := Replace ( missile , missile + 1 , 2 ) ;
24695: LD_ADDR_VAR 0 14
24699: PUSH
24700: LD_VAR 0 14
24704: PPUSH
24705: LD_VAR 0 14
24709: PUSH
24710: LD_INT 1
24712: PLUS
24713: PPUSH
24714: LD_INT 2
24716: PPUSH
24717: CALL_OW 1
24721: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
24722: LD_VAR 0 9
24726: PPUSH
24727: LD_VAR 0 13
24731: PPUSH
24732: CALL_OW 325
24736: PUSH
24737: LD_VAR 0 10
24741: PPUSH
24742: CALL_OW 255
24746: PPUSH
24747: LD_VAR 0 13
24751: PPUSH
24752: CALL_OW 325
24756: NOT
24757: AND
24758: IFFALSE 24787
// missile := Replace ( missile , missile + 1 , 3 ) ;
24760: LD_ADDR_VAR 0 14
24764: PUSH
24765: LD_VAR 0 14
24769: PPUSH
24770: LD_VAR 0 14
24774: PUSH
24775: LD_INT 1
24777: PLUS
24778: PPUSH
24779: LD_INT 3
24781: PPUSH
24782: CALL_OW 1
24786: ST_TO_ADDR
// if missile < 2 then
24787: LD_VAR 0 14
24791: PUSH
24792: LD_INT 2
24794: LESS
24795: IFFALSE 24799
// exit ;
24797: GO 25021
// x := GetX ( enemy ) ;
24799: LD_ADDR_VAR 0 4
24803: PUSH
24804: LD_VAR 0 10
24808: PPUSH
24809: CALL_OW 250
24813: ST_TO_ADDR
// y := GetY ( enemy ) ;
24814: LD_ADDR_VAR 0 5
24818: PUSH
24819: LD_VAR 0 10
24823: PPUSH
24824: CALL_OW 251
24828: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
24829: LD_ADDR_VAR 0 6
24833: PUSH
24834: LD_VAR 0 4
24838: PUSH
24839: LD_INT 1
24841: NEG
24842: PPUSH
24843: LD_INT 1
24845: PPUSH
24846: CALL_OW 12
24850: PLUS
24851: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
24852: LD_ADDR_VAR 0 7
24856: PUSH
24857: LD_VAR 0 5
24861: PUSH
24862: LD_INT 1
24864: NEG
24865: PPUSH
24866: LD_INT 1
24868: PPUSH
24869: CALL_OW 12
24873: PLUS
24874: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24875: LD_VAR 0 6
24879: PPUSH
24880: LD_VAR 0 7
24884: PPUSH
24885: CALL_OW 488
24889: NOT
24890: IFFALSE 24912
// begin _x := x ;
24892: LD_ADDR_VAR 0 6
24896: PUSH
24897: LD_VAR 0 4
24901: ST_TO_ADDR
// _y := y ;
24902: LD_ADDR_VAR 0 7
24906: PUSH
24907: LD_VAR 0 5
24911: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
24912: LD_ADDR_VAR 0 3
24916: PUSH
24917: LD_INT 1
24919: PPUSH
24920: LD_VAR 0 14
24924: PPUSH
24925: CALL_OW 12
24929: ST_TO_ADDR
// case i of 1 :
24930: LD_VAR 0 3
24934: PUSH
24935: LD_INT 1
24937: DOUBLE
24938: EQUAL
24939: IFTRUE 24943
24941: GO 24960
24943: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
24944: LD_VAR 0 1
24948: PPUSH
24949: LD_VAR 0 10
24953: PPUSH
24954: CALL_OW 115
24958: GO 25021
24960: LD_INT 2
24962: DOUBLE
24963: EQUAL
24964: IFTRUE 24968
24966: GO 24990
24968: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
24969: LD_VAR 0 1
24973: PPUSH
24974: LD_VAR 0 6
24978: PPUSH
24979: LD_VAR 0 7
24983: PPUSH
24984: CALL_OW 153
24988: GO 25021
24990: LD_INT 3
24992: DOUBLE
24993: EQUAL
24994: IFTRUE 24998
24996: GO 25020
24998: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
24999: LD_VAR 0 1
25003: PPUSH
25004: LD_VAR 0 6
25008: PPUSH
25009: LD_VAR 0 7
25013: PPUSH
25014: CALL_OW 154
25018: GO 25021
25020: POP
// end ;
25021: LD_VAR 0 2
25025: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
25026: LD_INT 0
25028: PPUSH
25029: PPUSH
25030: PPUSH
25031: PPUSH
25032: PPUSH
25033: PPUSH
// if not unit or not building then
25034: LD_VAR 0 1
25038: NOT
25039: PUSH
25040: LD_VAR 0 2
25044: NOT
25045: OR
25046: IFFALSE 25050
// exit ;
25048: GO 25208
// x := GetX ( building ) ;
25050: LD_ADDR_VAR 0 5
25054: PUSH
25055: LD_VAR 0 2
25059: PPUSH
25060: CALL_OW 250
25064: ST_TO_ADDR
// y := GetY ( building ) ;
25065: LD_ADDR_VAR 0 6
25069: PUSH
25070: LD_VAR 0 2
25074: PPUSH
25075: CALL_OW 251
25079: ST_TO_ADDR
// for i = 0 to 5 do
25080: LD_ADDR_VAR 0 4
25084: PUSH
25085: DOUBLE
25086: LD_INT 0
25088: DEC
25089: ST_TO_ADDR
25090: LD_INT 5
25092: PUSH
25093: FOR_TO
25094: IFFALSE 25206
// begin _x := ShiftX ( x , i , 3 ) ;
25096: LD_ADDR_VAR 0 7
25100: PUSH
25101: LD_VAR 0 5
25105: PPUSH
25106: LD_VAR 0 4
25110: PPUSH
25111: LD_INT 3
25113: PPUSH
25114: CALL_OW 272
25118: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
25119: LD_ADDR_VAR 0 8
25123: PUSH
25124: LD_VAR 0 6
25128: PPUSH
25129: LD_VAR 0 4
25133: PPUSH
25134: LD_INT 3
25136: PPUSH
25137: CALL_OW 273
25141: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25142: LD_VAR 0 7
25146: PPUSH
25147: LD_VAR 0 8
25151: PPUSH
25152: CALL_OW 488
25156: NOT
25157: IFFALSE 25161
// continue ;
25159: GO 25093
// if HexInfo ( _x , _y ) = 0 then
25161: LD_VAR 0 7
25165: PPUSH
25166: LD_VAR 0 8
25170: PPUSH
25171: CALL_OW 428
25175: PUSH
25176: LD_INT 0
25178: EQUAL
25179: IFFALSE 25204
// begin ComMoveXY ( unit , _x , _y ) ;
25181: LD_VAR 0 1
25185: PPUSH
25186: LD_VAR 0 7
25190: PPUSH
25191: LD_VAR 0 8
25195: PPUSH
25196: CALL_OW 111
// exit ;
25200: POP
25201: POP
25202: GO 25208
// end ; end ;
25204: GO 25093
25206: POP
25207: POP
// end ;
25208: LD_VAR 0 3
25212: RET
// export function ScanBase ( side , base_area ) ; begin
25213: LD_INT 0
25215: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
25216: LD_ADDR_VAR 0 3
25220: PUSH
25221: LD_VAR 0 2
25225: PPUSH
25226: LD_INT 81
25228: PUSH
25229: LD_VAR 0 1
25233: PUSH
25234: EMPTY
25235: LIST
25236: LIST
25237: PPUSH
25238: CALL_OW 70
25242: ST_TO_ADDR
// end ;
25243: LD_VAR 0 3
25247: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
25248: LD_INT 0
25250: PPUSH
25251: PPUSH
25252: PPUSH
25253: PPUSH
// result := false ;
25254: LD_ADDR_VAR 0 2
25258: PUSH
25259: LD_INT 0
25261: ST_TO_ADDR
// side := GetSide ( unit ) ;
25262: LD_ADDR_VAR 0 3
25266: PUSH
25267: LD_VAR 0 1
25271: PPUSH
25272: CALL_OW 255
25276: ST_TO_ADDR
// nat := GetNation ( unit ) ;
25277: LD_ADDR_VAR 0 4
25281: PUSH
25282: LD_VAR 0 1
25286: PPUSH
25287: CALL_OW 248
25291: ST_TO_ADDR
// case nat of 1 :
25292: LD_VAR 0 4
25296: PUSH
25297: LD_INT 1
25299: DOUBLE
25300: EQUAL
25301: IFTRUE 25305
25303: GO 25316
25305: POP
// tech := tech_lassight ; 2 :
25306: LD_ADDR_VAR 0 5
25310: PUSH
25311: LD_INT 12
25313: ST_TO_ADDR
25314: GO 25355
25316: LD_INT 2
25318: DOUBLE
25319: EQUAL
25320: IFTRUE 25324
25322: GO 25335
25324: POP
// tech := tech_mortar ; 3 :
25325: LD_ADDR_VAR 0 5
25329: PUSH
25330: LD_INT 41
25332: ST_TO_ADDR
25333: GO 25355
25335: LD_INT 3
25337: DOUBLE
25338: EQUAL
25339: IFTRUE 25343
25341: GO 25354
25343: POP
// tech := tech_bazooka ; end ;
25344: LD_ADDR_VAR 0 5
25348: PUSH
25349: LD_INT 44
25351: ST_TO_ADDR
25352: GO 25355
25354: POP
// if Researched ( side , tech ) then
25355: LD_VAR 0 3
25359: PPUSH
25360: LD_VAR 0 5
25364: PPUSH
25365: CALL_OW 325
25369: IFFALSE 25396
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
25371: LD_ADDR_VAR 0 2
25375: PUSH
25376: LD_INT 5
25378: PUSH
25379: LD_INT 8
25381: PUSH
25382: LD_INT 9
25384: PUSH
25385: EMPTY
25386: LIST
25387: LIST
25388: LIST
25389: PUSH
25390: LD_VAR 0 4
25394: ARRAY
25395: ST_TO_ADDR
// end ;
25396: LD_VAR 0 2
25400: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
25401: LD_INT 0
25403: PPUSH
25404: PPUSH
25405: PPUSH
// if not mines then
25406: LD_VAR 0 2
25410: NOT
25411: IFFALSE 25415
// exit ;
25413: GO 25559
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25415: LD_ADDR_VAR 0 5
25419: PUSH
25420: LD_INT 81
25422: PUSH
25423: LD_VAR 0 1
25427: PUSH
25428: EMPTY
25429: LIST
25430: LIST
25431: PUSH
25432: LD_INT 3
25434: PUSH
25435: LD_INT 21
25437: PUSH
25438: LD_INT 3
25440: PUSH
25441: EMPTY
25442: LIST
25443: LIST
25444: PUSH
25445: EMPTY
25446: LIST
25447: LIST
25448: PUSH
25449: EMPTY
25450: LIST
25451: LIST
25452: PPUSH
25453: CALL_OW 69
25457: ST_TO_ADDR
// for i in mines do
25458: LD_ADDR_VAR 0 4
25462: PUSH
25463: LD_VAR 0 2
25467: PUSH
25468: FOR_IN
25469: IFFALSE 25557
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
25471: LD_VAR 0 4
25475: PUSH
25476: LD_INT 1
25478: ARRAY
25479: PPUSH
25480: LD_VAR 0 4
25484: PUSH
25485: LD_INT 2
25487: ARRAY
25488: PPUSH
25489: CALL_OW 458
25493: NOT
25494: IFFALSE 25498
// continue ;
25496: GO 25468
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
25498: LD_VAR 0 4
25502: PUSH
25503: LD_INT 1
25505: ARRAY
25506: PPUSH
25507: LD_VAR 0 4
25511: PUSH
25512: LD_INT 2
25514: ARRAY
25515: PPUSH
25516: CALL_OW 428
25520: PUSH
25521: LD_VAR 0 5
25525: IN
25526: IFFALSE 25555
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
25528: LD_VAR 0 4
25532: PUSH
25533: LD_INT 1
25535: ARRAY
25536: PPUSH
25537: LD_VAR 0 4
25541: PUSH
25542: LD_INT 2
25544: ARRAY
25545: PPUSH
25546: LD_VAR 0 1
25550: PPUSH
25551: CALL_OW 456
// end ;
25555: GO 25468
25557: POP
25558: POP
// end ;
25559: LD_VAR 0 3
25563: RET
// export function Count ( array ) ; var i ; begin
25564: LD_INT 0
25566: PPUSH
25567: PPUSH
// result := 0 ;
25568: LD_ADDR_VAR 0 2
25572: PUSH
25573: LD_INT 0
25575: ST_TO_ADDR
// for i in array do
25576: LD_ADDR_VAR 0 3
25580: PUSH
25581: LD_VAR 0 1
25585: PUSH
25586: FOR_IN
25587: IFFALSE 25611
// if i then
25589: LD_VAR 0 3
25593: IFFALSE 25609
// result := result + 1 ;
25595: LD_ADDR_VAR 0 2
25599: PUSH
25600: LD_VAR 0 2
25604: PUSH
25605: LD_INT 1
25607: PLUS
25608: ST_TO_ADDR
25609: GO 25586
25611: POP
25612: POP
// end ;
25613: LD_VAR 0 2
25617: RET
// export function IsEmpty ( building ) ; begin
25618: LD_INT 0
25620: PPUSH
// if not building then
25621: LD_VAR 0 1
25625: NOT
25626: IFFALSE 25630
// exit ;
25628: GO 25673
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
25630: LD_ADDR_VAR 0 2
25634: PUSH
25635: LD_VAR 0 1
25639: PUSH
25640: LD_INT 22
25642: PUSH
25643: LD_VAR 0 1
25647: PPUSH
25648: CALL_OW 255
25652: PUSH
25653: EMPTY
25654: LIST
25655: LIST
25656: PUSH
25657: LD_INT 58
25659: PUSH
25660: EMPTY
25661: LIST
25662: PUSH
25663: EMPTY
25664: LIST
25665: LIST
25666: PPUSH
25667: CALL_OW 69
25671: IN
25672: ST_TO_ADDR
// end ;
25673: LD_VAR 0 2
25677: RET
// export function IsNotFull ( building ) ; var places ; begin
25678: LD_INT 0
25680: PPUSH
25681: PPUSH
// if not building then
25682: LD_VAR 0 1
25686: NOT
25687: IFFALSE 25691
// exit ;
25689: GO 25862
// result := false ;
25691: LD_ADDR_VAR 0 2
25695: PUSH
25696: LD_INT 0
25698: ST_TO_ADDR
// places := 0 ;
25699: LD_ADDR_VAR 0 3
25703: PUSH
25704: LD_INT 0
25706: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
25707: LD_VAR 0 1
25711: PPUSH
25712: CALL_OW 266
25716: PUSH
25717: LD_INT 0
25719: DOUBLE
25720: EQUAL
25721: IFTRUE 25779
25723: LD_INT 1
25725: DOUBLE
25726: EQUAL
25727: IFTRUE 25779
25729: LD_INT 6
25731: DOUBLE
25732: EQUAL
25733: IFTRUE 25779
25735: LD_INT 7
25737: DOUBLE
25738: EQUAL
25739: IFTRUE 25779
25741: LD_INT 8
25743: DOUBLE
25744: EQUAL
25745: IFTRUE 25779
25747: LD_INT 4
25749: DOUBLE
25750: EQUAL
25751: IFTRUE 25779
25753: LD_INT 5
25755: DOUBLE
25756: EQUAL
25757: IFTRUE 25779
25759: LD_INT 2
25761: DOUBLE
25762: EQUAL
25763: IFTRUE 25779
25765: LD_INT 3
25767: DOUBLE
25768: EQUAL
25769: IFTRUE 25779
25771: LD_INT 35
25773: DOUBLE
25774: EQUAL
25775: IFTRUE 25779
25777: GO 25790
25779: POP
// places := 6 ; b_bunker , b_breastwork :
25780: LD_ADDR_VAR 0 3
25784: PUSH
25785: LD_INT 6
25787: ST_TO_ADDR
25788: GO 25835
25790: LD_INT 32
25792: DOUBLE
25793: EQUAL
25794: IFTRUE 25804
25796: LD_INT 31
25798: DOUBLE
25799: EQUAL
25800: IFTRUE 25804
25802: GO 25815
25804: POP
// places := 1 ; b_control_tower :
25805: LD_ADDR_VAR 0 3
25809: PUSH
25810: LD_INT 1
25812: ST_TO_ADDR
25813: GO 25835
25815: LD_INT 36
25817: DOUBLE
25818: EQUAL
25819: IFTRUE 25823
25821: GO 25834
25823: POP
// places := 3 ; end ;
25824: LD_ADDR_VAR 0 3
25828: PUSH
25829: LD_INT 3
25831: ST_TO_ADDR
25832: GO 25835
25834: POP
// if places then
25835: LD_VAR 0 3
25839: IFFALSE 25862
// result := UnitsInside ( building ) < places ;
25841: LD_ADDR_VAR 0 2
25845: PUSH
25846: LD_VAR 0 1
25850: PPUSH
25851: CALL_OW 313
25855: PUSH
25856: LD_VAR 0 3
25860: LESS
25861: ST_TO_ADDR
// end ;
25862: LD_VAR 0 2
25866: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
25867: LD_INT 0
25869: PPUSH
25870: PPUSH
25871: PPUSH
25872: PPUSH
// tmp := [ ] ;
25873: LD_ADDR_VAR 0 3
25877: PUSH
25878: EMPTY
25879: ST_TO_ADDR
// list := [ ] ;
25880: LD_ADDR_VAR 0 5
25884: PUSH
25885: EMPTY
25886: ST_TO_ADDR
// for i = 16 to 25 do
25887: LD_ADDR_VAR 0 4
25891: PUSH
25892: DOUBLE
25893: LD_INT 16
25895: DEC
25896: ST_TO_ADDR
25897: LD_INT 25
25899: PUSH
25900: FOR_TO
25901: IFFALSE 25974
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
25903: LD_ADDR_VAR 0 3
25907: PUSH
25908: LD_VAR 0 3
25912: PUSH
25913: LD_INT 22
25915: PUSH
25916: LD_VAR 0 1
25920: PPUSH
25921: CALL_OW 255
25925: PUSH
25926: EMPTY
25927: LIST
25928: LIST
25929: PUSH
25930: LD_INT 91
25932: PUSH
25933: LD_VAR 0 1
25937: PUSH
25938: LD_INT 6
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: LIST
25945: PUSH
25946: LD_INT 30
25948: PUSH
25949: LD_VAR 0 4
25953: PUSH
25954: EMPTY
25955: LIST
25956: LIST
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: LIST
25962: PUSH
25963: EMPTY
25964: LIST
25965: PPUSH
25966: CALL_OW 69
25970: ADD
25971: ST_TO_ADDR
25972: GO 25900
25974: POP
25975: POP
// for i = 1 to tmp do
25976: LD_ADDR_VAR 0 4
25980: PUSH
25981: DOUBLE
25982: LD_INT 1
25984: DEC
25985: ST_TO_ADDR
25986: LD_VAR 0 3
25990: PUSH
25991: FOR_TO
25992: IFFALSE 26080
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
25994: LD_ADDR_VAR 0 5
25998: PUSH
25999: LD_VAR 0 5
26003: PUSH
26004: LD_VAR 0 3
26008: PUSH
26009: LD_VAR 0 4
26013: ARRAY
26014: PPUSH
26015: CALL_OW 266
26019: PUSH
26020: LD_VAR 0 3
26024: PUSH
26025: LD_VAR 0 4
26029: ARRAY
26030: PPUSH
26031: CALL_OW 250
26035: PUSH
26036: LD_VAR 0 3
26040: PUSH
26041: LD_VAR 0 4
26045: ARRAY
26046: PPUSH
26047: CALL_OW 251
26051: PUSH
26052: LD_VAR 0 3
26056: PUSH
26057: LD_VAR 0 4
26061: ARRAY
26062: PPUSH
26063: CALL_OW 254
26067: PUSH
26068: EMPTY
26069: LIST
26070: LIST
26071: LIST
26072: LIST
26073: PUSH
26074: EMPTY
26075: LIST
26076: ADD
26077: ST_TO_ADDR
26078: GO 25991
26080: POP
26081: POP
// result := list ;
26082: LD_ADDR_VAR 0 2
26086: PUSH
26087: LD_VAR 0 5
26091: ST_TO_ADDR
// end ;
26092: LD_VAR 0 2
26096: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
26097: LD_INT 0
26099: PPUSH
26100: PPUSH
26101: PPUSH
26102: PPUSH
26103: PPUSH
26104: PPUSH
26105: PPUSH
// if not factory then
26106: LD_VAR 0 1
26110: NOT
26111: IFFALSE 26115
// exit ;
26113: GO 26708
// if control = control_apeman then
26115: LD_VAR 0 4
26119: PUSH
26120: LD_INT 5
26122: EQUAL
26123: IFFALSE 26232
// begin tmp := UnitsInside ( factory ) ;
26125: LD_ADDR_VAR 0 8
26129: PUSH
26130: LD_VAR 0 1
26134: PPUSH
26135: CALL_OW 313
26139: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
26140: LD_VAR 0 8
26144: PPUSH
26145: LD_INT 25
26147: PUSH
26148: LD_INT 12
26150: PUSH
26151: EMPTY
26152: LIST
26153: LIST
26154: PPUSH
26155: CALL_OW 72
26159: NOT
26160: IFFALSE 26170
// control := control_manual ;
26162: LD_ADDR_VAR 0 4
26166: PUSH
26167: LD_INT 1
26169: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
26170: LD_ADDR_VAR 0 8
26174: PUSH
26175: LD_VAR 0 1
26179: PPUSH
26180: CALL 25867 0 1
26184: ST_TO_ADDR
// if tmp then
26185: LD_VAR 0 8
26189: IFFALSE 26232
// begin for i in tmp do
26191: LD_ADDR_VAR 0 7
26195: PUSH
26196: LD_VAR 0 8
26200: PUSH
26201: FOR_IN
26202: IFFALSE 26230
// if i [ 1 ] = b_ext_radio then
26204: LD_VAR 0 7
26208: PUSH
26209: LD_INT 1
26211: ARRAY
26212: PUSH
26213: LD_INT 22
26215: EQUAL
26216: IFFALSE 26228
// begin control := control_remote ;
26218: LD_ADDR_VAR 0 4
26222: PUSH
26223: LD_INT 2
26225: ST_TO_ADDR
// break ;
26226: GO 26230
// end ;
26228: GO 26201
26230: POP
26231: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26232: LD_VAR 0 1
26236: PPUSH
26237: LD_VAR 0 2
26241: PPUSH
26242: LD_VAR 0 3
26246: PPUSH
26247: LD_VAR 0 4
26251: PPUSH
26252: LD_VAR 0 5
26256: PPUSH
26257: CALL_OW 448
26261: IFFALSE 26296
// begin result := [ chassis , engine , control , weapon ] ;
26263: LD_ADDR_VAR 0 6
26267: PUSH
26268: LD_VAR 0 2
26272: PUSH
26273: LD_VAR 0 3
26277: PUSH
26278: LD_VAR 0 4
26282: PUSH
26283: LD_VAR 0 5
26287: PUSH
26288: EMPTY
26289: LIST
26290: LIST
26291: LIST
26292: LIST
26293: ST_TO_ADDR
// exit ;
26294: GO 26708
// end ; _chassis := AvailableChassisList ( factory ) ;
26296: LD_ADDR_VAR 0 9
26300: PUSH
26301: LD_VAR 0 1
26305: PPUSH
26306: CALL_OW 475
26310: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
26311: LD_ADDR_VAR 0 11
26315: PUSH
26316: LD_VAR 0 1
26320: PPUSH
26321: CALL_OW 476
26325: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
26326: LD_ADDR_VAR 0 12
26330: PUSH
26331: LD_VAR 0 1
26335: PPUSH
26336: CALL_OW 477
26340: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
26341: LD_ADDR_VAR 0 10
26345: PUSH
26346: LD_VAR 0 1
26350: PPUSH
26351: CALL_OW 478
26355: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
26356: LD_VAR 0 9
26360: NOT
26361: PUSH
26362: LD_VAR 0 11
26366: NOT
26367: OR
26368: PUSH
26369: LD_VAR 0 12
26373: NOT
26374: OR
26375: PUSH
26376: LD_VAR 0 10
26380: NOT
26381: OR
26382: IFFALSE 26417
// begin result := [ chassis , engine , control , weapon ] ;
26384: LD_ADDR_VAR 0 6
26388: PUSH
26389: LD_VAR 0 2
26393: PUSH
26394: LD_VAR 0 3
26398: PUSH
26399: LD_VAR 0 4
26403: PUSH
26404: LD_VAR 0 5
26408: PUSH
26409: EMPTY
26410: LIST
26411: LIST
26412: LIST
26413: LIST
26414: ST_TO_ADDR
// exit ;
26415: GO 26708
// end ; if not chassis in _chassis then
26417: LD_VAR 0 2
26421: PUSH
26422: LD_VAR 0 9
26426: IN
26427: NOT
26428: IFFALSE 26454
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
26430: LD_ADDR_VAR 0 2
26434: PUSH
26435: LD_VAR 0 9
26439: PUSH
26440: LD_INT 1
26442: PPUSH
26443: LD_VAR 0 9
26447: PPUSH
26448: CALL_OW 12
26452: ARRAY
26453: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
26454: LD_VAR 0 2
26458: PPUSH
26459: LD_VAR 0 3
26463: PPUSH
26464: CALL 26713 0 2
26468: NOT
26469: IFFALSE 26528
// repeat engine := _engine [ 1 ] ;
26471: LD_ADDR_VAR 0 3
26475: PUSH
26476: LD_VAR 0 11
26480: PUSH
26481: LD_INT 1
26483: ARRAY
26484: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
26485: LD_ADDR_VAR 0 11
26489: PUSH
26490: LD_VAR 0 11
26494: PPUSH
26495: LD_INT 1
26497: PPUSH
26498: CALL_OW 3
26502: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
26503: LD_VAR 0 2
26507: PPUSH
26508: LD_VAR 0 3
26512: PPUSH
26513: CALL 26713 0 2
26517: PUSH
26518: LD_VAR 0 11
26522: PUSH
26523: EMPTY
26524: EQUAL
26525: OR
26526: IFFALSE 26471
// if not control in _control then
26528: LD_VAR 0 4
26532: PUSH
26533: LD_VAR 0 12
26537: IN
26538: NOT
26539: IFFALSE 26565
// control := _control [ rand ( 1 , _control ) ] ;
26541: LD_ADDR_VAR 0 4
26545: PUSH
26546: LD_VAR 0 12
26550: PUSH
26551: LD_INT 1
26553: PPUSH
26554: LD_VAR 0 12
26558: PPUSH
26559: CALL_OW 12
26563: ARRAY
26564: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
26565: LD_VAR 0 2
26569: PPUSH
26570: LD_VAR 0 5
26574: PPUSH
26575: CALL 26933 0 2
26579: NOT
26580: IFFALSE 26639
// repeat weapon := _weapon [ 1 ] ;
26582: LD_ADDR_VAR 0 5
26586: PUSH
26587: LD_VAR 0 10
26591: PUSH
26592: LD_INT 1
26594: ARRAY
26595: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
26596: LD_ADDR_VAR 0 10
26600: PUSH
26601: LD_VAR 0 10
26605: PPUSH
26606: LD_INT 1
26608: PPUSH
26609: CALL_OW 3
26613: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
26614: LD_VAR 0 2
26618: PPUSH
26619: LD_VAR 0 5
26623: PPUSH
26624: CALL 26933 0 2
26628: PUSH
26629: LD_VAR 0 10
26633: PUSH
26634: EMPTY
26635: EQUAL
26636: OR
26637: IFFALSE 26582
// result := [ ] ;
26639: LD_ADDR_VAR 0 6
26643: PUSH
26644: EMPTY
26645: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26646: LD_VAR 0 1
26650: PPUSH
26651: LD_VAR 0 2
26655: PPUSH
26656: LD_VAR 0 3
26660: PPUSH
26661: LD_VAR 0 4
26665: PPUSH
26666: LD_VAR 0 5
26670: PPUSH
26671: CALL_OW 448
26675: IFFALSE 26708
// result := [ chassis , engine , control , weapon ] ;
26677: LD_ADDR_VAR 0 6
26681: PUSH
26682: LD_VAR 0 2
26686: PUSH
26687: LD_VAR 0 3
26691: PUSH
26692: LD_VAR 0 4
26696: PUSH
26697: LD_VAR 0 5
26701: PUSH
26702: EMPTY
26703: LIST
26704: LIST
26705: LIST
26706: LIST
26707: ST_TO_ADDR
// end ;
26708: LD_VAR 0 6
26712: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
26713: LD_INT 0
26715: PPUSH
// if not chassis or not engine then
26716: LD_VAR 0 1
26720: NOT
26721: PUSH
26722: LD_VAR 0 2
26726: NOT
26727: OR
26728: IFFALSE 26732
// exit ;
26730: GO 26928
// case engine of engine_solar :
26732: LD_VAR 0 2
26736: PUSH
26737: LD_INT 2
26739: DOUBLE
26740: EQUAL
26741: IFTRUE 26745
26743: GO 26783
26745: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
26746: LD_ADDR_VAR 0 3
26750: PUSH
26751: LD_INT 11
26753: PUSH
26754: LD_INT 12
26756: PUSH
26757: LD_INT 13
26759: PUSH
26760: LD_INT 14
26762: PUSH
26763: LD_INT 1
26765: PUSH
26766: LD_INT 2
26768: PUSH
26769: LD_INT 3
26771: PUSH
26772: EMPTY
26773: LIST
26774: LIST
26775: LIST
26776: LIST
26777: LIST
26778: LIST
26779: LIST
26780: ST_TO_ADDR
26781: GO 26912
26783: LD_INT 1
26785: DOUBLE
26786: EQUAL
26787: IFTRUE 26791
26789: GO 26853
26791: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
26792: LD_ADDR_VAR 0 3
26796: PUSH
26797: LD_INT 11
26799: PUSH
26800: LD_INT 12
26802: PUSH
26803: LD_INT 13
26805: PUSH
26806: LD_INT 14
26808: PUSH
26809: LD_INT 1
26811: PUSH
26812: LD_INT 2
26814: PUSH
26815: LD_INT 3
26817: PUSH
26818: LD_INT 4
26820: PUSH
26821: LD_INT 5
26823: PUSH
26824: LD_INT 21
26826: PUSH
26827: LD_INT 23
26829: PUSH
26830: LD_INT 22
26832: PUSH
26833: LD_INT 24
26835: PUSH
26836: EMPTY
26837: LIST
26838: LIST
26839: LIST
26840: LIST
26841: LIST
26842: LIST
26843: LIST
26844: LIST
26845: LIST
26846: LIST
26847: LIST
26848: LIST
26849: LIST
26850: ST_TO_ADDR
26851: GO 26912
26853: LD_INT 3
26855: DOUBLE
26856: EQUAL
26857: IFTRUE 26861
26859: GO 26911
26861: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26862: LD_ADDR_VAR 0 3
26866: PUSH
26867: LD_INT 13
26869: PUSH
26870: LD_INT 14
26872: PUSH
26873: LD_INT 2
26875: PUSH
26876: LD_INT 3
26878: PUSH
26879: LD_INT 4
26881: PUSH
26882: LD_INT 5
26884: PUSH
26885: LD_INT 21
26887: PUSH
26888: LD_INT 22
26890: PUSH
26891: LD_INT 23
26893: PUSH
26894: LD_INT 24
26896: PUSH
26897: EMPTY
26898: LIST
26899: LIST
26900: LIST
26901: LIST
26902: LIST
26903: LIST
26904: LIST
26905: LIST
26906: LIST
26907: LIST
26908: ST_TO_ADDR
26909: GO 26912
26911: POP
// result := ( chassis in result ) ;
26912: LD_ADDR_VAR 0 3
26916: PUSH
26917: LD_VAR 0 1
26921: PUSH
26922: LD_VAR 0 3
26926: IN
26927: ST_TO_ADDR
// end ;
26928: LD_VAR 0 3
26932: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
26933: LD_INT 0
26935: PPUSH
// if not chassis or not weapon then
26936: LD_VAR 0 1
26940: NOT
26941: PUSH
26942: LD_VAR 0 2
26946: NOT
26947: OR
26948: IFFALSE 26952
// exit ;
26950: GO 28012
// case weapon of us_machine_gun :
26952: LD_VAR 0 2
26956: PUSH
26957: LD_INT 2
26959: DOUBLE
26960: EQUAL
26961: IFTRUE 26965
26963: GO 26995
26965: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
26966: LD_ADDR_VAR 0 3
26970: PUSH
26971: LD_INT 1
26973: PUSH
26974: LD_INT 2
26976: PUSH
26977: LD_INT 3
26979: PUSH
26980: LD_INT 4
26982: PUSH
26983: LD_INT 5
26985: PUSH
26986: EMPTY
26987: LIST
26988: LIST
26989: LIST
26990: LIST
26991: LIST
26992: ST_TO_ADDR
26993: GO 27996
26995: LD_INT 3
26997: DOUBLE
26998: EQUAL
26999: IFTRUE 27003
27001: GO 27033
27003: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
27004: LD_ADDR_VAR 0 3
27008: PUSH
27009: LD_INT 1
27011: PUSH
27012: LD_INT 2
27014: PUSH
27015: LD_INT 3
27017: PUSH
27018: LD_INT 4
27020: PUSH
27021: LD_INT 5
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: LIST
27028: LIST
27029: LIST
27030: ST_TO_ADDR
27031: GO 27996
27033: LD_INT 11
27035: DOUBLE
27036: EQUAL
27037: IFTRUE 27041
27039: GO 27071
27041: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
27042: LD_ADDR_VAR 0 3
27046: PUSH
27047: LD_INT 1
27049: PUSH
27050: LD_INT 2
27052: PUSH
27053: LD_INT 3
27055: PUSH
27056: LD_INT 4
27058: PUSH
27059: LD_INT 5
27061: PUSH
27062: EMPTY
27063: LIST
27064: LIST
27065: LIST
27066: LIST
27067: LIST
27068: ST_TO_ADDR
27069: GO 27996
27071: LD_INT 4
27073: DOUBLE
27074: EQUAL
27075: IFTRUE 27079
27077: GO 27105
27079: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
27080: LD_ADDR_VAR 0 3
27084: PUSH
27085: LD_INT 2
27087: PUSH
27088: LD_INT 3
27090: PUSH
27091: LD_INT 4
27093: PUSH
27094: LD_INT 5
27096: PUSH
27097: EMPTY
27098: LIST
27099: LIST
27100: LIST
27101: LIST
27102: ST_TO_ADDR
27103: GO 27996
27105: LD_INT 5
27107: DOUBLE
27108: EQUAL
27109: IFTRUE 27113
27111: GO 27139
27113: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
27114: LD_ADDR_VAR 0 3
27118: PUSH
27119: LD_INT 2
27121: PUSH
27122: LD_INT 3
27124: PUSH
27125: LD_INT 4
27127: PUSH
27128: LD_INT 5
27130: PUSH
27131: EMPTY
27132: LIST
27133: LIST
27134: LIST
27135: LIST
27136: ST_TO_ADDR
27137: GO 27996
27139: LD_INT 9
27141: DOUBLE
27142: EQUAL
27143: IFTRUE 27147
27145: GO 27173
27147: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
27148: LD_ADDR_VAR 0 3
27152: PUSH
27153: LD_INT 2
27155: PUSH
27156: LD_INT 3
27158: PUSH
27159: LD_INT 4
27161: PUSH
27162: LD_INT 5
27164: PUSH
27165: EMPTY
27166: LIST
27167: LIST
27168: LIST
27169: LIST
27170: ST_TO_ADDR
27171: GO 27996
27173: LD_INT 7
27175: DOUBLE
27176: EQUAL
27177: IFTRUE 27181
27179: GO 27207
27181: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
27182: LD_ADDR_VAR 0 3
27186: PUSH
27187: LD_INT 2
27189: PUSH
27190: LD_INT 3
27192: PUSH
27193: LD_INT 4
27195: PUSH
27196: LD_INT 5
27198: PUSH
27199: EMPTY
27200: LIST
27201: LIST
27202: LIST
27203: LIST
27204: ST_TO_ADDR
27205: GO 27996
27207: LD_INT 12
27209: DOUBLE
27210: EQUAL
27211: IFTRUE 27215
27213: GO 27241
27215: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
27216: LD_ADDR_VAR 0 3
27220: PUSH
27221: LD_INT 2
27223: PUSH
27224: LD_INT 3
27226: PUSH
27227: LD_INT 4
27229: PUSH
27230: LD_INT 5
27232: PUSH
27233: EMPTY
27234: LIST
27235: LIST
27236: LIST
27237: LIST
27238: ST_TO_ADDR
27239: GO 27996
27241: LD_INT 13
27243: DOUBLE
27244: EQUAL
27245: IFTRUE 27249
27247: GO 27275
27249: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
27250: LD_ADDR_VAR 0 3
27254: PUSH
27255: LD_INT 2
27257: PUSH
27258: LD_INT 3
27260: PUSH
27261: LD_INT 4
27263: PUSH
27264: LD_INT 5
27266: PUSH
27267: EMPTY
27268: LIST
27269: LIST
27270: LIST
27271: LIST
27272: ST_TO_ADDR
27273: GO 27996
27275: LD_INT 14
27277: DOUBLE
27278: EQUAL
27279: IFTRUE 27283
27281: GO 27301
27283: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
27284: LD_ADDR_VAR 0 3
27288: PUSH
27289: LD_INT 4
27291: PUSH
27292: LD_INT 5
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: ST_TO_ADDR
27299: GO 27996
27301: LD_INT 6
27303: DOUBLE
27304: EQUAL
27305: IFTRUE 27309
27307: GO 27327
27309: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
27310: LD_ADDR_VAR 0 3
27314: PUSH
27315: LD_INT 4
27317: PUSH
27318: LD_INT 5
27320: PUSH
27321: EMPTY
27322: LIST
27323: LIST
27324: ST_TO_ADDR
27325: GO 27996
27327: LD_INT 10
27329: DOUBLE
27330: EQUAL
27331: IFTRUE 27335
27333: GO 27353
27335: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
27336: LD_ADDR_VAR 0 3
27340: PUSH
27341: LD_INT 4
27343: PUSH
27344: LD_INT 5
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: ST_TO_ADDR
27351: GO 27996
27353: LD_INT 22
27355: DOUBLE
27356: EQUAL
27357: IFTRUE 27361
27359: GO 27387
27361: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
27362: LD_ADDR_VAR 0 3
27366: PUSH
27367: LD_INT 11
27369: PUSH
27370: LD_INT 12
27372: PUSH
27373: LD_INT 13
27375: PUSH
27376: LD_INT 14
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: ST_TO_ADDR
27385: GO 27996
27387: LD_INT 23
27389: DOUBLE
27390: EQUAL
27391: IFTRUE 27395
27393: GO 27421
27395: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
27396: LD_ADDR_VAR 0 3
27400: PUSH
27401: LD_INT 11
27403: PUSH
27404: LD_INT 12
27406: PUSH
27407: LD_INT 13
27409: PUSH
27410: LD_INT 14
27412: PUSH
27413: EMPTY
27414: LIST
27415: LIST
27416: LIST
27417: LIST
27418: ST_TO_ADDR
27419: GO 27996
27421: LD_INT 24
27423: DOUBLE
27424: EQUAL
27425: IFTRUE 27429
27427: GO 27455
27429: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
27430: LD_ADDR_VAR 0 3
27434: PUSH
27435: LD_INT 11
27437: PUSH
27438: LD_INT 12
27440: PUSH
27441: LD_INT 13
27443: PUSH
27444: LD_INT 14
27446: PUSH
27447: EMPTY
27448: LIST
27449: LIST
27450: LIST
27451: LIST
27452: ST_TO_ADDR
27453: GO 27996
27455: LD_INT 30
27457: DOUBLE
27458: EQUAL
27459: IFTRUE 27463
27461: GO 27489
27463: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
27464: LD_ADDR_VAR 0 3
27468: PUSH
27469: LD_INT 11
27471: PUSH
27472: LD_INT 12
27474: PUSH
27475: LD_INT 13
27477: PUSH
27478: LD_INT 14
27480: PUSH
27481: EMPTY
27482: LIST
27483: LIST
27484: LIST
27485: LIST
27486: ST_TO_ADDR
27487: GO 27996
27489: LD_INT 25
27491: DOUBLE
27492: EQUAL
27493: IFTRUE 27497
27495: GO 27515
27497: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
27498: LD_ADDR_VAR 0 3
27502: PUSH
27503: LD_INT 13
27505: PUSH
27506: LD_INT 14
27508: PUSH
27509: EMPTY
27510: LIST
27511: LIST
27512: ST_TO_ADDR
27513: GO 27996
27515: LD_INT 27
27517: DOUBLE
27518: EQUAL
27519: IFTRUE 27523
27521: GO 27541
27523: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
27524: LD_ADDR_VAR 0 3
27528: PUSH
27529: LD_INT 13
27531: PUSH
27532: LD_INT 14
27534: PUSH
27535: EMPTY
27536: LIST
27537: LIST
27538: ST_TO_ADDR
27539: GO 27996
27541: LD_INT 92
27543: DOUBLE
27544: EQUAL
27545: IFTRUE 27549
27547: GO 27575
27549: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
27550: LD_ADDR_VAR 0 3
27554: PUSH
27555: LD_INT 11
27557: PUSH
27558: LD_INT 12
27560: PUSH
27561: LD_INT 13
27563: PUSH
27564: LD_INT 14
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: LIST
27571: LIST
27572: ST_TO_ADDR
27573: GO 27996
27575: LD_INT 28
27577: DOUBLE
27578: EQUAL
27579: IFTRUE 27583
27581: GO 27601
27583: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
27584: LD_ADDR_VAR 0 3
27588: PUSH
27589: LD_INT 13
27591: PUSH
27592: LD_INT 14
27594: PUSH
27595: EMPTY
27596: LIST
27597: LIST
27598: ST_TO_ADDR
27599: GO 27996
27601: LD_INT 29
27603: DOUBLE
27604: EQUAL
27605: IFTRUE 27609
27607: GO 27627
27609: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
27610: LD_ADDR_VAR 0 3
27614: PUSH
27615: LD_INT 13
27617: PUSH
27618: LD_INT 14
27620: PUSH
27621: EMPTY
27622: LIST
27623: LIST
27624: ST_TO_ADDR
27625: GO 27996
27627: LD_INT 31
27629: DOUBLE
27630: EQUAL
27631: IFTRUE 27635
27633: GO 27653
27635: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
27636: LD_ADDR_VAR 0 3
27640: PUSH
27641: LD_INT 13
27643: PUSH
27644: LD_INT 14
27646: PUSH
27647: EMPTY
27648: LIST
27649: LIST
27650: ST_TO_ADDR
27651: GO 27996
27653: LD_INT 26
27655: DOUBLE
27656: EQUAL
27657: IFTRUE 27661
27659: GO 27679
27661: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
27662: LD_ADDR_VAR 0 3
27666: PUSH
27667: LD_INT 13
27669: PUSH
27670: LD_INT 14
27672: PUSH
27673: EMPTY
27674: LIST
27675: LIST
27676: ST_TO_ADDR
27677: GO 27996
27679: LD_INT 42
27681: DOUBLE
27682: EQUAL
27683: IFTRUE 27687
27685: GO 27713
27687: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
27688: LD_ADDR_VAR 0 3
27692: PUSH
27693: LD_INT 21
27695: PUSH
27696: LD_INT 22
27698: PUSH
27699: LD_INT 23
27701: PUSH
27702: LD_INT 24
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: LIST
27709: LIST
27710: ST_TO_ADDR
27711: GO 27996
27713: LD_INT 43
27715: DOUBLE
27716: EQUAL
27717: IFTRUE 27721
27719: GO 27747
27721: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
27722: LD_ADDR_VAR 0 3
27726: PUSH
27727: LD_INT 21
27729: PUSH
27730: LD_INT 22
27732: PUSH
27733: LD_INT 23
27735: PUSH
27736: LD_INT 24
27738: PUSH
27739: EMPTY
27740: LIST
27741: LIST
27742: LIST
27743: LIST
27744: ST_TO_ADDR
27745: GO 27996
27747: LD_INT 44
27749: DOUBLE
27750: EQUAL
27751: IFTRUE 27755
27753: GO 27781
27755: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
27756: LD_ADDR_VAR 0 3
27760: PUSH
27761: LD_INT 21
27763: PUSH
27764: LD_INT 22
27766: PUSH
27767: LD_INT 23
27769: PUSH
27770: LD_INT 24
27772: PUSH
27773: EMPTY
27774: LIST
27775: LIST
27776: LIST
27777: LIST
27778: ST_TO_ADDR
27779: GO 27996
27781: LD_INT 45
27783: DOUBLE
27784: EQUAL
27785: IFTRUE 27789
27787: GO 27815
27789: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
27790: LD_ADDR_VAR 0 3
27794: PUSH
27795: LD_INT 21
27797: PUSH
27798: LD_INT 22
27800: PUSH
27801: LD_INT 23
27803: PUSH
27804: LD_INT 24
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: LIST
27811: LIST
27812: ST_TO_ADDR
27813: GO 27996
27815: LD_INT 49
27817: DOUBLE
27818: EQUAL
27819: IFTRUE 27823
27821: GO 27849
27823: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
27824: LD_ADDR_VAR 0 3
27828: PUSH
27829: LD_INT 21
27831: PUSH
27832: LD_INT 22
27834: PUSH
27835: LD_INT 23
27837: PUSH
27838: LD_INT 24
27840: PUSH
27841: EMPTY
27842: LIST
27843: LIST
27844: LIST
27845: LIST
27846: ST_TO_ADDR
27847: GO 27996
27849: LD_INT 51
27851: DOUBLE
27852: EQUAL
27853: IFTRUE 27857
27855: GO 27883
27857: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
27858: LD_ADDR_VAR 0 3
27862: PUSH
27863: LD_INT 21
27865: PUSH
27866: LD_INT 22
27868: PUSH
27869: LD_INT 23
27871: PUSH
27872: LD_INT 24
27874: PUSH
27875: EMPTY
27876: LIST
27877: LIST
27878: LIST
27879: LIST
27880: ST_TO_ADDR
27881: GO 27996
27883: LD_INT 52
27885: DOUBLE
27886: EQUAL
27887: IFTRUE 27891
27889: GO 27917
27891: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
27892: LD_ADDR_VAR 0 3
27896: PUSH
27897: LD_INT 21
27899: PUSH
27900: LD_INT 22
27902: PUSH
27903: LD_INT 23
27905: PUSH
27906: LD_INT 24
27908: PUSH
27909: EMPTY
27910: LIST
27911: LIST
27912: LIST
27913: LIST
27914: ST_TO_ADDR
27915: GO 27996
27917: LD_INT 53
27919: DOUBLE
27920: EQUAL
27921: IFTRUE 27925
27923: GO 27943
27925: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
27926: LD_ADDR_VAR 0 3
27930: PUSH
27931: LD_INT 23
27933: PUSH
27934: LD_INT 24
27936: PUSH
27937: EMPTY
27938: LIST
27939: LIST
27940: ST_TO_ADDR
27941: GO 27996
27943: LD_INT 46
27945: DOUBLE
27946: EQUAL
27947: IFTRUE 27951
27949: GO 27969
27951: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
27952: LD_ADDR_VAR 0 3
27956: PUSH
27957: LD_INT 23
27959: PUSH
27960: LD_INT 24
27962: PUSH
27963: EMPTY
27964: LIST
27965: LIST
27966: ST_TO_ADDR
27967: GO 27996
27969: LD_INT 47
27971: DOUBLE
27972: EQUAL
27973: IFTRUE 27977
27975: GO 27995
27977: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27978: LD_ADDR_VAR 0 3
27982: PUSH
27983: LD_INT 23
27985: PUSH
27986: LD_INT 24
27988: PUSH
27989: EMPTY
27990: LIST
27991: LIST
27992: ST_TO_ADDR
27993: GO 27996
27995: POP
// result := ( chassis in result ) ;
27996: LD_ADDR_VAR 0 3
28000: PUSH
28001: LD_VAR 0 1
28005: PUSH
28006: LD_VAR 0 3
28010: IN
28011: ST_TO_ADDR
// end ;
28012: LD_VAR 0 3
28016: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
28017: LD_INT 0
28019: PPUSH
28020: PPUSH
28021: PPUSH
28022: PPUSH
28023: PPUSH
28024: PPUSH
28025: PPUSH
// result := array ;
28026: LD_ADDR_VAR 0 5
28030: PUSH
28031: LD_VAR 0 1
28035: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
28036: LD_VAR 0 1
28040: NOT
28041: PUSH
28042: LD_VAR 0 2
28046: NOT
28047: OR
28048: PUSH
28049: LD_VAR 0 3
28053: NOT
28054: OR
28055: PUSH
28056: LD_VAR 0 2
28060: PUSH
28061: LD_VAR 0 1
28065: GREATER
28066: OR
28067: PUSH
28068: LD_VAR 0 3
28072: PUSH
28073: LD_VAR 0 1
28077: GREATER
28078: OR
28079: IFFALSE 28083
// exit ;
28081: GO 28379
// if direction then
28083: LD_VAR 0 4
28087: IFFALSE 28151
// begin d := 1 ;
28089: LD_ADDR_VAR 0 9
28093: PUSH
28094: LD_INT 1
28096: ST_TO_ADDR
// if i_from > i_to then
28097: LD_VAR 0 2
28101: PUSH
28102: LD_VAR 0 3
28106: GREATER
28107: IFFALSE 28133
// length := ( array - i_from ) + i_to else
28109: LD_ADDR_VAR 0 11
28113: PUSH
28114: LD_VAR 0 1
28118: PUSH
28119: LD_VAR 0 2
28123: MINUS
28124: PUSH
28125: LD_VAR 0 3
28129: PLUS
28130: ST_TO_ADDR
28131: GO 28149
// length := i_to - i_from ;
28133: LD_ADDR_VAR 0 11
28137: PUSH
28138: LD_VAR 0 3
28142: PUSH
28143: LD_VAR 0 2
28147: MINUS
28148: ST_TO_ADDR
// end else
28149: GO 28212
// begin d := - 1 ;
28151: LD_ADDR_VAR 0 9
28155: PUSH
28156: LD_INT 1
28158: NEG
28159: ST_TO_ADDR
// if i_from > i_to then
28160: LD_VAR 0 2
28164: PUSH
28165: LD_VAR 0 3
28169: GREATER
28170: IFFALSE 28190
// length := i_from - i_to else
28172: LD_ADDR_VAR 0 11
28176: PUSH
28177: LD_VAR 0 2
28181: PUSH
28182: LD_VAR 0 3
28186: MINUS
28187: ST_TO_ADDR
28188: GO 28212
// length := ( array - i_to ) + i_from ;
28190: LD_ADDR_VAR 0 11
28194: PUSH
28195: LD_VAR 0 1
28199: PUSH
28200: LD_VAR 0 3
28204: MINUS
28205: PUSH
28206: LD_VAR 0 2
28210: PLUS
28211: ST_TO_ADDR
// end ; if not length then
28212: LD_VAR 0 11
28216: NOT
28217: IFFALSE 28221
// exit ;
28219: GO 28379
// tmp := array ;
28221: LD_ADDR_VAR 0 10
28225: PUSH
28226: LD_VAR 0 1
28230: ST_TO_ADDR
// for i = 1 to length do
28231: LD_ADDR_VAR 0 6
28235: PUSH
28236: DOUBLE
28237: LD_INT 1
28239: DEC
28240: ST_TO_ADDR
28241: LD_VAR 0 11
28245: PUSH
28246: FOR_TO
28247: IFFALSE 28367
// begin for j = 1 to array do
28249: LD_ADDR_VAR 0 7
28253: PUSH
28254: DOUBLE
28255: LD_INT 1
28257: DEC
28258: ST_TO_ADDR
28259: LD_VAR 0 1
28263: PUSH
28264: FOR_TO
28265: IFFALSE 28353
// begin k := j + d ;
28267: LD_ADDR_VAR 0 8
28271: PUSH
28272: LD_VAR 0 7
28276: PUSH
28277: LD_VAR 0 9
28281: PLUS
28282: ST_TO_ADDR
// if k > array then
28283: LD_VAR 0 8
28287: PUSH
28288: LD_VAR 0 1
28292: GREATER
28293: IFFALSE 28303
// k := 1 ;
28295: LD_ADDR_VAR 0 8
28299: PUSH
28300: LD_INT 1
28302: ST_TO_ADDR
// if not k then
28303: LD_VAR 0 8
28307: NOT
28308: IFFALSE 28320
// k := array ;
28310: LD_ADDR_VAR 0 8
28314: PUSH
28315: LD_VAR 0 1
28319: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
28320: LD_ADDR_VAR 0 10
28324: PUSH
28325: LD_VAR 0 10
28329: PPUSH
28330: LD_VAR 0 8
28334: PPUSH
28335: LD_VAR 0 1
28339: PUSH
28340: LD_VAR 0 7
28344: ARRAY
28345: PPUSH
28346: CALL_OW 1
28350: ST_TO_ADDR
// end ;
28351: GO 28264
28353: POP
28354: POP
// array := tmp ;
28355: LD_ADDR_VAR 0 1
28359: PUSH
28360: LD_VAR 0 10
28364: ST_TO_ADDR
// end ;
28365: GO 28246
28367: POP
28368: POP
// result := array ;
28369: LD_ADDR_VAR 0 5
28373: PUSH
28374: LD_VAR 0 1
28378: ST_TO_ADDR
// end ;
28379: LD_VAR 0 5
28383: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
28384: LD_INT 0
28386: PPUSH
28387: PPUSH
// result := 0 ;
28388: LD_ADDR_VAR 0 3
28392: PUSH
28393: LD_INT 0
28395: ST_TO_ADDR
// if not array or not value in array then
28396: LD_VAR 0 1
28400: NOT
28401: PUSH
28402: LD_VAR 0 2
28406: PUSH
28407: LD_VAR 0 1
28411: IN
28412: NOT
28413: OR
28414: IFFALSE 28418
// exit ;
28416: GO 28472
// for i = 1 to array do
28418: LD_ADDR_VAR 0 4
28422: PUSH
28423: DOUBLE
28424: LD_INT 1
28426: DEC
28427: ST_TO_ADDR
28428: LD_VAR 0 1
28432: PUSH
28433: FOR_TO
28434: IFFALSE 28470
// if value = array [ i ] then
28436: LD_VAR 0 2
28440: PUSH
28441: LD_VAR 0 1
28445: PUSH
28446: LD_VAR 0 4
28450: ARRAY
28451: EQUAL
28452: IFFALSE 28468
// begin result := i ;
28454: LD_ADDR_VAR 0 3
28458: PUSH
28459: LD_VAR 0 4
28463: ST_TO_ADDR
// exit ;
28464: POP
28465: POP
28466: GO 28472
// end ;
28468: GO 28433
28470: POP
28471: POP
// end ;
28472: LD_VAR 0 3
28476: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
28477: LD_INT 0
28479: PPUSH
// vc_chassis := chassis ;
28480: LD_ADDR_OWVAR 37
28484: PUSH
28485: LD_VAR 0 1
28489: ST_TO_ADDR
// vc_engine := engine ;
28490: LD_ADDR_OWVAR 39
28494: PUSH
28495: LD_VAR 0 2
28499: ST_TO_ADDR
// vc_control := control ;
28500: LD_ADDR_OWVAR 38
28504: PUSH
28505: LD_VAR 0 3
28509: ST_TO_ADDR
// vc_weapon := weapon ;
28510: LD_ADDR_OWVAR 40
28514: PUSH
28515: LD_VAR 0 4
28519: ST_TO_ADDR
// vc_fuel_battery := fuel ;
28520: LD_ADDR_OWVAR 41
28524: PUSH
28525: LD_VAR 0 5
28529: ST_TO_ADDR
// end ;
28530: LD_VAR 0 6
28534: RET
// export function WantPlant ( unit ) ; var task ; begin
28535: LD_INT 0
28537: PPUSH
28538: PPUSH
// result := false ;
28539: LD_ADDR_VAR 0 2
28543: PUSH
28544: LD_INT 0
28546: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
28547: LD_ADDR_VAR 0 3
28551: PUSH
28552: LD_VAR 0 1
28556: PPUSH
28557: CALL_OW 437
28561: ST_TO_ADDR
// if task then
28562: LD_VAR 0 3
28566: IFFALSE 28594
// if task [ 1 ] [ 1 ] = p then
28568: LD_VAR 0 3
28572: PUSH
28573: LD_INT 1
28575: ARRAY
28576: PUSH
28577: LD_INT 1
28579: ARRAY
28580: PUSH
28581: LD_STRING p
28583: EQUAL
28584: IFFALSE 28594
// result := true ;
28586: LD_ADDR_VAR 0 2
28590: PUSH
28591: LD_INT 1
28593: ST_TO_ADDR
// end ;
28594: LD_VAR 0 2
28598: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
28599: LD_INT 0
28601: PPUSH
28602: PPUSH
28603: PPUSH
28604: PPUSH
// if pos < 1 then
28605: LD_VAR 0 2
28609: PUSH
28610: LD_INT 1
28612: LESS
28613: IFFALSE 28617
// exit ;
28615: GO 28920
// if pos = 1 then
28617: LD_VAR 0 2
28621: PUSH
28622: LD_INT 1
28624: EQUAL
28625: IFFALSE 28658
// result := Replace ( arr , pos [ 1 ] , value ) else
28627: LD_ADDR_VAR 0 4
28631: PUSH
28632: LD_VAR 0 1
28636: PPUSH
28637: LD_VAR 0 2
28641: PUSH
28642: LD_INT 1
28644: ARRAY
28645: PPUSH
28646: LD_VAR 0 3
28650: PPUSH
28651: CALL_OW 1
28655: ST_TO_ADDR
28656: GO 28920
// begin tmp := arr ;
28658: LD_ADDR_VAR 0 6
28662: PUSH
28663: LD_VAR 0 1
28667: ST_TO_ADDR
// s_arr := [ tmp ] ;
28668: LD_ADDR_VAR 0 7
28672: PUSH
28673: LD_VAR 0 6
28677: PUSH
28678: EMPTY
28679: LIST
28680: ST_TO_ADDR
// for i = 1 to pos - 1 do
28681: LD_ADDR_VAR 0 5
28685: PUSH
28686: DOUBLE
28687: LD_INT 1
28689: DEC
28690: ST_TO_ADDR
28691: LD_VAR 0 2
28695: PUSH
28696: LD_INT 1
28698: MINUS
28699: PUSH
28700: FOR_TO
28701: IFFALSE 28746
// begin tmp := tmp [ pos [ i ] ] ;
28703: LD_ADDR_VAR 0 6
28707: PUSH
28708: LD_VAR 0 6
28712: PUSH
28713: LD_VAR 0 2
28717: PUSH
28718: LD_VAR 0 5
28722: ARRAY
28723: ARRAY
28724: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
28725: LD_ADDR_VAR 0 7
28729: PUSH
28730: LD_VAR 0 7
28734: PUSH
28735: LD_VAR 0 6
28739: PUSH
28740: EMPTY
28741: LIST
28742: ADD
28743: ST_TO_ADDR
// end ;
28744: GO 28700
28746: POP
28747: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
28748: LD_ADDR_VAR 0 6
28752: PUSH
28753: LD_VAR 0 6
28757: PPUSH
28758: LD_VAR 0 2
28762: PUSH
28763: LD_VAR 0 2
28767: ARRAY
28768: PPUSH
28769: LD_VAR 0 3
28773: PPUSH
28774: CALL_OW 1
28778: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
28779: LD_ADDR_VAR 0 7
28783: PUSH
28784: LD_VAR 0 7
28788: PPUSH
28789: LD_VAR 0 7
28793: PPUSH
28794: LD_VAR 0 6
28798: PPUSH
28799: CALL_OW 1
28803: ST_TO_ADDR
// for i = s_arr downto 2 do
28804: LD_ADDR_VAR 0 5
28808: PUSH
28809: DOUBLE
28810: LD_VAR 0 7
28814: INC
28815: ST_TO_ADDR
28816: LD_INT 2
28818: PUSH
28819: FOR_DOWNTO
28820: IFFALSE 28904
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
28822: LD_ADDR_VAR 0 6
28826: PUSH
28827: LD_VAR 0 7
28831: PUSH
28832: LD_VAR 0 5
28836: PUSH
28837: LD_INT 1
28839: MINUS
28840: ARRAY
28841: PPUSH
28842: LD_VAR 0 2
28846: PUSH
28847: LD_VAR 0 5
28851: PUSH
28852: LD_INT 1
28854: MINUS
28855: ARRAY
28856: PPUSH
28857: LD_VAR 0 7
28861: PUSH
28862: LD_VAR 0 5
28866: ARRAY
28867: PPUSH
28868: CALL_OW 1
28872: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
28873: LD_ADDR_VAR 0 7
28877: PUSH
28878: LD_VAR 0 7
28882: PPUSH
28883: LD_VAR 0 5
28887: PUSH
28888: LD_INT 1
28890: MINUS
28891: PPUSH
28892: LD_VAR 0 6
28896: PPUSH
28897: CALL_OW 1
28901: ST_TO_ADDR
// end ;
28902: GO 28819
28904: POP
28905: POP
// result := s_arr [ 1 ] ;
28906: LD_ADDR_VAR 0 4
28910: PUSH
28911: LD_VAR 0 7
28915: PUSH
28916: LD_INT 1
28918: ARRAY
28919: ST_TO_ADDR
// end ; end ;
28920: LD_VAR 0 4
28924: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
28925: LD_INT 0
28927: PPUSH
28928: PPUSH
// if not list then
28929: LD_VAR 0 1
28933: NOT
28934: IFFALSE 28938
// exit ;
28936: GO 29029
// i := list [ pos1 ] ;
28938: LD_ADDR_VAR 0 5
28942: PUSH
28943: LD_VAR 0 1
28947: PUSH
28948: LD_VAR 0 2
28952: ARRAY
28953: ST_TO_ADDR
// if not i then
28954: LD_VAR 0 5
28958: NOT
28959: IFFALSE 28963
// exit ;
28961: GO 29029
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
28963: LD_ADDR_VAR 0 1
28967: PUSH
28968: LD_VAR 0 1
28972: PPUSH
28973: LD_VAR 0 2
28977: PPUSH
28978: LD_VAR 0 1
28982: PUSH
28983: LD_VAR 0 3
28987: ARRAY
28988: PPUSH
28989: CALL_OW 1
28993: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
28994: LD_ADDR_VAR 0 1
28998: PUSH
28999: LD_VAR 0 1
29003: PPUSH
29004: LD_VAR 0 3
29008: PPUSH
29009: LD_VAR 0 5
29013: PPUSH
29014: CALL_OW 1
29018: ST_TO_ADDR
// result := list ;
29019: LD_ADDR_VAR 0 4
29023: PUSH
29024: LD_VAR 0 1
29028: ST_TO_ADDR
// end ;
29029: LD_VAR 0 4
29033: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
29034: LD_INT 0
29036: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
29037: LD_ADDR_VAR 0 5
29041: PUSH
29042: LD_VAR 0 1
29046: PPUSH
29047: CALL_OW 250
29051: PPUSH
29052: LD_VAR 0 1
29056: PPUSH
29057: CALL_OW 251
29061: PPUSH
29062: LD_VAR 0 2
29066: PPUSH
29067: LD_VAR 0 3
29071: PPUSH
29072: LD_VAR 0 4
29076: PPUSH
29077: CALL 29087 0 5
29081: ST_TO_ADDR
// end ;
29082: LD_VAR 0 5
29086: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
29087: LD_INT 0
29089: PPUSH
29090: PPUSH
29091: PPUSH
29092: PPUSH
// if not list then
29093: LD_VAR 0 3
29097: NOT
29098: IFFALSE 29102
// exit ;
29100: GO 29490
// result := [ ] ;
29102: LD_ADDR_VAR 0 6
29106: PUSH
29107: EMPTY
29108: ST_TO_ADDR
// for i in list do
29109: LD_ADDR_VAR 0 7
29113: PUSH
29114: LD_VAR 0 3
29118: PUSH
29119: FOR_IN
29120: IFFALSE 29322
// begin tmp := GetDistUnitXY ( i , x , y ) ;
29122: LD_ADDR_VAR 0 9
29126: PUSH
29127: LD_VAR 0 7
29131: PPUSH
29132: LD_VAR 0 1
29136: PPUSH
29137: LD_VAR 0 2
29141: PPUSH
29142: CALL_OW 297
29146: ST_TO_ADDR
// if not result then
29147: LD_VAR 0 6
29151: NOT
29152: IFFALSE 29178
// result := [ [ i , tmp ] ] else
29154: LD_ADDR_VAR 0 6
29158: PUSH
29159: LD_VAR 0 7
29163: PUSH
29164: LD_VAR 0 9
29168: PUSH
29169: EMPTY
29170: LIST
29171: LIST
29172: PUSH
29173: EMPTY
29174: LIST
29175: ST_TO_ADDR
29176: GO 29320
// begin if result [ result ] [ 2 ] < tmp then
29178: LD_VAR 0 6
29182: PUSH
29183: LD_VAR 0 6
29187: ARRAY
29188: PUSH
29189: LD_INT 2
29191: ARRAY
29192: PUSH
29193: LD_VAR 0 9
29197: LESS
29198: IFFALSE 29240
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
29200: LD_ADDR_VAR 0 6
29204: PUSH
29205: LD_VAR 0 6
29209: PPUSH
29210: LD_VAR 0 6
29214: PUSH
29215: LD_INT 1
29217: PLUS
29218: PPUSH
29219: LD_VAR 0 7
29223: PUSH
29224: LD_VAR 0 9
29228: PUSH
29229: EMPTY
29230: LIST
29231: LIST
29232: PPUSH
29233: CALL_OW 2
29237: ST_TO_ADDR
29238: GO 29320
// for j = 1 to result do
29240: LD_ADDR_VAR 0 8
29244: PUSH
29245: DOUBLE
29246: LD_INT 1
29248: DEC
29249: ST_TO_ADDR
29250: LD_VAR 0 6
29254: PUSH
29255: FOR_TO
29256: IFFALSE 29318
// begin if tmp < result [ j ] [ 2 ] then
29258: LD_VAR 0 9
29262: PUSH
29263: LD_VAR 0 6
29267: PUSH
29268: LD_VAR 0 8
29272: ARRAY
29273: PUSH
29274: LD_INT 2
29276: ARRAY
29277: LESS
29278: IFFALSE 29316
// begin result := Insert ( result , j , [ i , tmp ] ) ;
29280: LD_ADDR_VAR 0 6
29284: PUSH
29285: LD_VAR 0 6
29289: PPUSH
29290: LD_VAR 0 8
29294: PPUSH
29295: LD_VAR 0 7
29299: PUSH
29300: LD_VAR 0 9
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: PPUSH
29309: CALL_OW 2
29313: ST_TO_ADDR
// break ;
29314: GO 29318
// end ; end ;
29316: GO 29255
29318: POP
29319: POP
// end ; end ;
29320: GO 29119
29322: POP
29323: POP
// if result and not asc then
29324: LD_VAR 0 6
29328: PUSH
29329: LD_VAR 0 4
29333: NOT
29334: AND
29335: IFFALSE 29410
// begin tmp := result ;
29337: LD_ADDR_VAR 0 9
29341: PUSH
29342: LD_VAR 0 6
29346: ST_TO_ADDR
// for i = tmp downto 1 do
29347: LD_ADDR_VAR 0 7
29351: PUSH
29352: DOUBLE
29353: LD_VAR 0 9
29357: INC
29358: ST_TO_ADDR
29359: LD_INT 1
29361: PUSH
29362: FOR_DOWNTO
29363: IFFALSE 29408
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
29365: LD_ADDR_VAR 0 6
29369: PUSH
29370: LD_VAR 0 6
29374: PPUSH
29375: LD_VAR 0 9
29379: PUSH
29380: LD_VAR 0 7
29384: MINUS
29385: PUSH
29386: LD_INT 1
29388: PLUS
29389: PPUSH
29390: LD_VAR 0 9
29394: PUSH
29395: LD_VAR 0 7
29399: ARRAY
29400: PPUSH
29401: CALL_OW 1
29405: ST_TO_ADDR
29406: GO 29362
29408: POP
29409: POP
// end ; tmp := [ ] ;
29410: LD_ADDR_VAR 0 9
29414: PUSH
29415: EMPTY
29416: ST_TO_ADDR
// if mode then
29417: LD_VAR 0 5
29421: IFFALSE 29490
// begin for i = 1 to result do
29423: LD_ADDR_VAR 0 7
29427: PUSH
29428: DOUBLE
29429: LD_INT 1
29431: DEC
29432: ST_TO_ADDR
29433: LD_VAR 0 6
29437: PUSH
29438: FOR_TO
29439: IFFALSE 29478
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
29441: LD_ADDR_VAR 0 9
29445: PUSH
29446: LD_VAR 0 9
29450: PPUSH
29451: LD_VAR 0 7
29455: PPUSH
29456: LD_VAR 0 6
29460: PUSH
29461: LD_VAR 0 7
29465: ARRAY
29466: PUSH
29467: LD_INT 1
29469: ARRAY
29470: PPUSH
29471: CALL_OW 1
29475: ST_TO_ADDR
29476: GO 29438
29478: POP
29479: POP
// result := tmp ;
29480: LD_ADDR_VAR 0 6
29484: PUSH
29485: LD_VAR 0 9
29489: ST_TO_ADDR
// end ; end ;
29490: LD_VAR 0 6
29494: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
29495: LD_INT 0
29497: PPUSH
29498: PPUSH
29499: PPUSH
29500: PPUSH
29501: PPUSH
29502: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
29503: LD_ADDR_VAR 0 5
29507: PUSH
29508: LD_INT 0
29510: PUSH
29511: LD_INT 0
29513: PUSH
29514: LD_INT 0
29516: PUSH
29517: EMPTY
29518: PUSH
29519: EMPTY
29520: LIST
29521: LIST
29522: LIST
29523: LIST
29524: ST_TO_ADDR
// if not x or not y then
29525: LD_VAR 0 2
29529: NOT
29530: PUSH
29531: LD_VAR 0 3
29535: NOT
29536: OR
29537: IFFALSE 29541
// exit ;
29539: GO 31191
// if not range then
29541: LD_VAR 0 4
29545: NOT
29546: IFFALSE 29556
// range := 10 ;
29548: LD_ADDR_VAR 0 4
29552: PUSH
29553: LD_INT 10
29555: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29556: LD_ADDR_VAR 0 8
29560: PUSH
29561: LD_INT 81
29563: PUSH
29564: LD_VAR 0 1
29568: PUSH
29569: EMPTY
29570: LIST
29571: LIST
29572: PUSH
29573: LD_INT 92
29575: PUSH
29576: LD_VAR 0 2
29580: PUSH
29581: LD_VAR 0 3
29585: PUSH
29586: LD_VAR 0 4
29590: PUSH
29591: EMPTY
29592: LIST
29593: LIST
29594: LIST
29595: LIST
29596: PUSH
29597: LD_INT 3
29599: PUSH
29600: LD_INT 21
29602: PUSH
29603: LD_INT 3
29605: PUSH
29606: EMPTY
29607: LIST
29608: LIST
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: PUSH
29614: EMPTY
29615: LIST
29616: LIST
29617: LIST
29618: PPUSH
29619: CALL_OW 69
29623: ST_TO_ADDR
// if not tmp then
29624: LD_VAR 0 8
29628: NOT
29629: IFFALSE 29633
// exit ;
29631: GO 31191
// for i in tmp do
29633: LD_ADDR_VAR 0 6
29637: PUSH
29638: LD_VAR 0 8
29642: PUSH
29643: FOR_IN
29644: IFFALSE 31166
// begin points := [ 0 , 0 , 0 ] ;
29646: LD_ADDR_VAR 0 9
29650: PUSH
29651: LD_INT 0
29653: PUSH
29654: LD_INT 0
29656: PUSH
29657: LD_INT 0
29659: PUSH
29660: EMPTY
29661: LIST
29662: LIST
29663: LIST
29664: ST_TO_ADDR
// bpoints := 1 ;
29665: LD_ADDR_VAR 0 10
29669: PUSH
29670: LD_INT 1
29672: ST_TO_ADDR
// case GetType ( i ) of unit_human :
29673: LD_VAR 0 6
29677: PPUSH
29678: CALL_OW 247
29682: PUSH
29683: LD_INT 1
29685: DOUBLE
29686: EQUAL
29687: IFTRUE 29691
29689: GO 30269
29691: POP
// begin if GetClass ( i ) = 1 then
29692: LD_VAR 0 6
29696: PPUSH
29697: CALL_OW 257
29701: PUSH
29702: LD_INT 1
29704: EQUAL
29705: IFFALSE 29726
// points := [ 10 , 5 , 3 ] ;
29707: LD_ADDR_VAR 0 9
29711: PUSH
29712: LD_INT 10
29714: PUSH
29715: LD_INT 5
29717: PUSH
29718: LD_INT 3
29720: PUSH
29721: EMPTY
29722: LIST
29723: LIST
29724: LIST
29725: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
29726: LD_VAR 0 6
29730: PPUSH
29731: CALL_OW 257
29735: PUSH
29736: LD_INT 2
29738: PUSH
29739: LD_INT 3
29741: PUSH
29742: LD_INT 4
29744: PUSH
29745: EMPTY
29746: LIST
29747: LIST
29748: LIST
29749: IN
29750: IFFALSE 29771
// points := [ 3 , 2 , 1 ] ;
29752: LD_ADDR_VAR 0 9
29756: PUSH
29757: LD_INT 3
29759: PUSH
29760: LD_INT 2
29762: PUSH
29763: LD_INT 1
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: LIST
29770: ST_TO_ADDR
// if GetClass ( i ) = 5 then
29771: LD_VAR 0 6
29775: PPUSH
29776: CALL_OW 257
29780: PUSH
29781: LD_INT 5
29783: EQUAL
29784: IFFALSE 29805
// points := [ 130 , 5 , 2 ] ;
29786: LD_ADDR_VAR 0 9
29790: PUSH
29791: LD_INT 130
29793: PUSH
29794: LD_INT 5
29796: PUSH
29797: LD_INT 2
29799: PUSH
29800: EMPTY
29801: LIST
29802: LIST
29803: LIST
29804: ST_TO_ADDR
// if GetClass ( i ) = 8 then
29805: LD_VAR 0 6
29809: PPUSH
29810: CALL_OW 257
29814: PUSH
29815: LD_INT 8
29817: EQUAL
29818: IFFALSE 29839
// points := [ 35 , 35 , 30 ] ;
29820: LD_ADDR_VAR 0 9
29824: PUSH
29825: LD_INT 35
29827: PUSH
29828: LD_INT 35
29830: PUSH
29831: LD_INT 30
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: LIST
29838: ST_TO_ADDR
// if GetClass ( i ) = 9 then
29839: LD_VAR 0 6
29843: PPUSH
29844: CALL_OW 257
29848: PUSH
29849: LD_INT 9
29851: EQUAL
29852: IFFALSE 29873
// points := [ 20 , 55 , 40 ] ;
29854: LD_ADDR_VAR 0 9
29858: PUSH
29859: LD_INT 20
29861: PUSH
29862: LD_INT 55
29864: PUSH
29865: LD_INT 40
29867: PUSH
29868: EMPTY
29869: LIST
29870: LIST
29871: LIST
29872: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
29873: LD_VAR 0 6
29877: PPUSH
29878: CALL_OW 257
29882: PUSH
29883: LD_INT 12
29885: PUSH
29886: LD_INT 16
29888: PUSH
29889: EMPTY
29890: LIST
29891: LIST
29892: IN
29893: IFFALSE 29914
// points := [ 5 , 3 , 2 ] ;
29895: LD_ADDR_VAR 0 9
29899: PUSH
29900: LD_INT 5
29902: PUSH
29903: LD_INT 3
29905: PUSH
29906: LD_INT 2
29908: PUSH
29909: EMPTY
29910: LIST
29911: LIST
29912: LIST
29913: ST_TO_ADDR
// if GetClass ( i ) = 17 then
29914: LD_VAR 0 6
29918: PPUSH
29919: CALL_OW 257
29923: PUSH
29924: LD_INT 17
29926: EQUAL
29927: IFFALSE 29948
// points := [ 100 , 50 , 75 ] ;
29929: LD_ADDR_VAR 0 9
29933: PUSH
29934: LD_INT 100
29936: PUSH
29937: LD_INT 50
29939: PUSH
29940: LD_INT 75
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: LIST
29947: ST_TO_ADDR
// if GetClass ( i ) = 15 then
29948: LD_VAR 0 6
29952: PPUSH
29953: CALL_OW 257
29957: PUSH
29958: LD_INT 15
29960: EQUAL
29961: IFFALSE 29982
// points := [ 10 , 5 , 3 ] ;
29963: LD_ADDR_VAR 0 9
29967: PUSH
29968: LD_INT 10
29970: PUSH
29971: LD_INT 5
29973: PUSH
29974: LD_INT 3
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: LIST
29981: ST_TO_ADDR
// if GetClass ( i ) = 14 then
29982: LD_VAR 0 6
29986: PPUSH
29987: CALL_OW 257
29991: PUSH
29992: LD_INT 14
29994: EQUAL
29995: IFFALSE 30016
// points := [ 10 , 0 , 0 ] ;
29997: LD_ADDR_VAR 0 9
30001: PUSH
30002: LD_INT 10
30004: PUSH
30005: LD_INT 0
30007: PUSH
30008: LD_INT 0
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: LIST
30015: ST_TO_ADDR
// if GetClass ( i ) = 11 then
30016: LD_VAR 0 6
30020: PPUSH
30021: CALL_OW 257
30025: PUSH
30026: LD_INT 11
30028: EQUAL
30029: IFFALSE 30050
// points := [ 30 , 10 , 5 ] ;
30031: LD_ADDR_VAR 0 9
30035: PUSH
30036: LD_INT 30
30038: PUSH
30039: LD_INT 10
30041: PUSH
30042: LD_INT 5
30044: PUSH
30045: EMPTY
30046: LIST
30047: LIST
30048: LIST
30049: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
30050: LD_VAR 0 1
30054: PPUSH
30055: LD_INT 5
30057: PPUSH
30058: CALL_OW 321
30062: PUSH
30063: LD_INT 2
30065: EQUAL
30066: IFFALSE 30083
// bpoints := bpoints * 1.8 ;
30068: LD_ADDR_VAR 0 10
30072: PUSH
30073: LD_VAR 0 10
30077: PUSH
30078: LD_REAL  1.80000000000000E+0000
30081: MUL
30082: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
30083: LD_VAR 0 6
30087: PPUSH
30088: CALL_OW 257
30092: PUSH
30093: LD_INT 1
30095: PUSH
30096: LD_INT 2
30098: PUSH
30099: LD_INT 3
30101: PUSH
30102: LD_INT 4
30104: PUSH
30105: EMPTY
30106: LIST
30107: LIST
30108: LIST
30109: LIST
30110: IN
30111: PUSH
30112: LD_VAR 0 1
30116: PPUSH
30117: LD_INT 51
30119: PPUSH
30120: CALL_OW 321
30124: PUSH
30125: LD_INT 2
30127: EQUAL
30128: AND
30129: IFFALSE 30146
// bpoints := bpoints * 1.2 ;
30131: LD_ADDR_VAR 0 10
30135: PUSH
30136: LD_VAR 0 10
30140: PUSH
30141: LD_REAL  1.20000000000000E+0000
30144: MUL
30145: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
30146: LD_VAR 0 6
30150: PPUSH
30151: CALL_OW 257
30155: PUSH
30156: LD_INT 5
30158: PUSH
30159: LD_INT 7
30161: PUSH
30162: LD_INT 9
30164: PUSH
30165: EMPTY
30166: LIST
30167: LIST
30168: LIST
30169: IN
30170: PUSH
30171: LD_VAR 0 1
30175: PPUSH
30176: LD_INT 52
30178: PPUSH
30179: CALL_OW 321
30183: PUSH
30184: LD_INT 2
30186: EQUAL
30187: AND
30188: IFFALSE 30205
// bpoints := bpoints * 1.5 ;
30190: LD_ADDR_VAR 0 10
30194: PUSH
30195: LD_VAR 0 10
30199: PUSH
30200: LD_REAL  1.50000000000000E+0000
30203: MUL
30204: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
30205: LD_VAR 0 1
30209: PPUSH
30210: LD_INT 66
30212: PPUSH
30213: CALL_OW 321
30217: PUSH
30218: LD_INT 2
30220: EQUAL
30221: IFFALSE 30238
// bpoints := bpoints * 1.1 ;
30223: LD_ADDR_VAR 0 10
30227: PUSH
30228: LD_VAR 0 10
30232: PUSH
30233: LD_REAL  1.10000000000000E+0000
30236: MUL
30237: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
30238: LD_ADDR_VAR 0 10
30242: PUSH
30243: LD_VAR 0 10
30247: PUSH
30248: LD_VAR 0 6
30252: PPUSH
30253: LD_INT 1
30255: PPUSH
30256: CALL_OW 259
30260: PUSH
30261: LD_REAL  1.15000000000000E+0000
30264: MUL
30265: MUL
30266: ST_TO_ADDR
// end ; unit_vehicle :
30267: GO 31095
30269: LD_INT 2
30271: DOUBLE
30272: EQUAL
30273: IFTRUE 30277
30275: GO 31083
30277: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
30278: LD_VAR 0 6
30282: PPUSH
30283: CALL_OW 264
30287: PUSH
30288: LD_INT 2
30290: PUSH
30291: LD_INT 42
30293: PUSH
30294: LD_INT 24
30296: PUSH
30297: EMPTY
30298: LIST
30299: LIST
30300: LIST
30301: IN
30302: IFFALSE 30323
// points := [ 25 , 5 , 3 ] ;
30304: LD_ADDR_VAR 0 9
30308: PUSH
30309: LD_INT 25
30311: PUSH
30312: LD_INT 5
30314: PUSH
30315: LD_INT 3
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: LIST
30322: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
30323: LD_VAR 0 6
30327: PPUSH
30328: CALL_OW 264
30332: PUSH
30333: LD_INT 4
30335: PUSH
30336: LD_INT 43
30338: PUSH
30339: LD_INT 25
30341: PUSH
30342: EMPTY
30343: LIST
30344: LIST
30345: LIST
30346: IN
30347: IFFALSE 30368
// points := [ 40 , 15 , 5 ] ;
30349: LD_ADDR_VAR 0 9
30353: PUSH
30354: LD_INT 40
30356: PUSH
30357: LD_INT 15
30359: PUSH
30360: LD_INT 5
30362: PUSH
30363: EMPTY
30364: LIST
30365: LIST
30366: LIST
30367: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
30368: LD_VAR 0 6
30372: PPUSH
30373: CALL_OW 264
30377: PUSH
30378: LD_INT 3
30380: PUSH
30381: LD_INT 23
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: IN
30388: IFFALSE 30409
// points := [ 7 , 25 , 8 ] ;
30390: LD_ADDR_VAR 0 9
30394: PUSH
30395: LD_INT 7
30397: PUSH
30398: LD_INT 25
30400: PUSH
30401: LD_INT 8
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: LIST
30408: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
30409: LD_VAR 0 6
30413: PPUSH
30414: CALL_OW 264
30418: PUSH
30419: LD_INT 5
30421: PUSH
30422: LD_INT 27
30424: PUSH
30425: LD_INT 44
30427: PUSH
30428: EMPTY
30429: LIST
30430: LIST
30431: LIST
30432: IN
30433: IFFALSE 30454
// points := [ 14 , 50 , 16 ] ;
30435: LD_ADDR_VAR 0 9
30439: PUSH
30440: LD_INT 14
30442: PUSH
30443: LD_INT 50
30445: PUSH
30446: LD_INT 16
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: LIST
30453: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
30454: LD_VAR 0 6
30458: PPUSH
30459: CALL_OW 264
30463: PUSH
30464: LD_INT 6
30466: PUSH
30467: LD_INT 46
30469: PUSH
30470: EMPTY
30471: LIST
30472: LIST
30473: IN
30474: IFFALSE 30495
// points := [ 32 , 120 , 70 ] ;
30476: LD_ADDR_VAR 0 9
30480: PUSH
30481: LD_INT 32
30483: PUSH
30484: LD_INT 120
30486: PUSH
30487: LD_INT 70
30489: PUSH
30490: EMPTY
30491: LIST
30492: LIST
30493: LIST
30494: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
30495: LD_VAR 0 6
30499: PPUSH
30500: CALL_OW 264
30504: PUSH
30505: LD_INT 7
30507: PUSH
30508: LD_INT 28
30510: PUSH
30511: LD_INT 45
30513: PUSH
30514: LD_INT 92
30516: PUSH
30517: EMPTY
30518: LIST
30519: LIST
30520: LIST
30521: LIST
30522: IN
30523: IFFALSE 30544
// points := [ 35 , 20 , 45 ] ;
30525: LD_ADDR_VAR 0 9
30529: PUSH
30530: LD_INT 35
30532: PUSH
30533: LD_INT 20
30535: PUSH
30536: LD_INT 45
30538: PUSH
30539: EMPTY
30540: LIST
30541: LIST
30542: LIST
30543: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
30544: LD_VAR 0 6
30548: PPUSH
30549: CALL_OW 264
30553: PUSH
30554: LD_INT 47
30556: PUSH
30557: EMPTY
30558: LIST
30559: IN
30560: IFFALSE 30581
// points := [ 67 , 45 , 75 ] ;
30562: LD_ADDR_VAR 0 9
30566: PUSH
30567: LD_INT 67
30569: PUSH
30570: LD_INT 45
30572: PUSH
30573: LD_INT 75
30575: PUSH
30576: EMPTY
30577: LIST
30578: LIST
30579: LIST
30580: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
30581: LD_VAR 0 6
30585: PPUSH
30586: CALL_OW 264
30590: PUSH
30591: LD_INT 26
30593: PUSH
30594: EMPTY
30595: LIST
30596: IN
30597: IFFALSE 30618
// points := [ 120 , 30 , 80 ] ;
30599: LD_ADDR_VAR 0 9
30603: PUSH
30604: LD_INT 120
30606: PUSH
30607: LD_INT 30
30609: PUSH
30610: LD_INT 80
30612: PUSH
30613: EMPTY
30614: LIST
30615: LIST
30616: LIST
30617: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
30618: LD_VAR 0 6
30622: PPUSH
30623: CALL_OW 264
30627: PUSH
30628: LD_INT 22
30630: PUSH
30631: EMPTY
30632: LIST
30633: IN
30634: IFFALSE 30655
// points := [ 40 , 1 , 1 ] ;
30636: LD_ADDR_VAR 0 9
30640: PUSH
30641: LD_INT 40
30643: PUSH
30644: LD_INT 1
30646: PUSH
30647: LD_INT 1
30649: PUSH
30650: EMPTY
30651: LIST
30652: LIST
30653: LIST
30654: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
30655: LD_VAR 0 6
30659: PPUSH
30660: CALL_OW 264
30664: PUSH
30665: LD_INT 29
30667: PUSH
30668: EMPTY
30669: LIST
30670: IN
30671: IFFALSE 30692
// points := [ 70 , 200 , 400 ] ;
30673: LD_ADDR_VAR 0 9
30677: PUSH
30678: LD_INT 70
30680: PUSH
30681: LD_INT 200
30683: PUSH
30684: LD_INT 400
30686: PUSH
30687: EMPTY
30688: LIST
30689: LIST
30690: LIST
30691: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
30692: LD_VAR 0 6
30696: PPUSH
30697: CALL_OW 264
30701: PUSH
30702: LD_INT 14
30704: PUSH
30705: LD_INT 53
30707: PUSH
30708: EMPTY
30709: LIST
30710: LIST
30711: IN
30712: IFFALSE 30733
// points := [ 40 , 10 , 20 ] ;
30714: LD_ADDR_VAR 0 9
30718: PUSH
30719: LD_INT 40
30721: PUSH
30722: LD_INT 10
30724: PUSH
30725: LD_INT 20
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: LIST
30732: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
30733: LD_VAR 0 6
30737: PPUSH
30738: CALL_OW 264
30742: PUSH
30743: LD_INT 9
30745: PUSH
30746: EMPTY
30747: LIST
30748: IN
30749: IFFALSE 30770
// points := [ 5 , 70 , 20 ] ;
30751: LD_ADDR_VAR 0 9
30755: PUSH
30756: LD_INT 5
30758: PUSH
30759: LD_INT 70
30761: PUSH
30762: LD_INT 20
30764: PUSH
30765: EMPTY
30766: LIST
30767: LIST
30768: LIST
30769: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
30770: LD_VAR 0 6
30774: PPUSH
30775: CALL_OW 264
30779: PUSH
30780: LD_INT 10
30782: PUSH
30783: EMPTY
30784: LIST
30785: IN
30786: IFFALSE 30807
// points := [ 35 , 110 , 70 ] ;
30788: LD_ADDR_VAR 0 9
30792: PUSH
30793: LD_INT 35
30795: PUSH
30796: LD_INT 110
30798: PUSH
30799: LD_INT 70
30801: PUSH
30802: EMPTY
30803: LIST
30804: LIST
30805: LIST
30806: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
30807: LD_VAR 0 6
30811: PPUSH
30812: CALL_OW 265
30816: PUSH
30817: LD_INT 25
30819: EQUAL
30820: IFFALSE 30841
// points := [ 80 , 65 , 100 ] ;
30822: LD_ADDR_VAR 0 9
30826: PUSH
30827: LD_INT 80
30829: PUSH
30830: LD_INT 65
30832: PUSH
30833: LD_INT 100
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: LIST
30840: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
30841: LD_VAR 0 6
30845: PPUSH
30846: CALL_OW 263
30850: PUSH
30851: LD_INT 1
30853: EQUAL
30854: IFFALSE 30889
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
30856: LD_ADDR_VAR 0 10
30860: PUSH
30861: LD_VAR 0 10
30865: PUSH
30866: LD_VAR 0 6
30870: PPUSH
30871: CALL_OW 311
30875: PPUSH
30876: LD_INT 3
30878: PPUSH
30879: CALL_OW 259
30883: PUSH
30884: LD_INT 4
30886: MUL
30887: MUL
30888: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
30889: LD_VAR 0 6
30893: PPUSH
30894: CALL_OW 263
30898: PUSH
30899: LD_INT 2
30901: EQUAL
30902: IFFALSE 30953
// begin j := IsControledBy ( i ) ;
30904: LD_ADDR_VAR 0 7
30908: PUSH
30909: LD_VAR 0 6
30913: PPUSH
30914: CALL_OW 312
30918: ST_TO_ADDR
// if j then
30919: LD_VAR 0 7
30923: IFFALSE 30953
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
30925: LD_ADDR_VAR 0 10
30929: PUSH
30930: LD_VAR 0 10
30934: PUSH
30935: LD_VAR 0 7
30939: PPUSH
30940: LD_INT 3
30942: PPUSH
30943: CALL_OW 259
30947: PUSH
30948: LD_INT 3
30950: MUL
30951: MUL
30952: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
30953: LD_VAR 0 6
30957: PPUSH
30958: CALL_OW 264
30962: PUSH
30963: LD_INT 5
30965: PUSH
30966: LD_INT 6
30968: PUSH
30969: LD_INT 46
30971: PUSH
30972: LD_INT 44
30974: PUSH
30975: LD_INT 47
30977: PUSH
30978: LD_INT 45
30980: PUSH
30981: LD_INT 28
30983: PUSH
30984: LD_INT 7
30986: PUSH
30987: LD_INT 27
30989: PUSH
30990: LD_INT 29
30992: PUSH
30993: EMPTY
30994: LIST
30995: LIST
30996: LIST
30997: LIST
30998: LIST
30999: LIST
31000: LIST
31001: LIST
31002: LIST
31003: LIST
31004: IN
31005: PUSH
31006: LD_VAR 0 1
31010: PPUSH
31011: LD_INT 52
31013: PPUSH
31014: CALL_OW 321
31018: PUSH
31019: LD_INT 2
31021: EQUAL
31022: AND
31023: IFFALSE 31040
// bpoints := bpoints * 1.2 ;
31025: LD_ADDR_VAR 0 10
31029: PUSH
31030: LD_VAR 0 10
31034: PUSH
31035: LD_REAL  1.20000000000000E+0000
31038: MUL
31039: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
31040: LD_VAR 0 6
31044: PPUSH
31045: CALL_OW 264
31049: PUSH
31050: LD_INT 6
31052: PUSH
31053: LD_INT 46
31055: PUSH
31056: LD_INT 47
31058: PUSH
31059: EMPTY
31060: LIST
31061: LIST
31062: LIST
31063: IN
31064: IFFALSE 31081
// bpoints := bpoints * 1.2 ;
31066: LD_ADDR_VAR 0 10
31070: PUSH
31071: LD_VAR 0 10
31075: PUSH
31076: LD_REAL  1.20000000000000E+0000
31079: MUL
31080: ST_TO_ADDR
// end ; unit_building :
31081: GO 31095
31083: LD_INT 3
31085: DOUBLE
31086: EQUAL
31087: IFTRUE 31091
31089: GO 31094
31091: POP
// ; end ;
31092: GO 31095
31094: POP
// for j = 1 to 3 do
31095: LD_ADDR_VAR 0 7
31099: PUSH
31100: DOUBLE
31101: LD_INT 1
31103: DEC
31104: ST_TO_ADDR
31105: LD_INT 3
31107: PUSH
31108: FOR_TO
31109: IFFALSE 31162
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
31111: LD_ADDR_VAR 0 5
31115: PUSH
31116: LD_VAR 0 5
31120: PPUSH
31121: LD_VAR 0 7
31125: PPUSH
31126: LD_VAR 0 5
31130: PUSH
31131: LD_VAR 0 7
31135: ARRAY
31136: PUSH
31137: LD_VAR 0 9
31141: PUSH
31142: LD_VAR 0 7
31146: ARRAY
31147: PUSH
31148: LD_VAR 0 10
31152: MUL
31153: PLUS
31154: PPUSH
31155: CALL_OW 1
31159: ST_TO_ADDR
31160: GO 31108
31162: POP
31163: POP
// end ;
31164: GO 29643
31166: POP
31167: POP
// result := Replace ( result , 4 , tmp ) ;
31168: LD_ADDR_VAR 0 5
31172: PUSH
31173: LD_VAR 0 5
31177: PPUSH
31178: LD_INT 4
31180: PPUSH
31181: LD_VAR 0 8
31185: PPUSH
31186: CALL_OW 1
31190: ST_TO_ADDR
// end ;
31191: LD_VAR 0 5
31195: RET
// export function DangerAtRange ( unit , range ) ; begin
31196: LD_INT 0
31198: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
31199: LD_ADDR_VAR 0 3
31203: PUSH
31204: LD_VAR 0 1
31208: PPUSH
31209: CALL_OW 255
31213: PPUSH
31214: LD_VAR 0 1
31218: PPUSH
31219: CALL_OW 250
31223: PPUSH
31224: LD_VAR 0 1
31228: PPUSH
31229: CALL_OW 251
31233: PPUSH
31234: LD_VAR 0 2
31238: PPUSH
31239: CALL 29495 0 4
31243: ST_TO_ADDR
// end ;
31244: LD_VAR 0 3
31248: RET
// export function DangerInArea ( side , area ) ; begin
31249: LD_INT 0
31251: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
31252: LD_ADDR_VAR 0 3
31256: PUSH
31257: LD_VAR 0 2
31261: PPUSH
31262: LD_INT 81
31264: PUSH
31265: LD_VAR 0 1
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: PPUSH
31274: CALL_OW 70
31278: ST_TO_ADDR
// end ;
31279: LD_VAR 0 3
31283: RET
// export function IsExtension ( b ) ; begin
31284: LD_INT 0
31286: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
31287: LD_ADDR_VAR 0 2
31291: PUSH
31292: LD_VAR 0 1
31296: PUSH
31297: LD_INT 23
31299: PUSH
31300: LD_INT 20
31302: PUSH
31303: LD_INT 22
31305: PUSH
31306: LD_INT 17
31308: PUSH
31309: LD_INT 24
31311: PUSH
31312: LD_INT 21
31314: PUSH
31315: LD_INT 19
31317: PUSH
31318: LD_INT 16
31320: PUSH
31321: LD_INT 25
31323: PUSH
31324: LD_INT 18
31326: PUSH
31327: EMPTY
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: LIST
31333: LIST
31334: LIST
31335: LIST
31336: LIST
31337: LIST
31338: IN
31339: ST_TO_ADDR
// end ;
31340: LD_VAR 0 2
31344: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
31345: LD_INT 0
31347: PPUSH
31348: PPUSH
31349: PPUSH
// result := [ ] ;
31350: LD_ADDR_VAR 0 4
31354: PUSH
31355: EMPTY
31356: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
31357: LD_ADDR_VAR 0 5
31361: PUSH
31362: LD_VAR 0 2
31366: PPUSH
31367: LD_INT 21
31369: PUSH
31370: LD_INT 3
31372: PUSH
31373: EMPTY
31374: LIST
31375: LIST
31376: PPUSH
31377: CALL_OW 70
31381: ST_TO_ADDR
// if not tmp then
31382: LD_VAR 0 5
31386: NOT
31387: IFFALSE 31391
// exit ;
31389: GO 31455
// if checkLink then
31391: LD_VAR 0 3
31395: IFFALSE 31445
// begin for i in tmp do
31397: LD_ADDR_VAR 0 6
31401: PUSH
31402: LD_VAR 0 5
31406: PUSH
31407: FOR_IN
31408: IFFALSE 31443
// if GetBase ( i ) <> base then
31410: LD_VAR 0 6
31414: PPUSH
31415: CALL_OW 274
31419: PUSH
31420: LD_VAR 0 1
31424: NONEQUAL
31425: IFFALSE 31441
// ComLinkToBase ( base , i ) ;
31427: LD_VAR 0 1
31431: PPUSH
31432: LD_VAR 0 6
31436: PPUSH
31437: CALL_OW 169
31441: GO 31407
31443: POP
31444: POP
// end ; result := tmp ;
31445: LD_ADDR_VAR 0 4
31449: PUSH
31450: LD_VAR 0 5
31454: ST_TO_ADDR
// end ;
31455: LD_VAR 0 4
31459: RET
// export function ComComplete ( units , b ) ; var i ; begin
31460: LD_INT 0
31462: PPUSH
31463: PPUSH
// if not units then
31464: LD_VAR 0 1
31468: NOT
31469: IFFALSE 31473
// exit ;
31471: GO 31563
// for i in units do
31473: LD_ADDR_VAR 0 4
31477: PUSH
31478: LD_VAR 0 1
31482: PUSH
31483: FOR_IN
31484: IFFALSE 31561
// if BuildingStatus ( b ) = bs_build then
31486: LD_VAR 0 2
31490: PPUSH
31491: CALL_OW 461
31495: PUSH
31496: LD_INT 1
31498: EQUAL
31499: IFFALSE 31559
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
31501: LD_VAR 0 4
31505: PPUSH
31506: LD_STRING h
31508: PUSH
31509: LD_VAR 0 2
31513: PPUSH
31514: CALL_OW 250
31518: PUSH
31519: LD_VAR 0 2
31523: PPUSH
31524: CALL_OW 251
31528: PUSH
31529: LD_VAR 0 2
31533: PUSH
31534: LD_INT 0
31536: PUSH
31537: LD_INT 0
31539: PUSH
31540: LD_INT 0
31542: PUSH
31543: EMPTY
31544: LIST
31545: LIST
31546: LIST
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: PUSH
31552: EMPTY
31553: LIST
31554: PPUSH
31555: CALL_OW 446
31559: GO 31483
31561: POP
31562: POP
// end ;
31563: LD_VAR 0 3
31567: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
31568: LD_INT 0
31570: PPUSH
31571: PPUSH
31572: PPUSH
31573: PPUSH
31574: PPUSH
31575: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
31576: LD_VAR 0 1
31580: NOT
31581: PUSH
31582: LD_VAR 0 1
31586: PPUSH
31587: CALL_OW 263
31591: PUSH
31592: LD_INT 2
31594: NONEQUAL
31595: OR
31596: IFFALSE 31600
// exit ;
31598: GO 31916
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
31600: LD_ADDR_VAR 0 6
31604: PUSH
31605: LD_INT 22
31607: PUSH
31608: LD_VAR 0 1
31612: PPUSH
31613: CALL_OW 255
31617: PUSH
31618: EMPTY
31619: LIST
31620: LIST
31621: PUSH
31622: LD_INT 2
31624: PUSH
31625: LD_INT 30
31627: PUSH
31628: LD_INT 36
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PUSH
31635: LD_INT 34
31637: PUSH
31638: LD_INT 31
31640: PUSH
31641: EMPTY
31642: LIST
31643: LIST
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: LIST
31649: PUSH
31650: EMPTY
31651: LIST
31652: LIST
31653: PPUSH
31654: CALL_OW 69
31658: ST_TO_ADDR
// if not tmp then
31659: LD_VAR 0 6
31663: NOT
31664: IFFALSE 31668
// exit ;
31666: GO 31916
// result := [ ] ;
31668: LD_ADDR_VAR 0 2
31672: PUSH
31673: EMPTY
31674: ST_TO_ADDR
// for i in tmp do
31675: LD_ADDR_VAR 0 3
31679: PUSH
31680: LD_VAR 0 6
31684: PUSH
31685: FOR_IN
31686: IFFALSE 31757
// begin t := UnitsInside ( i ) ;
31688: LD_ADDR_VAR 0 4
31692: PUSH
31693: LD_VAR 0 3
31697: PPUSH
31698: CALL_OW 313
31702: ST_TO_ADDR
// if t then
31703: LD_VAR 0 4
31707: IFFALSE 31755
// for j in t do
31709: LD_ADDR_VAR 0 7
31713: PUSH
31714: LD_VAR 0 4
31718: PUSH
31719: FOR_IN
31720: IFFALSE 31753
// result := Replace ( result , result + 1 , j ) ;
31722: LD_ADDR_VAR 0 2
31726: PUSH
31727: LD_VAR 0 2
31731: PPUSH
31732: LD_VAR 0 2
31736: PUSH
31737: LD_INT 1
31739: PLUS
31740: PPUSH
31741: LD_VAR 0 7
31745: PPUSH
31746: CALL_OW 1
31750: ST_TO_ADDR
31751: GO 31719
31753: POP
31754: POP
// end ;
31755: GO 31685
31757: POP
31758: POP
// if not result then
31759: LD_VAR 0 2
31763: NOT
31764: IFFALSE 31768
// exit ;
31766: GO 31916
// mech := result [ 1 ] ;
31768: LD_ADDR_VAR 0 5
31772: PUSH
31773: LD_VAR 0 2
31777: PUSH
31778: LD_INT 1
31780: ARRAY
31781: ST_TO_ADDR
// if result > 1 then
31782: LD_VAR 0 2
31786: PUSH
31787: LD_INT 1
31789: GREATER
31790: IFFALSE 31902
// begin for i = 2 to result do
31792: LD_ADDR_VAR 0 3
31796: PUSH
31797: DOUBLE
31798: LD_INT 2
31800: DEC
31801: ST_TO_ADDR
31802: LD_VAR 0 2
31806: PUSH
31807: FOR_TO
31808: IFFALSE 31900
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
31810: LD_ADDR_VAR 0 4
31814: PUSH
31815: LD_VAR 0 2
31819: PUSH
31820: LD_VAR 0 3
31824: ARRAY
31825: PPUSH
31826: LD_INT 3
31828: PPUSH
31829: CALL_OW 259
31833: PUSH
31834: LD_VAR 0 2
31838: PUSH
31839: LD_VAR 0 3
31843: ARRAY
31844: PPUSH
31845: CALL_OW 432
31849: MINUS
31850: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
31851: LD_VAR 0 4
31855: PUSH
31856: LD_VAR 0 5
31860: PPUSH
31861: LD_INT 3
31863: PPUSH
31864: CALL_OW 259
31868: PUSH
31869: LD_VAR 0 5
31873: PPUSH
31874: CALL_OW 432
31878: MINUS
31879: GREATEREQUAL
31880: IFFALSE 31898
// mech := result [ i ] ;
31882: LD_ADDR_VAR 0 5
31886: PUSH
31887: LD_VAR 0 2
31891: PUSH
31892: LD_VAR 0 3
31896: ARRAY
31897: ST_TO_ADDR
// end ;
31898: GO 31807
31900: POP
31901: POP
// end ; ComLinkTo ( vehicle , mech ) ;
31902: LD_VAR 0 1
31906: PPUSH
31907: LD_VAR 0 5
31911: PPUSH
31912: CALL_OW 135
// end ;
31916: LD_VAR 0 2
31920: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
31921: LD_INT 0
31923: PPUSH
31924: PPUSH
31925: PPUSH
31926: PPUSH
31927: PPUSH
31928: PPUSH
31929: PPUSH
31930: PPUSH
31931: PPUSH
31932: PPUSH
31933: PPUSH
31934: PPUSH
31935: PPUSH
// result := [ ] ;
31936: LD_ADDR_VAR 0 7
31940: PUSH
31941: EMPTY
31942: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
31943: LD_VAR 0 1
31947: PPUSH
31948: CALL_OW 266
31952: PUSH
31953: LD_INT 0
31955: PUSH
31956: LD_INT 1
31958: PUSH
31959: EMPTY
31960: LIST
31961: LIST
31962: IN
31963: NOT
31964: IFFALSE 31968
// exit ;
31966: GO 33602
// if name then
31968: LD_VAR 0 3
31972: IFFALSE 31988
// SetBName ( base_dep , name ) ;
31974: LD_VAR 0 1
31978: PPUSH
31979: LD_VAR 0 3
31983: PPUSH
31984: CALL_OW 500
// base := GetBase ( base_dep ) ;
31988: LD_ADDR_VAR 0 15
31992: PUSH
31993: LD_VAR 0 1
31997: PPUSH
31998: CALL_OW 274
32002: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
32003: LD_ADDR_VAR 0 16
32007: PUSH
32008: LD_VAR 0 1
32012: PPUSH
32013: CALL_OW 255
32017: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
32018: LD_ADDR_VAR 0 17
32022: PUSH
32023: LD_VAR 0 1
32027: PPUSH
32028: CALL_OW 248
32032: ST_TO_ADDR
// if sources then
32033: LD_VAR 0 5
32037: IFFALSE 32084
// for i = 1 to 3 do
32039: LD_ADDR_VAR 0 8
32043: PUSH
32044: DOUBLE
32045: LD_INT 1
32047: DEC
32048: ST_TO_ADDR
32049: LD_INT 3
32051: PUSH
32052: FOR_TO
32053: IFFALSE 32082
// AddResourceType ( base , i , sources [ i ] ) ;
32055: LD_VAR 0 15
32059: PPUSH
32060: LD_VAR 0 8
32064: PPUSH
32065: LD_VAR 0 5
32069: PUSH
32070: LD_VAR 0 8
32074: ARRAY
32075: PPUSH
32076: CALL_OW 276
32080: GO 32052
32082: POP
32083: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
32084: LD_ADDR_VAR 0 18
32088: PUSH
32089: LD_VAR 0 15
32093: PPUSH
32094: LD_VAR 0 2
32098: PPUSH
32099: LD_INT 1
32101: PPUSH
32102: CALL 31345 0 3
32106: ST_TO_ADDR
// InitHc ;
32107: CALL_OW 19
// InitUc ;
32111: CALL_OW 18
// uc_side := side ;
32115: LD_ADDR_OWVAR 20
32119: PUSH
32120: LD_VAR 0 16
32124: ST_TO_ADDR
// uc_nation := nation ;
32125: LD_ADDR_OWVAR 21
32129: PUSH
32130: LD_VAR 0 17
32134: ST_TO_ADDR
// if buildings then
32135: LD_VAR 0 18
32139: IFFALSE 33461
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
32141: LD_ADDR_VAR 0 19
32145: PUSH
32146: LD_VAR 0 18
32150: PPUSH
32151: LD_INT 2
32153: PUSH
32154: LD_INT 30
32156: PUSH
32157: LD_INT 29
32159: PUSH
32160: EMPTY
32161: LIST
32162: LIST
32163: PUSH
32164: LD_INT 30
32166: PUSH
32167: LD_INT 30
32169: PUSH
32170: EMPTY
32171: LIST
32172: LIST
32173: PUSH
32174: EMPTY
32175: LIST
32176: LIST
32177: LIST
32178: PPUSH
32179: CALL_OW 72
32183: ST_TO_ADDR
// if tmp then
32184: LD_VAR 0 19
32188: IFFALSE 32236
// for i in tmp do
32190: LD_ADDR_VAR 0 8
32194: PUSH
32195: LD_VAR 0 19
32199: PUSH
32200: FOR_IN
32201: IFFALSE 32234
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
32203: LD_VAR 0 8
32207: PPUSH
32208: CALL_OW 250
32212: PPUSH
32213: LD_VAR 0 8
32217: PPUSH
32218: CALL_OW 251
32222: PPUSH
32223: LD_VAR 0 16
32227: PPUSH
32228: CALL_OW 441
32232: GO 32200
32234: POP
32235: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
32236: LD_VAR 0 18
32240: PPUSH
32241: LD_INT 2
32243: PUSH
32244: LD_INT 30
32246: PUSH
32247: LD_INT 32
32249: PUSH
32250: EMPTY
32251: LIST
32252: LIST
32253: PUSH
32254: LD_INT 30
32256: PUSH
32257: LD_INT 33
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: PUSH
32264: EMPTY
32265: LIST
32266: LIST
32267: LIST
32268: PPUSH
32269: CALL_OW 72
32273: IFFALSE 32361
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
32275: LD_ADDR_VAR 0 8
32279: PUSH
32280: LD_VAR 0 18
32284: PPUSH
32285: LD_INT 2
32287: PUSH
32288: LD_INT 30
32290: PUSH
32291: LD_INT 32
32293: PUSH
32294: EMPTY
32295: LIST
32296: LIST
32297: PUSH
32298: LD_INT 30
32300: PUSH
32301: LD_INT 33
32303: PUSH
32304: EMPTY
32305: LIST
32306: LIST
32307: PUSH
32308: EMPTY
32309: LIST
32310: LIST
32311: LIST
32312: PPUSH
32313: CALL_OW 72
32317: PUSH
32318: FOR_IN
32319: IFFALSE 32359
// begin if not GetBWeapon ( i ) then
32321: LD_VAR 0 8
32325: PPUSH
32326: CALL_OW 269
32330: NOT
32331: IFFALSE 32357
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
32333: LD_VAR 0 8
32337: PPUSH
32338: LD_VAR 0 8
32342: PPUSH
32343: LD_VAR 0 2
32347: PPUSH
32348: CALL 33607 0 2
32352: PPUSH
32353: CALL_OW 431
// end ;
32357: GO 32318
32359: POP
32360: POP
// end ; for i = 1 to personel do
32361: LD_ADDR_VAR 0 8
32365: PUSH
32366: DOUBLE
32367: LD_INT 1
32369: DEC
32370: ST_TO_ADDR
32371: LD_VAR 0 6
32375: PUSH
32376: FOR_TO
32377: IFFALSE 33441
// begin if i > 4 then
32379: LD_VAR 0 8
32383: PUSH
32384: LD_INT 4
32386: GREATER
32387: IFFALSE 32391
// break ;
32389: GO 33441
// case i of 1 :
32391: LD_VAR 0 8
32395: PUSH
32396: LD_INT 1
32398: DOUBLE
32399: EQUAL
32400: IFTRUE 32404
32402: GO 32484
32404: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
32405: LD_ADDR_VAR 0 12
32409: PUSH
32410: LD_VAR 0 18
32414: PPUSH
32415: LD_INT 22
32417: PUSH
32418: LD_VAR 0 16
32422: PUSH
32423: EMPTY
32424: LIST
32425: LIST
32426: PUSH
32427: LD_INT 58
32429: PUSH
32430: EMPTY
32431: LIST
32432: PUSH
32433: LD_INT 2
32435: PUSH
32436: LD_INT 30
32438: PUSH
32439: LD_INT 32
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: PUSH
32446: LD_INT 30
32448: PUSH
32449: LD_INT 4
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: PUSH
32456: LD_INT 30
32458: PUSH
32459: LD_INT 5
32461: PUSH
32462: EMPTY
32463: LIST
32464: LIST
32465: PUSH
32466: EMPTY
32467: LIST
32468: LIST
32469: LIST
32470: LIST
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: LIST
32476: PPUSH
32477: CALL_OW 72
32481: ST_TO_ADDR
32482: GO 32706
32484: LD_INT 2
32486: DOUBLE
32487: EQUAL
32488: IFTRUE 32492
32490: GO 32554
32492: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
32493: LD_ADDR_VAR 0 12
32497: PUSH
32498: LD_VAR 0 18
32502: PPUSH
32503: LD_INT 22
32505: PUSH
32506: LD_VAR 0 16
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: LD_INT 2
32517: PUSH
32518: LD_INT 30
32520: PUSH
32521: LD_INT 0
32523: PUSH
32524: EMPTY
32525: LIST
32526: LIST
32527: PUSH
32528: LD_INT 30
32530: PUSH
32531: LD_INT 1
32533: PUSH
32534: EMPTY
32535: LIST
32536: LIST
32537: PUSH
32538: EMPTY
32539: LIST
32540: LIST
32541: LIST
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PPUSH
32547: CALL_OW 72
32551: ST_TO_ADDR
32552: GO 32706
32554: LD_INT 3
32556: DOUBLE
32557: EQUAL
32558: IFTRUE 32562
32560: GO 32624
32562: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
32563: LD_ADDR_VAR 0 12
32567: PUSH
32568: LD_VAR 0 18
32572: PPUSH
32573: LD_INT 22
32575: PUSH
32576: LD_VAR 0 16
32580: PUSH
32581: EMPTY
32582: LIST
32583: LIST
32584: PUSH
32585: LD_INT 2
32587: PUSH
32588: LD_INT 30
32590: PUSH
32591: LD_INT 2
32593: PUSH
32594: EMPTY
32595: LIST
32596: LIST
32597: PUSH
32598: LD_INT 30
32600: PUSH
32601: LD_INT 3
32603: PUSH
32604: EMPTY
32605: LIST
32606: LIST
32607: PUSH
32608: EMPTY
32609: LIST
32610: LIST
32611: LIST
32612: PUSH
32613: EMPTY
32614: LIST
32615: LIST
32616: PPUSH
32617: CALL_OW 72
32621: ST_TO_ADDR
32622: GO 32706
32624: LD_INT 4
32626: DOUBLE
32627: EQUAL
32628: IFTRUE 32632
32630: GO 32705
32632: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
32633: LD_ADDR_VAR 0 12
32637: PUSH
32638: LD_VAR 0 18
32642: PPUSH
32643: LD_INT 22
32645: PUSH
32646: LD_VAR 0 16
32650: PUSH
32651: EMPTY
32652: LIST
32653: LIST
32654: PUSH
32655: LD_INT 2
32657: PUSH
32658: LD_INT 30
32660: PUSH
32661: LD_INT 6
32663: PUSH
32664: EMPTY
32665: LIST
32666: LIST
32667: PUSH
32668: LD_INT 30
32670: PUSH
32671: LD_INT 7
32673: PUSH
32674: EMPTY
32675: LIST
32676: LIST
32677: PUSH
32678: LD_INT 30
32680: PUSH
32681: LD_INT 8
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: PUSH
32688: EMPTY
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: PUSH
32694: EMPTY
32695: LIST
32696: LIST
32697: PPUSH
32698: CALL_OW 72
32702: ST_TO_ADDR
32703: GO 32706
32705: POP
// if i = 1 then
32706: LD_VAR 0 8
32710: PUSH
32711: LD_INT 1
32713: EQUAL
32714: IFFALSE 32825
// begin tmp := [ ] ;
32716: LD_ADDR_VAR 0 19
32720: PUSH
32721: EMPTY
32722: ST_TO_ADDR
// for j in f do
32723: LD_ADDR_VAR 0 9
32727: PUSH
32728: LD_VAR 0 12
32732: PUSH
32733: FOR_IN
32734: IFFALSE 32807
// if GetBType ( j ) = b_bunker then
32736: LD_VAR 0 9
32740: PPUSH
32741: CALL_OW 266
32745: PUSH
32746: LD_INT 32
32748: EQUAL
32749: IFFALSE 32776
// tmp := Insert ( tmp , 1 , j ) else
32751: LD_ADDR_VAR 0 19
32755: PUSH
32756: LD_VAR 0 19
32760: PPUSH
32761: LD_INT 1
32763: PPUSH
32764: LD_VAR 0 9
32768: PPUSH
32769: CALL_OW 2
32773: ST_TO_ADDR
32774: GO 32805
// tmp := Insert ( tmp , tmp + 1 , j ) ;
32776: LD_ADDR_VAR 0 19
32780: PUSH
32781: LD_VAR 0 19
32785: PPUSH
32786: LD_VAR 0 19
32790: PUSH
32791: LD_INT 1
32793: PLUS
32794: PPUSH
32795: LD_VAR 0 9
32799: PPUSH
32800: CALL_OW 2
32804: ST_TO_ADDR
32805: GO 32733
32807: POP
32808: POP
// if tmp then
32809: LD_VAR 0 19
32813: IFFALSE 32825
// f := tmp ;
32815: LD_ADDR_VAR 0 12
32819: PUSH
32820: LD_VAR 0 19
32824: ST_TO_ADDR
// end ; x := personel [ i ] ;
32825: LD_ADDR_VAR 0 13
32829: PUSH
32830: LD_VAR 0 6
32834: PUSH
32835: LD_VAR 0 8
32839: ARRAY
32840: ST_TO_ADDR
// if x = - 1 then
32841: LD_VAR 0 13
32845: PUSH
32846: LD_INT 1
32848: NEG
32849: EQUAL
32850: IFFALSE 33059
// begin for j in f do
32852: LD_ADDR_VAR 0 9
32856: PUSH
32857: LD_VAR 0 12
32861: PUSH
32862: FOR_IN
32863: IFFALSE 33055
// repeat InitHc ;
32865: CALL_OW 19
// if GetBType ( j ) = b_barracks then
32869: LD_VAR 0 9
32873: PPUSH
32874: CALL_OW 266
32878: PUSH
32879: LD_INT 5
32881: EQUAL
32882: IFFALSE 32952
// begin if UnitsInside ( j ) < 3 then
32884: LD_VAR 0 9
32888: PPUSH
32889: CALL_OW 313
32893: PUSH
32894: LD_INT 3
32896: LESS
32897: IFFALSE 32933
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32899: LD_INT 0
32901: PPUSH
32902: LD_INT 5
32904: PUSH
32905: LD_INT 8
32907: PUSH
32908: LD_INT 9
32910: PUSH
32911: EMPTY
32912: LIST
32913: LIST
32914: LIST
32915: PUSH
32916: LD_VAR 0 17
32920: ARRAY
32921: PPUSH
32922: LD_VAR 0 4
32926: PPUSH
32927: CALL_OW 380
32931: GO 32950
// PrepareHuman ( false , i , skill ) ;
32933: LD_INT 0
32935: PPUSH
32936: LD_VAR 0 8
32940: PPUSH
32941: LD_VAR 0 4
32945: PPUSH
32946: CALL_OW 380
// end else
32950: GO 32969
// PrepareHuman ( false , i , skill ) ;
32952: LD_INT 0
32954: PPUSH
32955: LD_VAR 0 8
32959: PPUSH
32960: LD_VAR 0 4
32964: PPUSH
32965: CALL_OW 380
// un := CreateHuman ;
32969: LD_ADDR_VAR 0 14
32973: PUSH
32974: CALL_OW 44
32978: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32979: LD_ADDR_VAR 0 7
32983: PUSH
32984: LD_VAR 0 7
32988: PPUSH
32989: LD_INT 1
32991: PPUSH
32992: LD_VAR 0 14
32996: PPUSH
32997: CALL_OW 2
33001: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
33002: LD_VAR 0 14
33006: PPUSH
33007: LD_VAR 0 9
33011: PPUSH
33012: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
33016: LD_VAR 0 9
33020: PPUSH
33021: CALL_OW 313
33025: PUSH
33026: LD_INT 6
33028: EQUAL
33029: PUSH
33030: LD_VAR 0 9
33034: PPUSH
33035: CALL_OW 266
33039: PUSH
33040: LD_INT 32
33042: PUSH
33043: LD_INT 31
33045: PUSH
33046: EMPTY
33047: LIST
33048: LIST
33049: IN
33050: OR
33051: IFFALSE 32865
33053: GO 32862
33055: POP
33056: POP
// end else
33057: GO 33439
// for j = 1 to x do
33059: LD_ADDR_VAR 0 9
33063: PUSH
33064: DOUBLE
33065: LD_INT 1
33067: DEC
33068: ST_TO_ADDR
33069: LD_VAR 0 13
33073: PUSH
33074: FOR_TO
33075: IFFALSE 33437
// begin InitHc ;
33077: CALL_OW 19
// if not f then
33081: LD_VAR 0 12
33085: NOT
33086: IFFALSE 33175
// begin PrepareHuman ( false , i , skill ) ;
33088: LD_INT 0
33090: PPUSH
33091: LD_VAR 0 8
33095: PPUSH
33096: LD_VAR 0 4
33100: PPUSH
33101: CALL_OW 380
// un := CreateHuman ;
33105: LD_ADDR_VAR 0 14
33109: PUSH
33110: CALL_OW 44
33114: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33115: LD_ADDR_VAR 0 7
33119: PUSH
33120: LD_VAR 0 7
33124: PPUSH
33125: LD_INT 1
33127: PPUSH
33128: LD_VAR 0 14
33132: PPUSH
33133: CALL_OW 2
33137: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33138: LD_VAR 0 14
33142: PPUSH
33143: LD_VAR 0 1
33147: PPUSH
33148: CALL_OW 250
33152: PPUSH
33153: LD_VAR 0 1
33157: PPUSH
33158: CALL_OW 251
33162: PPUSH
33163: LD_INT 10
33165: PPUSH
33166: LD_INT 0
33168: PPUSH
33169: CALL_OW 50
// continue ;
33173: GO 33074
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
33175: LD_VAR 0 12
33179: PUSH
33180: LD_INT 1
33182: ARRAY
33183: PPUSH
33184: CALL_OW 313
33188: PUSH
33189: LD_VAR 0 12
33193: PUSH
33194: LD_INT 1
33196: ARRAY
33197: PPUSH
33198: CALL_OW 266
33202: PUSH
33203: LD_INT 32
33205: PUSH
33206: LD_INT 31
33208: PUSH
33209: EMPTY
33210: LIST
33211: LIST
33212: IN
33213: AND
33214: PUSH
33215: LD_VAR 0 12
33219: PUSH
33220: LD_INT 1
33222: ARRAY
33223: PPUSH
33224: CALL_OW 313
33228: PUSH
33229: LD_INT 6
33231: EQUAL
33232: OR
33233: IFFALSE 33253
// f := Delete ( f , 1 ) ;
33235: LD_ADDR_VAR 0 12
33239: PUSH
33240: LD_VAR 0 12
33244: PPUSH
33245: LD_INT 1
33247: PPUSH
33248: CALL_OW 3
33252: ST_TO_ADDR
// if not f then
33253: LD_VAR 0 12
33257: NOT
33258: IFFALSE 33276
// begin x := x + 2 ;
33260: LD_ADDR_VAR 0 13
33264: PUSH
33265: LD_VAR 0 13
33269: PUSH
33270: LD_INT 2
33272: PLUS
33273: ST_TO_ADDR
// continue ;
33274: GO 33074
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
33276: LD_VAR 0 12
33280: PUSH
33281: LD_INT 1
33283: ARRAY
33284: PPUSH
33285: CALL_OW 266
33289: PUSH
33290: LD_INT 5
33292: EQUAL
33293: IFFALSE 33367
// begin if UnitsInside ( f [ 1 ] ) < 3 then
33295: LD_VAR 0 12
33299: PUSH
33300: LD_INT 1
33302: ARRAY
33303: PPUSH
33304: CALL_OW 313
33308: PUSH
33309: LD_INT 3
33311: LESS
33312: IFFALSE 33348
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33314: LD_INT 0
33316: PPUSH
33317: LD_INT 5
33319: PUSH
33320: LD_INT 8
33322: PUSH
33323: LD_INT 9
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: LIST
33330: PUSH
33331: LD_VAR 0 17
33335: ARRAY
33336: PPUSH
33337: LD_VAR 0 4
33341: PPUSH
33342: CALL_OW 380
33346: GO 33365
// PrepareHuman ( false , i , skill ) ;
33348: LD_INT 0
33350: PPUSH
33351: LD_VAR 0 8
33355: PPUSH
33356: LD_VAR 0 4
33360: PPUSH
33361: CALL_OW 380
// end else
33365: GO 33384
// PrepareHuman ( false , i , skill ) ;
33367: LD_INT 0
33369: PPUSH
33370: LD_VAR 0 8
33374: PPUSH
33375: LD_VAR 0 4
33379: PPUSH
33380: CALL_OW 380
// un := CreateHuman ;
33384: LD_ADDR_VAR 0 14
33388: PUSH
33389: CALL_OW 44
33393: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33394: LD_ADDR_VAR 0 7
33398: PUSH
33399: LD_VAR 0 7
33403: PPUSH
33404: LD_INT 1
33406: PPUSH
33407: LD_VAR 0 14
33411: PPUSH
33412: CALL_OW 2
33416: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
33417: LD_VAR 0 14
33421: PPUSH
33422: LD_VAR 0 12
33426: PUSH
33427: LD_INT 1
33429: ARRAY
33430: PPUSH
33431: CALL_OW 52
// end ;
33435: GO 33074
33437: POP
33438: POP
// end ;
33439: GO 32376
33441: POP
33442: POP
// result := result ^ buildings ;
33443: LD_ADDR_VAR 0 7
33447: PUSH
33448: LD_VAR 0 7
33452: PUSH
33453: LD_VAR 0 18
33457: ADD
33458: ST_TO_ADDR
// end else
33459: GO 33602
// begin for i = 1 to personel do
33461: LD_ADDR_VAR 0 8
33465: PUSH
33466: DOUBLE
33467: LD_INT 1
33469: DEC
33470: ST_TO_ADDR
33471: LD_VAR 0 6
33475: PUSH
33476: FOR_TO
33477: IFFALSE 33600
// begin if i > 4 then
33479: LD_VAR 0 8
33483: PUSH
33484: LD_INT 4
33486: GREATER
33487: IFFALSE 33491
// break ;
33489: GO 33600
// x := personel [ i ] ;
33491: LD_ADDR_VAR 0 13
33495: PUSH
33496: LD_VAR 0 6
33500: PUSH
33501: LD_VAR 0 8
33505: ARRAY
33506: ST_TO_ADDR
// if x = - 1 then
33507: LD_VAR 0 13
33511: PUSH
33512: LD_INT 1
33514: NEG
33515: EQUAL
33516: IFFALSE 33520
// continue ;
33518: GO 33476
// PrepareHuman ( false , i , skill ) ;
33520: LD_INT 0
33522: PPUSH
33523: LD_VAR 0 8
33527: PPUSH
33528: LD_VAR 0 4
33532: PPUSH
33533: CALL_OW 380
// un := CreateHuman ;
33537: LD_ADDR_VAR 0 14
33541: PUSH
33542: CALL_OW 44
33546: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33547: LD_VAR 0 14
33551: PPUSH
33552: LD_VAR 0 1
33556: PPUSH
33557: CALL_OW 250
33561: PPUSH
33562: LD_VAR 0 1
33566: PPUSH
33567: CALL_OW 251
33571: PPUSH
33572: LD_INT 10
33574: PPUSH
33575: LD_INT 0
33577: PPUSH
33578: CALL_OW 50
// result := result ^ un ;
33582: LD_ADDR_VAR 0 7
33586: PUSH
33587: LD_VAR 0 7
33591: PUSH
33592: LD_VAR 0 14
33596: ADD
33597: ST_TO_ADDR
// end ;
33598: GO 33476
33600: POP
33601: POP
// end ; end ;
33602: LD_VAR 0 7
33606: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
33607: LD_INT 0
33609: PPUSH
33610: PPUSH
33611: PPUSH
33612: PPUSH
33613: PPUSH
33614: PPUSH
33615: PPUSH
33616: PPUSH
33617: PPUSH
33618: PPUSH
33619: PPUSH
33620: PPUSH
33621: PPUSH
33622: PPUSH
33623: PPUSH
33624: PPUSH
// result := false ;
33625: LD_ADDR_VAR 0 3
33629: PUSH
33630: LD_INT 0
33632: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
33633: LD_VAR 0 1
33637: NOT
33638: PUSH
33639: LD_VAR 0 1
33643: PPUSH
33644: CALL_OW 266
33648: PUSH
33649: LD_INT 32
33651: PUSH
33652: LD_INT 33
33654: PUSH
33655: EMPTY
33656: LIST
33657: LIST
33658: IN
33659: NOT
33660: OR
33661: IFFALSE 33665
// exit ;
33663: GO 34774
// nat := GetNation ( tower ) ;
33665: LD_ADDR_VAR 0 12
33669: PUSH
33670: LD_VAR 0 1
33674: PPUSH
33675: CALL_OW 248
33679: ST_TO_ADDR
// side := GetSide ( tower ) ;
33680: LD_ADDR_VAR 0 16
33684: PUSH
33685: LD_VAR 0 1
33689: PPUSH
33690: CALL_OW 255
33694: ST_TO_ADDR
// x := GetX ( tower ) ;
33695: LD_ADDR_VAR 0 10
33699: PUSH
33700: LD_VAR 0 1
33704: PPUSH
33705: CALL_OW 250
33709: ST_TO_ADDR
// y := GetY ( tower ) ;
33710: LD_ADDR_VAR 0 11
33714: PUSH
33715: LD_VAR 0 1
33719: PPUSH
33720: CALL_OW 251
33724: ST_TO_ADDR
// if not x or not y then
33725: LD_VAR 0 10
33729: NOT
33730: PUSH
33731: LD_VAR 0 11
33735: NOT
33736: OR
33737: IFFALSE 33741
// exit ;
33739: GO 34774
// weapon := 0 ;
33741: LD_ADDR_VAR 0 18
33745: PUSH
33746: LD_INT 0
33748: ST_TO_ADDR
// fac_list := [ ] ;
33749: LD_ADDR_VAR 0 17
33753: PUSH
33754: EMPTY
33755: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
33756: LD_ADDR_VAR 0 6
33760: PUSH
33761: LD_VAR 0 1
33765: PPUSH
33766: CALL_OW 274
33770: PPUSH
33771: LD_VAR 0 2
33775: PPUSH
33776: LD_INT 0
33778: PPUSH
33779: CALL 31345 0 3
33783: PPUSH
33784: LD_INT 30
33786: PUSH
33787: LD_INT 3
33789: PUSH
33790: EMPTY
33791: LIST
33792: LIST
33793: PPUSH
33794: CALL_OW 72
33798: ST_TO_ADDR
// if not factories then
33799: LD_VAR 0 6
33803: NOT
33804: IFFALSE 33808
// exit ;
33806: GO 34774
// for i in factories do
33808: LD_ADDR_VAR 0 8
33812: PUSH
33813: LD_VAR 0 6
33817: PUSH
33818: FOR_IN
33819: IFFALSE 33844
// fac_list := fac_list union AvailableWeaponList ( i ) ;
33821: LD_ADDR_VAR 0 17
33825: PUSH
33826: LD_VAR 0 17
33830: PUSH
33831: LD_VAR 0 8
33835: PPUSH
33836: CALL_OW 478
33840: UNION
33841: ST_TO_ADDR
33842: GO 33818
33844: POP
33845: POP
// if not fac_list then
33846: LD_VAR 0 17
33850: NOT
33851: IFFALSE 33855
// exit ;
33853: GO 34774
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
33855: LD_ADDR_VAR 0 5
33859: PUSH
33860: LD_INT 4
33862: PUSH
33863: LD_INT 5
33865: PUSH
33866: LD_INT 9
33868: PUSH
33869: LD_INT 10
33871: PUSH
33872: LD_INT 6
33874: PUSH
33875: LD_INT 7
33877: PUSH
33878: LD_INT 11
33880: PUSH
33881: EMPTY
33882: LIST
33883: LIST
33884: LIST
33885: LIST
33886: LIST
33887: LIST
33888: LIST
33889: PUSH
33890: LD_INT 27
33892: PUSH
33893: LD_INT 28
33895: PUSH
33896: LD_INT 26
33898: PUSH
33899: LD_INT 30
33901: PUSH
33902: EMPTY
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: PUSH
33908: LD_INT 43
33910: PUSH
33911: LD_INT 44
33913: PUSH
33914: LD_INT 46
33916: PUSH
33917: LD_INT 45
33919: PUSH
33920: LD_INT 47
33922: PUSH
33923: LD_INT 49
33925: PUSH
33926: EMPTY
33927: LIST
33928: LIST
33929: LIST
33930: LIST
33931: LIST
33932: LIST
33933: PUSH
33934: EMPTY
33935: LIST
33936: LIST
33937: LIST
33938: PUSH
33939: LD_VAR 0 12
33943: ARRAY
33944: ST_TO_ADDR
// list := list isect fac_list ;
33945: LD_ADDR_VAR 0 5
33949: PUSH
33950: LD_VAR 0 5
33954: PUSH
33955: LD_VAR 0 17
33959: ISECT
33960: ST_TO_ADDR
// if not list then
33961: LD_VAR 0 5
33965: NOT
33966: IFFALSE 33970
// exit ;
33968: GO 34774
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
33970: LD_VAR 0 12
33974: PUSH
33975: LD_INT 3
33977: EQUAL
33978: PUSH
33979: LD_INT 49
33981: PUSH
33982: LD_VAR 0 5
33986: IN
33987: AND
33988: PUSH
33989: LD_INT 31
33991: PPUSH
33992: LD_VAR 0 16
33996: PPUSH
33997: CALL_OW 321
34001: PUSH
34002: LD_INT 2
34004: EQUAL
34005: AND
34006: IFFALSE 34066
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
34008: LD_INT 22
34010: PUSH
34011: LD_VAR 0 16
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: PUSH
34020: LD_INT 35
34022: PUSH
34023: LD_INT 49
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PUSH
34030: LD_INT 91
34032: PUSH
34033: LD_VAR 0 1
34037: PUSH
34038: LD_INT 10
34040: PUSH
34041: EMPTY
34042: LIST
34043: LIST
34044: LIST
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: LIST
34050: PPUSH
34051: CALL_OW 69
34055: NOT
34056: IFFALSE 34066
// weapon := ru_time_lapser ;
34058: LD_ADDR_VAR 0 18
34062: PUSH
34063: LD_INT 49
34065: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
34066: LD_VAR 0 12
34070: PUSH
34071: LD_INT 1
34073: PUSH
34074: LD_INT 2
34076: PUSH
34077: EMPTY
34078: LIST
34079: LIST
34080: IN
34081: PUSH
34082: LD_INT 11
34084: PUSH
34085: LD_VAR 0 5
34089: IN
34090: PUSH
34091: LD_INT 30
34093: PUSH
34094: LD_VAR 0 5
34098: IN
34099: OR
34100: AND
34101: PUSH
34102: LD_INT 6
34104: PPUSH
34105: LD_VAR 0 16
34109: PPUSH
34110: CALL_OW 321
34114: PUSH
34115: LD_INT 2
34117: EQUAL
34118: AND
34119: IFFALSE 34284
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
34121: LD_INT 22
34123: PUSH
34124: LD_VAR 0 16
34128: PUSH
34129: EMPTY
34130: LIST
34131: LIST
34132: PUSH
34133: LD_INT 2
34135: PUSH
34136: LD_INT 35
34138: PUSH
34139: LD_INT 11
34141: PUSH
34142: EMPTY
34143: LIST
34144: LIST
34145: PUSH
34146: LD_INT 35
34148: PUSH
34149: LD_INT 30
34151: PUSH
34152: EMPTY
34153: LIST
34154: LIST
34155: PUSH
34156: EMPTY
34157: LIST
34158: LIST
34159: LIST
34160: PUSH
34161: LD_INT 91
34163: PUSH
34164: LD_VAR 0 1
34168: PUSH
34169: LD_INT 18
34171: PUSH
34172: EMPTY
34173: LIST
34174: LIST
34175: LIST
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: LIST
34181: PPUSH
34182: CALL_OW 69
34186: NOT
34187: PUSH
34188: LD_INT 22
34190: PUSH
34191: LD_VAR 0 16
34195: PUSH
34196: EMPTY
34197: LIST
34198: LIST
34199: PUSH
34200: LD_INT 2
34202: PUSH
34203: LD_INT 30
34205: PUSH
34206: LD_INT 32
34208: PUSH
34209: EMPTY
34210: LIST
34211: LIST
34212: PUSH
34213: LD_INT 30
34215: PUSH
34216: LD_INT 33
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: EMPTY
34224: LIST
34225: LIST
34226: LIST
34227: PUSH
34228: LD_INT 91
34230: PUSH
34231: LD_VAR 0 1
34235: PUSH
34236: LD_INT 12
34238: PUSH
34239: EMPTY
34240: LIST
34241: LIST
34242: LIST
34243: PUSH
34244: EMPTY
34245: LIST
34246: LIST
34247: LIST
34248: PUSH
34249: EMPTY
34250: LIST
34251: PPUSH
34252: CALL_OW 69
34256: PUSH
34257: LD_INT 2
34259: GREATER
34260: AND
34261: IFFALSE 34284
// weapon := [ us_radar , ar_radar ] [ nat ] ;
34263: LD_ADDR_VAR 0 18
34267: PUSH
34268: LD_INT 11
34270: PUSH
34271: LD_INT 30
34273: PUSH
34274: EMPTY
34275: LIST
34276: LIST
34277: PUSH
34278: LD_VAR 0 12
34282: ARRAY
34283: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
34284: LD_VAR 0 18
34288: NOT
34289: PUSH
34290: LD_INT 40
34292: PPUSH
34293: LD_VAR 0 16
34297: PPUSH
34298: CALL_OW 321
34302: PUSH
34303: LD_INT 2
34305: EQUAL
34306: AND
34307: PUSH
34308: LD_INT 7
34310: PUSH
34311: LD_VAR 0 5
34315: IN
34316: PUSH
34317: LD_INT 28
34319: PUSH
34320: LD_VAR 0 5
34324: IN
34325: OR
34326: PUSH
34327: LD_INT 45
34329: PUSH
34330: LD_VAR 0 5
34334: IN
34335: OR
34336: AND
34337: IFFALSE 34591
// begin hex := GetHexInfo ( x , y ) ;
34339: LD_ADDR_VAR 0 4
34343: PUSH
34344: LD_VAR 0 10
34348: PPUSH
34349: LD_VAR 0 11
34353: PPUSH
34354: CALL_OW 546
34358: ST_TO_ADDR
// if hex [ 1 ] then
34359: LD_VAR 0 4
34363: PUSH
34364: LD_INT 1
34366: ARRAY
34367: IFFALSE 34371
// exit ;
34369: GO 34774
// height := hex [ 2 ] ;
34371: LD_ADDR_VAR 0 15
34375: PUSH
34376: LD_VAR 0 4
34380: PUSH
34381: LD_INT 2
34383: ARRAY
34384: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
34385: LD_ADDR_VAR 0 14
34389: PUSH
34390: LD_INT 0
34392: PUSH
34393: LD_INT 2
34395: PUSH
34396: LD_INT 3
34398: PUSH
34399: LD_INT 5
34401: PUSH
34402: EMPTY
34403: LIST
34404: LIST
34405: LIST
34406: LIST
34407: ST_TO_ADDR
// for i in tmp do
34408: LD_ADDR_VAR 0 8
34412: PUSH
34413: LD_VAR 0 14
34417: PUSH
34418: FOR_IN
34419: IFFALSE 34589
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
34421: LD_ADDR_VAR 0 9
34425: PUSH
34426: LD_VAR 0 10
34430: PPUSH
34431: LD_VAR 0 8
34435: PPUSH
34436: LD_INT 5
34438: PPUSH
34439: CALL_OW 272
34443: PUSH
34444: LD_VAR 0 11
34448: PPUSH
34449: LD_VAR 0 8
34453: PPUSH
34454: LD_INT 5
34456: PPUSH
34457: CALL_OW 273
34461: PUSH
34462: EMPTY
34463: LIST
34464: LIST
34465: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
34466: LD_VAR 0 9
34470: PUSH
34471: LD_INT 1
34473: ARRAY
34474: PPUSH
34475: LD_VAR 0 9
34479: PUSH
34480: LD_INT 2
34482: ARRAY
34483: PPUSH
34484: CALL_OW 488
34488: IFFALSE 34587
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
34490: LD_ADDR_VAR 0 4
34494: PUSH
34495: LD_VAR 0 9
34499: PUSH
34500: LD_INT 1
34502: ARRAY
34503: PPUSH
34504: LD_VAR 0 9
34508: PUSH
34509: LD_INT 2
34511: ARRAY
34512: PPUSH
34513: CALL_OW 546
34517: ST_TO_ADDR
// if hex [ 1 ] then
34518: LD_VAR 0 4
34522: PUSH
34523: LD_INT 1
34525: ARRAY
34526: IFFALSE 34530
// continue ;
34528: GO 34418
// h := hex [ 2 ] ;
34530: LD_ADDR_VAR 0 13
34534: PUSH
34535: LD_VAR 0 4
34539: PUSH
34540: LD_INT 2
34542: ARRAY
34543: ST_TO_ADDR
// if h + 7 < height then
34544: LD_VAR 0 13
34548: PUSH
34549: LD_INT 7
34551: PLUS
34552: PUSH
34553: LD_VAR 0 15
34557: LESS
34558: IFFALSE 34587
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
34560: LD_ADDR_VAR 0 18
34564: PUSH
34565: LD_INT 7
34567: PUSH
34568: LD_INT 28
34570: PUSH
34571: LD_INT 45
34573: PUSH
34574: EMPTY
34575: LIST
34576: LIST
34577: LIST
34578: PUSH
34579: LD_VAR 0 12
34583: ARRAY
34584: ST_TO_ADDR
// break ;
34585: GO 34589
// end ; end ; end ;
34587: GO 34418
34589: POP
34590: POP
// end ; if not weapon then
34591: LD_VAR 0 18
34595: NOT
34596: IFFALSE 34656
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
34598: LD_ADDR_VAR 0 5
34602: PUSH
34603: LD_VAR 0 5
34607: PUSH
34608: LD_INT 11
34610: PUSH
34611: LD_INT 30
34613: PUSH
34614: LD_INT 49
34616: PUSH
34617: EMPTY
34618: LIST
34619: LIST
34620: LIST
34621: DIFF
34622: ST_TO_ADDR
// if not list then
34623: LD_VAR 0 5
34627: NOT
34628: IFFALSE 34632
// exit ;
34630: GO 34774
// weapon := list [ rand ( 1 , list ) ] ;
34632: LD_ADDR_VAR 0 18
34636: PUSH
34637: LD_VAR 0 5
34641: PUSH
34642: LD_INT 1
34644: PPUSH
34645: LD_VAR 0 5
34649: PPUSH
34650: CALL_OW 12
34654: ARRAY
34655: ST_TO_ADDR
// end ; if weapon then
34656: LD_VAR 0 18
34660: IFFALSE 34774
// begin tmp := CostOfWeapon ( weapon ) ;
34662: LD_ADDR_VAR 0 14
34666: PUSH
34667: LD_VAR 0 18
34671: PPUSH
34672: CALL_OW 451
34676: ST_TO_ADDR
// j := GetBase ( tower ) ;
34677: LD_ADDR_VAR 0 9
34681: PUSH
34682: LD_VAR 0 1
34686: PPUSH
34687: CALL_OW 274
34691: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
34692: LD_VAR 0 9
34696: PPUSH
34697: LD_INT 1
34699: PPUSH
34700: CALL_OW 275
34704: PUSH
34705: LD_VAR 0 14
34709: PUSH
34710: LD_INT 1
34712: ARRAY
34713: GREATEREQUAL
34714: PUSH
34715: LD_VAR 0 9
34719: PPUSH
34720: LD_INT 2
34722: PPUSH
34723: CALL_OW 275
34727: PUSH
34728: LD_VAR 0 14
34732: PUSH
34733: LD_INT 2
34735: ARRAY
34736: GREATEREQUAL
34737: AND
34738: PUSH
34739: LD_VAR 0 9
34743: PPUSH
34744: LD_INT 3
34746: PPUSH
34747: CALL_OW 275
34751: PUSH
34752: LD_VAR 0 14
34756: PUSH
34757: LD_INT 3
34759: ARRAY
34760: GREATEREQUAL
34761: AND
34762: IFFALSE 34774
// result := weapon ;
34764: LD_ADDR_VAR 0 3
34768: PUSH
34769: LD_VAR 0 18
34773: ST_TO_ADDR
// end ; end ;
34774: LD_VAR 0 3
34778: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
34779: LD_INT 0
34781: PPUSH
34782: PPUSH
// result := true ;
34783: LD_ADDR_VAR 0 3
34787: PUSH
34788: LD_INT 1
34790: ST_TO_ADDR
// if array1 = array2 then
34791: LD_VAR 0 1
34795: PUSH
34796: LD_VAR 0 2
34800: EQUAL
34801: IFFALSE 34861
// begin for i = 1 to array1 do
34803: LD_ADDR_VAR 0 4
34807: PUSH
34808: DOUBLE
34809: LD_INT 1
34811: DEC
34812: ST_TO_ADDR
34813: LD_VAR 0 1
34817: PUSH
34818: FOR_TO
34819: IFFALSE 34857
// if array1 [ i ] <> array2 [ i ] then
34821: LD_VAR 0 1
34825: PUSH
34826: LD_VAR 0 4
34830: ARRAY
34831: PUSH
34832: LD_VAR 0 2
34836: PUSH
34837: LD_VAR 0 4
34841: ARRAY
34842: NONEQUAL
34843: IFFALSE 34855
// begin result := false ;
34845: LD_ADDR_VAR 0 3
34849: PUSH
34850: LD_INT 0
34852: ST_TO_ADDR
// break ;
34853: GO 34857
// end ;
34855: GO 34818
34857: POP
34858: POP
// end else
34859: GO 34869
// result := false ;
34861: LD_ADDR_VAR 0 3
34865: PUSH
34866: LD_INT 0
34868: ST_TO_ADDR
// end ;
34869: LD_VAR 0 3
34873: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
34874: LD_INT 0
34876: PPUSH
34877: PPUSH
// if not array1 or not array2 then
34878: LD_VAR 0 1
34882: NOT
34883: PUSH
34884: LD_VAR 0 2
34888: NOT
34889: OR
34890: IFFALSE 34894
// exit ;
34892: GO 34958
// result := true ;
34894: LD_ADDR_VAR 0 3
34898: PUSH
34899: LD_INT 1
34901: ST_TO_ADDR
// for i = 1 to array1 do
34902: LD_ADDR_VAR 0 4
34906: PUSH
34907: DOUBLE
34908: LD_INT 1
34910: DEC
34911: ST_TO_ADDR
34912: LD_VAR 0 1
34916: PUSH
34917: FOR_TO
34918: IFFALSE 34956
// if array1 [ i ] <> array2 [ i ] then
34920: LD_VAR 0 1
34924: PUSH
34925: LD_VAR 0 4
34929: ARRAY
34930: PUSH
34931: LD_VAR 0 2
34935: PUSH
34936: LD_VAR 0 4
34940: ARRAY
34941: NONEQUAL
34942: IFFALSE 34954
// begin result := false ;
34944: LD_ADDR_VAR 0 3
34948: PUSH
34949: LD_INT 0
34951: ST_TO_ADDR
// break ;
34952: GO 34956
// end ;
34954: GO 34917
34956: POP
34957: POP
// end ;
34958: LD_VAR 0 3
34962: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
34963: LD_INT 0
34965: PPUSH
34966: PPUSH
34967: PPUSH
// pom := GetBase ( fac ) ;
34968: LD_ADDR_VAR 0 5
34972: PUSH
34973: LD_VAR 0 1
34977: PPUSH
34978: CALL_OW 274
34982: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
34983: LD_ADDR_VAR 0 4
34987: PUSH
34988: LD_VAR 0 2
34992: PUSH
34993: LD_INT 1
34995: ARRAY
34996: PPUSH
34997: LD_VAR 0 2
35001: PUSH
35002: LD_INT 2
35004: ARRAY
35005: PPUSH
35006: LD_VAR 0 2
35010: PUSH
35011: LD_INT 3
35013: ARRAY
35014: PPUSH
35015: LD_VAR 0 2
35019: PUSH
35020: LD_INT 4
35022: ARRAY
35023: PPUSH
35024: CALL_OW 449
35028: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35029: LD_ADDR_VAR 0 3
35033: PUSH
35034: LD_VAR 0 5
35038: PPUSH
35039: LD_INT 1
35041: PPUSH
35042: CALL_OW 275
35046: PUSH
35047: LD_VAR 0 4
35051: PUSH
35052: LD_INT 1
35054: ARRAY
35055: GREATEREQUAL
35056: PUSH
35057: LD_VAR 0 5
35061: PPUSH
35062: LD_INT 2
35064: PPUSH
35065: CALL_OW 275
35069: PUSH
35070: LD_VAR 0 4
35074: PUSH
35075: LD_INT 2
35077: ARRAY
35078: GREATEREQUAL
35079: AND
35080: PUSH
35081: LD_VAR 0 5
35085: PPUSH
35086: LD_INT 3
35088: PPUSH
35089: CALL_OW 275
35093: PUSH
35094: LD_VAR 0 4
35098: PUSH
35099: LD_INT 3
35101: ARRAY
35102: GREATEREQUAL
35103: AND
35104: ST_TO_ADDR
// end ;
35105: LD_VAR 0 3
35109: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
35110: LD_INT 0
35112: PPUSH
35113: PPUSH
35114: PPUSH
35115: PPUSH
// pom := GetBase ( building ) ;
35116: LD_ADDR_VAR 0 3
35120: PUSH
35121: LD_VAR 0 1
35125: PPUSH
35126: CALL_OW 274
35130: ST_TO_ADDR
// if not pom then
35131: LD_VAR 0 3
35135: NOT
35136: IFFALSE 35140
// exit ;
35138: GO 35310
// btype := GetBType ( building ) ;
35140: LD_ADDR_VAR 0 5
35144: PUSH
35145: LD_VAR 0 1
35149: PPUSH
35150: CALL_OW 266
35154: ST_TO_ADDR
// if btype = b_armoury then
35155: LD_VAR 0 5
35159: PUSH
35160: LD_INT 4
35162: EQUAL
35163: IFFALSE 35173
// btype := b_barracks ;
35165: LD_ADDR_VAR 0 5
35169: PUSH
35170: LD_INT 5
35172: ST_TO_ADDR
// if btype = b_depot then
35173: LD_VAR 0 5
35177: PUSH
35178: LD_INT 0
35180: EQUAL
35181: IFFALSE 35191
// btype := b_warehouse ;
35183: LD_ADDR_VAR 0 5
35187: PUSH
35188: LD_INT 1
35190: ST_TO_ADDR
// if btype = b_workshop then
35191: LD_VAR 0 5
35195: PUSH
35196: LD_INT 2
35198: EQUAL
35199: IFFALSE 35209
// btype := b_factory ;
35201: LD_ADDR_VAR 0 5
35205: PUSH
35206: LD_INT 3
35208: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35209: LD_ADDR_VAR 0 4
35213: PUSH
35214: LD_VAR 0 5
35218: PPUSH
35219: LD_VAR 0 1
35223: PPUSH
35224: CALL_OW 248
35228: PPUSH
35229: CALL_OW 450
35233: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35234: LD_ADDR_VAR 0 2
35238: PUSH
35239: LD_VAR 0 3
35243: PPUSH
35244: LD_INT 1
35246: PPUSH
35247: CALL_OW 275
35251: PUSH
35252: LD_VAR 0 4
35256: PUSH
35257: LD_INT 1
35259: ARRAY
35260: GREATEREQUAL
35261: PUSH
35262: LD_VAR 0 3
35266: PPUSH
35267: LD_INT 2
35269: PPUSH
35270: CALL_OW 275
35274: PUSH
35275: LD_VAR 0 4
35279: PUSH
35280: LD_INT 2
35282: ARRAY
35283: GREATEREQUAL
35284: AND
35285: PUSH
35286: LD_VAR 0 3
35290: PPUSH
35291: LD_INT 3
35293: PPUSH
35294: CALL_OW 275
35298: PUSH
35299: LD_VAR 0 4
35303: PUSH
35304: LD_INT 3
35306: ARRAY
35307: GREATEREQUAL
35308: AND
35309: ST_TO_ADDR
// end ;
35310: LD_VAR 0 2
35314: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
35315: LD_INT 0
35317: PPUSH
35318: PPUSH
35319: PPUSH
// pom := GetBase ( building ) ;
35320: LD_ADDR_VAR 0 4
35324: PUSH
35325: LD_VAR 0 1
35329: PPUSH
35330: CALL_OW 274
35334: ST_TO_ADDR
// if not pom then
35335: LD_VAR 0 4
35339: NOT
35340: IFFALSE 35344
// exit ;
35342: GO 35445
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35344: LD_ADDR_VAR 0 5
35348: PUSH
35349: LD_VAR 0 2
35353: PPUSH
35354: LD_VAR 0 1
35358: PPUSH
35359: CALL_OW 248
35363: PPUSH
35364: CALL_OW 450
35368: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35369: LD_ADDR_VAR 0 3
35373: PUSH
35374: LD_VAR 0 4
35378: PPUSH
35379: LD_INT 1
35381: PPUSH
35382: CALL_OW 275
35386: PUSH
35387: LD_VAR 0 5
35391: PUSH
35392: LD_INT 1
35394: ARRAY
35395: GREATEREQUAL
35396: PUSH
35397: LD_VAR 0 4
35401: PPUSH
35402: LD_INT 2
35404: PPUSH
35405: CALL_OW 275
35409: PUSH
35410: LD_VAR 0 5
35414: PUSH
35415: LD_INT 2
35417: ARRAY
35418: GREATEREQUAL
35419: AND
35420: PUSH
35421: LD_VAR 0 4
35425: PPUSH
35426: LD_INT 3
35428: PPUSH
35429: CALL_OW 275
35433: PUSH
35434: LD_VAR 0 5
35438: PUSH
35439: LD_INT 3
35441: ARRAY
35442: GREATEREQUAL
35443: AND
35444: ST_TO_ADDR
// end ;
35445: LD_VAR 0 3
35449: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
35450: LD_INT 0
35452: PPUSH
35453: PPUSH
35454: PPUSH
35455: PPUSH
35456: PPUSH
35457: PPUSH
35458: PPUSH
35459: PPUSH
35460: PPUSH
35461: PPUSH
35462: PPUSH
// result := false ;
35463: LD_ADDR_VAR 0 8
35467: PUSH
35468: LD_INT 0
35470: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
35471: LD_VAR 0 5
35475: NOT
35476: PUSH
35477: LD_VAR 0 1
35481: NOT
35482: OR
35483: PUSH
35484: LD_VAR 0 2
35488: NOT
35489: OR
35490: PUSH
35491: LD_VAR 0 3
35495: NOT
35496: OR
35497: IFFALSE 35501
// exit ;
35499: GO 36315
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
35501: LD_ADDR_VAR 0 14
35505: PUSH
35506: LD_VAR 0 1
35510: PPUSH
35511: LD_VAR 0 2
35515: PPUSH
35516: LD_VAR 0 3
35520: PPUSH
35521: LD_VAR 0 4
35525: PPUSH
35526: LD_VAR 0 5
35530: PUSH
35531: LD_INT 1
35533: ARRAY
35534: PPUSH
35535: CALL_OW 248
35539: PPUSH
35540: LD_INT 0
35542: PPUSH
35543: CALL 37548 0 6
35547: ST_TO_ADDR
// if not hexes then
35548: LD_VAR 0 14
35552: NOT
35553: IFFALSE 35557
// exit ;
35555: GO 36315
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35557: LD_ADDR_VAR 0 17
35561: PUSH
35562: LD_VAR 0 5
35566: PPUSH
35567: LD_INT 22
35569: PUSH
35570: LD_VAR 0 13
35574: PPUSH
35575: CALL_OW 255
35579: PUSH
35580: EMPTY
35581: LIST
35582: LIST
35583: PUSH
35584: LD_INT 2
35586: PUSH
35587: LD_INT 30
35589: PUSH
35590: LD_INT 0
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: PUSH
35597: LD_INT 30
35599: PUSH
35600: LD_INT 1
35602: PUSH
35603: EMPTY
35604: LIST
35605: LIST
35606: PUSH
35607: EMPTY
35608: LIST
35609: LIST
35610: LIST
35611: PUSH
35612: EMPTY
35613: LIST
35614: LIST
35615: PPUSH
35616: CALL_OW 72
35620: ST_TO_ADDR
// for i = 1 to hexes do
35621: LD_ADDR_VAR 0 9
35625: PUSH
35626: DOUBLE
35627: LD_INT 1
35629: DEC
35630: ST_TO_ADDR
35631: LD_VAR 0 14
35635: PUSH
35636: FOR_TO
35637: IFFALSE 36313
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35639: LD_ADDR_VAR 0 13
35643: PUSH
35644: LD_VAR 0 14
35648: PUSH
35649: LD_VAR 0 9
35653: ARRAY
35654: PUSH
35655: LD_INT 1
35657: ARRAY
35658: PPUSH
35659: LD_VAR 0 14
35663: PUSH
35664: LD_VAR 0 9
35668: ARRAY
35669: PUSH
35670: LD_INT 2
35672: ARRAY
35673: PPUSH
35674: CALL_OW 428
35678: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
35679: LD_VAR 0 14
35683: PUSH
35684: LD_VAR 0 9
35688: ARRAY
35689: PUSH
35690: LD_INT 1
35692: ARRAY
35693: PPUSH
35694: LD_VAR 0 14
35698: PUSH
35699: LD_VAR 0 9
35703: ARRAY
35704: PUSH
35705: LD_INT 2
35707: ARRAY
35708: PPUSH
35709: CALL_OW 351
35713: PUSH
35714: LD_VAR 0 14
35718: PUSH
35719: LD_VAR 0 9
35723: ARRAY
35724: PUSH
35725: LD_INT 1
35727: ARRAY
35728: PPUSH
35729: LD_VAR 0 14
35733: PUSH
35734: LD_VAR 0 9
35738: ARRAY
35739: PUSH
35740: LD_INT 2
35742: ARRAY
35743: PPUSH
35744: CALL_OW 488
35748: NOT
35749: OR
35750: PUSH
35751: LD_VAR 0 13
35755: PPUSH
35756: CALL_OW 247
35760: PUSH
35761: LD_INT 3
35763: EQUAL
35764: OR
35765: IFFALSE 35771
// exit ;
35767: POP
35768: POP
35769: GO 36315
// if not tmp then
35771: LD_VAR 0 13
35775: NOT
35776: IFFALSE 35780
// continue ;
35778: GO 35636
// result := true ;
35780: LD_ADDR_VAR 0 8
35784: PUSH
35785: LD_INT 1
35787: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
35788: LD_VAR 0 6
35792: PUSH
35793: LD_VAR 0 13
35797: PPUSH
35798: CALL_OW 247
35802: PUSH
35803: LD_INT 2
35805: EQUAL
35806: AND
35807: PUSH
35808: LD_VAR 0 13
35812: PPUSH
35813: CALL_OW 263
35817: PUSH
35818: LD_INT 1
35820: EQUAL
35821: AND
35822: IFFALSE 35986
// begin if IsDrivenBy ( tmp ) then
35824: LD_VAR 0 13
35828: PPUSH
35829: CALL_OW 311
35833: IFFALSE 35837
// continue ;
35835: GO 35636
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
35837: LD_VAR 0 6
35841: PPUSH
35842: LD_INT 3
35844: PUSH
35845: LD_INT 60
35847: PUSH
35848: EMPTY
35849: LIST
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: PUSH
35855: LD_INT 3
35857: PUSH
35858: LD_INT 55
35860: PUSH
35861: EMPTY
35862: LIST
35863: PUSH
35864: EMPTY
35865: LIST
35866: LIST
35867: PUSH
35868: EMPTY
35869: LIST
35870: LIST
35871: PPUSH
35872: CALL_OW 72
35876: IFFALSE 35984
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
35878: LD_ADDR_VAR 0 18
35882: PUSH
35883: LD_VAR 0 6
35887: PPUSH
35888: LD_INT 3
35890: PUSH
35891: LD_INT 60
35893: PUSH
35894: EMPTY
35895: LIST
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: PUSH
35901: LD_INT 3
35903: PUSH
35904: LD_INT 55
35906: PUSH
35907: EMPTY
35908: LIST
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: PUSH
35914: EMPTY
35915: LIST
35916: LIST
35917: PPUSH
35918: CALL_OW 72
35922: PUSH
35923: LD_INT 1
35925: ARRAY
35926: ST_TO_ADDR
// if IsInUnit ( driver ) then
35927: LD_VAR 0 18
35931: PPUSH
35932: CALL_OW 310
35936: IFFALSE 35947
// ComExit ( driver ) ;
35938: LD_VAR 0 18
35942: PPUSH
35943: CALL 61328 0 1
// AddComEnterUnit ( driver , tmp ) ;
35947: LD_VAR 0 18
35951: PPUSH
35952: LD_VAR 0 13
35956: PPUSH
35957: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
35961: LD_VAR 0 18
35965: PPUSH
35966: LD_VAR 0 7
35970: PPUSH
35971: CALL_OW 173
// AddComExitVehicle ( driver ) ;
35975: LD_VAR 0 18
35979: PPUSH
35980: CALL_OW 181
// end ; continue ;
35984: GO 35636
// end ; if not cleaners or not tmp in cleaners then
35986: LD_VAR 0 6
35990: NOT
35991: PUSH
35992: LD_VAR 0 13
35996: PUSH
35997: LD_VAR 0 6
36001: IN
36002: NOT
36003: OR
36004: IFFALSE 36311
// begin if dep then
36006: LD_VAR 0 17
36010: IFFALSE 36146
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
36012: LD_ADDR_VAR 0 16
36016: PUSH
36017: LD_VAR 0 17
36021: PUSH
36022: LD_INT 1
36024: ARRAY
36025: PPUSH
36026: CALL_OW 250
36030: PPUSH
36031: LD_VAR 0 17
36035: PUSH
36036: LD_INT 1
36038: ARRAY
36039: PPUSH
36040: CALL_OW 254
36044: PPUSH
36045: LD_INT 5
36047: PPUSH
36048: CALL_OW 272
36052: PUSH
36053: LD_VAR 0 17
36057: PUSH
36058: LD_INT 1
36060: ARRAY
36061: PPUSH
36062: CALL_OW 251
36066: PPUSH
36067: LD_VAR 0 17
36071: PUSH
36072: LD_INT 1
36074: ARRAY
36075: PPUSH
36076: CALL_OW 254
36080: PPUSH
36081: LD_INT 5
36083: PPUSH
36084: CALL_OW 273
36088: PUSH
36089: EMPTY
36090: LIST
36091: LIST
36092: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
36093: LD_VAR 0 16
36097: PUSH
36098: LD_INT 1
36100: ARRAY
36101: PPUSH
36102: LD_VAR 0 16
36106: PUSH
36107: LD_INT 2
36109: ARRAY
36110: PPUSH
36111: CALL_OW 488
36115: IFFALSE 36146
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
36117: LD_VAR 0 13
36121: PPUSH
36122: LD_VAR 0 16
36126: PUSH
36127: LD_INT 1
36129: ARRAY
36130: PPUSH
36131: LD_VAR 0 16
36135: PUSH
36136: LD_INT 2
36138: ARRAY
36139: PPUSH
36140: CALL_OW 111
// continue ;
36144: GO 35636
// end ; end ; r := GetDir ( tmp ) ;
36146: LD_ADDR_VAR 0 15
36150: PUSH
36151: LD_VAR 0 13
36155: PPUSH
36156: CALL_OW 254
36160: ST_TO_ADDR
// if r = 5 then
36161: LD_VAR 0 15
36165: PUSH
36166: LD_INT 5
36168: EQUAL
36169: IFFALSE 36179
// r := 0 ;
36171: LD_ADDR_VAR 0 15
36175: PUSH
36176: LD_INT 0
36178: ST_TO_ADDR
// for j = r to 5 do
36179: LD_ADDR_VAR 0 10
36183: PUSH
36184: DOUBLE
36185: LD_VAR 0 15
36189: DEC
36190: ST_TO_ADDR
36191: LD_INT 5
36193: PUSH
36194: FOR_TO
36195: IFFALSE 36309
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
36197: LD_ADDR_VAR 0 11
36201: PUSH
36202: LD_VAR 0 13
36206: PPUSH
36207: CALL_OW 250
36211: PPUSH
36212: LD_VAR 0 10
36216: PPUSH
36217: LD_INT 2
36219: PPUSH
36220: CALL_OW 272
36224: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
36225: LD_ADDR_VAR 0 12
36229: PUSH
36230: LD_VAR 0 13
36234: PPUSH
36235: CALL_OW 251
36239: PPUSH
36240: LD_VAR 0 10
36244: PPUSH
36245: LD_INT 2
36247: PPUSH
36248: CALL_OW 273
36252: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
36253: LD_VAR 0 11
36257: PPUSH
36258: LD_VAR 0 12
36262: PPUSH
36263: CALL_OW 488
36267: PUSH
36268: LD_VAR 0 11
36272: PPUSH
36273: LD_VAR 0 12
36277: PPUSH
36278: CALL_OW 428
36282: NOT
36283: AND
36284: IFFALSE 36307
// begin ComMoveXY ( tmp , _x , _y ) ;
36286: LD_VAR 0 13
36290: PPUSH
36291: LD_VAR 0 11
36295: PPUSH
36296: LD_VAR 0 12
36300: PPUSH
36301: CALL_OW 111
// break ;
36305: GO 36309
// end ; end ;
36307: GO 36194
36309: POP
36310: POP
// end ; end ;
36311: GO 35636
36313: POP
36314: POP
// end ;
36315: LD_VAR 0 8
36319: RET
// export function BuildingTechInvented ( side , btype ) ; begin
36320: LD_INT 0
36322: PPUSH
// result := true ;
36323: LD_ADDR_VAR 0 3
36327: PUSH
36328: LD_INT 1
36330: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
36331: LD_VAR 0 2
36335: PUSH
36336: LD_INT 24
36338: DOUBLE
36339: EQUAL
36340: IFTRUE 36350
36342: LD_INT 33
36344: DOUBLE
36345: EQUAL
36346: IFTRUE 36350
36348: GO 36375
36350: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
36351: LD_ADDR_VAR 0 3
36355: PUSH
36356: LD_INT 32
36358: PPUSH
36359: LD_VAR 0 1
36363: PPUSH
36364: CALL_OW 321
36368: PUSH
36369: LD_INT 2
36371: EQUAL
36372: ST_TO_ADDR
36373: GO 36691
36375: LD_INT 20
36377: DOUBLE
36378: EQUAL
36379: IFTRUE 36383
36381: GO 36408
36383: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
36384: LD_ADDR_VAR 0 3
36388: PUSH
36389: LD_INT 6
36391: PPUSH
36392: LD_VAR 0 1
36396: PPUSH
36397: CALL_OW 321
36401: PUSH
36402: LD_INT 2
36404: EQUAL
36405: ST_TO_ADDR
36406: GO 36691
36408: LD_INT 22
36410: DOUBLE
36411: EQUAL
36412: IFTRUE 36422
36414: LD_INT 36
36416: DOUBLE
36417: EQUAL
36418: IFTRUE 36422
36420: GO 36447
36422: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
36423: LD_ADDR_VAR 0 3
36427: PUSH
36428: LD_INT 15
36430: PPUSH
36431: LD_VAR 0 1
36435: PPUSH
36436: CALL_OW 321
36440: PUSH
36441: LD_INT 2
36443: EQUAL
36444: ST_TO_ADDR
36445: GO 36691
36447: LD_INT 30
36449: DOUBLE
36450: EQUAL
36451: IFTRUE 36455
36453: GO 36480
36455: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
36456: LD_ADDR_VAR 0 3
36460: PUSH
36461: LD_INT 20
36463: PPUSH
36464: LD_VAR 0 1
36468: PPUSH
36469: CALL_OW 321
36473: PUSH
36474: LD_INT 2
36476: EQUAL
36477: ST_TO_ADDR
36478: GO 36691
36480: LD_INT 28
36482: DOUBLE
36483: EQUAL
36484: IFTRUE 36494
36486: LD_INT 21
36488: DOUBLE
36489: EQUAL
36490: IFTRUE 36494
36492: GO 36519
36494: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
36495: LD_ADDR_VAR 0 3
36499: PUSH
36500: LD_INT 21
36502: PPUSH
36503: LD_VAR 0 1
36507: PPUSH
36508: CALL_OW 321
36512: PUSH
36513: LD_INT 2
36515: EQUAL
36516: ST_TO_ADDR
36517: GO 36691
36519: LD_INT 16
36521: DOUBLE
36522: EQUAL
36523: IFTRUE 36527
36525: GO 36552
36527: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
36528: LD_ADDR_VAR 0 3
36532: PUSH
36533: LD_INT 84
36535: PPUSH
36536: LD_VAR 0 1
36540: PPUSH
36541: CALL_OW 321
36545: PUSH
36546: LD_INT 2
36548: EQUAL
36549: ST_TO_ADDR
36550: GO 36691
36552: LD_INT 19
36554: DOUBLE
36555: EQUAL
36556: IFTRUE 36566
36558: LD_INT 23
36560: DOUBLE
36561: EQUAL
36562: IFTRUE 36566
36564: GO 36591
36566: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
36567: LD_ADDR_VAR 0 3
36571: PUSH
36572: LD_INT 83
36574: PPUSH
36575: LD_VAR 0 1
36579: PPUSH
36580: CALL_OW 321
36584: PUSH
36585: LD_INT 2
36587: EQUAL
36588: ST_TO_ADDR
36589: GO 36691
36591: LD_INT 17
36593: DOUBLE
36594: EQUAL
36595: IFTRUE 36599
36597: GO 36624
36599: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
36600: LD_ADDR_VAR 0 3
36604: PUSH
36605: LD_INT 39
36607: PPUSH
36608: LD_VAR 0 1
36612: PPUSH
36613: CALL_OW 321
36617: PUSH
36618: LD_INT 2
36620: EQUAL
36621: ST_TO_ADDR
36622: GO 36691
36624: LD_INT 18
36626: DOUBLE
36627: EQUAL
36628: IFTRUE 36632
36630: GO 36657
36632: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
36633: LD_ADDR_VAR 0 3
36637: PUSH
36638: LD_INT 40
36640: PPUSH
36641: LD_VAR 0 1
36645: PPUSH
36646: CALL_OW 321
36650: PUSH
36651: LD_INT 2
36653: EQUAL
36654: ST_TO_ADDR
36655: GO 36691
36657: LD_INT 27
36659: DOUBLE
36660: EQUAL
36661: IFTRUE 36665
36663: GO 36690
36665: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
36666: LD_ADDR_VAR 0 3
36670: PUSH
36671: LD_INT 35
36673: PPUSH
36674: LD_VAR 0 1
36678: PPUSH
36679: CALL_OW 321
36683: PUSH
36684: LD_INT 2
36686: EQUAL
36687: ST_TO_ADDR
36688: GO 36691
36690: POP
// end ;
36691: LD_VAR 0 3
36695: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
36696: LD_INT 0
36698: PPUSH
36699: PPUSH
36700: PPUSH
36701: PPUSH
36702: PPUSH
36703: PPUSH
36704: PPUSH
36705: PPUSH
36706: PPUSH
36707: PPUSH
36708: PPUSH
// result := false ;
36709: LD_ADDR_VAR 0 6
36713: PUSH
36714: LD_INT 0
36716: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
36717: LD_VAR 0 1
36721: NOT
36722: PUSH
36723: LD_VAR 0 1
36727: PPUSH
36728: CALL_OW 266
36732: PUSH
36733: LD_INT 0
36735: PUSH
36736: LD_INT 1
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: IN
36743: NOT
36744: OR
36745: PUSH
36746: LD_VAR 0 2
36750: NOT
36751: OR
36752: PUSH
36753: LD_VAR 0 5
36757: PUSH
36758: LD_INT 0
36760: PUSH
36761: LD_INT 1
36763: PUSH
36764: LD_INT 2
36766: PUSH
36767: LD_INT 3
36769: PUSH
36770: LD_INT 4
36772: PUSH
36773: LD_INT 5
36775: PUSH
36776: EMPTY
36777: LIST
36778: LIST
36779: LIST
36780: LIST
36781: LIST
36782: LIST
36783: IN
36784: NOT
36785: OR
36786: PUSH
36787: LD_VAR 0 3
36791: PPUSH
36792: LD_VAR 0 4
36796: PPUSH
36797: CALL_OW 488
36801: NOT
36802: OR
36803: IFFALSE 36807
// exit ;
36805: GO 37543
// side := GetSide ( depot ) ;
36807: LD_ADDR_VAR 0 9
36811: PUSH
36812: LD_VAR 0 1
36816: PPUSH
36817: CALL_OW 255
36821: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
36822: LD_VAR 0 9
36826: PPUSH
36827: LD_VAR 0 2
36831: PPUSH
36832: CALL 36320 0 2
36836: NOT
36837: IFFALSE 36841
// exit ;
36839: GO 37543
// pom := GetBase ( depot ) ;
36841: LD_ADDR_VAR 0 10
36845: PUSH
36846: LD_VAR 0 1
36850: PPUSH
36851: CALL_OW 274
36855: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
36856: LD_ADDR_VAR 0 11
36860: PUSH
36861: LD_VAR 0 2
36865: PPUSH
36866: LD_VAR 0 1
36870: PPUSH
36871: CALL_OW 248
36875: PPUSH
36876: CALL_OW 450
36880: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
36881: LD_VAR 0 10
36885: PPUSH
36886: LD_INT 1
36888: PPUSH
36889: CALL_OW 275
36893: PUSH
36894: LD_VAR 0 11
36898: PUSH
36899: LD_INT 1
36901: ARRAY
36902: GREATEREQUAL
36903: PUSH
36904: LD_VAR 0 10
36908: PPUSH
36909: LD_INT 2
36911: PPUSH
36912: CALL_OW 275
36916: PUSH
36917: LD_VAR 0 11
36921: PUSH
36922: LD_INT 2
36924: ARRAY
36925: GREATEREQUAL
36926: AND
36927: PUSH
36928: LD_VAR 0 10
36932: PPUSH
36933: LD_INT 3
36935: PPUSH
36936: CALL_OW 275
36940: PUSH
36941: LD_VAR 0 11
36945: PUSH
36946: LD_INT 3
36948: ARRAY
36949: GREATEREQUAL
36950: AND
36951: NOT
36952: IFFALSE 36956
// exit ;
36954: GO 37543
// if GetBType ( depot ) = b_depot then
36956: LD_VAR 0 1
36960: PPUSH
36961: CALL_OW 266
36965: PUSH
36966: LD_INT 0
36968: EQUAL
36969: IFFALSE 36981
// dist := 28 else
36971: LD_ADDR_VAR 0 14
36975: PUSH
36976: LD_INT 28
36978: ST_TO_ADDR
36979: GO 36989
// dist := 36 ;
36981: LD_ADDR_VAR 0 14
36985: PUSH
36986: LD_INT 36
36988: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
36989: LD_VAR 0 1
36993: PPUSH
36994: LD_VAR 0 3
36998: PPUSH
36999: LD_VAR 0 4
37003: PPUSH
37004: CALL_OW 297
37008: PUSH
37009: LD_VAR 0 14
37013: GREATER
37014: IFFALSE 37018
// exit ;
37016: GO 37543
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
37018: LD_ADDR_VAR 0 12
37022: PUSH
37023: LD_VAR 0 2
37027: PPUSH
37028: LD_VAR 0 3
37032: PPUSH
37033: LD_VAR 0 4
37037: PPUSH
37038: LD_VAR 0 5
37042: PPUSH
37043: LD_VAR 0 1
37047: PPUSH
37048: CALL_OW 248
37052: PPUSH
37053: LD_INT 0
37055: PPUSH
37056: CALL 37548 0 6
37060: ST_TO_ADDR
// if not hexes then
37061: LD_VAR 0 12
37065: NOT
37066: IFFALSE 37070
// exit ;
37068: GO 37543
// hex := GetHexInfo ( x , y ) ;
37070: LD_ADDR_VAR 0 15
37074: PUSH
37075: LD_VAR 0 3
37079: PPUSH
37080: LD_VAR 0 4
37084: PPUSH
37085: CALL_OW 546
37089: ST_TO_ADDR
// if hex [ 1 ] then
37090: LD_VAR 0 15
37094: PUSH
37095: LD_INT 1
37097: ARRAY
37098: IFFALSE 37102
// exit ;
37100: GO 37543
// height := hex [ 2 ] ;
37102: LD_ADDR_VAR 0 13
37106: PUSH
37107: LD_VAR 0 15
37111: PUSH
37112: LD_INT 2
37114: ARRAY
37115: ST_TO_ADDR
// for i = 1 to hexes do
37116: LD_ADDR_VAR 0 7
37120: PUSH
37121: DOUBLE
37122: LD_INT 1
37124: DEC
37125: ST_TO_ADDR
37126: LD_VAR 0 12
37130: PUSH
37131: FOR_TO
37132: IFFALSE 37462
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
37134: LD_VAR 0 12
37138: PUSH
37139: LD_VAR 0 7
37143: ARRAY
37144: PUSH
37145: LD_INT 1
37147: ARRAY
37148: PPUSH
37149: LD_VAR 0 12
37153: PUSH
37154: LD_VAR 0 7
37158: ARRAY
37159: PUSH
37160: LD_INT 2
37162: ARRAY
37163: PPUSH
37164: CALL_OW 488
37168: NOT
37169: PUSH
37170: LD_VAR 0 12
37174: PUSH
37175: LD_VAR 0 7
37179: ARRAY
37180: PUSH
37181: LD_INT 1
37183: ARRAY
37184: PPUSH
37185: LD_VAR 0 12
37189: PUSH
37190: LD_VAR 0 7
37194: ARRAY
37195: PUSH
37196: LD_INT 2
37198: ARRAY
37199: PPUSH
37200: CALL_OW 428
37204: PUSH
37205: LD_INT 0
37207: GREATER
37208: OR
37209: PUSH
37210: LD_VAR 0 12
37214: PUSH
37215: LD_VAR 0 7
37219: ARRAY
37220: PUSH
37221: LD_INT 1
37223: ARRAY
37224: PPUSH
37225: LD_VAR 0 12
37229: PUSH
37230: LD_VAR 0 7
37234: ARRAY
37235: PUSH
37236: LD_INT 2
37238: ARRAY
37239: PPUSH
37240: CALL_OW 351
37244: OR
37245: IFFALSE 37251
// exit ;
37247: POP
37248: POP
37249: GO 37543
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37251: LD_ADDR_VAR 0 8
37255: PUSH
37256: LD_VAR 0 12
37260: PUSH
37261: LD_VAR 0 7
37265: ARRAY
37266: PUSH
37267: LD_INT 1
37269: ARRAY
37270: PPUSH
37271: LD_VAR 0 12
37275: PUSH
37276: LD_VAR 0 7
37280: ARRAY
37281: PUSH
37282: LD_INT 2
37284: ARRAY
37285: PPUSH
37286: CALL_OW 546
37290: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
37291: LD_VAR 0 8
37295: PUSH
37296: LD_INT 1
37298: ARRAY
37299: PUSH
37300: LD_VAR 0 8
37304: PUSH
37305: LD_INT 2
37307: ARRAY
37308: PUSH
37309: LD_VAR 0 13
37313: PUSH
37314: LD_INT 2
37316: PLUS
37317: GREATER
37318: OR
37319: PUSH
37320: LD_VAR 0 8
37324: PUSH
37325: LD_INT 2
37327: ARRAY
37328: PUSH
37329: LD_VAR 0 13
37333: PUSH
37334: LD_INT 2
37336: MINUS
37337: LESS
37338: OR
37339: PUSH
37340: LD_VAR 0 8
37344: PUSH
37345: LD_INT 3
37347: ARRAY
37348: PUSH
37349: LD_INT 0
37351: PUSH
37352: LD_INT 8
37354: PUSH
37355: LD_INT 9
37357: PUSH
37358: LD_INT 10
37360: PUSH
37361: LD_INT 11
37363: PUSH
37364: LD_INT 12
37366: PUSH
37367: LD_INT 13
37369: PUSH
37370: LD_INT 16
37372: PUSH
37373: LD_INT 17
37375: PUSH
37376: LD_INT 18
37378: PUSH
37379: LD_INT 19
37381: PUSH
37382: LD_INT 20
37384: PUSH
37385: LD_INT 21
37387: PUSH
37388: EMPTY
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: LIST
37394: LIST
37395: LIST
37396: LIST
37397: LIST
37398: LIST
37399: LIST
37400: LIST
37401: LIST
37402: IN
37403: NOT
37404: OR
37405: PUSH
37406: LD_VAR 0 8
37410: PUSH
37411: LD_INT 5
37413: ARRAY
37414: NOT
37415: OR
37416: PUSH
37417: LD_VAR 0 8
37421: PUSH
37422: LD_INT 6
37424: ARRAY
37425: PUSH
37426: LD_INT 1
37428: PUSH
37429: LD_INT 2
37431: PUSH
37432: LD_INT 7
37434: PUSH
37435: LD_INT 9
37437: PUSH
37438: LD_INT 10
37440: PUSH
37441: LD_INT 11
37443: PUSH
37444: EMPTY
37445: LIST
37446: LIST
37447: LIST
37448: LIST
37449: LIST
37450: LIST
37451: IN
37452: NOT
37453: OR
37454: IFFALSE 37460
// exit ;
37456: POP
37457: POP
37458: GO 37543
// end ;
37460: GO 37131
37462: POP
37463: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
37464: LD_VAR 0 9
37468: PPUSH
37469: LD_VAR 0 3
37473: PPUSH
37474: LD_VAR 0 4
37478: PPUSH
37479: LD_INT 20
37481: PPUSH
37482: CALL 29495 0 4
37486: PUSH
37487: LD_INT 4
37489: ARRAY
37490: IFFALSE 37494
// exit ;
37492: GO 37543
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
37494: LD_VAR 0 2
37498: PUSH
37499: LD_INT 29
37501: PUSH
37502: LD_INT 30
37504: PUSH
37505: EMPTY
37506: LIST
37507: LIST
37508: IN
37509: PUSH
37510: LD_VAR 0 3
37514: PPUSH
37515: LD_VAR 0 4
37519: PPUSH
37520: LD_VAR 0 9
37524: PPUSH
37525: CALL_OW 440
37529: NOT
37530: AND
37531: IFFALSE 37535
// exit ;
37533: GO 37543
// result := true ;
37535: LD_ADDR_VAR 0 6
37539: PUSH
37540: LD_INT 1
37542: ST_TO_ADDR
// end ;
37543: LD_VAR 0 6
37547: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
37548: LD_INT 0
37550: PPUSH
37551: PPUSH
37552: PPUSH
37553: PPUSH
37554: PPUSH
37555: PPUSH
37556: PPUSH
37557: PPUSH
37558: PPUSH
37559: PPUSH
37560: PPUSH
37561: PPUSH
37562: PPUSH
37563: PPUSH
37564: PPUSH
37565: PPUSH
37566: PPUSH
37567: PPUSH
37568: PPUSH
37569: PPUSH
37570: PPUSH
37571: PPUSH
37572: PPUSH
37573: PPUSH
37574: PPUSH
37575: PPUSH
37576: PPUSH
37577: PPUSH
37578: PPUSH
37579: PPUSH
37580: PPUSH
37581: PPUSH
37582: PPUSH
37583: PPUSH
37584: PPUSH
37585: PPUSH
37586: PPUSH
37587: PPUSH
37588: PPUSH
37589: PPUSH
37590: PPUSH
37591: PPUSH
37592: PPUSH
37593: PPUSH
37594: PPUSH
37595: PPUSH
37596: PPUSH
37597: PPUSH
37598: PPUSH
37599: PPUSH
37600: PPUSH
37601: PPUSH
37602: PPUSH
37603: PPUSH
37604: PPUSH
37605: PPUSH
37606: PPUSH
37607: PPUSH
// result = [ ] ;
37608: LD_ADDR_VAR 0 7
37612: PUSH
37613: EMPTY
37614: ST_TO_ADDR
// temp_list = [ ] ;
37615: LD_ADDR_VAR 0 9
37619: PUSH
37620: EMPTY
37621: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
37622: LD_VAR 0 4
37626: PUSH
37627: LD_INT 0
37629: PUSH
37630: LD_INT 1
37632: PUSH
37633: LD_INT 2
37635: PUSH
37636: LD_INT 3
37638: PUSH
37639: LD_INT 4
37641: PUSH
37642: LD_INT 5
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: LIST
37649: LIST
37650: LIST
37651: LIST
37652: IN
37653: NOT
37654: PUSH
37655: LD_VAR 0 1
37659: PUSH
37660: LD_INT 0
37662: PUSH
37663: LD_INT 1
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: IN
37670: PUSH
37671: LD_VAR 0 5
37675: PUSH
37676: LD_INT 1
37678: PUSH
37679: LD_INT 2
37681: PUSH
37682: LD_INT 3
37684: PUSH
37685: EMPTY
37686: LIST
37687: LIST
37688: LIST
37689: IN
37690: NOT
37691: AND
37692: OR
37693: IFFALSE 37697
// exit ;
37695: GO 56088
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
37697: LD_VAR 0 1
37701: PUSH
37702: LD_INT 6
37704: PUSH
37705: LD_INT 7
37707: PUSH
37708: LD_INT 8
37710: PUSH
37711: LD_INT 13
37713: PUSH
37714: LD_INT 12
37716: PUSH
37717: LD_INT 15
37719: PUSH
37720: LD_INT 11
37722: PUSH
37723: LD_INT 14
37725: PUSH
37726: LD_INT 10
37728: PUSH
37729: EMPTY
37730: LIST
37731: LIST
37732: LIST
37733: LIST
37734: LIST
37735: LIST
37736: LIST
37737: LIST
37738: LIST
37739: IN
37740: IFFALSE 37750
// btype = b_lab ;
37742: LD_ADDR_VAR 0 1
37746: PUSH
37747: LD_INT 6
37749: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
37750: LD_VAR 0 6
37754: PUSH
37755: LD_INT 0
37757: PUSH
37758: LD_INT 1
37760: PUSH
37761: LD_INT 2
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: LIST
37768: IN
37769: NOT
37770: PUSH
37771: LD_VAR 0 1
37775: PUSH
37776: LD_INT 0
37778: PUSH
37779: LD_INT 1
37781: PUSH
37782: LD_INT 2
37784: PUSH
37785: LD_INT 3
37787: PUSH
37788: LD_INT 6
37790: PUSH
37791: LD_INT 36
37793: PUSH
37794: LD_INT 4
37796: PUSH
37797: LD_INT 5
37799: PUSH
37800: LD_INT 31
37802: PUSH
37803: LD_INT 32
37805: PUSH
37806: LD_INT 33
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: LIST
37813: LIST
37814: LIST
37815: LIST
37816: LIST
37817: LIST
37818: LIST
37819: LIST
37820: LIST
37821: IN
37822: NOT
37823: PUSH
37824: LD_VAR 0 6
37828: PUSH
37829: LD_INT 1
37831: EQUAL
37832: AND
37833: OR
37834: PUSH
37835: LD_VAR 0 1
37839: PUSH
37840: LD_INT 2
37842: PUSH
37843: LD_INT 3
37845: PUSH
37846: EMPTY
37847: LIST
37848: LIST
37849: IN
37850: NOT
37851: PUSH
37852: LD_VAR 0 6
37856: PUSH
37857: LD_INT 2
37859: EQUAL
37860: AND
37861: OR
37862: IFFALSE 37872
// mode = 0 ;
37864: LD_ADDR_VAR 0 6
37868: PUSH
37869: LD_INT 0
37871: ST_TO_ADDR
// case mode of 0 :
37872: LD_VAR 0 6
37876: PUSH
37877: LD_INT 0
37879: DOUBLE
37880: EQUAL
37881: IFTRUE 37885
37883: GO 49338
37885: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37886: LD_ADDR_VAR 0 11
37890: PUSH
37891: LD_INT 0
37893: PUSH
37894: LD_INT 0
37896: PUSH
37897: EMPTY
37898: LIST
37899: LIST
37900: PUSH
37901: LD_INT 0
37903: PUSH
37904: LD_INT 1
37906: NEG
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: PUSH
37912: LD_INT 1
37914: PUSH
37915: LD_INT 0
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: PUSH
37922: LD_INT 1
37924: PUSH
37925: LD_INT 1
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: PUSH
37932: LD_INT 0
37934: PUSH
37935: LD_INT 1
37937: PUSH
37938: EMPTY
37939: LIST
37940: LIST
37941: PUSH
37942: LD_INT 1
37944: NEG
37945: PUSH
37946: LD_INT 0
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: PUSH
37953: LD_INT 1
37955: NEG
37956: PUSH
37957: LD_INT 1
37959: NEG
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: PUSH
37965: LD_INT 1
37967: NEG
37968: PUSH
37969: LD_INT 2
37971: NEG
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: PUSH
37977: LD_INT 0
37979: PUSH
37980: LD_INT 2
37982: NEG
37983: PUSH
37984: EMPTY
37985: LIST
37986: LIST
37987: PUSH
37988: LD_INT 1
37990: PUSH
37991: LD_INT 1
37993: NEG
37994: PUSH
37995: EMPTY
37996: LIST
37997: LIST
37998: PUSH
37999: LD_INT 1
38001: PUSH
38002: LD_INT 2
38004: PUSH
38005: EMPTY
38006: LIST
38007: LIST
38008: PUSH
38009: LD_INT 0
38011: PUSH
38012: LD_INT 2
38014: PUSH
38015: EMPTY
38016: LIST
38017: LIST
38018: PUSH
38019: LD_INT 1
38021: NEG
38022: PUSH
38023: LD_INT 1
38025: PUSH
38026: EMPTY
38027: LIST
38028: LIST
38029: PUSH
38030: LD_INT 1
38032: PUSH
38033: LD_INT 3
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: PUSH
38040: LD_INT 0
38042: PUSH
38043: LD_INT 3
38045: PUSH
38046: EMPTY
38047: LIST
38048: LIST
38049: PUSH
38050: LD_INT 1
38052: NEG
38053: PUSH
38054: LD_INT 2
38056: PUSH
38057: EMPTY
38058: LIST
38059: LIST
38060: PUSH
38061: EMPTY
38062: LIST
38063: LIST
38064: LIST
38065: LIST
38066: LIST
38067: LIST
38068: LIST
38069: LIST
38070: LIST
38071: LIST
38072: LIST
38073: LIST
38074: LIST
38075: LIST
38076: LIST
38077: LIST
38078: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38079: LD_ADDR_VAR 0 12
38083: PUSH
38084: LD_INT 0
38086: PUSH
38087: LD_INT 0
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: LD_INT 0
38096: PUSH
38097: LD_INT 1
38099: NEG
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: PUSH
38105: LD_INT 1
38107: PUSH
38108: LD_INT 0
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: PUSH
38115: LD_INT 1
38117: PUSH
38118: LD_INT 1
38120: PUSH
38121: EMPTY
38122: LIST
38123: LIST
38124: PUSH
38125: LD_INT 0
38127: PUSH
38128: LD_INT 1
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: PUSH
38135: LD_INT 1
38137: NEG
38138: PUSH
38139: LD_INT 0
38141: PUSH
38142: EMPTY
38143: LIST
38144: LIST
38145: PUSH
38146: LD_INT 1
38148: NEG
38149: PUSH
38150: LD_INT 1
38152: NEG
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: PUSH
38158: LD_INT 1
38160: PUSH
38161: LD_INT 1
38163: NEG
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PUSH
38169: LD_INT 2
38171: PUSH
38172: LD_INT 0
38174: PUSH
38175: EMPTY
38176: LIST
38177: LIST
38178: PUSH
38179: LD_INT 2
38181: PUSH
38182: LD_INT 1
38184: PUSH
38185: EMPTY
38186: LIST
38187: LIST
38188: PUSH
38189: LD_INT 1
38191: NEG
38192: PUSH
38193: LD_INT 1
38195: PUSH
38196: EMPTY
38197: LIST
38198: LIST
38199: PUSH
38200: LD_INT 2
38202: NEG
38203: PUSH
38204: LD_INT 0
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: PUSH
38211: LD_INT 2
38213: NEG
38214: PUSH
38215: LD_INT 1
38217: NEG
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: PUSH
38223: LD_INT 2
38225: NEG
38226: PUSH
38227: LD_INT 1
38229: PUSH
38230: EMPTY
38231: LIST
38232: LIST
38233: PUSH
38234: LD_INT 3
38236: NEG
38237: PUSH
38238: LD_INT 0
38240: PUSH
38241: EMPTY
38242: LIST
38243: LIST
38244: PUSH
38245: LD_INT 3
38247: NEG
38248: PUSH
38249: LD_INT 1
38251: NEG
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: LIST
38261: LIST
38262: LIST
38263: LIST
38264: LIST
38265: LIST
38266: LIST
38267: LIST
38268: LIST
38269: LIST
38270: LIST
38271: LIST
38272: LIST
38273: LIST
38274: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38275: LD_ADDR_VAR 0 13
38279: PUSH
38280: LD_INT 0
38282: PUSH
38283: LD_INT 0
38285: PUSH
38286: EMPTY
38287: LIST
38288: LIST
38289: PUSH
38290: LD_INT 0
38292: PUSH
38293: LD_INT 1
38295: NEG
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 1
38303: PUSH
38304: LD_INT 0
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: PUSH
38311: LD_INT 1
38313: PUSH
38314: LD_INT 1
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: LD_INT 0
38323: PUSH
38324: LD_INT 1
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: PUSH
38331: LD_INT 1
38333: NEG
38334: PUSH
38335: LD_INT 0
38337: PUSH
38338: EMPTY
38339: LIST
38340: LIST
38341: PUSH
38342: LD_INT 1
38344: NEG
38345: PUSH
38346: LD_INT 1
38348: NEG
38349: PUSH
38350: EMPTY
38351: LIST
38352: LIST
38353: PUSH
38354: LD_INT 1
38356: NEG
38357: PUSH
38358: LD_INT 2
38360: NEG
38361: PUSH
38362: EMPTY
38363: LIST
38364: LIST
38365: PUSH
38366: LD_INT 2
38368: PUSH
38369: LD_INT 1
38371: PUSH
38372: EMPTY
38373: LIST
38374: LIST
38375: PUSH
38376: LD_INT 2
38378: PUSH
38379: LD_INT 2
38381: PUSH
38382: EMPTY
38383: LIST
38384: LIST
38385: PUSH
38386: LD_INT 1
38388: PUSH
38389: LD_INT 2
38391: PUSH
38392: EMPTY
38393: LIST
38394: LIST
38395: PUSH
38396: LD_INT 2
38398: NEG
38399: PUSH
38400: LD_INT 1
38402: NEG
38403: PUSH
38404: EMPTY
38405: LIST
38406: LIST
38407: PUSH
38408: LD_INT 2
38410: NEG
38411: PUSH
38412: LD_INT 2
38414: NEG
38415: PUSH
38416: EMPTY
38417: LIST
38418: LIST
38419: PUSH
38420: LD_INT 2
38422: NEG
38423: PUSH
38424: LD_INT 3
38426: NEG
38427: PUSH
38428: EMPTY
38429: LIST
38430: LIST
38431: PUSH
38432: LD_INT 3
38434: NEG
38435: PUSH
38436: LD_INT 2
38438: NEG
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: PUSH
38444: LD_INT 3
38446: NEG
38447: PUSH
38448: LD_INT 3
38450: NEG
38451: PUSH
38452: EMPTY
38453: LIST
38454: LIST
38455: PUSH
38456: EMPTY
38457: LIST
38458: LIST
38459: LIST
38460: LIST
38461: LIST
38462: LIST
38463: LIST
38464: LIST
38465: LIST
38466: LIST
38467: LIST
38468: LIST
38469: LIST
38470: LIST
38471: LIST
38472: LIST
38473: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38474: LD_ADDR_VAR 0 14
38478: PUSH
38479: LD_INT 0
38481: PUSH
38482: LD_INT 0
38484: PUSH
38485: EMPTY
38486: LIST
38487: LIST
38488: PUSH
38489: LD_INT 0
38491: PUSH
38492: LD_INT 1
38494: NEG
38495: PUSH
38496: EMPTY
38497: LIST
38498: LIST
38499: PUSH
38500: LD_INT 1
38502: PUSH
38503: LD_INT 0
38505: PUSH
38506: EMPTY
38507: LIST
38508: LIST
38509: PUSH
38510: LD_INT 1
38512: PUSH
38513: LD_INT 1
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: LD_INT 0
38522: PUSH
38523: LD_INT 1
38525: PUSH
38526: EMPTY
38527: LIST
38528: LIST
38529: PUSH
38530: LD_INT 1
38532: NEG
38533: PUSH
38534: LD_INT 0
38536: PUSH
38537: EMPTY
38538: LIST
38539: LIST
38540: PUSH
38541: LD_INT 1
38543: NEG
38544: PUSH
38545: LD_INT 1
38547: NEG
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: LD_INT 1
38555: NEG
38556: PUSH
38557: LD_INT 2
38559: NEG
38560: PUSH
38561: EMPTY
38562: LIST
38563: LIST
38564: PUSH
38565: LD_INT 0
38567: PUSH
38568: LD_INT 2
38570: NEG
38571: PUSH
38572: EMPTY
38573: LIST
38574: LIST
38575: PUSH
38576: LD_INT 1
38578: PUSH
38579: LD_INT 1
38581: NEG
38582: PUSH
38583: EMPTY
38584: LIST
38585: LIST
38586: PUSH
38587: LD_INT 1
38589: PUSH
38590: LD_INT 2
38592: PUSH
38593: EMPTY
38594: LIST
38595: LIST
38596: PUSH
38597: LD_INT 0
38599: PUSH
38600: LD_INT 2
38602: PUSH
38603: EMPTY
38604: LIST
38605: LIST
38606: PUSH
38607: LD_INT 1
38609: NEG
38610: PUSH
38611: LD_INT 1
38613: PUSH
38614: EMPTY
38615: LIST
38616: LIST
38617: PUSH
38618: LD_INT 1
38620: NEG
38621: PUSH
38622: LD_INT 3
38624: NEG
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: PUSH
38630: LD_INT 0
38632: PUSH
38633: LD_INT 3
38635: NEG
38636: PUSH
38637: EMPTY
38638: LIST
38639: LIST
38640: PUSH
38641: LD_INT 1
38643: PUSH
38644: LD_INT 2
38646: NEG
38647: PUSH
38648: EMPTY
38649: LIST
38650: LIST
38651: PUSH
38652: EMPTY
38653: LIST
38654: LIST
38655: LIST
38656: LIST
38657: LIST
38658: LIST
38659: LIST
38660: LIST
38661: LIST
38662: LIST
38663: LIST
38664: LIST
38665: LIST
38666: LIST
38667: LIST
38668: LIST
38669: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38670: LD_ADDR_VAR 0 15
38674: PUSH
38675: LD_INT 0
38677: PUSH
38678: LD_INT 0
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: PUSH
38685: LD_INT 0
38687: PUSH
38688: LD_INT 1
38690: NEG
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: PUSH
38696: LD_INT 1
38698: PUSH
38699: LD_INT 0
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: PUSH
38706: LD_INT 1
38708: PUSH
38709: LD_INT 1
38711: PUSH
38712: EMPTY
38713: LIST
38714: LIST
38715: PUSH
38716: LD_INT 0
38718: PUSH
38719: LD_INT 1
38721: PUSH
38722: EMPTY
38723: LIST
38724: LIST
38725: PUSH
38726: LD_INT 1
38728: NEG
38729: PUSH
38730: LD_INT 0
38732: PUSH
38733: EMPTY
38734: LIST
38735: LIST
38736: PUSH
38737: LD_INT 1
38739: NEG
38740: PUSH
38741: LD_INT 1
38743: NEG
38744: PUSH
38745: EMPTY
38746: LIST
38747: LIST
38748: PUSH
38749: LD_INT 1
38751: PUSH
38752: LD_INT 1
38754: NEG
38755: PUSH
38756: EMPTY
38757: LIST
38758: LIST
38759: PUSH
38760: LD_INT 2
38762: PUSH
38763: LD_INT 0
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: LD_INT 2
38772: PUSH
38773: LD_INT 1
38775: PUSH
38776: EMPTY
38777: LIST
38778: LIST
38779: PUSH
38780: LD_INT 1
38782: NEG
38783: PUSH
38784: LD_INT 1
38786: PUSH
38787: EMPTY
38788: LIST
38789: LIST
38790: PUSH
38791: LD_INT 2
38793: NEG
38794: PUSH
38795: LD_INT 0
38797: PUSH
38798: EMPTY
38799: LIST
38800: LIST
38801: PUSH
38802: LD_INT 2
38804: NEG
38805: PUSH
38806: LD_INT 1
38808: NEG
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: PUSH
38814: LD_INT 2
38816: PUSH
38817: LD_INT 1
38819: NEG
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: PUSH
38825: LD_INT 3
38827: PUSH
38828: LD_INT 0
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: PUSH
38835: LD_INT 3
38837: PUSH
38838: LD_INT 1
38840: PUSH
38841: EMPTY
38842: LIST
38843: LIST
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: LIST
38849: LIST
38850: LIST
38851: LIST
38852: LIST
38853: LIST
38854: LIST
38855: LIST
38856: LIST
38857: LIST
38858: LIST
38859: LIST
38860: LIST
38861: LIST
38862: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38863: LD_ADDR_VAR 0 16
38867: PUSH
38868: LD_INT 0
38870: PUSH
38871: LD_INT 0
38873: PUSH
38874: EMPTY
38875: LIST
38876: LIST
38877: PUSH
38878: LD_INT 0
38880: PUSH
38881: LD_INT 1
38883: NEG
38884: PUSH
38885: EMPTY
38886: LIST
38887: LIST
38888: PUSH
38889: LD_INT 1
38891: PUSH
38892: LD_INT 0
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: PUSH
38899: LD_INT 1
38901: PUSH
38902: LD_INT 1
38904: PUSH
38905: EMPTY
38906: LIST
38907: LIST
38908: PUSH
38909: LD_INT 0
38911: PUSH
38912: LD_INT 1
38914: PUSH
38915: EMPTY
38916: LIST
38917: LIST
38918: PUSH
38919: LD_INT 1
38921: NEG
38922: PUSH
38923: LD_INT 0
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: PUSH
38930: LD_INT 1
38932: NEG
38933: PUSH
38934: LD_INT 1
38936: NEG
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: PUSH
38942: LD_INT 1
38944: NEG
38945: PUSH
38946: LD_INT 2
38948: NEG
38949: PUSH
38950: EMPTY
38951: LIST
38952: LIST
38953: PUSH
38954: LD_INT 2
38956: PUSH
38957: LD_INT 1
38959: PUSH
38960: EMPTY
38961: LIST
38962: LIST
38963: PUSH
38964: LD_INT 2
38966: PUSH
38967: LD_INT 2
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 1
38976: PUSH
38977: LD_INT 2
38979: PUSH
38980: EMPTY
38981: LIST
38982: LIST
38983: PUSH
38984: LD_INT 2
38986: NEG
38987: PUSH
38988: LD_INT 1
38990: NEG
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: LD_INT 2
38998: NEG
38999: PUSH
39000: LD_INT 2
39002: NEG
39003: PUSH
39004: EMPTY
39005: LIST
39006: LIST
39007: PUSH
39008: LD_INT 3
39010: PUSH
39011: LD_INT 2
39013: PUSH
39014: EMPTY
39015: LIST
39016: LIST
39017: PUSH
39018: LD_INT 3
39020: PUSH
39021: LD_INT 3
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: PUSH
39028: LD_INT 2
39030: PUSH
39031: LD_INT 3
39033: PUSH
39034: EMPTY
39035: LIST
39036: LIST
39037: PUSH
39038: EMPTY
39039: LIST
39040: LIST
39041: LIST
39042: LIST
39043: LIST
39044: LIST
39045: LIST
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39056: LD_ADDR_VAR 0 17
39060: PUSH
39061: LD_INT 0
39063: PUSH
39064: LD_INT 0
39066: PUSH
39067: EMPTY
39068: LIST
39069: LIST
39070: PUSH
39071: LD_INT 0
39073: PUSH
39074: LD_INT 1
39076: NEG
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: PUSH
39082: LD_INT 1
39084: PUSH
39085: LD_INT 0
39087: PUSH
39088: EMPTY
39089: LIST
39090: LIST
39091: PUSH
39092: LD_INT 1
39094: PUSH
39095: LD_INT 1
39097: PUSH
39098: EMPTY
39099: LIST
39100: LIST
39101: PUSH
39102: LD_INT 0
39104: PUSH
39105: LD_INT 1
39107: PUSH
39108: EMPTY
39109: LIST
39110: LIST
39111: PUSH
39112: LD_INT 1
39114: NEG
39115: PUSH
39116: LD_INT 0
39118: PUSH
39119: EMPTY
39120: LIST
39121: LIST
39122: PUSH
39123: LD_INT 1
39125: NEG
39126: PUSH
39127: LD_INT 1
39129: NEG
39130: PUSH
39131: EMPTY
39132: LIST
39133: LIST
39134: PUSH
39135: LD_INT 1
39137: NEG
39138: PUSH
39139: LD_INT 2
39141: NEG
39142: PUSH
39143: EMPTY
39144: LIST
39145: LIST
39146: PUSH
39147: LD_INT 0
39149: PUSH
39150: LD_INT 2
39152: NEG
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: PUSH
39158: LD_INT 1
39160: PUSH
39161: LD_INT 1
39163: NEG
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: PUSH
39169: LD_INT 2
39171: PUSH
39172: LD_INT 0
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: PUSH
39179: LD_INT 2
39181: PUSH
39182: LD_INT 1
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: PUSH
39189: LD_INT 2
39191: PUSH
39192: LD_INT 2
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: PUSH
39199: LD_INT 1
39201: PUSH
39202: LD_INT 2
39204: PUSH
39205: EMPTY
39206: LIST
39207: LIST
39208: PUSH
39209: LD_INT 0
39211: PUSH
39212: LD_INT 2
39214: PUSH
39215: EMPTY
39216: LIST
39217: LIST
39218: PUSH
39219: LD_INT 1
39221: NEG
39222: PUSH
39223: LD_INT 1
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: PUSH
39230: LD_INT 2
39232: NEG
39233: PUSH
39234: LD_INT 0
39236: PUSH
39237: EMPTY
39238: LIST
39239: LIST
39240: PUSH
39241: LD_INT 2
39243: NEG
39244: PUSH
39245: LD_INT 1
39247: NEG
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 2
39255: NEG
39256: PUSH
39257: LD_INT 2
39259: NEG
39260: PUSH
39261: EMPTY
39262: LIST
39263: LIST
39264: PUSH
39265: EMPTY
39266: LIST
39267: LIST
39268: LIST
39269: LIST
39270: LIST
39271: LIST
39272: LIST
39273: LIST
39274: LIST
39275: LIST
39276: LIST
39277: LIST
39278: LIST
39279: LIST
39280: LIST
39281: LIST
39282: LIST
39283: LIST
39284: LIST
39285: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39286: LD_ADDR_VAR 0 18
39290: PUSH
39291: LD_INT 0
39293: PUSH
39294: LD_INT 0
39296: PUSH
39297: EMPTY
39298: LIST
39299: LIST
39300: PUSH
39301: LD_INT 0
39303: PUSH
39304: LD_INT 1
39306: NEG
39307: PUSH
39308: EMPTY
39309: LIST
39310: LIST
39311: PUSH
39312: LD_INT 1
39314: PUSH
39315: LD_INT 0
39317: PUSH
39318: EMPTY
39319: LIST
39320: LIST
39321: PUSH
39322: LD_INT 1
39324: PUSH
39325: LD_INT 1
39327: PUSH
39328: EMPTY
39329: LIST
39330: LIST
39331: PUSH
39332: LD_INT 0
39334: PUSH
39335: LD_INT 1
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: PUSH
39342: LD_INT 1
39344: NEG
39345: PUSH
39346: LD_INT 0
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: PUSH
39353: LD_INT 1
39355: NEG
39356: PUSH
39357: LD_INT 1
39359: NEG
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PUSH
39365: LD_INT 1
39367: NEG
39368: PUSH
39369: LD_INT 2
39371: NEG
39372: PUSH
39373: EMPTY
39374: LIST
39375: LIST
39376: PUSH
39377: LD_INT 0
39379: PUSH
39380: LD_INT 2
39382: NEG
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: PUSH
39388: LD_INT 1
39390: PUSH
39391: LD_INT 1
39393: NEG
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: LD_INT 2
39401: PUSH
39402: LD_INT 0
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: PUSH
39409: LD_INT 2
39411: PUSH
39412: LD_INT 1
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: LD_INT 2
39421: PUSH
39422: LD_INT 2
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: PUSH
39429: LD_INT 1
39431: PUSH
39432: LD_INT 2
39434: PUSH
39435: EMPTY
39436: LIST
39437: LIST
39438: PUSH
39439: LD_INT 0
39441: PUSH
39442: LD_INT 2
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: LD_INT 1
39451: NEG
39452: PUSH
39453: LD_INT 1
39455: PUSH
39456: EMPTY
39457: LIST
39458: LIST
39459: PUSH
39460: LD_INT 2
39462: NEG
39463: PUSH
39464: LD_INT 0
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: PUSH
39471: LD_INT 2
39473: NEG
39474: PUSH
39475: LD_INT 1
39477: NEG
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: PUSH
39483: LD_INT 2
39485: NEG
39486: PUSH
39487: LD_INT 2
39489: NEG
39490: PUSH
39491: EMPTY
39492: LIST
39493: LIST
39494: PUSH
39495: EMPTY
39496: LIST
39497: LIST
39498: LIST
39499: LIST
39500: LIST
39501: LIST
39502: LIST
39503: LIST
39504: LIST
39505: LIST
39506: LIST
39507: LIST
39508: LIST
39509: LIST
39510: LIST
39511: LIST
39512: LIST
39513: LIST
39514: LIST
39515: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39516: LD_ADDR_VAR 0 19
39520: PUSH
39521: LD_INT 0
39523: PUSH
39524: LD_INT 0
39526: PUSH
39527: EMPTY
39528: LIST
39529: LIST
39530: PUSH
39531: LD_INT 0
39533: PUSH
39534: LD_INT 1
39536: NEG
39537: PUSH
39538: EMPTY
39539: LIST
39540: LIST
39541: PUSH
39542: LD_INT 1
39544: PUSH
39545: LD_INT 0
39547: PUSH
39548: EMPTY
39549: LIST
39550: LIST
39551: PUSH
39552: LD_INT 1
39554: PUSH
39555: LD_INT 1
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: PUSH
39562: LD_INT 0
39564: PUSH
39565: LD_INT 1
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: PUSH
39572: LD_INT 1
39574: NEG
39575: PUSH
39576: LD_INT 0
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PUSH
39583: LD_INT 1
39585: NEG
39586: PUSH
39587: LD_INT 1
39589: NEG
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: LD_INT 1
39597: NEG
39598: PUSH
39599: LD_INT 2
39601: NEG
39602: PUSH
39603: EMPTY
39604: LIST
39605: LIST
39606: PUSH
39607: LD_INT 0
39609: PUSH
39610: LD_INT 2
39612: NEG
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: PUSH
39618: LD_INT 1
39620: PUSH
39621: LD_INT 1
39623: NEG
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PUSH
39629: LD_INT 2
39631: PUSH
39632: LD_INT 0
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PUSH
39639: LD_INT 2
39641: PUSH
39642: LD_INT 1
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: LD_INT 2
39651: PUSH
39652: LD_INT 2
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PUSH
39659: LD_INT 1
39661: PUSH
39662: LD_INT 2
39664: PUSH
39665: EMPTY
39666: LIST
39667: LIST
39668: PUSH
39669: LD_INT 0
39671: PUSH
39672: LD_INT 2
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: LD_INT 1
39681: NEG
39682: PUSH
39683: LD_INT 1
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: LD_INT 2
39692: NEG
39693: PUSH
39694: LD_INT 0
39696: PUSH
39697: EMPTY
39698: LIST
39699: LIST
39700: PUSH
39701: LD_INT 2
39703: NEG
39704: PUSH
39705: LD_INT 1
39707: NEG
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: LD_INT 2
39715: NEG
39716: PUSH
39717: LD_INT 2
39719: NEG
39720: PUSH
39721: EMPTY
39722: LIST
39723: LIST
39724: PUSH
39725: EMPTY
39726: LIST
39727: LIST
39728: LIST
39729: LIST
39730: LIST
39731: LIST
39732: LIST
39733: LIST
39734: LIST
39735: LIST
39736: LIST
39737: LIST
39738: LIST
39739: LIST
39740: LIST
39741: LIST
39742: LIST
39743: LIST
39744: LIST
39745: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39746: LD_ADDR_VAR 0 20
39750: PUSH
39751: LD_INT 0
39753: PUSH
39754: LD_INT 0
39756: PUSH
39757: EMPTY
39758: LIST
39759: LIST
39760: PUSH
39761: LD_INT 0
39763: PUSH
39764: LD_INT 1
39766: NEG
39767: PUSH
39768: EMPTY
39769: LIST
39770: LIST
39771: PUSH
39772: LD_INT 1
39774: PUSH
39775: LD_INT 0
39777: PUSH
39778: EMPTY
39779: LIST
39780: LIST
39781: PUSH
39782: LD_INT 1
39784: PUSH
39785: LD_INT 1
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 0
39794: PUSH
39795: LD_INT 1
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: PUSH
39802: LD_INT 1
39804: NEG
39805: PUSH
39806: LD_INT 0
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 1
39815: NEG
39816: PUSH
39817: LD_INT 1
39819: NEG
39820: PUSH
39821: EMPTY
39822: LIST
39823: LIST
39824: PUSH
39825: LD_INT 1
39827: NEG
39828: PUSH
39829: LD_INT 2
39831: NEG
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: PUSH
39837: LD_INT 0
39839: PUSH
39840: LD_INT 2
39842: NEG
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: PUSH
39848: LD_INT 1
39850: PUSH
39851: LD_INT 1
39853: NEG
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: LD_INT 2
39861: PUSH
39862: LD_INT 0
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: PUSH
39869: LD_INT 2
39871: PUSH
39872: LD_INT 1
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: LD_INT 2
39881: PUSH
39882: LD_INT 2
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: PUSH
39889: LD_INT 1
39891: PUSH
39892: LD_INT 2
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: PUSH
39899: LD_INT 0
39901: PUSH
39902: LD_INT 2
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: LD_INT 1
39911: NEG
39912: PUSH
39913: LD_INT 1
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 2
39922: NEG
39923: PUSH
39924: LD_INT 0
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 2
39933: NEG
39934: PUSH
39935: LD_INT 1
39937: NEG
39938: PUSH
39939: EMPTY
39940: LIST
39941: LIST
39942: PUSH
39943: LD_INT 2
39945: NEG
39946: PUSH
39947: LD_INT 2
39949: NEG
39950: PUSH
39951: EMPTY
39952: LIST
39953: LIST
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: LIST
39959: LIST
39960: LIST
39961: LIST
39962: LIST
39963: LIST
39964: LIST
39965: LIST
39966: LIST
39967: LIST
39968: LIST
39969: LIST
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39976: LD_ADDR_VAR 0 21
39980: PUSH
39981: LD_INT 0
39983: PUSH
39984: LD_INT 0
39986: PUSH
39987: EMPTY
39988: LIST
39989: LIST
39990: PUSH
39991: LD_INT 0
39993: PUSH
39994: LD_INT 1
39996: NEG
39997: PUSH
39998: EMPTY
39999: LIST
40000: LIST
40001: PUSH
40002: LD_INT 1
40004: PUSH
40005: LD_INT 0
40007: PUSH
40008: EMPTY
40009: LIST
40010: LIST
40011: PUSH
40012: LD_INT 1
40014: PUSH
40015: LD_INT 1
40017: PUSH
40018: EMPTY
40019: LIST
40020: LIST
40021: PUSH
40022: LD_INT 0
40024: PUSH
40025: LD_INT 1
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 1
40034: NEG
40035: PUSH
40036: LD_INT 0
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: PUSH
40043: LD_INT 1
40045: NEG
40046: PUSH
40047: LD_INT 1
40049: NEG
40050: PUSH
40051: EMPTY
40052: LIST
40053: LIST
40054: PUSH
40055: LD_INT 1
40057: NEG
40058: PUSH
40059: LD_INT 2
40061: NEG
40062: PUSH
40063: EMPTY
40064: LIST
40065: LIST
40066: PUSH
40067: LD_INT 0
40069: PUSH
40070: LD_INT 2
40072: NEG
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PUSH
40078: LD_INT 1
40080: PUSH
40081: LD_INT 1
40083: NEG
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: PUSH
40089: LD_INT 2
40091: PUSH
40092: LD_INT 0
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PUSH
40099: LD_INT 2
40101: PUSH
40102: LD_INT 1
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 2
40111: PUSH
40112: LD_INT 2
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 1
40121: PUSH
40122: LD_INT 2
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: LD_INT 0
40131: PUSH
40132: LD_INT 2
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: PUSH
40139: LD_INT 1
40141: NEG
40142: PUSH
40143: LD_INT 1
40145: PUSH
40146: EMPTY
40147: LIST
40148: LIST
40149: PUSH
40150: LD_INT 2
40152: NEG
40153: PUSH
40154: LD_INT 0
40156: PUSH
40157: EMPTY
40158: LIST
40159: LIST
40160: PUSH
40161: LD_INT 2
40163: NEG
40164: PUSH
40165: LD_INT 1
40167: NEG
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: LD_INT 2
40175: NEG
40176: PUSH
40177: LD_INT 2
40179: NEG
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: LIST
40189: LIST
40190: LIST
40191: LIST
40192: LIST
40193: LIST
40194: LIST
40195: LIST
40196: LIST
40197: LIST
40198: LIST
40199: LIST
40200: LIST
40201: LIST
40202: LIST
40203: LIST
40204: LIST
40205: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40206: LD_ADDR_VAR 0 22
40210: PUSH
40211: LD_INT 0
40213: PUSH
40214: LD_INT 0
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 0
40223: PUSH
40224: LD_INT 1
40226: NEG
40227: PUSH
40228: EMPTY
40229: LIST
40230: LIST
40231: PUSH
40232: LD_INT 1
40234: PUSH
40235: LD_INT 0
40237: PUSH
40238: EMPTY
40239: LIST
40240: LIST
40241: PUSH
40242: LD_INT 1
40244: PUSH
40245: LD_INT 1
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: PUSH
40252: LD_INT 0
40254: PUSH
40255: LD_INT 1
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: PUSH
40262: LD_INT 1
40264: NEG
40265: PUSH
40266: LD_INT 0
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: PUSH
40273: LD_INT 1
40275: NEG
40276: PUSH
40277: LD_INT 1
40279: NEG
40280: PUSH
40281: EMPTY
40282: LIST
40283: LIST
40284: PUSH
40285: LD_INT 1
40287: NEG
40288: PUSH
40289: LD_INT 2
40291: NEG
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PUSH
40297: LD_INT 0
40299: PUSH
40300: LD_INT 2
40302: NEG
40303: PUSH
40304: EMPTY
40305: LIST
40306: LIST
40307: PUSH
40308: LD_INT 1
40310: PUSH
40311: LD_INT 1
40313: NEG
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: PUSH
40319: LD_INT 2
40321: PUSH
40322: LD_INT 0
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: LD_INT 2
40331: PUSH
40332: LD_INT 1
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 2
40341: PUSH
40342: LD_INT 2
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 1
40351: PUSH
40352: LD_INT 2
40354: PUSH
40355: EMPTY
40356: LIST
40357: LIST
40358: PUSH
40359: LD_INT 0
40361: PUSH
40362: LD_INT 2
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: LD_INT 1
40371: NEG
40372: PUSH
40373: LD_INT 1
40375: PUSH
40376: EMPTY
40377: LIST
40378: LIST
40379: PUSH
40380: LD_INT 2
40382: NEG
40383: PUSH
40384: LD_INT 0
40386: PUSH
40387: EMPTY
40388: LIST
40389: LIST
40390: PUSH
40391: LD_INT 2
40393: NEG
40394: PUSH
40395: LD_INT 1
40397: NEG
40398: PUSH
40399: EMPTY
40400: LIST
40401: LIST
40402: PUSH
40403: LD_INT 2
40405: NEG
40406: PUSH
40407: LD_INT 2
40409: NEG
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PUSH
40415: EMPTY
40416: LIST
40417: LIST
40418: LIST
40419: LIST
40420: LIST
40421: LIST
40422: LIST
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: LIST
40431: LIST
40432: LIST
40433: LIST
40434: LIST
40435: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40436: LD_ADDR_VAR 0 23
40440: PUSH
40441: LD_INT 0
40443: PUSH
40444: LD_INT 0
40446: PUSH
40447: EMPTY
40448: LIST
40449: LIST
40450: PUSH
40451: LD_INT 0
40453: PUSH
40454: LD_INT 1
40456: NEG
40457: PUSH
40458: EMPTY
40459: LIST
40460: LIST
40461: PUSH
40462: LD_INT 1
40464: PUSH
40465: LD_INT 0
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PUSH
40472: LD_INT 1
40474: PUSH
40475: LD_INT 1
40477: PUSH
40478: EMPTY
40479: LIST
40480: LIST
40481: PUSH
40482: LD_INT 0
40484: PUSH
40485: LD_INT 1
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PUSH
40492: LD_INT 1
40494: NEG
40495: PUSH
40496: LD_INT 0
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PUSH
40503: LD_INT 1
40505: NEG
40506: PUSH
40507: LD_INT 1
40509: NEG
40510: PUSH
40511: EMPTY
40512: LIST
40513: LIST
40514: PUSH
40515: LD_INT 1
40517: NEG
40518: PUSH
40519: LD_INT 2
40521: NEG
40522: PUSH
40523: EMPTY
40524: LIST
40525: LIST
40526: PUSH
40527: LD_INT 0
40529: PUSH
40530: LD_INT 2
40532: NEG
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: LD_INT 1
40540: PUSH
40541: LD_INT 1
40543: NEG
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: PUSH
40549: LD_INT 2
40551: PUSH
40552: LD_INT 0
40554: PUSH
40555: EMPTY
40556: LIST
40557: LIST
40558: PUSH
40559: LD_INT 2
40561: PUSH
40562: LD_INT 1
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 2
40571: PUSH
40572: LD_INT 2
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: PUSH
40579: LD_INT 1
40581: PUSH
40582: LD_INT 2
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PUSH
40589: LD_INT 0
40591: PUSH
40592: LD_INT 2
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: PUSH
40599: LD_INT 1
40601: NEG
40602: PUSH
40603: LD_INT 1
40605: PUSH
40606: EMPTY
40607: LIST
40608: LIST
40609: PUSH
40610: LD_INT 2
40612: NEG
40613: PUSH
40614: LD_INT 0
40616: PUSH
40617: EMPTY
40618: LIST
40619: LIST
40620: PUSH
40621: LD_INT 2
40623: NEG
40624: PUSH
40625: LD_INT 1
40627: NEG
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: LD_INT 2
40635: NEG
40636: PUSH
40637: LD_INT 2
40639: NEG
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: PUSH
40645: LD_INT 2
40647: NEG
40648: PUSH
40649: LD_INT 3
40651: NEG
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 1
40659: NEG
40660: PUSH
40661: LD_INT 3
40663: NEG
40664: PUSH
40665: EMPTY
40666: LIST
40667: LIST
40668: PUSH
40669: LD_INT 1
40671: PUSH
40672: LD_INT 2
40674: NEG
40675: PUSH
40676: EMPTY
40677: LIST
40678: LIST
40679: PUSH
40680: LD_INT 2
40682: PUSH
40683: LD_INT 1
40685: NEG
40686: PUSH
40687: EMPTY
40688: LIST
40689: LIST
40690: PUSH
40691: EMPTY
40692: LIST
40693: LIST
40694: LIST
40695: LIST
40696: LIST
40697: LIST
40698: LIST
40699: LIST
40700: LIST
40701: LIST
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: LIST
40707: LIST
40708: LIST
40709: LIST
40710: LIST
40711: LIST
40712: LIST
40713: LIST
40714: LIST
40715: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
40716: LD_ADDR_VAR 0 24
40720: PUSH
40721: LD_INT 0
40723: PUSH
40724: LD_INT 0
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 0
40733: PUSH
40734: LD_INT 1
40736: NEG
40737: PUSH
40738: EMPTY
40739: LIST
40740: LIST
40741: PUSH
40742: LD_INT 1
40744: PUSH
40745: LD_INT 0
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: PUSH
40752: LD_INT 1
40754: PUSH
40755: LD_INT 1
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: PUSH
40762: LD_INT 0
40764: PUSH
40765: LD_INT 1
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: LD_INT 1
40774: NEG
40775: PUSH
40776: LD_INT 0
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: PUSH
40783: LD_INT 1
40785: NEG
40786: PUSH
40787: LD_INT 1
40789: NEG
40790: PUSH
40791: EMPTY
40792: LIST
40793: LIST
40794: PUSH
40795: LD_INT 1
40797: NEG
40798: PUSH
40799: LD_INT 2
40801: NEG
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PUSH
40807: LD_INT 0
40809: PUSH
40810: LD_INT 2
40812: NEG
40813: PUSH
40814: EMPTY
40815: LIST
40816: LIST
40817: PUSH
40818: LD_INT 1
40820: PUSH
40821: LD_INT 1
40823: NEG
40824: PUSH
40825: EMPTY
40826: LIST
40827: LIST
40828: PUSH
40829: LD_INT 2
40831: PUSH
40832: LD_INT 0
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: LD_INT 2
40841: PUSH
40842: LD_INT 1
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: LD_INT 2
40851: PUSH
40852: LD_INT 2
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: PUSH
40859: LD_INT 1
40861: PUSH
40862: LD_INT 2
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PUSH
40869: LD_INT 0
40871: PUSH
40872: LD_INT 2
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: PUSH
40879: LD_INT 1
40881: NEG
40882: PUSH
40883: LD_INT 1
40885: PUSH
40886: EMPTY
40887: LIST
40888: LIST
40889: PUSH
40890: LD_INT 2
40892: NEG
40893: PUSH
40894: LD_INT 0
40896: PUSH
40897: EMPTY
40898: LIST
40899: LIST
40900: PUSH
40901: LD_INT 2
40903: NEG
40904: PUSH
40905: LD_INT 1
40907: NEG
40908: PUSH
40909: EMPTY
40910: LIST
40911: LIST
40912: PUSH
40913: LD_INT 2
40915: NEG
40916: PUSH
40917: LD_INT 2
40919: NEG
40920: PUSH
40921: EMPTY
40922: LIST
40923: LIST
40924: PUSH
40925: LD_INT 1
40927: PUSH
40928: LD_INT 2
40930: NEG
40931: PUSH
40932: EMPTY
40933: LIST
40934: LIST
40935: PUSH
40936: LD_INT 2
40938: PUSH
40939: LD_INT 1
40941: NEG
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 3
40949: PUSH
40950: LD_INT 1
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 3
40959: PUSH
40960: LD_INT 2
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: LIST
40971: LIST
40972: LIST
40973: LIST
40974: LIST
40975: LIST
40976: LIST
40977: LIST
40978: LIST
40979: LIST
40980: LIST
40981: LIST
40982: LIST
40983: LIST
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
40992: LD_ADDR_VAR 0 25
40996: PUSH
40997: LD_INT 0
40999: PUSH
41000: LD_INT 0
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: PUSH
41007: LD_INT 0
41009: PUSH
41010: LD_INT 1
41012: NEG
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 1
41020: PUSH
41021: LD_INT 0
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 1
41030: PUSH
41031: LD_INT 1
41033: PUSH
41034: EMPTY
41035: LIST
41036: LIST
41037: PUSH
41038: LD_INT 0
41040: PUSH
41041: LD_INT 1
41043: PUSH
41044: EMPTY
41045: LIST
41046: LIST
41047: PUSH
41048: LD_INT 1
41050: NEG
41051: PUSH
41052: LD_INT 0
41054: PUSH
41055: EMPTY
41056: LIST
41057: LIST
41058: PUSH
41059: LD_INT 1
41061: NEG
41062: PUSH
41063: LD_INT 1
41065: NEG
41066: PUSH
41067: EMPTY
41068: LIST
41069: LIST
41070: PUSH
41071: LD_INT 1
41073: NEG
41074: PUSH
41075: LD_INT 2
41077: NEG
41078: PUSH
41079: EMPTY
41080: LIST
41081: LIST
41082: PUSH
41083: LD_INT 0
41085: PUSH
41086: LD_INT 2
41088: NEG
41089: PUSH
41090: EMPTY
41091: LIST
41092: LIST
41093: PUSH
41094: LD_INT 1
41096: PUSH
41097: LD_INT 1
41099: NEG
41100: PUSH
41101: EMPTY
41102: LIST
41103: LIST
41104: PUSH
41105: LD_INT 2
41107: PUSH
41108: LD_INT 0
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: PUSH
41115: LD_INT 2
41117: PUSH
41118: LD_INT 1
41120: PUSH
41121: EMPTY
41122: LIST
41123: LIST
41124: PUSH
41125: LD_INT 2
41127: PUSH
41128: LD_INT 2
41130: PUSH
41131: EMPTY
41132: LIST
41133: LIST
41134: PUSH
41135: LD_INT 1
41137: PUSH
41138: LD_INT 2
41140: PUSH
41141: EMPTY
41142: LIST
41143: LIST
41144: PUSH
41145: LD_INT 0
41147: PUSH
41148: LD_INT 2
41150: PUSH
41151: EMPTY
41152: LIST
41153: LIST
41154: PUSH
41155: LD_INT 1
41157: NEG
41158: PUSH
41159: LD_INT 1
41161: PUSH
41162: EMPTY
41163: LIST
41164: LIST
41165: PUSH
41166: LD_INT 2
41168: NEG
41169: PUSH
41170: LD_INT 0
41172: PUSH
41173: EMPTY
41174: LIST
41175: LIST
41176: PUSH
41177: LD_INT 2
41179: NEG
41180: PUSH
41181: LD_INT 1
41183: NEG
41184: PUSH
41185: EMPTY
41186: LIST
41187: LIST
41188: PUSH
41189: LD_INT 2
41191: NEG
41192: PUSH
41193: LD_INT 2
41195: NEG
41196: PUSH
41197: EMPTY
41198: LIST
41199: LIST
41200: PUSH
41201: LD_INT 3
41203: PUSH
41204: LD_INT 1
41206: PUSH
41207: EMPTY
41208: LIST
41209: LIST
41210: PUSH
41211: LD_INT 3
41213: PUSH
41214: LD_INT 2
41216: PUSH
41217: EMPTY
41218: LIST
41219: LIST
41220: PUSH
41221: LD_INT 2
41223: PUSH
41224: LD_INT 3
41226: PUSH
41227: EMPTY
41228: LIST
41229: LIST
41230: PUSH
41231: LD_INT 1
41233: PUSH
41234: LD_INT 3
41236: PUSH
41237: EMPTY
41238: LIST
41239: LIST
41240: PUSH
41241: EMPTY
41242: LIST
41243: LIST
41244: LIST
41245: LIST
41246: LIST
41247: LIST
41248: LIST
41249: LIST
41250: LIST
41251: LIST
41252: LIST
41253: LIST
41254: LIST
41255: LIST
41256: LIST
41257: LIST
41258: LIST
41259: LIST
41260: LIST
41261: LIST
41262: LIST
41263: LIST
41264: LIST
41265: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41266: LD_ADDR_VAR 0 26
41270: PUSH
41271: LD_INT 0
41273: PUSH
41274: LD_INT 0
41276: PUSH
41277: EMPTY
41278: LIST
41279: LIST
41280: PUSH
41281: LD_INT 0
41283: PUSH
41284: LD_INT 1
41286: NEG
41287: PUSH
41288: EMPTY
41289: LIST
41290: LIST
41291: PUSH
41292: LD_INT 1
41294: PUSH
41295: LD_INT 0
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: PUSH
41302: LD_INT 1
41304: PUSH
41305: LD_INT 1
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 0
41314: PUSH
41315: LD_INT 1
41317: PUSH
41318: EMPTY
41319: LIST
41320: LIST
41321: PUSH
41322: LD_INT 1
41324: NEG
41325: PUSH
41326: LD_INT 0
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: PUSH
41333: LD_INT 1
41335: NEG
41336: PUSH
41337: LD_INT 1
41339: NEG
41340: PUSH
41341: EMPTY
41342: LIST
41343: LIST
41344: PUSH
41345: LD_INT 1
41347: NEG
41348: PUSH
41349: LD_INT 2
41351: NEG
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: LD_INT 0
41359: PUSH
41360: LD_INT 2
41362: NEG
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: PUSH
41368: LD_INT 1
41370: PUSH
41371: LD_INT 1
41373: NEG
41374: PUSH
41375: EMPTY
41376: LIST
41377: LIST
41378: PUSH
41379: LD_INT 2
41381: PUSH
41382: LD_INT 0
41384: PUSH
41385: EMPTY
41386: LIST
41387: LIST
41388: PUSH
41389: LD_INT 2
41391: PUSH
41392: LD_INT 1
41394: PUSH
41395: EMPTY
41396: LIST
41397: LIST
41398: PUSH
41399: LD_INT 2
41401: PUSH
41402: LD_INT 2
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 1
41411: PUSH
41412: LD_INT 2
41414: PUSH
41415: EMPTY
41416: LIST
41417: LIST
41418: PUSH
41419: LD_INT 0
41421: PUSH
41422: LD_INT 2
41424: PUSH
41425: EMPTY
41426: LIST
41427: LIST
41428: PUSH
41429: LD_INT 1
41431: NEG
41432: PUSH
41433: LD_INT 1
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 2
41442: NEG
41443: PUSH
41444: LD_INT 0
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 2
41453: NEG
41454: PUSH
41455: LD_INT 1
41457: NEG
41458: PUSH
41459: EMPTY
41460: LIST
41461: LIST
41462: PUSH
41463: LD_INT 2
41465: NEG
41466: PUSH
41467: LD_INT 2
41469: NEG
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: PUSH
41475: LD_INT 2
41477: PUSH
41478: LD_INT 3
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: PUSH
41485: LD_INT 1
41487: PUSH
41488: LD_INT 3
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: PUSH
41495: LD_INT 1
41497: NEG
41498: PUSH
41499: LD_INT 2
41501: PUSH
41502: EMPTY
41503: LIST
41504: LIST
41505: PUSH
41506: LD_INT 2
41508: NEG
41509: PUSH
41510: LD_INT 1
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: EMPTY
41518: LIST
41519: LIST
41520: LIST
41521: LIST
41522: LIST
41523: LIST
41524: LIST
41525: LIST
41526: LIST
41527: LIST
41528: LIST
41529: LIST
41530: LIST
41531: LIST
41532: LIST
41533: LIST
41534: LIST
41535: LIST
41536: LIST
41537: LIST
41538: LIST
41539: LIST
41540: LIST
41541: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41542: LD_ADDR_VAR 0 27
41546: PUSH
41547: LD_INT 0
41549: PUSH
41550: LD_INT 0
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PUSH
41557: LD_INT 0
41559: PUSH
41560: LD_INT 1
41562: NEG
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 1
41570: PUSH
41571: LD_INT 0
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: PUSH
41578: LD_INT 1
41580: PUSH
41581: LD_INT 1
41583: PUSH
41584: EMPTY
41585: LIST
41586: LIST
41587: PUSH
41588: LD_INT 0
41590: PUSH
41591: LD_INT 1
41593: PUSH
41594: EMPTY
41595: LIST
41596: LIST
41597: PUSH
41598: LD_INT 1
41600: NEG
41601: PUSH
41602: LD_INT 0
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: PUSH
41609: LD_INT 1
41611: NEG
41612: PUSH
41613: LD_INT 1
41615: NEG
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PUSH
41621: LD_INT 1
41623: NEG
41624: PUSH
41625: LD_INT 2
41627: NEG
41628: PUSH
41629: EMPTY
41630: LIST
41631: LIST
41632: PUSH
41633: LD_INT 0
41635: PUSH
41636: LD_INT 2
41638: NEG
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: PUSH
41644: LD_INT 1
41646: PUSH
41647: LD_INT 1
41649: NEG
41650: PUSH
41651: EMPTY
41652: LIST
41653: LIST
41654: PUSH
41655: LD_INT 2
41657: PUSH
41658: LD_INT 0
41660: PUSH
41661: EMPTY
41662: LIST
41663: LIST
41664: PUSH
41665: LD_INT 2
41667: PUSH
41668: LD_INT 1
41670: PUSH
41671: EMPTY
41672: LIST
41673: LIST
41674: PUSH
41675: LD_INT 2
41677: PUSH
41678: LD_INT 2
41680: PUSH
41681: EMPTY
41682: LIST
41683: LIST
41684: PUSH
41685: LD_INT 1
41687: PUSH
41688: LD_INT 2
41690: PUSH
41691: EMPTY
41692: LIST
41693: LIST
41694: PUSH
41695: LD_INT 0
41697: PUSH
41698: LD_INT 2
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PUSH
41705: LD_INT 1
41707: NEG
41708: PUSH
41709: LD_INT 1
41711: PUSH
41712: EMPTY
41713: LIST
41714: LIST
41715: PUSH
41716: LD_INT 2
41718: NEG
41719: PUSH
41720: LD_INT 0
41722: PUSH
41723: EMPTY
41724: LIST
41725: LIST
41726: PUSH
41727: LD_INT 2
41729: NEG
41730: PUSH
41731: LD_INT 1
41733: NEG
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: PUSH
41739: LD_INT 2
41741: NEG
41742: PUSH
41743: LD_INT 2
41745: NEG
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PUSH
41751: LD_INT 1
41753: NEG
41754: PUSH
41755: LD_INT 2
41757: PUSH
41758: EMPTY
41759: LIST
41760: LIST
41761: PUSH
41762: LD_INT 2
41764: NEG
41765: PUSH
41766: LD_INT 1
41768: PUSH
41769: EMPTY
41770: LIST
41771: LIST
41772: PUSH
41773: LD_INT 3
41775: NEG
41776: PUSH
41777: LD_INT 1
41779: NEG
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 3
41787: NEG
41788: PUSH
41789: LD_INT 2
41791: NEG
41792: PUSH
41793: EMPTY
41794: LIST
41795: LIST
41796: PUSH
41797: EMPTY
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41822: LD_ADDR_VAR 0 28
41826: PUSH
41827: LD_INT 0
41829: PUSH
41830: LD_INT 0
41832: PUSH
41833: EMPTY
41834: LIST
41835: LIST
41836: PUSH
41837: LD_INT 0
41839: PUSH
41840: LD_INT 1
41842: NEG
41843: PUSH
41844: EMPTY
41845: LIST
41846: LIST
41847: PUSH
41848: LD_INT 1
41850: PUSH
41851: LD_INT 0
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: LD_INT 1
41860: PUSH
41861: LD_INT 1
41863: PUSH
41864: EMPTY
41865: LIST
41866: LIST
41867: PUSH
41868: LD_INT 0
41870: PUSH
41871: LD_INT 1
41873: PUSH
41874: EMPTY
41875: LIST
41876: LIST
41877: PUSH
41878: LD_INT 1
41880: NEG
41881: PUSH
41882: LD_INT 0
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: LD_INT 1
41891: NEG
41892: PUSH
41893: LD_INT 1
41895: NEG
41896: PUSH
41897: EMPTY
41898: LIST
41899: LIST
41900: PUSH
41901: LD_INT 1
41903: NEG
41904: PUSH
41905: LD_INT 2
41907: NEG
41908: PUSH
41909: EMPTY
41910: LIST
41911: LIST
41912: PUSH
41913: LD_INT 0
41915: PUSH
41916: LD_INT 2
41918: NEG
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: LD_INT 1
41926: PUSH
41927: LD_INT 1
41929: NEG
41930: PUSH
41931: EMPTY
41932: LIST
41933: LIST
41934: PUSH
41935: LD_INT 2
41937: PUSH
41938: LD_INT 0
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: PUSH
41945: LD_INT 2
41947: PUSH
41948: LD_INT 1
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 2
41957: PUSH
41958: LD_INT 2
41960: PUSH
41961: EMPTY
41962: LIST
41963: LIST
41964: PUSH
41965: LD_INT 1
41967: PUSH
41968: LD_INT 2
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 0
41977: PUSH
41978: LD_INT 2
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: PUSH
41985: LD_INT 1
41987: NEG
41988: PUSH
41989: LD_INT 1
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 2
41998: NEG
41999: PUSH
42000: LD_INT 0
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 2
42009: NEG
42010: PUSH
42011: LD_INT 1
42013: NEG
42014: PUSH
42015: EMPTY
42016: LIST
42017: LIST
42018: PUSH
42019: LD_INT 2
42021: NEG
42022: PUSH
42023: LD_INT 2
42025: NEG
42026: PUSH
42027: EMPTY
42028: LIST
42029: LIST
42030: PUSH
42031: LD_INT 2
42033: NEG
42034: PUSH
42035: LD_INT 3
42037: NEG
42038: PUSH
42039: EMPTY
42040: LIST
42041: LIST
42042: PUSH
42043: LD_INT 1
42045: NEG
42046: PUSH
42047: LD_INT 3
42049: NEG
42050: PUSH
42051: EMPTY
42052: LIST
42053: LIST
42054: PUSH
42055: LD_INT 3
42057: NEG
42058: PUSH
42059: LD_INT 1
42061: NEG
42062: PUSH
42063: EMPTY
42064: LIST
42065: LIST
42066: PUSH
42067: LD_INT 3
42069: NEG
42070: PUSH
42071: LD_INT 2
42073: NEG
42074: PUSH
42075: EMPTY
42076: LIST
42077: LIST
42078: PUSH
42079: EMPTY
42080: LIST
42081: LIST
42082: LIST
42083: LIST
42084: LIST
42085: LIST
42086: LIST
42087: LIST
42088: LIST
42089: LIST
42090: LIST
42091: LIST
42092: LIST
42093: LIST
42094: LIST
42095: LIST
42096: LIST
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42104: LD_ADDR_VAR 0 29
42108: PUSH
42109: LD_INT 0
42111: PUSH
42112: LD_INT 0
42114: PUSH
42115: EMPTY
42116: LIST
42117: LIST
42118: PUSH
42119: LD_INT 0
42121: PUSH
42122: LD_INT 1
42124: NEG
42125: PUSH
42126: EMPTY
42127: LIST
42128: LIST
42129: PUSH
42130: LD_INT 1
42132: PUSH
42133: LD_INT 0
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 1
42142: PUSH
42143: LD_INT 1
42145: PUSH
42146: EMPTY
42147: LIST
42148: LIST
42149: PUSH
42150: LD_INT 0
42152: PUSH
42153: LD_INT 1
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 1
42162: NEG
42163: PUSH
42164: LD_INT 0
42166: PUSH
42167: EMPTY
42168: LIST
42169: LIST
42170: PUSH
42171: LD_INT 1
42173: NEG
42174: PUSH
42175: LD_INT 1
42177: NEG
42178: PUSH
42179: EMPTY
42180: LIST
42181: LIST
42182: PUSH
42183: LD_INT 1
42185: NEG
42186: PUSH
42187: LD_INT 2
42189: NEG
42190: PUSH
42191: EMPTY
42192: LIST
42193: LIST
42194: PUSH
42195: LD_INT 0
42197: PUSH
42198: LD_INT 2
42200: NEG
42201: PUSH
42202: EMPTY
42203: LIST
42204: LIST
42205: PUSH
42206: LD_INT 1
42208: PUSH
42209: LD_INT 1
42211: NEG
42212: PUSH
42213: EMPTY
42214: LIST
42215: LIST
42216: PUSH
42217: LD_INT 2
42219: PUSH
42220: LD_INT 0
42222: PUSH
42223: EMPTY
42224: LIST
42225: LIST
42226: PUSH
42227: LD_INT 2
42229: PUSH
42230: LD_INT 1
42232: PUSH
42233: EMPTY
42234: LIST
42235: LIST
42236: PUSH
42237: LD_INT 1
42239: PUSH
42240: LD_INT 2
42242: PUSH
42243: EMPTY
42244: LIST
42245: LIST
42246: PUSH
42247: LD_INT 0
42249: PUSH
42250: LD_INT 2
42252: PUSH
42253: EMPTY
42254: LIST
42255: LIST
42256: PUSH
42257: LD_INT 1
42259: NEG
42260: PUSH
42261: LD_INT 1
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 2
42270: NEG
42271: PUSH
42272: LD_INT 1
42274: NEG
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 2
42282: NEG
42283: PUSH
42284: LD_INT 2
42286: NEG
42287: PUSH
42288: EMPTY
42289: LIST
42290: LIST
42291: PUSH
42292: LD_INT 2
42294: NEG
42295: PUSH
42296: LD_INT 3
42298: NEG
42299: PUSH
42300: EMPTY
42301: LIST
42302: LIST
42303: PUSH
42304: LD_INT 2
42306: PUSH
42307: LD_INT 1
42309: NEG
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 3
42317: PUSH
42318: LD_INT 1
42320: PUSH
42321: EMPTY
42322: LIST
42323: LIST
42324: PUSH
42325: LD_INT 1
42327: PUSH
42328: LD_INT 3
42330: PUSH
42331: EMPTY
42332: LIST
42333: LIST
42334: PUSH
42335: LD_INT 1
42337: NEG
42338: PUSH
42339: LD_INT 2
42341: PUSH
42342: EMPTY
42343: LIST
42344: LIST
42345: PUSH
42346: LD_INT 3
42348: NEG
42349: PUSH
42350: LD_INT 2
42352: NEG
42353: PUSH
42354: EMPTY
42355: LIST
42356: LIST
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: LIST
42364: LIST
42365: LIST
42366: LIST
42367: LIST
42368: LIST
42369: LIST
42370: LIST
42371: LIST
42372: LIST
42373: LIST
42374: LIST
42375: LIST
42376: LIST
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: LIST
42382: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42383: LD_ADDR_VAR 0 30
42387: PUSH
42388: LD_INT 0
42390: PUSH
42391: LD_INT 0
42393: PUSH
42394: EMPTY
42395: LIST
42396: LIST
42397: PUSH
42398: LD_INT 0
42400: PUSH
42401: LD_INT 1
42403: NEG
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: LD_INT 1
42411: PUSH
42412: LD_INT 0
42414: PUSH
42415: EMPTY
42416: LIST
42417: LIST
42418: PUSH
42419: LD_INT 1
42421: PUSH
42422: LD_INT 1
42424: PUSH
42425: EMPTY
42426: LIST
42427: LIST
42428: PUSH
42429: LD_INT 0
42431: PUSH
42432: LD_INT 1
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 1
42441: NEG
42442: PUSH
42443: LD_INT 0
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: PUSH
42450: LD_INT 1
42452: NEG
42453: PUSH
42454: LD_INT 1
42456: NEG
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: LD_INT 1
42464: NEG
42465: PUSH
42466: LD_INT 2
42468: NEG
42469: PUSH
42470: EMPTY
42471: LIST
42472: LIST
42473: PUSH
42474: LD_INT 0
42476: PUSH
42477: LD_INT 2
42479: NEG
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: PUSH
42485: LD_INT 1
42487: PUSH
42488: LD_INT 1
42490: NEG
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: PUSH
42496: LD_INT 2
42498: PUSH
42499: LD_INT 0
42501: PUSH
42502: EMPTY
42503: LIST
42504: LIST
42505: PUSH
42506: LD_INT 2
42508: PUSH
42509: LD_INT 1
42511: PUSH
42512: EMPTY
42513: LIST
42514: LIST
42515: PUSH
42516: LD_INT 2
42518: PUSH
42519: LD_INT 2
42521: PUSH
42522: EMPTY
42523: LIST
42524: LIST
42525: PUSH
42526: LD_INT 1
42528: PUSH
42529: LD_INT 2
42531: PUSH
42532: EMPTY
42533: LIST
42534: LIST
42535: PUSH
42536: LD_INT 1
42538: NEG
42539: PUSH
42540: LD_INT 1
42542: PUSH
42543: EMPTY
42544: LIST
42545: LIST
42546: PUSH
42547: LD_INT 2
42549: NEG
42550: PUSH
42551: LD_INT 0
42553: PUSH
42554: EMPTY
42555: LIST
42556: LIST
42557: PUSH
42558: LD_INT 2
42560: NEG
42561: PUSH
42562: LD_INT 1
42564: NEG
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: LD_INT 1
42572: NEG
42573: PUSH
42574: LD_INT 3
42576: NEG
42577: PUSH
42578: EMPTY
42579: LIST
42580: LIST
42581: PUSH
42582: LD_INT 1
42584: PUSH
42585: LD_INT 2
42587: NEG
42588: PUSH
42589: EMPTY
42590: LIST
42591: LIST
42592: PUSH
42593: LD_INT 3
42595: PUSH
42596: LD_INT 2
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 2
42605: PUSH
42606: LD_INT 3
42608: PUSH
42609: EMPTY
42610: LIST
42611: LIST
42612: PUSH
42613: LD_INT 2
42615: NEG
42616: PUSH
42617: LD_INT 1
42619: PUSH
42620: EMPTY
42621: LIST
42622: LIST
42623: PUSH
42624: LD_INT 3
42626: NEG
42627: PUSH
42628: LD_INT 1
42630: NEG
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: LIST
42640: LIST
42641: LIST
42642: LIST
42643: LIST
42644: LIST
42645: LIST
42646: LIST
42647: LIST
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: LIST
42657: LIST
42658: LIST
42659: LIST
42660: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42661: LD_ADDR_VAR 0 31
42665: PUSH
42666: LD_INT 0
42668: PUSH
42669: LD_INT 0
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: PUSH
42676: LD_INT 0
42678: PUSH
42679: LD_INT 1
42681: NEG
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 1
42689: PUSH
42690: LD_INT 0
42692: PUSH
42693: EMPTY
42694: LIST
42695: LIST
42696: PUSH
42697: LD_INT 1
42699: PUSH
42700: LD_INT 1
42702: PUSH
42703: EMPTY
42704: LIST
42705: LIST
42706: PUSH
42707: LD_INT 0
42709: PUSH
42710: LD_INT 1
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 1
42719: NEG
42720: PUSH
42721: LD_INT 0
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: LD_INT 1
42730: NEG
42731: PUSH
42732: LD_INT 1
42734: NEG
42735: PUSH
42736: EMPTY
42737: LIST
42738: LIST
42739: PUSH
42740: LD_INT 1
42742: NEG
42743: PUSH
42744: LD_INT 2
42746: NEG
42747: PUSH
42748: EMPTY
42749: LIST
42750: LIST
42751: PUSH
42752: LD_INT 1
42754: PUSH
42755: LD_INT 1
42757: NEG
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 2
42765: PUSH
42766: LD_INT 0
42768: PUSH
42769: EMPTY
42770: LIST
42771: LIST
42772: PUSH
42773: LD_INT 2
42775: PUSH
42776: LD_INT 1
42778: PUSH
42779: EMPTY
42780: LIST
42781: LIST
42782: PUSH
42783: LD_INT 2
42785: PUSH
42786: LD_INT 2
42788: PUSH
42789: EMPTY
42790: LIST
42791: LIST
42792: PUSH
42793: LD_INT 1
42795: PUSH
42796: LD_INT 2
42798: PUSH
42799: EMPTY
42800: LIST
42801: LIST
42802: PUSH
42803: LD_INT 0
42805: PUSH
42806: LD_INT 2
42808: PUSH
42809: EMPTY
42810: LIST
42811: LIST
42812: PUSH
42813: LD_INT 1
42815: NEG
42816: PUSH
42817: LD_INT 1
42819: PUSH
42820: EMPTY
42821: LIST
42822: LIST
42823: PUSH
42824: LD_INT 2
42826: NEG
42827: PUSH
42828: LD_INT 1
42830: NEG
42831: PUSH
42832: EMPTY
42833: LIST
42834: LIST
42835: PUSH
42836: LD_INT 2
42838: NEG
42839: PUSH
42840: LD_INT 2
42842: NEG
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 2
42850: NEG
42851: PUSH
42852: LD_INT 3
42854: NEG
42855: PUSH
42856: EMPTY
42857: LIST
42858: LIST
42859: PUSH
42860: LD_INT 2
42862: PUSH
42863: LD_INT 1
42865: NEG
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: LD_INT 3
42873: PUSH
42874: LD_INT 1
42876: PUSH
42877: EMPTY
42878: LIST
42879: LIST
42880: PUSH
42881: LD_INT 1
42883: PUSH
42884: LD_INT 3
42886: PUSH
42887: EMPTY
42888: LIST
42889: LIST
42890: PUSH
42891: LD_INT 1
42893: NEG
42894: PUSH
42895: LD_INT 2
42897: PUSH
42898: EMPTY
42899: LIST
42900: LIST
42901: PUSH
42902: LD_INT 3
42904: NEG
42905: PUSH
42906: LD_INT 2
42908: NEG
42909: PUSH
42910: EMPTY
42911: LIST
42912: LIST
42913: PUSH
42914: EMPTY
42915: LIST
42916: LIST
42917: LIST
42918: LIST
42919: LIST
42920: LIST
42921: LIST
42922: LIST
42923: LIST
42924: LIST
42925: LIST
42926: LIST
42927: LIST
42928: LIST
42929: LIST
42930: LIST
42931: LIST
42932: LIST
42933: LIST
42934: LIST
42935: LIST
42936: LIST
42937: LIST
42938: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42939: LD_ADDR_VAR 0 32
42943: PUSH
42944: LD_INT 0
42946: PUSH
42947: LD_INT 0
42949: PUSH
42950: EMPTY
42951: LIST
42952: LIST
42953: PUSH
42954: LD_INT 0
42956: PUSH
42957: LD_INT 1
42959: NEG
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: LD_INT 1
42967: PUSH
42968: LD_INT 0
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 1
42977: PUSH
42978: LD_INT 1
42980: PUSH
42981: EMPTY
42982: LIST
42983: LIST
42984: PUSH
42985: LD_INT 0
42987: PUSH
42988: LD_INT 1
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: PUSH
42995: LD_INT 1
42997: NEG
42998: PUSH
42999: LD_INT 0
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 1
43008: NEG
43009: PUSH
43010: LD_INT 1
43012: NEG
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 1
43020: NEG
43021: PUSH
43022: LD_INT 2
43024: NEG
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: LD_INT 0
43032: PUSH
43033: LD_INT 2
43035: NEG
43036: PUSH
43037: EMPTY
43038: LIST
43039: LIST
43040: PUSH
43041: LD_INT 1
43043: PUSH
43044: LD_INT 1
43046: NEG
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 2
43054: PUSH
43055: LD_INT 1
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 2
43064: PUSH
43065: LD_INT 2
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 1
43074: PUSH
43075: LD_INT 2
43077: PUSH
43078: EMPTY
43079: LIST
43080: LIST
43081: PUSH
43082: LD_INT 0
43084: PUSH
43085: LD_INT 2
43087: PUSH
43088: EMPTY
43089: LIST
43090: LIST
43091: PUSH
43092: LD_INT 1
43094: NEG
43095: PUSH
43096: LD_INT 1
43098: PUSH
43099: EMPTY
43100: LIST
43101: LIST
43102: PUSH
43103: LD_INT 2
43105: NEG
43106: PUSH
43107: LD_INT 0
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: PUSH
43114: LD_INT 2
43116: NEG
43117: PUSH
43118: LD_INT 1
43120: NEG
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 1
43128: NEG
43129: PUSH
43130: LD_INT 3
43132: NEG
43133: PUSH
43134: EMPTY
43135: LIST
43136: LIST
43137: PUSH
43138: LD_INT 1
43140: PUSH
43141: LD_INT 2
43143: NEG
43144: PUSH
43145: EMPTY
43146: LIST
43147: LIST
43148: PUSH
43149: LD_INT 3
43151: PUSH
43152: LD_INT 2
43154: PUSH
43155: EMPTY
43156: LIST
43157: LIST
43158: PUSH
43159: LD_INT 2
43161: PUSH
43162: LD_INT 3
43164: PUSH
43165: EMPTY
43166: LIST
43167: LIST
43168: PUSH
43169: LD_INT 2
43171: NEG
43172: PUSH
43173: LD_INT 1
43175: PUSH
43176: EMPTY
43177: LIST
43178: LIST
43179: PUSH
43180: LD_INT 3
43182: NEG
43183: PUSH
43184: LD_INT 1
43186: NEG
43187: PUSH
43188: EMPTY
43189: LIST
43190: LIST
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43217: LD_ADDR_VAR 0 33
43221: PUSH
43222: LD_INT 0
43224: PUSH
43225: LD_INT 0
43227: PUSH
43228: EMPTY
43229: LIST
43230: LIST
43231: PUSH
43232: LD_INT 0
43234: PUSH
43235: LD_INT 1
43237: NEG
43238: PUSH
43239: EMPTY
43240: LIST
43241: LIST
43242: PUSH
43243: LD_INT 1
43245: PUSH
43246: LD_INT 0
43248: PUSH
43249: EMPTY
43250: LIST
43251: LIST
43252: PUSH
43253: LD_INT 1
43255: PUSH
43256: LD_INT 1
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: LD_INT 0
43265: PUSH
43266: LD_INT 1
43268: PUSH
43269: EMPTY
43270: LIST
43271: LIST
43272: PUSH
43273: LD_INT 1
43275: NEG
43276: PUSH
43277: LD_INT 0
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: LD_INT 1
43286: NEG
43287: PUSH
43288: LD_INT 1
43290: NEG
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: PUSH
43296: LD_INT 1
43298: NEG
43299: PUSH
43300: LD_INT 2
43302: NEG
43303: PUSH
43304: EMPTY
43305: LIST
43306: LIST
43307: PUSH
43308: LD_INT 1
43310: PUSH
43311: LD_INT 1
43313: NEG
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 2
43321: PUSH
43322: LD_INT 0
43324: PUSH
43325: EMPTY
43326: LIST
43327: LIST
43328: PUSH
43329: LD_INT 2
43331: PUSH
43332: LD_INT 1
43334: PUSH
43335: EMPTY
43336: LIST
43337: LIST
43338: PUSH
43339: LD_INT 1
43341: PUSH
43342: LD_INT 2
43344: PUSH
43345: EMPTY
43346: LIST
43347: LIST
43348: PUSH
43349: LD_INT 0
43351: PUSH
43352: LD_INT 2
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: LD_INT 1
43361: NEG
43362: PUSH
43363: LD_INT 1
43365: PUSH
43366: EMPTY
43367: LIST
43368: LIST
43369: PUSH
43370: LD_INT 2
43372: NEG
43373: PUSH
43374: LD_INT 0
43376: PUSH
43377: EMPTY
43378: LIST
43379: LIST
43380: PUSH
43381: LD_INT 2
43383: NEG
43384: PUSH
43385: LD_INT 1
43387: NEG
43388: PUSH
43389: EMPTY
43390: LIST
43391: LIST
43392: PUSH
43393: LD_INT 2
43395: NEG
43396: PUSH
43397: LD_INT 2
43399: NEG
43400: PUSH
43401: EMPTY
43402: LIST
43403: LIST
43404: PUSH
43405: LD_INT 2
43407: NEG
43408: PUSH
43409: LD_INT 3
43411: NEG
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 2
43419: PUSH
43420: LD_INT 1
43422: NEG
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: LD_INT 3
43430: PUSH
43431: LD_INT 1
43433: PUSH
43434: EMPTY
43435: LIST
43436: LIST
43437: PUSH
43438: LD_INT 1
43440: PUSH
43441: LD_INT 3
43443: PUSH
43444: EMPTY
43445: LIST
43446: LIST
43447: PUSH
43448: LD_INT 1
43450: NEG
43451: PUSH
43452: LD_INT 2
43454: PUSH
43455: EMPTY
43456: LIST
43457: LIST
43458: PUSH
43459: LD_INT 3
43461: NEG
43462: PUSH
43463: LD_INT 2
43465: NEG
43466: PUSH
43467: EMPTY
43468: LIST
43469: LIST
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: LIST
43475: LIST
43476: LIST
43477: LIST
43478: LIST
43479: LIST
43480: LIST
43481: LIST
43482: LIST
43483: LIST
43484: LIST
43485: LIST
43486: LIST
43487: LIST
43488: LIST
43489: LIST
43490: LIST
43491: LIST
43492: LIST
43493: LIST
43494: LIST
43495: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43496: LD_ADDR_VAR 0 34
43500: PUSH
43501: LD_INT 0
43503: PUSH
43504: LD_INT 0
43506: PUSH
43507: EMPTY
43508: LIST
43509: LIST
43510: PUSH
43511: LD_INT 0
43513: PUSH
43514: LD_INT 1
43516: NEG
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: PUSH
43522: LD_INT 1
43524: PUSH
43525: LD_INT 0
43527: PUSH
43528: EMPTY
43529: LIST
43530: LIST
43531: PUSH
43532: LD_INT 1
43534: PUSH
43535: LD_INT 1
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: LD_INT 0
43544: PUSH
43545: LD_INT 1
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 1
43554: NEG
43555: PUSH
43556: LD_INT 0
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 1
43565: NEG
43566: PUSH
43567: LD_INT 1
43569: NEG
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 1
43577: NEG
43578: PUSH
43579: LD_INT 2
43581: NEG
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 0
43589: PUSH
43590: LD_INT 2
43592: NEG
43593: PUSH
43594: EMPTY
43595: LIST
43596: LIST
43597: PUSH
43598: LD_INT 1
43600: PUSH
43601: LD_INT 1
43603: NEG
43604: PUSH
43605: EMPTY
43606: LIST
43607: LIST
43608: PUSH
43609: LD_INT 2
43611: PUSH
43612: LD_INT 1
43614: PUSH
43615: EMPTY
43616: LIST
43617: LIST
43618: PUSH
43619: LD_INT 2
43621: PUSH
43622: LD_INT 2
43624: PUSH
43625: EMPTY
43626: LIST
43627: LIST
43628: PUSH
43629: LD_INT 1
43631: PUSH
43632: LD_INT 2
43634: PUSH
43635: EMPTY
43636: LIST
43637: LIST
43638: PUSH
43639: LD_INT 1
43641: NEG
43642: PUSH
43643: LD_INT 1
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 2
43652: NEG
43653: PUSH
43654: LD_INT 0
43656: PUSH
43657: EMPTY
43658: LIST
43659: LIST
43660: PUSH
43661: LD_INT 2
43663: NEG
43664: PUSH
43665: LD_INT 1
43667: NEG
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 2
43675: NEG
43676: PUSH
43677: LD_INT 2
43679: NEG
43680: PUSH
43681: EMPTY
43682: LIST
43683: LIST
43684: PUSH
43685: LD_INT 1
43687: NEG
43688: PUSH
43689: LD_INT 3
43691: NEG
43692: PUSH
43693: EMPTY
43694: LIST
43695: LIST
43696: PUSH
43697: LD_INT 1
43699: PUSH
43700: LD_INT 2
43702: NEG
43703: PUSH
43704: EMPTY
43705: LIST
43706: LIST
43707: PUSH
43708: LD_INT 3
43710: PUSH
43711: LD_INT 2
43713: PUSH
43714: EMPTY
43715: LIST
43716: LIST
43717: PUSH
43718: LD_INT 2
43720: PUSH
43721: LD_INT 3
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: LD_INT 2
43730: NEG
43731: PUSH
43732: LD_INT 1
43734: PUSH
43735: EMPTY
43736: LIST
43737: LIST
43738: PUSH
43739: LD_INT 3
43741: NEG
43742: PUSH
43743: LD_INT 1
43745: NEG
43746: PUSH
43747: EMPTY
43748: LIST
43749: LIST
43750: PUSH
43751: EMPTY
43752: LIST
43753: LIST
43754: LIST
43755: LIST
43756: LIST
43757: LIST
43758: LIST
43759: LIST
43760: LIST
43761: LIST
43762: LIST
43763: LIST
43764: LIST
43765: LIST
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: LIST
43772: LIST
43773: LIST
43774: LIST
43775: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43776: LD_ADDR_VAR 0 35
43780: PUSH
43781: LD_INT 0
43783: PUSH
43784: LD_INT 0
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: LD_INT 0
43793: PUSH
43794: LD_INT 1
43796: NEG
43797: PUSH
43798: EMPTY
43799: LIST
43800: LIST
43801: PUSH
43802: LD_INT 1
43804: PUSH
43805: LD_INT 0
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PUSH
43812: LD_INT 1
43814: PUSH
43815: LD_INT 1
43817: PUSH
43818: EMPTY
43819: LIST
43820: LIST
43821: PUSH
43822: LD_INT 0
43824: PUSH
43825: LD_INT 1
43827: PUSH
43828: EMPTY
43829: LIST
43830: LIST
43831: PUSH
43832: LD_INT 1
43834: NEG
43835: PUSH
43836: LD_INT 0
43838: PUSH
43839: EMPTY
43840: LIST
43841: LIST
43842: PUSH
43843: LD_INT 1
43845: NEG
43846: PUSH
43847: LD_INT 1
43849: NEG
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 2
43857: PUSH
43858: LD_INT 1
43860: PUSH
43861: EMPTY
43862: LIST
43863: LIST
43864: PUSH
43865: LD_INT 2
43867: NEG
43868: PUSH
43869: LD_INT 1
43871: NEG
43872: PUSH
43873: EMPTY
43874: LIST
43875: LIST
43876: PUSH
43877: EMPTY
43878: LIST
43879: LIST
43880: LIST
43881: LIST
43882: LIST
43883: LIST
43884: LIST
43885: LIST
43886: LIST
43887: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43888: LD_ADDR_VAR 0 36
43892: PUSH
43893: LD_INT 0
43895: PUSH
43896: LD_INT 0
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 0
43905: PUSH
43906: LD_INT 1
43908: NEG
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 1
43916: PUSH
43917: LD_INT 0
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 1
43926: PUSH
43927: LD_INT 1
43929: PUSH
43930: EMPTY
43931: LIST
43932: LIST
43933: PUSH
43934: LD_INT 0
43936: PUSH
43937: LD_INT 1
43939: PUSH
43940: EMPTY
43941: LIST
43942: LIST
43943: PUSH
43944: LD_INT 1
43946: NEG
43947: PUSH
43948: LD_INT 0
43950: PUSH
43951: EMPTY
43952: LIST
43953: LIST
43954: PUSH
43955: LD_INT 1
43957: NEG
43958: PUSH
43959: LD_INT 1
43961: NEG
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 1
43969: NEG
43970: PUSH
43971: LD_INT 2
43973: NEG
43974: PUSH
43975: EMPTY
43976: LIST
43977: LIST
43978: PUSH
43979: LD_INT 1
43981: PUSH
43982: LD_INT 2
43984: PUSH
43985: EMPTY
43986: LIST
43987: LIST
43988: PUSH
43989: EMPTY
43990: LIST
43991: LIST
43992: LIST
43993: LIST
43994: LIST
43995: LIST
43996: LIST
43997: LIST
43998: LIST
43999: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44000: LD_ADDR_VAR 0 37
44004: PUSH
44005: LD_INT 0
44007: PUSH
44008: LD_INT 0
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 0
44017: PUSH
44018: LD_INT 1
44020: NEG
44021: PUSH
44022: EMPTY
44023: LIST
44024: LIST
44025: PUSH
44026: LD_INT 1
44028: PUSH
44029: LD_INT 0
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 1
44038: PUSH
44039: LD_INT 1
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 0
44048: PUSH
44049: LD_INT 1
44051: PUSH
44052: EMPTY
44053: LIST
44054: LIST
44055: PUSH
44056: LD_INT 1
44058: NEG
44059: PUSH
44060: LD_INT 0
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 1
44069: NEG
44070: PUSH
44071: LD_INT 1
44073: NEG
44074: PUSH
44075: EMPTY
44076: LIST
44077: LIST
44078: PUSH
44079: LD_INT 1
44081: PUSH
44082: LD_INT 1
44084: NEG
44085: PUSH
44086: EMPTY
44087: LIST
44088: LIST
44089: PUSH
44090: LD_INT 1
44092: NEG
44093: PUSH
44094: LD_INT 1
44096: PUSH
44097: EMPTY
44098: LIST
44099: LIST
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: LIST
44105: LIST
44106: LIST
44107: LIST
44108: LIST
44109: LIST
44110: LIST
44111: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
44112: LD_ADDR_VAR 0 38
44116: PUSH
44117: LD_INT 0
44119: PUSH
44120: LD_INT 0
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 0
44129: PUSH
44130: LD_INT 1
44132: NEG
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 1
44140: PUSH
44141: LD_INT 0
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 1
44150: PUSH
44151: LD_INT 1
44153: PUSH
44154: EMPTY
44155: LIST
44156: LIST
44157: PUSH
44158: LD_INT 0
44160: PUSH
44161: LD_INT 1
44163: PUSH
44164: EMPTY
44165: LIST
44166: LIST
44167: PUSH
44168: LD_INT 1
44170: NEG
44171: PUSH
44172: LD_INT 0
44174: PUSH
44175: EMPTY
44176: LIST
44177: LIST
44178: PUSH
44179: LD_INT 1
44181: NEG
44182: PUSH
44183: LD_INT 1
44185: NEG
44186: PUSH
44187: EMPTY
44188: LIST
44189: LIST
44190: PUSH
44191: LD_INT 2
44193: PUSH
44194: LD_INT 1
44196: PUSH
44197: EMPTY
44198: LIST
44199: LIST
44200: PUSH
44201: LD_INT 2
44203: NEG
44204: PUSH
44205: LD_INT 1
44207: NEG
44208: PUSH
44209: EMPTY
44210: LIST
44211: LIST
44212: PUSH
44213: EMPTY
44214: LIST
44215: LIST
44216: LIST
44217: LIST
44218: LIST
44219: LIST
44220: LIST
44221: LIST
44222: LIST
44223: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44224: LD_ADDR_VAR 0 39
44228: PUSH
44229: LD_INT 0
44231: PUSH
44232: LD_INT 0
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: LD_INT 0
44241: PUSH
44242: LD_INT 1
44244: NEG
44245: PUSH
44246: EMPTY
44247: LIST
44248: LIST
44249: PUSH
44250: LD_INT 1
44252: PUSH
44253: LD_INT 0
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 1
44262: PUSH
44263: LD_INT 1
44265: PUSH
44266: EMPTY
44267: LIST
44268: LIST
44269: PUSH
44270: LD_INT 0
44272: PUSH
44273: LD_INT 1
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 1
44282: NEG
44283: PUSH
44284: LD_INT 0
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 1
44293: NEG
44294: PUSH
44295: LD_INT 1
44297: NEG
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 1
44305: NEG
44306: PUSH
44307: LD_INT 2
44309: NEG
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 1
44317: PUSH
44318: LD_INT 2
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44336: LD_ADDR_VAR 0 40
44340: PUSH
44341: LD_INT 0
44343: PUSH
44344: LD_INT 0
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 0
44353: PUSH
44354: LD_INT 1
44356: NEG
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 1
44364: PUSH
44365: LD_INT 0
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 1
44374: PUSH
44375: LD_INT 1
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 0
44384: PUSH
44385: LD_INT 1
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 1
44394: NEG
44395: PUSH
44396: LD_INT 0
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 1
44405: NEG
44406: PUSH
44407: LD_INT 1
44409: NEG
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: LD_INT 1
44417: PUSH
44418: LD_INT 1
44420: NEG
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 1
44428: NEG
44429: PUSH
44430: LD_INT 1
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: EMPTY
44438: LIST
44439: LIST
44440: LIST
44441: LIST
44442: LIST
44443: LIST
44444: LIST
44445: LIST
44446: LIST
44447: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44448: LD_ADDR_VAR 0 41
44452: PUSH
44453: LD_INT 0
44455: PUSH
44456: LD_INT 0
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 0
44465: PUSH
44466: LD_INT 1
44468: NEG
44469: PUSH
44470: EMPTY
44471: LIST
44472: LIST
44473: PUSH
44474: LD_INT 1
44476: PUSH
44477: LD_INT 0
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: LD_INT 1
44486: PUSH
44487: LD_INT 1
44489: PUSH
44490: EMPTY
44491: LIST
44492: LIST
44493: PUSH
44494: LD_INT 0
44496: PUSH
44497: LD_INT 1
44499: PUSH
44500: EMPTY
44501: LIST
44502: LIST
44503: PUSH
44504: LD_INT 1
44506: NEG
44507: PUSH
44508: LD_INT 0
44510: PUSH
44511: EMPTY
44512: LIST
44513: LIST
44514: PUSH
44515: LD_INT 1
44517: NEG
44518: PUSH
44519: LD_INT 1
44521: NEG
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 1
44529: NEG
44530: PUSH
44531: LD_INT 2
44533: NEG
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 1
44541: PUSH
44542: LD_INT 1
44544: NEG
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 2
44552: PUSH
44553: LD_INT 0
44555: PUSH
44556: EMPTY
44557: LIST
44558: LIST
44559: PUSH
44560: LD_INT 2
44562: PUSH
44563: LD_INT 1
44565: PUSH
44566: EMPTY
44567: LIST
44568: LIST
44569: PUSH
44570: LD_INT 2
44572: PUSH
44573: LD_INT 2
44575: PUSH
44576: EMPTY
44577: LIST
44578: LIST
44579: PUSH
44580: LD_INT 1
44582: PUSH
44583: LD_INT 2
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: PUSH
44590: LD_INT 1
44592: NEG
44593: PUSH
44594: LD_INT 1
44596: PUSH
44597: EMPTY
44598: LIST
44599: LIST
44600: PUSH
44601: LD_INT 2
44603: NEG
44604: PUSH
44605: LD_INT 0
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 2
44614: NEG
44615: PUSH
44616: LD_INT 1
44618: NEG
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: LD_INT 2
44626: NEG
44627: PUSH
44628: LD_INT 2
44630: NEG
44631: PUSH
44632: EMPTY
44633: LIST
44634: LIST
44635: PUSH
44636: LD_INT 2
44638: NEG
44639: PUSH
44640: LD_INT 3
44642: NEG
44643: PUSH
44644: EMPTY
44645: LIST
44646: LIST
44647: PUSH
44648: LD_INT 2
44650: PUSH
44651: LD_INT 1
44653: NEG
44654: PUSH
44655: EMPTY
44656: LIST
44657: LIST
44658: PUSH
44659: LD_INT 3
44661: PUSH
44662: LD_INT 0
44664: PUSH
44665: EMPTY
44666: LIST
44667: LIST
44668: PUSH
44669: LD_INT 3
44671: PUSH
44672: LD_INT 1
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 3
44681: PUSH
44682: LD_INT 2
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 3
44691: PUSH
44692: LD_INT 3
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 2
44701: PUSH
44702: LD_INT 3
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: LD_INT 2
44711: NEG
44712: PUSH
44713: LD_INT 1
44715: PUSH
44716: EMPTY
44717: LIST
44718: LIST
44719: PUSH
44720: LD_INT 3
44722: NEG
44723: PUSH
44724: LD_INT 0
44726: PUSH
44727: EMPTY
44728: LIST
44729: LIST
44730: PUSH
44731: LD_INT 3
44733: NEG
44734: PUSH
44735: LD_INT 1
44737: NEG
44738: PUSH
44739: EMPTY
44740: LIST
44741: LIST
44742: PUSH
44743: LD_INT 3
44745: NEG
44746: PUSH
44747: LD_INT 2
44749: NEG
44750: PUSH
44751: EMPTY
44752: LIST
44753: LIST
44754: PUSH
44755: LD_INT 3
44757: NEG
44758: PUSH
44759: LD_INT 3
44761: NEG
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: EMPTY
44768: LIST
44769: LIST
44770: LIST
44771: LIST
44772: LIST
44773: LIST
44774: LIST
44775: LIST
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: LIST
44796: LIST
44797: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44798: LD_ADDR_VAR 0 42
44802: PUSH
44803: LD_INT 0
44805: PUSH
44806: LD_INT 0
44808: PUSH
44809: EMPTY
44810: LIST
44811: LIST
44812: PUSH
44813: LD_INT 0
44815: PUSH
44816: LD_INT 1
44818: NEG
44819: PUSH
44820: EMPTY
44821: LIST
44822: LIST
44823: PUSH
44824: LD_INT 1
44826: PUSH
44827: LD_INT 0
44829: PUSH
44830: EMPTY
44831: LIST
44832: LIST
44833: PUSH
44834: LD_INT 1
44836: PUSH
44837: LD_INT 1
44839: PUSH
44840: EMPTY
44841: LIST
44842: LIST
44843: PUSH
44844: LD_INT 0
44846: PUSH
44847: LD_INT 1
44849: PUSH
44850: EMPTY
44851: LIST
44852: LIST
44853: PUSH
44854: LD_INT 1
44856: NEG
44857: PUSH
44858: LD_INT 0
44860: PUSH
44861: EMPTY
44862: LIST
44863: LIST
44864: PUSH
44865: LD_INT 1
44867: NEG
44868: PUSH
44869: LD_INT 1
44871: NEG
44872: PUSH
44873: EMPTY
44874: LIST
44875: LIST
44876: PUSH
44877: LD_INT 1
44879: NEG
44880: PUSH
44881: LD_INT 2
44883: NEG
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 0
44891: PUSH
44892: LD_INT 2
44894: NEG
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 1
44902: PUSH
44903: LD_INT 1
44905: NEG
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 2
44913: PUSH
44914: LD_INT 1
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: PUSH
44921: LD_INT 2
44923: PUSH
44924: LD_INT 2
44926: PUSH
44927: EMPTY
44928: LIST
44929: LIST
44930: PUSH
44931: LD_INT 1
44933: PUSH
44934: LD_INT 2
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 0
44943: PUSH
44944: LD_INT 2
44946: PUSH
44947: EMPTY
44948: LIST
44949: LIST
44950: PUSH
44951: LD_INT 1
44953: NEG
44954: PUSH
44955: LD_INT 1
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 2
44964: NEG
44965: PUSH
44966: LD_INT 1
44968: NEG
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: LD_INT 2
44976: NEG
44977: PUSH
44978: LD_INT 2
44980: NEG
44981: PUSH
44982: EMPTY
44983: LIST
44984: LIST
44985: PUSH
44986: LD_INT 2
44988: NEG
44989: PUSH
44990: LD_INT 3
44992: NEG
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: PUSH
44998: LD_INT 1
45000: NEG
45001: PUSH
45002: LD_INT 3
45004: NEG
45005: PUSH
45006: EMPTY
45007: LIST
45008: LIST
45009: PUSH
45010: LD_INT 0
45012: PUSH
45013: LD_INT 3
45015: NEG
45016: PUSH
45017: EMPTY
45018: LIST
45019: LIST
45020: PUSH
45021: LD_INT 1
45023: PUSH
45024: LD_INT 2
45026: NEG
45027: PUSH
45028: EMPTY
45029: LIST
45030: LIST
45031: PUSH
45032: LD_INT 3
45034: PUSH
45035: LD_INT 2
45037: PUSH
45038: EMPTY
45039: LIST
45040: LIST
45041: PUSH
45042: LD_INT 3
45044: PUSH
45045: LD_INT 3
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 2
45054: PUSH
45055: LD_INT 3
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 1
45064: PUSH
45065: LD_INT 3
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 0
45074: PUSH
45075: LD_INT 3
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 1
45084: NEG
45085: PUSH
45086: LD_INT 2
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 3
45095: NEG
45096: PUSH
45097: LD_INT 2
45099: NEG
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 3
45107: NEG
45108: PUSH
45109: LD_INT 3
45111: NEG
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: EMPTY
45118: LIST
45119: LIST
45120: LIST
45121: LIST
45122: LIST
45123: LIST
45124: LIST
45125: LIST
45126: LIST
45127: LIST
45128: LIST
45129: LIST
45130: LIST
45131: LIST
45132: LIST
45133: LIST
45134: LIST
45135: LIST
45136: LIST
45137: LIST
45138: LIST
45139: LIST
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: LIST
45147: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45148: LD_ADDR_VAR 0 43
45152: PUSH
45153: LD_INT 0
45155: PUSH
45156: LD_INT 0
45158: PUSH
45159: EMPTY
45160: LIST
45161: LIST
45162: PUSH
45163: LD_INT 0
45165: PUSH
45166: LD_INT 1
45168: NEG
45169: PUSH
45170: EMPTY
45171: LIST
45172: LIST
45173: PUSH
45174: LD_INT 1
45176: PUSH
45177: LD_INT 0
45179: PUSH
45180: EMPTY
45181: LIST
45182: LIST
45183: PUSH
45184: LD_INT 1
45186: PUSH
45187: LD_INT 1
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 0
45196: PUSH
45197: LD_INT 1
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 1
45206: NEG
45207: PUSH
45208: LD_INT 0
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 1
45217: NEG
45218: PUSH
45219: LD_INT 1
45221: NEG
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 1
45229: NEG
45230: PUSH
45231: LD_INT 2
45233: NEG
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: PUSH
45239: LD_INT 0
45241: PUSH
45242: LD_INT 2
45244: NEG
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 1
45252: PUSH
45253: LD_INT 1
45255: NEG
45256: PUSH
45257: EMPTY
45258: LIST
45259: LIST
45260: PUSH
45261: LD_INT 2
45263: PUSH
45264: LD_INT 0
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 2
45273: PUSH
45274: LD_INT 1
45276: PUSH
45277: EMPTY
45278: LIST
45279: LIST
45280: PUSH
45281: LD_INT 1
45283: PUSH
45284: LD_INT 2
45286: PUSH
45287: EMPTY
45288: LIST
45289: LIST
45290: PUSH
45291: LD_INT 0
45293: PUSH
45294: LD_INT 2
45296: PUSH
45297: EMPTY
45298: LIST
45299: LIST
45300: PUSH
45301: LD_INT 1
45303: NEG
45304: PUSH
45305: LD_INT 1
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 2
45314: NEG
45315: PUSH
45316: LD_INT 0
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 2
45325: NEG
45326: PUSH
45327: LD_INT 1
45329: NEG
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 1
45337: NEG
45338: PUSH
45339: LD_INT 3
45341: NEG
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 0
45349: PUSH
45350: LD_INT 3
45352: NEG
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 1
45360: PUSH
45361: LD_INT 2
45363: NEG
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: LD_INT 2
45371: PUSH
45372: LD_INT 1
45374: NEG
45375: PUSH
45376: EMPTY
45377: LIST
45378: LIST
45379: PUSH
45380: LD_INT 3
45382: PUSH
45383: LD_INT 0
45385: PUSH
45386: EMPTY
45387: LIST
45388: LIST
45389: PUSH
45390: LD_INT 3
45392: PUSH
45393: LD_INT 1
45395: PUSH
45396: EMPTY
45397: LIST
45398: LIST
45399: PUSH
45400: LD_INT 1
45402: PUSH
45403: LD_INT 3
45405: PUSH
45406: EMPTY
45407: LIST
45408: LIST
45409: PUSH
45410: LD_INT 0
45412: PUSH
45413: LD_INT 3
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 1
45422: NEG
45423: PUSH
45424: LD_INT 2
45426: PUSH
45427: EMPTY
45428: LIST
45429: LIST
45430: PUSH
45431: LD_INT 2
45433: NEG
45434: PUSH
45435: LD_INT 1
45437: PUSH
45438: EMPTY
45439: LIST
45440: LIST
45441: PUSH
45442: LD_INT 3
45444: NEG
45445: PUSH
45446: LD_INT 0
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 3
45455: NEG
45456: PUSH
45457: LD_INT 1
45459: NEG
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: LIST
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: LIST
45486: LIST
45487: LIST
45488: LIST
45489: LIST
45490: LIST
45491: LIST
45492: LIST
45493: LIST
45494: LIST
45495: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45496: LD_ADDR_VAR 0 44
45500: PUSH
45501: LD_INT 0
45503: PUSH
45504: LD_INT 0
45506: PUSH
45507: EMPTY
45508: LIST
45509: LIST
45510: PUSH
45511: LD_INT 0
45513: PUSH
45514: LD_INT 1
45516: NEG
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 1
45524: PUSH
45525: LD_INT 0
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 1
45534: PUSH
45535: LD_INT 1
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 0
45544: PUSH
45545: LD_INT 1
45547: PUSH
45548: EMPTY
45549: LIST
45550: LIST
45551: PUSH
45552: LD_INT 1
45554: NEG
45555: PUSH
45556: LD_INT 0
45558: PUSH
45559: EMPTY
45560: LIST
45561: LIST
45562: PUSH
45563: LD_INT 1
45565: NEG
45566: PUSH
45567: LD_INT 1
45569: NEG
45570: PUSH
45571: EMPTY
45572: LIST
45573: LIST
45574: PUSH
45575: LD_INT 1
45577: NEG
45578: PUSH
45579: LD_INT 2
45581: NEG
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: LD_INT 1
45589: PUSH
45590: LD_INT 1
45592: NEG
45593: PUSH
45594: EMPTY
45595: LIST
45596: LIST
45597: PUSH
45598: LD_INT 2
45600: PUSH
45601: LD_INT 0
45603: PUSH
45604: EMPTY
45605: LIST
45606: LIST
45607: PUSH
45608: LD_INT 2
45610: PUSH
45611: LD_INT 1
45613: PUSH
45614: EMPTY
45615: LIST
45616: LIST
45617: PUSH
45618: LD_INT 2
45620: PUSH
45621: LD_INT 2
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 1
45630: PUSH
45631: LD_INT 2
45633: PUSH
45634: EMPTY
45635: LIST
45636: LIST
45637: PUSH
45638: LD_INT 1
45640: NEG
45641: PUSH
45642: LD_INT 1
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 2
45651: NEG
45652: PUSH
45653: LD_INT 0
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 2
45662: NEG
45663: PUSH
45664: LD_INT 1
45666: NEG
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: LD_INT 2
45674: NEG
45675: PUSH
45676: LD_INT 2
45678: NEG
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 2
45686: NEG
45687: PUSH
45688: LD_INT 3
45690: NEG
45691: PUSH
45692: EMPTY
45693: LIST
45694: LIST
45695: PUSH
45696: LD_INT 2
45698: PUSH
45699: LD_INT 1
45701: NEG
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 3
45709: PUSH
45710: LD_INT 0
45712: PUSH
45713: EMPTY
45714: LIST
45715: LIST
45716: PUSH
45717: LD_INT 3
45719: PUSH
45720: LD_INT 1
45722: PUSH
45723: EMPTY
45724: LIST
45725: LIST
45726: PUSH
45727: LD_INT 3
45729: PUSH
45730: LD_INT 2
45732: PUSH
45733: EMPTY
45734: LIST
45735: LIST
45736: PUSH
45737: LD_INT 3
45739: PUSH
45740: LD_INT 3
45742: PUSH
45743: EMPTY
45744: LIST
45745: LIST
45746: PUSH
45747: LD_INT 2
45749: PUSH
45750: LD_INT 3
45752: PUSH
45753: EMPTY
45754: LIST
45755: LIST
45756: PUSH
45757: LD_INT 2
45759: NEG
45760: PUSH
45761: LD_INT 1
45763: PUSH
45764: EMPTY
45765: LIST
45766: LIST
45767: PUSH
45768: LD_INT 3
45770: NEG
45771: PUSH
45772: LD_INT 0
45774: PUSH
45775: EMPTY
45776: LIST
45777: LIST
45778: PUSH
45779: LD_INT 3
45781: NEG
45782: PUSH
45783: LD_INT 1
45785: NEG
45786: PUSH
45787: EMPTY
45788: LIST
45789: LIST
45790: PUSH
45791: LD_INT 3
45793: NEG
45794: PUSH
45795: LD_INT 2
45797: NEG
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 3
45805: NEG
45806: PUSH
45807: LD_INT 3
45809: NEG
45810: PUSH
45811: EMPTY
45812: LIST
45813: LIST
45814: PUSH
45815: EMPTY
45816: LIST
45817: LIST
45818: LIST
45819: LIST
45820: LIST
45821: LIST
45822: LIST
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: LIST
45843: LIST
45844: LIST
45845: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45846: LD_ADDR_VAR 0 45
45850: PUSH
45851: LD_INT 0
45853: PUSH
45854: LD_INT 0
45856: PUSH
45857: EMPTY
45858: LIST
45859: LIST
45860: PUSH
45861: LD_INT 0
45863: PUSH
45864: LD_INT 1
45866: NEG
45867: PUSH
45868: EMPTY
45869: LIST
45870: LIST
45871: PUSH
45872: LD_INT 1
45874: PUSH
45875: LD_INT 0
45877: PUSH
45878: EMPTY
45879: LIST
45880: LIST
45881: PUSH
45882: LD_INT 1
45884: PUSH
45885: LD_INT 1
45887: PUSH
45888: EMPTY
45889: LIST
45890: LIST
45891: PUSH
45892: LD_INT 0
45894: PUSH
45895: LD_INT 1
45897: PUSH
45898: EMPTY
45899: LIST
45900: LIST
45901: PUSH
45902: LD_INT 1
45904: NEG
45905: PUSH
45906: LD_INT 0
45908: PUSH
45909: EMPTY
45910: LIST
45911: LIST
45912: PUSH
45913: LD_INT 1
45915: NEG
45916: PUSH
45917: LD_INT 1
45919: NEG
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: LD_INT 1
45927: NEG
45928: PUSH
45929: LD_INT 2
45931: NEG
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 0
45939: PUSH
45940: LD_INT 2
45942: NEG
45943: PUSH
45944: EMPTY
45945: LIST
45946: LIST
45947: PUSH
45948: LD_INT 1
45950: PUSH
45951: LD_INT 1
45953: NEG
45954: PUSH
45955: EMPTY
45956: LIST
45957: LIST
45958: PUSH
45959: LD_INT 2
45961: PUSH
45962: LD_INT 1
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 2
45971: PUSH
45972: LD_INT 2
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 1
45981: PUSH
45982: LD_INT 2
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 0
45991: PUSH
45992: LD_INT 2
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 1
46001: NEG
46002: PUSH
46003: LD_INT 1
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 2
46012: NEG
46013: PUSH
46014: LD_INT 1
46016: NEG
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: LD_INT 2
46024: NEG
46025: PUSH
46026: LD_INT 2
46028: NEG
46029: PUSH
46030: EMPTY
46031: LIST
46032: LIST
46033: PUSH
46034: LD_INT 2
46036: NEG
46037: PUSH
46038: LD_INT 3
46040: NEG
46041: PUSH
46042: EMPTY
46043: LIST
46044: LIST
46045: PUSH
46046: LD_INT 1
46048: NEG
46049: PUSH
46050: LD_INT 3
46052: NEG
46053: PUSH
46054: EMPTY
46055: LIST
46056: LIST
46057: PUSH
46058: LD_INT 0
46060: PUSH
46061: LD_INT 3
46063: NEG
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: LD_INT 1
46071: PUSH
46072: LD_INT 2
46074: NEG
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 3
46082: PUSH
46083: LD_INT 2
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 3
46092: PUSH
46093: LD_INT 3
46095: PUSH
46096: EMPTY
46097: LIST
46098: LIST
46099: PUSH
46100: LD_INT 2
46102: PUSH
46103: LD_INT 3
46105: PUSH
46106: EMPTY
46107: LIST
46108: LIST
46109: PUSH
46110: LD_INT 1
46112: PUSH
46113: LD_INT 3
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 0
46122: PUSH
46123: LD_INT 3
46125: PUSH
46126: EMPTY
46127: LIST
46128: LIST
46129: PUSH
46130: LD_INT 1
46132: NEG
46133: PUSH
46134: LD_INT 2
46136: PUSH
46137: EMPTY
46138: LIST
46139: LIST
46140: PUSH
46141: LD_INT 3
46143: NEG
46144: PUSH
46145: LD_INT 2
46147: NEG
46148: PUSH
46149: EMPTY
46150: LIST
46151: LIST
46152: PUSH
46153: LD_INT 3
46155: NEG
46156: PUSH
46157: LD_INT 3
46159: NEG
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: EMPTY
46166: LIST
46167: LIST
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: LIST
46181: LIST
46182: LIST
46183: LIST
46184: LIST
46185: LIST
46186: LIST
46187: LIST
46188: LIST
46189: LIST
46190: LIST
46191: LIST
46192: LIST
46193: LIST
46194: LIST
46195: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46196: LD_ADDR_VAR 0 46
46200: PUSH
46201: LD_INT 0
46203: PUSH
46204: LD_INT 0
46206: PUSH
46207: EMPTY
46208: LIST
46209: LIST
46210: PUSH
46211: LD_INT 0
46213: PUSH
46214: LD_INT 1
46216: NEG
46217: PUSH
46218: EMPTY
46219: LIST
46220: LIST
46221: PUSH
46222: LD_INT 1
46224: PUSH
46225: LD_INT 0
46227: PUSH
46228: EMPTY
46229: LIST
46230: LIST
46231: PUSH
46232: LD_INT 1
46234: PUSH
46235: LD_INT 1
46237: PUSH
46238: EMPTY
46239: LIST
46240: LIST
46241: PUSH
46242: LD_INT 0
46244: PUSH
46245: LD_INT 1
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 1
46254: NEG
46255: PUSH
46256: LD_INT 0
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 1
46265: NEG
46266: PUSH
46267: LD_INT 1
46269: NEG
46270: PUSH
46271: EMPTY
46272: LIST
46273: LIST
46274: PUSH
46275: LD_INT 1
46277: NEG
46278: PUSH
46279: LD_INT 2
46281: NEG
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: PUSH
46287: LD_INT 0
46289: PUSH
46290: LD_INT 2
46292: NEG
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 1
46300: PUSH
46301: LD_INT 1
46303: NEG
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 2
46311: PUSH
46312: LD_INT 0
46314: PUSH
46315: EMPTY
46316: LIST
46317: LIST
46318: PUSH
46319: LD_INT 2
46321: PUSH
46322: LD_INT 1
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 1
46331: PUSH
46332: LD_INT 2
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 0
46341: PUSH
46342: LD_INT 2
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 1
46351: NEG
46352: PUSH
46353: LD_INT 1
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 2
46362: NEG
46363: PUSH
46364: LD_INT 0
46366: PUSH
46367: EMPTY
46368: LIST
46369: LIST
46370: PUSH
46371: LD_INT 2
46373: NEG
46374: PUSH
46375: LD_INT 1
46377: NEG
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: PUSH
46383: LD_INT 1
46385: NEG
46386: PUSH
46387: LD_INT 3
46389: NEG
46390: PUSH
46391: EMPTY
46392: LIST
46393: LIST
46394: PUSH
46395: LD_INT 0
46397: PUSH
46398: LD_INT 3
46400: NEG
46401: PUSH
46402: EMPTY
46403: LIST
46404: LIST
46405: PUSH
46406: LD_INT 1
46408: PUSH
46409: LD_INT 2
46411: NEG
46412: PUSH
46413: EMPTY
46414: LIST
46415: LIST
46416: PUSH
46417: LD_INT 2
46419: PUSH
46420: LD_INT 1
46422: NEG
46423: PUSH
46424: EMPTY
46425: LIST
46426: LIST
46427: PUSH
46428: LD_INT 3
46430: PUSH
46431: LD_INT 0
46433: PUSH
46434: EMPTY
46435: LIST
46436: LIST
46437: PUSH
46438: LD_INT 3
46440: PUSH
46441: LD_INT 1
46443: PUSH
46444: EMPTY
46445: LIST
46446: LIST
46447: PUSH
46448: LD_INT 1
46450: PUSH
46451: LD_INT 3
46453: PUSH
46454: EMPTY
46455: LIST
46456: LIST
46457: PUSH
46458: LD_INT 0
46460: PUSH
46461: LD_INT 3
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 1
46470: NEG
46471: PUSH
46472: LD_INT 2
46474: PUSH
46475: EMPTY
46476: LIST
46477: LIST
46478: PUSH
46479: LD_INT 2
46481: NEG
46482: PUSH
46483: LD_INT 1
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: PUSH
46490: LD_INT 3
46492: NEG
46493: PUSH
46494: LD_INT 0
46496: PUSH
46497: EMPTY
46498: LIST
46499: LIST
46500: PUSH
46501: LD_INT 3
46503: NEG
46504: PUSH
46505: LD_INT 1
46507: NEG
46508: PUSH
46509: EMPTY
46510: LIST
46511: LIST
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: LIST
46533: LIST
46534: LIST
46535: LIST
46536: LIST
46537: LIST
46538: LIST
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46544: LD_ADDR_VAR 0 47
46548: PUSH
46549: LD_INT 0
46551: PUSH
46552: LD_INT 0
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 0
46561: PUSH
46562: LD_INT 1
46564: NEG
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 1
46572: PUSH
46573: LD_INT 0
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: PUSH
46580: LD_INT 1
46582: PUSH
46583: LD_INT 1
46585: PUSH
46586: EMPTY
46587: LIST
46588: LIST
46589: PUSH
46590: LD_INT 0
46592: PUSH
46593: LD_INT 1
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 1
46602: NEG
46603: PUSH
46604: LD_INT 0
46606: PUSH
46607: EMPTY
46608: LIST
46609: LIST
46610: PUSH
46611: LD_INT 1
46613: NEG
46614: PUSH
46615: LD_INT 1
46617: NEG
46618: PUSH
46619: EMPTY
46620: LIST
46621: LIST
46622: PUSH
46623: LD_INT 1
46625: NEG
46626: PUSH
46627: LD_INT 2
46629: NEG
46630: PUSH
46631: EMPTY
46632: LIST
46633: LIST
46634: PUSH
46635: LD_INT 0
46637: PUSH
46638: LD_INT 2
46640: NEG
46641: PUSH
46642: EMPTY
46643: LIST
46644: LIST
46645: PUSH
46646: LD_INT 1
46648: PUSH
46649: LD_INT 1
46651: NEG
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 2
46659: NEG
46660: PUSH
46661: LD_INT 1
46663: NEG
46664: PUSH
46665: EMPTY
46666: LIST
46667: LIST
46668: PUSH
46669: LD_INT 2
46671: NEG
46672: PUSH
46673: LD_INT 2
46675: NEG
46676: PUSH
46677: EMPTY
46678: LIST
46679: LIST
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: LIST
46685: LIST
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46695: LD_ADDR_VAR 0 48
46699: PUSH
46700: LD_INT 0
46702: PUSH
46703: LD_INT 0
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 0
46712: PUSH
46713: LD_INT 1
46715: NEG
46716: PUSH
46717: EMPTY
46718: LIST
46719: LIST
46720: PUSH
46721: LD_INT 1
46723: PUSH
46724: LD_INT 0
46726: PUSH
46727: EMPTY
46728: LIST
46729: LIST
46730: PUSH
46731: LD_INT 1
46733: PUSH
46734: LD_INT 1
46736: PUSH
46737: EMPTY
46738: LIST
46739: LIST
46740: PUSH
46741: LD_INT 0
46743: PUSH
46744: LD_INT 1
46746: PUSH
46747: EMPTY
46748: LIST
46749: LIST
46750: PUSH
46751: LD_INT 1
46753: NEG
46754: PUSH
46755: LD_INT 0
46757: PUSH
46758: EMPTY
46759: LIST
46760: LIST
46761: PUSH
46762: LD_INT 1
46764: NEG
46765: PUSH
46766: LD_INT 1
46768: NEG
46769: PUSH
46770: EMPTY
46771: LIST
46772: LIST
46773: PUSH
46774: LD_INT 1
46776: NEG
46777: PUSH
46778: LD_INT 2
46780: NEG
46781: PUSH
46782: EMPTY
46783: LIST
46784: LIST
46785: PUSH
46786: LD_INT 0
46788: PUSH
46789: LD_INT 2
46791: NEG
46792: PUSH
46793: EMPTY
46794: LIST
46795: LIST
46796: PUSH
46797: LD_INT 1
46799: PUSH
46800: LD_INT 1
46802: NEG
46803: PUSH
46804: EMPTY
46805: LIST
46806: LIST
46807: PUSH
46808: LD_INT 2
46810: PUSH
46811: LD_INT 0
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 2
46820: PUSH
46821: LD_INT 1
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46842: LD_ADDR_VAR 0 49
46846: PUSH
46847: LD_INT 0
46849: PUSH
46850: LD_INT 0
46852: PUSH
46853: EMPTY
46854: LIST
46855: LIST
46856: PUSH
46857: LD_INT 0
46859: PUSH
46860: LD_INT 1
46862: NEG
46863: PUSH
46864: EMPTY
46865: LIST
46866: LIST
46867: PUSH
46868: LD_INT 1
46870: PUSH
46871: LD_INT 0
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 1
46880: PUSH
46881: LD_INT 1
46883: PUSH
46884: EMPTY
46885: LIST
46886: LIST
46887: PUSH
46888: LD_INT 0
46890: PUSH
46891: LD_INT 1
46893: PUSH
46894: EMPTY
46895: LIST
46896: LIST
46897: PUSH
46898: LD_INT 1
46900: NEG
46901: PUSH
46902: LD_INT 0
46904: PUSH
46905: EMPTY
46906: LIST
46907: LIST
46908: PUSH
46909: LD_INT 1
46911: NEG
46912: PUSH
46913: LD_INT 1
46915: NEG
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 1
46923: PUSH
46924: LD_INT 1
46926: NEG
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 2
46934: PUSH
46935: LD_INT 0
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 2
46944: PUSH
46945: LD_INT 1
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 2
46954: PUSH
46955: LD_INT 2
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 1
46964: PUSH
46965: LD_INT 2
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: EMPTY
46973: LIST
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46986: LD_ADDR_VAR 0 50
46990: PUSH
46991: LD_INT 0
46993: PUSH
46994: LD_INT 0
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: LD_INT 0
47003: PUSH
47004: LD_INT 1
47006: NEG
47007: PUSH
47008: EMPTY
47009: LIST
47010: LIST
47011: PUSH
47012: LD_INT 1
47014: PUSH
47015: LD_INT 0
47017: PUSH
47018: EMPTY
47019: LIST
47020: LIST
47021: PUSH
47022: LD_INT 1
47024: PUSH
47025: LD_INT 1
47027: PUSH
47028: EMPTY
47029: LIST
47030: LIST
47031: PUSH
47032: LD_INT 0
47034: PUSH
47035: LD_INT 1
47037: PUSH
47038: EMPTY
47039: LIST
47040: LIST
47041: PUSH
47042: LD_INT 1
47044: NEG
47045: PUSH
47046: LD_INT 0
47048: PUSH
47049: EMPTY
47050: LIST
47051: LIST
47052: PUSH
47053: LD_INT 1
47055: NEG
47056: PUSH
47057: LD_INT 1
47059: NEG
47060: PUSH
47061: EMPTY
47062: LIST
47063: LIST
47064: PUSH
47065: LD_INT 2
47067: PUSH
47068: LD_INT 1
47070: PUSH
47071: EMPTY
47072: LIST
47073: LIST
47074: PUSH
47075: LD_INT 2
47077: PUSH
47078: LD_INT 2
47080: PUSH
47081: EMPTY
47082: LIST
47083: LIST
47084: PUSH
47085: LD_INT 1
47087: PUSH
47088: LD_INT 2
47090: PUSH
47091: EMPTY
47092: LIST
47093: LIST
47094: PUSH
47095: LD_INT 0
47097: PUSH
47098: LD_INT 2
47100: PUSH
47101: EMPTY
47102: LIST
47103: LIST
47104: PUSH
47105: LD_INT 1
47107: NEG
47108: PUSH
47109: LD_INT 1
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
47130: LD_ADDR_VAR 0 51
47134: PUSH
47135: LD_INT 0
47137: PUSH
47138: LD_INT 0
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 0
47147: PUSH
47148: LD_INT 1
47150: NEG
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 1
47158: PUSH
47159: LD_INT 0
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 1
47168: PUSH
47169: LD_INT 1
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 0
47178: PUSH
47179: LD_INT 1
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 1
47188: NEG
47189: PUSH
47190: LD_INT 0
47192: PUSH
47193: EMPTY
47194: LIST
47195: LIST
47196: PUSH
47197: LD_INT 1
47199: NEG
47200: PUSH
47201: LD_INT 1
47203: NEG
47204: PUSH
47205: EMPTY
47206: LIST
47207: LIST
47208: PUSH
47209: LD_INT 1
47211: PUSH
47212: LD_INT 2
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 0
47221: PUSH
47222: LD_INT 2
47224: PUSH
47225: EMPTY
47226: LIST
47227: LIST
47228: PUSH
47229: LD_INT 1
47231: NEG
47232: PUSH
47233: LD_INT 1
47235: PUSH
47236: EMPTY
47237: LIST
47238: LIST
47239: PUSH
47240: LD_INT 2
47242: NEG
47243: PUSH
47244: LD_INT 0
47246: PUSH
47247: EMPTY
47248: LIST
47249: LIST
47250: PUSH
47251: LD_INT 2
47253: NEG
47254: PUSH
47255: LD_INT 1
47257: NEG
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: LIST
47267: LIST
47268: LIST
47269: LIST
47270: LIST
47271: LIST
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47277: LD_ADDR_VAR 0 52
47281: PUSH
47282: LD_INT 0
47284: PUSH
47285: LD_INT 0
47287: PUSH
47288: EMPTY
47289: LIST
47290: LIST
47291: PUSH
47292: LD_INT 0
47294: PUSH
47295: LD_INT 1
47297: NEG
47298: PUSH
47299: EMPTY
47300: LIST
47301: LIST
47302: PUSH
47303: LD_INT 1
47305: PUSH
47306: LD_INT 0
47308: PUSH
47309: EMPTY
47310: LIST
47311: LIST
47312: PUSH
47313: LD_INT 1
47315: PUSH
47316: LD_INT 1
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: LD_INT 0
47325: PUSH
47326: LD_INT 1
47328: PUSH
47329: EMPTY
47330: LIST
47331: LIST
47332: PUSH
47333: LD_INT 1
47335: NEG
47336: PUSH
47337: LD_INT 0
47339: PUSH
47340: EMPTY
47341: LIST
47342: LIST
47343: PUSH
47344: LD_INT 1
47346: NEG
47347: PUSH
47348: LD_INT 1
47350: NEG
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 1
47358: NEG
47359: PUSH
47360: LD_INT 2
47362: NEG
47363: PUSH
47364: EMPTY
47365: LIST
47366: LIST
47367: PUSH
47368: LD_INT 1
47370: NEG
47371: PUSH
47372: LD_INT 1
47374: PUSH
47375: EMPTY
47376: LIST
47377: LIST
47378: PUSH
47379: LD_INT 2
47381: NEG
47382: PUSH
47383: LD_INT 0
47385: PUSH
47386: EMPTY
47387: LIST
47388: LIST
47389: PUSH
47390: LD_INT 2
47392: NEG
47393: PUSH
47394: LD_INT 1
47396: NEG
47397: PUSH
47398: EMPTY
47399: LIST
47400: LIST
47401: PUSH
47402: LD_INT 2
47404: NEG
47405: PUSH
47406: LD_INT 2
47408: NEG
47409: PUSH
47410: EMPTY
47411: LIST
47412: LIST
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: LIST
47418: LIST
47419: LIST
47420: LIST
47421: LIST
47422: LIST
47423: LIST
47424: LIST
47425: LIST
47426: LIST
47427: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47428: LD_ADDR_VAR 0 53
47432: PUSH
47433: LD_INT 0
47435: PUSH
47436: LD_INT 0
47438: PUSH
47439: EMPTY
47440: LIST
47441: LIST
47442: PUSH
47443: LD_INT 0
47445: PUSH
47446: LD_INT 1
47448: NEG
47449: PUSH
47450: EMPTY
47451: LIST
47452: LIST
47453: PUSH
47454: LD_INT 1
47456: PUSH
47457: LD_INT 0
47459: PUSH
47460: EMPTY
47461: LIST
47462: LIST
47463: PUSH
47464: LD_INT 1
47466: PUSH
47467: LD_INT 1
47469: PUSH
47470: EMPTY
47471: LIST
47472: LIST
47473: PUSH
47474: LD_INT 0
47476: PUSH
47477: LD_INT 1
47479: PUSH
47480: EMPTY
47481: LIST
47482: LIST
47483: PUSH
47484: LD_INT 1
47486: NEG
47487: PUSH
47488: LD_INT 0
47490: PUSH
47491: EMPTY
47492: LIST
47493: LIST
47494: PUSH
47495: LD_INT 1
47497: NEG
47498: PUSH
47499: LD_INT 1
47501: NEG
47502: PUSH
47503: EMPTY
47504: LIST
47505: LIST
47506: PUSH
47507: LD_INT 1
47509: NEG
47510: PUSH
47511: LD_INT 2
47513: NEG
47514: PUSH
47515: EMPTY
47516: LIST
47517: LIST
47518: PUSH
47519: LD_INT 0
47521: PUSH
47522: LD_INT 2
47524: NEG
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 1
47532: PUSH
47533: LD_INT 1
47535: NEG
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 2
47543: PUSH
47544: LD_INT 0
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 2
47553: PUSH
47554: LD_INT 1
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 2
47563: PUSH
47564: LD_INT 2
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 1
47573: PUSH
47574: LD_INT 2
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 0
47583: PUSH
47584: LD_INT 2
47586: PUSH
47587: EMPTY
47588: LIST
47589: LIST
47590: PUSH
47591: LD_INT 1
47593: NEG
47594: PUSH
47595: LD_INT 1
47597: PUSH
47598: EMPTY
47599: LIST
47600: LIST
47601: PUSH
47602: LD_INT 2
47604: NEG
47605: PUSH
47606: LD_INT 0
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: PUSH
47613: LD_INT 2
47615: NEG
47616: PUSH
47617: LD_INT 1
47619: NEG
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 2
47627: NEG
47628: PUSH
47629: LD_INT 2
47631: NEG
47632: PUSH
47633: EMPTY
47634: LIST
47635: LIST
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: LIST
47641: LIST
47642: LIST
47643: LIST
47644: LIST
47645: LIST
47646: LIST
47647: LIST
47648: LIST
47649: LIST
47650: LIST
47651: LIST
47652: LIST
47653: LIST
47654: LIST
47655: LIST
47656: LIST
47657: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47658: LD_ADDR_VAR 0 54
47662: PUSH
47663: LD_INT 0
47665: PUSH
47666: LD_INT 0
47668: PUSH
47669: EMPTY
47670: LIST
47671: LIST
47672: PUSH
47673: LD_INT 0
47675: PUSH
47676: LD_INT 1
47678: NEG
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 1
47686: PUSH
47687: LD_INT 0
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 1
47696: PUSH
47697: LD_INT 1
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: LD_INT 0
47706: PUSH
47707: LD_INT 1
47709: PUSH
47710: EMPTY
47711: LIST
47712: LIST
47713: PUSH
47714: LD_INT 1
47716: NEG
47717: PUSH
47718: LD_INT 0
47720: PUSH
47721: EMPTY
47722: LIST
47723: LIST
47724: PUSH
47725: LD_INT 1
47727: NEG
47728: PUSH
47729: LD_INT 1
47731: NEG
47732: PUSH
47733: EMPTY
47734: LIST
47735: LIST
47736: PUSH
47737: LD_INT 1
47739: NEG
47740: PUSH
47741: LD_INT 2
47743: NEG
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: PUSH
47749: LD_INT 0
47751: PUSH
47752: LD_INT 2
47754: NEG
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 1
47762: PUSH
47763: LD_INT 1
47765: NEG
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 2
47773: PUSH
47774: LD_INT 0
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 2
47783: PUSH
47784: LD_INT 1
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 2
47793: PUSH
47794: LD_INT 2
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 1
47803: PUSH
47804: LD_INT 2
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 0
47813: PUSH
47814: LD_INT 2
47816: PUSH
47817: EMPTY
47818: LIST
47819: LIST
47820: PUSH
47821: LD_INT 1
47823: NEG
47824: PUSH
47825: LD_INT 1
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: PUSH
47832: LD_INT 2
47834: NEG
47835: PUSH
47836: LD_INT 0
47838: PUSH
47839: EMPTY
47840: LIST
47841: LIST
47842: PUSH
47843: LD_INT 2
47845: NEG
47846: PUSH
47847: LD_INT 1
47849: NEG
47850: PUSH
47851: EMPTY
47852: LIST
47853: LIST
47854: PUSH
47855: LD_INT 2
47857: NEG
47858: PUSH
47859: LD_INT 2
47861: NEG
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: EMPTY
47868: LIST
47869: LIST
47870: LIST
47871: LIST
47872: LIST
47873: LIST
47874: LIST
47875: LIST
47876: LIST
47877: LIST
47878: LIST
47879: LIST
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47888: LD_ADDR_VAR 0 55
47892: PUSH
47893: LD_INT 0
47895: PUSH
47896: LD_INT 0
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 0
47905: PUSH
47906: LD_INT 1
47908: NEG
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 1
47916: PUSH
47917: LD_INT 0
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 1
47926: PUSH
47927: LD_INT 1
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: LD_INT 0
47936: PUSH
47937: LD_INT 1
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 1
47946: NEG
47947: PUSH
47948: LD_INT 0
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 1
47957: NEG
47958: PUSH
47959: LD_INT 1
47961: NEG
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: LD_INT 1
47969: NEG
47970: PUSH
47971: LD_INT 2
47973: NEG
47974: PUSH
47975: EMPTY
47976: LIST
47977: LIST
47978: PUSH
47979: LD_INT 0
47981: PUSH
47982: LD_INT 2
47984: NEG
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 1
47992: PUSH
47993: LD_INT 1
47995: NEG
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 2
48003: PUSH
48004: LD_INT 0
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 2
48013: PUSH
48014: LD_INT 1
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 2
48023: PUSH
48024: LD_INT 2
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 1
48033: PUSH
48034: LD_INT 2
48036: PUSH
48037: EMPTY
48038: LIST
48039: LIST
48040: PUSH
48041: LD_INT 0
48043: PUSH
48044: LD_INT 2
48046: PUSH
48047: EMPTY
48048: LIST
48049: LIST
48050: PUSH
48051: LD_INT 1
48053: NEG
48054: PUSH
48055: LD_INT 1
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 2
48064: NEG
48065: PUSH
48066: LD_INT 0
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 2
48075: NEG
48076: PUSH
48077: LD_INT 1
48079: NEG
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 2
48087: NEG
48088: PUSH
48089: LD_INT 2
48091: NEG
48092: PUSH
48093: EMPTY
48094: LIST
48095: LIST
48096: PUSH
48097: EMPTY
48098: LIST
48099: LIST
48100: LIST
48101: LIST
48102: LIST
48103: LIST
48104: LIST
48105: LIST
48106: LIST
48107: LIST
48108: LIST
48109: LIST
48110: LIST
48111: LIST
48112: LIST
48113: LIST
48114: LIST
48115: LIST
48116: LIST
48117: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48118: LD_ADDR_VAR 0 56
48122: PUSH
48123: LD_INT 0
48125: PUSH
48126: LD_INT 0
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: PUSH
48133: LD_INT 0
48135: PUSH
48136: LD_INT 1
48138: NEG
48139: PUSH
48140: EMPTY
48141: LIST
48142: LIST
48143: PUSH
48144: LD_INT 1
48146: PUSH
48147: LD_INT 0
48149: PUSH
48150: EMPTY
48151: LIST
48152: LIST
48153: PUSH
48154: LD_INT 1
48156: PUSH
48157: LD_INT 1
48159: PUSH
48160: EMPTY
48161: LIST
48162: LIST
48163: PUSH
48164: LD_INT 0
48166: PUSH
48167: LD_INT 1
48169: PUSH
48170: EMPTY
48171: LIST
48172: LIST
48173: PUSH
48174: LD_INT 1
48176: NEG
48177: PUSH
48178: LD_INT 0
48180: PUSH
48181: EMPTY
48182: LIST
48183: LIST
48184: PUSH
48185: LD_INT 1
48187: NEG
48188: PUSH
48189: LD_INT 1
48191: NEG
48192: PUSH
48193: EMPTY
48194: LIST
48195: LIST
48196: PUSH
48197: LD_INT 1
48199: NEG
48200: PUSH
48201: LD_INT 2
48203: NEG
48204: PUSH
48205: EMPTY
48206: LIST
48207: LIST
48208: PUSH
48209: LD_INT 0
48211: PUSH
48212: LD_INT 2
48214: NEG
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 1
48222: PUSH
48223: LD_INT 1
48225: NEG
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 2
48233: PUSH
48234: LD_INT 0
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 2
48243: PUSH
48244: LD_INT 1
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 2
48253: PUSH
48254: LD_INT 2
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 1
48263: PUSH
48264: LD_INT 2
48266: PUSH
48267: EMPTY
48268: LIST
48269: LIST
48270: PUSH
48271: LD_INT 0
48273: PUSH
48274: LD_INT 2
48276: PUSH
48277: EMPTY
48278: LIST
48279: LIST
48280: PUSH
48281: LD_INT 1
48283: NEG
48284: PUSH
48285: LD_INT 1
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 2
48294: NEG
48295: PUSH
48296: LD_INT 0
48298: PUSH
48299: EMPTY
48300: LIST
48301: LIST
48302: PUSH
48303: LD_INT 2
48305: NEG
48306: PUSH
48307: LD_INT 1
48309: NEG
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 2
48317: NEG
48318: PUSH
48319: LD_INT 2
48321: NEG
48322: PUSH
48323: EMPTY
48324: LIST
48325: LIST
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: LIST
48331: LIST
48332: LIST
48333: LIST
48334: LIST
48335: LIST
48336: LIST
48337: LIST
48338: LIST
48339: LIST
48340: LIST
48341: LIST
48342: LIST
48343: LIST
48344: LIST
48345: LIST
48346: LIST
48347: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48348: LD_ADDR_VAR 0 57
48352: PUSH
48353: LD_INT 0
48355: PUSH
48356: LD_INT 0
48358: PUSH
48359: EMPTY
48360: LIST
48361: LIST
48362: PUSH
48363: LD_INT 0
48365: PUSH
48366: LD_INT 1
48368: NEG
48369: PUSH
48370: EMPTY
48371: LIST
48372: LIST
48373: PUSH
48374: LD_INT 1
48376: PUSH
48377: LD_INT 0
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: LD_INT 1
48386: PUSH
48387: LD_INT 1
48389: PUSH
48390: EMPTY
48391: LIST
48392: LIST
48393: PUSH
48394: LD_INT 0
48396: PUSH
48397: LD_INT 1
48399: PUSH
48400: EMPTY
48401: LIST
48402: LIST
48403: PUSH
48404: LD_INT 1
48406: NEG
48407: PUSH
48408: LD_INT 0
48410: PUSH
48411: EMPTY
48412: LIST
48413: LIST
48414: PUSH
48415: LD_INT 1
48417: NEG
48418: PUSH
48419: LD_INT 1
48421: NEG
48422: PUSH
48423: EMPTY
48424: LIST
48425: LIST
48426: PUSH
48427: LD_INT 1
48429: NEG
48430: PUSH
48431: LD_INT 2
48433: NEG
48434: PUSH
48435: EMPTY
48436: LIST
48437: LIST
48438: PUSH
48439: LD_INT 0
48441: PUSH
48442: LD_INT 2
48444: NEG
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 1
48452: PUSH
48453: LD_INT 1
48455: NEG
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 2
48463: PUSH
48464: LD_INT 0
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 2
48473: PUSH
48474: LD_INT 1
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 2
48483: PUSH
48484: LD_INT 2
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: LD_INT 1
48493: PUSH
48494: LD_INT 2
48496: PUSH
48497: EMPTY
48498: LIST
48499: LIST
48500: PUSH
48501: LD_INT 0
48503: PUSH
48504: LD_INT 2
48506: PUSH
48507: EMPTY
48508: LIST
48509: LIST
48510: PUSH
48511: LD_INT 1
48513: NEG
48514: PUSH
48515: LD_INT 1
48517: PUSH
48518: EMPTY
48519: LIST
48520: LIST
48521: PUSH
48522: LD_INT 2
48524: NEG
48525: PUSH
48526: LD_INT 0
48528: PUSH
48529: EMPTY
48530: LIST
48531: LIST
48532: PUSH
48533: LD_INT 2
48535: NEG
48536: PUSH
48537: LD_INT 1
48539: NEG
48540: PUSH
48541: EMPTY
48542: LIST
48543: LIST
48544: PUSH
48545: LD_INT 2
48547: NEG
48548: PUSH
48549: LD_INT 2
48551: NEG
48552: PUSH
48553: EMPTY
48554: LIST
48555: LIST
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: LIST
48561: LIST
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: LIST
48575: LIST
48576: LIST
48577: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48578: LD_ADDR_VAR 0 58
48582: PUSH
48583: LD_INT 0
48585: PUSH
48586: LD_INT 0
48588: PUSH
48589: EMPTY
48590: LIST
48591: LIST
48592: PUSH
48593: LD_INT 0
48595: PUSH
48596: LD_INT 1
48598: NEG
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 1
48606: PUSH
48607: LD_INT 0
48609: PUSH
48610: EMPTY
48611: LIST
48612: LIST
48613: PUSH
48614: LD_INT 1
48616: PUSH
48617: LD_INT 1
48619: PUSH
48620: EMPTY
48621: LIST
48622: LIST
48623: PUSH
48624: LD_INT 0
48626: PUSH
48627: LD_INT 1
48629: PUSH
48630: EMPTY
48631: LIST
48632: LIST
48633: PUSH
48634: LD_INT 1
48636: NEG
48637: PUSH
48638: LD_INT 0
48640: PUSH
48641: EMPTY
48642: LIST
48643: LIST
48644: PUSH
48645: LD_INT 1
48647: NEG
48648: PUSH
48649: LD_INT 1
48651: NEG
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 1
48659: NEG
48660: PUSH
48661: LD_INT 2
48663: NEG
48664: PUSH
48665: EMPTY
48666: LIST
48667: LIST
48668: PUSH
48669: LD_INT 0
48671: PUSH
48672: LD_INT 2
48674: NEG
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 1
48682: PUSH
48683: LD_INT 1
48685: NEG
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 2
48693: PUSH
48694: LD_INT 0
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 2
48703: PUSH
48704: LD_INT 1
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 2
48713: PUSH
48714: LD_INT 2
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 1
48723: PUSH
48724: LD_INT 2
48726: PUSH
48727: EMPTY
48728: LIST
48729: LIST
48730: PUSH
48731: LD_INT 0
48733: PUSH
48734: LD_INT 2
48736: PUSH
48737: EMPTY
48738: LIST
48739: LIST
48740: PUSH
48741: LD_INT 1
48743: NEG
48744: PUSH
48745: LD_INT 1
48747: PUSH
48748: EMPTY
48749: LIST
48750: LIST
48751: PUSH
48752: LD_INT 2
48754: NEG
48755: PUSH
48756: LD_INT 0
48758: PUSH
48759: EMPTY
48760: LIST
48761: LIST
48762: PUSH
48763: LD_INT 2
48765: NEG
48766: PUSH
48767: LD_INT 1
48769: NEG
48770: PUSH
48771: EMPTY
48772: LIST
48773: LIST
48774: PUSH
48775: LD_INT 2
48777: NEG
48778: PUSH
48779: LD_INT 2
48781: NEG
48782: PUSH
48783: EMPTY
48784: LIST
48785: LIST
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: LIST
48791: LIST
48792: LIST
48793: LIST
48794: LIST
48795: LIST
48796: LIST
48797: LIST
48798: LIST
48799: LIST
48800: LIST
48801: LIST
48802: LIST
48803: LIST
48804: LIST
48805: LIST
48806: LIST
48807: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48808: LD_ADDR_VAR 0 59
48812: PUSH
48813: LD_INT 0
48815: PUSH
48816: LD_INT 0
48818: PUSH
48819: EMPTY
48820: LIST
48821: LIST
48822: PUSH
48823: LD_INT 0
48825: PUSH
48826: LD_INT 1
48828: NEG
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 1
48836: PUSH
48837: LD_INT 0
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 1
48846: PUSH
48847: LD_INT 1
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 0
48856: PUSH
48857: LD_INT 1
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 1
48866: NEG
48867: PUSH
48868: LD_INT 0
48870: PUSH
48871: EMPTY
48872: LIST
48873: LIST
48874: PUSH
48875: LD_INT 1
48877: NEG
48878: PUSH
48879: LD_INT 1
48881: NEG
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: EMPTY
48888: LIST
48889: LIST
48890: LIST
48891: LIST
48892: LIST
48893: LIST
48894: LIST
48895: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48896: LD_ADDR_VAR 0 60
48900: PUSH
48901: LD_INT 0
48903: PUSH
48904: LD_INT 0
48906: PUSH
48907: EMPTY
48908: LIST
48909: LIST
48910: PUSH
48911: LD_INT 0
48913: PUSH
48914: LD_INT 1
48916: NEG
48917: PUSH
48918: EMPTY
48919: LIST
48920: LIST
48921: PUSH
48922: LD_INT 1
48924: PUSH
48925: LD_INT 0
48927: PUSH
48928: EMPTY
48929: LIST
48930: LIST
48931: PUSH
48932: LD_INT 1
48934: PUSH
48935: LD_INT 1
48937: PUSH
48938: EMPTY
48939: LIST
48940: LIST
48941: PUSH
48942: LD_INT 0
48944: PUSH
48945: LD_INT 1
48947: PUSH
48948: EMPTY
48949: LIST
48950: LIST
48951: PUSH
48952: LD_INT 1
48954: NEG
48955: PUSH
48956: LD_INT 0
48958: PUSH
48959: EMPTY
48960: LIST
48961: LIST
48962: PUSH
48963: LD_INT 1
48965: NEG
48966: PUSH
48967: LD_INT 1
48969: NEG
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: EMPTY
48976: LIST
48977: LIST
48978: LIST
48979: LIST
48980: LIST
48981: LIST
48982: LIST
48983: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48984: LD_ADDR_VAR 0 61
48988: PUSH
48989: LD_INT 0
48991: PUSH
48992: LD_INT 0
48994: PUSH
48995: EMPTY
48996: LIST
48997: LIST
48998: PUSH
48999: LD_INT 0
49001: PUSH
49002: LD_INT 1
49004: NEG
49005: PUSH
49006: EMPTY
49007: LIST
49008: LIST
49009: PUSH
49010: LD_INT 1
49012: PUSH
49013: LD_INT 0
49015: PUSH
49016: EMPTY
49017: LIST
49018: LIST
49019: PUSH
49020: LD_INT 1
49022: PUSH
49023: LD_INT 1
49025: PUSH
49026: EMPTY
49027: LIST
49028: LIST
49029: PUSH
49030: LD_INT 0
49032: PUSH
49033: LD_INT 1
49035: PUSH
49036: EMPTY
49037: LIST
49038: LIST
49039: PUSH
49040: LD_INT 1
49042: NEG
49043: PUSH
49044: LD_INT 0
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: LD_INT 1
49053: NEG
49054: PUSH
49055: LD_INT 1
49057: NEG
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: EMPTY
49064: LIST
49065: LIST
49066: LIST
49067: LIST
49068: LIST
49069: LIST
49070: LIST
49071: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49072: LD_ADDR_VAR 0 62
49076: PUSH
49077: LD_INT 0
49079: PUSH
49080: LD_INT 0
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 0
49089: PUSH
49090: LD_INT 1
49092: NEG
49093: PUSH
49094: EMPTY
49095: LIST
49096: LIST
49097: PUSH
49098: LD_INT 1
49100: PUSH
49101: LD_INT 0
49103: PUSH
49104: EMPTY
49105: LIST
49106: LIST
49107: PUSH
49108: LD_INT 1
49110: PUSH
49111: LD_INT 1
49113: PUSH
49114: EMPTY
49115: LIST
49116: LIST
49117: PUSH
49118: LD_INT 0
49120: PUSH
49121: LD_INT 1
49123: PUSH
49124: EMPTY
49125: LIST
49126: LIST
49127: PUSH
49128: LD_INT 1
49130: NEG
49131: PUSH
49132: LD_INT 0
49134: PUSH
49135: EMPTY
49136: LIST
49137: LIST
49138: PUSH
49139: LD_INT 1
49141: NEG
49142: PUSH
49143: LD_INT 1
49145: NEG
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: EMPTY
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49160: LD_ADDR_VAR 0 63
49164: PUSH
49165: LD_INT 0
49167: PUSH
49168: LD_INT 0
49170: PUSH
49171: EMPTY
49172: LIST
49173: LIST
49174: PUSH
49175: LD_INT 0
49177: PUSH
49178: LD_INT 1
49180: NEG
49181: PUSH
49182: EMPTY
49183: LIST
49184: LIST
49185: PUSH
49186: LD_INT 1
49188: PUSH
49189: LD_INT 0
49191: PUSH
49192: EMPTY
49193: LIST
49194: LIST
49195: PUSH
49196: LD_INT 1
49198: PUSH
49199: LD_INT 1
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: PUSH
49206: LD_INT 0
49208: PUSH
49209: LD_INT 1
49211: PUSH
49212: EMPTY
49213: LIST
49214: LIST
49215: PUSH
49216: LD_INT 1
49218: NEG
49219: PUSH
49220: LD_INT 0
49222: PUSH
49223: EMPTY
49224: LIST
49225: LIST
49226: PUSH
49227: LD_INT 1
49229: NEG
49230: PUSH
49231: LD_INT 1
49233: NEG
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: LIST
49243: LIST
49244: LIST
49245: LIST
49246: LIST
49247: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49248: LD_ADDR_VAR 0 64
49252: PUSH
49253: LD_INT 0
49255: PUSH
49256: LD_INT 0
49258: PUSH
49259: EMPTY
49260: LIST
49261: LIST
49262: PUSH
49263: LD_INT 0
49265: PUSH
49266: LD_INT 1
49268: NEG
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 1
49276: PUSH
49277: LD_INT 0
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: LD_INT 1
49286: PUSH
49287: LD_INT 1
49289: PUSH
49290: EMPTY
49291: LIST
49292: LIST
49293: PUSH
49294: LD_INT 0
49296: PUSH
49297: LD_INT 1
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 1
49306: NEG
49307: PUSH
49308: LD_INT 0
49310: PUSH
49311: EMPTY
49312: LIST
49313: LIST
49314: PUSH
49315: LD_INT 1
49317: NEG
49318: PUSH
49319: LD_INT 1
49321: NEG
49322: PUSH
49323: EMPTY
49324: LIST
49325: LIST
49326: PUSH
49327: EMPTY
49328: LIST
49329: LIST
49330: LIST
49331: LIST
49332: LIST
49333: LIST
49334: LIST
49335: ST_TO_ADDR
// end ; 1 :
49336: GO 55233
49338: LD_INT 1
49340: DOUBLE
49341: EQUAL
49342: IFTRUE 49346
49344: GO 51969
49346: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49347: LD_ADDR_VAR 0 11
49351: PUSH
49352: LD_INT 1
49354: NEG
49355: PUSH
49356: LD_INT 3
49358: NEG
49359: PUSH
49360: EMPTY
49361: LIST
49362: LIST
49363: PUSH
49364: LD_INT 0
49366: PUSH
49367: LD_INT 3
49369: NEG
49370: PUSH
49371: EMPTY
49372: LIST
49373: LIST
49374: PUSH
49375: LD_INT 1
49377: PUSH
49378: LD_INT 2
49380: NEG
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: EMPTY
49387: LIST
49388: LIST
49389: LIST
49390: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49391: LD_ADDR_VAR 0 12
49395: PUSH
49396: LD_INT 2
49398: PUSH
49399: LD_INT 1
49401: NEG
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 3
49409: PUSH
49410: LD_INT 0
49412: PUSH
49413: EMPTY
49414: LIST
49415: LIST
49416: PUSH
49417: LD_INT 3
49419: PUSH
49420: LD_INT 1
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: LIST
49431: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49432: LD_ADDR_VAR 0 13
49436: PUSH
49437: LD_INT 3
49439: PUSH
49440: LD_INT 2
49442: PUSH
49443: EMPTY
49444: LIST
49445: LIST
49446: PUSH
49447: LD_INT 3
49449: PUSH
49450: LD_INT 3
49452: PUSH
49453: EMPTY
49454: LIST
49455: LIST
49456: PUSH
49457: LD_INT 2
49459: PUSH
49460: LD_INT 3
49462: PUSH
49463: EMPTY
49464: LIST
49465: LIST
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: LIST
49471: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49472: LD_ADDR_VAR 0 14
49476: PUSH
49477: LD_INT 1
49479: PUSH
49480: LD_INT 3
49482: PUSH
49483: EMPTY
49484: LIST
49485: LIST
49486: PUSH
49487: LD_INT 0
49489: PUSH
49490: LD_INT 3
49492: PUSH
49493: EMPTY
49494: LIST
49495: LIST
49496: PUSH
49497: LD_INT 1
49499: NEG
49500: PUSH
49501: LD_INT 2
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: LIST
49512: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49513: LD_ADDR_VAR 0 15
49517: PUSH
49518: LD_INT 2
49520: NEG
49521: PUSH
49522: LD_INT 1
49524: PUSH
49525: EMPTY
49526: LIST
49527: LIST
49528: PUSH
49529: LD_INT 3
49531: NEG
49532: PUSH
49533: LD_INT 0
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: LD_INT 3
49542: NEG
49543: PUSH
49544: LD_INT 1
49546: NEG
49547: PUSH
49548: EMPTY
49549: LIST
49550: LIST
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: LIST
49556: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49557: LD_ADDR_VAR 0 16
49561: PUSH
49562: LD_INT 2
49564: NEG
49565: PUSH
49566: LD_INT 3
49568: NEG
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 3
49576: NEG
49577: PUSH
49578: LD_INT 2
49580: NEG
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 3
49588: NEG
49589: PUSH
49590: LD_INT 3
49592: NEG
49593: PUSH
49594: EMPTY
49595: LIST
49596: LIST
49597: PUSH
49598: EMPTY
49599: LIST
49600: LIST
49601: LIST
49602: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49603: LD_ADDR_VAR 0 17
49607: PUSH
49608: LD_INT 1
49610: NEG
49611: PUSH
49612: LD_INT 3
49614: NEG
49615: PUSH
49616: EMPTY
49617: LIST
49618: LIST
49619: PUSH
49620: LD_INT 0
49622: PUSH
49623: LD_INT 3
49625: NEG
49626: PUSH
49627: EMPTY
49628: LIST
49629: LIST
49630: PUSH
49631: LD_INT 1
49633: PUSH
49634: LD_INT 2
49636: NEG
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: EMPTY
49643: LIST
49644: LIST
49645: LIST
49646: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49647: LD_ADDR_VAR 0 18
49651: PUSH
49652: LD_INT 2
49654: PUSH
49655: LD_INT 1
49657: NEG
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 3
49665: PUSH
49666: LD_INT 0
49668: PUSH
49669: EMPTY
49670: LIST
49671: LIST
49672: PUSH
49673: LD_INT 3
49675: PUSH
49676: LD_INT 1
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: LIST
49687: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49688: LD_ADDR_VAR 0 19
49692: PUSH
49693: LD_INT 3
49695: PUSH
49696: LD_INT 2
49698: PUSH
49699: EMPTY
49700: LIST
49701: LIST
49702: PUSH
49703: LD_INT 3
49705: PUSH
49706: LD_INT 3
49708: PUSH
49709: EMPTY
49710: LIST
49711: LIST
49712: PUSH
49713: LD_INT 2
49715: PUSH
49716: LD_INT 3
49718: PUSH
49719: EMPTY
49720: LIST
49721: LIST
49722: PUSH
49723: EMPTY
49724: LIST
49725: LIST
49726: LIST
49727: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49728: LD_ADDR_VAR 0 20
49732: PUSH
49733: LD_INT 1
49735: PUSH
49736: LD_INT 3
49738: PUSH
49739: EMPTY
49740: LIST
49741: LIST
49742: PUSH
49743: LD_INT 0
49745: PUSH
49746: LD_INT 3
49748: PUSH
49749: EMPTY
49750: LIST
49751: LIST
49752: PUSH
49753: LD_INT 1
49755: NEG
49756: PUSH
49757: LD_INT 2
49759: PUSH
49760: EMPTY
49761: LIST
49762: LIST
49763: PUSH
49764: EMPTY
49765: LIST
49766: LIST
49767: LIST
49768: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49769: LD_ADDR_VAR 0 21
49773: PUSH
49774: LD_INT 2
49776: NEG
49777: PUSH
49778: LD_INT 1
49780: PUSH
49781: EMPTY
49782: LIST
49783: LIST
49784: PUSH
49785: LD_INT 3
49787: NEG
49788: PUSH
49789: LD_INT 0
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 3
49798: NEG
49799: PUSH
49800: LD_INT 1
49802: NEG
49803: PUSH
49804: EMPTY
49805: LIST
49806: LIST
49807: PUSH
49808: EMPTY
49809: LIST
49810: LIST
49811: LIST
49812: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49813: LD_ADDR_VAR 0 22
49817: PUSH
49818: LD_INT 2
49820: NEG
49821: PUSH
49822: LD_INT 3
49824: NEG
49825: PUSH
49826: EMPTY
49827: LIST
49828: LIST
49829: PUSH
49830: LD_INT 3
49832: NEG
49833: PUSH
49834: LD_INT 2
49836: NEG
49837: PUSH
49838: EMPTY
49839: LIST
49840: LIST
49841: PUSH
49842: LD_INT 3
49844: NEG
49845: PUSH
49846: LD_INT 3
49848: NEG
49849: PUSH
49850: EMPTY
49851: LIST
49852: LIST
49853: PUSH
49854: EMPTY
49855: LIST
49856: LIST
49857: LIST
49858: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
49859: LD_ADDR_VAR 0 23
49863: PUSH
49864: LD_INT 0
49866: PUSH
49867: LD_INT 3
49869: NEG
49870: PUSH
49871: EMPTY
49872: LIST
49873: LIST
49874: PUSH
49875: LD_INT 1
49877: NEG
49878: PUSH
49879: LD_INT 4
49881: NEG
49882: PUSH
49883: EMPTY
49884: LIST
49885: LIST
49886: PUSH
49887: LD_INT 1
49889: PUSH
49890: LD_INT 3
49892: NEG
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: EMPTY
49899: LIST
49900: LIST
49901: LIST
49902: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
49903: LD_ADDR_VAR 0 24
49907: PUSH
49908: LD_INT 3
49910: PUSH
49911: LD_INT 0
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 3
49920: PUSH
49921: LD_INT 1
49923: NEG
49924: PUSH
49925: EMPTY
49926: LIST
49927: LIST
49928: PUSH
49929: LD_INT 4
49931: PUSH
49932: LD_INT 1
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: LIST
49943: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
49944: LD_ADDR_VAR 0 25
49948: PUSH
49949: LD_INT 3
49951: PUSH
49952: LD_INT 3
49954: PUSH
49955: EMPTY
49956: LIST
49957: LIST
49958: PUSH
49959: LD_INT 4
49961: PUSH
49962: LD_INT 3
49964: PUSH
49965: EMPTY
49966: LIST
49967: LIST
49968: PUSH
49969: LD_INT 3
49971: PUSH
49972: LD_INT 4
49974: PUSH
49975: EMPTY
49976: LIST
49977: LIST
49978: PUSH
49979: EMPTY
49980: LIST
49981: LIST
49982: LIST
49983: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
49984: LD_ADDR_VAR 0 26
49988: PUSH
49989: LD_INT 0
49991: PUSH
49992: LD_INT 3
49994: PUSH
49995: EMPTY
49996: LIST
49997: LIST
49998: PUSH
49999: LD_INT 1
50001: PUSH
50002: LD_INT 4
50004: PUSH
50005: EMPTY
50006: LIST
50007: LIST
50008: PUSH
50009: LD_INT 1
50011: NEG
50012: PUSH
50013: LD_INT 3
50015: PUSH
50016: EMPTY
50017: LIST
50018: LIST
50019: PUSH
50020: EMPTY
50021: LIST
50022: LIST
50023: LIST
50024: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
50025: LD_ADDR_VAR 0 27
50029: PUSH
50030: LD_INT 3
50032: NEG
50033: PUSH
50034: LD_INT 0
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: PUSH
50041: LD_INT 3
50043: NEG
50044: PUSH
50045: LD_INT 1
50047: PUSH
50048: EMPTY
50049: LIST
50050: LIST
50051: PUSH
50052: LD_INT 4
50054: NEG
50055: PUSH
50056: LD_INT 1
50058: NEG
50059: PUSH
50060: EMPTY
50061: LIST
50062: LIST
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: LIST
50068: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
50069: LD_ADDR_VAR 0 28
50073: PUSH
50074: LD_INT 3
50076: NEG
50077: PUSH
50078: LD_INT 3
50080: NEG
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 3
50088: NEG
50089: PUSH
50090: LD_INT 4
50092: NEG
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 4
50100: NEG
50101: PUSH
50102: LD_INT 3
50104: NEG
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: EMPTY
50111: LIST
50112: LIST
50113: LIST
50114: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
50115: LD_ADDR_VAR 0 29
50119: PUSH
50120: LD_INT 1
50122: NEG
50123: PUSH
50124: LD_INT 3
50126: NEG
50127: PUSH
50128: EMPTY
50129: LIST
50130: LIST
50131: PUSH
50132: LD_INT 0
50134: PUSH
50135: LD_INT 3
50137: NEG
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 1
50145: PUSH
50146: LD_INT 2
50148: NEG
50149: PUSH
50150: EMPTY
50151: LIST
50152: LIST
50153: PUSH
50154: LD_INT 1
50156: NEG
50157: PUSH
50158: LD_INT 4
50160: NEG
50161: PUSH
50162: EMPTY
50163: LIST
50164: LIST
50165: PUSH
50166: LD_INT 0
50168: PUSH
50169: LD_INT 4
50171: NEG
50172: PUSH
50173: EMPTY
50174: LIST
50175: LIST
50176: PUSH
50177: LD_INT 1
50179: PUSH
50180: LD_INT 3
50182: NEG
50183: PUSH
50184: EMPTY
50185: LIST
50186: LIST
50187: PUSH
50188: LD_INT 1
50190: NEG
50191: PUSH
50192: LD_INT 5
50194: NEG
50195: PUSH
50196: EMPTY
50197: LIST
50198: LIST
50199: PUSH
50200: LD_INT 0
50202: PUSH
50203: LD_INT 5
50205: NEG
50206: PUSH
50207: EMPTY
50208: LIST
50209: LIST
50210: PUSH
50211: LD_INT 1
50213: PUSH
50214: LD_INT 4
50216: NEG
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 1
50224: NEG
50225: PUSH
50226: LD_INT 6
50228: NEG
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 0
50236: PUSH
50237: LD_INT 6
50239: NEG
50240: PUSH
50241: EMPTY
50242: LIST
50243: LIST
50244: PUSH
50245: LD_INT 1
50247: PUSH
50248: LD_INT 5
50250: NEG
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
50270: LD_ADDR_VAR 0 30
50274: PUSH
50275: LD_INT 2
50277: PUSH
50278: LD_INT 1
50280: NEG
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 3
50288: PUSH
50289: LD_INT 0
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 3
50298: PUSH
50299: LD_INT 1
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 3
50308: PUSH
50309: LD_INT 1
50311: NEG
50312: PUSH
50313: EMPTY
50314: LIST
50315: LIST
50316: PUSH
50317: LD_INT 4
50319: PUSH
50320: LD_INT 0
50322: PUSH
50323: EMPTY
50324: LIST
50325: LIST
50326: PUSH
50327: LD_INT 4
50329: PUSH
50330: LD_INT 1
50332: PUSH
50333: EMPTY
50334: LIST
50335: LIST
50336: PUSH
50337: LD_INT 4
50339: PUSH
50340: LD_INT 1
50342: NEG
50343: PUSH
50344: EMPTY
50345: LIST
50346: LIST
50347: PUSH
50348: LD_INT 5
50350: PUSH
50351: LD_INT 0
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: PUSH
50358: LD_INT 5
50360: PUSH
50361: LD_INT 1
50363: PUSH
50364: EMPTY
50365: LIST
50366: LIST
50367: PUSH
50368: LD_INT 5
50370: PUSH
50371: LD_INT 1
50373: NEG
50374: PUSH
50375: EMPTY
50376: LIST
50377: LIST
50378: PUSH
50379: LD_INT 6
50381: PUSH
50382: LD_INT 0
50384: PUSH
50385: EMPTY
50386: LIST
50387: LIST
50388: PUSH
50389: LD_INT 6
50391: PUSH
50392: LD_INT 1
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: LIST
50409: LIST
50410: LIST
50411: LIST
50412: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
50413: LD_ADDR_VAR 0 31
50417: PUSH
50418: LD_INT 3
50420: PUSH
50421: LD_INT 2
50423: PUSH
50424: EMPTY
50425: LIST
50426: LIST
50427: PUSH
50428: LD_INT 3
50430: PUSH
50431: LD_INT 3
50433: PUSH
50434: EMPTY
50435: LIST
50436: LIST
50437: PUSH
50438: LD_INT 2
50440: PUSH
50441: LD_INT 3
50443: PUSH
50444: EMPTY
50445: LIST
50446: LIST
50447: PUSH
50448: LD_INT 4
50450: PUSH
50451: LD_INT 3
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 4
50460: PUSH
50461: LD_INT 4
50463: PUSH
50464: EMPTY
50465: LIST
50466: LIST
50467: PUSH
50468: LD_INT 3
50470: PUSH
50471: LD_INT 4
50473: PUSH
50474: EMPTY
50475: LIST
50476: LIST
50477: PUSH
50478: LD_INT 5
50480: PUSH
50481: LD_INT 4
50483: PUSH
50484: EMPTY
50485: LIST
50486: LIST
50487: PUSH
50488: LD_INT 5
50490: PUSH
50491: LD_INT 5
50493: PUSH
50494: EMPTY
50495: LIST
50496: LIST
50497: PUSH
50498: LD_INT 4
50500: PUSH
50501: LD_INT 5
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 6
50510: PUSH
50511: LD_INT 5
50513: PUSH
50514: EMPTY
50515: LIST
50516: LIST
50517: PUSH
50518: LD_INT 6
50520: PUSH
50521: LD_INT 6
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 5
50530: PUSH
50531: LD_INT 6
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
50552: LD_ADDR_VAR 0 32
50556: PUSH
50557: LD_INT 1
50559: PUSH
50560: LD_INT 3
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 0
50569: PUSH
50570: LD_INT 3
50572: PUSH
50573: EMPTY
50574: LIST
50575: LIST
50576: PUSH
50577: LD_INT 1
50579: NEG
50580: PUSH
50581: LD_INT 2
50583: PUSH
50584: EMPTY
50585: LIST
50586: LIST
50587: PUSH
50588: LD_INT 1
50590: PUSH
50591: LD_INT 4
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 0
50600: PUSH
50601: LD_INT 4
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 1
50610: NEG
50611: PUSH
50612: LD_INT 3
50614: PUSH
50615: EMPTY
50616: LIST
50617: LIST
50618: PUSH
50619: LD_INT 1
50621: PUSH
50622: LD_INT 5
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 0
50631: PUSH
50632: LD_INT 5
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 1
50641: NEG
50642: PUSH
50643: LD_INT 4
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 1
50652: PUSH
50653: LD_INT 6
50655: PUSH
50656: EMPTY
50657: LIST
50658: LIST
50659: PUSH
50660: LD_INT 0
50662: PUSH
50663: LD_INT 6
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 1
50672: NEG
50673: PUSH
50674: LD_INT 5
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: LIST
50685: LIST
50686: LIST
50687: LIST
50688: LIST
50689: LIST
50690: LIST
50691: LIST
50692: LIST
50693: LIST
50694: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
50695: LD_ADDR_VAR 0 33
50699: PUSH
50700: LD_INT 2
50702: NEG
50703: PUSH
50704: LD_INT 1
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 3
50713: NEG
50714: PUSH
50715: LD_INT 0
50717: PUSH
50718: EMPTY
50719: LIST
50720: LIST
50721: PUSH
50722: LD_INT 3
50724: NEG
50725: PUSH
50726: LD_INT 1
50728: NEG
50729: PUSH
50730: EMPTY
50731: LIST
50732: LIST
50733: PUSH
50734: LD_INT 3
50736: NEG
50737: PUSH
50738: LD_INT 1
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: PUSH
50745: LD_INT 4
50747: NEG
50748: PUSH
50749: LD_INT 0
50751: PUSH
50752: EMPTY
50753: LIST
50754: LIST
50755: PUSH
50756: LD_INT 4
50758: NEG
50759: PUSH
50760: LD_INT 1
50762: NEG
50763: PUSH
50764: EMPTY
50765: LIST
50766: LIST
50767: PUSH
50768: LD_INT 4
50770: NEG
50771: PUSH
50772: LD_INT 1
50774: PUSH
50775: EMPTY
50776: LIST
50777: LIST
50778: PUSH
50779: LD_INT 5
50781: NEG
50782: PUSH
50783: LD_INT 0
50785: PUSH
50786: EMPTY
50787: LIST
50788: LIST
50789: PUSH
50790: LD_INT 5
50792: NEG
50793: PUSH
50794: LD_INT 1
50796: NEG
50797: PUSH
50798: EMPTY
50799: LIST
50800: LIST
50801: PUSH
50802: LD_INT 5
50804: NEG
50805: PUSH
50806: LD_INT 1
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 6
50815: NEG
50816: PUSH
50817: LD_INT 0
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: PUSH
50824: LD_INT 6
50826: NEG
50827: PUSH
50828: LD_INT 1
50830: NEG
50831: PUSH
50832: EMPTY
50833: LIST
50834: LIST
50835: PUSH
50836: EMPTY
50837: LIST
50838: LIST
50839: LIST
50840: LIST
50841: LIST
50842: LIST
50843: LIST
50844: LIST
50845: LIST
50846: LIST
50847: LIST
50848: LIST
50849: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
50850: LD_ADDR_VAR 0 34
50854: PUSH
50855: LD_INT 2
50857: NEG
50858: PUSH
50859: LD_INT 3
50861: NEG
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 3
50869: NEG
50870: PUSH
50871: LD_INT 2
50873: NEG
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 3
50881: NEG
50882: PUSH
50883: LD_INT 3
50885: NEG
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 3
50893: NEG
50894: PUSH
50895: LD_INT 4
50897: NEG
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 4
50905: NEG
50906: PUSH
50907: LD_INT 3
50909: NEG
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 4
50917: NEG
50918: PUSH
50919: LD_INT 4
50921: NEG
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 4
50929: NEG
50930: PUSH
50931: LD_INT 5
50933: NEG
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 5
50941: NEG
50942: PUSH
50943: LD_INT 4
50945: NEG
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 5
50953: NEG
50954: PUSH
50955: LD_INT 5
50957: NEG
50958: PUSH
50959: EMPTY
50960: LIST
50961: LIST
50962: PUSH
50963: LD_INT 5
50965: NEG
50966: PUSH
50967: LD_INT 6
50969: NEG
50970: PUSH
50971: EMPTY
50972: LIST
50973: LIST
50974: PUSH
50975: LD_INT 6
50977: NEG
50978: PUSH
50979: LD_INT 5
50981: NEG
50982: PUSH
50983: EMPTY
50984: LIST
50985: LIST
50986: PUSH
50987: LD_INT 6
50989: NEG
50990: PUSH
50991: LD_INT 6
50993: NEG
50994: PUSH
50995: EMPTY
50996: LIST
50997: LIST
50998: PUSH
50999: EMPTY
51000: LIST
51001: LIST
51002: LIST
51003: LIST
51004: LIST
51005: LIST
51006: LIST
51007: LIST
51008: LIST
51009: LIST
51010: LIST
51011: LIST
51012: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
51013: LD_ADDR_VAR 0 41
51017: PUSH
51018: LD_INT 0
51020: PUSH
51021: LD_INT 2
51023: NEG
51024: PUSH
51025: EMPTY
51026: LIST
51027: LIST
51028: PUSH
51029: LD_INT 1
51031: NEG
51032: PUSH
51033: LD_INT 3
51035: NEG
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 1
51043: PUSH
51044: LD_INT 2
51046: NEG
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: EMPTY
51053: LIST
51054: LIST
51055: LIST
51056: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
51057: LD_ADDR_VAR 0 42
51061: PUSH
51062: LD_INT 2
51064: PUSH
51065: LD_INT 0
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 2
51074: PUSH
51075: LD_INT 1
51077: NEG
51078: PUSH
51079: EMPTY
51080: LIST
51081: LIST
51082: PUSH
51083: LD_INT 3
51085: PUSH
51086: LD_INT 1
51088: PUSH
51089: EMPTY
51090: LIST
51091: LIST
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: LIST
51097: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
51098: LD_ADDR_VAR 0 43
51102: PUSH
51103: LD_INT 2
51105: PUSH
51106: LD_INT 2
51108: PUSH
51109: EMPTY
51110: LIST
51111: LIST
51112: PUSH
51113: LD_INT 3
51115: PUSH
51116: LD_INT 2
51118: PUSH
51119: EMPTY
51120: LIST
51121: LIST
51122: PUSH
51123: LD_INT 2
51125: PUSH
51126: LD_INT 3
51128: PUSH
51129: EMPTY
51130: LIST
51131: LIST
51132: PUSH
51133: EMPTY
51134: LIST
51135: LIST
51136: LIST
51137: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
51138: LD_ADDR_VAR 0 44
51142: PUSH
51143: LD_INT 0
51145: PUSH
51146: LD_INT 2
51148: PUSH
51149: EMPTY
51150: LIST
51151: LIST
51152: PUSH
51153: LD_INT 1
51155: PUSH
51156: LD_INT 3
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 1
51165: NEG
51166: PUSH
51167: LD_INT 2
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: EMPTY
51175: LIST
51176: LIST
51177: LIST
51178: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51179: LD_ADDR_VAR 0 45
51183: PUSH
51184: LD_INT 2
51186: NEG
51187: PUSH
51188: LD_INT 0
51190: PUSH
51191: EMPTY
51192: LIST
51193: LIST
51194: PUSH
51195: LD_INT 2
51197: NEG
51198: PUSH
51199: LD_INT 1
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 3
51208: NEG
51209: PUSH
51210: LD_INT 1
51212: NEG
51213: PUSH
51214: EMPTY
51215: LIST
51216: LIST
51217: PUSH
51218: EMPTY
51219: LIST
51220: LIST
51221: LIST
51222: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
51223: LD_ADDR_VAR 0 46
51227: PUSH
51228: LD_INT 2
51230: NEG
51231: PUSH
51232: LD_INT 2
51234: NEG
51235: PUSH
51236: EMPTY
51237: LIST
51238: LIST
51239: PUSH
51240: LD_INT 2
51242: NEG
51243: PUSH
51244: LD_INT 3
51246: NEG
51247: PUSH
51248: EMPTY
51249: LIST
51250: LIST
51251: PUSH
51252: LD_INT 3
51254: NEG
51255: PUSH
51256: LD_INT 2
51258: NEG
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: EMPTY
51265: LIST
51266: LIST
51267: LIST
51268: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
51269: LD_ADDR_VAR 0 47
51273: PUSH
51274: LD_INT 2
51276: NEG
51277: PUSH
51278: LD_INT 3
51280: NEG
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 1
51288: NEG
51289: PUSH
51290: LD_INT 3
51292: NEG
51293: PUSH
51294: EMPTY
51295: LIST
51296: LIST
51297: PUSH
51298: EMPTY
51299: LIST
51300: LIST
51301: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51302: LD_ADDR_VAR 0 48
51306: PUSH
51307: LD_INT 1
51309: PUSH
51310: LD_INT 2
51312: NEG
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 2
51320: PUSH
51321: LD_INT 1
51323: NEG
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
51333: LD_ADDR_VAR 0 49
51337: PUSH
51338: LD_INT 3
51340: PUSH
51341: LD_INT 1
51343: PUSH
51344: EMPTY
51345: LIST
51346: LIST
51347: PUSH
51348: LD_INT 3
51350: PUSH
51351: LD_INT 2
51353: PUSH
51354: EMPTY
51355: LIST
51356: LIST
51357: PUSH
51358: EMPTY
51359: LIST
51360: LIST
51361: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
51362: LD_ADDR_VAR 0 50
51366: PUSH
51367: LD_INT 2
51369: PUSH
51370: LD_INT 3
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 1
51379: PUSH
51380: LD_INT 3
51382: PUSH
51383: EMPTY
51384: LIST
51385: LIST
51386: PUSH
51387: EMPTY
51388: LIST
51389: LIST
51390: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51391: LD_ADDR_VAR 0 51
51395: PUSH
51396: LD_INT 1
51398: NEG
51399: PUSH
51400: LD_INT 2
51402: PUSH
51403: EMPTY
51404: LIST
51405: LIST
51406: PUSH
51407: LD_INT 2
51409: NEG
51410: PUSH
51411: LD_INT 1
51413: PUSH
51414: EMPTY
51415: LIST
51416: LIST
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51422: LD_ADDR_VAR 0 52
51426: PUSH
51427: LD_INT 3
51429: NEG
51430: PUSH
51431: LD_INT 1
51433: NEG
51434: PUSH
51435: EMPTY
51436: LIST
51437: LIST
51438: PUSH
51439: LD_INT 3
51441: NEG
51442: PUSH
51443: LD_INT 2
51445: NEG
51446: PUSH
51447: EMPTY
51448: LIST
51449: LIST
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51455: LD_ADDR_VAR 0 53
51459: PUSH
51460: LD_INT 1
51462: NEG
51463: PUSH
51464: LD_INT 3
51466: NEG
51467: PUSH
51468: EMPTY
51469: LIST
51470: LIST
51471: PUSH
51472: LD_INT 0
51474: PUSH
51475: LD_INT 3
51477: NEG
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 1
51485: PUSH
51486: LD_INT 2
51488: NEG
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: EMPTY
51495: LIST
51496: LIST
51497: LIST
51498: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51499: LD_ADDR_VAR 0 54
51503: PUSH
51504: LD_INT 2
51506: PUSH
51507: LD_INT 1
51509: NEG
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 3
51517: PUSH
51518: LD_INT 0
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 3
51527: PUSH
51528: LD_INT 1
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: LIST
51539: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51540: LD_ADDR_VAR 0 55
51544: PUSH
51545: LD_INT 3
51547: PUSH
51548: LD_INT 2
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 3
51557: PUSH
51558: LD_INT 3
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 2
51567: PUSH
51568: LD_INT 3
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: EMPTY
51576: LIST
51577: LIST
51578: LIST
51579: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51580: LD_ADDR_VAR 0 56
51584: PUSH
51585: LD_INT 1
51587: PUSH
51588: LD_INT 3
51590: PUSH
51591: EMPTY
51592: LIST
51593: LIST
51594: PUSH
51595: LD_INT 0
51597: PUSH
51598: LD_INT 3
51600: PUSH
51601: EMPTY
51602: LIST
51603: LIST
51604: PUSH
51605: LD_INT 1
51607: NEG
51608: PUSH
51609: LD_INT 2
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: LIST
51620: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51621: LD_ADDR_VAR 0 57
51625: PUSH
51626: LD_INT 2
51628: NEG
51629: PUSH
51630: LD_INT 1
51632: PUSH
51633: EMPTY
51634: LIST
51635: LIST
51636: PUSH
51637: LD_INT 3
51639: NEG
51640: PUSH
51641: LD_INT 0
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: LD_INT 3
51650: NEG
51651: PUSH
51652: LD_INT 1
51654: NEG
51655: PUSH
51656: EMPTY
51657: LIST
51658: LIST
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: LIST
51664: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51665: LD_ADDR_VAR 0 58
51669: PUSH
51670: LD_INT 2
51672: NEG
51673: PUSH
51674: LD_INT 3
51676: NEG
51677: PUSH
51678: EMPTY
51679: LIST
51680: LIST
51681: PUSH
51682: LD_INT 3
51684: NEG
51685: PUSH
51686: LD_INT 2
51688: NEG
51689: PUSH
51690: EMPTY
51691: LIST
51692: LIST
51693: PUSH
51694: LD_INT 3
51696: NEG
51697: PUSH
51698: LD_INT 3
51700: NEG
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: LIST
51710: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
51711: LD_ADDR_VAR 0 59
51715: PUSH
51716: LD_INT 1
51718: NEG
51719: PUSH
51720: LD_INT 2
51722: NEG
51723: PUSH
51724: EMPTY
51725: LIST
51726: LIST
51727: PUSH
51728: LD_INT 0
51730: PUSH
51731: LD_INT 2
51733: NEG
51734: PUSH
51735: EMPTY
51736: LIST
51737: LIST
51738: PUSH
51739: LD_INT 1
51741: PUSH
51742: LD_INT 1
51744: NEG
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: EMPTY
51751: LIST
51752: LIST
51753: LIST
51754: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51755: LD_ADDR_VAR 0 60
51759: PUSH
51760: LD_INT 1
51762: PUSH
51763: LD_INT 1
51765: NEG
51766: PUSH
51767: EMPTY
51768: LIST
51769: LIST
51770: PUSH
51771: LD_INT 2
51773: PUSH
51774: LD_INT 0
51776: PUSH
51777: EMPTY
51778: LIST
51779: LIST
51780: PUSH
51781: LD_INT 2
51783: PUSH
51784: LD_INT 1
51786: PUSH
51787: EMPTY
51788: LIST
51789: LIST
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: LIST
51795: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51796: LD_ADDR_VAR 0 61
51800: PUSH
51801: LD_INT 2
51803: PUSH
51804: LD_INT 1
51806: PUSH
51807: EMPTY
51808: LIST
51809: LIST
51810: PUSH
51811: LD_INT 2
51813: PUSH
51814: LD_INT 2
51816: PUSH
51817: EMPTY
51818: LIST
51819: LIST
51820: PUSH
51821: LD_INT 1
51823: PUSH
51824: LD_INT 2
51826: PUSH
51827: EMPTY
51828: LIST
51829: LIST
51830: PUSH
51831: EMPTY
51832: LIST
51833: LIST
51834: LIST
51835: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51836: LD_ADDR_VAR 0 62
51840: PUSH
51841: LD_INT 1
51843: PUSH
51844: LD_INT 2
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 0
51853: PUSH
51854: LD_INT 2
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 1
51863: NEG
51864: PUSH
51865: LD_INT 1
51867: PUSH
51868: EMPTY
51869: LIST
51870: LIST
51871: PUSH
51872: EMPTY
51873: LIST
51874: LIST
51875: LIST
51876: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51877: LD_ADDR_VAR 0 63
51881: PUSH
51882: LD_INT 1
51884: NEG
51885: PUSH
51886: LD_INT 1
51888: PUSH
51889: EMPTY
51890: LIST
51891: LIST
51892: PUSH
51893: LD_INT 2
51895: NEG
51896: PUSH
51897: LD_INT 0
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: PUSH
51904: LD_INT 2
51906: NEG
51907: PUSH
51908: LD_INT 1
51910: NEG
51911: PUSH
51912: EMPTY
51913: LIST
51914: LIST
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: LIST
51920: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51921: LD_ADDR_VAR 0 64
51925: PUSH
51926: LD_INT 1
51928: NEG
51929: PUSH
51930: LD_INT 2
51932: NEG
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 2
51940: NEG
51941: PUSH
51942: LD_INT 1
51944: NEG
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 2
51952: NEG
51953: PUSH
51954: LD_INT 2
51956: NEG
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: EMPTY
51963: LIST
51964: LIST
51965: LIST
51966: ST_TO_ADDR
// end ; 2 :
51967: GO 55233
51969: LD_INT 2
51971: DOUBLE
51972: EQUAL
51973: IFTRUE 51977
51975: GO 55232
51977: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
51978: LD_ADDR_VAR 0 29
51982: PUSH
51983: LD_INT 4
51985: PUSH
51986: LD_INT 0
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 4
51995: PUSH
51996: LD_INT 1
51998: NEG
51999: PUSH
52000: EMPTY
52001: LIST
52002: LIST
52003: PUSH
52004: LD_INT 5
52006: PUSH
52007: LD_INT 0
52009: PUSH
52010: EMPTY
52011: LIST
52012: LIST
52013: PUSH
52014: LD_INT 5
52016: PUSH
52017: LD_INT 1
52019: PUSH
52020: EMPTY
52021: LIST
52022: LIST
52023: PUSH
52024: LD_INT 4
52026: PUSH
52027: LD_INT 1
52029: PUSH
52030: EMPTY
52031: LIST
52032: LIST
52033: PUSH
52034: LD_INT 3
52036: PUSH
52037: LD_INT 0
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 3
52046: PUSH
52047: LD_INT 1
52049: NEG
52050: PUSH
52051: EMPTY
52052: LIST
52053: LIST
52054: PUSH
52055: LD_INT 3
52057: PUSH
52058: LD_INT 2
52060: NEG
52061: PUSH
52062: EMPTY
52063: LIST
52064: LIST
52065: PUSH
52066: LD_INT 5
52068: PUSH
52069: LD_INT 2
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 3
52078: PUSH
52079: LD_INT 3
52081: PUSH
52082: EMPTY
52083: LIST
52084: LIST
52085: PUSH
52086: LD_INT 3
52088: PUSH
52089: LD_INT 2
52091: PUSH
52092: EMPTY
52093: LIST
52094: LIST
52095: PUSH
52096: LD_INT 4
52098: PUSH
52099: LD_INT 3
52101: PUSH
52102: EMPTY
52103: LIST
52104: LIST
52105: PUSH
52106: LD_INT 4
52108: PUSH
52109: LD_INT 4
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 3
52118: PUSH
52119: LD_INT 4
52121: PUSH
52122: EMPTY
52123: LIST
52124: LIST
52125: PUSH
52126: LD_INT 2
52128: PUSH
52129: LD_INT 3
52131: PUSH
52132: EMPTY
52133: LIST
52134: LIST
52135: PUSH
52136: LD_INT 2
52138: PUSH
52139: LD_INT 2
52141: PUSH
52142: EMPTY
52143: LIST
52144: LIST
52145: PUSH
52146: LD_INT 4
52148: PUSH
52149: LD_INT 2
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 2
52158: PUSH
52159: LD_INT 4
52161: PUSH
52162: EMPTY
52163: LIST
52164: LIST
52165: PUSH
52166: LD_INT 0
52168: PUSH
52169: LD_INT 4
52171: PUSH
52172: EMPTY
52173: LIST
52174: LIST
52175: PUSH
52176: LD_INT 0
52178: PUSH
52179: LD_INT 3
52181: PUSH
52182: EMPTY
52183: LIST
52184: LIST
52185: PUSH
52186: LD_INT 1
52188: PUSH
52189: LD_INT 4
52191: PUSH
52192: EMPTY
52193: LIST
52194: LIST
52195: PUSH
52196: LD_INT 1
52198: PUSH
52199: LD_INT 5
52201: PUSH
52202: EMPTY
52203: LIST
52204: LIST
52205: PUSH
52206: LD_INT 0
52208: PUSH
52209: LD_INT 5
52211: PUSH
52212: EMPTY
52213: LIST
52214: LIST
52215: PUSH
52216: LD_INT 1
52218: NEG
52219: PUSH
52220: LD_INT 4
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 1
52229: NEG
52230: PUSH
52231: LD_INT 3
52233: PUSH
52234: EMPTY
52235: LIST
52236: LIST
52237: PUSH
52238: LD_INT 2
52240: PUSH
52241: LD_INT 5
52243: PUSH
52244: EMPTY
52245: LIST
52246: LIST
52247: PUSH
52248: LD_INT 2
52250: NEG
52251: PUSH
52252: LD_INT 3
52254: PUSH
52255: EMPTY
52256: LIST
52257: LIST
52258: PUSH
52259: LD_INT 3
52261: NEG
52262: PUSH
52263: LD_INT 0
52265: PUSH
52266: EMPTY
52267: LIST
52268: LIST
52269: PUSH
52270: LD_INT 3
52272: NEG
52273: PUSH
52274: LD_INT 1
52276: NEG
52277: PUSH
52278: EMPTY
52279: LIST
52280: LIST
52281: PUSH
52282: LD_INT 2
52284: NEG
52285: PUSH
52286: LD_INT 0
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 2
52295: NEG
52296: PUSH
52297: LD_INT 1
52299: PUSH
52300: EMPTY
52301: LIST
52302: LIST
52303: PUSH
52304: LD_INT 3
52306: NEG
52307: PUSH
52308: LD_INT 1
52310: PUSH
52311: EMPTY
52312: LIST
52313: LIST
52314: PUSH
52315: LD_INT 4
52317: NEG
52318: PUSH
52319: LD_INT 0
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: LD_INT 4
52328: NEG
52329: PUSH
52330: LD_INT 1
52332: NEG
52333: PUSH
52334: EMPTY
52335: LIST
52336: LIST
52337: PUSH
52338: LD_INT 4
52340: NEG
52341: PUSH
52342: LD_INT 2
52344: NEG
52345: PUSH
52346: EMPTY
52347: LIST
52348: LIST
52349: PUSH
52350: LD_INT 2
52352: NEG
52353: PUSH
52354: LD_INT 2
52356: PUSH
52357: EMPTY
52358: LIST
52359: LIST
52360: PUSH
52361: LD_INT 4
52363: NEG
52364: PUSH
52365: LD_INT 4
52367: NEG
52368: PUSH
52369: EMPTY
52370: LIST
52371: LIST
52372: PUSH
52373: LD_INT 4
52375: NEG
52376: PUSH
52377: LD_INT 5
52379: NEG
52380: PUSH
52381: EMPTY
52382: LIST
52383: LIST
52384: PUSH
52385: LD_INT 3
52387: NEG
52388: PUSH
52389: LD_INT 4
52391: NEG
52392: PUSH
52393: EMPTY
52394: LIST
52395: LIST
52396: PUSH
52397: LD_INT 3
52399: NEG
52400: PUSH
52401: LD_INT 3
52403: NEG
52404: PUSH
52405: EMPTY
52406: LIST
52407: LIST
52408: PUSH
52409: LD_INT 4
52411: NEG
52412: PUSH
52413: LD_INT 3
52415: NEG
52416: PUSH
52417: EMPTY
52418: LIST
52419: LIST
52420: PUSH
52421: LD_INT 5
52423: NEG
52424: PUSH
52425: LD_INT 4
52427: NEG
52428: PUSH
52429: EMPTY
52430: LIST
52431: LIST
52432: PUSH
52433: LD_INT 5
52435: NEG
52436: PUSH
52437: LD_INT 5
52439: NEG
52440: PUSH
52441: EMPTY
52442: LIST
52443: LIST
52444: PUSH
52445: LD_INT 3
52447: NEG
52448: PUSH
52449: LD_INT 5
52451: NEG
52452: PUSH
52453: EMPTY
52454: LIST
52455: LIST
52456: PUSH
52457: LD_INT 5
52459: NEG
52460: PUSH
52461: LD_INT 3
52463: NEG
52464: PUSH
52465: EMPTY
52466: LIST
52467: LIST
52468: PUSH
52469: EMPTY
52470: LIST
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
52516: LD_ADDR_VAR 0 30
52520: PUSH
52521: LD_INT 4
52523: PUSH
52524: LD_INT 4
52526: PUSH
52527: EMPTY
52528: LIST
52529: LIST
52530: PUSH
52531: LD_INT 4
52533: PUSH
52534: LD_INT 3
52536: PUSH
52537: EMPTY
52538: LIST
52539: LIST
52540: PUSH
52541: LD_INT 5
52543: PUSH
52544: LD_INT 4
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 5
52553: PUSH
52554: LD_INT 5
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 4
52563: PUSH
52564: LD_INT 5
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 3
52573: PUSH
52574: LD_INT 4
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 3
52583: PUSH
52584: LD_INT 3
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 5
52593: PUSH
52594: LD_INT 3
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 3
52603: PUSH
52604: LD_INT 5
52606: PUSH
52607: EMPTY
52608: LIST
52609: LIST
52610: PUSH
52611: LD_INT 0
52613: PUSH
52614: LD_INT 3
52616: PUSH
52617: EMPTY
52618: LIST
52619: LIST
52620: PUSH
52621: LD_INT 0
52623: PUSH
52624: LD_INT 2
52626: PUSH
52627: EMPTY
52628: LIST
52629: LIST
52630: PUSH
52631: LD_INT 1
52633: PUSH
52634: LD_INT 3
52636: PUSH
52637: EMPTY
52638: LIST
52639: LIST
52640: PUSH
52641: LD_INT 1
52643: PUSH
52644: LD_INT 4
52646: PUSH
52647: EMPTY
52648: LIST
52649: LIST
52650: PUSH
52651: LD_INT 0
52653: PUSH
52654: LD_INT 4
52656: PUSH
52657: EMPTY
52658: LIST
52659: LIST
52660: PUSH
52661: LD_INT 1
52663: NEG
52664: PUSH
52665: LD_INT 3
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 1
52674: NEG
52675: PUSH
52676: LD_INT 2
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 2
52685: PUSH
52686: LD_INT 4
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 2
52695: NEG
52696: PUSH
52697: LD_INT 2
52699: PUSH
52700: EMPTY
52701: LIST
52702: LIST
52703: PUSH
52704: LD_INT 4
52706: NEG
52707: PUSH
52708: LD_INT 0
52710: PUSH
52711: EMPTY
52712: LIST
52713: LIST
52714: PUSH
52715: LD_INT 4
52717: NEG
52718: PUSH
52719: LD_INT 1
52721: NEG
52722: PUSH
52723: EMPTY
52724: LIST
52725: LIST
52726: PUSH
52727: LD_INT 3
52729: NEG
52730: PUSH
52731: LD_INT 0
52733: PUSH
52734: EMPTY
52735: LIST
52736: LIST
52737: PUSH
52738: LD_INT 3
52740: NEG
52741: PUSH
52742: LD_INT 1
52744: PUSH
52745: EMPTY
52746: LIST
52747: LIST
52748: PUSH
52749: LD_INT 4
52751: NEG
52752: PUSH
52753: LD_INT 1
52755: PUSH
52756: EMPTY
52757: LIST
52758: LIST
52759: PUSH
52760: LD_INT 5
52762: NEG
52763: PUSH
52764: LD_INT 0
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 5
52773: NEG
52774: PUSH
52775: LD_INT 1
52777: NEG
52778: PUSH
52779: EMPTY
52780: LIST
52781: LIST
52782: PUSH
52783: LD_INT 5
52785: NEG
52786: PUSH
52787: LD_INT 2
52789: NEG
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 3
52797: NEG
52798: PUSH
52799: LD_INT 2
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 3
52808: NEG
52809: PUSH
52810: LD_INT 3
52812: NEG
52813: PUSH
52814: EMPTY
52815: LIST
52816: LIST
52817: PUSH
52818: LD_INT 3
52820: NEG
52821: PUSH
52822: LD_INT 4
52824: NEG
52825: PUSH
52826: EMPTY
52827: LIST
52828: LIST
52829: PUSH
52830: LD_INT 2
52832: NEG
52833: PUSH
52834: LD_INT 3
52836: NEG
52837: PUSH
52838: EMPTY
52839: LIST
52840: LIST
52841: PUSH
52842: LD_INT 2
52844: NEG
52845: PUSH
52846: LD_INT 2
52848: NEG
52849: PUSH
52850: EMPTY
52851: LIST
52852: LIST
52853: PUSH
52854: LD_INT 3
52856: NEG
52857: PUSH
52858: LD_INT 2
52860: NEG
52861: PUSH
52862: EMPTY
52863: LIST
52864: LIST
52865: PUSH
52866: LD_INT 4
52868: NEG
52869: PUSH
52870: LD_INT 3
52872: NEG
52873: PUSH
52874: EMPTY
52875: LIST
52876: LIST
52877: PUSH
52878: LD_INT 4
52880: NEG
52881: PUSH
52882: LD_INT 4
52884: NEG
52885: PUSH
52886: EMPTY
52887: LIST
52888: LIST
52889: PUSH
52890: LD_INT 2
52892: NEG
52893: PUSH
52894: LD_INT 4
52896: NEG
52897: PUSH
52898: EMPTY
52899: LIST
52900: LIST
52901: PUSH
52902: LD_INT 4
52904: NEG
52905: PUSH
52906: LD_INT 2
52908: NEG
52909: PUSH
52910: EMPTY
52911: LIST
52912: LIST
52913: PUSH
52914: LD_INT 0
52916: PUSH
52917: LD_INT 4
52919: NEG
52920: PUSH
52921: EMPTY
52922: LIST
52923: LIST
52924: PUSH
52925: LD_INT 0
52927: PUSH
52928: LD_INT 5
52930: NEG
52931: PUSH
52932: EMPTY
52933: LIST
52934: LIST
52935: PUSH
52936: LD_INT 1
52938: PUSH
52939: LD_INT 4
52941: NEG
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 1
52949: PUSH
52950: LD_INT 3
52952: NEG
52953: PUSH
52954: EMPTY
52955: LIST
52956: LIST
52957: PUSH
52958: LD_INT 0
52960: PUSH
52961: LD_INT 3
52963: NEG
52964: PUSH
52965: EMPTY
52966: LIST
52967: LIST
52968: PUSH
52969: LD_INT 1
52971: NEG
52972: PUSH
52973: LD_INT 4
52975: NEG
52976: PUSH
52977: EMPTY
52978: LIST
52979: LIST
52980: PUSH
52981: LD_INT 1
52983: NEG
52984: PUSH
52985: LD_INT 5
52987: NEG
52988: PUSH
52989: EMPTY
52990: LIST
52991: LIST
52992: PUSH
52993: LD_INT 2
52995: PUSH
52996: LD_INT 3
52998: NEG
52999: PUSH
53000: EMPTY
53001: LIST
53002: LIST
53003: PUSH
53004: LD_INT 2
53006: NEG
53007: PUSH
53008: LD_INT 5
53010: NEG
53011: PUSH
53012: EMPTY
53013: LIST
53014: LIST
53015: PUSH
53016: EMPTY
53017: LIST
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
53063: LD_ADDR_VAR 0 31
53067: PUSH
53068: LD_INT 0
53070: PUSH
53071: LD_INT 4
53073: PUSH
53074: EMPTY
53075: LIST
53076: LIST
53077: PUSH
53078: LD_INT 0
53080: PUSH
53081: LD_INT 3
53083: PUSH
53084: EMPTY
53085: LIST
53086: LIST
53087: PUSH
53088: LD_INT 1
53090: PUSH
53091: LD_INT 4
53093: PUSH
53094: EMPTY
53095: LIST
53096: LIST
53097: PUSH
53098: LD_INT 1
53100: PUSH
53101: LD_INT 5
53103: PUSH
53104: EMPTY
53105: LIST
53106: LIST
53107: PUSH
53108: LD_INT 0
53110: PUSH
53111: LD_INT 5
53113: PUSH
53114: EMPTY
53115: LIST
53116: LIST
53117: PUSH
53118: LD_INT 1
53120: NEG
53121: PUSH
53122: LD_INT 4
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 1
53131: NEG
53132: PUSH
53133: LD_INT 3
53135: PUSH
53136: EMPTY
53137: LIST
53138: LIST
53139: PUSH
53140: LD_INT 2
53142: PUSH
53143: LD_INT 5
53145: PUSH
53146: EMPTY
53147: LIST
53148: LIST
53149: PUSH
53150: LD_INT 2
53152: NEG
53153: PUSH
53154: LD_INT 3
53156: PUSH
53157: EMPTY
53158: LIST
53159: LIST
53160: PUSH
53161: LD_INT 3
53163: NEG
53164: PUSH
53165: LD_INT 0
53167: PUSH
53168: EMPTY
53169: LIST
53170: LIST
53171: PUSH
53172: LD_INT 3
53174: NEG
53175: PUSH
53176: LD_INT 1
53178: NEG
53179: PUSH
53180: EMPTY
53181: LIST
53182: LIST
53183: PUSH
53184: LD_INT 2
53186: NEG
53187: PUSH
53188: LD_INT 0
53190: PUSH
53191: EMPTY
53192: LIST
53193: LIST
53194: PUSH
53195: LD_INT 2
53197: NEG
53198: PUSH
53199: LD_INT 1
53201: PUSH
53202: EMPTY
53203: LIST
53204: LIST
53205: PUSH
53206: LD_INT 3
53208: NEG
53209: PUSH
53210: LD_INT 1
53212: PUSH
53213: EMPTY
53214: LIST
53215: LIST
53216: PUSH
53217: LD_INT 4
53219: NEG
53220: PUSH
53221: LD_INT 0
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 4
53230: NEG
53231: PUSH
53232: LD_INT 1
53234: NEG
53235: PUSH
53236: EMPTY
53237: LIST
53238: LIST
53239: PUSH
53240: LD_INT 4
53242: NEG
53243: PUSH
53244: LD_INT 2
53246: NEG
53247: PUSH
53248: EMPTY
53249: LIST
53250: LIST
53251: PUSH
53252: LD_INT 2
53254: NEG
53255: PUSH
53256: LD_INT 2
53258: PUSH
53259: EMPTY
53260: LIST
53261: LIST
53262: PUSH
53263: LD_INT 4
53265: NEG
53266: PUSH
53267: LD_INT 4
53269: NEG
53270: PUSH
53271: EMPTY
53272: LIST
53273: LIST
53274: PUSH
53275: LD_INT 4
53277: NEG
53278: PUSH
53279: LD_INT 5
53281: NEG
53282: PUSH
53283: EMPTY
53284: LIST
53285: LIST
53286: PUSH
53287: LD_INT 3
53289: NEG
53290: PUSH
53291: LD_INT 4
53293: NEG
53294: PUSH
53295: EMPTY
53296: LIST
53297: LIST
53298: PUSH
53299: LD_INT 3
53301: NEG
53302: PUSH
53303: LD_INT 3
53305: NEG
53306: PUSH
53307: EMPTY
53308: LIST
53309: LIST
53310: PUSH
53311: LD_INT 4
53313: NEG
53314: PUSH
53315: LD_INT 3
53317: NEG
53318: PUSH
53319: EMPTY
53320: LIST
53321: LIST
53322: PUSH
53323: LD_INT 5
53325: NEG
53326: PUSH
53327: LD_INT 4
53329: NEG
53330: PUSH
53331: EMPTY
53332: LIST
53333: LIST
53334: PUSH
53335: LD_INT 5
53337: NEG
53338: PUSH
53339: LD_INT 5
53341: NEG
53342: PUSH
53343: EMPTY
53344: LIST
53345: LIST
53346: PUSH
53347: LD_INT 3
53349: NEG
53350: PUSH
53351: LD_INT 5
53353: NEG
53354: PUSH
53355: EMPTY
53356: LIST
53357: LIST
53358: PUSH
53359: LD_INT 5
53361: NEG
53362: PUSH
53363: LD_INT 3
53365: NEG
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 0
53373: PUSH
53374: LD_INT 3
53376: NEG
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 0
53384: PUSH
53385: LD_INT 4
53387: NEG
53388: PUSH
53389: EMPTY
53390: LIST
53391: LIST
53392: PUSH
53393: LD_INT 1
53395: PUSH
53396: LD_INT 3
53398: NEG
53399: PUSH
53400: EMPTY
53401: LIST
53402: LIST
53403: PUSH
53404: LD_INT 1
53406: PUSH
53407: LD_INT 2
53409: NEG
53410: PUSH
53411: EMPTY
53412: LIST
53413: LIST
53414: PUSH
53415: LD_INT 0
53417: PUSH
53418: LD_INT 2
53420: NEG
53421: PUSH
53422: EMPTY
53423: LIST
53424: LIST
53425: PUSH
53426: LD_INT 1
53428: NEG
53429: PUSH
53430: LD_INT 3
53432: NEG
53433: PUSH
53434: EMPTY
53435: LIST
53436: LIST
53437: PUSH
53438: LD_INT 1
53440: NEG
53441: PUSH
53442: LD_INT 4
53444: NEG
53445: PUSH
53446: EMPTY
53447: LIST
53448: LIST
53449: PUSH
53450: LD_INT 2
53452: PUSH
53453: LD_INT 2
53455: NEG
53456: PUSH
53457: EMPTY
53458: LIST
53459: LIST
53460: PUSH
53461: LD_INT 2
53463: NEG
53464: PUSH
53465: LD_INT 4
53467: NEG
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: PUSH
53473: LD_INT 4
53475: PUSH
53476: LD_INT 0
53478: PUSH
53479: EMPTY
53480: LIST
53481: LIST
53482: PUSH
53483: LD_INT 4
53485: PUSH
53486: LD_INT 1
53488: NEG
53489: PUSH
53490: EMPTY
53491: LIST
53492: LIST
53493: PUSH
53494: LD_INT 5
53496: PUSH
53497: LD_INT 0
53499: PUSH
53500: EMPTY
53501: LIST
53502: LIST
53503: PUSH
53504: LD_INT 5
53506: PUSH
53507: LD_INT 1
53509: PUSH
53510: EMPTY
53511: LIST
53512: LIST
53513: PUSH
53514: LD_INT 4
53516: PUSH
53517: LD_INT 1
53519: PUSH
53520: EMPTY
53521: LIST
53522: LIST
53523: PUSH
53524: LD_INT 3
53526: PUSH
53527: LD_INT 0
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 3
53536: PUSH
53537: LD_INT 1
53539: NEG
53540: PUSH
53541: EMPTY
53542: LIST
53543: LIST
53544: PUSH
53545: LD_INT 3
53547: PUSH
53548: LD_INT 2
53550: NEG
53551: PUSH
53552: EMPTY
53553: LIST
53554: LIST
53555: PUSH
53556: LD_INT 5
53558: PUSH
53559: LD_INT 2
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: EMPTY
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: LIST
53602: LIST
53603: LIST
53604: LIST
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: LIST
53612: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
53613: LD_ADDR_VAR 0 32
53617: PUSH
53618: LD_INT 4
53620: NEG
53621: PUSH
53622: LD_INT 0
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 4
53631: NEG
53632: PUSH
53633: LD_INT 1
53635: NEG
53636: PUSH
53637: EMPTY
53638: LIST
53639: LIST
53640: PUSH
53641: LD_INT 3
53643: NEG
53644: PUSH
53645: LD_INT 0
53647: PUSH
53648: EMPTY
53649: LIST
53650: LIST
53651: PUSH
53652: LD_INT 3
53654: NEG
53655: PUSH
53656: LD_INT 1
53658: PUSH
53659: EMPTY
53660: LIST
53661: LIST
53662: PUSH
53663: LD_INT 4
53665: NEG
53666: PUSH
53667: LD_INT 1
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 5
53676: NEG
53677: PUSH
53678: LD_INT 0
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 5
53687: NEG
53688: PUSH
53689: LD_INT 1
53691: NEG
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 5
53699: NEG
53700: PUSH
53701: LD_INT 2
53703: NEG
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 3
53711: NEG
53712: PUSH
53713: LD_INT 2
53715: PUSH
53716: EMPTY
53717: LIST
53718: LIST
53719: PUSH
53720: LD_INT 3
53722: NEG
53723: PUSH
53724: LD_INT 3
53726: NEG
53727: PUSH
53728: EMPTY
53729: LIST
53730: LIST
53731: PUSH
53732: LD_INT 3
53734: NEG
53735: PUSH
53736: LD_INT 4
53738: NEG
53739: PUSH
53740: EMPTY
53741: LIST
53742: LIST
53743: PUSH
53744: LD_INT 2
53746: NEG
53747: PUSH
53748: LD_INT 3
53750: NEG
53751: PUSH
53752: EMPTY
53753: LIST
53754: LIST
53755: PUSH
53756: LD_INT 2
53758: NEG
53759: PUSH
53760: LD_INT 2
53762: NEG
53763: PUSH
53764: EMPTY
53765: LIST
53766: LIST
53767: PUSH
53768: LD_INT 3
53770: NEG
53771: PUSH
53772: LD_INT 2
53774: NEG
53775: PUSH
53776: EMPTY
53777: LIST
53778: LIST
53779: PUSH
53780: LD_INT 4
53782: NEG
53783: PUSH
53784: LD_INT 3
53786: NEG
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 4
53794: NEG
53795: PUSH
53796: LD_INT 4
53798: NEG
53799: PUSH
53800: EMPTY
53801: LIST
53802: LIST
53803: PUSH
53804: LD_INT 2
53806: NEG
53807: PUSH
53808: LD_INT 4
53810: NEG
53811: PUSH
53812: EMPTY
53813: LIST
53814: LIST
53815: PUSH
53816: LD_INT 4
53818: NEG
53819: PUSH
53820: LD_INT 2
53822: NEG
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 0
53830: PUSH
53831: LD_INT 4
53833: NEG
53834: PUSH
53835: EMPTY
53836: LIST
53837: LIST
53838: PUSH
53839: LD_INT 0
53841: PUSH
53842: LD_INT 5
53844: NEG
53845: PUSH
53846: EMPTY
53847: LIST
53848: LIST
53849: PUSH
53850: LD_INT 1
53852: PUSH
53853: LD_INT 4
53855: NEG
53856: PUSH
53857: EMPTY
53858: LIST
53859: LIST
53860: PUSH
53861: LD_INT 1
53863: PUSH
53864: LD_INT 3
53866: NEG
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 0
53874: PUSH
53875: LD_INT 3
53877: NEG
53878: PUSH
53879: EMPTY
53880: LIST
53881: LIST
53882: PUSH
53883: LD_INT 1
53885: NEG
53886: PUSH
53887: LD_INT 4
53889: NEG
53890: PUSH
53891: EMPTY
53892: LIST
53893: LIST
53894: PUSH
53895: LD_INT 1
53897: NEG
53898: PUSH
53899: LD_INT 5
53901: NEG
53902: PUSH
53903: EMPTY
53904: LIST
53905: LIST
53906: PUSH
53907: LD_INT 2
53909: PUSH
53910: LD_INT 3
53912: NEG
53913: PUSH
53914: EMPTY
53915: LIST
53916: LIST
53917: PUSH
53918: LD_INT 2
53920: NEG
53921: PUSH
53922: LD_INT 5
53924: NEG
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 3
53932: PUSH
53933: LD_INT 0
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 3
53942: PUSH
53943: LD_INT 1
53945: NEG
53946: PUSH
53947: EMPTY
53948: LIST
53949: LIST
53950: PUSH
53951: LD_INT 4
53953: PUSH
53954: LD_INT 0
53956: PUSH
53957: EMPTY
53958: LIST
53959: LIST
53960: PUSH
53961: LD_INT 4
53963: PUSH
53964: LD_INT 1
53966: PUSH
53967: EMPTY
53968: LIST
53969: LIST
53970: PUSH
53971: LD_INT 3
53973: PUSH
53974: LD_INT 1
53976: PUSH
53977: EMPTY
53978: LIST
53979: LIST
53980: PUSH
53981: LD_INT 2
53983: PUSH
53984: LD_INT 0
53986: PUSH
53987: EMPTY
53988: LIST
53989: LIST
53990: PUSH
53991: LD_INT 2
53993: PUSH
53994: LD_INT 1
53996: NEG
53997: PUSH
53998: EMPTY
53999: LIST
54000: LIST
54001: PUSH
54002: LD_INT 2
54004: PUSH
54005: LD_INT 2
54007: NEG
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: PUSH
54013: LD_INT 4
54015: PUSH
54016: LD_INT 2
54018: PUSH
54019: EMPTY
54020: LIST
54021: LIST
54022: PUSH
54023: LD_INT 4
54025: PUSH
54026: LD_INT 4
54028: PUSH
54029: EMPTY
54030: LIST
54031: LIST
54032: PUSH
54033: LD_INT 4
54035: PUSH
54036: LD_INT 3
54038: PUSH
54039: EMPTY
54040: LIST
54041: LIST
54042: PUSH
54043: LD_INT 5
54045: PUSH
54046: LD_INT 4
54048: PUSH
54049: EMPTY
54050: LIST
54051: LIST
54052: PUSH
54053: LD_INT 5
54055: PUSH
54056: LD_INT 5
54058: PUSH
54059: EMPTY
54060: LIST
54061: LIST
54062: PUSH
54063: LD_INT 4
54065: PUSH
54066: LD_INT 5
54068: PUSH
54069: EMPTY
54070: LIST
54071: LIST
54072: PUSH
54073: LD_INT 3
54075: PUSH
54076: LD_INT 4
54078: PUSH
54079: EMPTY
54080: LIST
54081: LIST
54082: PUSH
54083: LD_INT 3
54085: PUSH
54086: LD_INT 3
54088: PUSH
54089: EMPTY
54090: LIST
54091: LIST
54092: PUSH
54093: LD_INT 5
54095: PUSH
54096: LD_INT 3
54098: PUSH
54099: EMPTY
54100: LIST
54101: LIST
54102: PUSH
54103: LD_INT 3
54105: PUSH
54106: LD_INT 5
54108: PUSH
54109: EMPTY
54110: LIST
54111: LIST
54112: PUSH
54113: EMPTY
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: LIST
54134: LIST
54135: LIST
54136: LIST
54137: LIST
54138: LIST
54139: LIST
54140: LIST
54141: LIST
54142: LIST
54143: LIST
54144: LIST
54145: LIST
54146: LIST
54147: LIST
54148: LIST
54149: LIST
54150: LIST
54151: LIST
54152: LIST
54153: LIST
54154: LIST
54155: LIST
54156: LIST
54157: LIST
54158: LIST
54159: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
54160: LD_ADDR_VAR 0 33
54164: PUSH
54165: LD_INT 4
54167: NEG
54168: PUSH
54169: LD_INT 4
54171: NEG
54172: PUSH
54173: EMPTY
54174: LIST
54175: LIST
54176: PUSH
54177: LD_INT 4
54179: NEG
54180: PUSH
54181: LD_INT 5
54183: NEG
54184: PUSH
54185: EMPTY
54186: LIST
54187: LIST
54188: PUSH
54189: LD_INT 3
54191: NEG
54192: PUSH
54193: LD_INT 4
54195: NEG
54196: PUSH
54197: EMPTY
54198: LIST
54199: LIST
54200: PUSH
54201: LD_INT 3
54203: NEG
54204: PUSH
54205: LD_INT 3
54207: NEG
54208: PUSH
54209: EMPTY
54210: LIST
54211: LIST
54212: PUSH
54213: LD_INT 4
54215: NEG
54216: PUSH
54217: LD_INT 3
54219: NEG
54220: PUSH
54221: EMPTY
54222: LIST
54223: LIST
54224: PUSH
54225: LD_INT 5
54227: NEG
54228: PUSH
54229: LD_INT 4
54231: NEG
54232: PUSH
54233: EMPTY
54234: LIST
54235: LIST
54236: PUSH
54237: LD_INT 5
54239: NEG
54240: PUSH
54241: LD_INT 5
54243: NEG
54244: PUSH
54245: EMPTY
54246: LIST
54247: LIST
54248: PUSH
54249: LD_INT 3
54251: NEG
54252: PUSH
54253: LD_INT 5
54255: NEG
54256: PUSH
54257: EMPTY
54258: LIST
54259: LIST
54260: PUSH
54261: LD_INT 5
54263: NEG
54264: PUSH
54265: LD_INT 3
54267: NEG
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 0
54275: PUSH
54276: LD_INT 3
54278: NEG
54279: PUSH
54280: EMPTY
54281: LIST
54282: LIST
54283: PUSH
54284: LD_INT 0
54286: PUSH
54287: LD_INT 4
54289: NEG
54290: PUSH
54291: EMPTY
54292: LIST
54293: LIST
54294: PUSH
54295: LD_INT 1
54297: PUSH
54298: LD_INT 3
54300: NEG
54301: PUSH
54302: EMPTY
54303: LIST
54304: LIST
54305: PUSH
54306: LD_INT 1
54308: PUSH
54309: LD_INT 2
54311: NEG
54312: PUSH
54313: EMPTY
54314: LIST
54315: LIST
54316: PUSH
54317: LD_INT 0
54319: PUSH
54320: LD_INT 2
54322: NEG
54323: PUSH
54324: EMPTY
54325: LIST
54326: LIST
54327: PUSH
54328: LD_INT 1
54330: NEG
54331: PUSH
54332: LD_INT 3
54334: NEG
54335: PUSH
54336: EMPTY
54337: LIST
54338: LIST
54339: PUSH
54340: LD_INT 1
54342: NEG
54343: PUSH
54344: LD_INT 4
54346: NEG
54347: PUSH
54348: EMPTY
54349: LIST
54350: LIST
54351: PUSH
54352: LD_INT 2
54354: PUSH
54355: LD_INT 2
54357: NEG
54358: PUSH
54359: EMPTY
54360: LIST
54361: LIST
54362: PUSH
54363: LD_INT 2
54365: NEG
54366: PUSH
54367: LD_INT 4
54369: NEG
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 4
54377: PUSH
54378: LD_INT 0
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 4
54387: PUSH
54388: LD_INT 1
54390: NEG
54391: PUSH
54392: EMPTY
54393: LIST
54394: LIST
54395: PUSH
54396: LD_INT 5
54398: PUSH
54399: LD_INT 0
54401: PUSH
54402: EMPTY
54403: LIST
54404: LIST
54405: PUSH
54406: LD_INT 5
54408: PUSH
54409: LD_INT 1
54411: PUSH
54412: EMPTY
54413: LIST
54414: LIST
54415: PUSH
54416: LD_INT 4
54418: PUSH
54419: LD_INT 1
54421: PUSH
54422: EMPTY
54423: LIST
54424: LIST
54425: PUSH
54426: LD_INT 3
54428: PUSH
54429: LD_INT 0
54431: PUSH
54432: EMPTY
54433: LIST
54434: LIST
54435: PUSH
54436: LD_INT 3
54438: PUSH
54439: LD_INT 1
54441: NEG
54442: PUSH
54443: EMPTY
54444: LIST
54445: LIST
54446: PUSH
54447: LD_INT 3
54449: PUSH
54450: LD_INT 2
54452: NEG
54453: PUSH
54454: EMPTY
54455: LIST
54456: LIST
54457: PUSH
54458: LD_INT 5
54460: PUSH
54461: LD_INT 2
54463: PUSH
54464: EMPTY
54465: LIST
54466: LIST
54467: PUSH
54468: LD_INT 3
54470: PUSH
54471: LD_INT 3
54473: PUSH
54474: EMPTY
54475: LIST
54476: LIST
54477: PUSH
54478: LD_INT 3
54480: PUSH
54481: LD_INT 2
54483: PUSH
54484: EMPTY
54485: LIST
54486: LIST
54487: PUSH
54488: LD_INT 4
54490: PUSH
54491: LD_INT 3
54493: PUSH
54494: EMPTY
54495: LIST
54496: LIST
54497: PUSH
54498: LD_INT 4
54500: PUSH
54501: LD_INT 4
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: LD_INT 3
54510: PUSH
54511: LD_INT 4
54513: PUSH
54514: EMPTY
54515: LIST
54516: LIST
54517: PUSH
54518: LD_INT 2
54520: PUSH
54521: LD_INT 3
54523: PUSH
54524: EMPTY
54525: LIST
54526: LIST
54527: PUSH
54528: LD_INT 2
54530: PUSH
54531: LD_INT 2
54533: PUSH
54534: EMPTY
54535: LIST
54536: LIST
54537: PUSH
54538: LD_INT 4
54540: PUSH
54541: LD_INT 2
54543: PUSH
54544: EMPTY
54545: LIST
54546: LIST
54547: PUSH
54548: LD_INT 2
54550: PUSH
54551: LD_INT 4
54553: PUSH
54554: EMPTY
54555: LIST
54556: LIST
54557: PUSH
54558: LD_INT 0
54560: PUSH
54561: LD_INT 4
54563: PUSH
54564: EMPTY
54565: LIST
54566: LIST
54567: PUSH
54568: LD_INT 0
54570: PUSH
54571: LD_INT 3
54573: PUSH
54574: EMPTY
54575: LIST
54576: LIST
54577: PUSH
54578: LD_INT 1
54580: PUSH
54581: LD_INT 4
54583: PUSH
54584: EMPTY
54585: LIST
54586: LIST
54587: PUSH
54588: LD_INT 1
54590: PUSH
54591: LD_INT 5
54593: PUSH
54594: EMPTY
54595: LIST
54596: LIST
54597: PUSH
54598: LD_INT 0
54600: PUSH
54601: LD_INT 5
54603: PUSH
54604: EMPTY
54605: LIST
54606: LIST
54607: PUSH
54608: LD_INT 1
54610: NEG
54611: PUSH
54612: LD_INT 4
54614: PUSH
54615: EMPTY
54616: LIST
54617: LIST
54618: PUSH
54619: LD_INT 1
54621: NEG
54622: PUSH
54623: LD_INT 3
54625: PUSH
54626: EMPTY
54627: LIST
54628: LIST
54629: PUSH
54630: LD_INT 2
54632: PUSH
54633: LD_INT 5
54635: PUSH
54636: EMPTY
54637: LIST
54638: LIST
54639: PUSH
54640: LD_INT 2
54642: NEG
54643: PUSH
54644: LD_INT 3
54646: PUSH
54647: EMPTY
54648: LIST
54649: LIST
54650: PUSH
54651: EMPTY
54652: LIST
54653: LIST
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: LIST
54674: LIST
54675: LIST
54676: LIST
54677: LIST
54678: LIST
54679: LIST
54680: LIST
54681: LIST
54682: LIST
54683: LIST
54684: LIST
54685: LIST
54686: LIST
54687: LIST
54688: LIST
54689: LIST
54690: LIST
54691: LIST
54692: LIST
54693: LIST
54694: LIST
54695: LIST
54696: LIST
54697: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
54698: LD_ADDR_VAR 0 34
54702: PUSH
54703: LD_INT 0
54705: PUSH
54706: LD_INT 4
54708: NEG
54709: PUSH
54710: EMPTY
54711: LIST
54712: LIST
54713: PUSH
54714: LD_INT 0
54716: PUSH
54717: LD_INT 5
54719: NEG
54720: PUSH
54721: EMPTY
54722: LIST
54723: LIST
54724: PUSH
54725: LD_INT 1
54727: PUSH
54728: LD_INT 4
54730: NEG
54731: PUSH
54732: EMPTY
54733: LIST
54734: LIST
54735: PUSH
54736: LD_INT 1
54738: PUSH
54739: LD_INT 3
54741: NEG
54742: PUSH
54743: EMPTY
54744: LIST
54745: LIST
54746: PUSH
54747: LD_INT 0
54749: PUSH
54750: LD_INT 3
54752: NEG
54753: PUSH
54754: EMPTY
54755: LIST
54756: LIST
54757: PUSH
54758: LD_INT 1
54760: NEG
54761: PUSH
54762: LD_INT 4
54764: NEG
54765: PUSH
54766: EMPTY
54767: LIST
54768: LIST
54769: PUSH
54770: LD_INT 1
54772: NEG
54773: PUSH
54774: LD_INT 5
54776: NEG
54777: PUSH
54778: EMPTY
54779: LIST
54780: LIST
54781: PUSH
54782: LD_INT 2
54784: PUSH
54785: LD_INT 3
54787: NEG
54788: PUSH
54789: EMPTY
54790: LIST
54791: LIST
54792: PUSH
54793: LD_INT 2
54795: NEG
54796: PUSH
54797: LD_INT 5
54799: NEG
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 3
54807: PUSH
54808: LD_INT 0
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 3
54817: PUSH
54818: LD_INT 1
54820: NEG
54821: PUSH
54822: EMPTY
54823: LIST
54824: LIST
54825: PUSH
54826: LD_INT 4
54828: PUSH
54829: LD_INT 0
54831: PUSH
54832: EMPTY
54833: LIST
54834: LIST
54835: PUSH
54836: LD_INT 4
54838: PUSH
54839: LD_INT 1
54841: PUSH
54842: EMPTY
54843: LIST
54844: LIST
54845: PUSH
54846: LD_INT 3
54848: PUSH
54849: LD_INT 1
54851: PUSH
54852: EMPTY
54853: LIST
54854: LIST
54855: PUSH
54856: LD_INT 2
54858: PUSH
54859: LD_INT 0
54861: PUSH
54862: EMPTY
54863: LIST
54864: LIST
54865: PUSH
54866: LD_INT 2
54868: PUSH
54869: LD_INT 1
54871: NEG
54872: PUSH
54873: EMPTY
54874: LIST
54875: LIST
54876: PUSH
54877: LD_INT 2
54879: PUSH
54880: LD_INT 2
54882: NEG
54883: PUSH
54884: EMPTY
54885: LIST
54886: LIST
54887: PUSH
54888: LD_INT 4
54890: PUSH
54891: LD_INT 2
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: PUSH
54898: LD_INT 4
54900: PUSH
54901: LD_INT 4
54903: PUSH
54904: EMPTY
54905: LIST
54906: LIST
54907: PUSH
54908: LD_INT 4
54910: PUSH
54911: LD_INT 3
54913: PUSH
54914: EMPTY
54915: LIST
54916: LIST
54917: PUSH
54918: LD_INT 5
54920: PUSH
54921: LD_INT 4
54923: PUSH
54924: EMPTY
54925: LIST
54926: LIST
54927: PUSH
54928: LD_INT 5
54930: PUSH
54931: LD_INT 5
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 4
54940: PUSH
54941: LD_INT 5
54943: PUSH
54944: EMPTY
54945: LIST
54946: LIST
54947: PUSH
54948: LD_INT 3
54950: PUSH
54951: LD_INT 4
54953: PUSH
54954: EMPTY
54955: LIST
54956: LIST
54957: PUSH
54958: LD_INT 3
54960: PUSH
54961: LD_INT 3
54963: PUSH
54964: EMPTY
54965: LIST
54966: LIST
54967: PUSH
54968: LD_INT 5
54970: PUSH
54971: LD_INT 3
54973: PUSH
54974: EMPTY
54975: LIST
54976: LIST
54977: PUSH
54978: LD_INT 3
54980: PUSH
54981: LD_INT 5
54983: PUSH
54984: EMPTY
54985: LIST
54986: LIST
54987: PUSH
54988: LD_INT 0
54990: PUSH
54991: LD_INT 3
54993: PUSH
54994: EMPTY
54995: LIST
54996: LIST
54997: PUSH
54998: LD_INT 0
55000: PUSH
55001: LD_INT 2
55003: PUSH
55004: EMPTY
55005: LIST
55006: LIST
55007: PUSH
55008: LD_INT 1
55010: PUSH
55011: LD_INT 3
55013: PUSH
55014: EMPTY
55015: LIST
55016: LIST
55017: PUSH
55018: LD_INT 1
55020: PUSH
55021: LD_INT 4
55023: PUSH
55024: EMPTY
55025: LIST
55026: LIST
55027: PUSH
55028: LD_INT 0
55030: PUSH
55031: LD_INT 4
55033: PUSH
55034: EMPTY
55035: LIST
55036: LIST
55037: PUSH
55038: LD_INT 1
55040: NEG
55041: PUSH
55042: LD_INT 3
55044: PUSH
55045: EMPTY
55046: LIST
55047: LIST
55048: PUSH
55049: LD_INT 1
55051: NEG
55052: PUSH
55053: LD_INT 2
55055: PUSH
55056: EMPTY
55057: LIST
55058: LIST
55059: PUSH
55060: LD_INT 2
55062: PUSH
55063: LD_INT 4
55065: PUSH
55066: EMPTY
55067: LIST
55068: LIST
55069: PUSH
55070: LD_INT 2
55072: NEG
55073: PUSH
55074: LD_INT 2
55076: PUSH
55077: EMPTY
55078: LIST
55079: LIST
55080: PUSH
55081: LD_INT 4
55083: NEG
55084: PUSH
55085: LD_INT 0
55087: PUSH
55088: EMPTY
55089: LIST
55090: LIST
55091: PUSH
55092: LD_INT 4
55094: NEG
55095: PUSH
55096: LD_INT 1
55098: NEG
55099: PUSH
55100: EMPTY
55101: LIST
55102: LIST
55103: PUSH
55104: LD_INT 3
55106: NEG
55107: PUSH
55108: LD_INT 0
55110: PUSH
55111: EMPTY
55112: LIST
55113: LIST
55114: PUSH
55115: LD_INT 3
55117: NEG
55118: PUSH
55119: LD_INT 1
55121: PUSH
55122: EMPTY
55123: LIST
55124: LIST
55125: PUSH
55126: LD_INT 4
55128: NEG
55129: PUSH
55130: LD_INT 1
55132: PUSH
55133: EMPTY
55134: LIST
55135: LIST
55136: PUSH
55137: LD_INT 5
55139: NEG
55140: PUSH
55141: LD_INT 0
55143: PUSH
55144: EMPTY
55145: LIST
55146: LIST
55147: PUSH
55148: LD_INT 5
55150: NEG
55151: PUSH
55152: LD_INT 1
55154: NEG
55155: PUSH
55156: EMPTY
55157: LIST
55158: LIST
55159: PUSH
55160: LD_INT 5
55162: NEG
55163: PUSH
55164: LD_INT 2
55166: NEG
55167: PUSH
55168: EMPTY
55169: LIST
55170: LIST
55171: PUSH
55172: LD_INT 3
55174: NEG
55175: PUSH
55176: LD_INT 2
55178: PUSH
55179: EMPTY
55180: LIST
55181: LIST
55182: PUSH
55183: EMPTY
55184: LIST
55185: LIST
55186: LIST
55187: LIST
55188: LIST
55189: LIST
55190: LIST
55191: LIST
55192: LIST
55193: LIST
55194: LIST
55195: LIST
55196: LIST
55197: LIST
55198: LIST
55199: LIST
55200: LIST
55201: LIST
55202: LIST
55203: LIST
55204: LIST
55205: LIST
55206: LIST
55207: LIST
55208: LIST
55209: LIST
55210: LIST
55211: LIST
55212: LIST
55213: LIST
55214: LIST
55215: LIST
55216: LIST
55217: LIST
55218: LIST
55219: LIST
55220: LIST
55221: LIST
55222: LIST
55223: LIST
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: ST_TO_ADDR
// end ; end ;
55230: GO 55233
55232: POP
// case btype of b_depot , b_warehouse :
55233: LD_VAR 0 1
55237: PUSH
55238: LD_INT 0
55240: DOUBLE
55241: EQUAL
55242: IFTRUE 55252
55244: LD_INT 1
55246: DOUBLE
55247: EQUAL
55248: IFTRUE 55252
55250: GO 55453
55252: POP
// case nation of nation_american :
55253: LD_VAR 0 5
55257: PUSH
55258: LD_INT 1
55260: DOUBLE
55261: EQUAL
55262: IFTRUE 55266
55264: GO 55322
55266: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
55267: LD_ADDR_VAR 0 9
55271: PUSH
55272: LD_VAR 0 11
55276: PUSH
55277: LD_VAR 0 12
55281: PUSH
55282: LD_VAR 0 13
55286: PUSH
55287: LD_VAR 0 14
55291: PUSH
55292: LD_VAR 0 15
55296: PUSH
55297: LD_VAR 0 16
55301: PUSH
55302: EMPTY
55303: LIST
55304: LIST
55305: LIST
55306: LIST
55307: LIST
55308: LIST
55309: PUSH
55310: LD_VAR 0 4
55314: PUSH
55315: LD_INT 1
55317: PLUS
55318: ARRAY
55319: ST_TO_ADDR
55320: GO 55451
55322: LD_INT 2
55324: DOUBLE
55325: EQUAL
55326: IFTRUE 55330
55328: GO 55386
55330: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
55331: LD_ADDR_VAR 0 9
55335: PUSH
55336: LD_VAR 0 17
55340: PUSH
55341: LD_VAR 0 18
55345: PUSH
55346: LD_VAR 0 19
55350: PUSH
55351: LD_VAR 0 20
55355: PUSH
55356: LD_VAR 0 21
55360: PUSH
55361: LD_VAR 0 22
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: LIST
55373: PUSH
55374: LD_VAR 0 4
55378: PUSH
55379: LD_INT 1
55381: PLUS
55382: ARRAY
55383: ST_TO_ADDR
55384: GO 55451
55386: LD_INT 3
55388: DOUBLE
55389: EQUAL
55390: IFTRUE 55394
55392: GO 55450
55394: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
55395: LD_ADDR_VAR 0 9
55399: PUSH
55400: LD_VAR 0 23
55404: PUSH
55405: LD_VAR 0 24
55409: PUSH
55410: LD_VAR 0 25
55414: PUSH
55415: LD_VAR 0 26
55419: PUSH
55420: LD_VAR 0 27
55424: PUSH
55425: LD_VAR 0 28
55429: PUSH
55430: EMPTY
55431: LIST
55432: LIST
55433: LIST
55434: LIST
55435: LIST
55436: LIST
55437: PUSH
55438: LD_VAR 0 4
55442: PUSH
55443: LD_INT 1
55445: PLUS
55446: ARRAY
55447: ST_TO_ADDR
55448: GO 55451
55450: POP
55451: GO 56006
55453: LD_INT 2
55455: DOUBLE
55456: EQUAL
55457: IFTRUE 55467
55459: LD_INT 3
55461: DOUBLE
55462: EQUAL
55463: IFTRUE 55467
55465: GO 55523
55467: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
55468: LD_ADDR_VAR 0 9
55472: PUSH
55473: LD_VAR 0 29
55477: PUSH
55478: LD_VAR 0 30
55482: PUSH
55483: LD_VAR 0 31
55487: PUSH
55488: LD_VAR 0 32
55492: PUSH
55493: LD_VAR 0 33
55497: PUSH
55498: LD_VAR 0 34
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: LIST
55510: PUSH
55511: LD_VAR 0 4
55515: PUSH
55516: LD_INT 1
55518: PLUS
55519: ARRAY
55520: ST_TO_ADDR
55521: GO 56006
55523: LD_INT 16
55525: DOUBLE
55526: EQUAL
55527: IFTRUE 55585
55529: LD_INT 17
55531: DOUBLE
55532: EQUAL
55533: IFTRUE 55585
55535: LD_INT 18
55537: DOUBLE
55538: EQUAL
55539: IFTRUE 55585
55541: LD_INT 19
55543: DOUBLE
55544: EQUAL
55545: IFTRUE 55585
55547: LD_INT 22
55549: DOUBLE
55550: EQUAL
55551: IFTRUE 55585
55553: LD_INT 20
55555: DOUBLE
55556: EQUAL
55557: IFTRUE 55585
55559: LD_INT 21
55561: DOUBLE
55562: EQUAL
55563: IFTRUE 55585
55565: LD_INT 23
55567: DOUBLE
55568: EQUAL
55569: IFTRUE 55585
55571: LD_INT 24
55573: DOUBLE
55574: EQUAL
55575: IFTRUE 55585
55577: LD_INT 25
55579: DOUBLE
55580: EQUAL
55581: IFTRUE 55585
55583: GO 55641
55585: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
55586: LD_ADDR_VAR 0 9
55590: PUSH
55591: LD_VAR 0 35
55595: PUSH
55596: LD_VAR 0 36
55600: PUSH
55601: LD_VAR 0 37
55605: PUSH
55606: LD_VAR 0 38
55610: PUSH
55611: LD_VAR 0 39
55615: PUSH
55616: LD_VAR 0 40
55620: PUSH
55621: EMPTY
55622: LIST
55623: LIST
55624: LIST
55625: LIST
55626: LIST
55627: LIST
55628: PUSH
55629: LD_VAR 0 4
55633: PUSH
55634: LD_INT 1
55636: PLUS
55637: ARRAY
55638: ST_TO_ADDR
55639: GO 56006
55641: LD_INT 6
55643: DOUBLE
55644: EQUAL
55645: IFTRUE 55697
55647: LD_INT 7
55649: DOUBLE
55650: EQUAL
55651: IFTRUE 55697
55653: LD_INT 8
55655: DOUBLE
55656: EQUAL
55657: IFTRUE 55697
55659: LD_INT 13
55661: DOUBLE
55662: EQUAL
55663: IFTRUE 55697
55665: LD_INT 12
55667: DOUBLE
55668: EQUAL
55669: IFTRUE 55697
55671: LD_INT 15
55673: DOUBLE
55674: EQUAL
55675: IFTRUE 55697
55677: LD_INT 11
55679: DOUBLE
55680: EQUAL
55681: IFTRUE 55697
55683: LD_INT 14
55685: DOUBLE
55686: EQUAL
55687: IFTRUE 55697
55689: LD_INT 10
55691: DOUBLE
55692: EQUAL
55693: IFTRUE 55697
55695: GO 55753
55697: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
55698: LD_ADDR_VAR 0 9
55702: PUSH
55703: LD_VAR 0 41
55707: PUSH
55708: LD_VAR 0 42
55712: PUSH
55713: LD_VAR 0 43
55717: PUSH
55718: LD_VAR 0 44
55722: PUSH
55723: LD_VAR 0 45
55727: PUSH
55728: LD_VAR 0 46
55732: PUSH
55733: EMPTY
55734: LIST
55735: LIST
55736: LIST
55737: LIST
55738: LIST
55739: LIST
55740: PUSH
55741: LD_VAR 0 4
55745: PUSH
55746: LD_INT 1
55748: PLUS
55749: ARRAY
55750: ST_TO_ADDR
55751: GO 56006
55753: LD_INT 36
55755: DOUBLE
55756: EQUAL
55757: IFTRUE 55761
55759: GO 55817
55761: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
55762: LD_ADDR_VAR 0 9
55766: PUSH
55767: LD_VAR 0 47
55771: PUSH
55772: LD_VAR 0 48
55776: PUSH
55777: LD_VAR 0 49
55781: PUSH
55782: LD_VAR 0 50
55786: PUSH
55787: LD_VAR 0 51
55791: PUSH
55792: LD_VAR 0 52
55796: PUSH
55797: EMPTY
55798: LIST
55799: LIST
55800: LIST
55801: LIST
55802: LIST
55803: LIST
55804: PUSH
55805: LD_VAR 0 4
55809: PUSH
55810: LD_INT 1
55812: PLUS
55813: ARRAY
55814: ST_TO_ADDR
55815: GO 56006
55817: LD_INT 4
55819: DOUBLE
55820: EQUAL
55821: IFTRUE 55843
55823: LD_INT 5
55825: DOUBLE
55826: EQUAL
55827: IFTRUE 55843
55829: LD_INT 34
55831: DOUBLE
55832: EQUAL
55833: IFTRUE 55843
55835: LD_INT 37
55837: DOUBLE
55838: EQUAL
55839: IFTRUE 55843
55841: GO 55899
55843: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
55844: LD_ADDR_VAR 0 9
55848: PUSH
55849: LD_VAR 0 53
55853: PUSH
55854: LD_VAR 0 54
55858: PUSH
55859: LD_VAR 0 55
55863: PUSH
55864: LD_VAR 0 56
55868: PUSH
55869: LD_VAR 0 57
55873: PUSH
55874: LD_VAR 0 58
55878: PUSH
55879: EMPTY
55880: LIST
55881: LIST
55882: LIST
55883: LIST
55884: LIST
55885: LIST
55886: PUSH
55887: LD_VAR 0 4
55891: PUSH
55892: LD_INT 1
55894: PLUS
55895: ARRAY
55896: ST_TO_ADDR
55897: GO 56006
55899: LD_INT 31
55901: DOUBLE
55902: EQUAL
55903: IFTRUE 55949
55905: LD_INT 32
55907: DOUBLE
55908: EQUAL
55909: IFTRUE 55949
55911: LD_INT 33
55913: DOUBLE
55914: EQUAL
55915: IFTRUE 55949
55917: LD_INT 27
55919: DOUBLE
55920: EQUAL
55921: IFTRUE 55949
55923: LD_INT 26
55925: DOUBLE
55926: EQUAL
55927: IFTRUE 55949
55929: LD_INT 28
55931: DOUBLE
55932: EQUAL
55933: IFTRUE 55949
55935: LD_INT 29
55937: DOUBLE
55938: EQUAL
55939: IFTRUE 55949
55941: LD_INT 30
55943: DOUBLE
55944: EQUAL
55945: IFTRUE 55949
55947: GO 56005
55949: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
55950: LD_ADDR_VAR 0 9
55954: PUSH
55955: LD_VAR 0 59
55959: PUSH
55960: LD_VAR 0 60
55964: PUSH
55965: LD_VAR 0 61
55969: PUSH
55970: LD_VAR 0 62
55974: PUSH
55975: LD_VAR 0 63
55979: PUSH
55980: LD_VAR 0 64
55984: PUSH
55985: EMPTY
55986: LIST
55987: LIST
55988: LIST
55989: LIST
55990: LIST
55991: LIST
55992: PUSH
55993: LD_VAR 0 4
55997: PUSH
55998: LD_INT 1
56000: PLUS
56001: ARRAY
56002: ST_TO_ADDR
56003: GO 56006
56005: POP
// temp_list2 = [ ] ;
56006: LD_ADDR_VAR 0 10
56010: PUSH
56011: EMPTY
56012: ST_TO_ADDR
// for i in temp_list do
56013: LD_ADDR_VAR 0 8
56017: PUSH
56018: LD_VAR 0 9
56022: PUSH
56023: FOR_IN
56024: IFFALSE 56076
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
56026: LD_ADDR_VAR 0 10
56030: PUSH
56031: LD_VAR 0 10
56035: PUSH
56036: LD_VAR 0 8
56040: PUSH
56041: LD_INT 1
56043: ARRAY
56044: PUSH
56045: LD_VAR 0 2
56049: PLUS
56050: PUSH
56051: LD_VAR 0 8
56055: PUSH
56056: LD_INT 2
56058: ARRAY
56059: PUSH
56060: LD_VAR 0 3
56064: PLUS
56065: PUSH
56066: EMPTY
56067: LIST
56068: LIST
56069: PUSH
56070: EMPTY
56071: LIST
56072: ADD
56073: ST_TO_ADDR
56074: GO 56023
56076: POP
56077: POP
// result = temp_list2 ;
56078: LD_ADDR_VAR 0 7
56082: PUSH
56083: LD_VAR 0 10
56087: ST_TO_ADDR
// end ;
56088: LD_VAR 0 7
56092: RET
// export function EnemyInRange ( unit , dist ) ; begin
56093: LD_INT 0
56095: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
56096: LD_ADDR_VAR 0 3
56100: PUSH
56101: LD_VAR 0 1
56105: PPUSH
56106: CALL_OW 255
56110: PPUSH
56111: LD_VAR 0 1
56115: PPUSH
56116: CALL_OW 250
56120: PPUSH
56121: LD_VAR 0 1
56125: PPUSH
56126: CALL_OW 251
56130: PPUSH
56131: LD_VAR 0 2
56135: PPUSH
56136: CALL 29495 0 4
56140: PUSH
56141: LD_INT 4
56143: ARRAY
56144: ST_TO_ADDR
// end ;
56145: LD_VAR 0 3
56149: RET
// export function PlayerSeeMe ( unit ) ; begin
56150: LD_INT 0
56152: PPUSH
// result := See ( your_side , unit ) ;
56153: LD_ADDR_VAR 0 2
56157: PUSH
56158: LD_OWVAR 2
56162: PPUSH
56163: LD_VAR 0 1
56167: PPUSH
56168: CALL_OW 292
56172: ST_TO_ADDR
// end ;
56173: LD_VAR 0 2
56177: RET
// export function ReverseDir ( unit ) ; begin
56178: LD_INT 0
56180: PPUSH
// if not unit then
56181: LD_VAR 0 1
56185: NOT
56186: IFFALSE 56190
// exit ;
56188: GO 56213
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
56190: LD_ADDR_VAR 0 2
56194: PUSH
56195: LD_VAR 0 1
56199: PPUSH
56200: CALL_OW 254
56204: PUSH
56205: LD_INT 3
56207: PLUS
56208: PUSH
56209: LD_INT 6
56211: MOD
56212: ST_TO_ADDR
// end ;
56213: LD_VAR 0 2
56217: RET
// export function ReverseArray ( array ) ; var i ; begin
56218: LD_INT 0
56220: PPUSH
56221: PPUSH
// if not array then
56222: LD_VAR 0 1
56226: NOT
56227: IFFALSE 56231
// exit ;
56229: GO 56286
// result := [ ] ;
56231: LD_ADDR_VAR 0 2
56235: PUSH
56236: EMPTY
56237: ST_TO_ADDR
// for i := array downto 1 do
56238: LD_ADDR_VAR 0 3
56242: PUSH
56243: DOUBLE
56244: LD_VAR 0 1
56248: INC
56249: ST_TO_ADDR
56250: LD_INT 1
56252: PUSH
56253: FOR_DOWNTO
56254: IFFALSE 56284
// result := Join ( result , array [ i ] ) ;
56256: LD_ADDR_VAR 0 2
56260: PUSH
56261: LD_VAR 0 2
56265: PPUSH
56266: LD_VAR 0 1
56270: PUSH
56271: LD_VAR 0 3
56275: ARRAY
56276: PPUSH
56277: CALL 60930 0 2
56281: ST_TO_ADDR
56282: GO 56253
56284: POP
56285: POP
// end ;
56286: LD_VAR 0 2
56290: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
56291: LD_INT 0
56293: PPUSH
56294: PPUSH
56295: PPUSH
56296: PPUSH
56297: PPUSH
56298: PPUSH
// if not unit or not hexes then
56299: LD_VAR 0 1
56303: NOT
56304: PUSH
56305: LD_VAR 0 2
56309: NOT
56310: OR
56311: IFFALSE 56315
// exit ;
56313: GO 56438
// dist := 9999 ;
56315: LD_ADDR_VAR 0 5
56319: PUSH
56320: LD_INT 9999
56322: ST_TO_ADDR
// for i = 1 to hexes do
56323: LD_ADDR_VAR 0 4
56327: PUSH
56328: DOUBLE
56329: LD_INT 1
56331: DEC
56332: ST_TO_ADDR
56333: LD_VAR 0 2
56337: PUSH
56338: FOR_TO
56339: IFFALSE 56426
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56341: LD_ADDR_VAR 0 6
56345: PUSH
56346: LD_VAR 0 1
56350: PPUSH
56351: LD_VAR 0 2
56355: PUSH
56356: LD_VAR 0 4
56360: ARRAY
56361: PUSH
56362: LD_INT 1
56364: ARRAY
56365: PPUSH
56366: LD_VAR 0 2
56370: PUSH
56371: LD_VAR 0 4
56375: ARRAY
56376: PUSH
56377: LD_INT 2
56379: ARRAY
56380: PPUSH
56381: CALL_OW 297
56385: ST_TO_ADDR
// if tdist < dist then
56386: LD_VAR 0 6
56390: PUSH
56391: LD_VAR 0 5
56395: LESS
56396: IFFALSE 56424
// begin hex := hexes [ i ] ;
56398: LD_ADDR_VAR 0 8
56402: PUSH
56403: LD_VAR 0 2
56407: PUSH
56408: LD_VAR 0 4
56412: ARRAY
56413: ST_TO_ADDR
// dist := tdist ;
56414: LD_ADDR_VAR 0 5
56418: PUSH
56419: LD_VAR 0 6
56423: ST_TO_ADDR
// end ; end ;
56424: GO 56338
56426: POP
56427: POP
// result := hex ;
56428: LD_ADDR_VAR 0 3
56432: PUSH
56433: LD_VAR 0 8
56437: ST_TO_ADDR
// end ;
56438: LD_VAR 0 3
56442: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
56443: LD_INT 0
56445: PPUSH
56446: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
56447: LD_VAR 0 1
56451: NOT
56452: PUSH
56453: LD_VAR 0 1
56457: PUSH
56458: LD_INT 21
56460: PUSH
56461: LD_INT 2
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: LD_INT 23
56470: PUSH
56471: LD_INT 2
56473: PUSH
56474: EMPTY
56475: LIST
56476: LIST
56477: PUSH
56478: EMPTY
56479: LIST
56480: LIST
56481: PPUSH
56482: CALL_OW 69
56486: IN
56487: NOT
56488: OR
56489: IFFALSE 56493
// exit ;
56491: GO 56540
// for i = 1 to 3 do
56493: LD_ADDR_VAR 0 3
56497: PUSH
56498: DOUBLE
56499: LD_INT 1
56501: DEC
56502: ST_TO_ADDR
56503: LD_INT 3
56505: PUSH
56506: FOR_TO
56507: IFFALSE 56538
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
56509: LD_VAR 0 1
56513: PPUSH
56514: CALL_OW 250
56518: PPUSH
56519: LD_VAR 0 1
56523: PPUSH
56524: CALL_OW 251
56528: PPUSH
56529: LD_INT 1
56531: PPUSH
56532: CALL_OW 453
56536: GO 56506
56538: POP
56539: POP
// end ;
56540: LD_VAR 0 2
56544: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
56545: LD_INT 0
56547: PPUSH
56548: PPUSH
56549: PPUSH
56550: PPUSH
56551: PPUSH
56552: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
56553: LD_VAR 0 1
56557: NOT
56558: PUSH
56559: LD_VAR 0 2
56563: NOT
56564: OR
56565: PUSH
56566: LD_VAR 0 1
56570: PPUSH
56571: CALL_OW 314
56575: OR
56576: IFFALSE 56580
// exit ;
56578: GO 57047
// if GetLives ( i ) < 250 then
56580: LD_VAR 0 4
56584: PPUSH
56585: CALL_OW 256
56589: PUSH
56590: LD_INT 250
56592: LESS
56593: IFFALSE 56606
// begin ComAutodestruct ( i ) ;
56595: LD_VAR 0 4
56599: PPUSH
56600: CALL 56443 0 1
// exit ;
56604: GO 57047
// end ; x := GetX ( enemy_unit ) ;
56606: LD_ADDR_VAR 0 7
56610: PUSH
56611: LD_VAR 0 2
56615: PPUSH
56616: CALL_OW 250
56620: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
56621: LD_ADDR_VAR 0 8
56625: PUSH
56626: LD_VAR 0 2
56630: PPUSH
56631: CALL_OW 251
56635: ST_TO_ADDR
// if not x or not y then
56636: LD_VAR 0 7
56640: NOT
56641: PUSH
56642: LD_VAR 0 8
56646: NOT
56647: OR
56648: IFFALSE 56652
// exit ;
56650: GO 57047
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
56652: LD_ADDR_VAR 0 6
56656: PUSH
56657: LD_VAR 0 7
56661: PPUSH
56662: LD_INT 0
56664: PPUSH
56665: LD_INT 4
56667: PPUSH
56668: CALL_OW 272
56672: PUSH
56673: LD_VAR 0 8
56677: PPUSH
56678: LD_INT 0
56680: PPUSH
56681: LD_INT 4
56683: PPUSH
56684: CALL_OW 273
56688: PUSH
56689: EMPTY
56690: LIST
56691: LIST
56692: PUSH
56693: LD_VAR 0 7
56697: PPUSH
56698: LD_INT 1
56700: PPUSH
56701: LD_INT 4
56703: PPUSH
56704: CALL_OW 272
56708: PUSH
56709: LD_VAR 0 8
56713: PPUSH
56714: LD_INT 1
56716: PPUSH
56717: LD_INT 4
56719: PPUSH
56720: CALL_OW 273
56724: PUSH
56725: EMPTY
56726: LIST
56727: LIST
56728: PUSH
56729: LD_VAR 0 7
56733: PPUSH
56734: LD_INT 2
56736: PPUSH
56737: LD_INT 4
56739: PPUSH
56740: CALL_OW 272
56744: PUSH
56745: LD_VAR 0 8
56749: PPUSH
56750: LD_INT 2
56752: PPUSH
56753: LD_INT 4
56755: PPUSH
56756: CALL_OW 273
56760: PUSH
56761: EMPTY
56762: LIST
56763: LIST
56764: PUSH
56765: LD_VAR 0 7
56769: PPUSH
56770: LD_INT 3
56772: PPUSH
56773: LD_INT 4
56775: PPUSH
56776: CALL_OW 272
56780: PUSH
56781: LD_VAR 0 8
56785: PPUSH
56786: LD_INT 3
56788: PPUSH
56789: LD_INT 4
56791: PPUSH
56792: CALL_OW 273
56796: PUSH
56797: EMPTY
56798: LIST
56799: LIST
56800: PUSH
56801: LD_VAR 0 7
56805: PPUSH
56806: LD_INT 4
56808: PPUSH
56809: LD_INT 4
56811: PPUSH
56812: CALL_OW 272
56816: PUSH
56817: LD_VAR 0 8
56821: PPUSH
56822: LD_INT 4
56824: PPUSH
56825: LD_INT 4
56827: PPUSH
56828: CALL_OW 273
56832: PUSH
56833: EMPTY
56834: LIST
56835: LIST
56836: PUSH
56837: LD_VAR 0 7
56841: PPUSH
56842: LD_INT 5
56844: PPUSH
56845: LD_INT 4
56847: PPUSH
56848: CALL_OW 272
56852: PUSH
56853: LD_VAR 0 8
56857: PPUSH
56858: LD_INT 5
56860: PPUSH
56861: LD_INT 4
56863: PPUSH
56864: CALL_OW 273
56868: PUSH
56869: EMPTY
56870: LIST
56871: LIST
56872: PUSH
56873: EMPTY
56874: LIST
56875: LIST
56876: LIST
56877: LIST
56878: LIST
56879: LIST
56880: ST_TO_ADDR
// for i = tmp downto 1 do
56881: LD_ADDR_VAR 0 4
56885: PUSH
56886: DOUBLE
56887: LD_VAR 0 6
56891: INC
56892: ST_TO_ADDR
56893: LD_INT 1
56895: PUSH
56896: FOR_DOWNTO
56897: IFFALSE 56998
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
56899: LD_VAR 0 6
56903: PUSH
56904: LD_VAR 0 4
56908: ARRAY
56909: PUSH
56910: LD_INT 1
56912: ARRAY
56913: PPUSH
56914: LD_VAR 0 6
56918: PUSH
56919: LD_VAR 0 4
56923: ARRAY
56924: PUSH
56925: LD_INT 2
56927: ARRAY
56928: PPUSH
56929: CALL_OW 488
56933: NOT
56934: PUSH
56935: LD_VAR 0 6
56939: PUSH
56940: LD_VAR 0 4
56944: ARRAY
56945: PUSH
56946: LD_INT 1
56948: ARRAY
56949: PPUSH
56950: LD_VAR 0 6
56954: PUSH
56955: LD_VAR 0 4
56959: ARRAY
56960: PUSH
56961: LD_INT 2
56963: ARRAY
56964: PPUSH
56965: CALL_OW 428
56969: PUSH
56970: LD_INT 0
56972: NONEQUAL
56973: OR
56974: IFFALSE 56996
// tmp := Delete ( tmp , i ) ;
56976: LD_ADDR_VAR 0 6
56980: PUSH
56981: LD_VAR 0 6
56985: PPUSH
56986: LD_VAR 0 4
56990: PPUSH
56991: CALL_OW 3
56995: ST_TO_ADDR
56996: GO 56896
56998: POP
56999: POP
// j := GetClosestHex ( unit , tmp ) ;
57000: LD_ADDR_VAR 0 5
57004: PUSH
57005: LD_VAR 0 1
57009: PPUSH
57010: LD_VAR 0 6
57014: PPUSH
57015: CALL 56291 0 2
57019: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
57020: LD_VAR 0 1
57024: PPUSH
57025: LD_VAR 0 5
57029: PUSH
57030: LD_INT 1
57032: ARRAY
57033: PPUSH
57034: LD_VAR 0 5
57038: PUSH
57039: LD_INT 2
57041: ARRAY
57042: PPUSH
57043: CALL_OW 111
// end ;
57047: LD_VAR 0 3
57051: RET
// export function PrepareApemanSoldier ( ) ; begin
57052: LD_INT 0
57054: PPUSH
// uc_nation := 0 ;
57055: LD_ADDR_OWVAR 21
57059: PUSH
57060: LD_INT 0
57062: ST_TO_ADDR
// hc_sex := sex_male ;
57063: LD_ADDR_OWVAR 27
57067: PUSH
57068: LD_INT 1
57070: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
57071: LD_ADDR_OWVAR 28
57075: PUSH
57076: LD_INT 15
57078: ST_TO_ADDR
// hc_gallery :=  ;
57079: LD_ADDR_OWVAR 33
57083: PUSH
57084: LD_STRING 
57086: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57087: LD_ADDR_OWVAR 31
57091: PUSH
57092: LD_INT 0
57094: PPUSH
57095: LD_INT 3
57097: PPUSH
57098: CALL_OW 12
57102: PUSH
57103: LD_INT 0
57105: PPUSH
57106: LD_INT 3
57108: PPUSH
57109: CALL_OW 12
57113: PUSH
57114: LD_INT 0
57116: PUSH
57117: LD_INT 0
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: LIST
57124: LIST
57125: ST_TO_ADDR
// end ;
57126: LD_VAR 0 1
57130: RET
// export function PrepareApemanEngineer ( ) ; begin
57131: LD_INT 0
57133: PPUSH
// uc_nation := 0 ;
57134: LD_ADDR_OWVAR 21
57138: PUSH
57139: LD_INT 0
57141: ST_TO_ADDR
// hc_sex := sex_male ;
57142: LD_ADDR_OWVAR 27
57146: PUSH
57147: LD_INT 1
57149: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
57150: LD_ADDR_OWVAR 28
57154: PUSH
57155: LD_INT 16
57157: ST_TO_ADDR
// hc_gallery :=  ;
57158: LD_ADDR_OWVAR 33
57162: PUSH
57163: LD_STRING 
57165: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57166: LD_ADDR_OWVAR 31
57170: PUSH
57171: LD_INT 0
57173: PPUSH
57174: LD_INT 3
57176: PPUSH
57177: CALL_OW 12
57181: PUSH
57182: LD_INT 0
57184: PPUSH
57185: LD_INT 3
57187: PPUSH
57188: CALL_OW 12
57192: PUSH
57193: LD_INT 0
57195: PUSH
57196: LD_INT 0
57198: PUSH
57199: EMPTY
57200: LIST
57201: LIST
57202: LIST
57203: LIST
57204: ST_TO_ADDR
// end ;
57205: LD_VAR 0 1
57209: RET
// export function PrepareApeman ( agressivity ) ; begin
57210: LD_INT 0
57212: PPUSH
// uc_side := 0 ;
57213: LD_ADDR_OWVAR 20
57217: PUSH
57218: LD_INT 0
57220: ST_TO_ADDR
// uc_nation := 0 ;
57221: LD_ADDR_OWVAR 21
57225: PUSH
57226: LD_INT 0
57228: ST_TO_ADDR
// hc_sex := sex_male ;
57229: LD_ADDR_OWVAR 27
57233: PUSH
57234: LD_INT 1
57236: ST_TO_ADDR
// hc_class := class_apeman ;
57237: LD_ADDR_OWVAR 28
57241: PUSH
57242: LD_INT 12
57244: ST_TO_ADDR
// hc_gallery :=  ;
57245: LD_ADDR_OWVAR 33
57249: PUSH
57250: LD_STRING 
57252: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
57253: LD_ADDR_OWVAR 35
57257: PUSH
57258: LD_VAR 0 1
57262: NEG
57263: PPUSH
57264: LD_VAR 0 1
57268: PPUSH
57269: CALL_OW 12
57273: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57274: LD_ADDR_OWVAR 31
57278: PUSH
57279: LD_INT 0
57281: PPUSH
57282: LD_INT 3
57284: PPUSH
57285: CALL_OW 12
57289: PUSH
57290: LD_INT 0
57292: PPUSH
57293: LD_INT 3
57295: PPUSH
57296: CALL_OW 12
57300: PUSH
57301: LD_INT 0
57303: PUSH
57304: LD_INT 0
57306: PUSH
57307: EMPTY
57308: LIST
57309: LIST
57310: LIST
57311: LIST
57312: ST_TO_ADDR
// end ;
57313: LD_VAR 0 2
57317: RET
// export function PrepareTiger ( agressivity ) ; begin
57318: LD_INT 0
57320: PPUSH
// uc_side := 0 ;
57321: LD_ADDR_OWVAR 20
57325: PUSH
57326: LD_INT 0
57328: ST_TO_ADDR
// uc_nation := 0 ;
57329: LD_ADDR_OWVAR 21
57333: PUSH
57334: LD_INT 0
57336: ST_TO_ADDR
// hc_class := class_tiger ;
57337: LD_ADDR_OWVAR 28
57341: PUSH
57342: LD_INT 14
57344: ST_TO_ADDR
// hc_gallery :=  ;
57345: LD_ADDR_OWVAR 33
57349: PUSH
57350: LD_STRING 
57352: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
57353: LD_ADDR_OWVAR 35
57357: PUSH
57358: LD_VAR 0 1
57362: NEG
57363: PPUSH
57364: LD_VAR 0 1
57368: PPUSH
57369: CALL_OW 12
57373: ST_TO_ADDR
// end ;
57374: LD_VAR 0 2
57378: RET
// export function PrepareEnchidna ( ) ; begin
57379: LD_INT 0
57381: PPUSH
// uc_side := 0 ;
57382: LD_ADDR_OWVAR 20
57386: PUSH
57387: LD_INT 0
57389: ST_TO_ADDR
// uc_nation := 0 ;
57390: LD_ADDR_OWVAR 21
57394: PUSH
57395: LD_INT 0
57397: ST_TO_ADDR
// hc_class := class_baggie ;
57398: LD_ADDR_OWVAR 28
57402: PUSH
57403: LD_INT 13
57405: ST_TO_ADDR
// hc_gallery :=  ;
57406: LD_ADDR_OWVAR 33
57410: PUSH
57411: LD_STRING 
57413: ST_TO_ADDR
// end ;
57414: LD_VAR 0 1
57418: RET
// export function PrepareFrog ( ) ; begin
57419: LD_INT 0
57421: PPUSH
// uc_side := 0 ;
57422: LD_ADDR_OWVAR 20
57426: PUSH
57427: LD_INT 0
57429: ST_TO_ADDR
// uc_nation := 0 ;
57430: LD_ADDR_OWVAR 21
57434: PUSH
57435: LD_INT 0
57437: ST_TO_ADDR
// hc_class := class_frog ;
57438: LD_ADDR_OWVAR 28
57442: PUSH
57443: LD_INT 19
57445: ST_TO_ADDR
// hc_gallery :=  ;
57446: LD_ADDR_OWVAR 33
57450: PUSH
57451: LD_STRING 
57453: ST_TO_ADDR
// end ;
57454: LD_VAR 0 1
57458: RET
// export function PrepareFish ( ) ; begin
57459: LD_INT 0
57461: PPUSH
// uc_side := 0 ;
57462: LD_ADDR_OWVAR 20
57466: PUSH
57467: LD_INT 0
57469: ST_TO_ADDR
// uc_nation := 0 ;
57470: LD_ADDR_OWVAR 21
57474: PUSH
57475: LD_INT 0
57477: ST_TO_ADDR
// hc_class := class_fish ;
57478: LD_ADDR_OWVAR 28
57482: PUSH
57483: LD_INT 20
57485: ST_TO_ADDR
// hc_gallery :=  ;
57486: LD_ADDR_OWVAR 33
57490: PUSH
57491: LD_STRING 
57493: ST_TO_ADDR
// end ;
57494: LD_VAR 0 1
57498: RET
// export function PrepareBird ( ) ; begin
57499: LD_INT 0
57501: PPUSH
// uc_side := 0 ;
57502: LD_ADDR_OWVAR 20
57506: PUSH
57507: LD_INT 0
57509: ST_TO_ADDR
// uc_nation := 0 ;
57510: LD_ADDR_OWVAR 21
57514: PUSH
57515: LD_INT 0
57517: ST_TO_ADDR
// hc_class := class_phororhacos ;
57518: LD_ADDR_OWVAR 28
57522: PUSH
57523: LD_INT 18
57525: ST_TO_ADDR
// hc_gallery :=  ;
57526: LD_ADDR_OWVAR 33
57530: PUSH
57531: LD_STRING 
57533: ST_TO_ADDR
// end ;
57534: LD_VAR 0 1
57538: RET
// export function PrepareHorse ( ) ; begin
57539: LD_INT 0
57541: PPUSH
// uc_side := 0 ;
57542: LD_ADDR_OWVAR 20
57546: PUSH
57547: LD_INT 0
57549: ST_TO_ADDR
// uc_nation := 0 ;
57550: LD_ADDR_OWVAR 21
57554: PUSH
57555: LD_INT 0
57557: ST_TO_ADDR
// hc_class := class_horse ;
57558: LD_ADDR_OWVAR 28
57562: PUSH
57563: LD_INT 21
57565: ST_TO_ADDR
// hc_gallery :=  ;
57566: LD_ADDR_OWVAR 33
57570: PUSH
57571: LD_STRING 
57573: ST_TO_ADDR
// end ;
57574: LD_VAR 0 1
57578: RET
// export function PrepareMastodont ( ) ; begin
57579: LD_INT 0
57581: PPUSH
// uc_side := 0 ;
57582: LD_ADDR_OWVAR 20
57586: PUSH
57587: LD_INT 0
57589: ST_TO_ADDR
// uc_nation := 0 ;
57590: LD_ADDR_OWVAR 21
57594: PUSH
57595: LD_INT 0
57597: ST_TO_ADDR
// vc_chassis := class_mastodont ;
57598: LD_ADDR_OWVAR 37
57602: PUSH
57603: LD_INT 31
57605: ST_TO_ADDR
// vc_control := control_rider ;
57606: LD_ADDR_OWVAR 38
57610: PUSH
57611: LD_INT 4
57613: ST_TO_ADDR
// end ;
57614: LD_VAR 0 1
57618: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
57619: LD_INT 0
57621: PPUSH
57622: PPUSH
57623: PPUSH
// uc_side = 0 ;
57624: LD_ADDR_OWVAR 20
57628: PUSH
57629: LD_INT 0
57631: ST_TO_ADDR
// uc_nation = 0 ;
57632: LD_ADDR_OWVAR 21
57636: PUSH
57637: LD_INT 0
57639: ST_TO_ADDR
// InitHc_All ( ) ;
57640: CALL_OW 584
// InitVc ;
57644: CALL_OW 20
// if mastodonts then
57648: LD_VAR 0 6
57652: IFFALSE 57719
// for i = 1 to mastodonts do
57654: LD_ADDR_VAR 0 11
57658: PUSH
57659: DOUBLE
57660: LD_INT 1
57662: DEC
57663: ST_TO_ADDR
57664: LD_VAR 0 6
57668: PUSH
57669: FOR_TO
57670: IFFALSE 57717
// begin vc_chassis := 31 ;
57672: LD_ADDR_OWVAR 37
57676: PUSH
57677: LD_INT 31
57679: ST_TO_ADDR
// vc_control := control_rider ;
57680: LD_ADDR_OWVAR 38
57684: PUSH
57685: LD_INT 4
57687: ST_TO_ADDR
// animal := CreateVehicle ;
57688: LD_ADDR_VAR 0 12
57692: PUSH
57693: CALL_OW 45
57697: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57698: LD_VAR 0 12
57702: PPUSH
57703: LD_VAR 0 8
57707: PPUSH
57708: LD_INT 0
57710: PPUSH
57711: CALL 59847 0 3
// end ;
57715: GO 57669
57717: POP
57718: POP
// if horses then
57719: LD_VAR 0 5
57723: IFFALSE 57790
// for i = 1 to horses do
57725: LD_ADDR_VAR 0 11
57729: PUSH
57730: DOUBLE
57731: LD_INT 1
57733: DEC
57734: ST_TO_ADDR
57735: LD_VAR 0 5
57739: PUSH
57740: FOR_TO
57741: IFFALSE 57788
// begin hc_class := 21 ;
57743: LD_ADDR_OWVAR 28
57747: PUSH
57748: LD_INT 21
57750: ST_TO_ADDR
// hc_gallery :=  ;
57751: LD_ADDR_OWVAR 33
57755: PUSH
57756: LD_STRING 
57758: ST_TO_ADDR
// animal := CreateHuman ;
57759: LD_ADDR_VAR 0 12
57763: PUSH
57764: CALL_OW 44
57768: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57769: LD_VAR 0 12
57773: PPUSH
57774: LD_VAR 0 8
57778: PPUSH
57779: LD_INT 0
57781: PPUSH
57782: CALL 59847 0 3
// end ;
57786: GO 57740
57788: POP
57789: POP
// if birds then
57790: LD_VAR 0 1
57794: IFFALSE 57861
// for i = 1 to birds do
57796: LD_ADDR_VAR 0 11
57800: PUSH
57801: DOUBLE
57802: LD_INT 1
57804: DEC
57805: ST_TO_ADDR
57806: LD_VAR 0 1
57810: PUSH
57811: FOR_TO
57812: IFFALSE 57859
// begin hc_class = 18 ;
57814: LD_ADDR_OWVAR 28
57818: PUSH
57819: LD_INT 18
57821: ST_TO_ADDR
// hc_gallery =  ;
57822: LD_ADDR_OWVAR 33
57826: PUSH
57827: LD_STRING 
57829: ST_TO_ADDR
// animal := CreateHuman ;
57830: LD_ADDR_VAR 0 12
57834: PUSH
57835: CALL_OW 44
57839: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57840: LD_VAR 0 12
57844: PPUSH
57845: LD_VAR 0 8
57849: PPUSH
57850: LD_INT 0
57852: PPUSH
57853: CALL 59847 0 3
// end ;
57857: GO 57811
57859: POP
57860: POP
// if tigers then
57861: LD_VAR 0 2
57865: IFFALSE 57949
// for i = 1 to tigers do
57867: LD_ADDR_VAR 0 11
57871: PUSH
57872: DOUBLE
57873: LD_INT 1
57875: DEC
57876: ST_TO_ADDR
57877: LD_VAR 0 2
57881: PUSH
57882: FOR_TO
57883: IFFALSE 57947
// begin hc_class = class_tiger ;
57885: LD_ADDR_OWVAR 28
57889: PUSH
57890: LD_INT 14
57892: ST_TO_ADDR
// hc_gallery =  ;
57893: LD_ADDR_OWVAR 33
57897: PUSH
57898: LD_STRING 
57900: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
57901: LD_ADDR_OWVAR 35
57905: PUSH
57906: LD_INT 7
57908: NEG
57909: PPUSH
57910: LD_INT 7
57912: PPUSH
57913: CALL_OW 12
57917: ST_TO_ADDR
// animal := CreateHuman ;
57918: LD_ADDR_VAR 0 12
57922: PUSH
57923: CALL_OW 44
57927: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57928: LD_VAR 0 12
57932: PPUSH
57933: LD_VAR 0 8
57937: PPUSH
57938: LD_INT 0
57940: PPUSH
57941: CALL 59847 0 3
// end ;
57945: GO 57882
57947: POP
57948: POP
// if apemans then
57949: LD_VAR 0 3
57953: IFFALSE 58076
// for i = 1 to apemans do
57955: LD_ADDR_VAR 0 11
57959: PUSH
57960: DOUBLE
57961: LD_INT 1
57963: DEC
57964: ST_TO_ADDR
57965: LD_VAR 0 3
57969: PUSH
57970: FOR_TO
57971: IFFALSE 58074
// begin hc_class = class_apeman ;
57973: LD_ADDR_OWVAR 28
57977: PUSH
57978: LD_INT 12
57980: ST_TO_ADDR
// hc_gallery =  ;
57981: LD_ADDR_OWVAR 33
57985: PUSH
57986: LD_STRING 
57988: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
57989: LD_ADDR_OWVAR 35
57993: PUSH
57994: LD_INT 2
57996: NEG
57997: PPUSH
57998: LD_INT 2
58000: PPUSH
58001: CALL_OW 12
58005: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
58006: LD_ADDR_OWVAR 31
58010: PUSH
58011: LD_INT 1
58013: PPUSH
58014: LD_INT 3
58016: PPUSH
58017: CALL_OW 12
58021: PUSH
58022: LD_INT 1
58024: PPUSH
58025: LD_INT 3
58027: PPUSH
58028: CALL_OW 12
58032: PUSH
58033: LD_INT 0
58035: PUSH
58036: LD_INT 0
58038: PUSH
58039: EMPTY
58040: LIST
58041: LIST
58042: LIST
58043: LIST
58044: ST_TO_ADDR
// animal := CreateHuman ;
58045: LD_ADDR_VAR 0 12
58049: PUSH
58050: CALL_OW 44
58054: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58055: LD_VAR 0 12
58059: PPUSH
58060: LD_VAR 0 8
58064: PPUSH
58065: LD_INT 0
58067: PPUSH
58068: CALL 59847 0 3
// end ;
58072: GO 57970
58074: POP
58075: POP
// if enchidnas then
58076: LD_VAR 0 4
58080: IFFALSE 58147
// for i = 1 to enchidnas do
58082: LD_ADDR_VAR 0 11
58086: PUSH
58087: DOUBLE
58088: LD_INT 1
58090: DEC
58091: ST_TO_ADDR
58092: LD_VAR 0 4
58096: PUSH
58097: FOR_TO
58098: IFFALSE 58145
// begin hc_class = 13 ;
58100: LD_ADDR_OWVAR 28
58104: PUSH
58105: LD_INT 13
58107: ST_TO_ADDR
// hc_gallery =  ;
58108: LD_ADDR_OWVAR 33
58112: PUSH
58113: LD_STRING 
58115: ST_TO_ADDR
// animal := CreateHuman ;
58116: LD_ADDR_VAR 0 12
58120: PUSH
58121: CALL_OW 44
58125: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
58126: LD_VAR 0 12
58130: PPUSH
58131: LD_VAR 0 8
58135: PPUSH
58136: LD_INT 0
58138: PPUSH
58139: CALL 59847 0 3
// end ;
58143: GO 58097
58145: POP
58146: POP
// if fishes then
58147: LD_VAR 0 7
58151: IFFALSE 58218
// for i = 1 to fishes do
58153: LD_ADDR_VAR 0 11
58157: PUSH
58158: DOUBLE
58159: LD_INT 1
58161: DEC
58162: ST_TO_ADDR
58163: LD_VAR 0 7
58167: PUSH
58168: FOR_TO
58169: IFFALSE 58216
// begin hc_class = 20 ;
58171: LD_ADDR_OWVAR 28
58175: PUSH
58176: LD_INT 20
58178: ST_TO_ADDR
// hc_gallery =  ;
58179: LD_ADDR_OWVAR 33
58183: PUSH
58184: LD_STRING 
58186: ST_TO_ADDR
// animal := CreateHuman ;
58187: LD_ADDR_VAR 0 12
58191: PUSH
58192: CALL_OW 44
58196: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58197: LD_VAR 0 12
58201: PPUSH
58202: LD_VAR 0 9
58206: PPUSH
58207: LD_INT 0
58209: PPUSH
58210: CALL 59847 0 3
// end ;
58214: GO 58168
58216: POP
58217: POP
// end ;
58218: LD_VAR 0 10
58222: RET
// export function WantHeal ( sci , unit ) ; begin
58223: LD_INT 0
58225: PPUSH
// if GetTaskList ( sci ) > 0 then
58226: LD_VAR 0 1
58230: PPUSH
58231: CALL_OW 437
58235: PUSH
58236: LD_INT 0
58238: GREATER
58239: IFFALSE 58309
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
58241: LD_VAR 0 1
58245: PPUSH
58246: CALL_OW 437
58250: PUSH
58251: LD_INT 1
58253: ARRAY
58254: PUSH
58255: LD_INT 1
58257: ARRAY
58258: PUSH
58259: LD_STRING l
58261: EQUAL
58262: PUSH
58263: LD_VAR 0 1
58267: PPUSH
58268: CALL_OW 437
58272: PUSH
58273: LD_INT 1
58275: ARRAY
58276: PUSH
58277: LD_INT 4
58279: ARRAY
58280: PUSH
58281: LD_VAR 0 2
58285: EQUAL
58286: AND
58287: IFFALSE 58299
// result := true else
58289: LD_ADDR_VAR 0 3
58293: PUSH
58294: LD_INT 1
58296: ST_TO_ADDR
58297: GO 58307
// result := false ;
58299: LD_ADDR_VAR 0 3
58303: PUSH
58304: LD_INT 0
58306: ST_TO_ADDR
// end else
58307: GO 58317
// result := false ;
58309: LD_ADDR_VAR 0 3
58313: PUSH
58314: LD_INT 0
58316: ST_TO_ADDR
// end ;
58317: LD_VAR 0 3
58321: RET
// export function HealTarget ( sci ) ; begin
58322: LD_INT 0
58324: PPUSH
// if not sci then
58325: LD_VAR 0 1
58329: NOT
58330: IFFALSE 58334
// exit ;
58332: GO 58399
// result := 0 ;
58334: LD_ADDR_VAR 0 2
58338: PUSH
58339: LD_INT 0
58341: ST_TO_ADDR
// if GetTaskList ( sci ) then
58342: LD_VAR 0 1
58346: PPUSH
58347: CALL_OW 437
58351: IFFALSE 58399
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
58353: LD_VAR 0 1
58357: PPUSH
58358: CALL_OW 437
58362: PUSH
58363: LD_INT 1
58365: ARRAY
58366: PUSH
58367: LD_INT 1
58369: ARRAY
58370: PUSH
58371: LD_STRING l
58373: EQUAL
58374: IFFALSE 58399
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
58376: LD_ADDR_VAR 0 2
58380: PUSH
58381: LD_VAR 0 1
58385: PPUSH
58386: CALL_OW 437
58390: PUSH
58391: LD_INT 1
58393: ARRAY
58394: PUSH
58395: LD_INT 4
58397: ARRAY
58398: ST_TO_ADDR
// end ;
58399: LD_VAR 0 2
58403: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
58404: LD_INT 0
58406: PPUSH
58407: PPUSH
58408: PPUSH
58409: PPUSH
// if not base_units then
58410: LD_VAR 0 1
58414: NOT
58415: IFFALSE 58419
// exit ;
58417: GO 58506
// result := false ;
58419: LD_ADDR_VAR 0 2
58423: PUSH
58424: LD_INT 0
58426: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
58427: LD_ADDR_VAR 0 5
58431: PUSH
58432: LD_VAR 0 1
58436: PPUSH
58437: LD_INT 21
58439: PUSH
58440: LD_INT 3
58442: PUSH
58443: EMPTY
58444: LIST
58445: LIST
58446: PPUSH
58447: CALL_OW 72
58451: ST_TO_ADDR
// if not tmp then
58452: LD_VAR 0 5
58456: NOT
58457: IFFALSE 58461
// exit ;
58459: GO 58506
// for i in tmp do
58461: LD_ADDR_VAR 0 3
58465: PUSH
58466: LD_VAR 0 5
58470: PUSH
58471: FOR_IN
58472: IFFALSE 58504
// begin result := EnemyInRange ( i , 22 ) ;
58474: LD_ADDR_VAR 0 2
58478: PUSH
58479: LD_VAR 0 3
58483: PPUSH
58484: LD_INT 22
58486: PPUSH
58487: CALL 56093 0 2
58491: ST_TO_ADDR
// if result then
58492: LD_VAR 0 2
58496: IFFALSE 58502
// exit ;
58498: POP
58499: POP
58500: GO 58506
// end ;
58502: GO 58471
58504: POP
58505: POP
// end ;
58506: LD_VAR 0 2
58510: RET
// export function FilterByTag ( units , tag ) ; begin
58511: LD_INT 0
58513: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
58514: LD_ADDR_VAR 0 3
58518: PUSH
58519: LD_VAR 0 1
58523: PPUSH
58524: LD_INT 120
58526: PUSH
58527: LD_VAR 0 2
58531: PUSH
58532: EMPTY
58533: LIST
58534: LIST
58535: PPUSH
58536: CALL_OW 72
58540: ST_TO_ADDR
// end ;
58541: LD_VAR 0 3
58545: RET
// export function IsDriver ( un ) ; begin
58546: LD_INT 0
58548: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
58549: LD_ADDR_VAR 0 2
58553: PUSH
58554: LD_VAR 0 1
58558: PUSH
58559: LD_INT 55
58561: PUSH
58562: EMPTY
58563: LIST
58564: PPUSH
58565: CALL_OW 69
58569: IN
58570: ST_TO_ADDR
// end ;
58571: LD_VAR 0 2
58575: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
58576: LD_INT 0
58578: PPUSH
58579: PPUSH
// list := [ ] ;
58580: LD_ADDR_VAR 0 5
58584: PUSH
58585: EMPTY
58586: ST_TO_ADDR
// case d of 0 :
58587: LD_VAR 0 3
58591: PUSH
58592: LD_INT 0
58594: DOUBLE
58595: EQUAL
58596: IFTRUE 58600
58598: GO 58733
58600: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
58601: LD_ADDR_VAR 0 5
58605: PUSH
58606: LD_VAR 0 1
58610: PUSH
58611: LD_INT 4
58613: MINUS
58614: PUSH
58615: LD_VAR 0 2
58619: PUSH
58620: LD_INT 4
58622: MINUS
58623: PUSH
58624: LD_INT 2
58626: PUSH
58627: EMPTY
58628: LIST
58629: LIST
58630: LIST
58631: PUSH
58632: LD_VAR 0 1
58636: PUSH
58637: LD_INT 3
58639: MINUS
58640: PUSH
58641: LD_VAR 0 2
58645: PUSH
58646: LD_INT 1
58648: PUSH
58649: EMPTY
58650: LIST
58651: LIST
58652: LIST
58653: PUSH
58654: LD_VAR 0 1
58658: PUSH
58659: LD_INT 4
58661: PLUS
58662: PUSH
58663: LD_VAR 0 2
58667: PUSH
58668: LD_INT 4
58670: PUSH
58671: EMPTY
58672: LIST
58673: LIST
58674: LIST
58675: PUSH
58676: LD_VAR 0 1
58680: PUSH
58681: LD_INT 3
58683: PLUS
58684: PUSH
58685: LD_VAR 0 2
58689: PUSH
58690: LD_INT 3
58692: PLUS
58693: PUSH
58694: LD_INT 5
58696: PUSH
58697: EMPTY
58698: LIST
58699: LIST
58700: LIST
58701: PUSH
58702: LD_VAR 0 1
58706: PUSH
58707: LD_VAR 0 2
58711: PUSH
58712: LD_INT 4
58714: PLUS
58715: PUSH
58716: LD_INT 0
58718: PUSH
58719: EMPTY
58720: LIST
58721: LIST
58722: LIST
58723: PUSH
58724: EMPTY
58725: LIST
58726: LIST
58727: LIST
58728: LIST
58729: LIST
58730: ST_TO_ADDR
// end ; 1 :
58731: GO 59431
58733: LD_INT 1
58735: DOUBLE
58736: EQUAL
58737: IFTRUE 58741
58739: GO 58874
58741: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
58742: LD_ADDR_VAR 0 5
58746: PUSH
58747: LD_VAR 0 1
58751: PUSH
58752: LD_VAR 0 2
58756: PUSH
58757: LD_INT 4
58759: MINUS
58760: PUSH
58761: LD_INT 3
58763: PUSH
58764: EMPTY
58765: LIST
58766: LIST
58767: LIST
58768: PUSH
58769: LD_VAR 0 1
58773: PUSH
58774: LD_INT 3
58776: MINUS
58777: PUSH
58778: LD_VAR 0 2
58782: PUSH
58783: LD_INT 3
58785: MINUS
58786: PUSH
58787: LD_INT 2
58789: PUSH
58790: EMPTY
58791: LIST
58792: LIST
58793: LIST
58794: PUSH
58795: LD_VAR 0 1
58799: PUSH
58800: LD_INT 4
58802: MINUS
58803: PUSH
58804: LD_VAR 0 2
58808: PUSH
58809: LD_INT 1
58811: PUSH
58812: EMPTY
58813: LIST
58814: LIST
58815: LIST
58816: PUSH
58817: LD_VAR 0 1
58821: PUSH
58822: LD_VAR 0 2
58826: PUSH
58827: LD_INT 3
58829: PLUS
58830: PUSH
58831: LD_INT 0
58833: PUSH
58834: EMPTY
58835: LIST
58836: LIST
58837: LIST
58838: PUSH
58839: LD_VAR 0 1
58843: PUSH
58844: LD_INT 4
58846: PLUS
58847: PUSH
58848: LD_VAR 0 2
58852: PUSH
58853: LD_INT 4
58855: PLUS
58856: PUSH
58857: LD_INT 5
58859: PUSH
58860: EMPTY
58861: LIST
58862: LIST
58863: LIST
58864: PUSH
58865: EMPTY
58866: LIST
58867: LIST
58868: LIST
58869: LIST
58870: LIST
58871: ST_TO_ADDR
// end ; 2 :
58872: GO 59431
58874: LD_INT 2
58876: DOUBLE
58877: EQUAL
58878: IFTRUE 58882
58880: GO 59011
58882: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
58883: LD_ADDR_VAR 0 5
58887: PUSH
58888: LD_VAR 0 1
58892: PUSH
58893: LD_VAR 0 2
58897: PUSH
58898: LD_INT 3
58900: MINUS
58901: PUSH
58902: LD_INT 3
58904: PUSH
58905: EMPTY
58906: LIST
58907: LIST
58908: LIST
58909: PUSH
58910: LD_VAR 0 1
58914: PUSH
58915: LD_INT 4
58917: PLUS
58918: PUSH
58919: LD_VAR 0 2
58923: PUSH
58924: LD_INT 4
58926: PUSH
58927: EMPTY
58928: LIST
58929: LIST
58930: LIST
58931: PUSH
58932: LD_VAR 0 1
58936: PUSH
58937: LD_VAR 0 2
58941: PUSH
58942: LD_INT 4
58944: PLUS
58945: PUSH
58946: LD_INT 0
58948: PUSH
58949: EMPTY
58950: LIST
58951: LIST
58952: LIST
58953: PUSH
58954: LD_VAR 0 1
58958: PUSH
58959: LD_INT 3
58961: MINUS
58962: PUSH
58963: LD_VAR 0 2
58967: PUSH
58968: LD_INT 1
58970: PUSH
58971: EMPTY
58972: LIST
58973: LIST
58974: LIST
58975: PUSH
58976: LD_VAR 0 1
58980: PUSH
58981: LD_INT 4
58983: MINUS
58984: PUSH
58985: LD_VAR 0 2
58989: PUSH
58990: LD_INT 4
58992: MINUS
58993: PUSH
58994: LD_INT 2
58996: PUSH
58997: EMPTY
58998: LIST
58999: LIST
59000: LIST
59001: PUSH
59002: EMPTY
59003: LIST
59004: LIST
59005: LIST
59006: LIST
59007: LIST
59008: ST_TO_ADDR
// end ; 3 :
59009: GO 59431
59011: LD_INT 3
59013: DOUBLE
59014: EQUAL
59015: IFTRUE 59019
59017: GO 59152
59019: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
59020: LD_ADDR_VAR 0 5
59024: PUSH
59025: LD_VAR 0 1
59029: PUSH
59030: LD_INT 3
59032: PLUS
59033: PUSH
59034: LD_VAR 0 2
59038: PUSH
59039: LD_INT 4
59041: PUSH
59042: EMPTY
59043: LIST
59044: LIST
59045: LIST
59046: PUSH
59047: LD_VAR 0 1
59051: PUSH
59052: LD_INT 4
59054: PLUS
59055: PUSH
59056: LD_VAR 0 2
59060: PUSH
59061: LD_INT 4
59063: PLUS
59064: PUSH
59065: LD_INT 5
59067: PUSH
59068: EMPTY
59069: LIST
59070: LIST
59071: LIST
59072: PUSH
59073: LD_VAR 0 1
59077: PUSH
59078: LD_INT 4
59080: MINUS
59081: PUSH
59082: LD_VAR 0 2
59086: PUSH
59087: LD_INT 1
59089: PUSH
59090: EMPTY
59091: LIST
59092: LIST
59093: LIST
59094: PUSH
59095: LD_VAR 0 1
59099: PUSH
59100: LD_VAR 0 2
59104: PUSH
59105: LD_INT 4
59107: MINUS
59108: PUSH
59109: LD_INT 3
59111: PUSH
59112: EMPTY
59113: LIST
59114: LIST
59115: LIST
59116: PUSH
59117: LD_VAR 0 1
59121: PUSH
59122: LD_INT 3
59124: MINUS
59125: PUSH
59126: LD_VAR 0 2
59130: PUSH
59131: LD_INT 3
59133: MINUS
59134: PUSH
59135: LD_INT 2
59137: PUSH
59138: EMPTY
59139: LIST
59140: LIST
59141: LIST
59142: PUSH
59143: EMPTY
59144: LIST
59145: LIST
59146: LIST
59147: LIST
59148: LIST
59149: ST_TO_ADDR
// end ; 4 :
59150: GO 59431
59152: LD_INT 4
59154: DOUBLE
59155: EQUAL
59156: IFTRUE 59160
59158: GO 59293
59160: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59161: LD_ADDR_VAR 0 5
59165: PUSH
59166: LD_VAR 0 1
59170: PUSH
59171: LD_VAR 0 2
59175: PUSH
59176: LD_INT 4
59178: PLUS
59179: PUSH
59180: LD_INT 0
59182: PUSH
59183: EMPTY
59184: LIST
59185: LIST
59186: LIST
59187: PUSH
59188: LD_VAR 0 1
59192: PUSH
59193: LD_INT 3
59195: PLUS
59196: PUSH
59197: LD_VAR 0 2
59201: PUSH
59202: LD_INT 3
59204: PLUS
59205: PUSH
59206: LD_INT 5
59208: PUSH
59209: EMPTY
59210: LIST
59211: LIST
59212: LIST
59213: PUSH
59214: LD_VAR 0 1
59218: PUSH
59219: LD_INT 4
59221: PLUS
59222: PUSH
59223: LD_VAR 0 2
59227: PUSH
59228: LD_INT 4
59230: PUSH
59231: EMPTY
59232: LIST
59233: LIST
59234: LIST
59235: PUSH
59236: LD_VAR 0 1
59240: PUSH
59241: LD_VAR 0 2
59245: PUSH
59246: LD_INT 3
59248: MINUS
59249: PUSH
59250: LD_INT 3
59252: PUSH
59253: EMPTY
59254: LIST
59255: LIST
59256: LIST
59257: PUSH
59258: LD_VAR 0 1
59262: PUSH
59263: LD_INT 4
59265: MINUS
59266: PUSH
59267: LD_VAR 0 2
59271: PUSH
59272: LD_INT 4
59274: MINUS
59275: PUSH
59276: LD_INT 2
59278: PUSH
59279: EMPTY
59280: LIST
59281: LIST
59282: LIST
59283: PUSH
59284: EMPTY
59285: LIST
59286: LIST
59287: LIST
59288: LIST
59289: LIST
59290: ST_TO_ADDR
// end ; 5 :
59291: GO 59431
59293: LD_INT 5
59295: DOUBLE
59296: EQUAL
59297: IFTRUE 59301
59299: GO 59430
59301: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
59302: LD_ADDR_VAR 0 5
59306: PUSH
59307: LD_VAR 0 1
59311: PUSH
59312: LD_INT 4
59314: MINUS
59315: PUSH
59316: LD_VAR 0 2
59320: PUSH
59321: LD_INT 1
59323: PUSH
59324: EMPTY
59325: LIST
59326: LIST
59327: LIST
59328: PUSH
59329: LD_VAR 0 1
59333: PUSH
59334: LD_VAR 0 2
59338: PUSH
59339: LD_INT 4
59341: MINUS
59342: PUSH
59343: LD_INT 3
59345: PUSH
59346: EMPTY
59347: LIST
59348: LIST
59349: LIST
59350: PUSH
59351: LD_VAR 0 1
59355: PUSH
59356: LD_INT 4
59358: PLUS
59359: PUSH
59360: LD_VAR 0 2
59364: PUSH
59365: LD_INT 4
59367: PLUS
59368: PUSH
59369: LD_INT 5
59371: PUSH
59372: EMPTY
59373: LIST
59374: LIST
59375: LIST
59376: PUSH
59377: LD_VAR 0 1
59381: PUSH
59382: LD_INT 3
59384: PLUS
59385: PUSH
59386: LD_VAR 0 2
59390: PUSH
59391: LD_INT 4
59393: PUSH
59394: EMPTY
59395: LIST
59396: LIST
59397: LIST
59398: PUSH
59399: LD_VAR 0 1
59403: PUSH
59404: LD_VAR 0 2
59408: PUSH
59409: LD_INT 3
59411: PLUS
59412: PUSH
59413: LD_INT 0
59415: PUSH
59416: EMPTY
59417: LIST
59418: LIST
59419: LIST
59420: PUSH
59421: EMPTY
59422: LIST
59423: LIST
59424: LIST
59425: LIST
59426: LIST
59427: ST_TO_ADDR
// end ; end ;
59428: GO 59431
59430: POP
// result := list ;
59431: LD_ADDR_VAR 0 4
59435: PUSH
59436: LD_VAR 0 5
59440: ST_TO_ADDR
// end ;
59441: LD_VAR 0 4
59445: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
59446: LD_INT 0
59448: PPUSH
59449: PPUSH
59450: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
59451: LD_VAR 0 1
59455: NOT
59456: PUSH
59457: LD_VAR 0 2
59461: PUSH
59462: LD_INT 1
59464: PUSH
59465: LD_INT 2
59467: PUSH
59468: LD_INT 3
59470: PUSH
59471: LD_INT 4
59473: PUSH
59474: EMPTY
59475: LIST
59476: LIST
59477: LIST
59478: LIST
59479: IN
59480: NOT
59481: OR
59482: IFFALSE 59486
// exit ;
59484: GO 59569
// tmp := [ ] ;
59486: LD_ADDR_VAR 0 5
59490: PUSH
59491: EMPTY
59492: ST_TO_ADDR
// for i in units do
59493: LD_ADDR_VAR 0 4
59497: PUSH
59498: LD_VAR 0 1
59502: PUSH
59503: FOR_IN
59504: IFFALSE 59538
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
59506: LD_ADDR_VAR 0 5
59510: PUSH
59511: LD_VAR 0 5
59515: PPUSH
59516: LD_VAR 0 4
59520: PPUSH
59521: LD_VAR 0 2
59525: PPUSH
59526: CALL_OW 259
59530: PPUSH
59531: CALL 60930 0 2
59535: ST_TO_ADDR
59536: GO 59503
59538: POP
59539: POP
// if not tmp then
59540: LD_VAR 0 5
59544: NOT
59545: IFFALSE 59549
// exit ;
59547: GO 59569
// result := SortListByListDesc ( units , tmp ) ;
59549: LD_ADDR_VAR 0 3
59553: PUSH
59554: LD_VAR 0 1
59558: PPUSH
59559: LD_VAR 0 5
59563: PPUSH
59564: CALL_OW 77
59568: ST_TO_ADDR
// end ;
59569: LD_VAR 0 3
59573: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
59574: LD_INT 0
59576: PPUSH
59577: PPUSH
59578: PPUSH
// result := false ;
59579: LD_ADDR_VAR 0 3
59583: PUSH
59584: LD_INT 0
59586: ST_TO_ADDR
// if not building then
59587: LD_VAR 0 2
59591: NOT
59592: IFFALSE 59596
// exit ;
59594: GO 59734
// x := GetX ( building ) ;
59596: LD_ADDR_VAR 0 4
59600: PUSH
59601: LD_VAR 0 2
59605: PPUSH
59606: CALL_OW 250
59610: ST_TO_ADDR
// y := GetY ( building ) ;
59611: LD_ADDR_VAR 0 5
59615: PUSH
59616: LD_VAR 0 2
59620: PPUSH
59621: CALL_OW 251
59625: ST_TO_ADDR
// if not x or not y then
59626: LD_VAR 0 4
59630: NOT
59631: PUSH
59632: LD_VAR 0 5
59636: NOT
59637: OR
59638: IFFALSE 59642
// exit ;
59640: GO 59734
// if GetTaskList ( unit ) then
59642: LD_VAR 0 1
59646: PPUSH
59647: CALL_OW 437
59651: IFFALSE 59734
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59653: LD_STRING e
59655: PUSH
59656: LD_VAR 0 1
59660: PPUSH
59661: CALL_OW 437
59665: PUSH
59666: LD_INT 1
59668: ARRAY
59669: PUSH
59670: LD_INT 1
59672: ARRAY
59673: EQUAL
59674: PUSH
59675: LD_VAR 0 4
59679: PUSH
59680: LD_VAR 0 1
59684: PPUSH
59685: CALL_OW 437
59689: PUSH
59690: LD_INT 1
59692: ARRAY
59693: PUSH
59694: LD_INT 2
59696: ARRAY
59697: EQUAL
59698: AND
59699: PUSH
59700: LD_VAR 0 5
59704: PUSH
59705: LD_VAR 0 1
59709: PPUSH
59710: CALL_OW 437
59714: PUSH
59715: LD_INT 1
59717: ARRAY
59718: PUSH
59719: LD_INT 3
59721: ARRAY
59722: EQUAL
59723: AND
59724: IFFALSE 59734
// result := true end ;
59726: LD_ADDR_VAR 0 3
59730: PUSH
59731: LD_INT 1
59733: ST_TO_ADDR
// end ;
59734: LD_VAR 0 3
59738: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
59739: LD_INT 0
59741: PPUSH
// result := false ;
59742: LD_ADDR_VAR 0 4
59746: PUSH
59747: LD_INT 0
59749: ST_TO_ADDR
// if GetTaskList ( unit ) then
59750: LD_VAR 0 1
59754: PPUSH
59755: CALL_OW 437
59759: IFFALSE 59842
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59761: LD_STRING M
59763: PUSH
59764: LD_VAR 0 1
59768: PPUSH
59769: CALL_OW 437
59773: PUSH
59774: LD_INT 1
59776: ARRAY
59777: PUSH
59778: LD_INT 1
59780: ARRAY
59781: EQUAL
59782: PUSH
59783: LD_VAR 0 2
59787: PUSH
59788: LD_VAR 0 1
59792: PPUSH
59793: CALL_OW 437
59797: PUSH
59798: LD_INT 1
59800: ARRAY
59801: PUSH
59802: LD_INT 2
59804: ARRAY
59805: EQUAL
59806: AND
59807: PUSH
59808: LD_VAR 0 3
59812: PUSH
59813: LD_VAR 0 1
59817: PPUSH
59818: CALL_OW 437
59822: PUSH
59823: LD_INT 1
59825: ARRAY
59826: PUSH
59827: LD_INT 3
59829: ARRAY
59830: EQUAL
59831: AND
59832: IFFALSE 59842
// result := true ;
59834: LD_ADDR_VAR 0 4
59838: PUSH
59839: LD_INT 1
59841: ST_TO_ADDR
// end ; end ;
59842: LD_VAR 0 4
59846: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
59847: LD_INT 0
59849: PPUSH
59850: PPUSH
59851: PPUSH
59852: PPUSH
// if not unit or not area then
59853: LD_VAR 0 1
59857: NOT
59858: PUSH
59859: LD_VAR 0 2
59863: NOT
59864: OR
59865: IFFALSE 59869
// exit ;
59867: GO 60033
// tmp := AreaToList ( area , i ) ;
59869: LD_ADDR_VAR 0 6
59873: PUSH
59874: LD_VAR 0 2
59878: PPUSH
59879: LD_VAR 0 5
59883: PPUSH
59884: CALL_OW 517
59888: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
59889: LD_ADDR_VAR 0 5
59893: PUSH
59894: DOUBLE
59895: LD_INT 1
59897: DEC
59898: ST_TO_ADDR
59899: LD_VAR 0 6
59903: PUSH
59904: LD_INT 1
59906: ARRAY
59907: PUSH
59908: FOR_TO
59909: IFFALSE 60031
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
59911: LD_ADDR_VAR 0 7
59915: PUSH
59916: LD_VAR 0 6
59920: PUSH
59921: LD_INT 1
59923: ARRAY
59924: PUSH
59925: LD_VAR 0 5
59929: ARRAY
59930: PUSH
59931: LD_VAR 0 6
59935: PUSH
59936: LD_INT 2
59938: ARRAY
59939: PUSH
59940: LD_VAR 0 5
59944: ARRAY
59945: PUSH
59946: EMPTY
59947: LIST
59948: LIST
59949: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
59950: LD_VAR 0 7
59954: PUSH
59955: LD_INT 1
59957: ARRAY
59958: PPUSH
59959: LD_VAR 0 7
59963: PUSH
59964: LD_INT 2
59966: ARRAY
59967: PPUSH
59968: CALL_OW 428
59972: PUSH
59973: LD_INT 0
59975: EQUAL
59976: IFFALSE 60029
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
59978: LD_VAR 0 1
59982: PPUSH
59983: LD_VAR 0 7
59987: PUSH
59988: LD_INT 1
59990: ARRAY
59991: PPUSH
59992: LD_VAR 0 7
59996: PUSH
59997: LD_INT 2
59999: ARRAY
60000: PPUSH
60001: LD_VAR 0 3
60005: PPUSH
60006: CALL_OW 48
// result := IsPlaced ( unit ) ;
60010: LD_ADDR_VAR 0 4
60014: PUSH
60015: LD_VAR 0 1
60019: PPUSH
60020: CALL_OW 305
60024: ST_TO_ADDR
// exit ;
60025: POP
60026: POP
60027: GO 60033
// end ; end ;
60029: GO 59908
60031: POP
60032: POP
// end ;
60033: LD_VAR 0 4
60037: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
60038: LD_INT 0
60040: PPUSH
60041: PPUSH
60042: PPUSH
// if not side or side > 8 then
60043: LD_VAR 0 1
60047: NOT
60048: PUSH
60049: LD_VAR 0 1
60053: PUSH
60054: LD_INT 8
60056: GREATER
60057: OR
60058: IFFALSE 60062
// exit ;
60060: GO 60249
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
60062: LD_ADDR_VAR 0 4
60066: PUSH
60067: LD_INT 22
60069: PUSH
60070: LD_VAR 0 1
60074: PUSH
60075: EMPTY
60076: LIST
60077: LIST
60078: PUSH
60079: LD_INT 21
60081: PUSH
60082: LD_INT 3
60084: PUSH
60085: EMPTY
60086: LIST
60087: LIST
60088: PUSH
60089: EMPTY
60090: LIST
60091: LIST
60092: PPUSH
60093: CALL_OW 69
60097: ST_TO_ADDR
// if not tmp then
60098: LD_VAR 0 4
60102: NOT
60103: IFFALSE 60107
// exit ;
60105: GO 60249
// enable_addtolog := true ;
60107: LD_ADDR_OWVAR 81
60111: PUSH
60112: LD_INT 1
60114: ST_TO_ADDR
// AddToLog ( [ ) ;
60115: LD_STRING [
60117: PPUSH
60118: CALL_OW 561
// for i in tmp do
60122: LD_ADDR_VAR 0 3
60126: PUSH
60127: LD_VAR 0 4
60131: PUSH
60132: FOR_IN
60133: IFFALSE 60240
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
60135: LD_STRING [
60137: PUSH
60138: LD_VAR 0 3
60142: PPUSH
60143: CALL_OW 266
60147: STR
60148: PUSH
60149: LD_STRING , 
60151: STR
60152: PUSH
60153: LD_VAR 0 3
60157: PPUSH
60158: CALL_OW 250
60162: STR
60163: PUSH
60164: LD_STRING , 
60166: STR
60167: PUSH
60168: LD_VAR 0 3
60172: PPUSH
60173: CALL_OW 251
60177: STR
60178: PUSH
60179: LD_STRING , 
60181: STR
60182: PUSH
60183: LD_VAR 0 3
60187: PPUSH
60188: CALL_OW 254
60192: STR
60193: PUSH
60194: LD_STRING , 
60196: STR
60197: PUSH
60198: LD_VAR 0 3
60202: PPUSH
60203: LD_INT 1
60205: PPUSH
60206: CALL_OW 268
60210: STR
60211: PUSH
60212: LD_STRING , 
60214: STR
60215: PUSH
60216: LD_VAR 0 3
60220: PPUSH
60221: LD_INT 2
60223: PPUSH
60224: CALL_OW 268
60228: STR
60229: PUSH
60230: LD_STRING ],
60232: STR
60233: PPUSH
60234: CALL_OW 561
// end ;
60238: GO 60132
60240: POP
60241: POP
// AddToLog ( ]; ) ;
60242: LD_STRING ];
60244: PPUSH
60245: CALL_OW 561
// end ;
60249: LD_VAR 0 2
60253: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60254: LD_INT 0
60256: PPUSH
60257: PPUSH
60258: PPUSH
60259: PPUSH
60260: PPUSH
// if not area or not rate or not max then
60261: LD_VAR 0 1
60265: NOT
60266: PUSH
60267: LD_VAR 0 2
60271: NOT
60272: OR
60273: PUSH
60274: LD_VAR 0 4
60278: NOT
60279: OR
60280: IFFALSE 60284
// exit ;
60282: GO 60473
// while 1 do
60284: LD_INT 1
60286: IFFALSE 60473
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
60288: LD_ADDR_VAR 0 9
60292: PUSH
60293: LD_VAR 0 1
60297: PPUSH
60298: LD_INT 1
60300: PPUSH
60301: CALL_OW 287
60305: PUSH
60306: LD_INT 10
60308: MUL
60309: ST_TO_ADDR
// r := rate / 10 ;
60310: LD_ADDR_VAR 0 7
60314: PUSH
60315: LD_VAR 0 2
60319: PUSH
60320: LD_INT 10
60322: DIVREAL
60323: ST_TO_ADDR
// time := 1 1$00 ;
60324: LD_ADDR_VAR 0 8
60328: PUSH
60329: LD_INT 2100
60331: ST_TO_ADDR
// if amount < min then
60332: LD_VAR 0 9
60336: PUSH
60337: LD_VAR 0 3
60341: LESS
60342: IFFALSE 60360
// r := r * 2 else
60344: LD_ADDR_VAR 0 7
60348: PUSH
60349: LD_VAR 0 7
60353: PUSH
60354: LD_INT 2
60356: MUL
60357: ST_TO_ADDR
60358: GO 60386
// if amount > max then
60360: LD_VAR 0 9
60364: PUSH
60365: LD_VAR 0 4
60369: GREATER
60370: IFFALSE 60386
// r := r / 2 ;
60372: LD_ADDR_VAR 0 7
60376: PUSH
60377: LD_VAR 0 7
60381: PUSH
60382: LD_INT 2
60384: DIVREAL
60385: ST_TO_ADDR
// time := time / r ;
60386: LD_ADDR_VAR 0 8
60390: PUSH
60391: LD_VAR 0 8
60395: PUSH
60396: LD_VAR 0 7
60400: DIVREAL
60401: ST_TO_ADDR
// if time < 0 then
60402: LD_VAR 0 8
60406: PUSH
60407: LD_INT 0
60409: LESS
60410: IFFALSE 60427
// time := time * - 1 ;
60412: LD_ADDR_VAR 0 8
60416: PUSH
60417: LD_VAR 0 8
60421: PUSH
60422: LD_INT 1
60424: NEG
60425: MUL
60426: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
60427: LD_VAR 0 8
60431: PUSH
60432: LD_INT 35
60434: PPUSH
60435: LD_INT 875
60437: PPUSH
60438: CALL_OW 12
60442: PLUS
60443: PPUSH
60444: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
60448: LD_INT 1
60450: PPUSH
60451: LD_INT 5
60453: PPUSH
60454: CALL_OW 12
60458: PPUSH
60459: LD_VAR 0 1
60463: PPUSH
60464: LD_INT 1
60466: PPUSH
60467: CALL_OW 55
// end ;
60471: GO 60284
// end ;
60473: LD_VAR 0 5
60477: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
60478: LD_INT 0
60480: PPUSH
60481: PPUSH
60482: PPUSH
60483: PPUSH
60484: PPUSH
60485: PPUSH
60486: PPUSH
60487: PPUSH
// if not turrets or not factories then
60488: LD_VAR 0 1
60492: NOT
60493: PUSH
60494: LD_VAR 0 2
60498: NOT
60499: OR
60500: IFFALSE 60504
// exit ;
60502: GO 60811
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
60504: LD_ADDR_VAR 0 10
60508: PUSH
60509: LD_INT 5
60511: PUSH
60512: LD_INT 6
60514: PUSH
60515: EMPTY
60516: LIST
60517: LIST
60518: PUSH
60519: LD_INT 2
60521: PUSH
60522: LD_INT 4
60524: PUSH
60525: EMPTY
60526: LIST
60527: LIST
60528: PUSH
60529: LD_INT 3
60531: PUSH
60532: LD_INT 5
60534: PUSH
60535: EMPTY
60536: LIST
60537: LIST
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: LIST
60543: PUSH
60544: LD_INT 24
60546: PUSH
60547: LD_INT 25
60549: PUSH
60550: EMPTY
60551: LIST
60552: LIST
60553: PUSH
60554: LD_INT 23
60556: PUSH
60557: LD_INT 27
60559: PUSH
60560: EMPTY
60561: LIST
60562: LIST
60563: PUSH
60564: EMPTY
60565: LIST
60566: LIST
60567: PUSH
60568: LD_INT 42
60570: PUSH
60571: LD_INT 43
60573: PUSH
60574: EMPTY
60575: LIST
60576: LIST
60577: PUSH
60578: LD_INT 44
60580: PUSH
60581: LD_INT 46
60583: PUSH
60584: EMPTY
60585: LIST
60586: LIST
60587: PUSH
60588: LD_INT 45
60590: PUSH
60591: LD_INT 47
60593: PUSH
60594: EMPTY
60595: LIST
60596: LIST
60597: PUSH
60598: EMPTY
60599: LIST
60600: LIST
60601: LIST
60602: PUSH
60603: EMPTY
60604: LIST
60605: LIST
60606: LIST
60607: ST_TO_ADDR
// result := [ ] ;
60608: LD_ADDR_VAR 0 3
60612: PUSH
60613: EMPTY
60614: ST_TO_ADDR
// for i in turrets do
60615: LD_ADDR_VAR 0 4
60619: PUSH
60620: LD_VAR 0 1
60624: PUSH
60625: FOR_IN
60626: IFFALSE 60809
// begin nat := GetNation ( i ) ;
60628: LD_ADDR_VAR 0 7
60632: PUSH
60633: LD_VAR 0 4
60637: PPUSH
60638: CALL_OW 248
60642: ST_TO_ADDR
// weapon := 0 ;
60643: LD_ADDR_VAR 0 8
60647: PUSH
60648: LD_INT 0
60650: ST_TO_ADDR
// if not nat then
60651: LD_VAR 0 7
60655: NOT
60656: IFFALSE 60660
// continue ;
60658: GO 60625
// for j in list [ nat ] do
60660: LD_ADDR_VAR 0 5
60664: PUSH
60665: LD_VAR 0 10
60669: PUSH
60670: LD_VAR 0 7
60674: ARRAY
60675: PUSH
60676: FOR_IN
60677: IFFALSE 60718
// if GetBWeapon ( i ) = j [ 1 ] then
60679: LD_VAR 0 4
60683: PPUSH
60684: CALL_OW 269
60688: PUSH
60689: LD_VAR 0 5
60693: PUSH
60694: LD_INT 1
60696: ARRAY
60697: EQUAL
60698: IFFALSE 60716
// begin weapon := j [ 2 ] ;
60700: LD_ADDR_VAR 0 8
60704: PUSH
60705: LD_VAR 0 5
60709: PUSH
60710: LD_INT 2
60712: ARRAY
60713: ST_TO_ADDR
// break ;
60714: GO 60718
// end ;
60716: GO 60676
60718: POP
60719: POP
// if not weapon then
60720: LD_VAR 0 8
60724: NOT
60725: IFFALSE 60729
// continue ;
60727: GO 60625
// for k in factories do
60729: LD_ADDR_VAR 0 6
60733: PUSH
60734: LD_VAR 0 2
60738: PUSH
60739: FOR_IN
60740: IFFALSE 60805
// begin weapons := AvailableWeaponList ( k ) ;
60742: LD_ADDR_VAR 0 9
60746: PUSH
60747: LD_VAR 0 6
60751: PPUSH
60752: CALL_OW 478
60756: ST_TO_ADDR
// if not weapons then
60757: LD_VAR 0 9
60761: NOT
60762: IFFALSE 60766
// continue ;
60764: GO 60739
// if weapon in weapons then
60766: LD_VAR 0 8
60770: PUSH
60771: LD_VAR 0 9
60775: IN
60776: IFFALSE 60803
// begin result := [ i , weapon ] ;
60778: LD_ADDR_VAR 0 3
60782: PUSH
60783: LD_VAR 0 4
60787: PUSH
60788: LD_VAR 0 8
60792: PUSH
60793: EMPTY
60794: LIST
60795: LIST
60796: ST_TO_ADDR
// exit ;
60797: POP
60798: POP
60799: POP
60800: POP
60801: GO 60811
// end ; end ;
60803: GO 60739
60805: POP
60806: POP
// end ;
60807: GO 60625
60809: POP
60810: POP
// end ;
60811: LD_VAR 0 3
60815: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
60816: LD_INT 0
60818: PPUSH
// if not side or side > 8 then
60819: LD_VAR 0 3
60823: NOT
60824: PUSH
60825: LD_VAR 0 3
60829: PUSH
60830: LD_INT 8
60832: GREATER
60833: OR
60834: IFFALSE 60838
// exit ;
60836: GO 60897
// if not range then
60838: LD_VAR 0 4
60842: NOT
60843: IFFALSE 60854
// range := - 12 ;
60845: LD_ADDR_VAR 0 4
60849: PUSH
60850: LD_INT 12
60852: NEG
60853: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
60854: LD_VAR 0 1
60858: PPUSH
60859: LD_VAR 0 2
60863: PPUSH
60864: LD_VAR 0 3
60868: PPUSH
60869: LD_VAR 0 4
60873: PPUSH
60874: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
60878: LD_VAR 0 1
60882: PPUSH
60883: LD_VAR 0 2
60887: PPUSH
60888: LD_VAR 0 3
60892: PPUSH
60893: CALL_OW 331
// end ;
60897: LD_VAR 0 5
60901: RET
// export function Video ( mode ) ; begin
60902: LD_INT 0
60904: PPUSH
// ingame_video = mode ;
60905: LD_ADDR_OWVAR 52
60909: PUSH
60910: LD_VAR 0 1
60914: ST_TO_ADDR
// interface_hidden = mode ;
60915: LD_ADDR_OWVAR 54
60919: PUSH
60920: LD_VAR 0 1
60924: ST_TO_ADDR
// end ;
60925: LD_VAR 0 2
60929: RET
// export function Join ( array , element ) ; begin
60930: LD_INT 0
60932: PPUSH
// result := Replace ( array , array + 1 , element ) ;
60933: LD_ADDR_VAR 0 3
60937: PUSH
60938: LD_VAR 0 1
60942: PPUSH
60943: LD_VAR 0 1
60947: PUSH
60948: LD_INT 1
60950: PLUS
60951: PPUSH
60952: LD_VAR 0 2
60956: PPUSH
60957: CALL_OW 1
60961: ST_TO_ADDR
// end ;
60962: LD_VAR 0 3
60966: RET
// export function JoinUnion ( array , element ) ; begin
60967: LD_INT 0
60969: PPUSH
// result := array union element ;
60970: LD_ADDR_VAR 0 3
60974: PUSH
60975: LD_VAR 0 1
60979: PUSH
60980: LD_VAR 0 2
60984: UNION
60985: ST_TO_ADDR
// end ;
60986: LD_VAR 0 3
60990: RET
// export function GetBehemoths ( side ) ; begin
60991: LD_INT 0
60993: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
60994: LD_ADDR_VAR 0 2
60998: PUSH
60999: LD_INT 22
61001: PUSH
61002: LD_VAR 0 1
61006: PUSH
61007: EMPTY
61008: LIST
61009: LIST
61010: PUSH
61011: LD_INT 31
61013: PUSH
61014: LD_INT 25
61016: PUSH
61017: EMPTY
61018: LIST
61019: LIST
61020: PUSH
61021: EMPTY
61022: LIST
61023: LIST
61024: PPUSH
61025: CALL_OW 69
61029: ST_TO_ADDR
// end ;
61030: LD_VAR 0 2
61034: RET
// export function Shuffle ( array ) ; var i , index ; begin
61035: LD_INT 0
61037: PPUSH
61038: PPUSH
61039: PPUSH
// result := [ ] ;
61040: LD_ADDR_VAR 0 2
61044: PUSH
61045: EMPTY
61046: ST_TO_ADDR
// if not array then
61047: LD_VAR 0 1
61051: NOT
61052: IFFALSE 61056
// exit ;
61054: GO 61155
// Randomize ;
61056: CALL_OW 10
// for i = array downto 1 do
61060: LD_ADDR_VAR 0 3
61064: PUSH
61065: DOUBLE
61066: LD_VAR 0 1
61070: INC
61071: ST_TO_ADDR
61072: LD_INT 1
61074: PUSH
61075: FOR_DOWNTO
61076: IFFALSE 61153
// begin index := rand ( 1 , array ) ;
61078: LD_ADDR_VAR 0 4
61082: PUSH
61083: LD_INT 1
61085: PPUSH
61086: LD_VAR 0 1
61090: PPUSH
61091: CALL_OW 12
61095: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
61096: LD_ADDR_VAR 0 2
61100: PUSH
61101: LD_VAR 0 2
61105: PPUSH
61106: LD_VAR 0 2
61110: PUSH
61111: LD_INT 1
61113: PLUS
61114: PPUSH
61115: LD_VAR 0 1
61119: PUSH
61120: LD_VAR 0 4
61124: ARRAY
61125: PPUSH
61126: CALL_OW 2
61130: ST_TO_ADDR
// array := Delete ( array , index ) ;
61131: LD_ADDR_VAR 0 1
61135: PUSH
61136: LD_VAR 0 1
61140: PPUSH
61141: LD_VAR 0 4
61145: PPUSH
61146: CALL_OW 3
61150: ST_TO_ADDR
// end ;
61151: GO 61075
61153: POP
61154: POP
// end ;
61155: LD_VAR 0 2
61159: RET
// export function GetBaseMaterials ( base ) ; begin
61160: LD_INT 0
61162: PPUSH
// result := [ 0 , 0 , 0 ] ;
61163: LD_ADDR_VAR 0 2
61167: PUSH
61168: LD_INT 0
61170: PUSH
61171: LD_INT 0
61173: PUSH
61174: LD_INT 0
61176: PUSH
61177: EMPTY
61178: LIST
61179: LIST
61180: LIST
61181: ST_TO_ADDR
// if not base then
61182: LD_VAR 0 1
61186: NOT
61187: IFFALSE 61191
// exit ;
61189: GO 61240
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61191: LD_ADDR_VAR 0 2
61195: PUSH
61196: LD_VAR 0 1
61200: PPUSH
61201: LD_INT 1
61203: PPUSH
61204: CALL_OW 275
61208: PUSH
61209: LD_VAR 0 1
61213: PPUSH
61214: LD_INT 2
61216: PPUSH
61217: CALL_OW 275
61221: PUSH
61222: LD_VAR 0 1
61226: PPUSH
61227: LD_INT 3
61229: PPUSH
61230: CALL_OW 275
61234: PUSH
61235: EMPTY
61236: LIST
61237: LIST
61238: LIST
61239: ST_TO_ADDR
// end ;
61240: LD_VAR 0 2
61244: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
61245: LD_INT 0
61247: PPUSH
61248: PPUSH
// result := array ;
61249: LD_ADDR_VAR 0 3
61253: PUSH
61254: LD_VAR 0 1
61258: ST_TO_ADDR
// if size >= result then
61259: LD_VAR 0 2
61263: PUSH
61264: LD_VAR 0 3
61268: GREATEREQUAL
61269: IFFALSE 61273
// exit ;
61271: GO 61323
// if size then
61273: LD_VAR 0 2
61277: IFFALSE 61323
// for i := array downto size do
61279: LD_ADDR_VAR 0 4
61283: PUSH
61284: DOUBLE
61285: LD_VAR 0 1
61289: INC
61290: ST_TO_ADDR
61291: LD_VAR 0 2
61295: PUSH
61296: FOR_DOWNTO
61297: IFFALSE 61321
// result := Delete ( result , result ) ;
61299: LD_ADDR_VAR 0 3
61303: PUSH
61304: LD_VAR 0 3
61308: PPUSH
61309: LD_VAR 0 3
61313: PPUSH
61314: CALL_OW 3
61318: ST_TO_ADDR
61319: GO 61296
61321: POP
61322: POP
// end ;
61323: LD_VAR 0 3
61327: RET
// export function ComExit ( unit ) ; var tmp ; begin
61328: LD_INT 0
61330: PPUSH
61331: PPUSH
// if not IsInUnit ( unit ) then
61332: LD_VAR 0 1
61336: PPUSH
61337: CALL_OW 310
61341: NOT
61342: IFFALSE 61346
// exit ;
61344: GO 61406
// tmp := IsInUnit ( unit ) ;
61346: LD_ADDR_VAR 0 3
61350: PUSH
61351: LD_VAR 0 1
61355: PPUSH
61356: CALL_OW 310
61360: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
61361: LD_VAR 0 3
61365: PPUSH
61366: CALL_OW 247
61370: PUSH
61371: LD_INT 2
61373: EQUAL
61374: IFFALSE 61387
// ComExitVehicle ( unit ) else
61376: LD_VAR 0 1
61380: PPUSH
61381: CALL_OW 121
61385: GO 61396
// ComExitBuilding ( unit ) ;
61387: LD_VAR 0 1
61391: PPUSH
61392: CALL_OW 122
// result := tmp ;
61396: LD_ADDR_VAR 0 2
61400: PUSH
61401: LD_VAR 0 3
61405: ST_TO_ADDR
// end ;
61406: LD_VAR 0 2
61410: RET
// export function ComExitAll ( units ) ; var i ; begin
61411: LD_INT 0
61413: PPUSH
61414: PPUSH
// if not units then
61415: LD_VAR 0 1
61419: NOT
61420: IFFALSE 61424
// exit ;
61422: GO 61450
// for i in units do
61424: LD_ADDR_VAR 0 3
61428: PUSH
61429: LD_VAR 0 1
61433: PUSH
61434: FOR_IN
61435: IFFALSE 61448
// ComExit ( i ) ;
61437: LD_VAR 0 3
61441: PPUSH
61442: CALL 61328 0 1
61446: GO 61434
61448: POP
61449: POP
// end ;
61450: LD_VAR 0 2
61454: RET
// export function ResetHc ; begin
61455: LD_INT 0
61457: PPUSH
// InitHc ;
61458: CALL_OW 19
// hc_importance := 0 ;
61462: LD_ADDR_OWVAR 32
61466: PUSH
61467: LD_INT 0
61469: ST_TO_ADDR
// end ;
61470: LD_VAR 0 1
61474: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
61475: LD_INT 0
61477: PPUSH
61478: PPUSH
61479: PPUSH
// _x := ( x1 + x2 ) div 2 ;
61480: LD_ADDR_VAR 0 6
61484: PUSH
61485: LD_VAR 0 1
61489: PUSH
61490: LD_VAR 0 3
61494: PLUS
61495: PUSH
61496: LD_INT 2
61498: DIV
61499: ST_TO_ADDR
// if _x < 0 then
61500: LD_VAR 0 6
61504: PUSH
61505: LD_INT 0
61507: LESS
61508: IFFALSE 61525
// _x := _x * - 1 ;
61510: LD_ADDR_VAR 0 6
61514: PUSH
61515: LD_VAR 0 6
61519: PUSH
61520: LD_INT 1
61522: NEG
61523: MUL
61524: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
61525: LD_ADDR_VAR 0 7
61529: PUSH
61530: LD_VAR 0 2
61534: PUSH
61535: LD_VAR 0 4
61539: PLUS
61540: PUSH
61541: LD_INT 2
61543: DIV
61544: ST_TO_ADDR
// if _y < 0 then
61545: LD_VAR 0 7
61549: PUSH
61550: LD_INT 0
61552: LESS
61553: IFFALSE 61570
// _y := _y * - 1 ;
61555: LD_ADDR_VAR 0 7
61559: PUSH
61560: LD_VAR 0 7
61564: PUSH
61565: LD_INT 1
61567: NEG
61568: MUL
61569: ST_TO_ADDR
// result := [ _x , _y ] ;
61570: LD_ADDR_VAR 0 5
61574: PUSH
61575: LD_VAR 0 6
61579: PUSH
61580: LD_VAR 0 7
61584: PUSH
61585: EMPTY
61586: LIST
61587: LIST
61588: ST_TO_ADDR
// end ;
61589: LD_VAR 0 5
61593: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
61594: LD_INT 0
61596: PPUSH
61597: PPUSH
61598: PPUSH
61599: PPUSH
// task := GetTaskList ( unit ) ;
61600: LD_ADDR_VAR 0 7
61604: PUSH
61605: LD_VAR 0 1
61609: PPUSH
61610: CALL_OW 437
61614: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
61615: LD_VAR 0 7
61619: NOT
61620: PUSH
61621: LD_VAR 0 1
61625: PPUSH
61626: LD_VAR 0 2
61630: PPUSH
61631: CALL_OW 308
61635: NOT
61636: AND
61637: IFFALSE 61641
// exit ;
61639: GO 61759
// if IsInArea ( unit , area ) then
61641: LD_VAR 0 1
61645: PPUSH
61646: LD_VAR 0 2
61650: PPUSH
61651: CALL_OW 308
61655: IFFALSE 61673
// begin ComMoveToArea ( unit , goAway ) ;
61657: LD_VAR 0 1
61661: PPUSH
61662: LD_VAR 0 3
61666: PPUSH
61667: CALL_OW 113
// exit ;
61671: GO 61759
// end ; if task [ 1 ] [ 1 ] <> M then
61673: LD_VAR 0 7
61677: PUSH
61678: LD_INT 1
61680: ARRAY
61681: PUSH
61682: LD_INT 1
61684: ARRAY
61685: PUSH
61686: LD_STRING M
61688: NONEQUAL
61689: IFFALSE 61693
// exit ;
61691: GO 61759
// x := task [ 1 ] [ 2 ] ;
61693: LD_ADDR_VAR 0 5
61697: PUSH
61698: LD_VAR 0 7
61702: PUSH
61703: LD_INT 1
61705: ARRAY
61706: PUSH
61707: LD_INT 2
61709: ARRAY
61710: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
61711: LD_ADDR_VAR 0 6
61715: PUSH
61716: LD_VAR 0 7
61720: PUSH
61721: LD_INT 1
61723: ARRAY
61724: PUSH
61725: LD_INT 3
61727: ARRAY
61728: ST_TO_ADDR
// if InArea ( x , y , area ) then
61729: LD_VAR 0 5
61733: PPUSH
61734: LD_VAR 0 6
61738: PPUSH
61739: LD_VAR 0 2
61743: PPUSH
61744: CALL_OW 309
61748: IFFALSE 61759
// ComStop ( unit ) ;
61750: LD_VAR 0 1
61754: PPUSH
61755: CALL_OW 141
// end ;
61759: LD_VAR 0 4
61763: RET
// export function Abs ( value ) ; begin
61764: LD_INT 0
61766: PPUSH
// result := value ;
61767: LD_ADDR_VAR 0 2
61771: PUSH
61772: LD_VAR 0 1
61776: ST_TO_ADDR
// if value < 0 then
61777: LD_VAR 0 1
61781: PUSH
61782: LD_INT 0
61784: LESS
61785: IFFALSE 61802
// result := value * - 1 ;
61787: LD_ADDR_VAR 0 2
61791: PUSH
61792: LD_VAR 0 1
61796: PUSH
61797: LD_INT 1
61799: NEG
61800: MUL
61801: ST_TO_ADDR
// end ;
61802: LD_VAR 0 2
61806: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
61807: LD_INT 0
61809: PPUSH
61810: PPUSH
61811: PPUSH
61812: PPUSH
61813: PPUSH
61814: PPUSH
61815: PPUSH
61816: PPUSH
// if not unit or not building then
61817: LD_VAR 0 1
61821: NOT
61822: PUSH
61823: LD_VAR 0 2
61827: NOT
61828: OR
61829: IFFALSE 61833
// exit ;
61831: GO 62059
// x := GetX ( building ) ;
61833: LD_ADDR_VAR 0 4
61837: PUSH
61838: LD_VAR 0 2
61842: PPUSH
61843: CALL_OW 250
61847: ST_TO_ADDR
// y := GetY ( building ) ;
61848: LD_ADDR_VAR 0 6
61852: PUSH
61853: LD_VAR 0 2
61857: PPUSH
61858: CALL_OW 251
61862: ST_TO_ADDR
// d := GetDir ( building ) ;
61863: LD_ADDR_VAR 0 8
61867: PUSH
61868: LD_VAR 0 2
61872: PPUSH
61873: CALL_OW 254
61877: ST_TO_ADDR
// r := 4 ;
61878: LD_ADDR_VAR 0 9
61882: PUSH
61883: LD_INT 4
61885: ST_TO_ADDR
// for i := 1 to 5 do
61886: LD_ADDR_VAR 0 10
61890: PUSH
61891: DOUBLE
61892: LD_INT 1
61894: DEC
61895: ST_TO_ADDR
61896: LD_INT 5
61898: PUSH
61899: FOR_TO
61900: IFFALSE 62057
// begin _x := ShiftX ( x , d , r + i ) ;
61902: LD_ADDR_VAR 0 5
61906: PUSH
61907: LD_VAR 0 4
61911: PPUSH
61912: LD_VAR 0 8
61916: PPUSH
61917: LD_VAR 0 9
61921: PUSH
61922: LD_VAR 0 10
61926: PLUS
61927: PPUSH
61928: CALL_OW 272
61932: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
61933: LD_ADDR_VAR 0 7
61937: PUSH
61938: LD_VAR 0 6
61942: PPUSH
61943: LD_VAR 0 8
61947: PPUSH
61948: LD_VAR 0 9
61952: PUSH
61953: LD_VAR 0 10
61957: PLUS
61958: PPUSH
61959: CALL_OW 273
61963: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
61964: LD_VAR 0 5
61968: PPUSH
61969: LD_VAR 0 7
61973: PPUSH
61974: CALL_OW 488
61978: PUSH
61979: LD_VAR 0 5
61983: PPUSH
61984: LD_VAR 0 7
61988: PPUSH
61989: CALL_OW 428
61993: PPUSH
61994: CALL_OW 247
61998: PUSH
61999: LD_INT 3
62001: PUSH
62002: LD_INT 2
62004: PUSH
62005: EMPTY
62006: LIST
62007: LIST
62008: IN
62009: NOT
62010: AND
62011: IFFALSE 62055
// begin ComMoveXY ( unit , _x , _y ) ;
62013: LD_VAR 0 1
62017: PPUSH
62018: LD_VAR 0 5
62022: PPUSH
62023: LD_VAR 0 7
62027: PPUSH
62028: CALL_OW 111
// result := [ _x , _y ] ;
62032: LD_ADDR_VAR 0 3
62036: PUSH
62037: LD_VAR 0 5
62041: PUSH
62042: LD_VAR 0 7
62046: PUSH
62047: EMPTY
62048: LIST
62049: LIST
62050: ST_TO_ADDR
// exit ;
62051: POP
62052: POP
62053: GO 62059
// end ; end ;
62055: GO 61899
62057: POP
62058: POP
// end ;
62059: LD_VAR 0 3
62063: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
62064: LD_INT 0
62066: PPUSH
62067: PPUSH
62068: PPUSH
// result := 0 ;
62069: LD_ADDR_VAR 0 3
62073: PUSH
62074: LD_INT 0
62076: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
62077: LD_VAR 0 1
62081: PUSH
62082: LD_INT 0
62084: LESS
62085: PUSH
62086: LD_VAR 0 1
62090: PUSH
62091: LD_INT 8
62093: GREATER
62094: OR
62095: PUSH
62096: LD_VAR 0 2
62100: PUSH
62101: LD_INT 0
62103: LESS
62104: OR
62105: PUSH
62106: LD_VAR 0 2
62110: PUSH
62111: LD_INT 8
62113: GREATER
62114: OR
62115: IFFALSE 62119
// exit ;
62117: GO 62194
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
62119: LD_ADDR_VAR 0 4
62123: PUSH
62124: LD_INT 22
62126: PUSH
62127: LD_VAR 0 2
62131: PUSH
62132: EMPTY
62133: LIST
62134: LIST
62135: PPUSH
62136: CALL_OW 69
62140: PUSH
62141: FOR_IN
62142: IFFALSE 62192
// begin un := UnitShoot ( i ) ;
62144: LD_ADDR_VAR 0 5
62148: PUSH
62149: LD_VAR 0 4
62153: PPUSH
62154: CALL_OW 504
62158: ST_TO_ADDR
// if GetSide ( un ) = side1 then
62159: LD_VAR 0 5
62163: PPUSH
62164: CALL_OW 255
62168: PUSH
62169: LD_VAR 0 1
62173: EQUAL
62174: IFFALSE 62190
// begin result := un ;
62176: LD_ADDR_VAR 0 3
62180: PUSH
62181: LD_VAR 0 5
62185: ST_TO_ADDR
// exit ;
62186: POP
62187: POP
62188: GO 62194
// end ; end ;
62190: GO 62141
62192: POP
62193: POP
// end ;
62194: LD_VAR 0 3
62198: RET
// export function GetCargoBay ( units ) ; begin
62199: LD_INT 0
62201: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
62202: LD_ADDR_VAR 0 2
62206: PUSH
62207: LD_VAR 0 1
62211: PPUSH
62212: LD_INT 2
62214: PUSH
62215: LD_INT 34
62217: PUSH
62218: LD_INT 12
62220: PUSH
62221: EMPTY
62222: LIST
62223: LIST
62224: PUSH
62225: LD_INT 34
62227: PUSH
62228: LD_INT 51
62230: PUSH
62231: EMPTY
62232: LIST
62233: LIST
62234: PUSH
62235: LD_INT 34
62237: PUSH
62238: LD_INT 32
62240: PUSH
62241: EMPTY
62242: LIST
62243: LIST
62244: PUSH
62245: LD_INT 34
62247: PUSH
62248: LD_INT 89
62250: PUSH
62251: EMPTY
62252: LIST
62253: LIST
62254: PUSH
62255: EMPTY
62256: LIST
62257: LIST
62258: LIST
62259: LIST
62260: LIST
62261: PPUSH
62262: CALL_OW 72
62266: ST_TO_ADDR
// end ;
62267: LD_VAR 0 2
62271: RET
// export function Negate ( value ) ; begin
62272: LD_INT 0
62274: PPUSH
// result := not value ;
62275: LD_ADDR_VAR 0 2
62279: PUSH
62280: LD_VAR 0 1
62284: NOT
62285: ST_TO_ADDR
// end ;
62286: LD_VAR 0 2
62290: RET
// export function Inc ( value ) ; begin
62291: LD_INT 0
62293: PPUSH
// result := value + 1 ;
62294: LD_ADDR_VAR 0 2
62298: PUSH
62299: LD_VAR 0 1
62303: PUSH
62304: LD_INT 1
62306: PLUS
62307: ST_TO_ADDR
// end ;
62308: LD_VAR 0 2
62312: RET
// export function Dec ( value ) ; begin
62313: LD_INT 0
62315: PPUSH
// result := value - 1 ;
62316: LD_ADDR_VAR 0 2
62320: PUSH
62321: LD_VAR 0 1
62325: PUSH
62326: LD_INT 1
62328: MINUS
62329: ST_TO_ADDR
// end ;
62330: LD_VAR 0 2
62334: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
62335: LD_INT 0
62337: PPUSH
62338: PPUSH
62339: PPUSH
62340: PPUSH
62341: PPUSH
62342: PPUSH
62343: PPUSH
62344: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
62345: LD_VAR 0 1
62349: PPUSH
62350: LD_VAR 0 2
62354: PPUSH
62355: CALL_OW 488
62359: NOT
62360: PUSH
62361: LD_VAR 0 3
62365: PPUSH
62366: LD_VAR 0 4
62370: PPUSH
62371: CALL_OW 488
62375: NOT
62376: OR
62377: IFFALSE 62390
// begin result := - 1 ;
62379: LD_ADDR_VAR 0 5
62383: PUSH
62384: LD_INT 1
62386: NEG
62387: ST_TO_ADDR
// exit ;
62388: GO 62625
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
62390: LD_ADDR_VAR 0 12
62394: PUSH
62395: LD_VAR 0 1
62399: PPUSH
62400: LD_VAR 0 2
62404: PPUSH
62405: LD_VAR 0 3
62409: PPUSH
62410: LD_VAR 0 4
62414: PPUSH
62415: CALL 61475 0 4
62419: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
62420: LD_ADDR_VAR 0 11
62424: PUSH
62425: LD_VAR 0 1
62429: PPUSH
62430: LD_VAR 0 2
62434: PPUSH
62435: LD_VAR 0 12
62439: PUSH
62440: LD_INT 1
62442: ARRAY
62443: PPUSH
62444: LD_VAR 0 12
62448: PUSH
62449: LD_INT 2
62451: ARRAY
62452: PPUSH
62453: CALL_OW 298
62457: ST_TO_ADDR
// distance := 9999 ;
62458: LD_ADDR_VAR 0 10
62462: PUSH
62463: LD_INT 9999
62465: ST_TO_ADDR
// for i := 0 to 5 do
62466: LD_ADDR_VAR 0 6
62470: PUSH
62471: DOUBLE
62472: LD_INT 0
62474: DEC
62475: ST_TO_ADDR
62476: LD_INT 5
62478: PUSH
62479: FOR_TO
62480: IFFALSE 62623
// begin _x := ShiftX ( x1 , i , centerDist ) ;
62482: LD_ADDR_VAR 0 7
62486: PUSH
62487: LD_VAR 0 1
62491: PPUSH
62492: LD_VAR 0 6
62496: PPUSH
62497: LD_VAR 0 11
62501: PPUSH
62502: CALL_OW 272
62506: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
62507: LD_ADDR_VAR 0 8
62511: PUSH
62512: LD_VAR 0 2
62516: PPUSH
62517: LD_VAR 0 6
62521: PPUSH
62522: LD_VAR 0 11
62526: PPUSH
62527: CALL_OW 273
62531: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
62532: LD_VAR 0 7
62536: PPUSH
62537: LD_VAR 0 8
62541: PPUSH
62542: CALL_OW 488
62546: NOT
62547: IFFALSE 62551
// continue ;
62549: GO 62479
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
62551: LD_ADDR_VAR 0 9
62555: PUSH
62556: LD_VAR 0 12
62560: PUSH
62561: LD_INT 1
62563: ARRAY
62564: PPUSH
62565: LD_VAR 0 12
62569: PUSH
62570: LD_INT 2
62572: ARRAY
62573: PPUSH
62574: LD_VAR 0 7
62578: PPUSH
62579: LD_VAR 0 8
62583: PPUSH
62584: CALL_OW 298
62588: ST_TO_ADDR
// if tmp < distance then
62589: LD_VAR 0 9
62593: PUSH
62594: LD_VAR 0 10
62598: LESS
62599: IFFALSE 62621
// begin result := i ;
62601: LD_ADDR_VAR 0 5
62605: PUSH
62606: LD_VAR 0 6
62610: ST_TO_ADDR
// distance := tmp ;
62611: LD_ADDR_VAR 0 10
62615: PUSH
62616: LD_VAR 0 9
62620: ST_TO_ADDR
// end ; end ;
62621: GO 62479
62623: POP
62624: POP
// end ;
62625: LD_VAR 0 5
62629: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62630: LD_INT 0
62632: PPUSH
62633: PPUSH
// if not driver or not IsInUnit ( driver ) then
62634: LD_VAR 0 1
62638: NOT
62639: PUSH
62640: LD_VAR 0 1
62644: PPUSH
62645: CALL_OW 310
62649: NOT
62650: OR
62651: IFFALSE 62655
// exit ;
62653: GO 62745
// vehicle := IsInUnit ( driver ) ;
62655: LD_ADDR_VAR 0 3
62659: PUSH
62660: LD_VAR 0 1
62664: PPUSH
62665: CALL_OW 310
62669: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62670: LD_VAR 0 1
62674: PPUSH
62675: LD_STRING \
62677: PUSH
62678: LD_INT 0
62680: PUSH
62681: LD_INT 0
62683: PUSH
62684: LD_INT 0
62686: PUSH
62687: LD_INT 0
62689: PUSH
62690: LD_INT 0
62692: PUSH
62693: LD_INT 0
62695: PUSH
62696: EMPTY
62697: LIST
62698: LIST
62699: LIST
62700: LIST
62701: LIST
62702: LIST
62703: LIST
62704: PUSH
62705: LD_STRING E
62707: PUSH
62708: LD_INT 0
62710: PUSH
62711: LD_INT 0
62713: PUSH
62714: LD_VAR 0 3
62718: PUSH
62719: LD_INT 0
62721: PUSH
62722: LD_INT 0
62724: PUSH
62725: LD_INT 0
62727: PUSH
62728: EMPTY
62729: LIST
62730: LIST
62731: LIST
62732: LIST
62733: LIST
62734: LIST
62735: LIST
62736: PUSH
62737: EMPTY
62738: LIST
62739: LIST
62740: PPUSH
62741: CALL_OW 446
// end ;
62745: LD_VAR 0 2
62749: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62750: LD_INT 0
62752: PPUSH
62753: PPUSH
// if not driver or not IsInUnit ( driver ) then
62754: LD_VAR 0 1
62758: NOT
62759: PUSH
62760: LD_VAR 0 1
62764: PPUSH
62765: CALL_OW 310
62769: NOT
62770: OR
62771: IFFALSE 62775
// exit ;
62773: GO 62865
// vehicle := IsInUnit ( driver ) ;
62775: LD_ADDR_VAR 0 3
62779: PUSH
62780: LD_VAR 0 1
62784: PPUSH
62785: CALL_OW 310
62789: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62790: LD_VAR 0 1
62794: PPUSH
62795: LD_STRING \
62797: PUSH
62798: LD_INT 0
62800: PUSH
62801: LD_INT 0
62803: PUSH
62804: LD_INT 0
62806: PUSH
62807: LD_INT 0
62809: PUSH
62810: LD_INT 0
62812: PUSH
62813: LD_INT 0
62815: PUSH
62816: EMPTY
62817: LIST
62818: LIST
62819: LIST
62820: LIST
62821: LIST
62822: LIST
62823: LIST
62824: PUSH
62825: LD_STRING E
62827: PUSH
62828: LD_INT 0
62830: PUSH
62831: LD_INT 0
62833: PUSH
62834: LD_VAR 0 3
62838: PUSH
62839: LD_INT 0
62841: PUSH
62842: LD_INT 0
62844: PUSH
62845: LD_INT 0
62847: PUSH
62848: EMPTY
62849: LIST
62850: LIST
62851: LIST
62852: LIST
62853: LIST
62854: LIST
62855: LIST
62856: PUSH
62857: EMPTY
62858: LIST
62859: LIST
62860: PPUSH
62861: CALL_OW 447
// end ;
62865: LD_VAR 0 2
62869: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
62870: LD_INT 0
62872: PPUSH
62873: PPUSH
62874: PPUSH
// tmp := [ ] ;
62875: LD_ADDR_VAR 0 5
62879: PUSH
62880: EMPTY
62881: ST_TO_ADDR
// for i in units do
62882: LD_ADDR_VAR 0 4
62886: PUSH
62887: LD_VAR 0 1
62891: PUSH
62892: FOR_IN
62893: IFFALSE 62931
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
62895: LD_ADDR_VAR 0 5
62899: PUSH
62900: LD_VAR 0 5
62904: PPUSH
62905: LD_VAR 0 5
62909: PUSH
62910: LD_INT 1
62912: PLUS
62913: PPUSH
62914: LD_VAR 0 4
62918: PPUSH
62919: CALL_OW 256
62923: PPUSH
62924: CALL_OW 2
62928: ST_TO_ADDR
62929: GO 62892
62931: POP
62932: POP
// if not tmp then
62933: LD_VAR 0 5
62937: NOT
62938: IFFALSE 62942
// exit ;
62940: GO 62990
// if asc then
62942: LD_VAR 0 2
62946: IFFALSE 62970
// result := SortListByListAsc ( units , tmp ) else
62948: LD_ADDR_VAR 0 3
62952: PUSH
62953: LD_VAR 0 1
62957: PPUSH
62958: LD_VAR 0 5
62962: PPUSH
62963: CALL_OW 76
62967: ST_TO_ADDR
62968: GO 62990
// result := SortListByListDesc ( units , tmp ) ;
62970: LD_ADDR_VAR 0 3
62974: PUSH
62975: LD_VAR 0 1
62979: PPUSH
62980: LD_VAR 0 5
62984: PPUSH
62985: CALL_OW 77
62989: ST_TO_ADDR
// end ;
62990: LD_VAR 0 3
62994: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
62995: LD_INT 0
62997: PPUSH
62998: PPUSH
// task := GetTaskList ( mech ) ;
62999: LD_ADDR_VAR 0 4
63003: PUSH
63004: LD_VAR 0 1
63008: PPUSH
63009: CALL_OW 437
63013: ST_TO_ADDR
// if not task then
63014: LD_VAR 0 4
63018: NOT
63019: IFFALSE 63023
// exit ;
63021: GO 63065
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
63023: LD_ADDR_VAR 0 3
63027: PUSH
63028: LD_VAR 0 4
63032: PUSH
63033: LD_INT 1
63035: ARRAY
63036: PUSH
63037: LD_INT 1
63039: ARRAY
63040: PUSH
63041: LD_STRING r
63043: EQUAL
63044: PUSH
63045: LD_VAR 0 4
63049: PUSH
63050: LD_INT 1
63052: ARRAY
63053: PUSH
63054: LD_INT 4
63056: ARRAY
63057: PUSH
63058: LD_VAR 0 2
63062: EQUAL
63063: AND
63064: ST_TO_ADDR
// end ;
63065: LD_VAR 0 3
63069: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
63070: LD_INT 0
63072: PPUSH
// SetDir ( unit , d ) ;
63073: LD_VAR 0 1
63077: PPUSH
63078: LD_VAR 0 4
63082: PPUSH
63083: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
63087: LD_VAR 0 1
63091: PPUSH
63092: LD_VAR 0 2
63096: PPUSH
63097: LD_VAR 0 3
63101: PPUSH
63102: LD_VAR 0 5
63106: PPUSH
63107: CALL_OW 48
// end ;
63111: LD_VAR 0 6
63115: RET
// export function ToNaturalNumber ( number ) ; begin
63116: LD_INT 0
63118: PPUSH
// result := number div 1 ;
63119: LD_ADDR_VAR 0 2
63123: PUSH
63124: LD_VAR 0 1
63128: PUSH
63129: LD_INT 1
63131: DIV
63132: ST_TO_ADDR
// if number < 0 then
63133: LD_VAR 0 1
63137: PUSH
63138: LD_INT 0
63140: LESS
63141: IFFALSE 63151
// result := 0 ;
63143: LD_ADDR_VAR 0 2
63147: PUSH
63148: LD_INT 0
63150: ST_TO_ADDR
// end ;
63151: LD_VAR 0 2
63155: RET
// export function SortByClass ( units , class ) ; var un ; begin
63156: LD_INT 0
63158: PPUSH
63159: PPUSH
// if not units or not class then
63160: LD_VAR 0 1
63164: NOT
63165: PUSH
63166: LD_VAR 0 2
63170: NOT
63171: OR
63172: IFFALSE 63176
// exit ;
63174: GO 63271
// result := [ ] ;
63176: LD_ADDR_VAR 0 3
63180: PUSH
63181: EMPTY
63182: ST_TO_ADDR
// for un in units do
63183: LD_ADDR_VAR 0 4
63187: PUSH
63188: LD_VAR 0 1
63192: PUSH
63193: FOR_IN
63194: IFFALSE 63269
// if GetClass ( un ) = class then
63196: LD_VAR 0 4
63200: PPUSH
63201: CALL_OW 257
63205: PUSH
63206: LD_VAR 0 2
63210: EQUAL
63211: IFFALSE 63238
// result := Insert ( result , 1 , un ) else
63213: LD_ADDR_VAR 0 3
63217: PUSH
63218: LD_VAR 0 3
63222: PPUSH
63223: LD_INT 1
63225: PPUSH
63226: LD_VAR 0 4
63230: PPUSH
63231: CALL_OW 2
63235: ST_TO_ADDR
63236: GO 63267
// result := Replace ( result , result + 1 , un ) ;
63238: LD_ADDR_VAR 0 3
63242: PUSH
63243: LD_VAR 0 3
63247: PPUSH
63248: LD_VAR 0 3
63252: PUSH
63253: LD_INT 1
63255: PLUS
63256: PPUSH
63257: LD_VAR 0 4
63261: PPUSH
63262: CALL_OW 1
63266: ST_TO_ADDR
63267: GO 63193
63269: POP
63270: POP
// end ;
63271: LD_VAR 0 3
63275: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
63276: LD_INT 0
63278: PPUSH
63279: PPUSH
63280: PPUSH
63281: PPUSH
63282: PPUSH
63283: PPUSH
63284: PPUSH
// result := [ ] ;
63285: LD_ADDR_VAR 0 4
63289: PUSH
63290: EMPTY
63291: ST_TO_ADDR
// if x - r < 0 then
63292: LD_VAR 0 1
63296: PUSH
63297: LD_VAR 0 3
63301: MINUS
63302: PUSH
63303: LD_INT 0
63305: LESS
63306: IFFALSE 63318
// min_x := 0 else
63308: LD_ADDR_VAR 0 8
63312: PUSH
63313: LD_INT 0
63315: ST_TO_ADDR
63316: GO 63334
// min_x := x - r ;
63318: LD_ADDR_VAR 0 8
63322: PUSH
63323: LD_VAR 0 1
63327: PUSH
63328: LD_VAR 0 3
63332: MINUS
63333: ST_TO_ADDR
// if y - r < 0 then
63334: LD_VAR 0 2
63338: PUSH
63339: LD_VAR 0 3
63343: MINUS
63344: PUSH
63345: LD_INT 0
63347: LESS
63348: IFFALSE 63360
// min_y := 0 else
63350: LD_ADDR_VAR 0 7
63354: PUSH
63355: LD_INT 0
63357: ST_TO_ADDR
63358: GO 63376
// min_y := y - r ;
63360: LD_ADDR_VAR 0 7
63364: PUSH
63365: LD_VAR 0 2
63369: PUSH
63370: LD_VAR 0 3
63374: MINUS
63375: ST_TO_ADDR
// max_x := x + r ;
63376: LD_ADDR_VAR 0 9
63380: PUSH
63381: LD_VAR 0 1
63385: PUSH
63386: LD_VAR 0 3
63390: PLUS
63391: ST_TO_ADDR
// max_y := y + r ;
63392: LD_ADDR_VAR 0 10
63396: PUSH
63397: LD_VAR 0 2
63401: PUSH
63402: LD_VAR 0 3
63406: PLUS
63407: ST_TO_ADDR
// for _x = min_x to max_x do
63408: LD_ADDR_VAR 0 5
63412: PUSH
63413: DOUBLE
63414: LD_VAR 0 8
63418: DEC
63419: ST_TO_ADDR
63420: LD_VAR 0 9
63424: PUSH
63425: FOR_TO
63426: IFFALSE 63527
// for _y = min_y to max_y do
63428: LD_ADDR_VAR 0 6
63432: PUSH
63433: DOUBLE
63434: LD_VAR 0 7
63438: DEC
63439: ST_TO_ADDR
63440: LD_VAR 0 10
63444: PUSH
63445: FOR_TO
63446: IFFALSE 63523
// begin if not ValidHex ( _x , _y ) then
63448: LD_VAR 0 5
63452: PPUSH
63453: LD_VAR 0 6
63457: PPUSH
63458: CALL_OW 488
63462: NOT
63463: IFFALSE 63467
// continue ;
63465: GO 63445
// if GetResourceTypeXY ( _x , _y ) then
63467: LD_VAR 0 5
63471: PPUSH
63472: LD_VAR 0 6
63476: PPUSH
63477: CALL_OW 283
63481: IFFALSE 63521
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
63483: LD_ADDR_VAR 0 4
63487: PUSH
63488: LD_VAR 0 4
63492: PPUSH
63493: LD_VAR 0 4
63497: PUSH
63498: LD_INT 1
63500: PLUS
63501: PPUSH
63502: LD_VAR 0 5
63506: PUSH
63507: LD_VAR 0 6
63511: PUSH
63512: EMPTY
63513: LIST
63514: LIST
63515: PPUSH
63516: CALL_OW 1
63520: ST_TO_ADDR
// end ;
63521: GO 63445
63523: POP
63524: POP
63525: GO 63425
63527: POP
63528: POP
// end ;
63529: LD_VAR 0 4
63533: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
63534: LD_INT 0
63536: PPUSH
63537: PPUSH
63538: PPUSH
63539: PPUSH
63540: PPUSH
63541: PPUSH
63542: PPUSH
63543: PPUSH
// if not units then
63544: LD_VAR 0 1
63548: NOT
63549: IFFALSE 63553
// exit ;
63551: GO 64077
// result := UnitFilter ( units , [ f_ok ] ) ;
63553: LD_ADDR_VAR 0 3
63557: PUSH
63558: LD_VAR 0 1
63562: PPUSH
63563: LD_INT 50
63565: PUSH
63566: EMPTY
63567: LIST
63568: PPUSH
63569: CALL_OW 72
63573: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
63574: LD_ADDR_VAR 0 8
63578: PUSH
63579: LD_VAR 0 1
63583: PUSH
63584: LD_INT 1
63586: ARRAY
63587: PPUSH
63588: CALL_OW 255
63592: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
63593: LD_ADDR_VAR 0 10
63597: PUSH
63598: LD_INT 29
63600: PUSH
63601: LD_INT 91
63603: PUSH
63604: LD_INT 49
63606: PUSH
63607: EMPTY
63608: LIST
63609: LIST
63610: LIST
63611: ST_TO_ADDR
// if not result then
63612: LD_VAR 0 3
63616: NOT
63617: IFFALSE 63621
// exit ;
63619: GO 64077
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
63621: LD_ADDR_VAR 0 5
63625: PUSH
63626: LD_INT 81
63628: PUSH
63629: LD_VAR 0 8
63633: PUSH
63634: EMPTY
63635: LIST
63636: LIST
63637: PPUSH
63638: CALL_OW 69
63642: ST_TO_ADDR
// for i in result do
63643: LD_ADDR_VAR 0 4
63647: PUSH
63648: LD_VAR 0 3
63652: PUSH
63653: FOR_IN
63654: IFFALSE 64075
// begin tag := GetTag ( i ) + 1 ;
63656: LD_ADDR_VAR 0 9
63660: PUSH
63661: LD_VAR 0 4
63665: PPUSH
63666: CALL_OW 110
63670: PUSH
63671: LD_INT 1
63673: PLUS
63674: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
63675: LD_ADDR_VAR 0 7
63679: PUSH
63680: LD_VAR 0 4
63684: PPUSH
63685: CALL_OW 250
63689: PPUSH
63690: LD_VAR 0 4
63694: PPUSH
63695: CALL_OW 251
63699: PPUSH
63700: LD_INT 6
63702: PPUSH
63703: CALL 63276 0 3
63707: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
63708: LD_VAR 0 4
63712: PPUSH
63713: CALL_OW 247
63717: PUSH
63718: LD_INT 2
63720: EQUAL
63721: PUSH
63722: LD_VAR 0 7
63726: AND
63727: PUSH
63728: LD_VAR 0 4
63732: PPUSH
63733: CALL_OW 264
63737: PUSH
63738: LD_VAR 0 10
63742: IN
63743: NOT
63744: AND
63745: IFFALSE 63784
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
63747: LD_VAR 0 4
63751: PPUSH
63752: LD_VAR 0 7
63756: PUSH
63757: LD_INT 1
63759: ARRAY
63760: PUSH
63761: LD_INT 1
63763: ARRAY
63764: PPUSH
63765: LD_VAR 0 7
63769: PUSH
63770: LD_INT 1
63772: ARRAY
63773: PUSH
63774: LD_INT 2
63776: ARRAY
63777: PPUSH
63778: CALL_OW 116
63782: GO 64073
// if path > tag then
63784: LD_VAR 0 2
63788: PUSH
63789: LD_VAR 0 9
63793: GREATER
63794: IFFALSE 64002
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
63796: LD_ADDR_VAR 0 6
63800: PUSH
63801: LD_VAR 0 5
63805: PPUSH
63806: LD_INT 91
63808: PUSH
63809: LD_VAR 0 4
63813: PUSH
63814: LD_INT 8
63816: PUSH
63817: EMPTY
63818: LIST
63819: LIST
63820: LIST
63821: PPUSH
63822: CALL_OW 72
63826: ST_TO_ADDR
// if nearEnemy then
63827: LD_VAR 0 6
63831: IFFALSE 63900
// begin if GetWeapon ( i ) = ru_time_lapser then
63833: LD_VAR 0 4
63837: PPUSH
63838: CALL_OW 264
63842: PUSH
63843: LD_INT 49
63845: EQUAL
63846: IFFALSE 63874
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
63848: LD_VAR 0 4
63852: PPUSH
63853: LD_VAR 0 6
63857: PPUSH
63858: LD_VAR 0 4
63862: PPUSH
63863: CALL_OW 74
63867: PPUSH
63868: CALL_OW 112
63872: GO 63898
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
63874: LD_VAR 0 4
63878: PPUSH
63879: LD_VAR 0 6
63883: PPUSH
63884: LD_VAR 0 4
63888: PPUSH
63889: CALL_OW 74
63893: PPUSH
63894: CALL_OW 115
// end else
63898: GO 64000
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
63900: LD_VAR 0 4
63904: PPUSH
63905: LD_VAR 0 2
63909: PUSH
63910: LD_VAR 0 9
63914: ARRAY
63915: PUSH
63916: LD_INT 1
63918: ARRAY
63919: PPUSH
63920: LD_VAR 0 2
63924: PUSH
63925: LD_VAR 0 9
63929: ARRAY
63930: PUSH
63931: LD_INT 2
63933: ARRAY
63934: PPUSH
63935: CALL_OW 297
63939: PUSH
63940: LD_INT 6
63942: GREATER
63943: IFFALSE 63986
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
63945: LD_VAR 0 4
63949: PPUSH
63950: LD_VAR 0 2
63954: PUSH
63955: LD_VAR 0 9
63959: ARRAY
63960: PUSH
63961: LD_INT 1
63963: ARRAY
63964: PPUSH
63965: LD_VAR 0 2
63969: PUSH
63970: LD_VAR 0 9
63974: ARRAY
63975: PUSH
63976: LD_INT 2
63978: ARRAY
63979: PPUSH
63980: CALL_OW 114
63984: GO 64000
// SetTag ( i , tag ) ;
63986: LD_VAR 0 4
63990: PPUSH
63991: LD_VAR 0 9
63995: PPUSH
63996: CALL_OW 109
// end else
64000: GO 64073
// if enemy then
64002: LD_VAR 0 5
64006: IFFALSE 64073
// begin if GetWeapon ( i ) = ru_time_lapser then
64008: LD_VAR 0 4
64012: PPUSH
64013: CALL_OW 264
64017: PUSH
64018: LD_INT 49
64020: EQUAL
64021: IFFALSE 64049
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
64023: LD_VAR 0 4
64027: PPUSH
64028: LD_VAR 0 5
64032: PPUSH
64033: LD_VAR 0 4
64037: PPUSH
64038: CALL_OW 74
64042: PPUSH
64043: CALL_OW 112
64047: GO 64073
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
64049: LD_VAR 0 4
64053: PPUSH
64054: LD_VAR 0 5
64058: PPUSH
64059: LD_VAR 0 4
64063: PPUSH
64064: CALL_OW 74
64068: PPUSH
64069: CALL_OW 115
// end ; end ;
64073: GO 63653
64075: POP
64076: POP
// end ;
64077: LD_VAR 0 3
64081: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
64082: LD_INT 0
64084: PPUSH
64085: PPUSH
64086: PPUSH
// if not unit or IsInUnit ( unit ) then
64087: LD_VAR 0 1
64091: NOT
64092: PUSH
64093: LD_VAR 0 1
64097: PPUSH
64098: CALL_OW 310
64102: OR
64103: IFFALSE 64107
// exit ;
64105: GO 64198
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
64107: LD_ADDR_VAR 0 4
64111: PUSH
64112: LD_VAR 0 1
64116: PPUSH
64117: CALL_OW 250
64121: PPUSH
64122: LD_VAR 0 2
64126: PPUSH
64127: LD_INT 1
64129: PPUSH
64130: CALL_OW 272
64134: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
64135: LD_ADDR_VAR 0 5
64139: PUSH
64140: LD_VAR 0 1
64144: PPUSH
64145: CALL_OW 251
64149: PPUSH
64150: LD_VAR 0 2
64154: PPUSH
64155: LD_INT 1
64157: PPUSH
64158: CALL_OW 273
64162: ST_TO_ADDR
// if ValidHex ( x , y ) then
64163: LD_VAR 0 4
64167: PPUSH
64168: LD_VAR 0 5
64172: PPUSH
64173: CALL_OW 488
64177: IFFALSE 64198
// ComTurnXY ( unit , x , y ) ;
64179: LD_VAR 0 1
64183: PPUSH
64184: LD_VAR 0 4
64188: PPUSH
64189: LD_VAR 0 5
64193: PPUSH
64194: CALL_OW 118
// end ;
64198: LD_VAR 0 3
64202: RET
// export function SeeUnits ( side , units ) ; var i ; begin
64203: LD_INT 0
64205: PPUSH
64206: PPUSH
// result := false ;
64207: LD_ADDR_VAR 0 3
64211: PUSH
64212: LD_INT 0
64214: ST_TO_ADDR
// if not units then
64215: LD_VAR 0 2
64219: NOT
64220: IFFALSE 64224
// exit ;
64222: GO 64269
// for i in units do
64224: LD_ADDR_VAR 0 4
64228: PUSH
64229: LD_VAR 0 2
64233: PUSH
64234: FOR_IN
64235: IFFALSE 64267
// if See ( side , i ) then
64237: LD_VAR 0 1
64241: PPUSH
64242: LD_VAR 0 4
64246: PPUSH
64247: CALL_OW 292
64251: IFFALSE 64265
// begin result := true ;
64253: LD_ADDR_VAR 0 3
64257: PUSH
64258: LD_INT 1
64260: ST_TO_ADDR
// exit ;
64261: POP
64262: POP
64263: GO 64269
// end ;
64265: GO 64234
64267: POP
64268: POP
// end ;
64269: LD_VAR 0 3
64273: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
64274: LD_INT 0
64276: PPUSH
64277: PPUSH
64278: PPUSH
64279: PPUSH
// if not unit or not points then
64280: LD_VAR 0 1
64284: NOT
64285: PUSH
64286: LD_VAR 0 2
64290: NOT
64291: OR
64292: IFFALSE 64296
// exit ;
64294: GO 64386
// dist := 99999 ;
64296: LD_ADDR_VAR 0 5
64300: PUSH
64301: LD_INT 99999
64303: ST_TO_ADDR
// for i in points do
64304: LD_ADDR_VAR 0 4
64308: PUSH
64309: LD_VAR 0 2
64313: PUSH
64314: FOR_IN
64315: IFFALSE 64384
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
64317: LD_ADDR_VAR 0 6
64321: PUSH
64322: LD_VAR 0 1
64326: PPUSH
64327: LD_VAR 0 4
64331: PUSH
64332: LD_INT 1
64334: ARRAY
64335: PPUSH
64336: LD_VAR 0 4
64340: PUSH
64341: LD_INT 2
64343: ARRAY
64344: PPUSH
64345: CALL_OW 297
64349: ST_TO_ADDR
// if tmpDist < dist then
64350: LD_VAR 0 6
64354: PUSH
64355: LD_VAR 0 5
64359: LESS
64360: IFFALSE 64382
// begin result := i ;
64362: LD_ADDR_VAR 0 3
64366: PUSH
64367: LD_VAR 0 4
64371: ST_TO_ADDR
// dist := tmpDist ;
64372: LD_ADDR_VAR 0 5
64376: PUSH
64377: LD_VAR 0 6
64381: ST_TO_ADDR
// end ; end ;
64382: GO 64314
64384: POP
64385: POP
// end ;
64386: LD_VAR 0 3
64390: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
64391: LD_INT 0
64393: PPUSH
// uc_side := side ;
64394: LD_ADDR_OWVAR 20
64398: PUSH
64399: LD_VAR 0 1
64403: ST_TO_ADDR
// uc_nation := 3 ;
64404: LD_ADDR_OWVAR 21
64408: PUSH
64409: LD_INT 3
64411: ST_TO_ADDR
// vc_chassis := 25 ;
64412: LD_ADDR_OWVAR 37
64416: PUSH
64417: LD_INT 25
64419: ST_TO_ADDR
// vc_engine := engine_siberite ;
64420: LD_ADDR_OWVAR 39
64424: PUSH
64425: LD_INT 3
64427: ST_TO_ADDR
// vc_control := control_computer ;
64428: LD_ADDR_OWVAR 38
64432: PUSH
64433: LD_INT 3
64435: ST_TO_ADDR
// vc_weapon := 59 ;
64436: LD_ADDR_OWVAR 40
64440: PUSH
64441: LD_INT 59
64443: ST_TO_ADDR
// result := CreateVehicle ;
64444: LD_ADDR_VAR 0 5
64448: PUSH
64449: CALL_OW 45
64453: ST_TO_ADDR
// SetDir ( result , d ) ;
64454: LD_VAR 0 5
64458: PPUSH
64459: LD_VAR 0 4
64463: PPUSH
64464: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
64468: LD_VAR 0 5
64472: PPUSH
64473: LD_VAR 0 2
64477: PPUSH
64478: LD_VAR 0 3
64482: PPUSH
64483: LD_INT 0
64485: PPUSH
64486: CALL_OW 48
// end ;
64490: LD_VAR 0 5
64494: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
64495: LD_INT 0
64497: PPUSH
64498: PPUSH
64499: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
64500: LD_ADDR_VAR 0 2
64504: PUSH
64505: LD_INT 0
64507: PUSH
64508: LD_INT 0
64510: PUSH
64511: LD_INT 0
64513: PUSH
64514: LD_INT 0
64516: PUSH
64517: EMPTY
64518: LIST
64519: LIST
64520: LIST
64521: LIST
64522: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
64523: LD_VAR 0 1
64527: NOT
64528: PUSH
64529: LD_VAR 0 1
64533: PPUSH
64534: CALL_OW 264
64538: PUSH
64539: LD_INT 12
64541: PUSH
64542: LD_INT 51
64544: PUSH
64545: LD_INT 32
64547: PUSH
64548: LD_INT 89
64550: PUSH
64551: EMPTY
64552: LIST
64553: LIST
64554: LIST
64555: LIST
64556: IN
64557: NOT
64558: OR
64559: IFFALSE 64563
// exit ;
64561: GO 64661
// for i := 1 to 3 do
64563: LD_ADDR_VAR 0 3
64567: PUSH
64568: DOUBLE
64569: LD_INT 1
64571: DEC
64572: ST_TO_ADDR
64573: LD_INT 3
64575: PUSH
64576: FOR_TO
64577: IFFALSE 64659
// begin tmp := GetCargo ( cargo , i ) ;
64579: LD_ADDR_VAR 0 4
64583: PUSH
64584: LD_VAR 0 1
64588: PPUSH
64589: LD_VAR 0 3
64593: PPUSH
64594: CALL_OW 289
64598: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
64599: LD_ADDR_VAR 0 2
64603: PUSH
64604: LD_VAR 0 2
64608: PPUSH
64609: LD_VAR 0 3
64613: PPUSH
64614: LD_VAR 0 4
64618: PPUSH
64619: CALL_OW 1
64623: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
64624: LD_ADDR_VAR 0 2
64628: PUSH
64629: LD_VAR 0 2
64633: PPUSH
64634: LD_INT 4
64636: PPUSH
64637: LD_VAR 0 2
64641: PUSH
64642: LD_INT 4
64644: ARRAY
64645: PUSH
64646: LD_VAR 0 4
64650: PLUS
64651: PPUSH
64652: CALL_OW 1
64656: ST_TO_ADDR
// end ;
64657: GO 64576
64659: POP
64660: POP
// end ;
64661: LD_VAR 0 2
64665: RET
// export function Length ( array ) ; begin
64666: LD_INT 0
64668: PPUSH
// result := array + 0 ;
64669: LD_ADDR_VAR 0 2
64673: PUSH
64674: LD_VAR 0 1
64678: PUSH
64679: LD_INT 0
64681: PLUS
64682: ST_TO_ADDR
// end ;
64683: LD_VAR 0 2
64687: RET
// export function PrepareArray ( array ) ; begin
64688: LD_INT 0
64690: PPUSH
// result := array diff 0 ;
64691: LD_ADDR_VAR 0 2
64695: PUSH
64696: LD_VAR 0 1
64700: PUSH
64701: LD_INT 0
64703: DIFF
64704: ST_TO_ADDR
// if not result [ 1 ] then
64705: LD_VAR 0 2
64709: PUSH
64710: LD_INT 1
64712: ARRAY
64713: NOT
64714: IFFALSE 64734
// result := Delete ( result , 1 ) ;
64716: LD_ADDR_VAR 0 2
64720: PUSH
64721: LD_VAR 0 2
64725: PPUSH
64726: LD_INT 1
64728: PPUSH
64729: CALL_OW 3
64733: ST_TO_ADDR
// end ;
64734: LD_VAR 0 2
64738: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
64739: LD_INT 0
64741: PPUSH
64742: PPUSH
64743: PPUSH
64744: PPUSH
// sibRocketRange := 25 ;
64745: LD_ADDR_VAR 0 6
64749: PUSH
64750: LD_INT 25
64752: ST_TO_ADDR
// result := false ;
64753: LD_ADDR_VAR 0 4
64757: PUSH
64758: LD_INT 0
64760: ST_TO_ADDR
// for i := 0 to 5 do
64761: LD_ADDR_VAR 0 5
64765: PUSH
64766: DOUBLE
64767: LD_INT 0
64769: DEC
64770: ST_TO_ADDR
64771: LD_INT 5
64773: PUSH
64774: FOR_TO
64775: IFFALSE 64842
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
64777: LD_VAR 0 1
64781: PPUSH
64782: LD_VAR 0 5
64786: PPUSH
64787: LD_VAR 0 6
64791: PPUSH
64792: CALL_OW 272
64796: PPUSH
64797: LD_VAR 0 2
64801: PPUSH
64802: LD_VAR 0 5
64806: PPUSH
64807: LD_VAR 0 6
64811: PPUSH
64812: CALL_OW 273
64816: PPUSH
64817: LD_VAR 0 3
64821: PPUSH
64822: CALL_OW 309
64826: IFFALSE 64840
// begin result := true ;
64828: LD_ADDR_VAR 0 4
64832: PUSH
64833: LD_INT 1
64835: ST_TO_ADDR
// exit ;
64836: POP
64837: POP
64838: GO 64844
// end ;
64840: GO 64774
64842: POP
64843: POP
// end ;
64844: LD_VAR 0 4
64848: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
64849: LD_INT 0
64851: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
64852: LD_VAR 0 1
64856: PPUSH
64857: LD_VAR 0 2
64861: PPUSH
64862: LD_INT 0
64864: PPUSH
64865: LD_INT 0
64867: PPUSH
64868: LD_INT 1
64870: PPUSH
64871: LD_INT 0
64873: PPUSH
64874: CALL_OW 587
// end ; end_of_file
64878: LD_VAR 0 3
64882: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
64883: LD_VAR 0 1
64887: PUSH
64888: LD_INT 200
64890: DOUBLE
64891: GREATEREQUAL
64892: IFFALSE 64900
64894: LD_INT 299
64896: DOUBLE
64897: LESSEQUAL
64898: IFTRUE 64902
64900: GO 64934
64902: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
64903: LD_VAR 0 1
64907: PPUSH
64908: LD_VAR 0 2
64912: PPUSH
64913: LD_VAR 0 3
64917: PPUSH
64918: LD_VAR 0 4
64922: PPUSH
64923: LD_VAR 0 5
64927: PPUSH
64928: CALL 3750 0 5
64932: GO 65011
64934: LD_INT 300
64936: DOUBLE
64937: GREATEREQUAL
64938: IFFALSE 64946
64940: LD_INT 399
64942: DOUBLE
64943: LESSEQUAL
64944: IFTRUE 64948
64946: GO 65010
64948: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
64949: LD_VAR 0 1
64953: PPUSH
64954: LD_VAR 0 2
64958: PPUSH
64959: LD_VAR 0 3
64963: PPUSH
64964: LD_VAR 0 4
64968: PPUSH
64969: LD_VAR 0 5
64973: PPUSH
64974: LD_VAR 0 6
64978: PPUSH
64979: LD_VAR 0 7
64983: PPUSH
64984: LD_VAR 0 8
64988: PPUSH
64989: LD_VAR 0 9
64993: PPUSH
64994: LD_VAR 0 10
64998: PPUSH
64999: LD_VAR 0 11
65003: PPUSH
65004: CALL 20171 0 11
65008: GO 65011
65010: POP
// end ;
65011: PPOPN 11
65013: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
65014: LD_VAR 0 1
65018: PPUSH
65019: LD_VAR 0 2
65023: PPUSH
65024: LD_VAR 0 3
65028: PPUSH
65029: LD_VAR 0 4
65033: PPUSH
65034: LD_VAR 0 5
65038: PPUSH
65039: CALL 3486 0 5
// end ; end_of_file
65043: PPOPN 5
65045: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
65046: LD_VAR 0 1
65050: PPUSH
65051: LD_VAR 0 2
65055: PPUSH
65056: LD_VAR 0 3
65060: PPUSH
65061: LD_VAR 0 4
65065: PPUSH
65066: LD_VAR 0 5
65070: PPUSH
65071: LD_VAR 0 6
65075: PPUSH
65076: CALL 7791 0 6
// end ;
65080: PPOPN 6
65082: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
65083: LD_INT 0
65085: PPUSH
// begin if not units then
65086: LD_VAR 0 1
65090: NOT
65091: IFFALSE 65095
// exit ;
65093: GO 65095
// end ;
65095: PPOPN 7
65097: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
65098: CALL 7685 0 0
// end ;
65102: PPOPN 1
65104: END
