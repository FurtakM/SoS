// starting begin ResetFog ;
   0: CALL_OW 335
// PrepareGame ;
   4: CALL 13 0 0
// PrepareUnits ;
   8: CALL 299 0 0
// end ;
  12: END
// export mechanics , time_to_destroy , players , sib_bomb , time , veh_amount ; export p1 , p2 , p3 , p4 , p5 ; function PrepareGame ; var debug , i ; begin
  13: LD_INT 0
  15: PPUSH
  16: PPUSH
  17: PPUSH
// debug := false ;
  18: LD_ADDR_VAR 0 2
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// if debug then
  26: LD_VAR 0 2
  30: IFFALSE 81
// begin mechanics := 5 ;
  32: LD_ADDR_EXP 1
  36: PUSH
  37: LD_INT 5
  39: ST_TO_ADDR
// time_to_destroy := 45 ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_INT 45
  47: ST_TO_ADDR
// players := 4 ;
  48: LD_ADDR_EXP 3
  52: PUSH
  53: LD_INT 4
  55: ST_TO_ADDR
// sib_bomb := true ;
  56: LD_ADDR_EXP 4
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// time := 3 3$00 ;
  64: LD_ADDR_EXP 5
  68: PUSH
  69: LD_INT 6300
  71: ST_TO_ADDR
// FogOff ( 1 ) ;
  72: LD_INT 1
  74: PPUSH
  75: CALL_OW 344
// end else
  79: GO 214
// begin time := 3 3$00 ;
  81: LD_ADDR_EXP 5
  85: PUSH
  86: LD_INT 6300
  88: ST_TO_ADDR
// players := 4 ;
  89: LD_ADDR_EXP 3
  93: PUSH
  94: LD_INT 4
  96: ST_TO_ADDR
// sib_bomb := true ;
  97: LD_ADDR_EXP 4
 101: PUSH
 102: LD_INT 1
 104: ST_TO_ADDR
// mechanics := 4 ;
 105: LD_ADDR_EXP 1
 109: PUSH
 110: LD_INT 4
 112: ST_TO_ADDR
// mechanics := [ 3 , 4 , 5 ] [ GetMultiplayerSetting ( 0 ) ] ;
 113: LD_ADDR_EXP 1
 117: PUSH
 118: LD_INT 3
 120: PUSH
 121: LD_INT 4
 123: PUSH
 124: LD_INT 5
 126: PUSH
 127: EMPTY
 128: LIST
 129: LIST
 130: LIST
 131: PUSH
 132: LD_INT 0
 134: PPUSH
 135: CALL_OW 426
 139: ARRAY
 140: ST_TO_ADDR
// players := [ 3 , 4 , 5 ] [ GetMultiplayerSetting ( 1 ) ] ;
 141: LD_ADDR_EXP 3
 145: PUSH
 146: LD_INT 3
 148: PUSH
 149: LD_INT 4
 151: PUSH
 152: LD_INT 5
 154: PUSH
 155: EMPTY
 156: LIST
 157: LIST
 158: LIST
 159: PUSH
 160: LD_INT 1
 162: PPUSH
 163: CALL_OW 426
 167: ARRAY
 168: ST_TO_ADDR
// time := [ 3 3$00 , 5 5$00 , 10 10$00 ] [ GetMultiplayerSetting ( 2 ) ] ;
 169: LD_ADDR_EXP 5
 173: PUSH
 174: LD_INT 6300
 176: PUSH
 177: LD_INT 10500
 179: PUSH
 180: LD_INT 21000
 182: PUSH
 183: EMPTY
 184: LIST
 185: LIST
 186: LIST
 187: PUSH
 188: LD_INT 2
 190: PPUSH
 191: CALL_OW 426
 195: ARRAY
 196: ST_TO_ADDR
// sib_bomb := GetMultiplayerSetting ( 3 ) - 1 ;
 197: LD_ADDR_EXP 4
 201: PUSH
 202: LD_INT 3
 204: PPUSH
 205: CALL_OW 426
 209: PUSH
 210: LD_INT 1
 212: MINUS
 213: ST_TO_ADDR
// end ; p1 := 0 ;
 214: LD_ADDR_EXP 7
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// p2 := 0 ;
 222: LD_ADDR_EXP 8
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// p3 := 0 ;
 230: LD_ADDR_EXP 9
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// p4 := 0 ;
 238: LD_ADDR_EXP 10
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// p5 := 0 ;
 246: LD_ADDR_EXP 11
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// veh_amount := 12 ;
 254: LD_ADDR_EXP 6
 258: PUSH
 259: LD_INT 12
 261: ST_TO_ADDR
// for i = 1 to 7 do
 262: LD_ADDR_VAR 0 3
 266: PUSH
 267: DOUBLE
 268: LD_INT 1
 270: DEC
 271: ST_TO_ADDR
 272: LD_INT 7
 274: PUSH
 275: FOR_TO
 276: IFFALSE 292
// ChangeSideFog ( i , 8 ) ;
 278: LD_VAR 0 3
 282: PPUSH
 283: LD_INT 8
 285: PPUSH
 286: CALL_OW 343
 290: GO 275
 292: POP
 293: POP
// end ; end_of_file
 294: LD_VAR 0 1
 298: RET
// export function PrepareUnits ; var i , side ; begin
 299: LD_INT 0
 301: PPUSH
 302: PPUSH
 303: PPUSH
// side := players ;
 304: LD_ADDR_VAR 0 3
 308: PUSH
 309: LD_EXP 3
 313: ST_TO_ADDR
// uc_nation := 1 ;
 314: LD_ADDR_OWVAR 21
 318: PUSH
 319: LD_INT 1
 321: ST_TO_ADDR
// for i = 1 to mechanics do
 322: LD_ADDR_VAR 0 2
 326: PUSH
 327: DOUBLE
 328: LD_INT 1
 330: DEC
 331: ST_TO_ADDR
 332: LD_EXP 1
 336: PUSH
 337: FOR_TO
 338: IFFALSE 402
// for side = 1 to players do
 340: LD_ADDR_VAR 0 3
 344: PUSH
 345: DOUBLE
 346: LD_INT 1
 348: DEC
 349: ST_TO_ADDR
 350: LD_EXP 3
 354: PUSH
 355: FOR_TO
 356: IFFALSE 398
// begin uc_side := side ;
 358: LD_ADDR_OWVAR 20
 362: PUSH
 363: LD_VAR 0 3
 367: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
 368: LD_INT 0
 370: PPUSH
 371: LD_INT 3
 373: PPUSH
 374: LD_INT 10
 376: PPUSH
 377: CALL_OW 380
// PlaceUnitArea ( CreateHuman , mech_area , false ) ;
 381: CALL_OW 44
 385: PPUSH
 386: LD_INT 6
 388: PPUSH
 389: LD_INT 0
 391: PPUSH
 392: CALL_OW 49
// end ;
 396: GO 355
 398: POP
 399: POP
 400: GO 337
 402: POP
 403: POP
// end ;
 404: LD_VAR 0 1
 408: RET
// function ToSpawn ( side ) ; begin
 409: LD_INT 0
 411: PPUSH
// uc_side := side ;
 412: LD_ADDR_OWVAR 20
 416: PUSH
 417: LD_VAR 0 1
 421: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
 422: LD_INT 0
 424: PPUSH
 425: LD_INT 3
 427: PPUSH
 428: LD_INT 10
 430: PPUSH
 431: CALL_OW 380
// PlaceUnitArea ( CreateHuman , mech_area , false ) ;
 435: CALL_OW 44
 439: PPUSH
 440: LD_INT 6
 442: PPUSH
 443: LD_INT 0
 445: PPUSH
 446: CALL_OW 49
// end ;
 450: LD_VAR 0 2
 454: RET
// every 0 0$13 trigger time do var i , filter ;
 455: LD_EXP 5
 459: IFFALSE 569
 461: GO 463
 463: DISABLE
 464: LD_INT 0
 466: PPUSH
 467: PPUSH
// begin enable ;
 468: ENABLE
// for i = 1 to players do
 469: LD_ADDR_VAR 0 1
 473: PUSH
 474: DOUBLE
 475: LD_INT 1
 477: DEC
 478: ST_TO_ADDR
 479: LD_EXP 3
 483: PUSH
 484: FOR_TO
 485: IFFALSE 567
// begin filter := FilterAllUnits ( [ [ [ f_side , i ] , [ f_class , 3 ] , [ f_type , unit_human ] ] ] ) ;
 487: LD_ADDR_VAR 0 2
 491: PUSH
 492: LD_INT 22
 494: PUSH
 495: LD_VAR 0 1
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: PUSH
 504: LD_INT 25
 506: PUSH
 507: LD_INT 3
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: PUSH
 514: LD_INT 21
 516: PUSH
 517: LD_INT 1
 519: PUSH
 520: EMPTY
 521: LIST
 522: LIST
 523: PUSH
 524: EMPTY
 525: LIST
 526: LIST
 527: LIST
 528: PUSH
 529: EMPTY
 530: LIST
 531: PPUSH
 532: CALL_OW 69
 536: ST_TO_ADDR
// if filter < mechanics then
 537: LD_VAR 0 2
 541: PUSH
 542: LD_EXP 1
 546: LESS
 547: IFFALSE 565
// begin Wait ( 0 0$03 ) ;
 549: LD_INT 105
 551: PPUSH
 552: CALL_OW 67
// ToSpawn ( i ) ;
 556: LD_VAR 0 1
 560: PPUSH
 561: CALL 409 0 1
// end ; end ;
 565: GO 484
 567: POP
 568: POP
// end ;
 569: PPOPN 2
 571: END
// every 0 0$01 trigger time do var i , filter , filter2 , vehicles ;
 572: LD_EXP 5
 576: IFFALSE 943
 578: GO 580
 580: DISABLE
 581: LD_INT 0
 583: PPUSH
 584: PPUSH
 585: PPUSH
 586: PPUSH
// begin enable ;
 587: ENABLE
// filter2 := FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_not , [ f_side , 0 ] ] , [ f_not , [ f_side , 1 ] ] ] ) ;
 588: LD_ADDR_VAR 0 3
 592: PUSH
 593: LD_INT 21
 595: PUSH
 596: LD_INT 2
 598: PUSH
 599: EMPTY
 600: LIST
 601: LIST
 602: PUSH
 603: LD_INT 3
 605: PUSH
 606: LD_INT 22
 608: PUSH
 609: LD_INT 0
 611: PUSH
 612: EMPTY
 613: LIST
 614: LIST
 615: PUSH
 616: EMPTY
 617: LIST
 618: LIST
 619: PUSH
 620: LD_INT 3
 622: PUSH
 623: LD_INT 22
 625: PUSH
 626: LD_INT 1
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: PUSH
 633: EMPTY
 634: LIST
 635: LIST
 636: PUSH
 637: EMPTY
 638: LIST
 639: LIST
 640: LIST
 641: PPUSH
 642: CALL_OW 69
 646: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_side , 1 ] ] ] ) ;
 647: LD_ADDR_VAR 0 2
 651: PUSH
 652: LD_INT 21
 654: PUSH
 655: LD_INT 1
 657: PUSH
 658: EMPTY
 659: LIST
 660: LIST
 661: PUSH
 662: LD_INT 3
 664: PUSH
 665: LD_INT 54
 667: PUSH
 668: EMPTY
 669: LIST
 670: PUSH
 671: EMPTY
 672: LIST
 673: LIST
 674: PUSH
 675: LD_INT 3
 677: PUSH
 678: LD_INT 22
 680: PUSH
 681: LD_INT 1
 683: PUSH
 684: EMPTY
 685: LIST
 686: LIST
 687: PUSH
 688: EMPTY
 689: LIST
 690: LIST
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: LIST
 696: PPUSH
 697: CALL_OW 69
 701: ST_TO_ADDR
// vehicles := FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 702: LD_ADDR_VAR 0 4
 706: PUSH
 707: LD_INT 21
 709: PUSH
 710: LD_INT 2
 712: PUSH
 713: EMPTY
 714: LIST
 715: LIST
 716: PUSH
 717: LD_INT 58
 719: PUSH
 720: EMPTY
 721: LIST
 722: PUSH
 723: EMPTY
 724: LIST
 725: LIST
 726: PPUSH
 727: CALL_OW 69
 731: ST_TO_ADDR
// if filter and vehicles then
 732: LD_VAR 0 2
 736: PUSH
 737: LD_VAR 0 4
 741: AND
 742: IFFALSE 879
// for i = 1 to filter do
 744: LD_ADDR_VAR 0 1
 748: PUSH
 749: DOUBLE
 750: LD_INT 1
 752: DEC
 753: ST_TO_ADDR
 754: LD_VAR 0 2
 758: PUSH
 759: FOR_TO
 760: IFFALSE 877
// if not HasTask ( filter [ i ] ) and IsOk ( filter [ i ] ) then
 762: LD_VAR 0 2
 766: PUSH
 767: LD_VAR 0 1
 771: ARRAY
 772: PPUSH
 773: CALL_OW 314
 777: NOT
 778: PUSH
 779: LD_VAR 0 2
 783: PUSH
 784: LD_VAR 0 1
 788: ARRAY
 789: PPUSH
 790: CALL_OW 302
 794: AND
 795: IFFALSE 875
// if GetDistUnits ( filter [ i ] , NearestUnitToUnit ( vehicles , filter [ i ] ) ) < 45 then
 797: LD_VAR 0 2
 801: PUSH
 802: LD_VAR 0 1
 806: ARRAY
 807: PPUSH
 808: LD_VAR 0 4
 812: PPUSH
 813: LD_VAR 0 2
 817: PUSH
 818: LD_VAR 0 1
 822: ARRAY
 823: PPUSH
 824: CALL_OW 74
 828: PPUSH
 829: CALL_OW 296
 833: PUSH
 834: LD_INT 45
 836: LESS
 837: IFFALSE 875
// ComEnterUnit ( filter [ i ] , NearestUnitToUnit ( vehicles , filter [ i ] ) ) ;
 839: LD_VAR 0 2
 843: PUSH
 844: LD_VAR 0 1
 848: ARRAY
 849: PPUSH
 850: LD_VAR 0 4
 854: PPUSH
 855: LD_VAR 0 2
 859: PUSH
 860: LD_VAR 0 1
 864: ARRAY
 865: PPUSH
 866: CALL_OW 74
 870: PPUSH
 871: CALL_OW 120
 875: GO 759
 877: POP
 878: POP
// if filter2 then
 879: LD_VAR 0 3
 883: IFFALSE 943
// for i = 1 to filter2 do
 885: LD_ADDR_VAR 0 1
 889: PUSH
 890: DOUBLE
 891: LD_INT 1
 893: DEC
 894: ST_TO_ADDR
 895: LD_VAR 0 3
 899: PUSH
 900: FOR_TO
 901: IFFALSE 941
// if not HasTask ( filter2 [ i ] ) then
 903: LD_VAR 0 3
 907: PUSH
 908: LD_VAR 0 1
 912: ARRAY
 913: PPUSH
 914: CALL_OW 314
 918: NOT
 919: IFFALSE 939
// ComMoveToArea ( filter2 [ i ] , exit_area ) ;
 921: LD_VAR 0 3
 925: PUSH
 926: LD_VAR 0 1
 930: ARRAY
 931: PPUSH
 932: LD_INT 4
 934: PPUSH
 935: CALL_OW 113
 939: GO 900
 941: POP
 942: POP
// end ; end_of_file
 943: PPOPN 4
 945: END
// export function SpawnCar ( chas , area ) ; var i , e , veh , ar_chassis , ru_chassis , us_chassis , ar_weapons , ru_weapons , us_weapons , chassis , engine , weapon ; begin
 946: LD_INT 0
 948: PPUSH
 949: PPUSH
 950: PPUSH
 951: PPUSH
 952: PPUSH
 953: PPUSH
 954: PPUSH
 955: PPUSH
 956: PPUSH
 957: PPUSH
 958: PPUSH
 959: PPUSH
 960: PPUSH
// uc_side := 0 ;
 961: LD_ADDR_OWVAR 20
 965: PUSH
 966: LD_INT 0
 968: ST_TO_ADDR
// uc_nation := Rand ( 1 , 3 ) ;
 969: LD_ADDR_OWVAR 21
 973: PUSH
 974: LD_INT 1
 976: PPUSH
 977: LD_INT 3
 979: PPUSH
 980: CALL_OW 12
 984: ST_TO_ADDR
// ar_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ;
 985: LD_ADDR_VAR 0 7
 989: PUSH
 990: LD_INT 11
 992: PUSH
 993: LD_INT 12
 995: PUSH
 996: LD_INT 13
 998: PUSH
 999: LD_INT 14
1001: PUSH
1002: EMPTY
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: ST_TO_ADDR
// ru_chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ;
1008: LD_ADDR_VAR 0 8
1012: PUSH
1013: LD_INT 21
1015: PUSH
1016: LD_INT 22
1018: PUSH
1019: LD_INT 23
1021: PUSH
1022: LD_INT 24
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: ST_TO_ADDR
// us_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ;
1031: LD_ADDR_VAR 0 9
1035: PUSH
1036: LD_INT 1
1038: PUSH
1039: LD_INT 2
1041: PUSH
1042: LD_INT 3
1044: PUSH
1045: LD_INT 4
1047: PUSH
1048: LD_INT 5
1050: PUSH
1051: EMPTY
1052: LIST
1053: LIST
1054: LIST
1055: LIST
1056: LIST
1057: ST_TO_ADDR
// if chas > 0 then
1058: LD_VAR 0 1
1062: PUSH
1063: LD_INT 0
1065: GREATER
1066: IFFALSE 1080
// vc_chassis := chas else
1068: LD_ADDR_OWVAR 37
1072: PUSH
1073: LD_VAR 0 1
1077: ST_TO_ADDR
1078: GO 1173
// begin case uc_nation of 1 :
1080: LD_OWVAR 21
1084: PUSH
1085: LD_INT 1
1087: DOUBLE
1088: EQUAL
1089: IFTRUE 1093
1091: GO 1106
1093: POP
// chassis := us_chassis ; 2 :
1094: LD_ADDR_VAR 0 13
1098: PUSH
1099: LD_VAR 0 9
1103: ST_TO_ADDR
1104: GO 1149
1106: LD_INT 2
1108: DOUBLE
1109: EQUAL
1110: IFTRUE 1114
1112: GO 1127
1114: POP
// chassis := ar_chassis ; 3 :
1115: LD_ADDR_VAR 0 13
1119: PUSH
1120: LD_VAR 0 7
1124: ST_TO_ADDR
1125: GO 1149
1127: LD_INT 3
1129: DOUBLE
1130: EQUAL
1131: IFTRUE 1135
1133: GO 1148
1135: POP
// chassis := ru_chassis ; end ;
1136: LD_ADDR_VAR 0 13
1140: PUSH
1141: LD_VAR 0 8
1145: ST_TO_ADDR
1146: GO 1149
1148: POP
// vc_chassis := chassis [ Rand ( 1 , chassis ) ] ;
1149: LD_ADDR_OWVAR 37
1153: PUSH
1154: LD_VAR 0 13
1158: PUSH
1159: LD_INT 1
1161: PPUSH
1162: LD_VAR 0 13
1166: PPUSH
1167: CALL_OW 12
1171: ARRAY
1172: ST_TO_ADDR
// end ; if vc_chassis in [ ar_hovercraft , ar_light_trike , us_light_wheeled ] then
1173: LD_OWVAR 37
1177: PUSH
1178: LD_INT 11
1180: PUSH
1181: LD_INT 12
1183: PUSH
1184: LD_INT 1
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: LIST
1191: IN
1192: IFFALSE 1212
// engine := Rand ( 1 , 2 ) else
1194: LD_ADDR_VAR 0 14
1198: PUSH
1199: LD_INT 1
1201: PPUSH
1202: LD_INT 2
1204: PPUSH
1205: CALL_OW 12
1209: ST_TO_ADDR
1210: GO 1324
// begin if not vc_chassis in [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , us_heavy_tracked , us_morphling ] then
1212: LD_OWVAR 37
1216: PUSH
1217: LD_INT 21
1219: PUSH
1220: LD_INT 22
1222: PUSH
1223: LD_INT 23
1225: PUSH
1226: LD_INT 24
1228: PUSH
1229: LD_INT 4
1231: PUSH
1232: LD_INT 5
1234: PUSH
1235: EMPTY
1236: LIST
1237: LIST
1238: LIST
1239: LIST
1240: LIST
1241: LIST
1242: IN
1243: NOT
1244: IFFALSE 1264
// engine := Rand ( 1 , 3 ) else
1246: LD_ADDR_VAR 0 14
1250: PUSH
1251: LD_INT 1
1253: PPUSH
1254: LD_INT 3
1256: PPUSH
1257: CALL_OW 12
1261: ST_TO_ADDR
1262: GO 1280
// e := Rand ( 1 , 2 ) ;
1264: LD_ADDR_VAR 0 5
1268: PUSH
1269: LD_INT 1
1271: PPUSH
1272: LD_INT 2
1274: PPUSH
1275: CALL_OW 12
1279: ST_TO_ADDR
// case e of 1 :
1280: LD_VAR 0 5
1284: PUSH
1285: LD_INT 1
1287: DOUBLE
1288: EQUAL
1289: IFTRUE 1293
1291: GO 1304
1293: POP
// engine := engine_combustion ; 2 :
1294: LD_ADDR_VAR 0 14
1298: PUSH
1299: LD_INT 1
1301: ST_TO_ADDR
1302: GO 1324
1304: LD_INT 2
1306: DOUBLE
1307: EQUAL
1308: IFTRUE 1312
1310: GO 1323
1312: POP
// engine := engine_siberite ; end ;
1313: LD_ADDR_VAR 0 14
1317: PUSH
1318: LD_INT 3
1320: ST_TO_ADDR
1321: GO 1324
1323: POP
// end ; vc_engine := engine ;
1324: LD_ADDR_OWVAR 39
1328: PUSH
1329: LD_VAR 0 14
1333: ST_TO_ADDR
// vc_control := control_manual ;
1334: LD_ADDR_OWVAR 38
1338: PUSH
1339: LD_INT 1
1341: ST_TO_ADDR
// ar_weapons := [ ar_multimissile_ballista , ar_double_machine_gun , ar_light_gun , ar_radar , ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb , ar_flame_thrower ] ;
1342: LD_ADDR_VAR 0 10
1346: PUSH
1347: LD_INT 22
1349: PUSH
1350: LD_INT 24
1352: PUSH
1353: LD_INT 23
1355: PUSH
1356: LD_INT 30
1358: PUSH
1359: LD_INT 25
1361: PUSH
1362: LD_INT 27
1364: PUSH
1365: LD_INT 28
1367: PUSH
1368: LD_INT 29
1370: PUSH
1371: LD_INT 26
1373: PUSH
1374: EMPTY
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: LIST
1382: LIST
1383: LIST
1384: ST_TO_ADDR
// ru_weapons := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , 98 , ru_rocket_launcher , ru_heavy_gun , ru_rocket , ru_bulldozer , ru_time_lapser ] ;
1385: LD_ADDR_VAR 0 11
1389: PUSH
1390: LD_INT 42
1392: PUSH
1393: LD_INT 43
1395: PUSH
1396: LD_INT 44
1398: PUSH
1399: LD_INT 98
1401: PUSH
1402: LD_INT 45
1404: PUSH
1405: LD_INT 46
1407: PUSH
1408: LD_INT 47
1410: PUSH
1411: LD_INT 53
1413: PUSH
1414: LD_INT 49
1416: PUSH
1417: EMPTY
1418: LIST
1419: LIST
1420: LIST
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: LIST
1427: ST_TO_ADDR
// us_weapons := [ us_machine_gun , us_light_gun , us_radar , us_gatling_gun , us_double_gun , us_rocket_launcher , us_laser , us_heavy_gun , us_bulldozer , us_double_laser ] ;
1428: LD_ADDR_VAR 0 12
1432: PUSH
1433: LD_INT 2
1435: PUSH
1436: LD_INT 3
1438: PUSH
1439: LD_INT 11
1441: PUSH
1442: LD_INT 4
1444: PUSH
1445: LD_INT 5
1447: PUSH
1448: LD_INT 7
1450: PUSH
1451: LD_INT 9
1453: PUSH
1454: LD_INT 6
1456: PUSH
1457: LD_INT 14
1459: PUSH
1460: LD_INT 10
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: LIST
1473: LIST
1474: ST_TO_ADDR
// if uc_nation = nation_arabian then
1475: LD_OWVAR 21
1479: PUSH
1480: LD_INT 2
1482: EQUAL
1483: IFFALSE 1550
// begin if vc_chassis in [ ar_hovercraft , ar_light_trike ] then
1485: LD_OWVAR 37
1489: PUSH
1490: LD_INT 11
1492: PUSH
1493: LD_INT 12
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: IN
1500: IFFALSE 1526
// weapon := ar_weapons [ Rand ( 1 , 3 ) ] else
1502: LD_ADDR_VAR 0 15
1506: PUSH
1507: LD_VAR 0 10
1511: PUSH
1512: LD_INT 1
1514: PPUSH
1515: LD_INT 3
1517: PPUSH
1518: CALL_OW 12
1522: ARRAY
1523: ST_TO_ADDR
1524: GO 1550
// weapon := ar_weapons [ Rand ( 1 , ar_weapons ) ] ;
1526: LD_ADDR_VAR 0 15
1530: PUSH
1531: LD_VAR 0 10
1535: PUSH
1536: LD_INT 1
1538: PPUSH
1539: LD_VAR 0 10
1543: PPUSH
1544: CALL_OW 12
1548: ARRAY
1549: ST_TO_ADDR
// end ; if uc_nation = nation_russian then
1550: LD_OWVAR 21
1554: PUSH
1555: LD_INT 3
1557: EQUAL
1558: IFFALSE 1625
// begin if vc_chassis in [ ru_medium_wheeled , ru_medium_tracked ] then
1560: LD_OWVAR 37
1564: PUSH
1565: LD_INT 21
1567: PUSH
1568: LD_INT 22
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: IN
1575: IFFALSE 1601
// weapon := ru_weapons [ Rand ( 1 , 5 ) ] else
1577: LD_ADDR_VAR 0 15
1581: PUSH
1582: LD_VAR 0 11
1586: PUSH
1587: LD_INT 1
1589: PPUSH
1590: LD_INT 5
1592: PPUSH
1593: CALL_OW 12
1597: ARRAY
1598: ST_TO_ADDR
1599: GO 1625
// weapon := ru_weapons [ Rand ( 1 , ru_weapons ) ] ;
1601: LD_ADDR_VAR 0 15
1605: PUSH
1606: LD_VAR 0 11
1610: PUSH
1611: LD_INT 1
1613: PPUSH
1614: LD_VAR 0 11
1618: PPUSH
1619: CALL_OW 12
1623: ARRAY
1624: ST_TO_ADDR
// end ; if uc_nation = nation_american then
1625: LD_OWVAR 21
1629: PUSH
1630: LD_INT 1
1632: EQUAL
1633: IFFALSE 1742
// begin if vc_chassis = us_light_wheeled then
1635: LD_OWVAR 37
1639: PUSH
1640: LD_INT 1
1642: EQUAL
1643: IFFALSE 1667
// weapon := us_weapons [ Rand ( 1 , 3 ) ] ;
1645: LD_ADDR_VAR 0 15
1649: PUSH
1650: LD_VAR 0 12
1654: PUSH
1655: LD_INT 1
1657: PPUSH
1658: LD_INT 3
1660: PPUSH
1661: CALL_OW 12
1665: ARRAY
1666: ST_TO_ADDR
// if vc_chassis in [ us_medium_tracked , us_medium_wheeled ] then
1667: LD_OWVAR 37
1671: PUSH
1672: LD_INT 3
1674: PUSH
1675: LD_INT 2
1677: PUSH
1678: EMPTY
1679: LIST
1680: LIST
1681: IN
1682: IFFALSE 1708
// weapon := us_weapons [ Rand ( 1 , 7 ) ] else
1684: LD_ADDR_VAR 0 15
1688: PUSH
1689: LD_VAR 0 12
1693: PUSH
1694: LD_INT 1
1696: PPUSH
1697: LD_INT 7
1699: PPUSH
1700: CALL_OW 12
1704: ARRAY
1705: ST_TO_ADDR
1706: GO 1742
// if vc_chassis <> us_light_wheeled then
1708: LD_OWVAR 37
1712: PUSH
1713: LD_INT 1
1715: NONEQUAL
1716: IFFALSE 1742
// weapon := us_weapons [ Rand ( 1 , us_weapons ) ] ;
1718: LD_ADDR_VAR 0 15
1722: PUSH
1723: LD_VAR 0 12
1727: PUSH
1728: LD_INT 1
1730: PPUSH
1731: LD_VAR 0 12
1735: PPUSH
1736: CALL_OW 12
1740: ARRAY
1741: ST_TO_ADDR
// end ; vc_weapon := weapon ;
1742: LD_ADDR_OWVAR 40
1746: PUSH
1747: LD_VAR 0 15
1751: ST_TO_ADDR
// veh := CreateVehicle ;
1752: LD_ADDR_VAR 0 6
1756: PUSH
1757: CALL_OW 45
1761: ST_TO_ADDR
// PlaceUnitArea ( veh , area , true ) ;
1762: LD_VAR 0 6
1766: PPUSH
1767: LD_VAR 0 2
1771: PPUSH
1772: LD_INT 1
1774: PPUSH
1775: CALL_OW 49
// end ;
1779: LD_VAR 0 3
1783: RET
// export function SpawnSibRocket ( area ) ; var veh , p ; begin
1784: LD_INT 0
1786: PPUSH
1787: PPUSH
1788: PPUSH
// uc_side := 0 ;
1789: LD_ADDR_OWVAR 20
1793: PUSH
1794: LD_INT 0
1796: ST_TO_ADDR
// p := Rand ( 1 , 2 ) ;
1797: LD_ADDR_VAR 0 4
1801: PUSH
1802: LD_INT 1
1804: PPUSH
1805: LD_INT 2
1807: PPUSH
1808: CALL_OW 12
1812: ST_TO_ADDR
// case p of 1 :
1813: LD_VAR 0 4
1817: PUSH
1818: LD_INT 1
1820: DOUBLE
1821: EQUAL
1822: IFTRUE 1826
1824: GO 1869
1826: POP
// begin uc_nation := nation_american ;
1827: LD_ADDR_OWVAR 21
1831: PUSH
1832: LD_INT 1
1834: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
1835: LD_ADDR_OWVAR 37
1839: PUSH
1840: LD_INT 4
1842: ST_TO_ADDR
// vc_engine := engine_siberite ;
1843: LD_ADDR_OWVAR 39
1847: PUSH
1848: LD_INT 3
1850: ST_TO_ADDR
// vc_control := control_manual ;
1851: LD_ADDR_OWVAR 38
1855: PUSH
1856: LD_INT 1
1858: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
1859: LD_ADDR_OWVAR 40
1863: PUSH
1864: LD_INT 8
1866: ST_TO_ADDR
// end ; 2 :
1867: GO 1921
1869: LD_INT 2
1871: DOUBLE
1872: EQUAL
1873: IFTRUE 1877
1875: GO 1920
1877: POP
// begin uc_nation := nation_russian ;
1878: LD_ADDR_OWVAR 21
1882: PUSH
1883: LD_INT 3
1885: ST_TO_ADDR
// vc_chassis := ru_heavy_tracked ;
1886: LD_ADDR_OWVAR 37
1890: PUSH
1891: LD_INT 24
1893: ST_TO_ADDR
// vc_engine := engine_siberite ;
1894: LD_ADDR_OWVAR 39
1898: PUSH
1899: LD_INT 3
1901: ST_TO_ADDR
// vc_control := control_manual ;
1902: LD_ADDR_OWVAR 38
1906: PUSH
1907: LD_INT 1
1909: ST_TO_ADDR
// vc_weapon := ru_siberium_rocket ;
1910: LD_ADDR_OWVAR 40
1914: PUSH
1915: LD_INT 48
1917: ST_TO_ADDR
// end ; end ;
1918: GO 1921
1920: POP
// veh := CreateVehicle ;
1921: LD_ADDR_VAR 0 3
1925: PUSH
1926: CALL_OW 45
1930: ST_TO_ADDR
// PlaceUnitArea ( veh , area , true ) ;
1931: LD_VAR 0 3
1935: PPUSH
1936: LD_VAR 0 1
1940: PPUSH
1941: LD_INT 1
1943: PPUSH
1944: CALL_OW 49
// end ;
1948: LD_VAR 0 2
1952: RET
// export function ScoreBoard ( veh ) ; var points ; begin
1953: LD_INT 0
1955: PPUSH
1956: PPUSH
// points := 0 ;
1957: LD_ADDR_VAR 0 3
1961: PUSH
1962: LD_INT 0
1964: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_light_trike , us_light_wheeled ] then
1965: LD_VAR 0 1
1969: PPUSH
1970: CALL_OW 265
1974: PUSH
1975: LD_INT 12
1977: PUSH
1978: LD_INT 1
1980: PUSH
1981: EMPTY
1982: LIST
1983: LIST
1984: IN
1985: IFFALSE 2001
// points := points + 10 ;
1987: LD_ADDR_VAR 0 3
1991: PUSH
1992: LD_VAR 0 3
1996: PUSH
1997: LD_INT 10
1999: PLUS
2000: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_medium_trike , ru_medium_wheeled , us_medium_wheeled ] then
2001: LD_VAR 0 1
2005: PPUSH
2006: CALL_OW 265
2010: PUSH
2011: LD_INT 13
2013: PUSH
2014: LD_INT 21
2016: PUSH
2017: LD_INT 2
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: LIST
2024: IN
2025: IFFALSE 2041
// points := points + 15 ;
2027: LD_ADDR_VAR 0 3
2031: PUSH
2032: LD_VAR 0 3
2036: PUSH
2037: LD_INT 15
2039: PLUS
2040: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_half_tracked , ru_medium_tracked , us_medium_tracked ] then
2041: LD_VAR 0 1
2045: PPUSH
2046: CALL_OW 265
2050: PUSH
2051: LD_INT 14
2053: PUSH
2054: LD_INT 22
2056: PUSH
2057: LD_INT 3
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: LIST
2064: IN
2065: IFFALSE 2081
// points := points + 20 ;
2067: LD_ADDR_VAR 0 3
2071: PUSH
2072: LD_VAR 0 3
2076: PUSH
2077: LD_INT 20
2079: PLUS
2080: ST_TO_ADDR
// if GetChassis ( veh ) in [ ru_heavy_wheeled , ru_heavy_tracked , us_heavy_tracked ] then
2081: LD_VAR 0 1
2085: PPUSH
2086: CALL_OW 265
2090: PUSH
2091: LD_INT 23
2093: PUSH
2094: LD_INT 24
2096: PUSH
2097: LD_INT 4
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: LIST
2104: IN
2105: IFFALSE 2121
// points := points + 25 ;
2107: LD_ADDR_VAR 0 3
2111: PUSH
2112: LD_VAR 0 3
2116: PUSH
2117: LD_INT 25
2119: PLUS
2120: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_hovercraft , us_morphling ] then
2121: LD_VAR 0 1
2125: PPUSH
2126: CALL_OW 265
2130: PUSH
2131: LD_INT 11
2133: PUSH
2134: LD_INT 5
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: IN
2141: IFFALSE 2157
// points := points + 30 ;
2143: LD_ADDR_VAR 0 3
2147: PUSH
2148: LD_VAR 0 3
2152: PUSH
2153: LD_INT 30
2155: PLUS
2156: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_combustion ] then
2157: LD_VAR 0 1
2161: PPUSH
2162: CALL_OW 262
2166: PUSH
2167: LD_INT 1
2169: PUSH
2170: EMPTY
2171: LIST
2172: EQUAL
2173: IFFALSE 2189
// points := points + 5 ;
2175: LD_ADDR_VAR 0 3
2179: PUSH
2180: LD_VAR 0 3
2184: PUSH
2185: LD_INT 5
2187: PLUS
2188: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_solar ] then
2189: LD_VAR 0 1
2193: PPUSH
2194: CALL_OW 262
2198: PUSH
2199: LD_INT 2
2201: PUSH
2202: EMPTY
2203: LIST
2204: EQUAL
2205: IFFALSE 2221
// points := points + 15 ;
2207: LD_ADDR_VAR 0 3
2211: PUSH
2212: LD_VAR 0 3
2216: PUSH
2217: LD_INT 15
2219: PLUS
2220: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_siberite ] then
2221: LD_VAR 0 1
2225: PPUSH
2226: CALL_OW 262
2230: PUSH
2231: LD_INT 3
2233: PUSH
2234: EMPTY
2235: LIST
2236: EQUAL
2237: IFFALSE 2253
// points := points + 25 ;
2239: LD_ADDR_VAR 0 3
2243: PUSH
2244: LD_VAR 0 3
2248: PUSH
2249: LD_INT 25
2251: PLUS
2252: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_multimissile_ballista , ar_double_machine_gun , ar_light_gun , ru_heavy_machine_gun , us_machine_gun , us_light_gun ] then
2253: LD_VAR 0 1
2257: PPUSH
2258: CALL_OW 264
2262: PUSH
2263: LD_INT 22
2265: PUSH
2266: LD_INT 24
2268: PUSH
2269: LD_INT 23
2271: PUSH
2272: LD_INT 42
2274: PUSH
2275: LD_INT 2
2277: PUSH
2278: LD_INT 3
2280: PUSH
2281: EMPTY
2282: LIST
2283: LIST
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: IN
2289: IFFALSE 2305
// points := points + 5 ;
2291: LD_ADDR_VAR 0 3
2295: PUSH
2296: LD_VAR 0 3
2300: PUSH
2301: LD_INT 5
2303: PLUS
2304: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_gatling_gun , ar_gun , ru_gatling_gun , ru_gun , us_gatling_gun , us_double_gun ] then
2305: LD_VAR 0 1
2309: PPUSH
2310: CALL_OW 264
2314: PUSH
2315: LD_INT 25
2317: PUSH
2318: LD_INT 27
2320: PUSH
2321: LD_INT 43
2323: PUSH
2324: LD_INT 44
2326: PUSH
2327: LD_INT 4
2329: PUSH
2330: LD_INT 5
2332: PUSH
2333: EMPTY
2334: LIST
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: LIST
2340: IN
2341: IFFALSE 2357
// points := points + 10 ;
2343: LD_ADDR_VAR 0 3
2347: PUSH
2348: LD_VAR 0 3
2352: PUSH
2353: LD_INT 10
2355: PLUS
2356: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher ] then
2357: LD_VAR 0 1
2361: PPUSH
2362: CALL_OW 264
2366: PUSH
2367: LD_INT 28
2369: PUSH
2370: LD_INT 45
2372: PUSH
2373: LD_INT 7
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: LIST
2380: IN
2381: IFFALSE 2397
// points := points + 20 ;
2383: LD_ADDR_VAR 0 3
2387: PUSH
2388: LD_VAR 0 3
2392: PUSH
2393: LD_INT 20
2395: PLUS
2396: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ru_heavy_gun , us_heavy_gun ] then
2397: LD_VAR 0 1
2401: PPUSH
2402: CALL_OW 264
2406: PUSH
2407: LD_INT 46
2409: PUSH
2410: LD_INT 6
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: IN
2417: IFFALSE 2433
// points := points + 25 ;
2419: LD_ADDR_VAR 0 3
2423: PUSH
2424: LD_VAR 0 3
2428: PUSH
2429: LD_INT 25
2431: PLUS
2432: ST_TO_ADDR
// if GetWeapon ( veh ) in [ us_laser , us_radar , ar_radar ] then
2433: LD_VAR 0 1
2437: PPUSH
2438: CALL_OW 264
2442: PUSH
2443: LD_INT 9
2445: PUSH
2446: LD_INT 11
2448: PUSH
2449: LD_INT 30
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: LIST
2456: IN
2457: IFFALSE 2473
// points := points + 30 ;
2459: LD_ADDR_VAR 0 3
2463: PUSH
2464: LD_VAR 0 3
2468: PUSH
2469: LD_INT 30
2471: PLUS
2472: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_selfpropelled_bomb , ru_time_lapser , ru_rocket , us_double_laser ] then
2473: LD_VAR 0 1
2477: PPUSH
2478: CALL_OW 264
2482: PUSH
2483: LD_INT 29
2485: PUSH
2486: LD_INT 49
2488: PUSH
2489: LD_INT 47
2491: PUSH
2492: LD_INT 10
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: LIST
2499: LIST
2500: IN
2501: IFFALSE 2517
// points := points + 50 ;
2503: LD_ADDR_VAR 0 3
2507: PUSH
2508: LD_VAR 0 3
2512: PUSH
2513: LD_INT 50
2515: PLUS
2516: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ru_siberium_rocket , us_siberium_rocket ] then
2517: LD_VAR 0 1
2521: PPUSH
2522: CALL_OW 264
2526: PUSH
2527: LD_INT 48
2529: PUSH
2530: LD_INT 8
2532: PUSH
2533: EMPTY
2534: LIST
2535: LIST
2536: IN
2537: IFFALSE 2553
// points := points + 100 ;
2539: LD_ADDR_VAR 0 3
2543: PUSH
2544: LD_VAR 0 3
2548: PUSH
2549: LD_INT 100
2551: PLUS
2552: ST_TO_ADDR
// result := points ;
2553: LD_ADDR_VAR 0 2
2557: PUSH
2558: LD_VAR 0 3
2562: ST_TO_ADDR
// end ; end_of_file
2563: LD_VAR 0 2
2567: RET
// every 0 0$01 trigger time do var filter , i , side , driver , un ;
2568: LD_EXP 5
2572: IFFALSE 3217
2574: GO 2576
2576: DISABLE
2577: LD_INT 0
2579: PPUSH
2580: PPUSH
2581: PPUSH
2582: PPUSH
2583: PPUSH
// begin enable ;
2584: ENABLE
// if tick < 36 then
2585: LD_OWVAR 1
2589: PUSH
2590: LD_INT 36
2592: LESS
2593: IFFALSE 2605
// SetAreaMapShow ( exit_area , 1 ) ;
2595: LD_INT 4
2597: PPUSH
2598: LD_INT 1
2600: PPUSH
2601: CALL_OW 424
// time := time - 0 0$01 ;
2605: LD_ADDR_EXP 5
2609: PUSH
2610: LD_EXP 5
2614: PUSH
2615: LD_INT 35
2617: MINUS
2618: ST_TO_ADDR
// if time = 0 0$00 then
2619: LD_EXP 5
2623: PUSH
2624: LD_INT 0
2626: EQUAL
2627: IFFALSE 2690
// if p1 > p2 and p1 > p3 and p1 > p4 and p1 > p5 then
2629: LD_EXP 7
2633: PUSH
2634: LD_EXP 8
2638: GREATER
2639: PUSH
2640: LD_EXP 7
2644: PUSH
2645: LD_EXP 9
2649: GREATER
2650: AND
2651: PUSH
2652: LD_EXP 7
2656: PUSH
2657: LD_EXP 10
2661: GREATER
2662: AND
2663: PUSH
2664: LD_EXP 7
2668: PUSH
2669: LD_EXP 11
2673: GREATER
2674: AND
2675: IFFALSE 2683
// YouWin else
2677: CALL_OW 103
2681: GO 2690
// YouLost (  ) ;
2683: LD_STRING 
2685: PPUSH
2686: CALL_OW 104
// filter := FilterUnitsInArea ( exit_area , [ f_type , unit_vehicle ] ) ;
2690: LD_ADDR_VAR 0 1
2694: PUSH
2695: LD_INT 4
2697: PPUSH
2698: LD_INT 21
2700: PUSH
2701: LD_INT 2
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: PPUSH
2708: CALL_OW 70
2712: ST_TO_ADDR
// if filter then
2713: LD_VAR 0 1
2717: IFFALSE 3007
// for i = 1 to filter do
2719: LD_ADDR_VAR 0 2
2723: PUSH
2724: DOUBLE
2725: LD_INT 1
2727: DEC
2728: ST_TO_ADDR
2729: LD_VAR 0 1
2733: PUSH
2734: FOR_TO
2735: IFFALSE 3005
// begin side := GetSide ( filter [ i ] ) ;
2737: LD_ADDR_VAR 0 3
2741: PUSH
2742: LD_VAR 0 1
2746: PUSH
2747: LD_VAR 0 2
2751: ARRAY
2752: PPUSH
2753: CALL_OW 255
2757: ST_TO_ADDR
// driver := IsDrivenBy ( filter [ i ] ) ;
2758: LD_ADDR_VAR 0 4
2762: PUSH
2763: LD_VAR 0 1
2767: PUSH
2768: LD_VAR 0 2
2772: ARRAY
2773: PPUSH
2774: CALL_OW 311
2778: ST_TO_ADDR
// un := filter [ i ] ;
2779: LD_ADDR_VAR 0 5
2783: PUSH
2784: LD_VAR 0 1
2788: PUSH
2789: LD_VAR 0 2
2793: ARRAY
2794: ST_TO_ADDR
// if IsInUnit ( driver ) then
2795: LD_VAR 0 4
2799: PPUSH
2800: CALL_OW 310
2804: IFFALSE 2815
// ComExitVehicle ( driver ) ;
2806: LD_VAR 0 4
2810: PPUSH
2811: CALL_OW 121
// Wait ( 0 0$0.3 ) ;
2815: LD_INT 10
2817: PPUSH
2818: CALL_OW 67
// RemoveUnit ( filter [ i ] ) ;
2822: LD_VAR 0 1
2826: PUSH
2827: LD_VAR 0 2
2831: ARRAY
2832: PPUSH
2833: CALL_OW 64
// case side of 1 :
2837: LD_VAR 0 3
2841: PUSH
2842: LD_INT 1
2844: DOUBLE
2845: EQUAL
2846: IFTRUE 2850
2848: GO 2874
2850: POP
// p1 := p1 + ScoreBoard ( un ) ; 2 :
2851: LD_ADDR_EXP 7
2855: PUSH
2856: LD_EXP 7
2860: PUSH
2861: LD_VAR 0 5
2865: PPUSH
2866: CALL 1953 0 1
2870: PLUS
2871: ST_TO_ADDR
2872: GO 3003
2874: LD_INT 2
2876: DOUBLE
2877: EQUAL
2878: IFTRUE 2882
2880: GO 2906
2882: POP
// p2 := p2 + ScoreBoard ( un ) ; 3 :
2883: LD_ADDR_EXP 8
2887: PUSH
2888: LD_EXP 8
2892: PUSH
2893: LD_VAR 0 5
2897: PPUSH
2898: CALL 1953 0 1
2902: PLUS
2903: ST_TO_ADDR
2904: GO 3003
2906: LD_INT 3
2908: DOUBLE
2909: EQUAL
2910: IFTRUE 2914
2912: GO 2938
2914: POP
// p3 := p3 + ScoreBoard ( un ) ; 4 :
2915: LD_ADDR_EXP 9
2919: PUSH
2920: LD_EXP 9
2924: PUSH
2925: LD_VAR 0 5
2929: PPUSH
2930: CALL 1953 0 1
2934: PLUS
2935: ST_TO_ADDR
2936: GO 3003
2938: LD_INT 4
2940: DOUBLE
2941: EQUAL
2942: IFTRUE 2946
2944: GO 2970
2946: POP
// p4 := p4 + ScoreBoard ( un ) ; 5 :
2947: LD_ADDR_EXP 10
2951: PUSH
2952: LD_EXP 10
2956: PUSH
2957: LD_VAR 0 5
2961: PPUSH
2962: CALL 1953 0 1
2966: PLUS
2967: ST_TO_ADDR
2968: GO 3003
2970: LD_INT 5
2972: DOUBLE
2973: EQUAL
2974: IFTRUE 2978
2976: GO 3002
2978: POP
// p5 := p5 + ScoreBoard ( un ) ; end ;
2979: LD_ADDR_EXP 11
2983: PUSH
2984: LD_EXP 11
2988: PUSH
2989: LD_VAR 0 5
2993: PPUSH
2994: CALL 1953 0 1
2998: PLUS
2999: ST_TO_ADDR
3000: GO 3003
3002: POP
// end ;
3003: GO 2734
3005: POP
3006: POP
// case players of 3 :
3007: LD_EXP 3
3011: PUSH
3012: LD_INT 3
3014: DOUBLE
3015: EQUAL
3016: IFTRUE 3020
3018: GO 3070
3020: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 ] ;
3021: LD_ADDR_OWVAR 47
3025: PUSH
3026: LD_STRING #tick
3028: PUSH
3029: LD_EXP 5
3033: PUSH
3034: LD_STRING #player1
3036: PUSH
3037: LD_EXP 7
3041: PUSH
3042: LD_STRING #player2
3044: PUSH
3045: LD_EXP 8
3049: PUSH
3050: LD_STRING #player3
3052: PUSH
3053: LD_EXP 9
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: LIST
3064: LIST
3065: LIST
3066: LIST
3067: ST_TO_ADDR
// end ; 4 :
3068: GO 3217
3070: LD_INT 4
3072: DOUBLE
3073: EQUAL
3074: IFTRUE 3078
3076: GO 3138
3078: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 , #player4 , p4 ] ;
3079: LD_ADDR_OWVAR 47
3083: PUSH
3084: LD_STRING #tick
3086: PUSH
3087: LD_EXP 5
3091: PUSH
3092: LD_STRING #player1
3094: PUSH
3095: LD_EXP 7
3099: PUSH
3100: LD_STRING #player2
3102: PUSH
3103: LD_EXP 8
3107: PUSH
3108: LD_STRING #player3
3110: PUSH
3111: LD_EXP 9
3115: PUSH
3116: LD_STRING #player4
3118: PUSH
3119: LD_EXP 10
3123: PUSH
3124: EMPTY
3125: LIST
3126: LIST
3127: LIST
3128: LIST
3129: LIST
3130: LIST
3131: LIST
3132: LIST
3133: LIST
3134: LIST
3135: ST_TO_ADDR
// end ; 5 :
3136: GO 3217
3138: LD_INT 5
3140: DOUBLE
3141: EQUAL
3142: IFTRUE 3146
3144: GO 3216
3146: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 , #player4 , p4 , #player5 , p5 ] ;
3147: LD_ADDR_OWVAR 47
3151: PUSH
3152: LD_STRING #tick
3154: PUSH
3155: LD_EXP 5
3159: PUSH
3160: LD_STRING #player1
3162: PUSH
3163: LD_EXP 7
3167: PUSH
3168: LD_STRING #player2
3170: PUSH
3171: LD_EXP 8
3175: PUSH
3176: LD_STRING #player3
3178: PUSH
3179: LD_EXP 9
3183: PUSH
3184: LD_STRING #player4
3186: PUSH
3187: LD_EXP 10
3191: PUSH
3192: LD_STRING #player5
3194: PUSH
3195: LD_EXP 11
3199: PUSH
3200: EMPTY
3201: LIST
3202: LIST
3203: LIST
3204: LIST
3205: LIST
3206: LIST
3207: LIST
3208: LIST
3209: LIST
3210: LIST
3211: LIST
3212: LIST
3213: ST_TO_ADDR
// end ; end ;
3214: GO 3217
3216: POP
// end ;
3217: PPOPN 5
3219: END
// every 0 0$05 trigger time do var chance , p ;
3220: LD_EXP 5
3224: IFFALSE 3371
3226: GO 3228
3228: DISABLE
3229: LD_INT 0
3231: PPUSH
3232: PPUSH
// begin enable ;
3233: ENABLE
// Wait ( Rand ( 0 0$01 , 0 0$06 ) ) ;
3234: LD_INT 35
3236: PPUSH
3237: LD_INT 210
3239: PPUSH
3240: CALL_OW 12
3244: PPUSH
3245: CALL_OW 67
// if FilterAllUnits ( [ f_type , unit_vehicle ] ) < veh_amount then
3249: LD_INT 21
3251: PUSH
3252: LD_INT 2
3254: PUSH
3255: EMPTY
3256: LIST
3257: LIST
3258: PPUSH
3259: CALL_OW 69
3263: PUSH
3264: LD_EXP 6
3268: LESS
3269: IFFALSE 3371
// begin SpawnCar ( false , veh_spawn ) ;
3271: LD_INT 0
3273: PPUSH
3274: LD_INT 5
3276: PPUSH
3277: CALL 946 0 2
// if sib_bomb and FilterAllUnits ( [ f_or , [ [ f_weapon , us_siberium_rocket ] , [ f_weapon , ru_siberium_rocket ] ] ] ) = 0 then
3281: LD_EXP 4
3285: PUSH
3286: LD_INT 2
3288: PUSH
3289: LD_INT 34
3291: PUSH
3292: LD_INT 8
3294: PUSH
3295: EMPTY
3296: LIST
3297: LIST
3298: PUSH
3299: LD_INT 34
3301: PUSH
3302: LD_INT 48
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: PUSH
3309: EMPTY
3310: LIST
3311: LIST
3312: PUSH
3313: EMPTY
3314: LIST
3315: LIST
3316: PPUSH
3317: CALL_OW 69
3321: PUSH
3322: LD_INT 0
3324: EQUAL
3325: AND
3326: IFFALSE 3371
// begin chance := 23 ;
3328: LD_ADDR_VAR 0 1
3332: PUSH
3333: LD_INT 23
3335: ST_TO_ADDR
// p := Rand ( 0 , 100 ) ;
3336: LD_ADDR_VAR 0 2
3340: PUSH
3341: LD_INT 0
3343: PPUSH
3344: LD_INT 100
3346: PPUSH
3347: CALL_OW 12
3351: ST_TO_ADDR
// if p < chance then
3352: LD_VAR 0 2
3356: PUSH
3357: LD_VAR 0 1
3361: LESS
3362: IFFALSE 3371
// SpawnSibRocket ( veh_spawn ) ;
3364: LD_INT 5
3366: PPUSH
3367: CALL 1784 0 1
// end ; end ; end ; end_of_file
3371: PPOPN 2
3373: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
3374: LD_INT 0
3376: PPUSH
3377: PPUSH
3378: PPUSH
3379: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
3380: LD_VAR 0 1
3384: PPUSH
3385: CALL_OW 264
3389: PUSH
3390: LD_EXP 86
3394: EQUAL
3395: IFFALSE 3467
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
3397: LD_INT 68
3399: PPUSH
3400: LD_VAR 0 1
3404: PPUSH
3405: CALL_OW 255
3409: PPUSH
3410: CALL_OW 321
3414: PUSH
3415: LD_INT 2
3417: EQUAL
3418: IFFALSE 3430
// eff := 70 else
3420: LD_ADDR_VAR 0 4
3424: PUSH
3425: LD_INT 70
3427: ST_TO_ADDR
3428: GO 3438
// eff := 30 ;
3430: LD_ADDR_VAR 0 4
3434: PUSH
3435: LD_INT 30
3437: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
3438: LD_VAR 0 1
3442: PPUSH
3443: CALL_OW 250
3447: PPUSH
3448: LD_VAR 0 1
3452: PPUSH
3453: CALL_OW 251
3457: PPUSH
3458: LD_VAR 0 4
3462: PPUSH
3463: CALL_OW 495
// end ; end ;
3467: LD_VAR 0 2
3471: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
3472: LD_INT 0
3474: PPUSH
// end ;
3475: LD_VAR 0 4
3479: RET
// export function SOS_Command ( cmd ) ; begin
3480: LD_INT 0
3482: PPUSH
// end ;
3483: LD_VAR 0 2
3487: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
3488: LD_INT 0
3490: PPUSH
// end ;
3491: LD_VAR 0 6
3495: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
3496: LD_INT 0
3498: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
3499: LD_VAR 0 1
3503: PUSH
3504: LD_INT 250
3506: EQUAL
3507: PUSH
3508: LD_VAR 0 2
3512: PPUSH
3513: CALL_OW 264
3517: PUSH
3518: LD_EXP 89
3522: EQUAL
3523: AND
3524: IFFALSE 3545
// MinerPlaceMine ( unit , x , y ) ;
3526: LD_VAR 0 2
3530: PPUSH
3531: LD_VAR 0 4
3535: PPUSH
3536: LD_VAR 0 5
3540: PPUSH
3541: CALL 5894 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
3545: LD_VAR 0 1
3549: PUSH
3550: LD_INT 251
3552: EQUAL
3553: PUSH
3554: LD_VAR 0 2
3558: PPUSH
3559: CALL_OW 264
3563: PUSH
3564: LD_EXP 89
3568: EQUAL
3569: AND
3570: IFFALSE 3591
// MinerDetonateMine ( unit , x , y ) ;
3572: LD_VAR 0 2
3576: PPUSH
3577: LD_VAR 0 4
3581: PPUSH
3582: LD_VAR 0 5
3586: PPUSH
3587: CALL 6171 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
3591: LD_VAR 0 1
3595: PUSH
3596: LD_INT 252
3598: EQUAL
3599: PUSH
3600: LD_VAR 0 2
3604: PPUSH
3605: CALL_OW 264
3609: PUSH
3610: LD_EXP 89
3614: EQUAL
3615: AND
3616: IFFALSE 3637
// MinerCreateMinefield ( unit , x , y ) ;
3618: LD_VAR 0 2
3622: PPUSH
3623: LD_VAR 0 4
3627: PPUSH
3628: LD_VAR 0 5
3632: PPUSH
3633: CALL 6588 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
3637: LD_VAR 0 1
3641: PUSH
3642: LD_INT 253
3644: EQUAL
3645: PUSH
3646: LD_VAR 0 2
3650: PPUSH
3651: CALL_OW 257
3655: PUSH
3656: LD_INT 5
3658: EQUAL
3659: AND
3660: IFFALSE 3681
// ComBinocular ( unit , x , y ) ;
3662: LD_VAR 0 2
3666: PPUSH
3667: LD_VAR 0 4
3671: PPUSH
3672: LD_VAR 0 5
3676: PPUSH
3677: CALL 6959 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
3681: LD_VAR 0 1
3685: PUSH
3686: LD_INT 254
3688: EQUAL
3689: PUSH
3690: LD_VAR 0 2
3694: PPUSH
3695: CALL_OW 264
3699: PUSH
3700: LD_EXP 84
3704: EQUAL
3705: AND
3706: PUSH
3707: LD_VAR 0 3
3711: PPUSH
3712: CALL_OW 263
3716: PUSH
3717: LD_INT 3
3719: EQUAL
3720: AND
3721: IFFALSE 3737
// HackDestroyVehicle ( unit , selectedUnit ) ;
3723: LD_VAR 0 2
3727: PPUSH
3728: LD_VAR 0 3
3732: PPUSH
3733: CALL 5254 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
3737: LD_VAR 0 1
3741: PUSH
3742: LD_INT 255
3744: EQUAL
3745: PUSH
3746: LD_VAR 0 2
3750: PPUSH
3751: CALL_OW 264
3755: PUSH
3756: LD_INT 14
3758: PUSH
3759: LD_INT 53
3761: PUSH
3762: EMPTY
3763: LIST
3764: LIST
3765: IN
3766: AND
3767: PUSH
3768: LD_VAR 0 4
3772: PPUSH
3773: LD_VAR 0 5
3777: PPUSH
3778: CALL_OW 488
3782: AND
3783: IFFALSE 3807
// CutTreeXYR ( unit , x , y , 12 ) ;
3785: LD_VAR 0 2
3789: PPUSH
3790: LD_VAR 0 4
3794: PPUSH
3795: LD_VAR 0 5
3799: PPUSH
3800: LD_INT 12
3802: PPUSH
3803: CALL 3820 0 4
// end ;
3807: LD_VAR 0 6
3811: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
3812: LD_INT 0
3814: PPUSH
// end ;
3815: LD_VAR 0 4
3819: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
3820: LD_INT 0
3822: PPUSH
3823: PPUSH
3824: PPUSH
3825: PPUSH
3826: PPUSH
3827: PPUSH
3828: PPUSH
3829: PPUSH
3830: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
3831: LD_VAR 0 1
3835: NOT
3836: PUSH
3837: LD_VAR 0 2
3841: PPUSH
3842: LD_VAR 0 3
3846: PPUSH
3847: CALL_OW 488
3851: NOT
3852: OR
3853: PUSH
3854: LD_VAR 0 4
3858: NOT
3859: OR
3860: IFFALSE 3864
// exit ;
3862: GO 4204
// list := [ ] ;
3864: LD_ADDR_VAR 0 13
3868: PUSH
3869: EMPTY
3870: ST_TO_ADDR
// if x - r < 0 then
3871: LD_VAR 0 2
3875: PUSH
3876: LD_VAR 0 4
3880: MINUS
3881: PUSH
3882: LD_INT 0
3884: LESS
3885: IFFALSE 3897
// min_x := 0 else
3887: LD_ADDR_VAR 0 7
3891: PUSH
3892: LD_INT 0
3894: ST_TO_ADDR
3895: GO 3913
// min_x := x - r ;
3897: LD_ADDR_VAR 0 7
3901: PUSH
3902: LD_VAR 0 2
3906: PUSH
3907: LD_VAR 0 4
3911: MINUS
3912: ST_TO_ADDR
// if y - r < 0 then
3913: LD_VAR 0 3
3917: PUSH
3918: LD_VAR 0 4
3922: MINUS
3923: PUSH
3924: LD_INT 0
3926: LESS
3927: IFFALSE 3939
// min_y := 0 else
3929: LD_ADDR_VAR 0 8
3933: PUSH
3934: LD_INT 0
3936: ST_TO_ADDR
3937: GO 3955
// min_y := y - r ;
3939: LD_ADDR_VAR 0 8
3943: PUSH
3944: LD_VAR 0 3
3948: PUSH
3949: LD_VAR 0 4
3953: MINUS
3954: ST_TO_ADDR
// max_x := x + r ;
3955: LD_ADDR_VAR 0 9
3959: PUSH
3960: LD_VAR 0 2
3964: PUSH
3965: LD_VAR 0 4
3969: PLUS
3970: ST_TO_ADDR
// max_y := y + r ;
3971: LD_ADDR_VAR 0 10
3975: PUSH
3976: LD_VAR 0 3
3980: PUSH
3981: LD_VAR 0 4
3985: PLUS
3986: ST_TO_ADDR
// for _x = min_x to max_x do
3987: LD_ADDR_VAR 0 11
3991: PUSH
3992: DOUBLE
3993: LD_VAR 0 7
3997: DEC
3998: ST_TO_ADDR
3999: LD_VAR 0 9
4003: PUSH
4004: FOR_TO
4005: IFFALSE 4122
// for _y = min_y to max_y do
4007: LD_ADDR_VAR 0 12
4011: PUSH
4012: DOUBLE
4013: LD_VAR 0 8
4017: DEC
4018: ST_TO_ADDR
4019: LD_VAR 0 10
4023: PUSH
4024: FOR_TO
4025: IFFALSE 4118
// begin if not ValidHex ( _x , _y ) then
4027: LD_VAR 0 11
4031: PPUSH
4032: LD_VAR 0 12
4036: PPUSH
4037: CALL_OW 488
4041: NOT
4042: IFFALSE 4046
// continue ;
4044: GO 4024
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
4046: LD_VAR 0 11
4050: PPUSH
4051: LD_VAR 0 12
4055: PPUSH
4056: CALL_OW 351
4060: PUSH
4061: LD_VAR 0 11
4065: PPUSH
4066: LD_VAR 0 12
4070: PPUSH
4071: CALL_OW 554
4075: AND
4076: IFFALSE 4116
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
4078: LD_ADDR_VAR 0 13
4082: PUSH
4083: LD_VAR 0 13
4087: PPUSH
4088: LD_VAR 0 13
4092: PUSH
4093: LD_INT 1
4095: PLUS
4096: PPUSH
4097: LD_VAR 0 11
4101: PUSH
4102: LD_VAR 0 12
4106: PUSH
4107: EMPTY
4108: LIST
4109: LIST
4110: PPUSH
4111: CALL_OW 2
4115: ST_TO_ADDR
// end ;
4116: GO 4024
4118: POP
4119: POP
4120: GO 4004
4122: POP
4123: POP
// if not list then
4124: LD_VAR 0 13
4128: NOT
4129: IFFALSE 4133
// exit ;
4131: GO 4204
// for i in list do
4133: LD_ADDR_VAR 0 6
4137: PUSH
4138: LD_VAR 0 13
4142: PUSH
4143: FOR_IN
4144: IFFALSE 4202
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
4146: LD_VAR 0 1
4150: PPUSH
4151: LD_STRING M
4153: PUSH
4154: LD_VAR 0 6
4158: PUSH
4159: LD_INT 1
4161: ARRAY
4162: PUSH
4163: LD_VAR 0 6
4167: PUSH
4168: LD_INT 2
4170: ARRAY
4171: PUSH
4172: LD_INT 0
4174: PUSH
4175: LD_INT 0
4177: PUSH
4178: LD_INT 0
4180: PUSH
4181: LD_INT 0
4183: PUSH
4184: EMPTY
4185: LIST
4186: LIST
4187: LIST
4188: LIST
4189: LIST
4190: LIST
4191: LIST
4192: PUSH
4193: EMPTY
4194: LIST
4195: PPUSH
4196: CALL_OW 447
4200: GO 4143
4202: POP
4203: POP
// end ;
4204: LD_VAR 0 5
4208: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
4209: LD_EXP 14
4213: NOT
4214: IFFALSE 4264
4216: GO 4218
4218: DISABLE
// begin initHack := true ;
4219: LD_ADDR_EXP 14
4223: PUSH
4224: LD_INT 1
4226: ST_TO_ADDR
// hackTanks := [ ] ;
4227: LD_ADDR_EXP 15
4231: PUSH
4232: EMPTY
4233: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
4234: LD_ADDR_EXP 16
4238: PUSH
4239: EMPTY
4240: ST_TO_ADDR
// hackLimit := 3 ;
4241: LD_ADDR_EXP 17
4245: PUSH
4246: LD_INT 3
4248: ST_TO_ADDR
// hackDist := 12 ;
4249: LD_ADDR_EXP 18
4253: PUSH
4254: LD_INT 12
4256: ST_TO_ADDR
// hackCounter := [ ] ;
4257: LD_ADDR_EXP 19
4261: PUSH
4262: EMPTY
4263: ST_TO_ADDR
// end ;
4264: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
4265: LD_EXP 14
4269: PUSH
4270: LD_INT 34
4272: PUSH
4273: LD_EXP 84
4277: PUSH
4278: EMPTY
4279: LIST
4280: LIST
4281: PPUSH
4282: CALL_OW 69
4286: AND
4287: IFFALSE 4542
4289: GO 4291
4291: DISABLE
4292: LD_INT 0
4294: PPUSH
4295: PPUSH
// begin enable ;
4296: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
4297: LD_ADDR_VAR 0 1
4301: PUSH
4302: LD_INT 34
4304: PUSH
4305: LD_EXP 84
4309: PUSH
4310: EMPTY
4311: LIST
4312: LIST
4313: PPUSH
4314: CALL_OW 69
4318: PUSH
4319: FOR_IN
4320: IFFALSE 4540
// begin if not i in hackTanks then
4322: LD_VAR 0 1
4326: PUSH
4327: LD_EXP 15
4331: IN
4332: NOT
4333: IFFALSE 4416
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
4335: LD_ADDR_EXP 15
4339: PUSH
4340: LD_EXP 15
4344: PPUSH
4345: LD_EXP 15
4349: PUSH
4350: LD_INT 1
4352: PLUS
4353: PPUSH
4354: LD_VAR 0 1
4358: PPUSH
4359: CALL_OW 1
4363: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
4364: LD_ADDR_EXP 16
4368: PUSH
4369: LD_EXP 16
4373: PPUSH
4374: LD_EXP 16
4378: PUSH
4379: LD_INT 1
4381: PLUS
4382: PPUSH
4383: EMPTY
4384: PPUSH
4385: CALL_OW 1
4389: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
4390: LD_ADDR_EXP 19
4394: PUSH
4395: LD_EXP 19
4399: PPUSH
4400: LD_EXP 19
4404: PUSH
4405: LD_INT 1
4407: PLUS
4408: PPUSH
4409: EMPTY
4410: PPUSH
4411: CALL_OW 1
4415: ST_TO_ADDR
// end ; if not IsOk ( i ) then
4416: LD_VAR 0 1
4420: PPUSH
4421: CALL_OW 302
4425: NOT
4426: IFFALSE 4439
// begin HackUnlinkAll ( i ) ;
4428: LD_VAR 0 1
4432: PPUSH
4433: CALL 4545 0 1
// continue ;
4437: GO 4319
// end ; HackCheckCapturedStatus ( i ) ;
4439: LD_VAR 0 1
4443: PPUSH
4444: CALL 4988 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
4448: LD_ADDR_VAR 0 2
4452: PUSH
4453: LD_INT 81
4455: PUSH
4456: LD_VAR 0 1
4460: PPUSH
4461: CALL_OW 255
4465: PUSH
4466: EMPTY
4467: LIST
4468: LIST
4469: PUSH
4470: LD_INT 33
4472: PUSH
4473: LD_INT 3
4475: PUSH
4476: EMPTY
4477: LIST
4478: LIST
4479: PUSH
4480: LD_INT 91
4482: PUSH
4483: LD_VAR 0 1
4487: PUSH
4488: LD_EXP 18
4492: PUSH
4493: EMPTY
4494: LIST
4495: LIST
4496: LIST
4497: PUSH
4498: LD_INT 50
4500: PUSH
4501: EMPTY
4502: LIST
4503: PUSH
4504: EMPTY
4505: LIST
4506: LIST
4507: LIST
4508: LIST
4509: PPUSH
4510: CALL_OW 69
4514: ST_TO_ADDR
// if not tmp then
4515: LD_VAR 0 2
4519: NOT
4520: IFFALSE 4524
// continue ;
4522: GO 4319
// HackLink ( i , tmp ) ;
4524: LD_VAR 0 1
4528: PPUSH
4529: LD_VAR 0 2
4533: PPUSH
4534: CALL 4681 0 2
// end ;
4538: GO 4319
4540: POP
4541: POP
// end ;
4542: PPOPN 2
4544: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
4545: LD_INT 0
4547: PPUSH
4548: PPUSH
4549: PPUSH
// if not hack in hackTanks then
4550: LD_VAR 0 1
4554: PUSH
4555: LD_EXP 15
4559: IN
4560: NOT
4561: IFFALSE 4565
// exit ;
4563: GO 4676
// index := GetElementIndex ( hackTanks , hack ) ;
4565: LD_ADDR_VAR 0 4
4569: PUSH
4570: LD_EXP 15
4574: PPUSH
4575: LD_VAR 0 1
4579: PPUSH
4580: CALL 26103 0 2
4584: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
4585: LD_EXP 16
4589: PUSH
4590: LD_VAR 0 4
4594: ARRAY
4595: IFFALSE 4676
// begin for i in hackTanksCaptured [ index ] do
4597: LD_ADDR_VAR 0 3
4601: PUSH
4602: LD_EXP 16
4606: PUSH
4607: LD_VAR 0 4
4611: ARRAY
4612: PUSH
4613: FOR_IN
4614: IFFALSE 4640
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
4616: LD_VAR 0 3
4620: PUSH
4621: LD_INT 1
4623: ARRAY
4624: PPUSH
4625: LD_VAR 0 3
4629: PUSH
4630: LD_INT 2
4632: ARRAY
4633: PPUSH
4634: CALL_OW 235
4638: GO 4613
4640: POP
4641: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
4642: LD_ADDR_EXP 16
4646: PUSH
4647: LD_EXP 16
4651: PPUSH
4652: LD_VAR 0 4
4656: PPUSH
4657: EMPTY
4658: PPUSH
4659: CALL_OW 1
4663: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
4664: LD_VAR 0 1
4668: PPUSH
4669: LD_INT 0
4671: PPUSH
4672: CALL_OW 505
// end ; end ;
4676: LD_VAR 0 2
4680: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
4681: LD_INT 0
4683: PPUSH
4684: PPUSH
4685: PPUSH
// if not hack in hackTanks or not vehicles then
4686: LD_VAR 0 1
4690: PUSH
4691: LD_EXP 15
4695: IN
4696: NOT
4697: PUSH
4698: LD_VAR 0 2
4702: NOT
4703: OR
4704: IFFALSE 4708
// exit ;
4706: GO 4983
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
4708: LD_ADDR_VAR 0 2
4712: PUSH
4713: LD_VAR 0 1
4717: PPUSH
4718: LD_VAR 0 2
4722: PPUSH
4723: LD_INT 1
4725: PPUSH
4726: LD_INT 1
4728: PPUSH
4729: CALL 26753 0 4
4733: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
4734: LD_ADDR_VAR 0 5
4738: PUSH
4739: LD_EXP 15
4743: PPUSH
4744: LD_VAR 0 1
4748: PPUSH
4749: CALL 26103 0 2
4753: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
4754: LD_EXP 16
4758: PUSH
4759: LD_VAR 0 5
4763: ARRAY
4764: PUSH
4765: LD_EXP 17
4769: LESS
4770: IFFALSE 4959
// begin for i := 1 to vehicles do
4772: LD_ADDR_VAR 0 4
4776: PUSH
4777: DOUBLE
4778: LD_INT 1
4780: DEC
4781: ST_TO_ADDR
4782: LD_VAR 0 2
4786: PUSH
4787: FOR_TO
4788: IFFALSE 4957
// begin if hackTanksCaptured [ index ] = hackLimit then
4790: LD_EXP 16
4794: PUSH
4795: LD_VAR 0 5
4799: ARRAY
4800: PUSH
4801: LD_EXP 17
4805: EQUAL
4806: IFFALSE 4810
// break ;
4808: GO 4957
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
4810: LD_ADDR_EXP 19
4814: PUSH
4815: LD_EXP 19
4819: PPUSH
4820: LD_VAR 0 5
4824: PPUSH
4825: LD_EXP 19
4829: PUSH
4830: LD_VAR 0 5
4834: ARRAY
4835: PUSH
4836: LD_INT 1
4838: PLUS
4839: PPUSH
4840: CALL_OW 1
4844: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
4845: LD_ADDR_EXP 16
4849: PUSH
4850: LD_EXP 16
4854: PPUSH
4855: LD_VAR 0 5
4859: PUSH
4860: LD_EXP 16
4864: PUSH
4865: LD_VAR 0 5
4869: ARRAY
4870: PUSH
4871: LD_INT 1
4873: PLUS
4874: PUSH
4875: EMPTY
4876: LIST
4877: LIST
4878: PPUSH
4879: LD_VAR 0 2
4883: PUSH
4884: LD_VAR 0 4
4888: ARRAY
4889: PUSH
4890: LD_VAR 0 2
4894: PUSH
4895: LD_VAR 0 4
4899: ARRAY
4900: PPUSH
4901: CALL_OW 255
4905: PUSH
4906: EMPTY
4907: LIST
4908: LIST
4909: PPUSH
4910: CALL 26318 0 3
4914: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
4915: LD_VAR 0 2
4919: PUSH
4920: LD_VAR 0 4
4924: ARRAY
4925: PPUSH
4926: LD_VAR 0 1
4930: PPUSH
4931: CALL_OW 255
4935: PPUSH
4936: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
4940: LD_VAR 0 2
4944: PUSH
4945: LD_VAR 0 4
4949: ARRAY
4950: PPUSH
4951: CALL_OW 141
// end ;
4955: GO 4787
4957: POP
4958: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
4959: LD_VAR 0 1
4963: PPUSH
4964: LD_EXP 16
4968: PUSH
4969: LD_VAR 0 5
4973: ARRAY
4974: PUSH
4975: LD_INT 0
4977: PLUS
4978: PPUSH
4979: CALL_OW 505
// end ;
4983: LD_VAR 0 3
4987: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
4988: LD_INT 0
4990: PPUSH
4991: PPUSH
4992: PPUSH
4993: PPUSH
// if not hack in hackTanks then
4994: LD_VAR 0 1
4998: PUSH
4999: LD_EXP 15
5003: IN
5004: NOT
5005: IFFALSE 5009
// exit ;
5007: GO 5249
// index := GetElementIndex ( hackTanks , hack ) ;
5009: LD_ADDR_VAR 0 4
5013: PUSH
5014: LD_EXP 15
5018: PPUSH
5019: LD_VAR 0 1
5023: PPUSH
5024: CALL 26103 0 2
5028: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
5029: LD_ADDR_VAR 0 3
5033: PUSH
5034: DOUBLE
5035: LD_EXP 16
5039: PUSH
5040: LD_VAR 0 4
5044: ARRAY
5045: INC
5046: ST_TO_ADDR
5047: LD_INT 1
5049: PUSH
5050: FOR_DOWNTO
5051: IFFALSE 5223
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
5053: LD_ADDR_VAR 0 5
5057: PUSH
5058: LD_EXP 16
5062: PUSH
5063: LD_VAR 0 4
5067: ARRAY
5068: PUSH
5069: LD_VAR 0 3
5073: ARRAY
5074: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
5075: LD_VAR 0 5
5079: PUSH
5080: LD_INT 1
5082: ARRAY
5083: PPUSH
5084: CALL_OW 302
5088: NOT
5089: PUSH
5090: LD_VAR 0 5
5094: PUSH
5095: LD_INT 1
5097: ARRAY
5098: PPUSH
5099: CALL_OW 255
5103: PUSH
5104: LD_VAR 0 1
5108: PPUSH
5109: CALL_OW 255
5113: NONEQUAL
5114: OR
5115: IFFALSE 5221
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
5117: LD_VAR 0 5
5121: PUSH
5122: LD_INT 1
5124: ARRAY
5125: PPUSH
5126: CALL_OW 305
5130: PUSH
5131: LD_VAR 0 5
5135: PUSH
5136: LD_INT 1
5138: ARRAY
5139: PPUSH
5140: CALL_OW 255
5144: PUSH
5145: LD_VAR 0 1
5149: PPUSH
5150: CALL_OW 255
5154: EQUAL
5155: AND
5156: IFFALSE 5180
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
5158: LD_VAR 0 5
5162: PUSH
5163: LD_INT 1
5165: ARRAY
5166: PPUSH
5167: LD_VAR 0 5
5171: PUSH
5172: LD_INT 2
5174: ARRAY
5175: PPUSH
5176: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
5180: LD_ADDR_EXP 16
5184: PUSH
5185: LD_EXP 16
5189: PPUSH
5190: LD_VAR 0 4
5194: PPUSH
5195: LD_EXP 16
5199: PUSH
5200: LD_VAR 0 4
5204: ARRAY
5205: PPUSH
5206: LD_VAR 0 3
5210: PPUSH
5211: CALL_OW 3
5215: PPUSH
5216: CALL_OW 1
5220: ST_TO_ADDR
// end ; end ;
5221: GO 5050
5223: POP
5224: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
5225: LD_VAR 0 1
5229: PPUSH
5230: LD_EXP 16
5234: PUSH
5235: LD_VAR 0 4
5239: ARRAY
5240: PUSH
5241: LD_INT 0
5243: PLUS
5244: PPUSH
5245: CALL_OW 505
// end ;
5249: LD_VAR 0 2
5253: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
5254: LD_INT 0
5256: PPUSH
5257: PPUSH
5258: PPUSH
5259: PPUSH
// if not hack in hackTanks then
5260: LD_VAR 0 1
5264: PUSH
5265: LD_EXP 15
5269: IN
5270: NOT
5271: IFFALSE 5275
// exit ;
5273: GO 5360
// index := GetElementIndex ( hackTanks , hack ) ;
5275: LD_ADDR_VAR 0 5
5279: PUSH
5280: LD_EXP 15
5284: PPUSH
5285: LD_VAR 0 1
5289: PPUSH
5290: CALL 26103 0 2
5294: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
5295: LD_ADDR_VAR 0 4
5299: PUSH
5300: DOUBLE
5301: LD_INT 1
5303: DEC
5304: ST_TO_ADDR
5305: LD_EXP 16
5309: PUSH
5310: LD_VAR 0 5
5314: ARRAY
5315: PUSH
5316: FOR_TO
5317: IFFALSE 5358
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
5319: LD_EXP 16
5323: PUSH
5324: LD_VAR 0 5
5328: ARRAY
5329: PUSH
5330: LD_VAR 0 4
5334: ARRAY
5335: PUSH
5336: LD_INT 1
5338: ARRAY
5339: PUSH
5340: LD_VAR 0 2
5344: EQUAL
5345: IFFALSE 5356
// KillUnit ( vehicle ) ;
5347: LD_VAR 0 2
5351: PPUSH
5352: CALL_OW 66
5356: GO 5316
5358: POP
5359: POP
// end ;
5360: LD_VAR 0 3
5364: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
5365: LD_EXP 20
5369: NOT
5370: IFFALSE 5405
5372: GO 5374
5374: DISABLE
// begin initMiner := true ;
5375: LD_ADDR_EXP 20
5379: PUSH
5380: LD_INT 1
5382: ST_TO_ADDR
// minersList := [ ] ;
5383: LD_ADDR_EXP 21
5387: PUSH
5388: EMPTY
5389: ST_TO_ADDR
// minerMinesList := [ ] ;
5390: LD_ADDR_EXP 22
5394: PUSH
5395: EMPTY
5396: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
5397: LD_ADDR_EXP 23
5401: PUSH
5402: LD_INT 5
5404: ST_TO_ADDR
// end ;
5405: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
5406: LD_EXP 20
5410: PUSH
5411: LD_INT 34
5413: PUSH
5414: LD_EXP 89
5418: PUSH
5419: EMPTY
5420: LIST
5421: LIST
5422: PPUSH
5423: CALL_OW 69
5427: AND
5428: IFFALSE 5891
5430: GO 5432
5432: DISABLE
5433: LD_INT 0
5435: PPUSH
5436: PPUSH
5437: PPUSH
5438: PPUSH
// begin enable ;
5439: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
5440: LD_ADDR_VAR 0 1
5444: PUSH
5445: LD_INT 34
5447: PUSH
5448: LD_EXP 89
5452: PUSH
5453: EMPTY
5454: LIST
5455: LIST
5456: PPUSH
5457: CALL_OW 69
5461: PUSH
5462: FOR_IN
5463: IFFALSE 5535
// begin if not i in minersList then
5465: LD_VAR 0 1
5469: PUSH
5470: LD_EXP 21
5474: IN
5475: NOT
5476: IFFALSE 5533
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
5478: LD_ADDR_EXP 21
5482: PUSH
5483: LD_EXP 21
5487: PPUSH
5488: LD_EXP 21
5492: PUSH
5493: LD_INT 1
5495: PLUS
5496: PPUSH
5497: LD_VAR 0 1
5501: PPUSH
5502: CALL_OW 1
5506: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
5507: LD_ADDR_EXP 22
5511: PUSH
5512: LD_EXP 22
5516: PPUSH
5517: LD_EXP 22
5521: PUSH
5522: LD_INT 1
5524: PLUS
5525: PPUSH
5526: EMPTY
5527: PPUSH
5528: CALL_OW 1
5532: ST_TO_ADDR
// end end ;
5533: GO 5462
5535: POP
5536: POP
// for i := minerMinesList downto 1 do
5537: LD_ADDR_VAR 0 1
5541: PUSH
5542: DOUBLE
5543: LD_EXP 22
5547: INC
5548: ST_TO_ADDR
5549: LD_INT 1
5551: PUSH
5552: FOR_DOWNTO
5553: IFFALSE 5889
// begin if IsLive ( minersList [ i ] ) then
5555: LD_EXP 21
5559: PUSH
5560: LD_VAR 0 1
5564: ARRAY
5565: PPUSH
5566: CALL_OW 300
5570: IFFALSE 5598
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
5572: LD_EXP 21
5576: PUSH
5577: LD_VAR 0 1
5581: ARRAY
5582: PPUSH
5583: LD_EXP 22
5587: PUSH
5588: LD_VAR 0 1
5592: ARRAY
5593: PPUSH
5594: CALL_OW 505
// if not minerMinesList [ i ] then
5598: LD_EXP 22
5602: PUSH
5603: LD_VAR 0 1
5607: ARRAY
5608: NOT
5609: IFFALSE 5613
// continue ;
5611: GO 5552
// for j := minerMinesList [ i ] downto 1 do
5613: LD_ADDR_VAR 0 2
5617: PUSH
5618: DOUBLE
5619: LD_EXP 22
5623: PUSH
5624: LD_VAR 0 1
5628: ARRAY
5629: INC
5630: ST_TO_ADDR
5631: LD_INT 1
5633: PUSH
5634: FOR_DOWNTO
5635: IFFALSE 5885
// begin side := GetSide ( minersList [ i ] ) ;
5637: LD_ADDR_VAR 0 3
5641: PUSH
5642: LD_EXP 21
5646: PUSH
5647: LD_VAR 0 1
5651: ARRAY
5652: PPUSH
5653: CALL_OW 255
5657: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
5658: LD_ADDR_VAR 0 4
5662: PUSH
5663: LD_EXP 22
5667: PUSH
5668: LD_VAR 0 1
5672: ARRAY
5673: PUSH
5674: LD_VAR 0 2
5678: ARRAY
5679: PUSH
5680: LD_INT 1
5682: ARRAY
5683: PPUSH
5684: LD_EXP 22
5688: PUSH
5689: LD_VAR 0 1
5693: ARRAY
5694: PUSH
5695: LD_VAR 0 2
5699: ARRAY
5700: PUSH
5701: LD_INT 2
5703: ARRAY
5704: PPUSH
5705: CALL_OW 428
5709: ST_TO_ADDR
// if not tmp then
5710: LD_VAR 0 4
5714: NOT
5715: IFFALSE 5719
// continue ;
5717: GO 5634
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
5719: LD_VAR 0 4
5723: PUSH
5724: LD_INT 81
5726: PUSH
5727: LD_VAR 0 3
5731: PUSH
5732: EMPTY
5733: LIST
5734: LIST
5735: PPUSH
5736: CALL_OW 69
5740: IN
5741: PUSH
5742: LD_EXP 22
5746: PUSH
5747: LD_VAR 0 1
5751: ARRAY
5752: PUSH
5753: LD_VAR 0 2
5757: ARRAY
5758: PUSH
5759: LD_INT 1
5761: ARRAY
5762: PPUSH
5763: LD_EXP 22
5767: PUSH
5768: LD_VAR 0 1
5772: ARRAY
5773: PUSH
5774: LD_VAR 0 2
5778: ARRAY
5779: PUSH
5780: LD_INT 2
5782: ARRAY
5783: PPUSH
5784: CALL_OW 458
5788: AND
5789: IFFALSE 5883
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
5791: LD_EXP 22
5795: PUSH
5796: LD_VAR 0 1
5800: ARRAY
5801: PUSH
5802: LD_VAR 0 2
5806: ARRAY
5807: PUSH
5808: LD_INT 1
5810: ARRAY
5811: PPUSH
5812: LD_EXP 22
5816: PUSH
5817: LD_VAR 0 1
5821: ARRAY
5822: PUSH
5823: LD_VAR 0 2
5827: ARRAY
5828: PUSH
5829: LD_INT 2
5831: ARRAY
5832: PPUSH
5833: LD_VAR 0 3
5837: PPUSH
5838: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
5842: LD_ADDR_EXP 22
5846: PUSH
5847: LD_EXP 22
5851: PPUSH
5852: LD_VAR 0 1
5856: PPUSH
5857: LD_EXP 22
5861: PUSH
5862: LD_VAR 0 1
5866: ARRAY
5867: PPUSH
5868: LD_VAR 0 2
5872: PPUSH
5873: CALL_OW 3
5877: PPUSH
5878: CALL_OW 1
5882: ST_TO_ADDR
// end ; end ;
5883: GO 5634
5885: POP
5886: POP
// end ;
5887: GO 5552
5889: POP
5890: POP
// end ;
5891: PPOPN 4
5893: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
5894: LD_INT 0
5896: PPUSH
5897: PPUSH
// result := false ;
5898: LD_ADDR_VAR 0 4
5902: PUSH
5903: LD_INT 0
5905: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
5906: LD_VAR 0 1
5910: PPUSH
5911: CALL_OW 264
5915: PUSH
5916: LD_EXP 89
5920: EQUAL
5921: NOT
5922: IFFALSE 5926
// exit ;
5924: GO 6166
// index := GetElementIndex ( minersList , unit ) ;
5926: LD_ADDR_VAR 0 5
5930: PUSH
5931: LD_EXP 21
5935: PPUSH
5936: LD_VAR 0 1
5940: PPUSH
5941: CALL 26103 0 2
5945: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
5946: LD_EXP 22
5950: PUSH
5951: LD_VAR 0 5
5955: ARRAY
5956: PUSH
5957: LD_EXP 23
5961: GREATEREQUAL
5962: IFFALSE 5966
// exit ;
5964: GO 6166
// ComMoveXY ( unit , x , y ) ;
5966: LD_VAR 0 1
5970: PPUSH
5971: LD_VAR 0 2
5975: PPUSH
5976: LD_VAR 0 3
5980: PPUSH
5981: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
5985: LD_INT 35
5987: PPUSH
5988: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
5992: LD_VAR 0 1
5996: PPUSH
5997: LD_VAR 0 2
6001: PPUSH
6002: LD_VAR 0 3
6006: PPUSH
6007: CALL 56875 0 3
6011: NOT
6012: PUSH
6013: LD_VAR 0 1
6017: PPUSH
6018: CALL_OW 314
6022: AND
6023: IFFALSE 6027
// exit ;
6025: GO 6166
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
6027: LD_VAR 0 2
6031: PPUSH
6032: LD_VAR 0 3
6036: PPUSH
6037: CALL_OW 428
6041: PUSH
6042: LD_VAR 0 1
6046: EQUAL
6047: PUSH
6048: LD_VAR 0 1
6052: PPUSH
6053: CALL_OW 314
6057: NOT
6058: AND
6059: IFFALSE 5985
// PlaySoundXY ( x , y , PlantMine ) ;
6061: LD_VAR 0 2
6065: PPUSH
6066: LD_VAR 0 3
6070: PPUSH
6071: LD_STRING PlantMine
6073: PPUSH
6074: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
6078: LD_VAR 0 2
6082: PPUSH
6083: LD_VAR 0 3
6087: PPUSH
6088: LD_VAR 0 1
6092: PPUSH
6093: CALL_OW 255
6097: PPUSH
6098: LD_INT 0
6100: PPUSH
6101: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
6105: LD_ADDR_EXP 22
6109: PUSH
6110: LD_EXP 22
6114: PPUSH
6115: LD_VAR 0 5
6119: PUSH
6120: LD_EXP 22
6124: PUSH
6125: LD_VAR 0 5
6129: ARRAY
6130: PUSH
6131: LD_INT 1
6133: PLUS
6134: PUSH
6135: EMPTY
6136: LIST
6137: LIST
6138: PPUSH
6139: LD_VAR 0 2
6143: PUSH
6144: LD_VAR 0 3
6148: PUSH
6149: EMPTY
6150: LIST
6151: LIST
6152: PPUSH
6153: CALL 26318 0 3
6157: ST_TO_ADDR
// result := true ;
6158: LD_ADDR_VAR 0 4
6162: PUSH
6163: LD_INT 1
6165: ST_TO_ADDR
// end ;
6166: LD_VAR 0 4
6170: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
6171: LD_INT 0
6173: PPUSH
6174: PPUSH
6175: PPUSH
// if not unit in minersList then
6176: LD_VAR 0 1
6180: PUSH
6181: LD_EXP 21
6185: IN
6186: NOT
6187: IFFALSE 6191
// exit ;
6189: GO 6583
// index := GetElementIndex ( minersList , unit ) ;
6191: LD_ADDR_VAR 0 6
6195: PUSH
6196: LD_EXP 21
6200: PPUSH
6201: LD_VAR 0 1
6205: PPUSH
6206: CALL 26103 0 2
6210: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
6211: LD_ADDR_VAR 0 5
6215: PUSH
6216: DOUBLE
6217: LD_EXP 22
6221: PUSH
6222: LD_VAR 0 6
6226: ARRAY
6227: INC
6228: ST_TO_ADDR
6229: LD_INT 1
6231: PUSH
6232: FOR_DOWNTO
6233: IFFALSE 6394
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
6235: LD_EXP 22
6239: PUSH
6240: LD_VAR 0 6
6244: ARRAY
6245: PUSH
6246: LD_VAR 0 5
6250: ARRAY
6251: PUSH
6252: LD_INT 1
6254: ARRAY
6255: PUSH
6256: LD_VAR 0 2
6260: EQUAL
6261: PUSH
6262: LD_EXP 22
6266: PUSH
6267: LD_VAR 0 6
6271: ARRAY
6272: PUSH
6273: LD_VAR 0 5
6277: ARRAY
6278: PUSH
6279: LD_INT 2
6281: ARRAY
6282: PUSH
6283: LD_VAR 0 3
6287: EQUAL
6288: AND
6289: IFFALSE 6392
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
6291: LD_EXP 22
6295: PUSH
6296: LD_VAR 0 6
6300: ARRAY
6301: PUSH
6302: LD_VAR 0 5
6306: ARRAY
6307: PUSH
6308: LD_INT 1
6310: ARRAY
6311: PPUSH
6312: LD_EXP 22
6316: PUSH
6317: LD_VAR 0 6
6321: ARRAY
6322: PUSH
6323: LD_VAR 0 5
6327: ARRAY
6328: PUSH
6329: LD_INT 2
6331: ARRAY
6332: PPUSH
6333: LD_VAR 0 1
6337: PPUSH
6338: CALL_OW 255
6342: PPUSH
6343: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
6347: LD_ADDR_EXP 22
6351: PUSH
6352: LD_EXP 22
6356: PPUSH
6357: LD_VAR 0 6
6361: PPUSH
6362: LD_EXP 22
6366: PUSH
6367: LD_VAR 0 6
6371: ARRAY
6372: PPUSH
6373: LD_VAR 0 5
6377: PPUSH
6378: CALL_OW 3
6382: PPUSH
6383: CALL_OW 1
6387: ST_TO_ADDR
// exit ;
6388: POP
6389: POP
6390: GO 6583
// end ; end ;
6392: GO 6232
6394: POP
6395: POP
// for i := minerMinesList [ index ] downto 1 do
6396: LD_ADDR_VAR 0 5
6400: PUSH
6401: DOUBLE
6402: LD_EXP 22
6406: PUSH
6407: LD_VAR 0 6
6411: ARRAY
6412: INC
6413: ST_TO_ADDR
6414: LD_INT 1
6416: PUSH
6417: FOR_DOWNTO
6418: IFFALSE 6581
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
6420: LD_EXP 22
6424: PUSH
6425: LD_VAR 0 6
6429: ARRAY
6430: PUSH
6431: LD_VAR 0 5
6435: ARRAY
6436: PUSH
6437: LD_INT 1
6439: ARRAY
6440: PPUSH
6441: LD_EXP 22
6445: PUSH
6446: LD_VAR 0 6
6450: ARRAY
6451: PUSH
6452: LD_VAR 0 5
6456: ARRAY
6457: PUSH
6458: LD_INT 2
6460: ARRAY
6461: PPUSH
6462: LD_VAR 0 2
6466: PPUSH
6467: LD_VAR 0 3
6471: PPUSH
6472: CALL_OW 298
6476: PUSH
6477: LD_INT 6
6479: LESS
6480: IFFALSE 6579
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
6482: LD_EXP 22
6486: PUSH
6487: LD_VAR 0 6
6491: ARRAY
6492: PUSH
6493: LD_VAR 0 5
6497: ARRAY
6498: PUSH
6499: LD_INT 1
6501: ARRAY
6502: PPUSH
6503: LD_EXP 22
6507: PUSH
6508: LD_VAR 0 6
6512: ARRAY
6513: PUSH
6514: LD_VAR 0 5
6518: ARRAY
6519: PUSH
6520: LD_INT 2
6522: ARRAY
6523: PPUSH
6524: LD_VAR 0 1
6528: PPUSH
6529: CALL_OW 255
6533: PPUSH
6534: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
6538: LD_ADDR_EXP 22
6542: PUSH
6543: LD_EXP 22
6547: PPUSH
6548: LD_VAR 0 6
6552: PPUSH
6553: LD_EXP 22
6557: PUSH
6558: LD_VAR 0 6
6562: ARRAY
6563: PPUSH
6564: LD_VAR 0 5
6568: PPUSH
6569: CALL_OW 3
6573: PPUSH
6574: CALL_OW 1
6578: ST_TO_ADDR
// end ; end ;
6579: GO 6417
6581: POP
6582: POP
// end ;
6583: LD_VAR 0 4
6587: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
6588: LD_INT 0
6590: PPUSH
6591: PPUSH
6592: PPUSH
6593: PPUSH
6594: PPUSH
6595: PPUSH
6596: PPUSH
6597: PPUSH
6598: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
6599: LD_VAR 0 1
6603: PPUSH
6604: CALL_OW 264
6608: PUSH
6609: LD_EXP 89
6613: EQUAL
6614: NOT
6615: PUSH
6616: LD_VAR 0 1
6620: PUSH
6621: LD_EXP 21
6625: IN
6626: NOT
6627: OR
6628: IFFALSE 6632
// exit ;
6630: GO 6954
// index := GetElementIndex ( minersList , unit ) ;
6632: LD_ADDR_VAR 0 6
6636: PUSH
6637: LD_EXP 21
6641: PPUSH
6642: LD_VAR 0 1
6646: PPUSH
6647: CALL 26103 0 2
6651: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
6652: LD_ADDR_VAR 0 8
6656: PUSH
6657: LD_EXP 23
6661: PUSH
6662: LD_EXP 22
6666: PUSH
6667: LD_VAR 0 6
6671: ARRAY
6672: MINUS
6673: ST_TO_ADDR
// if not minesFreeAmount then
6674: LD_VAR 0 8
6678: NOT
6679: IFFALSE 6683
// exit ;
6681: GO 6954
// tmp := [ ] ;
6683: LD_ADDR_VAR 0 7
6687: PUSH
6688: EMPTY
6689: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
6690: LD_ADDR_VAR 0 5
6694: PUSH
6695: DOUBLE
6696: LD_INT 1
6698: DEC
6699: ST_TO_ADDR
6700: LD_VAR 0 8
6704: PUSH
6705: FOR_TO
6706: IFFALSE 6901
// begin _d := rand ( 0 , 5 ) ;
6708: LD_ADDR_VAR 0 11
6712: PUSH
6713: LD_INT 0
6715: PPUSH
6716: LD_INT 5
6718: PPUSH
6719: CALL_OW 12
6723: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
6724: LD_ADDR_VAR 0 12
6728: PUSH
6729: LD_INT 2
6731: PPUSH
6732: LD_INT 6
6734: PPUSH
6735: CALL_OW 12
6739: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
6740: LD_ADDR_VAR 0 9
6744: PUSH
6745: LD_VAR 0 2
6749: PPUSH
6750: LD_VAR 0 11
6754: PPUSH
6755: LD_VAR 0 12
6759: PPUSH
6760: CALL_OW 272
6764: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
6765: LD_ADDR_VAR 0 10
6769: PUSH
6770: LD_VAR 0 3
6774: PPUSH
6775: LD_VAR 0 11
6779: PPUSH
6780: LD_VAR 0 12
6784: PPUSH
6785: CALL_OW 273
6789: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
6790: LD_VAR 0 9
6794: PPUSH
6795: LD_VAR 0 10
6799: PPUSH
6800: CALL_OW 488
6804: PUSH
6805: LD_VAR 0 9
6809: PUSH
6810: LD_VAR 0 10
6814: PUSH
6815: EMPTY
6816: LIST
6817: LIST
6818: PUSH
6819: LD_VAR 0 7
6823: IN
6824: NOT
6825: AND
6826: PUSH
6827: LD_VAR 0 9
6831: PPUSH
6832: LD_VAR 0 10
6836: PPUSH
6837: CALL_OW 458
6841: NOT
6842: AND
6843: IFFALSE 6885
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
6845: LD_ADDR_VAR 0 7
6849: PUSH
6850: LD_VAR 0 7
6854: PPUSH
6855: LD_VAR 0 7
6859: PUSH
6860: LD_INT 1
6862: PLUS
6863: PPUSH
6864: LD_VAR 0 9
6868: PUSH
6869: LD_VAR 0 10
6873: PUSH
6874: EMPTY
6875: LIST
6876: LIST
6877: PPUSH
6878: CALL_OW 1
6882: ST_TO_ADDR
6883: GO 6899
// i := i - 1 ;
6885: LD_ADDR_VAR 0 5
6889: PUSH
6890: LD_VAR 0 5
6894: PUSH
6895: LD_INT 1
6897: MINUS
6898: ST_TO_ADDR
// end ;
6899: GO 6705
6901: POP
6902: POP
// for i in tmp do
6903: LD_ADDR_VAR 0 5
6907: PUSH
6908: LD_VAR 0 7
6912: PUSH
6913: FOR_IN
6914: IFFALSE 6952
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
6916: LD_VAR 0 1
6920: PPUSH
6921: LD_VAR 0 5
6925: PUSH
6926: LD_INT 1
6928: ARRAY
6929: PPUSH
6930: LD_VAR 0 5
6934: PUSH
6935: LD_INT 2
6937: ARRAY
6938: PPUSH
6939: CALL 5894 0 3
6943: NOT
6944: IFFALSE 6950
// exit ;
6946: POP
6947: POP
6948: GO 6954
6950: GO 6913
6952: POP
6953: POP
// end ;
6954: LD_VAR 0 4
6958: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
6959: LD_INT 0
6961: PPUSH
6962: PPUSH
6963: PPUSH
6964: PPUSH
6965: PPUSH
6966: PPUSH
6967: PPUSH
// if not GetClass ( unit ) = class_sniper then
6968: LD_VAR 0 1
6972: PPUSH
6973: CALL_OW 257
6977: PUSH
6978: LD_INT 5
6980: EQUAL
6981: NOT
6982: IFFALSE 6986
// exit ;
6984: GO 7374
// dist := 8 ;
6986: LD_ADDR_VAR 0 5
6990: PUSH
6991: LD_INT 8
6993: ST_TO_ADDR
// viewRange := 12 ;
6994: LD_ADDR_VAR 0 7
6998: PUSH
6999: LD_INT 12
7001: ST_TO_ADDR
// side := GetSide ( unit ) ;
7002: LD_ADDR_VAR 0 6
7006: PUSH
7007: LD_VAR 0 1
7011: PPUSH
7012: CALL_OW 255
7016: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
7017: LD_INT 61
7019: PPUSH
7020: LD_VAR 0 6
7024: PPUSH
7025: CALL_OW 321
7029: PUSH
7030: LD_INT 2
7032: EQUAL
7033: IFFALSE 7043
// viewRange := 16 ;
7035: LD_ADDR_VAR 0 7
7039: PUSH
7040: LD_INT 16
7042: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
7043: LD_VAR 0 1
7047: PPUSH
7048: LD_VAR 0 2
7052: PPUSH
7053: LD_VAR 0 3
7057: PPUSH
7058: CALL_OW 297
7062: PUSH
7063: LD_VAR 0 5
7067: GREATER
7068: IFFALSE 7147
// begin ComMoveXY ( unit , x , y ) ;
7070: LD_VAR 0 1
7074: PPUSH
7075: LD_VAR 0 2
7079: PPUSH
7080: LD_VAR 0 3
7084: PPUSH
7085: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7089: LD_INT 35
7091: PPUSH
7092: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
7096: LD_VAR 0 1
7100: PPUSH
7101: LD_VAR 0 2
7105: PPUSH
7106: LD_VAR 0 3
7110: PPUSH
7111: CALL 56875 0 3
7115: NOT
7116: IFFALSE 7120
// exit ;
7118: GO 7374
// until GetDistUnitXY ( unit , x , y ) < dist ;
7120: LD_VAR 0 1
7124: PPUSH
7125: LD_VAR 0 2
7129: PPUSH
7130: LD_VAR 0 3
7134: PPUSH
7135: CALL_OW 297
7139: PUSH
7140: LD_VAR 0 5
7144: LESS
7145: IFFALSE 7089
// end ; ComTurnXY ( unit , x , y ) ;
7147: LD_VAR 0 1
7151: PPUSH
7152: LD_VAR 0 2
7156: PPUSH
7157: LD_VAR 0 3
7161: PPUSH
7162: CALL_OW 118
// wait ( 5 ) ;
7166: LD_INT 5
7168: PPUSH
7169: CALL_OW 67
// _d := GetDir ( unit ) ;
7173: LD_ADDR_VAR 0 10
7177: PUSH
7178: LD_VAR 0 1
7182: PPUSH
7183: CALL_OW 254
7187: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
7188: LD_ADDR_VAR 0 8
7192: PUSH
7193: LD_VAR 0 1
7197: PPUSH
7198: CALL_OW 250
7202: PPUSH
7203: LD_VAR 0 10
7207: PPUSH
7208: LD_VAR 0 5
7212: PPUSH
7213: CALL_OW 272
7217: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
7218: LD_ADDR_VAR 0 9
7222: PUSH
7223: LD_VAR 0 1
7227: PPUSH
7228: CALL_OW 251
7232: PPUSH
7233: LD_VAR 0 10
7237: PPUSH
7238: LD_VAR 0 5
7242: PPUSH
7243: CALL_OW 273
7247: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
7248: LD_VAR 0 8
7252: PPUSH
7253: LD_VAR 0 9
7257: PPUSH
7258: CALL_OW 488
7262: NOT
7263: IFFALSE 7267
// exit ;
7265: GO 7374
// ComAnimCustom ( unit , 1 ) ;
7267: LD_VAR 0 1
7271: PPUSH
7272: LD_INT 1
7274: PPUSH
7275: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
7279: LD_VAR 0 8
7283: PPUSH
7284: LD_VAR 0 9
7288: PPUSH
7289: LD_VAR 0 6
7293: PPUSH
7294: LD_VAR 0 7
7298: PPUSH
7299: CALL_OW 330
// repeat wait ( 1 ) ;
7303: LD_INT 1
7305: PPUSH
7306: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
7310: LD_VAR 0 1
7314: PPUSH
7315: CALL_OW 316
7319: PUSH
7320: LD_VAR 0 1
7324: PPUSH
7325: CALL_OW 314
7329: OR
7330: PUSH
7331: LD_VAR 0 1
7335: PPUSH
7336: CALL_OW 302
7340: NOT
7341: OR
7342: PUSH
7343: LD_VAR 0 1
7347: PPUSH
7348: CALL_OW 301
7352: OR
7353: IFFALSE 7303
// RemoveSeeing ( _x , _y , side ) ;
7355: LD_VAR 0 8
7359: PPUSH
7360: LD_VAR 0 9
7364: PPUSH
7365: LD_VAR 0 6
7369: PPUSH
7370: CALL_OW 331
// end ; end_of_file
7374: LD_VAR 0 4
7378: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7379: LD_INT 0
7381: PPUSH
// if p2 = 100 then
7382: LD_VAR 0 2
7386: PUSH
7387: LD_INT 100
7389: EQUAL
7390: IFFALSE 8393
// begin if not StreamModeActive then
7392: LD_EXP 24
7396: NOT
7397: IFFALSE 7407
// StreamModeActive := true ;
7399: LD_ADDR_EXP 24
7403: PUSH
7404: LD_INT 1
7406: ST_TO_ADDR
// if p3 = 0 then
7407: LD_VAR 0 3
7411: PUSH
7412: LD_INT 0
7414: EQUAL
7415: IFFALSE 7421
// InitStreamMode ;
7417: CALL 8553 0 0
// if p3 = 1 then
7421: LD_VAR 0 3
7425: PUSH
7426: LD_INT 1
7428: EQUAL
7429: IFFALSE 7439
// sRocket := true ;
7431: LD_ADDR_EXP 29
7435: PUSH
7436: LD_INT 1
7438: ST_TO_ADDR
// if p3 = 2 then
7439: LD_VAR 0 3
7443: PUSH
7444: LD_INT 2
7446: EQUAL
7447: IFFALSE 7457
// sSpeed := true ;
7449: LD_ADDR_EXP 28
7453: PUSH
7454: LD_INT 1
7456: ST_TO_ADDR
// if p3 = 3 then
7457: LD_VAR 0 3
7461: PUSH
7462: LD_INT 3
7464: EQUAL
7465: IFFALSE 7475
// sEngine := true ;
7467: LD_ADDR_EXP 30
7471: PUSH
7472: LD_INT 1
7474: ST_TO_ADDR
// if p3 = 4 then
7475: LD_VAR 0 3
7479: PUSH
7480: LD_INT 4
7482: EQUAL
7483: IFFALSE 7493
// sSpec := true ;
7485: LD_ADDR_EXP 27
7489: PUSH
7490: LD_INT 1
7492: ST_TO_ADDR
// if p3 = 5 then
7493: LD_VAR 0 3
7497: PUSH
7498: LD_INT 5
7500: EQUAL
7501: IFFALSE 7511
// sLevel := true ;
7503: LD_ADDR_EXP 31
7507: PUSH
7508: LD_INT 1
7510: ST_TO_ADDR
// if p3 = 6 then
7511: LD_VAR 0 3
7515: PUSH
7516: LD_INT 6
7518: EQUAL
7519: IFFALSE 7529
// sArmoury := true ;
7521: LD_ADDR_EXP 32
7525: PUSH
7526: LD_INT 1
7528: ST_TO_ADDR
// if p3 = 7 then
7529: LD_VAR 0 3
7533: PUSH
7534: LD_INT 7
7536: EQUAL
7537: IFFALSE 7547
// sRadar := true ;
7539: LD_ADDR_EXP 33
7543: PUSH
7544: LD_INT 1
7546: ST_TO_ADDR
// if p3 = 8 then
7547: LD_VAR 0 3
7551: PUSH
7552: LD_INT 8
7554: EQUAL
7555: IFFALSE 7565
// sBunker := true ;
7557: LD_ADDR_EXP 34
7561: PUSH
7562: LD_INT 1
7564: ST_TO_ADDR
// if p3 = 9 then
7565: LD_VAR 0 3
7569: PUSH
7570: LD_INT 9
7572: EQUAL
7573: IFFALSE 7583
// sHack := true ;
7575: LD_ADDR_EXP 35
7579: PUSH
7580: LD_INT 1
7582: ST_TO_ADDR
// if p3 = 10 then
7583: LD_VAR 0 3
7587: PUSH
7588: LD_INT 10
7590: EQUAL
7591: IFFALSE 7601
// sFire := true ;
7593: LD_ADDR_EXP 36
7597: PUSH
7598: LD_INT 1
7600: ST_TO_ADDR
// if p3 = 11 then
7601: LD_VAR 0 3
7605: PUSH
7606: LD_INT 11
7608: EQUAL
7609: IFFALSE 7619
// sRefresh := true ;
7611: LD_ADDR_EXP 37
7615: PUSH
7616: LD_INT 1
7618: ST_TO_ADDR
// if p3 = 12 then
7619: LD_VAR 0 3
7623: PUSH
7624: LD_INT 12
7626: EQUAL
7627: IFFALSE 7637
// sExp := true ;
7629: LD_ADDR_EXP 38
7633: PUSH
7634: LD_INT 1
7636: ST_TO_ADDR
// if p3 = 13 then
7637: LD_VAR 0 3
7641: PUSH
7642: LD_INT 13
7644: EQUAL
7645: IFFALSE 7655
// sDepot := true ;
7647: LD_ADDR_EXP 39
7651: PUSH
7652: LD_INT 1
7654: ST_TO_ADDR
// if p3 = 14 then
7655: LD_VAR 0 3
7659: PUSH
7660: LD_INT 14
7662: EQUAL
7663: IFFALSE 7673
// sFlag := true ;
7665: LD_ADDR_EXP 40
7669: PUSH
7670: LD_INT 1
7672: ST_TO_ADDR
// if p3 = 15 then
7673: LD_VAR 0 3
7677: PUSH
7678: LD_INT 15
7680: EQUAL
7681: IFFALSE 7691
// sKamikadze := true ;
7683: LD_ADDR_EXP 48
7687: PUSH
7688: LD_INT 1
7690: ST_TO_ADDR
// if p3 = 16 then
7691: LD_VAR 0 3
7695: PUSH
7696: LD_INT 16
7698: EQUAL
7699: IFFALSE 7709
// sTroll := true ;
7701: LD_ADDR_EXP 49
7705: PUSH
7706: LD_INT 1
7708: ST_TO_ADDR
// if p3 = 17 then
7709: LD_VAR 0 3
7713: PUSH
7714: LD_INT 17
7716: EQUAL
7717: IFFALSE 7727
// sSlow := true ;
7719: LD_ADDR_EXP 50
7723: PUSH
7724: LD_INT 1
7726: ST_TO_ADDR
// if p3 = 18 then
7727: LD_VAR 0 3
7731: PUSH
7732: LD_INT 18
7734: EQUAL
7735: IFFALSE 7745
// sLack := true ;
7737: LD_ADDR_EXP 51
7741: PUSH
7742: LD_INT 1
7744: ST_TO_ADDR
// if p3 = 19 then
7745: LD_VAR 0 3
7749: PUSH
7750: LD_INT 19
7752: EQUAL
7753: IFFALSE 7763
// sTank := true ;
7755: LD_ADDR_EXP 53
7759: PUSH
7760: LD_INT 1
7762: ST_TO_ADDR
// if p3 = 20 then
7763: LD_VAR 0 3
7767: PUSH
7768: LD_INT 20
7770: EQUAL
7771: IFFALSE 7781
// sRemote := true ;
7773: LD_ADDR_EXP 54
7777: PUSH
7778: LD_INT 1
7780: ST_TO_ADDR
// if p3 = 21 then
7781: LD_VAR 0 3
7785: PUSH
7786: LD_INT 21
7788: EQUAL
7789: IFFALSE 7799
// sPowell := true ;
7791: LD_ADDR_EXP 55
7795: PUSH
7796: LD_INT 1
7798: ST_TO_ADDR
// if p3 = 22 then
7799: LD_VAR 0 3
7803: PUSH
7804: LD_INT 22
7806: EQUAL
7807: IFFALSE 7817
// sTeleport := true ;
7809: LD_ADDR_EXP 58
7813: PUSH
7814: LD_INT 1
7816: ST_TO_ADDR
// if p3 = 23 then
7817: LD_VAR 0 3
7821: PUSH
7822: LD_INT 23
7824: EQUAL
7825: IFFALSE 7835
// sOilTower := true ;
7827: LD_ADDR_EXP 60
7831: PUSH
7832: LD_INT 1
7834: ST_TO_ADDR
// if p3 = 24 then
7835: LD_VAR 0 3
7839: PUSH
7840: LD_INT 24
7842: EQUAL
7843: IFFALSE 7853
// sShovel := true ;
7845: LD_ADDR_EXP 61
7849: PUSH
7850: LD_INT 1
7852: ST_TO_ADDR
// if p3 = 25 then
7853: LD_VAR 0 3
7857: PUSH
7858: LD_INT 25
7860: EQUAL
7861: IFFALSE 7871
// sSheik := true ;
7863: LD_ADDR_EXP 62
7867: PUSH
7868: LD_INT 1
7870: ST_TO_ADDR
// if p3 = 26 then
7871: LD_VAR 0 3
7875: PUSH
7876: LD_INT 26
7878: EQUAL
7879: IFFALSE 7889
// sEarthquake := true ;
7881: LD_ADDR_EXP 64
7885: PUSH
7886: LD_INT 1
7888: ST_TO_ADDR
// if p3 = 27 then
7889: LD_VAR 0 3
7893: PUSH
7894: LD_INT 27
7896: EQUAL
7897: IFFALSE 7907
// sAI := true ;
7899: LD_ADDR_EXP 65
7903: PUSH
7904: LD_INT 1
7906: ST_TO_ADDR
// if p3 = 28 then
7907: LD_VAR 0 3
7911: PUSH
7912: LD_INT 28
7914: EQUAL
7915: IFFALSE 7925
// sCargo := true ;
7917: LD_ADDR_EXP 68
7921: PUSH
7922: LD_INT 1
7924: ST_TO_ADDR
// if p3 = 29 then
7925: LD_VAR 0 3
7929: PUSH
7930: LD_INT 29
7932: EQUAL
7933: IFFALSE 7943
// sDLaser := true ;
7935: LD_ADDR_EXP 69
7939: PUSH
7940: LD_INT 1
7942: ST_TO_ADDR
// if p3 = 30 then
7943: LD_VAR 0 3
7947: PUSH
7948: LD_INT 30
7950: EQUAL
7951: IFFALSE 7961
// sExchange := true ;
7953: LD_ADDR_EXP 70
7957: PUSH
7958: LD_INT 1
7960: ST_TO_ADDR
// if p3 = 31 then
7961: LD_VAR 0 3
7965: PUSH
7966: LD_INT 31
7968: EQUAL
7969: IFFALSE 7979
// sFac := true ;
7971: LD_ADDR_EXP 71
7975: PUSH
7976: LD_INT 1
7978: ST_TO_ADDR
// if p3 = 32 then
7979: LD_VAR 0 3
7983: PUSH
7984: LD_INT 32
7986: EQUAL
7987: IFFALSE 7997
// sPower := true ;
7989: LD_ADDR_EXP 72
7993: PUSH
7994: LD_INT 1
7996: ST_TO_ADDR
// if p3 = 33 then
7997: LD_VAR 0 3
8001: PUSH
8002: LD_INT 33
8004: EQUAL
8005: IFFALSE 8015
// sRandom := true ;
8007: LD_ADDR_EXP 73
8011: PUSH
8012: LD_INT 1
8014: ST_TO_ADDR
// if p3 = 34 then
8015: LD_VAR 0 3
8019: PUSH
8020: LD_INT 34
8022: EQUAL
8023: IFFALSE 8033
// sShield := true ;
8025: LD_ADDR_EXP 74
8029: PUSH
8030: LD_INT 1
8032: ST_TO_ADDR
// if p3 = 35 then
8033: LD_VAR 0 3
8037: PUSH
8038: LD_INT 35
8040: EQUAL
8041: IFFALSE 8051
// sTime := true ;
8043: LD_ADDR_EXP 75
8047: PUSH
8048: LD_INT 1
8050: ST_TO_ADDR
// if p3 = 36 then
8051: LD_VAR 0 3
8055: PUSH
8056: LD_INT 36
8058: EQUAL
8059: IFFALSE 8069
// sTools := true ;
8061: LD_ADDR_EXP 76
8065: PUSH
8066: LD_INT 1
8068: ST_TO_ADDR
// if p3 = 101 then
8069: LD_VAR 0 3
8073: PUSH
8074: LD_INT 101
8076: EQUAL
8077: IFFALSE 8087
// sSold := true ;
8079: LD_ADDR_EXP 41
8083: PUSH
8084: LD_INT 1
8086: ST_TO_ADDR
// if p3 = 102 then
8087: LD_VAR 0 3
8091: PUSH
8092: LD_INT 102
8094: EQUAL
8095: IFFALSE 8105
// sDiff := true ;
8097: LD_ADDR_EXP 42
8101: PUSH
8102: LD_INT 1
8104: ST_TO_ADDR
// if p3 = 103 then
8105: LD_VAR 0 3
8109: PUSH
8110: LD_INT 103
8112: EQUAL
8113: IFFALSE 8123
// sFog := true ;
8115: LD_ADDR_EXP 45
8119: PUSH
8120: LD_INT 1
8122: ST_TO_ADDR
// if p3 = 104 then
8123: LD_VAR 0 3
8127: PUSH
8128: LD_INT 104
8130: EQUAL
8131: IFFALSE 8141
// sReset := true ;
8133: LD_ADDR_EXP 46
8137: PUSH
8138: LD_INT 1
8140: ST_TO_ADDR
// if p3 = 105 then
8141: LD_VAR 0 3
8145: PUSH
8146: LD_INT 105
8148: EQUAL
8149: IFFALSE 8159
// sSun := true ;
8151: LD_ADDR_EXP 47
8155: PUSH
8156: LD_INT 1
8158: ST_TO_ADDR
// if p3 = 106 then
8159: LD_VAR 0 3
8163: PUSH
8164: LD_INT 106
8166: EQUAL
8167: IFFALSE 8177
// sTiger := true ;
8169: LD_ADDR_EXP 43
8173: PUSH
8174: LD_INT 1
8176: ST_TO_ADDR
// if p3 = 107 then
8177: LD_VAR 0 3
8181: PUSH
8182: LD_INT 107
8184: EQUAL
8185: IFFALSE 8195
// sBomb := true ;
8187: LD_ADDR_EXP 44
8191: PUSH
8192: LD_INT 1
8194: ST_TO_ADDR
// if p3 = 108 then
8195: LD_VAR 0 3
8199: PUSH
8200: LD_INT 108
8202: EQUAL
8203: IFFALSE 8213
// sWound := true ;
8205: LD_ADDR_EXP 52
8209: PUSH
8210: LD_INT 1
8212: ST_TO_ADDR
// if p3 = 109 then
8213: LD_VAR 0 3
8217: PUSH
8218: LD_INT 109
8220: EQUAL
8221: IFFALSE 8231
// sBetray := true ;
8223: LD_ADDR_EXP 56
8227: PUSH
8228: LD_INT 1
8230: ST_TO_ADDR
// if p3 = 110 then
8231: LD_VAR 0 3
8235: PUSH
8236: LD_INT 110
8238: EQUAL
8239: IFFALSE 8249
// sContamin := true ;
8241: LD_ADDR_EXP 57
8245: PUSH
8246: LD_INT 1
8248: ST_TO_ADDR
// if p3 = 111 then
8249: LD_VAR 0 3
8253: PUSH
8254: LD_INT 111
8256: EQUAL
8257: IFFALSE 8267
// sOil := true ;
8259: LD_ADDR_EXP 59
8263: PUSH
8264: LD_INT 1
8266: ST_TO_ADDR
// if p3 = 112 then
8267: LD_VAR 0 3
8271: PUSH
8272: LD_INT 112
8274: EQUAL
8275: IFFALSE 8285
// sStu := true ;
8277: LD_ADDR_EXP 63
8281: PUSH
8282: LD_INT 1
8284: ST_TO_ADDR
// if p3 = 113 then
8285: LD_VAR 0 3
8289: PUSH
8290: LD_INT 113
8292: EQUAL
8293: IFFALSE 8303
// sBazooka := true ;
8295: LD_ADDR_EXP 66
8299: PUSH
8300: LD_INT 1
8302: ST_TO_ADDR
// if p3 = 114 then
8303: LD_VAR 0 3
8307: PUSH
8308: LD_INT 114
8310: EQUAL
8311: IFFALSE 8321
// sMortar := true ;
8313: LD_ADDR_EXP 67
8317: PUSH
8318: LD_INT 1
8320: ST_TO_ADDR
// if p3 = 115 then
8321: LD_VAR 0 3
8325: PUSH
8326: LD_INT 115
8328: EQUAL
8329: IFFALSE 8339
// sRanger := true ;
8331: LD_ADDR_EXP 77
8335: PUSH
8336: LD_INT 1
8338: ST_TO_ADDR
// if p3 = 116 then
8339: LD_VAR 0 3
8343: PUSH
8344: LD_INT 116
8346: EQUAL
8347: IFFALSE 8357
// sComputer := true ;
8349: LD_ADDR_EXP 78
8353: PUSH
8354: LD_INT 1
8356: ST_TO_ADDR
// if p3 = 117 then
8357: LD_VAR 0 3
8361: PUSH
8362: LD_INT 117
8364: EQUAL
8365: IFFALSE 8375
// s30 := true ;
8367: LD_ADDR_EXP 79
8371: PUSH
8372: LD_INT 1
8374: ST_TO_ADDR
// if p3 = 118 then
8375: LD_VAR 0 3
8379: PUSH
8380: LD_INT 118
8382: EQUAL
8383: IFFALSE 8393
// s60 := true ;
8385: LD_ADDR_EXP 80
8389: PUSH
8390: LD_INT 1
8392: ST_TO_ADDR
// end ; if p2 = 101 then
8393: LD_VAR 0 2
8397: PUSH
8398: LD_INT 101
8400: EQUAL
8401: IFFALSE 8529
// begin case p3 of 1 :
8403: LD_VAR 0 3
8407: PUSH
8408: LD_INT 1
8410: DOUBLE
8411: EQUAL
8412: IFTRUE 8416
8414: GO 8423
8416: POP
// hHackUnlimitedResources ; 2 :
8417: CALL 20125 0 0
8421: GO 8529
8423: LD_INT 2
8425: DOUBLE
8426: EQUAL
8427: IFTRUE 8431
8429: GO 8438
8431: POP
// hHackSetLevel10 ; 3 :
8432: CALL 20258 0 0
8436: GO 8529
8438: LD_INT 3
8440: DOUBLE
8441: EQUAL
8442: IFTRUE 8446
8444: GO 8453
8446: POP
// hHackSetLevel10YourUnits ; 4 :
8447: CALL 20343 0 0
8451: GO 8529
8453: LD_INT 4
8455: DOUBLE
8456: EQUAL
8457: IFTRUE 8461
8459: GO 8468
8461: POP
// hHackInvincible ; 5 :
8462: CALL 20791 0 0
8466: GO 8529
8468: LD_INT 5
8470: DOUBLE
8471: EQUAL
8472: IFTRUE 8476
8474: GO 8483
8476: POP
// hHackInvisible ; 6 :
8477: CALL 20902 0 0
8481: GO 8529
8483: LD_INT 6
8485: DOUBLE
8486: EQUAL
8487: IFTRUE 8491
8489: GO 8498
8491: POP
// hHackChangeYourSide ; 7 :
8492: CALL 20959 0 0
8496: GO 8529
8498: LD_INT 7
8500: DOUBLE
8501: EQUAL
8502: IFTRUE 8506
8504: GO 8513
8506: POP
// hHackChangeUnitSide ; 8 :
8507: CALL 21001 0 0
8511: GO 8529
8513: LD_INT 8
8515: DOUBLE
8516: EQUAL
8517: IFTRUE 8521
8519: GO 8528
8521: POP
// hHackFog ; end ;
8522: CALL 21102 0 0
8526: GO 8529
8528: POP
// end ; end ;
8529: LD_VAR 0 7
8533: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
8534: GO 8536
8536: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
8537: LD_STRING initStreamRollete();
8539: PPUSH
8540: CALL_OW 559
// InitStreamMode ;
8544: CALL 8553 0 0
// DefineStreamItems ( ) ;
8548: CALL 9017 0 0
// end ;
8552: END
// function InitStreamMode ; begin
8553: LD_INT 0
8555: PPUSH
// streamModeActive := false ;
8556: LD_ADDR_EXP 24
8560: PUSH
8561: LD_INT 0
8563: ST_TO_ADDR
// normalCounter := 36 ;
8564: LD_ADDR_EXP 25
8568: PUSH
8569: LD_INT 36
8571: ST_TO_ADDR
// hardcoreCounter := 16 ;
8572: LD_ADDR_EXP 26
8576: PUSH
8577: LD_INT 16
8579: ST_TO_ADDR
// sRocket := false ;
8580: LD_ADDR_EXP 29
8584: PUSH
8585: LD_INT 0
8587: ST_TO_ADDR
// sSpeed := false ;
8588: LD_ADDR_EXP 28
8592: PUSH
8593: LD_INT 0
8595: ST_TO_ADDR
// sEngine := false ;
8596: LD_ADDR_EXP 30
8600: PUSH
8601: LD_INT 0
8603: ST_TO_ADDR
// sSpec := false ;
8604: LD_ADDR_EXP 27
8608: PUSH
8609: LD_INT 0
8611: ST_TO_ADDR
// sLevel := false ;
8612: LD_ADDR_EXP 31
8616: PUSH
8617: LD_INT 0
8619: ST_TO_ADDR
// sArmoury := false ;
8620: LD_ADDR_EXP 32
8624: PUSH
8625: LD_INT 0
8627: ST_TO_ADDR
// sRadar := false ;
8628: LD_ADDR_EXP 33
8632: PUSH
8633: LD_INT 0
8635: ST_TO_ADDR
// sBunker := false ;
8636: LD_ADDR_EXP 34
8640: PUSH
8641: LD_INT 0
8643: ST_TO_ADDR
// sHack := false ;
8644: LD_ADDR_EXP 35
8648: PUSH
8649: LD_INT 0
8651: ST_TO_ADDR
// sFire := false ;
8652: LD_ADDR_EXP 36
8656: PUSH
8657: LD_INT 0
8659: ST_TO_ADDR
// sRefresh := false ;
8660: LD_ADDR_EXP 37
8664: PUSH
8665: LD_INT 0
8667: ST_TO_ADDR
// sExp := false ;
8668: LD_ADDR_EXP 38
8672: PUSH
8673: LD_INT 0
8675: ST_TO_ADDR
// sDepot := false ;
8676: LD_ADDR_EXP 39
8680: PUSH
8681: LD_INT 0
8683: ST_TO_ADDR
// sFlag := false ;
8684: LD_ADDR_EXP 40
8688: PUSH
8689: LD_INT 0
8691: ST_TO_ADDR
// sKamikadze := false ;
8692: LD_ADDR_EXP 48
8696: PUSH
8697: LD_INT 0
8699: ST_TO_ADDR
// sTroll := false ;
8700: LD_ADDR_EXP 49
8704: PUSH
8705: LD_INT 0
8707: ST_TO_ADDR
// sSlow := false ;
8708: LD_ADDR_EXP 50
8712: PUSH
8713: LD_INT 0
8715: ST_TO_ADDR
// sLack := false ;
8716: LD_ADDR_EXP 51
8720: PUSH
8721: LD_INT 0
8723: ST_TO_ADDR
// sTank := false ;
8724: LD_ADDR_EXP 53
8728: PUSH
8729: LD_INT 0
8731: ST_TO_ADDR
// sRemote := false ;
8732: LD_ADDR_EXP 54
8736: PUSH
8737: LD_INT 0
8739: ST_TO_ADDR
// sPowell := false ;
8740: LD_ADDR_EXP 55
8744: PUSH
8745: LD_INT 0
8747: ST_TO_ADDR
// sTeleport := false ;
8748: LD_ADDR_EXP 58
8752: PUSH
8753: LD_INT 0
8755: ST_TO_ADDR
// sOilTower := false ;
8756: LD_ADDR_EXP 60
8760: PUSH
8761: LD_INT 0
8763: ST_TO_ADDR
// sShovel := false ;
8764: LD_ADDR_EXP 61
8768: PUSH
8769: LD_INT 0
8771: ST_TO_ADDR
// sSheik := false ;
8772: LD_ADDR_EXP 62
8776: PUSH
8777: LD_INT 0
8779: ST_TO_ADDR
// sEarthquake := false ;
8780: LD_ADDR_EXP 64
8784: PUSH
8785: LD_INT 0
8787: ST_TO_ADDR
// sAI := false ;
8788: LD_ADDR_EXP 65
8792: PUSH
8793: LD_INT 0
8795: ST_TO_ADDR
// sCargo := false ;
8796: LD_ADDR_EXP 68
8800: PUSH
8801: LD_INT 0
8803: ST_TO_ADDR
// sDLaser := false ;
8804: LD_ADDR_EXP 69
8808: PUSH
8809: LD_INT 0
8811: ST_TO_ADDR
// sExchange := false ;
8812: LD_ADDR_EXP 70
8816: PUSH
8817: LD_INT 0
8819: ST_TO_ADDR
// sFac := false ;
8820: LD_ADDR_EXP 71
8824: PUSH
8825: LD_INT 0
8827: ST_TO_ADDR
// sPower := false ;
8828: LD_ADDR_EXP 72
8832: PUSH
8833: LD_INT 0
8835: ST_TO_ADDR
// sRandom := false ;
8836: LD_ADDR_EXP 73
8840: PUSH
8841: LD_INT 0
8843: ST_TO_ADDR
// sShield := false ;
8844: LD_ADDR_EXP 74
8848: PUSH
8849: LD_INT 0
8851: ST_TO_ADDR
// sTime := false ;
8852: LD_ADDR_EXP 75
8856: PUSH
8857: LD_INT 0
8859: ST_TO_ADDR
// sTools := false ;
8860: LD_ADDR_EXP 76
8864: PUSH
8865: LD_INT 0
8867: ST_TO_ADDR
// sSold := false ;
8868: LD_ADDR_EXP 41
8872: PUSH
8873: LD_INT 0
8875: ST_TO_ADDR
// sDiff := false ;
8876: LD_ADDR_EXP 42
8880: PUSH
8881: LD_INT 0
8883: ST_TO_ADDR
// sFog := false ;
8884: LD_ADDR_EXP 45
8888: PUSH
8889: LD_INT 0
8891: ST_TO_ADDR
// sReset := false ;
8892: LD_ADDR_EXP 46
8896: PUSH
8897: LD_INT 0
8899: ST_TO_ADDR
// sSun := false ;
8900: LD_ADDR_EXP 47
8904: PUSH
8905: LD_INT 0
8907: ST_TO_ADDR
// sTiger := false ;
8908: LD_ADDR_EXP 43
8912: PUSH
8913: LD_INT 0
8915: ST_TO_ADDR
// sBomb := false ;
8916: LD_ADDR_EXP 44
8920: PUSH
8921: LD_INT 0
8923: ST_TO_ADDR
// sWound := false ;
8924: LD_ADDR_EXP 52
8928: PUSH
8929: LD_INT 0
8931: ST_TO_ADDR
// sBetray := false ;
8932: LD_ADDR_EXP 56
8936: PUSH
8937: LD_INT 0
8939: ST_TO_ADDR
// sContamin := false ;
8940: LD_ADDR_EXP 57
8944: PUSH
8945: LD_INT 0
8947: ST_TO_ADDR
// sOil := false ;
8948: LD_ADDR_EXP 59
8952: PUSH
8953: LD_INT 0
8955: ST_TO_ADDR
// sStu := false ;
8956: LD_ADDR_EXP 63
8960: PUSH
8961: LD_INT 0
8963: ST_TO_ADDR
// sBazooka := false ;
8964: LD_ADDR_EXP 66
8968: PUSH
8969: LD_INT 0
8971: ST_TO_ADDR
// sMortar := false ;
8972: LD_ADDR_EXP 67
8976: PUSH
8977: LD_INT 0
8979: ST_TO_ADDR
// sRanger := false ;
8980: LD_ADDR_EXP 77
8984: PUSH
8985: LD_INT 0
8987: ST_TO_ADDR
// sComputer := false ;
8988: LD_ADDR_EXP 78
8992: PUSH
8993: LD_INT 0
8995: ST_TO_ADDR
// s30 := false ;
8996: LD_ADDR_EXP 79
9000: PUSH
9001: LD_INT 0
9003: ST_TO_ADDR
// s60 := false ;
9004: LD_ADDR_EXP 80
9008: PUSH
9009: LD_INT 0
9011: ST_TO_ADDR
// end ;
9012: LD_VAR 0 1
9016: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
9017: LD_INT 0
9019: PPUSH
9020: PPUSH
9021: PPUSH
9022: PPUSH
9023: PPUSH
// result := [ ] ;
9024: LD_ADDR_VAR 0 1
9028: PUSH
9029: EMPTY
9030: ST_TO_ADDR
// if campaign_id = 1 then
9031: LD_OWVAR 69
9035: PUSH
9036: LD_INT 1
9038: EQUAL
9039: IFFALSE 12205
// begin case mission_number of 1 :
9041: LD_OWVAR 70
9045: PUSH
9046: LD_INT 1
9048: DOUBLE
9049: EQUAL
9050: IFTRUE 9054
9052: GO 9130
9054: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
9055: LD_ADDR_VAR 0 1
9059: PUSH
9060: LD_INT 2
9062: PUSH
9063: LD_INT 4
9065: PUSH
9066: LD_INT 11
9068: PUSH
9069: LD_INT 12
9071: PUSH
9072: LD_INT 15
9074: PUSH
9075: LD_INT 16
9077: PUSH
9078: LD_INT 22
9080: PUSH
9081: LD_INT 23
9083: PUSH
9084: LD_INT 26
9086: PUSH
9087: EMPTY
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: LIST
9097: PUSH
9098: LD_INT 101
9100: PUSH
9101: LD_INT 102
9103: PUSH
9104: LD_INT 106
9106: PUSH
9107: LD_INT 116
9109: PUSH
9110: LD_INT 117
9112: PUSH
9113: LD_INT 118
9115: PUSH
9116: EMPTY
9117: LIST
9118: LIST
9119: LIST
9120: LIST
9121: LIST
9122: LIST
9123: PUSH
9124: EMPTY
9125: LIST
9126: LIST
9127: ST_TO_ADDR
9128: GO 12203
9130: LD_INT 2
9132: DOUBLE
9133: EQUAL
9134: IFTRUE 9138
9136: GO 9222
9138: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9139: LD_ADDR_VAR 0 1
9143: PUSH
9144: LD_INT 2
9146: PUSH
9147: LD_INT 4
9149: PUSH
9150: LD_INT 11
9152: PUSH
9153: LD_INT 12
9155: PUSH
9156: LD_INT 15
9158: PUSH
9159: LD_INT 16
9161: PUSH
9162: LD_INT 22
9164: PUSH
9165: LD_INT 23
9167: PUSH
9168: LD_INT 26
9170: PUSH
9171: EMPTY
9172: LIST
9173: LIST
9174: LIST
9175: LIST
9176: LIST
9177: LIST
9178: LIST
9179: LIST
9180: LIST
9181: PUSH
9182: LD_INT 101
9184: PUSH
9185: LD_INT 102
9187: PUSH
9188: LD_INT 105
9190: PUSH
9191: LD_INT 106
9193: PUSH
9194: LD_INT 108
9196: PUSH
9197: LD_INT 116
9199: PUSH
9200: LD_INT 117
9202: PUSH
9203: LD_INT 118
9205: PUSH
9206: EMPTY
9207: LIST
9208: LIST
9209: LIST
9210: LIST
9211: LIST
9212: LIST
9213: LIST
9214: LIST
9215: PUSH
9216: EMPTY
9217: LIST
9218: LIST
9219: ST_TO_ADDR
9220: GO 12203
9222: LD_INT 3
9224: DOUBLE
9225: EQUAL
9226: IFTRUE 9230
9228: GO 9318
9230: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9231: LD_ADDR_VAR 0 1
9235: PUSH
9236: LD_INT 2
9238: PUSH
9239: LD_INT 4
9241: PUSH
9242: LD_INT 5
9244: PUSH
9245: LD_INT 11
9247: PUSH
9248: LD_INT 12
9250: PUSH
9251: LD_INT 15
9253: PUSH
9254: LD_INT 16
9256: PUSH
9257: LD_INT 22
9259: PUSH
9260: LD_INT 26
9262: PUSH
9263: LD_INT 36
9265: PUSH
9266: EMPTY
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: LIST
9273: LIST
9274: LIST
9275: LIST
9276: LIST
9277: PUSH
9278: LD_INT 101
9280: PUSH
9281: LD_INT 102
9283: PUSH
9284: LD_INT 105
9286: PUSH
9287: LD_INT 106
9289: PUSH
9290: LD_INT 108
9292: PUSH
9293: LD_INT 116
9295: PUSH
9296: LD_INT 117
9298: PUSH
9299: LD_INT 118
9301: PUSH
9302: EMPTY
9303: LIST
9304: LIST
9305: LIST
9306: LIST
9307: LIST
9308: LIST
9309: LIST
9310: LIST
9311: PUSH
9312: EMPTY
9313: LIST
9314: LIST
9315: ST_TO_ADDR
9316: GO 12203
9318: LD_INT 4
9320: DOUBLE
9321: EQUAL
9322: IFTRUE 9326
9324: GO 9422
9326: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9327: LD_ADDR_VAR 0 1
9331: PUSH
9332: LD_INT 2
9334: PUSH
9335: LD_INT 4
9337: PUSH
9338: LD_INT 5
9340: PUSH
9341: LD_INT 8
9343: PUSH
9344: LD_INT 11
9346: PUSH
9347: LD_INT 12
9349: PUSH
9350: LD_INT 15
9352: PUSH
9353: LD_INT 16
9355: PUSH
9356: LD_INT 22
9358: PUSH
9359: LD_INT 23
9361: PUSH
9362: LD_INT 26
9364: PUSH
9365: LD_INT 36
9367: PUSH
9368: EMPTY
9369: LIST
9370: LIST
9371: LIST
9372: LIST
9373: LIST
9374: LIST
9375: LIST
9376: LIST
9377: LIST
9378: LIST
9379: LIST
9380: LIST
9381: PUSH
9382: LD_INT 101
9384: PUSH
9385: LD_INT 102
9387: PUSH
9388: LD_INT 105
9390: PUSH
9391: LD_INT 106
9393: PUSH
9394: LD_INT 108
9396: PUSH
9397: LD_INT 116
9399: PUSH
9400: LD_INT 117
9402: PUSH
9403: LD_INT 118
9405: PUSH
9406: EMPTY
9407: LIST
9408: LIST
9409: LIST
9410: LIST
9411: LIST
9412: LIST
9413: LIST
9414: LIST
9415: PUSH
9416: EMPTY
9417: LIST
9418: LIST
9419: ST_TO_ADDR
9420: GO 12203
9422: LD_INT 5
9424: DOUBLE
9425: EQUAL
9426: IFTRUE 9430
9428: GO 9542
9430: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9431: LD_ADDR_VAR 0 1
9435: PUSH
9436: LD_INT 2
9438: PUSH
9439: LD_INT 4
9441: PUSH
9442: LD_INT 5
9444: PUSH
9445: LD_INT 6
9447: PUSH
9448: LD_INT 8
9450: PUSH
9451: LD_INT 11
9453: PUSH
9454: LD_INT 12
9456: PUSH
9457: LD_INT 15
9459: PUSH
9460: LD_INT 16
9462: PUSH
9463: LD_INT 22
9465: PUSH
9466: LD_INT 23
9468: PUSH
9469: LD_INT 25
9471: PUSH
9472: LD_INT 26
9474: PUSH
9475: LD_INT 36
9477: PUSH
9478: EMPTY
9479: LIST
9480: LIST
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: PUSH
9494: LD_INT 101
9496: PUSH
9497: LD_INT 102
9499: PUSH
9500: LD_INT 105
9502: PUSH
9503: LD_INT 106
9505: PUSH
9506: LD_INT 108
9508: PUSH
9509: LD_INT 109
9511: PUSH
9512: LD_INT 112
9514: PUSH
9515: LD_INT 116
9517: PUSH
9518: LD_INT 117
9520: PUSH
9521: LD_INT 118
9523: PUSH
9524: EMPTY
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: LIST
9530: LIST
9531: LIST
9532: LIST
9533: LIST
9534: LIST
9535: PUSH
9536: EMPTY
9537: LIST
9538: LIST
9539: ST_TO_ADDR
9540: GO 12203
9542: LD_INT 6
9544: DOUBLE
9545: EQUAL
9546: IFTRUE 9550
9548: GO 9682
9550: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
9551: LD_ADDR_VAR 0 1
9555: PUSH
9556: LD_INT 2
9558: PUSH
9559: LD_INT 4
9561: PUSH
9562: LD_INT 5
9564: PUSH
9565: LD_INT 6
9567: PUSH
9568: LD_INT 8
9570: PUSH
9571: LD_INT 11
9573: PUSH
9574: LD_INT 12
9576: PUSH
9577: LD_INT 15
9579: PUSH
9580: LD_INT 16
9582: PUSH
9583: LD_INT 20
9585: PUSH
9586: LD_INT 21
9588: PUSH
9589: LD_INT 22
9591: PUSH
9592: LD_INT 23
9594: PUSH
9595: LD_INT 25
9597: PUSH
9598: LD_INT 26
9600: PUSH
9601: LD_INT 30
9603: PUSH
9604: LD_INT 31
9606: PUSH
9607: LD_INT 32
9609: PUSH
9610: LD_INT 36
9612: PUSH
9613: EMPTY
9614: LIST
9615: LIST
9616: LIST
9617: LIST
9618: LIST
9619: LIST
9620: LIST
9621: LIST
9622: LIST
9623: LIST
9624: LIST
9625: LIST
9626: LIST
9627: LIST
9628: LIST
9629: LIST
9630: LIST
9631: LIST
9632: LIST
9633: PUSH
9634: LD_INT 101
9636: PUSH
9637: LD_INT 102
9639: PUSH
9640: LD_INT 105
9642: PUSH
9643: LD_INT 106
9645: PUSH
9646: LD_INT 108
9648: PUSH
9649: LD_INT 109
9651: PUSH
9652: LD_INT 112
9654: PUSH
9655: LD_INT 116
9657: PUSH
9658: LD_INT 117
9660: PUSH
9661: LD_INT 118
9663: PUSH
9664: EMPTY
9665: LIST
9666: LIST
9667: LIST
9668: LIST
9669: LIST
9670: LIST
9671: LIST
9672: LIST
9673: LIST
9674: LIST
9675: PUSH
9676: EMPTY
9677: LIST
9678: LIST
9679: ST_TO_ADDR
9680: GO 12203
9682: LD_INT 7
9684: DOUBLE
9685: EQUAL
9686: IFTRUE 9690
9688: GO 9802
9690: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
9691: LD_ADDR_VAR 0 1
9695: PUSH
9696: LD_INT 2
9698: PUSH
9699: LD_INT 4
9701: PUSH
9702: LD_INT 5
9704: PUSH
9705: LD_INT 7
9707: PUSH
9708: LD_INT 11
9710: PUSH
9711: LD_INT 12
9713: PUSH
9714: LD_INT 15
9716: PUSH
9717: LD_INT 16
9719: PUSH
9720: LD_INT 20
9722: PUSH
9723: LD_INT 21
9725: PUSH
9726: LD_INT 22
9728: PUSH
9729: LD_INT 23
9731: PUSH
9732: LD_INT 25
9734: PUSH
9735: LD_INT 26
9737: PUSH
9738: EMPTY
9739: LIST
9740: LIST
9741: LIST
9742: LIST
9743: LIST
9744: LIST
9745: LIST
9746: LIST
9747: LIST
9748: LIST
9749: LIST
9750: LIST
9751: LIST
9752: LIST
9753: PUSH
9754: LD_INT 101
9756: PUSH
9757: LD_INT 102
9759: PUSH
9760: LD_INT 103
9762: PUSH
9763: LD_INT 105
9765: PUSH
9766: LD_INT 106
9768: PUSH
9769: LD_INT 108
9771: PUSH
9772: LD_INT 112
9774: PUSH
9775: LD_INT 116
9777: PUSH
9778: LD_INT 117
9780: PUSH
9781: LD_INT 118
9783: PUSH
9784: EMPTY
9785: LIST
9786: LIST
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: PUSH
9796: EMPTY
9797: LIST
9798: LIST
9799: ST_TO_ADDR
9800: GO 12203
9802: LD_INT 8
9804: DOUBLE
9805: EQUAL
9806: IFTRUE 9810
9808: GO 9950
9810: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
9811: LD_ADDR_VAR 0 1
9815: PUSH
9816: LD_INT 2
9818: PUSH
9819: LD_INT 4
9821: PUSH
9822: LD_INT 5
9824: PUSH
9825: LD_INT 6
9827: PUSH
9828: LD_INT 7
9830: PUSH
9831: LD_INT 8
9833: PUSH
9834: LD_INT 11
9836: PUSH
9837: LD_INT 12
9839: PUSH
9840: LD_INT 15
9842: PUSH
9843: LD_INT 16
9845: PUSH
9846: LD_INT 20
9848: PUSH
9849: LD_INT 21
9851: PUSH
9852: LD_INT 22
9854: PUSH
9855: LD_INT 23
9857: PUSH
9858: LD_INT 25
9860: PUSH
9861: LD_INT 26
9863: PUSH
9864: LD_INT 30
9866: PUSH
9867: LD_INT 31
9869: PUSH
9870: LD_INT 32
9872: PUSH
9873: LD_INT 36
9875: PUSH
9876: EMPTY
9877: LIST
9878: LIST
9879: LIST
9880: LIST
9881: LIST
9882: LIST
9883: LIST
9884: LIST
9885: LIST
9886: LIST
9887: LIST
9888: LIST
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: PUSH
9898: LD_INT 101
9900: PUSH
9901: LD_INT 102
9903: PUSH
9904: LD_INT 103
9906: PUSH
9907: LD_INT 105
9909: PUSH
9910: LD_INT 106
9912: PUSH
9913: LD_INT 108
9915: PUSH
9916: LD_INT 109
9918: PUSH
9919: LD_INT 112
9921: PUSH
9922: LD_INT 116
9924: PUSH
9925: LD_INT 117
9927: PUSH
9928: LD_INT 118
9930: PUSH
9931: EMPTY
9932: LIST
9933: LIST
9934: LIST
9935: LIST
9936: LIST
9937: LIST
9938: LIST
9939: LIST
9940: LIST
9941: LIST
9942: LIST
9943: PUSH
9944: EMPTY
9945: LIST
9946: LIST
9947: ST_TO_ADDR
9948: GO 12203
9950: LD_INT 9
9952: DOUBLE
9953: EQUAL
9954: IFTRUE 9958
9956: GO 10106
9958: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
9959: LD_ADDR_VAR 0 1
9963: PUSH
9964: LD_INT 2
9966: PUSH
9967: LD_INT 4
9969: PUSH
9970: LD_INT 5
9972: PUSH
9973: LD_INT 6
9975: PUSH
9976: LD_INT 7
9978: PUSH
9979: LD_INT 8
9981: PUSH
9982: LD_INT 11
9984: PUSH
9985: LD_INT 12
9987: PUSH
9988: LD_INT 15
9990: PUSH
9991: LD_INT 16
9993: PUSH
9994: LD_INT 20
9996: PUSH
9997: LD_INT 21
9999: PUSH
10000: LD_INT 22
10002: PUSH
10003: LD_INT 23
10005: PUSH
10006: LD_INT 25
10008: PUSH
10009: LD_INT 26
10011: PUSH
10012: LD_INT 28
10014: PUSH
10015: LD_INT 30
10017: PUSH
10018: LD_INT 31
10020: PUSH
10021: LD_INT 32
10023: PUSH
10024: LD_INT 36
10026: PUSH
10027: EMPTY
10028: LIST
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: LIST
10034: LIST
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: LIST
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: LIST
10046: LIST
10047: LIST
10048: LIST
10049: PUSH
10050: LD_INT 101
10052: PUSH
10053: LD_INT 102
10055: PUSH
10056: LD_INT 103
10058: PUSH
10059: LD_INT 105
10061: PUSH
10062: LD_INT 106
10064: PUSH
10065: LD_INT 108
10067: PUSH
10068: LD_INT 109
10070: PUSH
10071: LD_INT 112
10073: PUSH
10074: LD_INT 114
10076: PUSH
10077: LD_INT 116
10079: PUSH
10080: LD_INT 117
10082: PUSH
10083: LD_INT 118
10085: PUSH
10086: EMPTY
10087: LIST
10088: LIST
10089: LIST
10090: LIST
10091: LIST
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: LIST
10097: LIST
10098: LIST
10099: PUSH
10100: EMPTY
10101: LIST
10102: LIST
10103: ST_TO_ADDR
10104: GO 12203
10106: LD_INT 10
10108: DOUBLE
10109: EQUAL
10110: IFTRUE 10114
10112: GO 10310
10114: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10115: LD_ADDR_VAR 0 1
10119: PUSH
10120: LD_INT 2
10122: PUSH
10123: LD_INT 4
10125: PUSH
10126: LD_INT 5
10128: PUSH
10129: LD_INT 6
10131: PUSH
10132: LD_INT 7
10134: PUSH
10135: LD_INT 8
10137: PUSH
10138: LD_INT 9
10140: PUSH
10141: LD_INT 10
10143: PUSH
10144: LD_INT 11
10146: PUSH
10147: LD_INT 12
10149: PUSH
10150: LD_INT 13
10152: PUSH
10153: LD_INT 14
10155: PUSH
10156: LD_INT 15
10158: PUSH
10159: LD_INT 16
10161: PUSH
10162: LD_INT 17
10164: PUSH
10165: LD_INT 18
10167: PUSH
10168: LD_INT 19
10170: PUSH
10171: LD_INT 20
10173: PUSH
10174: LD_INT 21
10176: PUSH
10177: LD_INT 22
10179: PUSH
10180: LD_INT 23
10182: PUSH
10183: LD_INT 24
10185: PUSH
10186: LD_INT 25
10188: PUSH
10189: LD_INT 26
10191: PUSH
10192: LD_INT 28
10194: PUSH
10195: LD_INT 30
10197: PUSH
10198: LD_INT 31
10200: PUSH
10201: LD_INT 32
10203: PUSH
10204: LD_INT 36
10206: PUSH
10207: EMPTY
10208: LIST
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: LIST
10215: LIST
10216: LIST
10217: LIST
10218: LIST
10219: LIST
10220: LIST
10221: LIST
10222: LIST
10223: LIST
10224: LIST
10225: LIST
10226: LIST
10227: LIST
10228: LIST
10229: LIST
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: LIST
10236: LIST
10237: PUSH
10238: LD_INT 101
10240: PUSH
10241: LD_INT 102
10243: PUSH
10244: LD_INT 103
10246: PUSH
10247: LD_INT 104
10249: PUSH
10250: LD_INT 105
10252: PUSH
10253: LD_INT 106
10255: PUSH
10256: LD_INT 107
10258: PUSH
10259: LD_INT 108
10261: PUSH
10262: LD_INT 109
10264: PUSH
10265: LD_INT 110
10267: PUSH
10268: LD_INT 111
10270: PUSH
10271: LD_INT 112
10273: PUSH
10274: LD_INT 114
10276: PUSH
10277: LD_INT 116
10279: PUSH
10280: LD_INT 117
10282: PUSH
10283: LD_INT 118
10285: PUSH
10286: EMPTY
10287: LIST
10288: LIST
10289: LIST
10290: LIST
10291: LIST
10292: LIST
10293: LIST
10294: LIST
10295: LIST
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: PUSH
10304: EMPTY
10305: LIST
10306: LIST
10307: ST_TO_ADDR
10308: GO 12203
10310: LD_INT 11
10312: DOUBLE
10313: EQUAL
10314: IFTRUE 10318
10316: GO 10522
10318: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10319: LD_ADDR_VAR 0 1
10323: PUSH
10324: LD_INT 2
10326: PUSH
10327: LD_INT 3
10329: PUSH
10330: LD_INT 4
10332: PUSH
10333: LD_INT 5
10335: PUSH
10336: LD_INT 6
10338: PUSH
10339: LD_INT 7
10341: PUSH
10342: LD_INT 8
10344: PUSH
10345: LD_INT 9
10347: PUSH
10348: LD_INT 10
10350: PUSH
10351: LD_INT 11
10353: PUSH
10354: LD_INT 12
10356: PUSH
10357: LD_INT 13
10359: PUSH
10360: LD_INT 14
10362: PUSH
10363: LD_INT 15
10365: PUSH
10366: LD_INT 16
10368: PUSH
10369: LD_INT 17
10371: PUSH
10372: LD_INT 18
10374: PUSH
10375: LD_INT 19
10377: PUSH
10378: LD_INT 20
10380: PUSH
10381: LD_INT 21
10383: PUSH
10384: LD_INT 22
10386: PUSH
10387: LD_INT 23
10389: PUSH
10390: LD_INT 24
10392: PUSH
10393: LD_INT 25
10395: PUSH
10396: LD_INT 26
10398: PUSH
10399: LD_INT 28
10401: PUSH
10402: LD_INT 30
10404: PUSH
10405: LD_INT 31
10407: PUSH
10408: LD_INT 32
10410: PUSH
10411: LD_INT 34
10413: PUSH
10414: LD_INT 36
10416: PUSH
10417: EMPTY
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: LIST
10442: LIST
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: PUSH
10450: LD_INT 101
10452: PUSH
10453: LD_INT 102
10455: PUSH
10456: LD_INT 103
10458: PUSH
10459: LD_INT 104
10461: PUSH
10462: LD_INT 105
10464: PUSH
10465: LD_INT 106
10467: PUSH
10468: LD_INT 107
10470: PUSH
10471: LD_INT 108
10473: PUSH
10474: LD_INT 109
10476: PUSH
10477: LD_INT 110
10479: PUSH
10480: LD_INT 111
10482: PUSH
10483: LD_INT 112
10485: PUSH
10486: LD_INT 114
10488: PUSH
10489: LD_INT 116
10491: PUSH
10492: LD_INT 117
10494: PUSH
10495: LD_INT 118
10497: PUSH
10498: EMPTY
10499: LIST
10500: LIST
10501: LIST
10502: LIST
10503: LIST
10504: LIST
10505: LIST
10506: LIST
10507: LIST
10508: LIST
10509: LIST
10510: LIST
10511: LIST
10512: LIST
10513: LIST
10514: LIST
10515: PUSH
10516: EMPTY
10517: LIST
10518: LIST
10519: ST_TO_ADDR
10520: GO 12203
10522: LD_INT 12
10524: DOUBLE
10525: EQUAL
10526: IFTRUE 10530
10528: GO 10750
10530: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
10531: LD_ADDR_VAR 0 1
10535: PUSH
10536: LD_INT 1
10538: PUSH
10539: LD_INT 2
10541: PUSH
10542: LD_INT 3
10544: PUSH
10545: LD_INT 4
10547: PUSH
10548: LD_INT 5
10550: PUSH
10551: LD_INT 6
10553: PUSH
10554: LD_INT 7
10556: PUSH
10557: LD_INT 8
10559: PUSH
10560: LD_INT 9
10562: PUSH
10563: LD_INT 10
10565: PUSH
10566: LD_INT 11
10568: PUSH
10569: LD_INT 12
10571: PUSH
10572: LD_INT 13
10574: PUSH
10575: LD_INT 14
10577: PUSH
10578: LD_INT 15
10580: PUSH
10581: LD_INT 16
10583: PUSH
10584: LD_INT 17
10586: PUSH
10587: LD_INT 18
10589: PUSH
10590: LD_INT 19
10592: PUSH
10593: LD_INT 20
10595: PUSH
10596: LD_INT 21
10598: PUSH
10599: LD_INT 22
10601: PUSH
10602: LD_INT 23
10604: PUSH
10605: LD_INT 24
10607: PUSH
10608: LD_INT 25
10610: PUSH
10611: LD_INT 26
10613: PUSH
10614: LD_INT 27
10616: PUSH
10617: LD_INT 28
10619: PUSH
10620: LD_INT 30
10622: PUSH
10623: LD_INT 31
10625: PUSH
10626: LD_INT 32
10628: PUSH
10629: LD_INT 33
10631: PUSH
10632: LD_INT 34
10634: PUSH
10635: LD_INT 36
10637: PUSH
10638: EMPTY
10639: LIST
10640: LIST
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: LIST
10673: PUSH
10674: LD_INT 101
10676: PUSH
10677: LD_INT 102
10679: PUSH
10680: LD_INT 103
10682: PUSH
10683: LD_INT 104
10685: PUSH
10686: LD_INT 105
10688: PUSH
10689: LD_INT 106
10691: PUSH
10692: LD_INT 107
10694: PUSH
10695: LD_INT 108
10697: PUSH
10698: LD_INT 109
10700: PUSH
10701: LD_INT 110
10703: PUSH
10704: LD_INT 111
10706: PUSH
10707: LD_INT 112
10709: PUSH
10710: LD_INT 113
10712: PUSH
10713: LD_INT 114
10715: PUSH
10716: LD_INT 116
10718: PUSH
10719: LD_INT 117
10721: PUSH
10722: LD_INT 118
10724: PUSH
10725: EMPTY
10726: LIST
10727: LIST
10728: LIST
10729: LIST
10730: LIST
10731: LIST
10732: LIST
10733: LIST
10734: LIST
10735: LIST
10736: LIST
10737: LIST
10738: LIST
10739: LIST
10740: LIST
10741: LIST
10742: LIST
10743: PUSH
10744: EMPTY
10745: LIST
10746: LIST
10747: ST_TO_ADDR
10748: GO 12203
10750: LD_INT 13
10752: DOUBLE
10753: EQUAL
10754: IFTRUE 10758
10756: GO 10966
10758: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
10759: LD_ADDR_VAR 0 1
10763: PUSH
10764: LD_INT 1
10766: PUSH
10767: LD_INT 2
10769: PUSH
10770: LD_INT 3
10772: PUSH
10773: LD_INT 4
10775: PUSH
10776: LD_INT 5
10778: PUSH
10779: LD_INT 8
10781: PUSH
10782: LD_INT 9
10784: PUSH
10785: LD_INT 10
10787: PUSH
10788: LD_INT 11
10790: PUSH
10791: LD_INT 12
10793: PUSH
10794: LD_INT 14
10796: PUSH
10797: LD_INT 15
10799: PUSH
10800: LD_INT 16
10802: PUSH
10803: LD_INT 17
10805: PUSH
10806: LD_INT 18
10808: PUSH
10809: LD_INT 19
10811: PUSH
10812: LD_INT 20
10814: PUSH
10815: LD_INT 21
10817: PUSH
10818: LD_INT 22
10820: PUSH
10821: LD_INT 23
10823: PUSH
10824: LD_INT 24
10826: PUSH
10827: LD_INT 25
10829: PUSH
10830: LD_INT 26
10832: PUSH
10833: LD_INT 27
10835: PUSH
10836: LD_INT 28
10838: PUSH
10839: LD_INT 30
10841: PUSH
10842: LD_INT 31
10844: PUSH
10845: LD_INT 32
10847: PUSH
10848: LD_INT 33
10850: PUSH
10851: LD_INT 34
10853: PUSH
10854: LD_INT 36
10856: PUSH
10857: EMPTY
10858: LIST
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: LIST
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: PUSH
10890: LD_INT 101
10892: PUSH
10893: LD_INT 102
10895: PUSH
10896: LD_INT 103
10898: PUSH
10899: LD_INT 104
10901: PUSH
10902: LD_INT 105
10904: PUSH
10905: LD_INT 106
10907: PUSH
10908: LD_INT 107
10910: PUSH
10911: LD_INT 108
10913: PUSH
10914: LD_INT 109
10916: PUSH
10917: LD_INT 110
10919: PUSH
10920: LD_INT 111
10922: PUSH
10923: LD_INT 112
10925: PUSH
10926: LD_INT 113
10928: PUSH
10929: LD_INT 114
10931: PUSH
10932: LD_INT 116
10934: PUSH
10935: LD_INT 117
10937: PUSH
10938: LD_INT 118
10940: PUSH
10941: EMPTY
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: LIST
10951: LIST
10952: LIST
10953: LIST
10954: LIST
10955: LIST
10956: LIST
10957: LIST
10958: LIST
10959: PUSH
10960: EMPTY
10961: LIST
10962: LIST
10963: ST_TO_ADDR
10964: GO 12203
10966: LD_INT 14
10968: DOUBLE
10969: EQUAL
10970: IFTRUE 10974
10972: GO 11198
10974: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
10975: LD_ADDR_VAR 0 1
10979: PUSH
10980: LD_INT 1
10982: PUSH
10983: LD_INT 2
10985: PUSH
10986: LD_INT 3
10988: PUSH
10989: LD_INT 4
10991: PUSH
10992: LD_INT 5
10994: PUSH
10995: LD_INT 6
10997: PUSH
10998: LD_INT 7
11000: PUSH
11001: LD_INT 8
11003: PUSH
11004: LD_INT 9
11006: PUSH
11007: LD_INT 10
11009: PUSH
11010: LD_INT 11
11012: PUSH
11013: LD_INT 12
11015: PUSH
11016: LD_INT 13
11018: PUSH
11019: LD_INT 14
11021: PUSH
11022: LD_INT 15
11024: PUSH
11025: LD_INT 16
11027: PUSH
11028: LD_INT 17
11030: PUSH
11031: LD_INT 18
11033: PUSH
11034: LD_INT 19
11036: PUSH
11037: LD_INT 20
11039: PUSH
11040: LD_INT 21
11042: PUSH
11043: LD_INT 22
11045: PUSH
11046: LD_INT 23
11048: PUSH
11049: LD_INT 24
11051: PUSH
11052: LD_INT 25
11054: PUSH
11055: LD_INT 26
11057: PUSH
11058: LD_INT 27
11060: PUSH
11061: LD_INT 28
11063: PUSH
11064: LD_INT 29
11066: PUSH
11067: LD_INT 30
11069: PUSH
11070: LD_INT 31
11072: PUSH
11073: LD_INT 32
11075: PUSH
11076: LD_INT 33
11078: PUSH
11079: LD_INT 34
11081: PUSH
11082: LD_INT 36
11084: PUSH
11085: EMPTY
11086: LIST
11087: LIST
11088: LIST
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: LIST
11097: LIST
11098: LIST
11099: LIST
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: PUSH
11122: LD_INT 101
11124: PUSH
11125: LD_INT 102
11127: PUSH
11128: LD_INT 103
11130: PUSH
11131: LD_INT 104
11133: PUSH
11134: LD_INT 105
11136: PUSH
11137: LD_INT 106
11139: PUSH
11140: LD_INT 107
11142: PUSH
11143: LD_INT 108
11145: PUSH
11146: LD_INT 109
11148: PUSH
11149: LD_INT 110
11151: PUSH
11152: LD_INT 111
11154: PUSH
11155: LD_INT 112
11157: PUSH
11158: LD_INT 113
11160: PUSH
11161: LD_INT 114
11163: PUSH
11164: LD_INT 116
11166: PUSH
11167: LD_INT 117
11169: PUSH
11170: LD_INT 118
11172: PUSH
11173: EMPTY
11174: LIST
11175: LIST
11176: LIST
11177: LIST
11178: LIST
11179: LIST
11180: LIST
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: PUSH
11192: EMPTY
11193: LIST
11194: LIST
11195: ST_TO_ADDR
11196: GO 12203
11198: LD_INT 15
11200: DOUBLE
11201: EQUAL
11202: IFTRUE 11206
11204: GO 11430
11206: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11207: LD_ADDR_VAR 0 1
11211: PUSH
11212: LD_INT 1
11214: PUSH
11215: LD_INT 2
11217: PUSH
11218: LD_INT 3
11220: PUSH
11221: LD_INT 4
11223: PUSH
11224: LD_INT 5
11226: PUSH
11227: LD_INT 6
11229: PUSH
11230: LD_INT 7
11232: PUSH
11233: LD_INT 8
11235: PUSH
11236: LD_INT 9
11238: PUSH
11239: LD_INT 10
11241: PUSH
11242: LD_INT 11
11244: PUSH
11245: LD_INT 12
11247: PUSH
11248: LD_INT 13
11250: PUSH
11251: LD_INT 14
11253: PUSH
11254: LD_INT 15
11256: PUSH
11257: LD_INT 16
11259: PUSH
11260: LD_INT 17
11262: PUSH
11263: LD_INT 18
11265: PUSH
11266: LD_INT 19
11268: PUSH
11269: LD_INT 20
11271: PUSH
11272: LD_INT 21
11274: PUSH
11275: LD_INT 22
11277: PUSH
11278: LD_INT 23
11280: PUSH
11281: LD_INT 24
11283: PUSH
11284: LD_INT 25
11286: PUSH
11287: LD_INT 26
11289: PUSH
11290: LD_INT 27
11292: PUSH
11293: LD_INT 28
11295: PUSH
11296: LD_INT 29
11298: PUSH
11299: LD_INT 30
11301: PUSH
11302: LD_INT 31
11304: PUSH
11305: LD_INT 32
11307: PUSH
11308: LD_INT 33
11310: PUSH
11311: LD_INT 34
11313: PUSH
11314: LD_INT 36
11316: PUSH
11317: EMPTY
11318: LIST
11319: LIST
11320: LIST
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: PUSH
11354: LD_INT 101
11356: PUSH
11357: LD_INT 102
11359: PUSH
11360: LD_INT 103
11362: PUSH
11363: LD_INT 104
11365: PUSH
11366: LD_INT 105
11368: PUSH
11369: LD_INT 106
11371: PUSH
11372: LD_INT 107
11374: PUSH
11375: LD_INT 108
11377: PUSH
11378: LD_INT 109
11380: PUSH
11381: LD_INT 110
11383: PUSH
11384: LD_INT 111
11386: PUSH
11387: LD_INT 112
11389: PUSH
11390: LD_INT 113
11392: PUSH
11393: LD_INT 114
11395: PUSH
11396: LD_INT 116
11398: PUSH
11399: LD_INT 117
11401: PUSH
11402: LD_INT 118
11404: PUSH
11405: EMPTY
11406: LIST
11407: LIST
11408: LIST
11409: LIST
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: LIST
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: PUSH
11424: EMPTY
11425: LIST
11426: LIST
11427: ST_TO_ADDR
11428: GO 12203
11430: LD_INT 16
11432: DOUBLE
11433: EQUAL
11434: IFTRUE 11438
11436: GO 11574
11438: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11439: LD_ADDR_VAR 0 1
11443: PUSH
11444: LD_INT 2
11446: PUSH
11447: LD_INT 4
11449: PUSH
11450: LD_INT 5
11452: PUSH
11453: LD_INT 7
11455: PUSH
11456: LD_INT 11
11458: PUSH
11459: LD_INT 12
11461: PUSH
11462: LD_INT 15
11464: PUSH
11465: LD_INT 16
11467: PUSH
11468: LD_INT 20
11470: PUSH
11471: LD_INT 21
11473: PUSH
11474: LD_INT 22
11476: PUSH
11477: LD_INT 23
11479: PUSH
11480: LD_INT 25
11482: PUSH
11483: LD_INT 26
11485: PUSH
11486: LD_INT 30
11488: PUSH
11489: LD_INT 31
11491: PUSH
11492: LD_INT 32
11494: PUSH
11495: LD_INT 33
11497: PUSH
11498: LD_INT 34
11500: PUSH
11501: EMPTY
11502: LIST
11503: LIST
11504: LIST
11505: LIST
11506: LIST
11507: LIST
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: PUSH
11522: LD_INT 101
11524: PUSH
11525: LD_INT 102
11527: PUSH
11528: LD_INT 103
11530: PUSH
11531: LD_INT 106
11533: PUSH
11534: LD_INT 108
11536: PUSH
11537: LD_INT 112
11539: PUSH
11540: LD_INT 113
11542: PUSH
11543: LD_INT 114
11545: PUSH
11546: LD_INT 116
11548: PUSH
11549: LD_INT 117
11551: PUSH
11552: LD_INT 118
11554: PUSH
11555: EMPTY
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: LIST
11561: LIST
11562: LIST
11563: LIST
11564: LIST
11565: LIST
11566: LIST
11567: PUSH
11568: EMPTY
11569: LIST
11570: LIST
11571: ST_TO_ADDR
11572: GO 12203
11574: LD_INT 17
11576: DOUBLE
11577: EQUAL
11578: IFTRUE 11582
11580: GO 11806
11582: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
11583: LD_ADDR_VAR 0 1
11587: PUSH
11588: LD_INT 1
11590: PUSH
11591: LD_INT 2
11593: PUSH
11594: LD_INT 3
11596: PUSH
11597: LD_INT 4
11599: PUSH
11600: LD_INT 5
11602: PUSH
11603: LD_INT 6
11605: PUSH
11606: LD_INT 7
11608: PUSH
11609: LD_INT 8
11611: PUSH
11612: LD_INT 9
11614: PUSH
11615: LD_INT 10
11617: PUSH
11618: LD_INT 11
11620: PUSH
11621: LD_INT 12
11623: PUSH
11624: LD_INT 13
11626: PUSH
11627: LD_INT 14
11629: PUSH
11630: LD_INT 15
11632: PUSH
11633: LD_INT 16
11635: PUSH
11636: LD_INT 17
11638: PUSH
11639: LD_INT 18
11641: PUSH
11642: LD_INT 19
11644: PUSH
11645: LD_INT 20
11647: PUSH
11648: LD_INT 21
11650: PUSH
11651: LD_INT 22
11653: PUSH
11654: LD_INT 23
11656: PUSH
11657: LD_INT 24
11659: PUSH
11660: LD_INT 25
11662: PUSH
11663: LD_INT 26
11665: PUSH
11666: LD_INT 27
11668: PUSH
11669: LD_INT 28
11671: PUSH
11672: LD_INT 29
11674: PUSH
11675: LD_INT 30
11677: PUSH
11678: LD_INT 31
11680: PUSH
11681: LD_INT 32
11683: PUSH
11684: LD_INT 33
11686: PUSH
11687: LD_INT 34
11689: PUSH
11690: LD_INT 36
11692: PUSH
11693: EMPTY
11694: LIST
11695: LIST
11696: LIST
11697: LIST
11698: LIST
11699: LIST
11700: LIST
11701: LIST
11702: LIST
11703: LIST
11704: LIST
11705: LIST
11706: LIST
11707: LIST
11708: LIST
11709: LIST
11710: LIST
11711: LIST
11712: LIST
11713: LIST
11714: LIST
11715: LIST
11716: LIST
11717: LIST
11718: LIST
11719: LIST
11720: LIST
11721: LIST
11722: LIST
11723: LIST
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: PUSH
11730: LD_INT 101
11732: PUSH
11733: LD_INT 102
11735: PUSH
11736: LD_INT 103
11738: PUSH
11739: LD_INT 104
11741: PUSH
11742: LD_INT 105
11744: PUSH
11745: LD_INT 106
11747: PUSH
11748: LD_INT 107
11750: PUSH
11751: LD_INT 108
11753: PUSH
11754: LD_INT 109
11756: PUSH
11757: LD_INT 110
11759: PUSH
11760: LD_INT 111
11762: PUSH
11763: LD_INT 112
11765: PUSH
11766: LD_INT 113
11768: PUSH
11769: LD_INT 114
11771: PUSH
11772: LD_INT 116
11774: PUSH
11775: LD_INT 117
11777: PUSH
11778: LD_INT 118
11780: PUSH
11781: EMPTY
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: PUSH
11800: EMPTY
11801: LIST
11802: LIST
11803: ST_TO_ADDR
11804: GO 12203
11806: LD_INT 18
11808: DOUBLE
11809: EQUAL
11810: IFTRUE 11814
11812: GO 11962
11814: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
11815: LD_ADDR_VAR 0 1
11819: PUSH
11820: LD_INT 2
11822: PUSH
11823: LD_INT 4
11825: PUSH
11826: LD_INT 5
11828: PUSH
11829: LD_INT 7
11831: PUSH
11832: LD_INT 11
11834: PUSH
11835: LD_INT 12
11837: PUSH
11838: LD_INT 15
11840: PUSH
11841: LD_INT 16
11843: PUSH
11844: LD_INT 20
11846: PUSH
11847: LD_INT 21
11849: PUSH
11850: LD_INT 22
11852: PUSH
11853: LD_INT 23
11855: PUSH
11856: LD_INT 25
11858: PUSH
11859: LD_INT 26
11861: PUSH
11862: LD_INT 30
11864: PUSH
11865: LD_INT 31
11867: PUSH
11868: LD_INT 32
11870: PUSH
11871: LD_INT 33
11873: PUSH
11874: LD_INT 34
11876: PUSH
11877: LD_INT 35
11879: PUSH
11880: LD_INT 36
11882: PUSH
11883: EMPTY
11884: LIST
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: LIST
11892: LIST
11893: LIST
11894: LIST
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: LIST
11904: LIST
11905: PUSH
11906: LD_INT 101
11908: PUSH
11909: LD_INT 102
11911: PUSH
11912: LD_INT 103
11914: PUSH
11915: LD_INT 106
11917: PUSH
11918: LD_INT 108
11920: PUSH
11921: LD_INT 112
11923: PUSH
11924: LD_INT 113
11926: PUSH
11927: LD_INT 114
11929: PUSH
11930: LD_INT 115
11932: PUSH
11933: LD_INT 116
11935: PUSH
11936: LD_INT 117
11938: PUSH
11939: LD_INT 118
11941: PUSH
11942: EMPTY
11943: LIST
11944: LIST
11945: LIST
11946: LIST
11947: LIST
11948: LIST
11949: LIST
11950: LIST
11951: LIST
11952: LIST
11953: LIST
11954: LIST
11955: PUSH
11956: EMPTY
11957: LIST
11958: LIST
11959: ST_TO_ADDR
11960: GO 12203
11962: LD_INT 19
11964: DOUBLE
11965: EQUAL
11966: IFTRUE 11970
11968: GO 12202
11970: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
11971: LD_ADDR_VAR 0 1
11975: PUSH
11976: LD_INT 1
11978: PUSH
11979: LD_INT 2
11981: PUSH
11982: LD_INT 3
11984: PUSH
11985: LD_INT 4
11987: PUSH
11988: LD_INT 5
11990: PUSH
11991: LD_INT 6
11993: PUSH
11994: LD_INT 7
11996: PUSH
11997: LD_INT 8
11999: PUSH
12000: LD_INT 9
12002: PUSH
12003: LD_INT 10
12005: PUSH
12006: LD_INT 11
12008: PUSH
12009: LD_INT 12
12011: PUSH
12012: LD_INT 13
12014: PUSH
12015: LD_INT 14
12017: PUSH
12018: LD_INT 15
12020: PUSH
12021: LD_INT 16
12023: PUSH
12024: LD_INT 17
12026: PUSH
12027: LD_INT 18
12029: PUSH
12030: LD_INT 19
12032: PUSH
12033: LD_INT 20
12035: PUSH
12036: LD_INT 21
12038: PUSH
12039: LD_INT 22
12041: PUSH
12042: LD_INT 23
12044: PUSH
12045: LD_INT 24
12047: PUSH
12048: LD_INT 25
12050: PUSH
12051: LD_INT 26
12053: PUSH
12054: LD_INT 27
12056: PUSH
12057: LD_INT 28
12059: PUSH
12060: LD_INT 29
12062: PUSH
12063: LD_INT 30
12065: PUSH
12066: LD_INT 31
12068: PUSH
12069: LD_INT 32
12071: PUSH
12072: LD_INT 33
12074: PUSH
12075: LD_INT 34
12077: PUSH
12078: LD_INT 35
12080: PUSH
12081: LD_INT 36
12083: PUSH
12084: EMPTY
12085: LIST
12086: LIST
12087: LIST
12088: LIST
12089: LIST
12090: LIST
12091: LIST
12092: LIST
12093: LIST
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: LIST
12117: LIST
12118: LIST
12119: LIST
12120: LIST
12121: PUSH
12122: LD_INT 101
12124: PUSH
12125: LD_INT 102
12127: PUSH
12128: LD_INT 103
12130: PUSH
12131: LD_INT 104
12133: PUSH
12134: LD_INT 105
12136: PUSH
12137: LD_INT 106
12139: PUSH
12140: LD_INT 107
12142: PUSH
12143: LD_INT 108
12145: PUSH
12146: LD_INT 109
12148: PUSH
12149: LD_INT 110
12151: PUSH
12152: LD_INT 111
12154: PUSH
12155: LD_INT 112
12157: PUSH
12158: LD_INT 113
12160: PUSH
12161: LD_INT 114
12163: PUSH
12164: LD_INT 115
12166: PUSH
12167: LD_INT 116
12169: PUSH
12170: LD_INT 117
12172: PUSH
12173: LD_INT 118
12175: PUSH
12176: EMPTY
12177: LIST
12178: LIST
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: PUSH
12196: EMPTY
12197: LIST
12198: LIST
12199: ST_TO_ADDR
12200: GO 12203
12202: POP
// end else
12203: GO 12434
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12205: LD_ADDR_VAR 0 1
12209: PUSH
12210: LD_INT 1
12212: PUSH
12213: LD_INT 2
12215: PUSH
12216: LD_INT 3
12218: PUSH
12219: LD_INT 4
12221: PUSH
12222: LD_INT 5
12224: PUSH
12225: LD_INT 6
12227: PUSH
12228: LD_INT 7
12230: PUSH
12231: LD_INT 8
12233: PUSH
12234: LD_INT 9
12236: PUSH
12237: LD_INT 10
12239: PUSH
12240: LD_INT 11
12242: PUSH
12243: LD_INT 12
12245: PUSH
12246: LD_INT 13
12248: PUSH
12249: LD_INT 14
12251: PUSH
12252: LD_INT 15
12254: PUSH
12255: LD_INT 16
12257: PUSH
12258: LD_INT 17
12260: PUSH
12261: LD_INT 18
12263: PUSH
12264: LD_INT 19
12266: PUSH
12267: LD_INT 20
12269: PUSH
12270: LD_INT 21
12272: PUSH
12273: LD_INT 22
12275: PUSH
12276: LD_INT 23
12278: PUSH
12279: LD_INT 24
12281: PUSH
12282: LD_INT 25
12284: PUSH
12285: LD_INT 26
12287: PUSH
12288: LD_INT 27
12290: PUSH
12291: LD_INT 28
12293: PUSH
12294: LD_INT 29
12296: PUSH
12297: LD_INT 30
12299: PUSH
12300: LD_INT 31
12302: PUSH
12303: LD_INT 32
12305: PUSH
12306: LD_INT 33
12308: PUSH
12309: LD_INT 34
12311: PUSH
12312: LD_INT 35
12314: PUSH
12315: LD_INT 36
12317: PUSH
12318: EMPTY
12319: LIST
12320: LIST
12321: LIST
12322: LIST
12323: LIST
12324: LIST
12325: LIST
12326: LIST
12327: LIST
12328: LIST
12329: LIST
12330: LIST
12331: LIST
12332: LIST
12333: LIST
12334: LIST
12335: LIST
12336: LIST
12337: LIST
12338: LIST
12339: LIST
12340: LIST
12341: LIST
12342: LIST
12343: LIST
12344: LIST
12345: LIST
12346: LIST
12347: LIST
12348: LIST
12349: LIST
12350: LIST
12351: LIST
12352: LIST
12353: LIST
12354: LIST
12355: PUSH
12356: LD_INT 101
12358: PUSH
12359: LD_INT 102
12361: PUSH
12362: LD_INT 103
12364: PUSH
12365: LD_INT 104
12367: PUSH
12368: LD_INT 105
12370: PUSH
12371: LD_INT 106
12373: PUSH
12374: LD_INT 107
12376: PUSH
12377: LD_INT 108
12379: PUSH
12380: LD_INT 109
12382: PUSH
12383: LD_INT 110
12385: PUSH
12386: LD_INT 111
12388: PUSH
12389: LD_INT 112
12391: PUSH
12392: LD_INT 113
12394: PUSH
12395: LD_INT 114
12397: PUSH
12398: LD_INT 115
12400: PUSH
12401: LD_INT 116
12403: PUSH
12404: LD_INT 117
12406: PUSH
12407: LD_INT 118
12409: PUSH
12410: EMPTY
12411: LIST
12412: LIST
12413: LIST
12414: LIST
12415: LIST
12416: LIST
12417: LIST
12418: LIST
12419: LIST
12420: LIST
12421: LIST
12422: LIST
12423: LIST
12424: LIST
12425: LIST
12426: LIST
12427: LIST
12428: LIST
12429: PUSH
12430: EMPTY
12431: LIST
12432: LIST
12433: ST_TO_ADDR
// if result then
12434: LD_VAR 0 1
12438: IFFALSE 12727
// begin normal :=  ;
12440: LD_ADDR_VAR 0 3
12444: PUSH
12445: LD_STRING 
12447: ST_TO_ADDR
// hardcore :=  ;
12448: LD_ADDR_VAR 0 4
12452: PUSH
12453: LD_STRING 
12455: ST_TO_ADDR
// for i = 1 to normalCounter do
12456: LD_ADDR_VAR 0 5
12460: PUSH
12461: DOUBLE
12462: LD_INT 1
12464: DEC
12465: ST_TO_ADDR
12466: LD_EXP 25
12470: PUSH
12471: FOR_TO
12472: IFFALSE 12573
// begin tmp := 0 ;
12474: LD_ADDR_VAR 0 2
12478: PUSH
12479: LD_STRING 0
12481: ST_TO_ADDR
// if result [ 1 ] then
12482: LD_VAR 0 1
12486: PUSH
12487: LD_INT 1
12489: ARRAY
12490: IFFALSE 12555
// if result [ 1 ] [ 1 ] = i then
12492: LD_VAR 0 1
12496: PUSH
12497: LD_INT 1
12499: ARRAY
12500: PUSH
12501: LD_INT 1
12503: ARRAY
12504: PUSH
12505: LD_VAR 0 5
12509: EQUAL
12510: IFFALSE 12555
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12512: LD_ADDR_VAR 0 1
12516: PUSH
12517: LD_VAR 0 1
12521: PPUSH
12522: LD_INT 1
12524: PPUSH
12525: LD_VAR 0 1
12529: PUSH
12530: LD_INT 1
12532: ARRAY
12533: PPUSH
12534: LD_INT 1
12536: PPUSH
12537: CALL_OW 3
12541: PPUSH
12542: CALL_OW 1
12546: ST_TO_ADDR
// tmp := 1 ;
12547: LD_ADDR_VAR 0 2
12551: PUSH
12552: LD_STRING 1
12554: ST_TO_ADDR
// end ; normal := normal & tmp ;
12555: LD_ADDR_VAR 0 3
12559: PUSH
12560: LD_VAR 0 3
12564: PUSH
12565: LD_VAR 0 2
12569: STR
12570: ST_TO_ADDR
// end ;
12571: GO 12471
12573: POP
12574: POP
// for i = 1 to hardcoreCounter do
12575: LD_ADDR_VAR 0 5
12579: PUSH
12580: DOUBLE
12581: LD_INT 1
12583: DEC
12584: ST_TO_ADDR
12585: LD_EXP 26
12589: PUSH
12590: FOR_TO
12591: IFFALSE 12696
// begin tmp := 0 ;
12593: LD_ADDR_VAR 0 2
12597: PUSH
12598: LD_STRING 0
12600: ST_TO_ADDR
// if result [ 2 ] then
12601: LD_VAR 0 1
12605: PUSH
12606: LD_INT 2
12608: ARRAY
12609: IFFALSE 12678
// if result [ 2 ] [ 1 ] = 100 + i then
12611: LD_VAR 0 1
12615: PUSH
12616: LD_INT 2
12618: ARRAY
12619: PUSH
12620: LD_INT 1
12622: ARRAY
12623: PUSH
12624: LD_INT 100
12626: PUSH
12627: LD_VAR 0 5
12631: PLUS
12632: EQUAL
12633: IFFALSE 12678
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12635: LD_ADDR_VAR 0 1
12639: PUSH
12640: LD_VAR 0 1
12644: PPUSH
12645: LD_INT 2
12647: PPUSH
12648: LD_VAR 0 1
12652: PUSH
12653: LD_INT 2
12655: ARRAY
12656: PPUSH
12657: LD_INT 1
12659: PPUSH
12660: CALL_OW 3
12664: PPUSH
12665: CALL_OW 1
12669: ST_TO_ADDR
// tmp := 1 ;
12670: LD_ADDR_VAR 0 2
12674: PUSH
12675: LD_STRING 1
12677: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12678: LD_ADDR_VAR 0 4
12682: PUSH
12683: LD_VAR 0 4
12687: PUSH
12688: LD_VAR 0 2
12692: STR
12693: ST_TO_ADDR
// end ;
12694: GO 12590
12696: POP
12697: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
12698: LD_STRING getStreamItemsFromMission("
12700: PUSH
12701: LD_VAR 0 3
12705: STR
12706: PUSH
12707: LD_STRING ","
12709: STR
12710: PUSH
12711: LD_VAR 0 4
12715: STR
12716: PUSH
12717: LD_STRING ")
12719: STR
12720: PPUSH
12721: CALL_OW 559
// end else
12725: GO 12734
// ToLua ( getStreamItemsFromMission("","") ) ;
12727: LD_STRING getStreamItemsFromMission("","")
12729: PPUSH
12730: CALL_OW 559
// end ;
12734: LD_VAR 0 1
12738: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
12739: LD_EXP 24
12743: PUSH
12744: LD_EXP 29
12748: AND
12749: IFFALSE 12873
12751: GO 12753
12753: DISABLE
12754: LD_INT 0
12756: PPUSH
12757: PPUSH
// begin enable ;
12758: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
12759: LD_ADDR_VAR 0 2
12763: PUSH
12764: LD_INT 22
12766: PUSH
12767: LD_OWVAR 2
12771: PUSH
12772: EMPTY
12773: LIST
12774: LIST
12775: PUSH
12776: LD_INT 2
12778: PUSH
12779: LD_INT 34
12781: PUSH
12782: LD_INT 7
12784: PUSH
12785: EMPTY
12786: LIST
12787: LIST
12788: PUSH
12789: LD_INT 34
12791: PUSH
12792: LD_INT 45
12794: PUSH
12795: EMPTY
12796: LIST
12797: LIST
12798: PUSH
12799: LD_INT 34
12801: PUSH
12802: LD_INT 28
12804: PUSH
12805: EMPTY
12806: LIST
12807: LIST
12808: PUSH
12809: LD_INT 34
12811: PUSH
12812: LD_INT 47
12814: PUSH
12815: EMPTY
12816: LIST
12817: LIST
12818: PUSH
12819: EMPTY
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: LIST
12825: PUSH
12826: EMPTY
12827: LIST
12828: LIST
12829: PPUSH
12830: CALL_OW 69
12834: ST_TO_ADDR
// if not tmp then
12835: LD_VAR 0 2
12839: NOT
12840: IFFALSE 12844
// exit ;
12842: GO 12873
// for i in tmp do
12844: LD_ADDR_VAR 0 1
12848: PUSH
12849: LD_VAR 0 2
12853: PUSH
12854: FOR_IN
12855: IFFALSE 12871
// begin SetLives ( i , 0 ) ;
12857: LD_VAR 0 1
12861: PPUSH
12862: LD_INT 0
12864: PPUSH
12865: CALL_OW 234
// end ;
12869: GO 12854
12871: POP
12872: POP
// end ;
12873: PPOPN 2
12875: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12876: LD_EXP 24
12880: PUSH
12881: LD_EXP 30
12885: AND
12886: IFFALSE 12970
12888: GO 12890
12890: DISABLE
12891: LD_INT 0
12893: PPUSH
12894: PPUSH
// begin enable ;
12895: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
12896: LD_ADDR_VAR 0 2
12900: PUSH
12901: LD_INT 22
12903: PUSH
12904: LD_OWVAR 2
12908: PUSH
12909: EMPTY
12910: LIST
12911: LIST
12912: PUSH
12913: LD_INT 32
12915: PUSH
12916: LD_INT 3
12918: PUSH
12919: EMPTY
12920: LIST
12921: LIST
12922: PUSH
12923: EMPTY
12924: LIST
12925: LIST
12926: PPUSH
12927: CALL_OW 69
12931: ST_TO_ADDR
// if not tmp then
12932: LD_VAR 0 2
12936: NOT
12937: IFFALSE 12941
// exit ;
12939: GO 12970
// for i in tmp do
12941: LD_ADDR_VAR 0 1
12945: PUSH
12946: LD_VAR 0 2
12950: PUSH
12951: FOR_IN
12952: IFFALSE 12968
// begin SetLives ( i , 0 ) ;
12954: LD_VAR 0 1
12958: PPUSH
12959: LD_INT 0
12961: PPUSH
12962: CALL_OW 234
// end ;
12966: GO 12951
12968: POP
12969: POP
// end ;
12970: PPOPN 2
12972: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12973: LD_EXP 24
12977: PUSH
12978: LD_EXP 27
12982: AND
12983: IFFALSE 13076
12985: GO 12987
12987: DISABLE
12988: LD_INT 0
12990: PPUSH
// begin enable ;
12991: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
12992: LD_ADDR_VAR 0 1
12996: PUSH
12997: LD_INT 22
12999: PUSH
13000: LD_OWVAR 2
13004: PUSH
13005: EMPTY
13006: LIST
13007: LIST
13008: PUSH
13009: LD_INT 2
13011: PUSH
13012: LD_INT 25
13014: PUSH
13015: LD_INT 5
13017: PUSH
13018: EMPTY
13019: LIST
13020: LIST
13021: PUSH
13022: LD_INT 25
13024: PUSH
13025: LD_INT 9
13027: PUSH
13028: EMPTY
13029: LIST
13030: LIST
13031: PUSH
13032: LD_INT 25
13034: PUSH
13035: LD_INT 8
13037: PUSH
13038: EMPTY
13039: LIST
13040: LIST
13041: PUSH
13042: EMPTY
13043: LIST
13044: LIST
13045: LIST
13046: LIST
13047: PUSH
13048: EMPTY
13049: LIST
13050: LIST
13051: PPUSH
13052: CALL_OW 69
13056: PUSH
13057: FOR_IN
13058: IFFALSE 13074
// begin SetClass ( i , 1 ) ;
13060: LD_VAR 0 1
13064: PPUSH
13065: LD_INT 1
13067: PPUSH
13068: CALL_OW 336
// end ;
13072: GO 13057
13074: POP
13075: POP
// end ;
13076: PPOPN 1
13078: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
13079: LD_EXP 24
13083: PUSH
13084: LD_EXP 28
13088: AND
13089: PUSH
13090: LD_OWVAR 65
13094: PUSH
13095: LD_INT 7
13097: LESS
13098: AND
13099: IFFALSE 13113
13101: GO 13103
13103: DISABLE
// begin enable ;
13104: ENABLE
// game_speed := 7 ;
13105: LD_ADDR_OWVAR 65
13109: PUSH
13110: LD_INT 7
13112: ST_TO_ADDR
// end ;
13113: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
13114: LD_EXP 24
13118: PUSH
13119: LD_EXP 31
13123: AND
13124: IFFALSE 13326
13126: GO 13128
13128: DISABLE
13129: LD_INT 0
13131: PPUSH
13132: PPUSH
13133: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
13134: LD_ADDR_VAR 0 3
13138: PUSH
13139: LD_INT 81
13141: PUSH
13142: LD_OWVAR 2
13146: PUSH
13147: EMPTY
13148: LIST
13149: LIST
13150: PUSH
13151: LD_INT 21
13153: PUSH
13154: LD_INT 1
13156: PUSH
13157: EMPTY
13158: LIST
13159: LIST
13160: PUSH
13161: EMPTY
13162: LIST
13163: LIST
13164: PPUSH
13165: CALL_OW 69
13169: ST_TO_ADDR
// if not tmp then
13170: LD_VAR 0 3
13174: NOT
13175: IFFALSE 13179
// exit ;
13177: GO 13326
// if tmp > 5 then
13179: LD_VAR 0 3
13183: PUSH
13184: LD_INT 5
13186: GREATER
13187: IFFALSE 13199
// k := 5 else
13189: LD_ADDR_VAR 0 2
13193: PUSH
13194: LD_INT 5
13196: ST_TO_ADDR
13197: GO 13209
// k := tmp ;
13199: LD_ADDR_VAR 0 2
13203: PUSH
13204: LD_VAR 0 3
13208: ST_TO_ADDR
// for i := 1 to k do
13209: LD_ADDR_VAR 0 1
13213: PUSH
13214: DOUBLE
13215: LD_INT 1
13217: DEC
13218: ST_TO_ADDR
13219: LD_VAR 0 2
13223: PUSH
13224: FOR_TO
13225: IFFALSE 13324
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
13227: LD_VAR 0 3
13231: PUSH
13232: LD_VAR 0 1
13236: ARRAY
13237: PPUSH
13238: LD_VAR 0 1
13242: PUSH
13243: LD_INT 4
13245: MOD
13246: PUSH
13247: LD_INT 1
13249: PLUS
13250: PPUSH
13251: CALL_OW 259
13255: PUSH
13256: LD_INT 10
13258: LESS
13259: IFFALSE 13322
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
13261: LD_VAR 0 3
13265: PUSH
13266: LD_VAR 0 1
13270: ARRAY
13271: PPUSH
13272: LD_VAR 0 1
13276: PUSH
13277: LD_INT 4
13279: MOD
13280: PUSH
13281: LD_INT 1
13283: PLUS
13284: PPUSH
13285: LD_VAR 0 3
13289: PUSH
13290: LD_VAR 0 1
13294: ARRAY
13295: PPUSH
13296: LD_VAR 0 1
13300: PUSH
13301: LD_INT 4
13303: MOD
13304: PUSH
13305: LD_INT 1
13307: PLUS
13308: PPUSH
13309: CALL_OW 259
13313: PUSH
13314: LD_INT 1
13316: PLUS
13317: PPUSH
13318: CALL_OW 237
13322: GO 13224
13324: POP
13325: POP
// end ;
13326: PPOPN 3
13328: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13329: LD_EXP 24
13333: PUSH
13334: LD_EXP 32
13338: AND
13339: IFFALSE 13359
13341: GO 13343
13343: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13344: LD_INT 4
13346: PPUSH
13347: LD_OWVAR 2
13351: PPUSH
13352: LD_INT 0
13354: PPUSH
13355: CALL_OW 324
13359: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13360: LD_EXP 24
13364: PUSH
13365: LD_EXP 61
13369: AND
13370: IFFALSE 13390
13372: GO 13374
13374: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13375: LD_INT 19
13377: PPUSH
13378: LD_OWVAR 2
13382: PPUSH
13383: LD_INT 0
13385: PPUSH
13386: CALL_OW 324
13390: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13391: LD_EXP 24
13395: PUSH
13396: LD_EXP 33
13400: AND
13401: IFFALSE 13503
13403: GO 13405
13405: DISABLE
13406: LD_INT 0
13408: PPUSH
13409: PPUSH
// begin enable ;
13410: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13411: LD_ADDR_VAR 0 2
13415: PUSH
13416: LD_INT 22
13418: PUSH
13419: LD_OWVAR 2
13423: PUSH
13424: EMPTY
13425: LIST
13426: LIST
13427: PUSH
13428: LD_INT 2
13430: PUSH
13431: LD_INT 34
13433: PUSH
13434: LD_INT 11
13436: PUSH
13437: EMPTY
13438: LIST
13439: LIST
13440: PUSH
13441: LD_INT 34
13443: PUSH
13444: LD_INT 30
13446: PUSH
13447: EMPTY
13448: LIST
13449: LIST
13450: PUSH
13451: EMPTY
13452: LIST
13453: LIST
13454: LIST
13455: PUSH
13456: EMPTY
13457: LIST
13458: LIST
13459: PPUSH
13460: CALL_OW 69
13464: ST_TO_ADDR
// if not tmp then
13465: LD_VAR 0 2
13469: NOT
13470: IFFALSE 13474
// exit ;
13472: GO 13503
// for i in tmp do
13474: LD_ADDR_VAR 0 1
13478: PUSH
13479: LD_VAR 0 2
13483: PUSH
13484: FOR_IN
13485: IFFALSE 13501
// begin SetLives ( i , 0 ) ;
13487: LD_VAR 0 1
13491: PPUSH
13492: LD_INT 0
13494: PPUSH
13495: CALL_OW 234
// end ;
13499: GO 13484
13501: POP
13502: POP
// end ;
13503: PPOPN 2
13505: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13506: LD_EXP 24
13510: PUSH
13511: LD_EXP 34
13515: AND
13516: IFFALSE 13536
13518: GO 13520
13520: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13521: LD_INT 32
13523: PPUSH
13524: LD_OWVAR 2
13528: PPUSH
13529: LD_INT 0
13531: PPUSH
13532: CALL_OW 324
13536: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13537: LD_EXP 24
13541: PUSH
13542: LD_EXP 35
13546: AND
13547: IFFALSE 13728
13549: GO 13551
13551: DISABLE
13552: LD_INT 0
13554: PPUSH
13555: PPUSH
13556: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13557: LD_ADDR_VAR 0 2
13561: PUSH
13562: LD_INT 22
13564: PUSH
13565: LD_OWVAR 2
13569: PUSH
13570: EMPTY
13571: LIST
13572: LIST
13573: PUSH
13574: LD_INT 33
13576: PUSH
13577: LD_INT 3
13579: PUSH
13580: EMPTY
13581: LIST
13582: LIST
13583: PUSH
13584: EMPTY
13585: LIST
13586: LIST
13587: PPUSH
13588: CALL_OW 69
13592: ST_TO_ADDR
// if not tmp then
13593: LD_VAR 0 2
13597: NOT
13598: IFFALSE 13602
// exit ;
13600: GO 13728
// side := 0 ;
13602: LD_ADDR_VAR 0 3
13606: PUSH
13607: LD_INT 0
13609: ST_TO_ADDR
// for i := 1 to 8 do
13610: LD_ADDR_VAR 0 1
13614: PUSH
13615: DOUBLE
13616: LD_INT 1
13618: DEC
13619: ST_TO_ADDR
13620: LD_INT 8
13622: PUSH
13623: FOR_TO
13624: IFFALSE 13672
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
13626: LD_OWVAR 2
13630: PUSH
13631: LD_VAR 0 1
13635: NONEQUAL
13636: PUSH
13637: LD_OWVAR 2
13641: PPUSH
13642: LD_VAR 0 1
13646: PPUSH
13647: CALL_OW 81
13651: PUSH
13652: LD_INT 2
13654: EQUAL
13655: AND
13656: IFFALSE 13670
// begin side := i ;
13658: LD_ADDR_VAR 0 3
13662: PUSH
13663: LD_VAR 0 1
13667: ST_TO_ADDR
// break ;
13668: GO 13672
// end ;
13670: GO 13623
13672: POP
13673: POP
// if not side then
13674: LD_VAR 0 3
13678: NOT
13679: IFFALSE 13683
// exit ;
13681: GO 13728
// for i := 1 to tmp do
13683: LD_ADDR_VAR 0 1
13687: PUSH
13688: DOUBLE
13689: LD_INT 1
13691: DEC
13692: ST_TO_ADDR
13693: LD_VAR 0 2
13697: PUSH
13698: FOR_TO
13699: IFFALSE 13726
// if Prob ( 60 ) then
13701: LD_INT 60
13703: PPUSH
13704: CALL_OW 13
13708: IFFALSE 13724
// SetSide ( i , side ) ;
13710: LD_VAR 0 1
13714: PPUSH
13715: LD_VAR 0 3
13719: PPUSH
13720: CALL_OW 235
13724: GO 13698
13726: POP
13727: POP
// end ;
13728: PPOPN 3
13730: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
13731: LD_EXP 24
13735: PUSH
13736: LD_EXP 37
13740: AND
13741: IFFALSE 13860
13743: GO 13745
13745: DISABLE
13746: LD_INT 0
13748: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
13749: LD_ADDR_VAR 0 1
13753: PUSH
13754: LD_INT 22
13756: PUSH
13757: LD_OWVAR 2
13761: PUSH
13762: EMPTY
13763: LIST
13764: LIST
13765: PUSH
13766: LD_INT 21
13768: PUSH
13769: LD_INT 1
13771: PUSH
13772: EMPTY
13773: LIST
13774: LIST
13775: PUSH
13776: LD_INT 3
13778: PUSH
13779: LD_INT 23
13781: PUSH
13782: LD_INT 0
13784: PUSH
13785: EMPTY
13786: LIST
13787: LIST
13788: PUSH
13789: EMPTY
13790: LIST
13791: LIST
13792: PUSH
13793: EMPTY
13794: LIST
13795: LIST
13796: LIST
13797: PPUSH
13798: CALL_OW 69
13802: PUSH
13803: FOR_IN
13804: IFFALSE 13858
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
13806: LD_VAR 0 1
13810: PPUSH
13811: CALL_OW 257
13815: PUSH
13816: LD_INT 1
13818: PUSH
13819: LD_INT 2
13821: PUSH
13822: LD_INT 3
13824: PUSH
13825: LD_INT 4
13827: PUSH
13828: EMPTY
13829: LIST
13830: LIST
13831: LIST
13832: LIST
13833: IN
13834: IFFALSE 13856
// SetClass ( un , rand ( 1 , 4 ) ) ;
13836: LD_VAR 0 1
13840: PPUSH
13841: LD_INT 1
13843: PPUSH
13844: LD_INT 4
13846: PPUSH
13847: CALL_OW 12
13851: PPUSH
13852: CALL_OW 336
13856: GO 13803
13858: POP
13859: POP
// end ;
13860: PPOPN 1
13862: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
13863: LD_EXP 24
13867: PUSH
13868: LD_EXP 36
13872: AND
13873: IFFALSE 13952
13875: GO 13877
13877: DISABLE
13878: LD_INT 0
13880: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13881: LD_ADDR_VAR 0 1
13885: PUSH
13886: LD_INT 22
13888: PUSH
13889: LD_OWVAR 2
13893: PUSH
13894: EMPTY
13895: LIST
13896: LIST
13897: PUSH
13898: LD_INT 21
13900: PUSH
13901: LD_INT 3
13903: PUSH
13904: EMPTY
13905: LIST
13906: LIST
13907: PUSH
13908: EMPTY
13909: LIST
13910: LIST
13911: PPUSH
13912: CALL_OW 69
13916: ST_TO_ADDR
// if not tmp then
13917: LD_VAR 0 1
13921: NOT
13922: IFFALSE 13926
// exit ;
13924: GO 13952
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
13926: LD_VAR 0 1
13930: PUSH
13931: LD_INT 1
13933: PPUSH
13934: LD_VAR 0 1
13938: PPUSH
13939: CALL_OW 12
13943: ARRAY
13944: PPUSH
13945: LD_INT 100
13947: PPUSH
13948: CALL_OW 234
// end ;
13952: PPOPN 1
13954: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
13955: LD_EXP 24
13959: PUSH
13960: LD_EXP 38
13964: AND
13965: IFFALSE 14063
13967: GO 13969
13969: DISABLE
13970: LD_INT 0
13972: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13973: LD_ADDR_VAR 0 1
13977: PUSH
13978: LD_INT 22
13980: PUSH
13981: LD_OWVAR 2
13985: PUSH
13986: EMPTY
13987: LIST
13988: LIST
13989: PUSH
13990: LD_INT 21
13992: PUSH
13993: LD_INT 1
13995: PUSH
13996: EMPTY
13997: LIST
13998: LIST
13999: PUSH
14000: EMPTY
14001: LIST
14002: LIST
14003: PPUSH
14004: CALL_OW 69
14008: ST_TO_ADDR
// if not tmp then
14009: LD_VAR 0 1
14013: NOT
14014: IFFALSE 14018
// exit ;
14016: GO 14063
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
14018: LD_VAR 0 1
14022: PUSH
14023: LD_INT 1
14025: PPUSH
14026: LD_VAR 0 1
14030: PPUSH
14031: CALL_OW 12
14035: ARRAY
14036: PPUSH
14037: LD_INT 1
14039: PPUSH
14040: LD_INT 4
14042: PPUSH
14043: CALL_OW 12
14047: PPUSH
14048: LD_INT 3000
14050: PPUSH
14051: LD_INT 9000
14053: PPUSH
14054: CALL_OW 12
14058: PPUSH
14059: CALL_OW 492
// end ;
14063: PPOPN 1
14065: END
// every 0 0$1 trigger StreamModeActive and sDepot do
14066: LD_EXP 24
14070: PUSH
14071: LD_EXP 39
14075: AND
14076: IFFALSE 14096
14078: GO 14080
14080: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
14081: LD_INT 1
14083: PPUSH
14084: LD_OWVAR 2
14088: PPUSH
14089: LD_INT 0
14091: PPUSH
14092: CALL_OW 324
14096: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
14097: LD_EXP 24
14101: PUSH
14102: LD_EXP 40
14106: AND
14107: IFFALSE 14190
14109: GO 14111
14111: DISABLE
14112: LD_INT 0
14114: PPUSH
14115: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14116: LD_ADDR_VAR 0 2
14120: PUSH
14121: LD_INT 22
14123: PUSH
14124: LD_OWVAR 2
14128: PUSH
14129: EMPTY
14130: LIST
14131: LIST
14132: PUSH
14133: LD_INT 21
14135: PUSH
14136: LD_INT 3
14138: PUSH
14139: EMPTY
14140: LIST
14141: LIST
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: PPUSH
14147: CALL_OW 69
14151: ST_TO_ADDR
// if not tmp then
14152: LD_VAR 0 2
14156: NOT
14157: IFFALSE 14161
// exit ;
14159: GO 14190
// for i in tmp do
14161: LD_ADDR_VAR 0 1
14165: PUSH
14166: LD_VAR 0 2
14170: PUSH
14171: FOR_IN
14172: IFFALSE 14188
// SetBLevel ( i , 10 ) ;
14174: LD_VAR 0 1
14178: PPUSH
14179: LD_INT 10
14181: PPUSH
14182: CALL_OW 241
14186: GO 14171
14188: POP
14189: POP
// end ;
14190: PPOPN 2
14192: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
14193: LD_EXP 24
14197: PUSH
14198: LD_EXP 41
14202: AND
14203: IFFALSE 14314
14205: GO 14207
14207: DISABLE
14208: LD_INT 0
14210: PPUSH
14211: PPUSH
14212: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14213: LD_ADDR_VAR 0 3
14217: PUSH
14218: LD_INT 22
14220: PUSH
14221: LD_OWVAR 2
14225: PUSH
14226: EMPTY
14227: LIST
14228: LIST
14229: PUSH
14230: LD_INT 25
14232: PUSH
14233: LD_INT 1
14235: PUSH
14236: EMPTY
14237: LIST
14238: LIST
14239: PUSH
14240: EMPTY
14241: LIST
14242: LIST
14243: PPUSH
14244: CALL_OW 69
14248: ST_TO_ADDR
// if not tmp then
14249: LD_VAR 0 3
14253: NOT
14254: IFFALSE 14258
// exit ;
14256: GO 14314
// un := tmp [ rand ( 1 , tmp ) ] ;
14258: LD_ADDR_VAR 0 2
14262: PUSH
14263: LD_VAR 0 3
14267: PUSH
14268: LD_INT 1
14270: PPUSH
14271: LD_VAR 0 3
14275: PPUSH
14276: CALL_OW 12
14280: ARRAY
14281: ST_TO_ADDR
// if Crawls ( un ) then
14282: LD_VAR 0 2
14286: PPUSH
14287: CALL_OW 318
14291: IFFALSE 14302
// ComWalk ( un ) ;
14293: LD_VAR 0 2
14297: PPUSH
14298: CALL_OW 138
// SetClass ( un , class_sniper ) ;
14302: LD_VAR 0 2
14306: PPUSH
14307: LD_INT 5
14309: PPUSH
14310: CALL_OW 336
// end ;
14314: PPOPN 3
14316: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
14317: LD_EXP 24
14321: PUSH
14322: LD_EXP 42
14326: AND
14327: PUSH
14328: LD_OWVAR 67
14332: PUSH
14333: LD_INT 4
14335: LESS
14336: AND
14337: IFFALSE 14356
14339: GO 14341
14341: DISABLE
// begin Difficulty := Difficulty + 1 ;
14342: LD_ADDR_OWVAR 67
14346: PUSH
14347: LD_OWVAR 67
14351: PUSH
14352: LD_INT 1
14354: PLUS
14355: ST_TO_ADDR
// end ;
14356: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14357: LD_EXP 24
14361: PUSH
14362: LD_EXP 43
14366: AND
14367: IFFALSE 14470
14369: GO 14371
14371: DISABLE
14372: LD_INT 0
14374: PPUSH
// begin for i := 1 to 5 do
14375: LD_ADDR_VAR 0 1
14379: PUSH
14380: DOUBLE
14381: LD_INT 1
14383: DEC
14384: ST_TO_ADDR
14385: LD_INT 5
14387: PUSH
14388: FOR_TO
14389: IFFALSE 14468
// begin uc_nation := nation_nature ;
14391: LD_ADDR_OWVAR 21
14395: PUSH
14396: LD_INT 0
14398: ST_TO_ADDR
// uc_side := 0 ;
14399: LD_ADDR_OWVAR 20
14403: PUSH
14404: LD_INT 0
14406: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14407: LD_ADDR_OWVAR 29
14411: PUSH
14412: LD_INT 12
14414: PUSH
14415: LD_INT 12
14417: PUSH
14418: EMPTY
14419: LIST
14420: LIST
14421: ST_TO_ADDR
// hc_agressivity := 20 ;
14422: LD_ADDR_OWVAR 35
14426: PUSH
14427: LD_INT 20
14429: ST_TO_ADDR
// hc_class := class_tiger ;
14430: LD_ADDR_OWVAR 28
14434: PUSH
14435: LD_INT 14
14437: ST_TO_ADDR
// hc_gallery :=  ;
14438: LD_ADDR_OWVAR 33
14442: PUSH
14443: LD_STRING 
14445: ST_TO_ADDR
// hc_name :=  ;
14446: LD_ADDR_OWVAR 26
14450: PUSH
14451: LD_STRING 
14453: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14454: CALL_OW 44
14458: PPUSH
14459: LD_INT 0
14461: PPUSH
14462: CALL_OW 51
// end ;
14466: GO 14388
14468: POP
14469: POP
// end ;
14470: PPOPN 1
14472: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14473: LD_EXP 24
14477: PUSH
14478: LD_EXP 44
14482: AND
14483: IFFALSE 14492
14485: GO 14487
14487: DISABLE
// StreamSibBomb ;
14488: CALL 14493 0 0
14492: END
// export function StreamSibBomb ; var i , x , y ; begin
14493: LD_INT 0
14495: PPUSH
14496: PPUSH
14497: PPUSH
14498: PPUSH
// result := false ;
14499: LD_ADDR_VAR 0 1
14503: PUSH
14504: LD_INT 0
14506: ST_TO_ADDR
// for i := 1 to 16 do
14507: LD_ADDR_VAR 0 2
14511: PUSH
14512: DOUBLE
14513: LD_INT 1
14515: DEC
14516: ST_TO_ADDR
14517: LD_INT 16
14519: PUSH
14520: FOR_TO
14521: IFFALSE 14720
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14523: LD_ADDR_VAR 0 3
14527: PUSH
14528: LD_INT 10
14530: PUSH
14531: LD_INT 20
14533: PUSH
14534: LD_INT 30
14536: PUSH
14537: LD_INT 40
14539: PUSH
14540: LD_INT 50
14542: PUSH
14543: LD_INT 60
14545: PUSH
14546: LD_INT 70
14548: PUSH
14549: LD_INT 80
14551: PUSH
14552: LD_INT 90
14554: PUSH
14555: LD_INT 100
14557: PUSH
14558: LD_INT 110
14560: PUSH
14561: LD_INT 120
14563: PUSH
14564: LD_INT 130
14566: PUSH
14567: LD_INT 140
14569: PUSH
14570: LD_INT 150
14572: PUSH
14573: EMPTY
14574: LIST
14575: LIST
14576: LIST
14577: LIST
14578: LIST
14579: LIST
14580: LIST
14581: LIST
14582: LIST
14583: LIST
14584: LIST
14585: LIST
14586: LIST
14587: LIST
14588: LIST
14589: PUSH
14590: LD_INT 1
14592: PPUSH
14593: LD_INT 15
14595: PPUSH
14596: CALL_OW 12
14600: ARRAY
14601: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14602: LD_ADDR_VAR 0 4
14606: PUSH
14607: LD_INT 10
14609: PUSH
14610: LD_INT 20
14612: PUSH
14613: LD_INT 30
14615: PUSH
14616: LD_INT 40
14618: PUSH
14619: LD_INT 50
14621: PUSH
14622: LD_INT 60
14624: PUSH
14625: LD_INT 70
14627: PUSH
14628: LD_INT 80
14630: PUSH
14631: LD_INT 90
14633: PUSH
14634: LD_INT 100
14636: PUSH
14637: LD_INT 110
14639: PUSH
14640: LD_INT 120
14642: PUSH
14643: LD_INT 130
14645: PUSH
14646: LD_INT 140
14648: PUSH
14649: LD_INT 150
14651: PUSH
14652: EMPTY
14653: LIST
14654: LIST
14655: LIST
14656: LIST
14657: LIST
14658: LIST
14659: LIST
14660: LIST
14661: LIST
14662: LIST
14663: LIST
14664: LIST
14665: LIST
14666: LIST
14667: LIST
14668: PUSH
14669: LD_INT 1
14671: PPUSH
14672: LD_INT 15
14674: PPUSH
14675: CALL_OW 12
14679: ARRAY
14680: ST_TO_ADDR
// if ValidHex ( x , y ) then
14681: LD_VAR 0 3
14685: PPUSH
14686: LD_VAR 0 4
14690: PPUSH
14691: CALL_OW 488
14695: IFFALSE 14718
// begin result := [ x , y ] ;
14697: LD_ADDR_VAR 0 1
14701: PUSH
14702: LD_VAR 0 3
14706: PUSH
14707: LD_VAR 0 4
14711: PUSH
14712: EMPTY
14713: LIST
14714: LIST
14715: ST_TO_ADDR
// break ;
14716: GO 14720
// end ; end ;
14718: GO 14520
14720: POP
14721: POP
// if result then
14722: LD_VAR 0 1
14726: IFFALSE 14786
// begin ToLua ( playSibBomb() ) ;
14728: LD_STRING playSibBomb()
14730: PPUSH
14731: CALL_OW 559
// wait ( 0 0$14 ) ;
14735: LD_INT 490
14737: PPUSH
14738: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
14742: LD_VAR 0 1
14746: PUSH
14747: LD_INT 1
14749: ARRAY
14750: PPUSH
14751: LD_VAR 0 1
14755: PUSH
14756: LD_INT 2
14758: ARRAY
14759: PPUSH
14760: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
14764: LD_VAR 0 1
14768: PUSH
14769: LD_INT 1
14771: ARRAY
14772: PPUSH
14773: LD_VAR 0 1
14777: PUSH
14778: LD_INT 2
14780: ARRAY
14781: PPUSH
14782: CALL_OW 429
// end ; end ;
14786: LD_VAR 0 1
14790: RET
// every 0 0$1 trigger StreamModeActive and sReset do
14791: LD_EXP 24
14795: PUSH
14796: LD_EXP 46
14800: AND
14801: IFFALSE 14813
14803: GO 14805
14805: DISABLE
// YouLost (  ) ;
14806: LD_STRING 
14808: PPUSH
14809: CALL_OW 104
14813: END
// every 0 0$1 trigger StreamModeActive and sFog do
14814: LD_EXP 24
14818: PUSH
14819: LD_EXP 45
14823: AND
14824: IFFALSE 14838
14826: GO 14828
14828: DISABLE
// FogOff ( your_side ) ;
14829: LD_OWVAR 2
14833: PPUSH
14834: CALL_OW 344
14838: END
// every 0 0$1 trigger StreamModeActive and sSun do
14839: LD_EXP 24
14843: PUSH
14844: LD_EXP 47
14848: AND
14849: IFFALSE 14877
14851: GO 14853
14853: DISABLE
// begin solar_recharge_percent := 0 ;
14854: LD_ADDR_OWVAR 79
14858: PUSH
14859: LD_INT 0
14861: ST_TO_ADDR
// wait ( 5 5$00 ) ;
14862: LD_INT 10500
14864: PPUSH
14865: CALL_OW 67
// solar_recharge_percent := 100 ;
14869: LD_ADDR_OWVAR 79
14873: PUSH
14874: LD_INT 100
14876: ST_TO_ADDR
// end ;
14877: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14878: LD_EXP 24
14882: PUSH
14883: LD_EXP 48
14887: AND
14888: IFFALSE 15127
14890: GO 14892
14892: DISABLE
14893: LD_INT 0
14895: PPUSH
14896: PPUSH
14897: PPUSH
// begin tmp := [ ] ;
14898: LD_ADDR_VAR 0 3
14902: PUSH
14903: EMPTY
14904: ST_TO_ADDR
// for i := 1 to 6 do
14905: LD_ADDR_VAR 0 1
14909: PUSH
14910: DOUBLE
14911: LD_INT 1
14913: DEC
14914: ST_TO_ADDR
14915: LD_INT 6
14917: PUSH
14918: FOR_TO
14919: IFFALSE 15024
// begin uc_nation := nation_nature ;
14921: LD_ADDR_OWVAR 21
14925: PUSH
14926: LD_INT 0
14928: ST_TO_ADDR
// uc_side := 0 ;
14929: LD_ADDR_OWVAR 20
14933: PUSH
14934: LD_INT 0
14936: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14937: LD_ADDR_OWVAR 29
14941: PUSH
14942: LD_INT 12
14944: PUSH
14945: LD_INT 12
14947: PUSH
14948: EMPTY
14949: LIST
14950: LIST
14951: ST_TO_ADDR
// hc_agressivity := 20 ;
14952: LD_ADDR_OWVAR 35
14956: PUSH
14957: LD_INT 20
14959: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
14960: LD_ADDR_OWVAR 28
14964: PUSH
14965: LD_INT 17
14967: ST_TO_ADDR
// hc_gallery :=  ;
14968: LD_ADDR_OWVAR 33
14972: PUSH
14973: LD_STRING 
14975: ST_TO_ADDR
// hc_name :=  ;
14976: LD_ADDR_OWVAR 26
14980: PUSH
14981: LD_STRING 
14983: ST_TO_ADDR
// un := CreateHuman ;
14984: LD_ADDR_VAR 0 2
14988: PUSH
14989: CALL_OW 44
14993: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
14994: LD_VAR 0 2
14998: PPUSH
14999: LD_INT 1
15001: PPUSH
15002: CALL_OW 51
// tmp := tmp ^ un ;
15006: LD_ADDR_VAR 0 3
15010: PUSH
15011: LD_VAR 0 3
15015: PUSH
15016: LD_VAR 0 2
15020: ADD
15021: ST_TO_ADDR
// end ;
15022: GO 14918
15024: POP
15025: POP
// repeat wait ( 0 0$1 ) ;
15026: LD_INT 35
15028: PPUSH
15029: CALL_OW 67
// for un in tmp do
15033: LD_ADDR_VAR 0 2
15037: PUSH
15038: LD_VAR 0 3
15042: PUSH
15043: FOR_IN
15044: IFFALSE 15118
// begin if IsDead ( un ) then
15046: LD_VAR 0 2
15050: PPUSH
15051: CALL_OW 301
15055: IFFALSE 15075
// begin tmp := tmp diff un ;
15057: LD_ADDR_VAR 0 3
15061: PUSH
15062: LD_VAR 0 3
15066: PUSH
15067: LD_VAR 0 2
15071: DIFF
15072: ST_TO_ADDR
// continue ;
15073: GO 15043
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
15075: LD_VAR 0 2
15079: PPUSH
15080: LD_INT 3
15082: PUSH
15083: LD_INT 22
15085: PUSH
15086: LD_INT 0
15088: PUSH
15089: EMPTY
15090: LIST
15091: LIST
15092: PUSH
15093: EMPTY
15094: LIST
15095: LIST
15096: PPUSH
15097: CALL_OW 69
15101: PPUSH
15102: LD_VAR 0 2
15106: PPUSH
15107: CALL_OW 74
15111: PPUSH
15112: CALL_OW 115
// end ;
15116: GO 15043
15118: POP
15119: POP
// until not tmp ;
15120: LD_VAR 0 3
15124: NOT
15125: IFFALSE 15026
// end ;
15127: PPOPN 3
15129: END
// every 0 0$1 trigger StreamModeActive and sTroll do
15130: LD_EXP 24
15134: PUSH
15135: LD_EXP 49
15139: AND
15140: IFFALSE 15194
15142: GO 15144
15144: DISABLE
// begin ToLua ( displayTroll(); ) ;
15145: LD_STRING displayTroll();
15147: PPUSH
15148: CALL_OW 559
// wait ( 3 3$00 ) ;
15152: LD_INT 6300
15154: PPUSH
15155: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15159: LD_STRING hideTroll();
15161: PPUSH
15162: CALL_OW 559
// wait ( 1 1$00 ) ;
15166: LD_INT 2100
15168: PPUSH
15169: CALL_OW 67
// ToLua ( displayTroll(); ) ;
15173: LD_STRING displayTroll();
15175: PPUSH
15176: CALL_OW 559
// wait ( 1 1$00 ) ;
15180: LD_INT 2100
15182: PPUSH
15183: CALL_OW 67
// ToLua ( hideTroll(); ) ;
15187: LD_STRING hideTroll();
15189: PPUSH
15190: CALL_OW 559
// end ;
15194: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
15195: LD_EXP 24
15199: PUSH
15200: LD_EXP 50
15204: AND
15205: IFFALSE 15268
15207: GO 15209
15209: DISABLE
15210: LD_INT 0
15212: PPUSH
// begin p := 0 ;
15213: LD_ADDR_VAR 0 1
15217: PUSH
15218: LD_INT 0
15220: ST_TO_ADDR
// repeat game_speed := 1 ;
15221: LD_ADDR_OWVAR 65
15225: PUSH
15226: LD_INT 1
15228: ST_TO_ADDR
// wait ( 0 0$1 ) ;
15229: LD_INT 35
15231: PPUSH
15232: CALL_OW 67
// p := p + 1 ;
15236: LD_ADDR_VAR 0 1
15240: PUSH
15241: LD_VAR 0 1
15245: PUSH
15246: LD_INT 1
15248: PLUS
15249: ST_TO_ADDR
// until p >= 60 ;
15250: LD_VAR 0 1
15254: PUSH
15255: LD_INT 60
15257: GREATEREQUAL
15258: IFFALSE 15221
// game_speed := 4 ;
15260: LD_ADDR_OWVAR 65
15264: PUSH
15265: LD_INT 4
15267: ST_TO_ADDR
// end ;
15268: PPOPN 1
15270: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
15271: LD_EXP 24
15275: PUSH
15276: LD_EXP 51
15280: AND
15281: IFFALSE 15427
15283: GO 15285
15285: DISABLE
15286: LD_INT 0
15288: PPUSH
15289: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15290: LD_ADDR_VAR 0 1
15294: PUSH
15295: LD_INT 22
15297: PUSH
15298: LD_OWVAR 2
15302: PUSH
15303: EMPTY
15304: LIST
15305: LIST
15306: PUSH
15307: LD_INT 2
15309: PUSH
15310: LD_INT 30
15312: PUSH
15313: LD_INT 0
15315: PUSH
15316: EMPTY
15317: LIST
15318: LIST
15319: PUSH
15320: LD_INT 30
15322: PUSH
15323: LD_INT 1
15325: PUSH
15326: EMPTY
15327: LIST
15328: LIST
15329: PUSH
15330: EMPTY
15331: LIST
15332: LIST
15333: LIST
15334: PUSH
15335: EMPTY
15336: LIST
15337: LIST
15338: PPUSH
15339: CALL_OW 69
15343: ST_TO_ADDR
// if not depot then
15344: LD_VAR 0 1
15348: NOT
15349: IFFALSE 15353
// exit ;
15351: GO 15427
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15353: LD_ADDR_VAR 0 2
15357: PUSH
15358: LD_VAR 0 1
15362: PUSH
15363: LD_INT 1
15365: PPUSH
15366: LD_VAR 0 1
15370: PPUSH
15371: CALL_OW 12
15375: ARRAY
15376: PPUSH
15377: CALL_OW 274
15381: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15382: LD_VAR 0 2
15386: PPUSH
15387: LD_INT 1
15389: PPUSH
15390: LD_INT 0
15392: PPUSH
15393: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15397: LD_VAR 0 2
15401: PPUSH
15402: LD_INT 2
15404: PPUSH
15405: LD_INT 0
15407: PPUSH
15408: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15412: LD_VAR 0 2
15416: PPUSH
15417: LD_INT 3
15419: PPUSH
15420: LD_INT 0
15422: PPUSH
15423: CALL_OW 277
// end ;
15427: PPOPN 2
15429: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15430: LD_EXP 24
15434: PUSH
15435: LD_EXP 52
15439: AND
15440: IFFALSE 15537
15442: GO 15444
15444: DISABLE
15445: LD_INT 0
15447: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15448: LD_ADDR_VAR 0 1
15452: PUSH
15453: LD_INT 22
15455: PUSH
15456: LD_OWVAR 2
15460: PUSH
15461: EMPTY
15462: LIST
15463: LIST
15464: PUSH
15465: LD_INT 21
15467: PUSH
15468: LD_INT 1
15470: PUSH
15471: EMPTY
15472: LIST
15473: LIST
15474: PUSH
15475: LD_INT 3
15477: PUSH
15478: LD_INT 23
15480: PUSH
15481: LD_INT 0
15483: PUSH
15484: EMPTY
15485: LIST
15486: LIST
15487: PUSH
15488: EMPTY
15489: LIST
15490: LIST
15491: PUSH
15492: EMPTY
15493: LIST
15494: LIST
15495: LIST
15496: PPUSH
15497: CALL_OW 69
15501: ST_TO_ADDR
// if not tmp then
15502: LD_VAR 0 1
15506: NOT
15507: IFFALSE 15511
// exit ;
15509: GO 15537
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15511: LD_VAR 0 1
15515: PUSH
15516: LD_INT 1
15518: PPUSH
15519: LD_VAR 0 1
15523: PPUSH
15524: CALL_OW 12
15528: ARRAY
15529: PPUSH
15530: LD_INT 200
15532: PPUSH
15533: CALL_OW 234
// end ;
15537: PPOPN 1
15539: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15540: LD_EXP 24
15544: PUSH
15545: LD_EXP 53
15549: AND
15550: IFFALSE 15629
15552: GO 15554
15554: DISABLE
15555: LD_INT 0
15557: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15558: LD_ADDR_VAR 0 1
15562: PUSH
15563: LD_INT 22
15565: PUSH
15566: LD_OWVAR 2
15570: PUSH
15571: EMPTY
15572: LIST
15573: LIST
15574: PUSH
15575: LD_INT 21
15577: PUSH
15578: LD_INT 2
15580: PUSH
15581: EMPTY
15582: LIST
15583: LIST
15584: PUSH
15585: EMPTY
15586: LIST
15587: LIST
15588: PPUSH
15589: CALL_OW 69
15593: ST_TO_ADDR
// if not tmp then
15594: LD_VAR 0 1
15598: NOT
15599: IFFALSE 15603
// exit ;
15601: GO 15629
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15603: LD_VAR 0 1
15607: PUSH
15608: LD_INT 1
15610: PPUSH
15611: LD_VAR 0 1
15615: PPUSH
15616: CALL_OW 12
15620: ARRAY
15621: PPUSH
15622: LD_INT 60
15624: PPUSH
15625: CALL_OW 234
// end ;
15629: PPOPN 1
15631: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15632: LD_EXP 24
15636: PUSH
15637: LD_EXP 54
15641: AND
15642: IFFALSE 15741
15644: GO 15646
15646: DISABLE
15647: LD_INT 0
15649: PPUSH
15650: PPUSH
// begin enable ;
15651: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
15652: LD_ADDR_VAR 0 1
15656: PUSH
15657: LD_INT 22
15659: PUSH
15660: LD_OWVAR 2
15664: PUSH
15665: EMPTY
15666: LIST
15667: LIST
15668: PUSH
15669: LD_INT 61
15671: PUSH
15672: EMPTY
15673: LIST
15674: PUSH
15675: LD_INT 33
15677: PUSH
15678: LD_INT 2
15680: PUSH
15681: EMPTY
15682: LIST
15683: LIST
15684: PUSH
15685: EMPTY
15686: LIST
15687: LIST
15688: LIST
15689: PPUSH
15690: CALL_OW 69
15694: ST_TO_ADDR
// if not tmp then
15695: LD_VAR 0 1
15699: NOT
15700: IFFALSE 15704
// exit ;
15702: GO 15741
// for i in tmp do
15704: LD_ADDR_VAR 0 2
15708: PUSH
15709: LD_VAR 0 1
15713: PUSH
15714: FOR_IN
15715: IFFALSE 15739
// if IsControledBy ( i ) then
15717: LD_VAR 0 2
15721: PPUSH
15722: CALL_OW 312
15726: IFFALSE 15737
// ComUnlink ( i ) ;
15728: LD_VAR 0 2
15732: PPUSH
15733: CALL_OW 136
15737: GO 15714
15739: POP
15740: POP
// end ;
15741: PPOPN 2
15743: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
15744: LD_EXP 24
15748: PUSH
15749: LD_EXP 55
15753: AND
15754: IFFALSE 15894
15756: GO 15758
15758: DISABLE
15759: LD_INT 0
15761: PPUSH
15762: PPUSH
// begin ToLua ( displayPowell(); ) ;
15763: LD_STRING displayPowell();
15765: PPUSH
15766: CALL_OW 559
// uc_side := 0 ;
15770: LD_ADDR_OWVAR 20
15774: PUSH
15775: LD_INT 0
15777: ST_TO_ADDR
// uc_nation := 2 ;
15778: LD_ADDR_OWVAR 21
15782: PUSH
15783: LD_INT 2
15785: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
15786: LD_ADDR_OWVAR 37
15790: PUSH
15791: LD_INT 14
15793: ST_TO_ADDR
// vc_engine := engine_siberite ;
15794: LD_ADDR_OWVAR 39
15798: PUSH
15799: LD_INT 3
15801: ST_TO_ADDR
// vc_control := control_apeman ;
15802: LD_ADDR_OWVAR 38
15806: PUSH
15807: LD_INT 5
15809: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
15810: LD_ADDR_OWVAR 40
15814: PUSH
15815: LD_INT 29
15817: ST_TO_ADDR
// un := CreateVehicle ;
15818: LD_ADDR_VAR 0 2
15822: PUSH
15823: CALL_OW 45
15827: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15828: LD_VAR 0 2
15832: PPUSH
15833: LD_INT 1
15835: PPUSH
15836: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15840: LD_INT 35
15842: PPUSH
15843: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15847: LD_VAR 0 2
15851: PPUSH
15852: LD_INT 22
15854: PUSH
15855: LD_OWVAR 2
15859: PUSH
15860: EMPTY
15861: LIST
15862: LIST
15863: PPUSH
15864: CALL_OW 69
15868: PPUSH
15869: LD_VAR 0 2
15873: PPUSH
15874: CALL_OW 74
15878: PPUSH
15879: CALL_OW 115
// until IsDead ( un ) ;
15883: LD_VAR 0 2
15887: PPUSH
15888: CALL_OW 301
15892: IFFALSE 15840
// end ;
15894: PPOPN 2
15896: END
// every 0 0$1 trigger StreamModeActive and sStu do
15897: LD_EXP 24
15901: PUSH
15902: LD_EXP 63
15906: AND
15907: IFFALSE 15923
15909: GO 15911
15911: DISABLE
// begin ToLua ( displayStucuk(); ) ;
15912: LD_STRING displayStucuk();
15914: PPUSH
15915: CALL_OW 559
// ResetFog ;
15919: CALL_OW 335
// end ;
15923: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
15924: LD_EXP 24
15928: PUSH
15929: LD_EXP 56
15933: AND
15934: IFFALSE 16075
15936: GO 15938
15938: DISABLE
15939: LD_INT 0
15941: PPUSH
15942: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15943: LD_ADDR_VAR 0 2
15947: PUSH
15948: LD_INT 22
15950: PUSH
15951: LD_OWVAR 2
15955: PUSH
15956: EMPTY
15957: LIST
15958: LIST
15959: PUSH
15960: LD_INT 21
15962: PUSH
15963: LD_INT 1
15965: PUSH
15966: EMPTY
15967: LIST
15968: LIST
15969: PUSH
15970: EMPTY
15971: LIST
15972: LIST
15973: PPUSH
15974: CALL_OW 69
15978: ST_TO_ADDR
// if not tmp then
15979: LD_VAR 0 2
15983: NOT
15984: IFFALSE 15988
// exit ;
15986: GO 16075
// un := tmp [ rand ( 1 , tmp ) ] ;
15988: LD_ADDR_VAR 0 1
15992: PUSH
15993: LD_VAR 0 2
15997: PUSH
15998: LD_INT 1
16000: PPUSH
16001: LD_VAR 0 2
16005: PPUSH
16006: CALL_OW 12
16010: ARRAY
16011: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16012: LD_VAR 0 1
16016: PPUSH
16017: LD_INT 0
16019: PPUSH
16020: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
16024: LD_VAR 0 1
16028: PPUSH
16029: LD_OWVAR 3
16033: PUSH
16034: LD_VAR 0 1
16038: DIFF
16039: PPUSH
16040: LD_VAR 0 1
16044: PPUSH
16045: CALL_OW 74
16049: PPUSH
16050: CALL_OW 115
// wait ( 0 0$20 ) ;
16054: LD_INT 700
16056: PPUSH
16057: CALL_OW 67
// SetSide ( un , your_side ) ;
16061: LD_VAR 0 1
16065: PPUSH
16066: LD_OWVAR 2
16070: PPUSH
16071: CALL_OW 235
// end ;
16075: PPOPN 2
16077: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
16078: LD_EXP 24
16082: PUSH
16083: LD_EXP 57
16087: AND
16088: IFFALSE 16194
16090: GO 16092
16092: DISABLE
16093: LD_INT 0
16095: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16096: LD_ADDR_VAR 0 1
16100: PUSH
16101: LD_INT 22
16103: PUSH
16104: LD_OWVAR 2
16108: PUSH
16109: EMPTY
16110: LIST
16111: LIST
16112: PUSH
16113: LD_INT 2
16115: PUSH
16116: LD_INT 30
16118: PUSH
16119: LD_INT 0
16121: PUSH
16122: EMPTY
16123: LIST
16124: LIST
16125: PUSH
16126: LD_INT 30
16128: PUSH
16129: LD_INT 1
16131: PUSH
16132: EMPTY
16133: LIST
16134: LIST
16135: PUSH
16136: EMPTY
16137: LIST
16138: LIST
16139: LIST
16140: PUSH
16141: EMPTY
16142: LIST
16143: LIST
16144: PPUSH
16145: CALL_OW 69
16149: ST_TO_ADDR
// if not depot then
16150: LD_VAR 0 1
16154: NOT
16155: IFFALSE 16159
// exit ;
16157: GO 16194
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
16159: LD_VAR 0 1
16163: PUSH
16164: LD_INT 1
16166: ARRAY
16167: PPUSH
16168: CALL_OW 250
16172: PPUSH
16173: LD_VAR 0 1
16177: PUSH
16178: LD_INT 1
16180: ARRAY
16181: PPUSH
16182: CALL_OW 251
16186: PPUSH
16187: LD_INT 70
16189: PPUSH
16190: CALL_OW 495
// end ;
16194: PPOPN 1
16196: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
16197: LD_EXP 24
16201: PUSH
16202: LD_EXP 58
16206: AND
16207: IFFALSE 16418
16209: GO 16211
16211: DISABLE
16212: LD_INT 0
16214: PPUSH
16215: PPUSH
16216: PPUSH
16217: PPUSH
16218: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16219: LD_ADDR_VAR 0 5
16223: PUSH
16224: LD_INT 22
16226: PUSH
16227: LD_OWVAR 2
16231: PUSH
16232: EMPTY
16233: LIST
16234: LIST
16235: PUSH
16236: LD_INT 21
16238: PUSH
16239: LD_INT 1
16241: PUSH
16242: EMPTY
16243: LIST
16244: LIST
16245: PUSH
16246: EMPTY
16247: LIST
16248: LIST
16249: PPUSH
16250: CALL_OW 69
16254: ST_TO_ADDR
// if not tmp then
16255: LD_VAR 0 5
16259: NOT
16260: IFFALSE 16264
// exit ;
16262: GO 16418
// for i in tmp do
16264: LD_ADDR_VAR 0 1
16268: PUSH
16269: LD_VAR 0 5
16273: PUSH
16274: FOR_IN
16275: IFFALSE 16416
// begin d := rand ( 0 , 5 ) ;
16277: LD_ADDR_VAR 0 4
16281: PUSH
16282: LD_INT 0
16284: PPUSH
16285: LD_INT 5
16287: PPUSH
16288: CALL_OW 12
16292: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
16293: LD_ADDR_VAR 0 2
16297: PUSH
16298: LD_VAR 0 1
16302: PPUSH
16303: CALL_OW 250
16307: PPUSH
16308: LD_VAR 0 4
16312: PPUSH
16313: LD_INT 3
16315: PPUSH
16316: LD_INT 12
16318: PPUSH
16319: CALL_OW 12
16323: PPUSH
16324: CALL_OW 272
16328: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16329: LD_ADDR_VAR 0 3
16333: PUSH
16334: LD_VAR 0 1
16338: PPUSH
16339: CALL_OW 251
16343: PPUSH
16344: LD_VAR 0 4
16348: PPUSH
16349: LD_INT 3
16351: PPUSH
16352: LD_INT 12
16354: PPUSH
16355: CALL_OW 12
16359: PPUSH
16360: CALL_OW 273
16364: ST_TO_ADDR
// if ValidHex ( x , y ) then
16365: LD_VAR 0 2
16369: PPUSH
16370: LD_VAR 0 3
16374: PPUSH
16375: CALL_OW 488
16379: IFFALSE 16414
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16381: LD_VAR 0 1
16385: PPUSH
16386: LD_VAR 0 2
16390: PPUSH
16391: LD_VAR 0 3
16395: PPUSH
16396: LD_INT 3
16398: PPUSH
16399: LD_INT 6
16401: PPUSH
16402: CALL_OW 12
16406: PPUSH
16407: LD_INT 1
16409: PPUSH
16410: CALL_OW 483
// end ;
16414: GO 16274
16416: POP
16417: POP
// end ;
16418: PPOPN 5
16420: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16421: LD_EXP 24
16425: PUSH
16426: LD_EXP 59
16430: AND
16431: IFFALSE 16525
16433: GO 16435
16435: DISABLE
16436: LD_INT 0
16438: PPUSH
16439: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16440: LD_ADDR_VAR 0 2
16444: PUSH
16445: LD_INT 22
16447: PUSH
16448: LD_OWVAR 2
16452: PUSH
16453: EMPTY
16454: LIST
16455: LIST
16456: PUSH
16457: LD_INT 32
16459: PUSH
16460: LD_INT 1
16462: PUSH
16463: EMPTY
16464: LIST
16465: LIST
16466: PUSH
16467: LD_INT 21
16469: PUSH
16470: LD_INT 2
16472: PUSH
16473: EMPTY
16474: LIST
16475: LIST
16476: PUSH
16477: EMPTY
16478: LIST
16479: LIST
16480: LIST
16481: PPUSH
16482: CALL_OW 69
16486: ST_TO_ADDR
// if not tmp then
16487: LD_VAR 0 2
16491: NOT
16492: IFFALSE 16496
// exit ;
16494: GO 16525
// for i in tmp do
16496: LD_ADDR_VAR 0 1
16500: PUSH
16501: LD_VAR 0 2
16505: PUSH
16506: FOR_IN
16507: IFFALSE 16523
// SetFuel ( i , 0 ) ;
16509: LD_VAR 0 1
16513: PPUSH
16514: LD_INT 0
16516: PPUSH
16517: CALL_OW 240
16521: GO 16506
16523: POP
16524: POP
// end ;
16525: PPOPN 2
16527: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16528: LD_EXP 24
16532: PUSH
16533: LD_EXP 60
16537: AND
16538: IFFALSE 16604
16540: GO 16542
16542: DISABLE
16543: LD_INT 0
16545: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16546: LD_ADDR_VAR 0 1
16550: PUSH
16551: LD_INT 22
16553: PUSH
16554: LD_OWVAR 2
16558: PUSH
16559: EMPTY
16560: LIST
16561: LIST
16562: PUSH
16563: LD_INT 30
16565: PUSH
16566: LD_INT 29
16568: PUSH
16569: EMPTY
16570: LIST
16571: LIST
16572: PUSH
16573: EMPTY
16574: LIST
16575: LIST
16576: PPUSH
16577: CALL_OW 69
16581: ST_TO_ADDR
// if not tmp then
16582: LD_VAR 0 1
16586: NOT
16587: IFFALSE 16591
// exit ;
16589: GO 16604
// DestroyUnit ( tmp [ 1 ] ) ;
16591: LD_VAR 0 1
16595: PUSH
16596: LD_INT 1
16598: ARRAY
16599: PPUSH
16600: CALL_OW 65
// end ;
16604: PPOPN 1
16606: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16607: LD_EXP 24
16611: PUSH
16612: LD_EXP 62
16616: AND
16617: IFFALSE 16746
16619: GO 16621
16621: DISABLE
16622: LD_INT 0
16624: PPUSH
// begin uc_side := 0 ;
16625: LD_ADDR_OWVAR 20
16629: PUSH
16630: LD_INT 0
16632: ST_TO_ADDR
// uc_nation := nation_arabian ;
16633: LD_ADDR_OWVAR 21
16637: PUSH
16638: LD_INT 2
16640: ST_TO_ADDR
// hc_gallery :=  ;
16641: LD_ADDR_OWVAR 33
16645: PUSH
16646: LD_STRING 
16648: ST_TO_ADDR
// hc_name :=  ;
16649: LD_ADDR_OWVAR 26
16653: PUSH
16654: LD_STRING 
16656: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
16657: LD_INT 1
16659: PPUSH
16660: LD_INT 11
16662: PPUSH
16663: LD_INT 10
16665: PPUSH
16666: CALL_OW 380
// un := CreateHuman ;
16670: LD_ADDR_VAR 0 1
16674: PUSH
16675: CALL_OW 44
16679: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16680: LD_VAR 0 1
16684: PPUSH
16685: LD_INT 1
16687: PPUSH
16688: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16692: LD_INT 35
16694: PPUSH
16695: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16699: LD_VAR 0 1
16703: PPUSH
16704: LD_INT 22
16706: PUSH
16707: LD_OWVAR 2
16711: PUSH
16712: EMPTY
16713: LIST
16714: LIST
16715: PPUSH
16716: CALL_OW 69
16720: PPUSH
16721: LD_VAR 0 1
16725: PPUSH
16726: CALL_OW 74
16730: PPUSH
16731: CALL_OW 115
// until IsDead ( un ) ;
16735: LD_VAR 0 1
16739: PPUSH
16740: CALL_OW 301
16744: IFFALSE 16692
// end ;
16746: PPOPN 1
16748: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
16749: LD_EXP 24
16753: PUSH
16754: LD_EXP 64
16758: AND
16759: IFFALSE 16771
16761: GO 16763
16763: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
16764: LD_STRING earthquake(getX(game), 0, 32)
16766: PPUSH
16767: CALL_OW 559
16771: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
16772: LD_EXP 24
16776: PUSH
16777: LD_EXP 65
16781: AND
16782: IFFALSE 16873
16784: GO 16786
16786: DISABLE
16787: LD_INT 0
16789: PPUSH
// begin enable ;
16790: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
16791: LD_ADDR_VAR 0 1
16795: PUSH
16796: LD_INT 22
16798: PUSH
16799: LD_OWVAR 2
16803: PUSH
16804: EMPTY
16805: LIST
16806: LIST
16807: PUSH
16808: LD_INT 21
16810: PUSH
16811: LD_INT 2
16813: PUSH
16814: EMPTY
16815: LIST
16816: LIST
16817: PUSH
16818: LD_INT 33
16820: PUSH
16821: LD_INT 3
16823: PUSH
16824: EMPTY
16825: LIST
16826: LIST
16827: PUSH
16828: EMPTY
16829: LIST
16830: LIST
16831: LIST
16832: PPUSH
16833: CALL_OW 69
16837: ST_TO_ADDR
// if not tmp then
16838: LD_VAR 0 1
16842: NOT
16843: IFFALSE 16847
// exit ;
16845: GO 16873
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16847: LD_VAR 0 1
16851: PUSH
16852: LD_INT 1
16854: PPUSH
16855: LD_VAR 0 1
16859: PPUSH
16860: CALL_OW 12
16864: ARRAY
16865: PPUSH
16866: LD_INT 1
16868: PPUSH
16869: CALL_OW 234
// end ;
16873: PPOPN 1
16875: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
16876: LD_EXP 24
16880: PUSH
16881: LD_EXP 66
16885: AND
16886: IFFALSE 17027
16888: GO 16890
16890: DISABLE
16891: LD_INT 0
16893: PPUSH
16894: PPUSH
16895: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16896: LD_ADDR_VAR 0 3
16900: PUSH
16901: LD_INT 22
16903: PUSH
16904: LD_OWVAR 2
16908: PUSH
16909: EMPTY
16910: LIST
16911: LIST
16912: PUSH
16913: LD_INT 25
16915: PUSH
16916: LD_INT 1
16918: PUSH
16919: EMPTY
16920: LIST
16921: LIST
16922: PUSH
16923: EMPTY
16924: LIST
16925: LIST
16926: PPUSH
16927: CALL_OW 69
16931: ST_TO_ADDR
// if not tmp then
16932: LD_VAR 0 3
16936: NOT
16937: IFFALSE 16941
// exit ;
16939: GO 17027
// un := tmp [ rand ( 1 , tmp ) ] ;
16941: LD_ADDR_VAR 0 2
16945: PUSH
16946: LD_VAR 0 3
16950: PUSH
16951: LD_INT 1
16953: PPUSH
16954: LD_VAR 0 3
16958: PPUSH
16959: CALL_OW 12
16963: ARRAY
16964: ST_TO_ADDR
// if Crawls ( un ) then
16965: LD_VAR 0 2
16969: PPUSH
16970: CALL_OW 318
16974: IFFALSE 16985
// ComWalk ( un ) ;
16976: LD_VAR 0 2
16980: PPUSH
16981: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
16985: LD_VAR 0 2
16989: PPUSH
16990: LD_INT 9
16992: PPUSH
16993: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
16997: LD_INT 28
16999: PPUSH
17000: LD_OWVAR 2
17004: PPUSH
17005: LD_INT 2
17007: PPUSH
17008: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17012: LD_INT 29
17014: PPUSH
17015: LD_OWVAR 2
17019: PPUSH
17020: LD_INT 2
17022: PPUSH
17023: CALL_OW 322
// end ;
17027: PPOPN 3
17029: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
17030: LD_EXP 24
17034: PUSH
17035: LD_EXP 67
17039: AND
17040: IFFALSE 17151
17042: GO 17044
17044: DISABLE
17045: LD_INT 0
17047: PPUSH
17048: PPUSH
17049: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17050: LD_ADDR_VAR 0 3
17054: PUSH
17055: LD_INT 22
17057: PUSH
17058: LD_OWVAR 2
17062: PUSH
17063: EMPTY
17064: LIST
17065: LIST
17066: PUSH
17067: LD_INT 25
17069: PUSH
17070: LD_INT 1
17072: PUSH
17073: EMPTY
17074: LIST
17075: LIST
17076: PUSH
17077: EMPTY
17078: LIST
17079: LIST
17080: PPUSH
17081: CALL_OW 69
17085: ST_TO_ADDR
// if not tmp then
17086: LD_VAR 0 3
17090: NOT
17091: IFFALSE 17095
// exit ;
17093: GO 17151
// un := tmp [ rand ( 1 , tmp ) ] ;
17095: LD_ADDR_VAR 0 2
17099: PUSH
17100: LD_VAR 0 3
17104: PUSH
17105: LD_INT 1
17107: PPUSH
17108: LD_VAR 0 3
17112: PPUSH
17113: CALL_OW 12
17117: ARRAY
17118: ST_TO_ADDR
// if Crawls ( un ) then
17119: LD_VAR 0 2
17123: PPUSH
17124: CALL_OW 318
17128: IFFALSE 17139
// ComWalk ( un ) ;
17130: LD_VAR 0 2
17134: PPUSH
17135: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17139: LD_VAR 0 2
17143: PPUSH
17144: LD_INT 8
17146: PPUSH
17147: CALL_OW 336
// end ;
17151: PPOPN 3
17153: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
17154: LD_EXP 24
17158: PUSH
17159: LD_EXP 68
17163: AND
17164: IFFALSE 17308
17166: GO 17168
17168: DISABLE
17169: LD_INT 0
17171: PPUSH
17172: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
17173: LD_ADDR_VAR 0 2
17177: PUSH
17178: LD_INT 22
17180: PUSH
17181: LD_OWVAR 2
17185: PUSH
17186: EMPTY
17187: LIST
17188: LIST
17189: PUSH
17190: LD_INT 21
17192: PUSH
17193: LD_INT 2
17195: PUSH
17196: EMPTY
17197: LIST
17198: LIST
17199: PUSH
17200: LD_INT 2
17202: PUSH
17203: LD_INT 34
17205: PUSH
17206: LD_INT 12
17208: PUSH
17209: EMPTY
17210: LIST
17211: LIST
17212: PUSH
17213: LD_INT 34
17215: PUSH
17216: LD_INT 51
17218: PUSH
17219: EMPTY
17220: LIST
17221: LIST
17222: PUSH
17223: LD_INT 34
17225: PUSH
17226: LD_INT 32
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: PUSH
17233: EMPTY
17234: LIST
17235: LIST
17236: LIST
17237: LIST
17238: PUSH
17239: EMPTY
17240: LIST
17241: LIST
17242: LIST
17243: PPUSH
17244: CALL_OW 69
17248: ST_TO_ADDR
// if not tmp then
17249: LD_VAR 0 2
17253: NOT
17254: IFFALSE 17258
// exit ;
17256: GO 17308
// for i in tmp do
17258: LD_ADDR_VAR 0 1
17262: PUSH
17263: LD_VAR 0 2
17267: PUSH
17268: FOR_IN
17269: IFFALSE 17306
// if GetCargo ( i , mat_artifact ) = 0 then
17271: LD_VAR 0 1
17275: PPUSH
17276: LD_INT 4
17278: PPUSH
17279: CALL_OW 289
17283: PUSH
17284: LD_INT 0
17286: EQUAL
17287: IFFALSE 17304
// SetCargo ( i , mat_siberit , 100 ) ;
17289: LD_VAR 0 1
17293: PPUSH
17294: LD_INT 3
17296: PPUSH
17297: LD_INT 100
17299: PPUSH
17300: CALL_OW 290
17304: GO 17268
17306: POP
17307: POP
// end ;
17308: PPOPN 2
17310: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
17311: LD_EXP 24
17315: PUSH
17316: LD_EXP 69
17320: AND
17321: IFFALSE 17504
17323: GO 17325
17325: DISABLE
17326: LD_INT 0
17328: PPUSH
17329: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17330: LD_ADDR_VAR 0 2
17334: PUSH
17335: LD_INT 22
17337: PUSH
17338: LD_OWVAR 2
17342: PUSH
17343: EMPTY
17344: LIST
17345: LIST
17346: PPUSH
17347: CALL_OW 69
17351: ST_TO_ADDR
// if not tmp then
17352: LD_VAR 0 2
17356: NOT
17357: IFFALSE 17361
// exit ;
17359: GO 17504
// for i := 1 to 2 do
17361: LD_ADDR_VAR 0 1
17365: PUSH
17366: DOUBLE
17367: LD_INT 1
17369: DEC
17370: ST_TO_ADDR
17371: LD_INT 2
17373: PUSH
17374: FOR_TO
17375: IFFALSE 17502
// begin uc_side := your_side ;
17377: LD_ADDR_OWVAR 20
17381: PUSH
17382: LD_OWVAR 2
17386: ST_TO_ADDR
// uc_nation := nation_american ;
17387: LD_ADDR_OWVAR 21
17391: PUSH
17392: LD_INT 1
17394: ST_TO_ADDR
// vc_chassis := us_morphling ;
17395: LD_ADDR_OWVAR 37
17399: PUSH
17400: LD_INT 5
17402: ST_TO_ADDR
// vc_engine := engine_siberite ;
17403: LD_ADDR_OWVAR 39
17407: PUSH
17408: LD_INT 3
17410: ST_TO_ADDR
// vc_control := control_computer ;
17411: LD_ADDR_OWVAR 38
17415: PUSH
17416: LD_INT 3
17418: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17419: LD_ADDR_OWVAR 40
17423: PUSH
17424: LD_INT 10
17426: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17427: LD_VAR 0 2
17431: PUSH
17432: LD_INT 1
17434: ARRAY
17435: PPUSH
17436: CALL_OW 310
17440: NOT
17441: IFFALSE 17488
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17443: CALL_OW 45
17447: PPUSH
17448: LD_VAR 0 2
17452: PUSH
17453: LD_INT 1
17455: ARRAY
17456: PPUSH
17457: CALL_OW 250
17461: PPUSH
17462: LD_VAR 0 2
17466: PUSH
17467: LD_INT 1
17469: ARRAY
17470: PPUSH
17471: CALL_OW 251
17475: PPUSH
17476: LD_INT 12
17478: PPUSH
17479: LD_INT 1
17481: PPUSH
17482: CALL_OW 50
17486: GO 17500
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17488: CALL_OW 45
17492: PPUSH
17493: LD_INT 1
17495: PPUSH
17496: CALL_OW 51
// end ;
17500: GO 17374
17502: POP
17503: POP
// end ;
17504: PPOPN 2
17506: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17507: LD_EXP 24
17511: PUSH
17512: LD_EXP 70
17516: AND
17517: IFFALSE 17739
17519: GO 17521
17521: DISABLE
17522: LD_INT 0
17524: PPUSH
17525: PPUSH
17526: PPUSH
17527: PPUSH
17528: PPUSH
17529: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17530: LD_ADDR_VAR 0 6
17534: PUSH
17535: LD_INT 22
17537: PUSH
17538: LD_OWVAR 2
17542: PUSH
17543: EMPTY
17544: LIST
17545: LIST
17546: PUSH
17547: LD_INT 21
17549: PUSH
17550: LD_INT 1
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: PUSH
17557: LD_INT 3
17559: PUSH
17560: LD_INT 23
17562: PUSH
17563: LD_INT 0
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: EMPTY
17571: LIST
17572: LIST
17573: PUSH
17574: EMPTY
17575: LIST
17576: LIST
17577: LIST
17578: PPUSH
17579: CALL_OW 69
17583: ST_TO_ADDR
// if not tmp then
17584: LD_VAR 0 6
17588: NOT
17589: IFFALSE 17593
// exit ;
17591: GO 17739
// s1 := rand ( 1 , 4 ) ;
17593: LD_ADDR_VAR 0 2
17597: PUSH
17598: LD_INT 1
17600: PPUSH
17601: LD_INT 4
17603: PPUSH
17604: CALL_OW 12
17608: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17609: LD_ADDR_VAR 0 4
17613: PUSH
17614: LD_VAR 0 6
17618: PUSH
17619: LD_INT 1
17621: ARRAY
17622: PPUSH
17623: LD_VAR 0 2
17627: PPUSH
17628: CALL_OW 259
17632: ST_TO_ADDR
// if s1 = 1 then
17633: LD_VAR 0 2
17637: PUSH
17638: LD_INT 1
17640: EQUAL
17641: IFFALSE 17661
// s2 := rand ( 2 , 4 ) else
17643: LD_ADDR_VAR 0 3
17647: PUSH
17648: LD_INT 2
17650: PPUSH
17651: LD_INT 4
17653: PPUSH
17654: CALL_OW 12
17658: ST_TO_ADDR
17659: GO 17669
// s2 := 1 ;
17661: LD_ADDR_VAR 0 3
17665: PUSH
17666: LD_INT 1
17668: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
17669: LD_ADDR_VAR 0 5
17673: PUSH
17674: LD_VAR 0 6
17678: PUSH
17679: LD_INT 1
17681: ARRAY
17682: PPUSH
17683: LD_VAR 0 3
17687: PPUSH
17688: CALL_OW 259
17692: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
17693: LD_VAR 0 6
17697: PUSH
17698: LD_INT 1
17700: ARRAY
17701: PPUSH
17702: LD_VAR 0 2
17706: PPUSH
17707: LD_VAR 0 5
17711: PPUSH
17712: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
17716: LD_VAR 0 6
17720: PUSH
17721: LD_INT 1
17723: ARRAY
17724: PPUSH
17725: LD_VAR 0 3
17729: PPUSH
17730: LD_VAR 0 4
17734: PPUSH
17735: CALL_OW 237
// end ;
17739: PPOPN 6
17741: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
17742: LD_EXP 24
17746: PUSH
17747: LD_EXP 71
17751: AND
17752: IFFALSE 17831
17754: GO 17756
17756: DISABLE
17757: LD_INT 0
17759: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
17760: LD_ADDR_VAR 0 1
17764: PUSH
17765: LD_INT 22
17767: PUSH
17768: LD_OWVAR 2
17772: PUSH
17773: EMPTY
17774: LIST
17775: LIST
17776: PUSH
17777: LD_INT 30
17779: PUSH
17780: LD_INT 3
17782: PUSH
17783: EMPTY
17784: LIST
17785: LIST
17786: PUSH
17787: EMPTY
17788: LIST
17789: LIST
17790: PPUSH
17791: CALL_OW 69
17795: ST_TO_ADDR
// if not tmp then
17796: LD_VAR 0 1
17800: NOT
17801: IFFALSE 17805
// exit ;
17803: GO 17831
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17805: LD_VAR 0 1
17809: PUSH
17810: LD_INT 1
17812: PPUSH
17813: LD_VAR 0 1
17817: PPUSH
17818: CALL_OW 12
17822: ARRAY
17823: PPUSH
17824: LD_INT 1
17826: PPUSH
17827: CALL_OW 234
// end ;
17831: PPOPN 1
17833: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17834: LD_EXP 24
17838: PUSH
17839: LD_EXP 72
17843: AND
17844: IFFALSE 17956
17846: GO 17848
17848: DISABLE
17849: LD_INT 0
17851: PPUSH
17852: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
17853: LD_ADDR_VAR 0 2
17857: PUSH
17858: LD_INT 22
17860: PUSH
17861: LD_OWVAR 2
17865: PUSH
17866: EMPTY
17867: LIST
17868: LIST
17869: PUSH
17870: LD_INT 2
17872: PUSH
17873: LD_INT 30
17875: PUSH
17876: LD_INT 27
17878: PUSH
17879: EMPTY
17880: LIST
17881: LIST
17882: PUSH
17883: LD_INT 30
17885: PUSH
17886: LD_INT 26
17888: PUSH
17889: EMPTY
17890: LIST
17891: LIST
17892: PUSH
17893: LD_INT 30
17895: PUSH
17896: LD_INT 28
17898: PUSH
17899: EMPTY
17900: LIST
17901: LIST
17902: PUSH
17903: EMPTY
17904: LIST
17905: LIST
17906: LIST
17907: LIST
17908: PUSH
17909: EMPTY
17910: LIST
17911: LIST
17912: PPUSH
17913: CALL_OW 69
17917: ST_TO_ADDR
// if not tmp then
17918: LD_VAR 0 2
17922: NOT
17923: IFFALSE 17927
// exit ;
17925: GO 17956
// for i in tmp do
17927: LD_ADDR_VAR 0 1
17931: PUSH
17932: LD_VAR 0 2
17936: PUSH
17937: FOR_IN
17938: IFFALSE 17954
// SetLives ( i , 1 ) ;
17940: LD_VAR 0 1
17944: PPUSH
17945: LD_INT 1
17947: PPUSH
17948: CALL_OW 234
17952: GO 17937
17954: POP
17955: POP
// end ;
17956: PPOPN 2
17958: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
17959: LD_EXP 24
17963: PUSH
17964: LD_EXP 73
17968: AND
17969: IFFALSE 18256
17971: GO 17973
17973: DISABLE
17974: LD_INT 0
17976: PPUSH
17977: PPUSH
17978: PPUSH
// begin i := rand ( 1 , 7 ) ;
17979: LD_ADDR_VAR 0 1
17983: PUSH
17984: LD_INT 1
17986: PPUSH
17987: LD_INT 7
17989: PPUSH
17990: CALL_OW 12
17994: ST_TO_ADDR
// case i of 1 :
17995: LD_VAR 0 1
17999: PUSH
18000: LD_INT 1
18002: DOUBLE
18003: EQUAL
18004: IFTRUE 18008
18006: GO 18018
18008: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18009: LD_STRING earthquake(getX(game), 0, 32)
18011: PPUSH
18012: CALL_OW 559
18016: GO 18256
18018: LD_INT 2
18020: DOUBLE
18021: EQUAL
18022: IFTRUE 18026
18024: GO 18040
18026: POP
// begin ToLua ( displayStucuk(); ) ;
18027: LD_STRING displayStucuk();
18029: PPUSH
18030: CALL_OW 559
// ResetFog ;
18034: CALL_OW 335
// end ; 3 :
18038: GO 18256
18040: LD_INT 3
18042: DOUBLE
18043: EQUAL
18044: IFTRUE 18048
18046: GO 18152
18048: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18049: LD_ADDR_VAR 0 2
18053: PUSH
18054: LD_INT 22
18056: PUSH
18057: LD_OWVAR 2
18061: PUSH
18062: EMPTY
18063: LIST
18064: LIST
18065: PUSH
18066: LD_INT 25
18068: PUSH
18069: LD_INT 1
18071: PUSH
18072: EMPTY
18073: LIST
18074: LIST
18075: PUSH
18076: EMPTY
18077: LIST
18078: LIST
18079: PPUSH
18080: CALL_OW 69
18084: ST_TO_ADDR
// if not tmp then
18085: LD_VAR 0 2
18089: NOT
18090: IFFALSE 18094
// exit ;
18092: GO 18256
// un := tmp [ rand ( 1 , tmp ) ] ;
18094: LD_ADDR_VAR 0 3
18098: PUSH
18099: LD_VAR 0 2
18103: PUSH
18104: LD_INT 1
18106: PPUSH
18107: LD_VAR 0 2
18111: PPUSH
18112: CALL_OW 12
18116: ARRAY
18117: ST_TO_ADDR
// if Crawls ( un ) then
18118: LD_VAR 0 3
18122: PPUSH
18123: CALL_OW 318
18127: IFFALSE 18138
// ComWalk ( un ) ;
18129: LD_VAR 0 3
18133: PPUSH
18134: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18138: LD_VAR 0 3
18142: PPUSH
18143: LD_INT 8
18145: PPUSH
18146: CALL_OW 336
// end ; 4 :
18150: GO 18256
18152: LD_INT 4
18154: DOUBLE
18155: EQUAL
18156: IFTRUE 18160
18158: GO 18234
18160: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
18161: LD_ADDR_VAR 0 2
18165: PUSH
18166: LD_INT 22
18168: PUSH
18169: LD_OWVAR 2
18173: PUSH
18174: EMPTY
18175: LIST
18176: LIST
18177: PUSH
18178: LD_INT 30
18180: PUSH
18181: LD_INT 29
18183: PUSH
18184: EMPTY
18185: LIST
18186: LIST
18187: PUSH
18188: EMPTY
18189: LIST
18190: LIST
18191: PPUSH
18192: CALL_OW 69
18196: ST_TO_ADDR
// if not tmp then
18197: LD_VAR 0 2
18201: NOT
18202: IFFALSE 18206
// exit ;
18204: GO 18256
// CenterNowOnUnits ( tmp [ 1 ] ) ;
18206: LD_VAR 0 2
18210: PUSH
18211: LD_INT 1
18213: ARRAY
18214: PPUSH
18215: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
18219: LD_VAR 0 2
18223: PUSH
18224: LD_INT 1
18226: ARRAY
18227: PPUSH
18228: CALL_OW 65
// end ; 5 .. 7 :
18232: GO 18256
18234: LD_INT 5
18236: DOUBLE
18237: GREATEREQUAL
18238: IFFALSE 18246
18240: LD_INT 7
18242: DOUBLE
18243: LESSEQUAL
18244: IFTRUE 18248
18246: GO 18255
18248: POP
// StreamSibBomb ; end ;
18249: CALL 14493 0 0
18253: GO 18256
18255: POP
// end ;
18256: PPOPN 3
18258: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
18259: LD_EXP 24
18263: PUSH
18264: LD_EXP 74
18268: AND
18269: IFFALSE 18425
18271: GO 18273
18273: DISABLE
18274: LD_INT 0
18276: PPUSH
18277: PPUSH
18278: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
18279: LD_ADDR_VAR 0 2
18283: PUSH
18284: LD_INT 81
18286: PUSH
18287: LD_OWVAR 2
18291: PUSH
18292: EMPTY
18293: LIST
18294: LIST
18295: PUSH
18296: LD_INT 2
18298: PUSH
18299: LD_INT 21
18301: PUSH
18302: LD_INT 1
18304: PUSH
18305: EMPTY
18306: LIST
18307: LIST
18308: PUSH
18309: LD_INT 21
18311: PUSH
18312: LD_INT 2
18314: PUSH
18315: EMPTY
18316: LIST
18317: LIST
18318: PUSH
18319: EMPTY
18320: LIST
18321: LIST
18322: LIST
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: PPUSH
18328: CALL_OW 69
18332: ST_TO_ADDR
// if not tmp then
18333: LD_VAR 0 2
18337: NOT
18338: IFFALSE 18342
// exit ;
18340: GO 18425
// p := 0 ;
18342: LD_ADDR_VAR 0 3
18346: PUSH
18347: LD_INT 0
18349: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18350: LD_INT 35
18352: PPUSH
18353: CALL_OW 67
// p := p + 1 ;
18357: LD_ADDR_VAR 0 3
18361: PUSH
18362: LD_VAR 0 3
18366: PUSH
18367: LD_INT 1
18369: PLUS
18370: ST_TO_ADDR
// for i in tmp do
18371: LD_ADDR_VAR 0 1
18375: PUSH
18376: LD_VAR 0 2
18380: PUSH
18381: FOR_IN
18382: IFFALSE 18413
// if GetLives ( i ) < 1000 then
18384: LD_VAR 0 1
18388: PPUSH
18389: CALL_OW 256
18393: PUSH
18394: LD_INT 1000
18396: LESS
18397: IFFALSE 18411
// SetLives ( i , 1000 ) ;
18399: LD_VAR 0 1
18403: PPUSH
18404: LD_INT 1000
18406: PPUSH
18407: CALL_OW 234
18411: GO 18381
18413: POP
18414: POP
// until p > 20 ;
18415: LD_VAR 0 3
18419: PUSH
18420: LD_INT 20
18422: GREATER
18423: IFFALSE 18350
// end ;
18425: PPOPN 3
18427: END
// every 0 0$1 trigger StreamModeActive and sTime do
18428: LD_EXP 24
18432: PUSH
18433: LD_EXP 75
18437: AND
18438: IFFALSE 18473
18440: GO 18442
18442: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18443: LD_INT 28
18445: PPUSH
18446: LD_OWVAR 2
18450: PPUSH
18451: LD_INT 2
18453: PPUSH
18454: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18458: LD_INT 30
18460: PPUSH
18461: LD_OWVAR 2
18465: PPUSH
18466: LD_INT 2
18468: PPUSH
18469: CALL_OW 322
// end ;
18473: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18474: LD_EXP 24
18478: PUSH
18479: LD_EXP 76
18483: AND
18484: IFFALSE 18605
18486: GO 18488
18488: DISABLE
18489: LD_INT 0
18491: PPUSH
18492: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18493: LD_ADDR_VAR 0 2
18497: PUSH
18498: LD_INT 22
18500: PUSH
18501: LD_OWVAR 2
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: PUSH
18510: LD_INT 21
18512: PUSH
18513: LD_INT 1
18515: PUSH
18516: EMPTY
18517: LIST
18518: LIST
18519: PUSH
18520: LD_INT 3
18522: PUSH
18523: LD_INT 23
18525: PUSH
18526: LD_INT 0
18528: PUSH
18529: EMPTY
18530: LIST
18531: LIST
18532: PUSH
18533: EMPTY
18534: LIST
18535: LIST
18536: PUSH
18537: EMPTY
18538: LIST
18539: LIST
18540: LIST
18541: PPUSH
18542: CALL_OW 69
18546: ST_TO_ADDR
// if not tmp then
18547: LD_VAR 0 2
18551: NOT
18552: IFFALSE 18556
// exit ;
18554: GO 18605
// for i in tmp do
18556: LD_ADDR_VAR 0 1
18560: PUSH
18561: LD_VAR 0 2
18565: PUSH
18566: FOR_IN
18567: IFFALSE 18603
// begin if Crawls ( i ) then
18569: LD_VAR 0 1
18573: PPUSH
18574: CALL_OW 318
18578: IFFALSE 18589
// ComWalk ( i ) ;
18580: LD_VAR 0 1
18584: PPUSH
18585: CALL_OW 138
// SetClass ( i , 2 ) ;
18589: LD_VAR 0 1
18593: PPUSH
18594: LD_INT 2
18596: PPUSH
18597: CALL_OW 336
// end ;
18601: GO 18566
18603: POP
18604: POP
// end ;
18605: PPOPN 2
18607: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18608: LD_EXP 24
18612: PUSH
18613: LD_EXP 77
18617: AND
18618: IFFALSE 18906
18620: GO 18622
18622: DISABLE
18623: LD_INT 0
18625: PPUSH
18626: PPUSH
18627: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18628: LD_OWVAR 2
18632: PPUSH
18633: LD_INT 9
18635: PPUSH
18636: LD_INT 1
18638: PPUSH
18639: LD_INT 1
18641: PPUSH
18642: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
18646: LD_INT 9
18648: PPUSH
18649: LD_OWVAR 2
18653: PPUSH
18654: CALL_OW 343
// uc_side := 9 ;
18658: LD_ADDR_OWVAR 20
18662: PUSH
18663: LD_INT 9
18665: ST_TO_ADDR
// uc_nation := 2 ;
18666: LD_ADDR_OWVAR 21
18670: PUSH
18671: LD_INT 2
18673: ST_TO_ADDR
// hc_name := Dark Warrior ;
18674: LD_ADDR_OWVAR 26
18678: PUSH
18679: LD_STRING Dark Warrior
18681: ST_TO_ADDR
// hc_gallery :=  ;
18682: LD_ADDR_OWVAR 33
18686: PUSH
18687: LD_STRING 
18689: ST_TO_ADDR
// hc_noskilllimit := true ;
18690: LD_ADDR_OWVAR 76
18694: PUSH
18695: LD_INT 1
18697: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
18698: LD_ADDR_OWVAR 31
18702: PUSH
18703: LD_INT 30
18705: PUSH
18706: LD_INT 30
18708: PUSH
18709: LD_INT 30
18711: PUSH
18712: LD_INT 30
18714: PUSH
18715: EMPTY
18716: LIST
18717: LIST
18718: LIST
18719: LIST
18720: ST_TO_ADDR
// un := CreateHuman ;
18721: LD_ADDR_VAR 0 3
18725: PUSH
18726: CALL_OW 44
18730: ST_TO_ADDR
// hc_noskilllimit := false ;
18731: LD_ADDR_OWVAR 76
18735: PUSH
18736: LD_INT 0
18738: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18739: LD_VAR 0 3
18743: PPUSH
18744: LD_INT 1
18746: PPUSH
18747: CALL_OW 51
// ToLua ( playRanger() ) ;
18751: LD_STRING playRanger()
18753: PPUSH
18754: CALL_OW 559
// p := 0 ;
18758: LD_ADDR_VAR 0 2
18762: PUSH
18763: LD_INT 0
18765: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18766: LD_INT 35
18768: PPUSH
18769: CALL_OW 67
// p := p + 1 ;
18773: LD_ADDR_VAR 0 2
18777: PUSH
18778: LD_VAR 0 2
18782: PUSH
18783: LD_INT 1
18785: PLUS
18786: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
18787: LD_VAR 0 3
18791: PPUSH
18792: CALL_OW 256
18796: PUSH
18797: LD_INT 1000
18799: LESS
18800: IFFALSE 18814
// SetLives ( un , 1000 ) ;
18802: LD_VAR 0 3
18806: PPUSH
18807: LD_INT 1000
18809: PPUSH
18810: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
18814: LD_VAR 0 3
18818: PPUSH
18819: LD_INT 81
18821: PUSH
18822: LD_OWVAR 2
18826: PUSH
18827: EMPTY
18828: LIST
18829: LIST
18830: PUSH
18831: LD_INT 91
18833: PUSH
18834: LD_VAR 0 3
18838: PUSH
18839: LD_INT 30
18841: PUSH
18842: EMPTY
18843: LIST
18844: LIST
18845: LIST
18846: PUSH
18847: EMPTY
18848: LIST
18849: LIST
18850: PPUSH
18851: CALL_OW 69
18855: PPUSH
18856: LD_VAR 0 3
18860: PPUSH
18861: CALL_OW 74
18865: PPUSH
18866: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
18870: LD_VAR 0 2
18874: PUSH
18875: LD_INT 80
18877: GREATER
18878: PUSH
18879: LD_VAR 0 3
18883: PPUSH
18884: CALL_OW 301
18888: OR
18889: IFFALSE 18766
// if un then
18891: LD_VAR 0 3
18895: IFFALSE 18906
// RemoveUnit ( un ) ;
18897: LD_VAR 0 3
18901: PPUSH
18902: CALL_OW 64
// end ;
18906: PPOPN 3
18908: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
18909: LD_EXP 78
18913: IFFALSE 19029
18915: GO 18917
18917: DISABLE
18918: LD_INT 0
18920: PPUSH
18921: PPUSH
18922: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
18923: LD_ADDR_VAR 0 2
18927: PUSH
18928: LD_INT 81
18930: PUSH
18931: LD_OWVAR 2
18935: PUSH
18936: EMPTY
18937: LIST
18938: LIST
18939: PUSH
18940: LD_INT 21
18942: PUSH
18943: LD_INT 1
18945: PUSH
18946: EMPTY
18947: LIST
18948: LIST
18949: PUSH
18950: EMPTY
18951: LIST
18952: LIST
18953: PPUSH
18954: CALL_OW 69
18958: ST_TO_ADDR
// if not tmp then
18959: LD_VAR 0 2
18963: NOT
18964: IFFALSE 18968
// exit ;
18966: GO 19029
// ToLua ( playComputer() ) ;
18968: LD_STRING playComputer()
18970: PPUSH
18971: CALL_OW 559
// for i in tmp do
18975: LD_ADDR_VAR 0 1
18979: PUSH
18980: LD_VAR 0 2
18984: PUSH
18985: FOR_IN
18986: IFFALSE 19027
// for j := 1 to 4 do
18988: LD_ADDR_VAR 0 3
18992: PUSH
18993: DOUBLE
18994: LD_INT 1
18996: DEC
18997: ST_TO_ADDR
18998: LD_INT 4
19000: PUSH
19001: FOR_TO
19002: IFFALSE 19023
// SetSkill ( i , j , 10 ) ;
19004: LD_VAR 0 1
19008: PPUSH
19009: LD_VAR 0 3
19013: PPUSH
19014: LD_INT 10
19016: PPUSH
19017: CALL_OW 237
19021: GO 19001
19023: POP
19024: POP
19025: GO 18985
19027: POP
19028: POP
// end ;
19029: PPOPN 3
19031: END
// every 0 0$1 trigger s30 do var i , tmp ;
19032: LD_EXP 79
19036: IFFALSE 19105
19038: GO 19040
19040: DISABLE
19041: LD_INT 0
19043: PPUSH
19044: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19045: LD_ADDR_VAR 0 2
19049: PUSH
19050: LD_INT 22
19052: PUSH
19053: LD_OWVAR 2
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: PPUSH
19062: CALL_OW 69
19066: ST_TO_ADDR
// if not tmp then
19067: LD_VAR 0 2
19071: NOT
19072: IFFALSE 19076
// exit ;
19074: GO 19105
// for i in tmp do
19076: LD_ADDR_VAR 0 1
19080: PUSH
19081: LD_VAR 0 2
19085: PUSH
19086: FOR_IN
19087: IFFALSE 19103
// SetLives ( i , 300 ) ;
19089: LD_VAR 0 1
19093: PPUSH
19094: LD_INT 300
19096: PPUSH
19097: CALL_OW 234
19101: GO 19086
19103: POP
19104: POP
// end ;
19105: PPOPN 2
19107: END
// every 0 0$1 trigger s60 do var i , tmp ;
19108: LD_EXP 80
19112: IFFALSE 19181
19114: GO 19116
19116: DISABLE
19117: LD_INT 0
19119: PPUSH
19120: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
19121: LD_ADDR_VAR 0 2
19125: PUSH
19126: LD_INT 22
19128: PUSH
19129: LD_OWVAR 2
19133: PUSH
19134: EMPTY
19135: LIST
19136: LIST
19137: PPUSH
19138: CALL_OW 69
19142: ST_TO_ADDR
// if not tmp then
19143: LD_VAR 0 2
19147: NOT
19148: IFFALSE 19152
// exit ;
19150: GO 19181
// for i in tmp do
19152: LD_ADDR_VAR 0 1
19156: PUSH
19157: LD_VAR 0 2
19161: PUSH
19162: FOR_IN
19163: IFFALSE 19179
// SetLives ( i , 600 ) ;
19165: LD_VAR 0 1
19169: PPUSH
19170: LD_INT 600
19172: PPUSH
19173: CALL_OW 234
19177: GO 19162
19179: POP
19180: POP
// end ;
19181: PPOPN 2
19183: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
19184: LD_INT 0
19186: PPUSH
// case cmd of 301 :
19187: LD_VAR 0 1
19191: PUSH
19192: LD_INT 301
19194: DOUBLE
19195: EQUAL
19196: IFTRUE 19200
19198: GO 19232
19200: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
19201: LD_VAR 0 6
19205: PPUSH
19206: LD_VAR 0 7
19210: PPUSH
19211: LD_VAR 0 8
19215: PPUSH
19216: LD_VAR 0 4
19220: PPUSH
19221: LD_VAR 0 5
19225: PPUSH
19226: CALL 20433 0 5
19230: GO 19353
19232: LD_INT 302
19234: DOUBLE
19235: EQUAL
19236: IFTRUE 19240
19238: GO 19277
19240: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
19241: LD_VAR 0 6
19245: PPUSH
19246: LD_VAR 0 7
19250: PPUSH
19251: LD_VAR 0 8
19255: PPUSH
19256: LD_VAR 0 9
19260: PPUSH
19261: LD_VAR 0 4
19265: PPUSH
19266: LD_VAR 0 5
19270: PPUSH
19271: CALL 20524 0 6
19275: GO 19353
19277: LD_INT 303
19279: DOUBLE
19280: EQUAL
19281: IFTRUE 19285
19283: GO 19322
19285: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
19286: LD_VAR 0 6
19290: PPUSH
19291: LD_VAR 0 7
19295: PPUSH
19296: LD_VAR 0 8
19300: PPUSH
19301: LD_VAR 0 9
19305: PPUSH
19306: LD_VAR 0 4
19310: PPUSH
19311: LD_VAR 0 5
19315: PPUSH
19316: CALL 19358 0 6
19320: GO 19353
19322: LD_INT 304
19324: DOUBLE
19325: EQUAL
19326: IFTRUE 19330
19328: GO 19352
19330: POP
// hHackTeleport ( unit , x , y ) ; end ;
19331: LD_VAR 0 2
19335: PPUSH
19336: LD_VAR 0 4
19340: PPUSH
19341: LD_VAR 0 5
19345: PPUSH
19346: CALL 21117 0 3
19350: GO 19353
19352: POP
// end ;
19353: LD_VAR 0 12
19357: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
19358: LD_INT 0
19360: PPUSH
19361: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
19362: LD_VAR 0 1
19366: PUSH
19367: LD_INT 1
19369: LESS
19370: PUSH
19371: LD_VAR 0 1
19375: PUSH
19376: LD_INT 3
19378: GREATER
19379: OR
19380: PUSH
19381: LD_VAR 0 5
19385: PPUSH
19386: LD_VAR 0 6
19390: PPUSH
19391: CALL_OW 428
19395: OR
19396: IFFALSE 19400
// exit ;
19398: GO 20120
// uc_side := your_side ;
19400: LD_ADDR_OWVAR 20
19404: PUSH
19405: LD_OWVAR 2
19409: ST_TO_ADDR
// uc_nation := nation ;
19410: LD_ADDR_OWVAR 21
19414: PUSH
19415: LD_VAR 0 1
19419: ST_TO_ADDR
// bc_level = 1 ;
19420: LD_ADDR_OWVAR 43
19424: PUSH
19425: LD_INT 1
19427: ST_TO_ADDR
// case btype of 1 :
19428: LD_VAR 0 2
19432: PUSH
19433: LD_INT 1
19435: DOUBLE
19436: EQUAL
19437: IFTRUE 19441
19439: GO 19452
19441: POP
// bc_type := b_depot ; 2 :
19442: LD_ADDR_OWVAR 42
19446: PUSH
19447: LD_INT 0
19449: ST_TO_ADDR
19450: GO 20064
19452: LD_INT 2
19454: DOUBLE
19455: EQUAL
19456: IFTRUE 19460
19458: GO 19471
19460: POP
// bc_type := b_warehouse ; 3 :
19461: LD_ADDR_OWVAR 42
19465: PUSH
19466: LD_INT 1
19468: ST_TO_ADDR
19469: GO 20064
19471: LD_INT 3
19473: DOUBLE
19474: EQUAL
19475: IFTRUE 19479
19477: GO 19490
19479: POP
// bc_type := b_lab ; 4 .. 9 :
19480: LD_ADDR_OWVAR 42
19484: PUSH
19485: LD_INT 6
19487: ST_TO_ADDR
19488: GO 20064
19490: LD_INT 4
19492: DOUBLE
19493: GREATEREQUAL
19494: IFFALSE 19502
19496: LD_INT 9
19498: DOUBLE
19499: LESSEQUAL
19500: IFTRUE 19504
19502: GO 19556
19504: POP
// begin bc_type := b_lab_half ;
19505: LD_ADDR_OWVAR 42
19509: PUSH
19510: LD_INT 7
19512: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
19513: LD_ADDR_OWVAR 44
19517: PUSH
19518: LD_INT 10
19520: PUSH
19521: LD_INT 11
19523: PUSH
19524: LD_INT 12
19526: PUSH
19527: LD_INT 15
19529: PUSH
19530: LD_INT 14
19532: PUSH
19533: LD_INT 13
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: LIST
19540: LIST
19541: LIST
19542: LIST
19543: PUSH
19544: LD_VAR 0 2
19548: PUSH
19549: LD_INT 3
19551: MINUS
19552: ARRAY
19553: ST_TO_ADDR
// end ; 10 .. 13 :
19554: GO 20064
19556: LD_INT 10
19558: DOUBLE
19559: GREATEREQUAL
19560: IFFALSE 19568
19562: LD_INT 13
19564: DOUBLE
19565: LESSEQUAL
19566: IFTRUE 19570
19568: GO 19647
19570: POP
// begin bc_type := b_lab_full ;
19571: LD_ADDR_OWVAR 42
19575: PUSH
19576: LD_INT 8
19578: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
19579: LD_ADDR_OWVAR 44
19583: PUSH
19584: LD_INT 10
19586: PUSH
19587: LD_INT 12
19589: PUSH
19590: LD_INT 14
19592: PUSH
19593: LD_INT 13
19595: PUSH
19596: EMPTY
19597: LIST
19598: LIST
19599: LIST
19600: LIST
19601: PUSH
19602: LD_VAR 0 2
19606: PUSH
19607: LD_INT 9
19609: MINUS
19610: ARRAY
19611: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
19612: LD_ADDR_OWVAR 45
19616: PUSH
19617: LD_INT 11
19619: PUSH
19620: LD_INT 15
19622: PUSH
19623: LD_INT 12
19625: PUSH
19626: LD_INT 15
19628: PUSH
19629: EMPTY
19630: LIST
19631: LIST
19632: LIST
19633: LIST
19634: PUSH
19635: LD_VAR 0 2
19639: PUSH
19640: LD_INT 9
19642: MINUS
19643: ARRAY
19644: ST_TO_ADDR
// end ; 14 :
19645: GO 20064
19647: LD_INT 14
19649: DOUBLE
19650: EQUAL
19651: IFTRUE 19655
19653: GO 19666
19655: POP
// bc_type := b_workshop ; 15 :
19656: LD_ADDR_OWVAR 42
19660: PUSH
19661: LD_INT 2
19663: ST_TO_ADDR
19664: GO 20064
19666: LD_INT 15
19668: DOUBLE
19669: EQUAL
19670: IFTRUE 19674
19672: GO 19685
19674: POP
// bc_type := b_factory ; 16 :
19675: LD_ADDR_OWVAR 42
19679: PUSH
19680: LD_INT 3
19682: ST_TO_ADDR
19683: GO 20064
19685: LD_INT 16
19687: DOUBLE
19688: EQUAL
19689: IFTRUE 19693
19691: GO 19704
19693: POP
// bc_type := b_ext_gun ; 17 :
19694: LD_ADDR_OWVAR 42
19698: PUSH
19699: LD_INT 17
19701: ST_TO_ADDR
19702: GO 20064
19704: LD_INT 17
19706: DOUBLE
19707: EQUAL
19708: IFTRUE 19712
19710: GO 19740
19712: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
19713: LD_ADDR_OWVAR 42
19717: PUSH
19718: LD_INT 19
19720: PUSH
19721: LD_INT 23
19723: PUSH
19724: LD_INT 19
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: LIST
19731: PUSH
19732: LD_VAR 0 1
19736: ARRAY
19737: ST_TO_ADDR
19738: GO 20064
19740: LD_INT 18
19742: DOUBLE
19743: EQUAL
19744: IFTRUE 19748
19746: GO 19759
19748: POP
// bc_type := b_ext_radar ; 19 :
19749: LD_ADDR_OWVAR 42
19753: PUSH
19754: LD_INT 20
19756: ST_TO_ADDR
19757: GO 20064
19759: LD_INT 19
19761: DOUBLE
19762: EQUAL
19763: IFTRUE 19767
19765: GO 19778
19767: POP
// bc_type := b_ext_radio ; 20 :
19768: LD_ADDR_OWVAR 42
19772: PUSH
19773: LD_INT 22
19775: ST_TO_ADDR
19776: GO 20064
19778: LD_INT 20
19780: DOUBLE
19781: EQUAL
19782: IFTRUE 19786
19784: GO 19797
19786: POP
// bc_type := b_ext_siberium ; 21 :
19787: LD_ADDR_OWVAR 42
19791: PUSH
19792: LD_INT 21
19794: ST_TO_ADDR
19795: GO 20064
19797: LD_INT 21
19799: DOUBLE
19800: EQUAL
19801: IFTRUE 19805
19803: GO 19816
19805: POP
// bc_type := b_ext_computer ; 22 :
19806: LD_ADDR_OWVAR 42
19810: PUSH
19811: LD_INT 24
19813: ST_TO_ADDR
19814: GO 20064
19816: LD_INT 22
19818: DOUBLE
19819: EQUAL
19820: IFTRUE 19824
19822: GO 19835
19824: POP
// bc_type := b_ext_track ; 23 :
19825: LD_ADDR_OWVAR 42
19829: PUSH
19830: LD_INT 16
19832: ST_TO_ADDR
19833: GO 20064
19835: LD_INT 23
19837: DOUBLE
19838: EQUAL
19839: IFTRUE 19843
19841: GO 19854
19843: POP
// bc_type := b_ext_laser ; 24 :
19844: LD_ADDR_OWVAR 42
19848: PUSH
19849: LD_INT 25
19851: ST_TO_ADDR
19852: GO 20064
19854: LD_INT 24
19856: DOUBLE
19857: EQUAL
19858: IFTRUE 19862
19860: GO 19873
19862: POP
// bc_type := b_control_tower ; 25 :
19863: LD_ADDR_OWVAR 42
19867: PUSH
19868: LD_INT 36
19870: ST_TO_ADDR
19871: GO 20064
19873: LD_INT 25
19875: DOUBLE
19876: EQUAL
19877: IFTRUE 19881
19879: GO 19892
19881: POP
// bc_type := b_breastwork ; 26 :
19882: LD_ADDR_OWVAR 42
19886: PUSH
19887: LD_INT 31
19889: ST_TO_ADDR
19890: GO 20064
19892: LD_INT 26
19894: DOUBLE
19895: EQUAL
19896: IFTRUE 19900
19898: GO 19911
19900: POP
// bc_type := b_bunker ; 27 :
19901: LD_ADDR_OWVAR 42
19905: PUSH
19906: LD_INT 32
19908: ST_TO_ADDR
19909: GO 20064
19911: LD_INT 27
19913: DOUBLE
19914: EQUAL
19915: IFTRUE 19919
19917: GO 19930
19919: POP
// bc_type := b_turret ; 28 :
19920: LD_ADDR_OWVAR 42
19924: PUSH
19925: LD_INT 33
19927: ST_TO_ADDR
19928: GO 20064
19930: LD_INT 28
19932: DOUBLE
19933: EQUAL
19934: IFTRUE 19938
19936: GO 19949
19938: POP
// bc_type := b_armoury ; 29 :
19939: LD_ADDR_OWVAR 42
19943: PUSH
19944: LD_INT 4
19946: ST_TO_ADDR
19947: GO 20064
19949: LD_INT 29
19951: DOUBLE
19952: EQUAL
19953: IFTRUE 19957
19955: GO 19968
19957: POP
// bc_type := b_barracks ; 30 :
19958: LD_ADDR_OWVAR 42
19962: PUSH
19963: LD_INT 5
19965: ST_TO_ADDR
19966: GO 20064
19968: LD_INT 30
19970: DOUBLE
19971: EQUAL
19972: IFTRUE 19976
19974: GO 19987
19976: POP
// bc_type := b_solar_power ; 31 :
19977: LD_ADDR_OWVAR 42
19981: PUSH
19982: LD_INT 27
19984: ST_TO_ADDR
19985: GO 20064
19987: LD_INT 31
19989: DOUBLE
19990: EQUAL
19991: IFTRUE 19995
19993: GO 20006
19995: POP
// bc_type := b_oil_power ; 32 :
19996: LD_ADDR_OWVAR 42
20000: PUSH
20001: LD_INT 26
20003: ST_TO_ADDR
20004: GO 20064
20006: LD_INT 32
20008: DOUBLE
20009: EQUAL
20010: IFTRUE 20014
20012: GO 20025
20014: POP
// bc_type := b_siberite_power ; 33 :
20015: LD_ADDR_OWVAR 42
20019: PUSH
20020: LD_INT 28
20022: ST_TO_ADDR
20023: GO 20064
20025: LD_INT 33
20027: DOUBLE
20028: EQUAL
20029: IFTRUE 20033
20031: GO 20044
20033: POP
// bc_type := b_oil_mine ; 34 :
20034: LD_ADDR_OWVAR 42
20038: PUSH
20039: LD_INT 29
20041: ST_TO_ADDR
20042: GO 20064
20044: LD_INT 34
20046: DOUBLE
20047: EQUAL
20048: IFTRUE 20052
20050: GO 20063
20052: POP
// bc_type := b_siberite_mine ; end ;
20053: LD_ADDR_OWVAR 42
20057: PUSH
20058: LD_INT 30
20060: ST_TO_ADDR
20061: GO 20064
20063: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
20064: LD_ADDR_VAR 0 8
20068: PUSH
20069: LD_VAR 0 5
20073: PPUSH
20074: LD_VAR 0 6
20078: PPUSH
20079: LD_VAR 0 3
20083: PPUSH
20084: CALL_OW 47
20088: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
20089: LD_OWVAR 42
20093: PUSH
20094: LD_INT 32
20096: PUSH
20097: LD_INT 33
20099: PUSH
20100: EMPTY
20101: LIST
20102: LIST
20103: IN
20104: IFFALSE 20120
// PlaceWeaponTurret ( b , weapon ) ;
20106: LD_VAR 0 8
20110: PPUSH
20111: LD_VAR 0 4
20115: PPUSH
20116: CALL_OW 431
// end ;
20120: LD_VAR 0 7
20124: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
20125: LD_INT 0
20127: PPUSH
20128: PPUSH
20129: PPUSH
20130: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
20131: LD_ADDR_VAR 0 4
20135: PUSH
20136: LD_INT 22
20138: PUSH
20139: LD_OWVAR 2
20143: PUSH
20144: EMPTY
20145: LIST
20146: LIST
20147: PUSH
20148: LD_INT 2
20150: PUSH
20151: LD_INT 30
20153: PUSH
20154: LD_INT 0
20156: PUSH
20157: EMPTY
20158: LIST
20159: LIST
20160: PUSH
20161: LD_INT 30
20163: PUSH
20164: LD_INT 1
20166: PUSH
20167: EMPTY
20168: LIST
20169: LIST
20170: PUSH
20171: EMPTY
20172: LIST
20173: LIST
20174: LIST
20175: PUSH
20176: EMPTY
20177: LIST
20178: LIST
20179: PPUSH
20180: CALL_OW 69
20184: ST_TO_ADDR
// if not tmp then
20185: LD_VAR 0 4
20189: NOT
20190: IFFALSE 20194
// exit ;
20192: GO 20253
// for i in tmp do
20194: LD_ADDR_VAR 0 2
20198: PUSH
20199: LD_VAR 0 4
20203: PUSH
20204: FOR_IN
20205: IFFALSE 20251
// for j = 1 to 3 do
20207: LD_ADDR_VAR 0 3
20211: PUSH
20212: DOUBLE
20213: LD_INT 1
20215: DEC
20216: ST_TO_ADDR
20217: LD_INT 3
20219: PUSH
20220: FOR_TO
20221: IFFALSE 20247
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
20223: LD_VAR 0 2
20227: PPUSH
20228: CALL_OW 274
20232: PPUSH
20233: LD_VAR 0 3
20237: PPUSH
20238: LD_INT 99999
20240: PPUSH
20241: CALL_OW 277
20245: GO 20220
20247: POP
20248: POP
20249: GO 20204
20251: POP
20252: POP
// end ;
20253: LD_VAR 0 1
20257: RET
// export function hHackSetLevel10 ; var i , j ; begin
20258: LD_INT 0
20260: PPUSH
20261: PPUSH
20262: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20263: LD_ADDR_VAR 0 2
20267: PUSH
20268: LD_INT 21
20270: PUSH
20271: LD_INT 1
20273: PUSH
20274: EMPTY
20275: LIST
20276: LIST
20277: PPUSH
20278: CALL_OW 69
20282: PUSH
20283: FOR_IN
20284: IFFALSE 20336
// if IsSelected ( i ) then
20286: LD_VAR 0 2
20290: PPUSH
20291: CALL_OW 306
20295: IFFALSE 20334
// begin for j := 1 to 4 do
20297: LD_ADDR_VAR 0 3
20301: PUSH
20302: DOUBLE
20303: LD_INT 1
20305: DEC
20306: ST_TO_ADDR
20307: LD_INT 4
20309: PUSH
20310: FOR_TO
20311: IFFALSE 20332
// SetSkill ( i , j , 10 ) ;
20313: LD_VAR 0 2
20317: PPUSH
20318: LD_VAR 0 3
20322: PPUSH
20323: LD_INT 10
20325: PPUSH
20326: CALL_OW 237
20330: GO 20310
20332: POP
20333: POP
// end ;
20334: GO 20283
20336: POP
20337: POP
// end ;
20338: LD_VAR 0 1
20342: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
20343: LD_INT 0
20345: PPUSH
20346: PPUSH
20347: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
20348: LD_ADDR_VAR 0 2
20352: PUSH
20353: LD_INT 22
20355: PUSH
20356: LD_OWVAR 2
20360: PUSH
20361: EMPTY
20362: LIST
20363: LIST
20364: PUSH
20365: LD_INT 21
20367: PUSH
20368: LD_INT 1
20370: PUSH
20371: EMPTY
20372: LIST
20373: LIST
20374: PUSH
20375: EMPTY
20376: LIST
20377: LIST
20378: PPUSH
20379: CALL_OW 69
20383: PUSH
20384: FOR_IN
20385: IFFALSE 20426
// begin for j := 1 to 4 do
20387: LD_ADDR_VAR 0 3
20391: PUSH
20392: DOUBLE
20393: LD_INT 1
20395: DEC
20396: ST_TO_ADDR
20397: LD_INT 4
20399: PUSH
20400: FOR_TO
20401: IFFALSE 20422
// SetSkill ( i , j , 10 ) ;
20403: LD_VAR 0 2
20407: PPUSH
20408: LD_VAR 0 3
20412: PPUSH
20413: LD_INT 10
20415: PPUSH
20416: CALL_OW 237
20420: GO 20400
20422: POP
20423: POP
// end ;
20424: GO 20384
20426: POP
20427: POP
// end ;
20428: LD_VAR 0 1
20432: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
20433: LD_INT 0
20435: PPUSH
// uc_side := your_side ;
20436: LD_ADDR_OWVAR 20
20440: PUSH
20441: LD_OWVAR 2
20445: ST_TO_ADDR
// uc_nation := nation ;
20446: LD_ADDR_OWVAR 21
20450: PUSH
20451: LD_VAR 0 1
20455: ST_TO_ADDR
// InitHc ;
20456: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
20460: LD_INT 0
20462: PPUSH
20463: LD_VAR 0 2
20467: PPUSH
20468: LD_VAR 0 3
20472: PPUSH
20473: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
20477: LD_VAR 0 4
20481: PPUSH
20482: LD_VAR 0 5
20486: PPUSH
20487: CALL_OW 428
20491: PUSH
20492: LD_INT 0
20494: EQUAL
20495: IFFALSE 20519
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
20497: CALL_OW 44
20501: PPUSH
20502: LD_VAR 0 4
20506: PPUSH
20507: LD_VAR 0 5
20511: PPUSH
20512: LD_INT 1
20514: PPUSH
20515: CALL_OW 48
// end ;
20519: LD_VAR 0 6
20523: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
20524: LD_INT 0
20526: PPUSH
20527: PPUSH
// uc_side := your_side ;
20528: LD_ADDR_OWVAR 20
20532: PUSH
20533: LD_OWVAR 2
20537: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
20538: LD_VAR 0 1
20542: PUSH
20543: LD_INT 1
20545: PUSH
20546: LD_INT 2
20548: PUSH
20549: LD_INT 3
20551: PUSH
20552: LD_INT 4
20554: PUSH
20555: LD_INT 5
20557: PUSH
20558: EMPTY
20559: LIST
20560: LIST
20561: LIST
20562: LIST
20563: LIST
20564: IN
20565: IFFALSE 20577
// uc_nation := nation_american else
20567: LD_ADDR_OWVAR 21
20571: PUSH
20572: LD_INT 1
20574: ST_TO_ADDR
20575: GO 20620
// if chassis in [ 11 , 12 , 13 , 14 ] then
20577: LD_VAR 0 1
20581: PUSH
20582: LD_INT 11
20584: PUSH
20585: LD_INT 12
20587: PUSH
20588: LD_INT 13
20590: PUSH
20591: LD_INT 14
20593: PUSH
20594: EMPTY
20595: LIST
20596: LIST
20597: LIST
20598: LIST
20599: IN
20600: IFFALSE 20612
// uc_nation := nation_arabian else
20602: LD_ADDR_OWVAR 21
20606: PUSH
20607: LD_INT 2
20609: ST_TO_ADDR
20610: GO 20620
// uc_nation := nation_russian ;
20612: LD_ADDR_OWVAR 21
20616: PUSH
20617: LD_INT 3
20619: ST_TO_ADDR
// vc_chassis := chassis ;
20620: LD_ADDR_OWVAR 37
20624: PUSH
20625: LD_VAR 0 1
20629: ST_TO_ADDR
// vc_engine := engine ;
20630: LD_ADDR_OWVAR 39
20634: PUSH
20635: LD_VAR 0 2
20639: ST_TO_ADDR
// vc_control := control ;
20640: LD_ADDR_OWVAR 38
20644: PUSH
20645: LD_VAR 0 3
20649: ST_TO_ADDR
// vc_weapon := weapon ;
20650: LD_ADDR_OWVAR 40
20654: PUSH
20655: LD_VAR 0 4
20659: ST_TO_ADDR
// un := CreateVehicle ;
20660: LD_ADDR_VAR 0 8
20664: PUSH
20665: CALL_OW 45
20669: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
20670: LD_VAR 0 8
20674: PPUSH
20675: LD_INT 0
20677: PPUSH
20678: LD_INT 5
20680: PPUSH
20681: CALL_OW 12
20685: PPUSH
20686: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
20690: LD_VAR 0 8
20694: PPUSH
20695: LD_VAR 0 5
20699: PPUSH
20700: LD_VAR 0 6
20704: PPUSH
20705: LD_INT 1
20707: PPUSH
20708: CALL_OW 48
// end ;
20712: LD_VAR 0 7
20716: RET
// export hInvincible ; every 1 do
20717: GO 20719
20719: DISABLE
// hInvincible := [ ] ;
20720: LD_ADDR_EXP 81
20724: PUSH
20725: EMPTY
20726: ST_TO_ADDR
20727: END
// every 10 do var i ;
20728: GO 20730
20730: DISABLE
20731: LD_INT 0
20733: PPUSH
// begin enable ;
20734: ENABLE
// if not hInvincible then
20735: LD_EXP 81
20739: NOT
20740: IFFALSE 20744
// exit ;
20742: GO 20788
// for i in hInvincible do
20744: LD_ADDR_VAR 0 1
20748: PUSH
20749: LD_EXP 81
20753: PUSH
20754: FOR_IN
20755: IFFALSE 20786
// if GetLives ( i ) < 1000 then
20757: LD_VAR 0 1
20761: PPUSH
20762: CALL_OW 256
20766: PUSH
20767: LD_INT 1000
20769: LESS
20770: IFFALSE 20784
// SetLives ( i , 1000 ) ;
20772: LD_VAR 0 1
20776: PPUSH
20777: LD_INT 1000
20779: PPUSH
20780: CALL_OW 234
20784: GO 20754
20786: POP
20787: POP
// end ;
20788: PPOPN 1
20790: END
// export function hHackInvincible ; var i ; begin
20791: LD_INT 0
20793: PPUSH
20794: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
20795: LD_ADDR_VAR 0 2
20799: PUSH
20800: LD_INT 2
20802: PUSH
20803: LD_INT 21
20805: PUSH
20806: LD_INT 1
20808: PUSH
20809: EMPTY
20810: LIST
20811: LIST
20812: PUSH
20813: LD_INT 21
20815: PUSH
20816: LD_INT 2
20818: PUSH
20819: EMPTY
20820: LIST
20821: LIST
20822: PUSH
20823: EMPTY
20824: LIST
20825: LIST
20826: LIST
20827: PPUSH
20828: CALL_OW 69
20832: PUSH
20833: FOR_IN
20834: IFFALSE 20895
// if IsSelected ( i ) then
20836: LD_VAR 0 2
20840: PPUSH
20841: CALL_OW 306
20845: IFFALSE 20893
// begin if i in hInvincible then
20847: LD_VAR 0 2
20851: PUSH
20852: LD_EXP 81
20856: IN
20857: IFFALSE 20877
// hInvincible := hInvincible diff i else
20859: LD_ADDR_EXP 81
20863: PUSH
20864: LD_EXP 81
20868: PUSH
20869: LD_VAR 0 2
20873: DIFF
20874: ST_TO_ADDR
20875: GO 20893
// hInvincible := hInvincible union i ;
20877: LD_ADDR_EXP 81
20881: PUSH
20882: LD_EXP 81
20886: PUSH
20887: LD_VAR 0 2
20891: UNION
20892: ST_TO_ADDR
// end ;
20893: GO 20833
20895: POP
20896: POP
// end ;
20897: LD_VAR 0 1
20901: RET
// export function hHackInvisible ; var i , j ; begin
20902: LD_INT 0
20904: PPUSH
20905: PPUSH
20906: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20907: LD_ADDR_VAR 0 2
20911: PUSH
20912: LD_INT 21
20914: PUSH
20915: LD_INT 1
20917: PUSH
20918: EMPTY
20919: LIST
20920: LIST
20921: PPUSH
20922: CALL_OW 69
20926: PUSH
20927: FOR_IN
20928: IFFALSE 20952
// if IsSelected ( i ) then
20930: LD_VAR 0 2
20934: PPUSH
20935: CALL_OW 306
20939: IFFALSE 20950
// ComForceInvisible ( i ) ;
20941: LD_VAR 0 2
20945: PPUSH
20946: CALL_OW 496
20950: GO 20927
20952: POP
20953: POP
// end ;
20954: LD_VAR 0 1
20958: RET
// export function hHackChangeYourSide ; begin
20959: LD_INT 0
20961: PPUSH
// if your_side = 8 then
20962: LD_OWVAR 2
20966: PUSH
20967: LD_INT 8
20969: EQUAL
20970: IFFALSE 20982
// your_side := 0 else
20972: LD_ADDR_OWVAR 2
20976: PUSH
20977: LD_INT 0
20979: ST_TO_ADDR
20980: GO 20996
// your_side := your_side + 1 ;
20982: LD_ADDR_OWVAR 2
20986: PUSH
20987: LD_OWVAR 2
20991: PUSH
20992: LD_INT 1
20994: PLUS
20995: ST_TO_ADDR
// end ;
20996: LD_VAR 0 1
21000: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21001: LD_INT 0
21003: PPUSH
21004: PPUSH
21005: PPUSH
// for i in all_units do
21006: LD_ADDR_VAR 0 2
21010: PUSH
21011: LD_OWVAR 3
21015: PUSH
21016: FOR_IN
21017: IFFALSE 21095
// if IsSelected ( i ) then
21019: LD_VAR 0 2
21023: PPUSH
21024: CALL_OW 306
21028: IFFALSE 21093
// begin j := GetSide ( i ) ;
21030: LD_ADDR_VAR 0 3
21034: PUSH
21035: LD_VAR 0 2
21039: PPUSH
21040: CALL_OW 255
21044: ST_TO_ADDR
// if j = 8 then
21045: LD_VAR 0 3
21049: PUSH
21050: LD_INT 8
21052: EQUAL
21053: IFFALSE 21065
// j := 0 else
21055: LD_ADDR_VAR 0 3
21059: PUSH
21060: LD_INT 0
21062: ST_TO_ADDR
21063: GO 21079
// j := j + 1 ;
21065: LD_ADDR_VAR 0 3
21069: PUSH
21070: LD_VAR 0 3
21074: PUSH
21075: LD_INT 1
21077: PLUS
21078: ST_TO_ADDR
// SetSide ( i , j ) ;
21079: LD_VAR 0 2
21083: PPUSH
21084: LD_VAR 0 3
21088: PPUSH
21089: CALL_OW 235
// end ;
21093: GO 21016
21095: POP
21096: POP
// end ;
21097: LD_VAR 0 1
21101: RET
// export function hHackFog ; begin
21102: LD_INT 0
21104: PPUSH
// FogOff ( true ) ;
21105: LD_INT 1
21107: PPUSH
21108: CALL_OW 344
// end ;
21112: LD_VAR 0 1
21116: RET
// export function hHackTeleport ( unit , x , y ) ; begin
21117: LD_INT 0
21119: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
21120: LD_VAR 0 1
21124: PPUSH
21125: LD_VAR 0 2
21129: PPUSH
21130: LD_VAR 0 3
21134: PPUSH
21135: LD_INT 1
21137: PPUSH
21138: LD_INT 1
21140: PPUSH
21141: CALL_OW 483
// CenterOnXY ( x , y ) ;
21145: LD_VAR 0 2
21149: PPUSH
21150: LD_VAR 0 3
21154: PPUSH
21155: CALL_OW 84
// end ; end_of_file end_of_file
21159: LD_VAR 0 4
21163: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
21164: LD_INT 0
21166: PPUSH
// ar_miner := 81 ;
21167: LD_ADDR_EXP 89
21171: PUSH
21172: LD_INT 81
21174: ST_TO_ADDR
// ar_crane := 88 ;
21175: LD_ADDR_EXP 88
21179: PUSH
21180: LD_INT 88
21182: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
21183: LD_ADDR_EXP 83
21187: PUSH
21188: LD_INT 89
21190: ST_TO_ADDR
// us_hack := 99 ;
21191: LD_ADDR_EXP 84
21195: PUSH
21196: LD_INT 99
21198: ST_TO_ADDR
// us_artillery := 97 ;
21199: LD_ADDR_EXP 85
21203: PUSH
21204: LD_INT 97
21206: ST_TO_ADDR
// ar_bio_bomb := 91 ;
21207: LD_ADDR_EXP 86
21211: PUSH
21212: LD_INT 91
21214: ST_TO_ADDR
// ar_mortar := 92 ;
21215: LD_ADDR_EXP 87
21219: PUSH
21220: LD_INT 92
21222: ST_TO_ADDR
// ru_radar := 98 ;
21223: LD_ADDR_EXP 82
21227: PUSH
21228: LD_INT 98
21230: ST_TO_ADDR
// tech_Artillery := 80 ;
21231: LD_ADDR_EXP 90
21235: PUSH
21236: LD_INT 80
21238: ST_TO_ADDR
// tech_RadMat := 81 ;
21239: LD_ADDR_EXP 91
21243: PUSH
21244: LD_INT 81
21246: ST_TO_ADDR
// tech_BasicTools := 82 ;
21247: LD_ADDR_EXP 92
21251: PUSH
21252: LD_INT 82
21254: ST_TO_ADDR
// tech_Cargo := 83 ;
21255: LD_ADDR_EXP 93
21259: PUSH
21260: LD_INT 83
21262: ST_TO_ADDR
// tech_Track := 84 ;
21263: LD_ADDR_EXP 94
21267: PUSH
21268: LD_INT 84
21270: ST_TO_ADDR
// tech_Crane := 85 ;
21271: LD_ADDR_EXP 95
21275: PUSH
21276: LD_INT 85
21278: ST_TO_ADDR
// tech_Bulldozer := 86 ;
21279: LD_ADDR_EXP 96
21283: PUSH
21284: LD_INT 86
21286: ST_TO_ADDR
// tech_Hovercraft := 87 ;
21287: LD_ADDR_EXP 97
21291: PUSH
21292: LD_INT 87
21294: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
21295: LD_ADDR_EXP 98
21299: PUSH
21300: LD_INT 88
21302: ST_TO_ADDR
// class_mastodont := 31 ;
21303: LD_ADDR_EXP 99
21307: PUSH
21308: LD_INT 31
21310: ST_TO_ADDR
// class_horse := 21 ;
21311: LD_ADDR_EXP 100
21315: PUSH
21316: LD_INT 21
21318: ST_TO_ADDR
// end ;
21319: LD_VAR 0 1
21323: RET
// every 1 do
21324: GO 21326
21326: DISABLE
// InitGlobalVariables ; end_of_file
21327: CALL 21164 0 0
21331: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
21332: LD_INT 0
21334: PPUSH
21335: PPUSH
// if exist_mode then
21336: LD_VAR 0 2
21340: IFFALSE 21365
// unit := CreateCharacter ( prefix & ident ) else
21342: LD_ADDR_VAR 0 5
21346: PUSH
21347: LD_VAR 0 3
21351: PUSH
21352: LD_VAR 0 1
21356: STR
21357: PPUSH
21358: CALL_OW 34
21362: ST_TO_ADDR
21363: GO 21380
// unit := NewCharacter ( ident ) ;
21365: LD_ADDR_VAR 0 5
21369: PUSH
21370: LD_VAR 0 1
21374: PPUSH
21375: CALL_OW 25
21379: ST_TO_ADDR
// result := unit ;
21380: LD_ADDR_VAR 0 4
21384: PUSH
21385: LD_VAR 0 5
21389: ST_TO_ADDR
// end ;
21390: LD_VAR 0 4
21394: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
21395: LD_INT 0
21397: PPUSH
21398: PPUSH
// if not side or not nation then
21399: LD_VAR 0 1
21403: NOT
21404: PUSH
21405: LD_VAR 0 2
21409: NOT
21410: OR
21411: IFFALSE 21415
// exit ;
21413: GO 22183
// case nation of nation_american :
21415: LD_VAR 0 2
21419: PUSH
21420: LD_INT 1
21422: DOUBLE
21423: EQUAL
21424: IFTRUE 21428
21426: GO 21642
21428: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
21429: LD_ADDR_VAR 0 4
21433: PUSH
21434: LD_INT 35
21436: PUSH
21437: LD_INT 45
21439: PUSH
21440: LD_INT 46
21442: PUSH
21443: LD_INT 47
21445: PUSH
21446: LD_INT 82
21448: PUSH
21449: LD_INT 83
21451: PUSH
21452: LD_INT 84
21454: PUSH
21455: LD_INT 85
21457: PUSH
21458: LD_INT 86
21460: PUSH
21461: LD_INT 1
21463: PUSH
21464: LD_INT 2
21466: PUSH
21467: LD_INT 6
21469: PUSH
21470: LD_INT 15
21472: PUSH
21473: LD_INT 16
21475: PUSH
21476: LD_INT 7
21478: PUSH
21479: LD_INT 12
21481: PUSH
21482: LD_INT 13
21484: PUSH
21485: LD_INT 10
21487: PUSH
21488: LD_INT 14
21490: PUSH
21491: LD_INT 20
21493: PUSH
21494: LD_INT 21
21496: PUSH
21497: LD_INT 22
21499: PUSH
21500: LD_INT 25
21502: PUSH
21503: LD_INT 32
21505: PUSH
21506: LD_INT 27
21508: PUSH
21509: LD_INT 36
21511: PUSH
21512: LD_INT 69
21514: PUSH
21515: LD_INT 39
21517: PUSH
21518: LD_INT 34
21520: PUSH
21521: LD_INT 40
21523: PUSH
21524: LD_INT 48
21526: PUSH
21527: LD_INT 49
21529: PUSH
21530: LD_INT 50
21532: PUSH
21533: LD_INT 51
21535: PUSH
21536: LD_INT 52
21538: PUSH
21539: LD_INT 53
21541: PUSH
21542: LD_INT 54
21544: PUSH
21545: LD_INT 55
21547: PUSH
21548: LD_INT 56
21550: PUSH
21551: LD_INT 57
21553: PUSH
21554: LD_INT 58
21556: PUSH
21557: LD_INT 59
21559: PUSH
21560: LD_INT 60
21562: PUSH
21563: LD_INT 61
21565: PUSH
21566: LD_INT 62
21568: PUSH
21569: LD_INT 80
21571: PUSH
21572: LD_INT 82
21574: PUSH
21575: LD_INT 83
21577: PUSH
21578: LD_INT 84
21580: PUSH
21581: LD_INT 85
21583: PUSH
21584: LD_INT 86
21586: PUSH
21587: EMPTY
21588: LIST
21589: LIST
21590: LIST
21591: LIST
21592: LIST
21593: LIST
21594: LIST
21595: LIST
21596: LIST
21597: LIST
21598: LIST
21599: LIST
21600: LIST
21601: LIST
21602: LIST
21603: LIST
21604: LIST
21605: LIST
21606: LIST
21607: LIST
21608: LIST
21609: LIST
21610: LIST
21611: LIST
21612: LIST
21613: LIST
21614: LIST
21615: LIST
21616: LIST
21617: LIST
21618: LIST
21619: LIST
21620: LIST
21621: LIST
21622: LIST
21623: LIST
21624: LIST
21625: LIST
21626: LIST
21627: LIST
21628: LIST
21629: LIST
21630: LIST
21631: LIST
21632: LIST
21633: LIST
21634: LIST
21635: LIST
21636: LIST
21637: LIST
21638: LIST
21639: ST_TO_ADDR
21640: GO 22107
21642: LD_INT 2
21644: DOUBLE
21645: EQUAL
21646: IFTRUE 21650
21648: GO 21876
21650: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
21651: LD_ADDR_VAR 0 4
21655: PUSH
21656: LD_INT 35
21658: PUSH
21659: LD_INT 45
21661: PUSH
21662: LD_INT 46
21664: PUSH
21665: LD_INT 47
21667: PUSH
21668: LD_INT 82
21670: PUSH
21671: LD_INT 83
21673: PUSH
21674: LD_INT 84
21676: PUSH
21677: LD_INT 85
21679: PUSH
21680: LD_INT 87
21682: PUSH
21683: LD_INT 70
21685: PUSH
21686: LD_INT 1
21688: PUSH
21689: LD_INT 11
21691: PUSH
21692: LD_INT 3
21694: PUSH
21695: LD_INT 4
21697: PUSH
21698: LD_INT 5
21700: PUSH
21701: LD_INT 6
21703: PUSH
21704: LD_INT 15
21706: PUSH
21707: LD_INT 18
21709: PUSH
21710: LD_INT 7
21712: PUSH
21713: LD_INT 17
21715: PUSH
21716: LD_INT 8
21718: PUSH
21719: LD_INT 20
21721: PUSH
21722: LD_INT 21
21724: PUSH
21725: LD_INT 22
21727: PUSH
21728: LD_INT 72
21730: PUSH
21731: LD_INT 26
21733: PUSH
21734: LD_INT 69
21736: PUSH
21737: LD_INT 39
21739: PUSH
21740: LD_INT 40
21742: PUSH
21743: LD_INT 41
21745: PUSH
21746: LD_INT 42
21748: PUSH
21749: LD_INT 43
21751: PUSH
21752: LD_INT 48
21754: PUSH
21755: LD_INT 49
21757: PUSH
21758: LD_INT 50
21760: PUSH
21761: LD_INT 51
21763: PUSH
21764: LD_INT 52
21766: PUSH
21767: LD_INT 53
21769: PUSH
21770: LD_INT 54
21772: PUSH
21773: LD_INT 55
21775: PUSH
21776: LD_INT 56
21778: PUSH
21779: LD_INT 60
21781: PUSH
21782: LD_INT 61
21784: PUSH
21785: LD_INT 62
21787: PUSH
21788: LD_INT 66
21790: PUSH
21791: LD_INT 67
21793: PUSH
21794: LD_INT 68
21796: PUSH
21797: LD_INT 81
21799: PUSH
21800: LD_INT 82
21802: PUSH
21803: LD_INT 83
21805: PUSH
21806: LD_INT 84
21808: PUSH
21809: LD_INT 85
21811: PUSH
21812: LD_INT 87
21814: PUSH
21815: LD_INT 88
21817: PUSH
21818: EMPTY
21819: LIST
21820: LIST
21821: LIST
21822: LIST
21823: LIST
21824: LIST
21825: LIST
21826: LIST
21827: LIST
21828: LIST
21829: LIST
21830: LIST
21831: LIST
21832: LIST
21833: LIST
21834: LIST
21835: LIST
21836: LIST
21837: LIST
21838: LIST
21839: LIST
21840: LIST
21841: LIST
21842: LIST
21843: LIST
21844: LIST
21845: LIST
21846: LIST
21847: LIST
21848: LIST
21849: LIST
21850: LIST
21851: LIST
21852: LIST
21853: LIST
21854: LIST
21855: LIST
21856: LIST
21857: LIST
21858: LIST
21859: LIST
21860: LIST
21861: LIST
21862: LIST
21863: LIST
21864: LIST
21865: LIST
21866: LIST
21867: LIST
21868: LIST
21869: LIST
21870: LIST
21871: LIST
21872: LIST
21873: ST_TO_ADDR
21874: GO 22107
21876: LD_INT 3
21878: DOUBLE
21879: EQUAL
21880: IFTRUE 21884
21882: GO 22106
21884: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
21885: LD_ADDR_VAR 0 4
21889: PUSH
21890: LD_INT 46
21892: PUSH
21893: LD_INT 47
21895: PUSH
21896: LD_INT 1
21898: PUSH
21899: LD_INT 2
21901: PUSH
21902: LD_INT 82
21904: PUSH
21905: LD_INT 83
21907: PUSH
21908: LD_INT 84
21910: PUSH
21911: LD_INT 85
21913: PUSH
21914: LD_INT 86
21916: PUSH
21917: LD_INT 11
21919: PUSH
21920: LD_INT 9
21922: PUSH
21923: LD_INT 20
21925: PUSH
21926: LD_INT 19
21928: PUSH
21929: LD_INT 21
21931: PUSH
21932: LD_INT 24
21934: PUSH
21935: LD_INT 22
21937: PUSH
21938: LD_INT 25
21940: PUSH
21941: LD_INT 28
21943: PUSH
21944: LD_INT 29
21946: PUSH
21947: LD_INT 30
21949: PUSH
21950: LD_INT 31
21952: PUSH
21953: LD_INT 37
21955: PUSH
21956: LD_INT 38
21958: PUSH
21959: LD_INT 32
21961: PUSH
21962: LD_INT 27
21964: PUSH
21965: LD_INT 33
21967: PUSH
21968: LD_INT 69
21970: PUSH
21971: LD_INT 39
21973: PUSH
21974: LD_INT 34
21976: PUSH
21977: LD_INT 40
21979: PUSH
21980: LD_INT 71
21982: PUSH
21983: LD_INT 23
21985: PUSH
21986: LD_INT 44
21988: PUSH
21989: LD_INT 48
21991: PUSH
21992: LD_INT 49
21994: PUSH
21995: LD_INT 50
21997: PUSH
21998: LD_INT 51
22000: PUSH
22001: LD_INT 52
22003: PUSH
22004: LD_INT 53
22006: PUSH
22007: LD_INT 54
22009: PUSH
22010: LD_INT 55
22012: PUSH
22013: LD_INT 56
22015: PUSH
22016: LD_INT 57
22018: PUSH
22019: LD_INT 58
22021: PUSH
22022: LD_INT 59
22024: PUSH
22025: LD_INT 63
22027: PUSH
22028: LD_INT 64
22030: PUSH
22031: LD_INT 65
22033: PUSH
22034: LD_INT 82
22036: PUSH
22037: LD_INT 83
22039: PUSH
22040: LD_INT 84
22042: PUSH
22043: LD_INT 85
22045: PUSH
22046: LD_INT 86
22048: PUSH
22049: EMPTY
22050: LIST
22051: LIST
22052: LIST
22053: LIST
22054: LIST
22055: LIST
22056: LIST
22057: LIST
22058: LIST
22059: LIST
22060: LIST
22061: LIST
22062: LIST
22063: LIST
22064: LIST
22065: LIST
22066: LIST
22067: LIST
22068: LIST
22069: LIST
22070: LIST
22071: LIST
22072: LIST
22073: LIST
22074: LIST
22075: LIST
22076: LIST
22077: LIST
22078: LIST
22079: LIST
22080: LIST
22081: LIST
22082: LIST
22083: LIST
22084: LIST
22085: LIST
22086: LIST
22087: LIST
22088: LIST
22089: LIST
22090: LIST
22091: LIST
22092: LIST
22093: LIST
22094: LIST
22095: LIST
22096: LIST
22097: LIST
22098: LIST
22099: LIST
22100: LIST
22101: LIST
22102: LIST
22103: ST_TO_ADDR
22104: GO 22107
22106: POP
// if state > - 1 and state < 3 then
22107: LD_VAR 0 3
22111: PUSH
22112: LD_INT 1
22114: NEG
22115: GREATER
22116: PUSH
22117: LD_VAR 0 3
22121: PUSH
22122: LD_INT 3
22124: LESS
22125: AND
22126: IFFALSE 22183
// for i in result do
22128: LD_ADDR_VAR 0 5
22132: PUSH
22133: LD_VAR 0 4
22137: PUSH
22138: FOR_IN
22139: IFFALSE 22181
// if GetTech ( i , side ) <> state then
22141: LD_VAR 0 5
22145: PPUSH
22146: LD_VAR 0 1
22150: PPUSH
22151: CALL_OW 321
22155: PUSH
22156: LD_VAR 0 3
22160: NONEQUAL
22161: IFFALSE 22179
// result := result diff i ;
22163: LD_ADDR_VAR 0 4
22167: PUSH
22168: LD_VAR 0 4
22172: PUSH
22173: LD_VAR 0 5
22177: DIFF
22178: ST_TO_ADDR
22179: GO 22138
22181: POP
22182: POP
// end ;
22183: LD_VAR 0 4
22187: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
22188: LD_INT 0
22190: PPUSH
22191: PPUSH
22192: PPUSH
// result := true ;
22193: LD_ADDR_VAR 0 3
22197: PUSH
22198: LD_INT 1
22200: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
22201: LD_ADDR_VAR 0 5
22205: PUSH
22206: LD_VAR 0 2
22210: PPUSH
22211: CALL_OW 480
22215: ST_TO_ADDR
// if not tmp then
22216: LD_VAR 0 5
22220: NOT
22221: IFFALSE 22225
// exit ;
22223: GO 22274
// for i in tmp do
22225: LD_ADDR_VAR 0 4
22229: PUSH
22230: LD_VAR 0 5
22234: PUSH
22235: FOR_IN
22236: IFFALSE 22272
// if GetTech ( i , side ) <> state_researched then
22238: LD_VAR 0 4
22242: PPUSH
22243: LD_VAR 0 1
22247: PPUSH
22248: CALL_OW 321
22252: PUSH
22253: LD_INT 2
22255: NONEQUAL
22256: IFFALSE 22270
// begin result := false ;
22258: LD_ADDR_VAR 0 3
22262: PUSH
22263: LD_INT 0
22265: ST_TO_ADDR
// exit ;
22266: POP
22267: POP
22268: GO 22274
// end ;
22270: GO 22235
22272: POP
22273: POP
// end ;
22274: LD_VAR 0 3
22278: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
22279: LD_INT 0
22281: PPUSH
22282: PPUSH
22283: PPUSH
22284: PPUSH
22285: PPUSH
22286: PPUSH
22287: PPUSH
22288: PPUSH
22289: PPUSH
22290: PPUSH
22291: PPUSH
22292: PPUSH
22293: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
22294: LD_VAR 0 1
22298: NOT
22299: PUSH
22300: LD_VAR 0 1
22304: PPUSH
22305: CALL_OW 257
22309: PUSH
22310: LD_INT 9
22312: NONEQUAL
22313: OR
22314: IFFALSE 22318
// exit ;
22316: GO 22891
// side := GetSide ( unit ) ;
22318: LD_ADDR_VAR 0 9
22322: PUSH
22323: LD_VAR 0 1
22327: PPUSH
22328: CALL_OW 255
22332: ST_TO_ADDR
// tech_space := tech_spacanom ;
22333: LD_ADDR_VAR 0 12
22337: PUSH
22338: LD_INT 29
22340: ST_TO_ADDR
// tech_time := tech_taurad ;
22341: LD_ADDR_VAR 0 13
22345: PUSH
22346: LD_INT 28
22348: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
22349: LD_ADDR_VAR 0 11
22353: PUSH
22354: LD_VAR 0 1
22358: PPUSH
22359: CALL_OW 310
22363: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
22364: LD_VAR 0 11
22368: PPUSH
22369: CALL_OW 247
22373: PUSH
22374: LD_INT 2
22376: EQUAL
22377: IFFALSE 22381
// exit ;
22379: GO 22891
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22381: LD_ADDR_VAR 0 8
22385: PUSH
22386: LD_INT 81
22388: PUSH
22389: LD_VAR 0 9
22393: PUSH
22394: EMPTY
22395: LIST
22396: LIST
22397: PUSH
22398: LD_INT 3
22400: PUSH
22401: LD_INT 21
22403: PUSH
22404: LD_INT 3
22406: PUSH
22407: EMPTY
22408: LIST
22409: LIST
22410: PUSH
22411: EMPTY
22412: LIST
22413: LIST
22414: PUSH
22415: EMPTY
22416: LIST
22417: LIST
22418: PPUSH
22419: CALL_OW 69
22423: ST_TO_ADDR
// if not tmp then
22424: LD_VAR 0 8
22428: NOT
22429: IFFALSE 22433
// exit ;
22431: GO 22891
// if in_unit then
22433: LD_VAR 0 11
22437: IFFALSE 22461
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
22439: LD_ADDR_VAR 0 10
22443: PUSH
22444: LD_VAR 0 8
22448: PPUSH
22449: LD_VAR 0 11
22453: PPUSH
22454: CALL_OW 74
22458: ST_TO_ADDR
22459: GO 22481
// enemy := NearestUnitToUnit ( tmp , unit ) ;
22461: LD_ADDR_VAR 0 10
22465: PUSH
22466: LD_VAR 0 8
22470: PPUSH
22471: LD_VAR 0 1
22475: PPUSH
22476: CALL_OW 74
22480: ST_TO_ADDR
// if not enemy then
22481: LD_VAR 0 10
22485: NOT
22486: IFFALSE 22490
// exit ;
22488: GO 22891
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
22490: LD_VAR 0 11
22494: PUSH
22495: LD_VAR 0 11
22499: PPUSH
22500: LD_VAR 0 10
22504: PPUSH
22505: CALL_OW 296
22509: PUSH
22510: LD_INT 13
22512: GREATER
22513: AND
22514: PUSH
22515: LD_VAR 0 1
22519: PPUSH
22520: LD_VAR 0 10
22524: PPUSH
22525: CALL_OW 296
22529: PUSH
22530: LD_INT 12
22532: GREATER
22533: OR
22534: IFFALSE 22538
// exit ;
22536: GO 22891
// missile := [ 1 ] ;
22538: LD_ADDR_VAR 0 14
22542: PUSH
22543: LD_INT 1
22545: PUSH
22546: EMPTY
22547: LIST
22548: ST_TO_ADDR
// if Researched ( side , tech_space ) then
22549: LD_VAR 0 9
22553: PPUSH
22554: LD_VAR 0 12
22558: PPUSH
22559: CALL_OW 325
22563: IFFALSE 22592
// missile := Insert ( missile , missile + 1 , 2 ) ;
22565: LD_ADDR_VAR 0 14
22569: PUSH
22570: LD_VAR 0 14
22574: PPUSH
22575: LD_VAR 0 14
22579: PUSH
22580: LD_INT 1
22582: PLUS
22583: PPUSH
22584: LD_INT 2
22586: PPUSH
22587: CALL_OW 2
22591: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
22592: LD_VAR 0 9
22596: PPUSH
22597: LD_VAR 0 13
22601: PPUSH
22602: CALL_OW 325
22606: PUSH
22607: LD_VAR 0 10
22611: PPUSH
22612: CALL_OW 255
22616: PPUSH
22617: LD_VAR 0 13
22621: PPUSH
22622: CALL_OW 325
22626: NOT
22627: AND
22628: IFFALSE 22657
// missile := Insert ( missile , missile + 1 , 3 ) ;
22630: LD_ADDR_VAR 0 14
22634: PUSH
22635: LD_VAR 0 14
22639: PPUSH
22640: LD_VAR 0 14
22644: PUSH
22645: LD_INT 1
22647: PLUS
22648: PPUSH
22649: LD_INT 3
22651: PPUSH
22652: CALL_OW 2
22656: ST_TO_ADDR
// if missile < 2 then
22657: LD_VAR 0 14
22661: PUSH
22662: LD_INT 2
22664: LESS
22665: IFFALSE 22669
// exit ;
22667: GO 22891
// x := GetX ( enemy ) ;
22669: LD_ADDR_VAR 0 4
22673: PUSH
22674: LD_VAR 0 10
22678: PPUSH
22679: CALL_OW 250
22683: ST_TO_ADDR
// y := GetY ( enemy ) ;
22684: LD_ADDR_VAR 0 5
22688: PUSH
22689: LD_VAR 0 10
22693: PPUSH
22694: CALL_OW 251
22698: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22699: LD_ADDR_VAR 0 6
22703: PUSH
22704: LD_VAR 0 4
22708: PUSH
22709: LD_INT 1
22711: NEG
22712: PPUSH
22713: LD_INT 1
22715: PPUSH
22716: CALL_OW 12
22720: PLUS
22721: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22722: LD_ADDR_VAR 0 7
22726: PUSH
22727: LD_VAR 0 5
22731: PUSH
22732: LD_INT 1
22734: NEG
22735: PPUSH
22736: LD_INT 1
22738: PPUSH
22739: CALL_OW 12
22743: PLUS
22744: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22745: LD_VAR 0 6
22749: PPUSH
22750: LD_VAR 0 7
22754: PPUSH
22755: CALL_OW 488
22759: NOT
22760: IFFALSE 22782
// begin _x := x ;
22762: LD_ADDR_VAR 0 6
22766: PUSH
22767: LD_VAR 0 4
22771: ST_TO_ADDR
// _y := y ;
22772: LD_ADDR_VAR 0 7
22776: PUSH
22777: LD_VAR 0 5
22781: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
22782: LD_ADDR_VAR 0 3
22786: PUSH
22787: LD_INT 1
22789: PPUSH
22790: LD_VAR 0 14
22794: PPUSH
22795: CALL_OW 12
22799: ST_TO_ADDR
// case i of 1 :
22800: LD_VAR 0 3
22804: PUSH
22805: LD_INT 1
22807: DOUBLE
22808: EQUAL
22809: IFTRUE 22813
22811: GO 22830
22813: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
22814: LD_VAR 0 1
22818: PPUSH
22819: LD_VAR 0 10
22823: PPUSH
22824: CALL_OW 115
22828: GO 22891
22830: LD_INT 2
22832: DOUBLE
22833: EQUAL
22834: IFTRUE 22838
22836: GO 22860
22838: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
22839: LD_VAR 0 1
22843: PPUSH
22844: LD_VAR 0 6
22848: PPUSH
22849: LD_VAR 0 7
22853: PPUSH
22854: CALL_OW 153
22858: GO 22891
22860: LD_INT 3
22862: DOUBLE
22863: EQUAL
22864: IFTRUE 22868
22866: GO 22890
22868: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
22869: LD_VAR 0 1
22873: PPUSH
22874: LD_VAR 0 6
22878: PPUSH
22879: LD_VAR 0 7
22883: PPUSH
22884: CALL_OW 154
22888: GO 22891
22890: POP
// end ;
22891: LD_VAR 0 2
22895: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
22896: LD_INT 0
22898: PPUSH
22899: PPUSH
22900: PPUSH
22901: PPUSH
22902: PPUSH
22903: PPUSH
// if not unit or not building then
22904: LD_VAR 0 1
22908: NOT
22909: PUSH
22910: LD_VAR 0 2
22914: NOT
22915: OR
22916: IFFALSE 22920
// exit ;
22918: GO 23078
// x := GetX ( building ) ;
22920: LD_ADDR_VAR 0 5
22924: PUSH
22925: LD_VAR 0 2
22929: PPUSH
22930: CALL_OW 250
22934: ST_TO_ADDR
// y := GetY ( building ) ;
22935: LD_ADDR_VAR 0 6
22939: PUSH
22940: LD_VAR 0 2
22944: PPUSH
22945: CALL_OW 251
22949: ST_TO_ADDR
// for i = 0 to 5 do
22950: LD_ADDR_VAR 0 4
22954: PUSH
22955: DOUBLE
22956: LD_INT 0
22958: DEC
22959: ST_TO_ADDR
22960: LD_INT 5
22962: PUSH
22963: FOR_TO
22964: IFFALSE 23076
// begin _x := ShiftX ( x , i , 3 ) ;
22966: LD_ADDR_VAR 0 7
22970: PUSH
22971: LD_VAR 0 5
22975: PPUSH
22976: LD_VAR 0 4
22980: PPUSH
22981: LD_INT 3
22983: PPUSH
22984: CALL_OW 272
22988: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
22989: LD_ADDR_VAR 0 8
22993: PUSH
22994: LD_VAR 0 6
22998: PPUSH
22999: LD_VAR 0 4
23003: PPUSH
23004: LD_INT 3
23006: PPUSH
23007: CALL_OW 273
23011: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23012: LD_VAR 0 7
23016: PPUSH
23017: LD_VAR 0 8
23021: PPUSH
23022: CALL_OW 488
23026: NOT
23027: IFFALSE 23031
// continue ;
23029: GO 22963
// if HexInfo ( _x , _y ) = 0 then
23031: LD_VAR 0 7
23035: PPUSH
23036: LD_VAR 0 8
23040: PPUSH
23041: CALL_OW 428
23045: PUSH
23046: LD_INT 0
23048: EQUAL
23049: IFFALSE 23074
// begin ComMoveXY ( unit , _x , _y ) ;
23051: LD_VAR 0 1
23055: PPUSH
23056: LD_VAR 0 7
23060: PPUSH
23061: LD_VAR 0 8
23065: PPUSH
23066: CALL_OW 111
// exit ;
23070: POP
23071: POP
23072: GO 23078
// end ; end ;
23074: GO 22963
23076: POP
23077: POP
// end ;
23078: LD_VAR 0 3
23082: RET
// export function ScanBase ( side , base_area ) ; begin
23083: LD_INT 0
23085: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
23086: LD_ADDR_VAR 0 3
23090: PUSH
23091: LD_VAR 0 2
23095: PPUSH
23096: LD_INT 81
23098: PUSH
23099: LD_VAR 0 1
23103: PUSH
23104: EMPTY
23105: LIST
23106: LIST
23107: PPUSH
23108: CALL_OW 70
23112: ST_TO_ADDR
// end ;
23113: LD_VAR 0 3
23117: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
23118: LD_INT 0
23120: PPUSH
23121: PPUSH
23122: PPUSH
23123: PPUSH
// result := false ;
23124: LD_ADDR_VAR 0 2
23128: PUSH
23129: LD_INT 0
23131: ST_TO_ADDR
// side := GetSide ( unit ) ;
23132: LD_ADDR_VAR 0 3
23136: PUSH
23137: LD_VAR 0 1
23141: PPUSH
23142: CALL_OW 255
23146: ST_TO_ADDR
// nat := GetNation ( unit ) ;
23147: LD_ADDR_VAR 0 4
23151: PUSH
23152: LD_VAR 0 1
23156: PPUSH
23157: CALL_OW 248
23161: ST_TO_ADDR
// case nat of 1 :
23162: LD_VAR 0 4
23166: PUSH
23167: LD_INT 1
23169: DOUBLE
23170: EQUAL
23171: IFTRUE 23175
23173: GO 23186
23175: POP
// tech := tech_lassight ; 2 :
23176: LD_ADDR_VAR 0 5
23180: PUSH
23181: LD_INT 12
23183: ST_TO_ADDR
23184: GO 23225
23186: LD_INT 2
23188: DOUBLE
23189: EQUAL
23190: IFTRUE 23194
23192: GO 23205
23194: POP
// tech := tech_mortar ; 3 :
23195: LD_ADDR_VAR 0 5
23199: PUSH
23200: LD_INT 41
23202: ST_TO_ADDR
23203: GO 23225
23205: LD_INT 3
23207: DOUBLE
23208: EQUAL
23209: IFTRUE 23213
23211: GO 23224
23213: POP
// tech := tech_bazooka ; end ;
23214: LD_ADDR_VAR 0 5
23218: PUSH
23219: LD_INT 44
23221: ST_TO_ADDR
23222: GO 23225
23224: POP
// if Researched ( side , tech ) then
23225: LD_VAR 0 3
23229: PPUSH
23230: LD_VAR 0 5
23234: PPUSH
23235: CALL_OW 325
23239: IFFALSE 23266
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
23241: LD_ADDR_VAR 0 2
23245: PUSH
23246: LD_INT 5
23248: PUSH
23249: LD_INT 8
23251: PUSH
23252: LD_INT 9
23254: PUSH
23255: EMPTY
23256: LIST
23257: LIST
23258: LIST
23259: PUSH
23260: LD_VAR 0 4
23264: ARRAY
23265: ST_TO_ADDR
// end ;
23266: LD_VAR 0 2
23270: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
23271: LD_INT 0
23273: PPUSH
23274: PPUSH
23275: PPUSH
// if not mines then
23276: LD_VAR 0 2
23280: NOT
23281: IFFALSE 23285
// exit ;
23283: GO 23429
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23285: LD_ADDR_VAR 0 5
23289: PUSH
23290: LD_INT 81
23292: PUSH
23293: LD_VAR 0 1
23297: PUSH
23298: EMPTY
23299: LIST
23300: LIST
23301: PUSH
23302: LD_INT 3
23304: PUSH
23305: LD_INT 21
23307: PUSH
23308: LD_INT 3
23310: PUSH
23311: EMPTY
23312: LIST
23313: LIST
23314: PUSH
23315: EMPTY
23316: LIST
23317: LIST
23318: PUSH
23319: EMPTY
23320: LIST
23321: LIST
23322: PPUSH
23323: CALL_OW 69
23327: ST_TO_ADDR
// for i in mines do
23328: LD_ADDR_VAR 0 4
23332: PUSH
23333: LD_VAR 0 2
23337: PUSH
23338: FOR_IN
23339: IFFALSE 23427
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
23341: LD_VAR 0 4
23345: PUSH
23346: LD_INT 1
23348: ARRAY
23349: PPUSH
23350: LD_VAR 0 4
23354: PUSH
23355: LD_INT 2
23357: ARRAY
23358: PPUSH
23359: CALL_OW 458
23363: NOT
23364: IFFALSE 23368
// continue ;
23366: GO 23338
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
23368: LD_VAR 0 4
23372: PUSH
23373: LD_INT 1
23375: ARRAY
23376: PPUSH
23377: LD_VAR 0 4
23381: PUSH
23382: LD_INT 2
23384: ARRAY
23385: PPUSH
23386: CALL_OW 428
23390: PUSH
23391: LD_VAR 0 5
23395: IN
23396: IFFALSE 23425
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
23398: LD_VAR 0 4
23402: PUSH
23403: LD_INT 1
23405: ARRAY
23406: PPUSH
23407: LD_VAR 0 4
23411: PUSH
23412: LD_INT 2
23414: ARRAY
23415: PPUSH
23416: LD_VAR 0 1
23420: PPUSH
23421: CALL_OW 456
// end ;
23425: GO 23338
23427: POP
23428: POP
// end ;
23429: LD_VAR 0 3
23433: RET
// export function Count ( array ) ; var i ; begin
23434: LD_INT 0
23436: PPUSH
23437: PPUSH
// result := 0 ;
23438: LD_ADDR_VAR 0 2
23442: PUSH
23443: LD_INT 0
23445: ST_TO_ADDR
// for i in array do
23446: LD_ADDR_VAR 0 3
23450: PUSH
23451: LD_VAR 0 1
23455: PUSH
23456: FOR_IN
23457: IFFALSE 23481
// if i then
23459: LD_VAR 0 3
23463: IFFALSE 23479
// result := result + 1 ;
23465: LD_ADDR_VAR 0 2
23469: PUSH
23470: LD_VAR 0 2
23474: PUSH
23475: LD_INT 1
23477: PLUS
23478: ST_TO_ADDR
23479: GO 23456
23481: POP
23482: POP
// end ;
23483: LD_VAR 0 2
23487: RET
// export function IsEmpty ( building ) ; begin
23488: LD_INT 0
23490: PPUSH
// if not building then
23491: LD_VAR 0 1
23495: NOT
23496: IFFALSE 23500
// exit ;
23498: GO 23543
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
23500: LD_ADDR_VAR 0 2
23504: PUSH
23505: LD_VAR 0 1
23509: PUSH
23510: LD_INT 22
23512: PUSH
23513: LD_VAR 0 1
23517: PPUSH
23518: CALL_OW 255
23522: PUSH
23523: EMPTY
23524: LIST
23525: LIST
23526: PUSH
23527: LD_INT 58
23529: PUSH
23530: EMPTY
23531: LIST
23532: PUSH
23533: EMPTY
23534: LIST
23535: LIST
23536: PPUSH
23537: CALL_OW 69
23541: IN
23542: ST_TO_ADDR
// end ;
23543: LD_VAR 0 2
23547: RET
// export function IsNotFull ( building ) ; begin
23548: LD_INT 0
23550: PPUSH
// if not building then
23551: LD_VAR 0 1
23555: NOT
23556: IFFALSE 23560
// exit ;
23558: GO 23579
// result := UnitsInside ( building ) < 6 ;
23560: LD_ADDR_VAR 0 2
23564: PUSH
23565: LD_VAR 0 1
23569: PPUSH
23570: CALL_OW 313
23574: PUSH
23575: LD_INT 6
23577: LESS
23578: ST_TO_ADDR
// end ;
23579: LD_VAR 0 2
23583: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
23584: LD_INT 0
23586: PPUSH
23587: PPUSH
23588: PPUSH
23589: PPUSH
// tmp := [ ] ;
23590: LD_ADDR_VAR 0 3
23594: PUSH
23595: EMPTY
23596: ST_TO_ADDR
// list := [ ] ;
23597: LD_ADDR_VAR 0 5
23601: PUSH
23602: EMPTY
23603: ST_TO_ADDR
// for i = 16 to 25 do
23604: LD_ADDR_VAR 0 4
23608: PUSH
23609: DOUBLE
23610: LD_INT 16
23612: DEC
23613: ST_TO_ADDR
23614: LD_INT 25
23616: PUSH
23617: FOR_TO
23618: IFFALSE 23691
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
23620: LD_ADDR_VAR 0 3
23624: PUSH
23625: LD_VAR 0 3
23629: PUSH
23630: LD_INT 22
23632: PUSH
23633: LD_VAR 0 1
23637: PPUSH
23638: CALL_OW 255
23642: PUSH
23643: EMPTY
23644: LIST
23645: LIST
23646: PUSH
23647: LD_INT 91
23649: PUSH
23650: LD_VAR 0 1
23654: PUSH
23655: LD_INT 6
23657: PUSH
23658: EMPTY
23659: LIST
23660: LIST
23661: LIST
23662: PUSH
23663: LD_INT 30
23665: PUSH
23666: LD_VAR 0 4
23670: PUSH
23671: EMPTY
23672: LIST
23673: LIST
23674: PUSH
23675: EMPTY
23676: LIST
23677: LIST
23678: LIST
23679: PUSH
23680: EMPTY
23681: LIST
23682: PPUSH
23683: CALL_OW 69
23687: ADD
23688: ST_TO_ADDR
23689: GO 23617
23691: POP
23692: POP
// for i = 1 to tmp do
23693: LD_ADDR_VAR 0 4
23697: PUSH
23698: DOUBLE
23699: LD_INT 1
23701: DEC
23702: ST_TO_ADDR
23703: LD_VAR 0 3
23707: PUSH
23708: FOR_TO
23709: IFFALSE 23797
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23711: LD_ADDR_VAR 0 5
23715: PUSH
23716: LD_VAR 0 5
23720: PUSH
23721: LD_VAR 0 3
23725: PUSH
23726: LD_VAR 0 4
23730: ARRAY
23731: PPUSH
23732: CALL_OW 266
23736: PUSH
23737: LD_VAR 0 3
23741: PUSH
23742: LD_VAR 0 4
23746: ARRAY
23747: PPUSH
23748: CALL_OW 250
23752: PUSH
23753: LD_VAR 0 3
23757: PUSH
23758: LD_VAR 0 4
23762: ARRAY
23763: PPUSH
23764: CALL_OW 251
23768: PUSH
23769: LD_VAR 0 3
23773: PUSH
23774: LD_VAR 0 4
23778: ARRAY
23779: PPUSH
23780: CALL_OW 254
23784: PUSH
23785: EMPTY
23786: LIST
23787: LIST
23788: LIST
23789: LIST
23790: PUSH
23791: EMPTY
23792: LIST
23793: ADD
23794: ST_TO_ADDR
23795: GO 23708
23797: POP
23798: POP
// result := list ;
23799: LD_ADDR_VAR 0 2
23803: PUSH
23804: LD_VAR 0 5
23808: ST_TO_ADDR
// end ;
23809: LD_VAR 0 2
23813: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23814: LD_INT 0
23816: PPUSH
23817: PPUSH
23818: PPUSH
23819: PPUSH
23820: PPUSH
23821: PPUSH
23822: PPUSH
// if not factory then
23823: LD_VAR 0 1
23827: NOT
23828: IFFALSE 23832
// exit ;
23830: GO 24425
// if control = control_apeman then
23832: LD_VAR 0 4
23836: PUSH
23837: LD_INT 5
23839: EQUAL
23840: IFFALSE 23949
// begin tmp := UnitsInside ( factory ) ;
23842: LD_ADDR_VAR 0 8
23846: PUSH
23847: LD_VAR 0 1
23851: PPUSH
23852: CALL_OW 313
23856: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
23857: LD_VAR 0 8
23861: PPUSH
23862: LD_INT 25
23864: PUSH
23865: LD_INT 12
23867: PUSH
23868: EMPTY
23869: LIST
23870: LIST
23871: PPUSH
23872: CALL_OW 72
23876: NOT
23877: IFFALSE 23887
// control := control_manual ;
23879: LD_ADDR_VAR 0 4
23883: PUSH
23884: LD_INT 1
23886: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
23887: LD_ADDR_VAR 0 8
23891: PUSH
23892: LD_VAR 0 1
23896: PPUSH
23897: CALL 23584 0 1
23901: ST_TO_ADDR
// if tmp then
23902: LD_VAR 0 8
23906: IFFALSE 23949
// begin for i in tmp do
23908: LD_ADDR_VAR 0 7
23912: PUSH
23913: LD_VAR 0 8
23917: PUSH
23918: FOR_IN
23919: IFFALSE 23947
// if i [ 1 ] = b_ext_radio then
23921: LD_VAR 0 7
23925: PUSH
23926: LD_INT 1
23928: ARRAY
23929: PUSH
23930: LD_INT 22
23932: EQUAL
23933: IFFALSE 23945
// begin control := control_remote ;
23935: LD_ADDR_VAR 0 4
23939: PUSH
23940: LD_INT 2
23942: ST_TO_ADDR
// break ;
23943: GO 23947
// end ;
23945: GO 23918
23947: POP
23948: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23949: LD_VAR 0 1
23953: PPUSH
23954: LD_VAR 0 2
23958: PPUSH
23959: LD_VAR 0 3
23963: PPUSH
23964: LD_VAR 0 4
23968: PPUSH
23969: LD_VAR 0 5
23973: PPUSH
23974: CALL_OW 448
23978: IFFALSE 24013
// begin result := [ chassis , engine , control , weapon ] ;
23980: LD_ADDR_VAR 0 6
23984: PUSH
23985: LD_VAR 0 2
23989: PUSH
23990: LD_VAR 0 3
23994: PUSH
23995: LD_VAR 0 4
23999: PUSH
24000: LD_VAR 0 5
24004: PUSH
24005: EMPTY
24006: LIST
24007: LIST
24008: LIST
24009: LIST
24010: ST_TO_ADDR
// exit ;
24011: GO 24425
// end ; _chassis := AvailableChassisList ( factory ) ;
24013: LD_ADDR_VAR 0 9
24017: PUSH
24018: LD_VAR 0 1
24022: PPUSH
24023: CALL_OW 475
24027: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
24028: LD_ADDR_VAR 0 11
24032: PUSH
24033: LD_VAR 0 1
24037: PPUSH
24038: CALL_OW 476
24042: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
24043: LD_ADDR_VAR 0 12
24047: PUSH
24048: LD_VAR 0 1
24052: PPUSH
24053: CALL_OW 477
24057: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
24058: LD_ADDR_VAR 0 10
24062: PUSH
24063: LD_VAR 0 1
24067: PPUSH
24068: CALL_OW 478
24072: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
24073: LD_VAR 0 9
24077: NOT
24078: PUSH
24079: LD_VAR 0 11
24083: NOT
24084: OR
24085: PUSH
24086: LD_VAR 0 12
24090: NOT
24091: OR
24092: PUSH
24093: LD_VAR 0 10
24097: NOT
24098: OR
24099: IFFALSE 24134
// begin result := [ chassis , engine , control , weapon ] ;
24101: LD_ADDR_VAR 0 6
24105: PUSH
24106: LD_VAR 0 2
24110: PUSH
24111: LD_VAR 0 3
24115: PUSH
24116: LD_VAR 0 4
24120: PUSH
24121: LD_VAR 0 5
24125: PUSH
24126: EMPTY
24127: LIST
24128: LIST
24129: LIST
24130: LIST
24131: ST_TO_ADDR
// exit ;
24132: GO 24425
// end ; if not chassis in _chassis then
24134: LD_VAR 0 2
24138: PUSH
24139: LD_VAR 0 9
24143: IN
24144: NOT
24145: IFFALSE 24171
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
24147: LD_ADDR_VAR 0 2
24151: PUSH
24152: LD_VAR 0 9
24156: PUSH
24157: LD_INT 1
24159: PPUSH
24160: LD_VAR 0 9
24164: PPUSH
24165: CALL_OW 12
24169: ARRAY
24170: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
24171: LD_VAR 0 2
24175: PPUSH
24176: LD_VAR 0 3
24180: PPUSH
24181: CALL 24430 0 2
24185: NOT
24186: IFFALSE 24245
// repeat engine := _engine [ 1 ] ;
24188: LD_ADDR_VAR 0 3
24192: PUSH
24193: LD_VAR 0 11
24197: PUSH
24198: LD_INT 1
24200: ARRAY
24201: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
24202: LD_ADDR_VAR 0 11
24206: PUSH
24207: LD_VAR 0 11
24211: PPUSH
24212: LD_INT 1
24214: PPUSH
24215: CALL_OW 3
24219: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
24220: LD_VAR 0 2
24224: PPUSH
24225: LD_VAR 0 3
24229: PPUSH
24230: CALL 24430 0 2
24234: PUSH
24235: LD_VAR 0 11
24239: PUSH
24240: EMPTY
24241: EQUAL
24242: OR
24243: IFFALSE 24188
// if not control in _control then
24245: LD_VAR 0 4
24249: PUSH
24250: LD_VAR 0 12
24254: IN
24255: NOT
24256: IFFALSE 24282
// control := _control [ rand ( 1 , _control ) ] ;
24258: LD_ADDR_VAR 0 4
24262: PUSH
24263: LD_VAR 0 12
24267: PUSH
24268: LD_INT 1
24270: PPUSH
24271: LD_VAR 0 12
24275: PPUSH
24276: CALL_OW 12
24280: ARRAY
24281: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
24282: LD_VAR 0 2
24286: PPUSH
24287: LD_VAR 0 5
24291: PPUSH
24292: CALL 24650 0 2
24296: NOT
24297: IFFALSE 24356
// repeat weapon := _weapon [ 1 ] ;
24299: LD_ADDR_VAR 0 5
24303: PUSH
24304: LD_VAR 0 10
24308: PUSH
24309: LD_INT 1
24311: ARRAY
24312: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
24313: LD_ADDR_VAR 0 10
24317: PUSH
24318: LD_VAR 0 10
24322: PPUSH
24323: LD_INT 1
24325: PPUSH
24326: CALL_OW 3
24330: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
24331: LD_VAR 0 2
24335: PPUSH
24336: LD_VAR 0 5
24340: PPUSH
24341: CALL 24650 0 2
24345: PUSH
24346: LD_VAR 0 10
24350: PUSH
24351: EMPTY
24352: EQUAL
24353: OR
24354: IFFALSE 24299
// result := [ ] ;
24356: LD_ADDR_VAR 0 6
24360: PUSH
24361: EMPTY
24362: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
24363: LD_VAR 0 1
24367: PPUSH
24368: LD_VAR 0 2
24372: PPUSH
24373: LD_VAR 0 3
24377: PPUSH
24378: LD_VAR 0 4
24382: PPUSH
24383: LD_VAR 0 5
24387: PPUSH
24388: CALL_OW 448
24392: IFFALSE 24425
// result := [ chassis , engine , control , weapon ] ;
24394: LD_ADDR_VAR 0 6
24398: PUSH
24399: LD_VAR 0 2
24403: PUSH
24404: LD_VAR 0 3
24408: PUSH
24409: LD_VAR 0 4
24413: PUSH
24414: LD_VAR 0 5
24418: PUSH
24419: EMPTY
24420: LIST
24421: LIST
24422: LIST
24423: LIST
24424: ST_TO_ADDR
// end ;
24425: LD_VAR 0 6
24429: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
24430: LD_INT 0
24432: PPUSH
// if not chassis or not engine then
24433: LD_VAR 0 1
24437: NOT
24438: PUSH
24439: LD_VAR 0 2
24443: NOT
24444: OR
24445: IFFALSE 24449
// exit ;
24447: GO 24645
// case engine of engine_solar :
24449: LD_VAR 0 2
24453: PUSH
24454: LD_INT 2
24456: DOUBLE
24457: EQUAL
24458: IFTRUE 24462
24460: GO 24500
24462: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
24463: LD_ADDR_VAR 0 3
24467: PUSH
24468: LD_INT 11
24470: PUSH
24471: LD_INT 12
24473: PUSH
24474: LD_INT 13
24476: PUSH
24477: LD_INT 14
24479: PUSH
24480: LD_INT 1
24482: PUSH
24483: LD_INT 2
24485: PUSH
24486: LD_INT 3
24488: PUSH
24489: EMPTY
24490: LIST
24491: LIST
24492: LIST
24493: LIST
24494: LIST
24495: LIST
24496: LIST
24497: ST_TO_ADDR
24498: GO 24629
24500: LD_INT 1
24502: DOUBLE
24503: EQUAL
24504: IFTRUE 24508
24506: GO 24570
24508: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
24509: LD_ADDR_VAR 0 3
24513: PUSH
24514: LD_INT 11
24516: PUSH
24517: LD_INT 12
24519: PUSH
24520: LD_INT 13
24522: PUSH
24523: LD_INT 14
24525: PUSH
24526: LD_INT 1
24528: PUSH
24529: LD_INT 2
24531: PUSH
24532: LD_INT 3
24534: PUSH
24535: LD_INT 4
24537: PUSH
24538: LD_INT 5
24540: PUSH
24541: LD_INT 21
24543: PUSH
24544: LD_INT 23
24546: PUSH
24547: LD_INT 22
24549: PUSH
24550: LD_INT 24
24552: PUSH
24553: EMPTY
24554: LIST
24555: LIST
24556: LIST
24557: LIST
24558: LIST
24559: LIST
24560: LIST
24561: LIST
24562: LIST
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: ST_TO_ADDR
24568: GO 24629
24570: LD_INT 3
24572: DOUBLE
24573: EQUAL
24574: IFTRUE 24578
24576: GO 24628
24578: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
24579: LD_ADDR_VAR 0 3
24583: PUSH
24584: LD_INT 13
24586: PUSH
24587: LD_INT 14
24589: PUSH
24590: LD_INT 2
24592: PUSH
24593: LD_INT 3
24595: PUSH
24596: LD_INT 4
24598: PUSH
24599: LD_INT 5
24601: PUSH
24602: LD_INT 21
24604: PUSH
24605: LD_INT 22
24607: PUSH
24608: LD_INT 23
24610: PUSH
24611: LD_INT 24
24613: PUSH
24614: EMPTY
24615: LIST
24616: LIST
24617: LIST
24618: LIST
24619: LIST
24620: LIST
24621: LIST
24622: LIST
24623: LIST
24624: LIST
24625: ST_TO_ADDR
24626: GO 24629
24628: POP
// result := ( chassis in result ) ;
24629: LD_ADDR_VAR 0 3
24633: PUSH
24634: LD_VAR 0 1
24638: PUSH
24639: LD_VAR 0 3
24643: IN
24644: ST_TO_ADDR
// end ;
24645: LD_VAR 0 3
24649: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24650: LD_INT 0
24652: PPUSH
// if not chassis or not weapon then
24653: LD_VAR 0 1
24657: NOT
24658: PUSH
24659: LD_VAR 0 2
24663: NOT
24664: OR
24665: IFFALSE 24669
// exit ;
24667: GO 25731
// case weapon of us_machine_gun :
24669: LD_VAR 0 2
24673: PUSH
24674: LD_INT 2
24676: DOUBLE
24677: EQUAL
24678: IFTRUE 24682
24680: GO 24712
24682: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24683: LD_ADDR_VAR 0 3
24687: PUSH
24688: LD_INT 1
24690: PUSH
24691: LD_INT 2
24693: PUSH
24694: LD_INT 3
24696: PUSH
24697: LD_INT 4
24699: PUSH
24700: LD_INT 5
24702: PUSH
24703: EMPTY
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: ST_TO_ADDR
24710: GO 25715
24712: LD_INT 3
24714: DOUBLE
24715: EQUAL
24716: IFTRUE 24720
24718: GO 24750
24720: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24721: LD_ADDR_VAR 0 3
24725: PUSH
24726: LD_INT 1
24728: PUSH
24729: LD_INT 2
24731: PUSH
24732: LD_INT 3
24734: PUSH
24735: LD_INT 4
24737: PUSH
24738: LD_INT 5
24740: PUSH
24741: EMPTY
24742: LIST
24743: LIST
24744: LIST
24745: LIST
24746: LIST
24747: ST_TO_ADDR
24748: GO 25715
24750: LD_INT 11
24752: DOUBLE
24753: EQUAL
24754: IFTRUE 24758
24756: GO 24788
24758: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24759: LD_ADDR_VAR 0 3
24763: PUSH
24764: LD_INT 1
24766: PUSH
24767: LD_INT 2
24769: PUSH
24770: LD_INT 3
24772: PUSH
24773: LD_INT 4
24775: PUSH
24776: LD_INT 5
24778: PUSH
24779: EMPTY
24780: LIST
24781: LIST
24782: LIST
24783: LIST
24784: LIST
24785: ST_TO_ADDR
24786: GO 25715
24788: LD_INT 4
24790: DOUBLE
24791: EQUAL
24792: IFTRUE 24796
24794: GO 24822
24796: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24797: LD_ADDR_VAR 0 3
24801: PUSH
24802: LD_INT 2
24804: PUSH
24805: LD_INT 3
24807: PUSH
24808: LD_INT 4
24810: PUSH
24811: LD_INT 5
24813: PUSH
24814: EMPTY
24815: LIST
24816: LIST
24817: LIST
24818: LIST
24819: ST_TO_ADDR
24820: GO 25715
24822: LD_INT 5
24824: DOUBLE
24825: EQUAL
24826: IFTRUE 24830
24828: GO 24856
24830: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24831: LD_ADDR_VAR 0 3
24835: PUSH
24836: LD_INT 2
24838: PUSH
24839: LD_INT 3
24841: PUSH
24842: LD_INT 4
24844: PUSH
24845: LD_INT 5
24847: PUSH
24848: EMPTY
24849: LIST
24850: LIST
24851: LIST
24852: LIST
24853: ST_TO_ADDR
24854: GO 25715
24856: LD_INT 9
24858: DOUBLE
24859: EQUAL
24860: IFTRUE 24864
24862: GO 24890
24864: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
24865: LD_ADDR_VAR 0 3
24869: PUSH
24870: LD_INT 2
24872: PUSH
24873: LD_INT 3
24875: PUSH
24876: LD_INT 4
24878: PUSH
24879: LD_INT 5
24881: PUSH
24882: EMPTY
24883: LIST
24884: LIST
24885: LIST
24886: LIST
24887: ST_TO_ADDR
24888: GO 25715
24890: LD_INT 7
24892: DOUBLE
24893: EQUAL
24894: IFTRUE 24898
24896: GO 24924
24898: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
24899: LD_ADDR_VAR 0 3
24903: PUSH
24904: LD_INT 2
24906: PUSH
24907: LD_INT 3
24909: PUSH
24910: LD_INT 4
24912: PUSH
24913: LD_INT 5
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: LIST
24920: LIST
24921: ST_TO_ADDR
24922: GO 25715
24924: LD_INT 12
24926: DOUBLE
24927: EQUAL
24928: IFTRUE 24932
24930: GO 24958
24932: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
24933: LD_ADDR_VAR 0 3
24937: PUSH
24938: LD_INT 2
24940: PUSH
24941: LD_INT 3
24943: PUSH
24944: LD_INT 4
24946: PUSH
24947: LD_INT 5
24949: PUSH
24950: EMPTY
24951: LIST
24952: LIST
24953: LIST
24954: LIST
24955: ST_TO_ADDR
24956: GO 25715
24958: LD_INT 13
24960: DOUBLE
24961: EQUAL
24962: IFTRUE 24966
24964: GO 24992
24966: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
24967: LD_ADDR_VAR 0 3
24971: PUSH
24972: LD_INT 2
24974: PUSH
24975: LD_INT 3
24977: PUSH
24978: LD_INT 4
24980: PUSH
24981: LD_INT 5
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: LIST
24988: LIST
24989: ST_TO_ADDR
24990: GO 25715
24992: LD_INT 14
24994: DOUBLE
24995: EQUAL
24996: IFTRUE 25000
24998: GO 25018
25000: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
25001: LD_ADDR_VAR 0 3
25005: PUSH
25006: LD_INT 4
25008: PUSH
25009: LD_INT 5
25011: PUSH
25012: EMPTY
25013: LIST
25014: LIST
25015: ST_TO_ADDR
25016: GO 25715
25018: LD_INT 6
25020: DOUBLE
25021: EQUAL
25022: IFTRUE 25026
25024: GO 25044
25026: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
25027: LD_ADDR_VAR 0 3
25031: PUSH
25032: LD_INT 4
25034: PUSH
25035: LD_INT 5
25037: PUSH
25038: EMPTY
25039: LIST
25040: LIST
25041: ST_TO_ADDR
25042: GO 25715
25044: LD_INT 10
25046: DOUBLE
25047: EQUAL
25048: IFTRUE 25052
25050: GO 25070
25052: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
25053: LD_ADDR_VAR 0 3
25057: PUSH
25058: LD_INT 4
25060: PUSH
25061: LD_INT 5
25063: PUSH
25064: EMPTY
25065: LIST
25066: LIST
25067: ST_TO_ADDR
25068: GO 25715
25070: LD_INT 22
25072: DOUBLE
25073: EQUAL
25074: IFTRUE 25078
25076: GO 25104
25078: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
25079: LD_ADDR_VAR 0 3
25083: PUSH
25084: LD_INT 11
25086: PUSH
25087: LD_INT 12
25089: PUSH
25090: LD_INT 13
25092: PUSH
25093: LD_INT 14
25095: PUSH
25096: EMPTY
25097: LIST
25098: LIST
25099: LIST
25100: LIST
25101: ST_TO_ADDR
25102: GO 25715
25104: LD_INT 23
25106: DOUBLE
25107: EQUAL
25108: IFTRUE 25112
25110: GO 25138
25112: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
25113: LD_ADDR_VAR 0 3
25117: PUSH
25118: LD_INT 11
25120: PUSH
25121: LD_INT 12
25123: PUSH
25124: LD_INT 13
25126: PUSH
25127: LD_INT 14
25129: PUSH
25130: EMPTY
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: ST_TO_ADDR
25136: GO 25715
25138: LD_INT 24
25140: DOUBLE
25141: EQUAL
25142: IFTRUE 25146
25144: GO 25172
25146: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
25147: LD_ADDR_VAR 0 3
25151: PUSH
25152: LD_INT 11
25154: PUSH
25155: LD_INT 12
25157: PUSH
25158: LD_INT 13
25160: PUSH
25161: LD_INT 14
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: ST_TO_ADDR
25170: GO 25715
25172: LD_INT 30
25174: DOUBLE
25175: EQUAL
25176: IFTRUE 25180
25178: GO 25206
25180: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
25181: LD_ADDR_VAR 0 3
25185: PUSH
25186: LD_INT 11
25188: PUSH
25189: LD_INT 12
25191: PUSH
25192: LD_INT 13
25194: PUSH
25195: LD_INT 14
25197: PUSH
25198: EMPTY
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: ST_TO_ADDR
25204: GO 25715
25206: LD_INT 25
25208: DOUBLE
25209: EQUAL
25210: IFTRUE 25214
25212: GO 25232
25214: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
25215: LD_ADDR_VAR 0 3
25219: PUSH
25220: LD_INT 13
25222: PUSH
25223: LD_INT 14
25225: PUSH
25226: EMPTY
25227: LIST
25228: LIST
25229: ST_TO_ADDR
25230: GO 25715
25232: LD_INT 27
25234: DOUBLE
25235: EQUAL
25236: IFTRUE 25240
25238: GO 25258
25240: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
25241: LD_ADDR_VAR 0 3
25245: PUSH
25246: LD_INT 13
25248: PUSH
25249: LD_INT 14
25251: PUSH
25252: EMPTY
25253: LIST
25254: LIST
25255: ST_TO_ADDR
25256: GO 25715
25258: LD_EXP 87
25262: DOUBLE
25263: EQUAL
25264: IFTRUE 25268
25266: GO 25294
25268: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
25269: LD_ADDR_VAR 0 3
25273: PUSH
25274: LD_INT 11
25276: PUSH
25277: LD_INT 12
25279: PUSH
25280: LD_INT 13
25282: PUSH
25283: LD_INT 14
25285: PUSH
25286: EMPTY
25287: LIST
25288: LIST
25289: LIST
25290: LIST
25291: ST_TO_ADDR
25292: GO 25715
25294: LD_INT 28
25296: DOUBLE
25297: EQUAL
25298: IFTRUE 25302
25300: GO 25320
25302: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
25303: LD_ADDR_VAR 0 3
25307: PUSH
25308: LD_INT 13
25310: PUSH
25311: LD_INT 14
25313: PUSH
25314: EMPTY
25315: LIST
25316: LIST
25317: ST_TO_ADDR
25318: GO 25715
25320: LD_INT 29
25322: DOUBLE
25323: EQUAL
25324: IFTRUE 25328
25326: GO 25346
25328: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
25329: LD_ADDR_VAR 0 3
25333: PUSH
25334: LD_INT 13
25336: PUSH
25337: LD_INT 14
25339: PUSH
25340: EMPTY
25341: LIST
25342: LIST
25343: ST_TO_ADDR
25344: GO 25715
25346: LD_INT 31
25348: DOUBLE
25349: EQUAL
25350: IFTRUE 25354
25352: GO 25372
25354: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
25355: LD_ADDR_VAR 0 3
25359: PUSH
25360: LD_INT 13
25362: PUSH
25363: LD_INT 14
25365: PUSH
25366: EMPTY
25367: LIST
25368: LIST
25369: ST_TO_ADDR
25370: GO 25715
25372: LD_INT 26
25374: DOUBLE
25375: EQUAL
25376: IFTRUE 25380
25378: GO 25398
25380: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
25381: LD_ADDR_VAR 0 3
25385: PUSH
25386: LD_INT 13
25388: PUSH
25389: LD_INT 14
25391: PUSH
25392: EMPTY
25393: LIST
25394: LIST
25395: ST_TO_ADDR
25396: GO 25715
25398: LD_INT 42
25400: DOUBLE
25401: EQUAL
25402: IFTRUE 25406
25404: GO 25432
25406: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
25407: LD_ADDR_VAR 0 3
25411: PUSH
25412: LD_INT 21
25414: PUSH
25415: LD_INT 22
25417: PUSH
25418: LD_INT 23
25420: PUSH
25421: LD_INT 24
25423: PUSH
25424: EMPTY
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: ST_TO_ADDR
25430: GO 25715
25432: LD_INT 43
25434: DOUBLE
25435: EQUAL
25436: IFTRUE 25440
25438: GO 25466
25440: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
25441: LD_ADDR_VAR 0 3
25445: PUSH
25446: LD_INT 21
25448: PUSH
25449: LD_INT 22
25451: PUSH
25452: LD_INT 23
25454: PUSH
25455: LD_INT 24
25457: PUSH
25458: EMPTY
25459: LIST
25460: LIST
25461: LIST
25462: LIST
25463: ST_TO_ADDR
25464: GO 25715
25466: LD_INT 44
25468: DOUBLE
25469: EQUAL
25470: IFTRUE 25474
25472: GO 25500
25474: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
25475: LD_ADDR_VAR 0 3
25479: PUSH
25480: LD_INT 21
25482: PUSH
25483: LD_INT 22
25485: PUSH
25486: LD_INT 23
25488: PUSH
25489: LD_INT 24
25491: PUSH
25492: EMPTY
25493: LIST
25494: LIST
25495: LIST
25496: LIST
25497: ST_TO_ADDR
25498: GO 25715
25500: LD_INT 45
25502: DOUBLE
25503: EQUAL
25504: IFTRUE 25508
25506: GO 25534
25508: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
25509: LD_ADDR_VAR 0 3
25513: PUSH
25514: LD_INT 21
25516: PUSH
25517: LD_INT 22
25519: PUSH
25520: LD_INT 23
25522: PUSH
25523: LD_INT 24
25525: PUSH
25526: EMPTY
25527: LIST
25528: LIST
25529: LIST
25530: LIST
25531: ST_TO_ADDR
25532: GO 25715
25534: LD_INT 49
25536: DOUBLE
25537: EQUAL
25538: IFTRUE 25542
25540: GO 25568
25542: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
25543: LD_ADDR_VAR 0 3
25547: PUSH
25548: LD_INT 21
25550: PUSH
25551: LD_INT 22
25553: PUSH
25554: LD_INT 23
25556: PUSH
25557: LD_INT 24
25559: PUSH
25560: EMPTY
25561: LIST
25562: LIST
25563: LIST
25564: LIST
25565: ST_TO_ADDR
25566: GO 25715
25568: LD_INT 51
25570: DOUBLE
25571: EQUAL
25572: IFTRUE 25576
25574: GO 25602
25576: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
25577: LD_ADDR_VAR 0 3
25581: PUSH
25582: LD_INT 21
25584: PUSH
25585: LD_INT 22
25587: PUSH
25588: LD_INT 23
25590: PUSH
25591: LD_INT 24
25593: PUSH
25594: EMPTY
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: ST_TO_ADDR
25600: GO 25715
25602: LD_INT 52
25604: DOUBLE
25605: EQUAL
25606: IFTRUE 25610
25608: GO 25636
25610: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
25611: LD_ADDR_VAR 0 3
25615: PUSH
25616: LD_INT 21
25618: PUSH
25619: LD_INT 22
25621: PUSH
25622: LD_INT 23
25624: PUSH
25625: LD_INT 24
25627: PUSH
25628: EMPTY
25629: LIST
25630: LIST
25631: LIST
25632: LIST
25633: ST_TO_ADDR
25634: GO 25715
25636: LD_INT 53
25638: DOUBLE
25639: EQUAL
25640: IFTRUE 25644
25642: GO 25662
25644: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
25645: LD_ADDR_VAR 0 3
25649: PUSH
25650: LD_INT 23
25652: PUSH
25653: LD_INT 24
25655: PUSH
25656: EMPTY
25657: LIST
25658: LIST
25659: ST_TO_ADDR
25660: GO 25715
25662: LD_INT 46
25664: DOUBLE
25665: EQUAL
25666: IFTRUE 25670
25668: GO 25688
25670: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
25671: LD_ADDR_VAR 0 3
25675: PUSH
25676: LD_INT 23
25678: PUSH
25679: LD_INT 24
25681: PUSH
25682: EMPTY
25683: LIST
25684: LIST
25685: ST_TO_ADDR
25686: GO 25715
25688: LD_INT 47
25690: DOUBLE
25691: EQUAL
25692: IFTRUE 25696
25694: GO 25714
25696: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25697: LD_ADDR_VAR 0 3
25701: PUSH
25702: LD_INT 23
25704: PUSH
25705: LD_INT 24
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: ST_TO_ADDR
25712: GO 25715
25714: POP
// result := ( chassis in result ) ;
25715: LD_ADDR_VAR 0 3
25719: PUSH
25720: LD_VAR 0 1
25724: PUSH
25725: LD_VAR 0 3
25729: IN
25730: ST_TO_ADDR
// end ;
25731: LD_VAR 0 3
25735: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25736: LD_INT 0
25738: PPUSH
25739: PPUSH
25740: PPUSH
25741: PPUSH
25742: PPUSH
25743: PPUSH
25744: PPUSH
// result := array ;
25745: LD_ADDR_VAR 0 5
25749: PUSH
25750: LD_VAR 0 1
25754: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25755: LD_VAR 0 1
25759: NOT
25760: PUSH
25761: LD_VAR 0 2
25765: NOT
25766: OR
25767: PUSH
25768: LD_VAR 0 3
25772: NOT
25773: OR
25774: PUSH
25775: LD_VAR 0 2
25779: PUSH
25780: LD_VAR 0 1
25784: GREATER
25785: OR
25786: PUSH
25787: LD_VAR 0 3
25791: PUSH
25792: LD_VAR 0 1
25796: GREATER
25797: OR
25798: IFFALSE 25802
// exit ;
25800: GO 26098
// if direction then
25802: LD_VAR 0 4
25806: IFFALSE 25870
// begin d := 1 ;
25808: LD_ADDR_VAR 0 9
25812: PUSH
25813: LD_INT 1
25815: ST_TO_ADDR
// if i_from > i_to then
25816: LD_VAR 0 2
25820: PUSH
25821: LD_VAR 0 3
25825: GREATER
25826: IFFALSE 25852
// length := ( array - i_from ) + i_to else
25828: LD_ADDR_VAR 0 11
25832: PUSH
25833: LD_VAR 0 1
25837: PUSH
25838: LD_VAR 0 2
25842: MINUS
25843: PUSH
25844: LD_VAR 0 3
25848: PLUS
25849: ST_TO_ADDR
25850: GO 25868
// length := i_to - i_from ;
25852: LD_ADDR_VAR 0 11
25856: PUSH
25857: LD_VAR 0 3
25861: PUSH
25862: LD_VAR 0 2
25866: MINUS
25867: ST_TO_ADDR
// end else
25868: GO 25931
// begin d := - 1 ;
25870: LD_ADDR_VAR 0 9
25874: PUSH
25875: LD_INT 1
25877: NEG
25878: ST_TO_ADDR
// if i_from > i_to then
25879: LD_VAR 0 2
25883: PUSH
25884: LD_VAR 0 3
25888: GREATER
25889: IFFALSE 25909
// length := i_from - i_to else
25891: LD_ADDR_VAR 0 11
25895: PUSH
25896: LD_VAR 0 2
25900: PUSH
25901: LD_VAR 0 3
25905: MINUS
25906: ST_TO_ADDR
25907: GO 25931
// length := ( array - i_to ) + i_from ;
25909: LD_ADDR_VAR 0 11
25913: PUSH
25914: LD_VAR 0 1
25918: PUSH
25919: LD_VAR 0 3
25923: MINUS
25924: PUSH
25925: LD_VAR 0 2
25929: PLUS
25930: ST_TO_ADDR
// end ; if not length then
25931: LD_VAR 0 11
25935: NOT
25936: IFFALSE 25940
// exit ;
25938: GO 26098
// tmp := array ;
25940: LD_ADDR_VAR 0 10
25944: PUSH
25945: LD_VAR 0 1
25949: ST_TO_ADDR
// for i = 1 to length do
25950: LD_ADDR_VAR 0 6
25954: PUSH
25955: DOUBLE
25956: LD_INT 1
25958: DEC
25959: ST_TO_ADDR
25960: LD_VAR 0 11
25964: PUSH
25965: FOR_TO
25966: IFFALSE 26086
// begin for j = 1 to array do
25968: LD_ADDR_VAR 0 7
25972: PUSH
25973: DOUBLE
25974: LD_INT 1
25976: DEC
25977: ST_TO_ADDR
25978: LD_VAR 0 1
25982: PUSH
25983: FOR_TO
25984: IFFALSE 26072
// begin k := j + d ;
25986: LD_ADDR_VAR 0 8
25990: PUSH
25991: LD_VAR 0 7
25995: PUSH
25996: LD_VAR 0 9
26000: PLUS
26001: ST_TO_ADDR
// if k > array then
26002: LD_VAR 0 8
26006: PUSH
26007: LD_VAR 0 1
26011: GREATER
26012: IFFALSE 26022
// k := 1 ;
26014: LD_ADDR_VAR 0 8
26018: PUSH
26019: LD_INT 1
26021: ST_TO_ADDR
// if not k then
26022: LD_VAR 0 8
26026: NOT
26027: IFFALSE 26039
// k := array ;
26029: LD_ADDR_VAR 0 8
26033: PUSH
26034: LD_VAR 0 1
26038: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
26039: LD_ADDR_VAR 0 10
26043: PUSH
26044: LD_VAR 0 10
26048: PPUSH
26049: LD_VAR 0 8
26053: PPUSH
26054: LD_VAR 0 1
26058: PUSH
26059: LD_VAR 0 7
26063: ARRAY
26064: PPUSH
26065: CALL_OW 1
26069: ST_TO_ADDR
// end ;
26070: GO 25983
26072: POP
26073: POP
// array := tmp ;
26074: LD_ADDR_VAR 0 1
26078: PUSH
26079: LD_VAR 0 10
26083: ST_TO_ADDR
// end ;
26084: GO 25965
26086: POP
26087: POP
// result := array ;
26088: LD_ADDR_VAR 0 5
26092: PUSH
26093: LD_VAR 0 1
26097: ST_TO_ADDR
// end ;
26098: LD_VAR 0 5
26102: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
26103: LD_INT 0
26105: PPUSH
26106: PPUSH
// result := 0 ;
26107: LD_ADDR_VAR 0 3
26111: PUSH
26112: LD_INT 0
26114: ST_TO_ADDR
// if not array or not value in array then
26115: LD_VAR 0 1
26119: NOT
26120: PUSH
26121: LD_VAR 0 2
26125: PUSH
26126: LD_VAR 0 1
26130: IN
26131: NOT
26132: OR
26133: IFFALSE 26137
// exit ;
26135: GO 26191
// for i = 1 to array do
26137: LD_ADDR_VAR 0 4
26141: PUSH
26142: DOUBLE
26143: LD_INT 1
26145: DEC
26146: ST_TO_ADDR
26147: LD_VAR 0 1
26151: PUSH
26152: FOR_TO
26153: IFFALSE 26189
// if value = array [ i ] then
26155: LD_VAR 0 2
26159: PUSH
26160: LD_VAR 0 1
26164: PUSH
26165: LD_VAR 0 4
26169: ARRAY
26170: EQUAL
26171: IFFALSE 26187
// begin result := i ;
26173: LD_ADDR_VAR 0 3
26177: PUSH
26178: LD_VAR 0 4
26182: ST_TO_ADDR
// exit ;
26183: POP
26184: POP
26185: GO 26191
// end ;
26187: GO 26152
26189: POP
26190: POP
// end ;
26191: LD_VAR 0 3
26195: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
26196: LD_INT 0
26198: PPUSH
// vc_chassis := chassis ;
26199: LD_ADDR_OWVAR 37
26203: PUSH
26204: LD_VAR 0 1
26208: ST_TO_ADDR
// vc_engine := engine ;
26209: LD_ADDR_OWVAR 39
26213: PUSH
26214: LD_VAR 0 2
26218: ST_TO_ADDR
// vc_control := control ;
26219: LD_ADDR_OWVAR 38
26223: PUSH
26224: LD_VAR 0 3
26228: ST_TO_ADDR
// vc_weapon := weapon ;
26229: LD_ADDR_OWVAR 40
26233: PUSH
26234: LD_VAR 0 4
26238: ST_TO_ADDR
// vc_fuel_battery := fuel ;
26239: LD_ADDR_OWVAR 41
26243: PUSH
26244: LD_VAR 0 5
26248: ST_TO_ADDR
// end ;
26249: LD_VAR 0 6
26253: RET
// export function WantPlant ( unit ) ; var task ; begin
26254: LD_INT 0
26256: PPUSH
26257: PPUSH
// result := false ;
26258: LD_ADDR_VAR 0 2
26262: PUSH
26263: LD_INT 0
26265: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
26266: LD_ADDR_VAR 0 3
26270: PUSH
26271: LD_VAR 0 1
26275: PPUSH
26276: CALL_OW 437
26280: ST_TO_ADDR
// if task then
26281: LD_VAR 0 3
26285: IFFALSE 26313
// if task [ 1 ] [ 1 ] = p then
26287: LD_VAR 0 3
26291: PUSH
26292: LD_INT 1
26294: ARRAY
26295: PUSH
26296: LD_INT 1
26298: ARRAY
26299: PUSH
26300: LD_STRING p
26302: EQUAL
26303: IFFALSE 26313
// result := true ;
26305: LD_ADDR_VAR 0 2
26309: PUSH
26310: LD_INT 1
26312: ST_TO_ADDR
// end ;
26313: LD_VAR 0 2
26317: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
26318: LD_INT 0
26320: PPUSH
26321: PPUSH
26322: PPUSH
26323: PPUSH
// if pos < 1 then
26324: LD_VAR 0 2
26328: PUSH
26329: LD_INT 1
26331: LESS
26332: IFFALSE 26336
// exit ;
26334: GO 26639
// if pos = 1 then
26336: LD_VAR 0 2
26340: PUSH
26341: LD_INT 1
26343: EQUAL
26344: IFFALSE 26377
// result := Replace ( arr , pos [ 1 ] , value ) else
26346: LD_ADDR_VAR 0 4
26350: PUSH
26351: LD_VAR 0 1
26355: PPUSH
26356: LD_VAR 0 2
26360: PUSH
26361: LD_INT 1
26363: ARRAY
26364: PPUSH
26365: LD_VAR 0 3
26369: PPUSH
26370: CALL_OW 1
26374: ST_TO_ADDR
26375: GO 26639
// begin tmp := arr ;
26377: LD_ADDR_VAR 0 6
26381: PUSH
26382: LD_VAR 0 1
26386: ST_TO_ADDR
// s_arr := [ tmp ] ;
26387: LD_ADDR_VAR 0 7
26391: PUSH
26392: LD_VAR 0 6
26396: PUSH
26397: EMPTY
26398: LIST
26399: ST_TO_ADDR
// for i = 1 to pos - 1 do
26400: LD_ADDR_VAR 0 5
26404: PUSH
26405: DOUBLE
26406: LD_INT 1
26408: DEC
26409: ST_TO_ADDR
26410: LD_VAR 0 2
26414: PUSH
26415: LD_INT 1
26417: MINUS
26418: PUSH
26419: FOR_TO
26420: IFFALSE 26465
// begin tmp := tmp [ pos [ i ] ] ;
26422: LD_ADDR_VAR 0 6
26426: PUSH
26427: LD_VAR 0 6
26431: PUSH
26432: LD_VAR 0 2
26436: PUSH
26437: LD_VAR 0 5
26441: ARRAY
26442: ARRAY
26443: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
26444: LD_ADDR_VAR 0 7
26448: PUSH
26449: LD_VAR 0 7
26453: PUSH
26454: LD_VAR 0 6
26458: PUSH
26459: EMPTY
26460: LIST
26461: ADD
26462: ST_TO_ADDR
// end ;
26463: GO 26419
26465: POP
26466: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
26467: LD_ADDR_VAR 0 6
26471: PUSH
26472: LD_VAR 0 6
26476: PPUSH
26477: LD_VAR 0 2
26481: PUSH
26482: LD_VAR 0 2
26486: ARRAY
26487: PPUSH
26488: LD_VAR 0 3
26492: PPUSH
26493: CALL_OW 1
26497: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
26498: LD_ADDR_VAR 0 7
26502: PUSH
26503: LD_VAR 0 7
26507: PPUSH
26508: LD_VAR 0 7
26512: PPUSH
26513: LD_VAR 0 6
26517: PPUSH
26518: CALL_OW 1
26522: ST_TO_ADDR
// for i = s_arr downto 2 do
26523: LD_ADDR_VAR 0 5
26527: PUSH
26528: DOUBLE
26529: LD_VAR 0 7
26533: INC
26534: ST_TO_ADDR
26535: LD_INT 2
26537: PUSH
26538: FOR_DOWNTO
26539: IFFALSE 26623
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
26541: LD_ADDR_VAR 0 6
26545: PUSH
26546: LD_VAR 0 7
26550: PUSH
26551: LD_VAR 0 5
26555: PUSH
26556: LD_INT 1
26558: MINUS
26559: ARRAY
26560: PPUSH
26561: LD_VAR 0 2
26565: PUSH
26566: LD_VAR 0 5
26570: PUSH
26571: LD_INT 1
26573: MINUS
26574: ARRAY
26575: PPUSH
26576: LD_VAR 0 7
26580: PUSH
26581: LD_VAR 0 5
26585: ARRAY
26586: PPUSH
26587: CALL_OW 1
26591: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
26592: LD_ADDR_VAR 0 7
26596: PUSH
26597: LD_VAR 0 7
26601: PPUSH
26602: LD_VAR 0 5
26606: PUSH
26607: LD_INT 1
26609: MINUS
26610: PPUSH
26611: LD_VAR 0 6
26615: PPUSH
26616: CALL_OW 1
26620: ST_TO_ADDR
// end ;
26621: GO 26538
26623: POP
26624: POP
// result := s_arr [ 1 ] ;
26625: LD_ADDR_VAR 0 4
26629: PUSH
26630: LD_VAR 0 7
26634: PUSH
26635: LD_INT 1
26637: ARRAY
26638: ST_TO_ADDR
// end ; end ;
26639: LD_VAR 0 4
26643: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
26644: LD_INT 0
26646: PPUSH
26647: PPUSH
// if not list then
26648: LD_VAR 0 1
26652: NOT
26653: IFFALSE 26657
// exit ;
26655: GO 26748
// i := list [ pos1 ] ;
26657: LD_ADDR_VAR 0 5
26661: PUSH
26662: LD_VAR 0 1
26666: PUSH
26667: LD_VAR 0 2
26671: ARRAY
26672: ST_TO_ADDR
// if not i then
26673: LD_VAR 0 5
26677: NOT
26678: IFFALSE 26682
// exit ;
26680: GO 26748
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26682: LD_ADDR_VAR 0 1
26686: PUSH
26687: LD_VAR 0 1
26691: PPUSH
26692: LD_VAR 0 2
26696: PPUSH
26697: LD_VAR 0 1
26701: PUSH
26702: LD_VAR 0 3
26706: ARRAY
26707: PPUSH
26708: CALL_OW 1
26712: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26713: LD_ADDR_VAR 0 1
26717: PUSH
26718: LD_VAR 0 1
26722: PPUSH
26723: LD_VAR 0 3
26727: PPUSH
26728: LD_VAR 0 5
26732: PPUSH
26733: CALL_OW 1
26737: ST_TO_ADDR
// result := list ;
26738: LD_ADDR_VAR 0 4
26742: PUSH
26743: LD_VAR 0 1
26747: ST_TO_ADDR
// end ;
26748: LD_VAR 0 4
26752: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26753: LD_INT 0
26755: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26756: LD_ADDR_VAR 0 5
26760: PUSH
26761: LD_VAR 0 1
26765: PPUSH
26766: CALL_OW 250
26770: PPUSH
26771: LD_VAR 0 1
26775: PPUSH
26776: CALL_OW 251
26780: PPUSH
26781: LD_VAR 0 2
26785: PPUSH
26786: LD_VAR 0 3
26790: PPUSH
26791: LD_VAR 0 4
26795: PPUSH
26796: CALL 26806 0 5
26800: ST_TO_ADDR
// end ;
26801: LD_VAR 0 5
26805: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26806: LD_INT 0
26808: PPUSH
26809: PPUSH
26810: PPUSH
26811: PPUSH
// if not list then
26812: LD_VAR 0 3
26816: NOT
26817: IFFALSE 26821
// exit ;
26819: GO 27209
// result := [ ] ;
26821: LD_ADDR_VAR 0 6
26825: PUSH
26826: EMPTY
26827: ST_TO_ADDR
// for i in list do
26828: LD_ADDR_VAR 0 7
26832: PUSH
26833: LD_VAR 0 3
26837: PUSH
26838: FOR_IN
26839: IFFALSE 27041
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26841: LD_ADDR_VAR 0 9
26845: PUSH
26846: LD_VAR 0 7
26850: PPUSH
26851: LD_VAR 0 1
26855: PPUSH
26856: LD_VAR 0 2
26860: PPUSH
26861: CALL_OW 297
26865: ST_TO_ADDR
// if not result then
26866: LD_VAR 0 6
26870: NOT
26871: IFFALSE 26897
// result := [ [ i , tmp ] ] else
26873: LD_ADDR_VAR 0 6
26877: PUSH
26878: LD_VAR 0 7
26882: PUSH
26883: LD_VAR 0 9
26887: PUSH
26888: EMPTY
26889: LIST
26890: LIST
26891: PUSH
26892: EMPTY
26893: LIST
26894: ST_TO_ADDR
26895: GO 27039
// begin if result [ result ] [ 2 ] < tmp then
26897: LD_VAR 0 6
26901: PUSH
26902: LD_VAR 0 6
26906: ARRAY
26907: PUSH
26908: LD_INT 2
26910: ARRAY
26911: PUSH
26912: LD_VAR 0 9
26916: LESS
26917: IFFALSE 26959
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
26919: LD_ADDR_VAR 0 6
26923: PUSH
26924: LD_VAR 0 6
26928: PPUSH
26929: LD_VAR 0 6
26933: PUSH
26934: LD_INT 1
26936: PLUS
26937: PPUSH
26938: LD_VAR 0 7
26942: PUSH
26943: LD_VAR 0 9
26947: PUSH
26948: EMPTY
26949: LIST
26950: LIST
26951: PPUSH
26952: CALL_OW 2
26956: ST_TO_ADDR
26957: GO 27039
// for j = 1 to result do
26959: LD_ADDR_VAR 0 8
26963: PUSH
26964: DOUBLE
26965: LD_INT 1
26967: DEC
26968: ST_TO_ADDR
26969: LD_VAR 0 6
26973: PUSH
26974: FOR_TO
26975: IFFALSE 27037
// begin if tmp < result [ j ] [ 2 ] then
26977: LD_VAR 0 9
26981: PUSH
26982: LD_VAR 0 6
26986: PUSH
26987: LD_VAR 0 8
26991: ARRAY
26992: PUSH
26993: LD_INT 2
26995: ARRAY
26996: LESS
26997: IFFALSE 27035
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26999: LD_ADDR_VAR 0 6
27003: PUSH
27004: LD_VAR 0 6
27008: PPUSH
27009: LD_VAR 0 8
27013: PPUSH
27014: LD_VAR 0 7
27018: PUSH
27019: LD_VAR 0 9
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: PPUSH
27028: CALL_OW 2
27032: ST_TO_ADDR
// break ;
27033: GO 27037
// end ; end ;
27035: GO 26974
27037: POP
27038: POP
// end ; end ;
27039: GO 26838
27041: POP
27042: POP
// if result and not asc then
27043: LD_VAR 0 6
27047: PUSH
27048: LD_VAR 0 4
27052: NOT
27053: AND
27054: IFFALSE 27129
// begin tmp := result ;
27056: LD_ADDR_VAR 0 9
27060: PUSH
27061: LD_VAR 0 6
27065: ST_TO_ADDR
// for i = tmp downto 1 do
27066: LD_ADDR_VAR 0 7
27070: PUSH
27071: DOUBLE
27072: LD_VAR 0 9
27076: INC
27077: ST_TO_ADDR
27078: LD_INT 1
27080: PUSH
27081: FOR_DOWNTO
27082: IFFALSE 27127
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
27084: LD_ADDR_VAR 0 6
27088: PUSH
27089: LD_VAR 0 6
27093: PPUSH
27094: LD_VAR 0 9
27098: PUSH
27099: LD_VAR 0 7
27103: MINUS
27104: PUSH
27105: LD_INT 1
27107: PLUS
27108: PPUSH
27109: LD_VAR 0 9
27113: PUSH
27114: LD_VAR 0 7
27118: ARRAY
27119: PPUSH
27120: CALL_OW 1
27124: ST_TO_ADDR
27125: GO 27081
27127: POP
27128: POP
// end ; tmp := [ ] ;
27129: LD_ADDR_VAR 0 9
27133: PUSH
27134: EMPTY
27135: ST_TO_ADDR
// if mode then
27136: LD_VAR 0 5
27140: IFFALSE 27209
// begin for i = 1 to result do
27142: LD_ADDR_VAR 0 7
27146: PUSH
27147: DOUBLE
27148: LD_INT 1
27150: DEC
27151: ST_TO_ADDR
27152: LD_VAR 0 6
27156: PUSH
27157: FOR_TO
27158: IFFALSE 27197
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
27160: LD_ADDR_VAR 0 9
27164: PUSH
27165: LD_VAR 0 9
27169: PPUSH
27170: LD_VAR 0 7
27174: PPUSH
27175: LD_VAR 0 6
27179: PUSH
27180: LD_VAR 0 7
27184: ARRAY
27185: PUSH
27186: LD_INT 1
27188: ARRAY
27189: PPUSH
27190: CALL_OW 1
27194: ST_TO_ADDR
27195: GO 27157
27197: POP
27198: POP
// result := tmp ;
27199: LD_ADDR_VAR 0 6
27203: PUSH
27204: LD_VAR 0 9
27208: ST_TO_ADDR
// end ; end ;
27209: LD_VAR 0 6
27213: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
27214: LD_INT 0
27216: PPUSH
27217: PPUSH
27218: PPUSH
27219: PPUSH
27220: PPUSH
27221: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
27222: LD_ADDR_VAR 0 5
27226: PUSH
27227: LD_INT 0
27229: PUSH
27230: LD_INT 0
27232: PUSH
27233: LD_INT 0
27235: PUSH
27236: EMPTY
27237: PUSH
27238: EMPTY
27239: LIST
27240: LIST
27241: LIST
27242: LIST
27243: ST_TO_ADDR
// if not x or not y then
27244: LD_VAR 0 2
27248: NOT
27249: PUSH
27250: LD_VAR 0 3
27254: NOT
27255: OR
27256: IFFALSE 27260
// exit ;
27258: GO 28912
// if not range then
27260: LD_VAR 0 4
27264: NOT
27265: IFFALSE 27275
// range := 10 ;
27267: LD_ADDR_VAR 0 4
27271: PUSH
27272: LD_INT 10
27274: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
27275: LD_ADDR_VAR 0 8
27279: PUSH
27280: LD_INT 81
27282: PUSH
27283: LD_VAR 0 1
27287: PUSH
27288: EMPTY
27289: LIST
27290: LIST
27291: PUSH
27292: LD_INT 92
27294: PUSH
27295: LD_VAR 0 2
27299: PUSH
27300: LD_VAR 0 3
27304: PUSH
27305: LD_VAR 0 4
27309: PUSH
27310: EMPTY
27311: LIST
27312: LIST
27313: LIST
27314: LIST
27315: PUSH
27316: LD_INT 3
27318: PUSH
27319: LD_INT 21
27321: PUSH
27322: LD_INT 3
27324: PUSH
27325: EMPTY
27326: LIST
27327: LIST
27328: PUSH
27329: EMPTY
27330: LIST
27331: LIST
27332: PUSH
27333: EMPTY
27334: LIST
27335: LIST
27336: LIST
27337: PPUSH
27338: CALL_OW 69
27342: ST_TO_ADDR
// if not tmp then
27343: LD_VAR 0 8
27347: NOT
27348: IFFALSE 27352
// exit ;
27350: GO 28912
// for i in tmp do
27352: LD_ADDR_VAR 0 6
27356: PUSH
27357: LD_VAR 0 8
27361: PUSH
27362: FOR_IN
27363: IFFALSE 28887
// begin points := [ 0 , 0 , 0 ] ;
27365: LD_ADDR_VAR 0 9
27369: PUSH
27370: LD_INT 0
27372: PUSH
27373: LD_INT 0
27375: PUSH
27376: LD_INT 0
27378: PUSH
27379: EMPTY
27380: LIST
27381: LIST
27382: LIST
27383: ST_TO_ADDR
// bpoints := 1 ;
27384: LD_ADDR_VAR 0 10
27388: PUSH
27389: LD_INT 1
27391: ST_TO_ADDR
// case GetType ( i ) of unit_human :
27392: LD_VAR 0 6
27396: PPUSH
27397: CALL_OW 247
27401: PUSH
27402: LD_INT 1
27404: DOUBLE
27405: EQUAL
27406: IFTRUE 27410
27408: GO 27988
27410: POP
// begin if GetClass ( i ) = 1 then
27411: LD_VAR 0 6
27415: PPUSH
27416: CALL_OW 257
27420: PUSH
27421: LD_INT 1
27423: EQUAL
27424: IFFALSE 27445
// points := [ 10 , 5 , 3 ] ;
27426: LD_ADDR_VAR 0 9
27430: PUSH
27431: LD_INT 10
27433: PUSH
27434: LD_INT 5
27436: PUSH
27437: LD_INT 3
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: LIST
27444: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
27445: LD_VAR 0 6
27449: PPUSH
27450: CALL_OW 257
27454: PUSH
27455: LD_INT 2
27457: PUSH
27458: LD_INT 3
27460: PUSH
27461: LD_INT 4
27463: PUSH
27464: EMPTY
27465: LIST
27466: LIST
27467: LIST
27468: IN
27469: IFFALSE 27490
// points := [ 3 , 2 , 1 ] ;
27471: LD_ADDR_VAR 0 9
27475: PUSH
27476: LD_INT 3
27478: PUSH
27479: LD_INT 2
27481: PUSH
27482: LD_INT 1
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: LIST
27489: ST_TO_ADDR
// if GetClass ( i ) = 5 then
27490: LD_VAR 0 6
27494: PPUSH
27495: CALL_OW 257
27499: PUSH
27500: LD_INT 5
27502: EQUAL
27503: IFFALSE 27524
// points := [ 130 , 5 , 2 ] ;
27505: LD_ADDR_VAR 0 9
27509: PUSH
27510: LD_INT 130
27512: PUSH
27513: LD_INT 5
27515: PUSH
27516: LD_INT 2
27518: PUSH
27519: EMPTY
27520: LIST
27521: LIST
27522: LIST
27523: ST_TO_ADDR
// if GetClass ( i ) = 8 then
27524: LD_VAR 0 6
27528: PPUSH
27529: CALL_OW 257
27533: PUSH
27534: LD_INT 8
27536: EQUAL
27537: IFFALSE 27558
// points := [ 35 , 35 , 30 ] ;
27539: LD_ADDR_VAR 0 9
27543: PUSH
27544: LD_INT 35
27546: PUSH
27547: LD_INT 35
27549: PUSH
27550: LD_INT 30
27552: PUSH
27553: EMPTY
27554: LIST
27555: LIST
27556: LIST
27557: ST_TO_ADDR
// if GetClass ( i ) = 9 then
27558: LD_VAR 0 6
27562: PPUSH
27563: CALL_OW 257
27567: PUSH
27568: LD_INT 9
27570: EQUAL
27571: IFFALSE 27592
// points := [ 20 , 55 , 40 ] ;
27573: LD_ADDR_VAR 0 9
27577: PUSH
27578: LD_INT 20
27580: PUSH
27581: LD_INT 55
27583: PUSH
27584: LD_INT 40
27586: PUSH
27587: EMPTY
27588: LIST
27589: LIST
27590: LIST
27591: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
27592: LD_VAR 0 6
27596: PPUSH
27597: CALL_OW 257
27601: PUSH
27602: LD_INT 12
27604: PUSH
27605: LD_INT 16
27607: PUSH
27608: EMPTY
27609: LIST
27610: LIST
27611: IN
27612: IFFALSE 27633
// points := [ 5 , 3 , 2 ] ;
27614: LD_ADDR_VAR 0 9
27618: PUSH
27619: LD_INT 5
27621: PUSH
27622: LD_INT 3
27624: PUSH
27625: LD_INT 2
27627: PUSH
27628: EMPTY
27629: LIST
27630: LIST
27631: LIST
27632: ST_TO_ADDR
// if GetClass ( i ) = 17 then
27633: LD_VAR 0 6
27637: PPUSH
27638: CALL_OW 257
27642: PUSH
27643: LD_INT 17
27645: EQUAL
27646: IFFALSE 27667
// points := [ 100 , 50 , 75 ] ;
27648: LD_ADDR_VAR 0 9
27652: PUSH
27653: LD_INT 100
27655: PUSH
27656: LD_INT 50
27658: PUSH
27659: LD_INT 75
27661: PUSH
27662: EMPTY
27663: LIST
27664: LIST
27665: LIST
27666: ST_TO_ADDR
// if GetClass ( i ) = 15 then
27667: LD_VAR 0 6
27671: PPUSH
27672: CALL_OW 257
27676: PUSH
27677: LD_INT 15
27679: EQUAL
27680: IFFALSE 27701
// points := [ 10 , 5 , 3 ] ;
27682: LD_ADDR_VAR 0 9
27686: PUSH
27687: LD_INT 10
27689: PUSH
27690: LD_INT 5
27692: PUSH
27693: LD_INT 3
27695: PUSH
27696: EMPTY
27697: LIST
27698: LIST
27699: LIST
27700: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27701: LD_VAR 0 6
27705: PPUSH
27706: CALL_OW 257
27710: PUSH
27711: LD_INT 14
27713: EQUAL
27714: IFFALSE 27735
// points := [ 10 , 0 , 0 ] ;
27716: LD_ADDR_VAR 0 9
27720: PUSH
27721: LD_INT 10
27723: PUSH
27724: LD_INT 0
27726: PUSH
27727: LD_INT 0
27729: PUSH
27730: EMPTY
27731: LIST
27732: LIST
27733: LIST
27734: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27735: LD_VAR 0 6
27739: PPUSH
27740: CALL_OW 257
27744: PUSH
27745: LD_INT 11
27747: EQUAL
27748: IFFALSE 27769
// points := [ 30 , 10 , 5 ] ;
27750: LD_ADDR_VAR 0 9
27754: PUSH
27755: LD_INT 30
27757: PUSH
27758: LD_INT 10
27760: PUSH
27761: LD_INT 5
27763: PUSH
27764: EMPTY
27765: LIST
27766: LIST
27767: LIST
27768: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27769: LD_VAR 0 1
27773: PPUSH
27774: LD_INT 5
27776: PPUSH
27777: CALL_OW 321
27781: PUSH
27782: LD_INT 2
27784: EQUAL
27785: IFFALSE 27802
// bpoints := bpoints * 1.8 ;
27787: LD_ADDR_VAR 0 10
27791: PUSH
27792: LD_VAR 0 10
27796: PUSH
27797: LD_REAL  1.80000000000000E+0000
27800: MUL
27801: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27802: LD_VAR 0 6
27806: PPUSH
27807: CALL_OW 257
27811: PUSH
27812: LD_INT 1
27814: PUSH
27815: LD_INT 2
27817: PUSH
27818: LD_INT 3
27820: PUSH
27821: LD_INT 4
27823: PUSH
27824: EMPTY
27825: LIST
27826: LIST
27827: LIST
27828: LIST
27829: IN
27830: PUSH
27831: LD_VAR 0 1
27835: PPUSH
27836: LD_INT 51
27838: PPUSH
27839: CALL_OW 321
27843: PUSH
27844: LD_INT 2
27846: EQUAL
27847: AND
27848: IFFALSE 27865
// bpoints := bpoints * 1.2 ;
27850: LD_ADDR_VAR 0 10
27854: PUSH
27855: LD_VAR 0 10
27859: PUSH
27860: LD_REAL  1.20000000000000E+0000
27863: MUL
27864: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27865: LD_VAR 0 6
27869: PPUSH
27870: CALL_OW 257
27874: PUSH
27875: LD_INT 5
27877: PUSH
27878: LD_INT 7
27880: PUSH
27881: LD_INT 9
27883: PUSH
27884: EMPTY
27885: LIST
27886: LIST
27887: LIST
27888: IN
27889: PUSH
27890: LD_VAR 0 1
27894: PPUSH
27895: LD_INT 52
27897: PPUSH
27898: CALL_OW 321
27902: PUSH
27903: LD_INT 2
27905: EQUAL
27906: AND
27907: IFFALSE 27924
// bpoints := bpoints * 1.5 ;
27909: LD_ADDR_VAR 0 10
27913: PUSH
27914: LD_VAR 0 10
27918: PUSH
27919: LD_REAL  1.50000000000000E+0000
27922: MUL
27923: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
27924: LD_VAR 0 1
27928: PPUSH
27929: LD_INT 66
27931: PPUSH
27932: CALL_OW 321
27936: PUSH
27937: LD_INT 2
27939: EQUAL
27940: IFFALSE 27957
// bpoints := bpoints * 1.1 ;
27942: LD_ADDR_VAR 0 10
27946: PUSH
27947: LD_VAR 0 10
27951: PUSH
27952: LD_REAL  1.10000000000000E+0000
27955: MUL
27956: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
27957: LD_ADDR_VAR 0 10
27961: PUSH
27962: LD_VAR 0 10
27966: PUSH
27967: LD_VAR 0 6
27971: PPUSH
27972: LD_INT 1
27974: PPUSH
27975: CALL_OW 259
27979: PUSH
27980: LD_REAL  1.15000000000000E+0000
27983: MUL
27984: MUL
27985: ST_TO_ADDR
// end ; unit_vehicle :
27986: GO 28816
27988: LD_INT 2
27990: DOUBLE
27991: EQUAL
27992: IFTRUE 27996
27994: GO 28804
27996: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
27997: LD_VAR 0 6
28001: PPUSH
28002: CALL_OW 264
28006: PUSH
28007: LD_INT 2
28009: PUSH
28010: LD_INT 42
28012: PUSH
28013: LD_INT 24
28015: PUSH
28016: EMPTY
28017: LIST
28018: LIST
28019: LIST
28020: IN
28021: IFFALSE 28042
// points := [ 25 , 5 , 3 ] ;
28023: LD_ADDR_VAR 0 9
28027: PUSH
28028: LD_INT 25
28030: PUSH
28031: LD_INT 5
28033: PUSH
28034: LD_INT 3
28036: PUSH
28037: EMPTY
28038: LIST
28039: LIST
28040: LIST
28041: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
28042: LD_VAR 0 6
28046: PPUSH
28047: CALL_OW 264
28051: PUSH
28052: LD_INT 4
28054: PUSH
28055: LD_INT 43
28057: PUSH
28058: LD_INT 25
28060: PUSH
28061: EMPTY
28062: LIST
28063: LIST
28064: LIST
28065: IN
28066: IFFALSE 28087
// points := [ 40 , 15 , 5 ] ;
28068: LD_ADDR_VAR 0 9
28072: PUSH
28073: LD_INT 40
28075: PUSH
28076: LD_INT 15
28078: PUSH
28079: LD_INT 5
28081: PUSH
28082: EMPTY
28083: LIST
28084: LIST
28085: LIST
28086: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
28087: LD_VAR 0 6
28091: PPUSH
28092: CALL_OW 264
28096: PUSH
28097: LD_INT 3
28099: PUSH
28100: LD_INT 23
28102: PUSH
28103: EMPTY
28104: LIST
28105: LIST
28106: IN
28107: IFFALSE 28128
// points := [ 7 , 25 , 8 ] ;
28109: LD_ADDR_VAR 0 9
28113: PUSH
28114: LD_INT 7
28116: PUSH
28117: LD_INT 25
28119: PUSH
28120: LD_INT 8
28122: PUSH
28123: EMPTY
28124: LIST
28125: LIST
28126: LIST
28127: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
28128: LD_VAR 0 6
28132: PPUSH
28133: CALL_OW 264
28137: PUSH
28138: LD_INT 5
28140: PUSH
28141: LD_INT 27
28143: PUSH
28144: LD_INT 44
28146: PUSH
28147: EMPTY
28148: LIST
28149: LIST
28150: LIST
28151: IN
28152: IFFALSE 28173
// points := [ 14 , 50 , 16 ] ;
28154: LD_ADDR_VAR 0 9
28158: PUSH
28159: LD_INT 14
28161: PUSH
28162: LD_INT 50
28164: PUSH
28165: LD_INT 16
28167: PUSH
28168: EMPTY
28169: LIST
28170: LIST
28171: LIST
28172: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
28173: LD_VAR 0 6
28177: PPUSH
28178: CALL_OW 264
28182: PUSH
28183: LD_INT 6
28185: PUSH
28186: LD_INT 46
28188: PUSH
28189: EMPTY
28190: LIST
28191: LIST
28192: IN
28193: IFFALSE 28214
// points := [ 32 , 120 , 70 ] ;
28195: LD_ADDR_VAR 0 9
28199: PUSH
28200: LD_INT 32
28202: PUSH
28203: LD_INT 120
28205: PUSH
28206: LD_INT 70
28208: PUSH
28209: EMPTY
28210: LIST
28211: LIST
28212: LIST
28213: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
28214: LD_VAR 0 6
28218: PPUSH
28219: CALL_OW 264
28223: PUSH
28224: LD_INT 7
28226: PUSH
28227: LD_INT 28
28229: PUSH
28230: LD_INT 45
28232: PUSH
28233: LD_EXP 87
28237: PUSH
28238: EMPTY
28239: LIST
28240: LIST
28241: LIST
28242: LIST
28243: IN
28244: IFFALSE 28265
// points := [ 35 , 20 , 45 ] ;
28246: LD_ADDR_VAR 0 9
28250: PUSH
28251: LD_INT 35
28253: PUSH
28254: LD_INT 20
28256: PUSH
28257: LD_INT 45
28259: PUSH
28260: EMPTY
28261: LIST
28262: LIST
28263: LIST
28264: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
28265: LD_VAR 0 6
28269: PPUSH
28270: CALL_OW 264
28274: PUSH
28275: LD_INT 47
28277: PUSH
28278: EMPTY
28279: LIST
28280: IN
28281: IFFALSE 28302
// points := [ 67 , 45 , 75 ] ;
28283: LD_ADDR_VAR 0 9
28287: PUSH
28288: LD_INT 67
28290: PUSH
28291: LD_INT 45
28293: PUSH
28294: LD_INT 75
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: LIST
28301: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
28302: LD_VAR 0 6
28306: PPUSH
28307: CALL_OW 264
28311: PUSH
28312: LD_INT 26
28314: PUSH
28315: EMPTY
28316: LIST
28317: IN
28318: IFFALSE 28339
// points := [ 120 , 30 , 80 ] ;
28320: LD_ADDR_VAR 0 9
28324: PUSH
28325: LD_INT 120
28327: PUSH
28328: LD_INT 30
28330: PUSH
28331: LD_INT 80
28333: PUSH
28334: EMPTY
28335: LIST
28336: LIST
28337: LIST
28338: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
28339: LD_VAR 0 6
28343: PPUSH
28344: CALL_OW 264
28348: PUSH
28349: LD_INT 22
28351: PUSH
28352: EMPTY
28353: LIST
28354: IN
28355: IFFALSE 28376
// points := [ 40 , 1 , 1 ] ;
28357: LD_ADDR_VAR 0 9
28361: PUSH
28362: LD_INT 40
28364: PUSH
28365: LD_INT 1
28367: PUSH
28368: LD_INT 1
28370: PUSH
28371: EMPTY
28372: LIST
28373: LIST
28374: LIST
28375: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
28376: LD_VAR 0 6
28380: PPUSH
28381: CALL_OW 264
28385: PUSH
28386: LD_INT 29
28388: PUSH
28389: EMPTY
28390: LIST
28391: IN
28392: IFFALSE 28413
// points := [ 70 , 200 , 400 ] ;
28394: LD_ADDR_VAR 0 9
28398: PUSH
28399: LD_INT 70
28401: PUSH
28402: LD_INT 200
28404: PUSH
28405: LD_INT 400
28407: PUSH
28408: EMPTY
28409: LIST
28410: LIST
28411: LIST
28412: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
28413: LD_VAR 0 6
28417: PPUSH
28418: CALL_OW 264
28422: PUSH
28423: LD_INT 14
28425: PUSH
28426: LD_INT 53
28428: PUSH
28429: EMPTY
28430: LIST
28431: LIST
28432: IN
28433: IFFALSE 28454
// points := [ 40 , 10 , 20 ] ;
28435: LD_ADDR_VAR 0 9
28439: PUSH
28440: LD_INT 40
28442: PUSH
28443: LD_INT 10
28445: PUSH
28446: LD_INT 20
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: LIST
28453: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
28454: LD_VAR 0 6
28458: PPUSH
28459: CALL_OW 264
28463: PUSH
28464: LD_INT 9
28466: PUSH
28467: EMPTY
28468: LIST
28469: IN
28470: IFFALSE 28491
// points := [ 5 , 70 , 20 ] ;
28472: LD_ADDR_VAR 0 9
28476: PUSH
28477: LD_INT 5
28479: PUSH
28480: LD_INT 70
28482: PUSH
28483: LD_INT 20
28485: PUSH
28486: EMPTY
28487: LIST
28488: LIST
28489: LIST
28490: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
28491: LD_VAR 0 6
28495: PPUSH
28496: CALL_OW 264
28500: PUSH
28501: LD_INT 10
28503: PUSH
28504: EMPTY
28505: LIST
28506: IN
28507: IFFALSE 28528
// points := [ 35 , 110 , 70 ] ;
28509: LD_ADDR_VAR 0 9
28513: PUSH
28514: LD_INT 35
28516: PUSH
28517: LD_INT 110
28519: PUSH
28520: LD_INT 70
28522: PUSH
28523: EMPTY
28524: LIST
28525: LIST
28526: LIST
28527: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
28528: LD_VAR 0 6
28532: PPUSH
28533: CALL_OW 265
28537: PUSH
28538: LD_INT 25
28540: EQUAL
28541: IFFALSE 28562
// points := [ 80 , 65 , 100 ] ;
28543: LD_ADDR_VAR 0 9
28547: PUSH
28548: LD_INT 80
28550: PUSH
28551: LD_INT 65
28553: PUSH
28554: LD_INT 100
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: LIST
28561: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
28562: LD_VAR 0 6
28566: PPUSH
28567: CALL_OW 263
28571: PUSH
28572: LD_INT 1
28574: EQUAL
28575: IFFALSE 28610
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
28577: LD_ADDR_VAR 0 10
28581: PUSH
28582: LD_VAR 0 10
28586: PUSH
28587: LD_VAR 0 6
28591: PPUSH
28592: CALL_OW 311
28596: PPUSH
28597: LD_INT 3
28599: PPUSH
28600: CALL_OW 259
28604: PUSH
28605: LD_INT 4
28607: MUL
28608: MUL
28609: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
28610: LD_VAR 0 6
28614: PPUSH
28615: CALL_OW 263
28619: PUSH
28620: LD_INT 2
28622: EQUAL
28623: IFFALSE 28674
// begin j := IsControledBy ( i ) ;
28625: LD_ADDR_VAR 0 7
28629: PUSH
28630: LD_VAR 0 6
28634: PPUSH
28635: CALL_OW 312
28639: ST_TO_ADDR
// if j then
28640: LD_VAR 0 7
28644: IFFALSE 28674
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
28646: LD_ADDR_VAR 0 10
28650: PUSH
28651: LD_VAR 0 10
28655: PUSH
28656: LD_VAR 0 7
28660: PPUSH
28661: LD_INT 3
28663: PPUSH
28664: CALL_OW 259
28668: PUSH
28669: LD_INT 3
28671: MUL
28672: MUL
28673: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
28674: LD_VAR 0 6
28678: PPUSH
28679: CALL_OW 264
28683: PUSH
28684: LD_INT 5
28686: PUSH
28687: LD_INT 6
28689: PUSH
28690: LD_INT 46
28692: PUSH
28693: LD_INT 44
28695: PUSH
28696: LD_INT 47
28698: PUSH
28699: LD_INT 45
28701: PUSH
28702: LD_INT 28
28704: PUSH
28705: LD_INT 7
28707: PUSH
28708: LD_INT 27
28710: PUSH
28711: LD_INT 29
28713: PUSH
28714: EMPTY
28715: LIST
28716: LIST
28717: LIST
28718: LIST
28719: LIST
28720: LIST
28721: LIST
28722: LIST
28723: LIST
28724: LIST
28725: IN
28726: PUSH
28727: LD_VAR 0 1
28731: PPUSH
28732: LD_INT 52
28734: PPUSH
28735: CALL_OW 321
28739: PUSH
28740: LD_INT 2
28742: EQUAL
28743: AND
28744: IFFALSE 28761
// bpoints := bpoints * 1.2 ;
28746: LD_ADDR_VAR 0 10
28750: PUSH
28751: LD_VAR 0 10
28755: PUSH
28756: LD_REAL  1.20000000000000E+0000
28759: MUL
28760: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28761: LD_VAR 0 6
28765: PPUSH
28766: CALL_OW 264
28770: PUSH
28771: LD_INT 6
28773: PUSH
28774: LD_INT 46
28776: PUSH
28777: LD_INT 47
28779: PUSH
28780: EMPTY
28781: LIST
28782: LIST
28783: LIST
28784: IN
28785: IFFALSE 28802
// bpoints := bpoints * 1.2 ;
28787: LD_ADDR_VAR 0 10
28791: PUSH
28792: LD_VAR 0 10
28796: PUSH
28797: LD_REAL  1.20000000000000E+0000
28800: MUL
28801: ST_TO_ADDR
// end ; unit_building :
28802: GO 28816
28804: LD_INT 3
28806: DOUBLE
28807: EQUAL
28808: IFTRUE 28812
28810: GO 28815
28812: POP
// ; end ;
28813: GO 28816
28815: POP
// for j = 1 to 3 do
28816: LD_ADDR_VAR 0 7
28820: PUSH
28821: DOUBLE
28822: LD_INT 1
28824: DEC
28825: ST_TO_ADDR
28826: LD_INT 3
28828: PUSH
28829: FOR_TO
28830: IFFALSE 28883
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28832: LD_ADDR_VAR 0 5
28836: PUSH
28837: LD_VAR 0 5
28841: PPUSH
28842: LD_VAR 0 7
28846: PPUSH
28847: LD_VAR 0 5
28851: PUSH
28852: LD_VAR 0 7
28856: ARRAY
28857: PUSH
28858: LD_VAR 0 9
28862: PUSH
28863: LD_VAR 0 7
28867: ARRAY
28868: PUSH
28869: LD_VAR 0 10
28873: MUL
28874: PLUS
28875: PPUSH
28876: CALL_OW 1
28880: ST_TO_ADDR
28881: GO 28829
28883: POP
28884: POP
// end ;
28885: GO 27362
28887: POP
28888: POP
// result := Replace ( result , 4 , tmp ) ;
28889: LD_ADDR_VAR 0 5
28893: PUSH
28894: LD_VAR 0 5
28898: PPUSH
28899: LD_INT 4
28901: PPUSH
28902: LD_VAR 0 8
28906: PPUSH
28907: CALL_OW 1
28911: ST_TO_ADDR
// end ;
28912: LD_VAR 0 5
28916: RET
// export function DangerAtRange ( unit , range ) ; begin
28917: LD_INT 0
28919: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
28920: LD_ADDR_VAR 0 3
28924: PUSH
28925: LD_VAR 0 1
28929: PPUSH
28930: CALL_OW 255
28934: PPUSH
28935: LD_VAR 0 1
28939: PPUSH
28940: CALL_OW 250
28944: PPUSH
28945: LD_VAR 0 1
28949: PPUSH
28950: CALL_OW 251
28954: PPUSH
28955: LD_VAR 0 2
28959: PPUSH
28960: CALL 27214 0 4
28964: ST_TO_ADDR
// end ;
28965: LD_VAR 0 3
28969: RET
// export function DangerInArea ( side , area ) ; begin
28970: LD_INT 0
28972: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
28973: LD_ADDR_VAR 0 3
28977: PUSH
28978: LD_VAR 0 2
28982: PPUSH
28983: LD_INT 81
28985: PUSH
28986: LD_VAR 0 1
28990: PUSH
28991: EMPTY
28992: LIST
28993: LIST
28994: PPUSH
28995: CALL_OW 70
28999: ST_TO_ADDR
// end ;
29000: LD_VAR 0 3
29004: RET
// export function IsExtension ( b ) ; begin
29005: LD_INT 0
29007: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
29008: LD_ADDR_VAR 0 2
29012: PUSH
29013: LD_VAR 0 1
29017: PUSH
29018: LD_INT 23
29020: PUSH
29021: LD_INT 20
29023: PUSH
29024: LD_INT 22
29026: PUSH
29027: LD_INT 17
29029: PUSH
29030: LD_INT 24
29032: PUSH
29033: LD_INT 21
29035: PUSH
29036: LD_INT 19
29038: PUSH
29039: LD_INT 16
29041: PUSH
29042: LD_INT 25
29044: PUSH
29045: LD_INT 18
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: LIST
29052: LIST
29053: LIST
29054: LIST
29055: LIST
29056: LIST
29057: LIST
29058: LIST
29059: IN
29060: ST_TO_ADDR
// end ;
29061: LD_VAR 0 2
29065: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
29066: LD_INT 0
29068: PPUSH
29069: PPUSH
29070: PPUSH
// result := [ ] ;
29071: LD_ADDR_VAR 0 4
29075: PUSH
29076: EMPTY
29077: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
29078: LD_ADDR_VAR 0 5
29082: PUSH
29083: LD_VAR 0 2
29087: PPUSH
29088: LD_INT 21
29090: PUSH
29091: LD_INT 3
29093: PUSH
29094: EMPTY
29095: LIST
29096: LIST
29097: PPUSH
29098: CALL_OW 70
29102: ST_TO_ADDR
// if not tmp then
29103: LD_VAR 0 5
29107: NOT
29108: IFFALSE 29112
// exit ;
29110: GO 29176
// if checkLink then
29112: LD_VAR 0 3
29116: IFFALSE 29166
// begin for i in tmp do
29118: LD_ADDR_VAR 0 6
29122: PUSH
29123: LD_VAR 0 5
29127: PUSH
29128: FOR_IN
29129: IFFALSE 29164
// if GetBase ( i ) <> base then
29131: LD_VAR 0 6
29135: PPUSH
29136: CALL_OW 274
29140: PUSH
29141: LD_VAR 0 1
29145: NONEQUAL
29146: IFFALSE 29162
// ComLinkToBase ( base , i ) ;
29148: LD_VAR 0 1
29152: PPUSH
29153: LD_VAR 0 6
29157: PPUSH
29158: CALL_OW 169
29162: GO 29128
29164: POP
29165: POP
// end ; result := tmp ;
29166: LD_ADDR_VAR 0 4
29170: PUSH
29171: LD_VAR 0 5
29175: ST_TO_ADDR
// end ;
29176: LD_VAR 0 4
29180: RET
// export function ComComplete ( units , b ) ; var i ; begin
29181: LD_INT 0
29183: PPUSH
29184: PPUSH
// if not units then
29185: LD_VAR 0 1
29189: NOT
29190: IFFALSE 29194
// exit ;
29192: GO 29284
// for i in units do
29194: LD_ADDR_VAR 0 4
29198: PUSH
29199: LD_VAR 0 1
29203: PUSH
29204: FOR_IN
29205: IFFALSE 29282
// if BuildingStatus ( b ) = bs_build then
29207: LD_VAR 0 2
29211: PPUSH
29212: CALL_OW 461
29216: PUSH
29217: LD_INT 1
29219: EQUAL
29220: IFFALSE 29280
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
29222: LD_VAR 0 4
29226: PPUSH
29227: LD_STRING h
29229: PUSH
29230: LD_VAR 0 2
29234: PPUSH
29235: CALL_OW 250
29239: PUSH
29240: LD_VAR 0 2
29244: PPUSH
29245: CALL_OW 251
29249: PUSH
29250: LD_VAR 0 2
29254: PUSH
29255: LD_INT 0
29257: PUSH
29258: LD_INT 0
29260: PUSH
29261: LD_INT 0
29263: PUSH
29264: EMPTY
29265: LIST
29266: LIST
29267: LIST
29268: LIST
29269: LIST
29270: LIST
29271: LIST
29272: PUSH
29273: EMPTY
29274: LIST
29275: PPUSH
29276: CALL_OW 446
29280: GO 29204
29282: POP
29283: POP
// end ;
29284: LD_VAR 0 3
29288: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
29289: LD_INT 0
29291: PPUSH
29292: PPUSH
29293: PPUSH
29294: PPUSH
29295: PPUSH
29296: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
29297: LD_VAR 0 1
29301: NOT
29302: PUSH
29303: LD_VAR 0 1
29307: PPUSH
29308: CALL_OW 263
29312: PUSH
29313: LD_INT 2
29315: NONEQUAL
29316: OR
29317: IFFALSE 29321
// exit ;
29319: GO 29637
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
29321: LD_ADDR_VAR 0 6
29325: PUSH
29326: LD_INT 22
29328: PUSH
29329: LD_VAR 0 1
29333: PPUSH
29334: CALL_OW 255
29338: PUSH
29339: EMPTY
29340: LIST
29341: LIST
29342: PUSH
29343: LD_INT 2
29345: PUSH
29346: LD_INT 30
29348: PUSH
29349: LD_INT 36
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: PUSH
29356: LD_INT 34
29358: PUSH
29359: LD_INT 31
29361: PUSH
29362: EMPTY
29363: LIST
29364: LIST
29365: PUSH
29366: EMPTY
29367: LIST
29368: LIST
29369: LIST
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: PPUSH
29375: CALL_OW 69
29379: ST_TO_ADDR
// if not tmp then
29380: LD_VAR 0 6
29384: NOT
29385: IFFALSE 29389
// exit ;
29387: GO 29637
// result := [ ] ;
29389: LD_ADDR_VAR 0 2
29393: PUSH
29394: EMPTY
29395: ST_TO_ADDR
// for i in tmp do
29396: LD_ADDR_VAR 0 3
29400: PUSH
29401: LD_VAR 0 6
29405: PUSH
29406: FOR_IN
29407: IFFALSE 29478
// begin t := UnitsInside ( i ) ;
29409: LD_ADDR_VAR 0 4
29413: PUSH
29414: LD_VAR 0 3
29418: PPUSH
29419: CALL_OW 313
29423: ST_TO_ADDR
// if t then
29424: LD_VAR 0 4
29428: IFFALSE 29476
// for j in t do
29430: LD_ADDR_VAR 0 7
29434: PUSH
29435: LD_VAR 0 4
29439: PUSH
29440: FOR_IN
29441: IFFALSE 29474
// result := Replace ( result , result + 1 , j ) ;
29443: LD_ADDR_VAR 0 2
29447: PUSH
29448: LD_VAR 0 2
29452: PPUSH
29453: LD_VAR 0 2
29457: PUSH
29458: LD_INT 1
29460: PLUS
29461: PPUSH
29462: LD_VAR 0 7
29466: PPUSH
29467: CALL_OW 1
29471: ST_TO_ADDR
29472: GO 29440
29474: POP
29475: POP
// end ;
29476: GO 29406
29478: POP
29479: POP
// if not result then
29480: LD_VAR 0 2
29484: NOT
29485: IFFALSE 29489
// exit ;
29487: GO 29637
// mech := result [ 1 ] ;
29489: LD_ADDR_VAR 0 5
29493: PUSH
29494: LD_VAR 0 2
29498: PUSH
29499: LD_INT 1
29501: ARRAY
29502: ST_TO_ADDR
// if result > 1 then
29503: LD_VAR 0 2
29507: PUSH
29508: LD_INT 1
29510: GREATER
29511: IFFALSE 29623
// begin for i = 2 to result do
29513: LD_ADDR_VAR 0 3
29517: PUSH
29518: DOUBLE
29519: LD_INT 2
29521: DEC
29522: ST_TO_ADDR
29523: LD_VAR 0 2
29527: PUSH
29528: FOR_TO
29529: IFFALSE 29621
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
29531: LD_ADDR_VAR 0 4
29535: PUSH
29536: LD_VAR 0 2
29540: PUSH
29541: LD_VAR 0 3
29545: ARRAY
29546: PPUSH
29547: LD_INT 3
29549: PPUSH
29550: CALL_OW 259
29554: PUSH
29555: LD_VAR 0 2
29559: PUSH
29560: LD_VAR 0 3
29564: ARRAY
29565: PPUSH
29566: CALL_OW 432
29570: MINUS
29571: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
29572: LD_VAR 0 4
29576: PUSH
29577: LD_VAR 0 5
29581: PPUSH
29582: LD_INT 3
29584: PPUSH
29585: CALL_OW 259
29589: PUSH
29590: LD_VAR 0 5
29594: PPUSH
29595: CALL_OW 432
29599: MINUS
29600: GREATEREQUAL
29601: IFFALSE 29619
// mech := result [ i ] ;
29603: LD_ADDR_VAR 0 5
29607: PUSH
29608: LD_VAR 0 2
29612: PUSH
29613: LD_VAR 0 3
29617: ARRAY
29618: ST_TO_ADDR
// end ;
29619: GO 29528
29621: POP
29622: POP
// end ; ComLinkTo ( vehicle , mech ) ;
29623: LD_VAR 0 1
29627: PPUSH
29628: LD_VAR 0 5
29632: PPUSH
29633: CALL_OW 135
// end ;
29637: LD_VAR 0 2
29641: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
29642: LD_INT 0
29644: PPUSH
29645: PPUSH
29646: PPUSH
29647: PPUSH
29648: PPUSH
29649: PPUSH
29650: PPUSH
29651: PPUSH
29652: PPUSH
29653: PPUSH
29654: PPUSH
29655: PPUSH
29656: PPUSH
// result := [ ] ;
29657: LD_ADDR_VAR 0 7
29661: PUSH
29662: EMPTY
29663: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
29664: LD_VAR 0 1
29668: PPUSH
29669: CALL_OW 266
29673: PUSH
29674: LD_INT 0
29676: PUSH
29677: LD_INT 1
29679: PUSH
29680: EMPTY
29681: LIST
29682: LIST
29683: IN
29684: NOT
29685: IFFALSE 29689
// exit ;
29687: GO 31323
// if name then
29689: LD_VAR 0 3
29693: IFFALSE 29709
// SetBName ( base_dep , name ) ;
29695: LD_VAR 0 1
29699: PPUSH
29700: LD_VAR 0 3
29704: PPUSH
29705: CALL_OW 500
// base := GetBase ( base_dep ) ;
29709: LD_ADDR_VAR 0 15
29713: PUSH
29714: LD_VAR 0 1
29718: PPUSH
29719: CALL_OW 274
29723: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29724: LD_ADDR_VAR 0 16
29728: PUSH
29729: LD_VAR 0 1
29733: PPUSH
29734: CALL_OW 255
29738: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29739: LD_ADDR_VAR 0 17
29743: PUSH
29744: LD_VAR 0 1
29748: PPUSH
29749: CALL_OW 248
29753: ST_TO_ADDR
// if sources then
29754: LD_VAR 0 5
29758: IFFALSE 29805
// for i = 1 to 3 do
29760: LD_ADDR_VAR 0 8
29764: PUSH
29765: DOUBLE
29766: LD_INT 1
29768: DEC
29769: ST_TO_ADDR
29770: LD_INT 3
29772: PUSH
29773: FOR_TO
29774: IFFALSE 29803
// AddResourceType ( base , i , sources [ i ] ) ;
29776: LD_VAR 0 15
29780: PPUSH
29781: LD_VAR 0 8
29785: PPUSH
29786: LD_VAR 0 5
29790: PUSH
29791: LD_VAR 0 8
29795: ARRAY
29796: PPUSH
29797: CALL_OW 276
29801: GO 29773
29803: POP
29804: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
29805: LD_ADDR_VAR 0 18
29809: PUSH
29810: LD_VAR 0 15
29814: PPUSH
29815: LD_VAR 0 2
29819: PPUSH
29820: LD_INT 1
29822: PPUSH
29823: CALL 29066 0 3
29827: ST_TO_ADDR
// InitHc ;
29828: CALL_OW 19
// InitUc ;
29832: CALL_OW 18
// uc_side := side ;
29836: LD_ADDR_OWVAR 20
29840: PUSH
29841: LD_VAR 0 16
29845: ST_TO_ADDR
// uc_nation := nation ;
29846: LD_ADDR_OWVAR 21
29850: PUSH
29851: LD_VAR 0 17
29855: ST_TO_ADDR
// if buildings then
29856: LD_VAR 0 18
29860: IFFALSE 31182
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29862: LD_ADDR_VAR 0 19
29866: PUSH
29867: LD_VAR 0 18
29871: PPUSH
29872: LD_INT 2
29874: PUSH
29875: LD_INT 30
29877: PUSH
29878: LD_INT 29
29880: PUSH
29881: EMPTY
29882: LIST
29883: LIST
29884: PUSH
29885: LD_INT 30
29887: PUSH
29888: LD_INT 30
29890: PUSH
29891: EMPTY
29892: LIST
29893: LIST
29894: PUSH
29895: EMPTY
29896: LIST
29897: LIST
29898: LIST
29899: PPUSH
29900: CALL_OW 72
29904: ST_TO_ADDR
// if tmp then
29905: LD_VAR 0 19
29909: IFFALSE 29957
// for i in tmp do
29911: LD_ADDR_VAR 0 8
29915: PUSH
29916: LD_VAR 0 19
29920: PUSH
29921: FOR_IN
29922: IFFALSE 29955
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
29924: LD_VAR 0 8
29928: PPUSH
29929: CALL_OW 250
29933: PPUSH
29934: LD_VAR 0 8
29938: PPUSH
29939: CALL_OW 251
29943: PPUSH
29944: LD_VAR 0 16
29948: PPUSH
29949: CALL_OW 441
29953: GO 29921
29955: POP
29956: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
29957: LD_VAR 0 18
29961: PPUSH
29962: LD_INT 2
29964: PUSH
29965: LD_INT 30
29967: PUSH
29968: LD_INT 32
29970: PUSH
29971: EMPTY
29972: LIST
29973: LIST
29974: PUSH
29975: LD_INT 30
29977: PUSH
29978: LD_INT 33
29980: PUSH
29981: EMPTY
29982: LIST
29983: LIST
29984: PUSH
29985: EMPTY
29986: LIST
29987: LIST
29988: LIST
29989: PPUSH
29990: CALL_OW 72
29994: IFFALSE 30082
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
29996: LD_ADDR_VAR 0 8
30000: PUSH
30001: LD_VAR 0 18
30005: PPUSH
30006: LD_INT 2
30008: PUSH
30009: LD_INT 30
30011: PUSH
30012: LD_INT 32
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: PUSH
30019: LD_INT 30
30021: PUSH
30022: LD_INT 33
30024: PUSH
30025: EMPTY
30026: LIST
30027: LIST
30028: PUSH
30029: EMPTY
30030: LIST
30031: LIST
30032: LIST
30033: PPUSH
30034: CALL_OW 72
30038: PUSH
30039: FOR_IN
30040: IFFALSE 30080
// begin if not GetBWeapon ( i ) then
30042: LD_VAR 0 8
30046: PPUSH
30047: CALL_OW 269
30051: NOT
30052: IFFALSE 30078
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
30054: LD_VAR 0 8
30058: PPUSH
30059: LD_VAR 0 8
30063: PPUSH
30064: LD_VAR 0 2
30068: PPUSH
30069: CALL 31328 0 2
30073: PPUSH
30074: CALL_OW 431
// end ;
30078: GO 30039
30080: POP
30081: POP
// end ; for i = 1 to personel do
30082: LD_ADDR_VAR 0 8
30086: PUSH
30087: DOUBLE
30088: LD_INT 1
30090: DEC
30091: ST_TO_ADDR
30092: LD_VAR 0 6
30096: PUSH
30097: FOR_TO
30098: IFFALSE 31162
// begin if i > 4 then
30100: LD_VAR 0 8
30104: PUSH
30105: LD_INT 4
30107: GREATER
30108: IFFALSE 30112
// break ;
30110: GO 31162
// case i of 1 :
30112: LD_VAR 0 8
30116: PUSH
30117: LD_INT 1
30119: DOUBLE
30120: EQUAL
30121: IFTRUE 30125
30123: GO 30205
30125: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
30126: LD_ADDR_VAR 0 12
30130: PUSH
30131: LD_VAR 0 18
30135: PPUSH
30136: LD_INT 22
30138: PUSH
30139: LD_VAR 0 16
30143: PUSH
30144: EMPTY
30145: LIST
30146: LIST
30147: PUSH
30148: LD_INT 58
30150: PUSH
30151: EMPTY
30152: LIST
30153: PUSH
30154: LD_INT 2
30156: PUSH
30157: LD_INT 30
30159: PUSH
30160: LD_INT 32
30162: PUSH
30163: EMPTY
30164: LIST
30165: LIST
30166: PUSH
30167: LD_INT 30
30169: PUSH
30170: LD_INT 4
30172: PUSH
30173: EMPTY
30174: LIST
30175: LIST
30176: PUSH
30177: LD_INT 30
30179: PUSH
30180: LD_INT 5
30182: PUSH
30183: EMPTY
30184: LIST
30185: LIST
30186: PUSH
30187: EMPTY
30188: LIST
30189: LIST
30190: LIST
30191: LIST
30192: PUSH
30193: EMPTY
30194: LIST
30195: LIST
30196: LIST
30197: PPUSH
30198: CALL_OW 72
30202: ST_TO_ADDR
30203: GO 30427
30205: LD_INT 2
30207: DOUBLE
30208: EQUAL
30209: IFTRUE 30213
30211: GO 30275
30213: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
30214: LD_ADDR_VAR 0 12
30218: PUSH
30219: LD_VAR 0 18
30223: PPUSH
30224: LD_INT 22
30226: PUSH
30227: LD_VAR 0 16
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: PUSH
30236: LD_INT 2
30238: PUSH
30239: LD_INT 30
30241: PUSH
30242: LD_INT 0
30244: PUSH
30245: EMPTY
30246: LIST
30247: LIST
30248: PUSH
30249: LD_INT 30
30251: PUSH
30252: LD_INT 1
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: PUSH
30259: EMPTY
30260: LIST
30261: LIST
30262: LIST
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: PPUSH
30268: CALL_OW 72
30272: ST_TO_ADDR
30273: GO 30427
30275: LD_INT 3
30277: DOUBLE
30278: EQUAL
30279: IFTRUE 30283
30281: GO 30345
30283: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
30284: LD_ADDR_VAR 0 12
30288: PUSH
30289: LD_VAR 0 18
30293: PPUSH
30294: LD_INT 22
30296: PUSH
30297: LD_VAR 0 16
30301: PUSH
30302: EMPTY
30303: LIST
30304: LIST
30305: PUSH
30306: LD_INT 2
30308: PUSH
30309: LD_INT 30
30311: PUSH
30312: LD_INT 2
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PUSH
30319: LD_INT 30
30321: PUSH
30322: LD_INT 3
30324: PUSH
30325: EMPTY
30326: LIST
30327: LIST
30328: PUSH
30329: EMPTY
30330: LIST
30331: LIST
30332: LIST
30333: PUSH
30334: EMPTY
30335: LIST
30336: LIST
30337: PPUSH
30338: CALL_OW 72
30342: ST_TO_ADDR
30343: GO 30427
30345: LD_INT 4
30347: DOUBLE
30348: EQUAL
30349: IFTRUE 30353
30351: GO 30426
30353: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
30354: LD_ADDR_VAR 0 12
30358: PUSH
30359: LD_VAR 0 18
30363: PPUSH
30364: LD_INT 22
30366: PUSH
30367: LD_VAR 0 16
30371: PUSH
30372: EMPTY
30373: LIST
30374: LIST
30375: PUSH
30376: LD_INT 2
30378: PUSH
30379: LD_INT 30
30381: PUSH
30382: LD_INT 6
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: PUSH
30389: LD_INT 30
30391: PUSH
30392: LD_INT 7
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: LD_INT 30
30401: PUSH
30402: LD_INT 8
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: EMPTY
30410: LIST
30411: LIST
30412: LIST
30413: LIST
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PPUSH
30419: CALL_OW 72
30423: ST_TO_ADDR
30424: GO 30427
30426: POP
// if i = 1 then
30427: LD_VAR 0 8
30431: PUSH
30432: LD_INT 1
30434: EQUAL
30435: IFFALSE 30546
// begin tmp := [ ] ;
30437: LD_ADDR_VAR 0 19
30441: PUSH
30442: EMPTY
30443: ST_TO_ADDR
// for j in f do
30444: LD_ADDR_VAR 0 9
30448: PUSH
30449: LD_VAR 0 12
30453: PUSH
30454: FOR_IN
30455: IFFALSE 30528
// if GetBType ( j ) = b_bunker then
30457: LD_VAR 0 9
30461: PPUSH
30462: CALL_OW 266
30466: PUSH
30467: LD_INT 32
30469: EQUAL
30470: IFFALSE 30497
// tmp := Insert ( tmp , 1 , j ) else
30472: LD_ADDR_VAR 0 19
30476: PUSH
30477: LD_VAR 0 19
30481: PPUSH
30482: LD_INT 1
30484: PPUSH
30485: LD_VAR 0 9
30489: PPUSH
30490: CALL_OW 2
30494: ST_TO_ADDR
30495: GO 30526
// tmp := Insert ( tmp , tmp + 1 , j ) ;
30497: LD_ADDR_VAR 0 19
30501: PUSH
30502: LD_VAR 0 19
30506: PPUSH
30507: LD_VAR 0 19
30511: PUSH
30512: LD_INT 1
30514: PLUS
30515: PPUSH
30516: LD_VAR 0 9
30520: PPUSH
30521: CALL_OW 2
30525: ST_TO_ADDR
30526: GO 30454
30528: POP
30529: POP
// if tmp then
30530: LD_VAR 0 19
30534: IFFALSE 30546
// f := tmp ;
30536: LD_ADDR_VAR 0 12
30540: PUSH
30541: LD_VAR 0 19
30545: ST_TO_ADDR
// end ; x := personel [ i ] ;
30546: LD_ADDR_VAR 0 13
30550: PUSH
30551: LD_VAR 0 6
30555: PUSH
30556: LD_VAR 0 8
30560: ARRAY
30561: ST_TO_ADDR
// if x = - 1 then
30562: LD_VAR 0 13
30566: PUSH
30567: LD_INT 1
30569: NEG
30570: EQUAL
30571: IFFALSE 30780
// begin for j in f do
30573: LD_ADDR_VAR 0 9
30577: PUSH
30578: LD_VAR 0 12
30582: PUSH
30583: FOR_IN
30584: IFFALSE 30776
// repeat InitHc ;
30586: CALL_OW 19
// if GetBType ( j ) = b_barracks then
30590: LD_VAR 0 9
30594: PPUSH
30595: CALL_OW 266
30599: PUSH
30600: LD_INT 5
30602: EQUAL
30603: IFFALSE 30673
// begin if UnitsInside ( j ) < 3 then
30605: LD_VAR 0 9
30609: PPUSH
30610: CALL_OW 313
30614: PUSH
30615: LD_INT 3
30617: LESS
30618: IFFALSE 30654
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30620: LD_INT 0
30622: PPUSH
30623: LD_INT 5
30625: PUSH
30626: LD_INT 8
30628: PUSH
30629: LD_INT 9
30631: PUSH
30632: EMPTY
30633: LIST
30634: LIST
30635: LIST
30636: PUSH
30637: LD_VAR 0 17
30641: ARRAY
30642: PPUSH
30643: LD_VAR 0 4
30647: PPUSH
30648: CALL_OW 380
30652: GO 30671
// PrepareHuman ( false , i , skill ) ;
30654: LD_INT 0
30656: PPUSH
30657: LD_VAR 0 8
30661: PPUSH
30662: LD_VAR 0 4
30666: PPUSH
30667: CALL_OW 380
// end else
30671: GO 30690
// PrepareHuman ( false , i , skill ) ;
30673: LD_INT 0
30675: PPUSH
30676: LD_VAR 0 8
30680: PPUSH
30681: LD_VAR 0 4
30685: PPUSH
30686: CALL_OW 380
// un := CreateHuman ;
30690: LD_ADDR_VAR 0 14
30694: PUSH
30695: CALL_OW 44
30699: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30700: LD_ADDR_VAR 0 7
30704: PUSH
30705: LD_VAR 0 7
30709: PPUSH
30710: LD_INT 1
30712: PPUSH
30713: LD_VAR 0 14
30717: PPUSH
30718: CALL_OW 2
30722: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30723: LD_VAR 0 14
30727: PPUSH
30728: LD_VAR 0 9
30732: PPUSH
30733: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30737: LD_VAR 0 9
30741: PPUSH
30742: CALL_OW 313
30746: PUSH
30747: LD_INT 6
30749: EQUAL
30750: PUSH
30751: LD_VAR 0 9
30755: PPUSH
30756: CALL_OW 266
30760: PUSH
30761: LD_INT 32
30763: PUSH
30764: LD_INT 31
30766: PUSH
30767: EMPTY
30768: LIST
30769: LIST
30770: IN
30771: OR
30772: IFFALSE 30586
30774: GO 30583
30776: POP
30777: POP
// end else
30778: GO 31160
// for j = 1 to x do
30780: LD_ADDR_VAR 0 9
30784: PUSH
30785: DOUBLE
30786: LD_INT 1
30788: DEC
30789: ST_TO_ADDR
30790: LD_VAR 0 13
30794: PUSH
30795: FOR_TO
30796: IFFALSE 31158
// begin InitHc ;
30798: CALL_OW 19
// if not f then
30802: LD_VAR 0 12
30806: NOT
30807: IFFALSE 30896
// begin PrepareHuman ( false , i , skill ) ;
30809: LD_INT 0
30811: PPUSH
30812: LD_VAR 0 8
30816: PPUSH
30817: LD_VAR 0 4
30821: PPUSH
30822: CALL_OW 380
// un := CreateHuman ;
30826: LD_ADDR_VAR 0 14
30830: PUSH
30831: CALL_OW 44
30835: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30836: LD_ADDR_VAR 0 7
30840: PUSH
30841: LD_VAR 0 7
30845: PPUSH
30846: LD_INT 1
30848: PPUSH
30849: LD_VAR 0 14
30853: PPUSH
30854: CALL_OW 2
30858: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30859: LD_VAR 0 14
30863: PPUSH
30864: LD_VAR 0 1
30868: PPUSH
30869: CALL_OW 250
30873: PPUSH
30874: LD_VAR 0 1
30878: PPUSH
30879: CALL_OW 251
30883: PPUSH
30884: LD_INT 10
30886: PPUSH
30887: LD_INT 0
30889: PPUSH
30890: CALL_OW 50
// continue ;
30894: GO 30795
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30896: LD_VAR 0 12
30900: PUSH
30901: LD_INT 1
30903: ARRAY
30904: PPUSH
30905: CALL_OW 313
30909: PUSH
30910: LD_VAR 0 12
30914: PUSH
30915: LD_INT 1
30917: ARRAY
30918: PPUSH
30919: CALL_OW 266
30923: PUSH
30924: LD_INT 32
30926: PUSH
30927: LD_INT 31
30929: PUSH
30930: EMPTY
30931: LIST
30932: LIST
30933: IN
30934: AND
30935: PUSH
30936: LD_VAR 0 12
30940: PUSH
30941: LD_INT 1
30943: ARRAY
30944: PPUSH
30945: CALL_OW 313
30949: PUSH
30950: LD_INT 6
30952: EQUAL
30953: OR
30954: IFFALSE 30974
// f := Delete ( f , 1 ) ;
30956: LD_ADDR_VAR 0 12
30960: PUSH
30961: LD_VAR 0 12
30965: PPUSH
30966: LD_INT 1
30968: PPUSH
30969: CALL_OW 3
30973: ST_TO_ADDR
// if not f then
30974: LD_VAR 0 12
30978: NOT
30979: IFFALSE 30997
// begin x := x + 2 ;
30981: LD_ADDR_VAR 0 13
30985: PUSH
30986: LD_VAR 0 13
30990: PUSH
30991: LD_INT 2
30993: PLUS
30994: ST_TO_ADDR
// continue ;
30995: GO 30795
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
30997: LD_VAR 0 12
31001: PUSH
31002: LD_INT 1
31004: ARRAY
31005: PPUSH
31006: CALL_OW 266
31010: PUSH
31011: LD_INT 5
31013: EQUAL
31014: IFFALSE 31088
// begin if UnitsInside ( f [ 1 ] ) < 3 then
31016: LD_VAR 0 12
31020: PUSH
31021: LD_INT 1
31023: ARRAY
31024: PPUSH
31025: CALL_OW 313
31029: PUSH
31030: LD_INT 3
31032: LESS
31033: IFFALSE 31069
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31035: LD_INT 0
31037: PPUSH
31038: LD_INT 5
31040: PUSH
31041: LD_INT 8
31043: PUSH
31044: LD_INT 9
31046: PUSH
31047: EMPTY
31048: LIST
31049: LIST
31050: LIST
31051: PUSH
31052: LD_VAR 0 17
31056: ARRAY
31057: PPUSH
31058: LD_VAR 0 4
31062: PPUSH
31063: CALL_OW 380
31067: GO 31086
// PrepareHuman ( false , i , skill ) ;
31069: LD_INT 0
31071: PPUSH
31072: LD_VAR 0 8
31076: PPUSH
31077: LD_VAR 0 4
31081: PPUSH
31082: CALL_OW 380
// end else
31086: GO 31105
// PrepareHuman ( false , i , skill ) ;
31088: LD_INT 0
31090: PPUSH
31091: LD_VAR 0 8
31095: PPUSH
31096: LD_VAR 0 4
31100: PPUSH
31101: CALL_OW 380
// un := CreateHuman ;
31105: LD_ADDR_VAR 0 14
31109: PUSH
31110: CALL_OW 44
31114: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31115: LD_ADDR_VAR 0 7
31119: PUSH
31120: LD_VAR 0 7
31124: PPUSH
31125: LD_INT 1
31127: PPUSH
31128: LD_VAR 0 14
31132: PPUSH
31133: CALL_OW 2
31137: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
31138: LD_VAR 0 14
31142: PPUSH
31143: LD_VAR 0 12
31147: PUSH
31148: LD_INT 1
31150: ARRAY
31151: PPUSH
31152: CALL_OW 52
// end ;
31156: GO 30795
31158: POP
31159: POP
// end ;
31160: GO 30097
31162: POP
31163: POP
// result := result ^ buildings ;
31164: LD_ADDR_VAR 0 7
31168: PUSH
31169: LD_VAR 0 7
31173: PUSH
31174: LD_VAR 0 18
31178: ADD
31179: ST_TO_ADDR
// end else
31180: GO 31323
// begin for i = 1 to personel do
31182: LD_ADDR_VAR 0 8
31186: PUSH
31187: DOUBLE
31188: LD_INT 1
31190: DEC
31191: ST_TO_ADDR
31192: LD_VAR 0 6
31196: PUSH
31197: FOR_TO
31198: IFFALSE 31321
// begin if i > 4 then
31200: LD_VAR 0 8
31204: PUSH
31205: LD_INT 4
31207: GREATER
31208: IFFALSE 31212
// break ;
31210: GO 31321
// x := personel [ i ] ;
31212: LD_ADDR_VAR 0 13
31216: PUSH
31217: LD_VAR 0 6
31221: PUSH
31222: LD_VAR 0 8
31226: ARRAY
31227: ST_TO_ADDR
// if x = - 1 then
31228: LD_VAR 0 13
31232: PUSH
31233: LD_INT 1
31235: NEG
31236: EQUAL
31237: IFFALSE 31241
// continue ;
31239: GO 31197
// PrepareHuman ( false , i , skill ) ;
31241: LD_INT 0
31243: PPUSH
31244: LD_VAR 0 8
31248: PPUSH
31249: LD_VAR 0 4
31253: PPUSH
31254: CALL_OW 380
// un := CreateHuman ;
31258: LD_ADDR_VAR 0 14
31262: PUSH
31263: CALL_OW 44
31267: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
31268: LD_VAR 0 14
31272: PPUSH
31273: LD_VAR 0 1
31277: PPUSH
31278: CALL_OW 250
31282: PPUSH
31283: LD_VAR 0 1
31287: PPUSH
31288: CALL_OW 251
31292: PPUSH
31293: LD_INT 10
31295: PPUSH
31296: LD_INT 0
31298: PPUSH
31299: CALL_OW 50
// result := result ^ un ;
31303: LD_ADDR_VAR 0 7
31307: PUSH
31308: LD_VAR 0 7
31312: PUSH
31313: LD_VAR 0 14
31317: ADD
31318: ST_TO_ADDR
// end ;
31319: GO 31197
31321: POP
31322: POP
// end ; end ;
31323: LD_VAR 0 7
31327: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
31328: LD_INT 0
31330: PPUSH
31331: PPUSH
31332: PPUSH
31333: PPUSH
31334: PPUSH
31335: PPUSH
31336: PPUSH
31337: PPUSH
31338: PPUSH
31339: PPUSH
31340: PPUSH
31341: PPUSH
31342: PPUSH
31343: PPUSH
31344: PPUSH
31345: PPUSH
// result := false ;
31346: LD_ADDR_VAR 0 3
31350: PUSH
31351: LD_INT 0
31353: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
31354: LD_VAR 0 1
31358: NOT
31359: PUSH
31360: LD_VAR 0 1
31364: PPUSH
31365: CALL_OW 266
31369: PUSH
31370: LD_INT 32
31372: PUSH
31373: LD_INT 33
31375: PUSH
31376: EMPTY
31377: LIST
31378: LIST
31379: IN
31380: NOT
31381: OR
31382: IFFALSE 31386
// exit ;
31384: GO 32495
// nat := GetNation ( tower ) ;
31386: LD_ADDR_VAR 0 12
31390: PUSH
31391: LD_VAR 0 1
31395: PPUSH
31396: CALL_OW 248
31400: ST_TO_ADDR
// side := GetSide ( tower ) ;
31401: LD_ADDR_VAR 0 16
31405: PUSH
31406: LD_VAR 0 1
31410: PPUSH
31411: CALL_OW 255
31415: ST_TO_ADDR
// x := GetX ( tower ) ;
31416: LD_ADDR_VAR 0 10
31420: PUSH
31421: LD_VAR 0 1
31425: PPUSH
31426: CALL_OW 250
31430: ST_TO_ADDR
// y := GetY ( tower ) ;
31431: LD_ADDR_VAR 0 11
31435: PUSH
31436: LD_VAR 0 1
31440: PPUSH
31441: CALL_OW 251
31445: ST_TO_ADDR
// if not x or not y then
31446: LD_VAR 0 10
31450: NOT
31451: PUSH
31452: LD_VAR 0 11
31456: NOT
31457: OR
31458: IFFALSE 31462
// exit ;
31460: GO 32495
// weapon := 0 ;
31462: LD_ADDR_VAR 0 18
31466: PUSH
31467: LD_INT 0
31469: ST_TO_ADDR
// fac_list := [ ] ;
31470: LD_ADDR_VAR 0 17
31474: PUSH
31475: EMPTY
31476: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
31477: LD_ADDR_VAR 0 6
31481: PUSH
31482: LD_VAR 0 1
31486: PPUSH
31487: CALL_OW 274
31491: PPUSH
31492: LD_VAR 0 2
31496: PPUSH
31497: LD_INT 0
31499: PPUSH
31500: CALL 29066 0 3
31504: PPUSH
31505: LD_INT 30
31507: PUSH
31508: LD_INT 3
31510: PUSH
31511: EMPTY
31512: LIST
31513: LIST
31514: PPUSH
31515: CALL_OW 72
31519: ST_TO_ADDR
// if not factories then
31520: LD_VAR 0 6
31524: NOT
31525: IFFALSE 31529
// exit ;
31527: GO 32495
// for i in factories do
31529: LD_ADDR_VAR 0 8
31533: PUSH
31534: LD_VAR 0 6
31538: PUSH
31539: FOR_IN
31540: IFFALSE 31565
// fac_list := fac_list union AvailableWeaponList ( i ) ;
31542: LD_ADDR_VAR 0 17
31546: PUSH
31547: LD_VAR 0 17
31551: PUSH
31552: LD_VAR 0 8
31556: PPUSH
31557: CALL_OW 478
31561: UNION
31562: ST_TO_ADDR
31563: GO 31539
31565: POP
31566: POP
// if not fac_list then
31567: LD_VAR 0 17
31571: NOT
31572: IFFALSE 31576
// exit ;
31574: GO 32495
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
31576: LD_ADDR_VAR 0 5
31580: PUSH
31581: LD_INT 4
31583: PUSH
31584: LD_INT 5
31586: PUSH
31587: LD_INT 9
31589: PUSH
31590: LD_INT 10
31592: PUSH
31593: LD_INT 6
31595: PUSH
31596: LD_INT 7
31598: PUSH
31599: LD_INT 11
31601: PUSH
31602: EMPTY
31603: LIST
31604: LIST
31605: LIST
31606: LIST
31607: LIST
31608: LIST
31609: LIST
31610: PUSH
31611: LD_INT 27
31613: PUSH
31614: LD_INT 28
31616: PUSH
31617: LD_INT 26
31619: PUSH
31620: LD_INT 30
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: LIST
31627: LIST
31628: PUSH
31629: LD_INT 43
31631: PUSH
31632: LD_INT 44
31634: PUSH
31635: LD_INT 46
31637: PUSH
31638: LD_INT 45
31640: PUSH
31641: LD_INT 47
31643: PUSH
31644: LD_INT 49
31646: PUSH
31647: EMPTY
31648: LIST
31649: LIST
31650: LIST
31651: LIST
31652: LIST
31653: LIST
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: LIST
31659: PUSH
31660: LD_VAR 0 12
31664: ARRAY
31665: ST_TO_ADDR
// list := list isect fac_list ;
31666: LD_ADDR_VAR 0 5
31670: PUSH
31671: LD_VAR 0 5
31675: PUSH
31676: LD_VAR 0 17
31680: ISECT
31681: ST_TO_ADDR
// if not list then
31682: LD_VAR 0 5
31686: NOT
31687: IFFALSE 31691
// exit ;
31689: GO 32495
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31691: LD_VAR 0 12
31695: PUSH
31696: LD_INT 3
31698: EQUAL
31699: PUSH
31700: LD_INT 49
31702: PUSH
31703: LD_VAR 0 5
31707: IN
31708: AND
31709: PUSH
31710: LD_INT 31
31712: PPUSH
31713: LD_VAR 0 16
31717: PPUSH
31718: CALL_OW 321
31722: PUSH
31723: LD_INT 2
31725: EQUAL
31726: AND
31727: IFFALSE 31787
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31729: LD_INT 22
31731: PUSH
31732: LD_VAR 0 16
31736: PUSH
31737: EMPTY
31738: LIST
31739: LIST
31740: PUSH
31741: LD_INT 35
31743: PUSH
31744: LD_INT 49
31746: PUSH
31747: EMPTY
31748: LIST
31749: LIST
31750: PUSH
31751: LD_INT 91
31753: PUSH
31754: LD_VAR 0 1
31758: PUSH
31759: LD_INT 10
31761: PUSH
31762: EMPTY
31763: LIST
31764: LIST
31765: LIST
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: LIST
31771: PPUSH
31772: CALL_OW 69
31776: NOT
31777: IFFALSE 31787
// weapon := ru_time_lapser ;
31779: LD_ADDR_VAR 0 18
31783: PUSH
31784: LD_INT 49
31786: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31787: LD_VAR 0 12
31791: PUSH
31792: LD_INT 1
31794: PUSH
31795: LD_INT 2
31797: PUSH
31798: EMPTY
31799: LIST
31800: LIST
31801: IN
31802: PUSH
31803: LD_INT 11
31805: PUSH
31806: LD_VAR 0 5
31810: IN
31811: PUSH
31812: LD_INT 30
31814: PUSH
31815: LD_VAR 0 5
31819: IN
31820: OR
31821: AND
31822: PUSH
31823: LD_INT 6
31825: PPUSH
31826: LD_VAR 0 16
31830: PPUSH
31831: CALL_OW 321
31835: PUSH
31836: LD_INT 2
31838: EQUAL
31839: AND
31840: IFFALSE 32005
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31842: LD_INT 22
31844: PUSH
31845: LD_VAR 0 16
31849: PUSH
31850: EMPTY
31851: LIST
31852: LIST
31853: PUSH
31854: LD_INT 2
31856: PUSH
31857: LD_INT 35
31859: PUSH
31860: LD_INT 11
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: PUSH
31867: LD_INT 35
31869: PUSH
31870: LD_INT 30
31872: PUSH
31873: EMPTY
31874: LIST
31875: LIST
31876: PUSH
31877: EMPTY
31878: LIST
31879: LIST
31880: LIST
31881: PUSH
31882: LD_INT 91
31884: PUSH
31885: LD_VAR 0 1
31889: PUSH
31890: LD_INT 18
31892: PUSH
31893: EMPTY
31894: LIST
31895: LIST
31896: LIST
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: LIST
31902: PPUSH
31903: CALL_OW 69
31907: NOT
31908: PUSH
31909: LD_INT 22
31911: PUSH
31912: LD_VAR 0 16
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: PUSH
31921: LD_INT 2
31923: PUSH
31924: LD_INT 30
31926: PUSH
31927: LD_INT 32
31929: PUSH
31930: EMPTY
31931: LIST
31932: LIST
31933: PUSH
31934: LD_INT 30
31936: PUSH
31937: LD_INT 33
31939: PUSH
31940: EMPTY
31941: LIST
31942: LIST
31943: PUSH
31944: EMPTY
31945: LIST
31946: LIST
31947: LIST
31948: PUSH
31949: LD_INT 91
31951: PUSH
31952: LD_VAR 0 1
31956: PUSH
31957: LD_INT 12
31959: PUSH
31960: EMPTY
31961: LIST
31962: LIST
31963: LIST
31964: PUSH
31965: EMPTY
31966: LIST
31967: LIST
31968: LIST
31969: PUSH
31970: EMPTY
31971: LIST
31972: PPUSH
31973: CALL_OW 69
31977: PUSH
31978: LD_INT 2
31980: GREATER
31981: AND
31982: IFFALSE 32005
// weapon := [ us_radar , ar_radar ] [ nat ] ;
31984: LD_ADDR_VAR 0 18
31988: PUSH
31989: LD_INT 11
31991: PUSH
31992: LD_INT 30
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PUSH
31999: LD_VAR 0 12
32003: ARRAY
32004: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
32005: LD_VAR 0 18
32009: NOT
32010: PUSH
32011: LD_INT 40
32013: PPUSH
32014: LD_VAR 0 16
32018: PPUSH
32019: CALL_OW 321
32023: PUSH
32024: LD_INT 2
32026: EQUAL
32027: AND
32028: PUSH
32029: LD_INT 7
32031: PUSH
32032: LD_VAR 0 5
32036: IN
32037: PUSH
32038: LD_INT 28
32040: PUSH
32041: LD_VAR 0 5
32045: IN
32046: OR
32047: PUSH
32048: LD_INT 45
32050: PUSH
32051: LD_VAR 0 5
32055: IN
32056: OR
32057: AND
32058: IFFALSE 32312
// begin hex := GetHexInfo ( x , y ) ;
32060: LD_ADDR_VAR 0 4
32064: PUSH
32065: LD_VAR 0 10
32069: PPUSH
32070: LD_VAR 0 11
32074: PPUSH
32075: CALL_OW 546
32079: ST_TO_ADDR
// if hex [ 1 ] then
32080: LD_VAR 0 4
32084: PUSH
32085: LD_INT 1
32087: ARRAY
32088: IFFALSE 32092
// exit ;
32090: GO 32495
// height := hex [ 2 ] ;
32092: LD_ADDR_VAR 0 15
32096: PUSH
32097: LD_VAR 0 4
32101: PUSH
32102: LD_INT 2
32104: ARRAY
32105: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
32106: LD_ADDR_VAR 0 14
32110: PUSH
32111: LD_INT 0
32113: PUSH
32114: LD_INT 2
32116: PUSH
32117: LD_INT 3
32119: PUSH
32120: LD_INT 5
32122: PUSH
32123: EMPTY
32124: LIST
32125: LIST
32126: LIST
32127: LIST
32128: ST_TO_ADDR
// for i in tmp do
32129: LD_ADDR_VAR 0 8
32133: PUSH
32134: LD_VAR 0 14
32138: PUSH
32139: FOR_IN
32140: IFFALSE 32310
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
32142: LD_ADDR_VAR 0 9
32146: PUSH
32147: LD_VAR 0 10
32151: PPUSH
32152: LD_VAR 0 8
32156: PPUSH
32157: LD_INT 5
32159: PPUSH
32160: CALL_OW 272
32164: PUSH
32165: LD_VAR 0 11
32169: PPUSH
32170: LD_VAR 0 8
32174: PPUSH
32175: LD_INT 5
32177: PPUSH
32178: CALL_OW 273
32182: PUSH
32183: EMPTY
32184: LIST
32185: LIST
32186: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
32187: LD_VAR 0 9
32191: PUSH
32192: LD_INT 1
32194: ARRAY
32195: PPUSH
32196: LD_VAR 0 9
32200: PUSH
32201: LD_INT 2
32203: ARRAY
32204: PPUSH
32205: CALL_OW 488
32209: IFFALSE 32308
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
32211: LD_ADDR_VAR 0 4
32215: PUSH
32216: LD_VAR 0 9
32220: PUSH
32221: LD_INT 1
32223: ARRAY
32224: PPUSH
32225: LD_VAR 0 9
32229: PUSH
32230: LD_INT 2
32232: ARRAY
32233: PPUSH
32234: CALL_OW 546
32238: ST_TO_ADDR
// if hex [ 1 ] then
32239: LD_VAR 0 4
32243: PUSH
32244: LD_INT 1
32246: ARRAY
32247: IFFALSE 32251
// continue ;
32249: GO 32139
// h := hex [ 2 ] ;
32251: LD_ADDR_VAR 0 13
32255: PUSH
32256: LD_VAR 0 4
32260: PUSH
32261: LD_INT 2
32263: ARRAY
32264: ST_TO_ADDR
// if h + 7 < height then
32265: LD_VAR 0 13
32269: PUSH
32270: LD_INT 7
32272: PLUS
32273: PUSH
32274: LD_VAR 0 15
32278: LESS
32279: IFFALSE 32308
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
32281: LD_ADDR_VAR 0 18
32285: PUSH
32286: LD_INT 7
32288: PUSH
32289: LD_INT 28
32291: PUSH
32292: LD_INT 45
32294: PUSH
32295: EMPTY
32296: LIST
32297: LIST
32298: LIST
32299: PUSH
32300: LD_VAR 0 12
32304: ARRAY
32305: ST_TO_ADDR
// break ;
32306: GO 32310
// end ; end ; end ;
32308: GO 32139
32310: POP
32311: POP
// end ; if not weapon then
32312: LD_VAR 0 18
32316: NOT
32317: IFFALSE 32377
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
32319: LD_ADDR_VAR 0 5
32323: PUSH
32324: LD_VAR 0 5
32328: PUSH
32329: LD_INT 11
32331: PUSH
32332: LD_INT 30
32334: PUSH
32335: LD_INT 49
32337: PUSH
32338: EMPTY
32339: LIST
32340: LIST
32341: LIST
32342: DIFF
32343: ST_TO_ADDR
// if not list then
32344: LD_VAR 0 5
32348: NOT
32349: IFFALSE 32353
// exit ;
32351: GO 32495
// weapon := list [ rand ( 1 , list ) ] ;
32353: LD_ADDR_VAR 0 18
32357: PUSH
32358: LD_VAR 0 5
32362: PUSH
32363: LD_INT 1
32365: PPUSH
32366: LD_VAR 0 5
32370: PPUSH
32371: CALL_OW 12
32375: ARRAY
32376: ST_TO_ADDR
// end ; if weapon then
32377: LD_VAR 0 18
32381: IFFALSE 32495
// begin tmp := CostOfWeapon ( weapon ) ;
32383: LD_ADDR_VAR 0 14
32387: PUSH
32388: LD_VAR 0 18
32392: PPUSH
32393: CALL_OW 451
32397: ST_TO_ADDR
// j := GetBase ( tower ) ;
32398: LD_ADDR_VAR 0 9
32402: PUSH
32403: LD_VAR 0 1
32407: PPUSH
32408: CALL_OW 274
32412: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
32413: LD_VAR 0 9
32417: PPUSH
32418: LD_INT 1
32420: PPUSH
32421: CALL_OW 275
32425: PUSH
32426: LD_VAR 0 14
32430: PUSH
32431: LD_INT 1
32433: ARRAY
32434: GREATEREQUAL
32435: PUSH
32436: LD_VAR 0 9
32440: PPUSH
32441: LD_INT 2
32443: PPUSH
32444: CALL_OW 275
32448: PUSH
32449: LD_VAR 0 14
32453: PUSH
32454: LD_INT 2
32456: ARRAY
32457: GREATEREQUAL
32458: AND
32459: PUSH
32460: LD_VAR 0 9
32464: PPUSH
32465: LD_INT 3
32467: PPUSH
32468: CALL_OW 275
32472: PUSH
32473: LD_VAR 0 14
32477: PUSH
32478: LD_INT 3
32480: ARRAY
32481: GREATEREQUAL
32482: AND
32483: IFFALSE 32495
// result := weapon ;
32485: LD_ADDR_VAR 0 3
32489: PUSH
32490: LD_VAR 0 18
32494: ST_TO_ADDR
// end ; end ;
32495: LD_VAR 0 3
32499: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
32500: LD_INT 0
32502: PPUSH
32503: PPUSH
// result := true ;
32504: LD_ADDR_VAR 0 3
32508: PUSH
32509: LD_INT 1
32511: ST_TO_ADDR
// if array1 = array2 then
32512: LD_VAR 0 1
32516: PUSH
32517: LD_VAR 0 2
32521: EQUAL
32522: IFFALSE 32582
// begin for i = 1 to array1 do
32524: LD_ADDR_VAR 0 4
32528: PUSH
32529: DOUBLE
32530: LD_INT 1
32532: DEC
32533: ST_TO_ADDR
32534: LD_VAR 0 1
32538: PUSH
32539: FOR_TO
32540: IFFALSE 32578
// if array1 [ i ] <> array2 [ i ] then
32542: LD_VAR 0 1
32546: PUSH
32547: LD_VAR 0 4
32551: ARRAY
32552: PUSH
32553: LD_VAR 0 2
32557: PUSH
32558: LD_VAR 0 4
32562: ARRAY
32563: NONEQUAL
32564: IFFALSE 32576
// begin result := false ;
32566: LD_ADDR_VAR 0 3
32570: PUSH
32571: LD_INT 0
32573: ST_TO_ADDR
// break ;
32574: GO 32578
// end ;
32576: GO 32539
32578: POP
32579: POP
// end else
32580: GO 32590
// result := false ;
32582: LD_ADDR_VAR 0 3
32586: PUSH
32587: LD_INT 0
32589: ST_TO_ADDR
// end ;
32590: LD_VAR 0 3
32594: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
32595: LD_INT 0
32597: PPUSH
32598: PPUSH
// if not array1 or not array2 then
32599: LD_VAR 0 1
32603: NOT
32604: PUSH
32605: LD_VAR 0 2
32609: NOT
32610: OR
32611: IFFALSE 32615
// exit ;
32613: GO 32679
// result := true ;
32615: LD_ADDR_VAR 0 3
32619: PUSH
32620: LD_INT 1
32622: ST_TO_ADDR
// for i = 1 to array1 do
32623: LD_ADDR_VAR 0 4
32627: PUSH
32628: DOUBLE
32629: LD_INT 1
32631: DEC
32632: ST_TO_ADDR
32633: LD_VAR 0 1
32637: PUSH
32638: FOR_TO
32639: IFFALSE 32677
// if array1 [ i ] <> array2 [ i ] then
32641: LD_VAR 0 1
32645: PUSH
32646: LD_VAR 0 4
32650: ARRAY
32651: PUSH
32652: LD_VAR 0 2
32656: PUSH
32657: LD_VAR 0 4
32661: ARRAY
32662: NONEQUAL
32663: IFFALSE 32675
// begin result := false ;
32665: LD_ADDR_VAR 0 3
32669: PUSH
32670: LD_INT 0
32672: ST_TO_ADDR
// break ;
32673: GO 32677
// end ;
32675: GO 32638
32677: POP
32678: POP
// end ;
32679: LD_VAR 0 3
32683: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32684: LD_INT 0
32686: PPUSH
32687: PPUSH
32688: PPUSH
// pom := GetBase ( fac ) ;
32689: LD_ADDR_VAR 0 5
32693: PUSH
32694: LD_VAR 0 1
32698: PPUSH
32699: CALL_OW 274
32703: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32704: LD_ADDR_VAR 0 4
32708: PUSH
32709: LD_VAR 0 2
32713: PUSH
32714: LD_INT 1
32716: ARRAY
32717: PPUSH
32718: LD_VAR 0 2
32722: PUSH
32723: LD_INT 2
32725: ARRAY
32726: PPUSH
32727: LD_VAR 0 2
32731: PUSH
32732: LD_INT 3
32734: ARRAY
32735: PPUSH
32736: LD_VAR 0 2
32740: PUSH
32741: LD_INT 4
32743: ARRAY
32744: PPUSH
32745: CALL_OW 449
32749: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32750: LD_ADDR_VAR 0 3
32754: PUSH
32755: LD_VAR 0 5
32759: PPUSH
32760: LD_INT 1
32762: PPUSH
32763: CALL_OW 275
32767: PUSH
32768: LD_VAR 0 4
32772: PUSH
32773: LD_INT 1
32775: ARRAY
32776: GREATEREQUAL
32777: PUSH
32778: LD_VAR 0 5
32782: PPUSH
32783: LD_INT 2
32785: PPUSH
32786: CALL_OW 275
32790: PUSH
32791: LD_VAR 0 4
32795: PUSH
32796: LD_INT 2
32798: ARRAY
32799: GREATEREQUAL
32800: AND
32801: PUSH
32802: LD_VAR 0 5
32806: PPUSH
32807: LD_INT 3
32809: PPUSH
32810: CALL_OW 275
32814: PUSH
32815: LD_VAR 0 4
32819: PUSH
32820: LD_INT 3
32822: ARRAY
32823: GREATEREQUAL
32824: AND
32825: ST_TO_ADDR
// end ;
32826: LD_VAR 0 3
32830: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32831: LD_INT 0
32833: PPUSH
32834: PPUSH
32835: PPUSH
32836: PPUSH
// pom := GetBase ( building ) ;
32837: LD_ADDR_VAR 0 3
32841: PUSH
32842: LD_VAR 0 1
32846: PPUSH
32847: CALL_OW 274
32851: ST_TO_ADDR
// if not pom then
32852: LD_VAR 0 3
32856: NOT
32857: IFFALSE 32861
// exit ;
32859: GO 33031
// btype := GetBType ( building ) ;
32861: LD_ADDR_VAR 0 5
32865: PUSH
32866: LD_VAR 0 1
32870: PPUSH
32871: CALL_OW 266
32875: ST_TO_ADDR
// if btype = b_armoury then
32876: LD_VAR 0 5
32880: PUSH
32881: LD_INT 4
32883: EQUAL
32884: IFFALSE 32894
// btype := b_barracks ;
32886: LD_ADDR_VAR 0 5
32890: PUSH
32891: LD_INT 5
32893: ST_TO_ADDR
// if btype = b_depot then
32894: LD_VAR 0 5
32898: PUSH
32899: LD_INT 0
32901: EQUAL
32902: IFFALSE 32912
// btype := b_warehouse ;
32904: LD_ADDR_VAR 0 5
32908: PUSH
32909: LD_INT 1
32911: ST_TO_ADDR
// if btype = b_workshop then
32912: LD_VAR 0 5
32916: PUSH
32917: LD_INT 2
32919: EQUAL
32920: IFFALSE 32930
// btype := b_factory ;
32922: LD_ADDR_VAR 0 5
32926: PUSH
32927: LD_INT 3
32929: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32930: LD_ADDR_VAR 0 4
32934: PUSH
32935: LD_VAR 0 5
32939: PPUSH
32940: LD_VAR 0 1
32944: PPUSH
32945: CALL_OW 248
32949: PPUSH
32950: CALL_OW 450
32954: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32955: LD_ADDR_VAR 0 2
32959: PUSH
32960: LD_VAR 0 3
32964: PPUSH
32965: LD_INT 1
32967: PPUSH
32968: CALL_OW 275
32972: PUSH
32973: LD_VAR 0 4
32977: PUSH
32978: LD_INT 1
32980: ARRAY
32981: GREATEREQUAL
32982: PUSH
32983: LD_VAR 0 3
32987: PPUSH
32988: LD_INT 2
32990: PPUSH
32991: CALL_OW 275
32995: PUSH
32996: LD_VAR 0 4
33000: PUSH
33001: LD_INT 2
33003: ARRAY
33004: GREATEREQUAL
33005: AND
33006: PUSH
33007: LD_VAR 0 3
33011: PPUSH
33012: LD_INT 3
33014: PPUSH
33015: CALL_OW 275
33019: PUSH
33020: LD_VAR 0 4
33024: PUSH
33025: LD_INT 3
33027: ARRAY
33028: GREATEREQUAL
33029: AND
33030: ST_TO_ADDR
// end ;
33031: LD_VAR 0 2
33035: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
33036: LD_INT 0
33038: PPUSH
33039: PPUSH
33040: PPUSH
// pom := GetBase ( building ) ;
33041: LD_ADDR_VAR 0 4
33045: PUSH
33046: LD_VAR 0 1
33050: PPUSH
33051: CALL_OW 274
33055: ST_TO_ADDR
// if not pom then
33056: LD_VAR 0 4
33060: NOT
33061: IFFALSE 33065
// exit ;
33063: GO 33166
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
33065: LD_ADDR_VAR 0 5
33069: PUSH
33070: LD_VAR 0 2
33074: PPUSH
33075: LD_VAR 0 1
33079: PPUSH
33080: CALL_OW 248
33084: PPUSH
33085: CALL_OW 450
33089: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33090: LD_ADDR_VAR 0 3
33094: PUSH
33095: LD_VAR 0 4
33099: PPUSH
33100: LD_INT 1
33102: PPUSH
33103: CALL_OW 275
33107: PUSH
33108: LD_VAR 0 5
33112: PUSH
33113: LD_INT 1
33115: ARRAY
33116: GREATEREQUAL
33117: PUSH
33118: LD_VAR 0 4
33122: PPUSH
33123: LD_INT 2
33125: PPUSH
33126: CALL_OW 275
33130: PUSH
33131: LD_VAR 0 5
33135: PUSH
33136: LD_INT 2
33138: ARRAY
33139: GREATEREQUAL
33140: AND
33141: PUSH
33142: LD_VAR 0 4
33146: PPUSH
33147: LD_INT 3
33149: PPUSH
33150: CALL_OW 275
33154: PUSH
33155: LD_VAR 0 5
33159: PUSH
33160: LD_INT 3
33162: ARRAY
33163: GREATEREQUAL
33164: AND
33165: ST_TO_ADDR
// end ;
33166: LD_VAR 0 3
33170: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
33171: LD_INT 0
33173: PPUSH
33174: PPUSH
33175: PPUSH
33176: PPUSH
33177: PPUSH
33178: PPUSH
33179: PPUSH
33180: PPUSH
33181: PPUSH
33182: PPUSH
33183: PPUSH
// result := false ;
33184: LD_ADDR_VAR 0 8
33188: PUSH
33189: LD_INT 0
33191: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
33192: LD_VAR 0 5
33196: NOT
33197: PUSH
33198: LD_VAR 0 1
33202: NOT
33203: OR
33204: PUSH
33205: LD_VAR 0 2
33209: NOT
33210: OR
33211: PUSH
33212: LD_VAR 0 3
33216: NOT
33217: OR
33218: IFFALSE 33222
// exit ;
33220: GO 34036
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
33222: LD_ADDR_VAR 0 14
33226: PUSH
33227: LD_VAR 0 1
33231: PPUSH
33232: LD_VAR 0 2
33236: PPUSH
33237: LD_VAR 0 3
33241: PPUSH
33242: LD_VAR 0 4
33246: PPUSH
33247: LD_VAR 0 5
33251: PUSH
33252: LD_INT 1
33254: ARRAY
33255: PPUSH
33256: CALL_OW 248
33260: PPUSH
33261: LD_INT 0
33263: PPUSH
33264: CALL 35273 0 6
33268: ST_TO_ADDR
// if not hexes then
33269: LD_VAR 0 14
33273: NOT
33274: IFFALSE 33278
// exit ;
33276: GO 34036
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
33278: LD_ADDR_VAR 0 17
33282: PUSH
33283: LD_VAR 0 5
33287: PPUSH
33288: LD_INT 22
33290: PUSH
33291: LD_VAR 0 13
33295: PPUSH
33296: CALL_OW 255
33300: PUSH
33301: EMPTY
33302: LIST
33303: LIST
33304: PUSH
33305: LD_INT 2
33307: PUSH
33308: LD_INT 30
33310: PUSH
33311: LD_INT 0
33313: PUSH
33314: EMPTY
33315: LIST
33316: LIST
33317: PUSH
33318: LD_INT 30
33320: PUSH
33321: LD_INT 1
33323: PUSH
33324: EMPTY
33325: LIST
33326: LIST
33327: PUSH
33328: EMPTY
33329: LIST
33330: LIST
33331: LIST
33332: PUSH
33333: EMPTY
33334: LIST
33335: LIST
33336: PPUSH
33337: CALL_OW 72
33341: ST_TO_ADDR
// for i = 1 to hexes do
33342: LD_ADDR_VAR 0 9
33346: PUSH
33347: DOUBLE
33348: LD_INT 1
33350: DEC
33351: ST_TO_ADDR
33352: LD_VAR 0 14
33356: PUSH
33357: FOR_TO
33358: IFFALSE 34034
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33360: LD_ADDR_VAR 0 13
33364: PUSH
33365: LD_VAR 0 14
33369: PUSH
33370: LD_VAR 0 9
33374: ARRAY
33375: PUSH
33376: LD_INT 1
33378: ARRAY
33379: PPUSH
33380: LD_VAR 0 14
33384: PUSH
33385: LD_VAR 0 9
33389: ARRAY
33390: PUSH
33391: LD_INT 2
33393: ARRAY
33394: PPUSH
33395: CALL_OW 428
33399: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
33400: LD_VAR 0 14
33404: PUSH
33405: LD_VAR 0 9
33409: ARRAY
33410: PUSH
33411: LD_INT 1
33413: ARRAY
33414: PPUSH
33415: LD_VAR 0 14
33419: PUSH
33420: LD_VAR 0 9
33424: ARRAY
33425: PUSH
33426: LD_INT 2
33428: ARRAY
33429: PPUSH
33430: CALL_OW 351
33434: PUSH
33435: LD_VAR 0 14
33439: PUSH
33440: LD_VAR 0 9
33444: ARRAY
33445: PUSH
33446: LD_INT 1
33448: ARRAY
33449: PPUSH
33450: LD_VAR 0 14
33454: PUSH
33455: LD_VAR 0 9
33459: ARRAY
33460: PUSH
33461: LD_INT 2
33463: ARRAY
33464: PPUSH
33465: CALL_OW 488
33469: NOT
33470: OR
33471: PUSH
33472: LD_VAR 0 13
33476: PPUSH
33477: CALL_OW 247
33481: PUSH
33482: LD_INT 3
33484: EQUAL
33485: OR
33486: IFFALSE 33492
// exit ;
33488: POP
33489: POP
33490: GO 34036
// if not tmp then
33492: LD_VAR 0 13
33496: NOT
33497: IFFALSE 33501
// continue ;
33499: GO 33357
// result := true ;
33501: LD_ADDR_VAR 0 8
33505: PUSH
33506: LD_INT 1
33508: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
33509: LD_VAR 0 6
33513: PUSH
33514: LD_VAR 0 13
33518: PPUSH
33519: CALL_OW 247
33523: PUSH
33524: LD_INT 2
33526: EQUAL
33527: AND
33528: PUSH
33529: LD_VAR 0 13
33533: PPUSH
33534: CALL_OW 263
33538: PUSH
33539: LD_INT 1
33541: EQUAL
33542: AND
33543: IFFALSE 33707
// begin if IsDrivenBy ( tmp ) then
33545: LD_VAR 0 13
33549: PPUSH
33550: CALL_OW 311
33554: IFFALSE 33558
// continue ;
33556: GO 33357
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
33558: LD_VAR 0 6
33562: PPUSH
33563: LD_INT 3
33565: PUSH
33566: LD_INT 60
33568: PUSH
33569: EMPTY
33570: LIST
33571: PUSH
33572: EMPTY
33573: LIST
33574: LIST
33575: PUSH
33576: LD_INT 3
33578: PUSH
33579: LD_INT 55
33581: PUSH
33582: EMPTY
33583: LIST
33584: PUSH
33585: EMPTY
33586: LIST
33587: LIST
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PPUSH
33593: CALL_OW 72
33597: IFFALSE 33705
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
33599: LD_ADDR_VAR 0 18
33603: PUSH
33604: LD_VAR 0 6
33608: PPUSH
33609: LD_INT 3
33611: PUSH
33612: LD_INT 60
33614: PUSH
33615: EMPTY
33616: LIST
33617: PUSH
33618: EMPTY
33619: LIST
33620: LIST
33621: PUSH
33622: LD_INT 3
33624: PUSH
33625: LD_INT 55
33627: PUSH
33628: EMPTY
33629: LIST
33630: PUSH
33631: EMPTY
33632: LIST
33633: LIST
33634: PUSH
33635: EMPTY
33636: LIST
33637: LIST
33638: PPUSH
33639: CALL_OW 72
33643: PUSH
33644: LD_INT 1
33646: ARRAY
33647: ST_TO_ADDR
// if IsInUnit ( driver ) then
33648: LD_VAR 0 18
33652: PPUSH
33653: CALL_OW 310
33657: IFFALSE 33668
// ComExit ( driver ) ;
33659: LD_VAR 0 18
33663: PPUSH
33664: CALL 58457 0 1
// AddComEnterUnit ( driver , tmp ) ;
33668: LD_VAR 0 18
33672: PPUSH
33673: LD_VAR 0 13
33677: PPUSH
33678: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
33682: LD_VAR 0 18
33686: PPUSH
33687: LD_VAR 0 7
33691: PPUSH
33692: CALL_OW 173
// AddComExitVehicle ( driver ) ;
33696: LD_VAR 0 18
33700: PPUSH
33701: CALL_OW 181
// end ; continue ;
33705: GO 33357
// end ; if not cleaners or not tmp in cleaners then
33707: LD_VAR 0 6
33711: NOT
33712: PUSH
33713: LD_VAR 0 13
33717: PUSH
33718: LD_VAR 0 6
33722: IN
33723: NOT
33724: OR
33725: IFFALSE 34032
// begin if dep then
33727: LD_VAR 0 17
33731: IFFALSE 33867
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33733: LD_ADDR_VAR 0 16
33737: PUSH
33738: LD_VAR 0 17
33742: PUSH
33743: LD_INT 1
33745: ARRAY
33746: PPUSH
33747: CALL_OW 250
33751: PPUSH
33752: LD_VAR 0 17
33756: PUSH
33757: LD_INT 1
33759: ARRAY
33760: PPUSH
33761: CALL_OW 254
33765: PPUSH
33766: LD_INT 5
33768: PPUSH
33769: CALL_OW 272
33773: PUSH
33774: LD_VAR 0 17
33778: PUSH
33779: LD_INT 1
33781: ARRAY
33782: PPUSH
33783: CALL_OW 251
33787: PPUSH
33788: LD_VAR 0 17
33792: PUSH
33793: LD_INT 1
33795: ARRAY
33796: PPUSH
33797: CALL_OW 254
33801: PPUSH
33802: LD_INT 5
33804: PPUSH
33805: CALL_OW 273
33809: PUSH
33810: EMPTY
33811: LIST
33812: LIST
33813: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33814: LD_VAR 0 16
33818: PUSH
33819: LD_INT 1
33821: ARRAY
33822: PPUSH
33823: LD_VAR 0 16
33827: PUSH
33828: LD_INT 2
33830: ARRAY
33831: PPUSH
33832: CALL_OW 488
33836: IFFALSE 33867
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33838: LD_VAR 0 13
33842: PPUSH
33843: LD_VAR 0 16
33847: PUSH
33848: LD_INT 1
33850: ARRAY
33851: PPUSH
33852: LD_VAR 0 16
33856: PUSH
33857: LD_INT 2
33859: ARRAY
33860: PPUSH
33861: CALL_OW 111
// continue ;
33865: GO 33357
// end ; end ; r := GetDir ( tmp ) ;
33867: LD_ADDR_VAR 0 15
33871: PUSH
33872: LD_VAR 0 13
33876: PPUSH
33877: CALL_OW 254
33881: ST_TO_ADDR
// if r = 5 then
33882: LD_VAR 0 15
33886: PUSH
33887: LD_INT 5
33889: EQUAL
33890: IFFALSE 33900
// r := 0 ;
33892: LD_ADDR_VAR 0 15
33896: PUSH
33897: LD_INT 0
33899: ST_TO_ADDR
// for j = r to 5 do
33900: LD_ADDR_VAR 0 10
33904: PUSH
33905: DOUBLE
33906: LD_VAR 0 15
33910: DEC
33911: ST_TO_ADDR
33912: LD_INT 5
33914: PUSH
33915: FOR_TO
33916: IFFALSE 34030
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33918: LD_ADDR_VAR 0 11
33922: PUSH
33923: LD_VAR 0 13
33927: PPUSH
33928: CALL_OW 250
33932: PPUSH
33933: LD_VAR 0 10
33937: PPUSH
33938: LD_INT 2
33940: PPUSH
33941: CALL_OW 272
33945: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33946: LD_ADDR_VAR 0 12
33950: PUSH
33951: LD_VAR 0 13
33955: PPUSH
33956: CALL_OW 251
33960: PPUSH
33961: LD_VAR 0 10
33965: PPUSH
33966: LD_INT 2
33968: PPUSH
33969: CALL_OW 273
33973: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33974: LD_VAR 0 11
33978: PPUSH
33979: LD_VAR 0 12
33983: PPUSH
33984: CALL_OW 488
33988: PUSH
33989: LD_VAR 0 11
33993: PPUSH
33994: LD_VAR 0 12
33998: PPUSH
33999: CALL_OW 428
34003: NOT
34004: AND
34005: IFFALSE 34028
// begin ComMoveXY ( tmp , _x , _y ) ;
34007: LD_VAR 0 13
34011: PPUSH
34012: LD_VAR 0 11
34016: PPUSH
34017: LD_VAR 0 12
34021: PPUSH
34022: CALL_OW 111
// break ;
34026: GO 34030
// end ; end ;
34028: GO 33915
34030: POP
34031: POP
// end ; end ;
34032: GO 33357
34034: POP
34035: POP
// end ;
34036: LD_VAR 0 8
34040: RET
// export function BuildingTechInvented ( side , btype ) ; begin
34041: LD_INT 0
34043: PPUSH
// result := true ;
34044: LD_ADDR_VAR 0 3
34048: PUSH
34049: LD_INT 1
34051: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
34052: LD_VAR 0 2
34056: PUSH
34057: LD_INT 24
34059: DOUBLE
34060: EQUAL
34061: IFTRUE 34071
34063: LD_INT 33
34065: DOUBLE
34066: EQUAL
34067: IFTRUE 34071
34069: GO 34096
34071: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
34072: LD_ADDR_VAR 0 3
34076: PUSH
34077: LD_INT 32
34079: PPUSH
34080: LD_VAR 0 1
34084: PPUSH
34085: CALL_OW 321
34089: PUSH
34090: LD_INT 2
34092: EQUAL
34093: ST_TO_ADDR
34094: GO 34416
34096: LD_INT 20
34098: DOUBLE
34099: EQUAL
34100: IFTRUE 34104
34102: GO 34129
34104: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
34105: LD_ADDR_VAR 0 3
34109: PUSH
34110: LD_INT 6
34112: PPUSH
34113: LD_VAR 0 1
34117: PPUSH
34118: CALL_OW 321
34122: PUSH
34123: LD_INT 2
34125: EQUAL
34126: ST_TO_ADDR
34127: GO 34416
34129: LD_INT 22
34131: DOUBLE
34132: EQUAL
34133: IFTRUE 34143
34135: LD_INT 36
34137: DOUBLE
34138: EQUAL
34139: IFTRUE 34143
34141: GO 34168
34143: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
34144: LD_ADDR_VAR 0 3
34148: PUSH
34149: LD_INT 15
34151: PPUSH
34152: LD_VAR 0 1
34156: PPUSH
34157: CALL_OW 321
34161: PUSH
34162: LD_INT 2
34164: EQUAL
34165: ST_TO_ADDR
34166: GO 34416
34168: LD_INT 30
34170: DOUBLE
34171: EQUAL
34172: IFTRUE 34176
34174: GO 34201
34176: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
34177: LD_ADDR_VAR 0 3
34181: PUSH
34182: LD_INT 20
34184: PPUSH
34185: LD_VAR 0 1
34189: PPUSH
34190: CALL_OW 321
34194: PUSH
34195: LD_INT 2
34197: EQUAL
34198: ST_TO_ADDR
34199: GO 34416
34201: LD_INT 28
34203: DOUBLE
34204: EQUAL
34205: IFTRUE 34215
34207: LD_INT 21
34209: DOUBLE
34210: EQUAL
34211: IFTRUE 34215
34213: GO 34240
34215: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
34216: LD_ADDR_VAR 0 3
34220: PUSH
34221: LD_INT 21
34223: PPUSH
34224: LD_VAR 0 1
34228: PPUSH
34229: CALL_OW 321
34233: PUSH
34234: LD_INT 2
34236: EQUAL
34237: ST_TO_ADDR
34238: GO 34416
34240: LD_INT 16
34242: DOUBLE
34243: EQUAL
34244: IFTRUE 34248
34246: GO 34275
34248: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
34249: LD_ADDR_VAR 0 3
34253: PUSH
34254: LD_EXP 94
34258: PPUSH
34259: LD_VAR 0 1
34263: PPUSH
34264: CALL_OW 321
34268: PUSH
34269: LD_INT 2
34271: EQUAL
34272: ST_TO_ADDR
34273: GO 34416
34275: LD_INT 19
34277: DOUBLE
34278: EQUAL
34279: IFTRUE 34289
34281: LD_INT 23
34283: DOUBLE
34284: EQUAL
34285: IFTRUE 34289
34287: GO 34316
34289: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
34290: LD_ADDR_VAR 0 3
34294: PUSH
34295: LD_EXP 93
34299: PPUSH
34300: LD_VAR 0 1
34304: PPUSH
34305: CALL_OW 321
34309: PUSH
34310: LD_INT 2
34312: EQUAL
34313: ST_TO_ADDR
34314: GO 34416
34316: LD_INT 17
34318: DOUBLE
34319: EQUAL
34320: IFTRUE 34324
34322: GO 34349
34324: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
34325: LD_ADDR_VAR 0 3
34329: PUSH
34330: LD_INT 39
34332: PPUSH
34333: LD_VAR 0 1
34337: PPUSH
34338: CALL_OW 321
34342: PUSH
34343: LD_INT 2
34345: EQUAL
34346: ST_TO_ADDR
34347: GO 34416
34349: LD_INT 18
34351: DOUBLE
34352: EQUAL
34353: IFTRUE 34357
34355: GO 34382
34357: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
34358: LD_ADDR_VAR 0 3
34362: PUSH
34363: LD_INT 40
34365: PPUSH
34366: LD_VAR 0 1
34370: PPUSH
34371: CALL_OW 321
34375: PUSH
34376: LD_INT 2
34378: EQUAL
34379: ST_TO_ADDR
34380: GO 34416
34382: LD_INT 27
34384: DOUBLE
34385: EQUAL
34386: IFTRUE 34390
34388: GO 34415
34390: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
34391: LD_ADDR_VAR 0 3
34395: PUSH
34396: LD_INT 35
34398: PPUSH
34399: LD_VAR 0 1
34403: PPUSH
34404: CALL_OW 321
34408: PUSH
34409: LD_INT 2
34411: EQUAL
34412: ST_TO_ADDR
34413: GO 34416
34415: POP
// end ;
34416: LD_VAR 0 3
34420: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
34421: LD_INT 0
34423: PPUSH
34424: PPUSH
34425: PPUSH
34426: PPUSH
34427: PPUSH
34428: PPUSH
34429: PPUSH
34430: PPUSH
34431: PPUSH
34432: PPUSH
34433: PPUSH
// result := false ;
34434: LD_ADDR_VAR 0 6
34438: PUSH
34439: LD_INT 0
34441: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
34442: LD_VAR 0 1
34446: NOT
34447: PUSH
34448: LD_VAR 0 1
34452: PPUSH
34453: CALL_OW 266
34457: PUSH
34458: LD_INT 0
34460: PUSH
34461: LD_INT 1
34463: PUSH
34464: EMPTY
34465: LIST
34466: LIST
34467: IN
34468: NOT
34469: OR
34470: PUSH
34471: LD_VAR 0 2
34475: NOT
34476: OR
34477: PUSH
34478: LD_VAR 0 5
34482: PUSH
34483: LD_INT 0
34485: PUSH
34486: LD_INT 1
34488: PUSH
34489: LD_INT 2
34491: PUSH
34492: LD_INT 3
34494: PUSH
34495: LD_INT 4
34497: PUSH
34498: LD_INT 5
34500: PUSH
34501: EMPTY
34502: LIST
34503: LIST
34504: LIST
34505: LIST
34506: LIST
34507: LIST
34508: IN
34509: NOT
34510: OR
34511: PUSH
34512: LD_VAR 0 3
34516: PPUSH
34517: LD_VAR 0 4
34521: PPUSH
34522: CALL_OW 488
34526: NOT
34527: OR
34528: IFFALSE 34532
// exit ;
34530: GO 35268
// side := GetSide ( depot ) ;
34532: LD_ADDR_VAR 0 9
34536: PUSH
34537: LD_VAR 0 1
34541: PPUSH
34542: CALL_OW 255
34546: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
34547: LD_VAR 0 9
34551: PPUSH
34552: LD_VAR 0 2
34556: PPUSH
34557: CALL 34041 0 2
34561: NOT
34562: IFFALSE 34566
// exit ;
34564: GO 35268
// pom := GetBase ( depot ) ;
34566: LD_ADDR_VAR 0 10
34570: PUSH
34571: LD_VAR 0 1
34575: PPUSH
34576: CALL_OW 274
34580: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
34581: LD_ADDR_VAR 0 11
34585: PUSH
34586: LD_VAR 0 2
34590: PPUSH
34591: LD_VAR 0 1
34595: PPUSH
34596: CALL_OW 248
34600: PPUSH
34601: CALL_OW 450
34605: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
34606: LD_VAR 0 10
34610: PPUSH
34611: LD_INT 1
34613: PPUSH
34614: CALL_OW 275
34618: PUSH
34619: LD_VAR 0 11
34623: PUSH
34624: LD_INT 1
34626: ARRAY
34627: GREATEREQUAL
34628: PUSH
34629: LD_VAR 0 10
34633: PPUSH
34634: LD_INT 2
34636: PPUSH
34637: CALL_OW 275
34641: PUSH
34642: LD_VAR 0 11
34646: PUSH
34647: LD_INT 2
34649: ARRAY
34650: GREATEREQUAL
34651: AND
34652: PUSH
34653: LD_VAR 0 10
34657: PPUSH
34658: LD_INT 3
34660: PPUSH
34661: CALL_OW 275
34665: PUSH
34666: LD_VAR 0 11
34670: PUSH
34671: LD_INT 3
34673: ARRAY
34674: GREATEREQUAL
34675: AND
34676: NOT
34677: IFFALSE 34681
// exit ;
34679: GO 35268
// if GetBType ( depot ) = b_depot then
34681: LD_VAR 0 1
34685: PPUSH
34686: CALL_OW 266
34690: PUSH
34691: LD_INT 0
34693: EQUAL
34694: IFFALSE 34706
// dist := 28 else
34696: LD_ADDR_VAR 0 14
34700: PUSH
34701: LD_INT 28
34703: ST_TO_ADDR
34704: GO 34714
// dist := 36 ;
34706: LD_ADDR_VAR 0 14
34710: PUSH
34711: LD_INT 36
34713: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
34714: LD_VAR 0 1
34718: PPUSH
34719: LD_VAR 0 3
34723: PPUSH
34724: LD_VAR 0 4
34728: PPUSH
34729: CALL_OW 297
34733: PUSH
34734: LD_VAR 0 14
34738: GREATER
34739: IFFALSE 34743
// exit ;
34741: GO 35268
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
34743: LD_ADDR_VAR 0 12
34747: PUSH
34748: LD_VAR 0 2
34752: PPUSH
34753: LD_VAR 0 3
34757: PPUSH
34758: LD_VAR 0 4
34762: PPUSH
34763: LD_VAR 0 5
34767: PPUSH
34768: LD_VAR 0 1
34772: PPUSH
34773: CALL_OW 248
34777: PPUSH
34778: LD_INT 0
34780: PPUSH
34781: CALL 35273 0 6
34785: ST_TO_ADDR
// if not hexes then
34786: LD_VAR 0 12
34790: NOT
34791: IFFALSE 34795
// exit ;
34793: GO 35268
// hex := GetHexInfo ( x , y ) ;
34795: LD_ADDR_VAR 0 15
34799: PUSH
34800: LD_VAR 0 3
34804: PPUSH
34805: LD_VAR 0 4
34809: PPUSH
34810: CALL_OW 546
34814: ST_TO_ADDR
// if hex [ 1 ] then
34815: LD_VAR 0 15
34819: PUSH
34820: LD_INT 1
34822: ARRAY
34823: IFFALSE 34827
// exit ;
34825: GO 35268
// height := hex [ 2 ] ;
34827: LD_ADDR_VAR 0 13
34831: PUSH
34832: LD_VAR 0 15
34836: PUSH
34837: LD_INT 2
34839: ARRAY
34840: ST_TO_ADDR
// for i = 1 to hexes do
34841: LD_ADDR_VAR 0 7
34845: PUSH
34846: DOUBLE
34847: LD_INT 1
34849: DEC
34850: ST_TO_ADDR
34851: LD_VAR 0 12
34855: PUSH
34856: FOR_TO
34857: IFFALSE 35187
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
34859: LD_VAR 0 12
34863: PUSH
34864: LD_VAR 0 7
34868: ARRAY
34869: PUSH
34870: LD_INT 1
34872: ARRAY
34873: PPUSH
34874: LD_VAR 0 12
34878: PUSH
34879: LD_VAR 0 7
34883: ARRAY
34884: PUSH
34885: LD_INT 2
34887: ARRAY
34888: PPUSH
34889: CALL_OW 488
34893: NOT
34894: PUSH
34895: LD_VAR 0 12
34899: PUSH
34900: LD_VAR 0 7
34904: ARRAY
34905: PUSH
34906: LD_INT 1
34908: ARRAY
34909: PPUSH
34910: LD_VAR 0 12
34914: PUSH
34915: LD_VAR 0 7
34919: ARRAY
34920: PUSH
34921: LD_INT 2
34923: ARRAY
34924: PPUSH
34925: CALL_OW 428
34929: PUSH
34930: LD_INT 0
34932: GREATER
34933: OR
34934: PUSH
34935: LD_VAR 0 12
34939: PUSH
34940: LD_VAR 0 7
34944: ARRAY
34945: PUSH
34946: LD_INT 1
34948: ARRAY
34949: PPUSH
34950: LD_VAR 0 12
34954: PUSH
34955: LD_VAR 0 7
34959: ARRAY
34960: PUSH
34961: LD_INT 2
34963: ARRAY
34964: PPUSH
34965: CALL_OW 351
34969: OR
34970: IFFALSE 34976
// exit ;
34972: POP
34973: POP
34974: GO 35268
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34976: LD_ADDR_VAR 0 8
34980: PUSH
34981: LD_VAR 0 12
34985: PUSH
34986: LD_VAR 0 7
34990: ARRAY
34991: PUSH
34992: LD_INT 1
34994: ARRAY
34995: PPUSH
34996: LD_VAR 0 12
35000: PUSH
35001: LD_VAR 0 7
35005: ARRAY
35006: PUSH
35007: LD_INT 2
35009: ARRAY
35010: PPUSH
35011: CALL_OW 546
35015: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
35016: LD_VAR 0 8
35020: PUSH
35021: LD_INT 1
35023: ARRAY
35024: PUSH
35025: LD_VAR 0 8
35029: PUSH
35030: LD_INT 2
35032: ARRAY
35033: PUSH
35034: LD_VAR 0 13
35038: PUSH
35039: LD_INT 2
35041: PLUS
35042: GREATER
35043: OR
35044: PUSH
35045: LD_VAR 0 8
35049: PUSH
35050: LD_INT 2
35052: ARRAY
35053: PUSH
35054: LD_VAR 0 13
35058: PUSH
35059: LD_INT 2
35061: MINUS
35062: LESS
35063: OR
35064: PUSH
35065: LD_VAR 0 8
35069: PUSH
35070: LD_INT 3
35072: ARRAY
35073: PUSH
35074: LD_INT 0
35076: PUSH
35077: LD_INT 8
35079: PUSH
35080: LD_INT 9
35082: PUSH
35083: LD_INT 10
35085: PUSH
35086: LD_INT 11
35088: PUSH
35089: LD_INT 12
35091: PUSH
35092: LD_INT 13
35094: PUSH
35095: LD_INT 16
35097: PUSH
35098: LD_INT 17
35100: PUSH
35101: LD_INT 18
35103: PUSH
35104: LD_INT 19
35106: PUSH
35107: LD_INT 20
35109: PUSH
35110: LD_INT 21
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: LIST
35117: LIST
35118: LIST
35119: LIST
35120: LIST
35121: LIST
35122: LIST
35123: LIST
35124: LIST
35125: LIST
35126: LIST
35127: IN
35128: NOT
35129: OR
35130: PUSH
35131: LD_VAR 0 8
35135: PUSH
35136: LD_INT 5
35138: ARRAY
35139: NOT
35140: OR
35141: PUSH
35142: LD_VAR 0 8
35146: PUSH
35147: LD_INT 6
35149: ARRAY
35150: PUSH
35151: LD_INT 1
35153: PUSH
35154: LD_INT 2
35156: PUSH
35157: LD_INT 7
35159: PUSH
35160: LD_INT 9
35162: PUSH
35163: LD_INT 10
35165: PUSH
35166: LD_INT 11
35168: PUSH
35169: EMPTY
35170: LIST
35171: LIST
35172: LIST
35173: LIST
35174: LIST
35175: LIST
35176: IN
35177: NOT
35178: OR
35179: IFFALSE 35185
// exit ;
35181: POP
35182: POP
35183: GO 35268
// end ;
35185: GO 34856
35187: POP
35188: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
35189: LD_VAR 0 9
35193: PPUSH
35194: LD_VAR 0 3
35198: PPUSH
35199: LD_VAR 0 4
35203: PPUSH
35204: LD_INT 20
35206: PPUSH
35207: CALL 27214 0 4
35211: PUSH
35212: LD_INT 4
35214: ARRAY
35215: IFFALSE 35219
// exit ;
35217: GO 35268
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
35219: LD_VAR 0 2
35223: PUSH
35224: LD_INT 29
35226: PUSH
35227: LD_INT 30
35229: PUSH
35230: EMPTY
35231: LIST
35232: LIST
35233: IN
35234: PUSH
35235: LD_VAR 0 3
35239: PPUSH
35240: LD_VAR 0 4
35244: PPUSH
35245: LD_VAR 0 9
35249: PPUSH
35250: CALL_OW 440
35254: NOT
35255: AND
35256: IFFALSE 35260
// exit ;
35258: GO 35268
// result := true ;
35260: LD_ADDR_VAR 0 6
35264: PUSH
35265: LD_INT 1
35267: ST_TO_ADDR
// end ;
35268: LD_VAR 0 6
35272: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
35273: LD_INT 0
35275: PPUSH
35276: PPUSH
35277: PPUSH
35278: PPUSH
35279: PPUSH
35280: PPUSH
35281: PPUSH
35282: PPUSH
35283: PPUSH
35284: PPUSH
35285: PPUSH
35286: PPUSH
35287: PPUSH
35288: PPUSH
35289: PPUSH
35290: PPUSH
35291: PPUSH
35292: PPUSH
35293: PPUSH
35294: PPUSH
35295: PPUSH
35296: PPUSH
35297: PPUSH
35298: PPUSH
35299: PPUSH
35300: PPUSH
35301: PPUSH
35302: PPUSH
35303: PPUSH
35304: PPUSH
35305: PPUSH
35306: PPUSH
35307: PPUSH
35308: PPUSH
35309: PPUSH
35310: PPUSH
35311: PPUSH
35312: PPUSH
35313: PPUSH
35314: PPUSH
35315: PPUSH
35316: PPUSH
35317: PPUSH
35318: PPUSH
35319: PPUSH
35320: PPUSH
35321: PPUSH
35322: PPUSH
35323: PPUSH
35324: PPUSH
35325: PPUSH
35326: PPUSH
35327: PPUSH
35328: PPUSH
35329: PPUSH
35330: PPUSH
35331: PPUSH
35332: PPUSH
// result = [ ] ;
35333: LD_ADDR_VAR 0 7
35337: PUSH
35338: EMPTY
35339: ST_TO_ADDR
// temp_list = [ ] ;
35340: LD_ADDR_VAR 0 9
35344: PUSH
35345: EMPTY
35346: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
35347: LD_VAR 0 4
35351: PUSH
35352: LD_INT 0
35354: PUSH
35355: LD_INT 1
35357: PUSH
35358: LD_INT 2
35360: PUSH
35361: LD_INT 3
35363: PUSH
35364: LD_INT 4
35366: PUSH
35367: LD_INT 5
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: LIST
35374: LIST
35375: LIST
35376: LIST
35377: IN
35378: NOT
35379: PUSH
35380: LD_VAR 0 1
35384: PUSH
35385: LD_INT 0
35387: PUSH
35388: LD_INT 1
35390: PUSH
35391: EMPTY
35392: LIST
35393: LIST
35394: IN
35395: PUSH
35396: LD_VAR 0 5
35400: PUSH
35401: LD_INT 1
35403: PUSH
35404: LD_INT 2
35406: PUSH
35407: LD_INT 3
35409: PUSH
35410: EMPTY
35411: LIST
35412: LIST
35413: LIST
35414: IN
35415: NOT
35416: AND
35417: OR
35418: IFFALSE 35422
// exit ;
35420: GO 53813
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
35422: LD_VAR 0 1
35426: PUSH
35427: LD_INT 6
35429: PUSH
35430: LD_INT 7
35432: PUSH
35433: LD_INT 8
35435: PUSH
35436: LD_INT 13
35438: PUSH
35439: LD_INT 12
35441: PUSH
35442: LD_INT 15
35444: PUSH
35445: LD_INT 11
35447: PUSH
35448: LD_INT 14
35450: PUSH
35451: LD_INT 10
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: LIST
35458: LIST
35459: LIST
35460: LIST
35461: LIST
35462: LIST
35463: LIST
35464: IN
35465: IFFALSE 35475
// btype = b_lab ;
35467: LD_ADDR_VAR 0 1
35471: PUSH
35472: LD_INT 6
35474: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
35475: LD_VAR 0 6
35479: PUSH
35480: LD_INT 0
35482: PUSH
35483: LD_INT 1
35485: PUSH
35486: LD_INT 2
35488: PUSH
35489: EMPTY
35490: LIST
35491: LIST
35492: LIST
35493: IN
35494: NOT
35495: PUSH
35496: LD_VAR 0 1
35500: PUSH
35501: LD_INT 0
35503: PUSH
35504: LD_INT 1
35506: PUSH
35507: LD_INT 2
35509: PUSH
35510: LD_INT 3
35512: PUSH
35513: LD_INT 6
35515: PUSH
35516: LD_INT 36
35518: PUSH
35519: LD_INT 4
35521: PUSH
35522: LD_INT 5
35524: PUSH
35525: LD_INT 31
35527: PUSH
35528: LD_INT 32
35530: PUSH
35531: LD_INT 33
35533: PUSH
35534: EMPTY
35535: LIST
35536: LIST
35537: LIST
35538: LIST
35539: LIST
35540: LIST
35541: LIST
35542: LIST
35543: LIST
35544: LIST
35545: LIST
35546: IN
35547: NOT
35548: PUSH
35549: LD_VAR 0 6
35553: PUSH
35554: LD_INT 1
35556: EQUAL
35557: AND
35558: OR
35559: PUSH
35560: LD_VAR 0 1
35564: PUSH
35565: LD_INT 2
35567: PUSH
35568: LD_INT 3
35570: PUSH
35571: EMPTY
35572: LIST
35573: LIST
35574: IN
35575: NOT
35576: PUSH
35577: LD_VAR 0 6
35581: PUSH
35582: LD_INT 2
35584: EQUAL
35585: AND
35586: OR
35587: IFFALSE 35597
// mode = 0 ;
35589: LD_ADDR_VAR 0 6
35593: PUSH
35594: LD_INT 0
35596: ST_TO_ADDR
// case mode of 0 :
35597: LD_VAR 0 6
35601: PUSH
35602: LD_INT 0
35604: DOUBLE
35605: EQUAL
35606: IFTRUE 35610
35608: GO 47063
35610: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35611: LD_ADDR_VAR 0 11
35615: PUSH
35616: LD_INT 0
35618: PUSH
35619: LD_INT 0
35621: PUSH
35622: EMPTY
35623: LIST
35624: LIST
35625: PUSH
35626: LD_INT 0
35628: PUSH
35629: LD_INT 1
35631: NEG
35632: PUSH
35633: EMPTY
35634: LIST
35635: LIST
35636: PUSH
35637: LD_INT 1
35639: PUSH
35640: LD_INT 0
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: PUSH
35647: LD_INT 1
35649: PUSH
35650: LD_INT 1
35652: PUSH
35653: EMPTY
35654: LIST
35655: LIST
35656: PUSH
35657: LD_INT 0
35659: PUSH
35660: LD_INT 1
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: PUSH
35667: LD_INT 1
35669: NEG
35670: PUSH
35671: LD_INT 0
35673: PUSH
35674: EMPTY
35675: LIST
35676: LIST
35677: PUSH
35678: LD_INT 1
35680: NEG
35681: PUSH
35682: LD_INT 1
35684: NEG
35685: PUSH
35686: EMPTY
35687: LIST
35688: LIST
35689: PUSH
35690: LD_INT 1
35692: NEG
35693: PUSH
35694: LD_INT 2
35696: NEG
35697: PUSH
35698: EMPTY
35699: LIST
35700: LIST
35701: PUSH
35702: LD_INT 0
35704: PUSH
35705: LD_INT 2
35707: NEG
35708: PUSH
35709: EMPTY
35710: LIST
35711: LIST
35712: PUSH
35713: LD_INT 1
35715: PUSH
35716: LD_INT 1
35718: NEG
35719: PUSH
35720: EMPTY
35721: LIST
35722: LIST
35723: PUSH
35724: LD_INT 1
35726: PUSH
35727: LD_INT 2
35729: PUSH
35730: EMPTY
35731: LIST
35732: LIST
35733: PUSH
35734: LD_INT 0
35736: PUSH
35737: LD_INT 2
35739: PUSH
35740: EMPTY
35741: LIST
35742: LIST
35743: PUSH
35744: LD_INT 1
35746: NEG
35747: PUSH
35748: LD_INT 1
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PUSH
35755: LD_INT 1
35757: PUSH
35758: LD_INT 3
35760: PUSH
35761: EMPTY
35762: LIST
35763: LIST
35764: PUSH
35765: LD_INT 0
35767: PUSH
35768: LD_INT 3
35770: PUSH
35771: EMPTY
35772: LIST
35773: LIST
35774: PUSH
35775: LD_INT 1
35777: NEG
35778: PUSH
35779: LD_INT 2
35781: PUSH
35782: EMPTY
35783: LIST
35784: LIST
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: LIST
35790: LIST
35791: LIST
35792: LIST
35793: LIST
35794: LIST
35795: LIST
35796: LIST
35797: LIST
35798: LIST
35799: LIST
35800: LIST
35801: LIST
35802: LIST
35803: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35804: LD_ADDR_VAR 0 12
35808: PUSH
35809: LD_INT 0
35811: PUSH
35812: LD_INT 0
35814: PUSH
35815: EMPTY
35816: LIST
35817: LIST
35818: PUSH
35819: LD_INT 0
35821: PUSH
35822: LD_INT 1
35824: NEG
35825: PUSH
35826: EMPTY
35827: LIST
35828: LIST
35829: PUSH
35830: LD_INT 1
35832: PUSH
35833: LD_INT 0
35835: PUSH
35836: EMPTY
35837: LIST
35838: LIST
35839: PUSH
35840: LD_INT 1
35842: PUSH
35843: LD_INT 1
35845: PUSH
35846: EMPTY
35847: LIST
35848: LIST
35849: PUSH
35850: LD_INT 0
35852: PUSH
35853: LD_INT 1
35855: PUSH
35856: EMPTY
35857: LIST
35858: LIST
35859: PUSH
35860: LD_INT 1
35862: NEG
35863: PUSH
35864: LD_INT 0
35866: PUSH
35867: EMPTY
35868: LIST
35869: LIST
35870: PUSH
35871: LD_INT 1
35873: NEG
35874: PUSH
35875: LD_INT 1
35877: NEG
35878: PUSH
35879: EMPTY
35880: LIST
35881: LIST
35882: PUSH
35883: LD_INT 1
35885: PUSH
35886: LD_INT 1
35888: NEG
35889: PUSH
35890: EMPTY
35891: LIST
35892: LIST
35893: PUSH
35894: LD_INT 2
35896: PUSH
35897: LD_INT 0
35899: PUSH
35900: EMPTY
35901: LIST
35902: LIST
35903: PUSH
35904: LD_INT 2
35906: PUSH
35907: LD_INT 1
35909: PUSH
35910: EMPTY
35911: LIST
35912: LIST
35913: PUSH
35914: LD_INT 1
35916: NEG
35917: PUSH
35918: LD_INT 1
35920: PUSH
35921: EMPTY
35922: LIST
35923: LIST
35924: PUSH
35925: LD_INT 2
35927: NEG
35928: PUSH
35929: LD_INT 0
35931: PUSH
35932: EMPTY
35933: LIST
35934: LIST
35935: PUSH
35936: LD_INT 2
35938: NEG
35939: PUSH
35940: LD_INT 1
35942: NEG
35943: PUSH
35944: EMPTY
35945: LIST
35946: LIST
35947: PUSH
35948: LD_INT 2
35950: NEG
35951: PUSH
35952: LD_INT 1
35954: PUSH
35955: EMPTY
35956: LIST
35957: LIST
35958: PUSH
35959: LD_INT 3
35961: NEG
35962: PUSH
35963: LD_INT 0
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: PUSH
35970: LD_INT 3
35972: NEG
35973: PUSH
35974: LD_INT 1
35976: NEG
35977: PUSH
35978: EMPTY
35979: LIST
35980: LIST
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: LIST
35986: LIST
35987: LIST
35988: LIST
35989: LIST
35990: LIST
35991: LIST
35992: LIST
35993: LIST
35994: LIST
35995: LIST
35996: LIST
35997: LIST
35998: LIST
35999: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36000: LD_ADDR_VAR 0 13
36004: PUSH
36005: LD_INT 0
36007: PUSH
36008: LD_INT 0
36010: PUSH
36011: EMPTY
36012: LIST
36013: LIST
36014: PUSH
36015: LD_INT 0
36017: PUSH
36018: LD_INT 1
36020: NEG
36021: PUSH
36022: EMPTY
36023: LIST
36024: LIST
36025: PUSH
36026: LD_INT 1
36028: PUSH
36029: LD_INT 0
36031: PUSH
36032: EMPTY
36033: LIST
36034: LIST
36035: PUSH
36036: LD_INT 1
36038: PUSH
36039: LD_INT 1
36041: PUSH
36042: EMPTY
36043: LIST
36044: LIST
36045: PUSH
36046: LD_INT 0
36048: PUSH
36049: LD_INT 1
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: PUSH
36056: LD_INT 1
36058: NEG
36059: PUSH
36060: LD_INT 0
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: PUSH
36067: LD_INT 1
36069: NEG
36070: PUSH
36071: LD_INT 1
36073: NEG
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: PUSH
36079: LD_INT 1
36081: NEG
36082: PUSH
36083: LD_INT 2
36085: NEG
36086: PUSH
36087: EMPTY
36088: LIST
36089: LIST
36090: PUSH
36091: LD_INT 2
36093: PUSH
36094: LD_INT 1
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: PUSH
36101: LD_INT 2
36103: PUSH
36104: LD_INT 2
36106: PUSH
36107: EMPTY
36108: LIST
36109: LIST
36110: PUSH
36111: LD_INT 1
36113: PUSH
36114: LD_INT 2
36116: PUSH
36117: EMPTY
36118: LIST
36119: LIST
36120: PUSH
36121: LD_INT 2
36123: NEG
36124: PUSH
36125: LD_INT 1
36127: NEG
36128: PUSH
36129: EMPTY
36130: LIST
36131: LIST
36132: PUSH
36133: LD_INT 2
36135: NEG
36136: PUSH
36137: LD_INT 2
36139: NEG
36140: PUSH
36141: EMPTY
36142: LIST
36143: LIST
36144: PUSH
36145: LD_INT 2
36147: NEG
36148: PUSH
36149: LD_INT 3
36151: NEG
36152: PUSH
36153: EMPTY
36154: LIST
36155: LIST
36156: PUSH
36157: LD_INT 3
36159: NEG
36160: PUSH
36161: LD_INT 2
36163: NEG
36164: PUSH
36165: EMPTY
36166: LIST
36167: LIST
36168: PUSH
36169: LD_INT 3
36171: NEG
36172: PUSH
36173: LD_INT 3
36175: NEG
36176: PUSH
36177: EMPTY
36178: LIST
36179: LIST
36180: PUSH
36181: EMPTY
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: LIST
36194: LIST
36195: LIST
36196: LIST
36197: LIST
36198: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
36199: LD_ADDR_VAR 0 14
36203: PUSH
36204: LD_INT 0
36206: PUSH
36207: LD_INT 0
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: LD_INT 0
36216: PUSH
36217: LD_INT 1
36219: NEG
36220: PUSH
36221: EMPTY
36222: LIST
36223: LIST
36224: PUSH
36225: LD_INT 1
36227: PUSH
36228: LD_INT 0
36230: PUSH
36231: EMPTY
36232: LIST
36233: LIST
36234: PUSH
36235: LD_INT 1
36237: PUSH
36238: LD_INT 1
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: PUSH
36245: LD_INT 0
36247: PUSH
36248: LD_INT 1
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: PUSH
36255: LD_INT 1
36257: NEG
36258: PUSH
36259: LD_INT 0
36261: PUSH
36262: EMPTY
36263: LIST
36264: LIST
36265: PUSH
36266: LD_INT 1
36268: NEG
36269: PUSH
36270: LD_INT 1
36272: NEG
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: PUSH
36278: LD_INT 1
36280: NEG
36281: PUSH
36282: LD_INT 2
36284: NEG
36285: PUSH
36286: EMPTY
36287: LIST
36288: LIST
36289: PUSH
36290: LD_INT 0
36292: PUSH
36293: LD_INT 2
36295: NEG
36296: PUSH
36297: EMPTY
36298: LIST
36299: LIST
36300: PUSH
36301: LD_INT 1
36303: PUSH
36304: LD_INT 1
36306: NEG
36307: PUSH
36308: EMPTY
36309: LIST
36310: LIST
36311: PUSH
36312: LD_INT 1
36314: PUSH
36315: LD_INT 2
36317: PUSH
36318: EMPTY
36319: LIST
36320: LIST
36321: PUSH
36322: LD_INT 0
36324: PUSH
36325: LD_INT 2
36327: PUSH
36328: EMPTY
36329: LIST
36330: LIST
36331: PUSH
36332: LD_INT 1
36334: NEG
36335: PUSH
36336: LD_INT 1
36338: PUSH
36339: EMPTY
36340: LIST
36341: LIST
36342: PUSH
36343: LD_INT 1
36345: NEG
36346: PUSH
36347: LD_INT 3
36349: NEG
36350: PUSH
36351: EMPTY
36352: LIST
36353: LIST
36354: PUSH
36355: LD_INT 0
36357: PUSH
36358: LD_INT 3
36360: NEG
36361: PUSH
36362: EMPTY
36363: LIST
36364: LIST
36365: PUSH
36366: LD_INT 1
36368: PUSH
36369: LD_INT 2
36371: NEG
36372: PUSH
36373: EMPTY
36374: LIST
36375: LIST
36376: PUSH
36377: EMPTY
36378: LIST
36379: LIST
36380: LIST
36381: LIST
36382: LIST
36383: LIST
36384: LIST
36385: LIST
36386: LIST
36387: LIST
36388: LIST
36389: LIST
36390: LIST
36391: LIST
36392: LIST
36393: LIST
36394: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
36395: LD_ADDR_VAR 0 15
36399: PUSH
36400: LD_INT 0
36402: PUSH
36403: LD_INT 0
36405: PUSH
36406: EMPTY
36407: LIST
36408: LIST
36409: PUSH
36410: LD_INT 0
36412: PUSH
36413: LD_INT 1
36415: NEG
36416: PUSH
36417: EMPTY
36418: LIST
36419: LIST
36420: PUSH
36421: LD_INT 1
36423: PUSH
36424: LD_INT 0
36426: PUSH
36427: EMPTY
36428: LIST
36429: LIST
36430: PUSH
36431: LD_INT 1
36433: PUSH
36434: LD_INT 1
36436: PUSH
36437: EMPTY
36438: LIST
36439: LIST
36440: PUSH
36441: LD_INT 0
36443: PUSH
36444: LD_INT 1
36446: PUSH
36447: EMPTY
36448: LIST
36449: LIST
36450: PUSH
36451: LD_INT 1
36453: NEG
36454: PUSH
36455: LD_INT 0
36457: PUSH
36458: EMPTY
36459: LIST
36460: LIST
36461: PUSH
36462: LD_INT 1
36464: NEG
36465: PUSH
36466: LD_INT 1
36468: NEG
36469: PUSH
36470: EMPTY
36471: LIST
36472: LIST
36473: PUSH
36474: LD_INT 1
36476: PUSH
36477: LD_INT 1
36479: NEG
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: LD_INT 2
36487: PUSH
36488: LD_INT 0
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: PUSH
36495: LD_INT 2
36497: PUSH
36498: LD_INT 1
36500: PUSH
36501: EMPTY
36502: LIST
36503: LIST
36504: PUSH
36505: LD_INT 1
36507: NEG
36508: PUSH
36509: LD_INT 1
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PUSH
36516: LD_INT 2
36518: NEG
36519: PUSH
36520: LD_INT 0
36522: PUSH
36523: EMPTY
36524: LIST
36525: LIST
36526: PUSH
36527: LD_INT 2
36529: NEG
36530: PUSH
36531: LD_INT 1
36533: NEG
36534: PUSH
36535: EMPTY
36536: LIST
36537: LIST
36538: PUSH
36539: LD_INT 2
36541: PUSH
36542: LD_INT 1
36544: NEG
36545: PUSH
36546: EMPTY
36547: LIST
36548: LIST
36549: PUSH
36550: LD_INT 3
36552: PUSH
36553: LD_INT 0
36555: PUSH
36556: EMPTY
36557: LIST
36558: LIST
36559: PUSH
36560: LD_INT 3
36562: PUSH
36563: LD_INT 1
36565: PUSH
36566: EMPTY
36567: LIST
36568: LIST
36569: PUSH
36570: EMPTY
36571: LIST
36572: LIST
36573: LIST
36574: LIST
36575: LIST
36576: LIST
36577: LIST
36578: LIST
36579: LIST
36580: LIST
36581: LIST
36582: LIST
36583: LIST
36584: LIST
36585: LIST
36586: LIST
36587: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
36588: LD_ADDR_VAR 0 16
36592: PUSH
36593: LD_INT 0
36595: PUSH
36596: LD_INT 0
36598: PUSH
36599: EMPTY
36600: LIST
36601: LIST
36602: PUSH
36603: LD_INT 0
36605: PUSH
36606: LD_INT 1
36608: NEG
36609: PUSH
36610: EMPTY
36611: LIST
36612: LIST
36613: PUSH
36614: LD_INT 1
36616: PUSH
36617: LD_INT 0
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PUSH
36624: LD_INT 1
36626: PUSH
36627: LD_INT 1
36629: PUSH
36630: EMPTY
36631: LIST
36632: LIST
36633: PUSH
36634: LD_INT 0
36636: PUSH
36637: LD_INT 1
36639: PUSH
36640: EMPTY
36641: LIST
36642: LIST
36643: PUSH
36644: LD_INT 1
36646: NEG
36647: PUSH
36648: LD_INT 0
36650: PUSH
36651: EMPTY
36652: LIST
36653: LIST
36654: PUSH
36655: LD_INT 1
36657: NEG
36658: PUSH
36659: LD_INT 1
36661: NEG
36662: PUSH
36663: EMPTY
36664: LIST
36665: LIST
36666: PUSH
36667: LD_INT 1
36669: NEG
36670: PUSH
36671: LD_INT 2
36673: NEG
36674: PUSH
36675: EMPTY
36676: LIST
36677: LIST
36678: PUSH
36679: LD_INT 2
36681: PUSH
36682: LD_INT 1
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: PUSH
36689: LD_INT 2
36691: PUSH
36692: LD_INT 2
36694: PUSH
36695: EMPTY
36696: LIST
36697: LIST
36698: PUSH
36699: LD_INT 1
36701: PUSH
36702: LD_INT 2
36704: PUSH
36705: EMPTY
36706: LIST
36707: LIST
36708: PUSH
36709: LD_INT 2
36711: NEG
36712: PUSH
36713: LD_INT 1
36715: NEG
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: PUSH
36721: LD_INT 2
36723: NEG
36724: PUSH
36725: LD_INT 2
36727: NEG
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: PUSH
36733: LD_INT 3
36735: PUSH
36736: LD_INT 2
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: PUSH
36743: LD_INT 3
36745: PUSH
36746: LD_INT 3
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: PUSH
36753: LD_INT 2
36755: PUSH
36756: LD_INT 3
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: PUSH
36763: EMPTY
36764: LIST
36765: LIST
36766: LIST
36767: LIST
36768: LIST
36769: LIST
36770: LIST
36771: LIST
36772: LIST
36773: LIST
36774: LIST
36775: LIST
36776: LIST
36777: LIST
36778: LIST
36779: LIST
36780: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36781: LD_ADDR_VAR 0 17
36785: PUSH
36786: LD_INT 0
36788: PUSH
36789: LD_INT 0
36791: PUSH
36792: EMPTY
36793: LIST
36794: LIST
36795: PUSH
36796: LD_INT 0
36798: PUSH
36799: LD_INT 1
36801: NEG
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: PUSH
36807: LD_INT 1
36809: PUSH
36810: LD_INT 0
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: PUSH
36817: LD_INT 1
36819: PUSH
36820: LD_INT 1
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: PUSH
36827: LD_INT 0
36829: PUSH
36830: LD_INT 1
36832: PUSH
36833: EMPTY
36834: LIST
36835: LIST
36836: PUSH
36837: LD_INT 1
36839: NEG
36840: PUSH
36841: LD_INT 0
36843: PUSH
36844: EMPTY
36845: LIST
36846: LIST
36847: PUSH
36848: LD_INT 1
36850: NEG
36851: PUSH
36852: LD_INT 1
36854: NEG
36855: PUSH
36856: EMPTY
36857: LIST
36858: LIST
36859: PUSH
36860: LD_INT 1
36862: NEG
36863: PUSH
36864: LD_INT 2
36866: NEG
36867: PUSH
36868: EMPTY
36869: LIST
36870: LIST
36871: PUSH
36872: LD_INT 0
36874: PUSH
36875: LD_INT 2
36877: NEG
36878: PUSH
36879: EMPTY
36880: LIST
36881: LIST
36882: PUSH
36883: LD_INT 1
36885: PUSH
36886: LD_INT 1
36888: NEG
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: PUSH
36894: LD_INT 2
36896: PUSH
36897: LD_INT 0
36899: PUSH
36900: EMPTY
36901: LIST
36902: LIST
36903: PUSH
36904: LD_INT 2
36906: PUSH
36907: LD_INT 1
36909: PUSH
36910: EMPTY
36911: LIST
36912: LIST
36913: PUSH
36914: LD_INT 2
36916: PUSH
36917: LD_INT 2
36919: PUSH
36920: EMPTY
36921: LIST
36922: LIST
36923: PUSH
36924: LD_INT 1
36926: PUSH
36927: LD_INT 2
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: PUSH
36934: LD_INT 0
36936: PUSH
36937: LD_INT 2
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: PUSH
36944: LD_INT 1
36946: NEG
36947: PUSH
36948: LD_INT 1
36950: PUSH
36951: EMPTY
36952: LIST
36953: LIST
36954: PUSH
36955: LD_INT 2
36957: NEG
36958: PUSH
36959: LD_INT 0
36961: PUSH
36962: EMPTY
36963: LIST
36964: LIST
36965: PUSH
36966: LD_INT 2
36968: NEG
36969: PUSH
36970: LD_INT 1
36972: NEG
36973: PUSH
36974: EMPTY
36975: LIST
36976: LIST
36977: PUSH
36978: LD_INT 2
36980: NEG
36981: PUSH
36982: LD_INT 2
36984: NEG
36985: PUSH
36986: EMPTY
36987: LIST
36988: LIST
36989: PUSH
36990: EMPTY
36991: LIST
36992: LIST
36993: LIST
36994: LIST
36995: LIST
36996: LIST
36997: LIST
36998: LIST
36999: LIST
37000: LIST
37001: LIST
37002: LIST
37003: LIST
37004: LIST
37005: LIST
37006: LIST
37007: LIST
37008: LIST
37009: LIST
37010: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37011: LD_ADDR_VAR 0 18
37015: PUSH
37016: LD_INT 0
37018: PUSH
37019: LD_INT 0
37021: PUSH
37022: EMPTY
37023: LIST
37024: LIST
37025: PUSH
37026: LD_INT 0
37028: PUSH
37029: LD_INT 1
37031: NEG
37032: PUSH
37033: EMPTY
37034: LIST
37035: LIST
37036: PUSH
37037: LD_INT 1
37039: PUSH
37040: LD_INT 0
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: PUSH
37047: LD_INT 1
37049: PUSH
37050: LD_INT 1
37052: PUSH
37053: EMPTY
37054: LIST
37055: LIST
37056: PUSH
37057: LD_INT 0
37059: PUSH
37060: LD_INT 1
37062: PUSH
37063: EMPTY
37064: LIST
37065: LIST
37066: PUSH
37067: LD_INT 1
37069: NEG
37070: PUSH
37071: LD_INT 0
37073: PUSH
37074: EMPTY
37075: LIST
37076: LIST
37077: PUSH
37078: LD_INT 1
37080: NEG
37081: PUSH
37082: LD_INT 1
37084: NEG
37085: PUSH
37086: EMPTY
37087: LIST
37088: LIST
37089: PUSH
37090: LD_INT 1
37092: NEG
37093: PUSH
37094: LD_INT 2
37096: NEG
37097: PUSH
37098: EMPTY
37099: LIST
37100: LIST
37101: PUSH
37102: LD_INT 0
37104: PUSH
37105: LD_INT 2
37107: NEG
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: PUSH
37113: LD_INT 1
37115: PUSH
37116: LD_INT 1
37118: NEG
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: PUSH
37124: LD_INT 2
37126: PUSH
37127: LD_INT 0
37129: PUSH
37130: EMPTY
37131: LIST
37132: LIST
37133: PUSH
37134: LD_INT 2
37136: PUSH
37137: LD_INT 1
37139: PUSH
37140: EMPTY
37141: LIST
37142: LIST
37143: PUSH
37144: LD_INT 2
37146: PUSH
37147: LD_INT 2
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: PUSH
37154: LD_INT 1
37156: PUSH
37157: LD_INT 2
37159: PUSH
37160: EMPTY
37161: LIST
37162: LIST
37163: PUSH
37164: LD_INT 0
37166: PUSH
37167: LD_INT 2
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: PUSH
37174: LD_INT 1
37176: NEG
37177: PUSH
37178: LD_INT 1
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: PUSH
37185: LD_INT 2
37187: NEG
37188: PUSH
37189: LD_INT 0
37191: PUSH
37192: EMPTY
37193: LIST
37194: LIST
37195: PUSH
37196: LD_INT 2
37198: NEG
37199: PUSH
37200: LD_INT 1
37202: NEG
37203: PUSH
37204: EMPTY
37205: LIST
37206: LIST
37207: PUSH
37208: LD_INT 2
37210: NEG
37211: PUSH
37212: LD_INT 2
37214: NEG
37215: PUSH
37216: EMPTY
37217: LIST
37218: LIST
37219: PUSH
37220: EMPTY
37221: LIST
37222: LIST
37223: LIST
37224: LIST
37225: LIST
37226: LIST
37227: LIST
37228: LIST
37229: LIST
37230: LIST
37231: LIST
37232: LIST
37233: LIST
37234: LIST
37235: LIST
37236: LIST
37237: LIST
37238: LIST
37239: LIST
37240: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37241: LD_ADDR_VAR 0 19
37245: PUSH
37246: LD_INT 0
37248: PUSH
37249: LD_INT 0
37251: PUSH
37252: EMPTY
37253: LIST
37254: LIST
37255: PUSH
37256: LD_INT 0
37258: PUSH
37259: LD_INT 1
37261: NEG
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: PUSH
37267: LD_INT 1
37269: PUSH
37270: LD_INT 0
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: PUSH
37277: LD_INT 1
37279: PUSH
37280: LD_INT 1
37282: PUSH
37283: EMPTY
37284: LIST
37285: LIST
37286: PUSH
37287: LD_INT 0
37289: PUSH
37290: LD_INT 1
37292: PUSH
37293: EMPTY
37294: LIST
37295: LIST
37296: PUSH
37297: LD_INT 1
37299: NEG
37300: PUSH
37301: LD_INT 0
37303: PUSH
37304: EMPTY
37305: LIST
37306: LIST
37307: PUSH
37308: LD_INT 1
37310: NEG
37311: PUSH
37312: LD_INT 1
37314: NEG
37315: PUSH
37316: EMPTY
37317: LIST
37318: LIST
37319: PUSH
37320: LD_INT 1
37322: NEG
37323: PUSH
37324: LD_INT 2
37326: NEG
37327: PUSH
37328: EMPTY
37329: LIST
37330: LIST
37331: PUSH
37332: LD_INT 0
37334: PUSH
37335: LD_INT 2
37337: NEG
37338: PUSH
37339: EMPTY
37340: LIST
37341: LIST
37342: PUSH
37343: LD_INT 1
37345: PUSH
37346: LD_INT 1
37348: NEG
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: PUSH
37354: LD_INT 2
37356: PUSH
37357: LD_INT 0
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: PUSH
37364: LD_INT 2
37366: PUSH
37367: LD_INT 1
37369: PUSH
37370: EMPTY
37371: LIST
37372: LIST
37373: PUSH
37374: LD_INT 2
37376: PUSH
37377: LD_INT 2
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PUSH
37384: LD_INT 1
37386: PUSH
37387: LD_INT 2
37389: PUSH
37390: EMPTY
37391: LIST
37392: LIST
37393: PUSH
37394: LD_INT 0
37396: PUSH
37397: LD_INT 2
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: PUSH
37404: LD_INT 1
37406: NEG
37407: PUSH
37408: LD_INT 1
37410: PUSH
37411: EMPTY
37412: LIST
37413: LIST
37414: PUSH
37415: LD_INT 2
37417: NEG
37418: PUSH
37419: LD_INT 0
37421: PUSH
37422: EMPTY
37423: LIST
37424: LIST
37425: PUSH
37426: LD_INT 2
37428: NEG
37429: PUSH
37430: LD_INT 1
37432: NEG
37433: PUSH
37434: EMPTY
37435: LIST
37436: LIST
37437: PUSH
37438: LD_INT 2
37440: NEG
37441: PUSH
37442: LD_INT 2
37444: NEG
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: PUSH
37450: EMPTY
37451: LIST
37452: LIST
37453: LIST
37454: LIST
37455: LIST
37456: LIST
37457: LIST
37458: LIST
37459: LIST
37460: LIST
37461: LIST
37462: LIST
37463: LIST
37464: LIST
37465: LIST
37466: LIST
37467: LIST
37468: LIST
37469: LIST
37470: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37471: LD_ADDR_VAR 0 20
37475: PUSH
37476: LD_INT 0
37478: PUSH
37479: LD_INT 0
37481: PUSH
37482: EMPTY
37483: LIST
37484: LIST
37485: PUSH
37486: LD_INT 0
37488: PUSH
37489: LD_INT 1
37491: NEG
37492: PUSH
37493: EMPTY
37494: LIST
37495: LIST
37496: PUSH
37497: LD_INT 1
37499: PUSH
37500: LD_INT 0
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: PUSH
37507: LD_INT 1
37509: PUSH
37510: LD_INT 1
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: PUSH
37517: LD_INT 0
37519: PUSH
37520: LD_INT 1
37522: PUSH
37523: EMPTY
37524: LIST
37525: LIST
37526: PUSH
37527: LD_INT 1
37529: NEG
37530: PUSH
37531: LD_INT 0
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: PUSH
37538: LD_INT 1
37540: NEG
37541: PUSH
37542: LD_INT 1
37544: NEG
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: PUSH
37550: LD_INT 1
37552: NEG
37553: PUSH
37554: LD_INT 2
37556: NEG
37557: PUSH
37558: EMPTY
37559: LIST
37560: LIST
37561: PUSH
37562: LD_INT 0
37564: PUSH
37565: LD_INT 2
37567: NEG
37568: PUSH
37569: EMPTY
37570: LIST
37571: LIST
37572: PUSH
37573: LD_INT 1
37575: PUSH
37576: LD_INT 1
37578: NEG
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: LD_INT 2
37586: PUSH
37587: LD_INT 0
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 2
37596: PUSH
37597: LD_INT 1
37599: PUSH
37600: EMPTY
37601: LIST
37602: LIST
37603: PUSH
37604: LD_INT 2
37606: PUSH
37607: LD_INT 2
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: LD_INT 1
37616: PUSH
37617: LD_INT 2
37619: PUSH
37620: EMPTY
37621: LIST
37622: LIST
37623: PUSH
37624: LD_INT 0
37626: PUSH
37627: LD_INT 2
37629: PUSH
37630: EMPTY
37631: LIST
37632: LIST
37633: PUSH
37634: LD_INT 1
37636: NEG
37637: PUSH
37638: LD_INT 1
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PUSH
37645: LD_INT 2
37647: NEG
37648: PUSH
37649: LD_INT 0
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: PUSH
37656: LD_INT 2
37658: NEG
37659: PUSH
37660: LD_INT 1
37662: NEG
37663: PUSH
37664: EMPTY
37665: LIST
37666: LIST
37667: PUSH
37668: LD_INT 2
37670: NEG
37671: PUSH
37672: LD_INT 2
37674: NEG
37675: PUSH
37676: EMPTY
37677: LIST
37678: LIST
37679: PUSH
37680: EMPTY
37681: LIST
37682: LIST
37683: LIST
37684: LIST
37685: LIST
37686: LIST
37687: LIST
37688: LIST
37689: LIST
37690: LIST
37691: LIST
37692: LIST
37693: LIST
37694: LIST
37695: LIST
37696: LIST
37697: LIST
37698: LIST
37699: LIST
37700: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37701: LD_ADDR_VAR 0 21
37705: PUSH
37706: LD_INT 0
37708: PUSH
37709: LD_INT 0
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: PUSH
37716: LD_INT 0
37718: PUSH
37719: LD_INT 1
37721: NEG
37722: PUSH
37723: EMPTY
37724: LIST
37725: LIST
37726: PUSH
37727: LD_INT 1
37729: PUSH
37730: LD_INT 0
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: PUSH
37737: LD_INT 1
37739: PUSH
37740: LD_INT 1
37742: PUSH
37743: EMPTY
37744: LIST
37745: LIST
37746: PUSH
37747: LD_INT 0
37749: PUSH
37750: LD_INT 1
37752: PUSH
37753: EMPTY
37754: LIST
37755: LIST
37756: PUSH
37757: LD_INT 1
37759: NEG
37760: PUSH
37761: LD_INT 0
37763: PUSH
37764: EMPTY
37765: LIST
37766: LIST
37767: PUSH
37768: LD_INT 1
37770: NEG
37771: PUSH
37772: LD_INT 1
37774: NEG
37775: PUSH
37776: EMPTY
37777: LIST
37778: LIST
37779: PUSH
37780: LD_INT 1
37782: NEG
37783: PUSH
37784: LD_INT 2
37786: NEG
37787: PUSH
37788: EMPTY
37789: LIST
37790: LIST
37791: PUSH
37792: LD_INT 0
37794: PUSH
37795: LD_INT 2
37797: NEG
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: PUSH
37803: LD_INT 1
37805: PUSH
37806: LD_INT 1
37808: NEG
37809: PUSH
37810: EMPTY
37811: LIST
37812: LIST
37813: PUSH
37814: LD_INT 2
37816: PUSH
37817: LD_INT 0
37819: PUSH
37820: EMPTY
37821: LIST
37822: LIST
37823: PUSH
37824: LD_INT 2
37826: PUSH
37827: LD_INT 1
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: PUSH
37834: LD_INT 2
37836: PUSH
37837: LD_INT 2
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: LD_INT 1
37846: PUSH
37847: LD_INT 2
37849: PUSH
37850: EMPTY
37851: LIST
37852: LIST
37853: PUSH
37854: LD_INT 0
37856: PUSH
37857: LD_INT 2
37859: PUSH
37860: EMPTY
37861: LIST
37862: LIST
37863: PUSH
37864: LD_INT 1
37866: NEG
37867: PUSH
37868: LD_INT 1
37870: PUSH
37871: EMPTY
37872: LIST
37873: LIST
37874: PUSH
37875: LD_INT 2
37877: NEG
37878: PUSH
37879: LD_INT 0
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: PUSH
37886: LD_INT 2
37888: NEG
37889: PUSH
37890: LD_INT 1
37892: NEG
37893: PUSH
37894: EMPTY
37895: LIST
37896: LIST
37897: PUSH
37898: LD_INT 2
37900: NEG
37901: PUSH
37902: LD_INT 2
37904: NEG
37905: PUSH
37906: EMPTY
37907: LIST
37908: LIST
37909: PUSH
37910: EMPTY
37911: LIST
37912: LIST
37913: LIST
37914: LIST
37915: LIST
37916: LIST
37917: LIST
37918: LIST
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37931: LD_ADDR_VAR 0 22
37935: PUSH
37936: LD_INT 0
37938: PUSH
37939: LD_INT 0
37941: PUSH
37942: EMPTY
37943: LIST
37944: LIST
37945: PUSH
37946: LD_INT 0
37948: PUSH
37949: LD_INT 1
37951: NEG
37952: PUSH
37953: EMPTY
37954: LIST
37955: LIST
37956: PUSH
37957: LD_INT 1
37959: PUSH
37960: LD_INT 0
37962: PUSH
37963: EMPTY
37964: LIST
37965: LIST
37966: PUSH
37967: LD_INT 1
37969: PUSH
37970: LD_INT 1
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: PUSH
37977: LD_INT 0
37979: PUSH
37980: LD_INT 1
37982: PUSH
37983: EMPTY
37984: LIST
37985: LIST
37986: PUSH
37987: LD_INT 1
37989: NEG
37990: PUSH
37991: LD_INT 0
37993: PUSH
37994: EMPTY
37995: LIST
37996: LIST
37997: PUSH
37998: LD_INT 1
38000: NEG
38001: PUSH
38002: LD_INT 1
38004: NEG
38005: PUSH
38006: EMPTY
38007: LIST
38008: LIST
38009: PUSH
38010: LD_INT 1
38012: NEG
38013: PUSH
38014: LD_INT 2
38016: NEG
38017: PUSH
38018: EMPTY
38019: LIST
38020: LIST
38021: PUSH
38022: LD_INT 0
38024: PUSH
38025: LD_INT 2
38027: NEG
38028: PUSH
38029: EMPTY
38030: LIST
38031: LIST
38032: PUSH
38033: LD_INT 1
38035: PUSH
38036: LD_INT 1
38038: NEG
38039: PUSH
38040: EMPTY
38041: LIST
38042: LIST
38043: PUSH
38044: LD_INT 2
38046: PUSH
38047: LD_INT 0
38049: PUSH
38050: EMPTY
38051: LIST
38052: LIST
38053: PUSH
38054: LD_INT 2
38056: PUSH
38057: LD_INT 1
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: PUSH
38064: LD_INT 2
38066: PUSH
38067: LD_INT 2
38069: PUSH
38070: EMPTY
38071: LIST
38072: LIST
38073: PUSH
38074: LD_INT 1
38076: PUSH
38077: LD_INT 2
38079: PUSH
38080: EMPTY
38081: LIST
38082: LIST
38083: PUSH
38084: LD_INT 0
38086: PUSH
38087: LD_INT 2
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: LD_INT 1
38096: NEG
38097: PUSH
38098: LD_INT 1
38100: PUSH
38101: EMPTY
38102: LIST
38103: LIST
38104: PUSH
38105: LD_INT 2
38107: NEG
38108: PUSH
38109: LD_INT 0
38111: PUSH
38112: EMPTY
38113: LIST
38114: LIST
38115: PUSH
38116: LD_INT 2
38118: NEG
38119: PUSH
38120: LD_INT 1
38122: NEG
38123: PUSH
38124: EMPTY
38125: LIST
38126: LIST
38127: PUSH
38128: LD_INT 2
38130: NEG
38131: PUSH
38132: LD_INT 2
38134: NEG
38135: PUSH
38136: EMPTY
38137: LIST
38138: LIST
38139: PUSH
38140: EMPTY
38141: LIST
38142: LIST
38143: LIST
38144: LIST
38145: LIST
38146: LIST
38147: LIST
38148: LIST
38149: LIST
38150: LIST
38151: LIST
38152: LIST
38153: LIST
38154: LIST
38155: LIST
38156: LIST
38157: LIST
38158: LIST
38159: LIST
38160: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
38161: LD_ADDR_VAR 0 23
38165: PUSH
38166: LD_INT 0
38168: PUSH
38169: LD_INT 0
38171: PUSH
38172: EMPTY
38173: LIST
38174: LIST
38175: PUSH
38176: LD_INT 0
38178: PUSH
38179: LD_INT 1
38181: NEG
38182: PUSH
38183: EMPTY
38184: LIST
38185: LIST
38186: PUSH
38187: LD_INT 1
38189: PUSH
38190: LD_INT 0
38192: PUSH
38193: EMPTY
38194: LIST
38195: LIST
38196: PUSH
38197: LD_INT 1
38199: PUSH
38200: LD_INT 1
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PUSH
38207: LD_INT 0
38209: PUSH
38210: LD_INT 1
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: PUSH
38217: LD_INT 1
38219: NEG
38220: PUSH
38221: LD_INT 0
38223: PUSH
38224: EMPTY
38225: LIST
38226: LIST
38227: PUSH
38228: LD_INT 1
38230: NEG
38231: PUSH
38232: LD_INT 1
38234: NEG
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: LD_INT 1
38242: NEG
38243: PUSH
38244: LD_INT 2
38246: NEG
38247: PUSH
38248: EMPTY
38249: LIST
38250: LIST
38251: PUSH
38252: LD_INT 0
38254: PUSH
38255: LD_INT 2
38257: NEG
38258: PUSH
38259: EMPTY
38260: LIST
38261: LIST
38262: PUSH
38263: LD_INT 1
38265: PUSH
38266: LD_INT 1
38268: NEG
38269: PUSH
38270: EMPTY
38271: LIST
38272: LIST
38273: PUSH
38274: LD_INT 2
38276: PUSH
38277: LD_INT 0
38279: PUSH
38280: EMPTY
38281: LIST
38282: LIST
38283: PUSH
38284: LD_INT 2
38286: PUSH
38287: LD_INT 1
38289: PUSH
38290: EMPTY
38291: LIST
38292: LIST
38293: PUSH
38294: LD_INT 2
38296: PUSH
38297: LD_INT 2
38299: PUSH
38300: EMPTY
38301: LIST
38302: LIST
38303: PUSH
38304: LD_INT 1
38306: PUSH
38307: LD_INT 2
38309: PUSH
38310: EMPTY
38311: LIST
38312: LIST
38313: PUSH
38314: LD_INT 0
38316: PUSH
38317: LD_INT 2
38319: PUSH
38320: EMPTY
38321: LIST
38322: LIST
38323: PUSH
38324: LD_INT 1
38326: NEG
38327: PUSH
38328: LD_INT 1
38330: PUSH
38331: EMPTY
38332: LIST
38333: LIST
38334: PUSH
38335: LD_INT 2
38337: NEG
38338: PUSH
38339: LD_INT 0
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: PUSH
38346: LD_INT 2
38348: NEG
38349: PUSH
38350: LD_INT 1
38352: NEG
38353: PUSH
38354: EMPTY
38355: LIST
38356: LIST
38357: PUSH
38358: LD_INT 2
38360: NEG
38361: PUSH
38362: LD_INT 2
38364: NEG
38365: PUSH
38366: EMPTY
38367: LIST
38368: LIST
38369: PUSH
38370: LD_INT 2
38372: NEG
38373: PUSH
38374: LD_INT 3
38376: NEG
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: PUSH
38382: LD_INT 1
38384: NEG
38385: PUSH
38386: LD_INT 3
38388: NEG
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: LD_INT 1
38396: PUSH
38397: LD_INT 2
38399: NEG
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 2
38407: PUSH
38408: LD_INT 1
38410: NEG
38411: PUSH
38412: EMPTY
38413: LIST
38414: LIST
38415: PUSH
38416: EMPTY
38417: LIST
38418: LIST
38419: LIST
38420: LIST
38421: LIST
38422: LIST
38423: LIST
38424: LIST
38425: LIST
38426: LIST
38427: LIST
38428: LIST
38429: LIST
38430: LIST
38431: LIST
38432: LIST
38433: LIST
38434: LIST
38435: LIST
38436: LIST
38437: LIST
38438: LIST
38439: LIST
38440: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
38441: LD_ADDR_VAR 0 24
38445: PUSH
38446: LD_INT 0
38448: PUSH
38449: LD_INT 0
38451: PUSH
38452: EMPTY
38453: LIST
38454: LIST
38455: PUSH
38456: LD_INT 0
38458: PUSH
38459: LD_INT 1
38461: NEG
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 1
38469: PUSH
38470: LD_INT 0
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 1
38479: PUSH
38480: LD_INT 1
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: LD_INT 0
38489: PUSH
38490: LD_INT 1
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 1
38499: NEG
38500: PUSH
38501: LD_INT 0
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: PUSH
38508: LD_INT 1
38510: NEG
38511: PUSH
38512: LD_INT 1
38514: NEG
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: LD_INT 1
38522: NEG
38523: PUSH
38524: LD_INT 2
38526: NEG
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: PUSH
38532: LD_INT 0
38534: PUSH
38535: LD_INT 2
38537: NEG
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PUSH
38543: LD_INT 1
38545: PUSH
38546: LD_INT 1
38548: NEG
38549: PUSH
38550: EMPTY
38551: LIST
38552: LIST
38553: PUSH
38554: LD_INT 2
38556: PUSH
38557: LD_INT 0
38559: PUSH
38560: EMPTY
38561: LIST
38562: LIST
38563: PUSH
38564: LD_INT 2
38566: PUSH
38567: LD_INT 1
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PUSH
38574: LD_INT 2
38576: PUSH
38577: LD_INT 2
38579: PUSH
38580: EMPTY
38581: LIST
38582: LIST
38583: PUSH
38584: LD_INT 1
38586: PUSH
38587: LD_INT 2
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: PUSH
38594: LD_INT 0
38596: PUSH
38597: LD_INT 2
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: LD_INT 1
38606: NEG
38607: PUSH
38608: LD_INT 1
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: PUSH
38615: LD_INT 2
38617: NEG
38618: PUSH
38619: LD_INT 0
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: PUSH
38626: LD_INT 2
38628: NEG
38629: PUSH
38630: LD_INT 1
38632: NEG
38633: PUSH
38634: EMPTY
38635: LIST
38636: LIST
38637: PUSH
38638: LD_INT 2
38640: NEG
38641: PUSH
38642: LD_INT 2
38644: NEG
38645: PUSH
38646: EMPTY
38647: LIST
38648: LIST
38649: PUSH
38650: LD_INT 1
38652: PUSH
38653: LD_INT 2
38655: NEG
38656: PUSH
38657: EMPTY
38658: LIST
38659: LIST
38660: PUSH
38661: LD_INT 2
38663: PUSH
38664: LD_INT 1
38666: NEG
38667: PUSH
38668: EMPTY
38669: LIST
38670: LIST
38671: PUSH
38672: LD_INT 3
38674: PUSH
38675: LD_INT 1
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: PUSH
38682: LD_INT 3
38684: PUSH
38685: LD_INT 2
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: LIST
38696: LIST
38697: LIST
38698: LIST
38699: LIST
38700: LIST
38701: LIST
38702: LIST
38703: LIST
38704: LIST
38705: LIST
38706: LIST
38707: LIST
38708: LIST
38709: LIST
38710: LIST
38711: LIST
38712: LIST
38713: LIST
38714: LIST
38715: LIST
38716: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
38717: LD_ADDR_VAR 0 25
38721: PUSH
38722: LD_INT 0
38724: PUSH
38725: LD_INT 0
38727: PUSH
38728: EMPTY
38729: LIST
38730: LIST
38731: PUSH
38732: LD_INT 0
38734: PUSH
38735: LD_INT 1
38737: NEG
38738: PUSH
38739: EMPTY
38740: LIST
38741: LIST
38742: PUSH
38743: LD_INT 1
38745: PUSH
38746: LD_INT 0
38748: PUSH
38749: EMPTY
38750: LIST
38751: LIST
38752: PUSH
38753: LD_INT 1
38755: PUSH
38756: LD_INT 1
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: PUSH
38763: LD_INT 0
38765: PUSH
38766: LD_INT 1
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: PUSH
38773: LD_INT 1
38775: NEG
38776: PUSH
38777: LD_INT 0
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: LD_INT 1
38786: NEG
38787: PUSH
38788: LD_INT 1
38790: NEG
38791: PUSH
38792: EMPTY
38793: LIST
38794: LIST
38795: PUSH
38796: LD_INT 1
38798: NEG
38799: PUSH
38800: LD_INT 2
38802: NEG
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: PUSH
38808: LD_INT 0
38810: PUSH
38811: LD_INT 2
38813: NEG
38814: PUSH
38815: EMPTY
38816: LIST
38817: LIST
38818: PUSH
38819: LD_INT 1
38821: PUSH
38822: LD_INT 1
38824: NEG
38825: PUSH
38826: EMPTY
38827: LIST
38828: LIST
38829: PUSH
38830: LD_INT 2
38832: PUSH
38833: LD_INT 0
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: PUSH
38840: LD_INT 2
38842: PUSH
38843: LD_INT 1
38845: PUSH
38846: EMPTY
38847: LIST
38848: LIST
38849: PUSH
38850: LD_INT 2
38852: PUSH
38853: LD_INT 2
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: PUSH
38860: LD_INT 1
38862: PUSH
38863: LD_INT 2
38865: PUSH
38866: EMPTY
38867: LIST
38868: LIST
38869: PUSH
38870: LD_INT 0
38872: PUSH
38873: LD_INT 2
38875: PUSH
38876: EMPTY
38877: LIST
38878: LIST
38879: PUSH
38880: LD_INT 1
38882: NEG
38883: PUSH
38884: LD_INT 1
38886: PUSH
38887: EMPTY
38888: LIST
38889: LIST
38890: PUSH
38891: LD_INT 2
38893: NEG
38894: PUSH
38895: LD_INT 0
38897: PUSH
38898: EMPTY
38899: LIST
38900: LIST
38901: PUSH
38902: LD_INT 2
38904: NEG
38905: PUSH
38906: LD_INT 1
38908: NEG
38909: PUSH
38910: EMPTY
38911: LIST
38912: LIST
38913: PUSH
38914: LD_INT 2
38916: NEG
38917: PUSH
38918: LD_INT 2
38920: NEG
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PUSH
38926: LD_INT 3
38928: PUSH
38929: LD_INT 1
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 3
38938: PUSH
38939: LD_INT 2
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: PUSH
38946: LD_INT 2
38948: PUSH
38949: LD_INT 3
38951: PUSH
38952: EMPTY
38953: LIST
38954: LIST
38955: PUSH
38956: LD_INT 1
38958: PUSH
38959: LD_INT 3
38961: PUSH
38962: EMPTY
38963: LIST
38964: LIST
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: LIST
38970: LIST
38971: LIST
38972: LIST
38973: LIST
38974: LIST
38975: LIST
38976: LIST
38977: LIST
38978: LIST
38979: LIST
38980: LIST
38981: LIST
38982: LIST
38983: LIST
38984: LIST
38985: LIST
38986: LIST
38987: LIST
38988: LIST
38989: LIST
38990: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
38991: LD_ADDR_VAR 0 26
38995: PUSH
38996: LD_INT 0
38998: PUSH
38999: LD_INT 0
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: PUSH
39006: LD_INT 0
39008: PUSH
39009: LD_INT 1
39011: NEG
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: PUSH
39017: LD_INT 1
39019: PUSH
39020: LD_INT 0
39022: PUSH
39023: EMPTY
39024: LIST
39025: LIST
39026: PUSH
39027: LD_INT 1
39029: PUSH
39030: LD_INT 1
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PUSH
39037: LD_INT 0
39039: PUSH
39040: LD_INT 1
39042: PUSH
39043: EMPTY
39044: LIST
39045: LIST
39046: PUSH
39047: LD_INT 1
39049: NEG
39050: PUSH
39051: LD_INT 0
39053: PUSH
39054: EMPTY
39055: LIST
39056: LIST
39057: PUSH
39058: LD_INT 1
39060: NEG
39061: PUSH
39062: LD_INT 1
39064: NEG
39065: PUSH
39066: EMPTY
39067: LIST
39068: LIST
39069: PUSH
39070: LD_INT 1
39072: NEG
39073: PUSH
39074: LD_INT 2
39076: NEG
39077: PUSH
39078: EMPTY
39079: LIST
39080: LIST
39081: PUSH
39082: LD_INT 0
39084: PUSH
39085: LD_INT 2
39087: NEG
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: PUSH
39093: LD_INT 1
39095: PUSH
39096: LD_INT 1
39098: NEG
39099: PUSH
39100: EMPTY
39101: LIST
39102: LIST
39103: PUSH
39104: LD_INT 2
39106: PUSH
39107: LD_INT 0
39109: PUSH
39110: EMPTY
39111: LIST
39112: LIST
39113: PUSH
39114: LD_INT 2
39116: PUSH
39117: LD_INT 1
39119: PUSH
39120: EMPTY
39121: LIST
39122: LIST
39123: PUSH
39124: LD_INT 2
39126: PUSH
39127: LD_INT 2
39129: PUSH
39130: EMPTY
39131: LIST
39132: LIST
39133: PUSH
39134: LD_INT 1
39136: PUSH
39137: LD_INT 2
39139: PUSH
39140: EMPTY
39141: LIST
39142: LIST
39143: PUSH
39144: LD_INT 0
39146: PUSH
39147: LD_INT 2
39149: PUSH
39150: EMPTY
39151: LIST
39152: LIST
39153: PUSH
39154: LD_INT 1
39156: NEG
39157: PUSH
39158: LD_INT 1
39160: PUSH
39161: EMPTY
39162: LIST
39163: LIST
39164: PUSH
39165: LD_INT 2
39167: NEG
39168: PUSH
39169: LD_INT 0
39171: PUSH
39172: EMPTY
39173: LIST
39174: LIST
39175: PUSH
39176: LD_INT 2
39178: NEG
39179: PUSH
39180: LD_INT 1
39182: NEG
39183: PUSH
39184: EMPTY
39185: LIST
39186: LIST
39187: PUSH
39188: LD_INT 2
39190: NEG
39191: PUSH
39192: LD_INT 2
39194: NEG
39195: PUSH
39196: EMPTY
39197: LIST
39198: LIST
39199: PUSH
39200: LD_INT 2
39202: PUSH
39203: LD_INT 3
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 1
39212: PUSH
39213: LD_INT 3
39215: PUSH
39216: EMPTY
39217: LIST
39218: LIST
39219: PUSH
39220: LD_INT 1
39222: NEG
39223: PUSH
39224: LD_INT 2
39226: PUSH
39227: EMPTY
39228: LIST
39229: LIST
39230: PUSH
39231: LD_INT 2
39233: NEG
39234: PUSH
39235: LD_INT 1
39237: PUSH
39238: EMPTY
39239: LIST
39240: LIST
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: LIST
39246: LIST
39247: LIST
39248: LIST
39249: LIST
39250: LIST
39251: LIST
39252: LIST
39253: LIST
39254: LIST
39255: LIST
39256: LIST
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: LIST
39266: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39267: LD_ADDR_VAR 0 27
39271: PUSH
39272: LD_INT 0
39274: PUSH
39275: LD_INT 0
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PUSH
39282: LD_INT 0
39284: PUSH
39285: LD_INT 1
39287: NEG
39288: PUSH
39289: EMPTY
39290: LIST
39291: LIST
39292: PUSH
39293: LD_INT 1
39295: PUSH
39296: LD_INT 0
39298: PUSH
39299: EMPTY
39300: LIST
39301: LIST
39302: PUSH
39303: LD_INT 1
39305: PUSH
39306: LD_INT 1
39308: PUSH
39309: EMPTY
39310: LIST
39311: LIST
39312: PUSH
39313: LD_INT 0
39315: PUSH
39316: LD_INT 1
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: PUSH
39323: LD_INT 1
39325: NEG
39326: PUSH
39327: LD_INT 0
39329: PUSH
39330: EMPTY
39331: LIST
39332: LIST
39333: PUSH
39334: LD_INT 1
39336: NEG
39337: PUSH
39338: LD_INT 1
39340: NEG
39341: PUSH
39342: EMPTY
39343: LIST
39344: LIST
39345: PUSH
39346: LD_INT 1
39348: NEG
39349: PUSH
39350: LD_INT 2
39352: NEG
39353: PUSH
39354: EMPTY
39355: LIST
39356: LIST
39357: PUSH
39358: LD_INT 0
39360: PUSH
39361: LD_INT 2
39363: NEG
39364: PUSH
39365: EMPTY
39366: LIST
39367: LIST
39368: PUSH
39369: LD_INT 1
39371: PUSH
39372: LD_INT 1
39374: NEG
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: LD_INT 2
39382: PUSH
39383: LD_INT 0
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: LD_INT 2
39392: PUSH
39393: LD_INT 1
39395: PUSH
39396: EMPTY
39397: LIST
39398: LIST
39399: PUSH
39400: LD_INT 2
39402: PUSH
39403: LD_INT 2
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: PUSH
39410: LD_INT 1
39412: PUSH
39413: LD_INT 2
39415: PUSH
39416: EMPTY
39417: LIST
39418: LIST
39419: PUSH
39420: LD_INT 0
39422: PUSH
39423: LD_INT 2
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: LD_INT 1
39432: NEG
39433: PUSH
39434: LD_INT 1
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: LD_INT 2
39443: NEG
39444: PUSH
39445: LD_INT 0
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: PUSH
39452: LD_INT 2
39454: NEG
39455: PUSH
39456: LD_INT 1
39458: NEG
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: PUSH
39464: LD_INT 2
39466: NEG
39467: PUSH
39468: LD_INT 2
39470: NEG
39471: PUSH
39472: EMPTY
39473: LIST
39474: LIST
39475: PUSH
39476: LD_INT 1
39478: NEG
39479: PUSH
39480: LD_INT 2
39482: PUSH
39483: EMPTY
39484: LIST
39485: LIST
39486: PUSH
39487: LD_INT 2
39489: NEG
39490: PUSH
39491: LD_INT 1
39493: PUSH
39494: EMPTY
39495: LIST
39496: LIST
39497: PUSH
39498: LD_INT 3
39500: NEG
39501: PUSH
39502: LD_INT 1
39504: NEG
39505: PUSH
39506: EMPTY
39507: LIST
39508: LIST
39509: PUSH
39510: LD_INT 3
39512: NEG
39513: PUSH
39514: LD_INT 2
39516: NEG
39517: PUSH
39518: EMPTY
39519: LIST
39520: LIST
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: LIST
39526: LIST
39527: LIST
39528: LIST
39529: LIST
39530: LIST
39531: LIST
39532: LIST
39533: LIST
39534: LIST
39535: LIST
39536: LIST
39537: LIST
39538: LIST
39539: LIST
39540: LIST
39541: LIST
39542: LIST
39543: LIST
39544: LIST
39545: LIST
39546: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
39547: LD_ADDR_VAR 0 28
39551: PUSH
39552: LD_INT 0
39554: PUSH
39555: LD_INT 0
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: PUSH
39562: LD_INT 0
39564: PUSH
39565: LD_INT 1
39567: NEG
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 1
39575: PUSH
39576: LD_INT 0
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PUSH
39583: LD_INT 1
39585: PUSH
39586: LD_INT 1
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: PUSH
39593: LD_INT 0
39595: PUSH
39596: LD_INT 1
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: LD_INT 1
39605: NEG
39606: PUSH
39607: LD_INT 0
39609: PUSH
39610: EMPTY
39611: LIST
39612: LIST
39613: PUSH
39614: LD_INT 1
39616: NEG
39617: PUSH
39618: LD_INT 1
39620: NEG
39621: PUSH
39622: EMPTY
39623: LIST
39624: LIST
39625: PUSH
39626: LD_INT 1
39628: NEG
39629: PUSH
39630: LD_INT 2
39632: NEG
39633: PUSH
39634: EMPTY
39635: LIST
39636: LIST
39637: PUSH
39638: LD_INT 0
39640: PUSH
39641: LD_INT 2
39643: NEG
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: LD_INT 1
39651: PUSH
39652: LD_INT 1
39654: NEG
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 2
39662: PUSH
39663: LD_INT 0
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: PUSH
39670: LD_INT 2
39672: PUSH
39673: LD_INT 1
39675: PUSH
39676: EMPTY
39677: LIST
39678: LIST
39679: PUSH
39680: LD_INT 2
39682: PUSH
39683: LD_INT 2
39685: PUSH
39686: EMPTY
39687: LIST
39688: LIST
39689: PUSH
39690: LD_INT 1
39692: PUSH
39693: LD_INT 2
39695: PUSH
39696: EMPTY
39697: LIST
39698: LIST
39699: PUSH
39700: LD_INT 0
39702: PUSH
39703: LD_INT 2
39705: PUSH
39706: EMPTY
39707: LIST
39708: LIST
39709: PUSH
39710: LD_INT 1
39712: NEG
39713: PUSH
39714: LD_INT 1
39716: PUSH
39717: EMPTY
39718: LIST
39719: LIST
39720: PUSH
39721: LD_INT 2
39723: NEG
39724: PUSH
39725: LD_INT 0
39727: PUSH
39728: EMPTY
39729: LIST
39730: LIST
39731: PUSH
39732: LD_INT 2
39734: NEG
39735: PUSH
39736: LD_INT 1
39738: NEG
39739: PUSH
39740: EMPTY
39741: LIST
39742: LIST
39743: PUSH
39744: LD_INT 2
39746: NEG
39747: PUSH
39748: LD_INT 2
39750: NEG
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: LD_INT 2
39758: NEG
39759: PUSH
39760: LD_INT 3
39762: NEG
39763: PUSH
39764: EMPTY
39765: LIST
39766: LIST
39767: PUSH
39768: LD_INT 1
39770: NEG
39771: PUSH
39772: LD_INT 3
39774: NEG
39775: PUSH
39776: EMPTY
39777: LIST
39778: LIST
39779: PUSH
39780: LD_INT 3
39782: NEG
39783: PUSH
39784: LD_INT 1
39786: NEG
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 3
39794: NEG
39795: PUSH
39796: LD_INT 2
39798: NEG
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: PUSH
39804: EMPTY
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: LIST
39825: LIST
39826: LIST
39827: LIST
39828: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39829: LD_ADDR_VAR 0 29
39833: PUSH
39834: LD_INT 0
39836: PUSH
39837: LD_INT 0
39839: PUSH
39840: EMPTY
39841: LIST
39842: LIST
39843: PUSH
39844: LD_INT 0
39846: PUSH
39847: LD_INT 1
39849: NEG
39850: PUSH
39851: EMPTY
39852: LIST
39853: LIST
39854: PUSH
39855: LD_INT 1
39857: PUSH
39858: LD_INT 0
39860: PUSH
39861: EMPTY
39862: LIST
39863: LIST
39864: PUSH
39865: LD_INT 1
39867: PUSH
39868: LD_INT 1
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: PUSH
39875: LD_INT 0
39877: PUSH
39878: LD_INT 1
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: LD_INT 1
39887: NEG
39888: PUSH
39889: LD_INT 0
39891: PUSH
39892: EMPTY
39893: LIST
39894: LIST
39895: PUSH
39896: LD_INT 1
39898: NEG
39899: PUSH
39900: LD_INT 1
39902: NEG
39903: PUSH
39904: EMPTY
39905: LIST
39906: LIST
39907: PUSH
39908: LD_INT 1
39910: NEG
39911: PUSH
39912: LD_INT 2
39914: NEG
39915: PUSH
39916: EMPTY
39917: LIST
39918: LIST
39919: PUSH
39920: LD_INT 0
39922: PUSH
39923: LD_INT 2
39925: NEG
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 1
39933: PUSH
39934: LD_INT 1
39936: NEG
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 2
39944: PUSH
39945: LD_INT 0
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: LD_INT 2
39954: PUSH
39955: LD_INT 1
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 1
39964: PUSH
39965: LD_INT 2
39967: PUSH
39968: EMPTY
39969: LIST
39970: LIST
39971: PUSH
39972: LD_INT 0
39974: PUSH
39975: LD_INT 2
39977: PUSH
39978: EMPTY
39979: LIST
39980: LIST
39981: PUSH
39982: LD_INT 1
39984: NEG
39985: PUSH
39986: LD_INT 1
39988: PUSH
39989: EMPTY
39990: LIST
39991: LIST
39992: PUSH
39993: LD_INT 2
39995: NEG
39996: PUSH
39997: LD_INT 1
39999: NEG
40000: PUSH
40001: EMPTY
40002: LIST
40003: LIST
40004: PUSH
40005: LD_INT 2
40007: NEG
40008: PUSH
40009: LD_INT 2
40011: NEG
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: LD_INT 2
40019: NEG
40020: PUSH
40021: LD_INT 3
40023: NEG
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 2
40031: PUSH
40032: LD_INT 1
40034: NEG
40035: PUSH
40036: EMPTY
40037: LIST
40038: LIST
40039: PUSH
40040: LD_INT 3
40042: PUSH
40043: LD_INT 1
40045: PUSH
40046: EMPTY
40047: LIST
40048: LIST
40049: PUSH
40050: LD_INT 1
40052: PUSH
40053: LD_INT 3
40055: PUSH
40056: EMPTY
40057: LIST
40058: LIST
40059: PUSH
40060: LD_INT 1
40062: NEG
40063: PUSH
40064: LD_INT 2
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: LD_INT 3
40073: NEG
40074: PUSH
40075: LD_INT 2
40077: NEG
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PUSH
40083: EMPTY
40084: LIST
40085: LIST
40086: LIST
40087: LIST
40088: LIST
40089: LIST
40090: LIST
40091: LIST
40092: LIST
40093: LIST
40094: LIST
40095: LIST
40096: LIST
40097: LIST
40098: LIST
40099: LIST
40100: LIST
40101: LIST
40102: LIST
40103: LIST
40104: LIST
40105: LIST
40106: LIST
40107: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40108: LD_ADDR_VAR 0 30
40112: PUSH
40113: LD_INT 0
40115: PUSH
40116: LD_INT 0
40118: PUSH
40119: EMPTY
40120: LIST
40121: LIST
40122: PUSH
40123: LD_INT 0
40125: PUSH
40126: LD_INT 1
40128: NEG
40129: PUSH
40130: EMPTY
40131: LIST
40132: LIST
40133: PUSH
40134: LD_INT 1
40136: PUSH
40137: LD_INT 0
40139: PUSH
40140: EMPTY
40141: LIST
40142: LIST
40143: PUSH
40144: LD_INT 1
40146: PUSH
40147: LD_INT 1
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: PUSH
40154: LD_INT 0
40156: PUSH
40157: LD_INT 1
40159: PUSH
40160: EMPTY
40161: LIST
40162: LIST
40163: PUSH
40164: LD_INT 1
40166: NEG
40167: PUSH
40168: LD_INT 0
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: PUSH
40175: LD_INT 1
40177: NEG
40178: PUSH
40179: LD_INT 1
40181: NEG
40182: PUSH
40183: EMPTY
40184: LIST
40185: LIST
40186: PUSH
40187: LD_INT 1
40189: NEG
40190: PUSH
40191: LD_INT 2
40193: NEG
40194: PUSH
40195: EMPTY
40196: LIST
40197: LIST
40198: PUSH
40199: LD_INT 0
40201: PUSH
40202: LD_INT 2
40204: NEG
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PUSH
40210: LD_INT 1
40212: PUSH
40213: LD_INT 1
40215: NEG
40216: PUSH
40217: EMPTY
40218: LIST
40219: LIST
40220: PUSH
40221: LD_INT 2
40223: PUSH
40224: LD_INT 0
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 2
40233: PUSH
40234: LD_INT 1
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 2
40243: PUSH
40244: LD_INT 2
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 1
40253: PUSH
40254: LD_INT 2
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 1
40263: NEG
40264: PUSH
40265: LD_INT 1
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 2
40274: NEG
40275: PUSH
40276: LD_INT 0
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 2
40285: NEG
40286: PUSH
40287: LD_INT 1
40289: NEG
40290: PUSH
40291: EMPTY
40292: LIST
40293: LIST
40294: PUSH
40295: LD_INT 1
40297: NEG
40298: PUSH
40299: LD_INT 3
40301: NEG
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: PUSH
40307: LD_INT 1
40309: PUSH
40310: LD_INT 2
40312: NEG
40313: PUSH
40314: EMPTY
40315: LIST
40316: LIST
40317: PUSH
40318: LD_INT 3
40320: PUSH
40321: LD_INT 2
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 2
40330: PUSH
40331: LD_INT 3
40333: PUSH
40334: EMPTY
40335: LIST
40336: LIST
40337: PUSH
40338: LD_INT 2
40340: NEG
40341: PUSH
40342: LD_INT 1
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 3
40351: NEG
40352: PUSH
40353: LD_INT 1
40355: NEG
40356: PUSH
40357: EMPTY
40358: LIST
40359: LIST
40360: PUSH
40361: EMPTY
40362: LIST
40363: LIST
40364: LIST
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40386: LD_ADDR_VAR 0 31
40390: PUSH
40391: LD_INT 0
40393: PUSH
40394: LD_INT 0
40396: PUSH
40397: EMPTY
40398: LIST
40399: LIST
40400: PUSH
40401: LD_INT 0
40403: PUSH
40404: LD_INT 1
40406: NEG
40407: PUSH
40408: EMPTY
40409: LIST
40410: LIST
40411: PUSH
40412: LD_INT 1
40414: PUSH
40415: LD_INT 0
40417: PUSH
40418: EMPTY
40419: LIST
40420: LIST
40421: PUSH
40422: LD_INT 1
40424: PUSH
40425: LD_INT 1
40427: PUSH
40428: EMPTY
40429: LIST
40430: LIST
40431: PUSH
40432: LD_INT 0
40434: PUSH
40435: LD_INT 1
40437: PUSH
40438: EMPTY
40439: LIST
40440: LIST
40441: PUSH
40442: LD_INT 1
40444: NEG
40445: PUSH
40446: LD_INT 0
40448: PUSH
40449: EMPTY
40450: LIST
40451: LIST
40452: PUSH
40453: LD_INT 1
40455: NEG
40456: PUSH
40457: LD_INT 1
40459: NEG
40460: PUSH
40461: EMPTY
40462: LIST
40463: LIST
40464: PUSH
40465: LD_INT 1
40467: NEG
40468: PUSH
40469: LD_INT 2
40471: NEG
40472: PUSH
40473: EMPTY
40474: LIST
40475: LIST
40476: PUSH
40477: LD_INT 1
40479: PUSH
40480: LD_INT 1
40482: NEG
40483: PUSH
40484: EMPTY
40485: LIST
40486: LIST
40487: PUSH
40488: LD_INT 2
40490: PUSH
40491: LD_INT 0
40493: PUSH
40494: EMPTY
40495: LIST
40496: LIST
40497: PUSH
40498: LD_INT 2
40500: PUSH
40501: LD_INT 1
40503: PUSH
40504: EMPTY
40505: LIST
40506: LIST
40507: PUSH
40508: LD_INT 2
40510: PUSH
40511: LD_INT 2
40513: PUSH
40514: EMPTY
40515: LIST
40516: LIST
40517: PUSH
40518: LD_INT 1
40520: PUSH
40521: LD_INT 2
40523: PUSH
40524: EMPTY
40525: LIST
40526: LIST
40527: PUSH
40528: LD_INT 0
40530: PUSH
40531: LD_INT 2
40533: PUSH
40534: EMPTY
40535: LIST
40536: LIST
40537: PUSH
40538: LD_INT 1
40540: NEG
40541: PUSH
40542: LD_INT 1
40544: PUSH
40545: EMPTY
40546: LIST
40547: LIST
40548: PUSH
40549: LD_INT 2
40551: NEG
40552: PUSH
40553: LD_INT 1
40555: NEG
40556: PUSH
40557: EMPTY
40558: LIST
40559: LIST
40560: PUSH
40561: LD_INT 2
40563: NEG
40564: PUSH
40565: LD_INT 2
40567: NEG
40568: PUSH
40569: EMPTY
40570: LIST
40571: LIST
40572: PUSH
40573: LD_INT 2
40575: NEG
40576: PUSH
40577: LD_INT 3
40579: NEG
40580: PUSH
40581: EMPTY
40582: LIST
40583: LIST
40584: PUSH
40585: LD_INT 2
40587: PUSH
40588: LD_INT 1
40590: NEG
40591: PUSH
40592: EMPTY
40593: LIST
40594: LIST
40595: PUSH
40596: LD_INT 3
40598: PUSH
40599: LD_INT 1
40601: PUSH
40602: EMPTY
40603: LIST
40604: LIST
40605: PUSH
40606: LD_INT 1
40608: PUSH
40609: LD_INT 3
40611: PUSH
40612: EMPTY
40613: LIST
40614: LIST
40615: PUSH
40616: LD_INT 1
40618: NEG
40619: PUSH
40620: LD_INT 2
40622: PUSH
40623: EMPTY
40624: LIST
40625: LIST
40626: PUSH
40627: LD_INT 3
40629: NEG
40630: PUSH
40631: LD_INT 2
40633: NEG
40634: PUSH
40635: EMPTY
40636: LIST
40637: LIST
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: LIST
40643: LIST
40644: LIST
40645: LIST
40646: LIST
40647: LIST
40648: LIST
40649: LIST
40650: LIST
40651: LIST
40652: LIST
40653: LIST
40654: LIST
40655: LIST
40656: LIST
40657: LIST
40658: LIST
40659: LIST
40660: LIST
40661: LIST
40662: LIST
40663: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40664: LD_ADDR_VAR 0 32
40668: PUSH
40669: LD_INT 0
40671: PUSH
40672: LD_INT 0
40674: PUSH
40675: EMPTY
40676: LIST
40677: LIST
40678: PUSH
40679: LD_INT 0
40681: PUSH
40682: LD_INT 1
40684: NEG
40685: PUSH
40686: EMPTY
40687: LIST
40688: LIST
40689: PUSH
40690: LD_INT 1
40692: PUSH
40693: LD_INT 0
40695: PUSH
40696: EMPTY
40697: LIST
40698: LIST
40699: PUSH
40700: LD_INT 1
40702: PUSH
40703: LD_INT 1
40705: PUSH
40706: EMPTY
40707: LIST
40708: LIST
40709: PUSH
40710: LD_INT 0
40712: PUSH
40713: LD_INT 1
40715: PUSH
40716: EMPTY
40717: LIST
40718: LIST
40719: PUSH
40720: LD_INT 1
40722: NEG
40723: PUSH
40724: LD_INT 0
40726: PUSH
40727: EMPTY
40728: LIST
40729: LIST
40730: PUSH
40731: LD_INT 1
40733: NEG
40734: PUSH
40735: LD_INT 1
40737: NEG
40738: PUSH
40739: EMPTY
40740: LIST
40741: LIST
40742: PUSH
40743: LD_INT 1
40745: NEG
40746: PUSH
40747: LD_INT 2
40749: NEG
40750: PUSH
40751: EMPTY
40752: LIST
40753: LIST
40754: PUSH
40755: LD_INT 0
40757: PUSH
40758: LD_INT 2
40760: NEG
40761: PUSH
40762: EMPTY
40763: LIST
40764: LIST
40765: PUSH
40766: LD_INT 1
40768: PUSH
40769: LD_INT 1
40771: NEG
40772: PUSH
40773: EMPTY
40774: LIST
40775: LIST
40776: PUSH
40777: LD_INT 2
40779: PUSH
40780: LD_INT 1
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: LD_INT 2
40789: PUSH
40790: LD_INT 2
40792: PUSH
40793: EMPTY
40794: LIST
40795: LIST
40796: PUSH
40797: LD_INT 1
40799: PUSH
40800: LD_INT 2
40802: PUSH
40803: EMPTY
40804: LIST
40805: LIST
40806: PUSH
40807: LD_INT 0
40809: PUSH
40810: LD_INT 2
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: LD_INT 1
40819: NEG
40820: PUSH
40821: LD_INT 1
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: LD_INT 2
40830: NEG
40831: PUSH
40832: LD_INT 0
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: LD_INT 2
40841: NEG
40842: PUSH
40843: LD_INT 1
40845: NEG
40846: PUSH
40847: EMPTY
40848: LIST
40849: LIST
40850: PUSH
40851: LD_INT 1
40853: NEG
40854: PUSH
40855: LD_INT 3
40857: NEG
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: LD_INT 1
40865: PUSH
40866: LD_INT 2
40868: NEG
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: LD_INT 3
40876: PUSH
40877: LD_INT 2
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: LD_INT 2
40886: PUSH
40887: LD_INT 3
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: LD_INT 2
40896: NEG
40897: PUSH
40898: LD_INT 1
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: PUSH
40905: LD_INT 3
40907: NEG
40908: PUSH
40909: LD_INT 1
40911: NEG
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: EMPTY
40918: LIST
40919: LIST
40920: LIST
40921: LIST
40922: LIST
40923: LIST
40924: LIST
40925: LIST
40926: LIST
40927: LIST
40928: LIST
40929: LIST
40930: LIST
40931: LIST
40932: LIST
40933: LIST
40934: LIST
40935: LIST
40936: LIST
40937: LIST
40938: LIST
40939: LIST
40940: LIST
40941: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
40942: LD_ADDR_VAR 0 33
40946: PUSH
40947: LD_INT 0
40949: PUSH
40950: LD_INT 0
40952: PUSH
40953: EMPTY
40954: LIST
40955: LIST
40956: PUSH
40957: LD_INT 0
40959: PUSH
40960: LD_INT 1
40962: NEG
40963: PUSH
40964: EMPTY
40965: LIST
40966: LIST
40967: PUSH
40968: LD_INT 1
40970: PUSH
40971: LD_INT 0
40973: PUSH
40974: EMPTY
40975: LIST
40976: LIST
40977: PUSH
40978: LD_INT 1
40980: PUSH
40981: LD_INT 1
40983: PUSH
40984: EMPTY
40985: LIST
40986: LIST
40987: PUSH
40988: LD_INT 0
40990: PUSH
40991: LD_INT 1
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 1
41000: NEG
41001: PUSH
41002: LD_INT 0
41004: PUSH
41005: EMPTY
41006: LIST
41007: LIST
41008: PUSH
41009: LD_INT 1
41011: NEG
41012: PUSH
41013: LD_INT 1
41015: NEG
41016: PUSH
41017: EMPTY
41018: LIST
41019: LIST
41020: PUSH
41021: LD_INT 1
41023: NEG
41024: PUSH
41025: LD_INT 2
41027: NEG
41028: PUSH
41029: EMPTY
41030: LIST
41031: LIST
41032: PUSH
41033: LD_INT 1
41035: PUSH
41036: LD_INT 1
41038: NEG
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 2
41046: PUSH
41047: LD_INT 0
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: PUSH
41054: LD_INT 2
41056: PUSH
41057: LD_INT 1
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PUSH
41064: LD_INT 1
41066: PUSH
41067: LD_INT 2
41069: PUSH
41070: EMPTY
41071: LIST
41072: LIST
41073: PUSH
41074: LD_INT 0
41076: PUSH
41077: LD_INT 2
41079: PUSH
41080: EMPTY
41081: LIST
41082: LIST
41083: PUSH
41084: LD_INT 1
41086: NEG
41087: PUSH
41088: LD_INT 1
41090: PUSH
41091: EMPTY
41092: LIST
41093: LIST
41094: PUSH
41095: LD_INT 2
41097: NEG
41098: PUSH
41099: LD_INT 0
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 2
41108: NEG
41109: PUSH
41110: LD_INT 1
41112: NEG
41113: PUSH
41114: EMPTY
41115: LIST
41116: LIST
41117: PUSH
41118: LD_INT 2
41120: NEG
41121: PUSH
41122: LD_INT 2
41124: NEG
41125: PUSH
41126: EMPTY
41127: LIST
41128: LIST
41129: PUSH
41130: LD_INT 2
41132: NEG
41133: PUSH
41134: LD_INT 3
41136: NEG
41137: PUSH
41138: EMPTY
41139: LIST
41140: LIST
41141: PUSH
41142: LD_INT 2
41144: PUSH
41145: LD_INT 1
41147: NEG
41148: PUSH
41149: EMPTY
41150: LIST
41151: LIST
41152: PUSH
41153: LD_INT 3
41155: PUSH
41156: LD_INT 1
41158: PUSH
41159: EMPTY
41160: LIST
41161: LIST
41162: PUSH
41163: LD_INT 1
41165: PUSH
41166: LD_INT 3
41168: PUSH
41169: EMPTY
41170: LIST
41171: LIST
41172: PUSH
41173: LD_INT 1
41175: NEG
41176: PUSH
41177: LD_INT 2
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PUSH
41184: LD_INT 3
41186: NEG
41187: PUSH
41188: LD_INT 2
41190: NEG
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: EMPTY
41197: LIST
41198: LIST
41199: LIST
41200: LIST
41201: LIST
41202: LIST
41203: LIST
41204: LIST
41205: LIST
41206: LIST
41207: LIST
41208: LIST
41209: LIST
41210: LIST
41211: LIST
41212: LIST
41213: LIST
41214: LIST
41215: LIST
41216: LIST
41217: LIST
41218: LIST
41219: LIST
41220: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41221: LD_ADDR_VAR 0 34
41225: PUSH
41226: LD_INT 0
41228: PUSH
41229: LD_INT 0
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: LD_INT 0
41238: PUSH
41239: LD_INT 1
41241: NEG
41242: PUSH
41243: EMPTY
41244: LIST
41245: LIST
41246: PUSH
41247: LD_INT 1
41249: PUSH
41250: LD_INT 0
41252: PUSH
41253: EMPTY
41254: LIST
41255: LIST
41256: PUSH
41257: LD_INT 1
41259: PUSH
41260: LD_INT 1
41262: PUSH
41263: EMPTY
41264: LIST
41265: LIST
41266: PUSH
41267: LD_INT 0
41269: PUSH
41270: LD_INT 1
41272: PUSH
41273: EMPTY
41274: LIST
41275: LIST
41276: PUSH
41277: LD_INT 1
41279: NEG
41280: PUSH
41281: LD_INT 0
41283: PUSH
41284: EMPTY
41285: LIST
41286: LIST
41287: PUSH
41288: LD_INT 1
41290: NEG
41291: PUSH
41292: LD_INT 1
41294: NEG
41295: PUSH
41296: EMPTY
41297: LIST
41298: LIST
41299: PUSH
41300: LD_INT 1
41302: NEG
41303: PUSH
41304: LD_INT 2
41306: NEG
41307: PUSH
41308: EMPTY
41309: LIST
41310: LIST
41311: PUSH
41312: LD_INT 0
41314: PUSH
41315: LD_INT 2
41317: NEG
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: LD_INT 1
41325: PUSH
41326: LD_INT 1
41328: NEG
41329: PUSH
41330: EMPTY
41331: LIST
41332: LIST
41333: PUSH
41334: LD_INT 2
41336: PUSH
41337: LD_INT 1
41339: PUSH
41340: EMPTY
41341: LIST
41342: LIST
41343: PUSH
41344: LD_INT 2
41346: PUSH
41347: LD_INT 2
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: LD_INT 1
41356: PUSH
41357: LD_INT 2
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: LD_INT 1
41366: NEG
41367: PUSH
41368: LD_INT 1
41370: PUSH
41371: EMPTY
41372: LIST
41373: LIST
41374: PUSH
41375: LD_INT 2
41377: NEG
41378: PUSH
41379: LD_INT 0
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: LD_INT 2
41388: NEG
41389: PUSH
41390: LD_INT 1
41392: NEG
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 2
41400: NEG
41401: PUSH
41402: LD_INT 2
41404: NEG
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: LD_INT 1
41412: NEG
41413: PUSH
41414: LD_INT 3
41416: NEG
41417: PUSH
41418: EMPTY
41419: LIST
41420: LIST
41421: PUSH
41422: LD_INT 1
41424: PUSH
41425: LD_INT 2
41427: NEG
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: PUSH
41433: LD_INT 3
41435: PUSH
41436: LD_INT 2
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: PUSH
41443: LD_INT 2
41445: PUSH
41446: LD_INT 3
41448: PUSH
41449: EMPTY
41450: LIST
41451: LIST
41452: PUSH
41453: LD_INT 2
41455: NEG
41456: PUSH
41457: LD_INT 1
41459: PUSH
41460: EMPTY
41461: LIST
41462: LIST
41463: PUSH
41464: LD_INT 3
41466: NEG
41467: PUSH
41468: LD_INT 1
41470: NEG
41471: PUSH
41472: EMPTY
41473: LIST
41474: LIST
41475: PUSH
41476: EMPTY
41477: LIST
41478: LIST
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: LIST
41485: LIST
41486: LIST
41487: LIST
41488: LIST
41489: LIST
41490: LIST
41491: LIST
41492: LIST
41493: LIST
41494: LIST
41495: LIST
41496: LIST
41497: LIST
41498: LIST
41499: LIST
41500: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41501: LD_ADDR_VAR 0 35
41505: PUSH
41506: LD_INT 0
41508: PUSH
41509: LD_INT 0
41511: PUSH
41512: EMPTY
41513: LIST
41514: LIST
41515: PUSH
41516: LD_INT 0
41518: PUSH
41519: LD_INT 1
41521: NEG
41522: PUSH
41523: EMPTY
41524: LIST
41525: LIST
41526: PUSH
41527: LD_INT 1
41529: PUSH
41530: LD_INT 0
41532: PUSH
41533: EMPTY
41534: LIST
41535: LIST
41536: PUSH
41537: LD_INT 1
41539: PUSH
41540: LD_INT 1
41542: PUSH
41543: EMPTY
41544: LIST
41545: LIST
41546: PUSH
41547: LD_INT 0
41549: PUSH
41550: LD_INT 1
41552: PUSH
41553: EMPTY
41554: LIST
41555: LIST
41556: PUSH
41557: LD_INT 1
41559: NEG
41560: PUSH
41561: LD_INT 0
41563: PUSH
41564: EMPTY
41565: LIST
41566: LIST
41567: PUSH
41568: LD_INT 1
41570: NEG
41571: PUSH
41572: LD_INT 1
41574: NEG
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 2
41582: PUSH
41583: LD_INT 1
41585: PUSH
41586: EMPTY
41587: LIST
41588: LIST
41589: PUSH
41590: LD_INT 2
41592: NEG
41593: PUSH
41594: LD_INT 1
41596: NEG
41597: PUSH
41598: EMPTY
41599: LIST
41600: LIST
41601: PUSH
41602: EMPTY
41603: LIST
41604: LIST
41605: LIST
41606: LIST
41607: LIST
41608: LIST
41609: LIST
41610: LIST
41611: LIST
41612: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41613: LD_ADDR_VAR 0 36
41617: PUSH
41618: LD_INT 0
41620: PUSH
41621: LD_INT 0
41623: PUSH
41624: EMPTY
41625: LIST
41626: LIST
41627: PUSH
41628: LD_INT 0
41630: PUSH
41631: LD_INT 1
41633: NEG
41634: PUSH
41635: EMPTY
41636: LIST
41637: LIST
41638: PUSH
41639: LD_INT 1
41641: PUSH
41642: LD_INT 0
41644: PUSH
41645: EMPTY
41646: LIST
41647: LIST
41648: PUSH
41649: LD_INT 1
41651: PUSH
41652: LD_INT 1
41654: PUSH
41655: EMPTY
41656: LIST
41657: LIST
41658: PUSH
41659: LD_INT 0
41661: PUSH
41662: LD_INT 1
41664: PUSH
41665: EMPTY
41666: LIST
41667: LIST
41668: PUSH
41669: LD_INT 1
41671: NEG
41672: PUSH
41673: LD_INT 0
41675: PUSH
41676: EMPTY
41677: LIST
41678: LIST
41679: PUSH
41680: LD_INT 1
41682: NEG
41683: PUSH
41684: LD_INT 1
41686: NEG
41687: PUSH
41688: EMPTY
41689: LIST
41690: LIST
41691: PUSH
41692: LD_INT 1
41694: NEG
41695: PUSH
41696: LD_INT 2
41698: NEG
41699: PUSH
41700: EMPTY
41701: LIST
41702: LIST
41703: PUSH
41704: LD_INT 1
41706: PUSH
41707: LD_INT 2
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: PUSH
41714: EMPTY
41715: LIST
41716: LIST
41717: LIST
41718: LIST
41719: LIST
41720: LIST
41721: LIST
41722: LIST
41723: LIST
41724: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41725: LD_ADDR_VAR 0 37
41729: PUSH
41730: LD_INT 0
41732: PUSH
41733: LD_INT 0
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: PUSH
41740: LD_INT 0
41742: PUSH
41743: LD_INT 1
41745: NEG
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PUSH
41751: LD_INT 1
41753: PUSH
41754: LD_INT 0
41756: PUSH
41757: EMPTY
41758: LIST
41759: LIST
41760: PUSH
41761: LD_INT 1
41763: PUSH
41764: LD_INT 1
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: LD_INT 0
41773: PUSH
41774: LD_INT 1
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 1
41783: NEG
41784: PUSH
41785: LD_INT 0
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 1
41794: NEG
41795: PUSH
41796: LD_INT 1
41798: NEG
41799: PUSH
41800: EMPTY
41801: LIST
41802: LIST
41803: PUSH
41804: LD_INT 1
41806: PUSH
41807: LD_INT 1
41809: NEG
41810: PUSH
41811: EMPTY
41812: LIST
41813: LIST
41814: PUSH
41815: LD_INT 1
41817: NEG
41818: PUSH
41819: LD_INT 1
41821: PUSH
41822: EMPTY
41823: LIST
41824: LIST
41825: PUSH
41826: EMPTY
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
41837: LD_ADDR_VAR 0 38
41841: PUSH
41842: LD_INT 0
41844: PUSH
41845: LD_INT 0
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 0
41854: PUSH
41855: LD_INT 1
41857: NEG
41858: PUSH
41859: EMPTY
41860: LIST
41861: LIST
41862: PUSH
41863: LD_INT 1
41865: PUSH
41866: LD_INT 0
41868: PUSH
41869: EMPTY
41870: LIST
41871: LIST
41872: PUSH
41873: LD_INT 1
41875: PUSH
41876: LD_INT 1
41878: PUSH
41879: EMPTY
41880: LIST
41881: LIST
41882: PUSH
41883: LD_INT 0
41885: PUSH
41886: LD_INT 1
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 1
41895: NEG
41896: PUSH
41897: LD_INT 0
41899: PUSH
41900: EMPTY
41901: LIST
41902: LIST
41903: PUSH
41904: LD_INT 1
41906: NEG
41907: PUSH
41908: LD_INT 1
41910: NEG
41911: PUSH
41912: EMPTY
41913: LIST
41914: LIST
41915: PUSH
41916: LD_INT 2
41918: PUSH
41919: LD_INT 1
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: LD_INT 2
41928: NEG
41929: PUSH
41930: LD_INT 1
41932: NEG
41933: PUSH
41934: EMPTY
41935: LIST
41936: LIST
41937: PUSH
41938: EMPTY
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
41949: LD_ADDR_VAR 0 39
41953: PUSH
41954: LD_INT 0
41956: PUSH
41957: LD_INT 0
41959: PUSH
41960: EMPTY
41961: LIST
41962: LIST
41963: PUSH
41964: LD_INT 0
41966: PUSH
41967: LD_INT 1
41969: NEG
41970: PUSH
41971: EMPTY
41972: LIST
41973: LIST
41974: PUSH
41975: LD_INT 1
41977: PUSH
41978: LD_INT 0
41980: PUSH
41981: EMPTY
41982: LIST
41983: LIST
41984: PUSH
41985: LD_INT 1
41987: PUSH
41988: LD_INT 1
41990: PUSH
41991: EMPTY
41992: LIST
41993: LIST
41994: PUSH
41995: LD_INT 0
41997: PUSH
41998: LD_INT 1
42000: PUSH
42001: EMPTY
42002: LIST
42003: LIST
42004: PUSH
42005: LD_INT 1
42007: NEG
42008: PUSH
42009: LD_INT 0
42011: PUSH
42012: EMPTY
42013: LIST
42014: LIST
42015: PUSH
42016: LD_INT 1
42018: NEG
42019: PUSH
42020: LD_INT 1
42022: NEG
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 1
42030: NEG
42031: PUSH
42032: LD_INT 2
42034: NEG
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 1
42042: PUSH
42043: LD_INT 2
42045: PUSH
42046: EMPTY
42047: LIST
42048: LIST
42049: PUSH
42050: EMPTY
42051: LIST
42052: LIST
42053: LIST
42054: LIST
42055: LIST
42056: LIST
42057: LIST
42058: LIST
42059: LIST
42060: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42061: LD_ADDR_VAR 0 40
42065: PUSH
42066: LD_INT 0
42068: PUSH
42069: LD_INT 0
42071: PUSH
42072: EMPTY
42073: LIST
42074: LIST
42075: PUSH
42076: LD_INT 0
42078: PUSH
42079: LD_INT 1
42081: NEG
42082: PUSH
42083: EMPTY
42084: LIST
42085: LIST
42086: PUSH
42087: LD_INT 1
42089: PUSH
42090: LD_INT 0
42092: PUSH
42093: EMPTY
42094: LIST
42095: LIST
42096: PUSH
42097: LD_INT 1
42099: PUSH
42100: LD_INT 1
42102: PUSH
42103: EMPTY
42104: LIST
42105: LIST
42106: PUSH
42107: LD_INT 0
42109: PUSH
42110: LD_INT 1
42112: PUSH
42113: EMPTY
42114: LIST
42115: LIST
42116: PUSH
42117: LD_INT 1
42119: NEG
42120: PUSH
42121: LD_INT 0
42123: PUSH
42124: EMPTY
42125: LIST
42126: LIST
42127: PUSH
42128: LD_INT 1
42130: NEG
42131: PUSH
42132: LD_INT 1
42134: NEG
42135: PUSH
42136: EMPTY
42137: LIST
42138: LIST
42139: PUSH
42140: LD_INT 1
42142: PUSH
42143: LD_INT 1
42145: NEG
42146: PUSH
42147: EMPTY
42148: LIST
42149: LIST
42150: PUSH
42151: LD_INT 1
42153: NEG
42154: PUSH
42155: LD_INT 1
42157: PUSH
42158: EMPTY
42159: LIST
42160: LIST
42161: PUSH
42162: EMPTY
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42173: LD_ADDR_VAR 0 41
42177: PUSH
42178: LD_INT 0
42180: PUSH
42181: LD_INT 0
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 0
42190: PUSH
42191: LD_INT 1
42193: NEG
42194: PUSH
42195: EMPTY
42196: LIST
42197: LIST
42198: PUSH
42199: LD_INT 1
42201: PUSH
42202: LD_INT 0
42204: PUSH
42205: EMPTY
42206: LIST
42207: LIST
42208: PUSH
42209: LD_INT 1
42211: PUSH
42212: LD_INT 1
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: PUSH
42219: LD_INT 0
42221: PUSH
42222: LD_INT 1
42224: PUSH
42225: EMPTY
42226: LIST
42227: LIST
42228: PUSH
42229: LD_INT 1
42231: NEG
42232: PUSH
42233: LD_INT 0
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 1
42242: NEG
42243: PUSH
42244: LD_INT 1
42246: NEG
42247: PUSH
42248: EMPTY
42249: LIST
42250: LIST
42251: PUSH
42252: LD_INT 1
42254: NEG
42255: PUSH
42256: LD_INT 2
42258: NEG
42259: PUSH
42260: EMPTY
42261: LIST
42262: LIST
42263: PUSH
42264: LD_INT 1
42266: PUSH
42267: LD_INT 1
42269: NEG
42270: PUSH
42271: EMPTY
42272: LIST
42273: LIST
42274: PUSH
42275: LD_INT 2
42277: PUSH
42278: LD_INT 0
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: LD_INT 2
42287: PUSH
42288: LD_INT 1
42290: PUSH
42291: EMPTY
42292: LIST
42293: LIST
42294: PUSH
42295: LD_INT 2
42297: PUSH
42298: LD_INT 2
42300: PUSH
42301: EMPTY
42302: LIST
42303: LIST
42304: PUSH
42305: LD_INT 1
42307: PUSH
42308: LD_INT 2
42310: PUSH
42311: EMPTY
42312: LIST
42313: LIST
42314: PUSH
42315: LD_INT 1
42317: NEG
42318: PUSH
42319: LD_INT 1
42321: PUSH
42322: EMPTY
42323: LIST
42324: LIST
42325: PUSH
42326: LD_INT 2
42328: NEG
42329: PUSH
42330: LD_INT 0
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_INT 2
42339: NEG
42340: PUSH
42341: LD_INT 1
42343: NEG
42344: PUSH
42345: EMPTY
42346: LIST
42347: LIST
42348: PUSH
42349: LD_INT 2
42351: NEG
42352: PUSH
42353: LD_INT 2
42355: NEG
42356: PUSH
42357: EMPTY
42358: LIST
42359: LIST
42360: PUSH
42361: LD_INT 2
42363: NEG
42364: PUSH
42365: LD_INT 3
42367: NEG
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 2
42375: PUSH
42376: LD_INT 1
42378: NEG
42379: PUSH
42380: EMPTY
42381: LIST
42382: LIST
42383: PUSH
42384: LD_INT 3
42386: PUSH
42387: LD_INT 0
42389: PUSH
42390: EMPTY
42391: LIST
42392: LIST
42393: PUSH
42394: LD_INT 3
42396: PUSH
42397: LD_INT 1
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 3
42406: PUSH
42407: LD_INT 2
42409: PUSH
42410: EMPTY
42411: LIST
42412: LIST
42413: PUSH
42414: LD_INT 3
42416: PUSH
42417: LD_INT 3
42419: PUSH
42420: EMPTY
42421: LIST
42422: LIST
42423: PUSH
42424: LD_INT 2
42426: PUSH
42427: LD_INT 3
42429: PUSH
42430: EMPTY
42431: LIST
42432: LIST
42433: PUSH
42434: LD_INT 2
42436: NEG
42437: PUSH
42438: LD_INT 1
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_INT 3
42447: NEG
42448: PUSH
42449: LD_INT 0
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 3
42458: NEG
42459: PUSH
42460: LD_INT 1
42462: NEG
42463: PUSH
42464: EMPTY
42465: LIST
42466: LIST
42467: PUSH
42468: LD_INT 3
42470: NEG
42471: PUSH
42472: LD_INT 2
42474: NEG
42475: PUSH
42476: EMPTY
42477: LIST
42478: LIST
42479: PUSH
42480: LD_INT 3
42482: NEG
42483: PUSH
42484: LD_INT 3
42486: NEG
42487: PUSH
42488: EMPTY
42489: LIST
42490: LIST
42491: PUSH
42492: EMPTY
42493: LIST
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42523: LD_ADDR_VAR 0 42
42527: PUSH
42528: LD_INT 0
42530: PUSH
42531: LD_INT 0
42533: PUSH
42534: EMPTY
42535: LIST
42536: LIST
42537: PUSH
42538: LD_INT 0
42540: PUSH
42541: LD_INT 1
42543: NEG
42544: PUSH
42545: EMPTY
42546: LIST
42547: LIST
42548: PUSH
42549: LD_INT 1
42551: PUSH
42552: LD_INT 0
42554: PUSH
42555: EMPTY
42556: LIST
42557: LIST
42558: PUSH
42559: LD_INT 1
42561: PUSH
42562: LD_INT 1
42564: PUSH
42565: EMPTY
42566: LIST
42567: LIST
42568: PUSH
42569: LD_INT 0
42571: PUSH
42572: LD_INT 1
42574: PUSH
42575: EMPTY
42576: LIST
42577: LIST
42578: PUSH
42579: LD_INT 1
42581: NEG
42582: PUSH
42583: LD_INT 0
42585: PUSH
42586: EMPTY
42587: LIST
42588: LIST
42589: PUSH
42590: LD_INT 1
42592: NEG
42593: PUSH
42594: LD_INT 1
42596: NEG
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PUSH
42602: LD_INT 1
42604: NEG
42605: PUSH
42606: LD_INT 2
42608: NEG
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: LD_INT 0
42616: PUSH
42617: LD_INT 2
42619: NEG
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 1
42627: PUSH
42628: LD_INT 1
42630: NEG
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: PUSH
42636: LD_INT 2
42638: PUSH
42639: LD_INT 1
42641: PUSH
42642: EMPTY
42643: LIST
42644: LIST
42645: PUSH
42646: LD_INT 2
42648: PUSH
42649: LD_INT 2
42651: PUSH
42652: EMPTY
42653: LIST
42654: LIST
42655: PUSH
42656: LD_INT 1
42658: PUSH
42659: LD_INT 2
42661: PUSH
42662: EMPTY
42663: LIST
42664: LIST
42665: PUSH
42666: LD_INT 0
42668: PUSH
42669: LD_INT 2
42671: PUSH
42672: EMPTY
42673: LIST
42674: LIST
42675: PUSH
42676: LD_INT 1
42678: NEG
42679: PUSH
42680: LD_INT 1
42682: PUSH
42683: EMPTY
42684: LIST
42685: LIST
42686: PUSH
42687: LD_INT 2
42689: NEG
42690: PUSH
42691: LD_INT 1
42693: NEG
42694: PUSH
42695: EMPTY
42696: LIST
42697: LIST
42698: PUSH
42699: LD_INT 2
42701: NEG
42702: PUSH
42703: LD_INT 2
42705: NEG
42706: PUSH
42707: EMPTY
42708: LIST
42709: LIST
42710: PUSH
42711: LD_INT 2
42713: NEG
42714: PUSH
42715: LD_INT 3
42717: NEG
42718: PUSH
42719: EMPTY
42720: LIST
42721: LIST
42722: PUSH
42723: LD_INT 1
42725: NEG
42726: PUSH
42727: LD_INT 3
42729: NEG
42730: PUSH
42731: EMPTY
42732: LIST
42733: LIST
42734: PUSH
42735: LD_INT 0
42737: PUSH
42738: LD_INT 3
42740: NEG
42741: PUSH
42742: EMPTY
42743: LIST
42744: LIST
42745: PUSH
42746: LD_INT 1
42748: PUSH
42749: LD_INT 2
42751: NEG
42752: PUSH
42753: EMPTY
42754: LIST
42755: LIST
42756: PUSH
42757: LD_INT 3
42759: PUSH
42760: LD_INT 2
42762: PUSH
42763: EMPTY
42764: LIST
42765: LIST
42766: PUSH
42767: LD_INT 3
42769: PUSH
42770: LD_INT 3
42772: PUSH
42773: EMPTY
42774: LIST
42775: LIST
42776: PUSH
42777: LD_INT 2
42779: PUSH
42780: LD_INT 3
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 1
42789: PUSH
42790: LD_INT 3
42792: PUSH
42793: EMPTY
42794: LIST
42795: LIST
42796: PUSH
42797: LD_INT 0
42799: PUSH
42800: LD_INT 3
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 1
42809: NEG
42810: PUSH
42811: LD_INT 2
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 3
42820: NEG
42821: PUSH
42822: LD_INT 2
42824: NEG
42825: PUSH
42826: EMPTY
42827: LIST
42828: LIST
42829: PUSH
42830: LD_INT 3
42832: NEG
42833: PUSH
42834: LD_INT 3
42836: NEG
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: PUSH
42842: EMPTY
42843: LIST
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: LIST
42861: LIST
42862: LIST
42863: LIST
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42873: LD_ADDR_VAR 0 43
42877: PUSH
42878: LD_INT 0
42880: PUSH
42881: LD_INT 0
42883: PUSH
42884: EMPTY
42885: LIST
42886: LIST
42887: PUSH
42888: LD_INT 0
42890: PUSH
42891: LD_INT 1
42893: NEG
42894: PUSH
42895: EMPTY
42896: LIST
42897: LIST
42898: PUSH
42899: LD_INT 1
42901: PUSH
42902: LD_INT 0
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: LD_INT 1
42911: PUSH
42912: LD_INT 1
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: LD_INT 0
42921: PUSH
42922: LD_INT 1
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 1
42931: NEG
42932: PUSH
42933: LD_INT 0
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 1
42942: NEG
42943: PUSH
42944: LD_INT 1
42946: NEG
42947: PUSH
42948: EMPTY
42949: LIST
42950: LIST
42951: PUSH
42952: LD_INT 1
42954: NEG
42955: PUSH
42956: LD_INT 2
42958: NEG
42959: PUSH
42960: EMPTY
42961: LIST
42962: LIST
42963: PUSH
42964: LD_INT 0
42966: PUSH
42967: LD_INT 2
42969: NEG
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 1
42977: PUSH
42978: LD_INT 1
42980: NEG
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: LD_INT 2
42988: PUSH
42989: LD_INT 0
42991: PUSH
42992: EMPTY
42993: LIST
42994: LIST
42995: PUSH
42996: LD_INT 2
42998: PUSH
42999: LD_INT 1
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 1
43008: PUSH
43009: LD_INT 2
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PUSH
43016: LD_INT 0
43018: PUSH
43019: LD_INT 2
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PUSH
43026: LD_INT 1
43028: NEG
43029: PUSH
43030: LD_INT 1
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 2
43039: NEG
43040: PUSH
43041: LD_INT 0
43043: PUSH
43044: EMPTY
43045: LIST
43046: LIST
43047: PUSH
43048: LD_INT 2
43050: NEG
43051: PUSH
43052: LD_INT 1
43054: NEG
43055: PUSH
43056: EMPTY
43057: LIST
43058: LIST
43059: PUSH
43060: LD_INT 1
43062: NEG
43063: PUSH
43064: LD_INT 3
43066: NEG
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 0
43074: PUSH
43075: LD_INT 3
43077: NEG
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 1
43085: PUSH
43086: LD_INT 2
43088: NEG
43089: PUSH
43090: EMPTY
43091: LIST
43092: LIST
43093: PUSH
43094: LD_INT 2
43096: PUSH
43097: LD_INT 1
43099: NEG
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: LD_INT 3
43107: PUSH
43108: LD_INT 0
43110: PUSH
43111: EMPTY
43112: LIST
43113: LIST
43114: PUSH
43115: LD_INT 3
43117: PUSH
43118: LD_INT 1
43120: PUSH
43121: EMPTY
43122: LIST
43123: LIST
43124: PUSH
43125: LD_INT 1
43127: PUSH
43128: LD_INT 3
43130: PUSH
43131: EMPTY
43132: LIST
43133: LIST
43134: PUSH
43135: LD_INT 0
43137: PUSH
43138: LD_INT 3
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: PUSH
43145: LD_INT 1
43147: NEG
43148: PUSH
43149: LD_INT 2
43151: PUSH
43152: EMPTY
43153: LIST
43154: LIST
43155: PUSH
43156: LD_INT 2
43158: NEG
43159: PUSH
43160: LD_INT 1
43162: PUSH
43163: EMPTY
43164: LIST
43165: LIST
43166: PUSH
43167: LD_INT 3
43169: NEG
43170: PUSH
43171: LD_INT 0
43173: PUSH
43174: EMPTY
43175: LIST
43176: LIST
43177: PUSH
43178: LD_INT 3
43180: NEG
43181: PUSH
43182: LD_INT 1
43184: NEG
43185: PUSH
43186: EMPTY
43187: LIST
43188: LIST
43189: PUSH
43190: EMPTY
43191: LIST
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43221: LD_ADDR_VAR 0 44
43225: PUSH
43226: LD_INT 0
43228: PUSH
43229: LD_INT 0
43231: PUSH
43232: EMPTY
43233: LIST
43234: LIST
43235: PUSH
43236: LD_INT 0
43238: PUSH
43239: LD_INT 1
43241: NEG
43242: PUSH
43243: EMPTY
43244: LIST
43245: LIST
43246: PUSH
43247: LD_INT 1
43249: PUSH
43250: LD_INT 0
43252: PUSH
43253: EMPTY
43254: LIST
43255: LIST
43256: PUSH
43257: LD_INT 1
43259: PUSH
43260: LD_INT 1
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: PUSH
43267: LD_INT 0
43269: PUSH
43270: LD_INT 1
43272: PUSH
43273: EMPTY
43274: LIST
43275: LIST
43276: PUSH
43277: LD_INT 1
43279: NEG
43280: PUSH
43281: LD_INT 0
43283: PUSH
43284: EMPTY
43285: LIST
43286: LIST
43287: PUSH
43288: LD_INT 1
43290: NEG
43291: PUSH
43292: LD_INT 1
43294: NEG
43295: PUSH
43296: EMPTY
43297: LIST
43298: LIST
43299: PUSH
43300: LD_INT 1
43302: NEG
43303: PUSH
43304: LD_INT 2
43306: NEG
43307: PUSH
43308: EMPTY
43309: LIST
43310: LIST
43311: PUSH
43312: LD_INT 1
43314: PUSH
43315: LD_INT 1
43317: NEG
43318: PUSH
43319: EMPTY
43320: LIST
43321: LIST
43322: PUSH
43323: LD_INT 2
43325: PUSH
43326: LD_INT 0
43328: PUSH
43329: EMPTY
43330: LIST
43331: LIST
43332: PUSH
43333: LD_INT 2
43335: PUSH
43336: LD_INT 1
43338: PUSH
43339: EMPTY
43340: LIST
43341: LIST
43342: PUSH
43343: LD_INT 2
43345: PUSH
43346: LD_INT 2
43348: PUSH
43349: EMPTY
43350: LIST
43351: LIST
43352: PUSH
43353: LD_INT 1
43355: PUSH
43356: LD_INT 2
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: PUSH
43363: LD_INT 1
43365: NEG
43366: PUSH
43367: LD_INT 1
43369: PUSH
43370: EMPTY
43371: LIST
43372: LIST
43373: PUSH
43374: LD_INT 2
43376: NEG
43377: PUSH
43378: LD_INT 0
43380: PUSH
43381: EMPTY
43382: LIST
43383: LIST
43384: PUSH
43385: LD_INT 2
43387: NEG
43388: PUSH
43389: LD_INT 1
43391: NEG
43392: PUSH
43393: EMPTY
43394: LIST
43395: LIST
43396: PUSH
43397: LD_INT 2
43399: NEG
43400: PUSH
43401: LD_INT 2
43403: NEG
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 2
43411: NEG
43412: PUSH
43413: LD_INT 3
43415: NEG
43416: PUSH
43417: EMPTY
43418: LIST
43419: LIST
43420: PUSH
43421: LD_INT 2
43423: PUSH
43424: LD_INT 1
43426: NEG
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 3
43434: PUSH
43435: LD_INT 0
43437: PUSH
43438: EMPTY
43439: LIST
43440: LIST
43441: PUSH
43442: LD_INT 3
43444: PUSH
43445: LD_INT 1
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: LD_INT 3
43454: PUSH
43455: LD_INT 2
43457: PUSH
43458: EMPTY
43459: LIST
43460: LIST
43461: PUSH
43462: LD_INT 3
43464: PUSH
43465: LD_INT 3
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: LD_INT 2
43474: PUSH
43475: LD_INT 3
43477: PUSH
43478: EMPTY
43479: LIST
43480: LIST
43481: PUSH
43482: LD_INT 2
43484: NEG
43485: PUSH
43486: LD_INT 1
43488: PUSH
43489: EMPTY
43490: LIST
43491: LIST
43492: PUSH
43493: LD_INT 3
43495: NEG
43496: PUSH
43497: LD_INT 0
43499: PUSH
43500: EMPTY
43501: LIST
43502: LIST
43503: PUSH
43504: LD_INT 3
43506: NEG
43507: PUSH
43508: LD_INT 1
43510: NEG
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 3
43518: NEG
43519: PUSH
43520: LD_INT 2
43522: NEG
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 3
43530: NEG
43531: PUSH
43532: LD_INT 3
43534: NEG
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PUSH
43540: EMPTY
43541: LIST
43542: LIST
43543: LIST
43544: LIST
43545: LIST
43546: LIST
43547: LIST
43548: LIST
43549: LIST
43550: LIST
43551: LIST
43552: LIST
43553: LIST
43554: LIST
43555: LIST
43556: LIST
43557: LIST
43558: LIST
43559: LIST
43560: LIST
43561: LIST
43562: LIST
43563: LIST
43564: LIST
43565: LIST
43566: LIST
43567: LIST
43568: LIST
43569: LIST
43570: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43571: LD_ADDR_VAR 0 45
43575: PUSH
43576: LD_INT 0
43578: PUSH
43579: LD_INT 0
43581: PUSH
43582: EMPTY
43583: LIST
43584: LIST
43585: PUSH
43586: LD_INT 0
43588: PUSH
43589: LD_INT 1
43591: NEG
43592: PUSH
43593: EMPTY
43594: LIST
43595: LIST
43596: PUSH
43597: LD_INT 1
43599: PUSH
43600: LD_INT 0
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: PUSH
43607: LD_INT 1
43609: PUSH
43610: LD_INT 1
43612: PUSH
43613: EMPTY
43614: LIST
43615: LIST
43616: PUSH
43617: LD_INT 0
43619: PUSH
43620: LD_INT 1
43622: PUSH
43623: EMPTY
43624: LIST
43625: LIST
43626: PUSH
43627: LD_INT 1
43629: NEG
43630: PUSH
43631: LD_INT 0
43633: PUSH
43634: EMPTY
43635: LIST
43636: LIST
43637: PUSH
43638: LD_INT 1
43640: NEG
43641: PUSH
43642: LD_INT 1
43644: NEG
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: LD_INT 1
43652: NEG
43653: PUSH
43654: LD_INT 2
43656: NEG
43657: PUSH
43658: EMPTY
43659: LIST
43660: LIST
43661: PUSH
43662: LD_INT 0
43664: PUSH
43665: LD_INT 2
43667: NEG
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 1
43675: PUSH
43676: LD_INT 1
43678: NEG
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PUSH
43684: LD_INT 2
43686: PUSH
43687: LD_INT 1
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: PUSH
43694: LD_INT 2
43696: PUSH
43697: LD_INT 2
43699: PUSH
43700: EMPTY
43701: LIST
43702: LIST
43703: PUSH
43704: LD_INT 1
43706: PUSH
43707: LD_INT 2
43709: PUSH
43710: EMPTY
43711: LIST
43712: LIST
43713: PUSH
43714: LD_INT 0
43716: PUSH
43717: LD_INT 2
43719: PUSH
43720: EMPTY
43721: LIST
43722: LIST
43723: PUSH
43724: LD_INT 1
43726: NEG
43727: PUSH
43728: LD_INT 1
43730: PUSH
43731: EMPTY
43732: LIST
43733: LIST
43734: PUSH
43735: LD_INT 2
43737: NEG
43738: PUSH
43739: LD_INT 1
43741: NEG
43742: PUSH
43743: EMPTY
43744: LIST
43745: LIST
43746: PUSH
43747: LD_INT 2
43749: NEG
43750: PUSH
43751: LD_INT 2
43753: NEG
43754: PUSH
43755: EMPTY
43756: LIST
43757: LIST
43758: PUSH
43759: LD_INT 2
43761: NEG
43762: PUSH
43763: LD_INT 3
43765: NEG
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 1
43773: NEG
43774: PUSH
43775: LD_INT 3
43777: NEG
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 0
43785: PUSH
43786: LD_INT 3
43788: NEG
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: LD_INT 1
43796: PUSH
43797: LD_INT 2
43799: NEG
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 3
43807: PUSH
43808: LD_INT 2
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 3
43817: PUSH
43818: LD_INT 3
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 2
43827: PUSH
43828: LD_INT 3
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 1
43837: PUSH
43838: LD_INT 3
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 0
43847: PUSH
43848: LD_INT 3
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 1
43857: NEG
43858: PUSH
43859: LD_INT 2
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: LD_INT 3
43868: NEG
43869: PUSH
43870: LD_INT 2
43872: NEG
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 3
43880: NEG
43881: PUSH
43882: LD_INT 3
43884: NEG
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: EMPTY
43891: LIST
43892: LIST
43893: LIST
43894: LIST
43895: LIST
43896: LIST
43897: LIST
43898: LIST
43899: LIST
43900: LIST
43901: LIST
43902: LIST
43903: LIST
43904: LIST
43905: LIST
43906: LIST
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: LIST
43913: LIST
43914: LIST
43915: LIST
43916: LIST
43917: LIST
43918: LIST
43919: LIST
43920: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43921: LD_ADDR_VAR 0 46
43925: PUSH
43926: LD_INT 0
43928: PUSH
43929: LD_INT 0
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 0
43938: PUSH
43939: LD_INT 1
43941: NEG
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 1
43949: PUSH
43950: LD_INT 0
43952: PUSH
43953: EMPTY
43954: LIST
43955: LIST
43956: PUSH
43957: LD_INT 1
43959: PUSH
43960: LD_INT 1
43962: PUSH
43963: EMPTY
43964: LIST
43965: LIST
43966: PUSH
43967: LD_INT 0
43969: PUSH
43970: LD_INT 1
43972: PUSH
43973: EMPTY
43974: LIST
43975: LIST
43976: PUSH
43977: LD_INT 1
43979: NEG
43980: PUSH
43981: LD_INT 0
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 1
43990: NEG
43991: PUSH
43992: LD_INT 1
43994: NEG
43995: PUSH
43996: EMPTY
43997: LIST
43998: LIST
43999: PUSH
44000: LD_INT 1
44002: NEG
44003: PUSH
44004: LD_INT 2
44006: NEG
44007: PUSH
44008: EMPTY
44009: LIST
44010: LIST
44011: PUSH
44012: LD_INT 0
44014: PUSH
44015: LD_INT 2
44017: NEG
44018: PUSH
44019: EMPTY
44020: LIST
44021: LIST
44022: PUSH
44023: LD_INT 1
44025: PUSH
44026: LD_INT 1
44028: NEG
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: LD_INT 2
44036: PUSH
44037: LD_INT 0
44039: PUSH
44040: EMPTY
44041: LIST
44042: LIST
44043: PUSH
44044: LD_INT 2
44046: PUSH
44047: LD_INT 1
44049: PUSH
44050: EMPTY
44051: LIST
44052: LIST
44053: PUSH
44054: LD_INT 1
44056: PUSH
44057: LD_INT 2
44059: PUSH
44060: EMPTY
44061: LIST
44062: LIST
44063: PUSH
44064: LD_INT 0
44066: PUSH
44067: LD_INT 2
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: PUSH
44074: LD_INT 1
44076: NEG
44077: PUSH
44078: LD_INT 1
44080: PUSH
44081: EMPTY
44082: LIST
44083: LIST
44084: PUSH
44085: LD_INT 2
44087: NEG
44088: PUSH
44089: LD_INT 0
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 2
44098: NEG
44099: PUSH
44100: LD_INT 1
44102: NEG
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 1
44110: NEG
44111: PUSH
44112: LD_INT 3
44114: NEG
44115: PUSH
44116: EMPTY
44117: LIST
44118: LIST
44119: PUSH
44120: LD_INT 0
44122: PUSH
44123: LD_INT 3
44125: NEG
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_INT 1
44133: PUSH
44134: LD_INT 2
44136: NEG
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: PUSH
44142: LD_INT 2
44144: PUSH
44145: LD_INT 1
44147: NEG
44148: PUSH
44149: EMPTY
44150: LIST
44151: LIST
44152: PUSH
44153: LD_INT 3
44155: PUSH
44156: LD_INT 0
44158: PUSH
44159: EMPTY
44160: LIST
44161: LIST
44162: PUSH
44163: LD_INT 3
44165: PUSH
44166: LD_INT 1
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 1
44175: PUSH
44176: LD_INT 3
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: PUSH
44183: LD_INT 0
44185: PUSH
44186: LD_INT 3
44188: PUSH
44189: EMPTY
44190: LIST
44191: LIST
44192: PUSH
44193: LD_INT 1
44195: NEG
44196: PUSH
44197: LD_INT 2
44199: PUSH
44200: EMPTY
44201: LIST
44202: LIST
44203: PUSH
44204: LD_INT 2
44206: NEG
44207: PUSH
44208: LD_INT 1
44210: PUSH
44211: EMPTY
44212: LIST
44213: LIST
44214: PUSH
44215: LD_INT 3
44217: NEG
44218: PUSH
44219: LD_INT 0
44221: PUSH
44222: EMPTY
44223: LIST
44224: LIST
44225: PUSH
44226: LD_INT 3
44228: NEG
44229: PUSH
44230: LD_INT 1
44232: NEG
44233: PUSH
44234: EMPTY
44235: LIST
44236: LIST
44237: PUSH
44238: EMPTY
44239: LIST
44240: LIST
44241: LIST
44242: LIST
44243: LIST
44244: LIST
44245: LIST
44246: LIST
44247: LIST
44248: LIST
44249: LIST
44250: LIST
44251: LIST
44252: LIST
44253: LIST
44254: LIST
44255: LIST
44256: LIST
44257: LIST
44258: LIST
44259: LIST
44260: LIST
44261: LIST
44262: LIST
44263: LIST
44264: LIST
44265: LIST
44266: LIST
44267: LIST
44268: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44269: LD_ADDR_VAR 0 47
44273: PUSH
44274: LD_INT 0
44276: PUSH
44277: LD_INT 0
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 0
44286: PUSH
44287: LD_INT 1
44289: NEG
44290: PUSH
44291: EMPTY
44292: LIST
44293: LIST
44294: PUSH
44295: LD_INT 1
44297: PUSH
44298: LD_INT 0
44300: PUSH
44301: EMPTY
44302: LIST
44303: LIST
44304: PUSH
44305: LD_INT 1
44307: PUSH
44308: LD_INT 1
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: LD_INT 0
44317: PUSH
44318: LD_INT 1
44320: PUSH
44321: EMPTY
44322: LIST
44323: LIST
44324: PUSH
44325: LD_INT 1
44327: NEG
44328: PUSH
44329: LD_INT 0
44331: PUSH
44332: EMPTY
44333: LIST
44334: LIST
44335: PUSH
44336: LD_INT 1
44338: NEG
44339: PUSH
44340: LD_INT 1
44342: NEG
44343: PUSH
44344: EMPTY
44345: LIST
44346: LIST
44347: PUSH
44348: LD_INT 1
44350: NEG
44351: PUSH
44352: LD_INT 2
44354: NEG
44355: PUSH
44356: EMPTY
44357: LIST
44358: LIST
44359: PUSH
44360: LD_INT 0
44362: PUSH
44363: LD_INT 2
44365: NEG
44366: PUSH
44367: EMPTY
44368: LIST
44369: LIST
44370: PUSH
44371: LD_INT 1
44373: PUSH
44374: LD_INT 1
44376: NEG
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 2
44384: NEG
44385: PUSH
44386: LD_INT 1
44388: NEG
44389: PUSH
44390: EMPTY
44391: LIST
44392: LIST
44393: PUSH
44394: LD_INT 2
44396: NEG
44397: PUSH
44398: LD_INT 2
44400: NEG
44401: PUSH
44402: EMPTY
44403: LIST
44404: LIST
44405: PUSH
44406: EMPTY
44407: LIST
44408: LIST
44409: LIST
44410: LIST
44411: LIST
44412: LIST
44413: LIST
44414: LIST
44415: LIST
44416: LIST
44417: LIST
44418: LIST
44419: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
44420: LD_ADDR_VAR 0 48
44424: PUSH
44425: LD_INT 0
44427: PUSH
44428: LD_INT 0
44430: PUSH
44431: EMPTY
44432: LIST
44433: LIST
44434: PUSH
44435: LD_INT 0
44437: PUSH
44438: LD_INT 1
44440: NEG
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: LD_INT 1
44448: PUSH
44449: LD_INT 0
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 1
44458: PUSH
44459: LD_INT 1
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: PUSH
44466: LD_INT 0
44468: PUSH
44469: LD_INT 1
44471: PUSH
44472: EMPTY
44473: LIST
44474: LIST
44475: PUSH
44476: LD_INT 1
44478: NEG
44479: PUSH
44480: LD_INT 0
44482: PUSH
44483: EMPTY
44484: LIST
44485: LIST
44486: PUSH
44487: LD_INT 1
44489: NEG
44490: PUSH
44491: LD_INT 1
44493: NEG
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 1
44501: NEG
44502: PUSH
44503: LD_INT 2
44505: NEG
44506: PUSH
44507: EMPTY
44508: LIST
44509: LIST
44510: PUSH
44511: LD_INT 0
44513: PUSH
44514: LD_INT 2
44516: NEG
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 1
44524: PUSH
44525: LD_INT 1
44527: NEG
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 2
44535: PUSH
44536: LD_INT 0
44538: PUSH
44539: EMPTY
44540: LIST
44541: LIST
44542: PUSH
44543: LD_INT 2
44545: PUSH
44546: LD_INT 1
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: EMPTY
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: LIST
44566: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
44567: LD_ADDR_VAR 0 49
44571: PUSH
44572: LD_INT 0
44574: PUSH
44575: LD_INT 0
44577: PUSH
44578: EMPTY
44579: LIST
44580: LIST
44581: PUSH
44582: LD_INT 0
44584: PUSH
44585: LD_INT 1
44587: NEG
44588: PUSH
44589: EMPTY
44590: LIST
44591: LIST
44592: PUSH
44593: LD_INT 1
44595: PUSH
44596: LD_INT 0
44598: PUSH
44599: EMPTY
44600: LIST
44601: LIST
44602: PUSH
44603: LD_INT 1
44605: PUSH
44606: LD_INT 1
44608: PUSH
44609: EMPTY
44610: LIST
44611: LIST
44612: PUSH
44613: LD_INT 0
44615: PUSH
44616: LD_INT 1
44618: PUSH
44619: EMPTY
44620: LIST
44621: LIST
44622: PUSH
44623: LD_INT 1
44625: NEG
44626: PUSH
44627: LD_INT 0
44629: PUSH
44630: EMPTY
44631: LIST
44632: LIST
44633: PUSH
44634: LD_INT 1
44636: NEG
44637: PUSH
44638: LD_INT 1
44640: NEG
44641: PUSH
44642: EMPTY
44643: LIST
44644: LIST
44645: PUSH
44646: LD_INT 1
44648: PUSH
44649: LD_INT 1
44651: NEG
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 2
44659: PUSH
44660: LD_INT 0
44662: PUSH
44663: EMPTY
44664: LIST
44665: LIST
44666: PUSH
44667: LD_INT 2
44669: PUSH
44670: LD_INT 1
44672: PUSH
44673: EMPTY
44674: LIST
44675: LIST
44676: PUSH
44677: LD_INT 2
44679: PUSH
44680: LD_INT 2
44682: PUSH
44683: EMPTY
44684: LIST
44685: LIST
44686: PUSH
44687: LD_INT 1
44689: PUSH
44690: LD_INT 2
44692: PUSH
44693: EMPTY
44694: LIST
44695: LIST
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: LIST
44701: LIST
44702: LIST
44703: LIST
44704: LIST
44705: LIST
44706: LIST
44707: LIST
44708: LIST
44709: LIST
44710: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
44711: LD_ADDR_VAR 0 50
44715: PUSH
44716: LD_INT 0
44718: PUSH
44719: LD_INT 0
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 0
44728: PUSH
44729: LD_INT 1
44731: NEG
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 1
44739: PUSH
44740: LD_INT 0
44742: PUSH
44743: EMPTY
44744: LIST
44745: LIST
44746: PUSH
44747: LD_INT 1
44749: PUSH
44750: LD_INT 1
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 0
44759: PUSH
44760: LD_INT 1
44762: PUSH
44763: EMPTY
44764: LIST
44765: LIST
44766: PUSH
44767: LD_INT 1
44769: NEG
44770: PUSH
44771: LD_INT 0
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 1
44780: NEG
44781: PUSH
44782: LD_INT 1
44784: NEG
44785: PUSH
44786: EMPTY
44787: LIST
44788: LIST
44789: PUSH
44790: LD_INT 2
44792: PUSH
44793: LD_INT 1
44795: PUSH
44796: EMPTY
44797: LIST
44798: LIST
44799: PUSH
44800: LD_INT 2
44802: PUSH
44803: LD_INT 2
44805: PUSH
44806: EMPTY
44807: LIST
44808: LIST
44809: PUSH
44810: LD_INT 1
44812: PUSH
44813: LD_INT 2
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: PUSH
44820: LD_INT 0
44822: PUSH
44823: LD_INT 2
44825: PUSH
44826: EMPTY
44827: LIST
44828: LIST
44829: PUSH
44830: LD_INT 1
44832: NEG
44833: PUSH
44834: LD_INT 1
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: EMPTY
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
44855: LD_ADDR_VAR 0 51
44859: PUSH
44860: LD_INT 0
44862: PUSH
44863: LD_INT 0
44865: PUSH
44866: EMPTY
44867: LIST
44868: LIST
44869: PUSH
44870: LD_INT 0
44872: PUSH
44873: LD_INT 1
44875: NEG
44876: PUSH
44877: EMPTY
44878: LIST
44879: LIST
44880: PUSH
44881: LD_INT 1
44883: PUSH
44884: LD_INT 0
44886: PUSH
44887: EMPTY
44888: LIST
44889: LIST
44890: PUSH
44891: LD_INT 1
44893: PUSH
44894: LD_INT 1
44896: PUSH
44897: EMPTY
44898: LIST
44899: LIST
44900: PUSH
44901: LD_INT 0
44903: PUSH
44904: LD_INT 1
44906: PUSH
44907: EMPTY
44908: LIST
44909: LIST
44910: PUSH
44911: LD_INT 1
44913: NEG
44914: PUSH
44915: LD_INT 0
44917: PUSH
44918: EMPTY
44919: LIST
44920: LIST
44921: PUSH
44922: LD_INT 1
44924: NEG
44925: PUSH
44926: LD_INT 1
44928: NEG
44929: PUSH
44930: EMPTY
44931: LIST
44932: LIST
44933: PUSH
44934: LD_INT 1
44936: PUSH
44937: LD_INT 2
44939: PUSH
44940: EMPTY
44941: LIST
44942: LIST
44943: PUSH
44944: LD_INT 0
44946: PUSH
44947: LD_INT 2
44949: PUSH
44950: EMPTY
44951: LIST
44952: LIST
44953: PUSH
44954: LD_INT 1
44956: NEG
44957: PUSH
44958: LD_INT 1
44960: PUSH
44961: EMPTY
44962: LIST
44963: LIST
44964: PUSH
44965: LD_INT 2
44967: NEG
44968: PUSH
44969: LD_INT 0
44971: PUSH
44972: EMPTY
44973: LIST
44974: LIST
44975: PUSH
44976: LD_INT 2
44978: NEG
44979: PUSH
44980: LD_INT 1
44982: NEG
44983: PUSH
44984: EMPTY
44985: LIST
44986: LIST
44987: PUSH
44988: EMPTY
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45002: LD_ADDR_VAR 0 52
45006: PUSH
45007: LD_INT 0
45009: PUSH
45010: LD_INT 0
45012: PUSH
45013: EMPTY
45014: LIST
45015: LIST
45016: PUSH
45017: LD_INT 0
45019: PUSH
45020: LD_INT 1
45022: NEG
45023: PUSH
45024: EMPTY
45025: LIST
45026: LIST
45027: PUSH
45028: LD_INT 1
45030: PUSH
45031: LD_INT 0
45033: PUSH
45034: EMPTY
45035: LIST
45036: LIST
45037: PUSH
45038: LD_INT 1
45040: PUSH
45041: LD_INT 1
45043: PUSH
45044: EMPTY
45045: LIST
45046: LIST
45047: PUSH
45048: LD_INT 0
45050: PUSH
45051: LD_INT 1
45053: PUSH
45054: EMPTY
45055: LIST
45056: LIST
45057: PUSH
45058: LD_INT 1
45060: NEG
45061: PUSH
45062: LD_INT 0
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: LD_INT 1
45071: NEG
45072: PUSH
45073: LD_INT 1
45075: NEG
45076: PUSH
45077: EMPTY
45078: LIST
45079: LIST
45080: PUSH
45081: LD_INT 1
45083: NEG
45084: PUSH
45085: LD_INT 2
45087: NEG
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 1
45095: NEG
45096: PUSH
45097: LD_INT 1
45099: PUSH
45100: EMPTY
45101: LIST
45102: LIST
45103: PUSH
45104: LD_INT 2
45106: NEG
45107: PUSH
45108: LD_INT 0
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 2
45117: NEG
45118: PUSH
45119: LD_INT 1
45121: NEG
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 2
45129: NEG
45130: PUSH
45131: LD_INT 2
45133: NEG
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: EMPTY
45140: LIST
45141: LIST
45142: LIST
45143: LIST
45144: LIST
45145: LIST
45146: LIST
45147: LIST
45148: LIST
45149: LIST
45150: LIST
45151: LIST
45152: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45153: LD_ADDR_VAR 0 53
45157: PUSH
45158: LD_INT 0
45160: PUSH
45161: LD_INT 0
45163: PUSH
45164: EMPTY
45165: LIST
45166: LIST
45167: PUSH
45168: LD_INT 0
45170: PUSH
45171: LD_INT 1
45173: NEG
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 1
45181: PUSH
45182: LD_INT 0
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 1
45191: PUSH
45192: LD_INT 1
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: PUSH
45199: LD_INT 0
45201: PUSH
45202: LD_INT 1
45204: PUSH
45205: EMPTY
45206: LIST
45207: LIST
45208: PUSH
45209: LD_INT 1
45211: NEG
45212: PUSH
45213: LD_INT 0
45215: PUSH
45216: EMPTY
45217: LIST
45218: LIST
45219: PUSH
45220: LD_INT 1
45222: NEG
45223: PUSH
45224: LD_INT 1
45226: NEG
45227: PUSH
45228: EMPTY
45229: LIST
45230: LIST
45231: PUSH
45232: LD_INT 1
45234: NEG
45235: PUSH
45236: LD_INT 2
45238: NEG
45239: PUSH
45240: EMPTY
45241: LIST
45242: LIST
45243: PUSH
45244: LD_INT 0
45246: PUSH
45247: LD_INT 2
45249: NEG
45250: PUSH
45251: EMPTY
45252: LIST
45253: LIST
45254: PUSH
45255: LD_INT 1
45257: PUSH
45258: LD_INT 1
45260: NEG
45261: PUSH
45262: EMPTY
45263: LIST
45264: LIST
45265: PUSH
45266: LD_INT 2
45268: PUSH
45269: LD_INT 0
45271: PUSH
45272: EMPTY
45273: LIST
45274: LIST
45275: PUSH
45276: LD_INT 2
45278: PUSH
45279: LD_INT 1
45281: PUSH
45282: EMPTY
45283: LIST
45284: LIST
45285: PUSH
45286: LD_INT 2
45288: PUSH
45289: LD_INT 2
45291: PUSH
45292: EMPTY
45293: LIST
45294: LIST
45295: PUSH
45296: LD_INT 1
45298: PUSH
45299: LD_INT 2
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 0
45308: PUSH
45309: LD_INT 2
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 1
45318: NEG
45319: PUSH
45320: LD_INT 1
45322: PUSH
45323: EMPTY
45324: LIST
45325: LIST
45326: PUSH
45327: LD_INT 2
45329: NEG
45330: PUSH
45331: LD_INT 0
45333: PUSH
45334: EMPTY
45335: LIST
45336: LIST
45337: PUSH
45338: LD_INT 2
45340: NEG
45341: PUSH
45342: LD_INT 1
45344: NEG
45345: PUSH
45346: EMPTY
45347: LIST
45348: LIST
45349: PUSH
45350: LD_INT 2
45352: NEG
45353: PUSH
45354: LD_INT 2
45356: NEG
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: EMPTY
45363: LIST
45364: LIST
45365: LIST
45366: LIST
45367: LIST
45368: LIST
45369: LIST
45370: LIST
45371: LIST
45372: LIST
45373: LIST
45374: LIST
45375: LIST
45376: LIST
45377: LIST
45378: LIST
45379: LIST
45380: LIST
45381: LIST
45382: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45383: LD_ADDR_VAR 0 54
45387: PUSH
45388: LD_INT 0
45390: PUSH
45391: LD_INT 0
45393: PUSH
45394: EMPTY
45395: LIST
45396: LIST
45397: PUSH
45398: LD_INT 0
45400: PUSH
45401: LD_INT 1
45403: NEG
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 1
45411: PUSH
45412: LD_INT 0
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 1
45421: PUSH
45422: LD_INT 1
45424: PUSH
45425: EMPTY
45426: LIST
45427: LIST
45428: PUSH
45429: LD_INT 0
45431: PUSH
45432: LD_INT 1
45434: PUSH
45435: EMPTY
45436: LIST
45437: LIST
45438: PUSH
45439: LD_INT 1
45441: NEG
45442: PUSH
45443: LD_INT 0
45445: PUSH
45446: EMPTY
45447: LIST
45448: LIST
45449: PUSH
45450: LD_INT 1
45452: NEG
45453: PUSH
45454: LD_INT 1
45456: NEG
45457: PUSH
45458: EMPTY
45459: LIST
45460: LIST
45461: PUSH
45462: LD_INT 1
45464: NEG
45465: PUSH
45466: LD_INT 2
45468: NEG
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 0
45476: PUSH
45477: LD_INT 2
45479: NEG
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 1
45487: PUSH
45488: LD_INT 1
45490: NEG
45491: PUSH
45492: EMPTY
45493: LIST
45494: LIST
45495: PUSH
45496: LD_INT 2
45498: PUSH
45499: LD_INT 0
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 2
45508: PUSH
45509: LD_INT 1
45511: PUSH
45512: EMPTY
45513: LIST
45514: LIST
45515: PUSH
45516: LD_INT 2
45518: PUSH
45519: LD_INT 2
45521: PUSH
45522: EMPTY
45523: LIST
45524: LIST
45525: PUSH
45526: LD_INT 1
45528: PUSH
45529: LD_INT 2
45531: PUSH
45532: EMPTY
45533: LIST
45534: LIST
45535: PUSH
45536: LD_INT 0
45538: PUSH
45539: LD_INT 2
45541: PUSH
45542: EMPTY
45543: LIST
45544: LIST
45545: PUSH
45546: LD_INT 1
45548: NEG
45549: PUSH
45550: LD_INT 1
45552: PUSH
45553: EMPTY
45554: LIST
45555: LIST
45556: PUSH
45557: LD_INT 2
45559: NEG
45560: PUSH
45561: LD_INT 0
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: LD_INT 2
45570: NEG
45571: PUSH
45572: LD_INT 1
45574: NEG
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 2
45582: NEG
45583: PUSH
45584: LD_INT 2
45586: NEG
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: EMPTY
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: LIST
45599: LIST
45600: LIST
45601: LIST
45602: LIST
45603: LIST
45604: LIST
45605: LIST
45606: LIST
45607: LIST
45608: LIST
45609: LIST
45610: LIST
45611: LIST
45612: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45613: LD_ADDR_VAR 0 55
45617: PUSH
45618: LD_INT 0
45620: PUSH
45621: LD_INT 0
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 0
45630: PUSH
45631: LD_INT 1
45633: NEG
45634: PUSH
45635: EMPTY
45636: LIST
45637: LIST
45638: PUSH
45639: LD_INT 1
45641: PUSH
45642: LD_INT 0
45644: PUSH
45645: EMPTY
45646: LIST
45647: LIST
45648: PUSH
45649: LD_INT 1
45651: PUSH
45652: LD_INT 1
45654: PUSH
45655: EMPTY
45656: LIST
45657: LIST
45658: PUSH
45659: LD_INT 0
45661: PUSH
45662: LD_INT 1
45664: PUSH
45665: EMPTY
45666: LIST
45667: LIST
45668: PUSH
45669: LD_INT 1
45671: NEG
45672: PUSH
45673: LD_INT 0
45675: PUSH
45676: EMPTY
45677: LIST
45678: LIST
45679: PUSH
45680: LD_INT 1
45682: NEG
45683: PUSH
45684: LD_INT 1
45686: NEG
45687: PUSH
45688: EMPTY
45689: LIST
45690: LIST
45691: PUSH
45692: LD_INT 1
45694: NEG
45695: PUSH
45696: LD_INT 2
45698: NEG
45699: PUSH
45700: EMPTY
45701: LIST
45702: LIST
45703: PUSH
45704: LD_INT 0
45706: PUSH
45707: LD_INT 2
45709: NEG
45710: PUSH
45711: EMPTY
45712: LIST
45713: LIST
45714: PUSH
45715: LD_INT 1
45717: PUSH
45718: LD_INT 1
45720: NEG
45721: PUSH
45722: EMPTY
45723: LIST
45724: LIST
45725: PUSH
45726: LD_INT 2
45728: PUSH
45729: LD_INT 0
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: PUSH
45736: LD_INT 2
45738: PUSH
45739: LD_INT 1
45741: PUSH
45742: EMPTY
45743: LIST
45744: LIST
45745: PUSH
45746: LD_INT 2
45748: PUSH
45749: LD_INT 2
45751: PUSH
45752: EMPTY
45753: LIST
45754: LIST
45755: PUSH
45756: LD_INT 1
45758: PUSH
45759: LD_INT 2
45761: PUSH
45762: EMPTY
45763: LIST
45764: LIST
45765: PUSH
45766: LD_INT 0
45768: PUSH
45769: LD_INT 2
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 1
45778: NEG
45779: PUSH
45780: LD_INT 1
45782: PUSH
45783: EMPTY
45784: LIST
45785: LIST
45786: PUSH
45787: LD_INT 2
45789: NEG
45790: PUSH
45791: LD_INT 0
45793: PUSH
45794: EMPTY
45795: LIST
45796: LIST
45797: PUSH
45798: LD_INT 2
45800: NEG
45801: PUSH
45802: LD_INT 1
45804: NEG
45805: PUSH
45806: EMPTY
45807: LIST
45808: LIST
45809: PUSH
45810: LD_INT 2
45812: NEG
45813: PUSH
45814: LD_INT 2
45816: NEG
45817: PUSH
45818: EMPTY
45819: LIST
45820: LIST
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: LIST
45826: LIST
45827: LIST
45828: LIST
45829: LIST
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: LIST
45838: LIST
45839: LIST
45840: LIST
45841: LIST
45842: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45843: LD_ADDR_VAR 0 56
45847: PUSH
45848: LD_INT 0
45850: PUSH
45851: LD_INT 0
45853: PUSH
45854: EMPTY
45855: LIST
45856: LIST
45857: PUSH
45858: LD_INT 0
45860: PUSH
45861: LD_INT 1
45863: NEG
45864: PUSH
45865: EMPTY
45866: LIST
45867: LIST
45868: PUSH
45869: LD_INT 1
45871: PUSH
45872: LD_INT 0
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 1
45881: PUSH
45882: LD_INT 1
45884: PUSH
45885: EMPTY
45886: LIST
45887: LIST
45888: PUSH
45889: LD_INT 0
45891: PUSH
45892: LD_INT 1
45894: PUSH
45895: EMPTY
45896: LIST
45897: LIST
45898: PUSH
45899: LD_INT 1
45901: NEG
45902: PUSH
45903: LD_INT 0
45905: PUSH
45906: EMPTY
45907: LIST
45908: LIST
45909: PUSH
45910: LD_INT 1
45912: NEG
45913: PUSH
45914: LD_INT 1
45916: NEG
45917: PUSH
45918: EMPTY
45919: LIST
45920: LIST
45921: PUSH
45922: LD_INT 1
45924: NEG
45925: PUSH
45926: LD_INT 2
45928: NEG
45929: PUSH
45930: EMPTY
45931: LIST
45932: LIST
45933: PUSH
45934: LD_INT 0
45936: PUSH
45937: LD_INT 2
45939: NEG
45940: PUSH
45941: EMPTY
45942: LIST
45943: LIST
45944: PUSH
45945: LD_INT 1
45947: PUSH
45948: LD_INT 1
45950: NEG
45951: PUSH
45952: EMPTY
45953: LIST
45954: LIST
45955: PUSH
45956: LD_INT 2
45958: PUSH
45959: LD_INT 0
45961: PUSH
45962: EMPTY
45963: LIST
45964: LIST
45965: PUSH
45966: LD_INT 2
45968: PUSH
45969: LD_INT 1
45971: PUSH
45972: EMPTY
45973: LIST
45974: LIST
45975: PUSH
45976: LD_INT 2
45978: PUSH
45979: LD_INT 2
45981: PUSH
45982: EMPTY
45983: LIST
45984: LIST
45985: PUSH
45986: LD_INT 1
45988: PUSH
45989: LD_INT 2
45991: PUSH
45992: EMPTY
45993: LIST
45994: LIST
45995: PUSH
45996: LD_INT 0
45998: PUSH
45999: LD_INT 2
46001: PUSH
46002: EMPTY
46003: LIST
46004: LIST
46005: PUSH
46006: LD_INT 1
46008: NEG
46009: PUSH
46010: LD_INT 1
46012: PUSH
46013: EMPTY
46014: LIST
46015: LIST
46016: PUSH
46017: LD_INT 2
46019: NEG
46020: PUSH
46021: LD_INT 0
46023: PUSH
46024: EMPTY
46025: LIST
46026: LIST
46027: PUSH
46028: LD_INT 2
46030: NEG
46031: PUSH
46032: LD_INT 1
46034: NEG
46035: PUSH
46036: EMPTY
46037: LIST
46038: LIST
46039: PUSH
46040: LD_INT 2
46042: NEG
46043: PUSH
46044: LD_INT 2
46046: NEG
46047: PUSH
46048: EMPTY
46049: LIST
46050: LIST
46051: PUSH
46052: EMPTY
46053: LIST
46054: LIST
46055: LIST
46056: LIST
46057: LIST
46058: LIST
46059: LIST
46060: LIST
46061: LIST
46062: LIST
46063: LIST
46064: LIST
46065: LIST
46066: LIST
46067: LIST
46068: LIST
46069: LIST
46070: LIST
46071: LIST
46072: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46073: LD_ADDR_VAR 0 57
46077: PUSH
46078: LD_INT 0
46080: PUSH
46081: LD_INT 0
46083: PUSH
46084: EMPTY
46085: LIST
46086: LIST
46087: PUSH
46088: LD_INT 0
46090: PUSH
46091: LD_INT 1
46093: NEG
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 1
46101: PUSH
46102: LD_INT 0
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 1
46111: PUSH
46112: LD_INT 1
46114: PUSH
46115: EMPTY
46116: LIST
46117: LIST
46118: PUSH
46119: LD_INT 0
46121: PUSH
46122: LD_INT 1
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 1
46131: NEG
46132: PUSH
46133: LD_INT 0
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 1
46142: NEG
46143: PUSH
46144: LD_INT 1
46146: NEG
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 1
46154: NEG
46155: PUSH
46156: LD_INT 2
46158: NEG
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 0
46166: PUSH
46167: LD_INT 2
46169: NEG
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 1
46177: PUSH
46178: LD_INT 1
46180: NEG
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 2
46188: PUSH
46189: LD_INT 0
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 2
46198: PUSH
46199: LD_INT 1
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 2
46208: PUSH
46209: LD_INT 2
46211: PUSH
46212: EMPTY
46213: LIST
46214: LIST
46215: PUSH
46216: LD_INT 1
46218: PUSH
46219: LD_INT 2
46221: PUSH
46222: EMPTY
46223: LIST
46224: LIST
46225: PUSH
46226: LD_INT 0
46228: PUSH
46229: LD_INT 2
46231: PUSH
46232: EMPTY
46233: LIST
46234: LIST
46235: PUSH
46236: LD_INT 1
46238: NEG
46239: PUSH
46240: LD_INT 1
46242: PUSH
46243: EMPTY
46244: LIST
46245: LIST
46246: PUSH
46247: LD_INT 2
46249: NEG
46250: PUSH
46251: LD_INT 0
46253: PUSH
46254: EMPTY
46255: LIST
46256: LIST
46257: PUSH
46258: LD_INT 2
46260: NEG
46261: PUSH
46262: LD_INT 1
46264: NEG
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 2
46272: NEG
46273: PUSH
46274: LD_INT 2
46276: NEG
46277: PUSH
46278: EMPTY
46279: LIST
46280: LIST
46281: PUSH
46282: EMPTY
46283: LIST
46284: LIST
46285: LIST
46286: LIST
46287: LIST
46288: LIST
46289: LIST
46290: LIST
46291: LIST
46292: LIST
46293: LIST
46294: LIST
46295: LIST
46296: LIST
46297: LIST
46298: LIST
46299: LIST
46300: LIST
46301: LIST
46302: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46303: LD_ADDR_VAR 0 58
46307: PUSH
46308: LD_INT 0
46310: PUSH
46311: LD_INT 0
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: LD_INT 0
46320: PUSH
46321: LD_INT 1
46323: NEG
46324: PUSH
46325: EMPTY
46326: LIST
46327: LIST
46328: PUSH
46329: LD_INT 1
46331: PUSH
46332: LD_INT 0
46334: PUSH
46335: EMPTY
46336: LIST
46337: LIST
46338: PUSH
46339: LD_INT 1
46341: PUSH
46342: LD_INT 1
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 0
46351: PUSH
46352: LD_INT 1
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 1
46361: NEG
46362: PUSH
46363: LD_INT 0
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 1
46372: NEG
46373: PUSH
46374: LD_INT 1
46376: NEG
46377: PUSH
46378: EMPTY
46379: LIST
46380: LIST
46381: PUSH
46382: LD_INT 1
46384: NEG
46385: PUSH
46386: LD_INT 2
46388: NEG
46389: PUSH
46390: EMPTY
46391: LIST
46392: LIST
46393: PUSH
46394: LD_INT 0
46396: PUSH
46397: LD_INT 2
46399: NEG
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: PUSH
46405: LD_INT 1
46407: PUSH
46408: LD_INT 1
46410: NEG
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 2
46418: PUSH
46419: LD_INT 0
46421: PUSH
46422: EMPTY
46423: LIST
46424: LIST
46425: PUSH
46426: LD_INT 2
46428: PUSH
46429: LD_INT 1
46431: PUSH
46432: EMPTY
46433: LIST
46434: LIST
46435: PUSH
46436: LD_INT 2
46438: PUSH
46439: LD_INT 2
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: PUSH
46446: LD_INT 1
46448: PUSH
46449: LD_INT 2
46451: PUSH
46452: EMPTY
46453: LIST
46454: LIST
46455: PUSH
46456: LD_INT 0
46458: PUSH
46459: LD_INT 2
46461: PUSH
46462: EMPTY
46463: LIST
46464: LIST
46465: PUSH
46466: LD_INT 1
46468: NEG
46469: PUSH
46470: LD_INT 1
46472: PUSH
46473: EMPTY
46474: LIST
46475: LIST
46476: PUSH
46477: LD_INT 2
46479: NEG
46480: PUSH
46481: LD_INT 0
46483: PUSH
46484: EMPTY
46485: LIST
46486: LIST
46487: PUSH
46488: LD_INT 2
46490: NEG
46491: PUSH
46492: LD_INT 1
46494: NEG
46495: PUSH
46496: EMPTY
46497: LIST
46498: LIST
46499: PUSH
46500: LD_INT 2
46502: NEG
46503: PUSH
46504: LD_INT 2
46506: NEG
46507: PUSH
46508: EMPTY
46509: LIST
46510: LIST
46511: PUSH
46512: EMPTY
46513: LIST
46514: LIST
46515: LIST
46516: LIST
46517: LIST
46518: LIST
46519: LIST
46520: LIST
46521: LIST
46522: LIST
46523: LIST
46524: LIST
46525: LIST
46526: LIST
46527: LIST
46528: LIST
46529: LIST
46530: LIST
46531: LIST
46532: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46533: LD_ADDR_VAR 0 59
46537: PUSH
46538: LD_INT 0
46540: PUSH
46541: LD_INT 0
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 0
46550: PUSH
46551: LD_INT 1
46553: NEG
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 1
46561: PUSH
46562: LD_INT 0
46564: PUSH
46565: EMPTY
46566: LIST
46567: LIST
46568: PUSH
46569: LD_INT 1
46571: PUSH
46572: LD_INT 1
46574: PUSH
46575: EMPTY
46576: LIST
46577: LIST
46578: PUSH
46579: LD_INT 0
46581: PUSH
46582: LD_INT 1
46584: PUSH
46585: EMPTY
46586: LIST
46587: LIST
46588: PUSH
46589: LD_INT 1
46591: NEG
46592: PUSH
46593: LD_INT 0
46595: PUSH
46596: EMPTY
46597: LIST
46598: LIST
46599: PUSH
46600: LD_INT 1
46602: NEG
46603: PUSH
46604: LD_INT 1
46606: NEG
46607: PUSH
46608: EMPTY
46609: LIST
46610: LIST
46611: PUSH
46612: EMPTY
46613: LIST
46614: LIST
46615: LIST
46616: LIST
46617: LIST
46618: LIST
46619: LIST
46620: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46621: LD_ADDR_VAR 0 60
46625: PUSH
46626: LD_INT 0
46628: PUSH
46629: LD_INT 0
46631: PUSH
46632: EMPTY
46633: LIST
46634: LIST
46635: PUSH
46636: LD_INT 0
46638: PUSH
46639: LD_INT 1
46641: NEG
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 1
46649: PUSH
46650: LD_INT 0
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: LD_INT 1
46659: PUSH
46660: LD_INT 1
46662: PUSH
46663: EMPTY
46664: LIST
46665: LIST
46666: PUSH
46667: LD_INT 0
46669: PUSH
46670: LD_INT 1
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 1
46679: NEG
46680: PUSH
46681: LD_INT 0
46683: PUSH
46684: EMPTY
46685: LIST
46686: LIST
46687: PUSH
46688: LD_INT 1
46690: NEG
46691: PUSH
46692: LD_INT 1
46694: NEG
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: EMPTY
46701: LIST
46702: LIST
46703: LIST
46704: LIST
46705: LIST
46706: LIST
46707: LIST
46708: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46709: LD_ADDR_VAR 0 61
46713: PUSH
46714: LD_INT 0
46716: PUSH
46717: LD_INT 0
46719: PUSH
46720: EMPTY
46721: LIST
46722: LIST
46723: PUSH
46724: LD_INT 0
46726: PUSH
46727: LD_INT 1
46729: NEG
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 1
46737: PUSH
46738: LD_INT 0
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 1
46747: PUSH
46748: LD_INT 1
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 0
46757: PUSH
46758: LD_INT 1
46760: PUSH
46761: EMPTY
46762: LIST
46763: LIST
46764: PUSH
46765: LD_INT 1
46767: NEG
46768: PUSH
46769: LD_INT 0
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 1
46778: NEG
46779: PUSH
46780: LD_INT 1
46782: NEG
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: LIST
46792: LIST
46793: LIST
46794: LIST
46795: LIST
46796: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46797: LD_ADDR_VAR 0 62
46801: PUSH
46802: LD_INT 0
46804: PUSH
46805: LD_INT 0
46807: PUSH
46808: EMPTY
46809: LIST
46810: LIST
46811: PUSH
46812: LD_INT 0
46814: PUSH
46815: LD_INT 1
46817: NEG
46818: PUSH
46819: EMPTY
46820: LIST
46821: LIST
46822: PUSH
46823: LD_INT 1
46825: PUSH
46826: LD_INT 0
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: PUSH
46833: LD_INT 1
46835: PUSH
46836: LD_INT 1
46838: PUSH
46839: EMPTY
46840: LIST
46841: LIST
46842: PUSH
46843: LD_INT 0
46845: PUSH
46846: LD_INT 1
46848: PUSH
46849: EMPTY
46850: LIST
46851: LIST
46852: PUSH
46853: LD_INT 1
46855: NEG
46856: PUSH
46857: LD_INT 0
46859: PUSH
46860: EMPTY
46861: LIST
46862: LIST
46863: PUSH
46864: LD_INT 1
46866: NEG
46867: PUSH
46868: LD_INT 1
46870: NEG
46871: PUSH
46872: EMPTY
46873: LIST
46874: LIST
46875: PUSH
46876: EMPTY
46877: LIST
46878: LIST
46879: LIST
46880: LIST
46881: LIST
46882: LIST
46883: LIST
46884: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46885: LD_ADDR_VAR 0 63
46889: PUSH
46890: LD_INT 0
46892: PUSH
46893: LD_INT 0
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 0
46902: PUSH
46903: LD_INT 1
46905: NEG
46906: PUSH
46907: EMPTY
46908: LIST
46909: LIST
46910: PUSH
46911: LD_INT 1
46913: PUSH
46914: LD_INT 0
46916: PUSH
46917: EMPTY
46918: LIST
46919: LIST
46920: PUSH
46921: LD_INT 1
46923: PUSH
46924: LD_INT 1
46926: PUSH
46927: EMPTY
46928: LIST
46929: LIST
46930: PUSH
46931: LD_INT 0
46933: PUSH
46934: LD_INT 1
46936: PUSH
46937: EMPTY
46938: LIST
46939: LIST
46940: PUSH
46941: LD_INT 1
46943: NEG
46944: PUSH
46945: LD_INT 0
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 1
46954: NEG
46955: PUSH
46956: LD_INT 1
46958: NEG
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: EMPTY
46965: LIST
46966: LIST
46967: LIST
46968: LIST
46969: LIST
46970: LIST
46971: LIST
46972: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
46973: LD_ADDR_VAR 0 64
46977: PUSH
46978: LD_INT 0
46980: PUSH
46981: LD_INT 0
46983: PUSH
46984: EMPTY
46985: LIST
46986: LIST
46987: PUSH
46988: LD_INT 0
46990: PUSH
46991: LD_INT 1
46993: NEG
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: PUSH
46999: LD_INT 1
47001: PUSH
47002: LD_INT 0
47004: PUSH
47005: EMPTY
47006: LIST
47007: LIST
47008: PUSH
47009: LD_INT 1
47011: PUSH
47012: LD_INT 1
47014: PUSH
47015: EMPTY
47016: LIST
47017: LIST
47018: PUSH
47019: LD_INT 0
47021: PUSH
47022: LD_INT 1
47024: PUSH
47025: EMPTY
47026: LIST
47027: LIST
47028: PUSH
47029: LD_INT 1
47031: NEG
47032: PUSH
47033: LD_INT 0
47035: PUSH
47036: EMPTY
47037: LIST
47038: LIST
47039: PUSH
47040: LD_INT 1
47042: NEG
47043: PUSH
47044: LD_INT 1
47046: NEG
47047: PUSH
47048: EMPTY
47049: LIST
47050: LIST
47051: PUSH
47052: EMPTY
47053: LIST
47054: LIST
47055: LIST
47056: LIST
47057: LIST
47058: LIST
47059: LIST
47060: ST_TO_ADDR
// end ; 1 :
47061: GO 52958
47063: LD_INT 1
47065: DOUBLE
47066: EQUAL
47067: IFTRUE 47071
47069: GO 49694
47071: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47072: LD_ADDR_VAR 0 11
47076: PUSH
47077: LD_INT 1
47079: NEG
47080: PUSH
47081: LD_INT 3
47083: NEG
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 0
47091: PUSH
47092: LD_INT 3
47094: NEG
47095: PUSH
47096: EMPTY
47097: LIST
47098: LIST
47099: PUSH
47100: LD_INT 1
47102: PUSH
47103: LD_INT 2
47105: NEG
47106: PUSH
47107: EMPTY
47108: LIST
47109: LIST
47110: PUSH
47111: EMPTY
47112: LIST
47113: LIST
47114: LIST
47115: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47116: LD_ADDR_VAR 0 12
47120: PUSH
47121: LD_INT 2
47123: PUSH
47124: LD_INT 1
47126: NEG
47127: PUSH
47128: EMPTY
47129: LIST
47130: LIST
47131: PUSH
47132: LD_INT 3
47134: PUSH
47135: LD_INT 0
47137: PUSH
47138: EMPTY
47139: LIST
47140: LIST
47141: PUSH
47142: LD_INT 3
47144: PUSH
47145: LD_INT 1
47147: PUSH
47148: EMPTY
47149: LIST
47150: LIST
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: LIST
47156: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47157: LD_ADDR_VAR 0 13
47161: PUSH
47162: LD_INT 3
47164: PUSH
47165: LD_INT 2
47167: PUSH
47168: EMPTY
47169: LIST
47170: LIST
47171: PUSH
47172: LD_INT 3
47174: PUSH
47175: LD_INT 3
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: PUSH
47182: LD_INT 2
47184: PUSH
47185: LD_INT 3
47187: PUSH
47188: EMPTY
47189: LIST
47190: LIST
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: LIST
47196: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47197: LD_ADDR_VAR 0 14
47201: PUSH
47202: LD_INT 1
47204: PUSH
47205: LD_INT 3
47207: PUSH
47208: EMPTY
47209: LIST
47210: LIST
47211: PUSH
47212: LD_INT 0
47214: PUSH
47215: LD_INT 3
47217: PUSH
47218: EMPTY
47219: LIST
47220: LIST
47221: PUSH
47222: LD_INT 1
47224: NEG
47225: PUSH
47226: LD_INT 2
47228: PUSH
47229: EMPTY
47230: LIST
47231: LIST
47232: PUSH
47233: EMPTY
47234: LIST
47235: LIST
47236: LIST
47237: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47238: LD_ADDR_VAR 0 15
47242: PUSH
47243: LD_INT 2
47245: NEG
47246: PUSH
47247: LD_INT 1
47249: PUSH
47250: EMPTY
47251: LIST
47252: LIST
47253: PUSH
47254: LD_INT 3
47256: NEG
47257: PUSH
47258: LD_INT 0
47260: PUSH
47261: EMPTY
47262: LIST
47263: LIST
47264: PUSH
47265: LD_INT 3
47267: NEG
47268: PUSH
47269: LD_INT 1
47271: NEG
47272: PUSH
47273: EMPTY
47274: LIST
47275: LIST
47276: PUSH
47277: EMPTY
47278: LIST
47279: LIST
47280: LIST
47281: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47282: LD_ADDR_VAR 0 16
47286: PUSH
47287: LD_INT 2
47289: NEG
47290: PUSH
47291: LD_INT 3
47293: NEG
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: PUSH
47299: LD_INT 3
47301: NEG
47302: PUSH
47303: LD_INT 2
47305: NEG
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 3
47313: NEG
47314: PUSH
47315: LD_INT 3
47317: NEG
47318: PUSH
47319: EMPTY
47320: LIST
47321: LIST
47322: PUSH
47323: EMPTY
47324: LIST
47325: LIST
47326: LIST
47327: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
47328: LD_ADDR_VAR 0 17
47332: PUSH
47333: LD_INT 1
47335: NEG
47336: PUSH
47337: LD_INT 3
47339: NEG
47340: PUSH
47341: EMPTY
47342: LIST
47343: LIST
47344: PUSH
47345: LD_INT 0
47347: PUSH
47348: LD_INT 3
47350: NEG
47351: PUSH
47352: EMPTY
47353: LIST
47354: LIST
47355: PUSH
47356: LD_INT 1
47358: PUSH
47359: LD_INT 2
47361: NEG
47362: PUSH
47363: EMPTY
47364: LIST
47365: LIST
47366: PUSH
47367: EMPTY
47368: LIST
47369: LIST
47370: LIST
47371: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
47372: LD_ADDR_VAR 0 18
47376: PUSH
47377: LD_INT 2
47379: PUSH
47380: LD_INT 1
47382: NEG
47383: PUSH
47384: EMPTY
47385: LIST
47386: LIST
47387: PUSH
47388: LD_INT 3
47390: PUSH
47391: LD_INT 0
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 3
47400: PUSH
47401: LD_INT 1
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: LIST
47412: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
47413: LD_ADDR_VAR 0 19
47417: PUSH
47418: LD_INT 3
47420: PUSH
47421: LD_INT 2
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 3
47430: PUSH
47431: LD_INT 3
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 2
47440: PUSH
47441: LD_INT 3
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: EMPTY
47449: LIST
47450: LIST
47451: LIST
47452: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
47453: LD_ADDR_VAR 0 20
47457: PUSH
47458: LD_INT 1
47460: PUSH
47461: LD_INT 3
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 0
47470: PUSH
47471: LD_INT 3
47473: PUSH
47474: EMPTY
47475: LIST
47476: LIST
47477: PUSH
47478: LD_INT 1
47480: NEG
47481: PUSH
47482: LD_INT 2
47484: PUSH
47485: EMPTY
47486: LIST
47487: LIST
47488: PUSH
47489: EMPTY
47490: LIST
47491: LIST
47492: LIST
47493: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
47494: LD_ADDR_VAR 0 21
47498: PUSH
47499: LD_INT 2
47501: NEG
47502: PUSH
47503: LD_INT 1
47505: PUSH
47506: EMPTY
47507: LIST
47508: LIST
47509: PUSH
47510: LD_INT 3
47512: NEG
47513: PUSH
47514: LD_INT 0
47516: PUSH
47517: EMPTY
47518: LIST
47519: LIST
47520: PUSH
47521: LD_INT 3
47523: NEG
47524: PUSH
47525: LD_INT 1
47527: NEG
47528: PUSH
47529: EMPTY
47530: LIST
47531: LIST
47532: PUSH
47533: EMPTY
47534: LIST
47535: LIST
47536: LIST
47537: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
47538: LD_ADDR_VAR 0 22
47542: PUSH
47543: LD_INT 2
47545: NEG
47546: PUSH
47547: LD_INT 3
47549: NEG
47550: PUSH
47551: EMPTY
47552: LIST
47553: LIST
47554: PUSH
47555: LD_INT 3
47557: NEG
47558: PUSH
47559: LD_INT 2
47561: NEG
47562: PUSH
47563: EMPTY
47564: LIST
47565: LIST
47566: PUSH
47567: LD_INT 3
47569: NEG
47570: PUSH
47571: LD_INT 3
47573: NEG
47574: PUSH
47575: EMPTY
47576: LIST
47577: LIST
47578: PUSH
47579: EMPTY
47580: LIST
47581: LIST
47582: LIST
47583: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
47584: LD_ADDR_VAR 0 23
47588: PUSH
47589: LD_INT 0
47591: PUSH
47592: LD_INT 3
47594: NEG
47595: PUSH
47596: EMPTY
47597: LIST
47598: LIST
47599: PUSH
47600: LD_INT 1
47602: NEG
47603: PUSH
47604: LD_INT 4
47606: NEG
47607: PUSH
47608: EMPTY
47609: LIST
47610: LIST
47611: PUSH
47612: LD_INT 1
47614: PUSH
47615: LD_INT 3
47617: NEG
47618: PUSH
47619: EMPTY
47620: LIST
47621: LIST
47622: PUSH
47623: EMPTY
47624: LIST
47625: LIST
47626: LIST
47627: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
47628: LD_ADDR_VAR 0 24
47632: PUSH
47633: LD_INT 3
47635: PUSH
47636: LD_INT 0
47638: PUSH
47639: EMPTY
47640: LIST
47641: LIST
47642: PUSH
47643: LD_INT 3
47645: PUSH
47646: LD_INT 1
47648: NEG
47649: PUSH
47650: EMPTY
47651: LIST
47652: LIST
47653: PUSH
47654: LD_INT 4
47656: PUSH
47657: LD_INT 1
47659: PUSH
47660: EMPTY
47661: LIST
47662: LIST
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: LIST
47668: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
47669: LD_ADDR_VAR 0 25
47673: PUSH
47674: LD_INT 3
47676: PUSH
47677: LD_INT 3
47679: PUSH
47680: EMPTY
47681: LIST
47682: LIST
47683: PUSH
47684: LD_INT 4
47686: PUSH
47687: LD_INT 3
47689: PUSH
47690: EMPTY
47691: LIST
47692: LIST
47693: PUSH
47694: LD_INT 3
47696: PUSH
47697: LD_INT 4
47699: PUSH
47700: EMPTY
47701: LIST
47702: LIST
47703: PUSH
47704: EMPTY
47705: LIST
47706: LIST
47707: LIST
47708: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
47709: LD_ADDR_VAR 0 26
47713: PUSH
47714: LD_INT 0
47716: PUSH
47717: LD_INT 3
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: LD_INT 1
47726: PUSH
47727: LD_INT 4
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: PUSH
47734: LD_INT 1
47736: NEG
47737: PUSH
47738: LD_INT 3
47740: PUSH
47741: EMPTY
47742: LIST
47743: LIST
47744: PUSH
47745: EMPTY
47746: LIST
47747: LIST
47748: LIST
47749: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
47750: LD_ADDR_VAR 0 27
47754: PUSH
47755: LD_INT 3
47757: NEG
47758: PUSH
47759: LD_INT 0
47761: PUSH
47762: EMPTY
47763: LIST
47764: LIST
47765: PUSH
47766: LD_INT 3
47768: NEG
47769: PUSH
47770: LD_INT 1
47772: PUSH
47773: EMPTY
47774: LIST
47775: LIST
47776: PUSH
47777: LD_INT 4
47779: NEG
47780: PUSH
47781: LD_INT 1
47783: NEG
47784: PUSH
47785: EMPTY
47786: LIST
47787: LIST
47788: PUSH
47789: EMPTY
47790: LIST
47791: LIST
47792: LIST
47793: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
47794: LD_ADDR_VAR 0 28
47798: PUSH
47799: LD_INT 3
47801: NEG
47802: PUSH
47803: LD_INT 3
47805: NEG
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: LD_INT 3
47813: NEG
47814: PUSH
47815: LD_INT 4
47817: NEG
47818: PUSH
47819: EMPTY
47820: LIST
47821: LIST
47822: PUSH
47823: LD_INT 4
47825: NEG
47826: PUSH
47827: LD_INT 3
47829: NEG
47830: PUSH
47831: EMPTY
47832: LIST
47833: LIST
47834: PUSH
47835: EMPTY
47836: LIST
47837: LIST
47838: LIST
47839: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
47840: LD_ADDR_VAR 0 29
47844: PUSH
47845: LD_INT 1
47847: NEG
47848: PUSH
47849: LD_INT 3
47851: NEG
47852: PUSH
47853: EMPTY
47854: LIST
47855: LIST
47856: PUSH
47857: LD_INT 0
47859: PUSH
47860: LD_INT 3
47862: NEG
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 1
47870: PUSH
47871: LD_INT 2
47873: NEG
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: LD_INT 1
47881: NEG
47882: PUSH
47883: LD_INT 4
47885: NEG
47886: PUSH
47887: EMPTY
47888: LIST
47889: LIST
47890: PUSH
47891: LD_INT 0
47893: PUSH
47894: LD_INT 4
47896: NEG
47897: PUSH
47898: EMPTY
47899: LIST
47900: LIST
47901: PUSH
47902: LD_INT 1
47904: PUSH
47905: LD_INT 3
47907: NEG
47908: PUSH
47909: EMPTY
47910: LIST
47911: LIST
47912: PUSH
47913: LD_INT 1
47915: NEG
47916: PUSH
47917: LD_INT 5
47919: NEG
47920: PUSH
47921: EMPTY
47922: LIST
47923: LIST
47924: PUSH
47925: LD_INT 0
47927: PUSH
47928: LD_INT 5
47930: NEG
47931: PUSH
47932: EMPTY
47933: LIST
47934: LIST
47935: PUSH
47936: LD_INT 1
47938: PUSH
47939: LD_INT 4
47941: NEG
47942: PUSH
47943: EMPTY
47944: LIST
47945: LIST
47946: PUSH
47947: LD_INT 1
47949: NEG
47950: PUSH
47951: LD_INT 6
47953: NEG
47954: PUSH
47955: EMPTY
47956: LIST
47957: LIST
47958: PUSH
47959: LD_INT 0
47961: PUSH
47962: LD_INT 6
47964: NEG
47965: PUSH
47966: EMPTY
47967: LIST
47968: LIST
47969: PUSH
47970: LD_INT 1
47972: PUSH
47973: LD_INT 5
47975: NEG
47976: PUSH
47977: EMPTY
47978: LIST
47979: LIST
47980: PUSH
47981: EMPTY
47982: LIST
47983: LIST
47984: LIST
47985: LIST
47986: LIST
47987: LIST
47988: LIST
47989: LIST
47990: LIST
47991: LIST
47992: LIST
47993: LIST
47994: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
47995: LD_ADDR_VAR 0 30
47999: PUSH
48000: LD_INT 2
48002: PUSH
48003: LD_INT 1
48005: NEG
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 3
48013: PUSH
48014: LD_INT 0
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 3
48023: PUSH
48024: LD_INT 1
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 3
48033: PUSH
48034: LD_INT 1
48036: NEG
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 4
48044: PUSH
48045: LD_INT 0
48047: PUSH
48048: EMPTY
48049: LIST
48050: LIST
48051: PUSH
48052: LD_INT 4
48054: PUSH
48055: LD_INT 1
48057: PUSH
48058: EMPTY
48059: LIST
48060: LIST
48061: PUSH
48062: LD_INT 4
48064: PUSH
48065: LD_INT 1
48067: NEG
48068: PUSH
48069: EMPTY
48070: LIST
48071: LIST
48072: PUSH
48073: LD_INT 5
48075: PUSH
48076: LD_INT 0
48078: PUSH
48079: EMPTY
48080: LIST
48081: LIST
48082: PUSH
48083: LD_INT 5
48085: PUSH
48086: LD_INT 1
48088: PUSH
48089: EMPTY
48090: LIST
48091: LIST
48092: PUSH
48093: LD_INT 5
48095: PUSH
48096: LD_INT 1
48098: NEG
48099: PUSH
48100: EMPTY
48101: LIST
48102: LIST
48103: PUSH
48104: LD_INT 6
48106: PUSH
48107: LD_INT 0
48109: PUSH
48110: EMPTY
48111: LIST
48112: LIST
48113: PUSH
48114: LD_INT 6
48116: PUSH
48117: LD_INT 1
48119: PUSH
48120: EMPTY
48121: LIST
48122: LIST
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: LIST
48128: LIST
48129: LIST
48130: LIST
48131: LIST
48132: LIST
48133: LIST
48134: LIST
48135: LIST
48136: LIST
48137: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
48138: LD_ADDR_VAR 0 31
48142: PUSH
48143: LD_INT 3
48145: PUSH
48146: LD_INT 2
48148: PUSH
48149: EMPTY
48150: LIST
48151: LIST
48152: PUSH
48153: LD_INT 3
48155: PUSH
48156: LD_INT 3
48158: PUSH
48159: EMPTY
48160: LIST
48161: LIST
48162: PUSH
48163: LD_INT 2
48165: PUSH
48166: LD_INT 3
48168: PUSH
48169: EMPTY
48170: LIST
48171: LIST
48172: PUSH
48173: LD_INT 4
48175: PUSH
48176: LD_INT 3
48178: PUSH
48179: EMPTY
48180: LIST
48181: LIST
48182: PUSH
48183: LD_INT 4
48185: PUSH
48186: LD_INT 4
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 3
48195: PUSH
48196: LD_INT 4
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 5
48205: PUSH
48206: LD_INT 4
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: LD_INT 5
48215: PUSH
48216: LD_INT 5
48218: PUSH
48219: EMPTY
48220: LIST
48221: LIST
48222: PUSH
48223: LD_INT 4
48225: PUSH
48226: LD_INT 5
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 6
48235: PUSH
48236: LD_INT 5
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 6
48245: PUSH
48246: LD_INT 6
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: LD_INT 5
48255: PUSH
48256: LD_INT 6
48258: PUSH
48259: EMPTY
48260: LIST
48261: LIST
48262: PUSH
48263: EMPTY
48264: LIST
48265: LIST
48266: LIST
48267: LIST
48268: LIST
48269: LIST
48270: LIST
48271: LIST
48272: LIST
48273: LIST
48274: LIST
48275: LIST
48276: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
48277: LD_ADDR_VAR 0 32
48281: PUSH
48282: LD_INT 1
48284: PUSH
48285: LD_INT 3
48287: PUSH
48288: EMPTY
48289: LIST
48290: LIST
48291: PUSH
48292: LD_INT 0
48294: PUSH
48295: LD_INT 3
48297: PUSH
48298: EMPTY
48299: LIST
48300: LIST
48301: PUSH
48302: LD_INT 1
48304: NEG
48305: PUSH
48306: LD_INT 2
48308: PUSH
48309: EMPTY
48310: LIST
48311: LIST
48312: PUSH
48313: LD_INT 1
48315: PUSH
48316: LD_INT 4
48318: PUSH
48319: EMPTY
48320: LIST
48321: LIST
48322: PUSH
48323: LD_INT 0
48325: PUSH
48326: LD_INT 4
48328: PUSH
48329: EMPTY
48330: LIST
48331: LIST
48332: PUSH
48333: LD_INT 1
48335: NEG
48336: PUSH
48337: LD_INT 3
48339: PUSH
48340: EMPTY
48341: LIST
48342: LIST
48343: PUSH
48344: LD_INT 1
48346: PUSH
48347: LD_INT 5
48349: PUSH
48350: EMPTY
48351: LIST
48352: LIST
48353: PUSH
48354: LD_INT 0
48356: PUSH
48357: LD_INT 5
48359: PUSH
48360: EMPTY
48361: LIST
48362: LIST
48363: PUSH
48364: LD_INT 1
48366: NEG
48367: PUSH
48368: LD_INT 4
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: PUSH
48375: LD_INT 1
48377: PUSH
48378: LD_INT 6
48380: PUSH
48381: EMPTY
48382: LIST
48383: LIST
48384: PUSH
48385: LD_INT 0
48387: PUSH
48388: LD_INT 6
48390: PUSH
48391: EMPTY
48392: LIST
48393: LIST
48394: PUSH
48395: LD_INT 1
48397: NEG
48398: PUSH
48399: LD_INT 5
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: EMPTY
48407: LIST
48408: LIST
48409: LIST
48410: LIST
48411: LIST
48412: LIST
48413: LIST
48414: LIST
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
48420: LD_ADDR_VAR 0 33
48424: PUSH
48425: LD_INT 2
48427: NEG
48428: PUSH
48429: LD_INT 1
48431: PUSH
48432: EMPTY
48433: LIST
48434: LIST
48435: PUSH
48436: LD_INT 3
48438: NEG
48439: PUSH
48440: LD_INT 0
48442: PUSH
48443: EMPTY
48444: LIST
48445: LIST
48446: PUSH
48447: LD_INT 3
48449: NEG
48450: PUSH
48451: LD_INT 1
48453: NEG
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 3
48461: NEG
48462: PUSH
48463: LD_INT 1
48465: PUSH
48466: EMPTY
48467: LIST
48468: LIST
48469: PUSH
48470: LD_INT 4
48472: NEG
48473: PUSH
48474: LD_INT 0
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 4
48483: NEG
48484: PUSH
48485: LD_INT 1
48487: NEG
48488: PUSH
48489: EMPTY
48490: LIST
48491: LIST
48492: PUSH
48493: LD_INT 4
48495: NEG
48496: PUSH
48497: LD_INT 1
48499: PUSH
48500: EMPTY
48501: LIST
48502: LIST
48503: PUSH
48504: LD_INT 5
48506: NEG
48507: PUSH
48508: LD_INT 0
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: PUSH
48515: LD_INT 5
48517: NEG
48518: PUSH
48519: LD_INT 1
48521: NEG
48522: PUSH
48523: EMPTY
48524: LIST
48525: LIST
48526: PUSH
48527: LD_INT 5
48529: NEG
48530: PUSH
48531: LD_INT 1
48533: PUSH
48534: EMPTY
48535: LIST
48536: LIST
48537: PUSH
48538: LD_INT 6
48540: NEG
48541: PUSH
48542: LD_INT 0
48544: PUSH
48545: EMPTY
48546: LIST
48547: LIST
48548: PUSH
48549: LD_INT 6
48551: NEG
48552: PUSH
48553: LD_INT 1
48555: NEG
48556: PUSH
48557: EMPTY
48558: LIST
48559: LIST
48560: PUSH
48561: EMPTY
48562: LIST
48563: LIST
48564: LIST
48565: LIST
48566: LIST
48567: LIST
48568: LIST
48569: LIST
48570: LIST
48571: LIST
48572: LIST
48573: LIST
48574: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
48575: LD_ADDR_VAR 0 34
48579: PUSH
48580: LD_INT 2
48582: NEG
48583: PUSH
48584: LD_INT 3
48586: NEG
48587: PUSH
48588: EMPTY
48589: LIST
48590: LIST
48591: PUSH
48592: LD_INT 3
48594: NEG
48595: PUSH
48596: LD_INT 2
48598: NEG
48599: PUSH
48600: EMPTY
48601: LIST
48602: LIST
48603: PUSH
48604: LD_INT 3
48606: NEG
48607: PUSH
48608: LD_INT 3
48610: NEG
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 3
48618: NEG
48619: PUSH
48620: LD_INT 4
48622: NEG
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 4
48630: NEG
48631: PUSH
48632: LD_INT 3
48634: NEG
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: LD_INT 4
48642: NEG
48643: PUSH
48644: LD_INT 4
48646: NEG
48647: PUSH
48648: EMPTY
48649: LIST
48650: LIST
48651: PUSH
48652: LD_INT 4
48654: NEG
48655: PUSH
48656: LD_INT 5
48658: NEG
48659: PUSH
48660: EMPTY
48661: LIST
48662: LIST
48663: PUSH
48664: LD_INT 5
48666: NEG
48667: PUSH
48668: LD_INT 4
48670: NEG
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PUSH
48676: LD_INT 5
48678: NEG
48679: PUSH
48680: LD_INT 5
48682: NEG
48683: PUSH
48684: EMPTY
48685: LIST
48686: LIST
48687: PUSH
48688: LD_INT 5
48690: NEG
48691: PUSH
48692: LD_INT 6
48694: NEG
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 6
48702: NEG
48703: PUSH
48704: LD_INT 5
48706: NEG
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 6
48714: NEG
48715: PUSH
48716: LD_INT 6
48718: NEG
48719: PUSH
48720: EMPTY
48721: LIST
48722: LIST
48723: PUSH
48724: EMPTY
48725: LIST
48726: LIST
48727: LIST
48728: LIST
48729: LIST
48730: LIST
48731: LIST
48732: LIST
48733: LIST
48734: LIST
48735: LIST
48736: LIST
48737: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
48738: LD_ADDR_VAR 0 41
48742: PUSH
48743: LD_INT 0
48745: PUSH
48746: LD_INT 2
48748: NEG
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 1
48756: NEG
48757: PUSH
48758: LD_INT 3
48760: NEG
48761: PUSH
48762: EMPTY
48763: LIST
48764: LIST
48765: PUSH
48766: LD_INT 1
48768: PUSH
48769: LD_INT 2
48771: NEG
48772: PUSH
48773: EMPTY
48774: LIST
48775: LIST
48776: PUSH
48777: EMPTY
48778: LIST
48779: LIST
48780: LIST
48781: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
48782: LD_ADDR_VAR 0 42
48786: PUSH
48787: LD_INT 2
48789: PUSH
48790: LD_INT 0
48792: PUSH
48793: EMPTY
48794: LIST
48795: LIST
48796: PUSH
48797: LD_INT 2
48799: PUSH
48800: LD_INT 1
48802: NEG
48803: PUSH
48804: EMPTY
48805: LIST
48806: LIST
48807: PUSH
48808: LD_INT 3
48810: PUSH
48811: LD_INT 1
48813: PUSH
48814: EMPTY
48815: LIST
48816: LIST
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: LIST
48822: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
48823: LD_ADDR_VAR 0 43
48827: PUSH
48828: LD_INT 2
48830: PUSH
48831: LD_INT 2
48833: PUSH
48834: EMPTY
48835: LIST
48836: LIST
48837: PUSH
48838: LD_INT 3
48840: PUSH
48841: LD_INT 2
48843: PUSH
48844: EMPTY
48845: LIST
48846: LIST
48847: PUSH
48848: LD_INT 2
48850: PUSH
48851: LD_INT 3
48853: PUSH
48854: EMPTY
48855: LIST
48856: LIST
48857: PUSH
48858: EMPTY
48859: LIST
48860: LIST
48861: LIST
48862: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
48863: LD_ADDR_VAR 0 44
48867: PUSH
48868: LD_INT 0
48870: PUSH
48871: LD_INT 2
48873: PUSH
48874: EMPTY
48875: LIST
48876: LIST
48877: PUSH
48878: LD_INT 1
48880: PUSH
48881: LD_INT 3
48883: PUSH
48884: EMPTY
48885: LIST
48886: LIST
48887: PUSH
48888: LD_INT 1
48890: NEG
48891: PUSH
48892: LD_INT 2
48894: PUSH
48895: EMPTY
48896: LIST
48897: LIST
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: LIST
48903: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
48904: LD_ADDR_VAR 0 45
48908: PUSH
48909: LD_INT 2
48911: NEG
48912: PUSH
48913: LD_INT 0
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: LD_INT 2
48922: NEG
48923: PUSH
48924: LD_INT 1
48926: PUSH
48927: EMPTY
48928: LIST
48929: LIST
48930: PUSH
48931: LD_INT 3
48933: NEG
48934: PUSH
48935: LD_INT 1
48937: NEG
48938: PUSH
48939: EMPTY
48940: LIST
48941: LIST
48942: PUSH
48943: EMPTY
48944: LIST
48945: LIST
48946: LIST
48947: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
48948: LD_ADDR_VAR 0 46
48952: PUSH
48953: LD_INT 2
48955: NEG
48956: PUSH
48957: LD_INT 2
48959: NEG
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 2
48967: NEG
48968: PUSH
48969: LD_INT 3
48971: NEG
48972: PUSH
48973: EMPTY
48974: LIST
48975: LIST
48976: PUSH
48977: LD_INT 3
48979: NEG
48980: PUSH
48981: LD_INT 2
48983: NEG
48984: PUSH
48985: EMPTY
48986: LIST
48987: LIST
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: LIST
48993: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
48994: LD_ADDR_VAR 0 47
48998: PUSH
48999: LD_INT 2
49001: NEG
49002: PUSH
49003: LD_INT 3
49005: NEG
49006: PUSH
49007: EMPTY
49008: LIST
49009: LIST
49010: PUSH
49011: LD_INT 1
49013: NEG
49014: PUSH
49015: LD_INT 3
49017: NEG
49018: PUSH
49019: EMPTY
49020: LIST
49021: LIST
49022: PUSH
49023: EMPTY
49024: LIST
49025: LIST
49026: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
49027: LD_ADDR_VAR 0 48
49031: PUSH
49032: LD_INT 1
49034: PUSH
49035: LD_INT 2
49037: NEG
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 2
49045: PUSH
49046: LD_INT 1
49048: NEG
49049: PUSH
49050: EMPTY
49051: LIST
49052: LIST
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
49058: LD_ADDR_VAR 0 49
49062: PUSH
49063: LD_INT 3
49065: PUSH
49066: LD_INT 1
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 3
49075: PUSH
49076: LD_INT 2
49078: PUSH
49079: EMPTY
49080: LIST
49081: LIST
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
49087: LD_ADDR_VAR 0 50
49091: PUSH
49092: LD_INT 2
49094: PUSH
49095: LD_INT 3
49097: PUSH
49098: EMPTY
49099: LIST
49100: LIST
49101: PUSH
49102: LD_INT 1
49104: PUSH
49105: LD_INT 3
49107: PUSH
49108: EMPTY
49109: LIST
49110: LIST
49111: PUSH
49112: EMPTY
49113: LIST
49114: LIST
49115: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
49116: LD_ADDR_VAR 0 51
49120: PUSH
49121: LD_INT 1
49123: NEG
49124: PUSH
49125: LD_INT 2
49127: PUSH
49128: EMPTY
49129: LIST
49130: LIST
49131: PUSH
49132: LD_INT 2
49134: NEG
49135: PUSH
49136: LD_INT 1
49138: PUSH
49139: EMPTY
49140: LIST
49141: LIST
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
49147: LD_ADDR_VAR 0 52
49151: PUSH
49152: LD_INT 3
49154: NEG
49155: PUSH
49156: LD_INT 1
49158: NEG
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: PUSH
49164: LD_INT 3
49166: NEG
49167: PUSH
49168: LD_INT 2
49170: NEG
49171: PUSH
49172: EMPTY
49173: LIST
49174: LIST
49175: PUSH
49176: EMPTY
49177: LIST
49178: LIST
49179: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49180: LD_ADDR_VAR 0 53
49184: PUSH
49185: LD_INT 1
49187: NEG
49188: PUSH
49189: LD_INT 3
49191: NEG
49192: PUSH
49193: EMPTY
49194: LIST
49195: LIST
49196: PUSH
49197: LD_INT 0
49199: PUSH
49200: LD_INT 3
49202: NEG
49203: PUSH
49204: EMPTY
49205: LIST
49206: LIST
49207: PUSH
49208: LD_INT 1
49210: PUSH
49211: LD_INT 2
49213: NEG
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: EMPTY
49220: LIST
49221: LIST
49222: LIST
49223: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49224: LD_ADDR_VAR 0 54
49228: PUSH
49229: LD_INT 2
49231: PUSH
49232: LD_INT 1
49234: NEG
49235: PUSH
49236: EMPTY
49237: LIST
49238: LIST
49239: PUSH
49240: LD_INT 3
49242: PUSH
49243: LD_INT 0
49245: PUSH
49246: EMPTY
49247: LIST
49248: LIST
49249: PUSH
49250: LD_INT 3
49252: PUSH
49253: LD_INT 1
49255: PUSH
49256: EMPTY
49257: LIST
49258: LIST
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: LIST
49264: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49265: LD_ADDR_VAR 0 55
49269: PUSH
49270: LD_INT 3
49272: PUSH
49273: LD_INT 2
49275: PUSH
49276: EMPTY
49277: LIST
49278: LIST
49279: PUSH
49280: LD_INT 3
49282: PUSH
49283: LD_INT 3
49285: PUSH
49286: EMPTY
49287: LIST
49288: LIST
49289: PUSH
49290: LD_INT 2
49292: PUSH
49293: LD_INT 3
49295: PUSH
49296: EMPTY
49297: LIST
49298: LIST
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: LIST
49304: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49305: LD_ADDR_VAR 0 56
49309: PUSH
49310: LD_INT 1
49312: PUSH
49313: LD_INT 3
49315: PUSH
49316: EMPTY
49317: LIST
49318: LIST
49319: PUSH
49320: LD_INT 0
49322: PUSH
49323: LD_INT 3
49325: PUSH
49326: EMPTY
49327: LIST
49328: LIST
49329: PUSH
49330: LD_INT 1
49332: NEG
49333: PUSH
49334: LD_INT 2
49336: PUSH
49337: EMPTY
49338: LIST
49339: LIST
49340: PUSH
49341: EMPTY
49342: LIST
49343: LIST
49344: LIST
49345: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49346: LD_ADDR_VAR 0 57
49350: PUSH
49351: LD_INT 2
49353: NEG
49354: PUSH
49355: LD_INT 1
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 3
49364: NEG
49365: PUSH
49366: LD_INT 0
49368: PUSH
49369: EMPTY
49370: LIST
49371: LIST
49372: PUSH
49373: LD_INT 3
49375: NEG
49376: PUSH
49377: LD_INT 1
49379: NEG
49380: PUSH
49381: EMPTY
49382: LIST
49383: LIST
49384: PUSH
49385: EMPTY
49386: LIST
49387: LIST
49388: LIST
49389: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49390: LD_ADDR_VAR 0 58
49394: PUSH
49395: LD_INT 2
49397: NEG
49398: PUSH
49399: LD_INT 3
49401: NEG
49402: PUSH
49403: EMPTY
49404: LIST
49405: LIST
49406: PUSH
49407: LD_INT 3
49409: NEG
49410: PUSH
49411: LD_INT 2
49413: NEG
49414: PUSH
49415: EMPTY
49416: LIST
49417: LIST
49418: PUSH
49419: LD_INT 3
49421: NEG
49422: PUSH
49423: LD_INT 3
49425: NEG
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: EMPTY
49432: LIST
49433: LIST
49434: LIST
49435: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
49436: LD_ADDR_VAR 0 59
49440: PUSH
49441: LD_INT 1
49443: NEG
49444: PUSH
49445: LD_INT 2
49447: NEG
49448: PUSH
49449: EMPTY
49450: LIST
49451: LIST
49452: PUSH
49453: LD_INT 0
49455: PUSH
49456: LD_INT 2
49458: NEG
49459: PUSH
49460: EMPTY
49461: LIST
49462: LIST
49463: PUSH
49464: LD_INT 1
49466: PUSH
49467: LD_INT 1
49469: NEG
49470: PUSH
49471: EMPTY
49472: LIST
49473: LIST
49474: PUSH
49475: EMPTY
49476: LIST
49477: LIST
49478: LIST
49479: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
49480: LD_ADDR_VAR 0 60
49484: PUSH
49485: LD_INT 1
49487: PUSH
49488: LD_INT 1
49490: NEG
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 2
49498: PUSH
49499: LD_INT 0
49501: PUSH
49502: EMPTY
49503: LIST
49504: LIST
49505: PUSH
49506: LD_INT 2
49508: PUSH
49509: LD_INT 1
49511: PUSH
49512: EMPTY
49513: LIST
49514: LIST
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: LIST
49520: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
49521: LD_ADDR_VAR 0 61
49525: PUSH
49526: LD_INT 2
49528: PUSH
49529: LD_INT 1
49531: PUSH
49532: EMPTY
49533: LIST
49534: LIST
49535: PUSH
49536: LD_INT 2
49538: PUSH
49539: LD_INT 2
49541: PUSH
49542: EMPTY
49543: LIST
49544: LIST
49545: PUSH
49546: LD_INT 1
49548: PUSH
49549: LD_INT 2
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: LIST
49560: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
49561: LD_ADDR_VAR 0 62
49565: PUSH
49566: LD_INT 1
49568: PUSH
49569: LD_INT 2
49571: PUSH
49572: EMPTY
49573: LIST
49574: LIST
49575: PUSH
49576: LD_INT 0
49578: PUSH
49579: LD_INT 2
49581: PUSH
49582: EMPTY
49583: LIST
49584: LIST
49585: PUSH
49586: LD_INT 1
49588: NEG
49589: PUSH
49590: LD_INT 1
49592: PUSH
49593: EMPTY
49594: LIST
49595: LIST
49596: PUSH
49597: EMPTY
49598: LIST
49599: LIST
49600: LIST
49601: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
49602: LD_ADDR_VAR 0 63
49606: PUSH
49607: LD_INT 1
49609: NEG
49610: PUSH
49611: LD_INT 1
49613: PUSH
49614: EMPTY
49615: LIST
49616: LIST
49617: PUSH
49618: LD_INT 2
49620: NEG
49621: PUSH
49622: LD_INT 0
49624: PUSH
49625: EMPTY
49626: LIST
49627: LIST
49628: PUSH
49629: LD_INT 2
49631: NEG
49632: PUSH
49633: LD_INT 1
49635: NEG
49636: PUSH
49637: EMPTY
49638: LIST
49639: LIST
49640: PUSH
49641: EMPTY
49642: LIST
49643: LIST
49644: LIST
49645: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
49646: LD_ADDR_VAR 0 64
49650: PUSH
49651: LD_INT 1
49653: NEG
49654: PUSH
49655: LD_INT 2
49657: NEG
49658: PUSH
49659: EMPTY
49660: LIST
49661: LIST
49662: PUSH
49663: LD_INT 2
49665: NEG
49666: PUSH
49667: LD_INT 1
49669: NEG
49670: PUSH
49671: EMPTY
49672: LIST
49673: LIST
49674: PUSH
49675: LD_INT 2
49677: NEG
49678: PUSH
49679: LD_INT 2
49681: NEG
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: EMPTY
49688: LIST
49689: LIST
49690: LIST
49691: ST_TO_ADDR
// end ; 2 :
49692: GO 52958
49694: LD_INT 2
49696: DOUBLE
49697: EQUAL
49698: IFTRUE 49702
49700: GO 52957
49702: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
49703: LD_ADDR_VAR 0 29
49707: PUSH
49708: LD_INT 4
49710: PUSH
49711: LD_INT 0
49713: PUSH
49714: EMPTY
49715: LIST
49716: LIST
49717: PUSH
49718: LD_INT 4
49720: PUSH
49721: LD_INT 1
49723: NEG
49724: PUSH
49725: EMPTY
49726: LIST
49727: LIST
49728: PUSH
49729: LD_INT 5
49731: PUSH
49732: LD_INT 0
49734: PUSH
49735: EMPTY
49736: LIST
49737: LIST
49738: PUSH
49739: LD_INT 5
49741: PUSH
49742: LD_INT 1
49744: PUSH
49745: EMPTY
49746: LIST
49747: LIST
49748: PUSH
49749: LD_INT 4
49751: PUSH
49752: LD_INT 1
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: PUSH
49759: LD_INT 3
49761: PUSH
49762: LD_INT 0
49764: PUSH
49765: EMPTY
49766: LIST
49767: LIST
49768: PUSH
49769: LD_INT 3
49771: PUSH
49772: LD_INT 1
49774: NEG
49775: PUSH
49776: EMPTY
49777: LIST
49778: LIST
49779: PUSH
49780: LD_INT 3
49782: PUSH
49783: LD_INT 2
49785: NEG
49786: PUSH
49787: EMPTY
49788: LIST
49789: LIST
49790: PUSH
49791: LD_INT 5
49793: PUSH
49794: LD_INT 2
49796: PUSH
49797: EMPTY
49798: LIST
49799: LIST
49800: PUSH
49801: LD_INT 3
49803: PUSH
49804: LD_INT 3
49806: PUSH
49807: EMPTY
49808: LIST
49809: LIST
49810: PUSH
49811: LD_INT 3
49813: PUSH
49814: LD_INT 2
49816: PUSH
49817: EMPTY
49818: LIST
49819: LIST
49820: PUSH
49821: LD_INT 4
49823: PUSH
49824: LD_INT 3
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 4
49833: PUSH
49834: LD_INT 4
49836: PUSH
49837: EMPTY
49838: LIST
49839: LIST
49840: PUSH
49841: LD_INT 3
49843: PUSH
49844: LD_INT 4
49846: PUSH
49847: EMPTY
49848: LIST
49849: LIST
49850: PUSH
49851: LD_INT 2
49853: PUSH
49854: LD_INT 3
49856: PUSH
49857: EMPTY
49858: LIST
49859: LIST
49860: PUSH
49861: LD_INT 2
49863: PUSH
49864: LD_INT 2
49866: PUSH
49867: EMPTY
49868: LIST
49869: LIST
49870: PUSH
49871: LD_INT 4
49873: PUSH
49874: LD_INT 2
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: PUSH
49881: LD_INT 2
49883: PUSH
49884: LD_INT 4
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 0
49893: PUSH
49894: LD_INT 4
49896: PUSH
49897: EMPTY
49898: LIST
49899: LIST
49900: PUSH
49901: LD_INT 0
49903: PUSH
49904: LD_INT 3
49906: PUSH
49907: EMPTY
49908: LIST
49909: LIST
49910: PUSH
49911: LD_INT 1
49913: PUSH
49914: LD_INT 4
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: LD_INT 1
49923: PUSH
49924: LD_INT 5
49926: PUSH
49927: EMPTY
49928: LIST
49929: LIST
49930: PUSH
49931: LD_INT 0
49933: PUSH
49934: LD_INT 5
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 1
49943: NEG
49944: PUSH
49945: LD_INT 4
49947: PUSH
49948: EMPTY
49949: LIST
49950: LIST
49951: PUSH
49952: LD_INT 1
49954: NEG
49955: PUSH
49956: LD_INT 3
49958: PUSH
49959: EMPTY
49960: LIST
49961: LIST
49962: PUSH
49963: LD_INT 2
49965: PUSH
49966: LD_INT 5
49968: PUSH
49969: EMPTY
49970: LIST
49971: LIST
49972: PUSH
49973: LD_INT 2
49975: NEG
49976: PUSH
49977: LD_INT 3
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: PUSH
49984: LD_INT 3
49986: NEG
49987: PUSH
49988: LD_INT 0
49990: PUSH
49991: EMPTY
49992: LIST
49993: LIST
49994: PUSH
49995: LD_INT 3
49997: NEG
49998: PUSH
49999: LD_INT 1
50001: NEG
50002: PUSH
50003: EMPTY
50004: LIST
50005: LIST
50006: PUSH
50007: LD_INT 2
50009: NEG
50010: PUSH
50011: LD_INT 0
50013: PUSH
50014: EMPTY
50015: LIST
50016: LIST
50017: PUSH
50018: LD_INT 2
50020: NEG
50021: PUSH
50022: LD_INT 1
50024: PUSH
50025: EMPTY
50026: LIST
50027: LIST
50028: PUSH
50029: LD_INT 3
50031: NEG
50032: PUSH
50033: LD_INT 1
50035: PUSH
50036: EMPTY
50037: LIST
50038: LIST
50039: PUSH
50040: LD_INT 4
50042: NEG
50043: PUSH
50044: LD_INT 0
50046: PUSH
50047: EMPTY
50048: LIST
50049: LIST
50050: PUSH
50051: LD_INT 4
50053: NEG
50054: PUSH
50055: LD_INT 1
50057: NEG
50058: PUSH
50059: EMPTY
50060: LIST
50061: LIST
50062: PUSH
50063: LD_INT 4
50065: NEG
50066: PUSH
50067: LD_INT 2
50069: NEG
50070: PUSH
50071: EMPTY
50072: LIST
50073: LIST
50074: PUSH
50075: LD_INT 2
50077: NEG
50078: PUSH
50079: LD_INT 2
50081: PUSH
50082: EMPTY
50083: LIST
50084: LIST
50085: PUSH
50086: LD_INT 4
50088: NEG
50089: PUSH
50090: LD_INT 4
50092: NEG
50093: PUSH
50094: EMPTY
50095: LIST
50096: LIST
50097: PUSH
50098: LD_INT 4
50100: NEG
50101: PUSH
50102: LD_INT 5
50104: NEG
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 3
50112: NEG
50113: PUSH
50114: LD_INT 4
50116: NEG
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: LD_INT 3
50124: NEG
50125: PUSH
50126: LD_INT 3
50128: NEG
50129: PUSH
50130: EMPTY
50131: LIST
50132: LIST
50133: PUSH
50134: LD_INT 4
50136: NEG
50137: PUSH
50138: LD_INT 3
50140: NEG
50141: PUSH
50142: EMPTY
50143: LIST
50144: LIST
50145: PUSH
50146: LD_INT 5
50148: NEG
50149: PUSH
50150: LD_INT 4
50152: NEG
50153: PUSH
50154: EMPTY
50155: LIST
50156: LIST
50157: PUSH
50158: LD_INT 5
50160: NEG
50161: PUSH
50162: LD_INT 5
50164: NEG
50165: PUSH
50166: EMPTY
50167: LIST
50168: LIST
50169: PUSH
50170: LD_INT 3
50172: NEG
50173: PUSH
50174: LD_INT 5
50176: NEG
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 5
50184: NEG
50185: PUSH
50186: LD_INT 3
50188: NEG
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: EMPTY
50195: LIST
50196: LIST
50197: LIST
50198: LIST
50199: LIST
50200: LIST
50201: LIST
50202: LIST
50203: LIST
50204: LIST
50205: LIST
50206: LIST
50207: LIST
50208: LIST
50209: LIST
50210: LIST
50211: LIST
50212: LIST
50213: LIST
50214: LIST
50215: LIST
50216: LIST
50217: LIST
50218: LIST
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: LIST
50225: LIST
50226: LIST
50227: LIST
50228: LIST
50229: LIST
50230: LIST
50231: LIST
50232: LIST
50233: LIST
50234: LIST
50235: LIST
50236: LIST
50237: LIST
50238: LIST
50239: LIST
50240: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
50241: LD_ADDR_VAR 0 30
50245: PUSH
50246: LD_INT 4
50248: PUSH
50249: LD_INT 4
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: LD_INT 4
50258: PUSH
50259: LD_INT 3
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: PUSH
50266: LD_INT 5
50268: PUSH
50269: LD_INT 4
50271: PUSH
50272: EMPTY
50273: LIST
50274: LIST
50275: PUSH
50276: LD_INT 5
50278: PUSH
50279: LD_INT 5
50281: PUSH
50282: EMPTY
50283: LIST
50284: LIST
50285: PUSH
50286: LD_INT 4
50288: PUSH
50289: LD_INT 5
50291: PUSH
50292: EMPTY
50293: LIST
50294: LIST
50295: PUSH
50296: LD_INT 3
50298: PUSH
50299: LD_INT 4
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: PUSH
50306: LD_INT 3
50308: PUSH
50309: LD_INT 3
50311: PUSH
50312: EMPTY
50313: LIST
50314: LIST
50315: PUSH
50316: LD_INT 5
50318: PUSH
50319: LD_INT 3
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: PUSH
50326: LD_INT 3
50328: PUSH
50329: LD_INT 5
50331: PUSH
50332: EMPTY
50333: LIST
50334: LIST
50335: PUSH
50336: LD_INT 0
50338: PUSH
50339: LD_INT 3
50341: PUSH
50342: EMPTY
50343: LIST
50344: LIST
50345: PUSH
50346: LD_INT 0
50348: PUSH
50349: LD_INT 2
50351: PUSH
50352: EMPTY
50353: LIST
50354: LIST
50355: PUSH
50356: LD_INT 1
50358: PUSH
50359: LD_INT 3
50361: PUSH
50362: EMPTY
50363: LIST
50364: LIST
50365: PUSH
50366: LD_INT 1
50368: PUSH
50369: LD_INT 4
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 0
50378: PUSH
50379: LD_INT 4
50381: PUSH
50382: EMPTY
50383: LIST
50384: LIST
50385: PUSH
50386: LD_INT 1
50388: NEG
50389: PUSH
50390: LD_INT 3
50392: PUSH
50393: EMPTY
50394: LIST
50395: LIST
50396: PUSH
50397: LD_INT 1
50399: NEG
50400: PUSH
50401: LD_INT 2
50403: PUSH
50404: EMPTY
50405: LIST
50406: LIST
50407: PUSH
50408: LD_INT 2
50410: PUSH
50411: LD_INT 4
50413: PUSH
50414: EMPTY
50415: LIST
50416: LIST
50417: PUSH
50418: LD_INT 2
50420: NEG
50421: PUSH
50422: LD_INT 2
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 4
50431: NEG
50432: PUSH
50433: LD_INT 0
50435: PUSH
50436: EMPTY
50437: LIST
50438: LIST
50439: PUSH
50440: LD_INT 4
50442: NEG
50443: PUSH
50444: LD_INT 1
50446: NEG
50447: PUSH
50448: EMPTY
50449: LIST
50450: LIST
50451: PUSH
50452: LD_INT 3
50454: NEG
50455: PUSH
50456: LD_INT 0
50458: PUSH
50459: EMPTY
50460: LIST
50461: LIST
50462: PUSH
50463: LD_INT 3
50465: NEG
50466: PUSH
50467: LD_INT 1
50469: PUSH
50470: EMPTY
50471: LIST
50472: LIST
50473: PUSH
50474: LD_INT 4
50476: NEG
50477: PUSH
50478: LD_INT 1
50480: PUSH
50481: EMPTY
50482: LIST
50483: LIST
50484: PUSH
50485: LD_INT 5
50487: NEG
50488: PUSH
50489: LD_INT 0
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 5
50498: NEG
50499: PUSH
50500: LD_INT 1
50502: NEG
50503: PUSH
50504: EMPTY
50505: LIST
50506: LIST
50507: PUSH
50508: LD_INT 5
50510: NEG
50511: PUSH
50512: LD_INT 2
50514: NEG
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: LD_INT 3
50522: NEG
50523: PUSH
50524: LD_INT 2
50526: PUSH
50527: EMPTY
50528: LIST
50529: LIST
50530: PUSH
50531: LD_INT 3
50533: NEG
50534: PUSH
50535: LD_INT 3
50537: NEG
50538: PUSH
50539: EMPTY
50540: LIST
50541: LIST
50542: PUSH
50543: LD_INT 3
50545: NEG
50546: PUSH
50547: LD_INT 4
50549: NEG
50550: PUSH
50551: EMPTY
50552: LIST
50553: LIST
50554: PUSH
50555: LD_INT 2
50557: NEG
50558: PUSH
50559: LD_INT 3
50561: NEG
50562: PUSH
50563: EMPTY
50564: LIST
50565: LIST
50566: PUSH
50567: LD_INT 2
50569: NEG
50570: PUSH
50571: LD_INT 2
50573: NEG
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 3
50581: NEG
50582: PUSH
50583: LD_INT 2
50585: NEG
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 4
50593: NEG
50594: PUSH
50595: LD_INT 3
50597: NEG
50598: PUSH
50599: EMPTY
50600: LIST
50601: LIST
50602: PUSH
50603: LD_INT 4
50605: NEG
50606: PUSH
50607: LD_INT 4
50609: NEG
50610: PUSH
50611: EMPTY
50612: LIST
50613: LIST
50614: PUSH
50615: LD_INT 2
50617: NEG
50618: PUSH
50619: LD_INT 4
50621: NEG
50622: PUSH
50623: EMPTY
50624: LIST
50625: LIST
50626: PUSH
50627: LD_INT 4
50629: NEG
50630: PUSH
50631: LD_INT 2
50633: NEG
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 0
50641: PUSH
50642: LD_INT 4
50644: NEG
50645: PUSH
50646: EMPTY
50647: LIST
50648: LIST
50649: PUSH
50650: LD_INT 0
50652: PUSH
50653: LD_INT 5
50655: NEG
50656: PUSH
50657: EMPTY
50658: LIST
50659: LIST
50660: PUSH
50661: LD_INT 1
50663: PUSH
50664: LD_INT 4
50666: NEG
50667: PUSH
50668: EMPTY
50669: LIST
50670: LIST
50671: PUSH
50672: LD_INT 1
50674: PUSH
50675: LD_INT 3
50677: NEG
50678: PUSH
50679: EMPTY
50680: LIST
50681: LIST
50682: PUSH
50683: LD_INT 0
50685: PUSH
50686: LD_INT 3
50688: NEG
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: PUSH
50694: LD_INT 1
50696: NEG
50697: PUSH
50698: LD_INT 4
50700: NEG
50701: PUSH
50702: EMPTY
50703: LIST
50704: LIST
50705: PUSH
50706: LD_INT 1
50708: NEG
50709: PUSH
50710: LD_INT 5
50712: NEG
50713: PUSH
50714: EMPTY
50715: LIST
50716: LIST
50717: PUSH
50718: LD_INT 2
50720: PUSH
50721: LD_INT 3
50723: NEG
50724: PUSH
50725: EMPTY
50726: LIST
50727: LIST
50728: PUSH
50729: LD_INT 2
50731: NEG
50732: PUSH
50733: LD_INT 5
50735: NEG
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: EMPTY
50742: LIST
50743: LIST
50744: LIST
50745: LIST
50746: LIST
50747: LIST
50748: LIST
50749: LIST
50750: LIST
50751: LIST
50752: LIST
50753: LIST
50754: LIST
50755: LIST
50756: LIST
50757: LIST
50758: LIST
50759: LIST
50760: LIST
50761: LIST
50762: LIST
50763: LIST
50764: LIST
50765: LIST
50766: LIST
50767: LIST
50768: LIST
50769: LIST
50770: LIST
50771: LIST
50772: LIST
50773: LIST
50774: LIST
50775: LIST
50776: LIST
50777: LIST
50778: LIST
50779: LIST
50780: LIST
50781: LIST
50782: LIST
50783: LIST
50784: LIST
50785: LIST
50786: LIST
50787: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
50788: LD_ADDR_VAR 0 31
50792: PUSH
50793: LD_INT 0
50795: PUSH
50796: LD_INT 4
50798: PUSH
50799: EMPTY
50800: LIST
50801: LIST
50802: PUSH
50803: LD_INT 0
50805: PUSH
50806: LD_INT 3
50808: PUSH
50809: EMPTY
50810: LIST
50811: LIST
50812: PUSH
50813: LD_INT 1
50815: PUSH
50816: LD_INT 4
50818: PUSH
50819: EMPTY
50820: LIST
50821: LIST
50822: PUSH
50823: LD_INT 1
50825: PUSH
50826: LD_INT 5
50828: PUSH
50829: EMPTY
50830: LIST
50831: LIST
50832: PUSH
50833: LD_INT 0
50835: PUSH
50836: LD_INT 5
50838: PUSH
50839: EMPTY
50840: LIST
50841: LIST
50842: PUSH
50843: LD_INT 1
50845: NEG
50846: PUSH
50847: LD_INT 4
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 1
50856: NEG
50857: PUSH
50858: LD_INT 3
50860: PUSH
50861: EMPTY
50862: LIST
50863: LIST
50864: PUSH
50865: LD_INT 2
50867: PUSH
50868: LD_INT 5
50870: PUSH
50871: EMPTY
50872: LIST
50873: LIST
50874: PUSH
50875: LD_INT 2
50877: NEG
50878: PUSH
50879: LD_INT 3
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 3
50888: NEG
50889: PUSH
50890: LD_INT 0
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 3
50899: NEG
50900: PUSH
50901: LD_INT 1
50903: NEG
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: LD_INT 2
50911: NEG
50912: PUSH
50913: LD_INT 0
50915: PUSH
50916: EMPTY
50917: LIST
50918: LIST
50919: PUSH
50920: LD_INT 2
50922: NEG
50923: PUSH
50924: LD_INT 1
50926: PUSH
50927: EMPTY
50928: LIST
50929: LIST
50930: PUSH
50931: LD_INT 3
50933: NEG
50934: PUSH
50935: LD_INT 1
50937: PUSH
50938: EMPTY
50939: LIST
50940: LIST
50941: PUSH
50942: LD_INT 4
50944: NEG
50945: PUSH
50946: LD_INT 0
50948: PUSH
50949: EMPTY
50950: LIST
50951: LIST
50952: PUSH
50953: LD_INT 4
50955: NEG
50956: PUSH
50957: LD_INT 1
50959: NEG
50960: PUSH
50961: EMPTY
50962: LIST
50963: LIST
50964: PUSH
50965: LD_INT 4
50967: NEG
50968: PUSH
50969: LD_INT 2
50971: NEG
50972: PUSH
50973: EMPTY
50974: LIST
50975: LIST
50976: PUSH
50977: LD_INT 2
50979: NEG
50980: PUSH
50981: LD_INT 2
50983: PUSH
50984: EMPTY
50985: LIST
50986: LIST
50987: PUSH
50988: LD_INT 4
50990: NEG
50991: PUSH
50992: LD_INT 4
50994: NEG
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 4
51002: NEG
51003: PUSH
51004: LD_INT 5
51006: NEG
51007: PUSH
51008: EMPTY
51009: LIST
51010: LIST
51011: PUSH
51012: LD_INT 3
51014: NEG
51015: PUSH
51016: LD_INT 4
51018: NEG
51019: PUSH
51020: EMPTY
51021: LIST
51022: LIST
51023: PUSH
51024: LD_INT 3
51026: NEG
51027: PUSH
51028: LD_INT 3
51030: NEG
51031: PUSH
51032: EMPTY
51033: LIST
51034: LIST
51035: PUSH
51036: LD_INT 4
51038: NEG
51039: PUSH
51040: LD_INT 3
51042: NEG
51043: PUSH
51044: EMPTY
51045: LIST
51046: LIST
51047: PUSH
51048: LD_INT 5
51050: NEG
51051: PUSH
51052: LD_INT 4
51054: NEG
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 5
51062: NEG
51063: PUSH
51064: LD_INT 5
51066: NEG
51067: PUSH
51068: EMPTY
51069: LIST
51070: LIST
51071: PUSH
51072: LD_INT 3
51074: NEG
51075: PUSH
51076: LD_INT 5
51078: NEG
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 5
51086: NEG
51087: PUSH
51088: LD_INT 3
51090: NEG
51091: PUSH
51092: EMPTY
51093: LIST
51094: LIST
51095: PUSH
51096: LD_INT 0
51098: PUSH
51099: LD_INT 3
51101: NEG
51102: PUSH
51103: EMPTY
51104: LIST
51105: LIST
51106: PUSH
51107: LD_INT 0
51109: PUSH
51110: LD_INT 4
51112: NEG
51113: PUSH
51114: EMPTY
51115: LIST
51116: LIST
51117: PUSH
51118: LD_INT 1
51120: PUSH
51121: LD_INT 3
51123: NEG
51124: PUSH
51125: EMPTY
51126: LIST
51127: LIST
51128: PUSH
51129: LD_INT 1
51131: PUSH
51132: LD_INT 2
51134: NEG
51135: PUSH
51136: EMPTY
51137: LIST
51138: LIST
51139: PUSH
51140: LD_INT 0
51142: PUSH
51143: LD_INT 2
51145: NEG
51146: PUSH
51147: EMPTY
51148: LIST
51149: LIST
51150: PUSH
51151: LD_INT 1
51153: NEG
51154: PUSH
51155: LD_INT 3
51157: NEG
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 1
51165: NEG
51166: PUSH
51167: LD_INT 4
51169: NEG
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 2
51177: PUSH
51178: LD_INT 2
51180: NEG
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 2
51188: NEG
51189: PUSH
51190: LD_INT 4
51192: NEG
51193: PUSH
51194: EMPTY
51195: LIST
51196: LIST
51197: PUSH
51198: LD_INT 4
51200: PUSH
51201: LD_INT 0
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 4
51210: PUSH
51211: LD_INT 1
51213: NEG
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 5
51221: PUSH
51222: LD_INT 0
51224: PUSH
51225: EMPTY
51226: LIST
51227: LIST
51228: PUSH
51229: LD_INT 5
51231: PUSH
51232: LD_INT 1
51234: PUSH
51235: EMPTY
51236: LIST
51237: LIST
51238: PUSH
51239: LD_INT 4
51241: PUSH
51242: LD_INT 1
51244: PUSH
51245: EMPTY
51246: LIST
51247: LIST
51248: PUSH
51249: LD_INT 3
51251: PUSH
51252: LD_INT 0
51254: PUSH
51255: EMPTY
51256: LIST
51257: LIST
51258: PUSH
51259: LD_INT 3
51261: PUSH
51262: LD_INT 1
51264: NEG
51265: PUSH
51266: EMPTY
51267: LIST
51268: LIST
51269: PUSH
51270: LD_INT 3
51272: PUSH
51273: LD_INT 2
51275: NEG
51276: PUSH
51277: EMPTY
51278: LIST
51279: LIST
51280: PUSH
51281: LD_INT 5
51283: PUSH
51284: LD_INT 2
51286: PUSH
51287: EMPTY
51288: LIST
51289: LIST
51290: PUSH
51291: EMPTY
51292: LIST
51293: LIST
51294: LIST
51295: LIST
51296: LIST
51297: LIST
51298: LIST
51299: LIST
51300: LIST
51301: LIST
51302: LIST
51303: LIST
51304: LIST
51305: LIST
51306: LIST
51307: LIST
51308: LIST
51309: LIST
51310: LIST
51311: LIST
51312: LIST
51313: LIST
51314: LIST
51315: LIST
51316: LIST
51317: LIST
51318: LIST
51319: LIST
51320: LIST
51321: LIST
51322: LIST
51323: LIST
51324: LIST
51325: LIST
51326: LIST
51327: LIST
51328: LIST
51329: LIST
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
51338: LD_ADDR_VAR 0 32
51342: PUSH
51343: LD_INT 4
51345: NEG
51346: PUSH
51347: LD_INT 0
51349: PUSH
51350: EMPTY
51351: LIST
51352: LIST
51353: PUSH
51354: LD_INT 4
51356: NEG
51357: PUSH
51358: LD_INT 1
51360: NEG
51361: PUSH
51362: EMPTY
51363: LIST
51364: LIST
51365: PUSH
51366: LD_INT 3
51368: NEG
51369: PUSH
51370: LD_INT 0
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: PUSH
51377: LD_INT 3
51379: NEG
51380: PUSH
51381: LD_INT 1
51383: PUSH
51384: EMPTY
51385: LIST
51386: LIST
51387: PUSH
51388: LD_INT 4
51390: NEG
51391: PUSH
51392: LD_INT 1
51394: PUSH
51395: EMPTY
51396: LIST
51397: LIST
51398: PUSH
51399: LD_INT 5
51401: NEG
51402: PUSH
51403: LD_INT 0
51405: PUSH
51406: EMPTY
51407: LIST
51408: LIST
51409: PUSH
51410: LD_INT 5
51412: NEG
51413: PUSH
51414: LD_INT 1
51416: NEG
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 5
51424: NEG
51425: PUSH
51426: LD_INT 2
51428: NEG
51429: PUSH
51430: EMPTY
51431: LIST
51432: LIST
51433: PUSH
51434: LD_INT 3
51436: NEG
51437: PUSH
51438: LD_INT 2
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 3
51447: NEG
51448: PUSH
51449: LD_INT 3
51451: NEG
51452: PUSH
51453: EMPTY
51454: LIST
51455: LIST
51456: PUSH
51457: LD_INT 3
51459: NEG
51460: PUSH
51461: LD_INT 4
51463: NEG
51464: PUSH
51465: EMPTY
51466: LIST
51467: LIST
51468: PUSH
51469: LD_INT 2
51471: NEG
51472: PUSH
51473: LD_INT 3
51475: NEG
51476: PUSH
51477: EMPTY
51478: LIST
51479: LIST
51480: PUSH
51481: LD_INT 2
51483: NEG
51484: PUSH
51485: LD_INT 2
51487: NEG
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 3
51495: NEG
51496: PUSH
51497: LD_INT 2
51499: NEG
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 4
51507: NEG
51508: PUSH
51509: LD_INT 3
51511: NEG
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: LD_INT 4
51519: NEG
51520: PUSH
51521: LD_INT 4
51523: NEG
51524: PUSH
51525: EMPTY
51526: LIST
51527: LIST
51528: PUSH
51529: LD_INT 2
51531: NEG
51532: PUSH
51533: LD_INT 4
51535: NEG
51536: PUSH
51537: EMPTY
51538: LIST
51539: LIST
51540: PUSH
51541: LD_INT 4
51543: NEG
51544: PUSH
51545: LD_INT 2
51547: NEG
51548: PUSH
51549: EMPTY
51550: LIST
51551: LIST
51552: PUSH
51553: LD_INT 0
51555: PUSH
51556: LD_INT 4
51558: NEG
51559: PUSH
51560: EMPTY
51561: LIST
51562: LIST
51563: PUSH
51564: LD_INT 0
51566: PUSH
51567: LD_INT 5
51569: NEG
51570: PUSH
51571: EMPTY
51572: LIST
51573: LIST
51574: PUSH
51575: LD_INT 1
51577: PUSH
51578: LD_INT 4
51580: NEG
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 1
51588: PUSH
51589: LD_INT 3
51591: NEG
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 0
51599: PUSH
51600: LD_INT 3
51602: NEG
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 1
51610: NEG
51611: PUSH
51612: LD_INT 4
51614: NEG
51615: PUSH
51616: EMPTY
51617: LIST
51618: LIST
51619: PUSH
51620: LD_INT 1
51622: NEG
51623: PUSH
51624: LD_INT 5
51626: NEG
51627: PUSH
51628: EMPTY
51629: LIST
51630: LIST
51631: PUSH
51632: LD_INT 2
51634: PUSH
51635: LD_INT 3
51637: NEG
51638: PUSH
51639: EMPTY
51640: LIST
51641: LIST
51642: PUSH
51643: LD_INT 2
51645: NEG
51646: PUSH
51647: LD_INT 5
51649: NEG
51650: PUSH
51651: EMPTY
51652: LIST
51653: LIST
51654: PUSH
51655: LD_INT 3
51657: PUSH
51658: LD_INT 0
51660: PUSH
51661: EMPTY
51662: LIST
51663: LIST
51664: PUSH
51665: LD_INT 3
51667: PUSH
51668: LD_INT 1
51670: NEG
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 4
51678: PUSH
51679: LD_INT 0
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 4
51688: PUSH
51689: LD_INT 1
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 3
51698: PUSH
51699: LD_INT 1
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 2
51708: PUSH
51709: LD_INT 0
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 2
51718: PUSH
51719: LD_INT 1
51721: NEG
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 2
51729: PUSH
51730: LD_INT 2
51732: NEG
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 4
51740: PUSH
51741: LD_INT 2
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 4
51750: PUSH
51751: LD_INT 4
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 4
51760: PUSH
51761: LD_INT 3
51763: PUSH
51764: EMPTY
51765: LIST
51766: LIST
51767: PUSH
51768: LD_INT 5
51770: PUSH
51771: LD_INT 4
51773: PUSH
51774: EMPTY
51775: LIST
51776: LIST
51777: PUSH
51778: LD_INT 5
51780: PUSH
51781: LD_INT 5
51783: PUSH
51784: EMPTY
51785: LIST
51786: LIST
51787: PUSH
51788: LD_INT 4
51790: PUSH
51791: LD_INT 5
51793: PUSH
51794: EMPTY
51795: LIST
51796: LIST
51797: PUSH
51798: LD_INT 3
51800: PUSH
51801: LD_INT 4
51803: PUSH
51804: EMPTY
51805: LIST
51806: LIST
51807: PUSH
51808: LD_INT 3
51810: PUSH
51811: LD_INT 3
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 5
51820: PUSH
51821: LD_INT 3
51823: PUSH
51824: EMPTY
51825: LIST
51826: LIST
51827: PUSH
51828: LD_INT 3
51830: PUSH
51831: LD_INT 5
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: EMPTY
51839: LIST
51840: LIST
51841: LIST
51842: LIST
51843: LIST
51844: LIST
51845: LIST
51846: LIST
51847: LIST
51848: LIST
51849: LIST
51850: LIST
51851: LIST
51852: LIST
51853: LIST
51854: LIST
51855: LIST
51856: LIST
51857: LIST
51858: LIST
51859: LIST
51860: LIST
51861: LIST
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
51885: LD_ADDR_VAR 0 33
51889: PUSH
51890: LD_INT 4
51892: NEG
51893: PUSH
51894: LD_INT 4
51896: NEG
51897: PUSH
51898: EMPTY
51899: LIST
51900: LIST
51901: PUSH
51902: LD_INT 4
51904: NEG
51905: PUSH
51906: LD_INT 5
51908: NEG
51909: PUSH
51910: EMPTY
51911: LIST
51912: LIST
51913: PUSH
51914: LD_INT 3
51916: NEG
51917: PUSH
51918: LD_INT 4
51920: NEG
51921: PUSH
51922: EMPTY
51923: LIST
51924: LIST
51925: PUSH
51926: LD_INT 3
51928: NEG
51929: PUSH
51930: LD_INT 3
51932: NEG
51933: PUSH
51934: EMPTY
51935: LIST
51936: LIST
51937: PUSH
51938: LD_INT 4
51940: NEG
51941: PUSH
51942: LD_INT 3
51944: NEG
51945: PUSH
51946: EMPTY
51947: LIST
51948: LIST
51949: PUSH
51950: LD_INT 5
51952: NEG
51953: PUSH
51954: LD_INT 4
51956: NEG
51957: PUSH
51958: EMPTY
51959: LIST
51960: LIST
51961: PUSH
51962: LD_INT 5
51964: NEG
51965: PUSH
51966: LD_INT 5
51968: NEG
51969: PUSH
51970: EMPTY
51971: LIST
51972: LIST
51973: PUSH
51974: LD_INT 3
51976: NEG
51977: PUSH
51978: LD_INT 5
51980: NEG
51981: PUSH
51982: EMPTY
51983: LIST
51984: LIST
51985: PUSH
51986: LD_INT 5
51988: NEG
51989: PUSH
51990: LD_INT 3
51992: NEG
51993: PUSH
51994: EMPTY
51995: LIST
51996: LIST
51997: PUSH
51998: LD_INT 0
52000: PUSH
52001: LD_INT 3
52003: NEG
52004: PUSH
52005: EMPTY
52006: LIST
52007: LIST
52008: PUSH
52009: LD_INT 0
52011: PUSH
52012: LD_INT 4
52014: NEG
52015: PUSH
52016: EMPTY
52017: LIST
52018: LIST
52019: PUSH
52020: LD_INT 1
52022: PUSH
52023: LD_INT 3
52025: NEG
52026: PUSH
52027: EMPTY
52028: LIST
52029: LIST
52030: PUSH
52031: LD_INT 1
52033: PUSH
52034: LD_INT 2
52036: NEG
52037: PUSH
52038: EMPTY
52039: LIST
52040: LIST
52041: PUSH
52042: LD_INT 0
52044: PUSH
52045: LD_INT 2
52047: NEG
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 1
52055: NEG
52056: PUSH
52057: LD_INT 3
52059: NEG
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 1
52067: NEG
52068: PUSH
52069: LD_INT 4
52071: NEG
52072: PUSH
52073: EMPTY
52074: LIST
52075: LIST
52076: PUSH
52077: LD_INT 2
52079: PUSH
52080: LD_INT 2
52082: NEG
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 2
52090: NEG
52091: PUSH
52092: LD_INT 4
52094: NEG
52095: PUSH
52096: EMPTY
52097: LIST
52098: LIST
52099: PUSH
52100: LD_INT 4
52102: PUSH
52103: LD_INT 0
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 4
52112: PUSH
52113: LD_INT 1
52115: NEG
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 5
52123: PUSH
52124: LD_INT 0
52126: PUSH
52127: EMPTY
52128: LIST
52129: LIST
52130: PUSH
52131: LD_INT 5
52133: PUSH
52134: LD_INT 1
52136: PUSH
52137: EMPTY
52138: LIST
52139: LIST
52140: PUSH
52141: LD_INT 4
52143: PUSH
52144: LD_INT 1
52146: PUSH
52147: EMPTY
52148: LIST
52149: LIST
52150: PUSH
52151: LD_INT 3
52153: PUSH
52154: LD_INT 0
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 3
52163: PUSH
52164: LD_INT 1
52166: NEG
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 3
52174: PUSH
52175: LD_INT 2
52177: NEG
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 5
52185: PUSH
52186: LD_INT 2
52188: PUSH
52189: EMPTY
52190: LIST
52191: LIST
52192: PUSH
52193: LD_INT 3
52195: PUSH
52196: LD_INT 3
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 3
52205: PUSH
52206: LD_INT 2
52208: PUSH
52209: EMPTY
52210: LIST
52211: LIST
52212: PUSH
52213: LD_INT 4
52215: PUSH
52216: LD_INT 3
52218: PUSH
52219: EMPTY
52220: LIST
52221: LIST
52222: PUSH
52223: LD_INT 4
52225: PUSH
52226: LD_INT 4
52228: PUSH
52229: EMPTY
52230: LIST
52231: LIST
52232: PUSH
52233: LD_INT 3
52235: PUSH
52236: LD_INT 4
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: PUSH
52243: LD_INT 2
52245: PUSH
52246: LD_INT 3
52248: PUSH
52249: EMPTY
52250: LIST
52251: LIST
52252: PUSH
52253: LD_INT 2
52255: PUSH
52256: LD_INT 2
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 4
52265: PUSH
52266: LD_INT 2
52268: PUSH
52269: EMPTY
52270: LIST
52271: LIST
52272: PUSH
52273: LD_INT 2
52275: PUSH
52276: LD_INT 4
52278: PUSH
52279: EMPTY
52280: LIST
52281: LIST
52282: PUSH
52283: LD_INT 0
52285: PUSH
52286: LD_INT 4
52288: PUSH
52289: EMPTY
52290: LIST
52291: LIST
52292: PUSH
52293: LD_INT 0
52295: PUSH
52296: LD_INT 3
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: PUSH
52303: LD_INT 1
52305: PUSH
52306: LD_INT 4
52308: PUSH
52309: EMPTY
52310: LIST
52311: LIST
52312: PUSH
52313: LD_INT 1
52315: PUSH
52316: LD_INT 5
52318: PUSH
52319: EMPTY
52320: LIST
52321: LIST
52322: PUSH
52323: LD_INT 0
52325: PUSH
52326: LD_INT 5
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: PUSH
52333: LD_INT 1
52335: NEG
52336: PUSH
52337: LD_INT 4
52339: PUSH
52340: EMPTY
52341: LIST
52342: LIST
52343: PUSH
52344: LD_INT 1
52346: NEG
52347: PUSH
52348: LD_INT 3
52350: PUSH
52351: EMPTY
52352: LIST
52353: LIST
52354: PUSH
52355: LD_INT 2
52357: PUSH
52358: LD_INT 5
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 2
52367: NEG
52368: PUSH
52369: LD_INT 3
52371: PUSH
52372: EMPTY
52373: LIST
52374: LIST
52375: PUSH
52376: EMPTY
52377: LIST
52378: LIST
52379: LIST
52380: LIST
52381: LIST
52382: LIST
52383: LIST
52384: LIST
52385: LIST
52386: LIST
52387: LIST
52388: LIST
52389: LIST
52390: LIST
52391: LIST
52392: LIST
52393: LIST
52394: LIST
52395: LIST
52396: LIST
52397: LIST
52398: LIST
52399: LIST
52400: LIST
52401: LIST
52402: LIST
52403: LIST
52404: LIST
52405: LIST
52406: LIST
52407: LIST
52408: LIST
52409: LIST
52410: LIST
52411: LIST
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: LIST
52419: LIST
52420: LIST
52421: LIST
52422: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
52423: LD_ADDR_VAR 0 34
52427: PUSH
52428: LD_INT 0
52430: PUSH
52431: LD_INT 4
52433: NEG
52434: PUSH
52435: EMPTY
52436: LIST
52437: LIST
52438: PUSH
52439: LD_INT 0
52441: PUSH
52442: LD_INT 5
52444: NEG
52445: PUSH
52446: EMPTY
52447: LIST
52448: LIST
52449: PUSH
52450: LD_INT 1
52452: PUSH
52453: LD_INT 4
52455: NEG
52456: PUSH
52457: EMPTY
52458: LIST
52459: LIST
52460: PUSH
52461: LD_INT 1
52463: PUSH
52464: LD_INT 3
52466: NEG
52467: PUSH
52468: EMPTY
52469: LIST
52470: LIST
52471: PUSH
52472: LD_INT 0
52474: PUSH
52475: LD_INT 3
52477: NEG
52478: PUSH
52479: EMPTY
52480: LIST
52481: LIST
52482: PUSH
52483: LD_INT 1
52485: NEG
52486: PUSH
52487: LD_INT 4
52489: NEG
52490: PUSH
52491: EMPTY
52492: LIST
52493: LIST
52494: PUSH
52495: LD_INT 1
52497: NEG
52498: PUSH
52499: LD_INT 5
52501: NEG
52502: PUSH
52503: EMPTY
52504: LIST
52505: LIST
52506: PUSH
52507: LD_INT 2
52509: PUSH
52510: LD_INT 3
52512: NEG
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 2
52520: NEG
52521: PUSH
52522: LD_INT 5
52524: NEG
52525: PUSH
52526: EMPTY
52527: LIST
52528: LIST
52529: PUSH
52530: LD_INT 3
52532: PUSH
52533: LD_INT 0
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 3
52542: PUSH
52543: LD_INT 1
52545: NEG
52546: PUSH
52547: EMPTY
52548: LIST
52549: LIST
52550: PUSH
52551: LD_INT 4
52553: PUSH
52554: LD_INT 0
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 4
52563: PUSH
52564: LD_INT 1
52566: PUSH
52567: EMPTY
52568: LIST
52569: LIST
52570: PUSH
52571: LD_INT 3
52573: PUSH
52574: LD_INT 1
52576: PUSH
52577: EMPTY
52578: LIST
52579: LIST
52580: PUSH
52581: LD_INT 2
52583: PUSH
52584: LD_INT 0
52586: PUSH
52587: EMPTY
52588: LIST
52589: LIST
52590: PUSH
52591: LD_INT 2
52593: PUSH
52594: LD_INT 1
52596: NEG
52597: PUSH
52598: EMPTY
52599: LIST
52600: LIST
52601: PUSH
52602: LD_INT 2
52604: PUSH
52605: LD_INT 2
52607: NEG
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 4
52615: PUSH
52616: LD_INT 2
52618: PUSH
52619: EMPTY
52620: LIST
52621: LIST
52622: PUSH
52623: LD_INT 4
52625: PUSH
52626: LD_INT 4
52628: PUSH
52629: EMPTY
52630: LIST
52631: LIST
52632: PUSH
52633: LD_INT 4
52635: PUSH
52636: LD_INT 3
52638: PUSH
52639: EMPTY
52640: LIST
52641: LIST
52642: PUSH
52643: LD_INT 5
52645: PUSH
52646: LD_INT 4
52648: PUSH
52649: EMPTY
52650: LIST
52651: LIST
52652: PUSH
52653: LD_INT 5
52655: PUSH
52656: LD_INT 5
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 4
52665: PUSH
52666: LD_INT 5
52668: PUSH
52669: EMPTY
52670: LIST
52671: LIST
52672: PUSH
52673: LD_INT 3
52675: PUSH
52676: LD_INT 4
52678: PUSH
52679: EMPTY
52680: LIST
52681: LIST
52682: PUSH
52683: LD_INT 3
52685: PUSH
52686: LD_INT 3
52688: PUSH
52689: EMPTY
52690: LIST
52691: LIST
52692: PUSH
52693: LD_INT 5
52695: PUSH
52696: LD_INT 3
52698: PUSH
52699: EMPTY
52700: LIST
52701: LIST
52702: PUSH
52703: LD_INT 3
52705: PUSH
52706: LD_INT 5
52708: PUSH
52709: EMPTY
52710: LIST
52711: LIST
52712: PUSH
52713: LD_INT 0
52715: PUSH
52716: LD_INT 3
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 0
52725: PUSH
52726: LD_INT 2
52728: PUSH
52729: EMPTY
52730: LIST
52731: LIST
52732: PUSH
52733: LD_INT 1
52735: PUSH
52736: LD_INT 3
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 1
52745: PUSH
52746: LD_INT 4
52748: PUSH
52749: EMPTY
52750: LIST
52751: LIST
52752: PUSH
52753: LD_INT 0
52755: PUSH
52756: LD_INT 4
52758: PUSH
52759: EMPTY
52760: LIST
52761: LIST
52762: PUSH
52763: LD_INT 1
52765: NEG
52766: PUSH
52767: LD_INT 3
52769: PUSH
52770: EMPTY
52771: LIST
52772: LIST
52773: PUSH
52774: LD_INT 1
52776: NEG
52777: PUSH
52778: LD_INT 2
52780: PUSH
52781: EMPTY
52782: LIST
52783: LIST
52784: PUSH
52785: LD_INT 2
52787: PUSH
52788: LD_INT 4
52790: PUSH
52791: EMPTY
52792: LIST
52793: LIST
52794: PUSH
52795: LD_INT 2
52797: NEG
52798: PUSH
52799: LD_INT 2
52801: PUSH
52802: EMPTY
52803: LIST
52804: LIST
52805: PUSH
52806: LD_INT 4
52808: NEG
52809: PUSH
52810: LD_INT 0
52812: PUSH
52813: EMPTY
52814: LIST
52815: LIST
52816: PUSH
52817: LD_INT 4
52819: NEG
52820: PUSH
52821: LD_INT 1
52823: NEG
52824: PUSH
52825: EMPTY
52826: LIST
52827: LIST
52828: PUSH
52829: LD_INT 3
52831: NEG
52832: PUSH
52833: LD_INT 0
52835: PUSH
52836: EMPTY
52837: LIST
52838: LIST
52839: PUSH
52840: LD_INT 3
52842: NEG
52843: PUSH
52844: LD_INT 1
52846: PUSH
52847: EMPTY
52848: LIST
52849: LIST
52850: PUSH
52851: LD_INT 4
52853: NEG
52854: PUSH
52855: LD_INT 1
52857: PUSH
52858: EMPTY
52859: LIST
52860: LIST
52861: PUSH
52862: LD_INT 5
52864: NEG
52865: PUSH
52866: LD_INT 0
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: LD_INT 5
52875: NEG
52876: PUSH
52877: LD_INT 1
52879: NEG
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 5
52887: NEG
52888: PUSH
52889: LD_INT 2
52891: NEG
52892: PUSH
52893: EMPTY
52894: LIST
52895: LIST
52896: PUSH
52897: LD_INT 3
52899: NEG
52900: PUSH
52901: LD_INT 2
52903: PUSH
52904: EMPTY
52905: LIST
52906: LIST
52907: PUSH
52908: EMPTY
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: LIST
52920: LIST
52921: LIST
52922: LIST
52923: LIST
52924: LIST
52925: LIST
52926: LIST
52927: LIST
52928: LIST
52929: LIST
52930: LIST
52931: LIST
52932: LIST
52933: LIST
52934: LIST
52935: LIST
52936: LIST
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: LIST
52948: LIST
52949: LIST
52950: LIST
52951: LIST
52952: LIST
52953: LIST
52954: ST_TO_ADDR
// end ; end ;
52955: GO 52958
52957: POP
// case btype of b_depot , b_warehouse :
52958: LD_VAR 0 1
52962: PUSH
52963: LD_INT 0
52965: DOUBLE
52966: EQUAL
52967: IFTRUE 52977
52969: LD_INT 1
52971: DOUBLE
52972: EQUAL
52973: IFTRUE 52977
52975: GO 53178
52977: POP
// case nation of nation_american :
52978: LD_VAR 0 5
52982: PUSH
52983: LD_INT 1
52985: DOUBLE
52986: EQUAL
52987: IFTRUE 52991
52989: GO 53047
52991: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
52992: LD_ADDR_VAR 0 9
52996: PUSH
52997: LD_VAR 0 11
53001: PUSH
53002: LD_VAR 0 12
53006: PUSH
53007: LD_VAR 0 13
53011: PUSH
53012: LD_VAR 0 14
53016: PUSH
53017: LD_VAR 0 15
53021: PUSH
53022: LD_VAR 0 16
53026: PUSH
53027: EMPTY
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: PUSH
53035: LD_VAR 0 4
53039: PUSH
53040: LD_INT 1
53042: PLUS
53043: ARRAY
53044: ST_TO_ADDR
53045: GO 53176
53047: LD_INT 2
53049: DOUBLE
53050: EQUAL
53051: IFTRUE 53055
53053: GO 53111
53055: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
53056: LD_ADDR_VAR 0 9
53060: PUSH
53061: LD_VAR 0 17
53065: PUSH
53066: LD_VAR 0 18
53070: PUSH
53071: LD_VAR 0 19
53075: PUSH
53076: LD_VAR 0 20
53080: PUSH
53081: LD_VAR 0 21
53085: PUSH
53086: LD_VAR 0 22
53090: PUSH
53091: EMPTY
53092: LIST
53093: LIST
53094: LIST
53095: LIST
53096: LIST
53097: LIST
53098: PUSH
53099: LD_VAR 0 4
53103: PUSH
53104: LD_INT 1
53106: PLUS
53107: ARRAY
53108: ST_TO_ADDR
53109: GO 53176
53111: LD_INT 3
53113: DOUBLE
53114: EQUAL
53115: IFTRUE 53119
53117: GO 53175
53119: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
53120: LD_ADDR_VAR 0 9
53124: PUSH
53125: LD_VAR 0 23
53129: PUSH
53130: LD_VAR 0 24
53134: PUSH
53135: LD_VAR 0 25
53139: PUSH
53140: LD_VAR 0 26
53144: PUSH
53145: LD_VAR 0 27
53149: PUSH
53150: LD_VAR 0 28
53154: PUSH
53155: EMPTY
53156: LIST
53157: LIST
53158: LIST
53159: LIST
53160: LIST
53161: LIST
53162: PUSH
53163: LD_VAR 0 4
53167: PUSH
53168: LD_INT 1
53170: PLUS
53171: ARRAY
53172: ST_TO_ADDR
53173: GO 53176
53175: POP
53176: GO 53731
53178: LD_INT 2
53180: DOUBLE
53181: EQUAL
53182: IFTRUE 53192
53184: LD_INT 3
53186: DOUBLE
53187: EQUAL
53188: IFTRUE 53192
53190: GO 53248
53192: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
53193: LD_ADDR_VAR 0 9
53197: PUSH
53198: LD_VAR 0 29
53202: PUSH
53203: LD_VAR 0 30
53207: PUSH
53208: LD_VAR 0 31
53212: PUSH
53213: LD_VAR 0 32
53217: PUSH
53218: LD_VAR 0 33
53222: PUSH
53223: LD_VAR 0 34
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: LIST
53232: LIST
53233: LIST
53234: LIST
53235: PUSH
53236: LD_VAR 0 4
53240: PUSH
53241: LD_INT 1
53243: PLUS
53244: ARRAY
53245: ST_TO_ADDR
53246: GO 53731
53248: LD_INT 16
53250: DOUBLE
53251: EQUAL
53252: IFTRUE 53310
53254: LD_INT 17
53256: DOUBLE
53257: EQUAL
53258: IFTRUE 53310
53260: LD_INT 18
53262: DOUBLE
53263: EQUAL
53264: IFTRUE 53310
53266: LD_INT 19
53268: DOUBLE
53269: EQUAL
53270: IFTRUE 53310
53272: LD_INT 22
53274: DOUBLE
53275: EQUAL
53276: IFTRUE 53310
53278: LD_INT 20
53280: DOUBLE
53281: EQUAL
53282: IFTRUE 53310
53284: LD_INT 21
53286: DOUBLE
53287: EQUAL
53288: IFTRUE 53310
53290: LD_INT 23
53292: DOUBLE
53293: EQUAL
53294: IFTRUE 53310
53296: LD_INT 24
53298: DOUBLE
53299: EQUAL
53300: IFTRUE 53310
53302: LD_INT 25
53304: DOUBLE
53305: EQUAL
53306: IFTRUE 53310
53308: GO 53366
53310: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
53311: LD_ADDR_VAR 0 9
53315: PUSH
53316: LD_VAR 0 35
53320: PUSH
53321: LD_VAR 0 36
53325: PUSH
53326: LD_VAR 0 37
53330: PUSH
53331: LD_VAR 0 38
53335: PUSH
53336: LD_VAR 0 39
53340: PUSH
53341: LD_VAR 0 40
53345: PUSH
53346: EMPTY
53347: LIST
53348: LIST
53349: LIST
53350: LIST
53351: LIST
53352: LIST
53353: PUSH
53354: LD_VAR 0 4
53358: PUSH
53359: LD_INT 1
53361: PLUS
53362: ARRAY
53363: ST_TO_ADDR
53364: GO 53731
53366: LD_INT 6
53368: DOUBLE
53369: EQUAL
53370: IFTRUE 53422
53372: LD_INT 7
53374: DOUBLE
53375: EQUAL
53376: IFTRUE 53422
53378: LD_INT 8
53380: DOUBLE
53381: EQUAL
53382: IFTRUE 53422
53384: LD_INT 13
53386: DOUBLE
53387: EQUAL
53388: IFTRUE 53422
53390: LD_INT 12
53392: DOUBLE
53393: EQUAL
53394: IFTRUE 53422
53396: LD_INT 15
53398: DOUBLE
53399: EQUAL
53400: IFTRUE 53422
53402: LD_INT 11
53404: DOUBLE
53405: EQUAL
53406: IFTRUE 53422
53408: LD_INT 14
53410: DOUBLE
53411: EQUAL
53412: IFTRUE 53422
53414: LD_INT 10
53416: DOUBLE
53417: EQUAL
53418: IFTRUE 53422
53420: GO 53478
53422: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
53423: LD_ADDR_VAR 0 9
53427: PUSH
53428: LD_VAR 0 41
53432: PUSH
53433: LD_VAR 0 42
53437: PUSH
53438: LD_VAR 0 43
53442: PUSH
53443: LD_VAR 0 44
53447: PUSH
53448: LD_VAR 0 45
53452: PUSH
53453: LD_VAR 0 46
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: PUSH
53466: LD_VAR 0 4
53470: PUSH
53471: LD_INT 1
53473: PLUS
53474: ARRAY
53475: ST_TO_ADDR
53476: GO 53731
53478: LD_INT 36
53480: DOUBLE
53481: EQUAL
53482: IFTRUE 53486
53484: GO 53542
53486: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
53487: LD_ADDR_VAR 0 9
53491: PUSH
53492: LD_VAR 0 47
53496: PUSH
53497: LD_VAR 0 48
53501: PUSH
53502: LD_VAR 0 49
53506: PUSH
53507: LD_VAR 0 50
53511: PUSH
53512: LD_VAR 0 51
53516: PUSH
53517: LD_VAR 0 52
53521: PUSH
53522: EMPTY
53523: LIST
53524: LIST
53525: LIST
53526: LIST
53527: LIST
53528: LIST
53529: PUSH
53530: LD_VAR 0 4
53534: PUSH
53535: LD_INT 1
53537: PLUS
53538: ARRAY
53539: ST_TO_ADDR
53540: GO 53731
53542: LD_INT 4
53544: DOUBLE
53545: EQUAL
53546: IFTRUE 53568
53548: LD_INT 5
53550: DOUBLE
53551: EQUAL
53552: IFTRUE 53568
53554: LD_INT 34
53556: DOUBLE
53557: EQUAL
53558: IFTRUE 53568
53560: LD_INT 37
53562: DOUBLE
53563: EQUAL
53564: IFTRUE 53568
53566: GO 53624
53568: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
53569: LD_ADDR_VAR 0 9
53573: PUSH
53574: LD_VAR 0 53
53578: PUSH
53579: LD_VAR 0 54
53583: PUSH
53584: LD_VAR 0 55
53588: PUSH
53589: LD_VAR 0 56
53593: PUSH
53594: LD_VAR 0 57
53598: PUSH
53599: LD_VAR 0 58
53603: PUSH
53604: EMPTY
53605: LIST
53606: LIST
53607: LIST
53608: LIST
53609: LIST
53610: LIST
53611: PUSH
53612: LD_VAR 0 4
53616: PUSH
53617: LD_INT 1
53619: PLUS
53620: ARRAY
53621: ST_TO_ADDR
53622: GO 53731
53624: LD_INT 31
53626: DOUBLE
53627: EQUAL
53628: IFTRUE 53674
53630: LD_INT 32
53632: DOUBLE
53633: EQUAL
53634: IFTRUE 53674
53636: LD_INT 33
53638: DOUBLE
53639: EQUAL
53640: IFTRUE 53674
53642: LD_INT 27
53644: DOUBLE
53645: EQUAL
53646: IFTRUE 53674
53648: LD_INT 26
53650: DOUBLE
53651: EQUAL
53652: IFTRUE 53674
53654: LD_INT 28
53656: DOUBLE
53657: EQUAL
53658: IFTRUE 53674
53660: LD_INT 29
53662: DOUBLE
53663: EQUAL
53664: IFTRUE 53674
53666: LD_INT 30
53668: DOUBLE
53669: EQUAL
53670: IFTRUE 53674
53672: GO 53730
53674: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
53675: LD_ADDR_VAR 0 9
53679: PUSH
53680: LD_VAR 0 59
53684: PUSH
53685: LD_VAR 0 60
53689: PUSH
53690: LD_VAR 0 61
53694: PUSH
53695: LD_VAR 0 62
53699: PUSH
53700: LD_VAR 0 63
53704: PUSH
53705: LD_VAR 0 64
53709: PUSH
53710: EMPTY
53711: LIST
53712: LIST
53713: LIST
53714: LIST
53715: LIST
53716: LIST
53717: PUSH
53718: LD_VAR 0 4
53722: PUSH
53723: LD_INT 1
53725: PLUS
53726: ARRAY
53727: ST_TO_ADDR
53728: GO 53731
53730: POP
// temp_list2 = [ ] ;
53731: LD_ADDR_VAR 0 10
53735: PUSH
53736: EMPTY
53737: ST_TO_ADDR
// for i in temp_list do
53738: LD_ADDR_VAR 0 8
53742: PUSH
53743: LD_VAR 0 9
53747: PUSH
53748: FOR_IN
53749: IFFALSE 53801
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
53751: LD_ADDR_VAR 0 10
53755: PUSH
53756: LD_VAR 0 10
53760: PUSH
53761: LD_VAR 0 8
53765: PUSH
53766: LD_INT 1
53768: ARRAY
53769: PUSH
53770: LD_VAR 0 2
53774: PLUS
53775: PUSH
53776: LD_VAR 0 8
53780: PUSH
53781: LD_INT 2
53783: ARRAY
53784: PUSH
53785: LD_VAR 0 3
53789: PLUS
53790: PUSH
53791: EMPTY
53792: LIST
53793: LIST
53794: PUSH
53795: EMPTY
53796: LIST
53797: ADD
53798: ST_TO_ADDR
53799: GO 53748
53801: POP
53802: POP
// result = temp_list2 ;
53803: LD_ADDR_VAR 0 7
53807: PUSH
53808: LD_VAR 0 10
53812: ST_TO_ADDR
// end ;
53813: LD_VAR 0 7
53817: RET
// export function EnemyInRange ( unit , dist ) ; begin
53818: LD_INT 0
53820: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
53821: LD_ADDR_VAR 0 3
53825: PUSH
53826: LD_VAR 0 1
53830: PPUSH
53831: CALL_OW 255
53835: PPUSH
53836: LD_VAR 0 1
53840: PPUSH
53841: CALL_OW 250
53845: PPUSH
53846: LD_VAR 0 1
53850: PPUSH
53851: CALL_OW 251
53855: PPUSH
53856: LD_VAR 0 2
53860: PPUSH
53861: CALL 27214 0 4
53865: PUSH
53866: LD_INT 4
53868: ARRAY
53869: ST_TO_ADDR
// end ;
53870: LD_VAR 0 3
53874: RET
// export function PlayerSeeMe ( unit ) ; begin
53875: LD_INT 0
53877: PPUSH
// result := See ( your_side , unit ) ;
53878: LD_ADDR_VAR 0 2
53882: PUSH
53883: LD_OWVAR 2
53887: PPUSH
53888: LD_VAR 0 1
53892: PPUSH
53893: CALL_OW 292
53897: ST_TO_ADDR
// end ;
53898: LD_VAR 0 2
53902: RET
// export function ReverseDir ( unit ) ; begin
53903: LD_INT 0
53905: PPUSH
// if not unit then
53906: LD_VAR 0 1
53910: NOT
53911: IFFALSE 53915
// exit ;
53913: GO 53938
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
53915: LD_ADDR_VAR 0 2
53919: PUSH
53920: LD_VAR 0 1
53924: PPUSH
53925: CALL_OW 254
53929: PUSH
53930: LD_INT 3
53932: PLUS
53933: PUSH
53934: LD_INT 6
53936: MOD
53937: ST_TO_ADDR
// end ;
53938: LD_VAR 0 2
53942: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
53943: LD_INT 0
53945: PPUSH
53946: PPUSH
53947: PPUSH
53948: PPUSH
53949: PPUSH
// if not hexes then
53950: LD_VAR 0 2
53954: NOT
53955: IFFALSE 53959
// exit ;
53957: GO 54107
// dist := 9999 ;
53959: LD_ADDR_VAR 0 5
53963: PUSH
53964: LD_INT 9999
53966: ST_TO_ADDR
// for i = 1 to hexes do
53967: LD_ADDR_VAR 0 4
53971: PUSH
53972: DOUBLE
53973: LD_INT 1
53975: DEC
53976: ST_TO_ADDR
53977: LD_VAR 0 2
53981: PUSH
53982: FOR_TO
53983: IFFALSE 54095
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
53985: LD_VAR 0 1
53989: PPUSH
53990: LD_VAR 0 2
53994: PUSH
53995: LD_VAR 0 4
53999: ARRAY
54000: PUSH
54001: LD_INT 1
54003: ARRAY
54004: PPUSH
54005: LD_VAR 0 2
54009: PUSH
54010: LD_VAR 0 4
54014: ARRAY
54015: PUSH
54016: LD_INT 2
54018: ARRAY
54019: PPUSH
54020: CALL_OW 297
54024: PUSH
54025: LD_VAR 0 5
54029: LESS
54030: IFFALSE 54093
// begin hex := hexes [ i ] ;
54032: LD_ADDR_VAR 0 7
54036: PUSH
54037: LD_VAR 0 2
54041: PUSH
54042: LD_VAR 0 4
54046: ARRAY
54047: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
54048: LD_ADDR_VAR 0 5
54052: PUSH
54053: LD_VAR 0 1
54057: PPUSH
54058: LD_VAR 0 2
54062: PUSH
54063: LD_VAR 0 4
54067: ARRAY
54068: PUSH
54069: LD_INT 1
54071: ARRAY
54072: PPUSH
54073: LD_VAR 0 2
54077: PUSH
54078: LD_VAR 0 4
54082: ARRAY
54083: PUSH
54084: LD_INT 2
54086: ARRAY
54087: PPUSH
54088: CALL_OW 297
54092: ST_TO_ADDR
// end ; end ;
54093: GO 53982
54095: POP
54096: POP
// result := hex ;
54097: LD_ADDR_VAR 0 3
54101: PUSH
54102: LD_VAR 0 7
54106: ST_TO_ADDR
// end ;
54107: LD_VAR 0 3
54111: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
54112: LD_INT 0
54114: PPUSH
54115: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
54116: LD_VAR 0 1
54120: NOT
54121: PUSH
54122: LD_VAR 0 1
54126: PUSH
54127: LD_INT 21
54129: PUSH
54130: LD_INT 2
54132: PUSH
54133: EMPTY
54134: LIST
54135: LIST
54136: PUSH
54137: LD_INT 23
54139: PUSH
54140: LD_INT 2
54142: PUSH
54143: EMPTY
54144: LIST
54145: LIST
54146: PUSH
54147: EMPTY
54148: LIST
54149: LIST
54150: PPUSH
54151: CALL_OW 69
54155: IN
54156: NOT
54157: OR
54158: IFFALSE 54162
// exit ;
54160: GO 54209
// for i = 1 to 3 do
54162: LD_ADDR_VAR 0 3
54166: PUSH
54167: DOUBLE
54168: LD_INT 1
54170: DEC
54171: ST_TO_ADDR
54172: LD_INT 3
54174: PUSH
54175: FOR_TO
54176: IFFALSE 54207
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
54178: LD_VAR 0 1
54182: PPUSH
54183: CALL_OW 250
54187: PPUSH
54188: LD_VAR 0 1
54192: PPUSH
54193: CALL_OW 251
54197: PPUSH
54198: LD_INT 1
54200: PPUSH
54201: CALL_OW 453
54205: GO 54175
54207: POP
54208: POP
// end ;
54209: LD_VAR 0 2
54213: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
54214: LD_INT 0
54216: PPUSH
54217: PPUSH
54218: PPUSH
54219: PPUSH
54220: PPUSH
54221: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
54222: LD_VAR 0 1
54226: NOT
54227: PUSH
54228: LD_VAR 0 2
54232: NOT
54233: OR
54234: PUSH
54235: LD_VAR 0 1
54239: PPUSH
54240: CALL_OW 314
54244: OR
54245: IFFALSE 54249
// exit ;
54247: GO 54690
// x := GetX ( enemy_unit ) ;
54249: LD_ADDR_VAR 0 7
54253: PUSH
54254: LD_VAR 0 2
54258: PPUSH
54259: CALL_OW 250
54263: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
54264: LD_ADDR_VAR 0 8
54268: PUSH
54269: LD_VAR 0 2
54273: PPUSH
54274: CALL_OW 251
54278: ST_TO_ADDR
// if not x or not y then
54279: LD_VAR 0 7
54283: NOT
54284: PUSH
54285: LD_VAR 0 8
54289: NOT
54290: OR
54291: IFFALSE 54295
// exit ;
54293: GO 54690
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
54295: LD_ADDR_VAR 0 6
54299: PUSH
54300: LD_VAR 0 7
54304: PPUSH
54305: LD_INT 0
54307: PPUSH
54308: LD_INT 4
54310: PPUSH
54311: CALL_OW 272
54315: PUSH
54316: LD_VAR 0 8
54320: PPUSH
54321: LD_INT 0
54323: PPUSH
54324: LD_INT 4
54326: PPUSH
54327: CALL_OW 273
54331: PUSH
54332: EMPTY
54333: LIST
54334: LIST
54335: PUSH
54336: LD_VAR 0 7
54340: PPUSH
54341: LD_INT 1
54343: PPUSH
54344: LD_INT 4
54346: PPUSH
54347: CALL_OW 272
54351: PUSH
54352: LD_VAR 0 8
54356: PPUSH
54357: LD_INT 1
54359: PPUSH
54360: LD_INT 4
54362: PPUSH
54363: CALL_OW 273
54367: PUSH
54368: EMPTY
54369: LIST
54370: LIST
54371: PUSH
54372: LD_VAR 0 7
54376: PPUSH
54377: LD_INT 2
54379: PPUSH
54380: LD_INT 4
54382: PPUSH
54383: CALL_OW 272
54387: PUSH
54388: LD_VAR 0 8
54392: PPUSH
54393: LD_INT 2
54395: PPUSH
54396: LD_INT 4
54398: PPUSH
54399: CALL_OW 273
54403: PUSH
54404: EMPTY
54405: LIST
54406: LIST
54407: PUSH
54408: LD_VAR 0 7
54412: PPUSH
54413: LD_INT 3
54415: PPUSH
54416: LD_INT 4
54418: PPUSH
54419: CALL_OW 272
54423: PUSH
54424: LD_VAR 0 8
54428: PPUSH
54429: LD_INT 3
54431: PPUSH
54432: LD_INT 4
54434: PPUSH
54435: CALL_OW 273
54439: PUSH
54440: EMPTY
54441: LIST
54442: LIST
54443: PUSH
54444: LD_VAR 0 7
54448: PPUSH
54449: LD_INT 4
54451: PPUSH
54452: LD_INT 4
54454: PPUSH
54455: CALL_OW 272
54459: PUSH
54460: LD_VAR 0 8
54464: PPUSH
54465: LD_INT 4
54467: PPUSH
54468: LD_INT 4
54470: PPUSH
54471: CALL_OW 273
54475: PUSH
54476: EMPTY
54477: LIST
54478: LIST
54479: PUSH
54480: LD_VAR 0 7
54484: PPUSH
54485: LD_INT 5
54487: PPUSH
54488: LD_INT 4
54490: PPUSH
54491: CALL_OW 272
54495: PUSH
54496: LD_VAR 0 8
54500: PPUSH
54501: LD_INT 5
54503: PPUSH
54504: LD_INT 4
54506: PPUSH
54507: CALL_OW 273
54511: PUSH
54512: EMPTY
54513: LIST
54514: LIST
54515: PUSH
54516: EMPTY
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: ST_TO_ADDR
// for i = tmp downto 1 do
54524: LD_ADDR_VAR 0 4
54528: PUSH
54529: DOUBLE
54530: LD_VAR 0 6
54534: INC
54535: ST_TO_ADDR
54536: LD_INT 1
54538: PUSH
54539: FOR_DOWNTO
54540: IFFALSE 54641
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
54542: LD_VAR 0 6
54546: PUSH
54547: LD_VAR 0 4
54551: ARRAY
54552: PUSH
54553: LD_INT 1
54555: ARRAY
54556: PPUSH
54557: LD_VAR 0 6
54561: PUSH
54562: LD_VAR 0 4
54566: ARRAY
54567: PUSH
54568: LD_INT 2
54570: ARRAY
54571: PPUSH
54572: CALL_OW 488
54576: NOT
54577: PUSH
54578: LD_VAR 0 6
54582: PUSH
54583: LD_VAR 0 4
54587: ARRAY
54588: PUSH
54589: LD_INT 1
54591: ARRAY
54592: PPUSH
54593: LD_VAR 0 6
54597: PUSH
54598: LD_VAR 0 4
54602: ARRAY
54603: PUSH
54604: LD_INT 2
54606: ARRAY
54607: PPUSH
54608: CALL_OW 428
54612: PUSH
54613: LD_INT 0
54615: NONEQUAL
54616: OR
54617: IFFALSE 54639
// tmp := Delete ( tmp , i ) ;
54619: LD_ADDR_VAR 0 6
54623: PUSH
54624: LD_VAR 0 6
54628: PPUSH
54629: LD_VAR 0 4
54633: PPUSH
54634: CALL_OW 3
54638: ST_TO_ADDR
54639: GO 54539
54641: POP
54642: POP
// j := GetClosestHex ( unit , tmp ) ;
54643: LD_ADDR_VAR 0 5
54647: PUSH
54648: LD_VAR 0 1
54652: PPUSH
54653: LD_VAR 0 6
54657: PPUSH
54658: CALL 53943 0 2
54662: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
54663: LD_VAR 0 1
54667: PPUSH
54668: LD_VAR 0 5
54672: PUSH
54673: LD_INT 1
54675: ARRAY
54676: PPUSH
54677: LD_VAR 0 5
54681: PUSH
54682: LD_INT 2
54684: ARRAY
54685: PPUSH
54686: CALL_OW 111
// end ;
54690: LD_VAR 0 3
54694: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
54695: LD_INT 0
54697: PPUSH
54698: PPUSH
54699: PPUSH
// uc_side = 0 ;
54700: LD_ADDR_OWVAR 20
54704: PUSH
54705: LD_INT 0
54707: ST_TO_ADDR
// uc_nation = 0 ;
54708: LD_ADDR_OWVAR 21
54712: PUSH
54713: LD_INT 0
54715: ST_TO_ADDR
// InitHc_All ( ) ;
54716: CALL_OW 584
// InitVc ;
54720: CALL_OW 20
// if mastodonts then
54724: LD_VAR 0 6
54728: IFFALSE 54795
// for i = 1 to mastodonts do
54730: LD_ADDR_VAR 0 11
54734: PUSH
54735: DOUBLE
54736: LD_INT 1
54738: DEC
54739: ST_TO_ADDR
54740: LD_VAR 0 6
54744: PUSH
54745: FOR_TO
54746: IFFALSE 54793
// begin vc_chassis := 31 ;
54748: LD_ADDR_OWVAR 37
54752: PUSH
54753: LD_INT 31
54755: ST_TO_ADDR
// vc_control := control_rider ;
54756: LD_ADDR_OWVAR 38
54760: PUSH
54761: LD_INT 4
54763: ST_TO_ADDR
// animal := CreateVehicle ;
54764: LD_ADDR_VAR 0 12
54768: PUSH
54769: CALL_OW 45
54773: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54774: LD_VAR 0 12
54778: PPUSH
54779: LD_VAR 0 8
54783: PPUSH
54784: LD_INT 0
54786: PPUSH
54787: CALL 56983 0 3
// end ;
54791: GO 54745
54793: POP
54794: POP
// if horses then
54795: LD_VAR 0 5
54799: IFFALSE 54866
// for i = 1 to horses do
54801: LD_ADDR_VAR 0 11
54805: PUSH
54806: DOUBLE
54807: LD_INT 1
54809: DEC
54810: ST_TO_ADDR
54811: LD_VAR 0 5
54815: PUSH
54816: FOR_TO
54817: IFFALSE 54864
// begin hc_class := 21 ;
54819: LD_ADDR_OWVAR 28
54823: PUSH
54824: LD_INT 21
54826: ST_TO_ADDR
// hc_gallery :=  ;
54827: LD_ADDR_OWVAR 33
54831: PUSH
54832: LD_STRING 
54834: ST_TO_ADDR
// animal := CreateHuman ;
54835: LD_ADDR_VAR 0 12
54839: PUSH
54840: CALL_OW 44
54844: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54845: LD_VAR 0 12
54849: PPUSH
54850: LD_VAR 0 8
54854: PPUSH
54855: LD_INT 0
54857: PPUSH
54858: CALL 56983 0 3
// end ;
54862: GO 54816
54864: POP
54865: POP
// if birds then
54866: LD_VAR 0 1
54870: IFFALSE 54937
// for i = 1 to birds do
54872: LD_ADDR_VAR 0 11
54876: PUSH
54877: DOUBLE
54878: LD_INT 1
54880: DEC
54881: ST_TO_ADDR
54882: LD_VAR 0 1
54886: PUSH
54887: FOR_TO
54888: IFFALSE 54935
// begin hc_class = 18 ;
54890: LD_ADDR_OWVAR 28
54894: PUSH
54895: LD_INT 18
54897: ST_TO_ADDR
// hc_gallery =  ;
54898: LD_ADDR_OWVAR 33
54902: PUSH
54903: LD_STRING 
54905: ST_TO_ADDR
// animal := CreateHuman ;
54906: LD_ADDR_VAR 0 12
54910: PUSH
54911: CALL_OW 44
54915: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54916: LD_VAR 0 12
54920: PPUSH
54921: LD_VAR 0 8
54925: PPUSH
54926: LD_INT 0
54928: PPUSH
54929: CALL 56983 0 3
// end ;
54933: GO 54887
54935: POP
54936: POP
// if tigers then
54937: LD_VAR 0 2
54941: IFFALSE 55025
// for i = 1 to tigers do
54943: LD_ADDR_VAR 0 11
54947: PUSH
54948: DOUBLE
54949: LD_INT 1
54951: DEC
54952: ST_TO_ADDR
54953: LD_VAR 0 2
54957: PUSH
54958: FOR_TO
54959: IFFALSE 55023
// begin hc_class = class_tiger ;
54961: LD_ADDR_OWVAR 28
54965: PUSH
54966: LD_INT 14
54968: ST_TO_ADDR
// hc_gallery =  ;
54969: LD_ADDR_OWVAR 33
54973: PUSH
54974: LD_STRING 
54976: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
54977: LD_ADDR_OWVAR 35
54981: PUSH
54982: LD_INT 7
54984: NEG
54985: PPUSH
54986: LD_INT 7
54988: PPUSH
54989: CALL_OW 12
54993: ST_TO_ADDR
// animal := CreateHuman ;
54994: LD_ADDR_VAR 0 12
54998: PUSH
54999: CALL_OW 44
55003: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55004: LD_VAR 0 12
55008: PPUSH
55009: LD_VAR 0 8
55013: PPUSH
55014: LD_INT 0
55016: PPUSH
55017: CALL 56983 0 3
// end ;
55021: GO 54958
55023: POP
55024: POP
// if apemans then
55025: LD_VAR 0 3
55029: IFFALSE 55152
// for i = 1 to apemans do
55031: LD_ADDR_VAR 0 11
55035: PUSH
55036: DOUBLE
55037: LD_INT 1
55039: DEC
55040: ST_TO_ADDR
55041: LD_VAR 0 3
55045: PUSH
55046: FOR_TO
55047: IFFALSE 55150
// begin hc_class = class_apeman ;
55049: LD_ADDR_OWVAR 28
55053: PUSH
55054: LD_INT 12
55056: ST_TO_ADDR
// hc_gallery =  ;
55057: LD_ADDR_OWVAR 33
55061: PUSH
55062: LD_STRING 
55064: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
55065: LD_ADDR_OWVAR 35
55069: PUSH
55070: LD_INT 2
55072: NEG
55073: PPUSH
55074: LD_INT 2
55076: PPUSH
55077: CALL_OW 12
55081: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
55082: LD_ADDR_OWVAR 31
55086: PUSH
55087: LD_INT 1
55089: PPUSH
55090: LD_INT 3
55092: PPUSH
55093: CALL_OW 12
55097: PUSH
55098: LD_INT 1
55100: PPUSH
55101: LD_INT 3
55103: PPUSH
55104: CALL_OW 12
55108: PUSH
55109: LD_INT 0
55111: PUSH
55112: LD_INT 0
55114: PUSH
55115: EMPTY
55116: LIST
55117: LIST
55118: LIST
55119: LIST
55120: ST_TO_ADDR
// animal := CreateHuman ;
55121: LD_ADDR_VAR 0 12
55125: PUSH
55126: CALL_OW 44
55130: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55131: LD_VAR 0 12
55135: PPUSH
55136: LD_VAR 0 8
55140: PPUSH
55141: LD_INT 0
55143: PPUSH
55144: CALL 56983 0 3
// end ;
55148: GO 55046
55150: POP
55151: POP
// if enchidnas then
55152: LD_VAR 0 4
55156: IFFALSE 55223
// for i = 1 to enchidnas do
55158: LD_ADDR_VAR 0 11
55162: PUSH
55163: DOUBLE
55164: LD_INT 1
55166: DEC
55167: ST_TO_ADDR
55168: LD_VAR 0 4
55172: PUSH
55173: FOR_TO
55174: IFFALSE 55221
// begin hc_class = 13 ;
55176: LD_ADDR_OWVAR 28
55180: PUSH
55181: LD_INT 13
55183: ST_TO_ADDR
// hc_gallery =  ;
55184: LD_ADDR_OWVAR 33
55188: PUSH
55189: LD_STRING 
55191: ST_TO_ADDR
// animal := CreateHuman ;
55192: LD_ADDR_VAR 0 12
55196: PUSH
55197: CALL_OW 44
55201: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55202: LD_VAR 0 12
55206: PPUSH
55207: LD_VAR 0 8
55211: PPUSH
55212: LD_INT 0
55214: PPUSH
55215: CALL 56983 0 3
// end ;
55219: GO 55173
55221: POP
55222: POP
// if fishes then
55223: LD_VAR 0 7
55227: IFFALSE 55294
// for i = 1 to fishes do
55229: LD_ADDR_VAR 0 11
55233: PUSH
55234: DOUBLE
55235: LD_INT 1
55237: DEC
55238: ST_TO_ADDR
55239: LD_VAR 0 7
55243: PUSH
55244: FOR_TO
55245: IFFALSE 55292
// begin hc_class = 20 ;
55247: LD_ADDR_OWVAR 28
55251: PUSH
55252: LD_INT 20
55254: ST_TO_ADDR
// hc_gallery =  ;
55255: LD_ADDR_OWVAR 33
55259: PUSH
55260: LD_STRING 
55262: ST_TO_ADDR
// animal := CreateHuman ;
55263: LD_ADDR_VAR 0 12
55267: PUSH
55268: CALL_OW 44
55272: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
55273: LD_VAR 0 12
55277: PPUSH
55278: LD_VAR 0 9
55282: PPUSH
55283: LD_INT 0
55285: PPUSH
55286: CALL 56983 0 3
// end ;
55290: GO 55244
55292: POP
55293: POP
// end ;
55294: LD_VAR 0 10
55298: RET
// export function WantHeal ( sci , unit ) ; begin
55299: LD_INT 0
55301: PPUSH
// if GetTaskList ( sci ) > 0 then
55302: LD_VAR 0 1
55306: PPUSH
55307: CALL_OW 437
55311: PUSH
55312: LD_INT 0
55314: GREATER
55315: IFFALSE 55385
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
55317: LD_VAR 0 1
55321: PPUSH
55322: CALL_OW 437
55326: PUSH
55327: LD_INT 1
55329: ARRAY
55330: PUSH
55331: LD_INT 1
55333: ARRAY
55334: PUSH
55335: LD_STRING l
55337: EQUAL
55338: PUSH
55339: LD_VAR 0 1
55343: PPUSH
55344: CALL_OW 437
55348: PUSH
55349: LD_INT 1
55351: ARRAY
55352: PUSH
55353: LD_INT 4
55355: ARRAY
55356: PUSH
55357: LD_VAR 0 2
55361: EQUAL
55362: AND
55363: IFFALSE 55375
// result := true else
55365: LD_ADDR_VAR 0 3
55369: PUSH
55370: LD_INT 1
55372: ST_TO_ADDR
55373: GO 55383
// result := false ;
55375: LD_ADDR_VAR 0 3
55379: PUSH
55380: LD_INT 0
55382: ST_TO_ADDR
// end else
55383: GO 55393
// result := false ;
55385: LD_ADDR_VAR 0 3
55389: PUSH
55390: LD_INT 0
55392: ST_TO_ADDR
// end ;
55393: LD_VAR 0 3
55397: RET
// export function HealTarget ( sci ) ; begin
55398: LD_INT 0
55400: PPUSH
// if not sci then
55401: LD_VAR 0 1
55405: NOT
55406: IFFALSE 55410
// exit ;
55408: GO 55475
// result := 0 ;
55410: LD_ADDR_VAR 0 2
55414: PUSH
55415: LD_INT 0
55417: ST_TO_ADDR
// if GetTaskList ( sci ) then
55418: LD_VAR 0 1
55422: PPUSH
55423: CALL_OW 437
55427: IFFALSE 55475
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
55429: LD_VAR 0 1
55433: PPUSH
55434: CALL_OW 437
55438: PUSH
55439: LD_INT 1
55441: ARRAY
55442: PUSH
55443: LD_INT 1
55445: ARRAY
55446: PUSH
55447: LD_STRING l
55449: EQUAL
55450: IFFALSE 55475
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
55452: LD_ADDR_VAR 0 2
55456: PUSH
55457: LD_VAR 0 1
55461: PPUSH
55462: CALL_OW 437
55466: PUSH
55467: LD_INT 1
55469: ARRAY
55470: PUSH
55471: LD_INT 4
55473: ARRAY
55474: ST_TO_ADDR
// end ;
55475: LD_VAR 0 2
55479: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
55480: LD_INT 0
55482: PPUSH
55483: PPUSH
55484: PPUSH
55485: PPUSH
// if not base_units then
55486: LD_VAR 0 1
55490: NOT
55491: IFFALSE 55495
// exit ;
55493: GO 55582
// result := false ;
55495: LD_ADDR_VAR 0 2
55499: PUSH
55500: LD_INT 0
55502: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
55503: LD_ADDR_VAR 0 5
55507: PUSH
55508: LD_VAR 0 1
55512: PPUSH
55513: LD_INT 21
55515: PUSH
55516: LD_INT 3
55518: PUSH
55519: EMPTY
55520: LIST
55521: LIST
55522: PPUSH
55523: CALL_OW 72
55527: ST_TO_ADDR
// if not tmp then
55528: LD_VAR 0 5
55532: NOT
55533: IFFALSE 55537
// exit ;
55535: GO 55582
// for i in tmp do
55537: LD_ADDR_VAR 0 3
55541: PUSH
55542: LD_VAR 0 5
55546: PUSH
55547: FOR_IN
55548: IFFALSE 55580
// begin result := EnemyInRange ( i , 22 ) ;
55550: LD_ADDR_VAR 0 2
55554: PUSH
55555: LD_VAR 0 3
55559: PPUSH
55560: LD_INT 22
55562: PPUSH
55563: CALL 53818 0 2
55567: ST_TO_ADDR
// if result then
55568: LD_VAR 0 2
55572: IFFALSE 55578
// exit ;
55574: POP
55575: POP
55576: GO 55582
// end ;
55578: GO 55547
55580: POP
55581: POP
// end ;
55582: LD_VAR 0 2
55586: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
55587: LD_INT 0
55589: PPUSH
55590: PPUSH
// if not units then
55591: LD_VAR 0 1
55595: NOT
55596: IFFALSE 55600
// exit ;
55598: GO 55670
// result := [ ] ;
55600: LD_ADDR_VAR 0 3
55604: PUSH
55605: EMPTY
55606: ST_TO_ADDR
// for i in units do
55607: LD_ADDR_VAR 0 4
55611: PUSH
55612: LD_VAR 0 1
55616: PUSH
55617: FOR_IN
55618: IFFALSE 55668
// if GetTag ( i ) = tag then
55620: LD_VAR 0 4
55624: PPUSH
55625: CALL_OW 110
55629: PUSH
55630: LD_VAR 0 2
55634: EQUAL
55635: IFFALSE 55666
// result := Replace ( result , result + 1 , i ) ;
55637: LD_ADDR_VAR 0 3
55641: PUSH
55642: LD_VAR 0 3
55646: PPUSH
55647: LD_VAR 0 3
55651: PUSH
55652: LD_INT 1
55654: PLUS
55655: PPUSH
55656: LD_VAR 0 4
55660: PPUSH
55661: CALL_OW 1
55665: ST_TO_ADDR
55666: GO 55617
55668: POP
55669: POP
// end ;
55670: LD_VAR 0 3
55674: RET
// export function IsDriver ( un ) ; begin
55675: LD_INT 0
55677: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
55678: LD_ADDR_VAR 0 2
55682: PUSH
55683: LD_VAR 0 1
55687: PUSH
55688: LD_INT 55
55690: PUSH
55691: EMPTY
55692: LIST
55693: PPUSH
55694: CALL_OW 69
55698: IN
55699: ST_TO_ADDR
// end ;
55700: LD_VAR 0 2
55704: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
55705: LD_INT 0
55707: PPUSH
55708: PPUSH
// list := [ ] ;
55709: LD_ADDR_VAR 0 5
55713: PUSH
55714: EMPTY
55715: ST_TO_ADDR
// case d of 0 :
55716: LD_VAR 0 3
55720: PUSH
55721: LD_INT 0
55723: DOUBLE
55724: EQUAL
55725: IFTRUE 55729
55727: GO 55862
55729: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
55730: LD_ADDR_VAR 0 5
55734: PUSH
55735: LD_VAR 0 1
55739: PUSH
55740: LD_INT 4
55742: MINUS
55743: PUSH
55744: LD_VAR 0 2
55748: PUSH
55749: LD_INT 4
55751: MINUS
55752: PUSH
55753: LD_INT 2
55755: PUSH
55756: EMPTY
55757: LIST
55758: LIST
55759: LIST
55760: PUSH
55761: LD_VAR 0 1
55765: PUSH
55766: LD_INT 3
55768: MINUS
55769: PUSH
55770: LD_VAR 0 2
55774: PUSH
55775: LD_INT 1
55777: PUSH
55778: EMPTY
55779: LIST
55780: LIST
55781: LIST
55782: PUSH
55783: LD_VAR 0 1
55787: PUSH
55788: LD_INT 4
55790: PLUS
55791: PUSH
55792: LD_VAR 0 2
55796: PUSH
55797: LD_INT 4
55799: PUSH
55800: EMPTY
55801: LIST
55802: LIST
55803: LIST
55804: PUSH
55805: LD_VAR 0 1
55809: PUSH
55810: LD_INT 3
55812: PLUS
55813: PUSH
55814: LD_VAR 0 2
55818: PUSH
55819: LD_INT 3
55821: PLUS
55822: PUSH
55823: LD_INT 5
55825: PUSH
55826: EMPTY
55827: LIST
55828: LIST
55829: LIST
55830: PUSH
55831: LD_VAR 0 1
55835: PUSH
55836: LD_VAR 0 2
55840: PUSH
55841: LD_INT 4
55843: PLUS
55844: PUSH
55845: LD_INT 0
55847: PUSH
55848: EMPTY
55849: LIST
55850: LIST
55851: LIST
55852: PUSH
55853: EMPTY
55854: LIST
55855: LIST
55856: LIST
55857: LIST
55858: LIST
55859: ST_TO_ADDR
// end ; 1 :
55860: GO 56560
55862: LD_INT 1
55864: DOUBLE
55865: EQUAL
55866: IFTRUE 55870
55868: GO 56003
55870: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
55871: LD_ADDR_VAR 0 5
55875: PUSH
55876: LD_VAR 0 1
55880: PUSH
55881: LD_VAR 0 2
55885: PUSH
55886: LD_INT 4
55888: MINUS
55889: PUSH
55890: LD_INT 3
55892: PUSH
55893: EMPTY
55894: LIST
55895: LIST
55896: LIST
55897: PUSH
55898: LD_VAR 0 1
55902: PUSH
55903: LD_INT 3
55905: MINUS
55906: PUSH
55907: LD_VAR 0 2
55911: PUSH
55912: LD_INT 3
55914: MINUS
55915: PUSH
55916: LD_INT 2
55918: PUSH
55919: EMPTY
55920: LIST
55921: LIST
55922: LIST
55923: PUSH
55924: LD_VAR 0 1
55928: PUSH
55929: LD_INT 4
55931: MINUS
55932: PUSH
55933: LD_VAR 0 2
55937: PUSH
55938: LD_INT 1
55940: PUSH
55941: EMPTY
55942: LIST
55943: LIST
55944: LIST
55945: PUSH
55946: LD_VAR 0 1
55950: PUSH
55951: LD_VAR 0 2
55955: PUSH
55956: LD_INT 3
55958: PLUS
55959: PUSH
55960: LD_INT 0
55962: PUSH
55963: EMPTY
55964: LIST
55965: LIST
55966: LIST
55967: PUSH
55968: LD_VAR 0 1
55972: PUSH
55973: LD_INT 4
55975: PLUS
55976: PUSH
55977: LD_VAR 0 2
55981: PUSH
55982: LD_INT 4
55984: PLUS
55985: PUSH
55986: LD_INT 5
55988: PUSH
55989: EMPTY
55990: LIST
55991: LIST
55992: LIST
55993: PUSH
55994: EMPTY
55995: LIST
55996: LIST
55997: LIST
55998: LIST
55999: LIST
56000: ST_TO_ADDR
// end ; 2 :
56001: GO 56560
56003: LD_INT 2
56005: DOUBLE
56006: EQUAL
56007: IFTRUE 56011
56009: GO 56140
56011: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
56012: LD_ADDR_VAR 0 5
56016: PUSH
56017: LD_VAR 0 1
56021: PUSH
56022: LD_VAR 0 2
56026: PUSH
56027: LD_INT 3
56029: MINUS
56030: PUSH
56031: LD_INT 3
56033: PUSH
56034: EMPTY
56035: LIST
56036: LIST
56037: LIST
56038: PUSH
56039: LD_VAR 0 1
56043: PUSH
56044: LD_INT 4
56046: PLUS
56047: PUSH
56048: LD_VAR 0 2
56052: PUSH
56053: LD_INT 4
56055: PUSH
56056: EMPTY
56057: LIST
56058: LIST
56059: LIST
56060: PUSH
56061: LD_VAR 0 1
56065: PUSH
56066: LD_VAR 0 2
56070: PUSH
56071: LD_INT 4
56073: PLUS
56074: PUSH
56075: LD_INT 0
56077: PUSH
56078: EMPTY
56079: LIST
56080: LIST
56081: LIST
56082: PUSH
56083: LD_VAR 0 1
56087: PUSH
56088: LD_INT 3
56090: MINUS
56091: PUSH
56092: LD_VAR 0 2
56096: PUSH
56097: LD_INT 1
56099: PUSH
56100: EMPTY
56101: LIST
56102: LIST
56103: LIST
56104: PUSH
56105: LD_VAR 0 1
56109: PUSH
56110: LD_INT 4
56112: MINUS
56113: PUSH
56114: LD_VAR 0 2
56118: PUSH
56119: LD_INT 4
56121: MINUS
56122: PUSH
56123: LD_INT 2
56125: PUSH
56126: EMPTY
56127: LIST
56128: LIST
56129: LIST
56130: PUSH
56131: EMPTY
56132: LIST
56133: LIST
56134: LIST
56135: LIST
56136: LIST
56137: ST_TO_ADDR
// end ; 3 :
56138: GO 56560
56140: LD_INT 3
56142: DOUBLE
56143: EQUAL
56144: IFTRUE 56148
56146: GO 56281
56148: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
56149: LD_ADDR_VAR 0 5
56153: PUSH
56154: LD_VAR 0 1
56158: PUSH
56159: LD_INT 3
56161: PLUS
56162: PUSH
56163: LD_VAR 0 2
56167: PUSH
56168: LD_INT 4
56170: PUSH
56171: EMPTY
56172: LIST
56173: LIST
56174: LIST
56175: PUSH
56176: LD_VAR 0 1
56180: PUSH
56181: LD_INT 4
56183: PLUS
56184: PUSH
56185: LD_VAR 0 2
56189: PUSH
56190: LD_INT 4
56192: PLUS
56193: PUSH
56194: LD_INT 5
56196: PUSH
56197: EMPTY
56198: LIST
56199: LIST
56200: LIST
56201: PUSH
56202: LD_VAR 0 1
56206: PUSH
56207: LD_INT 4
56209: MINUS
56210: PUSH
56211: LD_VAR 0 2
56215: PUSH
56216: LD_INT 1
56218: PUSH
56219: EMPTY
56220: LIST
56221: LIST
56222: LIST
56223: PUSH
56224: LD_VAR 0 1
56228: PUSH
56229: LD_VAR 0 2
56233: PUSH
56234: LD_INT 4
56236: MINUS
56237: PUSH
56238: LD_INT 3
56240: PUSH
56241: EMPTY
56242: LIST
56243: LIST
56244: LIST
56245: PUSH
56246: LD_VAR 0 1
56250: PUSH
56251: LD_INT 3
56253: MINUS
56254: PUSH
56255: LD_VAR 0 2
56259: PUSH
56260: LD_INT 3
56262: MINUS
56263: PUSH
56264: LD_INT 2
56266: PUSH
56267: EMPTY
56268: LIST
56269: LIST
56270: LIST
56271: PUSH
56272: EMPTY
56273: LIST
56274: LIST
56275: LIST
56276: LIST
56277: LIST
56278: ST_TO_ADDR
// end ; 4 :
56279: GO 56560
56281: LD_INT 4
56283: DOUBLE
56284: EQUAL
56285: IFTRUE 56289
56287: GO 56422
56289: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
56290: LD_ADDR_VAR 0 5
56294: PUSH
56295: LD_VAR 0 1
56299: PUSH
56300: LD_VAR 0 2
56304: PUSH
56305: LD_INT 4
56307: PLUS
56308: PUSH
56309: LD_INT 0
56311: PUSH
56312: EMPTY
56313: LIST
56314: LIST
56315: LIST
56316: PUSH
56317: LD_VAR 0 1
56321: PUSH
56322: LD_INT 3
56324: PLUS
56325: PUSH
56326: LD_VAR 0 2
56330: PUSH
56331: LD_INT 3
56333: PLUS
56334: PUSH
56335: LD_INT 5
56337: PUSH
56338: EMPTY
56339: LIST
56340: LIST
56341: LIST
56342: PUSH
56343: LD_VAR 0 1
56347: PUSH
56348: LD_INT 4
56350: PLUS
56351: PUSH
56352: LD_VAR 0 2
56356: PUSH
56357: LD_INT 4
56359: PUSH
56360: EMPTY
56361: LIST
56362: LIST
56363: LIST
56364: PUSH
56365: LD_VAR 0 1
56369: PUSH
56370: LD_VAR 0 2
56374: PUSH
56375: LD_INT 3
56377: MINUS
56378: PUSH
56379: LD_INT 3
56381: PUSH
56382: EMPTY
56383: LIST
56384: LIST
56385: LIST
56386: PUSH
56387: LD_VAR 0 1
56391: PUSH
56392: LD_INT 4
56394: MINUS
56395: PUSH
56396: LD_VAR 0 2
56400: PUSH
56401: LD_INT 4
56403: MINUS
56404: PUSH
56405: LD_INT 2
56407: PUSH
56408: EMPTY
56409: LIST
56410: LIST
56411: LIST
56412: PUSH
56413: EMPTY
56414: LIST
56415: LIST
56416: LIST
56417: LIST
56418: LIST
56419: ST_TO_ADDR
// end ; 5 :
56420: GO 56560
56422: LD_INT 5
56424: DOUBLE
56425: EQUAL
56426: IFTRUE 56430
56428: GO 56559
56430: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
56431: LD_ADDR_VAR 0 5
56435: PUSH
56436: LD_VAR 0 1
56440: PUSH
56441: LD_INT 4
56443: MINUS
56444: PUSH
56445: LD_VAR 0 2
56449: PUSH
56450: LD_INT 1
56452: PUSH
56453: EMPTY
56454: LIST
56455: LIST
56456: LIST
56457: PUSH
56458: LD_VAR 0 1
56462: PUSH
56463: LD_VAR 0 2
56467: PUSH
56468: LD_INT 4
56470: MINUS
56471: PUSH
56472: LD_INT 3
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: LIST
56479: PUSH
56480: LD_VAR 0 1
56484: PUSH
56485: LD_INT 4
56487: PLUS
56488: PUSH
56489: LD_VAR 0 2
56493: PUSH
56494: LD_INT 4
56496: PLUS
56497: PUSH
56498: LD_INT 5
56500: PUSH
56501: EMPTY
56502: LIST
56503: LIST
56504: LIST
56505: PUSH
56506: LD_VAR 0 1
56510: PUSH
56511: LD_INT 3
56513: PLUS
56514: PUSH
56515: LD_VAR 0 2
56519: PUSH
56520: LD_INT 4
56522: PUSH
56523: EMPTY
56524: LIST
56525: LIST
56526: LIST
56527: PUSH
56528: LD_VAR 0 1
56532: PUSH
56533: LD_VAR 0 2
56537: PUSH
56538: LD_INT 3
56540: PLUS
56541: PUSH
56542: LD_INT 0
56544: PUSH
56545: EMPTY
56546: LIST
56547: LIST
56548: LIST
56549: PUSH
56550: EMPTY
56551: LIST
56552: LIST
56553: LIST
56554: LIST
56555: LIST
56556: ST_TO_ADDR
// end ; end ;
56557: GO 56560
56559: POP
// result := list ;
56560: LD_ADDR_VAR 0 4
56564: PUSH
56565: LD_VAR 0 5
56569: ST_TO_ADDR
// end ;
56570: LD_VAR 0 4
56574: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
56575: LD_INT 0
56577: PPUSH
56578: PPUSH
56579: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
56580: LD_VAR 0 1
56584: NOT
56585: PUSH
56586: LD_VAR 0 2
56590: PUSH
56591: LD_INT 1
56593: PUSH
56594: LD_INT 2
56596: PUSH
56597: LD_INT 3
56599: PUSH
56600: LD_INT 4
56602: PUSH
56603: EMPTY
56604: LIST
56605: LIST
56606: LIST
56607: LIST
56608: IN
56609: NOT
56610: OR
56611: IFFALSE 56615
// exit ;
56613: GO 56707
// tmp := [ ] ;
56615: LD_ADDR_VAR 0 5
56619: PUSH
56620: EMPTY
56621: ST_TO_ADDR
// for i in units do
56622: LD_ADDR_VAR 0 4
56626: PUSH
56627: LD_VAR 0 1
56631: PUSH
56632: FOR_IN
56633: IFFALSE 56676
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
56635: LD_ADDR_VAR 0 5
56639: PUSH
56640: LD_VAR 0 5
56644: PPUSH
56645: LD_VAR 0 5
56649: PUSH
56650: LD_INT 1
56652: PLUS
56653: PPUSH
56654: LD_VAR 0 4
56658: PPUSH
56659: LD_VAR 0 2
56663: PPUSH
56664: CALL_OW 259
56668: PPUSH
56669: CALL_OW 2
56673: ST_TO_ADDR
56674: GO 56632
56676: POP
56677: POP
// if not tmp then
56678: LD_VAR 0 5
56682: NOT
56683: IFFALSE 56687
// exit ;
56685: GO 56707
// result := SortListByListDesc ( units , tmp ) ;
56687: LD_ADDR_VAR 0 3
56691: PUSH
56692: LD_VAR 0 1
56696: PPUSH
56697: LD_VAR 0 5
56701: PPUSH
56702: CALL_OW 77
56706: ST_TO_ADDR
// end ;
56707: LD_VAR 0 3
56711: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
56712: LD_INT 0
56714: PPUSH
56715: PPUSH
56716: PPUSH
// result := false ;
56717: LD_ADDR_VAR 0 3
56721: PUSH
56722: LD_INT 0
56724: ST_TO_ADDR
// x := GetX ( building ) ;
56725: LD_ADDR_VAR 0 4
56729: PUSH
56730: LD_VAR 0 2
56734: PPUSH
56735: CALL_OW 250
56739: ST_TO_ADDR
// y := GetY ( building ) ;
56740: LD_ADDR_VAR 0 5
56744: PUSH
56745: LD_VAR 0 2
56749: PPUSH
56750: CALL_OW 251
56754: ST_TO_ADDR
// if not building or not x or not y then
56755: LD_VAR 0 2
56759: NOT
56760: PUSH
56761: LD_VAR 0 4
56765: NOT
56766: OR
56767: PUSH
56768: LD_VAR 0 5
56772: NOT
56773: OR
56774: IFFALSE 56778
// exit ;
56776: GO 56870
// if GetTaskList ( unit ) then
56778: LD_VAR 0 1
56782: PPUSH
56783: CALL_OW 437
56787: IFFALSE 56870
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56789: LD_STRING e
56791: PUSH
56792: LD_VAR 0 1
56796: PPUSH
56797: CALL_OW 437
56801: PUSH
56802: LD_INT 1
56804: ARRAY
56805: PUSH
56806: LD_INT 1
56808: ARRAY
56809: EQUAL
56810: PUSH
56811: LD_VAR 0 4
56815: PUSH
56816: LD_VAR 0 1
56820: PPUSH
56821: CALL_OW 437
56825: PUSH
56826: LD_INT 1
56828: ARRAY
56829: PUSH
56830: LD_INT 2
56832: ARRAY
56833: EQUAL
56834: AND
56835: PUSH
56836: LD_VAR 0 5
56840: PUSH
56841: LD_VAR 0 1
56845: PPUSH
56846: CALL_OW 437
56850: PUSH
56851: LD_INT 1
56853: ARRAY
56854: PUSH
56855: LD_INT 3
56857: ARRAY
56858: EQUAL
56859: AND
56860: IFFALSE 56870
// result := true end ;
56862: LD_ADDR_VAR 0 3
56866: PUSH
56867: LD_INT 1
56869: ST_TO_ADDR
// end ;
56870: LD_VAR 0 3
56874: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
56875: LD_INT 0
56877: PPUSH
// result := false ;
56878: LD_ADDR_VAR 0 4
56882: PUSH
56883: LD_INT 0
56885: ST_TO_ADDR
// if GetTaskList ( unit ) then
56886: LD_VAR 0 1
56890: PPUSH
56891: CALL_OW 437
56895: IFFALSE 56978
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
56897: LD_STRING M
56899: PUSH
56900: LD_VAR 0 1
56904: PPUSH
56905: CALL_OW 437
56909: PUSH
56910: LD_INT 1
56912: ARRAY
56913: PUSH
56914: LD_INT 1
56916: ARRAY
56917: EQUAL
56918: PUSH
56919: LD_VAR 0 2
56923: PUSH
56924: LD_VAR 0 1
56928: PPUSH
56929: CALL_OW 437
56933: PUSH
56934: LD_INT 1
56936: ARRAY
56937: PUSH
56938: LD_INT 2
56940: ARRAY
56941: EQUAL
56942: AND
56943: PUSH
56944: LD_VAR 0 3
56948: PUSH
56949: LD_VAR 0 1
56953: PPUSH
56954: CALL_OW 437
56958: PUSH
56959: LD_INT 1
56961: ARRAY
56962: PUSH
56963: LD_INT 3
56965: ARRAY
56966: EQUAL
56967: AND
56968: IFFALSE 56978
// result := true ;
56970: LD_ADDR_VAR 0 4
56974: PUSH
56975: LD_INT 1
56977: ST_TO_ADDR
// end ; end ;
56978: LD_VAR 0 4
56982: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
56983: LD_INT 0
56985: PPUSH
56986: PPUSH
56987: PPUSH
56988: PPUSH
// if not unit or not area then
56989: LD_VAR 0 1
56993: NOT
56994: PUSH
56995: LD_VAR 0 2
56999: NOT
57000: OR
57001: IFFALSE 57005
// exit ;
57003: GO 57169
// tmp := AreaToList ( area , i ) ;
57005: LD_ADDR_VAR 0 6
57009: PUSH
57010: LD_VAR 0 2
57014: PPUSH
57015: LD_VAR 0 5
57019: PPUSH
57020: CALL_OW 517
57024: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
57025: LD_ADDR_VAR 0 5
57029: PUSH
57030: DOUBLE
57031: LD_INT 1
57033: DEC
57034: ST_TO_ADDR
57035: LD_VAR 0 6
57039: PUSH
57040: LD_INT 1
57042: ARRAY
57043: PUSH
57044: FOR_TO
57045: IFFALSE 57167
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
57047: LD_ADDR_VAR 0 7
57051: PUSH
57052: LD_VAR 0 6
57056: PUSH
57057: LD_INT 1
57059: ARRAY
57060: PUSH
57061: LD_VAR 0 5
57065: ARRAY
57066: PUSH
57067: LD_VAR 0 6
57071: PUSH
57072: LD_INT 2
57074: ARRAY
57075: PUSH
57076: LD_VAR 0 5
57080: ARRAY
57081: PUSH
57082: EMPTY
57083: LIST
57084: LIST
57085: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
57086: LD_VAR 0 7
57090: PUSH
57091: LD_INT 1
57093: ARRAY
57094: PPUSH
57095: LD_VAR 0 7
57099: PUSH
57100: LD_INT 2
57102: ARRAY
57103: PPUSH
57104: CALL_OW 428
57108: PUSH
57109: LD_INT 0
57111: EQUAL
57112: IFFALSE 57165
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
57114: LD_VAR 0 1
57118: PPUSH
57119: LD_VAR 0 7
57123: PUSH
57124: LD_INT 1
57126: ARRAY
57127: PPUSH
57128: LD_VAR 0 7
57132: PUSH
57133: LD_INT 2
57135: ARRAY
57136: PPUSH
57137: LD_VAR 0 3
57141: PPUSH
57142: CALL_OW 48
// result := IsPlaced ( unit ) ;
57146: LD_ADDR_VAR 0 4
57150: PUSH
57151: LD_VAR 0 1
57155: PPUSH
57156: CALL_OW 305
57160: ST_TO_ADDR
// exit ;
57161: POP
57162: POP
57163: GO 57169
// end ; end ;
57165: GO 57044
57167: POP
57168: POP
// end ;
57169: LD_VAR 0 4
57173: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
57174: LD_INT 0
57176: PPUSH
57177: PPUSH
57178: PPUSH
// if not side or side > 8 then
57179: LD_VAR 0 1
57183: NOT
57184: PUSH
57185: LD_VAR 0 1
57189: PUSH
57190: LD_INT 8
57192: GREATER
57193: OR
57194: IFFALSE 57198
// exit ;
57196: GO 57385
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
57198: LD_ADDR_VAR 0 4
57202: PUSH
57203: LD_INT 22
57205: PUSH
57206: LD_VAR 0 1
57210: PUSH
57211: EMPTY
57212: LIST
57213: LIST
57214: PUSH
57215: LD_INT 21
57217: PUSH
57218: LD_INT 3
57220: PUSH
57221: EMPTY
57222: LIST
57223: LIST
57224: PUSH
57225: EMPTY
57226: LIST
57227: LIST
57228: PPUSH
57229: CALL_OW 69
57233: ST_TO_ADDR
// if not tmp then
57234: LD_VAR 0 4
57238: NOT
57239: IFFALSE 57243
// exit ;
57241: GO 57385
// enable_addtolog := true ;
57243: LD_ADDR_OWVAR 81
57247: PUSH
57248: LD_INT 1
57250: ST_TO_ADDR
// AddToLog ( [ ) ;
57251: LD_STRING [
57253: PPUSH
57254: CALL_OW 561
// for i in tmp do
57258: LD_ADDR_VAR 0 3
57262: PUSH
57263: LD_VAR 0 4
57267: PUSH
57268: FOR_IN
57269: IFFALSE 57376
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
57271: LD_STRING [
57273: PUSH
57274: LD_VAR 0 3
57278: PPUSH
57279: CALL_OW 266
57283: STR
57284: PUSH
57285: LD_STRING , 
57287: STR
57288: PUSH
57289: LD_VAR 0 3
57293: PPUSH
57294: CALL_OW 250
57298: STR
57299: PUSH
57300: LD_STRING , 
57302: STR
57303: PUSH
57304: LD_VAR 0 3
57308: PPUSH
57309: CALL_OW 251
57313: STR
57314: PUSH
57315: LD_STRING , 
57317: STR
57318: PUSH
57319: LD_VAR 0 3
57323: PPUSH
57324: CALL_OW 254
57328: STR
57329: PUSH
57330: LD_STRING , 
57332: STR
57333: PUSH
57334: LD_VAR 0 3
57338: PPUSH
57339: LD_INT 1
57341: PPUSH
57342: CALL_OW 268
57346: STR
57347: PUSH
57348: LD_STRING , 
57350: STR
57351: PUSH
57352: LD_VAR 0 3
57356: PPUSH
57357: LD_INT 2
57359: PPUSH
57360: CALL_OW 268
57364: STR
57365: PUSH
57366: LD_STRING ],
57368: STR
57369: PPUSH
57370: CALL_OW 561
// end ;
57374: GO 57268
57376: POP
57377: POP
// AddToLog ( ]; ) ;
57378: LD_STRING ];
57380: PPUSH
57381: CALL_OW 561
// end ;
57385: LD_VAR 0 2
57389: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
57390: LD_INT 0
57392: PPUSH
57393: PPUSH
57394: PPUSH
57395: PPUSH
57396: PPUSH
// if not area or not rate or not max then
57397: LD_VAR 0 1
57401: NOT
57402: PUSH
57403: LD_VAR 0 2
57407: NOT
57408: OR
57409: PUSH
57410: LD_VAR 0 4
57414: NOT
57415: OR
57416: IFFALSE 57420
// exit ;
57418: GO 57612
// while 1 do
57420: LD_INT 1
57422: IFFALSE 57612
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
57424: LD_ADDR_VAR 0 9
57428: PUSH
57429: LD_VAR 0 1
57433: PPUSH
57434: LD_INT 1
57436: PPUSH
57437: CALL_OW 287
57441: PUSH
57442: LD_INT 10
57444: MUL
57445: ST_TO_ADDR
// r := rate / 10 ;
57446: LD_ADDR_VAR 0 7
57450: PUSH
57451: LD_VAR 0 2
57455: PUSH
57456: LD_INT 10
57458: DIVREAL
57459: ST_TO_ADDR
// time := 1 1$00 ;
57460: LD_ADDR_VAR 0 8
57464: PUSH
57465: LD_INT 2100
57467: ST_TO_ADDR
// if amount < min then
57468: LD_VAR 0 9
57472: PUSH
57473: LD_VAR 0 3
57477: LESS
57478: IFFALSE 57496
// r := r * 2 else
57480: LD_ADDR_VAR 0 7
57484: PUSH
57485: LD_VAR 0 7
57489: PUSH
57490: LD_INT 2
57492: MUL
57493: ST_TO_ADDR
57494: GO 57522
// if amount > max then
57496: LD_VAR 0 9
57500: PUSH
57501: LD_VAR 0 4
57505: GREATER
57506: IFFALSE 57522
// r := r / 2 ;
57508: LD_ADDR_VAR 0 7
57512: PUSH
57513: LD_VAR 0 7
57517: PUSH
57518: LD_INT 2
57520: DIVREAL
57521: ST_TO_ADDR
// time := time / r ;
57522: LD_ADDR_VAR 0 8
57526: PUSH
57527: LD_VAR 0 8
57531: PUSH
57532: LD_VAR 0 7
57536: DIVREAL
57537: ST_TO_ADDR
// if time < 0 then
57538: LD_VAR 0 8
57542: PUSH
57543: LD_INT 0
57545: LESS
57546: IFFALSE 57563
// time := time * - 1 ;
57548: LD_ADDR_VAR 0 8
57552: PUSH
57553: LD_VAR 0 8
57557: PUSH
57558: LD_INT 1
57560: NEG
57561: MUL
57562: ST_TO_ADDR
// wait ( time ) ;
57563: LD_VAR 0 8
57567: PPUSH
57568: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
57572: LD_INT 35
57574: PPUSH
57575: LD_INT 875
57577: PPUSH
57578: CALL_OW 12
57582: PPUSH
57583: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
57587: LD_INT 1
57589: PPUSH
57590: LD_INT 5
57592: PPUSH
57593: CALL_OW 12
57597: PPUSH
57598: LD_VAR 0 1
57602: PPUSH
57603: LD_INT 1
57605: PPUSH
57606: CALL_OW 55
// end ;
57610: GO 57420
// end ;
57612: LD_VAR 0 5
57616: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
57617: LD_INT 0
57619: PPUSH
57620: PPUSH
57621: PPUSH
57622: PPUSH
57623: PPUSH
57624: PPUSH
57625: PPUSH
57626: PPUSH
// if not turrets or not factories then
57627: LD_VAR 0 1
57631: NOT
57632: PUSH
57633: LD_VAR 0 2
57637: NOT
57638: OR
57639: IFFALSE 57643
// exit ;
57641: GO 57950
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
57643: LD_ADDR_VAR 0 10
57647: PUSH
57648: LD_INT 5
57650: PUSH
57651: LD_INT 6
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: PUSH
57658: LD_INT 2
57660: PUSH
57661: LD_INT 4
57663: PUSH
57664: EMPTY
57665: LIST
57666: LIST
57667: PUSH
57668: LD_INT 3
57670: PUSH
57671: LD_INT 5
57673: PUSH
57674: EMPTY
57675: LIST
57676: LIST
57677: PUSH
57678: EMPTY
57679: LIST
57680: LIST
57681: LIST
57682: PUSH
57683: LD_INT 24
57685: PUSH
57686: LD_INT 25
57688: PUSH
57689: EMPTY
57690: LIST
57691: LIST
57692: PUSH
57693: LD_INT 23
57695: PUSH
57696: LD_INT 27
57698: PUSH
57699: EMPTY
57700: LIST
57701: LIST
57702: PUSH
57703: EMPTY
57704: LIST
57705: LIST
57706: PUSH
57707: LD_INT 42
57709: PUSH
57710: LD_INT 43
57712: PUSH
57713: EMPTY
57714: LIST
57715: LIST
57716: PUSH
57717: LD_INT 44
57719: PUSH
57720: LD_INT 46
57722: PUSH
57723: EMPTY
57724: LIST
57725: LIST
57726: PUSH
57727: LD_INT 45
57729: PUSH
57730: LD_INT 47
57732: PUSH
57733: EMPTY
57734: LIST
57735: LIST
57736: PUSH
57737: EMPTY
57738: LIST
57739: LIST
57740: LIST
57741: PUSH
57742: EMPTY
57743: LIST
57744: LIST
57745: LIST
57746: ST_TO_ADDR
// result := [ ] ;
57747: LD_ADDR_VAR 0 3
57751: PUSH
57752: EMPTY
57753: ST_TO_ADDR
// for i in turrets do
57754: LD_ADDR_VAR 0 4
57758: PUSH
57759: LD_VAR 0 1
57763: PUSH
57764: FOR_IN
57765: IFFALSE 57948
// begin nat := GetNation ( i ) ;
57767: LD_ADDR_VAR 0 7
57771: PUSH
57772: LD_VAR 0 4
57776: PPUSH
57777: CALL_OW 248
57781: ST_TO_ADDR
// weapon := 0 ;
57782: LD_ADDR_VAR 0 8
57786: PUSH
57787: LD_INT 0
57789: ST_TO_ADDR
// if not nat then
57790: LD_VAR 0 7
57794: NOT
57795: IFFALSE 57799
// continue ;
57797: GO 57764
// for j in list [ nat ] do
57799: LD_ADDR_VAR 0 5
57803: PUSH
57804: LD_VAR 0 10
57808: PUSH
57809: LD_VAR 0 7
57813: ARRAY
57814: PUSH
57815: FOR_IN
57816: IFFALSE 57857
// if GetBWeapon ( i ) = j [ 1 ] then
57818: LD_VAR 0 4
57822: PPUSH
57823: CALL_OW 269
57827: PUSH
57828: LD_VAR 0 5
57832: PUSH
57833: LD_INT 1
57835: ARRAY
57836: EQUAL
57837: IFFALSE 57855
// begin weapon := j [ 2 ] ;
57839: LD_ADDR_VAR 0 8
57843: PUSH
57844: LD_VAR 0 5
57848: PUSH
57849: LD_INT 2
57851: ARRAY
57852: ST_TO_ADDR
// break ;
57853: GO 57857
// end ;
57855: GO 57815
57857: POP
57858: POP
// if not weapon then
57859: LD_VAR 0 8
57863: NOT
57864: IFFALSE 57868
// continue ;
57866: GO 57764
// for k in factories do
57868: LD_ADDR_VAR 0 6
57872: PUSH
57873: LD_VAR 0 2
57877: PUSH
57878: FOR_IN
57879: IFFALSE 57944
// begin weapons := AvailableWeaponList ( k ) ;
57881: LD_ADDR_VAR 0 9
57885: PUSH
57886: LD_VAR 0 6
57890: PPUSH
57891: CALL_OW 478
57895: ST_TO_ADDR
// if not weapons then
57896: LD_VAR 0 9
57900: NOT
57901: IFFALSE 57905
// continue ;
57903: GO 57878
// if weapon in weapons then
57905: LD_VAR 0 8
57909: PUSH
57910: LD_VAR 0 9
57914: IN
57915: IFFALSE 57942
// begin result := [ i , weapon ] ;
57917: LD_ADDR_VAR 0 3
57921: PUSH
57922: LD_VAR 0 4
57926: PUSH
57927: LD_VAR 0 8
57931: PUSH
57932: EMPTY
57933: LIST
57934: LIST
57935: ST_TO_ADDR
// exit ;
57936: POP
57937: POP
57938: POP
57939: POP
57940: GO 57950
// end ; end ;
57942: GO 57878
57944: POP
57945: POP
// end ;
57946: GO 57764
57948: POP
57949: POP
// end ;
57950: LD_VAR 0 3
57954: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
57955: LD_INT 0
57957: PPUSH
// if not side or side > 8 then
57958: LD_VAR 0 3
57962: NOT
57963: PUSH
57964: LD_VAR 0 3
57968: PUSH
57969: LD_INT 8
57971: GREATER
57972: OR
57973: IFFALSE 57977
// exit ;
57975: GO 58036
// if not range then
57977: LD_VAR 0 4
57981: NOT
57982: IFFALSE 57993
// range := - 12 ;
57984: LD_ADDR_VAR 0 4
57988: PUSH
57989: LD_INT 12
57991: NEG
57992: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
57993: LD_VAR 0 1
57997: PPUSH
57998: LD_VAR 0 2
58002: PPUSH
58003: LD_VAR 0 3
58007: PPUSH
58008: LD_VAR 0 4
58012: PPUSH
58013: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
58017: LD_VAR 0 1
58021: PPUSH
58022: LD_VAR 0 2
58026: PPUSH
58027: LD_VAR 0 3
58031: PPUSH
58032: CALL_OW 331
// end ;
58036: LD_VAR 0 5
58040: RET
// export function Video ( mode ) ; begin
58041: LD_INT 0
58043: PPUSH
// ingame_video = mode ;
58044: LD_ADDR_OWVAR 52
58048: PUSH
58049: LD_VAR 0 1
58053: ST_TO_ADDR
// interface_hidden = mode ;
58054: LD_ADDR_OWVAR 54
58058: PUSH
58059: LD_VAR 0 1
58063: ST_TO_ADDR
// end ;
58064: LD_VAR 0 2
58068: RET
// export function Join ( array , element ) ; begin
58069: LD_INT 0
58071: PPUSH
// result := Replace ( array , array + 1 , element ) ;
58072: LD_ADDR_VAR 0 3
58076: PUSH
58077: LD_VAR 0 1
58081: PPUSH
58082: LD_VAR 0 1
58086: PUSH
58087: LD_INT 1
58089: PLUS
58090: PPUSH
58091: LD_VAR 0 2
58095: PPUSH
58096: CALL_OW 1
58100: ST_TO_ADDR
// end ;
58101: LD_VAR 0 3
58105: RET
// export function JoinUnion ( array , element ) ; begin
58106: LD_INT 0
58108: PPUSH
// result := array union element ;
58109: LD_ADDR_VAR 0 3
58113: PUSH
58114: LD_VAR 0 1
58118: PUSH
58119: LD_VAR 0 2
58123: UNION
58124: ST_TO_ADDR
// end ;
58125: LD_VAR 0 3
58129: RET
// export function GetBehemoths ( side ) ; begin
58130: LD_INT 0
58132: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
58133: LD_ADDR_VAR 0 2
58137: PUSH
58138: LD_INT 22
58140: PUSH
58141: LD_VAR 0 1
58145: PUSH
58146: EMPTY
58147: LIST
58148: LIST
58149: PUSH
58150: LD_INT 31
58152: PUSH
58153: LD_INT 25
58155: PUSH
58156: EMPTY
58157: LIST
58158: LIST
58159: PUSH
58160: EMPTY
58161: LIST
58162: LIST
58163: PPUSH
58164: CALL_OW 69
58168: ST_TO_ADDR
// end ;
58169: LD_VAR 0 2
58173: RET
// export function Shuffle ( array ) ; var i , index ; begin
58174: LD_INT 0
58176: PPUSH
58177: PPUSH
58178: PPUSH
// result := [ ] ;
58179: LD_ADDR_VAR 0 2
58183: PUSH
58184: EMPTY
58185: ST_TO_ADDR
// if not array then
58186: LD_VAR 0 1
58190: NOT
58191: IFFALSE 58195
// exit ;
58193: GO 58294
// Randomize ;
58195: CALL_OW 10
// for i = array downto 1 do
58199: LD_ADDR_VAR 0 3
58203: PUSH
58204: DOUBLE
58205: LD_VAR 0 1
58209: INC
58210: ST_TO_ADDR
58211: LD_INT 1
58213: PUSH
58214: FOR_DOWNTO
58215: IFFALSE 58292
// begin index := rand ( 1 , array ) ;
58217: LD_ADDR_VAR 0 4
58221: PUSH
58222: LD_INT 1
58224: PPUSH
58225: LD_VAR 0 1
58229: PPUSH
58230: CALL_OW 12
58234: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
58235: LD_ADDR_VAR 0 2
58239: PUSH
58240: LD_VAR 0 2
58244: PPUSH
58245: LD_VAR 0 2
58249: PUSH
58250: LD_INT 1
58252: PLUS
58253: PPUSH
58254: LD_VAR 0 1
58258: PUSH
58259: LD_VAR 0 4
58263: ARRAY
58264: PPUSH
58265: CALL_OW 2
58269: ST_TO_ADDR
// array := Delete ( array , index ) ;
58270: LD_ADDR_VAR 0 1
58274: PUSH
58275: LD_VAR 0 1
58279: PPUSH
58280: LD_VAR 0 4
58284: PPUSH
58285: CALL_OW 3
58289: ST_TO_ADDR
// end ;
58290: GO 58214
58292: POP
58293: POP
// end ;
58294: LD_VAR 0 2
58298: RET
// export function GetBaseMaterials ( base ) ; begin
58299: LD_INT 0
58301: PPUSH
// result := [ 0 , 0 , 0 ] ;
58302: LD_ADDR_VAR 0 2
58306: PUSH
58307: LD_INT 0
58309: PUSH
58310: LD_INT 0
58312: PUSH
58313: LD_INT 0
58315: PUSH
58316: EMPTY
58317: LIST
58318: LIST
58319: LIST
58320: ST_TO_ADDR
// if not base then
58321: LD_VAR 0 1
58325: NOT
58326: IFFALSE 58330
// exit ;
58328: GO 58379
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
58330: LD_ADDR_VAR 0 2
58334: PUSH
58335: LD_VAR 0 1
58339: PPUSH
58340: LD_INT 1
58342: PPUSH
58343: CALL_OW 275
58347: PUSH
58348: LD_VAR 0 1
58352: PPUSH
58353: LD_INT 2
58355: PPUSH
58356: CALL_OW 275
58360: PUSH
58361: LD_VAR 0 1
58365: PPUSH
58366: LD_INT 3
58368: PPUSH
58369: CALL_OW 275
58373: PUSH
58374: EMPTY
58375: LIST
58376: LIST
58377: LIST
58378: ST_TO_ADDR
// end ;
58379: LD_VAR 0 2
58383: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
58384: LD_INT 0
58386: PPUSH
58387: PPUSH
// result := array ;
58388: LD_ADDR_VAR 0 3
58392: PUSH
58393: LD_VAR 0 1
58397: ST_TO_ADDR
// if size > 0 then
58398: LD_VAR 0 2
58402: PUSH
58403: LD_INT 0
58405: GREATER
58406: IFFALSE 58452
// for i := array downto size do
58408: LD_ADDR_VAR 0 4
58412: PUSH
58413: DOUBLE
58414: LD_VAR 0 1
58418: INC
58419: ST_TO_ADDR
58420: LD_VAR 0 2
58424: PUSH
58425: FOR_DOWNTO
58426: IFFALSE 58450
// result := Delete ( result , result ) ;
58428: LD_ADDR_VAR 0 3
58432: PUSH
58433: LD_VAR 0 3
58437: PPUSH
58438: LD_VAR 0 3
58442: PPUSH
58443: CALL_OW 3
58447: ST_TO_ADDR
58448: GO 58425
58450: POP
58451: POP
// end ;
58452: LD_VAR 0 3
58456: RET
// export function ComExit ( unit ) ; var tmp ; begin
58457: LD_INT 0
58459: PPUSH
58460: PPUSH
// if not IsInUnit ( unit ) then
58461: LD_VAR 0 1
58465: PPUSH
58466: CALL_OW 310
58470: NOT
58471: IFFALSE 58475
// exit ;
58473: GO 58535
// tmp := IsInUnit ( unit ) ;
58475: LD_ADDR_VAR 0 3
58479: PUSH
58480: LD_VAR 0 1
58484: PPUSH
58485: CALL_OW 310
58489: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
58490: LD_VAR 0 3
58494: PPUSH
58495: CALL_OW 247
58499: PUSH
58500: LD_INT 2
58502: EQUAL
58503: IFFALSE 58516
// ComExitVehicle ( unit ) else
58505: LD_VAR 0 1
58509: PPUSH
58510: CALL_OW 121
58514: GO 58525
// ComExitBuilding ( unit ) ;
58516: LD_VAR 0 1
58520: PPUSH
58521: CALL_OW 122
// result := tmp ;
58525: LD_ADDR_VAR 0 2
58529: PUSH
58530: LD_VAR 0 3
58534: ST_TO_ADDR
// end ;
58535: LD_VAR 0 2
58539: RET
// export function ComExitAll ( units ) ; var i ; begin
58540: LD_INT 0
58542: PPUSH
58543: PPUSH
// if not units then
58544: LD_VAR 0 1
58548: NOT
58549: IFFALSE 58553
// exit ;
58551: GO 58579
// for i in units do
58553: LD_ADDR_VAR 0 3
58557: PUSH
58558: LD_VAR 0 1
58562: PUSH
58563: FOR_IN
58564: IFFALSE 58577
// ComExit ( i ) ;
58566: LD_VAR 0 3
58570: PPUSH
58571: CALL 58457 0 1
58575: GO 58563
58577: POP
58578: POP
// end ;
58579: LD_VAR 0 2
58583: RET
// export function ResetHc ; begin
58584: LD_INT 0
58586: PPUSH
// InitHc ;
58587: CALL_OW 19
// hc_importance := 0 ;
58591: LD_ADDR_OWVAR 32
58595: PUSH
58596: LD_INT 0
58598: ST_TO_ADDR
// end ;
58599: LD_VAR 0 1
58603: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
58604: LD_INT 0
58606: PPUSH
58607: PPUSH
58608: PPUSH
// _x := ( x1 + x2 ) div 2 ;
58609: LD_ADDR_VAR 0 6
58613: PUSH
58614: LD_VAR 0 1
58618: PUSH
58619: LD_VAR 0 3
58623: PLUS
58624: PUSH
58625: LD_INT 2
58627: DIV
58628: ST_TO_ADDR
// if _x < 0 then
58629: LD_VAR 0 6
58633: PUSH
58634: LD_INT 0
58636: LESS
58637: IFFALSE 58654
// _x := _x * - 1 ;
58639: LD_ADDR_VAR 0 6
58643: PUSH
58644: LD_VAR 0 6
58648: PUSH
58649: LD_INT 1
58651: NEG
58652: MUL
58653: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
58654: LD_ADDR_VAR 0 7
58658: PUSH
58659: LD_VAR 0 2
58663: PUSH
58664: LD_VAR 0 4
58668: PLUS
58669: PUSH
58670: LD_INT 2
58672: DIV
58673: ST_TO_ADDR
// if _y < 0 then
58674: LD_VAR 0 7
58678: PUSH
58679: LD_INT 0
58681: LESS
58682: IFFALSE 58699
// _y := _y * - 1 ;
58684: LD_ADDR_VAR 0 7
58688: PUSH
58689: LD_VAR 0 7
58693: PUSH
58694: LD_INT 1
58696: NEG
58697: MUL
58698: ST_TO_ADDR
// result := [ _x , _y ] ;
58699: LD_ADDR_VAR 0 5
58703: PUSH
58704: LD_VAR 0 6
58708: PUSH
58709: LD_VAR 0 7
58713: PUSH
58714: EMPTY
58715: LIST
58716: LIST
58717: ST_TO_ADDR
// end ;
58718: LD_VAR 0 5
58722: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
58723: LD_INT 0
58725: PPUSH
58726: PPUSH
58727: PPUSH
58728: PPUSH
// task := GetTaskList ( unit ) ;
58729: LD_ADDR_VAR 0 7
58733: PUSH
58734: LD_VAR 0 1
58738: PPUSH
58739: CALL_OW 437
58743: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
58744: LD_VAR 0 7
58748: NOT
58749: PUSH
58750: LD_VAR 0 1
58754: PPUSH
58755: LD_VAR 0 2
58759: PPUSH
58760: CALL_OW 308
58764: NOT
58765: AND
58766: IFFALSE 58770
// exit ;
58768: GO 58888
// if IsInArea ( unit , area ) then
58770: LD_VAR 0 1
58774: PPUSH
58775: LD_VAR 0 2
58779: PPUSH
58780: CALL_OW 308
58784: IFFALSE 58802
// begin ComMoveToArea ( unit , goAway ) ;
58786: LD_VAR 0 1
58790: PPUSH
58791: LD_VAR 0 3
58795: PPUSH
58796: CALL_OW 113
// exit ;
58800: GO 58888
// end ; if task [ 1 ] [ 1 ] <> M then
58802: LD_VAR 0 7
58806: PUSH
58807: LD_INT 1
58809: ARRAY
58810: PUSH
58811: LD_INT 1
58813: ARRAY
58814: PUSH
58815: LD_STRING M
58817: NONEQUAL
58818: IFFALSE 58822
// exit ;
58820: GO 58888
// x := task [ 1 ] [ 2 ] ;
58822: LD_ADDR_VAR 0 5
58826: PUSH
58827: LD_VAR 0 7
58831: PUSH
58832: LD_INT 1
58834: ARRAY
58835: PUSH
58836: LD_INT 2
58838: ARRAY
58839: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
58840: LD_ADDR_VAR 0 6
58844: PUSH
58845: LD_VAR 0 7
58849: PUSH
58850: LD_INT 1
58852: ARRAY
58853: PUSH
58854: LD_INT 3
58856: ARRAY
58857: ST_TO_ADDR
// if InArea ( x , y , area ) then
58858: LD_VAR 0 5
58862: PPUSH
58863: LD_VAR 0 6
58867: PPUSH
58868: LD_VAR 0 2
58872: PPUSH
58873: CALL_OW 309
58877: IFFALSE 58888
// ComStop ( unit ) ;
58879: LD_VAR 0 1
58883: PPUSH
58884: CALL_OW 141
// end ;
58888: LD_VAR 0 4
58892: RET
// export function Abs ( value ) ; begin
58893: LD_INT 0
58895: PPUSH
// result := value ;
58896: LD_ADDR_VAR 0 2
58900: PUSH
58901: LD_VAR 0 1
58905: ST_TO_ADDR
// if value < 0 then
58906: LD_VAR 0 1
58910: PUSH
58911: LD_INT 0
58913: LESS
58914: IFFALSE 58931
// result := value * - 1 ;
58916: LD_ADDR_VAR 0 2
58920: PUSH
58921: LD_VAR 0 1
58925: PUSH
58926: LD_INT 1
58928: NEG
58929: MUL
58930: ST_TO_ADDR
// end ;
58931: LD_VAR 0 2
58935: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
58936: LD_INT 0
58938: PPUSH
58939: PPUSH
58940: PPUSH
58941: PPUSH
58942: PPUSH
58943: PPUSH
58944: PPUSH
58945: PPUSH
// if not unit or not building then
58946: LD_VAR 0 1
58950: NOT
58951: PUSH
58952: LD_VAR 0 2
58956: NOT
58957: OR
58958: IFFALSE 58962
// exit ;
58960: GO 59188
// x := GetX ( building ) ;
58962: LD_ADDR_VAR 0 4
58966: PUSH
58967: LD_VAR 0 2
58971: PPUSH
58972: CALL_OW 250
58976: ST_TO_ADDR
// y := GetY ( building ) ;
58977: LD_ADDR_VAR 0 6
58981: PUSH
58982: LD_VAR 0 2
58986: PPUSH
58987: CALL_OW 251
58991: ST_TO_ADDR
// d := GetDir ( building ) ;
58992: LD_ADDR_VAR 0 8
58996: PUSH
58997: LD_VAR 0 2
59001: PPUSH
59002: CALL_OW 254
59006: ST_TO_ADDR
// r := 4 ;
59007: LD_ADDR_VAR 0 9
59011: PUSH
59012: LD_INT 4
59014: ST_TO_ADDR
// for i := 1 to 5 do
59015: LD_ADDR_VAR 0 10
59019: PUSH
59020: DOUBLE
59021: LD_INT 1
59023: DEC
59024: ST_TO_ADDR
59025: LD_INT 5
59027: PUSH
59028: FOR_TO
59029: IFFALSE 59186
// begin _x := ShiftX ( x , d , r + i ) ;
59031: LD_ADDR_VAR 0 5
59035: PUSH
59036: LD_VAR 0 4
59040: PPUSH
59041: LD_VAR 0 8
59045: PPUSH
59046: LD_VAR 0 9
59050: PUSH
59051: LD_VAR 0 10
59055: PLUS
59056: PPUSH
59057: CALL_OW 272
59061: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
59062: LD_ADDR_VAR 0 7
59066: PUSH
59067: LD_VAR 0 6
59071: PPUSH
59072: LD_VAR 0 8
59076: PPUSH
59077: LD_VAR 0 9
59081: PUSH
59082: LD_VAR 0 10
59086: PLUS
59087: PPUSH
59088: CALL_OW 273
59092: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
59093: LD_VAR 0 5
59097: PPUSH
59098: LD_VAR 0 7
59102: PPUSH
59103: CALL_OW 488
59107: PUSH
59108: LD_VAR 0 5
59112: PPUSH
59113: LD_VAR 0 7
59117: PPUSH
59118: CALL_OW 428
59122: PPUSH
59123: CALL_OW 247
59127: PUSH
59128: LD_INT 3
59130: PUSH
59131: LD_INT 2
59133: PUSH
59134: EMPTY
59135: LIST
59136: LIST
59137: IN
59138: NOT
59139: AND
59140: IFFALSE 59184
// begin ComMoveXY ( unit , _x , _y ) ;
59142: LD_VAR 0 1
59146: PPUSH
59147: LD_VAR 0 5
59151: PPUSH
59152: LD_VAR 0 7
59156: PPUSH
59157: CALL_OW 111
// result := [ _x , _y ] ;
59161: LD_ADDR_VAR 0 3
59165: PUSH
59166: LD_VAR 0 5
59170: PUSH
59171: LD_VAR 0 7
59175: PUSH
59176: EMPTY
59177: LIST
59178: LIST
59179: ST_TO_ADDR
// exit ;
59180: POP
59181: POP
59182: GO 59188
// end ; end ;
59184: GO 59028
59186: POP
59187: POP
// end ;
59188: LD_VAR 0 3
59192: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
59193: LD_INT 0
59195: PPUSH
59196: PPUSH
59197: PPUSH
// result := 0 ;
59198: LD_ADDR_VAR 0 3
59202: PUSH
59203: LD_INT 0
59205: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
59206: LD_VAR 0 1
59210: PUSH
59211: LD_INT 0
59213: LESS
59214: PUSH
59215: LD_VAR 0 1
59219: PUSH
59220: LD_INT 8
59222: GREATER
59223: OR
59224: PUSH
59225: LD_VAR 0 2
59229: PUSH
59230: LD_INT 0
59232: LESS
59233: OR
59234: PUSH
59235: LD_VAR 0 2
59239: PUSH
59240: LD_INT 8
59242: GREATER
59243: OR
59244: IFFALSE 59248
// exit ;
59246: GO 59323
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
59248: LD_ADDR_VAR 0 4
59252: PUSH
59253: LD_INT 22
59255: PUSH
59256: LD_VAR 0 2
59260: PUSH
59261: EMPTY
59262: LIST
59263: LIST
59264: PPUSH
59265: CALL_OW 69
59269: PUSH
59270: FOR_IN
59271: IFFALSE 59321
// begin un := UnitShoot ( i ) ;
59273: LD_ADDR_VAR 0 5
59277: PUSH
59278: LD_VAR 0 4
59282: PPUSH
59283: CALL_OW 504
59287: ST_TO_ADDR
// if GetSide ( un ) = side1 then
59288: LD_VAR 0 5
59292: PPUSH
59293: CALL_OW 255
59297: PUSH
59298: LD_VAR 0 1
59302: EQUAL
59303: IFFALSE 59319
// begin result := un ;
59305: LD_ADDR_VAR 0 3
59309: PUSH
59310: LD_VAR 0 5
59314: ST_TO_ADDR
// exit ;
59315: POP
59316: POP
59317: GO 59323
// end ; end ;
59319: GO 59270
59321: POP
59322: POP
// end ;
59323: LD_VAR 0 3
59327: RET
// export function GetCargoBay ( units ) ; begin
59328: LD_INT 0
59330: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
59331: LD_ADDR_VAR 0 2
59335: PUSH
59336: LD_VAR 0 1
59340: PPUSH
59341: LD_INT 2
59343: PUSH
59344: LD_INT 34
59346: PUSH
59347: LD_INT 12
59349: PUSH
59350: EMPTY
59351: LIST
59352: LIST
59353: PUSH
59354: LD_INT 34
59356: PUSH
59357: LD_INT 51
59359: PUSH
59360: EMPTY
59361: LIST
59362: LIST
59363: PUSH
59364: LD_INT 34
59366: PUSH
59367: LD_INT 32
59369: PUSH
59370: EMPTY
59371: LIST
59372: LIST
59373: PUSH
59374: LD_INT 34
59376: PUSH
59377: LD_EXP 83
59381: PUSH
59382: EMPTY
59383: LIST
59384: LIST
59385: PUSH
59386: EMPTY
59387: LIST
59388: LIST
59389: LIST
59390: LIST
59391: LIST
59392: PPUSH
59393: CALL_OW 72
59397: ST_TO_ADDR
// end ;
59398: LD_VAR 0 2
59402: RET
// export function Negate ( value ) ; begin
59403: LD_INT 0
59405: PPUSH
// result := not value ;
59406: LD_ADDR_VAR 0 2
59410: PUSH
59411: LD_VAR 0 1
59415: NOT
59416: ST_TO_ADDR
// end ;
59417: LD_VAR 0 2
59421: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; begin
59422: LD_INT 0
59424: PPUSH
// if x1 = x2 then
59425: LD_VAR 0 1
59429: PUSH
59430: LD_VAR 0 3
59434: EQUAL
59435: IFFALSE 59469
// begin if y1 > y2 then
59437: LD_VAR 0 2
59441: PUSH
59442: LD_VAR 0 4
59446: GREATER
59447: IFFALSE 59459
// result := 0 else
59449: LD_ADDR_VAR 0 5
59453: PUSH
59454: LD_INT 0
59456: ST_TO_ADDR
59457: GO 59467
// result := 3 ;
59459: LD_ADDR_VAR 0 5
59463: PUSH
59464: LD_INT 3
59466: ST_TO_ADDR
// exit ;
59467: GO 59555
// end ; if y1 = y2 then
59469: LD_VAR 0 2
59473: PUSH
59474: LD_VAR 0 4
59478: EQUAL
59479: IFFALSE 59513
// begin if x1 > x2 then
59481: LD_VAR 0 1
59485: PUSH
59486: LD_VAR 0 3
59490: GREATER
59491: IFFALSE 59503
// result := 1 else
59493: LD_ADDR_VAR 0 5
59497: PUSH
59498: LD_INT 1
59500: ST_TO_ADDR
59501: GO 59511
// result := 4 ;
59503: LD_ADDR_VAR 0 5
59507: PUSH
59508: LD_INT 4
59510: ST_TO_ADDR
// exit ;
59511: GO 59555
// end ; if x1 > x2 and y1 > y2 then
59513: LD_VAR 0 1
59517: PUSH
59518: LD_VAR 0 3
59522: GREATER
59523: PUSH
59524: LD_VAR 0 2
59528: PUSH
59529: LD_VAR 0 4
59533: GREATER
59534: AND
59535: IFFALSE 59547
// result := 2 else
59537: LD_ADDR_VAR 0 5
59541: PUSH
59542: LD_INT 2
59544: ST_TO_ADDR
59545: GO 59555
// result := 5 ;
59547: LD_ADDR_VAR 0 5
59551: PUSH
59552: LD_INT 5
59554: ST_TO_ADDR
// end ;
59555: LD_VAR 0 5
59559: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
59560: LD_INT 0
59562: PPUSH
59563: PPUSH
// if not driver or not IsInUnit ( driver ) then
59564: LD_VAR 0 1
59568: NOT
59569: PUSH
59570: LD_VAR 0 1
59574: PPUSH
59575: CALL_OW 310
59579: NOT
59580: OR
59581: IFFALSE 59585
// exit ;
59583: GO 59675
// vehicle := IsInUnit ( driver ) ;
59585: LD_ADDR_VAR 0 3
59589: PUSH
59590: LD_VAR 0 1
59594: PPUSH
59595: CALL_OW 310
59599: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
59600: LD_VAR 0 1
59604: PPUSH
59605: LD_STRING \
59607: PUSH
59608: LD_INT 0
59610: PUSH
59611: LD_INT 0
59613: PUSH
59614: LD_INT 0
59616: PUSH
59617: LD_INT 0
59619: PUSH
59620: LD_INT 0
59622: PUSH
59623: LD_INT 0
59625: PUSH
59626: EMPTY
59627: LIST
59628: LIST
59629: LIST
59630: LIST
59631: LIST
59632: LIST
59633: LIST
59634: PUSH
59635: LD_STRING E
59637: PUSH
59638: LD_INT 0
59640: PUSH
59641: LD_INT 0
59643: PUSH
59644: LD_VAR 0 3
59648: PUSH
59649: LD_INT 0
59651: PUSH
59652: LD_INT 0
59654: PUSH
59655: LD_INT 0
59657: PUSH
59658: EMPTY
59659: LIST
59660: LIST
59661: LIST
59662: LIST
59663: LIST
59664: LIST
59665: LIST
59666: PUSH
59667: EMPTY
59668: LIST
59669: LIST
59670: PPUSH
59671: CALL_OW 446
// end ;
59675: LD_VAR 0 2
59679: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
59680: LD_INT 0
59682: PPUSH
59683: PPUSH
// if not driver or not IsInUnit ( driver ) then
59684: LD_VAR 0 1
59688: NOT
59689: PUSH
59690: LD_VAR 0 1
59694: PPUSH
59695: CALL_OW 310
59699: NOT
59700: OR
59701: IFFALSE 59705
// exit ;
59703: GO 59795
// vehicle := IsInUnit ( driver ) ;
59705: LD_ADDR_VAR 0 3
59709: PUSH
59710: LD_VAR 0 1
59714: PPUSH
59715: CALL_OW 310
59719: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
59720: LD_VAR 0 1
59724: PPUSH
59725: LD_STRING \
59727: PUSH
59728: LD_INT 0
59730: PUSH
59731: LD_INT 0
59733: PUSH
59734: LD_INT 0
59736: PUSH
59737: LD_INT 0
59739: PUSH
59740: LD_INT 0
59742: PUSH
59743: LD_INT 0
59745: PUSH
59746: EMPTY
59747: LIST
59748: LIST
59749: LIST
59750: LIST
59751: LIST
59752: LIST
59753: LIST
59754: PUSH
59755: LD_STRING E
59757: PUSH
59758: LD_INT 0
59760: PUSH
59761: LD_INT 0
59763: PUSH
59764: LD_VAR 0 3
59768: PUSH
59769: LD_INT 0
59771: PUSH
59772: LD_INT 0
59774: PUSH
59775: LD_INT 0
59777: PUSH
59778: EMPTY
59779: LIST
59780: LIST
59781: LIST
59782: LIST
59783: LIST
59784: LIST
59785: LIST
59786: PUSH
59787: EMPTY
59788: LIST
59789: LIST
59790: PPUSH
59791: CALL_OW 447
// end ;
59795: LD_VAR 0 2
59799: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
59800: LD_INT 0
59802: PPUSH
59803: PPUSH
59804: PPUSH
// tmp := [ ] ;
59805: LD_ADDR_VAR 0 5
59809: PUSH
59810: EMPTY
59811: ST_TO_ADDR
// for i in units do
59812: LD_ADDR_VAR 0 4
59816: PUSH
59817: LD_VAR 0 1
59821: PUSH
59822: FOR_IN
59823: IFFALSE 59861
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
59825: LD_ADDR_VAR 0 5
59829: PUSH
59830: LD_VAR 0 5
59834: PPUSH
59835: LD_VAR 0 5
59839: PUSH
59840: LD_INT 1
59842: PLUS
59843: PPUSH
59844: LD_VAR 0 4
59848: PPUSH
59849: CALL_OW 256
59853: PPUSH
59854: CALL_OW 2
59858: ST_TO_ADDR
59859: GO 59822
59861: POP
59862: POP
// if not tmp then
59863: LD_VAR 0 5
59867: NOT
59868: IFFALSE 59872
// exit ;
59870: GO 59920
// if asc then
59872: LD_VAR 0 2
59876: IFFALSE 59900
// result := SortListByListAsc ( units , tmp ) else
59878: LD_ADDR_VAR 0 3
59882: PUSH
59883: LD_VAR 0 1
59887: PPUSH
59888: LD_VAR 0 5
59892: PPUSH
59893: CALL_OW 76
59897: ST_TO_ADDR
59898: GO 59920
// result := SortListByListDesc ( units , tmp ) ;
59900: LD_ADDR_VAR 0 3
59904: PUSH
59905: LD_VAR 0 1
59909: PPUSH
59910: LD_VAR 0 5
59914: PPUSH
59915: CALL_OW 77
59919: ST_TO_ADDR
// end ;
59920: LD_VAR 0 3
59924: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
59925: LD_INT 0
59927: PPUSH
59928: PPUSH
// task := GetTaskList ( mech ) ;
59929: LD_ADDR_VAR 0 4
59933: PUSH
59934: LD_VAR 0 1
59938: PPUSH
59939: CALL_OW 437
59943: ST_TO_ADDR
// if not task then
59944: LD_VAR 0 4
59948: NOT
59949: IFFALSE 59953
// exit ;
59951: GO 59995
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
59953: LD_ADDR_VAR 0 3
59957: PUSH
59958: LD_VAR 0 4
59962: PUSH
59963: LD_INT 1
59965: ARRAY
59966: PUSH
59967: LD_INT 1
59969: ARRAY
59970: PUSH
59971: LD_STRING r
59973: EQUAL
59974: PUSH
59975: LD_VAR 0 4
59979: PUSH
59980: LD_INT 1
59982: ARRAY
59983: PUSH
59984: LD_INT 4
59986: ARRAY
59987: PUSH
59988: LD_VAR 0 2
59992: EQUAL
59993: AND
59994: ST_TO_ADDR
// end ;
59995: LD_VAR 0 3
59999: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
60000: LD_INT 0
60002: PPUSH
// SetDir ( unit , d ) ;
60003: LD_VAR 0 1
60007: PPUSH
60008: LD_VAR 0 4
60012: PPUSH
60013: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
60017: LD_VAR 0 1
60021: PPUSH
60022: LD_VAR 0 2
60026: PPUSH
60027: LD_VAR 0 3
60031: PPUSH
60032: LD_VAR 0 5
60036: PPUSH
60037: CALL_OW 48
// end ;
60041: LD_VAR 0 6
60045: RET
// export function ToNaturalNumber ( number ) ; begin
60046: LD_INT 0
60048: PPUSH
// result := number div 1 ;
60049: LD_ADDR_VAR 0 2
60053: PUSH
60054: LD_VAR 0 1
60058: PUSH
60059: LD_INT 1
60061: DIV
60062: ST_TO_ADDR
// if number < 0 then
60063: LD_VAR 0 1
60067: PUSH
60068: LD_INT 0
60070: LESS
60071: IFFALSE 60081
// result := 0 ;
60073: LD_ADDR_VAR 0 2
60077: PUSH
60078: LD_INT 0
60080: ST_TO_ADDR
// end ;
60081: LD_VAR 0 2
60085: RET
// export function SortByClass ( units , class ) ; var un ; begin
60086: LD_INT 0
60088: PPUSH
60089: PPUSH
// if not units or not class then
60090: LD_VAR 0 1
60094: NOT
60095: PUSH
60096: LD_VAR 0 2
60100: NOT
60101: OR
60102: IFFALSE 60106
// exit ;
60104: GO 60201
// result := [ ] ;
60106: LD_ADDR_VAR 0 3
60110: PUSH
60111: EMPTY
60112: ST_TO_ADDR
// for un in units do
60113: LD_ADDR_VAR 0 4
60117: PUSH
60118: LD_VAR 0 1
60122: PUSH
60123: FOR_IN
60124: IFFALSE 60199
// if GetClass ( un ) = class then
60126: LD_VAR 0 4
60130: PPUSH
60131: CALL_OW 257
60135: PUSH
60136: LD_VAR 0 2
60140: EQUAL
60141: IFFALSE 60168
// result := Insert ( result , 1 , un ) else
60143: LD_ADDR_VAR 0 3
60147: PUSH
60148: LD_VAR 0 3
60152: PPUSH
60153: LD_INT 1
60155: PPUSH
60156: LD_VAR 0 4
60160: PPUSH
60161: CALL_OW 2
60165: ST_TO_ADDR
60166: GO 60197
// result := Replace ( result , result + 1 , un ) ;
60168: LD_ADDR_VAR 0 3
60172: PUSH
60173: LD_VAR 0 3
60177: PPUSH
60178: LD_VAR 0 3
60182: PUSH
60183: LD_INT 1
60185: PLUS
60186: PPUSH
60187: LD_VAR 0 4
60191: PPUSH
60192: CALL_OW 1
60196: ST_TO_ADDR
60197: GO 60123
60199: POP
60200: POP
// end ;
60201: LD_VAR 0 3
60205: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
60206: LD_INT 0
60208: PPUSH
60209: PPUSH
60210: PPUSH
60211: PPUSH
60212: PPUSH
60213: PPUSH
60214: PPUSH
// result := [ ] ;
60215: LD_ADDR_VAR 0 4
60219: PUSH
60220: EMPTY
60221: ST_TO_ADDR
// if x - r < 0 then
60222: LD_VAR 0 1
60226: PUSH
60227: LD_VAR 0 3
60231: MINUS
60232: PUSH
60233: LD_INT 0
60235: LESS
60236: IFFALSE 60248
// min_x := 0 else
60238: LD_ADDR_VAR 0 8
60242: PUSH
60243: LD_INT 0
60245: ST_TO_ADDR
60246: GO 60264
// min_x := x - r ;
60248: LD_ADDR_VAR 0 8
60252: PUSH
60253: LD_VAR 0 1
60257: PUSH
60258: LD_VAR 0 3
60262: MINUS
60263: ST_TO_ADDR
// if y - r < 0 then
60264: LD_VAR 0 2
60268: PUSH
60269: LD_VAR 0 3
60273: MINUS
60274: PUSH
60275: LD_INT 0
60277: LESS
60278: IFFALSE 60290
// min_y := 0 else
60280: LD_ADDR_VAR 0 7
60284: PUSH
60285: LD_INT 0
60287: ST_TO_ADDR
60288: GO 60306
// min_y := y - r ;
60290: LD_ADDR_VAR 0 7
60294: PUSH
60295: LD_VAR 0 2
60299: PUSH
60300: LD_VAR 0 3
60304: MINUS
60305: ST_TO_ADDR
// max_x := x + r ;
60306: LD_ADDR_VAR 0 9
60310: PUSH
60311: LD_VAR 0 1
60315: PUSH
60316: LD_VAR 0 3
60320: PLUS
60321: ST_TO_ADDR
// max_y := y + r ;
60322: LD_ADDR_VAR 0 10
60326: PUSH
60327: LD_VAR 0 2
60331: PUSH
60332: LD_VAR 0 3
60336: PLUS
60337: ST_TO_ADDR
// for _x = min_x to max_x do
60338: LD_ADDR_VAR 0 5
60342: PUSH
60343: DOUBLE
60344: LD_VAR 0 8
60348: DEC
60349: ST_TO_ADDR
60350: LD_VAR 0 9
60354: PUSH
60355: FOR_TO
60356: IFFALSE 60457
// for _y = min_y to max_y do
60358: LD_ADDR_VAR 0 6
60362: PUSH
60363: DOUBLE
60364: LD_VAR 0 7
60368: DEC
60369: ST_TO_ADDR
60370: LD_VAR 0 10
60374: PUSH
60375: FOR_TO
60376: IFFALSE 60453
// begin if not ValidHex ( _x , _y ) then
60378: LD_VAR 0 5
60382: PPUSH
60383: LD_VAR 0 6
60387: PPUSH
60388: CALL_OW 488
60392: NOT
60393: IFFALSE 60397
// continue ;
60395: GO 60375
// if GetResourceTypeXY ( _x , _y ) then
60397: LD_VAR 0 5
60401: PPUSH
60402: LD_VAR 0 6
60406: PPUSH
60407: CALL_OW 283
60411: IFFALSE 60451
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
60413: LD_ADDR_VAR 0 4
60417: PUSH
60418: LD_VAR 0 4
60422: PPUSH
60423: LD_VAR 0 4
60427: PUSH
60428: LD_INT 1
60430: PLUS
60431: PPUSH
60432: LD_VAR 0 5
60436: PUSH
60437: LD_VAR 0 6
60441: PUSH
60442: EMPTY
60443: LIST
60444: LIST
60445: PPUSH
60446: CALL_OW 1
60450: ST_TO_ADDR
// end ;
60451: GO 60375
60453: POP
60454: POP
60455: GO 60355
60457: POP
60458: POP
// end ;
60459: LD_VAR 0 4
60463: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , cr , side , tag ; begin
60464: LD_INT 0
60466: PPUSH
60467: PPUSH
60468: PPUSH
60469: PPUSH
60470: PPUSH
60471: PPUSH
// if not units then
60472: LD_VAR 0 1
60476: NOT
60477: IFFALSE 60481
// exit ;
60479: GO 60882
// result := UnitFilter ( units , [ f_ok ] ) ;
60481: LD_ADDR_VAR 0 3
60485: PUSH
60486: LD_VAR 0 1
60490: PPUSH
60491: LD_INT 50
60493: PUSH
60494: EMPTY
60495: LIST
60496: PPUSH
60497: CALL_OW 72
60501: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
60502: LD_ADDR_VAR 0 7
60506: PUSH
60507: LD_VAR 0 1
60511: PUSH
60512: LD_INT 1
60514: ARRAY
60515: PPUSH
60516: CALL_OW 255
60520: ST_TO_ADDR
// if not result then
60521: LD_VAR 0 3
60525: NOT
60526: IFFALSE 60530
// exit ;
60528: GO 60882
// for i in result do
60530: LD_ADDR_VAR 0 4
60534: PUSH
60535: LD_VAR 0 3
60539: PUSH
60540: FOR_IN
60541: IFFALSE 60880
// begin tag := GetTag ( i ) + 1 ;
60543: LD_ADDR_VAR 0 8
60547: PUSH
60548: LD_VAR 0 4
60552: PPUSH
60553: CALL_OW 110
60557: PUSH
60558: LD_INT 1
60560: PLUS
60561: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
60562: LD_ADDR_VAR 0 6
60566: PUSH
60567: LD_VAR 0 4
60571: PPUSH
60572: CALL_OW 250
60576: PPUSH
60577: LD_VAR 0 4
60581: PPUSH
60582: CALL_OW 251
60586: PPUSH
60587: LD_INT 6
60589: PPUSH
60590: CALL 60206 0 3
60594: ST_TO_ADDR
// if cr then
60595: LD_VAR 0 6
60599: IFFALSE 60638
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
60601: LD_VAR 0 4
60605: PPUSH
60606: LD_VAR 0 6
60610: PUSH
60611: LD_INT 1
60613: ARRAY
60614: PUSH
60615: LD_INT 1
60617: ARRAY
60618: PPUSH
60619: LD_VAR 0 6
60623: PUSH
60624: LD_INT 1
60626: ARRAY
60627: PUSH
60628: LD_INT 2
60630: ARRAY
60631: PPUSH
60632: CALL_OW 116
60636: GO 60878
// if path > tag then
60638: LD_VAR 0 2
60642: PUSH
60643: LD_VAR 0 8
60647: GREATER
60648: IFFALSE 60826
// begin enemy := FilterAllUnits ( [ [ f_enemy , side ] , [ f_dist , i , 12 ] ] ) ;
60650: LD_ADDR_VAR 0 5
60654: PUSH
60655: LD_INT 81
60657: PUSH
60658: LD_VAR 0 7
60662: PUSH
60663: EMPTY
60664: LIST
60665: LIST
60666: PUSH
60667: LD_INT 91
60669: PUSH
60670: LD_VAR 0 4
60674: PUSH
60675: LD_INT 12
60677: PUSH
60678: EMPTY
60679: LIST
60680: LIST
60681: LIST
60682: PUSH
60683: EMPTY
60684: LIST
60685: LIST
60686: PPUSH
60687: CALL_OW 69
60691: ST_TO_ADDR
// if enemy then
60692: LD_VAR 0 5
60696: IFFALSE 60724
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
60698: LD_VAR 0 4
60702: PPUSH
60703: LD_VAR 0 5
60707: PPUSH
60708: LD_VAR 0 4
60712: PPUSH
60713: CALL_OW 74
60717: PPUSH
60718: CALL_OW 115
60722: GO 60824
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
60724: LD_VAR 0 4
60728: PPUSH
60729: LD_VAR 0 2
60733: PUSH
60734: LD_VAR 0 8
60738: ARRAY
60739: PUSH
60740: LD_INT 1
60742: ARRAY
60743: PPUSH
60744: LD_VAR 0 2
60748: PUSH
60749: LD_VAR 0 8
60753: ARRAY
60754: PUSH
60755: LD_INT 2
60757: ARRAY
60758: PPUSH
60759: CALL_OW 297
60763: PUSH
60764: LD_INT 6
60766: GREATER
60767: IFFALSE 60810
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
60769: LD_VAR 0 4
60773: PPUSH
60774: LD_VAR 0 2
60778: PUSH
60779: LD_VAR 0 8
60783: ARRAY
60784: PUSH
60785: LD_INT 1
60787: ARRAY
60788: PPUSH
60789: LD_VAR 0 2
60793: PUSH
60794: LD_VAR 0 8
60798: ARRAY
60799: PUSH
60800: LD_INT 2
60802: ARRAY
60803: PPUSH
60804: CALL_OW 114
60808: GO 60824
// SetTag ( i , tag ) ;
60810: LD_VAR 0 4
60814: PPUSH
60815: LD_VAR 0 8
60819: PPUSH
60820: CALL_OW 109
// end else
60824: GO 60878
// begin enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
60826: LD_ADDR_VAR 0 5
60830: PUSH
60831: LD_INT 81
60833: PUSH
60834: LD_VAR 0 7
60838: PUSH
60839: EMPTY
60840: LIST
60841: LIST
60842: PPUSH
60843: CALL_OW 69
60847: ST_TO_ADDR
// if enemy then
60848: LD_VAR 0 5
60852: IFFALSE 60878
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
60854: LD_VAR 0 4
60858: PPUSH
60859: LD_VAR 0 5
60863: PPUSH
60864: LD_VAR 0 4
60868: PPUSH
60869: CALL_OW 74
60873: PPUSH
60874: CALL_OW 115
// end ; end ;
60878: GO 60540
60880: POP
60881: POP
// end ; end_of_file
60882: LD_VAR 0 3
60886: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
60887: LD_VAR 0 1
60891: PUSH
60892: LD_INT 200
60894: DOUBLE
60895: GREATEREQUAL
60896: IFFALSE 60904
60898: LD_INT 299
60900: DOUBLE
60901: LESSEQUAL
60902: IFTRUE 60906
60904: GO 60938
60906: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
60907: LD_VAR 0 1
60911: PPUSH
60912: LD_VAR 0 2
60916: PPUSH
60917: LD_VAR 0 3
60921: PPUSH
60922: LD_VAR 0 4
60926: PPUSH
60927: LD_VAR 0 5
60931: PPUSH
60932: CALL 3496 0 5
60936: GO 61015
60938: LD_INT 300
60940: DOUBLE
60941: GREATEREQUAL
60942: IFFALSE 60950
60944: LD_INT 399
60946: DOUBLE
60947: LESSEQUAL
60948: IFTRUE 60952
60950: GO 61014
60952: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
60953: LD_VAR 0 1
60957: PPUSH
60958: LD_VAR 0 2
60962: PPUSH
60963: LD_VAR 0 3
60967: PPUSH
60968: LD_VAR 0 4
60972: PPUSH
60973: LD_VAR 0 5
60977: PPUSH
60978: LD_VAR 0 6
60982: PPUSH
60983: LD_VAR 0 7
60987: PPUSH
60988: LD_VAR 0 8
60992: PPUSH
60993: LD_VAR 0 9
60997: PPUSH
60998: LD_VAR 0 10
61002: PPUSH
61003: LD_VAR 0 11
61007: PPUSH
61008: CALL 19184 0 11
61012: GO 61015
61014: POP
// end ;
61015: PPOPN 11
61017: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
61018: LD_VAR 0 1
61022: PPUSH
61023: LD_VAR 0 2
61027: PPUSH
61028: LD_VAR 0 3
61032: PPUSH
61033: LD_VAR 0 4
61037: PPUSH
61038: LD_VAR 0 5
61042: PPUSH
61043: CALL 3488 0 5
// end ; end_of_file
61047: PPOPN 5
61049: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
61050: LD_VAR 0 1
61054: PPUSH
61055: LD_VAR 0 2
61059: PPUSH
61060: LD_VAR 0 3
61064: PPUSH
61065: LD_VAR 0 4
61069: PPUSH
61070: LD_VAR 0 5
61074: PPUSH
61075: LD_VAR 0 6
61079: PPUSH
61080: CALL 7379 0 6
// end ;
61084: PPOPN 6
61086: END
