// starting begin ResetFog ;
   0: CALL_OW 335
// PrepareGame ;
   4: CALL 13 0 0
// PrepareUnits ;
   8: CALL 299 0 0
// end ;
  12: END
// export mechanics , time_to_destroy , players , sib_bomb , time , veh_amount ; export p1 , p2 , p3 , p4 , p5 ; function PrepareGame ; var debug , i ; begin
  13: LD_INT 0
  15: PPUSH
  16: PPUSH
  17: PPUSH
// debug := false ;
  18: LD_ADDR_VAR 0 2
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// if debug then
  26: LD_VAR 0 2
  30: IFFALSE 81
// begin mechanics := 5 ;
  32: LD_ADDR_EXP 1
  36: PUSH
  37: LD_INT 5
  39: ST_TO_ADDR
// time_to_destroy := 45 ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_INT 45
  47: ST_TO_ADDR
// players := 4 ;
  48: LD_ADDR_EXP 3
  52: PUSH
  53: LD_INT 4
  55: ST_TO_ADDR
// sib_bomb := true ;
  56: LD_ADDR_EXP 4
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// time := 3 3$00 ;
  64: LD_ADDR_EXP 5
  68: PUSH
  69: LD_INT 6300
  71: ST_TO_ADDR
// FogOff ( 1 ) ;
  72: LD_INT 1
  74: PPUSH
  75: CALL_OW 344
// end else
  79: GO 214
// begin time := 3 3$00 ;
  81: LD_ADDR_EXP 5
  85: PUSH
  86: LD_INT 6300
  88: ST_TO_ADDR
// players := 4 ;
  89: LD_ADDR_EXP 3
  93: PUSH
  94: LD_INT 4
  96: ST_TO_ADDR
// sib_bomb := true ;
  97: LD_ADDR_EXP 4
 101: PUSH
 102: LD_INT 1
 104: ST_TO_ADDR
// mechanics := 4 ;
 105: LD_ADDR_EXP 1
 109: PUSH
 110: LD_INT 4
 112: ST_TO_ADDR
// mechanics := [ 3 , 4 , 5 ] [ GetMultiplayerSetting ( 0 ) ] ;
 113: LD_ADDR_EXP 1
 117: PUSH
 118: LD_INT 3
 120: PUSH
 121: LD_INT 4
 123: PUSH
 124: LD_INT 5
 126: PUSH
 127: EMPTY
 128: LIST
 129: LIST
 130: LIST
 131: PUSH
 132: LD_INT 0
 134: PPUSH
 135: CALL_OW 426
 139: ARRAY
 140: ST_TO_ADDR
// players := [ 3 , 4 , 5 ] [ GetMultiplayerSetting ( 1 ) ] ;
 141: LD_ADDR_EXP 3
 145: PUSH
 146: LD_INT 3
 148: PUSH
 149: LD_INT 4
 151: PUSH
 152: LD_INT 5
 154: PUSH
 155: EMPTY
 156: LIST
 157: LIST
 158: LIST
 159: PUSH
 160: LD_INT 1
 162: PPUSH
 163: CALL_OW 426
 167: ARRAY
 168: ST_TO_ADDR
// time := [ 3 3$00 , 5 5$00 , 10 10$00 ] [ GetMultiplayerSetting ( 2 ) ] ;
 169: LD_ADDR_EXP 5
 173: PUSH
 174: LD_INT 6300
 176: PUSH
 177: LD_INT 10500
 179: PUSH
 180: LD_INT 21000
 182: PUSH
 183: EMPTY
 184: LIST
 185: LIST
 186: LIST
 187: PUSH
 188: LD_INT 2
 190: PPUSH
 191: CALL_OW 426
 195: ARRAY
 196: ST_TO_ADDR
// sib_bomb := GetMultiplayerSetting ( 3 ) - 1 ;
 197: LD_ADDR_EXP 4
 201: PUSH
 202: LD_INT 3
 204: PPUSH
 205: CALL_OW 426
 209: PUSH
 210: LD_INT 1
 212: MINUS
 213: ST_TO_ADDR
// end ; p1 := 0 ;
 214: LD_ADDR_EXP 7
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// p2 := 0 ;
 222: LD_ADDR_EXP 8
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// p3 := 0 ;
 230: LD_ADDR_EXP 9
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// p4 := 0 ;
 238: LD_ADDR_EXP 10
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// p5 := 0 ;
 246: LD_ADDR_EXP 11
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// veh_amount := 12 ;
 254: LD_ADDR_EXP 6
 258: PUSH
 259: LD_INT 12
 261: ST_TO_ADDR
// for i = 1 to 7 do
 262: LD_ADDR_VAR 0 3
 266: PUSH
 267: DOUBLE
 268: LD_INT 1
 270: DEC
 271: ST_TO_ADDR
 272: LD_INT 7
 274: PUSH
 275: FOR_TO
 276: IFFALSE 292
// ChangeSideFog ( i , 8 ) ;
 278: LD_VAR 0 3
 282: PPUSH
 283: LD_INT 8
 285: PPUSH
 286: CALL_OW 343
 290: GO 275
 292: POP
 293: POP
// end ; end_of_file
 294: LD_VAR 0 1
 298: RET
// export function PrepareUnits ; var i , side ; begin
 299: LD_INT 0
 301: PPUSH
 302: PPUSH
 303: PPUSH
// side := players ;
 304: LD_ADDR_VAR 0 3
 308: PUSH
 309: LD_EXP 3
 313: ST_TO_ADDR
// uc_nation := 1 ;
 314: LD_ADDR_OWVAR 21
 318: PUSH
 319: LD_INT 1
 321: ST_TO_ADDR
// for i = 1 to mechanics do
 322: LD_ADDR_VAR 0 2
 326: PUSH
 327: DOUBLE
 328: LD_INT 1
 330: DEC
 331: ST_TO_ADDR
 332: LD_EXP 1
 336: PUSH
 337: FOR_TO
 338: IFFALSE 402
// for side = 1 to players do
 340: LD_ADDR_VAR 0 3
 344: PUSH
 345: DOUBLE
 346: LD_INT 1
 348: DEC
 349: ST_TO_ADDR
 350: LD_EXP 3
 354: PUSH
 355: FOR_TO
 356: IFFALSE 398
// begin uc_side := side ;
 358: LD_ADDR_OWVAR 20
 362: PUSH
 363: LD_VAR 0 3
 367: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
 368: LD_INT 0
 370: PPUSH
 371: LD_INT 3
 373: PPUSH
 374: LD_INT 10
 376: PPUSH
 377: CALL_OW 380
// PlaceUnitArea ( CreateHuman , mech_area , false ) ;
 381: CALL_OW 44
 385: PPUSH
 386: LD_INT 6
 388: PPUSH
 389: LD_INT 0
 391: PPUSH
 392: CALL_OW 49
// end ;
 396: GO 355
 398: POP
 399: POP
 400: GO 337
 402: POP
 403: POP
// end ;
 404: LD_VAR 0 1
 408: RET
// function ToSpawn ( side ) ; begin
 409: LD_INT 0
 411: PPUSH
// uc_side := side ;
 412: LD_ADDR_OWVAR 20
 416: PUSH
 417: LD_VAR 0 1
 421: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
 422: LD_INT 0
 424: PPUSH
 425: LD_INT 3
 427: PPUSH
 428: LD_INT 10
 430: PPUSH
 431: CALL_OW 380
// PlaceUnitArea ( CreateHuman , mech_area , false ) ;
 435: CALL_OW 44
 439: PPUSH
 440: LD_INT 6
 442: PPUSH
 443: LD_INT 0
 445: PPUSH
 446: CALL_OW 49
// end ;
 450: LD_VAR 0 2
 454: RET
// every 0 0$13 trigger time do var i , filter ;
 455: LD_EXP 5
 459: IFFALSE 569
 461: GO 463
 463: DISABLE
 464: LD_INT 0
 466: PPUSH
 467: PPUSH
// begin enable ;
 468: ENABLE
// for i = 1 to players do
 469: LD_ADDR_VAR 0 1
 473: PUSH
 474: DOUBLE
 475: LD_INT 1
 477: DEC
 478: ST_TO_ADDR
 479: LD_EXP 3
 483: PUSH
 484: FOR_TO
 485: IFFALSE 567
// begin filter := FilterAllUnits ( [ [ [ f_side , i ] , [ f_class , 3 ] , [ f_type , unit_human ] ] ] ) ;
 487: LD_ADDR_VAR 0 2
 491: PUSH
 492: LD_INT 22
 494: PUSH
 495: LD_VAR 0 1
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: PUSH
 504: LD_INT 25
 506: PUSH
 507: LD_INT 3
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: PUSH
 514: LD_INT 21
 516: PUSH
 517: LD_INT 1
 519: PUSH
 520: EMPTY
 521: LIST
 522: LIST
 523: PUSH
 524: EMPTY
 525: LIST
 526: LIST
 527: LIST
 528: PUSH
 529: EMPTY
 530: LIST
 531: PPUSH
 532: CALL_OW 69
 536: ST_TO_ADDR
// if filter < mechanics then
 537: LD_VAR 0 2
 541: PUSH
 542: LD_EXP 1
 546: LESS
 547: IFFALSE 565
// begin Wait ( 0 0$03 ) ;
 549: LD_INT 105
 551: PPUSH
 552: CALL_OW 67
// ToSpawn ( i ) ;
 556: LD_VAR 0 1
 560: PPUSH
 561: CALL 409 0 1
// end ; end ;
 565: GO 484
 567: POP
 568: POP
// end ;
 569: PPOPN 2
 571: END
// every 0 0$01 trigger time do var i , filter , filter2 , vehicles ;
 572: LD_EXP 5
 576: IFFALSE 943
 578: GO 580
 580: DISABLE
 581: LD_INT 0
 583: PPUSH
 584: PPUSH
 585: PPUSH
 586: PPUSH
// begin enable ;
 587: ENABLE
// filter2 := FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_not , [ f_side , 0 ] ] , [ f_not , [ f_side , 1 ] ] ] ) ;
 588: LD_ADDR_VAR 0 3
 592: PUSH
 593: LD_INT 21
 595: PUSH
 596: LD_INT 2
 598: PUSH
 599: EMPTY
 600: LIST
 601: LIST
 602: PUSH
 603: LD_INT 3
 605: PUSH
 606: LD_INT 22
 608: PUSH
 609: LD_INT 0
 611: PUSH
 612: EMPTY
 613: LIST
 614: LIST
 615: PUSH
 616: EMPTY
 617: LIST
 618: LIST
 619: PUSH
 620: LD_INT 3
 622: PUSH
 623: LD_INT 22
 625: PUSH
 626: LD_INT 1
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: PUSH
 633: EMPTY
 634: LIST
 635: LIST
 636: PUSH
 637: EMPTY
 638: LIST
 639: LIST
 640: LIST
 641: PPUSH
 642: CALL_OW 69
 646: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_side , 1 ] ] ] ) ;
 647: LD_ADDR_VAR 0 2
 651: PUSH
 652: LD_INT 21
 654: PUSH
 655: LD_INT 1
 657: PUSH
 658: EMPTY
 659: LIST
 660: LIST
 661: PUSH
 662: LD_INT 3
 664: PUSH
 665: LD_INT 54
 667: PUSH
 668: EMPTY
 669: LIST
 670: PUSH
 671: EMPTY
 672: LIST
 673: LIST
 674: PUSH
 675: LD_INT 3
 677: PUSH
 678: LD_INT 22
 680: PUSH
 681: LD_INT 1
 683: PUSH
 684: EMPTY
 685: LIST
 686: LIST
 687: PUSH
 688: EMPTY
 689: LIST
 690: LIST
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: LIST
 696: PPUSH
 697: CALL_OW 69
 701: ST_TO_ADDR
// vehicles := FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 702: LD_ADDR_VAR 0 4
 706: PUSH
 707: LD_INT 21
 709: PUSH
 710: LD_INT 2
 712: PUSH
 713: EMPTY
 714: LIST
 715: LIST
 716: PUSH
 717: LD_INT 58
 719: PUSH
 720: EMPTY
 721: LIST
 722: PUSH
 723: EMPTY
 724: LIST
 725: LIST
 726: PPUSH
 727: CALL_OW 69
 731: ST_TO_ADDR
// if filter and vehicles then
 732: LD_VAR 0 2
 736: PUSH
 737: LD_VAR 0 4
 741: AND
 742: IFFALSE 879
// for i = 1 to filter do
 744: LD_ADDR_VAR 0 1
 748: PUSH
 749: DOUBLE
 750: LD_INT 1
 752: DEC
 753: ST_TO_ADDR
 754: LD_VAR 0 2
 758: PUSH
 759: FOR_TO
 760: IFFALSE 877
// if not HasTask ( filter [ i ] ) and IsOk ( filter [ i ] ) then
 762: LD_VAR 0 2
 766: PUSH
 767: LD_VAR 0 1
 771: ARRAY
 772: PPUSH
 773: CALL_OW 314
 777: NOT
 778: PUSH
 779: LD_VAR 0 2
 783: PUSH
 784: LD_VAR 0 1
 788: ARRAY
 789: PPUSH
 790: CALL_OW 302
 794: AND
 795: IFFALSE 875
// if GetDistUnits ( filter [ i ] , NearestUnitToUnit ( vehicles , filter [ i ] ) ) < 45 then
 797: LD_VAR 0 2
 801: PUSH
 802: LD_VAR 0 1
 806: ARRAY
 807: PPUSH
 808: LD_VAR 0 4
 812: PPUSH
 813: LD_VAR 0 2
 817: PUSH
 818: LD_VAR 0 1
 822: ARRAY
 823: PPUSH
 824: CALL_OW 74
 828: PPUSH
 829: CALL_OW 296
 833: PUSH
 834: LD_INT 45
 836: LESS
 837: IFFALSE 875
// ComEnterUnit ( filter [ i ] , NearestUnitToUnit ( vehicles , filter [ i ] ) ) ;
 839: LD_VAR 0 2
 843: PUSH
 844: LD_VAR 0 1
 848: ARRAY
 849: PPUSH
 850: LD_VAR 0 4
 854: PPUSH
 855: LD_VAR 0 2
 859: PUSH
 860: LD_VAR 0 1
 864: ARRAY
 865: PPUSH
 866: CALL_OW 74
 870: PPUSH
 871: CALL_OW 120
 875: GO 759
 877: POP
 878: POP
// if filter2 then
 879: LD_VAR 0 3
 883: IFFALSE 943
// for i = 1 to filter2 do
 885: LD_ADDR_VAR 0 1
 889: PUSH
 890: DOUBLE
 891: LD_INT 1
 893: DEC
 894: ST_TO_ADDR
 895: LD_VAR 0 3
 899: PUSH
 900: FOR_TO
 901: IFFALSE 941
// if not HasTask ( filter2 [ i ] ) then
 903: LD_VAR 0 3
 907: PUSH
 908: LD_VAR 0 1
 912: ARRAY
 913: PPUSH
 914: CALL_OW 314
 918: NOT
 919: IFFALSE 939
// ComMoveToArea ( filter2 [ i ] , exit_area ) ;
 921: LD_VAR 0 3
 925: PUSH
 926: LD_VAR 0 1
 930: ARRAY
 931: PPUSH
 932: LD_INT 4
 934: PPUSH
 935: CALL_OW 113
 939: GO 900
 941: POP
 942: POP
// end ; end_of_file
 943: PPOPN 4
 945: END
// export function SpawnCar ( chas , area ) ; var i , e , veh , ar_chassis , ru_chassis , us_chassis , ar_weapons , ru_weapons , us_weapons , chassis , engine , weapon ; begin
 946: LD_INT 0
 948: PPUSH
 949: PPUSH
 950: PPUSH
 951: PPUSH
 952: PPUSH
 953: PPUSH
 954: PPUSH
 955: PPUSH
 956: PPUSH
 957: PPUSH
 958: PPUSH
 959: PPUSH
 960: PPUSH
// uc_side := 0 ;
 961: LD_ADDR_OWVAR 20
 965: PUSH
 966: LD_INT 0
 968: ST_TO_ADDR
// uc_nation := Rand ( 1 , 3 ) ;
 969: LD_ADDR_OWVAR 21
 973: PUSH
 974: LD_INT 1
 976: PPUSH
 977: LD_INT 3
 979: PPUSH
 980: CALL_OW 12
 984: ST_TO_ADDR
// ar_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ;
 985: LD_ADDR_VAR 0 7
 989: PUSH
 990: LD_INT 11
 992: PUSH
 993: LD_INT 12
 995: PUSH
 996: LD_INT 13
 998: PUSH
 999: LD_INT 14
1001: PUSH
1002: EMPTY
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: ST_TO_ADDR
// ru_chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ;
1008: LD_ADDR_VAR 0 8
1012: PUSH
1013: LD_INT 21
1015: PUSH
1016: LD_INT 22
1018: PUSH
1019: LD_INT 23
1021: PUSH
1022: LD_INT 24
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: ST_TO_ADDR
// us_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ;
1031: LD_ADDR_VAR 0 9
1035: PUSH
1036: LD_INT 1
1038: PUSH
1039: LD_INT 2
1041: PUSH
1042: LD_INT 3
1044: PUSH
1045: LD_INT 4
1047: PUSH
1048: LD_INT 5
1050: PUSH
1051: EMPTY
1052: LIST
1053: LIST
1054: LIST
1055: LIST
1056: LIST
1057: ST_TO_ADDR
// if chas > 0 then
1058: LD_VAR 0 1
1062: PUSH
1063: LD_INT 0
1065: GREATER
1066: IFFALSE 1080
// vc_chassis := chas else
1068: LD_ADDR_OWVAR 37
1072: PUSH
1073: LD_VAR 0 1
1077: ST_TO_ADDR
1078: GO 1173
// begin case uc_nation of 1 :
1080: LD_OWVAR 21
1084: PUSH
1085: LD_INT 1
1087: DOUBLE
1088: EQUAL
1089: IFTRUE 1093
1091: GO 1106
1093: POP
// chassis := us_chassis ; 2 :
1094: LD_ADDR_VAR 0 13
1098: PUSH
1099: LD_VAR 0 9
1103: ST_TO_ADDR
1104: GO 1149
1106: LD_INT 2
1108: DOUBLE
1109: EQUAL
1110: IFTRUE 1114
1112: GO 1127
1114: POP
// chassis := ar_chassis ; 3 :
1115: LD_ADDR_VAR 0 13
1119: PUSH
1120: LD_VAR 0 7
1124: ST_TO_ADDR
1125: GO 1149
1127: LD_INT 3
1129: DOUBLE
1130: EQUAL
1131: IFTRUE 1135
1133: GO 1148
1135: POP
// chassis := ru_chassis ; end ;
1136: LD_ADDR_VAR 0 13
1140: PUSH
1141: LD_VAR 0 8
1145: ST_TO_ADDR
1146: GO 1149
1148: POP
// vc_chassis := chassis [ Rand ( 1 , chassis ) ] ;
1149: LD_ADDR_OWVAR 37
1153: PUSH
1154: LD_VAR 0 13
1158: PUSH
1159: LD_INT 1
1161: PPUSH
1162: LD_VAR 0 13
1166: PPUSH
1167: CALL_OW 12
1171: ARRAY
1172: ST_TO_ADDR
// end ; if vc_chassis in [ ar_hovercraft , ar_light_trike , us_light_wheeled ] then
1173: LD_OWVAR 37
1177: PUSH
1178: LD_INT 11
1180: PUSH
1181: LD_INT 12
1183: PUSH
1184: LD_INT 1
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: LIST
1191: IN
1192: IFFALSE 1212
// engine := Rand ( 1 , 2 ) else
1194: LD_ADDR_VAR 0 14
1198: PUSH
1199: LD_INT 1
1201: PPUSH
1202: LD_INT 2
1204: PPUSH
1205: CALL_OW 12
1209: ST_TO_ADDR
1210: GO 1324
// begin if not vc_chassis in [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , us_heavy_tracked , us_morphling ] then
1212: LD_OWVAR 37
1216: PUSH
1217: LD_INT 21
1219: PUSH
1220: LD_INT 22
1222: PUSH
1223: LD_INT 23
1225: PUSH
1226: LD_INT 24
1228: PUSH
1229: LD_INT 4
1231: PUSH
1232: LD_INT 5
1234: PUSH
1235: EMPTY
1236: LIST
1237: LIST
1238: LIST
1239: LIST
1240: LIST
1241: LIST
1242: IN
1243: NOT
1244: IFFALSE 1264
// engine := Rand ( 1 , 3 ) else
1246: LD_ADDR_VAR 0 14
1250: PUSH
1251: LD_INT 1
1253: PPUSH
1254: LD_INT 3
1256: PPUSH
1257: CALL_OW 12
1261: ST_TO_ADDR
1262: GO 1280
// e := Rand ( 1 , 2 ) ;
1264: LD_ADDR_VAR 0 5
1268: PUSH
1269: LD_INT 1
1271: PPUSH
1272: LD_INT 2
1274: PPUSH
1275: CALL_OW 12
1279: ST_TO_ADDR
// case e of 1 :
1280: LD_VAR 0 5
1284: PUSH
1285: LD_INT 1
1287: DOUBLE
1288: EQUAL
1289: IFTRUE 1293
1291: GO 1304
1293: POP
// engine := engine_combustion ; 2 :
1294: LD_ADDR_VAR 0 14
1298: PUSH
1299: LD_INT 1
1301: ST_TO_ADDR
1302: GO 1324
1304: LD_INT 2
1306: DOUBLE
1307: EQUAL
1308: IFTRUE 1312
1310: GO 1323
1312: POP
// engine := engine_siberite ; end ;
1313: LD_ADDR_VAR 0 14
1317: PUSH
1318: LD_INT 3
1320: ST_TO_ADDR
1321: GO 1324
1323: POP
// end ; vc_engine := engine ;
1324: LD_ADDR_OWVAR 39
1328: PUSH
1329: LD_VAR 0 14
1333: ST_TO_ADDR
// vc_control := control_manual ;
1334: LD_ADDR_OWVAR 38
1338: PUSH
1339: LD_INT 1
1341: ST_TO_ADDR
// ar_weapons := [ ar_multimissile_ballista , ar_double_machine_gun , ar_light_gun , ar_radar , ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb , ar_flame_thrower ] ;
1342: LD_ADDR_VAR 0 10
1346: PUSH
1347: LD_INT 22
1349: PUSH
1350: LD_INT 24
1352: PUSH
1353: LD_INT 23
1355: PUSH
1356: LD_INT 30
1358: PUSH
1359: LD_INT 25
1361: PUSH
1362: LD_INT 27
1364: PUSH
1365: LD_INT 28
1367: PUSH
1368: LD_INT 29
1370: PUSH
1371: LD_INT 26
1373: PUSH
1374: EMPTY
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: LIST
1382: LIST
1383: LIST
1384: ST_TO_ADDR
// ru_weapons := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , 98 , ru_rocket_launcher , ru_heavy_gun , ru_rocket , ru_bulldozer , ru_time_lapser ] ;
1385: LD_ADDR_VAR 0 11
1389: PUSH
1390: LD_INT 42
1392: PUSH
1393: LD_INT 43
1395: PUSH
1396: LD_INT 44
1398: PUSH
1399: LD_INT 98
1401: PUSH
1402: LD_INT 45
1404: PUSH
1405: LD_INT 46
1407: PUSH
1408: LD_INT 47
1410: PUSH
1411: LD_INT 53
1413: PUSH
1414: LD_INT 49
1416: PUSH
1417: EMPTY
1418: LIST
1419: LIST
1420: LIST
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: LIST
1427: ST_TO_ADDR
// us_weapons := [ us_machine_gun , us_light_gun , us_radar , us_gatling_gun , us_double_gun , us_rocket_launcher , us_laser , us_heavy_gun , us_bulldozer , us_double_laser ] ;
1428: LD_ADDR_VAR 0 12
1432: PUSH
1433: LD_INT 2
1435: PUSH
1436: LD_INT 3
1438: PUSH
1439: LD_INT 11
1441: PUSH
1442: LD_INT 4
1444: PUSH
1445: LD_INT 5
1447: PUSH
1448: LD_INT 7
1450: PUSH
1451: LD_INT 9
1453: PUSH
1454: LD_INT 6
1456: PUSH
1457: LD_INT 14
1459: PUSH
1460: LD_INT 10
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: LIST
1473: LIST
1474: ST_TO_ADDR
// if uc_nation = nation_arabian then
1475: LD_OWVAR 21
1479: PUSH
1480: LD_INT 2
1482: EQUAL
1483: IFFALSE 1550
// begin if vc_chassis in [ ar_hovercraft , ar_light_trike ] then
1485: LD_OWVAR 37
1489: PUSH
1490: LD_INT 11
1492: PUSH
1493: LD_INT 12
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: IN
1500: IFFALSE 1526
// weapon := ar_weapons [ Rand ( 1 , 3 ) ] else
1502: LD_ADDR_VAR 0 15
1506: PUSH
1507: LD_VAR 0 10
1511: PUSH
1512: LD_INT 1
1514: PPUSH
1515: LD_INT 3
1517: PPUSH
1518: CALL_OW 12
1522: ARRAY
1523: ST_TO_ADDR
1524: GO 1550
// weapon := ar_weapons [ Rand ( 1 , ar_weapons ) ] ;
1526: LD_ADDR_VAR 0 15
1530: PUSH
1531: LD_VAR 0 10
1535: PUSH
1536: LD_INT 1
1538: PPUSH
1539: LD_VAR 0 10
1543: PPUSH
1544: CALL_OW 12
1548: ARRAY
1549: ST_TO_ADDR
// end ; if uc_nation = nation_russian then
1550: LD_OWVAR 21
1554: PUSH
1555: LD_INT 3
1557: EQUAL
1558: IFFALSE 1625
// begin if vc_chassis in [ ru_medium_wheeled , ru_medium_tracked ] then
1560: LD_OWVAR 37
1564: PUSH
1565: LD_INT 21
1567: PUSH
1568: LD_INT 22
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: IN
1575: IFFALSE 1601
// weapon := ru_weapons [ Rand ( 1 , 5 ) ] else
1577: LD_ADDR_VAR 0 15
1581: PUSH
1582: LD_VAR 0 11
1586: PUSH
1587: LD_INT 1
1589: PPUSH
1590: LD_INT 5
1592: PPUSH
1593: CALL_OW 12
1597: ARRAY
1598: ST_TO_ADDR
1599: GO 1625
// weapon := ru_weapons [ Rand ( 1 , ru_weapons ) ] ;
1601: LD_ADDR_VAR 0 15
1605: PUSH
1606: LD_VAR 0 11
1610: PUSH
1611: LD_INT 1
1613: PPUSH
1614: LD_VAR 0 11
1618: PPUSH
1619: CALL_OW 12
1623: ARRAY
1624: ST_TO_ADDR
// end ; if uc_nation = nation_american then
1625: LD_OWVAR 21
1629: PUSH
1630: LD_INT 1
1632: EQUAL
1633: IFFALSE 1742
// begin if vc_chassis = us_light_wheeled then
1635: LD_OWVAR 37
1639: PUSH
1640: LD_INT 1
1642: EQUAL
1643: IFFALSE 1667
// weapon := us_weapons [ Rand ( 1 , 3 ) ] ;
1645: LD_ADDR_VAR 0 15
1649: PUSH
1650: LD_VAR 0 12
1654: PUSH
1655: LD_INT 1
1657: PPUSH
1658: LD_INT 3
1660: PPUSH
1661: CALL_OW 12
1665: ARRAY
1666: ST_TO_ADDR
// if vc_chassis in [ us_medium_tracked , us_medium_wheeled ] then
1667: LD_OWVAR 37
1671: PUSH
1672: LD_INT 3
1674: PUSH
1675: LD_INT 2
1677: PUSH
1678: EMPTY
1679: LIST
1680: LIST
1681: IN
1682: IFFALSE 1708
// weapon := us_weapons [ Rand ( 1 , 7 ) ] else
1684: LD_ADDR_VAR 0 15
1688: PUSH
1689: LD_VAR 0 12
1693: PUSH
1694: LD_INT 1
1696: PPUSH
1697: LD_INT 7
1699: PPUSH
1700: CALL_OW 12
1704: ARRAY
1705: ST_TO_ADDR
1706: GO 1742
// if vc_chassis <> us_light_wheeled then
1708: LD_OWVAR 37
1712: PUSH
1713: LD_INT 1
1715: NONEQUAL
1716: IFFALSE 1742
// weapon := us_weapons [ Rand ( 1 , us_weapons ) ] ;
1718: LD_ADDR_VAR 0 15
1722: PUSH
1723: LD_VAR 0 12
1727: PUSH
1728: LD_INT 1
1730: PPUSH
1731: LD_VAR 0 12
1735: PPUSH
1736: CALL_OW 12
1740: ARRAY
1741: ST_TO_ADDR
// end ; vc_weapon := weapon ;
1742: LD_ADDR_OWVAR 40
1746: PUSH
1747: LD_VAR 0 15
1751: ST_TO_ADDR
// veh := CreateVehicle ;
1752: LD_ADDR_VAR 0 6
1756: PUSH
1757: CALL_OW 45
1761: ST_TO_ADDR
// PlaceUnitArea ( veh , area , true ) ;
1762: LD_VAR 0 6
1766: PPUSH
1767: LD_VAR 0 2
1771: PPUSH
1772: LD_INT 1
1774: PPUSH
1775: CALL_OW 49
// end ;
1779: LD_VAR 0 3
1783: RET
// export function SpawnSibRocket ( area ) ; var veh , p ; begin
1784: LD_INT 0
1786: PPUSH
1787: PPUSH
1788: PPUSH
// uc_side := 0 ;
1789: LD_ADDR_OWVAR 20
1793: PUSH
1794: LD_INT 0
1796: ST_TO_ADDR
// p := Rand ( 1 , 2 ) ;
1797: LD_ADDR_VAR 0 4
1801: PUSH
1802: LD_INT 1
1804: PPUSH
1805: LD_INT 2
1807: PPUSH
1808: CALL_OW 12
1812: ST_TO_ADDR
// case p of 1 :
1813: LD_VAR 0 4
1817: PUSH
1818: LD_INT 1
1820: DOUBLE
1821: EQUAL
1822: IFTRUE 1826
1824: GO 1869
1826: POP
// begin uc_nation := nation_american ;
1827: LD_ADDR_OWVAR 21
1831: PUSH
1832: LD_INT 1
1834: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
1835: LD_ADDR_OWVAR 37
1839: PUSH
1840: LD_INT 4
1842: ST_TO_ADDR
// vc_engine := engine_siberite ;
1843: LD_ADDR_OWVAR 39
1847: PUSH
1848: LD_INT 3
1850: ST_TO_ADDR
// vc_control := control_manual ;
1851: LD_ADDR_OWVAR 38
1855: PUSH
1856: LD_INT 1
1858: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
1859: LD_ADDR_OWVAR 40
1863: PUSH
1864: LD_INT 8
1866: ST_TO_ADDR
// end ; 2 :
1867: GO 1921
1869: LD_INT 2
1871: DOUBLE
1872: EQUAL
1873: IFTRUE 1877
1875: GO 1920
1877: POP
// begin uc_nation := nation_russian ;
1878: LD_ADDR_OWVAR 21
1882: PUSH
1883: LD_INT 3
1885: ST_TO_ADDR
// vc_chassis := ru_heavy_tracked ;
1886: LD_ADDR_OWVAR 37
1890: PUSH
1891: LD_INT 24
1893: ST_TO_ADDR
// vc_engine := engine_siberite ;
1894: LD_ADDR_OWVAR 39
1898: PUSH
1899: LD_INT 3
1901: ST_TO_ADDR
// vc_control := control_manual ;
1902: LD_ADDR_OWVAR 38
1906: PUSH
1907: LD_INT 1
1909: ST_TO_ADDR
// vc_weapon := ru_siberium_rocket ;
1910: LD_ADDR_OWVAR 40
1914: PUSH
1915: LD_INT 48
1917: ST_TO_ADDR
// end ; end ;
1918: GO 1921
1920: POP
// veh := CreateVehicle ;
1921: LD_ADDR_VAR 0 3
1925: PUSH
1926: CALL_OW 45
1930: ST_TO_ADDR
// PlaceUnitArea ( veh , area , true ) ;
1931: LD_VAR 0 3
1935: PPUSH
1936: LD_VAR 0 1
1940: PPUSH
1941: LD_INT 1
1943: PPUSH
1944: CALL_OW 49
// end ;
1948: LD_VAR 0 2
1952: RET
// export function ScoreBoard ( veh ) ; var points ; begin
1953: LD_INT 0
1955: PPUSH
1956: PPUSH
// points := 0 ;
1957: LD_ADDR_VAR 0 3
1961: PUSH
1962: LD_INT 0
1964: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_light_trike , us_light_wheeled ] then
1965: LD_VAR 0 1
1969: PPUSH
1970: CALL_OW 265
1974: PUSH
1975: LD_INT 12
1977: PUSH
1978: LD_INT 1
1980: PUSH
1981: EMPTY
1982: LIST
1983: LIST
1984: IN
1985: IFFALSE 2001
// points := points + 10 ;
1987: LD_ADDR_VAR 0 3
1991: PUSH
1992: LD_VAR 0 3
1996: PUSH
1997: LD_INT 10
1999: PLUS
2000: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_medium_trike , ru_medium_wheeled , us_medium_wheeled ] then
2001: LD_VAR 0 1
2005: PPUSH
2006: CALL_OW 265
2010: PUSH
2011: LD_INT 13
2013: PUSH
2014: LD_INT 21
2016: PUSH
2017: LD_INT 2
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: LIST
2024: IN
2025: IFFALSE 2041
// points := points + 15 ;
2027: LD_ADDR_VAR 0 3
2031: PUSH
2032: LD_VAR 0 3
2036: PUSH
2037: LD_INT 15
2039: PLUS
2040: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_half_tracked , ru_medium_tracked , us_medium_tracked ] then
2041: LD_VAR 0 1
2045: PPUSH
2046: CALL_OW 265
2050: PUSH
2051: LD_INT 14
2053: PUSH
2054: LD_INT 22
2056: PUSH
2057: LD_INT 3
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: LIST
2064: IN
2065: IFFALSE 2081
// points := points + 20 ;
2067: LD_ADDR_VAR 0 3
2071: PUSH
2072: LD_VAR 0 3
2076: PUSH
2077: LD_INT 20
2079: PLUS
2080: ST_TO_ADDR
// if GetChassis ( veh ) in [ ru_heavy_wheeled , ru_heavy_tracked , us_heavy_tracked ] then
2081: LD_VAR 0 1
2085: PPUSH
2086: CALL_OW 265
2090: PUSH
2091: LD_INT 23
2093: PUSH
2094: LD_INT 24
2096: PUSH
2097: LD_INT 4
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: LIST
2104: IN
2105: IFFALSE 2121
// points := points + 25 ;
2107: LD_ADDR_VAR 0 3
2111: PUSH
2112: LD_VAR 0 3
2116: PUSH
2117: LD_INT 25
2119: PLUS
2120: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_hovercraft , us_morphling ] then
2121: LD_VAR 0 1
2125: PPUSH
2126: CALL_OW 265
2130: PUSH
2131: LD_INT 11
2133: PUSH
2134: LD_INT 5
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: IN
2141: IFFALSE 2157
// points := points + 30 ;
2143: LD_ADDR_VAR 0 3
2147: PUSH
2148: LD_VAR 0 3
2152: PUSH
2153: LD_INT 30
2155: PLUS
2156: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_combustion ] then
2157: LD_VAR 0 1
2161: PPUSH
2162: CALL_OW 262
2166: PUSH
2167: LD_INT 1
2169: PUSH
2170: EMPTY
2171: LIST
2172: EQUAL
2173: IFFALSE 2189
// points := points + 5 ;
2175: LD_ADDR_VAR 0 3
2179: PUSH
2180: LD_VAR 0 3
2184: PUSH
2185: LD_INT 5
2187: PLUS
2188: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_solar ] then
2189: LD_VAR 0 1
2193: PPUSH
2194: CALL_OW 262
2198: PUSH
2199: LD_INT 2
2201: PUSH
2202: EMPTY
2203: LIST
2204: EQUAL
2205: IFFALSE 2221
// points := points + 15 ;
2207: LD_ADDR_VAR 0 3
2211: PUSH
2212: LD_VAR 0 3
2216: PUSH
2217: LD_INT 15
2219: PLUS
2220: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_siberite ] then
2221: LD_VAR 0 1
2225: PPUSH
2226: CALL_OW 262
2230: PUSH
2231: LD_INT 3
2233: PUSH
2234: EMPTY
2235: LIST
2236: EQUAL
2237: IFFALSE 2253
// points := points + 25 ;
2239: LD_ADDR_VAR 0 3
2243: PUSH
2244: LD_VAR 0 3
2248: PUSH
2249: LD_INT 25
2251: PLUS
2252: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_multimissile_ballista , ar_double_machine_gun , ar_light_gun , ru_heavy_machine_gun , us_machine_gun , us_light_gun ] then
2253: LD_VAR 0 1
2257: PPUSH
2258: CALL_OW 264
2262: PUSH
2263: LD_INT 22
2265: PUSH
2266: LD_INT 24
2268: PUSH
2269: LD_INT 23
2271: PUSH
2272: LD_INT 42
2274: PUSH
2275: LD_INT 2
2277: PUSH
2278: LD_INT 3
2280: PUSH
2281: EMPTY
2282: LIST
2283: LIST
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: IN
2289: IFFALSE 2305
// points := points + 5 ;
2291: LD_ADDR_VAR 0 3
2295: PUSH
2296: LD_VAR 0 3
2300: PUSH
2301: LD_INT 5
2303: PLUS
2304: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_gatling_gun , ar_gun , ru_gatling_gun , ru_gun , us_gatling_gun , us_double_gun ] then
2305: LD_VAR 0 1
2309: PPUSH
2310: CALL_OW 264
2314: PUSH
2315: LD_INT 25
2317: PUSH
2318: LD_INT 27
2320: PUSH
2321: LD_INT 43
2323: PUSH
2324: LD_INT 44
2326: PUSH
2327: LD_INT 4
2329: PUSH
2330: LD_INT 5
2332: PUSH
2333: EMPTY
2334: LIST
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: LIST
2340: IN
2341: IFFALSE 2357
// points := points + 10 ;
2343: LD_ADDR_VAR 0 3
2347: PUSH
2348: LD_VAR 0 3
2352: PUSH
2353: LD_INT 10
2355: PLUS
2356: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher ] then
2357: LD_VAR 0 1
2361: PPUSH
2362: CALL_OW 264
2366: PUSH
2367: LD_INT 28
2369: PUSH
2370: LD_INT 45
2372: PUSH
2373: LD_INT 7
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: LIST
2380: IN
2381: IFFALSE 2397
// points := points + 20 ;
2383: LD_ADDR_VAR 0 3
2387: PUSH
2388: LD_VAR 0 3
2392: PUSH
2393: LD_INT 20
2395: PLUS
2396: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ru_heavy_gun , us_heavy_gun ] then
2397: LD_VAR 0 1
2401: PPUSH
2402: CALL_OW 264
2406: PUSH
2407: LD_INT 46
2409: PUSH
2410: LD_INT 6
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: IN
2417: IFFALSE 2433
// points := points + 25 ;
2419: LD_ADDR_VAR 0 3
2423: PUSH
2424: LD_VAR 0 3
2428: PUSH
2429: LD_INT 25
2431: PLUS
2432: ST_TO_ADDR
// if GetWeapon ( veh ) in [ us_laser , us_radar , ar_radar ] then
2433: LD_VAR 0 1
2437: PPUSH
2438: CALL_OW 264
2442: PUSH
2443: LD_INT 9
2445: PUSH
2446: LD_INT 11
2448: PUSH
2449: LD_INT 30
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: LIST
2456: IN
2457: IFFALSE 2473
// points := points + 30 ;
2459: LD_ADDR_VAR 0 3
2463: PUSH
2464: LD_VAR 0 3
2468: PUSH
2469: LD_INT 30
2471: PLUS
2472: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_selfpropelled_bomb , ru_time_lapser , ru_rocket , us_double_laser ] then
2473: LD_VAR 0 1
2477: PPUSH
2478: CALL_OW 264
2482: PUSH
2483: LD_INT 29
2485: PUSH
2486: LD_INT 49
2488: PUSH
2489: LD_INT 47
2491: PUSH
2492: LD_INT 10
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: LIST
2499: LIST
2500: IN
2501: IFFALSE 2517
// points := points + 50 ;
2503: LD_ADDR_VAR 0 3
2507: PUSH
2508: LD_VAR 0 3
2512: PUSH
2513: LD_INT 50
2515: PLUS
2516: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ru_siberium_rocket , us_siberium_rocket ] then
2517: LD_VAR 0 1
2521: PPUSH
2522: CALL_OW 264
2526: PUSH
2527: LD_INT 48
2529: PUSH
2530: LD_INT 8
2532: PUSH
2533: EMPTY
2534: LIST
2535: LIST
2536: IN
2537: IFFALSE 2553
// points := points + 100 ;
2539: LD_ADDR_VAR 0 3
2543: PUSH
2544: LD_VAR 0 3
2548: PUSH
2549: LD_INT 100
2551: PLUS
2552: ST_TO_ADDR
// result := points ;
2553: LD_ADDR_VAR 0 2
2557: PUSH
2558: LD_VAR 0 3
2562: ST_TO_ADDR
// end ; end_of_file
2563: LD_VAR 0 2
2567: RET
// every 0 0$01 trigger time do var filter , i , side , driver , un ;
2568: LD_EXP 5
2572: IFFALSE 3217
2574: GO 2576
2576: DISABLE
2577: LD_INT 0
2579: PPUSH
2580: PPUSH
2581: PPUSH
2582: PPUSH
2583: PPUSH
// begin enable ;
2584: ENABLE
// if tick < 36 then
2585: LD_OWVAR 1
2589: PUSH
2590: LD_INT 36
2592: LESS
2593: IFFALSE 2605
// SetAreaMapShow ( exit_area , 1 ) ;
2595: LD_INT 4
2597: PPUSH
2598: LD_INT 1
2600: PPUSH
2601: CALL_OW 424
// time := time - 0 0$01 ;
2605: LD_ADDR_EXP 5
2609: PUSH
2610: LD_EXP 5
2614: PUSH
2615: LD_INT 35
2617: MINUS
2618: ST_TO_ADDR
// if time = 0 0$00 then
2619: LD_EXP 5
2623: PUSH
2624: LD_INT 0
2626: EQUAL
2627: IFFALSE 2690
// if p1 > p2 and p1 > p3 and p1 > p4 and p1 > p5 then
2629: LD_EXP 7
2633: PUSH
2634: LD_EXP 8
2638: GREATER
2639: PUSH
2640: LD_EXP 7
2644: PUSH
2645: LD_EXP 9
2649: GREATER
2650: AND
2651: PUSH
2652: LD_EXP 7
2656: PUSH
2657: LD_EXP 10
2661: GREATER
2662: AND
2663: PUSH
2664: LD_EXP 7
2668: PUSH
2669: LD_EXP 11
2673: GREATER
2674: AND
2675: IFFALSE 2683
// YouWin else
2677: CALL_OW 103
2681: GO 2690
// YouLost (  ) ;
2683: LD_STRING 
2685: PPUSH
2686: CALL_OW 104
// filter := FilterUnitsInArea ( exit_area , [ f_type , unit_vehicle ] ) ;
2690: LD_ADDR_VAR 0 1
2694: PUSH
2695: LD_INT 4
2697: PPUSH
2698: LD_INT 21
2700: PUSH
2701: LD_INT 2
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: PPUSH
2708: CALL_OW 70
2712: ST_TO_ADDR
// if filter then
2713: LD_VAR 0 1
2717: IFFALSE 3007
// for i = 1 to filter do
2719: LD_ADDR_VAR 0 2
2723: PUSH
2724: DOUBLE
2725: LD_INT 1
2727: DEC
2728: ST_TO_ADDR
2729: LD_VAR 0 1
2733: PUSH
2734: FOR_TO
2735: IFFALSE 3005
// begin side := GetSide ( filter [ i ] ) ;
2737: LD_ADDR_VAR 0 3
2741: PUSH
2742: LD_VAR 0 1
2746: PUSH
2747: LD_VAR 0 2
2751: ARRAY
2752: PPUSH
2753: CALL_OW 255
2757: ST_TO_ADDR
// driver := IsDrivenBy ( filter [ i ] ) ;
2758: LD_ADDR_VAR 0 4
2762: PUSH
2763: LD_VAR 0 1
2767: PUSH
2768: LD_VAR 0 2
2772: ARRAY
2773: PPUSH
2774: CALL_OW 311
2778: ST_TO_ADDR
// un := filter [ i ] ;
2779: LD_ADDR_VAR 0 5
2783: PUSH
2784: LD_VAR 0 1
2788: PUSH
2789: LD_VAR 0 2
2793: ARRAY
2794: ST_TO_ADDR
// if IsInUnit ( driver ) then
2795: LD_VAR 0 4
2799: PPUSH
2800: CALL_OW 310
2804: IFFALSE 2815
// ComExitVehicle ( driver ) ;
2806: LD_VAR 0 4
2810: PPUSH
2811: CALL_OW 121
// Wait ( 0 0$0.3 ) ;
2815: LD_INT 10
2817: PPUSH
2818: CALL_OW 67
// RemoveUnit ( filter [ i ] ) ;
2822: LD_VAR 0 1
2826: PUSH
2827: LD_VAR 0 2
2831: ARRAY
2832: PPUSH
2833: CALL_OW 64
// case side of 1 :
2837: LD_VAR 0 3
2841: PUSH
2842: LD_INT 1
2844: DOUBLE
2845: EQUAL
2846: IFTRUE 2850
2848: GO 2874
2850: POP
// p1 := p1 + ScoreBoard ( un ) ; 2 :
2851: LD_ADDR_EXP 7
2855: PUSH
2856: LD_EXP 7
2860: PUSH
2861: LD_VAR 0 5
2865: PPUSH
2866: CALL 1953 0 1
2870: PLUS
2871: ST_TO_ADDR
2872: GO 3003
2874: LD_INT 2
2876: DOUBLE
2877: EQUAL
2878: IFTRUE 2882
2880: GO 2906
2882: POP
// p2 := p2 + ScoreBoard ( un ) ; 3 :
2883: LD_ADDR_EXP 8
2887: PUSH
2888: LD_EXP 8
2892: PUSH
2893: LD_VAR 0 5
2897: PPUSH
2898: CALL 1953 0 1
2902: PLUS
2903: ST_TO_ADDR
2904: GO 3003
2906: LD_INT 3
2908: DOUBLE
2909: EQUAL
2910: IFTRUE 2914
2912: GO 2938
2914: POP
// p3 := p3 + ScoreBoard ( un ) ; 4 :
2915: LD_ADDR_EXP 9
2919: PUSH
2920: LD_EXP 9
2924: PUSH
2925: LD_VAR 0 5
2929: PPUSH
2930: CALL 1953 0 1
2934: PLUS
2935: ST_TO_ADDR
2936: GO 3003
2938: LD_INT 4
2940: DOUBLE
2941: EQUAL
2942: IFTRUE 2946
2944: GO 2970
2946: POP
// p4 := p4 + ScoreBoard ( un ) ; 5 :
2947: LD_ADDR_EXP 10
2951: PUSH
2952: LD_EXP 10
2956: PUSH
2957: LD_VAR 0 5
2961: PPUSH
2962: CALL 1953 0 1
2966: PLUS
2967: ST_TO_ADDR
2968: GO 3003
2970: LD_INT 5
2972: DOUBLE
2973: EQUAL
2974: IFTRUE 2978
2976: GO 3002
2978: POP
// p5 := p5 + ScoreBoard ( un ) ; end ;
2979: LD_ADDR_EXP 11
2983: PUSH
2984: LD_EXP 11
2988: PUSH
2989: LD_VAR 0 5
2993: PPUSH
2994: CALL 1953 0 1
2998: PLUS
2999: ST_TO_ADDR
3000: GO 3003
3002: POP
// end ;
3003: GO 2734
3005: POP
3006: POP
// case players of 3 :
3007: LD_EXP 3
3011: PUSH
3012: LD_INT 3
3014: DOUBLE
3015: EQUAL
3016: IFTRUE 3020
3018: GO 3070
3020: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 ] ;
3021: LD_ADDR_OWVAR 47
3025: PUSH
3026: LD_STRING #tick
3028: PUSH
3029: LD_EXP 5
3033: PUSH
3034: LD_STRING #player1
3036: PUSH
3037: LD_EXP 7
3041: PUSH
3042: LD_STRING #player2
3044: PUSH
3045: LD_EXP 8
3049: PUSH
3050: LD_STRING #player3
3052: PUSH
3053: LD_EXP 9
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: LIST
3064: LIST
3065: LIST
3066: LIST
3067: ST_TO_ADDR
// end ; 4 :
3068: GO 3217
3070: LD_INT 4
3072: DOUBLE
3073: EQUAL
3074: IFTRUE 3078
3076: GO 3138
3078: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 , #player4 , p4 ] ;
3079: LD_ADDR_OWVAR 47
3083: PUSH
3084: LD_STRING #tick
3086: PUSH
3087: LD_EXP 5
3091: PUSH
3092: LD_STRING #player1
3094: PUSH
3095: LD_EXP 7
3099: PUSH
3100: LD_STRING #player2
3102: PUSH
3103: LD_EXP 8
3107: PUSH
3108: LD_STRING #player3
3110: PUSH
3111: LD_EXP 9
3115: PUSH
3116: LD_STRING #player4
3118: PUSH
3119: LD_EXP 10
3123: PUSH
3124: EMPTY
3125: LIST
3126: LIST
3127: LIST
3128: LIST
3129: LIST
3130: LIST
3131: LIST
3132: LIST
3133: LIST
3134: LIST
3135: ST_TO_ADDR
// end ; 5 :
3136: GO 3217
3138: LD_INT 5
3140: DOUBLE
3141: EQUAL
3142: IFTRUE 3146
3144: GO 3216
3146: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 , #player4 , p4 , #player5 , p5 ] ;
3147: LD_ADDR_OWVAR 47
3151: PUSH
3152: LD_STRING #tick
3154: PUSH
3155: LD_EXP 5
3159: PUSH
3160: LD_STRING #player1
3162: PUSH
3163: LD_EXP 7
3167: PUSH
3168: LD_STRING #player2
3170: PUSH
3171: LD_EXP 8
3175: PUSH
3176: LD_STRING #player3
3178: PUSH
3179: LD_EXP 9
3183: PUSH
3184: LD_STRING #player4
3186: PUSH
3187: LD_EXP 10
3191: PUSH
3192: LD_STRING #player5
3194: PUSH
3195: LD_EXP 11
3199: PUSH
3200: EMPTY
3201: LIST
3202: LIST
3203: LIST
3204: LIST
3205: LIST
3206: LIST
3207: LIST
3208: LIST
3209: LIST
3210: LIST
3211: LIST
3212: LIST
3213: ST_TO_ADDR
// end ; end ;
3214: GO 3217
3216: POP
// end ;
3217: PPOPN 5
3219: END
// every 0 0$05 trigger time do var chance , p ;
3220: LD_EXP 5
3224: IFFALSE 3371
3226: GO 3228
3228: DISABLE
3229: LD_INT 0
3231: PPUSH
3232: PPUSH
// begin enable ;
3233: ENABLE
// Wait ( Rand ( 0 0$01 , 0 0$06 ) ) ;
3234: LD_INT 35
3236: PPUSH
3237: LD_INT 210
3239: PPUSH
3240: CALL_OW 12
3244: PPUSH
3245: CALL_OW 67
// if FilterAllUnits ( [ f_type , unit_vehicle ] ) < veh_amount then
3249: LD_INT 21
3251: PUSH
3252: LD_INT 2
3254: PUSH
3255: EMPTY
3256: LIST
3257: LIST
3258: PPUSH
3259: CALL_OW 69
3263: PUSH
3264: LD_EXP 6
3268: LESS
3269: IFFALSE 3371
// begin SpawnCar ( false , veh_spawn ) ;
3271: LD_INT 0
3273: PPUSH
3274: LD_INT 5
3276: PPUSH
3277: CALL 946 0 2
// if sib_bomb and FilterAllUnits ( [ f_or , [ [ f_weapon , us_siberium_rocket ] , [ f_weapon , ru_siberium_rocket ] ] ] ) = 0 then
3281: LD_EXP 4
3285: PUSH
3286: LD_INT 2
3288: PUSH
3289: LD_INT 34
3291: PUSH
3292: LD_INT 8
3294: PUSH
3295: EMPTY
3296: LIST
3297: LIST
3298: PUSH
3299: LD_INT 34
3301: PUSH
3302: LD_INT 48
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: PUSH
3309: EMPTY
3310: LIST
3311: LIST
3312: PUSH
3313: EMPTY
3314: LIST
3315: LIST
3316: PPUSH
3317: CALL_OW 69
3321: PUSH
3322: LD_INT 0
3324: EQUAL
3325: AND
3326: IFFALSE 3371
// begin chance := 23 ;
3328: LD_ADDR_VAR 0 1
3332: PUSH
3333: LD_INT 23
3335: ST_TO_ADDR
// p := Rand ( 0 , 100 ) ;
3336: LD_ADDR_VAR 0 2
3340: PUSH
3341: LD_INT 0
3343: PPUSH
3344: LD_INT 100
3346: PPUSH
3347: CALL_OW 12
3351: ST_TO_ADDR
// if p < chance then
3352: LD_VAR 0 2
3356: PUSH
3357: LD_VAR 0 1
3361: LESS
3362: IFFALSE 3371
// SpawnSibRocket ( veh_spawn ) ;
3364: LD_INT 5
3366: PPUSH
3367: CALL 1784 0 1
// end ; end ; end ; end_of_file
3371: PPOPN 2
3373: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
3374: LD_INT 0
3376: PPUSH
3377: PPUSH
3378: PPUSH
3379: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
3380: LD_VAR 0 1
3384: PPUSH
3385: CALL_OW 264
3389: PUSH
3390: LD_EXP 85
3394: EQUAL
3395: IFFALSE 3467
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
3397: LD_INT 68
3399: PPUSH
3400: LD_VAR 0 1
3404: PPUSH
3405: CALL_OW 255
3409: PPUSH
3410: CALL_OW 321
3414: PUSH
3415: LD_INT 2
3417: EQUAL
3418: IFFALSE 3430
// eff := 70 else
3420: LD_ADDR_VAR 0 4
3424: PUSH
3425: LD_INT 70
3427: ST_TO_ADDR
3428: GO 3438
// eff := 30 ;
3430: LD_ADDR_VAR 0 4
3434: PUSH
3435: LD_INT 30
3437: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
3438: LD_VAR 0 1
3442: PPUSH
3443: CALL_OW 250
3447: PPUSH
3448: LD_VAR 0 1
3452: PPUSH
3453: CALL_OW 251
3457: PPUSH
3458: LD_VAR 0 4
3462: PPUSH
3463: CALL_OW 495
// end ; end ;
3467: LD_VAR 0 2
3471: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
3472: LD_INT 0
3474: PPUSH
// end ;
3475: LD_VAR 0 4
3479: RET
// export function SOS_Command ( cmd ) ; begin
3480: LD_INT 0
3482: PPUSH
// end ;
3483: LD_VAR 0 2
3487: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
3488: LD_INT 0
3490: PPUSH
// end ;
3491: LD_VAR 0 6
3495: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
3496: LD_INT 0
3498: PPUSH
3499: PPUSH
// if not vehicle or not factory then
3500: LD_VAR 0 1
3504: NOT
3505: PUSH
3506: LD_VAR 0 2
3510: NOT
3511: OR
3512: IFFALSE 3516
// exit ;
3514: GO 3747
// if factoryWaypoints >= factory then
3516: LD_EXP 12
3520: PUSH
3521: LD_VAR 0 2
3525: GREATEREQUAL
3526: IFFALSE 3747
// if factoryWaypoints [ factory ] then
3528: LD_EXP 12
3532: PUSH
3533: LD_VAR 0 2
3537: ARRAY
3538: IFFALSE 3747
// begin if GetControl ( vehicle ) = control_manual then
3540: LD_VAR 0 1
3544: PPUSH
3545: CALL_OW 263
3549: PUSH
3550: LD_INT 1
3552: EQUAL
3553: IFFALSE 3634
// begin driver := IsDrivenBy ( vehicle ) ;
3555: LD_ADDR_VAR 0 4
3559: PUSH
3560: LD_VAR 0 1
3564: PPUSH
3565: CALL_OW 311
3569: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
3570: LD_VAR 0 4
3574: PPUSH
3575: LD_EXP 12
3579: PUSH
3580: LD_VAR 0 2
3584: ARRAY
3585: PUSH
3586: LD_INT 1
3588: ARRAY
3589: PPUSH
3590: LD_EXP 12
3594: PUSH
3595: LD_VAR 0 2
3599: ARRAY
3600: PUSH
3601: LD_INT 2
3603: ARRAY
3604: PPUSH
3605: CALL_OW 171
// AddComExitVehicle ( driver ) ;
3609: LD_VAR 0 4
3613: PPUSH
3614: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
3618: LD_VAR 0 4
3622: PPUSH
3623: LD_VAR 0 2
3627: PPUSH
3628: CALL_OW 180
// end else
3632: GO 3747
// if GetControl ( vehicle ) = control_remote then
3634: LD_VAR 0 1
3638: PPUSH
3639: CALL_OW 263
3643: PUSH
3644: LD_INT 2
3646: EQUAL
3647: IFFALSE 3708
// begin wait ( 0 0$2 ) ;
3649: LD_INT 70
3651: PPUSH
3652: CALL_OW 67
// if Connect ( vehicle ) then
3656: LD_VAR 0 1
3660: PPUSH
3661: CALL 30468 0 1
3665: IFFALSE 3706
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
3667: LD_VAR 0 1
3671: PPUSH
3672: LD_EXP 12
3676: PUSH
3677: LD_VAR 0 2
3681: ARRAY
3682: PUSH
3683: LD_INT 1
3685: ARRAY
3686: PPUSH
3687: LD_EXP 12
3691: PUSH
3692: LD_VAR 0 2
3696: ARRAY
3697: PUSH
3698: LD_INT 2
3700: ARRAY
3701: PPUSH
3702: CALL_OW 171
// end else
3706: GO 3747
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 1 ] , factoryWaypoints [ factory ] [ 2 ] ) ;
3708: LD_VAR 0 1
3712: PPUSH
3713: LD_EXP 12
3717: PUSH
3718: LD_VAR 0 2
3722: ARRAY
3723: PUSH
3724: LD_INT 1
3726: ARRAY
3727: PPUSH
3728: LD_EXP 12
3732: PUSH
3733: LD_VAR 0 2
3737: ARRAY
3738: PUSH
3739: LD_INT 2
3741: ARRAY
3742: PPUSH
3743: CALL_OW 171
// end ; end ;
3747: LD_VAR 0 3
3751: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
3752: LD_INT 0
3754: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
3755: LD_VAR 0 1
3759: PUSH
3760: LD_INT 250
3762: EQUAL
3763: PUSH
3764: LD_VAR 0 2
3768: PPUSH
3769: CALL_OW 264
3773: PUSH
3774: LD_EXP 88
3778: EQUAL
3779: AND
3780: IFFALSE 3801
// MinerPlaceMine ( unit , x , y ) ;
3782: LD_VAR 0 2
3786: PPUSH
3787: LD_VAR 0 4
3791: PPUSH
3792: LD_VAR 0 5
3796: PPUSH
3797: CALL 6529 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
3801: LD_VAR 0 1
3805: PUSH
3806: LD_INT 251
3808: EQUAL
3809: PUSH
3810: LD_VAR 0 2
3814: PPUSH
3815: CALL_OW 264
3819: PUSH
3820: LD_EXP 88
3824: EQUAL
3825: AND
3826: IFFALSE 3847
// MinerDetonateMine ( unit , x , y ) ;
3828: LD_VAR 0 2
3832: PPUSH
3833: LD_VAR 0 4
3837: PPUSH
3838: LD_VAR 0 5
3842: PPUSH
3843: CALL 6806 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
3847: LD_VAR 0 1
3851: PUSH
3852: LD_INT 252
3854: EQUAL
3855: PUSH
3856: LD_VAR 0 2
3860: PPUSH
3861: CALL_OW 264
3865: PUSH
3866: LD_EXP 88
3870: EQUAL
3871: AND
3872: IFFALSE 3893
// MinerCreateMinefield ( unit , x , y ) ;
3874: LD_VAR 0 2
3878: PPUSH
3879: LD_VAR 0 4
3883: PPUSH
3884: LD_VAR 0 5
3888: PPUSH
3889: CALL 7223 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
3893: LD_VAR 0 1
3897: PUSH
3898: LD_INT 253
3900: EQUAL
3901: PUSH
3902: LD_VAR 0 2
3906: PPUSH
3907: CALL_OW 257
3911: PUSH
3912: LD_INT 5
3914: EQUAL
3915: AND
3916: IFFALSE 3937
// ComBinocular ( unit , x , y ) ;
3918: LD_VAR 0 2
3922: PPUSH
3923: LD_VAR 0 4
3927: PPUSH
3928: LD_VAR 0 5
3932: PPUSH
3933: CALL 7594 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
3937: LD_VAR 0 1
3941: PUSH
3942: LD_INT 254
3944: EQUAL
3945: PUSH
3946: LD_VAR 0 2
3950: PPUSH
3951: CALL_OW 264
3955: PUSH
3956: LD_EXP 83
3960: EQUAL
3961: AND
3962: PUSH
3963: LD_VAR 0 3
3967: PPUSH
3968: CALL_OW 263
3972: PUSH
3973: LD_INT 3
3975: EQUAL
3976: AND
3977: IFFALSE 3993
// HackDestroyVehicle ( unit , selectedUnit ) ;
3979: LD_VAR 0 2
3983: PPUSH
3984: LD_VAR 0 3
3988: PPUSH
3989: CALL 5889 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
3993: LD_VAR 0 1
3997: PUSH
3998: LD_INT 255
4000: EQUAL
4001: PUSH
4002: LD_VAR 0 2
4006: PPUSH
4007: CALL_OW 264
4011: PUSH
4012: LD_INT 14
4014: PUSH
4015: LD_INT 53
4017: PUSH
4018: EMPTY
4019: LIST
4020: LIST
4021: IN
4022: AND
4023: PUSH
4024: LD_VAR 0 4
4028: PPUSH
4029: LD_VAR 0 5
4033: PPUSH
4034: CALL_OW 488
4038: AND
4039: IFFALSE 4063
// CutTreeXYR ( unit , x , y , 12 ) ;
4041: LD_VAR 0 2
4045: PPUSH
4046: LD_VAR 0 4
4050: PPUSH
4051: LD_VAR 0 5
4055: PPUSH
4056: LD_INT 12
4058: PPUSH
4059: CALL 4455 0 4
// if cmd = 256 then
4063: LD_VAR 0 1
4067: PUSH
4068: LD_INT 256
4070: EQUAL
4071: IFFALSE 4092
// SetFactoryWaypoint ( unit , x , y ) ;
4073: LD_VAR 0 2
4077: PPUSH
4078: LD_VAR 0 4
4082: PPUSH
4083: LD_VAR 0 5
4087: PPUSH
4088: CALL 4097 0 3
// end ;
4092: LD_VAR 0 6
4096: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
4097: LD_INT 0
4099: PPUSH
4100: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
4101: LD_VAR 0 1
4105: NOT
4106: PUSH
4107: LD_VAR 0 2
4111: PPUSH
4112: LD_VAR 0 3
4116: PPUSH
4117: CALL_OW 488
4121: NOT
4122: OR
4123: PUSH
4124: LD_VAR 0 1
4128: PPUSH
4129: CALL_OW 266
4133: PUSH
4134: LD_INT 3
4136: NONEQUAL
4137: PUSH
4138: LD_VAR 0 1
4142: PPUSH
4143: CALL_OW 247
4147: PUSH
4148: LD_INT 1
4150: EQUAL
4151: NOT
4152: AND
4153: OR
4154: IFFALSE 4158
// exit ;
4156: GO 4307
// if GetType ( factory ) = unit_human then
4158: LD_VAR 0 1
4162: PPUSH
4163: CALL_OW 247
4167: PUSH
4168: LD_INT 1
4170: EQUAL
4171: IFFALSE 4188
// factory := IsInUnit ( factory ) ;
4173: LD_ADDR_VAR 0 1
4177: PUSH
4178: LD_VAR 0 1
4182: PPUSH
4183: CALL_OW 310
4187: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
4188: LD_VAR 0 1
4192: PPUSH
4193: CALL_OW 266
4197: PUSH
4198: LD_INT 3
4200: NONEQUAL
4201: IFFALSE 4205
// exit ;
4203: GO 4307
// if HexInfo ( x , y ) = factory then
4205: LD_VAR 0 2
4209: PPUSH
4210: LD_VAR 0 3
4214: PPUSH
4215: CALL_OW 428
4219: PUSH
4220: LD_VAR 0 1
4224: EQUAL
4225: IFFALSE 4252
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
4227: LD_ADDR_EXP 12
4231: PUSH
4232: LD_EXP 12
4236: PPUSH
4237: LD_VAR 0 1
4241: PPUSH
4242: LD_INT 0
4244: PPUSH
4245: CALL_OW 1
4249: ST_TO_ADDR
4250: GO 4303
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
4252: LD_ADDR_EXP 12
4256: PUSH
4257: LD_EXP 12
4261: PPUSH
4262: LD_VAR 0 1
4266: PPUSH
4267: LD_VAR 0 1
4271: PPUSH
4272: CALL_OW 255
4276: PUSH
4277: LD_VAR 0 1
4281: PUSH
4282: LD_VAR 0 2
4286: PUSH
4287: LD_VAR 0 3
4291: PUSH
4292: EMPTY
4293: LIST
4294: LIST
4295: LIST
4296: LIST
4297: PPUSH
4298: CALL_OW 1
4302: ST_TO_ADDR
// UpdateFactoryWaypoints ;
4303: CALL 4312 0 0
// end ;
4307: LD_VAR 0 4
4311: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
4312: LD_INT 0
4314: PPUSH
4315: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
4316: LD_STRING resetFactoryWaypoint();
4318: PPUSH
4319: CALL_OW 559
// if factoryWaypoints then
4323: LD_EXP 12
4327: IFFALSE 4450
// begin for i := 1 to factoryWaypoints do
4329: LD_ADDR_VAR 0 2
4333: PUSH
4334: DOUBLE
4335: LD_INT 1
4337: DEC
4338: ST_TO_ADDR
4339: LD_EXP 12
4343: PUSH
4344: FOR_TO
4345: IFFALSE 4448
// if factoryWaypoints [ i ] then
4347: LD_EXP 12
4351: PUSH
4352: LD_VAR 0 2
4356: ARRAY
4357: IFFALSE 4446
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
4359: LD_STRING setFactoryWaypointXY(
4361: PUSH
4362: LD_EXP 12
4366: PUSH
4367: LD_VAR 0 2
4371: ARRAY
4372: PUSH
4373: LD_INT 1
4375: ARRAY
4376: STR
4377: PUSH
4378: LD_STRING ,
4380: STR
4381: PUSH
4382: LD_EXP 12
4386: PUSH
4387: LD_VAR 0 2
4391: ARRAY
4392: PUSH
4393: LD_INT 2
4395: ARRAY
4396: STR
4397: PUSH
4398: LD_STRING ,
4400: STR
4401: PUSH
4402: LD_EXP 12
4406: PUSH
4407: LD_VAR 0 2
4411: ARRAY
4412: PUSH
4413: LD_INT 3
4415: ARRAY
4416: STR
4417: PUSH
4418: LD_STRING ,
4420: STR
4421: PUSH
4422: LD_EXP 12
4426: PUSH
4427: LD_VAR 0 2
4431: ARRAY
4432: PUSH
4433: LD_INT 4
4435: ARRAY
4436: STR
4437: PUSH
4438: LD_STRING )
4440: STR
4441: PPUSH
4442: CALL_OW 559
4446: GO 4344
4448: POP
4449: POP
// end ; end ;
4450: LD_VAR 0 1
4454: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
4455: LD_INT 0
4457: PPUSH
4458: PPUSH
4459: PPUSH
4460: PPUSH
4461: PPUSH
4462: PPUSH
4463: PPUSH
4464: PPUSH
4465: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
4466: LD_VAR 0 1
4470: NOT
4471: PUSH
4472: LD_VAR 0 2
4476: PPUSH
4477: LD_VAR 0 3
4481: PPUSH
4482: CALL_OW 488
4486: NOT
4487: OR
4488: PUSH
4489: LD_VAR 0 4
4493: NOT
4494: OR
4495: IFFALSE 4499
// exit ;
4497: GO 4839
// list := [ ] ;
4499: LD_ADDR_VAR 0 13
4503: PUSH
4504: EMPTY
4505: ST_TO_ADDR
// if x - r < 0 then
4506: LD_VAR 0 2
4510: PUSH
4511: LD_VAR 0 4
4515: MINUS
4516: PUSH
4517: LD_INT 0
4519: LESS
4520: IFFALSE 4532
// min_x := 0 else
4522: LD_ADDR_VAR 0 7
4526: PUSH
4527: LD_INT 0
4529: ST_TO_ADDR
4530: GO 4548
// min_x := x - r ;
4532: LD_ADDR_VAR 0 7
4536: PUSH
4537: LD_VAR 0 2
4541: PUSH
4542: LD_VAR 0 4
4546: MINUS
4547: ST_TO_ADDR
// if y - r < 0 then
4548: LD_VAR 0 3
4552: PUSH
4553: LD_VAR 0 4
4557: MINUS
4558: PUSH
4559: LD_INT 0
4561: LESS
4562: IFFALSE 4574
// min_y := 0 else
4564: LD_ADDR_VAR 0 8
4568: PUSH
4569: LD_INT 0
4571: ST_TO_ADDR
4572: GO 4590
// min_y := y - r ;
4574: LD_ADDR_VAR 0 8
4578: PUSH
4579: LD_VAR 0 3
4583: PUSH
4584: LD_VAR 0 4
4588: MINUS
4589: ST_TO_ADDR
// max_x := x + r ;
4590: LD_ADDR_VAR 0 9
4594: PUSH
4595: LD_VAR 0 2
4599: PUSH
4600: LD_VAR 0 4
4604: PLUS
4605: ST_TO_ADDR
// max_y := y + r ;
4606: LD_ADDR_VAR 0 10
4610: PUSH
4611: LD_VAR 0 3
4615: PUSH
4616: LD_VAR 0 4
4620: PLUS
4621: ST_TO_ADDR
// for _x = min_x to max_x do
4622: LD_ADDR_VAR 0 11
4626: PUSH
4627: DOUBLE
4628: LD_VAR 0 7
4632: DEC
4633: ST_TO_ADDR
4634: LD_VAR 0 9
4638: PUSH
4639: FOR_TO
4640: IFFALSE 4757
// for _y = min_y to max_y do
4642: LD_ADDR_VAR 0 12
4646: PUSH
4647: DOUBLE
4648: LD_VAR 0 8
4652: DEC
4653: ST_TO_ADDR
4654: LD_VAR 0 10
4658: PUSH
4659: FOR_TO
4660: IFFALSE 4753
// begin if not ValidHex ( _x , _y ) then
4662: LD_VAR 0 11
4666: PPUSH
4667: LD_VAR 0 12
4671: PPUSH
4672: CALL_OW 488
4676: NOT
4677: IFFALSE 4681
// continue ;
4679: GO 4659
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
4681: LD_VAR 0 11
4685: PPUSH
4686: LD_VAR 0 12
4690: PPUSH
4691: CALL_OW 351
4695: PUSH
4696: LD_VAR 0 11
4700: PPUSH
4701: LD_VAR 0 12
4705: PPUSH
4706: CALL_OW 554
4710: AND
4711: IFFALSE 4751
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
4713: LD_ADDR_VAR 0 13
4717: PUSH
4718: LD_VAR 0 13
4722: PPUSH
4723: LD_VAR 0 13
4727: PUSH
4728: LD_INT 1
4730: PLUS
4731: PPUSH
4732: LD_VAR 0 11
4736: PUSH
4737: LD_VAR 0 12
4741: PUSH
4742: EMPTY
4743: LIST
4744: LIST
4745: PPUSH
4746: CALL_OW 2
4750: ST_TO_ADDR
// end ;
4751: GO 4659
4753: POP
4754: POP
4755: GO 4639
4757: POP
4758: POP
// if not list then
4759: LD_VAR 0 13
4763: NOT
4764: IFFALSE 4768
// exit ;
4766: GO 4839
// for i in list do
4768: LD_ADDR_VAR 0 6
4772: PUSH
4773: LD_VAR 0 13
4777: PUSH
4778: FOR_IN
4779: IFFALSE 4837
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
4781: LD_VAR 0 1
4785: PPUSH
4786: LD_STRING M
4788: PUSH
4789: LD_VAR 0 6
4793: PUSH
4794: LD_INT 1
4796: ARRAY
4797: PUSH
4798: LD_VAR 0 6
4802: PUSH
4803: LD_INT 2
4805: ARRAY
4806: PUSH
4807: LD_INT 0
4809: PUSH
4810: LD_INT 0
4812: PUSH
4813: LD_INT 0
4815: PUSH
4816: LD_INT 0
4818: PUSH
4819: EMPTY
4820: LIST
4821: LIST
4822: LIST
4823: LIST
4824: LIST
4825: LIST
4826: LIST
4827: PUSH
4828: EMPTY
4829: LIST
4830: PPUSH
4831: CALL_OW 447
4835: GO 4778
4837: POP
4838: POP
// end ;
4839: LD_VAR 0 5
4843: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
4844: LD_EXP 13
4848: NOT
4849: IFFALSE 4899
4851: GO 4853
4853: DISABLE
// begin initHack := true ;
4854: LD_ADDR_EXP 13
4858: PUSH
4859: LD_INT 1
4861: ST_TO_ADDR
// hackTanks := [ ] ;
4862: LD_ADDR_EXP 14
4866: PUSH
4867: EMPTY
4868: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
4869: LD_ADDR_EXP 15
4873: PUSH
4874: EMPTY
4875: ST_TO_ADDR
// hackLimit := 3 ;
4876: LD_ADDR_EXP 16
4880: PUSH
4881: LD_INT 3
4883: ST_TO_ADDR
// hackDist := 12 ;
4884: LD_ADDR_EXP 17
4888: PUSH
4889: LD_INT 12
4891: ST_TO_ADDR
// hackCounter := [ ] ;
4892: LD_ADDR_EXP 18
4896: PUSH
4897: EMPTY
4898: ST_TO_ADDR
// end ;
4899: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
4900: LD_EXP 13
4904: PUSH
4905: LD_INT 34
4907: PUSH
4908: LD_EXP 83
4912: PUSH
4913: EMPTY
4914: LIST
4915: LIST
4916: PPUSH
4917: CALL_OW 69
4921: AND
4922: IFFALSE 5177
4924: GO 4926
4926: DISABLE
4927: LD_INT 0
4929: PPUSH
4930: PPUSH
// begin enable ;
4931: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
4932: LD_ADDR_VAR 0 1
4936: PUSH
4937: LD_INT 34
4939: PUSH
4940: LD_EXP 83
4944: PUSH
4945: EMPTY
4946: LIST
4947: LIST
4948: PPUSH
4949: CALL_OW 69
4953: PUSH
4954: FOR_IN
4955: IFFALSE 5175
// begin if not i in hackTanks then
4957: LD_VAR 0 1
4961: PUSH
4962: LD_EXP 14
4966: IN
4967: NOT
4968: IFFALSE 5051
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
4970: LD_ADDR_EXP 14
4974: PUSH
4975: LD_EXP 14
4979: PPUSH
4980: LD_EXP 14
4984: PUSH
4985: LD_INT 1
4987: PLUS
4988: PPUSH
4989: LD_VAR 0 1
4993: PPUSH
4994: CALL_OW 1
4998: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
4999: LD_ADDR_EXP 15
5003: PUSH
5004: LD_EXP 15
5008: PPUSH
5009: LD_EXP 15
5013: PUSH
5014: LD_INT 1
5016: PLUS
5017: PPUSH
5018: EMPTY
5019: PPUSH
5020: CALL_OW 1
5024: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
5025: LD_ADDR_EXP 18
5029: PUSH
5030: LD_EXP 18
5034: PPUSH
5035: LD_EXP 18
5039: PUSH
5040: LD_INT 1
5042: PLUS
5043: PPUSH
5044: EMPTY
5045: PPUSH
5046: CALL_OW 1
5050: ST_TO_ADDR
// end ; if not IsOk ( i ) then
5051: LD_VAR 0 1
5055: PPUSH
5056: CALL_OW 302
5060: NOT
5061: IFFALSE 5074
// begin HackUnlinkAll ( i ) ;
5063: LD_VAR 0 1
5067: PPUSH
5068: CALL 5180 0 1
// continue ;
5072: GO 4954
// end ; HackCheckCapturedStatus ( i ) ;
5074: LD_VAR 0 1
5078: PPUSH
5079: CALL 5623 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
5083: LD_ADDR_VAR 0 2
5087: PUSH
5088: LD_INT 81
5090: PUSH
5091: LD_VAR 0 1
5095: PPUSH
5096: CALL_OW 255
5100: PUSH
5101: EMPTY
5102: LIST
5103: LIST
5104: PUSH
5105: LD_INT 33
5107: PUSH
5108: LD_INT 3
5110: PUSH
5111: EMPTY
5112: LIST
5113: LIST
5114: PUSH
5115: LD_INT 91
5117: PUSH
5118: LD_VAR 0 1
5122: PUSH
5123: LD_EXP 17
5127: PUSH
5128: EMPTY
5129: LIST
5130: LIST
5131: LIST
5132: PUSH
5133: LD_INT 50
5135: PUSH
5136: EMPTY
5137: LIST
5138: PUSH
5139: EMPTY
5140: LIST
5141: LIST
5142: LIST
5143: LIST
5144: PPUSH
5145: CALL_OW 69
5149: ST_TO_ADDR
// if not tmp then
5150: LD_VAR 0 2
5154: NOT
5155: IFFALSE 5159
// continue ;
5157: GO 4954
// HackLink ( i , tmp ) ;
5159: LD_VAR 0 1
5163: PPUSH
5164: LD_VAR 0 2
5168: PPUSH
5169: CALL 5316 0 2
// end ;
5173: GO 4954
5175: POP
5176: POP
// end ;
5177: PPOPN 2
5179: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
5180: LD_INT 0
5182: PPUSH
5183: PPUSH
5184: PPUSH
// if not hack in hackTanks then
5185: LD_VAR 0 1
5189: PUSH
5190: LD_EXP 14
5194: IN
5195: NOT
5196: IFFALSE 5200
// exit ;
5198: GO 5311
// index := GetElementIndex ( hackTanks , hack ) ;
5200: LD_ADDR_VAR 0 4
5204: PUSH
5205: LD_EXP 14
5209: PPUSH
5210: LD_VAR 0 1
5214: PPUSH
5215: CALL 27282 0 2
5219: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
5220: LD_EXP 15
5224: PUSH
5225: LD_VAR 0 4
5229: ARRAY
5230: IFFALSE 5311
// begin for i in hackTanksCaptured [ index ] do
5232: LD_ADDR_VAR 0 3
5236: PUSH
5237: LD_EXP 15
5241: PUSH
5242: LD_VAR 0 4
5246: ARRAY
5247: PUSH
5248: FOR_IN
5249: IFFALSE 5275
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
5251: LD_VAR 0 3
5255: PUSH
5256: LD_INT 1
5258: ARRAY
5259: PPUSH
5260: LD_VAR 0 3
5264: PUSH
5265: LD_INT 2
5267: ARRAY
5268: PPUSH
5269: CALL_OW 235
5273: GO 5248
5275: POP
5276: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
5277: LD_ADDR_EXP 15
5281: PUSH
5282: LD_EXP 15
5286: PPUSH
5287: LD_VAR 0 4
5291: PPUSH
5292: EMPTY
5293: PPUSH
5294: CALL_OW 1
5298: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
5299: LD_VAR 0 1
5303: PPUSH
5304: LD_INT 0
5306: PPUSH
5307: CALL_OW 505
// end ; end ;
5311: LD_VAR 0 2
5315: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
5316: LD_INT 0
5318: PPUSH
5319: PPUSH
5320: PPUSH
// if not hack in hackTanks or not vehicles then
5321: LD_VAR 0 1
5325: PUSH
5326: LD_EXP 14
5330: IN
5331: NOT
5332: PUSH
5333: LD_VAR 0 2
5337: NOT
5338: OR
5339: IFFALSE 5343
// exit ;
5341: GO 5618
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
5343: LD_ADDR_VAR 0 2
5347: PUSH
5348: LD_VAR 0 1
5352: PPUSH
5353: LD_VAR 0 2
5357: PPUSH
5358: LD_INT 1
5360: PPUSH
5361: LD_INT 1
5363: PPUSH
5364: CALL 27932 0 4
5368: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
5369: LD_ADDR_VAR 0 5
5373: PUSH
5374: LD_EXP 14
5378: PPUSH
5379: LD_VAR 0 1
5383: PPUSH
5384: CALL 27282 0 2
5388: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
5389: LD_EXP 15
5393: PUSH
5394: LD_VAR 0 5
5398: ARRAY
5399: PUSH
5400: LD_EXP 16
5404: LESS
5405: IFFALSE 5594
// begin for i := 1 to vehicles do
5407: LD_ADDR_VAR 0 4
5411: PUSH
5412: DOUBLE
5413: LD_INT 1
5415: DEC
5416: ST_TO_ADDR
5417: LD_VAR 0 2
5421: PUSH
5422: FOR_TO
5423: IFFALSE 5592
// begin if hackTanksCaptured [ index ] = hackLimit then
5425: LD_EXP 15
5429: PUSH
5430: LD_VAR 0 5
5434: ARRAY
5435: PUSH
5436: LD_EXP 16
5440: EQUAL
5441: IFFALSE 5445
// break ;
5443: GO 5592
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
5445: LD_ADDR_EXP 18
5449: PUSH
5450: LD_EXP 18
5454: PPUSH
5455: LD_VAR 0 5
5459: PPUSH
5460: LD_EXP 18
5464: PUSH
5465: LD_VAR 0 5
5469: ARRAY
5470: PUSH
5471: LD_INT 1
5473: PLUS
5474: PPUSH
5475: CALL_OW 1
5479: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
5480: LD_ADDR_EXP 15
5484: PUSH
5485: LD_EXP 15
5489: PPUSH
5490: LD_VAR 0 5
5494: PUSH
5495: LD_EXP 15
5499: PUSH
5500: LD_VAR 0 5
5504: ARRAY
5505: PUSH
5506: LD_INT 1
5508: PLUS
5509: PUSH
5510: EMPTY
5511: LIST
5512: LIST
5513: PPUSH
5514: LD_VAR 0 2
5518: PUSH
5519: LD_VAR 0 4
5523: ARRAY
5524: PUSH
5525: LD_VAR 0 2
5529: PUSH
5530: LD_VAR 0 4
5534: ARRAY
5535: PPUSH
5536: CALL_OW 255
5540: PUSH
5541: EMPTY
5542: LIST
5543: LIST
5544: PPUSH
5545: CALL 27497 0 3
5549: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
5550: LD_VAR 0 2
5554: PUSH
5555: LD_VAR 0 4
5559: ARRAY
5560: PPUSH
5561: LD_VAR 0 1
5565: PPUSH
5566: CALL_OW 255
5570: PPUSH
5571: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
5575: LD_VAR 0 2
5579: PUSH
5580: LD_VAR 0 4
5584: ARRAY
5585: PPUSH
5586: CALL_OW 141
// end ;
5590: GO 5422
5592: POP
5593: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
5594: LD_VAR 0 1
5598: PPUSH
5599: LD_EXP 15
5603: PUSH
5604: LD_VAR 0 5
5608: ARRAY
5609: PUSH
5610: LD_INT 0
5612: PLUS
5613: PPUSH
5614: CALL_OW 505
// end ;
5618: LD_VAR 0 3
5622: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
5623: LD_INT 0
5625: PPUSH
5626: PPUSH
5627: PPUSH
5628: PPUSH
// if not hack in hackTanks then
5629: LD_VAR 0 1
5633: PUSH
5634: LD_EXP 14
5638: IN
5639: NOT
5640: IFFALSE 5644
// exit ;
5642: GO 5884
// index := GetElementIndex ( hackTanks , hack ) ;
5644: LD_ADDR_VAR 0 4
5648: PUSH
5649: LD_EXP 14
5653: PPUSH
5654: LD_VAR 0 1
5658: PPUSH
5659: CALL 27282 0 2
5663: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
5664: LD_ADDR_VAR 0 3
5668: PUSH
5669: DOUBLE
5670: LD_EXP 15
5674: PUSH
5675: LD_VAR 0 4
5679: ARRAY
5680: INC
5681: ST_TO_ADDR
5682: LD_INT 1
5684: PUSH
5685: FOR_DOWNTO
5686: IFFALSE 5858
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
5688: LD_ADDR_VAR 0 5
5692: PUSH
5693: LD_EXP 15
5697: PUSH
5698: LD_VAR 0 4
5702: ARRAY
5703: PUSH
5704: LD_VAR 0 3
5708: ARRAY
5709: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
5710: LD_VAR 0 5
5714: PUSH
5715: LD_INT 1
5717: ARRAY
5718: PPUSH
5719: CALL_OW 302
5723: NOT
5724: PUSH
5725: LD_VAR 0 5
5729: PUSH
5730: LD_INT 1
5732: ARRAY
5733: PPUSH
5734: CALL_OW 255
5738: PUSH
5739: LD_VAR 0 1
5743: PPUSH
5744: CALL_OW 255
5748: NONEQUAL
5749: OR
5750: IFFALSE 5856
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
5752: LD_VAR 0 5
5756: PUSH
5757: LD_INT 1
5759: ARRAY
5760: PPUSH
5761: CALL_OW 305
5765: PUSH
5766: LD_VAR 0 5
5770: PUSH
5771: LD_INT 1
5773: ARRAY
5774: PPUSH
5775: CALL_OW 255
5779: PUSH
5780: LD_VAR 0 1
5784: PPUSH
5785: CALL_OW 255
5789: EQUAL
5790: AND
5791: IFFALSE 5815
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
5793: LD_VAR 0 5
5797: PUSH
5798: LD_INT 1
5800: ARRAY
5801: PPUSH
5802: LD_VAR 0 5
5806: PUSH
5807: LD_INT 2
5809: ARRAY
5810: PPUSH
5811: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
5815: LD_ADDR_EXP 15
5819: PUSH
5820: LD_EXP 15
5824: PPUSH
5825: LD_VAR 0 4
5829: PPUSH
5830: LD_EXP 15
5834: PUSH
5835: LD_VAR 0 4
5839: ARRAY
5840: PPUSH
5841: LD_VAR 0 3
5845: PPUSH
5846: CALL_OW 3
5850: PPUSH
5851: CALL_OW 1
5855: ST_TO_ADDR
// end ; end ;
5856: GO 5685
5858: POP
5859: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
5860: LD_VAR 0 1
5864: PPUSH
5865: LD_EXP 15
5869: PUSH
5870: LD_VAR 0 4
5874: ARRAY
5875: PUSH
5876: LD_INT 0
5878: PLUS
5879: PPUSH
5880: CALL_OW 505
// end ;
5884: LD_VAR 0 2
5888: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
5889: LD_INT 0
5891: PPUSH
5892: PPUSH
5893: PPUSH
5894: PPUSH
// if not hack in hackTanks then
5895: LD_VAR 0 1
5899: PUSH
5900: LD_EXP 14
5904: IN
5905: NOT
5906: IFFALSE 5910
// exit ;
5908: GO 5995
// index := GetElementIndex ( hackTanks , hack ) ;
5910: LD_ADDR_VAR 0 5
5914: PUSH
5915: LD_EXP 14
5919: PPUSH
5920: LD_VAR 0 1
5924: PPUSH
5925: CALL 27282 0 2
5929: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
5930: LD_ADDR_VAR 0 4
5934: PUSH
5935: DOUBLE
5936: LD_INT 1
5938: DEC
5939: ST_TO_ADDR
5940: LD_EXP 15
5944: PUSH
5945: LD_VAR 0 5
5949: ARRAY
5950: PUSH
5951: FOR_TO
5952: IFFALSE 5993
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
5954: LD_EXP 15
5958: PUSH
5959: LD_VAR 0 5
5963: ARRAY
5964: PUSH
5965: LD_VAR 0 4
5969: ARRAY
5970: PUSH
5971: LD_INT 1
5973: ARRAY
5974: PUSH
5975: LD_VAR 0 2
5979: EQUAL
5980: IFFALSE 5991
// KillUnit ( vehicle ) ;
5982: LD_VAR 0 2
5986: PPUSH
5987: CALL_OW 66
5991: GO 5951
5993: POP
5994: POP
// end ;
5995: LD_VAR 0 3
5999: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
6000: LD_EXP 19
6004: NOT
6005: IFFALSE 6040
6007: GO 6009
6009: DISABLE
// begin initMiner := true ;
6010: LD_ADDR_EXP 19
6014: PUSH
6015: LD_INT 1
6017: ST_TO_ADDR
// minersList := [ ] ;
6018: LD_ADDR_EXP 20
6022: PUSH
6023: EMPTY
6024: ST_TO_ADDR
// minerMinesList := [ ] ;
6025: LD_ADDR_EXP 21
6029: PUSH
6030: EMPTY
6031: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
6032: LD_ADDR_EXP 22
6036: PUSH
6037: LD_INT 5
6039: ST_TO_ADDR
// end ;
6040: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
6041: LD_EXP 19
6045: PUSH
6046: LD_INT 34
6048: PUSH
6049: LD_EXP 88
6053: PUSH
6054: EMPTY
6055: LIST
6056: LIST
6057: PPUSH
6058: CALL_OW 69
6062: AND
6063: IFFALSE 6526
6065: GO 6067
6067: DISABLE
6068: LD_INT 0
6070: PPUSH
6071: PPUSH
6072: PPUSH
6073: PPUSH
// begin enable ;
6074: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
6075: LD_ADDR_VAR 0 1
6079: PUSH
6080: LD_INT 34
6082: PUSH
6083: LD_EXP 88
6087: PUSH
6088: EMPTY
6089: LIST
6090: LIST
6091: PPUSH
6092: CALL_OW 69
6096: PUSH
6097: FOR_IN
6098: IFFALSE 6170
// begin if not i in minersList then
6100: LD_VAR 0 1
6104: PUSH
6105: LD_EXP 20
6109: IN
6110: NOT
6111: IFFALSE 6168
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
6113: LD_ADDR_EXP 20
6117: PUSH
6118: LD_EXP 20
6122: PPUSH
6123: LD_EXP 20
6127: PUSH
6128: LD_INT 1
6130: PLUS
6131: PPUSH
6132: LD_VAR 0 1
6136: PPUSH
6137: CALL_OW 1
6141: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
6142: LD_ADDR_EXP 21
6146: PUSH
6147: LD_EXP 21
6151: PPUSH
6152: LD_EXP 21
6156: PUSH
6157: LD_INT 1
6159: PLUS
6160: PPUSH
6161: EMPTY
6162: PPUSH
6163: CALL_OW 1
6167: ST_TO_ADDR
// end end ;
6168: GO 6097
6170: POP
6171: POP
// for i := minerMinesList downto 1 do
6172: LD_ADDR_VAR 0 1
6176: PUSH
6177: DOUBLE
6178: LD_EXP 21
6182: INC
6183: ST_TO_ADDR
6184: LD_INT 1
6186: PUSH
6187: FOR_DOWNTO
6188: IFFALSE 6524
// begin if IsLive ( minersList [ i ] ) then
6190: LD_EXP 20
6194: PUSH
6195: LD_VAR 0 1
6199: ARRAY
6200: PPUSH
6201: CALL_OW 300
6205: IFFALSE 6233
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
6207: LD_EXP 20
6211: PUSH
6212: LD_VAR 0 1
6216: ARRAY
6217: PPUSH
6218: LD_EXP 21
6222: PUSH
6223: LD_VAR 0 1
6227: ARRAY
6228: PPUSH
6229: CALL_OW 505
// if not minerMinesList [ i ] then
6233: LD_EXP 21
6237: PUSH
6238: LD_VAR 0 1
6242: ARRAY
6243: NOT
6244: IFFALSE 6248
// continue ;
6246: GO 6187
// for j := minerMinesList [ i ] downto 1 do
6248: LD_ADDR_VAR 0 2
6252: PUSH
6253: DOUBLE
6254: LD_EXP 21
6258: PUSH
6259: LD_VAR 0 1
6263: ARRAY
6264: INC
6265: ST_TO_ADDR
6266: LD_INT 1
6268: PUSH
6269: FOR_DOWNTO
6270: IFFALSE 6520
// begin side := GetSide ( minersList [ i ] ) ;
6272: LD_ADDR_VAR 0 3
6276: PUSH
6277: LD_EXP 20
6281: PUSH
6282: LD_VAR 0 1
6286: ARRAY
6287: PPUSH
6288: CALL_OW 255
6292: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
6293: LD_ADDR_VAR 0 4
6297: PUSH
6298: LD_EXP 21
6302: PUSH
6303: LD_VAR 0 1
6307: ARRAY
6308: PUSH
6309: LD_VAR 0 2
6313: ARRAY
6314: PUSH
6315: LD_INT 1
6317: ARRAY
6318: PPUSH
6319: LD_EXP 21
6323: PUSH
6324: LD_VAR 0 1
6328: ARRAY
6329: PUSH
6330: LD_VAR 0 2
6334: ARRAY
6335: PUSH
6336: LD_INT 2
6338: ARRAY
6339: PPUSH
6340: CALL_OW 428
6344: ST_TO_ADDR
// if not tmp then
6345: LD_VAR 0 4
6349: NOT
6350: IFFALSE 6354
// continue ;
6352: GO 6269
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
6354: LD_VAR 0 4
6358: PUSH
6359: LD_INT 81
6361: PUSH
6362: LD_VAR 0 3
6366: PUSH
6367: EMPTY
6368: LIST
6369: LIST
6370: PPUSH
6371: CALL_OW 69
6375: IN
6376: PUSH
6377: LD_EXP 21
6381: PUSH
6382: LD_VAR 0 1
6386: ARRAY
6387: PUSH
6388: LD_VAR 0 2
6392: ARRAY
6393: PUSH
6394: LD_INT 1
6396: ARRAY
6397: PPUSH
6398: LD_EXP 21
6402: PUSH
6403: LD_VAR 0 1
6407: ARRAY
6408: PUSH
6409: LD_VAR 0 2
6413: ARRAY
6414: PUSH
6415: LD_INT 2
6417: ARRAY
6418: PPUSH
6419: CALL_OW 458
6423: AND
6424: IFFALSE 6518
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
6426: LD_EXP 21
6430: PUSH
6431: LD_VAR 0 1
6435: ARRAY
6436: PUSH
6437: LD_VAR 0 2
6441: ARRAY
6442: PUSH
6443: LD_INT 1
6445: ARRAY
6446: PPUSH
6447: LD_EXP 21
6451: PUSH
6452: LD_VAR 0 1
6456: ARRAY
6457: PUSH
6458: LD_VAR 0 2
6462: ARRAY
6463: PUSH
6464: LD_INT 2
6466: ARRAY
6467: PPUSH
6468: LD_VAR 0 3
6472: PPUSH
6473: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
6477: LD_ADDR_EXP 21
6481: PUSH
6482: LD_EXP 21
6486: PPUSH
6487: LD_VAR 0 1
6491: PPUSH
6492: LD_EXP 21
6496: PUSH
6497: LD_VAR 0 1
6501: ARRAY
6502: PPUSH
6503: LD_VAR 0 2
6507: PPUSH
6508: CALL_OW 3
6512: PPUSH
6513: CALL_OW 1
6517: ST_TO_ADDR
// end ; end ;
6518: GO 6269
6520: POP
6521: POP
// end ;
6522: GO 6187
6524: POP
6525: POP
// end ;
6526: PPOPN 4
6528: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
6529: LD_INT 0
6531: PPUSH
6532: PPUSH
// result := false ;
6533: LD_ADDR_VAR 0 4
6537: PUSH
6538: LD_INT 0
6540: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
6541: LD_VAR 0 1
6545: PPUSH
6546: CALL_OW 264
6550: PUSH
6551: LD_EXP 88
6555: EQUAL
6556: NOT
6557: IFFALSE 6561
// exit ;
6559: GO 6801
// index := GetElementIndex ( minersList , unit ) ;
6561: LD_ADDR_VAR 0 5
6565: PUSH
6566: LD_EXP 20
6570: PPUSH
6571: LD_VAR 0 1
6575: PPUSH
6576: CALL 27282 0 2
6580: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
6581: LD_EXP 21
6585: PUSH
6586: LD_VAR 0 5
6590: ARRAY
6591: PUSH
6592: LD_EXP 22
6596: GREATEREQUAL
6597: IFFALSE 6601
// exit ;
6599: GO 6801
// ComMoveXY ( unit , x , y ) ;
6601: LD_VAR 0 1
6605: PPUSH
6606: LD_VAR 0 2
6610: PPUSH
6611: LD_VAR 0 3
6615: PPUSH
6616: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6620: LD_INT 35
6622: PPUSH
6623: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
6627: LD_VAR 0 1
6631: PPUSH
6632: LD_VAR 0 2
6636: PPUSH
6637: LD_VAR 0 3
6641: PPUSH
6642: CALL 58054 0 3
6646: NOT
6647: PUSH
6648: LD_VAR 0 1
6652: PPUSH
6653: CALL_OW 314
6657: AND
6658: IFFALSE 6662
// exit ;
6660: GO 6801
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
6662: LD_VAR 0 2
6666: PPUSH
6667: LD_VAR 0 3
6671: PPUSH
6672: CALL_OW 428
6676: PUSH
6677: LD_VAR 0 1
6681: EQUAL
6682: PUSH
6683: LD_VAR 0 1
6687: PPUSH
6688: CALL_OW 314
6692: NOT
6693: AND
6694: IFFALSE 6620
// PlaySoundXY ( x , y , PlantMine ) ;
6696: LD_VAR 0 2
6700: PPUSH
6701: LD_VAR 0 3
6705: PPUSH
6706: LD_STRING PlantMine
6708: PPUSH
6709: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
6713: LD_VAR 0 2
6717: PPUSH
6718: LD_VAR 0 3
6722: PPUSH
6723: LD_VAR 0 1
6727: PPUSH
6728: CALL_OW 255
6732: PPUSH
6733: LD_INT 0
6735: PPUSH
6736: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
6740: LD_ADDR_EXP 21
6744: PUSH
6745: LD_EXP 21
6749: PPUSH
6750: LD_VAR 0 5
6754: PUSH
6755: LD_EXP 21
6759: PUSH
6760: LD_VAR 0 5
6764: ARRAY
6765: PUSH
6766: LD_INT 1
6768: PLUS
6769: PUSH
6770: EMPTY
6771: LIST
6772: LIST
6773: PPUSH
6774: LD_VAR 0 2
6778: PUSH
6779: LD_VAR 0 3
6783: PUSH
6784: EMPTY
6785: LIST
6786: LIST
6787: PPUSH
6788: CALL 27497 0 3
6792: ST_TO_ADDR
// result := true ;
6793: LD_ADDR_VAR 0 4
6797: PUSH
6798: LD_INT 1
6800: ST_TO_ADDR
// end ;
6801: LD_VAR 0 4
6805: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
6806: LD_INT 0
6808: PPUSH
6809: PPUSH
6810: PPUSH
// if not unit in minersList then
6811: LD_VAR 0 1
6815: PUSH
6816: LD_EXP 20
6820: IN
6821: NOT
6822: IFFALSE 6826
// exit ;
6824: GO 7218
// index := GetElementIndex ( minersList , unit ) ;
6826: LD_ADDR_VAR 0 6
6830: PUSH
6831: LD_EXP 20
6835: PPUSH
6836: LD_VAR 0 1
6840: PPUSH
6841: CALL 27282 0 2
6845: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
6846: LD_ADDR_VAR 0 5
6850: PUSH
6851: DOUBLE
6852: LD_EXP 21
6856: PUSH
6857: LD_VAR 0 6
6861: ARRAY
6862: INC
6863: ST_TO_ADDR
6864: LD_INT 1
6866: PUSH
6867: FOR_DOWNTO
6868: IFFALSE 7029
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
6870: LD_EXP 21
6874: PUSH
6875: LD_VAR 0 6
6879: ARRAY
6880: PUSH
6881: LD_VAR 0 5
6885: ARRAY
6886: PUSH
6887: LD_INT 1
6889: ARRAY
6890: PUSH
6891: LD_VAR 0 2
6895: EQUAL
6896: PUSH
6897: LD_EXP 21
6901: PUSH
6902: LD_VAR 0 6
6906: ARRAY
6907: PUSH
6908: LD_VAR 0 5
6912: ARRAY
6913: PUSH
6914: LD_INT 2
6916: ARRAY
6917: PUSH
6918: LD_VAR 0 3
6922: EQUAL
6923: AND
6924: IFFALSE 7027
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
6926: LD_EXP 21
6930: PUSH
6931: LD_VAR 0 6
6935: ARRAY
6936: PUSH
6937: LD_VAR 0 5
6941: ARRAY
6942: PUSH
6943: LD_INT 1
6945: ARRAY
6946: PPUSH
6947: LD_EXP 21
6951: PUSH
6952: LD_VAR 0 6
6956: ARRAY
6957: PUSH
6958: LD_VAR 0 5
6962: ARRAY
6963: PUSH
6964: LD_INT 2
6966: ARRAY
6967: PPUSH
6968: LD_VAR 0 1
6972: PPUSH
6973: CALL_OW 255
6977: PPUSH
6978: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
6982: LD_ADDR_EXP 21
6986: PUSH
6987: LD_EXP 21
6991: PPUSH
6992: LD_VAR 0 6
6996: PPUSH
6997: LD_EXP 21
7001: PUSH
7002: LD_VAR 0 6
7006: ARRAY
7007: PPUSH
7008: LD_VAR 0 5
7012: PPUSH
7013: CALL_OW 3
7017: PPUSH
7018: CALL_OW 1
7022: ST_TO_ADDR
// exit ;
7023: POP
7024: POP
7025: GO 7218
// end ; end ;
7027: GO 6867
7029: POP
7030: POP
// for i := minerMinesList [ index ] downto 1 do
7031: LD_ADDR_VAR 0 5
7035: PUSH
7036: DOUBLE
7037: LD_EXP 21
7041: PUSH
7042: LD_VAR 0 6
7046: ARRAY
7047: INC
7048: ST_TO_ADDR
7049: LD_INT 1
7051: PUSH
7052: FOR_DOWNTO
7053: IFFALSE 7216
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
7055: LD_EXP 21
7059: PUSH
7060: LD_VAR 0 6
7064: ARRAY
7065: PUSH
7066: LD_VAR 0 5
7070: ARRAY
7071: PUSH
7072: LD_INT 1
7074: ARRAY
7075: PPUSH
7076: LD_EXP 21
7080: PUSH
7081: LD_VAR 0 6
7085: ARRAY
7086: PUSH
7087: LD_VAR 0 5
7091: ARRAY
7092: PUSH
7093: LD_INT 2
7095: ARRAY
7096: PPUSH
7097: LD_VAR 0 2
7101: PPUSH
7102: LD_VAR 0 3
7106: PPUSH
7107: CALL_OW 298
7111: PUSH
7112: LD_INT 6
7114: LESS
7115: IFFALSE 7214
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
7117: LD_EXP 21
7121: PUSH
7122: LD_VAR 0 6
7126: ARRAY
7127: PUSH
7128: LD_VAR 0 5
7132: ARRAY
7133: PUSH
7134: LD_INT 1
7136: ARRAY
7137: PPUSH
7138: LD_EXP 21
7142: PUSH
7143: LD_VAR 0 6
7147: ARRAY
7148: PUSH
7149: LD_VAR 0 5
7153: ARRAY
7154: PUSH
7155: LD_INT 2
7157: ARRAY
7158: PPUSH
7159: LD_VAR 0 1
7163: PPUSH
7164: CALL_OW 255
7168: PPUSH
7169: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
7173: LD_ADDR_EXP 21
7177: PUSH
7178: LD_EXP 21
7182: PPUSH
7183: LD_VAR 0 6
7187: PPUSH
7188: LD_EXP 21
7192: PUSH
7193: LD_VAR 0 6
7197: ARRAY
7198: PPUSH
7199: LD_VAR 0 5
7203: PPUSH
7204: CALL_OW 3
7208: PPUSH
7209: CALL_OW 1
7213: ST_TO_ADDR
// end ; end ;
7214: GO 7052
7216: POP
7217: POP
// end ;
7218: LD_VAR 0 4
7222: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
7223: LD_INT 0
7225: PPUSH
7226: PPUSH
7227: PPUSH
7228: PPUSH
7229: PPUSH
7230: PPUSH
7231: PPUSH
7232: PPUSH
7233: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
7234: LD_VAR 0 1
7238: PPUSH
7239: CALL_OW 264
7243: PUSH
7244: LD_EXP 88
7248: EQUAL
7249: NOT
7250: PUSH
7251: LD_VAR 0 1
7255: PUSH
7256: LD_EXP 20
7260: IN
7261: NOT
7262: OR
7263: IFFALSE 7267
// exit ;
7265: GO 7589
// index := GetElementIndex ( minersList , unit ) ;
7267: LD_ADDR_VAR 0 6
7271: PUSH
7272: LD_EXP 20
7276: PPUSH
7277: LD_VAR 0 1
7281: PPUSH
7282: CALL 27282 0 2
7286: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
7287: LD_ADDR_VAR 0 8
7291: PUSH
7292: LD_EXP 22
7296: PUSH
7297: LD_EXP 21
7301: PUSH
7302: LD_VAR 0 6
7306: ARRAY
7307: MINUS
7308: ST_TO_ADDR
// if not minesFreeAmount then
7309: LD_VAR 0 8
7313: NOT
7314: IFFALSE 7318
// exit ;
7316: GO 7589
// tmp := [ ] ;
7318: LD_ADDR_VAR 0 7
7322: PUSH
7323: EMPTY
7324: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
7325: LD_ADDR_VAR 0 5
7329: PUSH
7330: DOUBLE
7331: LD_INT 1
7333: DEC
7334: ST_TO_ADDR
7335: LD_VAR 0 8
7339: PUSH
7340: FOR_TO
7341: IFFALSE 7536
// begin _d := rand ( 0 , 5 ) ;
7343: LD_ADDR_VAR 0 11
7347: PUSH
7348: LD_INT 0
7350: PPUSH
7351: LD_INT 5
7353: PPUSH
7354: CALL_OW 12
7358: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
7359: LD_ADDR_VAR 0 12
7363: PUSH
7364: LD_INT 2
7366: PPUSH
7367: LD_INT 6
7369: PPUSH
7370: CALL_OW 12
7374: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
7375: LD_ADDR_VAR 0 9
7379: PUSH
7380: LD_VAR 0 2
7384: PPUSH
7385: LD_VAR 0 11
7389: PPUSH
7390: LD_VAR 0 12
7394: PPUSH
7395: CALL_OW 272
7399: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
7400: LD_ADDR_VAR 0 10
7404: PUSH
7405: LD_VAR 0 3
7409: PPUSH
7410: LD_VAR 0 11
7414: PPUSH
7415: LD_VAR 0 12
7419: PPUSH
7420: CALL_OW 273
7424: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
7425: LD_VAR 0 9
7429: PPUSH
7430: LD_VAR 0 10
7434: PPUSH
7435: CALL_OW 488
7439: PUSH
7440: LD_VAR 0 9
7444: PUSH
7445: LD_VAR 0 10
7449: PUSH
7450: EMPTY
7451: LIST
7452: LIST
7453: PUSH
7454: LD_VAR 0 7
7458: IN
7459: NOT
7460: AND
7461: PUSH
7462: LD_VAR 0 9
7466: PPUSH
7467: LD_VAR 0 10
7471: PPUSH
7472: CALL_OW 458
7476: NOT
7477: AND
7478: IFFALSE 7520
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
7480: LD_ADDR_VAR 0 7
7484: PUSH
7485: LD_VAR 0 7
7489: PPUSH
7490: LD_VAR 0 7
7494: PUSH
7495: LD_INT 1
7497: PLUS
7498: PPUSH
7499: LD_VAR 0 9
7503: PUSH
7504: LD_VAR 0 10
7508: PUSH
7509: EMPTY
7510: LIST
7511: LIST
7512: PPUSH
7513: CALL_OW 1
7517: ST_TO_ADDR
7518: GO 7534
// i := i - 1 ;
7520: LD_ADDR_VAR 0 5
7524: PUSH
7525: LD_VAR 0 5
7529: PUSH
7530: LD_INT 1
7532: MINUS
7533: ST_TO_ADDR
// end ;
7534: GO 7340
7536: POP
7537: POP
// for i in tmp do
7538: LD_ADDR_VAR 0 5
7542: PUSH
7543: LD_VAR 0 7
7547: PUSH
7548: FOR_IN
7549: IFFALSE 7587
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
7551: LD_VAR 0 1
7555: PPUSH
7556: LD_VAR 0 5
7560: PUSH
7561: LD_INT 1
7563: ARRAY
7564: PPUSH
7565: LD_VAR 0 5
7569: PUSH
7570: LD_INT 2
7572: ARRAY
7573: PPUSH
7574: CALL 6529 0 3
7578: NOT
7579: IFFALSE 7585
// exit ;
7581: POP
7582: POP
7583: GO 7589
7585: GO 7548
7587: POP
7588: POP
// end ;
7589: LD_VAR 0 4
7593: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
7594: LD_INT 0
7596: PPUSH
7597: PPUSH
7598: PPUSH
7599: PPUSH
7600: PPUSH
7601: PPUSH
7602: PPUSH
// if not GetClass ( unit ) = class_sniper then
7603: LD_VAR 0 1
7607: PPUSH
7608: CALL_OW 257
7612: PUSH
7613: LD_INT 5
7615: EQUAL
7616: NOT
7617: IFFALSE 7621
// exit ;
7619: GO 8009
// dist := 8 ;
7621: LD_ADDR_VAR 0 5
7625: PUSH
7626: LD_INT 8
7628: ST_TO_ADDR
// viewRange := 12 ;
7629: LD_ADDR_VAR 0 7
7633: PUSH
7634: LD_INT 12
7636: ST_TO_ADDR
// side := GetSide ( unit ) ;
7637: LD_ADDR_VAR 0 6
7641: PUSH
7642: LD_VAR 0 1
7646: PPUSH
7647: CALL_OW 255
7651: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
7652: LD_INT 61
7654: PPUSH
7655: LD_VAR 0 6
7659: PPUSH
7660: CALL_OW 321
7664: PUSH
7665: LD_INT 2
7667: EQUAL
7668: IFFALSE 7678
// viewRange := 16 ;
7670: LD_ADDR_VAR 0 7
7674: PUSH
7675: LD_INT 16
7677: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
7678: LD_VAR 0 1
7682: PPUSH
7683: LD_VAR 0 2
7687: PPUSH
7688: LD_VAR 0 3
7692: PPUSH
7693: CALL_OW 297
7697: PUSH
7698: LD_VAR 0 5
7702: GREATER
7703: IFFALSE 7782
// begin ComMoveXY ( unit , x , y ) ;
7705: LD_VAR 0 1
7709: PPUSH
7710: LD_VAR 0 2
7714: PPUSH
7715: LD_VAR 0 3
7719: PPUSH
7720: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7724: LD_INT 35
7726: PPUSH
7727: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
7731: LD_VAR 0 1
7735: PPUSH
7736: LD_VAR 0 2
7740: PPUSH
7741: LD_VAR 0 3
7745: PPUSH
7746: CALL 58054 0 3
7750: NOT
7751: IFFALSE 7755
// exit ;
7753: GO 8009
// until GetDistUnitXY ( unit , x , y ) < dist ;
7755: LD_VAR 0 1
7759: PPUSH
7760: LD_VAR 0 2
7764: PPUSH
7765: LD_VAR 0 3
7769: PPUSH
7770: CALL_OW 297
7774: PUSH
7775: LD_VAR 0 5
7779: LESS
7780: IFFALSE 7724
// end ; ComTurnXY ( unit , x , y ) ;
7782: LD_VAR 0 1
7786: PPUSH
7787: LD_VAR 0 2
7791: PPUSH
7792: LD_VAR 0 3
7796: PPUSH
7797: CALL_OW 118
// wait ( 5 ) ;
7801: LD_INT 5
7803: PPUSH
7804: CALL_OW 67
// _d := GetDir ( unit ) ;
7808: LD_ADDR_VAR 0 10
7812: PUSH
7813: LD_VAR 0 1
7817: PPUSH
7818: CALL_OW 254
7822: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
7823: LD_ADDR_VAR 0 8
7827: PUSH
7828: LD_VAR 0 1
7832: PPUSH
7833: CALL_OW 250
7837: PPUSH
7838: LD_VAR 0 10
7842: PPUSH
7843: LD_VAR 0 5
7847: PPUSH
7848: CALL_OW 272
7852: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
7853: LD_ADDR_VAR 0 9
7857: PUSH
7858: LD_VAR 0 1
7862: PPUSH
7863: CALL_OW 251
7867: PPUSH
7868: LD_VAR 0 10
7872: PPUSH
7873: LD_VAR 0 5
7877: PPUSH
7878: CALL_OW 273
7882: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
7883: LD_VAR 0 8
7887: PPUSH
7888: LD_VAR 0 9
7892: PPUSH
7893: CALL_OW 488
7897: NOT
7898: IFFALSE 7902
// exit ;
7900: GO 8009
// ComAnimCustom ( unit , 1 ) ;
7902: LD_VAR 0 1
7906: PPUSH
7907: LD_INT 1
7909: PPUSH
7910: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
7914: LD_VAR 0 8
7918: PPUSH
7919: LD_VAR 0 9
7923: PPUSH
7924: LD_VAR 0 6
7928: PPUSH
7929: LD_VAR 0 7
7933: PPUSH
7934: CALL_OW 330
// repeat wait ( 1 ) ;
7938: LD_INT 1
7940: PPUSH
7941: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
7945: LD_VAR 0 1
7949: PPUSH
7950: CALL_OW 316
7954: PUSH
7955: LD_VAR 0 1
7959: PPUSH
7960: CALL_OW 314
7964: OR
7965: PUSH
7966: LD_VAR 0 1
7970: PPUSH
7971: CALL_OW 302
7975: NOT
7976: OR
7977: PUSH
7978: LD_VAR 0 1
7982: PPUSH
7983: CALL_OW 301
7987: OR
7988: IFFALSE 7938
// RemoveSeeing ( _x , _y , side ) ;
7990: LD_VAR 0 8
7994: PPUSH
7995: LD_VAR 0 9
7999: PPUSH
8000: LD_VAR 0 6
8004: PPUSH
8005: CALL_OW 331
// end ; end_of_file
8009: LD_VAR 0 4
8013: RET
// every 0 0$1 do
8014: GO 8016
8016: DISABLE
// begin enable ;
8017: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
8018: LD_STRING updateTimer(
8020: PUSH
8021: LD_OWVAR 1
8025: STR
8026: PUSH
8027: LD_STRING );
8029: STR
8030: PPUSH
8031: CALL_OW 559
// end ;
8035: END
// on MapStart ( p ) do begin if streamModeActive then
8036: LD_EXP 23
8040: IFFALSE 8049
// DefineStreamItems ( true ) ;
8042: LD_INT 1
8044: PPUSH
8045: CALL 9697 0 1
// UpdateFactoryWaypoints ( ) ;
8049: CALL 4312 0 0
// end ;
8053: PPOPN 1
8055: END
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
8056: LD_INT 0
8058: PPUSH
// if p2 = 100 then
8059: LD_VAR 0 2
8063: PUSH
8064: LD_INT 100
8066: EQUAL
8067: IFFALSE 9070
// begin if not StreamModeActive then
8069: LD_EXP 23
8073: NOT
8074: IFFALSE 8084
// StreamModeActive := true ;
8076: LD_ADDR_EXP 23
8080: PUSH
8081: LD_INT 1
8083: ST_TO_ADDR
// if p3 = 0 then
8084: LD_VAR 0 3
8088: PUSH
8089: LD_INT 0
8091: EQUAL
8092: IFFALSE 8098
// InitStreamMode ;
8094: CALL 9233 0 0
// if p3 = 1 then
8098: LD_VAR 0 3
8102: PUSH
8103: LD_INT 1
8105: EQUAL
8106: IFFALSE 8116
// sRocket := true ;
8108: LD_ADDR_EXP 28
8112: PUSH
8113: LD_INT 1
8115: ST_TO_ADDR
// if p3 = 2 then
8116: LD_VAR 0 3
8120: PUSH
8121: LD_INT 2
8123: EQUAL
8124: IFFALSE 8134
// sSpeed := true ;
8126: LD_ADDR_EXP 27
8130: PUSH
8131: LD_INT 1
8133: ST_TO_ADDR
// if p3 = 3 then
8134: LD_VAR 0 3
8138: PUSH
8139: LD_INT 3
8141: EQUAL
8142: IFFALSE 8152
// sEngine := true ;
8144: LD_ADDR_EXP 29
8148: PUSH
8149: LD_INT 1
8151: ST_TO_ADDR
// if p3 = 4 then
8152: LD_VAR 0 3
8156: PUSH
8157: LD_INT 4
8159: EQUAL
8160: IFFALSE 8170
// sSpec := true ;
8162: LD_ADDR_EXP 26
8166: PUSH
8167: LD_INT 1
8169: ST_TO_ADDR
// if p3 = 5 then
8170: LD_VAR 0 3
8174: PUSH
8175: LD_INT 5
8177: EQUAL
8178: IFFALSE 8188
// sLevel := true ;
8180: LD_ADDR_EXP 30
8184: PUSH
8185: LD_INT 1
8187: ST_TO_ADDR
// if p3 = 6 then
8188: LD_VAR 0 3
8192: PUSH
8193: LD_INT 6
8195: EQUAL
8196: IFFALSE 8206
// sArmoury := true ;
8198: LD_ADDR_EXP 31
8202: PUSH
8203: LD_INT 1
8205: ST_TO_ADDR
// if p3 = 7 then
8206: LD_VAR 0 3
8210: PUSH
8211: LD_INT 7
8213: EQUAL
8214: IFFALSE 8224
// sRadar := true ;
8216: LD_ADDR_EXP 32
8220: PUSH
8221: LD_INT 1
8223: ST_TO_ADDR
// if p3 = 8 then
8224: LD_VAR 0 3
8228: PUSH
8229: LD_INT 8
8231: EQUAL
8232: IFFALSE 8242
// sBunker := true ;
8234: LD_ADDR_EXP 33
8238: PUSH
8239: LD_INT 1
8241: ST_TO_ADDR
// if p3 = 9 then
8242: LD_VAR 0 3
8246: PUSH
8247: LD_INT 9
8249: EQUAL
8250: IFFALSE 8260
// sHack := true ;
8252: LD_ADDR_EXP 34
8256: PUSH
8257: LD_INT 1
8259: ST_TO_ADDR
// if p3 = 10 then
8260: LD_VAR 0 3
8264: PUSH
8265: LD_INT 10
8267: EQUAL
8268: IFFALSE 8278
// sFire := true ;
8270: LD_ADDR_EXP 35
8274: PUSH
8275: LD_INT 1
8277: ST_TO_ADDR
// if p3 = 11 then
8278: LD_VAR 0 3
8282: PUSH
8283: LD_INT 11
8285: EQUAL
8286: IFFALSE 8296
// sRefresh := true ;
8288: LD_ADDR_EXP 36
8292: PUSH
8293: LD_INT 1
8295: ST_TO_ADDR
// if p3 = 12 then
8296: LD_VAR 0 3
8300: PUSH
8301: LD_INT 12
8303: EQUAL
8304: IFFALSE 8314
// sExp := true ;
8306: LD_ADDR_EXP 37
8310: PUSH
8311: LD_INT 1
8313: ST_TO_ADDR
// if p3 = 13 then
8314: LD_VAR 0 3
8318: PUSH
8319: LD_INT 13
8321: EQUAL
8322: IFFALSE 8332
// sDepot := true ;
8324: LD_ADDR_EXP 38
8328: PUSH
8329: LD_INT 1
8331: ST_TO_ADDR
// if p3 = 14 then
8332: LD_VAR 0 3
8336: PUSH
8337: LD_INT 14
8339: EQUAL
8340: IFFALSE 8350
// sFlag := true ;
8342: LD_ADDR_EXP 39
8346: PUSH
8347: LD_INT 1
8349: ST_TO_ADDR
// if p3 = 15 then
8350: LD_VAR 0 3
8354: PUSH
8355: LD_INT 15
8357: EQUAL
8358: IFFALSE 8368
// sKamikadze := true ;
8360: LD_ADDR_EXP 47
8364: PUSH
8365: LD_INT 1
8367: ST_TO_ADDR
// if p3 = 16 then
8368: LD_VAR 0 3
8372: PUSH
8373: LD_INT 16
8375: EQUAL
8376: IFFALSE 8386
// sTroll := true ;
8378: LD_ADDR_EXP 48
8382: PUSH
8383: LD_INT 1
8385: ST_TO_ADDR
// if p3 = 17 then
8386: LD_VAR 0 3
8390: PUSH
8391: LD_INT 17
8393: EQUAL
8394: IFFALSE 8404
// sSlow := true ;
8396: LD_ADDR_EXP 49
8400: PUSH
8401: LD_INT 1
8403: ST_TO_ADDR
// if p3 = 18 then
8404: LD_VAR 0 3
8408: PUSH
8409: LD_INT 18
8411: EQUAL
8412: IFFALSE 8422
// sLack := true ;
8414: LD_ADDR_EXP 50
8418: PUSH
8419: LD_INT 1
8421: ST_TO_ADDR
// if p3 = 19 then
8422: LD_VAR 0 3
8426: PUSH
8427: LD_INT 19
8429: EQUAL
8430: IFFALSE 8440
// sTank := true ;
8432: LD_ADDR_EXP 52
8436: PUSH
8437: LD_INT 1
8439: ST_TO_ADDR
// if p3 = 20 then
8440: LD_VAR 0 3
8444: PUSH
8445: LD_INT 20
8447: EQUAL
8448: IFFALSE 8458
// sRemote := true ;
8450: LD_ADDR_EXP 53
8454: PUSH
8455: LD_INT 1
8457: ST_TO_ADDR
// if p3 = 21 then
8458: LD_VAR 0 3
8462: PUSH
8463: LD_INT 21
8465: EQUAL
8466: IFFALSE 8476
// sPowell := true ;
8468: LD_ADDR_EXP 54
8472: PUSH
8473: LD_INT 1
8475: ST_TO_ADDR
// if p3 = 22 then
8476: LD_VAR 0 3
8480: PUSH
8481: LD_INT 22
8483: EQUAL
8484: IFFALSE 8494
// sTeleport := true ;
8486: LD_ADDR_EXP 57
8490: PUSH
8491: LD_INT 1
8493: ST_TO_ADDR
// if p3 = 23 then
8494: LD_VAR 0 3
8498: PUSH
8499: LD_INT 23
8501: EQUAL
8502: IFFALSE 8512
// sOilTower := true ;
8504: LD_ADDR_EXP 59
8508: PUSH
8509: LD_INT 1
8511: ST_TO_ADDR
// if p3 = 24 then
8512: LD_VAR 0 3
8516: PUSH
8517: LD_INT 24
8519: EQUAL
8520: IFFALSE 8530
// sShovel := true ;
8522: LD_ADDR_EXP 60
8526: PUSH
8527: LD_INT 1
8529: ST_TO_ADDR
// if p3 = 25 then
8530: LD_VAR 0 3
8534: PUSH
8535: LD_INT 25
8537: EQUAL
8538: IFFALSE 8548
// sSheik := true ;
8540: LD_ADDR_EXP 61
8544: PUSH
8545: LD_INT 1
8547: ST_TO_ADDR
// if p3 = 26 then
8548: LD_VAR 0 3
8552: PUSH
8553: LD_INT 26
8555: EQUAL
8556: IFFALSE 8566
// sEarthquake := true ;
8558: LD_ADDR_EXP 63
8562: PUSH
8563: LD_INT 1
8565: ST_TO_ADDR
// if p3 = 27 then
8566: LD_VAR 0 3
8570: PUSH
8571: LD_INT 27
8573: EQUAL
8574: IFFALSE 8584
// sAI := true ;
8576: LD_ADDR_EXP 64
8580: PUSH
8581: LD_INT 1
8583: ST_TO_ADDR
// if p3 = 28 then
8584: LD_VAR 0 3
8588: PUSH
8589: LD_INT 28
8591: EQUAL
8592: IFFALSE 8602
// sCargo := true ;
8594: LD_ADDR_EXP 67
8598: PUSH
8599: LD_INT 1
8601: ST_TO_ADDR
// if p3 = 29 then
8602: LD_VAR 0 3
8606: PUSH
8607: LD_INT 29
8609: EQUAL
8610: IFFALSE 8620
// sDLaser := true ;
8612: LD_ADDR_EXP 68
8616: PUSH
8617: LD_INT 1
8619: ST_TO_ADDR
// if p3 = 30 then
8620: LD_VAR 0 3
8624: PUSH
8625: LD_INT 30
8627: EQUAL
8628: IFFALSE 8638
// sExchange := true ;
8630: LD_ADDR_EXP 69
8634: PUSH
8635: LD_INT 1
8637: ST_TO_ADDR
// if p3 = 31 then
8638: LD_VAR 0 3
8642: PUSH
8643: LD_INT 31
8645: EQUAL
8646: IFFALSE 8656
// sFac := true ;
8648: LD_ADDR_EXP 70
8652: PUSH
8653: LD_INT 1
8655: ST_TO_ADDR
// if p3 = 32 then
8656: LD_VAR 0 3
8660: PUSH
8661: LD_INT 32
8663: EQUAL
8664: IFFALSE 8674
// sPower := true ;
8666: LD_ADDR_EXP 71
8670: PUSH
8671: LD_INT 1
8673: ST_TO_ADDR
// if p3 = 33 then
8674: LD_VAR 0 3
8678: PUSH
8679: LD_INT 33
8681: EQUAL
8682: IFFALSE 8692
// sRandom := true ;
8684: LD_ADDR_EXP 72
8688: PUSH
8689: LD_INT 1
8691: ST_TO_ADDR
// if p3 = 34 then
8692: LD_VAR 0 3
8696: PUSH
8697: LD_INT 34
8699: EQUAL
8700: IFFALSE 8710
// sShield := true ;
8702: LD_ADDR_EXP 73
8706: PUSH
8707: LD_INT 1
8709: ST_TO_ADDR
// if p3 = 35 then
8710: LD_VAR 0 3
8714: PUSH
8715: LD_INT 35
8717: EQUAL
8718: IFFALSE 8728
// sTime := true ;
8720: LD_ADDR_EXP 74
8724: PUSH
8725: LD_INT 1
8727: ST_TO_ADDR
// if p3 = 36 then
8728: LD_VAR 0 3
8732: PUSH
8733: LD_INT 36
8735: EQUAL
8736: IFFALSE 8746
// sTools := true ;
8738: LD_ADDR_EXP 75
8742: PUSH
8743: LD_INT 1
8745: ST_TO_ADDR
// if p3 = 101 then
8746: LD_VAR 0 3
8750: PUSH
8751: LD_INT 101
8753: EQUAL
8754: IFFALSE 8764
// sSold := true ;
8756: LD_ADDR_EXP 40
8760: PUSH
8761: LD_INT 1
8763: ST_TO_ADDR
// if p3 = 102 then
8764: LD_VAR 0 3
8768: PUSH
8769: LD_INT 102
8771: EQUAL
8772: IFFALSE 8782
// sDiff := true ;
8774: LD_ADDR_EXP 41
8778: PUSH
8779: LD_INT 1
8781: ST_TO_ADDR
// if p3 = 103 then
8782: LD_VAR 0 3
8786: PUSH
8787: LD_INT 103
8789: EQUAL
8790: IFFALSE 8800
// sFog := true ;
8792: LD_ADDR_EXP 44
8796: PUSH
8797: LD_INT 1
8799: ST_TO_ADDR
// if p3 = 104 then
8800: LD_VAR 0 3
8804: PUSH
8805: LD_INT 104
8807: EQUAL
8808: IFFALSE 8818
// sReset := true ;
8810: LD_ADDR_EXP 45
8814: PUSH
8815: LD_INT 1
8817: ST_TO_ADDR
// if p3 = 105 then
8818: LD_VAR 0 3
8822: PUSH
8823: LD_INT 105
8825: EQUAL
8826: IFFALSE 8836
// sSun := true ;
8828: LD_ADDR_EXP 46
8832: PUSH
8833: LD_INT 1
8835: ST_TO_ADDR
// if p3 = 106 then
8836: LD_VAR 0 3
8840: PUSH
8841: LD_INT 106
8843: EQUAL
8844: IFFALSE 8854
// sTiger := true ;
8846: LD_ADDR_EXP 42
8850: PUSH
8851: LD_INT 1
8853: ST_TO_ADDR
// if p3 = 107 then
8854: LD_VAR 0 3
8858: PUSH
8859: LD_INT 107
8861: EQUAL
8862: IFFALSE 8872
// sBomb := true ;
8864: LD_ADDR_EXP 43
8868: PUSH
8869: LD_INT 1
8871: ST_TO_ADDR
// if p3 = 108 then
8872: LD_VAR 0 3
8876: PUSH
8877: LD_INT 108
8879: EQUAL
8880: IFFALSE 8890
// sWound := true ;
8882: LD_ADDR_EXP 51
8886: PUSH
8887: LD_INT 1
8889: ST_TO_ADDR
// if p3 = 109 then
8890: LD_VAR 0 3
8894: PUSH
8895: LD_INT 109
8897: EQUAL
8898: IFFALSE 8908
// sBetray := true ;
8900: LD_ADDR_EXP 55
8904: PUSH
8905: LD_INT 1
8907: ST_TO_ADDR
// if p3 = 110 then
8908: LD_VAR 0 3
8912: PUSH
8913: LD_INT 110
8915: EQUAL
8916: IFFALSE 8926
// sContamin := true ;
8918: LD_ADDR_EXP 56
8922: PUSH
8923: LD_INT 1
8925: ST_TO_ADDR
// if p3 = 111 then
8926: LD_VAR 0 3
8930: PUSH
8931: LD_INT 111
8933: EQUAL
8934: IFFALSE 8944
// sOil := true ;
8936: LD_ADDR_EXP 58
8940: PUSH
8941: LD_INT 1
8943: ST_TO_ADDR
// if p3 = 112 then
8944: LD_VAR 0 3
8948: PUSH
8949: LD_INT 112
8951: EQUAL
8952: IFFALSE 8962
// sStu := true ;
8954: LD_ADDR_EXP 62
8958: PUSH
8959: LD_INT 1
8961: ST_TO_ADDR
// if p3 = 113 then
8962: LD_VAR 0 3
8966: PUSH
8967: LD_INT 113
8969: EQUAL
8970: IFFALSE 8980
// sBazooka := true ;
8972: LD_ADDR_EXP 65
8976: PUSH
8977: LD_INT 1
8979: ST_TO_ADDR
// if p3 = 114 then
8980: LD_VAR 0 3
8984: PUSH
8985: LD_INT 114
8987: EQUAL
8988: IFFALSE 8998
// sMortar := true ;
8990: LD_ADDR_EXP 66
8994: PUSH
8995: LD_INT 1
8997: ST_TO_ADDR
// if p3 = 115 then
8998: LD_VAR 0 3
9002: PUSH
9003: LD_INT 115
9005: EQUAL
9006: IFFALSE 9016
// sRanger := true ;
9008: LD_ADDR_EXP 76
9012: PUSH
9013: LD_INT 1
9015: ST_TO_ADDR
// if p3 = 116 then
9016: LD_VAR 0 3
9020: PUSH
9021: LD_INT 116
9023: EQUAL
9024: IFFALSE 9034
// sComputer := true ;
9026: LD_ADDR_EXP 77
9030: PUSH
9031: LD_INT 1
9033: ST_TO_ADDR
// if p3 = 117 then
9034: LD_VAR 0 3
9038: PUSH
9039: LD_INT 117
9041: EQUAL
9042: IFFALSE 9052
// s30 := true ;
9044: LD_ADDR_EXP 78
9048: PUSH
9049: LD_INT 1
9051: ST_TO_ADDR
// if p3 = 118 then
9052: LD_VAR 0 3
9056: PUSH
9057: LD_INT 118
9059: EQUAL
9060: IFFALSE 9070
// s60 := true ;
9062: LD_ADDR_EXP 79
9066: PUSH
9067: LD_INT 1
9069: ST_TO_ADDR
// end ; if p2 = 101 then
9070: LD_VAR 0 2
9074: PUSH
9075: LD_INT 101
9077: EQUAL
9078: IFFALSE 9206
// begin case p3 of 1 :
9080: LD_VAR 0 3
9084: PUSH
9085: LD_INT 1
9087: DOUBLE
9088: EQUAL
9089: IFTRUE 9093
9091: GO 9100
9093: POP
// hHackUnlimitedResources ; 2 :
9094: CALL 21304 0 0
9098: GO 9206
9100: LD_INT 2
9102: DOUBLE
9103: EQUAL
9104: IFTRUE 9108
9106: GO 9115
9108: POP
// hHackSetLevel10 ; 3 :
9109: CALL 21437 0 0
9113: GO 9206
9115: LD_INT 3
9117: DOUBLE
9118: EQUAL
9119: IFTRUE 9123
9121: GO 9130
9123: POP
// hHackSetLevel10YourUnits ; 4 :
9124: CALL 21522 0 0
9128: GO 9206
9130: LD_INT 4
9132: DOUBLE
9133: EQUAL
9134: IFTRUE 9138
9136: GO 9145
9138: POP
// hHackInvincible ; 5 :
9139: CALL 21970 0 0
9143: GO 9206
9145: LD_INT 5
9147: DOUBLE
9148: EQUAL
9149: IFTRUE 9153
9151: GO 9160
9153: POP
// hHackInvisible ; 6 :
9154: CALL 22081 0 0
9158: GO 9206
9160: LD_INT 6
9162: DOUBLE
9163: EQUAL
9164: IFTRUE 9168
9166: GO 9175
9168: POP
// hHackChangeYourSide ; 7 :
9169: CALL 22138 0 0
9173: GO 9206
9175: LD_INT 7
9177: DOUBLE
9178: EQUAL
9179: IFTRUE 9183
9181: GO 9190
9183: POP
// hHackChangeUnitSide ; 8 :
9184: CALL 22180 0 0
9188: GO 9206
9190: LD_INT 8
9192: DOUBLE
9193: EQUAL
9194: IFTRUE 9198
9196: GO 9205
9198: POP
// hHackFog ; end ;
9199: CALL 22281 0 0
9203: GO 9206
9205: POP
// end ; end ;
9206: LD_VAR 0 7
9210: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
9211: GO 9213
9213: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
9214: LD_STRING initStreamRollete();
9216: PPUSH
9217: CALL_OW 559
// InitStreamMode ;
9221: CALL 9233 0 0
// DefineStreamItems ( false ) ;
9225: LD_INT 0
9227: PPUSH
9228: CALL 9697 0 1
// end ;
9232: END
// function InitStreamMode ; begin
9233: LD_INT 0
9235: PPUSH
// streamModeActive := false ;
9236: LD_ADDR_EXP 23
9240: PUSH
9241: LD_INT 0
9243: ST_TO_ADDR
// normalCounter := 36 ;
9244: LD_ADDR_EXP 24
9248: PUSH
9249: LD_INT 36
9251: ST_TO_ADDR
// hardcoreCounter := 18 ;
9252: LD_ADDR_EXP 25
9256: PUSH
9257: LD_INT 18
9259: ST_TO_ADDR
// sRocket := false ;
9260: LD_ADDR_EXP 28
9264: PUSH
9265: LD_INT 0
9267: ST_TO_ADDR
// sSpeed := false ;
9268: LD_ADDR_EXP 27
9272: PUSH
9273: LD_INT 0
9275: ST_TO_ADDR
// sEngine := false ;
9276: LD_ADDR_EXP 29
9280: PUSH
9281: LD_INT 0
9283: ST_TO_ADDR
// sSpec := false ;
9284: LD_ADDR_EXP 26
9288: PUSH
9289: LD_INT 0
9291: ST_TO_ADDR
// sLevel := false ;
9292: LD_ADDR_EXP 30
9296: PUSH
9297: LD_INT 0
9299: ST_TO_ADDR
// sArmoury := false ;
9300: LD_ADDR_EXP 31
9304: PUSH
9305: LD_INT 0
9307: ST_TO_ADDR
// sRadar := false ;
9308: LD_ADDR_EXP 32
9312: PUSH
9313: LD_INT 0
9315: ST_TO_ADDR
// sBunker := false ;
9316: LD_ADDR_EXP 33
9320: PUSH
9321: LD_INT 0
9323: ST_TO_ADDR
// sHack := false ;
9324: LD_ADDR_EXP 34
9328: PUSH
9329: LD_INT 0
9331: ST_TO_ADDR
// sFire := false ;
9332: LD_ADDR_EXP 35
9336: PUSH
9337: LD_INT 0
9339: ST_TO_ADDR
// sRefresh := false ;
9340: LD_ADDR_EXP 36
9344: PUSH
9345: LD_INT 0
9347: ST_TO_ADDR
// sExp := false ;
9348: LD_ADDR_EXP 37
9352: PUSH
9353: LD_INT 0
9355: ST_TO_ADDR
// sDepot := false ;
9356: LD_ADDR_EXP 38
9360: PUSH
9361: LD_INT 0
9363: ST_TO_ADDR
// sFlag := false ;
9364: LD_ADDR_EXP 39
9368: PUSH
9369: LD_INT 0
9371: ST_TO_ADDR
// sKamikadze := false ;
9372: LD_ADDR_EXP 47
9376: PUSH
9377: LD_INT 0
9379: ST_TO_ADDR
// sTroll := false ;
9380: LD_ADDR_EXP 48
9384: PUSH
9385: LD_INT 0
9387: ST_TO_ADDR
// sSlow := false ;
9388: LD_ADDR_EXP 49
9392: PUSH
9393: LD_INT 0
9395: ST_TO_ADDR
// sLack := false ;
9396: LD_ADDR_EXP 50
9400: PUSH
9401: LD_INT 0
9403: ST_TO_ADDR
// sTank := false ;
9404: LD_ADDR_EXP 52
9408: PUSH
9409: LD_INT 0
9411: ST_TO_ADDR
// sRemote := false ;
9412: LD_ADDR_EXP 53
9416: PUSH
9417: LD_INT 0
9419: ST_TO_ADDR
// sPowell := false ;
9420: LD_ADDR_EXP 54
9424: PUSH
9425: LD_INT 0
9427: ST_TO_ADDR
// sTeleport := false ;
9428: LD_ADDR_EXP 57
9432: PUSH
9433: LD_INT 0
9435: ST_TO_ADDR
// sOilTower := false ;
9436: LD_ADDR_EXP 59
9440: PUSH
9441: LD_INT 0
9443: ST_TO_ADDR
// sShovel := false ;
9444: LD_ADDR_EXP 60
9448: PUSH
9449: LD_INT 0
9451: ST_TO_ADDR
// sSheik := false ;
9452: LD_ADDR_EXP 61
9456: PUSH
9457: LD_INT 0
9459: ST_TO_ADDR
// sEarthquake := false ;
9460: LD_ADDR_EXP 63
9464: PUSH
9465: LD_INT 0
9467: ST_TO_ADDR
// sAI := false ;
9468: LD_ADDR_EXP 64
9472: PUSH
9473: LD_INT 0
9475: ST_TO_ADDR
// sCargo := false ;
9476: LD_ADDR_EXP 67
9480: PUSH
9481: LD_INT 0
9483: ST_TO_ADDR
// sDLaser := false ;
9484: LD_ADDR_EXP 68
9488: PUSH
9489: LD_INT 0
9491: ST_TO_ADDR
// sExchange := false ;
9492: LD_ADDR_EXP 69
9496: PUSH
9497: LD_INT 0
9499: ST_TO_ADDR
// sFac := false ;
9500: LD_ADDR_EXP 70
9504: PUSH
9505: LD_INT 0
9507: ST_TO_ADDR
// sPower := false ;
9508: LD_ADDR_EXP 71
9512: PUSH
9513: LD_INT 0
9515: ST_TO_ADDR
// sRandom := false ;
9516: LD_ADDR_EXP 72
9520: PUSH
9521: LD_INT 0
9523: ST_TO_ADDR
// sShield := false ;
9524: LD_ADDR_EXP 73
9528: PUSH
9529: LD_INT 0
9531: ST_TO_ADDR
// sTime := false ;
9532: LD_ADDR_EXP 74
9536: PUSH
9537: LD_INT 0
9539: ST_TO_ADDR
// sTools := false ;
9540: LD_ADDR_EXP 75
9544: PUSH
9545: LD_INT 0
9547: ST_TO_ADDR
// sSold := false ;
9548: LD_ADDR_EXP 40
9552: PUSH
9553: LD_INT 0
9555: ST_TO_ADDR
// sDiff := false ;
9556: LD_ADDR_EXP 41
9560: PUSH
9561: LD_INT 0
9563: ST_TO_ADDR
// sFog := false ;
9564: LD_ADDR_EXP 44
9568: PUSH
9569: LD_INT 0
9571: ST_TO_ADDR
// sReset := false ;
9572: LD_ADDR_EXP 45
9576: PUSH
9577: LD_INT 0
9579: ST_TO_ADDR
// sSun := false ;
9580: LD_ADDR_EXP 46
9584: PUSH
9585: LD_INT 0
9587: ST_TO_ADDR
// sTiger := false ;
9588: LD_ADDR_EXP 42
9592: PUSH
9593: LD_INT 0
9595: ST_TO_ADDR
// sBomb := false ;
9596: LD_ADDR_EXP 43
9600: PUSH
9601: LD_INT 0
9603: ST_TO_ADDR
// sWound := false ;
9604: LD_ADDR_EXP 51
9608: PUSH
9609: LD_INT 0
9611: ST_TO_ADDR
// sBetray := false ;
9612: LD_ADDR_EXP 55
9616: PUSH
9617: LD_INT 0
9619: ST_TO_ADDR
// sContamin := false ;
9620: LD_ADDR_EXP 56
9624: PUSH
9625: LD_INT 0
9627: ST_TO_ADDR
// sOil := false ;
9628: LD_ADDR_EXP 58
9632: PUSH
9633: LD_INT 0
9635: ST_TO_ADDR
// sStu := false ;
9636: LD_ADDR_EXP 62
9640: PUSH
9641: LD_INT 0
9643: ST_TO_ADDR
// sBazooka := false ;
9644: LD_ADDR_EXP 65
9648: PUSH
9649: LD_INT 0
9651: ST_TO_ADDR
// sMortar := false ;
9652: LD_ADDR_EXP 66
9656: PUSH
9657: LD_INT 0
9659: ST_TO_ADDR
// sRanger := false ;
9660: LD_ADDR_EXP 76
9664: PUSH
9665: LD_INT 0
9667: ST_TO_ADDR
// sComputer := false ;
9668: LD_ADDR_EXP 77
9672: PUSH
9673: LD_INT 0
9675: ST_TO_ADDR
// s30 := false ;
9676: LD_ADDR_EXP 78
9680: PUSH
9681: LD_INT 0
9683: ST_TO_ADDR
// s60 := false ;
9684: LD_ADDR_EXP 79
9688: PUSH
9689: LD_INT 0
9691: ST_TO_ADDR
// end ;
9692: LD_VAR 0 1
9696: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
9697: LD_INT 0
9699: PPUSH
9700: PPUSH
9701: PPUSH
9702: PPUSH
9703: PPUSH
9704: PPUSH
9705: PPUSH
// result := [ ] ;
9706: LD_ADDR_VAR 0 2
9710: PUSH
9711: EMPTY
9712: ST_TO_ADDR
// if campaign_id = 1 then
9713: LD_OWVAR 69
9717: PUSH
9718: LD_INT 1
9720: EQUAL
9721: IFFALSE 12887
// begin case mission_number of 1 :
9723: LD_OWVAR 70
9727: PUSH
9728: LD_INT 1
9730: DOUBLE
9731: EQUAL
9732: IFTRUE 9736
9734: GO 9812
9736: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
9737: LD_ADDR_VAR 0 2
9741: PUSH
9742: LD_INT 2
9744: PUSH
9745: LD_INT 4
9747: PUSH
9748: LD_INT 11
9750: PUSH
9751: LD_INT 12
9753: PUSH
9754: LD_INT 15
9756: PUSH
9757: LD_INT 16
9759: PUSH
9760: LD_INT 22
9762: PUSH
9763: LD_INT 23
9765: PUSH
9766: LD_INT 26
9768: PUSH
9769: EMPTY
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: LIST
9775: LIST
9776: LIST
9777: LIST
9778: LIST
9779: PUSH
9780: LD_INT 101
9782: PUSH
9783: LD_INT 102
9785: PUSH
9786: LD_INT 106
9788: PUSH
9789: LD_INT 116
9791: PUSH
9792: LD_INT 117
9794: PUSH
9795: LD_INT 118
9797: PUSH
9798: EMPTY
9799: LIST
9800: LIST
9801: LIST
9802: LIST
9803: LIST
9804: LIST
9805: PUSH
9806: EMPTY
9807: LIST
9808: LIST
9809: ST_TO_ADDR
9810: GO 12885
9812: LD_INT 2
9814: DOUBLE
9815: EQUAL
9816: IFTRUE 9820
9818: GO 9904
9820: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9821: LD_ADDR_VAR 0 2
9825: PUSH
9826: LD_INT 2
9828: PUSH
9829: LD_INT 4
9831: PUSH
9832: LD_INT 11
9834: PUSH
9835: LD_INT 12
9837: PUSH
9838: LD_INT 15
9840: PUSH
9841: LD_INT 16
9843: PUSH
9844: LD_INT 22
9846: PUSH
9847: LD_INT 23
9849: PUSH
9850: LD_INT 26
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: LIST
9857: LIST
9858: LIST
9859: LIST
9860: LIST
9861: LIST
9862: LIST
9863: PUSH
9864: LD_INT 101
9866: PUSH
9867: LD_INT 102
9869: PUSH
9870: LD_INT 105
9872: PUSH
9873: LD_INT 106
9875: PUSH
9876: LD_INT 108
9878: PUSH
9879: LD_INT 116
9881: PUSH
9882: LD_INT 117
9884: PUSH
9885: LD_INT 118
9887: PUSH
9888: EMPTY
9889: LIST
9890: LIST
9891: LIST
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: PUSH
9898: EMPTY
9899: LIST
9900: LIST
9901: ST_TO_ADDR
9902: GO 12885
9904: LD_INT 3
9906: DOUBLE
9907: EQUAL
9908: IFTRUE 9912
9910: GO 10000
9912: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9913: LD_ADDR_VAR 0 2
9917: PUSH
9918: LD_INT 2
9920: PUSH
9921: LD_INT 4
9923: PUSH
9924: LD_INT 5
9926: PUSH
9927: LD_INT 11
9929: PUSH
9930: LD_INT 12
9932: PUSH
9933: LD_INT 15
9935: PUSH
9936: LD_INT 16
9938: PUSH
9939: LD_INT 22
9941: PUSH
9942: LD_INT 26
9944: PUSH
9945: LD_INT 36
9947: PUSH
9948: EMPTY
9949: LIST
9950: LIST
9951: LIST
9952: LIST
9953: LIST
9954: LIST
9955: LIST
9956: LIST
9957: LIST
9958: LIST
9959: PUSH
9960: LD_INT 101
9962: PUSH
9963: LD_INT 102
9965: PUSH
9966: LD_INT 105
9968: PUSH
9969: LD_INT 106
9971: PUSH
9972: LD_INT 108
9974: PUSH
9975: LD_INT 116
9977: PUSH
9978: LD_INT 117
9980: PUSH
9981: LD_INT 118
9983: PUSH
9984: EMPTY
9985: LIST
9986: LIST
9987: LIST
9988: LIST
9989: LIST
9990: LIST
9991: LIST
9992: LIST
9993: PUSH
9994: EMPTY
9995: LIST
9996: LIST
9997: ST_TO_ADDR
9998: GO 12885
10000: LD_INT 4
10002: DOUBLE
10003: EQUAL
10004: IFTRUE 10008
10006: GO 10104
10008: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
10009: LD_ADDR_VAR 0 2
10013: PUSH
10014: LD_INT 2
10016: PUSH
10017: LD_INT 4
10019: PUSH
10020: LD_INT 5
10022: PUSH
10023: LD_INT 8
10025: PUSH
10026: LD_INT 11
10028: PUSH
10029: LD_INT 12
10031: PUSH
10032: LD_INT 15
10034: PUSH
10035: LD_INT 16
10037: PUSH
10038: LD_INT 22
10040: PUSH
10041: LD_INT 23
10043: PUSH
10044: LD_INT 26
10046: PUSH
10047: LD_INT 36
10049: PUSH
10050: EMPTY
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: PUSH
10064: LD_INT 101
10066: PUSH
10067: LD_INT 102
10069: PUSH
10070: LD_INT 105
10072: PUSH
10073: LD_INT 106
10075: PUSH
10076: LD_INT 108
10078: PUSH
10079: LD_INT 116
10081: PUSH
10082: LD_INT 117
10084: PUSH
10085: LD_INT 118
10087: PUSH
10088: EMPTY
10089: LIST
10090: LIST
10091: LIST
10092: LIST
10093: LIST
10094: LIST
10095: LIST
10096: LIST
10097: PUSH
10098: EMPTY
10099: LIST
10100: LIST
10101: ST_TO_ADDR
10102: GO 12885
10104: LD_INT 5
10106: DOUBLE
10107: EQUAL
10108: IFTRUE 10112
10110: GO 10224
10112: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
10113: LD_ADDR_VAR 0 2
10117: PUSH
10118: LD_INT 2
10120: PUSH
10121: LD_INT 4
10123: PUSH
10124: LD_INT 5
10126: PUSH
10127: LD_INT 6
10129: PUSH
10130: LD_INT 8
10132: PUSH
10133: LD_INT 11
10135: PUSH
10136: LD_INT 12
10138: PUSH
10139: LD_INT 15
10141: PUSH
10142: LD_INT 16
10144: PUSH
10145: LD_INT 22
10147: PUSH
10148: LD_INT 23
10150: PUSH
10151: LD_INT 25
10153: PUSH
10154: LD_INT 26
10156: PUSH
10157: LD_INT 36
10159: PUSH
10160: EMPTY
10161: LIST
10162: LIST
10163: LIST
10164: LIST
10165: LIST
10166: LIST
10167: LIST
10168: LIST
10169: LIST
10170: LIST
10171: LIST
10172: LIST
10173: LIST
10174: LIST
10175: PUSH
10176: LD_INT 101
10178: PUSH
10179: LD_INT 102
10181: PUSH
10182: LD_INT 105
10184: PUSH
10185: LD_INT 106
10187: PUSH
10188: LD_INT 108
10190: PUSH
10191: LD_INT 109
10193: PUSH
10194: LD_INT 112
10196: PUSH
10197: LD_INT 116
10199: PUSH
10200: LD_INT 117
10202: PUSH
10203: LD_INT 118
10205: PUSH
10206: EMPTY
10207: LIST
10208: LIST
10209: LIST
10210: LIST
10211: LIST
10212: LIST
10213: LIST
10214: LIST
10215: LIST
10216: LIST
10217: PUSH
10218: EMPTY
10219: LIST
10220: LIST
10221: ST_TO_ADDR
10222: GO 12885
10224: LD_INT 6
10226: DOUBLE
10227: EQUAL
10228: IFTRUE 10232
10230: GO 10364
10232: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
10233: LD_ADDR_VAR 0 2
10237: PUSH
10238: LD_INT 2
10240: PUSH
10241: LD_INT 4
10243: PUSH
10244: LD_INT 5
10246: PUSH
10247: LD_INT 6
10249: PUSH
10250: LD_INT 8
10252: PUSH
10253: LD_INT 11
10255: PUSH
10256: LD_INT 12
10258: PUSH
10259: LD_INT 15
10261: PUSH
10262: LD_INT 16
10264: PUSH
10265: LD_INT 20
10267: PUSH
10268: LD_INT 21
10270: PUSH
10271: LD_INT 22
10273: PUSH
10274: LD_INT 23
10276: PUSH
10277: LD_INT 25
10279: PUSH
10280: LD_INT 26
10282: PUSH
10283: LD_INT 30
10285: PUSH
10286: LD_INT 31
10288: PUSH
10289: LD_INT 32
10291: PUSH
10292: LD_INT 36
10294: PUSH
10295: EMPTY
10296: LIST
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: LIST
10311: LIST
10312: LIST
10313: LIST
10314: LIST
10315: PUSH
10316: LD_INT 101
10318: PUSH
10319: LD_INT 102
10321: PUSH
10322: LD_INT 105
10324: PUSH
10325: LD_INT 106
10327: PUSH
10328: LD_INT 108
10330: PUSH
10331: LD_INT 109
10333: PUSH
10334: LD_INT 112
10336: PUSH
10337: LD_INT 116
10339: PUSH
10340: LD_INT 117
10342: PUSH
10343: LD_INT 118
10345: PUSH
10346: EMPTY
10347: LIST
10348: LIST
10349: LIST
10350: LIST
10351: LIST
10352: LIST
10353: LIST
10354: LIST
10355: LIST
10356: LIST
10357: PUSH
10358: EMPTY
10359: LIST
10360: LIST
10361: ST_TO_ADDR
10362: GO 12885
10364: LD_INT 7
10366: DOUBLE
10367: EQUAL
10368: IFTRUE 10372
10370: GO 10484
10372: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
10373: LD_ADDR_VAR 0 2
10377: PUSH
10378: LD_INT 2
10380: PUSH
10381: LD_INT 4
10383: PUSH
10384: LD_INT 5
10386: PUSH
10387: LD_INT 7
10389: PUSH
10390: LD_INT 11
10392: PUSH
10393: LD_INT 12
10395: PUSH
10396: LD_INT 15
10398: PUSH
10399: LD_INT 16
10401: PUSH
10402: LD_INT 20
10404: PUSH
10405: LD_INT 21
10407: PUSH
10408: LD_INT 22
10410: PUSH
10411: LD_INT 23
10413: PUSH
10414: LD_INT 25
10416: PUSH
10417: LD_INT 26
10419: PUSH
10420: EMPTY
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: LIST
10429: LIST
10430: LIST
10431: LIST
10432: LIST
10433: LIST
10434: LIST
10435: PUSH
10436: LD_INT 101
10438: PUSH
10439: LD_INT 102
10441: PUSH
10442: LD_INT 103
10444: PUSH
10445: LD_INT 105
10447: PUSH
10448: LD_INT 106
10450: PUSH
10451: LD_INT 108
10453: PUSH
10454: LD_INT 112
10456: PUSH
10457: LD_INT 116
10459: PUSH
10460: LD_INT 117
10462: PUSH
10463: LD_INT 118
10465: PUSH
10466: EMPTY
10467: LIST
10468: LIST
10469: LIST
10470: LIST
10471: LIST
10472: LIST
10473: LIST
10474: LIST
10475: LIST
10476: LIST
10477: PUSH
10478: EMPTY
10479: LIST
10480: LIST
10481: ST_TO_ADDR
10482: GO 12885
10484: LD_INT 8
10486: DOUBLE
10487: EQUAL
10488: IFTRUE 10492
10490: GO 10632
10492: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
10493: LD_ADDR_VAR 0 2
10497: PUSH
10498: LD_INT 2
10500: PUSH
10501: LD_INT 4
10503: PUSH
10504: LD_INT 5
10506: PUSH
10507: LD_INT 6
10509: PUSH
10510: LD_INT 7
10512: PUSH
10513: LD_INT 8
10515: PUSH
10516: LD_INT 11
10518: PUSH
10519: LD_INT 12
10521: PUSH
10522: LD_INT 15
10524: PUSH
10525: LD_INT 16
10527: PUSH
10528: LD_INT 20
10530: PUSH
10531: LD_INT 21
10533: PUSH
10534: LD_INT 22
10536: PUSH
10537: LD_INT 23
10539: PUSH
10540: LD_INT 25
10542: PUSH
10543: LD_INT 26
10545: PUSH
10546: LD_INT 30
10548: PUSH
10549: LD_INT 31
10551: PUSH
10552: LD_INT 32
10554: PUSH
10555: LD_INT 36
10557: PUSH
10558: EMPTY
10559: LIST
10560: LIST
10561: LIST
10562: LIST
10563: LIST
10564: LIST
10565: LIST
10566: LIST
10567: LIST
10568: LIST
10569: LIST
10570: LIST
10571: LIST
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: PUSH
10580: LD_INT 101
10582: PUSH
10583: LD_INT 102
10585: PUSH
10586: LD_INT 103
10588: PUSH
10589: LD_INT 105
10591: PUSH
10592: LD_INT 106
10594: PUSH
10595: LD_INT 108
10597: PUSH
10598: LD_INT 109
10600: PUSH
10601: LD_INT 112
10603: PUSH
10604: LD_INT 116
10606: PUSH
10607: LD_INT 117
10609: PUSH
10610: LD_INT 118
10612: PUSH
10613: EMPTY
10614: LIST
10615: LIST
10616: LIST
10617: LIST
10618: LIST
10619: LIST
10620: LIST
10621: LIST
10622: LIST
10623: LIST
10624: LIST
10625: PUSH
10626: EMPTY
10627: LIST
10628: LIST
10629: ST_TO_ADDR
10630: GO 12885
10632: LD_INT 9
10634: DOUBLE
10635: EQUAL
10636: IFTRUE 10640
10638: GO 10788
10640: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
10641: LD_ADDR_VAR 0 2
10645: PUSH
10646: LD_INT 2
10648: PUSH
10649: LD_INT 4
10651: PUSH
10652: LD_INT 5
10654: PUSH
10655: LD_INT 6
10657: PUSH
10658: LD_INT 7
10660: PUSH
10661: LD_INT 8
10663: PUSH
10664: LD_INT 11
10666: PUSH
10667: LD_INT 12
10669: PUSH
10670: LD_INT 15
10672: PUSH
10673: LD_INT 16
10675: PUSH
10676: LD_INT 20
10678: PUSH
10679: LD_INT 21
10681: PUSH
10682: LD_INT 22
10684: PUSH
10685: LD_INT 23
10687: PUSH
10688: LD_INT 25
10690: PUSH
10691: LD_INT 26
10693: PUSH
10694: LD_INT 28
10696: PUSH
10697: LD_INT 30
10699: PUSH
10700: LD_INT 31
10702: PUSH
10703: LD_INT 32
10705: PUSH
10706: LD_INT 36
10708: PUSH
10709: EMPTY
10710: LIST
10711: LIST
10712: LIST
10713: LIST
10714: LIST
10715: LIST
10716: LIST
10717: LIST
10718: LIST
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: LIST
10724: LIST
10725: LIST
10726: LIST
10727: LIST
10728: LIST
10729: LIST
10730: LIST
10731: PUSH
10732: LD_INT 101
10734: PUSH
10735: LD_INT 102
10737: PUSH
10738: LD_INT 103
10740: PUSH
10741: LD_INT 105
10743: PUSH
10744: LD_INT 106
10746: PUSH
10747: LD_INT 108
10749: PUSH
10750: LD_INT 109
10752: PUSH
10753: LD_INT 112
10755: PUSH
10756: LD_INT 114
10758: PUSH
10759: LD_INT 116
10761: PUSH
10762: LD_INT 117
10764: PUSH
10765: LD_INT 118
10767: PUSH
10768: EMPTY
10769: LIST
10770: LIST
10771: LIST
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: PUSH
10782: EMPTY
10783: LIST
10784: LIST
10785: ST_TO_ADDR
10786: GO 12885
10788: LD_INT 10
10790: DOUBLE
10791: EQUAL
10792: IFTRUE 10796
10794: GO 10992
10796: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10797: LD_ADDR_VAR 0 2
10801: PUSH
10802: LD_INT 2
10804: PUSH
10805: LD_INT 4
10807: PUSH
10808: LD_INT 5
10810: PUSH
10811: LD_INT 6
10813: PUSH
10814: LD_INT 7
10816: PUSH
10817: LD_INT 8
10819: PUSH
10820: LD_INT 9
10822: PUSH
10823: LD_INT 10
10825: PUSH
10826: LD_INT 11
10828: PUSH
10829: LD_INT 12
10831: PUSH
10832: LD_INT 13
10834: PUSH
10835: LD_INT 14
10837: PUSH
10838: LD_INT 15
10840: PUSH
10841: LD_INT 16
10843: PUSH
10844: LD_INT 17
10846: PUSH
10847: LD_INT 18
10849: PUSH
10850: LD_INT 19
10852: PUSH
10853: LD_INT 20
10855: PUSH
10856: LD_INT 21
10858: PUSH
10859: LD_INT 22
10861: PUSH
10862: LD_INT 23
10864: PUSH
10865: LD_INT 24
10867: PUSH
10868: LD_INT 25
10870: PUSH
10871: LD_INT 26
10873: PUSH
10874: LD_INT 28
10876: PUSH
10877: LD_INT 30
10879: PUSH
10880: LD_INT 31
10882: PUSH
10883: LD_INT 32
10885: PUSH
10886: LD_INT 36
10888: PUSH
10889: EMPTY
10890: LIST
10891: LIST
10892: LIST
10893: LIST
10894: LIST
10895: LIST
10896: LIST
10897: LIST
10898: LIST
10899: LIST
10900: LIST
10901: LIST
10902: LIST
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: PUSH
10920: LD_INT 101
10922: PUSH
10923: LD_INT 102
10925: PUSH
10926: LD_INT 103
10928: PUSH
10929: LD_INT 104
10931: PUSH
10932: LD_INT 105
10934: PUSH
10935: LD_INT 106
10937: PUSH
10938: LD_INT 107
10940: PUSH
10941: LD_INT 108
10943: PUSH
10944: LD_INT 109
10946: PUSH
10947: LD_INT 110
10949: PUSH
10950: LD_INT 111
10952: PUSH
10953: LD_INT 112
10955: PUSH
10956: LD_INT 114
10958: PUSH
10959: LD_INT 116
10961: PUSH
10962: LD_INT 117
10964: PUSH
10965: LD_INT 118
10967: PUSH
10968: EMPTY
10969: LIST
10970: LIST
10971: LIST
10972: LIST
10973: LIST
10974: LIST
10975: LIST
10976: LIST
10977: LIST
10978: LIST
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: LIST
10984: LIST
10985: PUSH
10986: EMPTY
10987: LIST
10988: LIST
10989: ST_TO_ADDR
10990: GO 12885
10992: LD_INT 11
10994: DOUBLE
10995: EQUAL
10996: IFTRUE 11000
10998: GO 11204
11000: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
11001: LD_ADDR_VAR 0 2
11005: PUSH
11006: LD_INT 2
11008: PUSH
11009: LD_INT 3
11011: PUSH
11012: LD_INT 4
11014: PUSH
11015: LD_INT 5
11017: PUSH
11018: LD_INT 6
11020: PUSH
11021: LD_INT 7
11023: PUSH
11024: LD_INT 8
11026: PUSH
11027: LD_INT 9
11029: PUSH
11030: LD_INT 10
11032: PUSH
11033: LD_INT 11
11035: PUSH
11036: LD_INT 12
11038: PUSH
11039: LD_INT 13
11041: PUSH
11042: LD_INT 14
11044: PUSH
11045: LD_INT 15
11047: PUSH
11048: LD_INT 16
11050: PUSH
11051: LD_INT 17
11053: PUSH
11054: LD_INT 18
11056: PUSH
11057: LD_INT 19
11059: PUSH
11060: LD_INT 20
11062: PUSH
11063: LD_INT 21
11065: PUSH
11066: LD_INT 22
11068: PUSH
11069: LD_INT 23
11071: PUSH
11072: LD_INT 24
11074: PUSH
11075: LD_INT 25
11077: PUSH
11078: LD_INT 26
11080: PUSH
11081: LD_INT 28
11083: PUSH
11084: LD_INT 30
11086: PUSH
11087: LD_INT 31
11089: PUSH
11090: LD_INT 32
11092: PUSH
11093: LD_INT 34
11095: PUSH
11096: LD_INT 36
11098: PUSH
11099: EMPTY
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: LIST
11113: LIST
11114: LIST
11115: LIST
11116: LIST
11117: LIST
11118: LIST
11119: LIST
11120: LIST
11121: LIST
11122: LIST
11123: LIST
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: PUSH
11132: LD_INT 101
11134: PUSH
11135: LD_INT 102
11137: PUSH
11138: LD_INT 103
11140: PUSH
11141: LD_INT 104
11143: PUSH
11144: LD_INT 105
11146: PUSH
11147: LD_INT 106
11149: PUSH
11150: LD_INT 107
11152: PUSH
11153: LD_INT 108
11155: PUSH
11156: LD_INT 109
11158: PUSH
11159: LD_INT 110
11161: PUSH
11162: LD_INT 111
11164: PUSH
11165: LD_INT 112
11167: PUSH
11168: LD_INT 114
11170: PUSH
11171: LD_INT 116
11173: PUSH
11174: LD_INT 117
11176: PUSH
11177: LD_INT 118
11179: PUSH
11180: EMPTY
11181: LIST
11182: LIST
11183: LIST
11184: LIST
11185: LIST
11186: LIST
11187: LIST
11188: LIST
11189: LIST
11190: LIST
11191: LIST
11192: LIST
11193: LIST
11194: LIST
11195: LIST
11196: LIST
11197: PUSH
11198: EMPTY
11199: LIST
11200: LIST
11201: ST_TO_ADDR
11202: GO 12885
11204: LD_INT 12
11206: DOUBLE
11207: EQUAL
11208: IFTRUE 11212
11210: GO 11432
11212: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
11213: LD_ADDR_VAR 0 2
11217: PUSH
11218: LD_INT 1
11220: PUSH
11221: LD_INT 2
11223: PUSH
11224: LD_INT 3
11226: PUSH
11227: LD_INT 4
11229: PUSH
11230: LD_INT 5
11232: PUSH
11233: LD_INT 6
11235: PUSH
11236: LD_INT 7
11238: PUSH
11239: LD_INT 8
11241: PUSH
11242: LD_INT 9
11244: PUSH
11245: LD_INT 10
11247: PUSH
11248: LD_INT 11
11250: PUSH
11251: LD_INT 12
11253: PUSH
11254: LD_INT 13
11256: PUSH
11257: LD_INT 14
11259: PUSH
11260: LD_INT 15
11262: PUSH
11263: LD_INT 16
11265: PUSH
11266: LD_INT 17
11268: PUSH
11269: LD_INT 18
11271: PUSH
11272: LD_INT 19
11274: PUSH
11275: LD_INT 20
11277: PUSH
11278: LD_INT 21
11280: PUSH
11281: LD_INT 22
11283: PUSH
11284: LD_INT 23
11286: PUSH
11287: LD_INT 24
11289: PUSH
11290: LD_INT 25
11292: PUSH
11293: LD_INT 26
11295: PUSH
11296: LD_INT 27
11298: PUSH
11299: LD_INT 28
11301: PUSH
11302: LD_INT 30
11304: PUSH
11305: LD_INT 31
11307: PUSH
11308: LD_INT 32
11310: PUSH
11311: LD_INT 33
11313: PUSH
11314: LD_INT 34
11316: PUSH
11317: LD_INT 36
11319: PUSH
11320: EMPTY
11321: LIST
11322: LIST
11323: LIST
11324: LIST
11325: LIST
11326: LIST
11327: LIST
11328: LIST
11329: LIST
11330: LIST
11331: LIST
11332: LIST
11333: LIST
11334: LIST
11335: LIST
11336: LIST
11337: LIST
11338: LIST
11339: LIST
11340: LIST
11341: LIST
11342: LIST
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: PUSH
11356: LD_INT 101
11358: PUSH
11359: LD_INT 102
11361: PUSH
11362: LD_INT 103
11364: PUSH
11365: LD_INT 104
11367: PUSH
11368: LD_INT 105
11370: PUSH
11371: LD_INT 106
11373: PUSH
11374: LD_INT 107
11376: PUSH
11377: LD_INT 108
11379: PUSH
11380: LD_INT 109
11382: PUSH
11383: LD_INT 110
11385: PUSH
11386: LD_INT 111
11388: PUSH
11389: LD_INT 112
11391: PUSH
11392: LD_INT 113
11394: PUSH
11395: LD_INT 114
11397: PUSH
11398: LD_INT 116
11400: PUSH
11401: LD_INT 117
11403: PUSH
11404: LD_INT 118
11406: PUSH
11407: EMPTY
11408: LIST
11409: LIST
11410: LIST
11411: LIST
11412: LIST
11413: LIST
11414: LIST
11415: LIST
11416: LIST
11417: LIST
11418: LIST
11419: LIST
11420: LIST
11421: LIST
11422: LIST
11423: LIST
11424: LIST
11425: PUSH
11426: EMPTY
11427: LIST
11428: LIST
11429: ST_TO_ADDR
11430: GO 12885
11432: LD_INT 13
11434: DOUBLE
11435: EQUAL
11436: IFTRUE 11440
11438: GO 11648
11440: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
11441: LD_ADDR_VAR 0 2
11445: PUSH
11446: LD_INT 1
11448: PUSH
11449: LD_INT 2
11451: PUSH
11452: LD_INT 3
11454: PUSH
11455: LD_INT 4
11457: PUSH
11458: LD_INT 5
11460: PUSH
11461: LD_INT 8
11463: PUSH
11464: LD_INT 9
11466: PUSH
11467: LD_INT 10
11469: PUSH
11470: LD_INT 11
11472: PUSH
11473: LD_INT 12
11475: PUSH
11476: LD_INT 14
11478: PUSH
11479: LD_INT 15
11481: PUSH
11482: LD_INT 16
11484: PUSH
11485: LD_INT 17
11487: PUSH
11488: LD_INT 18
11490: PUSH
11491: LD_INT 19
11493: PUSH
11494: LD_INT 20
11496: PUSH
11497: LD_INT 21
11499: PUSH
11500: LD_INT 22
11502: PUSH
11503: LD_INT 23
11505: PUSH
11506: LD_INT 24
11508: PUSH
11509: LD_INT 25
11511: PUSH
11512: LD_INT 26
11514: PUSH
11515: LD_INT 27
11517: PUSH
11518: LD_INT 28
11520: PUSH
11521: LD_INT 30
11523: PUSH
11524: LD_INT 31
11526: PUSH
11527: LD_INT 32
11529: PUSH
11530: LD_INT 33
11532: PUSH
11533: LD_INT 34
11535: PUSH
11536: LD_INT 36
11538: PUSH
11539: EMPTY
11540: LIST
11541: LIST
11542: LIST
11543: LIST
11544: LIST
11545: LIST
11546: LIST
11547: LIST
11548: LIST
11549: LIST
11550: LIST
11551: LIST
11552: LIST
11553: LIST
11554: LIST
11555: LIST
11556: LIST
11557: LIST
11558: LIST
11559: LIST
11560: LIST
11561: LIST
11562: LIST
11563: LIST
11564: LIST
11565: LIST
11566: LIST
11567: LIST
11568: LIST
11569: LIST
11570: LIST
11571: PUSH
11572: LD_INT 101
11574: PUSH
11575: LD_INT 102
11577: PUSH
11578: LD_INT 103
11580: PUSH
11581: LD_INT 104
11583: PUSH
11584: LD_INT 105
11586: PUSH
11587: LD_INT 106
11589: PUSH
11590: LD_INT 107
11592: PUSH
11593: LD_INT 108
11595: PUSH
11596: LD_INT 109
11598: PUSH
11599: LD_INT 110
11601: PUSH
11602: LD_INT 111
11604: PUSH
11605: LD_INT 112
11607: PUSH
11608: LD_INT 113
11610: PUSH
11611: LD_INT 114
11613: PUSH
11614: LD_INT 116
11616: PUSH
11617: LD_INT 117
11619: PUSH
11620: LD_INT 118
11622: PUSH
11623: EMPTY
11624: LIST
11625: LIST
11626: LIST
11627: LIST
11628: LIST
11629: LIST
11630: LIST
11631: LIST
11632: LIST
11633: LIST
11634: LIST
11635: LIST
11636: LIST
11637: LIST
11638: LIST
11639: LIST
11640: LIST
11641: PUSH
11642: EMPTY
11643: LIST
11644: LIST
11645: ST_TO_ADDR
11646: GO 12885
11648: LD_INT 14
11650: DOUBLE
11651: EQUAL
11652: IFTRUE 11656
11654: GO 11880
11656: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
11657: LD_ADDR_VAR 0 2
11661: PUSH
11662: LD_INT 1
11664: PUSH
11665: LD_INT 2
11667: PUSH
11668: LD_INT 3
11670: PUSH
11671: LD_INT 4
11673: PUSH
11674: LD_INT 5
11676: PUSH
11677: LD_INT 6
11679: PUSH
11680: LD_INT 7
11682: PUSH
11683: LD_INT 8
11685: PUSH
11686: LD_INT 9
11688: PUSH
11689: LD_INT 10
11691: PUSH
11692: LD_INT 11
11694: PUSH
11695: LD_INT 12
11697: PUSH
11698: LD_INT 13
11700: PUSH
11701: LD_INT 14
11703: PUSH
11704: LD_INT 15
11706: PUSH
11707: LD_INT 16
11709: PUSH
11710: LD_INT 17
11712: PUSH
11713: LD_INT 18
11715: PUSH
11716: LD_INT 19
11718: PUSH
11719: LD_INT 20
11721: PUSH
11722: LD_INT 21
11724: PUSH
11725: LD_INT 22
11727: PUSH
11728: LD_INT 23
11730: PUSH
11731: LD_INT 24
11733: PUSH
11734: LD_INT 25
11736: PUSH
11737: LD_INT 26
11739: PUSH
11740: LD_INT 27
11742: PUSH
11743: LD_INT 28
11745: PUSH
11746: LD_INT 29
11748: PUSH
11749: LD_INT 30
11751: PUSH
11752: LD_INT 31
11754: PUSH
11755: LD_INT 32
11757: PUSH
11758: LD_INT 33
11760: PUSH
11761: LD_INT 34
11763: PUSH
11764: LD_INT 36
11766: PUSH
11767: EMPTY
11768: LIST
11769: LIST
11770: LIST
11771: LIST
11772: LIST
11773: LIST
11774: LIST
11775: LIST
11776: LIST
11777: LIST
11778: LIST
11779: LIST
11780: LIST
11781: LIST
11782: LIST
11783: LIST
11784: LIST
11785: LIST
11786: LIST
11787: LIST
11788: LIST
11789: LIST
11790: LIST
11791: LIST
11792: LIST
11793: LIST
11794: LIST
11795: LIST
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: PUSH
11804: LD_INT 101
11806: PUSH
11807: LD_INT 102
11809: PUSH
11810: LD_INT 103
11812: PUSH
11813: LD_INT 104
11815: PUSH
11816: LD_INT 105
11818: PUSH
11819: LD_INT 106
11821: PUSH
11822: LD_INT 107
11824: PUSH
11825: LD_INT 108
11827: PUSH
11828: LD_INT 109
11830: PUSH
11831: LD_INT 110
11833: PUSH
11834: LD_INT 111
11836: PUSH
11837: LD_INT 112
11839: PUSH
11840: LD_INT 113
11842: PUSH
11843: LD_INT 114
11845: PUSH
11846: LD_INT 116
11848: PUSH
11849: LD_INT 117
11851: PUSH
11852: LD_INT 118
11854: PUSH
11855: EMPTY
11856: LIST
11857: LIST
11858: LIST
11859: LIST
11860: LIST
11861: LIST
11862: LIST
11863: LIST
11864: LIST
11865: LIST
11866: LIST
11867: LIST
11868: LIST
11869: LIST
11870: LIST
11871: LIST
11872: LIST
11873: PUSH
11874: EMPTY
11875: LIST
11876: LIST
11877: ST_TO_ADDR
11878: GO 12885
11880: LD_INT 15
11882: DOUBLE
11883: EQUAL
11884: IFTRUE 11888
11886: GO 12112
11888: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11889: LD_ADDR_VAR 0 2
11893: PUSH
11894: LD_INT 1
11896: PUSH
11897: LD_INT 2
11899: PUSH
11900: LD_INT 3
11902: PUSH
11903: LD_INT 4
11905: PUSH
11906: LD_INT 5
11908: PUSH
11909: LD_INT 6
11911: PUSH
11912: LD_INT 7
11914: PUSH
11915: LD_INT 8
11917: PUSH
11918: LD_INT 9
11920: PUSH
11921: LD_INT 10
11923: PUSH
11924: LD_INT 11
11926: PUSH
11927: LD_INT 12
11929: PUSH
11930: LD_INT 13
11932: PUSH
11933: LD_INT 14
11935: PUSH
11936: LD_INT 15
11938: PUSH
11939: LD_INT 16
11941: PUSH
11942: LD_INT 17
11944: PUSH
11945: LD_INT 18
11947: PUSH
11948: LD_INT 19
11950: PUSH
11951: LD_INT 20
11953: PUSH
11954: LD_INT 21
11956: PUSH
11957: LD_INT 22
11959: PUSH
11960: LD_INT 23
11962: PUSH
11963: LD_INT 24
11965: PUSH
11966: LD_INT 25
11968: PUSH
11969: LD_INT 26
11971: PUSH
11972: LD_INT 27
11974: PUSH
11975: LD_INT 28
11977: PUSH
11978: LD_INT 29
11980: PUSH
11981: LD_INT 30
11983: PUSH
11984: LD_INT 31
11986: PUSH
11987: LD_INT 32
11989: PUSH
11990: LD_INT 33
11992: PUSH
11993: LD_INT 34
11995: PUSH
11996: LD_INT 36
11998: PUSH
11999: EMPTY
12000: LIST
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: LIST
12006: LIST
12007: LIST
12008: LIST
12009: LIST
12010: LIST
12011: LIST
12012: LIST
12013: LIST
12014: LIST
12015: LIST
12016: LIST
12017: LIST
12018: LIST
12019: LIST
12020: LIST
12021: LIST
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: LIST
12028: LIST
12029: LIST
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: PUSH
12036: LD_INT 101
12038: PUSH
12039: LD_INT 102
12041: PUSH
12042: LD_INT 103
12044: PUSH
12045: LD_INT 104
12047: PUSH
12048: LD_INT 105
12050: PUSH
12051: LD_INT 106
12053: PUSH
12054: LD_INT 107
12056: PUSH
12057: LD_INT 108
12059: PUSH
12060: LD_INT 109
12062: PUSH
12063: LD_INT 110
12065: PUSH
12066: LD_INT 111
12068: PUSH
12069: LD_INT 112
12071: PUSH
12072: LD_INT 113
12074: PUSH
12075: LD_INT 114
12077: PUSH
12078: LD_INT 116
12080: PUSH
12081: LD_INT 117
12083: PUSH
12084: LD_INT 118
12086: PUSH
12087: EMPTY
12088: LIST
12089: LIST
12090: LIST
12091: LIST
12092: LIST
12093: LIST
12094: LIST
12095: LIST
12096: LIST
12097: LIST
12098: LIST
12099: LIST
12100: LIST
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: PUSH
12106: EMPTY
12107: LIST
12108: LIST
12109: ST_TO_ADDR
12110: GO 12885
12112: LD_INT 16
12114: DOUBLE
12115: EQUAL
12116: IFTRUE 12120
12118: GO 12256
12120: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
12121: LD_ADDR_VAR 0 2
12125: PUSH
12126: LD_INT 2
12128: PUSH
12129: LD_INT 4
12131: PUSH
12132: LD_INT 5
12134: PUSH
12135: LD_INT 7
12137: PUSH
12138: LD_INT 11
12140: PUSH
12141: LD_INT 12
12143: PUSH
12144: LD_INT 15
12146: PUSH
12147: LD_INT 16
12149: PUSH
12150: LD_INT 20
12152: PUSH
12153: LD_INT 21
12155: PUSH
12156: LD_INT 22
12158: PUSH
12159: LD_INT 23
12161: PUSH
12162: LD_INT 25
12164: PUSH
12165: LD_INT 26
12167: PUSH
12168: LD_INT 30
12170: PUSH
12171: LD_INT 31
12173: PUSH
12174: LD_INT 32
12176: PUSH
12177: LD_INT 33
12179: PUSH
12180: LD_INT 34
12182: PUSH
12183: EMPTY
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: PUSH
12204: LD_INT 101
12206: PUSH
12207: LD_INT 102
12209: PUSH
12210: LD_INT 103
12212: PUSH
12213: LD_INT 106
12215: PUSH
12216: LD_INT 108
12218: PUSH
12219: LD_INT 112
12221: PUSH
12222: LD_INT 113
12224: PUSH
12225: LD_INT 114
12227: PUSH
12228: LD_INT 116
12230: PUSH
12231: LD_INT 117
12233: PUSH
12234: LD_INT 118
12236: PUSH
12237: EMPTY
12238: LIST
12239: LIST
12240: LIST
12241: LIST
12242: LIST
12243: LIST
12244: LIST
12245: LIST
12246: LIST
12247: LIST
12248: LIST
12249: PUSH
12250: EMPTY
12251: LIST
12252: LIST
12253: ST_TO_ADDR
12254: GO 12885
12256: LD_INT 17
12258: DOUBLE
12259: EQUAL
12260: IFTRUE 12264
12262: GO 12488
12264: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
12265: LD_ADDR_VAR 0 2
12269: PUSH
12270: LD_INT 1
12272: PUSH
12273: LD_INT 2
12275: PUSH
12276: LD_INT 3
12278: PUSH
12279: LD_INT 4
12281: PUSH
12282: LD_INT 5
12284: PUSH
12285: LD_INT 6
12287: PUSH
12288: LD_INT 7
12290: PUSH
12291: LD_INT 8
12293: PUSH
12294: LD_INT 9
12296: PUSH
12297: LD_INT 10
12299: PUSH
12300: LD_INT 11
12302: PUSH
12303: LD_INT 12
12305: PUSH
12306: LD_INT 13
12308: PUSH
12309: LD_INT 14
12311: PUSH
12312: LD_INT 15
12314: PUSH
12315: LD_INT 16
12317: PUSH
12318: LD_INT 17
12320: PUSH
12321: LD_INT 18
12323: PUSH
12324: LD_INT 19
12326: PUSH
12327: LD_INT 20
12329: PUSH
12330: LD_INT 21
12332: PUSH
12333: LD_INT 22
12335: PUSH
12336: LD_INT 23
12338: PUSH
12339: LD_INT 24
12341: PUSH
12342: LD_INT 25
12344: PUSH
12345: LD_INT 26
12347: PUSH
12348: LD_INT 27
12350: PUSH
12351: LD_INT 28
12353: PUSH
12354: LD_INT 29
12356: PUSH
12357: LD_INT 30
12359: PUSH
12360: LD_INT 31
12362: PUSH
12363: LD_INT 32
12365: PUSH
12366: LD_INT 33
12368: PUSH
12369: LD_INT 34
12371: PUSH
12372: LD_INT 36
12374: PUSH
12375: EMPTY
12376: LIST
12377: LIST
12378: LIST
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: LIST
12391: LIST
12392: LIST
12393: LIST
12394: LIST
12395: LIST
12396: LIST
12397: LIST
12398: LIST
12399: LIST
12400: LIST
12401: LIST
12402: LIST
12403: LIST
12404: LIST
12405: LIST
12406: LIST
12407: LIST
12408: LIST
12409: LIST
12410: LIST
12411: PUSH
12412: LD_INT 101
12414: PUSH
12415: LD_INT 102
12417: PUSH
12418: LD_INT 103
12420: PUSH
12421: LD_INT 104
12423: PUSH
12424: LD_INT 105
12426: PUSH
12427: LD_INT 106
12429: PUSH
12430: LD_INT 107
12432: PUSH
12433: LD_INT 108
12435: PUSH
12436: LD_INT 109
12438: PUSH
12439: LD_INT 110
12441: PUSH
12442: LD_INT 111
12444: PUSH
12445: LD_INT 112
12447: PUSH
12448: LD_INT 113
12450: PUSH
12451: LD_INT 114
12453: PUSH
12454: LD_INT 116
12456: PUSH
12457: LD_INT 117
12459: PUSH
12460: LD_INT 118
12462: PUSH
12463: EMPTY
12464: LIST
12465: LIST
12466: LIST
12467: LIST
12468: LIST
12469: LIST
12470: LIST
12471: LIST
12472: LIST
12473: LIST
12474: LIST
12475: LIST
12476: LIST
12477: LIST
12478: LIST
12479: LIST
12480: LIST
12481: PUSH
12482: EMPTY
12483: LIST
12484: LIST
12485: ST_TO_ADDR
12486: GO 12885
12488: LD_INT 18
12490: DOUBLE
12491: EQUAL
12492: IFTRUE 12496
12494: GO 12644
12496: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
12497: LD_ADDR_VAR 0 2
12501: PUSH
12502: LD_INT 2
12504: PUSH
12505: LD_INT 4
12507: PUSH
12508: LD_INT 5
12510: PUSH
12511: LD_INT 7
12513: PUSH
12514: LD_INT 11
12516: PUSH
12517: LD_INT 12
12519: PUSH
12520: LD_INT 15
12522: PUSH
12523: LD_INT 16
12525: PUSH
12526: LD_INT 20
12528: PUSH
12529: LD_INT 21
12531: PUSH
12532: LD_INT 22
12534: PUSH
12535: LD_INT 23
12537: PUSH
12538: LD_INT 25
12540: PUSH
12541: LD_INT 26
12543: PUSH
12544: LD_INT 30
12546: PUSH
12547: LD_INT 31
12549: PUSH
12550: LD_INT 32
12552: PUSH
12553: LD_INT 33
12555: PUSH
12556: LD_INT 34
12558: PUSH
12559: LD_INT 35
12561: PUSH
12562: LD_INT 36
12564: PUSH
12565: EMPTY
12566: LIST
12567: LIST
12568: LIST
12569: LIST
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: LIST
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: PUSH
12588: LD_INT 101
12590: PUSH
12591: LD_INT 102
12593: PUSH
12594: LD_INT 103
12596: PUSH
12597: LD_INT 106
12599: PUSH
12600: LD_INT 108
12602: PUSH
12603: LD_INT 112
12605: PUSH
12606: LD_INT 113
12608: PUSH
12609: LD_INT 114
12611: PUSH
12612: LD_INT 115
12614: PUSH
12615: LD_INT 116
12617: PUSH
12618: LD_INT 117
12620: PUSH
12621: LD_INT 118
12623: PUSH
12624: EMPTY
12625: LIST
12626: LIST
12627: LIST
12628: LIST
12629: LIST
12630: LIST
12631: LIST
12632: LIST
12633: LIST
12634: LIST
12635: LIST
12636: LIST
12637: PUSH
12638: EMPTY
12639: LIST
12640: LIST
12641: ST_TO_ADDR
12642: GO 12885
12644: LD_INT 19
12646: DOUBLE
12647: EQUAL
12648: IFTRUE 12652
12650: GO 12884
12652: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
12653: LD_ADDR_VAR 0 2
12657: PUSH
12658: LD_INT 1
12660: PUSH
12661: LD_INT 2
12663: PUSH
12664: LD_INT 3
12666: PUSH
12667: LD_INT 4
12669: PUSH
12670: LD_INT 5
12672: PUSH
12673: LD_INT 6
12675: PUSH
12676: LD_INT 7
12678: PUSH
12679: LD_INT 8
12681: PUSH
12682: LD_INT 9
12684: PUSH
12685: LD_INT 10
12687: PUSH
12688: LD_INT 11
12690: PUSH
12691: LD_INT 12
12693: PUSH
12694: LD_INT 13
12696: PUSH
12697: LD_INT 14
12699: PUSH
12700: LD_INT 15
12702: PUSH
12703: LD_INT 16
12705: PUSH
12706: LD_INT 17
12708: PUSH
12709: LD_INT 18
12711: PUSH
12712: LD_INT 19
12714: PUSH
12715: LD_INT 20
12717: PUSH
12718: LD_INT 21
12720: PUSH
12721: LD_INT 22
12723: PUSH
12724: LD_INT 23
12726: PUSH
12727: LD_INT 24
12729: PUSH
12730: LD_INT 25
12732: PUSH
12733: LD_INT 26
12735: PUSH
12736: LD_INT 27
12738: PUSH
12739: LD_INT 28
12741: PUSH
12742: LD_INT 29
12744: PUSH
12745: LD_INT 30
12747: PUSH
12748: LD_INT 31
12750: PUSH
12751: LD_INT 32
12753: PUSH
12754: LD_INT 33
12756: PUSH
12757: LD_INT 34
12759: PUSH
12760: LD_INT 35
12762: PUSH
12763: LD_INT 36
12765: PUSH
12766: EMPTY
12767: LIST
12768: LIST
12769: LIST
12770: LIST
12771: LIST
12772: LIST
12773: LIST
12774: LIST
12775: LIST
12776: LIST
12777: LIST
12778: LIST
12779: LIST
12780: LIST
12781: LIST
12782: LIST
12783: LIST
12784: LIST
12785: LIST
12786: LIST
12787: LIST
12788: LIST
12789: LIST
12790: LIST
12791: LIST
12792: LIST
12793: LIST
12794: LIST
12795: LIST
12796: LIST
12797: LIST
12798: LIST
12799: LIST
12800: LIST
12801: LIST
12802: LIST
12803: PUSH
12804: LD_INT 101
12806: PUSH
12807: LD_INT 102
12809: PUSH
12810: LD_INT 103
12812: PUSH
12813: LD_INT 104
12815: PUSH
12816: LD_INT 105
12818: PUSH
12819: LD_INT 106
12821: PUSH
12822: LD_INT 107
12824: PUSH
12825: LD_INT 108
12827: PUSH
12828: LD_INT 109
12830: PUSH
12831: LD_INT 110
12833: PUSH
12834: LD_INT 111
12836: PUSH
12837: LD_INT 112
12839: PUSH
12840: LD_INT 113
12842: PUSH
12843: LD_INT 114
12845: PUSH
12846: LD_INT 115
12848: PUSH
12849: LD_INT 116
12851: PUSH
12852: LD_INT 117
12854: PUSH
12855: LD_INT 118
12857: PUSH
12858: EMPTY
12859: LIST
12860: LIST
12861: LIST
12862: LIST
12863: LIST
12864: LIST
12865: LIST
12866: LIST
12867: LIST
12868: LIST
12869: LIST
12870: LIST
12871: LIST
12872: LIST
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: PUSH
12878: EMPTY
12879: LIST
12880: LIST
12881: ST_TO_ADDR
12882: GO 12885
12884: POP
// end else
12885: GO 13116
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12887: LD_ADDR_VAR 0 2
12891: PUSH
12892: LD_INT 1
12894: PUSH
12895: LD_INT 2
12897: PUSH
12898: LD_INT 3
12900: PUSH
12901: LD_INT 4
12903: PUSH
12904: LD_INT 5
12906: PUSH
12907: LD_INT 6
12909: PUSH
12910: LD_INT 7
12912: PUSH
12913: LD_INT 8
12915: PUSH
12916: LD_INT 9
12918: PUSH
12919: LD_INT 10
12921: PUSH
12922: LD_INT 11
12924: PUSH
12925: LD_INT 12
12927: PUSH
12928: LD_INT 13
12930: PUSH
12931: LD_INT 14
12933: PUSH
12934: LD_INT 15
12936: PUSH
12937: LD_INT 16
12939: PUSH
12940: LD_INT 17
12942: PUSH
12943: LD_INT 18
12945: PUSH
12946: LD_INT 19
12948: PUSH
12949: LD_INT 20
12951: PUSH
12952: LD_INT 21
12954: PUSH
12955: LD_INT 22
12957: PUSH
12958: LD_INT 23
12960: PUSH
12961: LD_INT 24
12963: PUSH
12964: LD_INT 25
12966: PUSH
12967: LD_INT 26
12969: PUSH
12970: LD_INT 27
12972: PUSH
12973: LD_INT 28
12975: PUSH
12976: LD_INT 29
12978: PUSH
12979: LD_INT 30
12981: PUSH
12982: LD_INT 31
12984: PUSH
12985: LD_INT 32
12987: PUSH
12988: LD_INT 33
12990: PUSH
12991: LD_INT 34
12993: PUSH
12994: LD_INT 35
12996: PUSH
12997: LD_INT 36
12999: PUSH
13000: EMPTY
13001: LIST
13002: LIST
13003: LIST
13004: LIST
13005: LIST
13006: LIST
13007: LIST
13008: LIST
13009: LIST
13010: LIST
13011: LIST
13012: LIST
13013: LIST
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: LIST
13019: LIST
13020: LIST
13021: LIST
13022: LIST
13023: LIST
13024: LIST
13025: LIST
13026: LIST
13027: LIST
13028: LIST
13029: LIST
13030: LIST
13031: LIST
13032: LIST
13033: LIST
13034: LIST
13035: LIST
13036: LIST
13037: PUSH
13038: LD_INT 101
13040: PUSH
13041: LD_INT 102
13043: PUSH
13044: LD_INT 103
13046: PUSH
13047: LD_INT 104
13049: PUSH
13050: LD_INT 105
13052: PUSH
13053: LD_INT 106
13055: PUSH
13056: LD_INT 107
13058: PUSH
13059: LD_INT 108
13061: PUSH
13062: LD_INT 109
13064: PUSH
13065: LD_INT 110
13067: PUSH
13068: LD_INT 111
13070: PUSH
13071: LD_INT 112
13073: PUSH
13074: LD_INT 113
13076: PUSH
13077: LD_INT 114
13079: PUSH
13080: LD_INT 115
13082: PUSH
13083: LD_INT 116
13085: PUSH
13086: LD_INT 117
13088: PUSH
13089: LD_INT 118
13091: PUSH
13092: EMPTY
13093: LIST
13094: LIST
13095: LIST
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: LIST
13101: LIST
13102: LIST
13103: LIST
13104: LIST
13105: LIST
13106: LIST
13107: LIST
13108: LIST
13109: LIST
13110: LIST
13111: PUSH
13112: EMPTY
13113: LIST
13114: LIST
13115: ST_TO_ADDR
// if result then
13116: LD_VAR 0 2
13120: IFFALSE 13906
// begin normal :=  ;
13122: LD_ADDR_VAR 0 5
13126: PUSH
13127: LD_STRING 
13129: ST_TO_ADDR
// hardcore :=  ;
13130: LD_ADDR_VAR 0 6
13134: PUSH
13135: LD_STRING 
13137: ST_TO_ADDR
// active :=  ;
13138: LD_ADDR_VAR 0 7
13142: PUSH
13143: LD_STRING 
13145: ST_TO_ADDR
// for i = 1 to normalCounter do
13146: LD_ADDR_VAR 0 8
13150: PUSH
13151: DOUBLE
13152: LD_INT 1
13154: DEC
13155: ST_TO_ADDR
13156: LD_EXP 24
13160: PUSH
13161: FOR_TO
13162: IFFALSE 13263
// begin tmp := 0 ;
13164: LD_ADDR_VAR 0 3
13168: PUSH
13169: LD_STRING 0
13171: ST_TO_ADDR
// if result [ 1 ] then
13172: LD_VAR 0 2
13176: PUSH
13177: LD_INT 1
13179: ARRAY
13180: IFFALSE 13245
// if result [ 1 ] [ 1 ] = i then
13182: LD_VAR 0 2
13186: PUSH
13187: LD_INT 1
13189: ARRAY
13190: PUSH
13191: LD_INT 1
13193: ARRAY
13194: PUSH
13195: LD_VAR 0 8
13199: EQUAL
13200: IFFALSE 13245
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
13202: LD_ADDR_VAR 0 2
13206: PUSH
13207: LD_VAR 0 2
13211: PPUSH
13212: LD_INT 1
13214: PPUSH
13215: LD_VAR 0 2
13219: PUSH
13220: LD_INT 1
13222: ARRAY
13223: PPUSH
13224: LD_INT 1
13226: PPUSH
13227: CALL_OW 3
13231: PPUSH
13232: CALL_OW 1
13236: ST_TO_ADDR
// tmp := 1 ;
13237: LD_ADDR_VAR 0 3
13241: PUSH
13242: LD_STRING 1
13244: ST_TO_ADDR
// end ; normal := normal & tmp ;
13245: LD_ADDR_VAR 0 5
13249: PUSH
13250: LD_VAR 0 5
13254: PUSH
13255: LD_VAR 0 3
13259: STR
13260: ST_TO_ADDR
// end ;
13261: GO 13161
13263: POP
13264: POP
// for i = 1 to hardcoreCounter do
13265: LD_ADDR_VAR 0 8
13269: PUSH
13270: DOUBLE
13271: LD_INT 1
13273: DEC
13274: ST_TO_ADDR
13275: LD_EXP 25
13279: PUSH
13280: FOR_TO
13281: IFFALSE 13386
// begin tmp := 0 ;
13283: LD_ADDR_VAR 0 3
13287: PUSH
13288: LD_STRING 0
13290: ST_TO_ADDR
// if result [ 2 ] then
13291: LD_VAR 0 2
13295: PUSH
13296: LD_INT 2
13298: ARRAY
13299: IFFALSE 13368
// if result [ 2 ] [ 1 ] = 100 + i then
13301: LD_VAR 0 2
13305: PUSH
13306: LD_INT 2
13308: ARRAY
13309: PUSH
13310: LD_INT 1
13312: ARRAY
13313: PUSH
13314: LD_INT 100
13316: PUSH
13317: LD_VAR 0 8
13321: PLUS
13322: EQUAL
13323: IFFALSE 13368
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
13325: LD_ADDR_VAR 0 2
13329: PUSH
13330: LD_VAR 0 2
13334: PPUSH
13335: LD_INT 2
13337: PPUSH
13338: LD_VAR 0 2
13342: PUSH
13343: LD_INT 2
13345: ARRAY
13346: PPUSH
13347: LD_INT 1
13349: PPUSH
13350: CALL_OW 3
13354: PPUSH
13355: CALL_OW 1
13359: ST_TO_ADDR
// tmp := 1 ;
13360: LD_ADDR_VAR 0 3
13364: PUSH
13365: LD_STRING 1
13367: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13368: LD_ADDR_VAR 0 6
13372: PUSH
13373: LD_VAR 0 6
13377: PUSH
13378: LD_VAR 0 3
13382: STR
13383: ST_TO_ADDR
// end ;
13384: GO 13280
13386: POP
13387: POP
// if isGameLoad then
13388: LD_VAR 0 1
13392: IFFALSE 13867
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
13394: LD_ADDR_VAR 0 4
13398: PUSH
13399: LD_EXP 28
13403: PUSH
13404: LD_EXP 27
13408: PUSH
13409: LD_EXP 29
13413: PUSH
13414: LD_EXP 26
13418: PUSH
13419: LD_EXP 30
13423: PUSH
13424: LD_EXP 31
13428: PUSH
13429: LD_EXP 32
13433: PUSH
13434: LD_EXP 33
13438: PUSH
13439: LD_EXP 34
13443: PUSH
13444: LD_EXP 35
13448: PUSH
13449: LD_EXP 36
13453: PUSH
13454: LD_EXP 37
13458: PUSH
13459: LD_EXP 38
13463: PUSH
13464: LD_EXP 39
13468: PUSH
13469: LD_EXP 47
13473: PUSH
13474: LD_EXP 48
13478: PUSH
13479: LD_EXP 49
13483: PUSH
13484: LD_EXP 50
13488: PUSH
13489: LD_EXP 52
13493: PUSH
13494: LD_EXP 53
13498: PUSH
13499: LD_EXP 54
13503: PUSH
13504: LD_EXP 57
13508: PUSH
13509: LD_EXP 59
13513: PUSH
13514: LD_EXP 60
13518: PUSH
13519: LD_EXP 61
13523: PUSH
13524: LD_EXP 63
13528: PUSH
13529: LD_EXP 64
13533: PUSH
13534: LD_EXP 67
13538: PUSH
13539: LD_EXP 68
13543: PUSH
13544: LD_EXP 69
13548: PUSH
13549: LD_EXP 70
13553: PUSH
13554: LD_EXP 71
13558: PUSH
13559: LD_EXP 72
13563: PUSH
13564: LD_EXP 73
13568: PUSH
13569: LD_EXP 74
13573: PUSH
13574: LD_EXP 75
13578: PUSH
13579: LD_EXP 40
13583: PUSH
13584: LD_EXP 41
13588: PUSH
13589: LD_EXP 44
13593: PUSH
13594: LD_EXP 45
13598: PUSH
13599: LD_EXP 46
13603: PUSH
13604: LD_EXP 42
13608: PUSH
13609: LD_EXP 43
13613: PUSH
13614: LD_EXP 51
13618: PUSH
13619: LD_EXP 55
13623: PUSH
13624: LD_EXP 56
13628: PUSH
13629: LD_EXP 58
13633: PUSH
13634: LD_EXP 62
13638: PUSH
13639: LD_EXP 65
13643: PUSH
13644: LD_EXP 66
13648: PUSH
13649: LD_EXP 76
13653: PUSH
13654: LD_EXP 77
13658: PUSH
13659: LD_EXP 78
13663: PUSH
13664: LD_EXP 79
13668: PUSH
13669: EMPTY
13670: LIST
13671: LIST
13672: LIST
13673: LIST
13674: LIST
13675: LIST
13676: LIST
13677: LIST
13678: LIST
13679: LIST
13680: LIST
13681: LIST
13682: LIST
13683: LIST
13684: LIST
13685: LIST
13686: LIST
13687: LIST
13688: LIST
13689: LIST
13690: LIST
13691: LIST
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: LIST
13697: LIST
13698: LIST
13699: LIST
13700: LIST
13701: LIST
13702: LIST
13703: LIST
13704: LIST
13705: LIST
13706: LIST
13707: LIST
13708: LIST
13709: LIST
13710: LIST
13711: LIST
13712: LIST
13713: LIST
13714: LIST
13715: LIST
13716: LIST
13717: LIST
13718: LIST
13719: LIST
13720: LIST
13721: LIST
13722: LIST
13723: LIST
13724: ST_TO_ADDR
// tmp :=  ;
13725: LD_ADDR_VAR 0 3
13729: PUSH
13730: LD_STRING 
13732: ST_TO_ADDR
// for i = 1 to normalCounter do
13733: LD_ADDR_VAR 0 8
13737: PUSH
13738: DOUBLE
13739: LD_INT 1
13741: DEC
13742: ST_TO_ADDR
13743: LD_EXP 24
13747: PUSH
13748: FOR_TO
13749: IFFALSE 13785
// begin if flags [ i ] then
13751: LD_VAR 0 4
13755: PUSH
13756: LD_VAR 0 8
13760: ARRAY
13761: IFFALSE 13783
// tmp := tmp & i & ; ;
13763: LD_ADDR_VAR 0 3
13767: PUSH
13768: LD_VAR 0 3
13772: PUSH
13773: LD_VAR 0 8
13777: STR
13778: PUSH
13779: LD_STRING ;
13781: STR
13782: ST_TO_ADDR
// end ;
13783: GO 13748
13785: POP
13786: POP
// for i = 1 to hardcoreCounter do
13787: LD_ADDR_VAR 0 8
13791: PUSH
13792: DOUBLE
13793: LD_INT 1
13795: DEC
13796: ST_TO_ADDR
13797: LD_EXP 25
13801: PUSH
13802: FOR_TO
13803: IFFALSE 13849
// begin if flags [ normalCounter + i ] then
13805: LD_VAR 0 4
13809: PUSH
13810: LD_EXP 24
13814: PUSH
13815: LD_VAR 0 8
13819: PLUS
13820: ARRAY
13821: IFFALSE 13847
// tmp := tmp & ( 100 + i ) & ; ;
13823: LD_ADDR_VAR 0 3
13827: PUSH
13828: LD_VAR 0 3
13832: PUSH
13833: LD_INT 100
13835: PUSH
13836: LD_VAR 0 8
13840: PLUS
13841: STR
13842: PUSH
13843: LD_STRING ;
13845: STR
13846: ST_TO_ADDR
// end ;
13847: GO 13802
13849: POP
13850: POP
// if tmp then
13851: LD_VAR 0 3
13855: IFFALSE 13867
// active := tmp ;
13857: LD_ADDR_VAR 0 7
13861: PUSH
13862: LD_VAR 0 3
13866: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13867: LD_STRING getStreamItemsFromMission("
13869: PUSH
13870: LD_VAR 0 5
13874: STR
13875: PUSH
13876: LD_STRING ","
13878: STR
13879: PUSH
13880: LD_VAR 0 6
13884: STR
13885: PUSH
13886: LD_STRING ","
13888: STR
13889: PUSH
13890: LD_VAR 0 7
13894: STR
13895: PUSH
13896: LD_STRING ")
13898: STR
13899: PPUSH
13900: CALL_OW 559
// end else
13904: GO 13913
// ToLua ( getStreamItemsFromMission("","","") ) ;
13906: LD_STRING getStreamItemsFromMission("","","")
13908: PPUSH
13909: CALL_OW 559
// end ;
13913: LD_VAR 0 2
13917: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13918: LD_EXP 23
13922: PUSH
13923: LD_EXP 28
13927: AND
13928: IFFALSE 14052
13930: GO 13932
13932: DISABLE
13933: LD_INT 0
13935: PPUSH
13936: PPUSH
// begin enable ;
13937: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13938: LD_ADDR_VAR 0 2
13942: PUSH
13943: LD_INT 22
13945: PUSH
13946: LD_OWVAR 2
13950: PUSH
13951: EMPTY
13952: LIST
13953: LIST
13954: PUSH
13955: LD_INT 2
13957: PUSH
13958: LD_INT 34
13960: PUSH
13961: LD_INT 7
13963: PUSH
13964: EMPTY
13965: LIST
13966: LIST
13967: PUSH
13968: LD_INT 34
13970: PUSH
13971: LD_INT 45
13973: PUSH
13974: EMPTY
13975: LIST
13976: LIST
13977: PUSH
13978: LD_INT 34
13980: PUSH
13981: LD_INT 28
13983: PUSH
13984: EMPTY
13985: LIST
13986: LIST
13987: PUSH
13988: LD_INT 34
13990: PUSH
13991: LD_INT 47
13993: PUSH
13994: EMPTY
13995: LIST
13996: LIST
13997: PUSH
13998: EMPTY
13999: LIST
14000: LIST
14001: LIST
14002: LIST
14003: LIST
14004: PUSH
14005: EMPTY
14006: LIST
14007: LIST
14008: PPUSH
14009: CALL_OW 69
14013: ST_TO_ADDR
// if not tmp then
14014: LD_VAR 0 2
14018: NOT
14019: IFFALSE 14023
// exit ;
14021: GO 14052
// for i in tmp do
14023: LD_ADDR_VAR 0 1
14027: PUSH
14028: LD_VAR 0 2
14032: PUSH
14033: FOR_IN
14034: IFFALSE 14050
// begin SetLives ( i , 0 ) ;
14036: LD_VAR 0 1
14040: PPUSH
14041: LD_INT 0
14043: PPUSH
14044: CALL_OW 234
// end ;
14048: GO 14033
14050: POP
14051: POP
// end ;
14052: PPOPN 2
14054: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
14055: LD_EXP 23
14059: PUSH
14060: LD_EXP 29
14064: AND
14065: IFFALSE 14149
14067: GO 14069
14069: DISABLE
14070: LD_INT 0
14072: PPUSH
14073: PPUSH
// begin enable ;
14074: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
14075: LD_ADDR_VAR 0 2
14079: PUSH
14080: LD_INT 22
14082: PUSH
14083: LD_OWVAR 2
14087: PUSH
14088: EMPTY
14089: LIST
14090: LIST
14091: PUSH
14092: LD_INT 32
14094: PUSH
14095: LD_INT 3
14097: PUSH
14098: EMPTY
14099: LIST
14100: LIST
14101: PUSH
14102: EMPTY
14103: LIST
14104: LIST
14105: PPUSH
14106: CALL_OW 69
14110: ST_TO_ADDR
// if not tmp then
14111: LD_VAR 0 2
14115: NOT
14116: IFFALSE 14120
// exit ;
14118: GO 14149
// for i in tmp do
14120: LD_ADDR_VAR 0 1
14124: PUSH
14125: LD_VAR 0 2
14129: PUSH
14130: FOR_IN
14131: IFFALSE 14147
// begin SetLives ( i , 0 ) ;
14133: LD_VAR 0 1
14137: PPUSH
14138: LD_INT 0
14140: PPUSH
14141: CALL_OW 234
// end ;
14145: GO 14130
14147: POP
14148: POP
// end ;
14149: PPOPN 2
14151: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
14152: LD_EXP 23
14156: PUSH
14157: LD_EXP 26
14161: AND
14162: IFFALSE 14255
14164: GO 14166
14166: DISABLE
14167: LD_INT 0
14169: PPUSH
// begin enable ;
14170: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
14171: LD_ADDR_VAR 0 1
14175: PUSH
14176: LD_INT 22
14178: PUSH
14179: LD_OWVAR 2
14183: PUSH
14184: EMPTY
14185: LIST
14186: LIST
14187: PUSH
14188: LD_INT 2
14190: PUSH
14191: LD_INT 25
14193: PUSH
14194: LD_INT 5
14196: PUSH
14197: EMPTY
14198: LIST
14199: LIST
14200: PUSH
14201: LD_INT 25
14203: PUSH
14204: LD_INT 9
14206: PUSH
14207: EMPTY
14208: LIST
14209: LIST
14210: PUSH
14211: LD_INT 25
14213: PUSH
14214: LD_INT 8
14216: PUSH
14217: EMPTY
14218: LIST
14219: LIST
14220: PUSH
14221: EMPTY
14222: LIST
14223: LIST
14224: LIST
14225: LIST
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: PPUSH
14231: CALL_OW 69
14235: PUSH
14236: FOR_IN
14237: IFFALSE 14253
// begin SetClass ( i , 1 ) ;
14239: LD_VAR 0 1
14243: PPUSH
14244: LD_INT 1
14246: PPUSH
14247: CALL_OW 336
// end ;
14251: GO 14236
14253: POP
14254: POP
// end ;
14255: PPOPN 1
14257: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
14258: LD_EXP 23
14262: PUSH
14263: LD_EXP 27
14267: AND
14268: PUSH
14269: LD_OWVAR 65
14273: PUSH
14274: LD_INT 7
14276: LESS
14277: AND
14278: IFFALSE 14292
14280: GO 14282
14282: DISABLE
// begin enable ;
14283: ENABLE
// game_speed := 7 ;
14284: LD_ADDR_OWVAR 65
14288: PUSH
14289: LD_INT 7
14291: ST_TO_ADDR
// end ;
14292: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
14293: LD_EXP 23
14297: PUSH
14298: LD_EXP 30
14302: AND
14303: IFFALSE 14505
14305: GO 14307
14307: DISABLE
14308: LD_INT 0
14310: PPUSH
14311: PPUSH
14312: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14313: LD_ADDR_VAR 0 3
14317: PUSH
14318: LD_INT 81
14320: PUSH
14321: LD_OWVAR 2
14325: PUSH
14326: EMPTY
14327: LIST
14328: LIST
14329: PUSH
14330: LD_INT 21
14332: PUSH
14333: LD_INT 1
14335: PUSH
14336: EMPTY
14337: LIST
14338: LIST
14339: PUSH
14340: EMPTY
14341: LIST
14342: LIST
14343: PPUSH
14344: CALL_OW 69
14348: ST_TO_ADDR
// if not tmp then
14349: LD_VAR 0 3
14353: NOT
14354: IFFALSE 14358
// exit ;
14356: GO 14505
// if tmp > 5 then
14358: LD_VAR 0 3
14362: PUSH
14363: LD_INT 5
14365: GREATER
14366: IFFALSE 14378
// k := 5 else
14368: LD_ADDR_VAR 0 2
14372: PUSH
14373: LD_INT 5
14375: ST_TO_ADDR
14376: GO 14388
// k := tmp ;
14378: LD_ADDR_VAR 0 2
14382: PUSH
14383: LD_VAR 0 3
14387: ST_TO_ADDR
// for i := 1 to k do
14388: LD_ADDR_VAR 0 1
14392: PUSH
14393: DOUBLE
14394: LD_INT 1
14396: DEC
14397: ST_TO_ADDR
14398: LD_VAR 0 2
14402: PUSH
14403: FOR_TO
14404: IFFALSE 14503
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
14406: LD_VAR 0 3
14410: PUSH
14411: LD_VAR 0 1
14415: ARRAY
14416: PPUSH
14417: LD_VAR 0 1
14421: PUSH
14422: LD_INT 4
14424: MOD
14425: PUSH
14426: LD_INT 1
14428: PLUS
14429: PPUSH
14430: CALL_OW 259
14434: PUSH
14435: LD_INT 10
14437: LESS
14438: IFFALSE 14501
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14440: LD_VAR 0 3
14444: PUSH
14445: LD_VAR 0 1
14449: ARRAY
14450: PPUSH
14451: LD_VAR 0 1
14455: PUSH
14456: LD_INT 4
14458: MOD
14459: PUSH
14460: LD_INT 1
14462: PLUS
14463: PPUSH
14464: LD_VAR 0 3
14468: PUSH
14469: LD_VAR 0 1
14473: ARRAY
14474: PPUSH
14475: LD_VAR 0 1
14479: PUSH
14480: LD_INT 4
14482: MOD
14483: PUSH
14484: LD_INT 1
14486: PLUS
14487: PPUSH
14488: CALL_OW 259
14492: PUSH
14493: LD_INT 1
14495: PLUS
14496: PPUSH
14497: CALL_OW 237
14501: GO 14403
14503: POP
14504: POP
// end ;
14505: PPOPN 3
14507: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
14508: LD_EXP 23
14512: PUSH
14513: LD_EXP 31
14517: AND
14518: IFFALSE 14538
14520: GO 14522
14522: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
14523: LD_INT 4
14525: PPUSH
14526: LD_OWVAR 2
14530: PPUSH
14531: LD_INT 0
14533: PPUSH
14534: CALL_OW 324
14538: END
// every 0 0$1 trigger StreamModeActive and sShovel do
14539: LD_EXP 23
14543: PUSH
14544: LD_EXP 60
14548: AND
14549: IFFALSE 14569
14551: GO 14553
14553: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14554: LD_INT 19
14556: PPUSH
14557: LD_OWVAR 2
14561: PPUSH
14562: LD_INT 0
14564: PPUSH
14565: CALL_OW 324
14569: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14570: LD_EXP 23
14574: PUSH
14575: LD_EXP 32
14579: AND
14580: IFFALSE 14682
14582: GO 14584
14584: DISABLE
14585: LD_INT 0
14587: PPUSH
14588: PPUSH
// begin enable ;
14589: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14590: LD_ADDR_VAR 0 2
14594: PUSH
14595: LD_INT 22
14597: PUSH
14598: LD_OWVAR 2
14602: PUSH
14603: EMPTY
14604: LIST
14605: LIST
14606: PUSH
14607: LD_INT 2
14609: PUSH
14610: LD_INT 34
14612: PUSH
14613: LD_INT 11
14615: PUSH
14616: EMPTY
14617: LIST
14618: LIST
14619: PUSH
14620: LD_INT 34
14622: PUSH
14623: LD_INT 30
14625: PUSH
14626: EMPTY
14627: LIST
14628: LIST
14629: PUSH
14630: EMPTY
14631: LIST
14632: LIST
14633: LIST
14634: PUSH
14635: EMPTY
14636: LIST
14637: LIST
14638: PPUSH
14639: CALL_OW 69
14643: ST_TO_ADDR
// if not tmp then
14644: LD_VAR 0 2
14648: NOT
14649: IFFALSE 14653
// exit ;
14651: GO 14682
// for i in tmp do
14653: LD_ADDR_VAR 0 1
14657: PUSH
14658: LD_VAR 0 2
14662: PUSH
14663: FOR_IN
14664: IFFALSE 14680
// begin SetLives ( i , 0 ) ;
14666: LD_VAR 0 1
14670: PPUSH
14671: LD_INT 0
14673: PPUSH
14674: CALL_OW 234
// end ;
14678: GO 14663
14680: POP
14681: POP
// end ;
14682: PPOPN 2
14684: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14685: LD_EXP 23
14689: PUSH
14690: LD_EXP 33
14694: AND
14695: IFFALSE 14715
14697: GO 14699
14699: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14700: LD_INT 32
14702: PPUSH
14703: LD_OWVAR 2
14707: PPUSH
14708: LD_INT 0
14710: PPUSH
14711: CALL_OW 324
14715: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14716: LD_EXP 23
14720: PUSH
14721: LD_EXP 34
14725: AND
14726: IFFALSE 14907
14728: GO 14730
14730: DISABLE
14731: LD_INT 0
14733: PPUSH
14734: PPUSH
14735: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14736: LD_ADDR_VAR 0 2
14740: PUSH
14741: LD_INT 22
14743: PUSH
14744: LD_OWVAR 2
14748: PUSH
14749: EMPTY
14750: LIST
14751: LIST
14752: PUSH
14753: LD_INT 33
14755: PUSH
14756: LD_INT 3
14758: PUSH
14759: EMPTY
14760: LIST
14761: LIST
14762: PUSH
14763: EMPTY
14764: LIST
14765: LIST
14766: PPUSH
14767: CALL_OW 69
14771: ST_TO_ADDR
// if not tmp then
14772: LD_VAR 0 2
14776: NOT
14777: IFFALSE 14781
// exit ;
14779: GO 14907
// side := 0 ;
14781: LD_ADDR_VAR 0 3
14785: PUSH
14786: LD_INT 0
14788: ST_TO_ADDR
// for i := 1 to 8 do
14789: LD_ADDR_VAR 0 1
14793: PUSH
14794: DOUBLE
14795: LD_INT 1
14797: DEC
14798: ST_TO_ADDR
14799: LD_INT 8
14801: PUSH
14802: FOR_TO
14803: IFFALSE 14851
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14805: LD_OWVAR 2
14809: PUSH
14810: LD_VAR 0 1
14814: NONEQUAL
14815: PUSH
14816: LD_OWVAR 2
14820: PPUSH
14821: LD_VAR 0 1
14825: PPUSH
14826: CALL_OW 81
14830: PUSH
14831: LD_INT 2
14833: EQUAL
14834: AND
14835: IFFALSE 14849
// begin side := i ;
14837: LD_ADDR_VAR 0 3
14841: PUSH
14842: LD_VAR 0 1
14846: ST_TO_ADDR
// break ;
14847: GO 14851
// end ;
14849: GO 14802
14851: POP
14852: POP
// if not side then
14853: LD_VAR 0 3
14857: NOT
14858: IFFALSE 14862
// exit ;
14860: GO 14907
// for i := 1 to tmp do
14862: LD_ADDR_VAR 0 1
14866: PUSH
14867: DOUBLE
14868: LD_INT 1
14870: DEC
14871: ST_TO_ADDR
14872: LD_VAR 0 2
14876: PUSH
14877: FOR_TO
14878: IFFALSE 14905
// if Prob ( 60 ) then
14880: LD_INT 60
14882: PPUSH
14883: CALL_OW 13
14887: IFFALSE 14903
// SetSide ( i , side ) ;
14889: LD_VAR 0 1
14893: PPUSH
14894: LD_VAR 0 3
14898: PPUSH
14899: CALL_OW 235
14903: GO 14877
14905: POP
14906: POP
// end ;
14907: PPOPN 3
14909: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14910: LD_EXP 23
14914: PUSH
14915: LD_EXP 36
14919: AND
14920: IFFALSE 15039
14922: GO 14924
14924: DISABLE
14925: LD_INT 0
14927: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14928: LD_ADDR_VAR 0 1
14932: PUSH
14933: LD_INT 22
14935: PUSH
14936: LD_OWVAR 2
14940: PUSH
14941: EMPTY
14942: LIST
14943: LIST
14944: PUSH
14945: LD_INT 21
14947: PUSH
14948: LD_INT 1
14950: PUSH
14951: EMPTY
14952: LIST
14953: LIST
14954: PUSH
14955: LD_INT 3
14957: PUSH
14958: LD_INT 23
14960: PUSH
14961: LD_INT 0
14963: PUSH
14964: EMPTY
14965: LIST
14966: LIST
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: PUSH
14972: EMPTY
14973: LIST
14974: LIST
14975: LIST
14976: PPUSH
14977: CALL_OW 69
14981: PUSH
14982: FOR_IN
14983: IFFALSE 15037
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14985: LD_VAR 0 1
14989: PPUSH
14990: CALL_OW 257
14994: PUSH
14995: LD_INT 1
14997: PUSH
14998: LD_INT 2
15000: PUSH
15001: LD_INT 3
15003: PUSH
15004: LD_INT 4
15006: PUSH
15007: EMPTY
15008: LIST
15009: LIST
15010: LIST
15011: LIST
15012: IN
15013: IFFALSE 15035
// SetClass ( un , rand ( 1 , 4 ) ) ;
15015: LD_VAR 0 1
15019: PPUSH
15020: LD_INT 1
15022: PPUSH
15023: LD_INT 4
15025: PPUSH
15026: CALL_OW 12
15030: PPUSH
15031: CALL_OW 336
15035: GO 14982
15037: POP
15038: POP
// end ;
15039: PPOPN 1
15041: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
15042: LD_EXP 23
15046: PUSH
15047: LD_EXP 35
15051: AND
15052: IFFALSE 15131
15054: GO 15056
15056: DISABLE
15057: LD_INT 0
15059: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15060: LD_ADDR_VAR 0 1
15064: PUSH
15065: LD_INT 22
15067: PUSH
15068: LD_OWVAR 2
15072: PUSH
15073: EMPTY
15074: LIST
15075: LIST
15076: PUSH
15077: LD_INT 21
15079: PUSH
15080: LD_INT 3
15082: PUSH
15083: EMPTY
15084: LIST
15085: LIST
15086: PUSH
15087: EMPTY
15088: LIST
15089: LIST
15090: PPUSH
15091: CALL_OW 69
15095: ST_TO_ADDR
// if not tmp then
15096: LD_VAR 0 1
15100: NOT
15101: IFFALSE 15105
// exit ;
15103: GO 15131
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
15105: LD_VAR 0 1
15109: PUSH
15110: LD_INT 1
15112: PPUSH
15113: LD_VAR 0 1
15117: PPUSH
15118: CALL_OW 12
15122: ARRAY
15123: PPUSH
15124: LD_INT 100
15126: PPUSH
15127: CALL_OW 234
// end ;
15131: PPOPN 1
15133: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
15134: LD_EXP 23
15138: PUSH
15139: LD_EXP 37
15143: AND
15144: IFFALSE 15242
15146: GO 15148
15148: DISABLE
15149: LD_INT 0
15151: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15152: LD_ADDR_VAR 0 1
15156: PUSH
15157: LD_INT 22
15159: PUSH
15160: LD_OWVAR 2
15164: PUSH
15165: EMPTY
15166: LIST
15167: LIST
15168: PUSH
15169: LD_INT 21
15171: PUSH
15172: LD_INT 1
15174: PUSH
15175: EMPTY
15176: LIST
15177: LIST
15178: PUSH
15179: EMPTY
15180: LIST
15181: LIST
15182: PPUSH
15183: CALL_OW 69
15187: ST_TO_ADDR
// if not tmp then
15188: LD_VAR 0 1
15192: NOT
15193: IFFALSE 15197
// exit ;
15195: GO 15242
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15197: LD_VAR 0 1
15201: PUSH
15202: LD_INT 1
15204: PPUSH
15205: LD_VAR 0 1
15209: PPUSH
15210: CALL_OW 12
15214: ARRAY
15215: PPUSH
15216: LD_INT 1
15218: PPUSH
15219: LD_INT 4
15221: PPUSH
15222: CALL_OW 12
15226: PPUSH
15227: LD_INT 3000
15229: PPUSH
15230: LD_INT 9000
15232: PPUSH
15233: CALL_OW 12
15237: PPUSH
15238: CALL_OW 492
// end ;
15242: PPOPN 1
15244: END
// every 0 0$1 trigger StreamModeActive and sDepot do
15245: LD_EXP 23
15249: PUSH
15250: LD_EXP 38
15254: AND
15255: IFFALSE 15275
15257: GO 15259
15259: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
15260: LD_INT 1
15262: PPUSH
15263: LD_OWVAR 2
15267: PPUSH
15268: LD_INT 0
15270: PPUSH
15271: CALL_OW 324
15275: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
15276: LD_EXP 23
15280: PUSH
15281: LD_EXP 39
15285: AND
15286: IFFALSE 15369
15288: GO 15290
15290: DISABLE
15291: LD_INT 0
15293: PPUSH
15294: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15295: LD_ADDR_VAR 0 2
15299: PUSH
15300: LD_INT 22
15302: PUSH
15303: LD_OWVAR 2
15307: PUSH
15308: EMPTY
15309: LIST
15310: LIST
15311: PUSH
15312: LD_INT 21
15314: PUSH
15315: LD_INT 3
15317: PUSH
15318: EMPTY
15319: LIST
15320: LIST
15321: PUSH
15322: EMPTY
15323: LIST
15324: LIST
15325: PPUSH
15326: CALL_OW 69
15330: ST_TO_ADDR
// if not tmp then
15331: LD_VAR 0 2
15335: NOT
15336: IFFALSE 15340
// exit ;
15338: GO 15369
// for i in tmp do
15340: LD_ADDR_VAR 0 1
15344: PUSH
15345: LD_VAR 0 2
15349: PUSH
15350: FOR_IN
15351: IFFALSE 15367
// SetBLevel ( i , 10 ) ;
15353: LD_VAR 0 1
15357: PPUSH
15358: LD_INT 10
15360: PPUSH
15361: CALL_OW 241
15365: GO 15350
15367: POP
15368: POP
// end ;
15369: PPOPN 2
15371: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
15372: LD_EXP 23
15376: PUSH
15377: LD_EXP 40
15381: AND
15382: IFFALSE 15493
15384: GO 15386
15386: DISABLE
15387: LD_INT 0
15389: PPUSH
15390: PPUSH
15391: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15392: LD_ADDR_VAR 0 3
15396: PUSH
15397: LD_INT 22
15399: PUSH
15400: LD_OWVAR 2
15404: PUSH
15405: EMPTY
15406: LIST
15407: LIST
15408: PUSH
15409: LD_INT 25
15411: PUSH
15412: LD_INT 1
15414: PUSH
15415: EMPTY
15416: LIST
15417: LIST
15418: PUSH
15419: EMPTY
15420: LIST
15421: LIST
15422: PPUSH
15423: CALL_OW 69
15427: ST_TO_ADDR
// if not tmp then
15428: LD_VAR 0 3
15432: NOT
15433: IFFALSE 15437
// exit ;
15435: GO 15493
// un := tmp [ rand ( 1 , tmp ) ] ;
15437: LD_ADDR_VAR 0 2
15441: PUSH
15442: LD_VAR 0 3
15446: PUSH
15447: LD_INT 1
15449: PPUSH
15450: LD_VAR 0 3
15454: PPUSH
15455: CALL_OW 12
15459: ARRAY
15460: ST_TO_ADDR
// if Crawls ( un ) then
15461: LD_VAR 0 2
15465: PPUSH
15466: CALL_OW 318
15470: IFFALSE 15481
// ComWalk ( un ) ;
15472: LD_VAR 0 2
15476: PPUSH
15477: CALL_OW 138
// SetClass ( un , class_sniper ) ;
15481: LD_VAR 0 2
15485: PPUSH
15486: LD_INT 5
15488: PPUSH
15489: CALL_OW 336
// end ;
15493: PPOPN 3
15495: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
15496: LD_EXP 23
15500: PUSH
15501: LD_EXP 41
15505: AND
15506: PUSH
15507: LD_OWVAR 67
15511: PUSH
15512: LD_INT 4
15514: LESS
15515: AND
15516: IFFALSE 15535
15518: GO 15520
15520: DISABLE
// begin Difficulty := Difficulty + 1 ;
15521: LD_ADDR_OWVAR 67
15525: PUSH
15526: LD_OWVAR 67
15530: PUSH
15531: LD_INT 1
15533: PLUS
15534: ST_TO_ADDR
// end ;
15535: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
15536: LD_EXP 23
15540: PUSH
15541: LD_EXP 42
15545: AND
15546: IFFALSE 15649
15548: GO 15550
15550: DISABLE
15551: LD_INT 0
15553: PPUSH
// begin for i := 1 to 5 do
15554: LD_ADDR_VAR 0 1
15558: PUSH
15559: DOUBLE
15560: LD_INT 1
15562: DEC
15563: ST_TO_ADDR
15564: LD_INT 5
15566: PUSH
15567: FOR_TO
15568: IFFALSE 15647
// begin uc_nation := nation_nature ;
15570: LD_ADDR_OWVAR 21
15574: PUSH
15575: LD_INT 0
15577: ST_TO_ADDR
// uc_side := 0 ;
15578: LD_ADDR_OWVAR 20
15582: PUSH
15583: LD_INT 0
15585: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15586: LD_ADDR_OWVAR 29
15590: PUSH
15591: LD_INT 12
15593: PUSH
15594: LD_INT 12
15596: PUSH
15597: EMPTY
15598: LIST
15599: LIST
15600: ST_TO_ADDR
// hc_agressivity := 20 ;
15601: LD_ADDR_OWVAR 35
15605: PUSH
15606: LD_INT 20
15608: ST_TO_ADDR
// hc_class := class_tiger ;
15609: LD_ADDR_OWVAR 28
15613: PUSH
15614: LD_INT 14
15616: ST_TO_ADDR
// hc_gallery :=  ;
15617: LD_ADDR_OWVAR 33
15621: PUSH
15622: LD_STRING 
15624: ST_TO_ADDR
// hc_name :=  ;
15625: LD_ADDR_OWVAR 26
15629: PUSH
15630: LD_STRING 
15632: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15633: CALL_OW 44
15637: PPUSH
15638: LD_INT 0
15640: PPUSH
15641: CALL_OW 51
// end ;
15645: GO 15567
15647: POP
15648: POP
// end ;
15649: PPOPN 1
15651: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15652: LD_EXP 23
15656: PUSH
15657: LD_EXP 43
15661: AND
15662: IFFALSE 15671
15664: GO 15666
15666: DISABLE
// StreamSibBomb ;
15667: CALL 15672 0 0
15671: END
// export function StreamSibBomb ; var i , x , y ; begin
15672: LD_INT 0
15674: PPUSH
15675: PPUSH
15676: PPUSH
15677: PPUSH
// result := false ;
15678: LD_ADDR_VAR 0 1
15682: PUSH
15683: LD_INT 0
15685: ST_TO_ADDR
// for i := 1 to 16 do
15686: LD_ADDR_VAR 0 2
15690: PUSH
15691: DOUBLE
15692: LD_INT 1
15694: DEC
15695: ST_TO_ADDR
15696: LD_INT 16
15698: PUSH
15699: FOR_TO
15700: IFFALSE 15899
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15702: LD_ADDR_VAR 0 3
15706: PUSH
15707: LD_INT 10
15709: PUSH
15710: LD_INT 20
15712: PUSH
15713: LD_INT 30
15715: PUSH
15716: LD_INT 40
15718: PUSH
15719: LD_INT 50
15721: PUSH
15722: LD_INT 60
15724: PUSH
15725: LD_INT 70
15727: PUSH
15728: LD_INT 80
15730: PUSH
15731: LD_INT 90
15733: PUSH
15734: LD_INT 100
15736: PUSH
15737: LD_INT 110
15739: PUSH
15740: LD_INT 120
15742: PUSH
15743: LD_INT 130
15745: PUSH
15746: LD_INT 140
15748: PUSH
15749: LD_INT 150
15751: PUSH
15752: EMPTY
15753: LIST
15754: LIST
15755: LIST
15756: LIST
15757: LIST
15758: LIST
15759: LIST
15760: LIST
15761: LIST
15762: LIST
15763: LIST
15764: LIST
15765: LIST
15766: LIST
15767: LIST
15768: PUSH
15769: LD_INT 1
15771: PPUSH
15772: LD_INT 15
15774: PPUSH
15775: CALL_OW 12
15779: ARRAY
15780: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15781: LD_ADDR_VAR 0 4
15785: PUSH
15786: LD_INT 10
15788: PUSH
15789: LD_INT 20
15791: PUSH
15792: LD_INT 30
15794: PUSH
15795: LD_INT 40
15797: PUSH
15798: LD_INT 50
15800: PUSH
15801: LD_INT 60
15803: PUSH
15804: LD_INT 70
15806: PUSH
15807: LD_INT 80
15809: PUSH
15810: LD_INT 90
15812: PUSH
15813: LD_INT 100
15815: PUSH
15816: LD_INT 110
15818: PUSH
15819: LD_INT 120
15821: PUSH
15822: LD_INT 130
15824: PUSH
15825: LD_INT 140
15827: PUSH
15828: LD_INT 150
15830: PUSH
15831: EMPTY
15832: LIST
15833: LIST
15834: LIST
15835: LIST
15836: LIST
15837: LIST
15838: LIST
15839: LIST
15840: LIST
15841: LIST
15842: LIST
15843: LIST
15844: LIST
15845: LIST
15846: LIST
15847: PUSH
15848: LD_INT 1
15850: PPUSH
15851: LD_INT 15
15853: PPUSH
15854: CALL_OW 12
15858: ARRAY
15859: ST_TO_ADDR
// if ValidHex ( x , y ) then
15860: LD_VAR 0 3
15864: PPUSH
15865: LD_VAR 0 4
15869: PPUSH
15870: CALL_OW 488
15874: IFFALSE 15897
// begin result := [ x , y ] ;
15876: LD_ADDR_VAR 0 1
15880: PUSH
15881: LD_VAR 0 3
15885: PUSH
15886: LD_VAR 0 4
15890: PUSH
15891: EMPTY
15892: LIST
15893: LIST
15894: ST_TO_ADDR
// break ;
15895: GO 15899
// end ; end ;
15897: GO 15699
15899: POP
15900: POP
// if result then
15901: LD_VAR 0 1
15905: IFFALSE 15965
// begin ToLua ( playSibBomb() ) ;
15907: LD_STRING playSibBomb()
15909: PPUSH
15910: CALL_OW 559
// wait ( 0 0$14 ) ;
15914: LD_INT 490
15916: PPUSH
15917: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15921: LD_VAR 0 1
15925: PUSH
15926: LD_INT 1
15928: ARRAY
15929: PPUSH
15930: LD_VAR 0 1
15934: PUSH
15935: LD_INT 2
15937: ARRAY
15938: PPUSH
15939: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15943: LD_VAR 0 1
15947: PUSH
15948: LD_INT 1
15950: ARRAY
15951: PPUSH
15952: LD_VAR 0 1
15956: PUSH
15957: LD_INT 2
15959: ARRAY
15960: PPUSH
15961: CALL_OW 429
// end ; end ;
15965: LD_VAR 0 1
15969: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15970: LD_EXP 23
15974: PUSH
15975: LD_EXP 45
15979: AND
15980: IFFALSE 15992
15982: GO 15984
15984: DISABLE
// YouLost (  ) ;
15985: LD_STRING 
15987: PPUSH
15988: CALL_OW 104
15992: END
// every 0 0$1 trigger StreamModeActive and sFog do
15993: LD_EXP 23
15997: PUSH
15998: LD_EXP 44
16002: AND
16003: IFFALSE 16017
16005: GO 16007
16007: DISABLE
// FogOff ( your_side ) ;
16008: LD_OWVAR 2
16012: PPUSH
16013: CALL_OW 344
16017: END
// every 0 0$1 trigger StreamModeActive and sSun do
16018: LD_EXP 23
16022: PUSH
16023: LD_EXP 46
16027: AND
16028: IFFALSE 16056
16030: GO 16032
16032: DISABLE
// begin solar_recharge_percent := 0 ;
16033: LD_ADDR_OWVAR 79
16037: PUSH
16038: LD_INT 0
16040: ST_TO_ADDR
// wait ( 5 5$00 ) ;
16041: LD_INT 10500
16043: PPUSH
16044: CALL_OW 67
// solar_recharge_percent := 100 ;
16048: LD_ADDR_OWVAR 79
16052: PUSH
16053: LD_INT 100
16055: ST_TO_ADDR
// end ;
16056: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
16057: LD_EXP 23
16061: PUSH
16062: LD_EXP 47
16066: AND
16067: IFFALSE 16306
16069: GO 16071
16071: DISABLE
16072: LD_INT 0
16074: PPUSH
16075: PPUSH
16076: PPUSH
// begin tmp := [ ] ;
16077: LD_ADDR_VAR 0 3
16081: PUSH
16082: EMPTY
16083: ST_TO_ADDR
// for i := 1 to 6 do
16084: LD_ADDR_VAR 0 1
16088: PUSH
16089: DOUBLE
16090: LD_INT 1
16092: DEC
16093: ST_TO_ADDR
16094: LD_INT 6
16096: PUSH
16097: FOR_TO
16098: IFFALSE 16203
// begin uc_nation := nation_nature ;
16100: LD_ADDR_OWVAR 21
16104: PUSH
16105: LD_INT 0
16107: ST_TO_ADDR
// uc_side := 0 ;
16108: LD_ADDR_OWVAR 20
16112: PUSH
16113: LD_INT 0
16115: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
16116: LD_ADDR_OWVAR 29
16120: PUSH
16121: LD_INT 12
16123: PUSH
16124: LD_INT 12
16126: PUSH
16127: EMPTY
16128: LIST
16129: LIST
16130: ST_TO_ADDR
// hc_agressivity := 20 ;
16131: LD_ADDR_OWVAR 35
16135: PUSH
16136: LD_INT 20
16138: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
16139: LD_ADDR_OWVAR 28
16143: PUSH
16144: LD_INT 17
16146: ST_TO_ADDR
// hc_gallery :=  ;
16147: LD_ADDR_OWVAR 33
16151: PUSH
16152: LD_STRING 
16154: ST_TO_ADDR
// hc_name :=  ;
16155: LD_ADDR_OWVAR 26
16159: PUSH
16160: LD_STRING 
16162: ST_TO_ADDR
// un := CreateHuman ;
16163: LD_ADDR_VAR 0 2
16167: PUSH
16168: CALL_OW 44
16172: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
16173: LD_VAR 0 2
16177: PPUSH
16178: LD_INT 1
16180: PPUSH
16181: CALL_OW 51
// tmp := tmp ^ un ;
16185: LD_ADDR_VAR 0 3
16189: PUSH
16190: LD_VAR 0 3
16194: PUSH
16195: LD_VAR 0 2
16199: ADD
16200: ST_TO_ADDR
// end ;
16201: GO 16097
16203: POP
16204: POP
// repeat wait ( 0 0$1 ) ;
16205: LD_INT 35
16207: PPUSH
16208: CALL_OW 67
// for un in tmp do
16212: LD_ADDR_VAR 0 2
16216: PUSH
16217: LD_VAR 0 3
16221: PUSH
16222: FOR_IN
16223: IFFALSE 16297
// begin if IsDead ( un ) then
16225: LD_VAR 0 2
16229: PPUSH
16230: CALL_OW 301
16234: IFFALSE 16254
// begin tmp := tmp diff un ;
16236: LD_ADDR_VAR 0 3
16240: PUSH
16241: LD_VAR 0 3
16245: PUSH
16246: LD_VAR 0 2
16250: DIFF
16251: ST_TO_ADDR
// continue ;
16252: GO 16222
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
16254: LD_VAR 0 2
16258: PPUSH
16259: LD_INT 3
16261: PUSH
16262: LD_INT 22
16264: PUSH
16265: LD_INT 0
16267: PUSH
16268: EMPTY
16269: LIST
16270: LIST
16271: PUSH
16272: EMPTY
16273: LIST
16274: LIST
16275: PPUSH
16276: CALL_OW 69
16280: PPUSH
16281: LD_VAR 0 2
16285: PPUSH
16286: CALL_OW 74
16290: PPUSH
16291: CALL_OW 115
// end ;
16295: GO 16222
16297: POP
16298: POP
// until not tmp ;
16299: LD_VAR 0 3
16303: NOT
16304: IFFALSE 16205
// end ;
16306: PPOPN 3
16308: END
// every 0 0$1 trigger StreamModeActive and sTroll do
16309: LD_EXP 23
16313: PUSH
16314: LD_EXP 48
16318: AND
16319: IFFALSE 16373
16321: GO 16323
16323: DISABLE
// begin ToLua ( displayTroll(); ) ;
16324: LD_STRING displayTroll();
16326: PPUSH
16327: CALL_OW 559
// wait ( 3 3$00 ) ;
16331: LD_INT 6300
16333: PPUSH
16334: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16338: LD_STRING hideTroll();
16340: PPUSH
16341: CALL_OW 559
// wait ( 1 1$00 ) ;
16345: LD_INT 2100
16347: PPUSH
16348: CALL_OW 67
// ToLua ( displayTroll(); ) ;
16352: LD_STRING displayTroll();
16354: PPUSH
16355: CALL_OW 559
// wait ( 1 1$00 ) ;
16359: LD_INT 2100
16361: PPUSH
16362: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16366: LD_STRING hideTroll();
16368: PPUSH
16369: CALL_OW 559
// end ;
16373: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
16374: LD_EXP 23
16378: PUSH
16379: LD_EXP 49
16383: AND
16384: IFFALSE 16447
16386: GO 16388
16388: DISABLE
16389: LD_INT 0
16391: PPUSH
// begin p := 0 ;
16392: LD_ADDR_VAR 0 1
16396: PUSH
16397: LD_INT 0
16399: ST_TO_ADDR
// repeat game_speed := 1 ;
16400: LD_ADDR_OWVAR 65
16404: PUSH
16405: LD_INT 1
16407: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16408: LD_INT 35
16410: PPUSH
16411: CALL_OW 67
// p := p + 1 ;
16415: LD_ADDR_VAR 0 1
16419: PUSH
16420: LD_VAR 0 1
16424: PUSH
16425: LD_INT 1
16427: PLUS
16428: ST_TO_ADDR
// until p >= 60 ;
16429: LD_VAR 0 1
16433: PUSH
16434: LD_INT 60
16436: GREATEREQUAL
16437: IFFALSE 16400
// game_speed := 4 ;
16439: LD_ADDR_OWVAR 65
16443: PUSH
16444: LD_INT 4
16446: ST_TO_ADDR
// end ;
16447: PPOPN 1
16449: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16450: LD_EXP 23
16454: PUSH
16455: LD_EXP 50
16459: AND
16460: IFFALSE 16606
16462: GO 16464
16464: DISABLE
16465: LD_INT 0
16467: PPUSH
16468: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16469: LD_ADDR_VAR 0 1
16473: PUSH
16474: LD_INT 22
16476: PUSH
16477: LD_OWVAR 2
16481: PUSH
16482: EMPTY
16483: LIST
16484: LIST
16485: PUSH
16486: LD_INT 2
16488: PUSH
16489: LD_INT 30
16491: PUSH
16492: LD_INT 0
16494: PUSH
16495: EMPTY
16496: LIST
16497: LIST
16498: PUSH
16499: LD_INT 30
16501: PUSH
16502: LD_INT 1
16504: PUSH
16505: EMPTY
16506: LIST
16507: LIST
16508: PUSH
16509: EMPTY
16510: LIST
16511: LIST
16512: LIST
16513: PUSH
16514: EMPTY
16515: LIST
16516: LIST
16517: PPUSH
16518: CALL_OW 69
16522: ST_TO_ADDR
// if not depot then
16523: LD_VAR 0 1
16527: NOT
16528: IFFALSE 16532
// exit ;
16530: GO 16606
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
16532: LD_ADDR_VAR 0 2
16536: PUSH
16537: LD_VAR 0 1
16541: PUSH
16542: LD_INT 1
16544: PPUSH
16545: LD_VAR 0 1
16549: PPUSH
16550: CALL_OW 12
16554: ARRAY
16555: PPUSH
16556: CALL_OW 274
16560: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16561: LD_VAR 0 2
16565: PPUSH
16566: LD_INT 1
16568: PPUSH
16569: LD_INT 0
16571: PPUSH
16572: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16576: LD_VAR 0 2
16580: PPUSH
16581: LD_INT 2
16583: PPUSH
16584: LD_INT 0
16586: PPUSH
16587: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16591: LD_VAR 0 2
16595: PPUSH
16596: LD_INT 3
16598: PPUSH
16599: LD_INT 0
16601: PPUSH
16602: CALL_OW 277
// end ;
16606: PPOPN 2
16608: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16609: LD_EXP 23
16613: PUSH
16614: LD_EXP 51
16618: AND
16619: IFFALSE 16716
16621: GO 16623
16623: DISABLE
16624: LD_INT 0
16626: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16627: LD_ADDR_VAR 0 1
16631: PUSH
16632: LD_INT 22
16634: PUSH
16635: LD_OWVAR 2
16639: PUSH
16640: EMPTY
16641: LIST
16642: LIST
16643: PUSH
16644: LD_INT 21
16646: PUSH
16647: LD_INT 1
16649: PUSH
16650: EMPTY
16651: LIST
16652: LIST
16653: PUSH
16654: LD_INT 3
16656: PUSH
16657: LD_INT 23
16659: PUSH
16660: LD_INT 0
16662: PUSH
16663: EMPTY
16664: LIST
16665: LIST
16666: PUSH
16667: EMPTY
16668: LIST
16669: LIST
16670: PUSH
16671: EMPTY
16672: LIST
16673: LIST
16674: LIST
16675: PPUSH
16676: CALL_OW 69
16680: ST_TO_ADDR
// if not tmp then
16681: LD_VAR 0 1
16685: NOT
16686: IFFALSE 16690
// exit ;
16688: GO 16716
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16690: LD_VAR 0 1
16694: PUSH
16695: LD_INT 1
16697: PPUSH
16698: LD_VAR 0 1
16702: PPUSH
16703: CALL_OW 12
16707: ARRAY
16708: PPUSH
16709: LD_INT 200
16711: PPUSH
16712: CALL_OW 234
// end ;
16716: PPOPN 1
16718: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16719: LD_EXP 23
16723: PUSH
16724: LD_EXP 52
16728: AND
16729: IFFALSE 16808
16731: GO 16733
16733: DISABLE
16734: LD_INT 0
16736: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16737: LD_ADDR_VAR 0 1
16741: PUSH
16742: LD_INT 22
16744: PUSH
16745: LD_OWVAR 2
16749: PUSH
16750: EMPTY
16751: LIST
16752: LIST
16753: PUSH
16754: LD_INT 21
16756: PUSH
16757: LD_INT 2
16759: PUSH
16760: EMPTY
16761: LIST
16762: LIST
16763: PUSH
16764: EMPTY
16765: LIST
16766: LIST
16767: PPUSH
16768: CALL_OW 69
16772: ST_TO_ADDR
// if not tmp then
16773: LD_VAR 0 1
16777: NOT
16778: IFFALSE 16782
// exit ;
16780: GO 16808
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16782: LD_VAR 0 1
16786: PUSH
16787: LD_INT 1
16789: PPUSH
16790: LD_VAR 0 1
16794: PPUSH
16795: CALL_OW 12
16799: ARRAY
16800: PPUSH
16801: LD_INT 60
16803: PPUSH
16804: CALL_OW 234
// end ;
16808: PPOPN 1
16810: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16811: LD_EXP 23
16815: PUSH
16816: LD_EXP 53
16820: AND
16821: IFFALSE 16920
16823: GO 16825
16825: DISABLE
16826: LD_INT 0
16828: PPUSH
16829: PPUSH
// begin enable ;
16830: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16831: LD_ADDR_VAR 0 1
16835: PUSH
16836: LD_INT 22
16838: PUSH
16839: LD_OWVAR 2
16843: PUSH
16844: EMPTY
16845: LIST
16846: LIST
16847: PUSH
16848: LD_INT 61
16850: PUSH
16851: EMPTY
16852: LIST
16853: PUSH
16854: LD_INT 33
16856: PUSH
16857: LD_INT 2
16859: PUSH
16860: EMPTY
16861: LIST
16862: LIST
16863: PUSH
16864: EMPTY
16865: LIST
16866: LIST
16867: LIST
16868: PPUSH
16869: CALL_OW 69
16873: ST_TO_ADDR
// if not tmp then
16874: LD_VAR 0 1
16878: NOT
16879: IFFALSE 16883
// exit ;
16881: GO 16920
// for i in tmp do
16883: LD_ADDR_VAR 0 2
16887: PUSH
16888: LD_VAR 0 1
16892: PUSH
16893: FOR_IN
16894: IFFALSE 16918
// if IsControledBy ( i ) then
16896: LD_VAR 0 2
16900: PPUSH
16901: CALL_OW 312
16905: IFFALSE 16916
// ComUnlink ( i ) ;
16907: LD_VAR 0 2
16911: PPUSH
16912: CALL_OW 136
16916: GO 16893
16918: POP
16919: POP
// end ;
16920: PPOPN 2
16922: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16923: LD_EXP 23
16927: PUSH
16928: LD_EXP 54
16932: AND
16933: IFFALSE 17073
16935: GO 16937
16937: DISABLE
16938: LD_INT 0
16940: PPUSH
16941: PPUSH
// begin ToLua ( displayPowell(); ) ;
16942: LD_STRING displayPowell();
16944: PPUSH
16945: CALL_OW 559
// uc_side := 0 ;
16949: LD_ADDR_OWVAR 20
16953: PUSH
16954: LD_INT 0
16956: ST_TO_ADDR
// uc_nation := 2 ;
16957: LD_ADDR_OWVAR 21
16961: PUSH
16962: LD_INT 2
16964: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16965: LD_ADDR_OWVAR 37
16969: PUSH
16970: LD_INT 14
16972: ST_TO_ADDR
// vc_engine := engine_siberite ;
16973: LD_ADDR_OWVAR 39
16977: PUSH
16978: LD_INT 3
16980: ST_TO_ADDR
// vc_control := control_apeman ;
16981: LD_ADDR_OWVAR 38
16985: PUSH
16986: LD_INT 5
16988: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16989: LD_ADDR_OWVAR 40
16993: PUSH
16994: LD_INT 29
16996: ST_TO_ADDR
// un := CreateVehicle ;
16997: LD_ADDR_VAR 0 2
17001: PUSH
17002: CALL_OW 45
17006: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17007: LD_VAR 0 2
17011: PPUSH
17012: LD_INT 1
17014: PPUSH
17015: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17019: LD_INT 35
17021: PPUSH
17022: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17026: LD_VAR 0 2
17030: PPUSH
17031: LD_INT 22
17033: PUSH
17034: LD_OWVAR 2
17038: PUSH
17039: EMPTY
17040: LIST
17041: LIST
17042: PPUSH
17043: CALL_OW 69
17047: PPUSH
17048: LD_VAR 0 2
17052: PPUSH
17053: CALL_OW 74
17057: PPUSH
17058: CALL_OW 115
// until IsDead ( un ) ;
17062: LD_VAR 0 2
17066: PPUSH
17067: CALL_OW 301
17071: IFFALSE 17019
// end ;
17073: PPOPN 2
17075: END
// every 0 0$1 trigger StreamModeActive and sStu do
17076: LD_EXP 23
17080: PUSH
17081: LD_EXP 62
17085: AND
17086: IFFALSE 17102
17088: GO 17090
17090: DISABLE
// begin ToLua ( displayStucuk(); ) ;
17091: LD_STRING displayStucuk();
17093: PPUSH
17094: CALL_OW 559
// ResetFog ;
17098: CALL_OW 335
// end ;
17102: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
17103: LD_EXP 23
17107: PUSH
17108: LD_EXP 55
17112: AND
17113: IFFALSE 17254
17115: GO 17117
17117: DISABLE
17118: LD_INT 0
17120: PPUSH
17121: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17122: LD_ADDR_VAR 0 2
17126: PUSH
17127: LD_INT 22
17129: PUSH
17130: LD_OWVAR 2
17134: PUSH
17135: EMPTY
17136: LIST
17137: LIST
17138: PUSH
17139: LD_INT 21
17141: PUSH
17142: LD_INT 1
17144: PUSH
17145: EMPTY
17146: LIST
17147: LIST
17148: PUSH
17149: EMPTY
17150: LIST
17151: LIST
17152: PPUSH
17153: CALL_OW 69
17157: ST_TO_ADDR
// if not tmp then
17158: LD_VAR 0 2
17162: NOT
17163: IFFALSE 17167
// exit ;
17165: GO 17254
// un := tmp [ rand ( 1 , tmp ) ] ;
17167: LD_ADDR_VAR 0 1
17171: PUSH
17172: LD_VAR 0 2
17176: PUSH
17177: LD_INT 1
17179: PPUSH
17180: LD_VAR 0 2
17184: PPUSH
17185: CALL_OW 12
17189: ARRAY
17190: ST_TO_ADDR
// SetSide ( un , 0 ) ;
17191: LD_VAR 0 1
17195: PPUSH
17196: LD_INT 0
17198: PPUSH
17199: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17203: LD_VAR 0 1
17207: PPUSH
17208: LD_OWVAR 3
17212: PUSH
17213: LD_VAR 0 1
17217: DIFF
17218: PPUSH
17219: LD_VAR 0 1
17223: PPUSH
17224: CALL_OW 74
17228: PPUSH
17229: CALL_OW 115
// wait ( 0 0$20 ) ;
17233: LD_INT 700
17235: PPUSH
17236: CALL_OW 67
// SetSide ( un , your_side ) ;
17240: LD_VAR 0 1
17244: PPUSH
17245: LD_OWVAR 2
17249: PPUSH
17250: CALL_OW 235
// end ;
17254: PPOPN 2
17256: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
17257: LD_EXP 23
17261: PUSH
17262: LD_EXP 56
17266: AND
17267: IFFALSE 17373
17269: GO 17271
17271: DISABLE
17272: LD_INT 0
17274: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17275: LD_ADDR_VAR 0 1
17279: PUSH
17280: LD_INT 22
17282: PUSH
17283: LD_OWVAR 2
17287: PUSH
17288: EMPTY
17289: LIST
17290: LIST
17291: PUSH
17292: LD_INT 2
17294: PUSH
17295: LD_INT 30
17297: PUSH
17298: LD_INT 0
17300: PUSH
17301: EMPTY
17302: LIST
17303: LIST
17304: PUSH
17305: LD_INT 30
17307: PUSH
17308: LD_INT 1
17310: PUSH
17311: EMPTY
17312: LIST
17313: LIST
17314: PUSH
17315: EMPTY
17316: LIST
17317: LIST
17318: LIST
17319: PUSH
17320: EMPTY
17321: LIST
17322: LIST
17323: PPUSH
17324: CALL_OW 69
17328: ST_TO_ADDR
// if not depot then
17329: LD_VAR 0 1
17333: NOT
17334: IFFALSE 17338
// exit ;
17336: GO 17373
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
17338: LD_VAR 0 1
17342: PUSH
17343: LD_INT 1
17345: ARRAY
17346: PPUSH
17347: CALL_OW 250
17351: PPUSH
17352: LD_VAR 0 1
17356: PUSH
17357: LD_INT 1
17359: ARRAY
17360: PPUSH
17361: CALL_OW 251
17365: PPUSH
17366: LD_INT 70
17368: PPUSH
17369: CALL_OW 495
// end ;
17373: PPOPN 1
17375: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
17376: LD_EXP 23
17380: PUSH
17381: LD_EXP 57
17385: AND
17386: IFFALSE 17597
17388: GO 17390
17390: DISABLE
17391: LD_INT 0
17393: PPUSH
17394: PPUSH
17395: PPUSH
17396: PPUSH
17397: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17398: LD_ADDR_VAR 0 5
17402: PUSH
17403: LD_INT 22
17405: PUSH
17406: LD_OWVAR 2
17410: PUSH
17411: EMPTY
17412: LIST
17413: LIST
17414: PUSH
17415: LD_INT 21
17417: PUSH
17418: LD_INT 1
17420: PUSH
17421: EMPTY
17422: LIST
17423: LIST
17424: PUSH
17425: EMPTY
17426: LIST
17427: LIST
17428: PPUSH
17429: CALL_OW 69
17433: ST_TO_ADDR
// if not tmp then
17434: LD_VAR 0 5
17438: NOT
17439: IFFALSE 17443
// exit ;
17441: GO 17597
// for i in tmp do
17443: LD_ADDR_VAR 0 1
17447: PUSH
17448: LD_VAR 0 5
17452: PUSH
17453: FOR_IN
17454: IFFALSE 17595
// begin d := rand ( 0 , 5 ) ;
17456: LD_ADDR_VAR 0 4
17460: PUSH
17461: LD_INT 0
17463: PPUSH
17464: LD_INT 5
17466: PPUSH
17467: CALL_OW 12
17471: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
17472: LD_ADDR_VAR 0 2
17476: PUSH
17477: LD_VAR 0 1
17481: PPUSH
17482: CALL_OW 250
17486: PPUSH
17487: LD_VAR 0 4
17491: PPUSH
17492: LD_INT 3
17494: PPUSH
17495: LD_INT 12
17497: PPUSH
17498: CALL_OW 12
17502: PPUSH
17503: CALL_OW 272
17507: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
17508: LD_ADDR_VAR 0 3
17512: PUSH
17513: LD_VAR 0 1
17517: PPUSH
17518: CALL_OW 251
17522: PPUSH
17523: LD_VAR 0 4
17527: PPUSH
17528: LD_INT 3
17530: PPUSH
17531: LD_INT 12
17533: PPUSH
17534: CALL_OW 12
17538: PPUSH
17539: CALL_OW 273
17543: ST_TO_ADDR
// if ValidHex ( x , y ) then
17544: LD_VAR 0 2
17548: PPUSH
17549: LD_VAR 0 3
17553: PPUSH
17554: CALL_OW 488
17558: IFFALSE 17593
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17560: LD_VAR 0 1
17564: PPUSH
17565: LD_VAR 0 2
17569: PPUSH
17570: LD_VAR 0 3
17574: PPUSH
17575: LD_INT 3
17577: PPUSH
17578: LD_INT 6
17580: PPUSH
17581: CALL_OW 12
17585: PPUSH
17586: LD_INT 1
17588: PPUSH
17589: CALL_OW 483
// end ;
17593: GO 17453
17595: POP
17596: POP
// end ;
17597: PPOPN 5
17599: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17600: LD_EXP 23
17604: PUSH
17605: LD_EXP 58
17609: AND
17610: IFFALSE 17704
17612: GO 17614
17614: DISABLE
17615: LD_INT 0
17617: PPUSH
17618: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17619: LD_ADDR_VAR 0 2
17623: PUSH
17624: LD_INT 22
17626: PUSH
17627: LD_OWVAR 2
17631: PUSH
17632: EMPTY
17633: LIST
17634: LIST
17635: PUSH
17636: LD_INT 32
17638: PUSH
17639: LD_INT 1
17641: PUSH
17642: EMPTY
17643: LIST
17644: LIST
17645: PUSH
17646: LD_INT 21
17648: PUSH
17649: LD_INT 2
17651: PUSH
17652: EMPTY
17653: LIST
17654: LIST
17655: PUSH
17656: EMPTY
17657: LIST
17658: LIST
17659: LIST
17660: PPUSH
17661: CALL_OW 69
17665: ST_TO_ADDR
// if not tmp then
17666: LD_VAR 0 2
17670: NOT
17671: IFFALSE 17675
// exit ;
17673: GO 17704
// for i in tmp do
17675: LD_ADDR_VAR 0 1
17679: PUSH
17680: LD_VAR 0 2
17684: PUSH
17685: FOR_IN
17686: IFFALSE 17702
// SetFuel ( i , 0 ) ;
17688: LD_VAR 0 1
17692: PPUSH
17693: LD_INT 0
17695: PPUSH
17696: CALL_OW 240
17700: GO 17685
17702: POP
17703: POP
// end ;
17704: PPOPN 2
17706: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17707: LD_EXP 23
17711: PUSH
17712: LD_EXP 59
17716: AND
17717: IFFALSE 17783
17719: GO 17721
17721: DISABLE
17722: LD_INT 0
17724: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17725: LD_ADDR_VAR 0 1
17729: PUSH
17730: LD_INT 22
17732: PUSH
17733: LD_OWVAR 2
17737: PUSH
17738: EMPTY
17739: LIST
17740: LIST
17741: PUSH
17742: LD_INT 30
17744: PUSH
17745: LD_INT 29
17747: PUSH
17748: EMPTY
17749: LIST
17750: LIST
17751: PUSH
17752: EMPTY
17753: LIST
17754: LIST
17755: PPUSH
17756: CALL_OW 69
17760: ST_TO_ADDR
// if not tmp then
17761: LD_VAR 0 1
17765: NOT
17766: IFFALSE 17770
// exit ;
17768: GO 17783
// DestroyUnit ( tmp [ 1 ] ) ;
17770: LD_VAR 0 1
17774: PUSH
17775: LD_INT 1
17777: ARRAY
17778: PPUSH
17779: CALL_OW 65
// end ;
17783: PPOPN 1
17785: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17786: LD_EXP 23
17790: PUSH
17791: LD_EXP 61
17795: AND
17796: IFFALSE 17925
17798: GO 17800
17800: DISABLE
17801: LD_INT 0
17803: PPUSH
// begin uc_side := 0 ;
17804: LD_ADDR_OWVAR 20
17808: PUSH
17809: LD_INT 0
17811: ST_TO_ADDR
// uc_nation := nation_arabian ;
17812: LD_ADDR_OWVAR 21
17816: PUSH
17817: LD_INT 2
17819: ST_TO_ADDR
// hc_gallery :=  ;
17820: LD_ADDR_OWVAR 33
17824: PUSH
17825: LD_STRING 
17827: ST_TO_ADDR
// hc_name :=  ;
17828: LD_ADDR_OWVAR 26
17832: PUSH
17833: LD_STRING 
17835: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17836: LD_INT 1
17838: PPUSH
17839: LD_INT 11
17841: PPUSH
17842: LD_INT 10
17844: PPUSH
17845: CALL_OW 380
// un := CreateHuman ;
17849: LD_ADDR_VAR 0 1
17853: PUSH
17854: CALL_OW 44
17858: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17859: LD_VAR 0 1
17863: PPUSH
17864: LD_INT 1
17866: PPUSH
17867: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17871: LD_INT 35
17873: PPUSH
17874: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17878: LD_VAR 0 1
17882: PPUSH
17883: LD_INT 22
17885: PUSH
17886: LD_OWVAR 2
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: PPUSH
17895: CALL_OW 69
17899: PPUSH
17900: LD_VAR 0 1
17904: PPUSH
17905: CALL_OW 74
17909: PPUSH
17910: CALL_OW 115
// until IsDead ( un ) ;
17914: LD_VAR 0 1
17918: PPUSH
17919: CALL_OW 301
17923: IFFALSE 17871
// end ;
17925: PPOPN 1
17927: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17928: LD_EXP 23
17932: PUSH
17933: LD_EXP 63
17937: AND
17938: IFFALSE 17950
17940: GO 17942
17942: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17943: LD_STRING earthquake(getX(game), 0, 32)
17945: PPUSH
17946: CALL_OW 559
17950: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17951: LD_EXP 23
17955: PUSH
17956: LD_EXP 64
17960: AND
17961: IFFALSE 18052
17963: GO 17965
17965: DISABLE
17966: LD_INT 0
17968: PPUSH
// begin enable ;
17969: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17970: LD_ADDR_VAR 0 1
17974: PUSH
17975: LD_INT 22
17977: PUSH
17978: LD_OWVAR 2
17982: PUSH
17983: EMPTY
17984: LIST
17985: LIST
17986: PUSH
17987: LD_INT 21
17989: PUSH
17990: LD_INT 2
17992: PUSH
17993: EMPTY
17994: LIST
17995: LIST
17996: PUSH
17997: LD_INT 33
17999: PUSH
18000: LD_INT 3
18002: PUSH
18003: EMPTY
18004: LIST
18005: LIST
18006: PUSH
18007: EMPTY
18008: LIST
18009: LIST
18010: LIST
18011: PPUSH
18012: CALL_OW 69
18016: ST_TO_ADDR
// if not tmp then
18017: LD_VAR 0 1
18021: NOT
18022: IFFALSE 18026
// exit ;
18024: GO 18052
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18026: LD_VAR 0 1
18030: PUSH
18031: LD_INT 1
18033: PPUSH
18034: LD_VAR 0 1
18038: PPUSH
18039: CALL_OW 12
18043: ARRAY
18044: PPUSH
18045: LD_INT 1
18047: PPUSH
18048: CALL_OW 234
// end ;
18052: PPOPN 1
18054: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
18055: LD_EXP 23
18059: PUSH
18060: LD_EXP 65
18064: AND
18065: IFFALSE 18206
18067: GO 18069
18069: DISABLE
18070: LD_INT 0
18072: PPUSH
18073: PPUSH
18074: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18075: LD_ADDR_VAR 0 3
18079: PUSH
18080: LD_INT 22
18082: PUSH
18083: LD_OWVAR 2
18087: PUSH
18088: EMPTY
18089: LIST
18090: LIST
18091: PUSH
18092: LD_INT 25
18094: PUSH
18095: LD_INT 1
18097: PUSH
18098: EMPTY
18099: LIST
18100: LIST
18101: PUSH
18102: EMPTY
18103: LIST
18104: LIST
18105: PPUSH
18106: CALL_OW 69
18110: ST_TO_ADDR
// if not tmp then
18111: LD_VAR 0 3
18115: NOT
18116: IFFALSE 18120
// exit ;
18118: GO 18206
// un := tmp [ rand ( 1 , tmp ) ] ;
18120: LD_ADDR_VAR 0 2
18124: PUSH
18125: LD_VAR 0 3
18129: PUSH
18130: LD_INT 1
18132: PPUSH
18133: LD_VAR 0 3
18137: PPUSH
18138: CALL_OW 12
18142: ARRAY
18143: ST_TO_ADDR
// if Crawls ( un ) then
18144: LD_VAR 0 2
18148: PPUSH
18149: CALL_OW 318
18153: IFFALSE 18164
// ComWalk ( un ) ;
18155: LD_VAR 0 2
18159: PPUSH
18160: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
18164: LD_VAR 0 2
18168: PPUSH
18169: LD_INT 9
18171: PPUSH
18172: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
18176: LD_INT 28
18178: PPUSH
18179: LD_OWVAR 2
18183: PPUSH
18184: LD_INT 2
18186: PPUSH
18187: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
18191: LD_INT 29
18193: PPUSH
18194: LD_OWVAR 2
18198: PPUSH
18199: LD_INT 2
18201: PPUSH
18202: CALL_OW 322
// end ;
18206: PPOPN 3
18208: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18209: LD_EXP 23
18213: PUSH
18214: LD_EXP 66
18218: AND
18219: IFFALSE 18330
18221: GO 18223
18223: DISABLE
18224: LD_INT 0
18226: PPUSH
18227: PPUSH
18228: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18229: LD_ADDR_VAR 0 3
18233: PUSH
18234: LD_INT 22
18236: PUSH
18237: LD_OWVAR 2
18241: PUSH
18242: EMPTY
18243: LIST
18244: LIST
18245: PUSH
18246: LD_INT 25
18248: PUSH
18249: LD_INT 1
18251: PUSH
18252: EMPTY
18253: LIST
18254: LIST
18255: PUSH
18256: EMPTY
18257: LIST
18258: LIST
18259: PPUSH
18260: CALL_OW 69
18264: ST_TO_ADDR
// if not tmp then
18265: LD_VAR 0 3
18269: NOT
18270: IFFALSE 18274
// exit ;
18272: GO 18330
// un := tmp [ rand ( 1 , tmp ) ] ;
18274: LD_ADDR_VAR 0 2
18278: PUSH
18279: LD_VAR 0 3
18283: PUSH
18284: LD_INT 1
18286: PPUSH
18287: LD_VAR 0 3
18291: PPUSH
18292: CALL_OW 12
18296: ARRAY
18297: ST_TO_ADDR
// if Crawls ( un ) then
18298: LD_VAR 0 2
18302: PPUSH
18303: CALL_OW 318
18307: IFFALSE 18318
// ComWalk ( un ) ;
18309: LD_VAR 0 2
18313: PPUSH
18314: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18318: LD_VAR 0 2
18322: PPUSH
18323: LD_INT 8
18325: PPUSH
18326: CALL_OW 336
// end ;
18330: PPOPN 3
18332: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
18333: LD_EXP 23
18337: PUSH
18338: LD_EXP 67
18342: AND
18343: IFFALSE 18487
18345: GO 18347
18347: DISABLE
18348: LD_INT 0
18350: PPUSH
18351: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
18352: LD_ADDR_VAR 0 2
18356: PUSH
18357: LD_INT 22
18359: PUSH
18360: LD_OWVAR 2
18364: PUSH
18365: EMPTY
18366: LIST
18367: LIST
18368: PUSH
18369: LD_INT 21
18371: PUSH
18372: LD_INT 2
18374: PUSH
18375: EMPTY
18376: LIST
18377: LIST
18378: PUSH
18379: LD_INT 2
18381: PUSH
18382: LD_INT 34
18384: PUSH
18385: LD_INT 12
18387: PUSH
18388: EMPTY
18389: LIST
18390: LIST
18391: PUSH
18392: LD_INT 34
18394: PUSH
18395: LD_INT 51
18397: PUSH
18398: EMPTY
18399: LIST
18400: LIST
18401: PUSH
18402: LD_INT 34
18404: PUSH
18405: LD_INT 32
18407: PUSH
18408: EMPTY
18409: LIST
18410: LIST
18411: PUSH
18412: EMPTY
18413: LIST
18414: LIST
18415: LIST
18416: LIST
18417: PUSH
18418: EMPTY
18419: LIST
18420: LIST
18421: LIST
18422: PPUSH
18423: CALL_OW 69
18427: ST_TO_ADDR
// if not tmp then
18428: LD_VAR 0 2
18432: NOT
18433: IFFALSE 18437
// exit ;
18435: GO 18487
// for i in tmp do
18437: LD_ADDR_VAR 0 1
18441: PUSH
18442: LD_VAR 0 2
18446: PUSH
18447: FOR_IN
18448: IFFALSE 18485
// if GetCargo ( i , mat_artifact ) = 0 then
18450: LD_VAR 0 1
18454: PPUSH
18455: LD_INT 4
18457: PPUSH
18458: CALL_OW 289
18462: PUSH
18463: LD_INT 0
18465: EQUAL
18466: IFFALSE 18483
// SetCargo ( i , mat_siberit , 100 ) ;
18468: LD_VAR 0 1
18472: PPUSH
18473: LD_INT 3
18475: PPUSH
18476: LD_INT 100
18478: PPUSH
18479: CALL_OW 290
18483: GO 18447
18485: POP
18486: POP
// end ;
18487: PPOPN 2
18489: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
18490: LD_EXP 23
18494: PUSH
18495: LD_EXP 68
18499: AND
18500: IFFALSE 18683
18502: GO 18504
18504: DISABLE
18505: LD_INT 0
18507: PPUSH
18508: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18509: LD_ADDR_VAR 0 2
18513: PUSH
18514: LD_INT 22
18516: PUSH
18517: LD_OWVAR 2
18521: PUSH
18522: EMPTY
18523: LIST
18524: LIST
18525: PPUSH
18526: CALL_OW 69
18530: ST_TO_ADDR
// if not tmp then
18531: LD_VAR 0 2
18535: NOT
18536: IFFALSE 18540
// exit ;
18538: GO 18683
// for i := 1 to 2 do
18540: LD_ADDR_VAR 0 1
18544: PUSH
18545: DOUBLE
18546: LD_INT 1
18548: DEC
18549: ST_TO_ADDR
18550: LD_INT 2
18552: PUSH
18553: FOR_TO
18554: IFFALSE 18681
// begin uc_side := your_side ;
18556: LD_ADDR_OWVAR 20
18560: PUSH
18561: LD_OWVAR 2
18565: ST_TO_ADDR
// uc_nation := nation_american ;
18566: LD_ADDR_OWVAR 21
18570: PUSH
18571: LD_INT 1
18573: ST_TO_ADDR
// vc_chassis := us_morphling ;
18574: LD_ADDR_OWVAR 37
18578: PUSH
18579: LD_INT 5
18581: ST_TO_ADDR
// vc_engine := engine_siberite ;
18582: LD_ADDR_OWVAR 39
18586: PUSH
18587: LD_INT 3
18589: ST_TO_ADDR
// vc_control := control_computer ;
18590: LD_ADDR_OWVAR 38
18594: PUSH
18595: LD_INT 3
18597: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18598: LD_ADDR_OWVAR 40
18602: PUSH
18603: LD_INT 10
18605: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
18606: LD_VAR 0 2
18610: PUSH
18611: LD_INT 1
18613: ARRAY
18614: PPUSH
18615: CALL_OW 310
18619: NOT
18620: IFFALSE 18667
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
18622: CALL_OW 45
18626: PPUSH
18627: LD_VAR 0 2
18631: PUSH
18632: LD_INT 1
18634: ARRAY
18635: PPUSH
18636: CALL_OW 250
18640: PPUSH
18641: LD_VAR 0 2
18645: PUSH
18646: LD_INT 1
18648: ARRAY
18649: PPUSH
18650: CALL_OW 251
18654: PPUSH
18655: LD_INT 12
18657: PPUSH
18658: LD_INT 1
18660: PPUSH
18661: CALL_OW 50
18665: GO 18679
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18667: CALL_OW 45
18671: PPUSH
18672: LD_INT 1
18674: PPUSH
18675: CALL_OW 51
// end ;
18679: GO 18553
18681: POP
18682: POP
// end ;
18683: PPOPN 2
18685: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18686: LD_EXP 23
18690: PUSH
18691: LD_EXP 69
18695: AND
18696: IFFALSE 18918
18698: GO 18700
18700: DISABLE
18701: LD_INT 0
18703: PPUSH
18704: PPUSH
18705: PPUSH
18706: PPUSH
18707: PPUSH
18708: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18709: LD_ADDR_VAR 0 6
18713: PUSH
18714: LD_INT 22
18716: PUSH
18717: LD_OWVAR 2
18721: PUSH
18722: EMPTY
18723: LIST
18724: LIST
18725: PUSH
18726: LD_INT 21
18728: PUSH
18729: LD_INT 1
18731: PUSH
18732: EMPTY
18733: LIST
18734: LIST
18735: PUSH
18736: LD_INT 3
18738: PUSH
18739: LD_INT 23
18741: PUSH
18742: LD_INT 0
18744: PUSH
18745: EMPTY
18746: LIST
18747: LIST
18748: PUSH
18749: EMPTY
18750: LIST
18751: LIST
18752: PUSH
18753: EMPTY
18754: LIST
18755: LIST
18756: LIST
18757: PPUSH
18758: CALL_OW 69
18762: ST_TO_ADDR
// if not tmp then
18763: LD_VAR 0 6
18767: NOT
18768: IFFALSE 18772
// exit ;
18770: GO 18918
// s1 := rand ( 1 , 4 ) ;
18772: LD_ADDR_VAR 0 2
18776: PUSH
18777: LD_INT 1
18779: PPUSH
18780: LD_INT 4
18782: PPUSH
18783: CALL_OW 12
18787: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18788: LD_ADDR_VAR 0 4
18792: PUSH
18793: LD_VAR 0 6
18797: PUSH
18798: LD_INT 1
18800: ARRAY
18801: PPUSH
18802: LD_VAR 0 2
18806: PPUSH
18807: CALL_OW 259
18811: ST_TO_ADDR
// if s1 = 1 then
18812: LD_VAR 0 2
18816: PUSH
18817: LD_INT 1
18819: EQUAL
18820: IFFALSE 18840
// s2 := rand ( 2 , 4 ) else
18822: LD_ADDR_VAR 0 3
18826: PUSH
18827: LD_INT 2
18829: PPUSH
18830: LD_INT 4
18832: PPUSH
18833: CALL_OW 12
18837: ST_TO_ADDR
18838: GO 18848
// s2 := 1 ;
18840: LD_ADDR_VAR 0 3
18844: PUSH
18845: LD_INT 1
18847: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18848: LD_ADDR_VAR 0 5
18852: PUSH
18853: LD_VAR 0 6
18857: PUSH
18858: LD_INT 1
18860: ARRAY
18861: PPUSH
18862: LD_VAR 0 3
18866: PPUSH
18867: CALL_OW 259
18871: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18872: LD_VAR 0 6
18876: PUSH
18877: LD_INT 1
18879: ARRAY
18880: PPUSH
18881: LD_VAR 0 2
18885: PPUSH
18886: LD_VAR 0 5
18890: PPUSH
18891: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18895: LD_VAR 0 6
18899: PUSH
18900: LD_INT 1
18902: ARRAY
18903: PPUSH
18904: LD_VAR 0 3
18908: PPUSH
18909: LD_VAR 0 4
18913: PPUSH
18914: CALL_OW 237
// end ;
18918: PPOPN 6
18920: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18921: LD_EXP 23
18925: PUSH
18926: LD_EXP 70
18930: AND
18931: IFFALSE 19010
18933: GO 18935
18935: DISABLE
18936: LD_INT 0
18938: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18939: LD_ADDR_VAR 0 1
18943: PUSH
18944: LD_INT 22
18946: PUSH
18947: LD_OWVAR 2
18951: PUSH
18952: EMPTY
18953: LIST
18954: LIST
18955: PUSH
18956: LD_INT 30
18958: PUSH
18959: LD_INT 3
18961: PUSH
18962: EMPTY
18963: LIST
18964: LIST
18965: PUSH
18966: EMPTY
18967: LIST
18968: LIST
18969: PPUSH
18970: CALL_OW 69
18974: ST_TO_ADDR
// if not tmp then
18975: LD_VAR 0 1
18979: NOT
18980: IFFALSE 18984
// exit ;
18982: GO 19010
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18984: LD_VAR 0 1
18988: PUSH
18989: LD_INT 1
18991: PPUSH
18992: LD_VAR 0 1
18996: PPUSH
18997: CALL_OW 12
19001: ARRAY
19002: PPUSH
19003: LD_INT 1
19005: PPUSH
19006: CALL_OW 234
// end ;
19010: PPOPN 1
19012: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
19013: LD_EXP 23
19017: PUSH
19018: LD_EXP 71
19022: AND
19023: IFFALSE 19135
19025: GO 19027
19027: DISABLE
19028: LD_INT 0
19030: PPUSH
19031: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
19032: LD_ADDR_VAR 0 2
19036: PUSH
19037: LD_INT 22
19039: PUSH
19040: LD_OWVAR 2
19044: PUSH
19045: EMPTY
19046: LIST
19047: LIST
19048: PUSH
19049: LD_INT 2
19051: PUSH
19052: LD_INT 30
19054: PUSH
19055: LD_INT 27
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: PUSH
19062: LD_INT 30
19064: PUSH
19065: LD_INT 26
19067: PUSH
19068: EMPTY
19069: LIST
19070: LIST
19071: PUSH
19072: LD_INT 30
19074: PUSH
19075: LD_INT 28
19077: PUSH
19078: EMPTY
19079: LIST
19080: LIST
19081: PUSH
19082: EMPTY
19083: LIST
19084: LIST
19085: LIST
19086: LIST
19087: PUSH
19088: EMPTY
19089: LIST
19090: LIST
19091: PPUSH
19092: CALL_OW 69
19096: ST_TO_ADDR
// if not tmp then
19097: LD_VAR 0 2
19101: NOT
19102: IFFALSE 19106
// exit ;
19104: GO 19135
// for i in tmp do
19106: LD_ADDR_VAR 0 1
19110: PUSH
19111: LD_VAR 0 2
19115: PUSH
19116: FOR_IN
19117: IFFALSE 19133
// SetLives ( i , 1 ) ;
19119: LD_VAR 0 1
19123: PPUSH
19124: LD_INT 1
19126: PPUSH
19127: CALL_OW 234
19131: GO 19116
19133: POP
19134: POP
// end ;
19135: PPOPN 2
19137: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
19138: LD_EXP 23
19142: PUSH
19143: LD_EXP 72
19147: AND
19148: IFFALSE 19435
19150: GO 19152
19152: DISABLE
19153: LD_INT 0
19155: PPUSH
19156: PPUSH
19157: PPUSH
// begin i := rand ( 1 , 7 ) ;
19158: LD_ADDR_VAR 0 1
19162: PUSH
19163: LD_INT 1
19165: PPUSH
19166: LD_INT 7
19168: PPUSH
19169: CALL_OW 12
19173: ST_TO_ADDR
// case i of 1 :
19174: LD_VAR 0 1
19178: PUSH
19179: LD_INT 1
19181: DOUBLE
19182: EQUAL
19183: IFTRUE 19187
19185: GO 19197
19187: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
19188: LD_STRING earthquake(getX(game), 0, 32)
19190: PPUSH
19191: CALL_OW 559
19195: GO 19435
19197: LD_INT 2
19199: DOUBLE
19200: EQUAL
19201: IFTRUE 19205
19203: GO 19219
19205: POP
// begin ToLua ( displayStucuk(); ) ;
19206: LD_STRING displayStucuk();
19208: PPUSH
19209: CALL_OW 559
// ResetFog ;
19213: CALL_OW 335
// end ; 3 :
19217: GO 19435
19219: LD_INT 3
19221: DOUBLE
19222: EQUAL
19223: IFTRUE 19227
19225: GO 19331
19227: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19228: LD_ADDR_VAR 0 2
19232: PUSH
19233: LD_INT 22
19235: PUSH
19236: LD_OWVAR 2
19240: PUSH
19241: EMPTY
19242: LIST
19243: LIST
19244: PUSH
19245: LD_INT 25
19247: PUSH
19248: LD_INT 1
19250: PUSH
19251: EMPTY
19252: LIST
19253: LIST
19254: PUSH
19255: EMPTY
19256: LIST
19257: LIST
19258: PPUSH
19259: CALL_OW 69
19263: ST_TO_ADDR
// if not tmp then
19264: LD_VAR 0 2
19268: NOT
19269: IFFALSE 19273
// exit ;
19271: GO 19435
// un := tmp [ rand ( 1 , tmp ) ] ;
19273: LD_ADDR_VAR 0 3
19277: PUSH
19278: LD_VAR 0 2
19282: PUSH
19283: LD_INT 1
19285: PPUSH
19286: LD_VAR 0 2
19290: PPUSH
19291: CALL_OW 12
19295: ARRAY
19296: ST_TO_ADDR
// if Crawls ( un ) then
19297: LD_VAR 0 3
19301: PPUSH
19302: CALL_OW 318
19306: IFFALSE 19317
// ComWalk ( un ) ;
19308: LD_VAR 0 3
19312: PPUSH
19313: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19317: LD_VAR 0 3
19321: PPUSH
19322: LD_INT 8
19324: PPUSH
19325: CALL_OW 336
// end ; 4 :
19329: GO 19435
19331: LD_INT 4
19333: DOUBLE
19334: EQUAL
19335: IFTRUE 19339
19337: GO 19413
19339: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19340: LD_ADDR_VAR 0 2
19344: PUSH
19345: LD_INT 22
19347: PUSH
19348: LD_OWVAR 2
19352: PUSH
19353: EMPTY
19354: LIST
19355: LIST
19356: PUSH
19357: LD_INT 30
19359: PUSH
19360: LD_INT 29
19362: PUSH
19363: EMPTY
19364: LIST
19365: LIST
19366: PUSH
19367: EMPTY
19368: LIST
19369: LIST
19370: PPUSH
19371: CALL_OW 69
19375: ST_TO_ADDR
// if not tmp then
19376: LD_VAR 0 2
19380: NOT
19381: IFFALSE 19385
// exit ;
19383: GO 19435
// CenterNowOnUnits ( tmp [ 1 ] ) ;
19385: LD_VAR 0 2
19389: PUSH
19390: LD_INT 1
19392: ARRAY
19393: PPUSH
19394: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
19398: LD_VAR 0 2
19402: PUSH
19403: LD_INT 1
19405: ARRAY
19406: PPUSH
19407: CALL_OW 65
// end ; 5 .. 7 :
19411: GO 19435
19413: LD_INT 5
19415: DOUBLE
19416: GREATEREQUAL
19417: IFFALSE 19425
19419: LD_INT 7
19421: DOUBLE
19422: LESSEQUAL
19423: IFTRUE 19427
19425: GO 19434
19427: POP
// StreamSibBomb ; end ;
19428: CALL 15672 0 0
19432: GO 19435
19434: POP
// end ;
19435: PPOPN 3
19437: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19438: LD_EXP 23
19442: PUSH
19443: LD_EXP 73
19447: AND
19448: IFFALSE 19604
19450: GO 19452
19452: DISABLE
19453: LD_INT 0
19455: PPUSH
19456: PPUSH
19457: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
19458: LD_ADDR_VAR 0 2
19462: PUSH
19463: LD_INT 81
19465: PUSH
19466: LD_OWVAR 2
19470: PUSH
19471: EMPTY
19472: LIST
19473: LIST
19474: PUSH
19475: LD_INT 2
19477: PUSH
19478: LD_INT 21
19480: PUSH
19481: LD_INT 1
19483: PUSH
19484: EMPTY
19485: LIST
19486: LIST
19487: PUSH
19488: LD_INT 21
19490: PUSH
19491: LD_INT 2
19493: PUSH
19494: EMPTY
19495: LIST
19496: LIST
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: LIST
19502: PUSH
19503: EMPTY
19504: LIST
19505: LIST
19506: PPUSH
19507: CALL_OW 69
19511: ST_TO_ADDR
// if not tmp then
19512: LD_VAR 0 2
19516: NOT
19517: IFFALSE 19521
// exit ;
19519: GO 19604
// p := 0 ;
19521: LD_ADDR_VAR 0 3
19525: PUSH
19526: LD_INT 0
19528: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19529: LD_INT 35
19531: PPUSH
19532: CALL_OW 67
// p := p + 1 ;
19536: LD_ADDR_VAR 0 3
19540: PUSH
19541: LD_VAR 0 3
19545: PUSH
19546: LD_INT 1
19548: PLUS
19549: ST_TO_ADDR
// for i in tmp do
19550: LD_ADDR_VAR 0 1
19554: PUSH
19555: LD_VAR 0 2
19559: PUSH
19560: FOR_IN
19561: IFFALSE 19592
// if GetLives ( i ) < 1000 then
19563: LD_VAR 0 1
19567: PPUSH
19568: CALL_OW 256
19572: PUSH
19573: LD_INT 1000
19575: LESS
19576: IFFALSE 19590
// SetLives ( i , 1000 ) ;
19578: LD_VAR 0 1
19582: PPUSH
19583: LD_INT 1000
19585: PPUSH
19586: CALL_OW 234
19590: GO 19560
19592: POP
19593: POP
// until p > 20 ;
19594: LD_VAR 0 3
19598: PUSH
19599: LD_INT 20
19601: GREATER
19602: IFFALSE 19529
// end ;
19604: PPOPN 3
19606: END
// every 0 0$1 trigger StreamModeActive and sTime do
19607: LD_EXP 23
19611: PUSH
19612: LD_EXP 74
19616: AND
19617: IFFALSE 19652
19619: GO 19621
19621: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19622: LD_INT 28
19624: PPUSH
19625: LD_OWVAR 2
19629: PPUSH
19630: LD_INT 2
19632: PPUSH
19633: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19637: LD_INT 30
19639: PPUSH
19640: LD_OWVAR 2
19644: PPUSH
19645: LD_INT 2
19647: PPUSH
19648: CALL_OW 322
// end ;
19652: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19653: LD_EXP 23
19657: PUSH
19658: LD_EXP 75
19662: AND
19663: IFFALSE 19784
19665: GO 19667
19667: DISABLE
19668: LD_INT 0
19670: PPUSH
19671: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19672: LD_ADDR_VAR 0 2
19676: PUSH
19677: LD_INT 22
19679: PUSH
19680: LD_OWVAR 2
19684: PUSH
19685: EMPTY
19686: LIST
19687: LIST
19688: PUSH
19689: LD_INT 21
19691: PUSH
19692: LD_INT 1
19694: PUSH
19695: EMPTY
19696: LIST
19697: LIST
19698: PUSH
19699: LD_INT 3
19701: PUSH
19702: LD_INT 23
19704: PUSH
19705: LD_INT 0
19707: PUSH
19708: EMPTY
19709: LIST
19710: LIST
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: PUSH
19716: EMPTY
19717: LIST
19718: LIST
19719: LIST
19720: PPUSH
19721: CALL_OW 69
19725: ST_TO_ADDR
// if not tmp then
19726: LD_VAR 0 2
19730: NOT
19731: IFFALSE 19735
// exit ;
19733: GO 19784
// for i in tmp do
19735: LD_ADDR_VAR 0 1
19739: PUSH
19740: LD_VAR 0 2
19744: PUSH
19745: FOR_IN
19746: IFFALSE 19782
// begin if Crawls ( i ) then
19748: LD_VAR 0 1
19752: PPUSH
19753: CALL_OW 318
19757: IFFALSE 19768
// ComWalk ( i ) ;
19759: LD_VAR 0 1
19763: PPUSH
19764: CALL_OW 138
// SetClass ( i , 2 ) ;
19768: LD_VAR 0 1
19772: PPUSH
19773: LD_INT 2
19775: PPUSH
19776: CALL_OW 336
// end ;
19780: GO 19745
19782: POP
19783: POP
// end ;
19784: PPOPN 2
19786: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19787: LD_EXP 23
19791: PUSH
19792: LD_EXP 76
19796: AND
19797: IFFALSE 20085
19799: GO 19801
19801: DISABLE
19802: LD_INT 0
19804: PPUSH
19805: PPUSH
19806: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19807: LD_OWVAR 2
19811: PPUSH
19812: LD_INT 9
19814: PPUSH
19815: LD_INT 1
19817: PPUSH
19818: LD_INT 1
19820: PPUSH
19821: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19825: LD_INT 9
19827: PPUSH
19828: LD_OWVAR 2
19832: PPUSH
19833: CALL_OW 343
// uc_side := 9 ;
19837: LD_ADDR_OWVAR 20
19841: PUSH
19842: LD_INT 9
19844: ST_TO_ADDR
// uc_nation := 2 ;
19845: LD_ADDR_OWVAR 21
19849: PUSH
19850: LD_INT 2
19852: ST_TO_ADDR
// hc_name := Dark Warrior ;
19853: LD_ADDR_OWVAR 26
19857: PUSH
19858: LD_STRING Dark Warrior
19860: ST_TO_ADDR
// hc_gallery :=  ;
19861: LD_ADDR_OWVAR 33
19865: PUSH
19866: LD_STRING 
19868: ST_TO_ADDR
// hc_noskilllimit := true ;
19869: LD_ADDR_OWVAR 76
19873: PUSH
19874: LD_INT 1
19876: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19877: LD_ADDR_OWVAR 31
19881: PUSH
19882: LD_INT 30
19884: PUSH
19885: LD_INT 30
19887: PUSH
19888: LD_INT 30
19890: PUSH
19891: LD_INT 30
19893: PUSH
19894: EMPTY
19895: LIST
19896: LIST
19897: LIST
19898: LIST
19899: ST_TO_ADDR
// un := CreateHuman ;
19900: LD_ADDR_VAR 0 3
19904: PUSH
19905: CALL_OW 44
19909: ST_TO_ADDR
// hc_noskilllimit := false ;
19910: LD_ADDR_OWVAR 76
19914: PUSH
19915: LD_INT 0
19917: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19918: LD_VAR 0 3
19922: PPUSH
19923: LD_INT 1
19925: PPUSH
19926: CALL_OW 51
// ToLua ( playRanger() ) ;
19930: LD_STRING playRanger()
19932: PPUSH
19933: CALL_OW 559
// p := 0 ;
19937: LD_ADDR_VAR 0 2
19941: PUSH
19942: LD_INT 0
19944: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19945: LD_INT 35
19947: PPUSH
19948: CALL_OW 67
// p := p + 1 ;
19952: LD_ADDR_VAR 0 2
19956: PUSH
19957: LD_VAR 0 2
19961: PUSH
19962: LD_INT 1
19964: PLUS
19965: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19966: LD_VAR 0 3
19970: PPUSH
19971: CALL_OW 256
19975: PUSH
19976: LD_INT 1000
19978: LESS
19979: IFFALSE 19993
// SetLives ( un , 1000 ) ;
19981: LD_VAR 0 3
19985: PPUSH
19986: LD_INT 1000
19988: PPUSH
19989: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19993: LD_VAR 0 3
19997: PPUSH
19998: LD_INT 81
20000: PUSH
20001: LD_OWVAR 2
20005: PUSH
20006: EMPTY
20007: LIST
20008: LIST
20009: PUSH
20010: LD_INT 91
20012: PUSH
20013: LD_VAR 0 3
20017: PUSH
20018: LD_INT 30
20020: PUSH
20021: EMPTY
20022: LIST
20023: LIST
20024: LIST
20025: PUSH
20026: EMPTY
20027: LIST
20028: LIST
20029: PPUSH
20030: CALL_OW 69
20034: PPUSH
20035: LD_VAR 0 3
20039: PPUSH
20040: CALL_OW 74
20044: PPUSH
20045: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
20049: LD_VAR 0 2
20053: PUSH
20054: LD_INT 80
20056: GREATER
20057: PUSH
20058: LD_VAR 0 3
20062: PPUSH
20063: CALL_OW 301
20067: OR
20068: IFFALSE 19945
// if un then
20070: LD_VAR 0 3
20074: IFFALSE 20085
// RemoveUnit ( un ) ;
20076: LD_VAR 0 3
20080: PPUSH
20081: CALL_OW 64
// end ;
20085: PPOPN 3
20087: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
20088: LD_EXP 77
20092: IFFALSE 20208
20094: GO 20096
20096: DISABLE
20097: LD_INT 0
20099: PPUSH
20100: PPUSH
20101: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
20102: LD_ADDR_VAR 0 2
20106: PUSH
20107: LD_INT 81
20109: PUSH
20110: LD_OWVAR 2
20114: PUSH
20115: EMPTY
20116: LIST
20117: LIST
20118: PUSH
20119: LD_INT 21
20121: PUSH
20122: LD_INT 1
20124: PUSH
20125: EMPTY
20126: LIST
20127: LIST
20128: PUSH
20129: EMPTY
20130: LIST
20131: LIST
20132: PPUSH
20133: CALL_OW 69
20137: ST_TO_ADDR
// ToLua ( playComputer() ) ;
20138: LD_STRING playComputer()
20140: PPUSH
20141: CALL_OW 559
// if not tmp then
20145: LD_VAR 0 2
20149: NOT
20150: IFFALSE 20154
// exit ;
20152: GO 20208
// for i in tmp do
20154: LD_ADDR_VAR 0 1
20158: PUSH
20159: LD_VAR 0 2
20163: PUSH
20164: FOR_IN
20165: IFFALSE 20206
// for j := 1 to 4 do
20167: LD_ADDR_VAR 0 3
20171: PUSH
20172: DOUBLE
20173: LD_INT 1
20175: DEC
20176: ST_TO_ADDR
20177: LD_INT 4
20179: PUSH
20180: FOR_TO
20181: IFFALSE 20202
// SetSkill ( i , j , 10 ) ;
20183: LD_VAR 0 1
20187: PPUSH
20188: LD_VAR 0 3
20192: PPUSH
20193: LD_INT 10
20195: PPUSH
20196: CALL_OW 237
20200: GO 20180
20202: POP
20203: POP
20204: GO 20164
20206: POP
20207: POP
// end ;
20208: PPOPN 3
20210: END
// every 0 0$1 trigger s30 do var i , tmp ;
20211: LD_EXP 78
20215: IFFALSE 20284
20217: GO 20219
20219: DISABLE
20220: LD_INT 0
20222: PPUSH
20223: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20224: LD_ADDR_VAR 0 2
20228: PUSH
20229: LD_INT 22
20231: PUSH
20232: LD_OWVAR 2
20236: PUSH
20237: EMPTY
20238: LIST
20239: LIST
20240: PPUSH
20241: CALL_OW 69
20245: ST_TO_ADDR
// if not tmp then
20246: LD_VAR 0 2
20250: NOT
20251: IFFALSE 20255
// exit ;
20253: GO 20284
// for i in tmp do
20255: LD_ADDR_VAR 0 1
20259: PUSH
20260: LD_VAR 0 2
20264: PUSH
20265: FOR_IN
20266: IFFALSE 20282
// SetLives ( i , 300 ) ;
20268: LD_VAR 0 1
20272: PPUSH
20273: LD_INT 300
20275: PPUSH
20276: CALL_OW 234
20280: GO 20265
20282: POP
20283: POP
// end ;
20284: PPOPN 2
20286: END
// every 0 0$1 trigger s60 do var i , tmp ;
20287: LD_EXP 79
20291: IFFALSE 20360
20293: GO 20295
20295: DISABLE
20296: LD_INT 0
20298: PPUSH
20299: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20300: LD_ADDR_VAR 0 2
20304: PUSH
20305: LD_INT 22
20307: PUSH
20308: LD_OWVAR 2
20312: PUSH
20313: EMPTY
20314: LIST
20315: LIST
20316: PPUSH
20317: CALL_OW 69
20321: ST_TO_ADDR
// if not tmp then
20322: LD_VAR 0 2
20326: NOT
20327: IFFALSE 20331
// exit ;
20329: GO 20360
// for i in tmp do
20331: LD_ADDR_VAR 0 1
20335: PUSH
20336: LD_VAR 0 2
20340: PUSH
20341: FOR_IN
20342: IFFALSE 20358
// SetLives ( i , 600 ) ;
20344: LD_VAR 0 1
20348: PPUSH
20349: LD_INT 600
20351: PPUSH
20352: CALL_OW 234
20356: GO 20341
20358: POP
20359: POP
// end ;
20360: PPOPN 2
20362: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20363: LD_INT 0
20365: PPUSH
// case cmd of 301 :
20366: LD_VAR 0 1
20370: PUSH
20371: LD_INT 301
20373: DOUBLE
20374: EQUAL
20375: IFTRUE 20379
20377: GO 20411
20379: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
20380: LD_VAR 0 6
20384: PPUSH
20385: LD_VAR 0 7
20389: PPUSH
20390: LD_VAR 0 8
20394: PPUSH
20395: LD_VAR 0 4
20399: PPUSH
20400: LD_VAR 0 5
20404: PPUSH
20405: CALL 21612 0 5
20409: GO 20532
20411: LD_INT 302
20413: DOUBLE
20414: EQUAL
20415: IFTRUE 20419
20417: GO 20456
20419: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
20420: LD_VAR 0 6
20424: PPUSH
20425: LD_VAR 0 7
20429: PPUSH
20430: LD_VAR 0 8
20434: PPUSH
20435: LD_VAR 0 9
20439: PPUSH
20440: LD_VAR 0 4
20444: PPUSH
20445: LD_VAR 0 5
20449: PPUSH
20450: CALL 21703 0 6
20454: GO 20532
20456: LD_INT 303
20458: DOUBLE
20459: EQUAL
20460: IFTRUE 20464
20462: GO 20501
20464: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
20465: LD_VAR 0 6
20469: PPUSH
20470: LD_VAR 0 7
20474: PPUSH
20475: LD_VAR 0 8
20479: PPUSH
20480: LD_VAR 0 9
20484: PPUSH
20485: LD_VAR 0 4
20489: PPUSH
20490: LD_VAR 0 5
20494: PPUSH
20495: CALL 20537 0 6
20499: GO 20532
20501: LD_INT 304
20503: DOUBLE
20504: EQUAL
20505: IFTRUE 20509
20507: GO 20531
20509: POP
// hHackTeleport ( unit , x , y ) ; end ;
20510: LD_VAR 0 2
20514: PPUSH
20515: LD_VAR 0 4
20519: PPUSH
20520: LD_VAR 0 5
20524: PPUSH
20525: CALL 22296 0 3
20529: GO 20532
20531: POP
// end ;
20532: LD_VAR 0 12
20536: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
20537: LD_INT 0
20539: PPUSH
20540: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
20541: LD_VAR 0 1
20545: PUSH
20546: LD_INT 1
20548: LESS
20549: PUSH
20550: LD_VAR 0 1
20554: PUSH
20555: LD_INT 3
20557: GREATER
20558: OR
20559: PUSH
20560: LD_VAR 0 5
20564: PPUSH
20565: LD_VAR 0 6
20569: PPUSH
20570: CALL_OW 428
20574: OR
20575: IFFALSE 20579
// exit ;
20577: GO 21299
// uc_side := your_side ;
20579: LD_ADDR_OWVAR 20
20583: PUSH
20584: LD_OWVAR 2
20588: ST_TO_ADDR
// uc_nation := nation ;
20589: LD_ADDR_OWVAR 21
20593: PUSH
20594: LD_VAR 0 1
20598: ST_TO_ADDR
// bc_level = 1 ;
20599: LD_ADDR_OWVAR 43
20603: PUSH
20604: LD_INT 1
20606: ST_TO_ADDR
// case btype of 1 :
20607: LD_VAR 0 2
20611: PUSH
20612: LD_INT 1
20614: DOUBLE
20615: EQUAL
20616: IFTRUE 20620
20618: GO 20631
20620: POP
// bc_type := b_depot ; 2 :
20621: LD_ADDR_OWVAR 42
20625: PUSH
20626: LD_INT 0
20628: ST_TO_ADDR
20629: GO 21243
20631: LD_INT 2
20633: DOUBLE
20634: EQUAL
20635: IFTRUE 20639
20637: GO 20650
20639: POP
// bc_type := b_warehouse ; 3 :
20640: LD_ADDR_OWVAR 42
20644: PUSH
20645: LD_INT 1
20647: ST_TO_ADDR
20648: GO 21243
20650: LD_INT 3
20652: DOUBLE
20653: EQUAL
20654: IFTRUE 20658
20656: GO 20669
20658: POP
// bc_type := b_lab ; 4 .. 9 :
20659: LD_ADDR_OWVAR 42
20663: PUSH
20664: LD_INT 6
20666: ST_TO_ADDR
20667: GO 21243
20669: LD_INT 4
20671: DOUBLE
20672: GREATEREQUAL
20673: IFFALSE 20681
20675: LD_INT 9
20677: DOUBLE
20678: LESSEQUAL
20679: IFTRUE 20683
20681: GO 20735
20683: POP
// begin bc_type := b_lab_half ;
20684: LD_ADDR_OWVAR 42
20688: PUSH
20689: LD_INT 7
20691: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
20692: LD_ADDR_OWVAR 44
20696: PUSH
20697: LD_INT 10
20699: PUSH
20700: LD_INT 11
20702: PUSH
20703: LD_INT 12
20705: PUSH
20706: LD_INT 15
20708: PUSH
20709: LD_INT 14
20711: PUSH
20712: LD_INT 13
20714: PUSH
20715: EMPTY
20716: LIST
20717: LIST
20718: LIST
20719: LIST
20720: LIST
20721: LIST
20722: PUSH
20723: LD_VAR 0 2
20727: PUSH
20728: LD_INT 3
20730: MINUS
20731: ARRAY
20732: ST_TO_ADDR
// end ; 10 .. 13 :
20733: GO 21243
20735: LD_INT 10
20737: DOUBLE
20738: GREATEREQUAL
20739: IFFALSE 20747
20741: LD_INT 13
20743: DOUBLE
20744: LESSEQUAL
20745: IFTRUE 20749
20747: GO 20826
20749: POP
// begin bc_type := b_lab_full ;
20750: LD_ADDR_OWVAR 42
20754: PUSH
20755: LD_INT 8
20757: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
20758: LD_ADDR_OWVAR 44
20762: PUSH
20763: LD_INT 10
20765: PUSH
20766: LD_INT 12
20768: PUSH
20769: LD_INT 14
20771: PUSH
20772: LD_INT 13
20774: PUSH
20775: EMPTY
20776: LIST
20777: LIST
20778: LIST
20779: LIST
20780: PUSH
20781: LD_VAR 0 2
20785: PUSH
20786: LD_INT 9
20788: MINUS
20789: ARRAY
20790: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20791: LD_ADDR_OWVAR 45
20795: PUSH
20796: LD_INT 11
20798: PUSH
20799: LD_INT 15
20801: PUSH
20802: LD_INT 12
20804: PUSH
20805: LD_INT 15
20807: PUSH
20808: EMPTY
20809: LIST
20810: LIST
20811: LIST
20812: LIST
20813: PUSH
20814: LD_VAR 0 2
20818: PUSH
20819: LD_INT 9
20821: MINUS
20822: ARRAY
20823: ST_TO_ADDR
// end ; 14 :
20824: GO 21243
20826: LD_INT 14
20828: DOUBLE
20829: EQUAL
20830: IFTRUE 20834
20832: GO 20845
20834: POP
// bc_type := b_workshop ; 15 :
20835: LD_ADDR_OWVAR 42
20839: PUSH
20840: LD_INT 2
20842: ST_TO_ADDR
20843: GO 21243
20845: LD_INT 15
20847: DOUBLE
20848: EQUAL
20849: IFTRUE 20853
20851: GO 20864
20853: POP
// bc_type := b_factory ; 16 :
20854: LD_ADDR_OWVAR 42
20858: PUSH
20859: LD_INT 3
20861: ST_TO_ADDR
20862: GO 21243
20864: LD_INT 16
20866: DOUBLE
20867: EQUAL
20868: IFTRUE 20872
20870: GO 20883
20872: POP
// bc_type := b_ext_gun ; 17 :
20873: LD_ADDR_OWVAR 42
20877: PUSH
20878: LD_INT 17
20880: ST_TO_ADDR
20881: GO 21243
20883: LD_INT 17
20885: DOUBLE
20886: EQUAL
20887: IFTRUE 20891
20889: GO 20919
20891: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20892: LD_ADDR_OWVAR 42
20896: PUSH
20897: LD_INT 19
20899: PUSH
20900: LD_INT 23
20902: PUSH
20903: LD_INT 19
20905: PUSH
20906: EMPTY
20907: LIST
20908: LIST
20909: LIST
20910: PUSH
20911: LD_VAR 0 1
20915: ARRAY
20916: ST_TO_ADDR
20917: GO 21243
20919: LD_INT 18
20921: DOUBLE
20922: EQUAL
20923: IFTRUE 20927
20925: GO 20938
20927: POP
// bc_type := b_ext_radar ; 19 :
20928: LD_ADDR_OWVAR 42
20932: PUSH
20933: LD_INT 20
20935: ST_TO_ADDR
20936: GO 21243
20938: LD_INT 19
20940: DOUBLE
20941: EQUAL
20942: IFTRUE 20946
20944: GO 20957
20946: POP
// bc_type := b_ext_radio ; 20 :
20947: LD_ADDR_OWVAR 42
20951: PUSH
20952: LD_INT 22
20954: ST_TO_ADDR
20955: GO 21243
20957: LD_INT 20
20959: DOUBLE
20960: EQUAL
20961: IFTRUE 20965
20963: GO 20976
20965: POP
// bc_type := b_ext_siberium ; 21 :
20966: LD_ADDR_OWVAR 42
20970: PUSH
20971: LD_INT 21
20973: ST_TO_ADDR
20974: GO 21243
20976: LD_INT 21
20978: DOUBLE
20979: EQUAL
20980: IFTRUE 20984
20982: GO 20995
20984: POP
// bc_type := b_ext_computer ; 22 :
20985: LD_ADDR_OWVAR 42
20989: PUSH
20990: LD_INT 24
20992: ST_TO_ADDR
20993: GO 21243
20995: LD_INT 22
20997: DOUBLE
20998: EQUAL
20999: IFTRUE 21003
21001: GO 21014
21003: POP
// bc_type := b_ext_track ; 23 :
21004: LD_ADDR_OWVAR 42
21008: PUSH
21009: LD_INT 16
21011: ST_TO_ADDR
21012: GO 21243
21014: LD_INT 23
21016: DOUBLE
21017: EQUAL
21018: IFTRUE 21022
21020: GO 21033
21022: POP
// bc_type := b_ext_laser ; 24 :
21023: LD_ADDR_OWVAR 42
21027: PUSH
21028: LD_INT 25
21030: ST_TO_ADDR
21031: GO 21243
21033: LD_INT 24
21035: DOUBLE
21036: EQUAL
21037: IFTRUE 21041
21039: GO 21052
21041: POP
// bc_type := b_control_tower ; 25 :
21042: LD_ADDR_OWVAR 42
21046: PUSH
21047: LD_INT 36
21049: ST_TO_ADDR
21050: GO 21243
21052: LD_INT 25
21054: DOUBLE
21055: EQUAL
21056: IFTRUE 21060
21058: GO 21071
21060: POP
// bc_type := b_breastwork ; 26 :
21061: LD_ADDR_OWVAR 42
21065: PUSH
21066: LD_INT 31
21068: ST_TO_ADDR
21069: GO 21243
21071: LD_INT 26
21073: DOUBLE
21074: EQUAL
21075: IFTRUE 21079
21077: GO 21090
21079: POP
// bc_type := b_bunker ; 27 :
21080: LD_ADDR_OWVAR 42
21084: PUSH
21085: LD_INT 32
21087: ST_TO_ADDR
21088: GO 21243
21090: LD_INT 27
21092: DOUBLE
21093: EQUAL
21094: IFTRUE 21098
21096: GO 21109
21098: POP
// bc_type := b_turret ; 28 :
21099: LD_ADDR_OWVAR 42
21103: PUSH
21104: LD_INT 33
21106: ST_TO_ADDR
21107: GO 21243
21109: LD_INT 28
21111: DOUBLE
21112: EQUAL
21113: IFTRUE 21117
21115: GO 21128
21117: POP
// bc_type := b_armoury ; 29 :
21118: LD_ADDR_OWVAR 42
21122: PUSH
21123: LD_INT 4
21125: ST_TO_ADDR
21126: GO 21243
21128: LD_INT 29
21130: DOUBLE
21131: EQUAL
21132: IFTRUE 21136
21134: GO 21147
21136: POP
// bc_type := b_barracks ; 30 :
21137: LD_ADDR_OWVAR 42
21141: PUSH
21142: LD_INT 5
21144: ST_TO_ADDR
21145: GO 21243
21147: LD_INT 30
21149: DOUBLE
21150: EQUAL
21151: IFTRUE 21155
21153: GO 21166
21155: POP
// bc_type := b_solar_power ; 31 :
21156: LD_ADDR_OWVAR 42
21160: PUSH
21161: LD_INT 27
21163: ST_TO_ADDR
21164: GO 21243
21166: LD_INT 31
21168: DOUBLE
21169: EQUAL
21170: IFTRUE 21174
21172: GO 21185
21174: POP
// bc_type := b_oil_power ; 32 :
21175: LD_ADDR_OWVAR 42
21179: PUSH
21180: LD_INT 26
21182: ST_TO_ADDR
21183: GO 21243
21185: LD_INT 32
21187: DOUBLE
21188: EQUAL
21189: IFTRUE 21193
21191: GO 21204
21193: POP
// bc_type := b_siberite_power ; 33 :
21194: LD_ADDR_OWVAR 42
21198: PUSH
21199: LD_INT 28
21201: ST_TO_ADDR
21202: GO 21243
21204: LD_INT 33
21206: DOUBLE
21207: EQUAL
21208: IFTRUE 21212
21210: GO 21223
21212: POP
// bc_type := b_oil_mine ; 34 :
21213: LD_ADDR_OWVAR 42
21217: PUSH
21218: LD_INT 29
21220: ST_TO_ADDR
21221: GO 21243
21223: LD_INT 34
21225: DOUBLE
21226: EQUAL
21227: IFTRUE 21231
21229: GO 21242
21231: POP
// bc_type := b_siberite_mine ; end ;
21232: LD_ADDR_OWVAR 42
21236: PUSH
21237: LD_INT 30
21239: ST_TO_ADDR
21240: GO 21243
21242: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
21243: LD_ADDR_VAR 0 8
21247: PUSH
21248: LD_VAR 0 5
21252: PPUSH
21253: LD_VAR 0 6
21257: PPUSH
21258: LD_VAR 0 3
21262: PPUSH
21263: CALL_OW 47
21267: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
21268: LD_OWVAR 42
21272: PUSH
21273: LD_INT 32
21275: PUSH
21276: LD_INT 33
21278: PUSH
21279: EMPTY
21280: LIST
21281: LIST
21282: IN
21283: IFFALSE 21299
// PlaceWeaponTurret ( b , weapon ) ;
21285: LD_VAR 0 8
21289: PPUSH
21290: LD_VAR 0 4
21294: PPUSH
21295: CALL_OW 431
// end ;
21299: LD_VAR 0 7
21303: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
21304: LD_INT 0
21306: PPUSH
21307: PPUSH
21308: PPUSH
21309: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21310: LD_ADDR_VAR 0 4
21314: PUSH
21315: LD_INT 22
21317: PUSH
21318: LD_OWVAR 2
21322: PUSH
21323: EMPTY
21324: LIST
21325: LIST
21326: PUSH
21327: LD_INT 2
21329: PUSH
21330: LD_INT 30
21332: PUSH
21333: LD_INT 0
21335: PUSH
21336: EMPTY
21337: LIST
21338: LIST
21339: PUSH
21340: LD_INT 30
21342: PUSH
21343: LD_INT 1
21345: PUSH
21346: EMPTY
21347: LIST
21348: LIST
21349: PUSH
21350: EMPTY
21351: LIST
21352: LIST
21353: LIST
21354: PUSH
21355: EMPTY
21356: LIST
21357: LIST
21358: PPUSH
21359: CALL_OW 69
21363: ST_TO_ADDR
// if not tmp then
21364: LD_VAR 0 4
21368: NOT
21369: IFFALSE 21373
// exit ;
21371: GO 21432
// for i in tmp do
21373: LD_ADDR_VAR 0 2
21377: PUSH
21378: LD_VAR 0 4
21382: PUSH
21383: FOR_IN
21384: IFFALSE 21430
// for j = 1 to 3 do
21386: LD_ADDR_VAR 0 3
21390: PUSH
21391: DOUBLE
21392: LD_INT 1
21394: DEC
21395: ST_TO_ADDR
21396: LD_INT 3
21398: PUSH
21399: FOR_TO
21400: IFFALSE 21426
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
21402: LD_VAR 0 2
21406: PPUSH
21407: CALL_OW 274
21411: PPUSH
21412: LD_VAR 0 3
21416: PPUSH
21417: LD_INT 99999
21419: PPUSH
21420: CALL_OW 277
21424: GO 21399
21426: POP
21427: POP
21428: GO 21383
21430: POP
21431: POP
// end ;
21432: LD_VAR 0 1
21436: RET
// export function hHackSetLevel10 ; var i , j ; begin
21437: LD_INT 0
21439: PPUSH
21440: PPUSH
21441: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21442: LD_ADDR_VAR 0 2
21446: PUSH
21447: LD_INT 21
21449: PUSH
21450: LD_INT 1
21452: PUSH
21453: EMPTY
21454: LIST
21455: LIST
21456: PPUSH
21457: CALL_OW 69
21461: PUSH
21462: FOR_IN
21463: IFFALSE 21515
// if IsSelected ( i ) then
21465: LD_VAR 0 2
21469: PPUSH
21470: CALL_OW 306
21474: IFFALSE 21513
// begin for j := 1 to 4 do
21476: LD_ADDR_VAR 0 3
21480: PUSH
21481: DOUBLE
21482: LD_INT 1
21484: DEC
21485: ST_TO_ADDR
21486: LD_INT 4
21488: PUSH
21489: FOR_TO
21490: IFFALSE 21511
// SetSkill ( i , j , 10 ) ;
21492: LD_VAR 0 2
21496: PPUSH
21497: LD_VAR 0 3
21501: PPUSH
21502: LD_INT 10
21504: PPUSH
21505: CALL_OW 237
21509: GO 21489
21511: POP
21512: POP
// end ;
21513: GO 21462
21515: POP
21516: POP
// end ;
21517: LD_VAR 0 1
21521: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
21522: LD_INT 0
21524: PPUSH
21525: PPUSH
21526: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21527: LD_ADDR_VAR 0 2
21531: PUSH
21532: LD_INT 22
21534: PUSH
21535: LD_OWVAR 2
21539: PUSH
21540: EMPTY
21541: LIST
21542: LIST
21543: PUSH
21544: LD_INT 21
21546: PUSH
21547: LD_INT 1
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: PUSH
21554: EMPTY
21555: LIST
21556: LIST
21557: PPUSH
21558: CALL_OW 69
21562: PUSH
21563: FOR_IN
21564: IFFALSE 21605
// begin for j := 1 to 4 do
21566: LD_ADDR_VAR 0 3
21570: PUSH
21571: DOUBLE
21572: LD_INT 1
21574: DEC
21575: ST_TO_ADDR
21576: LD_INT 4
21578: PUSH
21579: FOR_TO
21580: IFFALSE 21601
// SetSkill ( i , j , 10 ) ;
21582: LD_VAR 0 2
21586: PPUSH
21587: LD_VAR 0 3
21591: PPUSH
21592: LD_INT 10
21594: PPUSH
21595: CALL_OW 237
21599: GO 21579
21601: POP
21602: POP
// end ;
21603: GO 21563
21605: POP
21606: POP
// end ;
21607: LD_VAR 0 1
21611: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
21612: LD_INT 0
21614: PPUSH
// uc_side := your_side ;
21615: LD_ADDR_OWVAR 20
21619: PUSH
21620: LD_OWVAR 2
21624: ST_TO_ADDR
// uc_nation := nation ;
21625: LD_ADDR_OWVAR 21
21629: PUSH
21630: LD_VAR 0 1
21634: ST_TO_ADDR
// InitHc ;
21635: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21639: LD_INT 0
21641: PPUSH
21642: LD_VAR 0 2
21646: PPUSH
21647: LD_VAR 0 3
21651: PPUSH
21652: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
21656: LD_VAR 0 4
21660: PPUSH
21661: LD_VAR 0 5
21665: PPUSH
21666: CALL_OW 428
21670: PUSH
21671: LD_INT 0
21673: EQUAL
21674: IFFALSE 21698
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
21676: CALL_OW 44
21680: PPUSH
21681: LD_VAR 0 4
21685: PPUSH
21686: LD_VAR 0 5
21690: PPUSH
21691: LD_INT 1
21693: PPUSH
21694: CALL_OW 48
// end ;
21698: LD_VAR 0 6
21702: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
21703: LD_INT 0
21705: PPUSH
21706: PPUSH
// uc_side := your_side ;
21707: LD_ADDR_OWVAR 20
21711: PUSH
21712: LD_OWVAR 2
21716: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
21717: LD_VAR 0 1
21721: PUSH
21722: LD_INT 1
21724: PUSH
21725: LD_INT 2
21727: PUSH
21728: LD_INT 3
21730: PUSH
21731: LD_INT 4
21733: PUSH
21734: LD_INT 5
21736: PUSH
21737: EMPTY
21738: LIST
21739: LIST
21740: LIST
21741: LIST
21742: LIST
21743: IN
21744: IFFALSE 21756
// uc_nation := nation_american else
21746: LD_ADDR_OWVAR 21
21750: PUSH
21751: LD_INT 1
21753: ST_TO_ADDR
21754: GO 21799
// if chassis in [ 11 , 12 , 13 , 14 ] then
21756: LD_VAR 0 1
21760: PUSH
21761: LD_INT 11
21763: PUSH
21764: LD_INT 12
21766: PUSH
21767: LD_INT 13
21769: PUSH
21770: LD_INT 14
21772: PUSH
21773: EMPTY
21774: LIST
21775: LIST
21776: LIST
21777: LIST
21778: IN
21779: IFFALSE 21791
// uc_nation := nation_arabian else
21781: LD_ADDR_OWVAR 21
21785: PUSH
21786: LD_INT 2
21788: ST_TO_ADDR
21789: GO 21799
// uc_nation := nation_russian ;
21791: LD_ADDR_OWVAR 21
21795: PUSH
21796: LD_INT 3
21798: ST_TO_ADDR
// vc_chassis := chassis ;
21799: LD_ADDR_OWVAR 37
21803: PUSH
21804: LD_VAR 0 1
21808: ST_TO_ADDR
// vc_engine := engine ;
21809: LD_ADDR_OWVAR 39
21813: PUSH
21814: LD_VAR 0 2
21818: ST_TO_ADDR
// vc_control := control ;
21819: LD_ADDR_OWVAR 38
21823: PUSH
21824: LD_VAR 0 3
21828: ST_TO_ADDR
// vc_weapon := weapon ;
21829: LD_ADDR_OWVAR 40
21833: PUSH
21834: LD_VAR 0 4
21838: ST_TO_ADDR
// un := CreateVehicle ;
21839: LD_ADDR_VAR 0 8
21843: PUSH
21844: CALL_OW 45
21848: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21849: LD_VAR 0 8
21853: PPUSH
21854: LD_INT 0
21856: PPUSH
21857: LD_INT 5
21859: PPUSH
21860: CALL_OW 12
21864: PPUSH
21865: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21869: LD_VAR 0 8
21873: PPUSH
21874: LD_VAR 0 5
21878: PPUSH
21879: LD_VAR 0 6
21883: PPUSH
21884: LD_INT 1
21886: PPUSH
21887: CALL_OW 48
// end ;
21891: LD_VAR 0 7
21895: RET
// export hInvincible ; every 1 do
21896: GO 21898
21898: DISABLE
// hInvincible := [ ] ;
21899: LD_ADDR_EXP 80
21903: PUSH
21904: EMPTY
21905: ST_TO_ADDR
21906: END
// every 10 do var i ;
21907: GO 21909
21909: DISABLE
21910: LD_INT 0
21912: PPUSH
// begin enable ;
21913: ENABLE
// if not hInvincible then
21914: LD_EXP 80
21918: NOT
21919: IFFALSE 21923
// exit ;
21921: GO 21967
// for i in hInvincible do
21923: LD_ADDR_VAR 0 1
21927: PUSH
21928: LD_EXP 80
21932: PUSH
21933: FOR_IN
21934: IFFALSE 21965
// if GetLives ( i ) < 1000 then
21936: LD_VAR 0 1
21940: PPUSH
21941: CALL_OW 256
21945: PUSH
21946: LD_INT 1000
21948: LESS
21949: IFFALSE 21963
// SetLives ( i , 1000 ) ;
21951: LD_VAR 0 1
21955: PPUSH
21956: LD_INT 1000
21958: PPUSH
21959: CALL_OW 234
21963: GO 21933
21965: POP
21966: POP
// end ;
21967: PPOPN 1
21969: END
// export function hHackInvincible ; var i ; begin
21970: LD_INT 0
21972: PPUSH
21973: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21974: LD_ADDR_VAR 0 2
21978: PUSH
21979: LD_INT 2
21981: PUSH
21982: LD_INT 21
21984: PUSH
21985: LD_INT 1
21987: PUSH
21988: EMPTY
21989: LIST
21990: LIST
21991: PUSH
21992: LD_INT 21
21994: PUSH
21995: LD_INT 2
21997: PUSH
21998: EMPTY
21999: LIST
22000: LIST
22001: PUSH
22002: EMPTY
22003: LIST
22004: LIST
22005: LIST
22006: PPUSH
22007: CALL_OW 69
22011: PUSH
22012: FOR_IN
22013: IFFALSE 22074
// if IsSelected ( i ) then
22015: LD_VAR 0 2
22019: PPUSH
22020: CALL_OW 306
22024: IFFALSE 22072
// begin if i in hInvincible then
22026: LD_VAR 0 2
22030: PUSH
22031: LD_EXP 80
22035: IN
22036: IFFALSE 22056
// hInvincible := hInvincible diff i else
22038: LD_ADDR_EXP 80
22042: PUSH
22043: LD_EXP 80
22047: PUSH
22048: LD_VAR 0 2
22052: DIFF
22053: ST_TO_ADDR
22054: GO 22072
// hInvincible := hInvincible union i ;
22056: LD_ADDR_EXP 80
22060: PUSH
22061: LD_EXP 80
22065: PUSH
22066: LD_VAR 0 2
22070: UNION
22071: ST_TO_ADDR
// end ;
22072: GO 22012
22074: POP
22075: POP
// end ;
22076: LD_VAR 0 1
22080: RET
// export function hHackInvisible ; var i , j ; begin
22081: LD_INT 0
22083: PPUSH
22084: PPUSH
22085: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
22086: LD_ADDR_VAR 0 2
22090: PUSH
22091: LD_INT 21
22093: PUSH
22094: LD_INT 1
22096: PUSH
22097: EMPTY
22098: LIST
22099: LIST
22100: PPUSH
22101: CALL_OW 69
22105: PUSH
22106: FOR_IN
22107: IFFALSE 22131
// if IsSelected ( i ) then
22109: LD_VAR 0 2
22113: PPUSH
22114: CALL_OW 306
22118: IFFALSE 22129
// ComForceInvisible ( i ) ;
22120: LD_VAR 0 2
22124: PPUSH
22125: CALL_OW 496
22129: GO 22106
22131: POP
22132: POP
// end ;
22133: LD_VAR 0 1
22137: RET
// export function hHackChangeYourSide ; begin
22138: LD_INT 0
22140: PPUSH
// if your_side = 8 then
22141: LD_OWVAR 2
22145: PUSH
22146: LD_INT 8
22148: EQUAL
22149: IFFALSE 22161
// your_side := 0 else
22151: LD_ADDR_OWVAR 2
22155: PUSH
22156: LD_INT 0
22158: ST_TO_ADDR
22159: GO 22175
// your_side := your_side + 1 ;
22161: LD_ADDR_OWVAR 2
22165: PUSH
22166: LD_OWVAR 2
22170: PUSH
22171: LD_INT 1
22173: PLUS
22174: ST_TO_ADDR
// end ;
22175: LD_VAR 0 1
22179: RET
// export function hHackChangeUnitSide ; var i , j ; begin
22180: LD_INT 0
22182: PPUSH
22183: PPUSH
22184: PPUSH
// for i in all_units do
22185: LD_ADDR_VAR 0 2
22189: PUSH
22190: LD_OWVAR 3
22194: PUSH
22195: FOR_IN
22196: IFFALSE 22274
// if IsSelected ( i ) then
22198: LD_VAR 0 2
22202: PPUSH
22203: CALL_OW 306
22207: IFFALSE 22272
// begin j := GetSide ( i ) ;
22209: LD_ADDR_VAR 0 3
22213: PUSH
22214: LD_VAR 0 2
22218: PPUSH
22219: CALL_OW 255
22223: ST_TO_ADDR
// if j = 8 then
22224: LD_VAR 0 3
22228: PUSH
22229: LD_INT 8
22231: EQUAL
22232: IFFALSE 22244
// j := 0 else
22234: LD_ADDR_VAR 0 3
22238: PUSH
22239: LD_INT 0
22241: ST_TO_ADDR
22242: GO 22258
// j := j + 1 ;
22244: LD_ADDR_VAR 0 3
22248: PUSH
22249: LD_VAR 0 3
22253: PUSH
22254: LD_INT 1
22256: PLUS
22257: ST_TO_ADDR
// SetSide ( i , j ) ;
22258: LD_VAR 0 2
22262: PPUSH
22263: LD_VAR 0 3
22267: PPUSH
22268: CALL_OW 235
// end ;
22272: GO 22195
22274: POP
22275: POP
// end ;
22276: LD_VAR 0 1
22280: RET
// export function hHackFog ; begin
22281: LD_INT 0
22283: PPUSH
// FogOff ( true ) ;
22284: LD_INT 1
22286: PPUSH
22287: CALL_OW 344
// end ;
22291: LD_VAR 0 1
22295: RET
// export function hHackTeleport ( unit , x , y ) ; begin
22296: LD_INT 0
22298: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
22299: LD_VAR 0 1
22303: PPUSH
22304: LD_VAR 0 2
22308: PPUSH
22309: LD_VAR 0 3
22313: PPUSH
22314: LD_INT 1
22316: PPUSH
22317: LD_INT 1
22319: PPUSH
22320: CALL_OW 483
// CenterOnXY ( x , y ) ;
22324: LD_VAR 0 2
22328: PPUSH
22329: LD_VAR 0 3
22333: PPUSH
22334: CALL_OW 84
// end ; end_of_file end_of_file
22338: LD_VAR 0 4
22342: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
22343: LD_INT 0
22345: PPUSH
// ar_miner := 81 ;
22346: LD_ADDR_EXP 88
22350: PUSH
22351: LD_INT 81
22353: ST_TO_ADDR
// ar_crane := 88 ;
22354: LD_ADDR_EXP 87
22358: PUSH
22359: LD_INT 88
22361: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
22362: LD_ADDR_EXP 82
22366: PUSH
22367: LD_INT 89
22369: ST_TO_ADDR
// us_hack := 99 ;
22370: LD_ADDR_EXP 83
22374: PUSH
22375: LD_INT 99
22377: ST_TO_ADDR
// us_artillery := 97 ;
22378: LD_ADDR_EXP 84
22382: PUSH
22383: LD_INT 97
22385: ST_TO_ADDR
// ar_bio_bomb := 91 ;
22386: LD_ADDR_EXP 85
22390: PUSH
22391: LD_INT 91
22393: ST_TO_ADDR
// ar_mortar := 92 ;
22394: LD_ADDR_EXP 86
22398: PUSH
22399: LD_INT 92
22401: ST_TO_ADDR
// ru_radar := 98 ;
22402: LD_ADDR_EXP 81
22406: PUSH
22407: LD_INT 98
22409: ST_TO_ADDR
// tech_Artillery := 80 ;
22410: LD_ADDR_EXP 89
22414: PUSH
22415: LD_INT 80
22417: ST_TO_ADDR
// tech_RadMat := 81 ;
22418: LD_ADDR_EXP 90
22422: PUSH
22423: LD_INT 81
22425: ST_TO_ADDR
// tech_BasicTools := 82 ;
22426: LD_ADDR_EXP 91
22430: PUSH
22431: LD_INT 82
22433: ST_TO_ADDR
// tech_Cargo := 83 ;
22434: LD_ADDR_EXP 92
22438: PUSH
22439: LD_INT 83
22441: ST_TO_ADDR
// tech_Track := 84 ;
22442: LD_ADDR_EXP 93
22446: PUSH
22447: LD_INT 84
22449: ST_TO_ADDR
// tech_Crane := 85 ;
22450: LD_ADDR_EXP 94
22454: PUSH
22455: LD_INT 85
22457: ST_TO_ADDR
// tech_Bulldozer := 86 ;
22458: LD_ADDR_EXP 95
22462: PUSH
22463: LD_INT 86
22465: ST_TO_ADDR
// tech_Hovercraft := 87 ;
22466: LD_ADDR_EXP 96
22470: PUSH
22471: LD_INT 87
22473: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
22474: LD_ADDR_EXP 97
22478: PUSH
22479: LD_INT 88
22481: ST_TO_ADDR
// class_mastodont := 31 ;
22482: LD_ADDR_EXP 98
22486: PUSH
22487: LD_INT 31
22489: ST_TO_ADDR
// class_horse := 21 ;
22490: LD_ADDR_EXP 99
22494: PUSH
22495: LD_INT 21
22497: ST_TO_ADDR
// end ;
22498: LD_VAR 0 1
22502: RET
// every 1 do
22503: GO 22505
22505: DISABLE
// InitGlobalVariables ; end_of_file
22506: CALL 22343 0 0
22510: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
22511: LD_INT 0
22513: PPUSH
22514: PPUSH
// if exist_mode then
22515: LD_VAR 0 2
22519: IFFALSE 22544
// unit := CreateCharacter ( prefix & ident ) else
22521: LD_ADDR_VAR 0 5
22525: PUSH
22526: LD_VAR 0 3
22530: PUSH
22531: LD_VAR 0 1
22535: STR
22536: PPUSH
22537: CALL_OW 34
22541: ST_TO_ADDR
22542: GO 22559
// unit := NewCharacter ( ident ) ;
22544: LD_ADDR_VAR 0 5
22548: PUSH
22549: LD_VAR 0 1
22553: PPUSH
22554: CALL_OW 25
22558: ST_TO_ADDR
// result := unit ;
22559: LD_ADDR_VAR 0 4
22563: PUSH
22564: LD_VAR 0 5
22568: ST_TO_ADDR
// end ;
22569: LD_VAR 0 4
22573: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
22574: LD_INT 0
22576: PPUSH
22577: PPUSH
// if not side or not nation then
22578: LD_VAR 0 1
22582: NOT
22583: PUSH
22584: LD_VAR 0 2
22588: NOT
22589: OR
22590: IFFALSE 22594
// exit ;
22592: GO 23362
// case nation of nation_american :
22594: LD_VAR 0 2
22598: PUSH
22599: LD_INT 1
22601: DOUBLE
22602: EQUAL
22603: IFTRUE 22607
22605: GO 22821
22607: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
22608: LD_ADDR_VAR 0 4
22612: PUSH
22613: LD_INT 35
22615: PUSH
22616: LD_INT 45
22618: PUSH
22619: LD_INT 46
22621: PUSH
22622: LD_INT 47
22624: PUSH
22625: LD_INT 82
22627: PUSH
22628: LD_INT 83
22630: PUSH
22631: LD_INT 84
22633: PUSH
22634: LD_INT 85
22636: PUSH
22637: LD_INT 86
22639: PUSH
22640: LD_INT 1
22642: PUSH
22643: LD_INT 2
22645: PUSH
22646: LD_INT 6
22648: PUSH
22649: LD_INT 15
22651: PUSH
22652: LD_INT 16
22654: PUSH
22655: LD_INT 7
22657: PUSH
22658: LD_INT 12
22660: PUSH
22661: LD_INT 13
22663: PUSH
22664: LD_INT 10
22666: PUSH
22667: LD_INT 14
22669: PUSH
22670: LD_INT 20
22672: PUSH
22673: LD_INT 21
22675: PUSH
22676: LD_INT 22
22678: PUSH
22679: LD_INT 25
22681: PUSH
22682: LD_INT 32
22684: PUSH
22685: LD_INT 27
22687: PUSH
22688: LD_INT 36
22690: PUSH
22691: LD_INT 69
22693: PUSH
22694: LD_INT 39
22696: PUSH
22697: LD_INT 34
22699: PUSH
22700: LD_INT 40
22702: PUSH
22703: LD_INT 48
22705: PUSH
22706: LD_INT 49
22708: PUSH
22709: LD_INT 50
22711: PUSH
22712: LD_INT 51
22714: PUSH
22715: LD_INT 52
22717: PUSH
22718: LD_INT 53
22720: PUSH
22721: LD_INT 54
22723: PUSH
22724: LD_INT 55
22726: PUSH
22727: LD_INT 56
22729: PUSH
22730: LD_INT 57
22732: PUSH
22733: LD_INT 58
22735: PUSH
22736: LD_INT 59
22738: PUSH
22739: LD_INT 60
22741: PUSH
22742: LD_INT 61
22744: PUSH
22745: LD_INT 62
22747: PUSH
22748: LD_INT 80
22750: PUSH
22751: LD_INT 82
22753: PUSH
22754: LD_INT 83
22756: PUSH
22757: LD_INT 84
22759: PUSH
22760: LD_INT 85
22762: PUSH
22763: LD_INT 86
22765: PUSH
22766: EMPTY
22767: LIST
22768: LIST
22769: LIST
22770: LIST
22771: LIST
22772: LIST
22773: LIST
22774: LIST
22775: LIST
22776: LIST
22777: LIST
22778: LIST
22779: LIST
22780: LIST
22781: LIST
22782: LIST
22783: LIST
22784: LIST
22785: LIST
22786: LIST
22787: LIST
22788: LIST
22789: LIST
22790: LIST
22791: LIST
22792: LIST
22793: LIST
22794: LIST
22795: LIST
22796: LIST
22797: LIST
22798: LIST
22799: LIST
22800: LIST
22801: LIST
22802: LIST
22803: LIST
22804: LIST
22805: LIST
22806: LIST
22807: LIST
22808: LIST
22809: LIST
22810: LIST
22811: LIST
22812: LIST
22813: LIST
22814: LIST
22815: LIST
22816: LIST
22817: LIST
22818: ST_TO_ADDR
22819: GO 23286
22821: LD_INT 2
22823: DOUBLE
22824: EQUAL
22825: IFTRUE 22829
22827: GO 23055
22829: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
22830: LD_ADDR_VAR 0 4
22834: PUSH
22835: LD_INT 35
22837: PUSH
22838: LD_INT 45
22840: PUSH
22841: LD_INT 46
22843: PUSH
22844: LD_INT 47
22846: PUSH
22847: LD_INT 82
22849: PUSH
22850: LD_INT 83
22852: PUSH
22853: LD_INT 84
22855: PUSH
22856: LD_INT 85
22858: PUSH
22859: LD_INT 87
22861: PUSH
22862: LD_INT 70
22864: PUSH
22865: LD_INT 1
22867: PUSH
22868: LD_INT 11
22870: PUSH
22871: LD_INT 3
22873: PUSH
22874: LD_INT 4
22876: PUSH
22877: LD_INT 5
22879: PUSH
22880: LD_INT 6
22882: PUSH
22883: LD_INT 15
22885: PUSH
22886: LD_INT 18
22888: PUSH
22889: LD_INT 7
22891: PUSH
22892: LD_INT 17
22894: PUSH
22895: LD_INT 8
22897: PUSH
22898: LD_INT 20
22900: PUSH
22901: LD_INT 21
22903: PUSH
22904: LD_INT 22
22906: PUSH
22907: LD_INT 72
22909: PUSH
22910: LD_INT 26
22912: PUSH
22913: LD_INT 69
22915: PUSH
22916: LD_INT 39
22918: PUSH
22919: LD_INT 40
22921: PUSH
22922: LD_INT 41
22924: PUSH
22925: LD_INT 42
22927: PUSH
22928: LD_INT 43
22930: PUSH
22931: LD_INT 48
22933: PUSH
22934: LD_INT 49
22936: PUSH
22937: LD_INT 50
22939: PUSH
22940: LD_INT 51
22942: PUSH
22943: LD_INT 52
22945: PUSH
22946: LD_INT 53
22948: PUSH
22949: LD_INT 54
22951: PUSH
22952: LD_INT 55
22954: PUSH
22955: LD_INT 56
22957: PUSH
22958: LD_INT 60
22960: PUSH
22961: LD_INT 61
22963: PUSH
22964: LD_INT 62
22966: PUSH
22967: LD_INT 66
22969: PUSH
22970: LD_INT 67
22972: PUSH
22973: LD_INT 68
22975: PUSH
22976: LD_INT 81
22978: PUSH
22979: LD_INT 82
22981: PUSH
22982: LD_INT 83
22984: PUSH
22985: LD_INT 84
22987: PUSH
22988: LD_INT 85
22990: PUSH
22991: LD_INT 87
22993: PUSH
22994: LD_INT 88
22996: PUSH
22997: EMPTY
22998: LIST
22999: LIST
23000: LIST
23001: LIST
23002: LIST
23003: LIST
23004: LIST
23005: LIST
23006: LIST
23007: LIST
23008: LIST
23009: LIST
23010: LIST
23011: LIST
23012: LIST
23013: LIST
23014: LIST
23015: LIST
23016: LIST
23017: LIST
23018: LIST
23019: LIST
23020: LIST
23021: LIST
23022: LIST
23023: LIST
23024: LIST
23025: LIST
23026: LIST
23027: LIST
23028: LIST
23029: LIST
23030: LIST
23031: LIST
23032: LIST
23033: LIST
23034: LIST
23035: LIST
23036: LIST
23037: LIST
23038: LIST
23039: LIST
23040: LIST
23041: LIST
23042: LIST
23043: LIST
23044: LIST
23045: LIST
23046: LIST
23047: LIST
23048: LIST
23049: LIST
23050: LIST
23051: LIST
23052: ST_TO_ADDR
23053: GO 23286
23055: LD_INT 3
23057: DOUBLE
23058: EQUAL
23059: IFTRUE 23063
23061: GO 23285
23063: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
23064: LD_ADDR_VAR 0 4
23068: PUSH
23069: LD_INT 46
23071: PUSH
23072: LD_INT 47
23074: PUSH
23075: LD_INT 1
23077: PUSH
23078: LD_INT 2
23080: PUSH
23081: LD_INT 82
23083: PUSH
23084: LD_INT 83
23086: PUSH
23087: LD_INT 84
23089: PUSH
23090: LD_INT 85
23092: PUSH
23093: LD_INT 86
23095: PUSH
23096: LD_INT 11
23098: PUSH
23099: LD_INT 9
23101: PUSH
23102: LD_INT 20
23104: PUSH
23105: LD_INT 19
23107: PUSH
23108: LD_INT 21
23110: PUSH
23111: LD_INT 24
23113: PUSH
23114: LD_INT 22
23116: PUSH
23117: LD_INT 25
23119: PUSH
23120: LD_INT 28
23122: PUSH
23123: LD_INT 29
23125: PUSH
23126: LD_INT 30
23128: PUSH
23129: LD_INT 31
23131: PUSH
23132: LD_INT 37
23134: PUSH
23135: LD_INT 38
23137: PUSH
23138: LD_INT 32
23140: PUSH
23141: LD_INT 27
23143: PUSH
23144: LD_INT 33
23146: PUSH
23147: LD_INT 69
23149: PUSH
23150: LD_INT 39
23152: PUSH
23153: LD_INT 34
23155: PUSH
23156: LD_INT 40
23158: PUSH
23159: LD_INT 71
23161: PUSH
23162: LD_INT 23
23164: PUSH
23165: LD_INT 44
23167: PUSH
23168: LD_INT 48
23170: PUSH
23171: LD_INT 49
23173: PUSH
23174: LD_INT 50
23176: PUSH
23177: LD_INT 51
23179: PUSH
23180: LD_INT 52
23182: PUSH
23183: LD_INT 53
23185: PUSH
23186: LD_INT 54
23188: PUSH
23189: LD_INT 55
23191: PUSH
23192: LD_INT 56
23194: PUSH
23195: LD_INT 57
23197: PUSH
23198: LD_INT 58
23200: PUSH
23201: LD_INT 59
23203: PUSH
23204: LD_INT 63
23206: PUSH
23207: LD_INT 64
23209: PUSH
23210: LD_INT 65
23212: PUSH
23213: LD_INT 82
23215: PUSH
23216: LD_INT 83
23218: PUSH
23219: LD_INT 84
23221: PUSH
23222: LD_INT 85
23224: PUSH
23225: LD_INT 86
23227: PUSH
23228: EMPTY
23229: LIST
23230: LIST
23231: LIST
23232: LIST
23233: LIST
23234: LIST
23235: LIST
23236: LIST
23237: LIST
23238: LIST
23239: LIST
23240: LIST
23241: LIST
23242: LIST
23243: LIST
23244: LIST
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: LIST
23259: LIST
23260: LIST
23261: LIST
23262: LIST
23263: LIST
23264: LIST
23265: LIST
23266: LIST
23267: LIST
23268: LIST
23269: LIST
23270: LIST
23271: LIST
23272: LIST
23273: LIST
23274: LIST
23275: LIST
23276: LIST
23277: LIST
23278: LIST
23279: LIST
23280: LIST
23281: LIST
23282: ST_TO_ADDR
23283: GO 23286
23285: POP
// if state > - 1 and state < 3 then
23286: LD_VAR 0 3
23290: PUSH
23291: LD_INT 1
23293: NEG
23294: GREATER
23295: PUSH
23296: LD_VAR 0 3
23300: PUSH
23301: LD_INT 3
23303: LESS
23304: AND
23305: IFFALSE 23362
// for i in result do
23307: LD_ADDR_VAR 0 5
23311: PUSH
23312: LD_VAR 0 4
23316: PUSH
23317: FOR_IN
23318: IFFALSE 23360
// if GetTech ( i , side ) <> state then
23320: LD_VAR 0 5
23324: PPUSH
23325: LD_VAR 0 1
23329: PPUSH
23330: CALL_OW 321
23334: PUSH
23335: LD_VAR 0 3
23339: NONEQUAL
23340: IFFALSE 23358
// result := result diff i ;
23342: LD_ADDR_VAR 0 4
23346: PUSH
23347: LD_VAR 0 4
23351: PUSH
23352: LD_VAR 0 5
23356: DIFF
23357: ST_TO_ADDR
23358: GO 23317
23360: POP
23361: POP
// end ;
23362: LD_VAR 0 4
23366: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
23367: LD_INT 0
23369: PPUSH
23370: PPUSH
23371: PPUSH
// result := true ;
23372: LD_ADDR_VAR 0 3
23376: PUSH
23377: LD_INT 1
23379: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
23380: LD_ADDR_VAR 0 5
23384: PUSH
23385: LD_VAR 0 2
23389: PPUSH
23390: CALL_OW 480
23394: ST_TO_ADDR
// if not tmp then
23395: LD_VAR 0 5
23399: NOT
23400: IFFALSE 23404
// exit ;
23402: GO 23453
// for i in tmp do
23404: LD_ADDR_VAR 0 4
23408: PUSH
23409: LD_VAR 0 5
23413: PUSH
23414: FOR_IN
23415: IFFALSE 23451
// if GetTech ( i , side ) <> state_researched then
23417: LD_VAR 0 4
23421: PPUSH
23422: LD_VAR 0 1
23426: PPUSH
23427: CALL_OW 321
23431: PUSH
23432: LD_INT 2
23434: NONEQUAL
23435: IFFALSE 23449
// begin result := false ;
23437: LD_ADDR_VAR 0 3
23441: PUSH
23442: LD_INT 0
23444: ST_TO_ADDR
// exit ;
23445: POP
23446: POP
23447: GO 23453
// end ;
23449: GO 23414
23451: POP
23452: POP
// end ;
23453: LD_VAR 0 3
23457: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
23458: LD_INT 0
23460: PPUSH
23461: PPUSH
23462: PPUSH
23463: PPUSH
23464: PPUSH
23465: PPUSH
23466: PPUSH
23467: PPUSH
23468: PPUSH
23469: PPUSH
23470: PPUSH
23471: PPUSH
23472: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
23473: LD_VAR 0 1
23477: NOT
23478: PUSH
23479: LD_VAR 0 1
23483: PPUSH
23484: CALL_OW 257
23488: PUSH
23489: LD_INT 9
23491: NONEQUAL
23492: OR
23493: IFFALSE 23497
// exit ;
23495: GO 24070
// side := GetSide ( unit ) ;
23497: LD_ADDR_VAR 0 9
23501: PUSH
23502: LD_VAR 0 1
23506: PPUSH
23507: CALL_OW 255
23511: ST_TO_ADDR
// tech_space := tech_spacanom ;
23512: LD_ADDR_VAR 0 12
23516: PUSH
23517: LD_INT 29
23519: ST_TO_ADDR
// tech_time := tech_taurad ;
23520: LD_ADDR_VAR 0 13
23524: PUSH
23525: LD_INT 28
23527: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
23528: LD_ADDR_VAR 0 11
23532: PUSH
23533: LD_VAR 0 1
23537: PPUSH
23538: CALL_OW 310
23542: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
23543: LD_VAR 0 11
23547: PPUSH
23548: CALL_OW 247
23552: PUSH
23553: LD_INT 2
23555: EQUAL
23556: IFFALSE 23560
// exit ;
23558: GO 24070
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
23560: LD_ADDR_VAR 0 8
23564: PUSH
23565: LD_INT 81
23567: PUSH
23568: LD_VAR 0 9
23572: PUSH
23573: EMPTY
23574: LIST
23575: LIST
23576: PUSH
23577: LD_INT 3
23579: PUSH
23580: LD_INT 21
23582: PUSH
23583: LD_INT 3
23585: PUSH
23586: EMPTY
23587: LIST
23588: LIST
23589: PUSH
23590: EMPTY
23591: LIST
23592: LIST
23593: PUSH
23594: EMPTY
23595: LIST
23596: LIST
23597: PPUSH
23598: CALL_OW 69
23602: ST_TO_ADDR
// if not tmp then
23603: LD_VAR 0 8
23607: NOT
23608: IFFALSE 23612
// exit ;
23610: GO 24070
// if in_unit then
23612: LD_VAR 0 11
23616: IFFALSE 23640
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
23618: LD_ADDR_VAR 0 10
23622: PUSH
23623: LD_VAR 0 8
23627: PPUSH
23628: LD_VAR 0 11
23632: PPUSH
23633: CALL_OW 74
23637: ST_TO_ADDR
23638: GO 23660
// enemy := NearestUnitToUnit ( tmp , unit ) ;
23640: LD_ADDR_VAR 0 10
23644: PUSH
23645: LD_VAR 0 8
23649: PPUSH
23650: LD_VAR 0 1
23654: PPUSH
23655: CALL_OW 74
23659: ST_TO_ADDR
// if not enemy then
23660: LD_VAR 0 10
23664: NOT
23665: IFFALSE 23669
// exit ;
23667: GO 24070
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
23669: LD_VAR 0 11
23673: PUSH
23674: LD_VAR 0 11
23678: PPUSH
23679: LD_VAR 0 10
23683: PPUSH
23684: CALL_OW 296
23688: PUSH
23689: LD_INT 13
23691: GREATER
23692: AND
23693: PUSH
23694: LD_VAR 0 1
23698: PPUSH
23699: LD_VAR 0 10
23703: PPUSH
23704: CALL_OW 296
23708: PUSH
23709: LD_INT 12
23711: GREATER
23712: OR
23713: IFFALSE 23717
// exit ;
23715: GO 24070
// missile := [ 1 ] ;
23717: LD_ADDR_VAR 0 14
23721: PUSH
23722: LD_INT 1
23724: PUSH
23725: EMPTY
23726: LIST
23727: ST_TO_ADDR
// if Researched ( side , tech_space ) then
23728: LD_VAR 0 9
23732: PPUSH
23733: LD_VAR 0 12
23737: PPUSH
23738: CALL_OW 325
23742: IFFALSE 23771
// missile := Insert ( missile , missile + 1 , 2 ) ;
23744: LD_ADDR_VAR 0 14
23748: PUSH
23749: LD_VAR 0 14
23753: PPUSH
23754: LD_VAR 0 14
23758: PUSH
23759: LD_INT 1
23761: PLUS
23762: PPUSH
23763: LD_INT 2
23765: PPUSH
23766: CALL_OW 2
23770: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
23771: LD_VAR 0 9
23775: PPUSH
23776: LD_VAR 0 13
23780: PPUSH
23781: CALL_OW 325
23785: PUSH
23786: LD_VAR 0 10
23790: PPUSH
23791: CALL_OW 255
23795: PPUSH
23796: LD_VAR 0 13
23800: PPUSH
23801: CALL_OW 325
23805: NOT
23806: AND
23807: IFFALSE 23836
// missile := Insert ( missile , missile + 1 , 3 ) ;
23809: LD_ADDR_VAR 0 14
23813: PUSH
23814: LD_VAR 0 14
23818: PPUSH
23819: LD_VAR 0 14
23823: PUSH
23824: LD_INT 1
23826: PLUS
23827: PPUSH
23828: LD_INT 3
23830: PPUSH
23831: CALL_OW 2
23835: ST_TO_ADDR
// if missile < 2 then
23836: LD_VAR 0 14
23840: PUSH
23841: LD_INT 2
23843: LESS
23844: IFFALSE 23848
// exit ;
23846: GO 24070
// x := GetX ( enemy ) ;
23848: LD_ADDR_VAR 0 4
23852: PUSH
23853: LD_VAR 0 10
23857: PPUSH
23858: CALL_OW 250
23862: ST_TO_ADDR
// y := GetY ( enemy ) ;
23863: LD_ADDR_VAR 0 5
23867: PUSH
23868: LD_VAR 0 10
23872: PPUSH
23873: CALL_OW 251
23877: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
23878: LD_ADDR_VAR 0 6
23882: PUSH
23883: LD_VAR 0 4
23887: PUSH
23888: LD_INT 1
23890: NEG
23891: PPUSH
23892: LD_INT 1
23894: PPUSH
23895: CALL_OW 12
23899: PLUS
23900: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
23901: LD_ADDR_VAR 0 7
23905: PUSH
23906: LD_VAR 0 5
23910: PUSH
23911: LD_INT 1
23913: NEG
23914: PPUSH
23915: LD_INT 1
23917: PPUSH
23918: CALL_OW 12
23922: PLUS
23923: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
23924: LD_VAR 0 6
23928: PPUSH
23929: LD_VAR 0 7
23933: PPUSH
23934: CALL_OW 488
23938: NOT
23939: IFFALSE 23961
// begin _x := x ;
23941: LD_ADDR_VAR 0 6
23945: PUSH
23946: LD_VAR 0 4
23950: ST_TO_ADDR
// _y := y ;
23951: LD_ADDR_VAR 0 7
23955: PUSH
23956: LD_VAR 0 5
23960: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
23961: LD_ADDR_VAR 0 3
23965: PUSH
23966: LD_INT 1
23968: PPUSH
23969: LD_VAR 0 14
23973: PPUSH
23974: CALL_OW 12
23978: ST_TO_ADDR
// case i of 1 :
23979: LD_VAR 0 3
23983: PUSH
23984: LD_INT 1
23986: DOUBLE
23987: EQUAL
23988: IFTRUE 23992
23990: GO 24009
23992: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
23993: LD_VAR 0 1
23997: PPUSH
23998: LD_VAR 0 10
24002: PPUSH
24003: CALL_OW 115
24007: GO 24070
24009: LD_INT 2
24011: DOUBLE
24012: EQUAL
24013: IFTRUE 24017
24015: GO 24039
24017: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
24018: LD_VAR 0 1
24022: PPUSH
24023: LD_VAR 0 6
24027: PPUSH
24028: LD_VAR 0 7
24032: PPUSH
24033: CALL_OW 153
24037: GO 24070
24039: LD_INT 3
24041: DOUBLE
24042: EQUAL
24043: IFTRUE 24047
24045: GO 24069
24047: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
24048: LD_VAR 0 1
24052: PPUSH
24053: LD_VAR 0 6
24057: PPUSH
24058: LD_VAR 0 7
24062: PPUSH
24063: CALL_OW 154
24067: GO 24070
24069: POP
// end ;
24070: LD_VAR 0 2
24074: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
24075: LD_INT 0
24077: PPUSH
24078: PPUSH
24079: PPUSH
24080: PPUSH
24081: PPUSH
24082: PPUSH
// if not unit or not building then
24083: LD_VAR 0 1
24087: NOT
24088: PUSH
24089: LD_VAR 0 2
24093: NOT
24094: OR
24095: IFFALSE 24099
// exit ;
24097: GO 24257
// x := GetX ( building ) ;
24099: LD_ADDR_VAR 0 5
24103: PUSH
24104: LD_VAR 0 2
24108: PPUSH
24109: CALL_OW 250
24113: ST_TO_ADDR
// y := GetY ( building ) ;
24114: LD_ADDR_VAR 0 6
24118: PUSH
24119: LD_VAR 0 2
24123: PPUSH
24124: CALL_OW 251
24128: ST_TO_ADDR
// for i = 0 to 5 do
24129: LD_ADDR_VAR 0 4
24133: PUSH
24134: DOUBLE
24135: LD_INT 0
24137: DEC
24138: ST_TO_ADDR
24139: LD_INT 5
24141: PUSH
24142: FOR_TO
24143: IFFALSE 24255
// begin _x := ShiftX ( x , i , 3 ) ;
24145: LD_ADDR_VAR 0 7
24149: PUSH
24150: LD_VAR 0 5
24154: PPUSH
24155: LD_VAR 0 4
24159: PPUSH
24160: LD_INT 3
24162: PPUSH
24163: CALL_OW 272
24167: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
24168: LD_ADDR_VAR 0 8
24172: PUSH
24173: LD_VAR 0 6
24177: PPUSH
24178: LD_VAR 0 4
24182: PPUSH
24183: LD_INT 3
24185: PPUSH
24186: CALL_OW 273
24190: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24191: LD_VAR 0 7
24195: PPUSH
24196: LD_VAR 0 8
24200: PPUSH
24201: CALL_OW 488
24205: NOT
24206: IFFALSE 24210
// continue ;
24208: GO 24142
// if HexInfo ( _x , _y ) = 0 then
24210: LD_VAR 0 7
24214: PPUSH
24215: LD_VAR 0 8
24219: PPUSH
24220: CALL_OW 428
24224: PUSH
24225: LD_INT 0
24227: EQUAL
24228: IFFALSE 24253
// begin ComMoveXY ( unit , _x , _y ) ;
24230: LD_VAR 0 1
24234: PPUSH
24235: LD_VAR 0 7
24239: PPUSH
24240: LD_VAR 0 8
24244: PPUSH
24245: CALL_OW 111
// exit ;
24249: POP
24250: POP
24251: GO 24257
// end ; end ;
24253: GO 24142
24255: POP
24256: POP
// end ;
24257: LD_VAR 0 3
24261: RET
// export function ScanBase ( side , base_area ) ; begin
24262: LD_INT 0
24264: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
24265: LD_ADDR_VAR 0 3
24269: PUSH
24270: LD_VAR 0 2
24274: PPUSH
24275: LD_INT 81
24277: PUSH
24278: LD_VAR 0 1
24282: PUSH
24283: EMPTY
24284: LIST
24285: LIST
24286: PPUSH
24287: CALL_OW 70
24291: ST_TO_ADDR
// end ;
24292: LD_VAR 0 3
24296: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
24297: LD_INT 0
24299: PPUSH
24300: PPUSH
24301: PPUSH
24302: PPUSH
// result := false ;
24303: LD_ADDR_VAR 0 2
24307: PUSH
24308: LD_INT 0
24310: ST_TO_ADDR
// side := GetSide ( unit ) ;
24311: LD_ADDR_VAR 0 3
24315: PUSH
24316: LD_VAR 0 1
24320: PPUSH
24321: CALL_OW 255
24325: ST_TO_ADDR
// nat := GetNation ( unit ) ;
24326: LD_ADDR_VAR 0 4
24330: PUSH
24331: LD_VAR 0 1
24335: PPUSH
24336: CALL_OW 248
24340: ST_TO_ADDR
// case nat of 1 :
24341: LD_VAR 0 4
24345: PUSH
24346: LD_INT 1
24348: DOUBLE
24349: EQUAL
24350: IFTRUE 24354
24352: GO 24365
24354: POP
// tech := tech_lassight ; 2 :
24355: LD_ADDR_VAR 0 5
24359: PUSH
24360: LD_INT 12
24362: ST_TO_ADDR
24363: GO 24404
24365: LD_INT 2
24367: DOUBLE
24368: EQUAL
24369: IFTRUE 24373
24371: GO 24384
24373: POP
// tech := tech_mortar ; 3 :
24374: LD_ADDR_VAR 0 5
24378: PUSH
24379: LD_INT 41
24381: ST_TO_ADDR
24382: GO 24404
24384: LD_INT 3
24386: DOUBLE
24387: EQUAL
24388: IFTRUE 24392
24390: GO 24403
24392: POP
// tech := tech_bazooka ; end ;
24393: LD_ADDR_VAR 0 5
24397: PUSH
24398: LD_INT 44
24400: ST_TO_ADDR
24401: GO 24404
24403: POP
// if Researched ( side , tech ) then
24404: LD_VAR 0 3
24408: PPUSH
24409: LD_VAR 0 5
24413: PPUSH
24414: CALL_OW 325
24418: IFFALSE 24445
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
24420: LD_ADDR_VAR 0 2
24424: PUSH
24425: LD_INT 5
24427: PUSH
24428: LD_INT 8
24430: PUSH
24431: LD_INT 9
24433: PUSH
24434: EMPTY
24435: LIST
24436: LIST
24437: LIST
24438: PUSH
24439: LD_VAR 0 4
24443: ARRAY
24444: ST_TO_ADDR
// end ;
24445: LD_VAR 0 2
24449: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
24450: LD_INT 0
24452: PPUSH
24453: PPUSH
24454: PPUSH
// if not mines then
24455: LD_VAR 0 2
24459: NOT
24460: IFFALSE 24464
// exit ;
24462: GO 24608
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24464: LD_ADDR_VAR 0 5
24468: PUSH
24469: LD_INT 81
24471: PUSH
24472: LD_VAR 0 1
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: PUSH
24481: LD_INT 3
24483: PUSH
24484: LD_INT 21
24486: PUSH
24487: LD_INT 3
24489: PUSH
24490: EMPTY
24491: LIST
24492: LIST
24493: PUSH
24494: EMPTY
24495: LIST
24496: LIST
24497: PUSH
24498: EMPTY
24499: LIST
24500: LIST
24501: PPUSH
24502: CALL_OW 69
24506: ST_TO_ADDR
// for i in mines do
24507: LD_ADDR_VAR 0 4
24511: PUSH
24512: LD_VAR 0 2
24516: PUSH
24517: FOR_IN
24518: IFFALSE 24606
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
24520: LD_VAR 0 4
24524: PUSH
24525: LD_INT 1
24527: ARRAY
24528: PPUSH
24529: LD_VAR 0 4
24533: PUSH
24534: LD_INT 2
24536: ARRAY
24537: PPUSH
24538: CALL_OW 458
24542: NOT
24543: IFFALSE 24547
// continue ;
24545: GO 24517
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
24547: LD_VAR 0 4
24551: PUSH
24552: LD_INT 1
24554: ARRAY
24555: PPUSH
24556: LD_VAR 0 4
24560: PUSH
24561: LD_INT 2
24563: ARRAY
24564: PPUSH
24565: CALL_OW 428
24569: PUSH
24570: LD_VAR 0 5
24574: IN
24575: IFFALSE 24604
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
24577: LD_VAR 0 4
24581: PUSH
24582: LD_INT 1
24584: ARRAY
24585: PPUSH
24586: LD_VAR 0 4
24590: PUSH
24591: LD_INT 2
24593: ARRAY
24594: PPUSH
24595: LD_VAR 0 1
24599: PPUSH
24600: CALL_OW 456
// end ;
24604: GO 24517
24606: POP
24607: POP
// end ;
24608: LD_VAR 0 3
24612: RET
// export function Count ( array ) ; var i ; begin
24613: LD_INT 0
24615: PPUSH
24616: PPUSH
// result := 0 ;
24617: LD_ADDR_VAR 0 2
24621: PUSH
24622: LD_INT 0
24624: ST_TO_ADDR
// for i in array do
24625: LD_ADDR_VAR 0 3
24629: PUSH
24630: LD_VAR 0 1
24634: PUSH
24635: FOR_IN
24636: IFFALSE 24660
// if i then
24638: LD_VAR 0 3
24642: IFFALSE 24658
// result := result + 1 ;
24644: LD_ADDR_VAR 0 2
24648: PUSH
24649: LD_VAR 0 2
24653: PUSH
24654: LD_INT 1
24656: PLUS
24657: ST_TO_ADDR
24658: GO 24635
24660: POP
24661: POP
// end ;
24662: LD_VAR 0 2
24666: RET
// export function IsEmpty ( building ) ; begin
24667: LD_INT 0
24669: PPUSH
// if not building then
24670: LD_VAR 0 1
24674: NOT
24675: IFFALSE 24679
// exit ;
24677: GO 24722
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
24679: LD_ADDR_VAR 0 2
24683: PUSH
24684: LD_VAR 0 1
24688: PUSH
24689: LD_INT 22
24691: PUSH
24692: LD_VAR 0 1
24696: PPUSH
24697: CALL_OW 255
24701: PUSH
24702: EMPTY
24703: LIST
24704: LIST
24705: PUSH
24706: LD_INT 58
24708: PUSH
24709: EMPTY
24710: LIST
24711: PUSH
24712: EMPTY
24713: LIST
24714: LIST
24715: PPUSH
24716: CALL_OW 69
24720: IN
24721: ST_TO_ADDR
// end ;
24722: LD_VAR 0 2
24726: RET
// export function IsNotFull ( building ) ; begin
24727: LD_INT 0
24729: PPUSH
// if not building then
24730: LD_VAR 0 1
24734: NOT
24735: IFFALSE 24739
// exit ;
24737: GO 24758
// result := UnitsInside ( building ) < 6 ;
24739: LD_ADDR_VAR 0 2
24743: PUSH
24744: LD_VAR 0 1
24748: PPUSH
24749: CALL_OW 313
24753: PUSH
24754: LD_INT 6
24756: LESS
24757: ST_TO_ADDR
// end ;
24758: LD_VAR 0 2
24762: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
24763: LD_INT 0
24765: PPUSH
24766: PPUSH
24767: PPUSH
24768: PPUSH
// tmp := [ ] ;
24769: LD_ADDR_VAR 0 3
24773: PUSH
24774: EMPTY
24775: ST_TO_ADDR
// list := [ ] ;
24776: LD_ADDR_VAR 0 5
24780: PUSH
24781: EMPTY
24782: ST_TO_ADDR
// for i = 16 to 25 do
24783: LD_ADDR_VAR 0 4
24787: PUSH
24788: DOUBLE
24789: LD_INT 16
24791: DEC
24792: ST_TO_ADDR
24793: LD_INT 25
24795: PUSH
24796: FOR_TO
24797: IFFALSE 24870
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
24799: LD_ADDR_VAR 0 3
24803: PUSH
24804: LD_VAR 0 3
24808: PUSH
24809: LD_INT 22
24811: PUSH
24812: LD_VAR 0 1
24816: PPUSH
24817: CALL_OW 255
24821: PUSH
24822: EMPTY
24823: LIST
24824: LIST
24825: PUSH
24826: LD_INT 91
24828: PUSH
24829: LD_VAR 0 1
24833: PUSH
24834: LD_INT 6
24836: PUSH
24837: EMPTY
24838: LIST
24839: LIST
24840: LIST
24841: PUSH
24842: LD_INT 30
24844: PUSH
24845: LD_VAR 0 4
24849: PUSH
24850: EMPTY
24851: LIST
24852: LIST
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: LIST
24858: PUSH
24859: EMPTY
24860: LIST
24861: PPUSH
24862: CALL_OW 69
24866: ADD
24867: ST_TO_ADDR
24868: GO 24796
24870: POP
24871: POP
// for i = 1 to tmp do
24872: LD_ADDR_VAR 0 4
24876: PUSH
24877: DOUBLE
24878: LD_INT 1
24880: DEC
24881: ST_TO_ADDR
24882: LD_VAR 0 3
24886: PUSH
24887: FOR_TO
24888: IFFALSE 24976
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
24890: LD_ADDR_VAR 0 5
24894: PUSH
24895: LD_VAR 0 5
24899: PUSH
24900: LD_VAR 0 3
24904: PUSH
24905: LD_VAR 0 4
24909: ARRAY
24910: PPUSH
24911: CALL_OW 266
24915: PUSH
24916: LD_VAR 0 3
24920: PUSH
24921: LD_VAR 0 4
24925: ARRAY
24926: PPUSH
24927: CALL_OW 250
24931: PUSH
24932: LD_VAR 0 3
24936: PUSH
24937: LD_VAR 0 4
24941: ARRAY
24942: PPUSH
24943: CALL_OW 251
24947: PUSH
24948: LD_VAR 0 3
24952: PUSH
24953: LD_VAR 0 4
24957: ARRAY
24958: PPUSH
24959: CALL_OW 254
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: PUSH
24970: EMPTY
24971: LIST
24972: ADD
24973: ST_TO_ADDR
24974: GO 24887
24976: POP
24977: POP
// result := list ;
24978: LD_ADDR_VAR 0 2
24982: PUSH
24983: LD_VAR 0 5
24987: ST_TO_ADDR
// end ;
24988: LD_VAR 0 2
24992: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
24993: LD_INT 0
24995: PPUSH
24996: PPUSH
24997: PPUSH
24998: PPUSH
24999: PPUSH
25000: PPUSH
25001: PPUSH
// if not factory then
25002: LD_VAR 0 1
25006: NOT
25007: IFFALSE 25011
// exit ;
25009: GO 25604
// if control = control_apeman then
25011: LD_VAR 0 4
25015: PUSH
25016: LD_INT 5
25018: EQUAL
25019: IFFALSE 25128
// begin tmp := UnitsInside ( factory ) ;
25021: LD_ADDR_VAR 0 8
25025: PUSH
25026: LD_VAR 0 1
25030: PPUSH
25031: CALL_OW 313
25035: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
25036: LD_VAR 0 8
25040: PPUSH
25041: LD_INT 25
25043: PUSH
25044: LD_INT 12
25046: PUSH
25047: EMPTY
25048: LIST
25049: LIST
25050: PPUSH
25051: CALL_OW 72
25055: NOT
25056: IFFALSE 25066
// control := control_manual ;
25058: LD_ADDR_VAR 0 4
25062: PUSH
25063: LD_INT 1
25065: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
25066: LD_ADDR_VAR 0 8
25070: PUSH
25071: LD_VAR 0 1
25075: PPUSH
25076: CALL 24763 0 1
25080: ST_TO_ADDR
// if tmp then
25081: LD_VAR 0 8
25085: IFFALSE 25128
// begin for i in tmp do
25087: LD_ADDR_VAR 0 7
25091: PUSH
25092: LD_VAR 0 8
25096: PUSH
25097: FOR_IN
25098: IFFALSE 25126
// if i [ 1 ] = b_ext_radio then
25100: LD_VAR 0 7
25104: PUSH
25105: LD_INT 1
25107: ARRAY
25108: PUSH
25109: LD_INT 22
25111: EQUAL
25112: IFFALSE 25124
// begin control := control_remote ;
25114: LD_ADDR_VAR 0 4
25118: PUSH
25119: LD_INT 2
25121: ST_TO_ADDR
// break ;
25122: GO 25126
// end ;
25124: GO 25097
25126: POP
25127: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25128: LD_VAR 0 1
25132: PPUSH
25133: LD_VAR 0 2
25137: PPUSH
25138: LD_VAR 0 3
25142: PPUSH
25143: LD_VAR 0 4
25147: PPUSH
25148: LD_VAR 0 5
25152: PPUSH
25153: CALL_OW 448
25157: IFFALSE 25192
// begin result := [ chassis , engine , control , weapon ] ;
25159: LD_ADDR_VAR 0 6
25163: PUSH
25164: LD_VAR 0 2
25168: PUSH
25169: LD_VAR 0 3
25173: PUSH
25174: LD_VAR 0 4
25178: PUSH
25179: LD_VAR 0 5
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: LIST
25188: LIST
25189: ST_TO_ADDR
// exit ;
25190: GO 25604
// end ; _chassis := AvailableChassisList ( factory ) ;
25192: LD_ADDR_VAR 0 9
25196: PUSH
25197: LD_VAR 0 1
25201: PPUSH
25202: CALL_OW 475
25206: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
25207: LD_ADDR_VAR 0 11
25211: PUSH
25212: LD_VAR 0 1
25216: PPUSH
25217: CALL_OW 476
25221: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
25222: LD_ADDR_VAR 0 12
25226: PUSH
25227: LD_VAR 0 1
25231: PPUSH
25232: CALL_OW 477
25236: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
25237: LD_ADDR_VAR 0 10
25241: PUSH
25242: LD_VAR 0 1
25246: PPUSH
25247: CALL_OW 478
25251: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
25252: LD_VAR 0 9
25256: NOT
25257: PUSH
25258: LD_VAR 0 11
25262: NOT
25263: OR
25264: PUSH
25265: LD_VAR 0 12
25269: NOT
25270: OR
25271: PUSH
25272: LD_VAR 0 10
25276: NOT
25277: OR
25278: IFFALSE 25313
// begin result := [ chassis , engine , control , weapon ] ;
25280: LD_ADDR_VAR 0 6
25284: PUSH
25285: LD_VAR 0 2
25289: PUSH
25290: LD_VAR 0 3
25294: PUSH
25295: LD_VAR 0 4
25299: PUSH
25300: LD_VAR 0 5
25304: PUSH
25305: EMPTY
25306: LIST
25307: LIST
25308: LIST
25309: LIST
25310: ST_TO_ADDR
// exit ;
25311: GO 25604
// end ; if not chassis in _chassis then
25313: LD_VAR 0 2
25317: PUSH
25318: LD_VAR 0 9
25322: IN
25323: NOT
25324: IFFALSE 25350
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
25326: LD_ADDR_VAR 0 2
25330: PUSH
25331: LD_VAR 0 9
25335: PUSH
25336: LD_INT 1
25338: PPUSH
25339: LD_VAR 0 9
25343: PPUSH
25344: CALL_OW 12
25348: ARRAY
25349: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
25350: LD_VAR 0 2
25354: PPUSH
25355: LD_VAR 0 3
25359: PPUSH
25360: CALL 25609 0 2
25364: NOT
25365: IFFALSE 25424
// repeat engine := _engine [ 1 ] ;
25367: LD_ADDR_VAR 0 3
25371: PUSH
25372: LD_VAR 0 11
25376: PUSH
25377: LD_INT 1
25379: ARRAY
25380: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
25381: LD_ADDR_VAR 0 11
25385: PUSH
25386: LD_VAR 0 11
25390: PPUSH
25391: LD_INT 1
25393: PPUSH
25394: CALL_OW 3
25398: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
25399: LD_VAR 0 2
25403: PPUSH
25404: LD_VAR 0 3
25408: PPUSH
25409: CALL 25609 0 2
25413: PUSH
25414: LD_VAR 0 11
25418: PUSH
25419: EMPTY
25420: EQUAL
25421: OR
25422: IFFALSE 25367
// if not control in _control then
25424: LD_VAR 0 4
25428: PUSH
25429: LD_VAR 0 12
25433: IN
25434: NOT
25435: IFFALSE 25461
// control := _control [ rand ( 1 , _control ) ] ;
25437: LD_ADDR_VAR 0 4
25441: PUSH
25442: LD_VAR 0 12
25446: PUSH
25447: LD_INT 1
25449: PPUSH
25450: LD_VAR 0 12
25454: PPUSH
25455: CALL_OW 12
25459: ARRAY
25460: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
25461: LD_VAR 0 2
25465: PPUSH
25466: LD_VAR 0 5
25470: PPUSH
25471: CALL 25829 0 2
25475: NOT
25476: IFFALSE 25535
// repeat weapon := _weapon [ 1 ] ;
25478: LD_ADDR_VAR 0 5
25482: PUSH
25483: LD_VAR 0 10
25487: PUSH
25488: LD_INT 1
25490: ARRAY
25491: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
25492: LD_ADDR_VAR 0 10
25496: PUSH
25497: LD_VAR 0 10
25501: PPUSH
25502: LD_INT 1
25504: PPUSH
25505: CALL_OW 3
25509: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
25510: LD_VAR 0 2
25514: PPUSH
25515: LD_VAR 0 5
25519: PPUSH
25520: CALL 25829 0 2
25524: PUSH
25525: LD_VAR 0 10
25529: PUSH
25530: EMPTY
25531: EQUAL
25532: OR
25533: IFFALSE 25478
// result := [ ] ;
25535: LD_ADDR_VAR 0 6
25539: PUSH
25540: EMPTY
25541: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
25542: LD_VAR 0 1
25546: PPUSH
25547: LD_VAR 0 2
25551: PPUSH
25552: LD_VAR 0 3
25556: PPUSH
25557: LD_VAR 0 4
25561: PPUSH
25562: LD_VAR 0 5
25566: PPUSH
25567: CALL_OW 448
25571: IFFALSE 25604
// result := [ chassis , engine , control , weapon ] ;
25573: LD_ADDR_VAR 0 6
25577: PUSH
25578: LD_VAR 0 2
25582: PUSH
25583: LD_VAR 0 3
25587: PUSH
25588: LD_VAR 0 4
25592: PUSH
25593: LD_VAR 0 5
25597: PUSH
25598: EMPTY
25599: LIST
25600: LIST
25601: LIST
25602: LIST
25603: ST_TO_ADDR
// end ;
25604: LD_VAR 0 6
25608: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
25609: LD_INT 0
25611: PPUSH
// if not chassis or not engine then
25612: LD_VAR 0 1
25616: NOT
25617: PUSH
25618: LD_VAR 0 2
25622: NOT
25623: OR
25624: IFFALSE 25628
// exit ;
25626: GO 25824
// case engine of engine_solar :
25628: LD_VAR 0 2
25632: PUSH
25633: LD_INT 2
25635: DOUBLE
25636: EQUAL
25637: IFTRUE 25641
25639: GO 25679
25641: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
25642: LD_ADDR_VAR 0 3
25646: PUSH
25647: LD_INT 11
25649: PUSH
25650: LD_INT 12
25652: PUSH
25653: LD_INT 13
25655: PUSH
25656: LD_INT 14
25658: PUSH
25659: LD_INT 1
25661: PUSH
25662: LD_INT 2
25664: PUSH
25665: LD_INT 3
25667: PUSH
25668: EMPTY
25669: LIST
25670: LIST
25671: LIST
25672: LIST
25673: LIST
25674: LIST
25675: LIST
25676: ST_TO_ADDR
25677: GO 25808
25679: LD_INT 1
25681: DOUBLE
25682: EQUAL
25683: IFTRUE 25687
25685: GO 25749
25687: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
25688: LD_ADDR_VAR 0 3
25692: PUSH
25693: LD_INT 11
25695: PUSH
25696: LD_INT 12
25698: PUSH
25699: LD_INT 13
25701: PUSH
25702: LD_INT 14
25704: PUSH
25705: LD_INT 1
25707: PUSH
25708: LD_INT 2
25710: PUSH
25711: LD_INT 3
25713: PUSH
25714: LD_INT 4
25716: PUSH
25717: LD_INT 5
25719: PUSH
25720: LD_INT 21
25722: PUSH
25723: LD_INT 23
25725: PUSH
25726: LD_INT 22
25728: PUSH
25729: LD_INT 24
25731: PUSH
25732: EMPTY
25733: LIST
25734: LIST
25735: LIST
25736: LIST
25737: LIST
25738: LIST
25739: LIST
25740: LIST
25741: LIST
25742: LIST
25743: LIST
25744: LIST
25745: LIST
25746: ST_TO_ADDR
25747: GO 25808
25749: LD_INT 3
25751: DOUBLE
25752: EQUAL
25753: IFTRUE 25757
25755: GO 25807
25757: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25758: LD_ADDR_VAR 0 3
25762: PUSH
25763: LD_INT 13
25765: PUSH
25766: LD_INT 14
25768: PUSH
25769: LD_INT 2
25771: PUSH
25772: LD_INT 3
25774: PUSH
25775: LD_INT 4
25777: PUSH
25778: LD_INT 5
25780: PUSH
25781: LD_INT 21
25783: PUSH
25784: LD_INT 22
25786: PUSH
25787: LD_INT 23
25789: PUSH
25790: LD_INT 24
25792: PUSH
25793: EMPTY
25794: LIST
25795: LIST
25796: LIST
25797: LIST
25798: LIST
25799: LIST
25800: LIST
25801: LIST
25802: LIST
25803: LIST
25804: ST_TO_ADDR
25805: GO 25808
25807: POP
// result := ( chassis in result ) ;
25808: LD_ADDR_VAR 0 3
25812: PUSH
25813: LD_VAR 0 1
25817: PUSH
25818: LD_VAR 0 3
25822: IN
25823: ST_TO_ADDR
// end ;
25824: LD_VAR 0 3
25828: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
25829: LD_INT 0
25831: PPUSH
// if not chassis or not weapon then
25832: LD_VAR 0 1
25836: NOT
25837: PUSH
25838: LD_VAR 0 2
25842: NOT
25843: OR
25844: IFFALSE 25848
// exit ;
25846: GO 26910
// case weapon of us_machine_gun :
25848: LD_VAR 0 2
25852: PUSH
25853: LD_INT 2
25855: DOUBLE
25856: EQUAL
25857: IFTRUE 25861
25859: GO 25891
25861: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
25862: LD_ADDR_VAR 0 3
25866: PUSH
25867: LD_INT 1
25869: PUSH
25870: LD_INT 2
25872: PUSH
25873: LD_INT 3
25875: PUSH
25876: LD_INT 4
25878: PUSH
25879: LD_INT 5
25881: PUSH
25882: EMPTY
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: ST_TO_ADDR
25889: GO 26894
25891: LD_INT 3
25893: DOUBLE
25894: EQUAL
25895: IFTRUE 25899
25897: GO 25929
25899: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
25900: LD_ADDR_VAR 0 3
25904: PUSH
25905: LD_INT 1
25907: PUSH
25908: LD_INT 2
25910: PUSH
25911: LD_INT 3
25913: PUSH
25914: LD_INT 4
25916: PUSH
25917: LD_INT 5
25919: PUSH
25920: EMPTY
25921: LIST
25922: LIST
25923: LIST
25924: LIST
25925: LIST
25926: ST_TO_ADDR
25927: GO 26894
25929: LD_INT 11
25931: DOUBLE
25932: EQUAL
25933: IFTRUE 25937
25935: GO 25967
25937: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
25938: LD_ADDR_VAR 0 3
25942: PUSH
25943: LD_INT 1
25945: PUSH
25946: LD_INT 2
25948: PUSH
25949: LD_INT 3
25951: PUSH
25952: LD_INT 4
25954: PUSH
25955: LD_INT 5
25957: PUSH
25958: EMPTY
25959: LIST
25960: LIST
25961: LIST
25962: LIST
25963: LIST
25964: ST_TO_ADDR
25965: GO 26894
25967: LD_INT 4
25969: DOUBLE
25970: EQUAL
25971: IFTRUE 25975
25973: GO 26001
25975: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
25976: LD_ADDR_VAR 0 3
25980: PUSH
25981: LD_INT 2
25983: PUSH
25984: LD_INT 3
25986: PUSH
25987: LD_INT 4
25989: PUSH
25990: LD_INT 5
25992: PUSH
25993: EMPTY
25994: LIST
25995: LIST
25996: LIST
25997: LIST
25998: ST_TO_ADDR
25999: GO 26894
26001: LD_INT 5
26003: DOUBLE
26004: EQUAL
26005: IFTRUE 26009
26007: GO 26035
26009: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
26010: LD_ADDR_VAR 0 3
26014: PUSH
26015: LD_INT 2
26017: PUSH
26018: LD_INT 3
26020: PUSH
26021: LD_INT 4
26023: PUSH
26024: LD_INT 5
26026: PUSH
26027: EMPTY
26028: LIST
26029: LIST
26030: LIST
26031: LIST
26032: ST_TO_ADDR
26033: GO 26894
26035: LD_INT 9
26037: DOUBLE
26038: EQUAL
26039: IFTRUE 26043
26041: GO 26069
26043: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
26044: LD_ADDR_VAR 0 3
26048: PUSH
26049: LD_INT 2
26051: PUSH
26052: LD_INT 3
26054: PUSH
26055: LD_INT 4
26057: PUSH
26058: LD_INT 5
26060: PUSH
26061: EMPTY
26062: LIST
26063: LIST
26064: LIST
26065: LIST
26066: ST_TO_ADDR
26067: GO 26894
26069: LD_INT 7
26071: DOUBLE
26072: EQUAL
26073: IFTRUE 26077
26075: GO 26103
26077: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
26078: LD_ADDR_VAR 0 3
26082: PUSH
26083: LD_INT 2
26085: PUSH
26086: LD_INT 3
26088: PUSH
26089: LD_INT 4
26091: PUSH
26092: LD_INT 5
26094: PUSH
26095: EMPTY
26096: LIST
26097: LIST
26098: LIST
26099: LIST
26100: ST_TO_ADDR
26101: GO 26894
26103: LD_INT 12
26105: DOUBLE
26106: EQUAL
26107: IFTRUE 26111
26109: GO 26137
26111: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
26112: LD_ADDR_VAR 0 3
26116: PUSH
26117: LD_INT 2
26119: PUSH
26120: LD_INT 3
26122: PUSH
26123: LD_INT 4
26125: PUSH
26126: LD_INT 5
26128: PUSH
26129: EMPTY
26130: LIST
26131: LIST
26132: LIST
26133: LIST
26134: ST_TO_ADDR
26135: GO 26894
26137: LD_INT 13
26139: DOUBLE
26140: EQUAL
26141: IFTRUE 26145
26143: GO 26171
26145: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
26146: LD_ADDR_VAR 0 3
26150: PUSH
26151: LD_INT 2
26153: PUSH
26154: LD_INT 3
26156: PUSH
26157: LD_INT 4
26159: PUSH
26160: LD_INT 5
26162: PUSH
26163: EMPTY
26164: LIST
26165: LIST
26166: LIST
26167: LIST
26168: ST_TO_ADDR
26169: GO 26894
26171: LD_INT 14
26173: DOUBLE
26174: EQUAL
26175: IFTRUE 26179
26177: GO 26197
26179: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
26180: LD_ADDR_VAR 0 3
26184: PUSH
26185: LD_INT 4
26187: PUSH
26188: LD_INT 5
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: ST_TO_ADDR
26195: GO 26894
26197: LD_INT 6
26199: DOUBLE
26200: EQUAL
26201: IFTRUE 26205
26203: GO 26223
26205: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
26206: LD_ADDR_VAR 0 3
26210: PUSH
26211: LD_INT 4
26213: PUSH
26214: LD_INT 5
26216: PUSH
26217: EMPTY
26218: LIST
26219: LIST
26220: ST_TO_ADDR
26221: GO 26894
26223: LD_INT 10
26225: DOUBLE
26226: EQUAL
26227: IFTRUE 26231
26229: GO 26249
26231: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
26232: LD_ADDR_VAR 0 3
26236: PUSH
26237: LD_INT 4
26239: PUSH
26240: LD_INT 5
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: ST_TO_ADDR
26247: GO 26894
26249: LD_INT 22
26251: DOUBLE
26252: EQUAL
26253: IFTRUE 26257
26255: GO 26283
26257: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
26258: LD_ADDR_VAR 0 3
26262: PUSH
26263: LD_INT 11
26265: PUSH
26266: LD_INT 12
26268: PUSH
26269: LD_INT 13
26271: PUSH
26272: LD_INT 14
26274: PUSH
26275: EMPTY
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: ST_TO_ADDR
26281: GO 26894
26283: LD_INT 23
26285: DOUBLE
26286: EQUAL
26287: IFTRUE 26291
26289: GO 26317
26291: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
26292: LD_ADDR_VAR 0 3
26296: PUSH
26297: LD_INT 11
26299: PUSH
26300: LD_INT 12
26302: PUSH
26303: LD_INT 13
26305: PUSH
26306: LD_INT 14
26308: PUSH
26309: EMPTY
26310: LIST
26311: LIST
26312: LIST
26313: LIST
26314: ST_TO_ADDR
26315: GO 26894
26317: LD_INT 24
26319: DOUBLE
26320: EQUAL
26321: IFTRUE 26325
26323: GO 26351
26325: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
26326: LD_ADDR_VAR 0 3
26330: PUSH
26331: LD_INT 11
26333: PUSH
26334: LD_INT 12
26336: PUSH
26337: LD_INT 13
26339: PUSH
26340: LD_INT 14
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: LIST
26347: LIST
26348: ST_TO_ADDR
26349: GO 26894
26351: LD_INT 30
26353: DOUBLE
26354: EQUAL
26355: IFTRUE 26359
26357: GO 26385
26359: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
26360: LD_ADDR_VAR 0 3
26364: PUSH
26365: LD_INT 11
26367: PUSH
26368: LD_INT 12
26370: PUSH
26371: LD_INT 13
26373: PUSH
26374: LD_INT 14
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: LIST
26381: LIST
26382: ST_TO_ADDR
26383: GO 26894
26385: LD_INT 25
26387: DOUBLE
26388: EQUAL
26389: IFTRUE 26393
26391: GO 26411
26393: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
26394: LD_ADDR_VAR 0 3
26398: PUSH
26399: LD_INT 13
26401: PUSH
26402: LD_INT 14
26404: PUSH
26405: EMPTY
26406: LIST
26407: LIST
26408: ST_TO_ADDR
26409: GO 26894
26411: LD_INT 27
26413: DOUBLE
26414: EQUAL
26415: IFTRUE 26419
26417: GO 26437
26419: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
26420: LD_ADDR_VAR 0 3
26424: PUSH
26425: LD_INT 13
26427: PUSH
26428: LD_INT 14
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: ST_TO_ADDR
26435: GO 26894
26437: LD_EXP 86
26441: DOUBLE
26442: EQUAL
26443: IFTRUE 26447
26445: GO 26473
26447: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
26448: LD_ADDR_VAR 0 3
26452: PUSH
26453: LD_INT 11
26455: PUSH
26456: LD_INT 12
26458: PUSH
26459: LD_INT 13
26461: PUSH
26462: LD_INT 14
26464: PUSH
26465: EMPTY
26466: LIST
26467: LIST
26468: LIST
26469: LIST
26470: ST_TO_ADDR
26471: GO 26894
26473: LD_INT 28
26475: DOUBLE
26476: EQUAL
26477: IFTRUE 26481
26479: GO 26499
26481: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
26482: LD_ADDR_VAR 0 3
26486: PUSH
26487: LD_INT 13
26489: PUSH
26490: LD_INT 14
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: ST_TO_ADDR
26497: GO 26894
26499: LD_INT 29
26501: DOUBLE
26502: EQUAL
26503: IFTRUE 26507
26505: GO 26525
26507: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
26508: LD_ADDR_VAR 0 3
26512: PUSH
26513: LD_INT 13
26515: PUSH
26516: LD_INT 14
26518: PUSH
26519: EMPTY
26520: LIST
26521: LIST
26522: ST_TO_ADDR
26523: GO 26894
26525: LD_INT 31
26527: DOUBLE
26528: EQUAL
26529: IFTRUE 26533
26531: GO 26551
26533: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
26534: LD_ADDR_VAR 0 3
26538: PUSH
26539: LD_INT 13
26541: PUSH
26542: LD_INT 14
26544: PUSH
26545: EMPTY
26546: LIST
26547: LIST
26548: ST_TO_ADDR
26549: GO 26894
26551: LD_INT 26
26553: DOUBLE
26554: EQUAL
26555: IFTRUE 26559
26557: GO 26577
26559: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
26560: LD_ADDR_VAR 0 3
26564: PUSH
26565: LD_INT 13
26567: PUSH
26568: LD_INT 14
26570: PUSH
26571: EMPTY
26572: LIST
26573: LIST
26574: ST_TO_ADDR
26575: GO 26894
26577: LD_INT 42
26579: DOUBLE
26580: EQUAL
26581: IFTRUE 26585
26583: GO 26611
26585: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
26586: LD_ADDR_VAR 0 3
26590: PUSH
26591: LD_INT 21
26593: PUSH
26594: LD_INT 22
26596: PUSH
26597: LD_INT 23
26599: PUSH
26600: LD_INT 24
26602: PUSH
26603: EMPTY
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: ST_TO_ADDR
26609: GO 26894
26611: LD_INT 43
26613: DOUBLE
26614: EQUAL
26615: IFTRUE 26619
26617: GO 26645
26619: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
26620: LD_ADDR_VAR 0 3
26624: PUSH
26625: LD_INT 21
26627: PUSH
26628: LD_INT 22
26630: PUSH
26631: LD_INT 23
26633: PUSH
26634: LD_INT 24
26636: PUSH
26637: EMPTY
26638: LIST
26639: LIST
26640: LIST
26641: LIST
26642: ST_TO_ADDR
26643: GO 26894
26645: LD_INT 44
26647: DOUBLE
26648: EQUAL
26649: IFTRUE 26653
26651: GO 26679
26653: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
26654: LD_ADDR_VAR 0 3
26658: PUSH
26659: LD_INT 21
26661: PUSH
26662: LD_INT 22
26664: PUSH
26665: LD_INT 23
26667: PUSH
26668: LD_INT 24
26670: PUSH
26671: EMPTY
26672: LIST
26673: LIST
26674: LIST
26675: LIST
26676: ST_TO_ADDR
26677: GO 26894
26679: LD_INT 45
26681: DOUBLE
26682: EQUAL
26683: IFTRUE 26687
26685: GO 26713
26687: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
26688: LD_ADDR_VAR 0 3
26692: PUSH
26693: LD_INT 21
26695: PUSH
26696: LD_INT 22
26698: PUSH
26699: LD_INT 23
26701: PUSH
26702: LD_INT 24
26704: PUSH
26705: EMPTY
26706: LIST
26707: LIST
26708: LIST
26709: LIST
26710: ST_TO_ADDR
26711: GO 26894
26713: LD_INT 49
26715: DOUBLE
26716: EQUAL
26717: IFTRUE 26721
26719: GO 26747
26721: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
26722: LD_ADDR_VAR 0 3
26726: PUSH
26727: LD_INT 21
26729: PUSH
26730: LD_INT 22
26732: PUSH
26733: LD_INT 23
26735: PUSH
26736: LD_INT 24
26738: PUSH
26739: EMPTY
26740: LIST
26741: LIST
26742: LIST
26743: LIST
26744: ST_TO_ADDR
26745: GO 26894
26747: LD_INT 51
26749: DOUBLE
26750: EQUAL
26751: IFTRUE 26755
26753: GO 26781
26755: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
26756: LD_ADDR_VAR 0 3
26760: PUSH
26761: LD_INT 21
26763: PUSH
26764: LD_INT 22
26766: PUSH
26767: LD_INT 23
26769: PUSH
26770: LD_INT 24
26772: PUSH
26773: EMPTY
26774: LIST
26775: LIST
26776: LIST
26777: LIST
26778: ST_TO_ADDR
26779: GO 26894
26781: LD_INT 52
26783: DOUBLE
26784: EQUAL
26785: IFTRUE 26789
26787: GO 26815
26789: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
26790: LD_ADDR_VAR 0 3
26794: PUSH
26795: LD_INT 21
26797: PUSH
26798: LD_INT 22
26800: PUSH
26801: LD_INT 23
26803: PUSH
26804: LD_INT 24
26806: PUSH
26807: EMPTY
26808: LIST
26809: LIST
26810: LIST
26811: LIST
26812: ST_TO_ADDR
26813: GO 26894
26815: LD_INT 53
26817: DOUBLE
26818: EQUAL
26819: IFTRUE 26823
26821: GO 26841
26823: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
26824: LD_ADDR_VAR 0 3
26828: PUSH
26829: LD_INT 23
26831: PUSH
26832: LD_INT 24
26834: PUSH
26835: EMPTY
26836: LIST
26837: LIST
26838: ST_TO_ADDR
26839: GO 26894
26841: LD_INT 46
26843: DOUBLE
26844: EQUAL
26845: IFTRUE 26849
26847: GO 26867
26849: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
26850: LD_ADDR_VAR 0 3
26854: PUSH
26855: LD_INT 23
26857: PUSH
26858: LD_INT 24
26860: PUSH
26861: EMPTY
26862: LIST
26863: LIST
26864: ST_TO_ADDR
26865: GO 26894
26867: LD_INT 47
26869: DOUBLE
26870: EQUAL
26871: IFTRUE 26875
26873: GO 26893
26875: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26876: LD_ADDR_VAR 0 3
26880: PUSH
26881: LD_INT 23
26883: PUSH
26884: LD_INT 24
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: ST_TO_ADDR
26891: GO 26894
26893: POP
// result := ( chassis in result ) ;
26894: LD_ADDR_VAR 0 3
26898: PUSH
26899: LD_VAR 0 1
26903: PUSH
26904: LD_VAR 0 3
26908: IN
26909: ST_TO_ADDR
// end ;
26910: LD_VAR 0 3
26914: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
26915: LD_INT 0
26917: PPUSH
26918: PPUSH
26919: PPUSH
26920: PPUSH
26921: PPUSH
26922: PPUSH
26923: PPUSH
// result := array ;
26924: LD_ADDR_VAR 0 5
26928: PUSH
26929: LD_VAR 0 1
26933: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
26934: LD_VAR 0 1
26938: NOT
26939: PUSH
26940: LD_VAR 0 2
26944: NOT
26945: OR
26946: PUSH
26947: LD_VAR 0 3
26951: NOT
26952: OR
26953: PUSH
26954: LD_VAR 0 2
26958: PUSH
26959: LD_VAR 0 1
26963: GREATER
26964: OR
26965: PUSH
26966: LD_VAR 0 3
26970: PUSH
26971: LD_VAR 0 1
26975: GREATER
26976: OR
26977: IFFALSE 26981
// exit ;
26979: GO 27277
// if direction then
26981: LD_VAR 0 4
26985: IFFALSE 27049
// begin d := 1 ;
26987: LD_ADDR_VAR 0 9
26991: PUSH
26992: LD_INT 1
26994: ST_TO_ADDR
// if i_from > i_to then
26995: LD_VAR 0 2
26999: PUSH
27000: LD_VAR 0 3
27004: GREATER
27005: IFFALSE 27031
// length := ( array - i_from ) + i_to else
27007: LD_ADDR_VAR 0 11
27011: PUSH
27012: LD_VAR 0 1
27016: PUSH
27017: LD_VAR 0 2
27021: MINUS
27022: PUSH
27023: LD_VAR 0 3
27027: PLUS
27028: ST_TO_ADDR
27029: GO 27047
// length := i_to - i_from ;
27031: LD_ADDR_VAR 0 11
27035: PUSH
27036: LD_VAR 0 3
27040: PUSH
27041: LD_VAR 0 2
27045: MINUS
27046: ST_TO_ADDR
// end else
27047: GO 27110
// begin d := - 1 ;
27049: LD_ADDR_VAR 0 9
27053: PUSH
27054: LD_INT 1
27056: NEG
27057: ST_TO_ADDR
// if i_from > i_to then
27058: LD_VAR 0 2
27062: PUSH
27063: LD_VAR 0 3
27067: GREATER
27068: IFFALSE 27088
// length := i_from - i_to else
27070: LD_ADDR_VAR 0 11
27074: PUSH
27075: LD_VAR 0 2
27079: PUSH
27080: LD_VAR 0 3
27084: MINUS
27085: ST_TO_ADDR
27086: GO 27110
// length := ( array - i_to ) + i_from ;
27088: LD_ADDR_VAR 0 11
27092: PUSH
27093: LD_VAR 0 1
27097: PUSH
27098: LD_VAR 0 3
27102: MINUS
27103: PUSH
27104: LD_VAR 0 2
27108: PLUS
27109: ST_TO_ADDR
// end ; if not length then
27110: LD_VAR 0 11
27114: NOT
27115: IFFALSE 27119
// exit ;
27117: GO 27277
// tmp := array ;
27119: LD_ADDR_VAR 0 10
27123: PUSH
27124: LD_VAR 0 1
27128: ST_TO_ADDR
// for i = 1 to length do
27129: LD_ADDR_VAR 0 6
27133: PUSH
27134: DOUBLE
27135: LD_INT 1
27137: DEC
27138: ST_TO_ADDR
27139: LD_VAR 0 11
27143: PUSH
27144: FOR_TO
27145: IFFALSE 27265
// begin for j = 1 to array do
27147: LD_ADDR_VAR 0 7
27151: PUSH
27152: DOUBLE
27153: LD_INT 1
27155: DEC
27156: ST_TO_ADDR
27157: LD_VAR 0 1
27161: PUSH
27162: FOR_TO
27163: IFFALSE 27251
// begin k := j + d ;
27165: LD_ADDR_VAR 0 8
27169: PUSH
27170: LD_VAR 0 7
27174: PUSH
27175: LD_VAR 0 9
27179: PLUS
27180: ST_TO_ADDR
// if k > array then
27181: LD_VAR 0 8
27185: PUSH
27186: LD_VAR 0 1
27190: GREATER
27191: IFFALSE 27201
// k := 1 ;
27193: LD_ADDR_VAR 0 8
27197: PUSH
27198: LD_INT 1
27200: ST_TO_ADDR
// if not k then
27201: LD_VAR 0 8
27205: NOT
27206: IFFALSE 27218
// k := array ;
27208: LD_ADDR_VAR 0 8
27212: PUSH
27213: LD_VAR 0 1
27217: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
27218: LD_ADDR_VAR 0 10
27222: PUSH
27223: LD_VAR 0 10
27227: PPUSH
27228: LD_VAR 0 8
27232: PPUSH
27233: LD_VAR 0 1
27237: PUSH
27238: LD_VAR 0 7
27242: ARRAY
27243: PPUSH
27244: CALL_OW 1
27248: ST_TO_ADDR
// end ;
27249: GO 27162
27251: POP
27252: POP
// array := tmp ;
27253: LD_ADDR_VAR 0 1
27257: PUSH
27258: LD_VAR 0 10
27262: ST_TO_ADDR
// end ;
27263: GO 27144
27265: POP
27266: POP
// result := array ;
27267: LD_ADDR_VAR 0 5
27271: PUSH
27272: LD_VAR 0 1
27276: ST_TO_ADDR
// end ;
27277: LD_VAR 0 5
27281: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
27282: LD_INT 0
27284: PPUSH
27285: PPUSH
// result := 0 ;
27286: LD_ADDR_VAR 0 3
27290: PUSH
27291: LD_INT 0
27293: ST_TO_ADDR
// if not array or not value in array then
27294: LD_VAR 0 1
27298: NOT
27299: PUSH
27300: LD_VAR 0 2
27304: PUSH
27305: LD_VAR 0 1
27309: IN
27310: NOT
27311: OR
27312: IFFALSE 27316
// exit ;
27314: GO 27370
// for i = 1 to array do
27316: LD_ADDR_VAR 0 4
27320: PUSH
27321: DOUBLE
27322: LD_INT 1
27324: DEC
27325: ST_TO_ADDR
27326: LD_VAR 0 1
27330: PUSH
27331: FOR_TO
27332: IFFALSE 27368
// if value = array [ i ] then
27334: LD_VAR 0 2
27338: PUSH
27339: LD_VAR 0 1
27343: PUSH
27344: LD_VAR 0 4
27348: ARRAY
27349: EQUAL
27350: IFFALSE 27366
// begin result := i ;
27352: LD_ADDR_VAR 0 3
27356: PUSH
27357: LD_VAR 0 4
27361: ST_TO_ADDR
// exit ;
27362: POP
27363: POP
27364: GO 27370
// end ;
27366: GO 27331
27368: POP
27369: POP
// end ;
27370: LD_VAR 0 3
27374: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
27375: LD_INT 0
27377: PPUSH
// vc_chassis := chassis ;
27378: LD_ADDR_OWVAR 37
27382: PUSH
27383: LD_VAR 0 1
27387: ST_TO_ADDR
// vc_engine := engine ;
27388: LD_ADDR_OWVAR 39
27392: PUSH
27393: LD_VAR 0 2
27397: ST_TO_ADDR
// vc_control := control ;
27398: LD_ADDR_OWVAR 38
27402: PUSH
27403: LD_VAR 0 3
27407: ST_TO_ADDR
// vc_weapon := weapon ;
27408: LD_ADDR_OWVAR 40
27412: PUSH
27413: LD_VAR 0 4
27417: ST_TO_ADDR
// vc_fuel_battery := fuel ;
27418: LD_ADDR_OWVAR 41
27422: PUSH
27423: LD_VAR 0 5
27427: ST_TO_ADDR
// end ;
27428: LD_VAR 0 6
27432: RET
// export function WantPlant ( unit ) ; var task ; begin
27433: LD_INT 0
27435: PPUSH
27436: PPUSH
// result := false ;
27437: LD_ADDR_VAR 0 2
27441: PUSH
27442: LD_INT 0
27444: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
27445: LD_ADDR_VAR 0 3
27449: PUSH
27450: LD_VAR 0 1
27454: PPUSH
27455: CALL_OW 437
27459: ST_TO_ADDR
// if task then
27460: LD_VAR 0 3
27464: IFFALSE 27492
// if task [ 1 ] [ 1 ] = p then
27466: LD_VAR 0 3
27470: PUSH
27471: LD_INT 1
27473: ARRAY
27474: PUSH
27475: LD_INT 1
27477: ARRAY
27478: PUSH
27479: LD_STRING p
27481: EQUAL
27482: IFFALSE 27492
// result := true ;
27484: LD_ADDR_VAR 0 2
27488: PUSH
27489: LD_INT 1
27491: ST_TO_ADDR
// end ;
27492: LD_VAR 0 2
27496: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
27497: LD_INT 0
27499: PPUSH
27500: PPUSH
27501: PPUSH
27502: PPUSH
// if pos < 1 then
27503: LD_VAR 0 2
27507: PUSH
27508: LD_INT 1
27510: LESS
27511: IFFALSE 27515
// exit ;
27513: GO 27818
// if pos = 1 then
27515: LD_VAR 0 2
27519: PUSH
27520: LD_INT 1
27522: EQUAL
27523: IFFALSE 27556
// result := Replace ( arr , pos [ 1 ] , value ) else
27525: LD_ADDR_VAR 0 4
27529: PUSH
27530: LD_VAR 0 1
27534: PPUSH
27535: LD_VAR 0 2
27539: PUSH
27540: LD_INT 1
27542: ARRAY
27543: PPUSH
27544: LD_VAR 0 3
27548: PPUSH
27549: CALL_OW 1
27553: ST_TO_ADDR
27554: GO 27818
// begin tmp := arr ;
27556: LD_ADDR_VAR 0 6
27560: PUSH
27561: LD_VAR 0 1
27565: ST_TO_ADDR
// s_arr := [ tmp ] ;
27566: LD_ADDR_VAR 0 7
27570: PUSH
27571: LD_VAR 0 6
27575: PUSH
27576: EMPTY
27577: LIST
27578: ST_TO_ADDR
// for i = 1 to pos - 1 do
27579: LD_ADDR_VAR 0 5
27583: PUSH
27584: DOUBLE
27585: LD_INT 1
27587: DEC
27588: ST_TO_ADDR
27589: LD_VAR 0 2
27593: PUSH
27594: LD_INT 1
27596: MINUS
27597: PUSH
27598: FOR_TO
27599: IFFALSE 27644
// begin tmp := tmp [ pos [ i ] ] ;
27601: LD_ADDR_VAR 0 6
27605: PUSH
27606: LD_VAR 0 6
27610: PUSH
27611: LD_VAR 0 2
27615: PUSH
27616: LD_VAR 0 5
27620: ARRAY
27621: ARRAY
27622: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
27623: LD_ADDR_VAR 0 7
27627: PUSH
27628: LD_VAR 0 7
27632: PUSH
27633: LD_VAR 0 6
27637: PUSH
27638: EMPTY
27639: LIST
27640: ADD
27641: ST_TO_ADDR
// end ;
27642: GO 27598
27644: POP
27645: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
27646: LD_ADDR_VAR 0 6
27650: PUSH
27651: LD_VAR 0 6
27655: PPUSH
27656: LD_VAR 0 2
27660: PUSH
27661: LD_VAR 0 2
27665: ARRAY
27666: PPUSH
27667: LD_VAR 0 3
27671: PPUSH
27672: CALL_OW 1
27676: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
27677: LD_ADDR_VAR 0 7
27681: PUSH
27682: LD_VAR 0 7
27686: PPUSH
27687: LD_VAR 0 7
27691: PPUSH
27692: LD_VAR 0 6
27696: PPUSH
27697: CALL_OW 1
27701: ST_TO_ADDR
// for i = s_arr downto 2 do
27702: LD_ADDR_VAR 0 5
27706: PUSH
27707: DOUBLE
27708: LD_VAR 0 7
27712: INC
27713: ST_TO_ADDR
27714: LD_INT 2
27716: PUSH
27717: FOR_DOWNTO
27718: IFFALSE 27802
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
27720: LD_ADDR_VAR 0 6
27724: PUSH
27725: LD_VAR 0 7
27729: PUSH
27730: LD_VAR 0 5
27734: PUSH
27735: LD_INT 1
27737: MINUS
27738: ARRAY
27739: PPUSH
27740: LD_VAR 0 2
27744: PUSH
27745: LD_VAR 0 5
27749: PUSH
27750: LD_INT 1
27752: MINUS
27753: ARRAY
27754: PPUSH
27755: LD_VAR 0 7
27759: PUSH
27760: LD_VAR 0 5
27764: ARRAY
27765: PPUSH
27766: CALL_OW 1
27770: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
27771: LD_ADDR_VAR 0 7
27775: PUSH
27776: LD_VAR 0 7
27780: PPUSH
27781: LD_VAR 0 5
27785: PUSH
27786: LD_INT 1
27788: MINUS
27789: PPUSH
27790: LD_VAR 0 6
27794: PPUSH
27795: CALL_OW 1
27799: ST_TO_ADDR
// end ;
27800: GO 27717
27802: POP
27803: POP
// result := s_arr [ 1 ] ;
27804: LD_ADDR_VAR 0 4
27808: PUSH
27809: LD_VAR 0 7
27813: PUSH
27814: LD_INT 1
27816: ARRAY
27817: ST_TO_ADDR
// end ; end ;
27818: LD_VAR 0 4
27822: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
27823: LD_INT 0
27825: PPUSH
27826: PPUSH
// if not list then
27827: LD_VAR 0 1
27831: NOT
27832: IFFALSE 27836
// exit ;
27834: GO 27927
// i := list [ pos1 ] ;
27836: LD_ADDR_VAR 0 5
27840: PUSH
27841: LD_VAR 0 1
27845: PUSH
27846: LD_VAR 0 2
27850: ARRAY
27851: ST_TO_ADDR
// if not i then
27852: LD_VAR 0 5
27856: NOT
27857: IFFALSE 27861
// exit ;
27859: GO 27927
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
27861: LD_ADDR_VAR 0 1
27865: PUSH
27866: LD_VAR 0 1
27870: PPUSH
27871: LD_VAR 0 2
27875: PPUSH
27876: LD_VAR 0 1
27880: PUSH
27881: LD_VAR 0 3
27885: ARRAY
27886: PPUSH
27887: CALL_OW 1
27891: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
27892: LD_ADDR_VAR 0 1
27896: PUSH
27897: LD_VAR 0 1
27901: PPUSH
27902: LD_VAR 0 3
27906: PPUSH
27907: LD_VAR 0 5
27911: PPUSH
27912: CALL_OW 1
27916: ST_TO_ADDR
// result := list ;
27917: LD_ADDR_VAR 0 4
27921: PUSH
27922: LD_VAR 0 1
27926: ST_TO_ADDR
// end ;
27927: LD_VAR 0 4
27931: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
27932: LD_INT 0
27934: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
27935: LD_ADDR_VAR 0 5
27939: PUSH
27940: LD_VAR 0 1
27944: PPUSH
27945: CALL_OW 250
27949: PPUSH
27950: LD_VAR 0 1
27954: PPUSH
27955: CALL_OW 251
27959: PPUSH
27960: LD_VAR 0 2
27964: PPUSH
27965: LD_VAR 0 3
27969: PPUSH
27970: LD_VAR 0 4
27974: PPUSH
27975: CALL 27985 0 5
27979: ST_TO_ADDR
// end ;
27980: LD_VAR 0 5
27984: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
27985: LD_INT 0
27987: PPUSH
27988: PPUSH
27989: PPUSH
27990: PPUSH
// if not list then
27991: LD_VAR 0 3
27995: NOT
27996: IFFALSE 28000
// exit ;
27998: GO 28388
// result := [ ] ;
28000: LD_ADDR_VAR 0 6
28004: PUSH
28005: EMPTY
28006: ST_TO_ADDR
// for i in list do
28007: LD_ADDR_VAR 0 7
28011: PUSH
28012: LD_VAR 0 3
28016: PUSH
28017: FOR_IN
28018: IFFALSE 28220
// begin tmp := GetDistUnitXY ( i , x , y ) ;
28020: LD_ADDR_VAR 0 9
28024: PUSH
28025: LD_VAR 0 7
28029: PPUSH
28030: LD_VAR 0 1
28034: PPUSH
28035: LD_VAR 0 2
28039: PPUSH
28040: CALL_OW 297
28044: ST_TO_ADDR
// if not result then
28045: LD_VAR 0 6
28049: NOT
28050: IFFALSE 28076
// result := [ [ i , tmp ] ] else
28052: LD_ADDR_VAR 0 6
28056: PUSH
28057: LD_VAR 0 7
28061: PUSH
28062: LD_VAR 0 9
28066: PUSH
28067: EMPTY
28068: LIST
28069: LIST
28070: PUSH
28071: EMPTY
28072: LIST
28073: ST_TO_ADDR
28074: GO 28218
// begin if result [ result ] [ 2 ] < tmp then
28076: LD_VAR 0 6
28080: PUSH
28081: LD_VAR 0 6
28085: ARRAY
28086: PUSH
28087: LD_INT 2
28089: ARRAY
28090: PUSH
28091: LD_VAR 0 9
28095: LESS
28096: IFFALSE 28138
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
28098: LD_ADDR_VAR 0 6
28102: PUSH
28103: LD_VAR 0 6
28107: PPUSH
28108: LD_VAR 0 6
28112: PUSH
28113: LD_INT 1
28115: PLUS
28116: PPUSH
28117: LD_VAR 0 7
28121: PUSH
28122: LD_VAR 0 9
28126: PUSH
28127: EMPTY
28128: LIST
28129: LIST
28130: PPUSH
28131: CALL_OW 2
28135: ST_TO_ADDR
28136: GO 28218
// for j = 1 to result do
28138: LD_ADDR_VAR 0 8
28142: PUSH
28143: DOUBLE
28144: LD_INT 1
28146: DEC
28147: ST_TO_ADDR
28148: LD_VAR 0 6
28152: PUSH
28153: FOR_TO
28154: IFFALSE 28216
// begin if tmp < result [ j ] [ 2 ] then
28156: LD_VAR 0 9
28160: PUSH
28161: LD_VAR 0 6
28165: PUSH
28166: LD_VAR 0 8
28170: ARRAY
28171: PUSH
28172: LD_INT 2
28174: ARRAY
28175: LESS
28176: IFFALSE 28214
// begin result := Insert ( result , j , [ i , tmp ] ) ;
28178: LD_ADDR_VAR 0 6
28182: PUSH
28183: LD_VAR 0 6
28187: PPUSH
28188: LD_VAR 0 8
28192: PPUSH
28193: LD_VAR 0 7
28197: PUSH
28198: LD_VAR 0 9
28202: PUSH
28203: EMPTY
28204: LIST
28205: LIST
28206: PPUSH
28207: CALL_OW 2
28211: ST_TO_ADDR
// break ;
28212: GO 28216
// end ; end ;
28214: GO 28153
28216: POP
28217: POP
// end ; end ;
28218: GO 28017
28220: POP
28221: POP
// if result and not asc then
28222: LD_VAR 0 6
28226: PUSH
28227: LD_VAR 0 4
28231: NOT
28232: AND
28233: IFFALSE 28308
// begin tmp := result ;
28235: LD_ADDR_VAR 0 9
28239: PUSH
28240: LD_VAR 0 6
28244: ST_TO_ADDR
// for i = tmp downto 1 do
28245: LD_ADDR_VAR 0 7
28249: PUSH
28250: DOUBLE
28251: LD_VAR 0 9
28255: INC
28256: ST_TO_ADDR
28257: LD_INT 1
28259: PUSH
28260: FOR_DOWNTO
28261: IFFALSE 28306
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
28263: LD_ADDR_VAR 0 6
28267: PUSH
28268: LD_VAR 0 6
28272: PPUSH
28273: LD_VAR 0 9
28277: PUSH
28278: LD_VAR 0 7
28282: MINUS
28283: PUSH
28284: LD_INT 1
28286: PLUS
28287: PPUSH
28288: LD_VAR 0 9
28292: PUSH
28293: LD_VAR 0 7
28297: ARRAY
28298: PPUSH
28299: CALL_OW 1
28303: ST_TO_ADDR
28304: GO 28260
28306: POP
28307: POP
// end ; tmp := [ ] ;
28308: LD_ADDR_VAR 0 9
28312: PUSH
28313: EMPTY
28314: ST_TO_ADDR
// if mode then
28315: LD_VAR 0 5
28319: IFFALSE 28388
// begin for i = 1 to result do
28321: LD_ADDR_VAR 0 7
28325: PUSH
28326: DOUBLE
28327: LD_INT 1
28329: DEC
28330: ST_TO_ADDR
28331: LD_VAR 0 6
28335: PUSH
28336: FOR_TO
28337: IFFALSE 28376
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
28339: LD_ADDR_VAR 0 9
28343: PUSH
28344: LD_VAR 0 9
28348: PPUSH
28349: LD_VAR 0 7
28353: PPUSH
28354: LD_VAR 0 6
28358: PUSH
28359: LD_VAR 0 7
28363: ARRAY
28364: PUSH
28365: LD_INT 1
28367: ARRAY
28368: PPUSH
28369: CALL_OW 1
28373: ST_TO_ADDR
28374: GO 28336
28376: POP
28377: POP
// result := tmp ;
28378: LD_ADDR_VAR 0 6
28382: PUSH
28383: LD_VAR 0 9
28387: ST_TO_ADDR
// end ; end ;
28388: LD_VAR 0 6
28392: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
28393: LD_INT 0
28395: PPUSH
28396: PPUSH
28397: PPUSH
28398: PPUSH
28399: PPUSH
28400: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
28401: LD_ADDR_VAR 0 5
28405: PUSH
28406: LD_INT 0
28408: PUSH
28409: LD_INT 0
28411: PUSH
28412: LD_INT 0
28414: PUSH
28415: EMPTY
28416: PUSH
28417: EMPTY
28418: LIST
28419: LIST
28420: LIST
28421: LIST
28422: ST_TO_ADDR
// if not x or not y then
28423: LD_VAR 0 2
28427: NOT
28428: PUSH
28429: LD_VAR 0 3
28433: NOT
28434: OR
28435: IFFALSE 28439
// exit ;
28437: GO 30091
// if not range then
28439: LD_VAR 0 4
28443: NOT
28444: IFFALSE 28454
// range := 10 ;
28446: LD_ADDR_VAR 0 4
28450: PUSH
28451: LD_INT 10
28453: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
28454: LD_ADDR_VAR 0 8
28458: PUSH
28459: LD_INT 81
28461: PUSH
28462: LD_VAR 0 1
28466: PUSH
28467: EMPTY
28468: LIST
28469: LIST
28470: PUSH
28471: LD_INT 92
28473: PUSH
28474: LD_VAR 0 2
28478: PUSH
28479: LD_VAR 0 3
28483: PUSH
28484: LD_VAR 0 4
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: LIST
28493: LIST
28494: PUSH
28495: LD_INT 3
28497: PUSH
28498: LD_INT 21
28500: PUSH
28501: LD_INT 3
28503: PUSH
28504: EMPTY
28505: LIST
28506: LIST
28507: PUSH
28508: EMPTY
28509: LIST
28510: LIST
28511: PUSH
28512: EMPTY
28513: LIST
28514: LIST
28515: LIST
28516: PPUSH
28517: CALL_OW 69
28521: ST_TO_ADDR
// if not tmp then
28522: LD_VAR 0 8
28526: NOT
28527: IFFALSE 28531
// exit ;
28529: GO 30091
// for i in tmp do
28531: LD_ADDR_VAR 0 6
28535: PUSH
28536: LD_VAR 0 8
28540: PUSH
28541: FOR_IN
28542: IFFALSE 30066
// begin points := [ 0 , 0 , 0 ] ;
28544: LD_ADDR_VAR 0 9
28548: PUSH
28549: LD_INT 0
28551: PUSH
28552: LD_INT 0
28554: PUSH
28555: LD_INT 0
28557: PUSH
28558: EMPTY
28559: LIST
28560: LIST
28561: LIST
28562: ST_TO_ADDR
// bpoints := 1 ;
28563: LD_ADDR_VAR 0 10
28567: PUSH
28568: LD_INT 1
28570: ST_TO_ADDR
// case GetType ( i ) of unit_human :
28571: LD_VAR 0 6
28575: PPUSH
28576: CALL_OW 247
28580: PUSH
28581: LD_INT 1
28583: DOUBLE
28584: EQUAL
28585: IFTRUE 28589
28587: GO 29167
28589: POP
// begin if GetClass ( i ) = 1 then
28590: LD_VAR 0 6
28594: PPUSH
28595: CALL_OW 257
28599: PUSH
28600: LD_INT 1
28602: EQUAL
28603: IFFALSE 28624
// points := [ 10 , 5 , 3 ] ;
28605: LD_ADDR_VAR 0 9
28609: PUSH
28610: LD_INT 10
28612: PUSH
28613: LD_INT 5
28615: PUSH
28616: LD_INT 3
28618: PUSH
28619: EMPTY
28620: LIST
28621: LIST
28622: LIST
28623: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
28624: LD_VAR 0 6
28628: PPUSH
28629: CALL_OW 257
28633: PUSH
28634: LD_INT 2
28636: PUSH
28637: LD_INT 3
28639: PUSH
28640: LD_INT 4
28642: PUSH
28643: EMPTY
28644: LIST
28645: LIST
28646: LIST
28647: IN
28648: IFFALSE 28669
// points := [ 3 , 2 , 1 ] ;
28650: LD_ADDR_VAR 0 9
28654: PUSH
28655: LD_INT 3
28657: PUSH
28658: LD_INT 2
28660: PUSH
28661: LD_INT 1
28663: PUSH
28664: EMPTY
28665: LIST
28666: LIST
28667: LIST
28668: ST_TO_ADDR
// if GetClass ( i ) = 5 then
28669: LD_VAR 0 6
28673: PPUSH
28674: CALL_OW 257
28678: PUSH
28679: LD_INT 5
28681: EQUAL
28682: IFFALSE 28703
// points := [ 130 , 5 , 2 ] ;
28684: LD_ADDR_VAR 0 9
28688: PUSH
28689: LD_INT 130
28691: PUSH
28692: LD_INT 5
28694: PUSH
28695: LD_INT 2
28697: PUSH
28698: EMPTY
28699: LIST
28700: LIST
28701: LIST
28702: ST_TO_ADDR
// if GetClass ( i ) = 8 then
28703: LD_VAR 0 6
28707: PPUSH
28708: CALL_OW 257
28712: PUSH
28713: LD_INT 8
28715: EQUAL
28716: IFFALSE 28737
// points := [ 35 , 35 , 30 ] ;
28718: LD_ADDR_VAR 0 9
28722: PUSH
28723: LD_INT 35
28725: PUSH
28726: LD_INT 35
28728: PUSH
28729: LD_INT 30
28731: PUSH
28732: EMPTY
28733: LIST
28734: LIST
28735: LIST
28736: ST_TO_ADDR
// if GetClass ( i ) = 9 then
28737: LD_VAR 0 6
28741: PPUSH
28742: CALL_OW 257
28746: PUSH
28747: LD_INT 9
28749: EQUAL
28750: IFFALSE 28771
// points := [ 20 , 55 , 40 ] ;
28752: LD_ADDR_VAR 0 9
28756: PUSH
28757: LD_INT 20
28759: PUSH
28760: LD_INT 55
28762: PUSH
28763: LD_INT 40
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: LIST
28770: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
28771: LD_VAR 0 6
28775: PPUSH
28776: CALL_OW 257
28780: PUSH
28781: LD_INT 12
28783: PUSH
28784: LD_INT 16
28786: PUSH
28787: EMPTY
28788: LIST
28789: LIST
28790: IN
28791: IFFALSE 28812
// points := [ 5 , 3 , 2 ] ;
28793: LD_ADDR_VAR 0 9
28797: PUSH
28798: LD_INT 5
28800: PUSH
28801: LD_INT 3
28803: PUSH
28804: LD_INT 2
28806: PUSH
28807: EMPTY
28808: LIST
28809: LIST
28810: LIST
28811: ST_TO_ADDR
// if GetClass ( i ) = 17 then
28812: LD_VAR 0 6
28816: PPUSH
28817: CALL_OW 257
28821: PUSH
28822: LD_INT 17
28824: EQUAL
28825: IFFALSE 28846
// points := [ 100 , 50 , 75 ] ;
28827: LD_ADDR_VAR 0 9
28831: PUSH
28832: LD_INT 100
28834: PUSH
28835: LD_INT 50
28837: PUSH
28838: LD_INT 75
28840: PUSH
28841: EMPTY
28842: LIST
28843: LIST
28844: LIST
28845: ST_TO_ADDR
// if GetClass ( i ) = 15 then
28846: LD_VAR 0 6
28850: PPUSH
28851: CALL_OW 257
28855: PUSH
28856: LD_INT 15
28858: EQUAL
28859: IFFALSE 28880
// points := [ 10 , 5 , 3 ] ;
28861: LD_ADDR_VAR 0 9
28865: PUSH
28866: LD_INT 10
28868: PUSH
28869: LD_INT 5
28871: PUSH
28872: LD_INT 3
28874: PUSH
28875: EMPTY
28876: LIST
28877: LIST
28878: LIST
28879: ST_TO_ADDR
// if GetClass ( i ) = 14 then
28880: LD_VAR 0 6
28884: PPUSH
28885: CALL_OW 257
28889: PUSH
28890: LD_INT 14
28892: EQUAL
28893: IFFALSE 28914
// points := [ 10 , 0 , 0 ] ;
28895: LD_ADDR_VAR 0 9
28899: PUSH
28900: LD_INT 10
28902: PUSH
28903: LD_INT 0
28905: PUSH
28906: LD_INT 0
28908: PUSH
28909: EMPTY
28910: LIST
28911: LIST
28912: LIST
28913: ST_TO_ADDR
// if GetClass ( i ) = 11 then
28914: LD_VAR 0 6
28918: PPUSH
28919: CALL_OW 257
28923: PUSH
28924: LD_INT 11
28926: EQUAL
28927: IFFALSE 28948
// points := [ 30 , 10 , 5 ] ;
28929: LD_ADDR_VAR 0 9
28933: PUSH
28934: LD_INT 30
28936: PUSH
28937: LD_INT 10
28939: PUSH
28940: LD_INT 5
28942: PUSH
28943: EMPTY
28944: LIST
28945: LIST
28946: LIST
28947: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
28948: LD_VAR 0 1
28952: PPUSH
28953: LD_INT 5
28955: PPUSH
28956: CALL_OW 321
28960: PUSH
28961: LD_INT 2
28963: EQUAL
28964: IFFALSE 28981
// bpoints := bpoints * 1.8 ;
28966: LD_ADDR_VAR 0 10
28970: PUSH
28971: LD_VAR 0 10
28975: PUSH
28976: LD_REAL  1.80000000000000E+0000
28979: MUL
28980: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
28981: LD_VAR 0 6
28985: PPUSH
28986: CALL_OW 257
28990: PUSH
28991: LD_INT 1
28993: PUSH
28994: LD_INT 2
28996: PUSH
28997: LD_INT 3
28999: PUSH
29000: LD_INT 4
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: LIST
29007: LIST
29008: IN
29009: PUSH
29010: LD_VAR 0 1
29014: PPUSH
29015: LD_INT 51
29017: PPUSH
29018: CALL_OW 321
29022: PUSH
29023: LD_INT 2
29025: EQUAL
29026: AND
29027: IFFALSE 29044
// bpoints := bpoints * 1.2 ;
29029: LD_ADDR_VAR 0 10
29033: PUSH
29034: LD_VAR 0 10
29038: PUSH
29039: LD_REAL  1.20000000000000E+0000
29042: MUL
29043: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
29044: LD_VAR 0 6
29048: PPUSH
29049: CALL_OW 257
29053: PUSH
29054: LD_INT 5
29056: PUSH
29057: LD_INT 7
29059: PUSH
29060: LD_INT 9
29062: PUSH
29063: EMPTY
29064: LIST
29065: LIST
29066: LIST
29067: IN
29068: PUSH
29069: LD_VAR 0 1
29073: PPUSH
29074: LD_INT 52
29076: PPUSH
29077: CALL_OW 321
29081: PUSH
29082: LD_INT 2
29084: EQUAL
29085: AND
29086: IFFALSE 29103
// bpoints := bpoints * 1.5 ;
29088: LD_ADDR_VAR 0 10
29092: PUSH
29093: LD_VAR 0 10
29097: PUSH
29098: LD_REAL  1.50000000000000E+0000
29101: MUL
29102: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
29103: LD_VAR 0 1
29107: PPUSH
29108: LD_INT 66
29110: PPUSH
29111: CALL_OW 321
29115: PUSH
29116: LD_INT 2
29118: EQUAL
29119: IFFALSE 29136
// bpoints := bpoints * 1.1 ;
29121: LD_ADDR_VAR 0 10
29125: PUSH
29126: LD_VAR 0 10
29130: PUSH
29131: LD_REAL  1.10000000000000E+0000
29134: MUL
29135: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
29136: LD_ADDR_VAR 0 10
29140: PUSH
29141: LD_VAR 0 10
29145: PUSH
29146: LD_VAR 0 6
29150: PPUSH
29151: LD_INT 1
29153: PPUSH
29154: CALL_OW 259
29158: PUSH
29159: LD_REAL  1.15000000000000E+0000
29162: MUL
29163: MUL
29164: ST_TO_ADDR
// end ; unit_vehicle :
29165: GO 29995
29167: LD_INT 2
29169: DOUBLE
29170: EQUAL
29171: IFTRUE 29175
29173: GO 29983
29175: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
29176: LD_VAR 0 6
29180: PPUSH
29181: CALL_OW 264
29185: PUSH
29186: LD_INT 2
29188: PUSH
29189: LD_INT 42
29191: PUSH
29192: LD_INT 24
29194: PUSH
29195: EMPTY
29196: LIST
29197: LIST
29198: LIST
29199: IN
29200: IFFALSE 29221
// points := [ 25 , 5 , 3 ] ;
29202: LD_ADDR_VAR 0 9
29206: PUSH
29207: LD_INT 25
29209: PUSH
29210: LD_INT 5
29212: PUSH
29213: LD_INT 3
29215: PUSH
29216: EMPTY
29217: LIST
29218: LIST
29219: LIST
29220: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
29221: LD_VAR 0 6
29225: PPUSH
29226: CALL_OW 264
29230: PUSH
29231: LD_INT 4
29233: PUSH
29234: LD_INT 43
29236: PUSH
29237: LD_INT 25
29239: PUSH
29240: EMPTY
29241: LIST
29242: LIST
29243: LIST
29244: IN
29245: IFFALSE 29266
// points := [ 40 , 15 , 5 ] ;
29247: LD_ADDR_VAR 0 9
29251: PUSH
29252: LD_INT 40
29254: PUSH
29255: LD_INT 15
29257: PUSH
29258: LD_INT 5
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: LIST
29265: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
29266: LD_VAR 0 6
29270: PPUSH
29271: CALL_OW 264
29275: PUSH
29276: LD_INT 3
29278: PUSH
29279: LD_INT 23
29281: PUSH
29282: EMPTY
29283: LIST
29284: LIST
29285: IN
29286: IFFALSE 29307
// points := [ 7 , 25 , 8 ] ;
29288: LD_ADDR_VAR 0 9
29292: PUSH
29293: LD_INT 7
29295: PUSH
29296: LD_INT 25
29298: PUSH
29299: LD_INT 8
29301: PUSH
29302: EMPTY
29303: LIST
29304: LIST
29305: LIST
29306: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
29307: LD_VAR 0 6
29311: PPUSH
29312: CALL_OW 264
29316: PUSH
29317: LD_INT 5
29319: PUSH
29320: LD_INT 27
29322: PUSH
29323: LD_INT 44
29325: PUSH
29326: EMPTY
29327: LIST
29328: LIST
29329: LIST
29330: IN
29331: IFFALSE 29352
// points := [ 14 , 50 , 16 ] ;
29333: LD_ADDR_VAR 0 9
29337: PUSH
29338: LD_INT 14
29340: PUSH
29341: LD_INT 50
29343: PUSH
29344: LD_INT 16
29346: PUSH
29347: EMPTY
29348: LIST
29349: LIST
29350: LIST
29351: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
29352: LD_VAR 0 6
29356: PPUSH
29357: CALL_OW 264
29361: PUSH
29362: LD_INT 6
29364: PUSH
29365: LD_INT 46
29367: PUSH
29368: EMPTY
29369: LIST
29370: LIST
29371: IN
29372: IFFALSE 29393
// points := [ 32 , 120 , 70 ] ;
29374: LD_ADDR_VAR 0 9
29378: PUSH
29379: LD_INT 32
29381: PUSH
29382: LD_INT 120
29384: PUSH
29385: LD_INT 70
29387: PUSH
29388: EMPTY
29389: LIST
29390: LIST
29391: LIST
29392: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
29393: LD_VAR 0 6
29397: PPUSH
29398: CALL_OW 264
29402: PUSH
29403: LD_INT 7
29405: PUSH
29406: LD_INT 28
29408: PUSH
29409: LD_INT 45
29411: PUSH
29412: LD_EXP 86
29416: PUSH
29417: EMPTY
29418: LIST
29419: LIST
29420: LIST
29421: LIST
29422: IN
29423: IFFALSE 29444
// points := [ 35 , 20 , 45 ] ;
29425: LD_ADDR_VAR 0 9
29429: PUSH
29430: LD_INT 35
29432: PUSH
29433: LD_INT 20
29435: PUSH
29436: LD_INT 45
29438: PUSH
29439: EMPTY
29440: LIST
29441: LIST
29442: LIST
29443: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
29444: LD_VAR 0 6
29448: PPUSH
29449: CALL_OW 264
29453: PUSH
29454: LD_INT 47
29456: PUSH
29457: EMPTY
29458: LIST
29459: IN
29460: IFFALSE 29481
// points := [ 67 , 45 , 75 ] ;
29462: LD_ADDR_VAR 0 9
29466: PUSH
29467: LD_INT 67
29469: PUSH
29470: LD_INT 45
29472: PUSH
29473: LD_INT 75
29475: PUSH
29476: EMPTY
29477: LIST
29478: LIST
29479: LIST
29480: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
29481: LD_VAR 0 6
29485: PPUSH
29486: CALL_OW 264
29490: PUSH
29491: LD_INT 26
29493: PUSH
29494: EMPTY
29495: LIST
29496: IN
29497: IFFALSE 29518
// points := [ 120 , 30 , 80 ] ;
29499: LD_ADDR_VAR 0 9
29503: PUSH
29504: LD_INT 120
29506: PUSH
29507: LD_INT 30
29509: PUSH
29510: LD_INT 80
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: LIST
29517: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
29518: LD_VAR 0 6
29522: PPUSH
29523: CALL_OW 264
29527: PUSH
29528: LD_INT 22
29530: PUSH
29531: EMPTY
29532: LIST
29533: IN
29534: IFFALSE 29555
// points := [ 40 , 1 , 1 ] ;
29536: LD_ADDR_VAR 0 9
29540: PUSH
29541: LD_INT 40
29543: PUSH
29544: LD_INT 1
29546: PUSH
29547: LD_INT 1
29549: PUSH
29550: EMPTY
29551: LIST
29552: LIST
29553: LIST
29554: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
29555: LD_VAR 0 6
29559: PPUSH
29560: CALL_OW 264
29564: PUSH
29565: LD_INT 29
29567: PUSH
29568: EMPTY
29569: LIST
29570: IN
29571: IFFALSE 29592
// points := [ 70 , 200 , 400 ] ;
29573: LD_ADDR_VAR 0 9
29577: PUSH
29578: LD_INT 70
29580: PUSH
29581: LD_INT 200
29583: PUSH
29584: LD_INT 400
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: LIST
29591: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
29592: LD_VAR 0 6
29596: PPUSH
29597: CALL_OW 264
29601: PUSH
29602: LD_INT 14
29604: PUSH
29605: LD_INT 53
29607: PUSH
29608: EMPTY
29609: LIST
29610: LIST
29611: IN
29612: IFFALSE 29633
// points := [ 40 , 10 , 20 ] ;
29614: LD_ADDR_VAR 0 9
29618: PUSH
29619: LD_INT 40
29621: PUSH
29622: LD_INT 10
29624: PUSH
29625: LD_INT 20
29627: PUSH
29628: EMPTY
29629: LIST
29630: LIST
29631: LIST
29632: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
29633: LD_VAR 0 6
29637: PPUSH
29638: CALL_OW 264
29642: PUSH
29643: LD_INT 9
29645: PUSH
29646: EMPTY
29647: LIST
29648: IN
29649: IFFALSE 29670
// points := [ 5 , 70 , 20 ] ;
29651: LD_ADDR_VAR 0 9
29655: PUSH
29656: LD_INT 5
29658: PUSH
29659: LD_INT 70
29661: PUSH
29662: LD_INT 20
29664: PUSH
29665: EMPTY
29666: LIST
29667: LIST
29668: LIST
29669: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
29670: LD_VAR 0 6
29674: PPUSH
29675: CALL_OW 264
29679: PUSH
29680: LD_INT 10
29682: PUSH
29683: EMPTY
29684: LIST
29685: IN
29686: IFFALSE 29707
// points := [ 35 , 110 , 70 ] ;
29688: LD_ADDR_VAR 0 9
29692: PUSH
29693: LD_INT 35
29695: PUSH
29696: LD_INT 110
29698: PUSH
29699: LD_INT 70
29701: PUSH
29702: EMPTY
29703: LIST
29704: LIST
29705: LIST
29706: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
29707: LD_VAR 0 6
29711: PPUSH
29712: CALL_OW 265
29716: PUSH
29717: LD_INT 25
29719: EQUAL
29720: IFFALSE 29741
// points := [ 80 , 65 , 100 ] ;
29722: LD_ADDR_VAR 0 9
29726: PUSH
29727: LD_INT 80
29729: PUSH
29730: LD_INT 65
29732: PUSH
29733: LD_INT 100
29735: PUSH
29736: EMPTY
29737: LIST
29738: LIST
29739: LIST
29740: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
29741: LD_VAR 0 6
29745: PPUSH
29746: CALL_OW 263
29750: PUSH
29751: LD_INT 1
29753: EQUAL
29754: IFFALSE 29789
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
29756: LD_ADDR_VAR 0 10
29760: PUSH
29761: LD_VAR 0 10
29765: PUSH
29766: LD_VAR 0 6
29770: PPUSH
29771: CALL_OW 311
29775: PPUSH
29776: LD_INT 3
29778: PPUSH
29779: CALL_OW 259
29783: PUSH
29784: LD_INT 4
29786: MUL
29787: MUL
29788: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
29789: LD_VAR 0 6
29793: PPUSH
29794: CALL_OW 263
29798: PUSH
29799: LD_INT 2
29801: EQUAL
29802: IFFALSE 29853
// begin j := IsControledBy ( i ) ;
29804: LD_ADDR_VAR 0 7
29808: PUSH
29809: LD_VAR 0 6
29813: PPUSH
29814: CALL_OW 312
29818: ST_TO_ADDR
// if j then
29819: LD_VAR 0 7
29823: IFFALSE 29853
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
29825: LD_ADDR_VAR 0 10
29829: PUSH
29830: LD_VAR 0 10
29834: PUSH
29835: LD_VAR 0 7
29839: PPUSH
29840: LD_INT 3
29842: PPUSH
29843: CALL_OW 259
29847: PUSH
29848: LD_INT 3
29850: MUL
29851: MUL
29852: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
29853: LD_VAR 0 6
29857: PPUSH
29858: CALL_OW 264
29862: PUSH
29863: LD_INT 5
29865: PUSH
29866: LD_INT 6
29868: PUSH
29869: LD_INT 46
29871: PUSH
29872: LD_INT 44
29874: PUSH
29875: LD_INT 47
29877: PUSH
29878: LD_INT 45
29880: PUSH
29881: LD_INT 28
29883: PUSH
29884: LD_INT 7
29886: PUSH
29887: LD_INT 27
29889: PUSH
29890: LD_INT 29
29892: PUSH
29893: EMPTY
29894: LIST
29895: LIST
29896: LIST
29897: LIST
29898: LIST
29899: LIST
29900: LIST
29901: LIST
29902: LIST
29903: LIST
29904: IN
29905: PUSH
29906: LD_VAR 0 1
29910: PPUSH
29911: LD_INT 52
29913: PPUSH
29914: CALL_OW 321
29918: PUSH
29919: LD_INT 2
29921: EQUAL
29922: AND
29923: IFFALSE 29940
// bpoints := bpoints * 1.2 ;
29925: LD_ADDR_VAR 0 10
29929: PUSH
29930: LD_VAR 0 10
29934: PUSH
29935: LD_REAL  1.20000000000000E+0000
29938: MUL
29939: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
29940: LD_VAR 0 6
29944: PPUSH
29945: CALL_OW 264
29949: PUSH
29950: LD_INT 6
29952: PUSH
29953: LD_INT 46
29955: PUSH
29956: LD_INT 47
29958: PUSH
29959: EMPTY
29960: LIST
29961: LIST
29962: LIST
29963: IN
29964: IFFALSE 29981
// bpoints := bpoints * 1.2 ;
29966: LD_ADDR_VAR 0 10
29970: PUSH
29971: LD_VAR 0 10
29975: PUSH
29976: LD_REAL  1.20000000000000E+0000
29979: MUL
29980: ST_TO_ADDR
// end ; unit_building :
29981: GO 29995
29983: LD_INT 3
29985: DOUBLE
29986: EQUAL
29987: IFTRUE 29991
29989: GO 29994
29991: POP
// ; end ;
29992: GO 29995
29994: POP
// for j = 1 to 3 do
29995: LD_ADDR_VAR 0 7
29999: PUSH
30000: DOUBLE
30001: LD_INT 1
30003: DEC
30004: ST_TO_ADDR
30005: LD_INT 3
30007: PUSH
30008: FOR_TO
30009: IFFALSE 30062
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
30011: LD_ADDR_VAR 0 5
30015: PUSH
30016: LD_VAR 0 5
30020: PPUSH
30021: LD_VAR 0 7
30025: PPUSH
30026: LD_VAR 0 5
30030: PUSH
30031: LD_VAR 0 7
30035: ARRAY
30036: PUSH
30037: LD_VAR 0 9
30041: PUSH
30042: LD_VAR 0 7
30046: ARRAY
30047: PUSH
30048: LD_VAR 0 10
30052: MUL
30053: PLUS
30054: PPUSH
30055: CALL_OW 1
30059: ST_TO_ADDR
30060: GO 30008
30062: POP
30063: POP
// end ;
30064: GO 28541
30066: POP
30067: POP
// result := Replace ( result , 4 , tmp ) ;
30068: LD_ADDR_VAR 0 5
30072: PUSH
30073: LD_VAR 0 5
30077: PPUSH
30078: LD_INT 4
30080: PPUSH
30081: LD_VAR 0 8
30085: PPUSH
30086: CALL_OW 1
30090: ST_TO_ADDR
// end ;
30091: LD_VAR 0 5
30095: RET
// export function DangerAtRange ( unit , range ) ; begin
30096: LD_INT 0
30098: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
30099: LD_ADDR_VAR 0 3
30103: PUSH
30104: LD_VAR 0 1
30108: PPUSH
30109: CALL_OW 255
30113: PPUSH
30114: LD_VAR 0 1
30118: PPUSH
30119: CALL_OW 250
30123: PPUSH
30124: LD_VAR 0 1
30128: PPUSH
30129: CALL_OW 251
30133: PPUSH
30134: LD_VAR 0 2
30138: PPUSH
30139: CALL 28393 0 4
30143: ST_TO_ADDR
// end ;
30144: LD_VAR 0 3
30148: RET
// export function DangerInArea ( side , area ) ; begin
30149: LD_INT 0
30151: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
30152: LD_ADDR_VAR 0 3
30156: PUSH
30157: LD_VAR 0 2
30161: PPUSH
30162: LD_INT 81
30164: PUSH
30165: LD_VAR 0 1
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PPUSH
30174: CALL_OW 70
30178: ST_TO_ADDR
// end ;
30179: LD_VAR 0 3
30183: RET
// export function IsExtension ( b ) ; begin
30184: LD_INT 0
30186: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
30187: LD_ADDR_VAR 0 2
30191: PUSH
30192: LD_VAR 0 1
30196: PUSH
30197: LD_INT 23
30199: PUSH
30200: LD_INT 20
30202: PUSH
30203: LD_INT 22
30205: PUSH
30206: LD_INT 17
30208: PUSH
30209: LD_INT 24
30211: PUSH
30212: LD_INT 21
30214: PUSH
30215: LD_INT 19
30217: PUSH
30218: LD_INT 16
30220: PUSH
30221: LD_INT 25
30223: PUSH
30224: LD_INT 18
30226: PUSH
30227: EMPTY
30228: LIST
30229: LIST
30230: LIST
30231: LIST
30232: LIST
30233: LIST
30234: LIST
30235: LIST
30236: LIST
30237: LIST
30238: IN
30239: ST_TO_ADDR
// end ;
30240: LD_VAR 0 2
30244: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
30245: LD_INT 0
30247: PPUSH
30248: PPUSH
30249: PPUSH
// result := [ ] ;
30250: LD_ADDR_VAR 0 4
30254: PUSH
30255: EMPTY
30256: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
30257: LD_ADDR_VAR 0 5
30261: PUSH
30262: LD_VAR 0 2
30266: PPUSH
30267: LD_INT 21
30269: PUSH
30270: LD_INT 3
30272: PUSH
30273: EMPTY
30274: LIST
30275: LIST
30276: PPUSH
30277: CALL_OW 70
30281: ST_TO_ADDR
// if not tmp then
30282: LD_VAR 0 5
30286: NOT
30287: IFFALSE 30291
// exit ;
30289: GO 30355
// if checkLink then
30291: LD_VAR 0 3
30295: IFFALSE 30345
// begin for i in tmp do
30297: LD_ADDR_VAR 0 6
30301: PUSH
30302: LD_VAR 0 5
30306: PUSH
30307: FOR_IN
30308: IFFALSE 30343
// if GetBase ( i ) <> base then
30310: LD_VAR 0 6
30314: PPUSH
30315: CALL_OW 274
30319: PUSH
30320: LD_VAR 0 1
30324: NONEQUAL
30325: IFFALSE 30341
// ComLinkToBase ( base , i ) ;
30327: LD_VAR 0 1
30331: PPUSH
30332: LD_VAR 0 6
30336: PPUSH
30337: CALL_OW 169
30341: GO 30307
30343: POP
30344: POP
// end ; result := tmp ;
30345: LD_ADDR_VAR 0 4
30349: PUSH
30350: LD_VAR 0 5
30354: ST_TO_ADDR
// end ;
30355: LD_VAR 0 4
30359: RET
// export function ComComplete ( units , b ) ; var i ; begin
30360: LD_INT 0
30362: PPUSH
30363: PPUSH
// if not units then
30364: LD_VAR 0 1
30368: NOT
30369: IFFALSE 30373
// exit ;
30371: GO 30463
// for i in units do
30373: LD_ADDR_VAR 0 4
30377: PUSH
30378: LD_VAR 0 1
30382: PUSH
30383: FOR_IN
30384: IFFALSE 30461
// if BuildingStatus ( b ) = bs_build then
30386: LD_VAR 0 2
30390: PPUSH
30391: CALL_OW 461
30395: PUSH
30396: LD_INT 1
30398: EQUAL
30399: IFFALSE 30459
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
30401: LD_VAR 0 4
30405: PPUSH
30406: LD_STRING h
30408: PUSH
30409: LD_VAR 0 2
30413: PPUSH
30414: CALL_OW 250
30418: PUSH
30419: LD_VAR 0 2
30423: PPUSH
30424: CALL_OW 251
30428: PUSH
30429: LD_VAR 0 2
30433: PUSH
30434: LD_INT 0
30436: PUSH
30437: LD_INT 0
30439: PUSH
30440: LD_INT 0
30442: PUSH
30443: EMPTY
30444: LIST
30445: LIST
30446: LIST
30447: LIST
30448: LIST
30449: LIST
30450: LIST
30451: PUSH
30452: EMPTY
30453: LIST
30454: PPUSH
30455: CALL_OW 446
30459: GO 30383
30461: POP
30462: POP
// end ;
30463: LD_VAR 0 3
30467: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
30468: LD_INT 0
30470: PPUSH
30471: PPUSH
30472: PPUSH
30473: PPUSH
30474: PPUSH
30475: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
30476: LD_VAR 0 1
30480: NOT
30481: PUSH
30482: LD_VAR 0 1
30486: PPUSH
30487: CALL_OW 263
30491: PUSH
30492: LD_INT 2
30494: NONEQUAL
30495: OR
30496: IFFALSE 30500
// exit ;
30498: GO 30816
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
30500: LD_ADDR_VAR 0 6
30504: PUSH
30505: LD_INT 22
30507: PUSH
30508: LD_VAR 0 1
30512: PPUSH
30513: CALL_OW 255
30517: PUSH
30518: EMPTY
30519: LIST
30520: LIST
30521: PUSH
30522: LD_INT 2
30524: PUSH
30525: LD_INT 30
30527: PUSH
30528: LD_INT 36
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: PUSH
30535: LD_INT 34
30537: PUSH
30538: LD_INT 31
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: LIST
30549: PUSH
30550: EMPTY
30551: LIST
30552: LIST
30553: PPUSH
30554: CALL_OW 69
30558: ST_TO_ADDR
// if not tmp then
30559: LD_VAR 0 6
30563: NOT
30564: IFFALSE 30568
// exit ;
30566: GO 30816
// result := [ ] ;
30568: LD_ADDR_VAR 0 2
30572: PUSH
30573: EMPTY
30574: ST_TO_ADDR
// for i in tmp do
30575: LD_ADDR_VAR 0 3
30579: PUSH
30580: LD_VAR 0 6
30584: PUSH
30585: FOR_IN
30586: IFFALSE 30657
// begin t := UnitsInside ( i ) ;
30588: LD_ADDR_VAR 0 4
30592: PUSH
30593: LD_VAR 0 3
30597: PPUSH
30598: CALL_OW 313
30602: ST_TO_ADDR
// if t then
30603: LD_VAR 0 4
30607: IFFALSE 30655
// for j in t do
30609: LD_ADDR_VAR 0 7
30613: PUSH
30614: LD_VAR 0 4
30618: PUSH
30619: FOR_IN
30620: IFFALSE 30653
// result := Replace ( result , result + 1 , j ) ;
30622: LD_ADDR_VAR 0 2
30626: PUSH
30627: LD_VAR 0 2
30631: PPUSH
30632: LD_VAR 0 2
30636: PUSH
30637: LD_INT 1
30639: PLUS
30640: PPUSH
30641: LD_VAR 0 7
30645: PPUSH
30646: CALL_OW 1
30650: ST_TO_ADDR
30651: GO 30619
30653: POP
30654: POP
// end ;
30655: GO 30585
30657: POP
30658: POP
// if not result then
30659: LD_VAR 0 2
30663: NOT
30664: IFFALSE 30668
// exit ;
30666: GO 30816
// mech := result [ 1 ] ;
30668: LD_ADDR_VAR 0 5
30672: PUSH
30673: LD_VAR 0 2
30677: PUSH
30678: LD_INT 1
30680: ARRAY
30681: ST_TO_ADDR
// if result > 1 then
30682: LD_VAR 0 2
30686: PUSH
30687: LD_INT 1
30689: GREATER
30690: IFFALSE 30802
// begin for i = 2 to result do
30692: LD_ADDR_VAR 0 3
30696: PUSH
30697: DOUBLE
30698: LD_INT 2
30700: DEC
30701: ST_TO_ADDR
30702: LD_VAR 0 2
30706: PUSH
30707: FOR_TO
30708: IFFALSE 30800
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
30710: LD_ADDR_VAR 0 4
30714: PUSH
30715: LD_VAR 0 2
30719: PUSH
30720: LD_VAR 0 3
30724: ARRAY
30725: PPUSH
30726: LD_INT 3
30728: PPUSH
30729: CALL_OW 259
30733: PUSH
30734: LD_VAR 0 2
30738: PUSH
30739: LD_VAR 0 3
30743: ARRAY
30744: PPUSH
30745: CALL_OW 432
30749: MINUS
30750: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
30751: LD_VAR 0 4
30755: PUSH
30756: LD_VAR 0 5
30760: PPUSH
30761: LD_INT 3
30763: PPUSH
30764: CALL_OW 259
30768: PUSH
30769: LD_VAR 0 5
30773: PPUSH
30774: CALL_OW 432
30778: MINUS
30779: GREATEREQUAL
30780: IFFALSE 30798
// mech := result [ i ] ;
30782: LD_ADDR_VAR 0 5
30786: PUSH
30787: LD_VAR 0 2
30791: PUSH
30792: LD_VAR 0 3
30796: ARRAY
30797: ST_TO_ADDR
// end ;
30798: GO 30707
30800: POP
30801: POP
// end ; ComLinkTo ( vehicle , mech ) ;
30802: LD_VAR 0 1
30806: PPUSH
30807: LD_VAR 0 5
30811: PPUSH
30812: CALL_OW 135
// end ;
30816: LD_VAR 0 2
30820: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
30821: LD_INT 0
30823: PPUSH
30824: PPUSH
30825: PPUSH
30826: PPUSH
30827: PPUSH
30828: PPUSH
30829: PPUSH
30830: PPUSH
30831: PPUSH
30832: PPUSH
30833: PPUSH
30834: PPUSH
30835: PPUSH
// result := [ ] ;
30836: LD_ADDR_VAR 0 7
30840: PUSH
30841: EMPTY
30842: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
30843: LD_VAR 0 1
30847: PPUSH
30848: CALL_OW 266
30852: PUSH
30853: LD_INT 0
30855: PUSH
30856: LD_INT 1
30858: PUSH
30859: EMPTY
30860: LIST
30861: LIST
30862: IN
30863: NOT
30864: IFFALSE 30868
// exit ;
30866: GO 32502
// if name then
30868: LD_VAR 0 3
30872: IFFALSE 30888
// SetBName ( base_dep , name ) ;
30874: LD_VAR 0 1
30878: PPUSH
30879: LD_VAR 0 3
30883: PPUSH
30884: CALL_OW 500
// base := GetBase ( base_dep ) ;
30888: LD_ADDR_VAR 0 15
30892: PUSH
30893: LD_VAR 0 1
30897: PPUSH
30898: CALL_OW 274
30902: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
30903: LD_ADDR_VAR 0 16
30907: PUSH
30908: LD_VAR 0 1
30912: PPUSH
30913: CALL_OW 255
30917: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
30918: LD_ADDR_VAR 0 17
30922: PUSH
30923: LD_VAR 0 1
30927: PPUSH
30928: CALL_OW 248
30932: ST_TO_ADDR
// if sources then
30933: LD_VAR 0 5
30937: IFFALSE 30984
// for i = 1 to 3 do
30939: LD_ADDR_VAR 0 8
30943: PUSH
30944: DOUBLE
30945: LD_INT 1
30947: DEC
30948: ST_TO_ADDR
30949: LD_INT 3
30951: PUSH
30952: FOR_TO
30953: IFFALSE 30982
// AddResourceType ( base , i , sources [ i ] ) ;
30955: LD_VAR 0 15
30959: PPUSH
30960: LD_VAR 0 8
30964: PPUSH
30965: LD_VAR 0 5
30969: PUSH
30970: LD_VAR 0 8
30974: ARRAY
30975: PPUSH
30976: CALL_OW 276
30980: GO 30952
30982: POP
30983: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
30984: LD_ADDR_VAR 0 18
30988: PUSH
30989: LD_VAR 0 15
30993: PPUSH
30994: LD_VAR 0 2
30998: PPUSH
30999: LD_INT 1
31001: PPUSH
31002: CALL 30245 0 3
31006: ST_TO_ADDR
// InitHc ;
31007: CALL_OW 19
// InitUc ;
31011: CALL_OW 18
// uc_side := side ;
31015: LD_ADDR_OWVAR 20
31019: PUSH
31020: LD_VAR 0 16
31024: ST_TO_ADDR
// uc_nation := nation ;
31025: LD_ADDR_OWVAR 21
31029: PUSH
31030: LD_VAR 0 17
31034: ST_TO_ADDR
// if buildings then
31035: LD_VAR 0 18
31039: IFFALSE 32361
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
31041: LD_ADDR_VAR 0 19
31045: PUSH
31046: LD_VAR 0 18
31050: PPUSH
31051: LD_INT 2
31053: PUSH
31054: LD_INT 30
31056: PUSH
31057: LD_INT 29
31059: PUSH
31060: EMPTY
31061: LIST
31062: LIST
31063: PUSH
31064: LD_INT 30
31066: PUSH
31067: LD_INT 30
31069: PUSH
31070: EMPTY
31071: LIST
31072: LIST
31073: PUSH
31074: EMPTY
31075: LIST
31076: LIST
31077: LIST
31078: PPUSH
31079: CALL_OW 72
31083: ST_TO_ADDR
// if tmp then
31084: LD_VAR 0 19
31088: IFFALSE 31136
// for i in tmp do
31090: LD_ADDR_VAR 0 8
31094: PUSH
31095: LD_VAR 0 19
31099: PUSH
31100: FOR_IN
31101: IFFALSE 31134
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
31103: LD_VAR 0 8
31107: PPUSH
31108: CALL_OW 250
31112: PPUSH
31113: LD_VAR 0 8
31117: PPUSH
31118: CALL_OW 251
31122: PPUSH
31123: LD_VAR 0 16
31127: PPUSH
31128: CALL_OW 441
31132: GO 31100
31134: POP
31135: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
31136: LD_VAR 0 18
31140: PPUSH
31141: LD_INT 2
31143: PUSH
31144: LD_INT 30
31146: PUSH
31147: LD_INT 32
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: LD_INT 30
31156: PUSH
31157: LD_INT 33
31159: PUSH
31160: EMPTY
31161: LIST
31162: LIST
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: LIST
31168: PPUSH
31169: CALL_OW 72
31173: IFFALSE 31261
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
31175: LD_ADDR_VAR 0 8
31179: PUSH
31180: LD_VAR 0 18
31184: PPUSH
31185: LD_INT 2
31187: PUSH
31188: LD_INT 30
31190: PUSH
31191: LD_INT 32
31193: PUSH
31194: EMPTY
31195: LIST
31196: LIST
31197: PUSH
31198: LD_INT 30
31200: PUSH
31201: LD_INT 33
31203: PUSH
31204: EMPTY
31205: LIST
31206: LIST
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: LIST
31212: PPUSH
31213: CALL_OW 72
31217: PUSH
31218: FOR_IN
31219: IFFALSE 31259
// begin if not GetBWeapon ( i ) then
31221: LD_VAR 0 8
31225: PPUSH
31226: CALL_OW 269
31230: NOT
31231: IFFALSE 31257
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
31233: LD_VAR 0 8
31237: PPUSH
31238: LD_VAR 0 8
31242: PPUSH
31243: LD_VAR 0 2
31247: PPUSH
31248: CALL 32507 0 2
31252: PPUSH
31253: CALL_OW 431
// end ;
31257: GO 31218
31259: POP
31260: POP
// end ; for i = 1 to personel do
31261: LD_ADDR_VAR 0 8
31265: PUSH
31266: DOUBLE
31267: LD_INT 1
31269: DEC
31270: ST_TO_ADDR
31271: LD_VAR 0 6
31275: PUSH
31276: FOR_TO
31277: IFFALSE 32341
// begin if i > 4 then
31279: LD_VAR 0 8
31283: PUSH
31284: LD_INT 4
31286: GREATER
31287: IFFALSE 31291
// break ;
31289: GO 32341
// case i of 1 :
31291: LD_VAR 0 8
31295: PUSH
31296: LD_INT 1
31298: DOUBLE
31299: EQUAL
31300: IFTRUE 31304
31302: GO 31384
31304: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
31305: LD_ADDR_VAR 0 12
31309: PUSH
31310: LD_VAR 0 18
31314: PPUSH
31315: LD_INT 22
31317: PUSH
31318: LD_VAR 0 16
31322: PUSH
31323: EMPTY
31324: LIST
31325: LIST
31326: PUSH
31327: LD_INT 58
31329: PUSH
31330: EMPTY
31331: LIST
31332: PUSH
31333: LD_INT 2
31335: PUSH
31336: LD_INT 30
31338: PUSH
31339: LD_INT 32
31341: PUSH
31342: EMPTY
31343: LIST
31344: LIST
31345: PUSH
31346: LD_INT 30
31348: PUSH
31349: LD_INT 4
31351: PUSH
31352: EMPTY
31353: LIST
31354: LIST
31355: PUSH
31356: LD_INT 30
31358: PUSH
31359: LD_INT 5
31361: PUSH
31362: EMPTY
31363: LIST
31364: LIST
31365: PUSH
31366: EMPTY
31367: LIST
31368: LIST
31369: LIST
31370: LIST
31371: PUSH
31372: EMPTY
31373: LIST
31374: LIST
31375: LIST
31376: PPUSH
31377: CALL_OW 72
31381: ST_TO_ADDR
31382: GO 31606
31384: LD_INT 2
31386: DOUBLE
31387: EQUAL
31388: IFTRUE 31392
31390: GO 31454
31392: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
31393: LD_ADDR_VAR 0 12
31397: PUSH
31398: LD_VAR 0 18
31402: PPUSH
31403: LD_INT 22
31405: PUSH
31406: LD_VAR 0 16
31410: PUSH
31411: EMPTY
31412: LIST
31413: LIST
31414: PUSH
31415: LD_INT 2
31417: PUSH
31418: LD_INT 30
31420: PUSH
31421: LD_INT 0
31423: PUSH
31424: EMPTY
31425: LIST
31426: LIST
31427: PUSH
31428: LD_INT 30
31430: PUSH
31431: LD_INT 1
31433: PUSH
31434: EMPTY
31435: LIST
31436: LIST
31437: PUSH
31438: EMPTY
31439: LIST
31440: LIST
31441: LIST
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: PPUSH
31447: CALL_OW 72
31451: ST_TO_ADDR
31452: GO 31606
31454: LD_INT 3
31456: DOUBLE
31457: EQUAL
31458: IFTRUE 31462
31460: GO 31524
31462: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
31463: LD_ADDR_VAR 0 12
31467: PUSH
31468: LD_VAR 0 18
31472: PPUSH
31473: LD_INT 22
31475: PUSH
31476: LD_VAR 0 16
31480: PUSH
31481: EMPTY
31482: LIST
31483: LIST
31484: PUSH
31485: LD_INT 2
31487: PUSH
31488: LD_INT 30
31490: PUSH
31491: LD_INT 2
31493: PUSH
31494: EMPTY
31495: LIST
31496: LIST
31497: PUSH
31498: LD_INT 30
31500: PUSH
31501: LD_INT 3
31503: PUSH
31504: EMPTY
31505: LIST
31506: LIST
31507: PUSH
31508: EMPTY
31509: LIST
31510: LIST
31511: LIST
31512: PUSH
31513: EMPTY
31514: LIST
31515: LIST
31516: PPUSH
31517: CALL_OW 72
31521: ST_TO_ADDR
31522: GO 31606
31524: LD_INT 4
31526: DOUBLE
31527: EQUAL
31528: IFTRUE 31532
31530: GO 31605
31532: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
31533: LD_ADDR_VAR 0 12
31537: PUSH
31538: LD_VAR 0 18
31542: PPUSH
31543: LD_INT 22
31545: PUSH
31546: LD_VAR 0 16
31550: PUSH
31551: EMPTY
31552: LIST
31553: LIST
31554: PUSH
31555: LD_INT 2
31557: PUSH
31558: LD_INT 30
31560: PUSH
31561: LD_INT 6
31563: PUSH
31564: EMPTY
31565: LIST
31566: LIST
31567: PUSH
31568: LD_INT 30
31570: PUSH
31571: LD_INT 7
31573: PUSH
31574: EMPTY
31575: LIST
31576: LIST
31577: PUSH
31578: LD_INT 30
31580: PUSH
31581: LD_INT 8
31583: PUSH
31584: EMPTY
31585: LIST
31586: LIST
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: LIST
31592: LIST
31593: PUSH
31594: EMPTY
31595: LIST
31596: LIST
31597: PPUSH
31598: CALL_OW 72
31602: ST_TO_ADDR
31603: GO 31606
31605: POP
// if i = 1 then
31606: LD_VAR 0 8
31610: PUSH
31611: LD_INT 1
31613: EQUAL
31614: IFFALSE 31725
// begin tmp := [ ] ;
31616: LD_ADDR_VAR 0 19
31620: PUSH
31621: EMPTY
31622: ST_TO_ADDR
// for j in f do
31623: LD_ADDR_VAR 0 9
31627: PUSH
31628: LD_VAR 0 12
31632: PUSH
31633: FOR_IN
31634: IFFALSE 31707
// if GetBType ( j ) = b_bunker then
31636: LD_VAR 0 9
31640: PPUSH
31641: CALL_OW 266
31645: PUSH
31646: LD_INT 32
31648: EQUAL
31649: IFFALSE 31676
// tmp := Insert ( tmp , 1 , j ) else
31651: LD_ADDR_VAR 0 19
31655: PUSH
31656: LD_VAR 0 19
31660: PPUSH
31661: LD_INT 1
31663: PPUSH
31664: LD_VAR 0 9
31668: PPUSH
31669: CALL_OW 2
31673: ST_TO_ADDR
31674: GO 31705
// tmp := Insert ( tmp , tmp + 1 , j ) ;
31676: LD_ADDR_VAR 0 19
31680: PUSH
31681: LD_VAR 0 19
31685: PPUSH
31686: LD_VAR 0 19
31690: PUSH
31691: LD_INT 1
31693: PLUS
31694: PPUSH
31695: LD_VAR 0 9
31699: PPUSH
31700: CALL_OW 2
31704: ST_TO_ADDR
31705: GO 31633
31707: POP
31708: POP
// if tmp then
31709: LD_VAR 0 19
31713: IFFALSE 31725
// f := tmp ;
31715: LD_ADDR_VAR 0 12
31719: PUSH
31720: LD_VAR 0 19
31724: ST_TO_ADDR
// end ; x := personel [ i ] ;
31725: LD_ADDR_VAR 0 13
31729: PUSH
31730: LD_VAR 0 6
31734: PUSH
31735: LD_VAR 0 8
31739: ARRAY
31740: ST_TO_ADDR
// if x = - 1 then
31741: LD_VAR 0 13
31745: PUSH
31746: LD_INT 1
31748: NEG
31749: EQUAL
31750: IFFALSE 31959
// begin for j in f do
31752: LD_ADDR_VAR 0 9
31756: PUSH
31757: LD_VAR 0 12
31761: PUSH
31762: FOR_IN
31763: IFFALSE 31955
// repeat InitHc ;
31765: CALL_OW 19
// if GetBType ( j ) = b_barracks then
31769: LD_VAR 0 9
31773: PPUSH
31774: CALL_OW 266
31778: PUSH
31779: LD_INT 5
31781: EQUAL
31782: IFFALSE 31852
// begin if UnitsInside ( j ) < 3 then
31784: LD_VAR 0 9
31788: PPUSH
31789: CALL_OW 313
31793: PUSH
31794: LD_INT 3
31796: LESS
31797: IFFALSE 31833
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
31799: LD_INT 0
31801: PPUSH
31802: LD_INT 5
31804: PUSH
31805: LD_INT 8
31807: PUSH
31808: LD_INT 9
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: LIST
31815: PUSH
31816: LD_VAR 0 17
31820: ARRAY
31821: PPUSH
31822: LD_VAR 0 4
31826: PPUSH
31827: CALL_OW 380
31831: GO 31850
// PrepareHuman ( false , i , skill ) ;
31833: LD_INT 0
31835: PPUSH
31836: LD_VAR 0 8
31840: PPUSH
31841: LD_VAR 0 4
31845: PPUSH
31846: CALL_OW 380
// end else
31850: GO 31869
// PrepareHuman ( false , i , skill ) ;
31852: LD_INT 0
31854: PPUSH
31855: LD_VAR 0 8
31859: PPUSH
31860: LD_VAR 0 4
31864: PPUSH
31865: CALL_OW 380
// un := CreateHuman ;
31869: LD_ADDR_VAR 0 14
31873: PUSH
31874: CALL_OW 44
31878: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
31879: LD_ADDR_VAR 0 7
31883: PUSH
31884: LD_VAR 0 7
31888: PPUSH
31889: LD_INT 1
31891: PPUSH
31892: LD_VAR 0 14
31896: PPUSH
31897: CALL_OW 2
31901: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
31902: LD_VAR 0 14
31906: PPUSH
31907: LD_VAR 0 9
31911: PPUSH
31912: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
31916: LD_VAR 0 9
31920: PPUSH
31921: CALL_OW 313
31925: PUSH
31926: LD_INT 6
31928: EQUAL
31929: PUSH
31930: LD_VAR 0 9
31934: PPUSH
31935: CALL_OW 266
31939: PUSH
31940: LD_INT 32
31942: PUSH
31943: LD_INT 31
31945: PUSH
31946: EMPTY
31947: LIST
31948: LIST
31949: IN
31950: OR
31951: IFFALSE 31765
31953: GO 31762
31955: POP
31956: POP
// end else
31957: GO 32339
// for j = 1 to x do
31959: LD_ADDR_VAR 0 9
31963: PUSH
31964: DOUBLE
31965: LD_INT 1
31967: DEC
31968: ST_TO_ADDR
31969: LD_VAR 0 13
31973: PUSH
31974: FOR_TO
31975: IFFALSE 32337
// begin InitHc ;
31977: CALL_OW 19
// if not f then
31981: LD_VAR 0 12
31985: NOT
31986: IFFALSE 32075
// begin PrepareHuman ( false , i , skill ) ;
31988: LD_INT 0
31990: PPUSH
31991: LD_VAR 0 8
31995: PPUSH
31996: LD_VAR 0 4
32000: PPUSH
32001: CALL_OW 380
// un := CreateHuman ;
32005: LD_ADDR_VAR 0 14
32009: PUSH
32010: CALL_OW 44
32014: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32015: LD_ADDR_VAR 0 7
32019: PUSH
32020: LD_VAR 0 7
32024: PPUSH
32025: LD_INT 1
32027: PPUSH
32028: LD_VAR 0 14
32032: PPUSH
32033: CALL_OW 2
32037: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32038: LD_VAR 0 14
32042: PPUSH
32043: LD_VAR 0 1
32047: PPUSH
32048: CALL_OW 250
32052: PPUSH
32053: LD_VAR 0 1
32057: PPUSH
32058: CALL_OW 251
32062: PPUSH
32063: LD_INT 10
32065: PPUSH
32066: LD_INT 0
32068: PPUSH
32069: CALL_OW 50
// continue ;
32073: GO 31974
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
32075: LD_VAR 0 12
32079: PUSH
32080: LD_INT 1
32082: ARRAY
32083: PPUSH
32084: CALL_OW 313
32088: PUSH
32089: LD_VAR 0 12
32093: PUSH
32094: LD_INT 1
32096: ARRAY
32097: PPUSH
32098: CALL_OW 266
32102: PUSH
32103: LD_INT 32
32105: PUSH
32106: LD_INT 31
32108: PUSH
32109: EMPTY
32110: LIST
32111: LIST
32112: IN
32113: AND
32114: PUSH
32115: LD_VAR 0 12
32119: PUSH
32120: LD_INT 1
32122: ARRAY
32123: PPUSH
32124: CALL_OW 313
32128: PUSH
32129: LD_INT 6
32131: EQUAL
32132: OR
32133: IFFALSE 32153
// f := Delete ( f , 1 ) ;
32135: LD_ADDR_VAR 0 12
32139: PUSH
32140: LD_VAR 0 12
32144: PPUSH
32145: LD_INT 1
32147: PPUSH
32148: CALL_OW 3
32152: ST_TO_ADDR
// if not f then
32153: LD_VAR 0 12
32157: NOT
32158: IFFALSE 32176
// begin x := x + 2 ;
32160: LD_ADDR_VAR 0 13
32164: PUSH
32165: LD_VAR 0 13
32169: PUSH
32170: LD_INT 2
32172: PLUS
32173: ST_TO_ADDR
// continue ;
32174: GO 31974
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
32176: LD_VAR 0 12
32180: PUSH
32181: LD_INT 1
32183: ARRAY
32184: PPUSH
32185: CALL_OW 266
32189: PUSH
32190: LD_INT 5
32192: EQUAL
32193: IFFALSE 32267
// begin if UnitsInside ( f [ 1 ] ) < 3 then
32195: LD_VAR 0 12
32199: PUSH
32200: LD_INT 1
32202: ARRAY
32203: PPUSH
32204: CALL_OW 313
32208: PUSH
32209: LD_INT 3
32211: LESS
32212: IFFALSE 32248
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32214: LD_INT 0
32216: PPUSH
32217: LD_INT 5
32219: PUSH
32220: LD_INT 8
32222: PUSH
32223: LD_INT 9
32225: PUSH
32226: EMPTY
32227: LIST
32228: LIST
32229: LIST
32230: PUSH
32231: LD_VAR 0 17
32235: ARRAY
32236: PPUSH
32237: LD_VAR 0 4
32241: PPUSH
32242: CALL_OW 380
32246: GO 32265
// PrepareHuman ( false , i , skill ) ;
32248: LD_INT 0
32250: PPUSH
32251: LD_VAR 0 8
32255: PPUSH
32256: LD_VAR 0 4
32260: PPUSH
32261: CALL_OW 380
// end else
32265: GO 32284
// PrepareHuman ( false , i , skill ) ;
32267: LD_INT 0
32269: PPUSH
32270: LD_VAR 0 8
32274: PPUSH
32275: LD_VAR 0 4
32279: PPUSH
32280: CALL_OW 380
// un := CreateHuman ;
32284: LD_ADDR_VAR 0 14
32288: PUSH
32289: CALL_OW 44
32293: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32294: LD_ADDR_VAR 0 7
32298: PUSH
32299: LD_VAR 0 7
32303: PPUSH
32304: LD_INT 1
32306: PPUSH
32307: LD_VAR 0 14
32311: PPUSH
32312: CALL_OW 2
32316: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
32317: LD_VAR 0 14
32321: PPUSH
32322: LD_VAR 0 12
32326: PUSH
32327: LD_INT 1
32329: ARRAY
32330: PPUSH
32331: CALL_OW 52
// end ;
32335: GO 31974
32337: POP
32338: POP
// end ;
32339: GO 31276
32341: POP
32342: POP
// result := result ^ buildings ;
32343: LD_ADDR_VAR 0 7
32347: PUSH
32348: LD_VAR 0 7
32352: PUSH
32353: LD_VAR 0 18
32357: ADD
32358: ST_TO_ADDR
// end else
32359: GO 32502
// begin for i = 1 to personel do
32361: LD_ADDR_VAR 0 8
32365: PUSH
32366: DOUBLE
32367: LD_INT 1
32369: DEC
32370: ST_TO_ADDR
32371: LD_VAR 0 6
32375: PUSH
32376: FOR_TO
32377: IFFALSE 32500
// begin if i > 4 then
32379: LD_VAR 0 8
32383: PUSH
32384: LD_INT 4
32386: GREATER
32387: IFFALSE 32391
// break ;
32389: GO 32500
// x := personel [ i ] ;
32391: LD_ADDR_VAR 0 13
32395: PUSH
32396: LD_VAR 0 6
32400: PUSH
32401: LD_VAR 0 8
32405: ARRAY
32406: ST_TO_ADDR
// if x = - 1 then
32407: LD_VAR 0 13
32411: PUSH
32412: LD_INT 1
32414: NEG
32415: EQUAL
32416: IFFALSE 32420
// continue ;
32418: GO 32376
// PrepareHuman ( false , i , skill ) ;
32420: LD_INT 0
32422: PPUSH
32423: LD_VAR 0 8
32427: PPUSH
32428: LD_VAR 0 4
32432: PPUSH
32433: CALL_OW 380
// un := CreateHuman ;
32437: LD_ADDR_VAR 0 14
32441: PUSH
32442: CALL_OW 44
32446: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32447: LD_VAR 0 14
32451: PPUSH
32452: LD_VAR 0 1
32456: PPUSH
32457: CALL_OW 250
32461: PPUSH
32462: LD_VAR 0 1
32466: PPUSH
32467: CALL_OW 251
32471: PPUSH
32472: LD_INT 10
32474: PPUSH
32475: LD_INT 0
32477: PPUSH
32478: CALL_OW 50
// result := result ^ un ;
32482: LD_ADDR_VAR 0 7
32486: PUSH
32487: LD_VAR 0 7
32491: PUSH
32492: LD_VAR 0 14
32496: ADD
32497: ST_TO_ADDR
// end ;
32498: GO 32376
32500: POP
32501: POP
// end ; end ;
32502: LD_VAR 0 7
32506: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
32507: LD_INT 0
32509: PPUSH
32510: PPUSH
32511: PPUSH
32512: PPUSH
32513: PPUSH
32514: PPUSH
32515: PPUSH
32516: PPUSH
32517: PPUSH
32518: PPUSH
32519: PPUSH
32520: PPUSH
32521: PPUSH
32522: PPUSH
32523: PPUSH
32524: PPUSH
// result := false ;
32525: LD_ADDR_VAR 0 3
32529: PUSH
32530: LD_INT 0
32532: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
32533: LD_VAR 0 1
32537: NOT
32538: PUSH
32539: LD_VAR 0 1
32543: PPUSH
32544: CALL_OW 266
32548: PUSH
32549: LD_INT 32
32551: PUSH
32552: LD_INT 33
32554: PUSH
32555: EMPTY
32556: LIST
32557: LIST
32558: IN
32559: NOT
32560: OR
32561: IFFALSE 32565
// exit ;
32563: GO 33674
// nat := GetNation ( tower ) ;
32565: LD_ADDR_VAR 0 12
32569: PUSH
32570: LD_VAR 0 1
32574: PPUSH
32575: CALL_OW 248
32579: ST_TO_ADDR
// side := GetSide ( tower ) ;
32580: LD_ADDR_VAR 0 16
32584: PUSH
32585: LD_VAR 0 1
32589: PPUSH
32590: CALL_OW 255
32594: ST_TO_ADDR
// x := GetX ( tower ) ;
32595: LD_ADDR_VAR 0 10
32599: PUSH
32600: LD_VAR 0 1
32604: PPUSH
32605: CALL_OW 250
32609: ST_TO_ADDR
// y := GetY ( tower ) ;
32610: LD_ADDR_VAR 0 11
32614: PUSH
32615: LD_VAR 0 1
32619: PPUSH
32620: CALL_OW 251
32624: ST_TO_ADDR
// if not x or not y then
32625: LD_VAR 0 10
32629: NOT
32630: PUSH
32631: LD_VAR 0 11
32635: NOT
32636: OR
32637: IFFALSE 32641
// exit ;
32639: GO 33674
// weapon := 0 ;
32641: LD_ADDR_VAR 0 18
32645: PUSH
32646: LD_INT 0
32648: ST_TO_ADDR
// fac_list := [ ] ;
32649: LD_ADDR_VAR 0 17
32653: PUSH
32654: EMPTY
32655: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
32656: LD_ADDR_VAR 0 6
32660: PUSH
32661: LD_VAR 0 1
32665: PPUSH
32666: CALL_OW 274
32670: PPUSH
32671: LD_VAR 0 2
32675: PPUSH
32676: LD_INT 0
32678: PPUSH
32679: CALL 30245 0 3
32683: PPUSH
32684: LD_INT 30
32686: PUSH
32687: LD_INT 3
32689: PUSH
32690: EMPTY
32691: LIST
32692: LIST
32693: PPUSH
32694: CALL_OW 72
32698: ST_TO_ADDR
// if not factories then
32699: LD_VAR 0 6
32703: NOT
32704: IFFALSE 32708
// exit ;
32706: GO 33674
// for i in factories do
32708: LD_ADDR_VAR 0 8
32712: PUSH
32713: LD_VAR 0 6
32717: PUSH
32718: FOR_IN
32719: IFFALSE 32744
// fac_list := fac_list union AvailableWeaponList ( i ) ;
32721: LD_ADDR_VAR 0 17
32725: PUSH
32726: LD_VAR 0 17
32730: PUSH
32731: LD_VAR 0 8
32735: PPUSH
32736: CALL_OW 478
32740: UNION
32741: ST_TO_ADDR
32742: GO 32718
32744: POP
32745: POP
// if not fac_list then
32746: LD_VAR 0 17
32750: NOT
32751: IFFALSE 32755
// exit ;
32753: GO 33674
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
32755: LD_ADDR_VAR 0 5
32759: PUSH
32760: LD_INT 4
32762: PUSH
32763: LD_INT 5
32765: PUSH
32766: LD_INT 9
32768: PUSH
32769: LD_INT 10
32771: PUSH
32772: LD_INT 6
32774: PUSH
32775: LD_INT 7
32777: PUSH
32778: LD_INT 11
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: LIST
32785: LIST
32786: LIST
32787: LIST
32788: LIST
32789: PUSH
32790: LD_INT 27
32792: PUSH
32793: LD_INT 28
32795: PUSH
32796: LD_INT 26
32798: PUSH
32799: LD_INT 30
32801: PUSH
32802: EMPTY
32803: LIST
32804: LIST
32805: LIST
32806: LIST
32807: PUSH
32808: LD_INT 43
32810: PUSH
32811: LD_INT 44
32813: PUSH
32814: LD_INT 46
32816: PUSH
32817: LD_INT 45
32819: PUSH
32820: LD_INT 47
32822: PUSH
32823: LD_INT 49
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: LIST
32830: LIST
32831: LIST
32832: LIST
32833: PUSH
32834: EMPTY
32835: LIST
32836: LIST
32837: LIST
32838: PUSH
32839: LD_VAR 0 12
32843: ARRAY
32844: ST_TO_ADDR
// list := list isect fac_list ;
32845: LD_ADDR_VAR 0 5
32849: PUSH
32850: LD_VAR 0 5
32854: PUSH
32855: LD_VAR 0 17
32859: ISECT
32860: ST_TO_ADDR
// if not list then
32861: LD_VAR 0 5
32865: NOT
32866: IFFALSE 32870
// exit ;
32868: GO 33674
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
32870: LD_VAR 0 12
32874: PUSH
32875: LD_INT 3
32877: EQUAL
32878: PUSH
32879: LD_INT 49
32881: PUSH
32882: LD_VAR 0 5
32886: IN
32887: AND
32888: PUSH
32889: LD_INT 31
32891: PPUSH
32892: LD_VAR 0 16
32896: PPUSH
32897: CALL_OW 321
32901: PUSH
32902: LD_INT 2
32904: EQUAL
32905: AND
32906: IFFALSE 32966
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
32908: LD_INT 22
32910: PUSH
32911: LD_VAR 0 16
32915: PUSH
32916: EMPTY
32917: LIST
32918: LIST
32919: PUSH
32920: LD_INT 35
32922: PUSH
32923: LD_INT 49
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: PUSH
32930: LD_INT 91
32932: PUSH
32933: LD_VAR 0 1
32937: PUSH
32938: LD_INT 10
32940: PUSH
32941: EMPTY
32942: LIST
32943: LIST
32944: LIST
32945: PUSH
32946: EMPTY
32947: LIST
32948: LIST
32949: LIST
32950: PPUSH
32951: CALL_OW 69
32955: NOT
32956: IFFALSE 32966
// weapon := ru_time_lapser ;
32958: LD_ADDR_VAR 0 18
32962: PUSH
32963: LD_INT 49
32965: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
32966: LD_VAR 0 12
32970: PUSH
32971: LD_INT 1
32973: PUSH
32974: LD_INT 2
32976: PUSH
32977: EMPTY
32978: LIST
32979: LIST
32980: IN
32981: PUSH
32982: LD_INT 11
32984: PUSH
32985: LD_VAR 0 5
32989: IN
32990: PUSH
32991: LD_INT 30
32993: PUSH
32994: LD_VAR 0 5
32998: IN
32999: OR
33000: AND
33001: PUSH
33002: LD_INT 6
33004: PPUSH
33005: LD_VAR 0 16
33009: PPUSH
33010: CALL_OW 321
33014: PUSH
33015: LD_INT 2
33017: EQUAL
33018: AND
33019: IFFALSE 33184
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
33021: LD_INT 22
33023: PUSH
33024: LD_VAR 0 16
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 2
33035: PUSH
33036: LD_INT 35
33038: PUSH
33039: LD_INT 11
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: PUSH
33046: LD_INT 35
33048: PUSH
33049: LD_INT 30
33051: PUSH
33052: EMPTY
33053: LIST
33054: LIST
33055: PUSH
33056: EMPTY
33057: LIST
33058: LIST
33059: LIST
33060: PUSH
33061: LD_INT 91
33063: PUSH
33064: LD_VAR 0 1
33068: PUSH
33069: LD_INT 18
33071: PUSH
33072: EMPTY
33073: LIST
33074: LIST
33075: LIST
33076: PUSH
33077: EMPTY
33078: LIST
33079: LIST
33080: LIST
33081: PPUSH
33082: CALL_OW 69
33086: NOT
33087: PUSH
33088: LD_INT 22
33090: PUSH
33091: LD_VAR 0 16
33095: PUSH
33096: EMPTY
33097: LIST
33098: LIST
33099: PUSH
33100: LD_INT 2
33102: PUSH
33103: LD_INT 30
33105: PUSH
33106: LD_INT 32
33108: PUSH
33109: EMPTY
33110: LIST
33111: LIST
33112: PUSH
33113: LD_INT 30
33115: PUSH
33116: LD_INT 33
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: PUSH
33123: EMPTY
33124: LIST
33125: LIST
33126: LIST
33127: PUSH
33128: LD_INT 91
33130: PUSH
33131: LD_VAR 0 1
33135: PUSH
33136: LD_INT 12
33138: PUSH
33139: EMPTY
33140: LIST
33141: LIST
33142: LIST
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: LIST
33148: PUSH
33149: EMPTY
33150: LIST
33151: PPUSH
33152: CALL_OW 69
33156: PUSH
33157: LD_INT 2
33159: GREATER
33160: AND
33161: IFFALSE 33184
// weapon := [ us_radar , ar_radar ] [ nat ] ;
33163: LD_ADDR_VAR 0 18
33167: PUSH
33168: LD_INT 11
33170: PUSH
33171: LD_INT 30
33173: PUSH
33174: EMPTY
33175: LIST
33176: LIST
33177: PUSH
33178: LD_VAR 0 12
33182: ARRAY
33183: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
33184: LD_VAR 0 18
33188: NOT
33189: PUSH
33190: LD_INT 40
33192: PPUSH
33193: LD_VAR 0 16
33197: PPUSH
33198: CALL_OW 321
33202: PUSH
33203: LD_INT 2
33205: EQUAL
33206: AND
33207: PUSH
33208: LD_INT 7
33210: PUSH
33211: LD_VAR 0 5
33215: IN
33216: PUSH
33217: LD_INT 28
33219: PUSH
33220: LD_VAR 0 5
33224: IN
33225: OR
33226: PUSH
33227: LD_INT 45
33229: PUSH
33230: LD_VAR 0 5
33234: IN
33235: OR
33236: AND
33237: IFFALSE 33491
// begin hex := GetHexInfo ( x , y ) ;
33239: LD_ADDR_VAR 0 4
33243: PUSH
33244: LD_VAR 0 10
33248: PPUSH
33249: LD_VAR 0 11
33253: PPUSH
33254: CALL_OW 546
33258: ST_TO_ADDR
// if hex [ 1 ] then
33259: LD_VAR 0 4
33263: PUSH
33264: LD_INT 1
33266: ARRAY
33267: IFFALSE 33271
// exit ;
33269: GO 33674
// height := hex [ 2 ] ;
33271: LD_ADDR_VAR 0 15
33275: PUSH
33276: LD_VAR 0 4
33280: PUSH
33281: LD_INT 2
33283: ARRAY
33284: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
33285: LD_ADDR_VAR 0 14
33289: PUSH
33290: LD_INT 0
33292: PUSH
33293: LD_INT 2
33295: PUSH
33296: LD_INT 3
33298: PUSH
33299: LD_INT 5
33301: PUSH
33302: EMPTY
33303: LIST
33304: LIST
33305: LIST
33306: LIST
33307: ST_TO_ADDR
// for i in tmp do
33308: LD_ADDR_VAR 0 8
33312: PUSH
33313: LD_VAR 0 14
33317: PUSH
33318: FOR_IN
33319: IFFALSE 33489
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
33321: LD_ADDR_VAR 0 9
33325: PUSH
33326: LD_VAR 0 10
33330: PPUSH
33331: LD_VAR 0 8
33335: PPUSH
33336: LD_INT 5
33338: PPUSH
33339: CALL_OW 272
33343: PUSH
33344: LD_VAR 0 11
33348: PPUSH
33349: LD_VAR 0 8
33353: PPUSH
33354: LD_INT 5
33356: PPUSH
33357: CALL_OW 273
33361: PUSH
33362: EMPTY
33363: LIST
33364: LIST
33365: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
33366: LD_VAR 0 9
33370: PUSH
33371: LD_INT 1
33373: ARRAY
33374: PPUSH
33375: LD_VAR 0 9
33379: PUSH
33380: LD_INT 2
33382: ARRAY
33383: PPUSH
33384: CALL_OW 488
33388: IFFALSE 33487
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
33390: LD_ADDR_VAR 0 4
33394: PUSH
33395: LD_VAR 0 9
33399: PUSH
33400: LD_INT 1
33402: ARRAY
33403: PPUSH
33404: LD_VAR 0 9
33408: PUSH
33409: LD_INT 2
33411: ARRAY
33412: PPUSH
33413: CALL_OW 546
33417: ST_TO_ADDR
// if hex [ 1 ] then
33418: LD_VAR 0 4
33422: PUSH
33423: LD_INT 1
33425: ARRAY
33426: IFFALSE 33430
// continue ;
33428: GO 33318
// h := hex [ 2 ] ;
33430: LD_ADDR_VAR 0 13
33434: PUSH
33435: LD_VAR 0 4
33439: PUSH
33440: LD_INT 2
33442: ARRAY
33443: ST_TO_ADDR
// if h + 7 < height then
33444: LD_VAR 0 13
33448: PUSH
33449: LD_INT 7
33451: PLUS
33452: PUSH
33453: LD_VAR 0 15
33457: LESS
33458: IFFALSE 33487
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
33460: LD_ADDR_VAR 0 18
33464: PUSH
33465: LD_INT 7
33467: PUSH
33468: LD_INT 28
33470: PUSH
33471: LD_INT 45
33473: PUSH
33474: EMPTY
33475: LIST
33476: LIST
33477: LIST
33478: PUSH
33479: LD_VAR 0 12
33483: ARRAY
33484: ST_TO_ADDR
// break ;
33485: GO 33489
// end ; end ; end ;
33487: GO 33318
33489: POP
33490: POP
// end ; if not weapon then
33491: LD_VAR 0 18
33495: NOT
33496: IFFALSE 33556
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
33498: LD_ADDR_VAR 0 5
33502: PUSH
33503: LD_VAR 0 5
33507: PUSH
33508: LD_INT 11
33510: PUSH
33511: LD_INT 30
33513: PUSH
33514: LD_INT 49
33516: PUSH
33517: EMPTY
33518: LIST
33519: LIST
33520: LIST
33521: DIFF
33522: ST_TO_ADDR
// if not list then
33523: LD_VAR 0 5
33527: NOT
33528: IFFALSE 33532
// exit ;
33530: GO 33674
// weapon := list [ rand ( 1 , list ) ] ;
33532: LD_ADDR_VAR 0 18
33536: PUSH
33537: LD_VAR 0 5
33541: PUSH
33542: LD_INT 1
33544: PPUSH
33545: LD_VAR 0 5
33549: PPUSH
33550: CALL_OW 12
33554: ARRAY
33555: ST_TO_ADDR
// end ; if weapon then
33556: LD_VAR 0 18
33560: IFFALSE 33674
// begin tmp := CostOfWeapon ( weapon ) ;
33562: LD_ADDR_VAR 0 14
33566: PUSH
33567: LD_VAR 0 18
33571: PPUSH
33572: CALL_OW 451
33576: ST_TO_ADDR
// j := GetBase ( tower ) ;
33577: LD_ADDR_VAR 0 9
33581: PUSH
33582: LD_VAR 0 1
33586: PPUSH
33587: CALL_OW 274
33591: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
33592: LD_VAR 0 9
33596: PPUSH
33597: LD_INT 1
33599: PPUSH
33600: CALL_OW 275
33604: PUSH
33605: LD_VAR 0 14
33609: PUSH
33610: LD_INT 1
33612: ARRAY
33613: GREATEREQUAL
33614: PUSH
33615: LD_VAR 0 9
33619: PPUSH
33620: LD_INT 2
33622: PPUSH
33623: CALL_OW 275
33627: PUSH
33628: LD_VAR 0 14
33632: PUSH
33633: LD_INT 2
33635: ARRAY
33636: GREATEREQUAL
33637: AND
33638: PUSH
33639: LD_VAR 0 9
33643: PPUSH
33644: LD_INT 3
33646: PPUSH
33647: CALL_OW 275
33651: PUSH
33652: LD_VAR 0 14
33656: PUSH
33657: LD_INT 3
33659: ARRAY
33660: GREATEREQUAL
33661: AND
33662: IFFALSE 33674
// result := weapon ;
33664: LD_ADDR_VAR 0 3
33668: PUSH
33669: LD_VAR 0 18
33673: ST_TO_ADDR
// end ; end ;
33674: LD_VAR 0 3
33678: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
33679: LD_INT 0
33681: PPUSH
33682: PPUSH
// result := true ;
33683: LD_ADDR_VAR 0 3
33687: PUSH
33688: LD_INT 1
33690: ST_TO_ADDR
// if array1 = array2 then
33691: LD_VAR 0 1
33695: PUSH
33696: LD_VAR 0 2
33700: EQUAL
33701: IFFALSE 33761
// begin for i = 1 to array1 do
33703: LD_ADDR_VAR 0 4
33707: PUSH
33708: DOUBLE
33709: LD_INT 1
33711: DEC
33712: ST_TO_ADDR
33713: LD_VAR 0 1
33717: PUSH
33718: FOR_TO
33719: IFFALSE 33757
// if array1 [ i ] <> array2 [ i ] then
33721: LD_VAR 0 1
33725: PUSH
33726: LD_VAR 0 4
33730: ARRAY
33731: PUSH
33732: LD_VAR 0 2
33736: PUSH
33737: LD_VAR 0 4
33741: ARRAY
33742: NONEQUAL
33743: IFFALSE 33755
// begin result := false ;
33745: LD_ADDR_VAR 0 3
33749: PUSH
33750: LD_INT 0
33752: ST_TO_ADDR
// break ;
33753: GO 33757
// end ;
33755: GO 33718
33757: POP
33758: POP
// end else
33759: GO 33769
// result := false ;
33761: LD_ADDR_VAR 0 3
33765: PUSH
33766: LD_INT 0
33768: ST_TO_ADDR
// end ;
33769: LD_VAR 0 3
33773: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
33774: LD_INT 0
33776: PPUSH
33777: PPUSH
// if not array1 or not array2 then
33778: LD_VAR 0 1
33782: NOT
33783: PUSH
33784: LD_VAR 0 2
33788: NOT
33789: OR
33790: IFFALSE 33794
// exit ;
33792: GO 33858
// result := true ;
33794: LD_ADDR_VAR 0 3
33798: PUSH
33799: LD_INT 1
33801: ST_TO_ADDR
// for i = 1 to array1 do
33802: LD_ADDR_VAR 0 4
33806: PUSH
33807: DOUBLE
33808: LD_INT 1
33810: DEC
33811: ST_TO_ADDR
33812: LD_VAR 0 1
33816: PUSH
33817: FOR_TO
33818: IFFALSE 33856
// if array1 [ i ] <> array2 [ i ] then
33820: LD_VAR 0 1
33824: PUSH
33825: LD_VAR 0 4
33829: ARRAY
33830: PUSH
33831: LD_VAR 0 2
33835: PUSH
33836: LD_VAR 0 4
33840: ARRAY
33841: NONEQUAL
33842: IFFALSE 33854
// begin result := false ;
33844: LD_ADDR_VAR 0 3
33848: PUSH
33849: LD_INT 0
33851: ST_TO_ADDR
// break ;
33852: GO 33856
// end ;
33854: GO 33817
33856: POP
33857: POP
// end ;
33858: LD_VAR 0 3
33862: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
33863: LD_INT 0
33865: PPUSH
33866: PPUSH
33867: PPUSH
// pom := GetBase ( fac ) ;
33868: LD_ADDR_VAR 0 5
33872: PUSH
33873: LD_VAR 0 1
33877: PPUSH
33878: CALL_OW 274
33882: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
33883: LD_ADDR_VAR 0 4
33887: PUSH
33888: LD_VAR 0 2
33892: PUSH
33893: LD_INT 1
33895: ARRAY
33896: PPUSH
33897: LD_VAR 0 2
33901: PUSH
33902: LD_INT 2
33904: ARRAY
33905: PPUSH
33906: LD_VAR 0 2
33910: PUSH
33911: LD_INT 3
33913: ARRAY
33914: PPUSH
33915: LD_VAR 0 2
33919: PUSH
33920: LD_INT 4
33922: ARRAY
33923: PPUSH
33924: CALL_OW 449
33928: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
33929: LD_ADDR_VAR 0 3
33933: PUSH
33934: LD_VAR 0 5
33938: PPUSH
33939: LD_INT 1
33941: PPUSH
33942: CALL_OW 275
33946: PUSH
33947: LD_VAR 0 4
33951: PUSH
33952: LD_INT 1
33954: ARRAY
33955: GREATEREQUAL
33956: PUSH
33957: LD_VAR 0 5
33961: PPUSH
33962: LD_INT 2
33964: PPUSH
33965: CALL_OW 275
33969: PUSH
33970: LD_VAR 0 4
33974: PUSH
33975: LD_INT 2
33977: ARRAY
33978: GREATEREQUAL
33979: AND
33980: PUSH
33981: LD_VAR 0 5
33985: PPUSH
33986: LD_INT 3
33988: PPUSH
33989: CALL_OW 275
33993: PUSH
33994: LD_VAR 0 4
33998: PUSH
33999: LD_INT 3
34001: ARRAY
34002: GREATEREQUAL
34003: AND
34004: ST_TO_ADDR
// end ;
34005: LD_VAR 0 3
34009: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
34010: LD_INT 0
34012: PPUSH
34013: PPUSH
34014: PPUSH
34015: PPUSH
// pom := GetBase ( building ) ;
34016: LD_ADDR_VAR 0 3
34020: PUSH
34021: LD_VAR 0 1
34025: PPUSH
34026: CALL_OW 274
34030: ST_TO_ADDR
// if not pom then
34031: LD_VAR 0 3
34035: NOT
34036: IFFALSE 34040
// exit ;
34038: GO 34210
// btype := GetBType ( building ) ;
34040: LD_ADDR_VAR 0 5
34044: PUSH
34045: LD_VAR 0 1
34049: PPUSH
34050: CALL_OW 266
34054: ST_TO_ADDR
// if btype = b_armoury then
34055: LD_VAR 0 5
34059: PUSH
34060: LD_INT 4
34062: EQUAL
34063: IFFALSE 34073
// btype := b_barracks ;
34065: LD_ADDR_VAR 0 5
34069: PUSH
34070: LD_INT 5
34072: ST_TO_ADDR
// if btype = b_depot then
34073: LD_VAR 0 5
34077: PUSH
34078: LD_INT 0
34080: EQUAL
34081: IFFALSE 34091
// btype := b_warehouse ;
34083: LD_ADDR_VAR 0 5
34087: PUSH
34088: LD_INT 1
34090: ST_TO_ADDR
// if btype = b_workshop then
34091: LD_VAR 0 5
34095: PUSH
34096: LD_INT 2
34098: EQUAL
34099: IFFALSE 34109
// btype := b_factory ;
34101: LD_ADDR_VAR 0 5
34105: PUSH
34106: LD_INT 3
34108: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34109: LD_ADDR_VAR 0 4
34113: PUSH
34114: LD_VAR 0 5
34118: PPUSH
34119: LD_VAR 0 1
34123: PPUSH
34124: CALL_OW 248
34128: PPUSH
34129: CALL_OW 450
34133: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34134: LD_ADDR_VAR 0 2
34138: PUSH
34139: LD_VAR 0 3
34143: PPUSH
34144: LD_INT 1
34146: PPUSH
34147: CALL_OW 275
34151: PUSH
34152: LD_VAR 0 4
34156: PUSH
34157: LD_INT 1
34159: ARRAY
34160: GREATEREQUAL
34161: PUSH
34162: LD_VAR 0 3
34166: PPUSH
34167: LD_INT 2
34169: PPUSH
34170: CALL_OW 275
34174: PUSH
34175: LD_VAR 0 4
34179: PUSH
34180: LD_INT 2
34182: ARRAY
34183: GREATEREQUAL
34184: AND
34185: PUSH
34186: LD_VAR 0 3
34190: PPUSH
34191: LD_INT 3
34193: PPUSH
34194: CALL_OW 275
34198: PUSH
34199: LD_VAR 0 4
34203: PUSH
34204: LD_INT 3
34206: ARRAY
34207: GREATEREQUAL
34208: AND
34209: ST_TO_ADDR
// end ;
34210: LD_VAR 0 2
34214: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
34215: LD_INT 0
34217: PPUSH
34218: PPUSH
34219: PPUSH
// pom := GetBase ( building ) ;
34220: LD_ADDR_VAR 0 4
34224: PUSH
34225: LD_VAR 0 1
34229: PPUSH
34230: CALL_OW 274
34234: ST_TO_ADDR
// if not pom then
34235: LD_VAR 0 4
34239: NOT
34240: IFFALSE 34244
// exit ;
34242: GO 34345
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
34244: LD_ADDR_VAR 0 5
34248: PUSH
34249: LD_VAR 0 2
34253: PPUSH
34254: LD_VAR 0 1
34258: PPUSH
34259: CALL_OW 248
34263: PPUSH
34264: CALL_OW 450
34268: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34269: LD_ADDR_VAR 0 3
34273: PUSH
34274: LD_VAR 0 4
34278: PPUSH
34279: LD_INT 1
34281: PPUSH
34282: CALL_OW 275
34286: PUSH
34287: LD_VAR 0 5
34291: PUSH
34292: LD_INT 1
34294: ARRAY
34295: GREATEREQUAL
34296: PUSH
34297: LD_VAR 0 4
34301: PPUSH
34302: LD_INT 2
34304: PPUSH
34305: CALL_OW 275
34309: PUSH
34310: LD_VAR 0 5
34314: PUSH
34315: LD_INT 2
34317: ARRAY
34318: GREATEREQUAL
34319: AND
34320: PUSH
34321: LD_VAR 0 4
34325: PPUSH
34326: LD_INT 3
34328: PPUSH
34329: CALL_OW 275
34333: PUSH
34334: LD_VAR 0 5
34338: PUSH
34339: LD_INT 3
34341: ARRAY
34342: GREATEREQUAL
34343: AND
34344: ST_TO_ADDR
// end ;
34345: LD_VAR 0 3
34349: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
34350: LD_INT 0
34352: PPUSH
34353: PPUSH
34354: PPUSH
34355: PPUSH
34356: PPUSH
34357: PPUSH
34358: PPUSH
34359: PPUSH
34360: PPUSH
34361: PPUSH
34362: PPUSH
// result := false ;
34363: LD_ADDR_VAR 0 8
34367: PUSH
34368: LD_INT 0
34370: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
34371: LD_VAR 0 5
34375: NOT
34376: PUSH
34377: LD_VAR 0 1
34381: NOT
34382: OR
34383: PUSH
34384: LD_VAR 0 2
34388: NOT
34389: OR
34390: PUSH
34391: LD_VAR 0 3
34395: NOT
34396: OR
34397: IFFALSE 34401
// exit ;
34399: GO 35215
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
34401: LD_ADDR_VAR 0 14
34405: PUSH
34406: LD_VAR 0 1
34410: PPUSH
34411: LD_VAR 0 2
34415: PPUSH
34416: LD_VAR 0 3
34420: PPUSH
34421: LD_VAR 0 4
34425: PPUSH
34426: LD_VAR 0 5
34430: PUSH
34431: LD_INT 1
34433: ARRAY
34434: PPUSH
34435: CALL_OW 248
34439: PPUSH
34440: LD_INT 0
34442: PPUSH
34443: CALL 36452 0 6
34447: ST_TO_ADDR
// if not hexes then
34448: LD_VAR 0 14
34452: NOT
34453: IFFALSE 34457
// exit ;
34455: GO 35215
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
34457: LD_ADDR_VAR 0 17
34461: PUSH
34462: LD_VAR 0 5
34466: PPUSH
34467: LD_INT 22
34469: PUSH
34470: LD_VAR 0 13
34474: PPUSH
34475: CALL_OW 255
34479: PUSH
34480: EMPTY
34481: LIST
34482: LIST
34483: PUSH
34484: LD_INT 2
34486: PUSH
34487: LD_INT 30
34489: PUSH
34490: LD_INT 0
34492: PUSH
34493: EMPTY
34494: LIST
34495: LIST
34496: PUSH
34497: LD_INT 30
34499: PUSH
34500: LD_INT 1
34502: PUSH
34503: EMPTY
34504: LIST
34505: LIST
34506: PUSH
34507: EMPTY
34508: LIST
34509: LIST
34510: LIST
34511: PUSH
34512: EMPTY
34513: LIST
34514: LIST
34515: PPUSH
34516: CALL_OW 72
34520: ST_TO_ADDR
// for i = 1 to hexes do
34521: LD_ADDR_VAR 0 9
34525: PUSH
34526: DOUBLE
34527: LD_INT 1
34529: DEC
34530: ST_TO_ADDR
34531: LD_VAR 0 14
34535: PUSH
34536: FOR_TO
34537: IFFALSE 35213
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
34539: LD_ADDR_VAR 0 13
34543: PUSH
34544: LD_VAR 0 14
34548: PUSH
34549: LD_VAR 0 9
34553: ARRAY
34554: PUSH
34555: LD_INT 1
34557: ARRAY
34558: PPUSH
34559: LD_VAR 0 14
34563: PUSH
34564: LD_VAR 0 9
34568: ARRAY
34569: PUSH
34570: LD_INT 2
34572: ARRAY
34573: PPUSH
34574: CALL_OW 428
34578: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
34579: LD_VAR 0 14
34583: PUSH
34584: LD_VAR 0 9
34588: ARRAY
34589: PUSH
34590: LD_INT 1
34592: ARRAY
34593: PPUSH
34594: LD_VAR 0 14
34598: PUSH
34599: LD_VAR 0 9
34603: ARRAY
34604: PUSH
34605: LD_INT 2
34607: ARRAY
34608: PPUSH
34609: CALL_OW 351
34613: PUSH
34614: LD_VAR 0 14
34618: PUSH
34619: LD_VAR 0 9
34623: ARRAY
34624: PUSH
34625: LD_INT 1
34627: ARRAY
34628: PPUSH
34629: LD_VAR 0 14
34633: PUSH
34634: LD_VAR 0 9
34638: ARRAY
34639: PUSH
34640: LD_INT 2
34642: ARRAY
34643: PPUSH
34644: CALL_OW 488
34648: NOT
34649: OR
34650: PUSH
34651: LD_VAR 0 13
34655: PPUSH
34656: CALL_OW 247
34660: PUSH
34661: LD_INT 3
34663: EQUAL
34664: OR
34665: IFFALSE 34671
// exit ;
34667: POP
34668: POP
34669: GO 35215
// if not tmp then
34671: LD_VAR 0 13
34675: NOT
34676: IFFALSE 34680
// continue ;
34678: GO 34536
// result := true ;
34680: LD_ADDR_VAR 0 8
34684: PUSH
34685: LD_INT 1
34687: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
34688: LD_VAR 0 6
34692: PUSH
34693: LD_VAR 0 13
34697: PPUSH
34698: CALL_OW 247
34702: PUSH
34703: LD_INT 2
34705: EQUAL
34706: AND
34707: PUSH
34708: LD_VAR 0 13
34712: PPUSH
34713: CALL_OW 263
34717: PUSH
34718: LD_INT 1
34720: EQUAL
34721: AND
34722: IFFALSE 34886
// begin if IsDrivenBy ( tmp ) then
34724: LD_VAR 0 13
34728: PPUSH
34729: CALL_OW 311
34733: IFFALSE 34737
// continue ;
34735: GO 34536
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
34737: LD_VAR 0 6
34741: PPUSH
34742: LD_INT 3
34744: PUSH
34745: LD_INT 60
34747: PUSH
34748: EMPTY
34749: LIST
34750: PUSH
34751: EMPTY
34752: LIST
34753: LIST
34754: PUSH
34755: LD_INT 3
34757: PUSH
34758: LD_INT 55
34760: PUSH
34761: EMPTY
34762: LIST
34763: PUSH
34764: EMPTY
34765: LIST
34766: LIST
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PPUSH
34772: CALL_OW 72
34776: IFFALSE 34884
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
34778: LD_ADDR_VAR 0 18
34782: PUSH
34783: LD_VAR 0 6
34787: PPUSH
34788: LD_INT 3
34790: PUSH
34791: LD_INT 60
34793: PUSH
34794: EMPTY
34795: LIST
34796: PUSH
34797: EMPTY
34798: LIST
34799: LIST
34800: PUSH
34801: LD_INT 3
34803: PUSH
34804: LD_INT 55
34806: PUSH
34807: EMPTY
34808: LIST
34809: PUSH
34810: EMPTY
34811: LIST
34812: LIST
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PPUSH
34818: CALL_OW 72
34822: PUSH
34823: LD_INT 1
34825: ARRAY
34826: ST_TO_ADDR
// if IsInUnit ( driver ) then
34827: LD_VAR 0 18
34831: PPUSH
34832: CALL_OW 310
34836: IFFALSE 34847
// ComExit ( driver ) ;
34838: LD_VAR 0 18
34842: PPUSH
34843: CALL 59636 0 1
// AddComEnterUnit ( driver , tmp ) ;
34847: LD_VAR 0 18
34851: PPUSH
34852: LD_VAR 0 13
34856: PPUSH
34857: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
34861: LD_VAR 0 18
34865: PPUSH
34866: LD_VAR 0 7
34870: PPUSH
34871: CALL_OW 173
// AddComExitVehicle ( driver ) ;
34875: LD_VAR 0 18
34879: PPUSH
34880: CALL_OW 181
// end ; continue ;
34884: GO 34536
// end ; if not cleaners or not tmp in cleaners then
34886: LD_VAR 0 6
34890: NOT
34891: PUSH
34892: LD_VAR 0 13
34896: PUSH
34897: LD_VAR 0 6
34901: IN
34902: NOT
34903: OR
34904: IFFALSE 35211
// begin if dep then
34906: LD_VAR 0 17
34910: IFFALSE 35046
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
34912: LD_ADDR_VAR 0 16
34916: PUSH
34917: LD_VAR 0 17
34921: PUSH
34922: LD_INT 1
34924: ARRAY
34925: PPUSH
34926: CALL_OW 250
34930: PPUSH
34931: LD_VAR 0 17
34935: PUSH
34936: LD_INT 1
34938: ARRAY
34939: PPUSH
34940: CALL_OW 254
34944: PPUSH
34945: LD_INT 5
34947: PPUSH
34948: CALL_OW 272
34952: PUSH
34953: LD_VAR 0 17
34957: PUSH
34958: LD_INT 1
34960: ARRAY
34961: PPUSH
34962: CALL_OW 251
34966: PPUSH
34967: LD_VAR 0 17
34971: PUSH
34972: LD_INT 1
34974: ARRAY
34975: PPUSH
34976: CALL_OW 254
34980: PPUSH
34981: LD_INT 5
34983: PPUSH
34984: CALL_OW 273
34988: PUSH
34989: EMPTY
34990: LIST
34991: LIST
34992: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
34993: LD_VAR 0 16
34997: PUSH
34998: LD_INT 1
35000: ARRAY
35001: PPUSH
35002: LD_VAR 0 16
35006: PUSH
35007: LD_INT 2
35009: ARRAY
35010: PPUSH
35011: CALL_OW 488
35015: IFFALSE 35046
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
35017: LD_VAR 0 13
35021: PPUSH
35022: LD_VAR 0 16
35026: PUSH
35027: LD_INT 1
35029: ARRAY
35030: PPUSH
35031: LD_VAR 0 16
35035: PUSH
35036: LD_INT 2
35038: ARRAY
35039: PPUSH
35040: CALL_OW 111
// continue ;
35044: GO 34536
// end ; end ; r := GetDir ( tmp ) ;
35046: LD_ADDR_VAR 0 15
35050: PUSH
35051: LD_VAR 0 13
35055: PPUSH
35056: CALL_OW 254
35060: ST_TO_ADDR
// if r = 5 then
35061: LD_VAR 0 15
35065: PUSH
35066: LD_INT 5
35068: EQUAL
35069: IFFALSE 35079
// r := 0 ;
35071: LD_ADDR_VAR 0 15
35075: PUSH
35076: LD_INT 0
35078: ST_TO_ADDR
// for j = r to 5 do
35079: LD_ADDR_VAR 0 10
35083: PUSH
35084: DOUBLE
35085: LD_VAR 0 15
35089: DEC
35090: ST_TO_ADDR
35091: LD_INT 5
35093: PUSH
35094: FOR_TO
35095: IFFALSE 35209
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
35097: LD_ADDR_VAR 0 11
35101: PUSH
35102: LD_VAR 0 13
35106: PPUSH
35107: CALL_OW 250
35111: PPUSH
35112: LD_VAR 0 10
35116: PPUSH
35117: LD_INT 2
35119: PPUSH
35120: CALL_OW 272
35124: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
35125: LD_ADDR_VAR 0 12
35129: PUSH
35130: LD_VAR 0 13
35134: PPUSH
35135: CALL_OW 251
35139: PPUSH
35140: LD_VAR 0 10
35144: PPUSH
35145: LD_INT 2
35147: PPUSH
35148: CALL_OW 273
35152: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
35153: LD_VAR 0 11
35157: PPUSH
35158: LD_VAR 0 12
35162: PPUSH
35163: CALL_OW 488
35167: PUSH
35168: LD_VAR 0 11
35172: PPUSH
35173: LD_VAR 0 12
35177: PPUSH
35178: CALL_OW 428
35182: NOT
35183: AND
35184: IFFALSE 35207
// begin ComMoveXY ( tmp , _x , _y ) ;
35186: LD_VAR 0 13
35190: PPUSH
35191: LD_VAR 0 11
35195: PPUSH
35196: LD_VAR 0 12
35200: PPUSH
35201: CALL_OW 111
// break ;
35205: GO 35209
// end ; end ;
35207: GO 35094
35209: POP
35210: POP
// end ; end ;
35211: GO 34536
35213: POP
35214: POP
// end ;
35215: LD_VAR 0 8
35219: RET
// export function BuildingTechInvented ( side , btype ) ; begin
35220: LD_INT 0
35222: PPUSH
// result := true ;
35223: LD_ADDR_VAR 0 3
35227: PUSH
35228: LD_INT 1
35230: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
35231: LD_VAR 0 2
35235: PUSH
35236: LD_INT 24
35238: DOUBLE
35239: EQUAL
35240: IFTRUE 35250
35242: LD_INT 33
35244: DOUBLE
35245: EQUAL
35246: IFTRUE 35250
35248: GO 35275
35250: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
35251: LD_ADDR_VAR 0 3
35255: PUSH
35256: LD_INT 32
35258: PPUSH
35259: LD_VAR 0 1
35263: PPUSH
35264: CALL_OW 321
35268: PUSH
35269: LD_INT 2
35271: EQUAL
35272: ST_TO_ADDR
35273: GO 35595
35275: LD_INT 20
35277: DOUBLE
35278: EQUAL
35279: IFTRUE 35283
35281: GO 35308
35283: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
35284: LD_ADDR_VAR 0 3
35288: PUSH
35289: LD_INT 6
35291: PPUSH
35292: LD_VAR 0 1
35296: PPUSH
35297: CALL_OW 321
35301: PUSH
35302: LD_INT 2
35304: EQUAL
35305: ST_TO_ADDR
35306: GO 35595
35308: LD_INT 22
35310: DOUBLE
35311: EQUAL
35312: IFTRUE 35322
35314: LD_INT 36
35316: DOUBLE
35317: EQUAL
35318: IFTRUE 35322
35320: GO 35347
35322: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
35323: LD_ADDR_VAR 0 3
35327: PUSH
35328: LD_INT 15
35330: PPUSH
35331: LD_VAR 0 1
35335: PPUSH
35336: CALL_OW 321
35340: PUSH
35341: LD_INT 2
35343: EQUAL
35344: ST_TO_ADDR
35345: GO 35595
35347: LD_INT 30
35349: DOUBLE
35350: EQUAL
35351: IFTRUE 35355
35353: GO 35380
35355: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
35356: LD_ADDR_VAR 0 3
35360: PUSH
35361: LD_INT 20
35363: PPUSH
35364: LD_VAR 0 1
35368: PPUSH
35369: CALL_OW 321
35373: PUSH
35374: LD_INT 2
35376: EQUAL
35377: ST_TO_ADDR
35378: GO 35595
35380: LD_INT 28
35382: DOUBLE
35383: EQUAL
35384: IFTRUE 35394
35386: LD_INT 21
35388: DOUBLE
35389: EQUAL
35390: IFTRUE 35394
35392: GO 35419
35394: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
35395: LD_ADDR_VAR 0 3
35399: PUSH
35400: LD_INT 21
35402: PPUSH
35403: LD_VAR 0 1
35407: PPUSH
35408: CALL_OW 321
35412: PUSH
35413: LD_INT 2
35415: EQUAL
35416: ST_TO_ADDR
35417: GO 35595
35419: LD_INT 16
35421: DOUBLE
35422: EQUAL
35423: IFTRUE 35427
35425: GO 35454
35427: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
35428: LD_ADDR_VAR 0 3
35432: PUSH
35433: LD_EXP 93
35437: PPUSH
35438: LD_VAR 0 1
35442: PPUSH
35443: CALL_OW 321
35447: PUSH
35448: LD_INT 2
35450: EQUAL
35451: ST_TO_ADDR
35452: GO 35595
35454: LD_INT 19
35456: DOUBLE
35457: EQUAL
35458: IFTRUE 35468
35460: LD_INT 23
35462: DOUBLE
35463: EQUAL
35464: IFTRUE 35468
35466: GO 35495
35468: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
35469: LD_ADDR_VAR 0 3
35473: PUSH
35474: LD_EXP 92
35478: PPUSH
35479: LD_VAR 0 1
35483: PPUSH
35484: CALL_OW 321
35488: PUSH
35489: LD_INT 2
35491: EQUAL
35492: ST_TO_ADDR
35493: GO 35595
35495: LD_INT 17
35497: DOUBLE
35498: EQUAL
35499: IFTRUE 35503
35501: GO 35528
35503: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
35504: LD_ADDR_VAR 0 3
35508: PUSH
35509: LD_INT 39
35511: PPUSH
35512: LD_VAR 0 1
35516: PPUSH
35517: CALL_OW 321
35521: PUSH
35522: LD_INT 2
35524: EQUAL
35525: ST_TO_ADDR
35526: GO 35595
35528: LD_INT 18
35530: DOUBLE
35531: EQUAL
35532: IFTRUE 35536
35534: GO 35561
35536: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
35537: LD_ADDR_VAR 0 3
35541: PUSH
35542: LD_INT 40
35544: PPUSH
35545: LD_VAR 0 1
35549: PPUSH
35550: CALL_OW 321
35554: PUSH
35555: LD_INT 2
35557: EQUAL
35558: ST_TO_ADDR
35559: GO 35595
35561: LD_INT 27
35563: DOUBLE
35564: EQUAL
35565: IFTRUE 35569
35567: GO 35594
35569: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
35570: LD_ADDR_VAR 0 3
35574: PUSH
35575: LD_INT 35
35577: PPUSH
35578: LD_VAR 0 1
35582: PPUSH
35583: CALL_OW 321
35587: PUSH
35588: LD_INT 2
35590: EQUAL
35591: ST_TO_ADDR
35592: GO 35595
35594: POP
// end ;
35595: LD_VAR 0 3
35599: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
35600: LD_INT 0
35602: PPUSH
35603: PPUSH
35604: PPUSH
35605: PPUSH
35606: PPUSH
35607: PPUSH
35608: PPUSH
35609: PPUSH
35610: PPUSH
35611: PPUSH
35612: PPUSH
// result := false ;
35613: LD_ADDR_VAR 0 6
35617: PUSH
35618: LD_INT 0
35620: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
35621: LD_VAR 0 1
35625: NOT
35626: PUSH
35627: LD_VAR 0 1
35631: PPUSH
35632: CALL_OW 266
35636: PUSH
35637: LD_INT 0
35639: PUSH
35640: LD_INT 1
35642: PUSH
35643: EMPTY
35644: LIST
35645: LIST
35646: IN
35647: NOT
35648: OR
35649: PUSH
35650: LD_VAR 0 2
35654: NOT
35655: OR
35656: PUSH
35657: LD_VAR 0 5
35661: PUSH
35662: LD_INT 0
35664: PUSH
35665: LD_INT 1
35667: PUSH
35668: LD_INT 2
35670: PUSH
35671: LD_INT 3
35673: PUSH
35674: LD_INT 4
35676: PUSH
35677: LD_INT 5
35679: PUSH
35680: EMPTY
35681: LIST
35682: LIST
35683: LIST
35684: LIST
35685: LIST
35686: LIST
35687: IN
35688: NOT
35689: OR
35690: PUSH
35691: LD_VAR 0 3
35695: PPUSH
35696: LD_VAR 0 4
35700: PPUSH
35701: CALL_OW 488
35705: NOT
35706: OR
35707: IFFALSE 35711
// exit ;
35709: GO 36447
// side := GetSide ( depot ) ;
35711: LD_ADDR_VAR 0 9
35715: PUSH
35716: LD_VAR 0 1
35720: PPUSH
35721: CALL_OW 255
35725: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
35726: LD_VAR 0 9
35730: PPUSH
35731: LD_VAR 0 2
35735: PPUSH
35736: CALL 35220 0 2
35740: NOT
35741: IFFALSE 35745
// exit ;
35743: GO 36447
// pom := GetBase ( depot ) ;
35745: LD_ADDR_VAR 0 10
35749: PUSH
35750: LD_VAR 0 1
35754: PPUSH
35755: CALL_OW 274
35759: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
35760: LD_ADDR_VAR 0 11
35764: PUSH
35765: LD_VAR 0 2
35769: PPUSH
35770: LD_VAR 0 1
35774: PPUSH
35775: CALL_OW 248
35779: PPUSH
35780: CALL_OW 450
35784: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
35785: LD_VAR 0 10
35789: PPUSH
35790: LD_INT 1
35792: PPUSH
35793: CALL_OW 275
35797: PUSH
35798: LD_VAR 0 11
35802: PUSH
35803: LD_INT 1
35805: ARRAY
35806: GREATEREQUAL
35807: PUSH
35808: LD_VAR 0 10
35812: PPUSH
35813: LD_INT 2
35815: PPUSH
35816: CALL_OW 275
35820: PUSH
35821: LD_VAR 0 11
35825: PUSH
35826: LD_INT 2
35828: ARRAY
35829: GREATEREQUAL
35830: AND
35831: PUSH
35832: LD_VAR 0 10
35836: PPUSH
35837: LD_INT 3
35839: PPUSH
35840: CALL_OW 275
35844: PUSH
35845: LD_VAR 0 11
35849: PUSH
35850: LD_INT 3
35852: ARRAY
35853: GREATEREQUAL
35854: AND
35855: NOT
35856: IFFALSE 35860
// exit ;
35858: GO 36447
// if GetBType ( depot ) = b_depot then
35860: LD_VAR 0 1
35864: PPUSH
35865: CALL_OW 266
35869: PUSH
35870: LD_INT 0
35872: EQUAL
35873: IFFALSE 35885
// dist := 28 else
35875: LD_ADDR_VAR 0 14
35879: PUSH
35880: LD_INT 28
35882: ST_TO_ADDR
35883: GO 35893
// dist := 36 ;
35885: LD_ADDR_VAR 0 14
35889: PUSH
35890: LD_INT 36
35892: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
35893: LD_VAR 0 1
35897: PPUSH
35898: LD_VAR 0 3
35902: PPUSH
35903: LD_VAR 0 4
35907: PPUSH
35908: CALL_OW 297
35912: PUSH
35913: LD_VAR 0 14
35917: GREATER
35918: IFFALSE 35922
// exit ;
35920: GO 36447
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
35922: LD_ADDR_VAR 0 12
35926: PUSH
35927: LD_VAR 0 2
35931: PPUSH
35932: LD_VAR 0 3
35936: PPUSH
35937: LD_VAR 0 4
35941: PPUSH
35942: LD_VAR 0 5
35946: PPUSH
35947: LD_VAR 0 1
35951: PPUSH
35952: CALL_OW 248
35956: PPUSH
35957: LD_INT 0
35959: PPUSH
35960: CALL 36452 0 6
35964: ST_TO_ADDR
// if not hexes then
35965: LD_VAR 0 12
35969: NOT
35970: IFFALSE 35974
// exit ;
35972: GO 36447
// hex := GetHexInfo ( x , y ) ;
35974: LD_ADDR_VAR 0 15
35978: PUSH
35979: LD_VAR 0 3
35983: PPUSH
35984: LD_VAR 0 4
35988: PPUSH
35989: CALL_OW 546
35993: ST_TO_ADDR
// if hex [ 1 ] then
35994: LD_VAR 0 15
35998: PUSH
35999: LD_INT 1
36001: ARRAY
36002: IFFALSE 36006
// exit ;
36004: GO 36447
// height := hex [ 2 ] ;
36006: LD_ADDR_VAR 0 13
36010: PUSH
36011: LD_VAR 0 15
36015: PUSH
36016: LD_INT 2
36018: ARRAY
36019: ST_TO_ADDR
// for i = 1 to hexes do
36020: LD_ADDR_VAR 0 7
36024: PUSH
36025: DOUBLE
36026: LD_INT 1
36028: DEC
36029: ST_TO_ADDR
36030: LD_VAR 0 12
36034: PUSH
36035: FOR_TO
36036: IFFALSE 36366
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
36038: LD_VAR 0 12
36042: PUSH
36043: LD_VAR 0 7
36047: ARRAY
36048: PUSH
36049: LD_INT 1
36051: ARRAY
36052: PPUSH
36053: LD_VAR 0 12
36057: PUSH
36058: LD_VAR 0 7
36062: ARRAY
36063: PUSH
36064: LD_INT 2
36066: ARRAY
36067: PPUSH
36068: CALL_OW 488
36072: NOT
36073: PUSH
36074: LD_VAR 0 12
36078: PUSH
36079: LD_VAR 0 7
36083: ARRAY
36084: PUSH
36085: LD_INT 1
36087: ARRAY
36088: PPUSH
36089: LD_VAR 0 12
36093: PUSH
36094: LD_VAR 0 7
36098: ARRAY
36099: PUSH
36100: LD_INT 2
36102: ARRAY
36103: PPUSH
36104: CALL_OW 428
36108: PUSH
36109: LD_INT 0
36111: GREATER
36112: OR
36113: PUSH
36114: LD_VAR 0 12
36118: PUSH
36119: LD_VAR 0 7
36123: ARRAY
36124: PUSH
36125: LD_INT 1
36127: ARRAY
36128: PPUSH
36129: LD_VAR 0 12
36133: PUSH
36134: LD_VAR 0 7
36138: ARRAY
36139: PUSH
36140: LD_INT 2
36142: ARRAY
36143: PPUSH
36144: CALL_OW 351
36148: OR
36149: IFFALSE 36155
// exit ;
36151: POP
36152: POP
36153: GO 36447
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
36155: LD_ADDR_VAR 0 8
36159: PUSH
36160: LD_VAR 0 12
36164: PUSH
36165: LD_VAR 0 7
36169: ARRAY
36170: PUSH
36171: LD_INT 1
36173: ARRAY
36174: PPUSH
36175: LD_VAR 0 12
36179: PUSH
36180: LD_VAR 0 7
36184: ARRAY
36185: PUSH
36186: LD_INT 2
36188: ARRAY
36189: PPUSH
36190: CALL_OW 546
36194: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
36195: LD_VAR 0 8
36199: PUSH
36200: LD_INT 1
36202: ARRAY
36203: PUSH
36204: LD_VAR 0 8
36208: PUSH
36209: LD_INT 2
36211: ARRAY
36212: PUSH
36213: LD_VAR 0 13
36217: PUSH
36218: LD_INT 2
36220: PLUS
36221: GREATER
36222: OR
36223: PUSH
36224: LD_VAR 0 8
36228: PUSH
36229: LD_INT 2
36231: ARRAY
36232: PUSH
36233: LD_VAR 0 13
36237: PUSH
36238: LD_INT 2
36240: MINUS
36241: LESS
36242: OR
36243: PUSH
36244: LD_VAR 0 8
36248: PUSH
36249: LD_INT 3
36251: ARRAY
36252: PUSH
36253: LD_INT 0
36255: PUSH
36256: LD_INT 8
36258: PUSH
36259: LD_INT 9
36261: PUSH
36262: LD_INT 10
36264: PUSH
36265: LD_INT 11
36267: PUSH
36268: LD_INT 12
36270: PUSH
36271: LD_INT 13
36273: PUSH
36274: LD_INT 16
36276: PUSH
36277: LD_INT 17
36279: PUSH
36280: LD_INT 18
36282: PUSH
36283: LD_INT 19
36285: PUSH
36286: LD_INT 20
36288: PUSH
36289: LD_INT 21
36291: PUSH
36292: EMPTY
36293: LIST
36294: LIST
36295: LIST
36296: LIST
36297: LIST
36298: LIST
36299: LIST
36300: LIST
36301: LIST
36302: LIST
36303: LIST
36304: LIST
36305: LIST
36306: IN
36307: NOT
36308: OR
36309: PUSH
36310: LD_VAR 0 8
36314: PUSH
36315: LD_INT 5
36317: ARRAY
36318: NOT
36319: OR
36320: PUSH
36321: LD_VAR 0 8
36325: PUSH
36326: LD_INT 6
36328: ARRAY
36329: PUSH
36330: LD_INT 1
36332: PUSH
36333: LD_INT 2
36335: PUSH
36336: LD_INT 7
36338: PUSH
36339: LD_INT 9
36341: PUSH
36342: LD_INT 10
36344: PUSH
36345: LD_INT 11
36347: PUSH
36348: EMPTY
36349: LIST
36350: LIST
36351: LIST
36352: LIST
36353: LIST
36354: LIST
36355: IN
36356: NOT
36357: OR
36358: IFFALSE 36364
// exit ;
36360: POP
36361: POP
36362: GO 36447
// end ;
36364: GO 36035
36366: POP
36367: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
36368: LD_VAR 0 9
36372: PPUSH
36373: LD_VAR 0 3
36377: PPUSH
36378: LD_VAR 0 4
36382: PPUSH
36383: LD_INT 20
36385: PPUSH
36386: CALL 28393 0 4
36390: PUSH
36391: LD_INT 4
36393: ARRAY
36394: IFFALSE 36398
// exit ;
36396: GO 36447
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
36398: LD_VAR 0 2
36402: PUSH
36403: LD_INT 29
36405: PUSH
36406: LD_INT 30
36408: PUSH
36409: EMPTY
36410: LIST
36411: LIST
36412: IN
36413: PUSH
36414: LD_VAR 0 3
36418: PPUSH
36419: LD_VAR 0 4
36423: PPUSH
36424: LD_VAR 0 9
36428: PPUSH
36429: CALL_OW 440
36433: NOT
36434: AND
36435: IFFALSE 36439
// exit ;
36437: GO 36447
// result := true ;
36439: LD_ADDR_VAR 0 6
36443: PUSH
36444: LD_INT 1
36446: ST_TO_ADDR
// end ;
36447: LD_VAR 0 6
36451: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
36452: LD_INT 0
36454: PPUSH
36455: PPUSH
36456: PPUSH
36457: PPUSH
36458: PPUSH
36459: PPUSH
36460: PPUSH
36461: PPUSH
36462: PPUSH
36463: PPUSH
36464: PPUSH
36465: PPUSH
36466: PPUSH
36467: PPUSH
36468: PPUSH
36469: PPUSH
36470: PPUSH
36471: PPUSH
36472: PPUSH
36473: PPUSH
36474: PPUSH
36475: PPUSH
36476: PPUSH
36477: PPUSH
36478: PPUSH
36479: PPUSH
36480: PPUSH
36481: PPUSH
36482: PPUSH
36483: PPUSH
36484: PPUSH
36485: PPUSH
36486: PPUSH
36487: PPUSH
36488: PPUSH
36489: PPUSH
36490: PPUSH
36491: PPUSH
36492: PPUSH
36493: PPUSH
36494: PPUSH
36495: PPUSH
36496: PPUSH
36497: PPUSH
36498: PPUSH
36499: PPUSH
36500: PPUSH
36501: PPUSH
36502: PPUSH
36503: PPUSH
36504: PPUSH
36505: PPUSH
36506: PPUSH
36507: PPUSH
36508: PPUSH
36509: PPUSH
36510: PPUSH
36511: PPUSH
// result = [ ] ;
36512: LD_ADDR_VAR 0 7
36516: PUSH
36517: EMPTY
36518: ST_TO_ADDR
// temp_list = [ ] ;
36519: LD_ADDR_VAR 0 9
36523: PUSH
36524: EMPTY
36525: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
36526: LD_VAR 0 4
36530: PUSH
36531: LD_INT 0
36533: PUSH
36534: LD_INT 1
36536: PUSH
36537: LD_INT 2
36539: PUSH
36540: LD_INT 3
36542: PUSH
36543: LD_INT 4
36545: PUSH
36546: LD_INT 5
36548: PUSH
36549: EMPTY
36550: LIST
36551: LIST
36552: LIST
36553: LIST
36554: LIST
36555: LIST
36556: IN
36557: NOT
36558: PUSH
36559: LD_VAR 0 1
36563: PUSH
36564: LD_INT 0
36566: PUSH
36567: LD_INT 1
36569: PUSH
36570: EMPTY
36571: LIST
36572: LIST
36573: IN
36574: PUSH
36575: LD_VAR 0 5
36579: PUSH
36580: LD_INT 1
36582: PUSH
36583: LD_INT 2
36585: PUSH
36586: LD_INT 3
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: LIST
36593: IN
36594: NOT
36595: AND
36596: OR
36597: IFFALSE 36601
// exit ;
36599: GO 54992
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
36601: LD_VAR 0 1
36605: PUSH
36606: LD_INT 6
36608: PUSH
36609: LD_INT 7
36611: PUSH
36612: LD_INT 8
36614: PUSH
36615: LD_INT 13
36617: PUSH
36618: LD_INT 12
36620: PUSH
36621: LD_INT 15
36623: PUSH
36624: LD_INT 11
36626: PUSH
36627: LD_INT 14
36629: PUSH
36630: LD_INT 10
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: LIST
36637: LIST
36638: LIST
36639: LIST
36640: LIST
36641: LIST
36642: LIST
36643: IN
36644: IFFALSE 36654
// btype = b_lab ;
36646: LD_ADDR_VAR 0 1
36650: PUSH
36651: LD_INT 6
36653: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
36654: LD_VAR 0 6
36658: PUSH
36659: LD_INT 0
36661: PUSH
36662: LD_INT 1
36664: PUSH
36665: LD_INT 2
36667: PUSH
36668: EMPTY
36669: LIST
36670: LIST
36671: LIST
36672: IN
36673: NOT
36674: PUSH
36675: LD_VAR 0 1
36679: PUSH
36680: LD_INT 0
36682: PUSH
36683: LD_INT 1
36685: PUSH
36686: LD_INT 2
36688: PUSH
36689: LD_INT 3
36691: PUSH
36692: LD_INT 6
36694: PUSH
36695: LD_INT 36
36697: PUSH
36698: LD_INT 4
36700: PUSH
36701: LD_INT 5
36703: PUSH
36704: LD_INT 31
36706: PUSH
36707: LD_INT 32
36709: PUSH
36710: LD_INT 33
36712: PUSH
36713: EMPTY
36714: LIST
36715: LIST
36716: LIST
36717: LIST
36718: LIST
36719: LIST
36720: LIST
36721: LIST
36722: LIST
36723: LIST
36724: LIST
36725: IN
36726: NOT
36727: PUSH
36728: LD_VAR 0 6
36732: PUSH
36733: LD_INT 1
36735: EQUAL
36736: AND
36737: OR
36738: PUSH
36739: LD_VAR 0 1
36743: PUSH
36744: LD_INT 2
36746: PUSH
36747: LD_INT 3
36749: PUSH
36750: EMPTY
36751: LIST
36752: LIST
36753: IN
36754: NOT
36755: PUSH
36756: LD_VAR 0 6
36760: PUSH
36761: LD_INT 2
36763: EQUAL
36764: AND
36765: OR
36766: IFFALSE 36776
// mode = 0 ;
36768: LD_ADDR_VAR 0 6
36772: PUSH
36773: LD_INT 0
36775: ST_TO_ADDR
// case mode of 0 :
36776: LD_VAR 0 6
36780: PUSH
36781: LD_INT 0
36783: DOUBLE
36784: EQUAL
36785: IFTRUE 36789
36787: GO 48242
36789: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
36790: LD_ADDR_VAR 0 11
36794: PUSH
36795: LD_INT 0
36797: PUSH
36798: LD_INT 0
36800: PUSH
36801: EMPTY
36802: LIST
36803: LIST
36804: PUSH
36805: LD_INT 0
36807: PUSH
36808: LD_INT 1
36810: NEG
36811: PUSH
36812: EMPTY
36813: LIST
36814: LIST
36815: PUSH
36816: LD_INT 1
36818: PUSH
36819: LD_INT 0
36821: PUSH
36822: EMPTY
36823: LIST
36824: LIST
36825: PUSH
36826: LD_INT 1
36828: PUSH
36829: LD_INT 1
36831: PUSH
36832: EMPTY
36833: LIST
36834: LIST
36835: PUSH
36836: LD_INT 0
36838: PUSH
36839: LD_INT 1
36841: PUSH
36842: EMPTY
36843: LIST
36844: LIST
36845: PUSH
36846: LD_INT 1
36848: NEG
36849: PUSH
36850: LD_INT 0
36852: PUSH
36853: EMPTY
36854: LIST
36855: LIST
36856: PUSH
36857: LD_INT 1
36859: NEG
36860: PUSH
36861: LD_INT 1
36863: NEG
36864: PUSH
36865: EMPTY
36866: LIST
36867: LIST
36868: PUSH
36869: LD_INT 1
36871: NEG
36872: PUSH
36873: LD_INT 2
36875: NEG
36876: PUSH
36877: EMPTY
36878: LIST
36879: LIST
36880: PUSH
36881: LD_INT 0
36883: PUSH
36884: LD_INT 2
36886: NEG
36887: PUSH
36888: EMPTY
36889: LIST
36890: LIST
36891: PUSH
36892: LD_INT 1
36894: PUSH
36895: LD_INT 1
36897: NEG
36898: PUSH
36899: EMPTY
36900: LIST
36901: LIST
36902: PUSH
36903: LD_INT 1
36905: PUSH
36906: LD_INT 2
36908: PUSH
36909: EMPTY
36910: LIST
36911: LIST
36912: PUSH
36913: LD_INT 0
36915: PUSH
36916: LD_INT 2
36918: PUSH
36919: EMPTY
36920: LIST
36921: LIST
36922: PUSH
36923: LD_INT 1
36925: NEG
36926: PUSH
36927: LD_INT 1
36929: PUSH
36930: EMPTY
36931: LIST
36932: LIST
36933: PUSH
36934: LD_INT 1
36936: PUSH
36937: LD_INT 3
36939: PUSH
36940: EMPTY
36941: LIST
36942: LIST
36943: PUSH
36944: LD_INT 0
36946: PUSH
36947: LD_INT 3
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: PUSH
36954: LD_INT 1
36956: NEG
36957: PUSH
36958: LD_INT 2
36960: PUSH
36961: EMPTY
36962: LIST
36963: LIST
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: LIST
36969: LIST
36970: LIST
36971: LIST
36972: LIST
36973: LIST
36974: LIST
36975: LIST
36976: LIST
36977: LIST
36978: LIST
36979: LIST
36980: LIST
36981: LIST
36982: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36983: LD_ADDR_VAR 0 12
36987: PUSH
36988: LD_INT 0
36990: PUSH
36991: LD_INT 0
36993: PUSH
36994: EMPTY
36995: LIST
36996: LIST
36997: PUSH
36998: LD_INT 0
37000: PUSH
37001: LD_INT 1
37003: NEG
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: PUSH
37009: LD_INT 1
37011: PUSH
37012: LD_INT 0
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: PUSH
37019: LD_INT 1
37021: PUSH
37022: LD_INT 1
37024: PUSH
37025: EMPTY
37026: LIST
37027: LIST
37028: PUSH
37029: LD_INT 0
37031: PUSH
37032: LD_INT 1
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: PUSH
37039: LD_INT 1
37041: NEG
37042: PUSH
37043: LD_INT 0
37045: PUSH
37046: EMPTY
37047: LIST
37048: LIST
37049: PUSH
37050: LD_INT 1
37052: NEG
37053: PUSH
37054: LD_INT 1
37056: NEG
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: PUSH
37062: LD_INT 1
37064: PUSH
37065: LD_INT 1
37067: NEG
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: PUSH
37073: LD_INT 2
37075: PUSH
37076: LD_INT 0
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: PUSH
37083: LD_INT 2
37085: PUSH
37086: LD_INT 1
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: PUSH
37093: LD_INT 1
37095: NEG
37096: PUSH
37097: LD_INT 1
37099: PUSH
37100: EMPTY
37101: LIST
37102: LIST
37103: PUSH
37104: LD_INT 2
37106: NEG
37107: PUSH
37108: LD_INT 0
37110: PUSH
37111: EMPTY
37112: LIST
37113: LIST
37114: PUSH
37115: LD_INT 2
37117: NEG
37118: PUSH
37119: LD_INT 1
37121: NEG
37122: PUSH
37123: EMPTY
37124: LIST
37125: LIST
37126: PUSH
37127: LD_INT 2
37129: NEG
37130: PUSH
37131: LD_INT 1
37133: PUSH
37134: EMPTY
37135: LIST
37136: LIST
37137: PUSH
37138: LD_INT 3
37140: NEG
37141: PUSH
37142: LD_INT 0
37144: PUSH
37145: EMPTY
37146: LIST
37147: LIST
37148: PUSH
37149: LD_INT 3
37151: NEG
37152: PUSH
37153: LD_INT 1
37155: NEG
37156: PUSH
37157: EMPTY
37158: LIST
37159: LIST
37160: PUSH
37161: EMPTY
37162: LIST
37163: LIST
37164: LIST
37165: LIST
37166: LIST
37167: LIST
37168: LIST
37169: LIST
37170: LIST
37171: LIST
37172: LIST
37173: LIST
37174: LIST
37175: LIST
37176: LIST
37177: LIST
37178: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37179: LD_ADDR_VAR 0 13
37183: PUSH
37184: LD_INT 0
37186: PUSH
37187: LD_INT 0
37189: PUSH
37190: EMPTY
37191: LIST
37192: LIST
37193: PUSH
37194: LD_INT 0
37196: PUSH
37197: LD_INT 1
37199: NEG
37200: PUSH
37201: EMPTY
37202: LIST
37203: LIST
37204: PUSH
37205: LD_INT 1
37207: PUSH
37208: LD_INT 0
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: PUSH
37215: LD_INT 1
37217: PUSH
37218: LD_INT 1
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: PUSH
37225: LD_INT 0
37227: PUSH
37228: LD_INT 1
37230: PUSH
37231: EMPTY
37232: LIST
37233: LIST
37234: PUSH
37235: LD_INT 1
37237: NEG
37238: PUSH
37239: LD_INT 0
37241: PUSH
37242: EMPTY
37243: LIST
37244: LIST
37245: PUSH
37246: LD_INT 1
37248: NEG
37249: PUSH
37250: LD_INT 1
37252: NEG
37253: PUSH
37254: EMPTY
37255: LIST
37256: LIST
37257: PUSH
37258: LD_INT 1
37260: NEG
37261: PUSH
37262: LD_INT 2
37264: NEG
37265: PUSH
37266: EMPTY
37267: LIST
37268: LIST
37269: PUSH
37270: LD_INT 2
37272: PUSH
37273: LD_INT 1
37275: PUSH
37276: EMPTY
37277: LIST
37278: LIST
37279: PUSH
37280: LD_INT 2
37282: PUSH
37283: LD_INT 2
37285: PUSH
37286: EMPTY
37287: LIST
37288: LIST
37289: PUSH
37290: LD_INT 1
37292: PUSH
37293: LD_INT 2
37295: PUSH
37296: EMPTY
37297: LIST
37298: LIST
37299: PUSH
37300: LD_INT 2
37302: NEG
37303: PUSH
37304: LD_INT 1
37306: NEG
37307: PUSH
37308: EMPTY
37309: LIST
37310: LIST
37311: PUSH
37312: LD_INT 2
37314: NEG
37315: PUSH
37316: LD_INT 2
37318: NEG
37319: PUSH
37320: EMPTY
37321: LIST
37322: LIST
37323: PUSH
37324: LD_INT 2
37326: NEG
37327: PUSH
37328: LD_INT 3
37330: NEG
37331: PUSH
37332: EMPTY
37333: LIST
37334: LIST
37335: PUSH
37336: LD_INT 3
37338: NEG
37339: PUSH
37340: LD_INT 2
37342: NEG
37343: PUSH
37344: EMPTY
37345: LIST
37346: LIST
37347: PUSH
37348: LD_INT 3
37350: NEG
37351: PUSH
37352: LD_INT 3
37354: NEG
37355: PUSH
37356: EMPTY
37357: LIST
37358: LIST
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: LIST
37364: LIST
37365: LIST
37366: LIST
37367: LIST
37368: LIST
37369: LIST
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: LIST
37377: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37378: LD_ADDR_VAR 0 14
37382: PUSH
37383: LD_INT 0
37385: PUSH
37386: LD_INT 0
37388: PUSH
37389: EMPTY
37390: LIST
37391: LIST
37392: PUSH
37393: LD_INT 0
37395: PUSH
37396: LD_INT 1
37398: NEG
37399: PUSH
37400: EMPTY
37401: LIST
37402: LIST
37403: PUSH
37404: LD_INT 1
37406: PUSH
37407: LD_INT 0
37409: PUSH
37410: EMPTY
37411: LIST
37412: LIST
37413: PUSH
37414: LD_INT 1
37416: PUSH
37417: LD_INT 1
37419: PUSH
37420: EMPTY
37421: LIST
37422: LIST
37423: PUSH
37424: LD_INT 0
37426: PUSH
37427: LD_INT 1
37429: PUSH
37430: EMPTY
37431: LIST
37432: LIST
37433: PUSH
37434: LD_INT 1
37436: NEG
37437: PUSH
37438: LD_INT 0
37440: PUSH
37441: EMPTY
37442: LIST
37443: LIST
37444: PUSH
37445: LD_INT 1
37447: NEG
37448: PUSH
37449: LD_INT 1
37451: NEG
37452: PUSH
37453: EMPTY
37454: LIST
37455: LIST
37456: PUSH
37457: LD_INT 1
37459: NEG
37460: PUSH
37461: LD_INT 2
37463: NEG
37464: PUSH
37465: EMPTY
37466: LIST
37467: LIST
37468: PUSH
37469: LD_INT 0
37471: PUSH
37472: LD_INT 2
37474: NEG
37475: PUSH
37476: EMPTY
37477: LIST
37478: LIST
37479: PUSH
37480: LD_INT 1
37482: PUSH
37483: LD_INT 1
37485: NEG
37486: PUSH
37487: EMPTY
37488: LIST
37489: LIST
37490: PUSH
37491: LD_INT 1
37493: PUSH
37494: LD_INT 2
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: PUSH
37501: LD_INT 0
37503: PUSH
37504: LD_INT 2
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: PUSH
37511: LD_INT 1
37513: NEG
37514: PUSH
37515: LD_INT 1
37517: PUSH
37518: EMPTY
37519: LIST
37520: LIST
37521: PUSH
37522: LD_INT 1
37524: NEG
37525: PUSH
37526: LD_INT 3
37528: NEG
37529: PUSH
37530: EMPTY
37531: LIST
37532: LIST
37533: PUSH
37534: LD_INT 0
37536: PUSH
37537: LD_INT 3
37539: NEG
37540: PUSH
37541: EMPTY
37542: LIST
37543: LIST
37544: PUSH
37545: LD_INT 1
37547: PUSH
37548: LD_INT 2
37550: NEG
37551: PUSH
37552: EMPTY
37553: LIST
37554: LIST
37555: PUSH
37556: EMPTY
37557: LIST
37558: LIST
37559: LIST
37560: LIST
37561: LIST
37562: LIST
37563: LIST
37564: LIST
37565: LIST
37566: LIST
37567: LIST
37568: LIST
37569: LIST
37570: LIST
37571: LIST
37572: LIST
37573: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37574: LD_ADDR_VAR 0 15
37578: PUSH
37579: LD_INT 0
37581: PUSH
37582: LD_INT 0
37584: PUSH
37585: EMPTY
37586: LIST
37587: LIST
37588: PUSH
37589: LD_INT 0
37591: PUSH
37592: LD_INT 1
37594: NEG
37595: PUSH
37596: EMPTY
37597: LIST
37598: LIST
37599: PUSH
37600: LD_INT 1
37602: PUSH
37603: LD_INT 0
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: PUSH
37610: LD_INT 1
37612: PUSH
37613: LD_INT 1
37615: PUSH
37616: EMPTY
37617: LIST
37618: LIST
37619: PUSH
37620: LD_INT 0
37622: PUSH
37623: LD_INT 1
37625: PUSH
37626: EMPTY
37627: LIST
37628: LIST
37629: PUSH
37630: LD_INT 1
37632: NEG
37633: PUSH
37634: LD_INT 0
37636: PUSH
37637: EMPTY
37638: LIST
37639: LIST
37640: PUSH
37641: LD_INT 1
37643: NEG
37644: PUSH
37645: LD_INT 1
37647: NEG
37648: PUSH
37649: EMPTY
37650: LIST
37651: LIST
37652: PUSH
37653: LD_INT 1
37655: PUSH
37656: LD_INT 1
37658: NEG
37659: PUSH
37660: EMPTY
37661: LIST
37662: LIST
37663: PUSH
37664: LD_INT 2
37666: PUSH
37667: LD_INT 0
37669: PUSH
37670: EMPTY
37671: LIST
37672: LIST
37673: PUSH
37674: LD_INT 2
37676: PUSH
37677: LD_INT 1
37679: PUSH
37680: EMPTY
37681: LIST
37682: LIST
37683: PUSH
37684: LD_INT 1
37686: NEG
37687: PUSH
37688: LD_INT 1
37690: PUSH
37691: EMPTY
37692: LIST
37693: LIST
37694: PUSH
37695: LD_INT 2
37697: NEG
37698: PUSH
37699: LD_INT 0
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: PUSH
37706: LD_INT 2
37708: NEG
37709: PUSH
37710: LD_INT 1
37712: NEG
37713: PUSH
37714: EMPTY
37715: LIST
37716: LIST
37717: PUSH
37718: LD_INT 2
37720: PUSH
37721: LD_INT 1
37723: NEG
37724: PUSH
37725: EMPTY
37726: LIST
37727: LIST
37728: PUSH
37729: LD_INT 3
37731: PUSH
37732: LD_INT 0
37734: PUSH
37735: EMPTY
37736: LIST
37737: LIST
37738: PUSH
37739: LD_INT 3
37741: PUSH
37742: LD_INT 1
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: PUSH
37749: EMPTY
37750: LIST
37751: LIST
37752: LIST
37753: LIST
37754: LIST
37755: LIST
37756: LIST
37757: LIST
37758: LIST
37759: LIST
37760: LIST
37761: LIST
37762: LIST
37763: LIST
37764: LIST
37765: LIST
37766: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37767: LD_ADDR_VAR 0 16
37771: PUSH
37772: LD_INT 0
37774: PUSH
37775: LD_INT 0
37777: PUSH
37778: EMPTY
37779: LIST
37780: LIST
37781: PUSH
37782: LD_INT 0
37784: PUSH
37785: LD_INT 1
37787: NEG
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: PUSH
37793: LD_INT 1
37795: PUSH
37796: LD_INT 0
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: PUSH
37803: LD_INT 1
37805: PUSH
37806: LD_INT 1
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: PUSH
37813: LD_INT 0
37815: PUSH
37816: LD_INT 1
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: PUSH
37823: LD_INT 1
37825: NEG
37826: PUSH
37827: LD_INT 0
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: PUSH
37834: LD_INT 1
37836: NEG
37837: PUSH
37838: LD_INT 1
37840: NEG
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: PUSH
37846: LD_INT 1
37848: NEG
37849: PUSH
37850: LD_INT 2
37852: NEG
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: PUSH
37858: LD_INT 2
37860: PUSH
37861: LD_INT 1
37863: PUSH
37864: EMPTY
37865: LIST
37866: LIST
37867: PUSH
37868: LD_INT 2
37870: PUSH
37871: LD_INT 2
37873: PUSH
37874: EMPTY
37875: LIST
37876: LIST
37877: PUSH
37878: LD_INT 1
37880: PUSH
37881: LD_INT 2
37883: PUSH
37884: EMPTY
37885: LIST
37886: LIST
37887: PUSH
37888: LD_INT 2
37890: NEG
37891: PUSH
37892: LD_INT 1
37894: NEG
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: PUSH
37900: LD_INT 2
37902: NEG
37903: PUSH
37904: LD_INT 2
37906: NEG
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: PUSH
37912: LD_INT 3
37914: PUSH
37915: LD_INT 2
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: PUSH
37922: LD_INT 3
37924: PUSH
37925: LD_INT 3
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: PUSH
37932: LD_INT 2
37934: PUSH
37935: LD_INT 3
37937: PUSH
37938: EMPTY
37939: LIST
37940: LIST
37941: PUSH
37942: EMPTY
37943: LIST
37944: LIST
37945: LIST
37946: LIST
37947: LIST
37948: LIST
37949: LIST
37950: LIST
37951: LIST
37952: LIST
37953: LIST
37954: LIST
37955: LIST
37956: LIST
37957: LIST
37958: LIST
37959: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37960: LD_ADDR_VAR 0 17
37964: PUSH
37965: LD_INT 0
37967: PUSH
37968: LD_INT 0
37970: PUSH
37971: EMPTY
37972: LIST
37973: LIST
37974: PUSH
37975: LD_INT 0
37977: PUSH
37978: LD_INT 1
37980: NEG
37981: PUSH
37982: EMPTY
37983: LIST
37984: LIST
37985: PUSH
37986: LD_INT 1
37988: PUSH
37989: LD_INT 0
37991: PUSH
37992: EMPTY
37993: LIST
37994: LIST
37995: PUSH
37996: LD_INT 1
37998: PUSH
37999: LD_INT 1
38001: PUSH
38002: EMPTY
38003: LIST
38004: LIST
38005: PUSH
38006: LD_INT 0
38008: PUSH
38009: LD_INT 1
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: LD_INT 1
38018: NEG
38019: PUSH
38020: LD_INT 0
38022: PUSH
38023: EMPTY
38024: LIST
38025: LIST
38026: PUSH
38027: LD_INT 1
38029: NEG
38030: PUSH
38031: LD_INT 1
38033: NEG
38034: PUSH
38035: EMPTY
38036: LIST
38037: LIST
38038: PUSH
38039: LD_INT 1
38041: NEG
38042: PUSH
38043: LD_INT 2
38045: NEG
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PUSH
38051: LD_INT 0
38053: PUSH
38054: LD_INT 2
38056: NEG
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: LD_INT 1
38064: PUSH
38065: LD_INT 1
38067: NEG
38068: PUSH
38069: EMPTY
38070: LIST
38071: LIST
38072: PUSH
38073: LD_INT 2
38075: PUSH
38076: LD_INT 0
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: PUSH
38083: LD_INT 2
38085: PUSH
38086: LD_INT 1
38088: PUSH
38089: EMPTY
38090: LIST
38091: LIST
38092: PUSH
38093: LD_INT 2
38095: PUSH
38096: LD_INT 2
38098: PUSH
38099: EMPTY
38100: LIST
38101: LIST
38102: PUSH
38103: LD_INT 1
38105: PUSH
38106: LD_INT 2
38108: PUSH
38109: EMPTY
38110: LIST
38111: LIST
38112: PUSH
38113: LD_INT 0
38115: PUSH
38116: LD_INT 2
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: LD_INT 1
38125: NEG
38126: PUSH
38127: LD_INT 1
38129: PUSH
38130: EMPTY
38131: LIST
38132: LIST
38133: PUSH
38134: LD_INT 2
38136: NEG
38137: PUSH
38138: LD_INT 0
38140: PUSH
38141: EMPTY
38142: LIST
38143: LIST
38144: PUSH
38145: LD_INT 2
38147: NEG
38148: PUSH
38149: LD_INT 1
38151: NEG
38152: PUSH
38153: EMPTY
38154: LIST
38155: LIST
38156: PUSH
38157: LD_INT 2
38159: NEG
38160: PUSH
38161: LD_INT 2
38163: NEG
38164: PUSH
38165: EMPTY
38166: LIST
38167: LIST
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38190: LD_ADDR_VAR 0 18
38194: PUSH
38195: LD_INT 0
38197: PUSH
38198: LD_INT 0
38200: PUSH
38201: EMPTY
38202: LIST
38203: LIST
38204: PUSH
38205: LD_INT 0
38207: PUSH
38208: LD_INT 1
38210: NEG
38211: PUSH
38212: EMPTY
38213: LIST
38214: LIST
38215: PUSH
38216: LD_INT 1
38218: PUSH
38219: LD_INT 0
38221: PUSH
38222: EMPTY
38223: LIST
38224: LIST
38225: PUSH
38226: LD_INT 1
38228: PUSH
38229: LD_INT 1
38231: PUSH
38232: EMPTY
38233: LIST
38234: LIST
38235: PUSH
38236: LD_INT 0
38238: PUSH
38239: LD_INT 1
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: PUSH
38246: LD_INT 1
38248: NEG
38249: PUSH
38250: LD_INT 0
38252: PUSH
38253: EMPTY
38254: LIST
38255: LIST
38256: PUSH
38257: LD_INT 1
38259: NEG
38260: PUSH
38261: LD_INT 1
38263: NEG
38264: PUSH
38265: EMPTY
38266: LIST
38267: LIST
38268: PUSH
38269: LD_INT 1
38271: NEG
38272: PUSH
38273: LD_INT 2
38275: NEG
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: PUSH
38281: LD_INT 0
38283: PUSH
38284: LD_INT 2
38286: NEG
38287: PUSH
38288: EMPTY
38289: LIST
38290: LIST
38291: PUSH
38292: LD_INT 1
38294: PUSH
38295: LD_INT 1
38297: NEG
38298: PUSH
38299: EMPTY
38300: LIST
38301: LIST
38302: PUSH
38303: LD_INT 2
38305: PUSH
38306: LD_INT 0
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: PUSH
38313: LD_INT 2
38315: PUSH
38316: LD_INT 1
38318: PUSH
38319: EMPTY
38320: LIST
38321: LIST
38322: PUSH
38323: LD_INT 2
38325: PUSH
38326: LD_INT 2
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: PUSH
38333: LD_INT 1
38335: PUSH
38336: LD_INT 2
38338: PUSH
38339: EMPTY
38340: LIST
38341: LIST
38342: PUSH
38343: LD_INT 0
38345: PUSH
38346: LD_INT 2
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: LD_INT 1
38355: NEG
38356: PUSH
38357: LD_INT 1
38359: PUSH
38360: EMPTY
38361: LIST
38362: LIST
38363: PUSH
38364: LD_INT 2
38366: NEG
38367: PUSH
38368: LD_INT 0
38370: PUSH
38371: EMPTY
38372: LIST
38373: LIST
38374: PUSH
38375: LD_INT 2
38377: NEG
38378: PUSH
38379: LD_INT 1
38381: NEG
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: PUSH
38387: LD_INT 2
38389: NEG
38390: PUSH
38391: LD_INT 2
38393: NEG
38394: PUSH
38395: EMPTY
38396: LIST
38397: LIST
38398: PUSH
38399: EMPTY
38400: LIST
38401: LIST
38402: LIST
38403: LIST
38404: LIST
38405: LIST
38406: LIST
38407: LIST
38408: LIST
38409: LIST
38410: LIST
38411: LIST
38412: LIST
38413: LIST
38414: LIST
38415: LIST
38416: LIST
38417: LIST
38418: LIST
38419: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38420: LD_ADDR_VAR 0 19
38424: PUSH
38425: LD_INT 0
38427: PUSH
38428: LD_INT 0
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: PUSH
38435: LD_INT 0
38437: PUSH
38438: LD_INT 1
38440: NEG
38441: PUSH
38442: EMPTY
38443: LIST
38444: LIST
38445: PUSH
38446: LD_INT 1
38448: PUSH
38449: LD_INT 0
38451: PUSH
38452: EMPTY
38453: LIST
38454: LIST
38455: PUSH
38456: LD_INT 1
38458: PUSH
38459: LD_INT 1
38461: PUSH
38462: EMPTY
38463: LIST
38464: LIST
38465: PUSH
38466: LD_INT 0
38468: PUSH
38469: LD_INT 1
38471: PUSH
38472: EMPTY
38473: LIST
38474: LIST
38475: PUSH
38476: LD_INT 1
38478: NEG
38479: PUSH
38480: LD_INT 0
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: LD_INT 1
38489: NEG
38490: PUSH
38491: LD_INT 1
38493: NEG
38494: PUSH
38495: EMPTY
38496: LIST
38497: LIST
38498: PUSH
38499: LD_INT 1
38501: NEG
38502: PUSH
38503: LD_INT 2
38505: NEG
38506: PUSH
38507: EMPTY
38508: LIST
38509: LIST
38510: PUSH
38511: LD_INT 0
38513: PUSH
38514: LD_INT 2
38516: NEG
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PUSH
38522: LD_INT 1
38524: PUSH
38525: LD_INT 1
38527: NEG
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: PUSH
38533: LD_INT 2
38535: PUSH
38536: LD_INT 0
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PUSH
38543: LD_INT 2
38545: PUSH
38546: LD_INT 1
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: LD_INT 2
38555: PUSH
38556: LD_INT 2
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: LD_INT 1
38565: PUSH
38566: LD_INT 2
38568: PUSH
38569: EMPTY
38570: LIST
38571: LIST
38572: PUSH
38573: LD_INT 0
38575: PUSH
38576: LD_INT 2
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PUSH
38583: LD_INT 1
38585: NEG
38586: PUSH
38587: LD_INT 1
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: PUSH
38594: LD_INT 2
38596: NEG
38597: PUSH
38598: LD_INT 0
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: PUSH
38605: LD_INT 2
38607: NEG
38608: PUSH
38609: LD_INT 1
38611: NEG
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: PUSH
38617: LD_INT 2
38619: NEG
38620: PUSH
38621: LD_INT 2
38623: NEG
38624: PUSH
38625: EMPTY
38626: LIST
38627: LIST
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: LIST
38633: LIST
38634: LIST
38635: LIST
38636: LIST
38637: LIST
38638: LIST
38639: LIST
38640: LIST
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: LIST
38647: LIST
38648: LIST
38649: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38650: LD_ADDR_VAR 0 20
38654: PUSH
38655: LD_INT 0
38657: PUSH
38658: LD_INT 0
38660: PUSH
38661: EMPTY
38662: LIST
38663: LIST
38664: PUSH
38665: LD_INT 0
38667: PUSH
38668: LD_INT 1
38670: NEG
38671: PUSH
38672: EMPTY
38673: LIST
38674: LIST
38675: PUSH
38676: LD_INT 1
38678: PUSH
38679: LD_INT 0
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PUSH
38686: LD_INT 1
38688: PUSH
38689: LD_INT 1
38691: PUSH
38692: EMPTY
38693: LIST
38694: LIST
38695: PUSH
38696: LD_INT 0
38698: PUSH
38699: LD_INT 1
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: PUSH
38706: LD_INT 1
38708: NEG
38709: PUSH
38710: LD_INT 0
38712: PUSH
38713: EMPTY
38714: LIST
38715: LIST
38716: PUSH
38717: LD_INT 1
38719: NEG
38720: PUSH
38721: LD_INT 1
38723: NEG
38724: PUSH
38725: EMPTY
38726: LIST
38727: LIST
38728: PUSH
38729: LD_INT 1
38731: NEG
38732: PUSH
38733: LD_INT 2
38735: NEG
38736: PUSH
38737: EMPTY
38738: LIST
38739: LIST
38740: PUSH
38741: LD_INT 0
38743: PUSH
38744: LD_INT 2
38746: NEG
38747: PUSH
38748: EMPTY
38749: LIST
38750: LIST
38751: PUSH
38752: LD_INT 1
38754: PUSH
38755: LD_INT 1
38757: NEG
38758: PUSH
38759: EMPTY
38760: LIST
38761: LIST
38762: PUSH
38763: LD_INT 2
38765: PUSH
38766: LD_INT 0
38768: PUSH
38769: EMPTY
38770: LIST
38771: LIST
38772: PUSH
38773: LD_INT 2
38775: PUSH
38776: LD_INT 1
38778: PUSH
38779: EMPTY
38780: LIST
38781: LIST
38782: PUSH
38783: LD_INT 2
38785: PUSH
38786: LD_INT 2
38788: PUSH
38789: EMPTY
38790: LIST
38791: LIST
38792: PUSH
38793: LD_INT 1
38795: PUSH
38796: LD_INT 2
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: PUSH
38803: LD_INT 0
38805: PUSH
38806: LD_INT 2
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: PUSH
38813: LD_INT 1
38815: NEG
38816: PUSH
38817: LD_INT 1
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: PUSH
38824: LD_INT 2
38826: NEG
38827: PUSH
38828: LD_INT 0
38830: PUSH
38831: EMPTY
38832: LIST
38833: LIST
38834: PUSH
38835: LD_INT 2
38837: NEG
38838: PUSH
38839: LD_INT 1
38841: NEG
38842: PUSH
38843: EMPTY
38844: LIST
38845: LIST
38846: PUSH
38847: LD_INT 2
38849: NEG
38850: PUSH
38851: LD_INT 2
38853: NEG
38854: PUSH
38855: EMPTY
38856: LIST
38857: LIST
38858: PUSH
38859: EMPTY
38860: LIST
38861: LIST
38862: LIST
38863: LIST
38864: LIST
38865: LIST
38866: LIST
38867: LIST
38868: LIST
38869: LIST
38870: LIST
38871: LIST
38872: LIST
38873: LIST
38874: LIST
38875: LIST
38876: LIST
38877: LIST
38878: LIST
38879: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38880: LD_ADDR_VAR 0 21
38884: PUSH
38885: LD_INT 0
38887: PUSH
38888: LD_INT 0
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: LD_INT 0
38897: PUSH
38898: LD_INT 1
38900: NEG
38901: PUSH
38902: EMPTY
38903: LIST
38904: LIST
38905: PUSH
38906: LD_INT 1
38908: PUSH
38909: LD_INT 0
38911: PUSH
38912: EMPTY
38913: LIST
38914: LIST
38915: PUSH
38916: LD_INT 1
38918: PUSH
38919: LD_INT 1
38921: PUSH
38922: EMPTY
38923: LIST
38924: LIST
38925: PUSH
38926: LD_INT 0
38928: PUSH
38929: LD_INT 1
38931: PUSH
38932: EMPTY
38933: LIST
38934: LIST
38935: PUSH
38936: LD_INT 1
38938: NEG
38939: PUSH
38940: LD_INT 0
38942: PUSH
38943: EMPTY
38944: LIST
38945: LIST
38946: PUSH
38947: LD_INT 1
38949: NEG
38950: PUSH
38951: LD_INT 1
38953: NEG
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: PUSH
38959: LD_INT 1
38961: NEG
38962: PUSH
38963: LD_INT 2
38965: NEG
38966: PUSH
38967: EMPTY
38968: LIST
38969: LIST
38970: PUSH
38971: LD_INT 0
38973: PUSH
38974: LD_INT 2
38976: NEG
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: LD_INT 1
38984: PUSH
38985: LD_INT 1
38987: NEG
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 2
38995: PUSH
38996: LD_INT 0
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 2
39005: PUSH
39006: LD_INT 1
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PUSH
39013: LD_INT 2
39015: PUSH
39016: LD_INT 2
39018: PUSH
39019: EMPTY
39020: LIST
39021: LIST
39022: PUSH
39023: LD_INT 1
39025: PUSH
39026: LD_INT 2
39028: PUSH
39029: EMPTY
39030: LIST
39031: LIST
39032: PUSH
39033: LD_INT 0
39035: PUSH
39036: LD_INT 2
39038: PUSH
39039: EMPTY
39040: LIST
39041: LIST
39042: PUSH
39043: LD_INT 1
39045: NEG
39046: PUSH
39047: LD_INT 1
39049: PUSH
39050: EMPTY
39051: LIST
39052: LIST
39053: PUSH
39054: LD_INT 2
39056: NEG
39057: PUSH
39058: LD_INT 0
39060: PUSH
39061: EMPTY
39062: LIST
39063: LIST
39064: PUSH
39065: LD_INT 2
39067: NEG
39068: PUSH
39069: LD_INT 1
39071: NEG
39072: PUSH
39073: EMPTY
39074: LIST
39075: LIST
39076: PUSH
39077: LD_INT 2
39079: NEG
39080: PUSH
39081: LD_INT 2
39083: NEG
39084: PUSH
39085: EMPTY
39086: LIST
39087: LIST
39088: PUSH
39089: EMPTY
39090: LIST
39091: LIST
39092: LIST
39093: LIST
39094: LIST
39095: LIST
39096: LIST
39097: LIST
39098: LIST
39099: LIST
39100: LIST
39101: LIST
39102: LIST
39103: LIST
39104: LIST
39105: LIST
39106: LIST
39107: LIST
39108: LIST
39109: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39110: LD_ADDR_VAR 0 22
39114: PUSH
39115: LD_INT 0
39117: PUSH
39118: LD_INT 0
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: PUSH
39125: LD_INT 0
39127: PUSH
39128: LD_INT 1
39130: NEG
39131: PUSH
39132: EMPTY
39133: LIST
39134: LIST
39135: PUSH
39136: LD_INT 1
39138: PUSH
39139: LD_INT 0
39141: PUSH
39142: EMPTY
39143: LIST
39144: LIST
39145: PUSH
39146: LD_INT 1
39148: PUSH
39149: LD_INT 1
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: PUSH
39156: LD_INT 0
39158: PUSH
39159: LD_INT 1
39161: PUSH
39162: EMPTY
39163: LIST
39164: LIST
39165: PUSH
39166: LD_INT 1
39168: NEG
39169: PUSH
39170: LD_INT 0
39172: PUSH
39173: EMPTY
39174: LIST
39175: LIST
39176: PUSH
39177: LD_INT 1
39179: NEG
39180: PUSH
39181: LD_INT 1
39183: NEG
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: PUSH
39189: LD_INT 1
39191: NEG
39192: PUSH
39193: LD_INT 2
39195: NEG
39196: PUSH
39197: EMPTY
39198: LIST
39199: LIST
39200: PUSH
39201: LD_INT 0
39203: PUSH
39204: LD_INT 2
39206: NEG
39207: PUSH
39208: EMPTY
39209: LIST
39210: LIST
39211: PUSH
39212: LD_INT 1
39214: PUSH
39215: LD_INT 1
39217: NEG
39218: PUSH
39219: EMPTY
39220: LIST
39221: LIST
39222: PUSH
39223: LD_INT 2
39225: PUSH
39226: LD_INT 0
39228: PUSH
39229: EMPTY
39230: LIST
39231: LIST
39232: PUSH
39233: LD_INT 2
39235: PUSH
39236: LD_INT 1
39238: PUSH
39239: EMPTY
39240: LIST
39241: LIST
39242: PUSH
39243: LD_INT 2
39245: PUSH
39246: LD_INT 2
39248: PUSH
39249: EMPTY
39250: LIST
39251: LIST
39252: PUSH
39253: LD_INT 1
39255: PUSH
39256: LD_INT 2
39258: PUSH
39259: EMPTY
39260: LIST
39261: LIST
39262: PUSH
39263: LD_INT 0
39265: PUSH
39266: LD_INT 2
39268: PUSH
39269: EMPTY
39270: LIST
39271: LIST
39272: PUSH
39273: LD_INT 1
39275: NEG
39276: PUSH
39277: LD_INT 1
39279: PUSH
39280: EMPTY
39281: LIST
39282: LIST
39283: PUSH
39284: LD_INT 2
39286: NEG
39287: PUSH
39288: LD_INT 0
39290: PUSH
39291: EMPTY
39292: LIST
39293: LIST
39294: PUSH
39295: LD_INT 2
39297: NEG
39298: PUSH
39299: LD_INT 1
39301: NEG
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: PUSH
39307: LD_INT 2
39309: NEG
39310: PUSH
39311: LD_INT 2
39313: NEG
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: EMPTY
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: LIST
39339: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
39340: LD_ADDR_VAR 0 23
39344: PUSH
39345: LD_INT 0
39347: PUSH
39348: LD_INT 0
39350: PUSH
39351: EMPTY
39352: LIST
39353: LIST
39354: PUSH
39355: LD_INT 0
39357: PUSH
39358: LD_INT 1
39360: NEG
39361: PUSH
39362: EMPTY
39363: LIST
39364: LIST
39365: PUSH
39366: LD_INT 1
39368: PUSH
39369: LD_INT 0
39371: PUSH
39372: EMPTY
39373: LIST
39374: LIST
39375: PUSH
39376: LD_INT 1
39378: PUSH
39379: LD_INT 1
39381: PUSH
39382: EMPTY
39383: LIST
39384: LIST
39385: PUSH
39386: LD_INT 0
39388: PUSH
39389: LD_INT 1
39391: PUSH
39392: EMPTY
39393: LIST
39394: LIST
39395: PUSH
39396: LD_INT 1
39398: NEG
39399: PUSH
39400: LD_INT 0
39402: PUSH
39403: EMPTY
39404: LIST
39405: LIST
39406: PUSH
39407: LD_INT 1
39409: NEG
39410: PUSH
39411: LD_INT 1
39413: NEG
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: LD_INT 1
39421: NEG
39422: PUSH
39423: LD_INT 2
39425: NEG
39426: PUSH
39427: EMPTY
39428: LIST
39429: LIST
39430: PUSH
39431: LD_INT 0
39433: PUSH
39434: LD_INT 2
39436: NEG
39437: PUSH
39438: EMPTY
39439: LIST
39440: LIST
39441: PUSH
39442: LD_INT 1
39444: PUSH
39445: LD_INT 1
39447: NEG
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: PUSH
39453: LD_INT 2
39455: PUSH
39456: LD_INT 0
39458: PUSH
39459: EMPTY
39460: LIST
39461: LIST
39462: PUSH
39463: LD_INT 2
39465: PUSH
39466: LD_INT 1
39468: PUSH
39469: EMPTY
39470: LIST
39471: LIST
39472: PUSH
39473: LD_INT 2
39475: PUSH
39476: LD_INT 2
39478: PUSH
39479: EMPTY
39480: LIST
39481: LIST
39482: PUSH
39483: LD_INT 1
39485: PUSH
39486: LD_INT 2
39488: PUSH
39489: EMPTY
39490: LIST
39491: LIST
39492: PUSH
39493: LD_INT 0
39495: PUSH
39496: LD_INT 2
39498: PUSH
39499: EMPTY
39500: LIST
39501: LIST
39502: PUSH
39503: LD_INT 1
39505: NEG
39506: PUSH
39507: LD_INT 1
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: PUSH
39514: LD_INT 2
39516: NEG
39517: PUSH
39518: LD_INT 0
39520: PUSH
39521: EMPTY
39522: LIST
39523: LIST
39524: PUSH
39525: LD_INT 2
39527: NEG
39528: PUSH
39529: LD_INT 1
39531: NEG
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PUSH
39537: LD_INT 2
39539: NEG
39540: PUSH
39541: LD_INT 2
39543: NEG
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PUSH
39549: LD_INT 2
39551: NEG
39552: PUSH
39553: LD_INT 3
39555: NEG
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PUSH
39561: LD_INT 1
39563: NEG
39564: PUSH
39565: LD_INT 3
39567: NEG
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 1
39575: PUSH
39576: LD_INT 2
39578: NEG
39579: PUSH
39580: EMPTY
39581: LIST
39582: LIST
39583: PUSH
39584: LD_INT 2
39586: PUSH
39587: LD_INT 1
39589: NEG
39590: PUSH
39591: EMPTY
39592: LIST
39593: LIST
39594: PUSH
39595: EMPTY
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: LIST
39617: LIST
39618: LIST
39619: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
39620: LD_ADDR_VAR 0 24
39624: PUSH
39625: LD_INT 0
39627: PUSH
39628: LD_INT 0
39630: PUSH
39631: EMPTY
39632: LIST
39633: LIST
39634: PUSH
39635: LD_INT 0
39637: PUSH
39638: LD_INT 1
39640: NEG
39641: PUSH
39642: EMPTY
39643: LIST
39644: LIST
39645: PUSH
39646: LD_INT 1
39648: PUSH
39649: LD_INT 0
39651: PUSH
39652: EMPTY
39653: LIST
39654: LIST
39655: PUSH
39656: LD_INT 1
39658: PUSH
39659: LD_INT 1
39661: PUSH
39662: EMPTY
39663: LIST
39664: LIST
39665: PUSH
39666: LD_INT 0
39668: PUSH
39669: LD_INT 1
39671: PUSH
39672: EMPTY
39673: LIST
39674: LIST
39675: PUSH
39676: LD_INT 1
39678: NEG
39679: PUSH
39680: LD_INT 0
39682: PUSH
39683: EMPTY
39684: LIST
39685: LIST
39686: PUSH
39687: LD_INT 1
39689: NEG
39690: PUSH
39691: LD_INT 1
39693: NEG
39694: PUSH
39695: EMPTY
39696: LIST
39697: LIST
39698: PUSH
39699: LD_INT 1
39701: NEG
39702: PUSH
39703: LD_INT 2
39705: NEG
39706: PUSH
39707: EMPTY
39708: LIST
39709: LIST
39710: PUSH
39711: LD_INT 0
39713: PUSH
39714: LD_INT 2
39716: NEG
39717: PUSH
39718: EMPTY
39719: LIST
39720: LIST
39721: PUSH
39722: LD_INT 1
39724: PUSH
39725: LD_INT 1
39727: NEG
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: LD_INT 2
39735: PUSH
39736: LD_INT 0
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 2
39745: PUSH
39746: LD_INT 1
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: PUSH
39753: LD_INT 2
39755: PUSH
39756: LD_INT 2
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: PUSH
39763: LD_INT 1
39765: PUSH
39766: LD_INT 2
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: LD_INT 0
39775: PUSH
39776: LD_INT 2
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: PUSH
39783: LD_INT 1
39785: NEG
39786: PUSH
39787: LD_INT 1
39789: PUSH
39790: EMPTY
39791: LIST
39792: LIST
39793: PUSH
39794: LD_INT 2
39796: NEG
39797: PUSH
39798: LD_INT 0
39800: PUSH
39801: EMPTY
39802: LIST
39803: LIST
39804: PUSH
39805: LD_INT 2
39807: NEG
39808: PUSH
39809: LD_INT 1
39811: NEG
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: PUSH
39817: LD_INT 2
39819: NEG
39820: PUSH
39821: LD_INT 2
39823: NEG
39824: PUSH
39825: EMPTY
39826: LIST
39827: LIST
39828: PUSH
39829: LD_INT 1
39831: PUSH
39832: LD_INT 2
39834: NEG
39835: PUSH
39836: EMPTY
39837: LIST
39838: LIST
39839: PUSH
39840: LD_INT 2
39842: PUSH
39843: LD_INT 1
39845: NEG
39846: PUSH
39847: EMPTY
39848: LIST
39849: LIST
39850: PUSH
39851: LD_INT 3
39853: PUSH
39854: LD_INT 1
39856: PUSH
39857: EMPTY
39858: LIST
39859: LIST
39860: PUSH
39861: LD_INT 3
39863: PUSH
39864: LD_INT 2
39866: PUSH
39867: EMPTY
39868: LIST
39869: LIST
39870: PUSH
39871: EMPTY
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: LIST
39888: LIST
39889: LIST
39890: LIST
39891: LIST
39892: LIST
39893: LIST
39894: LIST
39895: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
39896: LD_ADDR_VAR 0 25
39900: PUSH
39901: LD_INT 0
39903: PUSH
39904: LD_INT 0
39906: PUSH
39907: EMPTY
39908: LIST
39909: LIST
39910: PUSH
39911: LD_INT 0
39913: PUSH
39914: LD_INT 1
39916: NEG
39917: PUSH
39918: EMPTY
39919: LIST
39920: LIST
39921: PUSH
39922: LD_INT 1
39924: PUSH
39925: LD_INT 0
39927: PUSH
39928: EMPTY
39929: LIST
39930: LIST
39931: PUSH
39932: LD_INT 1
39934: PUSH
39935: LD_INT 1
39937: PUSH
39938: EMPTY
39939: LIST
39940: LIST
39941: PUSH
39942: LD_INT 0
39944: PUSH
39945: LD_INT 1
39947: PUSH
39948: EMPTY
39949: LIST
39950: LIST
39951: PUSH
39952: LD_INT 1
39954: NEG
39955: PUSH
39956: LD_INT 0
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PUSH
39963: LD_INT 1
39965: NEG
39966: PUSH
39967: LD_INT 1
39969: NEG
39970: PUSH
39971: EMPTY
39972: LIST
39973: LIST
39974: PUSH
39975: LD_INT 1
39977: NEG
39978: PUSH
39979: LD_INT 2
39981: NEG
39982: PUSH
39983: EMPTY
39984: LIST
39985: LIST
39986: PUSH
39987: LD_INT 0
39989: PUSH
39990: LD_INT 2
39992: NEG
39993: PUSH
39994: EMPTY
39995: LIST
39996: LIST
39997: PUSH
39998: LD_INT 1
40000: PUSH
40001: LD_INT 1
40003: NEG
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 2
40011: PUSH
40012: LD_INT 0
40014: PUSH
40015: EMPTY
40016: LIST
40017: LIST
40018: PUSH
40019: LD_INT 2
40021: PUSH
40022: LD_INT 1
40024: PUSH
40025: EMPTY
40026: LIST
40027: LIST
40028: PUSH
40029: LD_INT 2
40031: PUSH
40032: LD_INT 2
40034: PUSH
40035: EMPTY
40036: LIST
40037: LIST
40038: PUSH
40039: LD_INT 1
40041: PUSH
40042: LD_INT 2
40044: PUSH
40045: EMPTY
40046: LIST
40047: LIST
40048: PUSH
40049: LD_INT 0
40051: PUSH
40052: LD_INT 2
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: LD_INT 1
40061: NEG
40062: PUSH
40063: LD_INT 1
40065: PUSH
40066: EMPTY
40067: LIST
40068: LIST
40069: PUSH
40070: LD_INT 2
40072: NEG
40073: PUSH
40074: LD_INT 0
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PUSH
40081: LD_INT 2
40083: NEG
40084: PUSH
40085: LD_INT 1
40087: NEG
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 2
40095: NEG
40096: PUSH
40097: LD_INT 2
40099: NEG
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 3
40107: PUSH
40108: LD_INT 1
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: LD_INT 3
40117: PUSH
40118: LD_INT 2
40120: PUSH
40121: EMPTY
40122: LIST
40123: LIST
40124: PUSH
40125: LD_INT 2
40127: PUSH
40128: LD_INT 3
40130: PUSH
40131: EMPTY
40132: LIST
40133: LIST
40134: PUSH
40135: LD_INT 1
40137: PUSH
40138: LD_INT 3
40140: PUSH
40141: EMPTY
40142: LIST
40143: LIST
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: LIST
40149: LIST
40150: LIST
40151: LIST
40152: LIST
40153: LIST
40154: LIST
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: LIST
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: LIST
40168: LIST
40169: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
40170: LD_ADDR_VAR 0 26
40174: PUSH
40175: LD_INT 0
40177: PUSH
40178: LD_INT 0
40180: PUSH
40181: EMPTY
40182: LIST
40183: LIST
40184: PUSH
40185: LD_INT 0
40187: PUSH
40188: LD_INT 1
40190: NEG
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: LD_INT 1
40198: PUSH
40199: LD_INT 0
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 1
40208: PUSH
40209: LD_INT 1
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: LD_INT 0
40218: PUSH
40219: LD_INT 1
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: PUSH
40226: LD_INT 1
40228: NEG
40229: PUSH
40230: LD_INT 0
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: PUSH
40237: LD_INT 1
40239: NEG
40240: PUSH
40241: LD_INT 1
40243: NEG
40244: PUSH
40245: EMPTY
40246: LIST
40247: LIST
40248: PUSH
40249: LD_INT 1
40251: NEG
40252: PUSH
40253: LD_INT 2
40255: NEG
40256: PUSH
40257: EMPTY
40258: LIST
40259: LIST
40260: PUSH
40261: LD_INT 0
40263: PUSH
40264: LD_INT 2
40266: NEG
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 1
40274: PUSH
40275: LD_INT 1
40277: NEG
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 2
40285: PUSH
40286: LD_INT 0
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 2
40295: PUSH
40296: LD_INT 1
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 2
40305: PUSH
40306: LD_INT 2
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 1
40315: PUSH
40316: LD_INT 2
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 0
40325: PUSH
40326: LD_INT 2
40328: PUSH
40329: EMPTY
40330: LIST
40331: LIST
40332: PUSH
40333: LD_INT 1
40335: NEG
40336: PUSH
40337: LD_INT 1
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 2
40346: NEG
40347: PUSH
40348: LD_INT 0
40350: PUSH
40351: EMPTY
40352: LIST
40353: LIST
40354: PUSH
40355: LD_INT 2
40357: NEG
40358: PUSH
40359: LD_INT 1
40361: NEG
40362: PUSH
40363: EMPTY
40364: LIST
40365: LIST
40366: PUSH
40367: LD_INT 2
40369: NEG
40370: PUSH
40371: LD_INT 2
40373: NEG
40374: PUSH
40375: EMPTY
40376: LIST
40377: LIST
40378: PUSH
40379: LD_INT 2
40381: PUSH
40382: LD_INT 3
40384: PUSH
40385: EMPTY
40386: LIST
40387: LIST
40388: PUSH
40389: LD_INT 1
40391: PUSH
40392: LD_INT 3
40394: PUSH
40395: EMPTY
40396: LIST
40397: LIST
40398: PUSH
40399: LD_INT 1
40401: NEG
40402: PUSH
40403: LD_INT 2
40405: PUSH
40406: EMPTY
40407: LIST
40408: LIST
40409: PUSH
40410: LD_INT 2
40412: NEG
40413: PUSH
40414: LD_INT 1
40416: PUSH
40417: EMPTY
40418: LIST
40419: LIST
40420: PUSH
40421: EMPTY
40422: LIST
40423: LIST
40424: LIST
40425: LIST
40426: LIST
40427: LIST
40428: LIST
40429: LIST
40430: LIST
40431: LIST
40432: LIST
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40446: LD_ADDR_VAR 0 27
40450: PUSH
40451: LD_INT 0
40453: PUSH
40454: LD_INT 0
40456: PUSH
40457: EMPTY
40458: LIST
40459: LIST
40460: PUSH
40461: LD_INT 0
40463: PUSH
40464: LD_INT 1
40466: NEG
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PUSH
40472: LD_INT 1
40474: PUSH
40475: LD_INT 0
40477: PUSH
40478: EMPTY
40479: LIST
40480: LIST
40481: PUSH
40482: LD_INT 1
40484: PUSH
40485: LD_INT 1
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PUSH
40492: LD_INT 0
40494: PUSH
40495: LD_INT 1
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: LD_INT 1
40504: NEG
40505: PUSH
40506: LD_INT 0
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: PUSH
40513: LD_INT 1
40515: NEG
40516: PUSH
40517: LD_INT 1
40519: NEG
40520: PUSH
40521: EMPTY
40522: LIST
40523: LIST
40524: PUSH
40525: LD_INT 1
40527: NEG
40528: PUSH
40529: LD_INT 2
40531: NEG
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 0
40539: PUSH
40540: LD_INT 2
40542: NEG
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: PUSH
40548: LD_INT 1
40550: PUSH
40551: LD_INT 1
40553: NEG
40554: PUSH
40555: EMPTY
40556: LIST
40557: LIST
40558: PUSH
40559: LD_INT 2
40561: PUSH
40562: LD_INT 0
40564: PUSH
40565: EMPTY
40566: LIST
40567: LIST
40568: PUSH
40569: LD_INT 2
40571: PUSH
40572: LD_INT 1
40574: PUSH
40575: EMPTY
40576: LIST
40577: LIST
40578: PUSH
40579: LD_INT 2
40581: PUSH
40582: LD_INT 2
40584: PUSH
40585: EMPTY
40586: LIST
40587: LIST
40588: PUSH
40589: LD_INT 1
40591: PUSH
40592: LD_INT 2
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: PUSH
40599: LD_INT 0
40601: PUSH
40602: LD_INT 2
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: PUSH
40609: LD_INT 1
40611: NEG
40612: PUSH
40613: LD_INT 1
40615: PUSH
40616: EMPTY
40617: LIST
40618: LIST
40619: PUSH
40620: LD_INT 2
40622: NEG
40623: PUSH
40624: LD_INT 0
40626: PUSH
40627: EMPTY
40628: LIST
40629: LIST
40630: PUSH
40631: LD_INT 2
40633: NEG
40634: PUSH
40635: LD_INT 1
40637: NEG
40638: PUSH
40639: EMPTY
40640: LIST
40641: LIST
40642: PUSH
40643: LD_INT 2
40645: NEG
40646: PUSH
40647: LD_INT 2
40649: NEG
40650: PUSH
40651: EMPTY
40652: LIST
40653: LIST
40654: PUSH
40655: LD_INT 1
40657: NEG
40658: PUSH
40659: LD_INT 2
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: LD_INT 2
40668: NEG
40669: PUSH
40670: LD_INT 1
40672: PUSH
40673: EMPTY
40674: LIST
40675: LIST
40676: PUSH
40677: LD_INT 3
40679: NEG
40680: PUSH
40681: LD_INT 1
40683: NEG
40684: PUSH
40685: EMPTY
40686: LIST
40687: LIST
40688: PUSH
40689: LD_INT 3
40691: NEG
40692: PUSH
40693: LD_INT 2
40695: NEG
40696: PUSH
40697: EMPTY
40698: LIST
40699: LIST
40700: PUSH
40701: EMPTY
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: LIST
40707: LIST
40708: LIST
40709: LIST
40710: LIST
40711: LIST
40712: LIST
40713: LIST
40714: LIST
40715: LIST
40716: LIST
40717: LIST
40718: LIST
40719: LIST
40720: LIST
40721: LIST
40722: LIST
40723: LIST
40724: LIST
40725: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
40726: LD_ADDR_VAR 0 28
40730: PUSH
40731: LD_INT 0
40733: PUSH
40734: LD_INT 0
40736: PUSH
40737: EMPTY
40738: LIST
40739: LIST
40740: PUSH
40741: LD_INT 0
40743: PUSH
40744: LD_INT 1
40746: NEG
40747: PUSH
40748: EMPTY
40749: LIST
40750: LIST
40751: PUSH
40752: LD_INT 1
40754: PUSH
40755: LD_INT 0
40757: PUSH
40758: EMPTY
40759: LIST
40760: LIST
40761: PUSH
40762: LD_INT 1
40764: PUSH
40765: LD_INT 1
40767: PUSH
40768: EMPTY
40769: LIST
40770: LIST
40771: PUSH
40772: LD_INT 0
40774: PUSH
40775: LD_INT 1
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PUSH
40782: LD_INT 1
40784: NEG
40785: PUSH
40786: LD_INT 0
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 1
40795: NEG
40796: PUSH
40797: LD_INT 1
40799: NEG
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: LD_INT 1
40807: NEG
40808: PUSH
40809: LD_INT 2
40811: NEG
40812: PUSH
40813: EMPTY
40814: LIST
40815: LIST
40816: PUSH
40817: LD_INT 0
40819: PUSH
40820: LD_INT 2
40822: NEG
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: PUSH
40828: LD_INT 1
40830: PUSH
40831: LD_INT 1
40833: NEG
40834: PUSH
40835: EMPTY
40836: LIST
40837: LIST
40838: PUSH
40839: LD_INT 2
40841: PUSH
40842: LD_INT 0
40844: PUSH
40845: EMPTY
40846: LIST
40847: LIST
40848: PUSH
40849: LD_INT 2
40851: PUSH
40852: LD_INT 1
40854: PUSH
40855: EMPTY
40856: LIST
40857: LIST
40858: PUSH
40859: LD_INT 2
40861: PUSH
40862: LD_INT 2
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PUSH
40869: LD_INT 1
40871: PUSH
40872: LD_INT 2
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: PUSH
40879: LD_INT 0
40881: PUSH
40882: LD_INT 2
40884: PUSH
40885: EMPTY
40886: LIST
40887: LIST
40888: PUSH
40889: LD_INT 1
40891: NEG
40892: PUSH
40893: LD_INT 1
40895: PUSH
40896: EMPTY
40897: LIST
40898: LIST
40899: PUSH
40900: LD_INT 2
40902: NEG
40903: PUSH
40904: LD_INT 0
40906: PUSH
40907: EMPTY
40908: LIST
40909: LIST
40910: PUSH
40911: LD_INT 2
40913: NEG
40914: PUSH
40915: LD_INT 1
40917: NEG
40918: PUSH
40919: EMPTY
40920: LIST
40921: LIST
40922: PUSH
40923: LD_INT 2
40925: NEG
40926: PUSH
40927: LD_INT 2
40929: NEG
40930: PUSH
40931: EMPTY
40932: LIST
40933: LIST
40934: PUSH
40935: LD_INT 2
40937: NEG
40938: PUSH
40939: LD_INT 3
40941: NEG
40942: PUSH
40943: EMPTY
40944: LIST
40945: LIST
40946: PUSH
40947: LD_INT 1
40949: NEG
40950: PUSH
40951: LD_INT 3
40953: NEG
40954: PUSH
40955: EMPTY
40956: LIST
40957: LIST
40958: PUSH
40959: LD_INT 3
40961: NEG
40962: PUSH
40963: LD_INT 1
40965: NEG
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PUSH
40971: LD_INT 3
40973: NEG
40974: PUSH
40975: LD_INT 2
40977: NEG
40978: PUSH
40979: EMPTY
40980: LIST
40981: LIST
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: LIST
40987: LIST
40988: LIST
40989: LIST
40990: LIST
40991: LIST
40992: LIST
40993: LIST
40994: LIST
40995: LIST
40996: LIST
40997: LIST
40998: LIST
40999: LIST
41000: LIST
41001: LIST
41002: LIST
41003: LIST
41004: LIST
41005: LIST
41006: LIST
41007: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41008: LD_ADDR_VAR 0 29
41012: PUSH
41013: LD_INT 0
41015: PUSH
41016: LD_INT 0
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 0
41025: PUSH
41026: LD_INT 1
41028: NEG
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 1
41036: PUSH
41037: LD_INT 0
41039: PUSH
41040: EMPTY
41041: LIST
41042: LIST
41043: PUSH
41044: LD_INT 1
41046: PUSH
41047: LD_INT 1
41049: PUSH
41050: EMPTY
41051: LIST
41052: LIST
41053: PUSH
41054: LD_INT 0
41056: PUSH
41057: LD_INT 1
41059: PUSH
41060: EMPTY
41061: LIST
41062: LIST
41063: PUSH
41064: LD_INT 1
41066: NEG
41067: PUSH
41068: LD_INT 0
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: LD_INT 1
41077: NEG
41078: PUSH
41079: LD_INT 1
41081: NEG
41082: PUSH
41083: EMPTY
41084: LIST
41085: LIST
41086: PUSH
41087: LD_INT 1
41089: NEG
41090: PUSH
41091: LD_INT 2
41093: NEG
41094: PUSH
41095: EMPTY
41096: LIST
41097: LIST
41098: PUSH
41099: LD_INT 0
41101: PUSH
41102: LD_INT 2
41104: NEG
41105: PUSH
41106: EMPTY
41107: LIST
41108: LIST
41109: PUSH
41110: LD_INT 1
41112: PUSH
41113: LD_INT 1
41115: NEG
41116: PUSH
41117: EMPTY
41118: LIST
41119: LIST
41120: PUSH
41121: LD_INT 2
41123: PUSH
41124: LD_INT 0
41126: PUSH
41127: EMPTY
41128: LIST
41129: LIST
41130: PUSH
41131: LD_INT 2
41133: PUSH
41134: LD_INT 1
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 1
41143: PUSH
41144: LD_INT 2
41146: PUSH
41147: EMPTY
41148: LIST
41149: LIST
41150: PUSH
41151: LD_INT 0
41153: PUSH
41154: LD_INT 2
41156: PUSH
41157: EMPTY
41158: LIST
41159: LIST
41160: PUSH
41161: LD_INT 1
41163: NEG
41164: PUSH
41165: LD_INT 1
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: LD_INT 2
41174: NEG
41175: PUSH
41176: LD_INT 1
41178: NEG
41179: PUSH
41180: EMPTY
41181: LIST
41182: LIST
41183: PUSH
41184: LD_INT 2
41186: NEG
41187: PUSH
41188: LD_INT 2
41190: NEG
41191: PUSH
41192: EMPTY
41193: LIST
41194: LIST
41195: PUSH
41196: LD_INT 2
41198: NEG
41199: PUSH
41200: LD_INT 3
41202: NEG
41203: PUSH
41204: EMPTY
41205: LIST
41206: LIST
41207: PUSH
41208: LD_INT 2
41210: PUSH
41211: LD_INT 1
41213: NEG
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 3
41221: PUSH
41222: LD_INT 1
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: LD_INT 1
41231: PUSH
41232: LD_INT 3
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: LD_INT 1
41241: NEG
41242: PUSH
41243: LD_INT 2
41245: PUSH
41246: EMPTY
41247: LIST
41248: LIST
41249: PUSH
41250: LD_INT 3
41252: NEG
41253: PUSH
41254: LD_INT 2
41256: NEG
41257: PUSH
41258: EMPTY
41259: LIST
41260: LIST
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: LIST
41266: LIST
41267: LIST
41268: LIST
41269: LIST
41270: LIST
41271: LIST
41272: LIST
41273: LIST
41274: LIST
41275: LIST
41276: LIST
41277: LIST
41278: LIST
41279: LIST
41280: LIST
41281: LIST
41282: LIST
41283: LIST
41284: LIST
41285: LIST
41286: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41287: LD_ADDR_VAR 0 30
41291: PUSH
41292: LD_INT 0
41294: PUSH
41295: LD_INT 0
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: PUSH
41302: LD_INT 0
41304: PUSH
41305: LD_INT 1
41307: NEG
41308: PUSH
41309: EMPTY
41310: LIST
41311: LIST
41312: PUSH
41313: LD_INT 1
41315: PUSH
41316: LD_INT 0
41318: PUSH
41319: EMPTY
41320: LIST
41321: LIST
41322: PUSH
41323: LD_INT 1
41325: PUSH
41326: LD_INT 1
41328: PUSH
41329: EMPTY
41330: LIST
41331: LIST
41332: PUSH
41333: LD_INT 0
41335: PUSH
41336: LD_INT 1
41338: PUSH
41339: EMPTY
41340: LIST
41341: LIST
41342: PUSH
41343: LD_INT 1
41345: NEG
41346: PUSH
41347: LD_INT 0
41349: PUSH
41350: EMPTY
41351: LIST
41352: LIST
41353: PUSH
41354: LD_INT 1
41356: NEG
41357: PUSH
41358: LD_INT 1
41360: NEG
41361: PUSH
41362: EMPTY
41363: LIST
41364: LIST
41365: PUSH
41366: LD_INT 1
41368: NEG
41369: PUSH
41370: LD_INT 2
41372: NEG
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: PUSH
41378: LD_INT 0
41380: PUSH
41381: LD_INT 2
41383: NEG
41384: PUSH
41385: EMPTY
41386: LIST
41387: LIST
41388: PUSH
41389: LD_INT 1
41391: PUSH
41392: LD_INT 1
41394: NEG
41395: PUSH
41396: EMPTY
41397: LIST
41398: LIST
41399: PUSH
41400: LD_INT 2
41402: PUSH
41403: LD_INT 0
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: LD_INT 2
41412: PUSH
41413: LD_INT 1
41415: PUSH
41416: EMPTY
41417: LIST
41418: LIST
41419: PUSH
41420: LD_INT 2
41422: PUSH
41423: LD_INT 2
41425: PUSH
41426: EMPTY
41427: LIST
41428: LIST
41429: PUSH
41430: LD_INT 1
41432: PUSH
41433: LD_INT 2
41435: PUSH
41436: EMPTY
41437: LIST
41438: LIST
41439: PUSH
41440: LD_INT 1
41442: NEG
41443: PUSH
41444: LD_INT 1
41446: PUSH
41447: EMPTY
41448: LIST
41449: LIST
41450: PUSH
41451: LD_INT 2
41453: NEG
41454: PUSH
41455: LD_INT 0
41457: PUSH
41458: EMPTY
41459: LIST
41460: LIST
41461: PUSH
41462: LD_INT 2
41464: NEG
41465: PUSH
41466: LD_INT 1
41468: NEG
41469: PUSH
41470: EMPTY
41471: LIST
41472: LIST
41473: PUSH
41474: LD_INT 1
41476: NEG
41477: PUSH
41478: LD_INT 3
41480: NEG
41481: PUSH
41482: EMPTY
41483: LIST
41484: LIST
41485: PUSH
41486: LD_INT 1
41488: PUSH
41489: LD_INT 2
41491: NEG
41492: PUSH
41493: EMPTY
41494: LIST
41495: LIST
41496: PUSH
41497: LD_INT 3
41499: PUSH
41500: LD_INT 2
41502: PUSH
41503: EMPTY
41504: LIST
41505: LIST
41506: PUSH
41507: LD_INT 2
41509: PUSH
41510: LD_INT 3
41512: PUSH
41513: EMPTY
41514: LIST
41515: LIST
41516: PUSH
41517: LD_INT 2
41519: NEG
41520: PUSH
41521: LD_INT 1
41523: PUSH
41524: EMPTY
41525: LIST
41526: LIST
41527: PUSH
41528: LD_INT 3
41530: NEG
41531: PUSH
41532: LD_INT 1
41534: NEG
41535: PUSH
41536: EMPTY
41537: LIST
41538: LIST
41539: PUSH
41540: EMPTY
41541: LIST
41542: LIST
41543: LIST
41544: LIST
41545: LIST
41546: LIST
41547: LIST
41548: LIST
41549: LIST
41550: LIST
41551: LIST
41552: LIST
41553: LIST
41554: LIST
41555: LIST
41556: LIST
41557: LIST
41558: LIST
41559: LIST
41560: LIST
41561: LIST
41562: LIST
41563: LIST
41564: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41565: LD_ADDR_VAR 0 31
41569: PUSH
41570: LD_INT 0
41572: PUSH
41573: LD_INT 0
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: PUSH
41580: LD_INT 0
41582: PUSH
41583: LD_INT 1
41585: NEG
41586: PUSH
41587: EMPTY
41588: LIST
41589: LIST
41590: PUSH
41591: LD_INT 1
41593: PUSH
41594: LD_INT 0
41596: PUSH
41597: EMPTY
41598: LIST
41599: LIST
41600: PUSH
41601: LD_INT 1
41603: PUSH
41604: LD_INT 1
41606: PUSH
41607: EMPTY
41608: LIST
41609: LIST
41610: PUSH
41611: LD_INT 0
41613: PUSH
41614: LD_INT 1
41616: PUSH
41617: EMPTY
41618: LIST
41619: LIST
41620: PUSH
41621: LD_INT 1
41623: NEG
41624: PUSH
41625: LD_INT 0
41627: PUSH
41628: EMPTY
41629: LIST
41630: LIST
41631: PUSH
41632: LD_INT 1
41634: NEG
41635: PUSH
41636: LD_INT 1
41638: NEG
41639: PUSH
41640: EMPTY
41641: LIST
41642: LIST
41643: PUSH
41644: LD_INT 1
41646: NEG
41647: PUSH
41648: LD_INT 2
41650: NEG
41651: PUSH
41652: EMPTY
41653: LIST
41654: LIST
41655: PUSH
41656: LD_INT 1
41658: PUSH
41659: LD_INT 1
41661: NEG
41662: PUSH
41663: EMPTY
41664: LIST
41665: LIST
41666: PUSH
41667: LD_INT 2
41669: PUSH
41670: LD_INT 0
41672: PUSH
41673: EMPTY
41674: LIST
41675: LIST
41676: PUSH
41677: LD_INT 2
41679: PUSH
41680: LD_INT 1
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 2
41689: PUSH
41690: LD_INT 2
41692: PUSH
41693: EMPTY
41694: LIST
41695: LIST
41696: PUSH
41697: LD_INT 1
41699: PUSH
41700: LD_INT 2
41702: PUSH
41703: EMPTY
41704: LIST
41705: LIST
41706: PUSH
41707: LD_INT 0
41709: PUSH
41710: LD_INT 2
41712: PUSH
41713: EMPTY
41714: LIST
41715: LIST
41716: PUSH
41717: LD_INT 1
41719: NEG
41720: PUSH
41721: LD_INT 1
41723: PUSH
41724: EMPTY
41725: LIST
41726: LIST
41727: PUSH
41728: LD_INT 2
41730: NEG
41731: PUSH
41732: LD_INT 1
41734: NEG
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: PUSH
41740: LD_INT 2
41742: NEG
41743: PUSH
41744: LD_INT 2
41746: NEG
41747: PUSH
41748: EMPTY
41749: LIST
41750: LIST
41751: PUSH
41752: LD_INT 2
41754: NEG
41755: PUSH
41756: LD_INT 3
41758: NEG
41759: PUSH
41760: EMPTY
41761: LIST
41762: LIST
41763: PUSH
41764: LD_INT 2
41766: PUSH
41767: LD_INT 1
41769: NEG
41770: PUSH
41771: EMPTY
41772: LIST
41773: LIST
41774: PUSH
41775: LD_INT 3
41777: PUSH
41778: LD_INT 1
41780: PUSH
41781: EMPTY
41782: LIST
41783: LIST
41784: PUSH
41785: LD_INT 1
41787: PUSH
41788: LD_INT 3
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: LD_INT 1
41797: NEG
41798: PUSH
41799: LD_INT 2
41801: PUSH
41802: EMPTY
41803: LIST
41804: LIST
41805: PUSH
41806: LD_INT 3
41808: NEG
41809: PUSH
41810: LD_INT 2
41812: NEG
41813: PUSH
41814: EMPTY
41815: LIST
41816: LIST
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: LIST
41826: LIST
41827: LIST
41828: LIST
41829: LIST
41830: LIST
41831: LIST
41832: LIST
41833: LIST
41834: LIST
41835: LIST
41836: LIST
41837: LIST
41838: LIST
41839: LIST
41840: LIST
41841: LIST
41842: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
41843: LD_ADDR_VAR 0 32
41847: PUSH
41848: LD_INT 0
41850: PUSH
41851: LD_INT 0
41853: PUSH
41854: EMPTY
41855: LIST
41856: LIST
41857: PUSH
41858: LD_INT 0
41860: PUSH
41861: LD_INT 1
41863: NEG
41864: PUSH
41865: EMPTY
41866: LIST
41867: LIST
41868: PUSH
41869: LD_INT 1
41871: PUSH
41872: LD_INT 0
41874: PUSH
41875: EMPTY
41876: LIST
41877: LIST
41878: PUSH
41879: LD_INT 1
41881: PUSH
41882: LD_INT 1
41884: PUSH
41885: EMPTY
41886: LIST
41887: LIST
41888: PUSH
41889: LD_INT 0
41891: PUSH
41892: LD_INT 1
41894: PUSH
41895: EMPTY
41896: LIST
41897: LIST
41898: PUSH
41899: LD_INT 1
41901: NEG
41902: PUSH
41903: LD_INT 0
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 1
41912: NEG
41913: PUSH
41914: LD_INT 1
41916: NEG
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: LD_INT 1
41924: NEG
41925: PUSH
41926: LD_INT 2
41928: NEG
41929: PUSH
41930: EMPTY
41931: LIST
41932: LIST
41933: PUSH
41934: LD_INT 0
41936: PUSH
41937: LD_INT 2
41939: NEG
41940: PUSH
41941: EMPTY
41942: LIST
41943: LIST
41944: PUSH
41945: LD_INT 1
41947: PUSH
41948: LD_INT 1
41950: NEG
41951: PUSH
41952: EMPTY
41953: LIST
41954: LIST
41955: PUSH
41956: LD_INT 2
41958: PUSH
41959: LD_INT 1
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 2
41968: PUSH
41969: LD_INT 2
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 1
41978: PUSH
41979: LD_INT 2
41981: PUSH
41982: EMPTY
41983: LIST
41984: LIST
41985: PUSH
41986: LD_INT 0
41988: PUSH
41989: LD_INT 2
41991: PUSH
41992: EMPTY
41993: LIST
41994: LIST
41995: PUSH
41996: LD_INT 1
41998: NEG
41999: PUSH
42000: LD_INT 1
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 2
42009: NEG
42010: PUSH
42011: LD_INT 0
42013: PUSH
42014: EMPTY
42015: LIST
42016: LIST
42017: PUSH
42018: LD_INT 2
42020: NEG
42021: PUSH
42022: LD_INT 1
42024: NEG
42025: PUSH
42026: EMPTY
42027: LIST
42028: LIST
42029: PUSH
42030: LD_INT 1
42032: NEG
42033: PUSH
42034: LD_INT 3
42036: NEG
42037: PUSH
42038: EMPTY
42039: LIST
42040: LIST
42041: PUSH
42042: LD_INT 1
42044: PUSH
42045: LD_INT 2
42047: NEG
42048: PUSH
42049: EMPTY
42050: LIST
42051: LIST
42052: PUSH
42053: LD_INT 3
42055: PUSH
42056: LD_INT 2
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 2
42065: PUSH
42066: LD_INT 3
42068: PUSH
42069: EMPTY
42070: LIST
42071: LIST
42072: PUSH
42073: LD_INT 2
42075: NEG
42076: PUSH
42077: LD_INT 1
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 3
42086: NEG
42087: PUSH
42088: LD_INT 1
42090: NEG
42091: PUSH
42092: EMPTY
42093: LIST
42094: LIST
42095: PUSH
42096: EMPTY
42097: LIST
42098: LIST
42099: LIST
42100: LIST
42101: LIST
42102: LIST
42103: LIST
42104: LIST
42105: LIST
42106: LIST
42107: LIST
42108: LIST
42109: LIST
42110: LIST
42111: LIST
42112: LIST
42113: LIST
42114: LIST
42115: LIST
42116: LIST
42117: LIST
42118: LIST
42119: LIST
42120: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42121: LD_ADDR_VAR 0 33
42125: PUSH
42126: LD_INT 0
42128: PUSH
42129: LD_INT 0
42131: PUSH
42132: EMPTY
42133: LIST
42134: LIST
42135: PUSH
42136: LD_INT 0
42138: PUSH
42139: LD_INT 1
42141: NEG
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: PUSH
42147: LD_INT 1
42149: PUSH
42150: LD_INT 0
42152: PUSH
42153: EMPTY
42154: LIST
42155: LIST
42156: PUSH
42157: LD_INT 1
42159: PUSH
42160: LD_INT 1
42162: PUSH
42163: EMPTY
42164: LIST
42165: LIST
42166: PUSH
42167: LD_INT 0
42169: PUSH
42170: LD_INT 1
42172: PUSH
42173: EMPTY
42174: LIST
42175: LIST
42176: PUSH
42177: LD_INT 1
42179: NEG
42180: PUSH
42181: LD_INT 0
42183: PUSH
42184: EMPTY
42185: LIST
42186: LIST
42187: PUSH
42188: LD_INT 1
42190: NEG
42191: PUSH
42192: LD_INT 1
42194: NEG
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_INT 1
42202: NEG
42203: PUSH
42204: LD_INT 2
42206: NEG
42207: PUSH
42208: EMPTY
42209: LIST
42210: LIST
42211: PUSH
42212: LD_INT 1
42214: PUSH
42215: LD_INT 1
42217: NEG
42218: PUSH
42219: EMPTY
42220: LIST
42221: LIST
42222: PUSH
42223: LD_INT 2
42225: PUSH
42226: LD_INT 0
42228: PUSH
42229: EMPTY
42230: LIST
42231: LIST
42232: PUSH
42233: LD_INT 2
42235: PUSH
42236: LD_INT 1
42238: PUSH
42239: EMPTY
42240: LIST
42241: LIST
42242: PUSH
42243: LD_INT 1
42245: PUSH
42246: LD_INT 2
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: PUSH
42253: LD_INT 0
42255: PUSH
42256: LD_INT 2
42258: PUSH
42259: EMPTY
42260: LIST
42261: LIST
42262: PUSH
42263: LD_INT 1
42265: NEG
42266: PUSH
42267: LD_INT 1
42269: PUSH
42270: EMPTY
42271: LIST
42272: LIST
42273: PUSH
42274: LD_INT 2
42276: NEG
42277: PUSH
42278: LD_INT 0
42280: PUSH
42281: EMPTY
42282: LIST
42283: LIST
42284: PUSH
42285: LD_INT 2
42287: NEG
42288: PUSH
42289: LD_INT 1
42291: NEG
42292: PUSH
42293: EMPTY
42294: LIST
42295: LIST
42296: PUSH
42297: LD_INT 2
42299: NEG
42300: PUSH
42301: LD_INT 2
42303: NEG
42304: PUSH
42305: EMPTY
42306: LIST
42307: LIST
42308: PUSH
42309: LD_INT 2
42311: NEG
42312: PUSH
42313: LD_INT 3
42315: NEG
42316: PUSH
42317: EMPTY
42318: LIST
42319: LIST
42320: PUSH
42321: LD_INT 2
42323: PUSH
42324: LD_INT 1
42326: NEG
42327: PUSH
42328: EMPTY
42329: LIST
42330: LIST
42331: PUSH
42332: LD_INT 3
42334: PUSH
42335: LD_INT 1
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 1
42344: PUSH
42345: LD_INT 3
42347: PUSH
42348: EMPTY
42349: LIST
42350: LIST
42351: PUSH
42352: LD_INT 1
42354: NEG
42355: PUSH
42356: LD_INT 2
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 3
42365: NEG
42366: PUSH
42367: LD_INT 2
42369: NEG
42370: PUSH
42371: EMPTY
42372: LIST
42373: LIST
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: LIST
42379: LIST
42380: LIST
42381: LIST
42382: LIST
42383: LIST
42384: LIST
42385: LIST
42386: LIST
42387: LIST
42388: LIST
42389: LIST
42390: LIST
42391: LIST
42392: LIST
42393: LIST
42394: LIST
42395: LIST
42396: LIST
42397: LIST
42398: LIST
42399: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42400: LD_ADDR_VAR 0 34
42404: PUSH
42405: LD_INT 0
42407: PUSH
42408: LD_INT 0
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 0
42417: PUSH
42418: LD_INT 1
42420: NEG
42421: PUSH
42422: EMPTY
42423: LIST
42424: LIST
42425: PUSH
42426: LD_INT 1
42428: PUSH
42429: LD_INT 0
42431: PUSH
42432: EMPTY
42433: LIST
42434: LIST
42435: PUSH
42436: LD_INT 1
42438: PUSH
42439: LD_INT 1
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 0
42448: PUSH
42449: LD_INT 1
42451: PUSH
42452: EMPTY
42453: LIST
42454: LIST
42455: PUSH
42456: LD_INT 1
42458: NEG
42459: PUSH
42460: LD_INT 0
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_INT 1
42469: NEG
42470: PUSH
42471: LD_INT 1
42473: NEG
42474: PUSH
42475: EMPTY
42476: LIST
42477: LIST
42478: PUSH
42479: LD_INT 1
42481: NEG
42482: PUSH
42483: LD_INT 2
42485: NEG
42486: PUSH
42487: EMPTY
42488: LIST
42489: LIST
42490: PUSH
42491: LD_INT 0
42493: PUSH
42494: LD_INT 2
42496: NEG
42497: PUSH
42498: EMPTY
42499: LIST
42500: LIST
42501: PUSH
42502: LD_INT 1
42504: PUSH
42505: LD_INT 1
42507: NEG
42508: PUSH
42509: EMPTY
42510: LIST
42511: LIST
42512: PUSH
42513: LD_INT 2
42515: PUSH
42516: LD_INT 1
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 2
42525: PUSH
42526: LD_INT 2
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: LD_INT 1
42535: PUSH
42536: LD_INT 2
42538: PUSH
42539: EMPTY
42540: LIST
42541: LIST
42542: PUSH
42543: LD_INT 1
42545: NEG
42546: PUSH
42547: LD_INT 1
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 2
42556: NEG
42557: PUSH
42558: LD_INT 0
42560: PUSH
42561: EMPTY
42562: LIST
42563: LIST
42564: PUSH
42565: LD_INT 2
42567: NEG
42568: PUSH
42569: LD_INT 1
42571: NEG
42572: PUSH
42573: EMPTY
42574: LIST
42575: LIST
42576: PUSH
42577: LD_INT 2
42579: NEG
42580: PUSH
42581: LD_INT 2
42583: NEG
42584: PUSH
42585: EMPTY
42586: LIST
42587: LIST
42588: PUSH
42589: LD_INT 1
42591: NEG
42592: PUSH
42593: LD_INT 3
42595: NEG
42596: PUSH
42597: EMPTY
42598: LIST
42599: LIST
42600: PUSH
42601: LD_INT 1
42603: PUSH
42604: LD_INT 2
42606: NEG
42607: PUSH
42608: EMPTY
42609: LIST
42610: LIST
42611: PUSH
42612: LD_INT 3
42614: PUSH
42615: LD_INT 2
42617: PUSH
42618: EMPTY
42619: LIST
42620: LIST
42621: PUSH
42622: LD_INT 2
42624: PUSH
42625: LD_INT 3
42627: PUSH
42628: EMPTY
42629: LIST
42630: LIST
42631: PUSH
42632: LD_INT 2
42634: NEG
42635: PUSH
42636: LD_INT 1
42638: PUSH
42639: EMPTY
42640: LIST
42641: LIST
42642: PUSH
42643: LD_INT 3
42645: NEG
42646: PUSH
42647: LD_INT 1
42649: NEG
42650: PUSH
42651: EMPTY
42652: LIST
42653: LIST
42654: PUSH
42655: EMPTY
42656: LIST
42657: LIST
42658: LIST
42659: LIST
42660: LIST
42661: LIST
42662: LIST
42663: LIST
42664: LIST
42665: LIST
42666: LIST
42667: LIST
42668: LIST
42669: LIST
42670: LIST
42671: LIST
42672: LIST
42673: LIST
42674: LIST
42675: LIST
42676: LIST
42677: LIST
42678: LIST
42679: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
42680: LD_ADDR_VAR 0 35
42684: PUSH
42685: LD_INT 0
42687: PUSH
42688: LD_INT 0
42690: PUSH
42691: EMPTY
42692: LIST
42693: LIST
42694: PUSH
42695: LD_INT 0
42697: PUSH
42698: LD_INT 1
42700: NEG
42701: PUSH
42702: EMPTY
42703: LIST
42704: LIST
42705: PUSH
42706: LD_INT 1
42708: PUSH
42709: LD_INT 0
42711: PUSH
42712: EMPTY
42713: LIST
42714: LIST
42715: PUSH
42716: LD_INT 1
42718: PUSH
42719: LD_INT 1
42721: PUSH
42722: EMPTY
42723: LIST
42724: LIST
42725: PUSH
42726: LD_INT 0
42728: PUSH
42729: LD_INT 1
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 1
42738: NEG
42739: PUSH
42740: LD_INT 0
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 1
42749: NEG
42750: PUSH
42751: LD_INT 1
42753: NEG
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 2
42761: PUSH
42762: LD_INT 1
42764: PUSH
42765: EMPTY
42766: LIST
42767: LIST
42768: PUSH
42769: LD_INT 2
42771: NEG
42772: PUSH
42773: LD_INT 1
42775: NEG
42776: PUSH
42777: EMPTY
42778: LIST
42779: LIST
42780: PUSH
42781: EMPTY
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
42792: LD_ADDR_VAR 0 36
42796: PUSH
42797: LD_INT 0
42799: PUSH
42800: LD_INT 0
42802: PUSH
42803: EMPTY
42804: LIST
42805: LIST
42806: PUSH
42807: LD_INT 0
42809: PUSH
42810: LD_INT 1
42812: NEG
42813: PUSH
42814: EMPTY
42815: LIST
42816: LIST
42817: PUSH
42818: LD_INT 1
42820: PUSH
42821: LD_INT 0
42823: PUSH
42824: EMPTY
42825: LIST
42826: LIST
42827: PUSH
42828: LD_INT 1
42830: PUSH
42831: LD_INT 1
42833: PUSH
42834: EMPTY
42835: LIST
42836: LIST
42837: PUSH
42838: LD_INT 0
42840: PUSH
42841: LD_INT 1
42843: PUSH
42844: EMPTY
42845: LIST
42846: LIST
42847: PUSH
42848: LD_INT 1
42850: NEG
42851: PUSH
42852: LD_INT 0
42854: PUSH
42855: EMPTY
42856: LIST
42857: LIST
42858: PUSH
42859: LD_INT 1
42861: NEG
42862: PUSH
42863: LD_INT 1
42865: NEG
42866: PUSH
42867: EMPTY
42868: LIST
42869: LIST
42870: PUSH
42871: LD_INT 1
42873: NEG
42874: PUSH
42875: LD_INT 2
42877: NEG
42878: PUSH
42879: EMPTY
42880: LIST
42881: LIST
42882: PUSH
42883: LD_INT 1
42885: PUSH
42886: LD_INT 2
42888: PUSH
42889: EMPTY
42890: LIST
42891: LIST
42892: PUSH
42893: EMPTY
42894: LIST
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: LIST
42900: LIST
42901: LIST
42902: LIST
42903: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
42904: LD_ADDR_VAR 0 37
42908: PUSH
42909: LD_INT 0
42911: PUSH
42912: LD_INT 0
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: LD_INT 0
42921: PUSH
42922: LD_INT 1
42924: NEG
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 1
42932: PUSH
42933: LD_INT 0
42935: PUSH
42936: EMPTY
42937: LIST
42938: LIST
42939: PUSH
42940: LD_INT 1
42942: PUSH
42943: LD_INT 1
42945: PUSH
42946: EMPTY
42947: LIST
42948: LIST
42949: PUSH
42950: LD_INT 0
42952: PUSH
42953: LD_INT 1
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 1
42962: NEG
42963: PUSH
42964: LD_INT 0
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 1
42973: NEG
42974: PUSH
42975: LD_INT 1
42977: NEG
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 1
42985: PUSH
42986: LD_INT 1
42988: NEG
42989: PUSH
42990: EMPTY
42991: LIST
42992: LIST
42993: PUSH
42994: LD_INT 1
42996: NEG
42997: PUSH
42998: LD_INT 1
43000: PUSH
43001: EMPTY
43002: LIST
43003: LIST
43004: PUSH
43005: EMPTY
43006: LIST
43007: LIST
43008: LIST
43009: LIST
43010: LIST
43011: LIST
43012: LIST
43013: LIST
43014: LIST
43015: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43016: LD_ADDR_VAR 0 38
43020: PUSH
43021: LD_INT 0
43023: PUSH
43024: LD_INT 0
43026: PUSH
43027: EMPTY
43028: LIST
43029: LIST
43030: PUSH
43031: LD_INT 0
43033: PUSH
43034: LD_INT 1
43036: NEG
43037: PUSH
43038: EMPTY
43039: LIST
43040: LIST
43041: PUSH
43042: LD_INT 1
43044: PUSH
43045: LD_INT 0
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 1
43054: PUSH
43055: LD_INT 1
43057: PUSH
43058: EMPTY
43059: LIST
43060: LIST
43061: PUSH
43062: LD_INT 0
43064: PUSH
43065: LD_INT 1
43067: PUSH
43068: EMPTY
43069: LIST
43070: LIST
43071: PUSH
43072: LD_INT 1
43074: NEG
43075: PUSH
43076: LD_INT 0
43078: PUSH
43079: EMPTY
43080: LIST
43081: LIST
43082: PUSH
43083: LD_INT 1
43085: NEG
43086: PUSH
43087: LD_INT 1
43089: NEG
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 2
43097: PUSH
43098: LD_INT 1
43100: PUSH
43101: EMPTY
43102: LIST
43103: LIST
43104: PUSH
43105: LD_INT 2
43107: NEG
43108: PUSH
43109: LD_INT 1
43111: NEG
43112: PUSH
43113: EMPTY
43114: LIST
43115: LIST
43116: PUSH
43117: EMPTY
43118: LIST
43119: LIST
43120: LIST
43121: LIST
43122: LIST
43123: LIST
43124: LIST
43125: LIST
43126: LIST
43127: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43128: LD_ADDR_VAR 0 39
43132: PUSH
43133: LD_INT 0
43135: PUSH
43136: LD_INT 0
43138: PUSH
43139: EMPTY
43140: LIST
43141: LIST
43142: PUSH
43143: LD_INT 0
43145: PUSH
43146: LD_INT 1
43148: NEG
43149: PUSH
43150: EMPTY
43151: LIST
43152: LIST
43153: PUSH
43154: LD_INT 1
43156: PUSH
43157: LD_INT 0
43159: PUSH
43160: EMPTY
43161: LIST
43162: LIST
43163: PUSH
43164: LD_INT 1
43166: PUSH
43167: LD_INT 1
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: PUSH
43174: LD_INT 0
43176: PUSH
43177: LD_INT 1
43179: PUSH
43180: EMPTY
43181: LIST
43182: LIST
43183: PUSH
43184: LD_INT 1
43186: NEG
43187: PUSH
43188: LD_INT 0
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: PUSH
43195: LD_INT 1
43197: NEG
43198: PUSH
43199: LD_INT 1
43201: NEG
43202: PUSH
43203: EMPTY
43204: LIST
43205: LIST
43206: PUSH
43207: LD_INT 1
43209: NEG
43210: PUSH
43211: LD_INT 2
43213: NEG
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PUSH
43219: LD_INT 1
43221: PUSH
43222: LD_INT 2
43224: PUSH
43225: EMPTY
43226: LIST
43227: LIST
43228: PUSH
43229: EMPTY
43230: LIST
43231: LIST
43232: LIST
43233: LIST
43234: LIST
43235: LIST
43236: LIST
43237: LIST
43238: LIST
43239: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43240: LD_ADDR_VAR 0 40
43244: PUSH
43245: LD_INT 0
43247: PUSH
43248: LD_INT 0
43250: PUSH
43251: EMPTY
43252: LIST
43253: LIST
43254: PUSH
43255: LD_INT 0
43257: PUSH
43258: LD_INT 1
43260: NEG
43261: PUSH
43262: EMPTY
43263: LIST
43264: LIST
43265: PUSH
43266: LD_INT 1
43268: PUSH
43269: LD_INT 0
43271: PUSH
43272: EMPTY
43273: LIST
43274: LIST
43275: PUSH
43276: LD_INT 1
43278: PUSH
43279: LD_INT 1
43281: PUSH
43282: EMPTY
43283: LIST
43284: LIST
43285: PUSH
43286: LD_INT 0
43288: PUSH
43289: LD_INT 1
43291: PUSH
43292: EMPTY
43293: LIST
43294: LIST
43295: PUSH
43296: LD_INT 1
43298: NEG
43299: PUSH
43300: LD_INT 0
43302: PUSH
43303: EMPTY
43304: LIST
43305: LIST
43306: PUSH
43307: LD_INT 1
43309: NEG
43310: PUSH
43311: LD_INT 1
43313: NEG
43314: PUSH
43315: EMPTY
43316: LIST
43317: LIST
43318: PUSH
43319: LD_INT 1
43321: PUSH
43322: LD_INT 1
43324: NEG
43325: PUSH
43326: EMPTY
43327: LIST
43328: LIST
43329: PUSH
43330: LD_INT 1
43332: NEG
43333: PUSH
43334: LD_INT 1
43336: PUSH
43337: EMPTY
43338: LIST
43339: LIST
43340: PUSH
43341: EMPTY
43342: LIST
43343: LIST
43344: LIST
43345: LIST
43346: LIST
43347: LIST
43348: LIST
43349: LIST
43350: LIST
43351: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43352: LD_ADDR_VAR 0 41
43356: PUSH
43357: LD_INT 0
43359: PUSH
43360: LD_INT 0
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 0
43369: PUSH
43370: LD_INT 1
43372: NEG
43373: PUSH
43374: EMPTY
43375: LIST
43376: LIST
43377: PUSH
43378: LD_INT 1
43380: PUSH
43381: LD_INT 0
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 1
43390: PUSH
43391: LD_INT 1
43393: PUSH
43394: EMPTY
43395: LIST
43396: LIST
43397: PUSH
43398: LD_INT 0
43400: PUSH
43401: LD_INT 1
43403: PUSH
43404: EMPTY
43405: LIST
43406: LIST
43407: PUSH
43408: LD_INT 1
43410: NEG
43411: PUSH
43412: LD_INT 0
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: LD_INT 1
43421: NEG
43422: PUSH
43423: LD_INT 1
43425: NEG
43426: PUSH
43427: EMPTY
43428: LIST
43429: LIST
43430: PUSH
43431: LD_INT 1
43433: NEG
43434: PUSH
43435: LD_INT 2
43437: NEG
43438: PUSH
43439: EMPTY
43440: LIST
43441: LIST
43442: PUSH
43443: LD_INT 1
43445: PUSH
43446: LD_INT 1
43448: NEG
43449: PUSH
43450: EMPTY
43451: LIST
43452: LIST
43453: PUSH
43454: LD_INT 2
43456: PUSH
43457: LD_INT 0
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 2
43466: PUSH
43467: LD_INT 1
43469: PUSH
43470: EMPTY
43471: LIST
43472: LIST
43473: PUSH
43474: LD_INT 2
43476: PUSH
43477: LD_INT 2
43479: PUSH
43480: EMPTY
43481: LIST
43482: LIST
43483: PUSH
43484: LD_INT 1
43486: PUSH
43487: LD_INT 2
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 1
43496: NEG
43497: PUSH
43498: LD_INT 1
43500: PUSH
43501: EMPTY
43502: LIST
43503: LIST
43504: PUSH
43505: LD_INT 2
43507: NEG
43508: PUSH
43509: LD_INT 0
43511: PUSH
43512: EMPTY
43513: LIST
43514: LIST
43515: PUSH
43516: LD_INT 2
43518: NEG
43519: PUSH
43520: LD_INT 1
43522: NEG
43523: PUSH
43524: EMPTY
43525: LIST
43526: LIST
43527: PUSH
43528: LD_INT 2
43530: NEG
43531: PUSH
43532: LD_INT 2
43534: NEG
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PUSH
43540: LD_INT 2
43542: NEG
43543: PUSH
43544: LD_INT 3
43546: NEG
43547: PUSH
43548: EMPTY
43549: LIST
43550: LIST
43551: PUSH
43552: LD_INT 2
43554: PUSH
43555: LD_INT 1
43557: NEG
43558: PUSH
43559: EMPTY
43560: LIST
43561: LIST
43562: PUSH
43563: LD_INT 3
43565: PUSH
43566: LD_INT 0
43568: PUSH
43569: EMPTY
43570: LIST
43571: LIST
43572: PUSH
43573: LD_INT 3
43575: PUSH
43576: LD_INT 1
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: LD_INT 3
43585: PUSH
43586: LD_INT 2
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 3
43595: PUSH
43596: LD_INT 3
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: LD_INT 2
43605: PUSH
43606: LD_INT 3
43608: PUSH
43609: EMPTY
43610: LIST
43611: LIST
43612: PUSH
43613: LD_INT 2
43615: NEG
43616: PUSH
43617: LD_INT 1
43619: PUSH
43620: EMPTY
43621: LIST
43622: LIST
43623: PUSH
43624: LD_INT 3
43626: NEG
43627: PUSH
43628: LD_INT 0
43630: PUSH
43631: EMPTY
43632: LIST
43633: LIST
43634: PUSH
43635: LD_INT 3
43637: NEG
43638: PUSH
43639: LD_INT 1
43641: NEG
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: PUSH
43647: LD_INT 3
43649: NEG
43650: PUSH
43651: LD_INT 2
43653: NEG
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: LD_INT 3
43661: NEG
43662: PUSH
43663: LD_INT 3
43665: NEG
43666: PUSH
43667: EMPTY
43668: LIST
43669: LIST
43670: PUSH
43671: EMPTY
43672: LIST
43673: LIST
43674: LIST
43675: LIST
43676: LIST
43677: LIST
43678: LIST
43679: LIST
43680: LIST
43681: LIST
43682: LIST
43683: LIST
43684: LIST
43685: LIST
43686: LIST
43687: LIST
43688: LIST
43689: LIST
43690: LIST
43691: LIST
43692: LIST
43693: LIST
43694: LIST
43695: LIST
43696: LIST
43697: LIST
43698: LIST
43699: LIST
43700: LIST
43701: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43702: LD_ADDR_VAR 0 42
43706: PUSH
43707: LD_INT 0
43709: PUSH
43710: LD_INT 0
43712: PUSH
43713: EMPTY
43714: LIST
43715: LIST
43716: PUSH
43717: LD_INT 0
43719: PUSH
43720: LD_INT 1
43722: NEG
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: LD_INT 1
43730: PUSH
43731: LD_INT 0
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: PUSH
43738: LD_INT 1
43740: PUSH
43741: LD_INT 1
43743: PUSH
43744: EMPTY
43745: LIST
43746: LIST
43747: PUSH
43748: LD_INT 0
43750: PUSH
43751: LD_INT 1
43753: PUSH
43754: EMPTY
43755: LIST
43756: LIST
43757: PUSH
43758: LD_INT 1
43760: NEG
43761: PUSH
43762: LD_INT 0
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: PUSH
43769: LD_INT 1
43771: NEG
43772: PUSH
43773: LD_INT 1
43775: NEG
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: LD_INT 1
43783: NEG
43784: PUSH
43785: LD_INT 2
43787: NEG
43788: PUSH
43789: EMPTY
43790: LIST
43791: LIST
43792: PUSH
43793: LD_INT 0
43795: PUSH
43796: LD_INT 2
43798: NEG
43799: PUSH
43800: EMPTY
43801: LIST
43802: LIST
43803: PUSH
43804: LD_INT 1
43806: PUSH
43807: LD_INT 1
43809: NEG
43810: PUSH
43811: EMPTY
43812: LIST
43813: LIST
43814: PUSH
43815: LD_INT 2
43817: PUSH
43818: LD_INT 1
43820: PUSH
43821: EMPTY
43822: LIST
43823: LIST
43824: PUSH
43825: LD_INT 2
43827: PUSH
43828: LD_INT 2
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: PUSH
43835: LD_INT 1
43837: PUSH
43838: LD_INT 2
43840: PUSH
43841: EMPTY
43842: LIST
43843: LIST
43844: PUSH
43845: LD_INT 0
43847: PUSH
43848: LD_INT 2
43850: PUSH
43851: EMPTY
43852: LIST
43853: LIST
43854: PUSH
43855: LD_INT 1
43857: NEG
43858: PUSH
43859: LD_INT 1
43861: PUSH
43862: EMPTY
43863: LIST
43864: LIST
43865: PUSH
43866: LD_INT 2
43868: NEG
43869: PUSH
43870: LD_INT 1
43872: NEG
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 2
43880: NEG
43881: PUSH
43882: LD_INT 2
43884: NEG
43885: PUSH
43886: EMPTY
43887: LIST
43888: LIST
43889: PUSH
43890: LD_INT 2
43892: NEG
43893: PUSH
43894: LD_INT 3
43896: NEG
43897: PUSH
43898: EMPTY
43899: LIST
43900: LIST
43901: PUSH
43902: LD_INT 1
43904: NEG
43905: PUSH
43906: LD_INT 3
43908: NEG
43909: PUSH
43910: EMPTY
43911: LIST
43912: LIST
43913: PUSH
43914: LD_INT 0
43916: PUSH
43917: LD_INT 3
43919: NEG
43920: PUSH
43921: EMPTY
43922: LIST
43923: LIST
43924: PUSH
43925: LD_INT 1
43927: PUSH
43928: LD_INT 2
43930: NEG
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 3
43938: PUSH
43939: LD_INT 2
43941: PUSH
43942: EMPTY
43943: LIST
43944: LIST
43945: PUSH
43946: LD_INT 3
43948: PUSH
43949: LD_INT 3
43951: PUSH
43952: EMPTY
43953: LIST
43954: LIST
43955: PUSH
43956: LD_INT 2
43958: PUSH
43959: LD_INT 3
43961: PUSH
43962: EMPTY
43963: LIST
43964: LIST
43965: PUSH
43966: LD_INT 1
43968: PUSH
43969: LD_INT 3
43971: PUSH
43972: EMPTY
43973: LIST
43974: LIST
43975: PUSH
43976: LD_INT 0
43978: PUSH
43979: LD_INT 3
43981: PUSH
43982: EMPTY
43983: LIST
43984: LIST
43985: PUSH
43986: LD_INT 1
43988: NEG
43989: PUSH
43990: LD_INT 2
43992: PUSH
43993: EMPTY
43994: LIST
43995: LIST
43996: PUSH
43997: LD_INT 3
43999: NEG
44000: PUSH
44001: LD_INT 2
44003: NEG
44004: PUSH
44005: EMPTY
44006: LIST
44007: LIST
44008: PUSH
44009: LD_INT 3
44011: NEG
44012: PUSH
44013: LD_INT 3
44015: NEG
44016: PUSH
44017: EMPTY
44018: LIST
44019: LIST
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: LIST
44025: LIST
44026: LIST
44027: LIST
44028: LIST
44029: LIST
44030: LIST
44031: LIST
44032: LIST
44033: LIST
44034: LIST
44035: LIST
44036: LIST
44037: LIST
44038: LIST
44039: LIST
44040: LIST
44041: LIST
44042: LIST
44043: LIST
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: LIST
44050: LIST
44051: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
44052: LD_ADDR_VAR 0 43
44056: PUSH
44057: LD_INT 0
44059: PUSH
44060: LD_INT 0
44062: PUSH
44063: EMPTY
44064: LIST
44065: LIST
44066: PUSH
44067: LD_INT 0
44069: PUSH
44070: LD_INT 1
44072: NEG
44073: PUSH
44074: EMPTY
44075: LIST
44076: LIST
44077: PUSH
44078: LD_INT 1
44080: PUSH
44081: LD_INT 0
44083: PUSH
44084: EMPTY
44085: LIST
44086: LIST
44087: PUSH
44088: LD_INT 1
44090: PUSH
44091: LD_INT 1
44093: PUSH
44094: EMPTY
44095: LIST
44096: LIST
44097: PUSH
44098: LD_INT 0
44100: PUSH
44101: LD_INT 1
44103: PUSH
44104: EMPTY
44105: LIST
44106: LIST
44107: PUSH
44108: LD_INT 1
44110: NEG
44111: PUSH
44112: LD_INT 0
44114: PUSH
44115: EMPTY
44116: LIST
44117: LIST
44118: PUSH
44119: LD_INT 1
44121: NEG
44122: PUSH
44123: LD_INT 1
44125: NEG
44126: PUSH
44127: EMPTY
44128: LIST
44129: LIST
44130: PUSH
44131: LD_INT 1
44133: NEG
44134: PUSH
44135: LD_INT 2
44137: NEG
44138: PUSH
44139: EMPTY
44140: LIST
44141: LIST
44142: PUSH
44143: LD_INT 0
44145: PUSH
44146: LD_INT 2
44148: NEG
44149: PUSH
44150: EMPTY
44151: LIST
44152: LIST
44153: PUSH
44154: LD_INT 1
44156: PUSH
44157: LD_INT 1
44159: NEG
44160: PUSH
44161: EMPTY
44162: LIST
44163: LIST
44164: PUSH
44165: LD_INT 2
44167: PUSH
44168: LD_INT 0
44170: PUSH
44171: EMPTY
44172: LIST
44173: LIST
44174: PUSH
44175: LD_INT 2
44177: PUSH
44178: LD_INT 1
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 1
44187: PUSH
44188: LD_INT 2
44190: PUSH
44191: EMPTY
44192: LIST
44193: LIST
44194: PUSH
44195: LD_INT 0
44197: PUSH
44198: LD_INT 2
44200: PUSH
44201: EMPTY
44202: LIST
44203: LIST
44204: PUSH
44205: LD_INT 1
44207: NEG
44208: PUSH
44209: LD_INT 1
44211: PUSH
44212: EMPTY
44213: LIST
44214: LIST
44215: PUSH
44216: LD_INT 2
44218: NEG
44219: PUSH
44220: LD_INT 0
44222: PUSH
44223: EMPTY
44224: LIST
44225: LIST
44226: PUSH
44227: LD_INT 2
44229: NEG
44230: PUSH
44231: LD_INT 1
44233: NEG
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: LD_INT 1
44241: NEG
44242: PUSH
44243: LD_INT 3
44245: NEG
44246: PUSH
44247: EMPTY
44248: LIST
44249: LIST
44250: PUSH
44251: LD_INT 0
44253: PUSH
44254: LD_INT 3
44256: NEG
44257: PUSH
44258: EMPTY
44259: LIST
44260: LIST
44261: PUSH
44262: LD_INT 1
44264: PUSH
44265: LD_INT 2
44267: NEG
44268: PUSH
44269: EMPTY
44270: LIST
44271: LIST
44272: PUSH
44273: LD_INT 2
44275: PUSH
44276: LD_INT 1
44278: NEG
44279: PUSH
44280: EMPTY
44281: LIST
44282: LIST
44283: PUSH
44284: LD_INT 3
44286: PUSH
44287: LD_INT 0
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: LD_INT 3
44296: PUSH
44297: LD_INT 1
44299: PUSH
44300: EMPTY
44301: LIST
44302: LIST
44303: PUSH
44304: LD_INT 1
44306: PUSH
44307: LD_INT 3
44309: PUSH
44310: EMPTY
44311: LIST
44312: LIST
44313: PUSH
44314: LD_INT 0
44316: PUSH
44317: LD_INT 3
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: PUSH
44324: LD_INT 1
44326: NEG
44327: PUSH
44328: LD_INT 2
44330: PUSH
44331: EMPTY
44332: LIST
44333: LIST
44334: PUSH
44335: LD_INT 2
44337: NEG
44338: PUSH
44339: LD_INT 1
44341: PUSH
44342: EMPTY
44343: LIST
44344: LIST
44345: PUSH
44346: LD_INT 3
44348: NEG
44349: PUSH
44350: LD_INT 0
44352: PUSH
44353: EMPTY
44354: LIST
44355: LIST
44356: PUSH
44357: LD_INT 3
44359: NEG
44360: PUSH
44361: LD_INT 1
44363: NEG
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: LIST
44373: LIST
44374: LIST
44375: LIST
44376: LIST
44377: LIST
44378: LIST
44379: LIST
44380: LIST
44381: LIST
44382: LIST
44383: LIST
44384: LIST
44385: LIST
44386: LIST
44387: LIST
44388: LIST
44389: LIST
44390: LIST
44391: LIST
44392: LIST
44393: LIST
44394: LIST
44395: LIST
44396: LIST
44397: LIST
44398: LIST
44399: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44400: LD_ADDR_VAR 0 44
44404: PUSH
44405: LD_INT 0
44407: PUSH
44408: LD_INT 0
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: LD_INT 0
44417: PUSH
44418: LD_INT 1
44420: NEG
44421: PUSH
44422: EMPTY
44423: LIST
44424: LIST
44425: PUSH
44426: LD_INT 1
44428: PUSH
44429: LD_INT 0
44431: PUSH
44432: EMPTY
44433: LIST
44434: LIST
44435: PUSH
44436: LD_INT 1
44438: PUSH
44439: LD_INT 1
44441: PUSH
44442: EMPTY
44443: LIST
44444: LIST
44445: PUSH
44446: LD_INT 0
44448: PUSH
44449: LD_INT 1
44451: PUSH
44452: EMPTY
44453: LIST
44454: LIST
44455: PUSH
44456: LD_INT 1
44458: NEG
44459: PUSH
44460: LD_INT 0
44462: PUSH
44463: EMPTY
44464: LIST
44465: LIST
44466: PUSH
44467: LD_INT 1
44469: NEG
44470: PUSH
44471: LD_INT 1
44473: NEG
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 1
44481: NEG
44482: PUSH
44483: LD_INT 2
44485: NEG
44486: PUSH
44487: EMPTY
44488: LIST
44489: LIST
44490: PUSH
44491: LD_INT 1
44493: PUSH
44494: LD_INT 1
44496: NEG
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: PUSH
44502: LD_INT 2
44504: PUSH
44505: LD_INT 0
44507: PUSH
44508: EMPTY
44509: LIST
44510: LIST
44511: PUSH
44512: LD_INT 2
44514: PUSH
44515: LD_INT 1
44517: PUSH
44518: EMPTY
44519: LIST
44520: LIST
44521: PUSH
44522: LD_INT 2
44524: PUSH
44525: LD_INT 2
44527: PUSH
44528: EMPTY
44529: LIST
44530: LIST
44531: PUSH
44532: LD_INT 1
44534: PUSH
44535: LD_INT 2
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: PUSH
44542: LD_INT 1
44544: NEG
44545: PUSH
44546: LD_INT 1
44548: PUSH
44549: EMPTY
44550: LIST
44551: LIST
44552: PUSH
44553: LD_INT 2
44555: NEG
44556: PUSH
44557: LD_INT 0
44559: PUSH
44560: EMPTY
44561: LIST
44562: LIST
44563: PUSH
44564: LD_INT 2
44566: NEG
44567: PUSH
44568: LD_INT 1
44570: NEG
44571: PUSH
44572: EMPTY
44573: LIST
44574: LIST
44575: PUSH
44576: LD_INT 2
44578: NEG
44579: PUSH
44580: LD_INT 2
44582: NEG
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 2
44590: NEG
44591: PUSH
44592: LD_INT 3
44594: NEG
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 2
44602: PUSH
44603: LD_INT 1
44605: NEG
44606: PUSH
44607: EMPTY
44608: LIST
44609: LIST
44610: PUSH
44611: LD_INT 3
44613: PUSH
44614: LD_INT 0
44616: PUSH
44617: EMPTY
44618: LIST
44619: LIST
44620: PUSH
44621: LD_INT 3
44623: PUSH
44624: LD_INT 1
44626: PUSH
44627: EMPTY
44628: LIST
44629: LIST
44630: PUSH
44631: LD_INT 3
44633: PUSH
44634: LD_INT 2
44636: PUSH
44637: EMPTY
44638: LIST
44639: LIST
44640: PUSH
44641: LD_INT 3
44643: PUSH
44644: LD_INT 3
44646: PUSH
44647: EMPTY
44648: LIST
44649: LIST
44650: PUSH
44651: LD_INT 2
44653: PUSH
44654: LD_INT 3
44656: PUSH
44657: EMPTY
44658: LIST
44659: LIST
44660: PUSH
44661: LD_INT 2
44663: NEG
44664: PUSH
44665: LD_INT 1
44667: PUSH
44668: EMPTY
44669: LIST
44670: LIST
44671: PUSH
44672: LD_INT 3
44674: NEG
44675: PUSH
44676: LD_INT 0
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: PUSH
44683: LD_INT 3
44685: NEG
44686: PUSH
44687: LD_INT 1
44689: NEG
44690: PUSH
44691: EMPTY
44692: LIST
44693: LIST
44694: PUSH
44695: LD_INT 3
44697: NEG
44698: PUSH
44699: LD_INT 2
44701: NEG
44702: PUSH
44703: EMPTY
44704: LIST
44705: LIST
44706: PUSH
44707: LD_INT 3
44709: NEG
44710: PUSH
44711: LD_INT 3
44713: NEG
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: EMPTY
44720: LIST
44721: LIST
44722: LIST
44723: LIST
44724: LIST
44725: LIST
44726: LIST
44727: LIST
44728: LIST
44729: LIST
44730: LIST
44731: LIST
44732: LIST
44733: LIST
44734: LIST
44735: LIST
44736: LIST
44737: LIST
44738: LIST
44739: LIST
44740: LIST
44741: LIST
44742: LIST
44743: LIST
44744: LIST
44745: LIST
44746: LIST
44747: LIST
44748: LIST
44749: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44750: LD_ADDR_VAR 0 45
44754: PUSH
44755: LD_INT 0
44757: PUSH
44758: LD_INT 0
44760: PUSH
44761: EMPTY
44762: LIST
44763: LIST
44764: PUSH
44765: LD_INT 0
44767: PUSH
44768: LD_INT 1
44770: NEG
44771: PUSH
44772: EMPTY
44773: LIST
44774: LIST
44775: PUSH
44776: LD_INT 1
44778: PUSH
44779: LD_INT 0
44781: PUSH
44782: EMPTY
44783: LIST
44784: LIST
44785: PUSH
44786: LD_INT 1
44788: PUSH
44789: LD_INT 1
44791: PUSH
44792: EMPTY
44793: LIST
44794: LIST
44795: PUSH
44796: LD_INT 0
44798: PUSH
44799: LD_INT 1
44801: PUSH
44802: EMPTY
44803: LIST
44804: LIST
44805: PUSH
44806: LD_INT 1
44808: NEG
44809: PUSH
44810: LD_INT 0
44812: PUSH
44813: EMPTY
44814: LIST
44815: LIST
44816: PUSH
44817: LD_INT 1
44819: NEG
44820: PUSH
44821: LD_INT 1
44823: NEG
44824: PUSH
44825: EMPTY
44826: LIST
44827: LIST
44828: PUSH
44829: LD_INT 1
44831: NEG
44832: PUSH
44833: LD_INT 2
44835: NEG
44836: PUSH
44837: EMPTY
44838: LIST
44839: LIST
44840: PUSH
44841: LD_INT 0
44843: PUSH
44844: LD_INT 2
44846: NEG
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 1
44854: PUSH
44855: LD_INT 1
44857: NEG
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 2
44865: PUSH
44866: LD_INT 1
44868: PUSH
44869: EMPTY
44870: LIST
44871: LIST
44872: PUSH
44873: LD_INT 2
44875: PUSH
44876: LD_INT 2
44878: PUSH
44879: EMPTY
44880: LIST
44881: LIST
44882: PUSH
44883: LD_INT 1
44885: PUSH
44886: LD_INT 2
44888: PUSH
44889: EMPTY
44890: LIST
44891: LIST
44892: PUSH
44893: LD_INT 0
44895: PUSH
44896: LD_INT 2
44898: PUSH
44899: EMPTY
44900: LIST
44901: LIST
44902: PUSH
44903: LD_INT 1
44905: NEG
44906: PUSH
44907: LD_INT 1
44909: PUSH
44910: EMPTY
44911: LIST
44912: LIST
44913: PUSH
44914: LD_INT 2
44916: NEG
44917: PUSH
44918: LD_INT 1
44920: NEG
44921: PUSH
44922: EMPTY
44923: LIST
44924: LIST
44925: PUSH
44926: LD_INT 2
44928: NEG
44929: PUSH
44930: LD_INT 2
44932: NEG
44933: PUSH
44934: EMPTY
44935: LIST
44936: LIST
44937: PUSH
44938: LD_INT 2
44940: NEG
44941: PUSH
44942: LD_INT 3
44944: NEG
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 1
44952: NEG
44953: PUSH
44954: LD_INT 3
44956: NEG
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 0
44964: PUSH
44965: LD_INT 3
44967: NEG
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 1
44975: PUSH
44976: LD_INT 2
44978: NEG
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 3
44986: PUSH
44987: LD_INT 2
44989: PUSH
44990: EMPTY
44991: LIST
44992: LIST
44993: PUSH
44994: LD_INT 3
44996: PUSH
44997: LD_INT 3
44999: PUSH
45000: EMPTY
45001: LIST
45002: LIST
45003: PUSH
45004: LD_INT 2
45006: PUSH
45007: LD_INT 3
45009: PUSH
45010: EMPTY
45011: LIST
45012: LIST
45013: PUSH
45014: LD_INT 1
45016: PUSH
45017: LD_INT 3
45019: PUSH
45020: EMPTY
45021: LIST
45022: LIST
45023: PUSH
45024: LD_INT 0
45026: PUSH
45027: LD_INT 3
45029: PUSH
45030: EMPTY
45031: LIST
45032: LIST
45033: PUSH
45034: LD_INT 1
45036: NEG
45037: PUSH
45038: LD_INT 2
45040: PUSH
45041: EMPTY
45042: LIST
45043: LIST
45044: PUSH
45045: LD_INT 3
45047: NEG
45048: PUSH
45049: LD_INT 2
45051: NEG
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: PUSH
45057: LD_INT 3
45059: NEG
45060: PUSH
45061: LD_INT 3
45063: NEG
45064: PUSH
45065: EMPTY
45066: LIST
45067: LIST
45068: PUSH
45069: EMPTY
45070: LIST
45071: LIST
45072: LIST
45073: LIST
45074: LIST
45075: LIST
45076: LIST
45077: LIST
45078: LIST
45079: LIST
45080: LIST
45081: LIST
45082: LIST
45083: LIST
45084: LIST
45085: LIST
45086: LIST
45087: LIST
45088: LIST
45089: LIST
45090: LIST
45091: LIST
45092: LIST
45093: LIST
45094: LIST
45095: LIST
45096: LIST
45097: LIST
45098: LIST
45099: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45100: LD_ADDR_VAR 0 46
45104: PUSH
45105: LD_INT 0
45107: PUSH
45108: LD_INT 0
45110: PUSH
45111: EMPTY
45112: LIST
45113: LIST
45114: PUSH
45115: LD_INT 0
45117: PUSH
45118: LD_INT 1
45120: NEG
45121: PUSH
45122: EMPTY
45123: LIST
45124: LIST
45125: PUSH
45126: LD_INT 1
45128: PUSH
45129: LD_INT 0
45131: PUSH
45132: EMPTY
45133: LIST
45134: LIST
45135: PUSH
45136: LD_INT 1
45138: PUSH
45139: LD_INT 1
45141: PUSH
45142: EMPTY
45143: LIST
45144: LIST
45145: PUSH
45146: LD_INT 0
45148: PUSH
45149: LD_INT 1
45151: PUSH
45152: EMPTY
45153: LIST
45154: LIST
45155: PUSH
45156: LD_INT 1
45158: NEG
45159: PUSH
45160: LD_INT 0
45162: PUSH
45163: EMPTY
45164: LIST
45165: LIST
45166: PUSH
45167: LD_INT 1
45169: NEG
45170: PUSH
45171: LD_INT 1
45173: NEG
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 1
45181: NEG
45182: PUSH
45183: LD_INT 2
45185: NEG
45186: PUSH
45187: EMPTY
45188: LIST
45189: LIST
45190: PUSH
45191: LD_INT 0
45193: PUSH
45194: LD_INT 2
45196: NEG
45197: PUSH
45198: EMPTY
45199: LIST
45200: LIST
45201: PUSH
45202: LD_INT 1
45204: PUSH
45205: LD_INT 1
45207: NEG
45208: PUSH
45209: EMPTY
45210: LIST
45211: LIST
45212: PUSH
45213: LD_INT 2
45215: PUSH
45216: LD_INT 0
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 2
45225: PUSH
45226: LD_INT 1
45228: PUSH
45229: EMPTY
45230: LIST
45231: LIST
45232: PUSH
45233: LD_INT 1
45235: PUSH
45236: LD_INT 2
45238: PUSH
45239: EMPTY
45240: LIST
45241: LIST
45242: PUSH
45243: LD_INT 0
45245: PUSH
45246: LD_INT 2
45248: PUSH
45249: EMPTY
45250: LIST
45251: LIST
45252: PUSH
45253: LD_INT 1
45255: NEG
45256: PUSH
45257: LD_INT 1
45259: PUSH
45260: EMPTY
45261: LIST
45262: LIST
45263: PUSH
45264: LD_INT 2
45266: NEG
45267: PUSH
45268: LD_INT 0
45270: PUSH
45271: EMPTY
45272: LIST
45273: LIST
45274: PUSH
45275: LD_INT 2
45277: NEG
45278: PUSH
45279: LD_INT 1
45281: NEG
45282: PUSH
45283: EMPTY
45284: LIST
45285: LIST
45286: PUSH
45287: LD_INT 1
45289: NEG
45290: PUSH
45291: LD_INT 3
45293: NEG
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 0
45301: PUSH
45302: LD_INT 3
45304: NEG
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 1
45312: PUSH
45313: LD_INT 2
45315: NEG
45316: PUSH
45317: EMPTY
45318: LIST
45319: LIST
45320: PUSH
45321: LD_INT 2
45323: PUSH
45324: LD_INT 1
45326: NEG
45327: PUSH
45328: EMPTY
45329: LIST
45330: LIST
45331: PUSH
45332: LD_INT 3
45334: PUSH
45335: LD_INT 0
45337: PUSH
45338: EMPTY
45339: LIST
45340: LIST
45341: PUSH
45342: LD_INT 3
45344: PUSH
45345: LD_INT 1
45347: PUSH
45348: EMPTY
45349: LIST
45350: LIST
45351: PUSH
45352: LD_INT 1
45354: PUSH
45355: LD_INT 3
45357: PUSH
45358: EMPTY
45359: LIST
45360: LIST
45361: PUSH
45362: LD_INT 0
45364: PUSH
45365: LD_INT 3
45367: PUSH
45368: EMPTY
45369: LIST
45370: LIST
45371: PUSH
45372: LD_INT 1
45374: NEG
45375: PUSH
45376: LD_INT 2
45378: PUSH
45379: EMPTY
45380: LIST
45381: LIST
45382: PUSH
45383: LD_INT 2
45385: NEG
45386: PUSH
45387: LD_INT 1
45389: PUSH
45390: EMPTY
45391: LIST
45392: LIST
45393: PUSH
45394: LD_INT 3
45396: NEG
45397: PUSH
45398: LD_INT 0
45400: PUSH
45401: EMPTY
45402: LIST
45403: LIST
45404: PUSH
45405: LD_INT 3
45407: NEG
45408: PUSH
45409: LD_INT 1
45411: NEG
45412: PUSH
45413: EMPTY
45414: LIST
45415: LIST
45416: PUSH
45417: EMPTY
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: LIST
45425: LIST
45426: LIST
45427: LIST
45428: LIST
45429: LIST
45430: LIST
45431: LIST
45432: LIST
45433: LIST
45434: LIST
45435: LIST
45436: LIST
45437: LIST
45438: LIST
45439: LIST
45440: LIST
45441: LIST
45442: LIST
45443: LIST
45444: LIST
45445: LIST
45446: LIST
45447: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45448: LD_ADDR_VAR 0 47
45452: PUSH
45453: LD_INT 0
45455: PUSH
45456: LD_INT 0
45458: PUSH
45459: EMPTY
45460: LIST
45461: LIST
45462: PUSH
45463: LD_INT 0
45465: PUSH
45466: LD_INT 1
45468: NEG
45469: PUSH
45470: EMPTY
45471: LIST
45472: LIST
45473: PUSH
45474: LD_INT 1
45476: PUSH
45477: LD_INT 0
45479: PUSH
45480: EMPTY
45481: LIST
45482: LIST
45483: PUSH
45484: LD_INT 1
45486: PUSH
45487: LD_INT 1
45489: PUSH
45490: EMPTY
45491: LIST
45492: LIST
45493: PUSH
45494: LD_INT 0
45496: PUSH
45497: LD_INT 1
45499: PUSH
45500: EMPTY
45501: LIST
45502: LIST
45503: PUSH
45504: LD_INT 1
45506: NEG
45507: PUSH
45508: LD_INT 0
45510: PUSH
45511: EMPTY
45512: LIST
45513: LIST
45514: PUSH
45515: LD_INT 1
45517: NEG
45518: PUSH
45519: LD_INT 1
45521: NEG
45522: PUSH
45523: EMPTY
45524: LIST
45525: LIST
45526: PUSH
45527: LD_INT 1
45529: NEG
45530: PUSH
45531: LD_INT 2
45533: NEG
45534: PUSH
45535: EMPTY
45536: LIST
45537: LIST
45538: PUSH
45539: LD_INT 0
45541: PUSH
45542: LD_INT 2
45544: NEG
45545: PUSH
45546: EMPTY
45547: LIST
45548: LIST
45549: PUSH
45550: LD_INT 1
45552: PUSH
45553: LD_INT 1
45555: NEG
45556: PUSH
45557: EMPTY
45558: LIST
45559: LIST
45560: PUSH
45561: LD_INT 2
45563: NEG
45564: PUSH
45565: LD_INT 1
45567: NEG
45568: PUSH
45569: EMPTY
45570: LIST
45571: LIST
45572: PUSH
45573: LD_INT 2
45575: NEG
45576: PUSH
45577: LD_INT 2
45579: NEG
45580: PUSH
45581: EMPTY
45582: LIST
45583: LIST
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: LIST
45589: LIST
45590: LIST
45591: LIST
45592: LIST
45593: LIST
45594: LIST
45595: LIST
45596: LIST
45597: LIST
45598: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
45599: LD_ADDR_VAR 0 48
45603: PUSH
45604: LD_INT 0
45606: PUSH
45607: LD_INT 0
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 0
45616: PUSH
45617: LD_INT 1
45619: NEG
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 1
45627: PUSH
45628: LD_INT 0
45630: PUSH
45631: EMPTY
45632: LIST
45633: LIST
45634: PUSH
45635: LD_INT 1
45637: PUSH
45638: LD_INT 1
45640: PUSH
45641: EMPTY
45642: LIST
45643: LIST
45644: PUSH
45645: LD_INT 0
45647: PUSH
45648: LD_INT 1
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: PUSH
45655: LD_INT 1
45657: NEG
45658: PUSH
45659: LD_INT 0
45661: PUSH
45662: EMPTY
45663: LIST
45664: LIST
45665: PUSH
45666: LD_INT 1
45668: NEG
45669: PUSH
45670: LD_INT 1
45672: NEG
45673: PUSH
45674: EMPTY
45675: LIST
45676: LIST
45677: PUSH
45678: LD_INT 1
45680: NEG
45681: PUSH
45682: LD_INT 2
45684: NEG
45685: PUSH
45686: EMPTY
45687: LIST
45688: LIST
45689: PUSH
45690: LD_INT 0
45692: PUSH
45693: LD_INT 2
45695: NEG
45696: PUSH
45697: EMPTY
45698: LIST
45699: LIST
45700: PUSH
45701: LD_INT 1
45703: PUSH
45704: LD_INT 1
45706: NEG
45707: PUSH
45708: EMPTY
45709: LIST
45710: LIST
45711: PUSH
45712: LD_INT 2
45714: PUSH
45715: LD_INT 0
45717: PUSH
45718: EMPTY
45719: LIST
45720: LIST
45721: PUSH
45722: LD_INT 2
45724: PUSH
45725: LD_INT 1
45727: PUSH
45728: EMPTY
45729: LIST
45730: LIST
45731: PUSH
45732: EMPTY
45733: LIST
45734: LIST
45735: LIST
45736: LIST
45737: LIST
45738: LIST
45739: LIST
45740: LIST
45741: LIST
45742: LIST
45743: LIST
45744: LIST
45745: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
45746: LD_ADDR_VAR 0 49
45750: PUSH
45751: LD_INT 0
45753: PUSH
45754: LD_INT 0
45756: PUSH
45757: EMPTY
45758: LIST
45759: LIST
45760: PUSH
45761: LD_INT 0
45763: PUSH
45764: LD_INT 1
45766: NEG
45767: PUSH
45768: EMPTY
45769: LIST
45770: LIST
45771: PUSH
45772: LD_INT 1
45774: PUSH
45775: LD_INT 0
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 1
45784: PUSH
45785: LD_INT 1
45787: PUSH
45788: EMPTY
45789: LIST
45790: LIST
45791: PUSH
45792: LD_INT 0
45794: PUSH
45795: LD_INT 1
45797: PUSH
45798: EMPTY
45799: LIST
45800: LIST
45801: PUSH
45802: LD_INT 1
45804: NEG
45805: PUSH
45806: LD_INT 0
45808: PUSH
45809: EMPTY
45810: LIST
45811: LIST
45812: PUSH
45813: LD_INT 1
45815: NEG
45816: PUSH
45817: LD_INT 1
45819: NEG
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 1
45827: PUSH
45828: LD_INT 1
45830: NEG
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 2
45838: PUSH
45839: LD_INT 0
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 2
45848: PUSH
45849: LD_INT 1
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 2
45858: PUSH
45859: LD_INT 2
45861: PUSH
45862: EMPTY
45863: LIST
45864: LIST
45865: PUSH
45866: LD_INT 1
45868: PUSH
45869: LD_INT 2
45871: PUSH
45872: EMPTY
45873: LIST
45874: LIST
45875: PUSH
45876: EMPTY
45877: LIST
45878: LIST
45879: LIST
45880: LIST
45881: LIST
45882: LIST
45883: LIST
45884: LIST
45885: LIST
45886: LIST
45887: LIST
45888: LIST
45889: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
45890: LD_ADDR_VAR 0 50
45894: PUSH
45895: LD_INT 0
45897: PUSH
45898: LD_INT 0
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 0
45907: PUSH
45908: LD_INT 1
45910: NEG
45911: PUSH
45912: EMPTY
45913: LIST
45914: LIST
45915: PUSH
45916: LD_INT 1
45918: PUSH
45919: LD_INT 0
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 1
45928: PUSH
45929: LD_INT 1
45931: PUSH
45932: EMPTY
45933: LIST
45934: LIST
45935: PUSH
45936: LD_INT 0
45938: PUSH
45939: LD_INT 1
45941: PUSH
45942: EMPTY
45943: LIST
45944: LIST
45945: PUSH
45946: LD_INT 1
45948: NEG
45949: PUSH
45950: LD_INT 0
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 1
45959: NEG
45960: PUSH
45961: LD_INT 1
45963: NEG
45964: PUSH
45965: EMPTY
45966: LIST
45967: LIST
45968: PUSH
45969: LD_INT 2
45971: PUSH
45972: LD_INT 1
45974: PUSH
45975: EMPTY
45976: LIST
45977: LIST
45978: PUSH
45979: LD_INT 2
45981: PUSH
45982: LD_INT 2
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 1
45991: PUSH
45992: LD_INT 2
45994: PUSH
45995: EMPTY
45996: LIST
45997: LIST
45998: PUSH
45999: LD_INT 0
46001: PUSH
46002: LD_INT 2
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: PUSH
46009: LD_INT 1
46011: NEG
46012: PUSH
46013: LD_INT 1
46015: PUSH
46016: EMPTY
46017: LIST
46018: LIST
46019: PUSH
46020: EMPTY
46021: LIST
46022: LIST
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46034: LD_ADDR_VAR 0 51
46038: PUSH
46039: LD_INT 0
46041: PUSH
46042: LD_INT 0
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 0
46051: PUSH
46052: LD_INT 1
46054: NEG
46055: PUSH
46056: EMPTY
46057: LIST
46058: LIST
46059: PUSH
46060: LD_INT 1
46062: PUSH
46063: LD_INT 0
46065: PUSH
46066: EMPTY
46067: LIST
46068: LIST
46069: PUSH
46070: LD_INT 1
46072: PUSH
46073: LD_INT 1
46075: PUSH
46076: EMPTY
46077: LIST
46078: LIST
46079: PUSH
46080: LD_INT 0
46082: PUSH
46083: LD_INT 1
46085: PUSH
46086: EMPTY
46087: LIST
46088: LIST
46089: PUSH
46090: LD_INT 1
46092: NEG
46093: PUSH
46094: LD_INT 0
46096: PUSH
46097: EMPTY
46098: LIST
46099: LIST
46100: PUSH
46101: LD_INT 1
46103: NEG
46104: PUSH
46105: LD_INT 1
46107: NEG
46108: PUSH
46109: EMPTY
46110: LIST
46111: LIST
46112: PUSH
46113: LD_INT 1
46115: PUSH
46116: LD_INT 2
46118: PUSH
46119: EMPTY
46120: LIST
46121: LIST
46122: PUSH
46123: LD_INT 0
46125: PUSH
46126: LD_INT 2
46128: PUSH
46129: EMPTY
46130: LIST
46131: LIST
46132: PUSH
46133: LD_INT 1
46135: NEG
46136: PUSH
46137: LD_INT 1
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 2
46146: NEG
46147: PUSH
46148: LD_INT 0
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 2
46157: NEG
46158: PUSH
46159: LD_INT 1
46161: NEG
46162: PUSH
46163: EMPTY
46164: LIST
46165: LIST
46166: PUSH
46167: EMPTY
46168: LIST
46169: LIST
46170: LIST
46171: LIST
46172: LIST
46173: LIST
46174: LIST
46175: LIST
46176: LIST
46177: LIST
46178: LIST
46179: LIST
46180: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46181: LD_ADDR_VAR 0 52
46185: PUSH
46186: LD_INT 0
46188: PUSH
46189: LD_INT 0
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 0
46198: PUSH
46199: LD_INT 1
46201: NEG
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 1
46209: PUSH
46210: LD_INT 0
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 1
46219: PUSH
46220: LD_INT 1
46222: PUSH
46223: EMPTY
46224: LIST
46225: LIST
46226: PUSH
46227: LD_INT 0
46229: PUSH
46230: LD_INT 1
46232: PUSH
46233: EMPTY
46234: LIST
46235: LIST
46236: PUSH
46237: LD_INT 1
46239: NEG
46240: PUSH
46241: LD_INT 0
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 1
46250: NEG
46251: PUSH
46252: LD_INT 1
46254: NEG
46255: PUSH
46256: EMPTY
46257: LIST
46258: LIST
46259: PUSH
46260: LD_INT 1
46262: NEG
46263: PUSH
46264: LD_INT 2
46266: NEG
46267: PUSH
46268: EMPTY
46269: LIST
46270: LIST
46271: PUSH
46272: LD_INT 1
46274: NEG
46275: PUSH
46276: LD_INT 1
46278: PUSH
46279: EMPTY
46280: LIST
46281: LIST
46282: PUSH
46283: LD_INT 2
46285: NEG
46286: PUSH
46287: LD_INT 0
46289: PUSH
46290: EMPTY
46291: LIST
46292: LIST
46293: PUSH
46294: LD_INT 2
46296: NEG
46297: PUSH
46298: LD_INT 1
46300: NEG
46301: PUSH
46302: EMPTY
46303: LIST
46304: LIST
46305: PUSH
46306: LD_INT 2
46308: NEG
46309: PUSH
46310: LD_INT 2
46312: NEG
46313: PUSH
46314: EMPTY
46315: LIST
46316: LIST
46317: PUSH
46318: EMPTY
46319: LIST
46320: LIST
46321: LIST
46322: LIST
46323: LIST
46324: LIST
46325: LIST
46326: LIST
46327: LIST
46328: LIST
46329: LIST
46330: LIST
46331: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46332: LD_ADDR_VAR 0 53
46336: PUSH
46337: LD_INT 0
46339: PUSH
46340: LD_INT 0
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 0
46349: PUSH
46350: LD_INT 1
46352: NEG
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 1
46360: PUSH
46361: LD_INT 0
46363: PUSH
46364: EMPTY
46365: LIST
46366: LIST
46367: PUSH
46368: LD_INT 1
46370: PUSH
46371: LD_INT 1
46373: PUSH
46374: EMPTY
46375: LIST
46376: LIST
46377: PUSH
46378: LD_INT 0
46380: PUSH
46381: LD_INT 1
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: PUSH
46388: LD_INT 1
46390: NEG
46391: PUSH
46392: LD_INT 0
46394: PUSH
46395: EMPTY
46396: LIST
46397: LIST
46398: PUSH
46399: LD_INT 1
46401: NEG
46402: PUSH
46403: LD_INT 1
46405: NEG
46406: PUSH
46407: EMPTY
46408: LIST
46409: LIST
46410: PUSH
46411: LD_INT 1
46413: NEG
46414: PUSH
46415: LD_INT 2
46417: NEG
46418: PUSH
46419: EMPTY
46420: LIST
46421: LIST
46422: PUSH
46423: LD_INT 0
46425: PUSH
46426: LD_INT 2
46428: NEG
46429: PUSH
46430: EMPTY
46431: LIST
46432: LIST
46433: PUSH
46434: LD_INT 1
46436: PUSH
46437: LD_INT 1
46439: NEG
46440: PUSH
46441: EMPTY
46442: LIST
46443: LIST
46444: PUSH
46445: LD_INT 2
46447: PUSH
46448: LD_INT 0
46450: PUSH
46451: EMPTY
46452: LIST
46453: LIST
46454: PUSH
46455: LD_INT 2
46457: PUSH
46458: LD_INT 1
46460: PUSH
46461: EMPTY
46462: LIST
46463: LIST
46464: PUSH
46465: LD_INT 2
46467: PUSH
46468: LD_INT 2
46470: PUSH
46471: EMPTY
46472: LIST
46473: LIST
46474: PUSH
46475: LD_INT 1
46477: PUSH
46478: LD_INT 2
46480: PUSH
46481: EMPTY
46482: LIST
46483: LIST
46484: PUSH
46485: LD_INT 0
46487: PUSH
46488: LD_INT 2
46490: PUSH
46491: EMPTY
46492: LIST
46493: LIST
46494: PUSH
46495: LD_INT 1
46497: NEG
46498: PUSH
46499: LD_INT 1
46501: PUSH
46502: EMPTY
46503: LIST
46504: LIST
46505: PUSH
46506: LD_INT 2
46508: NEG
46509: PUSH
46510: LD_INT 0
46512: PUSH
46513: EMPTY
46514: LIST
46515: LIST
46516: PUSH
46517: LD_INT 2
46519: NEG
46520: PUSH
46521: LD_INT 1
46523: NEG
46524: PUSH
46525: EMPTY
46526: LIST
46527: LIST
46528: PUSH
46529: LD_INT 2
46531: NEG
46532: PUSH
46533: LD_INT 2
46535: NEG
46536: PUSH
46537: EMPTY
46538: LIST
46539: LIST
46540: PUSH
46541: EMPTY
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: LIST
46552: LIST
46553: LIST
46554: LIST
46555: LIST
46556: LIST
46557: LIST
46558: LIST
46559: LIST
46560: LIST
46561: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46562: LD_ADDR_VAR 0 54
46566: PUSH
46567: LD_INT 0
46569: PUSH
46570: LD_INT 0
46572: PUSH
46573: EMPTY
46574: LIST
46575: LIST
46576: PUSH
46577: LD_INT 0
46579: PUSH
46580: LD_INT 1
46582: NEG
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 1
46590: PUSH
46591: LD_INT 0
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 1
46600: PUSH
46601: LD_INT 1
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 0
46610: PUSH
46611: LD_INT 1
46613: PUSH
46614: EMPTY
46615: LIST
46616: LIST
46617: PUSH
46618: LD_INT 1
46620: NEG
46621: PUSH
46622: LD_INT 0
46624: PUSH
46625: EMPTY
46626: LIST
46627: LIST
46628: PUSH
46629: LD_INT 1
46631: NEG
46632: PUSH
46633: LD_INT 1
46635: NEG
46636: PUSH
46637: EMPTY
46638: LIST
46639: LIST
46640: PUSH
46641: LD_INT 1
46643: NEG
46644: PUSH
46645: LD_INT 2
46647: NEG
46648: PUSH
46649: EMPTY
46650: LIST
46651: LIST
46652: PUSH
46653: LD_INT 0
46655: PUSH
46656: LD_INT 2
46658: NEG
46659: PUSH
46660: EMPTY
46661: LIST
46662: LIST
46663: PUSH
46664: LD_INT 1
46666: PUSH
46667: LD_INT 1
46669: NEG
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 2
46677: PUSH
46678: LD_INT 0
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: LD_INT 2
46687: PUSH
46688: LD_INT 1
46690: PUSH
46691: EMPTY
46692: LIST
46693: LIST
46694: PUSH
46695: LD_INT 2
46697: PUSH
46698: LD_INT 2
46700: PUSH
46701: EMPTY
46702: LIST
46703: LIST
46704: PUSH
46705: LD_INT 1
46707: PUSH
46708: LD_INT 2
46710: PUSH
46711: EMPTY
46712: LIST
46713: LIST
46714: PUSH
46715: LD_INT 0
46717: PUSH
46718: LD_INT 2
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 1
46727: NEG
46728: PUSH
46729: LD_INT 1
46731: PUSH
46732: EMPTY
46733: LIST
46734: LIST
46735: PUSH
46736: LD_INT 2
46738: NEG
46739: PUSH
46740: LD_INT 0
46742: PUSH
46743: EMPTY
46744: LIST
46745: LIST
46746: PUSH
46747: LD_INT 2
46749: NEG
46750: PUSH
46751: LD_INT 1
46753: NEG
46754: PUSH
46755: EMPTY
46756: LIST
46757: LIST
46758: PUSH
46759: LD_INT 2
46761: NEG
46762: PUSH
46763: LD_INT 2
46765: NEG
46766: PUSH
46767: EMPTY
46768: LIST
46769: LIST
46770: PUSH
46771: EMPTY
46772: LIST
46773: LIST
46774: LIST
46775: LIST
46776: LIST
46777: LIST
46778: LIST
46779: LIST
46780: LIST
46781: LIST
46782: LIST
46783: LIST
46784: LIST
46785: LIST
46786: LIST
46787: LIST
46788: LIST
46789: LIST
46790: LIST
46791: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46792: LD_ADDR_VAR 0 55
46796: PUSH
46797: LD_INT 0
46799: PUSH
46800: LD_INT 0
46802: PUSH
46803: EMPTY
46804: LIST
46805: LIST
46806: PUSH
46807: LD_INT 0
46809: PUSH
46810: LD_INT 1
46812: NEG
46813: PUSH
46814: EMPTY
46815: LIST
46816: LIST
46817: PUSH
46818: LD_INT 1
46820: PUSH
46821: LD_INT 0
46823: PUSH
46824: EMPTY
46825: LIST
46826: LIST
46827: PUSH
46828: LD_INT 1
46830: PUSH
46831: LD_INT 1
46833: PUSH
46834: EMPTY
46835: LIST
46836: LIST
46837: PUSH
46838: LD_INT 0
46840: PUSH
46841: LD_INT 1
46843: PUSH
46844: EMPTY
46845: LIST
46846: LIST
46847: PUSH
46848: LD_INT 1
46850: NEG
46851: PUSH
46852: LD_INT 0
46854: PUSH
46855: EMPTY
46856: LIST
46857: LIST
46858: PUSH
46859: LD_INT 1
46861: NEG
46862: PUSH
46863: LD_INT 1
46865: NEG
46866: PUSH
46867: EMPTY
46868: LIST
46869: LIST
46870: PUSH
46871: LD_INT 1
46873: NEG
46874: PUSH
46875: LD_INT 2
46877: NEG
46878: PUSH
46879: EMPTY
46880: LIST
46881: LIST
46882: PUSH
46883: LD_INT 0
46885: PUSH
46886: LD_INT 2
46888: NEG
46889: PUSH
46890: EMPTY
46891: LIST
46892: LIST
46893: PUSH
46894: LD_INT 1
46896: PUSH
46897: LD_INT 1
46899: NEG
46900: PUSH
46901: EMPTY
46902: LIST
46903: LIST
46904: PUSH
46905: LD_INT 2
46907: PUSH
46908: LD_INT 0
46910: PUSH
46911: EMPTY
46912: LIST
46913: LIST
46914: PUSH
46915: LD_INT 2
46917: PUSH
46918: LD_INT 1
46920: PUSH
46921: EMPTY
46922: LIST
46923: LIST
46924: PUSH
46925: LD_INT 2
46927: PUSH
46928: LD_INT 2
46930: PUSH
46931: EMPTY
46932: LIST
46933: LIST
46934: PUSH
46935: LD_INT 1
46937: PUSH
46938: LD_INT 2
46940: PUSH
46941: EMPTY
46942: LIST
46943: LIST
46944: PUSH
46945: LD_INT 0
46947: PUSH
46948: LD_INT 2
46950: PUSH
46951: EMPTY
46952: LIST
46953: LIST
46954: PUSH
46955: LD_INT 1
46957: NEG
46958: PUSH
46959: LD_INT 1
46961: PUSH
46962: EMPTY
46963: LIST
46964: LIST
46965: PUSH
46966: LD_INT 2
46968: NEG
46969: PUSH
46970: LD_INT 0
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: PUSH
46977: LD_INT 2
46979: NEG
46980: PUSH
46981: LD_INT 1
46983: NEG
46984: PUSH
46985: EMPTY
46986: LIST
46987: LIST
46988: PUSH
46989: LD_INT 2
46991: NEG
46992: PUSH
46993: LD_INT 2
46995: NEG
46996: PUSH
46997: EMPTY
46998: LIST
46999: LIST
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47022: LD_ADDR_VAR 0 56
47026: PUSH
47027: LD_INT 0
47029: PUSH
47030: LD_INT 0
47032: PUSH
47033: EMPTY
47034: LIST
47035: LIST
47036: PUSH
47037: LD_INT 0
47039: PUSH
47040: LD_INT 1
47042: NEG
47043: PUSH
47044: EMPTY
47045: LIST
47046: LIST
47047: PUSH
47048: LD_INT 1
47050: PUSH
47051: LD_INT 0
47053: PUSH
47054: EMPTY
47055: LIST
47056: LIST
47057: PUSH
47058: LD_INT 1
47060: PUSH
47061: LD_INT 1
47063: PUSH
47064: EMPTY
47065: LIST
47066: LIST
47067: PUSH
47068: LD_INT 0
47070: PUSH
47071: LD_INT 1
47073: PUSH
47074: EMPTY
47075: LIST
47076: LIST
47077: PUSH
47078: LD_INT 1
47080: NEG
47081: PUSH
47082: LD_INT 0
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: PUSH
47089: LD_INT 1
47091: NEG
47092: PUSH
47093: LD_INT 1
47095: NEG
47096: PUSH
47097: EMPTY
47098: LIST
47099: LIST
47100: PUSH
47101: LD_INT 1
47103: NEG
47104: PUSH
47105: LD_INT 2
47107: NEG
47108: PUSH
47109: EMPTY
47110: LIST
47111: LIST
47112: PUSH
47113: LD_INT 0
47115: PUSH
47116: LD_INT 2
47118: NEG
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: PUSH
47124: LD_INT 1
47126: PUSH
47127: LD_INT 1
47129: NEG
47130: PUSH
47131: EMPTY
47132: LIST
47133: LIST
47134: PUSH
47135: LD_INT 2
47137: PUSH
47138: LD_INT 0
47140: PUSH
47141: EMPTY
47142: LIST
47143: LIST
47144: PUSH
47145: LD_INT 2
47147: PUSH
47148: LD_INT 1
47150: PUSH
47151: EMPTY
47152: LIST
47153: LIST
47154: PUSH
47155: LD_INT 2
47157: PUSH
47158: LD_INT 2
47160: PUSH
47161: EMPTY
47162: LIST
47163: LIST
47164: PUSH
47165: LD_INT 1
47167: PUSH
47168: LD_INT 2
47170: PUSH
47171: EMPTY
47172: LIST
47173: LIST
47174: PUSH
47175: LD_INT 0
47177: PUSH
47178: LD_INT 2
47180: PUSH
47181: EMPTY
47182: LIST
47183: LIST
47184: PUSH
47185: LD_INT 1
47187: NEG
47188: PUSH
47189: LD_INT 1
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 2
47198: NEG
47199: PUSH
47200: LD_INT 0
47202: PUSH
47203: EMPTY
47204: LIST
47205: LIST
47206: PUSH
47207: LD_INT 2
47209: NEG
47210: PUSH
47211: LD_INT 1
47213: NEG
47214: PUSH
47215: EMPTY
47216: LIST
47217: LIST
47218: PUSH
47219: LD_INT 2
47221: NEG
47222: PUSH
47223: LD_INT 2
47225: NEG
47226: PUSH
47227: EMPTY
47228: LIST
47229: LIST
47230: PUSH
47231: EMPTY
47232: LIST
47233: LIST
47234: LIST
47235: LIST
47236: LIST
47237: LIST
47238: LIST
47239: LIST
47240: LIST
47241: LIST
47242: LIST
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: LIST
47250: LIST
47251: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47252: LD_ADDR_VAR 0 57
47256: PUSH
47257: LD_INT 0
47259: PUSH
47260: LD_INT 0
47262: PUSH
47263: EMPTY
47264: LIST
47265: LIST
47266: PUSH
47267: LD_INT 0
47269: PUSH
47270: LD_INT 1
47272: NEG
47273: PUSH
47274: EMPTY
47275: LIST
47276: LIST
47277: PUSH
47278: LD_INT 1
47280: PUSH
47281: LD_INT 0
47283: PUSH
47284: EMPTY
47285: LIST
47286: LIST
47287: PUSH
47288: LD_INT 1
47290: PUSH
47291: LD_INT 1
47293: PUSH
47294: EMPTY
47295: LIST
47296: LIST
47297: PUSH
47298: LD_INT 0
47300: PUSH
47301: LD_INT 1
47303: PUSH
47304: EMPTY
47305: LIST
47306: LIST
47307: PUSH
47308: LD_INT 1
47310: NEG
47311: PUSH
47312: LD_INT 0
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: PUSH
47319: LD_INT 1
47321: NEG
47322: PUSH
47323: LD_INT 1
47325: NEG
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 1
47333: NEG
47334: PUSH
47335: LD_INT 2
47337: NEG
47338: PUSH
47339: EMPTY
47340: LIST
47341: LIST
47342: PUSH
47343: LD_INT 0
47345: PUSH
47346: LD_INT 2
47348: NEG
47349: PUSH
47350: EMPTY
47351: LIST
47352: LIST
47353: PUSH
47354: LD_INT 1
47356: PUSH
47357: LD_INT 1
47359: NEG
47360: PUSH
47361: EMPTY
47362: LIST
47363: LIST
47364: PUSH
47365: LD_INT 2
47367: PUSH
47368: LD_INT 0
47370: PUSH
47371: EMPTY
47372: LIST
47373: LIST
47374: PUSH
47375: LD_INT 2
47377: PUSH
47378: LD_INT 1
47380: PUSH
47381: EMPTY
47382: LIST
47383: LIST
47384: PUSH
47385: LD_INT 2
47387: PUSH
47388: LD_INT 2
47390: PUSH
47391: EMPTY
47392: LIST
47393: LIST
47394: PUSH
47395: LD_INT 1
47397: PUSH
47398: LD_INT 2
47400: PUSH
47401: EMPTY
47402: LIST
47403: LIST
47404: PUSH
47405: LD_INT 0
47407: PUSH
47408: LD_INT 2
47410: PUSH
47411: EMPTY
47412: LIST
47413: LIST
47414: PUSH
47415: LD_INT 1
47417: NEG
47418: PUSH
47419: LD_INT 1
47421: PUSH
47422: EMPTY
47423: LIST
47424: LIST
47425: PUSH
47426: LD_INT 2
47428: NEG
47429: PUSH
47430: LD_INT 0
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: PUSH
47437: LD_INT 2
47439: NEG
47440: PUSH
47441: LD_INT 1
47443: NEG
47444: PUSH
47445: EMPTY
47446: LIST
47447: LIST
47448: PUSH
47449: LD_INT 2
47451: NEG
47452: PUSH
47453: LD_INT 2
47455: NEG
47456: PUSH
47457: EMPTY
47458: LIST
47459: LIST
47460: PUSH
47461: EMPTY
47462: LIST
47463: LIST
47464: LIST
47465: LIST
47466: LIST
47467: LIST
47468: LIST
47469: LIST
47470: LIST
47471: LIST
47472: LIST
47473: LIST
47474: LIST
47475: LIST
47476: LIST
47477: LIST
47478: LIST
47479: LIST
47480: LIST
47481: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47482: LD_ADDR_VAR 0 58
47486: PUSH
47487: LD_INT 0
47489: PUSH
47490: LD_INT 0
47492: PUSH
47493: EMPTY
47494: LIST
47495: LIST
47496: PUSH
47497: LD_INT 0
47499: PUSH
47500: LD_INT 1
47502: NEG
47503: PUSH
47504: EMPTY
47505: LIST
47506: LIST
47507: PUSH
47508: LD_INT 1
47510: PUSH
47511: LD_INT 0
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: PUSH
47518: LD_INT 1
47520: PUSH
47521: LD_INT 1
47523: PUSH
47524: EMPTY
47525: LIST
47526: LIST
47527: PUSH
47528: LD_INT 0
47530: PUSH
47531: LD_INT 1
47533: PUSH
47534: EMPTY
47535: LIST
47536: LIST
47537: PUSH
47538: LD_INT 1
47540: NEG
47541: PUSH
47542: LD_INT 0
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: PUSH
47549: LD_INT 1
47551: NEG
47552: PUSH
47553: LD_INT 1
47555: NEG
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 1
47563: NEG
47564: PUSH
47565: LD_INT 2
47567: NEG
47568: PUSH
47569: EMPTY
47570: LIST
47571: LIST
47572: PUSH
47573: LD_INT 0
47575: PUSH
47576: LD_INT 2
47578: NEG
47579: PUSH
47580: EMPTY
47581: LIST
47582: LIST
47583: PUSH
47584: LD_INT 1
47586: PUSH
47587: LD_INT 1
47589: NEG
47590: PUSH
47591: EMPTY
47592: LIST
47593: LIST
47594: PUSH
47595: LD_INT 2
47597: PUSH
47598: LD_INT 0
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 2
47607: PUSH
47608: LD_INT 1
47610: PUSH
47611: EMPTY
47612: LIST
47613: LIST
47614: PUSH
47615: LD_INT 2
47617: PUSH
47618: LD_INT 2
47620: PUSH
47621: EMPTY
47622: LIST
47623: LIST
47624: PUSH
47625: LD_INT 1
47627: PUSH
47628: LD_INT 2
47630: PUSH
47631: EMPTY
47632: LIST
47633: LIST
47634: PUSH
47635: LD_INT 0
47637: PUSH
47638: LD_INT 2
47640: PUSH
47641: EMPTY
47642: LIST
47643: LIST
47644: PUSH
47645: LD_INT 1
47647: NEG
47648: PUSH
47649: LD_INT 1
47651: PUSH
47652: EMPTY
47653: LIST
47654: LIST
47655: PUSH
47656: LD_INT 2
47658: NEG
47659: PUSH
47660: LD_INT 0
47662: PUSH
47663: EMPTY
47664: LIST
47665: LIST
47666: PUSH
47667: LD_INT 2
47669: NEG
47670: PUSH
47671: LD_INT 1
47673: NEG
47674: PUSH
47675: EMPTY
47676: LIST
47677: LIST
47678: PUSH
47679: LD_INT 2
47681: NEG
47682: PUSH
47683: LD_INT 2
47685: NEG
47686: PUSH
47687: EMPTY
47688: LIST
47689: LIST
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: LIST
47699: LIST
47700: LIST
47701: LIST
47702: LIST
47703: LIST
47704: LIST
47705: LIST
47706: LIST
47707: LIST
47708: LIST
47709: LIST
47710: LIST
47711: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47712: LD_ADDR_VAR 0 59
47716: PUSH
47717: LD_INT 0
47719: PUSH
47720: LD_INT 0
47722: PUSH
47723: EMPTY
47724: LIST
47725: LIST
47726: PUSH
47727: LD_INT 0
47729: PUSH
47730: LD_INT 1
47732: NEG
47733: PUSH
47734: EMPTY
47735: LIST
47736: LIST
47737: PUSH
47738: LD_INT 1
47740: PUSH
47741: LD_INT 0
47743: PUSH
47744: EMPTY
47745: LIST
47746: LIST
47747: PUSH
47748: LD_INT 1
47750: PUSH
47751: LD_INT 1
47753: PUSH
47754: EMPTY
47755: LIST
47756: LIST
47757: PUSH
47758: LD_INT 0
47760: PUSH
47761: LD_INT 1
47763: PUSH
47764: EMPTY
47765: LIST
47766: LIST
47767: PUSH
47768: LD_INT 1
47770: NEG
47771: PUSH
47772: LD_INT 0
47774: PUSH
47775: EMPTY
47776: LIST
47777: LIST
47778: PUSH
47779: LD_INT 1
47781: NEG
47782: PUSH
47783: LD_INT 1
47785: NEG
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: EMPTY
47792: LIST
47793: LIST
47794: LIST
47795: LIST
47796: LIST
47797: LIST
47798: LIST
47799: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47800: LD_ADDR_VAR 0 60
47804: PUSH
47805: LD_INT 0
47807: PUSH
47808: LD_INT 0
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: PUSH
47815: LD_INT 0
47817: PUSH
47818: LD_INT 1
47820: NEG
47821: PUSH
47822: EMPTY
47823: LIST
47824: LIST
47825: PUSH
47826: LD_INT 1
47828: PUSH
47829: LD_INT 0
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 1
47838: PUSH
47839: LD_INT 1
47841: PUSH
47842: EMPTY
47843: LIST
47844: LIST
47845: PUSH
47846: LD_INT 0
47848: PUSH
47849: LD_INT 1
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: PUSH
47856: LD_INT 1
47858: NEG
47859: PUSH
47860: LD_INT 0
47862: PUSH
47863: EMPTY
47864: LIST
47865: LIST
47866: PUSH
47867: LD_INT 1
47869: NEG
47870: PUSH
47871: LD_INT 1
47873: NEG
47874: PUSH
47875: EMPTY
47876: LIST
47877: LIST
47878: PUSH
47879: EMPTY
47880: LIST
47881: LIST
47882: LIST
47883: LIST
47884: LIST
47885: LIST
47886: LIST
47887: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47888: LD_ADDR_VAR 0 61
47892: PUSH
47893: LD_INT 0
47895: PUSH
47896: LD_INT 0
47898: PUSH
47899: EMPTY
47900: LIST
47901: LIST
47902: PUSH
47903: LD_INT 0
47905: PUSH
47906: LD_INT 1
47908: NEG
47909: PUSH
47910: EMPTY
47911: LIST
47912: LIST
47913: PUSH
47914: LD_INT 1
47916: PUSH
47917: LD_INT 0
47919: PUSH
47920: EMPTY
47921: LIST
47922: LIST
47923: PUSH
47924: LD_INT 1
47926: PUSH
47927: LD_INT 1
47929: PUSH
47930: EMPTY
47931: LIST
47932: LIST
47933: PUSH
47934: LD_INT 0
47936: PUSH
47937: LD_INT 1
47939: PUSH
47940: EMPTY
47941: LIST
47942: LIST
47943: PUSH
47944: LD_INT 1
47946: NEG
47947: PUSH
47948: LD_INT 0
47950: PUSH
47951: EMPTY
47952: LIST
47953: LIST
47954: PUSH
47955: LD_INT 1
47957: NEG
47958: PUSH
47959: LD_INT 1
47961: NEG
47962: PUSH
47963: EMPTY
47964: LIST
47965: LIST
47966: PUSH
47967: EMPTY
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: LIST
47975: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
47976: LD_ADDR_VAR 0 62
47980: PUSH
47981: LD_INT 0
47983: PUSH
47984: LD_INT 0
47986: PUSH
47987: EMPTY
47988: LIST
47989: LIST
47990: PUSH
47991: LD_INT 0
47993: PUSH
47994: LD_INT 1
47996: NEG
47997: PUSH
47998: EMPTY
47999: LIST
48000: LIST
48001: PUSH
48002: LD_INT 1
48004: PUSH
48005: LD_INT 0
48007: PUSH
48008: EMPTY
48009: LIST
48010: LIST
48011: PUSH
48012: LD_INT 1
48014: PUSH
48015: LD_INT 1
48017: PUSH
48018: EMPTY
48019: LIST
48020: LIST
48021: PUSH
48022: LD_INT 0
48024: PUSH
48025: LD_INT 1
48027: PUSH
48028: EMPTY
48029: LIST
48030: LIST
48031: PUSH
48032: LD_INT 1
48034: NEG
48035: PUSH
48036: LD_INT 0
48038: PUSH
48039: EMPTY
48040: LIST
48041: LIST
48042: PUSH
48043: LD_INT 1
48045: NEG
48046: PUSH
48047: LD_INT 1
48049: NEG
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: EMPTY
48056: LIST
48057: LIST
48058: LIST
48059: LIST
48060: LIST
48061: LIST
48062: LIST
48063: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48064: LD_ADDR_VAR 0 63
48068: PUSH
48069: LD_INT 0
48071: PUSH
48072: LD_INT 0
48074: PUSH
48075: EMPTY
48076: LIST
48077: LIST
48078: PUSH
48079: LD_INT 0
48081: PUSH
48082: LD_INT 1
48084: NEG
48085: PUSH
48086: EMPTY
48087: LIST
48088: LIST
48089: PUSH
48090: LD_INT 1
48092: PUSH
48093: LD_INT 0
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: PUSH
48100: LD_INT 1
48102: PUSH
48103: LD_INT 1
48105: PUSH
48106: EMPTY
48107: LIST
48108: LIST
48109: PUSH
48110: LD_INT 0
48112: PUSH
48113: LD_INT 1
48115: PUSH
48116: EMPTY
48117: LIST
48118: LIST
48119: PUSH
48120: LD_INT 1
48122: NEG
48123: PUSH
48124: LD_INT 0
48126: PUSH
48127: EMPTY
48128: LIST
48129: LIST
48130: PUSH
48131: LD_INT 1
48133: NEG
48134: PUSH
48135: LD_INT 1
48137: NEG
48138: PUSH
48139: EMPTY
48140: LIST
48141: LIST
48142: PUSH
48143: EMPTY
48144: LIST
48145: LIST
48146: LIST
48147: LIST
48148: LIST
48149: LIST
48150: LIST
48151: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48152: LD_ADDR_VAR 0 64
48156: PUSH
48157: LD_INT 0
48159: PUSH
48160: LD_INT 0
48162: PUSH
48163: EMPTY
48164: LIST
48165: LIST
48166: PUSH
48167: LD_INT 0
48169: PUSH
48170: LD_INT 1
48172: NEG
48173: PUSH
48174: EMPTY
48175: LIST
48176: LIST
48177: PUSH
48178: LD_INT 1
48180: PUSH
48181: LD_INT 0
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: PUSH
48188: LD_INT 1
48190: PUSH
48191: LD_INT 1
48193: PUSH
48194: EMPTY
48195: LIST
48196: LIST
48197: PUSH
48198: LD_INT 0
48200: PUSH
48201: LD_INT 1
48203: PUSH
48204: EMPTY
48205: LIST
48206: LIST
48207: PUSH
48208: LD_INT 1
48210: NEG
48211: PUSH
48212: LD_INT 0
48214: PUSH
48215: EMPTY
48216: LIST
48217: LIST
48218: PUSH
48219: LD_INT 1
48221: NEG
48222: PUSH
48223: LD_INT 1
48225: NEG
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: EMPTY
48232: LIST
48233: LIST
48234: LIST
48235: LIST
48236: LIST
48237: LIST
48238: LIST
48239: ST_TO_ADDR
// end ; 1 :
48240: GO 54137
48242: LD_INT 1
48244: DOUBLE
48245: EQUAL
48246: IFTRUE 48250
48248: GO 50873
48250: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48251: LD_ADDR_VAR 0 11
48255: PUSH
48256: LD_INT 1
48258: NEG
48259: PUSH
48260: LD_INT 3
48262: NEG
48263: PUSH
48264: EMPTY
48265: LIST
48266: LIST
48267: PUSH
48268: LD_INT 0
48270: PUSH
48271: LD_INT 3
48273: NEG
48274: PUSH
48275: EMPTY
48276: LIST
48277: LIST
48278: PUSH
48279: LD_INT 1
48281: PUSH
48282: LD_INT 2
48284: NEG
48285: PUSH
48286: EMPTY
48287: LIST
48288: LIST
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: LIST
48294: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48295: LD_ADDR_VAR 0 12
48299: PUSH
48300: LD_INT 2
48302: PUSH
48303: LD_INT 1
48305: NEG
48306: PUSH
48307: EMPTY
48308: LIST
48309: LIST
48310: PUSH
48311: LD_INT 3
48313: PUSH
48314: LD_INT 0
48316: PUSH
48317: EMPTY
48318: LIST
48319: LIST
48320: PUSH
48321: LD_INT 3
48323: PUSH
48324: LD_INT 1
48326: PUSH
48327: EMPTY
48328: LIST
48329: LIST
48330: PUSH
48331: EMPTY
48332: LIST
48333: LIST
48334: LIST
48335: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48336: LD_ADDR_VAR 0 13
48340: PUSH
48341: LD_INT 3
48343: PUSH
48344: LD_INT 2
48346: PUSH
48347: EMPTY
48348: LIST
48349: LIST
48350: PUSH
48351: LD_INT 3
48353: PUSH
48354: LD_INT 3
48356: PUSH
48357: EMPTY
48358: LIST
48359: LIST
48360: PUSH
48361: LD_INT 2
48363: PUSH
48364: LD_INT 3
48366: PUSH
48367: EMPTY
48368: LIST
48369: LIST
48370: PUSH
48371: EMPTY
48372: LIST
48373: LIST
48374: LIST
48375: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48376: LD_ADDR_VAR 0 14
48380: PUSH
48381: LD_INT 1
48383: PUSH
48384: LD_INT 3
48386: PUSH
48387: EMPTY
48388: LIST
48389: LIST
48390: PUSH
48391: LD_INT 0
48393: PUSH
48394: LD_INT 3
48396: PUSH
48397: EMPTY
48398: LIST
48399: LIST
48400: PUSH
48401: LD_INT 1
48403: NEG
48404: PUSH
48405: LD_INT 2
48407: PUSH
48408: EMPTY
48409: LIST
48410: LIST
48411: PUSH
48412: EMPTY
48413: LIST
48414: LIST
48415: LIST
48416: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48417: LD_ADDR_VAR 0 15
48421: PUSH
48422: LD_INT 2
48424: NEG
48425: PUSH
48426: LD_INT 1
48428: PUSH
48429: EMPTY
48430: LIST
48431: LIST
48432: PUSH
48433: LD_INT 3
48435: NEG
48436: PUSH
48437: LD_INT 0
48439: PUSH
48440: EMPTY
48441: LIST
48442: LIST
48443: PUSH
48444: LD_INT 3
48446: NEG
48447: PUSH
48448: LD_INT 1
48450: NEG
48451: PUSH
48452: EMPTY
48453: LIST
48454: LIST
48455: PUSH
48456: EMPTY
48457: LIST
48458: LIST
48459: LIST
48460: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48461: LD_ADDR_VAR 0 16
48465: PUSH
48466: LD_INT 2
48468: NEG
48469: PUSH
48470: LD_INT 3
48472: NEG
48473: PUSH
48474: EMPTY
48475: LIST
48476: LIST
48477: PUSH
48478: LD_INT 3
48480: NEG
48481: PUSH
48482: LD_INT 2
48484: NEG
48485: PUSH
48486: EMPTY
48487: LIST
48488: LIST
48489: PUSH
48490: LD_INT 3
48492: NEG
48493: PUSH
48494: LD_INT 3
48496: NEG
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: EMPTY
48503: LIST
48504: LIST
48505: LIST
48506: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48507: LD_ADDR_VAR 0 17
48511: PUSH
48512: LD_INT 1
48514: NEG
48515: PUSH
48516: LD_INT 3
48518: NEG
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PUSH
48524: LD_INT 0
48526: PUSH
48527: LD_INT 3
48529: NEG
48530: PUSH
48531: EMPTY
48532: LIST
48533: LIST
48534: PUSH
48535: LD_INT 1
48537: PUSH
48538: LD_INT 2
48540: NEG
48541: PUSH
48542: EMPTY
48543: LIST
48544: LIST
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: LIST
48550: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48551: LD_ADDR_VAR 0 18
48555: PUSH
48556: LD_INT 2
48558: PUSH
48559: LD_INT 1
48561: NEG
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_INT 3
48569: PUSH
48570: LD_INT 0
48572: PUSH
48573: EMPTY
48574: LIST
48575: LIST
48576: PUSH
48577: LD_INT 3
48579: PUSH
48580: LD_INT 1
48582: PUSH
48583: EMPTY
48584: LIST
48585: LIST
48586: PUSH
48587: EMPTY
48588: LIST
48589: LIST
48590: LIST
48591: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48592: LD_ADDR_VAR 0 19
48596: PUSH
48597: LD_INT 3
48599: PUSH
48600: LD_INT 2
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: PUSH
48607: LD_INT 3
48609: PUSH
48610: LD_INT 3
48612: PUSH
48613: EMPTY
48614: LIST
48615: LIST
48616: PUSH
48617: LD_INT 2
48619: PUSH
48620: LD_INT 3
48622: PUSH
48623: EMPTY
48624: LIST
48625: LIST
48626: PUSH
48627: EMPTY
48628: LIST
48629: LIST
48630: LIST
48631: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48632: LD_ADDR_VAR 0 20
48636: PUSH
48637: LD_INT 1
48639: PUSH
48640: LD_INT 3
48642: PUSH
48643: EMPTY
48644: LIST
48645: LIST
48646: PUSH
48647: LD_INT 0
48649: PUSH
48650: LD_INT 3
48652: PUSH
48653: EMPTY
48654: LIST
48655: LIST
48656: PUSH
48657: LD_INT 1
48659: NEG
48660: PUSH
48661: LD_INT 2
48663: PUSH
48664: EMPTY
48665: LIST
48666: LIST
48667: PUSH
48668: EMPTY
48669: LIST
48670: LIST
48671: LIST
48672: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48673: LD_ADDR_VAR 0 21
48677: PUSH
48678: LD_INT 2
48680: NEG
48681: PUSH
48682: LD_INT 1
48684: PUSH
48685: EMPTY
48686: LIST
48687: LIST
48688: PUSH
48689: LD_INT 3
48691: NEG
48692: PUSH
48693: LD_INT 0
48695: PUSH
48696: EMPTY
48697: LIST
48698: LIST
48699: PUSH
48700: LD_INT 3
48702: NEG
48703: PUSH
48704: LD_INT 1
48706: NEG
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: EMPTY
48713: LIST
48714: LIST
48715: LIST
48716: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48717: LD_ADDR_VAR 0 22
48721: PUSH
48722: LD_INT 2
48724: NEG
48725: PUSH
48726: LD_INT 3
48728: NEG
48729: PUSH
48730: EMPTY
48731: LIST
48732: LIST
48733: PUSH
48734: LD_INT 3
48736: NEG
48737: PUSH
48738: LD_INT 2
48740: NEG
48741: PUSH
48742: EMPTY
48743: LIST
48744: LIST
48745: PUSH
48746: LD_INT 3
48748: NEG
48749: PUSH
48750: LD_INT 3
48752: NEG
48753: PUSH
48754: EMPTY
48755: LIST
48756: LIST
48757: PUSH
48758: EMPTY
48759: LIST
48760: LIST
48761: LIST
48762: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
48763: LD_ADDR_VAR 0 23
48767: PUSH
48768: LD_INT 0
48770: PUSH
48771: LD_INT 3
48773: NEG
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 1
48781: NEG
48782: PUSH
48783: LD_INT 4
48785: NEG
48786: PUSH
48787: EMPTY
48788: LIST
48789: LIST
48790: PUSH
48791: LD_INT 1
48793: PUSH
48794: LD_INT 3
48796: NEG
48797: PUSH
48798: EMPTY
48799: LIST
48800: LIST
48801: PUSH
48802: EMPTY
48803: LIST
48804: LIST
48805: LIST
48806: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
48807: LD_ADDR_VAR 0 24
48811: PUSH
48812: LD_INT 3
48814: PUSH
48815: LD_INT 0
48817: PUSH
48818: EMPTY
48819: LIST
48820: LIST
48821: PUSH
48822: LD_INT 3
48824: PUSH
48825: LD_INT 1
48827: NEG
48828: PUSH
48829: EMPTY
48830: LIST
48831: LIST
48832: PUSH
48833: LD_INT 4
48835: PUSH
48836: LD_INT 1
48838: PUSH
48839: EMPTY
48840: LIST
48841: LIST
48842: PUSH
48843: EMPTY
48844: LIST
48845: LIST
48846: LIST
48847: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
48848: LD_ADDR_VAR 0 25
48852: PUSH
48853: LD_INT 3
48855: PUSH
48856: LD_INT 3
48858: PUSH
48859: EMPTY
48860: LIST
48861: LIST
48862: PUSH
48863: LD_INT 4
48865: PUSH
48866: LD_INT 3
48868: PUSH
48869: EMPTY
48870: LIST
48871: LIST
48872: PUSH
48873: LD_INT 3
48875: PUSH
48876: LD_INT 4
48878: PUSH
48879: EMPTY
48880: LIST
48881: LIST
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: LIST
48887: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
48888: LD_ADDR_VAR 0 26
48892: PUSH
48893: LD_INT 0
48895: PUSH
48896: LD_INT 3
48898: PUSH
48899: EMPTY
48900: LIST
48901: LIST
48902: PUSH
48903: LD_INT 1
48905: PUSH
48906: LD_INT 4
48908: PUSH
48909: EMPTY
48910: LIST
48911: LIST
48912: PUSH
48913: LD_INT 1
48915: NEG
48916: PUSH
48917: LD_INT 3
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: PUSH
48924: EMPTY
48925: LIST
48926: LIST
48927: LIST
48928: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
48929: LD_ADDR_VAR 0 27
48933: PUSH
48934: LD_INT 3
48936: NEG
48937: PUSH
48938: LD_INT 0
48940: PUSH
48941: EMPTY
48942: LIST
48943: LIST
48944: PUSH
48945: LD_INT 3
48947: NEG
48948: PUSH
48949: LD_INT 1
48951: PUSH
48952: EMPTY
48953: LIST
48954: LIST
48955: PUSH
48956: LD_INT 4
48958: NEG
48959: PUSH
48960: LD_INT 1
48962: NEG
48963: PUSH
48964: EMPTY
48965: LIST
48966: LIST
48967: PUSH
48968: EMPTY
48969: LIST
48970: LIST
48971: LIST
48972: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
48973: LD_ADDR_VAR 0 28
48977: PUSH
48978: LD_INT 3
48980: NEG
48981: PUSH
48982: LD_INT 3
48984: NEG
48985: PUSH
48986: EMPTY
48987: LIST
48988: LIST
48989: PUSH
48990: LD_INT 3
48992: NEG
48993: PUSH
48994: LD_INT 4
48996: NEG
48997: PUSH
48998: EMPTY
48999: LIST
49000: LIST
49001: PUSH
49002: LD_INT 4
49004: NEG
49005: PUSH
49006: LD_INT 3
49008: NEG
49009: PUSH
49010: EMPTY
49011: LIST
49012: LIST
49013: PUSH
49014: EMPTY
49015: LIST
49016: LIST
49017: LIST
49018: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
49019: LD_ADDR_VAR 0 29
49023: PUSH
49024: LD_INT 1
49026: NEG
49027: PUSH
49028: LD_INT 3
49030: NEG
49031: PUSH
49032: EMPTY
49033: LIST
49034: LIST
49035: PUSH
49036: LD_INT 0
49038: PUSH
49039: LD_INT 3
49041: NEG
49042: PUSH
49043: EMPTY
49044: LIST
49045: LIST
49046: PUSH
49047: LD_INT 1
49049: PUSH
49050: LD_INT 2
49052: NEG
49053: PUSH
49054: EMPTY
49055: LIST
49056: LIST
49057: PUSH
49058: LD_INT 1
49060: NEG
49061: PUSH
49062: LD_INT 4
49064: NEG
49065: PUSH
49066: EMPTY
49067: LIST
49068: LIST
49069: PUSH
49070: LD_INT 0
49072: PUSH
49073: LD_INT 4
49075: NEG
49076: PUSH
49077: EMPTY
49078: LIST
49079: LIST
49080: PUSH
49081: LD_INT 1
49083: PUSH
49084: LD_INT 3
49086: NEG
49087: PUSH
49088: EMPTY
49089: LIST
49090: LIST
49091: PUSH
49092: LD_INT 1
49094: NEG
49095: PUSH
49096: LD_INT 5
49098: NEG
49099: PUSH
49100: EMPTY
49101: LIST
49102: LIST
49103: PUSH
49104: LD_INT 0
49106: PUSH
49107: LD_INT 5
49109: NEG
49110: PUSH
49111: EMPTY
49112: LIST
49113: LIST
49114: PUSH
49115: LD_INT 1
49117: PUSH
49118: LD_INT 4
49120: NEG
49121: PUSH
49122: EMPTY
49123: LIST
49124: LIST
49125: PUSH
49126: LD_INT 1
49128: NEG
49129: PUSH
49130: LD_INT 6
49132: NEG
49133: PUSH
49134: EMPTY
49135: LIST
49136: LIST
49137: PUSH
49138: LD_INT 0
49140: PUSH
49141: LD_INT 6
49143: NEG
49144: PUSH
49145: EMPTY
49146: LIST
49147: LIST
49148: PUSH
49149: LD_INT 1
49151: PUSH
49152: LD_INT 5
49154: NEG
49155: PUSH
49156: EMPTY
49157: LIST
49158: LIST
49159: PUSH
49160: EMPTY
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
49174: LD_ADDR_VAR 0 30
49178: PUSH
49179: LD_INT 2
49181: PUSH
49182: LD_INT 1
49184: NEG
49185: PUSH
49186: EMPTY
49187: LIST
49188: LIST
49189: PUSH
49190: LD_INT 3
49192: PUSH
49193: LD_INT 0
49195: PUSH
49196: EMPTY
49197: LIST
49198: LIST
49199: PUSH
49200: LD_INT 3
49202: PUSH
49203: LD_INT 1
49205: PUSH
49206: EMPTY
49207: LIST
49208: LIST
49209: PUSH
49210: LD_INT 3
49212: PUSH
49213: LD_INT 1
49215: NEG
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 4
49223: PUSH
49224: LD_INT 0
49226: PUSH
49227: EMPTY
49228: LIST
49229: LIST
49230: PUSH
49231: LD_INT 4
49233: PUSH
49234: LD_INT 1
49236: PUSH
49237: EMPTY
49238: LIST
49239: LIST
49240: PUSH
49241: LD_INT 4
49243: PUSH
49244: LD_INT 1
49246: NEG
49247: PUSH
49248: EMPTY
49249: LIST
49250: LIST
49251: PUSH
49252: LD_INT 5
49254: PUSH
49255: LD_INT 0
49257: PUSH
49258: EMPTY
49259: LIST
49260: LIST
49261: PUSH
49262: LD_INT 5
49264: PUSH
49265: LD_INT 1
49267: PUSH
49268: EMPTY
49269: LIST
49270: LIST
49271: PUSH
49272: LD_INT 5
49274: PUSH
49275: LD_INT 1
49277: NEG
49278: PUSH
49279: EMPTY
49280: LIST
49281: LIST
49282: PUSH
49283: LD_INT 6
49285: PUSH
49286: LD_INT 0
49288: PUSH
49289: EMPTY
49290: LIST
49291: LIST
49292: PUSH
49293: LD_INT 6
49295: PUSH
49296: LD_INT 1
49298: PUSH
49299: EMPTY
49300: LIST
49301: LIST
49302: PUSH
49303: EMPTY
49304: LIST
49305: LIST
49306: LIST
49307: LIST
49308: LIST
49309: LIST
49310: LIST
49311: LIST
49312: LIST
49313: LIST
49314: LIST
49315: LIST
49316: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
49317: LD_ADDR_VAR 0 31
49321: PUSH
49322: LD_INT 3
49324: PUSH
49325: LD_INT 2
49327: PUSH
49328: EMPTY
49329: LIST
49330: LIST
49331: PUSH
49332: LD_INT 3
49334: PUSH
49335: LD_INT 3
49337: PUSH
49338: EMPTY
49339: LIST
49340: LIST
49341: PUSH
49342: LD_INT 2
49344: PUSH
49345: LD_INT 3
49347: PUSH
49348: EMPTY
49349: LIST
49350: LIST
49351: PUSH
49352: LD_INT 4
49354: PUSH
49355: LD_INT 3
49357: PUSH
49358: EMPTY
49359: LIST
49360: LIST
49361: PUSH
49362: LD_INT 4
49364: PUSH
49365: LD_INT 4
49367: PUSH
49368: EMPTY
49369: LIST
49370: LIST
49371: PUSH
49372: LD_INT 3
49374: PUSH
49375: LD_INT 4
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 5
49384: PUSH
49385: LD_INT 4
49387: PUSH
49388: EMPTY
49389: LIST
49390: LIST
49391: PUSH
49392: LD_INT 5
49394: PUSH
49395: LD_INT 5
49397: PUSH
49398: EMPTY
49399: LIST
49400: LIST
49401: PUSH
49402: LD_INT 4
49404: PUSH
49405: LD_INT 5
49407: PUSH
49408: EMPTY
49409: LIST
49410: LIST
49411: PUSH
49412: LD_INT 6
49414: PUSH
49415: LD_INT 5
49417: PUSH
49418: EMPTY
49419: LIST
49420: LIST
49421: PUSH
49422: LD_INT 6
49424: PUSH
49425: LD_INT 6
49427: PUSH
49428: EMPTY
49429: LIST
49430: LIST
49431: PUSH
49432: LD_INT 5
49434: PUSH
49435: LD_INT 6
49437: PUSH
49438: EMPTY
49439: LIST
49440: LIST
49441: PUSH
49442: EMPTY
49443: LIST
49444: LIST
49445: LIST
49446: LIST
49447: LIST
49448: LIST
49449: LIST
49450: LIST
49451: LIST
49452: LIST
49453: LIST
49454: LIST
49455: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
49456: LD_ADDR_VAR 0 32
49460: PUSH
49461: LD_INT 1
49463: PUSH
49464: LD_INT 3
49466: PUSH
49467: EMPTY
49468: LIST
49469: LIST
49470: PUSH
49471: LD_INT 0
49473: PUSH
49474: LD_INT 3
49476: PUSH
49477: EMPTY
49478: LIST
49479: LIST
49480: PUSH
49481: LD_INT 1
49483: NEG
49484: PUSH
49485: LD_INT 2
49487: PUSH
49488: EMPTY
49489: LIST
49490: LIST
49491: PUSH
49492: LD_INT 1
49494: PUSH
49495: LD_INT 4
49497: PUSH
49498: EMPTY
49499: LIST
49500: LIST
49501: PUSH
49502: LD_INT 0
49504: PUSH
49505: LD_INT 4
49507: PUSH
49508: EMPTY
49509: LIST
49510: LIST
49511: PUSH
49512: LD_INT 1
49514: NEG
49515: PUSH
49516: LD_INT 3
49518: PUSH
49519: EMPTY
49520: LIST
49521: LIST
49522: PUSH
49523: LD_INT 1
49525: PUSH
49526: LD_INT 5
49528: PUSH
49529: EMPTY
49530: LIST
49531: LIST
49532: PUSH
49533: LD_INT 0
49535: PUSH
49536: LD_INT 5
49538: PUSH
49539: EMPTY
49540: LIST
49541: LIST
49542: PUSH
49543: LD_INT 1
49545: NEG
49546: PUSH
49547: LD_INT 4
49549: PUSH
49550: EMPTY
49551: LIST
49552: LIST
49553: PUSH
49554: LD_INT 1
49556: PUSH
49557: LD_INT 6
49559: PUSH
49560: EMPTY
49561: LIST
49562: LIST
49563: PUSH
49564: LD_INT 0
49566: PUSH
49567: LD_INT 6
49569: PUSH
49570: EMPTY
49571: LIST
49572: LIST
49573: PUSH
49574: LD_INT 1
49576: NEG
49577: PUSH
49578: LD_INT 5
49580: PUSH
49581: EMPTY
49582: LIST
49583: LIST
49584: PUSH
49585: EMPTY
49586: LIST
49587: LIST
49588: LIST
49589: LIST
49590: LIST
49591: LIST
49592: LIST
49593: LIST
49594: LIST
49595: LIST
49596: LIST
49597: LIST
49598: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
49599: LD_ADDR_VAR 0 33
49603: PUSH
49604: LD_INT 2
49606: NEG
49607: PUSH
49608: LD_INT 1
49610: PUSH
49611: EMPTY
49612: LIST
49613: LIST
49614: PUSH
49615: LD_INT 3
49617: NEG
49618: PUSH
49619: LD_INT 0
49621: PUSH
49622: EMPTY
49623: LIST
49624: LIST
49625: PUSH
49626: LD_INT 3
49628: NEG
49629: PUSH
49630: LD_INT 1
49632: NEG
49633: PUSH
49634: EMPTY
49635: LIST
49636: LIST
49637: PUSH
49638: LD_INT 3
49640: NEG
49641: PUSH
49642: LD_INT 1
49644: PUSH
49645: EMPTY
49646: LIST
49647: LIST
49648: PUSH
49649: LD_INT 4
49651: NEG
49652: PUSH
49653: LD_INT 0
49655: PUSH
49656: EMPTY
49657: LIST
49658: LIST
49659: PUSH
49660: LD_INT 4
49662: NEG
49663: PUSH
49664: LD_INT 1
49666: NEG
49667: PUSH
49668: EMPTY
49669: LIST
49670: LIST
49671: PUSH
49672: LD_INT 4
49674: NEG
49675: PUSH
49676: LD_INT 1
49678: PUSH
49679: EMPTY
49680: LIST
49681: LIST
49682: PUSH
49683: LD_INT 5
49685: NEG
49686: PUSH
49687: LD_INT 0
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: LD_INT 5
49696: NEG
49697: PUSH
49698: LD_INT 1
49700: NEG
49701: PUSH
49702: EMPTY
49703: LIST
49704: LIST
49705: PUSH
49706: LD_INT 5
49708: NEG
49709: PUSH
49710: LD_INT 1
49712: PUSH
49713: EMPTY
49714: LIST
49715: LIST
49716: PUSH
49717: LD_INT 6
49719: NEG
49720: PUSH
49721: LD_INT 0
49723: PUSH
49724: EMPTY
49725: LIST
49726: LIST
49727: PUSH
49728: LD_INT 6
49730: NEG
49731: PUSH
49732: LD_INT 1
49734: NEG
49735: PUSH
49736: EMPTY
49737: LIST
49738: LIST
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: LIST
49744: LIST
49745: LIST
49746: LIST
49747: LIST
49748: LIST
49749: LIST
49750: LIST
49751: LIST
49752: LIST
49753: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
49754: LD_ADDR_VAR 0 34
49758: PUSH
49759: LD_INT 2
49761: NEG
49762: PUSH
49763: LD_INT 3
49765: NEG
49766: PUSH
49767: EMPTY
49768: LIST
49769: LIST
49770: PUSH
49771: LD_INT 3
49773: NEG
49774: PUSH
49775: LD_INT 2
49777: NEG
49778: PUSH
49779: EMPTY
49780: LIST
49781: LIST
49782: PUSH
49783: LD_INT 3
49785: NEG
49786: PUSH
49787: LD_INT 3
49789: NEG
49790: PUSH
49791: EMPTY
49792: LIST
49793: LIST
49794: PUSH
49795: LD_INT 3
49797: NEG
49798: PUSH
49799: LD_INT 4
49801: NEG
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 4
49809: NEG
49810: PUSH
49811: LD_INT 3
49813: NEG
49814: PUSH
49815: EMPTY
49816: LIST
49817: LIST
49818: PUSH
49819: LD_INT 4
49821: NEG
49822: PUSH
49823: LD_INT 4
49825: NEG
49826: PUSH
49827: EMPTY
49828: LIST
49829: LIST
49830: PUSH
49831: LD_INT 4
49833: NEG
49834: PUSH
49835: LD_INT 5
49837: NEG
49838: PUSH
49839: EMPTY
49840: LIST
49841: LIST
49842: PUSH
49843: LD_INT 5
49845: NEG
49846: PUSH
49847: LD_INT 4
49849: NEG
49850: PUSH
49851: EMPTY
49852: LIST
49853: LIST
49854: PUSH
49855: LD_INT 5
49857: NEG
49858: PUSH
49859: LD_INT 5
49861: NEG
49862: PUSH
49863: EMPTY
49864: LIST
49865: LIST
49866: PUSH
49867: LD_INT 5
49869: NEG
49870: PUSH
49871: LD_INT 6
49873: NEG
49874: PUSH
49875: EMPTY
49876: LIST
49877: LIST
49878: PUSH
49879: LD_INT 6
49881: NEG
49882: PUSH
49883: LD_INT 5
49885: NEG
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: PUSH
49891: LD_INT 6
49893: NEG
49894: PUSH
49895: LD_INT 6
49897: NEG
49898: PUSH
49899: EMPTY
49900: LIST
49901: LIST
49902: PUSH
49903: EMPTY
49904: LIST
49905: LIST
49906: LIST
49907: LIST
49908: LIST
49909: LIST
49910: LIST
49911: LIST
49912: LIST
49913: LIST
49914: LIST
49915: LIST
49916: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
49917: LD_ADDR_VAR 0 41
49921: PUSH
49922: LD_INT 0
49924: PUSH
49925: LD_INT 2
49927: NEG
49928: PUSH
49929: EMPTY
49930: LIST
49931: LIST
49932: PUSH
49933: LD_INT 1
49935: NEG
49936: PUSH
49937: LD_INT 3
49939: NEG
49940: PUSH
49941: EMPTY
49942: LIST
49943: LIST
49944: PUSH
49945: LD_INT 1
49947: PUSH
49948: LD_INT 2
49950: NEG
49951: PUSH
49952: EMPTY
49953: LIST
49954: LIST
49955: PUSH
49956: EMPTY
49957: LIST
49958: LIST
49959: LIST
49960: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
49961: LD_ADDR_VAR 0 42
49965: PUSH
49966: LD_INT 2
49968: PUSH
49969: LD_INT 0
49971: PUSH
49972: EMPTY
49973: LIST
49974: LIST
49975: PUSH
49976: LD_INT 2
49978: PUSH
49979: LD_INT 1
49981: NEG
49982: PUSH
49983: EMPTY
49984: LIST
49985: LIST
49986: PUSH
49987: LD_INT 3
49989: PUSH
49990: LD_INT 1
49992: PUSH
49993: EMPTY
49994: LIST
49995: LIST
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: LIST
50001: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
50002: LD_ADDR_VAR 0 43
50006: PUSH
50007: LD_INT 2
50009: PUSH
50010: LD_INT 2
50012: PUSH
50013: EMPTY
50014: LIST
50015: LIST
50016: PUSH
50017: LD_INT 3
50019: PUSH
50020: LD_INT 2
50022: PUSH
50023: EMPTY
50024: LIST
50025: LIST
50026: PUSH
50027: LD_INT 2
50029: PUSH
50030: LD_INT 3
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: EMPTY
50038: LIST
50039: LIST
50040: LIST
50041: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
50042: LD_ADDR_VAR 0 44
50046: PUSH
50047: LD_INT 0
50049: PUSH
50050: LD_INT 2
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 1
50059: PUSH
50060: LD_INT 3
50062: PUSH
50063: EMPTY
50064: LIST
50065: LIST
50066: PUSH
50067: LD_INT 1
50069: NEG
50070: PUSH
50071: LD_INT 2
50073: PUSH
50074: EMPTY
50075: LIST
50076: LIST
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: LIST
50082: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
50083: LD_ADDR_VAR 0 45
50087: PUSH
50088: LD_INT 2
50090: NEG
50091: PUSH
50092: LD_INT 0
50094: PUSH
50095: EMPTY
50096: LIST
50097: LIST
50098: PUSH
50099: LD_INT 2
50101: NEG
50102: PUSH
50103: LD_INT 1
50105: PUSH
50106: EMPTY
50107: LIST
50108: LIST
50109: PUSH
50110: LD_INT 3
50112: NEG
50113: PUSH
50114: LD_INT 1
50116: NEG
50117: PUSH
50118: EMPTY
50119: LIST
50120: LIST
50121: PUSH
50122: EMPTY
50123: LIST
50124: LIST
50125: LIST
50126: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
50127: LD_ADDR_VAR 0 46
50131: PUSH
50132: LD_INT 2
50134: NEG
50135: PUSH
50136: LD_INT 2
50138: NEG
50139: PUSH
50140: EMPTY
50141: LIST
50142: LIST
50143: PUSH
50144: LD_INT 2
50146: NEG
50147: PUSH
50148: LD_INT 3
50150: NEG
50151: PUSH
50152: EMPTY
50153: LIST
50154: LIST
50155: PUSH
50156: LD_INT 3
50158: NEG
50159: PUSH
50160: LD_INT 2
50162: NEG
50163: PUSH
50164: EMPTY
50165: LIST
50166: LIST
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: LIST
50172: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
50173: LD_ADDR_VAR 0 47
50177: PUSH
50178: LD_INT 2
50180: NEG
50181: PUSH
50182: LD_INT 3
50184: NEG
50185: PUSH
50186: EMPTY
50187: LIST
50188: LIST
50189: PUSH
50190: LD_INT 1
50192: NEG
50193: PUSH
50194: LD_INT 3
50196: NEG
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: EMPTY
50203: LIST
50204: LIST
50205: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
50206: LD_ADDR_VAR 0 48
50210: PUSH
50211: LD_INT 1
50213: PUSH
50214: LD_INT 2
50216: NEG
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: PUSH
50222: LD_INT 2
50224: PUSH
50225: LD_INT 1
50227: NEG
50228: PUSH
50229: EMPTY
50230: LIST
50231: LIST
50232: PUSH
50233: EMPTY
50234: LIST
50235: LIST
50236: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
50237: LD_ADDR_VAR 0 49
50241: PUSH
50242: LD_INT 3
50244: PUSH
50245: LD_INT 1
50247: PUSH
50248: EMPTY
50249: LIST
50250: LIST
50251: PUSH
50252: LD_INT 3
50254: PUSH
50255: LD_INT 2
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: PUSH
50262: EMPTY
50263: LIST
50264: LIST
50265: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
50266: LD_ADDR_VAR 0 50
50270: PUSH
50271: LD_INT 2
50273: PUSH
50274: LD_INT 3
50276: PUSH
50277: EMPTY
50278: LIST
50279: LIST
50280: PUSH
50281: LD_INT 1
50283: PUSH
50284: LD_INT 3
50286: PUSH
50287: EMPTY
50288: LIST
50289: LIST
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
50295: LD_ADDR_VAR 0 51
50299: PUSH
50300: LD_INT 1
50302: NEG
50303: PUSH
50304: LD_INT 2
50306: PUSH
50307: EMPTY
50308: LIST
50309: LIST
50310: PUSH
50311: LD_INT 2
50313: NEG
50314: PUSH
50315: LD_INT 1
50317: PUSH
50318: EMPTY
50319: LIST
50320: LIST
50321: PUSH
50322: EMPTY
50323: LIST
50324: LIST
50325: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
50326: LD_ADDR_VAR 0 52
50330: PUSH
50331: LD_INT 3
50333: NEG
50334: PUSH
50335: LD_INT 1
50337: NEG
50338: PUSH
50339: EMPTY
50340: LIST
50341: LIST
50342: PUSH
50343: LD_INT 3
50345: NEG
50346: PUSH
50347: LD_INT 2
50349: NEG
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: EMPTY
50356: LIST
50357: LIST
50358: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
50359: LD_ADDR_VAR 0 53
50363: PUSH
50364: LD_INT 1
50366: NEG
50367: PUSH
50368: LD_INT 3
50370: NEG
50371: PUSH
50372: EMPTY
50373: LIST
50374: LIST
50375: PUSH
50376: LD_INT 0
50378: PUSH
50379: LD_INT 3
50381: NEG
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 1
50389: PUSH
50390: LD_INT 2
50392: NEG
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: EMPTY
50399: LIST
50400: LIST
50401: LIST
50402: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
50403: LD_ADDR_VAR 0 54
50407: PUSH
50408: LD_INT 2
50410: PUSH
50411: LD_INT 1
50413: NEG
50414: PUSH
50415: EMPTY
50416: LIST
50417: LIST
50418: PUSH
50419: LD_INT 3
50421: PUSH
50422: LD_INT 0
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: PUSH
50429: LD_INT 3
50431: PUSH
50432: LD_INT 1
50434: PUSH
50435: EMPTY
50436: LIST
50437: LIST
50438: PUSH
50439: EMPTY
50440: LIST
50441: LIST
50442: LIST
50443: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
50444: LD_ADDR_VAR 0 55
50448: PUSH
50449: LD_INT 3
50451: PUSH
50452: LD_INT 2
50454: PUSH
50455: EMPTY
50456: LIST
50457: LIST
50458: PUSH
50459: LD_INT 3
50461: PUSH
50462: LD_INT 3
50464: PUSH
50465: EMPTY
50466: LIST
50467: LIST
50468: PUSH
50469: LD_INT 2
50471: PUSH
50472: LD_INT 3
50474: PUSH
50475: EMPTY
50476: LIST
50477: LIST
50478: PUSH
50479: EMPTY
50480: LIST
50481: LIST
50482: LIST
50483: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
50484: LD_ADDR_VAR 0 56
50488: PUSH
50489: LD_INT 1
50491: PUSH
50492: LD_INT 3
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: PUSH
50499: LD_INT 0
50501: PUSH
50502: LD_INT 3
50504: PUSH
50505: EMPTY
50506: LIST
50507: LIST
50508: PUSH
50509: LD_INT 1
50511: NEG
50512: PUSH
50513: LD_INT 2
50515: PUSH
50516: EMPTY
50517: LIST
50518: LIST
50519: PUSH
50520: EMPTY
50521: LIST
50522: LIST
50523: LIST
50524: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
50525: LD_ADDR_VAR 0 57
50529: PUSH
50530: LD_INT 2
50532: NEG
50533: PUSH
50534: LD_INT 1
50536: PUSH
50537: EMPTY
50538: LIST
50539: LIST
50540: PUSH
50541: LD_INT 3
50543: NEG
50544: PUSH
50545: LD_INT 0
50547: PUSH
50548: EMPTY
50549: LIST
50550: LIST
50551: PUSH
50552: LD_INT 3
50554: NEG
50555: PUSH
50556: LD_INT 1
50558: NEG
50559: PUSH
50560: EMPTY
50561: LIST
50562: LIST
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: LIST
50568: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
50569: LD_ADDR_VAR 0 58
50573: PUSH
50574: LD_INT 2
50576: NEG
50577: PUSH
50578: LD_INT 3
50580: NEG
50581: PUSH
50582: EMPTY
50583: LIST
50584: LIST
50585: PUSH
50586: LD_INT 3
50588: NEG
50589: PUSH
50590: LD_INT 2
50592: NEG
50593: PUSH
50594: EMPTY
50595: LIST
50596: LIST
50597: PUSH
50598: LD_INT 3
50600: NEG
50601: PUSH
50602: LD_INT 3
50604: NEG
50605: PUSH
50606: EMPTY
50607: LIST
50608: LIST
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: LIST
50614: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
50615: LD_ADDR_VAR 0 59
50619: PUSH
50620: LD_INT 1
50622: NEG
50623: PUSH
50624: LD_INT 2
50626: NEG
50627: PUSH
50628: EMPTY
50629: LIST
50630: LIST
50631: PUSH
50632: LD_INT 0
50634: PUSH
50635: LD_INT 2
50637: NEG
50638: PUSH
50639: EMPTY
50640: LIST
50641: LIST
50642: PUSH
50643: LD_INT 1
50645: PUSH
50646: LD_INT 1
50648: NEG
50649: PUSH
50650: EMPTY
50651: LIST
50652: LIST
50653: PUSH
50654: EMPTY
50655: LIST
50656: LIST
50657: LIST
50658: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
50659: LD_ADDR_VAR 0 60
50663: PUSH
50664: LD_INT 1
50666: PUSH
50667: LD_INT 1
50669: NEG
50670: PUSH
50671: EMPTY
50672: LIST
50673: LIST
50674: PUSH
50675: LD_INT 2
50677: PUSH
50678: LD_INT 0
50680: PUSH
50681: EMPTY
50682: LIST
50683: LIST
50684: PUSH
50685: LD_INT 2
50687: PUSH
50688: LD_INT 1
50690: PUSH
50691: EMPTY
50692: LIST
50693: LIST
50694: PUSH
50695: EMPTY
50696: LIST
50697: LIST
50698: LIST
50699: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
50700: LD_ADDR_VAR 0 61
50704: PUSH
50705: LD_INT 2
50707: PUSH
50708: LD_INT 1
50710: PUSH
50711: EMPTY
50712: LIST
50713: LIST
50714: PUSH
50715: LD_INT 2
50717: PUSH
50718: LD_INT 2
50720: PUSH
50721: EMPTY
50722: LIST
50723: LIST
50724: PUSH
50725: LD_INT 1
50727: PUSH
50728: LD_INT 2
50730: PUSH
50731: EMPTY
50732: LIST
50733: LIST
50734: PUSH
50735: EMPTY
50736: LIST
50737: LIST
50738: LIST
50739: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
50740: LD_ADDR_VAR 0 62
50744: PUSH
50745: LD_INT 1
50747: PUSH
50748: LD_INT 2
50750: PUSH
50751: EMPTY
50752: LIST
50753: LIST
50754: PUSH
50755: LD_INT 0
50757: PUSH
50758: LD_INT 2
50760: PUSH
50761: EMPTY
50762: LIST
50763: LIST
50764: PUSH
50765: LD_INT 1
50767: NEG
50768: PUSH
50769: LD_INT 1
50771: PUSH
50772: EMPTY
50773: LIST
50774: LIST
50775: PUSH
50776: EMPTY
50777: LIST
50778: LIST
50779: LIST
50780: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
50781: LD_ADDR_VAR 0 63
50785: PUSH
50786: LD_INT 1
50788: NEG
50789: PUSH
50790: LD_INT 1
50792: PUSH
50793: EMPTY
50794: LIST
50795: LIST
50796: PUSH
50797: LD_INT 2
50799: NEG
50800: PUSH
50801: LD_INT 0
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 2
50810: NEG
50811: PUSH
50812: LD_INT 1
50814: NEG
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: EMPTY
50821: LIST
50822: LIST
50823: LIST
50824: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
50825: LD_ADDR_VAR 0 64
50829: PUSH
50830: LD_INT 1
50832: NEG
50833: PUSH
50834: LD_INT 2
50836: NEG
50837: PUSH
50838: EMPTY
50839: LIST
50840: LIST
50841: PUSH
50842: LD_INT 2
50844: NEG
50845: PUSH
50846: LD_INT 1
50848: NEG
50849: PUSH
50850: EMPTY
50851: LIST
50852: LIST
50853: PUSH
50854: LD_INT 2
50856: NEG
50857: PUSH
50858: LD_INT 2
50860: NEG
50861: PUSH
50862: EMPTY
50863: LIST
50864: LIST
50865: PUSH
50866: EMPTY
50867: LIST
50868: LIST
50869: LIST
50870: ST_TO_ADDR
// end ; 2 :
50871: GO 54137
50873: LD_INT 2
50875: DOUBLE
50876: EQUAL
50877: IFTRUE 50881
50879: GO 54136
50881: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
50882: LD_ADDR_VAR 0 29
50886: PUSH
50887: LD_INT 4
50889: PUSH
50890: LD_INT 0
50892: PUSH
50893: EMPTY
50894: LIST
50895: LIST
50896: PUSH
50897: LD_INT 4
50899: PUSH
50900: LD_INT 1
50902: NEG
50903: PUSH
50904: EMPTY
50905: LIST
50906: LIST
50907: PUSH
50908: LD_INT 5
50910: PUSH
50911: LD_INT 0
50913: PUSH
50914: EMPTY
50915: LIST
50916: LIST
50917: PUSH
50918: LD_INT 5
50920: PUSH
50921: LD_INT 1
50923: PUSH
50924: EMPTY
50925: LIST
50926: LIST
50927: PUSH
50928: LD_INT 4
50930: PUSH
50931: LD_INT 1
50933: PUSH
50934: EMPTY
50935: LIST
50936: LIST
50937: PUSH
50938: LD_INT 3
50940: PUSH
50941: LD_INT 0
50943: PUSH
50944: EMPTY
50945: LIST
50946: LIST
50947: PUSH
50948: LD_INT 3
50950: PUSH
50951: LD_INT 1
50953: NEG
50954: PUSH
50955: EMPTY
50956: LIST
50957: LIST
50958: PUSH
50959: LD_INT 3
50961: PUSH
50962: LD_INT 2
50964: NEG
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 5
50972: PUSH
50973: LD_INT 2
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 3
50982: PUSH
50983: LD_INT 3
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: LD_INT 3
50992: PUSH
50993: LD_INT 2
50995: PUSH
50996: EMPTY
50997: LIST
50998: LIST
50999: PUSH
51000: LD_INT 4
51002: PUSH
51003: LD_INT 3
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 4
51012: PUSH
51013: LD_INT 4
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 3
51022: PUSH
51023: LD_INT 4
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 2
51032: PUSH
51033: LD_INT 3
51035: PUSH
51036: EMPTY
51037: LIST
51038: LIST
51039: PUSH
51040: LD_INT 2
51042: PUSH
51043: LD_INT 2
51045: PUSH
51046: EMPTY
51047: LIST
51048: LIST
51049: PUSH
51050: LD_INT 4
51052: PUSH
51053: LD_INT 2
51055: PUSH
51056: EMPTY
51057: LIST
51058: LIST
51059: PUSH
51060: LD_INT 2
51062: PUSH
51063: LD_INT 4
51065: PUSH
51066: EMPTY
51067: LIST
51068: LIST
51069: PUSH
51070: LD_INT 0
51072: PUSH
51073: LD_INT 4
51075: PUSH
51076: EMPTY
51077: LIST
51078: LIST
51079: PUSH
51080: LD_INT 0
51082: PUSH
51083: LD_INT 3
51085: PUSH
51086: EMPTY
51087: LIST
51088: LIST
51089: PUSH
51090: LD_INT 1
51092: PUSH
51093: LD_INT 4
51095: PUSH
51096: EMPTY
51097: LIST
51098: LIST
51099: PUSH
51100: LD_INT 1
51102: PUSH
51103: LD_INT 5
51105: PUSH
51106: EMPTY
51107: LIST
51108: LIST
51109: PUSH
51110: LD_INT 0
51112: PUSH
51113: LD_INT 5
51115: PUSH
51116: EMPTY
51117: LIST
51118: LIST
51119: PUSH
51120: LD_INT 1
51122: NEG
51123: PUSH
51124: LD_INT 4
51126: PUSH
51127: EMPTY
51128: LIST
51129: LIST
51130: PUSH
51131: LD_INT 1
51133: NEG
51134: PUSH
51135: LD_INT 3
51137: PUSH
51138: EMPTY
51139: LIST
51140: LIST
51141: PUSH
51142: LD_INT 2
51144: PUSH
51145: LD_INT 5
51147: PUSH
51148: EMPTY
51149: LIST
51150: LIST
51151: PUSH
51152: LD_INT 2
51154: NEG
51155: PUSH
51156: LD_INT 3
51158: PUSH
51159: EMPTY
51160: LIST
51161: LIST
51162: PUSH
51163: LD_INT 3
51165: NEG
51166: PUSH
51167: LD_INT 0
51169: PUSH
51170: EMPTY
51171: LIST
51172: LIST
51173: PUSH
51174: LD_INT 3
51176: NEG
51177: PUSH
51178: LD_INT 1
51180: NEG
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 2
51188: NEG
51189: PUSH
51190: LD_INT 0
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PUSH
51197: LD_INT 2
51199: NEG
51200: PUSH
51201: LD_INT 1
51203: PUSH
51204: EMPTY
51205: LIST
51206: LIST
51207: PUSH
51208: LD_INT 3
51210: NEG
51211: PUSH
51212: LD_INT 1
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: PUSH
51219: LD_INT 4
51221: NEG
51222: PUSH
51223: LD_INT 0
51225: PUSH
51226: EMPTY
51227: LIST
51228: LIST
51229: PUSH
51230: LD_INT 4
51232: NEG
51233: PUSH
51234: LD_INT 1
51236: NEG
51237: PUSH
51238: EMPTY
51239: LIST
51240: LIST
51241: PUSH
51242: LD_INT 4
51244: NEG
51245: PUSH
51246: LD_INT 2
51248: NEG
51249: PUSH
51250: EMPTY
51251: LIST
51252: LIST
51253: PUSH
51254: LD_INT 2
51256: NEG
51257: PUSH
51258: LD_INT 2
51260: PUSH
51261: EMPTY
51262: LIST
51263: LIST
51264: PUSH
51265: LD_INT 4
51267: NEG
51268: PUSH
51269: LD_INT 4
51271: NEG
51272: PUSH
51273: EMPTY
51274: LIST
51275: LIST
51276: PUSH
51277: LD_INT 4
51279: NEG
51280: PUSH
51281: LD_INT 5
51283: NEG
51284: PUSH
51285: EMPTY
51286: LIST
51287: LIST
51288: PUSH
51289: LD_INT 3
51291: NEG
51292: PUSH
51293: LD_INT 4
51295: NEG
51296: PUSH
51297: EMPTY
51298: LIST
51299: LIST
51300: PUSH
51301: LD_INT 3
51303: NEG
51304: PUSH
51305: LD_INT 3
51307: NEG
51308: PUSH
51309: EMPTY
51310: LIST
51311: LIST
51312: PUSH
51313: LD_INT 4
51315: NEG
51316: PUSH
51317: LD_INT 3
51319: NEG
51320: PUSH
51321: EMPTY
51322: LIST
51323: LIST
51324: PUSH
51325: LD_INT 5
51327: NEG
51328: PUSH
51329: LD_INT 4
51331: NEG
51332: PUSH
51333: EMPTY
51334: LIST
51335: LIST
51336: PUSH
51337: LD_INT 5
51339: NEG
51340: PUSH
51341: LD_INT 5
51343: NEG
51344: PUSH
51345: EMPTY
51346: LIST
51347: LIST
51348: PUSH
51349: LD_INT 3
51351: NEG
51352: PUSH
51353: LD_INT 5
51355: NEG
51356: PUSH
51357: EMPTY
51358: LIST
51359: LIST
51360: PUSH
51361: LD_INT 5
51363: NEG
51364: PUSH
51365: LD_INT 3
51367: NEG
51368: PUSH
51369: EMPTY
51370: LIST
51371: LIST
51372: PUSH
51373: EMPTY
51374: LIST
51375: LIST
51376: LIST
51377: LIST
51378: LIST
51379: LIST
51380: LIST
51381: LIST
51382: LIST
51383: LIST
51384: LIST
51385: LIST
51386: LIST
51387: LIST
51388: LIST
51389: LIST
51390: LIST
51391: LIST
51392: LIST
51393: LIST
51394: LIST
51395: LIST
51396: LIST
51397: LIST
51398: LIST
51399: LIST
51400: LIST
51401: LIST
51402: LIST
51403: LIST
51404: LIST
51405: LIST
51406: LIST
51407: LIST
51408: LIST
51409: LIST
51410: LIST
51411: LIST
51412: LIST
51413: LIST
51414: LIST
51415: LIST
51416: LIST
51417: LIST
51418: LIST
51419: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
51420: LD_ADDR_VAR 0 30
51424: PUSH
51425: LD_INT 4
51427: PUSH
51428: LD_INT 4
51430: PUSH
51431: EMPTY
51432: LIST
51433: LIST
51434: PUSH
51435: LD_INT 4
51437: PUSH
51438: LD_INT 3
51440: PUSH
51441: EMPTY
51442: LIST
51443: LIST
51444: PUSH
51445: LD_INT 5
51447: PUSH
51448: LD_INT 4
51450: PUSH
51451: EMPTY
51452: LIST
51453: LIST
51454: PUSH
51455: LD_INT 5
51457: PUSH
51458: LD_INT 5
51460: PUSH
51461: EMPTY
51462: LIST
51463: LIST
51464: PUSH
51465: LD_INT 4
51467: PUSH
51468: LD_INT 5
51470: PUSH
51471: EMPTY
51472: LIST
51473: LIST
51474: PUSH
51475: LD_INT 3
51477: PUSH
51478: LD_INT 4
51480: PUSH
51481: EMPTY
51482: LIST
51483: LIST
51484: PUSH
51485: LD_INT 3
51487: PUSH
51488: LD_INT 3
51490: PUSH
51491: EMPTY
51492: LIST
51493: LIST
51494: PUSH
51495: LD_INT 5
51497: PUSH
51498: LD_INT 3
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 3
51507: PUSH
51508: LD_INT 5
51510: PUSH
51511: EMPTY
51512: LIST
51513: LIST
51514: PUSH
51515: LD_INT 0
51517: PUSH
51518: LD_INT 3
51520: PUSH
51521: EMPTY
51522: LIST
51523: LIST
51524: PUSH
51525: LD_INT 0
51527: PUSH
51528: LD_INT 2
51530: PUSH
51531: EMPTY
51532: LIST
51533: LIST
51534: PUSH
51535: LD_INT 1
51537: PUSH
51538: LD_INT 3
51540: PUSH
51541: EMPTY
51542: LIST
51543: LIST
51544: PUSH
51545: LD_INT 1
51547: PUSH
51548: LD_INT 4
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 0
51557: PUSH
51558: LD_INT 4
51560: PUSH
51561: EMPTY
51562: LIST
51563: LIST
51564: PUSH
51565: LD_INT 1
51567: NEG
51568: PUSH
51569: LD_INT 3
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 1
51578: NEG
51579: PUSH
51580: LD_INT 2
51582: PUSH
51583: EMPTY
51584: LIST
51585: LIST
51586: PUSH
51587: LD_INT 2
51589: PUSH
51590: LD_INT 4
51592: PUSH
51593: EMPTY
51594: LIST
51595: LIST
51596: PUSH
51597: LD_INT 2
51599: NEG
51600: PUSH
51601: LD_INT 2
51603: PUSH
51604: EMPTY
51605: LIST
51606: LIST
51607: PUSH
51608: LD_INT 4
51610: NEG
51611: PUSH
51612: LD_INT 0
51614: PUSH
51615: EMPTY
51616: LIST
51617: LIST
51618: PUSH
51619: LD_INT 4
51621: NEG
51622: PUSH
51623: LD_INT 1
51625: NEG
51626: PUSH
51627: EMPTY
51628: LIST
51629: LIST
51630: PUSH
51631: LD_INT 3
51633: NEG
51634: PUSH
51635: LD_INT 0
51637: PUSH
51638: EMPTY
51639: LIST
51640: LIST
51641: PUSH
51642: LD_INT 3
51644: NEG
51645: PUSH
51646: LD_INT 1
51648: PUSH
51649: EMPTY
51650: LIST
51651: LIST
51652: PUSH
51653: LD_INT 4
51655: NEG
51656: PUSH
51657: LD_INT 1
51659: PUSH
51660: EMPTY
51661: LIST
51662: LIST
51663: PUSH
51664: LD_INT 5
51666: NEG
51667: PUSH
51668: LD_INT 0
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 5
51677: NEG
51678: PUSH
51679: LD_INT 1
51681: NEG
51682: PUSH
51683: EMPTY
51684: LIST
51685: LIST
51686: PUSH
51687: LD_INT 5
51689: NEG
51690: PUSH
51691: LD_INT 2
51693: NEG
51694: PUSH
51695: EMPTY
51696: LIST
51697: LIST
51698: PUSH
51699: LD_INT 3
51701: NEG
51702: PUSH
51703: LD_INT 2
51705: PUSH
51706: EMPTY
51707: LIST
51708: LIST
51709: PUSH
51710: LD_INT 3
51712: NEG
51713: PUSH
51714: LD_INT 3
51716: NEG
51717: PUSH
51718: EMPTY
51719: LIST
51720: LIST
51721: PUSH
51722: LD_INT 3
51724: NEG
51725: PUSH
51726: LD_INT 4
51728: NEG
51729: PUSH
51730: EMPTY
51731: LIST
51732: LIST
51733: PUSH
51734: LD_INT 2
51736: NEG
51737: PUSH
51738: LD_INT 3
51740: NEG
51741: PUSH
51742: EMPTY
51743: LIST
51744: LIST
51745: PUSH
51746: LD_INT 2
51748: NEG
51749: PUSH
51750: LD_INT 2
51752: NEG
51753: PUSH
51754: EMPTY
51755: LIST
51756: LIST
51757: PUSH
51758: LD_INT 3
51760: NEG
51761: PUSH
51762: LD_INT 2
51764: NEG
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 4
51772: NEG
51773: PUSH
51774: LD_INT 3
51776: NEG
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 4
51784: NEG
51785: PUSH
51786: LD_INT 4
51788: NEG
51789: PUSH
51790: EMPTY
51791: LIST
51792: LIST
51793: PUSH
51794: LD_INT 2
51796: NEG
51797: PUSH
51798: LD_INT 4
51800: NEG
51801: PUSH
51802: EMPTY
51803: LIST
51804: LIST
51805: PUSH
51806: LD_INT 4
51808: NEG
51809: PUSH
51810: LD_INT 2
51812: NEG
51813: PUSH
51814: EMPTY
51815: LIST
51816: LIST
51817: PUSH
51818: LD_INT 0
51820: PUSH
51821: LD_INT 4
51823: NEG
51824: PUSH
51825: EMPTY
51826: LIST
51827: LIST
51828: PUSH
51829: LD_INT 0
51831: PUSH
51832: LD_INT 5
51834: NEG
51835: PUSH
51836: EMPTY
51837: LIST
51838: LIST
51839: PUSH
51840: LD_INT 1
51842: PUSH
51843: LD_INT 4
51845: NEG
51846: PUSH
51847: EMPTY
51848: LIST
51849: LIST
51850: PUSH
51851: LD_INT 1
51853: PUSH
51854: LD_INT 3
51856: NEG
51857: PUSH
51858: EMPTY
51859: LIST
51860: LIST
51861: PUSH
51862: LD_INT 0
51864: PUSH
51865: LD_INT 3
51867: NEG
51868: PUSH
51869: EMPTY
51870: LIST
51871: LIST
51872: PUSH
51873: LD_INT 1
51875: NEG
51876: PUSH
51877: LD_INT 4
51879: NEG
51880: PUSH
51881: EMPTY
51882: LIST
51883: LIST
51884: PUSH
51885: LD_INT 1
51887: NEG
51888: PUSH
51889: LD_INT 5
51891: NEG
51892: PUSH
51893: EMPTY
51894: LIST
51895: LIST
51896: PUSH
51897: LD_INT 2
51899: PUSH
51900: LD_INT 3
51902: NEG
51903: PUSH
51904: EMPTY
51905: LIST
51906: LIST
51907: PUSH
51908: LD_INT 2
51910: NEG
51911: PUSH
51912: LD_INT 5
51914: NEG
51915: PUSH
51916: EMPTY
51917: LIST
51918: LIST
51919: PUSH
51920: EMPTY
51921: LIST
51922: LIST
51923: LIST
51924: LIST
51925: LIST
51926: LIST
51927: LIST
51928: LIST
51929: LIST
51930: LIST
51931: LIST
51932: LIST
51933: LIST
51934: LIST
51935: LIST
51936: LIST
51937: LIST
51938: LIST
51939: LIST
51940: LIST
51941: LIST
51942: LIST
51943: LIST
51944: LIST
51945: LIST
51946: LIST
51947: LIST
51948: LIST
51949: LIST
51950: LIST
51951: LIST
51952: LIST
51953: LIST
51954: LIST
51955: LIST
51956: LIST
51957: LIST
51958: LIST
51959: LIST
51960: LIST
51961: LIST
51962: LIST
51963: LIST
51964: LIST
51965: LIST
51966: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
51967: LD_ADDR_VAR 0 31
51971: PUSH
51972: LD_INT 0
51974: PUSH
51975: LD_INT 4
51977: PUSH
51978: EMPTY
51979: LIST
51980: LIST
51981: PUSH
51982: LD_INT 0
51984: PUSH
51985: LD_INT 3
51987: PUSH
51988: EMPTY
51989: LIST
51990: LIST
51991: PUSH
51992: LD_INT 1
51994: PUSH
51995: LD_INT 4
51997: PUSH
51998: EMPTY
51999: LIST
52000: LIST
52001: PUSH
52002: LD_INT 1
52004: PUSH
52005: LD_INT 5
52007: PUSH
52008: EMPTY
52009: LIST
52010: LIST
52011: PUSH
52012: LD_INT 0
52014: PUSH
52015: LD_INT 5
52017: PUSH
52018: EMPTY
52019: LIST
52020: LIST
52021: PUSH
52022: LD_INT 1
52024: NEG
52025: PUSH
52026: LD_INT 4
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 1
52035: NEG
52036: PUSH
52037: LD_INT 3
52039: PUSH
52040: EMPTY
52041: LIST
52042: LIST
52043: PUSH
52044: LD_INT 2
52046: PUSH
52047: LD_INT 5
52049: PUSH
52050: EMPTY
52051: LIST
52052: LIST
52053: PUSH
52054: LD_INT 2
52056: NEG
52057: PUSH
52058: LD_INT 3
52060: PUSH
52061: EMPTY
52062: LIST
52063: LIST
52064: PUSH
52065: LD_INT 3
52067: NEG
52068: PUSH
52069: LD_INT 0
52071: PUSH
52072: EMPTY
52073: LIST
52074: LIST
52075: PUSH
52076: LD_INT 3
52078: NEG
52079: PUSH
52080: LD_INT 1
52082: NEG
52083: PUSH
52084: EMPTY
52085: LIST
52086: LIST
52087: PUSH
52088: LD_INT 2
52090: NEG
52091: PUSH
52092: LD_INT 0
52094: PUSH
52095: EMPTY
52096: LIST
52097: LIST
52098: PUSH
52099: LD_INT 2
52101: NEG
52102: PUSH
52103: LD_INT 1
52105: PUSH
52106: EMPTY
52107: LIST
52108: LIST
52109: PUSH
52110: LD_INT 3
52112: NEG
52113: PUSH
52114: LD_INT 1
52116: PUSH
52117: EMPTY
52118: LIST
52119: LIST
52120: PUSH
52121: LD_INT 4
52123: NEG
52124: PUSH
52125: LD_INT 0
52127: PUSH
52128: EMPTY
52129: LIST
52130: LIST
52131: PUSH
52132: LD_INT 4
52134: NEG
52135: PUSH
52136: LD_INT 1
52138: NEG
52139: PUSH
52140: EMPTY
52141: LIST
52142: LIST
52143: PUSH
52144: LD_INT 4
52146: NEG
52147: PUSH
52148: LD_INT 2
52150: NEG
52151: PUSH
52152: EMPTY
52153: LIST
52154: LIST
52155: PUSH
52156: LD_INT 2
52158: NEG
52159: PUSH
52160: LD_INT 2
52162: PUSH
52163: EMPTY
52164: LIST
52165: LIST
52166: PUSH
52167: LD_INT 4
52169: NEG
52170: PUSH
52171: LD_INT 4
52173: NEG
52174: PUSH
52175: EMPTY
52176: LIST
52177: LIST
52178: PUSH
52179: LD_INT 4
52181: NEG
52182: PUSH
52183: LD_INT 5
52185: NEG
52186: PUSH
52187: EMPTY
52188: LIST
52189: LIST
52190: PUSH
52191: LD_INT 3
52193: NEG
52194: PUSH
52195: LD_INT 4
52197: NEG
52198: PUSH
52199: EMPTY
52200: LIST
52201: LIST
52202: PUSH
52203: LD_INT 3
52205: NEG
52206: PUSH
52207: LD_INT 3
52209: NEG
52210: PUSH
52211: EMPTY
52212: LIST
52213: LIST
52214: PUSH
52215: LD_INT 4
52217: NEG
52218: PUSH
52219: LD_INT 3
52221: NEG
52222: PUSH
52223: EMPTY
52224: LIST
52225: LIST
52226: PUSH
52227: LD_INT 5
52229: NEG
52230: PUSH
52231: LD_INT 4
52233: NEG
52234: PUSH
52235: EMPTY
52236: LIST
52237: LIST
52238: PUSH
52239: LD_INT 5
52241: NEG
52242: PUSH
52243: LD_INT 5
52245: NEG
52246: PUSH
52247: EMPTY
52248: LIST
52249: LIST
52250: PUSH
52251: LD_INT 3
52253: NEG
52254: PUSH
52255: LD_INT 5
52257: NEG
52258: PUSH
52259: EMPTY
52260: LIST
52261: LIST
52262: PUSH
52263: LD_INT 5
52265: NEG
52266: PUSH
52267: LD_INT 3
52269: NEG
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: PUSH
52275: LD_INT 0
52277: PUSH
52278: LD_INT 3
52280: NEG
52281: PUSH
52282: EMPTY
52283: LIST
52284: LIST
52285: PUSH
52286: LD_INT 0
52288: PUSH
52289: LD_INT 4
52291: NEG
52292: PUSH
52293: EMPTY
52294: LIST
52295: LIST
52296: PUSH
52297: LD_INT 1
52299: PUSH
52300: LD_INT 3
52302: NEG
52303: PUSH
52304: EMPTY
52305: LIST
52306: LIST
52307: PUSH
52308: LD_INT 1
52310: PUSH
52311: LD_INT 2
52313: NEG
52314: PUSH
52315: EMPTY
52316: LIST
52317: LIST
52318: PUSH
52319: LD_INT 0
52321: PUSH
52322: LD_INT 2
52324: NEG
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: PUSH
52330: LD_INT 1
52332: NEG
52333: PUSH
52334: LD_INT 3
52336: NEG
52337: PUSH
52338: EMPTY
52339: LIST
52340: LIST
52341: PUSH
52342: LD_INT 1
52344: NEG
52345: PUSH
52346: LD_INT 4
52348: NEG
52349: PUSH
52350: EMPTY
52351: LIST
52352: LIST
52353: PUSH
52354: LD_INT 2
52356: PUSH
52357: LD_INT 2
52359: NEG
52360: PUSH
52361: EMPTY
52362: LIST
52363: LIST
52364: PUSH
52365: LD_INT 2
52367: NEG
52368: PUSH
52369: LD_INT 4
52371: NEG
52372: PUSH
52373: EMPTY
52374: LIST
52375: LIST
52376: PUSH
52377: LD_INT 4
52379: PUSH
52380: LD_INT 0
52382: PUSH
52383: EMPTY
52384: LIST
52385: LIST
52386: PUSH
52387: LD_INT 4
52389: PUSH
52390: LD_INT 1
52392: NEG
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 5
52400: PUSH
52401: LD_INT 0
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 5
52410: PUSH
52411: LD_INT 1
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 4
52420: PUSH
52421: LD_INT 1
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 3
52430: PUSH
52431: LD_INT 0
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 3
52440: PUSH
52441: LD_INT 1
52443: NEG
52444: PUSH
52445: EMPTY
52446: LIST
52447: LIST
52448: PUSH
52449: LD_INT 3
52451: PUSH
52452: LD_INT 2
52454: NEG
52455: PUSH
52456: EMPTY
52457: LIST
52458: LIST
52459: PUSH
52460: LD_INT 5
52462: PUSH
52463: LD_INT 2
52465: PUSH
52466: EMPTY
52467: LIST
52468: LIST
52469: PUSH
52470: EMPTY
52471: LIST
52472: LIST
52473: LIST
52474: LIST
52475: LIST
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: LIST
52483: LIST
52484: LIST
52485: LIST
52486: LIST
52487: LIST
52488: LIST
52489: LIST
52490: LIST
52491: LIST
52492: LIST
52493: LIST
52494: LIST
52495: LIST
52496: LIST
52497: LIST
52498: LIST
52499: LIST
52500: LIST
52501: LIST
52502: LIST
52503: LIST
52504: LIST
52505: LIST
52506: LIST
52507: LIST
52508: LIST
52509: LIST
52510: LIST
52511: LIST
52512: LIST
52513: LIST
52514: LIST
52515: LIST
52516: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
52517: LD_ADDR_VAR 0 32
52521: PUSH
52522: LD_INT 4
52524: NEG
52525: PUSH
52526: LD_INT 0
52528: PUSH
52529: EMPTY
52530: LIST
52531: LIST
52532: PUSH
52533: LD_INT 4
52535: NEG
52536: PUSH
52537: LD_INT 1
52539: NEG
52540: PUSH
52541: EMPTY
52542: LIST
52543: LIST
52544: PUSH
52545: LD_INT 3
52547: NEG
52548: PUSH
52549: LD_INT 0
52551: PUSH
52552: EMPTY
52553: LIST
52554: LIST
52555: PUSH
52556: LD_INT 3
52558: NEG
52559: PUSH
52560: LD_INT 1
52562: PUSH
52563: EMPTY
52564: LIST
52565: LIST
52566: PUSH
52567: LD_INT 4
52569: NEG
52570: PUSH
52571: LD_INT 1
52573: PUSH
52574: EMPTY
52575: LIST
52576: LIST
52577: PUSH
52578: LD_INT 5
52580: NEG
52581: PUSH
52582: LD_INT 0
52584: PUSH
52585: EMPTY
52586: LIST
52587: LIST
52588: PUSH
52589: LD_INT 5
52591: NEG
52592: PUSH
52593: LD_INT 1
52595: NEG
52596: PUSH
52597: EMPTY
52598: LIST
52599: LIST
52600: PUSH
52601: LD_INT 5
52603: NEG
52604: PUSH
52605: LD_INT 2
52607: NEG
52608: PUSH
52609: EMPTY
52610: LIST
52611: LIST
52612: PUSH
52613: LD_INT 3
52615: NEG
52616: PUSH
52617: LD_INT 2
52619: PUSH
52620: EMPTY
52621: LIST
52622: LIST
52623: PUSH
52624: LD_INT 3
52626: NEG
52627: PUSH
52628: LD_INT 3
52630: NEG
52631: PUSH
52632: EMPTY
52633: LIST
52634: LIST
52635: PUSH
52636: LD_INT 3
52638: NEG
52639: PUSH
52640: LD_INT 4
52642: NEG
52643: PUSH
52644: EMPTY
52645: LIST
52646: LIST
52647: PUSH
52648: LD_INT 2
52650: NEG
52651: PUSH
52652: LD_INT 3
52654: NEG
52655: PUSH
52656: EMPTY
52657: LIST
52658: LIST
52659: PUSH
52660: LD_INT 2
52662: NEG
52663: PUSH
52664: LD_INT 2
52666: NEG
52667: PUSH
52668: EMPTY
52669: LIST
52670: LIST
52671: PUSH
52672: LD_INT 3
52674: NEG
52675: PUSH
52676: LD_INT 2
52678: NEG
52679: PUSH
52680: EMPTY
52681: LIST
52682: LIST
52683: PUSH
52684: LD_INT 4
52686: NEG
52687: PUSH
52688: LD_INT 3
52690: NEG
52691: PUSH
52692: EMPTY
52693: LIST
52694: LIST
52695: PUSH
52696: LD_INT 4
52698: NEG
52699: PUSH
52700: LD_INT 4
52702: NEG
52703: PUSH
52704: EMPTY
52705: LIST
52706: LIST
52707: PUSH
52708: LD_INT 2
52710: NEG
52711: PUSH
52712: LD_INT 4
52714: NEG
52715: PUSH
52716: EMPTY
52717: LIST
52718: LIST
52719: PUSH
52720: LD_INT 4
52722: NEG
52723: PUSH
52724: LD_INT 2
52726: NEG
52727: PUSH
52728: EMPTY
52729: LIST
52730: LIST
52731: PUSH
52732: LD_INT 0
52734: PUSH
52735: LD_INT 4
52737: NEG
52738: PUSH
52739: EMPTY
52740: LIST
52741: LIST
52742: PUSH
52743: LD_INT 0
52745: PUSH
52746: LD_INT 5
52748: NEG
52749: PUSH
52750: EMPTY
52751: LIST
52752: LIST
52753: PUSH
52754: LD_INT 1
52756: PUSH
52757: LD_INT 4
52759: NEG
52760: PUSH
52761: EMPTY
52762: LIST
52763: LIST
52764: PUSH
52765: LD_INT 1
52767: PUSH
52768: LD_INT 3
52770: NEG
52771: PUSH
52772: EMPTY
52773: LIST
52774: LIST
52775: PUSH
52776: LD_INT 0
52778: PUSH
52779: LD_INT 3
52781: NEG
52782: PUSH
52783: EMPTY
52784: LIST
52785: LIST
52786: PUSH
52787: LD_INT 1
52789: NEG
52790: PUSH
52791: LD_INT 4
52793: NEG
52794: PUSH
52795: EMPTY
52796: LIST
52797: LIST
52798: PUSH
52799: LD_INT 1
52801: NEG
52802: PUSH
52803: LD_INT 5
52805: NEG
52806: PUSH
52807: EMPTY
52808: LIST
52809: LIST
52810: PUSH
52811: LD_INT 2
52813: PUSH
52814: LD_INT 3
52816: NEG
52817: PUSH
52818: EMPTY
52819: LIST
52820: LIST
52821: PUSH
52822: LD_INT 2
52824: NEG
52825: PUSH
52826: LD_INT 5
52828: NEG
52829: PUSH
52830: EMPTY
52831: LIST
52832: LIST
52833: PUSH
52834: LD_INT 3
52836: PUSH
52837: LD_INT 0
52839: PUSH
52840: EMPTY
52841: LIST
52842: LIST
52843: PUSH
52844: LD_INT 3
52846: PUSH
52847: LD_INT 1
52849: NEG
52850: PUSH
52851: EMPTY
52852: LIST
52853: LIST
52854: PUSH
52855: LD_INT 4
52857: PUSH
52858: LD_INT 0
52860: PUSH
52861: EMPTY
52862: LIST
52863: LIST
52864: PUSH
52865: LD_INT 4
52867: PUSH
52868: LD_INT 1
52870: PUSH
52871: EMPTY
52872: LIST
52873: LIST
52874: PUSH
52875: LD_INT 3
52877: PUSH
52878: LD_INT 1
52880: PUSH
52881: EMPTY
52882: LIST
52883: LIST
52884: PUSH
52885: LD_INT 2
52887: PUSH
52888: LD_INT 0
52890: PUSH
52891: EMPTY
52892: LIST
52893: LIST
52894: PUSH
52895: LD_INT 2
52897: PUSH
52898: LD_INT 1
52900: NEG
52901: PUSH
52902: EMPTY
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 2
52908: PUSH
52909: LD_INT 2
52911: NEG
52912: PUSH
52913: EMPTY
52914: LIST
52915: LIST
52916: PUSH
52917: LD_INT 4
52919: PUSH
52920: LD_INT 2
52922: PUSH
52923: EMPTY
52924: LIST
52925: LIST
52926: PUSH
52927: LD_INT 4
52929: PUSH
52930: LD_INT 4
52932: PUSH
52933: EMPTY
52934: LIST
52935: LIST
52936: PUSH
52937: LD_INT 4
52939: PUSH
52940: LD_INT 3
52942: PUSH
52943: EMPTY
52944: LIST
52945: LIST
52946: PUSH
52947: LD_INT 5
52949: PUSH
52950: LD_INT 4
52952: PUSH
52953: EMPTY
52954: LIST
52955: LIST
52956: PUSH
52957: LD_INT 5
52959: PUSH
52960: LD_INT 5
52962: PUSH
52963: EMPTY
52964: LIST
52965: LIST
52966: PUSH
52967: LD_INT 4
52969: PUSH
52970: LD_INT 5
52972: PUSH
52973: EMPTY
52974: LIST
52975: LIST
52976: PUSH
52977: LD_INT 3
52979: PUSH
52980: LD_INT 4
52982: PUSH
52983: EMPTY
52984: LIST
52985: LIST
52986: PUSH
52987: LD_INT 3
52989: PUSH
52990: LD_INT 3
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 5
52999: PUSH
53000: LD_INT 3
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 3
53009: PUSH
53010: LD_INT 5
53012: PUSH
53013: EMPTY
53014: LIST
53015: LIST
53016: PUSH
53017: EMPTY
53018: LIST
53019: LIST
53020: LIST
53021: LIST
53022: LIST
53023: LIST
53024: LIST
53025: LIST
53026: LIST
53027: LIST
53028: LIST
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: LIST
53050: LIST
53051: LIST
53052: LIST
53053: LIST
53054: LIST
53055: LIST
53056: LIST
53057: LIST
53058: LIST
53059: LIST
53060: LIST
53061: LIST
53062: LIST
53063: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
53064: LD_ADDR_VAR 0 33
53068: PUSH
53069: LD_INT 4
53071: NEG
53072: PUSH
53073: LD_INT 4
53075: NEG
53076: PUSH
53077: EMPTY
53078: LIST
53079: LIST
53080: PUSH
53081: LD_INT 4
53083: NEG
53084: PUSH
53085: LD_INT 5
53087: NEG
53088: PUSH
53089: EMPTY
53090: LIST
53091: LIST
53092: PUSH
53093: LD_INT 3
53095: NEG
53096: PUSH
53097: LD_INT 4
53099: NEG
53100: PUSH
53101: EMPTY
53102: LIST
53103: LIST
53104: PUSH
53105: LD_INT 3
53107: NEG
53108: PUSH
53109: LD_INT 3
53111: NEG
53112: PUSH
53113: EMPTY
53114: LIST
53115: LIST
53116: PUSH
53117: LD_INT 4
53119: NEG
53120: PUSH
53121: LD_INT 3
53123: NEG
53124: PUSH
53125: EMPTY
53126: LIST
53127: LIST
53128: PUSH
53129: LD_INT 5
53131: NEG
53132: PUSH
53133: LD_INT 4
53135: NEG
53136: PUSH
53137: EMPTY
53138: LIST
53139: LIST
53140: PUSH
53141: LD_INT 5
53143: NEG
53144: PUSH
53145: LD_INT 5
53147: NEG
53148: PUSH
53149: EMPTY
53150: LIST
53151: LIST
53152: PUSH
53153: LD_INT 3
53155: NEG
53156: PUSH
53157: LD_INT 5
53159: NEG
53160: PUSH
53161: EMPTY
53162: LIST
53163: LIST
53164: PUSH
53165: LD_INT 5
53167: NEG
53168: PUSH
53169: LD_INT 3
53171: NEG
53172: PUSH
53173: EMPTY
53174: LIST
53175: LIST
53176: PUSH
53177: LD_INT 0
53179: PUSH
53180: LD_INT 3
53182: NEG
53183: PUSH
53184: EMPTY
53185: LIST
53186: LIST
53187: PUSH
53188: LD_INT 0
53190: PUSH
53191: LD_INT 4
53193: NEG
53194: PUSH
53195: EMPTY
53196: LIST
53197: LIST
53198: PUSH
53199: LD_INT 1
53201: PUSH
53202: LD_INT 3
53204: NEG
53205: PUSH
53206: EMPTY
53207: LIST
53208: LIST
53209: PUSH
53210: LD_INT 1
53212: PUSH
53213: LD_INT 2
53215: NEG
53216: PUSH
53217: EMPTY
53218: LIST
53219: LIST
53220: PUSH
53221: LD_INT 0
53223: PUSH
53224: LD_INT 2
53226: NEG
53227: PUSH
53228: EMPTY
53229: LIST
53230: LIST
53231: PUSH
53232: LD_INT 1
53234: NEG
53235: PUSH
53236: LD_INT 3
53238: NEG
53239: PUSH
53240: EMPTY
53241: LIST
53242: LIST
53243: PUSH
53244: LD_INT 1
53246: NEG
53247: PUSH
53248: LD_INT 4
53250: NEG
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: PUSH
53256: LD_INT 2
53258: PUSH
53259: LD_INT 2
53261: NEG
53262: PUSH
53263: EMPTY
53264: LIST
53265: LIST
53266: PUSH
53267: LD_INT 2
53269: NEG
53270: PUSH
53271: LD_INT 4
53273: NEG
53274: PUSH
53275: EMPTY
53276: LIST
53277: LIST
53278: PUSH
53279: LD_INT 4
53281: PUSH
53282: LD_INT 0
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_INT 4
53291: PUSH
53292: LD_INT 1
53294: NEG
53295: PUSH
53296: EMPTY
53297: LIST
53298: LIST
53299: PUSH
53300: LD_INT 5
53302: PUSH
53303: LD_INT 0
53305: PUSH
53306: EMPTY
53307: LIST
53308: LIST
53309: PUSH
53310: LD_INT 5
53312: PUSH
53313: LD_INT 1
53315: PUSH
53316: EMPTY
53317: LIST
53318: LIST
53319: PUSH
53320: LD_INT 4
53322: PUSH
53323: LD_INT 1
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 3
53332: PUSH
53333: LD_INT 0
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 3
53342: PUSH
53343: LD_INT 1
53345: NEG
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 3
53353: PUSH
53354: LD_INT 2
53356: NEG
53357: PUSH
53358: EMPTY
53359: LIST
53360: LIST
53361: PUSH
53362: LD_INT 5
53364: PUSH
53365: LD_INT 2
53367: PUSH
53368: EMPTY
53369: LIST
53370: LIST
53371: PUSH
53372: LD_INT 3
53374: PUSH
53375: LD_INT 3
53377: PUSH
53378: EMPTY
53379: LIST
53380: LIST
53381: PUSH
53382: LD_INT 3
53384: PUSH
53385: LD_INT 2
53387: PUSH
53388: EMPTY
53389: LIST
53390: LIST
53391: PUSH
53392: LD_INT 4
53394: PUSH
53395: LD_INT 3
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 4
53404: PUSH
53405: LD_INT 4
53407: PUSH
53408: EMPTY
53409: LIST
53410: LIST
53411: PUSH
53412: LD_INT 3
53414: PUSH
53415: LD_INT 4
53417: PUSH
53418: EMPTY
53419: LIST
53420: LIST
53421: PUSH
53422: LD_INT 2
53424: PUSH
53425: LD_INT 3
53427: PUSH
53428: EMPTY
53429: LIST
53430: LIST
53431: PUSH
53432: LD_INT 2
53434: PUSH
53435: LD_INT 2
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: PUSH
53442: LD_INT 4
53444: PUSH
53445: LD_INT 2
53447: PUSH
53448: EMPTY
53449: LIST
53450: LIST
53451: PUSH
53452: LD_INT 2
53454: PUSH
53455: LD_INT 4
53457: PUSH
53458: EMPTY
53459: LIST
53460: LIST
53461: PUSH
53462: LD_INT 0
53464: PUSH
53465: LD_INT 4
53467: PUSH
53468: EMPTY
53469: LIST
53470: LIST
53471: PUSH
53472: LD_INT 0
53474: PUSH
53475: LD_INT 3
53477: PUSH
53478: EMPTY
53479: LIST
53480: LIST
53481: PUSH
53482: LD_INT 1
53484: PUSH
53485: LD_INT 4
53487: PUSH
53488: EMPTY
53489: LIST
53490: LIST
53491: PUSH
53492: LD_INT 1
53494: PUSH
53495: LD_INT 5
53497: PUSH
53498: EMPTY
53499: LIST
53500: LIST
53501: PUSH
53502: LD_INT 0
53504: PUSH
53505: LD_INT 5
53507: PUSH
53508: EMPTY
53509: LIST
53510: LIST
53511: PUSH
53512: LD_INT 1
53514: NEG
53515: PUSH
53516: LD_INT 4
53518: PUSH
53519: EMPTY
53520: LIST
53521: LIST
53522: PUSH
53523: LD_INT 1
53525: NEG
53526: PUSH
53527: LD_INT 3
53529: PUSH
53530: EMPTY
53531: LIST
53532: LIST
53533: PUSH
53534: LD_INT 2
53536: PUSH
53537: LD_INT 5
53539: PUSH
53540: EMPTY
53541: LIST
53542: LIST
53543: PUSH
53544: LD_INT 2
53546: NEG
53547: PUSH
53548: LD_INT 3
53550: PUSH
53551: EMPTY
53552: LIST
53553: LIST
53554: PUSH
53555: EMPTY
53556: LIST
53557: LIST
53558: LIST
53559: LIST
53560: LIST
53561: LIST
53562: LIST
53563: LIST
53564: LIST
53565: LIST
53566: LIST
53567: LIST
53568: LIST
53569: LIST
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
53602: LD_ADDR_VAR 0 34
53606: PUSH
53607: LD_INT 0
53609: PUSH
53610: LD_INT 4
53612: NEG
53613: PUSH
53614: EMPTY
53615: LIST
53616: LIST
53617: PUSH
53618: LD_INT 0
53620: PUSH
53621: LD_INT 5
53623: NEG
53624: PUSH
53625: EMPTY
53626: LIST
53627: LIST
53628: PUSH
53629: LD_INT 1
53631: PUSH
53632: LD_INT 4
53634: NEG
53635: PUSH
53636: EMPTY
53637: LIST
53638: LIST
53639: PUSH
53640: LD_INT 1
53642: PUSH
53643: LD_INT 3
53645: NEG
53646: PUSH
53647: EMPTY
53648: LIST
53649: LIST
53650: PUSH
53651: LD_INT 0
53653: PUSH
53654: LD_INT 3
53656: NEG
53657: PUSH
53658: EMPTY
53659: LIST
53660: LIST
53661: PUSH
53662: LD_INT 1
53664: NEG
53665: PUSH
53666: LD_INT 4
53668: NEG
53669: PUSH
53670: EMPTY
53671: LIST
53672: LIST
53673: PUSH
53674: LD_INT 1
53676: NEG
53677: PUSH
53678: LD_INT 5
53680: NEG
53681: PUSH
53682: EMPTY
53683: LIST
53684: LIST
53685: PUSH
53686: LD_INT 2
53688: PUSH
53689: LD_INT 3
53691: NEG
53692: PUSH
53693: EMPTY
53694: LIST
53695: LIST
53696: PUSH
53697: LD_INT 2
53699: NEG
53700: PUSH
53701: LD_INT 5
53703: NEG
53704: PUSH
53705: EMPTY
53706: LIST
53707: LIST
53708: PUSH
53709: LD_INT 3
53711: PUSH
53712: LD_INT 0
53714: PUSH
53715: EMPTY
53716: LIST
53717: LIST
53718: PUSH
53719: LD_INT 3
53721: PUSH
53722: LD_INT 1
53724: NEG
53725: PUSH
53726: EMPTY
53727: LIST
53728: LIST
53729: PUSH
53730: LD_INT 4
53732: PUSH
53733: LD_INT 0
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 4
53742: PUSH
53743: LD_INT 1
53745: PUSH
53746: EMPTY
53747: LIST
53748: LIST
53749: PUSH
53750: LD_INT 3
53752: PUSH
53753: LD_INT 1
53755: PUSH
53756: EMPTY
53757: LIST
53758: LIST
53759: PUSH
53760: LD_INT 2
53762: PUSH
53763: LD_INT 0
53765: PUSH
53766: EMPTY
53767: LIST
53768: LIST
53769: PUSH
53770: LD_INT 2
53772: PUSH
53773: LD_INT 1
53775: NEG
53776: PUSH
53777: EMPTY
53778: LIST
53779: LIST
53780: PUSH
53781: LD_INT 2
53783: PUSH
53784: LD_INT 2
53786: NEG
53787: PUSH
53788: EMPTY
53789: LIST
53790: LIST
53791: PUSH
53792: LD_INT 4
53794: PUSH
53795: LD_INT 2
53797: PUSH
53798: EMPTY
53799: LIST
53800: LIST
53801: PUSH
53802: LD_INT 4
53804: PUSH
53805: LD_INT 4
53807: PUSH
53808: EMPTY
53809: LIST
53810: LIST
53811: PUSH
53812: LD_INT 4
53814: PUSH
53815: LD_INT 3
53817: PUSH
53818: EMPTY
53819: LIST
53820: LIST
53821: PUSH
53822: LD_INT 5
53824: PUSH
53825: LD_INT 4
53827: PUSH
53828: EMPTY
53829: LIST
53830: LIST
53831: PUSH
53832: LD_INT 5
53834: PUSH
53835: LD_INT 5
53837: PUSH
53838: EMPTY
53839: LIST
53840: LIST
53841: PUSH
53842: LD_INT 4
53844: PUSH
53845: LD_INT 5
53847: PUSH
53848: EMPTY
53849: LIST
53850: LIST
53851: PUSH
53852: LD_INT 3
53854: PUSH
53855: LD_INT 4
53857: PUSH
53858: EMPTY
53859: LIST
53860: LIST
53861: PUSH
53862: LD_INT 3
53864: PUSH
53865: LD_INT 3
53867: PUSH
53868: EMPTY
53869: LIST
53870: LIST
53871: PUSH
53872: LD_INT 5
53874: PUSH
53875: LD_INT 3
53877: PUSH
53878: EMPTY
53879: LIST
53880: LIST
53881: PUSH
53882: LD_INT 3
53884: PUSH
53885: LD_INT 5
53887: PUSH
53888: EMPTY
53889: LIST
53890: LIST
53891: PUSH
53892: LD_INT 0
53894: PUSH
53895: LD_INT 3
53897: PUSH
53898: EMPTY
53899: LIST
53900: LIST
53901: PUSH
53902: LD_INT 0
53904: PUSH
53905: LD_INT 2
53907: PUSH
53908: EMPTY
53909: LIST
53910: LIST
53911: PUSH
53912: LD_INT 1
53914: PUSH
53915: LD_INT 3
53917: PUSH
53918: EMPTY
53919: LIST
53920: LIST
53921: PUSH
53922: LD_INT 1
53924: PUSH
53925: LD_INT 4
53927: PUSH
53928: EMPTY
53929: LIST
53930: LIST
53931: PUSH
53932: LD_INT 0
53934: PUSH
53935: LD_INT 4
53937: PUSH
53938: EMPTY
53939: LIST
53940: LIST
53941: PUSH
53942: LD_INT 1
53944: NEG
53945: PUSH
53946: LD_INT 3
53948: PUSH
53949: EMPTY
53950: LIST
53951: LIST
53952: PUSH
53953: LD_INT 1
53955: NEG
53956: PUSH
53957: LD_INT 2
53959: PUSH
53960: EMPTY
53961: LIST
53962: LIST
53963: PUSH
53964: LD_INT 2
53966: PUSH
53967: LD_INT 4
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: PUSH
53974: LD_INT 2
53976: NEG
53977: PUSH
53978: LD_INT 2
53980: PUSH
53981: EMPTY
53982: LIST
53983: LIST
53984: PUSH
53985: LD_INT 4
53987: NEG
53988: PUSH
53989: LD_INT 0
53991: PUSH
53992: EMPTY
53993: LIST
53994: LIST
53995: PUSH
53996: LD_INT 4
53998: NEG
53999: PUSH
54000: LD_INT 1
54002: NEG
54003: PUSH
54004: EMPTY
54005: LIST
54006: LIST
54007: PUSH
54008: LD_INT 3
54010: NEG
54011: PUSH
54012: LD_INT 0
54014: PUSH
54015: EMPTY
54016: LIST
54017: LIST
54018: PUSH
54019: LD_INT 3
54021: NEG
54022: PUSH
54023: LD_INT 1
54025: PUSH
54026: EMPTY
54027: LIST
54028: LIST
54029: PUSH
54030: LD_INT 4
54032: NEG
54033: PUSH
54034: LD_INT 1
54036: PUSH
54037: EMPTY
54038: LIST
54039: LIST
54040: PUSH
54041: LD_INT 5
54043: NEG
54044: PUSH
54045: LD_INT 0
54047: PUSH
54048: EMPTY
54049: LIST
54050: LIST
54051: PUSH
54052: LD_INT 5
54054: NEG
54055: PUSH
54056: LD_INT 1
54058: NEG
54059: PUSH
54060: EMPTY
54061: LIST
54062: LIST
54063: PUSH
54064: LD_INT 5
54066: NEG
54067: PUSH
54068: LD_INT 2
54070: NEG
54071: PUSH
54072: EMPTY
54073: LIST
54074: LIST
54075: PUSH
54076: LD_INT 3
54078: NEG
54079: PUSH
54080: LD_INT 2
54082: PUSH
54083: EMPTY
54084: LIST
54085: LIST
54086: PUSH
54087: EMPTY
54088: LIST
54089: LIST
54090: LIST
54091: LIST
54092: LIST
54093: LIST
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: LIST
54112: LIST
54113: LIST
54114: LIST
54115: LIST
54116: LIST
54117: LIST
54118: LIST
54119: LIST
54120: LIST
54121: LIST
54122: LIST
54123: LIST
54124: LIST
54125: LIST
54126: LIST
54127: LIST
54128: LIST
54129: LIST
54130: LIST
54131: LIST
54132: LIST
54133: ST_TO_ADDR
// end ; end ;
54134: GO 54137
54136: POP
// case btype of b_depot , b_warehouse :
54137: LD_VAR 0 1
54141: PUSH
54142: LD_INT 0
54144: DOUBLE
54145: EQUAL
54146: IFTRUE 54156
54148: LD_INT 1
54150: DOUBLE
54151: EQUAL
54152: IFTRUE 54156
54154: GO 54357
54156: POP
// case nation of nation_american :
54157: LD_VAR 0 5
54161: PUSH
54162: LD_INT 1
54164: DOUBLE
54165: EQUAL
54166: IFTRUE 54170
54168: GO 54226
54170: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
54171: LD_ADDR_VAR 0 9
54175: PUSH
54176: LD_VAR 0 11
54180: PUSH
54181: LD_VAR 0 12
54185: PUSH
54186: LD_VAR 0 13
54190: PUSH
54191: LD_VAR 0 14
54195: PUSH
54196: LD_VAR 0 15
54200: PUSH
54201: LD_VAR 0 16
54205: PUSH
54206: EMPTY
54207: LIST
54208: LIST
54209: LIST
54210: LIST
54211: LIST
54212: LIST
54213: PUSH
54214: LD_VAR 0 4
54218: PUSH
54219: LD_INT 1
54221: PLUS
54222: ARRAY
54223: ST_TO_ADDR
54224: GO 54355
54226: LD_INT 2
54228: DOUBLE
54229: EQUAL
54230: IFTRUE 54234
54232: GO 54290
54234: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
54235: LD_ADDR_VAR 0 9
54239: PUSH
54240: LD_VAR 0 17
54244: PUSH
54245: LD_VAR 0 18
54249: PUSH
54250: LD_VAR 0 19
54254: PUSH
54255: LD_VAR 0 20
54259: PUSH
54260: LD_VAR 0 21
54264: PUSH
54265: LD_VAR 0 22
54269: PUSH
54270: EMPTY
54271: LIST
54272: LIST
54273: LIST
54274: LIST
54275: LIST
54276: LIST
54277: PUSH
54278: LD_VAR 0 4
54282: PUSH
54283: LD_INT 1
54285: PLUS
54286: ARRAY
54287: ST_TO_ADDR
54288: GO 54355
54290: LD_INT 3
54292: DOUBLE
54293: EQUAL
54294: IFTRUE 54298
54296: GO 54354
54298: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
54299: LD_ADDR_VAR 0 9
54303: PUSH
54304: LD_VAR 0 23
54308: PUSH
54309: LD_VAR 0 24
54313: PUSH
54314: LD_VAR 0 25
54318: PUSH
54319: LD_VAR 0 26
54323: PUSH
54324: LD_VAR 0 27
54328: PUSH
54329: LD_VAR 0 28
54333: PUSH
54334: EMPTY
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: PUSH
54342: LD_VAR 0 4
54346: PUSH
54347: LD_INT 1
54349: PLUS
54350: ARRAY
54351: ST_TO_ADDR
54352: GO 54355
54354: POP
54355: GO 54910
54357: LD_INT 2
54359: DOUBLE
54360: EQUAL
54361: IFTRUE 54371
54363: LD_INT 3
54365: DOUBLE
54366: EQUAL
54367: IFTRUE 54371
54369: GO 54427
54371: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
54372: LD_ADDR_VAR 0 9
54376: PUSH
54377: LD_VAR 0 29
54381: PUSH
54382: LD_VAR 0 30
54386: PUSH
54387: LD_VAR 0 31
54391: PUSH
54392: LD_VAR 0 32
54396: PUSH
54397: LD_VAR 0 33
54401: PUSH
54402: LD_VAR 0 34
54406: PUSH
54407: EMPTY
54408: LIST
54409: LIST
54410: LIST
54411: LIST
54412: LIST
54413: LIST
54414: PUSH
54415: LD_VAR 0 4
54419: PUSH
54420: LD_INT 1
54422: PLUS
54423: ARRAY
54424: ST_TO_ADDR
54425: GO 54910
54427: LD_INT 16
54429: DOUBLE
54430: EQUAL
54431: IFTRUE 54489
54433: LD_INT 17
54435: DOUBLE
54436: EQUAL
54437: IFTRUE 54489
54439: LD_INT 18
54441: DOUBLE
54442: EQUAL
54443: IFTRUE 54489
54445: LD_INT 19
54447: DOUBLE
54448: EQUAL
54449: IFTRUE 54489
54451: LD_INT 22
54453: DOUBLE
54454: EQUAL
54455: IFTRUE 54489
54457: LD_INT 20
54459: DOUBLE
54460: EQUAL
54461: IFTRUE 54489
54463: LD_INT 21
54465: DOUBLE
54466: EQUAL
54467: IFTRUE 54489
54469: LD_INT 23
54471: DOUBLE
54472: EQUAL
54473: IFTRUE 54489
54475: LD_INT 24
54477: DOUBLE
54478: EQUAL
54479: IFTRUE 54489
54481: LD_INT 25
54483: DOUBLE
54484: EQUAL
54485: IFTRUE 54489
54487: GO 54545
54489: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
54490: LD_ADDR_VAR 0 9
54494: PUSH
54495: LD_VAR 0 35
54499: PUSH
54500: LD_VAR 0 36
54504: PUSH
54505: LD_VAR 0 37
54509: PUSH
54510: LD_VAR 0 38
54514: PUSH
54515: LD_VAR 0 39
54519: PUSH
54520: LD_VAR 0 40
54524: PUSH
54525: EMPTY
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: PUSH
54533: LD_VAR 0 4
54537: PUSH
54538: LD_INT 1
54540: PLUS
54541: ARRAY
54542: ST_TO_ADDR
54543: GO 54910
54545: LD_INT 6
54547: DOUBLE
54548: EQUAL
54549: IFTRUE 54601
54551: LD_INT 7
54553: DOUBLE
54554: EQUAL
54555: IFTRUE 54601
54557: LD_INT 8
54559: DOUBLE
54560: EQUAL
54561: IFTRUE 54601
54563: LD_INT 13
54565: DOUBLE
54566: EQUAL
54567: IFTRUE 54601
54569: LD_INT 12
54571: DOUBLE
54572: EQUAL
54573: IFTRUE 54601
54575: LD_INT 15
54577: DOUBLE
54578: EQUAL
54579: IFTRUE 54601
54581: LD_INT 11
54583: DOUBLE
54584: EQUAL
54585: IFTRUE 54601
54587: LD_INT 14
54589: DOUBLE
54590: EQUAL
54591: IFTRUE 54601
54593: LD_INT 10
54595: DOUBLE
54596: EQUAL
54597: IFTRUE 54601
54599: GO 54657
54601: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
54602: LD_ADDR_VAR 0 9
54606: PUSH
54607: LD_VAR 0 41
54611: PUSH
54612: LD_VAR 0 42
54616: PUSH
54617: LD_VAR 0 43
54621: PUSH
54622: LD_VAR 0 44
54626: PUSH
54627: LD_VAR 0 45
54631: PUSH
54632: LD_VAR 0 46
54636: PUSH
54637: EMPTY
54638: LIST
54639: LIST
54640: LIST
54641: LIST
54642: LIST
54643: LIST
54644: PUSH
54645: LD_VAR 0 4
54649: PUSH
54650: LD_INT 1
54652: PLUS
54653: ARRAY
54654: ST_TO_ADDR
54655: GO 54910
54657: LD_INT 36
54659: DOUBLE
54660: EQUAL
54661: IFTRUE 54665
54663: GO 54721
54665: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
54666: LD_ADDR_VAR 0 9
54670: PUSH
54671: LD_VAR 0 47
54675: PUSH
54676: LD_VAR 0 48
54680: PUSH
54681: LD_VAR 0 49
54685: PUSH
54686: LD_VAR 0 50
54690: PUSH
54691: LD_VAR 0 51
54695: PUSH
54696: LD_VAR 0 52
54700: PUSH
54701: EMPTY
54702: LIST
54703: LIST
54704: LIST
54705: LIST
54706: LIST
54707: LIST
54708: PUSH
54709: LD_VAR 0 4
54713: PUSH
54714: LD_INT 1
54716: PLUS
54717: ARRAY
54718: ST_TO_ADDR
54719: GO 54910
54721: LD_INT 4
54723: DOUBLE
54724: EQUAL
54725: IFTRUE 54747
54727: LD_INT 5
54729: DOUBLE
54730: EQUAL
54731: IFTRUE 54747
54733: LD_INT 34
54735: DOUBLE
54736: EQUAL
54737: IFTRUE 54747
54739: LD_INT 37
54741: DOUBLE
54742: EQUAL
54743: IFTRUE 54747
54745: GO 54803
54747: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
54748: LD_ADDR_VAR 0 9
54752: PUSH
54753: LD_VAR 0 53
54757: PUSH
54758: LD_VAR 0 54
54762: PUSH
54763: LD_VAR 0 55
54767: PUSH
54768: LD_VAR 0 56
54772: PUSH
54773: LD_VAR 0 57
54777: PUSH
54778: LD_VAR 0 58
54782: PUSH
54783: EMPTY
54784: LIST
54785: LIST
54786: LIST
54787: LIST
54788: LIST
54789: LIST
54790: PUSH
54791: LD_VAR 0 4
54795: PUSH
54796: LD_INT 1
54798: PLUS
54799: ARRAY
54800: ST_TO_ADDR
54801: GO 54910
54803: LD_INT 31
54805: DOUBLE
54806: EQUAL
54807: IFTRUE 54853
54809: LD_INT 32
54811: DOUBLE
54812: EQUAL
54813: IFTRUE 54853
54815: LD_INT 33
54817: DOUBLE
54818: EQUAL
54819: IFTRUE 54853
54821: LD_INT 27
54823: DOUBLE
54824: EQUAL
54825: IFTRUE 54853
54827: LD_INT 26
54829: DOUBLE
54830: EQUAL
54831: IFTRUE 54853
54833: LD_INT 28
54835: DOUBLE
54836: EQUAL
54837: IFTRUE 54853
54839: LD_INT 29
54841: DOUBLE
54842: EQUAL
54843: IFTRUE 54853
54845: LD_INT 30
54847: DOUBLE
54848: EQUAL
54849: IFTRUE 54853
54851: GO 54909
54853: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
54854: LD_ADDR_VAR 0 9
54858: PUSH
54859: LD_VAR 0 59
54863: PUSH
54864: LD_VAR 0 60
54868: PUSH
54869: LD_VAR 0 61
54873: PUSH
54874: LD_VAR 0 62
54878: PUSH
54879: LD_VAR 0 63
54883: PUSH
54884: LD_VAR 0 64
54888: PUSH
54889: EMPTY
54890: LIST
54891: LIST
54892: LIST
54893: LIST
54894: LIST
54895: LIST
54896: PUSH
54897: LD_VAR 0 4
54901: PUSH
54902: LD_INT 1
54904: PLUS
54905: ARRAY
54906: ST_TO_ADDR
54907: GO 54910
54909: POP
// temp_list2 = [ ] ;
54910: LD_ADDR_VAR 0 10
54914: PUSH
54915: EMPTY
54916: ST_TO_ADDR
// for i in temp_list do
54917: LD_ADDR_VAR 0 8
54921: PUSH
54922: LD_VAR 0 9
54926: PUSH
54927: FOR_IN
54928: IFFALSE 54980
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
54930: LD_ADDR_VAR 0 10
54934: PUSH
54935: LD_VAR 0 10
54939: PUSH
54940: LD_VAR 0 8
54944: PUSH
54945: LD_INT 1
54947: ARRAY
54948: PUSH
54949: LD_VAR 0 2
54953: PLUS
54954: PUSH
54955: LD_VAR 0 8
54959: PUSH
54960: LD_INT 2
54962: ARRAY
54963: PUSH
54964: LD_VAR 0 3
54968: PLUS
54969: PUSH
54970: EMPTY
54971: LIST
54972: LIST
54973: PUSH
54974: EMPTY
54975: LIST
54976: ADD
54977: ST_TO_ADDR
54978: GO 54927
54980: POP
54981: POP
// result = temp_list2 ;
54982: LD_ADDR_VAR 0 7
54986: PUSH
54987: LD_VAR 0 10
54991: ST_TO_ADDR
// end ;
54992: LD_VAR 0 7
54996: RET
// export function EnemyInRange ( unit , dist ) ; begin
54997: LD_INT 0
54999: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
55000: LD_ADDR_VAR 0 3
55004: PUSH
55005: LD_VAR 0 1
55009: PPUSH
55010: CALL_OW 255
55014: PPUSH
55015: LD_VAR 0 1
55019: PPUSH
55020: CALL_OW 250
55024: PPUSH
55025: LD_VAR 0 1
55029: PPUSH
55030: CALL_OW 251
55034: PPUSH
55035: LD_VAR 0 2
55039: PPUSH
55040: CALL 28393 0 4
55044: PUSH
55045: LD_INT 4
55047: ARRAY
55048: ST_TO_ADDR
// end ;
55049: LD_VAR 0 3
55053: RET
// export function PlayerSeeMe ( unit ) ; begin
55054: LD_INT 0
55056: PPUSH
// result := See ( your_side , unit ) ;
55057: LD_ADDR_VAR 0 2
55061: PUSH
55062: LD_OWVAR 2
55066: PPUSH
55067: LD_VAR 0 1
55071: PPUSH
55072: CALL_OW 292
55076: ST_TO_ADDR
// end ;
55077: LD_VAR 0 2
55081: RET
// export function ReverseDir ( unit ) ; begin
55082: LD_INT 0
55084: PPUSH
// if not unit then
55085: LD_VAR 0 1
55089: NOT
55090: IFFALSE 55094
// exit ;
55092: GO 55117
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
55094: LD_ADDR_VAR 0 2
55098: PUSH
55099: LD_VAR 0 1
55103: PPUSH
55104: CALL_OW 254
55108: PUSH
55109: LD_INT 3
55111: PLUS
55112: PUSH
55113: LD_INT 6
55115: MOD
55116: ST_TO_ADDR
// end ;
55117: LD_VAR 0 2
55121: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
55122: LD_INT 0
55124: PPUSH
55125: PPUSH
55126: PPUSH
55127: PPUSH
55128: PPUSH
// if not hexes then
55129: LD_VAR 0 2
55133: NOT
55134: IFFALSE 55138
// exit ;
55136: GO 55286
// dist := 9999 ;
55138: LD_ADDR_VAR 0 5
55142: PUSH
55143: LD_INT 9999
55145: ST_TO_ADDR
// for i = 1 to hexes do
55146: LD_ADDR_VAR 0 4
55150: PUSH
55151: DOUBLE
55152: LD_INT 1
55154: DEC
55155: ST_TO_ADDR
55156: LD_VAR 0 2
55160: PUSH
55161: FOR_TO
55162: IFFALSE 55274
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
55164: LD_VAR 0 1
55168: PPUSH
55169: LD_VAR 0 2
55173: PUSH
55174: LD_VAR 0 4
55178: ARRAY
55179: PUSH
55180: LD_INT 1
55182: ARRAY
55183: PPUSH
55184: LD_VAR 0 2
55188: PUSH
55189: LD_VAR 0 4
55193: ARRAY
55194: PUSH
55195: LD_INT 2
55197: ARRAY
55198: PPUSH
55199: CALL_OW 297
55203: PUSH
55204: LD_VAR 0 5
55208: LESS
55209: IFFALSE 55272
// begin hex := hexes [ i ] ;
55211: LD_ADDR_VAR 0 7
55215: PUSH
55216: LD_VAR 0 2
55220: PUSH
55221: LD_VAR 0 4
55225: ARRAY
55226: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
55227: LD_ADDR_VAR 0 5
55231: PUSH
55232: LD_VAR 0 1
55236: PPUSH
55237: LD_VAR 0 2
55241: PUSH
55242: LD_VAR 0 4
55246: ARRAY
55247: PUSH
55248: LD_INT 1
55250: ARRAY
55251: PPUSH
55252: LD_VAR 0 2
55256: PUSH
55257: LD_VAR 0 4
55261: ARRAY
55262: PUSH
55263: LD_INT 2
55265: ARRAY
55266: PPUSH
55267: CALL_OW 297
55271: ST_TO_ADDR
// end ; end ;
55272: GO 55161
55274: POP
55275: POP
// result := hex ;
55276: LD_ADDR_VAR 0 3
55280: PUSH
55281: LD_VAR 0 7
55285: ST_TO_ADDR
// end ;
55286: LD_VAR 0 3
55290: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
55291: LD_INT 0
55293: PPUSH
55294: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
55295: LD_VAR 0 1
55299: NOT
55300: PUSH
55301: LD_VAR 0 1
55305: PUSH
55306: LD_INT 21
55308: PUSH
55309: LD_INT 2
55311: PUSH
55312: EMPTY
55313: LIST
55314: LIST
55315: PUSH
55316: LD_INT 23
55318: PUSH
55319: LD_INT 2
55321: PUSH
55322: EMPTY
55323: LIST
55324: LIST
55325: PUSH
55326: EMPTY
55327: LIST
55328: LIST
55329: PPUSH
55330: CALL_OW 69
55334: IN
55335: NOT
55336: OR
55337: IFFALSE 55341
// exit ;
55339: GO 55388
// for i = 1 to 3 do
55341: LD_ADDR_VAR 0 3
55345: PUSH
55346: DOUBLE
55347: LD_INT 1
55349: DEC
55350: ST_TO_ADDR
55351: LD_INT 3
55353: PUSH
55354: FOR_TO
55355: IFFALSE 55386
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
55357: LD_VAR 0 1
55361: PPUSH
55362: CALL_OW 250
55366: PPUSH
55367: LD_VAR 0 1
55371: PPUSH
55372: CALL_OW 251
55376: PPUSH
55377: LD_INT 1
55379: PPUSH
55380: CALL_OW 453
55384: GO 55354
55386: POP
55387: POP
// end ;
55388: LD_VAR 0 2
55392: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
55393: LD_INT 0
55395: PPUSH
55396: PPUSH
55397: PPUSH
55398: PPUSH
55399: PPUSH
55400: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
55401: LD_VAR 0 1
55405: NOT
55406: PUSH
55407: LD_VAR 0 2
55411: NOT
55412: OR
55413: PUSH
55414: LD_VAR 0 1
55418: PPUSH
55419: CALL_OW 314
55423: OR
55424: IFFALSE 55428
// exit ;
55426: GO 55869
// x := GetX ( enemy_unit ) ;
55428: LD_ADDR_VAR 0 7
55432: PUSH
55433: LD_VAR 0 2
55437: PPUSH
55438: CALL_OW 250
55442: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
55443: LD_ADDR_VAR 0 8
55447: PUSH
55448: LD_VAR 0 2
55452: PPUSH
55453: CALL_OW 251
55457: ST_TO_ADDR
// if not x or not y then
55458: LD_VAR 0 7
55462: NOT
55463: PUSH
55464: LD_VAR 0 8
55468: NOT
55469: OR
55470: IFFALSE 55474
// exit ;
55472: GO 55869
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
55474: LD_ADDR_VAR 0 6
55478: PUSH
55479: LD_VAR 0 7
55483: PPUSH
55484: LD_INT 0
55486: PPUSH
55487: LD_INT 4
55489: PPUSH
55490: CALL_OW 272
55494: PUSH
55495: LD_VAR 0 8
55499: PPUSH
55500: LD_INT 0
55502: PPUSH
55503: LD_INT 4
55505: PPUSH
55506: CALL_OW 273
55510: PUSH
55511: EMPTY
55512: LIST
55513: LIST
55514: PUSH
55515: LD_VAR 0 7
55519: PPUSH
55520: LD_INT 1
55522: PPUSH
55523: LD_INT 4
55525: PPUSH
55526: CALL_OW 272
55530: PUSH
55531: LD_VAR 0 8
55535: PPUSH
55536: LD_INT 1
55538: PPUSH
55539: LD_INT 4
55541: PPUSH
55542: CALL_OW 273
55546: PUSH
55547: EMPTY
55548: LIST
55549: LIST
55550: PUSH
55551: LD_VAR 0 7
55555: PPUSH
55556: LD_INT 2
55558: PPUSH
55559: LD_INT 4
55561: PPUSH
55562: CALL_OW 272
55566: PUSH
55567: LD_VAR 0 8
55571: PPUSH
55572: LD_INT 2
55574: PPUSH
55575: LD_INT 4
55577: PPUSH
55578: CALL_OW 273
55582: PUSH
55583: EMPTY
55584: LIST
55585: LIST
55586: PUSH
55587: LD_VAR 0 7
55591: PPUSH
55592: LD_INT 3
55594: PPUSH
55595: LD_INT 4
55597: PPUSH
55598: CALL_OW 272
55602: PUSH
55603: LD_VAR 0 8
55607: PPUSH
55608: LD_INT 3
55610: PPUSH
55611: LD_INT 4
55613: PPUSH
55614: CALL_OW 273
55618: PUSH
55619: EMPTY
55620: LIST
55621: LIST
55622: PUSH
55623: LD_VAR 0 7
55627: PPUSH
55628: LD_INT 4
55630: PPUSH
55631: LD_INT 4
55633: PPUSH
55634: CALL_OW 272
55638: PUSH
55639: LD_VAR 0 8
55643: PPUSH
55644: LD_INT 4
55646: PPUSH
55647: LD_INT 4
55649: PPUSH
55650: CALL_OW 273
55654: PUSH
55655: EMPTY
55656: LIST
55657: LIST
55658: PUSH
55659: LD_VAR 0 7
55663: PPUSH
55664: LD_INT 5
55666: PPUSH
55667: LD_INT 4
55669: PPUSH
55670: CALL_OW 272
55674: PUSH
55675: LD_VAR 0 8
55679: PPUSH
55680: LD_INT 5
55682: PPUSH
55683: LD_INT 4
55685: PPUSH
55686: CALL_OW 273
55690: PUSH
55691: EMPTY
55692: LIST
55693: LIST
55694: PUSH
55695: EMPTY
55696: LIST
55697: LIST
55698: LIST
55699: LIST
55700: LIST
55701: LIST
55702: ST_TO_ADDR
// for i = tmp downto 1 do
55703: LD_ADDR_VAR 0 4
55707: PUSH
55708: DOUBLE
55709: LD_VAR 0 6
55713: INC
55714: ST_TO_ADDR
55715: LD_INT 1
55717: PUSH
55718: FOR_DOWNTO
55719: IFFALSE 55820
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
55721: LD_VAR 0 6
55725: PUSH
55726: LD_VAR 0 4
55730: ARRAY
55731: PUSH
55732: LD_INT 1
55734: ARRAY
55735: PPUSH
55736: LD_VAR 0 6
55740: PUSH
55741: LD_VAR 0 4
55745: ARRAY
55746: PUSH
55747: LD_INT 2
55749: ARRAY
55750: PPUSH
55751: CALL_OW 488
55755: NOT
55756: PUSH
55757: LD_VAR 0 6
55761: PUSH
55762: LD_VAR 0 4
55766: ARRAY
55767: PUSH
55768: LD_INT 1
55770: ARRAY
55771: PPUSH
55772: LD_VAR 0 6
55776: PUSH
55777: LD_VAR 0 4
55781: ARRAY
55782: PUSH
55783: LD_INT 2
55785: ARRAY
55786: PPUSH
55787: CALL_OW 428
55791: PUSH
55792: LD_INT 0
55794: NONEQUAL
55795: OR
55796: IFFALSE 55818
// tmp := Delete ( tmp , i ) ;
55798: LD_ADDR_VAR 0 6
55802: PUSH
55803: LD_VAR 0 6
55807: PPUSH
55808: LD_VAR 0 4
55812: PPUSH
55813: CALL_OW 3
55817: ST_TO_ADDR
55818: GO 55718
55820: POP
55821: POP
// j := GetClosestHex ( unit , tmp ) ;
55822: LD_ADDR_VAR 0 5
55826: PUSH
55827: LD_VAR 0 1
55831: PPUSH
55832: LD_VAR 0 6
55836: PPUSH
55837: CALL 55122 0 2
55841: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
55842: LD_VAR 0 1
55846: PPUSH
55847: LD_VAR 0 5
55851: PUSH
55852: LD_INT 1
55854: ARRAY
55855: PPUSH
55856: LD_VAR 0 5
55860: PUSH
55861: LD_INT 2
55863: ARRAY
55864: PPUSH
55865: CALL_OW 111
// end ;
55869: LD_VAR 0 3
55873: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
55874: LD_INT 0
55876: PPUSH
55877: PPUSH
55878: PPUSH
// uc_side = 0 ;
55879: LD_ADDR_OWVAR 20
55883: PUSH
55884: LD_INT 0
55886: ST_TO_ADDR
// uc_nation = 0 ;
55887: LD_ADDR_OWVAR 21
55891: PUSH
55892: LD_INT 0
55894: ST_TO_ADDR
// InitHc_All ( ) ;
55895: CALL_OW 584
// InitVc ;
55899: CALL_OW 20
// if mastodonts then
55903: LD_VAR 0 6
55907: IFFALSE 55974
// for i = 1 to mastodonts do
55909: LD_ADDR_VAR 0 11
55913: PUSH
55914: DOUBLE
55915: LD_INT 1
55917: DEC
55918: ST_TO_ADDR
55919: LD_VAR 0 6
55923: PUSH
55924: FOR_TO
55925: IFFALSE 55972
// begin vc_chassis := 31 ;
55927: LD_ADDR_OWVAR 37
55931: PUSH
55932: LD_INT 31
55934: ST_TO_ADDR
// vc_control := control_rider ;
55935: LD_ADDR_OWVAR 38
55939: PUSH
55940: LD_INT 4
55942: ST_TO_ADDR
// animal := CreateVehicle ;
55943: LD_ADDR_VAR 0 12
55947: PUSH
55948: CALL_OW 45
55952: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
55953: LD_VAR 0 12
55957: PPUSH
55958: LD_VAR 0 8
55962: PPUSH
55963: LD_INT 0
55965: PPUSH
55966: CALL 58162 0 3
// end ;
55970: GO 55924
55972: POP
55973: POP
// if horses then
55974: LD_VAR 0 5
55978: IFFALSE 56045
// for i = 1 to horses do
55980: LD_ADDR_VAR 0 11
55984: PUSH
55985: DOUBLE
55986: LD_INT 1
55988: DEC
55989: ST_TO_ADDR
55990: LD_VAR 0 5
55994: PUSH
55995: FOR_TO
55996: IFFALSE 56043
// begin hc_class := 21 ;
55998: LD_ADDR_OWVAR 28
56002: PUSH
56003: LD_INT 21
56005: ST_TO_ADDR
// hc_gallery :=  ;
56006: LD_ADDR_OWVAR 33
56010: PUSH
56011: LD_STRING 
56013: ST_TO_ADDR
// animal := CreateHuman ;
56014: LD_ADDR_VAR 0 12
56018: PUSH
56019: CALL_OW 44
56023: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56024: LD_VAR 0 12
56028: PPUSH
56029: LD_VAR 0 8
56033: PPUSH
56034: LD_INT 0
56036: PPUSH
56037: CALL 58162 0 3
// end ;
56041: GO 55995
56043: POP
56044: POP
// if birds then
56045: LD_VAR 0 1
56049: IFFALSE 56116
// for i = 1 to birds do
56051: LD_ADDR_VAR 0 11
56055: PUSH
56056: DOUBLE
56057: LD_INT 1
56059: DEC
56060: ST_TO_ADDR
56061: LD_VAR 0 1
56065: PUSH
56066: FOR_TO
56067: IFFALSE 56114
// begin hc_class = 18 ;
56069: LD_ADDR_OWVAR 28
56073: PUSH
56074: LD_INT 18
56076: ST_TO_ADDR
// hc_gallery =  ;
56077: LD_ADDR_OWVAR 33
56081: PUSH
56082: LD_STRING 
56084: ST_TO_ADDR
// animal := CreateHuman ;
56085: LD_ADDR_VAR 0 12
56089: PUSH
56090: CALL_OW 44
56094: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56095: LD_VAR 0 12
56099: PPUSH
56100: LD_VAR 0 8
56104: PPUSH
56105: LD_INT 0
56107: PPUSH
56108: CALL 58162 0 3
// end ;
56112: GO 56066
56114: POP
56115: POP
// if tigers then
56116: LD_VAR 0 2
56120: IFFALSE 56204
// for i = 1 to tigers do
56122: LD_ADDR_VAR 0 11
56126: PUSH
56127: DOUBLE
56128: LD_INT 1
56130: DEC
56131: ST_TO_ADDR
56132: LD_VAR 0 2
56136: PUSH
56137: FOR_TO
56138: IFFALSE 56202
// begin hc_class = class_tiger ;
56140: LD_ADDR_OWVAR 28
56144: PUSH
56145: LD_INT 14
56147: ST_TO_ADDR
// hc_gallery =  ;
56148: LD_ADDR_OWVAR 33
56152: PUSH
56153: LD_STRING 
56155: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
56156: LD_ADDR_OWVAR 35
56160: PUSH
56161: LD_INT 7
56163: NEG
56164: PPUSH
56165: LD_INT 7
56167: PPUSH
56168: CALL_OW 12
56172: ST_TO_ADDR
// animal := CreateHuman ;
56173: LD_ADDR_VAR 0 12
56177: PUSH
56178: CALL_OW 44
56182: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56183: LD_VAR 0 12
56187: PPUSH
56188: LD_VAR 0 8
56192: PPUSH
56193: LD_INT 0
56195: PPUSH
56196: CALL 58162 0 3
// end ;
56200: GO 56137
56202: POP
56203: POP
// if apemans then
56204: LD_VAR 0 3
56208: IFFALSE 56331
// for i = 1 to apemans do
56210: LD_ADDR_VAR 0 11
56214: PUSH
56215: DOUBLE
56216: LD_INT 1
56218: DEC
56219: ST_TO_ADDR
56220: LD_VAR 0 3
56224: PUSH
56225: FOR_TO
56226: IFFALSE 56329
// begin hc_class = class_apeman ;
56228: LD_ADDR_OWVAR 28
56232: PUSH
56233: LD_INT 12
56235: ST_TO_ADDR
// hc_gallery =  ;
56236: LD_ADDR_OWVAR 33
56240: PUSH
56241: LD_STRING 
56243: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
56244: LD_ADDR_OWVAR 35
56248: PUSH
56249: LD_INT 2
56251: NEG
56252: PPUSH
56253: LD_INT 2
56255: PPUSH
56256: CALL_OW 12
56260: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
56261: LD_ADDR_OWVAR 31
56265: PUSH
56266: LD_INT 1
56268: PPUSH
56269: LD_INT 3
56271: PPUSH
56272: CALL_OW 12
56276: PUSH
56277: LD_INT 1
56279: PPUSH
56280: LD_INT 3
56282: PPUSH
56283: CALL_OW 12
56287: PUSH
56288: LD_INT 0
56290: PUSH
56291: LD_INT 0
56293: PUSH
56294: EMPTY
56295: LIST
56296: LIST
56297: LIST
56298: LIST
56299: ST_TO_ADDR
// animal := CreateHuman ;
56300: LD_ADDR_VAR 0 12
56304: PUSH
56305: CALL_OW 44
56309: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56310: LD_VAR 0 12
56314: PPUSH
56315: LD_VAR 0 8
56319: PPUSH
56320: LD_INT 0
56322: PPUSH
56323: CALL 58162 0 3
// end ;
56327: GO 56225
56329: POP
56330: POP
// if enchidnas then
56331: LD_VAR 0 4
56335: IFFALSE 56402
// for i = 1 to enchidnas do
56337: LD_ADDR_VAR 0 11
56341: PUSH
56342: DOUBLE
56343: LD_INT 1
56345: DEC
56346: ST_TO_ADDR
56347: LD_VAR 0 4
56351: PUSH
56352: FOR_TO
56353: IFFALSE 56400
// begin hc_class = 13 ;
56355: LD_ADDR_OWVAR 28
56359: PUSH
56360: LD_INT 13
56362: ST_TO_ADDR
// hc_gallery =  ;
56363: LD_ADDR_OWVAR 33
56367: PUSH
56368: LD_STRING 
56370: ST_TO_ADDR
// animal := CreateHuman ;
56371: LD_ADDR_VAR 0 12
56375: PUSH
56376: CALL_OW 44
56380: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
56381: LD_VAR 0 12
56385: PPUSH
56386: LD_VAR 0 8
56390: PPUSH
56391: LD_INT 0
56393: PPUSH
56394: CALL 58162 0 3
// end ;
56398: GO 56352
56400: POP
56401: POP
// if fishes then
56402: LD_VAR 0 7
56406: IFFALSE 56473
// for i = 1 to fishes do
56408: LD_ADDR_VAR 0 11
56412: PUSH
56413: DOUBLE
56414: LD_INT 1
56416: DEC
56417: ST_TO_ADDR
56418: LD_VAR 0 7
56422: PUSH
56423: FOR_TO
56424: IFFALSE 56471
// begin hc_class = 20 ;
56426: LD_ADDR_OWVAR 28
56430: PUSH
56431: LD_INT 20
56433: ST_TO_ADDR
// hc_gallery =  ;
56434: LD_ADDR_OWVAR 33
56438: PUSH
56439: LD_STRING 
56441: ST_TO_ADDR
// animal := CreateHuman ;
56442: LD_ADDR_VAR 0 12
56446: PUSH
56447: CALL_OW 44
56451: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
56452: LD_VAR 0 12
56456: PPUSH
56457: LD_VAR 0 9
56461: PPUSH
56462: LD_INT 0
56464: PPUSH
56465: CALL 58162 0 3
// end ;
56469: GO 56423
56471: POP
56472: POP
// end ;
56473: LD_VAR 0 10
56477: RET
// export function WantHeal ( sci , unit ) ; begin
56478: LD_INT 0
56480: PPUSH
// if GetTaskList ( sci ) > 0 then
56481: LD_VAR 0 1
56485: PPUSH
56486: CALL_OW 437
56490: PUSH
56491: LD_INT 0
56493: GREATER
56494: IFFALSE 56564
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
56496: LD_VAR 0 1
56500: PPUSH
56501: CALL_OW 437
56505: PUSH
56506: LD_INT 1
56508: ARRAY
56509: PUSH
56510: LD_INT 1
56512: ARRAY
56513: PUSH
56514: LD_STRING l
56516: EQUAL
56517: PUSH
56518: LD_VAR 0 1
56522: PPUSH
56523: CALL_OW 437
56527: PUSH
56528: LD_INT 1
56530: ARRAY
56531: PUSH
56532: LD_INT 4
56534: ARRAY
56535: PUSH
56536: LD_VAR 0 2
56540: EQUAL
56541: AND
56542: IFFALSE 56554
// result := true else
56544: LD_ADDR_VAR 0 3
56548: PUSH
56549: LD_INT 1
56551: ST_TO_ADDR
56552: GO 56562
// result := false ;
56554: LD_ADDR_VAR 0 3
56558: PUSH
56559: LD_INT 0
56561: ST_TO_ADDR
// end else
56562: GO 56572
// result := false ;
56564: LD_ADDR_VAR 0 3
56568: PUSH
56569: LD_INT 0
56571: ST_TO_ADDR
// end ;
56572: LD_VAR 0 3
56576: RET
// export function HealTarget ( sci ) ; begin
56577: LD_INT 0
56579: PPUSH
// if not sci then
56580: LD_VAR 0 1
56584: NOT
56585: IFFALSE 56589
// exit ;
56587: GO 56654
// result := 0 ;
56589: LD_ADDR_VAR 0 2
56593: PUSH
56594: LD_INT 0
56596: ST_TO_ADDR
// if GetTaskList ( sci ) then
56597: LD_VAR 0 1
56601: PPUSH
56602: CALL_OW 437
56606: IFFALSE 56654
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
56608: LD_VAR 0 1
56612: PPUSH
56613: CALL_OW 437
56617: PUSH
56618: LD_INT 1
56620: ARRAY
56621: PUSH
56622: LD_INT 1
56624: ARRAY
56625: PUSH
56626: LD_STRING l
56628: EQUAL
56629: IFFALSE 56654
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
56631: LD_ADDR_VAR 0 2
56635: PUSH
56636: LD_VAR 0 1
56640: PPUSH
56641: CALL_OW 437
56645: PUSH
56646: LD_INT 1
56648: ARRAY
56649: PUSH
56650: LD_INT 4
56652: ARRAY
56653: ST_TO_ADDR
// end ;
56654: LD_VAR 0 2
56658: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
56659: LD_INT 0
56661: PPUSH
56662: PPUSH
56663: PPUSH
56664: PPUSH
// if not base_units then
56665: LD_VAR 0 1
56669: NOT
56670: IFFALSE 56674
// exit ;
56672: GO 56761
// result := false ;
56674: LD_ADDR_VAR 0 2
56678: PUSH
56679: LD_INT 0
56681: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
56682: LD_ADDR_VAR 0 5
56686: PUSH
56687: LD_VAR 0 1
56691: PPUSH
56692: LD_INT 21
56694: PUSH
56695: LD_INT 3
56697: PUSH
56698: EMPTY
56699: LIST
56700: LIST
56701: PPUSH
56702: CALL_OW 72
56706: ST_TO_ADDR
// if not tmp then
56707: LD_VAR 0 5
56711: NOT
56712: IFFALSE 56716
// exit ;
56714: GO 56761
// for i in tmp do
56716: LD_ADDR_VAR 0 3
56720: PUSH
56721: LD_VAR 0 5
56725: PUSH
56726: FOR_IN
56727: IFFALSE 56759
// begin result := EnemyInRange ( i , 22 ) ;
56729: LD_ADDR_VAR 0 2
56733: PUSH
56734: LD_VAR 0 3
56738: PPUSH
56739: LD_INT 22
56741: PPUSH
56742: CALL 54997 0 2
56746: ST_TO_ADDR
// if result then
56747: LD_VAR 0 2
56751: IFFALSE 56757
// exit ;
56753: POP
56754: POP
56755: GO 56761
// end ;
56757: GO 56726
56759: POP
56760: POP
// end ;
56761: LD_VAR 0 2
56765: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
56766: LD_INT 0
56768: PPUSH
56769: PPUSH
// if not units then
56770: LD_VAR 0 1
56774: NOT
56775: IFFALSE 56779
// exit ;
56777: GO 56849
// result := [ ] ;
56779: LD_ADDR_VAR 0 3
56783: PUSH
56784: EMPTY
56785: ST_TO_ADDR
// for i in units do
56786: LD_ADDR_VAR 0 4
56790: PUSH
56791: LD_VAR 0 1
56795: PUSH
56796: FOR_IN
56797: IFFALSE 56847
// if GetTag ( i ) = tag then
56799: LD_VAR 0 4
56803: PPUSH
56804: CALL_OW 110
56808: PUSH
56809: LD_VAR 0 2
56813: EQUAL
56814: IFFALSE 56845
// result := Replace ( result , result + 1 , i ) ;
56816: LD_ADDR_VAR 0 3
56820: PUSH
56821: LD_VAR 0 3
56825: PPUSH
56826: LD_VAR 0 3
56830: PUSH
56831: LD_INT 1
56833: PLUS
56834: PPUSH
56835: LD_VAR 0 4
56839: PPUSH
56840: CALL_OW 1
56844: ST_TO_ADDR
56845: GO 56796
56847: POP
56848: POP
// end ;
56849: LD_VAR 0 3
56853: RET
// export function IsDriver ( un ) ; begin
56854: LD_INT 0
56856: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
56857: LD_ADDR_VAR 0 2
56861: PUSH
56862: LD_VAR 0 1
56866: PUSH
56867: LD_INT 55
56869: PUSH
56870: EMPTY
56871: LIST
56872: PPUSH
56873: CALL_OW 69
56877: IN
56878: ST_TO_ADDR
// end ;
56879: LD_VAR 0 2
56883: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
56884: LD_INT 0
56886: PPUSH
56887: PPUSH
// list := [ ] ;
56888: LD_ADDR_VAR 0 5
56892: PUSH
56893: EMPTY
56894: ST_TO_ADDR
// case d of 0 :
56895: LD_VAR 0 3
56899: PUSH
56900: LD_INT 0
56902: DOUBLE
56903: EQUAL
56904: IFTRUE 56908
56906: GO 57041
56908: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
56909: LD_ADDR_VAR 0 5
56913: PUSH
56914: LD_VAR 0 1
56918: PUSH
56919: LD_INT 4
56921: MINUS
56922: PUSH
56923: LD_VAR 0 2
56927: PUSH
56928: LD_INT 4
56930: MINUS
56931: PUSH
56932: LD_INT 2
56934: PUSH
56935: EMPTY
56936: LIST
56937: LIST
56938: LIST
56939: PUSH
56940: LD_VAR 0 1
56944: PUSH
56945: LD_INT 3
56947: MINUS
56948: PUSH
56949: LD_VAR 0 2
56953: PUSH
56954: LD_INT 1
56956: PUSH
56957: EMPTY
56958: LIST
56959: LIST
56960: LIST
56961: PUSH
56962: LD_VAR 0 1
56966: PUSH
56967: LD_INT 4
56969: PLUS
56970: PUSH
56971: LD_VAR 0 2
56975: PUSH
56976: LD_INT 4
56978: PUSH
56979: EMPTY
56980: LIST
56981: LIST
56982: LIST
56983: PUSH
56984: LD_VAR 0 1
56988: PUSH
56989: LD_INT 3
56991: PLUS
56992: PUSH
56993: LD_VAR 0 2
56997: PUSH
56998: LD_INT 3
57000: PLUS
57001: PUSH
57002: LD_INT 5
57004: PUSH
57005: EMPTY
57006: LIST
57007: LIST
57008: LIST
57009: PUSH
57010: LD_VAR 0 1
57014: PUSH
57015: LD_VAR 0 2
57019: PUSH
57020: LD_INT 4
57022: PLUS
57023: PUSH
57024: LD_INT 0
57026: PUSH
57027: EMPTY
57028: LIST
57029: LIST
57030: LIST
57031: PUSH
57032: EMPTY
57033: LIST
57034: LIST
57035: LIST
57036: LIST
57037: LIST
57038: ST_TO_ADDR
// end ; 1 :
57039: GO 57739
57041: LD_INT 1
57043: DOUBLE
57044: EQUAL
57045: IFTRUE 57049
57047: GO 57182
57049: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
57050: LD_ADDR_VAR 0 5
57054: PUSH
57055: LD_VAR 0 1
57059: PUSH
57060: LD_VAR 0 2
57064: PUSH
57065: LD_INT 4
57067: MINUS
57068: PUSH
57069: LD_INT 3
57071: PUSH
57072: EMPTY
57073: LIST
57074: LIST
57075: LIST
57076: PUSH
57077: LD_VAR 0 1
57081: PUSH
57082: LD_INT 3
57084: MINUS
57085: PUSH
57086: LD_VAR 0 2
57090: PUSH
57091: LD_INT 3
57093: MINUS
57094: PUSH
57095: LD_INT 2
57097: PUSH
57098: EMPTY
57099: LIST
57100: LIST
57101: LIST
57102: PUSH
57103: LD_VAR 0 1
57107: PUSH
57108: LD_INT 4
57110: MINUS
57111: PUSH
57112: LD_VAR 0 2
57116: PUSH
57117: LD_INT 1
57119: PUSH
57120: EMPTY
57121: LIST
57122: LIST
57123: LIST
57124: PUSH
57125: LD_VAR 0 1
57129: PUSH
57130: LD_VAR 0 2
57134: PUSH
57135: LD_INT 3
57137: PLUS
57138: PUSH
57139: LD_INT 0
57141: PUSH
57142: EMPTY
57143: LIST
57144: LIST
57145: LIST
57146: PUSH
57147: LD_VAR 0 1
57151: PUSH
57152: LD_INT 4
57154: PLUS
57155: PUSH
57156: LD_VAR 0 2
57160: PUSH
57161: LD_INT 4
57163: PLUS
57164: PUSH
57165: LD_INT 5
57167: PUSH
57168: EMPTY
57169: LIST
57170: LIST
57171: LIST
57172: PUSH
57173: EMPTY
57174: LIST
57175: LIST
57176: LIST
57177: LIST
57178: LIST
57179: ST_TO_ADDR
// end ; 2 :
57180: GO 57739
57182: LD_INT 2
57184: DOUBLE
57185: EQUAL
57186: IFTRUE 57190
57188: GO 57319
57190: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
57191: LD_ADDR_VAR 0 5
57195: PUSH
57196: LD_VAR 0 1
57200: PUSH
57201: LD_VAR 0 2
57205: PUSH
57206: LD_INT 3
57208: MINUS
57209: PUSH
57210: LD_INT 3
57212: PUSH
57213: EMPTY
57214: LIST
57215: LIST
57216: LIST
57217: PUSH
57218: LD_VAR 0 1
57222: PUSH
57223: LD_INT 4
57225: PLUS
57226: PUSH
57227: LD_VAR 0 2
57231: PUSH
57232: LD_INT 4
57234: PUSH
57235: EMPTY
57236: LIST
57237: LIST
57238: LIST
57239: PUSH
57240: LD_VAR 0 1
57244: PUSH
57245: LD_VAR 0 2
57249: PUSH
57250: LD_INT 4
57252: PLUS
57253: PUSH
57254: LD_INT 0
57256: PUSH
57257: EMPTY
57258: LIST
57259: LIST
57260: LIST
57261: PUSH
57262: LD_VAR 0 1
57266: PUSH
57267: LD_INT 3
57269: MINUS
57270: PUSH
57271: LD_VAR 0 2
57275: PUSH
57276: LD_INT 1
57278: PUSH
57279: EMPTY
57280: LIST
57281: LIST
57282: LIST
57283: PUSH
57284: LD_VAR 0 1
57288: PUSH
57289: LD_INT 4
57291: MINUS
57292: PUSH
57293: LD_VAR 0 2
57297: PUSH
57298: LD_INT 4
57300: MINUS
57301: PUSH
57302: LD_INT 2
57304: PUSH
57305: EMPTY
57306: LIST
57307: LIST
57308: LIST
57309: PUSH
57310: EMPTY
57311: LIST
57312: LIST
57313: LIST
57314: LIST
57315: LIST
57316: ST_TO_ADDR
// end ; 3 :
57317: GO 57739
57319: LD_INT 3
57321: DOUBLE
57322: EQUAL
57323: IFTRUE 57327
57325: GO 57460
57327: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
57328: LD_ADDR_VAR 0 5
57332: PUSH
57333: LD_VAR 0 1
57337: PUSH
57338: LD_INT 3
57340: PLUS
57341: PUSH
57342: LD_VAR 0 2
57346: PUSH
57347: LD_INT 4
57349: PUSH
57350: EMPTY
57351: LIST
57352: LIST
57353: LIST
57354: PUSH
57355: LD_VAR 0 1
57359: PUSH
57360: LD_INT 4
57362: PLUS
57363: PUSH
57364: LD_VAR 0 2
57368: PUSH
57369: LD_INT 4
57371: PLUS
57372: PUSH
57373: LD_INT 5
57375: PUSH
57376: EMPTY
57377: LIST
57378: LIST
57379: LIST
57380: PUSH
57381: LD_VAR 0 1
57385: PUSH
57386: LD_INT 4
57388: MINUS
57389: PUSH
57390: LD_VAR 0 2
57394: PUSH
57395: LD_INT 1
57397: PUSH
57398: EMPTY
57399: LIST
57400: LIST
57401: LIST
57402: PUSH
57403: LD_VAR 0 1
57407: PUSH
57408: LD_VAR 0 2
57412: PUSH
57413: LD_INT 4
57415: MINUS
57416: PUSH
57417: LD_INT 3
57419: PUSH
57420: EMPTY
57421: LIST
57422: LIST
57423: LIST
57424: PUSH
57425: LD_VAR 0 1
57429: PUSH
57430: LD_INT 3
57432: MINUS
57433: PUSH
57434: LD_VAR 0 2
57438: PUSH
57439: LD_INT 3
57441: MINUS
57442: PUSH
57443: LD_INT 2
57445: PUSH
57446: EMPTY
57447: LIST
57448: LIST
57449: LIST
57450: PUSH
57451: EMPTY
57452: LIST
57453: LIST
57454: LIST
57455: LIST
57456: LIST
57457: ST_TO_ADDR
// end ; 4 :
57458: GO 57739
57460: LD_INT 4
57462: DOUBLE
57463: EQUAL
57464: IFTRUE 57468
57466: GO 57601
57468: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
57469: LD_ADDR_VAR 0 5
57473: PUSH
57474: LD_VAR 0 1
57478: PUSH
57479: LD_VAR 0 2
57483: PUSH
57484: LD_INT 4
57486: PLUS
57487: PUSH
57488: LD_INT 0
57490: PUSH
57491: EMPTY
57492: LIST
57493: LIST
57494: LIST
57495: PUSH
57496: LD_VAR 0 1
57500: PUSH
57501: LD_INT 3
57503: PLUS
57504: PUSH
57505: LD_VAR 0 2
57509: PUSH
57510: LD_INT 3
57512: PLUS
57513: PUSH
57514: LD_INT 5
57516: PUSH
57517: EMPTY
57518: LIST
57519: LIST
57520: LIST
57521: PUSH
57522: LD_VAR 0 1
57526: PUSH
57527: LD_INT 4
57529: PLUS
57530: PUSH
57531: LD_VAR 0 2
57535: PUSH
57536: LD_INT 4
57538: PUSH
57539: EMPTY
57540: LIST
57541: LIST
57542: LIST
57543: PUSH
57544: LD_VAR 0 1
57548: PUSH
57549: LD_VAR 0 2
57553: PUSH
57554: LD_INT 3
57556: MINUS
57557: PUSH
57558: LD_INT 3
57560: PUSH
57561: EMPTY
57562: LIST
57563: LIST
57564: LIST
57565: PUSH
57566: LD_VAR 0 1
57570: PUSH
57571: LD_INT 4
57573: MINUS
57574: PUSH
57575: LD_VAR 0 2
57579: PUSH
57580: LD_INT 4
57582: MINUS
57583: PUSH
57584: LD_INT 2
57586: PUSH
57587: EMPTY
57588: LIST
57589: LIST
57590: LIST
57591: PUSH
57592: EMPTY
57593: LIST
57594: LIST
57595: LIST
57596: LIST
57597: LIST
57598: ST_TO_ADDR
// end ; 5 :
57599: GO 57739
57601: LD_INT 5
57603: DOUBLE
57604: EQUAL
57605: IFTRUE 57609
57607: GO 57738
57609: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
57610: LD_ADDR_VAR 0 5
57614: PUSH
57615: LD_VAR 0 1
57619: PUSH
57620: LD_INT 4
57622: MINUS
57623: PUSH
57624: LD_VAR 0 2
57628: PUSH
57629: LD_INT 1
57631: PUSH
57632: EMPTY
57633: LIST
57634: LIST
57635: LIST
57636: PUSH
57637: LD_VAR 0 1
57641: PUSH
57642: LD_VAR 0 2
57646: PUSH
57647: LD_INT 4
57649: MINUS
57650: PUSH
57651: LD_INT 3
57653: PUSH
57654: EMPTY
57655: LIST
57656: LIST
57657: LIST
57658: PUSH
57659: LD_VAR 0 1
57663: PUSH
57664: LD_INT 4
57666: PLUS
57667: PUSH
57668: LD_VAR 0 2
57672: PUSH
57673: LD_INT 4
57675: PLUS
57676: PUSH
57677: LD_INT 5
57679: PUSH
57680: EMPTY
57681: LIST
57682: LIST
57683: LIST
57684: PUSH
57685: LD_VAR 0 1
57689: PUSH
57690: LD_INT 3
57692: PLUS
57693: PUSH
57694: LD_VAR 0 2
57698: PUSH
57699: LD_INT 4
57701: PUSH
57702: EMPTY
57703: LIST
57704: LIST
57705: LIST
57706: PUSH
57707: LD_VAR 0 1
57711: PUSH
57712: LD_VAR 0 2
57716: PUSH
57717: LD_INT 3
57719: PLUS
57720: PUSH
57721: LD_INT 0
57723: PUSH
57724: EMPTY
57725: LIST
57726: LIST
57727: LIST
57728: PUSH
57729: EMPTY
57730: LIST
57731: LIST
57732: LIST
57733: LIST
57734: LIST
57735: ST_TO_ADDR
// end ; end ;
57736: GO 57739
57738: POP
// result := list ;
57739: LD_ADDR_VAR 0 4
57743: PUSH
57744: LD_VAR 0 5
57748: ST_TO_ADDR
// end ;
57749: LD_VAR 0 4
57753: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
57754: LD_INT 0
57756: PPUSH
57757: PPUSH
57758: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
57759: LD_VAR 0 1
57763: NOT
57764: PUSH
57765: LD_VAR 0 2
57769: PUSH
57770: LD_INT 1
57772: PUSH
57773: LD_INT 2
57775: PUSH
57776: LD_INT 3
57778: PUSH
57779: LD_INT 4
57781: PUSH
57782: EMPTY
57783: LIST
57784: LIST
57785: LIST
57786: LIST
57787: IN
57788: NOT
57789: OR
57790: IFFALSE 57794
// exit ;
57792: GO 57886
// tmp := [ ] ;
57794: LD_ADDR_VAR 0 5
57798: PUSH
57799: EMPTY
57800: ST_TO_ADDR
// for i in units do
57801: LD_ADDR_VAR 0 4
57805: PUSH
57806: LD_VAR 0 1
57810: PUSH
57811: FOR_IN
57812: IFFALSE 57855
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
57814: LD_ADDR_VAR 0 5
57818: PUSH
57819: LD_VAR 0 5
57823: PPUSH
57824: LD_VAR 0 5
57828: PUSH
57829: LD_INT 1
57831: PLUS
57832: PPUSH
57833: LD_VAR 0 4
57837: PPUSH
57838: LD_VAR 0 2
57842: PPUSH
57843: CALL_OW 259
57847: PPUSH
57848: CALL_OW 2
57852: ST_TO_ADDR
57853: GO 57811
57855: POP
57856: POP
// if not tmp then
57857: LD_VAR 0 5
57861: NOT
57862: IFFALSE 57866
// exit ;
57864: GO 57886
// result := SortListByListDesc ( units , tmp ) ;
57866: LD_ADDR_VAR 0 3
57870: PUSH
57871: LD_VAR 0 1
57875: PPUSH
57876: LD_VAR 0 5
57880: PPUSH
57881: CALL_OW 77
57885: ST_TO_ADDR
// end ;
57886: LD_VAR 0 3
57890: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
57891: LD_INT 0
57893: PPUSH
57894: PPUSH
57895: PPUSH
// result := false ;
57896: LD_ADDR_VAR 0 3
57900: PUSH
57901: LD_INT 0
57903: ST_TO_ADDR
// x := GetX ( building ) ;
57904: LD_ADDR_VAR 0 4
57908: PUSH
57909: LD_VAR 0 2
57913: PPUSH
57914: CALL_OW 250
57918: ST_TO_ADDR
// y := GetY ( building ) ;
57919: LD_ADDR_VAR 0 5
57923: PUSH
57924: LD_VAR 0 2
57928: PPUSH
57929: CALL_OW 251
57933: ST_TO_ADDR
// if not building or not x or not y then
57934: LD_VAR 0 2
57938: NOT
57939: PUSH
57940: LD_VAR 0 4
57944: NOT
57945: OR
57946: PUSH
57947: LD_VAR 0 5
57951: NOT
57952: OR
57953: IFFALSE 57957
// exit ;
57955: GO 58049
// if GetTaskList ( unit ) then
57957: LD_VAR 0 1
57961: PPUSH
57962: CALL_OW 437
57966: IFFALSE 58049
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
57968: LD_STRING e
57970: PUSH
57971: LD_VAR 0 1
57975: PPUSH
57976: CALL_OW 437
57980: PUSH
57981: LD_INT 1
57983: ARRAY
57984: PUSH
57985: LD_INT 1
57987: ARRAY
57988: EQUAL
57989: PUSH
57990: LD_VAR 0 4
57994: PUSH
57995: LD_VAR 0 1
57999: PPUSH
58000: CALL_OW 437
58004: PUSH
58005: LD_INT 1
58007: ARRAY
58008: PUSH
58009: LD_INT 2
58011: ARRAY
58012: EQUAL
58013: AND
58014: PUSH
58015: LD_VAR 0 5
58019: PUSH
58020: LD_VAR 0 1
58024: PPUSH
58025: CALL_OW 437
58029: PUSH
58030: LD_INT 1
58032: ARRAY
58033: PUSH
58034: LD_INT 3
58036: ARRAY
58037: EQUAL
58038: AND
58039: IFFALSE 58049
// result := true end ;
58041: LD_ADDR_VAR 0 3
58045: PUSH
58046: LD_INT 1
58048: ST_TO_ADDR
// end ;
58049: LD_VAR 0 3
58053: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
58054: LD_INT 0
58056: PPUSH
// result := false ;
58057: LD_ADDR_VAR 0 4
58061: PUSH
58062: LD_INT 0
58064: ST_TO_ADDR
// if GetTaskList ( unit ) then
58065: LD_VAR 0 1
58069: PPUSH
58070: CALL_OW 437
58074: IFFALSE 58157
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
58076: LD_STRING M
58078: PUSH
58079: LD_VAR 0 1
58083: PPUSH
58084: CALL_OW 437
58088: PUSH
58089: LD_INT 1
58091: ARRAY
58092: PUSH
58093: LD_INT 1
58095: ARRAY
58096: EQUAL
58097: PUSH
58098: LD_VAR 0 2
58102: PUSH
58103: LD_VAR 0 1
58107: PPUSH
58108: CALL_OW 437
58112: PUSH
58113: LD_INT 1
58115: ARRAY
58116: PUSH
58117: LD_INT 2
58119: ARRAY
58120: EQUAL
58121: AND
58122: PUSH
58123: LD_VAR 0 3
58127: PUSH
58128: LD_VAR 0 1
58132: PPUSH
58133: CALL_OW 437
58137: PUSH
58138: LD_INT 1
58140: ARRAY
58141: PUSH
58142: LD_INT 3
58144: ARRAY
58145: EQUAL
58146: AND
58147: IFFALSE 58157
// result := true ;
58149: LD_ADDR_VAR 0 4
58153: PUSH
58154: LD_INT 1
58156: ST_TO_ADDR
// end ; end ;
58157: LD_VAR 0 4
58161: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
58162: LD_INT 0
58164: PPUSH
58165: PPUSH
58166: PPUSH
58167: PPUSH
// if not unit or not area then
58168: LD_VAR 0 1
58172: NOT
58173: PUSH
58174: LD_VAR 0 2
58178: NOT
58179: OR
58180: IFFALSE 58184
// exit ;
58182: GO 58348
// tmp := AreaToList ( area , i ) ;
58184: LD_ADDR_VAR 0 6
58188: PUSH
58189: LD_VAR 0 2
58193: PPUSH
58194: LD_VAR 0 5
58198: PPUSH
58199: CALL_OW 517
58203: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
58204: LD_ADDR_VAR 0 5
58208: PUSH
58209: DOUBLE
58210: LD_INT 1
58212: DEC
58213: ST_TO_ADDR
58214: LD_VAR 0 6
58218: PUSH
58219: LD_INT 1
58221: ARRAY
58222: PUSH
58223: FOR_TO
58224: IFFALSE 58346
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
58226: LD_ADDR_VAR 0 7
58230: PUSH
58231: LD_VAR 0 6
58235: PUSH
58236: LD_INT 1
58238: ARRAY
58239: PUSH
58240: LD_VAR 0 5
58244: ARRAY
58245: PUSH
58246: LD_VAR 0 6
58250: PUSH
58251: LD_INT 2
58253: ARRAY
58254: PUSH
58255: LD_VAR 0 5
58259: ARRAY
58260: PUSH
58261: EMPTY
58262: LIST
58263: LIST
58264: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
58265: LD_VAR 0 7
58269: PUSH
58270: LD_INT 1
58272: ARRAY
58273: PPUSH
58274: LD_VAR 0 7
58278: PUSH
58279: LD_INT 2
58281: ARRAY
58282: PPUSH
58283: CALL_OW 428
58287: PUSH
58288: LD_INT 0
58290: EQUAL
58291: IFFALSE 58344
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
58293: LD_VAR 0 1
58297: PPUSH
58298: LD_VAR 0 7
58302: PUSH
58303: LD_INT 1
58305: ARRAY
58306: PPUSH
58307: LD_VAR 0 7
58311: PUSH
58312: LD_INT 2
58314: ARRAY
58315: PPUSH
58316: LD_VAR 0 3
58320: PPUSH
58321: CALL_OW 48
// result := IsPlaced ( unit ) ;
58325: LD_ADDR_VAR 0 4
58329: PUSH
58330: LD_VAR 0 1
58334: PPUSH
58335: CALL_OW 305
58339: ST_TO_ADDR
// exit ;
58340: POP
58341: POP
58342: GO 58348
// end ; end ;
58344: GO 58223
58346: POP
58347: POP
// end ;
58348: LD_VAR 0 4
58352: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
58353: LD_INT 0
58355: PPUSH
58356: PPUSH
58357: PPUSH
// if not side or side > 8 then
58358: LD_VAR 0 1
58362: NOT
58363: PUSH
58364: LD_VAR 0 1
58368: PUSH
58369: LD_INT 8
58371: GREATER
58372: OR
58373: IFFALSE 58377
// exit ;
58375: GO 58564
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
58377: LD_ADDR_VAR 0 4
58381: PUSH
58382: LD_INT 22
58384: PUSH
58385: LD_VAR 0 1
58389: PUSH
58390: EMPTY
58391: LIST
58392: LIST
58393: PUSH
58394: LD_INT 21
58396: PUSH
58397: LD_INT 3
58399: PUSH
58400: EMPTY
58401: LIST
58402: LIST
58403: PUSH
58404: EMPTY
58405: LIST
58406: LIST
58407: PPUSH
58408: CALL_OW 69
58412: ST_TO_ADDR
// if not tmp then
58413: LD_VAR 0 4
58417: NOT
58418: IFFALSE 58422
// exit ;
58420: GO 58564
// enable_addtolog := true ;
58422: LD_ADDR_OWVAR 81
58426: PUSH
58427: LD_INT 1
58429: ST_TO_ADDR
// AddToLog ( [ ) ;
58430: LD_STRING [
58432: PPUSH
58433: CALL_OW 561
// for i in tmp do
58437: LD_ADDR_VAR 0 3
58441: PUSH
58442: LD_VAR 0 4
58446: PUSH
58447: FOR_IN
58448: IFFALSE 58555
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
58450: LD_STRING [
58452: PUSH
58453: LD_VAR 0 3
58457: PPUSH
58458: CALL_OW 266
58462: STR
58463: PUSH
58464: LD_STRING , 
58466: STR
58467: PUSH
58468: LD_VAR 0 3
58472: PPUSH
58473: CALL_OW 250
58477: STR
58478: PUSH
58479: LD_STRING , 
58481: STR
58482: PUSH
58483: LD_VAR 0 3
58487: PPUSH
58488: CALL_OW 251
58492: STR
58493: PUSH
58494: LD_STRING , 
58496: STR
58497: PUSH
58498: LD_VAR 0 3
58502: PPUSH
58503: CALL_OW 254
58507: STR
58508: PUSH
58509: LD_STRING , 
58511: STR
58512: PUSH
58513: LD_VAR 0 3
58517: PPUSH
58518: LD_INT 1
58520: PPUSH
58521: CALL_OW 268
58525: STR
58526: PUSH
58527: LD_STRING , 
58529: STR
58530: PUSH
58531: LD_VAR 0 3
58535: PPUSH
58536: LD_INT 2
58538: PPUSH
58539: CALL_OW 268
58543: STR
58544: PUSH
58545: LD_STRING ],
58547: STR
58548: PPUSH
58549: CALL_OW 561
// end ;
58553: GO 58447
58555: POP
58556: POP
// AddToLog ( ]; ) ;
58557: LD_STRING ];
58559: PPUSH
58560: CALL_OW 561
// end ;
58564: LD_VAR 0 2
58568: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
58569: LD_INT 0
58571: PPUSH
58572: PPUSH
58573: PPUSH
58574: PPUSH
58575: PPUSH
// if not area or not rate or not max then
58576: LD_VAR 0 1
58580: NOT
58581: PUSH
58582: LD_VAR 0 2
58586: NOT
58587: OR
58588: PUSH
58589: LD_VAR 0 4
58593: NOT
58594: OR
58595: IFFALSE 58599
// exit ;
58597: GO 58791
// while 1 do
58599: LD_INT 1
58601: IFFALSE 58791
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
58603: LD_ADDR_VAR 0 9
58607: PUSH
58608: LD_VAR 0 1
58612: PPUSH
58613: LD_INT 1
58615: PPUSH
58616: CALL_OW 287
58620: PUSH
58621: LD_INT 10
58623: MUL
58624: ST_TO_ADDR
// r := rate / 10 ;
58625: LD_ADDR_VAR 0 7
58629: PUSH
58630: LD_VAR 0 2
58634: PUSH
58635: LD_INT 10
58637: DIVREAL
58638: ST_TO_ADDR
// time := 1 1$00 ;
58639: LD_ADDR_VAR 0 8
58643: PUSH
58644: LD_INT 2100
58646: ST_TO_ADDR
// if amount < min then
58647: LD_VAR 0 9
58651: PUSH
58652: LD_VAR 0 3
58656: LESS
58657: IFFALSE 58675
// r := r * 2 else
58659: LD_ADDR_VAR 0 7
58663: PUSH
58664: LD_VAR 0 7
58668: PUSH
58669: LD_INT 2
58671: MUL
58672: ST_TO_ADDR
58673: GO 58701
// if amount > max then
58675: LD_VAR 0 9
58679: PUSH
58680: LD_VAR 0 4
58684: GREATER
58685: IFFALSE 58701
// r := r / 2 ;
58687: LD_ADDR_VAR 0 7
58691: PUSH
58692: LD_VAR 0 7
58696: PUSH
58697: LD_INT 2
58699: DIVREAL
58700: ST_TO_ADDR
// time := time / r ;
58701: LD_ADDR_VAR 0 8
58705: PUSH
58706: LD_VAR 0 8
58710: PUSH
58711: LD_VAR 0 7
58715: DIVREAL
58716: ST_TO_ADDR
// if time < 0 then
58717: LD_VAR 0 8
58721: PUSH
58722: LD_INT 0
58724: LESS
58725: IFFALSE 58742
// time := time * - 1 ;
58727: LD_ADDR_VAR 0 8
58731: PUSH
58732: LD_VAR 0 8
58736: PUSH
58737: LD_INT 1
58739: NEG
58740: MUL
58741: ST_TO_ADDR
// wait ( time ) ;
58742: LD_VAR 0 8
58746: PPUSH
58747: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
58751: LD_INT 35
58753: PPUSH
58754: LD_INT 875
58756: PPUSH
58757: CALL_OW 12
58761: PPUSH
58762: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
58766: LD_INT 1
58768: PPUSH
58769: LD_INT 5
58771: PPUSH
58772: CALL_OW 12
58776: PPUSH
58777: LD_VAR 0 1
58781: PPUSH
58782: LD_INT 1
58784: PPUSH
58785: CALL_OW 55
// end ;
58789: GO 58599
// end ;
58791: LD_VAR 0 5
58795: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
58796: LD_INT 0
58798: PPUSH
58799: PPUSH
58800: PPUSH
58801: PPUSH
58802: PPUSH
58803: PPUSH
58804: PPUSH
58805: PPUSH
// if not turrets or not factories then
58806: LD_VAR 0 1
58810: NOT
58811: PUSH
58812: LD_VAR 0 2
58816: NOT
58817: OR
58818: IFFALSE 58822
// exit ;
58820: GO 59129
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
58822: LD_ADDR_VAR 0 10
58826: PUSH
58827: LD_INT 5
58829: PUSH
58830: LD_INT 6
58832: PUSH
58833: EMPTY
58834: LIST
58835: LIST
58836: PUSH
58837: LD_INT 2
58839: PUSH
58840: LD_INT 4
58842: PUSH
58843: EMPTY
58844: LIST
58845: LIST
58846: PUSH
58847: LD_INT 3
58849: PUSH
58850: LD_INT 5
58852: PUSH
58853: EMPTY
58854: LIST
58855: LIST
58856: PUSH
58857: EMPTY
58858: LIST
58859: LIST
58860: LIST
58861: PUSH
58862: LD_INT 24
58864: PUSH
58865: LD_INT 25
58867: PUSH
58868: EMPTY
58869: LIST
58870: LIST
58871: PUSH
58872: LD_INT 23
58874: PUSH
58875: LD_INT 27
58877: PUSH
58878: EMPTY
58879: LIST
58880: LIST
58881: PUSH
58882: EMPTY
58883: LIST
58884: LIST
58885: PUSH
58886: LD_INT 42
58888: PUSH
58889: LD_INT 43
58891: PUSH
58892: EMPTY
58893: LIST
58894: LIST
58895: PUSH
58896: LD_INT 44
58898: PUSH
58899: LD_INT 46
58901: PUSH
58902: EMPTY
58903: LIST
58904: LIST
58905: PUSH
58906: LD_INT 45
58908: PUSH
58909: LD_INT 47
58911: PUSH
58912: EMPTY
58913: LIST
58914: LIST
58915: PUSH
58916: EMPTY
58917: LIST
58918: LIST
58919: LIST
58920: PUSH
58921: EMPTY
58922: LIST
58923: LIST
58924: LIST
58925: ST_TO_ADDR
// result := [ ] ;
58926: LD_ADDR_VAR 0 3
58930: PUSH
58931: EMPTY
58932: ST_TO_ADDR
// for i in turrets do
58933: LD_ADDR_VAR 0 4
58937: PUSH
58938: LD_VAR 0 1
58942: PUSH
58943: FOR_IN
58944: IFFALSE 59127
// begin nat := GetNation ( i ) ;
58946: LD_ADDR_VAR 0 7
58950: PUSH
58951: LD_VAR 0 4
58955: PPUSH
58956: CALL_OW 248
58960: ST_TO_ADDR
// weapon := 0 ;
58961: LD_ADDR_VAR 0 8
58965: PUSH
58966: LD_INT 0
58968: ST_TO_ADDR
// if not nat then
58969: LD_VAR 0 7
58973: NOT
58974: IFFALSE 58978
// continue ;
58976: GO 58943
// for j in list [ nat ] do
58978: LD_ADDR_VAR 0 5
58982: PUSH
58983: LD_VAR 0 10
58987: PUSH
58988: LD_VAR 0 7
58992: ARRAY
58993: PUSH
58994: FOR_IN
58995: IFFALSE 59036
// if GetBWeapon ( i ) = j [ 1 ] then
58997: LD_VAR 0 4
59001: PPUSH
59002: CALL_OW 269
59006: PUSH
59007: LD_VAR 0 5
59011: PUSH
59012: LD_INT 1
59014: ARRAY
59015: EQUAL
59016: IFFALSE 59034
// begin weapon := j [ 2 ] ;
59018: LD_ADDR_VAR 0 8
59022: PUSH
59023: LD_VAR 0 5
59027: PUSH
59028: LD_INT 2
59030: ARRAY
59031: ST_TO_ADDR
// break ;
59032: GO 59036
// end ;
59034: GO 58994
59036: POP
59037: POP
// if not weapon then
59038: LD_VAR 0 8
59042: NOT
59043: IFFALSE 59047
// continue ;
59045: GO 58943
// for k in factories do
59047: LD_ADDR_VAR 0 6
59051: PUSH
59052: LD_VAR 0 2
59056: PUSH
59057: FOR_IN
59058: IFFALSE 59123
// begin weapons := AvailableWeaponList ( k ) ;
59060: LD_ADDR_VAR 0 9
59064: PUSH
59065: LD_VAR 0 6
59069: PPUSH
59070: CALL_OW 478
59074: ST_TO_ADDR
// if not weapons then
59075: LD_VAR 0 9
59079: NOT
59080: IFFALSE 59084
// continue ;
59082: GO 59057
// if weapon in weapons then
59084: LD_VAR 0 8
59088: PUSH
59089: LD_VAR 0 9
59093: IN
59094: IFFALSE 59121
// begin result := [ i , weapon ] ;
59096: LD_ADDR_VAR 0 3
59100: PUSH
59101: LD_VAR 0 4
59105: PUSH
59106: LD_VAR 0 8
59110: PUSH
59111: EMPTY
59112: LIST
59113: LIST
59114: ST_TO_ADDR
// exit ;
59115: POP
59116: POP
59117: POP
59118: POP
59119: GO 59129
// end ; end ;
59121: GO 59057
59123: POP
59124: POP
// end ;
59125: GO 58943
59127: POP
59128: POP
// end ;
59129: LD_VAR 0 3
59133: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
59134: LD_INT 0
59136: PPUSH
// if not side or side > 8 then
59137: LD_VAR 0 3
59141: NOT
59142: PUSH
59143: LD_VAR 0 3
59147: PUSH
59148: LD_INT 8
59150: GREATER
59151: OR
59152: IFFALSE 59156
// exit ;
59154: GO 59215
// if not range then
59156: LD_VAR 0 4
59160: NOT
59161: IFFALSE 59172
// range := - 12 ;
59163: LD_ADDR_VAR 0 4
59167: PUSH
59168: LD_INT 12
59170: NEG
59171: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
59172: LD_VAR 0 1
59176: PPUSH
59177: LD_VAR 0 2
59181: PPUSH
59182: LD_VAR 0 3
59186: PPUSH
59187: LD_VAR 0 4
59191: PPUSH
59192: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
59196: LD_VAR 0 1
59200: PPUSH
59201: LD_VAR 0 2
59205: PPUSH
59206: LD_VAR 0 3
59210: PPUSH
59211: CALL_OW 331
// end ;
59215: LD_VAR 0 5
59219: RET
// export function Video ( mode ) ; begin
59220: LD_INT 0
59222: PPUSH
// ingame_video = mode ;
59223: LD_ADDR_OWVAR 52
59227: PUSH
59228: LD_VAR 0 1
59232: ST_TO_ADDR
// interface_hidden = mode ;
59233: LD_ADDR_OWVAR 54
59237: PUSH
59238: LD_VAR 0 1
59242: ST_TO_ADDR
// end ;
59243: LD_VAR 0 2
59247: RET
// export function Join ( array , element ) ; begin
59248: LD_INT 0
59250: PPUSH
// result := Replace ( array , array + 1 , element ) ;
59251: LD_ADDR_VAR 0 3
59255: PUSH
59256: LD_VAR 0 1
59260: PPUSH
59261: LD_VAR 0 1
59265: PUSH
59266: LD_INT 1
59268: PLUS
59269: PPUSH
59270: LD_VAR 0 2
59274: PPUSH
59275: CALL_OW 1
59279: ST_TO_ADDR
// end ;
59280: LD_VAR 0 3
59284: RET
// export function JoinUnion ( array , element ) ; begin
59285: LD_INT 0
59287: PPUSH
// result := array union element ;
59288: LD_ADDR_VAR 0 3
59292: PUSH
59293: LD_VAR 0 1
59297: PUSH
59298: LD_VAR 0 2
59302: UNION
59303: ST_TO_ADDR
// end ;
59304: LD_VAR 0 3
59308: RET
// export function GetBehemoths ( side ) ; begin
59309: LD_INT 0
59311: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
59312: LD_ADDR_VAR 0 2
59316: PUSH
59317: LD_INT 22
59319: PUSH
59320: LD_VAR 0 1
59324: PUSH
59325: EMPTY
59326: LIST
59327: LIST
59328: PUSH
59329: LD_INT 31
59331: PUSH
59332: LD_INT 25
59334: PUSH
59335: EMPTY
59336: LIST
59337: LIST
59338: PUSH
59339: EMPTY
59340: LIST
59341: LIST
59342: PPUSH
59343: CALL_OW 69
59347: ST_TO_ADDR
// end ;
59348: LD_VAR 0 2
59352: RET
// export function Shuffle ( array ) ; var i , index ; begin
59353: LD_INT 0
59355: PPUSH
59356: PPUSH
59357: PPUSH
// result := [ ] ;
59358: LD_ADDR_VAR 0 2
59362: PUSH
59363: EMPTY
59364: ST_TO_ADDR
// if not array then
59365: LD_VAR 0 1
59369: NOT
59370: IFFALSE 59374
// exit ;
59372: GO 59473
// Randomize ;
59374: CALL_OW 10
// for i = array downto 1 do
59378: LD_ADDR_VAR 0 3
59382: PUSH
59383: DOUBLE
59384: LD_VAR 0 1
59388: INC
59389: ST_TO_ADDR
59390: LD_INT 1
59392: PUSH
59393: FOR_DOWNTO
59394: IFFALSE 59471
// begin index := rand ( 1 , array ) ;
59396: LD_ADDR_VAR 0 4
59400: PUSH
59401: LD_INT 1
59403: PPUSH
59404: LD_VAR 0 1
59408: PPUSH
59409: CALL_OW 12
59413: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
59414: LD_ADDR_VAR 0 2
59418: PUSH
59419: LD_VAR 0 2
59423: PPUSH
59424: LD_VAR 0 2
59428: PUSH
59429: LD_INT 1
59431: PLUS
59432: PPUSH
59433: LD_VAR 0 1
59437: PUSH
59438: LD_VAR 0 4
59442: ARRAY
59443: PPUSH
59444: CALL_OW 2
59448: ST_TO_ADDR
// array := Delete ( array , index ) ;
59449: LD_ADDR_VAR 0 1
59453: PUSH
59454: LD_VAR 0 1
59458: PPUSH
59459: LD_VAR 0 4
59463: PPUSH
59464: CALL_OW 3
59468: ST_TO_ADDR
// end ;
59469: GO 59393
59471: POP
59472: POP
// end ;
59473: LD_VAR 0 2
59477: RET
// export function GetBaseMaterials ( base ) ; begin
59478: LD_INT 0
59480: PPUSH
// result := [ 0 , 0 , 0 ] ;
59481: LD_ADDR_VAR 0 2
59485: PUSH
59486: LD_INT 0
59488: PUSH
59489: LD_INT 0
59491: PUSH
59492: LD_INT 0
59494: PUSH
59495: EMPTY
59496: LIST
59497: LIST
59498: LIST
59499: ST_TO_ADDR
// if not base then
59500: LD_VAR 0 1
59504: NOT
59505: IFFALSE 59509
// exit ;
59507: GO 59558
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
59509: LD_ADDR_VAR 0 2
59513: PUSH
59514: LD_VAR 0 1
59518: PPUSH
59519: LD_INT 1
59521: PPUSH
59522: CALL_OW 275
59526: PUSH
59527: LD_VAR 0 1
59531: PPUSH
59532: LD_INT 2
59534: PPUSH
59535: CALL_OW 275
59539: PUSH
59540: LD_VAR 0 1
59544: PPUSH
59545: LD_INT 3
59547: PPUSH
59548: CALL_OW 275
59552: PUSH
59553: EMPTY
59554: LIST
59555: LIST
59556: LIST
59557: ST_TO_ADDR
// end ;
59558: LD_VAR 0 2
59562: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
59563: LD_INT 0
59565: PPUSH
59566: PPUSH
// result := array ;
59567: LD_ADDR_VAR 0 3
59571: PUSH
59572: LD_VAR 0 1
59576: ST_TO_ADDR
// if size > 0 then
59577: LD_VAR 0 2
59581: PUSH
59582: LD_INT 0
59584: GREATER
59585: IFFALSE 59631
// for i := array downto size do
59587: LD_ADDR_VAR 0 4
59591: PUSH
59592: DOUBLE
59593: LD_VAR 0 1
59597: INC
59598: ST_TO_ADDR
59599: LD_VAR 0 2
59603: PUSH
59604: FOR_DOWNTO
59605: IFFALSE 59629
// result := Delete ( result , result ) ;
59607: LD_ADDR_VAR 0 3
59611: PUSH
59612: LD_VAR 0 3
59616: PPUSH
59617: LD_VAR 0 3
59621: PPUSH
59622: CALL_OW 3
59626: ST_TO_ADDR
59627: GO 59604
59629: POP
59630: POP
// end ;
59631: LD_VAR 0 3
59635: RET
// export function ComExit ( unit ) ; var tmp ; begin
59636: LD_INT 0
59638: PPUSH
59639: PPUSH
// if not IsInUnit ( unit ) then
59640: LD_VAR 0 1
59644: PPUSH
59645: CALL_OW 310
59649: NOT
59650: IFFALSE 59654
// exit ;
59652: GO 59714
// tmp := IsInUnit ( unit ) ;
59654: LD_ADDR_VAR 0 3
59658: PUSH
59659: LD_VAR 0 1
59663: PPUSH
59664: CALL_OW 310
59668: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
59669: LD_VAR 0 3
59673: PPUSH
59674: CALL_OW 247
59678: PUSH
59679: LD_INT 2
59681: EQUAL
59682: IFFALSE 59695
// ComExitVehicle ( unit ) else
59684: LD_VAR 0 1
59688: PPUSH
59689: CALL_OW 121
59693: GO 59704
// ComExitBuilding ( unit ) ;
59695: LD_VAR 0 1
59699: PPUSH
59700: CALL_OW 122
// result := tmp ;
59704: LD_ADDR_VAR 0 2
59708: PUSH
59709: LD_VAR 0 3
59713: ST_TO_ADDR
// end ;
59714: LD_VAR 0 2
59718: RET
// export function ComExitAll ( units ) ; var i ; begin
59719: LD_INT 0
59721: PPUSH
59722: PPUSH
// if not units then
59723: LD_VAR 0 1
59727: NOT
59728: IFFALSE 59732
// exit ;
59730: GO 59758
// for i in units do
59732: LD_ADDR_VAR 0 3
59736: PUSH
59737: LD_VAR 0 1
59741: PUSH
59742: FOR_IN
59743: IFFALSE 59756
// ComExit ( i ) ;
59745: LD_VAR 0 3
59749: PPUSH
59750: CALL 59636 0 1
59754: GO 59742
59756: POP
59757: POP
// end ;
59758: LD_VAR 0 2
59762: RET
// export function ResetHc ; begin
59763: LD_INT 0
59765: PPUSH
// InitHc ;
59766: CALL_OW 19
// hc_importance := 0 ;
59770: LD_ADDR_OWVAR 32
59774: PUSH
59775: LD_INT 0
59777: ST_TO_ADDR
// end ;
59778: LD_VAR 0 1
59782: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
59783: LD_INT 0
59785: PPUSH
59786: PPUSH
59787: PPUSH
// _x := ( x1 + x2 ) div 2 ;
59788: LD_ADDR_VAR 0 6
59792: PUSH
59793: LD_VAR 0 1
59797: PUSH
59798: LD_VAR 0 3
59802: PLUS
59803: PUSH
59804: LD_INT 2
59806: DIV
59807: ST_TO_ADDR
// if _x < 0 then
59808: LD_VAR 0 6
59812: PUSH
59813: LD_INT 0
59815: LESS
59816: IFFALSE 59833
// _x := _x * - 1 ;
59818: LD_ADDR_VAR 0 6
59822: PUSH
59823: LD_VAR 0 6
59827: PUSH
59828: LD_INT 1
59830: NEG
59831: MUL
59832: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
59833: LD_ADDR_VAR 0 7
59837: PUSH
59838: LD_VAR 0 2
59842: PUSH
59843: LD_VAR 0 4
59847: PLUS
59848: PUSH
59849: LD_INT 2
59851: DIV
59852: ST_TO_ADDR
// if _y < 0 then
59853: LD_VAR 0 7
59857: PUSH
59858: LD_INT 0
59860: LESS
59861: IFFALSE 59878
// _y := _y * - 1 ;
59863: LD_ADDR_VAR 0 7
59867: PUSH
59868: LD_VAR 0 7
59872: PUSH
59873: LD_INT 1
59875: NEG
59876: MUL
59877: ST_TO_ADDR
// result := [ _x , _y ] ;
59878: LD_ADDR_VAR 0 5
59882: PUSH
59883: LD_VAR 0 6
59887: PUSH
59888: LD_VAR 0 7
59892: PUSH
59893: EMPTY
59894: LIST
59895: LIST
59896: ST_TO_ADDR
// end ;
59897: LD_VAR 0 5
59901: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
59902: LD_INT 0
59904: PPUSH
59905: PPUSH
59906: PPUSH
59907: PPUSH
// task := GetTaskList ( unit ) ;
59908: LD_ADDR_VAR 0 7
59912: PUSH
59913: LD_VAR 0 1
59917: PPUSH
59918: CALL_OW 437
59922: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
59923: LD_VAR 0 7
59927: NOT
59928: PUSH
59929: LD_VAR 0 1
59933: PPUSH
59934: LD_VAR 0 2
59938: PPUSH
59939: CALL_OW 308
59943: NOT
59944: AND
59945: IFFALSE 59949
// exit ;
59947: GO 60067
// if IsInArea ( unit , area ) then
59949: LD_VAR 0 1
59953: PPUSH
59954: LD_VAR 0 2
59958: PPUSH
59959: CALL_OW 308
59963: IFFALSE 59981
// begin ComMoveToArea ( unit , goAway ) ;
59965: LD_VAR 0 1
59969: PPUSH
59970: LD_VAR 0 3
59974: PPUSH
59975: CALL_OW 113
// exit ;
59979: GO 60067
// end ; if task [ 1 ] [ 1 ] <> M then
59981: LD_VAR 0 7
59985: PUSH
59986: LD_INT 1
59988: ARRAY
59989: PUSH
59990: LD_INT 1
59992: ARRAY
59993: PUSH
59994: LD_STRING M
59996: NONEQUAL
59997: IFFALSE 60001
// exit ;
59999: GO 60067
// x := task [ 1 ] [ 2 ] ;
60001: LD_ADDR_VAR 0 5
60005: PUSH
60006: LD_VAR 0 7
60010: PUSH
60011: LD_INT 1
60013: ARRAY
60014: PUSH
60015: LD_INT 2
60017: ARRAY
60018: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
60019: LD_ADDR_VAR 0 6
60023: PUSH
60024: LD_VAR 0 7
60028: PUSH
60029: LD_INT 1
60031: ARRAY
60032: PUSH
60033: LD_INT 3
60035: ARRAY
60036: ST_TO_ADDR
// if InArea ( x , y , area ) then
60037: LD_VAR 0 5
60041: PPUSH
60042: LD_VAR 0 6
60046: PPUSH
60047: LD_VAR 0 2
60051: PPUSH
60052: CALL_OW 309
60056: IFFALSE 60067
// ComStop ( unit ) ;
60058: LD_VAR 0 1
60062: PPUSH
60063: CALL_OW 141
// end ;
60067: LD_VAR 0 4
60071: RET
// export function Abs ( value ) ; begin
60072: LD_INT 0
60074: PPUSH
// result := value ;
60075: LD_ADDR_VAR 0 2
60079: PUSH
60080: LD_VAR 0 1
60084: ST_TO_ADDR
// if value < 0 then
60085: LD_VAR 0 1
60089: PUSH
60090: LD_INT 0
60092: LESS
60093: IFFALSE 60110
// result := value * - 1 ;
60095: LD_ADDR_VAR 0 2
60099: PUSH
60100: LD_VAR 0 1
60104: PUSH
60105: LD_INT 1
60107: NEG
60108: MUL
60109: ST_TO_ADDR
// end ;
60110: LD_VAR 0 2
60114: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
60115: LD_INT 0
60117: PPUSH
60118: PPUSH
60119: PPUSH
60120: PPUSH
60121: PPUSH
60122: PPUSH
60123: PPUSH
60124: PPUSH
// if not unit or not building then
60125: LD_VAR 0 1
60129: NOT
60130: PUSH
60131: LD_VAR 0 2
60135: NOT
60136: OR
60137: IFFALSE 60141
// exit ;
60139: GO 60367
// x := GetX ( building ) ;
60141: LD_ADDR_VAR 0 4
60145: PUSH
60146: LD_VAR 0 2
60150: PPUSH
60151: CALL_OW 250
60155: ST_TO_ADDR
// y := GetY ( building ) ;
60156: LD_ADDR_VAR 0 6
60160: PUSH
60161: LD_VAR 0 2
60165: PPUSH
60166: CALL_OW 251
60170: ST_TO_ADDR
// d := GetDir ( building ) ;
60171: LD_ADDR_VAR 0 8
60175: PUSH
60176: LD_VAR 0 2
60180: PPUSH
60181: CALL_OW 254
60185: ST_TO_ADDR
// r := 4 ;
60186: LD_ADDR_VAR 0 9
60190: PUSH
60191: LD_INT 4
60193: ST_TO_ADDR
// for i := 1 to 5 do
60194: LD_ADDR_VAR 0 10
60198: PUSH
60199: DOUBLE
60200: LD_INT 1
60202: DEC
60203: ST_TO_ADDR
60204: LD_INT 5
60206: PUSH
60207: FOR_TO
60208: IFFALSE 60365
// begin _x := ShiftX ( x , d , r + i ) ;
60210: LD_ADDR_VAR 0 5
60214: PUSH
60215: LD_VAR 0 4
60219: PPUSH
60220: LD_VAR 0 8
60224: PPUSH
60225: LD_VAR 0 9
60229: PUSH
60230: LD_VAR 0 10
60234: PLUS
60235: PPUSH
60236: CALL_OW 272
60240: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
60241: LD_ADDR_VAR 0 7
60245: PUSH
60246: LD_VAR 0 6
60250: PPUSH
60251: LD_VAR 0 8
60255: PPUSH
60256: LD_VAR 0 9
60260: PUSH
60261: LD_VAR 0 10
60265: PLUS
60266: PPUSH
60267: CALL_OW 273
60271: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
60272: LD_VAR 0 5
60276: PPUSH
60277: LD_VAR 0 7
60281: PPUSH
60282: CALL_OW 488
60286: PUSH
60287: LD_VAR 0 5
60291: PPUSH
60292: LD_VAR 0 7
60296: PPUSH
60297: CALL_OW 428
60301: PPUSH
60302: CALL_OW 247
60306: PUSH
60307: LD_INT 3
60309: PUSH
60310: LD_INT 2
60312: PUSH
60313: EMPTY
60314: LIST
60315: LIST
60316: IN
60317: NOT
60318: AND
60319: IFFALSE 60363
// begin ComMoveXY ( unit , _x , _y ) ;
60321: LD_VAR 0 1
60325: PPUSH
60326: LD_VAR 0 5
60330: PPUSH
60331: LD_VAR 0 7
60335: PPUSH
60336: CALL_OW 111
// result := [ _x , _y ] ;
60340: LD_ADDR_VAR 0 3
60344: PUSH
60345: LD_VAR 0 5
60349: PUSH
60350: LD_VAR 0 7
60354: PUSH
60355: EMPTY
60356: LIST
60357: LIST
60358: ST_TO_ADDR
// exit ;
60359: POP
60360: POP
60361: GO 60367
// end ; end ;
60363: GO 60207
60365: POP
60366: POP
// end ;
60367: LD_VAR 0 3
60371: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
60372: LD_INT 0
60374: PPUSH
60375: PPUSH
60376: PPUSH
// result := 0 ;
60377: LD_ADDR_VAR 0 3
60381: PUSH
60382: LD_INT 0
60384: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
60385: LD_VAR 0 1
60389: PUSH
60390: LD_INT 0
60392: LESS
60393: PUSH
60394: LD_VAR 0 1
60398: PUSH
60399: LD_INT 8
60401: GREATER
60402: OR
60403: PUSH
60404: LD_VAR 0 2
60408: PUSH
60409: LD_INT 0
60411: LESS
60412: OR
60413: PUSH
60414: LD_VAR 0 2
60418: PUSH
60419: LD_INT 8
60421: GREATER
60422: OR
60423: IFFALSE 60427
// exit ;
60425: GO 60502
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
60427: LD_ADDR_VAR 0 4
60431: PUSH
60432: LD_INT 22
60434: PUSH
60435: LD_VAR 0 2
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PPUSH
60444: CALL_OW 69
60448: PUSH
60449: FOR_IN
60450: IFFALSE 60500
// begin un := UnitShoot ( i ) ;
60452: LD_ADDR_VAR 0 5
60456: PUSH
60457: LD_VAR 0 4
60461: PPUSH
60462: CALL_OW 504
60466: ST_TO_ADDR
// if GetSide ( un ) = side1 then
60467: LD_VAR 0 5
60471: PPUSH
60472: CALL_OW 255
60476: PUSH
60477: LD_VAR 0 1
60481: EQUAL
60482: IFFALSE 60498
// begin result := un ;
60484: LD_ADDR_VAR 0 3
60488: PUSH
60489: LD_VAR 0 5
60493: ST_TO_ADDR
// exit ;
60494: POP
60495: POP
60496: GO 60502
// end ; end ;
60498: GO 60449
60500: POP
60501: POP
// end ;
60502: LD_VAR 0 3
60506: RET
// export function GetCargoBay ( units ) ; begin
60507: LD_INT 0
60509: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
60510: LD_ADDR_VAR 0 2
60514: PUSH
60515: LD_VAR 0 1
60519: PPUSH
60520: LD_INT 2
60522: PUSH
60523: LD_INT 34
60525: PUSH
60526: LD_INT 12
60528: PUSH
60529: EMPTY
60530: LIST
60531: LIST
60532: PUSH
60533: LD_INT 34
60535: PUSH
60536: LD_INT 51
60538: PUSH
60539: EMPTY
60540: LIST
60541: LIST
60542: PUSH
60543: LD_INT 34
60545: PUSH
60546: LD_INT 32
60548: PUSH
60549: EMPTY
60550: LIST
60551: LIST
60552: PUSH
60553: LD_INT 34
60555: PUSH
60556: LD_EXP 82
60560: PUSH
60561: EMPTY
60562: LIST
60563: LIST
60564: PUSH
60565: EMPTY
60566: LIST
60567: LIST
60568: LIST
60569: LIST
60570: LIST
60571: PPUSH
60572: CALL_OW 72
60576: ST_TO_ADDR
// end ;
60577: LD_VAR 0 2
60581: RET
// export function Negate ( value ) ; begin
60582: LD_INT 0
60584: PPUSH
// result := not value ;
60585: LD_ADDR_VAR 0 2
60589: PUSH
60590: LD_VAR 0 1
60594: NOT
60595: ST_TO_ADDR
// end ;
60596: LD_VAR 0 2
60600: RET
// export function Inc ( value ) ; begin
60601: LD_INT 0
60603: PPUSH
// result := value + 1 ;
60604: LD_ADDR_VAR 0 2
60608: PUSH
60609: LD_VAR 0 1
60613: PUSH
60614: LD_INT 1
60616: PLUS
60617: ST_TO_ADDR
// end ;
60618: LD_VAR 0 2
60622: RET
// export function Dec ( value ) ; begin
60623: LD_INT 0
60625: PPUSH
// result := value - 1 ;
60626: LD_ADDR_VAR 0 2
60630: PUSH
60631: LD_VAR 0 1
60635: PUSH
60636: LD_INT 1
60638: MINUS
60639: ST_TO_ADDR
// end ;
60640: LD_VAR 0 2
60644: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
60645: LD_INT 0
60647: PPUSH
60648: PPUSH
60649: PPUSH
60650: PPUSH
60651: PPUSH
60652: PPUSH
60653: PPUSH
60654: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
60655: LD_VAR 0 1
60659: PPUSH
60660: LD_VAR 0 2
60664: PPUSH
60665: CALL_OW 488
60669: NOT
60670: PUSH
60671: LD_VAR 0 3
60675: PPUSH
60676: LD_VAR 0 4
60680: PPUSH
60681: CALL_OW 488
60685: NOT
60686: OR
60687: IFFALSE 60700
// begin result := - 1 ;
60689: LD_ADDR_VAR 0 5
60693: PUSH
60694: LD_INT 1
60696: NEG
60697: ST_TO_ADDR
// exit ;
60698: GO 60935
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
60700: LD_ADDR_VAR 0 12
60704: PUSH
60705: LD_VAR 0 1
60709: PPUSH
60710: LD_VAR 0 2
60714: PPUSH
60715: LD_VAR 0 3
60719: PPUSH
60720: LD_VAR 0 4
60724: PPUSH
60725: CALL 59783 0 4
60729: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
60730: LD_ADDR_VAR 0 11
60734: PUSH
60735: LD_VAR 0 1
60739: PPUSH
60740: LD_VAR 0 2
60744: PPUSH
60745: LD_VAR 0 12
60749: PUSH
60750: LD_INT 1
60752: ARRAY
60753: PPUSH
60754: LD_VAR 0 12
60758: PUSH
60759: LD_INT 2
60761: ARRAY
60762: PPUSH
60763: CALL_OW 298
60767: ST_TO_ADDR
// distance := 9999 ;
60768: LD_ADDR_VAR 0 10
60772: PUSH
60773: LD_INT 9999
60775: ST_TO_ADDR
// for i := 0 to 5 do
60776: LD_ADDR_VAR 0 6
60780: PUSH
60781: DOUBLE
60782: LD_INT 0
60784: DEC
60785: ST_TO_ADDR
60786: LD_INT 5
60788: PUSH
60789: FOR_TO
60790: IFFALSE 60933
// begin _x := ShiftX ( x1 , i , centerDist ) ;
60792: LD_ADDR_VAR 0 7
60796: PUSH
60797: LD_VAR 0 1
60801: PPUSH
60802: LD_VAR 0 6
60806: PPUSH
60807: LD_VAR 0 11
60811: PPUSH
60812: CALL_OW 272
60816: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
60817: LD_ADDR_VAR 0 8
60821: PUSH
60822: LD_VAR 0 2
60826: PPUSH
60827: LD_VAR 0 6
60831: PPUSH
60832: LD_VAR 0 11
60836: PPUSH
60837: CALL_OW 273
60841: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
60842: LD_VAR 0 7
60846: PPUSH
60847: LD_VAR 0 8
60851: PPUSH
60852: CALL_OW 488
60856: NOT
60857: IFFALSE 60861
// continue ;
60859: GO 60789
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
60861: LD_ADDR_VAR 0 9
60865: PUSH
60866: LD_VAR 0 12
60870: PUSH
60871: LD_INT 1
60873: ARRAY
60874: PPUSH
60875: LD_VAR 0 12
60879: PUSH
60880: LD_INT 2
60882: ARRAY
60883: PPUSH
60884: LD_VAR 0 7
60888: PPUSH
60889: LD_VAR 0 8
60893: PPUSH
60894: CALL_OW 298
60898: ST_TO_ADDR
// if tmp < distance then
60899: LD_VAR 0 9
60903: PUSH
60904: LD_VAR 0 10
60908: LESS
60909: IFFALSE 60931
// begin result := i ;
60911: LD_ADDR_VAR 0 5
60915: PUSH
60916: LD_VAR 0 6
60920: ST_TO_ADDR
// distance := tmp ;
60921: LD_ADDR_VAR 0 10
60925: PUSH
60926: LD_VAR 0 9
60930: ST_TO_ADDR
// end ; end ;
60931: GO 60789
60933: POP
60934: POP
// end ;
60935: LD_VAR 0 5
60939: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
60940: LD_INT 0
60942: PPUSH
60943: PPUSH
// if not driver or not IsInUnit ( driver ) then
60944: LD_VAR 0 1
60948: NOT
60949: PUSH
60950: LD_VAR 0 1
60954: PPUSH
60955: CALL_OW 310
60959: NOT
60960: OR
60961: IFFALSE 60965
// exit ;
60963: GO 61055
// vehicle := IsInUnit ( driver ) ;
60965: LD_ADDR_VAR 0 3
60969: PUSH
60970: LD_VAR 0 1
60974: PPUSH
60975: CALL_OW 310
60979: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
60980: LD_VAR 0 1
60984: PPUSH
60985: LD_STRING \
60987: PUSH
60988: LD_INT 0
60990: PUSH
60991: LD_INT 0
60993: PUSH
60994: LD_INT 0
60996: PUSH
60997: LD_INT 0
60999: PUSH
61000: LD_INT 0
61002: PUSH
61003: LD_INT 0
61005: PUSH
61006: EMPTY
61007: LIST
61008: LIST
61009: LIST
61010: LIST
61011: LIST
61012: LIST
61013: LIST
61014: PUSH
61015: LD_STRING E
61017: PUSH
61018: LD_INT 0
61020: PUSH
61021: LD_INT 0
61023: PUSH
61024: LD_VAR 0 3
61028: PUSH
61029: LD_INT 0
61031: PUSH
61032: LD_INT 0
61034: PUSH
61035: LD_INT 0
61037: PUSH
61038: EMPTY
61039: LIST
61040: LIST
61041: LIST
61042: LIST
61043: LIST
61044: LIST
61045: LIST
61046: PUSH
61047: EMPTY
61048: LIST
61049: LIST
61050: PPUSH
61051: CALL_OW 446
// end ;
61055: LD_VAR 0 2
61059: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
61060: LD_INT 0
61062: PPUSH
61063: PPUSH
// if not driver or not IsInUnit ( driver ) then
61064: LD_VAR 0 1
61068: NOT
61069: PUSH
61070: LD_VAR 0 1
61074: PPUSH
61075: CALL_OW 310
61079: NOT
61080: OR
61081: IFFALSE 61085
// exit ;
61083: GO 61175
// vehicle := IsInUnit ( driver ) ;
61085: LD_ADDR_VAR 0 3
61089: PUSH
61090: LD_VAR 0 1
61094: PPUSH
61095: CALL_OW 310
61099: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
61100: LD_VAR 0 1
61104: PPUSH
61105: LD_STRING \
61107: PUSH
61108: LD_INT 0
61110: PUSH
61111: LD_INT 0
61113: PUSH
61114: LD_INT 0
61116: PUSH
61117: LD_INT 0
61119: PUSH
61120: LD_INT 0
61122: PUSH
61123: LD_INT 0
61125: PUSH
61126: EMPTY
61127: LIST
61128: LIST
61129: LIST
61130: LIST
61131: LIST
61132: LIST
61133: LIST
61134: PUSH
61135: LD_STRING E
61137: PUSH
61138: LD_INT 0
61140: PUSH
61141: LD_INT 0
61143: PUSH
61144: LD_VAR 0 3
61148: PUSH
61149: LD_INT 0
61151: PUSH
61152: LD_INT 0
61154: PUSH
61155: LD_INT 0
61157: PUSH
61158: EMPTY
61159: LIST
61160: LIST
61161: LIST
61162: LIST
61163: LIST
61164: LIST
61165: LIST
61166: PUSH
61167: EMPTY
61168: LIST
61169: LIST
61170: PPUSH
61171: CALL_OW 447
// end ;
61175: LD_VAR 0 2
61179: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
61180: LD_INT 0
61182: PPUSH
61183: PPUSH
61184: PPUSH
// tmp := [ ] ;
61185: LD_ADDR_VAR 0 5
61189: PUSH
61190: EMPTY
61191: ST_TO_ADDR
// for i in units do
61192: LD_ADDR_VAR 0 4
61196: PUSH
61197: LD_VAR 0 1
61201: PUSH
61202: FOR_IN
61203: IFFALSE 61241
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
61205: LD_ADDR_VAR 0 5
61209: PUSH
61210: LD_VAR 0 5
61214: PPUSH
61215: LD_VAR 0 5
61219: PUSH
61220: LD_INT 1
61222: PLUS
61223: PPUSH
61224: LD_VAR 0 4
61228: PPUSH
61229: CALL_OW 256
61233: PPUSH
61234: CALL_OW 2
61238: ST_TO_ADDR
61239: GO 61202
61241: POP
61242: POP
// if not tmp then
61243: LD_VAR 0 5
61247: NOT
61248: IFFALSE 61252
// exit ;
61250: GO 61300
// if asc then
61252: LD_VAR 0 2
61256: IFFALSE 61280
// result := SortListByListAsc ( units , tmp ) else
61258: LD_ADDR_VAR 0 3
61262: PUSH
61263: LD_VAR 0 1
61267: PPUSH
61268: LD_VAR 0 5
61272: PPUSH
61273: CALL_OW 76
61277: ST_TO_ADDR
61278: GO 61300
// result := SortListByListDesc ( units , tmp ) ;
61280: LD_ADDR_VAR 0 3
61284: PUSH
61285: LD_VAR 0 1
61289: PPUSH
61290: LD_VAR 0 5
61294: PPUSH
61295: CALL_OW 77
61299: ST_TO_ADDR
// end ;
61300: LD_VAR 0 3
61304: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
61305: LD_INT 0
61307: PPUSH
61308: PPUSH
// task := GetTaskList ( mech ) ;
61309: LD_ADDR_VAR 0 4
61313: PUSH
61314: LD_VAR 0 1
61318: PPUSH
61319: CALL_OW 437
61323: ST_TO_ADDR
// if not task then
61324: LD_VAR 0 4
61328: NOT
61329: IFFALSE 61333
// exit ;
61331: GO 61375
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
61333: LD_ADDR_VAR 0 3
61337: PUSH
61338: LD_VAR 0 4
61342: PUSH
61343: LD_INT 1
61345: ARRAY
61346: PUSH
61347: LD_INT 1
61349: ARRAY
61350: PUSH
61351: LD_STRING r
61353: EQUAL
61354: PUSH
61355: LD_VAR 0 4
61359: PUSH
61360: LD_INT 1
61362: ARRAY
61363: PUSH
61364: LD_INT 4
61366: ARRAY
61367: PUSH
61368: LD_VAR 0 2
61372: EQUAL
61373: AND
61374: ST_TO_ADDR
// end ;
61375: LD_VAR 0 3
61379: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
61380: LD_INT 0
61382: PPUSH
// SetDir ( unit , d ) ;
61383: LD_VAR 0 1
61387: PPUSH
61388: LD_VAR 0 4
61392: PPUSH
61393: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
61397: LD_VAR 0 1
61401: PPUSH
61402: LD_VAR 0 2
61406: PPUSH
61407: LD_VAR 0 3
61411: PPUSH
61412: LD_VAR 0 5
61416: PPUSH
61417: CALL_OW 48
// end ;
61421: LD_VAR 0 6
61425: RET
// export function ToNaturalNumber ( number ) ; begin
61426: LD_INT 0
61428: PPUSH
// result := number div 1 ;
61429: LD_ADDR_VAR 0 2
61433: PUSH
61434: LD_VAR 0 1
61438: PUSH
61439: LD_INT 1
61441: DIV
61442: ST_TO_ADDR
// if number < 0 then
61443: LD_VAR 0 1
61447: PUSH
61448: LD_INT 0
61450: LESS
61451: IFFALSE 61461
// result := 0 ;
61453: LD_ADDR_VAR 0 2
61457: PUSH
61458: LD_INT 0
61460: ST_TO_ADDR
// end ;
61461: LD_VAR 0 2
61465: RET
// export function SortByClass ( units , class ) ; var un ; begin
61466: LD_INT 0
61468: PPUSH
61469: PPUSH
// if not units or not class then
61470: LD_VAR 0 1
61474: NOT
61475: PUSH
61476: LD_VAR 0 2
61480: NOT
61481: OR
61482: IFFALSE 61486
// exit ;
61484: GO 61581
// result := [ ] ;
61486: LD_ADDR_VAR 0 3
61490: PUSH
61491: EMPTY
61492: ST_TO_ADDR
// for un in units do
61493: LD_ADDR_VAR 0 4
61497: PUSH
61498: LD_VAR 0 1
61502: PUSH
61503: FOR_IN
61504: IFFALSE 61579
// if GetClass ( un ) = class then
61506: LD_VAR 0 4
61510: PPUSH
61511: CALL_OW 257
61515: PUSH
61516: LD_VAR 0 2
61520: EQUAL
61521: IFFALSE 61548
// result := Insert ( result , 1 , un ) else
61523: LD_ADDR_VAR 0 3
61527: PUSH
61528: LD_VAR 0 3
61532: PPUSH
61533: LD_INT 1
61535: PPUSH
61536: LD_VAR 0 4
61540: PPUSH
61541: CALL_OW 2
61545: ST_TO_ADDR
61546: GO 61577
// result := Replace ( result , result + 1 , un ) ;
61548: LD_ADDR_VAR 0 3
61552: PUSH
61553: LD_VAR 0 3
61557: PPUSH
61558: LD_VAR 0 3
61562: PUSH
61563: LD_INT 1
61565: PLUS
61566: PPUSH
61567: LD_VAR 0 4
61571: PPUSH
61572: CALL_OW 1
61576: ST_TO_ADDR
61577: GO 61503
61579: POP
61580: POP
// end ;
61581: LD_VAR 0 3
61585: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
61586: LD_INT 0
61588: PPUSH
61589: PPUSH
61590: PPUSH
61591: PPUSH
61592: PPUSH
61593: PPUSH
61594: PPUSH
// result := [ ] ;
61595: LD_ADDR_VAR 0 4
61599: PUSH
61600: EMPTY
61601: ST_TO_ADDR
// if x - r < 0 then
61602: LD_VAR 0 1
61606: PUSH
61607: LD_VAR 0 3
61611: MINUS
61612: PUSH
61613: LD_INT 0
61615: LESS
61616: IFFALSE 61628
// min_x := 0 else
61618: LD_ADDR_VAR 0 8
61622: PUSH
61623: LD_INT 0
61625: ST_TO_ADDR
61626: GO 61644
// min_x := x - r ;
61628: LD_ADDR_VAR 0 8
61632: PUSH
61633: LD_VAR 0 1
61637: PUSH
61638: LD_VAR 0 3
61642: MINUS
61643: ST_TO_ADDR
// if y - r < 0 then
61644: LD_VAR 0 2
61648: PUSH
61649: LD_VAR 0 3
61653: MINUS
61654: PUSH
61655: LD_INT 0
61657: LESS
61658: IFFALSE 61670
// min_y := 0 else
61660: LD_ADDR_VAR 0 7
61664: PUSH
61665: LD_INT 0
61667: ST_TO_ADDR
61668: GO 61686
// min_y := y - r ;
61670: LD_ADDR_VAR 0 7
61674: PUSH
61675: LD_VAR 0 2
61679: PUSH
61680: LD_VAR 0 3
61684: MINUS
61685: ST_TO_ADDR
// max_x := x + r ;
61686: LD_ADDR_VAR 0 9
61690: PUSH
61691: LD_VAR 0 1
61695: PUSH
61696: LD_VAR 0 3
61700: PLUS
61701: ST_TO_ADDR
// max_y := y + r ;
61702: LD_ADDR_VAR 0 10
61706: PUSH
61707: LD_VAR 0 2
61711: PUSH
61712: LD_VAR 0 3
61716: PLUS
61717: ST_TO_ADDR
// for _x = min_x to max_x do
61718: LD_ADDR_VAR 0 5
61722: PUSH
61723: DOUBLE
61724: LD_VAR 0 8
61728: DEC
61729: ST_TO_ADDR
61730: LD_VAR 0 9
61734: PUSH
61735: FOR_TO
61736: IFFALSE 61837
// for _y = min_y to max_y do
61738: LD_ADDR_VAR 0 6
61742: PUSH
61743: DOUBLE
61744: LD_VAR 0 7
61748: DEC
61749: ST_TO_ADDR
61750: LD_VAR 0 10
61754: PUSH
61755: FOR_TO
61756: IFFALSE 61833
// begin if not ValidHex ( _x , _y ) then
61758: LD_VAR 0 5
61762: PPUSH
61763: LD_VAR 0 6
61767: PPUSH
61768: CALL_OW 488
61772: NOT
61773: IFFALSE 61777
// continue ;
61775: GO 61755
// if GetResourceTypeXY ( _x , _y ) then
61777: LD_VAR 0 5
61781: PPUSH
61782: LD_VAR 0 6
61786: PPUSH
61787: CALL_OW 283
61791: IFFALSE 61831
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
61793: LD_ADDR_VAR 0 4
61797: PUSH
61798: LD_VAR 0 4
61802: PPUSH
61803: LD_VAR 0 4
61807: PUSH
61808: LD_INT 1
61810: PLUS
61811: PPUSH
61812: LD_VAR 0 5
61816: PUSH
61817: LD_VAR 0 6
61821: PUSH
61822: EMPTY
61823: LIST
61824: LIST
61825: PPUSH
61826: CALL_OW 1
61830: ST_TO_ADDR
// end ;
61831: GO 61755
61833: POP
61834: POP
61835: GO 61735
61837: POP
61838: POP
// end ;
61839: LD_VAR 0 4
61843: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
61844: LD_INT 0
61846: PPUSH
61847: PPUSH
61848: PPUSH
61849: PPUSH
61850: PPUSH
61851: PPUSH
61852: PPUSH
61853: PPUSH
// if not units then
61854: LD_VAR 0 1
61858: NOT
61859: IFFALSE 61863
// exit ;
61861: GO 62288
// result := UnitFilter ( units , [ f_ok ] ) ;
61863: LD_ADDR_VAR 0 3
61867: PUSH
61868: LD_VAR 0 1
61872: PPUSH
61873: LD_INT 50
61875: PUSH
61876: EMPTY
61877: LIST
61878: PPUSH
61879: CALL_OW 72
61883: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
61884: LD_ADDR_VAR 0 8
61888: PUSH
61889: LD_VAR 0 1
61893: PUSH
61894: LD_INT 1
61896: ARRAY
61897: PPUSH
61898: CALL_OW 255
61902: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
61903: LD_ADDR_VAR 0 10
61907: PUSH
61908: LD_INT 29
61910: PUSH
61911: LD_EXP 85
61915: PUSH
61916: EMPTY
61917: LIST
61918: LIST
61919: ST_TO_ADDR
// if not result then
61920: LD_VAR 0 3
61924: NOT
61925: IFFALSE 61929
// exit ;
61927: GO 62288
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
61929: LD_ADDR_VAR 0 5
61933: PUSH
61934: LD_INT 81
61936: PUSH
61937: LD_VAR 0 8
61941: PUSH
61942: EMPTY
61943: LIST
61944: LIST
61945: PPUSH
61946: CALL_OW 69
61950: ST_TO_ADDR
// for i in result do
61951: LD_ADDR_VAR 0 4
61955: PUSH
61956: LD_VAR 0 3
61960: PUSH
61961: FOR_IN
61962: IFFALSE 62286
// begin tag := GetTag ( i ) + 1 ;
61964: LD_ADDR_VAR 0 9
61968: PUSH
61969: LD_VAR 0 4
61973: PPUSH
61974: CALL_OW 110
61978: PUSH
61979: LD_INT 1
61981: PLUS
61982: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
61983: LD_ADDR_VAR 0 7
61987: PUSH
61988: LD_VAR 0 4
61992: PPUSH
61993: CALL_OW 250
61997: PPUSH
61998: LD_VAR 0 4
62002: PPUSH
62003: CALL_OW 251
62007: PPUSH
62008: LD_INT 6
62010: PPUSH
62011: CALL 61586 0 3
62015: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
62016: LD_VAR 0 7
62020: PUSH
62021: LD_VAR 0 4
62025: PPUSH
62026: CALL_OW 264
62030: PUSH
62031: LD_VAR 0 10
62035: IN
62036: NOT
62037: AND
62038: IFFALSE 62077
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
62040: LD_VAR 0 4
62044: PPUSH
62045: LD_VAR 0 7
62049: PUSH
62050: LD_INT 1
62052: ARRAY
62053: PUSH
62054: LD_INT 1
62056: ARRAY
62057: PPUSH
62058: LD_VAR 0 7
62062: PUSH
62063: LD_INT 1
62065: ARRAY
62066: PUSH
62067: LD_INT 2
62069: ARRAY
62070: PPUSH
62071: CALL_OW 116
62075: GO 62284
// if path > tag then
62077: LD_VAR 0 2
62081: PUSH
62082: LD_VAR 0 9
62086: GREATER
62087: IFFALSE 62254
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
62089: LD_ADDR_VAR 0 6
62093: PUSH
62094: LD_VAR 0 5
62098: PPUSH
62099: LD_INT 91
62101: PUSH
62102: LD_VAR 0 4
62106: PUSH
62107: LD_INT 12
62109: PUSH
62110: EMPTY
62111: LIST
62112: LIST
62113: LIST
62114: PPUSH
62115: CALL_OW 72
62119: ST_TO_ADDR
// if nearEnemy then
62120: LD_VAR 0 6
62124: IFFALSE 62152
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
62126: LD_VAR 0 4
62130: PPUSH
62131: LD_VAR 0 6
62135: PPUSH
62136: LD_VAR 0 4
62140: PPUSH
62141: CALL_OW 74
62145: PPUSH
62146: CALL_OW 115
62150: GO 62252
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
62152: LD_VAR 0 4
62156: PPUSH
62157: LD_VAR 0 2
62161: PUSH
62162: LD_VAR 0 9
62166: ARRAY
62167: PUSH
62168: LD_INT 1
62170: ARRAY
62171: PPUSH
62172: LD_VAR 0 2
62176: PUSH
62177: LD_VAR 0 9
62181: ARRAY
62182: PUSH
62183: LD_INT 2
62185: ARRAY
62186: PPUSH
62187: CALL_OW 297
62191: PUSH
62192: LD_INT 6
62194: GREATER
62195: IFFALSE 62238
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
62197: LD_VAR 0 4
62201: PPUSH
62202: LD_VAR 0 2
62206: PUSH
62207: LD_VAR 0 9
62211: ARRAY
62212: PUSH
62213: LD_INT 1
62215: ARRAY
62216: PPUSH
62217: LD_VAR 0 2
62221: PUSH
62222: LD_VAR 0 9
62226: ARRAY
62227: PUSH
62228: LD_INT 2
62230: ARRAY
62231: PPUSH
62232: CALL_OW 114
62236: GO 62252
// SetTag ( i , tag ) ;
62238: LD_VAR 0 4
62242: PPUSH
62243: LD_VAR 0 9
62247: PPUSH
62248: CALL_OW 109
// end else
62252: GO 62284
// if enemy then
62254: LD_VAR 0 5
62258: IFFALSE 62284
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
62260: LD_VAR 0 4
62264: PPUSH
62265: LD_VAR 0 5
62269: PPUSH
62270: LD_VAR 0 4
62274: PPUSH
62275: CALL_OW 74
62279: PPUSH
62280: CALL_OW 115
// end ;
62284: GO 61961
62286: POP
62287: POP
// end ;
62288: LD_VAR 0 3
62292: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
62293: LD_INT 0
62295: PPUSH
62296: PPUSH
62297: PPUSH
// if not unit or IsInUnit ( unit ) then
62298: LD_VAR 0 1
62302: NOT
62303: PUSH
62304: LD_VAR 0 1
62308: PPUSH
62309: CALL_OW 310
62313: OR
62314: IFFALSE 62318
// exit ;
62316: GO 62409
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
62318: LD_ADDR_VAR 0 4
62322: PUSH
62323: LD_VAR 0 1
62327: PPUSH
62328: CALL_OW 250
62332: PPUSH
62333: LD_VAR 0 2
62337: PPUSH
62338: LD_INT 1
62340: PPUSH
62341: CALL_OW 272
62345: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
62346: LD_ADDR_VAR 0 5
62350: PUSH
62351: LD_VAR 0 1
62355: PPUSH
62356: CALL_OW 251
62360: PPUSH
62361: LD_VAR 0 2
62365: PPUSH
62366: LD_INT 1
62368: PPUSH
62369: CALL_OW 273
62373: ST_TO_ADDR
// if ValidHex ( x , y ) then
62374: LD_VAR 0 4
62378: PPUSH
62379: LD_VAR 0 5
62383: PPUSH
62384: CALL_OW 488
62388: IFFALSE 62409
// ComTurnXY ( unit , x , y ) ;
62390: LD_VAR 0 1
62394: PPUSH
62395: LD_VAR 0 4
62399: PPUSH
62400: LD_VAR 0 5
62404: PPUSH
62405: CALL_OW 118
// end ;
62409: LD_VAR 0 3
62413: RET
// export function SeeUnits ( side , units ) ; var i ; begin
62414: LD_INT 0
62416: PPUSH
62417: PPUSH
// result := false ;
62418: LD_ADDR_VAR 0 3
62422: PUSH
62423: LD_INT 0
62425: ST_TO_ADDR
// if not units then
62426: LD_VAR 0 2
62430: NOT
62431: IFFALSE 62435
// exit ;
62433: GO 62480
// for i in units do
62435: LD_ADDR_VAR 0 4
62439: PUSH
62440: LD_VAR 0 2
62444: PUSH
62445: FOR_IN
62446: IFFALSE 62478
// if See ( side , i ) then
62448: LD_VAR 0 1
62452: PPUSH
62453: LD_VAR 0 4
62457: PPUSH
62458: CALL_OW 292
62462: IFFALSE 62476
// begin result := true ;
62464: LD_ADDR_VAR 0 3
62468: PUSH
62469: LD_INT 1
62471: ST_TO_ADDR
// exit ;
62472: POP
62473: POP
62474: GO 62480
// end ;
62476: GO 62445
62478: POP
62479: POP
// end ;
62480: LD_VAR 0 3
62484: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
62485: LD_INT 0
62487: PPUSH
62488: PPUSH
62489: PPUSH
62490: PPUSH
// if not unit or not points then
62491: LD_VAR 0 1
62495: NOT
62496: PUSH
62497: LD_VAR 0 2
62501: NOT
62502: OR
62503: IFFALSE 62507
// exit ;
62505: GO 62597
// dist := 99999 ;
62507: LD_ADDR_VAR 0 5
62511: PUSH
62512: LD_INT 99999
62514: ST_TO_ADDR
// for i in points do
62515: LD_ADDR_VAR 0 4
62519: PUSH
62520: LD_VAR 0 2
62524: PUSH
62525: FOR_IN
62526: IFFALSE 62595
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
62528: LD_ADDR_VAR 0 6
62532: PUSH
62533: LD_VAR 0 1
62537: PPUSH
62538: LD_VAR 0 4
62542: PUSH
62543: LD_INT 1
62545: ARRAY
62546: PPUSH
62547: LD_VAR 0 4
62551: PUSH
62552: LD_INT 2
62554: ARRAY
62555: PPUSH
62556: CALL_OW 297
62560: ST_TO_ADDR
// if tmpDist < dist then
62561: LD_VAR 0 6
62565: PUSH
62566: LD_VAR 0 5
62570: LESS
62571: IFFALSE 62593
// begin result := i ;
62573: LD_ADDR_VAR 0 3
62577: PUSH
62578: LD_VAR 0 4
62582: ST_TO_ADDR
// dist := tmpDist ;
62583: LD_ADDR_VAR 0 5
62587: PUSH
62588: LD_VAR 0 6
62592: ST_TO_ADDR
// end ; end ;
62593: GO 62525
62595: POP
62596: POP
// end ; end_of_file
62597: LD_VAR 0 3
62601: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
62602: LD_VAR 0 1
62606: PUSH
62607: LD_INT 200
62609: DOUBLE
62610: GREATEREQUAL
62611: IFFALSE 62619
62613: LD_INT 299
62615: DOUBLE
62616: LESSEQUAL
62617: IFTRUE 62621
62619: GO 62653
62621: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
62622: LD_VAR 0 1
62626: PPUSH
62627: LD_VAR 0 2
62631: PPUSH
62632: LD_VAR 0 3
62636: PPUSH
62637: LD_VAR 0 4
62641: PPUSH
62642: LD_VAR 0 5
62646: PPUSH
62647: CALL 3752 0 5
62651: GO 62730
62653: LD_INT 300
62655: DOUBLE
62656: GREATEREQUAL
62657: IFFALSE 62665
62659: LD_INT 399
62661: DOUBLE
62662: LESSEQUAL
62663: IFTRUE 62667
62665: GO 62729
62667: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
62668: LD_VAR 0 1
62672: PPUSH
62673: LD_VAR 0 2
62677: PPUSH
62678: LD_VAR 0 3
62682: PPUSH
62683: LD_VAR 0 4
62687: PPUSH
62688: LD_VAR 0 5
62692: PPUSH
62693: LD_VAR 0 6
62697: PPUSH
62698: LD_VAR 0 7
62702: PPUSH
62703: LD_VAR 0 8
62707: PPUSH
62708: LD_VAR 0 9
62712: PPUSH
62713: LD_VAR 0 10
62717: PPUSH
62718: LD_VAR 0 11
62722: PPUSH
62723: CALL 20363 0 11
62727: GO 62730
62729: POP
// end ;
62730: PPOPN 11
62732: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
62733: LD_VAR 0 1
62737: PPUSH
62738: LD_VAR 0 2
62742: PPUSH
62743: LD_VAR 0 3
62747: PPUSH
62748: LD_VAR 0 4
62752: PPUSH
62753: LD_VAR 0 5
62757: PPUSH
62758: CALL 3488 0 5
// end ; end_of_file
62762: PPOPN 5
62764: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
62765: LD_VAR 0 1
62769: PPUSH
62770: LD_VAR 0 2
62774: PPUSH
62775: LD_VAR 0 3
62779: PPUSH
62780: LD_VAR 0 4
62784: PPUSH
62785: LD_VAR 0 5
62789: PPUSH
62790: LD_VAR 0 6
62794: PPUSH
62795: CALL 8056 0 6
// end ;
62799: PPOPN 6
62801: END
