// starting begin ResetFog ;
   0: CALL_OW 335
// PrepareGame ;
   4: CALL 13 0 0
// PrepareUnits ;
   8: CALL 299 0 0
// end ;
  12: END
// export mechanics , time_to_destroy , players , sib_bomb , time , veh_amount ; export p1 , p2 , p3 , p4 , p5 ; function PrepareGame ; var debug , i ; begin
  13: LD_INT 0
  15: PPUSH
  16: PPUSH
  17: PPUSH
// debug := false ;
  18: LD_ADDR_VAR 0 2
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// if debug then
  26: LD_VAR 0 2
  30: IFFALSE 81
// begin mechanics := 5 ;
  32: LD_ADDR_EXP 1
  36: PUSH
  37: LD_INT 5
  39: ST_TO_ADDR
// time_to_destroy := 45 ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_INT 45
  47: ST_TO_ADDR
// players := 4 ;
  48: LD_ADDR_EXP 3
  52: PUSH
  53: LD_INT 4
  55: ST_TO_ADDR
// sib_bomb := true ;
  56: LD_ADDR_EXP 4
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// time := 3 3$00 ;
  64: LD_ADDR_EXP 5
  68: PUSH
  69: LD_INT 6300
  71: ST_TO_ADDR
// FogOff ( 1 ) ;
  72: LD_INT 1
  74: PPUSH
  75: CALL_OW 344
// end else
  79: GO 214
// begin time := 3 3$00 ;
  81: LD_ADDR_EXP 5
  85: PUSH
  86: LD_INT 6300
  88: ST_TO_ADDR
// players := 4 ;
  89: LD_ADDR_EXP 3
  93: PUSH
  94: LD_INT 4
  96: ST_TO_ADDR
// sib_bomb := true ;
  97: LD_ADDR_EXP 4
 101: PUSH
 102: LD_INT 1
 104: ST_TO_ADDR
// mechanics := 4 ;
 105: LD_ADDR_EXP 1
 109: PUSH
 110: LD_INT 4
 112: ST_TO_ADDR
// mechanics := [ 3 , 4 , 5 ] [ GetMultiplayerSetting ( 0 ) ] ;
 113: LD_ADDR_EXP 1
 117: PUSH
 118: LD_INT 3
 120: PUSH
 121: LD_INT 4
 123: PUSH
 124: LD_INT 5
 126: PUSH
 127: EMPTY
 128: LIST
 129: LIST
 130: LIST
 131: PUSH
 132: LD_INT 0
 134: PPUSH
 135: CALL_OW 426
 139: ARRAY
 140: ST_TO_ADDR
// players := [ 3 , 4 , 5 ] [ GetMultiplayerSetting ( 1 ) ] ;
 141: LD_ADDR_EXP 3
 145: PUSH
 146: LD_INT 3
 148: PUSH
 149: LD_INT 4
 151: PUSH
 152: LD_INT 5
 154: PUSH
 155: EMPTY
 156: LIST
 157: LIST
 158: LIST
 159: PUSH
 160: LD_INT 1
 162: PPUSH
 163: CALL_OW 426
 167: ARRAY
 168: ST_TO_ADDR
// time := [ 3 3$00 , 5 5$00 , 10 10$00 ] [ GetMultiplayerSetting ( 2 ) ] ;
 169: LD_ADDR_EXP 5
 173: PUSH
 174: LD_INT 6300
 176: PUSH
 177: LD_INT 10500
 179: PUSH
 180: LD_INT 21000
 182: PUSH
 183: EMPTY
 184: LIST
 185: LIST
 186: LIST
 187: PUSH
 188: LD_INT 2
 190: PPUSH
 191: CALL_OW 426
 195: ARRAY
 196: ST_TO_ADDR
// sib_bomb := GetMultiplayerSetting ( 3 ) - 1 ;
 197: LD_ADDR_EXP 4
 201: PUSH
 202: LD_INT 3
 204: PPUSH
 205: CALL_OW 426
 209: PUSH
 210: LD_INT 1
 212: MINUS
 213: ST_TO_ADDR
// end ; p1 := 0 ;
 214: LD_ADDR_EXP 7
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// p2 := 0 ;
 222: LD_ADDR_EXP 8
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// p3 := 0 ;
 230: LD_ADDR_EXP 9
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// p4 := 0 ;
 238: LD_ADDR_EXP 10
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// p5 := 0 ;
 246: LD_ADDR_EXP 11
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// veh_amount := 12 ;
 254: LD_ADDR_EXP 6
 258: PUSH
 259: LD_INT 12
 261: ST_TO_ADDR
// for i = 1 to 7 do
 262: LD_ADDR_VAR 0 3
 266: PUSH
 267: DOUBLE
 268: LD_INT 1
 270: DEC
 271: ST_TO_ADDR
 272: LD_INT 7
 274: PUSH
 275: FOR_TO
 276: IFFALSE 292
// ChangeSideFog ( i , 8 ) ;
 278: LD_VAR 0 3
 282: PPUSH
 283: LD_INT 8
 285: PPUSH
 286: CALL_OW 343
 290: GO 275
 292: POP
 293: POP
// end ; end_of_file
 294: LD_VAR 0 1
 298: RET
// export function PrepareUnits ; var i , side ; begin
 299: LD_INT 0
 301: PPUSH
 302: PPUSH
 303: PPUSH
// side := players ;
 304: LD_ADDR_VAR 0 3
 308: PUSH
 309: LD_EXP 3
 313: ST_TO_ADDR
// uc_nation := 1 ;
 314: LD_ADDR_OWVAR 21
 318: PUSH
 319: LD_INT 1
 321: ST_TO_ADDR
// for i = 1 to mechanics do
 322: LD_ADDR_VAR 0 2
 326: PUSH
 327: DOUBLE
 328: LD_INT 1
 330: DEC
 331: ST_TO_ADDR
 332: LD_EXP 1
 336: PUSH
 337: FOR_TO
 338: IFFALSE 402
// for side = 1 to players do
 340: LD_ADDR_VAR 0 3
 344: PUSH
 345: DOUBLE
 346: LD_INT 1
 348: DEC
 349: ST_TO_ADDR
 350: LD_EXP 3
 354: PUSH
 355: FOR_TO
 356: IFFALSE 398
// begin uc_side := side ;
 358: LD_ADDR_OWVAR 20
 362: PUSH
 363: LD_VAR 0 3
 367: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
 368: LD_INT 0
 370: PPUSH
 371: LD_INT 3
 373: PPUSH
 374: LD_INT 10
 376: PPUSH
 377: CALL_OW 380
// PlaceUnitArea ( CreateHuman , mech_area , false ) ;
 381: CALL_OW 44
 385: PPUSH
 386: LD_INT 6
 388: PPUSH
 389: LD_INT 0
 391: PPUSH
 392: CALL_OW 49
// end ;
 396: GO 355
 398: POP
 399: POP
 400: GO 337
 402: POP
 403: POP
// end ;
 404: LD_VAR 0 1
 408: RET
// function ToSpawn ( side ) ; begin
 409: LD_INT 0
 411: PPUSH
// uc_side := side ;
 412: LD_ADDR_OWVAR 20
 416: PUSH
 417: LD_VAR 0 1
 421: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
 422: LD_INT 0
 424: PPUSH
 425: LD_INT 3
 427: PPUSH
 428: LD_INT 10
 430: PPUSH
 431: CALL_OW 380
// PlaceUnitArea ( CreateHuman , mech_area , false ) ;
 435: CALL_OW 44
 439: PPUSH
 440: LD_INT 6
 442: PPUSH
 443: LD_INT 0
 445: PPUSH
 446: CALL_OW 49
// end ;
 450: LD_VAR 0 2
 454: RET
// every 0 0$13 trigger time do var i , filter ;
 455: LD_EXP 5
 459: IFFALSE 569
 461: GO 463
 463: DISABLE
 464: LD_INT 0
 466: PPUSH
 467: PPUSH
// begin enable ;
 468: ENABLE
// for i = 1 to players do
 469: LD_ADDR_VAR 0 1
 473: PUSH
 474: DOUBLE
 475: LD_INT 1
 477: DEC
 478: ST_TO_ADDR
 479: LD_EXP 3
 483: PUSH
 484: FOR_TO
 485: IFFALSE 567
// begin filter := FilterAllUnits ( [ [ [ f_side , i ] , [ f_class , 3 ] , [ f_type , unit_human ] ] ] ) ;
 487: LD_ADDR_VAR 0 2
 491: PUSH
 492: LD_INT 22
 494: PUSH
 495: LD_VAR 0 1
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: PUSH
 504: LD_INT 25
 506: PUSH
 507: LD_INT 3
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: PUSH
 514: LD_INT 21
 516: PUSH
 517: LD_INT 1
 519: PUSH
 520: EMPTY
 521: LIST
 522: LIST
 523: PUSH
 524: EMPTY
 525: LIST
 526: LIST
 527: LIST
 528: PUSH
 529: EMPTY
 530: LIST
 531: PPUSH
 532: CALL_OW 69
 536: ST_TO_ADDR
// if filter < mechanics then
 537: LD_VAR 0 2
 541: PUSH
 542: LD_EXP 1
 546: LESS
 547: IFFALSE 565
// begin Wait ( 0 0$03 ) ;
 549: LD_INT 105
 551: PPUSH
 552: CALL_OW 67
// ToSpawn ( i ) ;
 556: LD_VAR 0 1
 560: PPUSH
 561: CALL 409 0 1
// end ; end ;
 565: GO 484
 567: POP
 568: POP
// end ;
 569: PPOPN 2
 571: END
// every 0 0$01 trigger time do var i , filter , filter2 , vehicles ;
 572: LD_EXP 5
 576: IFFALSE 943
 578: GO 580
 580: DISABLE
 581: LD_INT 0
 583: PPUSH
 584: PPUSH
 585: PPUSH
 586: PPUSH
// begin enable ;
 587: ENABLE
// filter2 := FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_not , [ f_side , 0 ] ] , [ f_not , [ f_side , 1 ] ] ] ) ;
 588: LD_ADDR_VAR 0 3
 592: PUSH
 593: LD_INT 21
 595: PUSH
 596: LD_INT 2
 598: PUSH
 599: EMPTY
 600: LIST
 601: LIST
 602: PUSH
 603: LD_INT 3
 605: PUSH
 606: LD_INT 22
 608: PUSH
 609: LD_INT 0
 611: PUSH
 612: EMPTY
 613: LIST
 614: LIST
 615: PUSH
 616: EMPTY
 617: LIST
 618: LIST
 619: PUSH
 620: LD_INT 3
 622: PUSH
 623: LD_INT 22
 625: PUSH
 626: LD_INT 1
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: PUSH
 633: EMPTY
 634: LIST
 635: LIST
 636: PUSH
 637: EMPTY
 638: LIST
 639: LIST
 640: LIST
 641: PPUSH
 642: CALL_OW 69
 646: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_side , 1 ] ] ] ) ;
 647: LD_ADDR_VAR 0 2
 651: PUSH
 652: LD_INT 21
 654: PUSH
 655: LD_INT 1
 657: PUSH
 658: EMPTY
 659: LIST
 660: LIST
 661: PUSH
 662: LD_INT 3
 664: PUSH
 665: LD_INT 54
 667: PUSH
 668: EMPTY
 669: LIST
 670: PUSH
 671: EMPTY
 672: LIST
 673: LIST
 674: PUSH
 675: LD_INT 3
 677: PUSH
 678: LD_INT 22
 680: PUSH
 681: LD_INT 1
 683: PUSH
 684: EMPTY
 685: LIST
 686: LIST
 687: PUSH
 688: EMPTY
 689: LIST
 690: LIST
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: LIST
 696: PPUSH
 697: CALL_OW 69
 701: ST_TO_ADDR
// vehicles := FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 702: LD_ADDR_VAR 0 4
 706: PUSH
 707: LD_INT 21
 709: PUSH
 710: LD_INT 2
 712: PUSH
 713: EMPTY
 714: LIST
 715: LIST
 716: PUSH
 717: LD_INT 58
 719: PUSH
 720: EMPTY
 721: LIST
 722: PUSH
 723: EMPTY
 724: LIST
 725: LIST
 726: PPUSH
 727: CALL_OW 69
 731: ST_TO_ADDR
// if filter and vehicles then
 732: LD_VAR 0 2
 736: PUSH
 737: LD_VAR 0 4
 741: AND
 742: IFFALSE 879
// for i = 1 to filter do
 744: LD_ADDR_VAR 0 1
 748: PUSH
 749: DOUBLE
 750: LD_INT 1
 752: DEC
 753: ST_TO_ADDR
 754: LD_VAR 0 2
 758: PUSH
 759: FOR_TO
 760: IFFALSE 877
// if not HasTask ( filter [ i ] ) and IsOk ( filter [ i ] ) then
 762: LD_VAR 0 2
 766: PUSH
 767: LD_VAR 0 1
 771: ARRAY
 772: PPUSH
 773: CALL_OW 314
 777: NOT
 778: PUSH
 779: LD_VAR 0 2
 783: PUSH
 784: LD_VAR 0 1
 788: ARRAY
 789: PPUSH
 790: CALL_OW 302
 794: AND
 795: IFFALSE 875
// if GetDistUnits ( filter [ i ] , NearestUnitToUnit ( vehicles , filter [ i ] ) ) < 45 then
 797: LD_VAR 0 2
 801: PUSH
 802: LD_VAR 0 1
 806: ARRAY
 807: PPUSH
 808: LD_VAR 0 4
 812: PPUSH
 813: LD_VAR 0 2
 817: PUSH
 818: LD_VAR 0 1
 822: ARRAY
 823: PPUSH
 824: CALL_OW 74
 828: PPUSH
 829: CALL_OW 296
 833: PUSH
 834: LD_INT 45
 836: LESS
 837: IFFALSE 875
// ComEnterUnit ( filter [ i ] , NearestUnitToUnit ( vehicles , filter [ i ] ) ) ;
 839: LD_VAR 0 2
 843: PUSH
 844: LD_VAR 0 1
 848: ARRAY
 849: PPUSH
 850: LD_VAR 0 4
 854: PPUSH
 855: LD_VAR 0 2
 859: PUSH
 860: LD_VAR 0 1
 864: ARRAY
 865: PPUSH
 866: CALL_OW 74
 870: PPUSH
 871: CALL_OW 120
 875: GO 759
 877: POP
 878: POP
// if filter2 then
 879: LD_VAR 0 3
 883: IFFALSE 943
// for i = 1 to filter2 do
 885: LD_ADDR_VAR 0 1
 889: PUSH
 890: DOUBLE
 891: LD_INT 1
 893: DEC
 894: ST_TO_ADDR
 895: LD_VAR 0 3
 899: PUSH
 900: FOR_TO
 901: IFFALSE 941
// if not HasTask ( filter2 [ i ] ) then
 903: LD_VAR 0 3
 907: PUSH
 908: LD_VAR 0 1
 912: ARRAY
 913: PPUSH
 914: CALL_OW 314
 918: NOT
 919: IFFALSE 939
// ComMoveToArea ( filter2 [ i ] , exit_area ) ;
 921: LD_VAR 0 3
 925: PUSH
 926: LD_VAR 0 1
 930: ARRAY
 931: PPUSH
 932: LD_INT 4
 934: PPUSH
 935: CALL_OW 113
 939: GO 900
 941: POP
 942: POP
// end ; end_of_file
 943: PPOPN 4
 945: END
// export function SpawnCar ( chas , area ) ; var i , e , veh , ar_chassis , ru_chassis , us_chassis , ar_weapons , ru_weapons , us_weapons , chassis , engine , weapon ; begin
 946: LD_INT 0
 948: PPUSH
 949: PPUSH
 950: PPUSH
 951: PPUSH
 952: PPUSH
 953: PPUSH
 954: PPUSH
 955: PPUSH
 956: PPUSH
 957: PPUSH
 958: PPUSH
 959: PPUSH
 960: PPUSH
// uc_side := 0 ;
 961: LD_ADDR_OWVAR 20
 965: PUSH
 966: LD_INT 0
 968: ST_TO_ADDR
// uc_nation := Rand ( 1 , 3 ) ;
 969: LD_ADDR_OWVAR 21
 973: PUSH
 974: LD_INT 1
 976: PPUSH
 977: LD_INT 3
 979: PPUSH
 980: CALL_OW 12
 984: ST_TO_ADDR
// ar_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ;
 985: LD_ADDR_VAR 0 7
 989: PUSH
 990: LD_INT 11
 992: PUSH
 993: LD_INT 12
 995: PUSH
 996: LD_INT 13
 998: PUSH
 999: LD_INT 14
1001: PUSH
1002: EMPTY
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: ST_TO_ADDR
// ru_chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ;
1008: LD_ADDR_VAR 0 8
1012: PUSH
1013: LD_INT 21
1015: PUSH
1016: LD_INT 22
1018: PUSH
1019: LD_INT 23
1021: PUSH
1022: LD_INT 24
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: ST_TO_ADDR
// us_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ;
1031: LD_ADDR_VAR 0 9
1035: PUSH
1036: LD_INT 1
1038: PUSH
1039: LD_INT 2
1041: PUSH
1042: LD_INT 3
1044: PUSH
1045: LD_INT 4
1047: PUSH
1048: LD_INT 5
1050: PUSH
1051: EMPTY
1052: LIST
1053: LIST
1054: LIST
1055: LIST
1056: LIST
1057: ST_TO_ADDR
// if chas > 0 then
1058: LD_VAR 0 1
1062: PUSH
1063: LD_INT 0
1065: GREATER
1066: IFFALSE 1080
// vc_chassis := chas else
1068: LD_ADDR_OWVAR 37
1072: PUSH
1073: LD_VAR 0 1
1077: ST_TO_ADDR
1078: GO 1173
// begin case uc_nation of 1 :
1080: LD_OWVAR 21
1084: PUSH
1085: LD_INT 1
1087: DOUBLE
1088: EQUAL
1089: IFTRUE 1093
1091: GO 1106
1093: POP
// chassis := us_chassis ; 2 :
1094: LD_ADDR_VAR 0 13
1098: PUSH
1099: LD_VAR 0 9
1103: ST_TO_ADDR
1104: GO 1149
1106: LD_INT 2
1108: DOUBLE
1109: EQUAL
1110: IFTRUE 1114
1112: GO 1127
1114: POP
// chassis := ar_chassis ; 3 :
1115: LD_ADDR_VAR 0 13
1119: PUSH
1120: LD_VAR 0 7
1124: ST_TO_ADDR
1125: GO 1149
1127: LD_INT 3
1129: DOUBLE
1130: EQUAL
1131: IFTRUE 1135
1133: GO 1148
1135: POP
// chassis := ru_chassis ; end ;
1136: LD_ADDR_VAR 0 13
1140: PUSH
1141: LD_VAR 0 8
1145: ST_TO_ADDR
1146: GO 1149
1148: POP
// vc_chassis := chassis [ Rand ( 1 , chassis ) ] ;
1149: LD_ADDR_OWVAR 37
1153: PUSH
1154: LD_VAR 0 13
1158: PUSH
1159: LD_INT 1
1161: PPUSH
1162: LD_VAR 0 13
1166: PPUSH
1167: CALL_OW 12
1171: ARRAY
1172: ST_TO_ADDR
// end ; if vc_chassis in [ ar_hovercraft , ar_light_trike , us_light_wheeled ] then
1173: LD_OWVAR 37
1177: PUSH
1178: LD_INT 11
1180: PUSH
1181: LD_INT 12
1183: PUSH
1184: LD_INT 1
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: LIST
1191: IN
1192: IFFALSE 1212
// engine := Rand ( 1 , 2 ) else
1194: LD_ADDR_VAR 0 14
1198: PUSH
1199: LD_INT 1
1201: PPUSH
1202: LD_INT 2
1204: PPUSH
1205: CALL_OW 12
1209: ST_TO_ADDR
1210: GO 1324
// begin if not vc_chassis in [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , us_heavy_tracked , us_morphling ] then
1212: LD_OWVAR 37
1216: PUSH
1217: LD_INT 21
1219: PUSH
1220: LD_INT 22
1222: PUSH
1223: LD_INT 23
1225: PUSH
1226: LD_INT 24
1228: PUSH
1229: LD_INT 4
1231: PUSH
1232: LD_INT 5
1234: PUSH
1235: EMPTY
1236: LIST
1237: LIST
1238: LIST
1239: LIST
1240: LIST
1241: LIST
1242: IN
1243: NOT
1244: IFFALSE 1264
// engine := Rand ( 1 , 3 ) else
1246: LD_ADDR_VAR 0 14
1250: PUSH
1251: LD_INT 1
1253: PPUSH
1254: LD_INT 3
1256: PPUSH
1257: CALL_OW 12
1261: ST_TO_ADDR
1262: GO 1280
// e := Rand ( 1 , 2 ) ;
1264: LD_ADDR_VAR 0 5
1268: PUSH
1269: LD_INT 1
1271: PPUSH
1272: LD_INT 2
1274: PPUSH
1275: CALL_OW 12
1279: ST_TO_ADDR
// case e of 1 :
1280: LD_VAR 0 5
1284: PUSH
1285: LD_INT 1
1287: DOUBLE
1288: EQUAL
1289: IFTRUE 1293
1291: GO 1304
1293: POP
// engine := engine_combustion ; 2 :
1294: LD_ADDR_VAR 0 14
1298: PUSH
1299: LD_INT 1
1301: ST_TO_ADDR
1302: GO 1324
1304: LD_INT 2
1306: DOUBLE
1307: EQUAL
1308: IFTRUE 1312
1310: GO 1323
1312: POP
// engine := engine_siberite ; end ;
1313: LD_ADDR_VAR 0 14
1317: PUSH
1318: LD_INT 3
1320: ST_TO_ADDR
1321: GO 1324
1323: POP
// end ; vc_engine := engine ;
1324: LD_ADDR_OWVAR 39
1328: PUSH
1329: LD_VAR 0 14
1333: ST_TO_ADDR
// vc_control := control_manual ;
1334: LD_ADDR_OWVAR 38
1338: PUSH
1339: LD_INT 1
1341: ST_TO_ADDR
// ar_weapons := [ ar_multimissile_ballista , ar_double_machine_gun , ar_light_gun , ar_radar , ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb , ar_flame_thrower ] ;
1342: LD_ADDR_VAR 0 10
1346: PUSH
1347: LD_INT 22
1349: PUSH
1350: LD_INT 24
1352: PUSH
1353: LD_INT 23
1355: PUSH
1356: LD_INT 30
1358: PUSH
1359: LD_INT 25
1361: PUSH
1362: LD_INT 27
1364: PUSH
1365: LD_INT 28
1367: PUSH
1368: LD_INT 29
1370: PUSH
1371: LD_INT 26
1373: PUSH
1374: EMPTY
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: LIST
1382: LIST
1383: LIST
1384: ST_TO_ADDR
// ru_weapons := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , 98 , ru_rocket_launcher , ru_heavy_gun , ru_rocket , ru_bulldozer , ru_time_lapser ] ;
1385: LD_ADDR_VAR 0 11
1389: PUSH
1390: LD_INT 42
1392: PUSH
1393: LD_INT 43
1395: PUSH
1396: LD_INT 44
1398: PUSH
1399: LD_INT 98
1401: PUSH
1402: LD_INT 45
1404: PUSH
1405: LD_INT 46
1407: PUSH
1408: LD_INT 47
1410: PUSH
1411: LD_INT 53
1413: PUSH
1414: LD_INT 49
1416: PUSH
1417: EMPTY
1418: LIST
1419: LIST
1420: LIST
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: LIST
1427: ST_TO_ADDR
// us_weapons := [ us_machine_gun , us_light_gun , us_radar , us_gatling_gun , us_double_gun , us_rocket_launcher , us_laser , us_heavy_gun , us_bulldozer , us_double_laser ] ;
1428: LD_ADDR_VAR 0 12
1432: PUSH
1433: LD_INT 2
1435: PUSH
1436: LD_INT 3
1438: PUSH
1439: LD_INT 11
1441: PUSH
1442: LD_INT 4
1444: PUSH
1445: LD_INT 5
1447: PUSH
1448: LD_INT 7
1450: PUSH
1451: LD_INT 9
1453: PUSH
1454: LD_INT 6
1456: PUSH
1457: LD_INT 14
1459: PUSH
1460: LD_INT 10
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: LIST
1473: LIST
1474: ST_TO_ADDR
// if uc_nation = nation_arabian then
1475: LD_OWVAR 21
1479: PUSH
1480: LD_INT 2
1482: EQUAL
1483: IFFALSE 1550
// begin if vc_chassis in [ ar_hovercraft , ar_light_trike ] then
1485: LD_OWVAR 37
1489: PUSH
1490: LD_INT 11
1492: PUSH
1493: LD_INT 12
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: IN
1500: IFFALSE 1526
// weapon := ar_weapons [ Rand ( 1 , 3 ) ] else
1502: LD_ADDR_VAR 0 15
1506: PUSH
1507: LD_VAR 0 10
1511: PUSH
1512: LD_INT 1
1514: PPUSH
1515: LD_INT 3
1517: PPUSH
1518: CALL_OW 12
1522: ARRAY
1523: ST_TO_ADDR
1524: GO 1550
// weapon := ar_weapons [ Rand ( 1 , ar_weapons ) ] ;
1526: LD_ADDR_VAR 0 15
1530: PUSH
1531: LD_VAR 0 10
1535: PUSH
1536: LD_INT 1
1538: PPUSH
1539: LD_VAR 0 10
1543: PPUSH
1544: CALL_OW 12
1548: ARRAY
1549: ST_TO_ADDR
// end ; if uc_nation = nation_russian then
1550: LD_OWVAR 21
1554: PUSH
1555: LD_INT 3
1557: EQUAL
1558: IFFALSE 1625
// begin if vc_chassis in [ ru_medium_wheeled , ru_medium_tracked ] then
1560: LD_OWVAR 37
1564: PUSH
1565: LD_INT 21
1567: PUSH
1568: LD_INT 22
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: IN
1575: IFFALSE 1601
// weapon := ru_weapons [ Rand ( 1 , 5 ) ] else
1577: LD_ADDR_VAR 0 15
1581: PUSH
1582: LD_VAR 0 11
1586: PUSH
1587: LD_INT 1
1589: PPUSH
1590: LD_INT 5
1592: PPUSH
1593: CALL_OW 12
1597: ARRAY
1598: ST_TO_ADDR
1599: GO 1625
// weapon := ru_weapons [ Rand ( 1 , ru_weapons ) ] ;
1601: LD_ADDR_VAR 0 15
1605: PUSH
1606: LD_VAR 0 11
1610: PUSH
1611: LD_INT 1
1613: PPUSH
1614: LD_VAR 0 11
1618: PPUSH
1619: CALL_OW 12
1623: ARRAY
1624: ST_TO_ADDR
// end ; if uc_nation = nation_american then
1625: LD_OWVAR 21
1629: PUSH
1630: LD_INT 1
1632: EQUAL
1633: IFFALSE 1742
// begin if vc_chassis = us_light_wheeled then
1635: LD_OWVAR 37
1639: PUSH
1640: LD_INT 1
1642: EQUAL
1643: IFFALSE 1667
// weapon := us_weapons [ Rand ( 1 , 3 ) ] ;
1645: LD_ADDR_VAR 0 15
1649: PUSH
1650: LD_VAR 0 12
1654: PUSH
1655: LD_INT 1
1657: PPUSH
1658: LD_INT 3
1660: PPUSH
1661: CALL_OW 12
1665: ARRAY
1666: ST_TO_ADDR
// if vc_chassis in [ us_medium_tracked , us_medium_wheeled ] then
1667: LD_OWVAR 37
1671: PUSH
1672: LD_INT 3
1674: PUSH
1675: LD_INT 2
1677: PUSH
1678: EMPTY
1679: LIST
1680: LIST
1681: IN
1682: IFFALSE 1708
// weapon := us_weapons [ Rand ( 1 , 7 ) ] else
1684: LD_ADDR_VAR 0 15
1688: PUSH
1689: LD_VAR 0 12
1693: PUSH
1694: LD_INT 1
1696: PPUSH
1697: LD_INT 7
1699: PPUSH
1700: CALL_OW 12
1704: ARRAY
1705: ST_TO_ADDR
1706: GO 1742
// if vc_chassis <> us_light_wheeled then
1708: LD_OWVAR 37
1712: PUSH
1713: LD_INT 1
1715: NONEQUAL
1716: IFFALSE 1742
// weapon := us_weapons [ Rand ( 1 , us_weapons ) ] ;
1718: LD_ADDR_VAR 0 15
1722: PUSH
1723: LD_VAR 0 12
1727: PUSH
1728: LD_INT 1
1730: PPUSH
1731: LD_VAR 0 12
1735: PPUSH
1736: CALL_OW 12
1740: ARRAY
1741: ST_TO_ADDR
// end ; vc_weapon := weapon ;
1742: LD_ADDR_OWVAR 40
1746: PUSH
1747: LD_VAR 0 15
1751: ST_TO_ADDR
// veh := CreateVehicle ;
1752: LD_ADDR_VAR 0 6
1756: PUSH
1757: CALL_OW 45
1761: ST_TO_ADDR
// PlaceUnitArea ( veh , area , true ) ;
1762: LD_VAR 0 6
1766: PPUSH
1767: LD_VAR 0 2
1771: PPUSH
1772: LD_INT 1
1774: PPUSH
1775: CALL_OW 49
// end ;
1779: LD_VAR 0 3
1783: RET
// export function SpawnSibRocket ( area ) ; var veh , p ; begin
1784: LD_INT 0
1786: PPUSH
1787: PPUSH
1788: PPUSH
// uc_side := 0 ;
1789: LD_ADDR_OWVAR 20
1793: PUSH
1794: LD_INT 0
1796: ST_TO_ADDR
// p := Rand ( 1 , 2 ) ;
1797: LD_ADDR_VAR 0 4
1801: PUSH
1802: LD_INT 1
1804: PPUSH
1805: LD_INT 2
1807: PPUSH
1808: CALL_OW 12
1812: ST_TO_ADDR
// case p of 1 :
1813: LD_VAR 0 4
1817: PUSH
1818: LD_INT 1
1820: DOUBLE
1821: EQUAL
1822: IFTRUE 1826
1824: GO 1869
1826: POP
// begin uc_nation := nation_american ;
1827: LD_ADDR_OWVAR 21
1831: PUSH
1832: LD_INT 1
1834: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
1835: LD_ADDR_OWVAR 37
1839: PUSH
1840: LD_INT 4
1842: ST_TO_ADDR
// vc_engine := engine_siberite ;
1843: LD_ADDR_OWVAR 39
1847: PUSH
1848: LD_INT 3
1850: ST_TO_ADDR
// vc_control := control_manual ;
1851: LD_ADDR_OWVAR 38
1855: PUSH
1856: LD_INT 1
1858: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
1859: LD_ADDR_OWVAR 40
1863: PUSH
1864: LD_INT 8
1866: ST_TO_ADDR
// end ; 2 :
1867: GO 1921
1869: LD_INT 2
1871: DOUBLE
1872: EQUAL
1873: IFTRUE 1877
1875: GO 1920
1877: POP
// begin uc_nation := nation_russian ;
1878: LD_ADDR_OWVAR 21
1882: PUSH
1883: LD_INT 3
1885: ST_TO_ADDR
// vc_chassis := ru_heavy_tracked ;
1886: LD_ADDR_OWVAR 37
1890: PUSH
1891: LD_INT 24
1893: ST_TO_ADDR
// vc_engine := engine_siberite ;
1894: LD_ADDR_OWVAR 39
1898: PUSH
1899: LD_INT 3
1901: ST_TO_ADDR
// vc_control := control_manual ;
1902: LD_ADDR_OWVAR 38
1906: PUSH
1907: LD_INT 1
1909: ST_TO_ADDR
// vc_weapon := ru_siberium_rocket ;
1910: LD_ADDR_OWVAR 40
1914: PUSH
1915: LD_INT 48
1917: ST_TO_ADDR
// end ; end ;
1918: GO 1921
1920: POP
// veh := CreateVehicle ;
1921: LD_ADDR_VAR 0 3
1925: PUSH
1926: CALL_OW 45
1930: ST_TO_ADDR
// PlaceUnitArea ( veh , area , true ) ;
1931: LD_VAR 0 3
1935: PPUSH
1936: LD_VAR 0 1
1940: PPUSH
1941: LD_INT 1
1943: PPUSH
1944: CALL_OW 49
// end ;
1948: LD_VAR 0 2
1952: RET
// export function ScoreBoard ( veh ) ; var points ; begin
1953: LD_INT 0
1955: PPUSH
1956: PPUSH
// points := 0 ;
1957: LD_ADDR_VAR 0 3
1961: PUSH
1962: LD_INT 0
1964: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_light_trike , us_light_wheeled ] then
1965: LD_VAR 0 1
1969: PPUSH
1970: CALL_OW 265
1974: PUSH
1975: LD_INT 12
1977: PUSH
1978: LD_INT 1
1980: PUSH
1981: EMPTY
1982: LIST
1983: LIST
1984: IN
1985: IFFALSE 2001
// points := points + 10 ;
1987: LD_ADDR_VAR 0 3
1991: PUSH
1992: LD_VAR 0 3
1996: PUSH
1997: LD_INT 10
1999: PLUS
2000: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_medium_trike , ru_medium_wheeled , us_medium_wheeled ] then
2001: LD_VAR 0 1
2005: PPUSH
2006: CALL_OW 265
2010: PUSH
2011: LD_INT 13
2013: PUSH
2014: LD_INT 21
2016: PUSH
2017: LD_INT 2
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: LIST
2024: IN
2025: IFFALSE 2041
// points := points + 15 ;
2027: LD_ADDR_VAR 0 3
2031: PUSH
2032: LD_VAR 0 3
2036: PUSH
2037: LD_INT 15
2039: PLUS
2040: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_half_tracked , ru_medium_tracked , us_medium_tracked ] then
2041: LD_VAR 0 1
2045: PPUSH
2046: CALL_OW 265
2050: PUSH
2051: LD_INT 14
2053: PUSH
2054: LD_INT 22
2056: PUSH
2057: LD_INT 3
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: LIST
2064: IN
2065: IFFALSE 2081
// points := points + 20 ;
2067: LD_ADDR_VAR 0 3
2071: PUSH
2072: LD_VAR 0 3
2076: PUSH
2077: LD_INT 20
2079: PLUS
2080: ST_TO_ADDR
// if GetChassis ( veh ) in [ ru_heavy_wheeled , ru_heavy_tracked , us_heavy_tracked ] then
2081: LD_VAR 0 1
2085: PPUSH
2086: CALL_OW 265
2090: PUSH
2091: LD_INT 23
2093: PUSH
2094: LD_INT 24
2096: PUSH
2097: LD_INT 4
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: LIST
2104: IN
2105: IFFALSE 2121
// points := points + 25 ;
2107: LD_ADDR_VAR 0 3
2111: PUSH
2112: LD_VAR 0 3
2116: PUSH
2117: LD_INT 25
2119: PLUS
2120: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_hovercraft , us_morphling ] then
2121: LD_VAR 0 1
2125: PPUSH
2126: CALL_OW 265
2130: PUSH
2131: LD_INT 11
2133: PUSH
2134: LD_INT 5
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: IN
2141: IFFALSE 2157
// points := points + 30 ;
2143: LD_ADDR_VAR 0 3
2147: PUSH
2148: LD_VAR 0 3
2152: PUSH
2153: LD_INT 30
2155: PLUS
2156: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_combustion ] then
2157: LD_VAR 0 1
2161: PPUSH
2162: CALL_OW 262
2166: PUSH
2167: LD_INT 1
2169: PUSH
2170: EMPTY
2171: LIST
2172: EQUAL
2173: IFFALSE 2189
// points := points + 5 ;
2175: LD_ADDR_VAR 0 3
2179: PUSH
2180: LD_VAR 0 3
2184: PUSH
2185: LD_INT 5
2187: PLUS
2188: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_solar ] then
2189: LD_VAR 0 1
2193: PPUSH
2194: CALL_OW 262
2198: PUSH
2199: LD_INT 2
2201: PUSH
2202: EMPTY
2203: LIST
2204: EQUAL
2205: IFFALSE 2221
// points := points + 15 ;
2207: LD_ADDR_VAR 0 3
2211: PUSH
2212: LD_VAR 0 3
2216: PUSH
2217: LD_INT 15
2219: PLUS
2220: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_siberite ] then
2221: LD_VAR 0 1
2225: PPUSH
2226: CALL_OW 262
2230: PUSH
2231: LD_INT 3
2233: PUSH
2234: EMPTY
2235: LIST
2236: EQUAL
2237: IFFALSE 2253
// points := points + 25 ;
2239: LD_ADDR_VAR 0 3
2243: PUSH
2244: LD_VAR 0 3
2248: PUSH
2249: LD_INT 25
2251: PLUS
2252: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_multimissile_ballista , ar_double_machine_gun , ar_light_gun , ru_heavy_machine_gun , us_machine_gun , us_light_gun ] then
2253: LD_VAR 0 1
2257: PPUSH
2258: CALL_OW 264
2262: PUSH
2263: LD_INT 22
2265: PUSH
2266: LD_INT 24
2268: PUSH
2269: LD_INT 23
2271: PUSH
2272: LD_INT 42
2274: PUSH
2275: LD_INT 2
2277: PUSH
2278: LD_INT 3
2280: PUSH
2281: EMPTY
2282: LIST
2283: LIST
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: IN
2289: IFFALSE 2305
// points := points + 5 ;
2291: LD_ADDR_VAR 0 3
2295: PUSH
2296: LD_VAR 0 3
2300: PUSH
2301: LD_INT 5
2303: PLUS
2304: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_gatling_gun , ar_gun , ru_gatling_gun , ru_gun , us_gatling_gun , us_double_gun ] then
2305: LD_VAR 0 1
2309: PPUSH
2310: CALL_OW 264
2314: PUSH
2315: LD_INT 25
2317: PUSH
2318: LD_INT 27
2320: PUSH
2321: LD_INT 43
2323: PUSH
2324: LD_INT 44
2326: PUSH
2327: LD_INT 4
2329: PUSH
2330: LD_INT 5
2332: PUSH
2333: EMPTY
2334: LIST
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: LIST
2340: IN
2341: IFFALSE 2357
// points := points + 10 ;
2343: LD_ADDR_VAR 0 3
2347: PUSH
2348: LD_VAR 0 3
2352: PUSH
2353: LD_INT 10
2355: PLUS
2356: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher ] then
2357: LD_VAR 0 1
2361: PPUSH
2362: CALL_OW 264
2366: PUSH
2367: LD_INT 28
2369: PUSH
2370: LD_INT 45
2372: PUSH
2373: LD_INT 7
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: LIST
2380: IN
2381: IFFALSE 2397
// points := points + 20 ;
2383: LD_ADDR_VAR 0 3
2387: PUSH
2388: LD_VAR 0 3
2392: PUSH
2393: LD_INT 20
2395: PLUS
2396: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ru_heavy_gun , us_heavy_gun ] then
2397: LD_VAR 0 1
2401: PPUSH
2402: CALL_OW 264
2406: PUSH
2407: LD_INT 46
2409: PUSH
2410: LD_INT 6
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: IN
2417: IFFALSE 2433
// points := points + 25 ;
2419: LD_ADDR_VAR 0 3
2423: PUSH
2424: LD_VAR 0 3
2428: PUSH
2429: LD_INT 25
2431: PLUS
2432: ST_TO_ADDR
// if GetWeapon ( veh ) in [ us_laser , us_radar , ar_radar ] then
2433: LD_VAR 0 1
2437: PPUSH
2438: CALL_OW 264
2442: PUSH
2443: LD_INT 9
2445: PUSH
2446: LD_INT 11
2448: PUSH
2449: LD_INT 30
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: LIST
2456: IN
2457: IFFALSE 2473
// points := points + 30 ;
2459: LD_ADDR_VAR 0 3
2463: PUSH
2464: LD_VAR 0 3
2468: PUSH
2469: LD_INT 30
2471: PLUS
2472: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_selfpropelled_bomb , ru_time_lapser , ru_rocket , us_double_laser ] then
2473: LD_VAR 0 1
2477: PPUSH
2478: CALL_OW 264
2482: PUSH
2483: LD_INT 29
2485: PUSH
2486: LD_INT 49
2488: PUSH
2489: LD_INT 47
2491: PUSH
2492: LD_INT 10
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: LIST
2499: LIST
2500: IN
2501: IFFALSE 2517
// points := points + 50 ;
2503: LD_ADDR_VAR 0 3
2507: PUSH
2508: LD_VAR 0 3
2512: PUSH
2513: LD_INT 50
2515: PLUS
2516: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ru_siberium_rocket , us_siberium_rocket ] then
2517: LD_VAR 0 1
2521: PPUSH
2522: CALL_OW 264
2526: PUSH
2527: LD_INT 48
2529: PUSH
2530: LD_INT 8
2532: PUSH
2533: EMPTY
2534: LIST
2535: LIST
2536: IN
2537: IFFALSE 2553
// points := points + 100 ;
2539: LD_ADDR_VAR 0 3
2543: PUSH
2544: LD_VAR 0 3
2548: PUSH
2549: LD_INT 100
2551: PLUS
2552: ST_TO_ADDR
// result := points ;
2553: LD_ADDR_VAR 0 2
2557: PUSH
2558: LD_VAR 0 3
2562: ST_TO_ADDR
// end ; end_of_file
2563: LD_VAR 0 2
2567: RET
// every 0 0$01 trigger time do var filter , i , side , driver , un ;
2568: LD_EXP 5
2572: IFFALSE 3217
2574: GO 2576
2576: DISABLE
2577: LD_INT 0
2579: PPUSH
2580: PPUSH
2581: PPUSH
2582: PPUSH
2583: PPUSH
// begin enable ;
2584: ENABLE
// if tick < 36 then
2585: LD_OWVAR 1
2589: PUSH
2590: LD_INT 36
2592: LESS
2593: IFFALSE 2605
// SetAreaMapShow ( exit_area , 1 ) ;
2595: LD_INT 4
2597: PPUSH
2598: LD_INT 1
2600: PPUSH
2601: CALL_OW 424
// time := time - 0 0$01 ;
2605: LD_ADDR_EXP 5
2609: PUSH
2610: LD_EXP 5
2614: PUSH
2615: LD_INT 35
2617: MINUS
2618: ST_TO_ADDR
// if time = 0 0$00 then
2619: LD_EXP 5
2623: PUSH
2624: LD_INT 0
2626: EQUAL
2627: IFFALSE 2690
// if p1 > p2 and p1 > p3 and p1 > p4 and p1 > p5 then
2629: LD_EXP 7
2633: PUSH
2634: LD_EXP 8
2638: GREATER
2639: PUSH
2640: LD_EXP 7
2644: PUSH
2645: LD_EXP 9
2649: GREATER
2650: AND
2651: PUSH
2652: LD_EXP 7
2656: PUSH
2657: LD_EXP 10
2661: GREATER
2662: AND
2663: PUSH
2664: LD_EXP 7
2668: PUSH
2669: LD_EXP 11
2673: GREATER
2674: AND
2675: IFFALSE 2683
// YouWin else
2677: CALL_OW 103
2681: GO 2690
// YouLost (  ) ;
2683: LD_STRING 
2685: PPUSH
2686: CALL_OW 104
// filter := FilterUnitsInArea ( exit_area , [ f_type , unit_vehicle ] ) ;
2690: LD_ADDR_VAR 0 1
2694: PUSH
2695: LD_INT 4
2697: PPUSH
2698: LD_INT 21
2700: PUSH
2701: LD_INT 2
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: PPUSH
2708: CALL_OW 70
2712: ST_TO_ADDR
// if filter then
2713: LD_VAR 0 1
2717: IFFALSE 3007
// for i = 1 to filter do
2719: LD_ADDR_VAR 0 2
2723: PUSH
2724: DOUBLE
2725: LD_INT 1
2727: DEC
2728: ST_TO_ADDR
2729: LD_VAR 0 1
2733: PUSH
2734: FOR_TO
2735: IFFALSE 3005
// begin side := GetSide ( filter [ i ] ) ;
2737: LD_ADDR_VAR 0 3
2741: PUSH
2742: LD_VAR 0 1
2746: PUSH
2747: LD_VAR 0 2
2751: ARRAY
2752: PPUSH
2753: CALL_OW 255
2757: ST_TO_ADDR
// driver := IsDrivenBy ( filter [ i ] ) ;
2758: LD_ADDR_VAR 0 4
2762: PUSH
2763: LD_VAR 0 1
2767: PUSH
2768: LD_VAR 0 2
2772: ARRAY
2773: PPUSH
2774: CALL_OW 311
2778: ST_TO_ADDR
// un := filter [ i ] ;
2779: LD_ADDR_VAR 0 5
2783: PUSH
2784: LD_VAR 0 1
2788: PUSH
2789: LD_VAR 0 2
2793: ARRAY
2794: ST_TO_ADDR
// if IsInUnit ( driver ) then
2795: LD_VAR 0 4
2799: PPUSH
2800: CALL_OW 310
2804: IFFALSE 2815
// ComExitVehicle ( driver ) ;
2806: LD_VAR 0 4
2810: PPUSH
2811: CALL_OW 121
// Wait ( 0 0$0.3 ) ;
2815: LD_INT 10
2817: PPUSH
2818: CALL_OW 67
// RemoveUnit ( filter [ i ] ) ;
2822: LD_VAR 0 1
2826: PUSH
2827: LD_VAR 0 2
2831: ARRAY
2832: PPUSH
2833: CALL_OW 64
// case side of 1 :
2837: LD_VAR 0 3
2841: PUSH
2842: LD_INT 1
2844: DOUBLE
2845: EQUAL
2846: IFTRUE 2850
2848: GO 2874
2850: POP
// p1 := p1 + ScoreBoard ( un ) ; 2 :
2851: LD_ADDR_EXP 7
2855: PUSH
2856: LD_EXP 7
2860: PUSH
2861: LD_VAR 0 5
2865: PPUSH
2866: CALL 1953 0 1
2870: PLUS
2871: ST_TO_ADDR
2872: GO 3003
2874: LD_INT 2
2876: DOUBLE
2877: EQUAL
2878: IFTRUE 2882
2880: GO 2906
2882: POP
// p2 := p2 + ScoreBoard ( un ) ; 3 :
2883: LD_ADDR_EXP 8
2887: PUSH
2888: LD_EXP 8
2892: PUSH
2893: LD_VAR 0 5
2897: PPUSH
2898: CALL 1953 0 1
2902: PLUS
2903: ST_TO_ADDR
2904: GO 3003
2906: LD_INT 3
2908: DOUBLE
2909: EQUAL
2910: IFTRUE 2914
2912: GO 2938
2914: POP
// p3 := p3 + ScoreBoard ( un ) ; 4 :
2915: LD_ADDR_EXP 9
2919: PUSH
2920: LD_EXP 9
2924: PUSH
2925: LD_VAR 0 5
2929: PPUSH
2930: CALL 1953 0 1
2934: PLUS
2935: ST_TO_ADDR
2936: GO 3003
2938: LD_INT 4
2940: DOUBLE
2941: EQUAL
2942: IFTRUE 2946
2944: GO 2970
2946: POP
// p4 := p4 + ScoreBoard ( un ) ; 5 :
2947: LD_ADDR_EXP 10
2951: PUSH
2952: LD_EXP 10
2956: PUSH
2957: LD_VAR 0 5
2961: PPUSH
2962: CALL 1953 0 1
2966: PLUS
2967: ST_TO_ADDR
2968: GO 3003
2970: LD_INT 5
2972: DOUBLE
2973: EQUAL
2974: IFTRUE 2978
2976: GO 3002
2978: POP
// p5 := p5 + ScoreBoard ( un ) ; end ;
2979: LD_ADDR_EXP 11
2983: PUSH
2984: LD_EXP 11
2988: PUSH
2989: LD_VAR 0 5
2993: PPUSH
2994: CALL 1953 0 1
2998: PLUS
2999: ST_TO_ADDR
3000: GO 3003
3002: POP
// end ;
3003: GO 2734
3005: POP
3006: POP
// case players of 3 :
3007: LD_EXP 3
3011: PUSH
3012: LD_INT 3
3014: DOUBLE
3015: EQUAL
3016: IFTRUE 3020
3018: GO 3070
3020: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 ] ;
3021: LD_ADDR_OWVAR 47
3025: PUSH
3026: LD_STRING #tick
3028: PUSH
3029: LD_EXP 5
3033: PUSH
3034: LD_STRING #player1
3036: PUSH
3037: LD_EXP 7
3041: PUSH
3042: LD_STRING #player2
3044: PUSH
3045: LD_EXP 8
3049: PUSH
3050: LD_STRING #player3
3052: PUSH
3053: LD_EXP 9
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: LIST
3064: LIST
3065: LIST
3066: LIST
3067: ST_TO_ADDR
// end ; 4 :
3068: GO 3217
3070: LD_INT 4
3072: DOUBLE
3073: EQUAL
3074: IFTRUE 3078
3076: GO 3138
3078: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 , #player4 , p4 ] ;
3079: LD_ADDR_OWVAR 47
3083: PUSH
3084: LD_STRING #tick
3086: PUSH
3087: LD_EXP 5
3091: PUSH
3092: LD_STRING #player1
3094: PUSH
3095: LD_EXP 7
3099: PUSH
3100: LD_STRING #player2
3102: PUSH
3103: LD_EXP 8
3107: PUSH
3108: LD_STRING #player3
3110: PUSH
3111: LD_EXP 9
3115: PUSH
3116: LD_STRING #player4
3118: PUSH
3119: LD_EXP 10
3123: PUSH
3124: EMPTY
3125: LIST
3126: LIST
3127: LIST
3128: LIST
3129: LIST
3130: LIST
3131: LIST
3132: LIST
3133: LIST
3134: LIST
3135: ST_TO_ADDR
// end ; 5 :
3136: GO 3217
3138: LD_INT 5
3140: DOUBLE
3141: EQUAL
3142: IFTRUE 3146
3144: GO 3216
3146: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 , #player4 , p4 , #player5 , p5 ] ;
3147: LD_ADDR_OWVAR 47
3151: PUSH
3152: LD_STRING #tick
3154: PUSH
3155: LD_EXP 5
3159: PUSH
3160: LD_STRING #player1
3162: PUSH
3163: LD_EXP 7
3167: PUSH
3168: LD_STRING #player2
3170: PUSH
3171: LD_EXP 8
3175: PUSH
3176: LD_STRING #player3
3178: PUSH
3179: LD_EXP 9
3183: PUSH
3184: LD_STRING #player4
3186: PUSH
3187: LD_EXP 10
3191: PUSH
3192: LD_STRING #player5
3194: PUSH
3195: LD_EXP 11
3199: PUSH
3200: EMPTY
3201: LIST
3202: LIST
3203: LIST
3204: LIST
3205: LIST
3206: LIST
3207: LIST
3208: LIST
3209: LIST
3210: LIST
3211: LIST
3212: LIST
3213: ST_TO_ADDR
// end ; end ;
3214: GO 3217
3216: POP
// end ;
3217: PPOPN 5
3219: END
// every 0 0$05 trigger time do var chance , p ;
3220: LD_EXP 5
3224: IFFALSE 3371
3226: GO 3228
3228: DISABLE
3229: LD_INT 0
3231: PPUSH
3232: PPUSH
// begin enable ;
3233: ENABLE
// Wait ( Rand ( 0 0$01 , 0 0$06 ) ) ;
3234: LD_INT 35
3236: PPUSH
3237: LD_INT 210
3239: PPUSH
3240: CALL_OW 12
3244: PPUSH
3245: CALL_OW 67
// if FilterAllUnits ( [ f_type , unit_vehicle ] ) < veh_amount then
3249: LD_INT 21
3251: PUSH
3252: LD_INT 2
3254: PUSH
3255: EMPTY
3256: LIST
3257: LIST
3258: PPUSH
3259: CALL_OW 69
3263: PUSH
3264: LD_EXP 6
3268: LESS
3269: IFFALSE 3371
// begin SpawnCar ( false , veh_spawn ) ;
3271: LD_INT 0
3273: PPUSH
3274: LD_INT 5
3276: PPUSH
3277: CALL 946 0 2
// if sib_bomb and FilterAllUnits ( [ f_or , [ [ f_weapon , us_siberium_rocket ] , [ f_weapon , ru_siberium_rocket ] ] ] ) = 0 then
3281: LD_EXP 4
3285: PUSH
3286: LD_INT 2
3288: PUSH
3289: LD_INT 34
3291: PUSH
3292: LD_INT 8
3294: PUSH
3295: EMPTY
3296: LIST
3297: LIST
3298: PUSH
3299: LD_INT 34
3301: PUSH
3302: LD_INT 48
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: PUSH
3309: EMPTY
3310: LIST
3311: LIST
3312: PUSH
3313: EMPTY
3314: LIST
3315: LIST
3316: PPUSH
3317: CALL_OW 69
3321: PUSH
3322: LD_INT 0
3324: EQUAL
3325: AND
3326: IFFALSE 3371
// begin chance := 23 ;
3328: LD_ADDR_VAR 0 1
3332: PUSH
3333: LD_INT 23
3335: ST_TO_ADDR
// p := Rand ( 0 , 100 ) ;
3336: LD_ADDR_VAR 0 2
3340: PUSH
3341: LD_INT 0
3343: PPUSH
3344: LD_INT 100
3346: PPUSH
3347: CALL_OW 12
3351: ST_TO_ADDR
// if p < chance then
3352: LD_VAR 0 2
3356: PUSH
3357: LD_VAR 0 1
3361: LESS
3362: IFFALSE 3371
// SpawnSibRocket ( veh_spawn ) ;
3364: LD_INT 5
3366: PPUSH
3367: CALL 1784 0 1
// end ; end ; end ; end_of_file
3371: PPOPN 2
3373: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
3374: LD_INT 0
3376: PPUSH
3377: PPUSH
3378: PPUSH
3379: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
3380: LD_VAR 0 1
3384: PPUSH
3385: CALL_OW 264
3389: PUSH
3390: LD_INT 91
3392: EQUAL
3393: IFFALSE 3465
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
3395: LD_INT 68
3397: PPUSH
3398: LD_VAR 0 1
3402: PPUSH
3403: CALL_OW 255
3407: PPUSH
3408: CALL_OW 321
3412: PUSH
3413: LD_INT 2
3415: EQUAL
3416: IFFALSE 3428
// eff := 70 else
3418: LD_ADDR_VAR 0 4
3422: PUSH
3423: LD_INT 70
3425: ST_TO_ADDR
3426: GO 3436
// eff := 30 ;
3428: LD_ADDR_VAR 0 4
3432: PUSH
3433: LD_INT 30
3435: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
3436: LD_VAR 0 1
3440: PPUSH
3441: CALL_OW 250
3445: PPUSH
3446: LD_VAR 0 1
3450: PPUSH
3451: CALL_OW 251
3455: PPUSH
3456: LD_VAR 0 4
3460: PPUSH
3461: CALL_OW 495
// end ; end ;
3465: LD_VAR 0 2
3469: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
3470: LD_INT 0
3472: PPUSH
// end ;
3473: LD_VAR 0 4
3477: RET
// export function SOS_Command ( cmd ) ; begin
3478: LD_INT 0
3480: PPUSH
// end ;
3481: LD_VAR 0 2
3485: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
3486: LD_INT 0
3488: PPUSH
// end ;
3489: LD_VAR 0 6
3493: RET
// export function SOS_VehicleConstructed ( vehicle , factory ) ; var driver ; begin
3494: LD_INT 0
3496: PPUSH
3497: PPUSH
// if not vehicle or not factory then
3498: LD_VAR 0 1
3502: NOT
3503: PUSH
3504: LD_VAR 0 2
3508: NOT
3509: OR
3510: IFFALSE 3514
// exit ;
3512: GO 3745
// if factoryWaypoints >= factory then
3514: LD_EXP 81
3518: PUSH
3519: LD_VAR 0 2
3523: GREATEREQUAL
3524: IFFALSE 3745
// if factoryWaypoints [ factory ] then
3526: LD_EXP 81
3530: PUSH
3531: LD_VAR 0 2
3535: ARRAY
3536: IFFALSE 3745
// begin if GetControl ( vehicle ) = control_manual then
3538: LD_VAR 0 1
3542: PPUSH
3543: CALL_OW 263
3547: PUSH
3548: LD_INT 1
3550: EQUAL
3551: IFFALSE 3632
// begin driver := IsDrivenBy ( vehicle ) ;
3553: LD_ADDR_VAR 0 4
3557: PUSH
3558: LD_VAR 0 1
3562: PPUSH
3563: CALL_OW 311
3567: ST_TO_ADDR
// AddComMoveXY ( driver , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
3568: LD_VAR 0 4
3572: PPUSH
3573: LD_EXP 81
3577: PUSH
3578: LD_VAR 0 2
3582: ARRAY
3583: PUSH
3584: LD_INT 3
3586: ARRAY
3587: PPUSH
3588: LD_EXP 81
3592: PUSH
3593: LD_VAR 0 2
3597: ARRAY
3598: PUSH
3599: LD_INT 4
3601: ARRAY
3602: PPUSH
3603: CALL_OW 171
// AddComExitVehicle ( driver ) ;
3607: LD_VAR 0 4
3611: PPUSH
3612: CALL_OW 181
// AddComEnterUnit ( driver , factory ) ;
3616: LD_VAR 0 4
3620: PPUSH
3621: LD_VAR 0 2
3625: PPUSH
3626: CALL_OW 180
// end else
3630: GO 3745
// if GetControl ( vehicle ) = control_remote then
3632: LD_VAR 0 1
3636: PPUSH
3637: CALL_OW 263
3641: PUSH
3642: LD_INT 2
3644: EQUAL
3645: IFFALSE 3706
// begin wait ( 0 0$2 ) ;
3647: LD_INT 70
3649: PPUSH
3650: CALL_OW 67
// if Connect ( vehicle ) then
3654: LD_VAR 0 1
3658: PPUSH
3659: CALL 31405 0 1
3663: IFFALSE 3704
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
3665: LD_VAR 0 1
3669: PPUSH
3670: LD_EXP 81
3674: PUSH
3675: LD_VAR 0 2
3679: ARRAY
3680: PUSH
3681: LD_INT 3
3683: ARRAY
3684: PPUSH
3685: LD_EXP 81
3689: PUSH
3690: LD_VAR 0 2
3694: ARRAY
3695: PUSH
3696: LD_INT 4
3698: ARRAY
3699: PPUSH
3700: CALL_OW 171
// end else
3704: GO 3745
// AddComMoveXY ( vehicle , factoryWaypoints [ factory ] [ 3 ] , factoryWaypoints [ factory ] [ 4 ] ) ;
3706: LD_VAR 0 1
3710: PPUSH
3711: LD_EXP 81
3715: PUSH
3716: LD_VAR 0 2
3720: ARRAY
3721: PUSH
3722: LD_INT 3
3724: ARRAY
3725: PPUSH
3726: LD_EXP 81
3730: PUSH
3731: LD_VAR 0 2
3735: ARRAY
3736: PUSH
3737: LD_INT 4
3739: ARRAY
3740: PPUSH
3741: CALL_OW 171
// end ; end ;
3745: LD_VAR 0 3
3749: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
3750: LD_INT 0
3752: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
3753: LD_VAR 0 1
3757: PUSH
3758: LD_INT 250
3760: EQUAL
3761: PUSH
3762: LD_VAR 0 2
3766: PPUSH
3767: CALL_OW 264
3771: PUSH
3772: LD_INT 81
3774: EQUAL
3775: AND
3776: IFFALSE 3797
// MinerPlaceMine ( unit , x , y ) ;
3778: LD_VAR 0 2
3782: PPUSH
3783: LD_VAR 0 4
3787: PPUSH
3788: LD_VAR 0 5
3792: PPUSH
3793: CALL 6182 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
3797: LD_VAR 0 1
3801: PUSH
3802: LD_INT 251
3804: EQUAL
3805: PUSH
3806: LD_VAR 0 2
3810: PPUSH
3811: CALL_OW 264
3815: PUSH
3816: LD_INT 81
3818: EQUAL
3819: AND
3820: IFFALSE 3841
// MinerDetonateMine ( unit , x , y ) ;
3822: LD_VAR 0 2
3826: PPUSH
3827: LD_VAR 0 4
3831: PPUSH
3832: LD_VAR 0 5
3836: PPUSH
3837: CALL 6457 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
3841: LD_VAR 0 1
3845: PUSH
3846: LD_INT 252
3848: EQUAL
3849: PUSH
3850: LD_VAR 0 2
3854: PPUSH
3855: CALL_OW 264
3859: PUSH
3860: LD_INT 81
3862: EQUAL
3863: AND
3864: IFFALSE 3885
// MinerCreateMinefield ( unit , x , y ) ;
3866: LD_VAR 0 2
3870: PPUSH
3871: LD_VAR 0 4
3875: PPUSH
3876: LD_VAR 0 5
3880: PPUSH
3881: CALL 6874 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
3885: LD_VAR 0 1
3889: PUSH
3890: LD_INT 253
3892: EQUAL
3893: PUSH
3894: LD_VAR 0 2
3898: PPUSH
3899: CALL_OW 257
3903: PUSH
3904: LD_INT 5
3906: EQUAL
3907: AND
3908: IFFALSE 3929
// ComBinocular ( unit , x , y ) ;
3910: LD_VAR 0 2
3914: PPUSH
3915: LD_VAR 0 4
3919: PPUSH
3920: LD_VAR 0 5
3924: PPUSH
3925: CALL 7243 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
3929: LD_VAR 0 1
3933: PUSH
3934: LD_INT 254
3936: EQUAL
3937: PUSH
3938: LD_VAR 0 2
3942: PPUSH
3943: CALL_OW 264
3947: PUSH
3948: LD_INT 99
3950: EQUAL
3951: AND
3952: PUSH
3953: LD_VAR 0 3
3957: PPUSH
3958: CALL_OW 263
3962: PUSH
3963: LD_INT 3
3965: EQUAL
3966: AND
3967: IFFALSE 3983
// HackDestroyVehicle ( unit , selectedUnit ) ;
3969: LD_VAR 0 2
3973: PPUSH
3974: LD_VAR 0 3
3978: PPUSH
3979: CALL 5546 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
3983: LD_VAR 0 1
3987: PUSH
3988: LD_INT 255
3990: EQUAL
3991: PUSH
3992: LD_VAR 0 2
3996: PPUSH
3997: CALL_OW 264
4001: PUSH
4002: LD_INT 14
4004: PUSH
4005: LD_INT 53
4007: PUSH
4008: EMPTY
4009: LIST
4010: LIST
4011: IN
4012: AND
4013: PUSH
4014: LD_VAR 0 4
4018: PPUSH
4019: LD_VAR 0 5
4023: PPUSH
4024: CALL_OW 488
4028: AND
4029: IFFALSE 4053
// CutTreeXYR ( unit , x , y , 12 ) ;
4031: LD_VAR 0 2
4035: PPUSH
4036: LD_VAR 0 4
4040: PPUSH
4041: LD_VAR 0 5
4045: PPUSH
4046: LD_INT 12
4048: PPUSH
4049: CALL 4116 0 4
// if cmd = 256 then
4053: LD_VAR 0 1
4057: PUSH
4058: LD_INT 256
4060: EQUAL
4061: IFFALSE 4082
// SetFactoryWaypoint ( unit , x , y ) ;
4063: LD_VAR 0 2
4067: PPUSH
4068: LD_VAR 0 4
4072: PPUSH
4073: LD_VAR 0 5
4077: PPUSH
4078: CALL 22154 0 3
// if cmd = 257 then
4082: LD_VAR 0 1
4086: PUSH
4087: LD_INT 257
4089: EQUAL
4090: IFFALSE 4111
// SetWarehouseGatheringPoint ( unit , x , y ) ;
4092: LD_VAR 0 2
4096: PPUSH
4097: LD_VAR 0 4
4101: PPUSH
4102: LD_VAR 0 5
4106: PPUSH
4107: CALL 22516 0 3
// end ;
4111: LD_VAR 0 6
4115: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
4116: LD_INT 0
4118: PPUSH
4119: PPUSH
4120: PPUSH
4121: PPUSH
4122: PPUSH
4123: PPUSH
4124: PPUSH
4125: PPUSH
4126: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
4127: LD_VAR 0 1
4131: NOT
4132: PUSH
4133: LD_VAR 0 2
4137: PPUSH
4138: LD_VAR 0 3
4142: PPUSH
4143: CALL_OW 488
4147: NOT
4148: OR
4149: PUSH
4150: LD_VAR 0 4
4154: NOT
4155: OR
4156: IFFALSE 4160
// exit ;
4158: GO 4500
// list := [ ] ;
4160: LD_ADDR_VAR 0 13
4164: PUSH
4165: EMPTY
4166: ST_TO_ADDR
// if x - r < 0 then
4167: LD_VAR 0 2
4171: PUSH
4172: LD_VAR 0 4
4176: MINUS
4177: PUSH
4178: LD_INT 0
4180: LESS
4181: IFFALSE 4193
// min_x := 0 else
4183: LD_ADDR_VAR 0 7
4187: PUSH
4188: LD_INT 0
4190: ST_TO_ADDR
4191: GO 4209
// min_x := x - r ;
4193: LD_ADDR_VAR 0 7
4197: PUSH
4198: LD_VAR 0 2
4202: PUSH
4203: LD_VAR 0 4
4207: MINUS
4208: ST_TO_ADDR
// if y - r < 0 then
4209: LD_VAR 0 3
4213: PUSH
4214: LD_VAR 0 4
4218: MINUS
4219: PUSH
4220: LD_INT 0
4222: LESS
4223: IFFALSE 4235
// min_y := 0 else
4225: LD_ADDR_VAR 0 8
4229: PUSH
4230: LD_INT 0
4232: ST_TO_ADDR
4233: GO 4251
// min_y := y - r ;
4235: LD_ADDR_VAR 0 8
4239: PUSH
4240: LD_VAR 0 3
4244: PUSH
4245: LD_VAR 0 4
4249: MINUS
4250: ST_TO_ADDR
// max_x := x + r ;
4251: LD_ADDR_VAR 0 9
4255: PUSH
4256: LD_VAR 0 2
4260: PUSH
4261: LD_VAR 0 4
4265: PLUS
4266: ST_TO_ADDR
// max_y := y + r ;
4267: LD_ADDR_VAR 0 10
4271: PUSH
4272: LD_VAR 0 3
4276: PUSH
4277: LD_VAR 0 4
4281: PLUS
4282: ST_TO_ADDR
// for _x = min_x to max_x do
4283: LD_ADDR_VAR 0 11
4287: PUSH
4288: DOUBLE
4289: LD_VAR 0 7
4293: DEC
4294: ST_TO_ADDR
4295: LD_VAR 0 9
4299: PUSH
4300: FOR_TO
4301: IFFALSE 4418
// for _y = min_y to max_y do
4303: LD_ADDR_VAR 0 12
4307: PUSH
4308: DOUBLE
4309: LD_VAR 0 8
4313: DEC
4314: ST_TO_ADDR
4315: LD_VAR 0 10
4319: PUSH
4320: FOR_TO
4321: IFFALSE 4414
// begin if not ValidHex ( _x , _y ) then
4323: LD_VAR 0 11
4327: PPUSH
4328: LD_VAR 0 12
4332: PPUSH
4333: CALL_OW 488
4337: NOT
4338: IFFALSE 4342
// continue ;
4340: GO 4320
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
4342: LD_VAR 0 11
4346: PPUSH
4347: LD_VAR 0 12
4351: PPUSH
4352: CALL_OW 351
4356: PUSH
4357: LD_VAR 0 11
4361: PPUSH
4362: LD_VAR 0 12
4366: PPUSH
4367: CALL_OW 554
4371: AND
4372: IFFALSE 4412
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
4374: LD_ADDR_VAR 0 13
4378: PUSH
4379: LD_VAR 0 13
4383: PPUSH
4384: LD_VAR 0 13
4388: PUSH
4389: LD_INT 1
4391: PLUS
4392: PPUSH
4393: LD_VAR 0 11
4397: PUSH
4398: LD_VAR 0 12
4402: PUSH
4403: EMPTY
4404: LIST
4405: LIST
4406: PPUSH
4407: CALL_OW 2
4411: ST_TO_ADDR
// end ;
4412: GO 4320
4414: POP
4415: POP
4416: GO 4300
4418: POP
4419: POP
// if not list then
4420: LD_VAR 0 13
4424: NOT
4425: IFFALSE 4429
// exit ;
4427: GO 4500
// for i in list do
4429: LD_ADDR_VAR 0 6
4433: PUSH
4434: LD_VAR 0 13
4438: PUSH
4439: FOR_IN
4440: IFFALSE 4498
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
4442: LD_VAR 0 1
4446: PPUSH
4447: LD_STRING M
4449: PUSH
4450: LD_VAR 0 6
4454: PUSH
4455: LD_INT 1
4457: ARRAY
4458: PUSH
4459: LD_VAR 0 6
4463: PUSH
4464: LD_INT 2
4466: ARRAY
4467: PUSH
4468: LD_INT 0
4470: PUSH
4471: LD_INT 0
4473: PUSH
4474: LD_INT 0
4476: PUSH
4477: LD_INT 0
4479: PUSH
4480: EMPTY
4481: LIST
4482: LIST
4483: LIST
4484: LIST
4485: LIST
4486: LIST
4487: LIST
4488: PUSH
4489: EMPTY
4490: LIST
4491: PPUSH
4492: CALL_OW 447
4496: GO 4439
4498: POP
4499: POP
// end ;
4500: LD_VAR 0 5
4504: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
4505: LD_EXP 12
4509: NOT
4510: IFFALSE 4560
4512: GO 4514
4514: DISABLE
// begin initHack := true ;
4515: LD_ADDR_EXP 12
4519: PUSH
4520: LD_INT 1
4522: ST_TO_ADDR
// hackTanks := [ ] ;
4523: LD_ADDR_EXP 13
4527: PUSH
4528: EMPTY
4529: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
4530: LD_ADDR_EXP 14
4534: PUSH
4535: EMPTY
4536: ST_TO_ADDR
// hackLimit := 3 ;
4537: LD_ADDR_EXP 15
4541: PUSH
4542: LD_INT 3
4544: ST_TO_ADDR
// hackDist := 12 ;
4545: LD_ADDR_EXP 16
4549: PUSH
4550: LD_INT 12
4552: ST_TO_ADDR
// hackCounter := [ ] ;
4553: LD_ADDR_EXP 17
4557: PUSH
4558: EMPTY
4559: ST_TO_ADDR
// end ;
4560: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
4561: LD_EXP 12
4565: PUSH
4566: LD_INT 34
4568: PUSH
4569: LD_INT 99
4571: PUSH
4572: EMPTY
4573: LIST
4574: LIST
4575: PPUSH
4576: CALL_OW 69
4580: AND
4581: IFFALSE 4834
4583: GO 4585
4585: DISABLE
4586: LD_INT 0
4588: PPUSH
4589: PPUSH
// begin enable ;
4590: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
4591: LD_ADDR_VAR 0 1
4595: PUSH
4596: LD_INT 34
4598: PUSH
4599: LD_INT 99
4601: PUSH
4602: EMPTY
4603: LIST
4604: LIST
4605: PPUSH
4606: CALL_OW 69
4610: PUSH
4611: FOR_IN
4612: IFFALSE 4832
// begin if not i in hackTanks then
4614: LD_VAR 0 1
4618: PUSH
4619: LD_EXP 13
4623: IN
4624: NOT
4625: IFFALSE 4708
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
4627: LD_ADDR_EXP 13
4631: PUSH
4632: LD_EXP 13
4636: PPUSH
4637: LD_EXP 13
4641: PUSH
4642: LD_INT 1
4644: PLUS
4645: PPUSH
4646: LD_VAR 0 1
4650: PPUSH
4651: CALL_OW 1
4655: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
4656: LD_ADDR_EXP 14
4660: PUSH
4661: LD_EXP 14
4665: PPUSH
4666: LD_EXP 14
4670: PUSH
4671: LD_INT 1
4673: PLUS
4674: PPUSH
4675: EMPTY
4676: PPUSH
4677: CALL_OW 1
4681: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
4682: LD_ADDR_EXP 17
4686: PUSH
4687: LD_EXP 17
4691: PPUSH
4692: LD_EXP 17
4696: PUSH
4697: LD_INT 1
4699: PLUS
4700: PPUSH
4701: EMPTY
4702: PPUSH
4703: CALL_OW 1
4707: ST_TO_ADDR
// end ; if not IsOk ( i ) then
4708: LD_VAR 0 1
4712: PPUSH
4713: CALL_OW 302
4717: NOT
4718: IFFALSE 4731
// begin HackUnlinkAll ( i ) ;
4720: LD_VAR 0 1
4724: PPUSH
4725: CALL 4837 0 1
// continue ;
4729: GO 4611
// end ; HackCheckCapturedStatus ( i ) ;
4731: LD_VAR 0 1
4735: PPUSH
4736: CALL 5280 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
4740: LD_ADDR_VAR 0 2
4744: PUSH
4745: LD_INT 81
4747: PUSH
4748: LD_VAR 0 1
4752: PPUSH
4753: CALL_OW 255
4757: PUSH
4758: EMPTY
4759: LIST
4760: LIST
4761: PUSH
4762: LD_INT 33
4764: PUSH
4765: LD_INT 3
4767: PUSH
4768: EMPTY
4769: LIST
4770: LIST
4771: PUSH
4772: LD_INT 91
4774: PUSH
4775: LD_VAR 0 1
4779: PUSH
4780: LD_EXP 16
4784: PUSH
4785: EMPTY
4786: LIST
4787: LIST
4788: LIST
4789: PUSH
4790: LD_INT 50
4792: PUSH
4793: EMPTY
4794: LIST
4795: PUSH
4796: EMPTY
4797: LIST
4798: LIST
4799: LIST
4800: LIST
4801: PPUSH
4802: CALL_OW 69
4806: ST_TO_ADDR
// if not tmp then
4807: LD_VAR 0 2
4811: NOT
4812: IFFALSE 4816
// continue ;
4814: GO 4611
// HackLink ( i , tmp ) ;
4816: LD_VAR 0 1
4820: PPUSH
4821: LD_VAR 0 2
4825: PPUSH
4826: CALL 4973 0 2
// end ;
4830: GO 4611
4832: POP
4833: POP
// end ;
4834: PPOPN 2
4836: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
4837: LD_INT 0
4839: PPUSH
4840: PPUSH
4841: PPUSH
// if not hack in hackTanks then
4842: LD_VAR 0 1
4846: PUSH
4847: LD_EXP 13
4851: IN
4852: NOT
4853: IFFALSE 4857
// exit ;
4855: GO 4968
// index := GetElementIndex ( hackTanks , hack ) ;
4857: LD_ADDR_VAR 0 4
4861: PUSH
4862: LD_EXP 13
4866: PPUSH
4867: LD_VAR 0 1
4871: PPUSH
4872: CALL 28212 0 2
4876: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
4877: LD_EXP 14
4881: PUSH
4882: LD_VAR 0 4
4886: ARRAY
4887: IFFALSE 4968
// begin for i in hackTanksCaptured [ index ] do
4889: LD_ADDR_VAR 0 3
4893: PUSH
4894: LD_EXP 14
4898: PUSH
4899: LD_VAR 0 4
4903: ARRAY
4904: PUSH
4905: FOR_IN
4906: IFFALSE 4932
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
4908: LD_VAR 0 3
4912: PUSH
4913: LD_INT 1
4915: ARRAY
4916: PPUSH
4917: LD_VAR 0 3
4921: PUSH
4922: LD_INT 2
4924: ARRAY
4925: PPUSH
4926: CALL_OW 235
4930: GO 4905
4932: POP
4933: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
4934: LD_ADDR_EXP 14
4938: PUSH
4939: LD_EXP 14
4943: PPUSH
4944: LD_VAR 0 4
4948: PPUSH
4949: EMPTY
4950: PPUSH
4951: CALL_OW 1
4955: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
4956: LD_VAR 0 1
4960: PPUSH
4961: LD_INT 0
4963: PPUSH
4964: CALL_OW 505
// end ; end ;
4968: LD_VAR 0 2
4972: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
4973: LD_INT 0
4975: PPUSH
4976: PPUSH
4977: PPUSH
// if not hack in hackTanks or not vehicles then
4978: LD_VAR 0 1
4982: PUSH
4983: LD_EXP 13
4987: IN
4988: NOT
4989: PUSH
4990: LD_VAR 0 2
4994: NOT
4995: OR
4996: IFFALSE 5000
// exit ;
4998: GO 5275
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
5000: LD_ADDR_VAR 0 2
5004: PUSH
5005: LD_VAR 0 1
5009: PPUSH
5010: LD_VAR 0 2
5014: PPUSH
5015: LD_INT 1
5017: PPUSH
5018: LD_INT 1
5020: PPUSH
5021: CALL 28862 0 4
5025: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
5026: LD_ADDR_VAR 0 5
5030: PUSH
5031: LD_EXP 13
5035: PPUSH
5036: LD_VAR 0 1
5040: PPUSH
5041: CALL 28212 0 2
5045: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
5046: LD_EXP 14
5050: PUSH
5051: LD_VAR 0 5
5055: ARRAY
5056: PUSH
5057: LD_EXP 15
5061: LESS
5062: IFFALSE 5251
// begin for i := 1 to vehicles do
5064: LD_ADDR_VAR 0 4
5068: PUSH
5069: DOUBLE
5070: LD_INT 1
5072: DEC
5073: ST_TO_ADDR
5074: LD_VAR 0 2
5078: PUSH
5079: FOR_TO
5080: IFFALSE 5249
// begin if hackTanksCaptured [ index ] = hackLimit then
5082: LD_EXP 14
5086: PUSH
5087: LD_VAR 0 5
5091: ARRAY
5092: PUSH
5093: LD_EXP 15
5097: EQUAL
5098: IFFALSE 5102
// break ;
5100: GO 5249
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
5102: LD_ADDR_EXP 17
5106: PUSH
5107: LD_EXP 17
5111: PPUSH
5112: LD_VAR 0 5
5116: PPUSH
5117: LD_EXP 17
5121: PUSH
5122: LD_VAR 0 5
5126: ARRAY
5127: PUSH
5128: LD_INT 1
5130: PLUS
5131: PPUSH
5132: CALL_OW 1
5136: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
5137: LD_ADDR_EXP 14
5141: PUSH
5142: LD_EXP 14
5146: PPUSH
5147: LD_VAR 0 5
5151: PUSH
5152: LD_EXP 14
5156: PUSH
5157: LD_VAR 0 5
5161: ARRAY
5162: PUSH
5163: LD_INT 1
5165: PLUS
5166: PUSH
5167: EMPTY
5168: LIST
5169: LIST
5170: PPUSH
5171: LD_VAR 0 2
5175: PUSH
5176: LD_VAR 0 4
5180: ARRAY
5181: PUSH
5182: LD_VAR 0 2
5186: PUSH
5187: LD_VAR 0 4
5191: ARRAY
5192: PPUSH
5193: CALL_OW 255
5197: PUSH
5198: EMPTY
5199: LIST
5200: LIST
5201: PPUSH
5202: CALL 28427 0 3
5206: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
5207: LD_VAR 0 2
5211: PUSH
5212: LD_VAR 0 4
5216: ARRAY
5217: PPUSH
5218: LD_VAR 0 1
5222: PPUSH
5223: CALL_OW 255
5227: PPUSH
5228: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
5232: LD_VAR 0 2
5236: PUSH
5237: LD_VAR 0 4
5241: ARRAY
5242: PPUSH
5243: CALL_OW 141
// end ;
5247: GO 5079
5249: POP
5250: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
5251: LD_VAR 0 1
5255: PPUSH
5256: LD_EXP 14
5260: PUSH
5261: LD_VAR 0 5
5265: ARRAY
5266: PUSH
5267: LD_INT 0
5269: PLUS
5270: PPUSH
5271: CALL_OW 505
// end ;
5275: LD_VAR 0 3
5279: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
5280: LD_INT 0
5282: PPUSH
5283: PPUSH
5284: PPUSH
5285: PPUSH
// if not hack in hackTanks then
5286: LD_VAR 0 1
5290: PUSH
5291: LD_EXP 13
5295: IN
5296: NOT
5297: IFFALSE 5301
// exit ;
5299: GO 5541
// index := GetElementIndex ( hackTanks , hack ) ;
5301: LD_ADDR_VAR 0 4
5305: PUSH
5306: LD_EXP 13
5310: PPUSH
5311: LD_VAR 0 1
5315: PPUSH
5316: CALL 28212 0 2
5320: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
5321: LD_ADDR_VAR 0 3
5325: PUSH
5326: DOUBLE
5327: LD_EXP 14
5331: PUSH
5332: LD_VAR 0 4
5336: ARRAY
5337: INC
5338: ST_TO_ADDR
5339: LD_INT 1
5341: PUSH
5342: FOR_DOWNTO
5343: IFFALSE 5515
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
5345: LD_ADDR_VAR 0 5
5349: PUSH
5350: LD_EXP 14
5354: PUSH
5355: LD_VAR 0 4
5359: ARRAY
5360: PUSH
5361: LD_VAR 0 3
5365: ARRAY
5366: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
5367: LD_VAR 0 5
5371: PUSH
5372: LD_INT 1
5374: ARRAY
5375: PPUSH
5376: CALL_OW 302
5380: NOT
5381: PUSH
5382: LD_VAR 0 5
5386: PUSH
5387: LD_INT 1
5389: ARRAY
5390: PPUSH
5391: CALL_OW 255
5395: PUSH
5396: LD_VAR 0 1
5400: PPUSH
5401: CALL_OW 255
5405: NONEQUAL
5406: OR
5407: IFFALSE 5513
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
5409: LD_VAR 0 5
5413: PUSH
5414: LD_INT 1
5416: ARRAY
5417: PPUSH
5418: CALL_OW 305
5422: PUSH
5423: LD_VAR 0 5
5427: PUSH
5428: LD_INT 1
5430: ARRAY
5431: PPUSH
5432: CALL_OW 255
5436: PUSH
5437: LD_VAR 0 1
5441: PPUSH
5442: CALL_OW 255
5446: EQUAL
5447: AND
5448: IFFALSE 5472
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
5450: LD_VAR 0 5
5454: PUSH
5455: LD_INT 1
5457: ARRAY
5458: PPUSH
5459: LD_VAR 0 5
5463: PUSH
5464: LD_INT 2
5466: ARRAY
5467: PPUSH
5468: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
5472: LD_ADDR_EXP 14
5476: PUSH
5477: LD_EXP 14
5481: PPUSH
5482: LD_VAR 0 4
5486: PPUSH
5487: LD_EXP 14
5491: PUSH
5492: LD_VAR 0 4
5496: ARRAY
5497: PPUSH
5498: LD_VAR 0 3
5502: PPUSH
5503: CALL_OW 3
5507: PPUSH
5508: CALL_OW 1
5512: ST_TO_ADDR
// end ; end ;
5513: GO 5342
5515: POP
5516: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
5517: LD_VAR 0 1
5521: PPUSH
5522: LD_EXP 14
5526: PUSH
5527: LD_VAR 0 4
5531: ARRAY
5532: PUSH
5533: LD_INT 0
5535: PLUS
5536: PPUSH
5537: CALL_OW 505
// end ;
5541: LD_VAR 0 2
5545: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
5546: LD_INT 0
5548: PPUSH
5549: PPUSH
5550: PPUSH
5551: PPUSH
// if not hack in hackTanks then
5552: LD_VAR 0 1
5556: PUSH
5557: LD_EXP 13
5561: IN
5562: NOT
5563: IFFALSE 5567
// exit ;
5565: GO 5652
// index := GetElementIndex ( hackTanks , hack ) ;
5567: LD_ADDR_VAR 0 5
5571: PUSH
5572: LD_EXP 13
5576: PPUSH
5577: LD_VAR 0 1
5581: PPUSH
5582: CALL 28212 0 2
5586: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
5587: LD_ADDR_VAR 0 4
5591: PUSH
5592: DOUBLE
5593: LD_INT 1
5595: DEC
5596: ST_TO_ADDR
5597: LD_EXP 14
5601: PUSH
5602: LD_VAR 0 5
5606: ARRAY
5607: PUSH
5608: FOR_TO
5609: IFFALSE 5650
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
5611: LD_EXP 14
5615: PUSH
5616: LD_VAR 0 5
5620: ARRAY
5621: PUSH
5622: LD_VAR 0 4
5626: ARRAY
5627: PUSH
5628: LD_INT 1
5630: ARRAY
5631: PUSH
5632: LD_VAR 0 2
5636: EQUAL
5637: IFFALSE 5648
// KillUnit ( vehicle ) ;
5639: LD_VAR 0 2
5643: PPUSH
5644: CALL_OW 66
5648: GO 5608
5650: POP
5651: POP
// end ;
5652: LD_VAR 0 3
5656: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
5657: LD_EXP 18
5661: NOT
5662: IFFALSE 5697
5664: GO 5666
5666: DISABLE
// begin initMiner := true ;
5667: LD_ADDR_EXP 18
5671: PUSH
5672: LD_INT 1
5674: ST_TO_ADDR
// minersList := [ ] ;
5675: LD_ADDR_EXP 19
5679: PUSH
5680: EMPTY
5681: ST_TO_ADDR
// minerMinesList := [ ] ;
5682: LD_ADDR_EXP 20
5686: PUSH
5687: EMPTY
5688: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
5689: LD_ADDR_EXP 21
5693: PUSH
5694: LD_INT 5
5696: ST_TO_ADDR
// end ;
5697: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
5698: LD_EXP 18
5702: PUSH
5703: LD_INT 34
5705: PUSH
5706: LD_INT 81
5708: PUSH
5709: EMPTY
5710: LIST
5711: LIST
5712: PPUSH
5713: CALL_OW 69
5717: AND
5718: IFFALSE 6179
5720: GO 5722
5722: DISABLE
5723: LD_INT 0
5725: PPUSH
5726: PPUSH
5727: PPUSH
5728: PPUSH
// begin enable ;
5729: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
5730: LD_ADDR_VAR 0 1
5734: PUSH
5735: LD_INT 34
5737: PUSH
5738: LD_INT 81
5740: PUSH
5741: EMPTY
5742: LIST
5743: LIST
5744: PPUSH
5745: CALL_OW 69
5749: PUSH
5750: FOR_IN
5751: IFFALSE 5823
// begin if not i in minersList then
5753: LD_VAR 0 1
5757: PUSH
5758: LD_EXP 19
5762: IN
5763: NOT
5764: IFFALSE 5821
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
5766: LD_ADDR_EXP 19
5770: PUSH
5771: LD_EXP 19
5775: PPUSH
5776: LD_EXP 19
5780: PUSH
5781: LD_INT 1
5783: PLUS
5784: PPUSH
5785: LD_VAR 0 1
5789: PPUSH
5790: CALL_OW 1
5794: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
5795: LD_ADDR_EXP 20
5799: PUSH
5800: LD_EXP 20
5804: PPUSH
5805: LD_EXP 20
5809: PUSH
5810: LD_INT 1
5812: PLUS
5813: PPUSH
5814: EMPTY
5815: PPUSH
5816: CALL_OW 1
5820: ST_TO_ADDR
// end end ;
5821: GO 5750
5823: POP
5824: POP
// for i := minerMinesList downto 1 do
5825: LD_ADDR_VAR 0 1
5829: PUSH
5830: DOUBLE
5831: LD_EXP 20
5835: INC
5836: ST_TO_ADDR
5837: LD_INT 1
5839: PUSH
5840: FOR_DOWNTO
5841: IFFALSE 6177
// begin if IsLive ( minersList [ i ] ) then
5843: LD_EXP 19
5847: PUSH
5848: LD_VAR 0 1
5852: ARRAY
5853: PPUSH
5854: CALL_OW 300
5858: IFFALSE 5886
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
5860: LD_EXP 19
5864: PUSH
5865: LD_VAR 0 1
5869: ARRAY
5870: PPUSH
5871: LD_EXP 20
5875: PUSH
5876: LD_VAR 0 1
5880: ARRAY
5881: PPUSH
5882: CALL_OW 505
// if not minerMinesList [ i ] then
5886: LD_EXP 20
5890: PUSH
5891: LD_VAR 0 1
5895: ARRAY
5896: NOT
5897: IFFALSE 5901
// continue ;
5899: GO 5840
// for j := minerMinesList [ i ] downto 1 do
5901: LD_ADDR_VAR 0 2
5905: PUSH
5906: DOUBLE
5907: LD_EXP 20
5911: PUSH
5912: LD_VAR 0 1
5916: ARRAY
5917: INC
5918: ST_TO_ADDR
5919: LD_INT 1
5921: PUSH
5922: FOR_DOWNTO
5923: IFFALSE 6173
// begin side := GetSide ( minersList [ i ] ) ;
5925: LD_ADDR_VAR 0 3
5929: PUSH
5930: LD_EXP 19
5934: PUSH
5935: LD_VAR 0 1
5939: ARRAY
5940: PPUSH
5941: CALL_OW 255
5945: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
5946: LD_ADDR_VAR 0 4
5950: PUSH
5951: LD_EXP 20
5955: PUSH
5956: LD_VAR 0 1
5960: ARRAY
5961: PUSH
5962: LD_VAR 0 2
5966: ARRAY
5967: PUSH
5968: LD_INT 1
5970: ARRAY
5971: PPUSH
5972: LD_EXP 20
5976: PUSH
5977: LD_VAR 0 1
5981: ARRAY
5982: PUSH
5983: LD_VAR 0 2
5987: ARRAY
5988: PUSH
5989: LD_INT 2
5991: ARRAY
5992: PPUSH
5993: CALL_OW 428
5997: ST_TO_ADDR
// if not tmp then
5998: LD_VAR 0 4
6002: NOT
6003: IFFALSE 6007
// continue ;
6005: GO 5922
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
6007: LD_VAR 0 4
6011: PUSH
6012: LD_INT 81
6014: PUSH
6015: LD_VAR 0 3
6019: PUSH
6020: EMPTY
6021: LIST
6022: LIST
6023: PPUSH
6024: CALL_OW 69
6028: IN
6029: PUSH
6030: LD_EXP 20
6034: PUSH
6035: LD_VAR 0 1
6039: ARRAY
6040: PUSH
6041: LD_VAR 0 2
6045: ARRAY
6046: PUSH
6047: LD_INT 1
6049: ARRAY
6050: PPUSH
6051: LD_EXP 20
6055: PUSH
6056: LD_VAR 0 1
6060: ARRAY
6061: PUSH
6062: LD_VAR 0 2
6066: ARRAY
6067: PUSH
6068: LD_INT 2
6070: ARRAY
6071: PPUSH
6072: CALL_OW 458
6076: AND
6077: IFFALSE 6171
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
6079: LD_EXP 20
6083: PUSH
6084: LD_VAR 0 1
6088: ARRAY
6089: PUSH
6090: LD_VAR 0 2
6094: ARRAY
6095: PUSH
6096: LD_INT 1
6098: ARRAY
6099: PPUSH
6100: LD_EXP 20
6104: PUSH
6105: LD_VAR 0 1
6109: ARRAY
6110: PUSH
6111: LD_VAR 0 2
6115: ARRAY
6116: PUSH
6117: LD_INT 2
6119: ARRAY
6120: PPUSH
6121: LD_VAR 0 3
6125: PPUSH
6126: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
6130: LD_ADDR_EXP 20
6134: PUSH
6135: LD_EXP 20
6139: PPUSH
6140: LD_VAR 0 1
6144: PPUSH
6145: LD_EXP 20
6149: PUSH
6150: LD_VAR 0 1
6154: ARRAY
6155: PPUSH
6156: LD_VAR 0 2
6160: PPUSH
6161: CALL_OW 3
6165: PPUSH
6166: CALL_OW 1
6170: ST_TO_ADDR
// end ; end ;
6171: GO 5922
6173: POP
6174: POP
// end ;
6175: GO 5840
6177: POP
6178: POP
// end ;
6179: PPOPN 4
6181: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
6182: LD_INT 0
6184: PPUSH
6185: PPUSH
// result := false ;
6186: LD_ADDR_VAR 0 4
6190: PUSH
6191: LD_INT 0
6193: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
6194: LD_VAR 0 1
6198: PPUSH
6199: CALL_OW 264
6203: PUSH
6204: LD_INT 81
6206: EQUAL
6207: NOT
6208: IFFALSE 6212
// exit ;
6210: GO 6452
// index := GetElementIndex ( minersList , unit ) ;
6212: LD_ADDR_VAR 0 5
6216: PUSH
6217: LD_EXP 19
6221: PPUSH
6222: LD_VAR 0 1
6226: PPUSH
6227: CALL 28212 0 2
6231: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
6232: LD_EXP 20
6236: PUSH
6237: LD_VAR 0 5
6241: ARRAY
6242: PUSH
6243: LD_EXP 21
6247: GREATEREQUAL
6248: IFFALSE 6252
// exit ;
6250: GO 6452
// ComMoveXY ( unit , x , y ) ;
6252: LD_VAR 0 1
6256: PPUSH
6257: LD_VAR 0 2
6261: PPUSH
6262: LD_VAR 0 3
6266: PPUSH
6267: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
6271: LD_INT 35
6273: PPUSH
6274: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
6278: LD_VAR 0 1
6282: PPUSH
6283: LD_VAR 0 2
6287: PPUSH
6288: LD_VAR 0 3
6292: PPUSH
6293: CALL 59596 0 3
6297: NOT
6298: PUSH
6299: LD_VAR 0 1
6303: PPUSH
6304: CALL_OW 314
6308: AND
6309: IFFALSE 6313
// exit ;
6311: GO 6452
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
6313: LD_VAR 0 2
6317: PPUSH
6318: LD_VAR 0 3
6322: PPUSH
6323: CALL_OW 428
6327: PUSH
6328: LD_VAR 0 1
6332: EQUAL
6333: PUSH
6334: LD_VAR 0 1
6338: PPUSH
6339: CALL_OW 314
6343: NOT
6344: AND
6345: IFFALSE 6271
// PlaySoundXY ( x , y , PlantMine ) ;
6347: LD_VAR 0 2
6351: PPUSH
6352: LD_VAR 0 3
6356: PPUSH
6357: LD_STRING PlantMine
6359: PPUSH
6360: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
6364: LD_VAR 0 2
6368: PPUSH
6369: LD_VAR 0 3
6373: PPUSH
6374: LD_VAR 0 1
6378: PPUSH
6379: CALL_OW 255
6383: PPUSH
6384: LD_INT 0
6386: PPUSH
6387: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
6391: LD_ADDR_EXP 20
6395: PUSH
6396: LD_EXP 20
6400: PPUSH
6401: LD_VAR 0 5
6405: PUSH
6406: LD_EXP 20
6410: PUSH
6411: LD_VAR 0 5
6415: ARRAY
6416: PUSH
6417: LD_INT 1
6419: PLUS
6420: PUSH
6421: EMPTY
6422: LIST
6423: LIST
6424: PPUSH
6425: LD_VAR 0 2
6429: PUSH
6430: LD_VAR 0 3
6434: PUSH
6435: EMPTY
6436: LIST
6437: LIST
6438: PPUSH
6439: CALL 28427 0 3
6443: ST_TO_ADDR
// result := true ;
6444: LD_ADDR_VAR 0 4
6448: PUSH
6449: LD_INT 1
6451: ST_TO_ADDR
// end ;
6452: LD_VAR 0 4
6456: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
6457: LD_INT 0
6459: PPUSH
6460: PPUSH
6461: PPUSH
// if not unit in minersList then
6462: LD_VAR 0 1
6466: PUSH
6467: LD_EXP 19
6471: IN
6472: NOT
6473: IFFALSE 6477
// exit ;
6475: GO 6869
// index := GetElementIndex ( minersList , unit ) ;
6477: LD_ADDR_VAR 0 6
6481: PUSH
6482: LD_EXP 19
6486: PPUSH
6487: LD_VAR 0 1
6491: PPUSH
6492: CALL 28212 0 2
6496: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
6497: LD_ADDR_VAR 0 5
6501: PUSH
6502: DOUBLE
6503: LD_EXP 20
6507: PUSH
6508: LD_VAR 0 6
6512: ARRAY
6513: INC
6514: ST_TO_ADDR
6515: LD_INT 1
6517: PUSH
6518: FOR_DOWNTO
6519: IFFALSE 6680
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
6521: LD_EXP 20
6525: PUSH
6526: LD_VAR 0 6
6530: ARRAY
6531: PUSH
6532: LD_VAR 0 5
6536: ARRAY
6537: PUSH
6538: LD_INT 1
6540: ARRAY
6541: PUSH
6542: LD_VAR 0 2
6546: EQUAL
6547: PUSH
6548: LD_EXP 20
6552: PUSH
6553: LD_VAR 0 6
6557: ARRAY
6558: PUSH
6559: LD_VAR 0 5
6563: ARRAY
6564: PUSH
6565: LD_INT 2
6567: ARRAY
6568: PUSH
6569: LD_VAR 0 3
6573: EQUAL
6574: AND
6575: IFFALSE 6678
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
6577: LD_EXP 20
6581: PUSH
6582: LD_VAR 0 6
6586: ARRAY
6587: PUSH
6588: LD_VAR 0 5
6592: ARRAY
6593: PUSH
6594: LD_INT 1
6596: ARRAY
6597: PPUSH
6598: LD_EXP 20
6602: PUSH
6603: LD_VAR 0 6
6607: ARRAY
6608: PUSH
6609: LD_VAR 0 5
6613: ARRAY
6614: PUSH
6615: LD_INT 2
6617: ARRAY
6618: PPUSH
6619: LD_VAR 0 1
6623: PPUSH
6624: CALL_OW 255
6628: PPUSH
6629: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
6633: LD_ADDR_EXP 20
6637: PUSH
6638: LD_EXP 20
6642: PPUSH
6643: LD_VAR 0 6
6647: PPUSH
6648: LD_EXP 20
6652: PUSH
6653: LD_VAR 0 6
6657: ARRAY
6658: PPUSH
6659: LD_VAR 0 5
6663: PPUSH
6664: CALL_OW 3
6668: PPUSH
6669: CALL_OW 1
6673: ST_TO_ADDR
// exit ;
6674: POP
6675: POP
6676: GO 6869
// end ; end ;
6678: GO 6518
6680: POP
6681: POP
// for i := minerMinesList [ index ] downto 1 do
6682: LD_ADDR_VAR 0 5
6686: PUSH
6687: DOUBLE
6688: LD_EXP 20
6692: PUSH
6693: LD_VAR 0 6
6697: ARRAY
6698: INC
6699: ST_TO_ADDR
6700: LD_INT 1
6702: PUSH
6703: FOR_DOWNTO
6704: IFFALSE 6867
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
6706: LD_EXP 20
6710: PUSH
6711: LD_VAR 0 6
6715: ARRAY
6716: PUSH
6717: LD_VAR 0 5
6721: ARRAY
6722: PUSH
6723: LD_INT 1
6725: ARRAY
6726: PPUSH
6727: LD_EXP 20
6731: PUSH
6732: LD_VAR 0 6
6736: ARRAY
6737: PUSH
6738: LD_VAR 0 5
6742: ARRAY
6743: PUSH
6744: LD_INT 2
6746: ARRAY
6747: PPUSH
6748: LD_VAR 0 2
6752: PPUSH
6753: LD_VAR 0 3
6757: PPUSH
6758: CALL_OW 298
6762: PUSH
6763: LD_INT 6
6765: LESS
6766: IFFALSE 6865
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
6768: LD_EXP 20
6772: PUSH
6773: LD_VAR 0 6
6777: ARRAY
6778: PUSH
6779: LD_VAR 0 5
6783: ARRAY
6784: PUSH
6785: LD_INT 1
6787: ARRAY
6788: PPUSH
6789: LD_EXP 20
6793: PUSH
6794: LD_VAR 0 6
6798: ARRAY
6799: PUSH
6800: LD_VAR 0 5
6804: ARRAY
6805: PUSH
6806: LD_INT 2
6808: ARRAY
6809: PPUSH
6810: LD_VAR 0 1
6814: PPUSH
6815: CALL_OW 255
6819: PPUSH
6820: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
6824: LD_ADDR_EXP 20
6828: PUSH
6829: LD_EXP 20
6833: PPUSH
6834: LD_VAR 0 6
6838: PPUSH
6839: LD_EXP 20
6843: PUSH
6844: LD_VAR 0 6
6848: ARRAY
6849: PPUSH
6850: LD_VAR 0 5
6854: PPUSH
6855: CALL_OW 3
6859: PPUSH
6860: CALL_OW 1
6864: ST_TO_ADDR
// end ; end ;
6865: GO 6703
6867: POP
6868: POP
// end ;
6869: LD_VAR 0 4
6873: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
6874: LD_INT 0
6876: PPUSH
6877: PPUSH
6878: PPUSH
6879: PPUSH
6880: PPUSH
6881: PPUSH
6882: PPUSH
6883: PPUSH
6884: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
6885: LD_VAR 0 1
6889: PPUSH
6890: CALL_OW 264
6894: PUSH
6895: LD_INT 81
6897: EQUAL
6898: NOT
6899: PUSH
6900: LD_VAR 0 1
6904: PUSH
6905: LD_EXP 19
6909: IN
6910: NOT
6911: OR
6912: IFFALSE 6916
// exit ;
6914: GO 7238
// index := GetElementIndex ( minersList , unit ) ;
6916: LD_ADDR_VAR 0 6
6920: PUSH
6921: LD_EXP 19
6925: PPUSH
6926: LD_VAR 0 1
6930: PPUSH
6931: CALL 28212 0 2
6935: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
6936: LD_ADDR_VAR 0 8
6940: PUSH
6941: LD_EXP 21
6945: PUSH
6946: LD_EXP 20
6950: PUSH
6951: LD_VAR 0 6
6955: ARRAY
6956: MINUS
6957: ST_TO_ADDR
// if not minesFreeAmount then
6958: LD_VAR 0 8
6962: NOT
6963: IFFALSE 6967
// exit ;
6965: GO 7238
// tmp := [ ] ;
6967: LD_ADDR_VAR 0 7
6971: PUSH
6972: EMPTY
6973: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
6974: LD_ADDR_VAR 0 5
6978: PUSH
6979: DOUBLE
6980: LD_INT 1
6982: DEC
6983: ST_TO_ADDR
6984: LD_VAR 0 8
6988: PUSH
6989: FOR_TO
6990: IFFALSE 7185
// begin _d := rand ( 0 , 5 ) ;
6992: LD_ADDR_VAR 0 11
6996: PUSH
6997: LD_INT 0
6999: PPUSH
7000: LD_INT 5
7002: PPUSH
7003: CALL_OW 12
7007: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
7008: LD_ADDR_VAR 0 12
7012: PUSH
7013: LD_INT 2
7015: PPUSH
7016: LD_INT 6
7018: PPUSH
7019: CALL_OW 12
7023: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
7024: LD_ADDR_VAR 0 9
7028: PUSH
7029: LD_VAR 0 2
7033: PPUSH
7034: LD_VAR 0 11
7038: PPUSH
7039: LD_VAR 0 12
7043: PPUSH
7044: CALL_OW 272
7048: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
7049: LD_ADDR_VAR 0 10
7053: PUSH
7054: LD_VAR 0 3
7058: PPUSH
7059: LD_VAR 0 11
7063: PPUSH
7064: LD_VAR 0 12
7068: PPUSH
7069: CALL_OW 273
7073: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
7074: LD_VAR 0 9
7078: PPUSH
7079: LD_VAR 0 10
7083: PPUSH
7084: CALL_OW 488
7088: PUSH
7089: LD_VAR 0 9
7093: PUSH
7094: LD_VAR 0 10
7098: PUSH
7099: EMPTY
7100: LIST
7101: LIST
7102: PUSH
7103: LD_VAR 0 7
7107: IN
7108: NOT
7109: AND
7110: PUSH
7111: LD_VAR 0 9
7115: PPUSH
7116: LD_VAR 0 10
7120: PPUSH
7121: CALL_OW 458
7125: NOT
7126: AND
7127: IFFALSE 7169
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
7129: LD_ADDR_VAR 0 7
7133: PUSH
7134: LD_VAR 0 7
7138: PPUSH
7139: LD_VAR 0 7
7143: PUSH
7144: LD_INT 1
7146: PLUS
7147: PPUSH
7148: LD_VAR 0 9
7152: PUSH
7153: LD_VAR 0 10
7157: PUSH
7158: EMPTY
7159: LIST
7160: LIST
7161: PPUSH
7162: CALL_OW 1
7166: ST_TO_ADDR
7167: GO 7183
// i := i - 1 ;
7169: LD_ADDR_VAR 0 5
7173: PUSH
7174: LD_VAR 0 5
7178: PUSH
7179: LD_INT 1
7181: MINUS
7182: ST_TO_ADDR
// end ;
7183: GO 6989
7185: POP
7186: POP
// for i in tmp do
7187: LD_ADDR_VAR 0 5
7191: PUSH
7192: LD_VAR 0 7
7196: PUSH
7197: FOR_IN
7198: IFFALSE 7236
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
7200: LD_VAR 0 1
7204: PPUSH
7205: LD_VAR 0 5
7209: PUSH
7210: LD_INT 1
7212: ARRAY
7213: PPUSH
7214: LD_VAR 0 5
7218: PUSH
7219: LD_INT 2
7221: ARRAY
7222: PPUSH
7223: CALL 6182 0 3
7227: NOT
7228: IFFALSE 7234
// exit ;
7230: POP
7231: POP
7232: GO 7238
7234: GO 7197
7236: POP
7237: POP
// end ;
7238: LD_VAR 0 4
7242: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
7243: LD_INT 0
7245: PPUSH
7246: PPUSH
7247: PPUSH
7248: PPUSH
7249: PPUSH
7250: PPUSH
7251: PPUSH
// if not GetClass ( unit ) = class_sniper then
7252: LD_VAR 0 1
7256: PPUSH
7257: CALL_OW 257
7261: PUSH
7262: LD_INT 5
7264: EQUAL
7265: NOT
7266: IFFALSE 7270
// exit ;
7268: GO 7658
// dist := 8 ;
7270: LD_ADDR_VAR 0 5
7274: PUSH
7275: LD_INT 8
7277: ST_TO_ADDR
// viewRange := 12 ;
7278: LD_ADDR_VAR 0 7
7282: PUSH
7283: LD_INT 12
7285: ST_TO_ADDR
// side := GetSide ( unit ) ;
7286: LD_ADDR_VAR 0 6
7290: PUSH
7291: LD_VAR 0 1
7295: PPUSH
7296: CALL_OW 255
7300: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
7301: LD_INT 61
7303: PPUSH
7304: LD_VAR 0 6
7308: PPUSH
7309: CALL_OW 321
7313: PUSH
7314: LD_INT 2
7316: EQUAL
7317: IFFALSE 7327
// viewRange := 16 ;
7319: LD_ADDR_VAR 0 7
7323: PUSH
7324: LD_INT 16
7326: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
7327: LD_VAR 0 1
7331: PPUSH
7332: LD_VAR 0 2
7336: PPUSH
7337: LD_VAR 0 3
7341: PPUSH
7342: CALL_OW 297
7346: PUSH
7347: LD_VAR 0 5
7351: GREATER
7352: IFFALSE 7431
// begin ComMoveXY ( unit , x , y ) ;
7354: LD_VAR 0 1
7358: PPUSH
7359: LD_VAR 0 2
7363: PPUSH
7364: LD_VAR 0 3
7368: PPUSH
7369: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7373: LD_INT 35
7375: PPUSH
7376: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
7380: LD_VAR 0 1
7384: PPUSH
7385: LD_VAR 0 2
7389: PPUSH
7390: LD_VAR 0 3
7394: PPUSH
7395: CALL 59596 0 3
7399: NOT
7400: IFFALSE 7404
// exit ;
7402: GO 7658
// until GetDistUnitXY ( unit , x , y ) < dist ;
7404: LD_VAR 0 1
7408: PPUSH
7409: LD_VAR 0 2
7413: PPUSH
7414: LD_VAR 0 3
7418: PPUSH
7419: CALL_OW 297
7423: PUSH
7424: LD_VAR 0 5
7428: LESS
7429: IFFALSE 7373
// end ; ComTurnXY ( unit , x , y ) ;
7431: LD_VAR 0 1
7435: PPUSH
7436: LD_VAR 0 2
7440: PPUSH
7441: LD_VAR 0 3
7445: PPUSH
7446: CALL_OW 118
// wait ( 5 ) ;
7450: LD_INT 5
7452: PPUSH
7453: CALL_OW 67
// _d := GetDir ( unit ) ;
7457: LD_ADDR_VAR 0 10
7461: PUSH
7462: LD_VAR 0 1
7466: PPUSH
7467: CALL_OW 254
7471: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
7472: LD_ADDR_VAR 0 8
7476: PUSH
7477: LD_VAR 0 1
7481: PPUSH
7482: CALL_OW 250
7486: PPUSH
7487: LD_VAR 0 10
7491: PPUSH
7492: LD_VAR 0 5
7496: PPUSH
7497: CALL_OW 272
7501: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
7502: LD_ADDR_VAR 0 9
7506: PUSH
7507: LD_VAR 0 1
7511: PPUSH
7512: CALL_OW 251
7516: PPUSH
7517: LD_VAR 0 10
7521: PPUSH
7522: LD_VAR 0 5
7526: PPUSH
7527: CALL_OW 273
7531: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
7532: LD_VAR 0 8
7536: PPUSH
7537: LD_VAR 0 9
7541: PPUSH
7542: CALL_OW 488
7546: NOT
7547: IFFALSE 7551
// exit ;
7549: GO 7658
// ComAnimCustom ( unit , 1 ) ;
7551: LD_VAR 0 1
7555: PPUSH
7556: LD_INT 1
7558: PPUSH
7559: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
7563: LD_VAR 0 8
7567: PPUSH
7568: LD_VAR 0 9
7572: PPUSH
7573: LD_VAR 0 6
7577: PPUSH
7578: LD_VAR 0 7
7582: PPUSH
7583: CALL_OW 330
// repeat wait ( 1 ) ;
7587: LD_INT 1
7589: PPUSH
7590: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
7594: LD_VAR 0 1
7598: PPUSH
7599: CALL_OW 316
7603: PUSH
7604: LD_VAR 0 1
7608: PPUSH
7609: CALL_OW 314
7613: OR
7614: PUSH
7615: LD_VAR 0 1
7619: PPUSH
7620: CALL_OW 302
7624: NOT
7625: OR
7626: PUSH
7627: LD_VAR 0 1
7631: PPUSH
7632: CALL_OW 301
7636: OR
7637: IFFALSE 7587
// RemoveSeeing ( _x , _y , side ) ;
7639: LD_VAR 0 8
7643: PPUSH
7644: LD_VAR 0 9
7648: PPUSH
7649: LD_VAR 0 6
7653: PPUSH
7654: CALL_OW 331
// end ; end_of_file
7658: LD_VAR 0 4
7662: RET
// export globalGameSaveCounter ; every 0 0$1 do
7663: GO 7665
7665: DISABLE
// begin enable ;
7666: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
7667: LD_STRING updateTimer(
7669: PUSH
7670: LD_OWVAR 1
7674: STR
7675: PUSH
7676: LD_STRING );
7678: STR
7679: PPUSH
7680: CALL_OW 559
// end ;
7684: END
// every 0 0$1 do
7685: GO 7687
7687: DISABLE
// begin globalGameSaveCounter := 0 ;
7688: LD_ADDR_EXP 22
7692: PUSH
7693: LD_INT 0
7695: ST_TO_ADDR
// ToLua ( setGameSaveCounter(0) ) ;
7696: LD_STRING setGameSaveCounter(0)
7698: PPUSH
7699: CALL_OW 559
// ToLua ( initStreamRollete(); ) ;
7703: LD_STRING initStreamRollete();
7705: PPUSH
7706: CALL_OW 559
// InitStreamMode ;
7710: CALL 9036 0 0
// DefineStreamItems ( false ) ;
7714: LD_INT 0
7716: PPUSH
7717: CALL 9500 0 1
// end ;
7721: END
// export function SOS_MapStart ( ) ; begin
7722: LD_INT 0
7724: PPUSH
// if streamModeActive then
7725: LD_EXP 23
7729: IFFALSE 7738
// DefineStreamItems ( true ) ;
7731: LD_INT 1
7733: PPUSH
7734: CALL 9500 0 1
// UpdateLuaVariables ( ) ;
7738: CALL 7755 0 0
// UpdateFactoryWaypoints ( ) ;
7742: CALL 22369 0 0
// UpdateWarehouseGatheringPoints ( ) ;
7746: CALL 22626 0 0
// end ;
7750: LD_VAR 0 1
7754: RET
// function UpdateLuaVariables ( ) ; begin
7755: LD_INT 0
7757: PPUSH
// if globalGameSaveCounter then
7758: LD_EXP 22
7762: IFFALSE 7796
// begin globalGameSaveCounter := Inc ( globalGameSaveCounter ) ;
7764: LD_ADDR_EXP 22
7768: PUSH
7769: LD_EXP 22
7773: PPUSH
7774: CALL 62147 0 1
7778: ST_TO_ADDR
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
7779: LD_STRING setGameSaveCounter(
7781: PUSH
7782: LD_EXP 22
7786: STR
7787: PUSH
7788: LD_STRING )
7790: STR
7791: PPUSH
7792: CALL_OW 559
// end ; ToLua ( setGameDifficulty( & Difficulty & ) ) ;
7796: LD_STRING setGameDifficulty(
7798: PUSH
7799: LD_OWVAR 67
7803: STR
7804: PUSH
7805: LD_STRING )
7807: STR
7808: PPUSH
7809: CALL_OW 559
// end ;
7813: LD_VAR 0 1
7817: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
7818: LD_INT 0
7820: PPUSH
// if p2 = stream_mode then
7821: LD_VAR 0 2
7825: PUSH
7826: LD_INT 100
7828: EQUAL
7829: IFFALSE 8832
// begin if not StreamModeActive then
7831: LD_EXP 23
7835: NOT
7836: IFFALSE 7846
// StreamModeActive := true ;
7838: LD_ADDR_EXP 23
7842: PUSH
7843: LD_INT 1
7845: ST_TO_ADDR
// if p3 = 0 then
7846: LD_VAR 0 3
7850: PUSH
7851: LD_INT 0
7853: EQUAL
7854: IFFALSE 7860
// InitStreamMode ;
7856: CALL 9036 0 0
// if p3 = 1 then
7860: LD_VAR 0 3
7864: PUSH
7865: LD_INT 1
7867: EQUAL
7868: IFFALSE 7878
// sRocket := true ;
7870: LD_ADDR_EXP 28
7874: PUSH
7875: LD_INT 1
7877: ST_TO_ADDR
// if p3 = 2 then
7878: LD_VAR 0 3
7882: PUSH
7883: LD_INT 2
7885: EQUAL
7886: IFFALSE 7896
// sSpeed := true ;
7888: LD_ADDR_EXP 27
7892: PUSH
7893: LD_INT 1
7895: ST_TO_ADDR
// if p3 = 3 then
7896: LD_VAR 0 3
7900: PUSH
7901: LD_INT 3
7903: EQUAL
7904: IFFALSE 7914
// sEngine := true ;
7906: LD_ADDR_EXP 29
7910: PUSH
7911: LD_INT 1
7913: ST_TO_ADDR
// if p3 = 4 then
7914: LD_VAR 0 3
7918: PUSH
7919: LD_INT 4
7921: EQUAL
7922: IFFALSE 7932
// sSpec := true ;
7924: LD_ADDR_EXP 26
7928: PUSH
7929: LD_INT 1
7931: ST_TO_ADDR
// if p3 = 5 then
7932: LD_VAR 0 3
7936: PUSH
7937: LD_INT 5
7939: EQUAL
7940: IFFALSE 7950
// sLevel := true ;
7942: LD_ADDR_EXP 30
7946: PUSH
7947: LD_INT 1
7949: ST_TO_ADDR
// if p3 = 6 then
7950: LD_VAR 0 3
7954: PUSH
7955: LD_INT 6
7957: EQUAL
7958: IFFALSE 7968
// sArmoury := true ;
7960: LD_ADDR_EXP 31
7964: PUSH
7965: LD_INT 1
7967: ST_TO_ADDR
// if p3 = 7 then
7968: LD_VAR 0 3
7972: PUSH
7973: LD_INT 7
7975: EQUAL
7976: IFFALSE 7986
// sRadar := true ;
7978: LD_ADDR_EXP 32
7982: PUSH
7983: LD_INT 1
7985: ST_TO_ADDR
// if p3 = 8 then
7986: LD_VAR 0 3
7990: PUSH
7991: LD_INT 8
7993: EQUAL
7994: IFFALSE 8004
// sBunker := true ;
7996: LD_ADDR_EXP 33
8000: PUSH
8001: LD_INT 1
8003: ST_TO_ADDR
// if p3 = 9 then
8004: LD_VAR 0 3
8008: PUSH
8009: LD_INT 9
8011: EQUAL
8012: IFFALSE 8022
// sHack := true ;
8014: LD_ADDR_EXP 34
8018: PUSH
8019: LD_INT 1
8021: ST_TO_ADDR
// if p3 = 10 then
8022: LD_VAR 0 3
8026: PUSH
8027: LD_INT 10
8029: EQUAL
8030: IFFALSE 8040
// sFire := true ;
8032: LD_ADDR_EXP 35
8036: PUSH
8037: LD_INT 1
8039: ST_TO_ADDR
// if p3 = 11 then
8040: LD_VAR 0 3
8044: PUSH
8045: LD_INT 11
8047: EQUAL
8048: IFFALSE 8058
// sRefresh := true ;
8050: LD_ADDR_EXP 36
8054: PUSH
8055: LD_INT 1
8057: ST_TO_ADDR
// if p3 = 12 then
8058: LD_VAR 0 3
8062: PUSH
8063: LD_INT 12
8065: EQUAL
8066: IFFALSE 8076
// sExp := true ;
8068: LD_ADDR_EXP 37
8072: PUSH
8073: LD_INT 1
8075: ST_TO_ADDR
// if p3 = 13 then
8076: LD_VAR 0 3
8080: PUSH
8081: LD_INT 13
8083: EQUAL
8084: IFFALSE 8094
// sDepot := true ;
8086: LD_ADDR_EXP 38
8090: PUSH
8091: LD_INT 1
8093: ST_TO_ADDR
// if p3 = 14 then
8094: LD_VAR 0 3
8098: PUSH
8099: LD_INT 14
8101: EQUAL
8102: IFFALSE 8112
// sFlag := true ;
8104: LD_ADDR_EXP 39
8108: PUSH
8109: LD_INT 1
8111: ST_TO_ADDR
// if p3 = 15 then
8112: LD_VAR 0 3
8116: PUSH
8117: LD_INT 15
8119: EQUAL
8120: IFFALSE 8130
// sKamikadze := true ;
8122: LD_ADDR_EXP 47
8126: PUSH
8127: LD_INT 1
8129: ST_TO_ADDR
// if p3 = 16 then
8130: LD_VAR 0 3
8134: PUSH
8135: LD_INT 16
8137: EQUAL
8138: IFFALSE 8148
// sTroll := true ;
8140: LD_ADDR_EXP 48
8144: PUSH
8145: LD_INT 1
8147: ST_TO_ADDR
// if p3 = 17 then
8148: LD_VAR 0 3
8152: PUSH
8153: LD_INT 17
8155: EQUAL
8156: IFFALSE 8166
// sSlow := true ;
8158: LD_ADDR_EXP 49
8162: PUSH
8163: LD_INT 1
8165: ST_TO_ADDR
// if p3 = 18 then
8166: LD_VAR 0 3
8170: PUSH
8171: LD_INT 18
8173: EQUAL
8174: IFFALSE 8184
// sLack := true ;
8176: LD_ADDR_EXP 50
8180: PUSH
8181: LD_INT 1
8183: ST_TO_ADDR
// if p3 = 19 then
8184: LD_VAR 0 3
8188: PUSH
8189: LD_INT 19
8191: EQUAL
8192: IFFALSE 8202
// sTank := true ;
8194: LD_ADDR_EXP 52
8198: PUSH
8199: LD_INT 1
8201: ST_TO_ADDR
// if p3 = 20 then
8202: LD_VAR 0 3
8206: PUSH
8207: LD_INT 20
8209: EQUAL
8210: IFFALSE 8220
// sRemote := true ;
8212: LD_ADDR_EXP 53
8216: PUSH
8217: LD_INT 1
8219: ST_TO_ADDR
// if p3 = 21 then
8220: LD_VAR 0 3
8224: PUSH
8225: LD_INT 21
8227: EQUAL
8228: IFFALSE 8238
// sPowell := true ;
8230: LD_ADDR_EXP 54
8234: PUSH
8235: LD_INT 1
8237: ST_TO_ADDR
// if p3 = 22 then
8238: LD_VAR 0 3
8242: PUSH
8243: LD_INT 22
8245: EQUAL
8246: IFFALSE 8256
// sTeleport := true ;
8248: LD_ADDR_EXP 57
8252: PUSH
8253: LD_INT 1
8255: ST_TO_ADDR
// if p3 = 23 then
8256: LD_VAR 0 3
8260: PUSH
8261: LD_INT 23
8263: EQUAL
8264: IFFALSE 8274
// sOilTower := true ;
8266: LD_ADDR_EXP 59
8270: PUSH
8271: LD_INT 1
8273: ST_TO_ADDR
// if p3 = 24 then
8274: LD_VAR 0 3
8278: PUSH
8279: LD_INT 24
8281: EQUAL
8282: IFFALSE 8292
// sShovel := true ;
8284: LD_ADDR_EXP 60
8288: PUSH
8289: LD_INT 1
8291: ST_TO_ADDR
// if p3 = 25 then
8292: LD_VAR 0 3
8296: PUSH
8297: LD_INT 25
8299: EQUAL
8300: IFFALSE 8310
// sSheik := true ;
8302: LD_ADDR_EXP 61
8306: PUSH
8307: LD_INT 1
8309: ST_TO_ADDR
// if p3 = 26 then
8310: LD_VAR 0 3
8314: PUSH
8315: LD_INT 26
8317: EQUAL
8318: IFFALSE 8328
// sEarthquake := true ;
8320: LD_ADDR_EXP 63
8324: PUSH
8325: LD_INT 1
8327: ST_TO_ADDR
// if p3 = 27 then
8328: LD_VAR 0 3
8332: PUSH
8333: LD_INT 27
8335: EQUAL
8336: IFFALSE 8346
// sAI := true ;
8338: LD_ADDR_EXP 64
8342: PUSH
8343: LD_INT 1
8345: ST_TO_ADDR
// if p3 = 28 then
8346: LD_VAR 0 3
8350: PUSH
8351: LD_INT 28
8353: EQUAL
8354: IFFALSE 8364
// sCargo := true ;
8356: LD_ADDR_EXP 67
8360: PUSH
8361: LD_INT 1
8363: ST_TO_ADDR
// if p3 = 29 then
8364: LD_VAR 0 3
8368: PUSH
8369: LD_INT 29
8371: EQUAL
8372: IFFALSE 8382
// sDLaser := true ;
8374: LD_ADDR_EXP 68
8378: PUSH
8379: LD_INT 1
8381: ST_TO_ADDR
// if p3 = 30 then
8382: LD_VAR 0 3
8386: PUSH
8387: LD_INT 30
8389: EQUAL
8390: IFFALSE 8400
// sExchange := true ;
8392: LD_ADDR_EXP 69
8396: PUSH
8397: LD_INT 1
8399: ST_TO_ADDR
// if p3 = 31 then
8400: LD_VAR 0 3
8404: PUSH
8405: LD_INT 31
8407: EQUAL
8408: IFFALSE 8418
// sFac := true ;
8410: LD_ADDR_EXP 70
8414: PUSH
8415: LD_INT 1
8417: ST_TO_ADDR
// if p3 = 32 then
8418: LD_VAR 0 3
8422: PUSH
8423: LD_INT 32
8425: EQUAL
8426: IFFALSE 8436
// sPower := true ;
8428: LD_ADDR_EXP 71
8432: PUSH
8433: LD_INT 1
8435: ST_TO_ADDR
// if p3 = 33 then
8436: LD_VAR 0 3
8440: PUSH
8441: LD_INT 33
8443: EQUAL
8444: IFFALSE 8454
// sRandom := true ;
8446: LD_ADDR_EXP 72
8450: PUSH
8451: LD_INT 1
8453: ST_TO_ADDR
// if p3 = 34 then
8454: LD_VAR 0 3
8458: PUSH
8459: LD_INT 34
8461: EQUAL
8462: IFFALSE 8472
// sShield := true ;
8464: LD_ADDR_EXP 73
8468: PUSH
8469: LD_INT 1
8471: ST_TO_ADDR
// if p3 = 35 then
8472: LD_VAR 0 3
8476: PUSH
8477: LD_INT 35
8479: EQUAL
8480: IFFALSE 8490
// sTime := true ;
8482: LD_ADDR_EXP 74
8486: PUSH
8487: LD_INT 1
8489: ST_TO_ADDR
// if p3 = 36 then
8490: LD_VAR 0 3
8494: PUSH
8495: LD_INT 36
8497: EQUAL
8498: IFFALSE 8508
// sTools := true ;
8500: LD_ADDR_EXP 75
8504: PUSH
8505: LD_INT 1
8507: ST_TO_ADDR
// if p3 = 101 then
8508: LD_VAR 0 3
8512: PUSH
8513: LD_INT 101
8515: EQUAL
8516: IFFALSE 8526
// sSold := true ;
8518: LD_ADDR_EXP 40
8522: PUSH
8523: LD_INT 1
8525: ST_TO_ADDR
// if p3 = 102 then
8526: LD_VAR 0 3
8530: PUSH
8531: LD_INT 102
8533: EQUAL
8534: IFFALSE 8544
// sDiff := true ;
8536: LD_ADDR_EXP 41
8540: PUSH
8541: LD_INT 1
8543: ST_TO_ADDR
// if p3 = 103 then
8544: LD_VAR 0 3
8548: PUSH
8549: LD_INT 103
8551: EQUAL
8552: IFFALSE 8562
// sFog := true ;
8554: LD_ADDR_EXP 44
8558: PUSH
8559: LD_INT 1
8561: ST_TO_ADDR
// if p3 = 104 then
8562: LD_VAR 0 3
8566: PUSH
8567: LD_INT 104
8569: EQUAL
8570: IFFALSE 8580
// sReset := true ;
8572: LD_ADDR_EXP 45
8576: PUSH
8577: LD_INT 1
8579: ST_TO_ADDR
// if p3 = 105 then
8580: LD_VAR 0 3
8584: PUSH
8585: LD_INT 105
8587: EQUAL
8588: IFFALSE 8598
// sSun := true ;
8590: LD_ADDR_EXP 46
8594: PUSH
8595: LD_INT 1
8597: ST_TO_ADDR
// if p3 = 106 then
8598: LD_VAR 0 3
8602: PUSH
8603: LD_INT 106
8605: EQUAL
8606: IFFALSE 8616
// sTiger := true ;
8608: LD_ADDR_EXP 42
8612: PUSH
8613: LD_INT 1
8615: ST_TO_ADDR
// if p3 = 107 then
8616: LD_VAR 0 3
8620: PUSH
8621: LD_INT 107
8623: EQUAL
8624: IFFALSE 8634
// sBomb := true ;
8626: LD_ADDR_EXP 43
8630: PUSH
8631: LD_INT 1
8633: ST_TO_ADDR
// if p3 = 108 then
8634: LD_VAR 0 3
8638: PUSH
8639: LD_INT 108
8641: EQUAL
8642: IFFALSE 8652
// sWound := true ;
8644: LD_ADDR_EXP 51
8648: PUSH
8649: LD_INT 1
8651: ST_TO_ADDR
// if p3 = 109 then
8652: LD_VAR 0 3
8656: PUSH
8657: LD_INT 109
8659: EQUAL
8660: IFFALSE 8670
// sBetray := true ;
8662: LD_ADDR_EXP 55
8666: PUSH
8667: LD_INT 1
8669: ST_TO_ADDR
// if p3 = 110 then
8670: LD_VAR 0 3
8674: PUSH
8675: LD_INT 110
8677: EQUAL
8678: IFFALSE 8688
// sContamin := true ;
8680: LD_ADDR_EXP 56
8684: PUSH
8685: LD_INT 1
8687: ST_TO_ADDR
// if p3 = 111 then
8688: LD_VAR 0 3
8692: PUSH
8693: LD_INT 111
8695: EQUAL
8696: IFFALSE 8706
// sOil := true ;
8698: LD_ADDR_EXP 58
8702: PUSH
8703: LD_INT 1
8705: ST_TO_ADDR
// if p3 = 112 then
8706: LD_VAR 0 3
8710: PUSH
8711: LD_INT 112
8713: EQUAL
8714: IFFALSE 8724
// sStu := true ;
8716: LD_ADDR_EXP 62
8720: PUSH
8721: LD_INT 1
8723: ST_TO_ADDR
// if p3 = 113 then
8724: LD_VAR 0 3
8728: PUSH
8729: LD_INT 113
8731: EQUAL
8732: IFFALSE 8742
// sBazooka := true ;
8734: LD_ADDR_EXP 65
8738: PUSH
8739: LD_INT 1
8741: ST_TO_ADDR
// if p3 = 114 then
8742: LD_VAR 0 3
8746: PUSH
8747: LD_INT 114
8749: EQUAL
8750: IFFALSE 8760
// sMortar := true ;
8752: LD_ADDR_EXP 66
8756: PUSH
8757: LD_INT 1
8759: ST_TO_ADDR
// if p3 = 115 then
8760: LD_VAR 0 3
8764: PUSH
8765: LD_INT 115
8767: EQUAL
8768: IFFALSE 8778
// sRanger := true ;
8770: LD_ADDR_EXP 76
8774: PUSH
8775: LD_INT 1
8777: ST_TO_ADDR
// if p3 = 116 then
8778: LD_VAR 0 3
8782: PUSH
8783: LD_INT 116
8785: EQUAL
8786: IFFALSE 8796
// sComputer := true ;
8788: LD_ADDR_EXP 77
8792: PUSH
8793: LD_INT 1
8795: ST_TO_ADDR
// if p3 = 117 then
8796: LD_VAR 0 3
8800: PUSH
8801: LD_INT 117
8803: EQUAL
8804: IFFALSE 8814
// s30 := true ;
8806: LD_ADDR_EXP 78
8810: PUSH
8811: LD_INT 1
8813: ST_TO_ADDR
// if p3 = 118 then
8814: LD_VAR 0 3
8818: PUSH
8819: LD_INT 118
8821: EQUAL
8822: IFFALSE 8832
// s60 := true ;
8824: LD_ADDR_EXP 79
8828: PUSH
8829: LD_INT 1
8831: ST_TO_ADDR
// end ; if p2 = hack_mode then
8832: LD_VAR 0 2
8836: PUSH
8837: LD_INT 101
8839: EQUAL
8840: IFFALSE 8968
// begin case p3 of 1 :
8842: LD_VAR 0 3
8846: PUSH
8847: LD_INT 1
8849: DOUBLE
8850: EQUAL
8851: IFTRUE 8855
8853: GO 8862
8855: POP
// hHackUnlimitedResources ; 2 :
8856: CALL 21115 0 0
8860: GO 8968
8862: LD_INT 2
8864: DOUBLE
8865: EQUAL
8866: IFTRUE 8870
8868: GO 8877
8870: POP
// hHackSetLevel10 ; 3 :
8871: CALL 21248 0 0
8875: GO 8968
8877: LD_INT 3
8879: DOUBLE
8880: EQUAL
8881: IFTRUE 8885
8883: GO 8892
8885: POP
// hHackSetLevel10YourUnits ; 4 :
8886: CALL 21333 0 0
8890: GO 8968
8892: LD_INT 4
8894: DOUBLE
8895: EQUAL
8896: IFTRUE 8900
8898: GO 8907
8900: POP
// hHackInvincible ; 5 :
8901: CALL 21781 0 0
8905: GO 8968
8907: LD_INT 5
8909: DOUBLE
8910: EQUAL
8911: IFTRUE 8915
8913: GO 8922
8915: POP
// hHackInvisible ; 6 :
8916: CALL 21892 0 0
8920: GO 8968
8922: LD_INT 6
8924: DOUBLE
8925: EQUAL
8926: IFTRUE 8930
8928: GO 8937
8930: POP
// hHackChangeYourSide ; 7 :
8931: CALL 21949 0 0
8935: GO 8968
8937: LD_INT 7
8939: DOUBLE
8940: EQUAL
8941: IFTRUE 8945
8943: GO 8952
8945: POP
// hHackChangeUnitSide ; 8 :
8946: CALL 21991 0 0
8950: GO 8968
8952: LD_INT 8
8954: DOUBLE
8955: EQUAL
8956: IFTRUE 8960
8958: GO 8967
8960: POP
// hHackFog ; end ;
8961: CALL 22092 0 0
8965: GO 8968
8967: POP
// end ; if p2 = game_save_mode then
8968: LD_VAR 0 2
8972: PUSH
8973: LD_INT 102
8975: EQUAL
8976: IFFALSE 9031
// begin if p3 = 1 then
8978: LD_VAR 0 3
8982: PUSH
8983: LD_INT 1
8985: EQUAL
8986: IFFALSE 8998
// globalGameSaveCounter := p4 ;
8988: LD_ADDR_EXP 22
8992: PUSH
8993: LD_VAR 0 4
8997: ST_TO_ADDR
// if p3 = 2 and globalGameSaveCounter then
8998: LD_VAR 0 3
9002: PUSH
9003: LD_INT 2
9005: EQUAL
9006: PUSH
9007: LD_EXP 22
9011: AND
9012: IFFALSE 9031
// ToLua ( setGameSaveCounter( & globalGameSaveCounter & ) ) ;
9014: LD_STRING setGameSaveCounter(
9016: PUSH
9017: LD_EXP 22
9021: STR
9022: PUSH
9023: LD_STRING )
9025: STR
9026: PPUSH
9027: CALL_OW 559
// end ; end ;
9031: LD_VAR 0 7
9035: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; function InitStreamMode ; begin
9036: LD_INT 0
9038: PPUSH
// streamModeActive := false ;
9039: LD_ADDR_EXP 23
9043: PUSH
9044: LD_INT 0
9046: ST_TO_ADDR
// normalCounter := 36 ;
9047: LD_ADDR_EXP 24
9051: PUSH
9052: LD_INT 36
9054: ST_TO_ADDR
// hardcoreCounter := 18 ;
9055: LD_ADDR_EXP 25
9059: PUSH
9060: LD_INT 18
9062: ST_TO_ADDR
// sRocket := false ;
9063: LD_ADDR_EXP 28
9067: PUSH
9068: LD_INT 0
9070: ST_TO_ADDR
// sSpeed := false ;
9071: LD_ADDR_EXP 27
9075: PUSH
9076: LD_INT 0
9078: ST_TO_ADDR
// sEngine := false ;
9079: LD_ADDR_EXP 29
9083: PUSH
9084: LD_INT 0
9086: ST_TO_ADDR
// sSpec := false ;
9087: LD_ADDR_EXP 26
9091: PUSH
9092: LD_INT 0
9094: ST_TO_ADDR
// sLevel := false ;
9095: LD_ADDR_EXP 30
9099: PUSH
9100: LD_INT 0
9102: ST_TO_ADDR
// sArmoury := false ;
9103: LD_ADDR_EXP 31
9107: PUSH
9108: LD_INT 0
9110: ST_TO_ADDR
// sRadar := false ;
9111: LD_ADDR_EXP 32
9115: PUSH
9116: LD_INT 0
9118: ST_TO_ADDR
// sBunker := false ;
9119: LD_ADDR_EXP 33
9123: PUSH
9124: LD_INT 0
9126: ST_TO_ADDR
// sHack := false ;
9127: LD_ADDR_EXP 34
9131: PUSH
9132: LD_INT 0
9134: ST_TO_ADDR
// sFire := false ;
9135: LD_ADDR_EXP 35
9139: PUSH
9140: LD_INT 0
9142: ST_TO_ADDR
// sRefresh := false ;
9143: LD_ADDR_EXP 36
9147: PUSH
9148: LD_INT 0
9150: ST_TO_ADDR
// sExp := false ;
9151: LD_ADDR_EXP 37
9155: PUSH
9156: LD_INT 0
9158: ST_TO_ADDR
// sDepot := false ;
9159: LD_ADDR_EXP 38
9163: PUSH
9164: LD_INT 0
9166: ST_TO_ADDR
// sFlag := false ;
9167: LD_ADDR_EXP 39
9171: PUSH
9172: LD_INT 0
9174: ST_TO_ADDR
// sKamikadze := false ;
9175: LD_ADDR_EXP 47
9179: PUSH
9180: LD_INT 0
9182: ST_TO_ADDR
// sTroll := false ;
9183: LD_ADDR_EXP 48
9187: PUSH
9188: LD_INT 0
9190: ST_TO_ADDR
// sSlow := false ;
9191: LD_ADDR_EXP 49
9195: PUSH
9196: LD_INT 0
9198: ST_TO_ADDR
// sLack := false ;
9199: LD_ADDR_EXP 50
9203: PUSH
9204: LD_INT 0
9206: ST_TO_ADDR
// sTank := false ;
9207: LD_ADDR_EXP 52
9211: PUSH
9212: LD_INT 0
9214: ST_TO_ADDR
// sRemote := false ;
9215: LD_ADDR_EXP 53
9219: PUSH
9220: LD_INT 0
9222: ST_TO_ADDR
// sPowell := false ;
9223: LD_ADDR_EXP 54
9227: PUSH
9228: LD_INT 0
9230: ST_TO_ADDR
// sTeleport := false ;
9231: LD_ADDR_EXP 57
9235: PUSH
9236: LD_INT 0
9238: ST_TO_ADDR
// sOilTower := false ;
9239: LD_ADDR_EXP 59
9243: PUSH
9244: LD_INT 0
9246: ST_TO_ADDR
// sShovel := false ;
9247: LD_ADDR_EXP 60
9251: PUSH
9252: LD_INT 0
9254: ST_TO_ADDR
// sSheik := false ;
9255: LD_ADDR_EXP 61
9259: PUSH
9260: LD_INT 0
9262: ST_TO_ADDR
// sEarthquake := false ;
9263: LD_ADDR_EXP 63
9267: PUSH
9268: LD_INT 0
9270: ST_TO_ADDR
// sAI := false ;
9271: LD_ADDR_EXP 64
9275: PUSH
9276: LD_INT 0
9278: ST_TO_ADDR
// sCargo := false ;
9279: LD_ADDR_EXP 67
9283: PUSH
9284: LD_INT 0
9286: ST_TO_ADDR
// sDLaser := false ;
9287: LD_ADDR_EXP 68
9291: PUSH
9292: LD_INT 0
9294: ST_TO_ADDR
// sExchange := false ;
9295: LD_ADDR_EXP 69
9299: PUSH
9300: LD_INT 0
9302: ST_TO_ADDR
// sFac := false ;
9303: LD_ADDR_EXP 70
9307: PUSH
9308: LD_INT 0
9310: ST_TO_ADDR
// sPower := false ;
9311: LD_ADDR_EXP 71
9315: PUSH
9316: LD_INT 0
9318: ST_TO_ADDR
// sRandom := false ;
9319: LD_ADDR_EXP 72
9323: PUSH
9324: LD_INT 0
9326: ST_TO_ADDR
// sShield := false ;
9327: LD_ADDR_EXP 73
9331: PUSH
9332: LD_INT 0
9334: ST_TO_ADDR
// sTime := false ;
9335: LD_ADDR_EXP 74
9339: PUSH
9340: LD_INT 0
9342: ST_TO_ADDR
// sTools := false ;
9343: LD_ADDR_EXP 75
9347: PUSH
9348: LD_INT 0
9350: ST_TO_ADDR
// sSold := false ;
9351: LD_ADDR_EXP 40
9355: PUSH
9356: LD_INT 0
9358: ST_TO_ADDR
// sDiff := false ;
9359: LD_ADDR_EXP 41
9363: PUSH
9364: LD_INT 0
9366: ST_TO_ADDR
// sFog := false ;
9367: LD_ADDR_EXP 44
9371: PUSH
9372: LD_INT 0
9374: ST_TO_ADDR
// sReset := false ;
9375: LD_ADDR_EXP 45
9379: PUSH
9380: LD_INT 0
9382: ST_TO_ADDR
// sSun := false ;
9383: LD_ADDR_EXP 46
9387: PUSH
9388: LD_INT 0
9390: ST_TO_ADDR
// sTiger := false ;
9391: LD_ADDR_EXP 42
9395: PUSH
9396: LD_INT 0
9398: ST_TO_ADDR
// sBomb := false ;
9399: LD_ADDR_EXP 43
9403: PUSH
9404: LD_INT 0
9406: ST_TO_ADDR
// sWound := false ;
9407: LD_ADDR_EXP 51
9411: PUSH
9412: LD_INT 0
9414: ST_TO_ADDR
// sBetray := false ;
9415: LD_ADDR_EXP 55
9419: PUSH
9420: LD_INT 0
9422: ST_TO_ADDR
// sContamin := false ;
9423: LD_ADDR_EXP 56
9427: PUSH
9428: LD_INT 0
9430: ST_TO_ADDR
// sOil := false ;
9431: LD_ADDR_EXP 58
9435: PUSH
9436: LD_INT 0
9438: ST_TO_ADDR
// sStu := false ;
9439: LD_ADDR_EXP 62
9443: PUSH
9444: LD_INT 0
9446: ST_TO_ADDR
// sBazooka := false ;
9447: LD_ADDR_EXP 65
9451: PUSH
9452: LD_INT 0
9454: ST_TO_ADDR
// sMortar := false ;
9455: LD_ADDR_EXP 66
9459: PUSH
9460: LD_INT 0
9462: ST_TO_ADDR
// sRanger := false ;
9463: LD_ADDR_EXP 76
9467: PUSH
9468: LD_INT 0
9470: ST_TO_ADDR
// sComputer := false ;
9471: LD_ADDR_EXP 77
9475: PUSH
9476: LD_INT 0
9478: ST_TO_ADDR
// s30 := false ;
9479: LD_ADDR_EXP 78
9483: PUSH
9484: LD_INT 0
9486: ST_TO_ADDR
// s60 := false ;
9487: LD_ADDR_EXP 79
9491: PUSH
9492: LD_INT 0
9494: ST_TO_ADDR
// end ;
9495: LD_VAR 0 1
9499: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
9500: LD_INT 0
9502: PPUSH
9503: PPUSH
9504: PPUSH
9505: PPUSH
9506: PPUSH
9507: PPUSH
9508: PPUSH
// result := [ ] ;
9509: LD_ADDR_VAR 0 2
9513: PUSH
9514: EMPTY
9515: ST_TO_ADDR
// if campaign_id = 1 then
9516: LD_OWVAR 69
9520: PUSH
9521: LD_INT 1
9523: EQUAL
9524: IFFALSE 12690
// begin case mission_number of 1 :
9526: LD_OWVAR 70
9530: PUSH
9531: LD_INT 1
9533: DOUBLE
9534: EQUAL
9535: IFTRUE 9539
9537: GO 9615
9539: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
9540: LD_ADDR_VAR 0 2
9544: PUSH
9545: LD_INT 2
9547: PUSH
9548: LD_INT 4
9550: PUSH
9551: LD_INT 11
9553: PUSH
9554: LD_INT 12
9556: PUSH
9557: LD_INT 15
9559: PUSH
9560: LD_INT 16
9562: PUSH
9563: LD_INT 22
9565: PUSH
9566: LD_INT 23
9568: PUSH
9569: LD_INT 26
9571: PUSH
9572: EMPTY
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: PUSH
9583: LD_INT 101
9585: PUSH
9586: LD_INT 102
9588: PUSH
9589: LD_INT 106
9591: PUSH
9592: LD_INT 116
9594: PUSH
9595: LD_INT 117
9597: PUSH
9598: LD_INT 118
9600: PUSH
9601: EMPTY
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: PUSH
9609: EMPTY
9610: LIST
9611: LIST
9612: ST_TO_ADDR
9613: GO 12688
9615: LD_INT 2
9617: DOUBLE
9618: EQUAL
9619: IFTRUE 9623
9621: GO 9707
9623: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
9624: LD_ADDR_VAR 0 2
9628: PUSH
9629: LD_INT 2
9631: PUSH
9632: LD_INT 4
9634: PUSH
9635: LD_INT 11
9637: PUSH
9638: LD_INT 12
9640: PUSH
9641: LD_INT 15
9643: PUSH
9644: LD_INT 16
9646: PUSH
9647: LD_INT 22
9649: PUSH
9650: LD_INT 23
9652: PUSH
9653: LD_INT 26
9655: PUSH
9656: EMPTY
9657: LIST
9658: LIST
9659: LIST
9660: LIST
9661: LIST
9662: LIST
9663: LIST
9664: LIST
9665: LIST
9666: PUSH
9667: LD_INT 101
9669: PUSH
9670: LD_INT 102
9672: PUSH
9673: LD_INT 105
9675: PUSH
9676: LD_INT 106
9678: PUSH
9679: LD_INT 108
9681: PUSH
9682: LD_INT 116
9684: PUSH
9685: LD_INT 117
9687: PUSH
9688: LD_INT 118
9690: PUSH
9691: EMPTY
9692: LIST
9693: LIST
9694: LIST
9695: LIST
9696: LIST
9697: LIST
9698: LIST
9699: LIST
9700: PUSH
9701: EMPTY
9702: LIST
9703: LIST
9704: ST_TO_ADDR
9705: GO 12688
9707: LD_INT 3
9709: DOUBLE
9710: EQUAL
9711: IFTRUE 9715
9713: GO 9803
9715: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
9716: LD_ADDR_VAR 0 2
9720: PUSH
9721: LD_INT 2
9723: PUSH
9724: LD_INT 4
9726: PUSH
9727: LD_INT 5
9729: PUSH
9730: LD_INT 11
9732: PUSH
9733: LD_INT 12
9735: PUSH
9736: LD_INT 15
9738: PUSH
9739: LD_INT 16
9741: PUSH
9742: LD_INT 22
9744: PUSH
9745: LD_INT 26
9747: PUSH
9748: LD_INT 36
9750: PUSH
9751: EMPTY
9752: LIST
9753: LIST
9754: LIST
9755: LIST
9756: LIST
9757: LIST
9758: LIST
9759: LIST
9760: LIST
9761: LIST
9762: PUSH
9763: LD_INT 101
9765: PUSH
9766: LD_INT 102
9768: PUSH
9769: LD_INT 105
9771: PUSH
9772: LD_INT 106
9774: PUSH
9775: LD_INT 108
9777: PUSH
9778: LD_INT 116
9780: PUSH
9781: LD_INT 117
9783: PUSH
9784: LD_INT 118
9786: PUSH
9787: EMPTY
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: PUSH
9797: EMPTY
9798: LIST
9799: LIST
9800: ST_TO_ADDR
9801: GO 12688
9803: LD_INT 4
9805: DOUBLE
9806: EQUAL
9807: IFTRUE 9811
9809: GO 9907
9811: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
9812: LD_ADDR_VAR 0 2
9816: PUSH
9817: LD_INT 2
9819: PUSH
9820: LD_INT 4
9822: PUSH
9823: LD_INT 5
9825: PUSH
9826: LD_INT 8
9828: PUSH
9829: LD_INT 11
9831: PUSH
9832: LD_INT 12
9834: PUSH
9835: LD_INT 15
9837: PUSH
9838: LD_INT 16
9840: PUSH
9841: LD_INT 22
9843: PUSH
9844: LD_INT 23
9846: PUSH
9847: LD_INT 26
9849: PUSH
9850: LD_INT 36
9852: PUSH
9853: EMPTY
9854: LIST
9855: LIST
9856: LIST
9857: LIST
9858: LIST
9859: LIST
9860: LIST
9861: LIST
9862: LIST
9863: LIST
9864: LIST
9865: LIST
9866: PUSH
9867: LD_INT 101
9869: PUSH
9870: LD_INT 102
9872: PUSH
9873: LD_INT 105
9875: PUSH
9876: LD_INT 106
9878: PUSH
9879: LD_INT 108
9881: PUSH
9882: LD_INT 116
9884: PUSH
9885: LD_INT 117
9887: PUSH
9888: LD_INT 118
9890: PUSH
9891: EMPTY
9892: LIST
9893: LIST
9894: LIST
9895: LIST
9896: LIST
9897: LIST
9898: LIST
9899: LIST
9900: PUSH
9901: EMPTY
9902: LIST
9903: LIST
9904: ST_TO_ADDR
9905: GO 12688
9907: LD_INT 5
9909: DOUBLE
9910: EQUAL
9911: IFTRUE 9915
9913: GO 10027
9915: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
9916: LD_ADDR_VAR 0 2
9920: PUSH
9921: LD_INT 2
9923: PUSH
9924: LD_INT 4
9926: PUSH
9927: LD_INT 5
9929: PUSH
9930: LD_INT 6
9932: PUSH
9933: LD_INT 8
9935: PUSH
9936: LD_INT 11
9938: PUSH
9939: LD_INT 12
9941: PUSH
9942: LD_INT 15
9944: PUSH
9945: LD_INT 16
9947: PUSH
9948: LD_INT 22
9950: PUSH
9951: LD_INT 23
9953: PUSH
9954: LD_INT 25
9956: PUSH
9957: LD_INT 26
9959: PUSH
9960: LD_INT 36
9962: PUSH
9963: EMPTY
9964: LIST
9965: LIST
9966: LIST
9967: LIST
9968: LIST
9969: LIST
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: LIST
9976: LIST
9977: LIST
9978: PUSH
9979: LD_INT 101
9981: PUSH
9982: LD_INT 102
9984: PUSH
9985: LD_INT 105
9987: PUSH
9988: LD_INT 106
9990: PUSH
9991: LD_INT 108
9993: PUSH
9994: LD_INT 109
9996: PUSH
9997: LD_INT 112
9999: PUSH
10000: LD_INT 116
10002: PUSH
10003: LD_INT 117
10005: PUSH
10006: LD_INT 118
10008: PUSH
10009: EMPTY
10010: LIST
10011: LIST
10012: LIST
10013: LIST
10014: LIST
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: PUSH
10021: EMPTY
10022: LIST
10023: LIST
10024: ST_TO_ADDR
10025: GO 12688
10027: LD_INT 6
10029: DOUBLE
10030: EQUAL
10031: IFTRUE 10035
10033: GO 10167
10035: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
10036: LD_ADDR_VAR 0 2
10040: PUSH
10041: LD_INT 2
10043: PUSH
10044: LD_INT 4
10046: PUSH
10047: LD_INT 5
10049: PUSH
10050: LD_INT 6
10052: PUSH
10053: LD_INT 8
10055: PUSH
10056: LD_INT 11
10058: PUSH
10059: LD_INT 12
10061: PUSH
10062: LD_INT 15
10064: PUSH
10065: LD_INT 16
10067: PUSH
10068: LD_INT 20
10070: PUSH
10071: LD_INT 21
10073: PUSH
10074: LD_INT 22
10076: PUSH
10077: LD_INT 23
10079: PUSH
10080: LD_INT 25
10082: PUSH
10083: LD_INT 26
10085: PUSH
10086: LD_INT 30
10088: PUSH
10089: LD_INT 31
10091: PUSH
10092: LD_INT 32
10094: PUSH
10095: LD_INT 36
10097: PUSH
10098: EMPTY
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: LIST
10111: LIST
10112: LIST
10113: LIST
10114: LIST
10115: LIST
10116: LIST
10117: LIST
10118: PUSH
10119: LD_INT 101
10121: PUSH
10122: LD_INT 102
10124: PUSH
10125: LD_INT 105
10127: PUSH
10128: LD_INT 106
10130: PUSH
10131: LD_INT 108
10133: PUSH
10134: LD_INT 109
10136: PUSH
10137: LD_INT 112
10139: PUSH
10140: LD_INT 116
10142: PUSH
10143: LD_INT 117
10145: PUSH
10146: LD_INT 118
10148: PUSH
10149: EMPTY
10150: LIST
10151: LIST
10152: LIST
10153: LIST
10154: LIST
10155: LIST
10156: LIST
10157: LIST
10158: LIST
10159: LIST
10160: PUSH
10161: EMPTY
10162: LIST
10163: LIST
10164: ST_TO_ADDR
10165: GO 12688
10167: LD_INT 7
10169: DOUBLE
10170: EQUAL
10171: IFTRUE 10175
10173: GO 10287
10175: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
10176: LD_ADDR_VAR 0 2
10180: PUSH
10181: LD_INT 2
10183: PUSH
10184: LD_INT 4
10186: PUSH
10187: LD_INT 5
10189: PUSH
10190: LD_INT 7
10192: PUSH
10193: LD_INT 11
10195: PUSH
10196: LD_INT 12
10198: PUSH
10199: LD_INT 15
10201: PUSH
10202: LD_INT 16
10204: PUSH
10205: LD_INT 20
10207: PUSH
10208: LD_INT 21
10210: PUSH
10211: LD_INT 22
10213: PUSH
10214: LD_INT 23
10216: PUSH
10217: LD_INT 25
10219: PUSH
10220: LD_INT 26
10222: PUSH
10223: EMPTY
10224: LIST
10225: LIST
10226: LIST
10227: LIST
10228: LIST
10229: LIST
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: LIST
10236: LIST
10237: LIST
10238: PUSH
10239: LD_INT 101
10241: PUSH
10242: LD_INT 102
10244: PUSH
10245: LD_INT 103
10247: PUSH
10248: LD_INT 105
10250: PUSH
10251: LD_INT 106
10253: PUSH
10254: LD_INT 108
10256: PUSH
10257: LD_INT 112
10259: PUSH
10260: LD_INT 116
10262: PUSH
10263: LD_INT 117
10265: PUSH
10266: LD_INT 118
10268: PUSH
10269: EMPTY
10270: LIST
10271: LIST
10272: LIST
10273: LIST
10274: LIST
10275: LIST
10276: LIST
10277: LIST
10278: LIST
10279: LIST
10280: PUSH
10281: EMPTY
10282: LIST
10283: LIST
10284: ST_TO_ADDR
10285: GO 12688
10287: LD_INT 8
10289: DOUBLE
10290: EQUAL
10291: IFTRUE 10295
10293: GO 10435
10295: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
10296: LD_ADDR_VAR 0 2
10300: PUSH
10301: LD_INT 2
10303: PUSH
10304: LD_INT 4
10306: PUSH
10307: LD_INT 5
10309: PUSH
10310: LD_INT 6
10312: PUSH
10313: LD_INT 7
10315: PUSH
10316: LD_INT 8
10318: PUSH
10319: LD_INT 11
10321: PUSH
10322: LD_INT 12
10324: PUSH
10325: LD_INT 15
10327: PUSH
10328: LD_INT 16
10330: PUSH
10331: LD_INT 20
10333: PUSH
10334: LD_INT 21
10336: PUSH
10337: LD_INT 22
10339: PUSH
10340: LD_INT 23
10342: PUSH
10343: LD_INT 25
10345: PUSH
10346: LD_INT 26
10348: PUSH
10349: LD_INT 30
10351: PUSH
10352: LD_INT 31
10354: PUSH
10355: LD_INT 32
10357: PUSH
10358: LD_INT 36
10360: PUSH
10361: EMPTY
10362: LIST
10363: LIST
10364: LIST
10365: LIST
10366: LIST
10367: LIST
10368: LIST
10369: LIST
10370: LIST
10371: LIST
10372: LIST
10373: LIST
10374: LIST
10375: LIST
10376: LIST
10377: LIST
10378: LIST
10379: LIST
10380: LIST
10381: LIST
10382: PUSH
10383: LD_INT 101
10385: PUSH
10386: LD_INT 102
10388: PUSH
10389: LD_INT 103
10391: PUSH
10392: LD_INT 105
10394: PUSH
10395: LD_INT 106
10397: PUSH
10398: LD_INT 108
10400: PUSH
10401: LD_INT 109
10403: PUSH
10404: LD_INT 112
10406: PUSH
10407: LD_INT 116
10409: PUSH
10410: LD_INT 117
10412: PUSH
10413: LD_INT 118
10415: PUSH
10416: EMPTY
10417: LIST
10418: LIST
10419: LIST
10420: LIST
10421: LIST
10422: LIST
10423: LIST
10424: LIST
10425: LIST
10426: LIST
10427: LIST
10428: PUSH
10429: EMPTY
10430: LIST
10431: LIST
10432: ST_TO_ADDR
10433: GO 12688
10435: LD_INT 9
10437: DOUBLE
10438: EQUAL
10439: IFTRUE 10443
10441: GO 10591
10443: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
10444: LD_ADDR_VAR 0 2
10448: PUSH
10449: LD_INT 2
10451: PUSH
10452: LD_INT 4
10454: PUSH
10455: LD_INT 5
10457: PUSH
10458: LD_INT 6
10460: PUSH
10461: LD_INT 7
10463: PUSH
10464: LD_INT 8
10466: PUSH
10467: LD_INT 11
10469: PUSH
10470: LD_INT 12
10472: PUSH
10473: LD_INT 15
10475: PUSH
10476: LD_INT 16
10478: PUSH
10479: LD_INT 20
10481: PUSH
10482: LD_INT 21
10484: PUSH
10485: LD_INT 22
10487: PUSH
10488: LD_INT 23
10490: PUSH
10491: LD_INT 25
10493: PUSH
10494: LD_INT 26
10496: PUSH
10497: LD_INT 28
10499: PUSH
10500: LD_INT 30
10502: PUSH
10503: LD_INT 31
10505: PUSH
10506: LD_INT 32
10508: PUSH
10509: LD_INT 36
10511: PUSH
10512: EMPTY
10513: LIST
10514: LIST
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: LIST
10527: LIST
10528: LIST
10529: LIST
10530: LIST
10531: LIST
10532: LIST
10533: LIST
10534: PUSH
10535: LD_INT 101
10537: PUSH
10538: LD_INT 102
10540: PUSH
10541: LD_INT 103
10543: PUSH
10544: LD_INT 105
10546: PUSH
10547: LD_INT 106
10549: PUSH
10550: LD_INT 108
10552: PUSH
10553: LD_INT 109
10555: PUSH
10556: LD_INT 112
10558: PUSH
10559: LD_INT 114
10561: PUSH
10562: LD_INT 116
10564: PUSH
10565: LD_INT 117
10567: PUSH
10568: LD_INT 118
10570: PUSH
10571: EMPTY
10572: LIST
10573: LIST
10574: LIST
10575: LIST
10576: LIST
10577: LIST
10578: LIST
10579: LIST
10580: LIST
10581: LIST
10582: LIST
10583: LIST
10584: PUSH
10585: EMPTY
10586: LIST
10587: LIST
10588: ST_TO_ADDR
10589: GO 12688
10591: LD_INT 10
10593: DOUBLE
10594: EQUAL
10595: IFTRUE 10599
10597: GO 10795
10599: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
10600: LD_ADDR_VAR 0 2
10604: PUSH
10605: LD_INT 2
10607: PUSH
10608: LD_INT 4
10610: PUSH
10611: LD_INT 5
10613: PUSH
10614: LD_INT 6
10616: PUSH
10617: LD_INT 7
10619: PUSH
10620: LD_INT 8
10622: PUSH
10623: LD_INT 9
10625: PUSH
10626: LD_INT 10
10628: PUSH
10629: LD_INT 11
10631: PUSH
10632: LD_INT 12
10634: PUSH
10635: LD_INT 13
10637: PUSH
10638: LD_INT 14
10640: PUSH
10641: LD_INT 15
10643: PUSH
10644: LD_INT 16
10646: PUSH
10647: LD_INT 17
10649: PUSH
10650: LD_INT 18
10652: PUSH
10653: LD_INT 19
10655: PUSH
10656: LD_INT 20
10658: PUSH
10659: LD_INT 21
10661: PUSH
10662: LD_INT 22
10664: PUSH
10665: LD_INT 23
10667: PUSH
10668: LD_INT 24
10670: PUSH
10671: LD_INT 25
10673: PUSH
10674: LD_INT 26
10676: PUSH
10677: LD_INT 28
10679: PUSH
10680: LD_INT 30
10682: PUSH
10683: LD_INT 31
10685: PUSH
10686: LD_INT 32
10688: PUSH
10689: LD_INT 36
10691: PUSH
10692: EMPTY
10693: LIST
10694: LIST
10695: LIST
10696: LIST
10697: LIST
10698: LIST
10699: LIST
10700: LIST
10701: LIST
10702: LIST
10703: LIST
10704: LIST
10705: LIST
10706: LIST
10707: LIST
10708: LIST
10709: LIST
10710: LIST
10711: LIST
10712: LIST
10713: LIST
10714: LIST
10715: LIST
10716: LIST
10717: LIST
10718: LIST
10719: LIST
10720: LIST
10721: LIST
10722: PUSH
10723: LD_INT 101
10725: PUSH
10726: LD_INT 102
10728: PUSH
10729: LD_INT 103
10731: PUSH
10732: LD_INT 104
10734: PUSH
10735: LD_INT 105
10737: PUSH
10738: LD_INT 106
10740: PUSH
10741: LD_INT 107
10743: PUSH
10744: LD_INT 108
10746: PUSH
10747: LD_INT 109
10749: PUSH
10750: LD_INT 110
10752: PUSH
10753: LD_INT 111
10755: PUSH
10756: LD_INT 112
10758: PUSH
10759: LD_INT 114
10761: PUSH
10762: LD_INT 116
10764: PUSH
10765: LD_INT 117
10767: PUSH
10768: LD_INT 118
10770: PUSH
10771: EMPTY
10772: LIST
10773: LIST
10774: LIST
10775: LIST
10776: LIST
10777: LIST
10778: LIST
10779: LIST
10780: LIST
10781: LIST
10782: LIST
10783: LIST
10784: LIST
10785: LIST
10786: LIST
10787: LIST
10788: PUSH
10789: EMPTY
10790: LIST
10791: LIST
10792: ST_TO_ADDR
10793: GO 12688
10795: LD_INT 11
10797: DOUBLE
10798: EQUAL
10799: IFTRUE 10803
10801: GO 11007
10803: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
10804: LD_ADDR_VAR 0 2
10808: PUSH
10809: LD_INT 2
10811: PUSH
10812: LD_INT 3
10814: PUSH
10815: LD_INT 4
10817: PUSH
10818: LD_INT 5
10820: PUSH
10821: LD_INT 6
10823: PUSH
10824: LD_INT 7
10826: PUSH
10827: LD_INT 8
10829: PUSH
10830: LD_INT 9
10832: PUSH
10833: LD_INT 10
10835: PUSH
10836: LD_INT 11
10838: PUSH
10839: LD_INT 12
10841: PUSH
10842: LD_INT 13
10844: PUSH
10845: LD_INT 14
10847: PUSH
10848: LD_INT 15
10850: PUSH
10851: LD_INT 16
10853: PUSH
10854: LD_INT 17
10856: PUSH
10857: LD_INT 18
10859: PUSH
10860: LD_INT 19
10862: PUSH
10863: LD_INT 20
10865: PUSH
10866: LD_INT 21
10868: PUSH
10869: LD_INT 22
10871: PUSH
10872: LD_INT 23
10874: PUSH
10875: LD_INT 24
10877: PUSH
10878: LD_INT 25
10880: PUSH
10881: LD_INT 26
10883: PUSH
10884: LD_INT 28
10886: PUSH
10887: LD_INT 30
10889: PUSH
10890: LD_INT 31
10892: PUSH
10893: LD_INT 32
10895: PUSH
10896: LD_INT 34
10898: PUSH
10899: LD_INT 36
10901: PUSH
10902: EMPTY
10903: LIST
10904: LIST
10905: LIST
10906: LIST
10907: LIST
10908: LIST
10909: LIST
10910: LIST
10911: LIST
10912: LIST
10913: LIST
10914: LIST
10915: LIST
10916: LIST
10917: LIST
10918: LIST
10919: LIST
10920: LIST
10921: LIST
10922: LIST
10923: LIST
10924: LIST
10925: LIST
10926: LIST
10927: LIST
10928: LIST
10929: LIST
10930: LIST
10931: LIST
10932: LIST
10933: LIST
10934: PUSH
10935: LD_INT 101
10937: PUSH
10938: LD_INT 102
10940: PUSH
10941: LD_INT 103
10943: PUSH
10944: LD_INT 104
10946: PUSH
10947: LD_INT 105
10949: PUSH
10950: LD_INT 106
10952: PUSH
10953: LD_INT 107
10955: PUSH
10956: LD_INT 108
10958: PUSH
10959: LD_INT 109
10961: PUSH
10962: LD_INT 110
10964: PUSH
10965: LD_INT 111
10967: PUSH
10968: LD_INT 112
10970: PUSH
10971: LD_INT 114
10973: PUSH
10974: LD_INT 116
10976: PUSH
10977: LD_INT 117
10979: PUSH
10980: LD_INT 118
10982: PUSH
10983: EMPTY
10984: LIST
10985: LIST
10986: LIST
10987: LIST
10988: LIST
10989: LIST
10990: LIST
10991: LIST
10992: LIST
10993: LIST
10994: LIST
10995: LIST
10996: LIST
10997: LIST
10998: LIST
10999: LIST
11000: PUSH
11001: EMPTY
11002: LIST
11003: LIST
11004: ST_TO_ADDR
11005: GO 12688
11007: LD_INT 12
11009: DOUBLE
11010: EQUAL
11011: IFTRUE 11015
11013: GO 11235
11015: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
11016: LD_ADDR_VAR 0 2
11020: PUSH
11021: LD_INT 1
11023: PUSH
11024: LD_INT 2
11026: PUSH
11027: LD_INT 3
11029: PUSH
11030: LD_INT 4
11032: PUSH
11033: LD_INT 5
11035: PUSH
11036: LD_INT 6
11038: PUSH
11039: LD_INT 7
11041: PUSH
11042: LD_INT 8
11044: PUSH
11045: LD_INT 9
11047: PUSH
11048: LD_INT 10
11050: PUSH
11051: LD_INT 11
11053: PUSH
11054: LD_INT 12
11056: PUSH
11057: LD_INT 13
11059: PUSH
11060: LD_INT 14
11062: PUSH
11063: LD_INT 15
11065: PUSH
11066: LD_INT 16
11068: PUSH
11069: LD_INT 17
11071: PUSH
11072: LD_INT 18
11074: PUSH
11075: LD_INT 19
11077: PUSH
11078: LD_INT 20
11080: PUSH
11081: LD_INT 21
11083: PUSH
11084: LD_INT 22
11086: PUSH
11087: LD_INT 23
11089: PUSH
11090: LD_INT 24
11092: PUSH
11093: LD_INT 25
11095: PUSH
11096: LD_INT 26
11098: PUSH
11099: LD_INT 27
11101: PUSH
11102: LD_INT 28
11104: PUSH
11105: LD_INT 30
11107: PUSH
11108: LD_INT 31
11110: PUSH
11111: LD_INT 32
11113: PUSH
11114: LD_INT 33
11116: PUSH
11117: LD_INT 34
11119: PUSH
11120: LD_INT 36
11122: PUSH
11123: EMPTY
11124: LIST
11125: LIST
11126: LIST
11127: LIST
11128: LIST
11129: LIST
11130: LIST
11131: LIST
11132: LIST
11133: LIST
11134: LIST
11135: LIST
11136: LIST
11137: LIST
11138: LIST
11139: LIST
11140: LIST
11141: LIST
11142: LIST
11143: LIST
11144: LIST
11145: LIST
11146: LIST
11147: LIST
11148: LIST
11149: LIST
11150: LIST
11151: LIST
11152: LIST
11153: LIST
11154: LIST
11155: LIST
11156: LIST
11157: LIST
11158: PUSH
11159: LD_INT 101
11161: PUSH
11162: LD_INT 102
11164: PUSH
11165: LD_INT 103
11167: PUSH
11168: LD_INT 104
11170: PUSH
11171: LD_INT 105
11173: PUSH
11174: LD_INT 106
11176: PUSH
11177: LD_INT 107
11179: PUSH
11180: LD_INT 108
11182: PUSH
11183: LD_INT 109
11185: PUSH
11186: LD_INT 110
11188: PUSH
11189: LD_INT 111
11191: PUSH
11192: LD_INT 112
11194: PUSH
11195: LD_INT 113
11197: PUSH
11198: LD_INT 114
11200: PUSH
11201: LD_INT 116
11203: PUSH
11204: LD_INT 117
11206: PUSH
11207: LD_INT 118
11209: PUSH
11210: EMPTY
11211: LIST
11212: LIST
11213: LIST
11214: LIST
11215: LIST
11216: LIST
11217: LIST
11218: LIST
11219: LIST
11220: LIST
11221: LIST
11222: LIST
11223: LIST
11224: LIST
11225: LIST
11226: LIST
11227: LIST
11228: PUSH
11229: EMPTY
11230: LIST
11231: LIST
11232: ST_TO_ADDR
11233: GO 12688
11235: LD_INT 13
11237: DOUBLE
11238: EQUAL
11239: IFTRUE 11243
11241: GO 11451
11243: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
11244: LD_ADDR_VAR 0 2
11248: PUSH
11249: LD_INT 1
11251: PUSH
11252: LD_INT 2
11254: PUSH
11255: LD_INT 3
11257: PUSH
11258: LD_INT 4
11260: PUSH
11261: LD_INT 5
11263: PUSH
11264: LD_INT 8
11266: PUSH
11267: LD_INT 9
11269: PUSH
11270: LD_INT 10
11272: PUSH
11273: LD_INT 11
11275: PUSH
11276: LD_INT 12
11278: PUSH
11279: LD_INT 14
11281: PUSH
11282: LD_INT 15
11284: PUSH
11285: LD_INT 16
11287: PUSH
11288: LD_INT 17
11290: PUSH
11291: LD_INT 18
11293: PUSH
11294: LD_INT 19
11296: PUSH
11297: LD_INT 20
11299: PUSH
11300: LD_INT 21
11302: PUSH
11303: LD_INT 22
11305: PUSH
11306: LD_INT 23
11308: PUSH
11309: LD_INT 24
11311: PUSH
11312: LD_INT 25
11314: PUSH
11315: LD_INT 26
11317: PUSH
11318: LD_INT 27
11320: PUSH
11321: LD_INT 28
11323: PUSH
11324: LD_INT 30
11326: PUSH
11327: LD_INT 31
11329: PUSH
11330: LD_INT 32
11332: PUSH
11333: LD_INT 33
11335: PUSH
11336: LD_INT 34
11338: PUSH
11339: LD_INT 36
11341: PUSH
11342: EMPTY
11343: LIST
11344: LIST
11345: LIST
11346: LIST
11347: LIST
11348: LIST
11349: LIST
11350: LIST
11351: LIST
11352: LIST
11353: LIST
11354: LIST
11355: LIST
11356: LIST
11357: LIST
11358: LIST
11359: LIST
11360: LIST
11361: LIST
11362: LIST
11363: LIST
11364: LIST
11365: LIST
11366: LIST
11367: LIST
11368: LIST
11369: LIST
11370: LIST
11371: LIST
11372: LIST
11373: LIST
11374: PUSH
11375: LD_INT 101
11377: PUSH
11378: LD_INT 102
11380: PUSH
11381: LD_INT 103
11383: PUSH
11384: LD_INT 104
11386: PUSH
11387: LD_INT 105
11389: PUSH
11390: LD_INT 106
11392: PUSH
11393: LD_INT 107
11395: PUSH
11396: LD_INT 108
11398: PUSH
11399: LD_INT 109
11401: PUSH
11402: LD_INT 110
11404: PUSH
11405: LD_INT 111
11407: PUSH
11408: LD_INT 112
11410: PUSH
11411: LD_INT 113
11413: PUSH
11414: LD_INT 114
11416: PUSH
11417: LD_INT 116
11419: PUSH
11420: LD_INT 117
11422: PUSH
11423: LD_INT 118
11425: PUSH
11426: EMPTY
11427: LIST
11428: LIST
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: PUSH
11445: EMPTY
11446: LIST
11447: LIST
11448: ST_TO_ADDR
11449: GO 12688
11451: LD_INT 14
11453: DOUBLE
11454: EQUAL
11455: IFTRUE 11459
11457: GO 11683
11459: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
11460: LD_ADDR_VAR 0 2
11464: PUSH
11465: LD_INT 1
11467: PUSH
11468: LD_INT 2
11470: PUSH
11471: LD_INT 3
11473: PUSH
11474: LD_INT 4
11476: PUSH
11477: LD_INT 5
11479: PUSH
11480: LD_INT 6
11482: PUSH
11483: LD_INT 7
11485: PUSH
11486: LD_INT 8
11488: PUSH
11489: LD_INT 9
11491: PUSH
11492: LD_INT 10
11494: PUSH
11495: LD_INT 11
11497: PUSH
11498: LD_INT 12
11500: PUSH
11501: LD_INT 13
11503: PUSH
11504: LD_INT 14
11506: PUSH
11507: LD_INT 15
11509: PUSH
11510: LD_INT 16
11512: PUSH
11513: LD_INT 17
11515: PUSH
11516: LD_INT 18
11518: PUSH
11519: LD_INT 19
11521: PUSH
11522: LD_INT 20
11524: PUSH
11525: LD_INT 21
11527: PUSH
11528: LD_INT 22
11530: PUSH
11531: LD_INT 23
11533: PUSH
11534: LD_INT 24
11536: PUSH
11537: LD_INT 25
11539: PUSH
11540: LD_INT 26
11542: PUSH
11543: LD_INT 27
11545: PUSH
11546: LD_INT 28
11548: PUSH
11549: LD_INT 29
11551: PUSH
11552: LD_INT 30
11554: PUSH
11555: LD_INT 31
11557: PUSH
11558: LD_INT 32
11560: PUSH
11561: LD_INT 33
11563: PUSH
11564: LD_INT 34
11566: PUSH
11567: LD_INT 36
11569: PUSH
11570: EMPTY
11571: LIST
11572: LIST
11573: LIST
11574: LIST
11575: LIST
11576: LIST
11577: LIST
11578: LIST
11579: LIST
11580: LIST
11581: LIST
11582: LIST
11583: LIST
11584: LIST
11585: LIST
11586: LIST
11587: LIST
11588: LIST
11589: LIST
11590: LIST
11591: LIST
11592: LIST
11593: LIST
11594: LIST
11595: LIST
11596: LIST
11597: LIST
11598: LIST
11599: LIST
11600: LIST
11601: LIST
11602: LIST
11603: LIST
11604: LIST
11605: LIST
11606: PUSH
11607: LD_INT 101
11609: PUSH
11610: LD_INT 102
11612: PUSH
11613: LD_INT 103
11615: PUSH
11616: LD_INT 104
11618: PUSH
11619: LD_INT 105
11621: PUSH
11622: LD_INT 106
11624: PUSH
11625: LD_INT 107
11627: PUSH
11628: LD_INT 108
11630: PUSH
11631: LD_INT 109
11633: PUSH
11634: LD_INT 110
11636: PUSH
11637: LD_INT 111
11639: PUSH
11640: LD_INT 112
11642: PUSH
11643: LD_INT 113
11645: PUSH
11646: LD_INT 114
11648: PUSH
11649: LD_INT 116
11651: PUSH
11652: LD_INT 117
11654: PUSH
11655: LD_INT 118
11657: PUSH
11658: EMPTY
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: LIST
11667: LIST
11668: LIST
11669: LIST
11670: LIST
11671: LIST
11672: LIST
11673: LIST
11674: LIST
11675: LIST
11676: PUSH
11677: EMPTY
11678: LIST
11679: LIST
11680: ST_TO_ADDR
11681: GO 12688
11683: LD_INT 15
11685: DOUBLE
11686: EQUAL
11687: IFTRUE 11691
11689: GO 11915
11691: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
11692: LD_ADDR_VAR 0 2
11696: PUSH
11697: LD_INT 1
11699: PUSH
11700: LD_INT 2
11702: PUSH
11703: LD_INT 3
11705: PUSH
11706: LD_INT 4
11708: PUSH
11709: LD_INT 5
11711: PUSH
11712: LD_INT 6
11714: PUSH
11715: LD_INT 7
11717: PUSH
11718: LD_INT 8
11720: PUSH
11721: LD_INT 9
11723: PUSH
11724: LD_INT 10
11726: PUSH
11727: LD_INT 11
11729: PUSH
11730: LD_INT 12
11732: PUSH
11733: LD_INT 13
11735: PUSH
11736: LD_INT 14
11738: PUSH
11739: LD_INT 15
11741: PUSH
11742: LD_INT 16
11744: PUSH
11745: LD_INT 17
11747: PUSH
11748: LD_INT 18
11750: PUSH
11751: LD_INT 19
11753: PUSH
11754: LD_INT 20
11756: PUSH
11757: LD_INT 21
11759: PUSH
11760: LD_INT 22
11762: PUSH
11763: LD_INT 23
11765: PUSH
11766: LD_INT 24
11768: PUSH
11769: LD_INT 25
11771: PUSH
11772: LD_INT 26
11774: PUSH
11775: LD_INT 27
11777: PUSH
11778: LD_INT 28
11780: PUSH
11781: LD_INT 29
11783: PUSH
11784: LD_INT 30
11786: PUSH
11787: LD_INT 31
11789: PUSH
11790: LD_INT 32
11792: PUSH
11793: LD_INT 33
11795: PUSH
11796: LD_INT 34
11798: PUSH
11799: LD_INT 36
11801: PUSH
11802: EMPTY
11803: LIST
11804: LIST
11805: LIST
11806: LIST
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: LIST
11828: LIST
11829: LIST
11830: LIST
11831: LIST
11832: LIST
11833: LIST
11834: LIST
11835: LIST
11836: LIST
11837: LIST
11838: PUSH
11839: LD_INT 101
11841: PUSH
11842: LD_INT 102
11844: PUSH
11845: LD_INT 103
11847: PUSH
11848: LD_INT 104
11850: PUSH
11851: LD_INT 105
11853: PUSH
11854: LD_INT 106
11856: PUSH
11857: LD_INT 107
11859: PUSH
11860: LD_INT 108
11862: PUSH
11863: LD_INT 109
11865: PUSH
11866: LD_INT 110
11868: PUSH
11869: LD_INT 111
11871: PUSH
11872: LD_INT 112
11874: PUSH
11875: LD_INT 113
11877: PUSH
11878: LD_INT 114
11880: PUSH
11881: LD_INT 116
11883: PUSH
11884: LD_INT 117
11886: PUSH
11887: LD_INT 118
11889: PUSH
11890: EMPTY
11891: LIST
11892: LIST
11893: LIST
11894: LIST
11895: LIST
11896: LIST
11897: LIST
11898: LIST
11899: LIST
11900: LIST
11901: LIST
11902: LIST
11903: LIST
11904: LIST
11905: LIST
11906: LIST
11907: LIST
11908: PUSH
11909: EMPTY
11910: LIST
11911: LIST
11912: ST_TO_ADDR
11913: GO 12688
11915: LD_INT 16
11917: DOUBLE
11918: EQUAL
11919: IFTRUE 11923
11921: GO 12059
11923: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
11924: LD_ADDR_VAR 0 2
11928: PUSH
11929: LD_INT 2
11931: PUSH
11932: LD_INT 4
11934: PUSH
11935: LD_INT 5
11937: PUSH
11938: LD_INT 7
11940: PUSH
11941: LD_INT 11
11943: PUSH
11944: LD_INT 12
11946: PUSH
11947: LD_INT 15
11949: PUSH
11950: LD_INT 16
11952: PUSH
11953: LD_INT 20
11955: PUSH
11956: LD_INT 21
11958: PUSH
11959: LD_INT 22
11961: PUSH
11962: LD_INT 23
11964: PUSH
11965: LD_INT 25
11967: PUSH
11968: LD_INT 26
11970: PUSH
11971: LD_INT 30
11973: PUSH
11974: LD_INT 31
11976: PUSH
11977: LD_INT 32
11979: PUSH
11980: LD_INT 33
11982: PUSH
11983: LD_INT 34
11985: PUSH
11986: EMPTY
11987: LIST
11988: LIST
11989: LIST
11990: LIST
11991: LIST
11992: LIST
11993: LIST
11994: LIST
11995: LIST
11996: LIST
11997: LIST
11998: LIST
11999: LIST
12000: LIST
12001: LIST
12002: LIST
12003: LIST
12004: LIST
12005: LIST
12006: PUSH
12007: LD_INT 101
12009: PUSH
12010: LD_INT 102
12012: PUSH
12013: LD_INT 103
12015: PUSH
12016: LD_INT 106
12018: PUSH
12019: LD_INT 108
12021: PUSH
12022: LD_INT 112
12024: PUSH
12025: LD_INT 113
12027: PUSH
12028: LD_INT 114
12030: PUSH
12031: LD_INT 116
12033: PUSH
12034: LD_INT 117
12036: PUSH
12037: LD_INT 118
12039: PUSH
12040: EMPTY
12041: LIST
12042: LIST
12043: LIST
12044: LIST
12045: LIST
12046: LIST
12047: LIST
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: PUSH
12053: EMPTY
12054: LIST
12055: LIST
12056: ST_TO_ADDR
12057: GO 12688
12059: LD_INT 17
12061: DOUBLE
12062: EQUAL
12063: IFTRUE 12067
12065: GO 12291
12067: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
12068: LD_ADDR_VAR 0 2
12072: PUSH
12073: LD_INT 1
12075: PUSH
12076: LD_INT 2
12078: PUSH
12079: LD_INT 3
12081: PUSH
12082: LD_INT 4
12084: PUSH
12085: LD_INT 5
12087: PUSH
12088: LD_INT 6
12090: PUSH
12091: LD_INT 7
12093: PUSH
12094: LD_INT 8
12096: PUSH
12097: LD_INT 9
12099: PUSH
12100: LD_INT 10
12102: PUSH
12103: LD_INT 11
12105: PUSH
12106: LD_INT 12
12108: PUSH
12109: LD_INT 13
12111: PUSH
12112: LD_INT 14
12114: PUSH
12115: LD_INT 15
12117: PUSH
12118: LD_INT 16
12120: PUSH
12121: LD_INT 17
12123: PUSH
12124: LD_INT 18
12126: PUSH
12127: LD_INT 19
12129: PUSH
12130: LD_INT 20
12132: PUSH
12133: LD_INT 21
12135: PUSH
12136: LD_INT 22
12138: PUSH
12139: LD_INT 23
12141: PUSH
12142: LD_INT 24
12144: PUSH
12145: LD_INT 25
12147: PUSH
12148: LD_INT 26
12150: PUSH
12151: LD_INT 27
12153: PUSH
12154: LD_INT 28
12156: PUSH
12157: LD_INT 29
12159: PUSH
12160: LD_INT 30
12162: PUSH
12163: LD_INT 31
12165: PUSH
12166: LD_INT 32
12168: PUSH
12169: LD_INT 33
12171: PUSH
12172: LD_INT 34
12174: PUSH
12175: LD_INT 36
12177: PUSH
12178: EMPTY
12179: LIST
12180: LIST
12181: LIST
12182: LIST
12183: LIST
12184: LIST
12185: LIST
12186: LIST
12187: LIST
12188: LIST
12189: LIST
12190: LIST
12191: LIST
12192: LIST
12193: LIST
12194: LIST
12195: LIST
12196: LIST
12197: LIST
12198: LIST
12199: LIST
12200: LIST
12201: LIST
12202: LIST
12203: LIST
12204: LIST
12205: LIST
12206: LIST
12207: LIST
12208: LIST
12209: LIST
12210: LIST
12211: LIST
12212: LIST
12213: LIST
12214: PUSH
12215: LD_INT 101
12217: PUSH
12218: LD_INT 102
12220: PUSH
12221: LD_INT 103
12223: PUSH
12224: LD_INT 104
12226: PUSH
12227: LD_INT 105
12229: PUSH
12230: LD_INT 106
12232: PUSH
12233: LD_INT 107
12235: PUSH
12236: LD_INT 108
12238: PUSH
12239: LD_INT 109
12241: PUSH
12242: LD_INT 110
12244: PUSH
12245: LD_INT 111
12247: PUSH
12248: LD_INT 112
12250: PUSH
12251: LD_INT 113
12253: PUSH
12254: LD_INT 114
12256: PUSH
12257: LD_INT 116
12259: PUSH
12260: LD_INT 117
12262: PUSH
12263: LD_INT 118
12265: PUSH
12266: EMPTY
12267: LIST
12268: LIST
12269: LIST
12270: LIST
12271: LIST
12272: LIST
12273: LIST
12274: LIST
12275: LIST
12276: LIST
12277: LIST
12278: LIST
12279: LIST
12280: LIST
12281: LIST
12282: LIST
12283: LIST
12284: PUSH
12285: EMPTY
12286: LIST
12287: LIST
12288: ST_TO_ADDR
12289: GO 12688
12291: LD_INT 18
12293: DOUBLE
12294: EQUAL
12295: IFTRUE 12299
12297: GO 12447
12299: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
12300: LD_ADDR_VAR 0 2
12304: PUSH
12305: LD_INT 2
12307: PUSH
12308: LD_INT 4
12310: PUSH
12311: LD_INT 5
12313: PUSH
12314: LD_INT 7
12316: PUSH
12317: LD_INT 11
12319: PUSH
12320: LD_INT 12
12322: PUSH
12323: LD_INT 15
12325: PUSH
12326: LD_INT 16
12328: PUSH
12329: LD_INT 20
12331: PUSH
12332: LD_INT 21
12334: PUSH
12335: LD_INT 22
12337: PUSH
12338: LD_INT 23
12340: PUSH
12341: LD_INT 25
12343: PUSH
12344: LD_INT 26
12346: PUSH
12347: LD_INT 30
12349: PUSH
12350: LD_INT 31
12352: PUSH
12353: LD_INT 32
12355: PUSH
12356: LD_INT 33
12358: PUSH
12359: LD_INT 34
12361: PUSH
12362: LD_INT 35
12364: PUSH
12365: LD_INT 36
12367: PUSH
12368: EMPTY
12369: LIST
12370: LIST
12371: LIST
12372: LIST
12373: LIST
12374: LIST
12375: LIST
12376: LIST
12377: LIST
12378: LIST
12379: LIST
12380: LIST
12381: LIST
12382: LIST
12383: LIST
12384: LIST
12385: LIST
12386: LIST
12387: LIST
12388: LIST
12389: LIST
12390: PUSH
12391: LD_INT 101
12393: PUSH
12394: LD_INT 102
12396: PUSH
12397: LD_INT 103
12399: PUSH
12400: LD_INT 106
12402: PUSH
12403: LD_INT 108
12405: PUSH
12406: LD_INT 112
12408: PUSH
12409: LD_INT 113
12411: PUSH
12412: LD_INT 114
12414: PUSH
12415: LD_INT 115
12417: PUSH
12418: LD_INT 116
12420: PUSH
12421: LD_INT 117
12423: PUSH
12424: LD_INT 118
12426: PUSH
12427: EMPTY
12428: LIST
12429: LIST
12430: LIST
12431: LIST
12432: LIST
12433: LIST
12434: LIST
12435: LIST
12436: LIST
12437: LIST
12438: LIST
12439: LIST
12440: PUSH
12441: EMPTY
12442: LIST
12443: LIST
12444: ST_TO_ADDR
12445: GO 12688
12447: LD_INT 19
12449: DOUBLE
12450: EQUAL
12451: IFTRUE 12455
12453: GO 12687
12455: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
12456: LD_ADDR_VAR 0 2
12460: PUSH
12461: LD_INT 1
12463: PUSH
12464: LD_INT 2
12466: PUSH
12467: LD_INT 3
12469: PUSH
12470: LD_INT 4
12472: PUSH
12473: LD_INT 5
12475: PUSH
12476: LD_INT 6
12478: PUSH
12479: LD_INT 7
12481: PUSH
12482: LD_INT 8
12484: PUSH
12485: LD_INT 9
12487: PUSH
12488: LD_INT 10
12490: PUSH
12491: LD_INT 11
12493: PUSH
12494: LD_INT 12
12496: PUSH
12497: LD_INT 13
12499: PUSH
12500: LD_INT 14
12502: PUSH
12503: LD_INT 15
12505: PUSH
12506: LD_INT 16
12508: PUSH
12509: LD_INT 17
12511: PUSH
12512: LD_INT 18
12514: PUSH
12515: LD_INT 19
12517: PUSH
12518: LD_INT 20
12520: PUSH
12521: LD_INT 21
12523: PUSH
12524: LD_INT 22
12526: PUSH
12527: LD_INT 23
12529: PUSH
12530: LD_INT 24
12532: PUSH
12533: LD_INT 25
12535: PUSH
12536: LD_INT 26
12538: PUSH
12539: LD_INT 27
12541: PUSH
12542: LD_INT 28
12544: PUSH
12545: LD_INT 29
12547: PUSH
12548: LD_INT 30
12550: PUSH
12551: LD_INT 31
12553: PUSH
12554: LD_INT 32
12556: PUSH
12557: LD_INT 33
12559: PUSH
12560: LD_INT 34
12562: PUSH
12563: LD_INT 35
12565: PUSH
12566: LD_INT 36
12568: PUSH
12569: EMPTY
12570: LIST
12571: LIST
12572: LIST
12573: LIST
12574: LIST
12575: LIST
12576: LIST
12577: LIST
12578: LIST
12579: LIST
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: LIST
12591: LIST
12592: LIST
12593: LIST
12594: LIST
12595: LIST
12596: LIST
12597: LIST
12598: LIST
12599: LIST
12600: LIST
12601: LIST
12602: LIST
12603: LIST
12604: LIST
12605: LIST
12606: PUSH
12607: LD_INT 101
12609: PUSH
12610: LD_INT 102
12612: PUSH
12613: LD_INT 103
12615: PUSH
12616: LD_INT 104
12618: PUSH
12619: LD_INT 105
12621: PUSH
12622: LD_INT 106
12624: PUSH
12625: LD_INT 107
12627: PUSH
12628: LD_INT 108
12630: PUSH
12631: LD_INT 109
12633: PUSH
12634: LD_INT 110
12636: PUSH
12637: LD_INT 111
12639: PUSH
12640: LD_INT 112
12642: PUSH
12643: LD_INT 113
12645: PUSH
12646: LD_INT 114
12648: PUSH
12649: LD_INT 115
12651: PUSH
12652: LD_INT 116
12654: PUSH
12655: LD_INT 117
12657: PUSH
12658: LD_INT 118
12660: PUSH
12661: EMPTY
12662: LIST
12663: LIST
12664: LIST
12665: LIST
12666: LIST
12667: LIST
12668: LIST
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: LIST
12675: LIST
12676: LIST
12677: LIST
12678: LIST
12679: LIST
12680: PUSH
12681: EMPTY
12682: LIST
12683: LIST
12684: ST_TO_ADDR
12685: GO 12688
12687: POP
// end else
12688: GO 12919
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
12690: LD_ADDR_VAR 0 2
12694: PUSH
12695: LD_INT 1
12697: PUSH
12698: LD_INT 2
12700: PUSH
12701: LD_INT 3
12703: PUSH
12704: LD_INT 4
12706: PUSH
12707: LD_INT 5
12709: PUSH
12710: LD_INT 6
12712: PUSH
12713: LD_INT 7
12715: PUSH
12716: LD_INT 8
12718: PUSH
12719: LD_INT 9
12721: PUSH
12722: LD_INT 10
12724: PUSH
12725: LD_INT 11
12727: PUSH
12728: LD_INT 12
12730: PUSH
12731: LD_INT 13
12733: PUSH
12734: LD_INT 14
12736: PUSH
12737: LD_INT 15
12739: PUSH
12740: LD_INT 16
12742: PUSH
12743: LD_INT 17
12745: PUSH
12746: LD_INT 18
12748: PUSH
12749: LD_INT 19
12751: PUSH
12752: LD_INT 20
12754: PUSH
12755: LD_INT 21
12757: PUSH
12758: LD_INT 22
12760: PUSH
12761: LD_INT 23
12763: PUSH
12764: LD_INT 24
12766: PUSH
12767: LD_INT 25
12769: PUSH
12770: LD_INT 26
12772: PUSH
12773: LD_INT 27
12775: PUSH
12776: LD_INT 28
12778: PUSH
12779: LD_INT 29
12781: PUSH
12782: LD_INT 30
12784: PUSH
12785: LD_INT 31
12787: PUSH
12788: LD_INT 32
12790: PUSH
12791: LD_INT 33
12793: PUSH
12794: LD_INT 34
12796: PUSH
12797: LD_INT 35
12799: PUSH
12800: LD_INT 36
12802: PUSH
12803: EMPTY
12804: LIST
12805: LIST
12806: LIST
12807: LIST
12808: LIST
12809: LIST
12810: LIST
12811: LIST
12812: LIST
12813: LIST
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: LIST
12819: LIST
12820: LIST
12821: LIST
12822: LIST
12823: LIST
12824: LIST
12825: LIST
12826: LIST
12827: LIST
12828: LIST
12829: LIST
12830: LIST
12831: LIST
12832: LIST
12833: LIST
12834: LIST
12835: LIST
12836: LIST
12837: LIST
12838: LIST
12839: LIST
12840: PUSH
12841: LD_INT 101
12843: PUSH
12844: LD_INT 102
12846: PUSH
12847: LD_INT 103
12849: PUSH
12850: LD_INT 104
12852: PUSH
12853: LD_INT 105
12855: PUSH
12856: LD_INT 106
12858: PUSH
12859: LD_INT 107
12861: PUSH
12862: LD_INT 108
12864: PUSH
12865: LD_INT 109
12867: PUSH
12868: LD_INT 110
12870: PUSH
12871: LD_INT 111
12873: PUSH
12874: LD_INT 112
12876: PUSH
12877: LD_INT 113
12879: PUSH
12880: LD_INT 114
12882: PUSH
12883: LD_INT 115
12885: PUSH
12886: LD_INT 116
12888: PUSH
12889: LD_INT 117
12891: PUSH
12892: LD_INT 118
12894: PUSH
12895: EMPTY
12896: LIST
12897: LIST
12898: LIST
12899: LIST
12900: LIST
12901: LIST
12902: LIST
12903: LIST
12904: LIST
12905: LIST
12906: LIST
12907: LIST
12908: LIST
12909: LIST
12910: LIST
12911: LIST
12912: LIST
12913: LIST
12914: PUSH
12915: EMPTY
12916: LIST
12917: LIST
12918: ST_TO_ADDR
// if result then
12919: LD_VAR 0 2
12923: IFFALSE 13709
// begin normal :=  ;
12925: LD_ADDR_VAR 0 5
12929: PUSH
12930: LD_STRING 
12932: ST_TO_ADDR
// hardcore :=  ;
12933: LD_ADDR_VAR 0 6
12937: PUSH
12938: LD_STRING 
12940: ST_TO_ADDR
// active :=  ;
12941: LD_ADDR_VAR 0 7
12945: PUSH
12946: LD_STRING 
12948: ST_TO_ADDR
// for i = 1 to normalCounter do
12949: LD_ADDR_VAR 0 8
12953: PUSH
12954: DOUBLE
12955: LD_INT 1
12957: DEC
12958: ST_TO_ADDR
12959: LD_EXP 24
12963: PUSH
12964: FOR_TO
12965: IFFALSE 13066
// begin tmp := 0 ;
12967: LD_ADDR_VAR 0 3
12971: PUSH
12972: LD_STRING 0
12974: ST_TO_ADDR
// if result [ 1 ] then
12975: LD_VAR 0 2
12979: PUSH
12980: LD_INT 1
12982: ARRAY
12983: IFFALSE 13048
// if result [ 1 ] [ 1 ] = i then
12985: LD_VAR 0 2
12989: PUSH
12990: LD_INT 1
12992: ARRAY
12993: PUSH
12994: LD_INT 1
12996: ARRAY
12997: PUSH
12998: LD_VAR 0 8
13002: EQUAL
13003: IFFALSE 13048
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
13005: LD_ADDR_VAR 0 2
13009: PUSH
13010: LD_VAR 0 2
13014: PPUSH
13015: LD_INT 1
13017: PPUSH
13018: LD_VAR 0 2
13022: PUSH
13023: LD_INT 1
13025: ARRAY
13026: PPUSH
13027: LD_INT 1
13029: PPUSH
13030: CALL_OW 3
13034: PPUSH
13035: CALL_OW 1
13039: ST_TO_ADDR
// tmp := 1 ;
13040: LD_ADDR_VAR 0 3
13044: PUSH
13045: LD_STRING 1
13047: ST_TO_ADDR
// end ; normal := normal & tmp ;
13048: LD_ADDR_VAR 0 5
13052: PUSH
13053: LD_VAR 0 5
13057: PUSH
13058: LD_VAR 0 3
13062: STR
13063: ST_TO_ADDR
// end ;
13064: GO 12964
13066: POP
13067: POP
// for i = 1 to hardcoreCounter do
13068: LD_ADDR_VAR 0 8
13072: PUSH
13073: DOUBLE
13074: LD_INT 1
13076: DEC
13077: ST_TO_ADDR
13078: LD_EXP 25
13082: PUSH
13083: FOR_TO
13084: IFFALSE 13189
// begin tmp := 0 ;
13086: LD_ADDR_VAR 0 3
13090: PUSH
13091: LD_STRING 0
13093: ST_TO_ADDR
// if result [ 2 ] then
13094: LD_VAR 0 2
13098: PUSH
13099: LD_INT 2
13101: ARRAY
13102: IFFALSE 13171
// if result [ 2 ] [ 1 ] = 100 + i then
13104: LD_VAR 0 2
13108: PUSH
13109: LD_INT 2
13111: ARRAY
13112: PUSH
13113: LD_INT 1
13115: ARRAY
13116: PUSH
13117: LD_INT 100
13119: PUSH
13120: LD_VAR 0 8
13124: PLUS
13125: EQUAL
13126: IFFALSE 13171
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
13128: LD_ADDR_VAR 0 2
13132: PUSH
13133: LD_VAR 0 2
13137: PPUSH
13138: LD_INT 2
13140: PPUSH
13141: LD_VAR 0 2
13145: PUSH
13146: LD_INT 2
13148: ARRAY
13149: PPUSH
13150: LD_INT 1
13152: PPUSH
13153: CALL_OW 3
13157: PPUSH
13158: CALL_OW 1
13162: ST_TO_ADDR
// tmp := 1 ;
13163: LD_ADDR_VAR 0 3
13167: PUSH
13168: LD_STRING 1
13170: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
13171: LD_ADDR_VAR 0 6
13175: PUSH
13176: LD_VAR 0 6
13180: PUSH
13181: LD_VAR 0 3
13185: STR
13186: ST_TO_ADDR
// end ;
13187: GO 13083
13189: POP
13190: POP
// if isGameLoad then
13191: LD_VAR 0 1
13195: IFFALSE 13670
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
13197: LD_ADDR_VAR 0 4
13201: PUSH
13202: LD_EXP 28
13206: PUSH
13207: LD_EXP 27
13211: PUSH
13212: LD_EXP 29
13216: PUSH
13217: LD_EXP 26
13221: PUSH
13222: LD_EXP 30
13226: PUSH
13227: LD_EXP 31
13231: PUSH
13232: LD_EXP 32
13236: PUSH
13237: LD_EXP 33
13241: PUSH
13242: LD_EXP 34
13246: PUSH
13247: LD_EXP 35
13251: PUSH
13252: LD_EXP 36
13256: PUSH
13257: LD_EXP 37
13261: PUSH
13262: LD_EXP 38
13266: PUSH
13267: LD_EXP 39
13271: PUSH
13272: LD_EXP 47
13276: PUSH
13277: LD_EXP 48
13281: PUSH
13282: LD_EXP 49
13286: PUSH
13287: LD_EXP 50
13291: PUSH
13292: LD_EXP 52
13296: PUSH
13297: LD_EXP 53
13301: PUSH
13302: LD_EXP 54
13306: PUSH
13307: LD_EXP 57
13311: PUSH
13312: LD_EXP 59
13316: PUSH
13317: LD_EXP 60
13321: PUSH
13322: LD_EXP 61
13326: PUSH
13327: LD_EXP 63
13331: PUSH
13332: LD_EXP 64
13336: PUSH
13337: LD_EXP 67
13341: PUSH
13342: LD_EXP 68
13346: PUSH
13347: LD_EXP 69
13351: PUSH
13352: LD_EXP 70
13356: PUSH
13357: LD_EXP 71
13361: PUSH
13362: LD_EXP 72
13366: PUSH
13367: LD_EXP 73
13371: PUSH
13372: LD_EXP 74
13376: PUSH
13377: LD_EXP 75
13381: PUSH
13382: LD_EXP 40
13386: PUSH
13387: LD_EXP 41
13391: PUSH
13392: LD_EXP 44
13396: PUSH
13397: LD_EXP 45
13401: PUSH
13402: LD_EXP 46
13406: PUSH
13407: LD_EXP 42
13411: PUSH
13412: LD_EXP 43
13416: PUSH
13417: LD_EXP 51
13421: PUSH
13422: LD_EXP 55
13426: PUSH
13427: LD_EXP 56
13431: PUSH
13432: LD_EXP 58
13436: PUSH
13437: LD_EXP 62
13441: PUSH
13442: LD_EXP 65
13446: PUSH
13447: LD_EXP 66
13451: PUSH
13452: LD_EXP 76
13456: PUSH
13457: LD_EXP 77
13461: PUSH
13462: LD_EXP 78
13466: PUSH
13467: LD_EXP 79
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: LIST
13476: LIST
13477: LIST
13478: LIST
13479: LIST
13480: LIST
13481: LIST
13482: LIST
13483: LIST
13484: LIST
13485: LIST
13486: LIST
13487: LIST
13488: LIST
13489: LIST
13490: LIST
13491: LIST
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: LIST
13497: LIST
13498: LIST
13499: LIST
13500: LIST
13501: LIST
13502: LIST
13503: LIST
13504: LIST
13505: LIST
13506: LIST
13507: LIST
13508: LIST
13509: LIST
13510: LIST
13511: LIST
13512: LIST
13513: LIST
13514: LIST
13515: LIST
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: LIST
13521: LIST
13522: LIST
13523: LIST
13524: LIST
13525: LIST
13526: LIST
13527: ST_TO_ADDR
// tmp :=  ;
13528: LD_ADDR_VAR 0 3
13532: PUSH
13533: LD_STRING 
13535: ST_TO_ADDR
// for i = 1 to normalCounter do
13536: LD_ADDR_VAR 0 8
13540: PUSH
13541: DOUBLE
13542: LD_INT 1
13544: DEC
13545: ST_TO_ADDR
13546: LD_EXP 24
13550: PUSH
13551: FOR_TO
13552: IFFALSE 13588
// begin if flags [ i ] then
13554: LD_VAR 0 4
13558: PUSH
13559: LD_VAR 0 8
13563: ARRAY
13564: IFFALSE 13586
// tmp := tmp & i & ; ;
13566: LD_ADDR_VAR 0 3
13570: PUSH
13571: LD_VAR 0 3
13575: PUSH
13576: LD_VAR 0 8
13580: STR
13581: PUSH
13582: LD_STRING ;
13584: STR
13585: ST_TO_ADDR
// end ;
13586: GO 13551
13588: POP
13589: POP
// for i = 1 to hardcoreCounter do
13590: LD_ADDR_VAR 0 8
13594: PUSH
13595: DOUBLE
13596: LD_INT 1
13598: DEC
13599: ST_TO_ADDR
13600: LD_EXP 25
13604: PUSH
13605: FOR_TO
13606: IFFALSE 13652
// begin if flags [ normalCounter + i ] then
13608: LD_VAR 0 4
13612: PUSH
13613: LD_EXP 24
13617: PUSH
13618: LD_VAR 0 8
13622: PLUS
13623: ARRAY
13624: IFFALSE 13650
// tmp := tmp & ( 100 + i ) & ; ;
13626: LD_ADDR_VAR 0 3
13630: PUSH
13631: LD_VAR 0 3
13635: PUSH
13636: LD_INT 100
13638: PUSH
13639: LD_VAR 0 8
13643: PLUS
13644: STR
13645: PUSH
13646: LD_STRING ;
13648: STR
13649: ST_TO_ADDR
// end ;
13650: GO 13605
13652: POP
13653: POP
// if tmp then
13654: LD_VAR 0 3
13658: IFFALSE 13670
// active := tmp ;
13660: LD_ADDR_VAR 0 7
13664: PUSH
13665: LD_VAR 0 3
13669: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
13670: LD_STRING getStreamItemsFromMission("
13672: PUSH
13673: LD_VAR 0 5
13677: STR
13678: PUSH
13679: LD_STRING ","
13681: STR
13682: PUSH
13683: LD_VAR 0 6
13687: STR
13688: PUSH
13689: LD_STRING ","
13691: STR
13692: PUSH
13693: LD_VAR 0 7
13697: STR
13698: PUSH
13699: LD_STRING ")
13701: STR
13702: PPUSH
13703: CALL_OW 559
// end else
13707: GO 13716
// ToLua ( getStreamItemsFromMission("","","") ) ;
13709: LD_STRING getStreamItemsFromMission("","","")
13711: PPUSH
13712: CALL_OW 559
// end ;
13716: LD_VAR 0 2
13720: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
13721: LD_EXP 23
13725: PUSH
13726: LD_EXP 28
13730: AND
13731: IFFALSE 13855
13733: GO 13735
13735: DISABLE
13736: LD_INT 0
13738: PPUSH
13739: PPUSH
// begin enable ;
13740: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
13741: LD_ADDR_VAR 0 2
13745: PUSH
13746: LD_INT 22
13748: PUSH
13749: LD_OWVAR 2
13753: PUSH
13754: EMPTY
13755: LIST
13756: LIST
13757: PUSH
13758: LD_INT 2
13760: PUSH
13761: LD_INT 34
13763: PUSH
13764: LD_INT 7
13766: PUSH
13767: EMPTY
13768: LIST
13769: LIST
13770: PUSH
13771: LD_INT 34
13773: PUSH
13774: LD_INT 45
13776: PUSH
13777: EMPTY
13778: LIST
13779: LIST
13780: PUSH
13781: LD_INT 34
13783: PUSH
13784: LD_INT 28
13786: PUSH
13787: EMPTY
13788: LIST
13789: LIST
13790: PUSH
13791: LD_INT 34
13793: PUSH
13794: LD_INT 47
13796: PUSH
13797: EMPTY
13798: LIST
13799: LIST
13800: PUSH
13801: EMPTY
13802: LIST
13803: LIST
13804: LIST
13805: LIST
13806: LIST
13807: PUSH
13808: EMPTY
13809: LIST
13810: LIST
13811: PPUSH
13812: CALL_OW 69
13816: ST_TO_ADDR
// if not tmp then
13817: LD_VAR 0 2
13821: NOT
13822: IFFALSE 13826
// exit ;
13824: GO 13855
// for i in tmp do
13826: LD_ADDR_VAR 0 1
13830: PUSH
13831: LD_VAR 0 2
13835: PUSH
13836: FOR_IN
13837: IFFALSE 13853
// begin SetLives ( i , 0 ) ;
13839: LD_VAR 0 1
13843: PPUSH
13844: LD_INT 0
13846: PPUSH
13847: CALL_OW 234
// end ;
13851: GO 13836
13853: POP
13854: POP
// end ;
13855: PPOPN 2
13857: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
13858: LD_EXP 23
13862: PUSH
13863: LD_EXP 29
13867: AND
13868: IFFALSE 13952
13870: GO 13872
13872: DISABLE
13873: LD_INT 0
13875: PPUSH
13876: PPUSH
// begin enable ;
13877: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
13878: LD_ADDR_VAR 0 2
13882: PUSH
13883: LD_INT 22
13885: PUSH
13886: LD_OWVAR 2
13890: PUSH
13891: EMPTY
13892: LIST
13893: LIST
13894: PUSH
13895: LD_INT 32
13897: PUSH
13898: LD_INT 3
13900: PUSH
13901: EMPTY
13902: LIST
13903: LIST
13904: PUSH
13905: EMPTY
13906: LIST
13907: LIST
13908: PPUSH
13909: CALL_OW 69
13913: ST_TO_ADDR
// if not tmp then
13914: LD_VAR 0 2
13918: NOT
13919: IFFALSE 13923
// exit ;
13921: GO 13952
// for i in tmp do
13923: LD_ADDR_VAR 0 1
13927: PUSH
13928: LD_VAR 0 2
13932: PUSH
13933: FOR_IN
13934: IFFALSE 13950
// begin SetLives ( i , 0 ) ;
13936: LD_VAR 0 1
13940: PPUSH
13941: LD_INT 0
13943: PPUSH
13944: CALL_OW 234
// end ;
13948: GO 13933
13950: POP
13951: POP
// end ;
13952: PPOPN 2
13954: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
13955: LD_EXP 23
13959: PUSH
13960: LD_EXP 26
13964: AND
13965: IFFALSE 14058
13967: GO 13969
13969: DISABLE
13970: LD_INT 0
13972: PPUSH
// begin enable ;
13973: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
13974: LD_ADDR_VAR 0 1
13978: PUSH
13979: LD_INT 22
13981: PUSH
13982: LD_OWVAR 2
13986: PUSH
13987: EMPTY
13988: LIST
13989: LIST
13990: PUSH
13991: LD_INT 2
13993: PUSH
13994: LD_INT 25
13996: PUSH
13997: LD_INT 5
13999: PUSH
14000: EMPTY
14001: LIST
14002: LIST
14003: PUSH
14004: LD_INT 25
14006: PUSH
14007: LD_INT 9
14009: PUSH
14010: EMPTY
14011: LIST
14012: LIST
14013: PUSH
14014: LD_INT 25
14016: PUSH
14017: LD_INT 8
14019: PUSH
14020: EMPTY
14021: LIST
14022: LIST
14023: PUSH
14024: EMPTY
14025: LIST
14026: LIST
14027: LIST
14028: LIST
14029: PUSH
14030: EMPTY
14031: LIST
14032: LIST
14033: PPUSH
14034: CALL_OW 69
14038: PUSH
14039: FOR_IN
14040: IFFALSE 14056
// begin SetClass ( i , 1 ) ;
14042: LD_VAR 0 1
14046: PPUSH
14047: LD_INT 1
14049: PPUSH
14050: CALL_OW 336
// end ;
14054: GO 14039
14056: POP
14057: POP
// end ;
14058: PPOPN 1
14060: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
14061: LD_EXP 23
14065: PUSH
14066: LD_EXP 27
14070: AND
14071: PUSH
14072: LD_OWVAR 65
14076: PUSH
14077: LD_INT 7
14079: LESS
14080: AND
14081: IFFALSE 14095
14083: GO 14085
14085: DISABLE
// begin enable ;
14086: ENABLE
// game_speed := 7 ;
14087: LD_ADDR_OWVAR 65
14091: PUSH
14092: LD_INT 7
14094: ST_TO_ADDR
// end ;
14095: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
14096: LD_EXP 23
14100: PUSH
14101: LD_EXP 30
14105: AND
14106: IFFALSE 14308
14108: GO 14110
14110: DISABLE
14111: LD_INT 0
14113: PPUSH
14114: PPUSH
14115: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
14116: LD_ADDR_VAR 0 3
14120: PUSH
14121: LD_INT 81
14123: PUSH
14124: LD_OWVAR 2
14128: PUSH
14129: EMPTY
14130: LIST
14131: LIST
14132: PUSH
14133: LD_INT 21
14135: PUSH
14136: LD_INT 1
14138: PUSH
14139: EMPTY
14140: LIST
14141: LIST
14142: PUSH
14143: EMPTY
14144: LIST
14145: LIST
14146: PPUSH
14147: CALL_OW 69
14151: ST_TO_ADDR
// if not tmp then
14152: LD_VAR 0 3
14156: NOT
14157: IFFALSE 14161
// exit ;
14159: GO 14308
// if tmp > 5 then
14161: LD_VAR 0 3
14165: PUSH
14166: LD_INT 5
14168: GREATER
14169: IFFALSE 14181
// k := 5 else
14171: LD_ADDR_VAR 0 2
14175: PUSH
14176: LD_INT 5
14178: ST_TO_ADDR
14179: GO 14191
// k := tmp ;
14181: LD_ADDR_VAR 0 2
14185: PUSH
14186: LD_VAR 0 3
14190: ST_TO_ADDR
// for i := 1 to k do
14191: LD_ADDR_VAR 0 1
14195: PUSH
14196: DOUBLE
14197: LD_INT 1
14199: DEC
14200: ST_TO_ADDR
14201: LD_VAR 0 2
14205: PUSH
14206: FOR_TO
14207: IFFALSE 14306
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
14209: LD_VAR 0 3
14213: PUSH
14214: LD_VAR 0 1
14218: ARRAY
14219: PPUSH
14220: LD_VAR 0 1
14224: PUSH
14225: LD_INT 4
14227: MOD
14228: PUSH
14229: LD_INT 1
14231: PLUS
14232: PPUSH
14233: CALL_OW 259
14237: PUSH
14238: LD_INT 10
14240: LESS
14241: IFFALSE 14304
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
14243: LD_VAR 0 3
14247: PUSH
14248: LD_VAR 0 1
14252: ARRAY
14253: PPUSH
14254: LD_VAR 0 1
14258: PUSH
14259: LD_INT 4
14261: MOD
14262: PUSH
14263: LD_INT 1
14265: PLUS
14266: PPUSH
14267: LD_VAR 0 3
14271: PUSH
14272: LD_VAR 0 1
14276: ARRAY
14277: PPUSH
14278: LD_VAR 0 1
14282: PUSH
14283: LD_INT 4
14285: MOD
14286: PUSH
14287: LD_INT 1
14289: PLUS
14290: PPUSH
14291: CALL_OW 259
14295: PUSH
14296: LD_INT 1
14298: PLUS
14299: PPUSH
14300: CALL_OW 237
14304: GO 14206
14306: POP
14307: POP
// end ;
14308: PPOPN 3
14310: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
14311: LD_EXP 23
14315: PUSH
14316: LD_EXP 31
14320: AND
14321: IFFALSE 14341
14323: GO 14325
14325: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
14326: LD_INT 4
14328: PPUSH
14329: LD_OWVAR 2
14333: PPUSH
14334: LD_INT 0
14336: PPUSH
14337: CALL_OW 324
14341: END
// every 0 0$1 trigger StreamModeActive and sShovel do
14342: LD_EXP 23
14346: PUSH
14347: LD_EXP 60
14351: AND
14352: IFFALSE 14372
14354: GO 14356
14356: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
14357: LD_INT 19
14359: PPUSH
14360: LD_OWVAR 2
14364: PPUSH
14365: LD_INT 0
14367: PPUSH
14368: CALL_OW 324
14372: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
14373: LD_EXP 23
14377: PUSH
14378: LD_EXP 32
14382: AND
14383: IFFALSE 14485
14385: GO 14387
14387: DISABLE
14388: LD_INT 0
14390: PPUSH
14391: PPUSH
// begin enable ;
14392: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
14393: LD_ADDR_VAR 0 2
14397: PUSH
14398: LD_INT 22
14400: PUSH
14401: LD_OWVAR 2
14405: PUSH
14406: EMPTY
14407: LIST
14408: LIST
14409: PUSH
14410: LD_INT 2
14412: PUSH
14413: LD_INT 34
14415: PUSH
14416: LD_INT 11
14418: PUSH
14419: EMPTY
14420: LIST
14421: LIST
14422: PUSH
14423: LD_INT 34
14425: PUSH
14426: LD_INT 30
14428: PUSH
14429: EMPTY
14430: LIST
14431: LIST
14432: PUSH
14433: EMPTY
14434: LIST
14435: LIST
14436: LIST
14437: PUSH
14438: EMPTY
14439: LIST
14440: LIST
14441: PPUSH
14442: CALL_OW 69
14446: ST_TO_ADDR
// if not tmp then
14447: LD_VAR 0 2
14451: NOT
14452: IFFALSE 14456
// exit ;
14454: GO 14485
// for i in tmp do
14456: LD_ADDR_VAR 0 1
14460: PUSH
14461: LD_VAR 0 2
14465: PUSH
14466: FOR_IN
14467: IFFALSE 14483
// begin SetLives ( i , 0 ) ;
14469: LD_VAR 0 1
14473: PPUSH
14474: LD_INT 0
14476: PPUSH
14477: CALL_OW 234
// end ;
14481: GO 14466
14483: POP
14484: POP
// end ;
14485: PPOPN 2
14487: END
// every 0 0$1 trigger StreamModeActive and sBunker do
14488: LD_EXP 23
14492: PUSH
14493: LD_EXP 33
14497: AND
14498: IFFALSE 14518
14500: GO 14502
14502: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
14503: LD_INT 32
14505: PPUSH
14506: LD_OWVAR 2
14510: PPUSH
14511: LD_INT 0
14513: PPUSH
14514: CALL_OW 324
14518: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
14519: LD_EXP 23
14523: PUSH
14524: LD_EXP 34
14528: AND
14529: IFFALSE 14710
14531: GO 14533
14533: DISABLE
14534: LD_INT 0
14536: PPUSH
14537: PPUSH
14538: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
14539: LD_ADDR_VAR 0 2
14543: PUSH
14544: LD_INT 22
14546: PUSH
14547: LD_OWVAR 2
14551: PUSH
14552: EMPTY
14553: LIST
14554: LIST
14555: PUSH
14556: LD_INT 33
14558: PUSH
14559: LD_INT 3
14561: PUSH
14562: EMPTY
14563: LIST
14564: LIST
14565: PUSH
14566: EMPTY
14567: LIST
14568: LIST
14569: PPUSH
14570: CALL_OW 69
14574: ST_TO_ADDR
// if not tmp then
14575: LD_VAR 0 2
14579: NOT
14580: IFFALSE 14584
// exit ;
14582: GO 14710
// side := 0 ;
14584: LD_ADDR_VAR 0 3
14588: PUSH
14589: LD_INT 0
14591: ST_TO_ADDR
// for i := 1 to 8 do
14592: LD_ADDR_VAR 0 1
14596: PUSH
14597: DOUBLE
14598: LD_INT 1
14600: DEC
14601: ST_TO_ADDR
14602: LD_INT 8
14604: PUSH
14605: FOR_TO
14606: IFFALSE 14654
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
14608: LD_OWVAR 2
14612: PUSH
14613: LD_VAR 0 1
14617: NONEQUAL
14618: PUSH
14619: LD_OWVAR 2
14623: PPUSH
14624: LD_VAR 0 1
14628: PPUSH
14629: CALL_OW 81
14633: PUSH
14634: LD_INT 2
14636: EQUAL
14637: AND
14638: IFFALSE 14652
// begin side := i ;
14640: LD_ADDR_VAR 0 3
14644: PUSH
14645: LD_VAR 0 1
14649: ST_TO_ADDR
// break ;
14650: GO 14654
// end ;
14652: GO 14605
14654: POP
14655: POP
// if not side then
14656: LD_VAR 0 3
14660: NOT
14661: IFFALSE 14665
// exit ;
14663: GO 14710
// for i := 1 to tmp do
14665: LD_ADDR_VAR 0 1
14669: PUSH
14670: DOUBLE
14671: LD_INT 1
14673: DEC
14674: ST_TO_ADDR
14675: LD_VAR 0 2
14679: PUSH
14680: FOR_TO
14681: IFFALSE 14708
// if Prob ( 60 ) then
14683: LD_INT 60
14685: PPUSH
14686: CALL_OW 13
14690: IFFALSE 14706
// SetSide ( i , side ) ;
14692: LD_VAR 0 1
14696: PPUSH
14697: LD_VAR 0 3
14701: PPUSH
14702: CALL_OW 235
14706: GO 14680
14708: POP
14709: POP
// end ;
14710: PPOPN 3
14712: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
14713: LD_EXP 23
14717: PUSH
14718: LD_EXP 36
14722: AND
14723: IFFALSE 14842
14725: GO 14727
14727: DISABLE
14728: LD_INT 0
14730: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
14731: LD_ADDR_VAR 0 1
14735: PUSH
14736: LD_INT 22
14738: PUSH
14739: LD_OWVAR 2
14743: PUSH
14744: EMPTY
14745: LIST
14746: LIST
14747: PUSH
14748: LD_INT 21
14750: PUSH
14751: LD_INT 1
14753: PUSH
14754: EMPTY
14755: LIST
14756: LIST
14757: PUSH
14758: LD_INT 3
14760: PUSH
14761: LD_INT 23
14763: PUSH
14764: LD_INT 0
14766: PUSH
14767: EMPTY
14768: LIST
14769: LIST
14770: PUSH
14771: EMPTY
14772: LIST
14773: LIST
14774: PUSH
14775: EMPTY
14776: LIST
14777: LIST
14778: LIST
14779: PPUSH
14780: CALL_OW 69
14784: PUSH
14785: FOR_IN
14786: IFFALSE 14840
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
14788: LD_VAR 0 1
14792: PPUSH
14793: CALL_OW 257
14797: PUSH
14798: LD_INT 1
14800: PUSH
14801: LD_INT 2
14803: PUSH
14804: LD_INT 3
14806: PUSH
14807: LD_INT 4
14809: PUSH
14810: EMPTY
14811: LIST
14812: LIST
14813: LIST
14814: LIST
14815: IN
14816: IFFALSE 14838
// SetClass ( un , rand ( 1 , 4 ) ) ;
14818: LD_VAR 0 1
14822: PPUSH
14823: LD_INT 1
14825: PPUSH
14826: LD_INT 4
14828: PPUSH
14829: CALL_OW 12
14833: PPUSH
14834: CALL_OW 336
14838: GO 14785
14840: POP
14841: POP
// end ;
14842: PPOPN 1
14844: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
14845: LD_EXP 23
14849: PUSH
14850: LD_EXP 35
14854: AND
14855: IFFALSE 14934
14857: GO 14859
14859: DISABLE
14860: LD_INT 0
14862: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
14863: LD_ADDR_VAR 0 1
14867: PUSH
14868: LD_INT 22
14870: PUSH
14871: LD_OWVAR 2
14875: PUSH
14876: EMPTY
14877: LIST
14878: LIST
14879: PUSH
14880: LD_INT 21
14882: PUSH
14883: LD_INT 3
14885: PUSH
14886: EMPTY
14887: LIST
14888: LIST
14889: PUSH
14890: EMPTY
14891: LIST
14892: LIST
14893: PPUSH
14894: CALL_OW 69
14898: ST_TO_ADDR
// if not tmp then
14899: LD_VAR 0 1
14903: NOT
14904: IFFALSE 14908
// exit ;
14906: GO 14934
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
14908: LD_VAR 0 1
14912: PUSH
14913: LD_INT 1
14915: PPUSH
14916: LD_VAR 0 1
14920: PPUSH
14921: CALL_OW 12
14925: ARRAY
14926: PPUSH
14927: LD_INT 100
14929: PPUSH
14930: CALL_OW 234
// end ;
14934: PPOPN 1
14936: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
14937: LD_EXP 23
14941: PUSH
14942: LD_EXP 37
14946: AND
14947: IFFALSE 15045
14949: GO 14951
14951: DISABLE
14952: LD_INT 0
14954: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
14955: LD_ADDR_VAR 0 1
14959: PUSH
14960: LD_INT 22
14962: PUSH
14963: LD_OWVAR 2
14967: PUSH
14968: EMPTY
14969: LIST
14970: LIST
14971: PUSH
14972: LD_INT 21
14974: PUSH
14975: LD_INT 1
14977: PUSH
14978: EMPTY
14979: LIST
14980: LIST
14981: PUSH
14982: EMPTY
14983: LIST
14984: LIST
14985: PPUSH
14986: CALL_OW 69
14990: ST_TO_ADDR
// if not tmp then
14991: LD_VAR 0 1
14995: NOT
14996: IFFALSE 15000
// exit ;
14998: GO 15045
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
15000: LD_VAR 0 1
15004: PUSH
15005: LD_INT 1
15007: PPUSH
15008: LD_VAR 0 1
15012: PPUSH
15013: CALL_OW 12
15017: ARRAY
15018: PPUSH
15019: LD_INT 1
15021: PPUSH
15022: LD_INT 4
15024: PPUSH
15025: CALL_OW 12
15029: PPUSH
15030: LD_INT 3000
15032: PPUSH
15033: LD_INT 9000
15035: PPUSH
15036: CALL_OW 12
15040: PPUSH
15041: CALL_OW 492
// end ;
15045: PPOPN 1
15047: END
// every 0 0$1 trigger StreamModeActive and sDepot do
15048: LD_EXP 23
15052: PUSH
15053: LD_EXP 38
15057: AND
15058: IFFALSE 15078
15060: GO 15062
15062: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
15063: LD_INT 1
15065: PPUSH
15066: LD_OWVAR 2
15070: PPUSH
15071: LD_INT 0
15073: PPUSH
15074: CALL_OW 324
15078: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
15079: LD_EXP 23
15083: PUSH
15084: LD_EXP 39
15088: AND
15089: IFFALSE 15172
15091: GO 15093
15093: DISABLE
15094: LD_INT 0
15096: PPUSH
15097: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
15098: LD_ADDR_VAR 0 2
15102: PUSH
15103: LD_INT 22
15105: PUSH
15106: LD_OWVAR 2
15110: PUSH
15111: EMPTY
15112: LIST
15113: LIST
15114: PUSH
15115: LD_INT 21
15117: PUSH
15118: LD_INT 3
15120: PUSH
15121: EMPTY
15122: LIST
15123: LIST
15124: PUSH
15125: EMPTY
15126: LIST
15127: LIST
15128: PPUSH
15129: CALL_OW 69
15133: ST_TO_ADDR
// if not tmp then
15134: LD_VAR 0 2
15138: NOT
15139: IFFALSE 15143
// exit ;
15141: GO 15172
// for i in tmp do
15143: LD_ADDR_VAR 0 1
15147: PUSH
15148: LD_VAR 0 2
15152: PUSH
15153: FOR_IN
15154: IFFALSE 15170
// SetBLevel ( i , 10 ) ;
15156: LD_VAR 0 1
15160: PPUSH
15161: LD_INT 10
15163: PPUSH
15164: CALL_OW 241
15168: GO 15153
15170: POP
15171: POP
// end ;
15172: PPOPN 2
15174: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
15175: LD_EXP 23
15179: PUSH
15180: LD_EXP 40
15184: AND
15185: IFFALSE 15296
15187: GO 15189
15189: DISABLE
15190: LD_INT 0
15192: PPUSH
15193: PPUSH
15194: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15195: LD_ADDR_VAR 0 3
15199: PUSH
15200: LD_INT 22
15202: PUSH
15203: LD_OWVAR 2
15207: PUSH
15208: EMPTY
15209: LIST
15210: LIST
15211: PUSH
15212: LD_INT 25
15214: PUSH
15215: LD_INT 1
15217: PUSH
15218: EMPTY
15219: LIST
15220: LIST
15221: PUSH
15222: EMPTY
15223: LIST
15224: LIST
15225: PPUSH
15226: CALL_OW 69
15230: ST_TO_ADDR
// if not tmp then
15231: LD_VAR 0 3
15235: NOT
15236: IFFALSE 15240
// exit ;
15238: GO 15296
// un := tmp [ rand ( 1 , tmp ) ] ;
15240: LD_ADDR_VAR 0 2
15244: PUSH
15245: LD_VAR 0 3
15249: PUSH
15250: LD_INT 1
15252: PPUSH
15253: LD_VAR 0 3
15257: PPUSH
15258: CALL_OW 12
15262: ARRAY
15263: ST_TO_ADDR
// if Crawls ( un ) then
15264: LD_VAR 0 2
15268: PPUSH
15269: CALL_OW 318
15273: IFFALSE 15284
// ComWalk ( un ) ;
15275: LD_VAR 0 2
15279: PPUSH
15280: CALL_OW 138
// SetClass ( un , class_sniper ) ;
15284: LD_VAR 0 2
15288: PPUSH
15289: LD_INT 5
15291: PPUSH
15292: CALL_OW 336
// end ;
15296: PPOPN 3
15298: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
15299: LD_EXP 23
15303: PUSH
15304: LD_EXP 41
15308: AND
15309: PUSH
15310: LD_OWVAR 67
15314: PUSH
15315: LD_INT 4
15317: LESS
15318: AND
15319: IFFALSE 15338
15321: GO 15323
15323: DISABLE
// begin Difficulty := Difficulty + 1 ;
15324: LD_ADDR_OWVAR 67
15328: PUSH
15329: LD_OWVAR 67
15333: PUSH
15334: LD_INT 1
15336: PLUS
15337: ST_TO_ADDR
// end ;
15338: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
15339: LD_EXP 23
15343: PUSH
15344: LD_EXP 42
15348: AND
15349: IFFALSE 15452
15351: GO 15353
15353: DISABLE
15354: LD_INT 0
15356: PPUSH
// begin for i := 1 to 5 do
15357: LD_ADDR_VAR 0 1
15361: PUSH
15362: DOUBLE
15363: LD_INT 1
15365: DEC
15366: ST_TO_ADDR
15367: LD_INT 5
15369: PUSH
15370: FOR_TO
15371: IFFALSE 15450
// begin uc_nation := nation_nature ;
15373: LD_ADDR_OWVAR 21
15377: PUSH
15378: LD_INT 0
15380: ST_TO_ADDR
// uc_side := 0 ;
15381: LD_ADDR_OWVAR 20
15385: PUSH
15386: LD_INT 0
15388: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15389: LD_ADDR_OWVAR 29
15393: PUSH
15394: LD_INT 12
15396: PUSH
15397: LD_INT 12
15399: PUSH
15400: EMPTY
15401: LIST
15402: LIST
15403: ST_TO_ADDR
// hc_agressivity := 20 ;
15404: LD_ADDR_OWVAR 35
15408: PUSH
15409: LD_INT 20
15411: ST_TO_ADDR
// hc_class := class_tiger ;
15412: LD_ADDR_OWVAR 28
15416: PUSH
15417: LD_INT 14
15419: ST_TO_ADDR
// hc_gallery :=  ;
15420: LD_ADDR_OWVAR 33
15424: PUSH
15425: LD_STRING 
15427: ST_TO_ADDR
// hc_name :=  ;
15428: LD_ADDR_OWVAR 26
15432: PUSH
15433: LD_STRING 
15435: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
15436: CALL_OW 44
15440: PPUSH
15441: LD_INT 0
15443: PPUSH
15444: CALL_OW 51
// end ;
15448: GO 15370
15450: POP
15451: POP
// end ;
15452: PPOPN 1
15454: END
// every 0 0$1 trigger StreamModeActive and sBomb do
15455: LD_EXP 23
15459: PUSH
15460: LD_EXP 43
15464: AND
15465: IFFALSE 15474
15467: GO 15469
15469: DISABLE
// StreamSibBomb ;
15470: CALL 15475 0 0
15474: END
// export function StreamSibBomb ; var i , x , y ; begin
15475: LD_INT 0
15477: PPUSH
15478: PPUSH
15479: PPUSH
15480: PPUSH
// result := false ;
15481: LD_ADDR_VAR 0 1
15485: PUSH
15486: LD_INT 0
15488: ST_TO_ADDR
// for i := 1 to 16 do
15489: LD_ADDR_VAR 0 2
15493: PUSH
15494: DOUBLE
15495: LD_INT 1
15497: DEC
15498: ST_TO_ADDR
15499: LD_INT 16
15501: PUSH
15502: FOR_TO
15503: IFFALSE 15702
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15505: LD_ADDR_VAR 0 3
15509: PUSH
15510: LD_INT 10
15512: PUSH
15513: LD_INT 20
15515: PUSH
15516: LD_INT 30
15518: PUSH
15519: LD_INT 40
15521: PUSH
15522: LD_INT 50
15524: PUSH
15525: LD_INT 60
15527: PUSH
15528: LD_INT 70
15530: PUSH
15531: LD_INT 80
15533: PUSH
15534: LD_INT 90
15536: PUSH
15537: LD_INT 100
15539: PUSH
15540: LD_INT 110
15542: PUSH
15543: LD_INT 120
15545: PUSH
15546: LD_INT 130
15548: PUSH
15549: LD_INT 140
15551: PUSH
15552: LD_INT 150
15554: PUSH
15555: EMPTY
15556: LIST
15557: LIST
15558: LIST
15559: LIST
15560: LIST
15561: LIST
15562: LIST
15563: LIST
15564: LIST
15565: LIST
15566: LIST
15567: LIST
15568: LIST
15569: LIST
15570: LIST
15571: PUSH
15572: LD_INT 1
15574: PPUSH
15575: LD_INT 15
15577: PPUSH
15578: CALL_OW 12
15582: ARRAY
15583: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
15584: LD_ADDR_VAR 0 4
15588: PUSH
15589: LD_INT 10
15591: PUSH
15592: LD_INT 20
15594: PUSH
15595: LD_INT 30
15597: PUSH
15598: LD_INT 40
15600: PUSH
15601: LD_INT 50
15603: PUSH
15604: LD_INT 60
15606: PUSH
15607: LD_INT 70
15609: PUSH
15610: LD_INT 80
15612: PUSH
15613: LD_INT 90
15615: PUSH
15616: LD_INT 100
15618: PUSH
15619: LD_INT 110
15621: PUSH
15622: LD_INT 120
15624: PUSH
15625: LD_INT 130
15627: PUSH
15628: LD_INT 140
15630: PUSH
15631: LD_INT 150
15633: PUSH
15634: EMPTY
15635: LIST
15636: LIST
15637: LIST
15638: LIST
15639: LIST
15640: LIST
15641: LIST
15642: LIST
15643: LIST
15644: LIST
15645: LIST
15646: LIST
15647: LIST
15648: LIST
15649: LIST
15650: PUSH
15651: LD_INT 1
15653: PPUSH
15654: LD_INT 15
15656: PPUSH
15657: CALL_OW 12
15661: ARRAY
15662: ST_TO_ADDR
// if ValidHex ( x , y ) then
15663: LD_VAR 0 3
15667: PPUSH
15668: LD_VAR 0 4
15672: PPUSH
15673: CALL_OW 488
15677: IFFALSE 15700
// begin result := [ x , y ] ;
15679: LD_ADDR_VAR 0 1
15683: PUSH
15684: LD_VAR 0 3
15688: PUSH
15689: LD_VAR 0 4
15693: PUSH
15694: EMPTY
15695: LIST
15696: LIST
15697: ST_TO_ADDR
// break ;
15698: GO 15702
// end ; end ;
15700: GO 15502
15702: POP
15703: POP
// if result then
15704: LD_VAR 0 1
15708: IFFALSE 15768
// begin ToLua ( playSibBomb() ) ;
15710: LD_STRING playSibBomb()
15712: PPUSH
15713: CALL_OW 559
// wait ( 0 0$14 ) ;
15717: LD_INT 490
15719: PPUSH
15720: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
15724: LD_VAR 0 1
15728: PUSH
15729: LD_INT 1
15731: ARRAY
15732: PPUSH
15733: LD_VAR 0 1
15737: PUSH
15738: LD_INT 2
15740: ARRAY
15741: PPUSH
15742: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
15746: LD_VAR 0 1
15750: PUSH
15751: LD_INT 1
15753: ARRAY
15754: PPUSH
15755: LD_VAR 0 1
15759: PUSH
15760: LD_INT 2
15762: ARRAY
15763: PPUSH
15764: CALL_OW 429
// end ; end ;
15768: LD_VAR 0 1
15772: RET
// every 0 0$1 trigger StreamModeActive and sReset do
15773: LD_EXP 23
15777: PUSH
15778: LD_EXP 45
15782: AND
15783: IFFALSE 15795
15785: GO 15787
15787: DISABLE
// YouLost (  ) ;
15788: LD_STRING 
15790: PPUSH
15791: CALL_OW 104
15795: END
// every 0 0$1 trigger StreamModeActive and sFog do
15796: LD_EXP 23
15800: PUSH
15801: LD_EXP 44
15805: AND
15806: IFFALSE 15820
15808: GO 15810
15810: DISABLE
// FogOff ( your_side ) ;
15811: LD_OWVAR 2
15815: PPUSH
15816: CALL_OW 344
15820: END
// every 0 0$1 trigger StreamModeActive and sSun do
15821: LD_EXP 23
15825: PUSH
15826: LD_EXP 46
15830: AND
15831: IFFALSE 15859
15833: GO 15835
15835: DISABLE
// begin solar_recharge_percent := 0 ;
15836: LD_ADDR_OWVAR 79
15840: PUSH
15841: LD_INT 0
15843: ST_TO_ADDR
// wait ( 5 5$00 ) ;
15844: LD_INT 10500
15846: PPUSH
15847: CALL_OW 67
// solar_recharge_percent := 100 ;
15851: LD_ADDR_OWVAR 79
15855: PUSH
15856: LD_INT 100
15858: ST_TO_ADDR
// end ;
15859: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
15860: LD_EXP 23
15864: PUSH
15865: LD_EXP 47
15869: AND
15870: IFFALSE 16109
15872: GO 15874
15874: DISABLE
15875: LD_INT 0
15877: PPUSH
15878: PPUSH
15879: PPUSH
// begin tmp := [ ] ;
15880: LD_ADDR_VAR 0 3
15884: PUSH
15885: EMPTY
15886: ST_TO_ADDR
// for i := 1 to 6 do
15887: LD_ADDR_VAR 0 1
15891: PUSH
15892: DOUBLE
15893: LD_INT 1
15895: DEC
15896: ST_TO_ADDR
15897: LD_INT 6
15899: PUSH
15900: FOR_TO
15901: IFFALSE 16006
// begin uc_nation := nation_nature ;
15903: LD_ADDR_OWVAR 21
15907: PUSH
15908: LD_INT 0
15910: ST_TO_ADDR
// uc_side := 0 ;
15911: LD_ADDR_OWVAR 20
15915: PUSH
15916: LD_INT 0
15918: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
15919: LD_ADDR_OWVAR 29
15923: PUSH
15924: LD_INT 12
15926: PUSH
15927: LD_INT 12
15929: PUSH
15930: EMPTY
15931: LIST
15932: LIST
15933: ST_TO_ADDR
// hc_agressivity := 20 ;
15934: LD_ADDR_OWVAR 35
15938: PUSH
15939: LD_INT 20
15941: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
15942: LD_ADDR_OWVAR 28
15946: PUSH
15947: LD_INT 17
15949: ST_TO_ADDR
// hc_gallery :=  ;
15950: LD_ADDR_OWVAR 33
15954: PUSH
15955: LD_STRING 
15957: ST_TO_ADDR
// hc_name :=  ;
15958: LD_ADDR_OWVAR 26
15962: PUSH
15963: LD_STRING 
15965: ST_TO_ADDR
// un := CreateHuman ;
15966: LD_ADDR_VAR 0 2
15970: PUSH
15971: CALL_OW 44
15975: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
15976: LD_VAR 0 2
15980: PPUSH
15981: LD_INT 1
15983: PPUSH
15984: CALL_OW 51
// tmp := tmp ^ un ;
15988: LD_ADDR_VAR 0 3
15992: PUSH
15993: LD_VAR 0 3
15997: PUSH
15998: LD_VAR 0 2
16002: ADD
16003: ST_TO_ADDR
// end ;
16004: GO 15900
16006: POP
16007: POP
// repeat wait ( 0 0$1 ) ;
16008: LD_INT 35
16010: PPUSH
16011: CALL_OW 67
// for un in tmp do
16015: LD_ADDR_VAR 0 2
16019: PUSH
16020: LD_VAR 0 3
16024: PUSH
16025: FOR_IN
16026: IFFALSE 16100
// begin if IsDead ( un ) then
16028: LD_VAR 0 2
16032: PPUSH
16033: CALL_OW 301
16037: IFFALSE 16057
// begin tmp := tmp diff un ;
16039: LD_ADDR_VAR 0 3
16043: PUSH
16044: LD_VAR 0 3
16048: PUSH
16049: LD_VAR 0 2
16053: DIFF
16054: ST_TO_ADDR
// continue ;
16055: GO 16025
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
16057: LD_VAR 0 2
16061: PPUSH
16062: LD_INT 3
16064: PUSH
16065: LD_INT 22
16067: PUSH
16068: LD_INT 0
16070: PUSH
16071: EMPTY
16072: LIST
16073: LIST
16074: PUSH
16075: EMPTY
16076: LIST
16077: LIST
16078: PPUSH
16079: CALL_OW 69
16083: PPUSH
16084: LD_VAR 0 2
16088: PPUSH
16089: CALL_OW 74
16093: PPUSH
16094: CALL_OW 115
// end ;
16098: GO 16025
16100: POP
16101: POP
// until not tmp ;
16102: LD_VAR 0 3
16106: NOT
16107: IFFALSE 16008
// end ;
16109: PPOPN 3
16111: END
// every 0 0$1 trigger StreamModeActive and sTroll do
16112: LD_EXP 23
16116: PUSH
16117: LD_EXP 48
16121: AND
16122: IFFALSE 16176
16124: GO 16126
16126: DISABLE
// begin ToLua ( displayTroll(); ) ;
16127: LD_STRING displayTroll();
16129: PPUSH
16130: CALL_OW 559
// wait ( 3 3$00 ) ;
16134: LD_INT 6300
16136: PPUSH
16137: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16141: LD_STRING hideTroll();
16143: PPUSH
16144: CALL_OW 559
// wait ( 1 1$00 ) ;
16148: LD_INT 2100
16150: PPUSH
16151: CALL_OW 67
// ToLua ( displayTroll(); ) ;
16155: LD_STRING displayTroll();
16157: PPUSH
16158: CALL_OW 559
// wait ( 1 1$00 ) ;
16162: LD_INT 2100
16164: PPUSH
16165: CALL_OW 67
// ToLua ( hideTroll(); ) ;
16169: LD_STRING hideTroll();
16171: PPUSH
16172: CALL_OW 559
// end ;
16176: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
16177: LD_EXP 23
16181: PUSH
16182: LD_EXP 49
16186: AND
16187: IFFALSE 16250
16189: GO 16191
16191: DISABLE
16192: LD_INT 0
16194: PPUSH
// begin p := 0 ;
16195: LD_ADDR_VAR 0 1
16199: PUSH
16200: LD_INT 0
16202: ST_TO_ADDR
// repeat game_speed := 1 ;
16203: LD_ADDR_OWVAR 65
16207: PUSH
16208: LD_INT 1
16210: ST_TO_ADDR
// wait ( 0 0$1 ) ;
16211: LD_INT 35
16213: PPUSH
16214: CALL_OW 67
// p := p + 1 ;
16218: LD_ADDR_VAR 0 1
16222: PUSH
16223: LD_VAR 0 1
16227: PUSH
16228: LD_INT 1
16230: PLUS
16231: ST_TO_ADDR
// until p >= 60 ;
16232: LD_VAR 0 1
16236: PUSH
16237: LD_INT 60
16239: GREATEREQUAL
16240: IFFALSE 16203
// game_speed := 4 ;
16242: LD_ADDR_OWVAR 65
16246: PUSH
16247: LD_INT 4
16249: ST_TO_ADDR
// end ;
16250: PPOPN 1
16252: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
16253: LD_EXP 23
16257: PUSH
16258: LD_EXP 50
16262: AND
16263: IFFALSE 16409
16265: GO 16267
16267: DISABLE
16268: LD_INT 0
16270: PPUSH
16271: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
16272: LD_ADDR_VAR 0 1
16276: PUSH
16277: LD_INT 22
16279: PUSH
16280: LD_OWVAR 2
16284: PUSH
16285: EMPTY
16286: LIST
16287: LIST
16288: PUSH
16289: LD_INT 2
16291: PUSH
16292: LD_INT 30
16294: PUSH
16295: LD_INT 0
16297: PUSH
16298: EMPTY
16299: LIST
16300: LIST
16301: PUSH
16302: LD_INT 30
16304: PUSH
16305: LD_INT 1
16307: PUSH
16308: EMPTY
16309: LIST
16310: LIST
16311: PUSH
16312: EMPTY
16313: LIST
16314: LIST
16315: LIST
16316: PUSH
16317: EMPTY
16318: LIST
16319: LIST
16320: PPUSH
16321: CALL_OW 69
16325: ST_TO_ADDR
// if not depot then
16326: LD_VAR 0 1
16330: NOT
16331: IFFALSE 16335
// exit ;
16333: GO 16409
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
16335: LD_ADDR_VAR 0 2
16339: PUSH
16340: LD_VAR 0 1
16344: PUSH
16345: LD_INT 1
16347: PPUSH
16348: LD_VAR 0 1
16352: PPUSH
16353: CALL_OW 12
16357: ARRAY
16358: PPUSH
16359: CALL_OW 274
16363: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
16364: LD_VAR 0 2
16368: PPUSH
16369: LD_INT 1
16371: PPUSH
16372: LD_INT 0
16374: PPUSH
16375: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
16379: LD_VAR 0 2
16383: PPUSH
16384: LD_INT 2
16386: PPUSH
16387: LD_INT 0
16389: PPUSH
16390: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
16394: LD_VAR 0 2
16398: PPUSH
16399: LD_INT 3
16401: PPUSH
16402: LD_INT 0
16404: PPUSH
16405: CALL_OW 277
// end ;
16409: PPOPN 2
16411: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
16412: LD_EXP 23
16416: PUSH
16417: LD_EXP 51
16421: AND
16422: IFFALSE 16519
16424: GO 16426
16426: DISABLE
16427: LD_INT 0
16429: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
16430: LD_ADDR_VAR 0 1
16434: PUSH
16435: LD_INT 22
16437: PUSH
16438: LD_OWVAR 2
16442: PUSH
16443: EMPTY
16444: LIST
16445: LIST
16446: PUSH
16447: LD_INT 21
16449: PUSH
16450: LD_INT 1
16452: PUSH
16453: EMPTY
16454: LIST
16455: LIST
16456: PUSH
16457: LD_INT 3
16459: PUSH
16460: LD_INT 23
16462: PUSH
16463: LD_INT 0
16465: PUSH
16466: EMPTY
16467: LIST
16468: LIST
16469: PUSH
16470: EMPTY
16471: LIST
16472: LIST
16473: PUSH
16474: EMPTY
16475: LIST
16476: LIST
16477: LIST
16478: PPUSH
16479: CALL_OW 69
16483: ST_TO_ADDR
// if not tmp then
16484: LD_VAR 0 1
16488: NOT
16489: IFFALSE 16493
// exit ;
16491: GO 16519
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
16493: LD_VAR 0 1
16497: PUSH
16498: LD_INT 1
16500: PPUSH
16501: LD_VAR 0 1
16505: PPUSH
16506: CALL_OW 12
16510: ARRAY
16511: PPUSH
16512: LD_INT 200
16514: PPUSH
16515: CALL_OW 234
// end ;
16519: PPOPN 1
16521: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
16522: LD_EXP 23
16526: PUSH
16527: LD_EXP 52
16531: AND
16532: IFFALSE 16611
16534: GO 16536
16536: DISABLE
16537: LD_INT 0
16539: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
16540: LD_ADDR_VAR 0 1
16544: PUSH
16545: LD_INT 22
16547: PUSH
16548: LD_OWVAR 2
16552: PUSH
16553: EMPTY
16554: LIST
16555: LIST
16556: PUSH
16557: LD_INT 21
16559: PUSH
16560: LD_INT 2
16562: PUSH
16563: EMPTY
16564: LIST
16565: LIST
16566: PUSH
16567: EMPTY
16568: LIST
16569: LIST
16570: PPUSH
16571: CALL_OW 69
16575: ST_TO_ADDR
// if not tmp then
16576: LD_VAR 0 1
16580: NOT
16581: IFFALSE 16585
// exit ;
16583: GO 16611
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
16585: LD_VAR 0 1
16589: PUSH
16590: LD_INT 1
16592: PPUSH
16593: LD_VAR 0 1
16597: PPUSH
16598: CALL_OW 12
16602: ARRAY
16603: PPUSH
16604: LD_INT 60
16606: PPUSH
16607: CALL_OW 234
// end ;
16611: PPOPN 1
16613: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
16614: LD_EXP 23
16618: PUSH
16619: LD_EXP 53
16623: AND
16624: IFFALSE 16723
16626: GO 16628
16628: DISABLE
16629: LD_INT 0
16631: PPUSH
16632: PPUSH
// begin enable ;
16633: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
16634: LD_ADDR_VAR 0 1
16638: PUSH
16639: LD_INT 22
16641: PUSH
16642: LD_OWVAR 2
16646: PUSH
16647: EMPTY
16648: LIST
16649: LIST
16650: PUSH
16651: LD_INT 61
16653: PUSH
16654: EMPTY
16655: LIST
16656: PUSH
16657: LD_INT 33
16659: PUSH
16660: LD_INT 2
16662: PUSH
16663: EMPTY
16664: LIST
16665: LIST
16666: PUSH
16667: EMPTY
16668: LIST
16669: LIST
16670: LIST
16671: PPUSH
16672: CALL_OW 69
16676: ST_TO_ADDR
// if not tmp then
16677: LD_VAR 0 1
16681: NOT
16682: IFFALSE 16686
// exit ;
16684: GO 16723
// for i in tmp do
16686: LD_ADDR_VAR 0 2
16690: PUSH
16691: LD_VAR 0 1
16695: PUSH
16696: FOR_IN
16697: IFFALSE 16721
// if IsControledBy ( i ) then
16699: LD_VAR 0 2
16703: PPUSH
16704: CALL_OW 312
16708: IFFALSE 16719
// ComUnlink ( i ) ;
16710: LD_VAR 0 2
16714: PPUSH
16715: CALL_OW 136
16719: GO 16696
16721: POP
16722: POP
// end ;
16723: PPOPN 2
16725: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
16726: LD_EXP 23
16730: PUSH
16731: LD_EXP 54
16735: AND
16736: IFFALSE 16876
16738: GO 16740
16740: DISABLE
16741: LD_INT 0
16743: PPUSH
16744: PPUSH
// begin ToLua ( displayPowell(); ) ;
16745: LD_STRING displayPowell();
16747: PPUSH
16748: CALL_OW 559
// uc_side := 0 ;
16752: LD_ADDR_OWVAR 20
16756: PUSH
16757: LD_INT 0
16759: ST_TO_ADDR
// uc_nation := 2 ;
16760: LD_ADDR_OWVAR 21
16764: PUSH
16765: LD_INT 2
16767: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
16768: LD_ADDR_OWVAR 37
16772: PUSH
16773: LD_INT 14
16775: ST_TO_ADDR
// vc_engine := engine_siberite ;
16776: LD_ADDR_OWVAR 39
16780: PUSH
16781: LD_INT 3
16783: ST_TO_ADDR
// vc_control := control_apeman ;
16784: LD_ADDR_OWVAR 38
16788: PUSH
16789: LD_INT 5
16791: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
16792: LD_ADDR_OWVAR 40
16796: PUSH
16797: LD_INT 29
16799: ST_TO_ADDR
// un := CreateVehicle ;
16800: LD_ADDR_VAR 0 2
16804: PUSH
16805: CALL_OW 45
16809: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16810: LD_VAR 0 2
16814: PPUSH
16815: LD_INT 1
16817: PPUSH
16818: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16822: LD_INT 35
16824: PPUSH
16825: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16829: LD_VAR 0 2
16833: PPUSH
16834: LD_INT 22
16836: PUSH
16837: LD_OWVAR 2
16841: PUSH
16842: EMPTY
16843: LIST
16844: LIST
16845: PPUSH
16846: CALL_OW 69
16850: PPUSH
16851: LD_VAR 0 2
16855: PPUSH
16856: CALL_OW 74
16860: PPUSH
16861: CALL_OW 115
// until IsDead ( un ) ;
16865: LD_VAR 0 2
16869: PPUSH
16870: CALL_OW 301
16874: IFFALSE 16822
// end ;
16876: PPOPN 2
16878: END
// every 0 0$1 trigger StreamModeActive and sStu do
16879: LD_EXP 23
16883: PUSH
16884: LD_EXP 62
16888: AND
16889: IFFALSE 16905
16891: GO 16893
16893: DISABLE
// begin ToLua ( displayStucuk(); ) ;
16894: LD_STRING displayStucuk();
16896: PPUSH
16897: CALL_OW 559
// ResetFog ;
16901: CALL_OW 335
// end ;
16905: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
16906: LD_EXP 23
16910: PUSH
16911: LD_EXP 55
16915: AND
16916: IFFALSE 17057
16918: GO 16920
16920: DISABLE
16921: LD_INT 0
16923: PPUSH
16924: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
16925: LD_ADDR_VAR 0 2
16929: PUSH
16930: LD_INT 22
16932: PUSH
16933: LD_OWVAR 2
16937: PUSH
16938: EMPTY
16939: LIST
16940: LIST
16941: PUSH
16942: LD_INT 21
16944: PUSH
16945: LD_INT 1
16947: PUSH
16948: EMPTY
16949: LIST
16950: LIST
16951: PUSH
16952: EMPTY
16953: LIST
16954: LIST
16955: PPUSH
16956: CALL_OW 69
16960: ST_TO_ADDR
// if not tmp then
16961: LD_VAR 0 2
16965: NOT
16966: IFFALSE 16970
// exit ;
16968: GO 17057
// un := tmp [ rand ( 1 , tmp ) ] ;
16970: LD_ADDR_VAR 0 1
16974: PUSH
16975: LD_VAR 0 2
16979: PUSH
16980: LD_INT 1
16982: PPUSH
16983: LD_VAR 0 2
16987: PPUSH
16988: CALL_OW 12
16992: ARRAY
16993: ST_TO_ADDR
// SetSide ( un , 0 ) ;
16994: LD_VAR 0 1
16998: PPUSH
16999: LD_INT 0
17001: PPUSH
17002: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
17006: LD_VAR 0 1
17010: PPUSH
17011: LD_OWVAR 3
17015: PUSH
17016: LD_VAR 0 1
17020: DIFF
17021: PPUSH
17022: LD_VAR 0 1
17026: PPUSH
17027: CALL_OW 74
17031: PPUSH
17032: CALL_OW 115
// wait ( 0 0$20 ) ;
17036: LD_INT 700
17038: PPUSH
17039: CALL_OW 67
// SetSide ( un , your_side ) ;
17043: LD_VAR 0 1
17047: PPUSH
17048: LD_OWVAR 2
17052: PPUSH
17053: CALL_OW 235
// end ;
17057: PPOPN 2
17059: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
17060: LD_EXP 23
17064: PUSH
17065: LD_EXP 56
17069: AND
17070: IFFALSE 17176
17072: GO 17074
17074: DISABLE
17075: LD_INT 0
17077: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
17078: LD_ADDR_VAR 0 1
17082: PUSH
17083: LD_INT 22
17085: PUSH
17086: LD_OWVAR 2
17090: PUSH
17091: EMPTY
17092: LIST
17093: LIST
17094: PUSH
17095: LD_INT 2
17097: PUSH
17098: LD_INT 30
17100: PUSH
17101: LD_INT 0
17103: PUSH
17104: EMPTY
17105: LIST
17106: LIST
17107: PUSH
17108: LD_INT 30
17110: PUSH
17111: LD_INT 1
17113: PUSH
17114: EMPTY
17115: LIST
17116: LIST
17117: PUSH
17118: EMPTY
17119: LIST
17120: LIST
17121: LIST
17122: PUSH
17123: EMPTY
17124: LIST
17125: LIST
17126: PPUSH
17127: CALL_OW 69
17131: ST_TO_ADDR
// if not depot then
17132: LD_VAR 0 1
17136: NOT
17137: IFFALSE 17141
// exit ;
17139: GO 17176
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
17141: LD_VAR 0 1
17145: PUSH
17146: LD_INT 1
17148: ARRAY
17149: PPUSH
17150: CALL_OW 250
17154: PPUSH
17155: LD_VAR 0 1
17159: PUSH
17160: LD_INT 1
17162: ARRAY
17163: PPUSH
17164: CALL_OW 251
17168: PPUSH
17169: LD_INT 70
17171: PPUSH
17172: CALL_OW 495
// end ;
17176: PPOPN 1
17178: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
17179: LD_EXP 23
17183: PUSH
17184: LD_EXP 57
17188: AND
17189: IFFALSE 17400
17191: GO 17193
17193: DISABLE
17194: LD_INT 0
17196: PPUSH
17197: PPUSH
17198: PPUSH
17199: PPUSH
17200: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
17201: LD_ADDR_VAR 0 5
17205: PUSH
17206: LD_INT 22
17208: PUSH
17209: LD_OWVAR 2
17213: PUSH
17214: EMPTY
17215: LIST
17216: LIST
17217: PUSH
17218: LD_INT 21
17220: PUSH
17221: LD_INT 1
17223: PUSH
17224: EMPTY
17225: LIST
17226: LIST
17227: PUSH
17228: EMPTY
17229: LIST
17230: LIST
17231: PPUSH
17232: CALL_OW 69
17236: ST_TO_ADDR
// if not tmp then
17237: LD_VAR 0 5
17241: NOT
17242: IFFALSE 17246
// exit ;
17244: GO 17400
// for i in tmp do
17246: LD_ADDR_VAR 0 1
17250: PUSH
17251: LD_VAR 0 5
17255: PUSH
17256: FOR_IN
17257: IFFALSE 17398
// begin d := rand ( 0 , 5 ) ;
17259: LD_ADDR_VAR 0 4
17263: PUSH
17264: LD_INT 0
17266: PPUSH
17267: LD_INT 5
17269: PPUSH
17270: CALL_OW 12
17274: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
17275: LD_ADDR_VAR 0 2
17279: PUSH
17280: LD_VAR 0 1
17284: PPUSH
17285: CALL_OW 250
17289: PPUSH
17290: LD_VAR 0 4
17294: PPUSH
17295: LD_INT 3
17297: PPUSH
17298: LD_INT 12
17300: PPUSH
17301: CALL_OW 12
17305: PPUSH
17306: CALL_OW 272
17310: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
17311: LD_ADDR_VAR 0 3
17315: PUSH
17316: LD_VAR 0 1
17320: PPUSH
17321: CALL_OW 251
17325: PPUSH
17326: LD_VAR 0 4
17330: PPUSH
17331: LD_INT 3
17333: PPUSH
17334: LD_INT 12
17336: PPUSH
17337: CALL_OW 12
17341: PPUSH
17342: CALL_OW 273
17346: ST_TO_ADDR
// if ValidHex ( x , y ) then
17347: LD_VAR 0 2
17351: PPUSH
17352: LD_VAR 0 3
17356: PPUSH
17357: CALL_OW 488
17361: IFFALSE 17396
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
17363: LD_VAR 0 1
17367: PPUSH
17368: LD_VAR 0 2
17372: PPUSH
17373: LD_VAR 0 3
17377: PPUSH
17378: LD_INT 3
17380: PPUSH
17381: LD_INT 6
17383: PPUSH
17384: CALL_OW 12
17388: PPUSH
17389: LD_INT 1
17391: PPUSH
17392: CALL_OW 483
// end ;
17396: GO 17256
17398: POP
17399: POP
// end ;
17400: PPOPN 5
17402: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
17403: LD_EXP 23
17407: PUSH
17408: LD_EXP 58
17412: AND
17413: IFFALSE 17507
17415: GO 17417
17417: DISABLE
17418: LD_INT 0
17420: PPUSH
17421: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
17422: LD_ADDR_VAR 0 2
17426: PUSH
17427: LD_INT 22
17429: PUSH
17430: LD_OWVAR 2
17434: PUSH
17435: EMPTY
17436: LIST
17437: LIST
17438: PUSH
17439: LD_INT 32
17441: PUSH
17442: LD_INT 1
17444: PUSH
17445: EMPTY
17446: LIST
17447: LIST
17448: PUSH
17449: LD_INT 21
17451: PUSH
17452: LD_INT 2
17454: PUSH
17455: EMPTY
17456: LIST
17457: LIST
17458: PUSH
17459: EMPTY
17460: LIST
17461: LIST
17462: LIST
17463: PPUSH
17464: CALL_OW 69
17468: ST_TO_ADDR
// if not tmp then
17469: LD_VAR 0 2
17473: NOT
17474: IFFALSE 17478
// exit ;
17476: GO 17507
// for i in tmp do
17478: LD_ADDR_VAR 0 1
17482: PUSH
17483: LD_VAR 0 2
17487: PUSH
17488: FOR_IN
17489: IFFALSE 17505
// SetFuel ( i , 0 ) ;
17491: LD_VAR 0 1
17495: PPUSH
17496: LD_INT 0
17498: PPUSH
17499: CALL_OW 240
17503: GO 17488
17505: POP
17506: POP
// end ;
17507: PPOPN 2
17509: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
17510: LD_EXP 23
17514: PUSH
17515: LD_EXP 59
17519: AND
17520: IFFALSE 17586
17522: GO 17524
17524: DISABLE
17525: LD_INT 0
17527: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17528: LD_ADDR_VAR 0 1
17532: PUSH
17533: LD_INT 22
17535: PUSH
17536: LD_OWVAR 2
17540: PUSH
17541: EMPTY
17542: LIST
17543: LIST
17544: PUSH
17545: LD_INT 30
17547: PUSH
17548: LD_INT 29
17550: PUSH
17551: EMPTY
17552: LIST
17553: LIST
17554: PUSH
17555: EMPTY
17556: LIST
17557: LIST
17558: PPUSH
17559: CALL_OW 69
17563: ST_TO_ADDR
// if not tmp then
17564: LD_VAR 0 1
17568: NOT
17569: IFFALSE 17573
// exit ;
17571: GO 17586
// DestroyUnit ( tmp [ 1 ] ) ;
17573: LD_VAR 0 1
17577: PUSH
17578: LD_INT 1
17580: ARRAY
17581: PPUSH
17582: CALL_OW 65
// end ;
17586: PPOPN 1
17588: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
17589: LD_EXP 23
17593: PUSH
17594: LD_EXP 61
17598: AND
17599: IFFALSE 17728
17601: GO 17603
17603: DISABLE
17604: LD_INT 0
17606: PPUSH
// begin uc_side := 0 ;
17607: LD_ADDR_OWVAR 20
17611: PUSH
17612: LD_INT 0
17614: ST_TO_ADDR
// uc_nation := nation_arabian ;
17615: LD_ADDR_OWVAR 21
17619: PUSH
17620: LD_INT 2
17622: ST_TO_ADDR
// hc_gallery :=  ;
17623: LD_ADDR_OWVAR 33
17627: PUSH
17628: LD_STRING 
17630: ST_TO_ADDR
// hc_name :=  ;
17631: LD_ADDR_OWVAR 26
17635: PUSH
17636: LD_STRING 
17638: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
17639: LD_INT 1
17641: PPUSH
17642: LD_INT 11
17644: PPUSH
17645: LD_INT 10
17647: PPUSH
17648: CALL_OW 380
// un := CreateHuman ;
17652: LD_ADDR_VAR 0 1
17656: PUSH
17657: CALL_OW 44
17661: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
17662: LD_VAR 0 1
17666: PPUSH
17667: LD_INT 1
17669: PPUSH
17670: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
17674: LD_INT 35
17676: PPUSH
17677: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
17681: LD_VAR 0 1
17685: PPUSH
17686: LD_INT 22
17688: PUSH
17689: LD_OWVAR 2
17693: PUSH
17694: EMPTY
17695: LIST
17696: LIST
17697: PPUSH
17698: CALL_OW 69
17702: PPUSH
17703: LD_VAR 0 1
17707: PPUSH
17708: CALL_OW 74
17712: PPUSH
17713: CALL_OW 115
// until IsDead ( un ) ;
17717: LD_VAR 0 1
17721: PPUSH
17722: CALL_OW 301
17726: IFFALSE 17674
// end ;
17728: PPOPN 1
17730: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
17731: LD_EXP 23
17735: PUSH
17736: LD_EXP 63
17740: AND
17741: IFFALSE 17753
17743: GO 17745
17745: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
17746: LD_STRING earthquake(getX(game), 0, 32)
17748: PPUSH
17749: CALL_OW 559
17753: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
17754: LD_EXP 23
17758: PUSH
17759: LD_EXP 64
17763: AND
17764: IFFALSE 17855
17766: GO 17768
17768: DISABLE
17769: LD_INT 0
17771: PPUSH
// begin enable ;
17772: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
17773: LD_ADDR_VAR 0 1
17777: PUSH
17778: LD_INT 22
17780: PUSH
17781: LD_OWVAR 2
17785: PUSH
17786: EMPTY
17787: LIST
17788: LIST
17789: PUSH
17790: LD_INT 21
17792: PUSH
17793: LD_INT 2
17795: PUSH
17796: EMPTY
17797: LIST
17798: LIST
17799: PUSH
17800: LD_INT 33
17802: PUSH
17803: LD_INT 3
17805: PUSH
17806: EMPTY
17807: LIST
17808: LIST
17809: PUSH
17810: EMPTY
17811: LIST
17812: LIST
17813: LIST
17814: PPUSH
17815: CALL_OW 69
17819: ST_TO_ADDR
// if not tmp then
17820: LD_VAR 0 1
17824: NOT
17825: IFFALSE 17829
// exit ;
17827: GO 17855
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17829: LD_VAR 0 1
17833: PUSH
17834: LD_INT 1
17836: PPUSH
17837: LD_VAR 0 1
17841: PPUSH
17842: CALL_OW 12
17846: ARRAY
17847: PPUSH
17848: LD_INT 1
17850: PPUSH
17851: CALL_OW 234
// end ;
17855: PPOPN 1
17857: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
17858: LD_EXP 23
17862: PUSH
17863: LD_EXP 65
17867: AND
17868: IFFALSE 18009
17870: GO 17872
17872: DISABLE
17873: LD_INT 0
17875: PPUSH
17876: PPUSH
17877: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17878: LD_ADDR_VAR 0 3
17882: PUSH
17883: LD_INT 22
17885: PUSH
17886: LD_OWVAR 2
17890: PUSH
17891: EMPTY
17892: LIST
17893: LIST
17894: PUSH
17895: LD_INT 25
17897: PUSH
17898: LD_INT 1
17900: PUSH
17901: EMPTY
17902: LIST
17903: LIST
17904: PUSH
17905: EMPTY
17906: LIST
17907: LIST
17908: PPUSH
17909: CALL_OW 69
17913: ST_TO_ADDR
// if not tmp then
17914: LD_VAR 0 3
17918: NOT
17919: IFFALSE 17923
// exit ;
17921: GO 18009
// un := tmp [ rand ( 1 , tmp ) ] ;
17923: LD_ADDR_VAR 0 2
17927: PUSH
17928: LD_VAR 0 3
17932: PUSH
17933: LD_INT 1
17935: PPUSH
17936: LD_VAR 0 3
17940: PPUSH
17941: CALL_OW 12
17945: ARRAY
17946: ST_TO_ADDR
// if Crawls ( un ) then
17947: LD_VAR 0 2
17951: PPUSH
17952: CALL_OW 318
17956: IFFALSE 17967
// ComWalk ( un ) ;
17958: LD_VAR 0 2
17962: PPUSH
17963: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
17967: LD_VAR 0 2
17971: PPUSH
17972: LD_INT 9
17974: PPUSH
17975: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
17979: LD_INT 28
17981: PPUSH
17982: LD_OWVAR 2
17986: PPUSH
17987: LD_INT 2
17989: PPUSH
17990: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
17994: LD_INT 29
17996: PPUSH
17997: LD_OWVAR 2
18001: PPUSH
18002: LD_INT 2
18004: PPUSH
18005: CALL_OW 322
// end ;
18009: PPOPN 3
18011: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
18012: LD_EXP 23
18016: PUSH
18017: LD_EXP 66
18021: AND
18022: IFFALSE 18133
18024: GO 18026
18026: DISABLE
18027: LD_INT 0
18029: PPUSH
18030: PPUSH
18031: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
18032: LD_ADDR_VAR 0 3
18036: PUSH
18037: LD_INT 22
18039: PUSH
18040: LD_OWVAR 2
18044: PUSH
18045: EMPTY
18046: LIST
18047: LIST
18048: PUSH
18049: LD_INT 25
18051: PUSH
18052: LD_INT 1
18054: PUSH
18055: EMPTY
18056: LIST
18057: LIST
18058: PUSH
18059: EMPTY
18060: LIST
18061: LIST
18062: PPUSH
18063: CALL_OW 69
18067: ST_TO_ADDR
// if not tmp then
18068: LD_VAR 0 3
18072: NOT
18073: IFFALSE 18077
// exit ;
18075: GO 18133
// un := tmp [ rand ( 1 , tmp ) ] ;
18077: LD_ADDR_VAR 0 2
18081: PUSH
18082: LD_VAR 0 3
18086: PUSH
18087: LD_INT 1
18089: PPUSH
18090: LD_VAR 0 3
18094: PPUSH
18095: CALL_OW 12
18099: ARRAY
18100: ST_TO_ADDR
// if Crawls ( un ) then
18101: LD_VAR 0 2
18105: PPUSH
18106: CALL_OW 318
18110: IFFALSE 18121
// ComWalk ( un ) ;
18112: LD_VAR 0 2
18116: PPUSH
18117: CALL_OW 138
// SetClass ( un , class_mortar ) ;
18121: LD_VAR 0 2
18125: PPUSH
18126: LD_INT 8
18128: PPUSH
18129: CALL_OW 336
// end ;
18133: PPOPN 3
18135: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
18136: LD_EXP 23
18140: PUSH
18141: LD_EXP 67
18145: AND
18146: IFFALSE 18290
18148: GO 18150
18150: DISABLE
18151: LD_INT 0
18153: PPUSH
18154: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
18155: LD_ADDR_VAR 0 2
18159: PUSH
18160: LD_INT 22
18162: PUSH
18163: LD_OWVAR 2
18167: PUSH
18168: EMPTY
18169: LIST
18170: LIST
18171: PUSH
18172: LD_INT 21
18174: PUSH
18175: LD_INT 2
18177: PUSH
18178: EMPTY
18179: LIST
18180: LIST
18181: PUSH
18182: LD_INT 2
18184: PUSH
18185: LD_INT 34
18187: PUSH
18188: LD_INT 12
18190: PUSH
18191: EMPTY
18192: LIST
18193: LIST
18194: PUSH
18195: LD_INT 34
18197: PUSH
18198: LD_INT 51
18200: PUSH
18201: EMPTY
18202: LIST
18203: LIST
18204: PUSH
18205: LD_INT 34
18207: PUSH
18208: LD_INT 32
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: PUSH
18215: EMPTY
18216: LIST
18217: LIST
18218: LIST
18219: LIST
18220: PUSH
18221: EMPTY
18222: LIST
18223: LIST
18224: LIST
18225: PPUSH
18226: CALL_OW 69
18230: ST_TO_ADDR
// if not tmp then
18231: LD_VAR 0 2
18235: NOT
18236: IFFALSE 18240
// exit ;
18238: GO 18290
// for i in tmp do
18240: LD_ADDR_VAR 0 1
18244: PUSH
18245: LD_VAR 0 2
18249: PUSH
18250: FOR_IN
18251: IFFALSE 18288
// if GetCargo ( i , mat_artifact ) = 0 then
18253: LD_VAR 0 1
18257: PPUSH
18258: LD_INT 4
18260: PPUSH
18261: CALL_OW 289
18265: PUSH
18266: LD_INT 0
18268: EQUAL
18269: IFFALSE 18286
// SetCargo ( i , mat_siberit , 100 ) ;
18271: LD_VAR 0 1
18275: PPUSH
18276: LD_INT 3
18278: PPUSH
18279: LD_INT 100
18281: PPUSH
18282: CALL_OW 290
18286: GO 18250
18288: POP
18289: POP
// end ;
18290: PPOPN 2
18292: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
18293: LD_EXP 23
18297: PUSH
18298: LD_EXP 68
18302: AND
18303: IFFALSE 18486
18305: GO 18307
18307: DISABLE
18308: LD_INT 0
18310: PPUSH
18311: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
18312: LD_ADDR_VAR 0 2
18316: PUSH
18317: LD_INT 22
18319: PUSH
18320: LD_OWVAR 2
18324: PUSH
18325: EMPTY
18326: LIST
18327: LIST
18328: PPUSH
18329: CALL_OW 69
18333: ST_TO_ADDR
// if not tmp then
18334: LD_VAR 0 2
18338: NOT
18339: IFFALSE 18343
// exit ;
18341: GO 18486
// for i := 1 to 2 do
18343: LD_ADDR_VAR 0 1
18347: PUSH
18348: DOUBLE
18349: LD_INT 1
18351: DEC
18352: ST_TO_ADDR
18353: LD_INT 2
18355: PUSH
18356: FOR_TO
18357: IFFALSE 18484
// begin uc_side := your_side ;
18359: LD_ADDR_OWVAR 20
18363: PUSH
18364: LD_OWVAR 2
18368: ST_TO_ADDR
// uc_nation := nation_american ;
18369: LD_ADDR_OWVAR 21
18373: PUSH
18374: LD_INT 1
18376: ST_TO_ADDR
// vc_chassis := us_morphling ;
18377: LD_ADDR_OWVAR 37
18381: PUSH
18382: LD_INT 5
18384: ST_TO_ADDR
// vc_engine := engine_siberite ;
18385: LD_ADDR_OWVAR 39
18389: PUSH
18390: LD_INT 3
18392: ST_TO_ADDR
// vc_control := control_computer ;
18393: LD_ADDR_OWVAR 38
18397: PUSH
18398: LD_INT 3
18400: ST_TO_ADDR
// vc_weapon := us_double_laser ;
18401: LD_ADDR_OWVAR 40
18405: PUSH
18406: LD_INT 10
18408: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
18409: LD_VAR 0 2
18413: PUSH
18414: LD_INT 1
18416: ARRAY
18417: PPUSH
18418: CALL_OW 310
18422: NOT
18423: IFFALSE 18470
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
18425: CALL_OW 45
18429: PPUSH
18430: LD_VAR 0 2
18434: PUSH
18435: LD_INT 1
18437: ARRAY
18438: PPUSH
18439: CALL_OW 250
18443: PPUSH
18444: LD_VAR 0 2
18448: PUSH
18449: LD_INT 1
18451: ARRAY
18452: PPUSH
18453: CALL_OW 251
18457: PPUSH
18458: LD_INT 12
18460: PPUSH
18461: LD_INT 1
18463: PPUSH
18464: CALL_OW 50
18468: GO 18482
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
18470: CALL_OW 45
18474: PPUSH
18475: LD_INT 1
18477: PPUSH
18478: CALL_OW 51
// end ;
18482: GO 18356
18484: POP
18485: POP
// end ;
18486: PPOPN 2
18488: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
18489: LD_EXP 23
18493: PUSH
18494: LD_EXP 69
18498: AND
18499: IFFALSE 18721
18501: GO 18503
18503: DISABLE
18504: LD_INT 0
18506: PPUSH
18507: PPUSH
18508: PPUSH
18509: PPUSH
18510: PPUSH
18511: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18512: LD_ADDR_VAR 0 6
18516: PUSH
18517: LD_INT 22
18519: PUSH
18520: LD_OWVAR 2
18524: PUSH
18525: EMPTY
18526: LIST
18527: LIST
18528: PUSH
18529: LD_INT 21
18531: PUSH
18532: LD_INT 1
18534: PUSH
18535: EMPTY
18536: LIST
18537: LIST
18538: PUSH
18539: LD_INT 3
18541: PUSH
18542: LD_INT 23
18544: PUSH
18545: LD_INT 0
18547: PUSH
18548: EMPTY
18549: LIST
18550: LIST
18551: PUSH
18552: EMPTY
18553: LIST
18554: LIST
18555: PUSH
18556: EMPTY
18557: LIST
18558: LIST
18559: LIST
18560: PPUSH
18561: CALL_OW 69
18565: ST_TO_ADDR
// if not tmp then
18566: LD_VAR 0 6
18570: NOT
18571: IFFALSE 18575
// exit ;
18573: GO 18721
// s1 := rand ( 1 , 4 ) ;
18575: LD_ADDR_VAR 0 2
18579: PUSH
18580: LD_INT 1
18582: PPUSH
18583: LD_INT 4
18585: PPUSH
18586: CALL_OW 12
18590: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
18591: LD_ADDR_VAR 0 4
18595: PUSH
18596: LD_VAR 0 6
18600: PUSH
18601: LD_INT 1
18603: ARRAY
18604: PPUSH
18605: LD_VAR 0 2
18609: PPUSH
18610: CALL_OW 259
18614: ST_TO_ADDR
// if s1 = 1 then
18615: LD_VAR 0 2
18619: PUSH
18620: LD_INT 1
18622: EQUAL
18623: IFFALSE 18643
// s2 := rand ( 2 , 4 ) else
18625: LD_ADDR_VAR 0 3
18629: PUSH
18630: LD_INT 2
18632: PPUSH
18633: LD_INT 4
18635: PPUSH
18636: CALL_OW 12
18640: ST_TO_ADDR
18641: GO 18651
// s2 := 1 ;
18643: LD_ADDR_VAR 0 3
18647: PUSH
18648: LD_INT 1
18650: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
18651: LD_ADDR_VAR 0 5
18655: PUSH
18656: LD_VAR 0 6
18660: PUSH
18661: LD_INT 1
18663: ARRAY
18664: PPUSH
18665: LD_VAR 0 3
18669: PPUSH
18670: CALL_OW 259
18674: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
18675: LD_VAR 0 6
18679: PUSH
18680: LD_INT 1
18682: ARRAY
18683: PPUSH
18684: LD_VAR 0 2
18688: PPUSH
18689: LD_VAR 0 5
18693: PPUSH
18694: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
18698: LD_VAR 0 6
18702: PUSH
18703: LD_INT 1
18705: ARRAY
18706: PPUSH
18707: LD_VAR 0 3
18711: PPUSH
18712: LD_VAR 0 4
18716: PPUSH
18717: CALL_OW 237
// end ;
18721: PPOPN 6
18723: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
18724: LD_EXP 23
18728: PUSH
18729: LD_EXP 70
18733: AND
18734: IFFALSE 18813
18736: GO 18738
18738: DISABLE
18739: LD_INT 0
18741: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
18742: LD_ADDR_VAR 0 1
18746: PUSH
18747: LD_INT 22
18749: PUSH
18750: LD_OWVAR 2
18754: PUSH
18755: EMPTY
18756: LIST
18757: LIST
18758: PUSH
18759: LD_INT 30
18761: PUSH
18762: LD_INT 3
18764: PUSH
18765: EMPTY
18766: LIST
18767: LIST
18768: PUSH
18769: EMPTY
18770: LIST
18771: LIST
18772: PPUSH
18773: CALL_OW 69
18777: ST_TO_ADDR
// if not tmp then
18778: LD_VAR 0 1
18782: NOT
18783: IFFALSE 18787
// exit ;
18785: GO 18813
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
18787: LD_VAR 0 1
18791: PUSH
18792: LD_INT 1
18794: PPUSH
18795: LD_VAR 0 1
18799: PPUSH
18800: CALL_OW 12
18804: ARRAY
18805: PPUSH
18806: LD_INT 1
18808: PPUSH
18809: CALL_OW 234
// end ;
18813: PPOPN 1
18815: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
18816: LD_EXP 23
18820: PUSH
18821: LD_EXP 71
18825: AND
18826: IFFALSE 18938
18828: GO 18830
18830: DISABLE
18831: LD_INT 0
18833: PPUSH
18834: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
18835: LD_ADDR_VAR 0 2
18839: PUSH
18840: LD_INT 22
18842: PUSH
18843: LD_OWVAR 2
18847: PUSH
18848: EMPTY
18849: LIST
18850: LIST
18851: PUSH
18852: LD_INT 2
18854: PUSH
18855: LD_INT 30
18857: PUSH
18858: LD_INT 27
18860: PUSH
18861: EMPTY
18862: LIST
18863: LIST
18864: PUSH
18865: LD_INT 30
18867: PUSH
18868: LD_INT 26
18870: PUSH
18871: EMPTY
18872: LIST
18873: LIST
18874: PUSH
18875: LD_INT 30
18877: PUSH
18878: LD_INT 28
18880: PUSH
18881: EMPTY
18882: LIST
18883: LIST
18884: PUSH
18885: EMPTY
18886: LIST
18887: LIST
18888: LIST
18889: LIST
18890: PUSH
18891: EMPTY
18892: LIST
18893: LIST
18894: PPUSH
18895: CALL_OW 69
18899: ST_TO_ADDR
// if not tmp then
18900: LD_VAR 0 2
18904: NOT
18905: IFFALSE 18909
// exit ;
18907: GO 18938
// for i in tmp do
18909: LD_ADDR_VAR 0 1
18913: PUSH
18914: LD_VAR 0 2
18918: PUSH
18919: FOR_IN
18920: IFFALSE 18936
// SetLives ( i , 1 ) ;
18922: LD_VAR 0 1
18926: PPUSH
18927: LD_INT 1
18929: PPUSH
18930: CALL_OW 234
18934: GO 18919
18936: POP
18937: POP
// end ;
18938: PPOPN 2
18940: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
18941: LD_EXP 23
18945: PUSH
18946: LD_EXP 72
18950: AND
18951: IFFALSE 19238
18953: GO 18955
18955: DISABLE
18956: LD_INT 0
18958: PPUSH
18959: PPUSH
18960: PPUSH
// begin i := rand ( 1 , 7 ) ;
18961: LD_ADDR_VAR 0 1
18965: PUSH
18966: LD_INT 1
18968: PPUSH
18969: LD_INT 7
18971: PPUSH
18972: CALL_OW 12
18976: ST_TO_ADDR
// case i of 1 :
18977: LD_VAR 0 1
18981: PUSH
18982: LD_INT 1
18984: DOUBLE
18985: EQUAL
18986: IFTRUE 18990
18988: GO 19000
18990: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
18991: LD_STRING earthquake(getX(game), 0, 32)
18993: PPUSH
18994: CALL_OW 559
18998: GO 19238
19000: LD_INT 2
19002: DOUBLE
19003: EQUAL
19004: IFTRUE 19008
19006: GO 19022
19008: POP
// begin ToLua ( displayStucuk(); ) ;
19009: LD_STRING displayStucuk();
19011: PPUSH
19012: CALL_OW 559
// ResetFog ;
19016: CALL_OW 335
// end ; 3 :
19020: GO 19238
19022: LD_INT 3
19024: DOUBLE
19025: EQUAL
19026: IFTRUE 19030
19028: GO 19134
19030: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
19031: LD_ADDR_VAR 0 2
19035: PUSH
19036: LD_INT 22
19038: PUSH
19039: LD_OWVAR 2
19043: PUSH
19044: EMPTY
19045: LIST
19046: LIST
19047: PUSH
19048: LD_INT 25
19050: PUSH
19051: LD_INT 1
19053: PUSH
19054: EMPTY
19055: LIST
19056: LIST
19057: PUSH
19058: EMPTY
19059: LIST
19060: LIST
19061: PPUSH
19062: CALL_OW 69
19066: ST_TO_ADDR
// if not tmp then
19067: LD_VAR 0 2
19071: NOT
19072: IFFALSE 19076
// exit ;
19074: GO 19238
// un := tmp [ rand ( 1 , tmp ) ] ;
19076: LD_ADDR_VAR 0 3
19080: PUSH
19081: LD_VAR 0 2
19085: PUSH
19086: LD_INT 1
19088: PPUSH
19089: LD_VAR 0 2
19093: PPUSH
19094: CALL_OW 12
19098: ARRAY
19099: ST_TO_ADDR
// if Crawls ( un ) then
19100: LD_VAR 0 3
19104: PPUSH
19105: CALL_OW 318
19109: IFFALSE 19120
// ComWalk ( un ) ;
19111: LD_VAR 0 3
19115: PPUSH
19116: CALL_OW 138
// SetClass ( un , class_mortar ) ;
19120: LD_VAR 0 3
19124: PPUSH
19125: LD_INT 8
19127: PPUSH
19128: CALL_OW 336
// end ; 4 :
19132: GO 19238
19134: LD_INT 4
19136: DOUBLE
19137: EQUAL
19138: IFTRUE 19142
19140: GO 19216
19142: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
19143: LD_ADDR_VAR 0 2
19147: PUSH
19148: LD_INT 22
19150: PUSH
19151: LD_OWVAR 2
19155: PUSH
19156: EMPTY
19157: LIST
19158: LIST
19159: PUSH
19160: LD_INT 30
19162: PUSH
19163: LD_INT 29
19165: PUSH
19166: EMPTY
19167: LIST
19168: LIST
19169: PUSH
19170: EMPTY
19171: LIST
19172: LIST
19173: PPUSH
19174: CALL_OW 69
19178: ST_TO_ADDR
// if not tmp then
19179: LD_VAR 0 2
19183: NOT
19184: IFFALSE 19188
// exit ;
19186: GO 19238
// CenterNowOnUnits ( tmp [ 1 ] ) ;
19188: LD_VAR 0 2
19192: PUSH
19193: LD_INT 1
19195: ARRAY
19196: PPUSH
19197: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
19201: LD_VAR 0 2
19205: PUSH
19206: LD_INT 1
19208: ARRAY
19209: PPUSH
19210: CALL_OW 65
// end ; 5 .. 7 :
19214: GO 19238
19216: LD_INT 5
19218: DOUBLE
19219: GREATEREQUAL
19220: IFFALSE 19228
19222: LD_INT 7
19224: DOUBLE
19225: LESSEQUAL
19226: IFTRUE 19230
19228: GO 19237
19230: POP
// StreamSibBomb ; end ;
19231: CALL 15475 0 0
19235: GO 19238
19237: POP
// end ;
19238: PPOPN 3
19240: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
19241: LD_EXP 23
19245: PUSH
19246: LD_EXP 73
19250: AND
19251: IFFALSE 19407
19253: GO 19255
19255: DISABLE
19256: LD_INT 0
19258: PPUSH
19259: PPUSH
19260: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
19261: LD_ADDR_VAR 0 2
19265: PUSH
19266: LD_INT 81
19268: PUSH
19269: LD_OWVAR 2
19273: PUSH
19274: EMPTY
19275: LIST
19276: LIST
19277: PUSH
19278: LD_INT 2
19280: PUSH
19281: LD_INT 21
19283: PUSH
19284: LD_INT 1
19286: PUSH
19287: EMPTY
19288: LIST
19289: LIST
19290: PUSH
19291: LD_INT 21
19293: PUSH
19294: LD_INT 2
19296: PUSH
19297: EMPTY
19298: LIST
19299: LIST
19300: PUSH
19301: EMPTY
19302: LIST
19303: LIST
19304: LIST
19305: PUSH
19306: EMPTY
19307: LIST
19308: LIST
19309: PPUSH
19310: CALL_OW 69
19314: ST_TO_ADDR
// if not tmp then
19315: LD_VAR 0 2
19319: NOT
19320: IFFALSE 19324
// exit ;
19322: GO 19407
// p := 0 ;
19324: LD_ADDR_VAR 0 3
19328: PUSH
19329: LD_INT 0
19331: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19332: LD_INT 35
19334: PPUSH
19335: CALL_OW 67
// p := p + 1 ;
19339: LD_ADDR_VAR 0 3
19343: PUSH
19344: LD_VAR 0 3
19348: PUSH
19349: LD_INT 1
19351: PLUS
19352: ST_TO_ADDR
// for i in tmp do
19353: LD_ADDR_VAR 0 1
19357: PUSH
19358: LD_VAR 0 2
19362: PUSH
19363: FOR_IN
19364: IFFALSE 19395
// if GetLives ( i ) < 1000 then
19366: LD_VAR 0 1
19370: PPUSH
19371: CALL_OW 256
19375: PUSH
19376: LD_INT 1000
19378: LESS
19379: IFFALSE 19393
// SetLives ( i , 1000 ) ;
19381: LD_VAR 0 1
19385: PPUSH
19386: LD_INT 1000
19388: PPUSH
19389: CALL_OW 234
19393: GO 19363
19395: POP
19396: POP
// until p > 20 ;
19397: LD_VAR 0 3
19401: PUSH
19402: LD_INT 20
19404: GREATER
19405: IFFALSE 19332
// end ;
19407: PPOPN 3
19409: END
// every 0 0$1 trigger StreamModeActive and sTime do
19410: LD_EXP 23
19414: PUSH
19415: LD_EXP 74
19419: AND
19420: IFFALSE 19455
19422: GO 19424
19424: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
19425: LD_INT 28
19427: PPUSH
19428: LD_OWVAR 2
19432: PPUSH
19433: LD_INT 2
19435: PPUSH
19436: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
19440: LD_INT 30
19442: PPUSH
19443: LD_OWVAR 2
19447: PPUSH
19448: LD_INT 2
19450: PPUSH
19451: CALL_OW 322
// end ;
19455: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
19456: LD_EXP 23
19460: PUSH
19461: LD_EXP 75
19465: AND
19466: IFFALSE 19587
19468: GO 19470
19470: DISABLE
19471: LD_INT 0
19473: PPUSH
19474: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
19475: LD_ADDR_VAR 0 2
19479: PUSH
19480: LD_INT 22
19482: PUSH
19483: LD_OWVAR 2
19487: PUSH
19488: EMPTY
19489: LIST
19490: LIST
19491: PUSH
19492: LD_INT 21
19494: PUSH
19495: LD_INT 1
19497: PUSH
19498: EMPTY
19499: LIST
19500: LIST
19501: PUSH
19502: LD_INT 3
19504: PUSH
19505: LD_INT 23
19507: PUSH
19508: LD_INT 0
19510: PUSH
19511: EMPTY
19512: LIST
19513: LIST
19514: PUSH
19515: EMPTY
19516: LIST
19517: LIST
19518: PUSH
19519: EMPTY
19520: LIST
19521: LIST
19522: LIST
19523: PPUSH
19524: CALL_OW 69
19528: ST_TO_ADDR
// if not tmp then
19529: LD_VAR 0 2
19533: NOT
19534: IFFALSE 19538
// exit ;
19536: GO 19587
// for i in tmp do
19538: LD_ADDR_VAR 0 1
19542: PUSH
19543: LD_VAR 0 2
19547: PUSH
19548: FOR_IN
19549: IFFALSE 19585
// begin if Crawls ( i ) then
19551: LD_VAR 0 1
19555: PPUSH
19556: CALL_OW 318
19560: IFFALSE 19571
// ComWalk ( i ) ;
19562: LD_VAR 0 1
19566: PPUSH
19567: CALL_OW 138
// SetClass ( i , 2 ) ;
19571: LD_VAR 0 1
19575: PPUSH
19576: LD_INT 2
19578: PPUSH
19579: CALL_OW 336
// end ;
19583: GO 19548
19585: POP
19586: POP
// end ;
19587: PPOPN 2
19589: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
19590: LD_EXP 23
19594: PUSH
19595: LD_EXP 76
19599: AND
19600: IFFALSE 19888
19602: GO 19604
19604: DISABLE
19605: LD_INT 0
19607: PPUSH
19608: PPUSH
19609: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
19610: LD_OWVAR 2
19614: PPUSH
19615: LD_INT 9
19617: PPUSH
19618: LD_INT 1
19620: PPUSH
19621: LD_INT 1
19623: PPUSH
19624: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
19628: LD_INT 9
19630: PPUSH
19631: LD_OWVAR 2
19635: PPUSH
19636: CALL_OW 343
// uc_side := 9 ;
19640: LD_ADDR_OWVAR 20
19644: PUSH
19645: LD_INT 9
19647: ST_TO_ADDR
// uc_nation := 2 ;
19648: LD_ADDR_OWVAR 21
19652: PUSH
19653: LD_INT 2
19655: ST_TO_ADDR
// hc_name := Dark Warrior ;
19656: LD_ADDR_OWVAR 26
19660: PUSH
19661: LD_STRING Dark Warrior
19663: ST_TO_ADDR
// hc_gallery :=  ;
19664: LD_ADDR_OWVAR 33
19668: PUSH
19669: LD_STRING 
19671: ST_TO_ADDR
// hc_noskilllimit := true ;
19672: LD_ADDR_OWVAR 76
19676: PUSH
19677: LD_INT 1
19679: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
19680: LD_ADDR_OWVAR 31
19684: PUSH
19685: LD_INT 30
19687: PUSH
19688: LD_INT 30
19690: PUSH
19691: LD_INT 30
19693: PUSH
19694: LD_INT 30
19696: PUSH
19697: EMPTY
19698: LIST
19699: LIST
19700: LIST
19701: LIST
19702: ST_TO_ADDR
// un := CreateHuman ;
19703: LD_ADDR_VAR 0 3
19707: PUSH
19708: CALL_OW 44
19712: ST_TO_ADDR
// hc_noskilllimit := false ;
19713: LD_ADDR_OWVAR 76
19717: PUSH
19718: LD_INT 0
19720: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
19721: LD_VAR 0 3
19725: PPUSH
19726: LD_INT 1
19728: PPUSH
19729: CALL_OW 51
// ToLua ( playRanger() ) ;
19733: LD_STRING playRanger()
19735: PPUSH
19736: CALL_OW 559
// p := 0 ;
19740: LD_ADDR_VAR 0 2
19744: PUSH
19745: LD_INT 0
19747: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
19748: LD_INT 35
19750: PPUSH
19751: CALL_OW 67
// p := p + 1 ;
19755: LD_ADDR_VAR 0 2
19759: PUSH
19760: LD_VAR 0 2
19764: PUSH
19765: LD_INT 1
19767: PLUS
19768: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
19769: LD_VAR 0 3
19773: PPUSH
19774: CALL_OW 256
19778: PUSH
19779: LD_INT 1000
19781: LESS
19782: IFFALSE 19796
// SetLives ( un , 1000 ) ;
19784: LD_VAR 0 3
19788: PPUSH
19789: LD_INT 1000
19791: PPUSH
19792: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
19796: LD_VAR 0 3
19800: PPUSH
19801: LD_INT 81
19803: PUSH
19804: LD_OWVAR 2
19808: PUSH
19809: EMPTY
19810: LIST
19811: LIST
19812: PUSH
19813: LD_INT 91
19815: PUSH
19816: LD_VAR 0 3
19820: PUSH
19821: LD_INT 30
19823: PUSH
19824: EMPTY
19825: LIST
19826: LIST
19827: LIST
19828: PUSH
19829: EMPTY
19830: LIST
19831: LIST
19832: PPUSH
19833: CALL_OW 69
19837: PPUSH
19838: LD_VAR 0 3
19842: PPUSH
19843: CALL_OW 74
19847: PPUSH
19848: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
19852: LD_VAR 0 2
19856: PUSH
19857: LD_INT 80
19859: GREATER
19860: PUSH
19861: LD_VAR 0 3
19865: PPUSH
19866: CALL_OW 301
19870: OR
19871: IFFALSE 19748
// if un then
19873: LD_VAR 0 3
19877: IFFALSE 19888
// RemoveUnit ( un ) ;
19879: LD_VAR 0 3
19883: PPUSH
19884: CALL_OW 64
// end ;
19888: PPOPN 3
19890: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
19891: LD_EXP 77
19895: IFFALSE 20011
19897: GO 19899
19899: DISABLE
19900: LD_INT 0
19902: PPUSH
19903: PPUSH
19904: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
19905: LD_ADDR_VAR 0 2
19909: PUSH
19910: LD_INT 81
19912: PUSH
19913: LD_OWVAR 2
19917: PUSH
19918: EMPTY
19919: LIST
19920: LIST
19921: PUSH
19922: LD_INT 21
19924: PUSH
19925: LD_INT 1
19927: PUSH
19928: EMPTY
19929: LIST
19930: LIST
19931: PUSH
19932: EMPTY
19933: LIST
19934: LIST
19935: PPUSH
19936: CALL_OW 69
19940: ST_TO_ADDR
// ToLua ( playComputer() ) ;
19941: LD_STRING playComputer()
19943: PPUSH
19944: CALL_OW 559
// if not tmp then
19948: LD_VAR 0 2
19952: NOT
19953: IFFALSE 19957
// exit ;
19955: GO 20011
// for i in tmp do
19957: LD_ADDR_VAR 0 1
19961: PUSH
19962: LD_VAR 0 2
19966: PUSH
19967: FOR_IN
19968: IFFALSE 20009
// for j := 1 to 4 do
19970: LD_ADDR_VAR 0 3
19974: PUSH
19975: DOUBLE
19976: LD_INT 1
19978: DEC
19979: ST_TO_ADDR
19980: LD_INT 4
19982: PUSH
19983: FOR_TO
19984: IFFALSE 20005
// SetSkill ( i , j , 10 ) ;
19986: LD_VAR 0 1
19990: PPUSH
19991: LD_VAR 0 3
19995: PPUSH
19996: LD_INT 10
19998: PPUSH
19999: CALL_OW 237
20003: GO 19983
20005: POP
20006: POP
20007: GO 19967
20009: POP
20010: POP
// end ;
20011: PPOPN 3
20013: END
// every 0 0$1 trigger s30 do var i , tmp ;
20014: LD_EXP 78
20018: IFFALSE 20087
20020: GO 20022
20022: DISABLE
20023: LD_INT 0
20025: PPUSH
20026: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20027: LD_ADDR_VAR 0 2
20031: PUSH
20032: LD_INT 22
20034: PUSH
20035: LD_OWVAR 2
20039: PUSH
20040: EMPTY
20041: LIST
20042: LIST
20043: PPUSH
20044: CALL_OW 69
20048: ST_TO_ADDR
// if not tmp then
20049: LD_VAR 0 2
20053: NOT
20054: IFFALSE 20058
// exit ;
20056: GO 20087
// for i in tmp do
20058: LD_ADDR_VAR 0 1
20062: PUSH
20063: LD_VAR 0 2
20067: PUSH
20068: FOR_IN
20069: IFFALSE 20085
// SetLives ( i , 300 ) ;
20071: LD_VAR 0 1
20075: PPUSH
20076: LD_INT 300
20078: PPUSH
20079: CALL_OW 234
20083: GO 20068
20085: POP
20086: POP
// end ;
20087: PPOPN 2
20089: END
// every 0 0$1 trigger s60 do var i , tmp ;
20090: LD_EXP 79
20094: IFFALSE 20163
20096: GO 20098
20098: DISABLE
20099: LD_INT 0
20101: PPUSH
20102: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
20103: LD_ADDR_VAR 0 2
20107: PUSH
20108: LD_INT 22
20110: PUSH
20111: LD_OWVAR 2
20115: PUSH
20116: EMPTY
20117: LIST
20118: LIST
20119: PPUSH
20120: CALL_OW 69
20124: ST_TO_ADDR
// if not tmp then
20125: LD_VAR 0 2
20129: NOT
20130: IFFALSE 20134
// exit ;
20132: GO 20163
// for i in tmp do
20134: LD_ADDR_VAR 0 1
20138: PUSH
20139: LD_VAR 0 2
20143: PUSH
20144: FOR_IN
20145: IFFALSE 20161
// SetLives ( i , 600 ) ;
20147: LD_VAR 0 1
20151: PPUSH
20152: LD_INT 600
20154: PPUSH
20155: CALL_OW 234
20159: GO 20144
20161: POP
20162: POP
// end ;
20163: PPOPN 2
20165: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
20166: LD_INT 0
20168: PPUSH
// case cmd of 301 :
20169: LD_VAR 0 1
20173: PUSH
20174: LD_INT 301
20176: DOUBLE
20177: EQUAL
20178: IFTRUE 20182
20180: GO 20214
20182: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
20183: LD_VAR 0 6
20187: PPUSH
20188: LD_VAR 0 7
20192: PPUSH
20193: LD_VAR 0 8
20197: PPUSH
20198: LD_VAR 0 4
20202: PPUSH
20203: LD_VAR 0 5
20207: PPUSH
20208: CALL 21423 0 5
20212: GO 20335
20214: LD_INT 302
20216: DOUBLE
20217: EQUAL
20218: IFTRUE 20222
20220: GO 20259
20222: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
20223: LD_VAR 0 6
20227: PPUSH
20228: LD_VAR 0 7
20232: PPUSH
20233: LD_VAR 0 8
20237: PPUSH
20238: LD_VAR 0 9
20242: PPUSH
20243: LD_VAR 0 4
20247: PPUSH
20248: LD_VAR 0 5
20252: PPUSH
20253: CALL 21514 0 6
20257: GO 20335
20259: LD_INT 303
20261: DOUBLE
20262: EQUAL
20263: IFTRUE 20267
20265: GO 20304
20267: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
20268: LD_VAR 0 6
20272: PPUSH
20273: LD_VAR 0 7
20277: PPUSH
20278: LD_VAR 0 8
20282: PPUSH
20283: LD_VAR 0 9
20287: PPUSH
20288: LD_VAR 0 4
20292: PPUSH
20293: LD_VAR 0 5
20297: PPUSH
20298: CALL 20340 0 6
20302: GO 20335
20304: LD_INT 304
20306: DOUBLE
20307: EQUAL
20308: IFTRUE 20312
20310: GO 20334
20312: POP
// hHackTeleport ( unit , x , y ) ; end ;
20313: LD_VAR 0 2
20317: PPUSH
20318: LD_VAR 0 4
20322: PPUSH
20323: LD_VAR 0 5
20327: PPUSH
20328: CALL 22107 0 3
20332: GO 20335
20334: POP
// end ;
20335: LD_VAR 0 12
20339: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
20340: LD_INT 0
20342: PPUSH
20343: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
20344: LD_VAR 0 1
20348: PUSH
20349: LD_INT 1
20351: LESS
20352: PUSH
20353: LD_VAR 0 1
20357: PUSH
20358: LD_INT 3
20360: GREATER
20361: OR
20362: PUSH
20363: LD_VAR 0 5
20367: PPUSH
20368: LD_VAR 0 6
20372: PPUSH
20373: CALL_OW 428
20377: OR
20378: IFFALSE 20382
// exit ;
20380: GO 21110
// uc_side := your_side ;
20382: LD_ADDR_OWVAR 20
20386: PUSH
20387: LD_OWVAR 2
20391: ST_TO_ADDR
// uc_nation := nation ;
20392: LD_ADDR_OWVAR 21
20396: PUSH
20397: LD_VAR 0 1
20401: ST_TO_ADDR
// bc_level = 1 ;
20402: LD_ADDR_OWVAR 43
20406: PUSH
20407: LD_INT 1
20409: ST_TO_ADDR
// case btype of 1 :
20410: LD_VAR 0 2
20414: PUSH
20415: LD_INT 1
20417: DOUBLE
20418: EQUAL
20419: IFTRUE 20423
20421: GO 20434
20423: POP
// bc_type := b_depot ; 2 :
20424: LD_ADDR_OWVAR 42
20428: PUSH
20429: LD_INT 0
20431: ST_TO_ADDR
20432: GO 21054
20434: LD_INT 2
20436: DOUBLE
20437: EQUAL
20438: IFTRUE 20442
20440: GO 20453
20442: POP
// bc_type := b_warehouse ; 3 :
20443: LD_ADDR_OWVAR 42
20447: PUSH
20448: LD_INT 1
20450: ST_TO_ADDR
20451: GO 21054
20453: LD_INT 3
20455: DOUBLE
20456: EQUAL
20457: IFTRUE 20461
20459: GO 20472
20461: POP
// bc_type := b_lab ; 4 .. 9 :
20462: LD_ADDR_OWVAR 42
20466: PUSH
20467: LD_INT 6
20469: ST_TO_ADDR
20470: GO 21054
20472: LD_INT 4
20474: DOUBLE
20475: GREATEREQUAL
20476: IFFALSE 20484
20478: LD_INT 9
20480: DOUBLE
20481: LESSEQUAL
20482: IFTRUE 20486
20484: GO 20546
20486: POP
// begin bc_type := b_lab_half ;
20487: LD_ADDR_OWVAR 42
20491: PUSH
20492: LD_INT 7
20494: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
20495: LD_ADDR_OWVAR 44
20499: PUSH
20500: LD_INT 10
20502: PUSH
20503: LD_INT 11
20505: PUSH
20506: LD_INT 12
20508: PUSH
20509: LD_INT 15
20511: PUSH
20512: LD_INT 14
20514: PUSH
20515: LD_INT 13
20517: PUSH
20518: EMPTY
20519: LIST
20520: LIST
20521: LIST
20522: LIST
20523: LIST
20524: LIST
20525: PUSH
20526: LD_VAR 0 2
20530: PUSH
20531: LD_INT 3
20533: MINUS
20534: ARRAY
20535: ST_TO_ADDR
// bc_kind2 := b_lab_basic ;
20536: LD_ADDR_OWVAR 45
20540: PUSH
20541: LD_INT 9
20543: ST_TO_ADDR
// end ; 10 .. 13 :
20544: GO 21054
20546: LD_INT 10
20548: DOUBLE
20549: GREATEREQUAL
20550: IFFALSE 20558
20552: LD_INT 13
20554: DOUBLE
20555: LESSEQUAL
20556: IFTRUE 20560
20558: GO 20637
20560: POP
// begin bc_type := b_lab_full ;
20561: LD_ADDR_OWVAR 42
20565: PUSH
20566: LD_INT 8
20568: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
20569: LD_ADDR_OWVAR 44
20573: PUSH
20574: LD_INT 10
20576: PUSH
20577: LD_INT 12
20579: PUSH
20580: LD_INT 14
20582: PUSH
20583: LD_INT 13
20585: PUSH
20586: EMPTY
20587: LIST
20588: LIST
20589: LIST
20590: LIST
20591: PUSH
20592: LD_VAR 0 2
20596: PUSH
20597: LD_INT 9
20599: MINUS
20600: ARRAY
20601: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
20602: LD_ADDR_OWVAR 45
20606: PUSH
20607: LD_INT 11
20609: PUSH
20610: LD_INT 15
20612: PUSH
20613: LD_INT 12
20615: PUSH
20616: LD_INT 15
20618: PUSH
20619: EMPTY
20620: LIST
20621: LIST
20622: LIST
20623: LIST
20624: PUSH
20625: LD_VAR 0 2
20629: PUSH
20630: LD_INT 9
20632: MINUS
20633: ARRAY
20634: ST_TO_ADDR
// end ; 14 :
20635: GO 21054
20637: LD_INT 14
20639: DOUBLE
20640: EQUAL
20641: IFTRUE 20645
20643: GO 20656
20645: POP
// bc_type := b_workshop ; 15 :
20646: LD_ADDR_OWVAR 42
20650: PUSH
20651: LD_INT 2
20653: ST_TO_ADDR
20654: GO 21054
20656: LD_INT 15
20658: DOUBLE
20659: EQUAL
20660: IFTRUE 20664
20662: GO 20675
20664: POP
// bc_type := b_factory ; 16 :
20665: LD_ADDR_OWVAR 42
20669: PUSH
20670: LD_INT 3
20672: ST_TO_ADDR
20673: GO 21054
20675: LD_INT 16
20677: DOUBLE
20678: EQUAL
20679: IFTRUE 20683
20681: GO 20694
20683: POP
// bc_type := b_ext_gun ; 17 :
20684: LD_ADDR_OWVAR 42
20688: PUSH
20689: LD_INT 17
20691: ST_TO_ADDR
20692: GO 21054
20694: LD_INT 17
20696: DOUBLE
20697: EQUAL
20698: IFTRUE 20702
20700: GO 20730
20702: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
20703: LD_ADDR_OWVAR 42
20707: PUSH
20708: LD_INT 19
20710: PUSH
20711: LD_INT 23
20713: PUSH
20714: LD_INT 19
20716: PUSH
20717: EMPTY
20718: LIST
20719: LIST
20720: LIST
20721: PUSH
20722: LD_VAR 0 1
20726: ARRAY
20727: ST_TO_ADDR
20728: GO 21054
20730: LD_INT 18
20732: DOUBLE
20733: EQUAL
20734: IFTRUE 20738
20736: GO 20749
20738: POP
// bc_type := b_ext_radar ; 19 :
20739: LD_ADDR_OWVAR 42
20743: PUSH
20744: LD_INT 20
20746: ST_TO_ADDR
20747: GO 21054
20749: LD_INT 19
20751: DOUBLE
20752: EQUAL
20753: IFTRUE 20757
20755: GO 20768
20757: POP
// bc_type := b_ext_radio ; 20 :
20758: LD_ADDR_OWVAR 42
20762: PUSH
20763: LD_INT 22
20765: ST_TO_ADDR
20766: GO 21054
20768: LD_INT 20
20770: DOUBLE
20771: EQUAL
20772: IFTRUE 20776
20774: GO 20787
20776: POP
// bc_type := b_ext_siberium ; 21 :
20777: LD_ADDR_OWVAR 42
20781: PUSH
20782: LD_INT 21
20784: ST_TO_ADDR
20785: GO 21054
20787: LD_INT 21
20789: DOUBLE
20790: EQUAL
20791: IFTRUE 20795
20793: GO 20806
20795: POP
// bc_type := b_ext_computer ; 22 :
20796: LD_ADDR_OWVAR 42
20800: PUSH
20801: LD_INT 24
20803: ST_TO_ADDR
20804: GO 21054
20806: LD_INT 22
20808: DOUBLE
20809: EQUAL
20810: IFTRUE 20814
20812: GO 20825
20814: POP
// bc_type := b_ext_track ; 23 :
20815: LD_ADDR_OWVAR 42
20819: PUSH
20820: LD_INT 16
20822: ST_TO_ADDR
20823: GO 21054
20825: LD_INT 23
20827: DOUBLE
20828: EQUAL
20829: IFTRUE 20833
20831: GO 20844
20833: POP
// bc_type := b_ext_laser ; 24 :
20834: LD_ADDR_OWVAR 42
20838: PUSH
20839: LD_INT 25
20841: ST_TO_ADDR
20842: GO 21054
20844: LD_INT 24
20846: DOUBLE
20847: EQUAL
20848: IFTRUE 20852
20850: GO 20863
20852: POP
// bc_type := b_control_tower ; 25 :
20853: LD_ADDR_OWVAR 42
20857: PUSH
20858: LD_INT 36
20860: ST_TO_ADDR
20861: GO 21054
20863: LD_INT 25
20865: DOUBLE
20866: EQUAL
20867: IFTRUE 20871
20869: GO 20882
20871: POP
// bc_type := b_breastwork ; 26 :
20872: LD_ADDR_OWVAR 42
20876: PUSH
20877: LD_INT 31
20879: ST_TO_ADDR
20880: GO 21054
20882: LD_INT 26
20884: DOUBLE
20885: EQUAL
20886: IFTRUE 20890
20888: GO 20901
20890: POP
// bc_type := b_bunker ; 27 :
20891: LD_ADDR_OWVAR 42
20895: PUSH
20896: LD_INT 32
20898: ST_TO_ADDR
20899: GO 21054
20901: LD_INT 27
20903: DOUBLE
20904: EQUAL
20905: IFTRUE 20909
20907: GO 20920
20909: POP
// bc_type := b_turret ; 28 :
20910: LD_ADDR_OWVAR 42
20914: PUSH
20915: LD_INT 33
20917: ST_TO_ADDR
20918: GO 21054
20920: LD_INT 28
20922: DOUBLE
20923: EQUAL
20924: IFTRUE 20928
20926: GO 20939
20928: POP
// bc_type := b_armoury ; 29 :
20929: LD_ADDR_OWVAR 42
20933: PUSH
20934: LD_INT 4
20936: ST_TO_ADDR
20937: GO 21054
20939: LD_INT 29
20941: DOUBLE
20942: EQUAL
20943: IFTRUE 20947
20945: GO 20958
20947: POP
// bc_type := b_barracks ; 30 :
20948: LD_ADDR_OWVAR 42
20952: PUSH
20953: LD_INT 5
20955: ST_TO_ADDR
20956: GO 21054
20958: LD_INT 30
20960: DOUBLE
20961: EQUAL
20962: IFTRUE 20966
20964: GO 20977
20966: POP
// bc_type := b_solar_power ; 31 :
20967: LD_ADDR_OWVAR 42
20971: PUSH
20972: LD_INT 27
20974: ST_TO_ADDR
20975: GO 21054
20977: LD_INT 31
20979: DOUBLE
20980: EQUAL
20981: IFTRUE 20985
20983: GO 20996
20985: POP
// bc_type := b_oil_power ; 32 :
20986: LD_ADDR_OWVAR 42
20990: PUSH
20991: LD_INT 26
20993: ST_TO_ADDR
20994: GO 21054
20996: LD_INT 32
20998: DOUBLE
20999: EQUAL
21000: IFTRUE 21004
21002: GO 21015
21004: POP
// bc_type := b_siberite_power ; 33 :
21005: LD_ADDR_OWVAR 42
21009: PUSH
21010: LD_INT 28
21012: ST_TO_ADDR
21013: GO 21054
21015: LD_INT 33
21017: DOUBLE
21018: EQUAL
21019: IFTRUE 21023
21021: GO 21034
21023: POP
// bc_type := b_oil_mine ; 34 :
21024: LD_ADDR_OWVAR 42
21028: PUSH
21029: LD_INT 29
21031: ST_TO_ADDR
21032: GO 21054
21034: LD_INT 34
21036: DOUBLE
21037: EQUAL
21038: IFTRUE 21042
21040: GO 21053
21042: POP
// bc_type := b_siberite_mine ; end ;
21043: LD_ADDR_OWVAR 42
21047: PUSH
21048: LD_INT 30
21050: ST_TO_ADDR
21051: GO 21054
21053: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
21054: LD_ADDR_VAR 0 8
21058: PUSH
21059: LD_VAR 0 5
21063: PPUSH
21064: LD_VAR 0 6
21068: PPUSH
21069: LD_VAR 0 3
21073: PPUSH
21074: CALL_OW 47
21078: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
21079: LD_OWVAR 42
21083: PUSH
21084: LD_INT 32
21086: PUSH
21087: LD_INT 33
21089: PUSH
21090: EMPTY
21091: LIST
21092: LIST
21093: IN
21094: IFFALSE 21110
// PlaceWeaponTurret ( b , weapon ) ;
21096: LD_VAR 0 8
21100: PPUSH
21101: LD_VAR 0 4
21105: PPUSH
21106: CALL_OW 431
// end ;
21110: LD_VAR 0 7
21114: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
21115: LD_INT 0
21117: PPUSH
21118: PPUSH
21119: PPUSH
21120: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21121: LD_ADDR_VAR 0 4
21125: PUSH
21126: LD_INT 22
21128: PUSH
21129: LD_OWVAR 2
21133: PUSH
21134: EMPTY
21135: LIST
21136: LIST
21137: PUSH
21138: LD_INT 2
21140: PUSH
21141: LD_INT 30
21143: PUSH
21144: LD_INT 0
21146: PUSH
21147: EMPTY
21148: LIST
21149: LIST
21150: PUSH
21151: LD_INT 30
21153: PUSH
21154: LD_INT 1
21156: PUSH
21157: EMPTY
21158: LIST
21159: LIST
21160: PUSH
21161: EMPTY
21162: LIST
21163: LIST
21164: LIST
21165: PUSH
21166: EMPTY
21167: LIST
21168: LIST
21169: PPUSH
21170: CALL_OW 69
21174: ST_TO_ADDR
// if not tmp then
21175: LD_VAR 0 4
21179: NOT
21180: IFFALSE 21184
// exit ;
21182: GO 21243
// for i in tmp do
21184: LD_ADDR_VAR 0 2
21188: PUSH
21189: LD_VAR 0 4
21193: PUSH
21194: FOR_IN
21195: IFFALSE 21241
// for j = 1 to 3 do
21197: LD_ADDR_VAR 0 3
21201: PUSH
21202: DOUBLE
21203: LD_INT 1
21205: DEC
21206: ST_TO_ADDR
21207: LD_INT 3
21209: PUSH
21210: FOR_TO
21211: IFFALSE 21237
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
21213: LD_VAR 0 2
21217: PPUSH
21218: CALL_OW 274
21222: PPUSH
21223: LD_VAR 0 3
21227: PPUSH
21228: LD_INT 99999
21230: PPUSH
21231: CALL_OW 277
21235: GO 21210
21237: POP
21238: POP
21239: GO 21194
21241: POP
21242: POP
// end ;
21243: LD_VAR 0 1
21247: RET
// export function hHackSetLevel10 ; var i , j ; begin
21248: LD_INT 0
21250: PPUSH
21251: PPUSH
21252: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21253: LD_ADDR_VAR 0 2
21257: PUSH
21258: LD_INT 21
21260: PUSH
21261: LD_INT 1
21263: PUSH
21264: EMPTY
21265: LIST
21266: LIST
21267: PPUSH
21268: CALL_OW 69
21272: PUSH
21273: FOR_IN
21274: IFFALSE 21326
// if IsSelected ( i ) then
21276: LD_VAR 0 2
21280: PPUSH
21281: CALL_OW 306
21285: IFFALSE 21324
// begin for j := 1 to 4 do
21287: LD_ADDR_VAR 0 3
21291: PUSH
21292: DOUBLE
21293: LD_INT 1
21295: DEC
21296: ST_TO_ADDR
21297: LD_INT 4
21299: PUSH
21300: FOR_TO
21301: IFFALSE 21322
// SetSkill ( i , j , 10 ) ;
21303: LD_VAR 0 2
21307: PPUSH
21308: LD_VAR 0 3
21312: PPUSH
21313: LD_INT 10
21315: PPUSH
21316: CALL_OW 237
21320: GO 21300
21322: POP
21323: POP
// end ;
21324: GO 21273
21326: POP
21327: POP
// end ;
21328: LD_VAR 0 1
21332: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
21333: LD_INT 0
21335: PPUSH
21336: PPUSH
21337: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
21338: LD_ADDR_VAR 0 2
21342: PUSH
21343: LD_INT 22
21345: PUSH
21346: LD_OWVAR 2
21350: PUSH
21351: EMPTY
21352: LIST
21353: LIST
21354: PUSH
21355: LD_INT 21
21357: PUSH
21358: LD_INT 1
21360: PUSH
21361: EMPTY
21362: LIST
21363: LIST
21364: PUSH
21365: EMPTY
21366: LIST
21367: LIST
21368: PPUSH
21369: CALL_OW 69
21373: PUSH
21374: FOR_IN
21375: IFFALSE 21416
// begin for j := 1 to 4 do
21377: LD_ADDR_VAR 0 3
21381: PUSH
21382: DOUBLE
21383: LD_INT 1
21385: DEC
21386: ST_TO_ADDR
21387: LD_INT 4
21389: PUSH
21390: FOR_TO
21391: IFFALSE 21412
// SetSkill ( i , j , 10 ) ;
21393: LD_VAR 0 2
21397: PPUSH
21398: LD_VAR 0 3
21402: PPUSH
21403: LD_INT 10
21405: PPUSH
21406: CALL_OW 237
21410: GO 21390
21412: POP
21413: POP
// end ;
21414: GO 21374
21416: POP
21417: POP
// end ;
21418: LD_VAR 0 1
21422: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
21423: LD_INT 0
21425: PPUSH
// uc_side := your_side ;
21426: LD_ADDR_OWVAR 20
21430: PUSH
21431: LD_OWVAR 2
21435: ST_TO_ADDR
// uc_nation := nation ;
21436: LD_ADDR_OWVAR 21
21440: PUSH
21441: LD_VAR 0 1
21445: ST_TO_ADDR
// InitHc ;
21446: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
21450: LD_INT 0
21452: PPUSH
21453: LD_VAR 0 2
21457: PPUSH
21458: LD_VAR 0 3
21462: PPUSH
21463: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
21467: LD_VAR 0 4
21471: PPUSH
21472: LD_VAR 0 5
21476: PPUSH
21477: CALL_OW 428
21481: PUSH
21482: LD_INT 0
21484: EQUAL
21485: IFFALSE 21509
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
21487: CALL_OW 44
21491: PPUSH
21492: LD_VAR 0 4
21496: PPUSH
21497: LD_VAR 0 5
21501: PPUSH
21502: LD_INT 1
21504: PPUSH
21505: CALL_OW 48
// end ;
21509: LD_VAR 0 6
21513: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
21514: LD_INT 0
21516: PPUSH
21517: PPUSH
// uc_side := your_side ;
21518: LD_ADDR_OWVAR 20
21522: PUSH
21523: LD_OWVAR 2
21527: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
21528: LD_VAR 0 1
21532: PUSH
21533: LD_INT 1
21535: PUSH
21536: LD_INT 2
21538: PUSH
21539: LD_INT 3
21541: PUSH
21542: LD_INT 4
21544: PUSH
21545: LD_INT 5
21547: PUSH
21548: EMPTY
21549: LIST
21550: LIST
21551: LIST
21552: LIST
21553: LIST
21554: IN
21555: IFFALSE 21567
// uc_nation := nation_american else
21557: LD_ADDR_OWVAR 21
21561: PUSH
21562: LD_INT 1
21564: ST_TO_ADDR
21565: GO 21610
// if chassis in [ 11 , 12 , 13 , 14 ] then
21567: LD_VAR 0 1
21571: PUSH
21572: LD_INT 11
21574: PUSH
21575: LD_INT 12
21577: PUSH
21578: LD_INT 13
21580: PUSH
21581: LD_INT 14
21583: PUSH
21584: EMPTY
21585: LIST
21586: LIST
21587: LIST
21588: LIST
21589: IN
21590: IFFALSE 21602
// uc_nation := nation_arabian else
21592: LD_ADDR_OWVAR 21
21596: PUSH
21597: LD_INT 2
21599: ST_TO_ADDR
21600: GO 21610
// uc_nation := nation_russian ;
21602: LD_ADDR_OWVAR 21
21606: PUSH
21607: LD_INT 3
21609: ST_TO_ADDR
// vc_chassis := chassis ;
21610: LD_ADDR_OWVAR 37
21614: PUSH
21615: LD_VAR 0 1
21619: ST_TO_ADDR
// vc_engine := engine ;
21620: LD_ADDR_OWVAR 39
21624: PUSH
21625: LD_VAR 0 2
21629: ST_TO_ADDR
// vc_control := control ;
21630: LD_ADDR_OWVAR 38
21634: PUSH
21635: LD_VAR 0 3
21639: ST_TO_ADDR
// vc_weapon := weapon ;
21640: LD_ADDR_OWVAR 40
21644: PUSH
21645: LD_VAR 0 4
21649: ST_TO_ADDR
// un := CreateVehicle ;
21650: LD_ADDR_VAR 0 8
21654: PUSH
21655: CALL_OW 45
21659: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
21660: LD_VAR 0 8
21664: PPUSH
21665: LD_INT 0
21667: PPUSH
21668: LD_INT 5
21670: PPUSH
21671: CALL_OW 12
21675: PPUSH
21676: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
21680: LD_VAR 0 8
21684: PPUSH
21685: LD_VAR 0 5
21689: PPUSH
21690: LD_VAR 0 6
21694: PPUSH
21695: LD_INT 1
21697: PPUSH
21698: CALL_OW 48
// end ;
21702: LD_VAR 0 7
21706: RET
// export hInvincible ; every 1 do
21707: GO 21709
21709: DISABLE
// hInvincible := [ ] ;
21710: LD_ADDR_EXP 80
21714: PUSH
21715: EMPTY
21716: ST_TO_ADDR
21717: END
// every 10 do var i ;
21718: GO 21720
21720: DISABLE
21721: LD_INT 0
21723: PPUSH
// begin enable ;
21724: ENABLE
// if not hInvincible then
21725: LD_EXP 80
21729: NOT
21730: IFFALSE 21734
// exit ;
21732: GO 21778
// for i in hInvincible do
21734: LD_ADDR_VAR 0 1
21738: PUSH
21739: LD_EXP 80
21743: PUSH
21744: FOR_IN
21745: IFFALSE 21776
// if GetLives ( i ) < 1000 then
21747: LD_VAR 0 1
21751: PPUSH
21752: CALL_OW 256
21756: PUSH
21757: LD_INT 1000
21759: LESS
21760: IFFALSE 21774
// SetLives ( i , 1000 ) ;
21762: LD_VAR 0 1
21766: PPUSH
21767: LD_INT 1000
21769: PPUSH
21770: CALL_OW 234
21774: GO 21744
21776: POP
21777: POP
// end ;
21778: PPOPN 1
21780: END
// export function hHackInvincible ; var i ; begin
21781: LD_INT 0
21783: PPUSH
21784: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
21785: LD_ADDR_VAR 0 2
21789: PUSH
21790: LD_INT 2
21792: PUSH
21793: LD_INT 21
21795: PUSH
21796: LD_INT 1
21798: PUSH
21799: EMPTY
21800: LIST
21801: LIST
21802: PUSH
21803: LD_INT 21
21805: PUSH
21806: LD_INT 2
21808: PUSH
21809: EMPTY
21810: LIST
21811: LIST
21812: PUSH
21813: EMPTY
21814: LIST
21815: LIST
21816: LIST
21817: PPUSH
21818: CALL_OW 69
21822: PUSH
21823: FOR_IN
21824: IFFALSE 21885
// if IsSelected ( i ) then
21826: LD_VAR 0 2
21830: PPUSH
21831: CALL_OW 306
21835: IFFALSE 21883
// begin if i in hInvincible then
21837: LD_VAR 0 2
21841: PUSH
21842: LD_EXP 80
21846: IN
21847: IFFALSE 21867
// hInvincible := hInvincible diff i else
21849: LD_ADDR_EXP 80
21853: PUSH
21854: LD_EXP 80
21858: PUSH
21859: LD_VAR 0 2
21863: DIFF
21864: ST_TO_ADDR
21865: GO 21883
// hInvincible := hInvincible union i ;
21867: LD_ADDR_EXP 80
21871: PUSH
21872: LD_EXP 80
21876: PUSH
21877: LD_VAR 0 2
21881: UNION
21882: ST_TO_ADDR
// end ;
21883: GO 21823
21885: POP
21886: POP
// end ;
21887: LD_VAR 0 1
21891: RET
// export function hHackInvisible ; var i , j ; begin
21892: LD_INT 0
21894: PPUSH
21895: PPUSH
21896: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
21897: LD_ADDR_VAR 0 2
21901: PUSH
21902: LD_INT 21
21904: PUSH
21905: LD_INT 1
21907: PUSH
21908: EMPTY
21909: LIST
21910: LIST
21911: PPUSH
21912: CALL_OW 69
21916: PUSH
21917: FOR_IN
21918: IFFALSE 21942
// if IsSelected ( i ) then
21920: LD_VAR 0 2
21924: PPUSH
21925: CALL_OW 306
21929: IFFALSE 21940
// ComForceInvisible ( i ) ;
21931: LD_VAR 0 2
21935: PPUSH
21936: CALL_OW 496
21940: GO 21917
21942: POP
21943: POP
// end ;
21944: LD_VAR 0 1
21948: RET
// export function hHackChangeYourSide ; begin
21949: LD_INT 0
21951: PPUSH
// if your_side = 8 then
21952: LD_OWVAR 2
21956: PUSH
21957: LD_INT 8
21959: EQUAL
21960: IFFALSE 21972
// your_side := 0 else
21962: LD_ADDR_OWVAR 2
21966: PUSH
21967: LD_INT 0
21969: ST_TO_ADDR
21970: GO 21986
// your_side := your_side + 1 ;
21972: LD_ADDR_OWVAR 2
21976: PUSH
21977: LD_OWVAR 2
21981: PUSH
21982: LD_INT 1
21984: PLUS
21985: ST_TO_ADDR
// end ;
21986: LD_VAR 0 1
21990: RET
// export function hHackChangeUnitSide ; var i , j ; begin
21991: LD_INT 0
21993: PPUSH
21994: PPUSH
21995: PPUSH
// for i in all_units do
21996: LD_ADDR_VAR 0 2
22000: PUSH
22001: LD_OWVAR 3
22005: PUSH
22006: FOR_IN
22007: IFFALSE 22085
// if IsSelected ( i ) then
22009: LD_VAR 0 2
22013: PPUSH
22014: CALL_OW 306
22018: IFFALSE 22083
// begin j := GetSide ( i ) ;
22020: LD_ADDR_VAR 0 3
22024: PUSH
22025: LD_VAR 0 2
22029: PPUSH
22030: CALL_OW 255
22034: ST_TO_ADDR
// if j = 8 then
22035: LD_VAR 0 3
22039: PUSH
22040: LD_INT 8
22042: EQUAL
22043: IFFALSE 22055
// j := 0 else
22045: LD_ADDR_VAR 0 3
22049: PUSH
22050: LD_INT 0
22052: ST_TO_ADDR
22053: GO 22069
// j := j + 1 ;
22055: LD_ADDR_VAR 0 3
22059: PUSH
22060: LD_VAR 0 3
22064: PUSH
22065: LD_INT 1
22067: PLUS
22068: ST_TO_ADDR
// SetSide ( i , j ) ;
22069: LD_VAR 0 2
22073: PPUSH
22074: LD_VAR 0 3
22078: PPUSH
22079: CALL_OW 235
// end ;
22083: GO 22006
22085: POP
22086: POP
// end ;
22087: LD_VAR 0 1
22091: RET
// export function hHackFog ; begin
22092: LD_INT 0
22094: PPUSH
// FogOff ( true ) ;
22095: LD_INT 1
22097: PPUSH
22098: CALL_OW 344
// end ;
22102: LD_VAR 0 1
22106: RET
// export function hHackTeleport ( unit , x , y ) ; begin
22107: LD_INT 0
22109: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
22110: LD_VAR 0 1
22114: PPUSH
22115: LD_VAR 0 2
22119: PPUSH
22120: LD_VAR 0 3
22124: PPUSH
22125: LD_INT 1
22127: PPUSH
22128: LD_INT 1
22130: PPUSH
22131: CALL_OW 483
// CenterOnXY ( x , y ) ;
22135: LD_VAR 0 2
22139: PPUSH
22140: LD_VAR 0 3
22144: PPUSH
22145: CALL_OW 84
// end ;
22149: LD_VAR 0 4
22153: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
22154: LD_INT 0
22156: PPUSH
22157: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
22158: LD_VAR 0 1
22162: NOT
22163: PUSH
22164: LD_VAR 0 2
22168: PPUSH
22169: LD_VAR 0 3
22173: PPUSH
22174: CALL_OW 488
22178: NOT
22179: OR
22180: PUSH
22181: LD_VAR 0 1
22185: PPUSH
22186: CALL_OW 266
22190: PUSH
22191: LD_INT 3
22193: NONEQUAL
22194: PUSH
22195: LD_VAR 0 1
22199: PPUSH
22200: CALL_OW 247
22204: PUSH
22205: LD_INT 1
22207: EQUAL
22208: NOT
22209: AND
22210: OR
22211: IFFALSE 22215
// exit ;
22213: GO 22364
// if GetType ( factory ) = unit_human then
22215: LD_VAR 0 1
22219: PPUSH
22220: CALL_OW 247
22224: PUSH
22225: LD_INT 1
22227: EQUAL
22228: IFFALSE 22245
// factory := IsInUnit ( factory ) ;
22230: LD_ADDR_VAR 0 1
22234: PUSH
22235: LD_VAR 0 1
22239: PPUSH
22240: CALL_OW 310
22244: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
22245: LD_VAR 0 1
22249: PPUSH
22250: CALL_OW 266
22254: PUSH
22255: LD_INT 3
22257: NONEQUAL
22258: IFFALSE 22262
// exit ;
22260: GO 22364
// if HexInfo ( x , y ) = factory then
22262: LD_VAR 0 2
22266: PPUSH
22267: LD_VAR 0 3
22271: PPUSH
22272: CALL_OW 428
22276: PUSH
22277: LD_VAR 0 1
22281: EQUAL
22282: IFFALSE 22309
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
22284: LD_ADDR_EXP 81
22288: PUSH
22289: LD_EXP 81
22293: PPUSH
22294: LD_VAR 0 1
22298: PPUSH
22299: LD_INT 0
22301: PPUSH
22302: CALL_OW 1
22306: ST_TO_ADDR
22307: GO 22360
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
22309: LD_ADDR_EXP 81
22313: PUSH
22314: LD_EXP 81
22318: PPUSH
22319: LD_VAR 0 1
22323: PPUSH
22324: LD_VAR 0 1
22328: PPUSH
22329: CALL_OW 255
22333: PUSH
22334: LD_VAR 0 1
22338: PUSH
22339: LD_VAR 0 2
22343: PUSH
22344: LD_VAR 0 3
22348: PUSH
22349: EMPTY
22350: LIST
22351: LIST
22352: LIST
22353: LIST
22354: PPUSH
22355: CALL_OW 1
22359: ST_TO_ADDR
// UpdateFactoryWaypoints ;
22360: CALL 22369 0 0
// end ;
22364: LD_VAR 0 4
22368: RET
// export function UpdateFactoryWaypoints ( ) ; var i , list ; begin
22369: LD_INT 0
22371: PPUSH
22372: PPUSH
22373: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
22374: LD_STRING resetFactoryWaypoint();
22376: PPUSH
22377: CALL_OW 559
// if factoryWaypoints then
22381: LD_EXP 81
22385: IFFALSE 22511
// begin list := PrepareArray ( factoryWaypoints ) ;
22387: LD_ADDR_VAR 0 3
22391: PUSH
22392: LD_EXP 81
22396: PPUSH
22397: CALL 64544 0 1
22401: ST_TO_ADDR
// for i := 1 to list do
22402: LD_ADDR_VAR 0 2
22406: PUSH
22407: DOUBLE
22408: LD_INT 1
22410: DEC
22411: ST_TO_ADDR
22412: LD_VAR 0 3
22416: PUSH
22417: FOR_TO
22418: IFFALSE 22509
// ToLua ( setFactoryWaypointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22420: LD_STRING setFactoryWaypointXY(
22422: PUSH
22423: LD_VAR 0 3
22427: PUSH
22428: LD_VAR 0 2
22432: ARRAY
22433: PUSH
22434: LD_INT 1
22436: ARRAY
22437: STR
22438: PUSH
22439: LD_STRING ,
22441: STR
22442: PUSH
22443: LD_VAR 0 3
22447: PUSH
22448: LD_VAR 0 2
22452: ARRAY
22453: PUSH
22454: LD_INT 2
22456: ARRAY
22457: STR
22458: PUSH
22459: LD_STRING ,
22461: STR
22462: PUSH
22463: LD_VAR 0 3
22467: PUSH
22468: LD_VAR 0 2
22472: ARRAY
22473: PUSH
22474: LD_INT 3
22476: ARRAY
22477: STR
22478: PUSH
22479: LD_STRING ,
22481: STR
22482: PUSH
22483: LD_VAR 0 3
22487: PUSH
22488: LD_VAR 0 2
22492: ARRAY
22493: PUSH
22494: LD_INT 4
22496: ARRAY
22497: STR
22498: PUSH
22499: LD_STRING )
22501: STR
22502: PPUSH
22503: CALL_OW 559
22507: GO 22417
22509: POP
22510: POP
// end ; end ;
22511: LD_VAR 0 1
22515: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarehouseGatheringPoint ( warehouse , x , y ) ; begin
22516: LD_INT 0
22518: PPUSH
// if HexInfo ( x , y ) = warehouse then
22519: LD_VAR 0 2
22523: PPUSH
22524: LD_VAR 0 3
22528: PPUSH
22529: CALL_OW 428
22533: PUSH
22534: LD_VAR 0 1
22538: EQUAL
22539: IFFALSE 22566
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
22541: LD_ADDR_EXP 82
22545: PUSH
22546: LD_EXP 82
22550: PPUSH
22551: LD_VAR 0 1
22555: PPUSH
22556: LD_INT 0
22558: PPUSH
22559: CALL_OW 1
22563: ST_TO_ADDR
22564: GO 22617
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
22566: LD_ADDR_EXP 82
22570: PUSH
22571: LD_EXP 82
22575: PPUSH
22576: LD_VAR 0 1
22580: PPUSH
22581: LD_VAR 0 1
22585: PPUSH
22586: CALL_OW 255
22590: PUSH
22591: LD_VAR 0 1
22595: PUSH
22596: LD_VAR 0 2
22600: PUSH
22601: LD_VAR 0 3
22605: PUSH
22606: EMPTY
22607: LIST
22608: LIST
22609: LIST
22610: LIST
22611: PPUSH
22612: CALL_OW 1
22616: ST_TO_ADDR
// UpdateWarehouseGatheringPoints ;
22617: CALL 22626 0 0
// end ;
22621: LD_VAR 0 4
22625: RET
// export function UpdateWarehouseGatheringPoints ( ) ; var i , list ; begin
22626: LD_INT 0
22628: PPUSH
22629: PPUSH
22630: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
22631: LD_STRING resetWarehouseGatheringPoints();
22633: PPUSH
22634: CALL_OW 559
// if warehouseGatheringPoints then
22638: LD_EXP 82
22642: IFFALSE 22768
// begin list := PrepareArray ( warehouseGatheringPoints ) ;
22644: LD_ADDR_VAR 0 3
22648: PUSH
22649: LD_EXP 82
22653: PPUSH
22654: CALL 64544 0 1
22658: ST_TO_ADDR
// for i := 1 to list do
22659: LD_ADDR_VAR 0 2
22663: PUSH
22664: DOUBLE
22665: LD_INT 1
22667: DEC
22668: ST_TO_ADDR
22669: LD_VAR 0 3
22673: PUSH
22674: FOR_TO
22675: IFFALSE 22766
// ToLua ( setWarehouseGatheringPointXY( & list [ i ] [ 1 ] & , & list [ i ] [ 2 ] & , & list [ i ] [ 3 ] & , & list [ i ] [ 4 ] & ) ) ;
22677: LD_STRING setWarehouseGatheringPointXY(
22679: PUSH
22680: LD_VAR 0 3
22684: PUSH
22685: LD_VAR 0 2
22689: ARRAY
22690: PUSH
22691: LD_INT 1
22693: ARRAY
22694: STR
22695: PUSH
22696: LD_STRING ,
22698: STR
22699: PUSH
22700: LD_VAR 0 3
22704: PUSH
22705: LD_VAR 0 2
22709: ARRAY
22710: PUSH
22711: LD_INT 2
22713: ARRAY
22714: STR
22715: PUSH
22716: LD_STRING ,
22718: STR
22719: PUSH
22720: LD_VAR 0 3
22724: PUSH
22725: LD_VAR 0 2
22729: ARRAY
22730: PUSH
22731: LD_INT 3
22733: ARRAY
22734: STR
22735: PUSH
22736: LD_STRING ,
22738: STR
22739: PUSH
22740: LD_VAR 0 3
22744: PUSH
22745: LD_VAR 0 2
22749: ARRAY
22750: PUSH
22751: LD_INT 4
22753: ARRAY
22754: STR
22755: PUSH
22756: LD_STRING )
22758: STR
22759: PPUSH
22760: CALL_OW 559
22764: GO 22674
22766: POP
22767: POP
// end ; end ;
22768: LD_VAR 0 1
22772: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
22773: LD_EXP 82
22777: IFFALSE 23462
22779: GO 22781
22781: DISABLE
22782: LD_INT 0
22784: PPUSH
22785: PPUSH
22786: PPUSH
22787: PPUSH
22788: PPUSH
22789: PPUSH
22790: PPUSH
22791: PPUSH
22792: PPUSH
// begin enable ;
22793: ENABLE
// list := PrepareArray ( warehouseGatheringPoints ) ;
22794: LD_ADDR_VAR 0 3
22798: PUSH
22799: LD_EXP 82
22803: PPUSH
22804: CALL 64544 0 1
22808: ST_TO_ADDR
// if not list then
22809: LD_VAR 0 3
22813: NOT
22814: IFFALSE 22818
// exit ;
22816: GO 23462
// for i := 1 to list do
22818: LD_ADDR_VAR 0 1
22822: PUSH
22823: DOUBLE
22824: LD_INT 1
22826: DEC
22827: ST_TO_ADDR
22828: LD_VAR 0 3
22832: PUSH
22833: FOR_TO
22834: IFFALSE 23460
// begin depot := list [ i ] [ 2 ] ;
22836: LD_ADDR_VAR 0 8
22840: PUSH
22841: LD_VAR 0 3
22845: PUSH
22846: LD_VAR 0 1
22850: ARRAY
22851: PUSH
22852: LD_INT 2
22854: ARRAY
22855: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
22856: LD_ADDR_VAR 0 5
22860: PUSH
22861: LD_VAR 0 3
22865: PUSH
22866: LD_VAR 0 1
22870: ARRAY
22871: PUSH
22872: LD_INT 1
22874: ARRAY
22875: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
22876: LD_VAR 0 8
22880: PPUSH
22881: CALL_OW 301
22885: PUSH
22886: LD_VAR 0 5
22890: PUSH
22891: LD_VAR 0 8
22895: PPUSH
22896: CALL_OW 255
22900: NONEQUAL
22901: OR
22902: IFFALSE 22931
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
22904: LD_ADDR_EXP 82
22908: PUSH
22909: LD_EXP 82
22913: PPUSH
22914: LD_VAR 0 8
22918: PPUSH
22919: LD_INT 0
22921: PPUSH
22922: CALL_OW 1
22926: ST_TO_ADDR
// exit ;
22927: POP
22928: POP
22929: GO 23462
// end ; x := list [ i ] [ 3 ] ;
22931: LD_ADDR_VAR 0 6
22935: PUSH
22936: LD_VAR 0 3
22940: PUSH
22941: LD_VAR 0 1
22945: ARRAY
22946: PUSH
22947: LD_INT 3
22949: ARRAY
22950: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
22951: LD_ADDR_VAR 0 7
22955: PUSH
22956: LD_VAR 0 3
22960: PUSH
22961: LD_VAR 0 1
22965: ARRAY
22966: PUSH
22967: LD_INT 4
22969: ARRAY
22970: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 16 ) ;
22971: LD_ADDR_VAR 0 9
22975: PUSH
22976: LD_VAR 0 6
22980: PPUSH
22981: LD_VAR 0 7
22985: PPUSH
22986: LD_INT 16
22988: PPUSH
22989: CALL 63132 0 3
22993: ST_TO_ADDR
// if not cratesNearbyPoint then
22994: LD_VAR 0 9
22998: NOT
22999: IFFALSE 23005
// exit ;
23001: POP
23002: POP
23003: GO 23462
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_dist , depot , 6 ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
23005: LD_ADDR_VAR 0 4
23009: PUSH
23010: LD_INT 22
23012: PUSH
23013: LD_VAR 0 5
23017: PUSH
23018: EMPTY
23019: LIST
23020: LIST
23021: PUSH
23022: LD_INT 3
23024: PUSH
23025: LD_INT 60
23027: PUSH
23028: EMPTY
23029: LIST
23030: PUSH
23031: EMPTY
23032: LIST
23033: LIST
23034: PUSH
23035: LD_INT 91
23037: PUSH
23038: LD_VAR 0 8
23042: PUSH
23043: LD_INT 6
23045: PUSH
23046: EMPTY
23047: LIST
23048: LIST
23049: LIST
23050: PUSH
23051: LD_INT 2
23053: PUSH
23054: LD_INT 25
23056: PUSH
23057: LD_INT 2
23059: PUSH
23060: EMPTY
23061: LIST
23062: LIST
23063: PUSH
23064: LD_INT 25
23066: PUSH
23067: LD_INT 16
23069: PUSH
23070: EMPTY
23071: LIST
23072: LIST
23073: PUSH
23074: EMPTY
23075: LIST
23076: LIST
23077: LIST
23078: PUSH
23079: EMPTY
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: PPUSH
23085: CALL_OW 69
23089: PUSH
23090: LD_VAR 0 8
23094: PPUSH
23095: CALL_OW 313
23099: PPUSH
23100: LD_INT 3
23102: PUSH
23103: LD_INT 60
23105: PUSH
23106: EMPTY
23107: LIST
23108: PUSH
23109: EMPTY
23110: LIST
23111: LIST
23112: PUSH
23113: LD_INT 2
23115: PUSH
23116: LD_INT 25
23118: PUSH
23119: LD_INT 2
23121: PUSH
23122: EMPTY
23123: LIST
23124: LIST
23125: PUSH
23126: LD_INT 25
23128: PUSH
23129: LD_INT 16
23131: PUSH
23132: EMPTY
23133: LIST
23134: LIST
23135: PUSH
23136: EMPTY
23137: LIST
23138: LIST
23139: LIST
23140: PUSH
23141: EMPTY
23142: LIST
23143: LIST
23144: PPUSH
23145: CALL_OW 72
23149: UNION
23150: ST_TO_ADDR
// if tmp then
23151: LD_VAR 0 4
23155: IFFALSE 23235
// begin tmp := ShrinkArray ( tmp , 3 ) ;
23157: LD_ADDR_VAR 0 4
23161: PUSH
23162: LD_VAR 0 4
23166: PPUSH
23167: LD_INT 3
23169: PPUSH
23170: CALL 61101 0 2
23174: ST_TO_ADDR
// for j in tmp do
23175: LD_ADDR_VAR 0 2
23179: PUSH
23180: LD_VAR 0 4
23184: PUSH
23185: FOR_IN
23186: IFFALSE 23229
// begin if IsInUnit ( j ) then
23188: LD_VAR 0 2
23192: PPUSH
23193: CALL_OW 310
23197: IFFALSE 23208
// ComExit ( j ) ;
23199: LD_VAR 0 2
23203: PPUSH
23204: CALL 61184 0 1
// AddComCollect ( j , x , y ) ;
23208: LD_VAR 0 2
23212: PPUSH
23213: LD_VAR 0 6
23217: PPUSH
23218: LD_VAR 0 7
23222: PPUSH
23223: CALL_OW 177
// end ;
23227: GO 23185
23229: POP
23230: POP
// exit ;
23231: POP
23232: POP
23233: GO 23462
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_dist , depot , 8 ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
23235: LD_ADDR_VAR 0 4
23239: PUSH
23240: LD_INT 22
23242: PUSH
23243: LD_VAR 0 5
23247: PUSH
23248: EMPTY
23249: LIST
23250: LIST
23251: PUSH
23252: LD_INT 91
23254: PUSH
23255: LD_VAR 0 8
23259: PUSH
23260: LD_INT 8
23262: PUSH
23263: EMPTY
23264: LIST
23265: LIST
23266: LIST
23267: PUSH
23268: LD_INT 2
23270: PUSH
23271: LD_INT 34
23273: PUSH
23274: LD_INT 12
23276: PUSH
23277: EMPTY
23278: LIST
23279: LIST
23280: PUSH
23281: LD_INT 34
23283: PUSH
23284: LD_INT 51
23286: PUSH
23287: EMPTY
23288: LIST
23289: LIST
23290: PUSH
23291: LD_INT 34
23293: PUSH
23294: LD_INT 32
23296: PUSH
23297: EMPTY
23298: LIST
23299: LIST
23300: PUSH
23301: LD_INT 34
23303: PUSH
23304: LD_INT 89
23306: PUSH
23307: EMPTY
23308: LIST
23309: LIST
23310: PUSH
23311: EMPTY
23312: LIST
23313: LIST
23314: LIST
23315: LIST
23316: LIST
23317: PUSH
23318: EMPTY
23319: LIST
23320: LIST
23321: LIST
23322: PPUSH
23323: CALL_OW 69
23327: ST_TO_ADDR
// if tmp then
23328: LD_VAR 0 4
23332: IFFALSE 23458
// begin for j in tmp do
23334: LD_ADDR_VAR 0 2
23338: PUSH
23339: LD_VAR 0 4
23343: PUSH
23344: FOR_IN
23345: IFFALSE 23456
// if ( GetEngine ( j ) = engine_siberite or GetFuel ( j ) > 20 ) and not HasTask ( j ) and ( GetControl ( j ) <> control_manual or IsDrivenBy ( j ) ) then
23347: LD_VAR 0 2
23351: PPUSH
23352: CALL_OW 262
23356: PUSH
23357: LD_INT 3
23359: EQUAL
23360: PUSH
23361: LD_VAR 0 2
23365: PPUSH
23366: CALL_OW 261
23370: PUSH
23371: LD_INT 20
23373: GREATER
23374: OR
23375: PUSH
23376: LD_VAR 0 2
23380: PPUSH
23381: CALL_OW 314
23385: NOT
23386: AND
23387: PUSH
23388: LD_VAR 0 2
23392: PPUSH
23393: CALL_OW 263
23397: PUSH
23398: LD_INT 1
23400: NONEQUAL
23401: PUSH
23402: LD_VAR 0 2
23406: PPUSH
23407: CALL_OW 311
23411: OR
23412: AND
23413: IFFALSE 23454
// begin ComCollect ( j , x , y ) ;
23415: LD_VAR 0 2
23419: PPUSH
23420: LD_VAR 0 6
23424: PPUSH
23425: LD_VAR 0 7
23429: PPUSH
23430: CALL_OW 117
// AddComMoveUnit ( j , depot ) ;
23434: LD_VAR 0 2
23438: PPUSH
23439: LD_VAR 0 8
23443: PPUSH
23444: CALL_OW 172
// exit ;
23448: POP
23449: POP
23450: POP
23451: POP
23452: GO 23462
// end ;
23454: GO 23344
23456: POP
23457: POP
// end ; end ;
23458: GO 22833
23460: POP
23461: POP
// end ; end_of_file end_of_file
23462: PPOPN 9
23464: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
23465: LD_INT 0
23467: PPUSH
23468: PPUSH
// if exist_mode then
23469: LD_VAR 0 2
23473: IFFALSE 23498
// unit := CreateCharacter ( prefix & ident ) else
23475: LD_ADDR_VAR 0 5
23479: PUSH
23480: LD_VAR 0 3
23484: PUSH
23485: LD_VAR 0 1
23489: STR
23490: PPUSH
23491: CALL_OW 34
23495: ST_TO_ADDR
23496: GO 23513
// unit := NewCharacter ( ident ) ;
23498: LD_ADDR_VAR 0 5
23502: PUSH
23503: LD_VAR 0 1
23507: PPUSH
23508: CALL_OW 25
23512: ST_TO_ADDR
// result := unit ;
23513: LD_ADDR_VAR 0 4
23517: PUSH
23518: LD_VAR 0 5
23522: ST_TO_ADDR
// end ;
23523: LD_VAR 0 4
23527: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
23528: LD_INT 0
23530: PPUSH
23531: PPUSH
// if not side or not nation then
23532: LD_VAR 0 1
23536: NOT
23537: PUSH
23538: LD_VAR 0 2
23542: NOT
23543: OR
23544: IFFALSE 23548
// exit ;
23546: GO 24316
// case nation of nation_american :
23548: LD_VAR 0 2
23552: PUSH
23553: LD_INT 1
23555: DOUBLE
23556: EQUAL
23557: IFTRUE 23561
23559: GO 23775
23561: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
23562: LD_ADDR_VAR 0 4
23566: PUSH
23567: LD_INT 35
23569: PUSH
23570: LD_INT 45
23572: PUSH
23573: LD_INT 46
23575: PUSH
23576: LD_INT 47
23578: PUSH
23579: LD_INT 82
23581: PUSH
23582: LD_INT 83
23584: PUSH
23585: LD_INT 84
23587: PUSH
23588: LD_INT 85
23590: PUSH
23591: LD_INT 86
23593: PUSH
23594: LD_INT 1
23596: PUSH
23597: LD_INT 2
23599: PUSH
23600: LD_INT 6
23602: PUSH
23603: LD_INT 15
23605: PUSH
23606: LD_INT 16
23608: PUSH
23609: LD_INT 7
23611: PUSH
23612: LD_INT 12
23614: PUSH
23615: LD_INT 13
23617: PUSH
23618: LD_INT 10
23620: PUSH
23621: LD_INT 14
23623: PUSH
23624: LD_INT 20
23626: PUSH
23627: LD_INT 21
23629: PUSH
23630: LD_INT 22
23632: PUSH
23633: LD_INT 25
23635: PUSH
23636: LD_INT 32
23638: PUSH
23639: LD_INT 27
23641: PUSH
23642: LD_INT 36
23644: PUSH
23645: LD_INT 69
23647: PUSH
23648: LD_INT 39
23650: PUSH
23651: LD_INT 34
23653: PUSH
23654: LD_INT 40
23656: PUSH
23657: LD_INT 48
23659: PUSH
23660: LD_INT 49
23662: PUSH
23663: LD_INT 50
23665: PUSH
23666: LD_INT 51
23668: PUSH
23669: LD_INT 52
23671: PUSH
23672: LD_INT 53
23674: PUSH
23675: LD_INT 54
23677: PUSH
23678: LD_INT 55
23680: PUSH
23681: LD_INT 56
23683: PUSH
23684: LD_INT 57
23686: PUSH
23687: LD_INT 58
23689: PUSH
23690: LD_INT 59
23692: PUSH
23693: LD_INT 60
23695: PUSH
23696: LD_INT 61
23698: PUSH
23699: LD_INT 62
23701: PUSH
23702: LD_INT 80
23704: PUSH
23705: LD_INT 82
23707: PUSH
23708: LD_INT 83
23710: PUSH
23711: LD_INT 84
23713: PUSH
23714: LD_INT 85
23716: PUSH
23717: LD_INT 86
23719: PUSH
23720: EMPTY
23721: LIST
23722: LIST
23723: LIST
23724: LIST
23725: LIST
23726: LIST
23727: LIST
23728: LIST
23729: LIST
23730: LIST
23731: LIST
23732: LIST
23733: LIST
23734: LIST
23735: LIST
23736: LIST
23737: LIST
23738: LIST
23739: LIST
23740: LIST
23741: LIST
23742: LIST
23743: LIST
23744: LIST
23745: LIST
23746: LIST
23747: LIST
23748: LIST
23749: LIST
23750: LIST
23751: LIST
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: LIST
23769: LIST
23770: LIST
23771: LIST
23772: ST_TO_ADDR
23773: GO 24240
23775: LD_INT 2
23777: DOUBLE
23778: EQUAL
23779: IFTRUE 23783
23781: GO 24009
23783: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
23784: LD_ADDR_VAR 0 4
23788: PUSH
23789: LD_INT 35
23791: PUSH
23792: LD_INT 45
23794: PUSH
23795: LD_INT 46
23797: PUSH
23798: LD_INT 47
23800: PUSH
23801: LD_INT 82
23803: PUSH
23804: LD_INT 83
23806: PUSH
23807: LD_INT 84
23809: PUSH
23810: LD_INT 85
23812: PUSH
23813: LD_INT 87
23815: PUSH
23816: LD_INT 70
23818: PUSH
23819: LD_INT 1
23821: PUSH
23822: LD_INT 11
23824: PUSH
23825: LD_INT 3
23827: PUSH
23828: LD_INT 4
23830: PUSH
23831: LD_INT 5
23833: PUSH
23834: LD_INT 6
23836: PUSH
23837: LD_INT 15
23839: PUSH
23840: LD_INT 18
23842: PUSH
23843: LD_INT 7
23845: PUSH
23846: LD_INT 17
23848: PUSH
23849: LD_INT 8
23851: PUSH
23852: LD_INT 20
23854: PUSH
23855: LD_INT 21
23857: PUSH
23858: LD_INT 22
23860: PUSH
23861: LD_INT 72
23863: PUSH
23864: LD_INT 26
23866: PUSH
23867: LD_INT 69
23869: PUSH
23870: LD_INT 39
23872: PUSH
23873: LD_INT 40
23875: PUSH
23876: LD_INT 41
23878: PUSH
23879: LD_INT 42
23881: PUSH
23882: LD_INT 43
23884: PUSH
23885: LD_INT 48
23887: PUSH
23888: LD_INT 49
23890: PUSH
23891: LD_INT 50
23893: PUSH
23894: LD_INT 51
23896: PUSH
23897: LD_INT 52
23899: PUSH
23900: LD_INT 53
23902: PUSH
23903: LD_INT 54
23905: PUSH
23906: LD_INT 55
23908: PUSH
23909: LD_INT 56
23911: PUSH
23912: LD_INT 60
23914: PUSH
23915: LD_INT 61
23917: PUSH
23918: LD_INT 62
23920: PUSH
23921: LD_INT 66
23923: PUSH
23924: LD_INT 67
23926: PUSH
23927: LD_INT 68
23929: PUSH
23930: LD_INT 81
23932: PUSH
23933: LD_INT 82
23935: PUSH
23936: LD_INT 83
23938: PUSH
23939: LD_INT 84
23941: PUSH
23942: LD_INT 85
23944: PUSH
23945: LD_INT 87
23947: PUSH
23948: LD_INT 88
23950: PUSH
23951: EMPTY
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: LIST
23965: LIST
23966: LIST
23967: LIST
23968: LIST
23969: LIST
23970: LIST
23971: LIST
23972: LIST
23973: LIST
23974: LIST
23975: LIST
23976: LIST
23977: LIST
23978: LIST
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: LIST
23990: LIST
23991: LIST
23992: LIST
23993: LIST
23994: LIST
23995: LIST
23996: LIST
23997: LIST
23998: LIST
23999: LIST
24000: LIST
24001: LIST
24002: LIST
24003: LIST
24004: LIST
24005: LIST
24006: ST_TO_ADDR
24007: GO 24240
24009: LD_INT 3
24011: DOUBLE
24012: EQUAL
24013: IFTRUE 24017
24015: GO 24239
24017: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
24018: LD_ADDR_VAR 0 4
24022: PUSH
24023: LD_INT 46
24025: PUSH
24026: LD_INT 47
24028: PUSH
24029: LD_INT 1
24031: PUSH
24032: LD_INT 2
24034: PUSH
24035: LD_INT 82
24037: PUSH
24038: LD_INT 83
24040: PUSH
24041: LD_INT 84
24043: PUSH
24044: LD_INT 85
24046: PUSH
24047: LD_INT 86
24049: PUSH
24050: LD_INT 11
24052: PUSH
24053: LD_INT 9
24055: PUSH
24056: LD_INT 20
24058: PUSH
24059: LD_INT 19
24061: PUSH
24062: LD_INT 21
24064: PUSH
24065: LD_INT 24
24067: PUSH
24068: LD_INT 22
24070: PUSH
24071: LD_INT 25
24073: PUSH
24074: LD_INT 28
24076: PUSH
24077: LD_INT 29
24079: PUSH
24080: LD_INT 30
24082: PUSH
24083: LD_INT 31
24085: PUSH
24086: LD_INT 37
24088: PUSH
24089: LD_INT 38
24091: PUSH
24092: LD_INT 32
24094: PUSH
24095: LD_INT 27
24097: PUSH
24098: LD_INT 33
24100: PUSH
24101: LD_INT 69
24103: PUSH
24104: LD_INT 39
24106: PUSH
24107: LD_INT 34
24109: PUSH
24110: LD_INT 40
24112: PUSH
24113: LD_INT 71
24115: PUSH
24116: LD_INT 23
24118: PUSH
24119: LD_INT 44
24121: PUSH
24122: LD_INT 48
24124: PUSH
24125: LD_INT 49
24127: PUSH
24128: LD_INT 50
24130: PUSH
24131: LD_INT 51
24133: PUSH
24134: LD_INT 52
24136: PUSH
24137: LD_INT 53
24139: PUSH
24140: LD_INT 54
24142: PUSH
24143: LD_INT 55
24145: PUSH
24146: LD_INT 56
24148: PUSH
24149: LD_INT 57
24151: PUSH
24152: LD_INT 58
24154: PUSH
24155: LD_INT 59
24157: PUSH
24158: LD_INT 63
24160: PUSH
24161: LD_INT 64
24163: PUSH
24164: LD_INT 65
24166: PUSH
24167: LD_INT 82
24169: PUSH
24170: LD_INT 83
24172: PUSH
24173: LD_INT 84
24175: PUSH
24176: LD_INT 85
24178: PUSH
24179: LD_INT 86
24181: PUSH
24182: EMPTY
24183: LIST
24184: LIST
24185: LIST
24186: LIST
24187: LIST
24188: LIST
24189: LIST
24190: LIST
24191: LIST
24192: LIST
24193: LIST
24194: LIST
24195: LIST
24196: LIST
24197: LIST
24198: LIST
24199: LIST
24200: LIST
24201: LIST
24202: LIST
24203: LIST
24204: LIST
24205: LIST
24206: LIST
24207: LIST
24208: LIST
24209: LIST
24210: LIST
24211: LIST
24212: LIST
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: LIST
24218: LIST
24219: LIST
24220: LIST
24221: LIST
24222: LIST
24223: LIST
24224: LIST
24225: LIST
24226: LIST
24227: LIST
24228: LIST
24229: LIST
24230: LIST
24231: LIST
24232: LIST
24233: LIST
24234: LIST
24235: LIST
24236: ST_TO_ADDR
24237: GO 24240
24239: POP
// if state > - 1 and state < 3 then
24240: LD_VAR 0 3
24244: PUSH
24245: LD_INT 1
24247: NEG
24248: GREATER
24249: PUSH
24250: LD_VAR 0 3
24254: PUSH
24255: LD_INT 3
24257: LESS
24258: AND
24259: IFFALSE 24316
// for i in result do
24261: LD_ADDR_VAR 0 5
24265: PUSH
24266: LD_VAR 0 4
24270: PUSH
24271: FOR_IN
24272: IFFALSE 24314
// if GetTech ( i , side ) <> state then
24274: LD_VAR 0 5
24278: PPUSH
24279: LD_VAR 0 1
24283: PPUSH
24284: CALL_OW 321
24288: PUSH
24289: LD_VAR 0 3
24293: NONEQUAL
24294: IFFALSE 24312
// result := result diff i ;
24296: LD_ADDR_VAR 0 4
24300: PUSH
24301: LD_VAR 0 4
24305: PUSH
24306: LD_VAR 0 5
24310: DIFF
24311: ST_TO_ADDR
24312: GO 24271
24314: POP
24315: POP
// end ;
24316: LD_VAR 0 4
24320: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
24321: LD_INT 0
24323: PPUSH
24324: PPUSH
24325: PPUSH
// result := true ;
24326: LD_ADDR_VAR 0 3
24330: PUSH
24331: LD_INT 1
24333: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
24334: LD_ADDR_VAR 0 5
24338: PUSH
24339: LD_VAR 0 2
24343: PPUSH
24344: CALL_OW 480
24348: ST_TO_ADDR
// if not tmp then
24349: LD_VAR 0 5
24353: NOT
24354: IFFALSE 24358
// exit ;
24356: GO 24407
// for i in tmp do
24358: LD_ADDR_VAR 0 4
24362: PUSH
24363: LD_VAR 0 5
24367: PUSH
24368: FOR_IN
24369: IFFALSE 24405
// if GetTech ( i , side ) <> state_researched then
24371: LD_VAR 0 4
24375: PPUSH
24376: LD_VAR 0 1
24380: PPUSH
24381: CALL_OW 321
24385: PUSH
24386: LD_INT 2
24388: NONEQUAL
24389: IFFALSE 24403
// begin result := false ;
24391: LD_ADDR_VAR 0 3
24395: PUSH
24396: LD_INT 0
24398: ST_TO_ADDR
// exit ;
24399: POP
24400: POP
24401: GO 24407
// end ;
24403: GO 24368
24405: POP
24406: POP
// end ;
24407: LD_VAR 0 3
24411: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
24412: LD_INT 0
24414: PPUSH
24415: PPUSH
24416: PPUSH
24417: PPUSH
24418: PPUSH
24419: PPUSH
24420: PPUSH
24421: PPUSH
24422: PPUSH
24423: PPUSH
24424: PPUSH
24425: PPUSH
24426: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
24427: LD_VAR 0 1
24431: NOT
24432: PUSH
24433: LD_VAR 0 1
24437: PPUSH
24438: CALL_OW 257
24442: PUSH
24443: LD_INT 9
24445: NONEQUAL
24446: OR
24447: IFFALSE 24451
// exit ;
24449: GO 25024
// side := GetSide ( unit ) ;
24451: LD_ADDR_VAR 0 9
24455: PUSH
24456: LD_VAR 0 1
24460: PPUSH
24461: CALL_OW 255
24465: ST_TO_ADDR
// tech_space := tech_spacanom ;
24466: LD_ADDR_VAR 0 12
24470: PUSH
24471: LD_INT 29
24473: ST_TO_ADDR
// tech_time := tech_taurad ;
24474: LD_ADDR_VAR 0 13
24478: PUSH
24479: LD_INT 28
24481: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
24482: LD_ADDR_VAR 0 11
24486: PUSH
24487: LD_VAR 0 1
24491: PPUSH
24492: CALL_OW 310
24496: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
24497: LD_VAR 0 11
24501: PPUSH
24502: CALL_OW 247
24506: PUSH
24507: LD_INT 2
24509: EQUAL
24510: IFFALSE 24514
// exit ;
24512: GO 25024
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
24514: LD_ADDR_VAR 0 8
24518: PUSH
24519: LD_INT 81
24521: PUSH
24522: LD_VAR 0 9
24526: PUSH
24527: EMPTY
24528: LIST
24529: LIST
24530: PUSH
24531: LD_INT 3
24533: PUSH
24534: LD_INT 21
24536: PUSH
24537: LD_INT 3
24539: PUSH
24540: EMPTY
24541: LIST
24542: LIST
24543: PUSH
24544: EMPTY
24545: LIST
24546: LIST
24547: PUSH
24548: EMPTY
24549: LIST
24550: LIST
24551: PPUSH
24552: CALL_OW 69
24556: ST_TO_ADDR
// if not tmp then
24557: LD_VAR 0 8
24561: NOT
24562: IFFALSE 24566
// exit ;
24564: GO 25024
// if in_unit then
24566: LD_VAR 0 11
24570: IFFALSE 24594
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
24572: LD_ADDR_VAR 0 10
24576: PUSH
24577: LD_VAR 0 8
24581: PPUSH
24582: LD_VAR 0 11
24586: PPUSH
24587: CALL_OW 74
24591: ST_TO_ADDR
24592: GO 24614
// enemy := NearestUnitToUnit ( tmp , unit ) ;
24594: LD_ADDR_VAR 0 10
24598: PUSH
24599: LD_VAR 0 8
24603: PPUSH
24604: LD_VAR 0 1
24608: PPUSH
24609: CALL_OW 74
24613: ST_TO_ADDR
// if not enemy then
24614: LD_VAR 0 10
24618: NOT
24619: IFFALSE 24623
// exit ;
24621: GO 25024
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
24623: LD_VAR 0 11
24627: PUSH
24628: LD_VAR 0 11
24632: PPUSH
24633: LD_VAR 0 10
24637: PPUSH
24638: CALL_OW 296
24642: PUSH
24643: LD_INT 13
24645: GREATER
24646: AND
24647: PUSH
24648: LD_VAR 0 1
24652: PPUSH
24653: LD_VAR 0 10
24657: PPUSH
24658: CALL_OW 296
24662: PUSH
24663: LD_INT 12
24665: GREATER
24666: OR
24667: IFFALSE 24671
// exit ;
24669: GO 25024
// missile := [ 1 ] ;
24671: LD_ADDR_VAR 0 14
24675: PUSH
24676: LD_INT 1
24678: PUSH
24679: EMPTY
24680: LIST
24681: ST_TO_ADDR
// if Researched ( side , tech_space ) then
24682: LD_VAR 0 9
24686: PPUSH
24687: LD_VAR 0 12
24691: PPUSH
24692: CALL_OW 325
24696: IFFALSE 24725
// missile := Replace ( missile , missile + 1 , 2 ) ;
24698: LD_ADDR_VAR 0 14
24702: PUSH
24703: LD_VAR 0 14
24707: PPUSH
24708: LD_VAR 0 14
24712: PUSH
24713: LD_INT 1
24715: PLUS
24716: PPUSH
24717: LD_INT 2
24719: PPUSH
24720: CALL_OW 1
24724: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
24725: LD_VAR 0 9
24729: PPUSH
24730: LD_VAR 0 13
24734: PPUSH
24735: CALL_OW 325
24739: PUSH
24740: LD_VAR 0 10
24744: PPUSH
24745: CALL_OW 255
24749: PPUSH
24750: LD_VAR 0 13
24754: PPUSH
24755: CALL_OW 325
24759: NOT
24760: AND
24761: IFFALSE 24790
// missile := Replace ( missile , missile + 1 , 3 ) ;
24763: LD_ADDR_VAR 0 14
24767: PUSH
24768: LD_VAR 0 14
24772: PPUSH
24773: LD_VAR 0 14
24777: PUSH
24778: LD_INT 1
24780: PLUS
24781: PPUSH
24782: LD_INT 3
24784: PPUSH
24785: CALL_OW 1
24789: ST_TO_ADDR
// if missile < 2 then
24790: LD_VAR 0 14
24794: PUSH
24795: LD_INT 2
24797: LESS
24798: IFFALSE 24802
// exit ;
24800: GO 25024
// x := GetX ( enemy ) ;
24802: LD_ADDR_VAR 0 4
24806: PUSH
24807: LD_VAR 0 10
24811: PPUSH
24812: CALL_OW 250
24816: ST_TO_ADDR
// y := GetY ( enemy ) ;
24817: LD_ADDR_VAR 0 5
24821: PUSH
24822: LD_VAR 0 10
24826: PPUSH
24827: CALL_OW 251
24831: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
24832: LD_ADDR_VAR 0 6
24836: PUSH
24837: LD_VAR 0 4
24841: PUSH
24842: LD_INT 1
24844: NEG
24845: PPUSH
24846: LD_INT 1
24848: PPUSH
24849: CALL_OW 12
24853: PLUS
24854: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
24855: LD_ADDR_VAR 0 7
24859: PUSH
24860: LD_VAR 0 5
24864: PUSH
24865: LD_INT 1
24867: NEG
24868: PPUSH
24869: LD_INT 1
24871: PPUSH
24872: CALL_OW 12
24876: PLUS
24877: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
24878: LD_VAR 0 6
24882: PPUSH
24883: LD_VAR 0 7
24887: PPUSH
24888: CALL_OW 488
24892: NOT
24893: IFFALSE 24915
// begin _x := x ;
24895: LD_ADDR_VAR 0 6
24899: PUSH
24900: LD_VAR 0 4
24904: ST_TO_ADDR
// _y := y ;
24905: LD_ADDR_VAR 0 7
24909: PUSH
24910: LD_VAR 0 5
24914: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
24915: LD_ADDR_VAR 0 3
24919: PUSH
24920: LD_INT 1
24922: PPUSH
24923: LD_VAR 0 14
24927: PPUSH
24928: CALL_OW 12
24932: ST_TO_ADDR
// case i of 1 :
24933: LD_VAR 0 3
24937: PUSH
24938: LD_INT 1
24940: DOUBLE
24941: EQUAL
24942: IFTRUE 24946
24944: GO 24963
24946: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
24947: LD_VAR 0 1
24951: PPUSH
24952: LD_VAR 0 10
24956: PPUSH
24957: CALL_OW 115
24961: GO 25024
24963: LD_INT 2
24965: DOUBLE
24966: EQUAL
24967: IFTRUE 24971
24969: GO 24993
24971: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
24972: LD_VAR 0 1
24976: PPUSH
24977: LD_VAR 0 6
24981: PPUSH
24982: LD_VAR 0 7
24986: PPUSH
24987: CALL_OW 153
24991: GO 25024
24993: LD_INT 3
24995: DOUBLE
24996: EQUAL
24997: IFTRUE 25001
24999: GO 25023
25001: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
25002: LD_VAR 0 1
25006: PPUSH
25007: LD_VAR 0 6
25011: PPUSH
25012: LD_VAR 0 7
25016: PPUSH
25017: CALL_OW 154
25021: GO 25024
25023: POP
// end ;
25024: LD_VAR 0 2
25028: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
25029: LD_INT 0
25031: PPUSH
25032: PPUSH
25033: PPUSH
25034: PPUSH
25035: PPUSH
25036: PPUSH
// if not unit or not building then
25037: LD_VAR 0 1
25041: NOT
25042: PUSH
25043: LD_VAR 0 2
25047: NOT
25048: OR
25049: IFFALSE 25053
// exit ;
25051: GO 25211
// x := GetX ( building ) ;
25053: LD_ADDR_VAR 0 5
25057: PUSH
25058: LD_VAR 0 2
25062: PPUSH
25063: CALL_OW 250
25067: ST_TO_ADDR
// y := GetY ( building ) ;
25068: LD_ADDR_VAR 0 6
25072: PUSH
25073: LD_VAR 0 2
25077: PPUSH
25078: CALL_OW 251
25082: ST_TO_ADDR
// for i = 0 to 5 do
25083: LD_ADDR_VAR 0 4
25087: PUSH
25088: DOUBLE
25089: LD_INT 0
25091: DEC
25092: ST_TO_ADDR
25093: LD_INT 5
25095: PUSH
25096: FOR_TO
25097: IFFALSE 25209
// begin _x := ShiftX ( x , i , 3 ) ;
25099: LD_ADDR_VAR 0 7
25103: PUSH
25104: LD_VAR 0 5
25108: PPUSH
25109: LD_VAR 0 4
25113: PPUSH
25114: LD_INT 3
25116: PPUSH
25117: CALL_OW 272
25121: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
25122: LD_ADDR_VAR 0 8
25126: PUSH
25127: LD_VAR 0 6
25131: PPUSH
25132: LD_VAR 0 4
25136: PPUSH
25137: LD_INT 3
25139: PPUSH
25140: CALL_OW 273
25144: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
25145: LD_VAR 0 7
25149: PPUSH
25150: LD_VAR 0 8
25154: PPUSH
25155: CALL_OW 488
25159: NOT
25160: IFFALSE 25164
// continue ;
25162: GO 25096
// if HexInfo ( _x , _y ) = 0 then
25164: LD_VAR 0 7
25168: PPUSH
25169: LD_VAR 0 8
25173: PPUSH
25174: CALL_OW 428
25178: PUSH
25179: LD_INT 0
25181: EQUAL
25182: IFFALSE 25207
// begin ComMoveXY ( unit , _x , _y ) ;
25184: LD_VAR 0 1
25188: PPUSH
25189: LD_VAR 0 7
25193: PPUSH
25194: LD_VAR 0 8
25198: PPUSH
25199: CALL_OW 111
// exit ;
25203: POP
25204: POP
25205: GO 25211
// end ; end ;
25207: GO 25096
25209: POP
25210: POP
// end ;
25211: LD_VAR 0 3
25215: RET
// export function ScanBase ( side , base_area ) ; begin
25216: LD_INT 0
25218: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
25219: LD_ADDR_VAR 0 3
25223: PUSH
25224: LD_VAR 0 2
25228: PPUSH
25229: LD_INT 81
25231: PUSH
25232: LD_VAR 0 1
25236: PUSH
25237: EMPTY
25238: LIST
25239: LIST
25240: PPUSH
25241: CALL_OW 70
25245: ST_TO_ADDR
// end ;
25246: LD_VAR 0 3
25250: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
25251: LD_INT 0
25253: PPUSH
25254: PPUSH
25255: PPUSH
25256: PPUSH
// result := false ;
25257: LD_ADDR_VAR 0 2
25261: PUSH
25262: LD_INT 0
25264: ST_TO_ADDR
// side := GetSide ( unit ) ;
25265: LD_ADDR_VAR 0 3
25269: PUSH
25270: LD_VAR 0 1
25274: PPUSH
25275: CALL_OW 255
25279: ST_TO_ADDR
// nat := GetNation ( unit ) ;
25280: LD_ADDR_VAR 0 4
25284: PUSH
25285: LD_VAR 0 1
25289: PPUSH
25290: CALL_OW 248
25294: ST_TO_ADDR
// case nat of 1 :
25295: LD_VAR 0 4
25299: PUSH
25300: LD_INT 1
25302: DOUBLE
25303: EQUAL
25304: IFTRUE 25308
25306: GO 25319
25308: POP
// tech := tech_lassight ; 2 :
25309: LD_ADDR_VAR 0 5
25313: PUSH
25314: LD_INT 12
25316: ST_TO_ADDR
25317: GO 25358
25319: LD_INT 2
25321: DOUBLE
25322: EQUAL
25323: IFTRUE 25327
25325: GO 25338
25327: POP
// tech := tech_mortar ; 3 :
25328: LD_ADDR_VAR 0 5
25332: PUSH
25333: LD_INT 41
25335: ST_TO_ADDR
25336: GO 25358
25338: LD_INT 3
25340: DOUBLE
25341: EQUAL
25342: IFTRUE 25346
25344: GO 25357
25346: POP
// tech := tech_bazooka ; end ;
25347: LD_ADDR_VAR 0 5
25351: PUSH
25352: LD_INT 44
25354: ST_TO_ADDR
25355: GO 25358
25357: POP
// if Researched ( side , tech ) then
25358: LD_VAR 0 3
25362: PPUSH
25363: LD_VAR 0 5
25367: PPUSH
25368: CALL_OW 325
25372: IFFALSE 25399
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
25374: LD_ADDR_VAR 0 2
25378: PUSH
25379: LD_INT 5
25381: PUSH
25382: LD_INT 8
25384: PUSH
25385: LD_INT 9
25387: PUSH
25388: EMPTY
25389: LIST
25390: LIST
25391: LIST
25392: PUSH
25393: LD_VAR 0 4
25397: ARRAY
25398: ST_TO_ADDR
// end ;
25399: LD_VAR 0 2
25403: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
25404: LD_INT 0
25406: PPUSH
25407: PPUSH
25408: PPUSH
// if not mines then
25409: LD_VAR 0 2
25413: NOT
25414: IFFALSE 25418
// exit ;
25416: GO 25562
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
25418: LD_ADDR_VAR 0 5
25422: PUSH
25423: LD_INT 81
25425: PUSH
25426: LD_VAR 0 1
25430: PUSH
25431: EMPTY
25432: LIST
25433: LIST
25434: PUSH
25435: LD_INT 3
25437: PUSH
25438: LD_INT 21
25440: PUSH
25441: LD_INT 3
25443: PUSH
25444: EMPTY
25445: LIST
25446: LIST
25447: PUSH
25448: EMPTY
25449: LIST
25450: LIST
25451: PUSH
25452: EMPTY
25453: LIST
25454: LIST
25455: PPUSH
25456: CALL_OW 69
25460: ST_TO_ADDR
// for i in mines do
25461: LD_ADDR_VAR 0 4
25465: PUSH
25466: LD_VAR 0 2
25470: PUSH
25471: FOR_IN
25472: IFFALSE 25560
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
25474: LD_VAR 0 4
25478: PUSH
25479: LD_INT 1
25481: ARRAY
25482: PPUSH
25483: LD_VAR 0 4
25487: PUSH
25488: LD_INT 2
25490: ARRAY
25491: PPUSH
25492: CALL_OW 458
25496: NOT
25497: IFFALSE 25501
// continue ;
25499: GO 25471
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
25501: LD_VAR 0 4
25505: PUSH
25506: LD_INT 1
25508: ARRAY
25509: PPUSH
25510: LD_VAR 0 4
25514: PUSH
25515: LD_INT 2
25517: ARRAY
25518: PPUSH
25519: CALL_OW 428
25523: PUSH
25524: LD_VAR 0 5
25528: IN
25529: IFFALSE 25558
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
25531: LD_VAR 0 4
25535: PUSH
25536: LD_INT 1
25538: ARRAY
25539: PPUSH
25540: LD_VAR 0 4
25544: PUSH
25545: LD_INT 2
25547: ARRAY
25548: PPUSH
25549: LD_VAR 0 1
25553: PPUSH
25554: CALL_OW 456
// end ;
25558: GO 25471
25560: POP
25561: POP
// end ;
25562: LD_VAR 0 3
25566: RET
// export function Count ( array ) ; begin
25567: LD_INT 0
25569: PPUSH
// result := array + 0 ;
25570: LD_ADDR_VAR 0 2
25574: PUSH
25575: LD_VAR 0 1
25579: PUSH
25580: LD_INT 0
25582: PLUS
25583: ST_TO_ADDR
// end ;
25584: LD_VAR 0 2
25588: RET
// export function IsEmpty ( building ) ; begin
25589: LD_INT 0
25591: PPUSH
// if not building then
25592: LD_VAR 0 1
25596: NOT
25597: IFFALSE 25601
// exit ;
25599: GO 25644
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
25601: LD_ADDR_VAR 0 2
25605: PUSH
25606: LD_VAR 0 1
25610: PUSH
25611: LD_INT 22
25613: PUSH
25614: LD_VAR 0 1
25618: PPUSH
25619: CALL_OW 255
25623: PUSH
25624: EMPTY
25625: LIST
25626: LIST
25627: PUSH
25628: LD_INT 58
25630: PUSH
25631: EMPTY
25632: LIST
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: PPUSH
25638: CALL_OW 69
25642: IN
25643: ST_TO_ADDR
// end ;
25644: LD_VAR 0 2
25648: RET
// export function IsNotFull ( building ) ; var places ; begin
25649: LD_INT 0
25651: PPUSH
25652: PPUSH
// if not building then
25653: LD_VAR 0 1
25657: NOT
25658: IFFALSE 25662
// exit ;
25660: GO 25690
// result := UnitFilter ( building , [ f_not , [ f_full ] ] ) ;
25662: LD_ADDR_VAR 0 2
25666: PUSH
25667: LD_VAR 0 1
25671: PPUSH
25672: LD_INT 3
25674: PUSH
25675: LD_INT 62
25677: PUSH
25678: EMPTY
25679: LIST
25680: PUSH
25681: EMPTY
25682: LIST
25683: LIST
25684: PPUSH
25685: CALL_OW 72
25689: ST_TO_ADDR
// end ;
25690: LD_VAR 0 2
25694: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
25695: LD_INT 0
25697: PPUSH
25698: PPUSH
25699: PPUSH
25700: PPUSH
// tmp := [ ] ;
25701: LD_ADDR_VAR 0 3
25705: PUSH
25706: EMPTY
25707: ST_TO_ADDR
// list := [ ] ;
25708: LD_ADDR_VAR 0 5
25712: PUSH
25713: EMPTY
25714: ST_TO_ADDR
// for i = 16 to 25 do
25715: LD_ADDR_VAR 0 4
25719: PUSH
25720: DOUBLE
25721: LD_INT 16
25723: DEC
25724: ST_TO_ADDR
25725: LD_INT 25
25727: PUSH
25728: FOR_TO
25729: IFFALSE 25802
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
25731: LD_ADDR_VAR 0 3
25735: PUSH
25736: LD_VAR 0 3
25740: PUSH
25741: LD_INT 22
25743: PUSH
25744: LD_VAR 0 1
25748: PPUSH
25749: CALL_OW 255
25753: PUSH
25754: EMPTY
25755: LIST
25756: LIST
25757: PUSH
25758: LD_INT 91
25760: PUSH
25761: LD_VAR 0 1
25765: PUSH
25766: LD_INT 6
25768: PUSH
25769: EMPTY
25770: LIST
25771: LIST
25772: LIST
25773: PUSH
25774: LD_INT 30
25776: PUSH
25777: LD_VAR 0 4
25781: PUSH
25782: EMPTY
25783: LIST
25784: LIST
25785: PUSH
25786: EMPTY
25787: LIST
25788: LIST
25789: LIST
25790: PUSH
25791: EMPTY
25792: LIST
25793: PPUSH
25794: CALL_OW 69
25798: ADD
25799: ST_TO_ADDR
25800: GO 25728
25802: POP
25803: POP
// for i = 1 to tmp do
25804: LD_ADDR_VAR 0 4
25808: PUSH
25809: DOUBLE
25810: LD_INT 1
25812: DEC
25813: ST_TO_ADDR
25814: LD_VAR 0 3
25818: PUSH
25819: FOR_TO
25820: IFFALSE 25908
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
25822: LD_ADDR_VAR 0 5
25826: PUSH
25827: LD_VAR 0 5
25831: PUSH
25832: LD_VAR 0 3
25836: PUSH
25837: LD_VAR 0 4
25841: ARRAY
25842: PPUSH
25843: CALL_OW 266
25847: PUSH
25848: LD_VAR 0 3
25852: PUSH
25853: LD_VAR 0 4
25857: ARRAY
25858: PPUSH
25859: CALL_OW 250
25863: PUSH
25864: LD_VAR 0 3
25868: PUSH
25869: LD_VAR 0 4
25873: ARRAY
25874: PPUSH
25875: CALL_OW 251
25879: PUSH
25880: LD_VAR 0 3
25884: PUSH
25885: LD_VAR 0 4
25889: ARRAY
25890: PPUSH
25891: CALL_OW 254
25895: PUSH
25896: EMPTY
25897: LIST
25898: LIST
25899: LIST
25900: LIST
25901: PUSH
25902: EMPTY
25903: LIST
25904: ADD
25905: ST_TO_ADDR
25906: GO 25819
25908: POP
25909: POP
// result := list ;
25910: LD_ADDR_VAR 0 2
25914: PUSH
25915: LD_VAR 0 5
25919: ST_TO_ADDR
// end ;
25920: LD_VAR 0 2
25924: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
25925: LD_INT 0
25927: PPUSH
25928: PPUSH
25929: PPUSH
25930: PPUSH
25931: PPUSH
25932: PPUSH
25933: PPUSH
// if not factory then
25934: LD_VAR 0 1
25938: NOT
25939: IFFALSE 25943
// exit ;
25941: GO 26536
// if control = control_apeman then
25943: LD_VAR 0 4
25947: PUSH
25948: LD_INT 5
25950: EQUAL
25951: IFFALSE 26060
// begin tmp := UnitsInside ( factory ) ;
25953: LD_ADDR_VAR 0 8
25957: PUSH
25958: LD_VAR 0 1
25962: PPUSH
25963: CALL_OW 313
25967: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
25968: LD_VAR 0 8
25972: PPUSH
25973: LD_INT 25
25975: PUSH
25976: LD_INT 12
25978: PUSH
25979: EMPTY
25980: LIST
25981: LIST
25982: PPUSH
25983: CALL_OW 72
25987: NOT
25988: IFFALSE 25998
// control := control_manual ;
25990: LD_ADDR_VAR 0 4
25994: PUSH
25995: LD_INT 1
25997: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
25998: LD_ADDR_VAR 0 8
26002: PUSH
26003: LD_VAR 0 1
26007: PPUSH
26008: CALL 25695 0 1
26012: ST_TO_ADDR
// if tmp then
26013: LD_VAR 0 8
26017: IFFALSE 26060
// begin for i in tmp do
26019: LD_ADDR_VAR 0 7
26023: PUSH
26024: LD_VAR 0 8
26028: PUSH
26029: FOR_IN
26030: IFFALSE 26058
// if i [ 1 ] = b_ext_radio then
26032: LD_VAR 0 7
26036: PUSH
26037: LD_INT 1
26039: ARRAY
26040: PUSH
26041: LD_INT 22
26043: EQUAL
26044: IFFALSE 26056
// begin control := control_remote ;
26046: LD_ADDR_VAR 0 4
26050: PUSH
26051: LD_INT 2
26053: ST_TO_ADDR
// break ;
26054: GO 26058
// end ;
26056: GO 26029
26058: POP
26059: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26060: LD_VAR 0 1
26064: PPUSH
26065: LD_VAR 0 2
26069: PPUSH
26070: LD_VAR 0 3
26074: PPUSH
26075: LD_VAR 0 4
26079: PPUSH
26080: LD_VAR 0 5
26084: PPUSH
26085: CALL_OW 448
26089: IFFALSE 26124
// begin result := [ chassis , engine , control , weapon ] ;
26091: LD_ADDR_VAR 0 6
26095: PUSH
26096: LD_VAR 0 2
26100: PUSH
26101: LD_VAR 0 3
26105: PUSH
26106: LD_VAR 0 4
26110: PUSH
26111: LD_VAR 0 5
26115: PUSH
26116: EMPTY
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: ST_TO_ADDR
// exit ;
26122: GO 26536
// end ; _chassis := AvailableChassisList ( factory ) ;
26124: LD_ADDR_VAR 0 9
26128: PUSH
26129: LD_VAR 0 1
26133: PPUSH
26134: CALL_OW 475
26138: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
26139: LD_ADDR_VAR 0 11
26143: PUSH
26144: LD_VAR 0 1
26148: PPUSH
26149: CALL_OW 476
26153: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
26154: LD_ADDR_VAR 0 12
26158: PUSH
26159: LD_VAR 0 1
26163: PPUSH
26164: CALL_OW 477
26168: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
26169: LD_ADDR_VAR 0 10
26173: PUSH
26174: LD_VAR 0 1
26178: PPUSH
26179: CALL_OW 478
26183: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
26184: LD_VAR 0 9
26188: NOT
26189: PUSH
26190: LD_VAR 0 11
26194: NOT
26195: OR
26196: PUSH
26197: LD_VAR 0 12
26201: NOT
26202: OR
26203: PUSH
26204: LD_VAR 0 10
26208: NOT
26209: OR
26210: IFFALSE 26245
// begin result := [ chassis , engine , control , weapon ] ;
26212: LD_ADDR_VAR 0 6
26216: PUSH
26217: LD_VAR 0 2
26221: PUSH
26222: LD_VAR 0 3
26226: PUSH
26227: LD_VAR 0 4
26231: PUSH
26232: LD_VAR 0 5
26236: PUSH
26237: EMPTY
26238: LIST
26239: LIST
26240: LIST
26241: LIST
26242: ST_TO_ADDR
// exit ;
26243: GO 26536
// end ; if not chassis in _chassis then
26245: LD_VAR 0 2
26249: PUSH
26250: LD_VAR 0 9
26254: IN
26255: NOT
26256: IFFALSE 26282
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
26258: LD_ADDR_VAR 0 2
26262: PUSH
26263: LD_VAR 0 9
26267: PUSH
26268: LD_INT 1
26270: PPUSH
26271: LD_VAR 0 9
26275: PPUSH
26276: CALL_OW 12
26280: ARRAY
26281: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
26282: LD_VAR 0 2
26286: PPUSH
26287: LD_VAR 0 3
26291: PPUSH
26292: CALL 26541 0 2
26296: NOT
26297: IFFALSE 26356
// repeat engine := _engine [ 1 ] ;
26299: LD_ADDR_VAR 0 3
26303: PUSH
26304: LD_VAR 0 11
26308: PUSH
26309: LD_INT 1
26311: ARRAY
26312: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
26313: LD_ADDR_VAR 0 11
26317: PUSH
26318: LD_VAR 0 11
26322: PPUSH
26323: LD_INT 1
26325: PPUSH
26326: CALL_OW 3
26330: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
26331: LD_VAR 0 2
26335: PPUSH
26336: LD_VAR 0 3
26340: PPUSH
26341: CALL 26541 0 2
26345: PUSH
26346: LD_VAR 0 11
26350: PUSH
26351: EMPTY
26352: EQUAL
26353: OR
26354: IFFALSE 26299
// if not control in _control then
26356: LD_VAR 0 4
26360: PUSH
26361: LD_VAR 0 12
26365: IN
26366: NOT
26367: IFFALSE 26393
// control := _control [ rand ( 1 , _control ) ] ;
26369: LD_ADDR_VAR 0 4
26373: PUSH
26374: LD_VAR 0 12
26378: PUSH
26379: LD_INT 1
26381: PPUSH
26382: LD_VAR 0 12
26386: PPUSH
26387: CALL_OW 12
26391: ARRAY
26392: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
26393: LD_VAR 0 2
26397: PPUSH
26398: LD_VAR 0 5
26402: PPUSH
26403: CALL 26761 0 2
26407: NOT
26408: IFFALSE 26467
// repeat weapon := _weapon [ 1 ] ;
26410: LD_ADDR_VAR 0 5
26414: PUSH
26415: LD_VAR 0 10
26419: PUSH
26420: LD_INT 1
26422: ARRAY
26423: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
26424: LD_ADDR_VAR 0 10
26428: PUSH
26429: LD_VAR 0 10
26433: PPUSH
26434: LD_INT 1
26436: PPUSH
26437: CALL_OW 3
26441: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
26442: LD_VAR 0 2
26446: PPUSH
26447: LD_VAR 0 5
26451: PPUSH
26452: CALL 26761 0 2
26456: PUSH
26457: LD_VAR 0 10
26461: PUSH
26462: EMPTY
26463: EQUAL
26464: OR
26465: IFFALSE 26410
// result := [ ] ;
26467: LD_ADDR_VAR 0 6
26471: PUSH
26472: EMPTY
26473: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
26474: LD_VAR 0 1
26478: PPUSH
26479: LD_VAR 0 2
26483: PPUSH
26484: LD_VAR 0 3
26488: PPUSH
26489: LD_VAR 0 4
26493: PPUSH
26494: LD_VAR 0 5
26498: PPUSH
26499: CALL_OW 448
26503: IFFALSE 26536
// result := [ chassis , engine , control , weapon ] ;
26505: LD_ADDR_VAR 0 6
26509: PUSH
26510: LD_VAR 0 2
26514: PUSH
26515: LD_VAR 0 3
26519: PUSH
26520: LD_VAR 0 4
26524: PUSH
26525: LD_VAR 0 5
26529: PUSH
26530: EMPTY
26531: LIST
26532: LIST
26533: LIST
26534: LIST
26535: ST_TO_ADDR
// end ;
26536: LD_VAR 0 6
26540: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
26541: LD_INT 0
26543: PPUSH
// if not chassis or not engine then
26544: LD_VAR 0 1
26548: NOT
26549: PUSH
26550: LD_VAR 0 2
26554: NOT
26555: OR
26556: IFFALSE 26560
// exit ;
26558: GO 26756
// case engine of engine_solar :
26560: LD_VAR 0 2
26564: PUSH
26565: LD_INT 2
26567: DOUBLE
26568: EQUAL
26569: IFTRUE 26573
26571: GO 26611
26573: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
26574: LD_ADDR_VAR 0 3
26578: PUSH
26579: LD_INT 11
26581: PUSH
26582: LD_INT 12
26584: PUSH
26585: LD_INT 13
26587: PUSH
26588: LD_INT 14
26590: PUSH
26591: LD_INT 1
26593: PUSH
26594: LD_INT 2
26596: PUSH
26597: LD_INT 3
26599: PUSH
26600: EMPTY
26601: LIST
26602: LIST
26603: LIST
26604: LIST
26605: LIST
26606: LIST
26607: LIST
26608: ST_TO_ADDR
26609: GO 26740
26611: LD_INT 1
26613: DOUBLE
26614: EQUAL
26615: IFTRUE 26619
26617: GO 26681
26619: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
26620: LD_ADDR_VAR 0 3
26624: PUSH
26625: LD_INT 11
26627: PUSH
26628: LD_INT 12
26630: PUSH
26631: LD_INT 13
26633: PUSH
26634: LD_INT 14
26636: PUSH
26637: LD_INT 1
26639: PUSH
26640: LD_INT 2
26642: PUSH
26643: LD_INT 3
26645: PUSH
26646: LD_INT 4
26648: PUSH
26649: LD_INT 5
26651: PUSH
26652: LD_INT 21
26654: PUSH
26655: LD_INT 23
26657: PUSH
26658: LD_INT 22
26660: PUSH
26661: LD_INT 24
26663: PUSH
26664: EMPTY
26665: LIST
26666: LIST
26667: LIST
26668: LIST
26669: LIST
26670: LIST
26671: LIST
26672: LIST
26673: LIST
26674: LIST
26675: LIST
26676: LIST
26677: LIST
26678: ST_TO_ADDR
26679: GO 26740
26681: LD_INT 3
26683: DOUBLE
26684: EQUAL
26685: IFTRUE 26689
26687: GO 26739
26689: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
26690: LD_ADDR_VAR 0 3
26694: PUSH
26695: LD_INT 13
26697: PUSH
26698: LD_INT 14
26700: PUSH
26701: LD_INT 2
26703: PUSH
26704: LD_INT 3
26706: PUSH
26707: LD_INT 4
26709: PUSH
26710: LD_INT 5
26712: PUSH
26713: LD_INT 21
26715: PUSH
26716: LD_INT 22
26718: PUSH
26719: LD_INT 23
26721: PUSH
26722: LD_INT 24
26724: PUSH
26725: EMPTY
26726: LIST
26727: LIST
26728: LIST
26729: LIST
26730: LIST
26731: LIST
26732: LIST
26733: LIST
26734: LIST
26735: LIST
26736: ST_TO_ADDR
26737: GO 26740
26739: POP
// result := ( chassis in result ) ;
26740: LD_ADDR_VAR 0 3
26744: PUSH
26745: LD_VAR 0 1
26749: PUSH
26750: LD_VAR 0 3
26754: IN
26755: ST_TO_ADDR
// end ;
26756: LD_VAR 0 3
26760: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
26761: LD_INT 0
26763: PPUSH
// if not chassis or not weapon then
26764: LD_VAR 0 1
26768: NOT
26769: PUSH
26770: LD_VAR 0 2
26774: NOT
26775: OR
26776: IFFALSE 26780
// exit ;
26778: GO 27840
// case weapon of us_machine_gun :
26780: LD_VAR 0 2
26784: PUSH
26785: LD_INT 2
26787: DOUBLE
26788: EQUAL
26789: IFTRUE 26793
26791: GO 26823
26793: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
26794: LD_ADDR_VAR 0 3
26798: PUSH
26799: LD_INT 1
26801: PUSH
26802: LD_INT 2
26804: PUSH
26805: LD_INT 3
26807: PUSH
26808: LD_INT 4
26810: PUSH
26811: LD_INT 5
26813: PUSH
26814: EMPTY
26815: LIST
26816: LIST
26817: LIST
26818: LIST
26819: LIST
26820: ST_TO_ADDR
26821: GO 27824
26823: LD_INT 3
26825: DOUBLE
26826: EQUAL
26827: IFTRUE 26831
26829: GO 26861
26831: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
26832: LD_ADDR_VAR 0 3
26836: PUSH
26837: LD_INT 1
26839: PUSH
26840: LD_INT 2
26842: PUSH
26843: LD_INT 3
26845: PUSH
26846: LD_INT 4
26848: PUSH
26849: LD_INT 5
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: LIST
26856: LIST
26857: LIST
26858: ST_TO_ADDR
26859: GO 27824
26861: LD_INT 11
26863: DOUBLE
26864: EQUAL
26865: IFTRUE 26869
26867: GO 26899
26869: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
26870: LD_ADDR_VAR 0 3
26874: PUSH
26875: LD_INT 1
26877: PUSH
26878: LD_INT 2
26880: PUSH
26881: LD_INT 3
26883: PUSH
26884: LD_INT 4
26886: PUSH
26887: LD_INT 5
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: LIST
26894: LIST
26895: LIST
26896: ST_TO_ADDR
26897: GO 27824
26899: LD_INT 4
26901: DOUBLE
26902: EQUAL
26903: IFTRUE 26907
26905: GO 26933
26907: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
26908: LD_ADDR_VAR 0 3
26912: PUSH
26913: LD_INT 2
26915: PUSH
26916: LD_INT 3
26918: PUSH
26919: LD_INT 4
26921: PUSH
26922: LD_INT 5
26924: PUSH
26925: EMPTY
26926: LIST
26927: LIST
26928: LIST
26929: LIST
26930: ST_TO_ADDR
26931: GO 27824
26933: LD_INT 5
26935: DOUBLE
26936: EQUAL
26937: IFTRUE 26941
26939: GO 26967
26941: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
26942: LD_ADDR_VAR 0 3
26946: PUSH
26947: LD_INT 2
26949: PUSH
26950: LD_INT 3
26952: PUSH
26953: LD_INT 4
26955: PUSH
26956: LD_INT 5
26958: PUSH
26959: EMPTY
26960: LIST
26961: LIST
26962: LIST
26963: LIST
26964: ST_TO_ADDR
26965: GO 27824
26967: LD_INT 9
26969: DOUBLE
26970: EQUAL
26971: IFTRUE 26975
26973: GO 27001
26975: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
26976: LD_ADDR_VAR 0 3
26980: PUSH
26981: LD_INT 2
26983: PUSH
26984: LD_INT 3
26986: PUSH
26987: LD_INT 4
26989: PUSH
26990: LD_INT 5
26992: PUSH
26993: EMPTY
26994: LIST
26995: LIST
26996: LIST
26997: LIST
26998: ST_TO_ADDR
26999: GO 27824
27001: LD_INT 7
27003: DOUBLE
27004: EQUAL
27005: IFTRUE 27009
27007: GO 27035
27009: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
27010: LD_ADDR_VAR 0 3
27014: PUSH
27015: LD_INT 2
27017: PUSH
27018: LD_INT 3
27020: PUSH
27021: LD_INT 4
27023: PUSH
27024: LD_INT 5
27026: PUSH
27027: EMPTY
27028: LIST
27029: LIST
27030: LIST
27031: LIST
27032: ST_TO_ADDR
27033: GO 27824
27035: LD_INT 12
27037: DOUBLE
27038: EQUAL
27039: IFTRUE 27043
27041: GO 27069
27043: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
27044: LD_ADDR_VAR 0 3
27048: PUSH
27049: LD_INT 2
27051: PUSH
27052: LD_INT 3
27054: PUSH
27055: LD_INT 4
27057: PUSH
27058: LD_INT 5
27060: PUSH
27061: EMPTY
27062: LIST
27063: LIST
27064: LIST
27065: LIST
27066: ST_TO_ADDR
27067: GO 27824
27069: LD_INT 13
27071: DOUBLE
27072: EQUAL
27073: IFTRUE 27077
27075: GO 27103
27077: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
27078: LD_ADDR_VAR 0 3
27082: PUSH
27083: LD_INT 2
27085: PUSH
27086: LD_INT 3
27088: PUSH
27089: LD_INT 4
27091: PUSH
27092: LD_INT 5
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: LIST
27099: LIST
27100: ST_TO_ADDR
27101: GO 27824
27103: LD_INT 14
27105: DOUBLE
27106: EQUAL
27107: IFTRUE 27111
27109: GO 27129
27111: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
27112: LD_ADDR_VAR 0 3
27116: PUSH
27117: LD_INT 4
27119: PUSH
27120: LD_INT 5
27122: PUSH
27123: EMPTY
27124: LIST
27125: LIST
27126: ST_TO_ADDR
27127: GO 27824
27129: LD_INT 6
27131: DOUBLE
27132: EQUAL
27133: IFTRUE 27137
27135: GO 27155
27137: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
27138: LD_ADDR_VAR 0 3
27142: PUSH
27143: LD_INT 4
27145: PUSH
27146: LD_INT 5
27148: PUSH
27149: EMPTY
27150: LIST
27151: LIST
27152: ST_TO_ADDR
27153: GO 27824
27155: LD_INT 10
27157: DOUBLE
27158: EQUAL
27159: IFTRUE 27163
27161: GO 27181
27163: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
27164: LD_ADDR_VAR 0 3
27168: PUSH
27169: LD_INT 4
27171: PUSH
27172: LD_INT 5
27174: PUSH
27175: EMPTY
27176: LIST
27177: LIST
27178: ST_TO_ADDR
27179: GO 27824
27181: LD_INT 22
27183: DOUBLE
27184: EQUAL
27185: IFTRUE 27189
27187: GO 27215
27189: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
27190: LD_ADDR_VAR 0 3
27194: PUSH
27195: LD_INT 11
27197: PUSH
27198: LD_INT 12
27200: PUSH
27201: LD_INT 13
27203: PUSH
27204: LD_INT 14
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: LIST
27211: LIST
27212: ST_TO_ADDR
27213: GO 27824
27215: LD_INT 23
27217: DOUBLE
27218: EQUAL
27219: IFTRUE 27223
27221: GO 27249
27223: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
27224: LD_ADDR_VAR 0 3
27228: PUSH
27229: LD_INT 11
27231: PUSH
27232: LD_INT 12
27234: PUSH
27235: LD_INT 13
27237: PUSH
27238: LD_INT 14
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: LIST
27245: LIST
27246: ST_TO_ADDR
27247: GO 27824
27249: LD_INT 24
27251: DOUBLE
27252: EQUAL
27253: IFTRUE 27257
27255: GO 27283
27257: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
27258: LD_ADDR_VAR 0 3
27262: PUSH
27263: LD_INT 11
27265: PUSH
27266: LD_INT 12
27268: PUSH
27269: LD_INT 13
27271: PUSH
27272: LD_INT 14
27274: PUSH
27275: EMPTY
27276: LIST
27277: LIST
27278: LIST
27279: LIST
27280: ST_TO_ADDR
27281: GO 27824
27283: LD_INT 30
27285: DOUBLE
27286: EQUAL
27287: IFTRUE 27291
27289: GO 27317
27291: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
27292: LD_ADDR_VAR 0 3
27296: PUSH
27297: LD_INT 11
27299: PUSH
27300: LD_INT 12
27302: PUSH
27303: LD_INT 13
27305: PUSH
27306: LD_INT 14
27308: PUSH
27309: EMPTY
27310: LIST
27311: LIST
27312: LIST
27313: LIST
27314: ST_TO_ADDR
27315: GO 27824
27317: LD_INT 25
27319: DOUBLE
27320: EQUAL
27321: IFTRUE 27325
27323: GO 27343
27325: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
27326: LD_ADDR_VAR 0 3
27330: PUSH
27331: LD_INT 13
27333: PUSH
27334: LD_INT 14
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: ST_TO_ADDR
27341: GO 27824
27343: LD_INT 27
27345: DOUBLE
27346: EQUAL
27347: IFTRUE 27351
27349: GO 27369
27351: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
27352: LD_ADDR_VAR 0 3
27356: PUSH
27357: LD_INT 13
27359: PUSH
27360: LD_INT 14
27362: PUSH
27363: EMPTY
27364: LIST
27365: LIST
27366: ST_TO_ADDR
27367: GO 27824
27369: LD_INT 92
27371: DOUBLE
27372: EQUAL
27373: IFTRUE 27377
27375: GO 27403
27377: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
27378: LD_ADDR_VAR 0 3
27382: PUSH
27383: LD_INT 11
27385: PUSH
27386: LD_INT 12
27388: PUSH
27389: LD_INT 13
27391: PUSH
27392: LD_INT 14
27394: PUSH
27395: EMPTY
27396: LIST
27397: LIST
27398: LIST
27399: LIST
27400: ST_TO_ADDR
27401: GO 27824
27403: LD_INT 28
27405: DOUBLE
27406: EQUAL
27407: IFTRUE 27411
27409: GO 27429
27411: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
27412: LD_ADDR_VAR 0 3
27416: PUSH
27417: LD_INT 13
27419: PUSH
27420: LD_INT 14
27422: PUSH
27423: EMPTY
27424: LIST
27425: LIST
27426: ST_TO_ADDR
27427: GO 27824
27429: LD_INT 29
27431: DOUBLE
27432: EQUAL
27433: IFTRUE 27437
27435: GO 27455
27437: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
27438: LD_ADDR_VAR 0 3
27442: PUSH
27443: LD_INT 13
27445: PUSH
27446: LD_INT 14
27448: PUSH
27449: EMPTY
27450: LIST
27451: LIST
27452: ST_TO_ADDR
27453: GO 27824
27455: LD_INT 31
27457: DOUBLE
27458: EQUAL
27459: IFTRUE 27463
27461: GO 27481
27463: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
27464: LD_ADDR_VAR 0 3
27468: PUSH
27469: LD_INT 13
27471: PUSH
27472: LD_INT 14
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: ST_TO_ADDR
27479: GO 27824
27481: LD_INT 26
27483: DOUBLE
27484: EQUAL
27485: IFTRUE 27489
27487: GO 27507
27489: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
27490: LD_ADDR_VAR 0 3
27494: PUSH
27495: LD_INT 13
27497: PUSH
27498: LD_INT 14
27500: PUSH
27501: EMPTY
27502: LIST
27503: LIST
27504: ST_TO_ADDR
27505: GO 27824
27507: LD_INT 42
27509: DOUBLE
27510: EQUAL
27511: IFTRUE 27515
27513: GO 27541
27515: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
27516: LD_ADDR_VAR 0 3
27520: PUSH
27521: LD_INT 21
27523: PUSH
27524: LD_INT 22
27526: PUSH
27527: LD_INT 23
27529: PUSH
27530: LD_INT 24
27532: PUSH
27533: EMPTY
27534: LIST
27535: LIST
27536: LIST
27537: LIST
27538: ST_TO_ADDR
27539: GO 27824
27541: LD_INT 43
27543: DOUBLE
27544: EQUAL
27545: IFTRUE 27549
27547: GO 27575
27549: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
27550: LD_ADDR_VAR 0 3
27554: PUSH
27555: LD_INT 21
27557: PUSH
27558: LD_INT 22
27560: PUSH
27561: LD_INT 23
27563: PUSH
27564: LD_INT 24
27566: PUSH
27567: EMPTY
27568: LIST
27569: LIST
27570: LIST
27571: LIST
27572: ST_TO_ADDR
27573: GO 27824
27575: LD_INT 44
27577: DOUBLE
27578: EQUAL
27579: IFTRUE 27583
27581: GO 27609
27583: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
27584: LD_ADDR_VAR 0 3
27588: PUSH
27589: LD_INT 21
27591: PUSH
27592: LD_INT 22
27594: PUSH
27595: LD_INT 23
27597: PUSH
27598: LD_INT 24
27600: PUSH
27601: EMPTY
27602: LIST
27603: LIST
27604: LIST
27605: LIST
27606: ST_TO_ADDR
27607: GO 27824
27609: LD_INT 45
27611: DOUBLE
27612: EQUAL
27613: IFTRUE 27617
27615: GO 27643
27617: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
27618: LD_ADDR_VAR 0 3
27622: PUSH
27623: LD_INT 21
27625: PUSH
27626: LD_INT 22
27628: PUSH
27629: LD_INT 23
27631: PUSH
27632: LD_INT 24
27634: PUSH
27635: EMPTY
27636: LIST
27637: LIST
27638: LIST
27639: LIST
27640: ST_TO_ADDR
27641: GO 27824
27643: LD_INT 49
27645: DOUBLE
27646: EQUAL
27647: IFTRUE 27651
27649: GO 27677
27651: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
27652: LD_ADDR_VAR 0 3
27656: PUSH
27657: LD_INT 21
27659: PUSH
27660: LD_INT 22
27662: PUSH
27663: LD_INT 23
27665: PUSH
27666: LD_INT 24
27668: PUSH
27669: EMPTY
27670: LIST
27671: LIST
27672: LIST
27673: LIST
27674: ST_TO_ADDR
27675: GO 27824
27677: LD_INT 51
27679: DOUBLE
27680: EQUAL
27681: IFTRUE 27685
27683: GO 27711
27685: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
27686: LD_ADDR_VAR 0 3
27690: PUSH
27691: LD_INT 21
27693: PUSH
27694: LD_INT 22
27696: PUSH
27697: LD_INT 23
27699: PUSH
27700: LD_INT 24
27702: PUSH
27703: EMPTY
27704: LIST
27705: LIST
27706: LIST
27707: LIST
27708: ST_TO_ADDR
27709: GO 27824
27711: LD_INT 52
27713: DOUBLE
27714: EQUAL
27715: IFTRUE 27719
27717: GO 27745
27719: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
27720: LD_ADDR_VAR 0 3
27724: PUSH
27725: LD_INT 21
27727: PUSH
27728: LD_INT 22
27730: PUSH
27731: LD_INT 23
27733: PUSH
27734: LD_INT 24
27736: PUSH
27737: EMPTY
27738: LIST
27739: LIST
27740: LIST
27741: LIST
27742: ST_TO_ADDR
27743: GO 27824
27745: LD_INT 53
27747: DOUBLE
27748: EQUAL
27749: IFTRUE 27753
27751: GO 27771
27753: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
27754: LD_ADDR_VAR 0 3
27758: PUSH
27759: LD_INT 23
27761: PUSH
27762: LD_INT 24
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: ST_TO_ADDR
27769: GO 27824
27771: LD_INT 46
27773: DOUBLE
27774: EQUAL
27775: IFTRUE 27779
27777: GO 27797
27779: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
27780: LD_ADDR_VAR 0 3
27784: PUSH
27785: LD_INT 23
27787: PUSH
27788: LD_INT 24
27790: PUSH
27791: EMPTY
27792: LIST
27793: LIST
27794: ST_TO_ADDR
27795: GO 27824
27797: LD_INT 47
27799: DOUBLE
27800: EQUAL
27801: IFTRUE 27805
27803: GO 27823
27805: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
27806: LD_ADDR_VAR 0 3
27810: PUSH
27811: LD_INT 23
27813: PUSH
27814: LD_INT 24
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: ST_TO_ADDR
27821: GO 27824
27823: POP
// result := ( chassis in result ) ;
27824: LD_ADDR_VAR 0 3
27828: PUSH
27829: LD_VAR 0 1
27833: PUSH
27834: LD_VAR 0 3
27838: IN
27839: ST_TO_ADDR
// end ;
27840: LD_VAR 0 3
27844: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
27845: LD_INT 0
27847: PPUSH
27848: PPUSH
27849: PPUSH
27850: PPUSH
27851: PPUSH
27852: PPUSH
27853: PPUSH
// result := array ;
27854: LD_ADDR_VAR 0 5
27858: PUSH
27859: LD_VAR 0 1
27863: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
27864: LD_VAR 0 1
27868: NOT
27869: PUSH
27870: LD_VAR 0 2
27874: NOT
27875: OR
27876: PUSH
27877: LD_VAR 0 3
27881: NOT
27882: OR
27883: PUSH
27884: LD_VAR 0 2
27888: PUSH
27889: LD_VAR 0 1
27893: GREATER
27894: OR
27895: PUSH
27896: LD_VAR 0 3
27900: PUSH
27901: LD_VAR 0 1
27905: GREATER
27906: OR
27907: IFFALSE 27911
// exit ;
27909: GO 28207
// if direction then
27911: LD_VAR 0 4
27915: IFFALSE 27979
// begin d := 1 ;
27917: LD_ADDR_VAR 0 9
27921: PUSH
27922: LD_INT 1
27924: ST_TO_ADDR
// if i_from > i_to then
27925: LD_VAR 0 2
27929: PUSH
27930: LD_VAR 0 3
27934: GREATER
27935: IFFALSE 27961
// length := ( array - i_from ) + i_to else
27937: LD_ADDR_VAR 0 11
27941: PUSH
27942: LD_VAR 0 1
27946: PUSH
27947: LD_VAR 0 2
27951: MINUS
27952: PUSH
27953: LD_VAR 0 3
27957: PLUS
27958: ST_TO_ADDR
27959: GO 27977
// length := i_to - i_from ;
27961: LD_ADDR_VAR 0 11
27965: PUSH
27966: LD_VAR 0 3
27970: PUSH
27971: LD_VAR 0 2
27975: MINUS
27976: ST_TO_ADDR
// end else
27977: GO 28040
// begin d := - 1 ;
27979: LD_ADDR_VAR 0 9
27983: PUSH
27984: LD_INT 1
27986: NEG
27987: ST_TO_ADDR
// if i_from > i_to then
27988: LD_VAR 0 2
27992: PUSH
27993: LD_VAR 0 3
27997: GREATER
27998: IFFALSE 28018
// length := i_from - i_to else
28000: LD_ADDR_VAR 0 11
28004: PUSH
28005: LD_VAR 0 2
28009: PUSH
28010: LD_VAR 0 3
28014: MINUS
28015: ST_TO_ADDR
28016: GO 28040
// length := ( array - i_to ) + i_from ;
28018: LD_ADDR_VAR 0 11
28022: PUSH
28023: LD_VAR 0 1
28027: PUSH
28028: LD_VAR 0 3
28032: MINUS
28033: PUSH
28034: LD_VAR 0 2
28038: PLUS
28039: ST_TO_ADDR
// end ; if not length then
28040: LD_VAR 0 11
28044: NOT
28045: IFFALSE 28049
// exit ;
28047: GO 28207
// tmp := array ;
28049: LD_ADDR_VAR 0 10
28053: PUSH
28054: LD_VAR 0 1
28058: ST_TO_ADDR
// for i = 1 to length do
28059: LD_ADDR_VAR 0 6
28063: PUSH
28064: DOUBLE
28065: LD_INT 1
28067: DEC
28068: ST_TO_ADDR
28069: LD_VAR 0 11
28073: PUSH
28074: FOR_TO
28075: IFFALSE 28195
// begin for j = 1 to array do
28077: LD_ADDR_VAR 0 7
28081: PUSH
28082: DOUBLE
28083: LD_INT 1
28085: DEC
28086: ST_TO_ADDR
28087: LD_VAR 0 1
28091: PUSH
28092: FOR_TO
28093: IFFALSE 28181
// begin k := j + d ;
28095: LD_ADDR_VAR 0 8
28099: PUSH
28100: LD_VAR 0 7
28104: PUSH
28105: LD_VAR 0 9
28109: PLUS
28110: ST_TO_ADDR
// if k > array then
28111: LD_VAR 0 8
28115: PUSH
28116: LD_VAR 0 1
28120: GREATER
28121: IFFALSE 28131
// k := 1 ;
28123: LD_ADDR_VAR 0 8
28127: PUSH
28128: LD_INT 1
28130: ST_TO_ADDR
// if not k then
28131: LD_VAR 0 8
28135: NOT
28136: IFFALSE 28148
// k := array ;
28138: LD_ADDR_VAR 0 8
28142: PUSH
28143: LD_VAR 0 1
28147: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
28148: LD_ADDR_VAR 0 10
28152: PUSH
28153: LD_VAR 0 10
28157: PPUSH
28158: LD_VAR 0 8
28162: PPUSH
28163: LD_VAR 0 1
28167: PUSH
28168: LD_VAR 0 7
28172: ARRAY
28173: PPUSH
28174: CALL_OW 1
28178: ST_TO_ADDR
// end ;
28179: GO 28092
28181: POP
28182: POP
// array := tmp ;
28183: LD_ADDR_VAR 0 1
28187: PUSH
28188: LD_VAR 0 10
28192: ST_TO_ADDR
// end ;
28193: GO 28074
28195: POP
28196: POP
// result := array ;
28197: LD_ADDR_VAR 0 5
28201: PUSH
28202: LD_VAR 0 1
28206: ST_TO_ADDR
// end ;
28207: LD_VAR 0 5
28211: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
28212: LD_INT 0
28214: PPUSH
28215: PPUSH
// result := 0 ;
28216: LD_ADDR_VAR 0 3
28220: PUSH
28221: LD_INT 0
28223: ST_TO_ADDR
// if not array or not value in array then
28224: LD_VAR 0 1
28228: NOT
28229: PUSH
28230: LD_VAR 0 2
28234: PUSH
28235: LD_VAR 0 1
28239: IN
28240: NOT
28241: OR
28242: IFFALSE 28246
// exit ;
28244: GO 28300
// for i = 1 to array do
28246: LD_ADDR_VAR 0 4
28250: PUSH
28251: DOUBLE
28252: LD_INT 1
28254: DEC
28255: ST_TO_ADDR
28256: LD_VAR 0 1
28260: PUSH
28261: FOR_TO
28262: IFFALSE 28298
// if value = array [ i ] then
28264: LD_VAR 0 2
28268: PUSH
28269: LD_VAR 0 1
28273: PUSH
28274: LD_VAR 0 4
28278: ARRAY
28279: EQUAL
28280: IFFALSE 28296
// begin result := i ;
28282: LD_ADDR_VAR 0 3
28286: PUSH
28287: LD_VAR 0 4
28291: ST_TO_ADDR
// exit ;
28292: POP
28293: POP
28294: GO 28300
// end ;
28296: GO 28261
28298: POP
28299: POP
// end ;
28300: LD_VAR 0 3
28304: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
28305: LD_INT 0
28307: PPUSH
// vc_chassis := chassis ;
28308: LD_ADDR_OWVAR 37
28312: PUSH
28313: LD_VAR 0 1
28317: ST_TO_ADDR
// vc_engine := engine ;
28318: LD_ADDR_OWVAR 39
28322: PUSH
28323: LD_VAR 0 2
28327: ST_TO_ADDR
// vc_control := control ;
28328: LD_ADDR_OWVAR 38
28332: PUSH
28333: LD_VAR 0 3
28337: ST_TO_ADDR
// vc_weapon := weapon ;
28338: LD_ADDR_OWVAR 40
28342: PUSH
28343: LD_VAR 0 4
28347: ST_TO_ADDR
// vc_fuel_battery := fuel ;
28348: LD_ADDR_OWVAR 41
28352: PUSH
28353: LD_VAR 0 5
28357: ST_TO_ADDR
// end ;
28358: LD_VAR 0 6
28362: RET
// export function WantPlant ( unit ) ; var task ; begin
28363: LD_INT 0
28365: PPUSH
28366: PPUSH
// result := false ;
28367: LD_ADDR_VAR 0 2
28371: PUSH
28372: LD_INT 0
28374: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
28375: LD_ADDR_VAR 0 3
28379: PUSH
28380: LD_VAR 0 1
28384: PPUSH
28385: CALL_OW 437
28389: ST_TO_ADDR
// if task then
28390: LD_VAR 0 3
28394: IFFALSE 28422
// if task [ 1 ] [ 1 ] = p then
28396: LD_VAR 0 3
28400: PUSH
28401: LD_INT 1
28403: ARRAY
28404: PUSH
28405: LD_INT 1
28407: ARRAY
28408: PUSH
28409: LD_STRING p
28411: EQUAL
28412: IFFALSE 28422
// result := true ;
28414: LD_ADDR_VAR 0 2
28418: PUSH
28419: LD_INT 1
28421: ST_TO_ADDR
// end ;
28422: LD_VAR 0 2
28426: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
28427: LD_INT 0
28429: PPUSH
28430: PPUSH
28431: PPUSH
28432: PPUSH
// if pos < 1 then
28433: LD_VAR 0 2
28437: PUSH
28438: LD_INT 1
28440: LESS
28441: IFFALSE 28445
// exit ;
28443: GO 28748
// if pos = 1 then
28445: LD_VAR 0 2
28449: PUSH
28450: LD_INT 1
28452: EQUAL
28453: IFFALSE 28486
// result := Replace ( arr , pos [ 1 ] , value ) else
28455: LD_ADDR_VAR 0 4
28459: PUSH
28460: LD_VAR 0 1
28464: PPUSH
28465: LD_VAR 0 2
28469: PUSH
28470: LD_INT 1
28472: ARRAY
28473: PPUSH
28474: LD_VAR 0 3
28478: PPUSH
28479: CALL_OW 1
28483: ST_TO_ADDR
28484: GO 28748
// begin tmp := arr ;
28486: LD_ADDR_VAR 0 6
28490: PUSH
28491: LD_VAR 0 1
28495: ST_TO_ADDR
// s_arr := [ tmp ] ;
28496: LD_ADDR_VAR 0 7
28500: PUSH
28501: LD_VAR 0 6
28505: PUSH
28506: EMPTY
28507: LIST
28508: ST_TO_ADDR
// for i = 1 to pos - 1 do
28509: LD_ADDR_VAR 0 5
28513: PUSH
28514: DOUBLE
28515: LD_INT 1
28517: DEC
28518: ST_TO_ADDR
28519: LD_VAR 0 2
28523: PUSH
28524: LD_INT 1
28526: MINUS
28527: PUSH
28528: FOR_TO
28529: IFFALSE 28574
// begin tmp := tmp [ pos [ i ] ] ;
28531: LD_ADDR_VAR 0 6
28535: PUSH
28536: LD_VAR 0 6
28540: PUSH
28541: LD_VAR 0 2
28545: PUSH
28546: LD_VAR 0 5
28550: ARRAY
28551: ARRAY
28552: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
28553: LD_ADDR_VAR 0 7
28557: PUSH
28558: LD_VAR 0 7
28562: PUSH
28563: LD_VAR 0 6
28567: PUSH
28568: EMPTY
28569: LIST
28570: ADD
28571: ST_TO_ADDR
// end ;
28572: GO 28528
28574: POP
28575: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
28576: LD_ADDR_VAR 0 6
28580: PUSH
28581: LD_VAR 0 6
28585: PPUSH
28586: LD_VAR 0 2
28590: PUSH
28591: LD_VAR 0 2
28595: ARRAY
28596: PPUSH
28597: LD_VAR 0 3
28601: PPUSH
28602: CALL_OW 1
28606: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
28607: LD_ADDR_VAR 0 7
28611: PUSH
28612: LD_VAR 0 7
28616: PPUSH
28617: LD_VAR 0 7
28621: PPUSH
28622: LD_VAR 0 6
28626: PPUSH
28627: CALL_OW 1
28631: ST_TO_ADDR
// for i = s_arr downto 2 do
28632: LD_ADDR_VAR 0 5
28636: PUSH
28637: DOUBLE
28638: LD_VAR 0 7
28642: INC
28643: ST_TO_ADDR
28644: LD_INT 2
28646: PUSH
28647: FOR_DOWNTO
28648: IFFALSE 28732
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
28650: LD_ADDR_VAR 0 6
28654: PUSH
28655: LD_VAR 0 7
28659: PUSH
28660: LD_VAR 0 5
28664: PUSH
28665: LD_INT 1
28667: MINUS
28668: ARRAY
28669: PPUSH
28670: LD_VAR 0 2
28674: PUSH
28675: LD_VAR 0 5
28679: PUSH
28680: LD_INT 1
28682: MINUS
28683: ARRAY
28684: PPUSH
28685: LD_VAR 0 7
28689: PUSH
28690: LD_VAR 0 5
28694: ARRAY
28695: PPUSH
28696: CALL_OW 1
28700: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
28701: LD_ADDR_VAR 0 7
28705: PUSH
28706: LD_VAR 0 7
28710: PPUSH
28711: LD_VAR 0 5
28715: PUSH
28716: LD_INT 1
28718: MINUS
28719: PPUSH
28720: LD_VAR 0 6
28724: PPUSH
28725: CALL_OW 1
28729: ST_TO_ADDR
// end ;
28730: GO 28647
28732: POP
28733: POP
// result := s_arr [ 1 ] ;
28734: LD_ADDR_VAR 0 4
28738: PUSH
28739: LD_VAR 0 7
28743: PUSH
28744: LD_INT 1
28746: ARRAY
28747: ST_TO_ADDR
// end ; end ;
28748: LD_VAR 0 4
28752: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
28753: LD_INT 0
28755: PPUSH
28756: PPUSH
// if not list then
28757: LD_VAR 0 1
28761: NOT
28762: IFFALSE 28766
// exit ;
28764: GO 28857
// i := list [ pos1 ] ;
28766: LD_ADDR_VAR 0 5
28770: PUSH
28771: LD_VAR 0 1
28775: PUSH
28776: LD_VAR 0 2
28780: ARRAY
28781: ST_TO_ADDR
// if not i then
28782: LD_VAR 0 5
28786: NOT
28787: IFFALSE 28791
// exit ;
28789: GO 28857
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
28791: LD_ADDR_VAR 0 1
28795: PUSH
28796: LD_VAR 0 1
28800: PPUSH
28801: LD_VAR 0 2
28805: PPUSH
28806: LD_VAR 0 1
28810: PUSH
28811: LD_VAR 0 3
28815: ARRAY
28816: PPUSH
28817: CALL_OW 1
28821: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
28822: LD_ADDR_VAR 0 1
28826: PUSH
28827: LD_VAR 0 1
28831: PPUSH
28832: LD_VAR 0 3
28836: PPUSH
28837: LD_VAR 0 5
28841: PPUSH
28842: CALL_OW 1
28846: ST_TO_ADDR
// result := list ;
28847: LD_ADDR_VAR 0 4
28851: PUSH
28852: LD_VAR 0 1
28856: ST_TO_ADDR
// end ;
28857: LD_VAR 0 4
28861: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
28862: LD_INT 0
28864: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
28865: LD_ADDR_VAR 0 5
28869: PUSH
28870: LD_VAR 0 1
28874: PPUSH
28875: CALL_OW 250
28879: PPUSH
28880: LD_VAR 0 1
28884: PPUSH
28885: CALL_OW 251
28889: PPUSH
28890: LD_VAR 0 2
28894: PPUSH
28895: LD_VAR 0 3
28899: PPUSH
28900: LD_VAR 0 4
28904: PPUSH
28905: CALL 28915 0 5
28909: ST_TO_ADDR
// end ;
28910: LD_VAR 0 5
28914: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
28915: LD_INT 0
28917: PPUSH
28918: PPUSH
28919: PPUSH
28920: PPUSH
// if not list then
28921: LD_VAR 0 3
28925: NOT
28926: IFFALSE 28930
// exit ;
28928: GO 29318
// result := [ ] ;
28930: LD_ADDR_VAR 0 6
28934: PUSH
28935: EMPTY
28936: ST_TO_ADDR
// for i in list do
28937: LD_ADDR_VAR 0 7
28941: PUSH
28942: LD_VAR 0 3
28946: PUSH
28947: FOR_IN
28948: IFFALSE 29150
// begin tmp := GetDistUnitXY ( i , x , y ) ;
28950: LD_ADDR_VAR 0 9
28954: PUSH
28955: LD_VAR 0 7
28959: PPUSH
28960: LD_VAR 0 1
28964: PPUSH
28965: LD_VAR 0 2
28969: PPUSH
28970: CALL_OW 297
28974: ST_TO_ADDR
// if not result then
28975: LD_VAR 0 6
28979: NOT
28980: IFFALSE 29006
// result := [ [ i , tmp ] ] else
28982: LD_ADDR_VAR 0 6
28986: PUSH
28987: LD_VAR 0 7
28991: PUSH
28992: LD_VAR 0 9
28996: PUSH
28997: EMPTY
28998: LIST
28999: LIST
29000: PUSH
29001: EMPTY
29002: LIST
29003: ST_TO_ADDR
29004: GO 29148
// begin if result [ result ] [ 2 ] < tmp then
29006: LD_VAR 0 6
29010: PUSH
29011: LD_VAR 0 6
29015: ARRAY
29016: PUSH
29017: LD_INT 2
29019: ARRAY
29020: PUSH
29021: LD_VAR 0 9
29025: LESS
29026: IFFALSE 29068
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
29028: LD_ADDR_VAR 0 6
29032: PUSH
29033: LD_VAR 0 6
29037: PPUSH
29038: LD_VAR 0 6
29042: PUSH
29043: LD_INT 1
29045: PLUS
29046: PPUSH
29047: LD_VAR 0 7
29051: PUSH
29052: LD_VAR 0 9
29056: PUSH
29057: EMPTY
29058: LIST
29059: LIST
29060: PPUSH
29061: CALL_OW 2
29065: ST_TO_ADDR
29066: GO 29148
// for j = 1 to result do
29068: LD_ADDR_VAR 0 8
29072: PUSH
29073: DOUBLE
29074: LD_INT 1
29076: DEC
29077: ST_TO_ADDR
29078: LD_VAR 0 6
29082: PUSH
29083: FOR_TO
29084: IFFALSE 29146
// begin if tmp < result [ j ] [ 2 ] then
29086: LD_VAR 0 9
29090: PUSH
29091: LD_VAR 0 6
29095: PUSH
29096: LD_VAR 0 8
29100: ARRAY
29101: PUSH
29102: LD_INT 2
29104: ARRAY
29105: LESS
29106: IFFALSE 29144
// begin result := Insert ( result , j , [ i , tmp ] ) ;
29108: LD_ADDR_VAR 0 6
29112: PUSH
29113: LD_VAR 0 6
29117: PPUSH
29118: LD_VAR 0 8
29122: PPUSH
29123: LD_VAR 0 7
29127: PUSH
29128: LD_VAR 0 9
29132: PUSH
29133: EMPTY
29134: LIST
29135: LIST
29136: PPUSH
29137: CALL_OW 2
29141: ST_TO_ADDR
// break ;
29142: GO 29146
// end ; end ;
29144: GO 29083
29146: POP
29147: POP
// end ; end ;
29148: GO 28947
29150: POP
29151: POP
// if result and not asc then
29152: LD_VAR 0 6
29156: PUSH
29157: LD_VAR 0 4
29161: NOT
29162: AND
29163: IFFALSE 29238
// begin tmp := result ;
29165: LD_ADDR_VAR 0 9
29169: PUSH
29170: LD_VAR 0 6
29174: ST_TO_ADDR
// for i = tmp downto 1 do
29175: LD_ADDR_VAR 0 7
29179: PUSH
29180: DOUBLE
29181: LD_VAR 0 9
29185: INC
29186: ST_TO_ADDR
29187: LD_INT 1
29189: PUSH
29190: FOR_DOWNTO
29191: IFFALSE 29236
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
29193: LD_ADDR_VAR 0 6
29197: PUSH
29198: LD_VAR 0 6
29202: PPUSH
29203: LD_VAR 0 9
29207: PUSH
29208: LD_VAR 0 7
29212: MINUS
29213: PUSH
29214: LD_INT 1
29216: PLUS
29217: PPUSH
29218: LD_VAR 0 9
29222: PUSH
29223: LD_VAR 0 7
29227: ARRAY
29228: PPUSH
29229: CALL_OW 1
29233: ST_TO_ADDR
29234: GO 29190
29236: POP
29237: POP
// end ; tmp := [ ] ;
29238: LD_ADDR_VAR 0 9
29242: PUSH
29243: EMPTY
29244: ST_TO_ADDR
// if mode then
29245: LD_VAR 0 5
29249: IFFALSE 29318
// begin for i = 1 to result do
29251: LD_ADDR_VAR 0 7
29255: PUSH
29256: DOUBLE
29257: LD_INT 1
29259: DEC
29260: ST_TO_ADDR
29261: LD_VAR 0 6
29265: PUSH
29266: FOR_TO
29267: IFFALSE 29306
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
29269: LD_ADDR_VAR 0 9
29273: PUSH
29274: LD_VAR 0 9
29278: PPUSH
29279: LD_VAR 0 7
29283: PPUSH
29284: LD_VAR 0 6
29288: PUSH
29289: LD_VAR 0 7
29293: ARRAY
29294: PUSH
29295: LD_INT 1
29297: ARRAY
29298: PPUSH
29299: CALL_OW 1
29303: ST_TO_ADDR
29304: GO 29266
29306: POP
29307: POP
// result := tmp ;
29308: LD_ADDR_VAR 0 6
29312: PUSH
29313: LD_VAR 0 9
29317: ST_TO_ADDR
// end ; end ;
29318: LD_VAR 0 6
29322: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
29323: LD_INT 0
29325: PPUSH
29326: PPUSH
29327: PPUSH
29328: PPUSH
29329: PPUSH
29330: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
29331: LD_ADDR_VAR 0 5
29335: PUSH
29336: LD_INT 0
29338: PUSH
29339: LD_INT 0
29341: PUSH
29342: LD_INT 0
29344: PUSH
29345: EMPTY
29346: PUSH
29347: EMPTY
29348: LIST
29349: LIST
29350: LIST
29351: LIST
29352: ST_TO_ADDR
// if not x or not y then
29353: LD_VAR 0 2
29357: NOT
29358: PUSH
29359: LD_VAR 0 3
29363: NOT
29364: OR
29365: IFFALSE 29369
// exit ;
29367: GO 31019
// if not range then
29369: LD_VAR 0 4
29373: NOT
29374: IFFALSE 29384
// range := 10 ;
29376: LD_ADDR_VAR 0 4
29380: PUSH
29381: LD_INT 10
29383: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
29384: LD_ADDR_VAR 0 8
29388: PUSH
29389: LD_INT 81
29391: PUSH
29392: LD_VAR 0 1
29396: PUSH
29397: EMPTY
29398: LIST
29399: LIST
29400: PUSH
29401: LD_INT 92
29403: PUSH
29404: LD_VAR 0 2
29408: PUSH
29409: LD_VAR 0 3
29413: PUSH
29414: LD_VAR 0 4
29418: PUSH
29419: EMPTY
29420: LIST
29421: LIST
29422: LIST
29423: LIST
29424: PUSH
29425: LD_INT 3
29427: PUSH
29428: LD_INT 21
29430: PUSH
29431: LD_INT 3
29433: PUSH
29434: EMPTY
29435: LIST
29436: LIST
29437: PUSH
29438: EMPTY
29439: LIST
29440: LIST
29441: PUSH
29442: EMPTY
29443: LIST
29444: LIST
29445: LIST
29446: PPUSH
29447: CALL_OW 69
29451: ST_TO_ADDR
// if not tmp then
29452: LD_VAR 0 8
29456: NOT
29457: IFFALSE 29461
// exit ;
29459: GO 31019
// for i in tmp do
29461: LD_ADDR_VAR 0 6
29465: PUSH
29466: LD_VAR 0 8
29470: PUSH
29471: FOR_IN
29472: IFFALSE 30994
// begin points := [ 0 , 0 , 0 ] ;
29474: LD_ADDR_VAR 0 9
29478: PUSH
29479: LD_INT 0
29481: PUSH
29482: LD_INT 0
29484: PUSH
29485: LD_INT 0
29487: PUSH
29488: EMPTY
29489: LIST
29490: LIST
29491: LIST
29492: ST_TO_ADDR
// bpoints := 1 ;
29493: LD_ADDR_VAR 0 10
29497: PUSH
29498: LD_INT 1
29500: ST_TO_ADDR
// case GetType ( i ) of unit_human :
29501: LD_VAR 0 6
29505: PPUSH
29506: CALL_OW 247
29510: PUSH
29511: LD_INT 1
29513: DOUBLE
29514: EQUAL
29515: IFTRUE 29519
29517: GO 30097
29519: POP
// begin if GetClass ( i ) = 1 then
29520: LD_VAR 0 6
29524: PPUSH
29525: CALL_OW 257
29529: PUSH
29530: LD_INT 1
29532: EQUAL
29533: IFFALSE 29554
// points := [ 10 , 5 , 3 ] ;
29535: LD_ADDR_VAR 0 9
29539: PUSH
29540: LD_INT 10
29542: PUSH
29543: LD_INT 5
29545: PUSH
29546: LD_INT 3
29548: PUSH
29549: EMPTY
29550: LIST
29551: LIST
29552: LIST
29553: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
29554: LD_VAR 0 6
29558: PPUSH
29559: CALL_OW 257
29563: PUSH
29564: LD_INT 2
29566: PUSH
29567: LD_INT 3
29569: PUSH
29570: LD_INT 4
29572: PUSH
29573: EMPTY
29574: LIST
29575: LIST
29576: LIST
29577: IN
29578: IFFALSE 29599
// points := [ 3 , 2 , 1 ] ;
29580: LD_ADDR_VAR 0 9
29584: PUSH
29585: LD_INT 3
29587: PUSH
29588: LD_INT 2
29590: PUSH
29591: LD_INT 1
29593: PUSH
29594: EMPTY
29595: LIST
29596: LIST
29597: LIST
29598: ST_TO_ADDR
// if GetClass ( i ) = 5 then
29599: LD_VAR 0 6
29603: PPUSH
29604: CALL_OW 257
29608: PUSH
29609: LD_INT 5
29611: EQUAL
29612: IFFALSE 29633
// points := [ 130 , 5 , 2 ] ;
29614: LD_ADDR_VAR 0 9
29618: PUSH
29619: LD_INT 130
29621: PUSH
29622: LD_INT 5
29624: PUSH
29625: LD_INT 2
29627: PUSH
29628: EMPTY
29629: LIST
29630: LIST
29631: LIST
29632: ST_TO_ADDR
// if GetClass ( i ) = 8 then
29633: LD_VAR 0 6
29637: PPUSH
29638: CALL_OW 257
29642: PUSH
29643: LD_INT 8
29645: EQUAL
29646: IFFALSE 29667
// points := [ 35 , 35 , 30 ] ;
29648: LD_ADDR_VAR 0 9
29652: PUSH
29653: LD_INT 35
29655: PUSH
29656: LD_INT 35
29658: PUSH
29659: LD_INT 30
29661: PUSH
29662: EMPTY
29663: LIST
29664: LIST
29665: LIST
29666: ST_TO_ADDR
// if GetClass ( i ) = 9 then
29667: LD_VAR 0 6
29671: PPUSH
29672: CALL_OW 257
29676: PUSH
29677: LD_INT 9
29679: EQUAL
29680: IFFALSE 29701
// points := [ 20 , 55 , 40 ] ;
29682: LD_ADDR_VAR 0 9
29686: PUSH
29687: LD_INT 20
29689: PUSH
29690: LD_INT 55
29692: PUSH
29693: LD_INT 40
29695: PUSH
29696: EMPTY
29697: LIST
29698: LIST
29699: LIST
29700: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
29701: LD_VAR 0 6
29705: PPUSH
29706: CALL_OW 257
29710: PUSH
29711: LD_INT 12
29713: PUSH
29714: LD_INT 16
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: IN
29721: IFFALSE 29742
// points := [ 5 , 3 , 2 ] ;
29723: LD_ADDR_VAR 0 9
29727: PUSH
29728: LD_INT 5
29730: PUSH
29731: LD_INT 3
29733: PUSH
29734: LD_INT 2
29736: PUSH
29737: EMPTY
29738: LIST
29739: LIST
29740: LIST
29741: ST_TO_ADDR
// if GetClass ( i ) = 17 then
29742: LD_VAR 0 6
29746: PPUSH
29747: CALL_OW 257
29751: PUSH
29752: LD_INT 17
29754: EQUAL
29755: IFFALSE 29776
// points := [ 100 , 50 , 75 ] ;
29757: LD_ADDR_VAR 0 9
29761: PUSH
29762: LD_INT 100
29764: PUSH
29765: LD_INT 50
29767: PUSH
29768: LD_INT 75
29770: PUSH
29771: EMPTY
29772: LIST
29773: LIST
29774: LIST
29775: ST_TO_ADDR
// if GetClass ( i ) = 15 then
29776: LD_VAR 0 6
29780: PPUSH
29781: CALL_OW 257
29785: PUSH
29786: LD_INT 15
29788: EQUAL
29789: IFFALSE 29810
// points := [ 10 , 5 , 3 ] ;
29791: LD_ADDR_VAR 0 9
29795: PUSH
29796: LD_INT 10
29798: PUSH
29799: LD_INT 5
29801: PUSH
29802: LD_INT 3
29804: PUSH
29805: EMPTY
29806: LIST
29807: LIST
29808: LIST
29809: ST_TO_ADDR
// if GetClass ( i ) = 14 then
29810: LD_VAR 0 6
29814: PPUSH
29815: CALL_OW 257
29819: PUSH
29820: LD_INT 14
29822: EQUAL
29823: IFFALSE 29844
// points := [ 10 , 0 , 0 ] ;
29825: LD_ADDR_VAR 0 9
29829: PUSH
29830: LD_INT 10
29832: PUSH
29833: LD_INT 0
29835: PUSH
29836: LD_INT 0
29838: PUSH
29839: EMPTY
29840: LIST
29841: LIST
29842: LIST
29843: ST_TO_ADDR
// if GetClass ( i ) = 11 then
29844: LD_VAR 0 6
29848: PPUSH
29849: CALL_OW 257
29853: PUSH
29854: LD_INT 11
29856: EQUAL
29857: IFFALSE 29878
// points := [ 30 , 10 , 5 ] ;
29859: LD_ADDR_VAR 0 9
29863: PUSH
29864: LD_INT 30
29866: PUSH
29867: LD_INT 10
29869: PUSH
29870: LD_INT 5
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: LIST
29877: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
29878: LD_VAR 0 1
29882: PPUSH
29883: LD_INT 5
29885: PPUSH
29886: CALL_OW 321
29890: PUSH
29891: LD_INT 2
29893: EQUAL
29894: IFFALSE 29911
// bpoints := bpoints * 1.8 ;
29896: LD_ADDR_VAR 0 10
29900: PUSH
29901: LD_VAR 0 10
29905: PUSH
29906: LD_REAL  1.80000000000000E+0000
29909: MUL
29910: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
29911: LD_VAR 0 6
29915: PPUSH
29916: CALL_OW 257
29920: PUSH
29921: LD_INT 1
29923: PUSH
29924: LD_INT 2
29926: PUSH
29927: LD_INT 3
29929: PUSH
29930: LD_INT 4
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: LIST
29937: LIST
29938: IN
29939: PUSH
29940: LD_VAR 0 1
29944: PPUSH
29945: LD_INT 51
29947: PPUSH
29948: CALL_OW 321
29952: PUSH
29953: LD_INT 2
29955: EQUAL
29956: AND
29957: IFFALSE 29974
// bpoints := bpoints * 1.2 ;
29959: LD_ADDR_VAR 0 10
29963: PUSH
29964: LD_VAR 0 10
29968: PUSH
29969: LD_REAL  1.20000000000000E+0000
29972: MUL
29973: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
29974: LD_VAR 0 6
29978: PPUSH
29979: CALL_OW 257
29983: PUSH
29984: LD_INT 5
29986: PUSH
29987: LD_INT 7
29989: PUSH
29990: LD_INT 9
29992: PUSH
29993: EMPTY
29994: LIST
29995: LIST
29996: LIST
29997: IN
29998: PUSH
29999: LD_VAR 0 1
30003: PPUSH
30004: LD_INT 52
30006: PPUSH
30007: CALL_OW 321
30011: PUSH
30012: LD_INT 2
30014: EQUAL
30015: AND
30016: IFFALSE 30033
// bpoints := bpoints * 1.5 ;
30018: LD_ADDR_VAR 0 10
30022: PUSH
30023: LD_VAR 0 10
30027: PUSH
30028: LD_REAL  1.50000000000000E+0000
30031: MUL
30032: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
30033: LD_VAR 0 1
30037: PPUSH
30038: LD_INT 66
30040: PPUSH
30041: CALL_OW 321
30045: PUSH
30046: LD_INT 2
30048: EQUAL
30049: IFFALSE 30066
// bpoints := bpoints * 1.1 ;
30051: LD_ADDR_VAR 0 10
30055: PUSH
30056: LD_VAR 0 10
30060: PUSH
30061: LD_REAL  1.10000000000000E+0000
30064: MUL
30065: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
30066: LD_ADDR_VAR 0 10
30070: PUSH
30071: LD_VAR 0 10
30075: PUSH
30076: LD_VAR 0 6
30080: PPUSH
30081: LD_INT 1
30083: PPUSH
30084: CALL_OW 259
30088: PUSH
30089: LD_REAL  1.15000000000000E+0000
30092: MUL
30093: MUL
30094: ST_TO_ADDR
// end ; unit_vehicle :
30095: GO 30923
30097: LD_INT 2
30099: DOUBLE
30100: EQUAL
30101: IFTRUE 30105
30103: GO 30911
30105: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
30106: LD_VAR 0 6
30110: PPUSH
30111: CALL_OW 264
30115: PUSH
30116: LD_INT 2
30118: PUSH
30119: LD_INT 42
30121: PUSH
30122: LD_INT 24
30124: PUSH
30125: EMPTY
30126: LIST
30127: LIST
30128: LIST
30129: IN
30130: IFFALSE 30151
// points := [ 25 , 5 , 3 ] ;
30132: LD_ADDR_VAR 0 9
30136: PUSH
30137: LD_INT 25
30139: PUSH
30140: LD_INT 5
30142: PUSH
30143: LD_INT 3
30145: PUSH
30146: EMPTY
30147: LIST
30148: LIST
30149: LIST
30150: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
30151: LD_VAR 0 6
30155: PPUSH
30156: CALL_OW 264
30160: PUSH
30161: LD_INT 4
30163: PUSH
30164: LD_INT 43
30166: PUSH
30167: LD_INT 25
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: LIST
30174: IN
30175: IFFALSE 30196
// points := [ 40 , 15 , 5 ] ;
30177: LD_ADDR_VAR 0 9
30181: PUSH
30182: LD_INT 40
30184: PUSH
30185: LD_INT 15
30187: PUSH
30188: LD_INT 5
30190: PUSH
30191: EMPTY
30192: LIST
30193: LIST
30194: LIST
30195: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
30196: LD_VAR 0 6
30200: PPUSH
30201: CALL_OW 264
30205: PUSH
30206: LD_INT 3
30208: PUSH
30209: LD_INT 23
30211: PUSH
30212: EMPTY
30213: LIST
30214: LIST
30215: IN
30216: IFFALSE 30237
// points := [ 7 , 25 , 8 ] ;
30218: LD_ADDR_VAR 0 9
30222: PUSH
30223: LD_INT 7
30225: PUSH
30226: LD_INT 25
30228: PUSH
30229: LD_INT 8
30231: PUSH
30232: EMPTY
30233: LIST
30234: LIST
30235: LIST
30236: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
30237: LD_VAR 0 6
30241: PPUSH
30242: CALL_OW 264
30246: PUSH
30247: LD_INT 5
30249: PUSH
30250: LD_INT 27
30252: PUSH
30253: LD_INT 44
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: LIST
30260: IN
30261: IFFALSE 30282
// points := [ 14 , 50 , 16 ] ;
30263: LD_ADDR_VAR 0 9
30267: PUSH
30268: LD_INT 14
30270: PUSH
30271: LD_INT 50
30273: PUSH
30274: LD_INT 16
30276: PUSH
30277: EMPTY
30278: LIST
30279: LIST
30280: LIST
30281: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
30282: LD_VAR 0 6
30286: PPUSH
30287: CALL_OW 264
30291: PUSH
30292: LD_INT 6
30294: PUSH
30295: LD_INT 46
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: IN
30302: IFFALSE 30323
// points := [ 32 , 120 , 70 ] ;
30304: LD_ADDR_VAR 0 9
30308: PUSH
30309: LD_INT 32
30311: PUSH
30312: LD_INT 120
30314: PUSH
30315: LD_INT 70
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: LIST
30322: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
30323: LD_VAR 0 6
30327: PPUSH
30328: CALL_OW 264
30332: PUSH
30333: LD_INT 7
30335: PUSH
30336: LD_INT 28
30338: PUSH
30339: LD_INT 45
30341: PUSH
30342: LD_INT 92
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: LIST
30349: LIST
30350: IN
30351: IFFALSE 30372
// points := [ 35 , 20 , 45 ] ;
30353: LD_ADDR_VAR 0 9
30357: PUSH
30358: LD_INT 35
30360: PUSH
30361: LD_INT 20
30363: PUSH
30364: LD_INT 45
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: LIST
30371: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
30372: LD_VAR 0 6
30376: PPUSH
30377: CALL_OW 264
30381: PUSH
30382: LD_INT 47
30384: PUSH
30385: EMPTY
30386: LIST
30387: IN
30388: IFFALSE 30409
// points := [ 67 , 45 , 75 ] ;
30390: LD_ADDR_VAR 0 9
30394: PUSH
30395: LD_INT 67
30397: PUSH
30398: LD_INT 45
30400: PUSH
30401: LD_INT 75
30403: PUSH
30404: EMPTY
30405: LIST
30406: LIST
30407: LIST
30408: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
30409: LD_VAR 0 6
30413: PPUSH
30414: CALL_OW 264
30418: PUSH
30419: LD_INT 26
30421: PUSH
30422: EMPTY
30423: LIST
30424: IN
30425: IFFALSE 30446
// points := [ 120 , 30 , 80 ] ;
30427: LD_ADDR_VAR 0 9
30431: PUSH
30432: LD_INT 120
30434: PUSH
30435: LD_INT 30
30437: PUSH
30438: LD_INT 80
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: LIST
30445: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
30446: LD_VAR 0 6
30450: PPUSH
30451: CALL_OW 264
30455: PUSH
30456: LD_INT 22
30458: PUSH
30459: EMPTY
30460: LIST
30461: IN
30462: IFFALSE 30483
// points := [ 40 , 1 , 1 ] ;
30464: LD_ADDR_VAR 0 9
30468: PUSH
30469: LD_INT 40
30471: PUSH
30472: LD_INT 1
30474: PUSH
30475: LD_INT 1
30477: PUSH
30478: EMPTY
30479: LIST
30480: LIST
30481: LIST
30482: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
30483: LD_VAR 0 6
30487: PPUSH
30488: CALL_OW 264
30492: PUSH
30493: LD_INT 29
30495: PUSH
30496: EMPTY
30497: LIST
30498: IN
30499: IFFALSE 30520
// points := [ 70 , 200 , 400 ] ;
30501: LD_ADDR_VAR 0 9
30505: PUSH
30506: LD_INT 70
30508: PUSH
30509: LD_INT 200
30511: PUSH
30512: LD_INT 400
30514: PUSH
30515: EMPTY
30516: LIST
30517: LIST
30518: LIST
30519: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
30520: LD_VAR 0 6
30524: PPUSH
30525: CALL_OW 264
30529: PUSH
30530: LD_INT 14
30532: PUSH
30533: LD_INT 53
30535: PUSH
30536: EMPTY
30537: LIST
30538: LIST
30539: IN
30540: IFFALSE 30561
// points := [ 40 , 10 , 20 ] ;
30542: LD_ADDR_VAR 0 9
30546: PUSH
30547: LD_INT 40
30549: PUSH
30550: LD_INT 10
30552: PUSH
30553: LD_INT 20
30555: PUSH
30556: EMPTY
30557: LIST
30558: LIST
30559: LIST
30560: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
30561: LD_VAR 0 6
30565: PPUSH
30566: CALL_OW 264
30570: PUSH
30571: LD_INT 9
30573: PUSH
30574: EMPTY
30575: LIST
30576: IN
30577: IFFALSE 30598
// points := [ 5 , 70 , 20 ] ;
30579: LD_ADDR_VAR 0 9
30583: PUSH
30584: LD_INT 5
30586: PUSH
30587: LD_INT 70
30589: PUSH
30590: LD_INT 20
30592: PUSH
30593: EMPTY
30594: LIST
30595: LIST
30596: LIST
30597: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
30598: LD_VAR 0 6
30602: PPUSH
30603: CALL_OW 264
30607: PUSH
30608: LD_INT 10
30610: PUSH
30611: EMPTY
30612: LIST
30613: IN
30614: IFFALSE 30635
// points := [ 35 , 110 , 70 ] ;
30616: LD_ADDR_VAR 0 9
30620: PUSH
30621: LD_INT 35
30623: PUSH
30624: LD_INT 110
30626: PUSH
30627: LD_INT 70
30629: PUSH
30630: EMPTY
30631: LIST
30632: LIST
30633: LIST
30634: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
30635: LD_VAR 0 6
30639: PPUSH
30640: CALL_OW 265
30644: PUSH
30645: LD_INT 25
30647: EQUAL
30648: IFFALSE 30669
// points := [ 80 , 65 , 100 ] ;
30650: LD_ADDR_VAR 0 9
30654: PUSH
30655: LD_INT 80
30657: PUSH
30658: LD_INT 65
30660: PUSH
30661: LD_INT 100
30663: PUSH
30664: EMPTY
30665: LIST
30666: LIST
30667: LIST
30668: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
30669: LD_VAR 0 6
30673: PPUSH
30674: CALL_OW 263
30678: PUSH
30679: LD_INT 1
30681: EQUAL
30682: IFFALSE 30717
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
30684: LD_ADDR_VAR 0 10
30688: PUSH
30689: LD_VAR 0 10
30693: PUSH
30694: LD_VAR 0 6
30698: PPUSH
30699: CALL_OW 311
30703: PPUSH
30704: LD_INT 3
30706: PPUSH
30707: CALL_OW 259
30711: PUSH
30712: LD_INT 4
30714: MUL
30715: MUL
30716: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
30717: LD_VAR 0 6
30721: PPUSH
30722: CALL_OW 263
30726: PUSH
30727: LD_INT 2
30729: EQUAL
30730: IFFALSE 30781
// begin j := IsControledBy ( i ) ;
30732: LD_ADDR_VAR 0 7
30736: PUSH
30737: LD_VAR 0 6
30741: PPUSH
30742: CALL_OW 312
30746: ST_TO_ADDR
// if j then
30747: LD_VAR 0 7
30751: IFFALSE 30781
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
30753: LD_ADDR_VAR 0 10
30757: PUSH
30758: LD_VAR 0 10
30762: PUSH
30763: LD_VAR 0 7
30767: PPUSH
30768: LD_INT 3
30770: PPUSH
30771: CALL_OW 259
30775: PUSH
30776: LD_INT 3
30778: MUL
30779: MUL
30780: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
30781: LD_VAR 0 6
30785: PPUSH
30786: CALL_OW 264
30790: PUSH
30791: LD_INT 5
30793: PUSH
30794: LD_INT 6
30796: PUSH
30797: LD_INT 46
30799: PUSH
30800: LD_INT 44
30802: PUSH
30803: LD_INT 47
30805: PUSH
30806: LD_INT 45
30808: PUSH
30809: LD_INT 28
30811: PUSH
30812: LD_INT 7
30814: PUSH
30815: LD_INT 27
30817: PUSH
30818: LD_INT 29
30820: PUSH
30821: EMPTY
30822: LIST
30823: LIST
30824: LIST
30825: LIST
30826: LIST
30827: LIST
30828: LIST
30829: LIST
30830: LIST
30831: LIST
30832: IN
30833: PUSH
30834: LD_VAR 0 1
30838: PPUSH
30839: LD_INT 52
30841: PPUSH
30842: CALL_OW 321
30846: PUSH
30847: LD_INT 2
30849: EQUAL
30850: AND
30851: IFFALSE 30868
// bpoints := bpoints * 1.2 ;
30853: LD_ADDR_VAR 0 10
30857: PUSH
30858: LD_VAR 0 10
30862: PUSH
30863: LD_REAL  1.20000000000000E+0000
30866: MUL
30867: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
30868: LD_VAR 0 6
30872: PPUSH
30873: CALL_OW 264
30877: PUSH
30878: LD_INT 6
30880: PUSH
30881: LD_INT 46
30883: PUSH
30884: LD_INT 47
30886: PUSH
30887: EMPTY
30888: LIST
30889: LIST
30890: LIST
30891: IN
30892: IFFALSE 30909
// bpoints := bpoints * 1.2 ;
30894: LD_ADDR_VAR 0 10
30898: PUSH
30899: LD_VAR 0 10
30903: PUSH
30904: LD_REAL  1.20000000000000E+0000
30907: MUL
30908: ST_TO_ADDR
// end ; unit_building :
30909: GO 30923
30911: LD_INT 3
30913: DOUBLE
30914: EQUAL
30915: IFTRUE 30919
30917: GO 30922
30919: POP
// ; end ;
30920: GO 30923
30922: POP
// for j = 1 to 3 do
30923: LD_ADDR_VAR 0 7
30927: PUSH
30928: DOUBLE
30929: LD_INT 1
30931: DEC
30932: ST_TO_ADDR
30933: LD_INT 3
30935: PUSH
30936: FOR_TO
30937: IFFALSE 30990
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
30939: LD_ADDR_VAR 0 5
30943: PUSH
30944: LD_VAR 0 5
30948: PPUSH
30949: LD_VAR 0 7
30953: PPUSH
30954: LD_VAR 0 5
30958: PUSH
30959: LD_VAR 0 7
30963: ARRAY
30964: PUSH
30965: LD_VAR 0 9
30969: PUSH
30970: LD_VAR 0 7
30974: ARRAY
30975: PUSH
30976: LD_VAR 0 10
30980: MUL
30981: PLUS
30982: PPUSH
30983: CALL_OW 1
30987: ST_TO_ADDR
30988: GO 30936
30990: POP
30991: POP
// end ;
30992: GO 29471
30994: POP
30995: POP
// result := Replace ( result , 4 , tmp ) ;
30996: LD_ADDR_VAR 0 5
31000: PUSH
31001: LD_VAR 0 5
31005: PPUSH
31006: LD_INT 4
31008: PPUSH
31009: LD_VAR 0 8
31013: PPUSH
31014: CALL_OW 1
31018: ST_TO_ADDR
// end ;
31019: LD_VAR 0 5
31023: RET
// export function DangerAtRange ( unit , range ) ; begin
31024: LD_INT 0
31026: PPUSH
// if not unit then
31027: LD_VAR 0 1
31031: NOT
31032: IFFALSE 31036
// exit ;
31034: GO 31081
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
31036: LD_ADDR_VAR 0 3
31040: PUSH
31041: LD_VAR 0 1
31045: PPUSH
31046: CALL_OW 255
31050: PPUSH
31051: LD_VAR 0 1
31055: PPUSH
31056: CALL_OW 250
31060: PPUSH
31061: LD_VAR 0 1
31065: PPUSH
31066: CALL_OW 251
31070: PPUSH
31071: LD_VAR 0 2
31075: PPUSH
31076: CALL 29323 0 4
31080: ST_TO_ADDR
// end ;
31081: LD_VAR 0 3
31085: RET
// export function DangerInArea ( side , area ) ; begin
31086: LD_INT 0
31088: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
31089: LD_ADDR_VAR 0 3
31093: PUSH
31094: LD_VAR 0 2
31098: PPUSH
31099: LD_INT 81
31101: PUSH
31102: LD_VAR 0 1
31106: PUSH
31107: EMPTY
31108: LIST
31109: LIST
31110: PPUSH
31111: CALL_OW 70
31115: ST_TO_ADDR
// end ;
31116: LD_VAR 0 3
31120: RET
// export function IsExtension ( b ) ; begin
31121: LD_INT 0
31123: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
31124: LD_ADDR_VAR 0 2
31128: PUSH
31129: LD_VAR 0 1
31133: PUSH
31134: LD_INT 23
31136: PUSH
31137: LD_INT 20
31139: PUSH
31140: LD_INT 22
31142: PUSH
31143: LD_INT 17
31145: PUSH
31146: LD_INT 24
31148: PUSH
31149: LD_INT 21
31151: PUSH
31152: LD_INT 19
31154: PUSH
31155: LD_INT 16
31157: PUSH
31158: LD_INT 25
31160: PUSH
31161: LD_INT 18
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: LIST
31168: LIST
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: IN
31176: ST_TO_ADDR
// end ;
31177: LD_VAR 0 2
31181: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
31182: LD_INT 0
31184: PPUSH
31185: PPUSH
31186: PPUSH
// result := [ ] ;
31187: LD_ADDR_VAR 0 4
31191: PUSH
31192: EMPTY
31193: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
31194: LD_ADDR_VAR 0 5
31198: PUSH
31199: LD_VAR 0 2
31203: PPUSH
31204: LD_INT 21
31206: PUSH
31207: LD_INT 3
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PPUSH
31214: CALL_OW 70
31218: ST_TO_ADDR
// if not tmp then
31219: LD_VAR 0 5
31223: NOT
31224: IFFALSE 31228
// exit ;
31226: GO 31292
// if checkLink then
31228: LD_VAR 0 3
31232: IFFALSE 31282
// begin for i in tmp do
31234: LD_ADDR_VAR 0 6
31238: PUSH
31239: LD_VAR 0 5
31243: PUSH
31244: FOR_IN
31245: IFFALSE 31280
// if GetBase ( i ) <> base then
31247: LD_VAR 0 6
31251: PPUSH
31252: CALL_OW 274
31256: PUSH
31257: LD_VAR 0 1
31261: NONEQUAL
31262: IFFALSE 31278
// ComLinkToBase ( base , i ) ;
31264: LD_VAR 0 1
31268: PPUSH
31269: LD_VAR 0 6
31273: PPUSH
31274: CALL_OW 169
31278: GO 31244
31280: POP
31281: POP
// end ; result := tmp ;
31282: LD_ADDR_VAR 0 4
31286: PUSH
31287: LD_VAR 0 5
31291: ST_TO_ADDR
// end ;
31292: LD_VAR 0 4
31296: RET
// export function ComComplete ( units , b ) ; var i ; begin
31297: LD_INT 0
31299: PPUSH
31300: PPUSH
// if not units then
31301: LD_VAR 0 1
31305: NOT
31306: IFFALSE 31310
// exit ;
31308: GO 31400
// for i in units do
31310: LD_ADDR_VAR 0 4
31314: PUSH
31315: LD_VAR 0 1
31319: PUSH
31320: FOR_IN
31321: IFFALSE 31398
// if BuildingStatus ( b ) = bs_build then
31323: LD_VAR 0 2
31327: PPUSH
31328: CALL_OW 461
31332: PUSH
31333: LD_INT 1
31335: EQUAL
31336: IFFALSE 31396
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
31338: LD_VAR 0 4
31342: PPUSH
31343: LD_STRING h
31345: PUSH
31346: LD_VAR 0 2
31350: PPUSH
31351: CALL_OW 250
31355: PUSH
31356: LD_VAR 0 2
31360: PPUSH
31361: CALL_OW 251
31365: PUSH
31366: LD_VAR 0 2
31370: PUSH
31371: LD_INT 0
31373: PUSH
31374: LD_INT 0
31376: PUSH
31377: LD_INT 0
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: LIST
31384: LIST
31385: LIST
31386: LIST
31387: LIST
31388: PUSH
31389: EMPTY
31390: LIST
31391: PPUSH
31392: CALL_OW 446
31396: GO 31320
31398: POP
31399: POP
// end ;
31400: LD_VAR 0 3
31404: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
31405: LD_INT 0
31407: PPUSH
31408: PPUSH
31409: PPUSH
31410: PPUSH
31411: PPUSH
31412: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
31413: LD_VAR 0 1
31417: NOT
31418: PUSH
31419: LD_VAR 0 1
31423: PPUSH
31424: CALL_OW 263
31428: PUSH
31429: LD_INT 2
31431: NONEQUAL
31432: OR
31433: IFFALSE 31437
// exit ;
31435: GO 31753
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
31437: LD_ADDR_VAR 0 6
31441: PUSH
31442: LD_INT 22
31444: PUSH
31445: LD_VAR 0 1
31449: PPUSH
31450: CALL_OW 255
31454: PUSH
31455: EMPTY
31456: LIST
31457: LIST
31458: PUSH
31459: LD_INT 2
31461: PUSH
31462: LD_INT 30
31464: PUSH
31465: LD_INT 36
31467: PUSH
31468: EMPTY
31469: LIST
31470: LIST
31471: PUSH
31472: LD_INT 34
31474: PUSH
31475: LD_INT 31
31477: PUSH
31478: EMPTY
31479: LIST
31480: LIST
31481: PUSH
31482: EMPTY
31483: LIST
31484: LIST
31485: LIST
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: PPUSH
31491: CALL_OW 69
31495: ST_TO_ADDR
// if not tmp then
31496: LD_VAR 0 6
31500: NOT
31501: IFFALSE 31505
// exit ;
31503: GO 31753
// result := [ ] ;
31505: LD_ADDR_VAR 0 2
31509: PUSH
31510: EMPTY
31511: ST_TO_ADDR
// for i in tmp do
31512: LD_ADDR_VAR 0 3
31516: PUSH
31517: LD_VAR 0 6
31521: PUSH
31522: FOR_IN
31523: IFFALSE 31594
// begin t := UnitsInside ( i ) ;
31525: LD_ADDR_VAR 0 4
31529: PUSH
31530: LD_VAR 0 3
31534: PPUSH
31535: CALL_OW 313
31539: ST_TO_ADDR
// if t then
31540: LD_VAR 0 4
31544: IFFALSE 31592
// for j in t do
31546: LD_ADDR_VAR 0 7
31550: PUSH
31551: LD_VAR 0 4
31555: PUSH
31556: FOR_IN
31557: IFFALSE 31590
// result := Replace ( result , result + 1 , j ) ;
31559: LD_ADDR_VAR 0 2
31563: PUSH
31564: LD_VAR 0 2
31568: PPUSH
31569: LD_VAR 0 2
31573: PUSH
31574: LD_INT 1
31576: PLUS
31577: PPUSH
31578: LD_VAR 0 7
31582: PPUSH
31583: CALL_OW 1
31587: ST_TO_ADDR
31588: GO 31556
31590: POP
31591: POP
// end ;
31592: GO 31522
31594: POP
31595: POP
// if not result then
31596: LD_VAR 0 2
31600: NOT
31601: IFFALSE 31605
// exit ;
31603: GO 31753
// mech := result [ 1 ] ;
31605: LD_ADDR_VAR 0 5
31609: PUSH
31610: LD_VAR 0 2
31614: PUSH
31615: LD_INT 1
31617: ARRAY
31618: ST_TO_ADDR
// if result > 1 then
31619: LD_VAR 0 2
31623: PUSH
31624: LD_INT 1
31626: GREATER
31627: IFFALSE 31739
// begin for i = 2 to result do
31629: LD_ADDR_VAR 0 3
31633: PUSH
31634: DOUBLE
31635: LD_INT 2
31637: DEC
31638: ST_TO_ADDR
31639: LD_VAR 0 2
31643: PUSH
31644: FOR_TO
31645: IFFALSE 31737
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
31647: LD_ADDR_VAR 0 4
31651: PUSH
31652: LD_VAR 0 2
31656: PUSH
31657: LD_VAR 0 3
31661: ARRAY
31662: PPUSH
31663: LD_INT 3
31665: PPUSH
31666: CALL_OW 259
31670: PUSH
31671: LD_VAR 0 2
31675: PUSH
31676: LD_VAR 0 3
31680: ARRAY
31681: PPUSH
31682: CALL_OW 432
31686: MINUS
31687: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
31688: LD_VAR 0 4
31692: PUSH
31693: LD_VAR 0 5
31697: PPUSH
31698: LD_INT 3
31700: PPUSH
31701: CALL_OW 259
31705: PUSH
31706: LD_VAR 0 5
31710: PPUSH
31711: CALL_OW 432
31715: MINUS
31716: GREATEREQUAL
31717: IFFALSE 31735
// mech := result [ i ] ;
31719: LD_ADDR_VAR 0 5
31723: PUSH
31724: LD_VAR 0 2
31728: PUSH
31729: LD_VAR 0 3
31733: ARRAY
31734: ST_TO_ADDR
// end ;
31735: GO 31644
31737: POP
31738: POP
// end ; ComLinkTo ( vehicle , mech ) ;
31739: LD_VAR 0 1
31743: PPUSH
31744: LD_VAR 0 5
31748: PPUSH
31749: CALL_OW 135
// end ;
31753: LD_VAR 0 2
31757: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
31758: LD_INT 0
31760: PPUSH
31761: PPUSH
31762: PPUSH
31763: PPUSH
31764: PPUSH
31765: PPUSH
31766: PPUSH
31767: PPUSH
31768: PPUSH
31769: PPUSH
31770: PPUSH
31771: PPUSH
31772: PPUSH
// result := [ ] ;
31773: LD_ADDR_VAR 0 7
31777: PUSH
31778: EMPTY
31779: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
31780: LD_VAR 0 1
31784: PPUSH
31785: CALL_OW 266
31789: PUSH
31790: LD_INT 0
31792: PUSH
31793: LD_INT 1
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: IN
31800: NOT
31801: IFFALSE 31805
// exit ;
31803: GO 33439
// if name then
31805: LD_VAR 0 3
31809: IFFALSE 31825
// SetBName ( base_dep , name ) ;
31811: LD_VAR 0 1
31815: PPUSH
31816: LD_VAR 0 3
31820: PPUSH
31821: CALL_OW 500
// base := GetBase ( base_dep ) ;
31825: LD_ADDR_VAR 0 15
31829: PUSH
31830: LD_VAR 0 1
31834: PPUSH
31835: CALL_OW 274
31839: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
31840: LD_ADDR_VAR 0 16
31844: PUSH
31845: LD_VAR 0 1
31849: PPUSH
31850: CALL_OW 255
31854: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
31855: LD_ADDR_VAR 0 17
31859: PUSH
31860: LD_VAR 0 1
31864: PPUSH
31865: CALL_OW 248
31869: ST_TO_ADDR
// if sources then
31870: LD_VAR 0 5
31874: IFFALSE 31921
// for i = 1 to 3 do
31876: LD_ADDR_VAR 0 8
31880: PUSH
31881: DOUBLE
31882: LD_INT 1
31884: DEC
31885: ST_TO_ADDR
31886: LD_INT 3
31888: PUSH
31889: FOR_TO
31890: IFFALSE 31919
// AddResourceType ( base , i , sources [ i ] ) ;
31892: LD_VAR 0 15
31896: PPUSH
31897: LD_VAR 0 8
31901: PPUSH
31902: LD_VAR 0 5
31906: PUSH
31907: LD_VAR 0 8
31911: ARRAY
31912: PPUSH
31913: CALL_OW 276
31917: GO 31889
31919: POP
31920: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
31921: LD_ADDR_VAR 0 18
31925: PUSH
31926: LD_VAR 0 15
31930: PPUSH
31931: LD_VAR 0 2
31935: PPUSH
31936: LD_INT 1
31938: PPUSH
31939: CALL 31182 0 3
31943: ST_TO_ADDR
// InitHc ;
31944: CALL_OW 19
// InitUc ;
31948: CALL_OW 18
// uc_side := side ;
31952: LD_ADDR_OWVAR 20
31956: PUSH
31957: LD_VAR 0 16
31961: ST_TO_ADDR
// uc_nation := nation ;
31962: LD_ADDR_OWVAR 21
31966: PUSH
31967: LD_VAR 0 17
31971: ST_TO_ADDR
// if buildings then
31972: LD_VAR 0 18
31976: IFFALSE 33298
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
31978: LD_ADDR_VAR 0 19
31982: PUSH
31983: LD_VAR 0 18
31987: PPUSH
31988: LD_INT 2
31990: PUSH
31991: LD_INT 30
31993: PUSH
31994: LD_INT 29
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: PUSH
32001: LD_INT 30
32003: PUSH
32004: LD_INT 30
32006: PUSH
32007: EMPTY
32008: LIST
32009: LIST
32010: PUSH
32011: EMPTY
32012: LIST
32013: LIST
32014: LIST
32015: PPUSH
32016: CALL_OW 72
32020: ST_TO_ADDR
// if tmp then
32021: LD_VAR 0 19
32025: IFFALSE 32073
// for i in tmp do
32027: LD_ADDR_VAR 0 8
32031: PUSH
32032: LD_VAR 0 19
32036: PUSH
32037: FOR_IN
32038: IFFALSE 32071
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
32040: LD_VAR 0 8
32044: PPUSH
32045: CALL_OW 250
32049: PPUSH
32050: LD_VAR 0 8
32054: PPUSH
32055: CALL_OW 251
32059: PPUSH
32060: LD_VAR 0 16
32064: PPUSH
32065: CALL_OW 441
32069: GO 32037
32071: POP
32072: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
32073: LD_VAR 0 18
32077: PPUSH
32078: LD_INT 2
32080: PUSH
32081: LD_INT 30
32083: PUSH
32084: LD_INT 32
32086: PUSH
32087: EMPTY
32088: LIST
32089: LIST
32090: PUSH
32091: LD_INT 30
32093: PUSH
32094: LD_INT 33
32096: PUSH
32097: EMPTY
32098: LIST
32099: LIST
32100: PUSH
32101: EMPTY
32102: LIST
32103: LIST
32104: LIST
32105: PPUSH
32106: CALL_OW 72
32110: IFFALSE 32198
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
32112: LD_ADDR_VAR 0 8
32116: PUSH
32117: LD_VAR 0 18
32121: PPUSH
32122: LD_INT 2
32124: PUSH
32125: LD_INT 30
32127: PUSH
32128: LD_INT 32
32130: PUSH
32131: EMPTY
32132: LIST
32133: LIST
32134: PUSH
32135: LD_INT 30
32137: PUSH
32138: LD_INT 33
32140: PUSH
32141: EMPTY
32142: LIST
32143: LIST
32144: PUSH
32145: EMPTY
32146: LIST
32147: LIST
32148: LIST
32149: PPUSH
32150: CALL_OW 72
32154: PUSH
32155: FOR_IN
32156: IFFALSE 32196
// begin if not GetBWeapon ( i ) then
32158: LD_VAR 0 8
32162: PPUSH
32163: CALL_OW 269
32167: NOT
32168: IFFALSE 32194
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
32170: LD_VAR 0 8
32174: PPUSH
32175: LD_VAR 0 8
32179: PPUSH
32180: LD_VAR 0 2
32184: PPUSH
32185: CALL 33444 0 2
32189: PPUSH
32190: CALL_OW 431
// end ;
32194: GO 32155
32196: POP
32197: POP
// end ; for i = 1 to personel do
32198: LD_ADDR_VAR 0 8
32202: PUSH
32203: DOUBLE
32204: LD_INT 1
32206: DEC
32207: ST_TO_ADDR
32208: LD_VAR 0 6
32212: PUSH
32213: FOR_TO
32214: IFFALSE 33278
// begin if i > 4 then
32216: LD_VAR 0 8
32220: PUSH
32221: LD_INT 4
32223: GREATER
32224: IFFALSE 32228
// break ;
32226: GO 33278
// case i of 1 :
32228: LD_VAR 0 8
32232: PUSH
32233: LD_INT 1
32235: DOUBLE
32236: EQUAL
32237: IFTRUE 32241
32239: GO 32321
32241: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
32242: LD_ADDR_VAR 0 12
32246: PUSH
32247: LD_VAR 0 18
32251: PPUSH
32252: LD_INT 22
32254: PUSH
32255: LD_VAR 0 16
32259: PUSH
32260: EMPTY
32261: LIST
32262: LIST
32263: PUSH
32264: LD_INT 58
32266: PUSH
32267: EMPTY
32268: LIST
32269: PUSH
32270: LD_INT 2
32272: PUSH
32273: LD_INT 30
32275: PUSH
32276: LD_INT 32
32278: PUSH
32279: EMPTY
32280: LIST
32281: LIST
32282: PUSH
32283: LD_INT 30
32285: PUSH
32286: LD_INT 4
32288: PUSH
32289: EMPTY
32290: LIST
32291: LIST
32292: PUSH
32293: LD_INT 30
32295: PUSH
32296: LD_INT 5
32298: PUSH
32299: EMPTY
32300: LIST
32301: LIST
32302: PUSH
32303: EMPTY
32304: LIST
32305: LIST
32306: LIST
32307: LIST
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: LIST
32313: PPUSH
32314: CALL_OW 72
32318: ST_TO_ADDR
32319: GO 32543
32321: LD_INT 2
32323: DOUBLE
32324: EQUAL
32325: IFTRUE 32329
32327: GO 32391
32329: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
32330: LD_ADDR_VAR 0 12
32334: PUSH
32335: LD_VAR 0 18
32339: PPUSH
32340: LD_INT 22
32342: PUSH
32343: LD_VAR 0 16
32347: PUSH
32348: EMPTY
32349: LIST
32350: LIST
32351: PUSH
32352: LD_INT 2
32354: PUSH
32355: LD_INT 30
32357: PUSH
32358: LD_INT 0
32360: PUSH
32361: EMPTY
32362: LIST
32363: LIST
32364: PUSH
32365: LD_INT 30
32367: PUSH
32368: LD_INT 1
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: PUSH
32375: EMPTY
32376: LIST
32377: LIST
32378: LIST
32379: PUSH
32380: EMPTY
32381: LIST
32382: LIST
32383: PPUSH
32384: CALL_OW 72
32388: ST_TO_ADDR
32389: GO 32543
32391: LD_INT 3
32393: DOUBLE
32394: EQUAL
32395: IFTRUE 32399
32397: GO 32461
32399: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
32400: LD_ADDR_VAR 0 12
32404: PUSH
32405: LD_VAR 0 18
32409: PPUSH
32410: LD_INT 22
32412: PUSH
32413: LD_VAR 0 16
32417: PUSH
32418: EMPTY
32419: LIST
32420: LIST
32421: PUSH
32422: LD_INT 2
32424: PUSH
32425: LD_INT 30
32427: PUSH
32428: LD_INT 2
32430: PUSH
32431: EMPTY
32432: LIST
32433: LIST
32434: PUSH
32435: LD_INT 30
32437: PUSH
32438: LD_INT 3
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: PUSH
32445: EMPTY
32446: LIST
32447: LIST
32448: LIST
32449: PUSH
32450: EMPTY
32451: LIST
32452: LIST
32453: PPUSH
32454: CALL_OW 72
32458: ST_TO_ADDR
32459: GO 32543
32461: LD_INT 4
32463: DOUBLE
32464: EQUAL
32465: IFTRUE 32469
32467: GO 32542
32469: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
32470: LD_ADDR_VAR 0 12
32474: PUSH
32475: LD_VAR 0 18
32479: PPUSH
32480: LD_INT 22
32482: PUSH
32483: LD_VAR 0 16
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 2
32494: PUSH
32495: LD_INT 30
32497: PUSH
32498: LD_INT 6
32500: PUSH
32501: EMPTY
32502: LIST
32503: LIST
32504: PUSH
32505: LD_INT 30
32507: PUSH
32508: LD_INT 7
32510: PUSH
32511: EMPTY
32512: LIST
32513: LIST
32514: PUSH
32515: LD_INT 30
32517: PUSH
32518: LD_INT 8
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: PUSH
32525: EMPTY
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: PUSH
32531: EMPTY
32532: LIST
32533: LIST
32534: PPUSH
32535: CALL_OW 72
32539: ST_TO_ADDR
32540: GO 32543
32542: POP
// if i = 1 then
32543: LD_VAR 0 8
32547: PUSH
32548: LD_INT 1
32550: EQUAL
32551: IFFALSE 32662
// begin tmp := [ ] ;
32553: LD_ADDR_VAR 0 19
32557: PUSH
32558: EMPTY
32559: ST_TO_ADDR
// for j in f do
32560: LD_ADDR_VAR 0 9
32564: PUSH
32565: LD_VAR 0 12
32569: PUSH
32570: FOR_IN
32571: IFFALSE 32644
// if GetBType ( j ) = b_bunker then
32573: LD_VAR 0 9
32577: PPUSH
32578: CALL_OW 266
32582: PUSH
32583: LD_INT 32
32585: EQUAL
32586: IFFALSE 32613
// tmp := Insert ( tmp , 1 , j ) else
32588: LD_ADDR_VAR 0 19
32592: PUSH
32593: LD_VAR 0 19
32597: PPUSH
32598: LD_INT 1
32600: PPUSH
32601: LD_VAR 0 9
32605: PPUSH
32606: CALL_OW 2
32610: ST_TO_ADDR
32611: GO 32642
// tmp := Insert ( tmp , tmp + 1 , j ) ;
32613: LD_ADDR_VAR 0 19
32617: PUSH
32618: LD_VAR 0 19
32622: PPUSH
32623: LD_VAR 0 19
32627: PUSH
32628: LD_INT 1
32630: PLUS
32631: PPUSH
32632: LD_VAR 0 9
32636: PPUSH
32637: CALL_OW 2
32641: ST_TO_ADDR
32642: GO 32570
32644: POP
32645: POP
// if tmp then
32646: LD_VAR 0 19
32650: IFFALSE 32662
// f := tmp ;
32652: LD_ADDR_VAR 0 12
32656: PUSH
32657: LD_VAR 0 19
32661: ST_TO_ADDR
// end ; x := personel [ i ] ;
32662: LD_ADDR_VAR 0 13
32666: PUSH
32667: LD_VAR 0 6
32671: PUSH
32672: LD_VAR 0 8
32676: ARRAY
32677: ST_TO_ADDR
// if x = - 1 then
32678: LD_VAR 0 13
32682: PUSH
32683: LD_INT 1
32685: NEG
32686: EQUAL
32687: IFFALSE 32896
// begin for j in f do
32689: LD_ADDR_VAR 0 9
32693: PUSH
32694: LD_VAR 0 12
32698: PUSH
32699: FOR_IN
32700: IFFALSE 32892
// repeat InitHc ;
32702: CALL_OW 19
// if GetBType ( j ) = b_barracks then
32706: LD_VAR 0 9
32710: PPUSH
32711: CALL_OW 266
32715: PUSH
32716: LD_INT 5
32718: EQUAL
32719: IFFALSE 32789
// begin if UnitsInside ( j ) < 3 then
32721: LD_VAR 0 9
32725: PPUSH
32726: CALL_OW 313
32730: PUSH
32731: LD_INT 3
32733: LESS
32734: IFFALSE 32770
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
32736: LD_INT 0
32738: PPUSH
32739: LD_INT 5
32741: PUSH
32742: LD_INT 8
32744: PUSH
32745: LD_INT 9
32747: PUSH
32748: EMPTY
32749: LIST
32750: LIST
32751: LIST
32752: PUSH
32753: LD_VAR 0 17
32757: ARRAY
32758: PPUSH
32759: LD_VAR 0 4
32763: PPUSH
32764: CALL_OW 380
32768: GO 32787
// PrepareHuman ( false , i , skill ) ;
32770: LD_INT 0
32772: PPUSH
32773: LD_VAR 0 8
32777: PPUSH
32778: LD_VAR 0 4
32782: PPUSH
32783: CALL_OW 380
// end else
32787: GO 32806
// PrepareHuman ( false , i , skill ) ;
32789: LD_INT 0
32791: PPUSH
32792: LD_VAR 0 8
32796: PPUSH
32797: LD_VAR 0 4
32801: PPUSH
32802: CALL_OW 380
// un := CreateHuman ;
32806: LD_ADDR_VAR 0 14
32810: PUSH
32811: CALL_OW 44
32815: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32816: LD_ADDR_VAR 0 7
32820: PUSH
32821: LD_VAR 0 7
32825: PPUSH
32826: LD_INT 1
32828: PPUSH
32829: LD_VAR 0 14
32833: PPUSH
32834: CALL_OW 2
32838: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
32839: LD_VAR 0 14
32843: PPUSH
32844: LD_VAR 0 9
32848: PPUSH
32849: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
32853: LD_VAR 0 9
32857: PPUSH
32858: CALL_OW 313
32862: PUSH
32863: LD_INT 6
32865: EQUAL
32866: PUSH
32867: LD_VAR 0 9
32871: PPUSH
32872: CALL_OW 266
32876: PUSH
32877: LD_INT 32
32879: PUSH
32880: LD_INT 31
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: IN
32887: OR
32888: IFFALSE 32702
32890: GO 32699
32892: POP
32893: POP
// end else
32894: GO 33276
// for j = 1 to x do
32896: LD_ADDR_VAR 0 9
32900: PUSH
32901: DOUBLE
32902: LD_INT 1
32904: DEC
32905: ST_TO_ADDR
32906: LD_VAR 0 13
32910: PUSH
32911: FOR_TO
32912: IFFALSE 33274
// begin InitHc ;
32914: CALL_OW 19
// if not f then
32918: LD_VAR 0 12
32922: NOT
32923: IFFALSE 33012
// begin PrepareHuman ( false , i , skill ) ;
32925: LD_INT 0
32927: PPUSH
32928: LD_VAR 0 8
32932: PPUSH
32933: LD_VAR 0 4
32937: PPUSH
32938: CALL_OW 380
// un := CreateHuman ;
32942: LD_ADDR_VAR 0 14
32946: PUSH
32947: CALL_OW 44
32951: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
32952: LD_ADDR_VAR 0 7
32956: PUSH
32957: LD_VAR 0 7
32961: PPUSH
32962: LD_INT 1
32964: PPUSH
32965: LD_VAR 0 14
32969: PPUSH
32970: CALL_OW 2
32974: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
32975: LD_VAR 0 14
32979: PPUSH
32980: LD_VAR 0 1
32984: PPUSH
32985: CALL_OW 250
32989: PPUSH
32990: LD_VAR 0 1
32994: PPUSH
32995: CALL_OW 251
32999: PPUSH
33000: LD_INT 10
33002: PPUSH
33003: LD_INT 0
33005: PPUSH
33006: CALL_OW 50
// continue ;
33010: GO 32911
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
33012: LD_VAR 0 12
33016: PUSH
33017: LD_INT 1
33019: ARRAY
33020: PPUSH
33021: CALL_OW 313
33025: PUSH
33026: LD_VAR 0 12
33030: PUSH
33031: LD_INT 1
33033: ARRAY
33034: PPUSH
33035: CALL_OW 266
33039: PUSH
33040: LD_INT 32
33042: PUSH
33043: LD_INT 31
33045: PUSH
33046: EMPTY
33047: LIST
33048: LIST
33049: IN
33050: AND
33051: PUSH
33052: LD_VAR 0 12
33056: PUSH
33057: LD_INT 1
33059: ARRAY
33060: PPUSH
33061: CALL_OW 313
33065: PUSH
33066: LD_INT 6
33068: EQUAL
33069: OR
33070: IFFALSE 33090
// f := Delete ( f , 1 ) ;
33072: LD_ADDR_VAR 0 12
33076: PUSH
33077: LD_VAR 0 12
33081: PPUSH
33082: LD_INT 1
33084: PPUSH
33085: CALL_OW 3
33089: ST_TO_ADDR
// if not f then
33090: LD_VAR 0 12
33094: NOT
33095: IFFALSE 33113
// begin x := x + 2 ;
33097: LD_ADDR_VAR 0 13
33101: PUSH
33102: LD_VAR 0 13
33106: PUSH
33107: LD_INT 2
33109: PLUS
33110: ST_TO_ADDR
// continue ;
33111: GO 32911
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
33113: LD_VAR 0 12
33117: PUSH
33118: LD_INT 1
33120: ARRAY
33121: PPUSH
33122: CALL_OW 266
33126: PUSH
33127: LD_INT 5
33129: EQUAL
33130: IFFALSE 33204
// begin if UnitsInside ( f [ 1 ] ) < 3 then
33132: LD_VAR 0 12
33136: PUSH
33137: LD_INT 1
33139: ARRAY
33140: PPUSH
33141: CALL_OW 313
33145: PUSH
33146: LD_INT 3
33148: LESS
33149: IFFALSE 33185
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
33151: LD_INT 0
33153: PPUSH
33154: LD_INT 5
33156: PUSH
33157: LD_INT 8
33159: PUSH
33160: LD_INT 9
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: LIST
33167: PUSH
33168: LD_VAR 0 17
33172: ARRAY
33173: PPUSH
33174: LD_VAR 0 4
33178: PPUSH
33179: CALL_OW 380
33183: GO 33202
// PrepareHuman ( false , i , skill ) ;
33185: LD_INT 0
33187: PPUSH
33188: LD_VAR 0 8
33192: PPUSH
33193: LD_VAR 0 4
33197: PPUSH
33198: CALL_OW 380
// end else
33202: GO 33221
// PrepareHuman ( false , i , skill ) ;
33204: LD_INT 0
33206: PPUSH
33207: LD_VAR 0 8
33211: PPUSH
33212: LD_VAR 0 4
33216: PPUSH
33217: CALL_OW 380
// un := CreateHuman ;
33221: LD_ADDR_VAR 0 14
33225: PUSH
33226: CALL_OW 44
33230: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
33231: LD_ADDR_VAR 0 7
33235: PUSH
33236: LD_VAR 0 7
33240: PPUSH
33241: LD_INT 1
33243: PPUSH
33244: LD_VAR 0 14
33248: PPUSH
33249: CALL_OW 2
33253: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
33254: LD_VAR 0 14
33258: PPUSH
33259: LD_VAR 0 12
33263: PUSH
33264: LD_INT 1
33266: ARRAY
33267: PPUSH
33268: CALL_OW 52
// end ;
33272: GO 32911
33274: POP
33275: POP
// end ;
33276: GO 32213
33278: POP
33279: POP
// result := result ^ buildings ;
33280: LD_ADDR_VAR 0 7
33284: PUSH
33285: LD_VAR 0 7
33289: PUSH
33290: LD_VAR 0 18
33294: ADD
33295: ST_TO_ADDR
// end else
33296: GO 33439
// begin for i = 1 to personel do
33298: LD_ADDR_VAR 0 8
33302: PUSH
33303: DOUBLE
33304: LD_INT 1
33306: DEC
33307: ST_TO_ADDR
33308: LD_VAR 0 6
33312: PUSH
33313: FOR_TO
33314: IFFALSE 33437
// begin if i > 4 then
33316: LD_VAR 0 8
33320: PUSH
33321: LD_INT 4
33323: GREATER
33324: IFFALSE 33328
// break ;
33326: GO 33437
// x := personel [ i ] ;
33328: LD_ADDR_VAR 0 13
33332: PUSH
33333: LD_VAR 0 6
33337: PUSH
33338: LD_VAR 0 8
33342: ARRAY
33343: ST_TO_ADDR
// if x = - 1 then
33344: LD_VAR 0 13
33348: PUSH
33349: LD_INT 1
33351: NEG
33352: EQUAL
33353: IFFALSE 33357
// continue ;
33355: GO 33313
// PrepareHuman ( false , i , skill ) ;
33357: LD_INT 0
33359: PPUSH
33360: LD_VAR 0 8
33364: PPUSH
33365: LD_VAR 0 4
33369: PPUSH
33370: CALL_OW 380
// un := CreateHuman ;
33374: LD_ADDR_VAR 0 14
33378: PUSH
33379: CALL_OW 44
33383: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
33384: LD_VAR 0 14
33388: PPUSH
33389: LD_VAR 0 1
33393: PPUSH
33394: CALL_OW 250
33398: PPUSH
33399: LD_VAR 0 1
33403: PPUSH
33404: CALL_OW 251
33408: PPUSH
33409: LD_INT 10
33411: PPUSH
33412: LD_INT 0
33414: PPUSH
33415: CALL_OW 50
// result := result ^ un ;
33419: LD_ADDR_VAR 0 7
33423: PUSH
33424: LD_VAR 0 7
33428: PUSH
33429: LD_VAR 0 14
33433: ADD
33434: ST_TO_ADDR
// end ;
33435: GO 33313
33437: POP
33438: POP
// end ; end ;
33439: LD_VAR 0 7
33443: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
33444: LD_INT 0
33446: PPUSH
33447: PPUSH
33448: PPUSH
33449: PPUSH
33450: PPUSH
33451: PPUSH
33452: PPUSH
33453: PPUSH
33454: PPUSH
33455: PPUSH
33456: PPUSH
33457: PPUSH
33458: PPUSH
33459: PPUSH
33460: PPUSH
33461: PPUSH
// result := false ;
33462: LD_ADDR_VAR 0 3
33466: PUSH
33467: LD_INT 0
33469: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
33470: LD_VAR 0 1
33474: NOT
33475: PUSH
33476: LD_VAR 0 1
33480: PPUSH
33481: CALL_OW 266
33485: PUSH
33486: LD_INT 32
33488: PUSH
33489: LD_INT 33
33491: PUSH
33492: EMPTY
33493: LIST
33494: LIST
33495: IN
33496: NOT
33497: OR
33498: IFFALSE 33502
// exit ;
33500: GO 34611
// nat := GetNation ( tower ) ;
33502: LD_ADDR_VAR 0 12
33506: PUSH
33507: LD_VAR 0 1
33511: PPUSH
33512: CALL_OW 248
33516: ST_TO_ADDR
// side := GetSide ( tower ) ;
33517: LD_ADDR_VAR 0 16
33521: PUSH
33522: LD_VAR 0 1
33526: PPUSH
33527: CALL_OW 255
33531: ST_TO_ADDR
// x := GetX ( tower ) ;
33532: LD_ADDR_VAR 0 10
33536: PUSH
33537: LD_VAR 0 1
33541: PPUSH
33542: CALL_OW 250
33546: ST_TO_ADDR
// y := GetY ( tower ) ;
33547: LD_ADDR_VAR 0 11
33551: PUSH
33552: LD_VAR 0 1
33556: PPUSH
33557: CALL_OW 251
33561: ST_TO_ADDR
// if not x or not y then
33562: LD_VAR 0 10
33566: NOT
33567: PUSH
33568: LD_VAR 0 11
33572: NOT
33573: OR
33574: IFFALSE 33578
// exit ;
33576: GO 34611
// weapon := 0 ;
33578: LD_ADDR_VAR 0 18
33582: PUSH
33583: LD_INT 0
33585: ST_TO_ADDR
// fac_list := [ ] ;
33586: LD_ADDR_VAR 0 17
33590: PUSH
33591: EMPTY
33592: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
33593: LD_ADDR_VAR 0 6
33597: PUSH
33598: LD_VAR 0 1
33602: PPUSH
33603: CALL_OW 274
33607: PPUSH
33608: LD_VAR 0 2
33612: PPUSH
33613: LD_INT 0
33615: PPUSH
33616: CALL 31182 0 3
33620: PPUSH
33621: LD_INT 30
33623: PUSH
33624: LD_INT 3
33626: PUSH
33627: EMPTY
33628: LIST
33629: LIST
33630: PPUSH
33631: CALL_OW 72
33635: ST_TO_ADDR
// if not factories then
33636: LD_VAR 0 6
33640: NOT
33641: IFFALSE 33645
// exit ;
33643: GO 34611
// for i in factories do
33645: LD_ADDR_VAR 0 8
33649: PUSH
33650: LD_VAR 0 6
33654: PUSH
33655: FOR_IN
33656: IFFALSE 33681
// fac_list := fac_list union AvailableWeaponList ( i ) ;
33658: LD_ADDR_VAR 0 17
33662: PUSH
33663: LD_VAR 0 17
33667: PUSH
33668: LD_VAR 0 8
33672: PPUSH
33673: CALL_OW 478
33677: UNION
33678: ST_TO_ADDR
33679: GO 33655
33681: POP
33682: POP
// if not fac_list then
33683: LD_VAR 0 17
33687: NOT
33688: IFFALSE 33692
// exit ;
33690: GO 34611
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
33692: LD_ADDR_VAR 0 5
33696: PUSH
33697: LD_INT 4
33699: PUSH
33700: LD_INT 5
33702: PUSH
33703: LD_INT 9
33705: PUSH
33706: LD_INT 10
33708: PUSH
33709: LD_INT 6
33711: PUSH
33712: LD_INT 7
33714: PUSH
33715: LD_INT 11
33717: PUSH
33718: EMPTY
33719: LIST
33720: LIST
33721: LIST
33722: LIST
33723: LIST
33724: LIST
33725: LIST
33726: PUSH
33727: LD_INT 27
33729: PUSH
33730: LD_INT 28
33732: PUSH
33733: LD_INT 26
33735: PUSH
33736: LD_INT 30
33738: PUSH
33739: EMPTY
33740: LIST
33741: LIST
33742: LIST
33743: LIST
33744: PUSH
33745: LD_INT 43
33747: PUSH
33748: LD_INT 44
33750: PUSH
33751: LD_INT 46
33753: PUSH
33754: LD_INT 45
33756: PUSH
33757: LD_INT 47
33759: PUSH
33760: LD_INT 49
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: LIST
33767: LIST
33768: LIST
33769: LIST
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: LIST
33775: PUSH
33776: LD_VAR 0 12
33780: ARRAY
33781: ST_TO_ADDR
// list := list isect fac_list ;
33782: LD_ADDR_VAR 0 5
33786: PUSH
33787: LD_VAR 0 5
33791: PUSH
33792: LD_VAR 0 17
33796: ISECT
33797: ST_TO_ADDR
// if not list then
33798: LD_VAR 0 5
33802: NOT
33803: IFFALSE 33807
// exit ;
33805: GO 34611
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
33807: LD_VAR 0 12
33811: PUSH
33812: LD_INT 3
33814: EQUAL
33815: PUSH
33816: LD_INT 49
33818: PUSH
33819: LD_VAR 0 5
33823: IN
33824: AND
33825: PUSH
33826: LD_INT 31
33828: PPUSH
33829: LD_VAR 0 16
33833: PPUSH
33834: CALL_OW 321
33838: PUSH
33839: LD_INT 2
33841: EQUAL
33842: AND
33843: IFFALSE 33903
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
33845: LD_INT 22
33847: PUSH
33848: LD_VAR 0 16
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: PUSH
33857: LD_INT 35
33859: PUSH
33860: LD_INT 49
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: PUSH
33867: LD_INT 91
33869: PUSH
33870: LD_VAR 0 1
33874: PUSH
33875: LD_INT 10
33877: PUSH
33878: EMPTY
33879: LIST
33880: LIST
33881: LIST
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: LIST
33887: PPUSH
33888: CALL_OW 69
33892: NOT
33893: IFFALSE 33903
// weapon := ru_time_lapser ;
33895: LD_ADDR_VAR 0 18
33899: PUSH
33900: LD_INT 49
33902: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
33903: LD_VAR 0 12
33907: PUSH
33908: LD_INT 1
33910: PUSH
33911: LD_INT 2
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: IN
33918: PUSH
33919: LD_INT 11
33921: PUSH
33922: LD_VAR 0 5
33926: IN
33927: PUSH
33928: LD_INT 30
33930: PUSH
33931: LD_VAR 0 5
33935: IN
33936: OR
33937: AND
33938: PUSH
33939: LD_INT 6
33941: PPUSH
33942: LD_VAR 0 16
33946: PPUSH
33947: CALL_OW 321
33951: PUSH
33952: LD_INT 2
33954: EQUAL
33955: AND
33956: IFFALSE 34121
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
33958: LD_INT 22
33960: PUSH
33961: LD_VAR 0 16
33965: PUSH
33966: EMPTY
33967: LIST
33968: LIST
33969: PUSH
33970: LD_INT 2
33972: PUSH
33973: LD_INT 35
33975: PUSH
33976: LD_INT 11
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: PUSH
33983: LD_INT 35
33985: PUSH
33986: LD_INT 30
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PUSH
33993: EMPTY
33994: LIST
33995: LIST
33996: LIST
33997: PUSH
33998: LD_INT 91
34000: PUSH
34001: LD_VAR 0 1
34005: PUSH
34006: LD_INT 18
34008: PUSH
34009: EMPTY
34010: LIST
34011: LIST
34012: LIST
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: LIST
34018: PPUSH
34019: CALL_OW 69
34023: NOT
34024: PUSH
34025: LD_INT 22
34027: PUSH
34028: LD_VAR 0 16
34032: PUSH
34033: EMPTY
34034: LIST
34035: LIST
34036: PUSH
34037: LD_INT 2
34039: PUSH
34040: LD_INT 30
34042: PUSH
34043: LD_INT 32
34045: PUSH
34046: EMPTY
34047: LIST
34048: LIST
34049: PUSH
34050: LD_INT 30
34052: PUSH
34053: LD_INT 33
34055: PUSH
34056: EMPTY
34057: LIST
34058: LIST
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: LIST
34064: PUSH
34065: LD_INT 91
34067: PUSH
34068: LD_VAR 0 1
34072: PUSH
34073: LD_INT 12
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: LIST
34080: PUSH
34081: EMPTY
34082: LIST
34083: LIST
34084: LIST
34085: PUSH
34086: EMPTY
34087: LIST
34088: PPUSH
34089: CALL_OW 69
34093: PUSH
34094: LD_INT 2
34096: GREATER
34097: AND
34098: IFFALSE 34121
// weapon := [ us_radar , ar_radar ] [ nat ] ;
34100: LD_ADDR_VAR 0 18
34104: PUSH
34105: LD_INT 11
34107: PUSH
34108: LD_INT 30
34110: PUSH
34111: EMPTY
34112: LIST
34113: LIST
34114: PUSH
34115: LD_VAR 0 12
34119: ARRAY
34120: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
34121: LD_VAR 0 18
34125: NOT
34126: PUSH
34127: LD_INT 40
34129: PPUSH
34130: LD_VAR 0 16
34134: PPUSH
34135: CALL_OW 321
34139: PUSH
34140: LD_INT 2
34142: EQUAL
34143: AND
34144: PUSH
34145: LD_INT 7
34147: PUSH
34148: LD_VAR 0 5
34152: IN
34153: PUSH
34154: LD_INT 28
34156: PUSH
34157: LD_VAR 0 5
34161: IN
34162: OR
34163: PUSH
34164: LD_INT 45
34166: PUSH
34167: LD_VAR 0 5
34171: IN
34172: OR
34173: AND
34174: IFFALSE 34428
// begin hex := GetHexInfo ( x , y ) ;
34176: LD_ADDR_VAR 0 4
34180: PUSH
34181: LD_VAR 0 10
34185: PPUSH
34186: LD_VAR 0 11
34190: PPUSH
34191: CALL_OW 546
34195: ST_TO_ADDR
// if hex [ 1 ] then
34196: LD_VAR 0 4
34200: PUSH
34201: LD_INT 1
34203: ARRAY
34204: IFFALSE 34208
// exit ;
34206: GO 34611
// height := hex [ 2 ] ;
34208: LD_ADDR_VAR 0 15
34212: PUSH
34213: LD_VAR 0 4
34217: PUSH
34218: LD_INT 2
34220: ARRAY
34221: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
34222: LD_ADDR_VAR 0 14
34226: PUSH
34227: LD_INT 0
34229: PUSH
34230: LD_INT 2
34232: PUSH
34233: LD_INT 3
34235: PUSH
34236: LD_INT 5
34238: PUSH
34239: EMPTY
34240: LIST
34241: LIST
34242: LIST
34243: LIST
34244: ST_TO_ADDR
// for i in tmp do
34245: LD_ADDR_VAR 0 8
34249: PUSH
34250: LD_VAR 0 14
34254: PUSH
34255: FOR_IN
34256: IFFALSE 34426
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
34258: LD_ADDR_VAR 0 9
34262: PUSH
34263: LD_VAR 0 10
34267: PPUSH
34268: LD_VAR 0 8
34272: PPUSH
34273: LD_INT 5
34275: PPUSH
34276: CALL_OW 272
34280: PUSH
34281: LD_VAR 0 11
34285: PPUSH
34286: LD_VAR 0 8
34290: PPUSH
34291: LD_INT 5
34293: PPUSH
34294: CALL_OW 273
34298: PUSH
34299: EMPTY
34300: LIST
34301: LIST
34302: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
34303: LD_VAR 0 9
34307: PUSH
34308: LD_INT 1
34310: ARRAY
34311: PPUSH
34312: LD_VAR 0 9
34316: PUSH
34317: LD_INT 2
34319: ARRAY
34320: PPUSH
34321: CALL_OW 488
34325: IFFALSE 34424
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
34327: LD_ADDR_VAR 0 4
34331: PUSH
34332: LD_VAR 0 9
34336: PUSH
34337: LD_INT 1
34339: ARRAY
34340: PPUSH
34341: LD_VAR 0 9
34345: PUSH
34346: LD_INT 2
34348: ARRAY
34349: PPUSH
34350: CALL_OW 546
34354: ST_TO_ADDR
// if hex [ 1 ] then
34355: LD_VAR 0 4
34359: PUSH
34360: LD_INT 1
34362: ARRAY
34363: IFFALSE 34367
// continue ;
34365: GO 34255
// h := hex [ 2 ] ;
34367: LD_ADDR_VAR 0 13
34371: PUSH
34372: LD_VAR 0 4
34376: PUSH
34377: LD_INT 2
34379: ARRAY
34380: ST_TO_ADDR
// if h + 7 < height then
34381: LD_VAR 0 13
34385: PUSH
34386: LD_INT 7
34388: PLUS
34389: PUSH
34390: LD_VAR 0 15
34394: LESS
34395: IFFALSE 34424
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
34397: LD_ADDR_VAR 0 18
34401: PUSH
34402: LD_INT 7
34404: PUSH
34405: LD_INT 28
34407: PUSH
34408: LD_INT 45
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: LIST
34415: PUSH
34416: LD_VAR 0 12
34420: ARRAY
34421: ST_TO_ADDR
// break ;
34422: GO 34426
// end ; end ; end ;
34424: GO 34255
34426: POP
34427: POP
// end ; if not weapon then
34428: LD_VAR 0 18
34432: NOT
34433: IFFALSE 34493
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
34435: LD_ADDR_VAR 0 5
34439: PUSH
34440: LD_VAR 0 5
34444: PUSH
34445: LD_INT 11
34447: PUSH
34448: LD_INT 30
34450: PUSH
34451: LD_INT 49
34453: PUSH
34454: EMPTY
34455: LIST
34456: LIST
34457: LIST
34458: DIFF
34459: ST_TO_ADDR
// if not list then
34460: LD_VAR 0 5
34464: NOT
34465: IFFALSE 34469
// exit ;
34467: GO 34611
// weapon := list [ rand ( 1 , list ) ] ;
34469: LD_ADDR_VAR 0 18
34473: PUSH
34474: LD_VAR 0 5
34478: PUSH
34479: LD_INT 1
34481: PPUSH
34482: LD_VAR 0 5
34486: PPUSH
34487: CALL_OW 12
34491: ARRAY
34492: ST_TO_ADDR
// end ; if weapon then
34493: LD_VAR 0 18
34497: IFFALSE 34611
// begin tmp := CostOfWeapon ( weapon ) ;
34499: LD_ADDR_VAR 0 14
34503: PUSH
34504: LD_VAR 0 18
34508: PPUSH
34509: CALL_OW 451
34513: ST_TO_ADDR
// j := GetBase ( tower ) ;
34514: LD_ADDR_VAR 0 9
34518: PUSH
34519: LD_VAR 0 1
34523: PPUSH
34524: CALL_OW 274
34528: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
34529: LD_VAR 0 9
34533: PPUSH
34534: LD_INT 1
34536: PPUSH
34537: CALL_OW 275
34541: PUSH
34542: LD_VAR 0 14
34546: PUSH
34547: LD_INT 1
34549: ARRAY
34550: GREATEREQUAL
34551: PUSH
34552: LD_VAR 0 9
34556: PPUSH
34557: LD_INT 2
34559: PPUSH
34560: CALL_OW 275
34564: PUSH
34565: LD_VAR 0 14
34569: PUSH
34570: LD_INT 2
34572: ARRAY
34573: GREATEREQUAL
34574: AND
34575: PUSH
34576: LD_VAR 0 9
34580: PPUSH
34581: LD_INT 3
34583: PPUSH
34584: CALL_OW 275
34588: PUSH
34589: LD_VAR 0 14
34593: PUSH
34594: LD_INT 3
34596: ARRAY
34597: GREATEREQUAL
34598: AND
34599: IFFALSE 34611
// result := weapon ;
34601: LD_ADDR_VAR 0 3
34605: PUSH
34606: LD_VAR 0 18
34610: ST_TO_ADDR
// end ; end ;
34611: LD_VAR 0 3
34615: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
34616: LD_INT 0
34618: PPUSH
34619: PPUSH
// result := true ;
34620: LD_ADDR_VAR 0 3
34624: PUSH
34625: LD_INT 1
34627: ST_TO_ADDR
// if array1 = array2 then
34628: LD_VAR 0 1
34632: PUSH
34633: LD_VAR 0 2
34637: EQUAL
34638: IFFALSE 34698
// begin for i = 1 to array1 do
34640: LD_ADDR_VAR 0 4
34644: PUSH
34645: DOUBLE
34646: LD_INT 1
34648: DEC
34649: ST_TO_ADDR
34650: LD_VAR 0 1
34654: PUSH
34655: FOR_TO
34656: IFFALSE 34694
// if array1 [ i ] <> array2 [ i ] then
34658: LD_VAR 0 1
34662: PUSH
34663: LD_VAR 0 4
34667: ARRAY
34668: PUSH
34669: LD_VAR 0 2
34673: PUSH
34674: LD_VAR 0 4
34678: ARRAY
34679: NONEQUAL
34680: IFFALSE 34692
// begin result := false ;
34682: LD_ADDR_VAR 0 3
34686: PUSH
34687: LD_INT 0
34689: ST_TO_ADDR
// break ;
34690: GO 34694
// end ;
34692: GO 34655
34694: POP
34695: POP
// end else
34696: GO 34706
// result := false ;
34698: LD_ADDR_VAR 0 3
34702: PUSH
34703: LD_INT 0
34705: ST_TO_ADDR
// end ;
34706: LD_VAR 0 3
34710: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
34711: LD_INT 0
34713: PPUSH
34714: PPUSH
// if not array1 or not array2 then
34715: LD_VAR 0 1
34719: NOT
34720: PUSH
34721: LD_VAR 0 2
34725: NOT
34726: OR
34727: IFFALSE 34731
// exit ;
34729: GO 34795
// result := true ;
34731: LD_ADDR_VAR 0 3
34735: PUSH
34736: LD_INT 1
34738: ST_TO_ADDR
// for i = 1 to array1 do
34739: LD_ADDR_VAR 0 4
34743: PUSH
34744: DOUBLE
34745: LD_INT 1
34747: DEC
34748: ST_TO_ADDR
34749: LD_VAR 0 1
34753: PUSH
34754: FOR_TO
34755: IFFALSE 34793
// if array1 [ i ] <> array2 [ i ] then
34757: LD_VAR 0 1
34761: PUSH
34762: LD_VAR 0 4
34766: ARRAY
34767: PUSH
34768: LD_VAR 0 2
34772: PUSH
34773: LD_VAR 0 4
34777: ARRAY
34778: NONEQUAL
34779: IFFALSE 34791
// begin result := false ;
34781: LD_ADDR_VAR 0 3
34785: PUSH
34786: LD_INT 0
34788: ST_TO_ADDR
// break ;
34789: GO 34793
// end ;
34791: GO 34754
34793: POP
34794: POP
// end ;
34795: LD_VAR 0 3
34799: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
34800: LD_INT 0
34802: PPUSH
34803: PPUSH
34804: PPUSH
// pom := GetBase ( fac ) ;
34805: LD_ADDR_VAR 0 5
34809: PUSH
34810: LD_VAR 0 1
34814: PPUSH
34815: CALL_OW 274
34819: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
34820: LD_ADDR_VAR 0 4
34824: PUSH
34825: LD_VAR 0 2
34829: PUSH
34830: LD_INT 1
34832: ARRAY
34833: PPUSH
34834: LD_VAR 0 2
34838: PUSH
34839: LD_INT 2
34841: ARRAY
34842: PPUSH
34843: LD_VAR 0 2
34847: PUSH
34848: LD_INT 3
34850: ARRAY
34851: PPUSH
34852: LD_VAR 0 2
34856: PUSH
34857: LD_INT 4
34859: ARRAY
34860: PPUSH
34861: CALL_OW 449
34865: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
34866: LD_ADDR_VAR 0 3
34870: PUSH
34871: LD_VAR 0 5
34875: PPUSH
34876: LD_INT 1
34878: PPUSH
34879: CALL_OW 275
34883: PUSH
34884: LD_VAR 0 4
34888: PUSH
34889: LD_INT 1
34891: ARRAY
34892: GREATEREQUAL
34893: PUSH
34894: LD_VAR 0 5
34898: PPUSH
34899: LD_INT 2
34901: PPUSH
34902: CALL_OW 275
34906: PUSH
34907: LD_VAR 0 4
34911: PUSH
34912: LD_INT 2
34914: ARRAY
34915: GREATEREQUAL
34916: AND
34917: PUSH
34918: LD_VAR 0 5
34922: PPUSH
34923: LD_INT 3
34925: PPUSH
34926: CALL_OW 275
34930: PUSH
34931: LD_VAR 0 4
34935: PUSH
34936: LD_INT 3
34938: ARRAY
34939: GREATEREQUAL
34940: AND
34941: ST_TO_ADDR
// end ;
34942: LD_VAR 0 3
34946: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
34947: LD_INT 0
34949: PPUSH
34950: PPUSH
34951: PPUSH
34952: PPUSH
// pom := GetBase ( building ) ;
34953: LD_ADDR_VAR 0 3
34957: PUSH
34958: LD_VAR 0 1
34962: PPUSH
34963: CALL_OW 274
34967: ST_TO_ADDR
// if not pom then
34968: LD_VAR 0 3
34972: NOT
34973: IFFALSE 34977
// exit ;
34975: GO 35147
// btype := GetBType ( building ) ;
34977: LD_ADDR_VAR 0 5
34981: PUSH
34982: LD_VAR 0 1
34986: PPUSH
34987: CALL_OW 266
34991: ST_TO_ADDR
// if btype = b_armoury then
34992: LD_VAR 0 5
34996: PUSH
34997: LD_INT 4
34999: EQUAL
35000: IFFALSE 35010
// btype := b_barracks ;
35002: LD_ADDR_VAR 0 5
35006: PUSH
35007: LD_INT 5
35009: ST_TO_ADDR
// if btype = b_depot then
35010: LD_VAR 0 5
35014: PUSH
35015: LD_INT 0
35017: EQUAL
35018: IFFALSE 35028
// btype := b_warehouse ;
35020: LD_ADDR_VAR 0 5
35024: PUSH
35025: LD_INT 1
35027: ST_TO_ADDR
// if btype = b_workshop then
35028: LD_VAR 0 5
35032: PUSH
35033: LD_INT 2
35035: EQUAL
35036: IFFALSE 35046
// btype := b_factory ;
35038: LD_ADDR_VAR 0 5
35042: PUSH
35043: LD_INT 3
35045: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35046: LD_ADDR_VAR 0 4
35050: PUSH
35051: LD_VAR 0 5
35055: PPUSH
35056: LD_VAR 0 1
35060: PPUSH
35061: CALL_OW 248
35065: PPUSH
35066: CALL_OW 450
35070: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35071: LD_ADDR_VAR 0 2
35075: PUSH
35076: LD_VAR 0 3
35080: PPUSH
35081: LD_INT 1
35083: PPUSH
35084: CALL_OW 275
35088: PUSH
35089: LD_VAR 0 4
35093: PUSH
35094: LD_INT 1
35096: ARRAY
35097: GREATEREQUAL
35098: PUSH
35099: LD_VAR 0 3
35103: PPUSH
35104: LD_INT 2
35106: PPUSH
35107: CALL_OW 275
35111: PUSH
35112: LD_VAR 0 4
35116: PUSH
35117: LD_INT 2
35119: ARRAY
35120: GREATEREQUAL
35121: AND
35122: PUSH
35123: LD_VAR 0 3
35127: PPUSH
35128: LD_INT 3
35130: PPUSH
35131: CALL_OW 275
35135: PUSH
35136: LD_VAR 0 4
35140: PUSH
35141: LD_INT 3
35143: ARRAY
35144: GREATEREQUAL
35145: AND
35146: ST_TO_ADDR
// end ;
35147: LD_VAR 0 2
35151: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
35152: LD_INT 0
35154: PPUSH
35155: PPUSH
35156: PPUSH
// pom := GetBase ( building ) ;
35157: LD_ADDR_VAR 0 4
35161: PUSH
35162: LD_VAR 0 1
35166: PPUSH
35167: CALL_OW 274
35171: ST_TO_ADDR
// if not pom then
35172: LD_VAR 0 4
35176: NOT
35177: IFFALSE 35181
// exit ;
35179: GO 35282
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
35181: LD_ADDR_VAR 0 5
35185: PUSH
35186: LD_VAR 0 2
35190: PPUSH
35191: LD_VAR 0 1
35195: PPUSH
35196: CALL_OW 248
35200: PPUSH
35201: CALL_OW 450
35205: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
35206: LD_ADDR_VAR 0 3
35210: PUSH
35211: LD_VAR 0 4
35215: PPUSH
35216: LD_INT 1
35218: PPUSH
35219: CALL_OW 275
35223: PUSH
35224: LD_VAR 0 5
35228: PUSH
35229: LD_INT 1
35231: ARRAY
35232: GREATEREQUAL
35233: PUSH
35234: LD_VAR 0 4
35238: PPUSH
35239: LD_INT 2
35241: PPUSH
35242: CALL_OW 275
35246: PUSH
35247: LD_VAR 0 5
35251: PUSH
35252: LD_INT 2
35254: ARRAY
35255: GREATEREQUAL
35256: AND
35257: PUSH
35258: LD_VAR 0 4
35262: PPUSH
35263: LD_INT 3
35265: PPUSH
35266: CALL_OW 275
35270: PUSH
35271: LD_VAR 0 5
35275: PUSH
35276: LD_INT 3
35278: ARRAY
35279: GREATEREQUAL
35280: AND
35281: ST_TO_ADDR
// end ;
35282: LD_VAR 0 3
35286: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
35287: LD_INT 0
35289: PPUSH
35290: PPUSH
35291: PPUSH
35292: PPUSH
35293: PPUSH
35294: PPUSH
35295: PPUSH
35296: PPUSH
35297: PPUSH
35298: PPUSH
35299: PPUSH
// result := false ;
35300: LD_ADDR_VAR 0 8
35304: PUSH
35305: LD_INT 0
35307: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
35308: LD_VAR 0 5
35312: NOT
35313: PUSH
35314: LD_VAR 0 1
35318: NOT
35319: OR
35320: PUSH
35321: LD_VAR 0 2
35325: NOT
35326: OR
35327: PUSH
35328: LD_VAR 0 3
35332: NOT
35333: OR
35334: IFFALSE 35338
// exit ;
35336: GO 36152
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
35338: LD_ADDR_VAR 0 14
35342: PUSH
35343: LD_VAR 0 1
35347: PPUSH
35348: LD_VAR 0 2
35352: PPUSH
35353: LD_VAR 0 3
35357: PPUSH
35358: LD_VAR 0 4
35362: PPUSH
35363: LD_VAR 0 5
35367: PUSH
35368: LD_INT 1
35370: ARRAY
35371: PPUSH
35372: CALL_OW 248
35376: PPUSH
35377: LD_INT 0
35379: PPUSH
35380: CALL 37405 0 6
35384: ST_TO_ADDR
// if not hexes then
35385: LD_VAR 0 14
35389: NOT
35390: IFFALSE 35394
// exit ;
35392: GO 36152
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
35394: LD_ADDR_VAR 0 17
35398: PUSH
35399: LD_VAR 0 5
35403: PPUSH
35404: LD_INT 22
35406: PUSH
35407: LD_VAR 0 13
35411: PPUSH
35412: CALL_OW 255
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: PUSH
35421: LD_INT 2
35423: PUSH
35424: LD_INT 30
35426: PUSH
35427: LD_INT 0
35429: PUSH
35430: EMPTY
35431: LIST
35432: LIST
35433: PUSH
35434: LD_INT 30
35436: PUSH
35437: LD_INT 1
35439: PUSH
35440: EMPTY
35441: LIST
35442: LIST
35443: PUSH
35444: EMPTY
35445: LIST
35446: LIST
35447: LIST
35448: PUSH
35449: EMPTY
35450: LIST
35451: LIST
35452: PPUSH
35453: CALL_OW 72
35457: ST_TO_ADDR
// for i = 1 to hexes do
35458: LD_ADDR_VAR 0 9
35462: PUSH
35463: DOUBLE
35464: LD_INT 1
35466: DEC
35467: ST_TO_ADDR
35468: LD_VAR 0 14
35472: PUSH
35473: FOR_TO
35474: IFFALSE 36150
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
35476: LD_ADDR_VAR 0 13
35480: PUSH
35481: LD_VAR 0 14
35485: PUSH
35486: LD_VAR 0 9
35490: ARRAY
35491: PUSH
35492: LD_INT 1
35494: ARRAY
35495: PPUSH
35496: LD_VAR 0 14
35500: PUSH
35501: LD_VAR 0 9
35505: ARRAY
35506: PUSH
35507: LD_INT 2
35509: ARRAY
35510: PPUSH
35511: CALL_OW 428
35515: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
35516: LD_VAR 0 14
35520: PUSH
35521: LD_VAR 0 9
35525: ARRAY
35526: PUSH
35527: LD_INT 1
35529: ARRAY
35530: PPUSH
35531: LD_VAR 0 14
35535: PUSH
35536: LD_VAR 0 9
35540: ARRAY
35541: PUSH
35542: LD_INT 2
35544: ARRAY
35545: PPUSH
35546: CALL_OW 351
35550: PUSH
35551: LD_VAR 0 14
35555: PUSH
35556: LD_VAR 0 9
35560: ARRAY
35561: PUSH
35562: LD_INT 1
35564: ARRAY
35565: PPUSH
35566: LD_VAR 0 14
35570: PUSH
35571: LD_VAR 0 9
35575: ARRAY
35576: PUSH
35577: LD_INT 2
35579: ARRAY
35580: PPUSH
35581: CALL_OW 488
35585: NOT
35586: OR
35587: PUSH
35588: LD_VAR 0 13
35592: PPUSH
35593: CALL_OW 247
35597: PUSH
35598: LD_INT 3
35600: EQUAL
35601: OR
35602: IFFALSE 35608
// exit ;
35604: POP
35605: POP
35606: GO 36152
// if not tmp then
35608: LD_VAR 0 13
35612: NOT
35613: IFFALSE 35617
// continue ;
35615: GO 35473
// result := true ;
35617: LD_ADDR_VAR 0 8
35621: PUSH
35622: LD_INT 1
35624: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
35625: LD_VAR 0 6
35629: PUSH
35630: LD_VAR 0 13
35634: PPUSH
35635: CALL_OW 247
35639: PUSH
35640: LD_INT 2
35642: EQUAL
35643: AND
35644: PUSH
35645: LD_VAR 0 13
35649: PPUSH
35650: CALL_OW 263
35654: PUSH
35655: LD_INT 1
35657: EQUAL
35658: AND
35659: IFFALSE 35823
// begin if IsDrivenBy ( tmp ) then
35661: LD_VAR 0 13
35665: PPUSH
35666: CALL_OW 311
35670: IFFALSE 35674
// continue ;
35672: GO 35473
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
35674: LD_VAR 0 6
35678: PPUSH
35679: LD_INT 3
35681: PUSH
35682: LD_INT 60
35684: PUSH
35685: EMPTY
35686: LIST
35687: PUSH
35688: EMPTY
35689: LIST
35690: LIST
35691: PUSH
35692: LD_INT 3
35694: PUSH
35695: LD_INT 55
35697: PUSH
35698: EMPTY
35699: LIST
35700: PUSH
35701: EMPTY
35702: LIST
35703: LIST
35704: PUSH
35705: EMPTY
35706: LIST
35707: LIST
35708: PPUSH
35709: CALL_OW 72
35713: IFFALSE 35821
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
35715: LD_ADDR_VAR 0 18
35719: PUSH
35720: LD_VAR 0 6
35724: PPUSH
35725: LD_INT 3
35727: PUSH
35728: LD_INT 60
35730: PUSH
35731: EMPTY
35732: LIST
35733: PUSH
35734: EMPTY
35735: LIST
35736: LIST
35737: PUSH
35738: LD_INT 3
35740: PUSH
35741: LD_INT 55
35743: PUSH
35744: EMPTY
35745: LIST
35746: PUSH
35747: EMPTY
35748: LIST
35749: LIST
35750: PUSH
35751: EMPTY
35752: LIST
35753: LIST
35754: PPUSH
35755: CALL_OW 72
35759: PUSH
35760: LD_INT 1
35762: ARRAY
35763: ST_TO_ADDR
// if IsInUnit ( driver ) then
35764: LD_VAR 0 18
35768: PPUSH
35769: CALL_OW 310
35773: IFFALSE 35784
// ComExit ( driver ) ;
35775: LD_VAR 0 18
35779: PPUSH
35780: CALL 61184 0 1
// AddComEnterUnit ( driver , tmp ) ;
35784: LD_VAR 0 18
35788: PPUSH
35789: LD_VAR 0 13
35793: PPUSH
35794: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
35798: LD_VAR 0 18
35802: PPUSH
35803: LD_VAR 0 7
35807: PPUSH
35808: CALL_OW 173
// AddComExitVehicle ( driver ) ;
35812: LD_VAR 0 18
35816: PPUSH
35817: CALL_OW 181
// end ; continue ;
35821: GO 35473
// end ; if not cleaners or not tmp in cleaners then
35823: LD_VAR 0 6
35827: NOT
35828: PUSH
35829: LD_VAR 0 13
35833: PUSH
35834: LD_VAR 0 6
35838: IN
35839: NOT
35840: OR
35841: IFFALSE 36148
// begin if dep then
35843: LD_VAR 0 17
35847: IFFALSE 35983
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
35849: LD_ADDR_VAR 0 16
35853: PUSH
35854: LD_VAR 0 17
35858: PUSH
35859: LD_INT 1
35861: ARRAY
35862: PPUSH
35863: CALL_OW 250
35867: PPUSH
35868: LD_VAR 0 17
35872: PUSH
35873: LD_INT 1
35875: ARRAY
35876: PPUSH
35877: CALL_OW 254
35881: PPUSH
35882: LD_INT 5
35884: PPUSH
35885: CALL_OW 272
35889: PUSH
35890: LD_VAR 0 17
35894: PUSH
35895: LD_INT 1
35897: ARRAY
35898: PPUSH
35899: CALL_OW 251
35903: PPUSH
35904: LD_VAR 0 17
35908: PUSH
35909: LD_INT 1
35911: ARRAY
35912: PPUSH
35913: CALL_OW 254
35917: PPUSH
35918: LD_INT 5
35920: PPUSH
35921: CALL_OW 273
35925: PUSH
35926: EMPTY
35927: LIST
35928: LIST
35929: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
35930: LD_VAR 0 16
35934: PUSH
35935: LD_INT 1
35937: ARRAY
35938: PPUSH
35939: LD_VAR 0 16
35943: PUSH
35944: LD_INT 2
35946: ARRAY
35947: PPUSH
35948: CALL_OW 488
35952: IFFALSE 35983
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
35954: LD_VAR 0 13
35958: PPUSH
35959: LD_VAR 0 16
35963: PUSH
35964: LD_INT 1
35966: ARRAY
35967: PPUSH
35968: LD_VAR 0 16
35972: PUSH
35973: LD_INT 2
35975: ARRAY
35976: PPUSH
35977: CALL_OW 111
// continue ;
35981: GO 35473
// end ; end ; r := GetDir ( tmp ) ;
35983: LD_ADDR_VAR 0 15
35987: PUSH
35988: LD_VAR 0 13
35992: PPUSH
35993: CALL_OW 254
35997: ST_TO_ADDR
// if r = 5 then
35998: LD_VAR 0 15
36002: PUSH
36003: LD_INT 5
36005: EQUAL
36006: IFFALSE 36016
// r := 0 ;
36008: LD_ADDR_VAR 0 15
36012: PUSH
36013: LD_INT 0
36015: ST_TO_ADDR
// for j = r to 5 do
36016: LD_ADDR_VAR 0 10
36020: PUSH
36021: DOUBLE
36022: LD_VAR 0 15
36026: DEC
36027: ST_TO_ADDR
36028: LD_INT 5
36030: PUSH
36031: FOR_TO
36032: IFFALSE 36146
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
36034: LD_ADDR_VAR 0 11
36038: PUSH
36039: LD_VAR 0 13
36043: PPUSH
36044: CALL_OW 250
36048: PPUSH
36049: LD_VAR 0 10
36053: PPUSH
36054: LD_INT 2
36056: PPUSH
36057: CALL_OW 272
36061: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
36062: LD_ADDR_VAR 0 12
36066: PUSH
36067: LD_VAR 0 13
36071: PPUSH
36072: CALL_OW 251
36076: PPUSH
36077: LD_VAR 0 10
36081: PPUSH
36082: LD_INT 2
36084: PPUSH
36085: CALL_OW 273
36089: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
36090: LD_VAR 0 11
36094: PPUSH
36095: LD_VAR 0 12
36099: PPUSH
36100: CALL_OW 488
36104: PUSH
36105: LD_VAR 0 11
36109: PPUSH
36110: LD_VAR 0 12
36114: PPUSH
36115: CALL_OW 428
36119: NOT
36120: AND
36121: IFFALSE 36144
// begin ComMoveXY ( tmp , _x , _y ) ;
36123: LD_VAR 0 13
36127: PPUSH
36128: LD_VAR 0 11
36132: PPUSH
36133: LD_VAR 0 12
36137: PPUSH
36138: CALL_OW 111
// break ;
36142: GO 36146
// end ; end ;
36144: GO 36031
36146: POP
36147: POP
// end ; end ;
36148: GO 35473
36150: POP
36151: POP
// end ;
36152: LD_VAR 0 8
36156: RET
// export function BuildingTechInvented ( side , btype ) ; begin
36157: LD_INT 0
36159: PPUSH
// result := true ;
36160: LD_ADDR_VAR 0 3
36164: PUSH
36165: LD_INT 1
36167: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
36168: LD_VAR 0 2
36172: PUSH
36173: LD_INT 24
36175: DOUBLE
36176: EQUAL
36177: IFTRUE 36187
36179: LD_INT 33
36181: DOUBLE
36182: EQUAL
36183: IFTRUE 36187
36185: GO 36212
36187: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
36188: LD_ADDR_VAR 0 3
36192: PUSH
36193: LD_INT 32
36195: PPUSH
36196: LD_VAR 0 1
36200: PPUSH
36201: CALL_OW 321
36205: PUSH
36206: LD_INT 2
36208: EQUAL
36209: ST_TO_ADDR
36210: GO 36528
36212: LD_INT 20
36214: DOUBLE
36215: EQUAL
36216: IFTRUE 36220
36218: GO 36245
36220: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
36221: LD_ADDR_VAR 0 3
36225: PUSH
36226: LD_INT 6
36228: PPUSH
36229: LD_VAR 0 1
36233: PPUSH
36234: CALL_OW 321
36238: PUSH
36239: LD_INT 2
36241: EQUAL
36242: ST_TO_ADDR
36243: GO 36528
36245: LD_INT 22
36247: DOUBLE
36248: EQUAL
36249: IFTRUE 36259
36251: LD_INT 36
36253: DOUBLE
36254: EQUAL
36255: IFTRUE 36259
36257: GO 36284
36259: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
36260: LD_ADDR_VAR 0 3
36264: PUSH
36265: LD_INT 15
36267: PPUSH
36268: LD_VAR 0 1
36272: PPUSH
36273: CALL_OW 321
36277: PUSH
36278: LD_INT 2
36280: EQUAL
36281: ST_TO_ADDR
36282: GO 36528
36284: LD_INT 30
36286: DOUBLE
36287: EQUAL
36288: IFTRUE 36292
36290: GO 36317
36292: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
36293: LD_ADDR_VAR 0 3
36297: PUSH
36298: LD_INT 20
36300: PPUSH
36301: LD_VAR 0 1
36305: PPUSH
36306: CALL_OW 321
36310: PUSH
36311: LD_INT 2
36313: EQUAL
36314: ST_TO_ADDR
36315: GO 36528
36317: LD_INT 28
36319: DOUBLE
36320: EQUAL
36321: IFTRUE 36331
36323: LD_INT 21
36325: DOUBLE
36326: EQUAL
36327: IFTRUE 36331
36329: GO 36356
36331: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
36332: LD_ADDR_VAR 0 3
36336: PUSH
36337: LD_INT 21
36339: PPUSH
36340: LD_VAR 0 1
36344: PPUSH
36345: CALL_OW 321
36349: PUSH
36350: LD_INT 2
36352: EQUAL
36353: ST_TO_ADDR
36354: GO 36528
36356: LD_INT 16
36358: DOUBLE
36359: EQUAL
36360: IFTRUE 36364
36362: GO 36389
36364: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
36365: LD_ADDR_VAR 0 3
36369: PUSH
36370: LD_INT 84
36372: PPUSH
36373: LD_VAR 0 1
36377: PPUSH
36378: CALL_OW 321
36382: PUSH
36383: LD_INT 2
36385: EQUAL
36386: ST_TO_ADDR
36387: GO 36528
36389: LD_INT 19
36391: DOUBLE
36392: EQUAL
36393: IFTRUE 36403
36395: LD_INT 23
36397: DOUBLE
36398: EQUAL
36399: IFTRUE 36403
36401: GO 36428
36403: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
36404: LD_ADDR_VAR 0 3
36408: PUSH
36409: LD_INT 83
36411: PPUSH
36412: LD_VAR 0 1
36416: PPUSH
36417: CALL_OW 321
36421: PUSH
36422: LD_INT 2
36424: EQUAL
36425: ST_TO_ADDR
36426: GO 36528
36428: LD_INT 17
36430: DOUBLE
36431: EQUAL
36432: IFTRUE 36436
36434: GO 36461
36436: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
36437: LD_ADDR_VAR 0 3
36441: PUSH
36442: LD_INT 39
36444: PPUSH
36445: LD_VAR 0 1
36449: PPUSH
36450: CALL_OW 321
36454: PUSH
36455: LD_INT 2
36457: EQUAL
36458: ST_TO_ADDR
36459: GO 36528
36461: LD_INT 18
36463: DOUBLE
36464: EQUAL
36465: IFTRUE 36469
36467: GO 36494
36469: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
36470: LD_ADDR_VAR 0 3
36474: PUSH
36475: LD_INT 40
36477: PPUSH
36478: LD_VAR 0 1
36482: PPUSH
36483: CALL_OW 321
36487: PUSH
36488: LD_INT 2
36490: EQUAL
36491: ST_TO_ADDR
36492: GO 36528
36494: LD_INT 27
36496: DOUBLE
36497: EQUAL
36498: IFTRUE 36502
36500: GO 36527
36502: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
36503: LD_ADDR_VAR 0 3
36507: PUSH
36508: LD_INT 35
36510: PPUSH
36511: LD_VAR 0 1
36515: PPUSH
36516: CALL_OW 321
36520: PUSH
36521: LD_INT 2
36523: EQUAL
36524: ST_TO_ADDR
36525: GO 36528
36527: POP
// end ;
36528: LD_VAR 0 3
36532: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
36533: LD_INT 0
36535: PPUSH
36536: PPUSH
36537: PPUSH
36538: PPUSH
36539: PPUSH
36540: PPUSH
36541: PPUSH
36542: PPUSH
36543: PPUSH
36544: PPUSH
36545: PPUSH
// result := false ;
36546: LD_ADDR_VAR 0 6
36550: PUSH
36551: LD_INT 0
36553: ST_TO_ADDR
// if btype = b_depot then
36554: LD_VAR 0 2
36558: PUSH
36559: LD_INT 0
36561: EQUAL
36562: IFFALSE 36574
// begin result := true ;
36564: LD_ADDR_VAR 0 6
36568: PUSH
36569: LD_INT 1
36571: ST_TO_ADDR
// exit ;
36572: GO 37400
// end ; if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
36574: LD_VAR 0 1
36578: NOT
36579: PUSH
36580: LD_VAR 0 1
36584: PPUSH
36585: CALL_OW 266
36589: PUSH
36590: LD_INT 0
36592: PUSH
36593: LD_INT 1
36595: PUSH
36596: EMPTY
36597: LIST
36598: LIST
36599: IN
36600: NOT
36601: OR
36602: PUSH
36603: LD_VAR 0 2
36607: NOT
36608: OR
36609: PUSH
36610: LD_VAR 0 5
36614: PUSH
36615: LD_INT 0
36617: PUSH
36618: LD_INT 1
36620: PUSH
36621: LD_INT 2
36623: PUSH
36624: LD_INT 3
36626: PUSH
36627: LD_INT 4
36629: PUSH
36630: LD_INT 5
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: LIST
36637: LIST
36638: LIST
36639: LIST
36640: IN
36641: NOT
36642: OR
36643: PUSH
36644: LD_VAR 0 3
36648: PPUSH
36649: LD_VAR 0 4
36653: PPUSH
36654: CALL_OW 488
36658: NOT
36659: OR
36660: IFFALSE 36664
// exit ;
36662: GO 37400
// side := GetSide ( depot ) ;
36664: LD_ADDR_VAR 0 9
36668: PUSH
36669: LD_VAR 0 1
36673: PPUSH
36674: CALL_OW 255
36678: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
36679: LD_VAR 0 9
36683: PPUSH
36684: LD_VAR 0 2
36688: PPUSH
36689: CALL 36157 0 2
36693: NOT
36694: IFFALSE 36698
// exit ;
36696: GO 37400
// pom := GetBase ( depot ) ;
36698: LD_ADDR_VAR 0 10
36702: PUSH
36703: LD_VAR 0 1
36707: PPUSH
36708: CALL_OW 274
36712: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
36713: LD_ADDR_VAR 0 11
36717: PUSH
36718: LD_VAR 0 2
36722: PPUSH
36723: LD_VAR 0 1
36727: PPUSH
36728: CALL_OW 248
36732: PPUSH
36733: CALL_OW 450
36737: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
36738: LD_VAR 0 10
36742: PPUSH
36743: LD_INT 1
36745: PPUSH
36746: CALL_OW 275
36750: PUSH
36751: LD_VAR 0 11
36755: PUSH
36756: LD_INT 1
36758: ARRAY
36759: GREATEREQUAL
36760: PUSH
36761: LD_VAR 0 10
36765: PPUSH
36766: LD_INT 2
36768: PPUSH
36769: CALL_OW 275
36773: PUSH
36774: LD_VAR 0 11
36778: PUSH
36779: LD_INT 2
36781: ARRAY
36782: GREATEREQUAL
36783: AND
36784: PUSH
36785: LD_VAR 0 10
36789: PPUSH
36790: LD_INT 3
36792: PPUSH
36793: CALL_OW 275
36797: PUSH
36798: LD_VAR 0 11
36802: PUSH
36803: LD_INT 3
36805: ARRAY
36806: GREATEREQUAL
36807: AND
36808: NOT
36809: IFFALSE 36813
// exit ;
36811: GO 37400
// if GetBType ( depot ) = b_depot then
36813: LD_VAR 0 1
36817: PPUSH
36818: CALL_OW 266
36822: PUSH
36823: LD_INT 0
36825: EQUAL
36826: IFFALSE 36838
// dist := 28 else
36828: LD_ADDR_VAR 0 14
36832: PUSH
36833: LD_INT 28
36835: ST_TO_ADDR
36836: GO 36846
// dist := 36 ;
36838: LD_ADDR_VAR 0 14
36842: PUSH
36843: LD_INT 36
36845: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
36846: LD_VAR 0 1
36850: PPUSH
36851: LD_VAR 0 3
36855: PPUSH
36856: LD_VAR 0 4
36860: PPUSH
36861: CALL_OW 297
36865: PUSH
36866: LD_VAR 0 14
36870: GREATER
36871: IFFALSE 36875
// exit ;
36873: GO 37400
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
36875: LD_ADDR_VAR 0 12
36879: PUSH
36880: LD_VAR 0 2
36884: PPUSH
36885: LD_VAR 0 3
36889: PPUSH
36890: LD_VAR 0 4
36894: PPUSH
36895: LD_VAR 0 5
36899: PPUSH
36900: LD_VAR 0 1
36904: PPUSH
36905: CALL_OW 248
36909: PPUSH
36910: LD_INT 0
36912: PPUSH
36913: CALL 37405 0 6
36917: ST_TO_ADDR
// if not hexes then
36918: LD_VAR 0 12
36922: NOT
36923: IFFALSE 36927
// exit ;
36925: GO 37400
// hex := GetHexInfo ( x , y ) ;
36927: LD_ADDR_VAR 0 15
36931: PUSH
36932: LD_VAR 0 3
36936: PPUSH
36937: LD_VAR 0 4
36941: PPUSH
36942: CALL_OW 546
36946: ST_TO_ADDR
// if hex [ 1 ] then
36947: LD_VAR 0 15
36951: PUSH
36952: LD_INT 1
36954: ARRAY
36955: IFFALSE 36959
// exit ;
36957: GO 37400
// height := hex [ 2 ] ;
36959: LD_ADDR_VAR 0 13
36963: PUSH
36964: LD_VAR 0 15
36968: PUSH
36969: LD_INT 2
36971: ARRAY
36972: ST_TO_ADDR
// for i = 1 to hexes do
36973: LD_ADDR_VAR 0 7
36977: PUSH
36978: DOUBLE
36979: LD_INT 1
36981: DEC
36982: ST_TO_ADDR
36983: LD_VAR 0 12
36987: PUSH
36988: FOR_TO
36989: IFFALSE 37319
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
36991: LD_VAR 0 12
36995: PUSH
36996: LD_VAR 0 7
37000: ARRAY
37001: PUSH
37002: LD_INT 1
37004: ARRAY
37005: PPUSH
37006: LD_VAR 0 12
37010: PUSH
37011: LD_VAR 0 7
37015: ARRAY
37016: PUSH
37017: LD_INT 2
37019: ARRAY
37020: PPUSH
37021: CALL_OW 488
37025: NOT
37026: PUSH
37027: LD_VAR 0 12
37031: PUSH
37032: LD_VAR 0 7
37036: ARRAY
37037: PUSH
37038: LD_INT 1
37040: ARRAY
37041: PPUSH
37042: LD_VAR 0 12
37046: PUSH
37047: LD_VAR 0 7
37051: ARRAY
37052: PUSH
37053: LD_INT 2
37055: ARRAY
37056: PPUSH
37057: CALL_OW 428
37061: PUSH
37062: LD_INT 0
37064: GREATER
37065: OR
37066: PUSH
37067: LD_VAR 0 12
37071: PUSH
37072: LD_VAR 0 7
37076: ARRAY
37077: PUSH
37078: LD_INT 1
37080: ARRAY
37081: PPUSH
37082: LD_VAR 0 12
37086: PUSH
37087: LD_VAR 0 7
37091: ARRAY
37092: PUSH
37093: LD_INT 2
37095: ARRAY
37096: PPUSH
37097: CALL_OW 351
37101: OR
37102: IFFALSE 37108
// exit ;
37104: POP
37105: POP
37106: GO 37400
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
37108: LD_ADDR_VAR 0 8
37112: PUSH
37113: LD_VAR 0 12
37117: PUSH
37118: LD_VAR 0 7
37122: ARRAY
37123: PUSH
37124: LD_INT 1
37126: ARRAY
37127: PPUSH
37128: LD_VAR 0 12
37132: PUSH
37133: LD_VAR 0 7
37137: ARRAY
37138: PUSH
37139: LD_INT 2
37141: ARRAY
37142: PPUSH
37143: CALL_OW 546
37147: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
37148: LD_VAR 0 8
37152: PUSH
37153: LD_INT 1
37155: ARRAY
37156: PUSH
37157: LD_VAR 0 8
37161: PUSH
37162: LD_INT 2
37164: ARRAY
37165: PUSH
37166: LD_VAR 0 13
37170: PUSH
37171: LD_INT 2
37173: PLUS
37174: GREATER
37175: OR
37176: PUSH
37177: LD_VAR 0 8
37181: PUSH
37182: LD_INT 2
37184: ARRAY
37185: PUSH
37186: LD_VAR 0 13
37190: PUSH
37191: LD_INT 2
37193: MINUS
37194: LESS
37195: OR
37196: PUSH
37197: LD_VAR 0 8
37201: PUSH
37202: LD_INT 3
37204: ARRAY
37205: PUSH
37206: LD_INT 0
37208: PUSH
37209: LD_INT 8
37211: PUSH
37212: LD_INT 9
37214: PUSH
37215: LD_INT 10
37217: PUSH
37218: LD_INT 11
37220: PUSH
37221: LD_INT 12
37223: PUSH
37224: LD_INT 13
37226: PUSH
37227: LD_INT 16
37229: PUSH
37230: LD_INT 17
37232: PUSH
37233: LD_INT 18
37235: PUSH
37236: LD_INT 19
37238: PUSH
37239: LD_INT 20
37241: PUSH
37242: LD_INT 21
37244: PUSH
37245: EMPTY
37246: LIST
37247: LIST
37248: LIST
37249: LIST
37250: LIST
37251: LIST
37252: LIST
37253: LIST
37254: LIST
37255: LIST
37256: LIST
37257: LIST
37258: LIST
37259: IN
37260: NOT
37261: OR
37262: PUSH
37263: LD_VAR 0 8
37267: PUSH
37268: LD_INT 5
37270: ARRAY
37271: NOT
37272: OR
37273: PUSH
37274: LD_VAR 0 8
37278: PUSH
37279: LD_INT 6
37281: ARRAY
37282: PUSH
37283: LD_INT 1
37285: PUSH
37286: LD_INT 2
37288: PUSH
37289: LD_INT 7
37291: PUSH
37292: LD_INT 9
37294: PUSH
37295: LD_INT 10
37297: PUSH
37298: LD_INT 11
37300: PUSH
37301: EMPTY
37302: LIST
37303: LIST
37304: LIST
37305: LIST
37306: LIST
37307: LIST
37308: IN
37309: NOT
37310: OR
37311: IFFALSE 37317
// exit ;
37313: POP
37314: POP
37315: GO 37400
// end ;
37317: GO 36988
37319: POP
37320: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
37321: LD_VAR 0 9
37325: PPUSH
37326: LD_VAR 0 3
37330: PPUSH
37331: LD_VAR 0 4
37335: PPUSH
37336: LD_INT 20
37338: PPUSH
37339: CALL 29323 0 4
37343: PUSH
37344: LD_INT 4
37346: ARRAY
37347: IFFALSE 37351
// exit ;
37349: GO 37400
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
37351: LD_VAR 0 2
37355: PUSH
37356: LD_INT 29
37358: PUSH
37359: LD_INT 30
37361: PUSH
37362: EMPTY
37363: LIST
37364: LIST
37365: IN
37366: PUSH
37367: LD_VAR 0 3
37371: PPUSH
37372: LD_VAR 0 4
37376: PPUSH
37377: LD_VAR 0 9
37381: PPUSH
37382: CALL_OW 440
37386: NOT
37387: AND
37388: IFFALSE 37392
// exit ;
37390: GO 37400
// result := true ;
37392: LD_ADDR_VAR 0 6
37396: PUSH
37397: LD_INT 1
37399: ST_TO_ADDR
// end ;
37400: LD_VAR 0 6
37404: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
37405: LD_INT 0
37407: PPUSH
37408: PPUSH
37409: PPUSH
37410: PPUSH
37411: PPUSH
37412: PPUSH
37413: PPUSH
37414: PPUSH
37415: PPUSH
37416: PPUSH
37417: PPUSH
37418: PPUSH
37419: PPUSH
37420: PPUSH
37421: PPUSH
37422: PPUSH
37423: PPUSH
37424: PPUSH
37425: PPUSH
37426: PPUSH
37427: PPUSH
37428: PPUSH
37429: PPUSH
37430: PPUSH
37431: PPUSH
37432: PPUSH
37433: PPUSH
37434: PPUSH
37435: PPUSH
37436: PPUSH
37437: PPUSH
37438: PPUSH
37439: PPUSH
37440: PPUSH
37441: PPUSH
37442: PPUSH
37443: PPUSH
37444: PPUSH
37445: PPUSH
37446: PPUSH
37447: PPUSH
37448: PPUSH
37449: PPUSH
37450: PPUSH
37451: PPUSH
37452: PPUSH
37453: PPUSH
37454: PPUSH
37455: PPUSH
37456: PPUSH
37457: PPUSH
37458: PPUSH
37459: PPUSH
37460: PPUSH
37461: PPUSH
37462: PPUSH
37463: PPUSH
37464: PPUSH
// result = [ ] ;
37465: LD_ADDR_VAR 0 7
37469: PUSH
37470: EMPTY
37471: ST_TO_ADDR
// temp_list = [ ] ;
37472: LD_ADDR_VAR 0 9
37476: PUSH
37477: EMPTY
37478: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
37479: LD_VAR 0 4
37483: PUSH
37484: LD_INT 0
37486: PUSH
37487: LD_INT 1
37489: PUSH
37490: LD_INT 2
37492: PUSH
37493: LD_INT 3
37495: PUSH
37496: LD_INT 4
37498: PUSH
37499: LD_INT 5
37501: PUSH
37502: EMPTY
37503: LIST
37504: LIST
37505: LIST
37506: LIST
37507: LIST
37508: LIST
37509: IN
37510: NOT
37511: PUSH
37512: LD_VAR 0 1
37516: PUSH
37517: LD_INT 0
37519: PUSH
37520: LD_INT 1
37522: PUSH
37523: EMPTY
37524: LIST
37525: LIST
37526: IN
37527: PUSH
37528: LD_VAR 0 5
37532: PUSH
37533: LD_INT 1
37535: PUSH
37536: LD_INT 2
37538: PUSH
37539: LD_INT 3
37541: PUSH
37542: EMPTY
37543: LIST
37544: LIST
37545: LIST
37546: IN
37547: NOT
37548: AND
37549: OR
37550: IFFALSE 37554
// exit ;
37552: GO 55945
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
37554: LD_VAR 0 1
37558: PUSH
37559: LD_INT 6
37561: PUSH
37562: LD_INT 7
37564: PUSH
37565: LD_INT 8
37567: PUSH
37568: LD_INT 13
37570: PUSH
37571: LD_INT 12
37573: PUSH
37574: LD_INT 15
37576: PUSH
37577: LD_INT 11
37579: PUSH
37580: LD_INT 14
37582: PUSH
37583: LD_INT 10
37585: PUSH
37586: EMPTY
37587: LIST
37588: LIST
37589: LIST
37590: LIST
37591: LIST
37592: LIST
37593: LIST
37594: LIST
37595: LIST
37596: IN
37597: IFFALSE 37607
// btype = b_lab ;
37599: LD_ADDR_VAR 0 1
37603: PUSH
37604: LD_INT 6
37606: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
37607: LD_VAR 0 6
37611: PUSH
37612: LD_INT 0
37614: PUSH
37615: LD_INT 1
37617: PUSH
37618: LD_INT 2
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: LIST
37625: IN
37626: NOT
37627: PUSH
37628: LD_VAR 0 1
37632: PUSH
37633: LD_INT 0
37635: PUSH
37636: LD_INT 1
37638: PUSH
37639: LD_INT 2
37641: PUSH
37642: LD_INT 3
37644: PUSH
37645: LD_INT 6
37647: PUSH
37648: LD_INT 36
37650: PUSH
37651: LD_INT 4
37653: PUSH
37654: LD_INT 5
37656: PUSH
37657: LD_INT 31
37659: PUSH
37660: LD_INT 32
37662: PUSH
37663: LD_INT 33
37665: PUSH
37666: EMPTY
37667: LIST
37668: LIST
37669: LIST
37670: LIST
37671: LIST
37672: LIST
37673: LIST
37674: LIST
37675: LIST
37676: LIST
37677: LIST
37678: IN
37679: NOT
37680: PUSH
37681: LD_VAR 0 6
37685: PUSH
37686: LD_INT 1
37688: EQUAL
37689: AND
37690: OR
37691: PUSH
37692: LD_VAR 0 1
37696: PUSH
37697: LD_INT 2
37699: PUSH
37700: LD_INT 3
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: IN
37707: NOT
37708: PUSH
37709: LD_VAR 0 6
37713: PUSH
37714: LD_INT 2
37716: EQUAL
37717: AND
37718: OR
37719: IFFALSE 37729
// mode = 0 ;
37721: LD_ADDR_VAR 0 6
37725: PUSH
37726: LD_INT 0
37728: ST_TO_ADDR
// case mode of 0 :
37729: LD_VAR 0 6
37733: PUSH
37734: LD_INT 0
37736: DOUBLE
37737: EQUAL
37738: IFTRUE 37742
37740: GO 49195
37742: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37743: LD_ADDR_VAR 0 11
37747: PUSH
37748: LD_INT 0
37750: PUSH
37751: LD_INT 0
37753: PUSH
37754: EMPTY
37755: LIST
37756: LIST
37757: PUSH
37758: LD_INT 0
37760: PUSH
37761: LD_INT 1
37763: NEG
37764: PUSH
37765: EMPTY
37766: LIST
37767: LIST
37768: PUSH
37769: LD_INT 1
37771: PUSH
37772: LD_INT 0
37774: PUSH
37775: EMPTY
37776: LIST
37777: LIST
37778: PUSH
37779: LD_INT 1
37781: PUSH
37782: LD_INT 1
37784: PUSH
37785: EMPTY
37786: LIST
37787: LIST
37788: PUSH
37789: LD_INT 0
37791: PUSH
37792: LD_INT 1
37794: PUSH
37795: EMPTY
37796: LIST
37797: LIST
37798: PUSH
37799: LD_INT 1
37801: NEG
37802: PUSH
37803: LD_INT 0
37805: PUSH
37806: EMPTY
37807: LIST
37808: LIST
37809: PUSH
37810: LD_INT 1
37812: NEG
37813: PUSH
37814: LD_INT 1
37816: NEG
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: PUSH
37822: LD_INT 1
37824: NEG
37825: PUSH
37826: LD_INT 2
37828: NEG
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: PUSH
37834: LD_INT 0
37836: PUSH
37837: LD_INT 2
37839: NEG
37840: PUSH
37841: EMPTY
37842: LIST
37843: LIST
37844: PUSH
37845: LD_INT 1
37847: PUSH
37848: LD_INT 1
37850: NEG
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: LD_INT 1
37858: PUSH
37859: LD_INT 2
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: LD_INT 0
37868: PUSH
37869: LD_INT 2
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: LD_INT 1
37878: NEG
37879: PUSH
37880: LD_INT 1
37882: PUSH
37883: EMPTY
37884: LIST
37885: LIST
37886: PUSH
37887: LD_INT 1
37889: PUSH
37890: LD_INT 3
37892: PUSH
37893: EMPTY
37894: LIST
37895: LIST
37896: PUSH
37897: LD_INT 0
37899: PUSH
37900: LD_INT 3
37902: PUSH
37903: EMPTY
37904: LIST
37905: LIST
37906: PUSH
37907: LD_INT 1
37909: NEG
37910: PUSH
37911: LD_INT 2
37913: PUSH
37914: EMPTY
37915: LIST
37916: LIST
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37936: LD_ADDR_VAR 0 12
37940: PUSH
37941: LD_INT 0
37943: PUSH
37944: LD_INT 0
37946: PUSH
37947: EMPTY
37948: LIST
37949: LIST
37950: PUSH
37951: LD_INT 0
37953: PUSH
37954: LD_INT 1
37956: NEG
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: PUSH
37962: LD_INT 1
37964: PUSH
37965: LD_INT 0
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: LD_INT 1
37974: PUSH
37975: LD_INT 1
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: LD_INT 0
37984: PUSH
37985: LD_INT 1
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: LD_INT 1
37994: NEG
37995: PUSH
37996: LD_INT 0
37998: PUSH
37999: EMPTY
38000: LIST
38001: LIST
38002: PUSH
38003: LD_INT 1
38005: NEG
38006: PUSH
38007: LD_INT 1
38009: NEG
38010: PUSH
38011: EMPTY
38012: LIST
38013: LIST
38014: PUSH
38015: LD_INT 1
38017: PUSH
38018: LD_INT 1
38020: NEG
38021: PUSH
38022: EMPTY
38023: LIST
38024: LIST
38025: PUSH
38026: LD_INT 2
38028: PUSH
38029: LD_INT 0
38031: PUSH
38032: EMPTY
38033: LIST
38034: LIST
38035: PUSH
38036: LD_INT 2
38038: PUSH
38039: LD_INT 1
38041: PUSH
38042: EMPTY
38043: LIST
38044: LIST
38045: PUSH
38046: LD_INT 1
38048: NEG
38049: PUSH
38050: LD_INT 1
38052: PUSH
38053: EMPTY
38054: LIST
38055: LIST
38056: PUSH
38057: LD_INT 2
38059: NEG
38060: PUSH
38061: LD_INT 0
38063: PUSH
38064: EMPTY
38065: LIST
38066: LIST
38067: PUSH
38068: LD_INT 2
38070: NEG
38071: PUSH
38072: LD_INT 1
38074: NEG
38075: PUSH
38076: EMPTY
38077: LIST
38078: LIST
38079: PUSH
38080: LD_INT 2
38082: NEG
38083: PUSH
38084: LD_INT 1
38086: PUSH
38087: EMPTY
38088: LIST
38089: LIST
38090: PUSH
38091: LD_INT 3
38093: NEG
38094: PUSH
38095: LD_INT 0
38097: PUSH
38098: EMPTY
38099: LIST
38100: LIST
38101: PUSH
38102: LD_INT 3
38104: NEG
38105: PUSH
38106: LD_INT 1
38108: NEG
38109: PUSH
38110: EMPTY
38111: LIST
38112: LIST
38113: PUSH
38114: EMPTY
38115: LIST
38116: LIST
38117: LIST
38118: LIST
38119: LIST
38120: LIST
38121: LIST
38122: LIST
38123: LIST
38124: LIST
38125: LIST
38126: LIST
38127: LIST
38128: LIST
38129: LIST
38130: LIST
38131: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
38132: LD_ADDR_VAR 0 13
38136: PUSH
38137: LD_INT 0
38139: PUSH
38140: LD_INT 0
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: LD_INT 0
38149: PUSH
38150: LD_INT 1
38152: NEG
38153: PUSH
38154: EMPTY
38155: LIST
38156: LIST
38157: PUSH
38158: LD_INT 1
38160: PUSH
38161: LD_INT 0
38163: PUSH
38164: EMPTY
38165: LIST
38166: LIST
38167: PUSH
38168: LD_INT 1
38170: PUSH
38171: LD_INT 1
38173: PUSH
38174: EMPTY
38175: LIST
38176: LIST
38177: PUSH
38178: LD_INT 0
38180: PUSH
38181: LD_INT 1
38183: PUSH
38184: EMPTY
38185: LIST
38186: LIST
38187: PUSH
38188: LD_INT 1
38190: NEG
38191: PUSH
38192: LD_INT 0
38194: PUSH
38195: EMPTY
38196: LIST
38197: LIST
38198: PUSH
38199: LD_INT 1
38201: NEG
38202: PUSH
38203: LD_INT 1
38205: NEG
38206: PUSH
38207: EMPTY
38208: LIST
38209: LIST
38210: PUSH
38211: LD_INT 1
38213: NEG
38214: PUSH
38215: LD_INT 2
38217: NEG
38218: PUSH
38219: EMPTY
38220: LIST
38221: LIST
38222: PUSH
38223: LD_INT 2
38225: PUSH
38226: LD_INT 1
38228: PUSH
38229: EMPTY
38230: LIST
38231: LIST
38232: PUSH
38233: LD_INT 2
38235: PUSH
38236: LD_INT 2
38238: PUSH
38239: EMPTY
38240: LIST
38241: LIST
38242: PUSH
38243: LD_INT 1
38245: PUSH
38246: LD_INT 2
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: PUSH
38253: LD_INT 2
38255: NEG
38256: PUSH
38257: LD_INT 1
38259: NEG
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: PUSH
38265: LD_INT 2
38267: NEG
38268: PUSH
38269: LD_INT 2
38271: NEG
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: PUSH
38277: LD_INT 2
38279: NEG
38280: PUSH
38281: LD_INT 3
38283: NEG
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 3
38291: NEG
38292: PUSH
38293: LD_INT 2
38295: NEG
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 3
38303: NEG
38304: PUSH
38305: LD_INT 3
38307: NEG
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: PUSH
38313: EMPTY
38314: LIST
38315: LIST
38316: LIST
38317: LIST
38318: LIST
38319: LIST
38320: LIST
38321: LIST
38322: LIST
38323: LIST
38324: LIST
38325: LIST
38326: LIST
38327: LIST
38328: LIST
38329: LIST
38330: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
38331: LD_ADDR_VAR 0 14
38335: PUSH
38336: LD_INT 0
38338: PUSH
38339: LD_INT 0
38341: PUSH
38342: EMPTY
38343: LIST
38344: LIST
38345: PUSH
38346: LD_INT 0
38348: PUSH
38349: LD_INT 1
38351: NEG
38352: PUSH
38353: EMPTY
38354: LIST
38355: LIST
38356: PUSH
38357: LD_INT 1
38359: PUSH
38360: LD_INT 0
38362: PUSH
38363: EMPTY
38364: LIST
38365: LIST
38366: PUSH
38367: LD_INT 1
38369: PUSH
38370: LD_INT 1
38372: PUSH
38373: EMPTY
38374: LIST
38375: LIST
38376: PUSH
38377: LD_INT 0
38379: PUSH
38380: LD_INT 1
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: PUSH
38387: LD_INT 1
38389: NEG
38390: PUSH
38391: LD_INT 0
38393: PUSH
38394: EMPTY
38395: LIST
38396: LIST
38397: PUSH
38398: LD_INT 1
38400: NEG
38401: PUSH
38402: LD_INT 1
38404: NEG
38405: PUSH
38406: EMPTY
38407: LIST
38408: LIST
38409: PUSH
38410: LD_INT 1
38412: NEG
38413: PUSH
38414: LD_INT 2
38416: NEG
38417: PUSH
38418: EMPTY
38419: LIST
38420: LIST
38421: PUSH
38422: LD_INT 0
38424: PUSH
38425: LD_INT 2
38427: NEG
38428: PUSH
38429: EMPTY
38430: LIST
38431: LIST
38432: PUSH
38433: LD_INT 1
38435: PUSH
38436: LD_INT 1
38438: NEG
38439: PUSH
38440: EMPTY
38441: LIST
38442: LIST
38443: PUSH
38444: LD_INT 1
38446: PUSH
38447: LD_INT 2
38449: PUSH
38450: EMPTY
38451: LIST
38452: LIST
38453: PUSH
38454: LD_INT 0
38456: PUSH
38457: LD_INT 2
38459: PUSH
38460: EMPTY
38461: LIST
38462: LIST
38463: PUSH
38464: LD_INT 1
38466: NEG
38467: PUSH
38468: LD_INT 1
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: LD_INT 1
38477: NEG
38478: PUSH
38479: LD_INT 3
38481: NEG
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: LD_INT 0
38489: PUSH
38490: LD_INT 3
38492: NEG
38493: PUSH
38494: EMPTY
38495: LIST
38496: LIST
38497: PUSH
38498: LD_INT 1
38500: PUSH
38501: LD_INT 2
38503: NEG
38504: PUSH
38505: EMPTY
38506: LIST
38507: LIST
38508: PUSH
38509: EMPTY
38510: LIST
38511: LIST
38512: LIST
38513: LIST
38514: LIST
38515: LIST
38516: LIST
38517: LIST
38518: LIST
38519: LIST
38520: LIST
38521: LIST
38522: LIST
38523: LIST
38524: LIST
38525: LIST
38526: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
38527: LD_ADDR_VAR 0 15
38531: PUSH
38532: LD_INT 0
38534: PUSH
38535: LD_INT 0
38537: PUSH
38538: EMPTY
38539: LIST
38540: LIST
38541: PUSH
38542: LD_INT 0
38544: PUSH
38545: LD_INT 1
38547: NEG
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: LD_INT 1
38555: PUSH
38556: LD_INT 0
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: LD_INT 1
38565: PUSH
38566: LD_INT 1
38568: PUSH
38569: EMPTY
38570: LIST
38571: LIST
38572: PUSH
38573: LD_INT 0
38575: PUSH
38576: LD_INT 1
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PUSH
38583: LD_INT 1
38585: NEG
38586: PUSH
38587: LD_INT 0
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: PUSH
38594: LD_INT 1
38596: NEG
38597: PUSH
38598: LD_INT 1
38600: NEG
38601: PUSH
38602: EMPTY
38603: LIST
38604: LIST
38605: PUSH
38606: LD_INT 1
38608: PUSH
38609: LD_INT 1
38611: NEG
38612: PUSH
38613: EMPTY
38614: LIST
38615: LIST
38616: PUSH
38617: LD_INT 2
38619: PUSH
38620: LD_INT 0
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PUSH
38627: LD_INT 2
38629: PUSH
38630: LD_INT 1
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PUSH
38637: LD_INT 1
38639: NEG
38640: PUSH
38641: LD_INT 1
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: PUSH
38648: LD_INT 2
38650: NEG
38651: PUSH
38652: LD_INT 0
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_INT 2
38661: NEG
38662: PUSH
38663: LD_INT 1
38665: NEG
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: PUSH
38671: LD_INT 2
38673: PUSH
38674: LD_INT 1
38676: NEG
38677: PUSH
38678: EMPTY
38679: LIST
38680: LIST
38681: PUSH
38682: LD_INT 3
38684: PUSH
38685: LD_INT 0
38687: PUSH
38688: EMPTY
38689: LIST
38690: LIST
38691: PUSH
38692: LD_INT 3
38694: PUSH
38695: LD_INT 1
38697: PUSH
38698: EMPTY
38699: LIST
38700: LIST
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: LIST
38706: LIST
38707: LIST
38708: LIST
38709: LIST
38710: LIST
38711: LIST
38712: LIST
38713: LIST
38714: LIST
38715: LIST
38716: LIST
38717: LIST
38718: LIST
38719: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
38720: LD_ADDR_VAR 0 16
38724: PUSH
38725: LD_INT 0
38727: PUSH
38728: LD_INT 0
38730: PUSH
38731: EMPTY
38732: LIST
38733: LIST
38734: PUSH
38735: LD_INT 0
38737: PUSH
38738: LD_INT 1
38740: NEG
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PUSH
38746: LD_INT 1
38748: PUSH
38749: LD_INT 0
38751: PUSH
38752: EMPTY
38753: LIST
38754: LIST
38755: PUSH
38756: LD_INT 1
38758: PUSH
38759: LD_INT 1
38761: PUSH
38762: EMPTY
38763: LIST
38764: LIST
38765: PUSH
38766: LD_INT 0
38768: PUSH
38769: LD_INT 1
38771: PUSH
38772: EMPTY
38773: LIST
38774: LIST
38775: PUSH
38776: LD_INT 1
38778: NEG
38779: PUSH
38780: LD_INT 0
38782: PUSH
38783: EMPTY
38784: LIST
38785: LIST
38786: PUSH
38787: LD_INT 1
38789: NEG
38790: PUSH
38791: LD_INT 1
38793: NEG
38794: PUSH
38795: EMPTY
38796: LIST
38797: LIST
38798: PUSH
38799: LD_INT 1
38801: NEG
38802: PUSH
38803: LD_INT 2
38805: NEG
38806: PUSH
38807: EMPTY
38808: LIST
38809: LIST
38810: PUSH
38811: LD_INT 2
38813: PUSH
38814: LD_INT 1
38816: PUSH
38817: EMPTY
38818: LIST
38819: LIST
38820: PUSH
38821: LD_INT 2
38823: PUSH
38824: LD_INT 2
38826: PUSH
38827: EMPTY
38828: LIST
38829: LIST
38830: PUSH
38831: LD_INT 1
38833: PUSH
38834: LD_INT 2
38836: PUSH
38837: EMPTY
38838: LIST
38839: LIST
38840: PUSH
38841: LD_INT 2
38843: NEG
38844: PUSH
38845: LD_INT 1
38847: NEG
38848: PUSH
38849: EMPTY
38850: LIST
38851: LIST
38852: PUSH
38853: LD_INT 2
38855: NEG
38856: PUSH
38857: LD_INT 2
38859: NEG
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: LD_INT 3
38867: PUSH
38868: LD_INT 2
38870: PUSH
38871: EMPTY
38872: LIST
38873: LIST
38874: PUSH
38875: LD_INT 3
38877: PUSH
38878: LD_INT 3
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PUSH
38885: LD_INT 2
38887: PUSH
38888: LD_INT 3
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: EMPTY
38896: LIST
38897: LIST
38898: LIST
38899: LIST
38900: LIST
38901: LIST
38902: LIST
38903: LIST
38904: LIST
38905: LIST
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38913: LD_ADDR_VAR 0 17
38917: PUSH
38918: LD_INT 0
38920: PUSH
38921: LD_INT 0
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: LD_INT 0
38930: PUSH
38931: LD_INT 1
38933: NEG
38934: PUSH
38935: EMPTY
38936: LIST
38937: LIST
38938: PUSH
38939: LD_INT 1
38941: PUSH
38942: LD_INT 0
38944: PUSH
38945: EMPTY
38946: LIST
38947: LIST
38948: PUSH
38949: LD_INT 1
38951: PUSH
38952: LD_INT 1
38954: PUSH
38955: EMPTY
38956: LIST
38957: LIST
38958: PUSH
38959: LD_INT 0
38961: PUSH
38962: LD_INT 1
38964: PUSH
38965: EMPTY
38966: LIST
38967: LIST
38968: PUSH
38969: LD_INT 1
38971: NEG
38972: PUSH
38973: LD_INT 0
38975: PUSH
38976: EMPTY
38977: LIST
38978: LIST
38979: PUSH
38980: LD_INT 1
38982: NEG
38983: PUSH
38984: LD_INT 1
38986: NEG
38987: PUSH
38988: EMPTY
38989: LIST
38990: LIST
38991: PUSH
38992: LD_INT 1
38994: NEG
38995: PUSH
38996: LD_INT 2
38998: NEG
38999: PUSH
39000: EMPTY
39001: LIST
39002: LIST
39003: PUSH
39004: LD_INT 0
39006: PUSH
39007: LD_INT 2
39009: NEG
39010: PUSH
39011: EMPTY
39012: LIST
39013: LIST
39014: PUSH
39015: LD_INT 1
39017: PUSH
39018: LD_INT 1
39020: NEG
39021: PUSH
39022: EMPTY
39023: LIST
39024: LIST
39025: PUSH
39026: LD_INT 2
39028: PUSH
39029: LD_INT 0
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PUSH
39036: LD_INT 2
39038: PUSH
39039: LD_INT 1
39041: PUSH
39042: EMPTY
39043: LIST
39044: LIST
39045: PUSH
39046: LD_INT 2
39048: PUSH
39049: LD_INT 2
39051: PUSH
39052: EMPTY
39053: LIST
39054: LIST
39055: PUSH
39056: LD_INT 1
39058: PUSH
39059: LD_INT 2
39061: PUSH
39062: EMPTY
39063: LIST
39064: LIST
39065: PUSH
39066: LD_INT 0
39068: PUSH
39069: LD_INT 2
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PUSH
39076: LD_INT 1
39078: NEG
39079: PUSH
39080: LD_INT 1
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: PUSH
39087: LD_INT 2
39089: NEG
39090: PUSH
39091: LD_INT 0
39093: PUSH
39094: EMPTY
39095: LIST
39096: LIST
39097: PUSH
39098: LD_INT 2
39100: NEG
39101: PUSH
39102: LD_INT 1
39104: NEG
39105: PUSH
39106: EMPTY
39107: LIST
39108: LIST
39109: PUSH
39110: LD_INT 2
39112: NEG
39113: PUSH
39114: LD_INT 2
39116: NEG
39117: PUSH
39118: EMPTY
39119: LIST
39120: LIST
39121: PUSH
39122: EMPTY
39123: LIST
39124: LIST
39125: LIST
39126: LIST
39127: LIST
39128: LIST
39129: LIST
39130: LIST
39131: LIST
39132: LIST
39133: LIST
39134: LIST
39135: LIST
39136: LIST
39137: LIST
39138: LIST
39139: LIST
39140: LIST
39141: LIST
39142: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39143: LD_ADDR_VAR 0 18
39147: PUSH
39148: LD_INT 0
39150: PUSH
39151: LD_INT 0
39153: PUSH
39154: EMPTY
39155: LIST
39156: LIST
39157: PUSH
39158: LD_INT 0
39160: PUSH
39161: LD_INT 1
39163: NEG
39164: PUSH
39165: EMPTY
39166: LIST
39167: LIST
39168: PUSH
39169: LD_INT 1
39171: PUSH
39172: LD_INT 0
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: PUSH
39179: LD_INT 1
39181: PUSH
39182: LD_INT 1
39184: PUSH
39185: EMPTY
39186: LIST
39187: LIST
39188: PUSH
39189: LD_INT 0
39191: PUSH
39192: LD_INT 1
39194: PUSH
39195: EMPTY
39196: LIST
39197: LIST
39198: PUSH
39199: LD_INT 1
39201: NEG
39202: PUSH
39203: LD_INT 0
39205: PUSH
39206: EMPTY
39207: LIST
39208: LIST
39209: PUSH
39210: LD_INT 1
39212: NEG
39213: PUSH
39214: LD_INT 1
39216: NEG
39217: PUSH
39218: EMPTY
39219: LIST
39220: LIST
39221: PUSH
39222: LD_INT 1
39224: NEG
39225: PUSH
39226: LD_INT 2
39228: NEG
39229: PUSH
39230: EMPTY
39231: LIST
39232: LIST
39233: PUSH
39234: LD_INT 0
39236: PUSH
39237: LD_INT 2
39239: NEG
39240: PUSH
39241: EMPTY
39242: LIST
39243: LIST
39244: PUSH
39245: LD_INT 1
39247: PUSH
39248: LD_INT 1
39250: NEG
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: PUSH
39256: LD_INT 2
39258: PUSH
39259: LD_INT 0
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: PUSH
39266: LD_INT 2
39268: PUSH
39269: LD_INT 1
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: PUSH
39276: LD_INT 2
39278: PUSH
39279: LD_INT 2
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: PUSH
39286: LD_INT 1
39288: PUSH
39289: LD_INT 2
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 0
39298: PUSH
39299: LD_INT 2
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_INT 1
39308: NEG
39309: PUSH
39310: LD_INT 1
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: PUSH
39317: LD_INT 2
39319: NEG
39320: PUSH
39321: LD_INT 0
39323: PUSH
39324: EMPTY
39325: LIST
39326: LIST
39327: PUSH
39328: LD_INT 2
39330: NEG
39331: PUSH
39332: LD_INT 1
39334: NEG
39335: PUSH
39336: EMPTY
39337: LIST
39338: LIST
39339: PUSH
39340: LD_INT 2
39342: NEG
39343: PUSH
39344: LD_INT 2
39346: NEG
39347: PUSH
39348: EMPTY
39349: LIST
39350: LIST
39351: PUSH
39352: EMPTY
39353: LIST
39354: LIST
39355: LIST
39356: LIST
39357: LIST
39358: LIST
39359: LIST
39360: LIST
39361: LIST
39362: LIST
39363: LIST
39364: LIST
39365: LIST
39366: LIST
39367: LIST
39368: LIST
39369: LIST
39370: LIST
39371: LIST
39372: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39373: LD_ADDR_VAR 0 19
39377: PUSH
39378: LD_INT 0
39380: PUSH
39381: LD_INT 0
39383: PUSH
39384: EMPTY
39385: LIST
39386: LIST
39387: PUSH
39388: LD_INT 0
39390: PUSH
39391: LD_INT 1
39393: NEG
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: LD_INT 1
39401: PUSH
39402: LD_INT 0
39404: PUSH
39405: EMPTY
39406: LIST
39407: LIST
39408: PUSH
39409: LD_INT 1
39411: PUSH
39412: LD_INT 1
39414: PUSH
39415: EMPTY
39416: LIST
39417: LIST
39418: PUSH
39419: LD_INT 0
39421: PUSH
39422: LD_INT 1
39424: PUSH
39425: EMPTY
39426: LIST
39427: LIST
39428: PUSH
39429: LD_INT 1
39431: NEG
39432: PUSH
39433: LD_INT 0
39435: PUSH
39436: EMPTY
39437: LIST
39438: LIST
39439: PUSH
39440: LD_INT 1
39442: NEG
39443: PUSH
39444: LD_INT 1
39446: NEG
39447: PUSH
39448: EMPTY
39449: LIST
39450: LIST
39451: PUSH
39452: LD_INT 1
39454: NEG
39455: PUSH
39456: LD_INT 2
39458: NEG
39459: PUSH
39460: EMPTY
39461: LIST
39462: LIST
39463: PUSH
39464: LD_INT 0
39466: PUSH
39467: LD_INT 2
39469: NEG
39470: PUSH
39471: EMPTY
39472: LIST
39473: LIST
39474: PUSH
39475: LD_INT 1
39477: PUSH
39478: LD_INT 1
39480: NEG
39481: PUSH
39482: EMPTY
39483: LIST
39484: LIST
39485: PUSH
39486: LD_INT 2
39488: PUSH
39489: LD_INT 0
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: PUSH
39496: LD_INT 2
39498: PUSH
39499: LD_INT 1
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: PUSH
39506: LD_INT 2
39508: PUSH
39509: LD_INT 2
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: PUSH
39516: LD_INT 1
39518: PUSH
39519: LD_INT 2
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: PUSH
39526: LD_INT 0
39528: PUSH
39529: LD_INT 2
39531: PUSH
39532: EMPTY
39533: LIST
39534: LIST
39535: PUSH
39536: LD_INT 1
39538: NEG
39539: PUSH
39540: LD_INT 1
39542: PUSH
39543: EMPTY
39544: LIST
39545: LIST
39546: PUSH
39547: LD_INT 2
39549: NEG
39550: PUSH
39551: LD_INT 0
39553: PUSH
39554: EMPTY
39555: LIST
39556: LIST
39557: PUSH
39558: LD_INT 2
39560: NEG
39561: PUSH
39562: LD_INT 1
39564: NEG
39565: PUSH
39566: EMPTY
39567: LIST
39568: LIST
39569: PUSH
39570: LD_INT 2
39572: NEG
39573: PUSH
39574: LD_INT 2
39576: NEG
39577: PUSH
39578: EMPTY
39579: LIST
39580: LIST
39581: PUSH
39582: EMPTY
39583: LIST
39584: LIST
39585: LIST
39586: LIST
39587: LIST
39588: LIST
39589: LIST
39590: LIST
39591: LIST
39592: LIST
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39603: LD_ADDR_VAR 0 20
39607: PUSH
39608: LD_INT 0
39610: PUSH
39611: LD_INT 0
39613: PUSH
39614: EMPTY
39615: LIST
39616: LIST
39617: PUSH
39618: LD_INT 0
39620: PUSH
39621: LD_INT 1
39623: NEG
39624: PUSH
39625: EMPTY
39626: LIST
39627: LIST
39628: PUSH
39629: LD_INT 1
39631: PUSH
39632: LD_INT 0
39634: PUSH
39635: EMPTY
39636: LIST
39637: LIST
39638: PUSH
39639: LD_INT 1
39641: PUSH
39642: LD_INT 1
39644: PUSH
39645: EMPTY
39646: LIST
39647: LIST
39648: PUSH
39649: LD_INT 0
39651: PUSH
39652: LD_INT 1
39654: PUSH
39655: EMPTY
39656: LIST
39657: LIST
39658: PUSH
39659: LD_INT 1
39661: NEG
39662: PUSH
39663: LD_INT 0
39665: PUSH
39666: EMPTY
39667: LIST
39668: LIST
39669: PUSH
39670: LD_INT 1
39672: NEG
39673: PUSH
39674: LD_INT 1
39676: NEG
39677: PUSH
39678: EMPTY
39679: LIST
39680: LIST
39681: PUSH
39682: LD_INT 1
39684: NEG
39685: PUSH
39686: LD_INT 2
39688: NEG
39689: PUSH
39690: EMPTY
39691: LIST
39692: LIST
39693: PUSH
39694: LD_INT 0
39696: PUSH
39697: LD_INT 2
39699: NEG
39700: PUSH
39701: EMPTY
39702: LIST
39703: LIST
39704: PUSH
39705: LD_INT 1
39707: PUSH
39708: LD_INT 1
39710: NEG
39711: PUSH
39712: EMPTY
39713: LIST
39714: LIST
39715: PUSH
39716: LD_INT 2
39718: PUSH
39719: LD_INT 0
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: PUSH
39726: LD_INT 2
39728: PUSH
39729: LD_INT 1
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: PUSH
39736: LD_INT 2
39738: PUSH
39739: LD_INT 2
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PUSH
39746: LD_INT 1
39748: PUSH
39749: LD_INT 2
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: LD_INT 0
39758: PUSH
39759: LD_INT 2
39761: PUSH
39762: EMPTY
39763: LIST
39764: LIST
39765: PUSH
39766: LD_INT 1
39768: NEG
39769: PUSH
39770: LD_INT 1
39772: PUSH
39773: EMPTY
39774: LIST
39775: LIST
39776: PUSH
39777: LD_INT 2
39779: NEG
39780: PUSH
39781: LD_INT 0
39783: PUSH
39784: EMPTY
39785: LIST
39786: LIST
39787: PUSH
39788: LD_INT 2
39790: NEG
39791: PUSH
39792: LD_INT 1
39794: NEG
39795: PUSH
39796: EMPTY
39797: LIST
39798: LIST
39799: PUSH
39800: LD_INT 2
39802: NEG
39803: PUSH
39804: LD_INT 2
39806: NEG
39807: PUSH
39808: EMPTY
39809: LIST
39810: LIST
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: LIST
39825: LIST
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39833: LD_ADDR_VAR 0 21
39837: PUSH
39838: LD_INT 0
39840: PUSH
39841: LD_INT 0
39843: PUSH
39844: EMPTY
39845: LIST
39846: LIST
39847: PUSH
39848: LD_INT 0
39850: PUSH
39851: LD_INT 1
39853: NEG
39854: PUSH
39855: EMPTY
39856: LIST
39857: LIST
39858: PUSH
39859: LD_INT 1
39861: PUSH
39862: LD_INT 0
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: PUSH
39869: LD_INT 1
39871: PUSH
39872: LD_INT 1
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: LD_INT 0
39881: PUSH
39882: LD_INT 1
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: PUSH
39889: LD_INT 1
39891: NEG
39892: PUSH
39893: LD_INT 0
39895: PUSH
39896: EMPTY
39897: LIST
39898: LIST
39899: PUSH
39900: LD_INT 1
39902: NEG
39903: PUSH
39904: LD_INT 1
39906: NEG
39907: PUSH
39908: EMPTY
39909: LIST
39910: LIST
39911: PUSH
39912: LD_INT 1
39914: NEG
39915: PUSH
39916: LD_INT 2
39918: NEG
39919: PUSH
39920: EMPTY
39921: LIST
39922: LIST
39923: PUSH
39924: LD_INT 0
39926: PUSH
39927: LD_INT 2
39929: NEG
39930: PUSH
39931: EMPTY
39932: LIST
39933: LIST
39934: PUSH
39935: LD_INT 1
39937: PUSH
39938: LD_INT 1
39940: NEG
39941: PUSH
39942: EMPTY
39943: LIST
39944: LIST
39945: PUSH
39946: LD_INT 2
39948: PUSH
39949: LD_INT 0
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: PUSH
39956: LD_INT 2
39958: PUSH
39959: LD_INT 1
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 2
39968: PUSH
39969: LD_INT 2
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: PUSH
39976: LD_INT 1
39978: PUSH
39979: LD_INT 2
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: LD_INT 0
39988: PUSH
39989: LD_INT 2
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: PUSH
39996: LD_INT 1
39998: NEG
39999: PUSH
40000: LD_INT 1
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: LD_INT 2
40009: NEG
40010: PUSH
40011: LD_INT 0
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: PUSH
40018: LD_INT 2
40020: NEG
40021: PUSH
40022: LD_INT 1
40024: NEG
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: PUSH
40030: LD_INT 2
40032: NEG
40033: PUSH
40034: LD_INT 2
40036: NEG
40037: PUSH
40038: EMPTY
40039: LIST
40040: LIST
40041: PUSH
40042: EMPTY
40043: LIST
40044: LIST
40045: LIST
40046: LIST
40047: LIST
40048: LIST
40049: LIST
40050: LIST
40051: LIST
40052: LIST
40053: LIST
40054: LIST
40055: LIST
40056: LIST
40057: LIST
40058: LIST
40059: LIST
40060: LIST
40061: LIST
40062: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40063: LD_ADDR_VAR 0 22
40067: PUSH
40068: LD_INT 0
40070: PUSH
40071: LD_INT 0
40073: PUSH
40074: EMPTY
40075: LIST
40076: LIST
40077: PUSH
40078: LD_INT 0
40080: PUSH
40081: LD_INT 1
40083: NEG
40084: PUSH
40085: EMPTY
40086: LIST
40087: LIST
40088: PUSH
40089: LD_INT 1
40091: PUSH
40092: LD_INT 0
40094: PUSH
40095: EMPTY
40096: LIST
40097: LIST
40098: PUSH
40099: LD_INT 1
40101: PUSH
40102: LD_INT 1
40104: PUSH
40105: EMPTY
40106: LIST
40107: LIST
40108: PUSH
40109: LD_INT 0
40111: PUSH
40112: LD_INT 1
40114: PUSH
40115: EMPTY
40116: LIST
40117: LIST
40118: PUSH
40119: LD_INT 1
40121: NEG
40122: PUSH
40123: LD_INT 0
40125: PUSH
40126: EMPTY
40127: LIST
40128: LIST
40129: PUSH
40130: LD_INT 1
40132: NEG
40133: PUSH
40134: LD_INT 1
40136: NEG
40137: PUSH
40138: EMPTY
40139: LIST
40140: LIST
40141: PUSH
40142: LD_INT 1
40144: NEG
40145: PUSH
40146: LD_INT 2
40148: NEG
40149: PUSH
40150: EMPTY
40151: LIST
40152: LIST
40153: PUSH
40154: LD_INT 0
40156: PUSH
40157: LD_INT 2
40159: NEG
40160: PUSH
40161: EMPTY
40162: LIST
40163: LIST
40164: PUSH
40165: LD_INT 1
40167: PUSH
40168: LD_INT 1
40170: NEG
40171: PUSH
40172: EMPTY
40173: LIST
40174: LIST
40175: PUSH
40176: LD_INT 2
40178: PUSH
40179: LD_INT 0
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: PUSH
40186: LD_INT 2
40188: PUSH
40189: LD_INT 1
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: LD_INT 2
40198: PUSH
40199: LD_INT 2
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 1
40208: PUSH
40209: LD_INT 2
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: LD_INT 0
40218: PUSH
40219: LD_INT 2
40221: PUSH
40222: EMPTY
40223: LIST
40224: LIST
40225: PUSH
40226: LD_INT 1
40228: NEG
40229: PUSH
40230: LD_INT 1
40232: PUSH
40233: EMPTY
40234: LIST
40235: LIST
40236: PUSH
40237: LD_INT 2
40239: NEG
40240: PUSH
40241: LD_INT 0
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 2
40250: NEG
40251: PUSH
40252: LD_INT 1
40254: NEG
40255: PUSH
40256: EMPTY
40257: LIST
40258: LIST
40259: PUSH
40260: LD_INT 2
40262: NEG
40263: PUSH
40264: LD_INT 2
40266: NEG
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: LIST
40276: LIST
40277: LIST
40278: LIST
40279: LIST
40280: LIST
40281: LIST
40282: LIST
40283: LIST
40284: LIST
40285: LIST
40286: LIST
40287: LIST
40288: LIST
40289: LIST
40290: LIST
40291: LIST
40292: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
40293: LD_ADDR_VAR 0 23
40297: PUSH
40298: LD_INT 0
40300: PUSH
40301: LD_INT 0
40303: PUSH
40304: EMPTY
40305: LIST
40306: LIST
40307: PUSH
40308: LD_INT 0
40310: PUSH
40311: LD_INT 1
40313: NEG
40314: PUSH
40315: EMPTY
40316: LIST
40317: LIST
40318: PUSH
40319: LD_INT 1
40321: PUSH
40322: LD_INT 0
40324: PUSH
40325: EMPTY
40326: LIST
40327: LIST
40328: PUSH
40329: LD_INT 1
40331: PUSH
40332: LD_INT 1
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 0
40341: PUSH
40342: LD_INT 1
40344: PUSH
40345: EMPTY
40346: LIST
40347: LIST
40348: PUSH
40349: LD_INT 1
40351: NEG
40352: PUSH
40353: LD_INT 0
40355: PUSH
40356: EMPTY
40357: LIST
40358: LIST
40359: PUSH
40360: LD_INT 1
40362: NEG
40363: PUSH
40364: LD_INT 1
40366: NEG
40367: PUSH
40368: EMPTY
40369: LIST
40370: LIST
40371: PUSH
40372: LD_INT 1
40374: NEG
40375: PUSH
40376: LD_INT 2
40378: NEG
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: PUSH
40384: LD_INT 0
40386: PUSH
40387: LD_INT 2
40389: NEG
40390: PUSH
40391: EMPTY
40392: LIST
40393: LIST
40394: PUSH
40395: LD_INT 1
40397: PUSH
40398: LD_INT 1
40400: NEG
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: LD_INT 2
40408: PUSH
40409: LD_INT 0
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 2
40418: PUSH
40419: LD_INT 1
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PUSH
40426: LD_INT 2
40428: PUSH
40429: LD_INT 2
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 1
40438: PUSH
40439: LD_INT 2
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 0
40448: PUSH
40449: LD_INT 2
40451: PUSH
40452: EMPTY
40453: LIST
40454: LIST
40455: PUSH
40456: LD_INT 1
40458: NEG
40459: PUSH
40460: LD_INT 1
40462: PUSH
40463: EMPTY
40464: LIST
40465: LIST
40466: PUSH
40467: LD_INT 2
40469: NEG
40470: PUSH
40471: LD_INT 0
40473: PUSH
40474: EMPTY
40475: LIST
40476: LIST
40477: PUSH
40478: LD_INT 2
40480: NEG
40481: PUSH
40482: LD_INT 1
40484: NEG
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 2
40492: NEG
40493: PUSH
40494: LD_INT 2
40496: NEG
40497: PUSH
40498: EMPTY
40499: LIST
40500: LIST
40501: PUSH
40502: LD_INT 2
40504: NEG
40505: PUSH
40506: LD_INT 3
40508: NEG
40509: PUSH
40510: EMPTY
40511: LIST
40512: LIST
40513: PUSH
40514: LD_INT 1
40516: NEG
40517: PUSH
40518: LD_INT 3
40520: NEG
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: LD_INT 1
40528: PUSH
40529: LD_INT 2
40531: NEG
40532: PUSH
40533: EMPTY
40534: LIST
40535: LIST
40536: PUSH
40537: LD_INT 2
40539: PUSH
40540: LD_INT 1
40542: NEG
40543: PUSH
40544: EMPTY
40545: LIST
40546: LIST
40547: PUSH
40548: EMPTY
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: LIST
40554: LIST
40555: LIST
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: LIST
40566: LIST
40567: LIST
40568: LIST
40569: LIST
40570: LIST
40571: LIST
40572: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
40573: LD_ADDR_VAR 0 24
40577: PUSH
40578: LD_INT 0
40580: PUSH
40581: LD_INT 0
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: LD_INT 0
40590: PUSH
40591: LD_INT 1
40593: NEG
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: PUSH
40599: LD_INT 1
40601: PUSH
40602: LD_INT 0
40604: PUSH
40605: EMPTY
40606: LIST
40607: LIST
40608: PUSH
40609: LD_INT 1
40611: PUSH
40612: LD_INT 1
40614: PUSH
40615: EMPTY
40616: LIST
40617: LIST
40618: PUSH
40619: LD_INT 0
40621: PUSH
40622: LD_INT 1
40624: PUSH
40625: EMPTY
40626: LIST
40627: LIST
40628: PUSH
40629: LD_INT 1
40631: NEG
40632: PUSH
40633: LD_INT 0
40635: PUSH
40636: EMPTY
40637: LIST
40638: LIST
40639: PUSH
40640: LD_INT 1
40642: NEG
40643: PUSH
40644: LD_INT 1
40646: NEG
40647: PUSH
40648: EMPTY
40649: LIST
40650: LIST
40651: PUSH
40652: LD_INT 1
40654: NEG
40655: PUSH
40656: LD_INT 2
40658: NEG
40659: PUSH
40660: EMPTY
40661: LIST
40662: LIST
40663: PUSH
40664: LD_INT 0
40666: PUSH
40667: LD_INT 2
40669: NEG
40670: PUSH
40671: EMPTY
40672: LIST
40673: LIST
40674: PUSH
40675: LD_INT 1
40677: PUSH
40678: LD_INT 1
40680: NEG
40681: PUSH
40682: EMPTY
40683: LIST
40684: LIST
40685: PUSH
40686: LD_INT 2
40688: PUSH
40689: LD_INT 0
40691: PUSH
40692: EMPTY
40693: LIST
40694: LIST
40695: PUSH
40696: LD_INT 2
40698: PUSH
40699: LD_INT 1
40701: PUSH
40702: EMPTY
40703: LIST
40704: LIST
40705: PUSH
40706: LD_INT 2
40708: PUSH
40709: LD_INT 2
40711: PUSH
40712: EMPTY
40713: LIST
40714: LIST
40715: PUSH
40716: LD_INT 1
40718: PUSH
40719: LD_INT 2
40721: PUSH
40722: EMPTY
40723: LIST
40724: LIST
40725: PUSH
40726: LD_INT 0
40728: PUSH
40729: LD_INT 2
40731: PUSH
40732: EMPTY
40733: LIST
40734: LIST
40735: PUSH
40736: LD_INT 1
40738: NEG
40739: PUSH
40740: LD_INT 1
40742: PUSH
40743: EMPTY
40744: LIST
40745: LIST
40746: PUSH
40747: LD_INT 2
40749: NEG
40750: PUSH
40751: LD_INT 0
40753: PUSH
40754: EMPTY
40755: LIST
40756: LIST
40757: PUSH
40758: LD_INT 2
40760: NEG
40761: PUSH
40762: LD_INT 1
40764: NEG
40765: PUSH
40766: EMPTY
40767: LIST
40768: LIST
40769: PUSH
40770: LD_INT 2
40772: NEG
40773: PUSH
40774: LD_INT 2
40776: NEG
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PUSH
40782: LD_INT 1
40784: PUSH
40785: LD_INT 2
40787: NEG
40788: PUSH
40789: EMPTY
40790: LIST
40791: LIST
40792: PUSH
40793: LD_INT 2
40795: PUSH
40796: LD_INT 1
40798: NEG
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 3
40806: PUSH
40807: LD_INT 1
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 3
40816: PUSH
40817: LD_INT 2
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: EMPTY
40825: LIST
40826: LIST
40827: LIST
40828: LIST
40829: LIST
40830: LIST
40831: LIST
40832: LIST
40833: LIST
40834: LIST
40835: LIST
40836: LIST
40837: LIST
40838: LIST
40839: LIST
40840: LIST
40841: LIST
40842: LIST
40843: LIST
40844: LIST
40845: LIST
40846: LIST
40847: LIST
40848: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
40849: LD_ADDR_VAR 0 25
40853: PUSH
40854: LD_INT 0
40856: PUSH
40857: LD_INT 0
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: PUSH
40864: LD_INT 0
40866: PUSH
40867: LD_INT 1
40869: NEG
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: LD_INT 1
40877: PUSH
40878: LD_INT 0
40880: PUSH
40881: EMPTY
40882: LIST
40883: LIST
40884: PUSH
40885: LD_INT 1
40887: PUSH
40888: LD_INT 1
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: PUSH
40895: LD_INT 0
40897: PUSH
40898: LD_INT 1
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: PUSH
40905: LD_INT 1
40907: NEG
40908: PUSH
40909: LD_INT 0
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: PUSH
40916: LD_INT 1
40918: NEG
40919: PUSH
40920: LD_INT 1
40922: NEG
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: LD_INT 1
40930: NEG
40931: PUSH
40932: LD_INT 2
40934: NEG
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: PUSH
40940: LD_INT 0
40942: PUSH
40943: LD_INT 2
40945: NEG
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 1
40953: PUSH
40954: LD_INT 1
40956: NEG
40957: PUSH
40958: EMPTY
40959: LIST
40960: LIST
40961: PUSH
40962: LD_INT 2
40964: PUSH
40965: LD_INT 0
40967: PUSH
40968: EMPTY
40969: LIST
40970: LIST
40971: PUSH
40972: LD_INT 2
40974: PUSH
40975: LD_INT 1
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 2
40984: PUSH
40985: LD_INT 2
40987: PUSH
40988: EMPTY
40989: LIST
40990: LIST
40991: PUSH
40992: LD_INT 1
40994: PUSH
40995: LD_INT 2
40997: PUSH
40998: EMPTY
40999: LIST
41000: LIST
41001: PUSH
41002: LD_INT 0
41004: PUSH
41005: LD_INT 2
41007: PUSH
41008: EMPTY
41009: LIST
41010: LIST
41011: PUSH
41012: LD_INT 1
41014: NEG
41015: PUSH
41016: LD_INT 1
41018: PUSH
41019: EMPTY
41020: LIST
41021: LIST
41022: PUSH
41023: LD_INT 2
41025: NEG
41026: PUSH
41027: LD_INT 0
41029: PUSH
41030: EMPTY
41031: LIST
41032: LIST
41033: PUSH
41034: LD_INT 2
41036: NEG
41037: PUSH
41038: LD_INT 1
41040: NEG
41041: PUSH
41042: EMPTY
41043: LIST
41044: LIST
41045: PUSH
41046: LD_INT 2
41048: NEG
41049: PUSH
41050: LD_INT 2
41052: NEG
41053: PUSH
41054: EMPTY
41055: LIST
41056: LIST
41057: PUSH
41058: LD_INT 3
41060: PUSH
41061: LD_INT 1
41063: PUSH
41064: EMPTY
41065: LIST
41066: LIST
41067: PUSH
41068: LD_INT 3
41070: PUSH
41071: LD_INT 2
41073: PUSH
41074: EMPTY
41075: LIST
41076: LIST
41077: PUSH
41078: LD_INT 2
41080: PUSH
41081: LD_INT 3
41083: PUSH
41084: EMPTY
41085: LIST
41086: LIST
41087: PUSH
41088: LD_INT 1
41090: PUSH
41091: LD_INT 3
41093: PUSH
41094: EMPTY
41095: LIST
41096: LIST
41097: PUSH
41098: EMPTY
41099: LIST
41100: LIST
41101: LIST
41102: LIST
41103: LIST
41104: LIST
41105: LIST
41106: LIST
41107: LIST
41108: LIST
41109: LIST
41110: LIST
41111: LIST
41112: LIST
41113: LIST
41114: LIST
41115: LIST
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
41123: LD_ADDR_VAR 0 26
41127: PUSH
41128: LD_INT 0
41130: PUSH
41131: LD_INT 0
41133: PUSH
41134: EMPTY
41135: LIST
41136: LIST
41137: PUSH
41138: LD_INT 0
41140: PUSH
41141: LD_INT 1
41143: NEG
41144: PUSH
41145: EMPTY
41146: LIST
41147: LIST
41148: PUSH
41149: LD_INT 1
41151: PUSH
41152: LD_INT 0
41154: PUSH
41155: EMPTY
41156: LIST
41157: LIST
41158: PUSH
41159: LD_INT 1
41161: PUSH
41162: LD_INT 1
41164: PUSH
41165: EMPTY
41166: LIST
41167: LIST
41168: PUSH
41169: LD_INT 0
41171: PUSH
41172: LD_INT 1
41174: PUSH
41175: EMPTY
41176: LIST
41177: LIST
41178: PUSH
41179: LD_INT 1
41181: NEG
41182: PUSH
41183: LD_INT 0
41185: PUSH
41186: EMPTY
41187: LIST
41188: LIST
41189: PUSH
41190: LD_INT 1
41192: NEG
41193: PUSH
41194: LD_INT 1
41196: NEG
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: PUSH
41202: LD_INT 1
41204: NEG
41205: PUSH
41206: LD_INT 2
41208: NEG
41209: PUSH
41210: EMPTY
41211: LIST
41212: LIST
41213: PUSH
41214: LD_INT 0
41216: PUSH
41217: LD_INT 2
41219: NEG
41220: PUSH
41221: EMPTY
41222: LIST
41223: LIST
41224: PUSH
41225: LD_INT 1
41227: PUSH
41228: LD_INT 1
41230: NEG
41231: PUSH
41232: EMPTY
41233: LIST
41234: LIST
41235: PUSH
41236: LD_INT 2
41238: PUSH
41239: LD_INT 0
41241: PUSH
41242: EMPTY
41243: LIST
41244: LIST
41245: PUSH
41246: LD_INT 2
41248: PUSH
41249: LD_INT 1
41251: PUSH
41252: EMPTY
41253: LIST
41254: LIST
41255: PUSH
41256: LD_INT 2
41258: PUSH
41259: LD_INT 2
41261: PUSH
41262: EMPTY
41263: LIST
41264: LIST
41265: PUSH
41266: LD_INT 1
41268: PUSH
41269: LD_INT 2
41271: PUSH
41272: EMPTY
41273: LIST
41274: LIST
41275: PUSH
41276: LD_INT 0
41278: PUSH
41279: LD_INT 2
41281: PUSH
41282: EMPTY
41283: LIST
41284: LIST
41285: PUSH
41286: LD_INT 1
41288: NEG
41289: PUSH
41290: LD_INT 1
41292: PUSH
41293: EMPTY
41294: LIST
41295: LIST
41296: PUSH
41297: LD_INT 2
41299: NEG
41300: PUSH
41301: LD_INT 0
41303: PUSH
41304: EMPTY
41305: LIST
41306: LIST
41307: PUSH
41308: LD_INT 2
41310: NEG
41311: PUSH
41312: LD_INT 1
41314: NEG
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: LD_INT 2
41322: NEG
41323: PUSH
41324: LD_INT 2
41326: NEG
41327: PUSH
41328: EMPTY
41329: LIST
41330: LIST
41331: PUSH
41332: LD_INT 2
41334: PUSH
41335: LD_INT 3
41337: PUSH
41338: EMPTY
41339: LIST
41340: LIST
41341: PUSH
41342: LD_INT 1
41344: PUSH
41345: LD_INT 3
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 1
41354: NEG
41355: PUSH
41356: LD_INT 2
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: PUSH
41363: LD_INT 2
41365: NEG
41366: PUSH
41367: LD_INT 1
41369: PUSH
41370: EMPTY
41371: LIST
41372: LIST
41373: PUSH
41374: EMPTY
41375: LIST
41376: LIST
41377: LIST
41378: LIST
41379: LIST
41380: LIST
41381: LIST
41382: LIST
41383: LIST
41384: LIST
41385: LIST
41386: LIST
41387: LIST
41388: LIST
41389: LIST
41390: LIST
41391: LIST
41392: LIST
41393: LIST
41394: LIST
41395: LIST
41396: LIST
41397: LIST
41398: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41399: LD_ADDR_VAR 0 27
41403: PUSH
41404: LD_INT 0
41406: PUSH
41407: LD_INT 0
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: PUSH
41414: LD_INT 0
41416: PUSH
41417: LD_INT 1
41419: NEG
41420: PUSH
41421: EMPTY
41422: LIST
41423: LIST
41424: PUSH
41425: LD_INT 1
41427: PUSH
41428: LD_INT 0
41430: PUSH
41431: EMPTY
41432: LIST
41433: LIST
41434: PUSH
41435: LD_INT 1
41437: PUSH
41438: LD_INT 1
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: PUSH
41445: LD_INT 0
41447: PUSH
41448: LD_INT 1
41450: PUSH
41451: EMPTY
41452: LIST
41453: LIST
41454: PUSH
41455: LD_INT 1
41457: NEG
41458: PUSH
41459: LD_INT 0
41461: PUSH
41462: EMPTY
41463: LIST
41464: LIST
41465: PUSH
41466: LD_INT 1
41468: NEG
41469: PUSH
41470: LD_INT 1
41472: NEG
41473: PUSH
41474: EMPTY
41475: LIST
41476: LIST
41477: PUSH
41478: LD_INT 1
41480: NEG
41481: PUSH
41482: LD_INT 2
41484: NEG
41485: PUSH
41486: EMPTY
41487: LIST
41488: LIST
41489: PUSH
41490: LD_INT 0
41492: PUSH
41493: LD_INT 2
41495: NEG
41496: PUSH
41497: EMPTY
41498: LIST
41499: LIST
41500: PUSH
41501: LD_INT 1
41503: PUSH
41504: LD_INT 1
41506: NEG
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 2
41514: PUSH
41515: LD_INT 0
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PUSH
41522: LD_INT 2
41524: PUSH
41525: LD_INT 1
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: LD_INT 2
41534: PUSH
41535: LD_INT 2
41537: PUSH
41538: EMPTY
41539: LIST
41540: LIST
41541: PUSH
41542: LD_INT 1
41544: PUSH
41545: LD_INT 2
41547: PUSH
41548: EMPTY
41549: LIST
41550: LIST
41551: PUSH
41552: LD_INT 0
41554: PUSH
41555: LD_INT 2
41557: PUSH
41558: EMPTY
41559: LIST
41560: LIST
41561: PUSH
41562: LD_INT 1
41564: NEG
41565: PUSH
41566: LD_INT 1
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: PUSH
41573: LD_INT 2
41575: NEG
41576: PUSH
41577: LD_INT 0
41579: PUSH
41580: EMPTY
41581: LIST
41582: LIST
41583: PUSH
41584: LD_INT 2
41586: NEG
41587: PUSH
41588: LD_INT 1
41590: NEG
41591: PUSH
41592: EMPTY
41593: LIST
41594: LIST
41595: PUSH
41596: LD_INT 2
41598: NEG
41599: PUSH
41600: LD_INT 2
41602: NEG
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 1
41610: NEG
41611: PUSH
41612: LD_INT 2
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: PUSH
41619: LD_INT 2
41621: NEG
41622: PUSH
41623: LD_INT 1
41625: PUSH
41626: EMPTY
41627: LIST
41628: LIST
41629: PUSH
41630: LD_INT 3
41632: NEG
41633: PUSH
41634: LD_INT 1
41636: NEG
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: LD_INT 3
41644: NEG
41645: PUSH
41646: LD_INT 2
41648: NEG
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PUSH
41654: EMPTY
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: LIST
41661: LIST
41662: LIST
41663: LIST
41664: LIST
41665: LIST
41666: LIST
41667: LIST
41668: LIST
41669: LIST
41670: LIST
41671: LIST
41672: LIST
41673: LIST
41674: LIST
41675: LIST
41676: LIST
41677: LIST
41678: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
41679: LD_ADDR_VAR 0 28
41683: PUSH
41684: LD_INT 0
41686: PUSH
41687: LD_INT 0
41689: PUSH
41690: EMPTY
41691: LIST
41692: LIST
41693: PUSH
41694: LD_INT 0
41696: PUSH
41697: LD_INT 1
41699: NEG
41700: PUSH
41701: EMPTY
41702: LIST
41703: LIST
41704: PUSH
41705: LD_INT 1
41707: PUSH
41708: LD_INT 0
41710: PUSH
41711: EMPTY
41712: LIST
41713: LIST
41714: PUSH
41715: LD_INT 1
41717: PUSH
41718: LD_INT 1
41720: PUSH
41721: EMPTY
41722: LIST
41723: LIST
41724: PUSH
41725: LD_INT 0
41727: PUSH
41728: LD_INT 1
41730: PUSH
41731: EMPTY
41732: LIST
41733: LIST
41734: PUSH
41735: LD_INT 1
41737: NEG
41738: PUSH
41739: LD_INT 0
41741: PUSH
41742: EMPTY
41743: LIST
41744: LIST
41745: PUSH
41746: LD_INT 1
41748: NEG
41749: PUSH
41750: LD_INT 1
41752: NEG
41753: PUSH
41754: EMPTY
41755: LIST
41756: LIST
41757: PUSH
41758: LD_INT 1
41760: NEG
41761: PUSH
41762: LD_INT 2
41764: NEG
41765: PUSH
41766: EMPTY
41767: LIST
41768: LIST
41769: PUSH
41770: LD_INT 0
41772: PUSH
41773: LD_INT 2
41775: NEG
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 1
41783: PUSH
41784: LD_INT 1
41786: NEG
41787: PUSH
41788: EMPTY
41789: LIST
41790: LIST
41791: PUSH
41792: LD_INT 2
41794: PUSH
41795: LD_INT 0
41797: PUSH
41798: EMPTY
41799: LIST
41800: LIST
41801: PUSH
41802: LD_INT 2
41804: PUSH
41805: LD_INT 1
41807: PUSH
41808: EMPTY
41809: LIST
41810: LIST
41811: PUSH
41812: LD_INT 2
41814: PUSH
41815: LD_INT 2
41817: PUSH
41818: EMPTY
41819: LIST
41820: LIST
41821: PUSH
41822: LD_INT 1
41824: PUSH
41825: LD_INT 2
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: LD_INT 0
41834: PUSH
41835: LD_INT 2
41837: PUSH
41838: EMPTY
41839: LIST
41840: LIST
41841: PUSH
41842: LD_INT 1
41844: NEG
41845: PUSH
41846: LD_INT 1
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: LD_INT 2
41855: NEG
41856: PUSH
41857: LD_INT 0
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 2
41866: NEG
41867: PUSH
41868: LD_INT 1
41870: NEG
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: LD_INT 2
41878: NEG
41879: PUSH
41880: LD_INT 2
41882: NEG
41883: PUSH
41884: EMPTY
41885: LIST
41886: LIST
41887: PUSH
41888: LD_INT 2
41890: NEG
41891: PUSH
41892: LD_INT 3
41894: NEG
41895: PUSH
41896: EMPTY
41897: LIST
41898: LIST
41899: PUSH
41900: LD_INT 1
41902: NEG
41903: PUSH
41904: LD_INT 3
41906: NEG
41907: PUSH
41908: EMPTY
41909: LIST
41910: LIST
41911: PUSH
41912: LD_INT 3
41914: NEG
41915: PUSH
41916: LD_INT 1
41918: NEG
41919: PUSH
41920: EMPTY
41921: LIST
41922: LIST
41923: PUSH
41924: LD_INT 3
41926: NEG
41927: PUSH
41928: LD_INT 2
41930: NEG
41931: PUSH
41932: EMPTY
41933: LIST
41934: LIST
41935: PUSH
41936: EMPTY
41937: LIST
41938: LIST
41939: LIST
41940: LIST
41941: LIST
41942: LIST
41943: LIST
41944: LIST
41945: LIST
41946: LIST
41947: LIST
41948: LIST
41949: LIST
41950: LIST
41951: LIST
41952: LIST
41953: LIST
41954: LIST
41955: LIST
41956: LIST
41957: LIST
41958: LIST
41959: LIST
41960: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
41961: LD_ADDR_VAR 0 29
41965: PUSH
41966: LD_INT 0
41968: PUSH
41969: LD_INT 0
41971: PUSH
41972: EMPTY
41973: LIST
41974: LIST
41975: PUSH
41976: LD_INT 0
41978: PUSH
41979: LD_INT 1
41981: NEG
41982: PUSH
41983: EMPTY
41984: LIST
41985: LIST
41986: PUSH
41987: LD_INT 1
41989: PUSH
41990: LD_INT 0
41992: PUSH
41993: EMPTY
41994: LIST
41995: LIST
41996: PUSH
41997: LD_INT 1
41999: PUSH
42000: LD_INT 1
42002: PUSH
42003: EMPTY
42004: LIST
42005: LIST
42006: PUSH
42007: LD_INT 0
42009: PUSH
42010: LD_INT 1
42012: PUSH
42013: EMPTY
42014: LIST
42015: LIST
42016: PUSH
42017: LD_INT 1
42019: NEG
42020: PUSH
42021: LD_INT 0
42023: PUSH
42024: EMPTY
42025: LIST
42026: LIST
42027: PUSH
42028: LD_INT 1
42030: NEG
42031: PUSH
42032: LD_INT 1
42034: NEG
42035: PUSH
42036: EMPTY
42037: LIST
42038: LIST
42039: PUSH
42040: LD_INT 1
42042: NEG
42043: PUSH
42044: LD_INT 2
42046: NEG
42047: PUSH
42048: EMPTY
42049: LIST
42050: LIST
42051: PUSH
42052: LD_INT 0
42054: PUSH
42055: LD_INT 2
42057: NEG
42058: PUSH
42059: EMPTY
42060: LIST
42061: LIST
42062: PUSH
42063: LD_INT 1
42065: PUSH
42066: LD_INT 1
42068: NEG
42069: PUSH
42070: EMPTY
42071: LIST
42072: LIST
42073: PUSH
42074: LD_INT 2
42076: PUSH
42077: LD_INT 0
42079: PUSH
42080: EMPTY
42081: LIST
42082: LIST
42083: PUSH
42084: LD_INT 2
42086: PUSH
42087: LD_INT 1
42089: PUSH
42090: EMPTY
42091: LIST
42092: LIST
42093: PUSH
42094: LD_INT 1
42096: PUSH
42097: LD_INT 2
42099: PUSH
42100: EMPTY
42101: LIST
42102: LIST
42103: PUSH
42104: LD_INT 0
42106: PUSH
42107: LD_INT 2
42109: PUSH
42110: EMPTY
42111: LIST
42112: LIST
42113: PUSH
42114: LD_INT 1
42116: NEG
42117: PUSH
42118: LD_INT 1
42120: PUSH
42121: EMPTY
42122: LIST
42123: LIST
42124: PUSH
42125: LD_INT 2
42127: NEG
42128: PUSH
42129: LD_INT 1
42131: NEG
42132: PUSH
42133: EMPTY
42134: LIST
42135: LIST
42136: PUSH
42137: LD_INT 2
42139: NEG
42140: PUSH
42141: LD_INT 2
42143: NEG
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 2
42151: NEG
42152: PUSH
42153: LD_INT 3
42155: NEG
42156: PUSH
42157: EMPTY
42158: LIST
42159: LIST
42160: PUSH
42161: LD_INT 2
42163: PUSH
42164: LD_INT 1
42166: NEG
42167: PUSH
42168: EMPTY
42169: LIST
42170: LIST
42171: PUSH
42172: LD_INT 3
42174: PUSH
42175: LD_INT 1
42177: PUSH
42178: EMPTY
42179: LIST
42180: LIST
42181: PUSH
42182: LD_INT 1
42184: PUSH
42185: LD_INT 3
42187: PUSH
42188: EMPTY
42189: LIST
42190: LIST
42191: PUSH
42192: LD_INT 1
42194: NEG
42195: PUSH
42196: LD_INT 2
42198: PUSH
42199: EMPTY
42200: LIST
42201: LIST
42202: PUSH
42203: LD_INT 3
42205: NEG
42206: PUSH
42207: LD_INT 2
42209: NEG
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: PUSH
42215: EMPTY
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: LIST
42225: LIST
42226: LIST
42227: LIST
42228: LIST
42229: LIST
42230: LIST
42231: LIST
42232: LIST
42233: LIST
42234: LIST
42235: LIST
42236: LIST
42237: LIST
42238: LIST
42239: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42240: LD_ADDR_VAR 0 30
42244: PUSH
42245: LD_INT 0
42247: PUSH
42248: LD_INT 0
42250: PUSH
42251: EMPTY
42252: LIST
42253: LIST
42254: PUSH
42255: LD_INT 0
42257: PUSH
42258: LD_INT 1
42260: NEG
42261: PUSH
42262: EMPTY
42263: LIST
42264: LIST
42265: PUSH
42266: LD_INT 1
42268: PUSH
42269: LD_INT 0
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 1
42278: PUSH
42279: LD_INT 1
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: LD_INT 0
42288: PUSH
42289: LD_INT 1
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 1
42298: NEG
42299: PUSH
42300: LD_INT 0
42302: PUSH
42303: EMPTY
42304: LIST
42305: LIST
42306: PUSH
42307: LD_INT 1
42309: NEG
42310: PUSH
42311: LD_INT 1
42313: NEG
42314: PUSH
42315: EMPTY
42316: LIST
42317: LIST
42318: PUSH
42319: LD_INT 1
42321: NEG
42322: PUSH
42323: LD_INT 2
42325: NEG
42326: PUSH
42327: EMPTY
42328: LIST
42329: LIST
42330: PUSH
42331: LD_INT 0
42333: PUSH
42334: LD_INT 2
42336: NEG
42337: PUSH
42338: EMPTY
42339: LIST
42340: LIST
42341: PUSH
42342: LD_INT 1
42344: PUSH
42345: LD_INT 1
42347: NEG
42348: PUSH
42349: EMPTY
42350: LIST
42351: LIST
42352: PUSH
42353: LD_INT 2
42355: PUSH
42356: LD_INT 0
42358: PUSH
42359: EMPTY
42360: LIST
42361: LIST
42362: PUSH
42363: LD_INT 2
42365: PUSH
42366: LD_INT 1
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_INT 2
42375: PUSH
42376: LD_INT 2
42378: PUSH
42379: EMPTY
42380: LIST
42381: LIST
42382: PUSH
42383: LD_INT 1
42385: PUSH
42386: LD_INT 2
42388: PUSH
42389: EMPTY
42390: LIST
42391: LIST
42392: PUSH
42393: LD_INT 1
42395: NEG
42396: PUSH
42397: LD_INT 1
42399: PUSH
42400: EMPTY
42401: LIST
42402: LIST
42403: PUSH
42404: LD_INT 2
42406: NEG
42407: PUSH
42408: LD_INT 0
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 2
42417: NEG
42418: PUSH
42419: LD_INT 1
42421: NEG
42422: PUSH
42423: EMPTY
42424: LIST
42425: LIST
42426: PUSH
42427: LD_INT 1
42429: NEG
42430: PUSH
42431: LD_INT 3
42433: NEG
42434: PUSH
42435: EMPTY
42436: LIST
42437: LIST
42438: PUSH
42439: LD_INT 1
42441: PUSH
42442: LD_INT 2
42444: NEG
42445: PUSH
42446: EMPTY
42447: LIST
42448: LIST
42449: PUSH
42450: LD_INT 3
42452: PUSH
42453: LD_INT 2
42455: PUSH
42456: EMPTY
42457: LIST
42458: LIST
42459: PUSH
42460: LD_INT 2
42462: PUSH
42463: LD_INT 3
42465: PUSH
42466: EMPTY
42467: LIST
42468: LIST
42469: PUSH
42470: LD_INT 2
42472: NEG
42473: PUSH
42474: LD_INT 1
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: LD_INT 3
42483: NEG
42484: PUSH
42485: LD_INT 1
42487: NEG
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
42518: LD_ADDR_VAR 0 31
42522: PUSH
42523: LD_INT 0
42525: PUSH
42526: LD_INT 0
42528: PUSH
42529: EMPTY
42530: LIST
42531: LIST
42532: PUSH
42533: LD_INT 0
42535: PUSH
42536: LD_INT 1
42538: NEG
42539: PUSH
42540: EMPTY
42541: LIST
42542: LIST
42543: PUSH
42544: LD_INT 1
42546: PUSH
42547: LD_INT 0
42549: PUSH
42550: EMPTY
42551: LIST
42552: LIST
42553: PUSH
42554: LD_INT 1
42556: PUSH
42557: LD_INT 1
42559: PUSH
42560: EMPTY
42561: LIST
42562: LIST
42563: PUSH
42564: LD_INT 0
42566: PUSH
42567: LD_INT 1
42569: PUSH
42570: EMPTY
42571: LIST
42572: LIST
42573: PUSH
42574: LD_INT 1
42576: NEG
42577: PUSH
42578: LD_INT 0
42580: PUSH
42581: EMPTY
42582: LIST
42583: LIST
42584: PUSH
42585: LD_INT 1
42587: NEG
42588: PUSH
42589: LD_INT 1
42591: NEG
42592: PUSH
42593: EMPTY
42594: LIST
42595: LIST
42596: PUSH
42597: LD_INT 1
42599: NEG
42600: PUSH
42601: LD_INT 2
42603: NEG
42604: PUSH
42605: EMPTY
42606: LIST
42607: LIST
42608: PUSH
42609: LD_INT 1
42611: PUSH
42612: LD_INT 1
42614: NEG
42615: PUSH
42616: EMPTY
42617: LIST
42618: LIST
42619: PUSH
42620: LD_INT 2
42622: PUSH
42623: LD_INT 0
42625: PUSH
42626: EMPTY
42627: LIST
42628: LIST
42629: PUSH
42630: LD_INT 2
42632: PUSH
42633: LD_INT 1
42635: PUSH
42636: EMPTY
42637: LIST
42638: LIST
42639: PUSH
42640: LD_INT 2
42642: PUSH
42643: LD_INT 2
42645: PUSH
42646: EMPTY
42647: LIST
42648: LIST
42649: PUSH
42650: LD_INT 1
42652: PUSH
42653: LD_INT 2
42655: PUSH
42656: EMPTY
42657: LIST
42658: LIST
42659: PUSH
42660: LD_INT 0
42662: PUSH
42663: LD_INT 2
42665: PUSH
42666: EMPTY
42667: LIST
42668: LIST
42669: PUSH
42670: LD_INT 1
42672: NEG
42673: PUSH
42674: LD_INT 1
42676: PUSH
42677: EMPTY
42678: LIST
42679: LIST
42680: PUSH
42681: LD_INT 2
42683: NEG
42684: PUSH
42685: LD_INT 1
42687: NEG
42688: PUSH
42689: EMPTY
42690: LIST
42691: LIST
42692: PUSH
42693: LD_INT 2
42695: NEG
42696: PUSH
42697: LD_INT 2
42699: NEG
42700: PUSH
42701: EMPTY
42702: LIST
42703: LIST
42704: PUSH
42705: LD_INT 2
42707: NEG
42708: PUSH
42709: LD_INT 3
42711: NEG
42712: PUSH
42713: EMPTY
42714: LIST
42715: LIST
42716: PUSH
42717: LD_INT 2
42719: PUSH
42720: LD_INT 1
42722: NEG
42723: PUSH
42724: EMPTY
42725: LIST
42726: LIST
42727: PUSH
42728: LD_INT 3
42730: PUSH
42731: LD_INT 1
42733: PUSH
42734: EMPTY
42735: LIST
42736: LIST
42737: PUSH
42738: LD_INT 1
42740: PUSH
42741: LD_INT 3
42743: PUSH
42744: EMPTY
42745: LIST
42746: LIST
42747: PUSH
42748: LD_INT 1
42750: NEG
42751: PUSH
42752: LD_INT 2
42754: PUSH
42755: EMPTY
42756: LIST
42757: LIST
42758: PUSH
42759: LD_INT 3
42761: NEG
42762: PUSH
42763: LD_INT 2
42765: NEG
42766: PUSH
42767: EMPTY
42768: LIST
42769: LIST
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: LIST
42775: LIST
42776: LIST
42777: LIST
42778: LIST
42779: LIST
42780: LIST
42781: LIST
42782: LIST
42783: LIST
42784: LIST
42785: LIST
42786: LIST
42787: LIST
42788: LIST
42789: LIST
42790: LIST
42791: LIST
42792: LIST
42793: LIST
42794: LIST
42795: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42796: LD_ADDR_VAR 0 32
42800: PUSH
42801: LD_INT 0
42803: PUSH
42804: LD_INT 0
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: LD_INT 0
42813: PUSH
42814: LD_INT 1
42816: NEG
42817: PUSH
42818: EMPTY
42819: LIST
42820: LIST
42821: PUSH
42822: LD_INT 1
42824: PUSH
42825: LD_INT 0
42827: PUSH
42828: EMPTY
42829: LIST
42830: LIST
42831: PUSH
42832: LD_INT 1
42834: PUSH
42835: LD_INT 1
42837: PUSH
42838: EMPTY
42839: LIST
42840: LIST
42841: PUSH
42842: LD_INT 0
42844: PUSH
42845: LD_INT 1
42847: PUSH
42848: EMPTY
42849: LIST
42850: LIST
42851: PUSH
42852: LD_INT 1
42854: NEG
42855: PUSH
42856: LD_INT 0
42858: PUSH
42859: EMPTY
42860: LIST
42861: LIST
42862: PUSH
42863: LD_INT 1
42865: NEG
42866: PUSH
42867: LD_INT 1
42869: NEG
42870: PUSH
42871: EMPTY
42872: LIST
42873: LIST
42874: PUSH
42875: LD_INT 1
42877: NEG
42878: PUSH
42879: LD_INT 2
42881: NEG
42882: PUSH
42883: EMPTY
42884: LIST
42885: LIST
42886: PUSH
42887: LD_INT 0
42889: PUSH
42890: LD_INT 2
42892: NEG
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: PUSH
42898: LD_INT 1
42900: PUSH
42901: LD_INT 1
42903: NEG
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: PUSH
42909: LD_INT 2
42911: PUSH
42912: LD_INT 1
42914: PUSH
42915: EMPTY
42916: LIST
42917: LIST
42918: PUSH
42919: LD_INT 2
42921: PUSH
42922: LD_INT 2
42924: PUSH
42925: EMPTY
42926: LIST
42927: LIST
42928: PUSH
42929: LD_INT 1
42931: PUSH
42932: LD_INT 2
42934: PUSH
42935: EMPTY
42936: LIST
42937: LIST
42938: PUSH
42939: LD_INT 0
42941: PUSH
42942: LD_INT 2
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: PUSH
42949: LD_INT 1
42951: NEG
42952: PUSH
42953: LD_INT 1
42955: PUSH
42956: EMPTY
42957: LIST
42958: LIST
42959: PUSH
42960: LD_INT 2
42962: NEG
42963: PUSH
42964: LD_INT 0
42966: PUSH
42967: EMPTY
42968: LIST
42969: LIST
42970: PUSH
42971: LD_INT 2
42973: NEG
42974: PUSH
42975: LD_INT 1
42977: NEG
42978: PUSH
42979: EMPTY
42980: LIST
42981: LIST
42982: PUSH
42983: LD_INT 1
42985: NEG
42986: PUSH
42987: LD_INT 3
42989: NEG
42990: PUSH
42991: EMPTY
42992: LIST
42993: LIST
42994: PUSH
42995: LD_INT 1
42997: PUSH
42998: LD_INT 2
43000: NEG
43001: PUSH
43002: EMPTY
43003: LIST
43004: LIST
43005: PUSH
43006: LD_INT 3
43008: PUSH
43009: LD_INT 2
43011: PUSH
43012: EMPTY
43013: LIST
43014: LIST
43015: PUSH
43016: LD_INT 2
43018: PUSH
43019: LD_INT 3
43021: PUSH
43022: EMPTY
43023: LIST
43024: LIST
43025: PUSH
43026: LD_INT 2
43028: NEG
43029: PUSH
43030: LD_INT 1
43032: PUSH
43033: EMPTY
43034: LIST
43035: LIST
43036: PUSH
43037: LD_INT 3
43039: NEG
43040: PUSH
43041: LD_INT 1
43043: NEG
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: PUSH
43049: EMPTY
43050: LIST
43051: LIST
43052: LIST
43053: LIST
43054: LIST
43055: LIST
43056: LIST
43057: LIST
43058: LIST
43059: LIST
43060: LIST
43061: LIST
43062: LIST
43063: LIST
43064: LIST
43065: LIST
43066: LIST
43067: LIST
43068: LIST
43069: LIST
43070: LIST
43071: LIST
43072: LIST
43073: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
43074: LD_ADDR_VAR 0 33
43078: PUSH
43079: LD_INT 0
43081: PUSH
43082: LD_INT 0
43084: PUSH
43085: EMPTY
43086: LIST
43087: LIST
43088: PUSH
43089: LD_INT 0
43091: PUSH
43092: LD_INT 1
43094: NEG
43095: PUSH
43096: EMPTY
43097: LIST
43098: LIST
43099: PUSH
43100: LD_INT 1
43102: PUSH
43103: LD_INT 0
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: LD_INT 1
43112: PUSH
43113: LD_INT 1
43115: PUSH
43116: EMPTY
43117: LIST
43118: LIST
43119: PUSH
43120: LD_INT 0
43122: PUSH
43123: LD_INT 1
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 1
43132: NEG
43133: PUSH
43134: LD_INT 0
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: LD_INT 1
43143: NEG
43144: PUSH
43145: LD_INT 1
43147: NEG
43148: PUSH
43149: EMPTY
43150: LIST
43151: LIST
43152: PUSH
43153: LD_INT 1
43155: NEG
43156: PUSH
43157: LD_INT 2
43159: NEG
43160: PUSH
43161: EMPTY
43162: LIST
43163: LIST
43164: PUSH
43165: LD_INT 1
43167: PUSH
43168: LD_INT 1
43170: NEG
43171: PUSH
43172: EMPTY
43173: LIST
43174: LIST
43175: PUSH
43176: LD_INT 2
43178: PUSH
43179: LD_INT 0
43181: PUSH
43182: EMPTY
43183: LIST
43184: LIST
43185: PUSH
43186: LD_INT 2
43188: PUSH
43189: LD_INT 1
43191: PUSH
43192: EMPTY
43193: LIST
43194: LIST
43195: PUSH
43196: LD_INT 1
43198: PUSH
43199: LD_INT 2
43201: PUSH
43202: EMPTY
43203: LIST
43204: LIST
43205: PUSH
43206: LD_INT 0
43208: PUSH
43209: LD_INT 2
43211: PUSH
43212: EMPTY
43213: LIST
43214: LIST
43215: PUSH
43216: LD_INT 1
43218: NEG
43219: PUSH
43220: LD_INT 1
43222: PUSH
43223: EMPTY
43224: LIST
43225: LIST
43226: PUSH
43227: LD_INT 2
43229: NEG
43230: PUSH
43231: LD_INT 0
43233: PUSH
43234: EMPTY
43235: LIST
43236: LIST
43237: PUSH
43238: LD_INT 2
43240: NEG
43241: PUSH
43242: LD_INT 1
43244: NEG
43245: PUSH
43246: EMPTY
43247: LIST
43248: LIST
43249: PUSH
43250: LD_INT 2
43252: NEG
43253: PUSH
43254: LD_INT 2
43256: NEG
43257: PUSH
43258: EMPTY
43259: LIST
43260: LIST
43261: PUSH
43262: LD_INT 2
43264: NEG
43265: PUSH
43266: LD_INT 3
43268: NEG
43269: PUSH
43270: EMPTY
43271: LIST
43272: LIST
43273: PUSH
43274: LD_INT 2
43276: PUSH
43277: LD_INT 1
43279: NEG
43280: PUSH
43281: EMPTY
43282: LIST
43283: LIST
43284: PUSH
43285: LD_INT 3
43287: PUSH
43288: LD_INT 1
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: LD_INT 1
43297: PUSH
43298: LD_INT 3
43300: PUSH
43301: EMPTY
43302: LIST
43303: LIST
43304: PUSH
43305: LD_INT 1
43307: NEG
43308: PUSH
43309: LD_INT 2
43311: PUSH
43312: EMPTY
43313: LIST
43314: LIST
43315: PUSH
43316: LD_INT 3
43318: NEG
43319: PUSH
43320: LD_INT 2
43322: NEG
43323: PUSH
43324: EMPTY
43325: LIST
43326: LIST
43327: PUSH
43328: EMPTY
43329: LIST
43330: LIST
43331: LIST
43332: LIST
43333: LIST
43334: LIST
43335: LIST
43336: LIST
43337: LIST
43338: LIST
43339: LIST
43340: LIST
43341: LIST
43342: LIST
43343: LIST
43344: LIST
43345: LIST
43346: LIST
43347: LIST
43348: LIST
43349: LIST
43350: LIST
43351: LIST
43352: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
43353: LD_ADDR_VAR 0 34
43357: PUSH
43358: LD_INT 0
43360: PUSH
43361: LD_INT 0
43363: PUSH
43364: EMPTY
43365: LIST
43366: LIST
43367: PUSH
43368: LD_INT 0
43370: PUSH
43371: LD_INT 1
43373: NEG
43374: PUSH
43375: EMPTY
43376: LIST
43377: LIST
43378: PUSH
43379: LD_INT 1
43381: PUSH
43382: LD_INT 0
43384: PUSH
43385: EMPTY
43386: LIST
43387: LIST
43388: PUSH
43389: LD_INT 1
43391: PUSH
43392: LD_INT 1
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 0
43401: PUSH
43402: LD_INT 1
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 1
43411: NEG
43412: PUSH
43413: LD_INT 0
43415: PUSH
43416: EMPTY
43417: LIST
43418: LIST
43419: PUSH
43420: LD_INT 1
43422: NEG
43423: PUSH
43424: LD_INT 1
43426: NEG
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: PUSH
43432: LD_INT 1
43434: NEG
43435: PUSH
43436: LD_INT 2
43438: NEG
43439: PUSH
43440: EMPTY
43441: LIST
43442: LIST
43443: PUSH
43444: LD_INT 0
43446: PUSH
43447: LD_INT 2
43449: NEG
43450: PUSH
43451: EMPTY
43452: LIST
43453: LIST
43454: PUSH
43455: LD_INT 1
43457: PUSH
43458: LD_INT 1
43460: NEG
43461: PUSH
43462: EMPTY
43463: LIST
43464: LIST
43465: PUSH
43466: LD_INT 2
43468: PUSH
43469: LD_INT 1
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: PUSH
43476: LD_INT 2
43478: PUSH
43479: LD_INT 2
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: PUSH
43486: LD_INT 1
43488: PUSH
43489: LD_INT 2
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 1
43498: NEG
43499: PUSH
43500: LD_INT 1
43502: PUSH
43503: EMPTY
43504: LIST
43505: LIST
43506: PUSH
43507: LD_INT 2
43509: NEG
43510: PUSH
43511: LD_INT 0
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: LD_INT 2
43520: NEG
43521: PUSH
43522: LD_INT 1
43524: NEG
43525: PUSH
43526: EMPTY
43527: LIST
43528: LIST
43529: PUSH
43530: LD_INT 2
43532: NEG
43533: PUSH
43534: LD_INT 2
43536: NEG
43537: PUSH
43538: EMPTY
43539: LIST
43540: LIST
43541: PUSH
43542: LD_INT 1
43544: NEG
43545: PUSH
43546: LD_INT 3
43548: NEG
43549: PUSH
43550: EMPTY
43551: LIST
43552: LIST
43553: PUSH
43554: LD_INT 1
43556: PUSH
43557: LD_INT 2
43559: NEG
43560: PUSH
43561: EMPTY
43562: LIST
43563: LIST
43564: PUSH
43565: LD_INT 3
43567: PUSH
43568: LD_INT 2
43570: PUSH
43571: EMPTY
43572: LIST
43573: LIST
43574: PUSH
43575: LD_INT 2
43577: PUSH
43578: LD_INT 3
43580: PUSH
43581: EMPTY
43582: LIST
43583: LIST
43584: PUSH
43585: LD_INT 2
43587: NEG
43588: PUSH
43589: LD_INT 1
43591: PUSH
43592: EMPTY
43593: LIST
43594: LIST
43595: PUSH
43596: LD_INT 3
43598: NEG
43599: PUSH
43600: LD_INT 1
43602: NEG
43603: PUSH
43604: EMPTY
43605: LIST
43606: LIST
43607: PUSH
43608: EMPTY
43609: LIST
43610: LIST
43611: LIST
43612: LIST
43613: LIST
43614: LIST
43615: LIST
43616: LIST
43617: LIST
43618: LIST
43619: LIST
43620: LIST
43621: LIST
43622: LIST
43623: LIST
43624: LIST
43625: LIST
43626: LIST
43627: LIST
43628: LIST
43629: LIST
43630: LIST
43631: LIST
43632: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43633: LD_ADDR_VAR 0 35
43637: PUSH
43638: LD_INT 0
43640: PUSH
43641: LD_INT 0
43643: PUSH
43644: EMPTY
43645: LIST
43646: LIST
43647: PUSH
43648: LD_INT 0
43650: PUSH
43651: LD_INT 1
43653: NEG
43654: PUSH
43655: EMPTY
43656: LIST
43657: LIST
43658: PUSH
43659: LD_INT 1
43661: PUSH
43662: LD_INT 0
43664: PUSH
43665: EMPTY
43666: LIST
43667: LIST
43668: PUSH
43669: LD_INT 1
43671: PUSH
43672: LD_INT 1
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: LD_INT 0
43681: PUSH
43682: LD_INT 1
43684: PUSH
43685: EMPTY
43686: LIST
43687: LIST
43688: PUSH
43689: LD_INT 1
43691: NEG
43692: PUSH
43693: LD_INT 0
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 1
43702: NEG
43703: PUSH
43704: LD_INT 1
43706: NEG
43707: PUSH
43708: EMPTY
43709: LIST
43710: LIST
43711: PUSH
43712: LD_INT 2
43714: PUSH
43715: LD_INT 1
43717: PUSH
43718: EMPTY
43719: LIST
43720: LIST
43721: PUSH
43722: LD_INT 2
43724: NEG
43725: PUSH
43726: LD_INT 1
43728: NEG
43729: PUSH
43730: EMPTY
43731: LIST
43732: LIST
43733: PUSH
43734: EMPTY
43735: LIST
43736: LIST
43737: LIST
43738: LIST
43739: LIST
43740: LIST
43741: LIST
43742: LIST
43743: LIST
43744: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
43745: LD_ADDR_VAR 0 36
43749: PUSH
43750: LD_INT 0
43752: PUSH
43753: LD_INT 0
43755: PUSH
43756: EMPTY
43757: LIST
43758: LIST
43759: PUSH
43760: LD_INT 0
43762: PUSH
43763: LD_INT 1
43765: NEG
43766: PUSH
43767: EMPTY
43768: LIST
43769: LIST
43770: PUSH
43771: LD_INT 1
43773: PUSH
43774: LD_INT 0
43776: PUSH
43777: EMPTY
43778: LIST
43779: LIST
43780: PUSH
43781: LD_INT 1
43783: PUSH
43784: LD_INT 1
43786: PUSH
43787: EMPTY
43788: LIST
43789: LIST
43790: PUSH
43791: LD_INT 0
43793: PUSH
43794: LD_INT 1
43796: PUSH
43797: EMPTY
43798: LIST
43799: LIST
43800: PUSH
43801: LD_INT 1
43803: NEG
43804: PUSH
43805: LD_INT 0
43807: PUSH
43808: EMPTY
43809: LIST
43810: LIST
43811: PUSH
43812: LD_INT 1
43814: NEG
43815: PUSH
43816: LD_INT 1
43818: NEG
43819: PUSH
43820: EMPTY
43821: LIST
43822: LIST
43823: PUSH
43824: LD_INT 1
43826: NEG
43827: PUSH
43828: LD_INT 2
43830: NEG
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PUSH
43836: LD_INT 1
43838: PUSH
43839: LD_INT 2
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: PUSH
43846: EMPTY
43847: LIST
43848: LIST
43849: LIST
43850: LIST
43851: LIST
43852: LIST
43853: LIST
43854: LIST
43855: LIST
43856: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
43857: LD_ADDR_VAR 0 37
43861: PUSH
43862: LD_INT 0
43864: PUSH
43865: LD_INT 0
43867: PUSH
43868: EMPTY
43869: LIST
43870: LIST
43871: PUSH
43872: LD_INT 0
43874: PUSH
43875: LD_INT 1
43877: NEG
43878: PUSH
43879: EMPTY
43880: LIST
43881: LIST
43882: PUSH
43883: LD_INT 1
43885: PUSH
43886: LD_INT 0
43888: PUSH
43889: EMPTY
43890: LIST
43891: LIST
43892: PUSH
43893: LD_INT 1
43895: PUSH
43896: LD_INT 1
43898: PUSH
43899: EMPTY
43900: LIST
43901: LIST
43902: PUSH
43903: LD_INT 0
43905: PUSH
43906: LD_INT 1
43908: PUSH
43909: EMPTY
43910: LIST
43911: LIST
43912: PUSH
43913: LD_INT 1
43915: NEG
43916: PUSH
43917: LD_INT 0
43919: PUSH
43920: EMPTY
43921: LIST
43922: LIST
43923: PUSH
43924: LD_INT 1
43926: NEG
43927: PUSH
43928: LD_INT 1
43930: NEG
43931: PUSH
43932: EMPTY
43933: LIST
43934: LIST
43935: PUSH
43936: LD_INT 1
43938: PUSH
43939: LD_INT 1
43941: NEG
43942: PUSH
43943: EMPTY
43944: LIST
43945: LIST
43946: PUSH
43947: LD_INT 1
43949: NEG
43950: PUSH
43951: LD_INT 1
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: EMPTY
43959: LIST
43960: LIST
43961: LIST
43962: LIST
43963: LIST
43964: LIST
43965: LIST
43966: LIST
43967: LIST
43968: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
43969: LD_ADDR_VAR 0 38
43973: PUSH
43974: LD_INT 0
43976: PUSH
43977: LD_INT 0
43979: PUSH
43980: EMPTY
43981: LIST
43982: LIST
43983: PUSH
43984: LD_INT 0
43986: PUSH
43987: LD_INT 1
43989: NEG
43990: PUSH
43991: EMPTY
43992: LIST
43993: LIST
43994: PUSH
43995: LD_INT 1
43997: PUSH
43998: LD_INT 0
44000: PUSH
44001: EMPTY
44002: LIST
44003: LIST
44004: PUSH
44005: LD_INT 1
44007: PUSH
44008: LD_INT 1
44010: PUSH
44011: EMPTY
44012: LIST
44013: LIST
44014: PUSH
44015: LD_INT 0
44017: PUSH
44018: LD_INT 1
44020: PUSH
44021: EMPTY
44022: LIST
44023: LIST
44024: PUSH
44025: LD_INT 1
44027: NEG
44028: PUSH
44029: LD_INT 0
44031: PUSH
44032: EMPTY
44033: LIST
44034: LIST
44035: PUSH
44036: LD_INT 1
44038: NEG
44039: PUSH
44040: LD_INT 1
44042: NEG
44043: PUSH
44044: EMPTY
44045: LIST
44046: LIST
44047: PUSH
44048: LD_INT 2
44050: PUSH
44051: LD_INT 1
44053: PUSH
44054: EMPTY
44055: LIST
44056: LIST
44057: PUSH
44058: LD_INT 2
44060: NEG
44061: PUSH
44062: LD_INT 1
44064: NEG
44065: PUSH
44066: EMPTY
44067: LIST
44068: LIST
44069: PUSH
44070: EMPTY
44071: LIST
44072: LIST
44073: LIST
44074: LIST
44075: LIST
44076: LIST
44077: LIST
44078: LIST
44079: LIST
44080: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
44081: LD_ADDR_VAR 0 39
44085: PUSH
44086: LD_INT 0
44088: PUSH
44089: LD_INT 0
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: PUSH
44096: LD_INT 0
44098: PUSH
44099: LD_INT 1
44101: NEG
44102: PUSH
44103: EMPTY
44104: LIST
44105: LIST
44106: PUSH
44107: LD_INT 1
44109: PUSH
44110: LD_INT 0
44112: PUSH
44113: EMPTY
44114: LIST
44115: LIST
44116: PUSH
44117: LD_INT 1
44119: PUSH
44120: LD_INT 1
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 0
44129: PUSH
44130: LD_INT 1
44132: PUSH
44133: EMPTY
44134: LIST
44135: LIST
44136: PUSH
44137: LD_INT 1
44139: NEG
44140: PUSH
44141: LD_INT 0
44143: PUSH
44144: EMPTY
44145: LIST
44146: LIST
44147: PUSH
44148: LD_INT 1
44150: NEG
44151: PUSH
44152: LD_INT 1
44154: NEG
44155: PUSH
44156: EMPTY
44157: LIST
44158: LIST
44159: PUSH
44160: LD_INT 1
44162: NEG
44163: PUSH
44164: LD_INT 2
44166: NEG
44167: PUSH
44168: EMPTY
44169: LIST
44170: LIST
44171: PUSH
44172: LD_INT 1
44174: PUSH
44175: LD_INT 2
44177: PUSH
44178: EMPTY
44179: LIST
44180: LIST
44181: PUSH
44182: EMPTY
44183: LIST
44184: LIST
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: LIST
44191: LIST
44192: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
44193: LD_ADDR_VAR 0 40
44197: PUSH
44198: LD_INT 0
44200: PUSH
44201: LD_INT 0
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 0
44210: PUSH
44211: LD_INT 1
44213: NEG
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: LD_INT 1
44221: PUSH
44222: LD_INT 0
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: LD_INT 1
44231: PUSH
44232: LD_INT 1
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: LD_INT 0
44241: PUSH
44242: LD_INT 1
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: PUSH
44249: LD_INT 1
44251: NEG
44252: PUSH
44253: LD_INT 0
44255: PUSH
44256: EMPTY
44257: LIST
44258: LIST
44259: PUSH
44260: LD_INT 1
44262: NEG
44263: PUSH
44264: LD_INT 1
44266: NEG
44267: PUSH
44268: EMPTY
44269: LIST
44270: LIST
44271: PUSH
44272: LD_INT 1
44274: PUSH
44275: LD_INT 1
44277: NEG
44278: PUSH
44279: EMPTY
44280: LIST
44281: LIST
44282: PUSH
44283: LD_INT 1
44285: NEG
44286: PUSH
44287: LD_INT 1
44289: PUSH
44290: EMPTY
44291: LIST
44292: LIST
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44305: LD_ADDR_VAR 0 41
44309: PUSH
44310: LD_INT 0
44312: PUSH
44313: LD_INT 0
44315: PUSH
44316: EMPTY
44317: LIST
44318: LIST
44319: PUSH
44320: LD_INT 0
44322: PUSH
44323: LD_INT 1
44325: NEG
44326: PUSH
44327: EMPTY
44328: LIST
44329: LIST
44330: PUSH
44331: LD_INT 1
44333: PUSH
44334: LD_INT 0
44336: PUSH
44337: EMPTY
44338: LIST
44339: LIST
44340: PUSH
44341: LD_INT 1
44343: PUSH
44344: LD_INT 1
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 0
44353: PUSH
44354: LD_INT 1
44356: PUSH
44357: EMPTY
44358: LIST
44359: LIST
44360: PUSH
44361: LD_INT 1
44363: NEG
44364: PUSH
44365: LD_INT 0
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 1
44374: NEG
44375: PUSH
44376: LD_INT 1
44378: NEG
44379: PUSH
44380: EMPTY
44381: LIST
44382: LIST
44383: PUSH
44384: LD_INT 1
44386: NEG
44387: PUSH
44388: LD_INT 2
44390: NEG
44391: PUSH
44392: EMPTY
44393: LIST
44394: LIST
44395: PUSH
44396: LD_INT 1
44398: PUSH
44399: LD_INT 1
44401: NEG
44402: PUSH
44403: EMPTY
44404: LIST
44405: LIST
44406: PUSH
44407: LD_INT 2
44409: PUSH
44410: LD_INT 0
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: PUSH
44417: LD_INT 2
44419: PUSH
44420: LD_INT 1
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 2
44429: PUSH
44430: LD_INT 2
44432: PUSH
44433: EMPTY
44434: LIST
44435: LIST
44436: PUSH
44437: LD_INT 1
44439: PUSH
44440: LD_INT 2
44442: PUSH
44443: EMPTY
44444: LIST
44445: LIST
44446: PUSH
44447: LD_INT 1
44449: NEG
44450: PUSH
44451: LD_INT 1
44453: PUSH
44454: EMPTY
44455: LIST
44456: LIST
44457: PUSH
44458: LD_INT 2
44460: NEG
44461: PUSH
44462: LD_INT 0
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 2
44471: NEG
44472: PUSH
44473: LD_INT 1
44475: NEG
44476: PUSH
44477: EMPTY
44478: LIST
44479: LIST
44480: PUSH
44481: LD_INT 2
44483: NEG
44484: PUSH
44485: LD_INT 2
44487: NEG
44488: PUSH
44489: EMPTY
44490: LIST
44491: LIST
44492: PUSH
44493: LD_INT 2
44495: NEG
44496: PUSH
44497: LD_INT 3
44499: NEG
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: LD_INT 2
44507: PUSH
44508: LD_INT 1
44510: NEG
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 3
44518: PUSH
44519: LD_INT 0
44521: PUSH
44522: EMPTY
44523: LIST
44524: LIST
44525: PUSH
44526: LD_INT 3
44528: PUSH
44529: LD_INT 1
44531: PUSH
44532: EMPTY
44533: LIST
44534: LIST
44535: PUSH
44536: LD_INT 3
44538: PUSH
44539: LD_INT 2
44541: PUSH
44542: EMPTY
44543: LIST
44544: LIST
44545: PUSH
44546: LD_INT 3
44548: PUSH
44549: LD_INT 3
44551: PUSH
44552: EMPTY
44553: LIST
44554: LIST
44555: PUSH
44556: LD_INT 2
44558: PUSH
44559: LD_INT 3
44561: PUSH
44562: EMPTY
44563: LIST
44564: LIST
44565: PUSH
44566: LD_INT 2
44568: NEG
44569: PUSH
44570: LD_INT 1
44572: PUSH
44573: EMPTY
44574: LIST
44575: LIST
44576: PUSH
44577: LD_INT 3
44579: NEG
44580: PUSH
44581: LD_INT 0
44583: PUSH
44584: EMPTY
44585: LIST
44586: LIST
44587: PUSH
44588: LD_INT 3
44590: NEG
44591: PUSH
44592: LD_INT 1
44594: NEG
44595: PUSH
44596: EMPTY
44597: LIST
44598: LIST
44599: PUSH
44600: LD_INT 3
44602: NEG
44603: PUSH
44604: LD_INT 2
44606: NEG
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 3
44614: NEG
44615: PUSH
44616: LD_INT 3
44618: NEG
44619: PUSH
44620: EMPTY
44621: LIST
44622: LIST
44623: PUSH
44624: EMPTY
44625: LIST
44626: LIST
44627: LIST
44628: LIST
44629: LIST
44630: LIST
44631: LIST
44632: LIST
44633: LIST
44634: LIST
44635: LIST
44636: LIST
44637: LIST
44638: LIST
44639: LIST
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: LIST
44646: LIST
44647: LIST
44648: LIST
44649: LIST
44650: LIST
44651: LIST
44652: LIST
44653: LIST
44654: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
44655: LD_ADDR_VAR 0 42
44659: PUSH
44660: LD_INT 0
44662: PUSH
44663: LD_INT 0
44665: PUSH
44666: EMPTY
44667: LIST
44668: LIST
44669: PUSH
44670: LD_INT 0
44672: PUSH
44673: LD_INT 1
44675: NEG
44676: PUSH
44677: EMPTY
44678: LIST
44679: LIST
44680: PUSH
44681: LD_INT 1
44683: PUSH
44684: LD_INT 0
44686: PUSH
44687: EMPTY
44688: LIST
44689: LIST
44690: PUSH
44691: LD_INT 1
44693: PUSH
44694: LD_INT 1
44696: PUSH
44697: EMPTY
44698: LIST
44699: LIST
44700: PUSH
44701: LD_INT 0
44703: PUSH
44704: LD_INT 1
44706: PUSH
44707: EMPTY
44708: LIST
44709: LIST
44710: PUSH
44711: LD_INT 1
44713: NEG
44714: PUSH
44715: LD_INT 0
44717: PUSH
44718: EMPTY
44719: LIST
44720: LIST
44721: PUSH
44722: LD_INT 1
44724: NEG
44725: PUSH
44726: LD_INT 1
44728: NEG
44729: PUSH
44730: EMPTY
44731: LIST
44732: LIST
44733: PUSH
44734: LD_INT 1
44736: NEG
44737: PUSH
44738: LD_INT 2
44740: NEG
44741: PUSH
44742: EMPTY
44743: LIST
44744: LIST
44745: PUSH
44746: LD_INT 0
44748: PUSH
44749: LD_INT 2
44751: NEG
44752: PUSH
44753: EMPTY
44754: LIST
44755: LIST
44756: PUSH
44757: LD_INT 1
44759: PUSH
44760: LD_INT 1
44762: NEG
44763: PUSH
44764: EMPTY
44765: LIST
44766: LIST
44767: PUSH
44768: LD_INT 2
44770: PUSH
44771: LD_INT 1
44773: PUSH
44774: EMPTY
44775: LIST
44776: LIST
44777: PUSH
44778: LD_INT 2
44780: PUSH
44781: LD_INT 2
44783: PUSH
44784: EMPTY
44785: LIST
44786: LIST
44787: PUSH
44788: LD_INT 1
44790: PUSH
44791: LD_INT 2
44793: PUSH
44794: EMPTY
44795: LIST
44796: LIST
44797: PUSH
44798: LD_INT 0
44800: PUSH
44801: LD_INT 2
44803: PUSH
44804: EMPTY
44805: LIST
44806: LIST
44807: PUSH
44808: LD_INT 1
44810: NEG
44811: PUSH
44812: LD_INT 1
44814: PUSH
44815: EMPTY
44816: LIST
44817: LIST
44818: PUSH
44819: LD_INT 2
44821: NEG
44822: PUSH
44823: LD_INT 1
44825: NEG
44826: PUSH
44827: EMPTY
44828: LIST
44829: LIST
44830: PUSH
44831: LD_INT 2
44833: NEG
44834: PUSH
44835: LD_INT 2
44837: NEG
44838: PUSH
44839: EMPTY
44840: LIST
44841: LIST
44842: PUSH
44843: LD_INT 2
44845: NEG
44846: PUSH
44847: LD_INT 3
44849: NEG
44850: PUSH
44851: EMPTY
44852: LIST
44853: LIST
44854: PUSH
44855: LD_INT 1
44857: NEG
44858: PUSH
44859: LD_INT 3
44861: NEG
44862: PUSH
44863: EMPTY
44864: LIST
44865: LIST
44866: PUSH
44867: LD_INT 0
44869: PUSH
44870: LD_INT 3
44872: NEG
44873: PUSH
44874: EMPTY
44875: LIST
44876: LIST
44877: PUSH
44878: LD_INT 1
44880: PUSH
44881: LD_INT 2
44883: NEG
44884: PUSH
44885: EMPTY
44886: LIST
44887: LIST
44888: PUSH
44889: LD_INT 3
44891: PUSH
44892: LD_INT 2
44894: PUSH
44895: EMPTY
44896: LIST
44897: LIST
44898: PUSH
44899: LD_INT 3
44901: PUSH
44902: LD_INT 3
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 2
44911: PUSH
44912: LD_INT 3
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 1
44921: PUSH
44922: LD_INT 3
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 0
44931: PUSH
44932: LD_INT 3
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 1
44941: NEG
44942: PUSH
44943: LD_INT 2
44945: PUSH
44946: EMPTY
44947: LIST
44948: LIST
44949: PUSH
44950: LD_INT 3
44952: NEG
44953: PUSH
44954: LD_INT 2
44956: NEG
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 3
44964: NEG
44965: PUSH
44966: LD_INT 3
44968: NEG
44969: PUSH
44970: EMPTY
44971: LIST
44972: LIST
44973: PUSH
44974: EMPTY
44975: LIST
44976: LIST
44977: LIST
44978: LIST
44979: LIST
44980: LIST
44981: LIST
44982: LIST
44983: LIST
44984: LIST
44985: LIST
44986: LIST
44987: LIST
44988: LIST
44989: LIST
44990: LIST
44991: LIST
44992: LIST
44993: LIST
44994: LIST
44995: LIST
44996: LIST
44997: LIST
44998: LIST
44999: LIST
45000: LIST
45001: LIST
45002: LIST
45003: LIST
45004: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
45005: LD_ADDR_VAR 0 43
45009: PUSH
45010: LD_INT 0
45012: PUSH
45013: LD_INT 0
45015: PUSH
45016: EMPTY
45017: LIST
45018: LIST
45019: PUSH
45020: LD_INT 0
45022: PUSH
45023: LD_INT 1
45025: NEG
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: PUSH
45031: LD_INT 1
45033: PUSH
45034: LD_INT 0
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 1
45043: PUSH
45044: LD_INT 1
45046: PUSH
45047: EMPTY
45048: LIST
45049: LIST
45050: PUSH
45051: LD_INT 0
45053: PUSH
45054: LD_INT 1
45056: PUSH
45057: EMPTY
45058: LIST
45059: LIST
45060: PUSH
45061: LD_INT 1
45063: NEG
45064: PUSH
45065: LD_INT 0
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 1
45074: NEG
45075: PUSH
45076: LD_INT 1
45078: NEG
45079: PUSH
45080: EMPTY
45081: LIST
45082: LIST
45083: PUSH
45084: LD_INT 1
45086: NEG
45087: PUSH
45088: LD_INT 2
45090: NEG
45091: PUSH
45092: EMPTY
45093: LIST
45094: LIST
45095: PUSH
45096: LD_INT 0
45098: PUSH
45099: LD_INT 2
45101: NEG
45102: PUSH
45103: EMPTY
45104: LIST
45105: LIST
45106: PUSH
45107: LD_INT 1
45109: PUSH
45110: LD_INT 1
45112: NEG
45113: PUSH
45114: EMPTY
45115: LIST
45116: LIST
45117: PUSH
45118: LD_INT 2
45120: PUSH
45121: LD_INT 0
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 2
45130: PUSH
45131: LD_INT 1
45133: PUSH
45134: EMPTY
45135: LIST
45136: LIST
45137: PUSH
45138: LD_INT 1
45140: PUSH
45141: LD_INT 2
45143: PUSH
45144: EMPTY
45145: LIST
45146: LIST
45147: PUSH
45148: LD_INT 0
45150: PUSH
45151: LD_INT 2
45153: PUSH
45154: EMPTY
45155: LIST
45156: LIST
45157: PUSH
45158: LD_INT 1
45160: NEG
45161: PUSH
45162: LD_INT 1
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 2
45171: NEG
45172: PUSH
45173: LD_INT 0
45175: PUSH
45176: EMPTY
45177: LIST
45178: LIST
45179: PUSH
45180: LD_INT 2
45182: NEG
45183: PUSH
45184: LD_INT 1
45186: NEG
45187: PUSH
45188: EMPTY
45189: LIST
45190: LIST
45191: PUSH
45192: LD_INT 1
45194: NEG
45195: PUSH
45196: LD_INT 3
45198: NEG
45199: PUSH
45200: EMPTY
45201: LIST
45202: LIST
45203: PUSH
45204: LD_INT 0
45206: PUSH
45207: LD_INT 3
45209: NEG
45210: PUSH
45211: EMPTY
45212: LIST
45213: LIST
45214: PUSH
45215: LD_INT 1
45217: PUSH
45218: LD_INT 2
45220: NEG
45221: PUSH
45222: EMPTY
45223: LIST
45224: LIST
45225: PUSH
45226: LD_INT 2
45228: PUSH
45229: LD_INT 1
45231: NEG
45232: PUSH
45233: EMPTY
45234: LIST
45235: LIST
45236: PUSH
45237: LD_INT 3
45239: PUSH
45240: LD_INT 0
45242: PUSH
45243: EMPTY
45244: LIST
45245: LIST
45246: PUSH
45247: LD_INT 3
45249: PUSH
45250: LD_INT 1
45252: PUSH
45253: EMPTY
45254: LIST
45255: LIST
45256: PUSH
45257: LD_INT 1
45259: PUSH
45260: LD_INT 3
45262: PUSH
45263: EMPTY
45264: LIST
45265: LIST
45266: PUSH
45267: LD_INT 0
45269: PUSH
45270: LD_INT 3
45272: PUSH
45273: EMPTY
45274: LIST
45275: LIST
45276: PUSH
45277: LD_INT 1
45279: NEG
45280: PUSH
45281: LD_INT 2
45283: PUSH
45284: EMPTY
45285: LIST
45286: LIST
45287: PUSH
45288: LD_INT 2
45290: NEG
45291: PUSH
45292: LD_INT 1
45294: PUSH
45295: EMPTY
45296: LIST
45297: LIST
45298: PUSH
45299: LD_INT 3
45301: NEG
45302: PUSH
45303: LD_INT 0
45305: PUSH
45306: EMPTY
45307: LIST
45308: LIST
45309: PUSH
45310: LD_INT 3
45312: NEG
45313: PUSH
45314: LD_INT 1
45316: NEG
45317: PUSH
45318: EMPTY
45319: LIST
45320: LIST
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: LIST
45326: LIST
45327: LIST
45328: LIST
45329: LIST
45330: LIST
45331: LIST
45332: LIST
45333: LIST
45334: LIST
45335: LIST
45336: LIST
45337: LIST
45338: LIST
45339: LIST
45340: LIST
45341: LIST
45342: LIST
45343: LIST
45344: LIST
45345: LIST
45346: LIST
45347: LIST
45348: LIST
45349: LIST
45350: LIST
45351: LIST
45352: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45353: LD_ADDR_VAR 0 44
45357: PUSH
45358: LD_INT 0
45360: PUSH
45361: LD_INT 0
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 0
45370: PUSH
45371: LD_INT 1
45373: NEG
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 1
45381: PUSH
45382: LD_INT 0
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 1
45391: PUSH
45392: LD_INT 1
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 0
45401: PUSH
45402: LD_INT 1
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 1
45411: NEG
45412: PUSH
45413: LD_INT 0
45415: PUSH
45416: EMPTY
45417: LIST
45418: LIST
45419: PUSH
45420: LD_INT 1
45422: NEG
45423: PUSH
45424: LD_INT 1
45426: NEG
45427: PUSH
45428: EMPTY
45429: LIST
45430: LIST
45431: PUSH
45432: LD_INT 1
45434: NEG
45435: PUSH
45436: LD_INT 2
45438: NEG
45439: PUSH
45440: EMPTY
45441: LIST
45442: LIST
45443: PUSH
45444: LD_INT 1
45446: PUSH
45447: LD_INT 1
45449: NEG
45450: PUSH
45451: EMPTY
45452: LIST
45453: LIST
45454: PUSH
45455: LD_INT 2
45457: PUSH
45458: LD_INT 0
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: LD_INT 2
45467: PUSH
45468: LD_INT 1
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 2
45477: PUSH
45478: LD_INT 2
45480: PUSH
45481: EMPTY
45482: LIST
45483: LIST
45484: PUSH
45485: LD_INT 1
45487: PUSH
45488: LD_INT 2
45490: PUSH
45491: EMPTY
45492: LIST
45493: LIST
45494: PUSH
45495: LD_INT 1
45497: NEG
45498: PUSH
45499: LD_INT 1
45501: PUSH
45502: EMPTY
45503: LIST
45504: LIST
45505: PUSH
45506: LD_INT 2
45508: NEG
45509: PUSH
45510: LD_INT 0
45512: PUSH
45513: EMPTY
45514: LIST
45515: LIST
45516: PUSH
45517: LD_INT 2
45519: NEG
45520: PUSH
45521: LD_INT 1
45523: NEG
45524: PUSH
45525: EMPTY
45526: LIST
45527: LIST
45528: PUSH
45529: LD_INT 2
45531: NEG
45532: PUSH
45533: LD_INT 2
45535: NEG
45536: PUSH
45537: EMPTY
45538: LIST
45539: LIST
45540: PUSH
45541: LD_INT 2
45543: NEG
45544: PUSH
45545: LD_INT 3
45547: NEG
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 2
45555: PUSH
45556: LD_INT 1
45558: NEG
45559: PUSH
45560: EMPTY
45561: LIST
45562: LIST
45563: PUSH
45564: LD_INT 3
45566: PUSH
45567: LD_INT 0
45569: PUSH
45570: EMPTY
45571: LIST
45572: LIST
45573: PUSH
45574: LD_INT 3
45576: PUSH
45577: LD_INT 1
45579: PUSH
45580: EMPTY
45581: LIST
45582: LIST
45583: PUSH
45584: LD_INT 3
45586: PUSH
45587: LD_INT 2
45589: PUSH
45590: EMPTY
45591: LIST
45592: LIST
45593: PUSH
45594: LD_INT 3
45596: PUSH
45597: LD_INT 3
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 2
45606: PUSH
45607: LD_INT 3
45609: PUSH
45610: EMPTY
45611: LIST
45612: LIST
45613: PUSH
45614: LD_INT 2
45616: NEG
45617: PUSH
45618: LD_INT 1
45620: PUSH
45621: EMPTY
45622: LIST
45623: LIST
45624: PUSH
45625: LD_INT 3
45627: NEG
45628: PUSH
45629: LD_INT 0
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 3
45638: NEG
45639: PUSH
45640: LD_INT 1
45642: NEG
45643: PUSH
45644: EMPTY
45645: LIST
45646: LIST
45647: PUSH
45648: LD_INT 3
45650: NEG
45651: PUSH
45652: LD_INT 2
45654: NEG
45655: PUSH
45656: EMPTY
45657: LIST
45658: LIST
45659: PUSH
45660: LD_INT 3
45662: NEG
45663: PUSH
45664: LD_INT 3
45666: NEG
45667: PUSH
45668: EMPTY
45669: LIST
45670: LIST
45671: PUSH
45672: EMPTY
45673: LIST
45674: LIST
45675: LIST
45676: LIST
45677: LIST
45678: LIST
45679: LIST
45680: LIST
45681: LIST
45682: LIST
45683: LIST
45684: LIST
45685: LIST
45686: LIST
45687: LIST
45688: LIST
45689: LIST
45690: LIST
45691: LIST
45692: LIST
45693: LIST
45694: LIST
45695: LIST
45696: LIST
45697: LIST
45698: LIST
45699: LIST
45700: LIST
45701: LIST
45702: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
45703: LD_ADDR_VAR 0 45
45707: PUSH
45708: LD_INT 0
45710: PUSH
45711: LD_INT 0
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 0
45720: PUSH
45721: LD_INT 1
45723: NEG
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 1
45731: PUSH
45732: LD_INT 0
45734: PUSH
45735: EMPTY
45736: LIST
45737: LIST
45738: PUSH
45739: LD_INT 1
45741: PUSH
45742: LD_INT 1
45744: PUSH
45745: EMPTY
45746: LIST
45747: LIST
45748: PUSH
45749: LD_INT 0
45751: PUSH
45752: LD_INT 1
45754: PUSH
45755: EMPTY
45756: LIST
45757: LIST
45758: PUSH
45759: LD_INT 1
45761: NEG
45762: PUSH
45763: LD_INT 0
45765: PUSH
45766: EMPTY
45767: LIST
45768: LIST
45769: PUSH
45770: LD_INT 1
45772: NEG
45773: PUSH
45774: LD_INT 1
45776: NEG
45777: PUSH
45778: EMPTY
45779: LIST
45780: LIST
45781: PUSH
45782: LD_INT 1
45784: NEG
45785: PUSH
45786: LD_INT 2
45788: NEG
45789: PUSH
45790: EMPTY
45791: LIST
45792: LIST
45793: PUSH
45794: LD_INT 0
45796: PUSH
45797: LD_INT 2
45799: NEG
45800: PUSH
45801: EMPTY
45802: LIST
45803: LIST
45804: PUSH
45805: LD_INT 1
45807: PUSH
45808: LD_INT 1
45810: NEG
45811: PUSH
45812: EMPTY
45813: LIST
45814: LIST
45815: PUSH
45816: LD_INT 2
45818: PUSH
45819: LD_INT 1
45821: PUSH
45822: EMPTY
45823: LIST
45824: LIST
45825: PUSH
45826: LD_INT 2
45828: PUSH
45829: LD_INT 2
45831: PUSH
45832: EMPTY
45833: LIST
45834: LIST
45835: PUSH
45836: LD_INT 1
45838: PUSH
45839: LD_INT 2
45841: PUSH
45842: EMPTY
45843: LIST
45844: LIST
45845: PUSH
45846: LD_INT 0
45848: PUSH
45849: LD_INT 2
45851: PUSH
45852: EMPTY
45853: LIST
45854: LIST
45855: PUSH
45856: LD_INT 1
45858: NEG
45859: PUSH
45860: LD_INT 1
45862: PUSH
45863: EMPTY
45864: LIST
45865: LIST
45866: PUSH
45867: LD_INT 2
45869: NEG
45870: PUSH
45871: LD_INT 1
45873: NEG
45874: PUSH
45875: EMPTY
45876: LIST
45877: LIST
45878: PUSH
45879: LD_INT 2
45881: NEG
45882: PUSH
45883: LD_INT 2
45885: NEG
45886: PUSH
45887: EMPTY
45888: LIST
45889: LIST
45890: PUSH
45891: LD_INT 2
45893: NEG
45894: PUSH
45895: LD_INT 3
45897: NEG
45898: PUSH
45899: EMPTY
45900: LIST
45901: LIST
45902: PUSH
45903: LD_INT 1
45905: NEG
45906: PUSH
45907: LD_INT 3
45909: NEG
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 0
45917: PUSH
45918: LD_INT 3
45920: NEG
45921: PUSH
45922: EMPTY
45923: LIST
45924: LIST
45925: PUSH
45926: LD_INT 1
45928: PUSH
45929: LD_INT 2
45931: NEG
45932: PUSH
45933: EMPTY
45934: LIST
45935: LIST
45936: PUSH
45937: LD_INT 3
45939: PUSH
45940: LD_INT 2
45942: PUSH
45943: EMPTY
45944: LIST
45945: LIST
45946: PUSH
45947: LD_INT 3
45949: PUSH
45950: LD_INT 3
45952: PUSH
45953: EMPTY
45954: LIST
45955: LIST
45956: PUSH
45957: LD_INT 2
45959: PUSH
45960: LD_INT 3
45962: PUSH
45963: EMPTY
45964: LIST
45965: LIST
45966: PUSH
45967: LD_INT 1
45969: PUSH
45970: LD_INT 3
45972: PUSH
45973: EMPTY
45974: LIST
45975: LIST
45976: PUSH
45977: LD_INT 0
45979: PUSH
45980: LD_INT 3
45982: PUSH
45983: EMPTY
45984: LIST
45985: LIST
45986: PUSH
45987: LD_INT 1
45989: NEG
45990: PUSH
45991: LD_INT 2
45993: PUSH
45994: EMPTY
45995: LIST
45996: LIST
45997: PUSH
45998: LD_INT 3
46000: NEG
46001: PUSH
46002: LD_INT 2
46004: NEG
46005: PUSH
46006: EMPTY
46007: LIST
46008: LIST
46009: PUSH
46010: LD_INT 3
46012: NEG
46013: PUSH
46014: LD_INT 3
46016: NEG
46017: PUSH
46018: EMPTY
46019: LIST
46020: LIST
46021: PUSH
46022: EMPTY
46023: LIST
46024: LIST
46025: LIST
46026: LIST
46027: LIST
46028: LIST
46029: LIST
46030: LIST
46031: LIST
46032: LIST
46033: LIST
46034: LIST
46035: LIST
46036: LIST
46037: LIST
46038: LIST
46039: LIST
46040: LIST
46041: LIST
46042: LIST
46043: LIST
46044: LIST
46045: LIST
46046: LIST
46047: LIST
46048: LIST
46049: LIST
46050: LIST
46051: LIST
46052: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46053: LD_ADDR_VAR 0 46
46057: PUSH
46058: LD_INT 0
46060: PUSH
46061: LD_INT 0
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: PUSH
46068: LD_INT 0
46070: PUSH
46071: LD_INT 1
46073: NEG
46074: PUSH
46075: EMPTY
46076: LIST
46077: LIST
46078: PUSH
46079: LD_INT 1
46081: PUSH
46082: LD_INT 0
46084: PUSH
46085: EMPTY
46086: LIST
46087: LIST
46088: PUSH
46089: LD_INT 1
46091: PUSH
46092: LD_INT 1
46094: PUSH
46095: EMPTY
46096: LIST
46097: LIST
46098: PUSH
46099: LD_INT 0
46101: PUSH
46102: LD_INT 1
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: PUSH
46109: LD_INT 1
46111: NEG
46112: PUSH
46113: LD_INT 0
46115: PUSH
46116: EMPTY
46117: LIST
46118: LIST
46119: PUSH
46120: LD_INT 1
46122: NEG
46123: PUSH
46124: LD_INT 1
46126: NEG
46127: PUSH
46128: EMPTY
46129: LIST
46130: LIST
46131: PUSH
46132: LD_INT 1
46134: NEG
46135: PUSH
46136: LD_INT 2
46138: NEG
46139: PUSH
46140: EMPTY
46141: LIST
46142: LIST
46143: PUSH
46144: LD_INT 0
46146: PUSH
46147: LD_INT 2
46149: NEG
46150: PUSH
46151: EMPTY
46152: LIST
46153: LIST
46154: PUSH
46155: LD_INT 1
46157: PUSH
46158: LD_INT 1
46160: NEG
46161: PUSH
46162: EMPTY
46163: LIST
46164: LIST
46165: PUSH
46166: LD_INT 2
46168: PUSH
46169: LD_INT 0
46171: PUSH
46172: EMPTY
46173: LIST
46174: LIST
46175: PUSH
46176: LD_INT 2
46178: PUSH
46179: LD_INT 1
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: LD_INT 1
46188: PUSH
46189: LD_INT 2
46191: PUSH
46192: EMPTY
46193: LIST
46194: LIST
46195: PUSH
46196: LD_INT 0
46198: PUSH
46199: LD_INT 2
46201: PUSH
46202: EMPTY
46203: LIST
46204: LIST
46205: PUSH
46206: LD_INT 1
46208: NEG
46209: PUSH
46210: LD_INT 1
46212: PUSH
46213: EMPTY
46214: LIST
46215: LIST
46216: PUSH
46217: LD_INT 2
46219: NEG
46220: PUSH
46221: LD_INT 0
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 2
46230: NEG
46231: PUSH
46232: LD_INT 1
46234: NEG
46235: PUSH
46236: EMPTY
46237: LIST
46238: LIST
46239: PUSH
46240: LD_INT 1
46242: NEG
46243: PUSH
46244: LD_INT 3
46246: NEG
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 0
46254: PUSH
46255: LD_INT 3
46257: NEG
46258: PUSH
46259: EMPTY
46260: LIST
46261: LIST
46262: PUSH
46263: LD_INT 1
46265: PUSH
46266: LD_INT 2
46268: NEG
46269: PUSH
46270: EMPTY
46271: LIST
46272: LIST
46273: PUSH
46274: LD_INT 2
46276: PUSH
46277: LD_INT 1
46279: NEG
46280: PUSH
46281: EMPTY
46282: LIST
46283: LIST
46284: PUSH
46285: LD_INT 3
46287: PUSH
46288: LD_INT 0
46290: PUSH
46291: EMPTY
46292: LIST
46293: LIST
46294: PUSH
46295: LD_INT 3
46297: PUSH
46298: LD_INT 1
46300: PUSH
46301: EMPTY
46302: LIST
46303: LIST
46304: PUSH
46305: LD_INT 1
46307: PUSH
46308: LD_INT 3
46310: PUSH
46311: EMPTY
46312: LIST
46313: LIST
46314: PUSH
46315: LD_INT 0
46317: PUSH
46318: LD_INT 3
46320: PUSH
46321: EMPTY
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 1
46327: NEG
46328: PUSH
46329: LD_INT 2
46331: PUSH
46332: EMPTY
46333: LIST
46334: LIST
46335: PUSH
46336: LD_INT 2
46338: NEG
46339: PUSH
46340: LD_INT 1
46342: PUSH
46343: EMPTY
46344: LIST
46345: LIST
46346: PUSH
46347: LD_INT 3
46349: NEG
46350: PUSH
46351: LD_INT 0
46353: PUSH
46354: EMPTY
46355: LIST
46356: LIST
46357: PUSH
46358: LD_INT 3
46360: NEG
46361: PUSH
46362: LD_INT 1
46364: NEG
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: EMPTY
46371: LIST
46372: LIST
46373: LIST
46374: LIST
46375: LIST
46376: LIST
46377: LIST
46378: LIST
46379: LIST
46380: LIST
46381: LIST
46382: LIST
46383: LIST
46384: LIST
46385: LIST
46386: LIST
46387: LIST
46388: LIST
46389: LIST
46390: LIST
46391: LIST
46392: LIST
46393: LIST
46394: LIST
46395: LIST
46396: LIST
46397: LIST
46398: LIST
46399: LIST
46400: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
46401: LD_ADDR_VAR 0 47
46405: PUSH
46406: LD_INT 0
46408: PUSH
46409: LD_INT 0
46411: PUSH
46412: EMPTY
46413: LIST
46414: LIST
46415: PUSH
46416: LD_INT 0
46418: PUSH
46419: LD_INT 1
46421: NEG
46422: PUSH
46423: EMPTY
46424: LIST
46425: LIST
46426: PUSH
46427: LD_INT 1
46429: PUSH
46430: LD_INT 0
46432: PUSH
46433: EMPTY
46434: LIST
46435: LIST
46436: PUSH
46437: LD_INT 1
46439: PUSH
46440: LD_INT 1
46442: PUSH
46443: EMPTY
46444: LIST
46445: LIST
46446: PUSH
46447: LD_INT 0
46449: PUSH
46450: LD_INT 1
46452: PUSH
46453: EMPTY
46454: LIST
46455: LIST
46456: PUSH
46457: LD_INT 1
46459: NEG
46460: PUSH
46461: LD_INT 0
46463: PUSH
46464: EMPTY
46465: LIST
46466: LIST
46467: PUSH
46468: LD_INT 1
46470: NEG
46471: PUSH
46472: LD_INT 1
46474: NEG
46475: PUSH
46476: EMPTY
46477: LIST
46478: LIST
46479: PUSH
46480: LD_INT 1
46482: NEG
46483: PUSH
46484: LD_INT 2
46486: NEG
46487: PUSH
46488: EMPTY
46489: LIST
46490: LIST
46491: PUSH
46492: LD_INT 0
46494: PUSH
46495: LD_INT 2
46497: NEG
46498: PUSH
46499: EMPTY
46500: LIST
46501: LIST
46502: PUSH
46503: LD_INT 1
46505: PUSH
46506: LD_INT 1
46508: NEG
46509: PUSH
46510: EMPTY
46511: LIST
46512: LIST
46513: PUSH
46514: LD_INT 2
46516: NEG
46517: PUSH
46518: LD_INT 1
46520: NEG
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 2
46528: NEG
46529: PUSH
46530: LD_INT 2
46532: NEG
46533: PUSH
46534: EMPTY
46535: LIST
46536: LIST
46537: PUSH
46538: EMPTY
46539: LIST
46540: LIST
46541: LIST
46542: LIST
46543: LIST
46544: LIST
46545: LIST
46546: LIST
46547: LIST
46548: LIST
46549: LIST
46550: LIST
46551: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
46552: LD_ADDR_VAR 0 48
46556: PUSH
46557: LD_INT 0
46559: PUSH
46560: LD_INT 0
46562: PUSH
46563: EMPTY
46564: LIST
46565: LIST
46566: PUSH
46567: LD_INT 0
46569: PUSH
46570: LD_INT 1
46572: NEG
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: PUSH
46578: LD_INT 1
46580: PUSH
46581: LD_INT 0
46583: PUSH
46584: EMPTY
46585: LIST
46586: LIST
46587: PUSH
46588: LD_INT 1
46590: PUSH
46591: LD_INT 1
46593: PUSH
46594: EMPTY
46595: LIST
46596: LIST
46597: PUSH
46598: LD_INT 0
46600: PUSH
46601: LD_INT 1
46603: PUSH
46604: EMPTY
46605: LIST
46606: LIST
46607: PUSH
46608: LD_INT 1
46610: NEG
46611: PUSH
46612: LD_INT 0
46614: PUSH
46615: EMPTY
46616: LIST
46617: LIST
46618: PUSH
46619: LD_INT 1
46621: NEG
46622: PUSH
46623: LD_INT 1
46625: NEG
46626: PUSH
46627: EMPTY
46628: LIST
46629: LIST
46630: PUSH
46631: LD_INT 1
46633: NEG
46634: PUSH
46635: LD_INT 2
46637: NEG
46638: PUSH
46639: EMPTY
46640: LIST
46641: LIST
46642: PUSH
46643: LD_INT 0
46645: PUSH
46646: LD_INT 2
46648: NEG
46649: PUSH
46650: EMPTY
46651: LIST
46652: LIST
46653: PUSH
46654: LD_INT 1
46656: PUSH
46657: LD_INT 1
46659: NEG
46660: PUSH
46661: EMPTY
46662: LIST
46663: LIST
46664: PUSH
46665: LD_INT 2
46667: PUSH
46668: LD_INT 0
46670: PUSH
46671: EMPTY
46672: LIST
46673: LIST
46674: PUSH
46675: LD_INT 2
46677: PUSH
46678: LD_INT 1
46680: PUSH
46681: EMPTY
46682: LIST
46683: LIST
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: LIST
46689: LIST
46690: LIST
46691: LIST
46692: LIST
46693: LIST
46694: LIST
46695: LIST
46696: LIST
46697: LIST
46698: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
46699: LD_ADDR_VAR 0 49
46703: PUSH
46704: LD_INT 0
46706: PUSH
46707: LD_INT 0
46709: PUSH
46710: EMPTY
46711: LIST
46712: LIST
46713: PUSH
46714: LD_INT 0
46716: PUSH
46717: LD_INT 1
46719: NEG
46720: PUSH
46721: EMPTY
46722: LIST
46723: LIST
46724: PUSH
46725: LD_INT 1
46727: PUSH
46728: LD_INT 0
46730: PUSH
46731: EMPTY
46732: LIST
46733: LIST
46734: PUSH
46735: LD_INT 1
46737: PUSH
46738: LD_INT 1
46740: PUSH
46741: EMPTY
46742: LIST
46743: LIST
46744: PUSH
46745: LD_INT 0
46747: PUSH
46748: LD_INT 1
46750: PUSH
46751: EMPTY
46752: LIST
46753: LIST
46754: PUSH
46755: LD_INT 1
46757: NEG
46758: PUSH
46759: LD_INT 0
46761: PUSH
46762: EMPTY
46763: LIST
46764: LIST
46765: PUSH
46766: LD_INT 1
46768: NEG
46769: PUSH
46770: LD_INT 1
46772: NEG
46773: PUSH
46774: EMPTY
46775: LIST
46776: LIST
46777: PUSH
46778: LD_INT 1
46780: PUSH
46781: LD_INT 1
46783: NEG
46784: PUSH
46785: EMPTY
46786: LIST
46787: LIST
46788: PUSH
46789: LD_INT 2
46791: PUSH
46792: LD_INT 0
46794: PUSH
46795: EMPTY
46796: LIST
46797: LIST
46798: PUSH
46799: LD_INT 2
46801: PUSH
46802: LD_INT 1
46804: PUSH
46805: EMPTY
46806: LIST
46807: LIST
46808: PUSH
46809: LD_INT 2
46811: PUSH
46812: LD_INT 2
46814: PUSH
46815: EMPTY
46816: LIST
46817: LIST
46818: PUSH
46819: LD_INT 1
46821: PUSH
46822: LD_INT 2
46824: PUSH
46825: EMPTY
46826: LIST
46827: LIST
46828: PUSH
46829: EMPTY
46830: LIST
46831: LIST
46832: LIST
46833: LIST
46834: LIST
46835: LIST
46836: LIST
46837: LIST
46838: LIST
46839: LIST
46840: LIST
46841: LIST
46842: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
46843: LD_ADDR_VAR 0 50
46847: PUSH
46848: LD_INT 0
46850: PUSH
46851: LD_INT 0
46853: PUSH
46854: EMPTY
46855: LIST
46856: LIST
46857: PUSH
46858: LD_INT 0
46860: PUSH
46861: LD_INT 1
46863: NEG
46864: PUSH
46865: EMPTY
46866: LIST
46867: LIST
46868: PUSH
46869: LD_INT 1
46871: PUSH
46872: LD_INT 0
46874: PUSH
46875: EMPTY
46876: LIST
46877: LIST
46878: PUSH
46879: LD_INT 1
46881: PUSH
46882: LD_INT 1
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 0
46891: PUSH
46892: LD_INT 1
46894: PUSH
46895: EMPTY
46896: LIST
46897: LIST
46898: PUSH
46899: LD_INT 1
46901: NEG
46902: PUSH
46903: LD_INT 0
46905: PUSH
46906: EMPTY
46907: LIST
46908: LIST
46909: PUSH
46910: LD_INT 1
46912: NEG
46913: PUSH
46914: LD_INT 1
46916: NEG
46917: PUSH
46918: EMPTY
46919: LIST
46920: LIST
46921: PUSH
46922: LD_INT 2
46924: PUSH
46925: LD_INT 1
46927: PUSH
46928: EMPTY
46929: LIST
46930: LIST
46931: PUSH
46932: LD_INT 2
46934: PUSH
46935: LD_INT 2
46937: PUSH
46938: EMPTY
46939: LIST
46940: LIST
46941: PUSH
46942: LD_INT 1
46944: PUSH
46945: LD_INT 2
46947: PUSH
46948: EMPTY
46949: LIST
46950: LIST
46951: PUSH
46952: LD_INT 0
46954: PUSH
46955: LD_INT 2
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: PUSH
46962: LD_INT 1
46964: NEG
46965: PUSH
46966: LD_INT 1
46968: PUSH
46969: EMPTY
46970: LIST
46971: LIST
46972: PUSH
46973: EMPTY
46974: LIST
46975: LIST
46976: LIST
46977: LIST
46978: LIST
46979: LIST
46980: LIST
46981: LIST
46982: LIST
46983: LIST
46984: LIST
46985: LIST
46986: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
46987: LD_ADDR_VAR 0 51
46991: PUSH
46992: LD_INT 0
46994: PUSH
46995: LD_INT 0
46997: PUSH
46998: EMPTY
46999: LIST
47000: LIST
47001: PUSH
47002: LD_INT 0
47004: PUSH
47005: LD_INT 1
47007: NEG
47008: PUSH
47009: EMPTY
47010: LIST
47011: LIST
47012: PUSH
47013: LD_INT 1
47015: PUSH
47016: LD_INT 0
47018: PUSH
47019: EMPTY
47020: LIST
47021: LIST
47022: PUSH
47023: LD_INT 1
47025: PUSH
47026: LD_INT 1
47028: PUSH
47029: EMPTY
47030: LIST
47031: LIST
47032: PUSH
47033: LD_INT 0
47035: PUSH
47036: LD_INT 1
47038: PUSH
47039: EMPTY
47040: LIST
47041: LIST
47042: PUSH
47043: LD_INT 1
47045: NEG
47046: PUSH
47047: LD_INT 0
47049: PUSH
47050: EMPTY
47051: LIST
47052: LIST
47053: PUSH
47054: LD_INT 1
47056: NEG
47057: PUSH
47058: LD_INT 1
47060: NEG
47061: PUSH
47062: EMPTY
47063: LIST
47064: LIST
47065: PUSH
47066: LD_INT 1
47068: PUSH
47069: LD_INT 2
47071: PUSH
47072: EMPTY
47073: LIST
47074: LIST
47075: PUSH
47076: LD_INT 0
47078: PUSH
47079: LD_INT 2
47081: PUSH
47082: EMPTY
47083: LIST
47084: LIST
47085: PUSH
47086: LD_INT 1
47088: NEG
47089: PUSH
47090: LD_INT 1
47092: PUSH
47093: EMPTY
47094: LIST
47095: LIST
47096: PUSH
47097: LD_INT 2
47099: NEG
47100: PUSH
47101: LD_INT 0
47103: PUSH
47104: EMPTY
47105: LIST
47106: LIST
47107: PUSH
47108: LD_INT 2
47110: NEG
47111: PUSH
47112: LD_INT 1
47114: NEG
47115: PUSH
47116: EMPTY
47117: LIST
47118: LIST
47119: PUSH
47120: EMPTY
47121: LIST
47122: LIST
47123: LIST
47124: LIST
47125: LIST
47126: LIST
47127: LIST
47128: LIST
47129: LIST
47130: LIST
47131: LIST
47132: LIST
47133: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47134: LD_ADDR_VAR 0 52
47138: PUSH
47139: LD_INT 0
47141: PUSH
47142: LD_INT 0
47144: PUSH
47145: EMPTY
47146: LIST
47147: LIST
47148: PUSH
47149: LD_INT 0
47151: PUSH
47152: LD_INT 1
47154: NEG
47155: PUSH
47156: EMPTY
47157: LIST
47158: LIST
47159: PUSH
47160: LD_INT 1
47162: PUSH
47163: LD_INT 0
47165: PUSH
47166: EMPTY
47167: LIST
47168: LIST
47169: PUSH
47170: LD_INT 1
47172: PUSH
47173: LD_INT 1
47175: PUSH
47176: EMPTY
47177: LIST
47178: LIST
47179: PUSH
47180: LD_INT 0
47182: PUSH
47183: LD_INT 1
47185: PUSH
47186: EMPTY
47187: LIST
47188: LIST
47189: PUSH
47190: LD_INT 1
47192: NEG
47193: PUSH
47194: LD_INT 0
47196: PUSH
47197: EMPTY
47198: LIST
47199: LIST
47200: PUSH
47201: LD_INT 1
47203: NEG
47204: PUSH
47205: LD_INT 1
47207: NEG
47208: PUSH
47209: EMPTY
47210: LIST
47211: LIST
47212: PUSH
47213: LD_INT 1
47215: NEG
47216: PUSH
47217: LD_INT 2
47219: NEG
47220: PUSH
47221: EMPTY
47222: LIST
47223: LIST
47224: PUSH
47225: LD_INT 1
47227: NEG
47228: PUSH
47229: LD_INT 1
47231: PUSH
47232: EMPTY
47233: LIST
47234: LIST
47235: PUSH
47236: LD_INT 2
47238: NEG
47239: PUSH
47240: LD_INT 0
47242: PUSH
47243: EMPTY
47244: LIST
47245: LIST
47246: PUSH
47247: LD_INT 2
47249: NEG
47250: PUSH
47251: LD_INT 1
47253: NEG
47254: PUSH
47255: EMPTY
47256: LIST
47257: LIST
47258: PUSH
47259: LD_INT 2
47261: NEG
47262: PUSH
47263: LD_INT 2
47265: NEG
47266: PUSH
47267: EMPTY
47268: LIST
47269: LIST
47270: PUSH
47271: EMPTY
47272: LIST
47273: LIST
47274: LIST
47275: LIST
47276: LIST
47277: LIST
47278: LIST
47279: LIST
47280: LIST
47281: LIST
47282: LIST
47283: LIST
47284: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47285: LD_ADDR_VAR 0 53
47289: PUSH
47290: LD_INT 0
47292: PUSH
47293: LD_INT 0
47295: PUSH
47296: EMPTY
47297: LIST
47298: LIST
47299: PUSH
47300: LD_INT 0
47302: PUSH
47303: LD_INT 1
47305: NEG
47306: PUSH
47307: EMPTY
47308: LIST
47309: LIST
47310: PUSH
47311: LD_INT 1
47313: PUSH
47314: LD_INT 0
47316: PUSH
47317: EMPTY
47318: LIST
47319: LIST
47320: PUSH
47321: LD_INT 1
47323: PUSH
47324: LD_INT 1
47326: PUSH
47327: EMPTY
47328: LIST
47329: LIST
47330: PUSH
47331: LD_INT 0
47333: PUSH
47334: LD_INT 1
47336: PUSH
47337: EMPTY
47338: LIST
47339: LIST
47340: PUSH
47341: LD_INT 1
47343: NEG
47344: PUSH
47345: LD_INT 0
47347: PUSH
47348: EMPTY
47349: LIST
47350: LIST
47351: PUSH
47352: LD_INT 1
47354: NEG
47355: PUSH
47356: LD_INT 1
47358: NEG
47359: PUSH
47360: EMPTY
47361: LIST
47362: LIST
47363: PUSH
47364: LD_INT 1
47366: NEG
47367: PUSH
47368: LD_INT 2
47370: NEG
47371: PUSH
47372: EMPTY
47373: LIST
47374: LIST
47375: PUSH
47376: LD_INT 0
47378: PUSH
47379: LD_INT 2
47381: NEG
47382: PUSH
47383: EMPTY
47384: LIST
47385: LIST
47386: PUSH
47387: LD_INT 1
47389: PUSH
47390: LD_INT 1
47392: NEG
47393: PUSH
47394: EMPTY
47395: LIST
47396: LIST
47397: PUSH
47398: LD_INT 2
47400: PUSH
47401: LD_INT 0
47403: PUSH
47404: EMPTY
47405: LIST
47406: LIST
47407: PUSH
47408: LD_INT 2
47410: PUSH
47411: LD_INT 1
47413: PUSH
47414: EMPTY
47415: LIST
47416: LIST
47417: PUSH
47418: LD_INT 2
47420: PUSH
47421: LD_INT 2
47423: PUSH
47424: EMPTY
47425: LIST
47426: LIST
47427: PUSH
47428: LD_INT 1
47430: PUSH
47431: LD_INT 2
47433: PUSH
47434: EMPTY
47435: LIST
47436: LIST
47437: PUSH
47438: LD_INT 0
47440: PUSH
47441: LD_INT 2
47443: PUSH
47444: EMPTY
47445: LIST
47446: LIST
47447: PUSH
47448: LD_INT 1
47450: NEG
47451: PUSH
47452: LD_INT 1
47454: PUSH
47455: EMPTY
47456: LIST
47457: LIST
47458: PUSH
47459: LD_INT 2
47461: NEG
47462: PUSH
47463: LD_INT 0
47465: PUSH
47466: EMPTY
47467: LIST
47468: LIST
47469: PUSH
47470: LD_INT 2
47472: NEG
47473: PUSH
47474: LD_INT 1
47476: NEG
47477: PUSH
47478: EMPTY
47479: LIST
47480: LIST
47481: PUSH
47482: LD_INT 2
47484: NEG
47485: PUSH
47486: LD_INT 2
47488: NEG
47489: PUSH
47490: EMPTY
47491: LIST
47492: LIST
47493: PUSH
47494: EMPTY
47495: LIST
47496: LIST
47497: LIST
47498: LIST
47499: LIST
47500: LIST
47501: LIST
47502: LIST
47503: LIST
47504: LIST
47505: LIST
47506: LIST
47507: LIST
47508: LIST
47509: LIST
47510: LIST
47511: LIST
47512: LIST
47513: LIST
47514: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47515: LD_ADDR_VAR 0 54
47519: PUSH
47520: LD_INT 0
47522: PUSH
47523: LD_INT 0
47525: PUSH
47526: EMPTY
47527: LIST
47528: LIST
47529: PUSH
47530: LD_INT 0
47532: PUSH
47533: LD_INT 1
47535: NEG
47536: PUSH
47537: EMPTY
47538: LIST
47539: LIST
47540: PUSH
47541: LD_INT 1
47543: PUSH
47544: LD_INT 0
47546: PUSH
47547: EMPTY
47548: LIST
47549: LIST
47550: PUSH
47551: LD_INT 1
47553: PUSH
47554: LD_INT 1
47556: PUSH
47557: EMPTY
47558: LIST
47559: LIST
47560: PUSH
47561: LD_INT 0
47563: PUSH
47564: LD_INT 1
47566: PUSH
47567: EMPTY
47568: LIST
47569: LIST
47570: PUSH
47571: LD_INT 1
47573: NEG
47574: PUSH
47575: LD_INT 0
47577: PUSH
47578: EMPTY
47579: LIST
47580: LIST
47581: PUSH
47582: LD_INT 1
47584: NEG
47585: PUSH
47586: LD_INT 1
47588: NEG
47589: PUSH
47590: EMPTY
47591: LIST
47592: LIST
47593: PUSH
47594: LD_INT 1
47596: NEG
47597: PUSH
47598: LD_INT 2
47600: NEG
47601: PUSH
47602: EMPTY
47603: LIST
47604: LIST
47605: PUSH
47606: LD_INT 0
47608: PUSH
47609: LD_INT 2
47611: NEG
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 1
47619: PUSH
47620: LD_INT 1
47622: NEG
47623: PUSH
47624: EMPTY
47625: LIST
47626: LIST
47627: PUSH
47628: LD_INT 2
47630: PUSH
47631: LD_INT 0
47633: PUSH
47634: EMPTY
47635: LIST
47636: LIST
47637: PUSH
47638: LD_INT 2
47640: PUSH
47641: LD_INT 1
47643: PUSH
47644: EMPTY
47645: LIST
47646: LIST
47647: PUSH
47648: LD_INT 2
47650: PUSH
47651: LD_INT 2
47653: PUSH
47654: EMPTY
47655: LIST
47656: LIST
47657: PUSH
47658: LD_INT 1
47660: PUSH
47661: LD_INT 2
47663: PUSH
47664: EMPTY
47665: LIST
47666: LIST
47667: PUSH
47668: LD_INT 0
47670: PUSH
47671: LD_INT 2
47673: PUSH
47674: EMPTY
47675: LIST
47676: LIST
47677: PUSH
47678: LD_INT 1
47680: NEG
47681: PUSH
47682: LD_INT 1
47684: PUSH
47685: EMPTY
47686: LIST
47687: LIST
47688: PUSH
47689: LD_INT 2
47691: NEG
47692: PUSH
47693: LD_INT 0
47695: PUSH
47696: EMPTY
47697: LIST
47698: LIST
47699: PUSH
47700: LD_INT 2
47702: NEG
47703: PUSH
47704: LD_INT 1
47706: NEG
47707: PUSH
47708: EMPTY
47709: LIST
47710: LIST
47711: PUSH
47712: LD_INT 2
47714: NEG
47715: PUSH
47716: LD_INT 2
47718: NEG
47719: PUSH
47720: EMPTY
47721: LIST
47722: LIST
47723: PUSH
47724: EMPTY
47725: LIST
47726: LIST
47727: LIST
47728: LIST
47729: LIST
47730: LIST
47731: LIST
47732: LIST
47733: LIST
47734: LIST
47735: LIST
47736: LIST
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47745: LD_ADDR_VAR 0 55
47749: PUSH
47750: LD_INT 0
47752: PUSH
47753: LD_INT 0
47755: PUSH
47756: EMPTY
47757: LIST
47758: LIST
47759: PUSH
47760: LD_INT 0
47762: PUSH
47763: LD_INT 1
47765: NEG
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: LD_INT 1
47773: PUSH
47774: LD_INT 0
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PUSH
47781: LD_INT 1
47783: PUSH
47784: LD_INT 1
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 0
47793: PUSH
47794: LD_INT 1
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 1
47803: NEG
47804: PUSH
47805: LD_INT 0
47807: PUSH
47808: EMPTY
47809: LIST
47810: LIST
47811: PUSH
47812: LD_INT 1
47814: NEG
47815: PUSH
47816: LD_INT 1
47818: NEG
47819: PUSH
47820: EMPTY
47821: LIST
47822: LIST
47823: PUSH
47824: LD_INT 1
47826: NEG
47827: PUSH
47828: LD_INT 2
47830: NEG
47831: PUSH
47832: EMPTY
47833: LIST
47834: LIST
47835: PUSH
47836: LD_INT 0
47838: PUSH
47839: LD_INT 2
47841: NEG
47842: PUSH
47843: EMPTY
47844: LIST
47845: LIST
47846: PUSH
47847: LD_INT 1
47849: PUSH
47850: LD_INT 1
47852: NEG
47853: PUSH
47854: EMPTY
47855: LIST
47856: LIST
47857: PUSH
47858: LD_INT 2
47860: PUSH
47861: LD_INT 0
47863: PUSH
47864: EMPTY
47865: LIST
47866: LIST
47867: PUSH
47868: LD_INT 2
47870: PUSH
47871: LD_INT 1
47873: PUSH
47874: EMPTY
47875: LIST
47876: LIST
47877: PUSH
47878: LD_INT 2
47880: PUSH
47881: LD_INT 2
47883: PUSH
47884: EMPTY
47885: LIST
47886: LIST
47887: PUSH
47888: LD_INT 1
47890: PUSH
47891: LD_INT 2
47893: PUSH
47894: EMPTY
47895: LIST
47896: LIST
47897: PUSH
47898: LD_INT 0
47900: PUSH
47901: LD_INT 2
47903: PUSH
47904: EMPTY
47905: LIST
47906: LIST
47907: PUSH
47908: LD_INT 1
47910: NEG
47911: PUSH
47912: LD_INT 1
47914: PUSH
47915: EMPTY
47916: LIST
47917: LIST
47918: PUSH
47919: LD_INT 2
47921: NEG
47922: PUSH
47923: LD_INT 0
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 2
47932: NEG
47933: PUSH
47934: LD_INT 1
47936: NEG
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: LD_INT 2
47944: NEG
47945: PUSH
47946: LD_INT 2
47948: NEG
47949: PUSH
47950: EMPTY
47951: LIST
47952: LIST
47953: PUSH
47954: EMPTY
47955: LIST
47956: LIST
47957: LIST
47958: LIST
47959: LIST
47960: LIST
47961: LIST
47962: LIST
47963: LIST
47964: LIST
47965: LIST
47966: LIST
47967: LIST
47968: LIST
47969: LIST
47970: LIST
47971: LIST
47972: LIST
47973: LIST
47974: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
47975: LD_ADDR_VAR 0 56
47979: PUSH
47980: LD_INT 0
47982: PUSH
47983: LD_INT 0
47985: PUSH
47986: EMPTY
47987: LIST
47988: LIST
47989: PUSH
47990: LD_INT 0
47992: PUSH
47993: LD_INT 1
47995: NEG
47996: PUSH
47997: EMPTY
47998: LIST
47999: LIST
48000: PUSH
48001: LD_INT 1
48003: PUSH
48004: LD_INT 0
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: PUSH
48011: LD_INT 1
48013: PUSH
48014: LD_INT 1
48016: PUSH
48017: EMPTY
48018: LIST
48019: LIST
48020: PUSH
48021: LD_INT 0
48023: PUSH
48024: LD_INT 1
48026: PUSH
48027: EMPTY
48028: LIST
48029: LIST
48030: PUSH
48031: LD_INT 1
48033: NEG
48034: PUSH
48035: LD_INT 0
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: PUSH
48042: LD_INT 1
48044: NEG
48045: PUSH
48046: LD_INT 1
48048: NEG
48049: PUSH
48050: EMPTY
48051: LIST
48052: LIST
48053: PUSH
48054: LD_INT 1
48056: NEG
48057: PUSH
48058: LD_INT 2
48060: NEG
48061: PUSH
48062: EMPTY
48063: LIST
48064: LIST
48065: PUSH
48066: LD_INT 0
48068: PUSH
48069: LD_INT 2
48071: NEG
48072: PUSH
48073: EMPTY
48074: LIST
48075: LIST
48076: PUSH
48077: LD_INT 1
48079: PUSH
48080: LD_INT 1
48082: NEG
48083: PUSH
48084: EMPTY
48085: LIST
48086: LIST
48087: PUSH
48088: LD_INT 2
48090: PUSH
48091: LD_INT 0
48093: PUSH
48094: EMPTY
48095: LIST
48096: LIST
48097: PUSH
48098: LD_INT 2
48100: PUSH
48101: LD_INT 1
48103: PUSH
48104: EMPTY
48105: LIST
48106: LIST
48107: PUSH
48108: LD_INT 2
48110: PUSH
48111: LD_INT 2
48113: PUSH
48114: EMPTY
48115: LIST
48116: LIST
48117: PUSH
48118: LD_INT 1
48120: PUSH
48121: LD_INT 2
48123: PUSH
48124: EMPTY
48125: LIST
48126: LIST
48127: PUSH
48128: LD_INT 0
48130: PUSH
48131: LD_INT 2
48133: PUSH
48134: EMPTY
48135: LIST
48136: LIST
48137: PUSH
48138: LD_INT 1
48140: NEG
48141: PUSH
48142: LD_INT 1
48144: PUSH
48145: EMPTY
48146: LIST
48147: LIST
48148: PUSH
48149: LD_INT 2
48151: NEG
48152: PUSH
48153: LD_INT 0
48155: PUSH
48156: EMPTY
48157: LIST
48158: LIST
48159: PUSH
48160: LD_INT 2
48162: NEG
48163: PUSH
48164: LD_INT 1
48166: NEG
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: LD_INT 2
48174: NEG
48175: PUSH
48176: LD_INT 2
48178: NEG
48179: PUSH
48180: EMPTY
48181: LIST
48182: LIST
48183: PUSH
48184: EMPTY
48185: LIST
48186: LIST
48187: LIST
48188: LIST
48189: LIST
48190: LIST
48191: LIST
48192: LIST
48193: LIST
48194: LIST
48195: LIST
48196: LIST
48197: LIST
48198: LIST
48199: LIST
48200: LIST
48201: LIST
48202: LIST
48203: LIST
48204: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48205: LD_ADDR_VAR 0 57
48209: PUSH
48210: LD_INT 0
48212: PUSH
48213: LD_INT 0
48215: PUSH
48216: EMPTY
48217: LIST
48218: LIST
48219: PUSH
48220: LD_INT 0
48222: PUSH
48223: LD_INT 1
48225: NEG
48226: PUSH
48227: EMPTY
48228: LIST
48229: LIST
48230: PUSH
48231: LD_INT 1
48233: PUSH
48234: LD_INT 0
48236: PUSH
48237: EMPTY
48238: LIST
48239: LIST
48240: PUSH
48241: LD_INT 1
48243: PUSH
48244: LD_INT 1
48246: PUSH
48247: EMPTY
48248: LIST
48249: LIST
48250: PUSH
48251: LD_INT 0
48253: PUSH
48254: LD_INT 1
48256: PUSH
48257: EMPTY
48258: LIST
48259: LIST
48260: PUSH
48261: LD_INT 1
48263: NEG
48264: PUSH
48265: LD_INT 0
48267: PUSH
48268: EMPTY
48269: LIST
48270: LIST
48271: PUSH
48272: LD_INT 1
48274: NEG
48275: PUSH
48276: LD_INT 1
48278: NEG
48279: PUSH
48280: EMPTY
48281: LIST
48282: LIST
48283: PUSH
48284: LD_INT 1
48286: NEG
48287: PUSH
48288: LD_INT 2
48290: NEG
48291: PUSH
48292: EMPTY
48293: LIST
48294: LIST
48295: PUSH
48296: LD_INT 0
48298: PUSH
48299: LD_INT 2
48301: NEG
48302: PUSH
48303: EMPTY
48304: LIST
48305: LIST
48306: PUSH
48307: LD_INT 1
48309: PUSH
48310: LD_INT 1
48312: NEG
48313: PUSH
48314: EMPTY
48315: LIST
48316: LIST
48317: PUSH
48318: LD_INT 2
48320: PUSH
48321: LD_INT 0
48323: PUSH
48324: EMPTY
48325: LIST
48326: LIST
48327: PUSH
48328: LD_INT 2
48330: PUSH
48331: LD_INT 1
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: LD_INT 2
48340: PUSH
48341: LD_INT 2
48343: PUSH
48344: EMPTY
48345: LIST
48346: LIST
48347: PUSH
48348: LD_INT 1
48350: PUSH
48351: LD_INT 2
48353: PUSH
48354: EMPTY
48355: LIST
48356: LIST
48357: PUSH
48358: LD_INT 0
48360: PUSH
48361: LD_INT 2
48363: PUSH
48364: EMPTY
48365: LIST
48366: LIST
48367: PUSH
48368: LD_INT 1
48370: NEG
48371: PUSH
48372: LD_INT 1
48374: PUSH
48375: EMPTY
48376: LIST
48377: LIST
48378: PUSH
48379: LD_INT 2
48381: NEG
48382: PUSH
48383: LD_INT 0
48385: PUSH
48386: EMPTY
48387: LIST
48388: LIST
48389: PUSH
48390: LD_INT 2
48392: NEG
48393: PUSH
48394: LD_INT 1
48396: NEG
48397: PUSH
48398: EMPTY
48399: LIST
48400: LIST
48401: PUSH
48402: LD_INT 2
48404: NEG
48405: PUSH
48406: LD_INT 2
48408: NEG
48409: PUSH
48410: EMPTY
48411: LIST
48412: LIST
48413: PUSH
48414: EMPTY
48415: LIST
48416: LIST
48417: LIST
48418: LIST
48419: LIST
48420: LIST
48421: LIST
48422: LIST
48423: LIST
48424: LIST
48425: LIST
48426: LIST
48427: LIST
48428: LIST
48429: LIST
48430: LIST
48431: LIST
48432: LIST
48433: LIST
48434: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48435: LD_ADDR_VAR 0 58
48439: PUSH
48440: LD_INT 0
48442: PUSH
48443: LD_INT 0
48445: PUSH
48446: EMPTY
48447: LIST
48448: LIST
48449: PUSH
48450: LD_INT 0
48452: PUSH
48453: LD_INT 1
48455: NEG
48456: PUSH
48457: EMPTY
48458: LIST
48459: LIST
48460: PUSH
48461: LD_INT 1
48463: PUSH
48464: LD_INT 0
48466: PUSH
48467: EMPTY
48468: LIST
48469: LIST
48470: PUSH
48471: LD_INT 1
48473: PUSH
48474: LD_INT 1
48476: PUSH
48477: EMPTY
48478: LIST
48479: LIST
48480: PUSH
48481: LD_INT 0
48483: PUSH
48484: LD_INT 1
48486: PUSH
48487: EMPTY
48488: LIST
48489: LIST
48490: PUSH
48491: LD_INT 1
48493: NEG
48494: PUSH
48495: LD_INT 0
48497: PUSH
48498: EMPTY
48499: LIST
48500: LIST
48501: PUSH
48502: LD_INT 1
48504: NEG
48505: PUSH
48506: LD_INT 1
48508: NEG
48509: PUSH
48510: EMPTY
48511: LIST
48512: LIST
48513: PUSH
48514: LD_INT 1
48516: NEG
48517: PUSH
48518: LD_INT 2
48520: NEG
48521: PUSH
48522: EMPTY
48523: LIST
48524: LIST
48525: PUSH
48526: LD_INT 0
48528: PUSH
48529: LD_INT 2
48531: NEG
48532: PUSH
48533: EMPTY
48534: LIST
48535: LIST
48536: PUSH
48537: LD_INT 1
48539: PUSH
48540: LD_INT 1
48542: NEG
48543: PUSH
48544: EMPTY
48545: LIST
48546: LIST
48547: PUSH
48548: LD_INT 2
48550: PUSH
48551: LD_INT 0
48553: PUSH
48554: EMPTY
48555: LIST
48556: LIST
48557: PUSH
48558: LD_INT 2
48560: PUSH
48561: LD_INT 1
48563: PUSH
48564: EMPTY
48565: LIST
48566: LIST
48567: PUSH
48568: LD_INT 2
48570: PUSH
48571: LD_INT 2
48573: PUSH
48574: EMPTY
48575: LIST
48576: LIST
48577: PUSH
48578: LD_INT 1
48580: PUSH
48581: LD_INT 2
48583: PUSH
48584: EMPTY
48585: LIST
48586: LIST
48587: PUSH
48588: LD_INT 0
48590: PUSH
48591: LD_INT 2
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: PUSH
48598: LD_INT 1
48600: NEG
48601: PUSH
48602: LD_INT 1
48604: PUSH
48605: EMPTY
48606: LIST
48607: LIST
48608: PUSH
48609: LD_INT 2
48611: NEG
48612: PUSH
48613: LD_INT 0
48615: PUSH
48616: EMPTY
48617: LIST
48618: LIST
48619: PUSH
48620: LD_INT 2
48622: NEG
48623: PUSH
48624: LD_INT 1
48626: NEG
48627: PUSH
48628: EMPTY
48629: LIST
48630: LIST
48631: PUSH
48632: LD_INT 2
48634: NEG
48635: PUSH
48636: LD_INT 2
48638: NEG
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PUSH
48644: EMPTY
48645: LIST
48646: LIST
48647: LIST
48648: LIST
48649: LIST
48650: LIST
48651: LIST
48652: LIST
48653: LIST
48654: LIST
48655: LIST
48656: LIST
48657: LIST
48658: LIST
48659: LIST
48660: LIST
48661: LIST
48662: LIST
48663: LIST
48664: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48665: LD_ADDR_VAR 0 59
48669: PUSH
48670: LD_INT 0
48672: PUSH
48673: LD_INT 0
48675: PUSH
48676: EMPTY
48677: LIST
48678: LIST
48679: PUSH
48680: LD_INT 0
48682: PUSH
48683: LD_INT 1
48685: NEG
48686: PUSH
48687: EMPTY
48688: LIST
48689: LIST
48690: PUSH
48691: LD_INT 1
48693: PUSH
48694: LD_INT 0
48696: PUSH
48697: EMPTY
48698: LIST
48699: LIST
48700: PUSH
48701: LD_INT 1
48703: PUSH
48704: LD_INT 1
48706: PUSH
48707: EMPTY
48708: LIST
48709: LIST
48710: PUSH
48711: LD_INT 0
48713: PUSH
48714: LD_INT 1
48716: PUSH
48717: EMPTY
48718: LIST
48719: LIST
48720: PUSH
48721: LD_INT 1
48723: NEG
48724: PUSH
48725: LD_INT 0
48727: PUSH
48728: EMPTY
48729: LIST
48730: LIST
48731: PUSH
48732: LD_INT 1
48734: NEG
48735: PUSH
48736: LD_INT 1
48738: NEG
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: EMPTY
48745: LIST
48746: LIST
48747: LIST
48748: LIST
48749: LIST
48750: LIST
48751: LIST
48752: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48753: LD_ADDR_VAR 0 60
48757: PUSH
48758: LD_INT 0
48760: PUSH
48761: LD_INT 0
48763: PUSH
48764: EMPTY
48765: LIST
48766: LIST
48767: PUSH
48768: LD_INT 0
48770: PUSH
48771: LD_INT 1
48773: NEG
48774: PUSH
48775: EMPTY
48776: LIST
48777: LIST
48778: PUSH
48779: LD_INT 1
48781: PUSH
48782: LD_INT 0
48784: PUSH
48785: EMPTY
48786: LIST
48787: LIST
48788: PUSH
48789: LD_INT 1
48791: PUSH
48792: LD_INT 1
48794: PUSH
48795: EMPTY
48796: LIST
48797: LIST
48798: PUSH
48799: LD_INT 0
48801: PUSH
48802: LD_INT 1
48804: PUSH
48805: EMPTY
48806: LIST
48807: LIST
48808: PUSH
48809: LD_INT 1
48811: NEG
48812: PUSH
48813: LD_INT 0
48815: PUSH
48816: EMPTY
48817: LIST
48818: LIST
48819: PUSH
48820: LD_INT 1
48822: NEG
48823: PUSH
48824: LD_INT 1
48826: NEG
48827: PUSH
48828: EMPTY
48829: LIST
48830: LIST
48831: PUSH
48832: EMPTY
48833: LIST
48834: LIST
48835: LIST
48836: LIST
48837: LIST
48838: LIST
48839: LIST
48840: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48841: LD_ADDR_VAR 0 61
48845: PUSH
48846: LD_INT 0
48848: PUSH
48849: LD_INT 0
48851: PUSH
48852: EMPTY
48853: LIST
48854: LIST
48855: PUSH
48856: LD_INT 0
48858: PUSH
48859: LD_INT 1
48861: NEG
48862: PUSH
48863: EMPTY
48864: LIST
48865: LIST
48866: PUSH
48867: LD_INT 1
48869: PUSH
48870: LD_INT 0
48872: PUSH
48873: EMPTY
48874: LIST
48875: LIST
48876: PUSH
48877: LD_INT 1
48879: PUSH
48880: LD_INT 1
48882: PUSH
48883: EMPTY
48884: LIST
48885: LIST
48886: PUSH
48887: LD_INT 0
48889: PUSH
48890: LD_INT 1
48892: PUSH
48893: EMPTY
48894: LIST
48895: LIST
48896: PUSH
48897: LD_INT 1
48899: NEG
48900: PUSH
48901: LD_INT 0
48903: PUSH
48904: EMPTY
48905: LIST
48906: LIST
48907: PUSH
48908: LD_INT 1
48910: NEG
48911: PUSH
48912: LD_INT 1
48914: NEG
48915: PUSH
48916: EMPTY
48917: LIST
48918: LIST
48919: PUSH
48920: EMPTY
48921: LIST
48922: LIST
48923: LIST
48924: LIST
48925: LIST
48926: LIST
48927: LIST
48928: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
48929: LD_ADDR_VAR 0 62
48933: PUSH
48934: LD_INT 0
48936: PUSH
48937: LD_INT 0
48939: PUSH
48940: EMPTY
48941: LIST
48942: LIST
48943: PUSH
48944: LD_INT 0
48946: PUSH
48947: LD_INT 1
48949: NEG
48950: PUSH
48951: EMPTY
48952: LIST
48953: LIST
48954: PUSH
48955: LD_INT 1
48957: PUSH
48958: LD_INT 0
48960: PUSH
48961: EMPTY
48962: LIST
48963: LIST
48964: PUSH
48965: LD_INT 1
48967: PUSH
48968: LD_INT 1
48970: PUSH
48971: EMPTY
48972: LIST
48973: LIST
48974: PUSH
48975: LD_INT 0
48977: PUSH
48978: LD_INT 1
48980: PUSH
48981: EMPTY
48982: LIST
48983: LIST
48984: PUSH
48985: LD_INT 1
48987: NEG
48988: PUSH
48989: LD_INT 0
48991: PUSH
48992: EMPTY
48993: LIST
48994: LIST
48995: PUSH
48996: LD_INT 1
48998: NEG
48999: PUSH
49000: LD_INT 1
49002: NEG
49003: PUSH
49004: EMPTY
49005: LIST
49006: LIST
49007: PUSH
49008: EMPTY
49009: LIST
49010: LIST
49011: LIST
49012: LIST
49013: LIST
49014: LIST
49015: LIST
49016: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49017: LD_ADDR_VAR 0 63
49021: PUSH
49022: LD_INT 0
49024: PUSH
49025: LD_INT 0
49027: PUSH
49028: EMPTY
49029: LIST
49030: LIST
49031: PUSH
49032: LD_INT 0
49034: PUSH
49035: LD_INT 1
49037: NEG
49038: PUSH
49039: EMPTY
49040: LIST
49041: LIST
49042: PUSH
49043: LD_INT 1
49045: PUSH
49046: LD_INT 0
49048: PUSH
49049: EMPTY
49050: LIST
49051: LIST
49052: PUSH
49053: LD_INT 1
49055: PUSH
49056: LD_INT 1
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 0
49065: PUSH
49066: LD_INT 1
49068: PUSH
49069: EMPTY
49070: LIST
49071: LIST
49072: PUSH
49073: LD_INT 1
49075: NEG
49076: PUSH
49077: LD_INT 0
49079: PUSH
49080: EMPTY
49081: LIST
49082: LIST
49083: PUSH
49084: LD_INT 1
49086: NEG
49087: PUSH
49088: LD_INT 1
49090: NEG
49091: PUSH
49092: EMPTY
49093: LIST
49094: LIST
49095: PUSH
49096: EMPTY
49097: LIST
49098: LIST
49099: LIST
49100: LIST
49101: LIST
49102: LIST
49103: LIST
49104: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
49105: LD_ADDR_VAR 0 64
49109: PUSH
49110: LD_INT 0
49112: PUSH
49113: LD_INT 0
49115: PUSH
49116: EMPTY
49117: LIST
49118: LIST
49119: PUSH
49120: LD_INT 0
49122: PUSH
49123: LD_INT 1
49125: NEG
49126: PUSH
49127: EMPTY
49128: LIST
49129: LIST
49130: PUSH
49131: LD_INT 1
49133: PUSH
49134: LD_INT 0
49136: PUSH
49137: EMPTY
49138: LIST
49139: LIST
49140: PUSH
49141: LD_INT 1
49143: PUSH
49144: LD_INT 1
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: PUSH
49151: LD_INT 0
49153: PUSH
49154: LD_INT 1
49156: PUSH
49157: EMPTY
49158: LIST
49159: LIST
49160: PUSH
49161: LD_INT 1
49163: NEG
49164: PUSH
49165: LD_INT 0
49167: PUSH
49168: EMPTY
49169: LIST
49170: LIST
49171: PUSH
49172: LD_INT 1
49174: NEG
49175: PUSH
49176: LD_INT 1
49178: NEG
49179: PUSH
49180: EMPTY
49181: LIST
49182: LIST
49183: PUSH
49184: EMPTY
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: LIST
49191: LIST
49192: ST_TO_ADDR
// end ; 1 :
49193: GO 55090
49195: LD_INT 1
49197: DOUBLE
49198: EQUAL
49199: IFTRUE 49203
49201: GO 51826
49203: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49204: LD_ADDR_VAR 0 11
49208: PUSH
49209: LD_INT 1
49211: NEG
49212: PUSH
49213: LD_INT 3
49215: NEG
49216: PUSH
49217: EMPTY
49218: LIST
49219: LIST
49220: PUSH
49221: LD_INT 0
49223: PUSH
49224: LD_INT 3
49226: NEG
49227: PUSH
49228: EMPTY
49229: LIST
49230: LIST
49231: PUSH
49232: LD_INT 1
49234: PUSH
49235: LD_INT 2
49237: NEG
49238: PUSH
49239: EMPTY
49240: LIST
49241: LIST
49242: PUSH
49243: EMPTY
49244: LIST
49245: LIST
49246: LIST
49247: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49248: LD_ADDR_VAR 0 12
49252: PUSH
49253: LD_INT 2
49255: PUSH
49256: LD_INT 1
49258: NEG
49259: PUSH
49260: EMPTY
49261: LIST
49262: LIST
49263: PUSH
49264: LD_INT 3
49266: PUSH
49267: LD_INT 0
49269: PUSH
49270: EMPTY
49271: LIST
49272: LIST
49273: PUSH
49274: LD_INT 3
49276: PUSH
49277: LD_INT 1
49279: PUSH
49280: EMPTY
49281: LIST
49282: LIST
49283: PUSH
49284: EMPTY
49285: LIST
49286: LIST
49287: LIST
49288: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49289: LD_ADDR_VAR 0 13
49293: PUSH
49294: LD_INT 3
49296: PUSH
49297: LD_INT 2
49299: PUSH
49300: EMPTY
49301: LIST
49302: LIST
49303: PUSH
49304: LD_INT 3
49306: PUSH
49307: LD_INT 3
49309: PUSH
49310: EMPTY
49311: LIST
49312: LIST
49313: PUSH
49314: LD_INT 2
49316: PUSH
49317: LD_INT 3
49319: PUSH
49320: EMPTY
49321: LIST
49322: LIST
49323: PUSH
49324: EMPTY
49325: LIST
49326: LIST
49327: LIST
49328: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49329: LD_ADDR_VAR 0 14
49333: PUSH
49334: LD_INT 1
49336: PUSH
49337: LD_INT 3
49339: PUSH
49340: EMPTY
49341: LIST
49342: LIST
49343: PUSH
49344: LD_INT 0
49346: PUSH
49347: LD_INT 3
49349: PUSH
49350: EMPTY
49351: LIST
49352: LIST
49353: PUSH
49354: LD_INT 1
49356: NEG
49357: PUSH
49358: LD_INT 2
49360: PUSH
49361: EMPTY
49362: LIST
49363: LIST
49364: PUSH
49365: EMPTY
49366: LIST
49367: LIST
49368: LIST
49369: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49370: LD_ADDR_VAR 0 15
49374: PUSH
49375: LD_INT 2
49377: NEG
49378: PUSH
49379: LD_INT 1
49381: PUSH
49382: EMPTY
49383: LIST
49384: LIST
49385: PUSH
49386: LD_INT 3
49388: NEG
49389: PUSH
49390: LD_INT 0
49392: PUSH
49393: EMPTY
49394: LIST
49395: LIST
49396: PUSH
49397: LD_INT 3
49399: NEG
49400: PUSH
49401: LD_INT 1
49403: NEG
49404: PUSH
49405: EMPTY
49406: LIST
49407: LIST
49408: PUSH
49409: EMPTY
49410: LIST
49411: LIST
49412: LIST
49413: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49414: LD_ADDR_VAR 0 16
49418: PUSH
49419: LD_INT 2
49421: NEG
49422: PUSH
49423: LD_INT 3
49425: NEG
49426: PUSH
49427: EMPTY
49428: LIST
49429: LIST
49430: PUSH
49431: LD_INT 3
49433: NEG
49434: PUSH
49435: LD_INT 2
49437: NEG
49438: PUSH
49439: EMPTY
49440: LIST
49441: LIST
49442: PUSH
49443: LD_INT 3
49445: NEG
49446: PUSH
49447: LD_INT 3
49449: NEG
49450: PUSH
49451: EMPTY
49452: LIST
49453: LIST
49454: PUSH
49455: EMPTY
49456: LIST
49457: LIST
49458: LIST
49459: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
49460: LD_ADDR_VAR 0 17
49464: PUSH
49465: LD_INT 1
49467: NEG
49468: PUSH
49469: LD_INT 3
49471: NEG
49472: PUSH
49473: EMPTY
49474: LIST
49475: LIST
49476: PUSH
49477: LD_INT 0
49479: PUSH
49480: LD_INT 3
49482: NEG
49483: PUSH
49484: EMPTY
49485: LIST
49486: LIST
49487: PUSH
49488: LD_INT 1
49490: PUSH
49491: LD_INT 2
49493: NEG
49494: PUSH
49495: EMPTY
49496: LIST
49497: LIST
49498: PUSH
49499: EMPTY
49500: LIST
49501: LIST
49502: LIST
49503: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
49504: LD_ADDR_VAR 0 18
49508: PUSH
49509: LD_INT 2
49511: PUSH
49512: LD_INT 1
49514: NEG
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 3
49522: PUSH
49523: LD_INT 0
49525: PUSH
49526: EMPTY
49527: LIST
49528: LIST
49529: PUSH
49530: LD_INT 3
49532: PUSH
49533: LD_INT 1
49535: PUSH
49536: EMPTY
49537: LIST
49538: LIST
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: LIST
49544: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
49545: LD_ADDR_VAR 0 19
49549: PUSH
49550: LD_INT 3
49552: PUSH
49553: LD_INT 2
49555: PUSH
49556: EMPTY
49557: LIST
49558: LIST
49559: PUSH
49560: LD_INT 3
49562: PUSH
49563: LD_INT 3
49565: PUSH
49566: EMPTY
49567: LIST
49568: LIST
49569: PUSH
49570: LD_INT 2
49572: PUSH
49573: LD_INT 3
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: EMPTY
49581: LIST
49582: LIST
49583: LIST
49584: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
49585: LD_ADDR_VAR 0 20
49589: PUSH
49590: LD_INT 1
49592: PUSH
49593: LD_INT 3
49595: PUSH
49596: EMPTY
49597: LIST
49598: LIST
49599: PUSH
49600: LD_INT 0
49602: PUSH
49603: LD_INT 3
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PUSH
49610: LD_INT 1
49612: NEG
49613: PUSH
49614: LD_INT 2
49616: PUSH
49617: EMPTY
49618: LIST
49619: LIST
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: LIST
49625: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
49626: LD_ADDR_VAR 0 21
49630: PUSH
49631: LD_INT 2
49633: NEG
49634: PUSH
49635: LD_INT 1
49637: PUSH
49638: EMPTY
49639: LIST
49640: LIST
49641: PUSH
49642: LD_INT 3
49644: NEG
49645: PUSH
49646: LD_INT 0
49648: PUSH
49649: EMPTY
49650: LIST
49651: LIST
49652: PUSH
49653: LD_INT 3
49655: NEG
49656: PUSH
49657: LD_INT 1
49659: NEG
49660: PUSH
49661: EMPTY
49662: LIST
49663: LIST
49664: PUSH
49665: EMPTY
49666: LIST
49667: LIST
49668: LIST
49669: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
49670: LD_ADDR_VAR 0 22
49674: PUSH
49675: LD_INT 2
49677: NEG
49678: PUSH
49679: LD_INT 3
49681: NEG
49682: PUSH
49683: EMPTY
49684: LIST
49685: LIST
49686: PUSH
49687: LD_INT 3
49689: NEG
49690: PUSH
49691: LD_INT 2
49693: NEG
49694: PUSH
49695: EMPTY
49696: LIST
49697: LIST
49698: PUSH
49699: LD_INT 3
49701: NEG
49702: PUSH
49703: LD_INT 3
49705: NEG
49706: PUSH
49707: EMPTY
49708: LIST
49709: LIST
49710: PUSH
49711: EMPTY
49712: LIST
49713: LIST
49714: LIST
49715: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
49716: LD_ADDR_VAR 0 23
49720: PUSH
49721: LD_INT 0
49723: PUSH
49724: LD_INT 3
49726: NEG
49727: PUSH
49728: EMPTY
49729: LIST
49730: LIST
49731: PUSH
49732: LD_INT 1
49734: NEG
49735: PUSH
49736: LD_INT 4
49738: NEG
49739: PUSH
49740: EMPTY
49741: LIST
49742: LIST
49743: PUSH
49744: LD_INT 1
49746: PUSH
49747: LD_INT 3
49749: NEG
49750: PUSH
49751: EMPTY
49752: LIST
49753: LIST
49754: PUSH
49755: EMPTY
49756: LIST
49757: LIST
49758: LIST
49759: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
49760: LD_ADDR_VAR 0 24
49764: PUSH
49765: LD_INT 3
49767: PUSH
49768: LD_INT 0
49770: PUSH
49771: EMPTY
49772: LIST
49773: LIST
49774: PUSH
49775: LD_INT 3
49777: PUSH
49778: LD_INT 1
49780: NEG
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 4
49788: PUSH
49789: LD_INT 1
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: EMPTY
49797: LIST
49798: LIST
49799: LIST
49800: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
49801: LD_ADDR_VAR 0 25
49805: PUSH
49806: LD_INT 3
49808: PUSH
49809: LD_INT 3
49811: PUSH
49812: EMPTY
49813: LIST
49814: LIST
49815: PUSH
49816: LD_INT 4
49818: PUSH
49819: LD_INT 3
49821: PUSH
49822: EMPTY
49823: LIST
49824: LIST
49825: PUSH
49826: LD_INT 3
49828: PUSH
49829: LD_INT 4
49831: PUSH
49832: EMPTY
49833: LIST
49834: LIST
49835: PUSH
49836: EMPTY
49837: LIST
49838: LIST
49839: LIST
49840: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
49841: LD_ADDR_VAR 0 26
49845: PUSH
49846: LD_INT 0
49848: PUSH
49849: LD_INT 3
49851: PUSH
49852: EMPTY
49853: LIST
49854: LIST
49855: PUSH
49856: LD_INT 1
49858: PUSH
49859: LD_INT 4
49861: PUSH
49862: EMPTY
49863: LIST
49864: LIST
49865: PUSH
49866: LD_INT 1
49868: NEG
49869: PUSH
49870: LD_INT 3
49872: PUSH
49873: EMPTY
49874: LIST
49875: LIST
49876: PUSH
49877: EMPTY
49878: LIST
49879: LIST
49880: LIST
49881: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
49882: LD_ADDR_VAR 0 27
49886: PUSH
49887: LD_INT 3
49889: NEG
49890: PUSH
49891: LD_INT 0
49893: PUSH
49894: EMPTY
49895: LIST
49896: LIST
49897: PUSH
49898: LD_INT 3
49900: NEG
49901: PUSH
49902: LD_INT 1
49904: PUSH
49905: EMPTY
49906: LIST
49907: LIST
49908: PUSH
49909: LD_INT 4
49911: NEG
49912: PUSH
49913: LD_INT 1
49915: NEG
49916: PUSH
49917: EMPTY
49918: LIST
49919: LIST
49920: PUSH
49921: EMPTY
49922: LIST
49923: LIST
49924: LIST
49925: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
49926: LD_ADDR_VAR 0 28
49930: PUSH
49931: LD_INT 3
49933: NEG
49934: PUSH
49935: LD_INT 3
49937: NEG
49938: PUSH
49939: EMPTY
49940: LIST
49941: LIST
49942: PUSH
49943: LD_INT 3
49945: NEG
49946: PUSH
49947: LD_INT 4
49949: NEG
49950: PUSH
49951: EMPTY
49952: LIST
49953: LIST
49954: PUSH
49955: LD_INT 4
49957: NEG
49958: PUSH
49959: LD_INT 3
49961: NEG
49962: PUSH
49963: EMPTY
49964: LIST
49965: LIST
49966: PUSH
49967: EMPTY
49968: LIST
49969: LIST
49970: LIST
49971: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
49972: LD_ADDR_VAR 0 29
49976: PUSH
49977: LD_INT 1
49979: NEG
49980: PUSH
49981: LD_INT 3
49983: NEG
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 0
49991: PUSH
49992: LD_INT 3
49994: NEG
49995: PUSH
49996: EMPTY
49997: LIST
49998: LIST
49999: PUSH
50000: LD_INT 1
50002: PUSH
50003: LD_INT 2
50005: NEG
50006: PUSH
50007: EMPTY
50008: LIST
50009: LIST
50010: PUSH
50011: LD_INT 1
50013: NEG
50014: PUSH
50015: LD_INT 4
50017: NEG
50018: PUSH
50019: EMPTY
50020: LIST
50021: LIST
50022: PUSH
50023: LD_INT 0
50025: PUSH
50026: LD_INT 4
50028: NEG
50029: PUSH
50030: EMPTY
50031: LIST
50032: LIST
50033: PUSH
50034: LD_INT 1
50036: PUSH
50037: LD_INT 3
50039: NEG
50040: PUSH
50041: EMPTY
50042: LIST
50043: LIST
50044: PUSH
50045: LD_INT 1
50047: NEG
50048: PUSH
50049: LD_INT 5
50051: NEG
50052: PUSH
50053: EMPTY
50054: LIST
50055: LIST
50056: PUSH
50057: LD_INT 0
50059: PUSH
50060: LD_INT 5
50062: NEG
50063: PUSH
50064: EMPTY
50065: LIST
50066: LIST
50067: PUSH
50068: LD_INT 1
50070: PUSH
50071: LD_INT 4
50073: NEG
50074: PUSH
50075: EMPTY
50076: LIST
50077: LIST
50078: PUSH
50079: LD_INT 1
50081: NEG
50082: PUSH
50083: LD_INT 6
50085: NEG
50086: PUSH
50087: EMPTY
50088: LIST
50089: LIST
50090: PUSH
50091: LD_INT 0
50093: PUSH
50094: LD_INT 6
50096: NEG
50097: PUSH
50098: EMPTY
50099: LIST
50100: LIST
50101: PUSH
50102: LD_INT 1
50104: PUSH
50105: LD_INT 5
50107: NEG
50108: PUSH
50109: EMPTY
50110: LIST
50111: LIST
50112: PUSH
50113: EMPTY
50114: LIST
50115: LIST
50116: LIST
50117: LIST
50118: LIST
50119: LIST
50120: LIST
50121: LIST
50122: LIST
50123: LIST
50124: LIST
50125: LIST
50126: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
50127: LD_ADDR_VAR 0 30
50131: PUSH
50132: LD_INT 2
50134: PUSH
50135: LD_INT 1
50137: NEG
50138: PUSH
50139: EMPTY
50140: LIST
50141: LIST
50142: PUSH
50143: LD_INT 3
50145: PUSH
50146: LD_INT 0
50148: PUSH
50149: EMPTY
50150: LIST
50151: LIST
50152: PUSH
50153: LD_INT 3
50155: PUSH
50156: LD_INT 1
50158: PUSH
50159: EMPTY
50160: LIST
50161: LIST
50162: PUSH
50163: LD_INT 3
50165: PUSH
50166: LD_INT 1
50168: NEG
50169: PUSH
50170: EMPTY
50171: LIST
50172: LIST
50173: PUSH
50174: LD_INT 4
50176: PUSH
50177: LD_INT 0
50179: PUSH
50180: EMPTY
50181: LIST
50182: LIST
50183: PUSH
50184: LD_INT 4
50186: PUSH
50187: LD_INT 1
50189: PUSH
50190: EMPTY
50191: LIST
50192: LIST
50193: PUSH
50194: LD_INT 4
50196: PUSH
50197: LD_INT 1
50199: NEG
50200: PUSH
50201: EMPTY
50202: LIST
50203: LIST
50204: PUSH
50205: LD_INT 5
50207: PUSH
50208: LD_INT 0
50210: PUSH
50211: EMPTY
50212: LIST
50213: LIST
50214: PUSH
50215: LD_INT 5
50217: PUSH
50218: LD_INT 1
50220: PUSH
50221: EMPTY
50222: LIST
50223: LIST
50224: PUSH
50225: LD_INT 5
50227: PUSH
50228: LD_INT 1
50230: NEG
50231: PUSH
50232: EMPTY
50233: LIST
50234: LIST
50235: PUSH
50236: LD_INT 6
50238: PUSH
50239: LD_INT 0
50241: PUSH
50242: EMPTY
50243: LIST
50244: LIST
50245: PUSH
50246: LD_INT 6
50248: PUSH
50249: LD_INT 1
50251: PUSH
50252: EMPTY
50253: LIST
50254: LIST
50255: PUSH
50256: EMPTY
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
50270: LD_ADDR_VAR 0 31
50274: PUSH
50275: LD_INT 3
50277: PUSH
50278: LD_INT 2
50280: PUSH
50281: EMPTY
50282: LIST
50283: LIST
50284: PUSH
50285: LD_INT 3
50287: PUSH
50288: LD_INT 3
50290: PUSH
50291: EMPTY
50292: LIST
50293: LIST
50294: PUSH
50295: LD_INT 2
50297: PUSH
50298: LD_INT 3
50300: PUSH
50301: EMPTY
50302: LIST
50303: LIST
50304: PUSH
50305: LD_INT 4
50307: PUSH
50308: LD_INT 3
50310: PUSH
50311: EMPTY
50312: LIST
50313: LIST
50314: PUSH
50315: LD_INT 4
50317: PUSH
50318: LD_INT 4
50320: PUSH
50321: EMPTY
50322: LIST
50323: LIST
50324: PUSH
50325: LD_INT 3
50327: PUSH
50328: LD_INT 4
50330: PUSH
50331: EMPTY
50332: LIST
50333: LIST
50334: PUSH
50335: LD_INT 5
50337: PUSH
50338: LD_INT 4
50340: PUSH
50341: EMPTY
50342: LIST
50343: LIST
50344: PUSH
50345: LD_INT 5
50347: PUSH
50348: LD_INT 5
50350: PUSH
50351: EMPTY
50352: LIST
50353: LIST
50354: PUSH
50355: LD_INT 4
50357: PUSH
50358: LD_INT 5
50360: PUSH
50361: EMPTY
50362: LIST
50363: LIST
50364: PUSH
50365: LD_INT 6
50367: PUSH
50368: LD_INT 5
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 6
50377: PUSH
50378: LD_INT 6
50380: PUSH
50381: EMPTY
50382: LIST
50383: LIST
50384: PUSH
50385: LD_INT 5
50387: PUSH
50388: LD_INT 6
50390: PUSH
50391: EMPTY
50392: LIST
50393: LIST
50394: PUSH
50395: EMPTY
50396: LIST
50397: LIST
50398: LIST
50399: LIST
50400: LIST
50401: LIST
50402: LIST
50403: LIST
50404: LIST
50405: LIST
50406: LIST
50407: LIST
50408: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
50409: LD_ADDR_VAR 0 32
50413: PUSH
50414: LD_INT 1
50416: PUSH
50417: LD_INT 3
50419: PUSH
50420: EMPTY
50421: LIST
50422: LIST
50423: PUSH
50424: LD_INT 0
50426: PUSH
50427: LD_INT 3
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 1
50436: NEG
50437: PUSH
50438: LD_INT 2
50440: PUSH
50441: EMPTY
50442: LIST
50443: LIST
50444: PUSH
50445: LD_INT 1
50447: PUSH
50448: LD_INT 4
50450: PUSH
50451: EMPTY
50452: LIST
50453: LIST
50454: PUSH
50455: LD_INT 0
50457: PUSH
50458: LD_INT 4
50460: PUSH
50461: EMPTY
50462: LIST
50463: LIST
50464: PUSH
50465: LD_INT 1
50467: NEG
50468: PUSH
50469: LD_INT 3
50471: PUSH
50472: EMPTY
50473: LIST
50474: LIST
50475: PUSH
50476: LD_INT 1
50478: PUSH
50479: LD_INT 5
50481: PUSH
50482: EMPTY
50483: LIST
50484: LIST
50485: PUSH
50486: LD_INT 0
50488: PUSH
50489: LD_INT 5
50491: PUSH
50492: EMPTY
50493: LIST
50494: LIST
50495: PUSH
50496: LD_INT 1
50498: NEG
50499: PUSH
50500: LD_INT 4
50502: PUSH
50503: EMPTY
50504: LIST
50505: LIST
50506: PUSH
50507: LD_INT 1
50509: PUSH
50510: LD_INT 6
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 0
50519: PUSH
50520: LD_INT 6
50522: PUSH
50523: EMPTY
50524: LIST
50525: LIST
50526: PUSH
50527: LD_INT 1
50529: NEG
50530: PUSH
50531: LD_INT 5
50533: PUSH
50534: EMPTY
50535: LIST
50536: LIST
50537: PUSH
50538: EMPTY
50539: LIST
50540: LIST
50541: LIST
50542: LIST
50543: LIST
50544: LIST
50545: LIST
50546: LIST
50547: LIST
50548: LIST
50549: LIST
50550: LIST
50551: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
50552: LD_ADDR_VAR 0 33
50556: PUSH
50557: LD_INT 2
50559: NEG
50560: PUSH
50561: LD_INT 1
50563: PUSH
50564: EMPTY
50565: LIST
50566: LIST
50567: PUSH
50568: LD_INT 3
50570: NEG
50571: PUSH
50572: LD_INT 0
50574: PUSH
50575: EMPTY
50576: LIST
50577: LIST
50578: PUSH
50579: LD_INT 3
50581: NEG
50582: PUSH
50583: LD_INT 1
50585: NEG
50586: PUSH
50587: EMPTY
50588: LIST
50589: LIST
50590: PUSH
50591: LD_INT 3
50593: NEG
50594: PUSH
50595: LD_INT 1
50597: PUSH
50598: EMPTY
50599: LIST
50600: LIST
50601: PUSH
50602: LD_INT 4
50604: NEG
50605: PUSH
50606: LD_INT 0
50608: PUSH
50609: EMPTY
50610: LIST
50611: LIST
50612: PUSH
50613: LD_INT 4
50615: NEG
50616: PUSH
50617: LD_INT 1
50619: NEG
50620: PUSH
50621: EMPTY
50622: LIST
50623: LIST
50624: PUSH
50625: LD_INT 4
50627: NEG
50628: PUSH
50629: LD_INT 1
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: PUSH
50636: LD_INT 5
50638: NEG
50639: PUSH
50640: LD_INT 0
50642: PUSH
50643: EMPTY
50644: LIST
50645: LIST
50646: PUSH
50647: LD_INT 5
50649: NEG
50650: PUSH
50651: LD_INT 1
50653: NEG
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 5
50661: NEG
50662: PUSH
50663: LD_INT 1
50665: PUSH
50666: EMPTY
50667: LIST
50668: LIST
50669: PUSH
50670: LD_INT 6
50672: NEG
50673: PUSH
50674: LD_INT 0
50676: PUSH
50677: EMPTY
50678: LIST
50679: LIST
50680: PUSH
50681: LD_INT 6
50683: NEG
50684: PUSH
50685: LD_INT 1
50687: NEG
50688: PUSH
50689: EMPTY
50690: LIST
50691: LIST
50692: PUSH
50693: EMPTY
50694: LIST
50695: LIST
50696: LIST
50697: LIST
50698: LIST
50699: LIST
50700: LIST
50701: LIST
50702: LIST
50703: LIST
50704: LIST
50705: LIST
50706: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
50707: LD_ADDR_VAR 0 34
50711: PUSH
50712: LD_INT 2
50714: NEG
50715: PUSH
50716: LD_INT 3
50718: NEG
50719: PUSH
50720: EMPTY
50721: LIST
50722: LIST
50723: PUSH
50724: LD_INT 3
50726: NEG
50727: PUSH
50728: LD_INT 2
50730: NEG
50731: PUSH
50732: EMPTY
50733: LIST
50734: LIST
50735: PUSH
50736: LD_INT 3
50738: NEG
50739: PUSH
50740: LD_INT 3
50742: NEG
50743: PUSH
50744: EMPTY
50745: LIST
50746: LIST
50747: PUSH
50748: LD_INT 3
50750: NEG
50751: PUSH
50752: LD_INT 4
50754: NEG
50755: PUSH
50756: EMPTY
50757: LIST
50758: LIST
50759: PUSH
50760: LD_INT 4
50762: NEG
50763: PUSH
50764: LD_INT 3
50766: NEG
50767: PUSH
50768: EMPTY
50769: LIST
50770: LIST
50771: PUSH
50772: LD_INT 4
50774: NEG
50775: PUSH
50776: LD_INT 4
50778: NEG
50779: PUSH
50780: EMPTY
50781: LIST
50782: LIST
50783: PUSH
50784: LD_INT 4
50786: NEG
50787: PUSH
50788: LD_INT 5
50790: NEG
50791: PUSH
50792: EMPTY
50793: LIST
50794: LIST
50795: PUSH
50796: LD_INT 5
50798: NEG
50799: PUSH
50800: LD_INT 4
50802: NEG
50803: PUSH
50804: EMPTY
50805: LIST
50806: LIST
50807: PUSH
50808: LD_INT 5
50810: NEG
50811: PUSH
50812: LD_INT 5
50814: NEG
50815: PUSH
50816: EMPTY
50817: LIST
50818: LIST
50819: PUSH
50820: LD_INT 5
50822: NEG
50823: PUSH
50824: LD_INT 6
50826: NEG
50827: PUSH
50828: EMPTY
50829: LIST
50830: LIST
50831: PUSH
50832: LD_INT 6
50834: NEG
50835: PUSH
50836: LD_INT 5
50838: NEG
50839: PUSH
50840: EMPTY
50841: LIST
50842: LIST
50843: PUSH
50844: LD_INT 6
50846: NEG
50847: PUSH
50848: LD_INT 6
50850: NEG
50851: PUSH
50852: EMPTY
50853: LIST
50854: LIST
50855: PUSH
50856: EMPTY
50857: LIST
50858: LIST
50859: LIST
50860: LIST
50861: LIST
50862: LIST
50863: LIST
50864: LIST
50865: LIST
50866: LIST
50867: LIST
50868: LIST
50869: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
50870: LD_ADDR_VAR 0 41
50874: PUSH
50875: LD_INT 0
50877: PUSH
50878: LD_INT 2
50880: NEG
50881: PUSH
50882: EMPTY
50883: LIST
50884: LIST
50885: PUSH
50886: LD_INT 1
50888: NEG
50889: PUSH
50890: LD_INT 3
50892: NEG
50893: PUSH
50894: EMPTY
50895: LIST
50896: LIST
50897: PUSH
50898: LD_INT 1
50900: PUSH
50901: LD_INT 2
50903: NEG
50904: PUSH
50905: EMPTY
50906: LIST
50907: LIST
50908: PUSH
50909: EMPTY
50910: LIST
50911: LIST
50912: LIST
50913: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
50914: LD_ADDR_VAR 0 42
50918: PUSH
50919: LD_INT 2
50921: PUSH
50922: LD_INT 0
50924: PUSH
50925: EMPTY
50926: LIST
50927: LIST
50928: PUSH
50929: LD_INT 2
50931: PUSH
50932: LD_INT 1
50934: NEG
50935: PUSH
50936: EMPTY
50937: LIST
50938: LIST
50939: PUSH
50940: LD_INT 3
50942: PUSH
50943: LD_INT 1
50945: PUSH
50946: EMPTY
50947: LIST
50948: LIST
50949: PUSH
50950: EMPTY
50951: LIST
50952: LIST
50953: LIST
50954: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
50955: LD_ADDR_VAR 0 43
50959: PUSH
50960: LD_INT 2
50962: PUSH
50963: LD_INT 2
50965: PUSH
50966: EMPTY
50967: LIST
50968: LIST
50969: PUSH
50970: LD_INT 3
50972: PUSH
50973: LD_INT 2
50975: PUSH
50976: EMPTY
50977: LIST
50978: LIST
50979: PUSH
50980: LD_INT 2
50982: PUSH
50983: LD_INT 3
50985: PUSH
50986: EMPTY
50987: LIST
50988: LIST
50989: PUSH
50990: EMPTY
50991: LIST
50992: LIST
50993: LIST
50994: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
50995: LD_ADDR_VAR 0 44
50999: PUSH
51000: LD_INT 0
51002: PUSH
51003: LD_INT 2
51005: PUSH
51006: EMPTY
51007: LIST
51008: LIST
51009: PUSH
51010: LD_INT 1
51012: PUSH
51013: LD_INT 3
51015: PUSH
51016: EMPTY
51017: LIST
51018: LIST
51019: PUSH
51020: LD_INT 1
51022: NEG
51023: PUSH
51024: LD_INT 2
51026: PUSH
51027: EMPTY
51028: LIST
51029: LIST
51030: PUSH
51031: EMPTY
51032: LIST
51033: LIST
51034: LIST
51035: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
51036: LD_ADDR_VAR 0 45
51040: PUSH
51041: LD_INT 2
51043: NEG
51044: PUSH
51045: LD_INT 0
51047: PUSH
51048: EMPTY
51049: LIST
51050: LIST
51051: PUSH
51052: LD_INT 2
51054: NEG
51055: PUSH
51056: LD_INT 1
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 3
51065: NEG
51066: PUSH
51067: LD_INT 1
51069: NEG
51070: PUSH
51071: EMPTY
51072: LIST
51073: LIST
51074: PUSH
51075: EMPTY
51076: LIST
51077: LIST
51078: LIST
51079: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
51080: LD_ADDR_VAR 0 46
51084: PUSH
51085: LD_INT 2
51087: NEG
51088: PUSH
51089: LD_INT 2
51091: NEG
51092: PUSH
51093: EMPTY
51094: LIST
51095: LIST
51096: PUSH
51097: LD_INT 2
51099: NEG
51100: PUSH
51101: LD_INT 3
51103: NEG
51104: PUSH
51105: EMPTY
51106: LIST
51107: LIST
51108: PUSH
51109: LD_INT 3
51111: NEG
51112: PUSH
51113: LD_INT 2
51115: NEG
51116: PUSH
51117: EMPTY
51118: LIST
51119: LIST
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: LIST
51125: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
51126: LD_ADDR_VAR 0 47
51130: PUSH
51131: LD_INT 2
51133: NEG
51134: PUSH
51135: LD_INT 3
51137: NEG
51138: PUSH
51139: EMPTY
51140: LIST
51141: LIST
51142: PUSH
51143: LD_INT 1
51145: NEG
51146: PUSH
51147: LD_INT 3
51149: NEG
51150: PUSH
51151: EMPTY
51152: LIST
51153: LIST
51154: PUSH
51155: EMPTY
51156: LIST
51157: LIST
51158: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
51159: LD_ADDR_VAR 0 48
51163: PUSH
51164: LD_INT 1
51166: PUSH
51167: LD_INT 2
51169: NEG
51170: PUSH
51171: EMPTY
51172: LIST
51173: LIST
51174: PUSH
51175: LD_INT 2
51177: PUSH
51178: LD_INT 1
51180: NEG
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: EMPTY
51187: LIST
51188: LIST
51189: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
51190: LD_ADDR_VAR 0 49
51194: PUSH
51195: LD_INT 3
51197: PUSH
51198: LD_INT 1
51200: PUSH
51201: EMPTY
51202: LIST
51203: LIST
51204: PUSH
51205: LD_INT 3
51207: PUSH
51208: LD_INT 2
51210: PUSH
51211: EMPTY
51212: LIST
51213: LIST
51214: PUSH
51215: EMPTY
51216: LIST
51217: LIST
51218: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
51219: LD_ADDR_VAR 0 50
51223: PUSH
51224: LD_INT 2
51226: PUSH
51227: LD_INT 3
51229: PUSH
51230: EMPTY
51231: LIST
51232: LIST
51233: PUSH
51234: LD_INT 1
51236: PUSH
51237: LD_INT 3
51239: PUSH
51240: EMPTY
51241: LIST
51242: LIST
51243: PUSH
51244: EMPTY
51245: LIST
51246: LIST
51247: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
51248: LD_ADDR_VAR 0 51
51252: PUSH
51253: LD_INT 1
51255: NEG
51256: PUSH
51257: LD_INT 2
51259: PUSH
51260: EMPTY
51261: LIST
51262: LIST
51263: PUSH
51264: LD_INT 2
51266: NEG
51267: PUSH
51268: LD_INT 1
51270: PUSH
51271: EMPTY
51272: LIST
51273: LIST
51274: PUSH
51275: EMPTY
51276: LIST
51277: LIST
51278: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
51279: LD_ADDR_VAR 0 52
51283: PUSH
51284: LD_INT 3
51286: NEG
51287: PUSH
51288: LD_INT 1
51290: NEG
51291: PUSH
51292: EMPTY
51293: LIST
51294: LIST
51295: PUSH
51296: LD_INT 3
51298: NEG
51299: PUSH
51300: LD_INT 2
51302: NEG
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: EMPTY
51309: LIST
51310: LIST
51311: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
51312: LD_ADDR_VAR 0 53
51316: PUSH
51317: LD_INT 1
51319: NEG
51320: PUSH
51321: LD_INT 3
51323: NEG
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: LD_INT 0
51331: PUSH
51332: LD_INT 3
51334: NEG
51335: PUSH
51336: EMPTY
51337: LIST
51338: LIST
51339: PUSH
51340: LD_INT 1
51342: PUSH
51343: LD_INT 2
51345: NEG
51346: PUSH
51347: EMPTY
51348: LIST
51349: LIST
51350: PUSH
51351: EMPTY
51352: LIST
51353: LIST
51354: LIST
51355: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
51356: LD_ADDR_VAR 0 54
51360: PUSH
51361: LD_INT 2
51363: PUSH
51364: LD_INT 1
51366: NEG
51367: PUSH
51368: EMPTY
51369: LIST
51370: LIST
51371: PUSH
51372: LD_INT 3
51374: PUSH
51375: LD_INT 0
51377: PUSH
51378: EMPTY
51379: LIST
51380: LIST
51381: PUSH
51382: LD_INT 3
51384: PUSH
51385: LD_INT 1
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: EMPTY
51393: LIST
51394: LIST
51395: LIST
51396: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
51397: LD_ADDR_VAR 0 55
51401: PUSH
51402: LD_INT 3
51404: PUSH
51405: LD_INT 2
51407: PUSH
51408: EMPTY
51409: LIST
51410: LIST
51411: PUSH
51412: LD_INT 3
51414: PUSH
51415: LD_INT 3
51417: PUSH
51418: EMPTY
51419: LIST
51420: LIST
51421: PUSH
51422: LD_INT 2
51424: PUSH
51425: LD_INT 3
51427: PUSH
51428: EMPTY
51429: LIST
51430: LIST
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: LIST
51436: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
51437: LD_ADDR_VAR 0 56
51441: PUSH
51442: LD_INT 1
51444: PUSH
51445: LD_INT 3
51447: PUSH
51448: EMPTY
51449: LIST
51450: LIST
51451: PUSH
51452: LD_INT 0
51454: PUSH
51455: LD_INT 3
51457: PUSH
51458: EMPTY
51459: LIST
51460: LIST
51461: PUSH
51462: LD_INT 1
51464: NEG
51465: PUSH
51466: LD_INT 2
51468: PUSH
51469: EMPTY
51470: LIST
51471: LIST
51472: PUSH
51473: EMPTY
51474: LIST
51475: LIST
51476: LIST
51477: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
51478: LD_ADDR_VAR 0 57
51482: PUSH
51483: LD_INT 2
51485: NEG
51486: PUSH
51487: LD_INT 1
51489: PUSH
51490: EMPTY
51491: LIST
51492: LIST
51493: PUSH
51494: LD_INT 3
51496: NEG
51497: PUSH
51498: LD_INT 0
51500: PUSH
51501: EMPTY
51502: LIST
51503: LIST
51504: PUSH
51505: LD_INT 3
51507: NEG
51508: PUSH
51509: LD_INT 1
51511: NEG
51512: PUSH
51513: EMPTY
51514: LIST
51515: LIST
51516: PUSH
51517: EMPTY
51518: LIST
51519: LIST
51520: LIST
51521: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
51522: LD_ADDR_VAR 0 58
51526: PUSH
51527: LD_INT 2
51529: NEG
51530: PUSH
51531: LD_INT 3
51533: NEG
51534: PUSH
51535: EMPTY
51536: LIST
51537: LIST
51538: PUSH
51539: LD_INT 3
51541: NEG
51542: PUSH
51543: LD_INT 2
51545: NEG
51546: PUSH
51547: EMPTY
51548: LIST
51549: LIST
51550: PUSH
51551: LD_INT 3
51553: NEG
51554: PUSH
51555: LD_INT 3
51557: NEG
51558: PUSH
51559: EMPTY
51560: LIST
51561: LIST
51562: PUSH
51563: EMPTY
51564: LIST
51565: LIST
51566: LIST
51567: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
51568: LD_ADDR_VAR 0 59
51572: PUSH
51573: LD_INT 1
51575: NEG
51576: PUSH
51577: LD_INT 2
51579: NEG
51580: PUSH
51581: EMPTY
51582: LIST
51583: LIST
51584: PUSH
51585: LD_INT 0
51587: PUSH
51588: LD_INT 2
51590: NEG
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 1
51598: PUSH
51599: LD_INT 1
51601: NEG
51602: PUSH
51603: EMPTY
51604: LIST
51605: LIST
51606: PUSH
51607: EMPTY
51608: LIST
51609: LIST
51610: LIST
51611: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
51612: LD_ADDR_VAR 0 60
51616: PUSH
51617: LD_INT 1
51619: PUSH
51620: LD_INT 1
51622: NEG
51623: PUSH
51624: EMPTY
51625: LIST
51626: LIST
51627: PUSH
51628: LD_INT 2
51630: PUSH
51631: LD_INT 0
51633: PUSH
51634: EMPTY
51635: LIST
51636: LIST
51637: PUSH
51638: LD_INT 2
51640: PUSH
51641: LD_INT 1
51643: PUSH
51644: EMPTY
51645: LIST
51646: LIST
51647: PUSH
51648: EMPTY
51649: LIST
51650: LIST
51651: LIST
51652: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
51653: LD_ADDR_VAR 0 61
51657: PUSH
51658: LD_INT 2
51660: PUSH
51661: LD_INT 1
51663: PUSH
51664: EMPTY
51665: LIST
51666: LIST
51667: PUSH
51668: LD_INT 2
51670: PUSH
51671: LD_INT 2
51673: PUSH
51674: EMPTY
51675: LIST
51676: LIST
51677: PUSH
51678: LD_INT 1
51680: PUSH
51681: LD_INT 2
51683: PUSH
51684: EMPTY
51685: LIST
51686: LIST
51687: PUSH
51688: EMPTY
51689: LIST
51690: LIST
51691: LIST
51692: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
51693: LD_ADDR_VAR 0 62
51697: PUSH
51698: LD_INT 1
51700: PUSH
51701: LD_INT 2
51703: PUSH
51704: EMPTY
51705: LIST
51706: LIST
51707: PUSH
51708: LD_INT 0
51710: PUSH
51711: LD_INT 2
51713: PUSH
51714: EMPTY
51715: LIST
51716: LIST
51717: PUSH
51718: LD_INT 1
51720: NEG
51721: PUSH
51722: LD_INT 1
51724: PUSH
51725: EMPTY
51726: LIST
51727: LIST
51728: PUSH
51729: EMPTY
51730: LIST
51731: LIST
51732: LIST
51733: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
51734: LD_ADDR_VAR 0 63
51738: PUSH
51739: LD_INT 1
51741: NEG
51742: PUSH
51743: LD_INT 1
51745: PUSH
51746: EMPTY
51747: LIST
51748: LIST
51749: PUSH
51750: LD_INT 2
51752: NEG
51753: PUSH
51754: LD_INT 0
51756: PUSH
51757: EMPTY
51758: LIST
51759: LIST
51760: PUSH
51761: LD_INT 2
51763: NEG
51764: PUSH
51765: LD_INT 1
51767: NEG
51768: PUSH
51769: EMPTY
51770: LIST
51771: LIST
51772: PUSH
51773: EMPTY
51774: LIST
51775: LIST
51776: LIST
51777: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
51778: LD_ADDR_VAR 0 64
51782: PUSH
51783: LD_INT 1
51785: NEG
51786: PUSH
51787: LD_INT 2
51789: NEG
51790: PUSH
51791: EMPTY
51792: LIST
51793: LIST
51794: PUSH
51795: LD_INT 2
51797: NEG
51798: PUSH
51799: LD_INT 1
51801: NEG
51802: PUSH
51803: EMPTY
51804: LIST
51805: LIST
51806: PUSH
51807: LD_INT 2
51809: NEG
51810: PUSH
51811: LD_INT 2
51813: NEG
51814: PUSH
51815: EMPTY
51816: LIST
51817: LIST
51818: PUSH
51819: EMPTY
51820: LIST
51821: LIST
51822: LIST
51823: ST_TO_ADDR
// end ; 2 :
51824: GO 55090
51826: LD_INT 2
51828: DOUBLE
51829: EQUAL
51830: IFTRUE 51834
51832: GO 55089
51834: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
51835: LD_ADDR_VAR 0 29
51839: PUSH
51840: LD_INT 4
51842: PUSH
51843: LD_INT 0
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 4
51852: PUSH
51853: LD_INT 1
51855: NEG
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: LD_INT 5
51863: PUSH
51864: LD_INT 0
51866: PUSH
51867: EMPTY
51868: LIST
51869: LIST
51870: PUSH
51871: LD_INT 5
51873: PUSH
51874: LD_INT 1
51876: PUSH
51877: EMPTY
51878: LIST
51879: LIST
51880: PUSH
51881: LD_INT 4
51883: PUSH
51884: LD_INT 1
51886: PUSH
51887: EMPTY
51888: LIST
51889: LIST
51890: PUSH
51891: LD_INT 3
51893: PUSH
51894: LD_INT 0
51896: PUSH
51897: EMPTY
51898: LIST
51899: LIST
51900: PUSH
51901: LD_INT 3
51903: PUSH
51904: LD_INT 1
51906: NEG
51907: PUSH
51908: EMPTY
51909: LIST
51910: LIST
51911: PUSH
51912: LD_INT 3
51914: PUSH
51915: LD_INT 2
51917: NEG
51918: PUSH
51919: EMPTY
51920: LIST
51921: LIST
51922: PUSH
51923: LD_INT 5
51925: PUSH
51926: LD_INT 2
51928: PUSH
51929: EMPTY
51930: LIST
51931: LIST
51932: PUSH
51933: LD_INT 3
51935: PUSH
51936: LD_INT 3
51938: PUSH
51939: EMPTY
51940: LIST
51941: LIST
51942: PUSH
51943: LD_INT 3
51945: PUSH
51946: LD_INT 2
51948: PUSH
51949: EMPTY
51950: LIST
51951: LIST
51952: PUSH
51953: LD_INT 4
51955: PUSH
51956: LD_INT 3
51958: PUSH
51959: EMPTY
51960: LIST
51961: LIST
51962: PUSH
51963: LD_INT 4
51965: PUSH
51966: LD_INT 4
51968: PUSH
51969: EMPTY
51970: LIST
51971: LIST
51972: PUSH
51973: LD_INT 3
51975: PUSH
51976: LD_INT 4
51978: PUSH
51979: EMPTY
51980: LIST
51981: LIST
51982: PUSH
51983: LD_INT 2
51985: PUSH
51986: LD_INT 3
51988: PUSH
51989: EMPTY
51990: LIST
51991: LIST
51992: PUSH
51993: LD_INT 2
51995: PUSH
51996: LD_INT 2
51998: PUSH
51999: EMPTY
52000: LIST
52001: LIST
52002: PUSH
52003: LD_INT 4
52005: PUSH
52006: LD_INT 2
52008: PUSH
52009: EMPTY
52010: LIST
52011: LIST
52012: PUSH
52013: LD_INT 2
52015: PUSH
52016: LD_INT 4
52018: PUSH
52019: EMPTY
52020: LIST
52021: LIST
52022: PUSH
52023: LD_INT 0
52025: PUSH
52026: LD_INT 4
52028: PUSH
52029: EMPTY
52030: LIST
52031: LIST
52032: PUSH
52033: LD_INT 0
52035: PUSH
52036: LD_INT 3
52038: PUSH
52039: EMPTY
52040: LIST
52041: LIST
52042: PUSH
52043: LD_INT 1
52045: PUSH
52046: LD_INT 4
52048: PUSH
52049: EMPTY
52050: LIST
52051: LIST
52052: PUSH
52053: LD_INT 1
52055: PUSH
52056: LD_INT 5
52058: PUSH
52059: EMPTY
52060: LIST
52061: LIST
52062: PUSH
52063: LD_INT 0
52065: PUSH
52066: LD_INT 5
52068: PUSH
52069: EMPTY
52070: LIST
52071: LIST
52072: PUSH
52073: LD_INT 1
52075: NEG
52076: PUSH
52077: LD_INT 4
52079: PUSH
52080: EMPTY
52081: LIST
52082: LIST
52083: PUSH
52084: LD_INT 1
52086: NEG
52087: PUSH
52088: LD_INT 3
52090: PUSH
52091: EMPTY
52092: LIST
52093: LIST
52094: PUSH
52095: LD_INT 2
52097: PUSH
52098: LD_INT 5
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 2
52107: NEG
52108: PUSH
52109: LD_INT 3
52111: PUSH
52112: EMPTY
52113: LIST
52114: LIST
52115: PUSH
52116: LD_INT 3
52118: NEG
52119: PUSH
52120: LD_INT 0
52122: PUSH
52123: EMPTY
52124: LIST
52125: LIST
52126: PUSH
52127: LD_INT 3
52129: NEG
52130: PUSH
52131: LD_INT 1
52133: NEG
52134: PUSH
52135: EMPTY
52136: LIST
52137: LIST
52138: PUSH
52139: LD_INT 2
52141: NEG
52142: PUSH
52143: LD_INT 0
52145: PUSH
52146: EMPTY
52147: LIST
52148: LIST
52149: PUSH
52150: LD_INT 2
52152: NEG
52153: PUSH
52154: LD_INT 1
52156: PUSH
52157: EMPTY
52158: LIST
52159: LIST
52160: PUSH
52161: LD_INT 3
52163: NEG
52164: PUSH
52165: LD_INT 1
52167: PUSH
52168: EMPTY
52169: LIST
52170: LIST
52171: PUSH
52172: LD_INT 4
52174: NEG
52175: PUSH
52176: LD_INT 0
52178: PUSH
52179: EMPTY
52180: LIST
52181: LIST
52182: PUSH
52183: LD_INT 4
52185: NEG
52186: PUSH
52187: LD_INT 1
52189: NEG
52190: PUSH
52191: EMPTY
52192: LIST
52193: LIST
52194: PUSH
52195: LD_INT 4
52197: NEG
52198: PUSH
52199: LD_INT 2
52201: NEG
52202: PUSH
52203: EMPTY
52204: LIST
52205: LIST
52206: PUSH
52207: LD_INT 2
52209: NEG
52210: PUSH
52211: LD_INT 2
52213: PUSH
52214: EMPTY
52215: LIST
52216: LIST
52217: PUSH
52218: LD_INT 4
52220: NEG
52221: PUSH
52222: LD_INT 4
52224: NEG
52225: PUSH
52226: EMPTY
52227: LIST
52228: LIST
52229: PUSH
52230: LD_INT 4
52232: NEG
52233: PUSH
52234: LD_INT 5
52236: NEG
52237: PUSH
52238: EMPTY
52239: LIST
52240: LIST
52241: PUSH
52242: LD_INT 3
52244: NEG
52245: PUSH
52246: LD_INT 4
52248: NEG
52249: PUSH
52250: EMPTY
52251: LIST
52252: LIST
52253: PUSH
52254: LD_INT 3
52256: NEG
52257: PUSH
52258: LD_INT 3
52260: NEG
52261: PUSH
52262: EMPTY
52263: LIST
52264: LIST
52265: PUSH
52266: LD_INT 4
52268: NEG
52269: PUSH
52270: LD_INT 3
52272: NEG
52273: PUSH
52274: EMPTY
52275: LIST
52276: LIST
52277: PUSH
52278: LD_INT 5
52280: NEG
52281: PUSH
52282: LD_INT 4
52284: NEG
52285: PUSH
52286: EMPTY
52287: LIST
52288: LIST
52289: PUSH
52290: LD_INT 5
52292: NEG
52293: PUSH
52294: LD_INT 5
52296: NEG
52297: PUSH
52298: EMPTY
52299: LIST
52300: LIST
52301: PUSH
52302: LD_INT 3
52304: NEG
52305: PUSH
52306: LD_INT 5
52308: NEG
52309: PUSH
52310: EMPTY
52311: LIST
52312: LIST
52313: PUSH
52314: LD_INT 5
52316: NEG
52317: PUSH
52318: LD_INT 3
52320: NEG
52321: PUSH
52322: EMPTY
52323: LIST
52324: LIST
52325: PUSH
52326: EMPTY
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: LIST
52334: LIST
52335: LIST
52336: LIST
52337: LIST
52338: LIST
52339: LIST
52340: LIST
52341: LIST
52342: LIST
52343: LIST
52344: LIST
52345: LIST
52346: LIST
52347: LIST
52348: LIST
52349: LIST
52350: LIST
52351: LIST
52352: LIST
52353: LIST
52354: LIST
52355: LIST
52356: LIST
52357: LIST
52358: LIST
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: LIST
52368: LIST
52369: LIST
52370: LIST
52371: LIST
52372: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
52373: LD_ADDR_VAR 0 30
52377: PUSH
52378: LD_INT 4
52380: PUSH
52381: LD_INT 4
52383: PUSH
52384: EMPTY
52385: LIST
52386: LIST
52387: PUSH
52388: LD_INT 4
52390: PUSH
52391: LD_INT 3
52393: PUSH
52394: EMPTY
52395: LIST
52396: LIST
52397: PUSH
52398: LD_INT 5
52400: PUSH
52401: LD_INT 4
52403: PUSH
52404: EMPTY
52405: LIST
52406: LIST
52407: PUSH
52408: LD_INT 5
52410: PUSH
52411: LD_INT 5
52413: PUSH
52414: EMPTY
52415: LIST
52416: LIST
52417: PUSH
52418: LD_INT 4
52420: PUSH
52421: LD_INT 5
52423: PUSH
52424: EMPTY
52425: LIST
52426: LIST
52427: PUSH
52428: LD_INT 3
52430: PUSH
52431: LD_INT 4
52433: PUSH
52434: EMPTY
52435: LIST
52436: LIST
52437: PUSH
52438: LD_INT 3
52440: PUSH
52441: LD_INT 3
52443: PUSH
52444: EMPTY
52445: LIST
52446: LIST
52447: PUSH
52448: LD_INT 5
52450: PUSH
52451: LD_INT 3
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: PUSH
52458: LD_INT 3
52460: PUSH
52461: LD_INT 5
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: PUSH
52468: LD_INT 0
52470: PUSH
52471: LD_INT 3
52473: PUSH
52474: EMPTY
52475: LIST
52476: LIST
52477: PUSH
52478: LD_INT 0
52480: PUSH
52481: LD_INT 2
52483: PUSH
52484: EMPTY
52485: LIST
52486: LIST
52487: PUSH
52488: LD_INT 1
52490: PUSH
52491: LD_INT 3
52493: PUSH
52494: EMPTY
52495: LIST
52496: LIST
52497: PUSH
52498: LD_INT 1
52500: PUSH
52501: LD_INT 4
52503: PUSH
52504: EMPTY
52505: LIST
52506: LIST
52507: PUSH
52508: LD_INT 0
52510: PUSH
52511: LD_INT 4
52513: PUSH
52514: EMPTY
52515: LIST
52516: LIST
52517: PUSH
52518: LD_INT 1
52520: NEG
52521: PUSH
52522: LD_INT 3
52524: PUSH
52525: EMPTY
52526: LIST
52527: LIST
52528: PUSH
52529: LD_INT 1
52531: NEG
52532: PUSH
52533: LD_INT 2
52535: PUSH
52536: EMPTY
52537: LIST
52538: LIST
52539: PUSH
52540: LD_INT 2
52542: PUSH
52543: LD_INT 4
52545: PUSH
52546: EMPTY
52547: LIST
52548: LIST
52549: PUSH
52550: LD_INT 2
52552: NEG
52553: PUSH
52554: LD_INT 2
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: PUSH
52561: LD_INT 4
52563: NEG
52564: PUSH
52565: LD_INT 0
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: PUSH
52572: LD_INT 4
52574: NEG
52575: PUSH
52576: LD_INT 1
52578: NEG
52579: PUSH
52580: EMPTY
52581: LIST
52582: LIST
52583: PUSH
52584: LD_INT 3
52586: NEG
52587: PUSH
52588: LD_INT 0
52590: PUSH
52591: EMPTY
52592: LIST
52593: LIST
52594: PUSH
52595: LD_INT 3
52597: NEG
52598: PUSH
52599: LD_INT 1
52601: PUSH
52602: EMPTY
52603: LIST
52604: LIST
52605: PUSH
52606: LD_INT 4
52608: NEG
52609: PUSH
52610: LD_INT 1
52612: PUSH
52613: EMPTY
52614: LIST
52615: LIST
52616: PUSH
52617: LD_INT 5
52619: NEG
52620: PUSH
52621: LD_INT 0
52623: PUSH
52624: EMPTY
52625: LIST
52626: LIST
52627: PUSH
52628: LD_INT 5
52630: NEG
52631: PUSH
52632: LD_INT 1
52634: NEG
52635: PUSH
52636: EMPTY
52637: LIST
52638: LIST
52639: PUSH
52640: LD_INT 5
52642: NEG
52643: PUSH
52644: LD_INT 2
52646: NEG
52647: PUSH
52648: EMPTY
52649: LIST
52650: LIST
52651: PUSH
52652: LD_INT 3
52654: NEG
52655: PUSH
52656: LD_INT 2
52658: PUSH
52659: EMPTY
52660: LIST
52661: LIST
52662: PUSH
52663: LD_INT 3
52665: NEG
52666: PUSH
52667: LD_INT 3
52669: NEG
52670: PUSH
52671: EMPTY
52672: LIST
52673: LIST
52674: PUSH
52675: LD_INT 3
52677: NEG
52678: PUSH
52679: LD_INT 4
52681: NEG
52682: PUSH
52683: EMPTY
52684: LIST
52685: LIST
52686: PUSH
52687: LD_INT 2
52689: NEG
52690: PUSH
52691: LD_INT 3
52693: NEG
52694: PUSH
52695: EMPTY
52696: LIST
52697: LIST
52698: PUSH
52699: LD_INT 2
52701: NEG
52702: PUSH
52703: LD_INT 2
52705: NEG
52706: PUSH
52707: EMPTY
52708: LIST
52709: LIST
52710: PUSH
52711: LD_INT 3
52713: NEG
52714: PUSH
52715: LD_INT 2
52717: NEG
52718: PUSH
52719: EMPTY
52720: LIST
52721: LIST
52722: PUSH
52723: LD_INT 4
52725: NEG
52726: PUSH
52727: LD_INT 3
52729: NEG
52730: PUSH
52731: EMPTY
52732: LIST
52733: LIST
52734: PUSH
52735: LD_INT 4
52737: NEG
52738: PUSH
52739: LD_INT 4
52741: NEG
52742: PUSH
52743: EMPTY
52744: LIST
52745: LIST
52746: PUSH
52747: LD_INT 2
52749: NEG
52750: PUSH
52751: LD_INT 4
52753: NEG
52754: PUSH
52755: EMPTY
52756: LIST
52757: LIST
52758: PUSH
52759: LD_INT 4
52761: NEG
52762: PUSH
52763: LD_INT 2
52765: NEG
52766: PUSH
52767: EMPTY
52768: LIST
52769: LIST
52770: PUSH
52771: LD_INT 0
52773: PUSH
52774: LD_INT 4
52776: NEG
52777: PUSH
52778: EMPTY
52779: LIST
52780: LIST
52781: PUSH
52782: LD_INT 0
52784: PUSH
52785: LD_INT 5
52787: NEG
52788: PUSH
52789: EMPTY
52790: LIST
52791: LIST
52792: PUSH
52793: LD_INT 1
52795: PUSH
52796: LD_INT 4
52798: NEG
52799: PUSH
52800: EMPTY
52801: LIST
52802: LIST
52803: PUSH
52804: LD_INT 1
52806: PUSH
52807: LD_INT 3
52809: NEG
52810: PUSH
52811: EMPTY
52812: LIST
52813: LIST
52814: PUSH
52815: LD_INT 0
52817: PUSH
52818: LD_INT 3
52820: NEG
52821: PUSH
52822: EMPTY
52823: LIST
52824: LIST
52825: PUSH
52826: LD_INT 1
52828: NEG
52829: PUSH
52830: LD_INT 4
52832: NEG
52833: PUSH
52834: EMPTY
52835: LIST
52836: LIST
52837: PUSH
52838: LD_INT 1
52840: NEG
52841: PUSH
52842: LD_INT 5
52844: NEG
52845: PUSH
52846: EMPTY
52847: LIST
52848: LIST
52849: PUSH
52850: LD_INT 2
52852: PUSH
52853: LD_INT 3
52855: NEG
52856: PUSH
52857: EMPTY
52858: LIST
52859: LIST
52860: PUSH
52861: LD_INT 2
52863: NEG
52864: PUSH
52865: LD_INT 5
52867: NEG
52868: PUSH
52869: EMPTY
52870: LIST
52871: LIST
52872: PUSH
52873: EMPTY
52874: LIST
52875: LIST
52876: LIST
52877: LIST
52878: LIST
52879: LIST
52880: LIST
52881: LIST
52882: LIST
52883: LIST
52884: LIST
52885: LIST
52886: LIST
52887: LIST
52888: LIST
52889: LIST
52890: LIST
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: LIST
52906: LIST
52907: LIST
52908: LIST
52909: LIST
52910: LIST
52911: LIST
52912: LIST
52913: LIST
52914: LIST
52915: LIST
52916: LIST
52917: LIST
52918: LIST
52919: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
52920: LD_ADDR_VAR 0 31
52924: PUSH
52925: LD_INT 0
52927: PUSH
52928: LD_INT 4
52930: PUSH
52931: EMPTY
52932: LIST
52933: LIST
52934: PUSH
52935: LD_INT 0
52937: PUSH
52938: LD_INT 3
52940: PUSH
52941: EMPTY
52942: LIST
52943: LIST
52944: PUSH
52945: LD_INT 1
52947: PUSH
52948: LD_INT 4
52950: PUSH
52951: EMPTY
52952: LIST
52953: LIST
52954: PUSH
52955: LD_INT 1
52957: PUSH
52958: LD_INT 5
52960: PUSH
52961: EMPTY
52962: LIST
52963: LIST
52964: PUSH
52965: LD_INT 0
52967: PUSH
52968: LD_INT 5
52970: PUSH
52971: EMPTY
52972: LIST
52973: LIST
52974: PUSH
52975: LD_INT 1
52977: NEG
52978: PUSH
52979: LD_INT 4
52981: PUSH
52982: EMPTY
52983: LIST
52984: LIST
52985: PUSH
52986: LD_INT 1
52988: NEG
52989: PUSH
52990: LD_INT 3
52992: PUSH
52993: EMPTY
52994: LIST
52995: LIST
52996: PUSH
52997: LD_INT 2
52999: PUSH
53000: LD_INT 5
53002: PUSH
53003: EMPTY
53004: LIST
53005: LIST
53006: PUSH
53007: LD_INT 2
53009: NEG
53010: PUSH
53011: LD_INT 3
53013: PUSH
53014: EMPTY
53015: LIST
53016: LIST
53017: PUSH
53018: LD_INT 3
53020: NEG
53021: PUSH
53022: LD_INT 0
53024: PUSH
53025: EMPTY
53026: LIST
53027: LIST
53028: PUSH
53029: LD_INT 3
53031: NEG
53032: PUSH
53033: LD_INT 1
53035: NEG
53036: PUSH
53037: EMPTY
53038: LIST
53039: LIST
53040: PUSH
53041: LD_INT 2
53043: NEG
53044: PUSH
53045: LD_INT 0
53047: PUSH
53048: EMPTY
53049: LIST
53050: LIST
53051: PUSH
53052: LD_INT 2
53054: NEG
53055: PUSH
53056: LD_INT 1
53058: PUSH
53059: EMPTY
53060: LIST
53061: LIST
53062: PUSH
53063: LD_INT 3
53065: NEG
53066: PUSH
53067: LD_INT 1
53069: PUSH
53070: EMPTY
53071: LIST
53072: LIST
53073: PUSH
53074: LD_INT 4
53076: NEG
53077: PUSH
53078: LD_INT 0
53080: PUSH
53081: EMPTY
53082: LIST
53083: LIST
53084: PUSH
53085: LD_INT 4
53087: NEG
53088: PUSH
53089: LD_INT 1
53091: NEG
53092: PUSH
53093: EMPTY
53094: LIST
53095: LIST
53096: PUSH
53097: LD_INT 4
53099: NEG
53100: PUSH
53101: LD_INT 2
53103: NEG
53104: PUSH
53105: EMPTY
53106: LIST
53107: LIST
53108: PUSH
53109: LD_INT 2
53111: NEG
53112: PUSH
53113: LD_INT 2
53115: PUSH
53116: EMPTY
53117: LIST
53118: LIST
53119: PUSH
53120: LD_INT 4
53122: NEG
53123: PUSH
53124: LD_INT 4
53126: NEG
53127: PUSH
53128: EMPTY
53129: LIST
53130: LIST
53131: PUSH
53132: LD_INT 4
53134: NEG
53135: PUSH
53136: LD_INT 5
53138: NEG
53139: PUSH
53140: EMPTY
53141: LIST
53142: LIST
53143: PUSH
53144: LD_INT 3
53146: NEG
53147: PUSH
53148: LD_INT 4
53150: NEG
53151: PUSH
53152: EMPTY
53153: LIST
53154: LIST
53155: PUSH
53156: LD_INT 3
53158: NEG
53159: PUSH
53160: LD_INT 3
53162: NEG
53163: PUSH
53164: EMPTY
53165: LIST
53166: LIST
53167: PUSH
53168: LD_INT 4
53170: NEG
53171: PUSH
53172: LD_INT 3
53174: NEG
53175: PUSH
53176: EMPTY
53177: LIST
53178: LIST
53179: PUSH
53180: LD_INT 5
53182: NEG
53183: PUSH
53184: LD_INT 4
53186: NEG
53187: PUSH
53188: EMPTY
53189: LIST
53190: LIST
53191: PUSH
53192: LD_INT 5
53194: NEG
53195: PUSH
53196: LD_INT 5
53198: NEG
53199: PUSH
53200: EMPTY
53201: LIST
53202: LIST
53203: PUSH
53204: LD_INT 3
53206: NEG
53207: PUSH
53208: LD_INT 5
53210: NEG
53211: PUSH
53212: EMPTY
53213: LIST
53214: LIST
53215: PUSH
53216: LD_INT 5
53218: NEG
53219: PUSH
53220: LD_INT 3
53222: NEG
53223: PUSH
53224: EMPTY
53225: LIST
53226: LIST
53227: PUSH
53228: LD_INT 0
53230: PUSH
53231: LD_INT 3
53233: NEG
53234: PUSH
53235: EMPTY
53236: LIST
53237: LIST
53238: PUSH
53239: LD_INT 0
53241: PUSH
53242: LD_INT 4
53244: NEG
53245: PUSH
53246: EMPTY
53247: LIST
53248: LIST
53249: PUSH
53250: LD_INT 1
53252: PUSH
53253: LD_INT 3
53255: NEG
53256: PUSH
53257: EMPTY
53258: LIST
53259: LIST
53260: PUSH
53261: LD_INT 1
53263: PUSH
53264: LD_INT 2
53266: NEG
53267: PUSH
53268: EMPTY
53269: LIST
53270: LIST
53271: PUSH
53272: LD_INT 0
53274: PUSH
53275: LD_INT 2
53277: NEG
53278: PUSH
53279: EMPTY
53280: LIST
53281: LIST
53282: PUSH
53283: LD_INT 1
53285: NEG
53286: PUSH
53287: LD_INT 3
53289: NEG
53290: PUSH
53291: EMPTY
53292: LIST
53293: LIST
53294: PUSH
53295: LD_INT 1
53297: NEG
53298: PUSH
53299: LD_INT 4
53301: NEG
53302: PUSH
53303: EMPTY
53304: LIST
53305: LIST
53306: PUSH
53307: LD_INT 2
53309: PUSH
53310: LD_INT 2
53312: NEG
53313: PUSH
53314: EMPTY
53315: LIST
53316: LIST
53317: PUSH
53318: LD_INT 2
53320: NEG
53321: PUSH
53322: LD_INT 4
53324: NEG
53325: PUSH
53326: EMPTY
53327: LIST
53328: LIST
53329: PUSH
53330: LD_INT 4
53332: PUSH
53333: LD_INT 0
53335: PUSH
53336: EMPTY
53337: LIST
53338: LIST
53339: PUSH
53340: LD_INT 4
53342: PUSH
53343: LD_INT 1
53345: NEG
53346: PUSH
53347: EMPTY
53348: LIST
53349: LIST
53350: PUSH
53351: LD_INT 5
53353: PUSH
53354: LD_INT 0
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_INT 5
53363: PUSH
53364: LD_INT 1
53366: PUSH
53367: EMPTY
53368: LIST
53369: LIST
53370: PUSH
53371: LD_INT 4
53373: PUSH
53374: LD_INT 1
53376: PUSH
53377: EMPTY
53378: LIST
53379: LIST
53380: PUSH
53381: LD_INT 3
53383: PUSH
53384: LD_INT 0
53386: PUSH
53387: EMPTY
53388: LIST
53389: LIST
53390: PUSH
53391: LD_INT 3
53393: PUSH
53394: LD_INT 1
53396: NEG
53397: PUSH
53398: EMPTY
53399: LIST
53400: LIST
53401: PUSH
53402: LD_INT 3
53404: PUSH
53405: LD_INT 2
53407: NEG
53408: PUSH
53409: EMPTY
53410: LIST
53411: LIST
53412: PUSH
53413: LD_INT 5
53415: PUSH
53416: LD_INT 2
53418: PUSH
53419: EMPTY
53420: LIST
53421: LIST
53422: PUSH
53423: EMPTY
53424: LIST
53425: LIST
53426: LIST
53427: LIST
53428: LIST
53429: LIST
53430: LIST
53431: LIST
53432: LIST
53433: LIST
53434: LIST
53435: LIST
53436: LIST
53437: LIST
53438: LIST
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: LIST
53456: LIST
53457: LIST
53458: LIST
53459: LIST
53460: LIST
53461: LIST
53462: LIST
53463: LIST
53464: LIST
53465: LIST
53466: LIST
53467: LIST
53468: LIST
53469: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
53470: LD_ADDR_VAR 0 32
53474: PUSH
53475: LD_INT 4
53477: NEG
53478: PUSH
53479: LD_INT 0
53481: PUSH
53482: EMPTY
53483: LIST
53484: LIST
53485: PUSH
53486: LD_INT 4
53488: NEG
53489: PUSH
53490: LD_INT 1
53492: NEG
53493: PUSH
53494: EMPTY
53495: LIST
53496: LIST
53497: PUSH
53498: LD_INT 3
53500: NEG
53501: PUSH
53502: LD_INT 0
53504: PUSH
53505: EMPTY
53506: LIST
53507: LIST
53508: PUSH
53509: LD_INT 3
53511: NEG
53512: PUSH
53513: LD_INT 1
53515: PUSH
53516: EMPTY
53517: LIST
53518: LIST
53519: PUSH
53520: LD_INT 4
53522: NEG
53523: PUSH
53524: LD_INT 1
53526: PUSH
53527: EMPTY
53528: LIST
53529: LIST
53530: PUSH
53531: LD_INT 5
53533: NEG
53534: PUSH
53535: LD_INT 0
53537: PUSH
53538: EMPTY
53539: LIST
53540: LIST
53541: PUSH
53542: LD_INT 5
53544: NEG
53545: PUSH
53546: LD_INT 1
53548: NEG
53549: PUSH
53550: EMPTY
53551: LIST
53552: LIST
53553: PUSH
53554: LD_INT 5
53556: NEG
53557: PUSH
53558: LD_INT 2
53560: NEG
53561: PUSH
53562: EMPTY
53563: LIST
53564: LIST
53565: PUSH
53566: LD_INT 3
53568: NEG
53569: PUSH
53570: LD_INT 2
53572: PUSH
53573: EMPTY
53574: LIST
53575: LIST
53576: PUSH
53577: LD_INT 3
53579: NEG
53580: PUSH
53581: LD_INT 3
53583: NEG
53584: PUSH
53585: EMPTY
53586: LIST
53587: LIST
53588: PUSH
53589: LD_INT 3
53591: NEG
53592: PUSH
53593: LD_INT 4
53595: NEG
53596: PUSH
53597: EMPTY
53598: LIST
53599: LIST
53600: PUSH
53601: LD_INT 2
53603: NEG
53604: PUSH
53605: LD_INT 3
53607: NEG
53608: PUSH
53609: EMPTY
53610: LIST
53611: LIST
53612: PUSH
53613: LD_INT 2
53615: NEG
53616: PUSH
53617: LD_INT 2
53619: NEG
53620: PUSH
53621: EMPTY
53622: LIST
53623: LIST
53624: PUSH
53625: LD_INT 3
53627: NEG
53628: PUSH
53629: LD_INT 2
53631: NEG
53632: PUSH
53633: EMPTY
53634: LIST
53635: LIST
53636: PUSH
53637: LD_INT 4
53639: NEG
53640: PUSH
53641: LD_INT 3
53643: NEG
53644: PUSH
53645: EMPTY
53646: LIST
53647: LIST
53648: PUSH
53649: LD_INT 4
53651: NEG
53652: PUSH
53653: LD_INT 4
53655: NEG
53656: PUSH
53657: EMPTY
53658: LIST
53659: LIST
53660: PUSH
53661: LD_INT 2
53663: NEG
53664: PUSH
53665: LD_INT 4
53667: NEG
53668: PUSH
53669: EMPTY
53670: LIST
53671: LIST
53672: PUSH
53673: LD_INT 4
53675: NEG
53676: PUSH
53677: LD_INT 2
53679: NEG
53680: PUSH
53681: EMPTY
53682: LIST
53683: LIST
53684: PUSH
53685: LD_INT 0
53687: PUSH
53688: LD_INT 4
53690: NEG
53691: PUSH
53692: EMPTY
53693: LIST
53694: LIST
53695: PUSH
53696: LD_INT 0
53698: PUSH
53699: LD_INT 5
53701: NEG
53702: PUSH
53703: EMPTY
53704: LIST
53705: LIST
53706: PUSH
53707: LD_INT 1
53709: PUSH
53710: LD_INT 4
53712: NEG
53713: PUSH
53714: EMPTY
53715: LIST
53716: LIST
53717: PUSH
53718: LD_INT 1
53720: PUSH
53721: LD_INT 3
53723: NEG
53724: PUSH
53725: EMPTY
53726: LIST
53727: LIST
53728: PUSH
53729: LD_INT 0
53731: PUSH
53732: LD_INT 3
53734: NEG
53735: PUSH
53736: EMPTY
53737: LIST
53738: LIST
53739: PUSH
53740: LD_INT 1
53742: NEG
53743: PUSH
53744: LD_INT 4
53746: NEG
53747: PUSH
53748: EMPTY
53749: LIST
53750: LIST
53751: PUSH
53752: LD_INT 1
53754: NEG
53755: PUSH
53756: LD_INT 5
53758: NEG
53759: PUSH
53760: EMPTY
53761: LIST
53762: LIST
53763: PUSH
53764: LD_INT 2
53766: PUSH
53767: LD_INT 3
53769: NEG
53770: PUSH
53771: EMPTY
53772: LIST
53773: LIST
53774: PUSH
53775: LD_INT 2
53777: NEG
53778: PUSH
53779: LD_INT 5
53781: NEG
53782: PUSH
53783: EMPTY
53784: LIST
53785: LIST
53786: PUSH
53787: LD_INT 3
53789: PUSH
53790: LD_INT 0
53792: PUSH
53793: EMPTY
53794: LIST
53795: LIST
53796: PUSH
53797: LD_INT 3
53799: PUSH
53800: LD_INT 1
53802: NEG
53803: PUSH
53804: EMPTY
53805: LIST
53806: LIST
53807: PUSH
53808: LD_INT 4
53810: PUSH
53811: LD_INT 0
53813: PUSH
53814: EMPTY
53815: LIST
53816: LIST
53817: PUSH
53818: LD_INT 4
53820: PUSH
53821: LD_INT 1
53823: PUSH
53824: EMPTY
53825: LIST
53826: LIST
53827: PUSH
53828: LD_INT 3
53830: PUSH
53831: LD_INT 1
53833: PUSH
53834: EMPTY
53835: LIST
53836: LIST
53837: PUSH
53838: LD_INT 2
53840: PUSH
53841: LD_INT 0
53843: PUSH
53844: EMPTY
53845: LIST
53846: LIST
53847: PUSH
53848: LD_INT 2
53850: PUSH
53851: LD_INT 1
53853: NEG
53854: PUSH
53855: EMPTY
53856: LIST
53857: LIST
53858: PUSH
53859: LD_INT 2
53861: PUSH
53862: LD_INT 2
53864: NEG
53865: PUSH
53866: EMPTY
53867: LIST
53868: LIST
53869: PUSH
53870: LD_INT 4
53872: PUSH
53873: LD_INT 2
53875: PUSH
53876: EMPTY
53877: LIST
53878: LIST
53879: PUSH
53880: LD_INT 4
53882: PUSH
53883: LD_INT 4
53885: PUSH
53886: EMPTY
53887: LIST
53888: LIST
53889: PUSH
53890: LD_INT 4
53892: PUSH
53893: LD_INT 3
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: PUSH
53900: LD_INT 5
53902: PUSH
53903: LD_INT 4
53905: PUSH
53906: EMPTY
53907: LIST
53908: LIST
53909: PUSH
53910: LD_INT 5
53912: PUSH
53913: LD_INT 5
53915: PUSH
53916: EMPTY
53917: LIST
53918: LIST
53919: PUSH
53920: LD_INT 4
53922: PUSH
53923: LD_INT 5
53925: PUSH
53926: EMPTY
53927: LIST
53928: LIST
53929: PUSH
53930: LD_INT 3
53932: PUSH
53933: LD_INT 4
53935: PUSH
53936: EMPTY
53937: LIST
53938: LIST
53939: PUSH
53940: LD_INT 3
53942: PUSH
53943: LD_INT 3
53945: PUSH
53946: EMPTY
53947: LIST
53948: LIST
53949: PUSH
53950: LD_INT 5
53952: PUSH
53953: LD_INT 3
53955: PUSH
53956: EMPTY
53957: LIST
53958: LIST
53959: PUSH
53960: LD_INT 3
53962: PUSH
53963: LD_INT 5
53965: PUSH
53966: EMPTY
53967: LIST
53968: LIST
53969: PUSH
53970: EMPTY
53971: LIST
53972: LIST
53973: LIST
53974: LIST
53975: LIST
53976: LIST
53977: LIST
53978: LIST
53979: LIST
53980: LIST
53981: LIST
53982: LIST
53983: LIST
53984: LIST
53985: LIST
53986: LIST
53987: LIST
53988: LIST
53989: LIST
53990: LIST
53991: LIST
53992: LIST
53993: LIST
53994: LIST
53995: LIST
53996: LIST
53997: LIST
53998: LIST
53999: LIST
54000: LIST
54001: LIST
54002: LIST
54003: LIST
54004: LIST
54005: LIST
54006: LIST
54007: LIST
54008: LIST
54009: LIST
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
54017: LD_ADDR_VAR 0 33
54021: PUSH
54022: LD_INT 4
54024: NEG
54025: PUSH
54026: LD_INT 4
54028: NEG
54029: PUSH
54030: EMPTY
54031: LIST
54032: LIST
54033: PUSH
54034: LD_INT 4
54036: NEG
54037: PUSH
54038: LD_INT 5
54040: NEG
54041: PUSH
54042: EMPTY
54043: LIST
54044: LIST
54045: PUSH
54046: LD_INT 3
54048: NEG
54049: PUSH
54050: LD_INT 4
54052: NEG
54053: PUSH
54054: EMPTY
54055: LIST
54056: LIST
54057: PUSH
54058: LD_INT 3
54060: NEG
54061: PUSH
54062: LD_INT 3
54064: NEG
54065: PUSH
54066: EMPTY
54067: LIST
54068: LIST
54069: PUSH
54070: LD_INT 4
54072: NEG
54073: PUSH
54074: LD_INT 3
54076: NEG
54077: PUSH
54078: EMPTY
54079: LIST
54080: LIST
54081: PUSH
54082: LD_INT 5
54084: NEG
54085: PUSH
54086: LD_INT 4
54088: NEG
54089: PUSH
54090: EMPTY
54091: LIST
54092: LIST
54093: PUSH
54094: LD_INT 5
54096: NEG
54097: PUSH
54098: LD_INT 5
54100: NEG
54101: PUSH
54102: EMPTY
54103: LIST
54104: LIST
54105: PUSH
54106: LD_INT 3
54108: NEG
54109: PUSH
54110: LD_INT 5
54112: NEG
54113: PUSH
54114: EMPTY
54115: LIST
54116: LIST
54117: PUSH
54118: LD_INT 5
54120: NEG
54121: PUSH
54122: LD_INT 3
54124: NEG
54125: PUSH
54126: EMPTY
54127: LIST
54128: LIST
54129: PUSH
54130: LD_INT 0
54132: PUSH
54133: LD_INT 3
54135: NEG
54136: PUSH
54137: EMPTY
54138: LIST
54139: LIST
54140: PUSH
54141: LD_INT 0
54143: PUSH
54144: LD_INT 4
54146: NEG
54147: PUSH
54148: EMPTY
54149: LIST
54150: LIST
54151: PUSH
54152: LD_INT 1
54154: PUSH
54155: LD_INT 3
54157: NEG
54158: PUSH
54159: EMPTY
54160: LIST
54161: LIST
54162: PUSH
54163: LD_INT 1
54165: PUSH
54166: LD_INT 2
54168: NEG
54169: PUSH
54170: EMPTY
54171: LIST
54172: LIST
54173: PUSH
54174: LD_INT 0
54176: PUSH
54177: LD_INT 2
54179: NEG
54180: PUSH
54181: EMPTY
54182: LIST
54183: LIST
54184: PUSH
54185: LD_INT 1
54187: NEG
54188: PUSH
54189: LD_INT 3
54191: NEG
54192: PUSH
54193: EMPTY
54194: LIST
54195: LIST
54196: PUSH
54197: LD_INT 1
54199: NEG
54200: PUSH
54201: LD_INT 4
54203: NEG
54204: PUSH
54205: EMPTY
54206: LIST
54207: LIST
54208: PUSH
54209: LD_INT 2
54211: PUSH
54212: LD_INT 2
54214: NEG
54215: PUSH
54216: EMPTY
54217: LIST
54218: LIST
54219: PUSH
54220: LD_INT 2
54222: NEG
54223: PUSH
54224: LD_INT 4
54226: NEG
54227: PUSH
54228: EMPTY
54229: LIST
54230: LIST
54231: PUSH
54232: LD_INT 4
54234: PUSH
54235: LD_INT 0
54237: PUSH
54238: EMPTY
54239: LIST
54240: LIST
54241: PUSH
54242: LD_INT 4
54244: PUSH
54245: LD_INT 1
54247: NEG
54248: PUSH
54249: EMPTY
54250: LIST
54251: LIST
54252: PUSH
54253: LD_INT 5
54255: PUSH
54256: LD_INT 0
54258: PUSH
54259: EMPTY
54260: LIST
54261: LIST
54262: PUSH
54263: LD_INT 5
54265: PUSH
54266: LD_INT 1
54268: PUSH
54269: EMPTY
54270: LIST
54271: LIST
54272: PUSH
54273: LD_INT 4
54275: PUSH
54276: LD_INT 1
54278: PUSH
54279: EMPTY
54280: LIST
54281: LIST
54282: PUSH
54283: LD_INT 3
54285: PUSH
54286: LD_INT 0
54288: PUSH
54289: EMPTY
54290: LIST
54291: LIST
54292: PUSH
54293: LD_INT 3
54295: PUSH
54296: LD_INT 1
54298: NEG
54299: PUSH
54300: EMPTY
54301: LIST
54302: LIST
54303: PUSH
54304: LD_INT 3
54306: PUSH
54307: LD_INT 2
54309: NEG
54310: PUSH
54311: EMPTY
54312: LIST
54313: LIST
54314: PUSH
54315: LD_INT 5
54317: PUSH
54318: LD_INT 2
54320: PUSH
54321: EMPTY
54322: LIST
54323: LIST
54324: PUSH
54325: LD_INT 3
54327: PUSH
54328: LD_INT 3
54330: PUSH
54331: EMPTY
54332: LIST
54333: LIST
54334: PUSH
54335: LD_INT 3
54337: PUSH
54338: LD_INT 2
54340: PUSH
54341: EMPTY
54342: LIST
54343: LIST
54344: PUSH
54345: LD_INT 4
54347: PUSH
54348: LD_INT 3
54350: PUSH
54351: EMPTY
54352: LIST
54353: LIST
54354: PUSH
54355: LD_INT 4
54357: PUSH
54358: LD_INT 4
54360: PUSH
54361: EMPTY
54362: LIST
54363: LIST
54364: PUSH
54365: LD_INT 3
54367: PUSH
54368: LD_INT 4
54370: PUSH
54371: EMPTY
54372: LIST
54373: LIST
54374: PUSH
54375: LD_INT 2
54377: PUSH
54378: LD_INT 3
54380: PUSH
54381: EMPTY
54382: LIST
54383: LIST
54384: PUSH
54385: LD_INT 2
54387: PUSH
54388: LD_INT 2
54390: PUSH
54391: EMPTY
54392: LIST
54393: LIST
54394: PUSH
54395: LD_INT 4
54397: PUSH
54398: LD_INT 2
54400: PUSH
54401: EMPTY
54402: LIST
54403: LIST
54404: PUSH
54405: LD_INT 2
54407: PUSH
54408: LD_INT 4
54410: PUSH
54411: EMPTY
54412: LIST
54413: LIST
54414: PUSH
54415: LD_INT 0
54417: PUSH
54418: LD_INT 4
54420: PUSH
54421: EMPTY
54422: LIST
54423: LIST
54424: PUSH
54425: LD_INT 0
54427: PUSH
54428: LD_INT 3
54430: PUSH
54431: EMPTY
54432: LIST
54433: LIST
54434: PUSH
54435: LD_INT 1
54437: PUSH
54438: LD_INT 4
54440: PUSH
54441: EMPTY
54442: LIST
54443: LIST
54444: PUSH
54445: LD_INT 1
54447: PUSH
54448: LD_INT 5
54450: PUSH
54451: EMPTY
54452: LIST
54453: LIST
54454: PUSH
54455: LD_INT 0
54457: PUSH
54458: LD_INT 5
54460: PUSH
54461: EMPTY
54462: LIST
54463: LIST
54464: PUSH
54465: LD_INT 1
54467: NEG
54468: PUSH
54469: LD_INT 4
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PUSH
54476: LD_INT 1
54478: NEG
54479: PUSH
54480: LD_INT 3
54482: PUSH
54483: EMPTY
54484: LIST
54485: LIST
54486: PUSH
54487: LD_INT 2
54489: PUSH
54490: LD_INT 5
54492: PUSH
54493: EMPTY
54494: LIST
54495: LIST
54496: PUSH
54497: LD_INT 2
54499: NEG
54500: PUSH
54501: LD_INT 3
54503: PUSH
54504: EMPTY
54505: LIST
54506: LIST
54507: PUSH
54508: EMPTY
54509: LIST
54510: LIST
54511: LIST
54512: LIST
54513: LIST
54514: LIST
54515: LIST
54516: LIST
54517: LIST
54518: LIST
54519: LIST
54520: LIST
54521: LIST
54522: LIST
54523: LIST
54524: LIST
54525: LIST
54526: LIST
54527: LIST
54528: LIST
54529: LIST
54530: LIST
54531: LIST
54532: LIST
54533: LIST
54534: LIST
54535: LIST
54536: LIST
54537: LIST
54538: LIST
54539: LIST
54540: LIST
54541: LIST
54542: LIST
54543: LIST
54544: LIST
54545: LIST
54546: LIST
54547: LIST
54548: LIST
54549: LIST
54550: LIST
54551: LIST
54552: LIST
54553: LIST
54554: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
54555: LD_ADDR_VAR 0 34
54559: PUSH
54560: LD_INT 0
54562: PUSH
54563: LD_INT 4
54565: NEG
54566: PUSH
54567: EMPTY
54568: LIST
54569: LIST
54570: PUSH
54571: LD_INT 0
54573: PUSH
54574: LD_INT 5
54576: NEG
54577: PUSH
54578: EMPTY
54579: LIST
54580: LIST
54581: PUSH
54582: LD_INT 1
54584: PUSH
54585: LD_INT 4
54587: NEG
54588: PUSH
54589: EMPTY
54590: LIST
54591: LIST
54592: PUSH
54593: LD_INT 1
54595: PUSH
54596: LD_INT 3
54598: NEG
54599: PUSH
54600: EMPTY
54601: LIST
54602: LIST
54603: PUSH
54604: LD_INT 0
54606: PUSH
54607: LD_INT 3
54609: NEG
54610: PUSH
54611: EMPTY
54612: LIST
54613: LIST
54614: PUSH
54615: LD_INT 1
54617: NEG
54618: PUSH
54619: LD_INT 4
54621: NEG
54622: PUSH
54623: EMPTY
54624: LIST
54625: LIST
54626: PUSH
54627: LD_INT 1
54629: NEG
54630: PUSH
54631: LD_INT 5
54633: NEG
54634: PUSH
54635: EMPTY
54636: LIST
54637: LIST
54638: PUSH
54639: LD_INT 2
54641: PUSH
54642: LD_INT 3
54644: NEG
54645: PUSH
54646: EMPTY
54647: LIST
54648: LIST
54649: PUSH
54650: LD_INT 2
54652: NEG
54653: PUSH
54654: LD_INT 5
54656: NEG
54657: PUSH
54658: EMPTY
54659: LIST
54660: LIST
54661: PUSH
54662: LD_INT 3
54664: PUSH
54665: LD_INT 0
54667: PUSH
54668: EMPTY
54669: LIST
54670: LIST
54671: PUSH
54672: LD_INT 3
54674: PUSH
54675: LD_INT 1
54677: NEG
54678: PUSH
54679: EMPTY
54680: LIST
54681: LIST
54682: PUSH
54683: LD_INT 4
54685: PUSH
54686: LD_INT 0
54688: PUSH
54689: EMPTY
54690: LIST
54691: LIST
54692: PUSH
54693: LD_INT 4
54695: PUSH
54696: LD_INT 1
54698: PUSH
54699: EMPTY
54700: LIST
54701: LIST
54702: PUSH
54703: LD_INT 3
54705: PUSH
54706: LD_INT 1
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: PUSH
54713: LD_INT 2
54715: PUSH
54716: LD_INT 0
54718: PUSH
54719: EMPTY
54720: LIST
54721: LIST
54722: PUSH
54723: LD_INT 2
54725: PUSH
54726: LD_INT 1
54728: NEG
54729: PUSH
54730: EMPTY
54731: LIST
54732: LIST
54733: PUSH
54734: LD_INT 2
54736: PUSH
54737: LD_INT 2
54739: NEG
54740: PUSH
54741: EMPTY
54742: LIST
54743: LIST
54744: PUSH
54745: LD_INT 4
54747: PUSH
54748: LD_INT 2
54750: PUSH
54751: EMPTY
54752: LIST
54753: LIST
54754: PUSH
54755: LD_INT 4
54757: PUSH
54758: LD_INT 4
54760: PUSH
54761: EMPTY
54762: LIST
54763: LIST
54764: PUSH
54765: LD_INT 4
54767: PUSH
54768: LD_INT 3
54770: PUSH
54771: EMPTY
54772: LIST
54773: LIST
54774: PUSH
54775: LD_INT 5
54777: PUSH
54778: LD_INT 4
54780: PUSH
54781: EMPTY
54782: LIST
54783: LIST
54784: PUSH
54785: LD_INT 5
54787: PUSH
54788: LD_INT 5
54790: PUSH
54791: EMPTY
54792: LIST
54793: LIST
54794: PUSH
54795: LD_INT 4
54797: PUSH
54798: LD_INT 5
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: PUSH
54805: LD_INT 3
54807: PUSH
54808: LD_INT 4
54810: PUSH
54811: EMPTY
54812: LIST
54813: LIST
54814: PUSH
54815: LD_INT 3
54817: PUSH
54818: LD_INT 3
54820: PUSH
54821: EMPTY
54822: LIST
54823: LIST
54824: PUSH
54825: LD_INT 5
54827: PUSH
54828: LD_INT 3
54830: PUSH
54831: EMPTY
54832: LIST
54833: LIST
54834: PUSH
54835: LD_INT 3
54837: PUSH
54838: LD_INT 5
54840: PUSH
54841: EMPTY
54842: LIST
54843: LIST
54844: PUSH
54845: LD_INT 0
54847: PUSH
54848: LD_INT 3
54850: PUSH
54851: EMPTY
54852: LIST
54853: LIST
54854: PUSH
54855: LD_INT 0
54857: PUSH
54858: LD_INT 2
54860: PUSH
54861: EMPTY
54862: LIST
54863: LIST
54864: PUSH
54865: LD_INT 1
54867: PUSH
54868: LD_INT 3
54870: PUSH
54871: EMPTY
54872: LIST
54873: LIST
54874: PUSH
54875: LD_INT 1
54877: PUSH
54878: LD_INT 4
54880: PUSH
54881: EMPTY
54882: LIST
54883: LIST
54884: PUSH
54885: LD_INT 0
54887: PUSH
54888: LD_INT 4
54890: PUSH
54891: EMPTY
54892: LIST
54893: LIST
54894: PUSH
54895: LD_INT 1
54897: NEG
54898: PUSH
54899: LD_INT 3
54901: PUSH
54902: EMPTY
54903: LIST
54904: LIST
54905: PUSH
54906: LD_INT 1
54908: NEG
54909: PUSH
54910: LD_INT 2
54912: PUSH
54913: EMPTY
54914: LIST
54915: LIST
54916: PUSH
54917: LD_INT 2
54919: PUSH
54920: LD_INT 4
54922: PUSH
54923: EMPTY
54924: LIST
54925: LIST
54926: PUSH
54927: LD_INT 2
54929: NEG
54930: PUSH
54931: LD_INT 2
54933: PUSH
54934: EMPTY
54935: LIST
54936: LIST
54937: PUSH
54938: LD_INT 4
54940: NEG
54941: PUSH
54942: LD_INT 0
54944: PUSH
54945: EMPTY
54946: LIST
54947: LIST
54948: PUSH
54949: LD_INT 4
54951: NEG
54952: PUSH
54953: LD_INT 1
54955: NEG
54956: PUSH
54957: EMPTY
54958: LIST
54959: LIST
54960: PUSH
54961: LD_INT 3
54963: NEG
54964: PUSH
54965: LD_INT 0
54967: PUSH
54968: EMPTY
54969: LIST
54970: LIST
54971: PUSH
54972: LD_INT 3
54974: NEG
54975: PUSH
54976: LD_INT 1
54978: PUSH
54979: EMPTY
54980: LIST
54981: LIST
54982: PUSH
54983: LD_INT 4
54985: NEG
54986: PUSH
54987: LD_INT 1
54989: PUSH
54990: EMPTY
54991: LIST
54992: LIST
54993: PUSH
54994: LD_INT 5
54996: NEG
54997: PUSH
54998: LD_INT 0
55000: PUSH
55001: EMPTY
55002: LIST
55003: LIST
55004: PUSH
55005: LD_INT 5
55007: NEG
55008: PUSH
55009: LD_INT 1
55011: NEG
55012: PUSH
55013: EMPTY
55014: LIST
55015: LIST
55016: PUSH
55017: LD_INT 5
55019: NEG
55020: PUSH
55021: LD_INT 2
55023: NEG
55024: PUSH
55025: EMPTY
55026: LIST
55027: LIST
55028: PUSH
55029: LD_INT 3
55031: NEG
55032: PUSH
55033: LD_INT 2
55035: PUSH
55036: EMPTY
55037: LIST
55038: LIST
55039: PUSH
55040: EMPTY
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: LIST
55058: LIST
55059: LIST
55060: LIST
55061: LIST
55062: LIST
55063: LIST
55064: LIST
55065: LIST
55066: LIST
55067: LIST
55068: LIST
55069: LIST
55070: LIST
55071: LIST
55072: LIST
55073: LIST
55074: LIST
55075: LIST
55076: LIST
55077: LIST
55078: LIST
55079: LIST
55080: LIST
55081: LIST
55082: LIST
55083: LIST
55084: LIST
55085: LIST
55086: ST_TO_ADDR
// end ; end ;
55087: GO 55090
55089: POP
// case btype of b_depot , b_warehouse :
55090: LD_VAR 0 1
55094: PUSH
55095: LD_INT 0
55097: DOUBLE
55098: EQUAL
55099: IFTRUE 55109
55101: LD_INT 1
55103: DOUBLE
55104: EQUAL
55105: IFTRUE 55109
55107: GO 55310
55109: POP
// case nation of nation_american :
55110: LD_VAR 0 5
55114: PUSH
55115: LD_INT 1
55117: DOUBLE
55118: EQUAL
55119: IFTRUE 55123
55121: GO 55179
55123: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
55124: LD_ADDR_VAR 0 9
55128: PUSH
55129: LD_VAR 0 11
55133: PUSH
55134: LD_VAR 0 12
55138: PUSH
55139: LD_VAR 0 13
55143: PUSH
55144: LD_VAR 0 14
55148: PUSH
55149: LD_VAR 0 15
55153: PUSH
55154: LD_VAR 0 16
55158: PUSH
55159: EMPTY
55160: LIST
55161: LIST
55162: LIST
55163: LIST
55164: LIST
55165: LIST
55166: PUSH
55167: LD_VAR 0 4
55171: PUSH
55172: LD_INT 1
55174: PLUS
55175: ARRAY
55176: ST_TO_ADDR
55177: GO 55308
55179: LD_INT 2
55181: DOUBLE
55182: EQUAL
55183: IFTRUE 55187
55185: GO 55243
55187: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
55188: LD_ADDR_VAR 0 9
55192: PUSH
55193: LD_VAR 0 17
55197: PUSH
55198: LD_VAR 0 18
55202: PUSH
55203: LD_VAR 0 19
55207: PUSH
55208: LD_VAR 0 20
55212: PUSH
55213: LD_VAR 0 21
55217: PUSH
55218: LD_VAR 0 22
55222: PUSH
55223: EMPTY
55224: LIST
55225: LIST
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: PUSH
55231: LD_VAR 0 4
55235: PUSH
55236: LD_INT 1
55238: PLUS
55239: ARRAY
55240: ST_TO_ADDR
55241: GO 55308
55243: LD_INT 3
55245: DOUBLE
55246: EQUAL
55247: IFTRUE 55251
55249: GO 55307
55251: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
55252: LD_ADDR_VAR 0 9
55256: PUSH
55257: LD_VAR 0 23
55261: PUSH
55262: LD_VAR 0 24
55266: PUSH
55267: LD_VAR 0 25
55271: PUSH
55272: LD_VAR 0 26
55276: PUSH
55277: LD_VAR 0 27
55281: PUSH
55282: LD_VAR 0 28
55286: PUSH
55287: EMPTY
55288: LIST
55289: LIST
55290: LIST
55291: LIST
55292: LIST
55293: LIST
55294: PUSH
55295: LD_VAR 0 4
55299: PUSH
55300: LD_INT 1
55302: PLUS
55303: ARRAY
55304: ST_TO_ADDR
55305: GO 55308
55307: POP
55308: GO 55863
55310: LD_INT 2
55312: DOUBLE
55313: EQUAL
55314: IFTRUE 55324
55316: LD_INT 3
55318: DOUBLE
55319: EQUAL
55320: IFTRUE 55324
55322: GO 55380
55324: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
55325: LD_ADDR_VAR 0 9
55329: PUSH
55330: LD_VAR 0 29
55334: PUSH
55335: LD_VAR 0 30
55339: PUSH
55340: LD_VAR 0 31
55344: PUSH
55345: LD_VAR 0 32
55349: PUSH
55350: LD_VAR 0 33
55354: PUSH
55355: LD_VAR 0 34
55359: PUSH
55360: EMPTY
55361: LIST
55362: LIST
55363: LIST
55364: LIST
55365: LIST
55366: LIST
55367: PUSH
55368: LD_VAR 0 4
55372: PUSH
55373: LD_INT 1
55375: PLUS
55376: ARRAY
55377: ST_TO_ADDR
55378: GO 55863
55380: LD_INT 16
55382: DOUBLE
55383: EQUAL
55384: IFTRUE 55442
55386: LD_INT 17
55388: DOUBLE
55389: EQUAL
55390: IFTRUE 55442
55392: LD_INT 18
55394: DOUBLE
55395: EQUAL
55396: IFTRUE 55442
55398: LD_INT 19
55400: DOUBLE
55401: EQUAL
55402: IFTRUE 55442
55404: LD_INT 22
55406: DOUBLE
55407: EQUAL
55408: IFTRUE 55442
55410: LD_INT 20
55412: DOUBLE
55413: EQUAL
55414: IFTRUE 55442
55416: LD_INT 21
55418: DOUBLE
55419: EQUAL
55420: IFTRUE 55442
55422: LD_INT 23
55424: DOUBLE
55425: EQUAL
55426: IFTRUE 55442
55428: LD_INT 24
55430: DOUBLE
55431: EQUAL
55432: IFTRUE 55442
55434: LD_INT 25
55436: DOUBLE
55437: EQUAL
55438: IFTRUE 55442
55440: GO 55498
55442: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
55443: LD_ADDR_VAR 0 9
55447: PUSH
55448: LD_VAR 0 35
55452: PUSH
55453: LD_VAR 0 36
55457: PUSH
55458: LD_VAR 0 37
55462: PUSH
55463: LD_VAR 0 38
55467: PUSH
55468: LD_VAR 0 39
55472: PUSH
55473: LD_VAR 0 40
55477: PUSH
55478: EMPTY
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: PUSH
55486: LD_VAR 0 4
55490: PUSH
55491: LD_INT 1
55493: PLUS
55494: ARRAY
55495: ST_TO_ADDR
55496: GO 55863
55498: LD_INT 6
55500: DOUBLE
55501: EQUAL
55502: IFTRUE 55554
55504: LD_INT 7
55506: DOUBLE
55507: EQUAL
55508: IFTRUE 55554
55510: LD_INT 8
55512: DOUBLE
55513: EQUAL
55514: IFTRUE 55554
55516: LD_INT 13
55518: DOUBLE
55519: EQUAL
55520: IFTRUE 55554
55522: LD_INT 12
55524: DOUBLE
55525: EQUAL
55526: IFTRUE 55554
55528: LD_INT 15
55530: DOUBLE
55531: EQUAL
55532: IFTRUE 55554
55534: LD_INT 11
55536: DOUBLE
55537: EQUAL
55538: IFTRUE 55554
55540: LD_INT 14
55542: DOUBLE
55543: EQUAL
55544: IFTRUE 55554
55546: LD_INT 10
55548: DOUBLE
55549: EQUAL
55550: IFTRUE 55554
55552: GO 55610
55554: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
55555: LD_ADDR_VAR 0 9
55559: PUSH
55560: LD_VAR 0 41
55564: PUSH
55565: LD_VAR 0 42
55569: PUSH
55570: LD_VAR 0 43
55574: PUSH
55575: LD_VAR 0 44
55579: PUSH
55580: LD_VAR 0 45
55584: PUSH
55585: LD_VAR 0 46
55589: PUSH
55590: EMPTY
55591: LIST
55592: LIST
55593: LIST
55594: LIST
55595: LIST
55596: LIST
55597: PUSH
55598: LD_VAR 0 4
55602: PUSH
55603: LD_INT 1
55605: PLUS
55606: ARRAY
55607: ST_TO_ADDR
55608: GO 55863
55610: LD_INT 36
55612: DOUBLE
55613: EQUAL
55614: IFTRUE 55618
55616: GO 55674
55618: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
55619: LD_ADDR_VAR 0 9
55623: PUSH
55624: LD_VAR 0 47
55628: PUSH
55629: LD_VAR 0 48
55633: PUSH
55634: LD_VAR 0 49
55638: PUSH
55639: LD_VAR 0 50
55643: PUSH
55644: LD_VAR 0 51
55648: PUSH
55649: LD_VAR 0 52
55653: PUSH
55654: EMPTY
55655: LIST
55656: LIST
55657: LIST
55658: LIST
55659: LIST
55660: LIST
55661: PUSH
55662: LD_VAR 0 4
55666: PUSH
55667: LD_INT 1
55669: PLUS
55670: ARRAY
55671: ST_TO_ADDR
55672: GO 55863
55674: LD_INT 4
55676: DOUBLE
55677: EQUAL
55678: IFTRUE 55700
55680: LD_INT 5
55682: DOUBLE
55683: EQUAL
55684: IFTRUE 55700
55686: LD_INT 34
55688: DOUBLE
55689: EQUAL
55690: IFTRUE 55700
55692: LD_INT 37
55694: DOUBLE
55695: EQUAL
55696: IFTRUE 55700
55698: GO 55756
55700: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
55701: LD_ADDR_VAR 0 9
55705: PUSH
55706: LD_VAR 0 53
55710: PUSH
55711: LD_VAR 0 54
55715: PUSH
55716: LD_VAR 0 55
55720: PUSH
55721: LD_VAR 0 56
55725: PUSH
55726: LD_VAR 0 57
55730: PUSH
55731: LD_VAR 0 58
55735: PUSH
55736: EMPTY
55737: LIST
55738: LIST
55739: LIST
55740: LIST
55741: LIST
55742: LIST
55743: PUSH
55744: LD_VAR 0 4
55748: PUSH
55749: LD_INT 1
55751: PLUS
55752: ARRAY
55753: ST_TO_ADDR
55754: GO 55863
55756: LD_INT 31
55758: DOUBLE
55759: EQUAL
55760: IFTRUE 55806
55762: LD_INT 32
55764: DOUBLE
55765: EQUAL
55766: IFTRUE 55806
55768: LD_INT 33
55770: DOUBLE
55771: EQUAL
55772: IFTRUE 55806
55774: LD_INT 27
55776: DOUBLE
55777: EQUAL
55778: IFTRUE 55806
55780: LD_INT 26
55782: DOUBLE
55783: EQUAL
55784: IFTRUE 55806
55786: LD_INT 28
55788: DOUBLE
55789: EQUAL
55790: IFTRUE 55806
55792: LD_INT 29
55794: DOUBLE
55795: EQUAL
55796: IFTRUE 55806
55798: LD_INT 30
55800: DOUBLE
55801: EQUAL
55802: IFTRUE 55806
55804: GO 55862
55806: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
55807: LD_ADDR_VAR 0 9
55811: PUSH
55812: LD_VAR 0 59
55816: PUSH
55817: LD_VAR 0 60
55821: PUSH
55822: LD_VAR 0 61
55826: PUSH
55827: LD_VAR 0 62
55831: PUSH
55832: LD_VAR 0 63
55836: PUSH
55837: LD_VAR 0 64
55841: PUSH
55842: EMPTY
55843: LIST
55844: LIST
55845: LIST
55846: LIST
55847: LIST
55848: LIST
55849: PUSH
55850: LD_VAR 0 4
55854: PUSH
55855: LD_INT 1
55857: PLUS
55858: ARRAY
55859: ST_TO_ADDR
55860: GO 55863
55862: POP
// temp_list2 = [ ] ;
55863: LD_ADDR_VAR 0 10
55867: PUSH
55868: EMPTY
55869: ST_TO_ADDR
// for i in temp_list do
55870: LD_ADDR_VAR 0 8
55874: PUSH
55875: LD_VAR 0 9
55879: PUSH
55880: FOR_IN
55881: IFFALSE 55933
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
55883: LD_ADDR_VAR 0 10
55887: PUSH
55888: LD_VAR 0 10
55892: PUSH
55893: LD_VAR 0 8
55897: PUSH
55898: LD_INT 1
55900: ARRAY
55901: PUSH
55902: LD_VAR 0 2
55906: PLUS
55907: PUSH
55908: LD_VAR 0 8
55912: PUSH
55913: LD_INT 2
55915: ARRAY
55916: PUSH
55917: LD_VAR 0 3
55921: PLUS
55922: PUSH
55923: EMPTY
55924: LIST
55925: LIST
55926: PUSH
55927: EMPTY
55928: LIST
55929: ADD
55930: ST_TO_ADDR
55931: GO 55880
55933: POP
55934: POP
// result = temp_list2 ;
55935: LD_ADDR_VAR 0 7
55939: PUSH
55940: LD_VAR 0 10
55944: ST_TO_ADDR
// end ;
55945: LD_VAR 0 7
55949: RET
// export function EnemyInRange ( unit , dist ) ; begin
55950: LD_INT 0
55952: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
55953: LD_ADDR_VAR 0 3
55957: PUSH
55958: LD_VAR 0 1
55962: PPUSH
55963: CALL_OW 255
55967: PPUSH
55968: LD_VAR 0 1
55972: PPUSH
55973: CALL_OW 250
55977: PPUSH
55978: LD_VAR 0 1
55982: PPUSH
55983: CALL_OW 251
55987: PPUSH
55988: LD_VAR 0 2
55992: PPUSH
55993: CALL 29323 0 4
55997: PUSH
55998: LD_INT 4
56000: ARRAY
56001: ST_TO_ADDR
// end ;
56002: LD_VAR 0 3
56006: RET
// export function PlayerSeeMe ( unit ) ; begin
56007: LD_INT 0
56009: PPUSH
// result := See ( your_side , unit ) ;
56010: LD_ADDR_VAR 0 2
56014: PUSH
56015: LD_OWVAR 2
56019: PPUSH
56020: LD_VAR 0 1
56024: PPUSH
56025: CALL_OW 292
56029: ST_TO_ADDR
// end ;
56030: LD_VAR 0 2
56034: RET
// export function ReverseDir ( unit ) ; begin
56035: LD_INT 0
56037: PPUSH
// if not unit then
56038: LD_VAR 0 1
56042: NOT
56043: IFFALSE 56047
// exit ;
56045: GO 56070
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
56047: LD_ADDR_VAR 0 2
56051: PUSH
56052: LD_VAR 0 1
56056: PPUSH
56057: CALL_OW 254
56061: PUSH
56062: LD_INT 3
56064: PLUS
56065: PUSH
56066: LD_INT 6
56068: MOD
56069: ST_TO_ADDR
// end ;
56070: LD_VAR 0 2
56074: RET
// export function ReverseArray ( array ) ; var i ; begin
56075: LD_INT 0
56077: PPUSH
56078: PPUSH
// if not array then
56079: LD_VAR 0 1
56083: NOT
56084: IFFALSE 56088
// exit ;
56086: GO 56143
// result := [ ] ;
56088: LD_ADDR_VAR 0 2
56092: PUSH
56093: EMPTY
56094: ST_TO_ADDR
// for i := array downto 1 do
56095: LD_ADDR_VAR 0 3
56099: PUSH
56100: DOUBLE
56101: LD_VAR 0 1
56105: INC
56106: ST_TO_ADDR
56107: LD_INT 1
56109: PUSH
56110: FOR_DOWNTO
56111: IFFALSE 56141
// result := Join ( result , array [ i ] ) ;
56113: LD_ADDR_VAR 0 2
56117: PUSH
56118: LD_VAR 0 2
56122: PPUSH
56123: LD_VAR 0 1
56127: PUSH
56128: LD_VAR 0 3
56132: ARRAY
56133: PPUSH
56134: CALL 60786 0 2
56138: ST_TO_ADDR
56139: GO 56110
56141: POP
56142: POP
// end ;
56143: LD_VAR 0 2
56147: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tdist , tmp , hex ; begin
56148: LD_INT 0
56150: PPUSH
56151: PPUSH
56152: PPUSH
56153: PPUSH
56154: PPUSH
56155: PPUSH
// if not unit or not hexes then
56156: LD_VAR 0 1
56160: NOT
56161: PUSH
56162: LD_VAR 0 2
56166: NOT
56167: OR
56168: IFFALSE 56172
// exit ;
56170: GO 56295
// dist := 9999 ;
56172: LD_ADDR_VAR 0 5
56176: PUSH
56177: LD_INT 9999
56179: ST_TO_ADDR
// for i = 1 to hexes do
56180: LD_ADDR_VAR 0 4
56184: PUSH
56185: DOUBLE
56186: LD_INT 1
56188: DEC
56189: ST_TO_ADDR
56190: LD_VAR 0 2
56194: PUSH
56195: FOR_TO
56196: IFFALSE 56283
// begin tdist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
56198: LD_ADDR_VAR 0 6
56202: PUSH
56203: LD_VAR 0 1
56207: PPUSH
56208: LD_VAR 0 2
56212: PUSH
56213: LD_VAR 0 4
56217: ARRAY
56218: PUSH
56219: LD_INT 1
56221: ARRAY
56222: PPUSH
56223: LD_VAR 0 2
56227: PUSH
56228: LD_VAR 0 4
56232: ARRAY
56233: PUSH
56234: LD_INT 2
56236: ARRAY
56237: PPUSH
56238: CALL_OW 297
56242: ST_TO_ADDR
// if tdist < dist then
56243: LD_VAR 0 6
56247: PUSH
56248: LD_VAR 0 5
56252: LESS
56253: IFFALSE 56281
// begin hex := hexes [ i ] ;
56255: LD_ADDR_VAR 0 8
56259: PUSH
56260: LD_VAR 0 2
56264: PUSH
56265: LD_VAR 0 4
56269: ARRAY
56270: ST_TO_ADDR
// dist := tdist ;
56271: LD_ADDR_VAR 0 5
56275: PUSH
56276: LD_VAR 0 6
56280: ST_TO_ADDR
// end ; end ;
56281: GO 56195
56283: POP
56284: POP
// result := hex ;
56285: LD_ADDR_VAR 0 3
56289: PUSH
56290: LD_VAR 0 8
56294: ST_TO_ADDR
// end ;
56295: LD_VAR 0 3
56299: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
56300: LD_INT 0
56302: PPUSH
56303: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
56304: LD_VAR 0 1
56308: NOT
56309: PUSH
56310: LD_VAR 0 1
56314: PUSH
56315: LD_INT 21
56317: PUSH
56318: LD_INT 2
56320: PUSH
56321: EMPTY
56322: LIST
56323: LIST
56324: PUSH
56325: LD_INT 23
56327: PUSH
56328: LD_INT 2
56330: PUSH
56331: EMPTY
56332: LIST
56333: LIST
56334: PUSH
56335: EMPTY
56336: LIST
56337: LIST
56338: PPUSH
56339: CALL_OW 69
56343: IN
56344: NOT
56345: OR
56346: IFFALSE 56350
// exit ;
56348: GO 56397
// for i = 1 to 3 do
56350: LD_ADDR_VAR 0 3
56354: PUSH
56355: DOUBLE
56356: LD_INT 1
56358: DEC
56359: ST_TO_ADDR
56360: LD_INT 3
56362: PUSH
56363: FOR_TO
56364: IFFALSE 56395
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
56366: LD_VAR 0 1
56370: PPUSH
56371: CALL_OW 250
56375: PPUSH
56376: LD_VAR 0 1
56380: PPUSH
56381: CALL_OW 251
56385: PPUSH
56386: LD_INT 1
56388: PPUSH
56389: CALL_OW 453
56393: GO 56363
56395: POP
56396: POP
// end ;
56397: LD_VAR 0 2
56401: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
56402: LD_INT 0
56404: PPUSH
56405: PPUSH
56406: PPUSH
56407: PPUSH
56408: PPUSH
56409: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
56410: LD_VAR 0 1
56414: NOT
56415: PUSH
56416: LD_VAR 0 2
56420: NOT
56421: OR
56422: PUSH
56423: LD_VAR 0 1
56427: PPUSH
56428: CALL_OW 314
56432: OR
56433: IFFALSE 56437
// exit ;
56435: GO 56904
// if GetLives ( i ) < 250 then
56437: LD_VAR 0 4
56441: PPUSH
56442: CALL_OW 256
56446: PUSH
56447: LD_INT 250
56449: LESS
56450: IFFALSE 56463
// begin ComAutodestruct ( i ) ;
56452: LD_VAR 0 4
56456: PPUSH
56457: CALL 56300 0 1
// exit ;
56461: GO 56904
// end ; x := GetX ( enemy_unit ) ;
56463: LD_ADDR_VAR 0 7
56467: PUSH
56468: LD_VAR 0 2
56472: PPUSH
56473: CALL_OW 250
56477: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
56478: LD_ADDR_VAR 0 8
56482: PUSH
56483: LD_VAR 0 2
56487: PPUSH
56488: CALL_OW 251
56492: ST_TO_ADDR
// if not x or not y then
56493: LD_VAR 0 7
56497: NOT
56498: PUSH
56499: LD_VAR 0 8
56503: NOT
56504: OR
56505: IFFALSE 56509
// exit ;
56507: GO 56904
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
56509: LD_ADDR_VAR 0 6
56513: PUSH
56514: LD_VAR 0 7
56518: PPUSH
56519: LD_INT 0
56521: PPUSH
56522: LD_INT 4
56524: PPUSH
56525: CALL_OW 272
56529: PUSH
56530: LD_VAR 0 8
56534: PPUSH
56535: LD_INT 0
56537: PPUSH
56538: LD_INT 4
56540: PPUSH
56541: CALL_OW 273
56545: PUSH
56546: EMPTY
56547: LIST
56548: LIST
56549: PUSH
56550: LD_VAR 0 7
56554: PPUSH
56555: LD_INT 1
56557: PPUSH
56558: LD_INT 4
56560: PPUSH
56561: CALL_OW 272
56565: PUSH
56566: LD_VAR 0 8
56570: PPUSH
56571: LD_INT 1
56573: PPUSH
56574: LD_INT 4
56576: PPUSH
56577: CALL_OW 273
56581: PUSH
56582: EMPTY
56583: LIST
56584: LIST
56585: PUSH
56586: LD_VAR 0 7
56590: PPUSH
56591: LD_INT 2
56593: PPUSH
56594: LD_INT 4
56596: PPUSH
56597: CALL_OW 272
56601: PUSH
56602: LD_VAR 0 8
56606: PPUSH
56607: LD_INT 2
56609: PPUSH
56610: LD_INT 4
56612: PPUSH
56613: CALL_OW 273
56617: PUSH
56618: EMPTY
56619: LIST
56620: LIST
56621: PUSH
56622: LD_VAR 0 7
56626: PPUSH
56627: LD_INT 3
56629: PPUSH
56630: LD_INT 4
56632: PPUSH
56633: CALL_OW 272
56637: PUSH
56638: LD_VAR 0 8
56642: PPUSH
56643: LD_INT 3
56645: PPUSH
56646: LD_INT 4
56648: PPUSH
56649: CALL_OW 273
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_VAR 0 7
56662: PPUSH
56663: LD_INT 4
56665: PPUSH
56666: LD_INT 4
56668: PPUSH
56669: CALL_OW 272
56673: PUSH
56674: LD_VAR 0 8
56678: PPUSH
56679: LD_INT 4
56681: PPUSH
56682: LD_INT 4
56684: PPUSH
56685: CALL_OW 273
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: PUSH
56694: LD_VAR 0 7
56698: PPUSH
56699: LD_INT 5
56701: PPUSH
56702: LD_INT 4
56704: PPUSH
56705: CALL_OW 272
56709: PUSH
56710: LD_VAR 0 8
56714: PPUSH
56715: LD_INT 5
56717: PPUSH
56718: LD_INT 4
56720: PPUSH
56721: CALL_OW 273
56725: PUSH
56726: EMPTY
56727: LIST
56728: LIST
56729: PUSH
56730: EMPTY
56731: LIST
56732: LIST
56733: LIST
56734: LIST
56735: LIST
56736: LIST
56737: ST_TO_ADDR
// for i = tmp downto 1 do
56738: LD_ADDR_VAR 0 4
56742: PUSH
56743: DOUBLE
56744: LD_VAR 0 6
56748: INC
56749: ST_TO_ADDR
56750: LD_INT 1
56752: PUSH
56753: FOR_DOWNTO
56754: IFFALSE 56855
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
56756: LD_VAR 0 6
56760: PUSH
56761: LD_VAR 0 4
56765: ARRAY
56766: PUSH
56767: LD_INT 1
56769: ARRAY
56770: PPUSH
56771: LD_VAR 0 6
56775: PUSH
56776: LD_VAR 0 4
56780: ARRAY
56781: PUSH
56782: LD_INT 2
56784: ARRAY
56785: PPUSH
56786: CALL_OW 488
56790: NOT
56791: PUSH
56792: LD_VAR 0 6
56796: PUSH
56797: LD_VAR 0 4
56801: ARRAY
56802: PUSH
56803: LD_INT 1
56805: ARRAY
56806: PPUSH
56807: LD_VAR 0 6
56811: PUSH
56812: LD_VAR 0 4
56816: ARRAY
56817: PUSH
56818: LD_INT 2
56820: ARRAY
56821: PPUSH
56822: CALL_OW 428
56826: PUSH
56827: LD_INT 0
56829: NONEQUAL
56830: OR
56831: IFFALSE 56853
// tmp := Delete ( tmp , i ) ;
56833: LD_ADDR_VAR 0 6
56837: PUSH
56838: LD_VAR 0 6
56842: PPUSH
56843: LD_VAR 0 4
56847: PPUSH
56848: CALL_OW 3
56852: ST_TO_ADDR
56853: GO 56753
56855: POP
56856: POP
// j := GetClosestHex ( unit , tmp ) ;
56857: LD_ADDR_VAR 0 5
56861: PUSH
56862: LD_VAR 0 1
56866: PPUSH
56867: LD_VAR 0 6
56871: PPUSH
56872: CALL 56148 0 2
56876: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
56877: LD_VAR 0 1
56881: PPUSH
56882: LD_VAR 0 5
56886: PUSH
56887: LD_INT 1
56889: ARRAY
56890: PPUSH
56891: LD_VAR 0 5
56895: PUSH
56896: LD_INT 2
56898: ARRAY
56899: PPUSH
56900: CALL_OW 111
// end ;
56904: LD_VAR 0 3
56908: RET
// export function PrepareApemanSoldier ( ) ; begin
56909: LD_INT 0
56911: PPUSH
// uc_nation := 0 ;
56912: LD_ADDR_OWVAR 21
56916: PUSH
56917: LD_INT 0
56919: ST_TO_ADDR
// hc_sex := sex_male ;
56920: LD_ADDR_OWVAR 27
56924: PUSH
56925: LD_INT 1
56927: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
56928: LD_ADDR_OWVAR 28
56932: PUSH
56933: LD_INT 15
56935: ST_TO_ADDR
// hc_gallery :=  ;
56936: LD_ADDR_OWVAR 33
56940: PUSH
56941: LD_STRING 
56943: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
56944: LD_ADDR_OWVAR 31
56948: PUSH
56949: LD_INT 0
56951: PPUSH
56952: LD_INT 3
56954: PPUSH
56955: CALL_OW 12
56959: PUSH
56960: LD_INT 0
56962: PPUSH
56963: LD_INT 3
56965: PPUSH
56966: CALL_OW 12
56970: PUSH
56971: LD_INT 0
56973: PUSH
56974: LD_INT 0
56976: PUSH
56977: EMPTY
56978: LIST
56979: LIST
56980: LIST
56981: LIST
56982: ST_TO_ADDR
// end ;
56983: LD_VAR 0 1
56987: RET
// export function PrepareApemanEngineer ( ) ; begin
56988: LD_INT 0
56990: PPUSH
// uc_nation := 0 ;
56991: LD_ADDR_OWVAR 21
56995: PUSH
56996: LD_INT 0
56998: ST_TO_ADDR
// hc_sex := sex_male ;
56999: LD_ADDR_OWVAR 27
57003: PUSH
57004: LD_INT 1
57006: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
57007: LD_ADDR_OWVAR 28
57011: PUSH
57012: LD_INT 16
57014: ST_TO_ADDR
// hc_gallery :=  ;
57015: LD_ADDR_OWVAR 33
57019: PUSH
57020: LD_STRING 
57022: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57023: LD_ADDR_OWVAR 31
57027: PUSH
57028: LD_INT 0
57030: PPUSH
57031: LD_INT 3
57033: PPUSH
57034: CALL_OW 12
57038: PUSH
57039: LD_INT 0
57041: PPUSH
57042: LD_INT 3
57044: PPUSH
57045: CALL_OW 12
57049: PUSH
57050: LD_INT 0
57052: PUSH
57053: LD_INT 0
57055: PUSH
57056: EMPTY
57057: LIST
57058: LIST
57059: LIST
57060: LIST
57061: ST_TO_ADDR
// end ;
57062: LD_VAR 0 1
57066: RET
// export function PrepareApeman ( agressivity ) ; begin
57067: LD_INT 0
57069: PPUSH
// uc_side := 0 ;
57070: LD_ADDR_OWVAR 20
57074: PUSH
57075: LD_INT 0
57077: ST_TO_ADDR
// uc_nation := 0 ;
57078: LD_ADDR_OWVAR 21
57082: PUSH
57083: LD_INT 0
57085: ST_TO_ADDR
// hc_sex := sex_male ;
57086: LD_ADDR_OWVAR 27
57090: PUSH
57091: LD_INT 1
57093: ST_TO_ADDR
// hc_class := class_apeman ;
57094: LD_ADDR_OWVAR 28
57098: PUSH
57099: LD_INT 12
57101: ST_TO_ADDR
// hc_gallery :=  ;
57102: LD_ADDR_OWVAR 33
57106: PUSH
57107: LD_STRING 
57109: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
57110: LD_ADDR_OWVAR 35
57114: PUSH
57115: LD_VAR 0 1
57119: NEG
57120: PPUSH
57121: LD_VAR 0 1
57125: PPUSH
57126: CALL_OW 12
57130: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
57131: LD_ADDR_OWVAR 31
57135: PUSH
57136: LD_INT 0
57138: PPUSH
57139: LD_INT 3
57141: PPUSH
57142: CALL_OW 12
57146: PUSH
57147: LD_INT 0
57149: PPUSH
57150: LD_INT 3
57152: PPUSH
57153: CALL_OW 12
57157: PUSH
57158: LD_INT 0
57160: PUSH
57161: LD_INT 0
57163: PUSH
57164: EMPTY
57165: LIST
57166: LIST
57167: LIST
57168: LIST
57169: ST_TO_ADDR
// end ;
57170: LD_VAR 0 2
57174: RET
// export function PrepareTiger ( agressivity ) ; begin
57175: LD_INT 0
57177: PPUSH
// uc_side := 0 ;
57178: LD_ADDR_OWVAR 20
57182: PUSH
57183: LD_INT 0
57185: ST_TO_ADDR
// uc_nation := 0 ;
57186: LD_ADDR_OWVAR 21
57190: PUSH
57191: LD_INT 0
57193: ST_TO_ADDR
// hc_class := class_tiger ;
57194: LD_ADDR_OWVAR 28
57198: PUSH
57199: LD_INT 14
57201: ST_TO_ADDR
// hc_gallery :=  ;
57202: LD_ADDR_OWVAR 33
57206: PUSH
57207: LD_STRING 
57209: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
57210: LD_ADDR_OWVAR 35
57214: PUSH
57215: LD_VAR 0 1
57219: NEG
57220: PPUSH
57221: LD_VAR 0 1
57225: PPUSH
57226: CALL_OW 12
57230: ST_TO_ADDR
// end ;
57231: LD_VAR 0 2
57235: RET
// export function PrepareEnchidna ( ) ; begin
57236: LD_INT 0
57238: PPUSH
// uc_side := 0 ;
57239: LD_ADDR_OWVAR 20
57243: PUSH
57244: LD_INT 0
57246: ST_TO_ADDR
// uc_nation := 0 ;
57247: LD_ADDR_OWVAR 21
57251: PUSH
57252: LD_INT 0
57254: ST_TO_ADDR
// hc_class := class_baggie ;
57255: LD_ADDR_OWVAR 28
57259: PUSH
57260: LD_INT 13
57262: ST_TO_ADDR
// hc_gallery :=  ;
57263: LD_ADDR_OWVAR 33
57267: PUSH
57268: LD_STRING 
57270: ST_TO_ADDR
// end ;
57271: LD_VAR 0 1
57275: RET
// export function PrepareFrog ( ) ; begin
57276: LD_INT 0
57278: PPUSH
// uc_side := 0 ;
57279: LD_ADDR_OWVAR 20
57283: PUSH
57284: LD_INT 0
57286: ST_TO_ADDR
// uc_nation := 0 ;
57287: LD_ADDR_OWVAR 21
57291: PUSH
57292: LD_INT 0
57294: ST_TO_ADDR
// hc_class := class_frog ;
57295: LD_ADDR_OWVAR 28
57299: PUSH
57300: LD_INT 19
57302: ST_TO_ADDR
// hc_gallery :=  ;
57303: LD_ADDR_OWVAR 33
57307: PUSH
57308: LD_STRING 
57310: ST_TO_ADDR
// end ;
57311: LD_VAR 0 1
57315: RET
// export function PrepareFish ( ) ; begin
57316: LD_INT 0
57318: PPUSH
// uc_side := 0 ;
57319: LD_ADDR_OWVAR 20
57323: PUSH
57324: LD_INT 0
57326: ST_TO_ADDR
// uc_nation := 0 ;
57327: LD_ADDR_OWVAR 21
57331: PUSH
57332: LD_INT 0
57334: ST_TO_ADDR
// hc_class := class_fish ;
57335: LD_ADDR_OWVAR 28
57339: PUSH
57340: LD_INT 20
57342: ST_TO_ADDR
// hc_gallery :=  ;
57343: LD_ADDR_OWVAR 33
57347: PUSH
57348: LD_STRING 
57350: ST_TO_ADDR
// end ;
57351: LD_VAR 0 1
57355: RET
// export function PrepareBird ( ) ; begin
57356: LD_INT 0
57358: PPUSH
// uc_side := 0 ;
57359: LD_ADDR_OWVAR 20
57363: PUSH
57364: LD_INT 0
57366: ST_TO_ADDR
// uc_nation := 0 ;
57367: LD_ADDR_OWVAR 21
57371: PUSH
57372: LD_INT 0
57374: ST_TO_ADDR
// hc_class := class_phororhacos ;
57375: LD_ADDR_OWVAR 28
57379: PUSH
57380: LD_INT 18
57382: ST_TO_ADDR
// hc_gallery :=  ;
57383: LD_ADDR_OWVAR 33
57387: PUSH
57388: LD_STRING 
57390: ST_TO_ADDR
// end ;
57391: LD_VAR 0 1
57395: RET
// export function PrepareHorse ( ) ; begin
57396: LD_INT 0
57398: PPUSH
// uc_side := 0 ;
57399: LD_ADDR_OWVAR 20
57403: PUSH
57404: LD_INT 0
57406: ST_TO_ADDR
// uc_nation := 0 ;
57407: LD_ADDR_OWVAR 21
57411: PUSH
57412: LD_INT 0
57414: ST_TO_ADDR
// hc_class := class_horse ;
57415: LD_ADDR_OWVAR 28
57419: PUSH
57420: LD_INT 21
57422: ST_TO_ADDR
// hc_gallery :=  ;
57423: LD_ADDR_OWVAR 33
57427: PUSH
57428: LD_STRING 
57430: ST_TO_ADDR
// end ;
57431: LD_VAR 0 1
57435: RET
// export function PrepareMastodont ( ) ; begin
57436: LD_INT 0
57438: PPUSH
// uc_side := 0 ;
57439: LD_ADDR_OWVAR 20
57443: PUSH
57444: LD_INT 0
57446: ST_TO_ADDR
// uc_nation := 0 ;
57447: LD_ADDR_OWVAR 21
57451: PUSH
57452: LD_INT 0
57454: ST_TO_ADDR
// vc_chassis := class_mastodont ;
57455: LD_ADDR_OWVAR 37
57459: PUSH
57460: LD_INT 31
57462: ST_TO_ADDR
// vc_control := control_rider ;
57463: LD_ADDR_OWVAR 38
57467: PUSH
57468: LD_INT 4
57470: ST_TO_ADDR
// end ;
57471: LD_VAR 0 1
57475: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
57476: LD_INT 0
57478: PPUSH
57479: PPUSH
57480: PPUSH
// uc_side = 0 ;
57481: LD_ADDR_OWVAR 20
57485: PUSH
57486: LD_INT 0
57488: ST_TO_ADDR
// uc_nation = 0 ;
57489: LD_ADDR_OWVAR 21
57493: PUSH
57494: LD_INT 0
57496: ST_TO_ADDR
// InitHc_All ( ) ;
57497: CALL_OW 584
// InitVc ;
57501: CALL_OW 20
// if mastodonts then
57505: LD_VAR 0 6
57509: IFFALSE 57576
// for i = 1 to mastodonts do
57511: LD_ADDR_VAR 0 11
57515: PUSH
57516: DOUBLE
57517: LD_INT 1
57519: DEC
57520: ST_TO_ADDR
57521: LD_VAR 0 6
57525: PUSH
57526: FOR_TO
57527: IFFALSE 57574
// begin vc_chassis := 31 ;
57529: LD_ADDR_OWVAR 37
57533: PUSH
57534: LD_INT 31
57536: ST_TO_ADDR
// vc_control := control_rider ;
57537: LD_ADDR_OWVAR 38
57541: PUSH
57542: LD_INT 4
57544: ST_TO_ADDR
// animal := CreateVehicle ;
57545: LD_ADDR_VAR 0 12
57549: PUSH
57550: CALL_OW 45
57554: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57555: LD_VAR 0 12
57559: PPUSH
57560: LD_VAR 0 8
57564: PPUSH
57565: LD_INT 0
57567: PPUSH
57568: CALL 59704 0 3
// end ;
57572: GO 57526
57574: POP
57575: POP
// if horses then
57576: LD_VAR 0 5
57580: IFFALSE 57647
// for i = 1 to horses do
57582: LD_ADDR_VAR 0 11
57586: PUSH
57587: DOUBLE
57588: LD_INT 1
57590: DEC
57591: ST_TO_ADDR
57592: LD_VAR 0 5
57596: PUSH
57597: FOR_TO
57598: IFFALSE 57645
// begin hc_class := 21 ;
57600: LD_ADDR_OWVAR 28
57604: PUSH
57605: LD_INT 21
57607: ST_TO_ADDR
// hc_gallery :=  ;
57608: LD_ADDR_OWVAR 33
57612: PUSH
57613: LD_STRING 
57615: ST_TO_ADDR
// animal := CreateHuman ;
57616: LD_ADDR_VAR 0 12
57620: PUSH
57621: CALL_OW 44
57625: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57626: LD_VAR 0 12
57630: PPUSH
57631: LD_VAR 0 8
57635: PPUSH
57636: LD_INT 0
57638: PPUSH
57639: CALL 59704 0 3
// end ;
57643: GO 57597
57645: POP
57646: POP
// if birds then
57647: LD_VAR 0 1
57651: IFFALSE 57718
// for i = 1 to birds do
57653: LD_ADDR_VAR 0 11
57657: PUSH
57658: DOUBLE
57659: LD_INT 1
57661: DEC
57662: ST_TO_ADDR
57663: LD_VAR 0 1
57667: PUSH
57668: FOR_TO
57669: IFFALSE 57716
// begin hc_class := 18 ;
57671: LD_ADDR_OWVAR 28
57675: PUSH
57676: LD_INT 18
57678: ST_TO_ADDR
// hc_gallery =  ;
57679: LD_ADDR_OWVAR 33
57683: PUSH
57684: LD_STRING 
57686: ST_TO_ADDR
// animal := CreateHuman ;
57687: LD_ADDR_VAR 0 12
57691: PUSH
57692: CALL_OW 44
57696: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57697: LD_VAR 0 12
57701: PPUSH
57702: LD_VAR 0 8
57706: PPUSH
57707: LD_INT 0
57709: PPUSH
57710: CALL 59704 0 3
// end ;
57714: GO 57668
57716: POP
57717: POP
// if tigers then
57718: LD_VAR 0 2
57722: IFFALSE 57806
// for i = 1 to tigers do
57724: LD_ADDR_VAR 0 11
57728: PUSH
57729: DOUBLE
57730: LD_INT 1
57732: DEC
57733: ST_TO_ADDR
57734: LD_VAR 0 2
57738: PUSH
57739: FOR_TO
57740: IFFALSE 57804
// begin hc_class = class_tiger ;
57742: LD_ADDR_OWVAR 28
57746: PUSH
57747: LD_INT 14
57749: ST_TO_ADDR
// hc_gallery =  ;
57750: LD_ADDR_OWVAR 33
57754: PUSH
57755: LD_STRING 
57757: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
57758: LD_ADDR_OWVAR 35
57762: PUSH
57763: LD_INT 7
57765: NEG
57766: PPUSH
57767: LD_INT 7
57769: PPUSH
57770: CALL_OW 12
57774: ST_TO_ADDR
// animal := CreateHuman ;
57775: LD_ADDR_VAR 0 12
57779: PUSH
57780: CALL_OW 44
57784: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57785: LD_VAR 0 12
57789: PPUSH
57790: LD_VAR 0 8
57794: PPUSH
57795: LD_INT 0
57797: PPUSH
57798: CALL 59704 0 3
// end ;
57802: GO 57739
57804: POP
57805: POP
// if apemans then
57806: LD_VAR 0 3
57810: IFFALSE 57933
// for i = 1 to apemans do
57812: LD_ADDR_VAR 0 11
57816: PUSH
57817: DOUBLE
57818: LD_INT 1
57820: DEC
57821: ST_TO_ADDR
57822: LD_VAR 0 3
57826: PUSH
57827: FOR_TO
57828: IFFALSE 57931
// begin hc_class = class_apeman ;
57830: LD_ADDR_OWVAR 28
57834: PUSH
57835: LD_INT 12
57837: ST_TO_ADDR
// hc_gallery =  ;
57838: LD_ADDR_OWVAR 33
57842: PUSH
57843: LD_STRING 
57845: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
57846: LD_ADDR_OWVAR 35
57850: PUSH
57851: LD_INT 2
57853: NEG
57854: PPUSH
57855: LD_INT 2
57857: PPUSH
57858: CALL_OW 12
57862: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
57863: LD_ADDR_OWVAR 31
57867: PUSH
57868: LD_INT 1
57870: PPUSH
57871: LD_INT 3
57873: PPUSH
57874: CALL_OW 12
57878: PUSH
57879: LD_INT 1
57881: PPUSH
57882: LD_INT 3
57884: PPUSH
57885: CALL_OW 12
57889: PUSH
57890: LD_INT 0
57892: PUSH
57893: LD_INT 0
57895: PUSH
57896: EMPTY
57897: LIST
57898: LIST
57899: LIST
57900: LIST
57901: ST_TO_ADDR
// animal := CreateHuman ;
57902: LD_ADDR_VAR 0 12
57906: PUSH
57907: CALL_OW 44
57911: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57912: LD_VAR 0 12
57916: PPUSH
57917: LD_VAR 0 8
57921: PPUSH
57922: LD_INT 0
57924: PPUSH
57925: CALL 59704 0 3
// end ;
57929: GO 57827
57931: POP
57932: POP
// if enchidnas then
57933: LD_VAR 0 4
57937: IFFALSE 58004
// for i = 1 to enchidnas do
57939: LD_ADDR_VAR 0 11
57943: PUSH
57944: DOUBLE
57945: LD_INT 1
57947: DEC
57948: ST_TO_ADDR
57949: LD_VAR 0 4
57953: PUSH
57954: FOR_TO
57955: IFFALSE 58002
// begin hc_class = 13 ;
57957: LD_ADDR_OWVAR 28
57961: PUSH
57962: LD_INT 13
57964: ST_TO_ADDR
// hc_gallery =  ;
57965: LD_ADDR_OWVAR 33
57969: PUSH
57970: LD_STRING 
57972: ST_TO_ADDR
// animal := CreateHuman ;
57973: LD_ADDR_VAR 0 12
57977: PUSH
57978: CALL_OW 44
57982: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
57983: LD_VAR 0 12
57987: PPUSH
57988: LD_VAR 0 8
57992: PPUSH
57993: LD_INT 0
57995: PPUSH
57996: CALL 59704 0 3
// end ;
58000: GO 57954
58002: POP
58003: POP
// if fishes then
58004: LD_VAR 0 7
58008: IFFALSE 58075
// for i = 1 to fishes do
58010: LD_ADDR_VAR 0 11
58014: PUSH
58015: DOUBLE
58016: LD_INT 1
58018: DEC
58019: ST_TO_ADDR
58020: LD_VAR 0 7
58024: PUSH
58025: FOR_TO
58026: IFFALSE 58073
// begin hc_class = 20 ;
58028: LD_ADDR_OWVAR 28
58032: PUSH
58033: LD_INT 20
58035: ST_TO_ADDR
// hc_gallery =  ;
58036: LD_ADDR_OWVAR 33
58040: PUSH
58041: LD_STRING 
58043: ST_TO_ADDR
// animal := CreateHuman ;
58044: LD_ADDR_VAR 0 12
58048: PUSH
58049: CALL_OW 44
58053: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
58054: LD_VAR 0 12
58058: PPUSH
58059: LD_VAR 0 9
58063: PPUSH
58064: LD_INT 0
58066: PPUSH
58067: CALL 59704 0 3
// end ;
58071: GO 58025
58073: POP
58074: POP
// end ;
58075: LD_VAR 0 10
58079: RET
// export function WantHeal ( sci , unit ) ; begin
58080: LD_INT 0
58082: PPUSH
// if GetTaskList ( sci ) > 0 then
58083: LD_VAR 0 1
58087: PPUSH
58088: CALL_OW 437
58092: PUSH
58093: LD_INT 0
58095: GREATER
58096: IFFALSE 58166
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
58098: LD_VAR 0 1
58102: PPUSH
58103: CALL_OW 437
58107: PUSH
58108: LD_INT 1
58110: ARRAY
58111: PUSH
58112: LD_INT 1
58114: ARRAY
58115: PUSH
58116: LD_STRING l
58118: EQUAL
58119: PUSH
58120: LD_VAR 0 1
58124: PPUSH
58125: CALL_OW 437
58129: PUSH
58130: LD_INT 1
58132: ARRAY
58133: PUSH
58134: LD_INT 4
58136: ARRAY
58137: PUSH
58138: LD_VAR 0 2
58142: EQUAL
58143: AND
58144: IFFALSE 58156
// result := true else
58146: LD_ADDR_VAR 0 3
58150: PUSH
58151: LD_INT 1
58153: ST_TO_ADDR
58154: GO 58164
// result := false ;
58156: LD_ADDR_VAR 0 3
58160: PUSH
58161: LD_INT 0
58163: ST_TO_ADDR
// end else
58164: GO 58174
// result := false ;
58166: LD_ADDR_VAR 0 3
58170: PUSH
58171: LD_INT 0
58173: ST_TO_ADDR
// end ;
58174: LD_VAR 0 3
58178: RET
// export function HealTarget ( sci ) ; begin
58179: LD_INT 0
58181: PPUSH
// if not sci then
58182: LD_VAR 0 1
58186: NOT
58187: IFFALSE 58191
// exit ;
58189: GO 58256
// result := 0 ;
58191: LD_ADDR_VAR 0 2
58195: PUSH
58196: LD_INT 0
58198: ST_TO_ADDR
// if GetTaskList ( sci ) then
58199: LD_VAR 0 1
58203: PPUSH
58204: CALL_OW 437
58208: IFFALSE 58256
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
58210: LD_VAR 0 1
58214: PPUSH
58215: CALL_OW 437
58219: PUSH
58220: LD_INT 1
58222: ARRAY
58223: PUSH
58224: LD_INT 1
58226: ARRAY
58227: PUSH
58228: LD_STRING l
58230: EQUAL
58231: IFFALSE 58256
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
58233: LD_ADDR_VAR 0 2
58237: PUSH
58238: LD_VAR 0 1
58242: PPUSH
58243: CALL_OW 437
58247: PUSH
58248: LD_INT 1
58250: ARRAY
58251: PUSH
58252: LD_INT 4
58254: ARRAY
58255: ST_TO_ADDR
// end ;
58256: LD_VAR 0 2
58260: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
58261: LD_INT 0
58263: PPUSH
58264: PPUSH
58265: PPUSH
58266: PPUSH
// if not base_units then
58267: LD_VAR 0 1
58271: NOT
58272: IFFALSE 58276
// exit ;
58274: GO 58363
// result := false ;
58276: LD_ADDR_VAR 0 2
58280: PUSH
58281: LD_INT 0
58283: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
58284: LD_ADDR_VAR 0 5
58288: PUSH
58289: LD_VAR 0 1
58293: PPUSH
58294: LD_INT 21
58296: PUSH
58297: LD_INT 3
58299: PUSH
58300: EMPTY
58301: LIST
58302: LIST
58303: PPUSH
58304: CALL_OW 72
58308: ST_TO_ADDR
// if not tmp then
58309: LD_VAR 0 5
58313: NOT
58314: IFFALSE 58318
// exit ;
58316: GO 58363
// for i in tmp do
58318: LD_ADDR_VAR 0 3
58322: PUSH
58323: LD_VAR 0 5
58327: PUSH
58328: FOR_IN
58329: IFFALSE 58361
// begin result := EnemyInRange ( i , 22 ) ;
58331: LD_ADDR_VAR 0 2
58335: PUSH
58336: LD_VAR 0 3
58340: PPUSH
58341: LD_INT 22
58343: PPUSH
58344: CALL 55950 0 2
58348: ST_TO_ADDR
// if result then
58349: LD_VAR 0 2
58353: IFFALSE 58359
// exit ;
58355: POP
58356: POP
58357: GO 58363
// end ;
58359: GO 58328
58361: POP
58362: POP
// end ;
58363: LD_VAR 0 2
58367: RET
// export function FilterByTag ( units , tag ) ; begin
58368: LD_INT 0
58370: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
58371: LD_ADDR_VAR 0 3
58375: PUSH
58376: LD_VAR 0 1
58380: PPUSH
58381: LD_INT 120
58383: PUSH
58384: LD_VAR 0 2
58388: PUSH
58389: EMPTY
58390: LIST
58391: LIST
58392: PPUSH
58393: CALL_OW 72
58397: ST_TO_ADDR
// end ;
58398: LD_VAR 0 3
58402: RET
// export function IsDriver ( un ) ; begin
58403: LD_INT 0
58405: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
58406: LD_ADDR_VAR 0 2
58410: PUSH
58411: LD_VAR 0 1
58415: PUSH
58416: LD_INT 55
58418: PUSH
58419: EMPTY
58420: LIST
58421: PPUSH
58422: CALL_OW 69
58426: IN
58427: ST_TO_ADDR
// end ;
58428: LD_VAR 0 2
58432: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
58433: LD_INT 0
58435: PPUSH
58436: PPUSH
// list := [ ] ;
58437: LD_ADDR_VAR 0 5
58441: PUSH
58442: EMPTY
58443: ST_TO_ADDR
// case d of 0 :
58444: LD_VAR 0 3
58448: PUSH
58449: LD_INT 0
58451: DOUBLE
58452: EQUAL
58453: IFTRUE 58457
58455: GO 58590
58457: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
58458: LD_ADDR_VAR 0 5
58462: PUSH
58463: LD_VAR 0 1
58467: PUSH
58468: LD_INT 4
58470: MINUS
58471: PUSH
58472: LD_VAR 0 2
58476: PUSH
58477: LD_INT 4
58479: MINUS
58480: PUSH
58481: LD_INT 2
58483: PUSH
58484: EMPTY
58485: LIST
58486: LIST
58487: LIST
58488: PUSH
58489: LD_VAR 0 1
58493: PUSH
58494: LD_INT 3
58496: MINUS
58497: PUSH
58498: LD_VAR 0 2
58502: PUSH
58503: LD_INT 1
58505: PUSH
58506: EMPTY
58507: LIST
58508: LIST
58509: LIST
58510: PUSH
58511: LD_VAR 0 1
58515: PUSH
58516: LD_INT 4
58518: PLUS
58519: PUSH
58520: LD_VAR 0 2
58524: PUSH
58525: LD_INT 4
58527: PUSH
58528: EMPTY
58529: LIST
58530: LIST
58531: LIST
58532: PUSH
58533: LD_VAR 0 1
58537: PUSH
58538: LD_INT 3
58540: PLUS
58541: PUSH
58542: LD_VAR 0 2
58546: PUSH
58547: LD_INT 3
58549: PLUS
58550: PUSH
58551: LD_INT 5
58553: PUSH
58554: EMPTY
58555: LIST
58556: LIST
58557: LIST
58558: PUSH
58559: LD_VAR 0 1
58563: PUSH
58564: LD_VAR 0 2
58568: PUSH
58569: LD_INT 4
58571: PLUS
58572: PUSH
58573: LD_INT 0
58575: PUSH
58576: EMPTY
58577: LIST
58578: LIST
58579: LIST
58580: PUSH
58581: EMPTY
58582: LIST
58583: LIST
58584: LIST
58585: LIST
58586: LIST
58587: ST_TO_ADDR
// end ; 1 :
58588: GO 59288
58590: LD_INT 1
58592: DOUBLE
58593: EQUAL
58594: IFTRUE 58598
58596: GO 58731
58598: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
58599: LD_ADDR_VAR 0 5
58603: PUSH
58604: LD_VAR 0 1
58608: PUSH
58609: LD_VAR 0 2
58613: PUSH
58614: LD_INT 4
58616: MINUS
58617: PUSH
58618: LD_INT 3
58620: PUSH
58621: EMPTY
58622: LIST
58623: LIST
58624: LIST
58625: PUSH
58626: LD_VAR 0 1
58630: PUSH
58631: LD_INT 3
58633: MINUS
58634: PUSH
58635: LD_VAR 0 2
58639: PUSH
58640: LD_INT 3
58642: MINUS
58643: PUSH
58644: LD_INT 2
58646: PUSH
58647: EMPTY
58648: LIST
58649: LIST
58650: LIST
58651: PUSH
58652: LD_VAR 0 1
58656: PUSH
58657: LD_INT 4
58659: MINUS
58660: PUSH
58661: LD_VAR 0 2
58665: PUSH
58666: LD_INT 1
58668: PUSH
58669: EMPTY
58670: LIST
58671: LIST
58672: LIST
58673: PUSH
58674: LD_VAR 0 1
58678: PUSH
58679: LD_VAR 0 2
58683: PUSH
58684: LD_INT 3
58686: PLUS
58687: PUSH
58688: LD_INT 0
58690: PUSH
58691: EMPTY
58692: LIST
58693: LIST
58694: LIST
58695: PUSH
58696: LD_VAR 0 1
58700: PUSH
58701: LD_INT 4
58703: PLUS
58704: PUSH
58705: LD_VAR 0 2
58709: PUSH
58710: LD_INT 4
58712: PLUS
58713: PUSH
58714: LD_INT 5
58716: PUSH
58717: EMPTY
58718: LIST
58719: LIST
58720: LIST
58721: PUSH
58722: EMPTY
58723: LIST
58724: LIST
58725: LIST
58726: LIST
58727: LIST
58728: ST_TO_ADDR
// end ; 2 :
58729: GO 59288
58731: LD_INT 2
58733: DOUBLE
58734: EQUAL
58735: IFTRUE 58739
58737: GO 58868
58739: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
58740: LD_ADDR_VAR 0 5
58744: PUSH
58745: LD_VAR 0 1
58749: PUSH
58750: LD_VAR 0 2
58754: PUSH
58755: LD_INT 3
58757: MINUS
58758: PUSH
58759: LD_INT 3
58761: PUSH
58762: EMPTY
58763: LIST
58764: LIST
58765: LIST
58766: PUSH
58767: LD_VAR 0 1
58771: PUSH
58772: LD_INT 4
58774: PLUS
58775: PUSH
58776: LD_VAR 0 2
58780: PUSH
58781: LD_INT 4
58783: PUSH
58784: EMPTY
58785: LIST
58786: LIST
58787: LIST
58788: PUSH
58789: LD_VAR 0 1
58793: PUSH
58794: LD_VAR 0 2
58798: PUSH
58799: LD_INT 4
58801: PLUS
58802: PUSH
58803: LD_INT 0
58805: PUSH
58806: EMPTY
58807: LIST
58808: LIST
58809: LIST
58810: PUSH
58811: LD_VAR 0 1
58815: PUSH
58816: LD_INT 3
58818: MINUS
58819: PUSH
58820: LD_VAR 0 2
58824: PUSH
58825: LD_INT 1
58827: PUSH
58828: EMPTY
58829: LIST
58830: LIST
58831: LIST
58832: PUSH
58833: LD_VAR 0 1
58837: PUSH
58838: LD_INT 4
58840: MINUS
58841: PUSH
58842: LD_VAR 0 2
58846: PUSH
58847: LD_INT 4
58849: MINUS
58850: PUSH
58851: LD_INT 2
58853: PUSH
58854: EMPTY
58855: LIST
58856: LIST
58857: LIST
58858: PUSH
58859: EMPTY
58860: LIST
58861: LIST
58862: LIST
58863: LIST
58864: LIST
58865: ST_TO_ADDR
// end ; 3 :
58866: GO 59288
58868: LD_INT 3
58870: DOUBLE
58871: EQUAL
58872: IFTRUE 58876
58874: GO 59009
58876: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
58877: LD_ADDR_VAR 0 5
58881: PUSH
58882: LD_VAR 0 1
58886: PUSH
58887: LD_INT 3
58889: PLUS
58890: PUSH
58891: LD_VAR 0 2
58895: PUSH
58896: LD_INT 4
58898: PUSH
58899: EMPTY
58900: LIST
58901: LIST
58902: LIST
58903: PUSH
58904: LD_VAR 0 1
58908: PUSH
58909: LD_INT 4
58911: PLUS
58912: PUSH
58913: LD_VAR 0 2
58917: PUSH
58918: LD_INT 4
58920: PLUS
58921: PUSH
58922: LD_INT 5
58924: PUSH
58925: EMPTY
58926: LIST
58927: LIST
58928: LIST
58929: PUSH
58930: LD_VAR 0 1
58934: PUSH
58935: LD_INT 4
58937: MINUS
58938: PUSH
58939: LD_VAR 0 2
58943: PUSH
58944: LD_INT 1
58946: PUSH
58947: EMPTY
58948: LIST
58949: LIST
58950: LIST
58951: PUSH
58952: LD_VAR 0 1
58956: PUSH
58957: LD_VAR 0 2
58961: PUSH
58962: LD_INT 4
58964: MINUS
58965: PUSH
58966: LD_INT 3
58968: PUSH
58969: EMPTY
58970: LIST
58971: LIST
58972: LIST
58973: PUSH
58974: LD_VAR 0 1
58978: PUSH
58979: LD_INT 3
58981: MINUS
58982: PUSH
58983: LD_VAR 0 2
58987: PUSH
58988: LD_INT 3
58990: MINUS
58991: PUSH
58992: LD_INT 2
58994: PUSH
58995: EMPTY
58996: LIST
58997: LIST
58998: LIST
58999: PUSH
59000: EMPTY
59001: LIST
59002: LIST
59003: LIST
59004: LIST
59005: LIST
59006: ST_TO_ADDR
// end ; 4 :
59007: GO 59288
59009: LD_INT 4
59011: DOUBLE
59012: EQUAL
59013: IFTRUE 59017
59015: GO 59150
59017: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
59018: LD_ADDR_VAR 0 5
59022: PUSH
59023: LD_VAR 0 1
59027: PUSH
59028: LD_VAR 0 2
59032: PUSH
59033: LD_INT 4
59035: PLUS
59036: PUSH
59037: LD_INT 0
59039: PUSH
59040: EMPTY
59041: LIST
59042: LIST
59043: LIST
59044: PUSH
59045: LD_VAR 0 1
59049: PUSH
59050: LD_INT 3
59052: PLUS
59053: PUSH
59054: LD_VAR 0 2
59058: PUSH
59059: LD_INT 3
59061: PLUS
59062: PUSH
59063: LD_INT 5
59065: PUSH
59066: EMPTY
59067: LIST
59068: LIST
59069: LIST
59070: PUSH
59071: LD_VAR 0 1
59075: PUSH
59076: LD_INT 4
59078: PLUS
59079: PUSH
59080: LD_VAR 0 2
59084: PUSH
59085: LD_INT 4
59087: PUSH
59088: EMPTY
59089: LIST
59090: LIST
59091: LIST
59092: PUSH
59093: LD_VAR 0 1
59097: PUSH
59098: LD_VAR 0 2
59102: PUSH
59103: LD_INT 3
59105: MINUS
59106: PUSH
59107: LD_INT 3
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: LIST
59114: PUSH
59115: LD_VAR 0 1
59119: PUSH
59120: LD_INT 4
59122: MINUS
59123: PUSH
59124: LD_VAR 0 2
59128: PUSH
59129: LD_INT 4
59131: MINUS
59132: PUSH
59133: LD_INT 2
59135: PUSH
59136: EMPTY
59137: LIST
59138: LIST
59139: LIST
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: LIST
59145: LIST
59146: LIST
59147: ST_TO_ADDR
// end ; 5 :
59148: GO 59288
59150: LD_INT 5
59152: DOUBLE
59153: EQUAL
59154: IFTRUE 59158
59156: GO 59287
59158: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
59159: LD_ADDR_VAR 0 5
59163: PUSH
59164: LD_VAR 0 1
59168: PUSH
59169: LD_INT 4
59171: MINUS
59172: PUSH
59173: LD_VAR 0 2
59177: PUSH
59178: LD_INT 1
59180: PUSH
59181: EMPTY
59182: LIST
59183: LIST
59184: LIST
59185: PUSH
59186: LD_VAR 0 1
59190: PUSH
59191: LD_VAR 0 2
59195: PUSH
59196: LD_INT 4
59198: MINUS
59199: PUSH
59200: LD_INT 3
59202: PUSH
59203: EMPTY
59204: LIST
59205: LIST
59206: LIST
59207: PUSH
59208: LD_VAR 0 1
59212: PUSH
59213: LD_INT 4
59215: PLUS
59216: PUSH
59217: LD_VAR 0 2
59221: PUSH
59222: LD_INT 4
59224: PLUS
59225: PUSH
59226: LD_INT 5
59228: PUSH
59229: EMPTY
59230: LIST
59231: LIST
59232: LIST
59233: PUSH
59234: LD_VAR 0 1
59238: PUSH
59239: LD_INT 3
59241: PLUS
59242: PUSH
59243: LD_VAR 0 2
59247: PUSH
59248: LD_INT 4
59250: PUSH
59251: EMPTY
59252: LIST
59253: LIST
59254: LIST
59255: PUSH
59256: LD_VAR 0 1
59260: PUSH
59261: LD_VAR 0 2
59265: PUSH
59266: LD_INT 3
59268: PLUS
59269: PUSH
59270: LD_INT 0
59272: PUSH
59273: EMPTY
59274: LIST
59275: LIST
59276: LIST
59277: PUSH
59278: EMPTY
59279: LIST
59280: LIST
59281: LIST
59282: LIST
59283: LIST
59284: ST_TO_ADDR
// end ; end ;
59285: GO 59288
59287: POP
// result := list ;
59288: LD_ADDR_VAR 0 4
59292: PUSH
59293: LD_VAR 0 5
59297: ST_TO_ADDR
// end ;
59298: LD_VAR 0 4
59302: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
59303: LD_INT 0
59305: PPUSH
59306: PPUSH
59307: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
59308: LD_VAR 0 1
59312: NOT
59313: PUSH
59314: LD_VAR 0 2
59318: PUSH
59319: LD_INT 1
59321: PUSH
59322: LD_INT 2
59324: PUSH
59325: LD_INT 3
59327: PUSH
59328: LD_INT 4
59330: PUSH
59331: EMPTY
59332: LIST
59333: LIST
59334: LIST
59335: LIST
59336: IN
59337: NOT
59338: OR
59339: IFFALSE 59343
// exit ;
59341: GO 59426
// tmp := [ ] ;
59343: LD_ADDR_VAR 0 5
59347: PUSH
59348: EMPTY
59349: ST_TO_ADDR
// for i in units do
59350: LD_ADDR_VAR 0 4
59354: PUSH
59355: LD_VAR 0 1
59359: PUSH
59360: FOR_IN
59361: IFFALSE 59395
// tmp := Join ( tmp , GetSkill ( i , class ) ) ;
59363: LD_ADDR_VAR 0 5
59367: PUSH
59368: LD_VAR 0 5
59372: PPUSH
59373: LD_VAR 0 4
59377: PPUSH
59378: LD_VAR 0 2
59382: PPUSH
59383: CALL_OW 259
59387: PPUSH
59388: CALL 60786 0 2
59392: ST_TO_ADDR
59393: GO 59360
59395: POP
59396: POP
// if not tmp then
59397: LD_VAR 0 5
59401: NOT
59402: IFFALSE 59406
// exit ;
59404: GO 59426
// result := SortListByListDesc ( units , tmp ) ;
59406: LD_ADDR_VAR 0 3
59410: PUSH
59411: LD_VAR 0 1
59415: PPUSH
59416: LD_VAR 0 5
59420: PPUSH
59421: CALL_OW 77
59425: ST_TO_ADDR
// end ;
59426: LD_VAR 0 3
59430: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
59431: LD_INT 0
59433: PPUSH
59434: PPUSH
59435: PPUSH
// result := false ;
59436: LD_ADDR_VAR 0 3
59440: PUSH
59441: LD_INT 0
59443: ST_TO_ADDR
// if not building then
59444: LD_VAR 0 2
59448: NOT
59449: IFFALSE 59453
// exit ;
59451: GO 59591
// x := GetX ( building ) ;
59453: LD_ADDR_VAR 0 4
59457: PUSH
59458: LD_VAR 0 2
59462: PPUSH
59463: CALL_OW 250
59467: ST_TO_ADDR
// y := GetY ( building ) ;
59468: LD_ADDR_VAR 0 5
59472: PUSH
59473: LD_VAR 0 2
59477: PPUSH
59478: CALL_OW 251
59482: ST_TO_ADDR
// if not x or not y then
59483: LD_VAR 0 4
59487: NOT
59488: PUSH
59489: LD_VAR 0 5
59493: NOT
59494: OR
59495: IFFALSE 59499
// exit ;
59497: GO 59591
// if GetTaskList ( unit ) then
59499: LD_VAR 0 1
59503: PPUSH
59504: CALL_OW 437
59508: IFFALSE 59591
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59510: LD_STRING e
59512: PUSH
59513: LD_VAR 0 1
59517: PPUSH
59518: CALL_OW 437
59522: PUSH
59523: LD_INT 1
59525: ARRAY
59526: PUSH
59527: LD_INT 1
59529: ARRAY
59530: EQUAL
59531: PUSH
59532: LD_VAR 0 4
59536: PUSH
59537: LD_VAR 0 1
59541: PPUSH
59542: CALL_OW 437
59546: PUSH
59547: LD_INT 1
59549: ARRAY
59550: PUSH
59551: LD_INT 2
59553: ARRAY
59554: EQUAL
59555: AND
59556: PUSH
59557: LD_VAR 0 5
59561: PUSH
59562: LD_VAR 0 1
59566: PPUSH
59567: CALL_OW 437
59571: PUSH
59572: LD_INT 1
59574: ARRAY
59575: PUSH
59576: LD_INT 3
59578: ARRAY
59579: EQUAL
59580: AND
59581: IFFALSE 59591
// result := true end ;
59583: LD_ADDR_VAR 0 3
59587: PUSH
59588: LD_INT 1
59590: ST_TO_ADDR
// end ;
59591: LD_VAR 0 3
59595: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
59596: LD_INT 0
59598: PPUSH
// result := false ;
59599: LD_ADDR_VAR 0 4
59603: PUSH
59604: LD_INT 0
59606: ST_TO_ADDR
// if GetTaskList ( unit ) then
59607: LD_VAR 0 1
59611: PPUSH
59612: CALL_OW 437
59616: IFFALSE 59699
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
59618: LD_STRING M
59620: PUSH
59621: LD_VAR 0 1
59625: PPUSH
59626: CALL_OW 437
59630: PUSH
59631: LD_INT 1
59633: ARRAY
59634: PUSH
59635: LD_INT 1
59637: ARRAY
59638: EQUAL
59639: PUSH
59640: LD_VAR 0 2
59644: PUSH
59645: LD_VAR 0 1
59649: PPUSH
59650: CALL_OW 437
59654: PUSH
59655: LD_INT 1
59657: ARRAY
59658: PUSH
59659: LD_INT 2
59661: ARRAY
59662: EQUAL
59663: AND
59664: PUSH
59665: LD_VAR 0 3
59669: PUSH
59670: LD_VAR 0 1
59674: PPUSH
59675: CALL_OW 437
59679: PUSH
59680: LD_INT 1
59682: ARRAY
59683: PUSH
59684: LD_INT 3
59686: ARRAY
59687: EQUAL
59688: AND
59689: IFFALSE 59699
// result := true ;
59691: LD_ADDR_VAR 0 4
59695: PUSH
59696: LD_INT 1
59698: ST_TO_ADDR
// end ; end ;
59699: LD_VAR 0 4
59703: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
59704: LD_INT 0
59706: PPUSH
59707: PPUSH
59708: PPUSH
59709: PPUSH
// if not unit or not area then
59710: LD_VAR 0 1
59714: NOT
59715: PUSH
59716: LD_VAR 0 2
59720: NOT
59721: OR
59722: IFFALSE 59726
// exit ;
59724: GO 59889
// tmp := AreaToList ( area , i ) ;
59726: LD_ADDR_VAR 0 6
59730: PUSH
59731: LD_VAR 0 2
59735: PPUSH
59736: LD_VAR 0 5
59740: PPUSH
59741: CALL_OW 517
59745: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
59746: LD_ADDR_VAR 0 5
59750: PUSH
59751: DOUBLE
59752: LD_INT 1
59754: DEC
59755: ST_TO_ADDR
59756: LD_VAR 0 6
59760: PUSH
59761: LD_INT 1
59763: ARRAY
59764: PUSH
59765: FOR_TO
59766: IFFALSE 59887
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
59768: LD_ADDR_VAR 0 7
59772: PUSH
59773: LD_VAR 0 6
59777: PUSH
59778: LD_INT 1
59780: ARRAY
59781: PUSH
59782: LD_VAR 0 5
59786: ARRAY
59787: PUSH
59788: LD_VAR 0 6
59792: PUSH
59793: LD_INT 2
59795: ARRAY
59796: PUSH
59797: LD_VAR 0 5
59801: ARRAY
59802: PUSH
59803: EMPTY
59804: LIST
59805: LIST
59806: ST_TO_ADDR
// if FilterAllUnits ( [ f_distxy , hex [ 1 ] , hex [ 2 ] , 3 ] ) = 0 then
59807: LD_INT 92
59809: PUSH
59810: LD_VAR 0 7
59814: PUSH
59815: LD_INT 1
59817: ARRAY
59818: PUSH
59819: LD_VAR 0 7
59823: PUSH
59824: LD_INT 2
59826: ARRAY
59827: PUSH
59828: LD_INT 3
59830: PUSH
59831: EMPTY
59832: LIST
59833: LIST
59834: LIST
59835: LIST
59836: PPUSH
59837: CALL_OW 69
59841: PUSH
59842: LD_INT 0
59844: EQUAL
59845: IFFALSE 59885
// begin PlaceUnitArea ( unit , area , mode ) ;
59847: LD_VAR 0 1
59851: PPUSH
59852: LD_VAR 0 2
59856: PPUSH
59857: LD_VAR 0 3
59861: PPUSH
59862: CALL_OW 49
// result := IsPlaced ( unit ) ;
59866: LD_ADDR_VAR 0 4
59870: PUSH
59871: LD_VAR 0 1
59875: PPUSH
59876: CALL_OW 305
59880: ST_TO_ADDR
// exit ;
59881: POP
59882: POP
59883: GO 59889
// end ; end ;
59885: GO 59765
59887: POP
59888: POP
// end ;
59889: LD_VAR 0 4
59893: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
59894: LD_INT 0
59896: PPUSH
59897: PPUSH
59898: PPUSH
// if not side or side > 8 then
59899: LD_VAR 0 1
59903: NOT
59904: PUSH
59905: LD_VAR 0 1
59909: PUSH
59910: LD_INT 8
59912: GREATER
59913: OR
59914: IFFALSE 59918
// exit ;
59916: GO 60105
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
59918: LD_ADDR_VAR 0 4
59922: PUSH
59923: LD_INT 22
59925: PUSH
59926: LD_VAR 0 1
59930: PUSH
59931: EMPTY
59932: LIST
59933: LIST
59934: PUSH
59935: LD_INT 21
59937: PUSH
59938: LD_INT 3
59940: PUSH
59941: EMPTY
59942: LIST
59943: LIST
59944: PUSH
59945: EMPTY
59946: LIST
59947: LIST
59948: PPUSH
59949: CALL_OW 69
59953: ST_TO_ADDR
// if not tmp then
59954: LD_VAR 0 4
59958: NOT
59959: IFFALSE 59963
// exit ;
59961: GO 60105
// enable_addtolog := true ;
59963: LD_ADDR_OWVAR 81
59967: PUSH
59968: LD_INT 1
59970: ST_TO_ADDR
// AddToLog ( [ ) ;
59971: LD_STRING [
59973: PPUSH
59974: CALL_OW 561
// for i in tmp do
59978: LD_ADDR_VAR 0 3
59982: PUSH
59983: LD_VAR 0 4
59987: PUSH
59988: FOR_IN
59989: IFFALSE 60096
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
59991: LD_STRING [
59993: PUSH
59994: LD_VAR 0 3
59998: PPUSH
59999: CALL_OW 266
60003: STR
60004: PUSH
60005: LD_STRING , 
60007: STR
60008: PUSH
60009: LD_VAR 0 3
60013: PPUSH
60014: CALL_OW 250
60018: STR
60019: PUSH
60020: LD_STRING , 
60022: STR
60023: PUSH
60024: LD_VAR 0 3
60028: PPUSH
60029: CALL_OW 251
60033: STR
60034: PUSH
60035: LD_STRING , 
60037: STR
60038: PUSH
60039: LD_VAR 0 3
60043: PPUSH
60044: CALL_OW 254
60048: STR
60049: PUSH
60050: LD_STRING , 
60052: STR
60053: PUSH
60054: LD_VAR 0 3
60058: PPUSH
60059: LD_INT 1
60061: PPUSH
60062: CALL_OW 268
60066: STR
60067: PUSH
60068: LD_STRING , 
60070: STR
60071: PUSH
60072: LD_VAR 0 3
60076: PPUSH
60077: LD_INT 2
60079: PPUSH
60080: CALL_OW 268
60084: STR
60085: PUSH
60086: LD_STRING ],
60088: STR
60089: PPUSH
60090: CALL_OW 561
// end ;
60094: GO 59988
60096: POP
60097: POP
// AddToLog ( ]; ) ;
60098: LD_STRING ];
60100: PPUSH
60101: CALL_OW 561
// end ;
60105: LD_VAR 0 2
60109: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
60110: LD_INT 0
60112: PPUSH
60113: PPUSH
60114: PPUSH
60115: PPUSH
60116: PPUSH
// if not area or not rate or not max then
60117: LD_VAR 0 1
60121: NOT
60122: PUSH
60123: LD_VAR 0 2
60127: NOT
60128: OR
60129: PUSH
60130: LD_VAR 0 4
60134: NOT
60135: OR
60136: IFFALSE 60140
// exit ;
60138: GO 60329
// while 1 do
60140: LD_INT 1
60142: IFFALSE 60329
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
60144: LD_ADDR_VAR 0 9
60148: PUSH
60149: LD_VAR 0 1
60153: PPUSH
60154: LD_INT 1
60156: PPUSH
60157: CALL_OW 287
60161: PUSH
60162: LD_INT 10
60164: MUL
60165: ST_TO_ADDR
// r := rate / 10 ;
60166: LD_ADDR_VAR 0 7
60170: PUSH
60171: LD_VAR 0 2
60175: PUSH
60176: LD_INT 10
60178: DIVREAL
60179: ST_TO_ADDR
// time := 1 1$00 ;
60180: LD_ADDR_VAR 0 8
60184: PUSH
60185: LD_INT 2100
60187: ST_TO_ADDR
// if amount < min then
60188: LD_VAR 0 9
60192: PUSH
60193: LD_VAR 0 3
60197: LESS
60198: IFFALSE 60216
// r := r * 2 else
60200: LD_ADDR_VAR 0 7
60204: PUSH
60205: LD_VAR 0 7
60209: PUSH
60210: LD_INT 2
60212: MUL
60213: ST_TO_ADDR
60214: GO 60242
// if amount > max then
60216: LD_VAR 0 9
60220: PUSH
60221: LD_VAR 0 4
60225: GREATER
60226: IFFALSE 60242
// r := r / 2 ;
60228: LD_ADDR_VAR 0 7
60232: PUSH
60233: LD_VAR 0 7
60237: PUSH
60238: LD_INT 2
60240: DIVREAL
60241: ST_TO_ADDR
// time := time / r ;
60242: LD_ADDR_VAR 0 8
60246: PUSH
60247: LD_VAR 0 8
60251: PUSH
60252: LD_VAR 0 7
60256: DIVREAL
60257: ST_TO_ADDR
// if time < 0 then
60258: LD_VAR 0 8
60262: PUSH
60263: LD_INT 0
60265: LESS
60266: IFFALSE 60283
// time := time * - 1 ;
60268: LD_ADDR_VAR 0 8
60272: PUSH
60273: LD_VAR 0 8
60277: PUSH
60278: LD_INT 1
60280: NEG
60281: MUL
60282: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
60283: LD_VAR 0 8
60287: PUSH
60288: LD_INT 35
60290: PPUSH
60291: LD_INT 875
60293: PPUSH
60294: CALL_OW 12
60298: PLUS
60299: PPUSH
60300: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
60304: LD_INT 1
60306: PPUSH
60307: LD_INT 5
60309: PPUSH
60310: CALL_OW 12
60314: PPUSH
60315: LD_VAR 0 1
60319: PPUSH
60320: LD_INT 1
60322: PPUSH
60323: CALL_OW 55
// end ;
60327: GO 60140
// end ;
60329: LD_VAR 0 5
60333: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
60334: LD_INT 0
60336: PPUSH
60337: PPUSH
60338: PPUSH
60339: PPUSH
60340: PPUSH
60341: PPUSH
60342: PPUSH
60343: PPUSH
// if not turrets or not factories then
60344: LD_VAR 0 1
60348: NOT
60349: PUSH
60350: LD_VAR 0 2
60354: NOT
60355: OR
60356: IFFALSE 60360
// exit ;
60358: GO 60667
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
60360: LD_ADDR_VAR 0 10
60364: PUSH
60365: LD_INT 5
60367: PUSH
60368: LD_INT 6
60370: PUSH
60371: EMPTY
60372: LIST
60373: LIST
60374: PUSH
60375: LD_INT 2
60377: PUSH
60378: LD_INT 4
60380: PUSH
60381: EMPTY
60382: LIST
60383: LIST
60384: PUSH
60385: LD_INT 3
60387: PUSH
60388: LD_INT 5
60390: PUSH
60391: EMPTY
60392: LIST
60393: LIST
60394: PUSH
60395: EMPTY
60396: LIST
60397: LIST
60398: LIST
60399: PUSH
60400: LD_INT 24
60402: PUSH
60403: LD_INT 25
60405: PUSH
60406: EMPTY
60407: LIST
60408: LIST
60409: PUSH
60410: LD_INT 23
60412: PUSH
60413: LD_INT 27
60415: PUSH
60416: EMPTY
60417: LIST
60418: LIST
60419: PUSH
60420: EMPTY
60421: LIST
60422: LIST
60423: PUSH
60424: LD_INT 42
60426: PUSH
60427: LD_INT 43
60429: PUSH
60430: EMPTY
60431: LIST
60432: LIST
60433: PUSH
60434: LD_INT 44
60436: PUSH
60437: LD_INT 46
60439: PUSH
60440: EMPTY
60441: LIST
60442: LIST
60443: PUSH
60444: LD_INT 45
60446: PUSH
60447: LD_INT 47
60449: PUSH
60450: EMPTY
60451: LIST
60452: LIST
60453: PUSH
60454: EMPTY
60455: LIST
60456: LIST
60457: LIST
60458: PUSH
60459: EMPTY
60460: LIST
60461: LIST
60462: LIST
60463: ST_TO_ADDR
// result := [ ] ;
60464: LD_ADDR_VAR 0 3
60468: PUSH
60469: EMPTY
60470: ST_TO_ADDR
// for i in turrets do
60471: LD_ADDR_VAR 0 4
60475: PUSH
60476: LD_VAR 0 1
60480: PUSH
60481: FOR_IN
60482: IFFALSE 60665
// begin nat := GetNation ( i ) ;
60484: LD_ADDR_VAR 0 7
60488: PUSH
60489: LD_VAR 0 4
60493: PPUSH
60494: CALL_OW 248
60498: ST_TO_ADDR
// weapon := 0 ;
60499: LD_ADDR_VAR 0 8
60503: PUSH
60504: LD_INT 0
60506: ST_TO_ADDR
// if not nat then
60507: LD_VAR 0 7
60511: NOT
60512: IFFALSE 60516
// continue ;
60514: GO 60481
// for j in list [ nat ] do
60516: LD_ADDR_VAR 0 5
60520: PUSH
60521: LD_VAR 0 10
60525: PUSH
60526: LD_VAR 0 7
60530: ARRAY
60531: PUSH
60532: FOR_IN
60533: IFFALSE 60574
// if GetBWeapon ( i ) = j [ 1 ] then
60535: LD_VAR 0 4
60539: PPUSH
60540: CALL_OW 269
60544: PUSH
60545: LD_VAR 0 5
60549: PUSH
60550: LD_INT 1
60552: ARRAY
60553: EQUAL
60554: IFFALSE 60572
// begin weapon := j [ 2 ] ;
60556: LD_ADDR_VAR 0 8
60560: PUSH
60561: LD_VAR 0 5
60565: PUSH
60566: LD_INT 2
60568: ARRAY
60569: ST_TO_ADDR
// break ;
60570: GO 60574
// end ;
60572: GO 60532
60574: POP
60575: POP
// if not weapon then
60576: LD_VAR 0 8
60580: NOT
60581: IFFALSE 60585
// continue ;
60583: GO 60481
// for k in factories do
60585: LD_ADDR_VAR 0 6
60589: PUSH
60590: LD_VAR 0 2
60594: PUSH
60595: FOR_IN
60596: IFFALSE 60661
// begin weapons := AvailableWeaponList ( k ) ;
60598: LD_ADDR_VAR 0 9
60602: PUSH
60603: LD_VAR 0 6
60607: PPUSH
60608: CALL_OW 478
60612: ST_TO_ADDR
// if not weapons then
60613: LD_VAR 0 9
60617: NOT
60618: IFFALSE 60622
// continue ;
60620: GO 60595
// if weapon in weapons then
60622: LD_VAR 0 8
60626: PUSH
60627: LD_VAR 0 9
60631: IN
60632: IFFALSE 60659
// begin result := [ i , weapon ] ;
60634: LD_ADDR_VAR 0 3
60638: PUSH
60639: LD_VAR 0 4
60643: PUSH
60644: LD_VAR 0 8
60648: PUSH
60649: EMPTY
60650: LIST
60651: LIST
60652: ST_TO_ADDR
// exit ;
60653: POP
60654: POP
60655: POP
60656: POP
60657: GO 60667
// end ; end ;
60659: GO 60595
60661: POP
60662: POP
// end ;
60663: GO 60481
60665: POP
60666: POP
// end ;
60667: LD_VAR 0 3
60671: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
60672: LD_INT 0
60674: PPUSH
// if not side or side > 8 then
60675: LD_VAR 0 3
60679: NOT
60680: PUSH
60681: LD_VAR 0 3
60685: PUSH
60686: LD_INT 8
60688: GREATER
60689: OR
60690: IFFALSE 60694
// exit ;
60692: GO 60753
// if not range then
60694: LD_VAR 0 4
60698: NOT
60699: IFFALSE 60710
// range := - 12 ;
60701: LD_ADDR_VAR 0 4
60705: PUSH
60706: LD_INT 12
60708: NEG
60709: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
60710: LD_VAR 0 1
60714: PPUSH
60715: LD_VAR 0 2
60719: PPUSH
60720: LD_VAR 0 3
60724: PPUSH
60725: LD_VAR 0 4
60729: PPUSH
60730: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
60734: LD_VAR 0 1
60738: PPUSH
60739: LD_VAR 0 2
60743: PPUSH
60744: LD_VAR 0 3
60748: PPUSH
60749: CALL_OW 331
// end ;
60753: LD_VAR 0 5
60757: RET
// export function Video ( mode ) ; begin
60758: LD_INT 0
60760: PPUSH
// ingame_video = mode ;
60761: LD_ADDR_OWVAR 52
60765: PUSH
60766: LD_VAR 0 1
60770: ST_TO_ADDR
// interface_hidden = mode ;
60771: LD_ADDR_OWVAR 54
60775: PUSH
60776: LD_VAR 0 1
60780: ST_TO_ADDR
// end ;
60781: LD_VAR 0 2
60785: RET
// export function Join ( array , element ) ; begin
60786: LD_INT 0
60788: PPUSH
// result := Replace ( array , array + 1 , element ) ;
60789: LD_ADDR_VAR 0 3
60793: PUSH
60794: LD_VAR 0 1
60798: PPUSH
60799: LD_VAR 0 1
60803: PUSH
60804: LD_INT 1
60806: PLUS
60807: PPUSH
60808: LD_VAR 0 2
60812: PPUSH
60813: CALL_OW 1
60817: ST_TO_ADDR
// end ;
60818: LD_VAR 0 3
60822: RET
// export function JoinUnion ( array , element ) ; begin
60823: LD_INT 0
60825: PPUSH
// result := array union element ;
60826: LD_ADDR_VAR 0 3
60830: PUSH
60831: LD_VAR 0 1
60835: PUSH
60836: LD_VAR 0 2
60840: UNION
60841: ST_TO_ADDR
// end ;
60842: LD_VAR 0 3
60846: RET
// export function GetBehemoths ( side ) ; begin
60847: LD_INT 0
60849: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , ru_behemoth ] ] ) ;
60850: LD_ADDR_VAR 0 2
60854: PUSH
60855: LD_INT 22
60857: PUSH
60858: LD_VAR 0 1
60862: PUSH
60863: EMPTY
60864: LIST
60865: LIST
60866: PUSH
60867: LD_INT 31
60869: PUSH
60870: LD_INT 25
60872: PUSH
60873: EMPTY
60874: LIST
60875: LIST
60876: PUSH
60877: EMPTY
60878: LIST
60879: LIST
60880: PPUSH
60881: CALL_OW 69
60885: ST_TO_ADDR
// end ;
60886: LD_VAR 0 2
60890: RET
// export function Shuffle ( array ) ; var i , index ; begin
60891: LD_INT 0
60893: PPUSH
60894: PPUSH
60895: PPUSH
// result := [ ] ;
60896: LD_ADDR_VAR 0 2
60900: PUSH
60901: EMPTY
60902: ST_TO_ADDR
// if not array then
60903: LD_VAR 0 1
60907: NOT
60908: IFFALSE 60912
// exit ;
60910: GO 61011
// Randomize ;
60912: CALL_OW 10
// for i = array downto 1 do
60916: LD_ADDR_VAR 0 3
60920: PUSH
60921: DOUBLE
60922: LD_VAR 0 1
60926: INC
60927: ST_TO_ADDR
60928: LD_INT 1
60930: PUSH
60931: FOR_DOWNTO
60932: IFFALSE 61009
// begin index := rand ( 1 , array ) ;
60934: LD_ADDR_VAR 0 4
60938: PUSH
60939: LD_INT 1
60941: PPUSH
60942: LD_VAR 0 1
60946: PPUSH
60947: CALL_OW 12
60951: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
60952: LD_ADDR_VAR 0 2
60956: PUSH
60957: LD_VAR 0 2
60961: PPUSH
60962: LD_VAR 0 2
60966: PUSH
60967: LD_INT 1
60969: PLUS
60970: PPUSH
60971: LD_VAR 0 1
60975: PUSH
60976: LD_VAR 0 4
60980: ARRAY
60981: PPUSH
60982: CALL_OW 2
60986: ST_TO_ADDR
// array := Delete ( array , index ) ;
60987: LD_ADDR_VAR 0 1
60991: PUSH
60992: LD_VAR 0 1
60996: PPUSH
60997: LD_VAR 0 4
61001: PPUSH
61002: CALL_OW 3
61006: ST_TO_ADDR
// end ;
61007: GO 60931
61009: POP
61010: POP
// end ;
61011: LD_VAR 0 2
61015: RET
// export function GetBaseMaterials ( base ) ; begin
61016: LD_INT 0
61018: PPUSH
// result := [ 0 , 0 , 0 ] ;
61019: LD_ADDR_VAR 0 2
61023: PUSH
61024: LD_INT 0
61026: PUSH
61027: LD_INT 0
61029: PUSH
61030: LD_INT 0
61032: PUSH
61033: EMPTY
61034: LIST
61035: LIST
61036: LIST
61037: ST_TO_ADDR
// if not base then
61038: LD_VAR 0 1
61042: NOT
61043: IFFALSE 61047
// exit ;
61045: GO 61096
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
61047: LD_ADDR_VAR 0 2
61051: PUSH
61052: LD_VAR 0 1
61056: PPUSH
61057: LD_INT 1
61059: PPUSH
61060: CALL_OW 275
61064: PUSH
61065: LD_VAR 0 1
61069: PPUSH
61070: LD_INT 2
61072: PPUSH
61073: CALL_OW 275
61077: PUSH
61078: LD_VAR 0 1
61082: PPUSH
61083: LD_INT 3
61085: PPUSH
61086: CALL_OW 275
61090: PUSH
61091: EMPTY
61092: LIST
61093: LIST
61094: LIST
61095: ST_TO_ADDR
// end ;
61096: LD_VAR 0 2
61100: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
61101: LD_INT 0
61103: PPUSH
61104: PPUSH
// result := array ;
61105: LD_ADDR_VAR 0 3
61109: PUSH
61110: LD_VAR 0 1
61114: ST_TO_ADDR
// if size >= result then
61115: LD_VAR 0 2
61119: PUSH
61120: LD_VAR 0 3
61124: GREATEREQUAL
61125: IFFALSE 61129
// exit ;
61127: GO 61179
// if size then
61129: LD_VAR 0 2
61133: IFFALSE 61179
// for i := array downto size do
61135: LD_ADDR_VAR 0 4
61139: PUSH
61140: DOUBLE
61141: LD_VAR 0 1
61145: INC
61146: ST_TO_ADDR
61147: LD_VAR 0 2
61151: PUSH
61152: FOR_DOWNTO
61153: IFFALSE 61177
// result := Delete ( result , result ) ;
61155: LD_ADDR_VAR 0 3
61159: PUSH
61160: LD_VAR 0 3
61164: PPUSH
61165: LD_VAR 0 3
61169: PPUSH
61170: CALL_OW 3
61174: ST_TO_ADDR
61175: GO 61152
61177: POP
61178: POP
// end ;
61179: LD_VAR 0 3
61183: RET
// export function ComExit ( unit ) ; var tmp ; begin
61184: LD_INT 0
61186: PPUSH
61187: PPUSH
// if not IsInUnit ( unit ) then
61188: LD_VAR 0 1
61192: PPUSH
61193: CALL_OW 310
61197: NOT
61198: IFFALSE 61202
// exit ;
61200: GO 61262
// tmp := IsInUnit ( unit ) ;
61202: LD_ADDR_VAR 0 3
61206: PUSH
61207: LD_VAR 0 1
61211: PPUSH
61212: CALL_OW 310
61216: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
61217: LD_VAR 0 3
61221: PPUSH
61222: CALL_OW 247
61226: PUSH
61227: LD_INT 2
61229: EQUAL
61230: IFFALSE 61243
// ComExitVehicle ( unit ) else
61232: LD_VAR 0 1
61236: PPUSH
61237: CALL_OW 121
61241: GO 61252
// ComExitBuilding ( unit ) ;
61243: LD_VAR 0 1
61247: PPUSH
61248: CALL_OW 122
// result := tmp ;
61252: LD_ADDR_VAR 0 2
61256: PUSH
61257: LD_VAR 0 3
61261: ST_TO_ADDR
// end ;
61262: LD_VAR 0 2
61266: RET
// export function ComExitAll ( units ) ; var i ; begin
61267: LD_INT 0
61269: PPUSH
61270: PPUSH
// if not units then
61271: LD_VAR 0 1
61275: NOT
61276: IFFALSE 61280
// exit ;
61278: GO 61306
// for i in units do
61280: LD_ADDR_VAR 0 3
61284: PUSH
61285: LD_VAR 0 1
61289: PUSH
61290: FOR_IN
61291: IFFALSE 61304
// ComExit ( i ) ;
61293: LD_VAR 0 3
61297: PPUSH
61298: CALL 61184 0 1
61302: GO 61290
61304: POP
61305: POP
// end ;
61306: LD_VAR 0 2
61310: RET
// export function ResetHc ; begin
61311: LD_INT 0
61313: PPUSH
// InitHc ;
61314: CALL_OW 19
// hc_importance := 0 ;
61318: LD_ADDR_OWVAR 32
61322: PUSH
61323: LD_INT 0
61325: ST_TO_ADDR
// end ;
61326: LD_VAR 0 1
61330: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
61331: LD_INT 0
61333: PPUSH
61334: PPUSH
61335: PPUSH
// _x := ( x1 + x2 ) div 2 ;
61336: LD_ADDR_VAR 0 6
61340: PUSH
61341: LD_VAR 0 1
61345: PUSH
61346: LD_VAR 0 3
61350: PLUS
61351: PUSH
61352: LD_INT 2
61354: DIV
61355: ST_TO_ADDR
// if _x < 0 then
61356: LD_VAR 0 6
61360: PUSH
61361: LD_INT 0
61363: LESS
61364: IFFALSE 61381
// _x := _x * - 1 ;
61366: LD_ADDR_VAR 0 6
61370: PUSH
61371: LD_VAR 0 6
61375: PUSH
61376: LD_INT 1
61378: NEG
61379: MUL
61380: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
61381: LD_ADDR_VAR 0 7
61385: PUSH
61386: LD_VAR 0 2
61390: PUSH
61391: LD_VAR 0 4
61395: PLUS
61396: PUSH
61397: LD_INT 2
61399: DIV
61400: ST_TO_ADDR
// if _y < 0 then
61401: LD_VAR 0 7
61405: PUSH
61406: LD_INT 0
61408: LESS
61409: IFFALSE 61426
// _y := _y * - 1 ;
61411: LD_ADDR_VAR 0 7
61415: PUSH
61416: LD_VAR 0 7
61420: PUSH
61421: LD_INT 1
61423: NEG
61424: MUL
61425: ST_TO_ADDR
// result := [ _x , _y ] ;
61426: LD_ADDR_VAR 0 5
61430: PUSH
61431: LD_VAR 0 6
61435: PUSH
61436: LD_VAR 0 7
61440: PUSH
61441: EMPTY
61442: LIST
61443: LIST
61444: ST_TO_ADDR
// end ;
61445: LD_VAR 0 5
61449: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
61450: LD_INT 0
61452: PPUSH
61453: PPUSH
61454: PPUSH
61455: PPUSH
// task := GetTaskList ( unit ) ;
61456: LD_ADDR_VAR 0 7
61460: PUSH
61461: LD_VAR 0 1
61465: PPUSH
61466: CALL_OW 437
61470: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
61471: LD_VAR 0 7
61475: NOT
61476: PUSH
61477: LD_VAR 0 1
61481: PPUSH
61482: LD_VAR 0 2
61486: PPUSH
61487: CALL_OW 308
61491: NOT
61492: AND
61493: IFFALSE 61497
// exit ;
61495: GO 61615
// if IsInArea ( unit , area ) then
61497: LD_VAR 0 1
61501: PPUSH
61502: LD_VAR 0 2
61506: PPUSH
61507: CALL_OW 308
61511: IFFALSE 61529
// begin ComMoveToArea ( unit , goAway ) ;
61513: LD_VAR 0 1
61517: PPUSH
61518: LD_VAR 0 3
61522: PPUSH
61523: CALL_OW 113
// exit ;
61527: GO 61615
// end ; if task [ 1 ] [ 1 ] <> M then
61529: LD_VAR 0 7
61533: PUSH
61534: LD_INT 1
61536: ARRAY
61537: PUSH
61538: LD_INT 1
61540: ARRAY
61541: PUSH
61542: LD_STRING M
61544: NONEQUAL
61545: IFFALSE 61549
// exit ;
61547: GO 61615
// x := task [ 1 ] [ 2 ] ;
61549: LD_ADDR_VAR 0 5
61553: PUSH
61554: LD_VAR 0 7
61558: PUSH
61559: LD_INT 1
61561: ARRAY
61562: PUSH
61563: LD_INT 2
61565: ARRAY
61566: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
61567: LD_ADDR_VAR 0 6
61571: PUSH
61572: LD_VAR 0 7
61576: PUSH
61577: LD_INT 1
61579: ARRAY
61580: PUSH
61581: LD_INT 3
61583: ARRAY
61584: ST_TO_ADDR
// if InArea ( x , y , area ) then
61585: LD_VAR 0 5
61589: PPUSH
61590: LD_VAR 0 6
61594: PPUSH
61595: LD_VAR 0 2
61599: PPUSH
61600: CALL_OW 309
61604: IFFALSE 61615
// ComStop ( unit ) ;
61606: LD_VAR 0 1
61610: PPUSH
61611: CALL_OW 141
// end ;
61615: LD_VAR 0 4
61619: RET
// export function Abs ( value ) ; begin
61620: LD_INT 0
61622: PPUSH
// result := value ;
61623: LD_ADDR_VAR 0 2
61627: PUSH
61628: LD_VAR 0 1
61632: ST_TO_ADDR
// if value < 0 then
61633: LD_VAR 0 1
61637: PUSH
61638: LD_INT 0
61640: LESS
61641: IFFALSE 61658
// result := value * - 1 ;
61643: LD_ADDR_VAR 0 2
61647: PUSH
61648: LD_VAR 0 1
61652: PUSH
61653: LD_INT 1
61655: NEG
61656: MUL
61657: ST_TO_ADDR
// end ;
61658: LD_VAR 0 2
61662: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
61663: LD_INT 0
61665: PPUSH
61666: PPUSH
61667: PPUSH
61668: PPUSH
61669: PPUSH
61670: PPUSH
61671: PPUSH
61672: PPUSH
// if not unit or not building then
61673: LD_VAR 0 1
61677: NOT
61678: PUSH
61679: LD_VAR 0 2
61683: NOT
61684: OR
61685: IFFALSE 61689
// exit ;
61687: GO 61915
// x := GetX ( building ) ;
61689: LD_ADDR_VAR 0 4
61693: PUSH
61694: LD_VAR 0 2
61698: PPUSH
61699: CALL_OW 250
61703: ST_TO_ADDR
// y := GetY ( building ) ;
61704: LD_ADDR_VAR 0 6
61708: PUSH
61709: LD_VAR 0 2
61713: PPUSH
61714: CALL_OW 251
61718: ST_TO_ADDR
// d := GetDir ( building ) ;
61719: LD_ADDR_VAR 0 8
61723: PUSH
61724: LD_VAR 0 2
61728: PPUSH
61729: CALL_OW 254
61733: ST_TO_ADDR
// r := 4 ;
61734: LD_ADDR_VAR 0 9
61738: PUSH
61739: LD_INT 4
61741: ST_TO_ADDR
// for i := 1 to 5 do
61742: LD_ADDR_VAR 0 10
61746: PUSH
61747: DOUBLE
61748: LD_INT 1
61750: DEC
61751: ST_TO_ADDR
61752: LD_INT 5
61754: PUSH
61755: FOR_TO
61756: IFFALSE 61913
// begin _x := ShiftX ( x , d , r + i ) ;
61758: LD_ADDR_VAR 0 5
61762: PUSH
61763: LD_VAR 0 4
61767: PPUSH
61768: LD_VAR 0 8
61772: PPUSH
61773: LD_VAR 0 9
61777: PUSH
61778: LD_VAR 0 10
61782: PLUS
61783: PPUSH
61784: CALL_OW 272
61788: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
61789: LD_ADDR_VAR 0 7
61793: PUSH
61794: LD_VAR 0 6
61798: PPUSH
61799: LD_VAR 0 8
61803: PPUSH
61804: LD_VAR 0 9
61808: PUSH
61809: LD_VAR 0 10
61813: PLUS
61814: PPUSH
61815: CALL_OW 273
61819: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
61820: LD_VAR 0 5
61824: PPUSH
61825: LD_VAR 0 7
61829: PPUSH
61830: CALL_OW 488
61834: PUSH
61835: LD_VAR 0 5
61839: PPUSH
61840: LD_VAR 0 7
61844: PPUSH
61845: CALL_OW 428
61849: PPUSH
61850: CALL_OW 247
61854: PUSH
61855: LD_INT 3
61857: PUSH
61858: LD_INT 2
61860: PUSH
61861: EMPTY
61862: LIST
61863: LIST
61864: IN
61865: NOT
61866: AND
61867: IFFALSE 61911
// begin ComMoveXY ( unit , _x , _y ) ;
61869: LD_VAR 0 1
61873: PPUSH
61874: LD_VAR 0 5
61878: PPUSH
61879: LD_VAR 0 7
61883: PPUSH
61884: CALL_OW 111
// result := [ _x , _y ] ;
61888: LD_ADDR_VAR 0 3
61892: PUSH
61893: LD_VAR 0 5
61897: PUSH
61898: LD_VAR 0 7
61902: PUSH
61903: EMPTY
61904: LIST
61905: LIST
61906: ST_TO_ADDR
// exit ;
61907: POP
61908: POP
61909: GO 61915
// end ; end ;
61911: GO 61755
61913: POP
61914: POP
// end ;
61915: LD_VAR 0 3
61919: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
61920: LD_INT 0
61922: PPUSH
61923: PPUSH
61924: PPUSH
// result := 0 ;
61925: LD_ADDR_VAR 0 3
61929: PUSH
61930: LD_INT 0
61932: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
61933: LD_VAR 0 1
61937: PUSH
61938: LD_INT 0
61940: LESS
61941: PUSH
61942: LD_VAR 0 1
61946: PUSH
61947: LD_INT 8
61949: GREATER
61950: OR
61951: PUSH
61952: LD_VAR 0 2
61956: PUSH
61957: LD_INT 0
61959: LESS
61960: OR
61961: PUSH
61962: LD_VAR 0 2
61966: PUSH
61967: LD_INT 8
61969: GREATER
61970: OR
61971: IFFALSE 61975
// exit ;
61973: GO 62050
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
61975: LD_ADDR_VAR 0 4
61979: PUSH
61980: LD_INT 22
61982: PUSH
61983: LD_VAR 0 2
61987: PUSH
61988: EMPTY
61989: LIST
61990: LIST
61991: PPUSH
61992: CALL_OW 69
61996: PUSH
61997: FOR_IN
61998: IFFALSE 62048
// begin un := UnitShoot ( i ) ;
62000: LD_ADDR_VAR 0 5
62004: PUSH
62005: LD_VAR 0 4
62009: PPUSH
62010: CALL_OW 504
62014: ST_TO_ADDR
// if GetSide ( un ) = side1 then
62015: LD_VAR 0 5
62019: PPUSH
62020: CALL_OW 255
62024: PUSH
62025: LD_VAR 0 1
62029: EQUAL
62030: IFFALSE 62046
// begin result := un ;
62032: LD_ADDR_VAR 0 3
62036: PUSH
62037: LD_VAR 0 5
62041: ST_TO_ADDR
// exit ;
62042: POP
62043: POP
62044: GO 62050
// end ; end ;
62046: GO 61997
62048: POP
62049: POP
// end ;
62050: LD_VAR 0 3
62054: RET
// export function GetCargoBay ( units ) ; begin
62055: LD_INT 0
62057: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
62058: LD_ADDR_VAR 0 2
62062: PUSH
62063: LD_VAR 0 1
62067: PPUSH
62068: LD_INT 2
62070: PUSH
62071: LD_INT 34
62073: PUSH
62074: LD_INT 12
62076: PUSH
62077: EMPTY
62078: LIST
62079: LIST
62080: PUSH
62081: LD_INT 34
62083: PUSH
62084: LD_INT 51
62086: PUSH
62087: EMPTY
62088: LIST
62089: LIST
62090: PUSH
62091: LD_INT 34
62093: PUSH
62094: LD_INT 32
62096: PUSH
62097: EMPTY
62098: LIST
62099: LIST
62100: PUSH
62101: LD_INT 34
62103: PUSH
62104: LD_INT 89
62106: PUSH
62107: EMPTY
62108: LIST
62109: LIST
62110: PUSH
62111: EMPTY
62112: LIST
62113: LIST
62114: LIST
62115: LIST
62116: LIST
62117: PPUSH
62118: CALL_OW 72
62122: ST_TO_ADDR
// end ;
62123: LD_VAR 0 2
62127: RET
// export function Negate ( value ) ; begin
62128: LD_INT 0
62130: PPUSH
// result := not value ;
62131: LD_ADDR_VAR 0 2
62135: PUSH
62136: LD_VAR 0 1
62140: NOT
62141: ST_TO_ADDR
// end ;
62142: LD_VAR 0 2
62146: RET
// export function Inc ( value ) ; begin
62147: LD_INT 0
62149: PPUSH
// result := value + 1 ;
62150: LD_ADDR_VAR 0 2
62154: PUSH
62155: LD_VAR 0 1
62159: PUSH
62160: LD_INT 1
62162: PLUS
62163: ST_TO_ADDR
// end ;
62164: LD_VAR 0 2
62168: RET
// export function Dec ( value ) ; begin
62169: LD_INT 0
62171: PPUSH
// result := value - 1 ;
62172: LD_ADDR_VAR 0 2
62176: PUSH
62177: LD_VAR 0 1
62181: PUSH
62182: LD_INT 1
62184: MINUS
62185: ST_TO_ADDR
// end ;
62186: LD_VAR 0 2
62190: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
62191: LD_INT 0
62193: PPUSH
62194: PPUSH
62195: PPUSH
62196: PPUSH
62197: PPUSH
62198: PPUSH
62199: PPUSH
62200: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
62201: LD_VAR 0 1
62205: PPUSH
62206: LD_VAR 0 2
62210: PPUSH
62211: CALL_OW 488
62215: NOT
62216: PUSH
62217: LD_VAR 0 3
62221: PPUSH
62222: LD_VAR 0 4
62226: PPUSH
62227: CALL_OW 488
62231: NOT
62232: OR
62233: IFFALSE 62246
// begin result := - 1 ;
62235: LD_ADDR_VAR 0 5
62239: PUSH
62240: LD_INT 1
62242: NEG
62243: ST_TO_ADDR
// exit ;
62244: GO 62481
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
62246: LD_ADDR_VAR 0 12
62250: PUSH
62251: LD_VAR 0 1
62255: PPUSH
62256: LD_VAR 0 2
62260: PPUSH
62261: LD_VAR 0 3
62265: PPUSH
62266: LD_VAR 0 4
62270: PPUSH
62271: CALL 61331 0 4
62275: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
62276: LD_ADDR_VAR 0 11
62280: PUSH
62281: LD_VAR 0 1
62285: PPUSH
62286: LD_VAR 0 2
62290: PPUSH
62291: LD_VAR 0 12
62295: PUSH
62296: LD_INT 1
62298: ARRAY
62299: PPUSH
62300: LD_VAR 0 12
62304: PUSH
62305: LD_INT 2
62307: ARRAY
62308: PPUSH
62309: CALL_OW 298
62313: ST_TO_ADDR
// distance := 9999 ;
62314: LD_ADDR_VAR 0 10
62318: PUSH
62319: LD_INT 9999
62321: ST_TO_ADDR
// for i := 0 to 5 do
62322: LD_ADDR_VAR 0 6
62326: PUSH
62327: DOUBLE
62328: LD_INT 0
62330: DEC
62331: ST_TO_ADDR
62332: LD_INT 5
62334: PUSH
62335: FOR_TO
62336: IFFALSE 62479
// begin _x := ShiftX ( x1 , i , centerDist ) ;
62338: LD_ADDR_VAR 0 7
62342: PUSH
62343: LD_VAR 0 1
62347: PPUSH
62348: LD_VAR 0 6
62352: PPUSH
62353: LD_VAR 0 11
62357: PPUSH
62358: CALL_OW 272
62362: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
62363: LD_ADDR_VAR 0 8
62367: PUSH
62368: LD_VAR 0 2
62372: PPUSH
62373: LD_VAR 0 6
62377: PPUSH
62378: LD_VAR 0 11
62382: PPUSH
62383: CALL_OW 273
62387: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
62388: LD_VAR 0 7
62392: PPUSH
62393: LD_VAR 0 8
62397: PPUSH
62398: CALL_OW 488
62402: NOT
62403: IFFALSE 62407
// continue ;
62405: GO 62335
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
62407: LD_ADDR_VAR 0 9
62411: PUSH
62412: LD_VAR 0 12
62416: PUSH
62417: LD_INT 1
62419: ARRAY
62420: PPUSH
62421: LD_VAR 0 12
62425: PUSH
62426: LD_INT 2
62428: ARRAY
62429: PPUSH
62430: LD_VAR 0 7
62434: PPUSH
62435: LD_VAR 0 8
62439: PPUSH
62440: CALL_OW 298
62444: ST_TO_ADDR
// if tmp < distance then
62445: LD_VAR 0 9
62449: PUSH
62450: LD_VAR 0 10
62454: LESS
62455: IFFALSE 62477
// begin result := i ;
62457: LD_ADDR_VAR 0 5
62461: PUSH
62462: LD_VAR 0 6
62466: ST_TO_ADDR
// distance := tmp ;
62467: LD_ADDR_VAR 0 10
62471: PUSH
62472: LD_VAR 0 9
62476: ST_TO_ADDR
// end ; end ;
62477: GO 62335
62479: POP
62480: POP
// end ;
62481: LD_VAR 0 5
62485: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62486: LD_INT 0
62488: PPUSH
62489: PPUSH
// if not driver or not IsInUnit ( driver ) then
62490: LD_VAR 0 1
62494: NOT
62495: PUSH
62496: LD_VAR 0 1
62500: PPUSH
62501: CALL_OW 310
62505: NOT
62506: OR
62507: IFFALSE 62511
// exit ;
62509: GO 62601
// vehicle := IsInUnit ( driver ) ;
62511: LD_ADDR_VAR 0 3
62515: PUSH
62516: LD_VAR 0 1
62520: PPUSH
62521: CALL_OW 310
62525: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62526: LD_VAR 0 1
62530: PPUSH
62531: LD_STRING \
62533: PUSH
62534: LD_INT 0
62536: PUSH
62537: LD_INT 0
62539: PUSH
62540: LD_INT 0
62542: PUSH
62543: LD_INT 0
62545: PUSH
62546: LD_INT 0
62548: PUSH
62549: LD_INT 0
62551: PUSH
62552: EMPTY
62553: LIST
62554: LIST
62555: LIST
62556: LIST
62557: LIST
62558: LIST
62559: LIST
62560: PUSH
62561: LD_STRING E
62563: PUSH
62564: LD_INT 0
62566: PUSH
62567: LD_INT 0
62569: PUSH
62570: LD_VAR 0 3
62574: PUSH
62575: LD_INT 0
62577: PUSH
62578: LD_INT 0
62580: PUSH
62581: LD_INT 0
62583: PUSH
62584: EMPTY
62585: LIST
62586: LIST
62587: LIST
62588: LIST
62589: LIST
62590: LIST
62591: LIST
62592: PUSH
62593: EMPTY
62594: LIST
62595: LIST
62596: PPUSH
62597: CALL_OW 446
// end ;
62601: LD_VAR 0 2
62605: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
62606: LD_INT 0
62608: PPUSH
62609: PPUSH
// if not driver or not IsInUnit ( driver ) then
62610: LD_VAR 0 1
62614: NOT
62615: PUSH
62616: LD_VAR 0 1
62620: PPUSH
62621: CALL_OW 310
62625: NOT
62626: OR
62627: IFFALSE 62631
// exit ;
62629: GO 62721
// vehicle := IsInUnit ( driver ) ;
62631: LD_ADDR_VAR 0 3
62635: PUSH
62636: LD_VAR 0 1
62640: PPUSH
62641: CALL_OW 310
62645: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
62646: LD_VAR 0 1
62650: PPUSH
62651: LD_STRING \
62653: PUSH
62654: LD_INT 0
62656: PUSH
62657: LD_INT 0
62659: PUSH
62660: LD_INT 0
62662: PUSH
62663: LD_INT 0
62665: PUSH
62666: LD_INT 0
62668: PUSH
62669: LD_INT 0
62671: PUSH
62672: EMPTY
62673: LIST
62674: LIST
62675: LIST
62676: LIST
62677: LIST
62678: LIST
62679: LIST
62680: PUSH
62681: LD_STRING E
62683: PUSH
62684: LD_INT 0
62686: PUSH
62687: LD_INT 0
62689: PUSH
62690: LD_VAR 0 3
62694: PUSH
62695: LD_INT 0
62697: PUSH
62698: LD_INT 0
62700: PUSH
62701: LD_INT 0
62703: PUSH
62704: EMPTY
62705: LIST
62706: LIST
62707: LIST
62708: LIST
62709: LIST
62710: LIST
62711: LIST
62712: PUSH
62713: EMPTY
62714: LIST
62715: LIST
62716: PPUSH
62717: CALL_OW 447
// end ;
62721: LD_VAR 0 2
62725: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
62726: LD_INT 0
62728: PPUSH
62729: PPUSH
62730: PPUSH
// tmp := [ ] ;
62731: LD_ADDR_VAR 0 5
62735: PUSH
62736: EMPTY
62737: ST_TO_ADDR
// for i in units do
62738: LD_ADDR_VAR 0 4
62742: PUSH
62743: LD_VAR 0 1
62747: PUSH
62748: FOR_IN
62749: IFFALSE 62787
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
62751: LD_ADDR_VAR 0 5
62755: PUSH
62756: LD_VAR 0 5
62760: PPUSH
62761: LD_VAR 0 5
62765: PUSH
62766: LD_INT 1
62768: PLUS
62769: PPUSH
62770: LD_VAR 0 4
62774: PPUSH
62775: CALL_OW 256
62779: PPUSH
62780: CALL_OW 2
62784: ST_TO_ADDR
62785: GO 62748
62787: POP
62788: POP
// if not tmp then
62789: LD_VAR 0 5
62793: NOT
62794: IFFALSE 62798
// exit ;
62796: GO 62846
// if asc then
62798: LD_VAR 0 2
62802: IFFALSE 62826
// result := SortListByListAsc ( units , tmp ) else
62804: LD_ADDR_VAR 0 3
62808: PUSH
62809: LD_VAR 0 1
62813: PPUSH
62814: LD_VAR 0 5
62818: PPUSH
62819: CALL_OW 76
62823: ST_TO_ADDR
62824: GO 62846
// result := SortListByListDesc ( units , tmp ) ;
62826: LD_ADDR_VAR 0 3
62830: PUSH
62831: LD_VAR 0 1
62835: PPUSH
62836: LD_VAR 0 5
62840: PPUSH
62841: CALL_OW 77
62845: ST_TO_ADDR
// end ;
62846: LD_VAR 0 3
62850: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
62851: LD_INT 0
62853: PPUSH
62854: PPUSH
// task := GetTaskList ( mech ) ;
62855: LD_ADDR_VAR 0 4
62859: PUSH
62860: LD_VAR 0 1
62864: PPUSH
62865: CALL_OW 437
62869: ST_TO_ADDR
// if not task then
62870: LD_VAR 0 4
62874: NOT
62875: IFFALSE 62879
// exit ;
62877: GO 62921
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
62879: LD_ADDR_VAR 0 3
62883: PUSH
62884: LD_VAR 0 4
62888: PUSH
62889: LD_INT 1
62891: ARRAY
62892: PUSH
62893: LD_INT 1
62895: ARRAY
62896: PUSH
62897: LD_STRING r
62899: EQUAL
62900: PUSH
62901: LD_VAR 0 4
62905: PUSH
62906: LD_INT 1
62908: ARRAY
62909: PUSH
62910: LD_INT 4
62912: ARRAY
62913: PUSH
62914: LD_VAR 0 2
62918: EQUAL
62919: AND
62920: ST_TO_ADDR
// end ;
62921: LD_VAR 0 3
62925: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
62926: LD_INT 0
62928: PPUSH
// SetDir ( unit , d ) ;
62929: LD_VAR 0 1
62933: PPUSH
62934: LD_VAR 0 4
62938: PPUSH
62939: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
62943: LD_VAR 0 1
62947: PPUSH
62948: LD_VAR 0 2
62952: PPUSH
62953: LD_VAR 0 3
62957: PPUSH
62958: LD_VAR 0 5
62962: PPUSH
62963: CALL_OW 48
// end ;
62967: LD_VAR 0 6
62971: RET
// export function ToNaturalNumber ( number ) ; begin
62972: LD_INT 0
62974: PPUSH
// result := number div 1 ;
62975: LD_ADDR_VAR 0 2
62979: PUSH
62980: LD_VAR 0 1
62984: PUSH
62985: LD_INT 1
62987: DIV
62988: ST_TO_ADDR
// if number < 0 then
62989: LD_VAR 0 1
62993: PUSH
62994: LD_INT 0
62996: LESS
62997: IFFALSE 63007
// result := 0 ;
62999: LD_ADDR_VAR 0 2
63003: PUSH
63004: LD_INT 0
63006: ST_TO_ADDR
// end ;
63007: LD_VAR 0 2
63011: RET
// export function SortByClass ( units , class ) ; var un ; begin
63012: LD_INT 0
63014: PPUSH
63015: PPUSH
// if not units or not class then
63016: LD_VAR 0 1
63020: NOT
63021: PUSH
63022: LD_VAR 0 2
63026: NOT
63027: OR
63028: IFFALSE 63032
// exit ;
63030: GO 63127
// result := [ ] ;
63032: LD_ADDR_VAR 0 3
63036: PUSH
63037: EMPTY
63038: ST_TO_ADDR
// for un in units do
63039: LD_ADDR_VAR 0 4
63043: PUSH
63044: LD_VAR 0 1
63048: PUSH
63049: FOR_IN
63050: IFFALSE 63125
// if GetClass ( un ) = class then
63052: LD_VAR 0 4
63056: PPUSH
63057: CALL_OW 257
63061: PUSH
63062: LD_VAR 0 2
63066: EQUAL
63067: IFFALSE 63094
// result := Insert ( result , 1 , un ) else
63069: LD_ADDR_VAR 0 3
63073: PUSH
63074: LD_VAR 0 3
63078: PPUSH
63079: LD_INT 1
63081: PPUSH
63082: LD_VAR 0 4
63086: PPUSH
63087: CALL_OW 2
63091: ST_TO_ADDR
63092: GO 63123
// result := Replace ( result , result + 1 , un ) ;
63094: LD_ADDR_VAR 0 3
63098: PUSH
63099: LD_VAR 0 3
63103: PPUSH
63104: LD_VAR 0 3
63108: PUSH
63109: LD_INT 1
63111: PLUS
63112: PPUSH
63113: LD_VAR 0 4
63117: PPUSH
63118: CALL_OW 1
63122: ST_TO_ADDR
63123: GO 63049
63125: POP
63126: POP
// end ;
63127: LD_VAR 0 3
63131: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
63132: LD_INT 0
63134: PPUSH
63135: PPUSH
63136: PPUSH
63137: PPUSH
63138: PPUSH
63139: PPUSH
63140: PPUSH
// result := [ ] ;
63141: LD_ADDR_VAR 0 4
63145: PUSH
63146: EMPTY
63147: ST_TO_ADDR
// if x - r < 0 then
63148: LD_VAR 0 1
63152: PUSH
63153: LD_VAR 0 3
63157: MINUS
63158: PUSH
63159: LD_INT 0
63161: LESS
63162: IFFALSE 63174
// min_x := 0 else
63164: LD_ADDR_VAR 0 8
63168: PUSH
63169: LD_INT 0
63171: ST_TO_ADDR
63172: GO 63190
// min_x := x - r ;
63174: LD_ADDR_VAR 0 8
63178: PUSH
63179: LD_VAR 0 1
63183: PUSH
63184: LD_VAR 0 3
63188: MINUS
63189: ST_TO_ADDR
// if y - r < 0 then
63190: LD_VAR 0 2
63194: PUSH
63195: LD_VAR 0 3
63199: MINUS
63200: PUSH
63201: LD_INT 0
63203: LESS
63204: IFFALSE 63216
// min_y := 0 else
63206: LD_ADDR_VAR 0 7
63210: PUSH
63211: LD_INT 0
63213: ST_TO_ADDR
63214: GO 63232
// min_y := y - r ;
63216: LD_ADDR_VAR 0 7
63220: PUSH
63221: LD_VAR 0 2
63225: PUSH
63226: LD_VAR 0 3
63230: MINUS
63231: ST_TO_ADDR
// max_x := x + r ;
63232: LD_ADDR_VAR 0 9
63236: PUSH
63237: LD_VAR 0 1
63241: PUSH
63242: LD_VAR 0 3
63246: PLUS
63247: ST_TO_ADDR
// max_y := y + r ;
63248: LD_ADDR_VAR 0 10
63252: PUSH
63253: LD_VAR 0 2
63257: PUSH
63258: LD_VAR 0 3
63262: PLUS
63263: ST_TO_ADDR
// for _x = min_x to max_x do
63264: LD_ADDR_VAR 0 5
63268: PUSH
63269: DOUBLE
63270: LD_VAR 0 8
63274: DEC
63275: ST_TO_ADDR
63276: LD_VAR 0 9
63280: PUSH
63281: FOR_TO
63282: IFFALSE 63383
// for _y = min_y to max_y do
63284: LD_ADDR_VAR 0 6
63288: PUSH
63289: DOUBLE
63290: LD_VAR 0 7
63294: DEC
63295: ST_TO_ADDR
63296: LD_VAR 0 10
63300: PUSH
63301: FOR_TO
63302: IFFALSE 63379
// begin if not ValidHex ( _x , _y ) then
63304: LD_VAR 0 5
63308: PPUSH
63309: LD_VAR 0 6
63313: PPUSH
63314: CALL_OW 488
63318: NOT
63319: IFFALSE 63323
// continue ;
63321: GO 63301
// if GetResourceTypeXY ( _x , _y ) then
63323: LD_VAR 0 5
63327: PPUSH
63328: LD_VAR 0 6
63332: PPUSH
63333: CALL_OW 283
63337: IFFALSE 63377
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
63339: LD_ADDR_VAR 0 4
63343: PUSH
63344: LD_VAR 0 4
63348: PPUSH
63349: LD_VAR 0 4
63353: PUSH
63354: LD_INT 1
63356: PLUS
63357: PPUSH
63358: LD_VAR 0 5
63362: PUSH
63363: LD_VAR 0 6
63367: PUSH
63368: EMPTY
63369: LIST
63370: LIST
63371: PPUSH
63372: CALL_OW 1
63376: ST_TO_ADDR
// end ;
63377: GO 63301
63379: POP
63380: POP
63381: GO 63281
63383: POP
63384: POP
// end ;
63385: LD_VAR 0 4
63389: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
63390: LD_INT 0
63392: PPUSH
63393: PPUSH
63394: PPUSH
63395: PPUSH
63396: PPUSH
63397: PPUSH
63398: PPUSH
63399: PPUSH
// if not units then
63400: LD_VAR 0 1
63404: NOT
63405: IFFALSE 63409
// exit ;
63407: GO 63933
// result := UnitFilter ( units , [ f_ok ] ) ;
63409: LD_ADDR_VAR 0 3
63413: PUSH
63414: LD_VAR 0 1
63418: PPUSH
63419: LD_INT 50
63421: PUSH
63422: EMPTY
63423: LIST
63424: PPUSH
63425: CALL_OW 72
63429: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
63430: LD_ADDR_VAR 0 8
63434: PUSH
63435: LD_VAR 0 1
63439: PUSH
63440: LD_INT 1
63442: ARRAY
63443: PPUSH
63444: CALL_OW 255
63448: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
63449: LD_ADDR_VAR 0 10
63453: PUSH
63454: LD_INT 29
63456: PUSH
63457: LD_INT 91
63459: PUSH
63460: LD_INT 49
63462: PUSH
63463: EMPTY
63464: LIST
63465: LIST
63466: LIST
63467: ST_TO_ADDR
// if not result then
63468: LD_VAR 0 3
63472: NOT
63473: IFFALSE 63477
// exit ;
63475: GO 63933
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
63477: LD_ADDR_VAR 0 5
63481: PUSH
63482: LD_INT 81
63484: PUSH
63485: LD_VAR 0 8
63489: PUSH
63490: EMPTY
63491: LIST
63492: LIST
63493: PPUSH
63494: CALL_OW 69
63498: ST_TO_ADDR
// for i in result do
63499: LD_ADDR_VAR 0 4
63503: PUSH
63504: LD_VAR 0 3
63508: PUSH
63509: FOR_IN
63510: IFFALSE 63931
// begin tag := GetTag ( i ) + 1 ;
63512: LD_ADDR_VAR 0 9
63516: PUSH
63517: LD_VAR 0 4
63521: PPUSH
63522: CALL_OW 110
63526: PUSH
63527: LD_INT 1
63529: PLUS
63530: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
63531: LD_ADDR_VAR 0 7
63535: PUSH
63536: LD_VAR 0 4
63540: PPUSH
63541: CALL_OW 250
63545: PPUSH
63546: LD_VAR 0 4
63550: PPUSH
63551: CALL_OW 251
63555: PPUSH
63556: LD_INT 6
63558: PPUSH
63559: CALL 63132 0 3
63563: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
63564: LD_VAR 0 4
63568: PPUSH
63569: CALL_OW 247
63573: PUSH
63574: LD_INT 2
63576: EQUAL
63577: PUSH
63578: LD_VAR 0 7
63582: AND
63583: PUSH
63584: LD_VAR 0 4
63588: PPUSH
63589: CALL_OW 264
63593: PUSH
63594: LD_VAR 0 10
63598: IN
63599: NOT
63600: AND
63601: IFFALSE 63640
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
63603: LD_VAR 0 4
63607: PPUSH
63608: LD_VAR 0 7
63612: PUSH
63613: LD_INT 1
63615: ARRAY
63616: PUSH
63617: LD_INT 1
63619: ARRAY
63620: PPUSH
63621: LD_VAR 0 7
63625: PUSH
63626: LD_INT 1
63628: ARRAY
63629: PUSH
63630: LD_INT 2
63632: ARRAY
63633: PPUSH
63634: CALL_OW 116
63638: GO 63929
// if path > tag then
63640: LD_VAR 0 2
63644: PUSH
63645: LD_VAR 0 9
63649: GREATER
63650: IFFALSE 63858
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
63652: LD_ADDR_VAR 0 6
63656: PUSH
63657: LD_VAR 0 5
63661: PPUSH
63662: LD_INT 91
63664: PUSH
63665: LD_VAR 0 4
63669: PUSH
63670: LD_INT 8
63672: PUSH
63673: EMPTY
63674: LIST
63675: LIST
63676: LIST
63677: PPUSH
63678: CALL_OW 72
63682: ST_TO_ADDR
// if nearEnemy then
63683: LD_VAR 0 6
63687: IFFALSE 63756
// begin if GetWeapon ( i ) = ru_time_lapser then
63689: LD_VAR 0 4
63693: PPUSH
63694: CALL_OW 264
63698: PUSH
63699: LD_INT 49
63701: EQUAL
63702: IFFALSE 63730
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
63704: LD_VAR 0 4
63708: PPUSH
63709: LD_VAR 0 6
63713: PPUSH
63714: LD_VAR 0 4
63718: PPUSH
63719: CALL_OW 74
63723: PPUSH
63724: CALL_OW 112
63728: GO 63754
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
63730: LD_VAR 0 4
63734: PPUSH
63735: LD_VAR 0 6
63739: PPUSH
63740: LD_VAR 0 4
63744: PPUSH
63745: CALL_OW 74
63749: PPUSH
63750: CALL 64858 0 2
// end else
63754: GO 63856
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
63756: LD_VAR 0 4
63760: PPUSH
63761: LD_VAR 0 2
63765: PUSH
63766: LD_VAR 0 9
63770: ARRAY
63771: PUSH
63772: LD_INT 1
63774: ARRAY
63775: PPUSH
63776: LD_VAR 0 2
63780: PUSH
63781: LD_VAR 0 9
63785: ARRAY
63786: PUSH
63787: LD_INT 2
63789: ARRAY
63790: PPUSH
63791: CALL_OW 297
63795: PUSH
63796: LD_INT 6
63798: GREATER
63799: IFFALSE 63842
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
63801: LD_VAR 0 4
63805: PPUSH
63806: LD_VAR 0 2
63810: PUSH
63811: LD_VAR 0 9
63815: ARRAY
63816: PUSH
63817: LD_INT 1
63819: ARRAY
63820: PPUSH
63821: LD_VAR 0 2
63825: PUSH
63826: LD_VAR 0 9
63830: ARRAY
63831: PUSH
63832: LD_INT 2
63834: ARRAY
63835: PPUSH
63836: CALL_OW 114
63840: GO 63856
// SetTag ( i , tag ) ;
63842: LD_VAR 0 4
63846: PPUSH
63847: LD_VAR 0 9
63851: PPUSH
63852: CALL_OW 109
// end else
63856: GO 63929
// if enemy then
63858: LD_VAR 0 5
63862: IFFALSE 63929
// begin if GetWeapon ( i ) = ru_time_lapser then
63864: LD_VAR 0 4
63868: PPUSH
63869: CALL_OW 264
63873: PUSH
63874: LD_INT 49
63876: EQUAL
63877: IFFALSE 63905
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
63879: LD_VAR 0 4
63883: PPUSH
63884: LD_VAR 0 5
63888: PPUSH
63889: LD_VAR 0 4
63893: PPUSH
63894: CALL_OW 74
63898: PPUSH
63899: CALL_OW 112
63903: GO 63929
// ComAgressiveMoveToUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
63905: LD_VAR 0 4
63909: PPUSH
63910: LD_VAR 0 5
63914: PPUSH
63915: LD_VAR 0 4
63919: PPUSH
63920: CALL_OW 74
63924: PPUSH
63925: CALL 64858 0 2
// end ; end ;
63929: GO 63509
63931: POP
63932: POP
// end ;
63933: LD_VAR 0 3
63937: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
63938: LD_INT 0
63940: PPUSH
63941: PPUSH
63942: PPUSH
// if not unit or IsInUnit ( unit ) then
63943: LD_VAR 0 1
63947: NOT
63948: PUSH
63949: LD_VAR 0 1
63953: PPUSH
63954: CALL_OW 310
63958: OR
63959: IFFALSE 63963
// exit ;
63961: GO 64054
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
63963: LD_ADDR_VAR 0 4
63967: PUSH
63968: LD_VAR 0 1
63972: PPUSH
63973: CALL_OW 250
63977: PPUSH
63978: LD_VAR 0 2
63982: PPUSH
63983: LD_INT 1
63985: PPUSH
63986: CALL_OW 272
63990: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
63991: LD_ADDR_VAR 0 5
63995: PUSH
63996: LD_VAR 0 1
64000: PPUSH
64001: CALL_OW 251
64005: PPUSH
64006: LD_VAR 0 2
64010: PPUSH
64011: LD_INT 1
64013: PPUSH
64014: CALL_OW 273
64018: ST_TO_ADDR
// if ValidHex ( x , y ) then
64019: LD_VAR 0 4
64023: PPUSH
64024: LD_VAR 0 5
64028: PPUSH
64029: CALL_OW 488
64033: IFFALSE 64054
// ComTurnXY ( unit , x , y ) ;
64035: LD_VAR 0 1
64039: PPUSH
64040: LD_VAR 0 4
64044: PPUSH
64045: LD_VAR 0 5
64049: PPUSH
64050: CALL_OW 118
// end ;
64054: LD_VAR 0 3
64058: RET
// export function SeeUnits ( side , units ) ; var i ; begin
64059: LD_INT 0
64061: PPUSH
64062: PPUSH
// result := false ;
64063: LD_ADDR_VAR 0 3
64067: PUSH
64068: LD_INT 0
64070: ST_TO_ADDR
// if not units then
64071: LD_VAR 0 2
64075: NOT
64076: IFFALSE 64080
// exit ;
64078: GO 64125
// for i in units do
64080: LD_ADDR_VAR 0 4
64084: PUSH
64085: LD_VAR 0 2
64089: PUSH
64090: FOR_IN
64091: IFFALSE 64123
// if See ( side , i ) then
64093: LD_VAR 0 1
64097: PPUSH
64098: LD_VAR 0 4
64102: PPUSH
64103: CALL_OW 292
64107: IFFALSE 64121
// begin result := true ;
64109: LD_ADDR_VAR 0 3
64113: PUSH
64114: LD_INT 1
64116: ST_TO_ADDR
// exit ;
64117: POP
64118: POP
64119: GO 64125
// end ;
64121: GO 64090
64123: POP
64124: POP
// end ;
64125: LD_VAR 0 3
64129: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
64130: LD_INT 0
64132: PPUSH
64133: PPUSH
64134: PPUSH
64135: PPUSH
// if not unit or not points then
64136: LD_VAR 0 1
64140: NOT
64141: PUSH
64142: LD_VAR 0 2
64146: NOT
64147: OR
64148: IFFALSE 64152
// exit ;
64150: GO 64242
// dist := 99999 ;
64152: LD_ADDR_VAR 0 5
64156: PUSH
64157: LD_INT 99999
64159: ST_TO_ADDR
// for i in points do
64160: LD_ADDR_VAR 0 4
64164: PUSH
64165: LD_VAR 0 2
64169: PUSH
64170: FOR_IN
64171: IFFALSE 64240
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
64173: LD_ADDR_VAR 0 6
64177: PUSH
64178: LD_VAR 0 1
64182: PPUSH
64183: LD_VAR 0 4
64187: PUSH
64188: LD_INT 1
64190: ARRAY
64191: PPUSH
64192: LD_VAR 0 4
64196: PUSH
64197: LD_INT 2
64199: ARRAY
64200: PPUSH
64201: CALL_OW 297
64205: ST_TO_ADDR
// if tmpDist < dist then
64206: LD_VAR 0 6
64210: PUSH
64211: LD_VAR 0 5
64215: LESS
64216: IFFALSE 64238
// begin result := i ;
64218: LD_ADDR_VAR 0 3
64222: PUSH
64223: LD_VAR 0 4
64227: ST_TO_ADDR
// dist := tmpDist ;
64228: LD_ADDR_VAR 0 5
64232: PUSH
64233: LD_VAR 0 6
64237: ST_TO_ADDR
// end ; end ;
64238: GO 64170
64240: POP
64241: POP
// end ;
64242: LD_VAR 0 3
64246: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
64247: LD_INT 0
64249: PPUSH
// uc_side := side ;
64250: LD_ADDR_OWVAR 20
64254: PUSH
64255: LD_VAR 0 1
64259: ST_TO_ADDR
// uc_nation := 3 ;
64260: LD_ADDR_OWVAR 21
64264: PUSH
64265: LD_INT 3
64267: ST_TO_ADDR
// vc_chassis := 25 ;
64268: LD_ADDR_OWVAR 37
64272: PUSH
64273: LD_INT 25
64275: ST_TO_ADDR
// vc_engine := engine_siberite ;
64276: LD_ADDR_OWVAR 39
64280: PUSH
64281: LD_INT 3
64283: ST_TO_ADDR
// vc_control := control_computer ;
64284: LD_ADDR_OWVAR 38
64288: PUSH
64289: LD_INT 3
64291: ST_TO_ADDR
// vc_weapon := 59 ;
64292: LD_ADDR_OWVAR 40
64296: PUSH
64297: LD_INT 59
64299: ST_TO_ADDR
// result := CreateVehicle ;
64300: LD_ADDR_VAR 0 5
64304: PUSH
64305: CALL_OW 45
64309: ST_TO_ADDR
// SetDir ( result , d ) ;
64310: LD_VAR 0 5
64314: PPUSH
64315: LD_VAR 0 4
64319: PPUSH
64320: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
64324: LD_VAR 0 5
64328: PPUSH
64329: LD_VAR 0 2
64333: PPUSH
64334: LD_VAR 0 3
64338: PPUSH
64339: LD_INT 0
64341: PPUSH
64342: CALL_OW 48
// end ;
64346: LD_VAR 0 5
64350: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
64351: LD_INT 0
64353: PPUSH
64354: PPUSH
64355: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
64356: LD_ADDR_VAR 0 2
64360: PUSH
64361: LD_INT 0
64363: PUSH
64364: LD_INT 0
64366: PUSH
64367: LD_INT 0
64369: PUSH
64370: LD_INT 0
64372: PUSH
64373: EMPTY
64374: LIST
64375: LIST
64376: LIST
64377: LIST
64378: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
64379: LD_VAR 0 1
64383: NOT
64384: PUSH
64385: LD_VAR 0 1
64389: PPUSH
64390: CALL_OW 264
64394: PUSH
64395: LD_INT 12
64397: PUSH
64398: LD_INT 51
64400: PUSH
64401: LD_INT 32
64403: PUSH
64404: LD_INT 89
64406: PUSH
64407: EMPTY
64408: LIST
64409: LIST
64410: LIST
64411: LIST
64412: IN
64413: NOT
64414: OR
64415: IFFALSE 64419
// exit ;
64417: GO 64517
// for i := 1 to 3 do
64419: LD_ADDR_VAR 0 3
64423: PUSH
64424: DOUBLE
64425: LD_INT 1
64427: DEC
64428: ST_TO_ADDR
64429: LD_INT 3
64431: PUSH
64432: FOR_TO
64433: IFFALSE 64515
// begin tmp := GetCargo ( cargo , i ) ;
64435: LD_ADDR_VAR 0 4
64439: PUSH
64440: LD_VAR 0 1
64444: PPUSH
64445: LD_VAR 0 3
64449: PPUSH
64450: CALL_OW 289
64454: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
64455: LD_ADDR_VAR 0 2
64459: PUSH
64460: LD_VAR 0 2
64464: PPUSH
64465: LD_VAR 0 3
64469: PPUSH
64470: LD_VAR 0 4
64474: PPUSH
64475: CALL_OW 1
64479: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
64480: LD_ADDR_VAR 0 2
64484: PUSH
64485: LD_VAR 0 2
64489: PPUSH
64490: LD_INT 4
64492: PPUSH
64493: LD_VAR 0 2
64497: PUSH
64498: LD_INT 4
64500: ARRAY
64501: PUSH
64502: LD_VAR 0 4
64506: PLUS
64507: PPUSH
64508: CALL_OW 1
64512: ST_TO_ADDR
// end ;
64513: GO 64432
64515: POP
64516: POP
// end ;
64517: LD_VAR 0 2
64521: RET
// export function Length ( array ) ; begin
64522: LD_INT 0
64524: PPUSH
// result := array + 0 ;
64525: LD_ADDR_VAR 0 2
64529: PUSH
64530: LD_VAR 0 1
64534: PUSH
64535: LD_INT 0
64537: PLUS
64538: ST_TO_ADDR
// end ;
64539: LD_VAR 0 2
64543: RET
// export function PrepareArray ( array ) ; begin
64544: LD_INT 0
64546: PPUSH
// result := array diff 0 ;
64547: LD_ADDR_VAR 0 2
64551: PUSH
64552: LD_VAR 0 1
64556: PUSH
64557: LD_INT 0
64559: DIFF
64560: ST_TO_ADDR
// if not result [ 1 ] then
64561: LD_VAR 0 2
64565: PUSH
64566: LD_INT 1
64568: ARRAY
64569: NOT
64570: IFFALSE 64590
// result := Delete ( result , 1 ) ;
64572: LD_ADDR_VAR 0 2
64576: PUSH
64577: LD_VAR 0 2
64581: PPUSH
64582: LD_INT 1
64584: PPUSH
64585: CALL_OW 3
64589: ST_TO_ADDR
// end ;
64590: LD_VAR 0 2
64594: RET
// export function IsInSibRocketRange ( x , y , area ) ; var i , sibRocketRange , tmp ; begin
64595: LD_INT 0
64597: PPUSH
64598: PPUSH
64599: PPUSH
64600: PPUSH
// sibRocketRange := 25 ;
64601: LD_ADDR_VAR 0 6
64605: PUSH
64606: LD_INT 25
64608: ST_TO_ADDR
// result := false ;
64609: LD_ADDR_VAR 0 4
64613: PUSH
64614: LD_INT 0
64616: ST_TO_ADDR
// for i := 0 to 5 do
64617: LD_ADDR_VAR 0 5
64621: PUSH
64622: DOUBLE
64623: LD_INT 0
64625: DEC
64626: ST_TO_ADDR
64627: LD_INT 5
64629: PUSH
64630: FOR_TO
64631: IFFALSE 64698
// if InArea ( ShiftX ( x , i , sibRocketRange ) , ShiftY ( y , i , sibRocketRange ) , area ) then
64633: LD_VAR 0 1
64637: PPUSH
64638: LD_VAR 0 5
64642: PPUSH
64643: LD_VAR 0 6
64647: PPUSH
64648: CALL_OW 272
64652: PPUSH
64653: LD_VAR 0 2
64657: PPUSH
64658: LD_VAR 0 5
64662: PPUSH
64663: LD_VAR 0 6
64667: PPUSH
64668: CALL_OW 273
64672: PPUSH
64673: LD_VAR 0 3
64677: PPUSH
64678: CALL_OW 309
64682: IFFALSE 64696
// begin result := true ;
64684: LD_ADDR_VAR 0 4
64688: PUSH
64689: LD_INT 1
64691: ST_TO_ADDR
// exit ;
64692: POP
64693: POP
64694: GO 64700
// end ;
64696: GO 64630
64698: POP
64699: POP
// end ;
64700: LD_VAR 0 4
64704: RET
// export function SayRadioNoFaceNoName ( unit , dialog ) ; begin
64705: LD_INT 0
64707: PPUSH
// SayEX ( unit , dialog , false , false , true , false ) ;
64708: LD_VAR 0 1
64712: PPUSH
64713: LD_VAR 0 2
64717: PPUSH
64718: LD_INT 0
64720: PPUSH
64721: LD_INT 0
64723: PPUSH
64724: LD_INT 1
64726: PPUSH
64727: LD_INT 0
64729: PPUSH
64730: CALL_OW 587
// end ;
64734: LD_VAR 0 3
64738: RET
// export function CenterOnNow ( unit ) ; begin
64739: LD_INT 0
64741: PPUSH
// result := IsInUnit ( unit ) ;
64742: LD_ADDR_VAR 0 2
64746: PUSH
64747: LD_VAR 0 1
64751: PPUSH
64752: CALL_OW 310
64756: ST_TO_ADDR
// if not result then
64757: LD_VAR 0 2
64761: NOT
64762: IFFALSE 64774
// result := unit ;
64764: LD_ADDR_VAR 0 2
64768: PUSH
64769: LD_VAR 0 1
64773: ST_TO_ADDR
// CenterNowOnUnits ( unit ) ;
64774: LD_VAR 0 1
64778: PPUSH
64779: CALL_OW 87
// end ;
64783: LD_VAR 0 2
64787: RET
// export function ComMoveHex ( unit , hex ) ; begin
64788: LD_INT 0
64790: PPUSH
// if not hex then
64791: LD_VAR 0 2
64795: NOT
64796: IFFALSE 64800
// exit ;
64798: GO 64853
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) then
64800: LD_VAR 0 2
64804: PUSH
64805: LD_INT 1
64807: ARRAY
64808: PPUSH
64809: LD_VAR 0 2
64813: PUSH
64814: LD_INT 2
64816: ARRAY
64817: PPUSH
64818: CALL_OW 428
64822: IFFALSE 64826
// exit ;
64824: GO 64853
// ComMoveXY ( unit , hex [ 1 ] , hex [ 2 ] ) ;
64826: LD_VAR 0 1
64830: PPUSH
64831: LD_VAR 0 2
64835: PUSH
64836: LD_INT 1
64838: ARRAY
64839: PPUSH
64840: LD_VAR 0 2
64844: PUSH
64845: LD_INT 2
64847: ARRAY
64848: PPUSH
64849: CALL_OW 111
// end ;
64853: LD_VAR 0 3
64857: RET
// export function ComAgressiveMoveToUnit ( unit , enemy ) ; var x , y ; begin
64858: LD_INT 0
64860: PPUSH
64861: PPUSH
64862: PPUSH
// if not unit or not enemy then
64863: LD_VAR 0 1
64867: NOT
64868: PUSH
64869: LD_VAR 0 2
64873: NOT
64874: OR
64875: IFFALSE 64879
// exit ;
64877: GO 65003
// x := GetX ( enemy ) ;
64879: LD_ADDR_VAR 0 4
64883: PUSH
64884: LD_VAR 0 2
64888: PPUSH
64889: CALL_OW 250
64893: ST_TO_ADDR
// y := GetY ( enemy ) ;
64894: LD_ADDR_VAR 0 5
64898: PUSH
64899: LD_VAR 0 2
64903: PPUSH
64904: CALL_OW 251
64908: ST_TO_ADDR
// if ValidHex ( x , y ) then
64909: LD_VAR 0 4
64913: PPUSH
64914: LD_VAR 0 5
64918: PPUSH
64919: CALL_OW 488
64923: IFFALSE 65003
// if GetType ( enemy ) in [ unit_building , unit_vehicle ] and See ( GetSide ( unit ) , enemy ) then
64925: LD_VAR 0 2
64929: PPUSH
64930: CALL_OW 247
64934: PUSH
64935: LD_INT 3
64937: PUSH
64938: LD_INT 2
64940: PUSH
64941: EMPTY
64942: LIST
64943: LIST
64944: IN
64945: PUSH
64946: LD_VAR 0 1
64950: PPUSH
64951: CALL_OW 255
64955: PPUSH
64956: LD_VAR 0 2
64960: PPUSH
64961: CALL_OW 292
64965: AND
64966: IFFALSE 64984
// ComAttackUnit ( unit , enemy ) else
64968: LD_VAR 0 1
64972: PPUSH
64973: LD_VAR 0 2
64977: PPUSH
64978: CALL_OW 115
64982: GO 65003
// ComAgressiveMove ( unit , x , y ) ;
64984: LD_VAR 0 1
64988: PPUSH
64989: LD_VAR 0 4
64993: PPUSH
64994: LD_VAR 0 5
64998: PPUSH
64999: CALL_OW 114
// end ; end_of_file
65003: LD_VAR 0 3
65007: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) do begin case cmd of 200 .. 299 :
65008: LD_VAR 0 1
65012: PUSH
65013: LD_INT 200
65015: DOUBLE
65016: GREATEREQUAL
65017: IFFALSE 65025
65019: LD_INT 299
65021: DOUBLE
65022: LESSEQUAL
65023: IFTRUE 65027
65025: GO 65059
65027: POP
// SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; 300 .. 399 :
65028: LD_VAR 0 1
65032: PPUSH
65033: LD_VAR 0 2
65037: PPUSH
65038: LD_VAR 0 3
65042: PPUSH
65043: LD_VAR 0 4
65047: PPUSH
65048: LD_VAR 0 5
65052: PPUSH
65053: CALL 3750 0 5
65057: GO 65136
65059: LD_INT 300
65061: DOUBLE
65062: GREATEREQUAL
65063: IFFALSE 65071
65065: LD_INT 399
65067: DOUBLE
65068: LESSEQUAL
65069: IFTRUE 65073
65071: GO 65135
65073: POP
// SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; end ;
65074: LD_VAR 0 1
65078: PPUSH
65079: LD_VAR 0 2
65083: PPUSH
65084: LD_VAR 0 3
65088: PPUSH
65089: LD_VAR 0 4
65093: PPUSH
65094: LD_VAR 0 5
65098: PPUSH
65099: LD_VAR 0 6
65103: PPUSH
65104: LD_VAR 0 7
65108: PPUSH
65109: LD_VAR 0 8
65113: PPUSH
65114: LD_VAR 0 9
65118: PPUSH
65119: LD_VAR 0 10
65123: PPUSH
65124: LD_VAR 0 11
65128: PPUSH
65129: CALL 20166 0 11
65133: GO 65136
65135: POP
// end ;
65136: PPOPN 11
65138: END
// on CommandUnitXY ( cmd , un , target , x , y ) do begin SOS_CommandUnitXY ( cmd , un , target , x , y ) ;
65139: LD_VAR 0 1
65143: PPUSH
65144: LD_VAR 0 2
65148: PPUSH
65149: LD_VAR 0 3
65153: PPUSH
65154: LD_VAR 0 4
65158: PPUSH
65159: LD_VAR 0 5
65163: PPUSH
65164: CALL 3486 0 5
// end ; end_of_file
65168: PPOPN 5
65170: END
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ;
65171: LD_VAR 0 1
65175: PPUSH
65176: LD_VAR 0 2
65180: PPUSH
65181: LD_VAR 0 3
65185: PPUSH
65186: LD_VAR 0 4
65190: PPUSH
65191: LD_VAR 0 5
65195: PPUSH
65196: LD_VAR 0 6
65200: PPUSH
65201: CALL 7818 0 6
// end ;
65205: PPOPN 6
65207: END
// on CommPanelCommand ( units , p1 , p2 , p3 , p4 , p5 ) do var i ;
65208: LD_INT 0
65210: PPUSH
// begin if not units then
65211: LD_VAR 0 1
65215: NOT
65216: IFFALSE 65220
// exit ;
65218: GO 65220
// end ;
65220: PPOPN 7
65222: END
// on MapStart ( p ) do begin SOS_MapStart ( ) ;
65223: CALL 7722 0 0
// end ;
65227: PPOPN 1
65229: END
