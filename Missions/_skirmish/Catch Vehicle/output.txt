// starting begin ResetFog ;
   0: CALL_OW 335
// PrepareGame ;
   4: CALL 13 0 0
// PrepareUnits ;
   8: CALL 299 0 0
// end ;
  12: END
// export mechanics , time_to_destroy , players , sib_bomb , time , veh_amount ; export p1 , p2 , p3 , p4 , p5 ; function PrepareGame ; var debug , i ; begin
  13: LD_INT 0
  15: PPUSH
  16: PPUSH
  17: PPUSH
// debug := false ;
  18: LD_ADDR_VAR 0 2
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// if debug then
  26: LD_VAR 0 2
  30: IFFALSE 81
// begin mechanics := 5 ;
  32: LD_ADDR_EXP 1
  36: PUSH
  37: LD_INT 5
  39: ST_TO_ADDR
// time_to_destroy := 45 ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_INT 45
  47: ST_TO_ADDR
// players := 4 ;
  48: LD_ADDR_EXP 3
  52: PUSH
  53: LD_INT 4
  55: ST_TO_ADDR
// sib_bomb := true ;
  56: LD_ADDR_EXP 4
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// time := 3 3$00 ;
  64: LD_ADDR_EXP 5
  68: PUSH
  69: LD_INT 6300
  71: ST_TO_ADDR
// FogOff ( 1 ) ;
  72: LD_INT 1
  74: PPUSH
  75: CALL_OW 344
// end else
  79: GO 214
// begin time := 3 3$00 ;
  81: LD_ADDR_EXP 5
  85: PUSH
  86: LD_INT 6300
  88: ST_TO_ADDR
// players := 4 ;
  89: LD_ADDR_EXP 3
  93: PUSH
  94: LD_INT 4
  96: ST_TO_ADDR
// sib_bomb := true ;
  97: LD_ADDR_EXP 4
 101: PUSH
 102: LD_INT 1
 104: ST_TO_ADDR
// mechanics := 4 ;
 105: LD_ADDR_EXP 1
 109: PUSH
 110: LD_INT 4
 112: ST_TO_ADDR
// mechanics := [ 3 , 4 , 5 ] [ GetMultiplayerSetting ( 0 ) ] ;
 113: LD_ADDR_EXP 1
 117: PUSH
 118: LD_INT 3
 120: PUSH
 121: LD_INT 4
 123: PUSH
 124: LD_INT 5
 126: PUSH
 127: EMPTY
 128: LIST
 129: LIST
 130: LIST
 131: PUSH
 132: LD_INT 0
 134: PPUSH
 135: CALL_OW 426
 139: ARRAY
 140: ST_TO_ADDR
// players := [ 3 , 4 , 5 ] [ GetMultiplayerSetting ( 1 ) ] ;
 141: LD_ADDR_EXP 3
 145: PUSH
 146: LD_INT 3
 148: PUSH
 149: LD_INT 4
 151: PUSH
 152: LD_INT 5
 154: PUSH
 155: EMPTY
 156: LIST
 157: LIST
 158: LIST
 159: PUSH
 160: LD_INT 1
 162: PPUSH
 163: CALL_OW 426
 167: ARRAY
 168: ST_TO_ADDR
// time := [ 3 3$00 , 5 5$00 , 10 10$00 ] [ GetMultiplayerSetting ( 2 ) ] ;
 169: LD_ADDR_EXP 5
 173: PUSH
 174: LD_INT 6300
 176: PUSH
 177: LD_INT 10500
 179: PUSH
 180: LD_INT 21000
 182: PUSH
 183: EMPTY
 184: LIST
 185: LIST
 186: LIST
 187: PUSH
 188: LD_INT 2
 190: PPUSH
 191: CALL_OW 426
 195: ARRAY
 196: ST_TO_ADDR
// sib_bomb := GetMultiplayerSetting ( 3 ) - 1 ;
 197: LD_ADDR_EXP 4
 201: PUSH
 202: LD_INT 3
 204: PPUSH
 205: CALL_OW 426
 209: PUSH
 210: LD_INT 1
 212: MINUS
 213: ST_TO_ADDR
// end ; p1 := 0 ;
 214: LD_ADDR_EXP 7
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// p2 := 0 ;
 222: LD_ADDR_EXP 8
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// p3 := 0 ;
 230: LD_ADDR_EXP 9
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// p4 := 0 ;
 238: LD_ADDR_EXP 10
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// p5 := 0 ;
 246: LD_ADDR_EXP 11
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// veh_amount := 12 ;
 254: LD_ADDR_EXP 6
 258: PUSH
 259: LD_INT 12
 261: ST_TO_ADDR
// for i = 1 to 7 do
 262: LD_ADDR_VAR 0 3
 266: PUSH
 267: DOUBLE
 268: LD_INT 1
 270: DEC
 271: ST_TO_ADDR
 272: LD_INT 7
 274: PUSH
 275: FOR_TO
 276: IFFALSE 292
// ChangeSideFog ( i , 8 ) ;
 278: LD_VAR 0 3
 282: PPUSH
 283: LD_INT 8
 285: PPUSH
 286: CALL_OW 343
 290: GO 275
 292: POP
 293: POP
// end ; end_of_file
 294: LD_VAR 0 1
 298: RET
// export function PrepareUnits ; var i , side ; begin
 299: LD_INT 0
 301: PPUSH
 302: PPUSH
 303: PPUSH
// side := players ;
 304: LD_ADDR_VAR 0 3
 308: PUSH
 309: LD_EXP 3
 313: ST_TO_ADDR
// uc_nation := 1 ;
 314: LD_ADDR_OWVAR 21
 318: PUSH
 319: LD_INT 1
 321: ST_TO_ADDR
// for i = 1 to mechanics do
 322: LD_ADDR_VAR 0 2
 326: PUSH
 327: DOUBLE
 328: LD_INT 1
 330: DEC
 331: ST_TO_ADDR
 332: LD_EXP 1
 336: PUSH
 337: FOR_TO
 338: IFFALSE 402
// for side = 1 to players do
 340: LD_ADDR_VAR 0 3
 344: PUSH
 345: DOUBLE
 346: LD_INT 1
 348: DEC
 349: ST_TO_ADDR
 350: LD_EXP 3
 354: PUSH
 355: FOR_TO
 356: IFFALSE 398
// begin uc_side := side ;
 358: LD_ADDR_OWVAR 20
 362: PUSH
 363: LD_VAR 0 3
 367: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
 368: LD_INT 0
 370: PPUSH
 371: LD_INT 3
 373: PPUSH
 374: LD_INT 10
 376: PPUSH
 377: CALL_OW 380
// PlaceUnitArea ( CreateHuman , mech_area , false ) ;
 381: CALL_OW 44
 385: PPUSH
 386: LD_INT 6
 388: PPUSH
 389: LD_INT 0
 391: PPUSH
 392: CALL_OW 49
// end ;
 396: GO 355
 398: POP
 399: POP
 400: GO 337
 402: POP
 403: POP
// end ;
 404: LD_VAR 0 1
 408: RET
// function ToSpawn ( side ) ; begin
 409: LD_INT 0
 411: PPUSH
// uc_side := side ;
 412: LD_ADDR_OWVAR 20
 416: PUSH
 417: LD_VAR 0 1
 421: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
 422: LD_INT 0
 424: PPUSH
 425: LD_INT 3
 427: PPUSH
 428: LD_INT 10
 430: PPUSH
 431: CALL_OW 380
// PlaceUnitArea ( CreateHuman , mech_area , false ) ;
 435: CALL_OW 44
 439: PPUSH
 440: LD_INT 6
 442: PPUSH
 443: LD_INT 0
 445: PPUSH
 446: CALL_OW 49
// end ;
 450: LD_VAR 0 2
 454: RET
// every 0 0$13 trigger time do var i , filter ;
 455: LD_EXP 5
 459: IFFALSE 569
 461: GO 463
 463: DISABLE
 464: LD_INT 0
 466: PPUSH
 467: PPUSH
// begin enable ;
 468: ENABLE
// for i = 1 to players do
 469: LD_ADDR_VAR 0 1
 473: PUSH
 474: DOUBLE
 475: LD_INT 1
 477: DEC
 478: ST_TO_ADDR
 479: LD_EXP 3
 483: PUSH
 484: FOR_TO
 485: IFFALSE 567
// begin filter := FilterAllUnits ( [ [ [ f_side , i ] , [ f_class , 3 ] , [ f_type , unit_human ] ] ] ) ;
 487: LD_ADDR_VAR 0 2
 491: PUSH
 492: LD_INT 22
 494: PUSH
 495: LD_VAR 0 1
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: PUSH
 504: LD_INT 25
 506: PUSH
 507: LD_INT 3
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: PUSH
 514: LD_INT 21
 516: PUSH
 517: LD_INT 1
 519: PUSH
 520: EMPTY
 521: LIST
 522: LIST
 523: PUSH
 524: EMPTY
 525: LIST
 526: LIST
 527: LIST
 528: PUSH
 529: EMPTY
 530: LIST
 531: PPUSH
 532: CALL_OW 69
 536: ST_TO_ADDR
// if filter < mechanics then
 537: LD_VAR 0 2
 541: PUSH
 542: LD_EXP 1
 546: LESS
 547: IFFALSE 565
// begin Wait ( 0 0$03 ) ;
 549: LD_INT 105
 551: PPUSH
 552: CALL_OW 67
// ToSpawn ( i ) ;
 556: LD_VAR 0 1
 560: PPUSH
 561: CALL 409 0 1
// end ; end ;
 565: GO 484
 567: POP
 568: POP
// end ;
 569: PPOPN 2
 571: END
// every 0 0$01 trigger time do var i , filter , filter2 , vehicles ;
 572: LD_EXP 5
 576: IFFALSE 943
 578: GO 580
 580: DISABLE
 581: LD_INT 0
 583: PPUSH
 584: PPUSH
 585: PPUSH
 586: PPUSH
// begin enable ;
 587: ENABLE
// filter2 := FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_not , [ f_side , 0 ] ] , [ f_not , [ f_side , 1 ] ] ] ) ;
 588: LD_ADDR_VAR 0 3
 592: PUSH
 593: LD_INT 21
 595: PUSH
 596: LD_INT 2
 598: PUSH
 599: EMPTY
 600: LIST
 601: LIST
 602: PUSH
 603: LD_INT 3
 605: PUSH
 606: LD_INT 22
 608: PUSH
 609: LD_INT 0
 611: PUSH
 612: EMPTY
 613: LIST
 614: LIST
 615: PUSH
 616: EMPTY
 617: LIST
 618: LIST
 619: PUSH
 620: LD_INT 3
 622: PUSH
 623: LD_INT 22
 625: PUSH
 626: LD_INT 1
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: PUSH
 633: EMPTY
 634: LIST
 635: LIST
 636: PUSH
 637: EMPTY
 638: LIST
 639: LIST
 640: LIST
 641: PPUSH
 642: CALL_OW 69
 646: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_side , 1 ] ] ] ) ;
 647: LD_ADDR_VAR 0 2
 651: PUSH
 652: LD_INT 21
 654: PUSH
 655: LD_INT 1
 657: PUSH
 658: EMPTY
 659: LIST
 660: LIST
 661: PUSH
 662: LD_INT 3
 664: PUSH
 665: LD_INT 54
 667: PUSH
 668: EMPTY
 669: LIST
 670: PUSH
 671: EMPTY
 672: LIST
 673: LIST
 674: PUSH
 675: LD_INT 3
 677: PUSH
 678: LD_INT 22
 680: PUSH
 681: LD_INT 1
 683: PUSH
 684: EMPTY
 685: LIST
 686: LIST
 687: PUSH
 688: EMPTY
 689: LIST
 690: LIST
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: LIST
 696: PPUSH
 697: CALL_OW 69
 701: ST_TO_ADDR
// vehicles := FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 702: LD_ADDR_VAR 0 4
 706: PUSH
 707: LD_INT 21
 709: PUSH
 710: LD_INT 2
 712: PUSH
 713: EMPTY
 714: LIST
 715: LIST
 716: PUSH
 717: LD_INT 58
 719: PUSH
 720: EMPTY
 721: LIST
 722: PUSH
 723: EMPTY
 724: LIST
 725: LIST
 726: PPUSH
 727: CALL_OW 69
 731: ST_TO_ADDR
// if filter and vehicles then
 732: LD_VAR 0 2
 736: PUSH
 737: LD_VAR 0 4
 741: AND
 742: IFFALSE 879
// for i = 1 to filter do
 744: LD_ADDR_VAR 0 1
 748: PUSH
 749: DOUBLE
 750: LD_INT 1
 752: DEC
 753: ST_TO_ADDR
 754: LD_VAR 0 2
 758: PUSH
 759: FOR_TO
 760: IFFALSE 877
// if not HasTask ( filter [ i ] ) and IsOk ( filter [ i ] ) then
 762: LD_VAR 0 2
 766: PUSH
 767: LD_VAR 0 1
 771: ARRAY
 772: PPUSH
 773: CALL_OW 314
 777: NOT
 778: PUSH
 779: LD_VAR 0 2
 783: PUSH
 784: LD_VAR 0 1
 788: ARRAY
 789: PPUSH
 790: CALL_OW 302
 794: AND
 795: IFFALSE 875
// if GetDistUnits ( filter [ i ] , NearestUnitToUnit ( vehicles , filter [ i ] ) ) < 45 then
 797: LD_VAR 0 2
 801: PUSH
 802: LD_VAR 0 1
 806: ARRAY
 807: PPUSH
 808: LD_VAR 0 4
 812: PPUSH
 813: LD_VAR 0 2
 817: PUSH
 818: LD_VAR 0 1
 822: ARRAY
 823: PPUSH
 824: CALL_OW 74
 828: PPUSH
 829: CALL_OW 296
 833: PUSH
 834: LD_INT 45
 836: LESS
 837: IFFALSE 875
// ComEnterUnit ( filter [ i ] , NearestUnitToUnit ( vehicles , filter [ i ] ) ) ;
 839: LD_VAR 0 2
 843: PUSH
 844: LD_VAR 0 1
 848: ARRAY
 849: PPUSH
 850: LD_VAR 0 4
 854: PPUSH
 855: LD_VAR 0 2
 859: PUSH
 860: LD_VAR 0 1
 864: ARRAY
 865: PPUSH
 866: CALL_OW 74
 870: PPUSH
 871: CALL_OW 120
 875: GO 759
 877: POP
 878: POP
// if filter2 then
 879: LD_VAR 0 3
 883: IFFALSE 943
// for i = 1 to filter2 do
 885: LD_ADDR_VAR 0 1
 889: PUSH
 890: DOUBLE
 891: LD_INT 1
 893: DEC
 894: ST_TO_ADDR
 895: LD_VAR 0 3
 899: PUSH
 900: FOR_TO
 901: IFFALSE 941
// if not HasTask ( filter2 [ i ] ) then
 903: LD_VAR 0 3
 907: PUSH
 908: LD_VAR 0 1
 912: ARRAY
 913: PPUSH
 914: CALL_OW 314
 918: NOT
 919: IFFALSE 939
// ComMoveToArea ( filter2 [ i ] , exit_area ) ;
 921: LD_VAR 0 3
 925: PUSH
 926: LD_VAR 0 1
 930: ARRAY
 931: PPUSH
 932: LD_INT 4
 934: PPUSH
 935: CALL_OW 113
 939: GO 900
 941: POP
 942: POP
// end ; end_of_file
 943: PPOPN 4
 945: END
// export function SpawnCar ( chas , area ) ; var i , e , veh , ar_chassis , ru_chassis , us_chassis , ar_weapons , ru_weapons , us_weapons , chassis , engine , weapon ; begin
 946: LD_INT 0
 948: PPUSH
 949: PPUSH
 950: PPUSH
 951: PPUSH
 952: PPUSH
 953: PPUSH
 954: PPUSH
 955: PPUSH
 956: PPUSH
 957: PPUSH
 958: PPUSH
 959: PPUSH
 960: PPUSH
// uc_side := 0 ;
 961: LD_ADDR_OWVAR 20
 965: PUSH
 966: LD_INT 0
 968: ST_TO_ADDR
// uc_nation := Rand ( 1 , 3 ) ;
 969: LD_ADDR_OWVAR 21
 973: PUSH
 974: LD_INT 1
 976: PPUSH
 977: LD_INT 3
 979: PPUSH
 980: CALL_OW 12
 984: ST_TO_ADDR
// ar_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ;
 985: LD_ADDR_VAR 0 7
 989: PUSH
 990: LD_INT 11
 992: PUSH
 993: LD_INT 12
 995: PUSH
 996: LD_INT 13
 998: PUSH
 999: LD_INT 14
1001: PUSH
1002: EMPTY
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: ST_TO_ADDR
// ru_chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ;
1008: LD_ADDR_VAR 0 8
1012: PUSH
1013: LD_INT 21
1015: PUSH
1016: LD_INT 22
1018: PUSH
1019: LD_INT 23
1021: PUSH
1022: LD_INT 24
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: ST_TO_ADDR
// us_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ;
1031: LD_ADDR_VAR 0 9
1035: PUSH
1036: LD_INT 1
1038: PUSH
1039: LD_INT 2
1041: PUSH
1042: LD_INT 3
1044: PUSH
1045: LD_INT 4
1047: PUSH
1048: LD_INT 5
1050: PUSH
1051: EMPTY
1052: LIST
1053: LIST
1054: LIST
1055: LIST
1056: LIST
1057: ST_TO_ADDR
// if chas > 0 then
1058: LD_VAR 0 1
1062: PUSH
1063: LD_INT 0
1065: GREATER
1066: IFFALSE 1080
// vc_chassis := chas else
1068: LD_ADDR_OWVAR 37
1072: PUSH
1073: LD_VAR 0 1
1077: ST_TO_ADDR
1078: GO 1173
// begin case uc_nation of 1 :
1080: LD_OWVAR 21
1084: PUSH
1085: LD_INT 1
1087: DOUBLE
1088: EQUAL
1089: IFTRUE 1093
1091: GO 1106
1093: POP
// chassis := us_chassis ; 2 :
1094: LD_ADDR_VAR 0 13
1098: PUSH
1099: LD_VAR 0 9
1103: ST_TO_ADDR
1104: GO 1149
1106: LD_INT 2
1108: DOUBLE
1109: EQUAL
1110: IFTRUE 1114
1112: GO 1127
1114: POP
// chassis := ar_chassis ; 3 :
1115: LD_ADDR_VAR 0 13
1119: PUSH
1120: LD_VAR 0 7
1124: ST_TO_ADDR
1125: GO 1149
1127: LD_INT 3
1129: DOUBLE
1130: EQUAL
1131: IFTRUE 1135
1133: GO 1148
1135: POP
// chassis := ru_chassis ; end ;
1136: LD_ADDR_VAR 0 13
1140: PUSH
1141: LD_VAR 0 8
1145: ST_TO_ADDR
1146: GO 1149
1148: POP
// vc_chassis := chassis [ Rand ( 1 , chassis ) ] ;
1149: LD_ADDR_OWVAR 37
1153: PUSH
1154: LD_VAR 0 13
1158: PUSH
1159: LD_INT 1
1161: PPUSH
1162: LD_VAR 0 13
1166: PPUSH
1167: CALL_OW 12
1171: ARRAY
1172: ST_TO_ADDR
// end ; if vc_chassis in [ ar_hovercraft , ar_light_trike , us_light_wheeled ] then
1173: LD_OWVAR 37
1177: PUSH
1178: LD_INT 11
1180: PUSH
1181: LD_INT 12
1183: PUSH
1184: LD_INT 1
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: LIST
1191: IN
1192: IFFALSE 1212
// engine := Rand ( 1 , 2 ) else
1194: LD_ADDR_VAR 0 14
1198: PUSH
1199: LD_INT 1
1201: PPUSH
1202: LD_INT 2
1204: PPUSH
1205: CALL_OW 12
1209: ST_TO_ADDR
1210: GO 1324
// begin if not vc_chassis in [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , us_heavy_tracked , us_morphling ] then
1212: LD_OWVAR 37
1216: PUSH
1217: LD_INT 21
1219: PUSH
1220: LD_INT 22
1222: PUSH
1223: LD_INT 23
1225: PUSH
1226: LD_INT 24
1228: PUSH
1229: LD_INT 4
1231: PUSH
1232: LD_INT 5
1234: PUSH
1235: EMPTY
1236: LIST
1237: LIST
1238: LIST
1239: LIST
1240: LIST
1241: LIST
1242: IN
1243: NOT
1244: IFFALSE 1264
// engine := Rand ( 1 , 3 ) else
1246: LD_ADDR_VAR 0 14
1250: PUSH
1251: LD_INT 1
1253: PPUSH
1254: LD_INT 3
1256: PPUSH
1257: CALL_OW 12
1261: ST_TO_ADDR
1262: GO 1280
// e := Rand ( 1 , 2 ) ;
1264: LD_ADDR_VAR 0 5
1268: PUSH
1269: LD_INT 1
1271: PPUSH
1272: LD_INT 2
1274: PPUSH
1275: CALL_OW 12
1279: ST_TO_ADDR
// case e of 1 :
1280: LD_VAR 0 5
1284: PUSH
1285: LD_INT 1
1287: DOUBLE
1288: EQUAL
1289: IFTRUE 1293
1291: GO 1304
1293: POP
// engine := engine_combustion ; 2 :
1294: LD_ADDR_VAR 0 14
1298: PUSH
1299: LD_INT 1
1301: ST_TO_ADDR
1302: GO 1324
1304: LD_INT 2
1306: DOUBLE
1307: EQUAL
1308: IFTRUE 1312
1310: GO 1323
1312: POP
// engine := engine_siberite ; end ;
1313: LD_ADDR_VAR 0 14
1317: PUSH
1318: LD_INT 3
1320: ST_TO_ADDR
1321: GO 1324
1323: POP
// end ; vc_engine := engine ;
1324: LD_ADDR_OWVAR 39
1328: PUSH
1329: LD_VAR 0 14
1333: ST_TO_ADDR
// vc_control := control_manual ;
1334: LD_ADDR_OWVAR 38
1338: PUSH
1339: LD_INT 1
1341: ST_TO_ADDR
// ar_weapons := [ ar_multimissile_ballista , ar_double_machine_gun , ar_light_gun , ar_radar , ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb , ar_flame_thrower ] ;
1342: LD_ADDR_VAR 0 10
1346: PUSH
1347: LD_INT 22
1349: PUSH
1350: LD_INT 24
1352: PUSH
1353: LD_INT 23
1355: PUSH
1356: LD_INT 30
1358: PUSH
1359: LD_INT 25
1361: PUSH
1362: LD_INT 27
1364: PUSH
1365: LD_INT 28
1367: PUSH
1368: LD_INT 29
1370: PUSH
1371: LD_INT 26
1373: PUSH
1374: EMPTY
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: LIST
1382: LIST
1383: LIST
1384: ST_TO_ADDR
// ru_weapons := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , 98 , ru_rocket_launcher , ru_heavy_gun , ru_rocket , ru_bulldozer , ru_time_lapser ] ;
1385: LD_ADDR_VAR 0 11
1389: PUSH
1390: LD_INT 42
1392: PUSH
1393: LD_INT 43
1395: PUSH
1396: LD_INT 44
1398: PUSH
1399: LD_INT 98
1401: PUSH
1402: LD_INT 45
1404: PUSH
1405: LD_INT 46
1407: PUSH
1408: LD_INT 47
1410: PUSH
1411: LD_INT 53
1413: PUSH
1414: LD_INT 49
1416: PUSH
1417: EMPTY
1418: LIST
1419: LIST
1420: LIST
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: LIST
1427: ST_TO_ADDR
// us_weapons := [ us_machine_gun , us_light_gun , us_radar , us_gatling_gun , us_double_gun , us_rocket_launcher , us_laser , us_heavy_gun , us_bulldozer , us_double_laser ] ;
1428: LD_ADDR_VAR 0 12
1432: PUSH
1433: LD_INT 2
1435: PUSH
1436: LD_INT 3
1438: PUSH
1439: LD_INT 11
1441: PUSH
1442: LD_INT 4
1444: PUSH
1445: LD_INT 5
1447: PUSH
1448: LD_INT 7
1450: PUSH
1451: LD_INT 9
1453: PUSH
1454: LD_INT 6
1456: PUSH
1457: LD_INT 14
1459: PUSH
1460: LD_INT 10
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: LIST
1473: LIST
1474: ST_TO_ADDR
// if uc_nation = nation_arabian then
1475: LD_OWVAR 21
1479: PUSH
1480: LD_INT 2
1482: EQUAL
1483: IFFALSE 1550
// begin if vc_chassis in [ ar_hovercraft , ar_light_trike ] then
1485: LD_OWVAR 37
1489: PUSH
1490: LD_INT 11
1492: PUSH
1493: LD_INT 12
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: IN
1500: IFFALSE 1526
// weapon := ar_weapons [ Rand ( 1 , 3 ) ] else
1502: LD_ADDR_VAR 0 15
1506: PUSH
1507: LD_VAR 0 10
1511: PUSH
1512: LD_INT 1
1514: PPUSH
1515: LD_INT 3
1517: PPUSH
1518: CALL_OW 12
1522: ARRAY
1523: ST_TO_ADDR
1524: GO 1550
// weapon := ar_weapons [ Rand ( 1 , ar_weapons ) ] ;
1526: LD_ADDR_VAR 0 15
1530: PUSH
1531: LD_VAR 0 10
1535: PUSH
1536: LD_INT 1
1538: PPUSH
1539: LD_VAR 0 10
1543: PPUSH
1544: CALL_OW 12
1548: ARRAY
1549: ST_TO_ADDR
// end ; if uc_nation = nation_russian then
1550: LD_OWVAR 21
1554: PUSH
1555: LD_INT 3
1557: EQUAL
1558: IFFALSE 1625
// begin if vc_chassis in [ ru_medium_wheeled , ru_medium_tracked ] then
1560: LD_OWVAR 37
1564: PUSH
1565: LD_INT 21
1567: PUSH
1568: LD_INT 22
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: IN
1575: IFFALSE 1601
// weapon := ru_weapons [ Rand ( 1 , 5 ) ] else
1577: LD_ADDR_VAR 0 15
1581: PUSH
1582: LD_VAR 0 11
1586: PUSH
1587: LD_INT 1
1589: PPUSH
1590: LD_INT 5
1592: PPUSH
1593: CALL_OW 12
1597: ARRAY
1598: ST_TO_ADDR
1599: GO 1625
// weapon := ru_weapons [ Rand ( 1 , ru_weapons ) ] ;
1601: LD_ADDR_VAR 0 15
1605: PUSH
1606: LD_VAR 0 11
1610: PUSH
1611: LD_INT 1
1613: PPUSH
1614: LD_VAR 0 11
1618: PPUSH
1619: CALL_OW 12
1623: ARRAY
1624: ST_TO_ADDR
// end ; if uc_nation = nation_american then
1625: LD_OWVAR 21
1629: PUSH
1630: LD_INT 1
1632: EQUAL
1633: IFFALSE 1742
// begin if vc_chassis = us_light_wheeled then
1635: LD_OWVAR 37
1639: PUSH
1640: LD_INT 1
1642: EQUAL
1643: IFFALSE 1667
// weapon := us_weapons [ Rand ( 1 , 3 ) ] ;
1645: LD_ADDR_VAR 0 15
1649: PUSH
1650: LD_VAR 0 12
1654: PUSH
1655: LD_INT 1
1657: PPUSH
1658: LD_INT 3
1660: PPUSH
1661: CALL_OW 12
1665: ARRAY
1666: ST_TO_ADDR
// if vc_chassis in [ us_medium_tracked , us_medium_wheeled ] then
1667: LD_OWVAR 37
1671: PUSH
1672: LD_INT 3
1674: PUSH
1675: LD_INT 2
1677: PUSH
1678: EMPTY
1679: LIST
1680: LIST
1681: IN
1682: IFFALSE 1708
// weapon := us_weapons [ Rand ( 1 , 7 ) ] else
1684: LD_ADDR_VAR 0 15
1688: PUSH
1689: LD_VAR 0 12
1693: PUSH
1694: LD_INT 1
1696: PPUSH
1697: LD_INT 7
1699: PPUSH
1700: CALL_OW 12
1704: ARRAY
1705: ST_TO_ADDR
1706: GO 1742
// if vc_chassis <> us_light_wheeled then
1708: LD_OWVAR 37
1712: PUSH
1713: LD_INT 1
1715: NONEQUAL
1716: IFFALSE 1742
// weapon := us_weapons [ Rand ( 1 , us_weapons ) ] ;
1718: LD_ADDR_VAR 0 15
1722: PUSH
1723: LD_VAR 0 12
1727: PUSH
1728: LD_INT 1
1730: PPUSH
1731: LD_VAR 0 12
1735: PPUSH
1736: CALL_OW 12
1740: ARRAY
1741: ST_TO_ADDR
// end ; vc_weapon := weapon ;
1742: LD_ADDR_OWVAR 40
1746: PUSH
1747: LD_VAR 0 15
1751: ST_TO_ADDR
// veh := CreateVehicle ;
1752: LD_ADDR_VAR 0 6
1756: PUSH
1757: CALL_OW 45
1761: ST_TO_ADDR
// PlaceUnitArea ( veh , area , true ) ;
1762: LD_VAR 0 6
1766: PPUSH
1767: LD_VAR 0 2
1771: PPUSH
1772: LD_INT 1
1774: PPUSH
1775: CALL_OW 49
// end ;
1779: LD_VAR 0 3
1783: RET
// export function SpawnSibRocket ( area ) ; var veh , p ; begin
1784: LD_INT 0
1786: PPUSH
1787: PPUSH
1788: PPUSH
// uc_side := 0 ;
1789: LD_ADDR_OWVAR 20
1793: PUSH
1794: LD_INT 0
1796: ST_TO_ADDR
// p := Rand ( 1 , 2 ) ;
1797: LD_ADDR_VAR 0 4
1801: PUSH
1802: LD_INT 1
1804: PPUSH
1805: LD_INT 2
1807: PPUSH
1808: CALL_OW 12
1812: ST_TO_ADDR
// case p of 1 :
1813: LD_VAR 0 4
1817: PUSH
1818: LD_INT 1
1820: DOUBLE
1821: EQUAL
1822: IFTRUE 1826
1824: GO 1869
1826: POP
// begin uc_nation := nation_american ;
1827: LD_ADDR_OWVAR 21
1831: PUSH
1832: LD_INT 1
1834: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
1835: LD_ADDR_OWVAR 37
1839: PUSH
1840: LD_INT 4
1842: ST_TO_ADDR
// vc_engine := engine_siberite ;
1843: LD_ADDR_OWVAR 39
1847: PUSH
1848: LD_INT 3
1850: ST_TO_ADDR
// vc_control := control_manual ;
1851: LD_ADDR_OWVAR 38
1855: PUSH
1856: LD_INT 1
1858: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
1859: LD_ADDR_OWVAR 40
1863: PUSH
1864: LD_INT 8
1866: ST_TO_ADDR
// end ; 2 :
1867: GO 1921
1869: LD_INT 2
1871: DOUBLE
1872: EQUAL
1873: IFTRUE 1877
1875: GO 1920
1877: POP
// begin uc_nation := nation_russian ;
1878: LD_ADDR_OWVAR 21
1882: PUSH
1883: LD_INT 3
1885: ST_TO_ADDR
// vc_chassis := ru_heavy_tracked ;
1886: LD_ADDR_OWVAR 37
1890: PUSH
1891: LD_INT 24
1893: ST_TO_ADDR
// vc_engine := engine_siberite ;
1894: LD_ADDR_OWVAR 39
1898: PUSH
1899: LD_INT 3
1901: ST_TO_ADDR
// vc_control := control_manual ;
1902: LD_ADDR_OWVAR 38
1906: PUSH
1907: LD_INT 1
1909: ST_TO_ADDR
// vc_weapon := ru_siberium_rocket ;
1910: LD_ADDR_OWVAR 40
1914: PUSH
1915: LD_INT 48
1917: ST_TO_ADDR
// end ; end ;
1918: GO 1921
1920: POP
// veh := CreateVehicle ;
1921: LD_ADDR_VAR 0 3
1925: PUSH
1926: CALL_OW 45
1930: ST_TO_ADDR
// PlaceUnitArea ( veh , area , true ) ;
1931: LD_VAR 0 3
1935: PPUSH
1936: LD_VAR 0 1
1940: PPUSH
1941: LD_INT 1
1943: PPUSH
1944: CALL_OW 49
// end ;
1948: LD_VAR 0 2
1952: RET
// export function ScoreBoard ( veh ) ; var points ; begin
1953: LD_INT 0
1955: PPUSH
1956: PPUSH
// points := 0 ;
1957: LD_ADDR_VAR 0 3
1961: PUSH
1962: LD_INT 0
1964: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_light_trike , us_light_wheeled ] then
1965: LD_VAR 0 1
1969: PPUSH
1970: CALL_OW 265
1974: PUSH
1975: LD_INT 12
1977: PUSH
1978: LD_INT 1
1980: PUSH
1981: EMPTY
1982: LIST
1983: LIST
1984: IN
1985: IFFALSE 2001
// points := points + 10 ;
1987: LD_ADDR_VAR 0 3
1991: PUSH
1992: LD_VAR 0 3
1996: PUSH
1997: LD_INT 10
1999: PLUS
2000: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_medium_trike , ru_medium_wheeled , us_medium_wheeled ] then
2001: LD_VAR 0 1
2005: PPUSH
2006: CALL_OW 265
2010: PUSH
2011: LD_INT 13
2013: PUSH
2014: LD_INT 21
2016: PUSH
2017: LD_INT 2
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: LIST
2024: IN
2025: IFFALSE 2041
// points := points + 15 ;
2027: LD_ADDR_VAR 0 3
2031: PUSH
2032: LD_VAR 0 3
2036: PUSH
2037: LD_INT 15
2039: PLUS
2040: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_half_tracked , ru_medium_tracked , us_medium_tracked ] then
2041: LD_VAR 0 1
2045: PPUSH
2046: CALL_OW 265
2050: PUSH
2051: LD_INT 14
2053: PUSH
2054: LD_INT 22
2056: PUSH
2057: LD_INT 3
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: LIST
2064: IN
2065: IFFALSE 2081
// points := points + 20 ;
2067: LD_ADDR_VAR 0 3
2071: PUSH
2072: LD_VAR 0 3
2076: PUSH
2077: LD_INT 20
2079: PLUS
2080: ST_TO_ADDR
// if GetChassis ( veh ) in [ ru_heavy_wheeled , ru_heavy_tracked , us_heavy_tracked ] then
2081: LD_VAR 0 1
2085: PPUSH
2086: CALL_OW 265
2090: PUSH
2091: LD_INT 23
2093: PUSH
2094: LD_INT 24
2096: PUSH
2097: LD_INT 4
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: LIST
2104: IN
2105: IFFALSE 2121
// points := points + 25 ;
2107: LD_ADDR_VAR 0 3
2111: PUSH
2112: LD_VAR 0 3
2116: PUSH
2117: LD_INT 25
2119: PLUS
2120: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_hovercraft , us_morphling ] then
2121: LD_VAR 0 1
2125: PPUSH
2126: CALL_OW 265
2130: PUSH
2131: LD_INT 11
2133: PUSH
2134: LD_INT 5
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: IN
2141: IFFALSE 2157
// points := points + 30 ;
2143: LD_ADDR_VAR 0 3
2147: PUSH
2148: LD_VAR 0 3
2152: PUSH
2153: LD_INT 30
2155: PLUS
2156: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_combustion ] then
2157: LD_VAR 0 1
2161: PPUSH
2162: CALL_OW 262
2166: PUSH
2167: LD_INT 1
2169: PUSH
2170: EMPTY
2171: LIST
2172: EQUAL
2173: IFFALSE 2189
// points := points + 5 ;
2175: LD_ADDR_VAR 0 3
2179: PUSH
2180: LD_VAR 0 3
2184: PUSH
2185: LD_INT 5
2187: PLUS
2188: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_solar ] then
2189: LD_VAR 0 1
2193: PPUSH
2194: CALL_OW 262
2198: PUSH
2199: LD_INT 2
2201: PUSH
2202: EMPTY
2203: LIST
2204: EQUAL
2205: IFFALSE 2221
// points := points + 15 ;
2207: LD_ADDR_VAR 0 3
2211: PUSH
2212: LD_VAR 0 3
2216: PUSH
2217: LD_INT 15
2219: PLUS
2220: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_siberite ] then
2221: LD_VAR 0 1
2225: PPUSH
2226: CALL_OW 262
2230: PUSH
2231: LD_INT 3
2233: PUSH
2234: EMPTY
2235: LIST
2236: EQUAL
2237: IFFALSE 2253
// points := points + 25 ;
2239: LD_ADDR_VAR 0 3
2243: PUSH
2244: LD_VAR 0 3
2248: PUSH
2249: LD_INT 25
2251: PLUS
2252: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_multimissile_ballista , ar_double_machine_gun , ar_light_gun , ru_heavy_machine_gun , us_machine_gun , us_light_gun ] then
2253: LD_VAR 0 1
2257: PPUSH
2258: CALL_OW 264
2262: PUSH
2263: LD_INT 22
2265: PUSH
2266: LD_INT 24
2268: PUSH
2269: LD_INT 23
2271: PUSH
2272: LD_INT 42
2274: PUSH
2275: LD_INT 2
2277: PUSH
2278: LD_INT 3
2280: PUSH
2281: EMPTY
2282: LIST
2283: LIST
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: IN
2289: IFFALSE 2305
// points := points + 5 ;
2291: LD_ADDR_VAR 0 3
2295: PUSH
2296: LD_VAR 0 3
2300: PUSH
2301: LD_INT 5
2303: PLUS
2304: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_gatling_gun , ar_gun , ru_gatling_gun , ru_gun , us_gatling_gun , us_double_gun ] then
2305: LD_VAR 0 1
2309: PPUSH
2310: CALL_OW 264
2314: PUSH
2315: LD_INT 25
2317: PUSH
2318: LD_INT 27
2320: PUSH
2321: LD_INT 43
2323: PUSH
2324: LD_INT 44
2326: PUSH
2327: LD_INT 4
2329: PUSH
2330: LD_INT 5
2332: PUSH
2333: EMPTY
2334: LIST
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: LIST
2340: IN
2341: IFFALSE 2357
// points := points + 10 ;
2343: LD_ADDR_VAR 0 3
2347: PUSH
2348: LD_VAR 0 3
2352: PUSH
2353: LD_INT 10
2355: PLUS
2356: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher ] then
2357: LD_VAR 0 1
2361: PPUSH
2362: CALL_OW 264
2366: PUSH
2367: LD_INT 28
2369: PUSH
2370: LD_INT 45
2372: PUSH
2373: LD_INT 7
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: LIST
2380: IN
2381: IFFALSE 2397
// points := points + 20 ;
2383: LD_ADDR_VAR 0 3
2387: PUSH
2388: LD_VAR 0 3
2392: PUSH
2393: LD_INT 20
2395: PLUS
2396: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ru_heavy_gun , us_heavy_gun ] then
2397: LD_VAR 0 1
2401: PPUSH
2402: CALL_OW 264
2406: PUSH
2407: LD_INT 46
2409: PUSH
2410: LD_INT 6
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: IN
2417: IFFALSE 2433
// points := points + 25 ;
2419: LD_ADDR_VAR 0 3
2423: PUSH
2424: LD_VAR 0 3
2428: PUSH
2429: LD_INT 25
2431: PLUS
2432: ST_TO_ADDR
// if GetWeapon ( veh ) in [ us_laser , us_radar , ar_radar ] then
2433: LD_VAR 0 1
2437: PPUSH
2438: CALL_OW 264
2442: PUSH
2443: LD_INT 9
2445: PUSH
2446: LD_INT 11
2448: PUSH
2449: LD_INT 30
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: LIST
2456: IN
2457: IFFALSE 2473
// points := points + 30 ;
2459: LD_ADDR_VAR 0 3
2463: PUSH
2464: LD_VAR 0 3
2468: PUSH
2469: LD_INT 30
2471: PLUS
2472: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_selfpropelled_bomb , ru_time_lapser , ru_rocket , us_double_laser ] then
2473: LD_VAR 0 1
2477: PPUSH
2478: CALL_OW 264
2482: PUSH
2483: LD_INT 29
2485: PUSH
2486: LD_INT 49
2488: PUSH
2489: LD_INT 47
2491: PUSH
2492: LD_INT 10
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: LIST
2499: LIST
2500: IN
2501: IFFALSE 2517
// points := points + 50 ;
2503: LD_ADDR_VAR 0 3
2507: PUSH
2508: LD_VAR 0 3
2512: PUSH
2513: LD_INT 50
2515: PLUS
2516: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ru_siberium_rocket , us_siberium_rocket ] then
2517: LD_VAR 0 1
2521: PPUSH
2522: CALL_OW 264
2526: PUSH
2527: LD_INT 48
2529: PUSH
2530: LD_INT 8
2532: PUSH
2533: EMPTY
2534: LIST
2535: LIST
2536: IN
2537: IFFALSE 2553
// points := points + 100 ;
2539: LD_ADDR_VAR 0 3
2543: PUSH
2544: LD_VAR 0 3
2548: PUSH
2549: LD_INT 100
2551: PLUS
2552: ST_TO_ADDR
// result := points ;
2553: LD_ADDR_VAR 0 2
2557: PUSH
2558: LD_VAR 0 3
2562: ST_TO_ADDR
// end ; end_of_file
2563: LD_VAR 0 2
2567: RET
// every 0 0$01 trigger time do var filter , i , side , driver , un ;
2568: LD_EXP 5
2572: IFFALSE 3217
2574: GO 2576
2576: DISABLE
2577: LD_INT 0
2579: PPUSH
2580: PPUSH
2581: PPUSH
2582: PPUSH
2583: PPUSH
// begin enable ;
2584: ENABLE
// if tick < 36 then
2585: LD_OWVAR 1
2589: PUSH
2590: LD_INT 36
2592: LESS
2593: IFFALSE 2605
// SetAreaMapShow ( exit_area , 1 ) ;
2595: LD_INT 4
2597: PPUSH
2598: LD_INT 1
2600: PPUSH
2601: CALL_OW 424
// time := time - 0 0$01 ;
2605: LD_ADDR_EXP 5
2609: PUSH
2610: LD_EXP 5
2614: PUSH
2615: LD_INT 35
2617: MINUS
2618: ST_TO_ADDR
// if time = 0 0$00 then
2619: LD_EXP 5
2623: PUSH
2624: LD_INT 0
2626: EQUAL
2627: IFFALSE 2690
// if p1 > p2 and p1 > p3 and p1 > p4 and p1 > p5 then
2629: LD_EXP 7
2633: PUSH
2634: LD_EXP 8
2638: GREATER
2639: PUSH
2640: LD_EXP 7
2644: PUSH
2645: LD_EXP 9
2649: GREATER
2650: AND
2651: PUSH
2652: LD_EXP 7
2656: PUSH
2657: LD_EXP 10
2661: GREATER
2662: AND
2663: PUSH
2664: LD_EXP 7
2668: PUSH
2669: LD_EXP 11
2673: GREATER
2674: AND
2675: IFFALSE 2683
// YouWin else
2677: CALL_OW 103
2681: GO 2690
// YouLost (  ) ;
2683: LD_STRING 
2685: PPUSH
2686: CALL_OW 104
// filter := FilterUnitsInArea ( exit_area , [ f_type , unit_vehicle ] ) ;
2690: LD_ADDR_VAR 0 1
2694: PUSH
2695: LD_INT 4
2697: PPUSH
2698: LD_INT 21
2700: PUSH
2701: LD_INT 2
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: PPUSH
2708: CALL_OW 70
2712: ST_TO_ADDR
// if filter then
2713: LD_VAR 0 1
2717: IFFALSE 3007
// for i = 1 to filter do
2719: LD_ADDR_VAR 0 2
2723: PUSH
2724: DOUBLE
2725: LD_INT 1
2727: DEC
2728: ST_TO_ADDR
2729: LD_VAR 0 1
2733: PUSH
2734: FOR_TO
2735: IFFALSE 3005
// begin side := GetSide ( filter [ i ] ) ;
2737: LD_ADDR_VAR 0 3
2741: PUSH
2742: LD_VAR 0 1
2746: PUSH
2747: LD_VAR 0 2
2751: ARRAY
2752: PPUSH
2753: CALL_OW 255
2757: ST_TO_ADDR
// driver := IsDrivenBy ( filter [ i ] ) ;
2758: LD_ADDR_VAR 0 4
2762: PUSH
2763: LD_VAR 0 1
2767: PUSH
2768: LD_VAR 0 2
2772: ARRAY
2773: PPUSH
2774: CALL_OW 311
2778: ST_TO_ADDR
// un := filter [ i ] ;
2779: LD_ADDR_VAR 0 5
2783: PUSH
2784: LD_VAR 0 1
2788: PUSH
2789: LD_VAR 0 2
2793: ARRAY
2794: ST_TO_ADDR
// if IsInUnit ( driver ) then
2795: LD_VAR 0 4
2799: PPUSH
2800: CALL_OW 310
2804: IFFALSE 2815
// ComExitVehicle ( driver ) ;
2806: LD_VAR 0 4
2810: PPUSH
2811: CALL_OW 121
// Wait ( 0 0$0.3 ) ;
2815: LD_INT 10
2817: PPUSH
2818: CALL_OW 67
// RemoveUnit ( filter [ i ] ) ;
2822: LD_VAR 0 1
2826: PUSH
2827: LD_VAR 0 2
2831: ARRAY
2832: PPUSH
2833: CALL_OW 64
// case side of 1 :
2837: LD_VAR 0 3
2841: PUSH
2842: LD_INT 1
2844: DOUBLE
2845: EQUAL
2846: IFTRUE 2850
2848: GO 2874
2850: POP
// p1 := p1 + ScoreBoard ( un ) ; 2 :
2851: LD_ADDR_EXP 7
2855: PUSH
2856: LD_EXP 7
2860: PUSH
2861: LD_VAR 0 5
2865: PPUSH
2866: CALL 1953 0 1
2870: PLUS
2871: ST_TO_ADDR
2872: GO 3003
2874: LD_INT 2
2876: DOUBLE
2877: EQUAL
2878: IFTRUE 2882
2880: GO 2906
2882: POP
// p2 := p2 + ScoreBoard ( un ) ; 3 :
2883: LD_ADDR_EXP 8
2887: PUSH
2888: LD_EXP 8
2892: PUSH
2893: LD_VAR 0 5
2897: PPUSH
2898: CALL 1953 0 1
2902: PLUS
2903: ST_TO_ADDR
2904: GO 3003
2906: LD_INT 3
2908: DOUBLE
2909: EQUAL
2910: IFTRUE 2914
2912: GO 2938
2914: POP
// p3 := p3 + ScoreBoard ( un ) ; 4 :
2915: LD_ADDR_EXP 9
2919: PUSH
2920: LD_EXP 9
2924: PUSH
2925: LD_VAR 0 5
2929: PPUSH
2930: CALL 1953 0 1
2934: PLUS
2935: ST_TO_ADDR
2936: GO 3003
2938: LD_INT 4
2940: DOUBLE
2941: EQUAL
2942: IFTRUE 2946
2944: GO 2970
2946: POP
// p4 := p4 + ScoreBoard ( un ) ; 5 :
2947: LD_ADDR_EXP 10
2951: PUSH
2952: LD_EXP 10
2956: PUSH
2957: LD_VAR 0 5
2961: PPUSH
2962: CALL 1953 0 1
2966: PLUS
2967: ST_TO_ADDR
2968: GO 3003
2970: LD_INT 5
2972: DOUBLE
2973: EQUAL
2974: IFTRUE 2978
2976: GO 3002
2978: POP
// p5 := p5 + ScoreBoard ( un ) ; end ;
2979: LD_ADDR_EXP 11
2983: PUSH
2984: LD_EXP 11
2988: PUSH
2989: LD_VAR 0 5
2993: PPUSH
2994: CALL 1953 0 1
2998: PLUS
2999: ST_TO_ADDR
3000: GO 3003
3002: POP
// end ;
3003: GO 2734
3005: POP
3006: POP
// case players of 3 :
3007: LD_EXP 3
3011: PUSH
3012: LD_INT 3
3014: DOUBLE
3015: EQUAL
3016: IFTRUE 3020
3018: GO 3070
3020: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 ] ;
3021: LD_ADDR_OWVAR 47
3025: PUSH
3026: LD_STRING #tick
3028: PUSH
3029: LD_EXP 5
3033: PUSH
3034: LD_STRING #player1
3036: PUSH
3037: LD_EXP 7
3041: PUSH
3042: LD_STRING #player2
3044: PUSH
3045: LD_EXP 8
3049: PUSH
3050: LD_STRING #player3
3052: PUSH
3053: LD_EXP 9
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: LIST
3064: LIST
3065: LIST
3066: LIST
3067: ST_TO_ADDR
// end ; 4 :
3068: GO 3217
3070: LD_INT 4
3072: DOUBLE
3073: EQUAL
3074: IFTRUE 3078
3076: GO 3138
3078: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 , #player4 , p4 ] ;
3079: LD_ADDR_OWVAR 47
3083: PUSH
3084: LD_STRING #tick
3086: PUSH
3087: LD_EXP 5
3091: PUSH
3092: LD_STRING #player1
3094: PUSH
3095: LD_EXP 7
3099: PUSH
3100: LD_STRING #player2
3102: PUSH
3103: LD_EXP 8
3107: PUSH
3108: LD_STRING #player3
3110: PUSH
3111: LD_EXP 9
3115: PUSH
3116: LD_STRING #player4
3118: PUSH
3119: LD_EXP 10
3123: PUSH
3124: EMPTY
3125: LIST
3126: LIST
3127: LIST
3128: LIST
3129: LIST
3130: LIST
3131: LIST
3132: LIST
3133: LIST
3134: LIST
3135: ST_TO_ADDR
// end ; 5 :
3136: GO 3217
3138: LD_INT 5
3140: DOUBLE
3141: EQUAL
3142: IFTRUE 3146
3144: GO 3216
3146: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 , #player4 , p4 , #player5 , p5 ] ;
3147: LD_ADDR_OWVAR 47
3151: PUSH
3152: LD_STRING #tick
3154: PUSH
3155: LD_EXP 5
3159: PUSH
3160: LD_STRING #player1
3162: PUSH
3163: LD_EXP 7
3167: PUSH
3168: LD_STRING #player2
3170: PUSH
3171: LD_EXP 8
3175: PUSH
3176: LD_STRING #player3
3178: PUSH
3179: LD_EXP 9
3183: PUSH
3184: LD_STRING #player4
3186: PUSH
3187: LD_EXP 10
3191: PUSH
3192: LD_STRING #player5
3194: PUSH
3195: LD_EXP 11
3199: PUSH
3200: EMPTY
3201: LIST
3202: LIST
3203: LIST
3204: LIST
3205: LIST
3206: LIST
3207: LIST
3208: LIST
3209: LIST
3210: LIST
3211: LIST
3212: LIST
3213: ST_TO_ADDR
// end ; end ;
3214: GO 3217
3216: POP
// end ;
3217: PPOPN 5
3219: END
// every 0 0$05 trigger time do var chance , p ;
3220: LD_EXP 5
3224: IFFALSE 3371
3226: GO 3228
3228: DISABLE
3229: LD_INT 0
3231: PPUSH
3232: PPUSH
// begin enable ;
3233: ENABLE
// Wait ( Rand ( 0 0$01 , 0 0$06 ) ) ;
3234: LD_INT 35
3236: PPUSH
3237: LD_INT 210
3239: PPUSH
3240: CALL_OW 12
3244: PPUSH
3245: CALL_OW 67
// if FilterAllUnits ( [ f_type , unit_vehicle ] ) < veh_amount then
3249: LD_INT 21
3251: PUSH
3252: LD_INT 2
3254: PUSH
3255: EMPTY
3256: LIST
3257: LIST
3258: PPUSH
3259: CALL_OW 69
3263: PUSH
3264: LD_EXP 6
3268: LESS
3269: IFFALSE 3371
// begin SpawnCar ( false , veh_spawn ) ;
3271: LD_INT 0
3273: PPUSH
3274: LD_INT 5
3276: PPUSH
3277: CALL 946 0 2
// if sib_bomb and FilterAllUnits ( [ f_or , [ [ f_weapon , us_siberium_rocket ] , [ f_weapon , ru_siberium_rocket ] ] ] ) = 0 then
3281: LD_EXP 4
3285: PUSH
3286: LD_INT 2
3288: PUSH
3289: LD_INT 34
3291: PUSH
3292: LD_INT 8
3294: PUSH
3295: EMPTY
3296: LIST
3297: LIST
3298: PUSH
3299: LD_INT 34
3301: PUSH
3302: LD_INT 48
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: PUSH
3309: EMPTY
3310: LIST
3311: LIST
3312: PUSH
3313: EMPTY
3314: LIST
3315: LIST
3316: PPUSH
3317: CALL_OW 69
3321: PUSH
3322: LD_INT 0
3324: EQUAL
3325: AND
3326: IFFALSE 3371
// begin chance := 23 ;
3328: LD_ADDR_VAR 0 1
3332: PUSH
3333: LD_INT 23
3335: ST_TO_ADDR
// p := Rand ( 0 , 100 ) ;
3336: LD_ADDR_VAR 0 2
3340: PUSH
3341: LD_INT 0
3343: PPUSH
3344: LD_INT 100
3346: PPUSH
3347: CALL_OW 12
3351: ST_TO_ADDR
// if p < chance then
3352: LD_VAR 0 2
3356: PUSH
3357: LD_VAR 0 1
3361: LESS
3362: IFFALSE 3371
// SpawnSibRocket ( veh_spawn ) ;
3364: LD_INT 5
3366: PPUSH
3367: CALL 1784 0 1
// end ; end ; end ; end_of_file
3371: PPOPN 2
3373: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
3374: LD_INT 0
3376: PPUSH
3377: PPUSH
3378: PPUSH
3379: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
3380: LD_VAR 0 1
3384: PPUSH
3385: CALL_OW 264
3389: PUSH
3390: LD_EXP 75
3394: EQUAL
3395: IFFALSE 3467
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
3397: LD_INT 68
3399: PPUSH
3400: LD_VAR 0 1
3404: PPUSH
3405: CALL_OW 255
3409: PPUSH
3410: CALL_OW 321
3414: PUSH
3415: LD_INT 2
3417: EQUAL
3418: IFFALSE 3430
// eff := 70 else
3420: LD_ADDR_VAR 0 4
3424: PUSH
3425: LD_INT 70
3427: ST_TO_ADDR
3428: GO 3438
// eff := 30 ;
3430: LD_ADDR_VAR 0 4
3434: PUSH
3435: LD_INT 30
3437: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
3438: LD_VAR 0 1
3442: PPUSH
3443: CALL_OW 250
3447: PPUSH
3448: LD_VAR 0 1
3452: PPUSH
3453: CALL_OW 251
3457: PPUSH
3458: LD_VAR 0 4
3462: PPUSH
3463: CALL_OW 495
// end ; end ;
3467: LD_VAR 0 2
3471: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
3472: LD_INT 0
3474: PPUSH
// end ;
3475: LD_VAR 0 4
3479: RET
// export function SOS_Command ( cmd ) ; begin
3480: LD_INT 0
3482: PPUSH
// end ;
3483: LD_VAR 0 2
3487: RET
// on TargetableSAIL ( cmd , unit , selectedUnit , x , y ) do begin if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
3488: LD_VAR 0 1
3492: PUSH
3493: LD_INT 254
3495: EQUAL
3496: PUSH
3497: LD_VAR 0 2
3501: PPUSH
3502: CALL_OW 264
3506: PUSH
3507: LD_EXP 73
3511: EQUAL
3512: AND
3513: PUSH
3514: LD_VAR 0 3
3518: PPUSH
3519: CALL_OW 263
3523: PUSH
3524: LD_INT 3
3526: EQUAL
3527: AND
3528: IFFALSE 3539
// DestroyUnit ( selectedUnit ) ;
3530: LD_VAR 0 3
3534: PPUSH
3535: CALL_OW 65
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
3539: LD_VAR 0 1
3543: PUSH
3544: LD_INT 255
3546: EQUAL
3547: PUSH
3548: LD_VAR 0 2
3552: PPUSH
3553: CALL_OW 264
3557: PUSH
3558: LD_INT 14
3560: PUSH
3561: LD_INT 53
3563: PUSH
3564: EMPTY
3565: LIST
3566: LIST
3567: IN
3568: AND
3569: PUSH
3570: LD_VAR 0 4
3574: PPUSH
3575: LD_VAR 0 5
3579: PPUSH
3580: CALL_OW 488
3584: AND
3585: IFFALSE 3609
// CutTreeXYR ( unit , x , y , 12 ) ;
3587: LD_VAR 0 2
3591: PPUSH
3592: LD_VAR 0 4
3596: PPUSH
3597: LD_VAR 0 5
3601: PPUSH
3602: LD_INT 12
3604: PPUSH
3605: CALL 3612 0 4
// end ;
3609: PPOPN 5
3611: END
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
3612: LD_INT 0
3614: PPUSH
3615: PPUSH
3616: PPUSH
3617: PPUSH
3618: PPUSH
3619: PPUSH
3620: PPUSH
3621: PPUSH
3622: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
3623: LD_VAR 0 1
3627: NOT
3628: PUSH
3629: LD_VAR 0 2
3633: PPUSH
3634: LD_VAR 0 3
3638: PPUSH
3639: CALL_OW 488
3643: NOT
3644: OR
3645: PUSH
3646: LD_VAR 0 4
3650: NOT
3651: OR
3652: IFFALSE 3656
// exit ;
3654: GO 3996
// list := [ ] ;
3656: LD_ADDR_VAR 0 13
3660: PUSH
3661: EMPTY
3662: ST_TO_ADDR
// if x - r < 0 then
3663: LD_VAR 0 2
3667: PUSH
3668: LD_VAR 0 4
3672: MINUS
3673: PUSH
3674: LD_INT 0
3676: LESS
3677: IFFALSE 3689
// min_x := 0 else
3679: LD_ADDR_VAR 0 7
3683: PUSH
3684: LD_INT 0
3686: ST_TO_ADDR
3687: GO 3705
// min_x := x - r ;
3689: LD_ADDR_VAR 0 7
3693: PUSH
3694: LD_VAR 0 2
3698: PUSH
3699: LD_VAR 0 4
3703: MINUS
3704: ST_TO_ADDR
// if y - r < 0 then
3705: LD_VAR 0 3
3709: PUSH
3710: LD_VAR 0 4
3714: MINUS
3715: PUSH
3716: LD_INT 0
3718: LESS
3719: IFFALSE 3731
// min_y := 0 else
3721: LD_ADDR_VAR 0 8
3725: PUSH
3726: LD_INT 0
3728: ST_TO_ADDR
3729: GO 3747
// min_y := y - r ;
3731: LD_ADDR_VAR 0 8
3735: PUSH
3736: LD_VAR 0 3
3740: PUSH
3741: LD_VAR 0 4
3745: MINUS
3746: ST_TO_ADDR
// max_x := x + r ;
3747: LD_ADDR_VAR 0 9
3751: PUSH
3752: LD_VAR 0 2
3756: PUSH
3757: LD_VAR 0 4
3761: PLUS
3762: ST_TO_ADDR
// max_y := y + r ;
3763: LD_ADDR_VAR 0 10
3767: PUSH
3768: LD_VAR 0 3
3772: PUSH
3773: LD_VAR 0 4
3777: PLUS
3778: ST_TO_ADDR
// for _x = min_x to max_x do
3779: LD_ADDR_VAR 0 11
3783: PUSH
3784: DOUBLE
3785: LD_VAR 0 7
3789: DEC
3790: ST_TO_ADDR
3791: LD_VAR 0 9
3795: PUSH
3796: FOR_TO
3797: IFFALSE 3914
// for _y = min_y to max_y do
3799: LD_ADDR_VAR 0 12
3803: PUSH
3804: DOUBLE
3805: LD_VAR 0 8
3809: DEC
3810: ST_TO_ADDR
3811: LD_VAR 0 10
3815: PUSH
3816: FOR_TO
3817: IFFALSE 3910
// begin if not ValidHex ( _x , _y ) then
3819: LD_VAR 0 11
3823: PPUSH
3824: LD_VAR 0 12
3828: PPUSH
3829: CALL_OW 488
3833: NOT
3834: IFFALSE 3838
// continue ;
3836: GO 3816
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
3838: LD_VAR 0 11
3842: PPUSH
3843: LD_VAR 0 12
3847: PPUSH
3848: CALL_OW 351
3852: PUSH
3853: LD_VAR 0 11
3857: PPUSH
3858: LD_VAR 0 12
3862: PPUSH
3863: CALL_OW 554
3867: AND
3868: IFFALSE 3908
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
3870: LD_ADDR_VAR 0 13
3874: PUSH
3875: LD_VAR 0 13
3879: PPUSH
3880: LD_VAR 0 13
3884: PUSH
3885: LD_INT 1
3887: PLUS
3888: PPUSH
3889: LD_VAR 0 11
3893: PUSH
3894: LD_VAR 0 12
3898: PUSH
3899: EMPTY
3900: LIST
3901: LIST
3902: PPUSH
3903: CALL_OW 2
3907: ST_TO_ADDR
// end ;
3908: GO 3816
3910: POP
3911: POP
3912: GO 3796
3914: POP
3915: POP
// if not list then
3916: LD_VAR 0 13
3920: NOT
3921: IFFALSE 3925
// exit ;
3923: GO 3996
// for i in list do
3925: LD_ADDR_VAR 0 6
3929: PUSH
3930: LD_VAR 0 13
3934: PUSH
3935: FOR_IN
3936: IFFALSE 3994
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
3938: LD_VAR 0 1
3942: PPUSH
3943: LD_STRING M
3945: PUSH
3946: LD_VAR 0 6
3950: PUSH
3951: LD_INT 1
3953: ARRAY
3954: PUSH
3955: LD_VAR 0 6
3959: PUSH
3960: LD_INT 2
3962: ARRAY
3963: PUSH
3964: LD_INT 0
3966: PUSH
3967: LD_INT 0
3969: PUSH
3970: LD_INT 0
3972: PUSH
3973: LD_INT 0
3975: PUSH
3976: EMPTY
3977: LIST
3978: LIST
3979: LIST
3980: LIST
3981: LIST
3982: LIST
3983: LIST
3984: PUSH
3985: EMPTY
3986: LIST
3987: PPUSH
3988: CALL_OW 447
3992: GO 3935
3994: POP
3995: POP
// end ;
3996: LD_VAR 0 5
4000: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist ; every 0 0$1 trigger not initHack do
4001: LD_EXP 12
4005: NOT
4006: IFFALSE 4049
4008: GO 4010
4010: DISABLE
// begin initHack := true ;
4011: LD_ADDR_EXP 12
4015: PUSH
4016: LD_INT 1
4018: ST_TO_ADDR
// hackTanks := [ ] ;
4019: LD_ADDR_EXP 13
4023: PUSH
4024: EMPTY
4025: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
4026: LD_ADDR_EXP 14
4030: PUSH
4031: EMPTY
4032: ST_TO_ADDR
// hackLimit := 3 ;
4033: LD_ADDR_EXP 15
4037: PUSH
4038: LD_INT 3
4040: ST_TO_ADDR
// hackDist := 12 ;
4041: LD_ADDR_EXP 16
4045: PUSH
4046: LD_INT 12
4048: ST_TO_ADDR
// end ;
4049: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
4050: LD_EXP 12
4054: PUSH
4055: LD_INT 34
4057: PUSH
4058: LD_EXP 73
4062: PUSH
4063: EMPTY
4064: LIST
4065: LIST
4066: PPUSH
4067: CALL_OW 69
4071: AND
4072: IFFALSE 4301
4074: GO 4076
4076: DISABLE
4077: LD_INT 0
4079: PPUSH
4080: PPUSH
// begin enable ;
4081: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
4082: LD_ADDR_VAR 0 1
4086: PUSH
4087: LD_INT 34
4089: PUSH
4090: LD_EXP 73
4094: PUSH
4095: EMPTY
4096: LIST
4097: LIST
4098: PPUSH
4099: CALL_OW 69
4103: PUSH
4104: FOR_IN
4105: IFFALSE 4299
// begin if not i in hackTanks then
4107: LD_VAR 0 1
4111: PUSH
4112: LD_EXP 13
4116: IN
4117: NOT
4118: IFFALSE 4175
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
4120: LD_ADDR_EXP 13
4124: PUSH
4125: LD_EXP 13
4129: PPUSH
4130: LD_EXP 13
4134: PUSH
4135: LD_INT 1
4137: PLUS
4138: PPUSH
4139: LD_VAR 0 1
4143: PPUSH
4144: CALL_OW 1
4148: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
4149: LD_ADDR_EXP 14
4153: PUSH
4154: LD_EXP 14
4158: PPUSH
4159: LD_EXP 14
4163: PUSH
4164: LD_INT 1
4166: PLUS
4167: PPUSH
4168: EMPTY
4169: PPUSH
4170: CALL_OW 1
4174: ST_TO_ADDR
// end ; if not IsOk ( i ) then
4175: LD_VAR 0 1
4179: PPUSH
4180: CALL_OW 302
4184: NOT
4185: IFFALSE 4198
// begin HackUnlinkAll ( i ) ;
4187: LD_VAR 0 1
4191: PPUSH
4192: CALL 4304 0 1
// continue ;
4196: GO 4104
// end ; HackCheckCapturedStatus ( i ) ;
4198: LD_VAR 0 1
4202: PPUSH
4203: CALL 4722 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
4207: LD_ADDR_VAR 0 2
4211: PUSH
4212: LD_INT 81
4214: PUSH
4215: LD_VAR 0 1
4219: PPUSH
4220: CALL_OW 255
4224: PUSH
4225: EMPTY
4226: LIST
4227: LIST
4228: PUSH
4229: LD_INT 33
4231: PUSH
4232: LD_INT 3
4234: PUSH
4235: EMPTY
4236: LIST
4237: LIST
4238: PUSH
4239: LD_INT 91
4241: PUSH
4242: LD_VAR 0 1
4246: PUSH
4247: LD_EXP 16
4251: PUSH
4252: EMPTY
4253: LIST
4254: LIST
4255: LIST
4256: PUSH
4257: LD_INT 50
4259: PUSH
4260: EMPTY
4261: LIST
4262: PUSH
4263: EMPTY
4264: LIST
4265: LIST
4266: LIST
4267: LIST
4268: PPUSH
4269: CALL_OW 69
4273: ST_TO_ADDR
// if not tmp then
4274: LD_VAR 0 2
4278: NOT
4279: IFFALSE 4283
// continue ;
4281: GO 4104
// HackLink ( i , tmp ) ;
4283: LD_VAR 0 1
4287: PPUSH
4288: LD_VAR 0 2
4292: PPUSH
4293: CALL 4440 0 2
// end ;
4297: GO 4104
4299: POP
4300: POP
// end ;
4301: PPOPN 2
4303: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
4304: LD_INT 0
4306: PPUSH
4307: PPUSH
4308: PPUSH
// if not hack in hackTanks then
4309: LD_VAR 0 1
4313: PUSH
4314: LD_EXP 13
4318: IN
4319: NOT
4320: IFFALSE 4324
// exit ;
4322: GO 4435
// index := GetElementIndex ( hackTanks , hack ) ;
4324: LD_ADDR_VAR 0 4
4328: PUSH
4329: LD_EXP 13
4333: PPUSH
4334: LD_VAR 0 1
4338: PPUSH
4339: CALL 20898 0 2
4343: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
4344: LD_EXP 14
4348: PUSH
4349: LD_VAR 0 4
4353: ARRAY
4354: IFFALSE 4435
// begin for i in hackTanksCaptured [ index ] do
4356: LD_ADDR_VAR 0 3
4360: PUSH
4361: LD_EXP 14
4365: PUSH
4366: LD_VAR 0 4
4370: ARRAY
4371: PUSH
4372: FOR_IN
4373: IFFALSE 4399
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
4375: LD_VAR 0 3
4379: PUSH
4380: LD_INT 1
4382: ARRAY
4383: PPUSH
4384: LD_VAR 0 3
4388: PUSH
4389: LD_INT 2
4391: ARRAY
4392: PPUSH
4393: CALL_OW 235
4397: GO 4372
4399: POP
4400: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
4401: LD_ADDR_EXP 14
4405: PUSH
4406: LD_EXP 14
4410: PPUSH
4411: LD_VAR 0 4
4415: PPUSH
4416: EMPTY
4417: PPUSH
4418: CALL_OW 1
4422: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
4423: LD_VAR 0 1
4427: PPUSH
4428: LD_INT 0
4430: PPUSH
4431: CALL_OW 505
// end ; end ;
4435: LD_VAR 0 2
4439: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
4440: LD_INT 0
4442: PPUSH
4443: PPUSH
4444: PPUSH
// if not hack in hackTanks or not vehicles then
4445: LD_VAR 0 1
4449: PUSH
4450: LD_EXP 13
4454: IN
4455: NOT
4456: PUSH
4457: LD_VAR 0 2
4461: NOT
4462: OR
4463: IFFALSE 4467
// exit ;
4465: GO 4717
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
4467: LD_ADDR_VAR 0 2
4471: PUSH
4472: LD_VAR 0 1
4476: PPUSH
4477: LD_VAR 0 2
4481: PPUSH
4482: LD_INT 1
4484: PPUSH
4485: LD_INT 1
4487: PPUSH
4488: CALL 21548 0 4
4492: ST_TO_ADDR
// display_strings := vehicles ;
4493: LD_ADDR_OWVAR 47
4497: PUSH
4498: LD_VAR 0 2
4502: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
4503: LD_ADDR_VAR 0 5
4507: PUSH
4508: LD_EXP 13
4512: PPUSH
4513: LD_VAR 0 1
4517: PPUSH
4518: CALL 20898 0 2
4522: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
4523: LD_EXP 14
4527: PUSH
4528: LD_VAR 0 5
4532: ARRAY
4533: PUSH
4534: LD_EXP 15
4538: LESS
4539: IFFALSE 4693
// begin for i := 1 to vehicles do
4541: LD_ADDR_VAR 0 4
4545: PUSH
4546: DOUBLE
4547: LD_INT 1
4549: DEC
4550: ST_TO_ADDR
4551: LD_VAR 0 2
4555: PUSH
4556: FOR_TO
4557: IFFALSE 4691
// begin if hackTanksCaptured [ index ] = hackLimit then
4559: LD_EXP 14
4563: PUSH
4564: LD_VAR 0 5
4568: ARRAY
4569: PUSH
4570: LD_EXP 15
4574: EQUAL
4575: IFFALSE 4579
// break ;
4577: GO 4691
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
4579: LD_ADDR_EXP 14
4583: PUSH
4584: LD_EXP 14
4588: PPUSH
4589: LD_VAR 0 5
4593: PUSH
4594: LD_EXP 14
4598: PUSH
4599: LD_VAR 0 5
4603: ARRAY
4604: PUSH
4605: LD_INT 1
4607: PLUS
4608: PUSH
4609: EMPTY
4610: LIST
4611: LIST
4612: PPUSH
4613: LD_VAR 0 2
4617: PUSH
4618: LD_VAR 0 4
4622: ARRAY
4623: PUSH
4624: LD_VAR 0 2
4628: PUSH
4629: LD_VAR 0 4
4633: ARRAY
4634: PPUSH
4635: CALL_OW 255
4639: PUSH
4640: EMPTY
4641: LIST
4642: LIST
4643: PPUSH
4644: CALL 21113 0 3
4648: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
4649: LD_VAR 0 2
4653: PUSH
4654: LD_VAR 0 4
4658: ARRAY
4659: PPUSH
4660: LD_VAR 0 1
4664: PPUSH
4665: CALL_OW 255
4669: PPUSH
4670: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
4674: LD_VAR 0 2
4678: PUSH
4679: LD_VAR 0 4
4683: ARRAY
4684: PPUSH
4685: CALL_OW 141
// end ;
4689: GO 4556
4691: POP
4692: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
4693: LD_VAR 0 1
4697: PPUSH
4698: LD_EXP 14
4702: PUSH
4703: LD_VAR 0 5
4707: ARRAY
4708: PUSH
4709: LD_INT 0
4711: PLUS
4712: PPUSH
4713: CALL_OW 505
// end ;
4717: LD_VAR 0 3
4721: RET
// export function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
4722: LD_INT 0
4724: PPUSH
4725: PPUSH
4726: PPUSH
4727: PPUSH
// if not hack in hackTanks then
4728: LD_VAR 0 1
4732: PUSH
4733: LD_EXP 13
4737: IN
4738: NOT
4739: IFFALSE 4743
// exit ;
4741: GO 4983
// index := GetElementIndex ( hackTanks , hack ) ;
4743: LD_ADDR_VAR 0 4
4747: PUSH
4748: LD_EXP 13
4752: PPUSH
4753: LD_VAR 0 1
4757: PPUSH
4758: CALL 20898 0 2
4762: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
4763: LD_ADDR_VAR 0 3
4767: PUSH
4768: DOUBLE
4769: LD_EXP 14
4773: PUSH
4774: LD_VAR 0 4
4778: ARRAY
4779: INC
4780: ST_TO_ADDR
4781: LD_INT 1
4783: PUSH
4784: FOR_DOWNTO
4785: IFFALSE 4957
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
4787: LD_ADDR_VAR 0 5
4791: PUSH
4792: LD_EXP 14
4796: PUSH
4797: LD_VAR 0 4
4801: ARRAY
4802: PUSH
4803: LD_VAR 0 3
4807: ARRAY
4808: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
4809: LD_VAR 0 5
4813: PUSH
4814: LD_INT 1
4816: ARRAY
4817: PPUSH
4818: CALL_OW 302
4822: NOT
4823: PUSH
4824: LD_VAR 0 5
4828: PUSH
4829: LD_INT 1
4831: ARRAY
4832: PPUSH
4833: CALL_OW 255
4837: PUSH
4838: LD_VAR 0 1
4842: PPUSH
4843: CALL_OW 255
4847: NONEQUAL
4848: OR
4849: IFFALSE 4955
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
4851: LD_VAR 0 5
4855: PUSH
4856: LD_INT 1
4858: ARRAY
4859: PPUSH
4860: CALL_OW 305
4864: PUSH
4865: LD_VAR 0 5
4869: PUSH
4870: LD_INT 1
4872: ARRAY
4873: PPUSH
4874: CALL_OW 255
4878: PUSH
4879: LD_VAR 0 1
4883: PPUSH
4884: CALL_OW 255
4888: EQUAL
4889: AND
4890: IFFALSE 4914
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
4892: LD_VAR 0 5
4896: PUSH
4897: LD_INT 1
4899: ARRAY
4900: PPUSH
4901: LD_VAR 0 5
4905: PUSH
4906: LD_INT 2
4908: ARRAY
4909: PPUSH
4910: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
4914: LD_ADDR_EXP 14
4918: PUSH
4919: LD_EXP 14
4923: PPUSH
4924: LD_VAR 0 4
4928: PPUSH
4929: LD_EXP 14
4933: PUSH
4934: LD_VAR 0 4
4938: ARRAY
4939: PPUSH
4940: LD_VAR 0 3
4944: PPUSH
4945: CALL_OW 3
4949: PPUSH
4950: CALL_OW 1
4954: ST_TO_ADDR
// end ; end ;
4955: GO 4784
4957: POP
4958: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
4959: LD_VAR 0 1
4963: PPUSH
4964: LD_EXP 14
4968: PUSH
4969: LD_VAR 0 4
4973: ARRAY
4974: PUSH
4975: LD_INT 0
4977: PLUS
4978: PPUSH
4979: CALL_OW 505
// end ; end_of_file
4983: LD_VAR 0 2
4987: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
4988: GO 4990
4990: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
4991: LD_STRING initStreamRollete();
4993: PPUSH
4994: CALL_OW 559
// InitStreamMode ;
4998: CALL 5007 0 0
// DefineStreamItems ( ) ;
5002: CALL 5447 0 0
// end ;
5006: END
// function InitStreamMode ; begin
5007: LD_INT 0
5009: PPUSH
// streamModeActive := false ;
5010: LD_ADDR_EXP 17
5014: PUSH
5015: LD_INT 0
5017: ST_TO_ADDR
// normalCounter := 36 ;
5018: LD_ADDR_EXP 18
5022: PUSH
5023: LD_INT 36
5025: ST_TO_ADDR
// hardcoreCounter := 16 ;
5026: LD_ADDR_EXP 19
5030: PUSH
5031: LD_INT 16
5033: ST_TO_ADDR
// sRocket := false ;
5034: LD_ADDR_EXP 22
5038: PUSH
5039: LD_INT 0
5041: ST_TO_ADDR
// sSpeed := false ;
5042: LD_ADDR_EXP 21
5046: PUSH
5047: LD_INT 0
5049: ST_TO_ADDR
// sEngine := false ;
5050: LD_ADDR_EXP 23
5054: PUSH
5055: LD_INT 0
5057: ST_TO_ADDR
// sSpec := false ;
5058: LD_ADDR_EXP 20
5062: PUSH
5063: LD_INT 0
5065: ST_TO_ADDR
// sLevel := false ;
5066: LD_ADDR_EXP 24
5070: PUSH
5071: LD_INT 0
5073: ST_TO_ADDR
// sArmoury := false ;
5074: LD_ADDR_EXP 25
5078: PUSH
5079: LD_INT 0
5081: ST_TO_ADDR
// sRadar := false ;
5082: LD_ADDR_EXP 26
5086: PUSH
5087: LD_INT 0
5089: ST_TO_ADDR
// sBunker := false ;
5090: LD_ADDR_EXP 27
5094: PUSH
5095: LD_INT 0
5097: ST_TO_ADDR
// sHack := false ;
5098: LD_ADDR_EXP 28
5102: PUSH
5103: LD_INT 0
5105: ST_TO_ADDR
// sFire := false ;
5106: LD_ADDR_EXP 29
5110: PUSH
5111: LD_INT 0
5113: ST_TO_ADDR
// sRefresh := false ;
5114: LD_ADDR_EXP 30
5118: PUSH
5119: LD_INT 0
5121: ST_TO_ADDR
// sExp := false ;
5122: LD_ADDR_EXP 31
5126: PUSH
5127: LD_INT 0
5129: ST_TO_ADDR
// sDepot := false ;
5130: LD_ADDR_EXP 32
5134: PUSH
5135: LD_INT 0
5137: ST_TO_ADDR
// sFlag := false ;
5138: LD_ADDR_EXP 33
5142: PUSH
5143: LD_INT 0
5145: ST_TO_ADDR
// sKamikadze := false ;
5146: LD_ADDR_EXP 41
5150: PUSH
5151: LD_INT 0
5153: ST_TO_ADDR
// sTroll := false ;
5154: LD_ADDR_EXP 42
5158: PUSH
5159: LD_INT 0
5161: ST_TO_ADDR
// sSlow := false ;
5162: LD_ADDR_EXP 43
5166: PUSH
5167: LD_INT 0
5169: ST_TO_ADDR
// sLack := false ;
5170: LD_ADDR_EXP 44
5174: PUSH
5175: LD_INT 0
5177: ST_TO_ADDR
// sTank := false ;
5178: LD_ADDR_EXP 46
5182: PUSH
5183: LD_INT 0
5185: ST_TO_ADDR
// sRemote := false ;
5186: LD_ADDR_EXP 47
5190: PUSH
5191: LD_INT 0
5193: ST_TO_ADDR
// sPowell := false ;
5194: LD_ADDR_EXP 48
5198: PUSH
5199: LD_INT 0
5201: ST_TO_ADDR
// sTeleport := false ;
5202: LD_ADDR_EXP 51
5206: PUSH
5207: LD_INT 0
5209: ST_TO_ADDR
// sOilTower := false ;
5210: LD_ADDR_EXP 53
5214: PUSH
5215: LD_INT 0
5217: ST_TO_ADDR
// sShovel := false ;
5218: LD_ADDR_EXP 54
5222: PUSH
5223: LD_INT 0
5225: ST_TO_ADDR
// sSheik := false ;
5226: LD_ADDR_EXP 55
5230: PUSH
5231: LD_INT 0
5233: ST_TO_ADDR
// sEarthquake := false ;
5234: LD_ADDR_EXP 57
5238: PUSH
5239: LD_INT 0
5241: ST_TO_ADDR
// sAI := false ;
5242: LD_ADDR_EXP 58
5246: PUSH
5247: LD_INT 0
5249: ST_TO_ADDR
// sCargo := false ;
5250: LD_ADDR_EXP 61
5254: PUSH
5255: LD_INT 0
5257: ST_TO_ADDR
// sDLaser := false ;
5258: LD_ADDR_EXP 62
5262: PUSH
5263: LD_INT 0
5265: ST_TO_ADDR
// sExchange := false ;
5266: LD_ADDR_EXP 63
5270: PUSH
5271: LD_INT 0
5273: ST_TO_ADDR
// sFac := false ;
5274: LD_ADDR_EXP 64
5278: PUSH
5279: LD_INT 0
5281: ST_TO_ADDR
// sPower := false ;
5282: LD_ADDR_EXP 65
5286: PUSH
5287: LD_INT 0
5289: ST_TO_ADDR
// sRandom := false ;
5290: LD_ADDR_EXP 66
5294: PUSH
5295: LD_INT 0
5297: ST_TO_ADDR
// sShield := false ;
5298: LD_ADDR_EXP 67
5302: PUSH
5303: LD_INT 0
5305: ST_TO_ADDR
// sTime := false ;
5306: LD_ADDR_EXP 68
5310: PUSH
5311: LD_INT 0
5313: ST_TO_ADDR
// sTools := false ;
5314: LD_ADDR_EXP 69
5318: PUSH
5319: LD_INT 0
5321: ST_TO_ADDR
// sSold := false ;
5322: LD_ADDR_EXP 34
5326: PUSH
5327: LD_INT 0
5329: ST_TO_ADDR
// sDiff := false ;
5330: LD_ADDR_EXP 35
5334: PUSH
5335: LD_INT 0
5337: ST_TO_ADDR
// sFog := false ;
5338: LD_ADDR_EXP 38
5342: PUSH
5343: LD_INT 0
5345: ST_TO_ADDR
// sReset := false ;
5346: LD_ADDR_EXP 39
5350: PUSH
5351: LD_INT 0
5353: ST_TO_ADDR
// sSun := false ;
5354: LD_ADDR_EXP 40
5358: PUSH
5359: LD_INT 0
5361: ST_TO_ADDR
// sTiger := false ;
5362: LD_ADDR_EXP 36
5366: PUSH
5367: LD_INT 0
5369: ST_TO_ADDR
// sBomb := false ;
5370: LD_ADDR_EXP 37
5374: PUSH
5375: LD_INT 0
5377: ST_TO_ADDR
// sWound := false ;
5378: LD_ADDR_EXP 45
5382: PUSH
5383: LD_INT 0
5385: ST_TO_ADDR
// sBetray := false ;
5386: LD_ADDR_EXP 49
5390: PUSH
5391: LD_INT 0
5393: ST_TO_ADDR
// sContamin := false ;
5394: LD_ADDR_EXP 50
5398: PUSH
5399: LD_INT 0
5401: ST_TO_ADDR
// sOil := false ;
5402: LD_ADDR_EXP 52
5406: PUSH
5407: LD_INT 0
5409: ST_TO_ADDR
// sStu := false ;
5410: LD_ADDR_EXP 56
5414: PUSH
5415: LD_INT 0
5417: ST_TO_ADDR
// sBazooka := false ;
5418: LD_ADDR_EXP 59
5422: PUSH
5423: LD_INT 0
5425: ST_TO_ADDR
// sMortar := false ;
5426: LD_ADDR_EXP 60
5430: PUSH
5431: LD_INT 0
5433: ST_TO_ADDR
// sRanger := false ;
5434: LD_ADDR_EXP 70
5438: PUSH
5439: LD_INT 0
5441: ST_TO_ADDR
// end ;
5442: LD_VAR 0 1
5446: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
5447: LD_INT 0
5449: PPUSH
5450: PPUSH
5451: PPUSH
5452: PPUSH
5453: PPUSH
// result := [ ] ;
5454: LD_ADDR_VAR 0 1
5458: PUSH
5459: EMPTY
5460: ST_TO_ADDR
// if campaign_id = 1 then
5461: LD_OWVAR 69
5465: PUSH
5466: LD_INT 1
5468: EQUAL
5469: IFFALSE 8407
// begin case mission_number of 1 :
5471: LD_OWVAR 70
5475: PUSH
5476: LD_INT 1
5478: DOUBLE
5479: EQUAL
5480: IFTRUE 5484
5482: GO 5548
5484: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
5485: LD_ADDR_VAR 0 1
5489: PUSH
5490: LD_INT 2
5492: PUSH
5493: LD_INT 4
5495: PUSH
5496: LD_INT 11
5498: PUSH
5499: LD_INT 12
5501: PUSH
5502: LD_INT 15
5504: PUSH
5505: LD_INT 16
5507: PUSH
5508: LD_INT 22
5510: PUSH
5511: LD_INT 23
5513: PUSH
5514: LD_INT 26
5516: PUSH
5517: EMPTY
5518: LIST
5519: LIST
5520: LIST
5521: LIST
5522: LIST
5523: LIST
5524: LIST
5525: LIST
5526: LIST
5527: PUSH
5528: LD_INT 101
5530: PUSH
5531: LD_INT 102
5533: PUSH
5534: LD_INT 106
5536: PUSH
5537: EMPTY
5538: LIST
5539: LIST
5540: LIST
5541: PUSH
5542: EMPTY
5543: LIST
5544: LIST
5545: ST_TO_ADDR
5546: GO 8405
5548: LD_INT 2
5550: DOUBLE
5551: EQUAL
5552: IFTRUE 5556
5554: GO 5628
5556: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
5557: LD_ADDR_VAR 0 1
5561: PUSH
5562: LD_INT 2
5564: PUSH
5565: LD_INT 4
5567: PUSH
5568: LD_INT 11
5570: PUSH
5571: LD_INT 12
5573: PUSH
5574: LD_INT 15
5576: PUSH
5577: LD_INT 16
5579: PUSH
5580: LD_INT 22
5582: PUSH
5583: LD_INT 23
5585: PUSH
5586: LD_INT 26
5588: PUSH
5589: EMPTY
5590: LIST
5591: LIST
5592: LIST
5593: LIST
5594: LIST
5595: LIST
5596: LIST
5597: LIST
5598: LIST
5599: PUSH
5600: LD_INT 101
5602: PUSH
5603: LD_INT 102
5605: PUSH
5606: LD_INT 105
5608: PUSH
5609: LD_INT 106
5611: PUSH
5612: LD_INT 108
5614: PUSH
5615: EMPTY
5616: LIST
5617: LIST
5618: LIST
5619: LIST
5620: LIST
5621: PUSH
5622: EMPTY
5623: LIST
5624: LIST
5625: ST_TO_ADDR
5626: GO 8405
5628: LD_INT 3
5630: DOUBLE
5631: EQUAL
5632: IFTRUE 5636
5634: GO 5712
5636: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
5637: LD_ADDR_VAR 0 1
5641: PUSH
5642: LD_INT 2
5644: PUSH
5645: LD_INT 4
5647: PUSH
5648: LD_INT 5
5650: PUSH
5651: LD_INT 11
5653: PUSH
5654: LD_INT 12
5656: PUSH
5657: LD_INT 15
5659: PUSH
5660: LD_INT 16
5662: PUSH
5663: LD_INT 22
5665: PUSH
5666: LD_INT 26
5668: PUSH
5669: LD_INT 36
5671: PUSH
5672: EMPTY
5673: LIST
5674: LIST
5675: LIST
5676: LIST
5677: LIST
5678: LIST
5679: LIST
5680: LIST
5681: LIST
5682: LIST
5683: PUSH
5684: LD_INT 101
5686: PUSH
5687: LD_INT 102
5689: PUSH
5690: LD_INT 105
5692: PUSH
5693: LD_INT 106
5695: PUSH
5696: LD_INT 108
5698: PUSH
5699: EMPTY
5700: LIST
5701: LIST
5702: LIST
5703: LIST
5704: LIST
5705: PUSH
5706: EMPTY
5707: LIST
5708: LIST
5709: ST_TO_ADDR
5710: GO 8405
5712: LD_INT 4
5714: DOUBLE
5715: EQUAL
5716: IFTRUE 5720
5718: GO 5804
5720: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
5721: LD_ADDR_VAR 0 1
5725: PUSH
5726: LD_INT 2
5728: PUSH
5729: LD_INT 4
5731: PUSH
5732: LD_INT 5
5734: PUSH
5735: LD_INT 8
5737: PUSH
5738: LD_INT 11
5740: PUSH
5741: LD_INT 12
5743: PUSH
5744: LD_INT 15
5746: PUSH
5747: LD_INT 16
5749: PUSH
5750: LD_INT 22
5752: PUSH
5753: LD_INT 23
5755: PUSH
5756: LD_INT 26
5758: PUSH
5759: LD_INT 36
5761: PUSH
5762: EMPTY
5763: LIST
5764: LIST
5765: LIST
5766: LIST
5767: LIST
5768: LIST
5769: LIST
5770: LIST
5771: LIST
5772: LIST
5773: LIST
5774: LIST
5775: PUSH
5776: LD_INT 101
5778: PUSH
5779: LD_INT 102
5781: PUSH
5782: LD_INT 105
5784: PUSH
5785: LD_INT 106
5787: PUSH
5788: LD_INT 108
5790: PUSH
5791: EMPTY
5792: LIST
5793: LIST
5794: LIST
5795: LIST
5796: LIST
5797: PUSH
5798: EMPTY
5799: LIST
5800: LIST
5801: ST_TO_ADDR
5802: GO 8405
5804: LD_INT 5
5806: DOUBLE
5807: EQUAL
5808: IFTRUE 5812
5810: GO 5912
5812: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
5813: LD_ADDR_VAR 0 1
5817: PUSH
5818: LD_INT 2
5820: PUSH
5821: LD_INT 4
5823: PUSH
5824: LD_INT 5
5826: PUSH
5827: LD_INT 6
5829: PUSH
5830: LD_INT 8
5832: PUSH
5833: LD_INT 11
5835: PUSH
5836: LD_INT 12
5838: PUSH
5839: LD_INT 15
5841: PUSH
5842: LD_INT 16
5844: PUSH
5845: LD_INT 22
5847: PUSH
5848: LD_INT 23
5850: PUSH
5851: LD_INT 25
5853: PUSH
5854: LD_INT 26
5856: PUSH
5857: LD_INT 36
5859: PUSH
5860: EMPTY
5861: LIST
5862: LIST
5863: LIST
5864: LIST
5865: LIST
5866: LIST
5867: LIST
5868: LIST
5869: LIST
5870: LIST
5871: LIST
5872: LIST
5873: LIST
5874: LIST
5875: PUSH
5876: LD_INT 101
5878: PUSH
5879: LD_INT 102
5881: PUSH
5882: LD_INT 105
5884: PUSH
5885: LD_INT 106
5887: PUSH
5888: LD_INT 108
5890: PUSH
5891: LD_INT 109
5893: PUSH
5894: LD_INT 112
5896: PUSH
5897: EMPTY
5898: LIST
5899: LIST
5900: LIST
5901: LIST
5902: LIST
5903: LIST
5904: LIST
5905: PUSH
5906: EMPTY
5907: LIST
5908: LIST
5909: ST_TO_ADDR
5910: GO 8405
5912: LD_INT 6
5914: DOUBLE
5915: EQUAL
5916: IFTRUE 5920
5918: GO 6040
5920: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
5921: LD_ADDR_VAR 0 1
5925: PUSH
5926: LD_INT 2
5928: PUSH
5929: LD_INT 4
5931: PUSH
5932: LD_INT 5
5934: PUSH
5935: LD_INT 6
5937: PUSH
5938: LD_INT 8
5940: PUSH
5941: LD_INT 11
5943: PUSH
5944: LD_INT 12
5946: PUSH
5947: LD_INT 15
5949: PUSH
5950: LD_INT 16
5952: PUSH
5953: LD_INT 20
5955: PUSH
5956: LD_INT 21
5958: PUSH
5959: LD_INT 22
5961: PUSH
5962: LD_INT 23
5964: PUSH
5965: LD_INT 25
5967: PUSH
5968: LD_INT 26
5970: PUSH
5971: LD_INT 30
5973: PUSH
5974: LD_INT 31
5976: PUSH
5977: LD_INT 32
5979: PUSH
5980: LD_INT 36
5982: PUSH
5983: EMPTY
5984: LIST
5985: LIST
5986: LIST
5987: LIST
5988: LIST
5989: LIST
5990: LIST
5991: LIST
5992: LIST
5993: LIST
5994: LIST
5995: LIST
5996: LIST
5997: LIST
5998: LIST
5999: LIST
6000: LIST
6001: LIST
6002: LIST
6003: PUSH
6004: LD_INT 101
6006: PUSH
6007: LD_INT 102
6009: PUSH
6010: LD_INT 105
6012: PUSH
6013: LD_INT 106
6015: PUSH
6016: LD_INT 108
6018: PUSH
6019: LD_INT 109
6021: PUSH
6022: LD_INT 112
6024: PUSH
6025: EMPTY
6026: LIST
6027: LIST
6028: LIST
6029: LIST
6030: LIST
6031: LIST
6032: LIST
6033: PUSH
6034: EMPTY
6035: LIST
6036: LIST
6037: ST_TO_ADDR
6038: GO 8405
6040: LD_INT 7
6042: DOUBLE
6043: EQUAL
6044: IFTRUE 6048
6046: GO 6148
6048: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
6049: LD_ADDR_VAR 0 1
6053: PUSH
6054: LD_INT 2
6056: PUSH
6057: LD_INT 4
6059: PUSH
6060: LD_INT 5
6062: PUSH
6063: LD_INT 7
6065: PUSH
6066: LD_INT 11
6068: PUSH
6069: LD_INT 12
6071: PUSH
6072: LD_INT 15
6074: PUSH
6075: LD_INT 16
6077: PUSH
6078: LD_INT 20
6080: PUSH
6081: LD_INT 21
6083: PUSH
6084: LD_INT 22
6086: PUSH
6087: LD_INT 23
6089: PUSH
6090: LD_INT 25
6092: PUSH
6093: LD_INT 26
6095: PUSH
6096: EMPTY
6097: LIST
6098: LIST
6099: LIST
6100: LIST
6101: LIST
6102: LIST
6103: LIST
6104: LIST
6105: LIST
6106: LIST
6107: LIST
6108: LIST
6109: LIST
6110: LIST
6111: PUSH
6112: LD_INT 101
6114: PUSH
6115: LD_INT 102
6117: PUSH
6118: LD_INT 103
6120: PUSH
6121: LD_INT 105
6123: PUSH
6124: LD_INT 106
6126: PUSH
6127: LD_INT 108
6129: PUSH
6130: LD_INT 112
6132: PUSH
6133: EMPTY
6134: LIST
6135: LIST
6136: LIST
6137: LIST
6138: LIST
6139: LIST
6140: LIST
6141: PUSH
6142: EMPTY
6143: LIST
6144: LIST
6145: ST_TO_ADDR
6146: GO 8405
6148: LD_INT 8
6150: DOUBLE
6151: EQUAL
6152: IFTRUE 6156
6154: GO 6284
6156: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
6157: LD_ADDR_VAR 0 1
6161: PUSH
6162: LD_INT 2
6164: PUSH
6165: LD_INT 4
6167: PUSH
6168: LD_INT 5
6170: PUSH
6171: LD_INT 6
6173: PUSH
6174: LD_INT 7
6176: PUSH
6177: LD_INT 8
6179: PUSH
6180: LD_INT 11
6182: PUSH
6183: LD_INT 12
6185: PUSH
6186: LD_INT 15
6188: PUSH
6189: LD_INT 16
6191: PUSH
6192: LD_INT 20
6194: PUSH
6195: LD_INT 21
6197: PUSH
6198: LD_INT 22
6200: PUSH
6201: LD_INT 23
6203: PUSH
6204: LD_INT 25
6206: PUSH
6207: LD_INT 26
6209: PUSH
6210: LD_INT 30
6212: PUSH
6213: LD_INT 31
6215: PUSH
6216: LD_INT 32
6218: PUSH
6219: LD_INT 36
6221: PUSH
6222: EMPTY
6223: LIST
6224: LIST
6225: LIST
6226: LIST
6227: LIST
6228: LIST
6229: LIST
6230: LIST
6231: LIST
6232: LIST
6233: LIST
6234: LIST
6235: LIST
6236: LIST
6237: LIST
6238: LIST
6239: LIST
6240: LIST
6241: LIST
6242: LIST
6243: PUSH
6244: LD_INT 101
6246: PUSH
6247: LD_INT 102
6249: PUSH
6250: LD_INT 103
6252: PUSH
6253: LD_INT 105
6255: PUSH
6256: LD_INT 106
6258: PUSH
6259: LD_INT 108
6261: PUSH
6262: LD_INT 109
6264: PUSH
6265: LD_INT 112
6267: PUSH
6268: EMPTY
6269: LIST
6270: LIST
6271: LIST
6272: LIST
6273: LIST
6274: LIST
6275: LIST
6276: LIST
6277: PUSH
6278: EMPTY
6279: LIST
6280: LIST
6281: ST_TO_ADDR
6282: GO 8405
6284: LD_INT 9
6286: DOUBLE
6287: EQUAL
6288: IFTRUE 6292
6290: GO 6428
6292: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
6293: LD_ADDR_VAR 0 1
6297: PUSH
6298: LD_INT 2
6300: PUSH
6301: LD_INT 4
6303: PUSH
6304: LD_INT 5
6306: PUSH
6307: LD_INT 6
6309: PUSH
6310: LD_INT 7
6312: PUSH
6313: LD_INT 8
6315: PUSH
6316: LD_INT 11
6318: PUSH
6319: LD_INT 12
6321: PUSH
6322: LD_INT 15
6324: PUSH
6325: LD_INT 16
6327: PUSH
6328: LD_INT 20
6330: PUSH
6331: LD_INT 21
6333: PUSH
6334: LD_INT 22
6336: PUSH
6337: LD_INT 23
6339: PUSH
6340: LD_INT 25
6342: PUSH
6343: LD_INT 26
6345: PUSH
6346: LD_INT 28
6348: PUSH
6349: LD_INT 30
6351: PUSH
6352: LD_INT 31
6354: PUSH
6355: LD_INT 32
6357: PUSH
6358: LD_INT 36
6360: PUSH
6361: EMPTY
6362: LIST
6363: LIST
6364: LIST
6365: LIST
6366: LIST
6367: LIST
6368: LIST
6369: LIST
6370: LIST
6371: LIST
6372: LIST
6373: LIST
6374: LIST
6375: LIST
6376: LIST
6377: LIST
6378: LIST
6379: LIST
6380: LIST
6381: LIST
6382: LIST
6383: PUSH
6384: LD_INT 101
6386: PUSH
6387: LD_INT 102
6389: PUSH
6390: LD_INT 103
6392: PUSH
6393: LD_INT 105
6395: PUSH
6396: LD_INT 106
6398: PUSH
6399: LD_INT 108
6401: PUSH
6402: LD_INT 109
6404: PUSH
6405: LD_INT 112
6407: PUSH
6408: LD_INT 114
6410: PUSH
6411: EMPTY
6412: LIST
6413: LIST
6414: LIST
6415: LIST
6416: LIST
6417: LIST
6418: LIST
6419: LIST
6420: LIST
6421: PUSH
6422: EMPTY
6423: LIST
6424: LIST
6425: ST_TO_ADDR
6426: GO 8405
6428: LD_INT 10
6430: DOUBLE
6431: EQUAL
6432: IFTRUE 6436
6434: GO 6620
6436: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
6437: LD_ADDR_VAR 0 1
6441: PUSH
6442: LD_INT 2
6444: PUSH
6445: LD_INT 4
6447: PUSH
6448: LD_INT 5
6450: PUSH
6451: LD_INT 6
6453: PUSH
6454: LD_INT 7
6456: PUSH
6457: LD_INT 8
6459: PUSH
6460: LD_INT 9
6462: PUSH
6463: LD_INT 10
6465: PUSH
6466: LD_INT 11
6468: PUSH
6469: LD_INT 12
6471: PUSH
6472: LD_INT 13
6474: PUSH
6475: LD_INT 14
6477: PUSH
6478: LD_INT 15
6480: PUSH
6481: LD_INT 16
6483: PUSH
6484: LD_INT 17
6486: PUSH
6487: LD_INT 18
6489: PUSH
6490: LD_INT 19
6492: PUSH
6493: LD_INT 20
6495: PUSH
6496: LD_INT 21
6498: PUSH
6499: LD_INT 22
6501: PUSH
6502: LD_INT 23
6504: PUSH
6505: LD_INT 24
6507: PUSH
6508: LD_INT 25
6510: PUSH
6511: LD_INT 26
6513: PUSH
6514: LD_INT 28
6516: PUSH
6517: LD_INT 30
6519: PUSH
6520: LD_INT 31
6522: PUSH
6523: LD_INT 32
6525: PUSH
6526: LD_INT 36
6528: PUSH
6529: EMPTY
6530: LIST
6531: LIST
6532: LIST
6533: LIST
6534: LIST
6535: LIST
6536: LIST
6537: LIST
6538: LIST
6539: LIST
6540: LIST
6541: LIST
6542: LIST
6543: LIST
6544: LIST
6545: LIST
6546: LIST
6547: LIST
6548: LIST
6549: LIST
6550: LIST
6551: LIST
6552: LIST
6553: LIST
6554: LIST
6555: LIST
6556: LIST
6557: LIST
6558: LIST
6559: PUSH
6560: LD_INT 101
6562: PUSH
6563: LD_INT 102
6565: PUSH
6566: LD_INT 103
6568: PUSH
6569: LD_INT 104
6571: PUSH
6572: LD_INT 105
6574: PUSH
6575: LD_INT 106
6577: PUSH
6578: LD_INT 107
6580: PUSH
6581: LD_INT 108
6583: PUSH
6584: LD_INT 109
6586: PUSH
6587: LD_INT 110
6589: PUSH
6590: LD_INT 111
6592: PUSH
6593: LD_INT 112
6595: PUSH
6596: LD_INT 114
6598: PUSH
6599: EMPTY
6600: LIST
6601: LIST
6602: LIST
6603: LIST
6604: LIST
6605: LIST
6606: LIST
6607: LIST
6608: LIST
6609: LIST
6610: LIST
6611: LIST
6612: LIST
6613: PUSH
6614: EMPTY
6615: LIST
6616: LIST
6617: ST_TO_ADDR
6618: GO 8405
6620: LD_INT 11
6622: DOUBLE
6623: EQUAL
6624: IFTRUE 6628
6626: GO 6820
6628: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
6629: LD_ADDR_VAR 0 1
6633: PUSH
6634: LD_INT 2
6636: PUSH
6637: LD_INT 3
6639: PUSH
6640: LD_INT 4
6642: PUSH
6643: LD_INT 5
6645: PUSH
6646: LD_INT 6
6648: PUSH
6649: LD_INT 7
6651: PUSH
6652: LD_INT 8
6654: PUSH
6655: LD_INT 9
6657: PUSH
6658: LD_INT 10
6660: PUSH
6661: LD_INT 11
6663: PUSH
6664: LD_INT 12
6666: PUSH
6667: LD_INT 13
6669: PUSH
6670: LD_INT 14
6672: PUSH
6673: LD_INT 15
6675: PUSH
6676: LD_INT 16
6678: PUSH
6679: LD_INT 17
6681: PUSH
6682: LD_INT 18
6684: PUSH
6685: LD_INT 19
6687: PUSH
6688: LD_INT 20
6690: PUSH
6691: LD_INT 21
6693: PUSH
6694: LD_INT 22
6696: PUSH
6697: LD_INT 23
6699: PUSH
6700: LD_INT 24
6702: PUSH
6703: LD_INT 25
6705: PUSH
6706: LD_INT 26
6708: PUSH
6709: LD_INT 28
6711: PUSH
6712: LD_INT 30
6714: PUSH
6715: LD_INT 31
6717: PUSH
6718: LD_INT 32
6720: PUSH
6721: LD_INT 34
6723: PUSH
6724: LD_INT 36
6726: PUSH
6727: EMPTY
6728: LIST
6729: LIST
6730: LIST
6731: LIST
6732: LIST
6733: LIST
6734: LIST
6735: LIST
6736: LIST
6737: LIST
6738: LIST
6739: LIST
6740: LIST
6741: LIST
6742: LIST
6743: LIST
6744: LIST
6745: LIST
6746: LIST
6747: LIST
6748: LIST
6749: LIST
6750: LIST
6751: LIST
6752: LIST
6753: LIST
6754: LIST
6755: LIST
6756: LIST
6757: LIST
6758: LIST
6759: PUSH
6760: LD_INT 101
6762: PUSH
6763: LD_INT 102
6765: PUSH
6766: LD_INT 103
6768: PUSH
6769: LD_INT 104
6771: PUSH
6772: LD_INT 105
6774: PUSH
6775: LD_INT 106
6777: PUSH
6778: LD_INT 107
6780: PUSH
6781: LD_INT 108
6783: PUSH
6784: LD_INT 109
6786: PUSH
6787: LD_INT 110
6789: PUSH
6790: LD_INT 111
6792: PUSH
6793: LD_INT 112
6795: PUSH
6796: LD_INT 114
6798: PUSH
6799: EMPTY
6800: LIST
6801: LIST
6802: LIST
6803: LIST
6804: LIST
6805: LIST
6806: LIST
6807: LIST
6808: LIST
6809: LIST
6810: LIST
6811: LIST
6812: LIST
6813: PUSH
6814: EMPTY
6815: LIST
6816: LIST
6817: ST_TO_ADDR
6818: GO 8405
6820: LD_INT 12
6822: DOUBLE
6823: EQUAL
6824: IFTRUE 6828
6826: GO 7036
6828: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
6829: LD_ADDR_VAR 0 1
6833: PUSH
6834: LD_INT 1
6836: PUSH
6837: LD_INT 2
6839: PUSH
6840: LD_INT 3
6842: PUSH
6843: LD_INT 4
6845: PUSH
6846: LD_INT 5
6848: PUSH
6849: LD_INT 6
6851: PUSH
6852: LD_INT 7
6854: PUSH
6855: LD_INT 8
6857: PUSH
6858: LD_INT 9
6860: PUSH
6861: LD_INT 10
6863: PUSH
6864: LD_INT 11
6866: PUSH
6867: LD_INT 12
6869: PUSH
6870: LD_INT 13
6872: PUSH
6873: LD_INT 14
6875: PUSH
6876: LD_INT 15
6878: PUSH
6879: LD_INT 16
6881: PUSH
6882: LD_INT 17
6884: PUSH
6885: LD_INT 18
6887: PUSH
6888: LD_INT 19
6890: PUSH
6891: LD_INT 20
6893: PUSH
6894: LD_INT 21
6896: PUSH
6897: LD_INT 22
6899: PUSH
6900: LD_INT 23
6902: PUSH
6903: LD_INT 24
6905: PUSH
6906: LD_INT 25
6908: PUSH
6909: LD_INT 26
6911: PUSH
6912: LD_INT 27
6914: PUSH
6915: LD_INT 28
6917: PUSH
6918: LD_INT 30
6920: PUSH
6921: LD_INT 31
6923: PUSH
6924: LD_INT 32
6926: PUSH
6927: LD_INT 33
6929: PUSH
6930: LD_INT 34
6932: PUSH
6933: LD_INT 36
6935: PUSH
6936: EMPTY
6937: LIST
6938: LIST
6939: LIST
6940: LIST
6941: LIST
6942: LIST
6943: LIST
6944: LIST
6945: LIST
6946: LIST
6947: LIST
6948: LIST
6949: LIST
6950: LIST
6951: LIST
6952: LIST
6953: LIST
6954: LIST
6955: LIST
6956: LIST
6957: LIST
6958: LIST
6959: LIST
6960: LIST
6961: LIST
6962: LIST
6963: LIST
6964: LIST
6965: LIST
6966: LIST
6967: LIST
6968: LIST
6969: LIST
6970: LIST
6971: PUSH
6972: LD_INT 101
6974: PUSH
6975: LD_INT 102
6977: PUSH
6978: LD_INT 103
6980: PUSH
6981: LD_INT 104
6983: PUSH
6984: LD_INT 105
6986: PUSH
6987: LD_INT 106
6989: PUSH
6990: LD_INT 107
6992: PUSH
6993: LD_INT 108
6995: PUSH
6996: LD_INT 109
6998: PUSH
6999: LD_INT 110
7001: PUSH
7002: LD_INT 111
7004: PUSH
7005: LD_INT 112
7007: PUSH
7008: LD_INT 113
7010: PUSH
7011: LD_INT 114
7013: PUSH
7014: EMPTY
7015: LIST
7016: LIST
7017: LIST
7018: LIST
7019: LIST
7020: LIST
7021: LIST
7022: LIST
7023: LIST
7024: LIST
7025: LIST
7026: LIST
7027: LIST
7028: LIST
7029: PUSH
7030: EMPTY
7031: LIST
7032: LIST
7033: ST_TO_ADDR
7034: GO 8405
7036: LD_INT 13
7038: DOUBLE
7039: EQUAL
7040: IFTRUE 7044
7042: GO 7240
7044: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
7045: LD_ADDR_VAR 0 1
7049: PUSH
7050: LD_INT 1
7052: PUSH
7053: LD_INT 2
7055: PUSH
7056: LD_INT 3
7058: PUSH
7059: LD_INT 4
7061: PUSH
7062: LD_INT 5
7064: PUSH
7065: LD_INT 8
7067: PUSH
7068: LD_INT 9
7070: PUSH
7071: LD_INT 10
7073: PUSH
7074: LD_INT 11
7076: PUSH
7077: LD_INT 12
7079: PUSH
7080: LD_INT 14
7082: PUSH
7083: LD_INT 15
7085: PUSH
7086: LD_INT 16
7088: PUSH
7089: LD_INT 17
7091: PUSH
7092: LD_INT 18
7094: PUSH
7095: LD_INT 19
7097: PUSH
7098: LD_INT 20
7100: PUSH
7101: LD_INT 21
7103: PUSH
7104: LD_INT 22
7106: PUSH
7107: LD_INT 23
7109: PUSH
7110: LD_INT 24
7112: PUSH
7113: LD_INT 25
7115: PUSH
7116: LD_INT 26
7118: PUSH
7119: LD_INT 27
7121: PUSH
7122: LD_INT 28
7124: PUSH
7125: LD_INT 30
7127: PUSH
7128: LD_INT 31
7130: PUSH
7131: LD_INT 32
7133: PUSH
7134: LD_INT 33
7136: PUSH
7137: LD_INT 34
7139: PUSH
7140: LD_INT 36
7142: PUSH
7143: EMPTY
7144: LIST
7145: LIST
7146: LIST
7147: LIST
7148: LIST
7149: LIST
7150: LIST
7151: LIST
7152: LIST
7153: LIST
7154: LIST
7155: LIST
7156: LIST
7157: LIST
7158: LIST
7159: LIST
7160: LIST
7161: LIST
7162: LIST
7163: LIST
7164: LIST
7165: LIST
7166: LIST
7167: LIST
7168: LIST
7169: LIST
7170: LIST
7171: LIST
7172: LIST
7173: LIST
7174: LIST
7175: PUSH
7176: LD_INT 101
7178: PUSH
7179: LD_INT 102
7181: PUSH
7182: LD_INT 103
7184: PUSH
7185: LD_INT 104
7187: PUSH
7188: LD_INT 105
7190: PUSH
7191: LD_INT 106
7193: PUSH
7194: LD_INT 107
7196: PUSH
7197: LD_INT 108
7199: PUSH
7200: LD_INT 109
7202: PUSH
7203: LD_INT 110
7205: PUSH
7206: LD_INT 111
7208: PUSH
7209: LD_INT 112
7211: PUSH
7212: LD_INT 113
7214: PUSH
7215: LD_INT 114
7217: PUSH
7218: EMPTY
7219: LIST
7220: LIST
7221: LIST
7222: LIST
7223: LIST
7224: LIST
7225: LIST
7226: LIST
7227: LIST
7228: LIST
7229: LIST
7230: LIST
7231: LIST
7232: LIST
7233: PUSH
7234: EMPTY
7235: LIST
7236: LIST
7237: ST_TO_ADDR
7238: GO 8405
7240: LD_INT 14
7242: DOUBLE
7243: EQUAL
7244: IFTRUE 7248
7246: GO 7460
7248: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
7249: LD_ADDR_VAR 0 1
7253: PUSH
7254: LD_INT 1
7256: PUSH
7257: LD_INT 2
7259: PUSH
7260: LD_INT 3
7262: PUSH
7263: LD_INT 4
7265: PUSH
7266: LD_INT 5
7268: PUSH
7269: LD_INT 6
7271: PUSH
7272: LD_INT 7
7274: PUSH
7275: LD_INT 8
7277: PUSH
7278: LD_INT 9
7280: PUSH
7281: LD_INT 10
7283: PUSH
7284: LD_INT 11
7286: PUSH
7287: LD_INT 12
7289: PUSH
7290: LD_INT 13
7292: PUSH
7293: LD_INT 14
7295: PUSH
7296: LD_INT 15
7298: PUSH
7299: LD_INT 16
7301: PUSH
7302: LD_INT 17
7304: PUSH
7305: LD_INT 18
7307: PUSH
7308: LD_INT 19
7310: PUSH
7311: LD_INT 20
7313: PUSH
7314: LD_INT 21
7316: PUSH
7317: LD_INT 22
7319: PUSH
7320: LD_INT 23
7322: PUSH
7323: LD_INT 24
7325: PUSH
7326: LD_INT 25
7328: PUSH
7329: LD_INT 26
7331: PUSH
7332: LD_INT 27
7334: PUSH
7335: LD_INT 28
7337: PUSH
7338: LD_INT 29
7340: PUSH
7341: LD_INT 30
7343: PUSH
7344: LD_INT 31
7346: PUSH
7347: LD_INT 32
7349: PUSH
7350: LD_INT 33
7352: PUSH
7353: LD_INT 34
7355: PUSH
7356: LD_INT 36
7358: PUSH
7359: EMPTY
7360: LIST
7361: LIST
7362: LIST
7363: LIST
7364: LIST
7365: LIST
7366: LIST
7367: LIST
7368: LIST
7369: LIST
7370: LIST
7371: LIST
7372: LIST
7373: LIST
7374: LIST
7375: LIST
7376: LIST
7377: LIST
7378: LIST
7379: LIST
7380: LIST
7381: LIST
7382: LIST
7383: LIST
7384: LIST
7385: LIST
7386: LIST
7387: LIST
7388: LIST
7389: LIST
7390: LIST
7391: LIST
7392: LIST
7393: LIST
7394: LIST
7395: PUSH
7396: LD_INT 101
7398: PUSH
7399: LD_INT 102
7401: PUSH
7402: LD_INT 103
7404: PUSH
7405: LD_INT 104
7407: PUSH
7408: LD_INT 105
7410: PUSH
7411: LD_INT 106
7413: PUSH
7414: LD_INT 107
7416: PUSH
7417: LD_INT 108
7419: PUSH
7420: LD_INT 109
7422: PUSH
7423: LD_INT 110
7425: PUSH
7426: LD_INT 111
7428: PUSH
7429: LD_INT 112
7431: PUSH
7432: LD_INT 113
7434: PUSH
7435: LD_INT 114
7437: PUSH
7438: EMPTY
7439: LIST
7440: LIST
7441: LIST
7442: LIST
7443: LIST
7444: LIST
7445: LIST
7446: LIST
7447: LIST
7448: LIST
7449: LIST
7450: LIST
7451: LIST
7452: LIST
7453: PUSH
7454: EMPTY
7455: LIST
7456: LIST
7457: ST_TO_ADDR
7458: GO 8405
7460: LD_INT 15
7462: DOUBLE
7463: EQUAL
7464: IFTRUE 7468
7466: GO 7680
7468: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
7469: LD_ADDR_VAR 0 1
7473: PUSH
7474: LD_INT 1
7476: PUSH
7477: LD_INT 2
7479: PUSH
7480: LD_INT 3
7482: PUSH
7483: LD_INT 4
7485: PUSH
7486: LD_INT 5
7488: PUSH
7489: LD_INT 6
7491: PUSH
7492: LD_INT 7
7494: PUSH
7495: LD_INT 8
7497: PUSH
7498: LD_INT 9
7500: PUSH
7501: LD_INT 10
7503: PUSH
7504: LD_INT 11
7506: PUSH
7507: LD_INT 12
7509: PUSH
7510: LD_INT 13
7512: PUSH
7513: LD_INT 14
7515: PUSH
7516: LD_INT 15
7518: PUSH
7519: LD_INT 16
7521: PUSH
7522: LD_INT 17
7524: PUSH
7525: LD_INT 18
7527: PUSH
7528: LD_INT 19
7530: PUSH
7531: LD_INT 20
7533: PUSH
7534: LD_INT 21
7536: PUSH
7537: LD_INT 22
7539: PUSH
7540: LD_INT 23
7542: PUSH
7543: LD_INT 24
7545: PUSH
7546: LD_INT 25
7548: PUSH
7549: LD_INT 26
7551: PUSH
7552: LD_INT 27
7554: PUSH
7555: LD_INT 28
7557: PUSH
7558: LD_INT 29
7560: PUSH
7561: LD_INT 30
7563: PUSH
7564: LD_INT 31
7566: PUSH
7567: LD_INT 32
7569: PUSH
7570: LD_INT 33
7572: PUSH
7573: LD_INT 34
7575: PUSH
7576: LD_INT 36
7578: PUSH
7579: EMPTY
7580: LIST
7581: LIST
7582: LIST
7583: LIST
7584: LIST
7585: LIST
7586: LIST
7587: LIST
7588: LIST
7589: LIST
7590: LIST
7591: LIST
7592: LIST
7593: LIST
7594: LIST
7595: LIST
7596: LIST
7597: LIST
7598: LIST
7599: LIST
7600: LIST
7601: LIST
7602: LIST
7603: LIST
7604: LIST
7605: LIST
7606: LIST
7607: LIST
7608: LIST
7609: LIST
7610: LIST
7611: LIST
7612: LIST
7613: LIST
7614: LIST
7615: PUSH
7616: LD_INT 101
7618: PUSH
7619: LD_INT 102
7621: PUSH
7622: LD_INT 103
7624: PUSH
7625: LD_INT 104
7627: PUSH
7628: LD_INT 105
7630: PUSH
7631: LD_INT 106
7633: PUSH
7634: LD_INT 107
7636: PUSH
7637: LD_INT 108
7639: PUSH
7640: LD_INT 109
7642: PUSH
7643: LD_INT 110
7645: PUSH
7646: LD_INT 111
7648: PUSH
7649: LD_INT 112
7651: PUSH
7652: LD_INT 113
7654: PUSH
7655: LD_INT 114
7657: PUSH
7658: EMPTY
7659: LIST
7660: LIST
7661: LIST
7662: LIST
7663: LIST
7664: LIST
7665: LIST
7666: LIST
7667: LIST
7668: LIST
7669: LIST
7670: LIST
7671: LIST
7672: LIST
7673: PUSH
7674: EMPTY
7675: LIST
7676: LIST
7677: ST_TO_ADDR
7678: GO 8405
7680: LD_INT 16
7682: DOUBLE
7683: EQUAL
7684: IFTRUE 7688
7686: GO 7812
7688: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
7689: LD_ADDR_VAR 0 1
7693: PUSH
7694: LD_INT 2
7696: PUSH
7697: LD_INT 4
7699: PUSH
7700: LD_INT 5
7702: PUSH
7703: LD_INT 7
7705: PUSH
7706: LD_INT 11
7708: PUSH
7709: LD_INT 12
7711: PUSH
7712: LD_INT 15
7714: PUSH
7715: LD_INT 16
7717: PUSH
7718: LD_INT 20
7720: PUSH
7721: LD_INT 21
7723: PUSH
7724: LD_INT 22
7726: PUSH
7727: LD_INT 23
7729: PUSH
7730: LD_INT 25
7732: PUSH
7733: LD_INT 26
7735: PUSH
7736: LD_INT 30
7738: PUSH
7739: LD_INT 31
7741: PUSH
7742: LD_INT 32
7744: PUSH
7745: LD_INT 33
7747: PUSH
7748: LD_INT 34
7750: PUSH
7751: EMPTY
7752: LIST
7753: LIST
7754: LIST
7755: LIST
7756: LIST
7757: LIST
7758: LIST
7759: LIST
7760: LIST
7761: LIST
7762: LIST
7763: LIST
7764: LIST
7765: LIST
7766: LIST
7767: LIST
7768: LIST
7769: LIST
7770: LIST
7771: PUSH
7772: LD_INT 101
7774: PUSH
7775: LD_INT 102
7777: PUSH
7778: LD_INT 103
7780: PUSH
7781: LD_INT 106
7783: PUSH
7784: LD_INT 108
7786: PUSH
7787: LD_INT 112
7789: PUSH
7790: LD_INT 113
7792: PUSH
7793: LD_INT 114
7795: PUSH
7796: EMPTY
7797: LIST
7798: LIST
7799: LIST
7800: LIST
7801: LIST
7802: LIST
7803: LIST
7804: LIST
7805: PUSH
7806: EMPTY
7807: LIST
7808: LIST
7809: ST_TO_ADDR
7810: GO 8405
7812: LD_INT 17
7814: DOUBLE
7815: EQUAL
7816: IFTRUE 7820
7818: GO 8032
7820: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
7821: LD_ADDR_VAR 0 1
7825: PUSH
7826: LD_INT 1
7828: PUSH
7829: LD_INT 2
7831: PUSH
7832: LD_INT 3
7834: PUSH
7835: LD_INT 4
7837: PUSH
7838: LD_INT 5
7840: PUSH
7841: LD_INT 6
7843: PUSH
7844: LD_INT 7
7846: PUSH
7847: LD_INT 8
7849: PUSH
7850: LD_INT 9
7852: PUSH
7853: LD_INT 10
7855: PUSH
7856: LD_INT 11
7858: PUSH
7859: LD_INT 12
7861: PUSH
7862: LD_INT 13
7864: PUSH
7865: LD_INT 14
7867: PUSH
7868: LD_INT 15
7870: PUSH
7871: LD_INT 16
7873: PUSH
7874: LD_INT 17
7876: PUSH
7877: LD_INT 18
7879: PUSH
7880: LD_INT 19
7882: PUSH
7883: LD_INT 20
7885: PUSH
7886: LD_INT 21
7888: PUSH
7889: LD_INT 22
7891: PUSH
7892: LD_INT 23
7894: PUSH
7895: LD_INT 24
7897: PUSH
7898: LD_INT 25
7900: PUSH
7901: LD_INT 26
7903: PUSH
7904: LD_INT 27
7906: PUSH
7907: LD_INT 28
7909: PUSH
7910: LD_INT 29
7912: PUSH
7913: LD_INT 30
7915: PUSH
7916: LD_INT 31
7918: PUSH
7919: LD_INT 32
7921: PUSH
7922: LD_INT 33
7924: PUSH
7925: LD_INT 34
7927: PUSH
7928: LD_INT 36
7930: PUSH
7931: EMPTY
7932: LIST
7933: LIST
7934: LIST
7935: LIST
7936: LIST
7937: LIST
7938: LIST
7939: LIST
7940: LIST
7941: LIST
7942: LIST
7943: LIST
7944: LIST
7945: LIST
7946: LIST
7947: LIST
7948: LIST
7949: LIST
7950: LIST
7951: LIST
7952: LIST
7953: LIST
7954: LIST
7955: LIST
7956: LIST
7957: LIST
7958: LIST
7959: LIST
7960: LIST
7961: LIST
7962: LIST
7963: LIST
7964: LIST
7965: LIST
7966: LIST
7967: PUSH
7968: LD_INT 101
7970: PUSH
7971: LD_INT 102
7973: PUSH
7974: LD_INT 103
7976: PUSH
7977: LD_INT 104
7979: PUSH
7980: LD_INT 105
7982: PUSH
7983: LD_INT 106
7985: PUSH
7986: LD_INT 107
7988: PUSH
7989: LD_INT 108
7991: PUSH
7992: LD_INT 109
7994: PUSH
7995: LD_INT 110
7997: PUSH
7998: LD_INT 111
8000: PUSH
8001: LD_INT 112
8003: PUSH
8004: LD_INT 113
8006: PUSH
8007: LD_INT 114
8009: PUSH
8010: EMPTY
8011: LIST
8012: LIST
8013: LIST
8014: LIST
8015: LIST
8016: LIST
8017: LIST
8018: LIST
8019: LIST
8020: LIST
8021: LIST
8022: LIST
8023: LIST
8024: LIST
8025: PUSH
8026: EMPTY
8027: LIST
8028: LIST
8029: ST_TO_ADDR
8030: GO 8405
8032: LD_INT 18
8034: DOUBLE
8035: EQUAL
8036: IFTRUE 8040
8038: GO 8176
8040: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
8041: LD_ADDR_VAR 0 1
8045: PUSH
8046: LD_INT 2
8048: PUSH
8049: LD_INT 4
8051: PUSH
8052: LD_INT 5
8054: PUSH
8055: LD_INT 7
8057: PUSH
8058: LD_INT 11
8060: PUSH
8061: LD_INT 12
8063: PUSH
8064: LD_INT 15
8066: PUSH
8067: LD_INT 16
8069: PUSH
8070: LD_INT 20
8072: PUSH
8073: LD_INT 21
8075: PUSH
8076: LD_INT 22
8078: PUSH
8079: LD_INT 23
8081: PUSH
8082: LD_INT 25
8084: PUSH
8085: LD_INT 26
8087: PUSH
8088: LD_INT 30
8090: PUSH
8091: LD_INT 31
8093: PUSH
8094: LD_INT 32
8096: PUSH
8097: LD_INT 33
8099: PUSH
8100: LD_INT 34
8102: PUSH
8103: LD_INT 35
8105: PUSH
8106: LD_INT 36
8108: PUSH
8109: EMPTY
8110: LIST
8111: LIST
8112: LIST
8113: LIST
8114: LIST
8115: LIST
8116: LIST
8117: LIST
8118: LIST
8119: LIST
8120: LIST
8121: LIST
8122: LIST
8123: LIST
8124: LIST
8125: LIST
8126: LIST
8127: LIST
8128: LIST
8129: LIST
8130: LIST
8131: PUSH
8132: LD_INT 101
8134: PUSH
8135: LD_INT 102
8137: PUSH
8138: LD_INT 103
8140: PUSH
8141: LD_INT 106
8143: PUSH
8144: LD_INT 108
8146: PUSH
8147: LD_INT 112
8149: PUSH
8150: LD_INT 113
8152: PUSH
8153: LD_INT 114
8155: PUSH
8156: LD_INT 115
8158: PUSH
8159: EMPTY
8160: LIST
8161: LIST
8162: LIST
8163: LIST
8164: LIST
8165: LIST
8166: LIST
8167: LIST
8168: LIST
8169: PUSH
8170: EMPTY
8171: LIST
8172: LIST
8173: ST_TO_ADDR
8174: GO 8405
8176: LD_INT 19
8178: DOUBLE
8179: EQUAL
8180: IFTRUE 8184
8182: GO 8404
8184: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
8185: LD_ADDR_VAR 0 1
8189: PUSH
8190: LD_INT 1
8192: PUSH
8193: LD_INT 2
8195: PUSH
8196: LD_INT 3
8198: PUSH
8199: LD_INT 4
8201: PUSH
8202: LD_INT 5
8204: PUSH
8205: LD_INT 6
8207: PUSH
8208: LD_INT 7
8210: PUSH
8211: LD_INT 8
8213: PUSH
8214: LD_INT 9
8216: PUSH
8217: LD_INT 10
8219: PUSH
8220: LD_INT 11
8222: PUSH
8223: LD_INT 12
8225: PUSH
8226: LD_INT 13
8228: PUSH
8229: LD_INT 14
8231: PUSH
8232: LD_INT 15
8234: PUSH
8235: LD_INT 16
8237: PUSH
8238: LD_INT 17
8240: PUSH
8241: LD_INT 18
8243: PUSH
8244: LD_INT 19
8246: PUSH
8247: LD_INT 20
8249: PUSH
8250: LD_INT 21
8252: PUSH
8253: LD_INT 22
8255: PUSH
8256: LD_INT 23
8258: PUSH
8259: LD_INT 24
8261: PUSH
8262: LD_INT 25
8264: PUSH
8265: LD_INT 26
8267: PUSH
8268: LD_INT 27
8270: PUSH
8271: LD_INT 28
8273: PUSH
8274: LD_INT 29
8276: PUSH
8277: LD_INT 30
8279: PUSH
8280: LD_INT 31
8282: PUSH
8283: LD_INT 32
8285: PUSH
8286: LD_INT 33
8288: PUSH
8289: LD_INT 34
8291: PUSH
8292: LD_INT 35
8294: PUSH
8295: LD_INT 36
8297: PUSH
8298: EMPTY
8299: LIST
8300: LIST
8301: LIST
8302: LIST
8303: LIST
8304: LIST
8305: LIST
8306: LIST
8307: LIST
8308: LIST
8309: LIST
8310: LIST
8311: LIST
8312: LIST
8313: LIST
8314: LIST
8315: LIST
8316: LIST
8317: LIST
8318: LIST
8319: LIST
8320: LIST
8321: LIST
8322: LIST
8323: LIST
8324: LIST
8325: LIST
8326: LIST
8327: LIST
8328: LIST
8329: LIST
8330: LIST
8331: LIST
8332: LIST
8333: LIST
8334: LIST
8335: PUSH
8336: LD_INT 101
8338: PUSH
8339: LD_INT 102
8341: PUSH
8342: LD_INT 103
8344: PUSH
8345: LD_INT 104
8347: PUSH
8348: LD_INT 105
8350: PUSH
8351: LD_INT 106
8353: PUSH
8354: LD_INT 107
8356: PUSH
8357: LD_INT 108
8359: PUSH
8360: LD_INT 109
8362: PUSH
8363: LD_INT 110
8365: PUSH
8366: LD_INT 111
8368: PUSH
8369: LD_INT 112
8371: PUSH
8372: LD_INT 113
8374: PUSH
8375: LD_INT 114
8377: PUSH
8378: LD_INT 115
8380: PUSH
8381: EMPTY
8382: LIST
8383: LIST
8384: LIST
8385: LIST
8386: LIST
8387: LIST
8388: LIST
8389: LIST
8390: LIST
8391: LIST
8392: LIST
8393: LIST
8394: LIST
8395: LIST
8396: LIST
8397: PUSH
8398: EMPTY
8399: LIST
8400: LIST
8401: ST_TO_ADDR
8402: GO 8405
8404: POP
// end else
8405: GO 8624
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
8407: LD_ADDR_VAR 0 1
8411: PUSH
8412: LD_INT 1
8414: PUSH
8415: LD_INT 2
8417: PUSH
8418: LD_INT 3
8420: PUSH
8421: LD_INT 4
8423: PUSH
8424: LD_INT 5
8426: PUSH
8427: LD_INT 6
8429: PUSH
8430: LD_INT 7
8432: PUSH
8433: LD_INT 8
8435: PUSH
8436: LD_INT 9
8438: PUSH
8439: LD_INT 10
8441: PUSH
8442: LD_INT 11
8444: PUSH
8445: LD_INT 12
8447: PUSH
8448: LD_INT 13
8450: PUSH
8451: LD_INT 14
8453: PUSH
8454: LD_INT 15
8456: PUSH
8457: LD_INT 16
8459: PUSH
8460: LD_INT 17
8462: PUSH
8463: LD_INT 18
8465: PUSH
8466: LD_INT 19
8468: PUSH
8469: LD_INT 20
8471: PUSH
8472: LD_INT 21
8474: PUSH
8475: LD_INT 22
8477: PUSH
8478: LD_INT 23
8480: PUSH
8481: LD_INT 24
8483: PUSH
8484: LD_INT 25
8486: PUSH
8487: LD_INT 26
8489: PUSH
8490: LD_INT 27
8492: PUSH
8493: LD_INT 28
8495: PUSH
8496: LD_INT 29
8498: PUSH
8499: LD_INT 30
8501: PUSH
8502: LD_INT 31
8504: PUSH
8505: LD_INT 32
8507: PUSH
8508: LD_INT 33
8510: PUSH
8511: LD_INT 34
8513: PUSH
8514: LD_INT 35
8516: PUSH
8517: LD_INT 36
8519: PUSH
8520: EMPTY
8521: LIST
8522: LIST
8523: LIST
8524: LIST
8525: LIST
8526: LIST
8527: LIST
8528: LIST
8529: LIST
8530: LIST
8531: LIST
8532: LIST
8533: LIST
8534: LIST
8535: LIST
8536: LIST
8537: LIST
8538: LIST
8539: LIST
8540: LIST
8541: LIST
8542: LIST
8543: LIST
8544: LIST
8545: LIST
8546: LIST
8547: LIST
8548: LIST
8549: LIST
8550: LIST
8551: LIST
8552: LIST
8553: LIST
8554: LIST
8555: LIST
8556: LIST
8557: PUSH
8558: LD_INT 101
8560: PUSH
8561: LD_INT 102
8563: PUSH
8564: LD_INT 103
8566: PUSH
8567: LD_INT 104
8569: PUSH
8570: LD_INT 105
8572: PUSH
8573: LD_INT 106
8575: PUSH
8576: LD_INT 107
8578: PUSH
8579: LD_INT 108
8581: PUSH
8582: LD_INT 109
8584: PUSH
8585: LD_INT 110
8587: PUSH
8588: LD_INT 111
8590: PUSH
8591: LD_INT 112
8593: PUSH
8594: LD_INT 113
8596: PUSH
8597: LD_INT 114
8599: PUSH
8600: LD_INT 115
8602: PUSH
8603: EMPTY
8604: LIST
8605: LIST
8606: LIST
8607: LIST
8608: LIST
8609: LIST
8610: LIST
8611: LIST
8612: LIST
8613: LIST
8614: LIST
8615: LIST
8616: LIST
8617: LIST
8618: LIST
8619: PUSH
8620: EMPTY
8621: LIST
8622: LIST
8623: ST_TO_ADDR
// if result then
8624: LD_VAR 0 1
8628: IFFALSE 8917
// begin normal :=  ;
8630: LD_ADDR_VAR 0 3
8634: PUSH
8635: LD_STRING 
8637: ST_TO_ADDR
// hardcore :=  ;
8638: LD_ADDR_VAR 0 4
8642: PUSH
8643: LD_STRING 
8645: ST_TO_ADDR
// for i = 1 to normalCounter do
8646: LD_ADDR_VAR 0 5
8650: PUSH
8651: DOUBLE
8652: LD_INT 1
8654: DEC
8655: ST_TO_ADDR
8656: LD_EXP 18
8660: PUSH
8661: FOR_TO
8662: IFFALSE 8763
// begin tmp := 0 ;
8664: LD_ADDR_VAR 0 2
8668: PUSH
8669: LD_STRING 0
8671: ST_TO_ADDR
// if result [ 1 ] then
8672: LD_VAR 0 1
8676: PUSH
8677: LD_INT 1
8679: ARRAY
8680: IFFALSE 8745
// if result [ 1 ] [ 1 ] = i then
8682: LD_VAR 0 1
8686: PUSH
8687: LD_INT 1
8689: ARRAY
8690: PUSH
8691: LD_INT 1
8693: ARRAY
8694: PUSH
8695: LD_VAR 0 5
8699: EQUAL
8700: IFFALSE 8745
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
8702: LD_ADDR_VAR 0 1
8706: PUSH
8707: LD_VAR 0 1
8711: PPUSH
8712: LD_INT 1
8714: PPUSH
8715: LD_VAR 0 1
8719: PUSH
8720: LD_INT 1
8722: ARRAY
8723: PPUSH
8724: LD_INT 1
8726: PPUSH
8727: CALL_OW 3
8731: PPUSH
8732: CALL_OW 1
8736: ST_TO_ADDR
// tmp := 1 ;
8737: LD_ADDR_VAR 0 2
8741: PUSH
8742: LD_STRING 1
8744: ST_TO_ADDR
// end ; normal := normal & tmp ;
8745: LD_ADDR_VAR 0 3
8749: PUSH
8750: LD_VAR 0 3
8754: PUSH
8755: LD_VAR 0 2
8759: STR
8760: ST_TO_ADDR
// end ;
8761: GO 8661
8763: POP
8764: POP
// for i = 1 to hardcoreCounter do
8765: LD_ADDR_VAR 0 5
8769: PUSH
8770: DOUBLE
8771: LD_INT 1
8773: DEC
8774: ST_TO_ADDR
8775: LD_EXP 19
8779: PUSH
8780: FOR_TO
8781: IFFALSE 8886
// begin tmp := 0 ;
8783: LD_ADDR_VAR 0 2
8787: PUSH
8788: LD_STRING 0
8790: ST_TO_ADDR
// if result [ 2 ] then
8791: LD_VAR 0 1
8795: PUSH
8796: LD_INT 2
8798: ARRAY
8799: IFFALSE 8868
// if result [ 2 ] [ 1 ] = 100 + i then
8801: LD_VAR 0 1
8805: PUSH
8806: LD_INT 2
8808: ARRAY
8809: PUSH
8810: LD_INT 1
8812: ARRAY
8813: PUSH
8814: LD_INT 100
8816: PUSH
8817: LD_VAR 0 5
8821: PLUS
8822: EQUAL
8823: IFFALSE 8868
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
8825: LD_ADDR_VAR 0 1
8829: PUSH
8830: LD_VAR 0 1
8834: PPUSH
8835: LD_INT 2
8837: PPUSH
8838: LD_VAR 0 1
8842: PUSH
8843: LD_INT 2
8845: ARRAY
8846: PPUSH
8847: LD_INT 1
8849: PPUSH
8850: CALL_OW 3
8854: PPUSH
8855: CALL_OW 1
8859: ST_TO_ADDR
// tmp := 1 ;
8860: LD_ADDR_VAR 0 2
8864: PUSH
8865: LD_STRING 1
8867: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
8868: LD_ADDR_VAR 0 4
8872: PUSH
8873: LD_VAR 0 4
8877: PUSH
8878: LD_VAR 0 2
8882: STR
8883: ST_TO_ADDR
// end ;
8884: GO 8780
8886: POP
8887: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
8888: LD_STRING getStreamItemsFromMission("
8890: PUSH
8891: LD_VAR 0 3
8895: STR
8896: PUSH
8897: LD_STRING ","
8899: STR
8900: PUSH
8901: LD_VAR 0 4
8905: STR
8906: PUSH
8907: LD_STRING ")
8909: STR
8910: PPUSH
8911: CALL_OW 559
// end else
8915: GO 8924
// ToLua ( getStreamItemsFromMission("","") ) ;
8917: LD_STRING getStreamItemsFromMission("","")
8919: PPUSH
8920: CALL_OW 559
// end ;
8924: LD_VAR 0 1
8928: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
8929: LD_VAR 0 2
8933: PUSH
8934: LD_INT 100
8936: EQUAL
8937: IFFALSE 9886
// begin if not StreamModeActive then
8939: LD_EXP 17
8943: NOT
8944: IFFALSE 8954
// StreamModeActive := true ;
8946: LD_ADDR_EXP 17
8950: PUSH
8951: LD_INT 1
8953: ST_TO_ADDR
// if p3 = 0 then
8954: LD_VAR 0 3
8958: PUSH
8959: LD_INT 0
8961: EQUAL
8962: IFFALSE 8968
// InitStreamMode ;
8964: CALL 5007 0 0
// if p3 = 1 then
8968: LD_VAR 0 3
8972: PUSH
8973: LD_INT 1
8975: EQUAL
8976: IFFALSE 8986
// sRocket := true ;
8978: LD_ADDR_EXP 22
8982: PUSH
8983: LD_INT 1
8985: ST_TO_ADDR
// if p3 = 2 then
8986: LD_VAR 0 3
8990: PUSH
8991: LD_INT 2
8993: EQUAL
8994: IFFALSE 9004
// sSpeed := true ;
8996: LD_ADDR_EXP 21
9000: PUSH
9001: LD_INT 1
9003: ST_TO_ADDR
// if p3 = 3 then
9004: LD_VAR 0 3
9008: PUSH
9009: LD_INT 3
9011: EQUAL
9012: IFFALSE 9022
// sEngine := true ;
9014: LD_ADDR_EXP 23
9018: PUSH
9019: LD_INT 1
9021: ST_TO_ADDR
// if p3 = 4 then
9022: LD_VAR 0 3
9026: PUSH
9027: LD_INT 4
9029: EQUAL
9030: IFFALSE 9040
// sSpec := true ;
9032: LD_ADDR_EXP 20
9036: PUSH
9037: LD_INT 1
9039: ST_TO_ADDR
// if p3 = 5 then
9040: LD_VAR 0 3
9044: PUSH
9045: LD_INT 5
9047: EQUAL
9048: IFFALSE 9058
// sLevel := true ;
9050: LD_ADDR_EXP 24
9054: PUSH
9055: LD_INT 1
9057: ST_TO_ADDR
// if p3 = 6 then
9058: LD_VAR 0 3
9062: PUSH
9063: LD_INT 6
9065: EQUAL
9066: IFFALSE 9076
// sArmoury := true ;
9068: LD_ADDR_EXP 25
9072: PUSH
9073: LD_INT 1
9075: ST_TO_ADDR
// if p3 = 7 then
9076: LD_VAR 0 3
9080: PUSH
9081: LD_INT 7
9083: EQUAL
9084: IFFALSE 9094
// sRadar := true ;
9086: LD_ADDR_EXP 26
9090: PUSH
9091: LD_INT 1
9093: ST_TO_ADDR
// if p3 = 8 then
9094: LD_VAR 0 3
9098: PUSH
9099: LD_INT 8
9101: EQUAL
9102: IFFALSE 9112
// sBunker := true ;
9104: LD_ADDR_EXP 27
9108: PUSH
9109: LD_INT 1
9111: ST_TO_ADDR
// if p3 = 9 then
9112: LD_VAR 0 3
9116: PUSH
9117: LD_INT 9
9119: EQUAL
9120: IFFALSE 9130
// sHack := true ;
9122: LD_ADDR_EXP 28
9126: PUSH
9127: LD_INT 1
9129: ST_TO_ADDR
// if p3 = 10 then
9130: LD_VAR 0 3
9134: PUSH
9135: LD_INT 10
9137: EQUAL
9138: IFFALSE 9148
// sFire := true ;
9140: LD_ADDR_EXP 29
9144: PUSH
9145: LD_INT 1
9147: ST_TO_ADDR
// if p3 = 11 then
9148: LD_VAR 0 3
9152: PUSH
9153: LD_INT 11
9155: EQUAL
9156: IFFALSE 9166
// sRefresh := true ;
9158: LD_ADDR_EXP 30
9162: PUSH
9163: LD_INT 1
9165: ST_TO_ADDR
// if p3 = 12 then
9166: LD_VAR 0 3
9170: PUSH
9171: LD_INT 12
9173: EQUAL
9174: IFFALSE 9184
// sExp := true ;
9176: LD_ADDR_EXP 31
9180: PUSH
9181: LD_INT 1
9183: ST_TO_ADDR
// if p3 = 13 then
9184: LD_VAR 0 3
9188: PUSH
9189: LD_INT 13
9191: EQUAL
9192: IFFALSE 9202
// sDepot := true ;
9194: LD_ADDR_EXP 32
9198: PUSH
9199: LD_INT 1
9201: ST_TO_ADDR
// if p3 = 14 then
9202: LD_VAR 0 3
9206: PUSH
9207: LD_INT 14
9209: EQUAL
9210: IFFALSE 9220
// sFlag := true ;
9212: LD_ADDR_EXP 33
9216: PUSH
9217: LD_INT 1
9219: ST_TO_ADDR
// if p3 = 15 then
9220: LD_VAR 0 3
9224: PUSH
9225: LD_INT 15
9227: EQUAL
9228: IFFALSE 9238
// sKamikadze := true ;
9230: LD_ADDR_EXP 41
9234: PUSH
9235: LD_INT 1
9237: ST_TO_ADDR
// if p3 = 16 then
9238: LD_VAR 0 3
9242: PUSH
9243: LD_INT 16
9245: EQUAL
9246: IFFALSE 9256
// sTroll := true ;
9248: LD_ADDR_EXP 42
9252: PUSH
9253: LD_INT 1
9255: ST_TO_ADDR
// if p3 = 17 then
9256: LD_VAR 0 3
9260: PUSH
9261: LD_INT 17
9263: EQUAL
9264: IFFALSE 9274
// sSlow := true ;
9266: LD_ADDR_EXP 43
9270: PUSH
9271: LD_INT 1
9273: ST_TO_ADDR
// if p3 = 18 then
9274: LD_VAR 0 3
9278: PUSH
9279: LD_INT 18
9281: EQUAL
9282: IFFALSE 9292
// sLack := true ;
9284: LD_ADDR_EXP 44
9288: PUSH
9289: LD_INT 1
9291: ST_TO_ADDR
// if p3 = 19 then
9292: LD_VAR 0 3
9296: PUSH
9297: LD_INT 19
9299: EQUAL
9300: IFFALSE 9310
// sTank := true ;
9302: LD_ADDR_EXP 46
9306: PUSH
9307: LD_INT 1
9309: ST_TO_ADDR
// if p3 = 20 then
9310: LD_VAR 0 3
9314: PUSH
9315: LD_INT 20
9317: EQUAL
9318: IFFALSE 9328
// sRemote := true ;
9320: LD_ADDR_EXP 47
9324: PUSH
9325: LD_INT 1
9327: ST_TO_ADDR
// if p3 = 21 then
9328: LD_VAR 0 3
9332: PUSH
9333: LD_INT 21
9335: EQUAL
9336: IFFALSE 9346
// sPowell := true ;
9338: LD_ADDR_EXP 48
9342: PUSH
9343: LD_INT 1
9345: ST_TO_ADDR
// if p3 = 22 then
9346: LD_VAR 0 3
9350: PUSH
9351: LD_INT 22
9353: EQUAL
9354: IFFALSE 9364
// sTeleport := true ;
9356: LD_ADDR_EXP 51
9360: PUSH
9361: LD_INT 1
9363: ST_TO_ADDR
// if p3 = 23 then
9364: LD_VAR 0 3
9368: PUSH
9369: LD_INT 23
9371: EQUAL
9372: IFFALSE 9382
// sOilTower := true ;
9374: LD_ADDR_EXP 53
9378: PUSH
9379: LD_INT 1
9381: ST_TO_ADDR
// if p3 = 24 then
9382: LD_VAR 0 3
9386: PUSH
9387: LD_INT 24
9389: EQUAL
9390: IFFALSE 9400
// sShovel := true ;
9392: LD_ADDR_EXP 54
9396: PUSH
9397: LD_INT 1
9399: ST_TO_ADDR
// if p3 = 25 then
9400: LD_VAR 0 3
9404: PUSH
9405: LD_INT 25
9407: EQUAL
9408: IFFALSE 9418
// sSheik := true ;
9410: LD_ADDR_EXP 55
9414: PUSH
9415: LD_INT 1
9417: ST_TO_ADDR
// if p3 = 26 then
9418: LD_VAR 0 3
9422: PUSH
9423: LD_INT 26
9425: EQUAL
9426: IFFALSE 9436
// sEarthquake := true ;
9428: LD_ADDR_EXP 57
9432: PUSH
9433: LD_INT 1
9435: ST_TO_ADDR
// if p3 = 27 then
9436: LD_VAR 0 3
9440: PUSH
9441: LD_INT 27
9443: EQUAL
9444: IFFALSE 9454
// sAI := true ;
9446: LD_ADDR_EXP 58
9450: PUSH
9451: LD_INT 1
9453: ST_TO_ADDR
// if p3 = 28 then
9454: LD_VAR 0 3
9458: PUSH
9459: LD_INT 28
9461: EQUAL
9462: IFFALSE 9472
// sCargo := true ;
9464: LD_ADDR_EXP 61
9468: PUSH
9469: LD_INT 1
9471: ST_TO_ADDR
// if p3 = 29 then
9472: LD_VAR 0 3
9476: PUSH
9477: LD_INT 29
9479: EQUAL
9480: IFFALSE 9490
// sDLaser := true ;
9482: LD_ADDR_EXP 62
9486: PUSH
9487: LD_INT 1
9489: ST_TO_ADDR
// if p3 = 30 then
9490: LD_VAR 0 3
9494: PUSH
9495: LD_INT 30
9497: EQUAL
9498: IFFALSE 9508
// sExchange := true ;
9500: LD_ADDR_EXP 63
9504: PUSH
9505: LD_INT 1
9507: ST_TO_ADDR
// if p3 = 31 then
9508: LD_VAR 0 3
9512: PUSH
9513: LD_INT 31
9515: EQUAL
9516: IFFALSE 9526
// sFac := true ;
9518: LD_ADDR_EXP 64
9522: PUSH
9523: LD_INT 1
9525: ST_TO_ADDR
// if p3 = 32 then
9526: LD_VAR 0 3
9530: PUSH
9531: LD_INT 32
9533: EQUAL
9534: IFFALSE 9544
// sPower := true ;
9536: LD_ADDR_EXP 65
9540: PUSH
9541: LD_INT 1
9543: ST_TO_ADDR
// if p3 = 33 then
9544: LD_VAR 0 3
9548: PUSH
9549: LD_INT 33
9551: EQUAL
9552: IFFALSE 9562
// sRandom := true ;
9554: LD_ADDR_EXP 66
9558: PUSH
9559: LD_INT 1
9561: ST_TO_ADDR
// if p3 = 34 then
9562: LD_VAR 0 3
9566: PUSH
9567: LD_INT 34
9569: EQUAL
9570: IFFALSE 9580
// sShield := true ;
9572: LD_ADDR_EXP 67
9576: PUSH
9577: LD_INT 1
9579: ST_TO_ADDR
// if p3 = 35 then
9580: LD_VAR 0 3
9584: PUSH
9585: LD_INT 35
9587: EQUAL
9588: IFFALSE 9598
// sTime := true ;
9590: LD_ADDR_EXP 68
9594: PUSH
9595: LD_INT 1
9597: ST_TO_ADDR
// if p3 = 36 then
9598: LD_VAR 0 3
9602: PUSH
9603: LD_INT 36
9605: EQUAL
9606: IFFALSE 9616
// sTools := true ;
9608: LD_ADDR_EXP 69
9612: PUSH
9613: LD_INT 1
9615: ST_TO_ADDR
// if p3 = 101 then
9616: LD_VAR 0 3
9620: PUSH
9621: LD_INT 101
9623: EQUAL
9624: IFFALSE 9634
// sSold := true ;
9626: LD_ADDR_EXP 34
9630: PUSH
9631: LD_INT 1
9633: ST_TO_ADDR
// if p3 = 102 then
9634: LD_VAR 0 3
9638: PUSH
9639: LD_INT 102
9641: EQUAL
9642: IFFALSE 9652
// sDiff := true ;
9644: LD_ADDR_EXP 35
9648: PUSH
9649: LD_INT 1
9651: ST_TO_ADDR
// if p3 = 103 then
9652: LD_VAR 0 3
9656: PUSH
9657: LD_INT 103
9659: EQUAL
9660: IFFALSE 9670
// sFog := true ;
9662: LD_ADDR_EXP 38
9666: PUSH
9667: LD_INT 1
9669: ST_TO_ADDR
// if p3 = 104 then
9670: LD_VAR 0 3
9674: PUSH
9675: LD_INT 104
9677: EQUAL
9678: IFFALSE 9688
// sReset := true ;
9680: LD_ADDR_EXP 39
9684: PUSH
9685: LD_INT 1
9687: ST_TO_ADDR
// if p3 = 105 then
9688: LD_VAR 0 3
9692: PUSH
9693: LD_INT 105
9695: EQUAL
9696: IFFALSE 9706
// sSun := true ;
9698: LD_ADDR_EXP 40
9702: PUSH
9703: LD_INT 1
9705: ST_TO_ADDR
// if p3 = 106 then
9706: LD_VAR 0 3
9710: PUSH
9711: LD_INT 106
9713: EQUAL
9714: IFFALSE 9724
// sTiger := true ;
9716: LD_ADDR_EXP 36
9720: PUSH
9721: LD_INT 1
9723: ST_TO_ADDR
// if p3 = 107 then
9724: LD_VAR 0 3
9728: PUSH
9729: LD_INT 107
9731: EQUAL
9732: IFFALSE 9742
// sBomb := true ;
9734: LD_ADDR_EXP 37
9738: PUSH
9739: LD_INT 1
9741: ST_TO_ADDR
// if p3 = 108 then
9742: LD_VAR 0 3
9746: PUSH
9747: LD_INT 108
9749: EQUAL
9750: IFFALSE 9760
// sWound := true ;
9752: LD_ADDR_EXP 45
9756: PUSH
9757: LD_INT 1
9759: ST_TO_ADDR
// if p3 = 109 then
9760: LD_VAR 0 3
9764: PUSH
9765: LD_INT 109
9767: EQUAL
9768: IFFALSE 9778
// sBetray := true ;
9770: LD_ADDR_EXP 49
9774: PUSH
9775: LD_INT 1
9777: ST_TO_ADDR
// if p3 = 110 then
9778: LD_VAR 0 3
9782: PUSH
9783: LD_INT 110
9785: EQUAL
9786: IFFALSE 9796
// sContamin := true ;
9788: LD_ADDR_EXP 50
9792: PUSH
9793: LD_INT 1
9795: ST_TO_ADDR
// if p3 = 111 then
9796: LD_VAR 0 3
9800: PUSH
9801: LD_INT 111
9803: EQUAL
9804: IFFALSE 9814
// sOil := true ;
9806: LD_ADDR_EXP 52
9810: PUSH
9811: LD_INT 1
9813: ST_TO_ADDR
// if p3 = 112 then
9814: LD_VAR 0 3
9818: PUSH
9819: LD_INT 112
9821: EQUAL
9822: IFFALSE 9832
// sStu := true ;
9824: LD_ADDR_EXP 56
9828: PUSH
9829: LD_INT 1
9831: ST_TO_ADDR
// if p3 = 113 then
9832: LD_VAR 0 3
9836: PUSH
9837: LD_INT 113
9839: EQUAL
9840: IFFALSE 9850
// sBazooka := true ;
9842: LD_ADDR_EXP 59
9846: PUSH
9847: LD_INT 1
9849: ST_TO_ADDR
// if p3 = 114 then
9850: LD_VAR 0 3
9854: PUSH
9855: LD_INT 114
9857: EQUAL
9858: IFFALSE 9868
// sMortar := true ;
9860: LD_ADDR_EXP 60
9864: PUSH
9865: LD_INT 1
9867: ST_TO_ADDR
// if p3 = 115 then
9868: LD_VAR 0 3
9872: PUSH
9873: LD_INT 115
9875: EQUAL
9876: IFFALSE 9886
// sRanger := true ;
9878: LD_ADDR_EXP 70
9882: PUSH
9883: LD_INT 1
9885: ST_TO_ADDR
// end ; end ;
9886: PPOPN 6
9888: END
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
9889: LD_EXP 17
9893: PUSH
9894: LD_EXP 22
9898: AND
9899: IFFALSE 10023
9901: GO 9903
9903: DISABLE
9904: LD_INT 0
9906: PPUSH
9907: PPUSH
// begin enable ;
9908: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
9909: LD_ADDR_VAR 0 2
9913: PUSH
9914: LD_INT 22
9916: PUSH
9917: LD_OWVAR 2
9921: PUSH
9922: EMPTY
9923: LIST
9924: LIST
9925: PUSH
9926: LD_INT 2
9928: PUSH
9929: LD_INT 34
9931: PUSH
9932: LD_INT 7
9934: PUSH
9935: EMPTY
9936: LIST
9937: LIST
9938: PUSH
9939: LD_INT 34
9941: PUSH
9942: LD_INT 45
9944: PUSH
9945: EMPTY
9946: LIST
9947: LIST
9948: PUSH
9949: LD_INT 34
9951: PUSH
9952: LD_INT 28
9954: PUSH
9955: EMPTY
9956: LIST
9957: LIST
9958: PUSH
9959: LD_INT 34
9961: PUSH
9962: LD_INT 47
9964: PUSH
9965: EMPTY
9966: LIST
9967: LIST
9968: PUSH
9969: EMPTY
9970: LIST
9971: LIST
9972: LIST
9973: LIST
9974: LIST
9975: PUSH
9976: EMPTY
9977: LIST
9978: LIST
9979: PPUSH
9980: CALL_OW 69
9984: ST_TO_ADDR
// if not tmp then
9985: LD_VAR 0 2
9989: NOT
9990: IFFALSE 9994
// exit ;
9992: GO 10023
// for i in tmp do
9994: LD_ADDR_VAR 0 1
9998: PUSH
9999: LD_VAR 0 2
10003: PUSH
10004: FOR_IN
10005: IFFALSE 10021
// begin SetLives ( i , 0 ) ;
10007: LD_VAR 0 1
10011: PPUSH
10012: LD_INT 0
10014: PPUSH
10015: CALL_OW 234
// end ;
10019: GO 10004
10021: POP
10022: POP
// end ;
10023: PPOPN 2
10025: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
10026: LD_EXP 17
10030: PUSH
10031: LD_EXP 23
10035: AND
10036: IFFALSE 10120
10038: GO 10040
10040: DISABLE
10041: LD_INT 0
10043: PPUSH
10044: PPUSH
// begin enable ;
10045: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
10046: LD_ADDR_VAR 0 2
10050: PUSH
10051: LD_INT 22
10053: PUSH
10054: LD_OWVAR 2
10058: PUSH
10059: EMPTY
10060: LIST
10061: LIST
10062: PUSH
10063: LD_INT 32
10065: PUSH
10066: LD_INT 3
10068: PUSH
10069: EMPTY
10070: LIST
10071: LIST
10072: PUSH
10073: EMPTY
10074: LIST
10075: LIST
10076: PPUSH
10077: CALL_OW 69
10081: ST_TO_ADDR
// if not tmp then
10082: LD_VAR 0 2
10086: NOT
10087: IFFALSE 10091
// exit ;
10089: GO 10120
// for i in tmp do
10091: LD_ADDR_VAR 0 1
10095: PUSH
10096: LD_VAR 0 2
10100: PUSH
10101: FOR_IN
10102: IFFALSE 10118
// begin SetLives ( i , 0 ) ;
10104: LD_VAR 0 1
10108: PPUSH
10109: LD_INT 0
10111: PPUSH
10112: CALL_OW 234
// end ;
10116: GO 10101
10118: POP
10119: POP
// end ;
10120: PPOPN 2
10122: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
10123: LD_EXP 17
10127: PUSH
10128: LD_EXP 20
10132: AND
10133: IFFALSE 10226
10135: GO 10137
10137: DISABLE
10138: LD_INT 0
10140: PPUSH
// begin enable ;
10141: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
10142: LD_ADDR_VAR 0 1
10146: PUSH
10147: LD_INT 22
10149: PUSH
10150: LD_OWVAR 2
10154: PUSH
10155: EMPTY
10156: LIST
10157: LIST
10158: PUSH
10159: LD_INT 2
10161: PUSH
10162: LD_INT 25
10164: PUSH
10165: LD_INT 5
10167: PUSH
10168: EMPTY
10169: LIST
10170: LIST
10171: PUSH
10172: LD_INT 25
10174: PUSH
10175: LD_INT 9
10177: PUSH
10178: EMPTY
10179: LIST
10180: LIST
10181: PUSH
10182: LD_INT 25
10184: PUSH
10185: LD_INT 8
10187: PUSH
10188: EMPTY
10189: LIST
10190: LIST
10191: PUSH
10192: EMPTY
10193: LIST
10194: LIST
10195: LIST
10196: LIST
10197: PUSH
10198: EMPTY
10199: LIST
10200: LIST
10201: PPUSH
10202: CALL_OW 69
10206: PUSH
10207: FOR_IN
10208: IFFALSE 10224
// begin SetClass ( i , 1 ) ;
10210: LD_VAR 0 1
10214: PPUSH
10215: LD_INT 1
10217: PPUSH
10218: CALL_OW 336
// end ;
10222: GO 10207
10224: POP
10225: POP
// end ;
10226: PPOPN 1
10228: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
10229: LD_EXP 17
10233: PUSH
10234: LD_EXP 21
10238: AND
10239: PUSH
10240: LD_OWVAR 65
10244: PUSH
10245: LD_INT 7
10247: LESS
10248: AND
10249: IFFALSE 10263
10251: GO 10253
10253: DISABLE
// begin enable ;
10254: ENABLE
// game_speed := 7 ;
10255: LD_ADDR_OWVAR 65
10259: PUSH
10260: LD_INT 7
10262: ST_TO_ADDR
// end ;
10263: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
10264: LD_EXP 17
10268: PUSH
10269: LD_EXP 24
10273: AND
10274: IFFALSE 10476
10276: GO 10278
10278: DISABLE
10279: LD_INT 0
10281: PPUSH
10282: PPUSH
10283: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
10284: LD_ADDR_VAR 0 3
10288: PUSH
10289: LD_INT 81
10291: PUSH
10292: LD_OWVAR 2
10296: PUSH
10297: EMPTY
10298: LIST
10299: LIST
10300: PUSH
10301: LD_INT 21
10303: PUSH
10304: LD_INT 1
10306: PUSH
10307: EMPTY
10308: LIST
10309: LIST
10310: PUSH
10311: EMPTY
10312: LIST
10313: LIST
10314: PPUSH
10315: CALL_OW 69
10319: ST_TO_ADDR
// if not tmp then
10320: LD_VAR 0 3
10324: NOT
10325: IFFALSE 10329
// exit ;
10327: GO 10476
// if tmp > 5 then
10329: LD_VAR 0 3
10333: PUSH
10334: LD_INT 5
10336: GREATER
10337: IFFALSE 10349
// k := 5 else
10339: LD_ADDR_VAR 0 2
10343: PUSH
10344: LD_INT 5
10346: ST_TO_ADDR
10347: GO 10359
// k := tmp ;
10349: LD_ADDR_VAR 0 2
10353: PUSH
10354: LD_VAR 0 3
10358: ST_TO_ADDR
// for i := 1 to k do
10359: LD_ADDR_VAR 0 1
10363: PUSH
10364: DOUBLE
10365: LD_INT 1
10367: DEC
10368: ST_TO_ADDR
10369: LD_VAR 0 2
10373: PUSH
10374: FOR_TO
10375: IFFALSE 10474
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
10377: LD_VAR 0 3
10381: PUSH
10382: LD_VAR 0 1
10386: ARRAY
10387: PPUSH
10388: LD_VAR 0 1
10392: PUSH
10393: LD_INT 4
10395: MOD
10396: PUSH
10397: LD_INT 1
10399: PLUS
10400: PPUSH
10401: CALL_OW 259
10405: PUSH
10406: LD_INT 10
10408: LESS
10409: IFFALSE 10472
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
10411: LD_VAR 0 3
10415: PUSH
10416: LD_VAR 0 1
10420: ARRAY
10421: PPUSH
10422: LD_VAR 0 1
10426: PUSH
10427: LD_INT 4
10429: MOD
10430: PUSH
10431: LD_INT 1
10433: PLUS
10434: PPUSH
10435: LD_VAR 0 3
10439: PUSH
10440: LD_VAR 0 1
10444: ARRAY
10445: PPUSH
10446: LD_VAR 0 1
10450: PUSH
10451: LD_INT 4
10453: MOD
10454: PUSH
10455: LD_INT 1
10457: PLUS
10458: PPUSH
10459: CALL_OW 259
10463: PUSH
10464: LD_INT 1
10466: PLUS
10467: PPUSH
10468: CALL_OW 237
10472: GO 10374
10474: POP
10475: POP
// end ;
10476: PPOPN 3
10478: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
10479: LD_EXP 17
10483: PUSH
10484: LD_EXP 25
10488: AND
10489: IFFALSE 10509
10491: GO 10493
10493: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
10494: LD_INT 4
10496: PPUSH
10497: LD_OWVAR 2
10501: PPUSH
10502: LD_INT 0
10504: PPUSH
10505: CALL_OW 324
10509: END
// every 0 0$1 trigger StreamModeActive and sShovel do
10510: LD_EXP 17
10514: PUSH
10515: LD_EXP 54
10519: AND
10520: IFFALSE 10540
10522: GO 10524
10524: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
10525: LD_INT 19
10527: PPUSH
10528: LD_OWVAR 2
10532: PPUSH
10533: LD_INT 0
10535: PPUSH
10536: CALL_OW 324
10540: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
10541: LD_EXP 17
10545: PUSH
10546: LD_EXP 26
10550: AND
10551: IFFALSE 10653
10553: GO 10555
10555: DISABLE
10556: LD_INT 0
10558: PPUSH
10559: PPUSH
// begin enable ;
10560: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
10561: LD_ADDR_VAR 0 2
10565: PUSH
10566: LD_INT 22
10568: PUSH
10569: LD_OWVAR 2
10573: PUSH
10574: EMPTY
10575: LIST
10576: LIST
10577: PUSH
10578: LD_INT 2
10580: PUSH
10581: LD_INT 34
10583: PUSH
10584: LD_INT 11
10586: PUSH
10587: EMPTY
10588: LIST
10589: LIST
10590: PUSH
10591: LD_INT 34
10593: PUSH
10594: LD_INT 30
10596: PUSH
10597: EMPTY
10598: LIST
10599: LIST
10600: PUSH
10601: EMPTY
10602: LIST
10603: LIST
10604: LIST
10605: PUSH
10606: EMPTY
10607: LIST
10608: LIST
10609: PPUSH
10610: CALL_OW 69
10614: ST_TO_ADDR
// if not tmp then
10615: LD_VAR 0 2
10619: NOT
10620: IFFALSE 10624
// exit ;
10622: GO 10653
// for i in tmp do
10624: LD_ADDR_VAR 0 1
10628: PUSH
10629: LD_VAR 0 2
10633: PUSH
10634: FOR_IN
10635: IFFALSE 10651
// begin SetLives ( i , 0 ) ;
10637: LD_VAR 0 1
10641: PPUSH
10642: LD_INT 0
10644: PPUSH
10645: CALL_OW 234
// end ;
10649: GO 10634
10651: POP
10652: POP
// end ;
10653: PPOPN 2
10655: END
// every 0 0$1 trigger StreamModeActive and sBunker do
10656: LD_EXP 17
10660: PUSH
10661: LD_EXP 27
10665: AND
10666: IFFALSE 10686
10668: GO 10670
10670: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
10671: LD_INT 32
10673: PPUSH
10674: LD_OWVAR 2
10678: PPUSH
10679: LD_INT 0
10681: PPUSH
10682: CALL_OW 324
10686: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
10687: LD_EXP 17
10691: PUSH
10692: LD_EXP 28
10696: AND
10697: IFFALSE 10878
10699: GO 10701
10701: DISABLE
10702: LD_INT 0
10704: PPUSH
10705: PPUSH
10706: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
10707: LD_ADDR_VAR 0 2
10711: PUSH
10712: LD_INT 22
10714: PUSH
10715: LD_OWVAR 2
10719: PUSH
10720: EMPTY
10721: LIST
10722: LIST
10723: PUSH
10724: LD_INT 33
10726: PUSH
10727: LD_INT 3
10729: PUSH
10730: EMPTY
10731: LIST
10732: LIST
10733: PUSH
10734: EMPTY
10735: LIST
10736: LIST
10737: PPUSH
10738: CALL_OW 69
10742: ST_TO_ADDR
// if not tmp then
10743: LD_VAR 0 2
10747: NOT
10748: IFFALSE 10752
// exit ;
10750: GO 10878
// side := 0 ;
10752: LD_ADDR_VAR 0 3
10756: PUSH
10757: LD_INT 0
10759: ST_TO_ADDR
// for i := 1 to 8 do
10760: LD_ADDR_VAR 0 1
10764: PUSH
10765: DOUBLE
10766: LD_INT 1
10768: DEC
10769: ST_TO_ADDR
10770: LD_INT 8
10772: PUSH
10773: FOR_TO
10774: IFFALSE 10822
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
10776: LD_OWVAR 2
10780: PUSH
10781: LD_VAR 0 1
10785: NONEQUAL
10786: PUSH
10787: LD_OWVAR 2
10791: PPUSH
10792: LD_VAR 0 1
10796: PPUSH
10797: CALL_OW 81
10801: PUSH
10802: LD_INT 2
10804: EQUAL
10805: AND
10806: IFFALSE 10820
// begin side := i ;
10808: LD_ADDR_VAR 0 3
10812: PUSH
10813: LD_VAR 0 1
10817: ST_TO_ADDR
// break ;
10818: GO 10822
// end ;
10820: GO 10773
10822: POP
10823: POP
// if not side then
10824: LD_VAR 0 3
10828: NOT
10829: IFFALSE 10833
// exit ;
10831: GO 10878
// for i := 1 to tmp do
10833: LD_ADDR_VAR 0 1
10837: PUSH
10838: DOUBLE
10839: LD_INT 1
10841: DEC
10842: ST_TO_ADDR
10843: LD_VAR 0 2
10847: PUSH
10848: FOR_TO
10849: IFFALSE 10876
// if Prob ( 60 ) then
10851: LD_INT 60
10853: PPUSH
10854: CALL_OW 13
10858: IFFALSE 10874
// SetSide ( i , side ) ;
10860: LD_VAR 0 1
10864: PPUSH
10865: LD_VAR 0 3
10869: PPUSH
10870: CALL_OW 235
10874: GO 10848
10876: POP
10877: POP
// end ;
10878: PPOPN 3
10880: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
10881: LD_EXP 17
10885: PUSH
10886: LD_EXP 30
10890: AND
10891: IFFALSE 11010
10893: GO 10895
10895: DISABLE
10896: LD_INT 0
10898: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
10899: LD_ADDR_VAR 0 1
10903: PUSH
10904: LD_INT 22
10906: PUSH
10907: LD_OWVAR 2
10911: PUSH
10912: EMPTY
10913: LIST
10914: LIST
10915: PUSH
10916: LD_INT 21
10918: PUSH
10919: LD_INT 1
10921: PUSH
10922: EMPTY
10923: LIST
10924: LIST
10925: PUSH
10926: LD_INT 3
10928: PUSH
10929: LD_INT 23
10931: PUSH
10932: LD_INT 0
10934: PUSH
10935: EMPTY
10936: LIST
10937: LIST
10938: PUSH
10939: EMPTY
10940: LIST
10941: LIST
10942: PUSH
10943: EMPTY
10944: LIST
10945: LIST
10946: LIST
10947: PPUSH
10948: CALL_OW 69
10952: PUSH
10953: FOR_IN
10954: IFFALSE 11008
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
10956: LD_VAR 0 1
10960: PPUSH
10961: CALL_OW 257
10965: PUSH
10966: LD_INT 1
10968: PUSH
10969: LD_INT 2
10971: PUSH
10972: LD_INT 3
10974: PUSH
10975: LD_INT 4
10977: PUSH
10978: EMPTY
10979: LIST
10980: LIST
10981: LIST
10982: LIST
10983: IN
10984: IFFALSE 11006
// SetClass ( un , rand ( 1 , 4 ) ) ;
10986: LD_VAR 0 1
10990: PPUSH
10991: LD_INT 1
10993: PPUSH
10994: LD_INT 4
10996: PPUSH
10997: CALL_OW 12
11001: PPUSH
11002: CALL_OW 336
11006: GO 10953
11008: POP
11009: POP
// end ;
11010: PPOPN 1
11012: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
11013: LD_EXP 17
11017: PUSH
11018: LD_EXP 29
11022: AND
11023: IFFALSE 11102
11025: GO 11027
11027: DISABLE
11028: LD_INT 0
11030: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11031: LD_ADDR_VAR 0 1
11035: PUSH
11036: LD_INT 22
11038: PUSH
11039: LD_OWVAR 2
11043: PUSH
11044: EMPTY
11045: LIST
11046: LIST
11047: PUSH
11048: LD_INT 21
11050: PUSH
11051: LD_INT 3
11053: PUSH
11054: EMPTY
11055: LIST
11056: LIST
11057: PUSH
11058: EMPTY
11059: LIST
11060: LIST
11061: PPUSH
11062: CALL_OW 69
11066: ST_TO_ADDR
// if not tmp then
11067: LD_VAR 0 1
11071: NOT
11072: IFFALSE 11076
// exit ;
11074: GO 11102
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
11076: LD_VAR 0 1
11080: PUSH
11081: LD_INT 1
11083: PPUSH
11084: LD_VAR 0 1
11088: PPUSH
11089: CALL_OW 12
11093: ARRAY
11094: PPUSH
11095: LD_INT 100
11097: PPUSH
11098: CALL_OW 234
// end ;
11102: PPOPN 1
11104: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
11105: LD_EXP 17
11109: PUSH
11110: LD_EXP 31
11114: AND
11115: IFFALSE 11213
11117: GO 11119
11119: DISABLE
11120: LD_INT 0
11122: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
11123: LD_ADDR_VAR 0 1
11127: PUSH
11128: LD_INT 22
11130: PUSH
11131: LD_OWVAR 2
11135: PUSH
11136: EMPTY
11137: LIST
11138: LIST
11139: PUSH
11140: LD_INT 21
11142: PUSH
11143: LD_INT 1
11145: PUSH
11146: EMPTY
11147: LIST
11148: LIST
11149: PUSH
11150: EMPTY
11151: LIST
11152: LIST
11153: PPUSH
11154: CALL_OW 69
11158: ST_TO_ADDR
// if not tmp then
11159: LD_VAR 0 1
11163: NOT
11164: IFFALSE 11168
// exit ;
11166: GO 11213
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
11168: LD_VAR 0 1
11172: PUSH
11173: LD_INT 1
11175: PPUSH
11176: LD_VAR 0 1
11180: PPUSH
11181: CALL_OW 12
11185: ARRAY
11186: PPUSH
11187: LD_INT 1
11189: PPUSH
11190: LD_INT 4
11192: PPUSH
11193: CALL_OW 12
11197: PPUSH
11198: LD_INT 3000
11200: PPUSH
11201: LD_INT 9000
11203: PPUSH
11204: CALL_OW 12
11208: PPUSH
11209: CALL_OW 492
// end ;
11213: PPOPN 1
11215: END
// every 0 0$1 trigger StreamModeActive and sDepot do
11216: LD_EXP 17
11220: PUSH
11221: LD_EXP 32
11225: AND
11226: IFFALSE 11246
11228: GO 11230
11230: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
11231: LD_INT 1
11233: PPUSH
11234: LD_OWVAR 2
11238: PPUSH
11239: LD_INT 0
11241: PPUSH
11242: CALL_OW 324
11246: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
11247: LD_EXP 17
11251: PUSH
11252: LD_EXP 33
11256: AND
11257: IFFALSE 11340
11259: GO 11261
11261: DISABLE
11262: LD_INT 0
11264: PPUSH
11265: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
11266: LD_ADDR_VAR 0 2
11270: PUSH
11271: LD_INT 22
11273: PUSH
11274: LD_OWVAR 2
11278: PUSH
11279: EMPTY
11280: LIST
11281: LIST
11282: PUSH
11283: LD_INT 21
11285: PUSH
11286: LD_INT 3
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: PUSH
11293: EMPTY
11294: LIST
11295: LIST
11296: PPUSH
11297: CALL_OW 69
11301: ST_TO_ADDR
// if not tmp then
11302: LD_VAR 0 2
11306: NOT
11307: IFFALSE 11311
// exit ;
11309: GO 11340
// for i in tmp do
11311: LD_ADDR_VAR 0 1
11315: PUSH
11316: LD_VAR 0 2
11320: PUSH
11321: FOR_IN
11322: IFFALSE 11338
// SetBLevel ( i , 10 ) ;
11324: LD_VAR 0 1
11328: PPUSH
11329: LD_INT 10
11331: PPUSH
11332: CALL_OW 241
11336: GO 11321
11338: POP
11339: POP
// end ;
11340: PPOPN 2
11342: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
11343: LD_EXP 17
11347: PUSH
11348: LD_EXP 34
11352: AND
11353: IFFALSE 11464
11355: GO 11357
11357: DISABLE
11358: LD_INT 0
11360: PPUSH
11361: PPUSH
11362: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
11363: LD_ADDR_VAR 0 3
11367: PUSH
11368: LD_INT 22
11370: PUSH
11371: LD_OWVAR 2
11375: PUSH
11376: EMPTY
11377: LIST
11378: LIST
11379: PUSH
11380: LD_INT 25
11382: PUSH
11383: LD_INT 1
11385: PUSH
11386: EMPTY
11387: LIST
11388: LIST
11389: PUSH
11390: EMPTY
11391: LIST
11392: LIST
11393: PPUSH
11394: CALL_OW 69
11398: ST_TO_ADDR
// if not tmp then
11399: LD_VAR 0 3
11403: NOT
11404: IFFALSE 11408
// exit ;
11406: GO 11464
// un := tmp [ rand ( 1 , tmp ) ] ;
11408: LD_ADDR_VAR 0 2
11412: PUSH
11413: LD_VAR 0 3
11417: PUSH
11418: LD_INT 1
11420: PPUSH
11421: LD_VAR 0 3
11425: PPUSH
11426: CALL_OW 12
11430: ARRAY
11431: ST_TO_ADDR
// if Crawls ( un ) then
11432: LD_VAR 0 2
11436: PPUSH
11437: CALL_OW 318
11441: IFFALSE 11452
// ComWalk ( un ) ;
11443: LD_VAR 0 2
11447: PPUSH
11448: CALL_OW 138
// SetClass ( un , class_sniper ) ;
11452: LD_VAR 0 2
11456: PPUSH
11457: LD_INT 5
11459: PPUSH
11460: CALL_OW 336
// end ;
11464: PPOPN 3
11466: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
11467: LD_EXP 17
11471: PUSH
11472: LD_EXP 35
11476: AND
11477: PUSH
11478: LD_OWVAR 67
11482: PUSH
11483: LD_INT 3
11485: LESS
11486: AND
11487: IFFALSE 11506
11489: GO 11491
11491: DISABLE
// Difficulty := Difficulty + 1 ;
11492: LD_ADDR_OWVAR 67
11496: PUSH
11497: LD_OWVAR 67
11501: PUSH
11502: LD_INT 1
11504: PLUS
11505: ST_TO_ADDR
11506: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
11507: LD_EXP 17
11511: PUSH
11512: LD_EXP 36
11516: AND
11517: IFFALSE 11620
11519: GO 11521
11521: DISABLE
11522: LD_INT 0
11524: PPUSH
// begin for i := 1 to 5 do
11525: LD_ADDR_VAR 0 1
11529: PUSH
11530: DOUBLE
11531: LD_INT 1
11533: DEC
11534: ST_TO_ADDR
11535: LD_INT 5
11537: PUSH
11538: FOR_TO
11539: IFFALSE 11618
// begin uc_nation := nation_nature ;
11541: LD_ADDR_OWVAR 21
11545: PUSH
11546: LD_INT 0
11548: ST_TO_ADDR
// uc_side := 0 ;
11549: LD_ADDR_OWVAR 20
11553: PUSH
11554: LD_INT 0
11556: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
11557: LD_ADDR_OWVAR 29
11561: PUSH
11562: LD_INT 12
11564: PUSH
11565: LD_INT 12
11567: PUSH
11568: EMPTY
11569: LIST
11570: LIST
11571: ST_TO_ADDR
// hc_agressivity := 20 ;
11572: LD_ADDR_OWVAR 35
11576: PUSH
11577: LD_INT 20
11579: ST_TO_ADDR
// hc_class := class_tiger ;
11580: LD_ADDR_OWVAR 28
11584: PUSH
11585: LD_INT 14
11587: ST_TO_ADDR
// hc_gallery :=  ;
11588: LD_ADDR_OWVAR 33
11592: PUSH
11593: LD_STRING 
11595: ST_TO_ADDR
// hc_name :=  ;
11596: LD_ADDR_OWVAR 26
11600: PUSH
11601: LD_STRING 
11603: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
11604: CALL_OW 44
11608: PPUSH
11609: LD_INT 0
11611: PPUSH
11612: CALL_OW 51
// end ;
11616: GO 11538
11618: POP
11619: POP
// end ;
11620: PPOPN 1
11622: END
// every 0 0$1 trigger StreamModeActive and sBomb do
11623: LD_EXP 17
11627: PUSH
11628: LD_EXP 37
11632: AND
11633: IFFALSE 11642
11635: GO 11637
11637: DISABLE
// StreamSibBomb ;
11638: CALL 11643 0 0
11642: END
// export function StreamSibBomb ; var i , x , y ; begin
11643: LD_INT 0
11645: PPUSH
11646: PPUSH
11647: PPUSH
11648: PPUSH
// result := false ;
11649: LD_ADDR_VAR 0 1
11653: PUSH
11654: LD_INT 0
11656: ST_TO_ADDR
// for i := 1 to 16 do
11657: LD_ADDR_VAR 0 2
11661: PUSH
11662: DOUBLE
11663: LD_INT 1
11665: DEC
11666: ST_TO_ADDR
11667: LD_INT 16
11669: PUSH
11670: FOR_TO
11671: IFFALSE 11870
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11673: LD_ADDR_VAR 0 3
11677: PUSH
11678: LD_INT 10
11680: PUSH
11681: LD_INT 20
11683: PUSH
11684: LD_INT 30
11686: PUSH
11687: LD_INT 40
11689: PUSH
11690: LD_INT 50
11692: PUSH
11693: LD_INT 60
11695: PUSH
11696: LD_INT 70
11698: PUSH
11699: LD_INT 80
11701: PUSH
11702: LD_INT 90
11704: PUSH
11705: LD_INT 100
11707: PUSH
11708: LD_INT 110
11710: PUSH
11711: LD_INT 120
11713: PUSH
11714: LD_INT 130
11716: PUSH
11717: LD_INT 140
11719: PUSH
11720: LD_INT 150
11722: PUSH
11723: EMPTY
11724: LIST
11725: LIST
11726: LIST
11727: LIST
11728: LIST
11729: LIST
11730: LIST
11731: LIST
11732: LIST
11733: LIST
11734: LIST
11735: LIST
11736: LIST
11737: LIST
11738: LIST
11739: PUSH
11740: LD_INT 1
11742: PPUSH
11743: LD_INT 15
11745: PPUSH
11746: CALL_OW 12
11750: ARRAY
11751: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
11752: LD_ADDR_VAR 0 4
11756: PUSH
11757: LD_INT 10
11759: PUSH
11760: LD_INT 20
11762: PUSH
11763: LD_INT 30
11765: PUSH
11766: LD_INT 40
11768: PUSH
11769: LD_INT 50
11771: PUSH
11772: LD_INT 60
11774: PUSH
11775: LD_INT 70
11777: PUSH
11778: LD_INT 80
11780: PUSH
11781: LD_INT 90
11783: PUSH
11784: LD_INT 100
11786: PUSH
11787: LD_INT 110
11789: PUSH
11790: LD_INT 120
11792: PUSH
11793: LD_INT 130
11795: PUSH
11796: LD_INT 140
11798: PUSH
11799: LD_INT 150
11801: PUSH
11802: EMPTY
11803: LIST
11804: LIST
11805: LIST
11806: LIST
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: PUSH
11819: LD_INT 1
11821: PPUSH
11822: LD_INT 15
11824: PPUSH
11825: CALL_OW 12
11829: ARRAY
11830: ST_TO_ADDR
// if ValidHex ( x , y ) then
11831: LD_VAR 0 3
11835: PPUSH
11836: LD_VAR 0 4
11840: PPUSH
11841: CALL_OW 488
11845: IFFALSE 11868
// begin result := [ x , y ] ;
11847: LD_ADDR_VAR 0 1
11851: PUSH
11852: LD_VAR 0 3
11856: PUSH
11857: LD_VAR 0 4
11861: PUSH
11862: EMPTY
11863: LIST
11864: LIST
11865: ST_TO_ADDR
// break ;
11866: GO 11870
// end ; end ;
11868: GO 11670
11870: POP
11871: POP
// if result then
11872: LD_VAR 0 1
11876: IFFALSE 11936
// begin ToLua ( playSibBomb() ) ;
11878: LD_STRING playSibBomb()
11880: PPUSH
11881: CALL_OW 559
// wait ( 0 0$14 ) ;
11885: LD_INT 490
11887: PPUSH
11888: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
11892: LD_VAR 0 1
11896: PUSH
11897: LD_INT 1
11899: ARRAY
11900: PPUSH
11901: LD_VAR 0 1
11905: PUSH
11906: LD_INT 2
11908: ARRAY
11909: PPUSH
11910: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
11914: LD_VAR 0 1
11918: PUSH
11919: LD_INT 1
11921: ARRAY
11922: PPUSH
11923: LD_VAR 0 1
11927: PUSH
11928: LD_INT 2
11930: ARRAY
11931: PPUSH
11932: CALL_OW 429
// end ; end ;
11936: LD_VAR 0 1
11940: RET
// every 0 0$1 trigger StreamModeActive and sReset do
11941: LD_EXP 17
11945: PUSH
11946: LD_EXP 39
11950: AND
11951: IFFALSE 11963
11953: GO 11955
11955: DISABLE
// YouLost (  ) ;
11956: LD_STRING 
11958: PPUSH
11959: CALL_OW 104
11963: END
// every 0 0$1 trigger StreamModeActive and sFog do
11964: LD_EXP 17
11968: PUSH
11969: LD_EXP 38
11973: AND
11974: IFFALSE 11988
11976: GO 11978
11978: DISABLE
// FogOff ( your_side ) ;
11979: LD_OWVAR 2
11983: PPUSH
11984: CALL_OW 344
11988: END
// every 0 0$1 trigger StreamModeActive and sSun do
11989: LD_EXP 17
11993: PUSH
11994: LD_EXP 40
11998: AND
11999: IFFALSE 12027
12001: GO 12003
12003: DISABLE
// begin solar_recharge_percent := 0 ;
12004: LD_ADDR_OWVAR 79
12008: PUSH
12009: LD_INT 0
12011: ST_TO_ADDR
// wait ( 5 5$00 ) ;
12012: LD_INT 10500
12014: PPUSH
12015: CALL_OW 67
// solar_recharge_percent := 100 ;
12019: LD_ADDR_OWVAR 79
12023: PUSH
12024: LD_INT 100
12026: ST_TO_ADDR
// end ;
12027: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
12028: LD_EXP 17
12032: PUSH
12033: LD_EXP 41
12037: AND
12038: IFFALSE 12277
12040: GO 12042
12042: DISABLE
12043: LD_INT 0
12045: PPUSH
12046: PPUSH
12047: PPUSH
// begin tmp := [ ] ;
12048: LD_ADDR_VAR 0 3
12052: PUSH
12053: EMPTY
12054: ST_TO_ADDR
// for i := 1 to 6 do
12055: LD_ADDR_VAR 0 1
12059: PUSH
12060: DOUBLE
12061: LD_INT 1
12063: DEC
12064: ST_TO_ADDR
12065: LD_INT 6
12067: PUSH
12068: FOR_TO
12069: IFFALSE 12174
// begin uc_nation := nation_nature ;
12071: LD_ADDR_OWVAR 21
12075: PUSH
12076: LD_INT 0
12078: ST_TO_ADDR
// uc_side := 0 ;
12079: LD_ADDR_OWVAR 20
12083: PUSH
12084: LD_INT 0
12086: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
12087: LD_ADDR_OWVAR 29
12091: PUSH
12092: LD_INT 12
12094: PUSH
12095: LD_INT 12
12097: PUSH
12098: EMPTY
12099: LIST
12100: LIST
12101: ST_TO_ADDR
// hc_agressivity := 20 ;
12102: LD_ADDR_OWVAR 35
12106: PUSH
12107: LD_INT 20
12109: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
12110: LD_ADDR_OWVAR 28
12114: PUSH
12115: LD_INT 17
12117: ST_TO_ADDR
// hc_gallery :=  ;
12118: LD_ADDR_OWVAR 33
12122: PUSH
12123: LD_STRING 
12125: ST_TO_ADDR
// hc_name :=  ;
12126: LD_ADDR_OWVAR 26
12130: PUSH
12131: LD_STRING 
12133: ST_TO_ADDR
// un := CreateHuman ;
12134: LD_ADDR_VAR 0 2
12138: PUSH
12139: CALL_OW 44
12143: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
12144: LD_VAR 0 2
12148: PPUSH
12149: LD_INT 1
12151: PPUSH
12152: CALL_OW 51
// tmp := tmp ^ un ;
12156: LD_ADDR_VAR 0 3
12160: PUSH
12161: LD_VAR 0 3
12165: PUSH
12166: LD_VAR 0 2
12170: ADD
12171: ST_TO_ADDR
// end ;
12172: GO 12068
12174: POP
12175: POP
// repeat wait ( 0 0$1 ) ;
12176: LD_INT 35
12178: PPUSH
12179: CALL_OW 67
// for un in tmp do
12183: LD_ADDR_VAR 0 2
12187: PUSH
12188: LD_VAR 0 3
12192: PUSH
12193: FOR_IN
12194: IFFALSE 12268
// begin if IsDead ( un ) then
12196: LD_VAR 0 2
12200: PPUSH
12201: CALL_OW 301
12205: IFFALSE 12225
// begin tmp := tmp diff un ;
12207: LD_ADDR_VAR 0 3
12211: PUSH
12212: LD_VAR 0 3
12216: PUSH
12217: LD_VAR 0 2
12221: DIFF
12222: ST_TO_ADDR
// continue ;
12223: GO 12193
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
12225: LD_VAR 0 2
12229: PPUSH
12230: LD_INT 3
12232: PUSH
12233: LD_INT 22
12235: PUSH
12236: LD_INT 0
12238: PUSH
12239: EMPTY
12240: LIST
12241: LIST
12242: PUSH
12243: EMPTY
12244: LIST
12245: LIST
12246: PPUSH
12247: CALL_OW 69
12251: PPUSH
12252: LD_VAR 0 2
12256: PPUSH
12257: CALL_OW 74
12261: PPUSH
12262: CALL_OW 115
// end ;
12266: GO 12193
12268: POP
12269: POP
// until not tmp ;
12270: LD_VAR 0 3
12274: NOT
12275: IFFALSE 12176
// end ;
12277: PPOPN 3
12279: END
// every 0 0$1 trigger StreamModeActive and sTroll do
12280: LD_EXP 17
12284: PUSH
12285: LD_EXP 42
12289: AND
12290: IFFALSE 12344
12292: GO 12294
12294: DISABLE
// begin ToLua ( displayTroll(); ) ;
12295: LD_STRING displayTroll();
12297: PPUSH
12298: CALL_OW 559
// wait ( 3 3$00 ) ;
12302: LD_INT 6300
12304: PPUSH
12305: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12309: LD_STRING hideTroll();
12311: PPUSH
12312: CALL_OW 559
// wait ( 1 1$00 ) ;
12316: LD_INT 2100
12318: PPUSH
12319: CALL_OW 67
// ToLua ( displayTroll(); ) ;
12323: LD_STRING displayTroll();
12325: PPUSH
12326: CALL_OW 559
// wait ( 1 1$00 ) ;
12330: LD_INT 2100
12332: PPUSH
12333: CALL_OW 67
// ToLua ( hideTroll(); ) ;
12337: LD_STRING hideTroll();
12339: PPUSH
12340: CALL_OW 559
// end ;
12344: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
12345: LD_EXP 17
12349: PUSH
12350: LD_EXP 43
12354: AND
12355: IFFALSE 12418
12357: GO 12359
12359: DISABLE
12360: LD_INT 0
12362: PPUSH
// begin p := 0 ;
12363: LD_ADDR_VAR 0 1
12367: PUSH
12368: LD_INT 0
12370: ST_TO_ADDR
// repeat game_speed := 1 ;
12371: LD_ADDR_OWVAR 65
12375: PUSH
12376: LD_INT 1
12378: ST_TO_ADDR
// wait ( 0 0$1 ) ;
12379: LD_INT 35
12381: PPUSH
12382: CALL_OW 67
// p := p + 1 ;
12386: LD_ADDR_VAR 0 1
12390: PUSH
12391: LD_VAR 0 1
12395: PUSH
12396: LD_INT 1
12398: PLUS
12399: ST_TO_ADDR
// until p >= 60 ;
12400: LD_VAR 0 1
12404: PUSH
12405: LD_INT 60
12407: GREATEREQUAL
12408: IFFALSE 12371
// game_speed := 4 ;
12410: LD_ADDR_OWVAR 65
12414: PUSH
12415: LD_INT 4
12417: ST_TO_ADDR
// end ;
12418: PPOPN 1
12420: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
12421: LD_EXP 17
12425: PUSH
12426: LD_EXP 44
12430: AND
12431: IFFALSE 12577
12433: GO 12435
12435: DISABLE
12436: LD_INT 0
12438: PPUSH
12439: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
12440: LD_ADDR_VAR 0 1
12444: PUSH
12445: LD_INT 22
12447: PUSH
12448: LD_OWVAR 2
12452: PUSH
12453: EMPTY
12454: LIST
12455: LIST
12456: PUSH
12457: LD_INT 2
12459: PUSH
12460: LD_INT 30
12462: PUSH
12463: LD_INT 0
12465: PUSH
12466: EMPTY
12467: LIST
12468: LIST
12469: PUSH
12470: LD_INT 30
12472: PUSH
12473: LD_INT 1
12475: PUSH
12476: EMPTY
12477: LIST
12478: LIST
12479: PUSH
12480: EMPTY
12481: LIST
12482: LIST
12483: LIST
12484: PUSH
12485: EMPTY
12486: LIST
12487: LIST
12488: PPUSH
12489: CALL_OW 69
12493: ST_TO_ADDR
// if not depot then
12494: LD_VAR 0 1
12498: NOT
12499: IFFALSE 12503
// exit ;
12501: GO 12577
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
12503: LD_ADDR_VAR 0 2
12507: PUSH
12508: LD_VAR 0 1
12512: PUSH
12513: LD_INT 1
12515: PPUSH
12516: LD_VAR 0 1
12520: PPUSH
12521: CALL_OW 12
12525: ARRAY
12526: PPUSH
12527: CALL_OW 274
12531: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
12532: LD_VAR 0 2
12536: PPUSH
12537: LD_INT 1
12539: PPUSH
12540: LD_INT 0
12542: PPUSH
12543: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
12547: LD_VAR 0 2
12551: PPUSH
12552: LD_INT 2
12554: PPUSH
12555: LD_INT 0
12557: PPUSH
12558: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
12562: LD_VAR 0 2
12566: PPUSH
12567: LD_INT 3
12569: PPUSH
12570: LD_INT 0
12572: PPUSH
12573: CALL_OW 277
// end ;
12577: PPOPN 2
12579: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
12580: LD_EXP 17
12584: PUSH
12585: LD_EXP 45
12589: AND
12590: IFFALSE 12687
12592: GO 12594
12594: DISABLE
12595: LD_INT 0
12597: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
12598: LD_ADDR_VAR 0 1
12602: PUSH
12603: LD_INT 22
12605: PUSH
12606: LD_OWVAR 2
12610: PUSH
12611: EMPTY
12612: LIST
12613: LIST
12614: PUSH
12615: LD_INT 21
12617: PUSH
12618: LD_INT 1
12620: PUSH
12621: EMPTY
12622: LIST
12623: LIST
12624: PUSH
12625: LD_INT 3
12627: PUSH
12628: LD_INT 23
12630: PUSH
12631: LD_INT 0
12633: PUSH
12634: EMPTY
12635: LIST
12636: LIST
12637: PUSH
12638: EMPTY
12639: LIST
12640: LIST
12641: PUSH
12642: EMPTY
12643: LIST
12644: LIST
12645: LIST
12646: PPUSH
12647: CALL_OW 69
12651: ST_TO_ADDR
// if not tmp then
12652: LD_VAR 0 1
12656: NOT
12657: IFFALSE 12661
// exit ;
12659: GO 12687
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
12661: LD_VAR 0 1
12665: PUSH
12666: LD_INT 1
12668: PPUSH
12669: LD_VAR 0 1
12673: PPUSH
12674: CALL_OW 12
12678: ARRAY
12679: PPUSH
12680: LD_INT 200
12682: PPUSH
12683: CALL_OW 234
// end ;
12687: PPOPN 1
12689: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
12690: LD_EXP 17
12694: PUSH
12695: LD_EXP 46
12699: AND
12700: IFFALSE 12779
12702: GO 12704
12704: DISABLE
12705: LD_INT 0
12707: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
12708: LD_ADDR_VAR 0 1
12712: PUSH
12713: LD_INT 22
12715: PUSH
12716: LD_OWVAR 2
12720: PUSH
12721: EMPTY
12722: LIST
12723: LIST
12724: PUSH
12725: LD_INT 21
12727: PUSH
12728: LD_INT 2
12730: PUSH
12731: EMPTY
12732: LIST
12733: LIST
12734: PUSH
12735: EMPTY
12736: LIST
12737: LIST
12738: PPUSH
12739: CALL_OW 69
12743: ST_TO_ADDR
// if not tmp then
12744: LD_VAR 0 1
12748: NOT
12749: IFFALSE 12753
// exit ;
12751: GO 12779
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
12753: LD_VAR 0 1
12757: PUSH
12758: LD_INT 1
12760: PPUSH
12761: LD_VAR 0 1
12765: PPUSH
12766: CALL_OW 12
12770: ARRAY
12771: PPUSH
12772: LD_INT 60
12774: PPUSH
12775: CALL_OW 234
// end ;
12779: PPOPN 1
12781: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
12782: LD_EXP 17
12786: PUSH
12787: LD_EXP 47
12791: AND
12792: IFFALSE 12891
12794: GO 12796
12796: DISABLE
12797: LD_INT 0
12799: PPUSH
12800: PPUSH
// begin enable ;
12801: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
12802: LD_ADDR_VAR 0 1
12806: PUSH
12807: LD_INT 22
12809: PUSH
12810: LD_OWVAR 2
12814: PUSH
12815: EMPTY
12816: LIST
12817: LIST
12818: PUSH
12819: LD_INT 61
12821: PUSH
12822: EMPTY
12823: LIST
12824: PUSH
12825: LD_INT 33
12827: PUSH
12828: LD_INT 2
12830: PUSH
12831: EMPTY
12832: LIST
12833: LIST
12834: PUSH
12835: EMPTY
12836: LIST
12837: LIST
12838: LIST
12839: PPUSH
12840: CALL_OW 69
12844: ST_TO_ADDR
// if not tmp then
12845: LD_VAR 0 1
12849: NOT
12850: IFFALSE 12854
// exit ;
12852: GO 12891
// for i in tmp do
12854: LD_ADDR_VAR 0 2
12858: PUSH
12859: LD_VAR 0 1
12863: PUSH
12864: FOR_IN
12865: IFFALSE 12889
// if IsControledBy ( i ) then
12867: LD_VAR 0 2
12871: PPUSH
12872: CALL_OW 312
12876: IFFALSE 12887
// ComUnlink ( i ) ;
12878: LD_VAR 0 2
12882: PPUSH
12883: CALL_OW 136
12887: GO 12864
12889: POP
12890: POP
// end ;
12891: PPOPN 2
12893: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
12894: LD_EXP 17
12898: PUSH
12899: LD_EXP 48
12903: AND
12904: IFFALSE 13044
12906: GO 12908
12908: DISABLE
12909: LD_INT 0
12911: PPUSH
12912: PPUSH
// begin ToLua ( displayPowell(); ) ;
12913: LD_STRING displayPowell();
12915: PPUSH
12916: CALL_OW 559
// uc_side := 0 ;
12920: LD_ADDR_OWVAR 20
12924: PUSH
12925: LD_INT 0
12927: ST_TO_ADDR
// uc_nation := 2 ;
12928: LD_ADDR_OWVAR 21
12932: PUSH
12933: LD_INT 2
12935: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
12936: LD_ADDR_OWVAR 37
12940: PUSH
12941: LD_INT 14
12943: ST_TO_ADDR
// vc_engine := engine_siberite ;
12944: LD_ADDR_OWVAR 39
12948: PUSH
12949: LD_INT 3
12951: ST_TO_ADDR
// vc_control := control_apeman ;
12952: LD_ADDR_OWVAR 38
12956: PUSH
12957: LD_INT 5
12959: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
12960: LD_ADDR_OWVAR 40
12964: PUSH
12965: LD_INT 29
12967: ST_TO_ADDR
// un := CreateVehicle ;
12968: LD_ADDR_VAR 0 2
12972: PUSH
12973: CALL_OW 45
12977: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
12978: LD_VAR 0 2
12982: PPUSH
12983: LD_INT 1
12985: PPUSH
12986: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
12990: LD_INT 35
12992: PPUSH
12993: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
12997: LD_VAR 0 2
13001: PPUSH
13002: LD_INT 22
13004: PUSH
13005: LD_OWVAR 2
13009: PUSH
13010: EMPTY
13011: LIST
13012: LIST
13013: PPUSH
13014: CALL_OW 69
13018: PPUSH
13019: LD_VAR 0 2
13023: PPUSH
13024: CALL_OW 74
13028: PPUSH
13029: CALL_OW 115
// until IsDead ( un ) ;
13033: LD_VAR 0 2
13037: PPUSH
13038: CALL_OW 301
13042: IFFALSE 12990
// end ;
13044: PPOPN 2
13046: END
// every 0 0$1 trigger StreamModeActive and sStu do
13047: LD_EXP 17
13051: PUSH
13052: LD_EXP 56
13056: AND
13057: IFFALSE 13073
13059: GO 13061
13061: DISABLE
// begin ToLua ( displayStucuk(); ) ;
13062: LD_STRING displayStucuk();
13064: PPUSH
13065: CALL_OW 559
// ResetFog ;
13069: CALL_OW 335
// end ;
13073: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
13074: LD_EXP 17
13078: PUSH
13079: LD_EXP 49
13083: AND
13084: IFFALSE 13225
13086: GO 13088
13088: DISABLE
13089: LD_INT 0
13091: PPUSH
13092: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13093: LD_ADDR_VAR 0 2
13097: PUSH
13098: LD_INT 22
13100: PUSH
13101: LD_OWVAR 2
13105: PUSH
13106: EMPTY
13107: LIST
13108: LIST
13109: PUSH
13110: LD_INT 21
13112: PUSH
13113: LD_INT 1
13115: PUSH
13116: EMPTY
13117: LIST
13118: LIST
13119: PUSH
13120: EMPTY
13121: LIST
13122: LIST
13123: PPUSH
13124: CALL_OW 69
13128: ST_TO_ADDR
// if not tmp then
13129: LD_VAR 0 2
13133: NOT
13134: IFFALSE 13138
// exit ;
13136: GO 13225
// un := tmp [ rand ( 1 , tmp ) ] ;
13138: LD_ADDR_VAR 0 1
13142: PUSH
13143: LD_VAR 0 2
13147: PUSH
13148: LD_INT 1
13150: PPUSH
13151: LD_VAR 0 2
13155: PPUSH
13156: CALL_OW 12
13160: ARRAY
13161: ST_TO_ADDR
// SetSide ( un , 0 ) ;
13162: LD_VAR 0 1
13166: PPUSH
13167: LD_INT 0
13169: PPUSH
13170: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
13174: LD_VAR 0 1
13178: PPUSH
13179: LD_OWVAR 3
13183: PUSH
13184: LD_VAR 0 1
13188: DIFF
13189: PPUSH
13190: LD_VAR 0 1
13194: PPUSH
13195: CALL_OW 74
13199: PPUSH
13200: CALL_OW 115
// wait ( 0 0$20 ) ;
13204: LD_INT 700
13206: PPUSH
13207: CALL_OW 67
// SetSide ( un , your_side ) ;
13211: LD_VAR 0 1
13215: PPUSH
13216: LD_OWVAR 2
13220: PPUSH
13221: CALL_OW 235
// end ;
13225: PPOPN 2
13227: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
13228: LD_EXP 17
13232: PUSH
13233: LD_EXP 50
13237: AND
13238: IFFALSE 13344
13240: GO 13242
13242: DISABLE
13243: LD_INT 0
13245: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
13246: LD_ADDR_VAR 0 1
13250: PUSH
13251: LD_INT 22
13253: PUSH
13254: LD_OWVAR 2
13258: PUSH
13259: EMPTY
13260: LIST
13261: LIST
13262: PUSH
13263: LD_INT 2
13265: PUSH
13266: LD_INT 30
13268: PUSH
13269: LD_INT 0
13271: PUSH
13272: EMPTY
13273: LIST
13274: LIST
13275: PUSH
13276: LD_INT 30
13278: PUSH
13279: LD_INT 1
13281: PUSH
13282: EMPTY
13283: LIST
13284: LIST
13285: PUSH
13286: EMPTY
13287: LIST
13288: LIST
13289: LIST
13290: PUSH
13291: EMPTY
13292: LIST
13293: LIST
13294: PPUSH
13295: CALL_OW 69
13299: ST_TO_ADDR
// if not depot then
13300: LD_VAR 0 1
13304: NOT
13305: IFFALSE 13309
// exit ;
13307: GO 13344
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
13309: LD_VAR 0 1
13313: PUSH
13314: LD_INT 1
13316: ARRAY
13317: PPUSH
13318: CALL_OW 250
13322: PPUSH
13323: LD_VAR 0 1
13327: PUSH
13328: LD_INT 1
13330: ARRAY
13331: PPUSH
13332: CALL_OW 251
13336: PPUSH
13337: LD_INT 70
13339: PPUSH
13340: CALL_OW 495
// end ;
13344: PPOPN 1
13346: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
13347: LD_EXP 17
13351: PUSH
13352: LD_EXP 51
13356: AND
13357: IFFALSE 13568
13359: GO 13361
13361: DISABLE
13362: LD_INT 0
13364: PPUSH
13365: PPUSH
13366: PPUSH
13367: PPUSH
13368: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13369: LD_ADDR_VAR 0 5
13373: PUSH
13374: LD_INT 22
13376: PUSH
13377: LD_OWVAR 2
13381: PUSH
13382: EMPTY
13383: LIST
13384: LIST
13385: PUSH
13386: LD_INT 21
13388: PUSH
13389: LD_INT 1
13391: PUSH
13392: EMPTY
13393: LIST
13394: LIST
13395: PUSH
13396: EMPTY
13397: LIST
13398: LIST
13399: PPUSH
13400: CALL_OW 69
13404: ST_TO_ADDR
// if not tmp then
13405: LD_VAR 0 5
13409: NOT
13410: IFFALSE 13414
// exit ;
13412: GO 13568
// for i in tmp do
13414: LD_ADDR_VAR 0 1
13418: PUSH
13419: LD_VAR 0 5
13423: PUSH
13424: FOR_IN
13425: IFFALSE 13566
// begin d := rand ( 0 , 5 ) ;
13427: LD_ADDR_VAR 0 4
13431: PUSH
13432: LD_INT 0
13434: PPUSH
13435: LD_INT 5
13437: PPUSH
13438: CALL_OW 12
13442: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
13443: LD_ADDR_VAR 0 2
13447: PUSH
13448: LD_VAR 0 1
13452: PPUSH
13453: CALL_OW 250
13457: PPUSH
13458: LD_VAR 0 4
13462: PPUSH
13463: LD_INT 3
13465: PPUSH
13466: LD_INT 12
13468: PPUSH
13469: CALL_OW 12
13473: PPUSH
13474: CALL_OW 272
13478: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
13479: LD_ADDR_VAR 0 3
13483: PUSH
13484: LD_VAR 0 1
13488: PPUSH
13489: CALL_OW 251
13493: PPUSH
13494: LD_VAR 0 4
13498: PPUSH
13499: LD_INT 3
13501: PPUSH
13502: LD_INT 12
13504: PPUSH
13505: CALL_OW 12
13509: PPUSH
13510: CALL_OW 273
13514: ST_TO_ADDR
// if ValidHex ( x , y ) then
13515: LD_VAR 0 2
13519: PPUSH
13520: LD_VAR 0 3
13524: PPUSH
13525: CALL_OW 488
13529: IFFALSE 13564
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
13531: LD_VAR 0 1
13535: PPUSH
13536: LD_VAR 0 2
13540: PPUSH
13541: LD_VAR 0 3
13545: PPUSH
13546: LD_INT 3
13548: PPUSH
13549: LD_INT 6
13551: PPUSH
13552: CALL_OW 12
13556: PPUSH
13557: LD_INT 1
13559: PPUSH
13560: CALL_OW 483
// end ;
13564: GO 13424
13566: POP
13567: POP
// end ;
13568: PPOPN 5
13570: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
13571: LD_EXP 17
13575: PUSH
13576: LD_EXP 52
13580: AND
13581: IFFALSE 13675
13583: GO 13585
13585: DISABLE
13586: LD_INT 0
13588: PPUSH
13589: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
13590: LD_ADDR_VAR 0 2
13594: PUSH
13595: LD_INT 22
13597: PUSH
13598: LD_OWVAR 2
13602: PUSH
13603: EMPTY
13604: LIST
13605: LIST
13606: PUSH
13607: LD_INT 32
13609: PUSH
13610: LD_INT 1
13612: PUSH
13613: EMPTY
13614: LIST
13615: LIST
13616: PUSH
13617: LD_INT 21
13619: PUSH
13620: LD_INT 2
13622: PUSH
13623: EMPTY
13624: LIST
13625: LIST
13626: PUSH
13627: EMPTY
13628: LIST
13629: LIST
13630: LIST
13631: PPUSH
13632: CALL_OW 69
13636: ST_TO_ADDR
// if not tmp then
13637: LD_VAR 0 2
13641: NOT
13642: IFFALSE 13646
// exit ;
13644: GO 13675
// for i in tmp do
13646: LD_ADDR_VAR 0 1
13650: PUSH
13651: LD_VAR 0 2
13655: PUSH
13656: FOR_IN
13657: IFFALSE 13673
// SetFuel ( i , 0 ) ;
13659: LD_VAR 0 1
13663: PPUSH
13664: LD_INT 0
13666: PPUSH
13667: CALL_OW 240
13671: GO 13656
13673: POP
13674: POP
// end ;
13675: PPOPN 2
13677: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
13678: LD_EXP 17
13682: PUSH
13683: LD_EXP 53
13687: AND
13688: IFFALSE 13754
13690: GO 13692
13692: DISABLE
13693: LD_INT 0
13695: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
13696: LD_ADDR_VAR 0 1
13700: PUSH
13701: LD_INT 22
13703: PUSH
13704: LD_OWVAR 2
13708: PUSH
13709: EMPTY
13710: LIST
13711: LIST
13712: PUSH
13713: LD_INT 30
13715: PUSH
13716: LD_INT 29
13718: PUSH
13719: EMPTY
13720: LIST
13721: LIST
13722: PUSH
13723: EMPTY
13724: LIST
13725: LIST
13726: PPUSH
13727: CALL_OW 69
13731: ST_TO_ADDR
// if not tmp then
13732: LD_VAR 0 1
13736: NOT
13737: IFFALSE 13741
// exit ;
13739: GO 13754
// DestroyUnit ( tmp [ 1 ] ) ;
13741: LD_VAR 0 1
13745: PUSH
13746: LD_INT 1
13748: ARRAY
13749: PPUSH
13750: CALL_OW 65
// end ;
13754: PPOPN 1
13756: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
13757: LD_EXP 17
13761: PUSH
13762: LD_EXP 55
13766: AND
13767: IFFALSE 13896
13769: GO 13771
13771: DISABLE
13772: LD_INT 0
13774: PPUSH
// begin uc_side := 0 ;
13775: LD_ADDR_OWVAR 20
13779: PUSH
13780: LD_INT 0
13782: ST_TO_ADDR
// uc_nation := nation_arabian ;
13783: LD_ADDR_OWVAR 21
13787: PUSH
13788: LD_INT 2
13790: ST_TO_ADDR
// hc_gallery :=  ;
13791: LD_ADDR_OWVAR 33
13795: PUSH
13796: LD_STRING 
13798: ST_TO_ADDR
// hc_name :=  ;
13799: LD_ADDR_OWVAR 26
13803: PUSH
13804: LD_STRING 
13806: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
13807: LD_INT 1
13809: PPUSH
13810: LD_INT 11
13812: PPUSH
13813: LD_INT 10
13815: PPUSH
13816: CALL_OW 380
// un := CreateHuman ;
13820: LD_ADDR_VAR 0 1
13824: PUSH
13825: CALL_OW 44
13829: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
13830: LD_VAR 0 1
13834: PPUSH
13835: LD_INT 1
13837: PPUSH
13838: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
13842: LD_INT 35
13844: PPUSH
13845: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
13849: LD_VAR 0 1
13853: PPUSH
13854: LD_INT 22
13856: PUSH
13857: LD_OWVAR 2
13861: PUSH
13862: EMPTY
13863: LIST
13864: LIST
13865: PPUSH
13866: CALL_OW 69
13870: PPUSH
13871: LD_VAR 0 1
13875: PPUSH
13876: CALL_OW 74
13880: PPUSH
13881: CALL_OW 115
// until IsDead ( un ) ;
13885: LD_VAR 0 1
13889: PPUSH
13890: CALL_OW 301
13894: IFFALSE 13842
// end ;
13896: PPOPN 1
13898: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
13899: LD_EXP 17
13903: PUSH
13904: LD_EXP 57
13908: AND
13909: IFFALSE 13921
13911: GO 13913
13913: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
13914: LD_STRING earthquake(getX(game), 0, 32)
13916: PPUSH
13917: CALL_OW 559
13921: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
13922: LD_EXP 17
13926: PUSH
13927: LD_EXP 58
13931: AND
13932: IFFALSE 14023
13934: GO 13936
13936: DISABLE
13937: LD_INT 0
13939: PPUSH
// begin enable ;
13940: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
13941: LD_ADDR_VAR 0 1
13945: PUSH
13946: LD_INT 22
13948: PUSH
13949: LD_OWVAR 2
13953: PUSH
13954: EMPTY
13955: LIST
13956: LIST
13957: PUSH
13958: LD_INT 21
13960: PUSH
13961: LD_INT 2
13963: PUSH
13964: EMPTY
13965: LIST
13966: LIST
13967: PUSH
13968: LD_INT 33
13970: PUSH
13971: LD_INT 3
13973: PUSH
13974: EMPTY
13975: LIST
13976: LIST
13977: PUSH
13978: EMPTY
13979: LIST
13980: LIST
13981: LIST
13982: PPUSH
13983: CALL_OW 69
13987: ST_TO_ADDR
// if not tmp then
13988: LD_VAR 0 1
13992: NOT
13993: IFFALSE 13997
// exit ;
13995: GO 14023
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
13997: LD_VAR 0 1
14001: PUSH
14002: LD_INT 1
14004: PPUSH
14005: LD_VAR 0 1
14009: PPUSH
14010: CALL_OW 12
14014: ARRAY
14015: PPUSH
14016: LD_INT 1
14018: PPUSH
14019: CALL_OW 234
// end ;
14023: PPOPN 1
14025: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
14026: LD_EXP 17
14030: PUSH
14031: LD_EXP 59
14035: AND
14036: IFFALSE 14177
14038: GO 14040
14040: DISABLE
14041: LD_INT 0
14043: PPUSH
14044: PPUSH
14045: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14046: LD_ADDR_VAR 0 3
14050: PUSH
14051: LD_INT 22
14053: PUSH
14054: LD_OWVAR 2
14058: PUSH
14059: EMPTY
14060: LIST
14061: LIST
14062: PUSH
14063: LD_INT 25
14065: PUSH
14066: LD_INT 1
14068: PUSH
14069: EMPTY
14070: LIST
14071: LIST
14072: PUSH
14073: EMPTY
14074: LIST
14075: LIST
14076: PPUSH
14077: CALL_OW 69
14081: ST_TO_ADDR
// if not tmp then
14082: LD_VAR 0 3
14086: NOT
14087: IFFALSE 14091
// exit ;
14089: GO 14177
// un := tmp [ rand ( 1 , tmp ) ] ;
14091: LD_ADDR_VAR 0 2
14095: PUSH
14096: LD_VAR 0 3
14100: PUSH
14101: LD_INT 1
14103: PPUSH
14104: LD_VAR 0 3
14108: PPUSH
14109: CALL_OW 12
14113: ARRAY
14114: ST_TO_ADDR
// if Crawls ( un ) then
14115: LD_VAR 0 2
14119: PPUSH
14120: CALL_OW 318
14124: IFFALSE 14135
// ComWalk ( un ) ;
14126: LD_VAR 0 2
14130: PPUSH
14131: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
14135: LD_VAR 0 2
14139: PPUSH
14140: LD_INT 9
14142: PPUSH
14143: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
14147: LD_INT 28
14149: PPUSH
14150: LD_OWVAR 2
14154: PPUSH
14155: LD_INT 2
14157: PPUSH
14158: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
14162: LD_INT 29
14164: PPUSH
14165: LD_OWVAR 2
14169: PPUSH
14170: LD_INT 2
14172: PPUSH
14173: CALL_OW 322
// end ;
14177: PPOPN 3
14179: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
14180: LD_EXP 17
14184: PUSH
14185: LD_EXP 60
14189: AND
14190: IFFALSE 14301
14192: GO 14194
14194: DISABLE
14195: LD_INT 0
14197: PPUSH
14198: PPUSH
14199: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
14200: LD_ADDR_VAR 0 3
14204: PUSH
14205: LD_INT 22
14207: PUSH
14208: LD_OWVAR 2
14212: PUSH
14213: EMPTY
14214: LIST
14215: LIST
14216: PUSH
14217: LD_INT 25
14219: PUSH
14220: LD_INT 1
14222: PUSH
14223: EMPTY
14224: LIST
14225: LIST
14226: PUSH
14227: EMPTY
14228: LIST
14229: LIST
14230: PPUSH
14231: CALL_OW 69
14235: ST_TO_ADDR
// if not tmp then
14236: LD_VAR 0 3
14240: NOT
14241: IFFALSE 14245
// exit ;
14243: GO 14301
// un := tmp [ rand ( 1 , tmp ) ] ;
14245: LD_ADDR_VAR 0 2
14249: PUSH
14250: LD_VAR 0 3
14254: PUSH
14255: LD_INT 1
14257: PPUSH
14258: LD_VAR 0 3
14262: PPUSH
14263: CALL_OW 12
14267: ARRAY
14268: ST_TO_ADDR
// if Crawls ( un ) then
14269: LD_VAR 0 2
14273: PPUSH
14274: CALL_OW 318
14278: IFFALSE 14289
// ComWalk ( un ) ;
14280: LD_VAR 0 2
14284: PPUSH
14285: CALL_OW 138
// SetClass ( un , class_mortar ) ;
14289: LD_VAR 0 2
14293: PPUSH
14294: LD_INT 8
14296: PPUSH
14297: CALL_OW 336
// end ;
14301: PPOPN 3
14303: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
14304: LD_EXP 17
14308: PUSH
14309: LD_EXP 61
14313: AND
14314: IFFALSE 14458
14316: GO 14318
14318: DISABLE
14319: LD_INT 0
14321: PPUSH
14322: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
14323: LD_ADDR_VAR 0 2
14327: PUSH
14328: LD_INT 22
14330: PUSH
14331: LD_OWVAR 2
14335: PUSH
14336: EMPTY
14337: LIST
14338: LIST
14339: PUSH
14340: LD_INT 21
14342: PUSH
14343: LD_INT 2
14345: PUSH
14346: EMPTY
14347: LIST
14348: LIST
14349: PUSH
14350: LD_INT 2
14352: PUSH
14353: LD_INT 34
14355: PUSH
14356: LD_INT 12
14358: PUSH
14359: EMPTY
14360: LIST
14361: LIST
14362: PUSH
14363: LD_INT 34
14365: PUSH
14366: LD_INT 51
14368: PUSH
14369: EMPTY
14370: LIST
14371: LIST
14372: PUSH
14373: LD_INT 34
14375: PUSH
14376: LD_INT 32
14378: PUSH
14379: EMPTY
14380: LIST
14381: LIST
14382: PUSH
14383: EMPTY
14384: LIST
14385: LIST
14386: LIST
14387: LIST
14388: PUSH
14389: EMPTY
14390: LIST
14391: LIST
14392: LIST
14393: PPUSH
14394: CALL_OW 69
14398: ST_TO_ADDR
// if not tmp then
14399: LD_VAR 0 2
14403: NOT
14404: IFFALSE 14408
// exit ;
14406: GO 14458
// for i in tmp do
14408: LD_ADDR_VAR 0 1
14412: PUSH
14413: LD_VAR 0 2
14417: PUSH
14418: FOR_IN
14419: IFFALSE 14456
// if GetCargo ( i , mat_artifact ) = 0 then
14421: LD_VAR 0 1
14425: PPUSH
14426: LD_INT 4
14428: PPUSH
14429: CALL_OW 289
14433: PUSH
14434: LD_INT 0
14436: EQUAL
14437: IFFALSE 14454
// SetCargo ( i , mat_siberit , 100 ) ;
14439: LD_VAR 0 1
14443: PPUSH
14444: LD_INT 3
14446: PPUSH
14447: LD_INT 100
14449: PPUSH
14450: CALL_OW 290
14454: GO 14418
14456: POP
14457: POP
// end ;
14458: PPOPN 2
14460: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
14461: LD_EXP 17
14465: PUSH
14466: LD_EXP 62
14470: AND
14471: IFFALSE 14654
14473: GO 14475
14475: DISABLE
14476: LD_INT 0
14478: PPUSH
14479: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
14480: LD_ADDR_VAR 0 2
14484: PUSH
14485: LD_INT 22
14487: PUSH
14488: LD_OWVAR 2
14492: PUSH
14493: EMPTY
14494: LIST
14495: LIST
14496: PPUSH
14497: CALL_OW 69
14501: ST_TO_ADDR
// if not tmp then
14502: LD_VAR 0 2
14506: NOT
14507: IFFALSE 14511
// exit ;
14509: GO 14654
// for i := 1 to 2 do
14511: LD_ADDR_VAR 0 1
14515: PUSH
14516: DOUBLE
14517: LD_INT 1
14519: DEC
14520: ST_TO_ADDR
14521: LD_INT 2
14523: PUSH
14524: FOR_TO
14525: IFFALSE 14652
// begin uc_side := your_side ;
14527: LD_ADDR_OWVAR 20
14531: PUSH
14532: LD_OWVAR 2
14536: ST_TO_ADDR
// uc_nation := nation_american ;
14537: LD_ADDR_OWVAR 21
14541: PUSH
14542: LD_INT 1
14544: ST_TO_ADDR
// vc_chassis := us_morphling ;
14545: LD_ADDR_OWVAR 37
14549: PUSH
14550: LD_INT 5
14552: ST_TO_ADDR
// vc_engine := engine_siberite ;
14553: LD_ADDR_OWVAR 39
14557: PUSH
14558: LD_INT 3
14560: ST_TO_ADDR
// vc_control := control_computer ;
14561: LD_ADDR_OWVAR 38
14565: PUSH
14566: LD_INT 3
14568: ST_TO_ADDR
// vc_weapon := us_double_laser ;
14569: LD_ADDR_OWVAR 40
14573: PUSH
14574: LD_INT 10
14576: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
14577: LD_VAR 0 2
14581: PUSH
14582: LD_INT 1
14584: ARRAY
14585: PPUSH
14586: CALL_OW 310
14590: NOT
14591: IFFALSE 14638
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
14593: CALL_OW 45
14597: PPUSH
14598: LD_VAR 0 2
14602: PUSH
14603: LD_INT 1
14605: ARRAY
14606: PPUSH
14607: CALL_OW 250
14611: PPUSH
14612: LD_VAR 0 2
14616: PUSH
14617: LD_INT 1
14619: ARRAY
14620: PPUSH
14621: CALL_OW 251
14625: PPUSH
14626: LD_INT 12
14628: PPUSH
14629: LD_INT 1
14631: PPUSH
14632: CALL_OW 50
14636: GO 14650
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
14638: CALL_OW 45
14642: PPUSH
14643: LD_INT 1
14645: PPUSH
14646: CALL_OW 51
// end ;
14650: GO 14524
14652: POP
14653: POP
// end ;
14654: PPOPN 2
14656: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
14657: LD_EXP 17
14661: PUSH
14662: LD_EXP 63
14666: AND
14667: IFFALSE 14889
14669: GO 14671
14671: DISABLE
14672: LD_INT 0
14674: PPUSH
14675: PPUSH
14676: PPUSH
14677: PPUSH
14678: PPUSH
14679: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
14680: LD_ADDR_VAR 0 6
14684: PUSH
14685: LD_INT 22
14687: PUSH
14688: LD_OWVAR 2
14692: PUSH
14693: EMPTY
14694: LIST
14695: LIST
14696: PUSH
14697: LD_INT 21
14699: PUSH
14700: LD_INT 1
14702: PUSH
14703: EMPTY
14704: LIST
14705: LIST
14706: PUSH
14707: LD_INT 3
14709: PUSH
14710: LD_INT 23
14712: PUSH
14713: LD_INT 0
14715: PUSH
14716: EMPTY
14717: LIST
14718: LIST
14719: PUSH
14720: EMPTY
14721: LIST
14722: LIST
14723: PUSH
14724: EMPTY
14725: LIST
14726: LIST
14727: LIST
14728: PPUSH
14729: CALL_OW 69
14733: ST_TO_ADDR
// if not tmp then
14734: LD_VAR 0 6
14738: NOT
14739: IFFALSE 14743
// exit ;
14741: GO 14889
// s1 := rand ( 1 , 4 ) ;
14743: LD_ADDR_VAR 0 2
14747: PUSH
14748: LD_INT 1
14750: PPUSH
14751: LD_INT 4
14753: PPUSH
14754: CALL_OW 12
14758: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
14759: LD_ADDR_VAR 0 4
14763: PUSH
14764: LD_VAR 0 6
14768: PUSH
14769: LD_INT 1
14771: ARRAY
14772: PPUSH
14773: LD_VAR 0 2
14777: PPUSH
14778: CALL_OW 259
14782: ST_TO_ADDR
// if s1 = 1 then
14783: LD_VAR 0 2
14787: PUSH
14788: LD_INT 1
14790: EQUAL
14791: IFFALSE 14811
// s2 := rand ( 2 , 4 ) else
14793: LD_ADDR_VAR 0 3
14797: PUSH
14798: LD_INT 2
14800: PPUSH
14801: LD_INT 4
14803: PPUSH
14804: CALL_OW 12
14808: ST_TO_ADDR
14809: GO 14819
// s2 := 1 ;
14811: LD_ADDR_VAR 0 3
14815: PUSH
14816: LD_INT 1
14818: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
14819: LD_ADDR_VAR 0 5
14823: PUSH
14824: LD_VAR 0 6
14828: PUSH
14829: LD_INT 1
14831: ARRAY
14832: PPUSH
14833: LD_VAR 0 3
14837: PPUSH
14838: CALL_OW 259
14842: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
14843: LD_VAR 0 6
14847: PUSH
14848: LD_INT 1
14850: ARRAY
14851: PPUSH
14852: LD_VAR 0 2
14856: PPUSH
14857: LD_VAR 0 5
14861: PPUSH
14862: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
14866: LD_VAR 0 6
14870: PUSH
14871: LD_INT 1
14873: ARRAY
14874: PPUSH
14875: LD_VAR 0 3
14879: PPUSH
14880: LD_VAR 0 4
14884: PPUSH
14885: CALL_OW 237
// end ;
14889: PPOPN 6
14891: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
14892: LD_EXP 17
14896: PUSH
14897: LD_EXP 64
14901: AND
14902: IFFALSE 14981
14904: GO 14906
14906: DISABLE
14907: LD_INT 0
14909: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
14910: LD_ADDR_VAR 0 1
14914: PUSH
14915: LD_INT 22
14917: PUSH
14918: LD_OWVAR 2
14922: PUSH
14923: EMPTY
14924: LIST
14925: LIST
14926: PUSH
14927: LD_INT 30
14929: PUSH
14930: LD_INT 3
14932: PUSH
14933: EMPTY
14934: LIST
14935: LIST
14936: PUSH
14937: EMPTY
14938: LIST
14939: LIST
14940: PPUSH
14941: CALL_OW 69
14945: ST_TO_ADDR
// if not tmp then
14946: LD_VAR 0 1
14950: NOT
14951: IFFALSE 14955
// exit ;
14953: GO 14981
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
14955: LD_VAR 0 1
14959: PUSH
14960: LD_INT 1
14962: PPUSH
14963: LD_VAR 0 1
14967: PPUSH
14968: CALL_OW 12
14972: ARRAY
14973: PPUSH
14974: LD_INT 1
14976: PPUSH
14977: CALL_OW 234
// end ;
14981: PPOPN 1
14983: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
14984: LD_EXP 17
14988: PUSH
14989: LD_EXP 65
14993: AND
14994: IFFALSE 15106
14996: GO 14998
14998: DISABLE
14999: LD_INT 0
15001: PPUSH
15002: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
15003: LD_ADDR_VAR 0 2
15007: PUSH
15008: LD_INT 22
15010: PUSH
15011: LD_OWVAR 2
15015: PUSH
15016: EMPTY
15017: LIST
15018: LIST
15019: PUSH
15020: LD_INT 2
15022: PUSH
15023: LD_INT 30
15025: PUSH
15026: LD_INT 27
15028: PUSH
15029: EMPTY
15030: LIST
15031: LIST
15032: PUSH
15033: LD_INT 30
15035: PUSH
15036: LD_INT 26
15038: PUSH
15039: EMPTY
15040: LIST
15041: LIST
15042: PUSH
15043: LD_INT 30
15045: PUSH
15046: LD_INT 28
15048: PUSH
15049: EMPTY
15050: LIST
15051: LIST
15052: PUSH
15053: EMPTY
15054: LIST
15055: LIST
15056: LIST
15057: LIST
15058: PUSH
15059: EMPTY
15060: LIST
15061: LIST
15062: PPUSH
15063: CALL_OW 69
15067: ST_TO_ADDR
// if not tmp then
15068: LD_VAR 0 2
15072: NOT
15073: IFFALSE 15077
// exit ;
15075: GO 15106
// for i in tmp do
15077: LD_ADDR_VAR 0 1
15081: PUSH
15082: LD_VAR 0 2
15086: PUSH
15087: FOR_IN
15088: IFFALSE 15104
// SetLives ( i , 1 ) ;
15090: LD_VAR 0 1
15094: PPUSH
15095: LD_INT 1
15097: PPUSH
15098: CALL_OW 234
15102: GO 15087
15104: POP
15105: POP
// end ;
15106: PPOPN 2
15108: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
15109: LD_EXP 17
15113: PUSH
15114: LD_EXP 66
15118: AND
15119: IFFALSE 15393
15121: GO 15123
15123: DISABLE
15124: LD_INT 0
15126: PPUSH
15127: PPUSH
15128: PPUSH
// begin i := rand ( 1 , 7 ) ;
15129: LD_ADDR_VAR 0 1
15133: PUSH
15134: LD_INT 1
15136: PPUSH
15137: LD_INT 7
15139: PPUSH
15140: CALL_OW 12
15144: ST_TO_ADDR
// case i of 1 :
15145: LD_VAR 0 1
15149: PUSH
15150: LD_INT 1
15152: DOUBLE
15153: EQUAL
15154: IFTRUE 15158
15156: GO 15168
15158: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
15159: LD_STRING earthquake(getX(game), 0, 32)
15161: PPUSH
15162: CALL_OW 559
15166: GO 15393
15168: LD_INT 2
15170: DOUBLE
15171: EQUAL
15172: IFTRUE 15176
15174: GO 15190
15176: POP
// begin ToLua ( displayStucuk(); ) ;
15177: LD_STRING displayStucuk();
15179: PPUSH
15180: CALL_OW 559
// ResetFog ;
15184: CALL_OW 335
// end ; 3 :
15188: GO 15393
15190: LD_INT 3
15192: DOUBLE
15193: EQUAL
15194: IFTRUE 15198
15196: GO 15302
15198: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
15199: LD_ADDR_VAR 0 2
15203: PUSH
15204: LD_INT 22
15206: PUSH
15207: LD_OWVAR 2
15211: PUSH
15212: EMPTY
15213: LIST
15214: LIST
15215: PUSH
15216: LD_INT 25
15218: PUSH
15219: LD_INT 1
15221: PUSH
15222: EMPTY
15223: LIST
15224: LIST
15225: PUSH
15226: EMPTY
15227: LIST
15228: LIST
15229: PPUSH
15230: CALL_OW 69
15234: ST_TO_ADDR
// if not tmp then
15235: LD_VAR 0 2
15239: NOT
15240: IFFALSE 15244
// exit ;
15242: GO 15393
// un := tmp [ rand ( 1 , tmp ) ] ;
15244: LD_ADDR_VAR 0 3
15248: PUSH
15249: LD_VAR 0 2
15253: PUSH
15254: LD_INT 1
15256: PPUSH
15257: LD_VAR 0 2
15261: PPUSH
15262: CALL_OW 12
15266: ARRAY
15267: ST_TO_ADDR
// if Crawls ( un ) then
15268: LD_VAR 0 3
15272: PPUSH
15273: CALL_OW 318
15277: IFFALSE 15288
// ComWalk ( un ) ;
15279: LD_VAR 0 3
15283: PPUSH
15284: CALL_OW 138
// SetClass ( un , class_mortar ) ;
15288: LD_VAR 0 3
15292: PPUSH
15293: LD_INT 8
15295: PPUSH
15296: CALL_OW 336
// end ; 4 :
15300: GO 15393
15302: LD_INT 4
15304: DOUBLE
15305: EQUAL
15306: IFTRUE 15310
15308: GO 15371
15310: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
15311: LD_ADDR_VAR 0 2
15315: PUSH
15316: LD_INT 22
15318: PUSH
15319: LD_OWVAR 2
15323: PUSH
15324: EMPTY
15325: LIST
15326: LIST
15327: PUSH
15328: LD_INT 30
15330: PUSH
15331: LD_INT 29
15333: PUSH
15334: EMPTY
15335: LIST
15336: LIST
15337: PUSH
15338: EMPTY
15339: LIST
15340: LIST
15341: PPUSH
15342: CALL_OW 69
15346: ST_TO_ADDR
// if not tmp then
15347: LD_VAR 0 2
15351: NOT
15352: IFFALSE 15356
// exit ;
15354: GO 15393
// DestroyUnit ( tmp [ 1 ] ) ;
15356: LD_VAR 0 2
15360: PUSH
15361: LD_INT 1
15363: ARRAY
15364: PPUSH
15365: CALL_OW 65
// end ; 5 .. 7 :
15369: GO 15393
15371: LD_INT 5
15373: DOUBLE
15374: GREATEREQUAL
15375: IFFALSE 15383
15377: LD_INT 7
15379: DOUBLE
15380: LESSEQUAL
15381: IFTRUE 15385
15383: GO 15392
15385: POP
// StreamSibBomb ; end ;
15386: CALL 11643 0 0
15390: GO 15393
15392: POP
// end ;
15393: PPOPN 3
15395: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
15396: LD_EXP 17
15400: PUSH
15401: LD_EXP 67
15405: AND
15406: IFFALSE 15562
15408: GO 15410
15410: DISABLE
15411: LD_INT 0
15413: PPUSH
15414: PPUSH
15415: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
15416: LD_ADDR_VAR 0 2
15420: PUSH
15421: LD_INT 81
15423: PUSH
15424: LD_OWVAR 2
15428: PUSH
15429: EMPTY
15430: LIST
15431: LIST
15432: PUSH
15433: LD_INT 2
15435: PUSH
15436: LD_INT 21
15438: PUSH
15439: LD_INT 1
15441: PUSH
15442: EMPTY
15443: LIST
15444: LIST
15445: PUSH
15446: LD_INT 21
15448: PUSH
15449: LD_INT 2
15451: PUSH
15452: EMPTY
15453: LIST
15454: LIST
15455: PUSH
15456: EMPTY
15457: LIST
15458: LIST
15459: LIST
15460: PUSH
15461: EMPTY
15462: LIST
15463: LIST
15464: PPUSH
15465: CALL_OW 69
15469: ST_TO_ADDR
// if not tmp then
15470: LD_VAR 0 2
15474: NOT
15475: IFFALSE 15479
// exit ;
15477: GO 15562
// p := 0 ;
15479: LD_ADDR_VAR 0 3
15483: PUSH
15484: LD_INT 0
15486: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15487: LD_INT 35
15489: PPUSH
15490: CALL_OW 67
// p := p + 1 ;
15494: LD_ADDR_VAR 0 3
15498: PUSH
15499: LD_VAR 0 3
15503: PUSH
15504: LD_INT 1
15506: PLUS
15507: ST_TO_ADDR
// for i in tmp do
15508: LD_ADDR_VAR 0 1
15512: PUSH
15513: LD_VAR 0 2
15517: PUSH
15518: FOR_IN
15519: IFFALSE 15550
// if GetLives ( i ) < 1000 then
15521: LD_VAR 0 1
15525: PPUSH
15526: CALL_OW 256
15530: PUSH
15531: LD_INT 1000
15533: LESS
15534: IFFALSE 15548
// SetLives ( i , 1000 ) ;
15536: LD_VAR 0 1
15540: PPUSH
15541: LD_INT 1000
15543: PPUSH
15544: CALL_OW 234
15548: GO 15518
15550: POP
15551: POP
// until p > 20 ;
15552: LD_VAR 0 3
15556: PUSH
15557: LD_INT 20
15559: GREATER
15560: IFFALSE 15487
// end ;
15562: PPOPN 3
15564: END
// every 0 0$1 trigger StreamModeActive and sTime do
15565: LD_EXP 17
15569: PUSH
15570: LD_EXP 68
15574: AND
15575: IFFALSE 15610
15577: GO 15579
15579: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
15580: LD_INT 28
15582: PPUSH
15583: LD_OWVAR 2
15587: PPUSH
15588: LD_INT 2
15590: PPUSH
15591: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
15595: LD_INT 30
15597: PPUSH
15598: LD_OWVAR 2
15602: PPUSH
15603: LD_INT 2
15605: PPUSH
15606: CALL_OW 322
// end ;
15610: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
15611: LD_EXP 17
15615: PUSH
15616: LD_EXP 69
15620: AND
15621: IFFALSE 15742
15623: GO 15625
15625: DISABLE
15626: LD_INT 0
15628: PPUSH
15629: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15630: LD_ADDR_VAR 0 2
15634: PUSH
15635: LD_INT 22
15637: PUSH
15638: LD_OWVAR 2
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: PUSH
15647: LD_INT 21
15649: PUSH
15650: LD_INT 1
15652: PUSH
15653: EMPTY
15654: LIST
15655: LIST
15656: PUSH
15657: LD_INT 3
15659: PUSH
15660: LD_INT 23
15662: PUSH
15663: LD_INT 0
15665: PUSH
15666: EMPTY
15667: LIST
15668: LIST
15669: PUSH
15670: EMPTY
15671: LIST
15672: LIST
15673: PUSH
15674: EMPTY
15675: LIST
15676: LIST
15677: LIST
15678: PPUSH
15679: CALL_OW 69
15683: ST_TO_ADDR
// if not tmp then
15684: LD_VAR 0 2
15688: NOT
15689: IFFALSE 15693
// exit ;
15691: GO 15742
// for i in tmp do
15693: LD_ADDR_VAR 0 1
15697: PUSH
15698: LD_VAR 0 2
15702: PUSH
15703: FOR_IN
15704: IFFALSE 15740
// begin if Crawls ( i ) then
15706: LD_VAR 0 1
15710: PPUSH
15711: CALL_OW 318
15715: IFFALSE 15726
// ComWalk ( i ) ;
15717: LD_VAR 0 1
15721: PPUSH
15722: CALL_OW 138
// SetClass ( i , 2 ) ;
15726: LD_VAR 0 1
15730: PPUSH
15731: LD_INT 2
15733: PPUSH
15734: CALL_OW 336
// end ;
15738: GO 15703
15740: POP
15741: POP
// end ;
15742: PPOPN 2
15744: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
15745: LD_EXP 17
15749: PUSH
15750: LD_EXP 70
15754: AND
15755: IFFALSE 16036
15757: GO 15759
15759: DISABLE
15760: LD_INT 0
15762: PPUSH
15763: PPUSH
15764: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
15765: LD_OWVAR 2
15769: PPUSH
15770: LD_INT 9
15772: PPUSH
15773: LD_INT 1
15775: PPUSH
15776: LD_INT 1
15778: PPUSH
15779: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
15783: LD_INT 9
15785: PPUSH
15786: LD_OWVAR 2
15790: PPUSH
15791: CALL_OW 343
// uc_side := 9 ;
15795: LD_ADDR_OWVAR 20
15799: PUSH
15800: LD_INT 9
15802: ST_TO_ADDR
// uc_nation := 2 ;
15803: LD_ADDR_OWVAR 21
15807: PUSH
15808: LD_INT 2
15810: ST_TO_ADDR
// hc_name := Dark Warrior ;
15811: LD_ADDR_OWVAR 26
15815: PUSH
15816: LD_STRING Dark Warrior
15818: ST_TO_ADDR
// hc_gallery :=  ;
15819: LD_ADDR_OWVAR 33
15823: PUSH
15824: LD_STRING 
15826: ST_TO_ADDR
// hc_noskilllimit := true ;
15827: LD_ADDR_OWVAR 76
15831: PUSH
15832: LD_INT 1
15834: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
15835: LD_ADDR_OWVAR 31
15839: PUSH
15840: LD_INT 30
15842: PUSH
15843: LD_INT 30
15845: PUSH
15846: LD_INT 30
15848: PUSH
15849: LD_INT 30
15851: PUSH
15852: EMPTY
15853: LIST
15854: LIST
15855: LIST
15856: LIST
15857: ST_TO_ADDR
// un := CreateHuman ;
15858: LD_ADDR_VAR 0 3
15862: PUSH
15863: CALL_OW 44
15867: ST_TO_ADDR
// hc_noskilllimit := false ;
15868: LD_ADDR_OWVAR 76
15872: PUSH
15873: LD_INT 0
15875: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15876: LD_VAR 0 3
15880: PPUSH
15881: LD_INT 1
15883: PPUSH
15884: CALL_OW 51
// p := 0 ;
15888: LD_ADDR_VAR 0 2
15892: PUSH
15893: LD_INT 0
15895: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
15896: LD_INT 35
15898: PPUSH
15899: CALL_OW 67
// p := p + 1 ;
15903: LD_ADDR_VAR 0 2
15907: PUSH
15908: LD_VAR 0 2
15912: PUSH
15913: LD_INT 1
15915: PLUS
15916: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
15917: LD_VAR 0 3
15921: PPUSH
15922: CALL_OW 256
15926: PUSH
15927: LD_INT 1000
15929: LESS
15930: IFFALSE 15944
// SetLives ( un , 1000 ) ;
15932: LD_VAR 0 3
15936: PPUSH
15937: LD_INT 1000
15939: PPUSH
15940: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
15944: LD_VAR 0 3
15948: PPUSH
15949: LD_INT 81
15951: PUSH
15952: LD_OWVAR 2
15956: PUSH
15957: EMPTY
15958: LIST
15959: LIST
15960: PUSH
15961: LD_INT 91
15963: PUSH
15964: LD_VAR 0 3
15968: PUSH
15969: LD_INT 30
15971: PUSH
15972: EMPTY
15973: LIST
15974: LIST
15975: LIST
15976: PUSH
15977: EMPTY
15978: LIST
15979: LIST
15980: PPUSH
15981: CALL_OW 69
15985: PPUSH
15986: LD_VAR 0 3
15990: PPUSH
15991: CALL_OW 74
15995: PPUSH
15996: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
16000: LD_VAR 0 2
16004: PUSH
16005: LD_INT 60
16007: GREATER
16008: PUSH
16009: LD_VAR 0 3
16013: PPUSH
16014: CALL_OW 301
16018: OR
16019: IFFALSE 15896
// if un then
16021: LD_VAR 0 3
16025: IFFALSE 16036
// RemoveUnit ( un ) ;
16027: LD_VAR 0 3
16031: PPUSH
16032: CALL_OW 64
// end ; end_of_file end_of_file
16036: PPOPN 3
16038: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
16039: LD_INT 0
16041: PPUSH
// ru_radar := 98 ;
16042: LD_ADDR_EXP 71
16046: PUSH
16047: LD_INT 98
16049: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
16050: LD_ADDR_EXP 72
16054: PUSH
16055: LD_INT 89
16057: ST_TO_ADDR
// us_hack := 99 ;
16058: LD_ADDR_EXP 73
16062: PUSH
16063: LD_INT 99
16065: ST_TO_ADDR
// us_artillery := 97 ;
16066: LD_ADDR_EXP 74
16070: PUSH
16071: LD_INT 97
16073: ST_TO_ADDR
// ar_bio_bomb := 91 ;
16074: LD_ADDR_EXP 75
16078: PUSH
16079: LD_INT 91
16081: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
16082: LD_ADDR_EXP 76
16086: PUSH
16087: LD_INT 92
16089: ST_TO_ADDR
// tech_Artillery := 80 ;
16090: LD_ADDR_EXP 77
16094: PUSH
16095: LD_INT 80
16097: ST_TO_ADDR
// tech_RadMat := 81 ;
16098: LD_ADDR_EXP 78
16102: PUSH
16103: LD_INT 81
16105: ST_TO_ADDR
// tech_BasicTools := 82 ;
16106: LD_ADDR_EXP 79
16110: PUSH
16111: LD_INT 82
16113: ST_TO_ADDR
// tech_Cargo := 83 ;
16114: LD_ADDR_EXP 80
16118: PUSH
16119: LD_INT 83
16121: ST_TO_ADDR
// tech_Track := 84 ;
16122: LD_ADDR_EXP 81
16126: PUSH
16127: LD_INT 84
16129: ST_TO_ADDR
// tech_Crane := 85 ;
16130: LD_ADDR_EXP 82
16134: PUSH
16135: LD_INT 85
16137: ST_TO_ADDR
// tech_Bulldozer := 86 ;
16138: LD_ADDR_EXP 83
16142: PUSH
16143: LD_INT 86
16145: ST_TO_ADDR
// tech_Hovercraft := 87 ;
16146: LD_ADDR_EXP 84
16150: PUSH
16151: LD_INT 87
16153: ST_TO_ADDR
// end ;
16154: LD_VAR 0 1
16158: RET
// every 1 do
16159: GO 16161
16161: DISABLE
// InitGlobalVariables ; end_of_file
16162: CALL 16039 0 0
16166: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
16167: LD_INT 0
16169: PPUSH
16170: PPUSH
// if exist_mode then
16171: LD_VAR 0 2
16175: IFFALSE 16200
// unit := CreateCharacter ( prefix & ident ) else
16177: LD_ADDR_VAR 0 5
16181: PUSH
16182: LD_VAR 0 3
16186: PUSH
16187: LD_VAR 0 1
16191: STR
16192: PPUSH
16193: CALL_OW 34
16197: ST_TO_ADDR
16198: GO 16215
// unit := NewCharacter ( ident ) ;
16200: LD_ADDR_VAR 0 5
16204: PUSH
16205: LD_VAR 0 1
16209: PPUSH
16210: CALL_OW 25
16214: ST_TO_ADDR
// result := unit ;
16215: LD_ADDR_VAR 0 4
16219: PUSH
16220: LD_VAR 0 5
16224: ST_TO_ADDR
// end ;
16225: LD_VAR 0 4
16229: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
16230: LD_INT 0
16232: PPUSH
16233: PPUSH
// if not side or not nation then
16234: LD_VAR 0 1
16238: NOT
16239: PUSH
16240: LD_VAR 0 2
16244: NOT
16245: OR
16246: IFFALSE 16250
// exit ;
16248: GO 17014
// case nation of nation_american :
16250: LD_VAR 0 2
16254: PUSH
16255: LD_INT 1
16257: DOUBLE
16258: EQUAL
16259: IFTRUE 16263
16261: GO 16477
16263: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
16264: LD_ADDR_VAR 0 4
16268: PUSH
16269: LD_INT 35
16271: PUSH
16272: LD_INT 45
16274: PUSH
16275: LD_INT 46
16277: PUSH
16278: LD_INT 47
16280: PUSH
16281: LD_INT 82
16283: PUSH
16284: LD_INT 83
16286: PUSH
16287: LD_INT 84
16289: PUSH
16290: LD_INT 85
16292: PUSH
16293: LD_INT 86
16295: PUSH
16296: LD_INT 1
16298: PUSH
16299: LD_INT 2
16301: PUSH
16302: LD_INT 6
16304: PUSH
16305: LD_INT 15
16307: PUSH
16308: LD_INT 16
16310: PUSH
16311: LD_INT 7
16313: PUSH
16314: LD_INT 12
16316: PUSH
16317: LD_INT 13
16319: PUSH
16320: LD_INT 10
16322: PUSH
16323: LD_INT 14
16325: PUSH
16326: LD_INT 20
16328: PUSH
16329: LD_INT 21
16331: PUSH
16332: LD_INT 22
16334: PUSH
16335: LD_INT 25
16337: PUSH
16338: LD_INT 32
16340: PUSH
16341: LD_INT 27
16343: PUSH
16344: LD_INT 36
16346: PUSH
16347: LD_INT 69
16349: PUSH
16350: LD_INT 39
16352: PUSH
16353: LD_INT 34
16355: PUSH
16356: LD_INT 40
16358: PUSH
16359: LD_INT 48
16361: PUSH
16362: LD_INT 49
16364: PUSH
16365: LD_INT 50
16367: PUSH
16368: LD_INT 51
16370: PUSH
16371: LD_INT 52
16373: PUSH
16374: LD_INT 53
16376: PUSH
16377: LD_INT 54
16379: PUSH
16380: LD_INT 55
16382: PUSH
16383: LD_INT 56
16385: PUSH
16386: LD_INT 57
16388: PUSH
16389: LD_INT 58
16391: PUSH
16392: LD_INT 59
16394: PUSH
16395: LD_INT 60
16397: PUSH
16398: LD_INT 61
16400: PUSH
16401: LD_INT 62
16403: PUSH
16404: LD_INT 80
16406: PUSH
16407: LD_INT 82
16409: PUSH
16410: LD_INT 83
16412: PUSH
16413: LD_INT 84
16415: PUSH
16416: LD_INT 85
16418: PUSH
16419: LD_INT 86
16421: PUSH
16422: EMPTY
16423: LIST
16424: LIST
16425: LIST
16426: LIST
16427: LIST
16428: LIST
16429: LIST
16430: LIST
16431: LIST
16432: LIST
16433: LIST
16434: LIST
16435: LIST
16436: LIST
16437: LIST
16438: LIST
16439: LIST
16440: LIST
16441: LIST
16442: LIST
16443: LIST
16444: LIST
16445: LIST
16446: LIST
16447: LIST
16448: LIST
16449: LIST
16450: LIST
16451: LIST
16452: LIST
16453: LIST
16454: LIST
16455: LIST
16456: LIST
16457: LIST
16458: LIST
16459: LIST
16460: LIST
16461: LIST
16462: LIST
16463: LIST
16464: LIST
16465: LIST
16466: LIST
16467: LIST
16468: LIST
16469: LIST
16470: LIST
16471: LIST
16472: LIST
16473: LIST
16474: ST_TO_ADDR
16475: GO 16938
16477: LD_INT 2
16479: DOUBLE
16480: EQUAL
16481: IFTRUE 16485
16483: GO 16707
16485: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
16486: LD_ADDR_VAR 0 4
16490: PUSH
16491: LD_INT 35
16493: PUSH
16494: LD_INT 45
16496: PUSH
16497: LD_INT 46
16499: PUSH
16500: LD_INT 47
16502: PUSH
16503: LD_INT 82
16505: PUSH
16506: LD_INT 83
16508: PUSH
16509: LD_INT 84
16511: PUSH
16512: LD_INT 85
16514: PUSH
16515: LD_INT 87
16517: PUSH
16518: LD_INT 70
16520: PUSH
16521: LD_INT 1
16523: PUSH
16524: LD_INT 11
16526: PUSH
16527: LD_INT 3
16529: PUSH
16530: LD_INT 4
16532: PUSH
16533: LD_INT 5
16535: PUSH
16536: LD_INT 6
16538: PUSH
16539: LD_INT 15
16541: PUSH
16542: LD_INT 18
16544: PUSH
16545: LD_INT 7
16547: PUSH
16548: LD_INT 17
16550: PUSH
16551: LD_INT 8
16553: PUSH
16554: LD_INT 20
16556: PUSH
16557: LD_INT 21
16559: PUSH
16560: LD_INT 22
16562: PUSH
16563: LD_INT 72
16565: PUSH
16566: LD_INT 26
16568: PUSH
16569: LD_INT 69
16571: PUSH
16572: LD_INT 39
16574: PUSH
16575: LD_INT 40
16577: PUSH
16578: LD_INT 41
16580: PUSH
16581: LD_INT 42
16583: PUSH
16584: LD_INT 43
16586: PUSH
16587: LD_INT 48
16589: PUSH
16590: LD_INT 49
16592: PUSH
16593: LD_INT 50
16595: PUSH
16596: LD_INT 51
16598: PUSH
16599: LD_INT 52
16601: PUSH
16602: LD_INT 53
16604: PUSH
16605: LD_INT 54
16607: PUSH
16608: LD_INT 55
16610: PUSH
16611: LD_INT 56
16613: PUSH
16614: LD_INT 60
16616: PUSH
16617: LD_INT 61
16619: PUSH
16620: LD_INT 62
16622: PUSH
16623: LD_INT 66
16625: PUSH
16626: LD_INT 67
16628: PUSH
16629: LD_INT 68
16631: PUSH
16632: LD_INT 81
16634: PUSH
16635: LD_INT 82
16637: PUSH
16638: LD_INT 83
16640: PUSH
16641: LD_INT 84
16643: PUSH
16644: LD_INT 85
16646: PUSH
16647: LD_INT 87
16649: PUSH
16650: EMPTY
16651: LIST
16652: LIST
16653: LIST
16654: LIST
16655: LIST
16656: LIST
16657: LIST
16658: LIST
16659: LIST
16660: LIST
16661: LIST
16662: LIST
16663: LIST
16664: LIST
16665: LIST
16666: LIST
16667: LIST
16668: LIST
16669: LIST
16670: LIST
16671: LIST
16672: LIST
16673: LIST
16674: LIST
16675: LIST
16676: LIST
16677: LIST
16678: LIST
16679: LIST
16680: LIST
16681: LIST
16682: LIST
16683: LIST
16684: LIST
16685: LIST
16686: LIST
16687: LIST
16688: LIST
16689: LIST
16690: LIST
16691: LIST
16692: LIST
16693: LIST
16694: LIST
16695: LIST
16696: LIST
16697: LIST
16698: LIST
16699: LIST
16700: LIST
16701: LIST
16702: LIST
16703: LIST
16704: ST_TO_ADDR
16705: GO 16938
16707: LD_INT 3
16709: DOUBLE
16710: EQUAL
16711: IFTRUE 16715
16713: GO 16937
16715: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
16716: LD_ADDR_VAR 0 4
16720: PUSH
16721: LD_INT 46
16723: PUSH
16724: LD_INT 47
16726: PUSH
16727: LD_INT 1
16729: PUSH
16730: LD_INT 2
16732: PUSH
16733: LD_INT 82
16735: PUSH
16736: LD_INT 83
16738: PUSH
16739: LD_INT 84
16741: PUSH
16742: LD_INT 85
16744: PUSH
16745: LD_INT 86
16747: PUSH
16748: LD_INT 11
16750: PUSH
16751: LD_INT 9
16753: PUSH
16754: LD_INT 20
16756: PUSH
16757: LD_INT 19
16759: PUSH
16760: LD_INT 21
16762: PUSH
16763: LD_INT 24
16765: PUSH
16766: LD_INT 22
16768: PUSH
16769: LD_INT 25
16771: PUSH
16772: LD_INT 28
16774: PUSH
16775: LD_INT 29
16777: PUSH
16778: LD_INT 30
16780: PUSH
16781: LD_INT 31
16783: PUSH
16784: LD_INT 37
16786: PUSH
16787: LD_INT 38
16789: PUSH
16790: LD_INT 32
16792: PUSH
16793: LD_INT 27
16795: PUSH
16796: LD_INT 33
16798: PUSH
16799: LD_INT 69
16801: PUSH
16802: LD_INT 39
16804: PUSH
16805: LD_INT 34
16807: PUSH
16808: LD_INT 40
16810: PUSH
16811: LD_INT 71
16813: PUSH
16814: LD_INT 23
16816: PUSH
16817: LD_INT 44
16819: PUSH
16820: LD_INT 48
16822: PUSH
16823: LD_INT 49
16825: PUSH
16826: LD_INT 50
16828: PUSH
16829: LD_INT 51
16831: PUSH
16832: LD_INT 52
16834: PUSH
16835: LD_INT 53
16837: PUSH
16838: LD_INT 54
16840: PUSH
16841: LD_INT 55
16843: PUSH
16844: LD_INT 56
16846: PUSH
16847: LD_INT 57
16849: PUSH
16850: LD_INT 58
16852: PUSH
16853: LD_INT 59
16855: PUSH
16856: LD_INT 63
16858: PUSH
16859: LD_INT 64
16861: PUSH
16862: LD_INT 65
16864: PUSH
16865: LD_INT 82
16867: PUSH
16868: LD_INT 83
16870: PUSH
16871: LD_INT 84
16873: PUSH
16874: LD_INT 85
16876: PUSH
16877: LD_INT 86
16879: PUSH
16880: EMPTY
16881: LIST
16882: LIST
16883: LIST
16884: LIST
16885: LIST
16886: LIST
16887: LIST
16888: LIST
16889: LIST
16890: LIST
16891: LIST
16892: LIST
16893: LIST
16894: LIST
16895: LIST
16896: LIST
16897: LIST
16898: LIST
16899: LIST
16900: LIST
16901: LIST
16902: LIST
16903: LIST
16904: LIST
16905: LIST
16906: LIST
16907: LIST
16908: LIST
16909: LIST
16910: LIST
16911: LIST
16912: LIST
16913: LIST
16914: LIST
16915: LIST
16916: LIST
16917: LIST
16918: LIST
16919: LIST
16920: LIST
16921: LIST
16922: LIST
16923: LIST
16924: LIST
16925: LIST
16926: LIST
16927: LIST
16928: LIST
16929: LIST
16930: LIST
16931: LIST
16932: LIST
16933: LIST
16934: ST_TO_ADDR
16935: GO 16938
16937: POP
// if state > - 1 and state < 3 then
16938: LD_VAR 0 3
16942: PUSH
16943: LD_INT 1
16945: NEG
16946: GREATER
16947: PUSH
16948: LD_VAR 0 3
16952: PUSH
16953: LD_INT 3
16955: LESS
16956: AND
16957: IFFALSE 17014
// for i in result do
16959: LD_ADDR_VAR 0 5
16963: PUSH
16964: LD_VAR 0 4
16968: PUSH
16969: FOR_IN
16970: IFFALSE 17012
// if GetTech ( i , side ) <> state then
16972: LD_VAR 0 5
16976: PPUSH
16977: LD_VAR 0 1
16981: PPUSH
16982: CALL_OW 321
16986: PUSH
16987: LD_VAR 0 3
16991: NONEQUAL
16992: IFFALSE 17010
// result := result diff i ;
16994: LD_ADDR_VAR 0 4
16998: PUSH
16999: LD_VAR 0 4
17003: PUSH
17004: LD_VAR 0 5
17008: DIFF
17009: ST_TO_ADDR
17010: GO 16969
17012: POP
17013: POP
// end ;
17014: LD_VAR 0 4
17018: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
17019: LD_INT 0
17021: PPUSH
17022: PPUSH
17023: PPUSH
// result := true ;
17024: LD_ADDR_VAR 0 3
17028: PUSH
17029: LD_INT 1
17031: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
17032: LD_ADDR_VAR 0 5
17036: PUSH
17037: LD_VAR 0 2
17041: PPUSH
17042: CALL_OW 480
17046: ST_TO_ADDR
// if not tmp then
17047: LD_VAR 0 5
17051: NOT
17052: IFFALSE 17056
// exit ;
17054: GO 17105
// for i in tmp do
17056: LD_ADDR_VAR 0 4
17060: PUSH
17061: LD_VAR 0 5
17065: PUSH
17066: FOR_IN
17067: IFFALSE 17103
// if GetTech ( i , side ) <> state_researched then
17069: LD_VAR 0 4
17073: PPUSH
17074: LD_VAR 0 1
17078: PPUSH
17079: CALL_OW 321
17083: PUSH
17084: LD_INT 2
17086: NONEQUAL
17087: IFFALSE 17101
// begin result := false ;
17089: LD_ADDR_VAR 0 3
17093: PUSH
17094: LD_INT 0
17096: ST_TO_ADDR
// exit ;
17097: POP
17098: POP
17099: GO 17105
// end ;
17101: GO 17066
17103: POP
17104: POP
// end ;
17105: LD_VAR 0 3
17109: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
17110: LD_INT 0
17112: PPUSH
17113: PPUSH
17114: PPUSH
17115: PPUSH
17116: PPUSH
17117: PPUSH
17118: PPUSH
17119: PPUSH
17120: PPUSH
17121: PPUSH
17122: PPUSH
17123: PPUSH
17124: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
17125: LD_VAR 0 1
17129: NOT
17130: PUSH
17131: LD_VAR 0 1
17135: PPUSH
17136: CALL_OW 257
17140: PUSH
17141: LD_INT 9
17143: NONEQUAL
17144: OR
17145: IFFALSE 17149
// exit ;
17147: GO 17722
// side := GetSide ( unit ) ;
17149: LD_ADDR_VAR 0 9
17153: PUSH
17154: LD_VAR 0 1
17158: PPUSH
17159: CALL_OW 255
17163: ST_TO_ADDR
// tech_space := tech_spacanom ;
17164: LD_ADDR_VAR 0 12
17168: PUSH
17169: LD_INT 29
17171: ST_TO_ADDR
// tech_time := tech_taurad ;
17172: LD_ADDR_VAR 0 13
17176: PUSH
17177: LD_INT 28
17179: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
17180: LD_ADDR_VAR 0 11
17184: PUSH
17185: LD_VAR 0 1
17189: PPUSH
17190: CALL_OW 310
17194: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
17195: LD_VAR 0 11
17199: PPUSH
17200: CALL_OW 247
17204: PUSH
17205: LD_INT 2
17207: EQUAL
17208: IFFALSE 17212
// exit ;
17210: GO 17722
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
17212: LD_ADDR_VAR 0 8
17216: PUSH
17217: LD_INT 81
17219: PUSH
17220: LD_VAR 0 9
17224: PUSH
17225: EMPTY
17226: LIST
17227: LIST
17228: PUSH
17229: LD_INT 3
17231: PUSH
17232: LD_INT 21
17234: PUSH
17235: LD_INT 3
17237: PUSH
17238: EMPTY
17239: LIST
17240: LIST
17241: PUSH
17242: EMPTY
17243: LIST
17244: LIST
17245: PUSH
17246: EMPTY
17247: LIST
17248: LIST
17249: PPUSH
17250: CALL_OW 69
17254: ST_TO_ADDR
// if not tmp then
17255: LD_VAR 0 8
17259: NOT
17260: IFFALSE 17264
// exit ;
17262: GO 17722
// if in_unit then
17264: LD_VAR 0 11
17268: IFFALSE 17292
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
17270: LD_ADDR_VAR 0 10
17274: PUSH
17275: LD_VAR 0 8
17279: PPUSH
17280: LD_VAR 0 11
17284: PPUSH
17285: CALL_OW 74
17289: ST_TO_ADDR
17290: GO 17312
// enemy := NearestUnitToUnit ( tmp , unit ) ;
17292: LD_ADDR_VAR 0 10
17296: PUSH
17297: LD_VAR 0 8
17301: PPUSH
17302: LD_VAR 0 1
17306: PPUSH
17307: CALL_OW 74
17311: ST_TO_ADDR
// if not enemy then
17312: LD_VAR 0 10
17316: NOT
17317: IFFALSE 17321
// exit ;
17319: GO 17722
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
17321: LD_VAR 0 11
17325: PUSH
17326: LD_VAR 0 11
17330: PPUSH
17331: LD_VAR 0 10
17335: PPUSH
17336: CALL_OW 296
17340: PUSH
17341: LD_INT 13
17343: GREATER
17344: AND
17345: PUSH
17346: LD_VAR 0 1
17350: PPUSH
17351: LD_VAR 0 10
17355: PPUSH
17356: CALL_OW 296
17360: PUSH
17361: LD_INT 12
17363: GREATER
17364: OR
17365: IFFALSE 17369
// exit ;
17367: GO 17722
// missile := [ 1 ] ;
17369: LD_ADDR_VAR 0 14
17373: PUSH
17374: LD_INT 1
17376: PUSH
17377: EMPTY
17378: LIST
17379: ST_TO_ADDR
// if Researched ( side , tech_space ) then
17380: LD_VAR 0 9
17384: PPUSH
17385: LD_VAR 0 12
17389: PPUSH
17390: CALL_OW 325
17394: IFFALSE 17423
// missile := Insert ( missile , missile + 1 , 2 ) ;
17396: LD_ADDR_VAR 0 14
17400: PUSH
17401: LD_VAR 0 14
17405: PPUSH
17406: LD_VAR 0 14
17410: PUSH
17411: LD_INT 1
17413: PLUS
17414: PPUSH
17415: LD_INT 2
17417: PPUSH
17418: CALL_OW 2
17422: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
17423: LD_VAR 0 9
17427: PPUSH
17428: LD_VAR 0 13
17432: PPUSH
17433: CALL_OW 325
17437: PUSH
17438: LD_VAR 0 10
17442: PPUSH
17443: CALL_OW 255
17447: PPUSH
17448: LD_VAR 0 13
17452: PPUSH
17453: CALL_OW 325
17457: NOT
17458: AND
17459: IFFALSE 17488
// missile := Insert ( missile , missile + 1 , 3 ) ;
17461: LD_ADDR_VAR 0 14
17465: PUSH
17466: LD_VAR 0 14
17470: PPUSH
17471: LD_VAR 0 14
17475: PUSH
17476: LD_INT 1
17478: PLUS
17479: PPUSH
17480: LD_INT 3
17482: PPUSH
17483: CALL_OW 2
17487: ST_TO_ADDR
// if missile < 2 then
17488: LD_VAR 0 14
17492: PUSH
17493: LD_INT 2
17495: LESS
17496: IFFALSE 17500
// exit ;
17498: GO 17722
// x := GetX ( enemy ) ;
17500: LD_ADDR_VAR 0 4
17504: PUSH
17505: LD_VAR 0 10
17509: PPUSH
17510: CALL_OW 250
17514: ST_TO_ADDR
// y := GetY ( enemy ) ;
17515: LD_ADDR_VAR 0 5
17519: PUSH
17520: LD_VAR 0 10
17524: PPUSH
17525: CALL_OW 251
17529: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
17530: LD_ADDR_VAR 0 6
17534: PUSH
17535: LD_VAR 0 4
17539: PUSH
17540: LD_INT 1
17542: NEG
17543: PPUSH
17544: LD_INT 1
17546: PPUSH
17547: CALL_OW 12
17551: PLUS
17552: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
17553: LD_ADDR_VAR 0 7
17557: PUSH
17558: LD_VAR 0 5
17562: PUSH
17563: LD_INT 1
17565: NEG
17566: PPUSH
17567: LD_INT 1
17569: PPUSH
17570: CALL_OW 12
17574: PLUS
17575: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17576: LD_VAR 0 6
17580: PPUSH
17581: LD_VAR 0 7
17585: PPUSH
17586: CALL_OW 488
17590: NOT
17591: IFFALSE 17613
// begin _x := x ;
17593: LD_ADDR_VAR 0 6
17597: PUSH
17598: LD_VAR 0 4
17602: ST_TO_ADDR
// _y := y ;
17603: LD_ADDR_VAR 0 7
17607: PUSH
17608: LD_VAR 0 5
17612: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
17613: LD_ADDR_VAR 0 3
17617: PUSH
17618: LD_INT 1
17620: PPUSH
17621: LD_VAR 0 14
17625: PPUSH
17626: CALL_OW 12
17630: ST_TO_ADDR
// case i of 1 :
17631: LD_VAR 0 3
17635: PUSH
17636: LD_INT 1
17638: DOUBLE
17639: EQUAL
17640: IFTRUE 17644
17642: GO 17661
17644: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
17645: LD_VAR 0 1
17649: PPUSH
17650: LD_VAR 0 10
17654: PPUSH
17655: CALL_OW 115
17659: GO 17722
17661: LD_INT 2
17663: DOUBLE
17664: EQUAL
17665: IFTRUE 17669
17667: GO 17691
17669: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
17670: LD_VAR 0 1
17674: PPUSH
17675: LD_VAR 0 6
17679: PPUSH
17680: LD_VAR 0 7
17684: PPUSH
17685: CALL_OW 153
17689: GO 17722
17691: LD_INT 3
17693: DOUBLE
17694: EQUAL
17695: IFTRUE 17699
17697: GO 17721
17699: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
17700: LD_VAR 0 1
17704: PPUSH
17705: LD_VAR 0 6
17709: PPUSH
17710: LD_VAR 0 7
17714: PPUSH
17715: CALL_OW 154
17719: GO 17722
17721: POP
// end ;
17722: LD_VAR 0 2
17726: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
17727: LD_INT 0
17729: PPUSH
17730: PPUSH
17731: PPUSH
17732: PPUSH
17733: PPUSH
17734: PPUSH
// if not unit or not building then
17735: LD_VAR 0 1
17739: NOT
17740: PUSH
17741: LD_VAR 0 2
17745: NOT
17746: OR
17747: IFFALSE 17751
// exit ;
17749: GO 17909
// x := GetX ( building ) ;
17751: LD_ADDR_VAR 0 5
17755: PUSH
17756: LD_VAR 0 2
17760: PPUSH
17761: CALL_OW 250
17765: ST_TO_ADDR
// y := GetY ( building ) ;
17766: LD_ADDR_VAR 0 6
17770: PUSH
17771: LD_VAR 0 2
17775: PPUSH
17776: CALL_OW 251
17780: ST_TO_ADDR
// for i = 0 to 5 do
17781: LD_ADDR_VAR 0 4
17785: PUSH
17786: DOUBLE
17787: LD_INT 0
17789: DEC
17790: ST_TO_ADDR
17791: LD_INT 5
17793: PUSH
17794: FOR_TO
17795: IFFALSE 17907
// begin _x := ShiftX ( x , i , 3 ) ;
17797: LD_ADDR_VAR 0 7
17801: PUSH
17802: LD_VAR 0 5
17806: PPUSH
17807: LD_VAR 0 4
17811: PPUSH
17812: LD_INT 3
17814: PPUSH
17815: CALL_OW 272
17819: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
17820: LD_ADDR_VAR 0 8
17824: PUSH
17825: LD_VAR 0 6
17829: PPUSH
17830: LD_VAR 0 4
17834: PPUSH
17835: LD_INT 3
17837: PPUSH
17838: CALL_OW 273
17842: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
17843: LD_VAR 0 7
17847: PPUSH
17848: LD_VAR 0 8
17852: PPUSH
17853: CALL_OW 488
17857: NOT
17858: IFFALSE 17862
// continue ;
17860: GO 17794
// if HexInfo ( _x , _y ) = 0 then
17862: LD_VAR 0 7
17866: PPUSH
17867: LD_VAR 0 8
17871: PPUSH
17872: CALL_OW 428
17876: PUSH
17877: LD_INT 0
17879: EQUAL
17880: IFFALSE 17905
// begin ComMoveXY ( unit , _x , _y ) ;
17882: LD_VAR 0 1
17886: PPUSH
17887: LD_VAR 0 7
17891: PPUSH
17892: LD_VAR 0 8
17896: PPUSH
17897: CALL_OW 111
// exit ;
17901: POP
17902: POP
17903: GO 17909
// end ; end ;
17905: GO 17794
17907: POP
17908: POP
// end ;
17909: LD_VAR 0 3
17913: RET
// export function ScanBase ( side , base_area ) ; begin
17914: LD_INT 0
17916: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
17917: LD_ADDR_VAR 0 3
17921: PUSH
17922: LD_VAR 0 2
17926: PPUSH
17927: LD_INT 81
17929: PUSH
17930: LD_VAR 0 1
17934: PUSH
17935: EMPTY
17936: LIST
17937: LIST
17938: PPUSH
17939: CALL_OW 70
17943: ST_TO_ADDR
// end ;
17944: LD_VAR 0 3
17948: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
17949: LD_INT 0
17951: PPUSH
17952: PPUSH
17953: PPUSH
17954: PPUSH
// result := false ;
17955: LD_ADDR_VAR 0 2
17959: PUSH
17960: LD_INT 0
17962: ST_TO_ADDR
// side := GetSide ( unit ) ;
17963: LD_ADDR_VAR 0 3
17967: PUSH
17968: LD_VAR 0 1
17972: PPUSH
17973: CALL_OW 255
17977: ST_TO_ADDR
// nat := GetNation ( unit ) ;
17978: LD_ADDR_VAR 0 4
17982: PUSH
17983: LD_VAR 0 1
17987: PPUSH
17988: CALL_OW 248
17992: ST_TO_ADDR
// case nat of 1 :
17993: LD_VAR 0 4
17997: PUSH
17998: LD_INT 1
18000: DOUBLE
18001: EQUAL
18002: IFTRUE 18006
18004: GO 18017
18006: POP
// tech := tech_lassight ; 2 :
18007: LD_ADDR_VAR 0 5
18011: PUSH
18012: LD_INT 12
18014: ST_TO_ADDR
18015: GO 18056
18017: LD_INT 2
18019: DOUBLE
18020: EQUAL
18021: IFTRUE 18025
18023: GO 18036
18025: POP
// tech := tech_mortar ; 3 :
18026: LD_ADDR_VAR 0 5
18030: PUSH
18031: LD_INT 41
18033: ST_TO_ADDR
18034: GO 18056
18036: LD_INT 3
18038: DOUBLE
18039: EQUAL
18040: IFTRUE 18044
18042: GO 18055
18044: POP
// tech := tech_bazooka ; end ;
18045: LD_ADDR_VAR 0 5
18049: PUSH
18050: LD_INT 44
18052: ST_TO_ADDR
18053: GO 18056
18055: POP
// if Researched ( side , tech ) then
18056: LD_VAR 0 3
18060: PPUSH
18061: LD_VAR 0 5
18065: PPUSH
18066: CALL_OW 325
18070: IFFALSE 18097
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
18072: LD_ADDR_VAR 0 2
18076: PUSH
18077: LD_INT 5
18079: PUSH
18080: LD_INT 8
18082: PUSH
18083: LD_INT 9
18085: PUSH
18086: EMPTY
18087: LIST
18088: LIST
18089: LIST
18090: PUSH
18091: LD_VAR 0 4
18095: ARRAY
18096: ST_TO_ADDR
// end ;
18097: LD_VAR 0 2
18101: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
18102: LD_INT 0
18104: PPUSH
18105: PPUSH
18106: PPUSH
// if not mines then
18107: LD_VAR 0 2
18111: NOT
18112: IFFALSE 18116
// exit ;
18114: GO 18260
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
18116: LD_ADDR_VAR 0 5
18120: PUSH
18121: LD_INT 81
18123: PUSH
18124: LD_VAR 0 1
18128: PUSH
18129: EMPTY
18130: LIST
18131: LIST
18132: PUSH
18133: LD_INT 3
18135: PUSH
18136: LD_INT 21
18138: PUSH
18139: LD_INT 3
18141: PUSH
18142: EMPTY
18143: LIST
18144: LIST
18145: PUSH
18146: EMPTY
18147: LIST
18148: LIST
18149: PUSH
18150: EMPTY
18151: LIST
18152: LIST
18153: PPUSH
18154: CALL_OW 69
18158: ST_TO_ADDR
// for i in mines do
18159: LD_ADDR_VAR 0 4
18163: PUSH
18164: LD_VAR 0 2
18168: PUSH
18169: FOR_IN
18170: IFFALSE 18258
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
18172: LD_VAR 0 4
18176: PUSH
18177: LD_INT 1
18179: ARRAY
18180: PPUSH
18181: LD_VAR 0 4
18185: PUSH
18186: LD_INT 2
18188: ARRAY
18189: PPUSH
18190: CALL_OW 458
18194: NOT
18195: IFFALSE 18199
// continue ;
18197: GO 18169
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
18199: LD_VAR 0 4
18203: PUSH
18204: LD_INT 1
18206: ARRAY
18207: PPUSH
18208: LD_VAR 0 4
18212: PUSH
18213: LD_INT 2
18215: ARRAY
18216: PPUSH
18217: CALL_OW 428
18221: PUSH
18222: LD_VAR 0 5
18226: IN
18227: IFFALSE 18256
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
18229: LD_VAR 0 4
18233: PUSH
18234: LD_INT 1
18236: ARRAY
18237: PPUSH
18238: LD_VAR 0 4
18242: PUSH
18243: LD_INT 2
18245: ARRAY
18246: PPUSH
18247: LD_VAR 0 1
18251: PPUSH
18252: CALL_OW 456
// end ;
18256: GO 18169
18258: POP
18259: POP
// end ;
18260: LD_VAR 0 3
18264: RET
// export function Count ( array ) ; var i ; begin
18265: LD_INT 0
18267: PPUSH
18268: PPUSH
// result := 0 ;
18269: LD_ADDR_VAR 0 2
18273: PUSH
18274: LD_INT 0
18276: ST_TO_ADDR
// for i in array do
18277: LD_ADDR_VAR 0 3
18281: PUSH
18282: LD_VAR 0 1
18286: PUSH
18287: FOR_IN
18288: IFFALSE 18312
// if i then
18290: LD_VAR 0 3
18294: IFFALSE 18310
// result := result + 1 ;
18296: LD_ADDR_VAR 0 2
18300: PUSH
18301: LD_VAR 0 2
18305: PUSH
18306: LD_INT 1
18308: PLUS
18309: ST_TO_ADDR
18310: GO 18287
18312: POP
18313: POP
// end ;
18314: LD_VAR 0 2
18318: RET
// export function IsEmpty ( building ) ; begin
18319: LD_INT 0
18321: PPUSH
// if not building then
18322: LD_VAR 0 1
18326: NOT
18327: IFFALSE 18331
// exit ;
18329: GO 18374
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
18331: LD_ADDR_VAR 0 2
18335: PUSH
18336: LD_VAR 0 1
18340: PUSH
18341: LD_INT 22
18343: PUSH
18344: LD_VAR 0 1
18348: PPUSH
18349: CALL_OW 255
18353: PUSH
18354: EMPTY
18355: LIST
18356: LIST
18357: PUSH
18358: LD_INT 58
18360: PUSH
18361: EMPTY
18362: LIST
18363: PUSH
18364: EMPTY
18365: LIST
18366: LIST
18367: PPUSH
18368: CALL_OW 69
18372: IN
18373: ST_TO_ADDR
// end ;
18374: LD_VAR 0 2
18378: RET
// export function IsNotFull ( building ) ; begin
18379: LD_INT 0
18381: PPUSH
// if not building then
18382: LD_VAR 0 1
18386: NOT
18387: IFFALSE 18391
// exit ;
18389: GO 18410
// result := UnitsInside ( building ) < 6 ;
18391: LD_ADDR_VAR 0 2
18395: PUSH
18396: LD_VAR 0 1
18400: PPUSH
18401: CALL_OW 313
18405: PUSH
18406: LD_INT 6
18408: LESS
18409: ST_TO_ADDR
// end ;
18410: LD_VAR 0 2
18414: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
18415: LD_INT 0
18417: PPUSH
18418: PPUSH
18419: PPUSH
18420: PPUSH
// tmp := [ ] ;
18421: LD_ADDR_VAR 0 3
18425: PUSH
18426: EMPTY
18427: ST_TO_ADDR
// list := [ ] ;
18428: LD_ADDR_VAR 0 5
18432: PUSH
18433: EMPTY
18434: ST_TO_ADDR
// for i = 16 to 25 do
18435: LD_ADDR_VAR 0 4
18439: PUSH
18440: DOUBLE
18441: LD_INT 16
18443: DEC
18444: ST_TO_ADDR
18445: LD_INT 25
18447: PUSH
18448: FOR_TO
18449: IFFALSE 18522
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
18451: LD_ADDR_VAR 0 3
18455: PUSH
18456: LD_VAR 0 3
18460: PUSH
18461: LD_INT 22
18463: PUSH
18464: LD_VAR 0 1
18468: PPUSH
18469: CALL_OW 255
18473: PUSH
18474: EMPTY
18475: LIST
18476: LIST
18477: PUSH
18478: LD_INT 91
18480: PUSH
18481: LD_VAR 0 1
18485: PUSH
18486: LD_INT 6
18488: PUSH
18489: EMPTY
18490: LIST
18491: LIST
18492: LIST
18493: PUSH
18494: LD_INT 30
18496: PUSH
18497: LD_VAR 0 4
18501: PUSH
18502: EMPTY
18503: LIST
18504: LIST
18505: PUSH
18506: EMPTY
18507: LIST
18508: LIST
18509: LIST
18510: PUSH
18511: EMPTY
18512: LIST
18513: PPUSH
18514: CALL_OW 69
18518: ADD
18519: ST_TO_ADDR
18520: GO 18448
18522: POP
18523: POP
// for i = 1 to tmp do
18524: LD_ADDR_VAR 0 4
18528: PUSH
18529: DOUBLE
18530: LD_INT 1
18532: DEC
18533: ST_TO_ADDR
18534: LD_VAR 0 3
18538: PUSH
18539: FOR_TO
18540: IFFALSE 18628
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
18542: LD_ADDR_VAR 0 5
18546: PUSH
18547: LD_VAR 0 5
18551: PUSH
18552: LD_VAR 0 3
18556: PUSH
18557: LD_VAR 0 4
18561: ARRAY
18562: PPUSH
18563: CALL_OW 266
18567: PUSH
18568: LD_VAR 0 3
18572: PUSH
18573: LD_VAR 0 4
18577: ARRAY
18578: PPUSH
18579: CALL_OW 250
18583: PUSH
18584: LD_VAR 0 3
18588: PUSH
18589: LD_VAR 0 4
18593: ARRAY
18594: PPUSH
18595: CALL_OW 251
18599: PUSH
18600: LD_VAR 0 3
18604: PUSH
18605: LD_VAR 0 4
18609: ARRAY
18610: PPUSH
18611: CALL_OW 254
18615: PUSH
18616: EMPTY
18617: LIST
18618: LIST
18619: LIST
18620: LIST
18621: PUSH
18622: EMPTY
18623: LIST
18624: ADD
18625: ST_TO_ADDR
18626: GO 18539
18628: POP
18629: POP
// result := list ;
18630: LD_ADDR_VAR 0 2
18634: PUSH
18635: LD_VAR 0 5
18639: ST_TO_ADDR
// end ;
18640: LD_VAR 0 2
18644: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
18645: LD_INT 0
18647: PPUSH
18648: PPUSH
18649: PPUSH
18650: PPUSH
18651: PPUSH
18652: PPUSH
18653: PPUSH
// if not factory then
18654: LD_VAR 0 1
18658: NOT
18659: IFFALSE 18663
// exit ;
18661: GO 19256
// if control = control_apeman then
18663: LD_VAR 0 4
18667: PUSH
18668: LD_INT 5
18670: EQUAL
18671: IFFALSE 18780
// begin tmp := UnitsInside ( factory ) ;
18673: LD_ADDR_VAR 0 8
18677: PUSH
18678: LD_VAR 0 1
18682: PPUSH
18683: CALL_OW 313
18687: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
18688: LD_VAR 0 8
18692: PPUSH
18693: LD_INT 25
18695: PUSH
18696: LD_INT 12
18698: PUSH
18699: EMPTY
18700: LIST
18701: LIST
18702: PPUSH
18703: CALL_OW 72
18707: NOT
18708: IFFALSE 18718
// control := control_manual ;
18710: LD_ADDR_VAR 0 4
18714: PUSH
18715: LD_INT 1
18717: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
18718: LD_ADDR_VAR 0 8
18722: PUSH
18723: LD_VAR 0 1
18727: PPUSH
18728: CALL 18415 0 1
18732: ST_TO_ADDR
// if tmp then
18733: LD_VAR 0 8
18737: IFFALSE 18780
// begin for i in tmp do
18739: LD_ADDR_VAR 0 7
18743: PUSH
18744: LD_VAR 0 8
18748: PUSH
18749: FOR_IN
18750: IFFALSE 18778
// if i [ 1 ] = b_ext_radio then
18752: LD_VAR 0 7
18756: PUSH
18757: LD_INT 1
18759: ARRAY
18760: PUSH
18761: LD_INT 22
18763: EQUAL
18764: IFFALSE 18776
// begin control := control_remote ;
18766: LD_ADDR_VAR 0 4
18770: PUSH
18771: LD_INT 2
18773: ST_TO_ADDR
// break ;
18774: GO 18778
// end ;
18776: GO 18749
18778: POP
18779: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
18780: LD_VAR 0 1
18784: PPUSH
18785: LD_VAR 0 2
18789: PPUSH
18790: LD_VAR 0 3
18794: PPUSH
18795: LD_VAR 0 4
18799: PPUSH
18800: LD_VAR 0 5
18804: PPUSH
18805: CALL_OW 448
18809: IFFALSE 18844
// begin result := [ chassis , engine , control , weapon ] ;
18811: LD_ADDR_VAR 0 6
18815: PUSH
18816: LD_VAR 0 2
18820: PUSH
18821: LD_VAR 0 3
18825: PUSH
18826: LD_VAR 0 4
18830: PUSH
18831: LD_VAR 0 5
18835: PUSH
18836: EMPTY
18837: LIST
18838: LIST
18839: LIST
18840: LIST
18841: ST_TO_ADDR
// exit ;
18842: GO 19256
// end ; _chassis := AvailableChassisList ( factory ) ;
18844: LD_ADDR_VAR 0 9
18848: PUSH
18849: LD_VAR 0 1
18853: PPUSH
18854: CALL_OW 475
18858: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
18859: LD_ADDR_VAR 0 11
18863: PUSH
18864: LD_VAR 0 1
18868: PPUSH
18869: CALL_OW 476
18873: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
18874: LD_ADDR_VAR 0 12
18878: PUSH
18879: LD_VAR 0 1
18883: PPUSH
18884: CALL_OW 477
18888: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
18889: LD_ADDR_VAR 0 10
18893: PUSH
18894: LD_VAR 0 1
18898: PPUSH
18899: CALL_OW 478
18903: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
18904: LD_VAR 0 9
18908: NOT
18909: PUSH
18910: LD_VAR 0 11
18914: NOT
18915: OR
18916: PUSH
18917: LD_VAR 0 12
18921: NOT
18922: OR
18923: PUSH
18924: LD_VAR 0 10
18928: NOT
18929: OR
18930: IFFALSE 18965
// begin result := [ chassis , engine , control , weapon ] ;
18932: LD_ADDR_VAR 0 6
18936: PUSH
18937: LD_VAR 0 2
18941: PUSH
18942: LD_VAR 0 3
18946: PUSH
18947: LD_VAR 0 4
18951: PUSH
18952: LD_VAR 0 5
18956: PUSH
18957: EMPTY
18958: LIST
18959: LIST
18960: LIST
18961: LIST
18962: ST_TO_ADDR
// exit ;
18963: GO 19256
// end ; if not chassis in _chassis then
18965: LD_VAR 0 2
18969: PUSH
18970: LD_VAR 0 9
18974: IN
18975: NOT
18976: IFFALSE 19002
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
18978: LD_ADDR_VAR 0 2
18982: PUSH
18983: LD_VAR 0 9
18987: PUSH
18988: LD_INT 1
18990: PPUSH
18991: LD_VAR 0 9
18995: PPUSH
18996: CALL_OW 12
19000: ARRAY
19001: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
19002: LD_VAR 0 2
19006: PPUSH
19007: LD_VAR 0 3
19011: PPUSH
19012: CALL 19261 0 2
19016: NOT
19017: IFFALSE 19076
// repeat engine := _engine [ 1 ] ;
19019: LD_ADDR_VAR 0 3
19023: PUSH
19024: LD_VAR 0 11
19028: PUSH
19029: LD_INT 1
19031: ARRAY
19032: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
19033: LD_ADDR_VAR 0 11
19037: PUSH
19038: LD_VAR 0 11
19042: PPUSH
19043: LD_INT 1
19045: PPUSH
19046: CALL_OW 3
19050: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
19051: LD_VAR 0 2
19055: PPUSH
19056: LD_VAR 0 3
19060: PPUSH
19061: CALL 19261 0 2
19065: PUSH
19066: LD_VAR 0 11
19070: PUSH
19071: EMPTY
19072: EQUAL
19073: OR
19074: IFFALSE 19019
// if not control in _control then
19076: LD_VAR 0 4
19080: PUSH
19081: LD_VAR 0 12
19085: IN
19086: NOT
19087: IFFALSE 19113
// control := _control [ rand ( 1 , _control ) ] ;
19089: LD_ADDR_VAR 0 4
19093: PUSH
19094: LD_VAR 0 12
19098: PUSH
19099: LD_INT 1
19101: PPUSH
19102: LD_VAR 0 12
19106: PPUSH
19107: CALL_OW 12
19111: ARRAY
19112: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
19113: LD_VAR 0 2
19117: PPUSH
19118: LD_VAR 0 5
19122: PPUSH
19123: CALL 19481 0 2
19127: NOT
19128: IFFALSE 19187
// repeat weapon := _weapon [ 1 ] ;
19130: LD_ADDR_VAR 0 5
19134: PUSH
19135: LD_VAR 0 10
19139: PUSH
19140: LD_INT 1
19142: ARRAY
19143: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
19144: LD_ADDR_VAR 0 10
19148: PUSH
19149: LD_VAR 0 10
19153: PPUSH
19154: LD_INT 1
19156: PPUSH
19157: CALL_OW 3
19161: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
19162: LD_VAR 0 2
19166: PPUSH
19167: LD_VAR 0 5
19171: PPUSH
19172: CALL 19481 0 2
19176: PUSH
19177: LD_VAR 0 10
19181: PUSH
19182: EMPTY
19183: EQUAL
19184: OR
19185: IFFALSE 19130
// result := [ ] ;
19187: LD_ADDR_VAR 0 6
19191: PUSH
19192: EMPTY
19193: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
19194: LD_VAR 0 1
19198: PPUSH
19199: LD_VAR 0 2
19203: PPUSH
19204: LD_VAR 0 3
19208: PPUSH
19209: LD_VAR 0 4
19213: PPUSH
19214: LD_VAR 0 5
19218: PPUSH
19219: CALL_OW 448
19223: IFFALSE 19256
// result := [ chassis , engine , control , weapon ] ;
19225: LD_ADDR_VAR 0 6
19229: PUSH
19230: LD_VAR 0 2
19234: PUSH
19235: LD_VAR 0 3
19239: PUSH
19240: LD_VAR 0 4
19244: PUSH
19245: LD_VAR 0 5
19249: PUSH
19250: EMPTY
19251: LIST
19252: LIST
19253: LIST
19254: LIST
19255: ST_TO_ADDR
// end ;
19256: LD_VAR 0 6
19260: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
19261: LD_INT 0
19263: PPUSH
// if not chassis or not engine then
19264: LD_VAR 0 1
19268: NOT
19269: PUSH
19270: LD_VAR 0 2
19274: NOT
19275: OR
19276: IFFALSE 19280
// exit ;
19278: GO 19476
// case engine of engine_solar :
19280: LD_VAR 0 2
19284: PUSH
19285: LD_INT 2
19287: DOUBLE
19288: EQUAL
19289: IFTRUE 19293
19291: GO 19331
19293: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
19294: LD_ADDR_VAR 0 3
19298: PUSH
19299: LD_INT 11
19301: PUSH
19302: LD_INT 12
19304: PUSH
19305: LD_INT 13
19307: PUSH
19308: LD_INT 14
19310: PUSH
19311: LD_INT 1
19313: PUSH
19314: LD_INT 2
19316: PUSH
19317: LD_INT 3
19319: PUSH
19320: EMPTY
19321: LIST
19322: LIST
19323: LIST
19324: LIST
19325: LIST
19326: LIST
19327: LIST
19328: ST_TO_ADDR
19329: GO 19460
19331: LD_INT 1
19333: DOUBLE
19334: EQUAL
19335: IFTRUE 19339
19337: GO 19401
19339: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
19340: LD_ADDR_VAR 0 3
19344: PUSH
19345: LD_INT 11
19347: PUSH
19348: LD_INT 12
19350: PUSH
19351: LD_INT 13
19353: PUSH
19354: LD_INT 14
19356: PUSH
19357: LD_INT 1
19359: PUSH
19360: LD_INT 2
19362: PUSH
19363: LD_INT 3
19365: PUSH
19366: LD_INT 4
19368: PUSH
19369: LD_INT 5
19371: PUSH
19372: LD_INT 21
19374: PUSH
19375: LD_INT 23
19377: PUSH
19378: LD_INT 22
19380: PUSH
19381: LD_INT 24
19383: PUSH
19384: EMPTY
19385: LIST
19386: LIST
19387: LIST
19388: LIST
19389: LIST
19390: LIST
19391: LIST
19392: LIST
19393: LIST
19394: LIST
19395: LIST
19396: LIST
19397: LIST
19398: ST_TO_ADDR
19399: GO 19460
19401: LD_INT 3
19403: DOUBLE
19404: EQUAL
19405: IFTRUE 19409
19407: GO 19459
19409: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
19410: LD_ADDR_VAR 0 3
19414: PUSH
19415: LD_INT 13
19417: PUSH
19418: LD_INT 14
19420: PUSH
19421: LD_INT 2
19423: PUSH
19424: LD_INT 3
19426: PUSH
19427: LD_INT 4
19429: PUSH
19430: LD_INT 5
19432: PUSH
19433: LD_INT 21
19435: PUSH
19436: LD_INT 22
19438: PUSH
19439: LD_INT 23
19441: PUSH
19442: LD_INT 24
19444: PUSH
19445: EMPTY
19446: LIST
19447: LIST
19448: LIST
19449: LIST
19450: LIST
19451: LIST
19452: LIST
19453: LIST
19454: LIST
19455: LIST
19456: ST_TO_ADDR
19457: GO 19460
19459: POP
// result := ( chassis in result ) ;
19460: LD_ADDR_VAR 0 3
19464: PUSH
19465: LD_VAR 0 1
19469: PUSH
19470: LD_VAR 0 3
19474: IN
19475: ST_TO_ADDR
// end ;
19476: LD_VAR 0 3
19480: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
19481: LD_INT 0
19483: PPUSH
// if not chassis or not weapon then
19484: LD_VAR 0 1
19488: NOT
19489: PUSH
19490: LD_VAR 0 2
19494: NOT
19495: OR
19496: IFFALSE 19500
// exit ;
19498: GO 20526
// case weapon of us_machine_gun :
19500: LD_VAR 0 2
19504: PUSH
19505: LD_INT 2
19507: DOUBLE
19508: EQUAL
19509: IFTRUE 19513
19511: GO 19543
19513: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
19514: LD_ADDR_VAR 0 3
19518: PUSH
19519: LD_INT 1
19521: PUSH
19522: LD_INT 2
19524: PUSH
19525: LD_INT 3
19527: PUSH
19528: LD_INT 4
19530: PUSH
19531: LD_INT 5
19533: PUSH
19534: EMPTY
19535: LIST
19536: LIST
19537: LIST
19538: LIST
19539: LIST
19540: ST_TO_ADDR
19541: GO 20510
19543: LD_INT 3
19545: DOUBLE
19546: EQUAL
19547: IFTRUE 19551
19549: GO 19581
19551: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
19552: LD_ADDR_VAR 0 3
19556: PUSH
19557: LD_INT 1
19559: PUSH
19560: LD_INT 2
19562: PUSH
19563: LD_INT 3
19565: PUSH
19566: LD_INT 4
19568: PUSH
19569: LD_INT 5
19571: PUSH
19572: EMPTY
19573: LIST
19574: LIST
19575: LIST
19576: LIST
19577: LIST
19578: ST_TO_ADDR
19579: GO 20510
19581: LD_INT 11
19583: DOUBLE
19584: EQUAL
19585: IFTRUE 19589
19587: GO 19619
19589: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
19590: LD_ADDR_VAR 0 3
19594: PUSH
19595: LD_INT 1
19597: PUSH
19598: LD_INT 2
19600: PUSH
19601: LD_INT 3
19603: PUSH
19604: LD_INT 4
19606: PUSH
19607: LD_INT 5
19609: PUSH
19610: EMPTY
19611: LIST
19612: LIST
19613: LIST
19614: LIST
19615: LIST
19616: ST_TO_ADDR
19617: GO 20510
19619: LD_INT 4
19621: DOUBLE
19622: EQUAL
19623: IFTRUE 19627
19625: GO 19653
19627: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
19628: LD_ADDR_VAR 0 3
19632: PUSH
19633: LD_INT 2
19635: PUSH
19636: LD_INT 3
19638: PUSH
19639: LD_INT 4
19641: PUSH
19642: LD_INT 5
19644: PUSH
19645: EMPTY
19646: LIST
19647: LIST
19648: LIST
19649: LIST
19650: ST_TO_ADDR
19651: GO 20510
19653: LD_INT 5
19655: DOUBLE
19656: EQUAL
19657: IFTRUE 19661
19659: GO 19687
19661: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
19662: LD_ADDR_VAR 0 3
19666: PUSH
19667: LD_INT 2
19669: PUSH
19670: LD_INT 3
19672: PUSH
19673: LD_INT 4
19675: PUSH
19676: LD_INT 5
19678: PUSH
19679: EMPTY
19680: LIST
19681: LIST
19682: LIST
19683: LIST
19684: ST_TO_ADDR
19685: GO 20510
19687: LD_INT 9
19689: DOUBLE
19690: EQUAL
19691: IFTRUE 19695
19693: GO 19721
19695: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
19696: LD_ADDR_VAR 0 3
19700: PUSH
19701: LD_INT 2
19703: PUSH
19704: LD_INT 3
19706: PUSH
19707: LD_INT 4
19709: PUSH
19710: LD_INT 5
19712: PUSH
19713: EMPTY
19714: LIST
19715: LIST
19716: LIST
19717: LIST
19718: ST_TO_ADDR
19719: GO 20510
19721: LD_INT 7
19723: DOUBLE
19724: EQUAL
19725: IFTRUE 19729
19727: GO 19755
19729: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
19730: LD_ADDR_VAR 0 3
19734: PUSH
19735: LD_INT 2
19737: PUSH
19738: LD_INT 3
19740: PUSH
19741: LD_INT 4
19743: PUSH
19744: LD_INT 5
19746: PUSH
19747: EMPTY
19748: LIST
19749: LIST
19750: LIST
19751: LIST
19752: ST_TO_ADDR
19753: GO 20510
19755: LD_INT 12
19757: DOUBLE
19758: EQUAL
19759: IFTRUE 19763
19761: GO 19789
19763: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
19764: LD_ADDR_VAR 0 3
19768: PUSH
19769: LD_INT 2
19771: PUSH
19772: LD_INT 3
19774: PUSH
19775: LD_INT 4
19777: PUSH
19778: LD_INT 5
19780: PUSH
19781: EMPTY
19782: LIST
19783: LIST
19784: LIST
19785: LIST
19786: ST_TO_ADDR
19787: GO 20510
19789: LD_INT 13
19791: DOUBLE
19792: EQUAL
19793: IFTRUE 19797
19795: GO 19823
19797: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
19798: LD_ADDR_VAR 0 3
19802: PUSH
19803: LD_INT 2
19805: PUSH
19806: LD_INT 3
19808: PUSH
19809: LD_INT 4
19811: PUSH
19812: LD_INT 5
19814: PUSH
19815: EMPTY
19816: LIST
19817: LIST
19818: LIST
19819: LIST
19820: ST_TO_ADDR
19821: GO 20510
19823: LD_INT 14
19825: DOUBLE
19826: EQUAL
19827: IFTRUE 19831
19829: GO 19849
19831: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
19832: LD_ADDR_VAR 0 3
19836: PUSH
19837: LD_INT 4
19839: PUSH
19840: LD_INT 5
19842: PUSH
19843: EMPTY
19844: LIST
19845: LIST
19846: ST_TO_ADDR
19847: GO 20510
19849: LD_INT 6
19851: DOUBLE
19852: EQUAL
19853: IFTRUE 19857
19855: GO 19875
19857: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
19858: LD_ADDR_VAR 0 3
19862: PUSH
19863: LD_INT 4
19865: PUSH
19866: LD_INT 5
19868: PUSH
19869: EMPTY
19870: LIST
19871: LIST
19872: ST_TO_ADDR
19873: GO 20510
19875: LD_INT 10
19877: DOUBLE
19878: EQUAL
19879: IFTRUE 19883
19881: GO 19901
19883: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
19884: LD_ADDR_VAR 0 3
19888: PUSH
19889: LD_INT 4
19891: PUSH
19892: LD_INT 5
19894: PUSH
19895: EMPTY
19896: LIST
19897: LIST
19898: ST_TO_ADDR
19899: GO 20510
19901: LD_INT 22
19903: DOUBLE
19904: EQUAL
19905: IFTRUE 19909
19907: GO 19935
19909: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
19910: LD_ADDR_VAR 0 3
19914: PUSH
19915: LD_INT 11
19917: PUSH
19918: LD_INT 12
19920: PUSH
19921: LD_INT 13
19923: PUSH
19924: LD_INT 14
19926: PUSH
19927: EMPTY
19928: LIST
19929: LIST
19930: LIST
19931: LIST
19932: ST_TO_ADDR
19933: GO 20510
19935: LD_INT 23
19937: DOUBLE
19938: EQUAL
19939: IFTRUE 19943
19941: GO 19969
19943: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
19944: LD_ADDR_VAR 0 3
19948: PUSH
19949: LD_INT 11
19951: PUSH
19952: LD_INT 12
19954: PUSH
19955: LD_INT 13
19957: PUSH
19958: LD_INT 14
19960: PUSH
19961: EMPTY
19962: LIST
19963: LIST
19964: LIST
19965: LIST
19966: ST_TO_ADDR
19967: GO 20510
19969: LD_INT 24
19971: DOUBLE
19972: EQUAL
19973: IFTRUE 19977
19975: GO 20003
19977: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
19978: LD_ADDR_VAR 0 3
19982: PUSH
19983: LD_INT 11
19985: PUSH
19986: LD_INT 12
19988: PUSH
19989: LD_INT 13
19991: PUSH
19992: LD_INT 14
19994: PUSH
19995: EMPTY
19996: LIST
19997: LIST
19998: LIST
19999: LIST
20000: ST_TO_ADDR
20001: GO 20510
20003: LD_INT 30
20005: DOUBLE
20006: EQUAL
20007: IFTRUE 20011
20009: GO 20037
20011: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
20012: LD_ADDR_VAR 0 3
20016: PUSH
20017: LD_INT 11
20019: PUSH
20020: LD_INT 12
20022: PUSH
20023: LD_INT 13
20025: PUSH
20026: LD_INT 14
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: LIST
20033: LIST
20034: ST_TO_ADDR
20035: GO 20510
20037: LD_INT 25
20039: DOUBLE
20040: EQUAL
20041: IFTRUE 20045
20043: GO 20063
20045: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
20046: LD_ADDR_VAR 0 3
20050: PUSH
20051: LD_INT 13
20053: PUSH
20054: LD_INT 14
20056: PUSH
20057: EMPTY
20058: LIST
20059: LIST
20060: ST_TO_ADDR
20061: GO 20510
20063: LD_INT 27
20065: DOUBLE
20066: EQUAL
20067: IFTRUE 20071
20069: GO 20089
20071: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
20072: LD_ADDR_VAR 0 3
20076: PUSH
20077: LD_INT 13
20079: PUSH
20080: LD_INT 14
20082: PUSH
20083: EMPTY
20084: LIST
20085: LIST
20086: ST_TO_ADDR
20087: GO 20510
20089: LD_INT 28
20091: DOUBLE
20092: EQUAL
20093: IFTRUE 20097
20095: GO 20115
20097: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
20098: LD_ADDR_VAR 0 3
20102: PUSH
20103: LD_INT 13
20105: PUSH
20106: LD_INT 14
20108: PUSH
20109: EMPTY
20110: LIST
20111: LIST
20112: ST_TO_ADDR
20113: GO 20510
20115: LD_INT 29
20117: DOUBLE
20118: EQUAL
20119: IFTRUE 20123
20121: GO 20141
20123: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
20124: LD_ADDR_VAR 0 3
20128: PUSH
20129: LD_INT 13
20131: PUSH
20132: LD_INT 14
20134: PUSH
20135: EMPTY
20136: LIST
20137: LIST
20138: ST_TO_ADDR
20139: GO 20510
20141: LD_INT 31
20143: DOUBLE
20144: EQUAL
20145: IFTRUE 20149
20147: GO 20167
20149: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
20150: LD_ADDR_VAR 0 3
20154: PUSH
20155: LD_INT 13
20157: PUSH
20158: LD_INT 14
20160: PUSH
20161: EMPTY
20162: LIST
20163: LIST
20164: ST_TO_ADDR
20165: GO 20510
20167: LD_INT 26
20169: DOUBLE
20170: EQUAL
20171: IFTRUE 20175
20173: GO 20193
20175: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
20176: LD_ADDR_VAR 0 3
20180: PUSH
20181: LD_INT 13
20183: PUSH
20184: LD_INT 14
20186: PUSH
20187: EMPTY
20188: LIST
20189: LIST
20190: ST_TO_ADDR
20191: GO 20510
20193: LD_INT 42
20195: DOUBLE
20196: EQUAL
20197: IFTRUE 20201
20199: GO 20227
20201: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
20202: LD_ADDR_VAR 0 3
20206: PUSH
20207: LD_INT 21
20209: PUSH
20210: LD_INT 22
20212: PUSH
20213: LD_INT 23
20215: PUSH
20216: LD_INT 24
20218: PUSH
20219: EMPTY
20220: LIST
20221: LIST
20222: LIST
20223: LIST
20224: ST_TO_ADDR
20225: GO 20510
20227: LD_INT 43
20229: DOUBLE
20230: EQUAL
20231: IFTRUE 20235
20233: GO 20261
20235: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
20236: LD_ADDR_VAR 0 3
20240: PUSH
20241: LD_INT 21
20243: PUSH
20244: LD_INT 22
20246: PUSH
20247: LD_INT 23
20249: PUSH
20250: LD_INT 24
20252: PUSH
20253: EMPTY
20254: LIST
20255: LIST
20256: LIST
20257: LIST
20258: ST_TO_ADDR
20259: GO 20510
20261: LD_INT 44
20263: DOUBLE
20264: EQUAL
20265: IFTRUE 20269
20267: GO 20295
20269: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
20270: LD_ADDR_VAR 0 3
20274: PUSH
20275: LD_INT 21
20277: PUSH
20278: LD_INT 22
20280: PUSH
20281: LD_INT 23
20283: PUSH
20284: LD_INT 24
20286: PUSH
20287: EMPTY
20288: LIST
20289: LIST
20290: LIST
20291: LIST
20292: ST_TO_ADDR
20293: GO 20510
20295: LD_INT 45
20297: DOUBLE
20298: EQUAL
20299: IFTRUE 20303
20301: GO 20329
20303: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
20304: LD_ADDR_VAR 0 3
20308: PUSH
20309: LD_INT 21
20311: PUSH
20312: LD_INT 22
20314: PUSH
20315: LD_INT 23
20317: PUSH
20318: LD_INT 24
20320: PUSH
20321: EMPTY
20322: LIST
20323: LIST
20324: LIST
20325: LIST
20326: ST_TO_ADDR
20327: GO 20510
20329: LD_INT 49
20331: DOUBLE
20332: EQUAL
20333: IFTRUE 20337
20335: GO 20363
20337: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
20338: LD_ADDR_VAR 0 3
20342: PUSH
20343: LD_INT 21
20345: PUSH
20346: LD_INT 22
20348: PUSH
20349: LD_INT 23
20351: PUSH
20352: LD_INT 24
20354: PUSH
20355: EMPTY
20356: LIST
20357: LIST
20358: LIST
20359: LIST
20360: ST_TO_ADDR
20361: GO 20510
20363: LD_INT 51
20365: DOUBLE
20366: EQUAL
20367: IFTRUE 20371
20369: GO 20397
20371: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
20372: LD_ADDR_VAR 0 3
20376: PUSH
20377: LD_INT 21
20379: PUSH
20380: LD_INT 22
20382: PUSH
20383: LD_INT 23
20385: PUSH
20386: LD_INT 24
20388: PUSH
20389: EMPTY
20390: LIST
20391: LIST
20392: LIST
20393: LIST
20394: ST_TO_ADDR
20395: GO 20510
20397: LD_INT 52
20399: DOUBLE
20400: EQUAL
20401: IFTRUE 20405
20403: GO 20431
20405: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
20406: LD_ADDR_VAR 0 3
20410: PUSH
20411: LD_INT 21
20413: PUSH
20414: LD_INT 22
20416: PUSH
20417: LD_INT 23
20419: PUSH
20420: LD_INT 24
20422: PUSH
20423: EMPTY
20424: LIST
20425: LIST
20426: LIST
20427: LIST
20428: ST_TO_ADDR
20429: GO 20510
20431: LD_INT 53
20433: DOUBLE
20434: EQUAL
20435: IFTRUE 20439
20437: GO 20457
20439: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
20440: LD_ADDR_VAR 0 3
20444: PUSH
20445: LD_INT 23
20447: PUSH
20448: LD_INT 24
20450: PUSH
20451: EMPTY
20452: LIST
20453: LIST
20454: ST_TO_ADDR
20455: GO 20510
20457: LD_INT 46
20459: DOUBLE
20460: EQUAL
20461: IFTRUE 20465
20463: GO 20483
20465: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
20466: LD_ADDR_VAR 0 3
20470: PUSH
20471: LD_INT 23
20473: PUSH
20474: LD_INT 24
20476: PUSH
20477: EMPTY
20478: LIST
20479: LIST
20480: ST_TO_ADDR
20481: GO 20510
20483: LD_INT 47
20485: DOUBLE
20486: EQUAL
20487: IFTRUE 20491
20489: GO 20509
20491: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
20492: LD_ADDR_VAR 0 3
20496: PUSH
20497: LD_INT 23
20499: PUSH
20500: LD_INT 24
20502: PUSH
20503: EMPTY
20504: LIST
20505: LIST
20506: ST_TO_ADDR
20507: GO 20510
20509: POP
// result := ( chassis in result ) ;
20510: LD_ADDR_VAR 0 3
20514: PUSH
20515: LD_VAR 0 1
20519: PUSH
20520: LD_VAR 0 3
20524: IN
20525: ST_TO_ADDR
// end ;
20526: LD_VAR 0 3
20530: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
20531: LD_INT 0
20533: PPUSH
20534: PPUSH
20535: PPUSH
20536: PPUSH
20537: PPUSH
20538: PPUSH
20539: PPUSH
// result := array ;
20540: LD_ADDR_VAR 0 5
20544: PUSH
20545: LD_VAR 0 1
20549: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
20550: LD_VAR 0 1
20554: NOT
20555: PUSH
20556: LD_VAR 0 2
20560: NOT
20561: OR
20562: PUSH
20563: LD_VAR 0 3
20567: NOT
20568: OR
20569: PUSH
20570: LD_VAR 0 2
20574: PUSH
20575: LD_VAR 0 1
20579: GREATER
20580: OR
20581: PUSH
20582: LD_VAR 0 3
20586: PUSH
20587: LD_VAR 0 1
20591: GREATER
20592: OR
20593: IFFALSE 20597
// exit ;
20595: GO 20893
// if direction then
20597: LD_VAR 0 4
20601: IFFALSE 20665
// begin d := 1 ;
20603: LD_ADDR_VAR 0 9
20607: PUSH
20608: LD_INT 1
20610: ST_TO_ADDR
// if i_from > i_to then
20611: LD_VAR 0 2
20615: PUSH
20616: LD_VAR 0 3
20620: GREATER
20621: IFFALSE 20647
// length := ( array - i_from ) + i_to else
20623: LD_ADDR_VAR 0 11
20627: PUSH
20628: LD_VAR 0 1
20632: PUSH
20633: LD_VAR 0 2
20637: MINUS
20638: PUSH
20639: LD_VAR 0 3
20643: PLUS
20644: ST_TO_ADDR
20645: GO 20663
// length := i_to - i_from ;
20647: LD_ADDR_VAR 0 11
20651: PUSH
20652: LD_VAR 0 3
20656: PUSH
20657: LD_VAR 0 2
20661: MINUS
20662: ST_TO_ADDR
// end else
20663: GO 20726
// begin d := - 1 ;
20665: LD_ADDR_VAR 0 9
20669: PUSH
20670: LD_INT 1
20672: NEG
20673: ST_TO_ADDR
// if i_from > i_to then
20674: LD_VAR 0 2
20678: PUSH
20679: LD_VAR 0 3
20683: GREATER
20684: IFFALSE 20704
// length := i_from - i_to else
20686: LD_ADDR_VAR 0 11
20690: PUSH
20691: LD_VAR 0 2
20695: PUSH
20696: LD_VAR 0 3
20700: MINUS
20701: ST_TO_ADDR
20702: GO 20726
// length := ( array - i_to ) + i_from ;
20704: LD_ADDR_VAR 0 11
20708: PUSH
20709: LD_VAR 0 1
20713: PUSH
20714: LD_VAR 0 3
20718: MINUS
20719: PUSH
20720: LD_VAR 0 2
20724: PLUS
20725: ST_TO_ADDR
// end ; if not length then
20726: LD_VAR 0 11
20730: NOT
20731: IFFALSE 20735
// exit ;
20733: GO 20893
// tmp := array ;
20735: LD_ADDR_VAR 0 10
20739: PUSH
20740: LD_VAR 0 1
20744: ST_TO_ADDR
// for i = 1 to length do
20745: LD_ADDR_VAR 0 6
20749: PUSH
20750: DOUBLE
20751: LD_INT 1
20753: DEC
20754: ST_TO_ADDR
20755: LD_VAR 0 11
20759: PUSH
20760: FOR_TO
20761: IFFALSE 20881
// begin for j = 1 to array do
20763: LD_ADDR_VAR 0 7
20767: PUSH
20768: DOUBLE
20769: LD_INT 1
20771: DEC
20772: ST_TO_ADDR
20773: LD_VAR 0 1
20777: PUSH
20778: FOR_TO
20779: IFFALSE 20867
// begin k := j + d ;
20781: LD_ADDR_VAR 0 8
20785: PUSH
20786: LD_VAR 0 7
20790: PUSH
20791: LD_VAR 0 9
20795: PLUS
20796: ST_TO_ADDR
// if k > array then
20797: LD_VAR 0 8
20801: PUSH
20802: LD_VAR 0 1
20806: GREATER
20807: IFFALSE 20817
// k := 1 ;
20809: LD_ADDR_VAR 0 8
20813: PUSH
20814: LD_INT 1
20816: ST_TO_ADDR
// if not k then
20817: LD_VAR 0 8
20821: NOT
20822: IFFALSE 20834
// k := array ;
20824: LD_ADDR_VAR 0 8
20828: PUSH
20829: LD_VAR 0 1
20833: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
20834: LD_ADDR_VAR 0 10
20838: PUSH
20839: LD_VAR 0 10
20843: PPUSH
20844: LD_VAR 0 8
20848: PPUSH
20849: LD_VAR 0 1
20853: PUSH
20854: LD_VAR 0 7
20858: ARRAY
20859: PPUSH
20860: CALL_OW 1
20864: ST_TO_ADDR
// end ;
20865: GO 20778
20867: POP
20868: POP
// array := tmp ;
20869: LD_ADDR_VAR 0 1
20873: PUSH
20874: LD_VAR 0 10
20878: ST_TO_ADDR
// end ;
20879: GO 20760
20881: POP
20882: POP
// result := array ;
20883: LD_ADDR_VAR 0 5
20887: PUSH
20888: LD_VAR 0 1
20892: ST_TO_ADDR
// end ;
20893: LD_VAR 0 5
20897: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
20898: LD_INT 0
20900: PPUSH
20901: PPUSH
// result := 0 ;
20902: LD_ADDR_VAR 0 3
20906: PUSH
20907: LD_INT 0
20909: ST_TO_ADDR
// if not array or not value in array then
20910: LD_VAR 0 1
20914: NOT
20915: PUSH
20916: LD_VAR 0 2
20920: PUSH
20921: LD_VAR 0 1
20925: IN
20926: NOT
20927: OR
20928: IFFALSE 20932
// exit ;
20930: GO 20986
// for i = 1 to array do
20932: LD_ADDR_VAR 0 4
20936: PUSH
20937: DOUBLE
20938: LD_INT 1
20940: DEC
20941: ST_TO_ADDR
20942: LD_VAR 0 1
20946: PUSH
20947: FOR_TO
20948: IFFALSE 20984
// if value = array [ i ] then
20950: LD_VAR 0 2
20954: PUSH
20955: LD_VAR 0 1
20959: PUSH
20960: LD_VAR 0 4
20964: ARRAY
20965: EQUAL
20966: IFFALSE 20982
// begin result := i ;
20968: LD_ADDR_VAR 0 3
20972: PUSH
20973: LD_VAR 0 4
20977: ST_TO_ADDR
// exit ;
20978: POP
20979: POP
20980: GO 20986
// end ;
20982: GO 20947
20984: POP
20985: POP
// end ;
20986: LD_VAR 0 3
20990: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
20991: LD_INT 0
20993: PPUSH
// vc_chassis := chassis ;
20994: LD_ADDR_OWVAR 37
20998: PUSH
20999: LD_VAR 0 1
21003: ST_TO_ADDR
// vc_engine := engine ;
21004: LD_ADDR_OWVAR 39
21008: PUSH
21009: LD_VAR 0 2
21013: ST_TO_ADDR
// vc_control := control ;
21014: LD_ADDR_OWVAR 38
21018: PUSH
21019: LD_VAR 0 3
21023: ST_TO_ADDR
// vc_weapon := weapon ;
21024: LD_ADDR_OWVAR 40
21028: PUSH
21029: LD_VAR 0 4
21033: ST_TO_ADDR
// vc_fuel_battery := fuel ;
21034: LD_ADDR_OWVAR 41
21038: PUSH
21039: LD_VAR 0 5
21043: ST_TO_ADDR
// end ;
21044: LD_VAR 0 6
21048: RET
// export function WantPlant ( unit ) ; var task ; begin
21049: LD_INT 0
21051: PPUSH
21052: PPUSH
// result := false ;
21053: LD_ADDR_VAR 0 2
21057: PUSH
21058: LD_INT 0
21060: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
21061: LD_ADDR_VAR 0 3
21065: PUSH
21066: LD_VAR 0 1
21070: PPUSH
21071: CALL_OW 437
21075: ST_TO_ADDR
// if task then
21076: LD_VAR 0 3
21080: IFFALSE 21108
// if task [ 1 ] [ 1 ] = p then
21082: LD_VAR 0 3
21086: PUSH
21087: LD_INT 1
21089: ARRAY
21090: PUSH
21091: LD_INT 1
21093: ARRAY
21094: PUSH
21095: LD_STRING p
21097: EQUAL
21098: IFFALSE 21108
// result := true ;
21100: LD_ADDR_VAR 0 2
21104: PUSH
21105: LD_INT 1
21107: ST_TO_ADDR
// end ;
21108: LD_VAR 0 2
21112: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
21113: LD_INT 0
21115: PPUSH
21116: PPUSH
21117: PPUSH
21118: PPUSH
// if pos < 1 then
21119: LD_VAR 0 2
21123: PUSH
21124: LD_INT 1
21126: LESS
21127: IFFALSE 21131
// exit ;
21129: GO 21434
// if pos = 1 then
21131: LD_VAR 0 2
21135: PUSH
21136: LD_INT 1
21138: EQUAL
21139: IFFALSE 21172
// result := Replace ( arr , pos [ 1 ] , value ) else
21141: LD_ADDR_VAR 0 4
21145: PUSH
21146: LD_VAR 0 1
21150: PPUSH
21151: LD_VAR 0 2
21155: PUSH
21156: LD_INT 1
21158: ARRAY
21159: PPUSH
21160: LD_VAR 0 3
21164: PPUSH
21165: CALL_OW 1
21169: ST_TO_ADDR
21170: GO 21434
// begin tmp := arr ;
21172: LD_ADDR_VAR 0 6
21176: PUSH
21177: LD_VAR 0 1
21181: ST_TO_ADDR
// s_arr := [ tmp ] ;
21182: LD_ADDR_VAR 0 7
21186: PUSH
21187: LD_VAR 0 6
21191: PUSH
21192: EMPTY
21193: LIST
21194: ST_TO_ADDR
// for i = 1 to pos - 1 do
21195: LD_ADDR_VAR 0 5
21199: PUSH
21200: DOUBLE
21201: LD_INT 1
21203: DEC
21204: ST_TO_ADDR
21205: LD_VAR 0 2
21209: PUSH
21210: LD_INT 1
21212: MINUS
21213: PUSH
21214: FOR_TO
21215: IFFALSE 21260
// begin tmp := tmp [ pos [ i ] ] ;
21217: LD_ADDR_VAR 0 6
21221: PUSH
21222: LD_VAR 0 6
21226: PUSH
21227: LD_VAR 0 2
21231: PUSH
21232: LD_VAR 0 5
21236: ARRAY
21237: ARRAY
21238: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
21239: LD_ADDR_VAR 0 7
21243: PUSH
21244: LD_VAR 0 7
21248: PUSH
21249: LD_VAR 0 6
21253: PUSH
21254: EMPTY
21255: LIST
21256: ADD
21257: ST_TO_ADDR
// end ;
21258: GO 21214
21260: POP
21261: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
21262: LD_ADDR_VAR 0 6
21266: PUSH
21267: LD_VAR 0 6
21271: PPUSH
21272: LD_VAR 0 2
21276: PUSH
21277: LD_VAR 0 2
21281: ARRAY
21282: PPUSH
21283: LD_VAR 0 3
21287: PPUSH
21288: CALL_OW 1
21292: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
21293: LD_ADDR_VAR 0 7
21297: PUSH
21298: LD_VAR 0 7
21302: PPUSH
21303: LD_VAR 0 7
21307: PPUSH
21308: LD_VAR 0 6
21312: PPUSH
21313: CALL_OW 1
21317: ST_TO_ADDR
// for i = s_arr downto 2 do
21318: LD_ADDR_VAR 0 5
21322: PUSH
21323: DOUBLE
21324: LD_VAR 0 7
21328: INC
21329: ST_TO_ADDR
21330: LD_INT 2
21332: PUSH
21333: FOR_DOWNTO
21334: IFFALSE 21418
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
21336: LD_ADDR_VAR 0 6
21340: PUSH
21341: LD_VAR 0 7
21345: PUSH
21346: LD_VAR 0 5
21350: PUSH
21351: LD_INT 1
21353: MINUS
21354: ARRAY
21355: PPUSH
21356: LD_VAR 0 2
21360: PUSH
21361: LD_VAR 0 5
21365: PUSH
21366: LD_INT 1
21368: MINUS
21369: ARRAY
21370: PPUSH
21371: LD_VAR 0 7
21375: PUSH
21376: LD_VAR 0 5
21380: ARRAY
21381: PPUSH
21382: CALL_OW 1
21386: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
21387: LD_ADDR_VAR 0 7
21391: PUSH
21392: LD_VAR 0 7
21396: PPUSH
21397: LD_VAR 0 5
21401: PUSH
21402: LD_INT 1
21404: MINUS
21405: PPUSH
21406: LD_VAR 0 6
21410: PPUSH
21411: CALL_OW 1
21415: ST_TO_ADDR
// end ;
21416: GO 21333
21418: POP
21419: POP
// result := s_arr [ 1 ] ;
21420: LD_ADDR_VAR 0 4
21424: PUSH
21425: LD_VAR 0 7
21429: PUSH
21430: LD_INT 1
21432: ARRAY
21433: ST_TO_ADDR
// end ; end ;
21434: LD_VAR 0 4
21438: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
21439: LD_INT 0
21441: PPUSH
21442: PPUSH
// if not list then
21443: LD_VAR 0 1
21447: NOT
21448: IFFALSE 21452
// exit ;
21450: GO 21543
// i := list [ pos1 ] ;
21452: LD_ADDR_VAR 0 5
21456: PUSH
21457: LD_VAR 0 1
21461: PUSH
21462: LD_VAR 0 2
21466: ARRAY
21467: ST_TO_ADDR
// if not i then
21468: LD_VAR 0 5
21472: NOT
21473: IFFALSE 21477
// exit ;
21475: GO 21543
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
21477: LD_ADDR_VAR 0 1
21481: PUSH
21482: LD_VAR 0 1
21486: PPUSH
21487: LD_VAR 0 2
21491: PPUSH
21492: LD_VAR 0 1
21496: PUSH
21497: LD_VAR 0 3
21501: ARRAY
21502: PPUSH
21503: CALL_OW 1
21507: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
21508: LD_ADDR_VAR 0 1
21512: PUSH
21513: LD_VAR 0 1
21517: PPUSH
21518: LD_VAR 0 3
21522: PPUSH
21523: LD_VAR 0 5
21527: PPUSH
21528: CALL_OW 1
21532: ST_TO_ADDR
// result := list ;
21533: LD_ADDR_VAR 0 4
21537: PUSH
21538: LD_VAR 0 1
21542: ST_TO_ADDR
// end ;
21543: LD_VAR 0 4
21547: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
21548: LD_INT 0
21550: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
21551: LD_ADDR_VAR 0 5
21555: PUSH
21556: LD_VAR 0 1
21560: PPUSH
21561: CALL_OW 250
21565: PPUSH
21566: LD_VAR 0 1
21570: PPUSH
21571: CALL_OW 251
21575: PPUSH
21576: LD_VAR 0 2
21580: PPUSH
21581: LD_VAR 0 3
21585: PPUSH
21586: LD_VAR 0 4
21590: PPUSH
21591: CALL 21601 0 5
21595: ST_TO_ADDR
// end ;
21596: LD_VAR 0 5
21600: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
21601: LD_INT 0
21603: PPUSH
21604: PPUSH
21605: PPUSH
21606: PPUSH
// if not list then
21607: LD_VAR 0 3
21611: NOT
21612: IFFALSE 21616
// exit ;
21614: GO 22004
// result := [ ] ;
21616: LD_ADDR_VAR 0 6
21620: PUSH
21621: EMPTY
21622: ST_TO_ADDR
// for i in list do
21623: LD_ADDR_VAR 0 7
21627: PUSH
21628: LD_VAR 0 3
21632: PUSH
21633: FOR_IN
21634: IFFALSE 21836
// begin tmp := GetDistUnitXY ( i , x , y ) ;
21636: LD_ADDR_VAR 0 9
21640: PUSH
21641: LD_VAR 0 7
21645: PPUSH
21646: LD_VAR 0 1
21650: PPUSH
21651: LD_VAR 0 2
21655: PPUSH
21656: CALL_OW 297
21660: ST_TO_ADDR
// if not result then
21661: LD_VAR 0 6
21665: NOT
21666: IFFALSE 21692
// result := [ [ i , tmp ] ] else
21668: LD_ADDR_VAR 0 6
21672: PUSH
21673: LD_VAR 0 7
21677: PUSH
21678: LD_VAR 0 9
21682: PUSH
21683: EMPTY
21684: LIST
21685: LIST
21686: PUSH
21687: EMPTY
21688: LIST
21689: ST_TO_ADDR
21690: GO 21834
// begin if result [ result ] [ 2 ] < tmp then
21692: LD_VAR 0 6
21696: PUSH
21697: LD_VAR 0 6
21701: ARRAY
21702: PUSH
21703: LD_INT 2
21705: ARRAY
21706: PUSH
21707: LD_VAR 0 9
21711: LESS
21712: IFFALSE 21754
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
21714: LD_ADDR_VAR 0 6
21718: PUSH
21719: LD_VAR 0 6
21723: PPUSH
21724: LD_VAR 0 6
21728: PUSH
21729: LD_INT 1
21731: PLUS
21732: PPUSH
21733: LD_VAR 0 7
21737: PUSH
21738: LD_VAR 0 9
21742: PUSH
21743: EMPTY
21744: LIST
21745: LIST
21746: PPUSH
21747: CALL_OW 2
21751: ST_TO_ADDR
21752: GO 21834
// for j = 1 to result do
21754: LD_ADDR_VAR 0 8
21758: PUSH
21759: DOUBLE
21760: LD_INT 1
21762: DEC
21763: ST_TO_ADDR
21764: LD_VAR 0 6
21768: PUSH
21769: FOR_TO
21770: IFFALSE 21832
// begin if tmp < result [ j ] [ 2 ] then
21772: LD_VAR 0 9
21776: PUSH
21777: LD_VAR 0 6
21781: PUSH
21782: LD_VAR 0 8
21786: ARRAY
21787: PUSH
21788: LD_INT 2
21790: ARRAY
21791: LESS
21792: IFFALSE 21830
// begin result := Insert ( result , j , [ i , tmp ] ) ;
21794: LD_ADDR_VAR 0 6
21798: PUSH
21799: LD_VAR 0 6
21803: PPUSH
21804: LD_VAR 0 8
21808: PPUSH
21809: LD_VAR 0 7
21813: PUSH
21814: LD_VAR 0 9
21818: PUSH
21819: EMPTY
21820: LIST
21821: LIST
21822: PPUSH
21823: CALL_OW 2
21827: ST_TO_ADDR
// break ;
21828: GO 21832
// end ; end ;
21830: GO 21769
21832: POP
21833: POP
// end ; end ;
21834: GO 21633
21836: POP
21837: POP
// if result and not asc then
21838: LD_VAR 0 6
21842: PUSH
21843: LD_VAR 0 4
21847: NOT
21848: AND
21849: IFFALSE 21924
// begin tmp := result ;
21851: LD_ADDR_VAR 0 9
21855: PUSH
21856: LD_VAR 0 6
21860: ST_TO_ADDR
// for i = tmp downto 1 do
21861: LD_ADDR_VAR 0 7
21865: PUSH
21866: DOUBLE
21867: LD_VAR 0 9
21871: INC
21872: ST_TO_ADDR
21873: LD_INT 1
21875: PUSH
21876: FOR_DOWNTO
21877: IFFALSE 21922
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
21879: LD_ADDR_VAR 0 6
21883: PUSH
21884: LD_VAR 0 6
21888: PPUSH
21889: LD_VAR 0 9
21893: PUSH
21894: LD_VAR 0 7
21898: MINUS
21899: PUSH
21900: LD_INT 1
21902: PLUS
21903: PPUSH
21904: LD_VAR 0 9
21908: PUSH
21909: LD_VAR 0 7
21913: ARRAY
21914: PPUSH
21915: CALL_OW 1
21919: ST_TO_ADDR
21920: GO 21876
21922: POP
21923: POP
// end ; tmp := [ ] ;
21924: LD_ADDR_VAR 0 9
21928: PUSH
21929: EMPTY
21930: ST_TO_ADDR
// if mode then
21931: LD_VAR 0 5
21935: IFFALSE 22004
// begin for i = 1 to result do
21937: LD_ADDR_VAR 0 7
21941: PUSH
21942: DOUBLE
21943: LD_INT 1
21945: DEC
21946: ST_TO_ADDR
21947: LD_VAR 0 6
21951: PUSH
21952: FOR_TO
21953: IFFALSE 21992
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
21955: LD_ADDR_VAR 0 9
21959: PUSH
21960: LD_VAR 0 9
21964: PPUSH
21965: LD_VAR 0 7
21969: PPUSH
21970: LD_VAR 0 6
21974: PUSH
21975: LD_VAR 0 7
21979: ARRAY
21980: PUSH
21981: LD_INT 1
21983: ARRAY
21984: PPUSH
21985: CALL_OW 1
21989: ST_TO_ADDR
21990: GO 21952
21992: POP
21993: POP
// result := tmp ;
21994: LD_ADDR_VAR 0 6
21998: PUSH
21999: LD_VAR 0 9
22003: ST_TO_ADDR
// end ; end ;
22004: LD_VAR 0 6
22008: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
22009: LD_INT 0
22011: PPUSH
22012: PPUSH
22013: PPUSH
22014: PPUSH
22015: PPUSH
22016: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
22017: LD_ADDR_VAR 0 5
22021: PUSH
22022: LD_INT 0
22024: PUSH
22025: LD_INT 0
22027: PUSH
22028: LD_INT 0
22030: PUSH
22031: EMPTY
22032: PUSH
22033: EMPTY
22034: LIST
22035: LIST
22036: LIST
22037: LIST
22038: ST_TO_ADDR
// if not x or not y then
22039: LD_VAR 0 2
22043: NOT
22044: PUSH
22045: LD_VAR 0 3
22049: NOT
22050: OR
22051: IFFALSE 22055
// exit ;
22053: GO 23701
// if not range then
22055: LD_VAR 0 4
22059: NOT
22060: IFFALSE 22070
// range := 10 ;
22062: LD_ADDR_VAR 0 4
22066: PUSH
22067: LD_INT 10
22069: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22070: LD_ADDR_VAR 0 8
22074: PUSH
22075: LD_INT 81
22077: PUSH
22078: LD_VAR 0 1
22082: PUSH
22083: EMPTY
22084: LIST
22085: LIST
22086: PUSH
22087: LD_INT 92
22089: PUSH
22090: LD_VAR 0 2
22094: PUSH
22095: LD_VAR 0 3
22099: PUSH
22100: LD_VAR 0 4
22104: PUSH
22105: EMPTY
22106: LIST
22107: LIST
22108: LIST
22109: LIST
22110: PUSH
22111: LD_INT 3
22113: PUSH
22114: LD_INT 21
22116: PUSH
22117: LD_INT 3
22119: PUSH
22120: EMPTY
22121: LIST
22122: LIST
22123: PUSH
22124: EMPTY
22125: LIST
22126: LIST
22127: PUSH
22128: EMPTY
22129: LIST
22130: LIST
22131: LIST
22132: PPUSH
22133: CALL_OW 69
22137: ST_TO_ADDR
// if not tmp then
22138: LD_VAR 0 8
22142: NOT
22143: IFFALSE 22147
// exit ;
22145: GO 23701
// for i in tmp do
22147: LD_ADDR_VAR 0 6
22151: PUSH
22152: LD_VAR 0 8
22156: PUSH
22157: FOR_IN
22158: IFFALSE 23676
// begin points := [ 0 , 0 , 0 ] ;
22160: LD_ADDR_VAR 0 9
22164: PUSH
22165: LD_INT 0
22167: PUSH
22168: LD_INT 0
22170: PUSH
22171: LD_INT 0
22173: PUSH
22174: EMPTY
22175: LIST
22176: LIST
22177: LIST
22178: ST_TO_ADDR
// bpoints := 1 ;
22179: LD_ADDR_VAR 0 10
22183: PUSH
22184: LD_INT 1
22186: ST_TO_ADDR
// case GetType ( i ) of unit_human :
22187: LD_VAR 0 6
22191: PPUSH
22192: CALL_OW 247
22196: PUSH
22197: LD_INT 1
22199: DOUBLE
22200: EQUAL
22201: IFTRUE 22205
22203: GO 22783
22205: POP
// begin if GetClass ( i ) = 1 then
22206: LD_VAR 0 6
22210: PPUSH
22211: CALL_OW 257
22215: PUSH
22216: LD_INT 1
22218: EQUAL
22219: IFFALSE 22240
// points := [ 10 , 5 , 3 ] ;
22221: LD_ADDR_VAR 0 9
22225: PUSH
22226: LD_INT 10
22228: PUSH
22229: LD_INT 5
22231: PUSH
22232: LD_INT 3
22234: PUSH
22235: EMPTY
22236: LIST
22237: LIST
22238: LIST
22239: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
22240: LD_VAR 0 6
22244: PPUSH
22245: CALL_OW 257
22249: PUSH
22250: LD_INT 2
22252: PUSH
22253: LD_INT 3
22255: PUSH
22256: LD_INT 4
22258: PUSH
22259: EMPTY
22260: LIST
22261: LIST
22262: LIST
22263: IN
22264: IFFALSE 22285
// points := [ 3 , 2 , 1 ] ;
22266: LD_ADDR_VAR 0 9
22270: PUSH
22271: LD_INT 3
22273: PUSH
22274: LD_INT 2
22276: PUSH
22277: LD_INT 1
22279: PUSH
22280: EMPTY
22281: LIST
22282: LIST
22283: LIST
22284: ST_TO_ADDR
// if GetClass ( i ) = 5 then
22285: LD_VAR 0 6
22289: PPUSH
22290: CALL_OW 257
22294: PUSH
22295: LD_INT 5
22297: EQUAL
22298: IFFALSE 22319
// points := [ 130 , 5 , 2 ] ;
22300: LD_ADDR_VAR 0 9
22304: PUSH
22305: LD_INT 130
22307: PUSH
22308: LD_INT 5
22310: PUSH
22311: LD_INT 2
22313: PUSH
22314: EMPTY
22315: LIST
22316: LIST
22317: LIST
22318: ST_TO_ADDR
// if GetClass ( i ) = 8 then
22319: LD_VAR 0 6
22323: PPUSH
22324: CALL_OW 257
22328: PUSH
22329: LD_INT 8
22331: EQUAL
22332: IFFALSE 22353
// points := [ 35 , 35 , 30 ] ;
22334: LD_ADDR_VAR 0 9
22338: PUSH
22339: LD_INT 35
22341: PUSH
22342: LD_INT 35
22344: PUSH
22345: LD_INT 30
22347: PUSH
22348: EMPTY
22349: LIST
22350: LIST
22351: LIST
22352: ST_TO_ADDR
// if GetClass ( i ) = 9 then
22353: LD_VAR 0 6
22357: PPUSH
22358: CALL_OW 257
22362: PUSH
22363: LD_INT 9
22365: EQUAL
22366: IFFALSE 22387
// points := [ 20 , 55 , 40 ] ;
22368: LD_ADDR_VAR 0 9
22372: PUSH
22373: LD_INT 20
22375: PUSH
22376: LD_INT 55
22378: PUSH
22379: LD_INT 40
22381: PUSH
22382: EMPTY
22383: LIST
22384: LIST
22385: LIST
22386: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
22387: LD_VAR 0 6
22391: PPUSH
22392: CALL_OW 257
22396: PUSH
22397: LD_INT 12
22399: PUSH
22400: LD_INT 16
22402: PUSH
22403: EMPTY
22404: LIST
22405: LIST
22406: IN
22407: IFFALSE 22428
// points := [ 5 , 3 , 2 ] ;
22409: LD_ADDR_VAR 0 9
22413: PUSH
22414: LD_INT 5
22416: PUSH
22417: LD_INT 3
22419: PUSH
22420: LD_INT 2
22422: PUSH
22423: EMPTY
22424: LIST
22425: LIST
22426: LIST
22427: ST_TO_ADDR
// if GetClass ( i ) = 17 then
22428: LD_VAR 0 6
22432: PPUSH
22433: CALL_OW 257
22437: PUSH
22438: LD_INT 17
22440: EQUAL
22441: IFFALSE 22462
// points := [ 100 , 50 , 75 ] ;
22443: LD_ADDR_VAR 0 9
22447: PUSH
22448: LD_INT 100
22450: PUSH
22451: LD_INT 50
22453: PUSH
22454: LD_INT 75
22456: PUSH
22457: EMPTY
22458: LIST
22459: LIST
22460: LIST
22461: ST_TO_ADDR
// if GetClass ( i ) = 15 then
22462: LD_VAR 0 6
22466: PPUSH
22467: CALL_OW 257
22471: PUSH
22472: LD_INT 15
22474: EQUAL
22475: IFFALSE 22496
// points := [ 10 , 5 , 3 ] ;
22477: LD_ADDR_VAR 0 9
22481: PUSH
22482: LD_INT 10
22484: PUSH
22485: LD_INT 5
22487: PUSH
22488: LD_INT 3
22490: PUSH
22491: EMPTY
22492: LIST
22493: LIST
22494: LIST
22495: ST_TO_ADDR
// if GetClass ( i ) = 14 then
22496: LD_VAR 0 6
22500: PPUSH
22501: CALL_OW 257
22505: PUSH
22506: LD_INT 14
22508: EQUAL
22509: IFFALSE 22530
// points := [ 10 , 0 , 0 ] ;
22511: LD_ADDR_VAR 0 9
22515: PUSH
22516: LD_INT 10
22518: PUSH
22519: LD_INT 0
22521: PUSH
22522: LD_INT 0
22524: PUSH
22525: EMPTY
22526: LIST
22527: LIST
22528: LIST
22529: ST_TO_ADDR
// if GetClass ( i ) = 11 then
22530: LD_VAR 0 6
22534: PPUSH
22535: CALL_OW 257
22539: PUSH
22540: LD_INT 11
22542: EQUAL
22543: IFFALSE 22564
// points := [ 30 , 10 , 5 ] ;
22545: LD_ADDR_VAR 0 9
22549: PUSH
22550: LD_INT 30
22552: PUSH
22553: LD_INT 10
22555: PUSH
22556: LD_INT 5
22558: PUSH
22559: EMPTY
22560: LIST
22561: LIST
22562: LIST
22563: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
22564: LD_VAR 0 1
22568: PPUSH
22569: LD_INT 5
22571: PPUSH
22572: CALL_OW 321
22576: PUSH
22577: LD_INT 2
22579: EQUAL
22580: IFFALSE 22597
// bpoints := bpoints * 1.8 ;
22582: LD_ADDR_VAR 0 10
22586: PUSH
22587: LD_VAR 0 10
22591: PUSH
22592: LD_REAL  1.80000000000000E+0000
22595: MUL
22596: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
22597: LD_VAR 0 6
22601: PPUSH
22602: CALL_OW 257
22606: PUSH
22607: LD_INT 1
22609: PUSH
22610: LD_INT 2
22612: PUSH
22613: LD_INT 3
22615: PUSH
22616: LD_INT 4
22618: PUSH
22619: EMPTY
22620: LIST
22621: LIST
22622: LIST
22623: LIST
22624: IN
22625: PUSH
22626: LD_VAR 0 1
22630: PPUSH
22631: LD_INT 51
22633: PPUSH
22634: CALL_OW 321
22638: PUSH
22639: LD_INT 2
22641: EQUAL
22642: AND
22643: IFFALSE 22660
// bpoints := bpoints * 1.2 ;
22645: LD_ADDR_VAR 0 10
22649: PUSH
22650: LD_VAR 0 10
22654: PUSH
22655: LD_REAL  1.20000000000000E+0000
22658: MUL
22659: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
22660: LD_VAR 0 6
22664: PPUSH
22665: CALL_OW 257
22669: PUSH
22670: LD_INT 5
22672: PUSH
22673: LD_INT 7
22675: PUSH
22676: LD_INT 9
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: LIST
22683: IN
22684: PUSH
22685: LD_VAR 0 1
22689: PPUSH
22690: LD_INT 52
22692: PPUSH
22693: CALL_OW 321
22697: PUSH
22698: LD_INT 2
22700: EQUAL
22701: AND
22702: IFFALSE 22719
// bpoints := bpoints * 1.5 ;
22704: LD_ADDR_VAR 0 10
22708: PUSH
22709: LD_VAR 0 10
22713: PUSH
22714: LD_REAL  1.50000000000000E+0000
22717: MUL
22718: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
22719: LD_VAR 0 1
22723: PPUSH
22724: LD_INT 66
22726: PPUSH
22727: CALL_OW 321
22731: PUSH
22732: LD_INT 2
22734: EQUAL
22735: IFFALSE 22752
// bpoints := bpoints * 1.1 ;
22737: LD_ADDR_VAR 0 10
22741: PUSH
22742: LD_VAR 0 10
22746: PUSH
22747: LD_REAL  1.10000000000000E+0000
22750: MUL
22751: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
22752: LD_ADDR_VAR 0 10
22756: PUSH
22757: LD_VAR 0 10
22761: PUSH
22762: LD_VAR 0 6
22766: PPUSH
22767: LD_INT 1
22769: PPUSH
22770: CALL_OW 259
22774: PUSH
22775: LD_REAL  1.15000000000000E+0000
22778: MUL
22779: MUL
22780: ST_TO_ADDR
// end ; unit_vehicle :
22781: GO 23605
22783: LD_INT 2
22785: DOUBLE
22786: EQUAL
22787: IFTRUE 22791
22789: GO 23593
22791: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
22792: LD_VAR 0 6
22796: PPUSH
22797: CALL_OW 264
22801: PUSH
22802: LD_INT 2
22804: PUSH
22805: LD_INT 42
22807: PUSH
22808: LD_INT 24
22810: PUSH
22811: EMPTY
22812: LIST
22813: LIST
22814: LIST
22815: IN
22816: IFFALSE 22837
// points := [ 25 , 5 , 3 ] ;
22818: LD_ADDR_VAR 0 9
22822: PUSH
22823: LD_INT 25
22825: PUSH
22826: LD_INT 5
22828: PUSH
22829: LD_INT 3
22831: PUSH
22832: EMPTY
22833: LIST
22834: LIST
22835: LIST
22836: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
22837: LD_VAR 0 6
22841: PPUSH
22842: CALL_OW 264
22846: PUSH
22847: LD_INT 4
22849: PUSH
22850: LD_INT 43
22852: PUSH
22853: LD_INT 25
22855: PUSH
22856: EMPTY
22857: LIST
22858: LIST
22859: LIST
22860: IN
22861: IFFALSE 22882
// points := [ 40 , 15 , 5 ] ;
22863: LD_ADDR_VAR 0 9
22867: PUSH
22868: LD_INT 40
22870: PUSH
22871: LD_INT 15
22873: PUSH
22874: LD_INT 5
22876: PUSH
22877: EMPTY
22878: LIST
22879: LIST
22880: LIST
22881: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
22882: LD_VAR 0 6
22886: PPUSH
22887: CALL_OW 264
22891: PUSH
22892: LD_INT 3
22894: PUSH
22895: LD_INT 23
22897: PUSH
22898: EMPTY
22899: LIST
22900: LIST
22901: IN
22902: IFFALSE 22923
// points := [ 7 , 25 , 8 ] ;
22904: LD_ADDR_VAR 0 9
22908: PUSH
22909: LD_INT 7
22911: PUSH
22912: LD_INT 25
22914: PUSH
22915: LD_INT 8
22917: PUSH
22918: EMPTY
22919: LIST
22920: LIST
22921: LIST
22922: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
22923: LD_VAR 0 6
22927: PPUSH
22928: CALL_OW 264
22932: PUSH
22933: LD_INT 5
22935: PUSH
22936: LD_INT 27
22938: PUSH
22939: LD_INT 44
22941: PUSH
22942: EMPTY
22943: LIST
22944: LIST
22945: LIST
22946: IN
22947: IFFALSE 22968
// points := [ 14 , 50 , 16 ] ;
22949: LD_ADDR_VAR 0 9
22953: PUSH
22954: LD_INT 14
22956: PUSH
22957: LD_INT 50
22959: PUSH
22960: LD_INT 16
22962: PUSH
22963: EMPTY
22964: LIST
22965: LIST
22966: LIST
22967: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
22968: LD_VAR 0 6
22972: PPUSH
22973: CALL_OW 264
22977: PUSH
22978: LD_INT 6
22980: PUSH
22981: LD_INT 46
22983: PUSH
22984: EMPTY
22985: LIST
22986: LIST
22987: IN
22988: IFFALSE 23009
// points := [ 32 , 120 , 70 ] ;
22990: LD_ADDR_VAR 0 9
22994: PUSH
22995: LD_INT 32
22997: PUSH
22998: LD_INT 120
23000: PUSH
23001: LD_INT 70
23003: PUSH
23004: EMPTY
23005: LIST
23006: LIST
23007: LIST
23008: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
23009: LD_VAR 0 6
23013: PPUSH
23014: CALL_OW 264
23018: PUSH
23019: LD_INT 7
23021: PUSH
23022: LD_INT 28
23024: PUSH
23025: LD_INT 45
23027: PUSH
23028: EMPTY
23029: LIST
23030: LIST
23031: LIST
23032: IN
23033: IFFALSE 23054
// points := [ 35 , 20 , 45 ] ;
23035: LD_ADDR_VAR 0 9
23039: PUSH
23040: LD_INT 35
23042: PUSH
23043: LD_INT 20
23045: PUSH
23046: LD_INT 45
23048: PUSH
23049: EMPTY
23050: LIST
23051: LIST
23052: LIST
23053: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
23054: LD_VAR 0 6
23058: PPUSH
23059: CALL_OW 264
23063: PUSH
23064: LD_INT 47
23066: PUSH
23067: EMPTY
23068: LIST
23069: IN
23070: IFFALSE 23091
// points := [ 67 , 45 , 75 ] ;
23072: LD_ADDR_VAR 0 9
23076: PUSH
23077: LD_INT 67
23079: PUSH
23080: LD_INT 45
23082: PUSH
23083: LD_INT 75
23085: PUSH
23086: EMPTY
23087: LIST
23088: LIST
23089: LIST
23090: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
23091: LD_VAR 0 6
23095: PPUSH
23096: CALL_OW 264
23100: PUSH
23101: LD_INT 26
23103: PUSH
23104: EMPTY
23105: LIST
23106: IN
23107: IFFALSE 23128
// points := [ 120 , 30 , 80 ] ;
23109: LD_ADDR_VAR 0 9
23113: PUSH
23114: LD_INT 120
23116: PUSH
23117: LD_INT 30
23119: PUSH
23120: LD_INT 80
23122: PUSH
23123: EMPTY
23124: LIST
23125: LIST
23126: LIST
23127: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
23128: LD_VAR 0 6
23132: PPUSH
23133: CALL_OW 264
23137: PUSH
23138: LD_INT 22
23140: PUSH
23141: EMPTY
23142: LIST
23143: IN
23144: IFFALSE 23165
// points := [ 40 , 1 , 1 ] ;
23146: LD_ADDR_VAR 0 9
23150: PUSH
23151: LD_INT 40
23153: PUSH
23154: LD_INT 1
23156: PUSH
23157: LD_INT 1
23159: PUSH
23160: EMPTY
23161: LIST
23162: LIST
23163: LIST
23164: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
23165: LD_VAR 0 6
23169: PPUSH
23170: CALL_OW 264
23174: PUSH
23175: LD_INT 29
23177: PUSH
23178: EMPTY
23179: LIST
23180: IN
23181: IFFALSE 23202
// points := [ 70 , 200 , 400 ] ;
23183: LD_ADDR_VAR 0 9
23187: PUSH
23188: LD_INT 70
23190: PUSH
23191: LD_INT 200
23193: PUSH
23194: LD_INT 400
23196: PUSH
23197: EMPTY
23198: LIST
23199: LIST
23200: LIST
23201: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
23202: LD_VAR 0 6
23206: PPUSH
23207: CALL_OW 264
23211: PUSH
23212: LD_INT 14
23214: PUSH
23215: LD_INT 53
23217: PUSH
23218: EMPTY
23219: LIST
23220: LIST
23221: IN
23222: IFFALSE 23243
// points := [ 40 , 10 , 20 ] ;
23224: LD_ADDR_VAR 0 9
23228: PUSH
23229: LD_INT 40
23231: PUSH
23232: LD_INT 10
23234: PUSH
23235: LD_INT 20
23237: PUSH
23238: EMPTY
23239: LIST
23240: LIST
23241: LIST
23242: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
23243: LD_VAR 0 6
23247: PPUSH
23248: CALL_OW 264
23252: PUSH
23253: LD_INT 9
23255: PUSH
23256: EMPTY
23257: LIST
23258: IN
23259: IFFALSE 23280
// points := [ 5 , 70 , 20 ] ;
23261: LD_ADDR_VAR 0 9
23265: PUSH
23266: LD_INT 5
23268: PUSH
23269: LD_INT 70
23271: PUSH
23272: LD_INT 20
23274: PUSH
23275: EMPTY
23276: LIST
23277: LIST
23278: LIST
23279: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
23280: LD_VAR 0 6
23284: PPUSH
23285: CALL_OW 264
23289: PUSH
23290: LD_INT 10
23292: PUSH
23293: EMPTY
23294: LIST
23295: IN
23296: IFFALSE 23317
// points := [ 35 , 110 , 70 ] ;
23298: LD_ADDR_VAR 0 9
23302: PUSH
23303: LD_INT 35
23305: PUSH
23306: LD_INT 110
23308: PUSH
23309: LD_INT 70
23311: PUSH
23312: EMPTY
23313: LIST
23314: LIST
23315: LIST
23316: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
23317: LD_VAR 0 6
23321: PPUSH
23322: CALL_OW 265
23326: PUSH
23327: LD_INT 25
23329: EQUAL
23330: IFFALSE 23351
// points := [ 80 , 65 , 100 ] ;
23332: LD_ADDR_VAR 0 9
23336: PUSH
23337: LD_INT 80
23339: PUSH
23340: LD_INT 65
23342: PUSH
23343: LD_INT 100
23345: PUSH
23346: EMPTY
23347: LIST
23348: LIST
23349: LIST
23350: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
23351: LD_VAR 0 6
23355: PPUSH
23356: CALL_OW 263
23360: PUSH
23361: LD_INT 1
23363: EQUAL
23364: IFFALSE 23399
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
23366: LD_ADDR_VAR 0 10
23370: PUSH
23371: LD_VAR 0 10
23375: PUSH
23376: LD_VAR 0 6
23380: PPUSH
23381: CALL_OW 311
23385: PPUSH
23386: LD_INT 3
23388: PPUSH
23389: CALL_OW 259
23393: PUSH
23394: LD_INT 4
23396: MUL
23397: MUL
23398: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
23399: LD_VAR 0 6
23403: PPUSH
23404: CALL_OW 263
23408: PUSH
23409: LD_INT 2
23411: EQUAL
23412: IFFALSE 23463
// begin j := IsControledBy ( i ) ;
23414: LD_ADDR_VAR 0 7
23418: PUSH
23419: LD_VAR 0 6
23423: PPUSH
23424: CALL_OW 312
23428: ST_TO_ADDR
// if j then
23429: LD_VAR 0 7
23433: IFFALSE 23463
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
23435: LD_ADDR_VAR 0 10
23439: PUSH
23440: LD_VAR 0 10
23444: PUSH
23445: LD_VAR 0 7
23449: PPUSH
23450: LD_INT 3
23452: PPUSH
23453: CALL_OW 259
23457: PUSH
23458: LD_INT 3
23460: MUL
23461: MUL
23462: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
23463: LD_VAR 0 6
23467: PPUSH
23468: CALL_OW 264
23472: PUSH
23473: LD_INT 5
23475: PUSH
23476: LD_INT 6
23478: PUSH
23479: LD_INT 46
23481: PUSH
23482: LD_INT 44
23484: PUSH
23485: LD_INT 47
23487: PUSH
23488: LD_INT 45
23490: PUSH
23491: LD_INT 28
23493: PUSH
23494: LD_INT 7
23496: PUSH
23497: LD_INT 27
23499: PUSH
23500: LD_INT 29
23502: PUSH
23503: EMPTY
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: LIST
23512: LIST
23513: LIST
23514: IN
23515: PUSH
23516: LD_VAR 0 1
23520: PPUSH
23521: LD_INT 52
23523: PPUSH
23524: CALL_OW 321
23528: PUSH
23529: LD_INT 2
23531: EQUAL
23532: AND
23533: IFFALSE 23550
// bpoints := bpoints * 1.2 ;
23535: LD_ADDR_VAR 0 10
23539: PUSH
23540: LD_VAR 0 10
23544: PUSH
23545: LD_REAL  1.20000000000000E+0000
23548: MUL
23549: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
23550: LD_VAR 0 6
23554: PPUSH
23555: CALL_OW 264
23559: PUSH
23560: LD_INT 6
23562: PUSH
23563: LD_INT 46
23565: PUSH
23566: LD_INT 47
23568: PUSH
23569: EMPTY
23570: LIST
23571: LIST
23572: LIST
23573: IN
23574: IFFALSE 23591
// bpoints := bpoints * 1.2 ;
23576: LD_ADDR_VAR 0 10
23580: PUSH
23581: LD_VAR 0 10
23585: PUSH
23586: LD_REAL  1.20000000000000E+0000
23589: MUL
23590: ST_TO_ADDR
// end ; unit_building :
23591: GO 23605
23593: LD_INT 3
23595: DOUBLE
23596: EQUAL
23597: IFTRUE 23601
23599: GO 23604
23601: POP
// ; end ;
23602: GO 23605
23604: POP
// for j = 1 to 3 do
23605: LD_ADDR_VAR 0 7
23609: PUSH
23610: DOUBLE
23611: LD_INT 1
23613: DEC
23614: ST_TO_ADDR
23615: LD_INT 3
23617: PUSH
23618: FOR_TO
23619: IFFALSE 23672
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
23621: LD_ADDR_VAR 0 5
23625: PUSH
23626: LD_VAR 0 5
23630: PPUSH
23631: LD_VAR 0 7
23635: PPUSH
23636: LD_VAR 0 5
23640: PUSH
23641: LD_VAR 0 7
23645: ARRAY
23646: PUSH
23647: LD_VAR 0 9
23651: PUSH
23652: LD_VAR 0 7
23656: ARRAY
23657: PUSH
23658: LD_VAR 0 10
23662: MUL
23663: PLUS
23664: PPUSH
23665: CALL_OW 1
23669: ST_TO_ADDR
23670: GO 23618
23672: POP
23673: POP
// end ;
23674: GO 22157
23676: POP
23677: POP
// result := Replace ( result , 4 , tmp ) ;
23678: LD_ADDR_VAR 0 5
23682: PUSH
23683: LD_VAR 0 5
23687: PPUSH
23688: LD_INT 4
23690: PPUSH
23691: LD_VAR 0 8
23695: PPUSH
23696: CALL_OW 1
23700: ST_TO_ADDR
// end ;
23701: LD_VAR 0 5
23705: RET
// export function DangerAtRange ( unit , range ) ; begin
23706: LD_INT 0
23708: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
23709: LD_ADDR_VAR 0 3
23713: PUSH
23714: LD_VAR 0 1
23718: PPUSH
23719: CALL_OW 255
23723: PPUSH
23724: LD_VAR 0 1
23728: PPUSH
23729: CALL_OW 250
23733: PPUSH
23734: LD_VAR 0 1
23738: PPUSH
23739: CALL_OW 251
23743: PPUSH
23744: LD_VAR 0 2
23748: PPUSH
23749: CALL 22009 0 4
23753: ST_TO_ADDR
// end ;
23754: LD_VAR 0 3
23758: RET
// export function DangerInArea ( side , area ) ; begin
23759: LD_INT 0
23761: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
23762: LD_ADDR_VAR 0 3
23766: PUSH
23767: LD_VAR 0 2
23771: PPUSH
23772: LD_INT 81
23774: PUSH
23775: LD_VAR 0 1
23779: PUSH
23780: EMPTY
23781: LIST
23782: LIST
23783: PPUSH
23784: CALL_OW 70
23788: ST_TO_ADDR
// end ;
23789: LD_VAR 0 3
23793: RET
// export function IsExtension ( b ) ; begin
23794: LD_INT 0
23796: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
23797: LD_ADDR_VAR 0 2
23801: PUSH
23802: LD_VAR 0 1
23806: PUSH
23807: LD_INT 23
23809: PUSH
23810: LD_INT 20
23812: PUSH
23813: LD_INT 22
23815: PUSH
23816: LD_INT 17
23818: PUSH
23819: LD_INT 24
23821: PUSH
23822: LD_INT 21
23824: PUSH
23825: LD_INT 19
23827: PUSH
23828: LD_INT 16
23830: PUSH
23831: LD_INT 25
23833: PUSH
23834: LD_INT 18
23836: PUSH
23837: EMPTY
23838: LIST
23839: LIST
23840: LIST
23841: LIST
23842: LIST
23843: LIST
23844: LIST
23845: LIST
23846: LIST
23847: LIST
23848: IN
23849: ST_TO_ADDR
// end ;
23850: LD_VAR 0 2
23854: RET
// export function GetBaseBuildings ( base , area ) ; var tmp , i ; begin
23855: LD_INT 0
23857: PPUSH
23858: PPUSH
23859: PPUSH
// result := [ ] ;
23860: LD_ADDR_VAR 0 3
23864: PUSH
23865: EMPTY
23866: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
23867: LD_ADDR_VAR 0 4
23871: PUSH
23872: LD_VAR 0 2
23876: PPUSH
23877: LD_INT 21
23879: PUSH
23880: LD_INT 3
23882: PUSH
23883: EMPTY
23884: LIST
23885: LIST
23886: PPUSH
23887: CALL_OW 70
23891: ST_TO_ADDR
// if not tmp then
23892: LD_VAR 0 4
23896: NOT
23897: IFFALSE 23901
// exit ;
23899: GO 23959
// for i in tmp do
23901: LD_ADDR_VAR 0 5
23905: PUSH
23906: LD_VAR 0 4
23910: PUSH
23911: FOR_IN
23912: IFFALSE 23947
// if GetBase ( i ) <> base then
23914: LD_VAR 0 5
23918: PPUSH
23919: CALL_OW 274
23923: PUSH
23924: LD_VAR 0 1
23928: NONEQUAL
23929: IFFALSE 23945
// ComLinkToBase ( base , i ) ;
23931: LD_VAR 0 1
23935: PPUSH
23936: LD_VAR 0 5
23940: PPUSH
23941: CALL_OW 169
23945: GO 23911
23947: POP
23948: POP
// result := tmp ;
23949: LD_ADDR_VAR 0 3
23953: PUSH
23954: LD_VAR 0 4
23958: ST_TO_ADDR
// end ;
23959: LD_VAR 0 3
23963: RET
// export function ComComplete ( unit , b ) ; var i ; begin
23964: LD_INT 0
23966: PPUSH
23967: PPUSH
// if BuildingStatus ( b ) = bs_build then
23968: LD_VAR 0 2
23972: PPUSH
23973: CALL_OW 461
23977: PUSH
23978: LD_INT 1
23980: EQUAL
23981: IFFALSE 24041
// SetTaskList ( unit , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
23983: LD_VAR 0 1
23987: PPUSH
23988: LD_STRING h
23990: PUSH
23991: LD_VAR 0 2
23995: PPUSH
23996: CALL_OW 250
24000: PUSH
24001: LD_VAR 0 2
24005: PPUSH
24006: CALL_OW 251
24010: PUSH
24011: LD_VAR 0 2
24015: PUSH
24016: LD_INT 0
24018: PUSH
24019: LD_INT 0
24021: PUSH
24022: LD_INT 0
24024: PUSH
24025: EMPTY
24026: LIST
24027: LIST
24028: LIST
24029: LIST
24030: LIST
24031: LIST
24032: LIST
24033: PUSH
24034: EMPTY
24035: LIST
24036: PPUSH
24037: CALL_OW 446
// end ;
24041: LD_VAR 0 3
24045: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
24046: LD_INT 0
24048: PPUSH
24049: PPUSH
24050: PPUSH
24051: PPUSH
24052: PPUSH
24053: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
24054: LD_VAR 0 1
24058: NOT
24059: PUSH
24060: LD_VAR 0 1
24064: PPUSH
24065: CALL_OW 263
24069: PUSH
24070: LD_INT 2
24072: EQUAL
24073: NOT
24074: OR
24075: IFFALSE 24079
// exit ;
24077: GO 24395
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
24079: LD_ADDR_VAR 0 6
24083: PUSH
24084: LD_INT 22
24086: PUSH
24087: LD_VAR 0 1
24091: PPUSH
24092: CALL_OW 255
24096: PUSH
24097: EMPTY
24098: LIST
24099: LIST
24100: PUSH
24101: LD_INT 2
24103: PUSH
24104: LD_INT 30
24106: PUSH
24107: LD_INT 36
24109: PUSH
24110: EMPTY
24111: LIST
24112: LIST
24113: PUSH
24114: LD_INT 34
24116: PUSH
24117: LD_INT 31
24119: PUSH
24120: EMPTY
24121: LIST
24122: LIST
24123: PUSH
24124: EMPTY
24125: LIST
24126: LIST
24127: LIST
24128: PUSH
24129: EMPTY
24130: LIST
24131: LIST
24132: PPUSH
24133: CALL_OW 69
24137: ST_TO_ADDR
// if not tmp then
24138: LD_VAR 0 6
24142: NOT
24143: IFFALSE 24147
// exit ;
24145: GO 24395
// result := [ ] ;
24147: LD_ADDR_VAR 0 2
24151: PUSH
24152: EMPTY
24153: ST_TO_ADDR
// for i in tmp do
24154: LD_ADDR_VAR 0 3
24158: PUSH
24159: LD_VAR 0 6
24163: PUSH
24164: FOR_IN
24165: IFFALSE 24236
// begin t := UnitsInside ( i ) ;
24167: LD_ADDR_VAR 0 4
24171: PUSH
24172: LD_VAR 0 3
24176: PPUSH
24177: CALL_OW 313
24181: ST_TO_ADDR
// if t then
24182: LD_VAR 0 4
24186: IFFALSE 24234
// for j in t do
24188: LD_ADDR_VAR 0 7
24192: PUSH
24193: LD_VAR 0 4
24197: PUSH
24198: FOR_IN
24199: IFFALSE 24232
// result := Insert ( result , result + 1 , j ) ;
24201: LD_ADDR_VAR 0 2
24205: PUSH
24206: LD_VAR 0 2
24210: PPUSH
24211: LD_VAR 0 2
24215: PUSH
24216: LD_INT 1
24218: PLUS
24219: PPUSH
24220: LD_VAR 0 7
24224: PPUSH
24225: CALL_OW 2
24229: ST_TO_ADDR
24230: GO 24198
24232: POP
24233: POP
// end ;
24234: GO 24164
24236: POP
24237: POP
// if not result then
24238: LD_VAR 0 2
24242: NOT
24243: IFFALSE 24247
// exit ;
24245: GO 24395
// mech := result [ 1 ] ;
24247: LD_ADDR_VAR 0 5
24251: PUSH
24252: LD_VAR 0 2
24256: PUSH
24257: LD_INT 1
24259: ARRAY
24260: ST_TO_ADDR
// if result > 1 then
24261: LD_VAR 0 2
24265: PUSH
24266: LD_INT 1
24268: GREATER
24269: IFFALSE 24381
// for i = 2 to result do
24271: LD_ADDR_VAR 0 3
24275: PUSH
24276: DOUBLE
24277: LD_INT 2
24279: DEC
24280: ST_TO_ADDR
24281: LD_VAR 0 2
24285: PUSH
24286: FOR_TO
24287: IFFALSE 24379
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
24289: LD_ADDR_VAR 0 4
24293: PUSH
24294: LD_VAR 0 2
24298: PUSH
24299: LD_VAR 0 3
24303: ARRAY
24304: PPUSH
24305: LD_INT 3
24307: PPUSH
24308: CALL_OW 259
24312: PUSH
24313: LD_VAR 0 2
24317: PUSH
24318: LD_VAR 0 3
24322: ARRAY
24323: PPUSH
24324: CALL_OW 432
24328: MINUS
24329: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
24330: LD_VAR 0 4
24334: PUSH
24335: LD_VAR 0 5
24339: PPUSH
24340: LD_INT 3
24342: PPUSH
24343: CALL_OW 259
24347: PUSH
24348: LD_VAR 0 5
24352: PPUSH
24353: CALL_OW 432
24357: MINUS
24358: GREATEREQUAL
24359: IFFALSE 24377
// mech := result [ i ] ;
24361: LD_ADDR_VAR 0 5
24365: PUSH
24366: LD_VAR 0 2
24370: PUSH
24371: LD_VAR 0 3
24375: ARRAY
24376: ST_TO_ADDR
// end ;
24377: GO 24286
24379: POP
24380: POP
// ComLinkTo ( vehicle , mech ) ;
24381: LD_VAR 0 1
24385: PPUSH
24386: LD_VAR 0 5
24390: PPUSH
24391: CALL_OW 135
// end ;
24395: LD_VAR 0 2
24399: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
24400: LD_INT 0
24402: PPUSH
24403: PPUSH
24404: PPUSH
24405: PPUSH
24406: PPUSH
24407: PPUSH
24408: PPUSH
24409: PPUSH
24410: PPUSH
24411: PPUSH
24412: PPUSH
24413: PPUSH
24414: PPUSH
// result := [ ] ;
24415: LD_ADDR_VAR 0 7
24419: PUSH
24420: EMPTY
24421: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
24422: LD_VAR 0 1
24426: PPUSH
24427: CALL_OW 266
24431: PUSH
24432: LD_INT 0
24434: PUSH
24435: LD_INT 1
24437: PUSH
24438: EMPTY
24439: LIST
24440: LIST
24441: IN
24442: NOT
24443: IFFALSE 24447
// exit ;
24445: GO 26078
// if name then
24447: LD_VAR 0 3
24451: IFFALSE 24467
// SetBName ( base_dep , name ) ;
24453: LD_VAR 0 1
24457: PPUSH
24458: LD_VAR 0 3
24462: PPUSH
24463: CALL_OW 500
// base := GetBase ( base_dep ) ;
24467: LD_ADDR_VAR 0 15
24471: PUSH
24472: LD_VAR 0 1
24476: PPUSH
24477: CALL_OW 274
24481: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
24482: LD_ADDR_VAR 0 16
24486: PUSH
24487: LD_VAR 0 1
24491: PPUSH
24492: CALL_OW 255
24496: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
24497: LD_ADDR_VAR 0 17
24501: PUSH
24502: LD_VAR 0 1
24506: PPUSH
24507: CALL_OW 248
24511: ST_TO_ADDR
// if sources then
24512: LD_VAR 0 5
24516: IFFALSE 24563
// for i = 1 to 3 do
24518: LD_ADDR_VAR 0 8
24522: PUSH
24523: DOUBLE
24524: LD_INT 1
24526: DEC
24527: ST_TO_ADDR
24528: LD_INT 3
24530: PUSH
24531: FOR_TO
24532: IFFALSE 24561
// AddResourceType ( base , i , sources [ i ] ) ;
24534: LD_VAR 0 15
24538: PPUSH
24539: LD_VAR 0 8
24543: PPUSH
24544: LD_VAR 0 5
24548: PUSH
24549: LD_VAR 0 8
24553: ARRAY
24554: PPUSH
24555: CALL_OW 276
24559: GO 24531
24561: POP
24562: POP
// buildings := GetBaseBuildings ( base , area ) ;
24563: LD_ADDR_VAR 0 18
24567: PUSH
24568: LD_VAR 0 15
24572: PPUSH
24573: LD_VAR 0 2
24577: PPUSH
24578: CALL 23855 0 2
24582: ST_TO_ADDR
// InitHc ;
24583: CALL_OW 19
// InitUc ;
24587: CALL_OW 18
// uc_side := side ;
24591: LD_ADDR_OWVAR 20
24595: PUSH
24596: LD_VAR 0 16
24600: ST_TO_ADDR
// uc_nation := nation ;
24601: LD_ADDR_OWVAR 21
24605: PUSH
24606: LD_VAR 0 17
24610: ST_TO_ADDR
// if buildings then
24611: LD_VAR 0 18
24615: IFFALSE 25937
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
24617: LD_ADDR_VAR 0 19
24621: PUSH
24622: LD_VAR 0 18
24626: PPUSH
24627: LD_INT 2
24629: PUSH
24630: LD_INT 30
24632: PUSH
24633: LD_INT 29
24635: PUSH
24636: EMPTY
24637: LIST
24638: LIST
24639: PUSH
24640: LD_INT 30
24642: PUSH
24643: LD_INT 30
24645: PUSH
24646: EMPTY
24647: LIST
24648: LIST
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: LIST
24654: PPUSH
24655: CALL_OW 72
24659: ST_TO_ADDR
// if tmp then
24660: LD_VAR 0 19
24664: IFFALSE 24712
// for i in tmp do
24666: LD_ADDR_VAR 0 8
24670: PUSH
24671: LD_VAR 0 19
24675: PUSH
24676: FOR_IN
24677: IFFALSE 24710
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
24679: LD_VAR 0 8
24683: PPUSH
24684: CALL_OW 250
24688: PPUSH
24689: LD_VAR 0 8
24693: PPUSH
24694: CALL_OW 251
24698: PPUSH
24699: LD_VAR 0 16
24703: PPUSH
24704: CALL_OW 441
24708: GO 24676
24710: POP
24711: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
24712: LD_VAR 0 18
24716: PPUSH
24717: LD_INT 2
24719: PUSH
24720: LD_INT 30
24722: PUSH
24723: LD_INT 32
24725: PUSH
24726: EMPTY
24727: LIST
24728: LIST
24729: PUSH
24730: LD_INT 30
24732: PUSH
24733: LD_INT 33
24735: PUSH
24736: EMPTY
24737: LIST
24738: LIST
24739: PUSH
24740: EMPTY
24741: LIST
24742: LIST
24743: LIST
24744: PPUSH
24745: CALL_OW 72
24749: IFFALSE 24837
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
24751: LD_ADDR_VAR 0 8
24755: PUSH
24756: LD_VAR 0 18
24760: PPUSH
24761: LD_INT 2
24763: PUSH
24764: LD_INT 30
24766: PUSH
24767: LD_INT 32
24769: PUSH
24770: EMPTY
24771: LIST
24772: LIST
24773: PUSH
24774: LD_INT 30
24776: PUSH
24777: LD_INT 33
24779: PUSH
24780: EMPTY
24781: LIST
24782: LIST
24783: PUSH
24784: EMPTY
24785: LIST
24786: LIST
24787: LIST
24788: PPUSH
24789: CALL_OW 72
24793: PUSH
24794: FOR_IN
24795: IFFALSE 24835
// begin if not GetBWeapon ( i ) then
24797: LD_VAR 0 8
24801: PPUSH
24802: CALL_OW 269
24806: NOT
24807: IFFALSE 24833
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
24809: LD_VAR 0 8
24813: PPUSH
24814: LD_VAR 0 8
24818: PPUSH
24819: LD_VAR 0 2
24823: PPUSH
24824: CALL 26083 0 2
24828: PPUSH
24829: CALL_OW 431
// end ;
24833: GO 24794
24835: POP
24836: POP
// end ; for i = 1 to personel do
24837: LD_ADDR_VAR 0 8
24841: PUSH
24842: DOUBLE
24843: LD_INT 1
24845: DEC
24846: ST_TO_ADDR
24847: LD_VAR 0 6
24851: PUSH
24852: FOR_TO
24853: IFFALSE 25917
// begin if i > 4 then
24855: LD_VAR 0 8
24859: PUSH
24860: LD_INT 4
24862: GREATER
24863: IFFALSE 24867
// break ;
24865: GO 25917
// case i of 1 :
24867: LD_VAR 0 8
24871: PUSH
24872: LD_INT 1
24874: DOUBLE
24875: EQUAL
24876: IFTRUE 24880
24878: GO 24960
24880: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
24881: LD_ADDR_VAR 0 12
24885: PUSH
24886: LD_VAR 0 18
24890: PPUSH
24891: LD_INT 22
24893: PUSH
24894: LD_VAR 0 16
24898: PUSH
24899: EMPTY
24900: LIST
24901: LIST
24902: PUSH
24903: LD_INT 58
24905: PUSH
24906: EMPTY
24907: LIST
24908: PUSH
24909: LD_INT 2
24911: PUSH
24912: LD_INT 30
24914: PUSH
24915: LD_INT 32
24917: PUSH
24918: EMPTY
24919: LIST
24920: LIST
24921: PUSH
24922: LD_INT 30
24924: PUSH
24925: LD_INT 4
24927: PUSH
24928: EMPTY
24929: LIST
24930: LIST
24931: PUSH
24932: LD_INT 30
24934: PUSH
24935: LD_INT 5
24937: PUSH
24938: EMPTY
24939: LIST
24940: LIST
24941: PUSH
24942: EMPTY
24943: LIST
24944: LIST
24945: LIST
24946: LIST
24947: PUSH
24948: EMPTY
24949: LIST
24950: LIST
24951: LIST
24952: PPUSH
24953: CALL_OW 72
24957: ST_TO_ADDR
24958: GO 25182
24960: LD_INT 2
24962: DOUBLE
24963: EQUAL
24964: IFTRUE 24968
24966: GO 25030
24968: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
24969: LD_ADDR_VAR 0 12
24973: PUSH
24974: LD_VAR 0 18
24978: PPUSH
24979: LD_INT 22
24981: PUSH
24982: LD_VAR 0 16
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PUSH
24991: LD_INT 2
24993: PUSH
24994: LD_INT 30
24996: PUSH
24997: LD_INT 0
24999: PUSH
25000: EMPTY
25001: LIST
25002: LIST
25003: PUSH
25004: LD_INT 30
25006: PUSH
25007: LD_INT 1
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: PUSH
25014: EMPTY
25015: LIST
25016: LIST
25017: LIST
25018: PUSH
25019: EMPTY
25020: LIST
25021: LIST
25022: PPUSH
25023: CALL_OW 72
25027: ST_TO_ADDR
25028: GO 25182
25030: LD_INT 3
25032: DOUBLE
25033: EQUAL
25034: IFTRUE 25038
25036: GO 25100
25038: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
25039: LD_ADDR_VAR 0 12
25043: PUSH
25044: LD_VAR 0 18
25048: PPUSH
25049: LD_INT 22
25051: PUSH
25052: LD_VAR 0 16
25056: PUSH
25057: EMPTY
25058: LIST
25059: LIST
25060: PUSH
25061: LD_INT 2
25063: PUSH
25064: LD_INT 30
25066: PUSH
25067: LD_INT 2
25069: PUSH
25070: EMPTY
25071: LIST
25072: LIST
25073: PUSH
25074: LD_INT 30
25076: PUSH
25077: LD_INT 3
25079: PUSH
25080: EMPTY
25081: LIST
25082: LIST
25083: PUSH
25084: EMPTY
25085: LIST
25086: LIST
25087: LIST
25088: PUSH
25089: EMPTY
25090: LIST
25091: LIST
25092: PPUSH
25093: CALL_OW 72
25097: ST_TO_ADDR
25098: GO 25182
25100: LD_INT 4
25102: DOUBLE
25103: EQUAL
25104: IFTRUE 25108
25106: GO 25181
25108: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
25109: LD_ADDR_VAR 0 12
25113: PUSH
25114: LD_VAR 0 18
25118: PPUSH
25119: LD_INT 22
25121: PUSH
25122: LD_VAR 0 16
25126: PUSH
25127: EMPTY
25128: LIST
25129: LIST
25130: PUSH
25131: LD_INT 2
25133: PUSH
25134: LD_INT 30
25136: PUSH
25137: LD_INT 6
25139: PUSH
25140: EMPTY
25141: LIST
25142: LIST
25143: PUSH
25144: LD_INT 30
25146: PUSH
25147: LD_INT 7
25149: PUSH
25150: EMPTY
25151: LIST
25152: LIST
25153: PUSH
25154: LD_INT 30
25156: PUSH
25157: LD_INT 8
25159: PUSH
25160: EMPTY
25161: LIST
25162: LIST
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: LIST
25168: LIST
25169: PUSH
25170: EMPTY
25171: LIST
25172: LIST
25173: PPUSH
25174: CALL_OW 72
25178: ST_TO_ADDR
25179: GO 25182
25181: POP
// if i = 1 then
25182: LD_VAR 0 8
25186: PUSH
25187: LD_INT 1
25189: EQUAL
25190: IFFALSE 25301
// begin tmp := [ ] ;
25192: LD_ADDR_VAR 0 19
25196: PUSH
25197: EMPTY
25198: ST_TO_ADDR
// for j in f do
25199: LD_ADDR_VAR 0 9
25203: PUSH
25204: LD_VAR 0 12
25208: PUSH
25209: FOR_IN
25210: IFFALSE 25283
// if GetBType ( j ) = b_bunker then
25212: LD_VAR 0 9
25216: PPUSH
25217: CALL_OW 266
25221: PUSH
25222: LD_INT 32
25224: EQUAL
25225: IFFALSE 25252
// tmp := Insert ( tmp , 1 , j ) else
25227: LD_ADDR_VAR 0 19
25231: PUSH
25232: LD_VAR 0 19
25236: PPUSH
25237: LD_INT 1
25239: PPUSH
25240: LD_VAR 0 9
25244: PPUSH
25245: CALL_OW 2
25249: ST_TO_ADDR
25250: GO 25281
// tmp := Insert ( tmp , tmp + 1 , j ) ;
25252: LD_ADDR_VAR 0 19
25256: PUSH
25257: LD_VAR 0 19
25261: PPUSH
25262: LD_VAR 0 19
25266: PUSH
25267: LD_INT 1
25269: PLUS
25270: PPUSH
25271: LD_VAR 0 9
25275: PPUSH
25276: CALL_OW 2
25280: ST_TO_ADDR
25281: GO 25209
25283: POP
25284: POP
// if tmp then
25285: LD_VAR 0 19
25289: IFFALSE 25301
// f := tmp ;
25291: LD_ADDR_VAR 0 12
25295: PUSH
25296: LD_VAR 0 19
25300: ST_TO_ADDR
// end ; x := personel [ i ] ;
25301: LD_ADDR_VAR 0 13
25305: PUSH
25306: LD_VAR 0 6
25310: PUSH
25311: LD_VAR 0 8
25315: ARRAY
25316: ST_TO_ADDR
// if x = - 1 then
25317: LD_VAR 0 13
25321: PUSH
25322: LD_INT 1
25324: NEG
25325: EQUAL
25326: IFFALSE 25535
// begin for j in f do
25328: LD_ADDR_VAR 0 9
25332: PUSH
25333: LD_VAR 0 12
25337: PUSH
25338: FOR_IN
25339: IFFALSE 25531
// repeat InitHc ;
25341: CALL_OW 19
// if GetBType ( j ) = b_barracks then
25345: LD_VAR 0 9
25349: PPUSH
25350: CALL_OW 266
25354: PUSH
25355: LD_INT 5
25357: EQUAL
25358: IFFALSE 25428
// begin if UnitsInside ( j ) < 3 then
25360: LD_VAR 0 9
25364: PPUSH
25365: CALL_OW 313
25369: PUSH
25370: LD_INT 3
25372: LESS
25373: IFFALSE 25409
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25375: LD_INT 0
25377: PPUSH
25378: LD_INT 5
25380: PUSH
25381: LD_INT 8
25383: PUSH
25384: LD_INT 9
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: LIST
25391: PUSH
25392: LD_VAR 0 17
25396: ARRAY
25397: PPUSH
25398: LD_VAR 0 4
25402: PPUSH
25403: CALL_OW 380
25407: GO 25426
// PrepareHuman ( false , i , skill ) ;
25409: LD_INT 0
25411: PPUSH
25412: LD_VAR 0 8
25416: PPUSH
25417: LD_VAR 0 4
25421: PPUSH
25422: CALL_OW 380
// end else
25426: GO 25445
// PrepareHuman ( false , i , skill ) ;
25428: LD_INT 0
25430: PPUSH
25431: LD_VAR 0 8
25435: PPUSH
25436: LD_VAR 0 4
25440: PPUSH
25441: CALL_OW 380
// un := CreateHuman ;
25445: LD_ADDR_VAR 0 14
25449: PUSH
25450: CALL_OW 44
25454: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25455: LD_ADDR_VAR 0 7
25459: PUSH
25460: LD_VAR 0 7
25464: PPUSH
25465: LD_INT 1
25467: PPUSH
25468: LD_VAR 0 14
25472: PPUSH
25473: CALL_OW 2
25477: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
25478: LD_VAR 0 14
25482: PPUSH
25483: LD_VAR 0 9
25487: PPUSH
25488: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
25492: LD_VAR 0 9
25496: PPUSH
25497: CALL_OW 313
25501: PUSH
25502: LD_INT 6
25504: EQUAL
25505: PUSH
25506: LD_VAR 0 9
25510: PPUSH
25511: CALL_OW 266
25515: PUSH
25516: LD_INT 32
25518: PUSH
25519: LD_INT 31
25521: PUSH
25522: EMPTY
25523: LIST
25524: LIST
25525: IN
25526: OR
25527: IFFALSE 25341
25529: GO 25338
25531: POP
25532: POP
// end else
25533: GO 25915
// for j = 1 to x do
25535: LD_ADDR_VAR 0 9
25539: PUSH
25540: DOUBLE
25541: LD_INT 1
25543: DEC
25544: ST_TO_ADDR
25545: LD_VAR 0 13
25549: PUSH
25550: FOR_TO
25551: IFFALSE 25913
// begin InitHc ;
25553: CALL_OW 19
// if not f then
25557: LD_VAR 0 12
25561: NOT
25562: IFFALSE 25651
// begin PrepareHuman ( false , i , skill ) ;
25564: LD_INT 0
25566: PPUSH
25567: LD_VAR 0 8
25571: PPUSH
25572: LD_VAR 0 4
25576: PPUSH
25577: CALL_OW 380
// un := CreateHuman ;
25581: LD_ADDR_VAR 0 14
25585: PUSH
25586: CALL_OW 44
25590: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25591: LD_ADDR_VAR 0 7
25595: PUSH
25596: LD_VAR 0 7
25600: PPUSH
25601: LD_INT 1
25603: PPUSH
25604: LD_VAR 0 14
25608: PPUSH
25609: CALL_OW 2
25613: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
25614: LD_VAR 0 14
25618: PPUSH
25619: LD_VAR 0 1
25623: PPUSH
25624: CALL_OW 250
25628: PPUSH
25629: LD_VAR 0 1
25633: PPUSH
25634: CALL_OW 251
25638: PPUSH
25639: LD_INT 10
25641: PPUSH
25642: LD_INT 0
25644: PPUSH
25645: CALL_OW 50
// continue ;
25649: GO 25550
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
25651: LD_VAR 0 12
25655: PUSH
25656: LD_INT 1
25658: ARRAY
25659: PPUSH
25660: CALL_OW 313
25664: PUSH
25665: LD_VAR 0 12
25669: PUSH
25670: LD_INT 1
25672: ARRAY
25673: PPUSH
25674: CALL_OW 266
25678: PUSH
25679: LD_INT 32
25681: PUSH
25682: LD_INT 31
25684: PUSH
25685: EMPTY
25686: LIST
25687: LIST
25688: IN
25689: AND
25690: PUSH
25691: LD_VAR 0 12
25695: PUSH
25696: LD_INT 1
25698: ARRAY
25699: PPUSH
25700: CALL_OW 313
25704: PUSH
25705: LD_INT 6
25707: EQUAL
25708: OR
25709: IFFALSE 25729
// f := Delete ( f , 1 ) ;
25711: LD_ADDR_VAR 0 12
25715: PUSH
25716: LD_VAR 0 12
25720: PPUSH
25721: LD_INT 1
25723: PPUSH
25724: CALL_OW 3
25728: ST_TO_ADDR
// if not f then
25729: LD_VAR 0 12
25733: NOT
25734: IFFALSE 25752
// begin x := x + 2 ;
25736: LD_ADDR_VAR 0 13
25740: PUSH
25741: LD_VAR 0 13
25745: PUSH
25746: LD_INT 2
25748: PLUS
25749: ST_TO_ADDR
// continue ;
25750: GO 25550
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
25752: LD_VAR 0 12
25756: PUSH
25757: LD_INT 1
25759: ARRAY
25760: PPUSH
25761: CALL_OW 266
25765: PUSH
25766: LD_INT 5
25768: EQUAL
25769: IFFALSE 25843
// begin if UnitsInside ( f [ 1 ] ) < 3 then
25771: LD_VAR 0 12
25775: PUSH
25776: LD_INT 1
25778: ARRAY
25779: PPUSH
25780: CALL_OW 313
25784: PUSH
25785: LD_INT 3
25787: LESS
25788: IFFALSE 25824
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
25790: LD_INT 0
25792: PPUSH
25793: LD_INT 5
25795: PUSH
25796: LD_INT 8
25798: PUSH
25799: LD_INT 9
25801: PUSH
25802: EMPTY
25803: LIST
25804: LIST
25805: LIST
25806: PUSH
25807: LD_VAR 0 17
25811: ARRAY
25812: PPUSH
25813: LD_VAR 0 4
25817: PPUSH
25818: CALL_OW 380
25822: GO 25841
// PrepareHuman ( false , i , skill ) ;
25824: LD_INT 0
25826: PPUSH
25827: LD_VAR 0 8
25831: PPUSH
25832: LD_VAR 0 4
25836: PPUSH
25837: CALL_OW 380
// end else
25841: GO 25860
// PrepareHuman ( false , i , skill ) ;
25843: LD_INT 0
25845: PPUSH
25846: LD_VAR 0 8
25850: PPUSH
25851: LD_VAR 0 4
25855: PPUSH
25856: CALL_OW 380
// un := CreateHuman ;
25860: LD_ADDR_VAR 0 14
25864: PUSH
25865: CALL_OW 44
25869: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
25870: LD_ADDR_VAR 0 7
25874: PUSH
25875: LD_VAR 0 7
25879: PPUSH
25880: LD_INT 1
25882: PPUSH
25883: LD_VAR 0 14
25887: PPUSH
25888: CALL_OW 2
25892: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
25893: LD_VAR 0 14
25897: PPUSH
25898: LD_VAR 0 12
25902: PUSH
25903: LD_INT 1
25905: ARRAY
25906: PPUSH
25907: CALL_OW 52
// end ;
25911: GO 25550
25913: POP
25914: POP
// end ;
25915: GO 24852
25917: POP
25918: POP
// result := result ^ buildings ;
25919: LD_ADDR_VAR 0 7
25923: PUSH
25924: LD_VAR 0 7
25928: PUSH
25929: LD_VAR 0 18
25933: ADD
25934: ST_TO_ADDR
// end else
25935: GO 26078
// begin for i = 1 to personel do
25937: LD_ADDR_VAR 0 8
25941: PUSH
25942: DOUBLE
25943: LD_INT 1
25945: DEC
25946: ST_TO_ADDR
25947: LD_VAR 0 6
25951: PUSH
25952: FOR_TO
25953: IFFALSE 26076
// begin if i > 4 then
25955: LD_VAR 0 8
25959: PUSH
25960: LD_INT 4
25962: GREATER
25963: IFFALSE 25967
// break ;
25965: GO 26076
// x := personel [ i ] ;
25967: LD_ADDR_VAR 0 13
25971: PUSH
25972: LD_VAR 0 6
25976: PUSH
25977: LD_VAR 0 8
25981: ARRAY
25982: ST_TO_ADDR
// if x = - 1 then
25983: LD_VAR 0 13
25987: PUSH
25988: LD_INT 1
25990: NEG
25991: EQUAL
25992: IFFALSE 25996
// continue ;
25994: GO 25952
// PrepareHuman ( false , i , skill ) ;
25996: LD_INT 0
25998: PPUSH
25999: LD_VAR 0 8
26003: PPUSH
26004: LD_VAR 0 4
26008: PPUSH
26009: CALL_OW 380
// un := CreateHuman ;
26013: LD_ADDR_VAR 0 14
26017: PUSH
26018: CALL_OW 44
26022: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
26023: LD_VAR 0 14
26027: PPUSH
26028: LD_VAR 0 1
26032: PPUSH
26033: CALL_OW 250
26037: PPUSH
26038: LD_VAR 0 1
26042: PPUSH
26043: CALL_OW 251
26047: PPUSH
26048: LD_INT 10
26050: PPUSH
26051: LD_INT 0
26053: PPUSH
26054: CALL_OW 50
// result := result ^ un ;
26058: LD_ADDR_VAR 0 7
26062: PUSH
26063: LD_VAR 0 7
26067: PUSH
26068: LD_VAR 0 14
26072: ADD
26073: ST_TO_ADDR
// end ;
26074: GO 25952
26076: POP
26077: POP
// end ; end ;
26078: LD_VAR 0 7
26082: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
26083: LD_INT 0
26085: PPUSH
26086: PPUSH
26087: PPUSH
26088: PPUSH
26089: PPUSH
26090: PPUSH
26091: PPUSH
26092: PPUSH
26093: PPUSH
26094: PPUSH
26095: PPUSH
26096: PPUSH
26097: PPUSH
26098: PPUSH
26099: PPUSH
26100: PPUSH
// result := false ;
26101: LD_ADDR_VAR 0 3
26105: PUSH
26106: LD_INT 0
26108: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
26109: LD_VAR 0 1
26113: NOT
26114: PUSH
26115: LD_VAR 0 1
26119: PPUSH
26120: CALL_OW 266
26124: PUSH
26125: LD_INT 32
26127: PUSH
26128: LD_INT 33
26130: PUSH
26131: EMPTY
26132: LIST
26133: LIST
26134: IN
26135: NOT
26136: OR
26137: IFFALSE 26141
// exit ;
26139: GO 27277
// nat := GetNation ( tower ) ;
26141: LD_ADDR_VAR 0 12
26145: PUSH
26146: LD_VAR 0 1
26150: PPUSH
26151: CALL_OW 248
26155: ST_TO_ADDR
// side := GetSide ( tower ) ;
26156: LD_ADDR_VAR 0 16
26160: PUSH
26161: LD_VAR 0 1
26165: PPUSH
26166: CALL_OW 255
26170: ST_TO_ADDR
// x := GetX ( tower ) ;
26171: LD_ADDR_VAR 0 10
26175: PUSH
26176: LD_VAR 0 1
26180: PPUSH
26181: CALL_OW 250
26185: ST_TO_ADDR
// y := GetY ( tower ) ;
26186: LD_ADDR_VAR 0 11
26190: PUSH
26191: LD_VAR 0 1
26195: PPUSH
26196: CALL_OW 251
26200: ST_TO_ADDR
// if not x or not y then
26201: LD_VAR 0 10
26205: NOT
26206: PUSH
26207: LD_VAR 0 11
26211: NOT
26212: OR
26213: IFFALSE 26217
// exit ;
26215: GO 27277
// weapon := 0 ;
26217: LD_ADDR_VAR 0 18
26221: PUSH
26222: LD_INT 0
26224: ST_TO_ADDR
// fac_list := [ ] ;
26225: LD_ADDR_VAR 0 17
26229: PUSH
26230: EMPTY
26231: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area ) , [ f_btype , b_factory ] ) ;
26232: LD_ADDR_VAR 0 6
26236: PUSH
26237: LD_VAR 0 1
26241: PPUSH
26242: CALL_OW 274
26246: PPUSH
26247: LD_VAR 0 2
26251: PPUSH
26252: CALL 23855 0 2
26256: PPUSH
26257: LD_INT 30
26259: PUSH
26260: LD_INT 3
26262: PUSH
26263: EMPTY
26264: LIST
26265: LIST
26266: PPUSH
26267: CALL_OW 72
26271: ST_TO_ADDR
// if not factories then
26272: LD_VAR 0 6
26276: NOT
26277: IFFALSE 26281
// exit ;
26279: GO 27277
// for i in factories do
26281: LD_ADDR_VAR 0 8
26285: PUSH
26286: LD_VAR 0 6
26290: PUSH
26291: FOR_IN
26292: IFFALSE 26317
// fac_list := fac_list union AvailableWeaponList ( i ) ;
26294: LD_ADDR_VAR 0 17
26298: PUSH
26299: LD_VAR 0 17
26303: PUSH
26304: LD_VAR 0 8
26308: PPUSH
26309: CALL_OW 478
26313: UNION
26314: ST_TO_ADDR
26315: GO 26291
26317: POP
26318: POP
// if not fac_list then
26319: LD_VAR 0 17
26323: NOT
26324: IFFALSE 26328
// exit ;
26326: GO 27277
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
26328: LD_ADDR_VAR 0 5
26332: PUSH
26333: LD_INT 4
26335: PUSH
26336: LD_INT 5
26338: PUSH
26339: LD_INT 9
26341: PUSH
26342: LD_INT 10
26344: PUSH
26345: LD_INT 6
26347: PUSH
26348: LD_INT 7
26350: PUSH
26351: LD_INT 11
26353: PUSH
26354: EMPTY
26355: LIST
26356: LIST
26357: LIST
26358: LIST
26359: LIST
26360: LIST
26361: LIST
26362: PUSH
26363: LD_INT 27
26365: PUSH
26366: LD_INT 28
26368: PUSH
26369: LD_INT 26
26371: PUSH
26372: LD_INT 30
26374: PUSH
26375: EMPTY
26376: LIST
26377: LIST
26378: LIST
26379: LIST
26380: PUSH
26381: LD_INT 43
26383: PUSH
26384: LD_INT 44
26386: PUSH
26387: LD_INT 46
26389: PUSH
26390: LD_INT 45
26392: PUSH
26393: LD_INT 47
26395: PUSH
26396: LD_INT 49
26398: PUSH
26399: EMPTY
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: LIST
26406: PUSH
26407: EMPTY
26408: LIST
26409: LIST
26410: LIST
26411: PUSH
26412: LD_VAR 0 12
26416: ARRAY
26417: ST_TO_ADDR
// for i in list do
26418: LD_ADDR_VAR 0 8
26422: PUSH
26423: LD_VAR 0 5
26427: PUSH
26428: FOR_IN
26429: IFFALSE 26462
// if not i in fac_list then
26431: LD_VAR 0 8
26435: PUSH
26436: LD_VAR 0 17
26440: IN
26441: NOT
26442: IFFALSE 26460
// list := list diff i ;
26444: LD_ADDR_VAR 0 5
26448: PUSH
26449: LD_VAR 0 5
26453: PUSH
26454: LD_VAR 0 8
26458: DIFF
26459: ST_TO_ADDR
26460: GO 26428
26462: POP
26463: POP
// if not list then
26464: LD_VAR 0 5
26468: NOT
26469: IFFALSE 26473
// exit ;
26471: GO 27277
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
26473: LD_VAR 0 12
26477: PUSH
26478: LD_INT 3
26480: EQUAL
26481: PUSH
26482: LD_INT 49
26484: PUSH
26485: LD_VAR 0 5
26489: IN
26490: AND
26491: PUSH
26492: LD_INT 31
26494: PPUSH
26495: LD_VAR 0 16
26499: PPUSH
26500: CALL_OW 321
26504: PUSH
26505: LD_INT 2
26507: EQUAL
26508: AND
26509: IFFALSE 26569
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
26511: LD_INT 22
26513: PUSH
26514: LD_VAR 0 16
26518: PUSH
26519: EMPTY
26520: LIST
26521: LIST
26522: PUSH
26523: LD_INT 35
26525: PUSH
26526: LD_INT 49
26528: PUSH
26529: EMPTY
26530: LIST
26531: LIST
26532: PUSH
26533: LD_INT 91
26535: PUSH
26536: LD_VAR 0 1
26540: PUSH
26541: LD_INT 10
26543: PUSH
26544: EMPTY
26545: LIST
26546: LIST
26547: LIST
26548: PUSH
26549: EMPTY
26550: LIST
26551: LIST
26552: LIST
26553: PPUSH
26554: CALL_OW 69
26558: NOT
26559: IFFALSE 26569
// weapon := ru_time_lapser ;
26561: LD_ADDR_VAR 0 18
26565: PUSH
26566: LD_INT 49
26568: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
26569: LD_VAR 0 12
26573: PUSH
26574: LD_INT 1
26576: PUSH
26577: LD_INT 2
26579: PUSH
26580: EMPTY
26581: LIST
26582: LIST
26583: IN
26584: PUSH
26585: LD_INT 11
26587: PUSH
26588: LD_VAR 0 5
26592: IN
26593: PUSH
26594: LD_INT 30
26596: PUSH
26597: LD_VAR 0 5
26601: IN
26602: OR
26603: AND
26604: PUSH
26605: LD_INT 6
26607: PPUSH
26608: LD_VAR 0 16
26612: PPUSH
26613: CALL_OW 321
26617: PUSH
26618: LD_INT 2
26620: EQUAL
26621: AND
26622: IFFALSE 26787
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
26624: LD_INT 22
26626: PUSH
26627: LD_VAR 0 16
26631: PUSH
26632: EMPTY
26633: LIST
26634: LIST
26635: PUSH
26636: LD_INT 2
26638: PUSH
26639: LD_INT 35
26641: PUSH
26642: LD_INT 11
26644: PUSH
26645: EMPTY
26646: LIST
26647: LIST
26648: PUSH
26649: LD_INT 35
26651: PUSH
26652: LD_INT 30
26654: PUSH
26655: EMPTY
26656: LIST
26657: LIST
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: LIST
26663: PUSH
26664: LD_INT 91
26666: PUSH
26667: LD_VAR 0 1
26671: PUSH
26672: LD_INT 18
26674: PUSH
26675: EMPTY
26676: LIST
26677: LIST
26678: LIST
26679: PUSH
26680: EMPTY
26681: LIST
26682: LIST
26683: LIST
26684: PPUSH
26685: CALL_OW 69
26689: NOT
26690: PUSH
26691: LD_INT 22
26693: PUSH
26694: LD_VAR 0 16
26698: PUSH
26699: EMPTY
26700: LIST
26701: LIST
26702: PUSH
26703: LD_INT 2
26705: PUSH
26706: LD_INT 30
26708: PUSH
26709: LD_INT 32
26711: PUSH
26712: EMPTY
26713: LIST
26714: LIST
26715: PUSH
26716: LD_INT 30
26718: PUSH
26719: LD_INT 33
26721: PUSH
26722: EMPTY
26723: LIST
26724: LIST
26725: PUSH
26726: EMPTY
26727: LIST
26728: LIST
26729: LIST
26730: PUSH
26731: LD_INT 91
26733: PUSH
26734: LD_VAR 0 1
26738: PUSH
26739: LD_INT 12
26741: PUSH
26742: EMPTY
26743: LIST
26744: LIST
26745: LIST
26746: PUSH
26747: EMPTY
26748: LIST
26749: LIST
26750: LIST
26751: PUSH
26752: EMPTY
26753: LIST
26754: PPUSH
26755: CALL_OW 69
26759: PUSH
26760: LD_INT 2
26762: GREATER
26763: AND
26764: IFFALSE 26787
// weapon := [ us_radar , ar_radar ] [ nat ] ;
26766: LD_ADDR_VAR 0 18
26770: PUSH
26771: LD_INT 11
26773: PUSH
26774: LD_INT 30
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PUSH
26781: LD_VAR 0 12
26785: ARRAY
26786: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
26787: LD_VAR 0 18
26791: NOT
26792: PUSH
26793: LD_INT 40
26795: PPUSH
26796: LD_VAR 0 16
26800: PPUSH
26801: CALL_OW 321
26805: PUSH
26806: LD_INT 2
26808: EQUAL
26809: AND
26810: PUSH
26811: LD_INT 7
26813: PUSH
26814: LD_VAR 0 5
26818: IN
26819: PUSH
26820: LD_INT 28
26822: PUSH
26823: LD_VAR 0 5
26827: IN
26828: OR
26829: PUSH
26830: LD_INT 45
26832: PUSH
26833: LD_VAR 0 5
26837: IN
26838: OR
26839: AND
26840: IFFALSE 27094
// begin hex := GetHexInfo ( x , y ) ;
26842: LD_ADDR_VAR 0 4
26846: PUSH
26847: LD_VAR 0 10
26851: PPUSH
26852: LD_VAR 0 11
26856: PPUSH
26857: CALL_OW 546
26861: ST_TO_ADDR
// if hex [ 1 ] then
26862: LD_VAR 0 4
26866: PUSH
26867: LD_INT 1
26869: ARRAY
26870: IFFALSE 26874
// exit ;
26872: GO 27277
// height := hex [ 2 ] ;
26874: LD_ADDR_VAR 0 15
26878: PUSH
26879: LD_VAR 0 4
26883: PUSH
26884: LD_INT 2
26886: ARRAY
26887: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
26888: LD_ADDR_VAR 0 14
26892: PUSH
26893: LD_INT 0
26895: PUSH
26896: LD_INT 2
26898: PUSH
26899: LD_INT 3
26901: PUSH
26902: LD_INT 5
26904: PUSH
26905: EMPTY
26906: LIST
26907: LIST
26908: LIST
26909: LIST
26910: ST_TO_ADDR
// for i in tmp do
26911: LD_ADDR_VAR 0 8
26915: PUSH
26916: LD_VAR 0 14
26920: PUSH
26921: FOR_IN
26922: IFFALSE 27092
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
26924: LD_ADDR_VAR 0 9
26928: PUSH
26929: LD_VAR 0 10
26933: PPUSH
26934: LD_VAR 0 8
26938: PPUSH
26939: LD_INT 5
26941: PPUSH
26942: CALL_OW 272
26946: PUSH
26947: LD_VAR 0 11
26951: PPUSH
26952: LD_VAR 0 8
26956: PPUSH
26957: LD_INT 5
26959: PPUSH
26960: CALL_OW 273
26964: PUSH
26965: EMPTY
26966: LIST
26967: LIST
26968: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
26969: LD_VAR 0 9
26973: PUSH
26974: LD_INT 1
26976: ARRAY
26977: PPUSH
26978: LD_VAR 0 9
26982: PUSH
26983: LD_INT 2
26985: ARRAY
26986: PPUSH
26987: CALL_OW 488
26991: IFFALSE 27090
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
26993: LD_ADDR_VAR 0 4
26997: PUSH
26998: LD_VAR 0 9
27002: PUSH
27003: LD_INT 1
27005: ARRAY
27006: PPUSH
27007: LD_VAR 0 9
27011: PUSH
27012: LD_INT 2
27014: ARRAY
27015: PPUSH
27016: CALL_OW 546
27020: ST_TO_ADDR
// if hex [ 1 ] then
27021: LD_VAR 0 4
27025: PUSH
27026: LD_INT 1
27028: ARRAY
27029: IFFALSE 27033
// continue ;
27031: GO 26921
// h := hex [ 2 ] ;
27033: LD_ADDR_VAR 0 13
27037: PUSH
27038: LD_VAR 0 4
27042: PUSH
27043: LD_INT 2
27045: ARRAY
27046: ST_TO_ADDR
// if h + 7 < height then
27047: LD_VAR 0 13
27051: PUSH
27052: LD_INT 7
27054: PLUS
27055: PUSH
27056: LD_VAR 0 15
27060: LESS
27061: IFFALSE 27090
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
27063: LD_ADDR_VAR 0 18
27067: PUSH
27068: LD_INT 7
27070: PUSH
27071: LD_INT 28
27073: PUSH
27074: LD_INT 45
27076: PUSH
27077: EMPTY
27078: LIST
27079: LIST
27080: LIST
27081: PUSH
27082: LD_VAR 0 12
27086: ARRAY
27087: ST_TO_ADDR
// break ;
27088: GO 27092
// end ; end ; end ;
27090: GO 26921
27092: POP
27093: POP
// end ; if not weapon then
27094: LD_VAR 0 18
27098: NOT
27099: IFFALSE 27159
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
27101: LD_ADDR_VAR 0 5
27105: PUSH
27106: LD_VAR 0 5
27110: PUSH
27111: LD_INT 11
27113: PUSH
27114: LD_INT 30
27116: PUSH
27117: LD_INT 49
27119: PUSH
27120: EMPTY
27121: LIST
27122: LIST
27123: LIST
27124: DIFF
27125: ST_TO_ADDR
// if not list then
27126: LD_VAR 0 5
27130: NOT
27131: IFFALSE 27135
// exit ;
27133: GO 27277
// weapon := list [ rand ( 1 , list ) ] ;
27135: LD_ADDR_VAR 0 18
27139: PUSH
27140: LD_VAR 0 5
27144: PUSH
27145: LD_INT 1
27147: PPUSH
27148: LD_VAR 0 5
27152: PPUSH
27153: CALL_OW 12
27157: ARRAY
27158: ST_TO_ADDR
// end ; if weapon then
27159: LD_VAR 0 18
27163: IFFALSE 27277
// begin tmp := CostOfWeapon ( weapon ) ;
27165: LD_ADDR_VAR 0 14
27169: PUSH
27170: LD_VAR 0 18
27174: PPUSH
27175: CALL_OW 451
27179: ST_TO_ADDR
// j := GetBase ( tower ) ;
27180: LD_ADDR_VAR 0 9
27184: PUSH
27185: LD_VAR 0 1
27189: PPUSH
27190: CALL_OW 274
27194: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
27195: LD_VAR 0 9
27199: PPUSH
27200: LD_INT 1
27202: PPUSH
27203: CALL_OW 275
27207: PUSH
27208: LD_VAR 0 14
27212: PUSH
27213: LD_INT 1
27215: ARRAY
27216: GREATEREQUAL
27217: PUSH
27218: LD_VAR 0 9
27222: PPUSH
27223: LD_INT 2
27225: PPUSH
27226: CALL_OW 275
27230: PUSH
27231: LD_VAR 0 14
27235: PUSH
27236: LD_INT 2
27238: ARRAY
27239: GREATEREQUAL
27240: AND
27241: PUSH
27242: LD_VAR 0 9
27246: PPUSH
27247: LD_INT 3
27249: PPUSH
27250: CALL_OW 275
27254: PUSH
27255: LD_VAR 0 14
27259: PUSH
27260: LD_INT 3
27262: ARRAY
27263: GREATEREQUAL
27264: AND
27265: IFFALSE 27277
// result := weapon ;
27267: LD_ADDR_VAR 0 3
27271: PUSH
27272: LD_VAR 0 18
27276: ST_TO_ADDR
// end ; end ;
27277: LD_VAR 0 3
27281: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
27282: LD_INT 0
27284: PPUSH
27285: PPUSH
// result := true ;
27286: LD_ADDR_VAR 0 3
27290: PUSH
27291: LD_INT 1
27293: ST_TO_ADDR
// if array1 = array2 then
27294: LD_VAR 0 1
27298: PUSH
27299: LD_VAR 0 2
27303: EQUAL
27304: IFFALSE 27364
// begin for i = 1 to array1 do
27306: LD_ADDR_VAR 0 4
27310: PUSH
27311: DOUBLE
27312: LD_INT 1
27314: DEC
27315: ST_TO_ADDR
27316: LD_VAR 0 1
27320: PUSH
27321: FOR_TO
27322: IFFALSE 27360
// if array1 [ i ] <> array2 [ i ] then
27324: LD_VAR 0 1
27328: PUSH
27329: LD_VAR 0 4
27333: ARRAY
27334: PUSH
27335: LD_VAR 0 2
27339: PUSH
27340: LD_VAR 0 4
27344: ARRAY
27345: NONEQUAL
27346: IFFALSE 27358
// begin result := false ;
27348: LD_ADDR_VAR 0 3
27352: PUSH
27353: LD_INT 0
27355: ST_TO_ADDR
// break ;
27356: GO 27360
// end ;
27358: GO 27321
27360: POP
27361: POP
// end else
27362: GO 27372
// result := false ;
27364: LD_ADDR_VAR 0 3
27368: PUSH
27369: LD_INT 0
27371: ST_TO_ADDR
// end ;
27372: LD_VAR 0 3
27376: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
27377: LD_INT 0
27379: PPUSH
27380: PPUSH
27381: PPUSH
// pom := GetBase ( fac ) ;
27382: LD_ADDR_VAR 0 5
27386: PUSH
27387: LD_VAR 0 1
27391: PPUSH
27392: CALL_OW 274
27396: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
27397: LD_ADDR_VAR 0 4
27401: PUSH
27402: LD_VAR 0 2
27406: PUSH
27407: LD_INT 1
27409: ARRAY
27410: PPUSH
27411: LD_VAR 0 2
27415: PUSH
27416: LD_INT 2
27418: ARRAY
27419: PPUSH
27420: LD_VAR 0 2
27424: PUSH
27425: LD_INT 3
27427: ARRAY
27428: PPUSH
27429: LD_VAR 0 2
27433: PUSH
27434: LD_INT 4
27436: ARRAY
27437: PPUSH
27438: CALL_OW 449
27442: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27443: LD_ADDR_VAR 0 3
27447: PUSH
27448: LD_VAR 0 5
27452: PPUSH
27453: LD_INT 1
27455: PPUSH
27456: CALL_OW 275
27460: PUSH
27461: LD_VAR 0 4
27465: PUSH
27466: LD_INT 1
27468: ARRAY
27469: GREATEREQUAL
27470: PUSH
27471: LD_VAR 0 5
27475: PPUSH
27476: LD_INT 2
27478: PPUSH
27479: CALL_OW 275
27483: PUSH
27484: LD_VAR 0 4
27488: PUSH
27489: LD_INT 2
27491: ARRAY
27492: GREATEREQUAL
27493: AND
27494: PUSH
27495: LD_VAR 0 5
27499: PPUSH
27500: LD_INT 3
27502: PPUSH
27503: CALL_OW 275
27507: PUSH
27508: LD_VAR 0 4
27512: PUSH
27513: LD_INT 3
27515: ARRAY
27516: GREATEREQUAL
27517: AND
27518: ST_TO_ADDR
// end ;
27519: LD_VAR 0 3
27523: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
27524: LD_INT 0
27526: PPUSH
27527: PPUSH
27528: PPUSH
27529: PPUSH
// pom := GetBase ( building ) ;
27530: LD_ADDR_VAR 0 3
27534: PUSH
27535: LD_VAR 0 1
27539: PPUSH
27540: CALL_OW 274
27544: ST_TO_ADDR
// if not pom then
27545: LD_VAR 0 3
27549: NOT
27550: IFFALSE 27554
// exit ;
27552: GO 27724
// btype := GetBType ( building ) ;
27554: LD_ADDR_VAR 0 5
27558: PUSH
27559: LD_VAR 0 1
27563: PPUSH
27564: CALL_OW 266
27568: ST_TO_ADDR
// if btype = b_armoury then
27569: LD_VAR 0 5
27573: PUSH
27574: LD_INT 4
27576: EQUAL
27577: IFFALSE 27587
// btype := b_barracks ;
27579: LD_ADDR_VAR 0 5
27583: PUSH
27584: LD_INT 5
27586: ST_TO_ADDR
// if btype = b_depot then
27587: LD_VAR 0 5
27591: PUSH
27592: LD_INT 0
27594: EQUAL
27595: IFFALSE 27605
// btype := b_warehouse ;
27597: LD_ADDR_VAR 0 5
27601: PUSH
27602: LD_INT 1
27604: ST_TO_ADDR
// if btype = b_workshop then
27605: LD_VAR 0 5
27609: PUSH
27610: LD_INT 2
27612: EQUAL
27613: IFFALSE 27623
// btype := b_factory ;
27615: LD_ADDR_VAR 0 5
27619: PUSH
27620: LD_INT 3
27622: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27623: LD_ADDR_VAR 0 4
27627: PUSH
27628: LD_VAR 0 5
27632: PPUSH
27633: LD_VAR 0 1
27637: PPUSH
27638: CALL_OW 248
27642: PPUSH
27643: CALL_OW 450
27647: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27648: LD_ADDR_VAR 0 2
27652: PUSH
27653: LD_VAR 0 3
27657: PPUSH
27658: LD_INT 1
27660: PPUSH
27661: CALL_OW 275
27665: PUSH
27666: LD_VAR 0 4
27670: PUSH
27671: LD_INT 1
27673: ARRAY
27674: GREATEREQUAL
27675: PUSH
27676: LD_VAR 0 3
27680: PPUSH
27681: LD_INT 2
27683: PPUSH
27684: CALL_OW 275
27688: PUSH
27689: LD_VAR 0 4
27693: PUSH
27694: LD_INT 2
27696: ARRAY
27697: GREATEREQUAL
27698: AND
27699: PUSH
27700: LD_VAR 0 3
27704: PPUSH
27705: LD_INT 3
27707: PPUSH
27708: CALL_OW 275
27712: PUSH
27713: LD_VAR 0 4
27717: PUSH
27718: LD_INT 3
27720: ARRAY
27721: GREATEREQUAL
27722: AND
27723: ST_TO_ADDR
// end ;
27724: LD_VAR 0 2
27728: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
27729: LD_INT 0
27731: PPUSH
27732: PPUSH
27733: PPUSH
// pom := GetBase ( building ) ;
27734: LD_ADDR_VAR 0 4
27738: PUSH
27739: LD_VAR 0 1
27743: PPUSH
27744: CALL_OW 274
27748: ST_TO_ADDR
// if not pom then
27749: LD_VAR 0 4
27753: NOT
27754: IFFALSE 27758
// exit ;
27756: GO 27859
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
27758: LD_ADDR_VAR 0 5
27762: PUSH
27763: LD_VAR 0 2
27767: PPUSH
27768: LD_VAR 0 1
27772: PPUSH
27773: CALL_OW 248
27777: PPUSH
27778: CALL_OW 450
27782: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
27783: LD_ADDR_VAR 0 3
27787: PUSH
27788: LD_VAR 0 4
27792: PPUSH
27793: LD_INT 1
27795: PPUSH
27796: CALL_OW 275
27800: PUSH
27801: LD_VAR 0 5
27805: PUSH
27806: LD_INT 1
27808: ARRAY
27809: GREATEREQUAL
27810: PUSH
27811: LD_VAR 0 4
27815: PPUSH
27816: LD_INT 2
27818: PPUSH
27819: CALL_OW 275
27823: PUSH
27824: LD_VAR 0 5
27828: PUSH
27829: LD_INT 2
27831: ARRAY
27832: GREATEREQUAL
27833: AND
27834: PUSH
27835: LD_VAR 0 4
27839: PPUSH
27840: LD_INT 3
27842: PPUSH
27843: CALL_OW 275
27847: PUSH
27848: LD_VAR 0 5
27852: PUSH
27853: LD_INT 3
27855: ARRAY
27856: GREATEREQUAL
27857: AND
27858: ST_TO_ADDR
// end ;
27859: LD_VAR 0 3
27863: RET
// export function TryClearPlaceForBuilding ( base , btype , x , y , d ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep ; begin
27864: LD_INT 0
27866: PPUSH
27867: PPUSH
27868: PPUSH
27869: PPUSH
27870: PPUSH
27871: PPUSH
27872: PPUSH
27873: PPUSH
27874: PPUSH
27875: PPUSH
// result := false ;
27876: LD_ADDR_VAR 0 6
27880: PUSH
27881: LD_INT 0
27883: ST_TO_ADDR
// if not base or not btype or not x or not y then
27884: LD_VAR 0 1
27888: NOT
27889: PUSH
27890: LD_VAR 0 2
27894: NOT
27895: OR
27896: PUSH
27897: LD_VAR 0 3
27901: NOT
27902: OR
27903: PUSH
27904: LD_VAR 0 4
27908: NOT
27909: OR
27910: IFFALSE 27914
// exit ;
27912: GO 28523
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( base [ 1 ] ) , 0 ) ;
27914: LD_ADDR_VAR 0 12
27918: PUSH
27919: LD_VAR 0 2
27923: PPUSH
27924: LD_VAR 0 3
27928: PPUSH
27929: LD_VAR 0 4
27933: PPUSH
27934: LD_VAR 0 5
27938: PPUSH
27939: LD_VAR 0 1
27943: PUSH
27944: LD_INT 1
27946: ARRAY
27947: PPUSH
27948: CALL_OW 248
27952: PPUSH
27953: LD_INT 0
27955: PPUSH
27956: CALL 29360 0 6
27960: ST_TO_ADDR
// if not hexes then
27961: LD_VAR 0 12
27965: NOT
27966: IFFALSE 27970
// exit ;
27968: GO 28523
// for i = 1 to hexes do
27970: LD_ADDR_VAR 0 7
27974: PUSH
27975: DOUBLE
27976: LD_INT 1
27978: DEC
27979: ST_TO_ADDR
27980: LD_VAR 0 12
27984: PUSH
27985: FOR_TO
27986: IFFALSE 28521
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
27988: LD_ADDR_VAR 0 11
27992: PUSH
27993: LD_VAR 0 12
27997: PUSH
27998: LD_VAR 0 7
28002: ARRAY
28003: PUSH
28004: LD_INT 1
28006: ARRAY
28007: PPUSH
28008: LD_VAR 0 12
28012: PUSH
28013: LD_VAR 0 7
28017: ARRAY
28018: PUSH
28019: LD_INT 2
28021: ARRAY
28022: PPUSH
28023: CALL_OW 428
28027: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
28028: LD_VAR 0 12
28032: PUSH
28033: LD_VAR 0 7
28037: ARRAY
28038: PUSH
28039: LD_INT 1
28041: ARRAY
28042: PPUSH
28043: LD_VAR 0 12
28047: PUSH
28048: LD_VAR 0 7
28052: ARRAY
28053: PUSH
28054: LD_INT 2
28056: ARRAY
28057: PPUSH
28058: CALL_OW 351
28062: PUSH
28063: LD_VAR 0 12
28067: PUSH
28068: LD_VAR 0 7
28072: ARRAY
28073: PUSH
28074: LD_INT 1
28076: ARRAY
28077: PPUSH
28078: LD_VAR 0 12
28082: PUSH
28083: LD_VAR 0 7
28087: ARRAY
28088: PUSH
28089: LD_INT 2
28091: ARRAY
28092: PPUSH
28093: CALL_OW 488
28097: NOT
28098: OR
28099: PUSH
28100: LD_VAR 0 11
28104: PPUSH
28105: CALL_OW 247
28109: PUSH
28110: LD_INT 3
28112: EQUAL
28113: OR
28114: IFFALSE 28120
// exit ;
28116: POP
28117: POP
28118: GO 28523
// if not tmp or not tmp in base then
28120: LD_VAR 0 11
28124: NOT
28125: PUSH
28126: LD_VAR 0 11
28130: PUSH
28131: LD_VAR 0 1
28135: IN
28136: NOT
28137: OR
28138: IFFALSE 28142
// continue ;
28140: GO 27985
// result := true ;
28142: LD_ADDR_VAR 0 6
28146: PUSH
28147: LD_INT 1
28149: ST_TO_ADDR
// dep := UnitFilter ( base , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
28150: LD_ADDR_VAR 0 15
28154: PUSH
28155: LD_VAR 0 1
28159: PPUSH
28160: LD_INT 22
28162: PUSH
28163: LD_VAR 0 11
28167: PPUSH
28168: CALL_OW 255
28172: PUSH
28173: EMPTY
28174: LIST
28175: LIST
28176: PUSH
28177: LD_INT 2
28179: PUSH
28180: LD_INT 30
28182: PUSH
28183: LD_INT 0
28185: PUSH
28186: EMPTY
28187: LIST
28188: LIST
28189: PUSH
28190: LD_INT 30
28192: PUSH
28193: LD_INT 1
28195: PUSH
28196: EMPTY
28197: LIST
28198: LIST
28199: PUSH
28200: EMPTY
28201: LIST
28202: LIST
28203: LIST
28204: PUSH
28205: EMPTY
28206: LIST
28207: LIST
28208: PPUSH
28209: CALL_OW 72
28213: ST_TO_ADDR
// if dep then
28214: LD_VAR 0 15
28218: IFFALSE 28354
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
28220: LD_ADDR_VAR 0 14
28224: PUSH
28225: LD_VAR 0 15
28229: PUSH
28230: LD_INT 1
28232: ARRAY
28233: PPUSH
28234: CALL_OW 250
28238: PPUSH
28239: LD_VAR 0 15
28243: PUSH
28244: LD_INT 1
28246: ARRAY
28247: PPUSH
28248: CALL_OW 254
28252: PPUSH
28253: LD_INT 5
28255: PPUSH
28256: CALL_OW 272
28260: PUSH
28261: LD_VAR 0 15
28265: PUSH
28266: LD_INT 1
28268: ARRAY
28269: PPUSH
28270: CALL_OW 251
28274: PPUSH
28275: LD_VAR 0 15
28279: PUSH
28280: LD_INT 1
28282: ARRAY
28283: PPUSH
28284: CALL_OW 254
28288: PPUSH
28289: LD_INT 5
28291: PPUSH
28292: CALL_OW 273
28296: PUSH
28297: EMPTY
28298: LIST
28299: LIST
28300: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
28301: LD_VAR 0 14
28305: PUSH
28306: LD_INT 1
28308: ARRAY
28309: PPUSH
28310: LD_VAR 0 14
28314: PUSH
28315: LD_INT 2
28317: ARRAY
28318: PPUSH
28319: CALL_OW 488
28323: IFFALSE 28354
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
28325: LD_VAR 0 11
28329: PPUSH
28330: LD_VAR 0 14
28334: PUSH
28335: LD_INT 1
28337: ARRAY
28338: PPUSH
28339: LD_VAR 0 14
28343: PUSH
28344: LD_INT 2
28346: ARRAY
28347: PPUSH
28348: CALL_OW 111
// continue ;
28352: GO 27985
// end ; end ; r := GetDir ( tmp ) ;
28354: LD_ADDR_VAR 0 13
28358: PUSH
28359: LD_VAR 0 11
28363: PPUSH
28364: CALL_OW 254
28368: ST_TO_ADDR
// if r = 5 then
28369: LD_VAR 0 13
28373: PUSH
28374: LD_INT 5
28376: EQUAL
28377: IFFALSE 28387
// r := 0 ;
28379: LD_ADDR_VAR 0 13
28383: PUSH
28384: LD_INT 0
28386: ST_TO_ADDR
// for j = r to 5 do
28387: LD_ADDR_VAR 0 8
28391: PUSH
28392: DOUBLE
28393: LD_VAR 0 13
28397: DEC
28398: ST_TO_ADDR
28399: LD_INT 5
28401: PUSH
28402: FOR_TO
28403: IFFALSE 28517
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
28405: LD_ADDR_VAR 0 9
28409: PUSH
28410: LD_VAR 0 11
28414: PPUSH
28415: CALL_OW 250
28419: PPUSH
28420: LD_VAR 0 8
28424: PPUSH
28425: LD_INT 2
28427: PPUSH
28428: CALL_OW 272
28432: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
28433: LD_ADDR_VAR 0 10
28437: PUSH
28438: LD_VAR 0 11
28442: PPUSH
28443: CALL_OW 251
28447: PPUSH
28448: LD_VAR 0 8
28452: PPUSH
28453: LD_INT 2
28455: PPUSH
28456: CALL_OW 273
28460: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
28461: LD_VAR 0 9
28465: PPUSH
28466: LD_VAR 0 10
28470: PPUSH
28471: CALL_OW 488
28475: PUSH
28476: LD_VAR 0 9
28480: PPUSH
28481: LD_VAR 0 10
28485: PPUSH
28486: CALL_OW 428
28490: NOT
28491: AND
28492: IFFALSE 28515
// begin ComMoveXY ( tmp , _x , _y ) ;
28494: LD_VAR 0 11
28498: PPUSH
28499: LD_VAR 0 9
28503: PPUSH
28504: LD_VAR 0 10
28508: PPUSH
28509: CALL_OW 111
// break ;
28513: GO 28517
// end ; end ;
28515: GO 28402
28517: POP
28518: POP
// end ;
28519: GO 27985
28521: POP
28522: POP
// end ;
28523: LD_VAR 0 6
28527: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
28528: LD_INT 0
28530: PPUSH
28531: PPUSH
28532: PPUSH
28533: PPUSH
28534: PPUSH
28535: PPUSH
28536: PPUSH
28537: PPUSH
28538: PPUSH
28539: PPUSH
// result := false ;
28540: LD_ADDR_VAR 0 6
28544: PUSH
28545: LD_INT 0
28547: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
28548: LD_VAR 0 1
28552: NOT
28553: PUSH
28554: LD_VAR 0 1
28558: PPUSH
28559: CALL_OW 266
28563: PUSH
28564: LD_INT 0
28566: PUSH
28567: LD_INT 1
28569: PUSH
28570: EMPTY
28571: LIST
28572: LIST
28573: IN
28574: NOT
28575: OR
28576: PUSH
28577: LD_VAR 0 2
28581: NOT
28582: OR
28583: PUSH
28584: LD_VAR 0 5
28588: PUSH
28589: LD_INT 0
28591: PUSH
28592: LD_INT 1
28594: PUSH
28595: LD_INT 2
28597: PUSH
28598: LD_INT 3
28600: PUSH
28601: LD_INT 4
28603: PUSH
28604: LD_INT 5
28606: PUSH
28607: EMPTY
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: LIST
28614: IN
28615: NOT
28616: OR
28617: PUSH
28618: LD_VAR 0 3
28622: PPUSH
28623: LD_VAR 0 4
28627: PPUSH
28628: CALL_OW 488
28632: NOT
28633: OR
28634: IFFALSE 28638
// exit ;
28636: GO 29355
// pom := GetBase ( depot ) ;
28638: LD_ADDR_VAR 0 10
28642: PUSH
28643: LD_VAR 0 1
28647: PPUSH
28648: CALL_OW 274
28652: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
28653: LD_ADDR_VAR 0 11
28657: PUSH
28658: LD_VAR 0 2
28662: PPUSH
28663: LD_VAR 0 1
28667: PPUSH
28668: CALL_OW 248
28672: PPUSH
28673: CALL_OW 450
28677: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
28678: LD_VAR 0 10
28682: PPUSH
28683: LD_INT 1
28685: PPUSH
28686: CALL_OW 275
28690: PUSH
28691: LD_VAR 0 11
28695: PUSH
28696: LD_INT 1
28698: ARRAY
28699: GREATEREQUAL
28700: PUSH
28701: LD_VAR 0 10
28705: PPUSH
28706: LD_INT 2
28708: PPUSH
28709: CALL_OW 275
28713: PUSH
28714: LD_VAR 0 11
28718: PUSH
28719: LD_INT 2
28721: ARRAY
28722: GREATEREQUAL
28723: AND
28724: PUSH
28725: LD_VAR 0 10
28729: PPUSH
28730: LD_INT 3
28732: PPUSH
28733: CALL_OW 275
28737: PUSH
28738: LD_VAR 0 11
28742: PUSH
28743: LD_INT 3
28745: ARRAY
28746: GREATEREQUAL
28747: AND
28748: NOT
28749: IFFALSE 28753
// exit ;
28751: GO 29355
// if GetBType ( depot ) = b_depot then
28753: LD_VAR 0 1
28757: PPUSH
28758: CALL_OW 266
28762: PUSH
28763: LD_INT 0
28765: EQUAL
28766: IFFALSE 28778
// dist := 28 else
28768: LD_ADDR_VAR 0 14
28772: PUSH
28773: LD_INT 28
28775: ST_TO_ADDR
28776: GO 28786
// dist := 36 ;
28778: LD_ADDR_VAR 0 14
28782: PUSH
28783: LD_INT 36
28785: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
28786: LD_VAR 0 1
28790: PPUSH
28791: LD_VAR 0 3
28795: PPUSH
28796: LD_VAR 0 4
28800: PPUSH
28801: CALL_OW 297
28805: PUSH
28806: LD_VAR 0 14
28810: GREATER
28811: IFFALSE 28815
// exit ;
28813: GO 29355
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
28815: LD_ADDR_VAR 0 12
28819: PUSH
28820: LD_VAR 0 2
28824: PPUSH
28825: LD_VAR 0 3
28829: PPUSH
28830: LD_VAR 0 4
28834: PPUSH
28835: LD_VAR 0 5
28839: PPUSH
28840: LD_VAR 0 1
28844: PPUSH
28845: CALL_OW 248
28849: PPUSH
28850: LD_INT 0
28852: PPUSH
28853: CALL 29360 0 6
28857: ST_TO_ADDR
// if not hexes then
28858: LD_VAR 0 12
28862: NOT
28863: IFFALSE 28867
// exit ;
28865: GO 29355
// hex := GetHexInfo ( x , y ) ;
28867: LD_ADDR_VAR 0 15
28871: PUSH
28872: LD_VAR 0 3
28876: PPUSH
28877: LD_VAR 0 4
28881: PPUSH
28882: CALL_OW 546
28886: ST_TO_ADDR
// if hex [ 1 ] then
28887: LD_VAR 0 15
28891: PUSH
28892: LD_INT 1
28894: ARRAY
28895: IFFALSE 28899
// exit ;
28897: GO 29355
// height := hex [ 2 ] ;
28899: LD_ADDR_VAR 0 13
28903: PUSH
28904: LD_VAR 0 15
28908: PUSH
28909: LD_INT 2
28911: ARRAY
28912: ST_TO_ADDR
// for i = 1 to hexes do
28913: LD_ADDR_VAR 0 7
28917: PUSH
28918: DOUBLE
28919: LD_INT 1
28921: DEC
28922: ST_TO_ADDR
28923: LD_VAR 0 12
28927: PUSH
28928: FOR_TO
28929: IFFALSE 29259
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
28931: LD_VAR 0 12
28935: PUSH
28936: LD_VAR 0 7
28940: ARRAY
28941: PUSH
28942: LD_INT 1
28944: ARRAY
28945: PPUSH
28946: LD_VAR 0 12
28950: PUSH
28951: LD_VAR 0 7
28955: ARRAY
28956: PUSH
28957: LD_INT 2
28959: ARRAY
28960: PPUSH
28961: CALL_OW 488
28965: NOT
28966: PUSH
28967: LD_VAR 0 12
28971: PUSH
28972: LD_VAR 0 7
28976: ARRAY
28977: PUSH
28978: LD_INT 1
28980: ARRAY
28981: PPUSH
28982: LD_VAR 0 12
28986: PUSH
28987: LD_VAR 0 7
28991: ARRAY
28992: PUSH
28993: LD_INT 2
28995: ARRAY
28996: PPUSH
28997: CALL_OW 428
29001: PUSH
29002: LD_INT 0
29004: GREATER
29005: OR
29006: PUSH
29007: LD_VAR 0 12
29011: PUSH
29012: LD_VAR 0 7
29016: ARRAY
29017: PUSH
29018: LD_INT 1
29020: ARRAY
29021: PPUSH
29022: LD_VAR 0 12
29026: PUSH
29027: LD_VAR 0 7
29031: ARRAY
29032: PUSH
29033: LD_INT 2
29035: ARRAY
29036: PPUSH
29037: CALL_OW 351
29041: OR
29042: IFFALSE 29048
// exit ;
29044: POP
29045: POP
29046: GO 29355
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
29048: LD_ADDR_VAR 0 8
29052: PUSH
29053: LD_VAR 0 12
29057: PUSH
29058: LD_VAR 0 7
29062: ARRAY
29063: PUSH
29064: LD_INT 1
29066: ARRAY
29067: PPUSH
29068: LD_VAR 0 12
29072: PUSH
29073: LD_VAR 0 7
29077: ARRAY
29078: PUSH
29079: LD_INT 2
29081: ARRAY
29082: PPUSH
29083: CALL_OW 546
29087: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
29088: LD_VAR 0 8
29092: PUSH
29093: LD_INT 1
29095: ARRAY
29096: PUSH
29097: LD_VAR 0 8
29101: PUSH
29102: LD_INT 2
29104: ARRAY
29105: PUSH
29106: LD_VAR 0 13
29110: PUSH
29111: LD_INT 2
29113: PLUS
29114: GREATER
29115: OR
29116: PUSH
29117: LD_VAR 0 8
29121: PUSH
29122: LD_INT 2
29124: ARRAY
29125: PUSH
29126: LD_VAR 0 13
29130: PUSH
29131: LD_INT 2
29133: MINUS
29134: LESS
29135: OR
29136: PUSH
29137: LD_VAR 0 8
29141: PUSH
29142: LD_INT 3
29144: ARRAY
29145: PUSH
29146: LD_INT 0
29148: PUSH
29149: LD_INT 8
29151: PUSH
29152: LD_INT 9
29154: PUSH
29155: LD_INT 10
29157: PUSH
29158: LD_INT 11
29160: PUSH
29161: LD_INT 12
29163: PUSH
29164: LD_INT 13
29166: PUSH
29167: LD_INT 16
29169: PUSH
29170: LD_INT 17
29172: PUSH
29173: LD_INT 18
29175: PUSH
29176: LD_INT 19
29178: PUSH
29179: LD_INT 20
29181: PUSH
29182: LD_INT 21
29184: PUSH
29185: EMPTY
29186: LIST
29187: LIST
29188: LIST
29189: LIST
29190: LIST
29191: LIST
29192: LIST
29193: LIST
29194: LIST
29195: LIST
29196: LIST
29197: LIST
29198: LIST
29199: IN
29200: NOT
29201: OR
29202: PUSH
29203: LD_VAR 0 8
29207: PUSH
29208: LD_INT 5
29210: ARRAY
29211: NOT
29212: OR
29213: PUSH
29214: LD_VAR 0 8
29218: PUSH
29219: LD_INT 6
29221: ARRAY
29222: PUSH
29223: LD_INT 1
29225: PUSH
29226: LD_INT 2
29228: PUSH
29229: LD_INT 7
29231: PUSH
29232: LD_INT 9
29234: PUSH
29235: LD_INT 10
29237: PUSH
29238: LD_INT 11
29240: PUSH
29241: EMPTY
29242: LIST
29243: LIST
29244: LIST
29245: LIST
29246: LIST
29247: LIST
29248: IN
29249: NOT
29250: OR
29251: IFFALSE 29257
// exit ;
29253: POP
29254: POP
29255: GO 29355
// end ;
29257: GO 28928
29259: POP
29260: POP
// side := GetSide ( depot ) ;
29261: LD_ADDR_VAR 0 9
29265: PUSH
29266: LD_VAR 0 1
29270: PPUSH
29271: CALL_OW 255
29275: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
29276: LD_VAR 0 9
29280: PPUSH
29281: LD_VAR 0 3
29285: PPUSH
29286: LD_VAR 0 4
29290: PPUSH
29291: LD_INT 20
29293: PPUSH
29294: CALL 22009 0 4
29298: PUSH
29299: LD_INT 4
29301: ARRAY
29302: IFFALSE 29306
// exit ;
29304: GO 29355
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
29306: LD_VAR 0 2
29310: PUSH
29311: LD_INT 29
29313: PUSH
29314: LD_INT 30
29316: PUSH
29317: EMPTY
29318: LIST
29319: LIST
29320: IN
29321: PUSH
29322: LD_VAR 0 3
29326: PPUSH
29327: LD_VAR 0 4
29331: PPUSH
29332: LD_VAR 0 9
29336: PPUSH
29337: CALL_OW 440
29341: NOT
29342: AND
29343: IFFALSE 29347
// exit ;
29345: GO 29355
// result := true ;
29347: LD_ADDR_VAR 0 6
29351: PUSH
29352: LD_INT 1
29354: ST_TO_ADDR
// end ;
29355: LD_VAR 0 6
29359: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 , DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 , DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ; var Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 , Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ; var Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 , ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ; var Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 , Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ; begin
29360: LD_INT 0
29362: PPUSH
29363: PPUSH
29364: PPUSH
29365: PPUSH
29366: PPUSH
29367: PPUSH
29368: PPUSH
29369: PPUSH
29370: PPUSH
29371: PPUSH
29372: PPUSH
29373: PPUSH
29374: PPUSH
29375: PPUSH
29376: PPUSH
29377: PPUSH
29378: PPUSH
29379: PPUSH
29380: PPUSH
29381: PPUSH
29382: PPUSH
29383: PPUSH
29384: PPUSH
29385: PPUSH
29386: PPUSH
29387: PPUSH
29388: PPUSH
29389: PPUSH
29390: PPUSH
29391: PPUSH
29392: PPUSH
29393: PPUSH
29394: PPUSH
29395: PPUSH
29396: PPUSH
29397: PPUSH
29398: PPUSH
29399: PPUSH
29400: PPUSH
29401: PPUSH
29402: PPUSH
29403: PPUSH
29404: PPUSH
29405: PPUSH
29406: PPUSH
29407: PPUSH
29408: PPUSH
29409: PPUSH
29410: PPUSH
29411: PPUSH
29412: PPUSH
29413: PPUSH
29414: PPUSH
29415: PPUSH
29416: PPUSH
29417: PPUSH
29418: PPUSH
29419: PPUSH
// result = [ ] ;
29420: LD_ADDR_VAR 0 7
29424: PUSH
29425: EMPTY
29426: ST_TO_ADDR
// temp_list = [ ] ;
29427: LD_ADDR_VAR 0 9
29431: PUSH
29432: EMPTY
29433: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
29434: LD_VAR 0 4
29438: PUSH
29439: LD_INT 0
29441: PUSH
29442: LD_INT 1
29444: PUSH
29445: LD_INT 2
29447: PUSH
29448: LD_INT 3
29450: PUSH
29451: LD_INT 4
29453: PUSH
29454: LD_INT 5
29456: PUSH
29457: EMPTY
29458: LIST
29459: LIST
29460: LIST
29461: LIST
29462: LIST
29463: LIST
29464: IN
29465: NOT
29466: PUSH
29467: LD_VAR 0 1
29471: PUSH
29472: LD_INT 0
29474: PUSH
29475: LD_INT 1
29477: PUSH
29478: EMPTY
29479: LIST
29480: LIST
29481: IN
29482: PUSH
29483: LD_VAR 0 5
29487: PUSH
29488: LD_INT 1
29490: PUSH
29491: LD_INT 2
29493: PUSH
29494: LD_INT 3
29496: PUSH
29497: EMPTY
29498: LIST
29499: LIST
29500: LIST
29501: IN
29502: NOT
29503: AND
29504: OR
29505: IFFALSE 29509
// exit ;
29507: GO 47900
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
29509: LD_VAR 0 1
29513: PUSH
29514: LD_INT 6
29516: PUSH
29517: LD_INT 7
29519: PUSH
29520: LD_INT 8
29522: PUSH
29523: LD_INT 13
29525: PUSH
29526: LD_INT 12
29528: PUSH
29529: LD_INT 15
29531: PUSH
29532: LD_INT 11
29534: PUSH
29535: LD_INT 14
29537: PUSH
29538: LD_INT 10
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: LIST
29545: LIST
29546: LIST
29547: LIST
29548: LIST
29549: LIST
29550: LIST
29551: IN
29552: IFFALSE 29562
// btype = b_lab ;
29554: LD_ADDR_VAR 0 1
29558: PUSH
29559: LD_INT 6
29561: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
29562: LD_VAR 0 6
29566: PUSH
29567: LD_INT 0
29569: PUSH
29570: LD_INT 1
29572: PUSH
29573: LD_INT 2
29575: PUSH
29576: EMPTY
29577: LIST
29578: LIST
29579: LIST
29580: IN
29581: NOT
29582: PUSH
29583: LD_VAR 0 1
29587: PUSH
29588: LD_INT 0
29590: PUSH
29591: LD_INT 1
29593: PUSH
29594: LD_INT 2
29596: PUSH
29597: LD_INT 3
29599: PUSH
29600: LD_INT 6
29602: PUSH
29603: LD_INT 36
29605: PUSH
29606: LD_INT 4
29608: PUSH
29609: LD_INT 5
29611: PUSH
29612: LD_INT 31
29614: PUSH
29615: LD_INT 32
29617: PUSH
29618: LD_INT 33
29620: PUSH
29621: EMPTY
29622: LIST
29623: LIST
29624: LIST
29625: LIST
29626: LIST
29627: LIST
29628: LIST
29629: LIST
29630: LIST
29631: LIST
29632: LIST
29633: IN
29634: NOT
29635: PUSH
29636: LD_VAR 0 6
29640: PUSH
29641: LD_INT 1
29643: EQUAL
29644: AND
29645: OR
29646: PUSH
29647: LD_VAR 0 1
29651: PUSH
29652: LD_INT 2
29654: PUSH
29655: LD_INT 3
29657: PUSH
29658: EMPTY
29659: LIST
29660: LIST
29661: IN
29662: NOT
29663: PUSH
29664: LD_VAR 0 6
29668: PUSH
29669: LD_INT 2
29671: EQUAL
29672: AND
29673: OR
29674: IFFALSE 29684
// mode = 0 ;
29676: LD_ADDR_VAR 0 6
29680: PUSH
29681: LD_INT 0
29683: ST_TO_ADDR
// case mode of 0 :
29684: LD_VAR 0 6
29688: PUSH
29689: LD_INT 0
29691: DOUBLE
29692: EQUAL
29693: IFTRUE 29697
29695: GO 41150
29697: POP
// begin DepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
29698: LD_ADDR_VAR 0 11
29702: PUSH
29703: LD_INT 0
29705: PUSH
29706: LD_INT 0
29708: PUSH
29709: EMPTY
29710: LIST
29711: LIST
29712: PUSH
29713: LD_INT 0
29715: PUSH
29716: LD_INT 1
29718: NEG
29719: PUSH
29720: EMPTY
29721: LIST
29722: LIST
29723: PUSH
29724: LD_INT 1
29726: PUSH
29727: LD_INT 0
29729: PUSH
29730: EMPTY
29731: LIST
29732: LIST
29733: PUSH
29734: LD_INT 1
29736: PUSH
29737: LD_INT 1
29739: PUSH
29740: EMPTY
29741: LIST
29742: LIST
29743: PUSH
29744: LD_INT 0
29746: PUSH
29747: LD_INT 1
29749: PUSH
29750: EMPTY
29751: LIST
29752: LIST
29753: PUSH
29754: LD_INT 1
29756: NEG
29757: PUSH
29758: LD_INT 0
29760: PUSH
29761: EMPTY
29762: LIST
29763: LIST
29764: PUSH
29765: LD_INT 1
29767: NEG
29768: PUSH
29769: LD_INT 1
29771: NEG
29772: PUSH
29773: EMPTY
29774: LIST
29775: LIST
29776: PUSH
29777: LD_INT 1
29779: NEG
29780: PUSH
29781: LD_INT 2
29783: NEG
29784: PUSH
29785: EMPTY
29786: LIST
29787: LIST
29788: PUSH
29789: LD_INT 0
29791: PUSH
29792: LD_INT 2
29794: NEG
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: PUSH
29800: LD_INT 1
29802: PUSH
29803: LD_INT 1
29805: NEG
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PUSH
29811: LD_INT 1
29813: PUSH
29814: LD_INT 2
29816: PUSH
29817: EMPTY
29818: LIST
29819: LIST
29820: PUSH
29821: LD_INT 0
29823: PUSH
29824: LD_INT 2
29826: PUSH
29827: EMPTY
29828: LIST
29829: LIST
29830: PUSH
29831: LD_INT 1
29833: NEG
29834: PUSH
29835: LD_INT 1
29837: PUSH
29838: EMPTY
29839: LIST
29840: LIST
29841: PUSH
29842: LD_INT 1
29844: PUSH
29845: LD_INT 3
29847: PUSH
29848: EMPTY
29849: LIST
29850: LIST
29851: PUSH
29852: LD_INT 0
29854: PUSH
29855: LD_INT 3
29857: PUSH
29858: EMPTY
29859: LIST
29860: LIST
29861: PUSH
29862: LD_INT 1
29864: NEG
29865: PUSH
29866: LD_INT 2
29868: PUSH
29869: EMPTY
29870: LIST
29871: LIST
29872: PUSH
29873: EMPTY
29874: LIST
29875: LIST
29876: LIST
29877: LIST
29878: LIST
29879: LIST
29880: LIST
29881: LIST
29882: LIST
29883: LIST
29884: LIST
29885: LIST
29886: LIST
29887: LIST
29888: LIST
29889: LIST
29890: ST_TO_ADDR
// DepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
29891: LD_ADDR_VAR 0 12
29895: PUSH
29896: LD_INT 0
29898: PUSH
29899: LD_INT 0
29901: PUSH
29902: EMPTY
29903: LIST
29904: LIST
29905: PUSH
29906: LD_INT 0
29908: PUSH
29909: LD_INT 1
29911: NEG
29912: PUSH
29913: EMPTY
29914: LIST
29915: LIST
29916: PUSH
29917: LD_INT 1
29919: PUSH
29920: LD_INT 0
29922: PUSH
29923: EMPTY
29924: LIST
29925: LIST
29926: PUSH
29927: LD_INT 1
29929: PUSH
29930: LD_INT 1
29932: PUSH
29933: EMPTY
29934: LIST
29935: LIST
29936: PUSH
29937: LD_INT 0
29939: PUSH
29940: LD_INT 1
29942: PUSH
29943: EMPTY
29944: LIST
29945: LIST
29946: PUSH
29947: LD_INT 1
29949: NEG
29950: PUSH
29951: LD_INT 0
29953: PUSH
29954: EMPTY
29955: LIST
29956: LIST
29957: PUSH
29958: LD_INT 1
29960: NEG
29961: PUSH
29962: LD_INT 1
29964: NEG
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: PUSH
29970: LD_INT 1
29972: PUSH
29973: LD_INT 1
29975: NEG
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PUSH
29981: LD_INT 2
29983: PUSH
29984: LD_INT 0
29986: PUSH
29987: EMPTY
29988: LIST
29989: LIST
29990: PUSH
29991: LD_INT 2
29993: PUSH
29994: LD_INT 1
29996: PUSH
29997: EMPTY
29998: LIST
29999: LIST
30000: PUSH
30001: LD_INT 1
30003: NEG
30004: PUSH
30005: LD_INT 1
30007: PUSH
30008: EMPTY
30009: LIST
30010: LIST
30011: PUSH
30012: LD_INT 2
30014: NEG
30015: PUSH
30016: LD_INT 0
30018: PUSH
30019: EMPTY
30020: LIST
30021: LIST
30022: PUSH
30023: LD_INT 2
30025: NEG
30026: PUSH
30027: LD_INT 1
30029: NEG
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PUSH
30035: LD_INT 2
30037: NEG
30038: PUSH
30039: LD_INT 1
30041: PUSH
30042: EMPTY
30043: LIST
30044: LIST
30045: PUSH
30046: LD_INT 3
30048: NEG
30049: PUSH
30050: LD_INT 0
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: PUSH
30057: LD_INT 3
30059: NEG
30060: PUSH
30061: LD_INT 1
30063: NEG
30064: PUSH
30065: EMPTY
30066: LIST
30067: LIST
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: LIST
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: LIST
30078: LIST
30079: LIST
30080: LIST
30081: LIST
30082: LIST
30083: LIST
30084: LIST
30085: LIST
30086: ST_TO_ADDR
// DepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30087: LD_ADDR_VAR 0 13
30091: PUSH
30092: LD_INT 0
30094: PUSH
30095: LD_INT 0
30097: PUSH
30098: EMPTY
30099: LIST
30100: LIST
30101: PUSH
30102: LD_INT 0
30104: PUSH
30105: LD_INT 1
30107: NEG
30108: PUSH
30109: EMPTY
30110: LIST
30111: LIST
30112: PUSH
30113: LD_INT 1
30115: PUSH
30116: LD_INT 0
30118: PUSH
30119: EMPTY
30120: LIST
30121: LIST
30122: PUSH
30123: LD_INT 1
30125: PUSH
30126: LD_INT 1
30128: PUSH
30129: EMPTY
30130: LIST
30131: LIST
30132: PUSH
30133: LD_INT 0
30135: PUSH
30136: LD_INT 1
30138: PUSH
30139: EMPTY
30140: LIST
30141: LIST
30142: PUSH
30143: LD_INT 1
30145: NEG
30146: PUSH
30147: LD_INT 0
30149: PUSH
30150: EMPTY
30151: LIST
30152: LIST
30153: PUSH
30154: LD_INT 1
30156: NEG
30157: PUSH
30158: LD_INT 1
30160: NEG
30161: PUSH
30162: EMPTY
30163: LIST
30164: LIST
30165: PUSH
30166: LD_INT 1
30168: NEG
30169: PUSH
30170: LD_INT 2
30172: NEG
30173: PUSH
30174: EMPTY
30175: LIST
30176: LIST
30177: PUSH
30178: LD_INT 2
30180: PUSH
30181: LD_INT 1
30183: PUSH
30184: EMPTY
30185: LIST
30186: LIST
30187: PUSH
30188: LD_INT 2
30190: PUSH
30191: LD_INT 2
30193: PUSH
30194: EMPTY
30195: LIST
30196: LIST
30197: PUSH
30198: LD_INT 1
30200: PUSH
30201: LD_INT 2
30203: PUSH
30204: EMPTY
30205: LIST
30206: LIST
30207: PUSH
30208: LD_INT 2
30210: NEG
30211: PUSH
30212: LD_INT 1
30214: NEG
30215: PUSH
30216: EMPTY
30217: LIST
30218: LIST
30219: PUSH
30220: LD_INT 2
30222: NEG
30223: PUSH
30224: LD_INT 2
30226: NEG
30227: PUSH
30228: EMPTY
30229: LIST
30230: LIST
30231: PUSH
30232: LD_INT 2
30234: NEG
30235: PUSH
30236: LD_INT 3
30238: NEG
30239: PUSH
30240: EMPTY
30241: LIST
30242: LIST
30243: PUSH
30244: LD_INT 3
30246: NEG
30247: PUSH
30248: LD_INT 2
30250: NEG
30251: PUSH
30252: EMPTY
30253: LIST
30254: LIST
30255: PUSH
30256: LD_INT 3
30258: NEG
30259: PUSH
30260: LD_INT 3
30262: NEG
30263: PUSH
30264: EMPTY
30265: LIST
30266: LIST
30267: PUSH
30268: EMPTY
30269: LIST
30270: LIST
30271: LIST
30272: LIST
30273: LIST
30274: LIST
30275: LIST
30276: LIST
30277: LIST
30278: LIST
30279: LIST
30280: LIST
30281: LIST
30282: LIST
30283: LIST
30284: LIST
30285: ST_TO_ADDR
// DepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
30286: LD_ADDR_VAR 0 14
30290: PUSH
30291: LD_INT 0
30293: PUSH
30294: LD_INT 0
30296: PUSH
30297: EMPTY
30298: LIST
30299: LIST
30300: PUSH
30301: LD_INT 0
30303: PUSH
30304: LD_INT 1
30306: NEG
30307: PUSH
30308: EMPTY
30309: LIST
30310: LIST
30311: PUSH
30312: LD_INT 1
30314: PUSH
30315: LD_INT 0
30317: PUSH
30318: EMPTY
30319: LIST
30320: LIST
30321: PUSH
30322: LD_INT 1
30324: PUSH
30325: LD_INT 1
30327: PUSH
30328: EMPTY
30329: LIST
30330: LIST
30331: PUSH
30332: LD_INT 0
30334: PUSH
30335: LD_INT 1
30337: PUSH
30338: EMPTY
30339: LIST
30340: LIST
30341: PUSH
30342: LD_INT 1
30344: NEG
30345: PUSH
30346: LD_INT 0
30348: PUSH
30349: EMPTY
30350: LIST
30351: LIST
30352: PUSH
30353: LD_INT 1
30355: NEG
30356: PUSH
30357: LD_INT 1
30359: NEG
30360: PUSH
30361: EMPTY
30362: LIST
30363: LIST
30364: PUSH
30365: LD_INT 1
30367: NEG
30368: PUSH
30369: LD_INT 2
30371: NEG
30372: PUSH
30373: EMPTY
30374: LIST
30375: LIST
30376: PUSH
30377: LD_INT 0
30379: PUSH
30380: LD_INT 2
30382: NEG
30383: PUSH
30384: EMPTY
30385: LIST
30386: LIST
30387: PUSH
30388: LD_INT 1
30390: PUSH
30391: LD_INT 1
30393: NEG
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: LD_INT 1
30401: PUSH
30402: LD_INT 2
30404: PUSH
30405: EMPTY
30406: LIST
30407: LIST
30408: PUSH
30409: LD_INT 0
30411: PUSH
30412: LD_INT 2
30414: PUSH
30415: EMPTY
30416: LIST
30417: LIST
30418: PUSH
30419: LD_INT 1
30421: NEG
30422: PUSH
30423: LD_INT 1
30425: PUSH
30426: EMPTY
30427: LIST
30428: LIST
30429: PUSH
30430: LD_INT 1
30432: NEG
30433: PUSH
30434: LD_INT 3
30436: NEG
30437: PUSH
30438: EMPTY
30439: LIST
30440: LIST
30441: PUSH
30442: LD_INT 0
30444: PUSH
30445: LD_INT 3
30447: NEG
30448: PUSH
30449: EMPTY
30450: LIST
30451: LIST
30452: PUSH
30453: LD_INT 1
30455: PUSH
30456: LD_INT 2
30458: NEG
30459: PUSH
30460: EMPTY
30461: LIST
30462: LIST
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: LIST
30468: LIST
30469: LIST
30470: LIST
30471: LIST
30472: LIST
30473: LIST
30474: LIST
30475: LIST
30476: LIST
30477: LIST
30478: LIST
30479: LIST
30480: LIST
30481: ST_TO_ADDR
// DepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
30482: LD_ADDR_VAR 0 15
30486: PUSH
30487: LD_INT 0
30489: PUSH
30490: LD_INT 0
30492: PUSH
30493: EMPTY
30494: LIST
30495: LIST
30496: PUSH
30497: LD_INT 0
30499: PUSH
30500: LD_INT 1
30502: NEG
30503: PUSH
30504: EMPTY
30505: LIST
30506: LIST
30507: PUSH
30508: LD_INT 1
30510: PUSH
30511: LD_INT 0
30513: PUSH
30514: EMPTY
30515: LIST
30516: LIST
30517: PUSH
30518: LD_INT 1
30520: PUSH
30521: LD_INT 1
30523: PUSH
30524: EMPTY
30525: LIST
30526: LIST
30527: PUSH
30528: LD_INT 0
30530: PUSH
30531: LD_INT 1
30533: PUSH
30534: EMPTY
30535: LIST
30536: LIST
30537: PUSH
30538: LD_INT 1
30540: NEG
30541: PUSH
30542: LD_INT 0
30544: PUSH
30545: EMPTY
30546: LIST
30547: LIST
30548: PUSH
30549: LD_INT 1
30551: NEG
30552: PUSH
30553: LD_INT 1
30555: NEG
30556: PUSH
30557: EMPTY
30558: LIST
30559: LIST
30560: PUSH
30561: LD_INT 1
30563: PUSH
30564: LD_INT 1
30566: NEG
30567: PUSH
30568: EMPTY
30569: LIST
30570: LIST
30571: PUSH
30572: LD_INT 2
30574: PUSH
30575: LD_INT 0
30577: PUSH
30578: EMPTY
30579: LIST
30580: LIST
30581: PUSH
30582: LD_INT 2
30584: PUSH
30585: LD_INT 1
30587: PUSH
30588: EMPTY
30589: LIST
30590: LIST
30591: PUSH
30592: LD_INT 1
30594: NEG
30595: PUSH
30596: LD_INT 1
30598: PUSH
30599: EMPTY
30600: LIST
30601: LIST
30602: PUSH
30603: LD_INT 2
30605: NEG
30606: PUSH
30607: LD_INT 0
30609: PUSH
30610: EMPTY
30611: LIST
30612: LIST
30613: PUSH
30614: LD_INT 2
30616: NEG
30617: PUSH
30618: LD_INT 1
30620: NEG
30621: PUSH
30622: EMPTY
30623: LIST
30624: LIST
30625: PUSH
30626: LD_INT 2
30628: PUSH
30629: LD_INT 1
30631: NEG
30632: PUSH
30633: EMPTY
30634: LIST
30635: LIST
30636: PUSH
30637: LD_INT 3
30639: PUSH
30640: LD_INT 0
30642: PUSH
30643: EMPTY
30644: LIST
30645: LIST
30646: PUSH
30647: LD_INT 3
30649: PUSH
30650: LD_INT 1
30652: PUSH
30653: EMPTY
30654: LIST
30655: LIST
30656: PUSH
30657: EMPTY
30658: LIST
30659: LIST
30660: LIST
30661: LIST
30662: LIST
30663: LIST
30664: LIST
30665: LIST
30666: LIST
30667: LIST
30668: LIST
30669: LIST
30670: LIST
30671: LIST
30672: LIST
30673: LIST
30674: ST_TO_ADDR
// DepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
30675: LD_ADDR_VAR 0 16
30679: PUSH
30680: LD_INT 0
30682: PUSH
30683: LD_INT 0
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: PUSH
30690: LD_INT 0
30692: PUSH
30693: LD_INT 1
30695: NEG
30696: PUSH
30697: EMPTY
30698: LIST
30699: LIST
30700: PUSH
30701: LD_INT 1
30703: PUSH
30704: LD_INT 0
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: PUSH
30711: LD_INT 1
30713: PUSH
30714: LD_INT 1
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: PUSH
30721: LD_INT 0
30723: PUSH
30724: LD_INT 1
30726: PUSH
30727: EMPTY
30728: LIST
30729: LIST
30730: PUSH
30731: LD_INT 1
30733: NEG
30734: PUSH
30735: LD_INT 0
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PUSH
30742: LD_INT 1
30744: NEG
30745: PUSH
30746: LD_INT 1
30748: NEG
30749: PUSH
30750: EMPTY
30751: LIST
30752: LIST
30753: PUSH
30754: LD_INT 1
30756: NEG
30757: PUSH
30758: LD_INT 2
30760: NEG
30761: PUSH
30762: EMPTY
30763: LIST
30764: LIST
30765: PUSH
30766: LD_INT 2
30768: PUSH
30769: LD_INT 1
30771: PUSH
30772: EMPTY
30773: LIST
30774: LIST
30775: PUSH
30776: LD_INT 2
30778: PUSH
30779: LD_INT 2
30781: PUSH
30782: EMPTY
30783: LIST
30784: LIST
30785: PUSH
30786: LD_INT 1
30788: PUSH
30789: LD_INT 2
30791: PUSH
30792: EMPTY
30793: LIST
30794: LIST
30795: PUSH
30796: LD_INT 2
30798: NEG
30799: PUSH
30800: LD_INT 1
30802: NEG
30803: PUSH
30804: EMPTY
30805: LIST
30806: LIST
30807: PUSH
30808: LD_INT 2
30810: NEG
30811: PUSH
30812: LD_INT 2
30814: NEG
30815: PUSH
30816: EMPTY
30817: LIST
30818: LIST
30819: PUSH
30820: LD_INT 3
30822: PUSH
30823: LD_INT 2
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PUSH
30830: LD_INT 3
30832: PUSH
30833: LD_INT 3
30835: PUSH
30836: EMPTY
30837: LIST
30838: LIST
30839: PUSH
30840: LD_INT 2
30842: PUSH
30843: LD_INT 3
30845: PUSH
30846: EMPTY
30847: LIST
30848: LIST
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: LIST
30854: LIST
30855: LIST
30856: LIST
30857: LIST
30858: LIST
30859: LIST
30860: LIST
30861: LIST
30862: LIST
30863: LIST
30864: LIST
30865: LIST
30866: LIST
30867: ST_TO_ADDR
// DepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
30868: LD_ADDR_VAR 0 17
30872: PUSH
30873: LD_INT 0
30875: PUSH
30876: LD_INT 0
30878: PUSH
30879: EMPTY
30880: LIST
30881: LIST
30882: PUSH
30883: LD_INT 0
30885: PUSH
30886: LD_INT 1
30888: NEG
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: PUSH
30894: LD_INT 1
30896: PUSH
30897: LD_INT 0
30899: PUSH
30900: EMPTY
30901: LIST
30902: LIST
30903: PUSH
30904: LD_INT 1
30906: PUSH
30907: LD_INT 1
30909: PUSH
30910: EMPTY
30911: LIST
30912: LIST
30913: PUSH
30914: LD_INT 0
30916: PUSH
30917: LD_INT 1
30919: PUSH
30920: EMPTY
30921: LIST
30922: LIST
30923: PUSH
30924: LD_INT 1
30926: NEG
30927: PUSH
30928: LD_INT 0
30930: PUSH
30931: EMPTY
30932: LIST
30933: LIST
30934: PUSH
30935: LD_INT 1
30937: NEG
30938: PUSH
30939: LD_INT 1
30941: NEG
30942: PUSH
30943: EMPTY
30944: LIST
30945: LIST
30946: PUSH
30947: LD_INT 1
30949: NEG
30950: PUSH
30951: LD_INT 2
30953: NEG
30954: PUSH
30955: EMPTY
30956: LIST
30957: LIST
30958: PUSH
30959: LD_INT 0
30961: PUSH
30962: LD_INT 2
30964: NEG
30965: PUSH
30966: EMPTY
30967: LIST
30968: LIST
30969: PUSH
30970: LD_INT 1
30972: PUSH
30973: LD_INT 1
30975: NEG
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PUSH
30981: LD_INT 2
30983: PUSH
30984: LD_INT 0
30986: PUSH
30987: EMPTY
30988: LIST
30989: LIST
30990: PUSH
30991: LD_INT 2
30993: PUSH
30994: LD_INT 1
30996: PUSH
30997: EMPTY
30998: LIST
30999: LIST
31000: PUSH
31001: LD_INT 2
31003: PUSH
31004: LD_INT 2
31006: PUSH
31007: EMPTY
31008: LIST
31009: LIST
31010: PUSH
31011: LD_INT 1
31013: PUSH
31014: LD_INT 2
31016: PUSH
31017: EMPTY
31018: LIST
31019: LIST
31020: PUSH
31021: LD_INT 0
31023: PUSH
31024: LD_INT 2
31026: PUSH
31027: EMPTY
31028: LIST
31029: LIST
31030: PUSH
31031: LD_INT 1
31033: NEG
31034: PUSH
31035: LD_INT 1
31037: PUSH
31038: EMPTY
31039: LIST
31040: LIST
31041: PUSH
31042: LD_INT 2
31044: NEG
31045: PUSH
31046: LD_INT 0
31048: PUSH
31049: EMPTY
31050: LIST
31051: LIST
31052: PUSH
31053: LD_INT 2
31055: NEG
31056: PUSH
31057: LD_INT 1
31059: NEG
31060: PUSH
31061: EMPTY
31062: LIST
31063: LIST
31064: PUSH
31065: LD_INT 2
31067: NEG
31068: PUSH
31069: LD_INT 2
31071: NEG
31072: PUSH
31073: EMPTY
31074: LIST
31075: LIST
31076: PUSH
31077: EMPTY
31078: LIST
31079: LIST
31080: LIST
31081: LIST
31082: LIST
31083: LIST
31084: LIST
31085: LIST
31086: LIST
31087: LIST
31088: LIST
31089: LIST
31090: LIST
31091: LIST
31092: LIST
31093: LIST
31094: LIST
31095: LIST
31096: LIST
31097: ST_TO_ADDR
// DepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31098: LD_ADDR_VAR 0 18
31102: PUSH
31103: LD_INT 0
31105: PUSH
31106: LD_INT 0
31108: PUSH
31109: EMPTY
31110: LIST
31111: LIST
31112: PUSH
31113: LD_INT 0
31115: PUSH
31116: LD_INT 1
31118: NEG
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: PUSH
31124: LD_INT 1
31126: PUSH
31127: LD_INT 0
31129: PUSH
31130: EMPTY
31131: LIST
31132: LIST
31133: PUSH
31134: LD_INT 1
31136: PUSH
31137: LD_INT 1
31139: PUSH
31140: EMPTY
31141: LIST
31142: LIST
31143: PUSH
31144: LD_INT 0
31146: PUSH
31147: LD_INT 1
31149: PUSH
31150: EMPTY
31151: LIST
31152: LIST
31153: PUSH
31154: LD_INT 1
31156: NEG
31157: PUSH
31158: LD_INT 0
31160: PUSH
31161: EMPTY
31162: LIST
31163: LIST
31164: PUSH
31165: LD_INT 1
31167: NEG
31168: PUSH
31169: LD_INT 1
31171: NEG
31172: PUSH
31173: EMPTY
31174: LIST
31175: LIST
31176: PUSH
31177: LD_INT 1
31179: NEG
31180: PUSH
31181: LD_INT 2
31183: NEG
31184: PUSH
31185: EMPTY
31186: LIST
31187: LIST
31188: PUSH
31189: LD_INT 0
31191: PUSH
31192: LD_INT 2
31194: NEG
31195: PUSH
31196: EMPTY
31197: LIST
31198: LIST
31199: PUSH
31200: LD_INT 1
31202: PUSH
31203: LD_INT 1
31205: NEG
31206: PUSH
31207: EMPTY
31208: LIST
31209: LIST
31210: PUSH
31211: LD_INT 2
31213: PUSH
31214: LD_INT 0
31216: PUSH
31217: EMPTY
31218: LIST
31219: LIST
31220: PUSH
31221: LD_INT 2
31223: PUSH
31224: LD_INT 1
31226: PUSH
31227: EMPTY
31228: LIST
31229: LIST
31230: PUSH
31231: LD_INT 2
31233: PUSH
31234: LD_INT 2
31236: PUSH
31237: EMPTY
31238: LIST
31239: LIST
31240: PUSH
31241: LD_INT 1
31243: PUSH
31244: LD_INT 2
31246: PUSH
31247: EMPTY
31248: LIST
31249: LIST
31250: PUSH
31251: LD_INT 0
31253: PUSH
31254: LD_INT 2
31256: PUSH
31257: EMPTY
31258: LIST
31259: LIST
31260: PUSH
31261: LD_INT 1
31263: NEG
31264: PUSH
31265: LD_INT 1
31267: PUSH
31268: EMPTY
31269: LIST
31270: LIST
31271: PUSH
31272: LD_INT 2
31274: NEG
31275: PUSH
31276: LD_INT 0
31278: PUSH
31279: EMPTY
31280: LIST
31281: LIST
31282: PUSH
31283: LD_INT 2
31285: NEG
31286: PUSH
31287: LD_INT 1
31289: NEG
31290: PUSH
31291: EMPTY
31292: LIST
31293: LIST
31294: PUSH
31295: LD_INT 2
31297: NEG
31298: PUSH
31299: LD_INT 2
31301: NEG
31302: PUSH
31303: EMPTY
31304: LIST
31305: LIST
31306: PUSH
31307: EMPTY
31308: LIST
31309: LIST
31310: LIST
31311: LIST
31312: LIST
31313: LIST
31314: LIST
31315: LIST
31316: LIST
31317: LIST
31318: LIST
31319: LIST
31320: LIST
31321: LIST
31322: LIST
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: ST_TO_ADDR
// DepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31328: LD_ADDR_VAR 0 19
31332: PUSH
31333: LD_INT 0
31335: PUSH
31336: LD_INT 0
31338: PUSH
31339: EMPTY
31340: LIST
31341: LIST
31342: PUSH
31343: LD_INT 0
31345: PUSH
31346: LD_INT 1
31348: NEG
31349: PUSH
31350: EMPTY
31351: LIST
31352: LIST
31353: PUSH
31354: LD_INT 1
31356: PUSH
31357: LD_INT 0
31359: PUSH
31360: EMPTY
31361: LIST
31362: LIST
31363: PUSH
31364: LD_INT 1
31366: PUSH
31367: LD_INT 1
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PUSH
31374: LD_INT 0
31376: PUSH
31377: LD_INT 1
31379: PUSH
31380: EMPTY
31381: LIST
31382: LIST
31383: PUSH
31384: LD_INT 1
31386: NEG
31387: PUSH
31388: LD_INT 0
31390: PUSH
31391: EMPTY
31392: LIST
31393: LIST
31394: PUSH
31395: LD_INT 1
31397: NEG
31398: PUSH
31399: LD_INT 1
31401: NEG
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: PUSH
31407: LD_INT 1
31409: NEG
31410: PUSH
31411: LD_INT 2
31413: NEG
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: PUSH
31419: LD_INT 0
31421: PUSH
31422: LD_INT 2
31424: NEG
31425: PUSH
31426: EMPTY
31427: LIST
31428: LIST
31429: PUSH
31430: LD_INT 1
31432: PUSH
31433: LD_INT 1
31435: NEG
31436: PUSH
31437: EMPTY
31438: LIST
31439: LIST
31440: PUSH
31441: LD_INT 2
31443: PUSH
31444: LD_INT 0
31446: PUSH
31447: EMPTY
31448: LIST
31449: LIST
31450: PUSH
31451: LD_INT 2
31453: PUSH
31454: LD_INT 1
31456: PUSH
31457: EMPTY
31458: LIST
31459: LIST
31460: PUSH
31461: LD_INT 2
31463: PUSH
31464: LD_INT 2
31466: PUSH
31467: EMPTY
31468: LIST
31469: LIST
31470: PUSH
31471: LD_INT 1
31473: PUSH
31474: LD_INT 2
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: PUSH
31481: LD_INT 0
31483: PUSH
31484: LD_INT 2
31486: PUSH
31487: EMPTY
31488: LIST
31489: LIST
31490: PUSH
31491: LD_INT 1
31493: NEG
31494: PUSH
31495: LD_INT 1
31497: PUSH
31498: EMPTY
31499: LIST
31500: LIST
31501: PUSH
31502: LD_INT 2
31504: NEG
31505: PUSH
31506: LD_INT 0
31508: PUSH
31509: EMPTY
31510: LIST
31511: LIST
31512: PUSH
31513: LD_INT 2
31515: NEG
31516: PUSH
31517: LD_INT 1
31519: NEG
31520: PUSH
31521: EMPTY
31522: LIST
31523: LIST
31524: PUSH
31525: LD_INT 2
31527: NEG
31528: PUSH
31529: LD_INT 2
31531: NEG
31532: PUSH
31533: EMPTY
31534: LIST
31535: LIST
31536: PUSH
31537: EMPTY
31538: LIST
31539: LIST
31540: LIST
31541: LIST
31542: LIST
31543: LIST
31544: LIST
31545: LIST
31546: LIST
31547: LIST
31548: LIST
31549: LIST
31550: LIST
31551: LIST
31552: LIST
31553: LIST
31554: LIST
31555: LIST
31556: LIST
31557: ST_TO_ADDR
// DepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31558: LD_ADDR_VAR 0 20
31562: PUSH
31563: LD_INT 0
31565: PUSH
31566: LD_INT 0
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: PUSH
31573: LD_INT 0
31575: PUSH
31576: LD_INT 1
31578: NEG
31579: PUSH
31580: EMPTY
31581: LIST
31582: LIST
31583: PUSH
31584: LD_INT 1
31586: PUSH
31587: LD_INT 0
31589: PUSH
31590: EMPTY
31591: LIST
31592: LIST
31593: PUSH
31594: LD_INT 1
31596: PUSH
31597: LD_INT 1
31599: PUSH
31600: EMPTY
31601: LIST
31602: LIST
31603: PUSH
31604: LD_INT 0
31606: PUSH
31607: LD_INT 1
31609: PUSH
31610: EMPTY
31611: LIST
31612: LIST
31613: PUSH
31614: LD_INT 1
31616: NEG
31617: PUSH
31618: LD_INT 0
31620: PUSH
31621: EMPTY
31622: LIST
31623: LIST
31624: PUSH
31625: LD_INT 1
31627: NEG
31628: PUSH
31629: LD_INT 1
31631: NEG
31632: PUSH
31633: EMPTY
31634: LIST
31635: LIST
31636: PUSH
31637: LD_INT 1
31639: NEG
31640: PUSH
31641: LD_INT 2
31643: NEG
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: LD_INT 0
31651: PUSH
31652: LD_INT 2
31654: NEG
31655: PUSH
31656: EMPTY
31657: LIST
31658: LIST
31659: PUSH
31660: LD_INT 1
31662: PUSH
31663: LD_INT 1
31665: NEG
31666: PUSH
31667: EMPTY
31668: LIST
31669: LIST
31670: PUSH
31671: LD_INT 2
31673: PUSH
31674: LD_INT 0
31676: PUSH
31677: EMPTY
31678: LIST
31679: LIST
31680: PUSH
31681: LD_INT 2
31683: PUSH
31684: LD_INT 1
31686: PUSH
31687: EMPTY
31688: LIST
31689: LIST
31690: PUSH
31691: LD_INT 2
31693: PUSH
31694: LD_INT 2
31696: PUSH
31697: EMPTY
31698: LIST
31699: LIST
31700: PUSH
31701: LD_INT 1
31703: PUSH
31704: LD_INT 2
31706: PUSH
31707: EMPTY
31708: LIST
31709: LIST
31710: PUSH
31711: LD_INT 0
31713: PUSH
31714: LD_INT 2
31716: PUSH
31717: EMPTY
31718: LIST
31719: LIST
31720: PUSH
31721: LD_INT 1
31723: NEG
31724: PUSH
31725: LD_INT 1
31727: PUSH
31728: EMPTY
31729: LIST
31730: LIST
31731: PUSH
31732: LD_INT 2
31734: NEG
31735: PUSH
31736: LD_INT 0
31738: PUSH
31739: EMPTY
31740: LIST
31741: LIST
31742: PUSH
31743: LD_INT 2
31745: NEG
31746: PUSH
31747: LD_INT 1
31749: NEG
31750: PUSH
31751: EMPTY
31752: LIST
31753: LIST
31754: PUSH
31755: LD_INT 2
31757: NEG
31758: PUSH
31759: LD_INT 2
31761: NEG
31762: PUSH
31763: EMPTY
31764: LIST
31765: LIST
31766: PUSH
31767: EMPTY
31768: LIST
31769: LIST
31770: LIST
31771: LIST
31772: LIST
31773: LIST
31774: LIST
31775: LIST
31776: LIST
31777: LIST
31778: LIST
31779: LIST
31780: LIST
31781: LIST
31782: LIST
31783: LIST
31784: LIST
31785: LIST
31786: LIST
31787: ST_TO_ADDR
// DepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
31788: LD_ADDR_VAR 0 21
31792: PUSH
31793: LD_INT 0
31795: PUSH
31796: LD_INT 0
31798: PUSH
31799: EMPTY
31800: LIST
31801: LIST
31802: PUSH
31803: LD_INT 0
31805: PUSH
31806: LD_INT 1
31808: NEG
31809: PUSH
31810: EMPTY
31811: LIST
31812: LIST
31813: PUSH
31814: LD_INT 1
31816: PUSH
31817: LD_INT 0
31819: PUSH
31820: EMPTY
31821: LIST
31822: LIST
31823: PUSH
31824: LD_INT 1
31826: PUSH
31827: LD_INT 1
31829: PUSH
31830: EMPTY
31831: LIST
31832: LIST
31833: PUSH
31834: LD_INT 0
31836: PUSH
31837: LD_INT 1
31839: PUSH
31840: EMPTY
31841: LIST
31842: LIST
31843: PUSH
31844: LD_INT 1
31846: NEG
31847: PUSH
31848: LD_INT 0
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: PUSH
31855: LD_INT 1
31857: NEG
31858: PUSH
31859: LD_INT 1
31861: NEG
31862: PUSH
31863: EMPTY
31864: LIST
31865: LIST
31866: PUSH
31867: LD_INT 1
31869: NEG
31870: PUSH
31871: LD_INT 2
31873: NEG
31874: PUSH
31875: EMPTY
31876: LIST
31877: LIST
31878: PUSH
31879: LD_INT 0
31881: PUSH
31882: LD_INT 2
31884: NEG
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PUSH
31890: LD_INT 1
31892: PUSH
31893: LD_INT 1
31895: NEG
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: PUSH
31901: LD_INT 2
31903: PUSH
31904: LD_INT 0
31906: PUSH
31907: EMPTY
31908: LIST
31909: LIST
31910: PUSH
31911: LD_INT 2
31913: PUSH
31914: LD_INT 1
31916: PUSH
31917: EMPTY
31918: LIST
31919: LIST
31920: PUSH
31921: LD_INT 2
31923: PUSH
31924: LD_INT 2
31926: PUSH
31927: EMPTY
31928: LIST
31929: LIST
31930: PUSH
31931: LD_INT 1
31933: PUSH
31934: LD_INT 2
31936: PUSH
31937: EMPTY
31938: LIST
31939: LIST
31940: PUSH
31941: LD_INT 0
31943: PUSH
31944: LD_INT 2
31946: PUSH
31947: EMPTY
31948: LIST
31949: LIST
31950: PUSH
31951: LD_INT 1
31953: NEG
31954: PUSH
31955: LD_INT 1
31957: PUSH
31958: EMPTY
31959: LIST
31960: LIST
31961: PUSH
31962: LD_INT 2
31964: NEG
31965: PUSH
31966: LD_INT 0
31968: PUSH
31969: EMPTY
31970: LIST
31971: LIST
31972: PUSH
31973: LD_INT 2
31975: NEG
31976: PUSH
31977: LD_INT 1
31979: NEG
31980: PUSH
31981: EMPTY
31982: LIST
31983: LIST
31984: PUSH
31985: LD_INT 2
31987: NEG
31988: PUSH
31989: LD_INT 2
31991: NEG
31992: PUSH
31993: EMPTY
31994: LIST
31995: LIST
31996: PUSH
31997: EMPTY
31998: LIST
31999: LIST
32000: LIST
32001: LIST
32002: LIST
32003: LIST
32004: LIST
32005: LIST
32006: LIST
32007: LIST
32008: LIST
32009: LIST
32010: LIST
32011: LIST
32012: LIST
32013: LIST
32014: LIST
32015: LIST
32016: LIST
32017: ST_TO_ADDR
// DepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32018: LD_ADDR_VAR 0 22
32022: PUSH
32023: LD_INT 0
32025: PUSH
32026: LD_INT 0
32028: PUSH
32029: EMPTY
32030: LIST
32031: LIST
32032: PUSH
32033: LD_INT 0
32035: PUSH
32036: LD_INT 1
32038: NEG
32039: PUSH
32040: EMPTY
32041: LIST
32042: LIST
32043: PUSH
32044: LD_INT 1
32046: PUSH
32047: LD_INT 0
32049: PUSH
32050: EMPTY
32051: LIST
32052: LIST
32053: PUSH
32054: LD_INT 1
32056: PUSH
32057: LD_INT 1
32059: PUSH
32060: EMPTY
32061: LIST
32062: LIST
32063: PUSH
32064: LD_INT 0
32066: PUSH
32067: LD_INT 1
32069: PUSH
32070: EMPTY
32071: LIST
32072: LIST
32073: PUSH
32074: LD_INT 1
32076: NEG
32077: PUSH
32078: LD_INT 0
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: PUSH
32085: LD_INT 1
32087: NEG
32088: PUSH
32089: LD_INT 1
32091: NEG
32092: PUSH
32093: EMPTY
32094: LIST
32095: LIST
32096: PUSH
32097: LD_INT 1
32099: NEG
32100: PUSH
32101: LD_INT 2
32103: NEG
32104: PUSH
32105: EMPTY
32106: LIST
32107: LIST
32108: PUSH
32109: LD_INT 0
32111: PUSH
32112: LD_INT 2
32114: NEG
32115: PUSH
32116: EMPTY
32117: LIST
32118: LIST
32119: PUSH
32120: LD_INT 1
32122: PUSH
32123: LD_INT 1
32125: NEG
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: LD_INT 2
32133: PUSH
32134: LD_INT 0
32136: PUSH
32137: EMPTY
32138: LIST
32139: LIST
32140: PUSH
32141: LD_INT 2
32143: PUSH
32144: LD_INT 1
32146: PUSH
32147: EMPTY
32148: LIST
32149: LIST
32150: PUSH
32151: LD_INT 2
32153: PUSH
32154: LD_INT 2
32156: PUSH
32157: EMPTY
32158: LIST
32159: LIST
32160: PUSH
32161: LD_INT 1
32163: PUSH
32164: LD_INT 2
32166: PUSH
32167: EMPTY
32168: LIST
32169: LIST
32170: PUSH
32171: LD_INT 0
32173: PUSH
32174: LD_INT 2
32176: PUSH
32177: EMPTY
32178: LIST
32179: LIST
32180: PUSH
32181: LD_INT 1
32183: NEG
32184: PUSH
32185: LD_INT 1
32187: PUSH
32188: EMPTY
32189: LIST
32190: LIST
32191: PUSH
32192: LD_INT 2
32194: NEG
32195: PUSH
32196: LD_INT 0
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PUSH
32203: LD_INT 2
32205: NEG
32206: PUSH
32207: LD_INT 1
32209: NEG
32210: PUSH
32211: EMPTY
32212: LIST
32213: LIST
32214: PUSH
32215: LD_INT 2
32217: NEG
32218: PUSH
32219: LD_INT 2
32221: NEG
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: PUSH
32227: EMPTY
32228: LIST
32229: LIST
32230: LIST
32231: LIST
32232: LIST
32233: LIST
32234: LIST
32235: LIST
32236: LIST
32237: LIST
32238: LIST
32239: LIST
32240: LIST
32241: LIST
32242: LIST
32243: LIST
32244: LIST
32245: LIST
32246: LIST
32247: ST_TO_ADDR
// DepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
32248: LD_ADDR_VAR 0 23
32252: PUSH
32253: LD_INT 0
32255: PUSH
32256: LD_INT 0
32258: PUSH
32259: EMPTY
32260: LIST
32261: LIST
32262: PUSH
32263: LD_INT 0
32265: PUSH
32266: LD_INT 1
32268: NEG
32269: PUSH
32270: EMPTY
32271: LIST
32272: LIST
32273: PUSH
32274: LD_INT 1
32276: PUSH
32277: LD_INT 0
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PUSH
32284: LD_INT 1
32286: PUSH
32287: LD_INT 1
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: PUSH
32294: LD_INT 0
32296: PUSH
32297: LD_INT 1
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: PUSH
32304: LD_INT 1
32306: NEG
32307: PUSH
32308: LD_INT 0
32310: PUSH
32311: EMPTY
32312: LIST
32313: LIST
32314: PUSH
32315: LD_INT 1
32317: NEG
32318: PUSH
32319: LD_INT 1
32321: NEG
32322: PUSH
32323: EMPTY
32324: LIST
32325: LIST
32326: PUSH
32327: LD_INT 1
32329: NEG
32330: PUSH
32331: LD_INT 2
32333: NEG
32334: PUSH
32335: EMPTY
32336: LIST
32337: LIST
32338: PUSH
32339: LD_INT 0
32341: PUSH
32342: LD_INT 2
32344: NEG
32345: PUSH
32346: EMPTY
32347: LIST
32348: LIST
32349: PUSH
32350: LD_INT 1
32352: PUSH
32353: LD_INT 1
32355: NEG
32356: PUSH
32357: EMPTY
32358: LIST
32359: LIST
32360: PUSH
32361: LD_INT 2
32363: PUSH
32364: LD_INT 0
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: PUSH
32371: LD_INT 2
32373: PUSH
32374: LD_INT 1
32376: PUSH
32377: EMPTY
32378: LIST
32379: LIST
32380: PUSH
32381: LD_INT 2
32383: PUSH
32384: LD_INT 2
32386: PUSH
32387: EMPTY
32388: LIST
32389: LIST
32390: PUSH
32391: LD_INT 1
32393: PUSH
32394: LD_INT 2
32396: PUSH
32397: EMPTY
32398: LIST
32399: LIST
32400: PUSH
32401: LD_INT 0
32403: PUSH
32404: LD_INT 2
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PUSH
32411: LD_INT 1
32413: NEG
32414: PUSH
32415: LD_INT 1
32417: PUSH
32418: EMPTY
32419: LIST
32420: LIST
32421: PUSH
32422: LD_INT 2
32424: NEG
32425: PUSH
32426: LD_INT 0
32428: PUSH
32429: EMPTY
32430: LIST
32431: LIST
32432: PUSH
32433: LD_INT 2
32435: NEG
32436: PUSH
32437: LD_INT 1
32439: NEG
32440: PUSH
32441: EMPTY
32442: LIST
32443: LIST
32444: PUSH
32445: LD_INT 2
32447: NEG
32448: PUSH
32449: LD_INT 2
32451: NEG
32452: PUSH
32453: EMPTY
32454: LIST
32455: LIST
32456: PUSH
32457: LD_INT 2
32459: NEG
32460: PUSH
32461: LD_INT 3
32463: NEG
32464: PUSH
32465: EMPTY
32466: LIST
32467: LIST
32468: PUSH
32469: LD_INT 1
32471: NEG
32472: PUSH
32473: LD_INT 3
32475: NEG
32476: PUSH
32477: EMPTY
32478: LIST
32479: LIST
32480: PUSH
32481: LD_INT 1
32483: PUSH
32484: LD_INT 2
32486: NEG
32487: PUSH
32488: EMPTY
32489: LIST
32490: LIST
32491: PUSH
32492: LD_INT 2
32494: PUSH
32495: LD_INT 1
32497: NEG
32498: PUSH
32499: EMPTY
32500: LIST
32501: LIST
32502: PUSH
32503: EMPTY
32504: LIST
32505: LIST
32506: LIST
32507: LIST
32508: LIST
32509: LIST
32510: LIST
32511: LIST
32512: LIST
32513: LIST
32514: LIST
32515: LIST
32516: LIST
32517: LIST
32518: LIST
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: ST_TO_ADDR
// DepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
32528: LD_ADDR_VAR 0 24
32532: PUSH
32533: LD_INT 0
32535: PUSH
32536: LD_INT 0
32538: PUSH
32539: EMPTY
32540: LIST
32541: LIST
32542: PUSH
32543: LD_INT 0
32545: PUSH
32546: LD_INT 1
32548: NEG
32549: PUSH
32550: EMPTY
32551: LIST
32552: LIST
32553: PUSH
32554: LD_INT 1
32556: PUSH
32557: LD_INT 0
32559: PUSH
32560: EMPTY
32561: LIST
32562: LIST
32563: PUSH
32564: LD_INT 1
32566: PUSH
32567: LD_INT 1
32569: PUSH
32570: EMPTY
32571: LIST
32572: LIST
32573: PUSH
32574: LD_INT 0
32576: PUSH
32577: LD_INT 1
32579: PUSH
32580: EMPTY
32581: LIST
32582: LIST
32583: PUSH
32584: LD_INT 1
32586: NEG
32587: PUSH
32588: LD_INT 0
32590: PUSH
32591: EMPTY
32592: LIST
32593: LIST
32594: PUSH
32595: LD_INT 1
32597: NEG
32598: PUSH
32599: LD_INT 1
32601: NEG
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: PUSH
32607: LD_INT 1
32609: NEG
32610: PUSH
32611: LD_INT 2
32613: NEG
32614: PUSH
32615: EMPTY
32616: LIST
32617: LIST
32618: PUSH
32619: LD_INT 0
32621: PUSH
32622: LD_INT 2
32624: NEG
32625: PUSH
32626: EMPTY
32627: LIST
32628: LIST
32629: PUSH
32630: LD_INT 1
32632: PUSH
32633: LD_INT 1
32635: NEG
32636: PUSH
32637: EMPTY
32638: LIST
32639: LIST
32640: PUSH
32641: LD_INT 2
32643: PUSH
32644: LD_INT 0
32646: PUSH
32647: EMPTY
32648: LIST
32649: LIST
32650: PUSH
32651: LD_INT 2
32653: PUSH
32654: LD_INT 1
32656: PUSH
32657: EMPTY
32658: LIST
32659: LIST
32660: PUSH
32661: LD_INT 2
32663: PUSH
32664: LD_INT 2
32666: PUSH
32667: EMPTY
32668: LIST
32669: LIST
32670: PUSH
32671: LD_INT 1
32673: PUSH
32674: LD_INT 2
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: PUSH
32681: LD_INT 0
32683: PUSH
32684: LD_INT 2
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: PUSH
32691: LD_INT 1
32693: NEG
32694: PUSH
32695: LD_INT 1
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 2
32704: NEG
32705: PUSH
32706: LD_INT 0
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: LD_INT 2
32715: NEG
32716: PUSH
32717: LD_INT 1
32719: NEG
32720: PUSH
32721: EMPTY
32722: LIST
32723: LIST
32724: PUSH
32725: LD_INT 2
32727: NEG
32728: PUSH
32729: LD_INT 2
32731: NEG
32732: PUSH
32733: EMPTY
32734: LIST
32735: LIST
32736: PUSH
32737: LD_INT 1
32739: PUSH
32740: LD_INT 2
32742: NEG
32743: PUSH
32744: EMPTY
32745: LIST
32746: LIST
32747: PUSH
32748: LD_INT 2
32750: PUSH
32751: LD_INT 1
32753: NEG
32754: PUSH
32755: EMPTY
32756: LIST
32757: LIST
32758: PUSH
32759: LD_INT 3
32761: PUSH
32762: LD_INT 1
32764: PUSH
32765: EMPTY
32766: LIST
32767: LIST
32768: PUSH
32769: LD_INT 3
32771: PUSH
32772: LD_INT 2
32774: PUSH
32775: EMPTY
32776: LIST
32777: LIST
32778: PUSH
32779: EMPTY
32780: LIST
32781: LIST
32782: LIST
32783: LIST
32784: LIST
32785: LIST
32786: LIST
32787: LIST
32788: LIST
32789: LIST
32790: LIST
32791: LIST
32792: LIST
32793: LIST
32794: LIST
32795: LIST
32796: LIST
32797: LIST
32798: LIST
32799: LIST
32800: LIST
32801: LIST
32802: LIST
32803: ST_TO_ADDR
// DepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
32804: LD_ADDR_VAR 0 25
32808: PUSH
32809: LD_INT 0
32811: PUSH
32812: LD_INT 0
32814: PUSH
32815: EMPTY
32816: LIST
32817: LIST
32818: PUSH
32819: LD_INT 0
32821: PUSH
32822: LD_INT 1
32824: NEG
32825: PUSH
32826: EMPTY
32827: LIST
32828: LIST
32829: PUSH
32830: LD_INT 1
32832: PUSH
32833: LD_INT 0
32835: PUSH
32836: EMPTY
32837: LIST
32838: LIST
32839: PUSH
32840: LD_INT 1
32842: PUSH
32843: LD_INT 1
32845: PUSH
32846: EMPTY
32847: LIST
32848: LIST
32849: PUSH
32850: LD_INT 0
32852: PUSH
32853: LD_INT 1
32855: PUSH
32856: EMPTY
32857: LIST
32858: LIST
32859: PUSH
32860: LD_INT 1
32862: NEG
32863: PUSH
32864: LD_INT 0
32866: PUSH
32867: EMPTY
32868: LIST
32869: LIST
32870: PUSH
32871: LD_INT 1
32873: NEG
32874: PUSH
32875: LD_INT 1
32877: NEG
32878: PUSH
32879: EMPTY
32880: LIST
32881: LIST
32882: PUSH
32883: LD_INT 1
32885: NEG
32886: PUSH
32887: LD_INT 2
32889: NEG
32890: PUSH
32891: EMPTY
32892: LIST
32893: LIST
32894: PUSH
32895: LD_INT 0
32897: PUSH
32898: LD_INT 2
32900: NEG
32901: PUSH
32902: EMPTY
32903: LIST
32904: LIST
32905: PUSH
32906: LD_INT 1
32908: PUSH
32909: LD_INT 1
32911: NEG
32912: PUSH
32913: EMPTY
32914: LIST
32915: LIST
32916: PUSH
32917: LD_INT 2
32919: PUSH
32920: LD_INT 0
32922: PUSH
32923: EMPTY
32924: LIST
32925: LIST
32926: PUSH
32927: LD_INT 2
32929: PUSH
32930: LD_INT 1
32932: PUSH
32933: EMPTY
32934: LIST
32935: LIST
32936: PUSH
32937: LD_INT 2
32939: PUSH
32940: LD_INT 2
32942: PUSH
32943: EMPTY
32944: LIST
32945: LIST
32946: PUSH
32947: LD_INT 1
32949: PUSH
32950: LD_INT 2
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: PUSH
32957: LD_INT 0
32959: PUSH
32960: LD_INT 2
32962: PUSH
32963: EMPTY
32964: LIST
32965: LIST
32966: PUSH
32967: LD_INT 1
32969: NEG
32970: PUSH
32971: LD_INT 1
32973: PUSH
32974: EMPTY
32975: LIST
32976: LIST
32977: PUSH
32978: LD_INT 2
32980: NEG
32981: PUSH
32982: LD_INT 0
32984: PUSH
32985: EMPTY
32986: LIST
32987: LIST
32988: PUSH
32989: LD_INT 2
32991: NEG
32992: PUSH
32993: LD_INT 1
32995: NEG
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: LD_INT 2
33003: NEG
33004: PUSH
33005: LD_INT 2
33007: NEG
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PUSH
33013: LD_INT 3
33015: PUSH
33016: LD_INT 1
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: PUSH
33023: LD_INT 3
33025: PUSH
33026: LD_INT 2
33028: PUSH
33029: EMPTY
33030: LIST
33031: LIST
33032: PUSH
33033: LD_INT 2
33035: PUSH
33036: LD_INT 3
33038: PUSH
33039: EMPTY
33040: LIST
33041: LIST
33042: PUSH
33043: LD_INT 1
33045: PUSH
33046: LD_INT 3
33048: PUSH
33049: EMPTY
33050: LIST
33051: LIST
33052: PUSH
33053: EMPTY
33054: LIST
33055: LIST
33056: LIST
33057: LIST
33058: LIST
33059: LIST
33060: LIST
33061: LIST
33062: LIST
33063: LIST
33064: LIST
33065: LIST
33066: LIST
33067: LIST
33068: LIST
33069: LIST
33070: LIST
33071: LIST
33072: LIST
33073: LIST
33074: LIST
33075: LIST
33076: LIST
33077: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
33078: LD_ADDR_VAR 0 26
33082: PUSH
33083: LD_INT 0
33085: PUSH
33086: LD_INT 0
33088: PUSH
33089: EMPTY
33090: LIST
33091: LIST
33092: PUSH
33093: LD_INT 0
33095: PUSH
33096: LD_INT 1
33098: NEG
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: PUSH
33104: LD_INT 1
33106: PUSH
33107: LD_INT 0
33109: PUSH
33110: EMPTY
33111: LIST
33112: LIST
33113: PUSH
33114: LD_INT 1
33116: PUSH
33117: LD_INT 1
33119: PUSH
33120: EMPTY
33121: LIST
33122: LIST
33123: PUSH
33124: LD_INT 0
33126: PUSH
33127: LD_INT 1
33129: PUSH
33130: EMPTY
33131: LIST
33132: LIST
33133: PUSH
33134: LD_INT 1
33136: NEG
33137: PUSH
33138: LD_INT 0
33140: PUSH
33141: EMPTY
33142: LIST
33143: LIST
33144: PUSH
33145: LD_INT 1
33147: NEG
33148: PUSH
33149: LD_INT 1
33151: NEG
33152: PUSH
33153: EMPTY
33154: LIST
33155: LIST
33156: PUSH
33157: LD_INT 1
33159: NEG
33160: PUSH
33161: LD_INT 2
33163: NEG
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: PUSH
33169: LD_INT 0
33171: PUSH
33172: LD_INT 2
33174: NEG
33175: PUSH
33176: EMPTY
33177: LIST
33178: LIST
33179: PUSH
33180: LD_INT 1
33182: PUSH
33183: LD_INT 1
33185: NEG
33186: PUSH
33187: EMPTY
33188: LIST
33189: LIST
33190: PUSH
33191: LD_INT 2
33193: PUSH
33194: LD_INT 0
33196: PUSH
33197: EMPTY
33198: LIST
33199: LIST
33200: PUSH
33201: LD_INT 2
33203: PUSH
33204: LD_INT 1
33206: PUSH
33207: EMPTY
33208: LIST
33209: LIST
33210: PUSH
33211: LD_INT 2
33213: PUSH
33214: LD_INT 2
33216: PUSH
33217: EMPTY
33218: LIST
33219: LIST
33220: PUSH
33221: LD_INT 1
33223: PUSH
33224: LD_INT 2
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: LD_INT 0
33233: PUSH
33234: LD_INT 2
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: PUSH
33241: LD_INT 1
33243: NEG
33244: PUSH
33245: LD_INT 1
33247: PUSH
33248: EMPTY
33249: LIST
33250: LIST
33251: PUSH
33252: LD_INT 2
33254: NEG
33255: PUSH
33256: LD_INT 0
33258: PUSH
33259: EMPTY
33260: LIST
33261: LIST
33262: PUSH
33263: LD_INT 2
33265: NEG
33266: PUSH
33267: LD_INT 1
33269: NEG
33270: PUSH
33271: EMPTY
33272: LIST
33273: LIST
33274: PUSH
33275: LD_INT 2
33277: NEG
33278: PUSH
33279: LD_INT 2
33281: NEG
33282: PUSH
33283: EMPTY
33284: LIST
33285: LIST
33286: PUSH
33287: LD_INT 2
33289: PUSH
33290: LD_INT 3
33292: PUSH
33293: EMPTY
33294: LIST
33295: LIST
33296: PUSH
33297: LD_INT 1
33299: PUSH
33300: LD_INT 3
33302: PUSH
33303: EMPTY
33304: LIST
33305: LIST
33306: PUSH
33307: LD_INT 1
33309: NEG
33310: PUSH
33311: LD_INT 2
33313: PUSH
33314: EMPTY
33315: LIST
33316: LIST
33317: PUSH
33318: LD_INT 2
33320: NEG
33321: PUSH
33322: LD_INT 1
33324: PUSH
33325: EMPTY
33326: LIST
33327: LIST
33328: PUSH
33329: EMPTY
33330: LIST
33331: LIST
33332: LIST
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: LIST
33339: LIST
33340: LIST
33341: LIST
33342: LIST
33343: LIST
33344: LIST
33345: LIST
33346: LIST
33347: LIST
33348: LIST
33349: LIST
33350: LIST
33351: LIST
33352: LIST
33353: ST_TO_ADDR
// DepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33354: LD_ADDR_VAR 0 27
33358: PUSH
33359: LD_INT 0
33361: PUSH
33362: LD_INT 0
33364: PUSH
33365: EMPTY
33366: LIST
33367: LIST
33368: PUSH
33369: LD_INT 0
33371: PUSH
33372: LD_INT 1
33374: NEG
33375: PUSH
33376: EMPTY
33377: LIST
33378: LIST
33379: PUSH
33380: LD_INT 1
33382: PUSH
33383: LD_INT 0
33385: PUSH
33386: EMPTY
33387: LIST
33388: LIST
33389: PUSH
33390: LD_INT 1
33392: PUSH
33393: LD_INT 1
33395: PUSH
33396: EMPTY
33397: LIST
33398: LIST
33399: PUSH
33400: LD_INT 0
33402: PUSH
33403: LD_INT 1
33405: PUSH
33406: EMPTY
33407: LIST
33408: LIST
33409: PUSH
33410: LD_INT 1
33412: NEG
33413: PUSH
33414: LD_INT 0
33416: PUSH
33417: EMPTY
33418: LIST
33419: LIST
33420: PUSH
33421: LD_INT 1
33423: NEG
33424: PUSH
33425: LD_INT 1
33427: NEG
33428: PUSH
33429: EMPTY
33430: LIST
33431: LIST
33432: PUSH
33433: LD_INT 1
33435: NEG
33436: PUSH
33437: LD_INT 2
33439: NEG
33440: PUSH
33441: EMPTY
33442: LIST
33443: LIST
33444: PUSH
33445: LD_INT 0
33447: PUSH
33448: LD_INT 2
33450: NEG
33451: PUSH
33452: EMPTY
33453: LIST
33454: LIST
33455: PUSH
33456: LD_INT 1
33458: PUSH
33459: LD_INT 1
33461: NEG
33462: PUSH
33463: EMPTY
33464: LIST
33465: LIST
33466: PUSH
33467: LD_INT 2
33469: PUSH
33470: LD_INT 0
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: PUSH
33477: LD_INT 2
33479: PUSH
33480: LD_INT 1
33482: PUSH
33483: EMPTY
33484: LIST
33485: LIST
33486: PUSH
33487: LD_INT 2
33489: PUSH
33490: LD_INT 2
33492: PUSH
33493: EMPTY
33494: LIST
33495: LIST
33496: PUSH
33497: LD_INT 1
33499: PUSH
33500: LD_INT 2
33502: PUSH
33503: EMPTY
33504: LIST
33505: LIST
33506: PUSH
33507: LD_INT 0
33509: PUSH
33510: LD_INT 2
33512: PUSH
33513: EMPTY
33514: LIST
33515: LIST
33516: PUSH
33517: LD_INT 1
33519: NEG
33520: PUSH
33521: LD_INT 1
33523: PUSH
33524: EMPTY
33525: LIST
33526: LIST
33527: PUSH
33528: LD_INT 2
33530: NEG
33531: PUSH
33532: LD_INT 0
33534: PUSH
33535: EMPTY
33536: LIST
33537: LIST
33538: PUSH
33539: LD_INT 2
33541: NEG
33542: PUSH
33543: LD_INT 1
33545: NEG
33546: PUSH
33547: EMPTY
33548: LIST
33549: LIST
33550: PUSH
33551: LD_INT 2
33553: NEG
33554: PUSH
33555: LD_INT 2
33557: NEG
33558: PUSH
33559: EMPTY
33560: LIST
33561: LIST
33562: PUSH
33563: LD_INT 1
33565: NEG
33566: PUSH
33567: LD_INT 2
33569: PUSH
33570: EMPTY
33571: LIST
33572: LIST
33573: PUSH
33574: LD_INT 2
33576: NEG
33577: PUSH
33578: LD_INT 1
33580: PUSH
33581: EMPTY
33582: LIST
33583: LIST
33584: PUSH
33585: LD_INT 3
33587: NEG
33588: PUSH
33589: LD_INT 1
33591: NEG
33592: PUSH
33593: EMPTY
33594: LIST
33595: LIST
33596: PUSH
33597: LD_INT 3
33599: NEG
33600: PUSH
33601: LD_INT 2
33603: NEG
33604: PUSH
33605: EMPTY
33606: LIST
33607: LIST
33608: PUSH
33609: EMPTY
33610: LIST
33611: LIST
33612: LIST
33613: LIST
33614: LIST
33615: LIST
33616: LIST
33617: LIST
33618: LIST
33619: LIST
33620: LIST
33621: LIST
33622: LIST
33623: LIST
33624: LIST
33625: LIST
33626: LIST
33627: LIST
33628: LIST
33629: LIST
33630: LIST
33631: LIST
33632: LIST
33633: ST_TO_ADDR
// DepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
33634: LD_ADDR_VAR 0 28
33638: PUSH
33639: LD_INT 0
33641: PUSH
33642: LD_INT 0
33644: PUSH
33645: EMPTY
33646: LIST
33647: LIST
33648: PUSH
33649: LD_INT 0
33651: PUSH
33652: LD_INT 1
33654: NEG
33655: PUSH
33656: EMPTY
33657: LIST
33658: LIST
33659: PUSH
33660: LD_INT 1
33662: PUSH
33663: LD_INT 0
33665: PUSH
33666: EMPTY
33667: LIST
33668: LIST
33669: PUSH
33670: LD_INT 1
33672: PUSH
33673: LD_INT 1
33675: PUSH
33676: EMPTY
33677: LIST
33678: LIST
33679: PUSH
33680: LD_INT 0
33682: PUSH
33683: LD_INT 1
33685: PUSH
33686: EMPTY
33687: LIST
33688: LIST
33689: PUSH
33690: LD_INT 1
33692: NEG
33693: PUSH
33694: LD_INT 0
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: LD_INT 1
33703: NEG
33704: PUSH
33705: LD_INT 1
33707: NEG
33708: PUSH
33709: EMPTY
33710: LIST
33711: LIST
33712: PUSH
33713: LD_INT 1
33715: NEG
33716: PUSH
33717: LD_INT 2
33719: NEG
33720: PUSH
33721: EMPTY
33722: LIST
33723: LIST
33724: PUSH
33725: LD_INT 0
33727: PUSH
33728: LD_INT 2
33730: NEG
33731: PUSH
33732: EMPTY
33733: LIST
33734: LIST
33735: PUSH
33736: LD_INT 1
33738: PUSH
33739: LD_INT 1
33741: NEG
33742: PUSH
33743: EMPTY
33744: LIST
33745: LIST
33746: PUSH
33747: LD_INT 2
33749: PUSH
33750: LD_INT 0
33752: PUSH
33753: EMPTY
33754: LIST
33755: LIST
33756: PUSH
33757: LD_INT 2
33759: PUSH
33760: LD_INT 1
33762: PUSH
33763: EMPTY
33764: LIST
33765: LIST
33766: PUSH
33767: LD_INT 2
33769: PUSH
33770: LD_INT 2
33772: PUSH
33773: EMPTY
33774: LIST
33775: LIST
33776: PUSH
33777: LD_INT 1
33779: PUSH
33780: LD_INT 2
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: PUSH
33787: LD_INT 0
33789: PUSH
33790: LD_INT 2
33792: PUSH
33793: EMPTY
33794: LIST
33795: LIST
33796: PUSH
33797: LD_INT 1
33799: NEG
33800: PUSH
33801: LD_INT 1
33803: PUSH
33804: EMPTY
33805: LIST
33806: LIST
33807: PUSH
33808: LD_INT 2
33810: NEG
33811: PUSH
33812: LD_INT 0
33814: PUSH
33815: EMPTY
33816: LIST
33817: LIST
33818: PUSH
33819: LD_INT 2
33821: NEG
33822: PUSH
33823: LD_INT 1
33825: NEG
33826: PUSH
33827: EMPTY
33828: LIST
33829: LIST
33830: PUSH
33831: LD_INT 2
33833: NEG
33834: PUSH
33835: LD_INT 2
33837: NEG
33838: PUSH
33839: EMPTY
33840: LIST
33841: LIST
33842: PUSH
33843: LD_INT 2
33845: NEG
33846: PUSH
33847: LD_INT 3
33849: NEG
33850: PUSH
33851: EMPTY
33852: LIST
33853: LIST
33854: PUSH
33855: LD_INT 1
33857: NEG
33858: PUSH
33859: LD_INT 3
33861: NEG
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: PUSH
33867: LD_INT 3
33869: NEG
33870: PUSH
33871: LD_INT 1
33873: NEG
33874: PUSH
33875: EMPTY
33876: LIST
33877: LIST
33878: PUSH
33879: LD_INT 3
33881: NEG
33882: PUSH
33883: LD_INT 2
33885: NEG
33886: PUSH
33887: EMPTY
33888: LIST
33889: LIST
33890: PUSH
33891: EMPTY
33892: LIST
33893: LIST
33894: LIST
33895: LIST
33896: LIST
33897: LIST
33898: LIST
33899: LIST
33900: LIST
33901: LIST
33902: LIST
33903: LIST
33904: LIST
33905: LIST
33906: LIST
33907: LIST
33908: LIST
33909: LIST
33910: LIST
33911: LIST
33912: LIST
33913: LIST
33914: LIST
33915: ST_TO_ADDR
// Factory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
33916: LD_ADDR_VAR 0 29
33920: PUSH
33921: LD_INT 0
33923: PUSH
33924: LD_INT 0
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: PUSH
33931: LD_INT 0
33933: PUSH
33934: LD_INT 1
33936: NEG
33937: PUSH
33938: EMPTY
33939: LIST
33940: LIST
33941: PUSH
33942: LD_INT 1
33944: PUSH
33945: LD_INT 0
33947: PUSH
33948: EMPTY
33949: LIST
33950: LIST
33951: PUSH
33952: LD_INT 1
33954: PUSH
33955: LD_INT 1
33957: PUSH
33958: EMPTY
33959: LIST
33960: LIST
33961: PUSH
33962: LD_INT 0
33964: PUSH
33965: LD_INT 1
33967: PUSH
33968: EMPTY
33969: LIST
33970: LIST
33971: PUSH
33972: LD_INT 1
33974: NEG
33975: PUSH
33976: LD_INT 0
33978: PUSH
33979: EMPTY
33980: LIST
33981: LIST
33982: PUSH
33983: LD_INT 1
33985: NEG
33986: PUSH
33987: LD_INT 1
33989: NEG
33990: PUSH
33991: EMPTY
33992: LIST
33993: LIST
33994: PUSH
33995: LD_INT 1
33997: NEG
33998: PUSH
33999: LD_INT 2
34001: NEG
34002: PUSH
34003: EMPTY
34004: LIST
34005: LIST
34006: PUSH
34007: LD_INT 0
34009: PUSH
34010: LD_INT 2
34012: NEG
34013: PUSH
34014: EMPTY
34015: LIST
34016: LIST
34017: PUSH
34018: LD_INT 1
34020: PUSH
34021: LD_INT 1
34023: NEG
34024: PUSH
34025: EMPTY
34026: LIST
34027: LIST
34028: PUSH
34029: LD_INT 2
34031: PUSH
34032: LD_INT 0
34034: PUSH
34035: EMPTY
34036: LIST
34037: LIST
34038: PUSH
34039: LD_INT 2
34041: PUSH
34042: LD_INT 1
34044: PUSH
34045: EMPTY
34046: LIST
34047: LIST
34048: PUSH
34049: LD_INT 1
34051: PUSH
34052: LD_INT 2
34054: PUSH
34055: EMPTY
34056: LIST
34057: LIST
34058: PUSH
34059: LD_INT 0
34061: PUSH
34062: LD_INT 2
34064: PUSH
34065: EMPTY
34066: LIST
34067: LIST
34068: PUSH
34069: LD_INT 1
34071: NEG
34072: PUSH
34073: LD_INT 1
34075: PUSH
34076: EMPTY
34077: LIST
34078: LIST
34079: PUSH
34080: LD_INT 2
34082: NEG
34083: PUSH
34084: LD_INT 1
34086: NEG
34087: PUSH
34088: EMPTY
34089: LIST
34090: LIST
34091: PUSH
34092: LD_INT 2
34094: NEG
34095: PUSH
34096: LD_INT 2
34098: NEG
34099: PUSH
34100: EMPTY
34101: LIST
34102: LIST
34103: PUSH
34104: LD_INT 2
34106: NEG
34107: PUSH
34108: LD_INT 3
34110: NEG
34111: PUSH
34112: EMPTY
34113: LIST
34114: LIST
34115: PUSH
34116: LD_INT 2
34118: PUSH
34119: LD_INT 1
34121: NEG
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: LD_INT 3
34129: PUSH
34130: LD_INT 1
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: PUSH
34137: LD_INT 1
34139: PUSH
34140: LD_INT 3
34142: PUSH
34143: EMPTY
34144: LIST
34145: LIST
34146: PUSH
34147: LD_INT 1
34149: NEG
34150: PUSH
34151: LD_INT 2
34153: PUSH
34154: EMPTY
34155: LIST
34156: LIST
34157: PUSH
34158: LD_INT 3
34160: NEG
34161: PUSH
34162: LD_INT 2
34164: NEG
34165: PUSH
34166: EMPTY
34167: LIST
34168: LIST
34169: PUSH
34170: EMPTY
34171: LIST
34172: LIST
34173: LIST
34174: LIST
34175: LIST
34176: LIST
34177: LIST
34178: LIST
34179: LIST
34180: LIST
34181: LIST
34182: LIST
34183: LIST
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: ST_TO_ADDR
// Factory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34195: LD_ADDR_VAR 0 30
34199: PUSH
34200: LD_INT 0
34202: PUSH
34203: LD_INT 0
34205: PUSH
34206: EMPTY
34207: LIST
34208: LIST
34209: PUSH
34210: LD_INT 0
34212: PUSH
34213: LD_INT 1
34215: NEG
34216: PUSH
34217: EMPTY
34218: LIST
34219: LIST
34220: PUSH
34221: LD_INT 1
34223: PUSH
34224: LD_INT 0
34226: PUSH
34227: EMPTY
34228: LIST
34229: LIST
34230: PUSH
34231: LD_INT 1
34233: PUSH
34234: LD_INT 1
34236: PUSH
34237: EMPTY
34238: LIST
34239: LIST
34240: PUSH
34241: LD_INT 0
34243: PUSH
34244: LD_INT 1
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: PUSH
34251: LD_INT 1
34253: NEG
34254: PUSH
34255: LD_INT 0
34257: PUSH
34258: EMPTY
34259: LIST
34260: LIST
34261: PUSH
34262: LD_INT 1
34264: NEG
34265: PUSH
34266: LD_INT 1
34268: NEG
34269: PUSH
34270: EMPTY
34271: LIST
34272: LIST
34273: PUSH
34274: LD_INT 1
34276: NEG
34277: PUSH
34278: LD_INT 2
34280: NEG
34281: PUSH
34282: EMPTY
34283: LIST
34284: LIST
34285: PUSH
34286: LD_INT 0
34288: PUSH
34289: LD_INT 2
34291: NEG
34292: PUSH
34293: EMPTY
34294: LIST
34295: LIST
34296: PUSH
34297: LD_INT 1
34299: PUSH
34300: LD_INT 1
34302: NEG
34303: PUSH
34304: EMPTY
34305: LIST
34306: LIST
34307: PUSH
34308: LD_INT 2
34310: PUSH
34311: LD_INT 0
34313: PUSH
34314: EMPTY
34315: LIST
34316: LIST
34317: PUSH
34318: LD_INT 2
34320: PUSH
34321: LD_INT 1
34323: PUSH
34324: EMPTY
34325: LIST
34326: LIST
34327: PUSH
34328: LD_INT 2
34330: PUSH
34331: LD_INT 2
34333: PUSH
34334: EMPTY
34335: LIST
34336: LIST
34337: PUSH
34338: LD_INT 1
34340: PUSH
34341: LD_INT 2
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: PUSH
34348: LD_INT 1
34350: NEG
34351: PUSH
34352: LD_INT 1
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: PUSH
34359: LD_INT 2
34361: NEG
34362: PUSH
34363: LD_INT 0
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: PUSH
34370: LD_INT 2
34372: NEG
34373: PUSH
34374: LD_INT 1
34376: NEG
34377: PUSH
34378: EMPTY
34379: LIST
34380: LIST
34381: PUSH
34382: LD_INT 1
34384: NEG
34385: PUSH
34386: LD_INT 3
34388: NEG
34389: PUSH
34390: EMPTY
34391: LIST
34392: LIST
34393: PUSH
34394: LD_INT 1
34396: PUSH
34397: LD_INT 2
34399: NEG
34400: PUSH
34401: EMPTY
34402: LIST
34403: LIST
34404: PUSH
34405: LD_INT 3
34407: PUSH
34408: LD_INT 2
34410: PUSH
34411: EMPTY
34412: LIST
34413: LIST
34414: PUSH
34415: LD_INT 2
34417: PUSH
34418: LD_INT 3
34420: PUSH
34421: EMPTY
34422: LIST
34423: LIST
34424: PUSH
34425: LD_INT 2
34427: NEG
34428: PUSH
34429: LD_INT 1
34431: PUSH
34432: EMPTY
34433: LIST
34434: LIST
34435: PUSH
34436: LD_INT 3
34438: NEG
34439: PUSH
34440: LD_INT 1
34442: NEG
34443: PUSH
34444: EMPTY
34445: LIST
34446: LIST
34447: PUSH
34448: EMPTY
34449: LIST
34450: LIST
34451: LIST
34452: LIST
34453: LIST
34454: LIST
34455: LIST
34456: LIST
34457: LIST
34458: LIST
34459: LIST
34460: LIST
34461: LIST
34462: LIST
34463: LIST
34464: LIST
34465: LIST
34466: LIST
34467: LIST
34468: LIST
34469: LIST
34470: LIST
34471: LIST
34472: ST_TO_ADDR
// Factory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
34473: LD_ADDR_VAR 0 31
34477: PUSH
34478: LD_INT 0
34480: PUSH
34481: LD_INT 0
34483: PUSH
34484: EMPTY
34485: LIST
34486: LIST
34487: PUSH
34488: LD_INT 0
34490: PUSH
34491: LD_INT 1
34493: NEG
34494: PUSH
34495: EMPTY
34496: LIST
34497: LIST
34498: PUSH
34499: LD_INT 1
34501: PUSH
34502: LD_INT 0
34504: PUSH
34505: EMPTY
34506: LIST
34507: LIST
34508: PUSH
34509: LD_INT 1
34511: PUSH
34512: LD_INT 1
34514: PUSH
34515: EMPTY
34516: LIST
34517: LIST
34518: PUSH
34519: LD_INT 0
34521: PUSH
34522: LD_INT 1
34524: PUSH
34525: EMPTY
34526: LIST
34527: LIST
34528: PUSH
34529: LD_INT 1
34531: NEG
34532: PUSH
34533: LD_INT 0
34535: PUSH
34536: EMPTY
34537: LIST
34538: LIST
34539: PUSH
34540: LD_INT 1
34542: NEG
34543: PUSH
34544: LD_INT 1
34546: NEG
34547: PUSH
34548: EMPTY
34549: LIST
34550: LIST
34551: PUSH
34552: LD_INT 1
34554: NEG
34555: PUSH
34556: LD_INT 2
34558: NEG
34559: PUSH
34560: EMPTY
34561: LIST
34562: LIST
34563: PUSH
34564: LD_INT 1
34566: PUSH
34567: LD_INT 1
34569: NEG
34570: PUSH
34571: EMPTY
34572: LIST
34573: LIST
34574: PUSH
34575: LD_INT 2
34577: PUSH
34578: LD_INT 0
34580: PUSH
34581: EMPTY
34582: LIST
34583: LIST
34584: PUSH
34585: LD_INT 2
34587: PUSH
34588: LD_INT 1
34590: PUSH
34591: EMPTY
34592: LIST
34593: LIST
34594: PUSH
34595: LD_INT 2
34597: PUSH
34598: LD_INT 2
34600: PUSH
34601: EMPTY
34602: LIST
34603: LIST
34604: PUSH
34605: LD_INT 1
34607: PUSH
34608: LD_INT 2
34610: PUSH
34611: EMPTY
34612: LIST
34613: LIST
34614: PUSH
34615: LD_INT 0
34617: PUSH
34618: LD_INT 2
34620: PUSH
34621: EMPTY
34622: LIST
34623: LIST
34624: PUSH
34625: LD_INT 1
34627: NEG
34628: PUSH
34629: LD_INT 1
34631: PUSH
34632: EMPTY
34633: LIST
34634: LIST
34635: PUSH
34636: LD_INT 2
34638: NEG
34639: PUSH
34640: LD_INT 1
34642: NEG
34643: PUSH
34644: EMPTY
34645: LIST
34646: LIST
34647: PUSH
34648: LD_INT 2
34650: NEG
34651: PUSH
34652: LD_INT 2
34654: NEG
34655: PUSH
34656: EMPTY
34657: LIST
34658: LIST
34659: PUSH
34660: LD_INT 2
34662: NEG
34663: PUSH
34664: LD_INT 3
34666: NEG
34667: PUSH
34668: EMPTY
34669: LIST
34670: LIST
34671: PUSH
34672: LD_INT 2
34674: PUSH
34675: LD_INT 1
34677: NEG
34678: PUSH
34679: EMPTY
34680: LIST
34681: LIST
34682: PUSH
34683: LD_INT 3
34685: PUSH
34686: LD_INT 1
34688: PUSH
34689: EMPTY
34690: LIST
34691: LIST
34692: PUSH
34693: LD_INT 1
34695: PUSH
34696: LD_INT 3
34698: PUSH
34699: EMPTY
34700: LIST
34701: LIST
34702: PUSH
34703: LD_INT 1
34705: NEG
34706: PUSH
34707: LD_INT 2
34709: PUSH
34710: EMPTY
34711: LIST
34712: LIST
34713: PUSH
34714: LD_INT 3
34716: NEG
34717: PUSH
34718: LD_INT 2
34720: NEG
34721: PUSH
34722: EMPTY
34723: LIST
34724: LIST
34725: PUSH
34726: EMPTY
34727: LIST
34728: LIST
34729: LIST
34730: LIST
34731: LIST
34732: LIST
34733: LIST
34734: LIST
34735: LIST
34736: LIST
34737: LIST
34738: LIST
34739: LIST
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: ST_TO_ADDR
// Factory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
34751: LD_ADDR_VAR 0 32
34755: PUSH
34756: LD_INT 0
34758: PUSH
34759: LD_INT 0
34761: PUSH
34762: EMPTY
34763: LIST
34764: LIST
34765: PUSH
34766: LD_INT 0
34768: PUSH
34769: LD_INT 1
34771: NEG
34772: PUSH
34773: EMPTY
34774: LIST
34775: LIST
34776: PUSH
34777: LD_INT 1
34779: PUSH
34780: LD_INT 0
34782: PUSH
34783: EMPTY
34784: LIST
34785: LIST
34786: PUSH
34787: LD_INT 1
34789: PUSH
34790: LD_INT 1
34792: PUSH
34793: EMPTY
34794: LIST
34795: LIST
34796: PUSH
34797: LD_INT 0
34799: PUSH
34800: LD_INT 1
34802: PUSH
34803: EMPTY
34804: LIST
34805: LIST
34806: PUSH
34807: LD_INT 1
34809: NEG
34810: PUSH
34811: LD_INT 0
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 1
34820: NEG
34821: PUSH
34822: LD_INT 1
34824: NEG
34825: PUSH
34826: EMPTY
34827: LIST
34828: LIST
34829: PUSH
34830: LD_INT 1
34832: NEG
34833: PUSH
34834: LD_INT 2
34836: NEG
34837: PUSH
34838: EMPTY
34839: LIST
34840: LIST
34841: PUSH
34842: LD_INT 0
34844: PUSH
34845: LD_INT 2
34847: NEG
34848: PUSH
34849: EMPTY
34850: LIST
34851: LIST
34852: PUSH
34853: LD_INT 1
34855: PUSH
34856: LD_INT 1
34858: NEG
34859: PUSH
34860: EMPTY
34861: LIST
34862: LIST
34863: PUSH
34864: LD_INT 2
34866: PUSH
34867: LD_INT 1
34869: PUSH
34870: EMPTY
34871: LIST
34872: LIST
34873: PUSH
34874: LD_INT 2
34876: PUSH
34877: LD_INT 2
34879: PUSH
34880: EMPTY
34881: LIST
34882: LIST
34883: PUSH
34884: LD_INT 1
34886: PUSH
34887: LD_INT 2
34889: PUSH
34890: EMPTY
34891: LIST
34892: LIST
34893: PUSH
34894: LD_INT 0
34896: PUSH
34897: LD_INT 2
34899: PUSH
34900: EMPTY
34901: LIST
34902: LIST
34903: PUSH
34904: LD_INT 1
34906: NEG
34907: PUSH
34908: LD_INT 1
34910: PUSH
34911: EMPTY
34912: LIST
34913: LIST
34914: PUSH
34915: LD_INT 2
34917: NEG
34918: PUSH
34919: LD_INT 0
34921: PUSH
34922: EMPTY
34923: LIST
34924: LIST
34925: PUSH
34926: LD_INT 2
34928: NEG
34929: PUSH
34930: LD_INT 1
34932: NEG
34933: PUSH
34934: EMPTY
34935: LIST
34936: LIST
34937: PUSH
34938: LD_INT 1
34940: NEG
34941: PUSH
34942: LD_INT 3
34944: NEG
34945: PUSH
34946: EMPTY
34947: LIST
34948: LIST
34949: PUSH
34950: LD_INT 1
34952: PUSH
34953: LD_INT 2
34955: NEG
34956: PUSH
34957: EMPTY
34958: LIST
34959: LIST
34960: PUSH
34961: LD_INT 3
34963: PUSH
34964: LD_INT 2
34966: PUSH
34967: EMPTY
34968: LIST
34969: LIST
34970: PUSH
34971: LD_INT 2
34973: PUSH
34974: LD_INT 3
34976: PUSH
34977: EMPTY
34978: LIST
34979: LIST
34980: PUSH
34981: LD_INT 2
34983: NEG
34984: PUSH
34985: LD_INT 1
34987: PUSH
34988: EMPTY
34989: LIST
34990: LIST
34991: PUSH
34992: LD_INT 3
34994: NEG
34995: PUSH
34996: LD_INT 1
34998: NEG
34999: PUSH
35000: EMPTY
35001: LIST
35002: LIST
35003: PUSH
35004: EMPTY
35005: LIST
35006: LIST
35007: LIST
35008: LIST
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: LIST
35016: LIST
35017: LIST
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: LIST
35026: LIST
35027: LIST
35028: ST_TO_ADDR
// Factory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
35029: LD_ADDR_VAR 0 33
35033: PUSH
35034: LD_INT 0
35036: PUSH
35037: LD_INT 0
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: PUSH
35044: LD_INT 0
35046: PUSH
35047: LD_INT 1
35049: NEG
35050: PUSH
35051: EMPTY
35052: LIST
35053: LIST
35054: PUSH
35055: LD_INT 1
35057: PUSH
35058: LD_INT 0
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: PUSH
35065: LD_INT 1
35067: PUSH
35068: LD_INT 1
35070: PUSH
35071: EMPTY
35072: LIST
35073: LIST
35074: PUSH
35075: LD_INT 0
35077: PUSH
35078: LD_INT 1
35080: PUSH
35081: EMPTY
35082: LIST
35083: LIST
35084: PUSH
35085: LD_INT 1
35087: NEG
35088: PUSH
35089: LD_INT 0
35091: PUSH
35092: EMPTY
35093: LIST
35094: LIST
35095: PUSH
35096: LD_INT 1
35098: NEG
35099: PUSH
35100: LD_INT 1
35102: NEG
35103: PUSH
35104: EMPTY
35105: LIST
35106: LIST
35107: PUSH
35108: LD_INT 1
35110: NEG
35111: PUSH
35112: LD_INT 2
35114: NEG
35115: PUSH
35116: EMPTY
35117: LIST
35118: LIST
35119: PUSH
35120: LD_INT 1
35122: PUSH
35123: LD_INT 1
35125: NEG
35126: PUSH
35127: EMPTY
35128: LIST
35129: LIST
35130: PUSH
35131: LD_INT 2
35133: PUSH
35134: LD_INT 0
35136: PUSH
35137: EMPTY
35138: LIST
35139: LIST
35140: PUSH
35141: LD_INT 2
35143: PUSH
35144: LD_INT 1
35146: PUSH
35147: EMPTY
35148: LIST
35149: LIST
35150: PUSH
35151: LD_INT 1
35153: PUSH
35154: LD_INT 2
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: PUSH
35161: LD_INT 0
35163: PUSH
35164: LD_INT 2
35166: PUSH
35167: EMPTY
35168: LIST
35169: LIST
35170: PUSH
35171: LD_INT 1
35173: NEG
35174: PUSH
35175: LD_INT 1
35177: PUSH
35178: EMPTY
35179: LIST
35180: LIST
35181: PUSH
35182: LD_INT 2
35184: NEG
35185: PUSH
35186: LD_INT 0
35188: PUSH
35189: EMPTY
35190: LIST
35191: LIST
35192: PUSH
35193: LD_INT 2
35195: NEG
35196: PUSH
35197: LD_INT 1
35199: NEG
35200: PUSH
35201: EMPTY
35202: LIST
35203: LIST
35204: PUSH
35205: LD_INT 2
35207: NEG
35208: PUSH
35209: LD_INT 2
35211: NEG
35212: PUSH
35213: EMPTY
35214: LIST
35215: LIST
35216: PUSH
35217: LD_INT 2
35219: NEG
35220: PUSH
35221: LD_INT 3
35223: NEG
35224: PUSH
35225: EMPTY
35226: LIST
35227: LIST
35228: PUSH
35229: LD_INT 2
35231: PUSH
35232: LD_INT 1
35234: NEG
35235: PUSH
35236: EMPTY
35237: LIST
35238: LIST
35239: PUSH
35240: LD_INT 3
35242: PUSH
35243: LD_INT 1
35245: PUSH
35246: EMPTY
35247: LIST
35248: LIST
35249: PUSH
35250: LD_INT 1
35252: PUSH
35253: LD_INT 3
35255: PUSH
35256: EMPTY
35257: LIST
35258: LIST
35259: PUSH
35260: LD_INT 1
35262: NEG
35263: PUSH
35264: LD_INT 2
35266: PUSH
35267: EMPTY
35268: LIST
35269: LIST
35270: PUSH
35271: LD_INT 3
35273: NEG
35274: PUSH
35275: LD_INT 2
35277: NEG
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: LIST
35287: LIST
35288: LIST
35289: LIST
35290: LIST
35291: LIST
35292: LIST
35293: LIST
35294: LIST
35295: LIST
35296: LIST
35297: LIST
35298: LIST
35299: LIST
35300: LIST
35301: LIST
35302: LIST
35303: LIST
35304: LIST
35305: LIST
35306: LIST
35307: ST_TO_ADDR
// Factory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
35308: LD_ADDR_VAR 0 34
35312: PUSH
35313: LD_INT 0
35315: PUSH
35316: LD_INT 0
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: PUSH
35323: LD_INT 0
35325: PUSH
35326: LD_INT 1
35328: NEG
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: PUSH
35334: LD_INT 1
35336: PUSH
35337: LD_INT 0
35339: PUSH
35340: EMPTY
35341: LIST
35342: LIST
35343: PUSH
35344: LD_INT 1
35346: PUSH
35347: LD_INT 1
35349: PUSH
35350: EMPTY
35351: LIST
35352: LIST
35353: PUSH
35354: LD_INT 0
35356: PUSH
35357: LD_INT 1
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: PUSH
35364: LD_INT 1
35366: NEG
35367: PUSH
35368: LD_INT 0
35370: PUSH
35371: EMPTY
35372: LIST
35373: LIST
35374: PUSH
35375: LD_INT 1
35377: NEG
35378: PUSH
35379: LD_INT 1
35381: NEG
35382: PUSH
35383: EMPTY
35384: LIST
35385: LIST
35386: PUSH
35387: LD_INT 1
35389: NEG
35390: PUSH
35391: LD_INT 2
35393: NEG
35394: PUSH
35395: EMPTY
35396: LIST
35397: LIST
35398: PUSH
35399: LD_INT 0
35401: PUSH
35402: LD_INT 2
35404: NEG
35405: PUSH
35406: EMPTY
35407: LIST
35408: LIST
35409: PUSH
35410: LD_INT 1
35412: PUSH
35413: LD_INT 1
35415: NEG
35416: PUSH
35417: EMPTY
35418: LIST
35419: LIST
35420: PUSH
35421: LD_INT 2
35423: PUSH
35424: LD_INT 1
35426: PUSH
35427: EMPTY
35428: LIST
35429: LIST
35430: PUSH
35431: LD_INT 2
35433: PUSH
35434: LD_INT 2
35436: PUSH
35437: EMPTY
35438: LIST
35439: LIST
35440: PUSH
35441: LD_INT 1
35443: PUSH
35444: LD_INT 2
35446: PUSH
35447: EMPTY
35448: LIST
35449: LIST
35450: PUSH
35451: LD_INT 1
35453: NEG
35454: PUSH
35455: LD_INT 1
35457: PUSH
35458: EMPTY
35459: LIST
35460: LIST
35461: PUSH
35462: LD_INT 2
35464: NEG
35465: PUSH
35466: LD_INT 0
35468: PUSH
35469: EMPTY
35470: LIST
35471: LIST
35472: PUSH
35473: LD_INT 2
35475: NEG
35476: PUSH
35477: LD_INT 1
35479: NEG
35480: PUSH
35481: EMPTY
35482: LIST
35483: LIST
35484: PUSH
35485: LD_INT 2
35487: NEG
35488: PUSH
35489: LD_INT 2
35491: NEG
35492: PUSH
35493: EMPTY
35494: LIST
35495: LIST
35496: PUSH
35497: LD_INT 1
35499: NEG
35500: PUSH
35501: LD_INT 3
35503: NEG
35504: PUSH
35505: EMPTY
35506: LIST
35507: LIST
35508: PUSH
35509: LD_INT 1
35511: PUSH
35512: LD_INT 2
35514: NEG
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: LD_INT 3
35522: PUSH
35523: LD_INT 2
35525: PUSH
35526: EMPTY
35527: LIST
35528: LIST
35529: PUSH
35530: LD_INT 2
35532: PUSH
35533: LD_INT 3
35535: PUSH
35536: EMPTY
35537: LIST
35538: LIST
35539: PUSH
35540: LD_INT 2
35542: NEG
35543: PUSH
35544: LD_INT 1
35546: PUSH
35547: EMPTY
35548: LIST
35549: LIST
35550: PUSH
35551: LD_INT 3
35553: NEG
35554: PUSH
35555: LD_INT 1
35557: NEG
35558: PUSH
35559: EMPTY
35560: LIST
35561: LIST
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: LIST
35567: LIST
35568: LIST
35569: LIST
35570: LIST
35571: LIST
35572: LIST
35573: LIST
35574: LIST
35575: LIST
35576: LIST
35577: LIST
35578: LIST
35579: LIST
35580: LIST
35581: LIST
35582: LIST
35583: LIST
35584: LIST
35585: LIST
35586: LIST
35587: ST_TO_ADDR
// Ext0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
35588: LD_ADDR_VAR 0 35
35592: PUSH
35593: LD_INT 0
35595: PUSH
35596: LD_INT 0
35598: PUSH
35599: EMPTY
35600: LIST
35601: LIST
35602: PUSH
35603: LD_INT 0
35605: PUSH
35606: LD_INT 1
35608: NEG
35609: PUSH
35610: EMPTY
35611: LIST
35612: LIST
35613: PUSH
35614: LD_INT 1
35616: PUSH
35617: LD_INT 0
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: PUSH
35624: LD_INT 1
35626: PUSH
35627: LD_INT 1
35629: PUSH
35630: EMPTY
35631: LIST
35632: LIST
35633: PUSH
35634: LD_INT 0
35636: PUSH
35637: LD_INT 1
35639: PUSH
35640: EMPTY
35641: LIST
35642: LIST
35643: PUSH
35644: LD_INT 1
35646: NEG
35647: PUSH
35648: LD_INT 0
35650: PUSH
35651: EMPTY
35652: LIST
35653: LIST
35654: PUSH
35655: LD_INT 1
35657: NEG
35658: PUSH
35659: LD_INT 1
35661: NEG
35662: PUSH
35663: EMPTY
35664: LIST
35665: LIST
35666: PUSH
35667: LD_INT 2
35669: PUSH
35670: LD_INT 1
35672: PUSH
35673: EMPTY
35674: LIST
35675: LIST
35676: PUSH
35677: LD_INT 2
35679: NEG
35680: PUSH
35681: LD_INT 1
35683: NEG
35684: PUSH
35685: EMPTY
35686: LIST
35687: LIST
35688: PUSH
35689: EMPTY
35690: LIST
35691: LIST
35692: LIST
35693: LIST
35694: LIST
35695: LIST
35696: LIST
35697: LIST
35698: LIST
35699: ST_TO_ADDR
// Ext1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
35700: LD_ADDR_VAR 0 36
35704: PUSH
35705: LD_INT 0
35707: PUSH
35708: LD_INT 0
35710: PUSH
35711: EMPTY
35712: LIST
35713: LIST
35714: PUSH
35715: LD_INT 0
35717: PUSH
35718: LD_INT 1
35720: NEG
35721: PUSH
35722: EMPTY
35723: LIST
35724: LIST
35725: PUSH
35726: LD_INT 1
35728: PUSH
35729: LD_INT 0
35731: PUSH
35732: EMPTY
35733: LIST
35734: LIST
35735: PUSH
35736: LD_INT 1
35738: PUSH
35739: LD_INT 1
35741: PUSH
35742: EMPTY
35743: LIST
35744: LIST
35745: PUSH
35746: LD_INT 0
35748: PUSH
35749: LD_INT 1
35751: PUSH
35752: EMPTY
35753: LIST
35754: LIST
35755: PUSH
35756: LD_INT 1
35758: NEG
35759: PUSH
35760: LD_INT 0
35762: PUSH
35763: EMPTY
35764: LIST
35765: LIST
35766: PUSH
35767: LD_INT 1
35769: NEG
35770: PUSH
35771: LD_INT 1
35773: NEG
35774: PUSH
35775: EMPTY
35776: LIST
35777: LIST
35778: PUSH
35779: LD_INT 1
35781: NEG
35782: PUSH
35783: LD_INT 2
35785: NEG
35786: PUSH
35787: EMPTY
35788: LIST
35789: LIST
35790: PUSH
35791: LD_INT 1
35793: PUSH
35794: LD_INT 2
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: PUSH
35801: EMPTY
35802: LIST
35803: LIST
35804: LIST
35805: LIST
35806: LIST
35807: LIST
35808: LIST
35809: LIST
35810: LIST
35811: ST_TO_ADDR
// Ext2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
35812: LD_ADDR_VAR 0 37
35816: PUSH
35817: LD_INT 0
35819: PUSH
35820: LD_INT 0
35822: PUSH
35823: EMPTY
35824: LIST
35825: LIST
35826: PUSH
35827: LD_INT 0
35829: PUSH
35830: LD_INT 1
35832: NEG
35833: PUSH
35834: EMPTY
35835: LIST
35836: LIST
35837: PUSH
35838: LD_INT 1
35840: PUSH
35841: LD_INT 0
35843: PUSH
35844: EMPTY
35845: LIST
35846: LIST
35847: PUSH
35848: LD_INT 1
35850: PUSH
35851: LD_INT 1
35853: PUSH
35854: EMPTY
35855: LIST
35856: LIST
35857: PUSH
35858: LD_INT 0
35860: PUSH
35861: LD_INT 1
35863: PUSH
35864: EMPTY
35865: LIST
35866: LIST
35867: PUSH
35868: LD_INT 1
35870: NEG
35871: PUSH
35872: LD_INT 0
35874: PUSH
35875: EMPTY
35876: LIST
35877: LIST
35878: PUSH
35879: LD_INT 1
35881: NEG
35882: PUSH
35883: LD_INT 1
35885: NEG
35886: PUSH
35887: EMPTY
35888: LIST
35889: LIST
35890: PUSH
35891: LD_INT 1
35893: PUSH
35894: LD_INT 1
35896: NEG
35897: PUSH
35898: EMPTY
35899: LIST
35900: LIST
35901: PUSH
35902: LD_INT 1
35904: NEG
35905: PUSH
35906: LD_INT 1
35908: PUSH
35909: EMPTY
35910: LIST
35911: LIST
35912: PUSH
35913: EMPTY
35914: LIST
35915: LIST
35916: LIST
35917: LIST
35918: LIST
35919: LIST
35920: LIST
35921: LIST
35922: LIST
35923: ST_TO_ADDR
// Ext3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
35924: LD_ADDR_VAR 0 38
35928: PUSH
35929: LD_INT 0
35931: PUSH
35932: LD_INT 0
35934: PUSH
35935: EMPTY
35936: LIST
35937: LIST
35938: PUSH
35939: LD_INT 0
35941: PUSH
35942: LD_INT 1
35944: NEG
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: PUSH
35950: LD_INT 1
35952: PUSH
35953: LD_INT 0
35955: PUSH
35956: EMPTY
35957: LIST
35958: LIST
35959: PUSH
35960: LD_INT 1
35962: PUSH
35963: LD_INT 1
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: PUSH
35970: LD_INT 0
35972: PUSH
35973: LD_INT 1
35975: PUSH
35976: EMPTY
35977: LIST
35978: LIST
35979: PUSH
35980: LD_INT 1
35982: NEG
35983: PUSH
35984: LD_INT 0
35986: PUSH
35987: EMPTY
35988: LIST
35989: LIST
35990: PUSH
35991: LD_INT 1
35993: NEG
35994: PUSH
35995: LD_INT 1
35997: NEG
35998: PUSH
35999: EMPTY
36000: LIST
36001: LIST
36002: PUSH
36003: LD_INT 2
36005: PUSH
36006: LD_INT 1
36008: PUSH
36009: EMPTY
36010: LIST
36011: LIST
36012: PUSH
36013: LD_INT 2
36015: NEG
36016: PUSH
36017: LD_INT 1
36019: NEG
36020: PUSH
36021: EMPTY
36022: LIST
36023: LIST
36024: PUSH
36025: EMPTY
36026: LIST
36027: LIST
36028: LIST
36029: LIST
36030: LIST
36031: LIST
36032: LIST
36033: LIST
36034: LIST
36035: ST_TO_ADDR
// Ext4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
36036: LD_ADDR_VAR 0 39
36040: PUSH
36041: LD_INT 0
36043: PUSH
36044: LD_INT 0
36046: PUSH
36047: EMPTY
36048: LIST
36049: LIST
36050: PUSH
36051: LD_INT 0
36053: PUSH
36054: LD_INT 1
36056: NEG
36057: PUSH
36058: EMPTY
36059: LIST
36060: LIST
36061: PUSH
36062: LD_INT 1
36064: PUSH
36065: LD_INT 0
36067: PUSH
36068: EMPTY
36069: LIST
36070: LIST
36071: PUSH
36072: LD_INT 1
36074: PUSH
36075: LD_INT 1
36077: PUSH
36078: EMPTY
36079: LIST
36080: LIST
36081: PUSH
36082: LD_INT 0
36084: PUSH
36085: LD_INT 1
36087: PUSH
36088: EMPTY
36089: LIST
36090: LIST
36091: PUSH
36092: LD_INT 1
36094: NEG
36095: PUSH
36096: LD_INT 0
36098: PUSH
36099: EMPTY
36100: LIST
36101: LIST
36102: PUSH
36103: LD_INT 1
36105: NEG
36106: PUSH
36107: LD_INT 1
36109: NEG
36110: PUSH
36111: EMPTY
36112: LIST
36113: LIST
36114: PUSH
36115: LD_INT 1
36117: NEG
36118: PUSH
36119: LD_INT 2
36121: NEG
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: PUSH
36127: LD_INT 1
36129: PUSH
36130: LD_INT 2
36132: PUSH
36133: EMPTY
36134: LIST
36135: LIST
36136: PUSH
36137: EMPTY
36138: LIST
36139: LIST
36140: LIST
36141: LIST
36142: LIST
36143: LIST
36144: LIST
36145: LIST
36146: LIST
36147: ST_TO_ADDR
// Ext5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
36148: LD_ADDR_VAR 0 40
36152: PUSH
36153: LD_INT 0
36155: PUSH
36156: LD_INT 0
36158: PUSH
36159: EMPTY
36160: LIST
36161: LIST
36162: PUSH
36163: LD_INT 0
36165: PUSH
36166: LD_INT 1
36168: NEG
36169: PUSH
36170: EMPTY
36171: LIST
36172: LIST
36173: PUSH
36174: LD_INT 1
36176: PUSH
36177: LD_INT 0
36179: PUSH
36180: EMPTY
36181: LIST
36182: LIST
36183: PUSH
36184: LD_INT 1
36186: PUSH
36187: LD_INT 1
36189: PUSH
36190: EMPTY
36191: LIST
36192: LIST
36193: PUSH
36194: LD_INT 0
36196: PUSH
36197: LD_INT 1
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PUSH
36204: LD_INT 1
36206: NEG
36207: PUSH
36208: LD_INT 0
36210: PUSH
36211: EMPTY
36212: LIST
36213: LIST
36214: PUSH
36215: LD_INT 1
36217: NEG
36218: PUSH
36219: LD_INT 1
36221: NEG
36222: PUSH
36223: EMPTY
36224: LIST
36225: LIST
36226: PUSH
36227: LD_INT 1
36229: PUSH
36230: LD_INT 1
36232: NEG
36233: PUSH
36234: EMPTY
36235: LIST
36236: LIST
36237: PUSH
36238: LD_INT 1
36240: NEG
36241: PUSH
36242: LD_INT 1
36244: PUSH
36245: EMPTY
36246: LIST
36247: LIST
36248: PUSH
36249: EMPTY
36250: LIST
36251: LIST
36252: LIST
36253: LIST
36254: LIST
36255: LIST
36256: LIST
36257: LIST
36258: LIST
36259: ST_TO_ADDR
// Lab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36260: LD_ADDR_VAR 0 41
36264: PUSH
36265: LD_INT 0
36267: PUSH
36268: LD_INT 0
36270: PUSH
36271: EMPTY
36272: LIST
36273: LIST
36274: PUSH
36275: LD_INT 0
36277: PUSH
36278: LD_INT 1
36280: NEG
36281: PUSH
36282: EMPTY
36283: LIST
36284: LIST
36285: PUSH
36286: LD_INT 1
36288: PUSH
36289: LD_INT 0
36291: PUSH
36292: EMPTY
36293: LIST
36294: LIST
36295: PUSH
36296: LD_INT 1
36298: PUSH
36299: LD_INT 1
36301: PUSH
36302: EMPTY
36303: LIST
36304: LIST
36305: PUSH
36306: LD_INT 0
36308: PUSH
36309: LD_INT 1
36311: PUSH
36312: EMPTY
36313: LIST
36314: LIST
36315: PUSH
36316: LD_INT 1
36318: NEG
36319: PUSH
36320: LD_INT 0
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: PUSH
36327: LD_INT 1
36329: NEG
36330: PUSH
36331: LD_INT 1
36333: NEG
36334: PUSH
36335: EMPTY
36336: LIST
36337: LIST
36338: PUSH
36339: LD_INT 1
36341: NEG
36342: PUSH
36343: LD_INT 2
36345: NEG
36346: PUSH
36347: EMPTY
36348: LIST
36349: LIST
36350: PUSH
36351: LD_INT 1
36353: PUSH
36354: LD_INT 1
36356: NEG
36357: PUSH
36358: EMPTY
36359: LIST
36360: LIST
36361: PUSH
36362: LD_INT 2
36364: PUSH
36365: LD_INT 0
36367: PUSH
36368: EMPTY
36369: LIST
36370: LIST
36371: PUSH
36372: LD_INT 2
36374: PUSH
36375: LD_INT 1
36377: PUSH
36378: EMPTY
36379: LIST
36380: LIST
36381: PUSH
36382: LD_INT 2
36384: PUSH
36385: LD_INT 2
36387: PUSH
36388: EMPTY
36389: LIST
36390: LIST
36391: PUSH
36392: LD_INT 1
36394: PUSH
36395: LD_INT 2
36397: PUSH
36398: EMPTY
36399: LIST
36400: LIST
36401: PUSH
36402: LD_INT 1
36404: NEG
36405: PUSH
36406: LD_INT 1
36408: PUSH
36409: EMPTY
36410: LIST
36411: LIST
36412: PUSH
36413: LD_INT 2
36415: NEG
36416: PUSH
36417: LD_INT 0
36419: PUSH
36420: EMPTY
36421: LIST
36422: LIST
36423: PUSH
36424: LD_INT 2
36426: NEG
36427: PUSH
36428: LD_INT 1
36430: NEG
36431: PUSH
36432: EMPTY
36433: LIST
36434: LIST
36435: PUSH
36436: LD_INT 2
36438: NEG
36439: PUSH
36440: LD_INT 2
36442: NEG
36443: PUSH
36444: EMPTY
36445: LIST
36446: LIST
36447: PUSH
36448: LD_INT 2
36450: NEG
36451: PUSH
36452: LD_INT 3
36454: NEG
36455: PUSH
36456: EMPTY
36457: LIST
36458: LIST
36459: PUSH
36460: LD_INT 2
36462: PUSH
36463: LD_INT 1
36465: NEG
36466: PUSH
36467: EMPTY
36468: LIST
36469: LIST
36470: PUSH
36471: LD_INT 3
36473: PUSH
36474: LD_INT 0
36476: PUSH
36477: EMPTY
36478: LIST
36479: LIST
36480: PUSH
36481: LD_INT 3
36483: PUSH
36484: LD_INT 1
36486: PUSH
36487: EMPTY
36488: LIST
36489: LIST
36490: PUSH
36491: LD_INT 3
36493: PUSH
36494: LD_INT 2
36496: PUSH
36497: EMPTY
36498: LIST
36499: LIST
36500: PUSH
36501: LD_INT 3
36503: PUSH
36504: LD_INT 3
36506: PUSH
36507: EMPTY
36508: LIST
36509: LIST
36510: PUSH
36511: LD_INT 2
36513: PUSH
36514: LD_INT 3
36516: PUSH
36517: EMPTY
36518: LIST
36519: LIST
36520: PUSH
36521: LD_INT 2
36523: NEG
36524: PUSH
36525: LD_INT 1
36527: PUSH
36528: EMPTY
36529: LIST
36530: LIST
36531: PUSH
36532: LD_INT 3
36534: NEG
36535: PUSH
36536: LD_INT 0
36538: PUSH
36539: EMPTY
36540: LIST
36541: LIST
36542: PUSH
36543: LD_INT 3
36545: NEG
36546: PUSH
36547: LD_INT 1
36549: NEG
36550: PUSH
36551: EMPTY
36552: LIST
36553: LIST
36554: PUSH
36555: LD_INT 3
36557: NEG
36558: PUSH
36559: LD_INT 2
36561: NEG
36562: PUSH
36563: EMPTY
36564: LIST
36565: LIST
36566: PUSH
36567: LD_INT 3
36569: NEG
36570: PUSH
36571: LD_INT 3
36573: NEG
36574: PUSH
36575: EMPTY
36576: LIST
36577: LIST
36578: PUSH
36579: EMPTY
36580: LIST
36581: LIST
36582: LIST
36583: LIST
36584: LIST
36585: LIST
36586: LIST
36587: LIST
36588: LIST
36589: LIST
36590: LIST
36591: LIST
36592: LIST
36593: LIST
36594: LIST
36595: LIST
36596: LIST
36597: LIST
36598: LIST
36599: LIST
36600: LIST
36601: LIST
36602: LIST
36603: LIST
36604: LIST
36605: LIST
36606: LIST
36607: LIST
36608: LIST
36609: ST_TO_ADDR
// Lab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
36610: LD_ADDR_VAR 0 42
36614: PUSH
36615: LD_INT 0
36617: PUSH
36618: LD_INT 0
36620: PUSH
36621: EMPTY
36622: LIST
36623: LIST
36624: PUSH
36625: LD_INT 0
36627: PUSH
36628: LD_INT 1
36630: NEG
36631: PUSH
36632: EMPTY
36633: LIST
36634: LIST
36635: PUSH
36636: LD_INT 1
36638: PUSH
36639: LD_INT 0
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PUSH
36646: LD_INT 1
36648: PUSH
36649: LD_INT 1
36651: PUSH
36652: EMPTY
36653: LIST
36654: LIST
36655: PUSH
36656: LD_INT 0
36658: PUSH
36659: LD_INT 1
36661: PUSH
36662: EMPTY
36663: LIST
36664: LIST
36665: PUSH
36666: LD_INT 1
36668: NEG
36669: PUSH
36670: LD_INT 0
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: PUSH
36677: LD_INT 1
36679: NEG
36680: PUSH
36681: LD_INT 1
36683: NEG
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: PUSH
36689: LD_INT 1
36691: NEG
36692: PUSH
36693: LD_INT 2
36695: NEG
36696: PUSH
36697: EMPTY
36698: LIST
36699: LIST
36700: PUSH
36701: LD_INT 0
36703: PUSH
36704: LD_INT 2
36706: NEG
36707: PUSH
36708: EMPTY
36709: LIST
36710: LIST
36711: PUSH
36712: LD_INT 1
36714: PUSH
36715: LD_INT 1
36717: NEG
36718: PUSH
36719: EMPTY
36720: LIST
36721: LIST
36722: PUSH
36723: LD_INT 2
36725: PUSH
36726: LD_INT 1
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: PUSH
36733: LD_INT 2
36735: PUSH
36736: LD_INT 2
36738: PUSH
36739: EMPTY
36740: LIST
36741: LIST
36742: PUSH
36743: LD_INT 1
36745: PUSH
36746: LD_INT 2
36748: PUSH
36749: EMPTY
36750: LIST
36751: LIST
36752: PUSH
36753: LD_INT 0
36755: PUSH
36756: LD_INT 2
36758: PUSH
36759: EMPTY
36760: LIST
36761: LIST
36762: PUSH
36763: LD_INT 1
36765: NEG
36766: PUSH
36767: LD_INT 1
36769: PUSH
36770: EMPTY
36771: LIST
36772: LIST
36773: PUSH
36774: LD_INT 2
36776: NEG
36777: PUSH
36778: LD_INT 1
36780: NEG
36781: PUSH
36782: EMPTY
36783: LIST
36784: LIST
36785: PUSH
36786: LD_INT 2
36788: NEG
36789: PUSH
36790: LD_INT 2
36792: NEG
36793: PUSH
36794: EMPTY
36795: LIST
36796: LIST
36797: PUSH
36798: LD_INT 2
36800: NEG
36801: PUSH
36802: LD_INT 3
36804: NEG
36805: PUSH
36806: EMPTY
36807: LIST
36808: LIST
36809: PUSH
36810: LD_INT 1
36812: NEG
36813: PUSH
36814: LD_INT 3
36816: NEG
36817: PUSH
36818: EMPTY
36819: LIST
36820: LIST
36821: PUSH
36822: LD_INT 0
36824: PUSH
36825: LD_INT 3
36827: NEG
36828: PUSH
36829: EMPTY
36830: LIST
36831: LIST
36832: PUSH
36833: LD_INT 1
36835: PUSH
36836: LD_INT 2
36838: NEG
36839: PUSH
36840: EMPTY
36841: LIST
36842: LIST
36843: PUSH
36844: LD_INT 3
36846: PUSH
36847: LD_INT 2
36849: PUSH
36850: EMPTY
36851: LIST
36852: LIST
36853: PUSH
36854: LD_INT 3
36856: PUSH
36857: LD_INT 3
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: PUSH
36864: LD_INT 2
36866: PUSH
36867: LD_INT 3
36869: PUSH
36870: EMPTY
36871: LIST
36872: LIST
36873: PUSH
36874: LD_INT 1
36876: PUSH
36877: LD_INT 3
36879: PUSH
36880: EMPTY
36881: LIST
36882: LIST
36883: PUSH
36884: LD_INT 0
36886: PUSH
36887: LD_INT 3
36889: PUSH
36890: EMPTY
36891: LIST
36892: LIST
36893: PUSH
36894: LD_INT 1
36896: NEG
36897: PUSH
36898: LD_INT 2
36900: PUSH
36901: EMPTY
36902: LIST
36903: LIST
36904: PUSH
36905: LD_INT 3
36907: NEG
36908: PUSH
36909: LD_INT 2
36911: NEG
36912: PUSH
36913: EMPTY
36914: LIST
36915: LIST
36916: PUSH
36917: LD_INT 3
36919: NEG
36920: PUSH
36921: LD_INT 3
36923: NEG
36924: PUSH
36925: EMPTY
36926: LIST
36927: LIST
36928: PUSH
36929: EMPTY
36930: LIST
36931: LIST
36932: LIST
36933: LIST
36934: LIST
36935: LIST
36936: LIST
36937: LIST
36938: LIST
36939: LIST
36940: LIST
36941: LIST
36942: LIST
36943: LIST
36944: LIST
36945: LIST
36946: LIST
36947: LIST
36948: LIST
36949: LIST
36950: LIST
36951: LIST
36952: LIST
36953: LIST
36954: LIST
36955: LIST
36956: LIST
36957: LIST
36958: LIST
36959: ST_TO_ADDR
// Lab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
36960: LD_ADDR_VAR 0 43
36964: PUSH
36965: LD_INT 0
36967: PUSH
36968: LD_INT 0
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: PUSH
36975: LD_INT 0
36977: PUSH
36978: LD_INT 1
36980: NEG
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: PUSH
36986: LD_INT 1
36988: PUSH
36989: LD_INT 0
36991: PUSH
36992: EMPTY
36993: LIST
36994: LIST
36995: PUSH
36996: LD_INT 1
36998: PUSH
36999: LD_INT 1
37001: PUSH
37002: EMPTY
37003: LIST
37004: LIST
37005: PUSH
37006: LD_INT 0
37008: PUSH
37009: LD_INT 1
37011: PUSH
37012: EMPTY
37013: LIST
37014: LIST
37015: PUSH
37016: LD_INT 1
37018: NEG
37019: PUSH
37020: LD_INT 0
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: PUSH
37027: LD_INT 1
37029: NEG
37030: PUSH
37031: LD_INT 1
37033: NEG
37034: PUSH
37035: EMPTY
37036: LIST
37037: LIST
37038: PUSH
37039: LD_INT 1
37041: NEG
37042: PUSH
37043: LD_INT 2
37045: NEG
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: PUSH
37051: LD_INT 0
37053: PUSH
37054: LD_INT 2
37056: NEG
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: PUSH
37062: LD_INT 1
37064: PUSH
37065: LD_INT 1
37067: NEG
37068: PUSH
37069: EMPTY
37070: LIST
37071: LIST
37072: PUSH
37073: LD_INT 2
37075: PUSH
37076: LD_INT 0
37078: PUSH
37079: EMPTY
37080: LIST
37081: LIST
37082: PUSH
37083: LD_INT 2
37085: PUSH
37086: LD_INT 1
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: PUSH
37093: LD_INT 1
37095: PUSH
37096: LD_INT 2
37098: PUSH
37099: EMPTY
37100: LIST
37101: LIST
37102: PUSH
37103: LD_INT 0
37105: PUSH
37106: LD_INT 2
37108: PUSH
37109: EMPTY
37110: LIST
37111: LIST
37112: PUSH
37113: LD_INT 1
37115: NEG
37116: PUSH
37117: LD_INT 1
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: PUSH
37124: LD_INT 2
37126: NEG
37127: PUSH
37128: LD_INT 0
37130: PUSH
37131: EMPTY
37132: LIST
37133: LIST
37134: PUSH
37135: LD_INT 2
37137: NEG
37138: PUSH
37139: LD_INT 1
37141: NEG
37142: PUSH
37143: EMPTY
37144: LIST
37145: LIST
37146: PUSH
37147: LD_INT 1
37149: NEG
37150: PUSH
37151: LD_INT 3
37153: NEG
37154: PUSH
37155: EMPTY
37156: LIST
37157: LIST
37158: PUSH
37159: LD_INT 0
37161: PUSH
37162: LD_INT 3
37164: NEG
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: PUSH
37170: LD_INT 1
37172: PUSH
37173: LD_INT 2
37175: NEG
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: PUSH
37181: LD_INT 2
37183: PUSH
37184: LD_INT 1
37186: NEG
37187: PUSH
37188: EMPTY
37189: LIST
37190: LIST
37191: PUSH
37192: LD_INT 3
37194: PUSH
37195: LD_INT 0
37197: PUSH
37198: EMPTY
37199: LIST
37200: LIST
37201: PUSH
37202: LD_INT 3
37204: PUSH
37205: LD_INT 1
37207: PUSH
37208: EMPTY
37209: LIST
37210: LIST
37211: PUSH
37212: LD_INT 1
37214: PUSH
37215: LD_INT 3
37217: PUSH
37218: EMPTY
37219: LIST
37220: LIST
37221: PUSH
37222: LD_INT 0
37224: PUSH
37225: LD_INT 3
37227: PUSH
37228: EMPTY
37229: LIST
37230: LIST
37231: PUSH
37232: LD_INT 1
37234: NEG
37235: PUSH
37236: LD_INT 2
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: PUSH
37243: LD_INT 2
37245: NEG
37246: PUSH
37247: LD_INT 1
37249: PUSH
37250: EMPTY
37251: LIST
37252: LIST
37253: PUSH
37254: LD_INT 3
37256: NEG
37257: PUSH
37258: LD_INT 0
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: LD_INT 3
37267: NEG
37268: PUSH
37269: LD_INT 1
37271: NEG
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: PUSH
37277: EMPTY
37278: LIST
37279: LIST
37280: LIST
37281: LIST
37282: LIST
37283: LIST
37284: LIST
37285: LIST
37286: LIST
37287: LIST
37288: LIST
37289: LIST
37290: LIST
37291: LIST
37292: LIST
37293: LIST
37294: LIST
37295: LIST
37296: LIST
37297: LIST
37298: LIST
37299: LIST
37300: LIST
37301: LIST
37302: LIST
37303: LIST
37304: LIST
37305: LIST
37306: LIST
37307: ST_TO_ADDR
// Lab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37308: LD_ADDR_VAR 0 44
37312: PUSH
37313: LD_INT 0
37315: PUSH
37316: LD_INT 0
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: PUSH
37323: LD_INT 0
37325: PUSH
37326: LD_INT 1
37328: NEG
37329: PUSH
37330: EMPTY
37331: LIST
37332: LIST
37333: PUSH
37334: LD_INT 1
37336: PUSH
37337: LD_INT 0
37339: PUSH
37340: EMPTY
37341: LIST
37342: LIST
37343: PUSH
37344: LD_INT 1
37346: PUSH
37347: LD_INT 1
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: PUSH
37354: LD_INT 0
37356: PUSH
37357: LD_INT 1
37359: PUSH
37360: EMPTY
37361: LIST
37362: LIST
37363: PUSH
37364: LD_INT 1
37366: NEG
37367: PUSH
37368: LD_INT 0
37370: PUSH
37371: EMPTY
37372: LIST
37373: LIST
37374: PUSH
37375: LD_INT 1
37377: NEG
37378: PUSH
37379: LD_INT 1
37381: NEG
37382: PUSH
37383: EMPTY
37384: LIST
37385: LIST
37386: PUSH
37387: LD_INT 1
37389: NEG
37390: PUSH
37391: LD_INT 2
37393: NEG
37394: PUSH
37395: EMPTY
37396: LIST
37397: LIST
37398: PUSH
37399: LD_INT 1
37401: PUSH
37402: LD_INT 1
37404: NEG
37405: PUSH
37406: EMPTY
37407: LIST
37408: LIST
37409: PUSH
37410: LD_INT 2
37412: PUSH
37413: LD_INT 0
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: PUSH
37420: LD_INT 2
37422: PUSH
37423: LD_INT 1
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: LD_INT 2
37432: PUSH
37433: LD_INT 2
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: LD_INT 1
37442: PUSH
37443: LD_INT 2
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: PUSH
37450: LD_INT 1
37452: NEG
37453: PUSH
37454: LD_INT 1
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: LD_INT 2
37463: NEG
37464: PUSH
37465: LD_INT 0
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: PUSH
37472: LD_INT 2
37474: NEG
37475: PUSH
37476: LD_INT 1
37478: NEG
37479: PUSH
37480: EMPTY
37481: LIST
37482: LIST
37483: PUSH
37484: LD_INT 2
37486: NEG
37487: PUSH
37488: LD_INT 2
37490: NEG
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: PUSH
37496: LD_INT 2
37498: NEG
37499: PUSH
37500: LD_INT 3
37502: NEG
37503: PUSH
37504: EMPTY
37505: LIST
37506: LIST
37507: PUSH
37508: LD_INT 2
37510: PUSH
37511: LD_INT 1
37513: NEG
37514: PUSH
37515: EMPTY
37516: LIST
37517: LIST
37518: PUSH
37519: LD_INT 3
37521: PUSH
37522: LD_INT 0
37524: PUSH
37525: EMPTY
37526: LIST
37527: LIST
37528: PUSH
37529: LD_INT 3
37531: PUSH
37532: LD_INT 1
37534: PUSH
37535: EMPTY
37536: LIST
37537: LIST
37538: PUSH
37539: LD_INT 3
37541: PUSH
37542: LD_INT 2
37544: PUSH
37545: EMPTY
37546: LIST
37547: LIST
37548: PUSH
37549: LD_INT 3
37551: PUSH
37552: LD_INT 3
37554: PUSH
37555: EMPTY
37556: LIST
37557: LIST
37558: PUSH
37559: LD_INT 2
37561: PUSH
37562: LD_INT 3
37564: PUSH
37565: EMPTY
37566: LIST
37567: LIST
37568: PUSH
37569: LD_INT 2
37571: NEG
37572: PUSH
37573: LD_INT 1
37575: PUSH
37576: EMPTY
37577: LIST
37578: LIST
37579: PUSH
37580: LD_INT 3
37582: NEG
37583: PUSH
37584: LD_INT 0
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PUSH
37591: LD_INT 3
37593: NEG
37594: PUSH
37595: LD_INT 1
37597: NEG
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: PUSH
37603: LD_INT 3
37605: NEG
37606: PUSH
37607: LD_INT 2
37609: NEG
37610: PUSH
37611: EMPTY
37612: LIST
37613: LIST
37614: PUSH
37615: LD_INT 3
37617: NEG
37618: PUSH
37619: LD_INT 3
37621: NEG
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: PUSH
37627: EMPTY
37628: LIST
37629: LIST
37630: LIST
37631: LIST
37632: LIST
37633: LIST
37634: LIST
37635: LIST
37636: LIST
37637: LIST
37638: LIST
37639: LIST
37640: LIST
37641: LIST
37642: LIST
37643: LIST
37644: LIST
37645: LIST
37646: LIST
37647: LIST
37648: LIST
37649: LIST
37650: LIST
37651: LIST
37652: LIST
37653: LIST
37654: LIST
37655: LIST
37656: LIST
37657: ST_TO_ADDR
// Lab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37658: LD_ADDR_VAR 0 45
37662: PUSH
37663: LD_INT 0
37665: PUSH
37666: LD_INT 0
37668: PUSH
37669: EMPTY
37670: LIST
37671: LIST
37672: PUSH
37673: LD_INT 0
37675: PUSH
37676: LD_INT 1
37678: NEG
37679: PUSH
37680: EMPTY
37681: LIST
37682: LIST
37683: PUSH
37684: LD_INT 1
37686: PUSH
37687: LD_INT 0
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: PUSH
37694: LD_INT 1
37696: PUSH
37697: LD_INT 1
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PUSH
37704: LD_INT 0
37706: PUSH
37707: LD_INT 1
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PUSH
37714: LD_INT 1
37716: NEG
37717: PUSH
37718: LD_INT 0
37720: PUSH
37721: EMPTY
37722: LIST
37723: LIST
37724: PUSH
37725: LD_INT 1
37727: NEG
37728: PUSH
37729: LD_INT 1
37731: NEG
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: PUSH
37737: LD_INT 1
37739: NEG
37740: PUSH
37741: LD_INT 2
37743: NEG
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: PUSH
37749: LD_INT 0
37751: PUSH
37752: LD_INT 2
37754: NEG
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: PUSH
37760: LD_INT 1
37762: PUSH
37763: LD_INT 1
37765: NEG
37766: PUSH
37767: EMPTY
37768: LIST
37769: LIST
37770: PUSH
37771: LD_INT 2
37773: PUSH
37774: LD_INT 1
37776: PUSH
37777: EMPTY
37778: LIST
37779: LIST
37780: PUSH
37781: LD_INT 2
37783: PUSH
37784: LD_INT 2
37786: PUSH
37787: EMPTY
37788: LIST
37789: LIST
37790: PUSH
37791: LD_INT 1
37793: PUSH
37794: LD_INT 2
37796: PUSH
37797: EMPTY
37798: LIST
37799: LIST
37800: PUSH
37801: LD_INT 0
37803: PUSH
37804: LD_INT 2
37806: PUSH
37807: EMPTY
37808: LIST
37809: LIST
37810: PUSH
37811: LD_INT 1
37813: NEG
37814: PUSH
37815: LD_INT 1
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: PUSH
37822: LD_INT 2
37824: NEG
37825: PUSH
37826: LD_INT 1
37828: NEG
37829: PUSH
37830: EMPTY
37831: LIST
37832: LIST
37833: PUSH
37834: LD_INT 2
37836: NEG
37837: PUSH
37838: LD_INT 2
37840: NEG
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: PUSH
37846: LD_INT 2
37848: NEG
37849: PUSH
37850: LD_INT 3
37852: NEG
37853: PUSH
37854: EMPTY
37855: LIST
37856: LIST
37857: PUSH
37858: LD_INT 1
37860: NEG
37861: PUSH
37862: LD_INT 3
37864: NEG
37865: PUSH
37866: EMPTY
37867: LIST
37868: LIST
37869: PUSH
37870: LD_INT 0
37872: PUSH
37873: LD_INT 3
37875: NEG
37876: PUSH
37877: EMPTY
37878: LIST
37879: LIST
37880: PUSH
37881: LD_INT 1
37883: PUSH
37884: LD_INT 2
37886: NEG
37887: PUSH
37888: EMPTY
37889: LIST
37890: LIST
37891: PUSH
37892: LD_INT 3
37894: PUSH
37895: LD_INT 2
37897: PUSH
37898: EMPTY
37899: LIST
37900: LIST
37901: PUSH
37902: LD_INT 3
37904: PUSH
37905: LD_INT 3
37907: PUSH
37908: EMPTY
37909: LIST
37910: LIST
37911: PUSH
37912: LD_INT 2
37914: PUSH
37915: LD_INT 3
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: PUSH
37922: LD_INT 1
37924: PUSH
37925: LD_INT 3
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: PUSH
37932: LD_INT 0
37934: PUSH
37935: LD_INT 3
37937: PUSH
37938: EMPTY
37939: LIST
37940: LIST
37941: PUSH
37942: LD_INT 1
37944: NEG
37945: PUSH
37946: LD_INT 2
37948: PUSH
37949: EMPTY
37950: LIST
37951: LIST
37952: PUSH
37953: LD_INT 3
37955: NEG
37956: PUSH
37957: LD_INT 2
37959: NEG
37960: PUSH
37961: EMPTY
37962: LIST
37963: LIST
37964: PUSH
37965: LD_INT 3
37967: NEG
37968: PUSH
37969: LD_INT 3
37971: NEG
37972: PUSH
37973: EMPTY
37974: LIST
37975: LIST
37976: PUSH
37977: EMPTY
37978: LIST
37979: LIST
37980: LIST
37981: LIST
37982: LIST
37983: LIST
37984: LIST
37985: LIST
37986: LIST
37987: LIST
37988: LIST
37989: LIST
37990: LIST
37991: LIST
37992: LIST
37993: LIST
37994: LIST
37995: LIST
37996: LIST
37997: LIST
37998: LIST
37999: LIST
38000: LIST
38001: LIST
38002: LIST
38003: LIST
38004: LIST
38005: LIST
38006: LIST
38007: ST_TO_ADDR
// Lab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
38008: LD_ADDR_VAR 0 46
38012: PUSH
38013: LD_INT 0
38015: PUSH
38016: LD_INT 0
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: PUSH
38023: LD_INT 0
38025: PUSH
38026: LD_INT 1
38028: NEG
38029: PUSH
38030: EMPTY
38031: LIST
38032: LIST
38033: PUSH
38034: LD_INT 1
38036: PUSH
38037: LD_INT 0
38039: PUSH
38040: EMPTY
38041: LIST
38042: LIST
38043: PUSH
38044: LD_INT 1
38046: PUSH
38047: LD_INT 1
38049: PUSH
38050: EMPTY
38051: LIST
38052: LIST
38053: PUSH
38054: LD_INT 0
38056: PUSH
38057: LD_INT 1
38059: PUSH
38060: EMPTY
38061: LIST
38062: LIST
38063: PUSH
38064: LD_INT 1
38066: NEG
38067: PUSH
38068: LD_INT 0
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: PUSH
38075: LD_INT 1
38077: NEG
38078: PUSH
38079: LD_INT 1
38081: NEG
38082: PUSH
38083: EMPTY
38084: LIST
38085: LIST
38086: PUSH
38087: LD_INT 1
38089: NEG
38090: PUSH
38091: LD_INT 2
38093: NEG
38094: PUSH
38095: EMPTY
38096: LIST
38097: LIST
38098: PUSH
38099: LD_INT 0
38101: PUSH
38102: LD_INT 2
38104: NEG
38105: PUSH
38106: EMPTY
38107: LIST
38108: LIST
38109: PUSH
38110: LD_INT 1
38112: PUSH
38113: LD_INT 1
38115: NEG
38116: PUSH
38117: EMPTY
38118: LIST
38119: LIST
38120: PUSH
38121: LD_INT 2
38123: PUSH
38124: LD_INT 0
38126: PUSH
38127: EMPTY
38128: LIST
38129: LIST
38130: PUSH
38131: LD_INT 2
38133: PUSH
38134: LD_INT 1
38136: PUSH
38137: EMPTY
38138: LIST
38139: LIST
38140: PUSH
38141: LD_INT 1
38143: PUSH
38144: LD_INT 2
38146: PUSH
38147: EMPTY
38148: LIST
38149: LIST
38150: PUSH
38151: LD_INT 0
38153: PUSH
38154: LD_INT 2
38156: PUSH
38157: EMPTY
38158: LIST
38159: LIST
38160: PUSH
38161: LD_INT 1
38163: NEG
38164: PUSH
38165: LD_INT 1
38167: PUSH
38168: EMPTY
38169: LIST
38170: LIST
38171: PUSH
38172: LD_INT 2
38174: NEG
38175: PUSH
38176: LD_INT 0
38178: PUSH
38179: EMPTY
38180: LIST
38181: LIST
38182: PUSH
38183: LD_INT 2
38185: NEG
38186: PUSH
38187: LD_INT 1
38189: NEG
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: PUSH
38195: LD_INT 1
38197: NEG
38198: PUSH
38199: LD_INT 3
38201: NEG
38202: PUSH
38203: EMPTY
38204: LIST
38205: LIST
38206: PUSH
38207: LD_INT 0
38209: PUSH
38210: LD_INT 3
38212: NEG
38213: PUSH
38214: EMPTY
38215: LIST
38216: LIST
38217: PUSH
38218: LD_INT 1
38220: PUSH
38221: LD_INT 2
38223: NEG
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: PUSH
38229: LD_INT 2
38231: PUSH
38232: LD_INT 1
38234: NEG
38235: PUSH
38236: EMPTY
38237: LIST
38238: LIST
38239: PUSH
38240: LD_INT 3
38242: PUSH
38243: LD_INT 0
38245: PUSH
38246: EMPTY
38247: LIST
38248: LIST
38249: PUSH
38250: LD_INT 3
38252: PUSH
38253: LD_INT 1
38255: PUSH
38256: EMPTY
38257: LIST
38258: LIST
38259: PUSH
38260: LD_INT 1
38262: PUSH
38263: LD_INT 3
38265: PUSH
38266: EMPTY
38267: LIST
38268: LIST
38269: PUSH
38270: LD_INT 0
38272: PUSH
38273: LD_INT 3
38275: PUSH
38276: EMPTY
38277: LIST
38278: LIST
38279: PUSH
38280: LD_INT 1
38282: NEG
38283: PUSH
38284: LD_INT 2
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: PUSH
38291: LD_INT 2
38293: NEG
38294: PUSH
38295: LD_INT 1
38297: PUSH
38298: EMPTY
38299: LIST
38300: LIST
38301: PUSH
38302: LD_INT 3
38304: NEG
38305: PUSH
38306: LD_INT 0
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: PUSH
38313: LD_INT 3
38315: NEG
38316: PUSH
38317: LD_INT 1
38319: NEG
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: LIST
38329: LIST
38330: LIST
38331: LIST
38332: LIST
38333: LIST
38334: LIST
38335: LIST
38336: LIST
38337: LIST
38338: LIST
38339: LIST
38340: LIST
38341: LIST
38342: LIST
38343: LIST
38344: LIST
38345: LIST
38346: LIST
38347: LIST
38348: LIST
38349: LIST
38350: LIST
38351: LIST
38352: LIST
38353: LIST
38354: LIST
38355: ST_TO_ADDR
// ControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
38356: LD_ADDR_VAR 0 47
38360: PUSH
38361: LD_INT 0
38363: PUSH
38364: LD_INT 0
38366: PUSH
38367: EMPTY
38368: LIST
38369: LIST
38370: PUSH
38371: LD_INT 0
38373: PUSH
38374: LD_INT 1
38376: NEG
38377: PUSH
38378: EMPTY
38379: LIST
38380: LIST
38381: PUSH
38382: LD_INT 1
38384: PUSH
38385: LD_INT 0
38387: PUSH
38388: EMPTY
38389: LIST
38390: LIST
38391: PUSH
38392: LD_INT 1
38394: PUSH
38395: LD_INT 1
38397: PUSH
38398: EMPTY
38399: LIST
38400: LIST
38401: PUSH
38402: LD_INT 0
38404: PUSH
38405: LD_INT 1
38407: PUSH
38408: EMPTY
38409: LIST
38410: LIST
38411: PUSH
38412: LD_INT 1
38414: NEG
38415: PUSH
38416: LD_INT 0
38418: PUSH
38419: EMPTY
38420: LIST
38421: LIST
38422: PUSH
38423: LD_INT 1
38425: NEG
38426: PUSH
38427: LD_INT 1
38429: NEG
38430: PUSH
38431: EMPTY
38432: LIST
38433: LIST
38434: PUSH
38435: LD_INT 1
38437: NEG
38438: PUSH
38439: LD_INT 2
38441: NEG
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: PUSH
38447: LD_INT 0
38449: PUSH
38450: LD_INT 2
38452: NEG
38453: PUSH
38454: EMPTY
38455: LIST
38456: LIST
38457: PUSH
38458: LD_INT 1
38460: PUSH
38461: LD_INT 1
38463: NEG
38464: PUSH
38465: EMPTY
38466: LIST
38467: LIST
38468: PUSH
38469: LD_INT 2
38471: NEG
38472: PUSH
38473: LD_INT 1
38475: NEG
38476: PUSH
38477: EMPTY
38478: LIST
38479: LIST
38480: PUSH
38481: LD_INT 2
38483: NEG
38484: PUSH
38485: LD_INT 2
38487: NEG
38488: PUSH
38489: EMPTY
38490: LIST
38491: LIST
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: LIST
38497: LIST
38498: LIST
38499: LIST
38500: LIST
38501: LIST
38502: LIST
38503: LIST
38504: LIST
38505: LIST
38506: ST_TO_ADDR
// ControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
38507: LD_ADDR_VAR 0 48
38511: PUSH
38512: LD_INT 0
38514: PUSH
38515: LD_INT 0
38517: PUSH
38518: EMPTY
38519: LIST
38520: LIST
38521: PUSH
38522: LD_INT 0
38524: PUSH
38525: LD_INT 1
38527: NEG
38528: PUSH
38529: EMPTY
38530: LIST
38531: LIST
38532: PUSH
38533: LD_INT 1
38535: PUSH
38536: LD_INT 0
38538: PUSH
38539: EMPTY
38540: LIST
38541: LIST
38542: PUSH
38543: LD_INT 1
38545: PUSH
38546: LD_INT 1
38548: PUSH
38549: EMPTY
38550: LIST
38551: LIST
38552: PUSH
38553: LD_INT 0
38555: PUSH
38556: LD_INT 1
38558: PUSH
38559: EMPTY
38560: LIST
38561: LIST
38562: PUSH
38563: LD_INT 1
38565: NEG
38566: PUSH
38567: LD_INT 0
38569: PUSH
38570: EMPTY
38571: LIST
38572: LIST
38573: PUSH
38574: LD_INT 1
38576: NEG
38577: PUSH
38578: LD_INT 1
38580: NEG
38581: PUSH
38582: EMPTY
38583: LIST
38584: LIST
38585: PUSH
38586: LD_INT 1
38588: NEG
38589: PUSH
38590: LD_INT 2
38592: NEG
38593: PUSH
38594: EMPTY
38595: LIST
38596: LIST
38597: PUSH
38598: LD_INT 0
38600: PUSH
38601: LD_INT 2
38603: NEG
38604: PUSH
38605: EMPTY
38606: LIST
38607: LIST
38608: PUSH
38609: LD_INT 1
38611: PUSH
38612: LD_INT 1
38614: NEG
38615: PUSH
38616: EMPTY
38617: LIST
38618: LIST
38619: PUSH
38620: LD_INT 2
38622: PUSH
38623: LD_INT 0
38625: PUSH
38626: EMPTY
38627: LIST
38628: LIST
38629: PUSH
38630: LD_INT 2
38632: PUSH
38633: LD_INT 1
38635: PUSH
38636: EMPTY
38637: LIST
38638: LIST
38639: PUSH
38640: EMPTY
38641: LIST
38642: LIST
38643: LIST
38644: LIST
38645: LIST
38646: LIST
38647: LIST
38648: LIST
38649: LIST
38650: LIST
38651: LIST
38652: LIST
38653: ST_TO_ADDR
// ControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
38654: LD_ADDR_VAR 0 49
38658: PUSH
38659: LD_INT 0
38661: PUSH
38662: LD_INT 0
38664: PUSH
38665: EMPTY
38666: LIST
38667: LIST
38668: PUSH
38669: LD_INT 0
38671: PUSH
38672: LD_INT 1
38674: NEG
38675: PUSH
38676: EMPTY
38677: LIST
38678: LIST
38679: PUSH
38680: LD_INT 1
38682: PUSH
38683: LD_INT 0
38685: PUSH
38686: EMPTY
38687: LIST
38688: LIST
38689: PUSH
38690: LD_INT 1
38692: PUSH
38693: LD_INT 1
38695: PUSH
38696: EMPTY
38697: LIST
38698: LIST
38699: PUSH
38700: LD_INT 0
38702: PUSH
38703: LD_INT 1
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: PUSH
38710: LD_INT 1
38712: NEG
38713: PUSH
38714: LD_INT 0
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: PUSH
38721: LD_INT 1
38723: NEG
38724: PUSH
38725: LD_INT 1
38727: NEG
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: PUSH
38733: LD_INT 1
38735: PUSH
38736: LD_INT 1
38738: NEG
38739: PUSH
38740: EMPTY
38741: LIST
38742: LIST
38743: PUSH
38744: LD_INT 2
38746: PUSH
38747: LD_INT 0
38749: PUSH
38750: EMPTY
38751: LIST
38752: LIST
38753: PUSH
38754: LD_INT 2
38756: PUSH
38757: LD_INT 1
38759: PUSH
38760: EMPTY
38761: LIST
38762: LIST
38763: PUSH
38764: LD_INT 2
38766: PUSH
38767: LD_INT 2
38769: PUSH
38770: EMPTY
38771: LIST
38772: LIST
38773: PUSH
38774: LD_INT 1
38776: PUSH
38777: LD_INT 2
38779: PUSH
38780: EMPTY
38781: LIST
38782: LIST
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: LIST
38788: LIST
38789: LIST
38790: LIST
38791: LIST
38792: LIST
38793: LIST
38794: LIST
38795: LIST
38796: LIST
38797: ST_TO_ADDR
// ControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
38798: LD_ADDR_VAR 0 50
38802: PUSH
38803: LD_INT 0
38805: PUSH
38806: LD_INT 0
38808: PUSH
38809: EMPTY
38810: LIST
38811: LIST
38812: PUSH
38813: LD_INT 0
38815: PUSH
38816: LD_INT 1
38818: NEG
38819: PUSH
38820: EMPTY
38821: LIST
38822: LIST
38823: PUSH
38824: LD_INT 1
38826: PUSH
38827: LD_INT 0
38829: PUSH
38830: EMPTY
38831: LIST
38832: LIST
38833: PUSH
38834: LD_INT 1
38836: PUSH
38837: LD_INT 1
38839: PUSH
38840: EMPTY
38841: LIST
38842: LIST
38843: PUSH
38844: LD_INT 0
38846: PUSH
38847: LD_INT 1
38849: PUSH
38850: EMPTY
38851: LIST
38852: LIST
38853: PUSH
38854: LD_INT 1
38856: NEG
38857: PUSH
38858: LD_INT 0
38860: PUSH
38861: EMPTY
38862: LIST
38863: LIST
38864: PUSH
38865: LD_INT 1
38867: NEG
38868: PUSH
38869: LD_INT 1
38871: NEG
38872: PUSH
38873: EMPTY
38874: LIST
38875: LIST
38876: PUSH
38877: LD_INT 2
38879: PUSH
38880: LD_INT 1
38882: PUSH
38883: EMPTY
38884: LIST
38885: LIST
38886: PUSH
38887: LD_INT 2
38889: PUSH
38890: LD_INT 2
38892: PUSH
38893: EMPTY
38894: LIST
38895: LIST
38896: PUSH
38897: LD_INT 1
38899: PUSH
38900: LD_INT 2
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: PUSH
38907: LD_INT 0
38909: PUSH
38910: LD_INT 2
38912: PUSH
38913: EMPTY
38914: LIST
38915: LIST
38916: PUSH
38917: LD_INT 1
38919: NEG
38920: PUSH
38921: LD_INT 1
38923: PUSH
38924: EMPTY
38925: LIST
38926: LIST
38927: PUSH
38928: EMPTY
38929: LIST
38930: LIST
38931: LIST
38932: LIST
38933: LIST
38934: LIST
38935: LIST
38936: LIST
38937: LIST
38938: LIST
38939: LIST
38940: LIST
38941: ST_TO_ADDR
// ControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
38942: LD_ADDR_VAR 0 51
38946: PUSH
38947: LD_INT 0
38949: PUSH
38950: LD_INT 0
38952: PUSH
38953: EMPTY
38954: LIST
38955: LIST
38956: PUSH
38957: LD_INT 0
38959: PUSH
38960: LD_INT 1
38962: NEG
38963: PUSH
38964: EMPTY
38965: LIST
38966: LIST
38967: PUSH
38968: LD_INT 1
38970: PUSH
38971: LD_INT 0
38973: PUSH
38974: EMPTY
38975: LIST
38976: LIST
38977: PUSH
38978: LD_INT 1
38980: PUSH
38981: LD_INT 1
38983: PUSH
38984: EMPTY
38985: LIST
38986: LIST
38987: PUSH
38988: LD_INT 0
38990: PUSH
38991: LD_INT 1
38993: PUSH
38994: EMPTY
38995: LIST
38996: LIST
38997: PUSH
38998: LD_INT 1
39000: NEG
39001: PUSH
39002: LD_INT 0
39004: PUSH
39005: EMPTY
39006: LIST
39007: LIST
39008: PUSH
39009: LD_INT 1
39011: NEG
39012: PUSH
39013: LD_INT 1
39015: NEG
39016: PUSH
39017: EMPTY
39018: LIST
39019: LIST
39020: PUSH
39021: LD_INT 1
39023: PUSH
39024: LD_INT 2
39026: PUSH
39027: EMPTY
39028: LIST
39029: LIST
39030: PUSH
39031: LD_INT 0
39033: PUSH
39034: LD_INT 2
39036: PUSH
39037: EMPTY
39038: LIST
39039: LIST
39040: PUSH
39041: LD_INT 1
39043: NEG
39044: PUSH
39045: LD_INT 1
39047: PUSH
39048: EMPTY
39049: LIST
39050: LIST
39051: PUSH
39052: LD_INT 2
39054: NEG
39055: PUSH
39056: LD_INT 0
39058: PUSH
39059: EMPTY
39060: LIST
39061: LIST
39062: PUSH
39063: LD_INT 2
39065: NEG
39066: PUSH
39067: LD_INT 1
39069: NEG
39070: PUSH
39071: EMPTY
39072: LIST
39073: LIST
39074: PUSH
39075: EMPTY
39076: LIST
39077: LIST
39078: LIST
39079: LIST
39080: LIST
39081: LIST
39082: LIST
39083: LIST
39084: LIST
39085: LIST
39086: LIST
39087: LIST
39088: ST_TO_ADDR
// ControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39089: LD_ADDR_VAR 0 52
39093: PUSH
39094: LD_INT 0
39096: PUSH
39097: LD_INT 0
39099: PUSH
39100: EMPTY
39101: LIST
39102: LIST
39103: PUSH
39104: LD_INT 0
39106: PUSH
39107: LD_INT 1
39109: NEG
39110: PUSH
39111: EMPTY
39112: LIST
39113: LIST
39114: PUSH
39115: LD_INT 1
39117: PUSH
39118: LD_INT 0
39120: PUSH
39121: EMPTY
39122: LIST
39123: LIST
39124: PUSH
39125: LD_INT 1
39127: PUSH
39128: LD_INT 1
39130: PUSH
39131: EMPTY
39132: LIST
39133: LIST
39134: PUSH
39135: LD_INT 0
39137: PUSH
39138: LD_INT 1
39140: PUSH
39141: EMPTY
39142: LIST
39143: LIST
39144: PUSH
39145: LD_INT 1
39147: NEG
39148: PUSH
39149: LD_INT 0
39151: PUSH
39152: EMPTY
39153: LIST
39154: LIST
39155: PUSH
39156: LD_INT 1
39158: NEG
39159: PUSH
39160: LD_INT 1
39162: NEG
39163: PUSH
39164: EMPTY
39165: LIST
39166: LIST
39167: PUSH
39168: LD_INT 1
39170: NEG
39171: PUSH
39172: LD_INT 2
39174: NEG
39175: PUSH
39176: EMPTY
39177: LIST
39178: LIST
39179: PUSH
39180: LD_INT 1
39182: NEG
39183: PUSH
39184: LD_INT 1
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: LD_INT 2
39193: NEG
39194: PUSH
39195: LD_INT 0
39197: PUSH
39198: EMPTY
39199: LIST
39200: LIST
39201: PUSH
39202: LD_INT 2
39204: NEG
39205: PUSH
39206: LD_INT 1
39208: NEG
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: LD_INT 2
39216: NEG
39217: PUSH
39218: LD_INT 2
39220: NEG
39221: PUSH
39222: EMPTY
39223: LIST
39224: LIST
39225: PUSH
39226: EMPTY
39227: LIST
39228: LIST
39229: LIST
39230: LIST
39231: LIST
39232: LIST
39233: LIST
39234: LIST
39235: LIST
39236: LIST
39237: LIST
39238: LIST
39239: ST_TO_ADDR
// Barracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39240: LD_ADDR_VAR 0 53
39244: PUSH
39245: LD_INT 0
39247: PUSH
39248: LD_INT 0
39250: PUSH
39251: EMPTY
39252: LIST
39253: LIST
39254: PUSH
39255: LD_INT 0
39257: PUSH
39258: LD_INT 1
39260: NEG
39261: PUSH
39262: EMPTY
39263: LIST
39264: LIST
39265: PUSH
39266: LD_INT 1
39268: PUSH
39269: LD_INT 0
39271: PUSH
39272: EMPTY
39273: LIST
39274: LIST
39275: PUSH
39276: LD_INT 1
39278: PUSH
39279: LD_INT 1
39281: PUSH
39282: EMPTY
39283: LIST
39284: LIST
39285: PUSH
39286: LD_INT 0
39288: PUSH
39289: LD_INT 1
39291: PUSH
39292: EMPTY
39293: LIST
39294: LIST
39295: PUSH
39296: LD_INT 1
39298: NEG
39299: PUSH
39300: LD_INT 0
39302: PUSH
39303: EMPTY
39304: LIST
39305: LIST
39306: PUSH
39307: LD_INT 1
39309: NEG
39310: PUSH
39311: LD_INT 1
39313: NEG
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 1
39321: NEG
39322: PUSH
39323: LD_INT 2
39325: NEG
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: PUSH
39331: LD_INT 0
39333: PUSH
39334: LD_INT 2
39336: NEG
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: PUSH
39342: LD_INT 1
39344: PUSH
39345: LD_INT 1
39347: NEG
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: PUSH
39353: LD_INT 2
39355: PUSH
39356: LD_INT 0
39358: PUSH
39359: EMPTY
39360: LIST
39361: LIST
39362: PUSH
39363: LD_INT 2
39365: PUSH
39366: LD_INT 1
39368: PUSH
39369: EMPTY
39370: LIST
39371: LIST
39372: PUSH
39373: LD_INT 2
39375: PUSH
39376: LD_INT 2
39378: PUSH
39379: EMPTY
39380: LIST
39381: LIST
39382: PUSH
39383: LD_INT 1
39385: PUSH
39386: LD_INT 2
39388: PUSH
39389: EMPTY
39390: LIST
39391: LIST
39392: PUSH
39393: LD_INT 0
39395: PUSH
39396: LD_INT 2
39398: PUSH
39399: EMPTY
39400: LIST
39401: LIST
39402: PUSH
39403: LD_INT 1
39405: NEG
39406: PUSH
39407: LD_INT 1
39409: PUSH
39410: EMPTY
39411: LIST
39412: LIST
39413: PUSH
39414: LD_INT 2
39416: NEG
39417: PUSH
39418: LD_INT 0
39420: PUSH
39421: EMPTY
39422: LIST
39423: LIST
39424: PUSH
39425: LD_INT 2
39427: NEG
39428: PUSH
39429: LD_INT 1
39431: NEG
39432: PUSH
39433: EMPTY
39434: LIST
39435: LIST
39436: PUSH
39437: LD_INT 2
39439: NEG
39440: PUSH
39441: LD_INT 2
39443: NEG
39444: PUSH
39445: EMPTY
39446: LIST
39447: LIST
39448: PUSH
39449: EMPTY
39450: LIST
39451: LIST
39452: LIST
39453: LIST
39454: LIST
39455: LIST
39456: LIST
39457: LIST
39458: LIST
39459: LIST
39460: LIST
39461: LIST
39462: LIST
39463: LIST
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: LIST
39469: ST_TO_ADDR
// Barracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39470: LD_ADDR_VAR 0 54
39474: PUSH
39475: LD_INT 0
39477: PUSH
39478: LD_INT 0
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: PUSH
39485: LD_INT 0
39487: PUSH
39488: LD_INT 1
39490: NEG
39491: PUSH
39492: EMPTY
39493: LIST
39494: LIST
39495: PUSH
39496: LD_INT 1
39498: PUSH
39499: LD_INT 0
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: PUSH
39506: LD_INT 1
39508: PUSH
39509: LD_INT 1
39511: PUSH
39512: EMPTY
39513: LIST
39514: LIST
39515: PUSH
39516: LD_INT 0
39518: PUSH
39519: LD_INT 1
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: PUSH
39526: LD_INT 1
39528: NEG
39529: PUSH
39530: LD_INT 0
39532: PUSH
39533: EMPTY
39534: LIST
39535: LIST
39536: PUSH
39537: LD_INT 1
39539: NEG
39540: PUSH
39541: LD_INT 1
39543: NEG
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PUSH
39549: LD_INT 1
39551: NEG
39552: PUSH
39553: LD_INT 2
39555: NEG
39556: PUSH
39557: EMPTY
39558: LIST
39559: LIST
39560: PUSH
39561: LD_INT 0
39563: PUSH
39564: LD_INT 2
39566: NEG
39567: PUSH
39568: EMPTY
39569: LIST
39570: LIST
39571: PUSH
39572: LD_INT 1
39574: PUSH
39575: LD_INT 1
39577: NEG
39578: PUSH
39579: EMPTY
39580: LIST
39581: LIST
39582: PUSH
39583: LD_INT 2
39585: PUSH
39586: LD_INT 0
39588: PUSH
39589: EMPTY
39590: LIST
39591: LIST
39592: PUSH
39593: LD_INT 2
39595: PUSH
39596: LD_INT 1
39598: PUSH
39599: EMPTY
39600: LIST
39601: LIST
39602: PUSH
39603: LD_INT 2
39605: PUSH
39606: LD_INT 2
39608: PUSH
39609: EMPTY
39610: LIST
39611: LIST
39612: PUSH
39613: LD_INT 1
39615: PUSH
39616: LD_INT 2
39618: PUSH
39619: EMPTY
39620: LIST
39621: LIST
39622: PUSH
39623: LD_INT 0
39625: PUSH
39626: LD_INT 2
39628: PUSH
39629: EMPTY
39630: LIST
39631: LIST
39632: PUSH
39633: LD_INT 1
39635: NEG
39636: PUSH
39637: LD_INT 1
39639: PUSH
39640: EMPTY
39641: LIST
39642: LIST
39643: PUSH
39644: LD_INT 2
39646: NEG
39647: PUSH
39648: LD_INT 0
39650: PUSH
39651: EMPTY
39652: LIST
39653: LIST
39654: PUSH
39655: LD_INT 2
39657: NEG
39658: PUSH
39659: LD_INT 1
39661: NEG
39662: PUSH
39663: EMPTY
39664: LIST
39665: LIST
39666: PUSH
39667: LD_INT 2
39669: NEG
39670: PUSH
39671: LD_INT 2
39673: NEG
39674: PUSH
39675: EMPTY
39676: LIST
39677: LIST
39678: PUSH
39679: EMPTY
39680: LIST
39681: LIST
39682: LIST
39683: LIST
39684: LIST
39685: LIST
39686: LIST
39687: LIST
39688: LIST
39689: LIST
39690: LIST
39691: LIST
39692: LIST
39693: LIST
39694: LIST
39695: LIST
39696: LIST
39697: LIST
39698: LIST
39699: ST_TO_ADDR
// Barracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39700: LD_ADDR_VAR 0 55
39704: PUSH
39705: LD_INT 0
39707: PUSH
39708: LD_INT 0
39710: PUSH
39711: EMPTY
39712: LIST
39713: LIST
39714: PUSH
39715: LD_INT 0
39717: PUSH
39718: LD_INT 1
39720: NEG
39721: PUSH
39722: EMPTY
39723: LIST
39724: LIST
39725: PUSH
39726: LD_INT 1
39728: PUSH
39729: LD_INT 0
39731: PUSH
39732: EMPTY
39733: LIST
39734: LIST
39735: PUSH
39736: LD_INT 1
39738: PUSH
39739: LD_INT 1
39741: PUSH
39742: EMPTY
39743: LIST
39744: LIST
39745: PUSH
39746: LD_INT 0
39748: PUSH
39749: LD_INT 1
39751: PUSH
39752: EMPTY
39753: LIST
39754: LIST
39755: PUSH
39756: LD_INT 1
39758: NEG
39759: PUSH
39760: LD_INT 0
39762: PUSH
39763: EMPTY
39764: LIST
39765: LIST
39766: PUSH
39767: LD_INT 1
39769: NEG
39770: PUSH
39771: LD_INT 1
39773: NEG
39774: PUSH
39775: EMPTY
39776: LIST
39777: LIST
39778: PUSH
39779: LD_INT 1
39781: NEG
39782: PUSH
39783: LD_INT 2
39785: NEG
39786: PUSH
39787: EMPTY
39788: LIST
39789: LIST
39790: PUSH
39791: LD_INT 0
39793: PUSH
39794: LD_INT 2
39796: NEG
39797: PUSH
39798: EMPTY
39799: LIST
39800: LIST
39801: PUSH
39802: LD_INT 1
39804: PUSH
39805: LD_INT 1
39807: NEG
39808: PUSH
39809: EMPTY
39810: LIST
39811: LIST
39812: PUSH
39813: LD_INT 2
39815: PUSH
39816: LD_INT 0
39818: PUSH
39819: EMPTY
39820: LIST
39821: LIST
39822: PUSH
39823: LD_INT 2
39825: PUSH
39826: LD_INT 1
39828: PUSH
39829: EMPTY
39830: LIST
39831: LIST
39832: PUSH
39833: LD_INT 2
39835: PUSH
39836: LD_INT 2
39838: PUSH
39839: EMPTY
39840: LIST
39841: LIST
39842: PUSH
39843: LD_INT 1
39845: PUSH
39846: LD_INT 2
39848: PUSH
39849: EMPTY
39850: LIST
39851: LIST
39852: PUSH
39853: LD_INT 0
39855: PUSH
39856: LD_INT 2
39858: PUSH
39859: EMPTY
39860: LIST
39861: LIST
39862: PUSH
39863: LD_INT 1
39865: NEG
39866: PUSH
39867: LD_INT 1
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: PUSH
39874: LD_INT 2
39876: NEG
39877: PUSH
39878: LD_INT 0
39880: PUSH
39881: EMPTY
39882: LIST
39883: LIST
39884: PUSH
39885: LD_INT 2
39887: NEG
39888: PUSH
39889: LD_INT 1
39891: NEG
39892: PUSH
39893: EMPTY
39894: LIST
39895: LIST
39896: PUSH
39897: LD_INT 2
39899: NEG
39900: PUSH
39901: LD_INT 2
39903: NEG
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: EMPTY
39910: LIST
39911: LIST
39912: LIST
39913: LIST
39914: LIST
39915: LIST
39916: LIST
39917: LIST
39918: LIST
39919: LIST
39920: LIST
39921: LIST
39922: LIST
39923: LIST
39924: LIST
39925: LIST
39926: LIST
39927: LIST
39928: LIST
39929: ST_TO_ADDR
// Barracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
39930: LD_ADDR_VAR 0 56
39934: PUSH
39935: LD_INT 0
39937: PUSH
39938: LD_INT 0
39940: PUSH
39941: EMPTY
39942: LIST
39943: LIST
39944: PUSH
39945: LD_INT 0
39947: PUSH
39948: LD_INT 1
39950: NEG
39951: PUSH
39952: EMPTY
39953: LIST
39954: LIST
39955: PUSH
39956: LD_INT 1
39958: PUSH
39959: LD_INT 0
39961: PUSH
39962: EMPTY
39963: LIST
39964: LIST
39965: PUSH
39966: LD_INT 1
39968: PUSH
39969: LD_INT 1
39971: PUSH
39972: EMPTY
39973: LIST
39974: LIST
39975: PUSH
39976: LD_INT 0
39978: PUSH
39979: LD_INT 1
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: LD_INT 1
39988: NEG
39989: PUSH
39990: LD_INT 0
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 1
39999: NEG
40000: PUSH
40001: LD_INT 1
40003: NEG
40004: PUSH
40005: EMPTY
40006: LIST
40007: LIST
40008: PUSH
40009: LD_INT 1
40011: NEG
40012: PUSH
40013: LD_INT 2
40015: NEG
40016: PUSH
40017: EMPTY
40018: LIST
40019: LIST
40020: PUSH
40021: LD_INT 0
40023: PUSH
40024: LD_INT 2
40026: NEG
40027: PUSH
40028: EMPTY
40029: LIST
40030: LIST
40031: PUSH
40032: LD_INT 1
40034: PUSH
40035: LD_INT 1
40037: NEG
40038: PUSH
40039: EMPTY
40040: LIST
40041: LIST
40042: PUSH
40043: LD_INT 2
40045: PUSH
40046: LD_INT 0
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: PUSH
40053: LD_INT 2
40055: PUSH
40056: LD_INT 1
40058: PUSH
40059: EMPTY
40060: LIST
40061: LIST
40062: PUSH
40063: LD_INT 2
40065: PUSH
40066: LD_INT 2
40068: PUSH
40069: EMPTY
40070: LIST
40071: LIST
40072: PUSH
40073: LD_INT 1
40075: PUSH
40076: LD_INT 2
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PUSH
40083: LD_INT 0
40085: PUSH
40086: LD_INT 2
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 1
40095: NEG
40096: PUSH
40097: LD_INT 1
40099: PUSH
40100: EMPTY
40101: LIST
40102: LIST
40103: PUSH
40104: LD_INT 2
40106: NEG
40107: PUSH
40108: LD_INT 0
40110: PUSH
40111: EMPTY
40112: LIST
40113: LIST
40114: PUSH
40115: LD_INT 2
40117: NEG
40118: PUSH
40119: LD_INT 1
40121: NEG
40122: PUSH
40123: EMPTY
40124: LIST
40125: LIST
40126: PUSH
40127: LD_INT 2
40129: NEG
40130: PUSH
40131: LD_INT 2
40133: NEG
40134: PUSH
40135: EMPTY
40136: LIST
40137: LIST
40138: PUSH
40139: EMPTY
40140: LIST
40141: LIST
40142: LIST
40143: LIST
40144: LIST
40145: LIST
40146: LIST
40147: LIST
40148: LIST
40149: LIST
40150: LIST
40151: LIST
40152: LIST
40153: LIST
40154: LIST
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: ST_TO_ADDR
// Barracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40160: LD_ADDR_VAR 0 57
40164: PUSH
40165: LD_INT 0
40167: PUSH
40168: LD_INT 0
40170: PUSH
40171: EMPTY
40172: LIST
40173: LIST
40174: PUSH
40175: LD_INT 0
40177: PUSH
40178: LD_INT 1
40180: NEG
40181: PUSH
40182: EMPTY
40183: LIST
40184: LIST
40185: PUSH
40186: LD_INT 1
40188: PUSH
40189: LD_INT 0
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: LD_INT 1
40198: PUSH
40199: LD_INT 1
40201: PUSH
40202: EMPTY
40203: LIST
40204: LIST
40205: PUSH
40206: LD_INT 0
40208: PUSH
40209: LD_INT 1
40211: PUSH
40212: EMPTY
40213: LIST
40214: LIST
40215: PUSH
40216: LD_INT 1
40218: NEG
40219: PUSH
40220: LD_INT 0
40222: PUSH
40223: EMPTY
40224: LIST
40225: LIST
40226: PUSH
40227: LD_INT 1
40229: NEG
40230: PUSH
40231: LD_INT 1
40233: NEG
40234: PUSH
40235: EMPTY
40236: LIST
40237: LIST
40238: PUSH
40239: LD_INT 1
40241: NEG
40242: PUSH
40243: LD_INT 2
40245: NEG
40246: PUSH
40247: EMPTY
40248: LIST
40249: LIST
40250: PUSH
40251: LD_INT 0
40253: PUSH
40254: LD_INT 2
40256: NEG
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: PUSH
40262: LD_INT 1
40264: PUSH
40265: LD_INT 1
40267: NEG
40268: PUSH
40269: EMPTY
40270: LIST
40271: LIST
40272: PUSH
40273: LD_INT 2
40275: PUSH
40276: LD_INT 0
40278: PUSH
40279: EMPTY
40280: LIST
40281: LIST
40282: PUSH
40283: LD_INT 2
40285: PUSH
40286: LD_INT 1
40288: PUSH
40289: EMPTY
40290: LIST
40291: LIST
40292: PUSH
40293: LD_INT 2
40295: PUSH
40296: LD_INT 2
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 1
40305: PUSH
40306: LD_INT 2
40308: PUSH
40309: EMPTY
40310: LIST
40311: LIST
40312: PUSH
40313: LD_INT 0
40315: PUSH
40316: LD_INT 2
40318: PUSH
40319: EMPTY
40320: LIST
40321: LIST
40322: PUSH
40323: LD_INT 1
40325: NEG
40326: PUSH
40327: LD_INT 1
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 2
40336: NEG
40337: PUSH
40338: LD_INT 0
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: PUSH
40345: LD_INT 2
40347: NEG
40348: PUSH
40349: LD_INT 1
40351: NEG
40352: PUSH
40353: EMPTY
40354: LIST
40355: LIST
40356: PUSH
40357: LD_INT 2
40359: NEG
40360: PUSH
40361: LD_INT 2
40363: NEG
40364: PUSH
40365: EMPTY
40366: LIST
40367: LIST
40368: PUSH
40369: EMPTY
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: LIST
40387: LIST
40388: LIST
40389: ST_TO_ADDR
// Barracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
40390: LD_ADDR_VAR 0 58
40394: PUSH
40395: LD_INT 0
40397: PUSH
40398: LD_INT 0
40400: PUSH
40401: EMPTY
40402: LIST
40403: LIST
40404: PUSH
40405: LD_INT 0
40407: PUSH
40408: LD_INT 1
40410: NEG
40411: PUSH
40412: EMPTY
40413: LIST
40414: LIST
40415: PUSH
40416: LD_INT 1
40418: PUSH
40419: LD_INT 0
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PUSH
40426: LD_INT 1
40428: PUSH
40429: LD_INT 1
40431: PUSH
40432: EMPTY
40433: LIST
40434: LIST
40435: PUSH
40436: LD_INT 0
40438: PUSH
40439: LD_INT 1
40441: PUSH
40442: EMPTY
40443: LIST
40444: LIST
40445: PUSH
40446: LD_INT 1
40448: NEG
40449: PUSH
40450: LD_INT 0
40452: PUSH
40453: EMPTY
40454: LIST
40455: LIST
40456: PUSH
40457: LD_INT 1
40459: NEG
40460: PUSH
40461: LD_INT 1
40463: NEG
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 1
40471: NEG
40472: PUSH
40473: LD_INT 2
40475: NEG
40476: PUSH
40477: EMPTY
40478: LIST
40479: LIST
40480: PUSH
40481: LD_INT 0
40483: PUSH
40484: LD_INT 2
40486: NEG
40487: PUSH
40488: EMPTY
40489: LIST
40490: LIST
40491: PUSH
40492: LD_INT 1
40494: PUSH
40495: LD_INT 1
40497: NEG
40498: PUSH
40499: EMPTY
40500: LIST
40501: LIST
40502: PUSH
40503: LD_INT 2
40505: PUSH
40506: LD_INT 0
40508: PUSH
40509: EMPTY
40510: LIST
40511: LIST
40512: PUSH
40513: LD_INT 2
40515: PUSH
40516: LD_INT 1
40518: PUSH
40519: EMPTY
40520: LIST
40521: LIST
40522: PUSH
40523: LD_INT 2
40525: PUSH
40526: LD_INT 2
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: LD_INT 1
40535: PUSH
40536: LD_INT 2
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: LD_INT 0
40545: PUSH
40546: LD_INT 2
40548: PUSH
40549: EMPTY
40550: LIST
40551: LIST
40552: PUSH
40553: LD_INT 1
40555: NEG
40556: PUSH
40557: LD_INT 1
40559: PUSH
40560: EMPTY
40561: LIST
40562: LIST
40563: PUSH
40564: LD_INT 2
40566: NEG
40567: PUSH
40568: LD_INT 0
40570: PUSH
40571: EMPTY
40572: LIST
40573: LIST
40574: PUSH
40575: LD_INT 2
40577: NEG
40578: PUSH
40579: LD_INT 1
40581: NEG
40582: PUSH
40583: EMPTY
40584: LIST
40585: LIST
40586: PUSH
40587: LD_INT 2
40589: NEG
40590: PUSH
40591: LD_INT 2
40593: NEG
40594: PUSH
40595: EMPTY
40596: LIST
40597: LIST
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: LIST
40603: LIST
40604: LIST
40605: LIST
40606: LIST
40607: LIST
40608: LIST
40609: LIST
40610: LIST
40611: LIST
40612: LIST
40613: LIST
40614: LIST
40615: LIST
40616: LIST
40617: LIST
40618: LIST
40619: ST_TO_ADDR
// Bunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40620: LD_ADDR_VAR 0 59
40624: PUSH
40625: LD_INT 0
40627: PUSH
40628: LD_INT 0
40630: PUSH
40631: EMPTY
40632: LIST
40633: LIST
40634: PUSH
40635: LD_INT 0
40637: PUSH
40638: LD_INT 1
40640: NEG
40641: PUSH
40642: EMPTY
40643: LIST
40644: LIST
40645: PUSH
40646: LD_INT 1
40648: PUSH
40649: LD_INT 0
40651: PUSH
40652: EMPTY
40653: LIST
40654: LIST
40655: PUSH
40656: LD_INT 1
40658: PUSH
40659: LD_INT 1
40661: PUSH
40662: EMPTY
40663: LIST
40664: LIST
40665: PUSH
40666: LD_INT 0
40668: PUSH
40669: LD_INT 1
40671: PUSH
40672: EMPTY
40673: LIST
40674: LIST
40675: PUSH
40676: LD_INT 1
40678: NEG
40679: PUSH
40680: LD_INT 0
40682: PUSH
40683: EMPTY
40684: LIST
40685: LIST
40686: PUSH
40687: LD_INT 1
40689: NEG
40690: PUSH
40691: LD_INT 1
40693: NEG
40694: PUSH
40695: EMPTY
40696: LIST
40697: LIST
40698: PUSH
40699: EMPTY
40700: LIST
40701: LIST
40702: LIST
40703: LIST
40704: LIST
40705: LIST
40706: LIST
40707: ST_TO_ADDR
// Bunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40708: LD_ADDR_VAR 0 60
40712: PUSH
40713: LD_INT 0
40715: PUSH
40716: LD_INT 0
40718: PUSH
40719: EMPTY
40720: LIST
40721: LIST
40722: PUSH
40723: LD_INT 0
40725: PUSH
40726: LD_INT 1
40728: NEG
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: LD_INT 1
40736: PUSH
40737: LD_INT 0
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: PUSH
40744: LD_INT 1
40746: PUSH
40747: LD_INT 1
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PUSH
40754: LD_INT 0
40756: PUSH
40757: LD_INT 1
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: PUSH
40764: LD_INT 1
40766: NEG
40767: PUSH
40768: LD_INT 0
40770: PUSH
40771: EMPTY
40772: LIST
40773: LIST
40774: PUSH
40775: LD_INT 1
40777: NEG
40778: PUSH
40779: LD_INT 1
40781: NEG
40782: PUSH
40783: EMPTY
40784: LIST
40785: LIST
40786: PUSH
40787: EMPTY
40788: LIST
40789: LIST
40790: LIST
40791: LIST
40792: LIST
40793: LIST
40794: LIST
40795: ST_TO_ADDR
// Bunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40796: LD_ADDR_VAR 0 61
40800: PUSH
40801: LD_INT 0
40803: PUSH
40804: LD_INT 0
40806: PUSH
40807: EMPTY
40808: LIST
40809: LIST
40810: PUSH
40811: LD_INT 0
40813: PUSH
40814: LD_INT 1
40816: NEG
40817: PUSH
40818: EMPTY
40819: LIST
40820: LIST
40821: PUSH
40822: LD_INT 1
40824: PUSH
40825: LD_INT 0
40827: PUSH
40828: EMPTY
40829: LIST
40830: LIST
40831: PUSH
40832: LD_INT 1
40834: PUSH
40835: LD_INT 1
40837: PUSH
40838: EMPTY
40839: LIST
40840: LIST
40841: PUSH
40842: LD_INT 0
40844: PUSH
40845: LD_INT 1
40847: PUSH
40848: EMPTY
40849: LIST
40850: LIST
40851: PUSH
40852: LD_INT 1
40854: NEG
40855: PUSH
40856: LD_INT 0
40858: PUSH
40859: EMPTY
40860: LIST
40861: LIST
40862: PUSH
40863: LD_INT 1
40865: NEG
40866: PUSH
40867: LD_INT 1
40869: NEG
40870: PUSH
40871: EMPTY
40872: LIST
40873: LIST
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: ST_TO_ADDR
// Bunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40884: LD_ADDR_VAR 0 62
40888: PUSH
40889: LD_INT 0
40891: PUSH
40892: LD_INT 0
40894: PUSH
40895: EMPTY
40896: LIST
40897: LIST
40898: PUSH
40899: LD_INT 0
40901: PUSH
40902: LD_INT 1
40904: NEG
40905: PUSH
40906: EMPTY
40907: LIST
40908: LIST
40909: PUSH
40910: LD_INT 1
40912: PUSH
40913: LD_INT 0
40915: PUSH
40916: EMPTY
40917: LIST
40918: LIST
40919: PUSH
40920: LD_INT 1
40922: PUSH
40923: LD_INT 1
40925: PUSH
40926: EMPTY
40927: LIST
40928: LIST
40929: PUSH
40930: LD_INT 0
40932: PUSH
40933: LD_INT 1
40935: PUSH
40936: EMPTY
40937: LIST
40938: LIST
40939: PUSH
40940: LD_INT 1
40942: NEG
40943: PUSH
40944: LD_INT 0
40946: PUSH
40947: EMPTY
40948: LIST
40949: LIST
40950: PUSH
40951: LD_INT 1
40953: NEG
40954: PUSH
40955: LD_INT 1
40957: NEG
40958: PUSH
40959: EMPTY
40960: LIST
40961: LIST
40962: PUSH
40963: EMPTY
40964: LIST
40965: LIST
40966: LIST
40967: LIST
40968: LIST
40969: LIST
40970: LIST
40971: ST_TO_ADDR
// Bunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
40972: LD_ADDR_VAR 0 63
40976: PUSH
40977: LD_INT 0
40979: PUSH
40980: LD_INT 0
40982: PUSH
40983: EMPTY
40984: LIST
40985: LIST
40986: PUSH
40987: LD_INT 0
40989: PUSH
40990: LD_INT 1
40992: NEG
40993: PUSH
40994: EMPTY
40995: LIST
40996: LIST
40997: PUSH
40998: LD_INT 1
41000: PUSH
41001: LD_INT 0
41003: PUSH
41004: EMPTY
41005: LIST
41006: LIST
41007: PUSH
41008: LD_INT 1
41010: PUSH
41011: LD_INT 1
41013: PUSH
41014: EMPTY
41015: LIST
41016: LIST
41017: PUSH
41018: LD_INT 0
41020: PUSH
41021: LD_INT 1
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 1
41030: NEG
41031: PUSH
41032: LD_INT 0
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: LD_INT 1
41041: NEG
41042: PUSH
41043: LD_INT 1
41045: NEG
41046: PUSH
41047: EMPTY
41048: LIST
41049: LIST
41050: PUSH
41051: EMPTY
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: LIST
41057: LIST
41058: LIST
41059: ST_TO_ADDR
// Bunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
41060: LD_ADDR_VAR 0 64
41064: PUSH
41065: LD_INT 0
41067: PUSH
41068: LD_INT 0
41070: PUSH
41071: EMPTY
41072: LIST
41073: LIST
41074: PUSH
41075: LD_INT 0
41077: PUSH
41078: LD_INT 1
41080: NEG
41081: PUSH
41082: EMPTY
41083: LIST
41084: LIST
41085: PUSH
41086: LD_INT 1
41088: PUSH
41089: LD_INT 0
41091: PUSH
41092: EMPTY
41093: LIST
41094: LIST
41095: PUSH
41096: LD_INT 1
41098: PUSH
41099: LD_INT 1
41101: PUSH
41102: EMPTY
41103: LIST
41104: LIST
41105: PUSH
41106: LD_INT 0
41108: PUSH
41109: LD_INT 1
41111: PUSH
41112: EMPTY
41113: LIST
41114: LIST
41115: PUSH
41116: LD_INT 1
41118: NEG
41119: PUSH
41120: LD_INT 0
41122: PUSH
41123: EMPTY
41124: LIST
41125: LIST
41126: PUSH
41127: LD_INT 1
41129: NEG
41130: PUSH
41131: LD_INT 1
41133: NEG
41134: PUSH
41135: EMPTY
41136: LIST
41137: LIST
41138: PUSH
41139: EMPTY
41140: LIST
41141: LIST
41142: LIST
41143: LIST
41144: LIST
41145: LIST
41146: LIST
41147: ST_TO_ADDR
// end ; 1 :
41148: GO 47045
41150: LD_INT 1
41152: DOUBLE
41153: EQUAL
41154: IFTRUE 41158
41156: GO 43781
41158: POP
// begin DepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41159: LD_ADDR_VAR 0 11
41163: PUSH
41164: LD_INT 1
41166: NEG
41167: PUSH
41168: LD_INT 3
41170: NEG
41171: PUSH
41172: EMPTY
41173: LIST
41174: LIST
41175: PUSH
41176: LD_INT 0
41178: PUSH
41179: LD_INT 3
41181: NEG
41182: PUSH
41183: EMPTY
41184: LIST
41185: LIST
41186: PUSH
41187: LD_INT 1
41189: PUSH
41190: LD_INT 2
41192: NEG
41193: PUSH
41194: EMPTY
41195: LIST
41196: LIST
41197: PUSH
41198: EMPTY
41199: LIST
41200: LIST
41201: LIST
41202: ST_TO_ADDR
// DepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41203: LD_ADDR_VAR 0 12
41207: PUSH
41208: LD_INT 2
41210: PUSH
41211: LD_INT 1
41213: NEG
41214: PUSH
41215: EMPTY
41216: LIST
41217: LIST
41218: PUSH
41219: LD_INT 3
41221: PUSH
41222: LD_INT 0
41224: PUSH
41225: EMPTY
41226: LIST
41227: LIST
41228: PUSH
41229: LD_INT 3
41231: PUSH
41232: LD_INT 1
41234: PUSH
41235: EMPTY
41236: LIST
41237: LIST
41238: PUSH
41239: EMPTY
41240: LIST
41241: LIST
41242: LIST
41243: ST_TO_ADDR
// DepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41244: LD_ADDR_VAR 0 13
41248: PUSH
41249: LD_INT 3
41251: PUSH
41252: LD_INT 2
41254: PUSH
41255: EMPTY
41256: LIST
41257: LIST
41258: PUSH
41259: LD_INT 3
41261: PUSH
41262: LD_INT 3
41264: PUSH
41265: EMPTY
41266: LIST
41267: LIST
41268: PUSH
41269: LD_INT 2
41271: PUSH
41272: LD_INT 3
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: EMPTY
41280: LIST
41281: LIST
41282: LIST
41283: ST_TO_ADDR
// DepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41284: LD_ADDR_VAR 0 14
41288: PUSH
41289: LD_INT 1
41291: PUSH
41292: LD_INT 3
41294: PUSH
41295: EMPTY
41296: LIST
41297: LIST
41298: PUSH
41299: LD_INT 0
41301: PUSH
41302: LD_INT 3
41304: PUSH
41305: EMPTY
41306: LIST
41307: LIST
41308: PUSH
41309: LD_INT 1
41311: NEG
41312: PUSH
41313: LD_INT 2
41315: PUSH
41316: EMPTY
41317: LIST
41318: LIST
41319: PUSH
41320: EMPTY
41321: LIST
41322: LIST
41323: LIST
41324: ST_TO_ADDR
// DepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41325: LD_ADDR_VAR 0 15
41329: PUSH
41330: LD_INT 2
41332: NEG
41333: PUSH
41334: LD_INT 1
41336: PUSH
41337: EMPTY
41338: LIST
41339: LIST
41340: PUSH
41341: LD_INT 3
41343: NEG
41344: PUSH
41345: LD_INT 0
41347: PUSH
41348: EMPTY
41349: LIST
41350: LIST
41351: PUSH
41352: LD_INT 3
41354: NEG
41355: PUSH
41356: LD_INT 1
41358: NEG
41359: PUSH
41360: EMPTY
41361: LIST
41362: LIST
41363: PUSH
41364: EMPTY
41365: LIST
41366: LIST
41367: LIST
41368: ST_TO_ADDR
// DepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41369: LD_ADDR_VAR 0 16
41373: PUSH
41374: LD_INT 2
41376: NEG
41377: PUSH
41378: LD_INT 3
41380: NEG
41381: PUSH
41382: EMPTY
41383: LIST
41384: LIST
41385: PUSH
41386: LD_INT 3
41388: NEG
41389: PUSH
41390: LD_INT 2
41392: NEG
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 3
41400: NEG
41401: PUSH
41402: LD_INT 3
41404: NEG
41405: PUSH
41406: EMPTY
41407: LIST
41408: LIST
41409: PUSH
41410: EMPTY
41411: LIST
41412: LIST
41413: LIST
41414: ST_TO_ADDR
// DepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
41415: LD_ADDR_VAR 0 17
41419: PUSH
41420: LD_INT 1
41422: NEG
41423: PUSH
41424: LD_INT 3
41426: NEG
41427: PUSH
41428: EMPTY
41429: LIST
41430: LIST
41431: PUSH
41432: LD_INT 0
41434: PUSH
41435: LD_INT 3
41437: NEG
41438: PUSH
41439: EMPTY
41440: LIST
41441: LIST
41442: PUSH
41443: LD_INT 1
41445: PUSH
41446: LD_INT 2
41448: NEG
41449: PUSH
41450: EMPTY
41451: LIST
41452: LIST
41453: PUSH
41454: EMPTY
41455: LIST
41456: LIST
41457: LIST
41458: ST_TO_ADDR
// DepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
41459: LD_ADDR_VAR 0 18
41463: PUSH
41464: LD_INT 2
41466: PUSH
41467: LD_INT 1
41469: NEG
41470: PUSH
41471: EMPTY
41472: LIST
41473: LIST
41474: PUSH
41475: LD_INT 3
41477: PUSH
41478: LD_INT 0
41480: PUSH
41481: EMPTY
41482: LIST
41483: LIST
41484: PUSH
41485: LD_INT 3
41487: PUSH
41488: LD_INT 1
41490: PUSH
41491: EMPTY
41492: LIST
41493: LIST
41494: PUSH
41495: EMPTY
41496: LIST
41497: LIST
41498: LIST
41499: ST_TO_ADDR
// DepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
41500: LD_ADDR_VAR 0 19
41504: PUSH
41505: LD_INT 3
41507: PUSH
41508: LD_INT 2
41510: PUSH
41511: EMPTY
41512: LIST
41513: LIST
41514: PUSH
41515: LD_INT 3
41517: PUSH
41518: LD_INT 3
41520: PUSH
41521: EMPTY
41522: LIST
41523: LIST
41524: PUSH
41525: LD_INT 2
41527: PUSH
41528: LD_INT 3
41530: PUSH
41531: EMPTY
41532: LIST
41533: LIST
41534: PUSH
41535: EMPTY
41536: LIST
41537: LIST
41538: LIST
41539: ST_TO_ADDR
// DepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
41540: LD_ADDR_VAR 0 20
41544: PUSH
41545: LD_INT 1
41547: PUSH
41548: LD_INT 3
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: LD_INT 0
41557: PUSH
41558: LD_INT 3
41560: PUSH
41561: EMPTY
41562: LIST
41563: LIST
41564: PUSH
41565: LD_INT 1
41567: NEG
41568: PUSH
41569: LD_INT 2
41571: PUSH
41572: EMPTY
41573: LIST
41574: LIST
41575: PUSH
41576: EMPTY
41577: LIST
41578: LIST
41579: LIST
41580: ST_TO_ADDR
// DepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41581: LD_ADDR_VAR 0 21
41585: PUSH
41586: LD_INT 2
41588: NEG
41589: PUSH
41590: LD_INT 1
41592: PUSH
41593: EMPTY
41594: LIST
41595: LIST
41596: PUSH
41597: LD_INT 3
41599: NEG
41600: PUSH
41601: LD_INT 0
41603: PUSH
41604: EMPTY
41605: LIST
41606: LIST
41607: PUSH
41608: LD_INT 3
41610: NEG
41611: PUSH
41612: LD_INT 1
41614: NEG
41615: PUSH
41616: EMPTY
41617: LIST
41618: LIST
41619: PUSH
41620: EMPTY
41621: LIST
41622: LIST
41623: LIST
41624: ST_TO_ADDR
// DepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41625: LD_ADDR_VAR 0 22
41629: PUSH
41630: LD_INT 2
41632: NEG
41633: PUSH
41634: LD_INT 3
41636: NEG
41637: PUSH
41638: EMPTY
41639: LIST
41640: LIST
41641: PUSH
41642: LD_INT 3
41644: NEG
41645: PUSH
41646: LD_INT 2
41648: NEG
41649: PUSH
41650: EMPTY
41651: LIST
41652: LIST
41653: PUSH
41654: LD_INT 3
41656: NEG
41657: PUSH
41658: LD_INT 3
41660: NEG
41661: PUSH
41662: EMPTY
41663: LIST
41664: LIST
41665: PUSH
41666: EMPTY
41667: LIST
41668: LIST
41669: LIST
41670: ST_TO_ADDR
// DepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
41671: LD_ADDR_VAR 0 23
41675: PUSH
41676: LD_INT 0
41678: PUSH
41679: LD_INT 3
41681: NEG
41682: PUSH
41683: EMPTY
41684: LIST
41685: LIST
41686: PUSH
41687: LD_INT 1
41689: NEG
41690: PUSH
41691: LD_INT 4
41693: NEG
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: LD_INT 1
41701: PUSH
41702: LD_INT 3
41704: NEG
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: EMPTY
41711: LIST
41712: LIST
41713: LIST
41714: ST_TO_ADDR
// DepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
41715: LD_ADDR_VAR 0 24
41719: PUSH
41720: LD_INT 3
41722: PUSH
41723: LD_INT 0
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: LD_INT 3
41732: PUSH
41733: LD_INT 1
41735: NEG
41736: PUSH
41737: EMPTY
41738: LIST
41739: LIST
41740: PUSH
41741: LD_INT 4
41743: PUSH
41744: LD_INT 1
41746: PUSH
41747: EMPTY
41748: LIST
41749: LIST
41750: PUSH
41751: EMPTY
41752: LIST
41753: LIST
41754: LIST
41755: ST_TO_ADDR
// DepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
41756: LD_ADDR_VAR 0 25
41760: PUSH
41761: LD_INT 3
41763: PUSH
41764: LD_INT 3
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: LD_INT 4
41773: PUSH
41774: LD_INT 3
41776: PUSH
41777: EMPTY
41778: LIST
41779: LIST
41780: PUSH
41781: LD_INT 3
41783: PUSH
41784: LD_INT 4
41786: PUSH
41787: EMPTY
41788: LIST
41789: LIST
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: LIST
41795: ST_TO_ADDR
// DepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
41796: LD_ADDR_VAR 0 26
41800: PUSH
41801: LD_INT 0
41803: PUSH
41804: LD_INT 3
41806: PUSH
41807: EMPTY
41808: LIST
41809: LIST
41810: PUSH
41811: LD_INT 1
41813: PUSH
41814: LD_INT 4
41816: PUSH
41817: EMPTY
41818: LIST
41819: LIST
41820: PUSH
41821: LD_INT 1
41823: NEG
41824: PUSH
41825: LD_INT 3
41827: PUSH
41828: EMPTY
41829: LIST
41830: LIST
41831: PUSH
41832: EMPTY
41833: LIST
41834: LIST
41835: LIST
41836: ST_TO_ADDR
// DepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
41837: LD_ADDR_VAR 0 27
41841: PUSH
41842: LD_INT 3
41844: NEG
41845: PUSH
41846: LD_INT 0
41848: PUSH
41849: EMPTY
41850: LIST
41851: LIST
41852: PUSH
41853: LD_INT 3
41855: NEG
41856: PUSH
41857: LD_INT 1
41859: PUSH
41860: EMPTY
41861: LIST
41862: LIST
41863: PUSH
41864: LD_INT 4
41866: NEG
41867: PUSH
41868: LD_INT 1
41870: NEG
41871: PUSH
41872: EMPTY
41873: LIST
41874: LIST
41875: PUSH
41876: EMPTY
41877: LIST
41878: LIST
41879: LIST
41880: ST_TO_ADDR
// DepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
41881: LD_ADDR_VAR 0 28
41885: PUSH
41886: LD_INT 3
41888: NEG
41889: PUSH
41890: LD_INT 3
41892: NEG
41893: PUSH
41894: EMPTY
41895: LIST
41896: LIST
41897: PUSH
41898: LD_INT 3
41900: NEG
41901: PUSH
41902: LD_INT 4
41904: NEG
41905: PUSH
41906: EMPTY
41907: LIST
41908: LIST
41909: PUSH
41910: LD_INT 4
41912: NEG
41913: PUSH
41914: LD_INT 3
41916: NEG
41917: PUSH
41918: EMPTY
41919: LIST
41920: LIST
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: LIST
41926: ST_TO_ADDR
// Factory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
41927: LD_ADDR_VAR 0 29
41931: PUSH
41932: LD_INT 1
41934: NEG
41935: PUSH
41936: LD_INT 3
41938: NEG
41939: PUSH
41940: EMPTY
41941: LIST
41942: LIST
41943: PUSH
41944: LD_INT 0
41946: PUSH
41947: LD_INT 3
41949: NEG
41950: PUSH
41951: EMPTY
41952: LIST
41953: LIST
41954: PUSH
41955: LD_INT 1
41957: PUSH
41958: LD_INT 2
41960: NEG
41961: PUSH
41962: EMPTY
41963: LIST
41964: LIST
41965: PUSH
41966: LD_INT 1
41968: NEG
41969: PUSH
41970: LD_INT 4
41972: NEG
41973: PUSH
41974: EMPTY
41975: LIST
41976: LIST
41977: PUSH
41978: LD_INT 0
41980: PUSH
41981: LD_INT 4
41983: NEG
41984: PUSH
41985: EMPTY
41986: LIST
41987: LIST
41988: PUSH
41989: LD_INT 1
41991: PUSH
41992: LD_INT 3
41994: NEG
41995: PUSH
41996: EMPTY
41997: LIST
41998: LIST
41999: PUSH
42000: LD_INT 1
42002: NEG
42003: PUSH
42004: LD_INT 5
42006: NEG
42007: PUSH
42008: EMPTY
42009: LIST
42010: LIST
42011: PUSH
42012: LD_INT 0
42014: PUSH
42015: LD_INT 5
42017: NEG
42018: PUSH
42019: EMPTY
42020: LIST
42021: LIST
42022: PUSH
42023: LD_INT 1
42025: PUSH
42026: LD_INT 4
42028: NEG
42029: PUSH
42030: EMPTY
42031: LIST
42032: LIST
42033: PUSH
42034: LD_INT 1
42036: NEG
42037: PUSH
42038: LD_INT 6
42040: NEG
42041: PUSH
42042: EMPTY
42043: LIST
42044: LIST
42045: PUSH
42046: LD_INT 0
42048: PUSH
42049: LD_INT 6
42051: NEG
42052: PUSH
42053: EMPTY
42054: LIST
42055: LIST
42056: PUSH
42057: LD_INT 1
42059: PUSH
42060: LD_INT 5
42062: NEG
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: EMPTY
42069: LIST
42070: LIST
42071: LIST
42072: LIST
42073: LIST
42074: LIST
42075: LIST
42076: LIST
42077: LIST
42078: LIST
42079: LIST
42080: LIST
42081: ST_TO_ADDR
// Factory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
42082: LD_ADDR_VAR 0 30
42086: PUSH
42087: LD_INT 2
42089: PUSH
42090: LD_INT 1
42092: NEG
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 3
42100: PUSH
42101: LD_INT 0
42103: PUSH
42104: EMPTY
42105: LIST
42106: LIST
42107: PUSH
42108: LD_INT 3
42110: PUSH
42111: LD_INT 1
42113: PUSH
42114: EMPTY
42115: LIST
42116: LIST
42117: PUSH
42118: LD_INT 3
42120: PUSH
42121: LD_INT 1
42123: NEG
42124: PUSH
42125: EMPTY
42126: LIST
42127: LIST
42128: PUSH
42129: LD_INT 4
42131: PUSH
42132: LD_INT 0
42134: PUSH
42135: EMPTY
42136: LIST
42137: LIST
42138: PUSH
42139: LD_INT 4
42141: PUSH
42142: LD_INT 1
42144: PUSH
42145: EMPTY
42146: LIST
42147: LIST
42148: PUSH
42149: LD_INT 4
42151: PUSH
42152: LD_INT 1
42154: NEG
42155: PUSH
42156: EMPTY
42157: LIST
42158: LIST
42159: PUSH
42160: LD_INT 5
42162: PUSH
42163: LD_INT 0
42165: PUSH
42166: EMPTY
42167: LIST
42168: LIST
42169: PUSH
42170: LD_INT 5
42172: PUSH
42173: LD_INT 1
42175: PUSH
42176: EMPTY
42177: LIST
42178: LIST
42179: PUSH
42180: LD_INT 5
42182: PUSH
42183: LD_INT 1
42185: NEG
42186: PUSH
42187: EMPTY
42188: LIST
42189: LIST
42190: PUSH
42191: LD_INT 6
42193: PUSH
42194: LD_INT 0
42196: PUSH
42197: EMPTY
42198: LIST
42199: LIST
42200: PUSH
42201: LD_INT 6
42203: PUSH
42204: LD_INT 1
42206: PUSH
42207: EMPTY
42208: LIST
42209: LIST
42210: PUSH
42211: EMPTY
42212: LIST
42213: LIST
42214: LIST
42215: LIST
42216: LIST
42217: LIST
42218: LIST
42219: LIST
42220: LIST
42221: LIST
42222: LIST
42223: LIST
42224: ST_TO_ADDR
// Factory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
42225: LD_ADDR_VAR 0 31
42229: PUSH
42230: LD_INT 3
42232: PUSH
42233: LD_INT 2
42235: PUSH
42236: EMPTY
42237: LIST
42238: LIST
42239: PUSH
42240: LD_INT 3
42242: PUSH
42243: LD_INT 3
42245: PUSH
42246: EMPTY
42247: LIST
42248: LIST
42249: PUSH
42250: LD_INT 2
42252: PUSH
42253: LD_INT 3
42255: PUSH
42256: EMPTY
42257: LIST
42258: LIST
42259: PUSH
42260: LD_INT 4
42262: PUSH
42263: LD_INT 3
42265: PUSH
42266: EMPTY
42267: LIST
42268: LIST
42269: PUSH
42270: LD_INT 4
42272: PUSH
42273: LD_INT 4
42275: PUSH
42276: EMPTY
42277: LIST
42278: LIST
42279: PUSH
42280: LD_INT 3
42282: PUSH
42283: LD_INT 4
42285: PUSH
42286: EMPTY
42287: LIST
42288: LIST
42289: PUSH
42290: LD_INT 5
42292: PUSH
42293: LD_INT 4
42295: PUSH
42296: EMPTY
42297: LIST
42298: LIST
42299: PUSH
42300: LD_INT 5
42302: PUSH
42303: LD_INT 5
42305: PUSH
42306: EMPTY
42307: LIST
42308: LIST
42309: PUSH
42310: LD_INT 4
42312: PUSH
42313: LD_INT 5
42315: PUSH
42316: EMPTY
42317: LIST
42318: LIST
42319: PUSH
42320: LD_INT 6
42322: PUSH
42323: LD_INT 5
42325: PUSH
42326: EMPTY
42327: LIST
42328: LIST
42329: PUSH
42330: LD_INT 6
42332: PUSH
42333: LD_INT 6
42335: PUSH
42336: EMPTY
42337: LIST
42338: LIST
42339: PUSH
42340: LD_INT 5
42342: PUSH
42343: LD_INT 6
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: EMPTY
42351: LIST
42352: LIST
42353: LIST
42354: LIST
42355: LIST
42356: LIST
42357: LIST
42358: LIST
42359: LIST
42360: LIST
42361: LIST
42362: LIST
42363: ST_TO_ADDR
// Factory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
42364: LD_ADDR_VAR 0 32
42368: PUSH
42369: LD_INT 1
42371: PUSH
42372: LD_INT 3
42374: PUSH
42375: EMPTY
42376: LIST
42377: LIST
42378: PUSH
42379: LD_INT 0
42381: PUSH
42382: LD_INT 3
42384: PUSH
42385: EMPTY
42386: LIST
42387: LIST
42388: PUSH
42389: LD_INT 1
42391: NEG
42392: PUSH
42393: LD_INT 2
42395: PUSH
42396: EMPTY
42397: LIST
42398: LIST
42399: PUSH
42400: LD_INT 1
42402: PUSH
42403: LD_INT 4
42405: PUSH
42406: EMPTY
42407: LIST
42408: LIST
42409: PUSH
42410: LD_INT 0
42412: PUSH
42413: LD_INT 4
42415: PUSH
42416: EMPTY
42417: LIST
42418: LIST
42419: PUSH
42420: LD_INT 1
42422: NEG
42423: PUSH
42424: LD_INT 3
42426: PUSH
42427: EMPTY
42428: LIST
42429: LIST
42430: PUSH
42431: LD_INT 1
42433: PUSH
42434: LD_INT 5
42436: PUSH
42437: EMPTY
42438: LIST
42439: LIST
42440: PUSH
42441: LD_INT 0
42443: PUSH
42444: LD_INT 5
42446: PUSH
42447: EMPTY
42448: LIST
42449: LIST
42450: PUSH
42451: LD_INT 1
42453: NEG
42454: PUSH
42455: LD_INT 4
42457: PUSH
42458: EMPTY
42459: LIST
42460: LIST
42461: PUSH
42462: LD_INT 1
42464: PUSH
42465: LD_INT 6
42467: PUSH
42468: EMPTY
42469: LIST
42470: LIST
42471: PUSH
42472: LD_INT 0
42474: PUSH
42475: LD_INT 6
42477: PUSH
42478: EMPTY
42479: LIST
42480: LIST
42481: PUSH
42482: LD_INT 1
42484: NEG
42485: PUSH
42486: LD_INT 5
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: ST_TO_ADDR
// Factory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
42507: LD_ADDR_VAR 0 33
42511: PUSH
42512: LD_INT 2
42514: NEG
42515: PUSH
42516: LD_INT 1
42518: PUSH
42519: EMPTY
42520: LIST
42521: LIST
42522: PUSH
42523: LD_INT 3
42525: NEG
42526: PUSH
42527: LD_INT 0
42529: PUSH
42530: EMPTY
42531: LIST
42532: LIST
42533: PUSH
42534: LD_INT 3
42536: NEG
42537: PUSH
42538: LD_INT 1
42540: NEG
42541: PUSH
42542: EMPTY
42543: LIST
42544: LIST
42545: PUSH
42546: LD_INT 3
42548: NEG
42549: PUSH
42550: LD_INT 1
42552: PUSH
42553: EMPTY
42554: LIST
42555: LIST
42556: PUSH
42557: LD_INT 4
42559: NEG
42560: PUSH
42561: LD_INT 0
42563: PUSH
42564: EMPTY
42565: LIST
42566: LIST
42567: PUSH
42568: LD_INT 4
42570: NEG
42571: PUSH
42572: LD_INT 1
42574: NEG
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 4
42582: NEG
42583: PUSH
42584: LD_INT 1
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 5
42593: NEG
42594: PUSH
42595: LD_INT 0
42597: PUSH
42598: EMPTY
42599: LIST
42600: LIST
42601: PUSH
42602: LD_INT 5
42604: NEG
42605: PUSH
42606: LD_INT 1
42608: NEG
42609: PUSH
42610: EMPTY
42611: LIST
42612: LIST
42613: PUSH
42614: LD_INT 5
42616: NEG
42617: PUSH
42618: LD_INT 1
42620: PUSH
42621: EMPTY
42622: LIST
42623: LIST
42624: PUSH
42625: LD_INT 6
42627: NEG
42628: PUSH
42629: LD_INT 0
42631: PUSH
42632: EMPTY
42633: LIST
42634: LIST
42635: PUSH
42636: LD_INT 6
42638: NEG
42639: PUSH
42640: LD_INT 1
42642: NEG
42643: PUSH
42644: EMPTY
42645: LIST
42646: LIST
42647: PUSH
42648: EMPTY
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: LIST
42655: LIST
42656: LIST
42657: LIST
42658: LIST
42659: LIST
42660: LIST
42661: ST_TO_ADDR
// Factory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
42662: LD_ADDR_VAR 0 34
42666: PUSH
42667: LD_INT 2
42669: NEG
42670: PUSH
42671: LD_INT 3
42673: NEG
42674: PUSH
42675: EMPTY
42676: LIST
42677: LIST
42678: PUSH
42679: LD_INT 3
42681: NEG
42682: PUSH
42683: LD_INT 2
42685: NEG
42686: PUSH
42687: EMPTY
42688: LIST
42689: LIST
42690: PUSH
42691: LD_INT 3
42693: NEG
42694: PUSH
42695: LD_INT 3
42697: NEG
42698: PUSH
42699: EMPTY
42700: LIST
42701: LIST
42702: PUSH
42703: LD_INT 3
42705: NEG
42706: PUSH
42707: LD_INT 4
42709: NEG
42710: PUSH
42711: EMPTY
42712: LIST
42713: LIST
42714: PUSH
42715: LD_INT 4
42717: NEG
42718: PUSH
42719: LD_INT 3
42721: NEG
42722: PUSH
42723: EMPTY
42724: LIST
42725: LIST
42726: PUSH
42727: LD_INT 4
42729: NEG
42730: PUSH
42731: LD_INT 4
42733: NEG
42734: PUSH
42735: EMPTY
42736: LIST
42737: LIST
42738: PUSH
42739: LD_INT 4
42741: NEG
42742: PUSH
42743: LD_INT 5
42745: NEG
42746: PUSH
42747: EMPTY
42748: LIST
42749: LIST
42750: PUSH
42751: LD_INT 5
42753: NEG
42754: PUSH
42755: LD_INT 4
42757: NEG
42758: PUSH
42759: EMPTY
42760: LIST
42761: LIST
42762: PUSH
42763: LD_INT 5
42765: NEG
42766: PUSH
42767: LD_INT 5
42769: NEG
42770: PUSH
42771: EMPTY
42772: LIST
42773: LIST
42774: PUSH
42775: LD_INT 5
42777: NEG
42778: PUSH
42779: LD_INT 6
42781: NEG
42782: PUSH
42783: EMPTY
42784: LIST
42785: LIST
42786: PUSH
42787: LD_INT 6
42789: NEG
42790: PUSH
42791: LD_INT 5
42793: NEG
42794: PUSH
42795: EMPTY
42796: LIST
42797: LIST
42798: PUSH
42799: LD_INT 6
42801: NEG
42802: PUSH
42803: LD_INT 6
42805: NEG
42806: PUSH
42807: EMPTY
42808: LIST
42809: LIST
42810: PUSH
42811: EMPTY
42812: LIST
42813: LIST
42814: LIST
42815: LIST
42816: LIST
42817: LIST
42818: LIST
42819: LIST
42820: LIST
42821: LIST
42822: LIST
42823: LIST
42824: ST_TO_ADDR
// Lab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
42825: LD_ADDR_VAR 0 41
42829: PUSH
42830: LD_INT 0
42832: PUSH
42833: LD_INT 2
42835: NEG
42836: PUSH
42837: EMPTY
42838: LIST
42839: LIST
42840: PUSH
42841: LD_INT 1
42843: NEG
42844: PUSH
42845: LD_INT 3
42847: NEG
42848: PUSH
42849: EMPTY
42850: LIST
42851: LIST
42852: PUSH
42853: LD_INT 1
42855: PUSH
42856: LD_INT 2
42858: NEG
42859: PUSH
42860: EMPTY
42861: LIST
42862: LIST
42863: PUSH
42864: EMPTY
42865: LIST
42866: LIST
42867: LIST
42868: ST_TO_ADDR
// Lab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
42869: LD_ADDR_VAR 0 42
42873: PUSH
42874: LD_INT 2
42876: PUSH
42877: LD_INT 0
42879: PUSH
42880: EMPTY
42881: LIST
42882: LIST
42883: PUSH
42884: LD_INT 2
42886: PUSH
42887: LD_INT 1
42889: NEG
42890: PUSH
42891: EMPTY
42892: LIST
42893: LIST
42894: PUSH
42895: LD_INT 3
42897: PUSH
42898: LD_INT 1
42900: PUSH
42901: EMPTY
42902: LIST
42903: LIST
42904: PUSH
42905: EMPTY
42906: LIST
42907: LIST
42908: LIST
42909: ST_TO_ADDR
// Lab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
42910: LD_ADDR_VAR 0 43
42914: PUSH
42915: LD_INT 2
42917: PUSH
42918: LD_INT 2
42920: PUSH
42921: EMPTY
42922: LIST
42923: LIST
42924: PUSH
42925: LD_INT 3
42927: PUSH
42928: LD_INT 2
42930: PUSH
42931: EMPTY
42932: LIST
42933: LIST
42934: PUSH
42935: LD_INT 2
42937: PUSH
42938: LD_INT 3
42940: PUSH
42941: EMPTY
42942: LIST
42943: LIST
42944: PUSH
42945: EMPTY
42946: LIST
42947: LIST
42948: LIST
42949: ST_TO_ADDR
// Lab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
42950: LD_ADDR_VAR 0 44
42954: PUSH
42955: LD_INT 0
42957: PUSH
42958: LD_INT 2
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: LD_INT 1
42967: PUSH
42968: LD_INT 3
42970: PUSH
42971: EMPTY
42972: LIST
42973: LIST
42974: PUSH
42975: LD_INT 1
42977: NEG
42978: PUSH
42979: LD_INT 2
42981: PUSH
42982: EMPTY
42983: LIST
42984: LIST
42985: PUSH
42986: EMPTY
42987: LIST
42988: LIST
42989: LIST
42990: ST_TO_ADDR
// Lab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
42991: LD_ADDR_VAR 0 45
42995: PUSH
42996: LD_INT 2
42998: NEG
42999: PUSH
43000: LD_INT 0
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: LD_INT 2
43009: NEG
43010: PUSH
43011: LD_INT 1
43013: PUSH
43014: EMPTY
43015: LIST
43016: LIST
43017: PUSH
43018: LD_INT 3
43020: NEG
43021: PUSH
43022: LD_INT 1
43024: NEG
43025: PUSH
43026: EMPTY
43027: LIST
43028: LIST
43029: PUSH
43030: EMPTY
43031: LIST
43032: LIST
43033: LIST
43034: ST_TO_ADDR
// Lab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
43035: LD_ADDR_VAR 0 46
43039: PUSH
43040: LD_INT 2
43042: NEG
43043: PUSH
43044: LD_INT 2
43046: NEG
43047: PUSH
43048: EMPTY
43049: LIST
43050: LIST
43051: PUSH
43052: LD_INT 2
43054: NEG
43055: PUSH
43056: LD_INT 3
43058: NEG
43059: PUSH
43060: EMPTY
43061: LIST
43062: LIST
43063: PUSH
43064: LD_INT 3
43066: NEG
43067: PUSH
43068: LD_INT 2
43070: NEG
43071: PUSH
43072: EMPTY
43073: LIST
43074: LIST
43075: PUSH
43076: EMPTY
43077: LIST
43078: LIST
43079: LIST
43080: ST_TO_ADDR
// ControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
43081: LD_ADDR_VAR 0 47
43085: PUSH
43086: LD_INT 2
43088: NEG
43089: PUSH
43090: LD_INT 3
43092: NEG
43093: PUSH
43094: EMPTY
43095: LIST
43096: LIST
43097: PUSH
43098: LD_INT 1
43100: NEG
43101: PUSH
43102: LD_INT 3
43104: NEG
43105: PUSH
43106: EMPTY
43107: LIST
43108: LIST
43109: PUSH
43110: EMPTY
43111: LIST
43112: LIST
43113: ST_TO_ADDR
// ControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
43114: LD_ADDR_VAR 0 48
43118: PUSH
43119: LD_INT 1
43121: PUSH
43122: LD_INT 2
43124: NEG
43125: PUSH
43126: EMPTY
43127: LIST
43128: LIST
43129: PUSH
43130: LD_INT 2
43132: PUSH
43133: LD_INT 1
43135: NEG
43136: PUSH
43137: EMPTY
43138: LIST
43139: LIST
43140: PUSH
43141: EMPTY
43142: LIST
43143: LIST
43144: ST_TO_ADDR
// ControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
43145: LD_ADDR_VAR 0 49
43149: PUSH
43150: LD_INT 3
43152: PUSH
43153: LD_INT 1
43155: PUSH
43156: EMPTY
43157: LIST
43158: LIST
43159: PUSH
43160: LD_INT 3
43162: PUSH
43163: LD_INT 2
43165: PUSH
43166: EMPTY
43167: LIST
43168: LIST
43169: PUSH
43170: EMPTY
43171: LIST
43172: LIST
43173: ST_TO_ADDR
// ControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
43174: LD_ADDR_VAR 0 50
43178: PUSH
43179: LD_INT 2
43181: PUSH
43182: LD_INT 3
43184: PUSH
43185: EMPTY
43186: LIST
43187: LIST
43188: PUSH
43189: LD_INT 1
43191: PUSH
43192: LD_INT 3
43194: PUSH
43195: EMPTY
43196: LIST
43197: LIST
43198: PUSH
43199: EMPTY
43200: LIST
43201: LIST
43202: ST_TO_ADDR
// ControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
43203: LD_ADDR_VAR 0 51
43207: PUSH
43208: LD_INT 1
43210: NEG
43211: PUSH
43212: LD_INT 2
43214: PUSH
43215: EMPTY
43216: LIST
43217: LIST
43218: PUSH
43219: LD_INT 2
43221: NEG
43222: PUSH
43223: LD_INT 1
43225: PUSH
43226: EMPTY
43227: LIST
43228: LIST
43229: PUSH
43230: EMPTY
43231: LIST
43232: LIST
43233: ST_TO_ADDR
// ControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
43234: LD_ADDR_VAR 0 52
43238: PUSH
43239: LD_INT 3
43241: NEG
43242: PUSH
43243: LD_INT 1
43245: NEG
43246: PUSH
43247: EMPTY
43248: LIST
43249: LIST
43250: PUSH
43251: LD_INT 3
43253: NEG
43254: PUSH
43255: LD_INT 2
43257: NEG
43258: PUSH
43259: EMPTY
43260: LIST
43261: LIST
43262: PUSH
43263: EMPTY
43264: LIST
43265: LIST
43266: ST_TO_ADDR
// Barracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
43267: LD_ADDR_VAR 0 53
43271: PUSH
43272: LD_INT 1
43274: NEG
43275: PUSH
43276: LD_INT 3
43278: NEG
43279: PUSH
43280: EMPTY
43281: LIST
43282: LIST
43283: PUSH
43284: LD_INT 0
43286: PUSH
43287: LD_INT 3
43289: NEG
43290: PUSH
43291: EMPTY
43292: LIST
43293: LIST
43294: PUSH
43295: LD_INT 1
43297: PUSH
43298: LD_INT 2
43300: NEG
43301: PUSH
43302: EMPTY
43303: LIST
43304: LIST
43305: PUSH
43306: EMPTY
43307: LIST
43308: LIST
43309: LIST
43310: ST_TO_ADDR
// Barracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
43311: LD_ADDR_VAR 0 54
43315: PUSH
43316: LD_INT 2
43318: PUSH
43319: LD_INT 1
43321: NEG
43322: PUSH
43323: EMPTY
43324: LIST
43325: LIST
43326: PUSH
43327: LD_INT 3
43329: PUSH
43330: LD_INT 0
43332: PUSH
43333: EMPTY
43334: LIST
43335: LIST
43336: PUSH
43337: LD_INT 3
43339: PUSH
43340: LD_INT 1
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: EMPTY
43348: LIST
43349: LIST
43350: LIST
43351: ST_TO_ADDR
// Barracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
43352: LD_ADDR_VAR 0 55
43356: PUSH
43357: LD_INT 3
43359: PUSH
43360: LD_INT 2
43362: PUSH
43363: EMPTY
43364: LIST
43365: LIST
43366: PUSH
43367: LD_INT 3
43369: PUSH
43370: LD_INT 3
43372: PUSH
43373: EMPTY
43374: LIST
43375: LIST
43376: PUSH
43377: LD_INT 2
43379: PUSH
43380: LD_INT 3
43382: PUSH
43383: EMPTY
43384: LIST
43385: LIST
43386: PUSH
43387: EMPTY
43388: LIST
43389: LIST
43390: LIST
43391: ST_TO_ADDR
// Barracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
43392: LD_ADDR_VAR 0 56
43396: PUSH
43397: LD_INT 1
43399: PUSH
43400: LD_INT 3
43402: PUSH
43403: EMPTY
43404: LIST
43405: LIST
43406: PUSH
43407: LD_INT 0
43409: PUSH
43410: LD_INT 3
43412: PUSH
43413: EMPTY
43414: LIST
43415: LIST
43416: PUSH
43417: LD_INT 1
43419: NEG
43420: PUSH
43421: LD_INT 2
43423: PUSH
43424: EMPTY
43425: LIST
43426: LIST
43427: PUSH
43428: EMPTY
43429: LIST
43430: LIST
43431: LIST
43432: ST_TO_ADDR
// Barracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
43433: LD_ADDR_VAR 0 57
43437: PUSH
43438: LD_INT 2
43440: NEG
43441: PUSH
43442: LD_INT 1
43444: PUSH
43445: EMPTY
43446: LIST
43447: LIST
43448: PUSH
43449: LD_INT 3
43451: NEG
43452: PUSH
43453: LD_INT 0
43455: PUSH
43456: EMPTY
43457: LIST
43458: LIST
43459: PUSH
43460: LD_INT 3
43462: NEG
43463: PUSH
43464: LD_INT 1
43466: NEG
43467: PUSH
43468: EMPTY
43469: LIST
43470: LIST
43471: PUSH
43472: EMPTY
43473: LIST
43474: LIST
43475: LIST
43476: ST_TO_ADDR
// Barracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
43477: LD_ADDR_VAR 0 58
43481: PUSH
43482: LD_INT 2
43484: NEG
43485: PUSH
43486: LD_INT 3
43488: NEG
43489: PUSH
43490: EMPTY
43491: LIST
43492: LIST
43493: PUSH
43494: LD_INT 3
43496: NEG
43497: PUSH
43498: LD_INT 2
43500: NEG
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: LD_INT 3
43508: NEG
43509: PUSH
43510: LD_INT 3
43512: NEG
43513: PUSH
43514: EMPTY
43515: LIST
43516: LIST
43517: PUSH
43518: EMPTY
43519: LIST
43520: LIST
43521: LIST
43522: ST_TO_ADDR
// Bunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
43523: LD_ADDR_VAR 0 59
43527: PUSH
43528: LD_INT 1
43530: NEG
43531: PUSH
43532: LD_INT 2
43534: NEG
43535: PUSH
43536: EMPTY
43537: LIST
43538: LIST
43539: PUSH
43540: LD_INT 0
43542: PUSH
43543: LD_INT 2
43545: NEG
43546: PUSH
43547: EMPTY
43548: LIST
43549: LIST
43550: PUSH
43551: LD_INT 1
43553: PUSH
43554: LD_INT 1
43556: NEG
43557: PUSH
43558: EMPTY
43559: LIST
43560: LIST
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: LIST
43566: ST_TO_ADDR
// Bunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43567: LD_ADDR_VAR 0 60
43571: PUSH
43572: LD_INT 1
43574: PUSH
43575: LD_INT 1
43577: NEG
43578: PUSH
43579: EMPTY
43580: LIST
43581: LIST
43582: PUSH
43583: LD_INT 2
43585: PUSH
43586: LD_INT 0
43588: PUSH
43589: EMPTY
43590: LIST
43591: LIST
43592: PUSH
43593: LD_INT 2
43595: PUSH
43596: LD_INT 1
43598: PUSH
43599: EMPTY
43600: LIST
43601: LIST
43602: PUSH
43603: EMPTY
43604: LIST
43605: LIST
43606: LIST
43607: ST_TO_ADDR
// Bunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43608: LD_ADDR_VAR 0 61
43612: PUSH
43613: LD_INT 2
43615: PUSH
43616: LD_INT 1
43618: PUSH
43619: EMPTY
43620: LIST
43621: LIST
43622: PUSH
43623: LD_INT 2
43625: PUSH
43626: LD_INT 2
43628: PUSH
43629: EMPTY
43630: LIST
43631: LIST
43632: PUSH
43633: LD_INT 1
43635: PUSH
43636: LD_INT 2
43638: PUSH
43639: EMPTY
43640: LIST
43641: LIST
43642: PUSH
43643: EMPTY
43644: LIST
43645: LIST
43646: LIST
43647: ST_TO_ADDR
// Bunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43648: LD_ADDR_VAR 0 62
43652: PUSH
43653: LD_INT 1
43655: PUSH
43656: LD_INT 2
43658: PUSH
43659: EMPTY
43660: LIST
43661: LIST
43662: PUSH
43663: LD_INT 0
43665: PUSH
43666: LD_INT 2
43668: PUSH
43669: EMPTY
43670: LIST
43671: LIST
43672: PUSH
43673: LD_INT 1
43675: NEG
43676: PUSH
43677: LD_INT 1
43679: PUSH
43680: EMPTY
43681: LIST
43682: LIST
43683: PUSH
43684: EMPTY
43685: LIST
43686: LIST
43687: LIST
43688: ST_TO_ADDR
// Bunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43689: LD_ADDR_VAR 0 63
43693: PUSH
43694: LD_INT 1
43696: NEG
43697: PUSH
43698: LD_INT 1
43700: PUSH
43701: EMPTY
43702: LIST
43703: LIST
43704: PUSH
43705: LD_INT 2
43707: NEG
43708: PUSH
43709: LD_INT 0
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: PUSH
43716: LD_INT 2
43718: NEG
43719: PUSH
43720: LD_INT 1
43722: NEG
43723: PUSH
43724: EMPTY
43725: LIST
43726: LIST
43727: PUSH
43728: EMPTY
43729: LIST
43730: LIST
43731: LIST
43732: ST_TO_ADDR
// Bunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43733: LD_ADDR_VAR 0 64
43737: PUSH
43738: LD_INT 1
43740: NEG
43741: PUSH
43742: LD_INT 2
43744: NEG
43745: PUSH
43746: EMPTY
43747: LIST
43748: LIST
43749: PUSH
43750: LD_INT 2
43752: NEG
43753: PUSH
43754: LD_INT 1
43756: NEG
43757: PUSH
43758: EMPTY
43759: LIST
43760: LIST
43761: PUSH
43762: LD_INT 2
43764: NEG
43765: PUSH
43766: LD_INT 2
43768: NEG
43769: PUSH
43770: EMPTY
43771: LIST
43772: LIST
43773: PUSH
43774: EMPTY
43775: LIST
43776: LIST
43777: LIST
43778: ST_TO_ADDR
// end ; 2 :
43779: GO 47045
43781: LD_INT 2
43783: DOUBLE
43784: EQUAL
43785: IFTRUE 43789
43787: GO 47044
43789: POP
// begin Factory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
43790: LD_ADDR_VAR 0 29
43794: PUSH
43795: LD_INT 4
43797: PUSH
43798: LD_INT 0
43800: PUSH
43801: EMPTY
43802: LIST
43803: LIST
43804: PUSH
43805: LD_INT 4
43807: PUSH
43808: LD_INT 1
43810: NEG
43811: PUSH
43812: EMPTY
43813: LIST
43814: LIST
43815: PUSH
43816: LD_INT 5
43818: PUSH
43819: LD_INT 0
43821: PUSH
43822: EMPTY
43823: LIST
43824: LIST
43825: PUSH
43826: LD_INT 5
43828: PUSH
43829: LD_INT 1
43831: PUSH
43832: EMPTY
43833: LIST
43834: LIST
43835: PUSH
43836: LD_INT 4
43838: PUSH
43839: LD_INT 1
43841: PUSH
43842: EMPTY
43843: LIST
43844: LIST
43845: PUSH
43846: LD_INT 3
43848: PUSH
43849: LD_INT 0
43851: PUSH
43852: EMPTY
43853: LIST
43854: LIST
43855: PUSH
43856: LD_INT 3
43858: PUSH
43859: LD_INT 1
43861: NEG
43862: PUSH
43863: EMPTY
43864: LIST
43865: LIST
43866: PUSH
43867: LD_INT 3
43869: PUSH
43870: LD_INT 2
43872: NEG
43873: PUSH
43874: EMPTY
43875: LIST
43876: LIST
43877: PUSH
43878: LD_INT 5
43880: PUSH
43881: LD_INT 2
43883: PUSH
43884: EMPTY
43885: LIST
43886: LIST
43887: PUSH
43888: LD_INT 3
43890: PUSH
43891: LD_INT 3
43893: PUSH
43894: EMPTY
43895: LIST
43896: LIST
43897: PUSH
43898: LD_INT 3
43900: PUSH
43901: LD_INT 2
43903: PUSH
43904: EMPTY
43905: LIST
43906: LIST
43907: PUSH
43908: LD_INT 4
43910: PUSH
43911: LD_INT 3
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 4
43920: PUSH
43921: LD_INT 4
43923: PUSH
43924: EMPTY
43925: LIST
43926: LIST
43927: PUSH
43928: LD_INT 3
43930: PUSH
43931: LD_INT 4
43933: PUSH
43934: EMPTY
43935: LIST
43936: LIST
43937: PUSH
43938: LD_INT 2
43940: PUSH
43941: LD_INT 3
43943: PUSH
43944: EMPTY
43945: LIST
43946: LIST
43947: PUSH
43948: LD_INT 2
43950: PUSH
43951: LD_INT 2
43953: PUSH
43954: EMPTY
43955: LIST
43956: LIST
43957: PUSH
43958: LD_INT 4
43960: PUSH
43961: LD_INT 2
43963: PUSH
43964: EMPTY
43965: LIST
43966: LIST
43967: PUSH
43968: LD_INT 2
43970: PUSH
43971: LD_INT 4
43973: PUSH
43974: EMPTY
43975: LIST
43976: LIST
43977: PUSH
43978: LD_INT 0
43980: PUSH
43981: LD_INT 4
43983: PUSH
43984: EMPTY
43985: LIST
43986: LIST
43987: PUSH
43988: LD_INT 0
43990: PUSH
43991: LD_INT 3
43993: PUSH
43994: EMPTY
43995: LIST
43996: LIST
43997: PUSH
43998: LD_INT 1
44000: PUSH
44001: LD_INT 4
44003: PUSH
44004: EMPTY
44005: LIST
44006: LIST
44007: PUSH
44008: LD_INT 1
44010: PUSH
44011: LD_INT 5
44013: PUSH
44014: EMPTY
44015: LIST
44016: LIST
44017: PUSH
44018: LD_INT 0
44020: PUSH
44021: LD_INT 5
44023: PUSH
44024: EMPTY
44025: LIST
44026: LIST
44027: PUSH
44028: LD_INT 1
44030: NEG
44031: PUSH
44032: LD_INT 4
44034: PUSH
44035: EMPTY
44036: LIST
44037: LIST
44038: PUSH
44039: LD_INT 1
44041: NEG
44042: PUSH
44043: LD_INT 3
44045: PUSH
44046: EMPTY
44047: LIST
44048: LIST
44049: PUSH
44050: LD_INT 2
44052: PUSH
44053: LD_INT 5
44055: PUSH
44056: EMPTY
44057: LIST
44058: LIST
44059: PUSH
44060: LD_INT 2
44062: NEG
44063: PUSH
44064: LD_INT 3
44066: PUSH
44067: EMPTY
44068: LIST
44069: LIST
44070: PUSH
44071: LD_INT 3
44073: NEG
44074: PUSH
44075: LD_INT 0
44077: PUSH
44078: EMPTY
44079: LIST
44080: LIST
44081: PUSH
44082: LD_INT 3
44084: NEG
44085: PUSH
44086: LD_INT 1
44088: NEG
44089: PUSH
44090: EMPTY
44091: LIST
44092: LIST
44093: PUSH
44094: LD_INT 2
44096: NEG
44097: PUSH
44098: LD_INT 0
44100: PUSH
44101: EMPTY
44102: LIST
44103: LIST
44104: PUSH
44105: LD_INT 2
44107: NEG
44108: PUSH
44109: LD_INT 1
44111: PUSH
44112: EMPTY
44113: LIST
44114: LIST
44115: PUSH
44116: LD_INT 3
44118: NEG
44119: PUSH
44120: LD_INT 1
44122: PUSH
44123: EMPTY
44124: LIST
44125: LIST
44126: PUSH
44127: LD_INT 4
44129: NEG
44130: PUSH
44131: LD_INT 0
44133: PUSH
44134: EMPTY
44135: LIST
44136: LIST
44137: PUSH
44138: LD_INT 4
44140: NEG
44141: PUSH
44142: LD_INT 1
44144: NEG
44145: PUSH
44146: EMPTY
44147: LIST
44148: LIST
44149: PUSH
44150: LD_INT 4
44152: NEG
44153: PUSH
44154: LD_INT 2
44156: NEG
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 2
44164: NEG
44165: PUSH
44166: LD_INT 2
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 4
44175: NEG
44176: PUSH
44177: LD_INT 4
44179: NEG
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 4
44187: NEG
44188: PUSH
44189: LD_INT 5
44191: NEG
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 3
44199: NEG
44200: PUSH
44201: LD_INT 4
44203: NEG
44204: PUSH
44205: EMPTY
44206: LIST
44207: LIST
44208: PUSH
44209: LD_INT 3
44211: NEG
44212: PUSH
44213: LD_INT 3
44215: NEG
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PUSH
44221: LD_INT 4
44223: NEG
44224: PUSH
44225: LD_INT 3
44227: NEG
44228: PUSH
44229: EMPTY
44230: LIST
44231: LIST
44232: PUSH
44233: LD_INT 5
44235: NEG
44236: PUSH
44237: LD_INT 4
44239: NEG
44240: PUSH
44241: EMPTY
44242: LIST
44243: LIST
44244: PUSH
44245: LD_INT 5
44247: NEG
44248: PUSH
44249: LD_INT 5
44251: NEG
44252: PUSH
44253: EMPTY
44254: LIST
44255: LIST
44256: PUSH
44257: LD_INT 3
44259: NEG
44260: PUSH
44261: LD_INT 5
44263: NEG
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 5
44271: NEG
44272: PUSH
44273: LD_INT 3
44275: NEG
44276: PUSH
44277: EMPTY
44278: LIST
44279: LIST
44280: PUSH
44281: EMPTY
44282: LIST
44283: LIST
44284: LIST
44285: LIST
44286: LIST
44287: LIST
44288: LIST
44289: LIST
44290: LIST
44291: LIST
44292: LIST
44293: LIST
44294: LIST
44295: LIST
44296: LIST
44297: LIST
44298: LIST
44299: LIST
44300: LIST
44301: LIST
44302: LIST
44303: LIST
44304: LIST
44305: LIST
44306: LIST
44307: LIST
44308: LIST
44309: LIST
44310: LIST
44311: LIST
44312: LIST
44313: LIST
44314: LIST
44315: LIST
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: ST_TO_ADDR
// Factory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
44328: LD_ADDR_VAR 0 30
44332: PUSH
44333: LD_INT 4
44335: PUSH
44336: LD_INT 4
44338: PUSH
44339: EMPTY
44340: LIST
44341: LIST
44342: PUSH
44343: LD_INT 4
44345: PUSH
44346: LD_INT 3
44348: PUSH
44349: EMPTY
44350: LIST
44351: LIST
44352: PUSH
44353: LD_INT 5
44355: PUSH
44356: LD_INT 4
44358: PUSH
44359: EMPTY
44360: LIST
44361: LIST
44362: PUSH
44363: LD_INT 5
44365: PUSH
44366: LD_INT 5
44368: PUSH
44369: EMPTY
44370: LIST
44371: LIST
44372: PUSH
44373: LD_INT 4
44375: PUSH
44376: LD_INT 5
44378: PUSH
44379: EMPTY
44380: LIST
44381: LIST
44382: PUSH
44383: LD_INT 3
44385: PUSH
44386: LD_INT 4
44388: PUSH
44389: EMPTY
44390: LIST
44391: LIST
44392: PUSH
44393: LD_INT 3
44395: PUSH
44396: LD_INT 3
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 5
44405: PUSH
44406: LD_INT 3
44408: PUSH
44409: EMPTY
44410: LIST
44411: LIST
44412: PUSH
44413: LD_INT 3
44415: PUSH
44416: LD_INT 5
44418: PUSH
44419: EMPTY
44420: LIST
44421: LIST
44422: PUSH
44423: LD_INT 0
44425: PUSH
44426: LD_INT 3
44428: PUSH
44429: EMPTY
44430: LIST
44431: LIST
44432: PUSH
44433: LD_INT 0
44435: PUSH
44436: LD_INT 2
44438: PUSH
44439: EMPTY
44440: LIST
44441: LIST
44442: PUSH
44443: LD_INT 1
44445: PUSH
44446: LD_INT 3
44448: PUSH
44449: EMPTY
44450: LIST
44451: LIST
44452: PUSH
44453: LD_INT 1
44455: PUSH
44456: LD_INT 4
44458: PUSH
44459: EMPTY
44460: LIST
44461: LIST
44462: PUSH
44463: LD_INT 0
44465: PUSH
44466: LD_INT 4
44468: PUSH
44469: EMPTY
44470: LIST
44471: LIST
44472: PUSH
44473: LD_INT 1
44475: NEG
44476: PUSH
44477: LD_INT 3
44479: PUSH
44480: EMPTY
44481: LIST
44482: LIST
44483: PUSH
44484: LD_INT 1
44486: NEG
44487: PUSH
44488: LD_INT 2
44490: PUSH
44491: EMPTY
44492: LIST
44493: LIST
44494: PUSH
44495: LD_INT 2
44497: PUSH
44498: LD_INT 4
44500: PUSH
44501: EMPTY
44502: LIST
44503: LIST
44504: PUSH
44505: LD_INT 2
44507: NEG
44508: PUSH
44509: LD_INT 2
44511: PUSH
44512: EMPTY
44513: LIST
44514: LIST
44515: PUSH
44516: LD_INT 4
44518: NEG
44519: PUSH
44520: LD_INT 0
44522: PUSH
44523: EMPTY
44524: LIST
44525: LIST
44526: PUSH
44527: LD_INT 4
44529: NEG
44530: PUSH
44531: LD_INT 1
44533: NEG
44534: PUSH
44535: EMPTY
44536: LIST
44537: LIST
44538: PUSH
44539: LD_INT 3
44541: NEG
44542: PUSH
44543: LD_INT 0
44545: PUSH
44546: EMPTY
44547: LIST
44548: LIST
44549: PUSH
44550: LD_INT 3
44552: NEG
44553: PUSH
44554: LD_INT 1
44556: PUSH
44557: EMPTY
44558: LIST
44559: LIST
44560: PUSH
44561: LD_INT 4
44563: NEG
44564: PUSH
44565: LD_INT 1
44567: PUSH
44568: EMPTY
44569: LIST
44570: LIST
44571: PUSH
44572: LD_INT 5
44574: NEG
44575: PUSH
44576: LD_INT 0
44578: PUSH
44579: EMPTY
44580: LIST
44581: LIST
44582: PUSH
44583: LD_INT 5
44585: NEG
44586: PUSH
44587: LD_INT 1
44589: NEG
44590: PUSH
44591: EMPTY
44592: LIST
44593: LIST
44594: PUSH
44595: LD_INT 5
44597: NEG
44598: PUSH
44599: LD_INT 2
44601: NEG
44602: PUSH
44603: EMPTY
44604: LIST
44605: LIST
44606: PUSH
44607: LD_INT 3
44609: NEG
44610: PUSH
44611: LD_INT 2
44613: PUSH
44614: EMPTY
44615: LIST
44616: LIST
44617: PUSH
44618: LD_INT 3
44620: NEG
44621: PUSH
44622: LD_INT 3
44624: NEG
44625: PUSH
44626: EMPTY
44627: LIST
44628: LIST
44629: PUSH
44630: LD_INT 3
44632: NEG
44633: PUSH
44634: LD_INT 4
44636: NEG
44637: PUSH
44638: EMPTY
44639: LIST
44640: LIST
44641: PUSH
44642: LD_INT 2
44644: NEG
44645: PUSH
44646: LD_INT 3
44648: NEG
44649: PUSH
44650: EMPTY
44651: LIST
44652: LIST
44653: PUSH
44654: LD_INT 2
44656: NEG
44657: PUSH
44658: LD_INT 2
44660: NEG
44661: PUSH
44662: EMPTY
44663: LIST
44664: LIST
44665: PUSH
44666: LD_INT 3
44668: NEG
44669: PUSH
44670: LD_INT 2
44672: NEG
44673: PUSH
44674: EMPTY
44675: LIST
44676: LIST
44677: PUSH
44678: LD_INT 4
44680: NEG
44681: PUSH
44682: LD_INT 3
44684: NEG
44685: PUSH
44686: EMPTY
44687: LIST
44688: LIST
44689: PUSH
44690: LD_INT 4
44692: NEG
44693: PUSH
44694: LD_INT 4
44696: NEG
44697: PUSH
44698: EMPTY
44699: LIST
44700: LIST
44701: PUSH
44702: LD_INT 2
44704: NEG
44705: PUSH
44706: LD_INT 4
44708: NEG
44709: PUSH
44710: EMPTY
44711: LIST
44712: LIST
44713: PUSH
44714: LD_INT 4
44716: NEG
44717: PUSH
44718: LD_INT 2
44720: NEG
44721: PUSH
44722: EMPTY
44723: LIST
44724: LIST
44725: PUSH
44726: LD_INT 0
44728: PUSH
44729: LD_INT 4
44731: NEG
44732: PUSH
44733: EMPTY
44734: LIST
44735: LIST
44736: PUSH
44737: LD_INT 0
44739: PUSH
44740: LD_INT 5
44742: NEG
44743: PUSH
44744: EMPTY
44745: LIST
44746: LIST
44747: PUSH
44748: LD_INT 1
44750: PUSH
44751: LD_INT 4
44753: NEG
44754: PUSH
44755: EMPTY
44756: LIST
44757: LIST
44758: PUSH
44759: LD_INT 1
44761: PUSH
44762: LD_INT 3
44764: NEG
44765: PUSH
44766: EMPTY
44767: LIST
44768: LIST
44769: PUSH
44770: LD_INT 0
44772: PUSH
44773: LD_INT 3
44775: NEG
44776: PUSH
44777: EMPTY
44778: LIST
44779: LIST
44780: PUSH
44781: LD_INT 1
44783: NEG
44784: PUSH
44785: LD_INT 4
44787: NEG
44788: PUSH
44789: EMPTY
44790: LIST
44791: LIST
44792: PUSH
44793: LD_INT 1
44795: NEG
44796: PUSH
44797: LD_INT 5
44799: NEG
44800: PUSH
44801: EMPTY
44802: LIST
44803: LIST
44804: PUSH
44805: LD_INT 2
44807: PUSH
44808: LD_INT 3
44810: NEG
44811: PUSH
44812: EMPTY
44813: LIST
44814: LIST
44815: PUSH
44816: LD_INT 2
44818: NEG
44819: PUSH
44820: LD_INT 5
44822: NEG
44823: PUSH
44824: EMPTY
44825: LIST
44826: LIST
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: LIST
44832: LIST
44833: LIST
44834: LIST
44835: LIST
44836: LIST
44837: LIST
44838: LIST
44839: LIST
44840: LIST
44841: LIST
44842: LIST
44843: LIST
44844: LIST
44845: LIST
44846: LIST
44847: LIST
44848: LIST
44849: LIST
44850: LIST
44851: LIST
44852: LIST
44853: LIST
44854: LIST
44855: LIST
44856: LIST
44857: LIST
44858: LIST
44859: LIST
44860: LIST
44861: LIST
44862: LIST
44863: LIST
44864: LIST
44865: LIST
44866: LIST
44867: LIST
44868: LIST
44869: LIST
44870: LIST
44871: LIST
44872: LIST
44873: LIST
44874: ST_TO_ADDR
// Factory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
44875: LD_ADDR_VAR 0 31
44879: PUSH
44880: LD_INT 0
44882: PUSH
44883: LD_INT 4
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: PUSH
44890: LD_INT 0
44892: PUSH
44893: LD_INT 3
44895: PUSH
44896: EMPTY
44897: LIST
44898: LIST
44899: PUSH
44900: LD_INT 1
44902: PUSH
44903: LD_INT 4
44905: PUSH
44906: EMPTY
44907: LIST
44908: LIST
44909: PUSH
44910: LD_INT 1
44912: PUSH
44913: LD_INT 5
44915: PUSH
44916: EMPTY
44917: LIST
44918: LIST
44919: PUSH
44920: LD_INT 0
44922: PUSH
44923: LD_INT 5
44925: PUSH
44926: EMPTY
44927: LIST
44928: LIST
44929: PUSH
44930: LD_INT 1
44932: NEG
44933: PUSH
44934: LD_INT 4
44936: PUSH
44937: EMPTY
44938: LIST
44939: LIST
44940: PUSH
44941: LD_INT 1
44943: NEG
44944: PUSH
44945: LD_INT 3
44947: PUSH
44948: EMPTY
44949: LIST
44950: LIST
44951: PUSH
44952: LD_INT 2
44954: PUSH
44955: LD_INT 5
44957: PUSH
44958: EMPTY
44959: LIST
44960: LIST
44961: PUSH
44962: LD_INT 2
44964: NEG
44965: PUSH
44966: LD_INT 3
44968: PUSH
44969: EMPTY
44970: LIST
44971: LIST
44972: PUSH
44973: LD_INT 3
44975: NEG
44976: PUSH
44977: LD_INT 0
44979: PUSH
44980: EMPTY
44981: LIST
44982: LIST
44983: PUSH
44984: LD_INT 3
44986: NEG
44987: PUSH
44988: LD_INT 1
44990: NEG
44991: PUSH
44992: EMPTY
44993: LIST
44994: LIST
44995: PUSH
44996: LD_INT 2
44998: NEG
44999: PUSH
45000: LD_INT 0
45002: PUSH
45003: EMPTY
45004: LIST
45005: LIST
45006: PUSH
45007: LD_INT 2
45009: NEG
45010: PUSH
45011: LD_INT 1
45013: PUSH
45014: EMPTY
45015: LIST
45016: LIST
45017: PUSH
45018: LD_INT 3
45020: NEG
45021: PUSH
45022: LD_INT 1
45024: PUSH
45025: EMPTY
45026: LIST
45027: LIST
45028: PUSH
45029: LD_INT 4
45031: NEG
45032: PUSH
45033: LD_INT 0
45035: PUSH
45036: EMPTY
45037: LIST
45038: LIST
45039: PUSH
45040: LD_INT 4
45042: NEG
45043: PUSH
45044: LD_INT 1
45046: NEG
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 4
45054: NEG
45055: PUSH
45056: LD_INT 2
45058: NEG
45059: PUSH
45060: EMPTY
45061: LIST
45062: LIST
45063: PUSH
45064: LD_INT 2
45066: NEG
45067: PUSH
45068: LD_INT 2
45070: PUSH
45071: EMPTY
45072: LIST
45073: LIST
45074: PUSH
45075: LD_INT 4
45077: NEG
45078: PUSH
45079: LD_INT 4
45081: NEG
45082: PUSH
45083: EMPTY
45084: LIST
45085: LIST
45086: PUSH
45087: LD_INT 4
45089: NEG
45090: PUSH
45091: LD_INT 5
45093: NEG
45094: PUSH
45095: EMPTY
45096: LIST
45097: LIST
45098: PUSH
45099: LD_INT 3
45101: NEG
45102: PUSH
45103: LD_INT 4
45105: NEG
45106: PUSH
45107: EMPTY
45108: LIST
45109: LIST
45110: PUSH
45111: LD_INT 3
45113: NEG
45114: PUSH
45115: LD_INT 3
45117: NEG
45118: PUSH
45119: EMPTY
45120: LIST
45121: LIST
45122: PUSH
45123: LD_INT 4
45125: NEG
45126: PUSH
45127: LD_INT 3
45129: NEG
45130: PUSH
45131: EMPTY
45132: LIST
45133: LIST
45134: PUSH
45135: LD_INT 5
45137: NEG
45138: PUSH
45139: LD_INT 4
45141: NEG
45142: PUSH
45143: EMPTY
45144: LIST
45145: LIST
45146: PUSH
45147: LD_INT 5
45149: NEG
45150: PUSH
45151: LD_INT 5
45153: NEG
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 3
45161: NEG
45162: PUSH
45163: LD_INT 5
45165: NEG
45166: PUSH
45167: EMPTY
45168: LIST
45169: LIST
45170: PUSH
45171: LD_INT 5
45173: NEG
45174: PUSH
45175: LD_INT 3
45177: NEG
45178: PUSH
45179: EMPTY
45180: LIST
45181: LIST
45182: PUSH
45183: LD_INT 0
45185: PUSH
45186: LD_INT 3
45188: NEG
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: PUSH
45194: LD_INT 0
45196: PUSH
45197: LD_INT 4
45199: NEG
45200: PUSH
45201: EMPTY
45202: LIST
45203: LIST
45204: PUSH
45205: LD_INT 1
45207: PUSH
45208: LD_INT 3
45210: NEG
45211: PUSH
45212: EMPTY
45213: LIST
45214: LIST
45215: PUSH
45216: LD_INT 1
45218: PUSH
45219: LD_INT 2
45221: NEG
45222: PUSH
45223: EMPTY
45224: LIST
45225: LIST
45226: PUSH
45227: LD_INT 0
45229: PUSH
45230: LD_INT 2
45232: NEG
45233: PUSH
45234: EMPTY
45235: LIST
45236: LIST
45237: PUSH
45238: LD_INT 1
45240: NEG
45241: PUSH
45242: LD_INT 3
45244: NEG
45245: PUSH
45246: EMPTY
45247: LIST
45248: LIST
45249: PUSH
45250: LD_INT 1
45252: NEG
45253: PUSH
45254: LD_INT 4
45256: NEG
45257: PUSH
45258: EMPTY
45259: LIST
45260: LIST
45261: PUSH
45262: LD_INT 2
45264: PUSH
45265: LD_INT 2
45267: NEG
45268: PUSH
45269: EMPTY
45270: LIST
45271: LIST
45272: PUSH
45273: LD_INT 2
45275: NEG
45276: PUSH
45277: LD_INT 4
45279: NEG
45280: PUSH
45281: EMPTY
45282: LIST
45283: LIST
45284: PUSH
45285: LD_INT 4
45287: PUSH
45288: LD_INT 0
45290: PUSH
45291: EMPTY
45292: LIST
45293: LIST
45294: PUSH
45295: LD_INT 4
45297: PUSH
45298: LD_INT 1
45300: NEG
45301: PUSH
45302: EMPTY
45303: LIST
45304: LIST
45305: PUSH
45306: LD_INT 5
45308: PUSH
45309: LD_INT 0
45311: PUSH
45312: EMPTY
45313: LIST
45314: LIST
45315: PUSH
45316: LD_INT 5
45318: PUSH
45319: LD_INT 1
45321: PUSH
45322: EMPTY
45323: LIST
45324: LIST
45325: PUSH
45326: LD_INT 4
45328: PUSH
45329: LD_INT 1
45331: PUSH
45332: EMPTY
45333: LIST
45334: LIST
45335: PUSH
45336: LD_INT 3
45338: PUSH
45339: LD_INT 0
45341: PUSH
45342: EMPTY
45343: LIST
45344: LIST
45345: PUSH
45346: LD_INT 3
45348: PUSH
45349: LD_INT 1
45351: NEG
45352: PUSH
45353: EMPTY
45354: LIST
45355: LIST
45356: PUSH
45357: LD_INT 3
45359: PUSH
45360: LD_INT 2
45362: NEG
45363: PUSH
45364: EMPTY
45365: LIST
45366: LIST
45367: PUSH
45368: LD_INT 5
45370: PUSH
45371: LD_INT 2
45373: PUSH
45374: EMPTY
45375: LIST
45376: LIST
45377: PUSH
45378: EMPTY
45379: LIST
45380: LIST
45381: LIST
45382: LIST
45383: LIST
45384: LIST
45385: LIST
45386: LIST
45387: LIST
45388: LIST
45389: LIST
45390: LIST
45391: LIST
45392: LIST
45393: LIST
45394: LIST
45395: LIST
45396: LIST
45397: LIST
45398: LIST
45399: LIST
45400: LIST
45401: LIST
45402: LIST
45403: LIST
45404: LIST
45405: LIST
45406: LIST
45407: LIST
45408: LIST
45409: LIST
45410: LIST
45411: LIST
45412: LIST
45413: LIST
45414: LIST
45415: LIST
45416: LIST
45417: LIST
45418: LIST
45419: LIST
45420: LIST
45421: LIST
45422: LIST
45423: LIST
45424: ST_TO_ADDR
// Factory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
45425: LD_ADDR_VAR 0 32
45429: PUSH
45430: LD_INT 4
45432: NEG
45433: PUSH
45434: LD_INT 0
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 4
45443: NEG
45444: PUSH
45445: LD_INT 1
45447: NEG
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 3
45455: NEG
45456: PUSH
45457: LD_INT 0
45459: PUSH
45460: EMPTY
45461: LIST
45462: LIST
45463: PUSH
45464: LD_INT 3
45466: NEG
45467: PUSH
45468: LD_INT 1
45470: PUSH
45471: EMPTY
45472: LIST
45473: LIST
45474: PUSH
45475: LD_INT 4
45477: NEG
45478: PUSH
45479: LD_INT 1
45481: PUSH
45482: EMPTY
45483: LIST
45484: LIST
45485: PUSH
45486: LD_INT 5
45488: NEG
45489: PUSH
45490: LD_INT 0
45492: PUSH
45493: EMPTY
45494: LIST
45495: LIST
45496: PUSH
45497: LD_INT 5
45499: NEG
45500: PUSH
45501: LD_INT 1
45503: NEG
45504: PUSH
45505: EMPTY
45506: LIST
45507: LIST
45508: PUSH
45509: LD_INT 5
45511: NEG
45512: PUSH
45513: LD_INT 2
45515: NEG
45516: PUSH
45517: EMPTY
45518: LIST
45519: LIST
45520: PUSH
45521: LD_INT 3
45523: NEG
45524: PUSH
45525: LD_INT 2
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 3
45534: NEG
45535: PUSH
45536: LD_INT 3
45538: NEG
45539: PUSH
45540: EMPTY
45541: LIST
45542: LIST
45543: PUSH
45544: LD_INT 3
45546: NEG
45547: PUSH
45548: LD_INT 4
45550: NEG
45551: PUSH
45552: EMPTY
45553: LIST
45554: LIST
45555: PUSH
45556: LD_INT 2
45558: NEG
45559: PUSH
45560: LD_INT 3
45562: NEG
45563: PUSH
45564: EMPTY
45565: LIST
45566: LIST
45567: PUSH
45568: LD_INT 2
45570: NEG
45571: PUSH
45572: LD_INT 2
45574: NEG
45575: PUSH
45576: EMPTY
45577: LIST
45578: LIST
45579: PUSH
45580: LD_INT 3
45582: NEG
45583: PUSH
45584: LD_INT 2
45586: NEG
45587: PUSH
45588: EMPTY
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 4
45594: NEG
45595: PUSH
45596: LD_INT 3
45598: NEG
45599: PUSH
45600: EMPTY
45601: LIST
45602: LIST
45603: PUSH
45604: LD_INT 4
45606: NEG
45607: PUSH
45608: LD_INT 4
45610: NEG
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 2
45618: NEG
45619: PUSH
45620: LD_INT 4
45622: NEG
45623: PUSH
45624: EMPTY
45625: LIST
45626: LIST
45627: PUSH
45628: LD_INT 4
45630: NEG
45631: PUSH
45632: LD_INT 2
45634: NEG
45635: PUSH
45636: EMPTY
45637: LIST
45638: LIST
45639: PUSH
45640: LD_INT 0
45642: PUSH
45643: LD_INT 4
45645: NEG
45646: PUSH
45647: EMPTY
45648: LIST
45649: LIST
45650: PUSH
45651: LD_INT 0
45653: PUSH
45654: LD_INT 5
45656: NEG
45657: PUSH
45658: EMPTY
45659: LIST
45660: LIST
45661: PUSH
45662: LD_INT 1
45664: PUSH
45665: LD_INT 4
45667: NEG
45668: PUSH
45669: EMPTY
45670: LIST
45671: LIST
45672: PUSH
45673: LD_INT 1
45675: PUSH
45676: LD_INT 3
45678: NEG
45679: PUSH
45680: EMPTY
45681: LIST
45682: LIST
45683: PUSH
45684: LD_INT 0
45686: PUSH
45687: LD_INT 3
45689: NEG
45690: PUSH
45691: EMPTY
45692: LIST
45693: LIST
45694: PUSH
45695: LD_INT 1
45697: NEG
45698: PUSH
45699: LD_INT 4
45701: NEG
45702: PUSH
45703: EMPTY
45704: LIST
45705: LIST
45706: PUSH
45707: LD_INT 1
45709: NEG
45710: PUSH
45711: LD_INT 5
45713: NEG
45714: PUSH
45715: EMPTY
45716: LIST
45717: LIST
45718: PUSH
45719: LD_INT 2
45721: PUSH
45722: LD_INT 3
45724: NEG
45725: PUSH
45726: EMPTY
45727: LIST
45728: LIST
45729: PUSH
45730: LD_INT 2
45732: NEG
45733: PUSH
45734: LD_INT 5
45736: NEG
45737: PUSH
45738: EMPTY
45739: LIST
45740: LIST
45741: PUSH
45742: LD_INT 3
45744: PUSH
45745: LD_INT 0
45747: PUSH
45748: EMPTY
45749: LIST
45750: LIST
45751: PUSH
45752: LD_INT 3
45754: PUSH
45755: LD_INT 1
45757: NEG
45758: PUSH
45759: EMPTY
45760: LIST
45761: LIST
45762: PUSH
45763: LD_INT 4
45765: PUSH
45766: LD_INT 0
45768: PUSH
45769: EMPTY
45770: LIST
45771: LIST
45772: PUSH
45773: LD_INT 4
45775: PUSH
45776: LD_INT 1
45778: PUSH
45779: EMPTY
45780: LIST
45781: LIST
45782: PUSH
45783: LD_INT 3
45785: PUSH
45786: LD_INT 1
45788: PUSH
45789: EMPTY
45790: LIST
45791: LIST
45792: PUSH
45793: LD_INT 2
45795: PUSH
45796: LD_INT 0
45798: PUSH
45799: EMPTY
45800: LIST
45801: LIST
45802: PUSH
45803: LD_INT 2
45805: PUSH
45806: LD_INT 1
45808: NEG
45809: PUSH
45810: EMPTY
45811: LIST
45812: LIST
45813: PUSH
45814: LD_INT 2
45816: PUSH
45817: LD_INT 2
45819: NEG
45820: PUSH
45821: EMPTY
45822: LIST
45823: LIST
45824: PUSH
45825: LD_INT 4
45827: PUSH
45828: LD_INT 2
45830: PUSH
45831: EMPTY
45832: LIST
45833: LIST
45834: PUSH
45835: LD_INT 4
45837: PUSH
45838: LD_INT 4
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: PUSH
45845: LD_INT 4
45847: PUSH
45848: LD_INT 3
45850: PUSH
45851: EMPTY
45852: LIST
45853: LIST
45854: PUSH
45855: LD_INT 5
45857: PUSH
45858: LD_INT 4
45860: PUSH
45861: EMPTY
45862: LIST
45863: LIST
45864: PUSH
45865: LD_INT 5
45867: PUSH
45868: LD_INT 5
45870: PUSH
45871: EMPTY
45872: LIST
45873: LIST
45874: PUSH
45875: LD_INT 4
45877: PUSH
45878: LD_INT 5
45880: PUSH
45881: EMPTY
45882: LIST
45883: LIST
45884: PUSH
45885: LD_INT 3
45887: PUSH
45888: LD_INT 4
45890: PUSH
45891: EMPTY
45892: LIST
45893: LIST
45894: PUSH
45895: LD_INT 3
45897: PUSH
45898: LD_INT 3
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 5
45907: PUSH
45908: LD_INT 3
45910: PUSH
45911: EMPTY
45912: LIST
45913: LIST
45914: PUSH
45915: LD_INT 3
45917: PUSH
45918: LD_INT 5
45920: PUSH
45921: EMPTY
45922: LIST
45923: LIST
45924: PUSH
45925: EMPTY
45926: LIST
45927: LIST
45928: LIST
45929: LIST
45930: LIST
45931: LIST
45932: LIST
45933: LIST
45934: LIST
45935: LIST
45936: LIST
45937: LIST
45938: LIST
45939: LIST
45940: LIST
45941: LIST
45942: LIST
45943: LIST
45944: LIST
45945: LIST
45946: LIST
45947: LIST
45948: LIST
45949: LIST
45950: LIST
45951: LIST
45952: LIST
45953: LIST
45954: LIST
45955: LIST
45956: LIST
45957: LIST
45958: LIST
45959: LIST
45960: LIST
45961: LIST
45962: LIST
45963: LIST
45964: LIST
45965: LIST
45966: LIST
45967: LIST
45968: LIST
45969: LIST
45970: LIST
45971: ST_TO_ADDR
// Factory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
45972: LD_ADDR_VAR 0 33
45976: PUSH
45977: LD_INT 4
45979: NEG
45980: PUSH
45981: LD_INT 4
45983: NEG
45984: PUSH
45985: EMPTY
45986: LIST
45987: LIST
45988: PUSH
45989: LD_INT 4
45991: NEG
45992: PUSH
45993: LD_INT 5
45995: NEG
45996: PUSH
45997: EMPTY
45998: LIST
45999: LIST
46000: PUSH
46001: LD_INT 3
46003: NEG
46004: PUSH
46005: LD_INT 4
46007: NEG
46008: PUSH
46009: EMPTY
46010: LIST
46011: LIST
46012: PUSH
46013: LD_INT 3
46015: NEG
46016: PUSH
46017: LD_INT 3
46019: NEG
46020: PUSH
46021: EMPTY
46022: LIST
46023: LIST
46024: PUSH
46025: LD_INT 4
46027: NEG
46028: PUSH
46029: LD_INT 3
46031: NEG
46032: PUSH
46033: EMPTY
46034: LIST
46035: LIST
46036: PUSH
46037: LD_INT 5
46039: NEG
46040: PUSH
46041: LD_INT 4
46043: NEG
46044: PUSH
46045: EMPTY
46046: LIST
46047: LIST
46048: PUSH
46049: LD_INT 5
46051: NEG
46052: PUSH
46053: LD_INT 5
46055: NEG
46056: PUSH
46057: EMPTY
46058: LIST
46059: LIST
46060: PUSH
46061: LD_INT 3
46063: NEG
46064: PUSH
46065: LD_INT 5
46067: NEG
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PUSH
46073: LD_INT 5
46075: NEG
46076: PUSH
46077: LD_INT 3
46079: NEG
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 0
46087: PUSH
46088: LD_INT 3
46090: NEG
46091: PUSH
46092: EMPTY
46093: LIST
46094: LIST
46095: PUSH
46096: LD_INT 0
46098: PUSH
46099: LD_INT 4
46101: NEG
46102: PUSH
46103: EMPTY
46104: LIST
46105: LIST
46106: PUSH
46107: LD_INT 1
46109: PUSH
46110: LD_INT 3
46112: NEG
46113: PUSH
46114: EMPTY
46115: LIST
46116: LIST
46117: PUSH
46118: LD_INT 1
46120: PUSH
46121: LD_INT 2
46123: NEG
46124: PUSH
46125: EMPTY
46126: LIST
46127: LIST
46128: PUSH
46129: LD_INT 0
46131: PUSH
46132: LD_INT 2
46134: NEG
46135: PUSH
46136: EMPTY
46137: LIST
46138: LIST
46139: PUSH
46140: LD_INT 1
46142: NEG
46143: PUSH
46144: LD_INT 3
46146: NEG
46147: PUSH
46148: EMPTY
46149: LIST
46150: LIST
46151: PUSH
46152: LD_INT 1
46154: NEG
46155: PUSH
46156: LD_INT 4
46158: NEG
46159: PUSH
46160: EMPTY
46161: LIST
46162: LIST
46163: PUSH
46164: LD_INT 2
46166: PUSH
46167: LD_INT 2
46169: NEG
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 2
46177: NEG
46178: PUSH
46179: LD_INT 4
46181: NEG
46182: PUSH
46183: EMPTY
46184: LIST
46185: LIST
46186: PUSH
46187: LD_INT 4
46189: PUSH
46190: LD_INT 0
46192: PUSH
46193: EMPTY
46194: LIST
46195: LIST
46196: PUSH
46197: LD_INT 4
46199: PUSH
46200: LD_INT 1
46202: NEG
46203: PUSH
46204: EMPTY
46205: LIST
46206: LIST
46207: PUSH
46208: LD_INT 5
46210: PUSH
46211: LD_INT 0
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 5
46220: PUSH
46221: LD_INT 1
46223: PUSH
46224: EMPTY
46225: LIST
46226: LIST
46227: PUSH
46228: LD_INT 4
46230: PUSH
46231: LD_INT 1
46233: PUSH
46234: EMPTY
46235: LIST
46236: LIST
46237: PUSH
46238: LD_INT 3
46240: PUSH
46241: LD_INT 0
46243: PUSH
46244: EMPTY
46245: LIST
46246: LIST
46247: PUSH
46248: LD_INT 3
46250: PUSH
46251: LD_INT 1
46253: NEG
46254: PUSH
46255: EMPTY
46256: LIST
46257: LIST
46258: PUSH
46259: LD_INT 3
46261: PUSH
46262: LD_INT 2
46264: NEG
46265: PUSH
46266: EMPTY
46267: LIST
46268: LIST
46269: PUSH
46270: LD_INT 5
46272: PUSH
46273: LD_INT 2
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: PUSH
46280: LD_INT 3
46282: PUSH
46283: LD_INT 3
46285: PUSH
46286: EMPTY
46287: LIST
46288: LIST
46289: PUSH
46290: LD_INT 3
46292: PUSH
46293: LD_INT 2
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 4
46302: PUSH
46303: LD_INT 3
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 4
46312: PUSH
46313: LD_INT 4
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: LD_INT 3
46322: PUSH
46323: LD_INT 4
46325: PUSH
46326: EMPTY
46327: LIST
46328: LIST
46329: PUSH
46330: LD_INT 2
46332: PUSH
46333: LD_INT 3
46335: PUSH
46336: EMPTY
46337: LIST
46338: LIST
46339: PUSH
46340: LD_INT 2
46342: PUSH
46343: LD_INT 2
46345: PUSH
46346: EMPTY
46347: LIST
46348: LIST
46349: PUSH
46350: LD_INT 4
46352: PUSH
46353: LD_INT 2
46355: PUSH
46356: EMPTY
46357: LIST
46358: LIST
46359: PUSH
46360: LD_INT 2
46362: PUSH
46363: LD_INT 4
46365: PUSH
46366: EMPTY
46367: LIST
46368: LIST
46369: PUSH
46370: LD_INT 0
46372: PUSH
46373: LD_INT 4
46375: PUSH
46376: EMPTY
46377: LIST
46378: LIST
46379: PUSH
46380: LD_INT 0
46382: PUSH
46383: LD_INT 3
46385: PUSH
46386: EMPTY
46387: LIST
46388: LIST
46389: PUSH
46390: LD_INT 1
46392: PUSH
46393: LD_INT 4
46395: PUSH
46396: EMPTY
46397: LIST
46398: LIST
46399: PUSH
46400: LD_INT 1
46402: PUSH
46403: LD_INT 5
46405: PUSH
46406: EMPTY
46407: LIST
46408: LIST
46409: PUSH
46410: LD_INT 0
46412: PUSH
46413: LD_INT 5
46415: PUSH
46416: EMPTY
46417: LIST
46418: LIST
46419: PUSH
46420: LD_INT 1
46422: NEG
46423: PUSH
46424: LD_INT 4
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 1
46433: NEG
46434: PUSH
46435: LD_INT 3
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: LD_INT 2
46444: PUSH
46445: LD_INT 5
46447: PUSH
46448: EMPTY
46449: LIST
46450: LIST
46451: PUSH
46452: LD_INT 2
46454: NEG
46455: PUSH
46456: LD_INT 3
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: EMPTY
46464: LIST
46465: LIST
46466: LIST
46467: LIST
46468: LIST
46469: LIST
46470: LIST
46471: LIST
46472: LIST
46473: LIST
46474: LIST
46475: LIST
46476: LIST
46477: LIST
46478: LIST
46479: LIST
46480: LIST
46481: LIST
46482: LIST
46483: LIST
46484: LIST
46485: LIST
46486: LIST
46487: LIST
46488: LIST
46489: LIST
46490: LIST
46491: LIST
46492: LIST
46493: LIST
46494: LIST
46495: LIST
46496: LIST
46497: LIST
46498: LIST
46499: LIST
46500: LIST
46501: LIST
46502: LIST
46503: LIST
46504: LIST
46505: LIST
46506: LIST
46507: LIST
46508: LIST
46509: ST_TO_ADDR
// Factory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
46510: LD_ADDR_VAR 0 34
46514: PUSH
46515: LD_INT 0
46517: PUSH
46518: LD_INT 4
46520: NEG
46521: PUSH
46522: EMPTY
46523: LIST
46524: LIST
46525: PUSH
46526: LD_INT 0
46528: PUSH
46529: LD_INT 5
46531: NEG
46532: PUSH
46533: EMPTY
46534: LIST
46535: LIST
46536: PUSH
46537: LD_INT 1
46539: PUSH
46540: LD_INT 4
46542: NEG
46543: PUSH
46544: EMPTY
46545: LIST
46546: LIST
46547: PUSH
46548: LD_INT 1
46550: PUSH
46551: LD_INT 3
46553: NEG
46554: PUSH
46555: EMPTY
46556: LIST
46557: LIST
46558: PUSH
46559: LD_INT 0
46561: PUSH
46562: LD_INT 3
46564: NEG
46565: PUSH
46566: EMPTY
46567: LIST
46568: LIST
46569: PUSH
46570: LD_INT 1
46572: NEG
46573: PUSH
46574: LD_INT 4
46576: NEG
46577: PUSH
46578: EMPTY
46579: LIST
46580: LIST
46581: PUSH
46582: LD_INT 1
46584: NEG
46585: PUSH
46586: LD_INT 5
46588: NEG
46589: PUSH
46590: EMPTY
46591: LIST
46592: LIST
46593: PUSH
46594: LD_INT 2
46596: PUSH
46597: LD_INT 3
46599: NEG
46600: PUSH
46601: EMPTY
46602: LIST
46603: LIST
46604: PUSH
46605: LD_INT 2
46607: NEG
46608: PUSH
46609: LD_INT 5
46611: NEG
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: LD_INT 3
46619: PUSH
46620: LD_INT 0
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: PUSH
46627: LD_INT 3
46629: PUSH
46630: LD_INT 1
46632: NEG
46633: PUSH
46634: EMPTY
46635: LIST
46636: LIST
46637: PUSH
46638: LD_INT 4
46640: PUSH
46641: LD_INT 0
46643: PUSH
46644: EMPTY
46645: LIST
46646: LIST
46647: PUSH
46648: LD_INT 4
46650: PUSH
46651: LD_INT 1
46653: PUSH
46654: EMPTY
46655: LIST
46656: LIST
46657: PUSH
46658: LD_INT 3
46660: PUSH
46661: LD_INT 1
46663: PUSH
46664: EMPTY
46665: LIST
46666: LIST
46667: PUSH
46668: LD_INT 2
46670: PUSH
46671: LD_INT 0
46673: PUSH
46674: EMPTY
46675: LIST
46676: LIST
46677: PUSH
46678: LD_INT 2
46680: PUSH
46681: LD_INT 1
46683: NEG
46684: PUSH
46685: EMPTY
46686: LIST
46687: LIST
46688: PUSH
46689: LD_INT 2
46691: PUSH
46692: LD_INT 2
46694: NEG
46695: PUSH
46696: EMPTY
46697: LIST
46698: LIST
46699: PUSH
46700: LD_INT 4
46702: PUSH
46703: LD_INT 2
46705: PUSH
46706: EMPTY
46707: LIST
46708: LIST
46709: PUSH
46710: LD_INT 4
46712: PUSH
46713: LD_INT 4
46715: PUSH
46716: EMPTY
46717: LIST
46718: LIST
46719: PUSH
46720: LD_INT 4
46722: PUSH
46723: LD_INT 3
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 5
46732: PUSH
46733: LD_INT 4
46735: PUSH
46736: EMPTY
46737: LIST
46738: LIST
46739: PUSH
46740: LD_INT 5
46742: PUSH
46743: LD_INT 5
46745: PUSH
46746: EMPTY
46747: LIST
46748: LIST
46749: PUSH
46750: LD_INT 4
46752: PUSH
46753: LD_INT 5
46755: PUSH
46756: EMPTY
46757: LIST
46758: LIST
46759: PUSH
46760: LD_INT 3
46762: PUSH
46763: LD_INT 4
46765: PUSH
46766: EMPTY
46767: LIST
46768: LIST
46769: PUSH
46770: LD_INT 3
46772: PUSH
46773: LD_INT 3
46775: PUSH
46776: EMPTY
46777: LIST
46778: LIST
46779: PUSH
46780: LD_INT 5
46782: PUSH
46783: LD_INT 3
46785: PUSH
46786: EMPTY
46787: LIST
46788: LIST
46789: PUSH
46790: LD_INT 3
46792: PUSH
46793: LD_INT 5
46795: PUSH
46796: EMPTY
46797: LIST
46798: LIST
46799: PUSH
46800: LD_INT 0
46802: PUSH
46803: LD_INT 3
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 0
46812: PUSH
46813: LD_INT 2
46815: PUSH
46816: EMPTY
46817: LIST
46818: LIST
46819: PUSH
46820: LD_INT 1
46822: PUSH
46823: LD_INT 3
46825: PUSH
46826: EMPTY
46827: LIST
46828: LIST
46829: PUSH
46830: LD_INT 1
46832: PUSH
46833: LD_INT 4
46835: PUSH
46836: EMPTY
46837: LIST
46838: LIST
46839: PUSH
46840: LD_INT 0
46842: PUSH
46843: LD_INT 4
46845: PUSH
46846: EMPTY
46847: LIST
46848: LIST
46849: PUSH
46850: LD_INT 1
46852: NEG
46853: PUSH
46854: LD_INT 3
46856: PUSH
46857: EMPTY
46858: LIST
46859: LIST
46860: PUSH
46861: LD_INT 1
46863: NEG
46864: PUSH
46865: LD_INT 2
46867: PUSH
46868: EMPTY
46869: LIST
46870: LIST
46871: PUSH
46872: LD_INT 2
46874: PUSH
46875: LD_INT 4
46877: PUSH
46878: EMPTY
46879: LIST
46880: LIST
46881: PUSH
46882: LD_INT 2
46884: NEG
46885: PUSH
46886: LD_INT 2
46888: PUSH
46889: EMPTY
46890: LIST
46891: LIST
46892: PUSH
46893: LD_INT 4
46895: NEG
46896: PUSH
46897: LD_INT 0
46899: PUSH
46900: EMPTY
46901: LIST
46902: LIST
46903: PUSH
46904: LD_INT 4
46906: NEG
46907: PUSH
46908: LD_INT 1
46910: NEG
46911: PUSH
46912: EMPTY
46913: LIST
46914: LIST
46915: PUSH
46916: LD_INT 3
46918: NEG
46919: PUSH
46920: LD_INT 0
46922: PUSH
46923: EMPTY
46924: LIST
46925: LIST
46926: PUSH
46927: LD_INT 3
46929: NEG
46930: PUSH
46931: LD_INT 1
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: PUSH
46938: LD_INT 4
46940: NEG
46941: PUSH
46942: LD_INT 1
46944: PUSH
46945: EMPTY
46946: LIST
46947: LIST
46948: PUSH
46949: LD_INT 5
46951: NEG
46952: PUSH
46953: LD_INT 0
46955: PUSH
46956: EMPTY
46957: LIST
46958: LIST
46959: PUSH
46960: LD_INT 5
46962: NEG
46963: PUSH
46964: LD_INT 1
46966: NEG
46967: PUSH
46968: EMPTY
46969: LIST
46970: LIST
46971: PUSH
46972: LD_INT 5
46974: NEG
46975: PUSH
46976: LD_INT 2
46978: NEG
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 3
46986: NEG
46987: PUSH
46988: LD_INT 2
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: EMPTY
46996: LIST
46997: LIST
46998: LIST
46999: LIST
47000: LIST
47001: LIST
47002: LIST
47003: LIST
47004: LIST
47005: LIST
47006: LIST
47007: LIST
47008: LIST
47009: LIST
47010: LIST
47011: LIST
47012: LIST
47013: LIST
47014: LIST
47015: LIST
47016: LIST
47017: LIST
47018: LIST
47019: LIST
47020: LIST
47021: LIST
47022: LIST
47023: LIST
47024: LIST
47025: LIST
47026: LIST
47027: LIST
47028: LIST
47029: LIST
47030: LIST
47031: LIST
47032: LIST
47033: LIST
47034: LIST
47035: LIST
47036: LIST
47037: LIST
47038: LIST
47039: LIST
47040: LIST
47041: ST_TO_ADDR
// end ; end ;
47042: GO 47045
47044: POP
// case btype of b_depot , b_warehouse :
47045: LD_VAR 0 1
47049: PUSH
47050: LD_INT 0
47052: DOUBLE
47053: EQUAL
47054: IFTRUE 47064
47056: LD_INT 1
47058: DOUBLE
47059: EQUAL
47060: IFTRUE 47064
47062: GO 47265
47064: POP
// case nation of nation_american :
47065: LD_VAR 0 5
47069: PUSH
47070: LD_INT 1
47072: DOUBLE
47073: EQUAL
47074: IFTRUE 47078
47076: GO 47134
47078: POP
// temp_list = [ DepotAm0 , DepotAm1 , DepotAm2 , DepotAm3 , DepotAm4 , DepotAm5 ] [ dir + 1 ] ; nation_arabian :
47079: LD_ADDR_VAR 0 9
47083: PUSH
47084: LD_VAR 0 11
47088: PUSH
47089: LD_VAR 0 12
47093: PUSH
47094: LD_VAR 0 13
47098: PUSH
47099: LD_VAR 0 14
47103: PUSH
47104: LD_VAR 0 15
47108: PUSH
47109: LD_VAR 0 16
47113: PUSH
47114: EMPTY
47115: LIST
47116: LIST
47117: LIST
47118: LIST
47119: LIST
47120: LIST
47121: PUSH
47122: LD_VAR 0 4
47126: PUSH
47127: LD_INT 1
47129: PLUS
47130: ARRAY
47131: ST_TO_ADDR
47132: GO 47263
47134: LD_INT 2
47136: DOUBLE
47137: EQUAL
47138: IFTRUE 47142
47140: GO 47198
47142: POP
// temp_list = [ DepotAr0 , DepotAr1 , DepotAr2 , DepotAr3 , DepotAr4 , DepotAr5 ] [ dir + 1 ] ; nation_russian :
47143: LD_ADDR_VAR 0 9
47147: PUSH
47148: LD_VAR 0 17
47152: PUSH
47153: LD_VAR 0 18
47157: PUSH
47158: LD_VAR 0 19
47162: PUSH
47163: LD_VAR 0 20
47167: PUSH
47168: LD_VAR 0 21
47172: PUSH
47173: LD_VAR 0 22
47177: PUSH
47178: EMPTY
47179: LIST
47180: LIST
47181: LIST
47182: LIST
47183: LIST
47184: LIST
47185: PUSH
47186: LD_VAR 0 4
47190: PUSH
47191: LD_INT 1
47193: PLUS
47194: ARRAY
47195: ST_TO_ADDR
47196: GO 47263
47198: LD_INT 3
47200: DOUBLE
47201: EQUAL
47202: IFTRUE 47206
47204: GO 47262
47206: POP
// temp_list = [ DepotRu0 , DepotRu1 , DepotRu2 , DepotRu3 , DepotRu4 , DepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
47207: LD_ADDR_VAR 0 9
47211: PUSH
47212: LD_VAR 0 23
47216: PUSH
47217: LD_VAR 0 24
47221: PUSH
47222: LD_VAR 0 25
47226: PUSH
47227: LD_VAR 0 26
47231: PUSH
47232: LD_VAR 0 27
47236: PUSH
47237: LD_VAR 0 28
47241: PUSH
47242: EMPTY
47243: LIST
47244: LIST
47245: LIST
47246: LIST
47247: LIST
47248: LIST
47249: PUSH
47250: LD_VAR 0 4
47254: PUSH
47255: LD_INT 1
47257: PLUS
47258: ARRAY
47259: ST_TO_ADDR
47260: GO 47263
47262: POP
47263: GO 47818
47265: LD_INT 2
47267: DOUBLE
47268: EQUAL
47269: IFTRUE 47279
47271: LD_INT 3
47273: DOUBLE
47274: EQUAL
47275: IFTRUE 47279
47277: GO 47335
47279: POP
// temp_list = [ Factory0 , Factory1 , Factory2 , Factory3 , Factory4 , Factory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
47280: LD_ADDR_VAR 0 9
47284: PUSH
47285: LD_VAR 0 29
47289: PUSH
47290: LD_VAR 0 30
47294: PUSH
47295: LD_VAR 0 31
47299: PUSH
47300: LD_VAR 0 32
47304: PUSH
47305: LD_VAR 0 33
47309: PUSH
47310: LD_VAR 0 34
47314: PUSH
47315: EMPTY
47316: LIST
47317: LIST
47318: LIST
47319: LIST
47320: LIST
47321: LIST
47322: PUSH
47323: LD_VAR 0 4
47327: PUSH
47328: LD_INT 1
47330: PLUS
47331: ARRAY
47332: ST_TO_ADDR
47333: GO 47818
47335: LD_INT 16
47337: DOUBLE
47338: EQUAL
47339: IFTRUE 47397
47341: LD_INT 17
47343: DOUBLE
47344: EQUAL
47345: IFTRUE 47397
47347: LD_INT 18
47349: DOUBLE
47350: EQUAL
47351: IFTRUE 47397
47353: LD_INT 19
47355: DOUBLE
47356: EQUAL
47357: IFTRUE 47397
47359: LD_INT 22
47361: DOUBLE
47362: EQUAL
47363: IFTRUE 47397
47365: LD_INT 20
47367: DOUBLE
47368: EQUAL
47369: IFTRUE 47397
47371: LD_INT 21
47373: DOUBLE
47374: EQUAL
47375: IFTRUE 47397
47377: LD_INT 23
47379: DOUBLE
47380: EQUAL
47381: IFTRUE 47397
47383: LD_INT 24
47385: DOUBLE
47386: EQUAL
47387: IFTRUE 47397
47389: LD_INT 25
47391: DOUBLE
47392: EQUAL
47393: IFTRUE 47397
47395: GO 47453
47397: POP
// temp_list = [ Ext0 , Ext1 , Ext2 , Ext3 , Ext4 , Ext5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
47398: LD_ADDR_VAR 0 9
47402: PUSH
47403: LD_VAR 0 35
47407: PUSH
47408: LD_VAR 0 36
47412: PUSH
47413: LD_VAR 0 37
47417: PUSH
47418: LD_VAR 0 38
47422: PUSH
47423: LD_VAR 0 39
47427: PUSH
47428: LD_VAR 0 40
47432: PUSH
47433: EMPTY
47434: LIST
47435: LIST
47436: LIST
47437: LIST
47438: LIST
47439: LIST
47440: PUSH
47441: LD_VAR 0 4
47445: PUSH
47446: LD_INT 1
47448: PLUS
47449: ARRAY
47450: ST_TO_ADDR
47451: GO 47818
47453: LD_INT 6
47455: DOUBLE
47456: EQUAL
47457: IFTRUE 47509
47459: LD_INT 7
47461: DOUBLE
47462: EQUAL
47463: IFTRUE 47509
47465: LD_INT 8
47467: DOUBLE
47468: EQUAL
47469: IFTRUE 47509
47471: LD_INT 13
47473: DOUBLE
47474: EQUAL
47475: IFTRUE 47509
47477: LD_INT 12
47479: DOUBLE
47480: EQUAL
47481: IFTRUE 47509
47483: LD_INT 15
47485: DOUBLE
47486: EQUAL
47487: IFTRUE 47509
47489: LD_INT 11
47491: DOUBLE
47492: EQUAL
47493: IFTRUE 47509
47495: LD_INT 14
47497: DOUBLE
47498: EQUAL
47499: IFTRUE 47509
47501: LD_INT 10
47503: DOUBLE
47504: EQUAL
47505: IFTRUE 47509
47507: GO 47565
47509: POP
// temp_list = [ Lab0 , Lab1 , Lab2 , Lab3 , Lab4 , Lab5 ] [ dir + 1 ] ; b_control_tower :
47510: LD_ADDR_VAR 0 9
47514: PUSH
47515: LD_VAR 0 41
47519: PUSH
47520: LD_VAR 0 42
47524: PUSH
47525: LD_VAR 0 43
47529: PUSH
47530: LD_VAR 0 44
47534: PUSH
47535: LD_VAR 0 45
47539: PUSH
47540: LD_VAR 0 46
47544: PUSH
47545: EMPTY
47546: LIST
47547: LIST
47548: LIST
47549: LIST
47550: LIST
47551: LIST
47552: PUSH
47553: LD_VAR 0 4
47557: PUSH
47558: LD_INT 1
47560: PLUS
47561: ARRAY
47562: ST_TO_ADDR
47563: GO 47818
47565: LD_INT 36
47567: DOUBLE
47568: EQUAL
47569: IFTRUE 47573
47571: GO 47629
47573: POP
// temp_list = [ ControlTower0 , ControlTower1 , ControlTower2 , ControlTower3 , ControlTower4 , ControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
47574: LD_ADDR_VAR 0 9
47578: PUSH
47579: LD_VAR 0 47
47583: PUSH
47584: LD_VAR 0 48
47588: PUSH
47589: LD_VAR 0 49
47593: PUSH
47594: LD_VAR 0 50
47598: PUSH
47599: LD_VAR 0 51
47603: PUSH
47604: LD_VAR 0 52
47608: PUSH
47609: EMPTY
47610: LIST
47611: LIST
47612: LIST
47613: LIST
47614: LIST
47615: LIST
47616: PUSH
47617: LD_VAR 0 4
47621: PUSH
47622: LD_INT 1
47624: PLUS
47625: ARRAY
47626: ST_TO_ADDR
47627: GO 47818
47629: LD_INT 4
47631: DOUBLE
47632: EQUAL
47633: IFTRUE 47655
47635: LD_INT 5
47637: DOUBLE
47638: EQUAL
47639: IFTRUE 47655
47641: LD_INT 34
47643: DOUBLE
47644: EQUAL
47645: IFTRUE 47655
47647: LD_INT 37
47649: DOUBLE
47650: EQUAL
47651: IFTRUE 47655
47653: GO 47711
47655: POP
// temp_list = [ Barracks0 , Barracks1 , Barracks2 , Barracks3 , Barracks4 , Barracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
47656: LD_ADDR_VAR 0 9
47660: PUSH
47661: LD_VAR 0 53
47665: PUSH
47666: LD_VAR 0 54
47670: PUSH
47671: LD_VAR 0 55
47675: PUSH
47676: LD_VAR 0 56
47680: PUSH
47681: LD_VAR 0 57
47685: PUSH
47686: LD_VAR 0 58
47690: PUSH
47691: EMPTY
47692: LIST
47693: LIST
47694: LIST
47695: LIST
47696: LIST
47697: LIST
47698: PUSH
47699: LD_VAR 0 4
47703: PUSH
47704: LD_INT 1
47706: PLUS
47707: ARRAY
47708: ST_TO_ADDR
47709: GO 47818
47711: LD_INT 31
47713: DOUBLE
47714: EQUAL
47715: IFTRUE 47761
47717: LD_INT 32
47719: DOUBLE
47720: EQUAL
47721: IFTRUE 47761
47723: LD_INT 33
47725: DOUBLE
47726: EQUAL
47727: IFTRUE 47761
47729: LD_INT 27
47731: DOUBLE
47732: EQUAL
47733: IFTRUE 47761
47735: LD_INT 26
47737: DOUBLE
47738: EQUAL
47739: IFTRUE 47761
47741: LD_INT 28
47743: DOUBLE
47744: EQUAL
47745: IFTRUE 47761
47747: LD_INT 29
47749: DOUBLE
47750: EQUAL
47751: IFTRUE 47761
47753: LD_INT 30
47755: DOUBLE
47756: EQUAL
47757: IFTRUE 47761
47759: GO 47817
47761: POP
// temp_list = [ Bunker0 , Bunker1 , Bunker2 , Bunker3 , Bunker4 , Bunker5 ] [ dir + 1 ] ; end ;
47762: LD_ADDR_VAR 0 9
47766: PUSH
47767: LD_VAR 0 59
47771: PUSH
47772: LD_VAR 0 60
47776: PUSH
47777: LD_VAR 0 61
47781: PUSH
47782: LD_VAR 0 62
47786: PUSH
47787: LD_VAR 0 63
47791: PUSH
47792: LD_VAR 0 64
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: LIST
47801: LIST
47802: LIST
47803: LIST
47804: PUSH
47805: LD_VAR 0 4
47809: PUSH
47810: LD_INT 1
47812: PLUS
47813: ARRAY
47814: ST_TO_ADDR
47815: GO 47818
47817: POP
// temp_list2 = [ ] ;
47818: LD_ADDR_VAR 0 10
47822: PUSH
47823: EMPTY
47824: ST_TO_ADDR
// for i in temp_list do
47825: LD_ADDR_VAR 0 8
47829: PUSH
47830: LD_VAR 0 9
47834: PUSH
47835: FOR_IN
47836: IFFALSE 47888
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
47838: LD_ADDR_VAR 0 10
47842: PUSH
47843: LD_VAR 0 10
47847: PUSH
47848: LD_VAR 0 8
47852: PUSH
47853: LD_INT 1
47855: ARRAY
47856: PUSH
47857: LD_VAR 0 2
47861: PLUS
47862: PUSH
47863: LD_VAR 0 8
47867: PUSH
47868: LD_INT 2
47870: ARRAY
47871: PUSH
47872: LD_VAR 0 3
47876: PLUS
47877: PUSH
47878: EMPTY
47879: LIST
47880: LIST
47881: PUSH
47882: EMPTY
47883: LIST
47884: ADD
47885: ST_TO_ADDR
47886: GO 47835
47888: POP
47889: POP
// result = temp_list2 ;
47890: LD_ADDR_VAR 0 7
47894: PUSH
47895: LD_VAR 0 10
47899: ST_TO_ADDR
// end ;
47900: LD_VAR 0 7
47904: RET
// export function EnemyInRange ( unit , dist ) ; begin
47905: LD_INT 0
47907: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
47908: LD_ADDR_VAR 0 3
47912: PUSH
47913: LD_VAR 0 1
47917: PPUSH
47918: CALL_OW 255
47922: PPUSH
47923: LD_VAR 0 1
47927: PPUSH
47928: CALL_OW 250
47932: PPUSH
47933: LD_VAR 0 1
47937: PPUSH
47938: CALL_OW 251
47942: PPUSH
47943: LD_VAR 0 2
47947: PPUSH
47948: CALL 22009 0 4
47952: PUSH
47953: LD_INT 4
47955: ARRAY
47956: ST_TO_ADDR
// end ;
47957: LD_VAR 0 3
47961: RET
// export function PlayerSeeMe ( unit ) ; begin
47962: LD_INT 0
47964: PPUSH
// result := See ( your_side , unit ) ;
47965: LD_ADDR_VAR 0 2
47969: PUSH
47970: LD_OWVAR 2
47974: PPUSH
47975: LD_VAR 0 1
47979: PPUSH
47980: CALL_OW 292
47984: ST_TO_ADDR
// end ;
47985: LD_VAR 0 2
47989: RET
// export function ReverseDir ( unit ) ; begin
47990: LD_INT 0
47992: PPUSH
// if not unit then
47993: LD_VAR 0 1
47997: NOT
47998: IFFALSE 48002
// exit ;
48000: GO 48025
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
48002: LD_ADDR_VAR 0 2
48006: PUSH
48007: LD_VAR 0 1
48011: PPUSH
48012: CALL_OW 254
48016: PUSH
48017: LD_INT 3
48019: PLUS
48020: PUSH
48021: LD_INT 6
48023: MOD
48024: ST_TO_ADDR
// end ;
48025: LD_VAR 0 2
48029: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
48030: LD_INT 0
48032: PPUSH
48033: PPUSH
48034: PPUSH
48035: PPUSH
48036: PPUSH
// if not hexes then
48037: LD_VAR 0 2
48041: NOT
48042: IFFALSE 48046
// exit ;
48044: GO 48194
// dist := 9999 ;
48046: LD_ADDR_VAR 0 5
48050: PUSH
48051: LD_INT 9999
48053: ST_TO_ADDR
// for i = 1 to hexes do
48054: LD_ADDR_VAR 0 4
48058: PUSH
48059: DOUBLE
48060: LD_INT 1
48062: DEC
48063: ST_TO_ADDR
48064: LD_VAR 0 2
48068: PUSH
48069: FOR_TO
48070: IFFALSE 48182
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
48072: LD_VAR 0 1
48076: PPUSH
48077: LD_VAR 0 2
48081: PUSH
48082: LD_VAR 0 4
48086: ARRAY
48087: PUSH
48088: LD_INT 1
48090: ARRAY
48091: PPUSH
48092: LD_VAR 0 2
48096: PUSH
48097: LD_VAR 0 4
48101: ARRAY
48102: PUSH
48103: LD_INT 2
48105: ARRAY
48106: PPUSH
48107: CALL_OW 297
48111: PUSH
48112: LD_VAR 0 5
48116: LESS
48117: IFFALSE 48180
// begin hex := hexes [ i ] ;
48119: LD_ADDR_VAR 0 7
48123: PUSH
48124: LD_VAR 0 2
48128: PUSH
48129: LD_VAR 0 4
48133: ARRAY
48134: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
48135: LD_ADDR_VAR 0 5
48139: PUSH
48140: LD_VAR 0 1
48144: PPUSH
48145: LD_VAR 0 2
48149: PUSH
48150: LD_VAR 0 4
48154: ARRAY
48155: PUSH
48156: LD_INT 1
48158: ARRAY
48159: PPUSH
48160: LD_VAR 0 2
48164: PUSH
48165: LD_VAR 0 4
48169: ARRAY
48170: PUSH
48171: LD_INT 2
48173: ARRAY
48174: PPUSH
48175: CALL_OW 297
48179: ST_TO_ADDR
// end ; end ;
48180: GO 48069
48182: POP
48183: POP
// result := hex ;
48184: LD_ADDR_VAR 0 3
48188: PUSH
48189: LD_VAR 0 7
48193: ST_TO_ADDR
// end ;
48194: LD_VAR 0 3
48198: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
48199: LD_INT 0
48201: PPUSH
48202: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
48203: LD_VAR 0 1
48207: NOT
48208: PUSH
48209: LD_VAR 0 1
48213: PUSH
48214: LD_INT 21
48216: PUSH
48217: LD_INT 2
48219: PUSH
48220: EMPTY
48221: LIST
48222: LIST
48223: PUSH
48224: LD_INT 23
48226: PUSH
48227: LD_INT 2
48229: PUSH
48230: EMPTY
48231: LIST
48232: LIST
48233: PUSH
48234: EMPTY
48235: LIST
48236: LIST
48237: PPUSH
48238: CALL_OW 69
48242: IN
48243: NOT
48244: OR
48245: IFFALSE 48249
// exit ;
48247: GO 48296
// for i = 1 to 3 do
48249: LD_ADDR_VAR 0 3
48253: PUSH
48254: DOUBLE
48255: LD_INT 1
48257: DEC
48258: ST_TO_ADDR
48259: LD_INT 3
48261: PUSH
48262: FOR_TO
48263: IFFALSE 48294
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
48265: LD_VAR 0 1
48269: PPUSH
48270: CALL_OW 250
48274: PPUSH
48275: LD_VAR 0 1
48279: PPUSH
48280: CALL_OW 251
48284: PPUSH
48285: LD_INT 1
48287: PPUSH
48288: CALL_OW 453
48292: GO 48262
48294: POP
48295: POP
// end ;
48296: LD_VAR 0 2
48300: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
48301: LD_INT 0
48303: PPUSH
48304: PPUSH
48305: PPUSH
48306: PPUSH
48307: PPUSH
48308: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
48309: LD_VAR 0 1
48313: NOT
48314: PUSH
48315: LD_VAR 0 2
48319: NOT
48320: OR
48321: PUSH
48322: LD_VAR 0 1
48326: PPUSH
48327: CALL_OW 314
48331: OR
48332: IFFALSE 48336
// exit ;
48334: GO 48777
// x := GetX ( enemy_unit ) ;
48336: LD_ADDR_VAR 0 7
48340: PUSH
48341: LD_VAR 0 2
48345: PPUSH
48346: CALL_OW 250
48350: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
48351: LD_ADDR_VAR 0 8
48355: PUSH
48356: LD_VAR 0 2
48360: PPUSH
48361: CALL_OW 251
48365: ST_TO_ADDR
// if not x or not y then
48366: LD_VAR 0 7
48370: NOT
48371: PUSH
48372: LD_VAR 0 8
48376: NOT
48377: OR
48378: IFFALSE 48382
// exit ;
48380: GO 48777
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
48382: LD_ADDR_VAR 0 6
48386: PUSH
48387: LD_VAR 0 7
48391: PPUSH
48392: LD_INT 0
48394: PPUSH
48395: LD_INT 4
48397: PPUSH
48398: CALL_OW 272
48402: PUSH
48403: LD_VAR 0 8
48407: PPUSH
48408: LD_INT 0
48410: PPUSH
48411: LD_INT 4
48413: PPUSH
48414: CALL_OW 273
48418: PUSH
48419: EMPTY
48420: LIST
48421: LIST
48422: PUSH
48423: LD_VAR 0 7
48427: PPUSH
48428: LD_INT 1
48430: PPUSH
48431: LD_INT 4
48433: PPUSH
48434: CALL_OW 272
48438: PUSH
48439: LD_VAR 0 8
48443: PPUSH
48444: LD_INT 1
48446: PPUSH
48447: LD_INT 4
48449: PPUSH
48450: CALL_OW 273
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_VAR 0 7
48463: PPUSH
48464: LD_INT 2
48466: PPUSH
48467: LD_INT 4
48469: PPUSH
48470: CALL_OW 272
48474: PUSH
48475: LD_VAR 0 8
48479: PPUSH
48480: LD_INT 2
48482: PPUSH
48483: LD_INT 4
48485: PPUSH
48486: CALL_OW 273
48490: PUSH
48491: EMPTY
48492: LIST
48493: LIST
48494: PUSH
48495: LD_VAR 0 7
48499: PPUSH
48500: LD_INT 3
48502: PPUSH
48503: LD_INT 4
48505: PPUSH
48506: CALL_OW 272
48510: PUSH
48511: LD_VAR 0 8
48515: PPUSH
48516: LD_INT 3
48518: PPUSH
48519: LD_INT 4
48521: PPUSH
48522: CALL_OW 273
48526: PUSH
48527: EMPTY
48528: LIST
48529: LIST
48530: PUSH
48531: LD_VAR 0 7
48535: PPUSH
48536: LD_INT 4
48538: PPUSH
48539: LD_INT 4
48541: PPUSH
48542: CALL_OW 272
48546: PUSH
48547: LD_VAR 0 8
48551: PPUSH
48552: LD_INT 4
48554: PPUSH
48555: LD_INT 4
48557: PPUSH
48558: CALL_OW 273
48562: PUSH
48563: EMPTY
48564: LIST
48565: LIST
48566: PUSH
48567: LD_VAR 0 7
48571: PPUSH
48572: LD_INT 5
48574: PPUSH
48575: LD_INT 4
48577: PPUSH
48578: CALL_OW 272
48582: PUSH
48583: LD_VAR 0 8
48587: PPUSH
48588: LD_INT 5
48590: PPUSH
48591: LD_INT 4
48593: PPUSH
48594: CALL_OW 273
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: PUSH
48603: EMPTY
48604: LIST
48605: LIST
48606: LIST
48607: LIST
48608: LIST
48609: LIST
48610: ST_TO_ADDR
// for i = tmp downto 1 do
48611: LD_ADDR_VAR 0 4
48615: PUSH
48616: DOUBLE
48617: LD_VAR 0 6
48621: INC
48622: ST_TO_ADDR
48623: LD_INT 1
48625: PUSH
48626: FOR_DOWNTO
48627: IFFALSE 48728
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
48629: LD_VAR 0 6
48633: PUSH
48634: LD_VAR 0 4
48638: ARRAY
48639: PUSH
48640: LD_INT 1
48642: ARRAY
48643: PPUSH
48644: LD_VAR 0 6
48648: PUSH
48649: LD_VAR 0 4
48653: ARRAY
48654: PUSH
48655: LD_INT 2
48657: ARRAY
48658: PPUSH
48659: CALL_OW 488
48663: NOT
48664: PUSH
48665: LD_VAR 0 6
48669: PUSH
48670: LD_VAR 0 4
48674: ARRAY
48675: PUSH
48676: LD_INT 1
48678: ARRAY
48679: PPUSH
48680: LD_VAR 0 6
48684: PUSH
48685: LD_VAR 0 4
48689: ARRAY
48690: PUSH
48691: LD_INT 2
48693: ARRAY
48694: PPUSH
48695: CALL_OW 428
48699: PUSH
48700: LD_INT 0
48702: NONEQUAL
48703: OR
48704: IFFALSE 48726
// tmp := Delete ( tmp , i ) ;
48706: LD_ADDR_VAR 0 6
48710: PUSH
48711: LD_VAR 0 6
48715: PPUSH
48716: LD_VAR 0 4
48720: PPUSH
48721: CALL_OW 3
48725: ST_TO_ADDR
48726: GO 48626
48728: POP
48729: POP
// j := GetClosestHex ( unit , tmp ) ;
48730: LD_ADDR_VAR 0 5
48734: PUSH
48735: LD_VAR 0 1
48739: PPUSH
48740: LD_VAR 0 6
48744: PPUSH
48745: CALL 48030 0 2
48749: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
48750: LD_VAR 0 1
48754: PPUSH
48755: LD_VAR 0 5
48759: PUSH
48760: LD_INT 1
48762: ARRAY
48763: PPUSH
48764: LD_VAR 0 5
48768: PUSH
48769: LD_INT 2
48771: ARRAY
48772: PPUSH
48773: CALL_OW 111
// end ;
48777: LD_VAR 0 3
48781: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
48782: LD_INT 0
48784: PPUSH
48785: PPUSH
48786: PPUSH
// uc_side = 0 ;
48787: LD_ADDR_OWVAR 20
48791: PUSH
48792: LD_INT 0
48794: ST_TO_ADDR
// uc_nation = 0 ;
48795: LD_ADDR_OWVAR 21
48799: PUSH
48800: LD_INT 0
48802: ST_TO_ADDR
// InitHc ;
48803: CALL_OW 19
// InitVc ;
48807: CALL_OW 20
// if mastodonts then
48811: LD_VAR 0 6
48815: IFFALSE 48882
// for i = 1 to mastodonts do
48817: LD_ADDR_VAR 0 11
48821: PUSH
48822: DOUBLE
48823: LD_INT 1
48825: DEC
48826: ST_TO_ADDR
48827: LD_VAR 0 6
48831: PUSH
48832: FOR_TO
48833: IFFALSE 48880
// begin vc_chassis := 31 ;
48835: LD_ADDR_OWVAR 37
48839: PUSH
48840: LD_INT 31
48842: ST_TO_ADDR
// vc_control := control_rider ;
48843: LD_ADDR_OWVAR 38
48847: PUSH
48848: LD_INT 4
48850: ST_TO_ADDR
// animal := CreateVehicle ;
48851: LD_ADDR_VAR 0 12
48855: PUSH
48856: CALL_OW 45
48860: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48861: LD_VAR 0 12
48865: PPUSH
48866: LD_VAR 0 8
48870: PPUSH
48871: LD_INT 0
48873: PPUSH
48874: CALL 50951 0 3
// end ;
48878: GO 48832
48880: POP
48881: POP
// if horses then
48882: LD_VAR 0 5
48886: IFFALSE 48953
// for i = 1 to horses do
48888: LD_ADDR_VAR 0 11
48892: PUSH
48893: DOUBLE
48894: LD_INT 1
48896: DEC
48897: ST_TO_ADDR
48898: LD_VAR 0 5
48902: PUSH
48903: FOR_TO
48904: IFFALSE 48951
// begin hc_class := 21 ;
48906: LD_ADDR_OWVAR 28
48910: PUSH
48911: LD_INT 21
48913: ST_TO_ADDR
// hc_gallery :=  ;
48914: LD_ADDR_OWVAR 33
48918: PUSH
48919: LD_STRING 
48921: ST_TO_ADDR
// animal := CreateHuman ;
48922: LD_ADDR_VAR 0 12
48926: PUSH
48927: CALL_OW 44
48931: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
48932: LD_VAR 0 12
48936: PPUSH
48937: LD_VAR 0 8
48941: PPUSH
48942: LD_INT 0
48944: PPUSH
48945: CALL 50951 0 3
// end ;
48949: GO 48903
48951: POP
48952: POP
// if birds then
48953: LD_VAR 0 1
48957: IFFALSE 49024
// for i = 1 to birds do
48959: LD_ADDR_VAR 0 11
48963: PUSH
48964: DOUBLE
48965: LD_INT 1
48967: DEC
48968: ST_TO_ADDR
48969: LD_VAR 0 1
48973: PUSH
48974: FOR_TO
48975: IFFALSE 49022
// begin hc_class = 18 ;
48977: LD_ADDR_OWVAR 28
48981: PUSH
48982: LD_INT 18
48984: ST_TO_ADDR
// hc_gallery =  ;
48985: LD_ADDR_OWVAR 33
48989: PUSH
48990: LD_STRING 
48992: ST_TO_ADDR
// animal := CreateHuman ;
48993: LD_ADDR_VAR 0 12
48997: PUSH
48998: CALL_OW 44
49002: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49003: LD_VAR 0 12
49007: PPUSH
49008: LD_VAR 0 8
49012: PPUSH
49013: LD_INT 0
49015: PPUSH
49016: CALL 50951 0 3
// end ;
49020: GO 48974
49022: POP
49023: POP
// if tigers then
49024: LD_VAR 0 2
49028: IFFALSE 49112
// for i = 1 to tigers do
49030: LD_ADDR_VAR 0 11
49034: PUSH
49035: DOUBLE
49036: LD_INT 1
49038: DEC
49039: ST_TO_ADDR
49040: LD_VAR 0 2
49044: PUSH
49045: FOR_TO
49046: IFFALSE 49110
// begin hc_class = class_tiger ;
49048: LD_ADDR_OWVAR 28
49052: PUSH
49053: LD_INT 14
49055: ST_TO_ADDR
// hc_gallery =  ;
49056: LD_ADDR_OWVAR 33
49060: PUSH
49061: LD_STRING 
49063: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
49064: LD_ADDR_OWVAR 35
49068: PUSH
49069: LD_INT 7
49071: NEG
49072: PPUSH
49073: LD_INT 7
49075: PPUSH
49076: CALL_OW 12
49080: ST_TO_ADDR
// animal := CreateHuman ;
49081: LD_ADDR_VAR 0 12
49085: PUSH
49086: CALL_OW 44
49090: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49091: LD_VAR 0 12
49095: PPUSH
49096: LD_VAR 0 8
49100: PPUSH
49101: LD_INT 0
49103: PPUSH
49104: CALL 50951 0 3
// end ;
49108: GO 49045
49110: POP
49111: POP
// if apemans then
49112: LD_VAR 0 3
49116: IFFALSE 49239
// for i = 1 to apemans do
49118: LD_ADDR_VAR 0 11
49122: PUSH
49123: DOUBLE
49124: LD_INT 1
49126: DEC
49127: ST_TO_ADDR
49128: LD_VAR 0 3
49132: PUSH
49133: FOR_TO
49134: IFFALSE 49237
// begin hc_class = class_apeman ;
49136: LD_ADDR_OWVAR 28
49140: PUSH
49141: LD_INT 12
49143: ST_TO_ADDR
// hc_gallery =  ;
49144: LD_ADDR_OWVAR 33
49148: PUSH
49149: LD_STRING 
49151: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
49152: LD_ADDR_OWVAR 35
49156: PUSH
49157: LD_INT 5
49159: NEG
49160: PPUSH
49161: LD_INT 5
49163: PPUSH
49164: CALL_OW 12
49168: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
49169: LD_ADDR_OWVAR 31
49173: PUSH
49174: LD_INT 1
49176: PPUSH
49177: LD_INT 3
49179: PPUSH
49180: CALL_OW 12
49184: PUSH
49185: LD_INT 1
49187: PPUSH
49188: LD_INT 3
49190: PPUSH
49191: CALL_OW 12
49195: PUSH
49196: LD_INT 0
49198: PUSH
49199: LD_INT 0
49201: PUSH
49202: EMPTY
49203: LIST
49204: LIST
49205: LIST
49206: LIST
49207: ST_TO_ADDR
// animal := CreateHuman ;
49208: LD_ADDR_VAR 0 12
49212: PUSH
49213: CALL_OW 44
49217: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49218: LD_VAR 0 12
49222: PPUSH
49223: LD_VAR 0 8
49227: PPUSH
49228: LD_INT 0
49230: PPUSH
49231: CALL 50951 0 3
// end ;
49235: GO 49133
49237: POP
49238: POP
// if enchidnas then
49239: LD_VAR 0 4
49243: IFFALSE 49310
// for i = 1 to enchidnas do
49245: LD_ADDR_VAR 0 11
49249: PUSH
49250: DOUBLE
49251: LD_INT 1
49253: DEC
49254: ST_TO_ADDR
49255: LD_VAR 0 4
49259: PUSH
49260: FOR_TO
49261: IFFALSE 49308
// begin hc_class = 13 ;
49263: LD_ADDR_OWVAR 28
49267: PUSH
49268: LD_INT 13
49270: ST_TO_ADDR
// hc_gallery =  ;
49271: LD_ADDR_OWVAR 33
49275: PUSH
49276: LD_STRING 
49278: ST_TO_ADDR
// animal := CreateHuman ;
49279: LD_ADDR_VAR 0 12
49283: PUSH
49284: CALL_OW 44
49288: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
49289: LD_VAR 0 12
49293: PPUSH
49294: LD_VAR 0 8
49298: PPUSH
49299: LD_INT 0
49301: PPUSH
49302: CALL 50951 0 3
// end ;
49306: GO 49260
49308: POP
49309: POP
// if fishes then
49310: LD_VAR 0 7
49314: IFFALSE 49381
// for i = 1 to fishes do
49316: LD_ADDR_VAR 0 11
49320: PUSH
49321: DOUBLE
49322: LD_INT 1
49324: DEC
49325: ST_TO_ADDR
49326: LD_VAR 0 7
49330: PUSH
49331: FOR_TO
49332: IFFALSE 49379
// begin hc_class = 20 ;
49334: LD_ADDR_OWVAR 28
49338: PUSH
49339: LD_INT 20
49341: ST_TO_ADDR
// hc_gallery =  ;
49342: LD_ADDR_OWVAR 33
49346: PUSH
49347: LD_STRING 
49349: ST_TO_ADDR
// animal := CreateHuman ;
49350: LD_ADDR_VAR 0 12
49354: PUSH
49355: CALL_OW 44
49359: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
49360: LD_VAR 0 12
49364: PPUSH
49365: LD_VAR 0 9
49369: PPUSH
49370: LD_INT 0
49372: PPUSH
49373: CALL 50951 0 3
// end ;
49377: GO 49331
49379: POP
49380: POP
// end ;
49381: LD_VAR 0 10
49385: RET
// export function WantHeal ( sci , unit ) ; begin
49386: LD_INT 0
49388: PPUSH
// if GetTaskList ( sci ) > 0 then
49389: LD_VAR 0 1
49393: PPUSH
49394: CALL_OW 437
49398: PUSH
49399: LD_INT 0
49401: GREATER
49402: IFFALSE 49472
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
49404: LD_VAR 0 1
49408: PPUSH
49409: CALL_OW 437
49413: PUSH
49414: LD_INT 1
49416: ARRAY
49417: PUSH
49418: LD_INT 1
49420: ARRAY
49421: PUSH
49422: LD_STRING l
49424: EQUAL
49425: PUSH
49426: LD_VAR 0 1
49430: PPUSH
49431: CALL_OW 437
49435: PUSH
49436: LD_INT 1
49438: ARRAY
49439: PUSH
49440: LD_INT 4
49442: ARRAY
49443: PUSH
49444: LD_VAR 0 2
49448: EQUAL
49449: AND
49450: IFFALSE 49462
// result := true else
49452: LD_ADDR_VAR 0 3
49456: PUSH
49457: LD_INT 1
49459: ST_TO_ADDR
49460: GO 49470
// result := false ;
49462: LD_ADDR_VAR 0 3
49466: PUSH
49467: LD_INT 0
49469: ST_TO_ADDR
// end else
49470: GO 49480
// result := false ;
49472: LD_ADDR_VAR 0 3
49476: PUSH
49477: LD_INT 0
49479: ST_TO_ADDR
// end ;
49480: LD_VAR 0 3
49484: RET
// export function HealTarget ( sci ) ; begin
49485: LD_INT 0
49487: PPUSH
// if not sci then
49488: LD_VAR 0 1
49492: NOT
49493: IFFALSE 49497
// exit ;
49495: GO 49562
// result := 0 ;
49497: LD_ADDR_VAR 0 2
49501: PUSH
49502: LD_INT 0
49504: ST_TO_ADDR
// if GetTaskList ( sci ) then
49505: LD_VAR 0 1
49509: PPUSH
49510: CALL_OW 437
49514: IFFALSE 49562
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
49516: LD_VAR 0 1
49520: PPUSH
49521: CALL_OW 437
49525: PUSH
49526: LD_INT 1
49528: ARRAY
49529: PUSH
49530: LD_INT 1
49532: ARRAY
49533: PUSH
49534: LD_STRING l
49536: EQUAL
49537: IFFALSE 49562
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
49539: LD_ADDR_VAR 0 2
49543: PUSH
49544: LD_VAR 0 1
49548: PPUSH
49549: CALL_OW 437
49553: PUSH
49554: LD_INT 1
49556: ARRAY
49557: PUSH
49558: LD_INT 4
49560: ARRAY
49561: ST_TO_ADDR
// end ;
49562: LD_VAR 0 2
49566: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
49567: LD_INT 0
49569: PPUSH
49570: PPUSH
49571: PPUSH
49572: PPUSH
// if not base_units then
49573: LD_VAR 0 1
49577: NOT
49578: IFFALSE 49582
// exit ;
49580: GO 49669
// result := false ;
49582: LD_ADDR_VAR 0 2
49586: PUSH
49587: LD_INT 0
49589: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
49590: LD_ADDR_VAR 0 5
49594: PUSH
49595: LD_VAR 0 1
49599: PPUSH
49600: LD_INT 21
49602: PUSH
49603: LD_INT 3
49605: PUSH
49606: EMPTY
49607: LIST
49608: LIST
49609: PPUSH
49610: CALL_OW 72
49614: ST_TO_ADDR
// if not tmp then
49615: LD_VAR 0 5
49619: NOT
49620: IFFALSE 49624
// exit ;
49622: GO 49669
// for i in tmp do
49624: LD_ADDR_VAR 0 3
49628: PUSH
49629: LD_VAR 0 5
49633: PUSH
49634: FOR_IN
49635: IFFALSE 49667
// begin result := EnemyInRange ( i , 22 ) ;
49637: LD_ADDR_VAR 0 2
49641: PUSH
49642: LD_VAR 0 3
49646: PPUSH
49647: LD_INT 22
49649: PPUSH
49650: CALL 47905 0 2
49654: ST_TO_ADDR
// if result then
49655: LD_VAR 0 2
49659: IFFALSE 49665
// exit ;
49661: POP
49662: POP
49663: GO 49669
// end ;
49665: GO 49634
49667: POP
49668: POP
// end ;
49669: LD_VAR 0 2
49673: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
49674: LD_INT 0
49676: PPUSH
49677: PPUSH
// if not units then
49678: LD_VAR 0 1
49682: NOT
49683: IFFALSE 49687
// exit ;
49685: GO 49757
// result := [ ] ;
49687: LD_ADDR_VAR 0 3
49691: PUSH
49692: EMPTY
49693: ST_TO_ADDR
// for i in units do
49694: LD_ADDR_VAR 0 4
49698: PUSH
49699: LD_VAR 0 1
49703: PUSH
49704: FOR_IN
49705: IFFALSE 49755
// if GetTag ( i ) = tag then
49707: LD_VAR 0 4
49711: PPUSH
49712: CALL_OW 110
49716: PUSH
49717: LD_VAR 0 2
49721: EQUAL
49722: IFFALSE 49753
// result := Insert ( result , result + 1 , i ) ;
49724: LD_ADDR_VAR 0 3
49728: PUSH
49729: LD_VAR 0 3
49733: PPUSH
49734: LD_VAR 0 3
49738: PUSH
49739: LD_INT 1
49741: PLUS
49742: PPUSH
49743: LD_VAR 0 4
49747: PPUSH
49748: CALL_OW 2
49752: ST_TO_ADDR
49753: GO 49704
49755: POP
49756: POP
// end ;
49757: LD_VAR 0 3
49761: RET
// export function IsDriver ( un ) ; begin
49762: LD_INT 0
49764: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
49765: LD_ADDR_VAR 0 2
49769: PUSH
49770: LD_VAR 0 1
49774: PUSH
49775: LD_INT 55
49777: PUSH
49778: EMPTY
49779: LIST
49780: PPUSH
49781: CALL_OW 69
49785: IN
49786: ST_TO_ADDR
// end ;
49787: LD_VAR 0 2
49791: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
49792: LD_INT 0
49794: PPUSH
49795: PPUSH
// list := [ ] ;
49796: LD_ADDR_VAR 0 5
49800: PUSH
49801: EMPTY
49802: ST_TO_ADDR
// case d of 0 :
49803: LD_VAR 0 3
49807: PUSH
49808: LD_INT 0
49810: DOUBLE
49811: EQUAL
49812: IFTRUE 49816
49814: GO 49949
49816: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
49817: LD_ADDR_VAR 0 5
49821: PUSH
49822: LD_VAR 0 1
49826: PUSH
49827: LD_INT 4
49829: MINUS
49830: PUSH
49831: LD_VAR 0 2
49835: PUSH
49836: LD_INT 4
49838: MINUS
49839: PUSH
49840: LD_INT 2
49842: PUSH
49843: EMPTY
49844: LIST
49845: LIST
49846: LIST
49847: PUSH
49848: LD_VAR 0 1
49852: PUSH
49853: LD_INT 3
49855: MINUS
49856: PUSH
49857: LD_VAR 0 2
49861: PUSH
49862: LD_INT 1
49864: PUSH
49865: EMPTY
49866: LIST
49867: LIST
49868: LIST
49869: PUSH
49870: LD_VAR 0 1
49874: PUSH
49875: LD_INT 4
49877: PLUS
49878: PUSH
49879: LD_VAR 0 2
49883: PUSH
49884: LD_INT 4
49886: PUSH
49887: EMPTY
49888: LIST
49889: LIST
49890: LIST
49891: PUSH
49892: LD_VAR 0 1
49896: PUSH
49897: LD_INT 3
49899: PLUS
49900: PUSH
49901: LD_VAR 0 2
49905: PUSH
49906: LD_INT 3
49908: PLUS
49909: PUSH
49910: LD_INT 5
49912: PUSH
49913: EMPTY
49914: LIST
49915: LIST
49916: LIST
49917: PUSH
49918: LD_VAR 0 1
49922: PUSH
49923: LD_VAR 0 2
49927: PUSH
49928: LD_INT 4
49930: PLUS
49931: PUSH
49932: LD_INT 0
49934: PUSH
49935: EMPTY
49936: LIST
49937: LIST
49938: LIST
49939: PUSH
49940: EMPTY
49941: LIST
49942: LIST
49943: LIST
49944: LIST
49945: LIST
49946: ST_TO_ADDR
// end ; 1 :
49947: GO 50647
49949: LD_INT 1
49951: DOUBLE
49952: EQUAL
49953: IFTRUE 49957
49955: GO 50090
49957: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
49958: LD_ADDR_VAR 0 5
49962: PUSH
49963: LD_VAR 0 1
49967: PUSH
49968: LD_VAR 0 2
49972: PUSH
49973: LD_INT 4
49975: MINUS
49976: PUSH
49977: LD_INT 3
49979: PUSH
49980: EMPTY
49981: LIST
49982: LIST
49983: LIST
49984: PUSH
49985: LD_VAR 0 1
49989: PUSH
49990: LD_INT 3
49992: MINUS
49993: PUSH
49994: LD_VAR 0 2
49998: PUSH
49999: LD_INT 3
50001: MINUS
50002: PUSH
50003: LD_INT 2
50005: PUSH
50006: EMPTY
50007: LIST
50008: LIST
50009: LIST
50010: PUSH
50011: LD_VAR 0 1
50015: PUSH
50016: LD_INT 4
50018: MINUS
50019: PUSH
50020: LD_VAR 0 2
50024: PUSH
50025: LD_INT 1
50027: PUSH
50028: EMPTY
50029: LIST
50030: LIST
50031: LIST
50032: PUSH
50033: LD_VAR 0 1
50037: PUSH
50038: LD_VAR 0 2
50042: PUSH
50043: LD_INT 3
50045: PLUS
50046: PUSH
50047: LD_INT 0
50049: PUSH
50050: EMPTY
50051: LIST
50052: LIST
50053: LIST
50054: PUSH
50055: LD_VAR 0 1
50059: PUSH
50060: LD_INT 4
50062: PLUS
50063: PUSH
50064: LD_VAR 0 2
50068: PUSH
50069: LD_INT 4
50071: PLUS
50072: PUSH
50073: LD_INT 5
50075: PUSH
50076: EMPTY
50077: LIST
50078: LIST
50079: LIST
50080: PUSH
50081: EMPTY
50082: LIST
50083: LIST
50084: LIST
50085: LIST
50086: LIST
50087: ST_TO_ADDR
// end ; 2 :
50088: GO 50647
50090: LD_INT 2
50092: DOUBLE
50093: EQUAL
50094: IFTRUE 50098
50096: GO 50227
50098: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
50099: LD_ADDR_VAR 0 5
50103: PUSH
50104: LD_VAR 0 1
50108: PUSH
50109: LD_VAR 0 2
50113: PUSH
50114: LD_INT 3
50116: MINUS
50117: PUSH
50118: LD_INT 3
50120: PUSH
50121: EMPTY
50122: LIST
50123: LIST
50124: LIST
50125: PUSH
50126: LD_VAR 0 1
50130: PUSH
50131: LD_INT 4
50133: PLUS
50134: PUSH
50135: LD_VAR 0 2
50139: PUSH
50140: LD_INT 4
50142: PUSH
50143: EMPTY
50144: LIST
50145: LIST
50146: LIST
50147: PUSH
50148: LD_VAR 0 1
50152: PUSH
50153: LD_VAR 0 2
50157: PUSH
50158: LD_INT 4
50160: PLUS
50161: PUSH
50162: LD_INT 0
50164: PUSH
50165: EMPTY
50166: LIST
50167: LIST
50168: LIST
50169: PUSH
50170: LD_VAR 0 1
50174: PUSH
50175: LD_INT 3
50177: MINUS
50178: PUSH
50179: LD_VAR 0 2
50183: PUSH
50184: LD_INT 1
50186: PUSH
50187: EMPTY
50188: LIST
50189: LIST
50190: LIST
50191: PUSH
50192: LD_VAR 0 1
50196: PUSH
50197: LD_INT 4
50199: MINUS
50200: PUSH
50201: LD_VAR 0 2
50205: PUSH
50206: LD_INT 4
50208: MINUS
50209: PUSH
50210: LD_INT 2
50212: PUSH
50213: EMPTY
50214: LIST
50215: LIST
50216: LIST
50217: PUSH
50218: EMPTY
50219: LIST
50220: LIST
50221: LIST
50222: LIST
50223: LIST
50224: ST_TO_ADDR
// end ; 3 :
50225: GO 50647
50227: LD_INT 3
50229: DOUBLE
50230: EQUAL
50231: IFTRUE 50235
50233: GO 50368
50235: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
50236: LD_ADDR_VAR 0 5
50240: PUSH
50241: LD_VAR 0 1
50245: PUSH
50246: LD_INT 3
50248: PLUS
50249: PUSH
50250: LD_VAR 0 2
50254: PUSH
50255: LD_INT 4
50257: PUSH
50258: EMPTY
50259: LIST
50260: LIST
50261: LIST
50262: PUSH
50263: LD_VAR 0 1
50267: PUSH
50268: LD_INT 4
50270: PLUS
50271: PUSH
50272: LD_VAR 0 2
50276: PUSH
50277: LD_INT 4
50279: PLUS
50280: PUSH
50281: LD_INT 5
50283: PUSH
50284: EMPTY
50285: LIST
50286: LIST
50287: LIST
50288: PUSH
50289: LD_VAR 0 1
50293: PUSH
50294: LD_INT 4
50296: MINUS
50297: PUSH
50298: LD_VAR 0 2
50302: PUSH
50303: LD_INT 1
50305: PUSH
50306: EMPTY
50307: LIST
50308: LIST
50309: LIST
50310: PUSH
50311: LD_VAR 0 1
50315: PUSH
50316: LD_VAR 0 2
50320: PUSH
50321: LD_INT 4
50323: MINUS
50324: PUSH
50325: LD_INT 3
50327: PUSH
50328: EMPTY
50329: LIST
50330: LIST
50331: LIST
50332: PUSH
50333: LD_VAR 0 1
50337: PUSH
50338: LD_INT 3
50340: MINUS
50341: PUSH
50342: LD_VAR 0 2
50346: PUSH
50347: LD_INT 3
50349: MINUS
50350: PUSH
50351: LD_INT 2
50353: PUSH
50354: EMPTY
50355: LIST
50356: LIST
50357: LIST
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: LIST
50363: LIST
50364: LIST
50365: ST_TO_ADDR
// end ; 4 :
50366: GO 50647
50368: LD_INT 4
50370: DOUBLE
50371: EQUAL
50372: IFTRUE 50376
50374: GO 50509
50376: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
50377: LD_ADDR_VAR 0 5
50381: PUSH
50382: LD_VAR 0 1
50386: PUSH
50387: LD_VAR 0 2
50391: PUSH
50392: LD_INT 4
50394: PLUS
50395: PUSH
50396: LD_INT 0
50398: PUSH
50399: EMPTY
50400: LIST
50401: LIST
50402: LIST
50403: PUSH
50404: LD_VAR 0 1
50408: PUSH
50409: LD_INT 3
50411: PLUS
50412: PUSH
50413: LD_VAR 0 2
50417: PUSH
50418: LD_INT 3
50420: PLUS
50421: PUSH
50422: LD_INT 5
50424: PUSH
50425: EMPTY
50426: LIST
50427: LIST
50428: LIST
50429: PUSH
50430: LD_VAR 0 1
50434: PUSH
50435: LD_INT 4
50437: PLUS
50438: PUSH
50439: LD_VAR 0 2
50443: PUSH
50444: LD_INT 4
50446: PUSH
50447: EMPTY
50448: LIST
50449: LIST
50450: LIST
50451: PUSH
50452: LD_VAR 0 1
50456: PUSH
50457: LD_VAR 0 2
50461: PUSH
50462: LD_INT 3
50464: MINUS
50465: PUSH
50466: LD_INT 3
50468: PUSH
50469: EMPTY
50470: LIST
50471: LIST
50472: LIST
50473: PUSH
50474: LD_VAR 0 1
50478: PUSH
50479: LD_INT 4
50481: MINUS
50482: PUSH
50483: LD_VAR 0 2
50487: PUSH
50488: LD_INT 4
50490: MINUS
50491: PUSH
50492: LD_INT 2
50494: PUSH
50495: EMPTY
50496: LIST
50497: LIST
50498: LIST
50499: PUSH
50500: EMPTY
50501: LIST
50502: LIST
50503: LIST
50504: LIST
50505: LIST
50506: ST_TO_ADDR
// end ; 5 :
50507: GO 50647
50509: LD_INT 5
50511: DOUBLE
50512: EQUAL
50513: IFTRUE 50517
50515: GO 50646
50517: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
50518: LD_ADDR_VAR 0 5
50522: PUSH
50523: LD_VAR 0 1
50527: PUSH
50528: LD_INT 4
50530: MINUS
50531: PUSH
50532: LD_VAR 0 2
50536: PUSH
50537: LD_INT 1
50539: PUSH
50540: EMPTY
50541: LIST
50542: LIST
50543: LIST
50544: PUSH
50545: LD_VAR 0 1
50549: PUSH
50550: LD_VAR 0 2
50554: PUSH
50555: LD_INT 4
50557: MINUS
50558: PUSH
50559: LD_INT 3
50561: PUSH
50562: EMPTY
50563: LIST
50564: LIST
50565: LIST
50566: PUSH
50567: LD_VAR 0 1
50571: PUSH
50572: LD_INT 4
50574: PLUS
50575: PUSH
50576: LD_VAR 0 2
50580: PUSH
50581: LD_INT 4
50583: PLUS
50584: PUSH
50585: LD_INT 5
50587: PUSH
50588: EMPTY
50589: LIST
50590: LIST
50591: LIST
50592: PUSH
50593: LD_VAR 0 1
50597: PUSH
50598: LD_INT 3
50600: PLUS
50601: PUSH
50602: LD_VAR 0 2
50606: PUSH
50607: LD_INT 4
50609: PUSH
50610: EMPTY
50611: LIST
50612: LIST
50613: LIST
50614: PUSH
50615: LD_VAR 0 1
50619: PUSH
50620: LD_VAR 0 2
50624: PUSH
50625: LD_INT 3
50627: PLUS
50628: PUSH
50629: LD_INT 0
50631: PUSH
50632: EMPTY
50633: LIST
50634: LIST
50635: LIST
50636: PUSH
50637: EMPTY
50638: LIST
50639: LIST
50640: LIST
50641: LIST
50642: LIST
50643: ST_TO_ADDR
// end ; end ;
50644: GO 50647
50646: POP
// result := list ;
50647: LD_ADDR_VAR 0 4
50651: PUSH
50652: LD_VAR 0 5
50656: ST_TO_ADDR
// end ;
50657: LD_VAR 0 4
50661: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
50662: LD_INT 0
50664: PPUSH
50665: PPUSH
50666: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
50667: LD_VAR 0 1
50671: NOT
50672: PUSH
50673: LD_VAR 0 2
50677: PUSH
50678: LD_INT 1
50680: PUSH
50681: LD_INT 2
50683: PUSH
50684: LD_INT 3
50686: PUSH
50687: LD_INT 4
50689: PUSH
50690: EMPTY
50691: LIST
50692: LIST
50693: LIST
50694: LIST
50695: IN
50696: NOT
50697: OR
50698: IFFALSE 50702
// exit ;
50700: GO 50794
// tmp := [ ] ;
50702: LD_ADDR_VAR 0 5
50706: PUSH
50707: EMPTY
50708: ST_TO_ADDR
// for i in units do
50709: LD_ADDR_VAR 0 4
50713: PUSH
50714: LD_VAR 0 1
50718: PUSH
50719: FOR_IN
50720: IFFALSE 50763
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
50722: LD_ADDR_VAR 0 5
50726: PUSH
50727: LD_VAR 0 5
50731: PPUSH
50732: LD_VAR 0 5
50736: PUSH
50737: LD_INT 1
50739: PLUS
50740: PPUSH
50741: LD_VAR 0 4
50745: PPUSH
50746: LD_VAR 0 2
50750: PPUSH
50751: CALL_OW 259
50755: PPUSH
50756: CALL_OW 2
50760: ST_TO_ADDR
50761: GO 50719
50763: POP
50764: POP
// if not tmp then
50765: LD_VAR 0 5
50769: NOT
50770: IFFALSE 50774
// exit ;
50772: GO 50794
// result := SortListByListDesc ( units , tmp ) ;
50774: LD_ADDR_VAR 0 3
50778: PUSH
50779: LD_VAR 0 1
50783: PPUSH
50784: LD_VAR 0 5
50788: PPUSH
50789: CALL_OW 77
50793: ST_TO_ADDR
// end ;
50794: LD_VAR 0 3
50798: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
50799: LD_INT 0
50801: PPUSH
50802: PPUSH
50803: PPUSH
// x := GetX ( building ) ;
50804: LD_ADDR_VAR 0 4
50808: PUSH
50809: LD_VAR 0 2
50813: PPUSH
50814: CALL_OW 250
50818: ST_TO_ADDR
// y := GetY ( building ) ;
50819: LD_ADDR_VAR 0 5
50823: PUSH
50824: LD_VAR 0 2
50828: PPUSH
50829: CALL_OW 251
50833: ST_TO_ADDR
// if GetTaskList ( unit ) then
50834: LD_VAR 0 1
50838: PPUSH
50839: CALL_OW 437
50843: IFFALSE 50938
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
50845: LD_STRING e
50847: PUSH
50848: LD_VAR 0 1
50852: PPUSH
50853: CALL_OW 437
50857: PUSH
50858: LD_INT 1
50860: ARRAY
50861: PUSH
50862: LD_INT 1
50864: ARRAY
50865: EQUAL
50866: PUSH
50867: LD_VAR 0 4
50871: PUSH
50872: LD_VAR 0 1
50876: PPUSH
50877: CALL_OW 437
50881: PUSH
50882: LD_INT 1
50884: ARRAY
50885: PUSH
50886: LD_INT 2
50888: ARRAY
50889: EQUAL
50890: AND
50891: PUSH
50892: LD_VAR 0 5
50896: PUSH
50897: LD_VAR 0 1
50901: PPUSH
50902: CALL_OW 437
50906: PUSH
50907: LD_INT 1
50909: ARRAY
50910: PUSH
50911: LD_INT 3
50913: ARRAY
50914: EQUAL
50915: AND
50916: IFFALSE 50928
// result := true else
50918: LD_ADDR_VAR 0 3
50922: PUSH
50923: LD_INT 1
50925: ST_TO_ADDR
50926: GO 50936
// result := false ;
50928: LD_ADDR_VAR 0 3
50932: PUSH
50933: LD_INT 0
50935: ST_TO_ADDR
// end else
50936: GO 50946
// result := false ;
50938: LD_ADDR_VAR 0 3
50942: PUSH
50943: LD_INT 0
50945: ST_TO_ADDR
// end ;
50946: LD_VAR 0 3
50950: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
50951: LD_INT 0
50953: PPUSH
50954: PPUSH
50955: PPUSH
50956: PPUSH
// if not unit or not area then
50957: LD_VAR 0 1
50961: NOT
50962: PUSH
50963: LD_VAR 0 2
50967: NOT
50968: OR
50969: IFFALSE 50973
// exit ;
50971: GO 51137
// tmp := AreaToList ( area , i ) ;
50973: LD_ADDR_VAR 0 6
50977: PUSH
50978: LD_VAR 0 2
50982: PPUSH
50983: LD_VAR 0 5
50987: PPUSH
50988: CALL_OW 517
50992: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
50993: LD_ADDR_VAR 0 5
50997: PUSH
50998: DOUBLE
50999: LD_INT 1
51001: DEC
51002: ST_TO_ADDR
51003: LD_VAR 0 6
51007: PUSH
51008: LD_INT 1
51010: ARRAY
51011: PUSH
51012: FOR_TO
51013: IFFALSE 51135
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
51015: LD_ADDR_VAR 0 7
51019: PUSH
51020: LD_VAR 0 6
51024: PUSH
51025: LD_INT 1
51027: ARRAY
51028: PUSH
51029: LD_VAR 0 5
51033: ARRAY
51034: PUSH
51035: LD_VAR 0 6
51039: PUSH
51040: LD_INT 2
51042: ARRAY
51043: PUSH
51044: LD_VAR 0 5
51048: ARRAY
51049: PUSH
51050: EMPTY
51051: LIST
51052: LIST
51053: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
51054: LD_VAR 0 7
51058: PUSH
51059: LD_INT 1
51061: ARRAY
51062: PPUSH
51063: LD_VAR 0 7
51067: PUSH
51068: LD_INT 2
51070: ARRAY
51071: PPUSH
51072: CALL_OW 428
51076: PUSH
51077: LD_INT 0
51079: EQUAL
51080: IFFALSE 51133
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
51082: LD_VAR 0 1
51086: PPUSH
51087: LD_VAR 0 7
51091: PUSH
51092: LD_INT 1
51094: ARRAY
51095: PPUSH
51096: LD_VAR 0 7
51100: PUSH
51101: LD_INT 2
51103: ARRAY
51104: PPUSH
51105: LD_VAR 0 3
51109: PPUSH
51110: CALL_OW 48
// result := IsPlaced ( unit ) ;
51114: LD_ADDR_VAR 0 4
51118: PUSH
51119: LD_VAR 0 1
51123: PPUSH
51124: CALL_OW 305
51128: ST_TO_ADDR
// exit ;
51129: POP
51130: POP
51131: GO 51137
// end ; end ;
51133: GO 51012
51135: POP
51136: POP
// end ;
51137: LD_VAR 0 4
51141: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
51142: LD_INT 0
51144: PPUSH
51145: PPUSH
51146: PPUSH
// if not side or side > 8 then
51147: LD_VAR 0 1
51151: NOT
51152: PUSH
51153: LD_VAR 0 1
51157: PUSH
51158: LD_INT 8
51160: GREATER
51161: OR
51162: IFFALSE 51166
// exit ;
51164: GO 51353
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
51166: LD_ADDR_VAR 0 4
51170: PUSH
51171: LD_INT 22
51173: PUSH
51174: LD_VAR 0 1
51178: PUSH
51179: EMPTY
51180: LIST
51181: LIST
51182: PUSH
51183: LD_INT 21
51185: PUSH
51186: LD_INT 3
51188: PUSH
51189: EMPTY
51190: LIST
51191: LIST
51192: PUSH
51193: EMPTY
51194: LIST
51195: LIST
51196: PPUSH
51197: CALL_OW 69
51201: ST_TO_ADDR
// if not tmp then
51202: LD_VAR 0 4
51206: NOT
51207: IFFALSE 51211
// exit ;
51209: GO 51353
// enable_addtolog := true ;
51211: LD_ADDR_OWVAR 81
51215: PUSH
51216: LD_INT 1
51218: ST_TO_ADDR
// AddToLog ( [ ) ;
51219: LD_STRING [
51221: PPUSH
51222: CALL_OW 561
// for i in tmp do
51226: LD_ADDR_VAR 0 3
51230: PUSH
51231: LD_VAR 0 4
51235: PUSH
51236: FOR_IN
51237: IFFALSE 51344
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
51239: LD_STRING [
51241: PUSH
51242: LD_VAR 0 3
51246: PPUSH
51247: CALL_OW 266
51251: STR
51252: PUSH
51253: LD_STRING , 
51255: STR
51256: PUSH
51257: LD_VAR 0 3
51261: PPUSH
51262: CALL_OW 250
51266: STR
51267: PUSH
51268: LD_STRING , 
51270: STR
51271: PUSH
51272: LD_VAR 0 3
51276: PPUSH
51277: CALL_OW 251
51281: STR
51282: PUSH
51283: LD_STRING , 
51285: STR
51286: PUSH
51287: LD_VAR 0 3
51291: PPUSH
51292: CALL_OW 254
51296: STR
51297: PUSH
51298: LD_STRING , 
51300: STR
51301: PUSH
51302: LD_VAR 0 3
51306: PPUSH
51307: LD_INT 1
51309: PPUSH
51310: CALL_OW 268
51314: STR
51315: PUSH
51316: LD_STRING , 
51318: STR
51319: PUSH
51320: LD_VAR 0 3
51324: PPUSH
51325: LD_INT 2
51327: PPUSH
51328: CALL_OW 268
51332: STR
51333: PUSH
51334: LD_STRING ],
51336: STR
51337: PPUSH
51338: CALL_OW 561
// end ;
51342: GO 51236
51344: POP
51345: POP
// AddToLog ( ]; ) ;
51346: LD_STRING ];
51348: PPUSH
51349: CALL_OW 561
// end ;
51353: LD_VAR 0 2
51357: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
51358: LD_INT 0
51360: PPUSH
51361: PPUSH
51362: PPUSH
51363: PPUSH
51364: PPUSH
// if not area or not rate or not max then
51365: LD_VAR 0 1
51369: NOT
51370: PUSH
51371: LD_VAR 0 2
51375: NOT
51376: OR
51377: PUSH
51378: LD_VAR 0 4
51382: NOT
51383: OR
51384: IFFALSE 51388
// exit ;
51386: GO 51580
// while 1 do
51388: LD_INT 1
51390: IFFALSE 51580
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
51392: LD_ADDR_VAR 0 9
51396: PUSH
51397: LD_VAR 0 1
51401: PPUSH
51402: LD_INT 1
51404: PPUSH
51405: CALL_OW 287
51409: PUSH
51410: LD_INT 10
51412: MUL
51413: ST_TO_ADDR
// r := rate / 10 ;
51414: LD_ADDR_VAR 0 7
51418: PUSH
51419: LD_VAR 0 2
51423: PUSH
51424: LD_INT 10
51426: DIVREAL
51427: ST_TO_ADDR
// time := 1 1$00 ;
51428: LD_ADDR_VAR 0 8
51432: PUSH
51433: LD_INT 2100
51435: ST_TO_ADDR
// if amount < min then
51436: LD_VAR 0 9
51440: PUSH
51441: LD_VAR 0 3
51445: LESS
51446: IFFALSE 51464
// r := r * 2 else
51448: LD_ADDR_VAR 0 7
51452: PUSH
51453: LD_VAR 0 7
51457: PUSH
51458: LD_INT 2
51460: MUL
51461: ST_TO_ADDR
51462: GO 51490
// if amount > max then
51464: LD_VAR 0 9
51468: PUSH
51469: LD_VAR 0 4
51473: GREATER
51474: IFFALSE 51490
// r := r / 2 ;
51476: LD_ADDR_VAR 0 7
51480: PUSH
51481: LD_VAR 0 7
51485: PUSH
51486: LD_INT 2
51488: DIVREAL
51489: ST_TO_ADDR
// time := time / r ;
51490: LD_ADDR_VAR 0 8
51494: PUSH
51495: LD_VAR 0 8
51499: PUSH
51500: LD_VAR 0 7
51504: DIVREAL
51505: ST_TO_ADDR
// if time < 0 then
51506: LD_VAR 0 8
51510: PUSH
51511: LD_INT 0
51513: LESS
51514: IFFALSE 51531
// time := time * - 1 ;
51516: LD_ADDR_VAR 0 8
51520: PUSH
51521: LD_VAR 0 8
51525: PUSH
51526: LD_INT 1
51528: NEG
51529: MUL
51530: ST_TO_ADDR
// wait ( time ) ;
51531: LD_VAR 0 8
51535: PPUSH
51536: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
51540: LD_INT 35
51542: PPUSH
51543: LD_INT 875
51545: PPUSH
51546: CALL_OW 12
51550: PPUSH
51551: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
51555: LD_INT 1
51557: PPUSH
51558: LD_INT 5
51560: PPUSH
51561: CALL_OW 12
51565: PPUSH
51566: LD_VAR 0 1
51570: PPUSH
51571: LD_INT 1
51573: PPUSH
51574: CALL_OW 55
// end ;
51578: GO 51388
// end ;
51580: LD_VAR 0 5
51584: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
51585: LD_INT 0
51587: PPUSH
51588: PPUSH
51589: PPUSH
51590: PPUSH
51591: PPUSH
51592: PPUSH
51593: PPUSH
51594: PPUSH
// if not turrets or not factories then
51595: LD_VAR 0 1
51599: NOT
51600: PUSH
51601: LD_VAR 0 2
51605: NOT
51606: OR
51607: IFFALSE 51611
// exit ;
51609: GO 51918
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
51611: LD_ADDR_VAR 0 10
51615: PUSH
51616: LD_INT 5
51618: PUSH
51619: LD_INT 6
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 2
51628: PUSH
51629: LD_INT 4
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 3
51638: PUSH
51639: LD_INT 5
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: EMPTY
51647: LIST
51648: LIST
51649: LIST
51650: PUSH
51651: LD_INT 24
51653: PUSH
51654: LD_INT 25
51656: PUSH
51657: EMPTY
51658: LIST
51659: LIST
51660: PUSH
51661: LD_INT 23
51663: PUSH
51664: LD_INT 27
51666: PUSH
51667: EMPTY
51668: LIST
51669: LIST
51670: PUSH
51671: EMPTY
51672: LIST
51673: LIST
51674: PUSH
51675: LD_INT 42
51677: PUSH
51678: LD_INT 43
51680: PUSH
51681: EMPTY
51682: LIST
51683: LIST
51684: PUSH
51685: LD_INT 44
51687: PUSH
51688: LD_INT 46
51690: PUSH
51691: EMPTY
51692: LIST
51693: LIST
51694: PUSH
51695: LD_INT 45
51697: PUSH
51698: LD_INT 47
51700: PUSH
51701: EMPTY
51702: LIST
51703: LIST
51704: PUSH
51705: EMPTY
51706: LIST
51707: LIST
51708: LIST
51709: PUSH
51710: EMPTY
51711: LIST
51712: LIST
51713: LIST
51714: ST_TO_ADDR
// result := [ ] ;
51715: LD_ADDR_VAR 0 3
51719: PUSH
51720: EMPTY
51721: ST_TO_ADDR
// for i in turrets do
51722: LD_ADDR_VAR 0 4
51726: PUSH
51727: LD_VAR 0 1
51731: PUSH
51732: FOR_IN
51733: IFFALSE 51916
// begin nat := GetNation ( i ) ;
51735: LD_ADDR_VAR 0 7
51739: PUSH
51740: LD_VAR 0 4
51744: PPUSH
51745: CALL_OW 248
51749: ST_TO_ADDR
// weapon := 0 ;
51750: LD_ADDR_VAR 0 8
51754: PUSH
51755: LD_INT 0
51757: ST_TO_ADDR
// if not nat then
51758: LD_VAR 0 7
51762: NOT
51763: IFFALSE 51767
// continue ;
51765: GO 51732
// for j in list [ nat ] do
51767: LD_ADDR_VAR 0 5
51771: PUSH
51772: LD_VAR 0 10
51776: PUSH
51777: LD_VAR 0 7
51781: ARRAY
51782: PUSH
51783: FOR_IN
51784: IFFALSE 51825
// if GetBWeapon ( i ) = j [ 1 ] then
51786: LD_VAR 0 4
51790: PPUSH
51791: CALL_OW 269
51795: PUSH
51796: LD_VAR 0 5
51800: PUSH
51801: LD_INT 1
51803: ARRAY
51804: EQUAL
51805: IFFALSE 51823
// begin weapon := j [ 2 ] ;
51807: LD_ADDR_VAR 0 8
51811: PUSH
51812: LD_VAR 0 5
51816: PUSH
51817: LD_INT 2
51819: ARRAY
51820: ST_TO_ADDR
// break ;
51821: GO 51825
// end ;
51823: GO 51783
51825: POP
51826: POP
// if not weapon then
51827: LD_VAR 0 8
51831: NOT
51832: IFFALSE 51836
// continue ;
51834: GO 51732
// for k in factories do
51836: LD_ADDR_VAR 0 6
51840: PUSH
51841: LD_VAR 0 2
51845: PUSH
51846: FOR_IN
51847: IFFALSE 51912
// begin weapons := AvailableWeaponList ( k ) ;
51849: LD_ADDR_VAR 0 9
51853: PUSH
51854: LD_VAR 0 6
51858: PPUSH
51859: CALL_OW 478
51863: ST_TO_ADDR
// if not weapons then
51864: LD_VAR 0 9
51868: NOT
51869: IFFALSE 51873
// continue ;
51871: GO 51846
// if weapon in weapons then
51873: LD_VAR 0 8
51877: PUSH
51878: LD_VAR 0 9
51882: IN
51883: IFFALSE 51910
// begin result := [ i , weapon ] ;
51885: LD_ADDR_VAR 0 3
51889: PUSH
51890: LD_VAR 0 4
51894: PUSH
51895: LD_VAR 0 8
51899: PUSH
51900: EMPTY
51901: LIST
51902: LIST
51903: ST_TO_ADDR
// exit ;
51904: POP
51905: POP
51906: POP
51907: POP
51908: GO 51918
// end ; end ;
51910: GO 51846
51912: POP
51913: POP
// end ;
51914: GO 51732
51916: POP
51917: POP
// end ;
51918: LD_VAR 0 3
51922: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
51923: LD_INT 0
51925: PPUSH
// if not side or side > 8 then
51926: LD_VAR 0 3
51930: NOT
51931: PUSH
51932: LD_VAR 0 3
51936: PUSH
51937: LD_INT 8
51939: GREATER
51940: OR
51941: IFFALSE 51945
// exit ;
51943: GO 52004
// if not range then
51945: LD_VAR 0 4
51949: NOT
51950: IFFALSE 51961
// range := - 12 ;
51952: LD_ADDR_VAR 0 4
51956: PUSH
51957: LD_INT 12
51959: NEG
51960: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
51961: LD_VAR 0 1
51965: PPUSH
51966: LD_VAR 0 2
51970: PPUSH
51971: LD_VAR 0 3
51975: PPUSH
51976: LD_VAR 0 4
51980: PPUSH
51981: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
51985: LD_VAR 0 1
51989: PPUSH
51990: LD_VAR 0 2
51994: PPUSH
51995: LD_VAR 0 3
51999: PPUSH
52000: CALL_OW 331
// end ;
52004: LD_VAR 0 5
52008: RET
// export function Video ( mode ) ; begin
52009: LD_INT 0
52011: PPUSH
// ingame_video = mode ;
52012: LD_ADDR_OWVAR 52
52016: PUSH
52017: LD_VAR 0 1
52021: ST_TO_ADDR
// interface_hidden = mode ;
52022: LD_ADDR_OWVAR 54
52026: PUSH
52027: LD_VAR 0 1
52031: ST_TO_ADDR
// end ;
52032: LD_VAR 0 2
52036: RET
// export function Join ( array , element ) ; begin
52037: LD_INT 0
52039: PPUSH
// result := array ^ element ;
52040: LD_ADDR_VAR 0 3
52044: PUSH
52045: LD_VAR 0 1
52049: PUSH
52050: LD_VAR 0 2
52054: ADD
52055: ST_TO_ADDR
// end ;
52056: LD_VAR 0 3
52060: RET
// export function JoinUnion ( array , element ) ; begin
52061: LD_INT 0
52063: PPUSH
// result := array union element ;
52064: LD_ADDR_VAR 0 3
52068: PUSH
52069: LD_VAR 0 1
52073: PUSH
52074: LD_VAR 0 2
52078: UNION
52079: ST_TO_ADDR
// end ;
52080: LD_VAR 0 3
52084: RET
// export function GetBehemoths ( side ) ; begin
52085: LD_INT 0
52087: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
52088: LD_ADDR_VAR 0 2
52092: PUSH
52093: LD_INT 22
52095: PUSH
52096: LD_VAR 0 1
52100: PUSH
52101: EMPTY
52102: LIST
52103: LIST
52104: PUSH
52105: LD_INT 31
52107: PUSH
52108: LD_INT 25
52110: PUSH
52111: EMPTY
52112: LIST
52113: LIST
52114: PUSH
52115: EMPTY
52116: LIST
52117: LIST
52118: PPUSH
52119: CALL_OW 69
52123: ST_TO_ADDR
// end ;
52124: LD_VAR 0 2
52128: RET
// export function Shuffle ( array ) ; var i , index ; begin
52129: LD_INT 0
52131: PPUSH
52132: PPUSH
52133: PPUSH
// result := [ ] ;
52134: LD_ADDR_VAR 0 2
52138: PUSH
52139: EMPTY
52140: ST_TO_ADDR
// if not array then
52141: LD_VAR 0 1
52145: NOT
52146: IFFALSE 52150
// exit ;
52148: GO 52249
// Randomize ;
52150: CALL_OW 10
// for i = array downto 1 do
52154: LD_ADDR_VAR 0 3
52158: PUSH
52159: DOUBLE
52160: LD_VAR 0 1
52164: INC
52165: ST_TO_ADDR
52166: LD_INT 1
52168: PUSH
52169: FOR_DOWNTO
52170: IFFALSE 52247
// begin index := rand ( 1 , array ) ;
52172: LD_ADDR_VAR 0 4
52176: PUSH
52177: LD_INT 1
52179: PPUSH
52180: LD_VAR 0 1
52184: PPUSH
52185: CALL_OW 12
52189: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
52190: LD_ADDR_VAR 0 2
52194: PUSH
52195: LD_VAR 0 2
52199: PPUSH
52200: LD_VAR 0 2
52204: PUSH
52205: LD_INT 1
52207: PLUS
52208: PPUSH
52209: LD_VAR 0 1
52213: PUSH
52214: LD_VAR 0 4
52218: ARRAY
52219: PPUSH
52220: CALL_OW 2
52224: ST_TO_ADDR
// array := Delete ( array , index ) ;
52225: LD_ADDR_VAR 0 1
52229: PUSH
52230: LD_VAR 0 1
52234: PPUSH
52235: LD_VAR 0 4
52239: PPUSH
52240: CALL_OW 3
52244: ST_TO_ADDR
// end ;
52245: GO 52169
52247: POP
52248: POP
// end ;
52249: LD_VAR 0 2
52253: RET
// export function GetBaseMaterials ( base ) ; begin
52254: LD_INT 0
52256: PPUSH
// result := [ 0 , 0 , 0 ] ;
52257: LD_ADDR_VAR 0 2
52261: PUSH
52262: LD_INT 0
52264: PUSH
52265: LD_INT 0
52267: PUSH
52268: LD_INT 0
52270: PUSH
52271: EMPTY
52272: LIST
52273: LIST
52274: LIST
52275: ST_TO_ADDR
// if not base then
52276: LD_VAR 0 1
52280: NOT
52281: IFFALSE 52285
// exit ;
52283: GO 52334
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
52285: LD_ADDR_VAR 0 2
52289: PUSH
52290: LD_VAR 0 1
52294: PPUSH
52295: LD_INT 1
52297: PPUSH
52298: CALL_OW 275
52302: PUSH
52303: LD_VAR 0 1
52307: PPUSH
52308: LD_INT 2
52310: PPUSH
52311: CALL_OW 275
52315: PUSH
52316: LD_VAR 0 1
52320: PPUSH
52321: LD_INT 3
52323: PPUSH
52324: CALL_OW 275
52328: PUSH
52329: EMPTY
52330: LIST
52331: LIST
52332: LIST
52333: ST_TO_ADDR
// end ;
52334: LD_VAR 0 2
52338: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
52339: LD_INT 0
52341: PPUSH
52342: PPUSH
// result := array ;
52343: LD_ADDR_VAR 0 3
52347: PUSH
52348: LD_VAR 0 1
52352: ST_TO_ADDR
// if size > 0 then
52353: LD_VAR 0 2
52357: PUSH
52358: LD_INT 0
52360: GREATER
52361: IFFALSE 52407
// for i := array downto size do
52363: LD_ADDR_VAR 0 4
52367: PUSH
52368: DOUBLE
52369: LD_VAR 0 1
52373: INC
52374: ST_TO_ADDR
52375: LD_VAR 0 2
52379: PUSH
52380: FOR_DOWNTO
52381: IFFALSE 52405
// result := Delete ( result , result ) ;
52383: LD_ADDR_VAR 0 3
52387: PUSH
52388: LD_VAR 0 3
52392: PPUSH
52393: LD_VAR 0 3
52397: PPUSH
52398: CALL_OW 3
52402: ST_TO_ADDR
52403: GO 52380
52405: POP
52406: POP
// end ;
52407: LD_VAR 0 3
52411: RET
// export function ComExit ( unit ) ; var tmp ; begin
52412: LD_INT 0
52414: PPUSH
52415: PPUSH
// if not IsInUnit ( unit ) then
52416: LD_VAR 0 1
52420: PPUSH
52421: CALL_OW 310
52425: NOT
52426: IFFALSE 52430
// exit ;
52428: GO 52490
// tmp := IsInUnit ( unit ) ;
52430: LD_ADDR_VAR 0 3
52434: PUSH
52435: LD_VAR 0 1
52439: PPUSH
52440: CALL_OW 310
52444: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
52445: LD_VAR 0 3
52449: PPUSH
52450: CALL_OW 247
52454: PUSH
52455: LD_INT 2
52457: EQUAL
52458: IFFALSE 52471
// ComExitVehicle ( unit ) else
52460: LD_VAR 0 1
52464: PPUSH
52465: CALL_OW 121
52469: GO 52480
// ComExitBuilding ( unit ) ;
52471: LD_VAR 0 1
52475: PPUSH
52476: CALL_OW 122
// result := tmp ;
52480: LD_ADDR_VAR 0 2
52484: PUSH
52485: LD_VAR 0 3
52489: ST_TO_ADDR
// end ;
52490: LD_VAR 0 2
52494: RET
// export function ResetHc ; begin
52495: LD_INT 0
52497: PPUSH
// InitHc ;
52498: CALL_OW 19
// hc_importance := 0 ;
52502: LD_ADDR_OWVAR 32
52506: PUSH
52507: LD_INT 0
52509: ST_TO_ADDR
// end ;
52510: LD_VAR 0 1
52514: RET
