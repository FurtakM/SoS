// starting begin ResetFog ;
   0: CALL_OW 335
// PrepareGame ;
   4: CALL 13 0 0
// PrepareUnits ;
   8: CALL 299 0 0
// end ;
  12: END
// export mechanics , time_to_destroy , players , sib_bomb , time , veh_amount ; export p1 , p2 , p3 , p4 , p5 ; function PrepareGame ; var debug , i ; begin
  13: LD_INT 0
  15: PPUSH
  16: PPUSH
  17: PPUSH
// debug := false ;
  18: LD_ADDR_VAR 0 2
  22: PUSH
  23: LD_INT 0
  25: ST_TO_ADDR
// if debug then
  26: LD_VAR 0 2
  30: IFFALSE 81
// begin mechanics := 5 ;
  32: LD_ADDR_EXP 1
  36: PUSH
  37: LD_INT 5
  39: ST_TO_ADDR
// time_to_destroy := 45 ;
  40: LD_ADDR_EXP 2
  44: PUSH
  45: LD_INT 45
  47: ST_TO_ADDR
// players := 4 ;
  48: LD_ADDR_EXP 3
  52: PUSH
  53: LD_INT 4
  55: ST_TO_ADDR
// sib_bomb := true ;
  56: LD_ADDR_EXP 4
  60: PUSH
  61: LD_INT 1
  63: ST_TO_ADDR
// time := 3 3$00 ;
  64: LD_ADDR_EXP 5
  68: PUSH
  69: LD_INT 6300
  71: ST_TO_ADDR
// FogOff ( 1 ) ;
  72: LD_INT 1
  74: PPUSH
  75: CALL_OW 344
// end else
  79: GO 214
// begin time := 3 3$00 ;
  81: LD_ADDR_EXP 5
  85: PUSH
  86: LD_INT 6300
  88: ST_TO_ADDR
// players := 4 ;
  89: LD_ADDR_EXP 3
  93: PUSH
  94: LD_INT 4
  96: ST_TO_ADDR
// sib_bomb := true ;
  97: LD_ADDR_EXP 4
 101: PUSH
 102: LD_INT 1
 104: ST_TO_ADDR
// mechanics := 4 ;
 105: LD_ADDR_EXP 1
 109: PUSH
 110: LD_INT 4
 112: ST_TO_ADDR
// mechanics := [ 3 , 4 , 5 ] [ GetMultiplayerSetting ( 0 ) ] ;
 113: LD_ADDR_EXP 1
 117: PUSH
 118: LD_INT 3
 120: PUSH
 121: LD_INT 4
 123: PUSH
 124: LD_INT 5
 126: PUSH
 127: EMPTY
 128: LIST
 129: LIST
 130: LIST
 131: PUSH
 132: LD_INT 0
 134: PPUSH
 135: CALL_OW 426
 139: ARRAY
 140: ST_TO_ADDR
// players := [ 3 , 4 , 5 ] [ GetMultiplayerSetting ( 1 ) ] ;
 141: LD_ADDR_EXP 3
 145: PUSH
 146: LD_INT 3
 148: PUSH
 149: LD_INT 4
 151: PUSH
 152: LD_INT 5
 154: PUSH
 155: EMPTY
 156: LIST
 157: LIST
 158: LIST
 159: PUSH
 160: LD_INT 1
 162: PPUSH
 163: CALL_OW 426
 167: ARRAY
 168: ST_TO_ADDR
// time := [ 3 3$00 , 5 5$00 , 10 10$00 ] [ GetMultiplayerSetting ( 2 ) ] ;
 169: LD_ADDR_EXP 5
 173: PUSH
 174: LD_INT 6300
 176: PUSH
 177: LD_INT 10500
 179: PUSH
 180: LD_INT 21000
 182: PUSH
 183: EMPTY
 184: LIST
 185: LIST
 186: LIST
 187: PUSH
 188: LD_INT 2
 190: PPUSH
 191: CALL_OW 426
 195: ARRAY
 196: ST_TO_ADDR
// sib_bomb := GetMultiplayerSetting ( 3 ) - 1 ;
 197: LD_ADDR_EXP 4
 201: PUSH
 202: LD_INT 3
 204: PPUSH
 205: CALL_OW 426
 209: PUSH
 210: LD_INT 1
 212: MINUS
 213: ST_TO_ADDR
// end ; p1 := 0 ;
 214: LD_ADDR_EXP 7
 218: PUSH
 219: LD_INT 0
 221: ST_TO_ADDR
// p2 := 0 ;
 222: LD_ADDR_EXP 8
 226: PUSH
 227: LD_INT 0
 229: ST_TO_ADDR
// p3 := 0 ;
 230: LD_ADDR_EXP 9
 234: PUSH
 235: LD_INT 0
 237: ST_TO_ADDR
// p4 := 0 ;
 238: LD_ADDR_EXP 10
 242: PUSH
 243: LD_INT 0
 245: ST_TO_ADDR
// p5 := 0 ;
 246: LD_ADDR_EXP 11
 250: PUSH
 251: LD_INT 0
 253: ST_TO_ADDR
// veh_amount := 12 ;
 254: LD_ADDR_EXP 6
 258: PUSH
 259: LD_INT 12
 261: ST_TO_ADDR
// for i = 1 to 7 do
 262: LD_ADDR_VAR 0 3
 266: PUSH
 267: DOUBLE
 268: LD_INT 1
 270: DEC
 271: ST_TO_ADDR
 272: LD_INT 7
 274: PUSH
 275: FOR_TO
 276: IFFALSE 292
// ChangeSideFog ( i , 8 ) ;
 278: LD_VAR 0 3
 282: PPUSH
 283: LD_INT 8
 285: PPUSH
 286: CALL_OW 343
 290: GO 275
 292: POP
 293: POP
// end ; end_of_file
 294: LD_VAR 0 1
 298: RET
// export function PrepareUnits ; var i , side ; begin
 299: LD_INT 0
 301: PPUSH
 302: PPUSH
 303: PPUSH
// side := players ;
 304: LD_ADDR_VAR 0 3
 308: PUSH
 309: LD_EXP 3
 313: ST_TO_ADDR
// uc_nation := 1 ;
 314: LD_ADDR_OWVAR 21
 318: PUSH
 319: LD_INT 1
 321: ST_TO_ADDR
// for i = 1 to mechanics do
 322: LD_ADDR_VAR 0 2
 326: PUSH
 327: DOUBLE
 328: LD_INT 1
 330: DEC
 331: ST_TO_ADDR
 332: LD_EXP 1
 336: PUSH
 337: FOR_TO
 338: IFFALSE 402
// for side = 1 to players do
 340: LD_ADDR_VAR 0 3
 344: PUSH
 345: DOUBLE
 346: LD_INT 1
 348: DEC
 349: ST_TO_ADDR
 350: LD_EXP 3
 354: PUSH
 355: FOR_TO
 356: IFFALSE 398
// begin uc_side := side ;
 358: LD_ADDR_OWVAR 20
 362: PUSH
 363: LD_VAR 0 3
 367: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
 368: LD_INT 0
 370: PPUSH
 371: LD_INT 3
 373: PPUSH
 374: LD_INT 10
 376: PPUSH
 377: CALL_OW 380
// PlaceUnitArea ( CreateHuman , mech_area , false ) ;
 381: CALL_OW 44
 385: PPUSH
 386: LD_INT 6
 388: PPUSH
 389: LD_INT 0
 391: PPUSH
 392: CALL_OW 49
// end ;
 396: GO 355
 398: POP
 399: POP
 400: GO 337
 402: POP
 403: POP
// end ;
 404: LD_VAR 0 1
 408: RET
// function ToSpawn ( side ) ; begin
 409: LD_INT 0
 411: PPUSH
// uc_side := side ;
 412: LD_ADDR_OWVAR 20
 416: PUSH
 417: LD_VAR 0 1
 421: ST_TO_ADDR
// PrepareHuman ( false , 3 , 10 ) ;
 422: LD_INT 0
 424: PPUSH
 425: LD_INT 3
 427: PPUSH
 428: LD_INT 10
 430: PPUSH
 431: CALL_OW 380
// PlaceUnitArea ( CreateHuman , mech_area , false ) ;
 435: CALL_OW 44
 439: PPUSH
 440: LD_INT 6
 442: PPUSH
 443: LD_INT 0
 445: PPUSH
 446: CALL_OW 49
// end ;
 450: LD_VAR 0 2
 454: RET
// every 0 0$13 trigger time do var i , filter ;
 455: LD_EXP 5
 459: IFFALSE 569
 461: GO 463
 463: DISABLE
 464: LD_INT 0
 466: PPUSH
 467: PPUSH
// begin enable ;
 468: ENABLE
// for i = 1 to players do
 469: LD_ADDR_VAR 0 1
 473: PUSH
 474: DOUBLE
 475: LD_INT 1
 477: DEC
 478: ST_TO_ADDR
 479: LD_EXP 3
 483: PUSH
 484: FOR_TO
 485: IFFALSE 567
// begin filter := FilterAllUnits ( [ [ [ f_side , i ] , [ f_class , 3 ] , [ f_type , unit_human ] ] ] ) ;
 487: LD_ADDR_VAR 0 2
 491: PUSH
 492: LD_INT 22
 494: PUSH
 495: LD_VAR 0 1
 499: PUSH
 500: EMPTY
 501: LIST
 502: LIST
 503: PUSH
 504: LD_INT 25
 506: PUSH
 507: LD_INT 3
 509: PUSH
 510: EMPTY
 511: LIST
 512: LIST
 513: PUSH
 514: LD_INT 21
 516: PUSH
 517: LD_INT 1
 519: PUSH
 520: EMPTY
 521: LIST
 522: LIST
 523: PUSH
 524: EMPTY
 525: LIST
 526: LIST
 527: LIST
 528: PUSH
 529: EMPTY
 530: LIST
 531: PPUSH
 532: CALL_OW 69
 536: ST_TO_ADDR
// if filter < mechanics then
 537: LD_VAR 0 2
 541: PUSH
 542: LD_EXP 1
 546: LESS
 547: IFFALSE 565
// begin Wait ( 0 0$03 ) ;
 549: LD_INT 105
 551: PPUSH
 552: CALL_OW 67
// ToSpawn ( i ) ;
 556: LD_VAR 0 1
 560: PPUSH
 561: CALL 409 0 1
// end ; end ;
 565: GO 484
 567: POP
 568: POP
// end ;
 569: PPOPN 2
 571: END
// every 0 0$01 trigger time do var i , filter , filter2 , vehicles ;
 572: LD_EXP 5
 576: IFFALSE 943
 578: GO 580
 580: DISABLE
 581: LD_INT 0
 583: PPUSH
 584: PPUSH
 585: PPUSH
 586: PPUSH
// begin enable ;
 587: ENABLE
// filter2 := FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_not , [ f_side , 0 ] ] , [ f_not , [ f_side , 1 ] ] ] ) ;
 588: LD_ADDR_VAR 0 3
 592: PUSH
 593: LD_INT 21
 595: PUSH
 596: LD_INT 2
 598: PUSH
 599: EMPTY
 600: LIST
 601: LIST
 602: PUSH
 603: LD_INT 3
 605: PUSH
 606: LD_INT 22
 608: PUSH
 609: LD_INT 0
 611: PUSH
 612: EMPTY
 613: LIST
 614: LIST
 615: PUSH
 616: EMPTY
 617: LIST
 618: LIST
 619: PUSH
 620: LD_INT 3
 622: PUSH
 623: LD_INT 22
 625: PUSH
 626: LD_INT 1
 628: PUSH
 629: EMPTY
 630: LIST
 631: LIST
 632: PUSH
 633: EMPTY
 634: LIST
 635: LIST
 636: PUSH
 637: EMPTY
 638: LIST
 639: LIST
 640: LIST
 641: PPUSH
 642: CALL_OW 69
 646: ST_TO_ADDR
// filter := FilterAllUnits ( [ [ f_type , unit_human ] , [ f_not , [ f_inside ] ] , [ f_not , [ f_side , 1 ] ] ] ) ;
 647: LD_ADDR_VAR 0 2
 651: PUSH
 652: LD_INT 21
 654: PUSH
 655: LD_INT 1
 657: PUSH
 658: EMPTY
 659: LIST
 660: LIST
 661: PUSH
 662: LD_INT 3
 664: PUSH
 665: LD_INT 54
 667: PUSH
 668: EMPTY
 669: LIST
 670: PUSH
 671: EMPTY
 672: LIST
 673: LIST
 674: PUSH
 675: LD_INT 3
 677: PUSH
 678: LD_INT 22
 680: PUSH
 681: LD_INT 1
 683: PUSH
 684: EMPTY
 685: LIST
 686: LIST
 687: PUSH
 688: EMPTY
 689: LIST
 690: LIST
 691: PUSH
 692: EMPTY
 693: LIST
 694: LIST
 695: LIST
 696: PPUSH
 697: CALL_OW 69
 701: ST_TO_ADDR
// vehicles := FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_empty ] ] ) ;
 702: LD_ADDR_VAR 0 4
 706: PUSH
 707: LD_INT 21
 709: PUSH
 710: LD_INT 2
 712: PUSH
 713: EMPTY
 714: LIST
 715: LIST
 716: PUSH
 717: LD_INT 58
 719: PUSH
 720: EMPTY
 721: LIST
 722: PUSH
 723: EMPTY
 724: LIST
 725: LIST
 726: PPUSH
 727: CALL_OW 69
 731: ST_TO_ADDR
// if filter and vehicles then
 732: LD_VAR 0 2
 736: PUSH
 737: LD_VAR 0 4
 741: AND
 742: IFFALSE 879
// for i = 1 to filter do
 744: LD_ADDR_VAR 0 1
 748: PUSH
 749: DOUBLE
 750: LD_INT 1
 752: DEC
 753: ST_TO_ADDR
 754: LD_VAR 0 2
 758: PUSH
 759: FOR_TO
 760: IFFALSE 877
// if not HasTask ( filter [ i ] ) and IsOk ( filter [ i ] ) then
 762: LD_VAR 0 2
 766: PUSH
 767: LD_VAR 0 1
 771: ARRAY
 772: PPUSH
 773: CALL_OW 314
 777: NOT
 778: PUSH
 779: LD_VAR 0 2
 783: PUSH
 784: LD_VAR 0 1
 788: ARRAY
 789: PPUSH
 790: CALL_OW 302
 794: AND
 795: IFFALSE 875
// if GetDistUnits ( filter [ i ] , NearestUnitToUnit ( vehicles , filter [ i ] ) ) < 45 then
 797: LD_VAR 0 2
 801: PUSH
 802: LD_VAR 0 1
 806: ARRAY
 807: PPUSH
 808: LD_VAR 0 4
 812: PPUSH
 813: LD_VAR 0 2
 817: PUSH
 818: LD_VAR 0 1
 822: ARRAY
 823: PPUSH
 824: CALL_OW 74
 828: PPUSH
 829: CALL_OW 296
 833: PUSH
 834: LD_INT 45
 836: LESS
 837: IFFALSE 875
// ComEnterUnit ( filter [ i ] , NearestUnitToUnit ( vehicles , filter [ i ] ) ) ;
 839: LD_VAR 0 2
 843: PUSH
 844: LD_VAR 0 1
 848: ARRAY
 849: PPUSH
 850: LD_VAR 0 4
 854: PPUSH
 855: LD_VAR 0 2
 859: PUSH
 860: LD_VAR 0 1
 864: ARRAY
 865: PPUSH
 866: CALL_OW 74
 870: PPUSH
 871: CALL_OW 120
 875: GO 759
 877: POP
 878: POP
// if filter2 then
 879: LD_VAR 0 3
 883: IFFALSE 943
// for i = 1 to filter2 do
 885: LD_ADDR_VAR 0 1
 889: PUSH
 890: DOUBLE
 891: LD_INT 1
 893: DEC
 894: ST_TO_ADDR
 895: LD_VAR 0 3
 899: PUSH
 900: FOR_TO
 901: IFFALSE 941
// if not HasTask ( filter2 [ i ] ) then
 903: LD_VAR 0 3
 907: PUSH
 908: LD_VAR 0 1
 912: ARRAY
 913: PPUSH
 914: CALL_OW 314
 918: NOT
 919: IFFALSE 939
// ComMoveToArea ( filter2 [ i ] , exit_area ) ;
 921: LD_VAR 0 3
 925: PUSH
 926: LD_VAR 0 1
 930: ARRAY
 931: PPUSH
 932: LD_INT 4
 934: PPUSH
 935: CALL_OW 113
 939: GO 900
 941: POP
 942: POP
// end ; end_of_file
 943: PPOPN 4
 945: END
// export function SpawnCar ( chas , area ) ; var i , e , veh , ar_chassis , ru_chassis , us_chassis , ar_weapons , ru_weapons , us_weapons , chassis , engine , weapon ; begin
 946: LD_INT 0
 948: PPUSH
 949: PPUSH
 950: PPUSH
 951: PPUSH
 952: PPUSH
 953: PPUSH
 954: PPUSH
 955: PPUSH
 956: PPUSH
 957: PPUSH
 958: PPUSH
 959: PPUSH
 960: PPUSH
// uc_side := 0 ;
 961: LD_ADDR_OWVAR 20
 965: PUSH
 966: LD_INT 0
 968: ST_TO_ADDR
// uc_nation := Rand ( 1 , 3 ) ;
 969: LD_ADDR_OWVAR 21
 973: PUSH
 974: LD_INT 1
 976: PPUSH
 977: LD_INT 3
 979: PPUSH
 980: CALL_OW 12
 984: ST_TO_ADDR
// ar_chassis := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ;
 985: LD_ADDR_VAR 0 7
 989: PUSH
 990: LD_INT 11
 992: PUSH
 993: LD_INT 12
 995: PUSH
 996: LD_INT 13
 998: PUSH
 999: LD_INT 14
1001: PUSH
1002: EMPTY
1003: LIST
1004: LIST
1005: LIST
1006: LIST
1007: ST_TO_ADDR
// ru_chassis := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ;
1008: LD_ADDR_VAR 0 8
1012: PUSH
1013: LD_INT 21
1015: PUSH
1016: LD_INT 22
1018: PUSH
1019: LD_INT 23
1021: PUSH
1022: LD_INT 24
1024: PUSH
1025: EMPTY
1026: LIST
1027: LIST
1028: LIST
1029: LIST
1030: ST_TO_ADDR
// us_chassis := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ;
1031: LD_ADDR_VAR 0 9
1035: PUSH
1036: LD_INT 1
1038: PUSH
1039: LD_INT 2
1041: PUSH
1042: LD_INT 3
1044: PUSH
1045: LD_INT 4
1047: PUSH
1048: LD_INT 5
1050: PUSH
1051: EMPTY
1052: LIST
1053: LIST
1054: LIST
1055: LIST
1056: LIST
1057: ST_TO_ADDR
// if chas > 0 then
1058: LD_VAR 0 1
1062: PUSH
1063: LD_INT 0
1065: GREATER
1066: IFFALSE 1080
// vc_chassis := chas else
1068: LD_ADDR_OWVAR 37
1072: PUSH
1073: LD_VAR 0 1
1077: ST_TO_ADDR
1078: GO 1173
// begin case uc_nation of 1 :
1080: LD_OWVAR 21
1084: PUSH
1085: LD_INT 1
1087: DOUBLE
1088: EQUAL
1089: IFTRUE 1093
1091: GO 1106
1093: POP
// chassis := us_chassis ; 2 :
1094: LD_ADDR_VAR 0 13
1098: PUSH
1099: LD_VAR 0 9
1103: ST_TO_ADDR
1104: GO 1149
1106: LD_INT 2
1108: DOUBLE
1109: EQUAL
1110: IFTRUE 1114
1112: GO 1127
1114: POP
// chassis := ar_chassis ; 3 :
1115: LD_ADDR_VAR 0 13
1119: PUSH
1120: LD_VAR 0 7
1124: ST_TO_ADDR
1125: GO 1149
1127: LD_INT 3
1129: DOUBLE
1130: EQUAL
1131: IFTRUE 1135
1133: GO 1148
1135: POP
// chassis := ru_chassis ; end ;
1136: LD_ADDR_VAR 0 13
1140: PUSH
1141: LD_VAR 0 8
1145: ST_TO_ADDR
1146: GO 1149
1148: POP
// vc_chassis := chassis [ Rand ( 1 , chassis ) ] ;
1149: LD_ADDR_OWVAR 37
1153: PUSH
1154: LD_VAR 0 13
1158: PUSH
1159: LD_INT 1
1161: PPUSH
1162: LD_VAR 0 13
1166: PPUSH
1167: CALL_OW 12
1171: ARRAY
1172: ST_TO_ADDR
// end ; if vc_chassis in [ ar_hovercraft , ar_light_trike , us_light_wheeled ] then
1173: LD_OWVAR 37
1177: PUSH
1178: LD_INT 11
1180: PUSH
1181: LD_INT 12
1183: PUSH
1184: LD_INT 1
1186: PUSH
1187: EMPTY
1188: LIST
1189: LIST
1190: LIST
1191: IN
1192: IFFALSE 1212
// engine := Rand ( 1 , 2 ) else
1194: LD_ADDR_VAR 0 14
1198: PUSH
1199: LD_INT 1
1201: PPUSH
1202: LD_INT 2
1204: PPUSH
1205: CALL_OW 12
1209: ST_TO_ADDR
1210: GO 1324
// begin if not vc_chassis in [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked , us_heavy_tracked , us_morphling ] then
1212: LD_OWVAR 37
1216: PUSH
1217: LD_INT 21
1219: PUSH
1220: LD_INT 22
1222: PUSH
1223: LD_INT 23
1225: PUSH
1226: LD_INT 24
1228: PUSH
1229: LD_INT 4
1231: PUSH
1232: LD_INT 5
1234: PUSH
1235: EMPTY
1236: LIST
1237: LIST
1238: LIST
1239: LIST
1240: LIST
1241: LIST
1242: IN
1243: NOT
1244: IFFALSE 1264
// engine := Rand ( 1 , 3 ) else
1246: LD_ADDR_VAR 0 14
1250: PUSH
1251: LD_INT 1
1253: PPUSH
1254: LD_INT 3
1256: PPUSH
1257: CALL_OW 12
1261: ST_TO_ADDR
1262: GO 1280
// e := Rand ( 1 , 2 ) ;
1264: LD_ADDR_VAR 0 5
1268: PUSH
1269: LD_INT 1
1271: PPUSH
1272: LD_INT 2
1274: PPUSH
1275: CALL_OW 12
1279: ST_TO_ADDR
// case e of 1 :
1280: LD_VAR 0 5
1284: PUSH
1285: LD_INT 1
1287: DOUBLE
1288: EQUAL
1289: IFTRUE 1293
1291: GO 1304
1293: POP
// engine := engine_combustion ; 2 :
1294: LD_ADDR_VAR 0 14
1298: PUSH
1299: LD_INT 1
1301: ST_TO_ADDR
1302: GO 1324
1304: LD_INT 2
1306: DOUBLE
1307: EQUAL
1308: IFTRUE 1312
1310: GO 1323
1312: POP
// engine := engine_siberite ; end ;
1313: LD_ADDR_VAR 0 14
1317: PUSH
1318: LD_INT 3
1320: ST_TO_ADDR
1321: GO 1324
1323: POP
// end ; vc_engine := engine ;
1324: LD_ADDR_OWVAR 39
1328: PUSH
1329: LD_VAR 0 14
1333: ST_TO_ADDR
// vc_control := control_manual ;
1334: LD_ADDR_OWVAR 38
1338: PUSH
1339: LD_INT 1
1341: ST_TO_ADDR
// ar_weapons := [ ar_multimissile_ballista , ar_double_machine_gun , ar_light_gun , ar_radar , ar_gatling_gun , ar_gun , ar_rocket_launcher , ar_selfpropelled_bomb , ar_flame_thrower ] ;
1342: LD_ADDR_VAR 0 10
1346: PUSH
1347: LD_INT 22
1349: PUSH
1350: LD_INT 24
1352: PUSH
1353: LD_INT 23
1355: PUSH
1356: LD_INT 30
1358: PUSH
1359: LD_INT 25
1361: PUSH
1362: LD_INT 27
1364: PUSH
1365: LD_INT 28
1367: PUSH
1368: LD_INT 29
1370: PUSH
1371: LD_INT 26
1373: PUSH
1374: EMPTY
1375: LIST
1376: LIST
1377: LIST
1378: LIST
1379: LIST
1380: LIST
1381: LIST
1382: LIST
1383: LIST
1384: ST_TO_ADDR
// ru_weapons := [ ru_heavy_machine_gun , ru_gatling_gun , ru_gun , 98 , ru_rocket_launcher , ru_heavy_gun , ru_rocket , ru_bulldozer , ru_time_lapser ] ;
1385: LD_ADDR_VAR 0 11
1389: PUSH
1390: LD_INT 42
1392: PUSH
1393: LD_INT 43
1395: PUSH
1396: LD_INT 44
1398: PUSH
1399: LD_INT 98
1401: PUSH
1402: LD_INT 45
1404: PUSH
1405: LD_INT 46
1407: PUSH
1408: LD_INT 47
1410: PUSH
1411: LD_INT 53
1413: PUSH
1414: LD_INT 49
1416: PUSH
1417: EMPTY
1418: LIST
1419: LIST
1420: LIST
1421: LIST
1422: LIST
1423: LIST
1424: LIST
1425: LIST
1426: LIST
1427: ST_TO_ADDR
// us_weapons := [ us_machine_gun , us_light_gun , us_radar , us_gatling_gun , us_double_gun , us_rocket_launcher , us_laser , us_heavy_gun , us_bulldozer , us_double_laser ] ;
1428: LD_ADDR_VAR 0 12
1432: PUSH
1433: LD_INT 2
1435: PUSH
1436: LD_INT 3
1438: PUSH
1439: LD_INT 11
1441: PUSH
1442: LD_INT 4
1444: PUSH
1445: LD_INT 5
1447: PUSH
1448: LD_INT 7
1450: PUSH
1451: LD_INT 9
1453: PUSH
1454: LD_INT 6
1456: PUSH
1457: LD_INT 14
1459: PUSH
1460: LD_INT 10
1462: PUSH
1463: EMPTY
1464: LIST
1465: LIST
1466: LIST
1467: LIST
1468: LIST
1469: LIST
1470: LIST
1471: LIST
1472: LIST
1473: LIST
1474: ST_TO_ADDR
// if uc_nation = nation_arabian then
1475: LD_OWVAR 21
1479: PUSH
1480: LD_INT 2
1482: EQUAL
1483: IFFALSE 1550
// begin if vc_chassis in [ ar_hovercraft , ar_light_trike ] then
1485: LD_OWVAR 37
1489: PUSH
1490: LD_INT 11
1492: PUSH
1493: LD_INT 12
1495: PUSH
1496: EMPTY
1497: LIST
1498: LIST
1499: IN
1500: IFFALSE 1526
// weapon := ar_weapons [ Rand ( 1 , 3 ) ] else
1502: LD_ADDR_VAR 0 15
1506: PUSH
1507: LD_VAR 0 10
1511: PUSH
1512: LD_INT 1
1514: PPUSH
1515: LD_INT 3
1517: PPUSH
1518: CALL_OW 12
1522: ARRAY
1523: ST_TO_ADDR
1524: GO 1550
// weapon := ar_weapons [ Rand ( 1 , ar_weapons ) ] ;
1526: LD_ADDR_VAR 0 15
1530: PUSH
1531: LD_VAR 0 10
1535: PUSH
1536: LD_INT 1
1538: PPUSH
1539: LD_VAR 0 10
1543: PPUSH
1544: CALL_OW 12
1548: ARRAY
1549: ST_TO_ADDR
// end ; if uc_nation = nation_russian then
1550: LD_OWVAR 21
1554: PUSH
1555: LD_INT 3
1557: EQUAL
1558: IFFALSE 1625
// begin if vc_chassis in [ ru_medium_wheeled , ru_medium_tracked ] then
1560: LD_OWVAR 37
1564: PUSH
1565: LD_INT 21
1567: PUSH
1568: LD_INT 22
1570: PUSH
1571: EMPTY
1572: LIST
1573: LIST
1574: IN
1575: IFFALSE 1601
// weapon := ru_weapons [ Rand ( 1 , 5 ) ] else
1577: LD_ADDR_VAR 0 15
1581: PUSH
1582: LD_VAR 0 11
1586: PUSH
1587: LD_INT 1
1589: PPUSH
1590: LD_INT 5
1592: PPUSH
1593: CALL_OW 12
1597: ARRAY
1598: ST_TO_ADDR
1599: GO 1625
// weapon := ru_weapons [ Rand ( 1 , ru_weapons ) ] ;
1601: LD_ADDR_VAR 0 15
1605: PUSH
1606: LD_VAR 0 11
1610: PUSH
1611: LD_INT 1
1613: PPUSH
1614: LD_VAR 0 11
1618: PPUSH
1619: CALL_OW 12
1623: ARRAY
1624: ST_TO_ADDR
// end ; if uc_nation = nation_american then
1625: LD_OWVAR 21
1629: PUSH
1630: LD_INT 1
1632: EQUAL
1633: IFFALSE 1742
// begin if vc_chassis = us_light_wheeled then
1635: LD_OWVAR 37
1639: PUSH
1640: LD_INT 1
1642: EQUAL
1643: IFFALSE 1667
// weapon := us_weapons [ Rand ( 1 , 3 ) ] ;
1645: LD_ADDR_VAR 0 15
1649: PUSH
1650: LD_VAR 0 12
1654: PUSH
1655: LD_INT 1
1657: PPUSH
1658: LD_INT 3
1660: PPUSH
1661: CALL_OW 12
1665: ARRAY
1666: ST_TO_ADDR
// if vc_chassis in [ us_medium_tracked , us_medium_wheeled ] then
1667: LD_OWVAR 37
1671: PUSH
1672: LD_INT 3
1674: PUSH
1675: LD_INT 2
1677: PUSH
1678: EMPTY
1679: LIST
1680: LIST
1681: IN
1682: IFFALSE 1708
// weapon := us_weapons [ Rand ( 1 , 7 ) ] else
1684: LD_ADDR_VAR 0 15
1688: PUSH
1689: LD_VAR 0 12
1693: PUSH
1694: LD_INT 1
1696: PPUSH
1697: LD_INT 7
1699: PPUSH
1700: CALL_OW 12
1704: ARRAY
1705: ST_TO_ADDR
1706: GO 1742
// if vc_chassis <> us_light_wheeled then
1708: LD_OWVAR 37
1712: PUSH
1713: LD_INT 1
1715: NONEQUAL
1716: IFFALSE 1742
// weapon := us_weapons [ Rand ( 1 , us_weapons ) ] ;
1718: LD_ADDR_VAR 0 15
1722: PUSH
1723: LD_VAR 0 12
1727: PUSH
1728: LD_INT 1
1730: PPUSH
1731: LD_VAR 0 12
1735: PPUSH
1736: CALL_OW 12
1740: ARRAY
1741: ST_TO_ADDR
// end ; vc_weapon := weapon ;
1742: LD_ADDR_OWVAR 40
1746: PUSH
1747: LD_VAR 0 15
1751: ST_TO_ADDR
// veh := CreateVehicle ;
1752: LD_ADDR_VAR 0 6
1756: PUSH
1757: CALL_OW 45
1761: ST_TO_ADDR
// PlaceUnitArea ( veh , area , true ) ;
1762: LD_VAR 0 6
1766: PPUSH
1767: LD_VAR 0 2
1771: PPUSH
1772: LD_INT 1
1774: PPUSH
1775: CALL_OW 49
// end ;
1779: LD_VAR 0 3
1783: RET
// export function SpawnSibRocket ( area ) ; var veh , p ; begin
1784: LD_INT 0
1786: PPUSH
1787: PPUSH
1788: PPUSH
// uc_side := 0 ;
1789: LD_ADDR_OWVAR 20
1793: PUSH
1794: LD_INT 0
1796: ST_TO_ADDR
// p := Rand ( 1 , 2 ) ;
1797: LD_ADDR_VAR 0 4
1801: PUSH
1802: LD_INT 1
1804: PPUSH
1805: LD_INT 2
1807: PPUSH
1808: CALL_OW 12
1812: ST_TO_ADDR
// case p of 1 :
1813: LD_VAR 0 4
1817: PUSH
1818: LD_INT 1
1820: DOUBLE
1821: EQUAL
1822: IFTRUE 1826
1824: GO 1869
1826: POP
// begin uc_nation := nation_american ;
1827: LD_ADDR_OWVAR 21
1831: PUSH
1832: LD_INT 1
1834: ST_TO_ADDR
// vc_chassis := us_heavy_tracked ;
1835: LD_ADDR_OWVAR 37
1839: PUSH
1840: LD_INT 4
1842: ST_TO_ADDR
// vc_engine := engine_siberite ;
1843: LD_ADDR_OWVAR 39
1847: PUSH
1848: LD_INT 3
1850: ST_TO_ADDR
// vc_control := control_manual ;
1851: LD_ADDR_OWVAR 38
1855: PUSH
1856: LD_INT 1
1858: ST_TO_ADDR
// vc_weapon := us_siberium_rocket ;
1859: LD_ADDR_OWVAR 40
1863: PUSH
1864: LD_INT 8
1866: ST_TO_ADDR
// end ; 2 :
1867: GO 1921
1869: LD_INT 2
1871: DOUBLE
1872: EQUAL
1873: IFTRUE 1877
1875: GO 1920
1877: POP
// begin uc_nation := nation_russian ;
1878: LD_ADDR_OWVAR 21
1882: PUSH
1883: LD_INT 3
1885: ST_TO_ADDR
// vc_chassis := ru_heavy_tracked ;
1886: LD_ADDR_OWVAR 37
1890: PUSH
1891: LD_INT 24
1893: ST_TO_ADDR
// vc_engine := engine_siberite ;
1894: LD_ADDR_OWVAR 39
1898: PUSH
1899: LD_INT 3
1901: ST_TO_ADDR
// vc_control := control_manual ;
1902: LD_ADDR_OWVAR 38
1906: PUSH
1907: LD_INT 1
1909: ST_TO_ADDR
// vc_weapon := ru_siberium_rocket ;
1910: LD_ADDR_OWVAR 40
1914: PUSH
1915: LD_INT 48
1917: ST_TO_ADDR
// end ; end ;
1918: GO 1921
1920: POP
// veh := CreateVehicle ;
1921: LD_ADDR_VAR 0 3
1925: PUSH
1926: CALL_OW 45
1930: ST_TO_ADDR
// PlaceUnitArea ( veh , area , true ) ;
1931: LD_VAR 0 3
1935: PPUSH
1936: LD_VAR 0 1
1940: PPUSH
1941: LD_INT 1
1943: PPUSH
1944: CALL_OW 49
// end ;
1948: LD_VAR 0 2
1952: RET
// export function ScoreBoard ( veh ) ; var points ; begin
1953: LD_INT 0
1955: PPUSH
1956: PPUSH
// points := 0 ;
1957: LD_ADDR_VAR 0 3
1961: PUSH
1962: LD_INT 0
1964: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_light_trike , us_light_wheeled ] then
1965: LD_VAR 0 1
1969: PPUSH
1970: CALL_OW 265
1974: PUSH
1975: LD_INT 12
1977: PUSH
1978: LD_INT 1
1980: PUSH
1981: EMPTY
1982: LIST
1983: LIST
1984: IN
1985: IFFALSE 2001
// points := points + 10 ;
1987: LD_ADDR_VAR 0 3
1991: PUSH
1992: LD_VAR 0 3
1996: PUSH
1997: LD_INT 10
1999: PLUS
2000: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_medium_trike , ru_medium_wheeled , us_medium_wheeled ] then
2001: LD_VAR 0 1
2005: PPUSH
2006: CALL_OW 265
2010: PUSH
2011: LD_INT 13
2013: PUSH
2014: LD_INT 21
2016: PUSH
2017: LD_INT 2
2019: PUSH
2020: EMPTY
2021: LIST
2022: LIST
2023: LIST
2024: IN
2025: IFFALSE 2041
// points := points + 15 ;
2027: LD_ADDR_VAR 0 3
2031: PUSH
2032: LD_VAR 0 3
2036: PUSH
2037: LD_INT 15
2039: PLUS
2040: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_half_tracked , ru_medium_tracked , us_medium_tracked ] then
2041: LD_VAR 0 1
2045: PPUSH
2046: CALL_OW 265
2050: PUSH
2051: LD_INT 14
2053: PUSH
2054: LD_INT 22
2056: PUSH
2057: LD_INT 3
2059: PUSH
2060: EMPTY
2061: LIST
2062: LIST
2063: LIST
2064: IN
2065: IFFALSE 2081
// points := points + 20 ;
2067: LD_ADDR_VAR 0 3
2071: PUSH
2072: LD_VAR 0 3
2076: PUSH
2077: LD_INT 20
2079: PLUS
2080: ST_TO_ADDR
// if GetChassis ( veh ) in [ ru_heavy_wheeled , ru_heavy_tracked , us_heavy_tracked ] then
2081: LD_VAR 0 1
2085: PPUSH
2086: CALL_OW 265
2090: PUSH
2091: LD_INT 23
2093: PUSH
2094: LD_INT 24
2096: PUSH
2097: LD_INT 4
2099: PUSH
2100: EMPTY
2101: LIST
2102: LIST
2103: LIST
2104: IN
2105: IFFALSE 2121
// points := points + 25 ;
2107: LD_ADDR_VAR 0 3
2111: PUSH
2112: LD_VAR 0 3
2116: PUSH
2117: LD_INT 25
2119: PLUS
2120: ST_TO_ADDR
// if GetChassis ( veh ) in [ ar_hovercraft , us_morphling ] then
2121: LD_VAR 0 1
2125: PPUSH
2126: CALL_OW 265
2130: PUSH
2131: LD_INT 11
2133: PUSH
2134: LD_INT 5
2136: PUSH
2137: EMPTY
2138: LIST
2139: LIST
2140: IN
2141: IFFALSE 2157
// points := points + 30 ;
2143: LD_ADDR_VAR 0 3
2147: PUSH
2148: LD_VAR 0 3
2152: PUSH
2153: LD_INT 30
2155: PLUS
2156: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_combustion ] then
2157: LD_VAR 0 1
2161: PPUSH
2162: CALL_OW 262
2166: PUSH
2167: LD_INT 1
2169: PUSH
2170: EMPTY
2171: LIST
2172: EQUAL
2173: IFFALSE 2189
// points := points + 5 ;
2175: LD_ADDR_VAR 0 3
2179: PUSH
2180: LD_VAR 0 3
2184: PUSH
2185: LD_INT 5
2187: PLUS
2188: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_solar ] then
2189: LD_VAR 0 1
2193: PPUSH
2194: CALL_OW 262
2198: PUSH
2199: LD_INT 2
2201: PUSH
2202: EMPTY
2203: LIST
2204: EQUAL
2205: IFFALSE 2221
// points := points + 15 ;
2207: LD_ADDR_VAR 0 3
2211: PUSH
2212: LD_VAR 0 3
2216: PUSH
2217: LD_INT 15
2219: PLUS
2220: ST_TO_ADDR
// if GetEngine ( veh ) = [ engine_siberite ] then
2221: LD_VAR 0 1
2225: PPUSH
2226: CALL_OW 262
2230: PUSH
2231: LD_INT 3
2233: PUSH
2234: EMPTY
2235: LIST
2236: EQUAL
2237: IFFALSE 2253
// points := points + 25 ;
2239: LD_ADDR_VAR 0 3
2243: PUSH
2244: LD_VAR 0 3
2248: PUSH
2249: LD_INT 25
2251: PLUS
2252: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_multimissile_ballista , ar_double_machine_gun , ar_light_gun , ru_heavy_machine_gun , us_machine_gun , us_light_gun ] then
2253: LD_VAR 0 1
2257: PPUSH
2258: CALL_OW 264
2262: PUSH
2263: LD_INT 22
2265: PUSH
2266: LD_INT 24
2268: PUSH
2269: LD_INT 23
2271: PUSH
2272: LD_INT 42
2274: PUSH
2275: LD_INT 2
2277: PUSH
2278: LD_INT 3
2280: PUSH
2281: EMPTY
2282: LIST
2283: LIST
2284: LIST
2285: LIST
2286: LIST
2287: LIST
2288: IN
2289: IFFALSE 2305
// points := points + 5 ;
2291: LD_ADDR_VAR 0 3
2295: PUSH
2296: LD_VAR 0 3
2300: PUSH
2301: LD_INT 5
2303: PLUS
2304: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_gatling_gun , ar_gun , ru_gatling_gun , ru_gun , us_gatling_gun , us_double_gun ] then
2305: LD_VAR 0 1
2309: PPUSH
2310: CALL_OW 264
2314: PUSH
2315: LD_INT 25
2317: PUSH
2318: LD_INT 27
2320: PUSH
2321: LD_INT 43
2323: PUSH
2324: LD_INT 44
2326: PUSH
2327: LD_INT 4
2329: PUSH
2330: LD_INT 5
2332: PUSH
2333: EMPTY
2334: LIST
2335: LIST
2336: LIST
2337: LIST
2338: LIST
2339: LIST
2340: IN
2341: IFFALSE 2357
// points := points + 10 ;
2343: LD_ADDR_VAR 0 3
2347: PUSH
2348: LD_VAR 0 3
2352: PUSH
2353: LD_INT 10
2355: PLUS
2356: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_rocket_launcher , ru_rocket_launcher , us_rocket_launcher ] then
2357: LD_VAR 0 1
2361: PPUSH
2362: CALL_OW 264
2366: PUSH
2367: LD_INT 28
2369: PUSH
2370: LD_INT 45
2372: PUSH
2373: LD_INT 7
2375: PUSH
2376: EMPTY
2377: LIST
2378: LIST
2379: LIST
2380: IN
2381: IFFALSE 2397
// points := points + 20 ;
2383: LD_ADDR_VAR 0 3
2387: PUSH
2388: LD_VAR 0 3
2392: PUSH
2393: LD_INT 20
2395: PLUS
2396: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ru_heavy_gun , us_heavy_gun ] then
2397: LD_VAR 0 1
2401: PPUSH
2402: CALL_OW 264
2406: PUSH
2407: LD_INT 46
2409: PUSH
2410: LD_INT 6
2412: PUSH
2413: EMPTY
2414: LIST
2415: LIST
2416: IN
2417: IFFALSE 2433
// points := points + 25 ;
2419: LD_ADDR_VAR 0 3
2423: PUSH
2424: LD_VAR 0 3
2428: PUSH
2429: LD_INT 25
2431: PLUS
2432: ST_TO_ADDR
// if GetWeapon ( veh ) in [ us_laser , us_radar , ar_radar ] then
2433: LD_VAR 0 1
2437: PPUSH
2438: CALL_OW 264
2442: PUSH
2443: LD_INT 9
2445: PUSH
2446: LD_INT 11
2448: PUSH
2449: LD_INT 30
2451: PUSH
2452: EMPTY
2453: LIST
2454: LIST
2455: LIST
2456: IN
2457: IFFALSE 2473
// points := points + 30 ;
2459: LD_ADDR_VAR 0 3
2463: PUSH
2464: LD_VAR 0 3
2468: PUSH
2469: LD_INT 30
2471: PLUS
2472: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ar_selfpropelled_bomb , ru_time_lapser , ru_rocket , us_double_laser ] then
2473: LD_VAR 0 1
2477: PPUSH
2478: CALL_OW 264
2482: PUSH
2483: LD_INT 29
2485: PUSH
2486: LD_INT 49
2488: PUSH
2489: LD_INT 47
2491: PUSH
2492: LD_INT 10
2494: PUSH
2495: EMPTY
2496: LIST
2497: LIST
2498: LIST
2499: LIST
2500: IN
2501: IFFALSE 2517
// points := points + 50 ;
2503: LD_ADDR_VAR 0 3
2507: PUSH
2508: LD_VAR 0 3
2512: PUSH
2513: LD_INT 50
2515: PLUS
2516: ST_TO_ADDR
// if GetWeapon ( veh ) in [ ru_siberium_rocket , us_siberium_rocket ] then
2517: LD_VAR 0 1
2521: PPUSH
2522: CALL_OW 264
2526: PUSH
2527: LD_INT 48
2529: PUSH
2530: LD_INT 8
2532: PUSH
2533: EMPTY
2534: LIST
2535: LIST
2536: IN
2537: IFFALSE 2553
// points := points + 100 ;
2539: LD_ADDR_VAR 0 3
2543: PUSH
2544: LD_VAR 0 3
2548: PUSH
2549: LD_INT 100
2551: PLUS
2552: ST_TO_ADDR
// result := points ;
2553: LD_ADDR_VAR 0 2
2557: PUSH
2558: LD_VAR 0 3
2562: ST_TO_ADDR
// end ; end_of_file
2563: LD_VAR 0 2
2567: RET
// every 0 0$01 trigger time do var filter , i , side , driver , un ;
2568: LD_EXP 5
2572: IFFALSE 3217
2574: GO 2576
2576: DISABLE
2577: LD_INT 0
2579: PPUSH
2580: PPUSH
2581: PPUSH
2582: PPUSH
2583: PPUSH
// begin enable ;
2584: ENABLE
// if tick < 36 then
2585: LD_OWVAR 1
2589: PUSH
2590: LD_INT 36
2592: LESS
2593: IFFALSE 2605
// SetAreaMapShow ( exit_area , 1 ) ;
2595: LD_INT 4
2597: PPUSH
2598: LD_INT 1
2600: PPUSH
2601: CALL_OW 424
// time := time - 0 0$01 ;
2605: LD_ADDR_EXP 5
2609: PUSH
2610: LD_EXP 5
2614: PUSH
2615: LD_INT 35
2617: MINUS
2618: ST_TO_ADDR
// if time = 0 0$00 then
2619: LD_EXP 5
2623: PUSH
2624: LD_INT 0
2626: EQUAL
2627: IFFALSE 2690
// if p1 > p2 and p1 > p3 and p1 > p4 and p1 > p5 then
2629: LD_EXP 7
2633: PUSH
2634: LD_EXP 8
2638: GREATER
2639: PUSH
2640: LD_EXP 7
2644: PUSH
2645: LD_EXP 9
2649: GREATER
2650: AND
2651: PUSH
2652: LD_EXP 7
2656: PUSH
2657: LD_EXP 10
2661: GREATER
2662: AND
2663: PUSH
2664: LD_EXP 7
2668: PUSH
2669: LD_EXP 11
2673: GREATER
2674: AND
2675: IFFALSE 2683
// YouWin else
2677: CALL_OW 103
2681: GO 2690
// YouLost (  ) ;
2683: LD_STRING 
2685: PPUSH
2686: CALL_OW 104
// filter := FilterUnitsInArea ( exit_area , [ f_type , unit_vehicle ] ) ;
2690: LD_ADDR_VAR 0 1
2694: PUSH
2695: LD_INT 4
2697: PPUSH
2698: LD_INT 21
2700: PUSH
2701: LD_INT 2
2703: PUSH
2704: EMPTY
2705: LIST
2706: LIST
2707: PPUSH
2708: CALL_OW 70
2712: ST_TO_ADDR
// if filter then
2713: LD_VAR 0 1
2717: IFFALSE 3007
// for i = 1 to filter do
2719: LD_ADDR_VAR 0 2
2723: PUSH
2724: DOUBLE
2725: LD_INT 1
2727: DEC
2728: ST_TO_ADDR
2729: LD_VAR 0 1
2733: PUSH
2734: FOR_TO
2735: IFFALSE 3005
// begin side := GetSide ( filter [ i ] ) ;
2737: LD_ADDR_VAR 0 3
2741: PUSH
2742: LD_VAR 0 1
2746: PUSH
2747: LD_VAR 0 2
2751: ARRAY
2752: PPUSH
2753: CALL_OW 255
2757: ST_TO_ADDR
// driver := IsDrivenBy ( filter [ i ] ) ;
2758: LD_ADDR_VAR 0 4
2762: PUSH
2763: LD_VAR 0 1
2767: PUSH
2768: LD_VAR 0 2
2772: ARRAY
2773: PPUSH
2774: CALL_OW 311
2778: ST_TO_ADDR
// un := filter [ i ] ;
2779: LD_ADDR_VAR 0 5
2783: PUSH
2784: LD_VAR 0 1
2788: PUSH
2789: LD_VAR 0 2
2793: ARRAY
2794: ST_TO_ADDR
// if IsInUnit ( driver ) then
2795: LD_VAR 0 4
2799: PPUSH
2800: CALL_OW 310
2804: IFFALSE 2815
// ComExitVehicle ( driver ) ;
2806: LD_VAR 0 4
2810: PPUSH
2811: CALL_OW 121
// Wait ( 0 0$0.3 ) ;
2815: LD_INT 10
2817: PPUSH
2818: CALL_OW 67
// RemoveUnit ( filter [ i ] ) ;
2822: LD_VAR 0 1
2826: PUSH
2827: LD_VAR 0 2
2831: ARRAY
2832: PPUSH
2833: CALL_OW 64
// case side of 1 :
2837: LD_VAR 0 3
2841: PUSH
2842: LD_INT 1
2844: DOUBLE
2845: EQUAL
2846: IFTRUE 2850
2848: GO 2874
2850: POP
// p1 := p1 + ScoreBoard ( un ) ; 2 :
2851: LD_ADDR_EXP 7
2855: PUSH
2856: LD_EXP 7
2860: PUSH
2861: LD_VAR 0 5
2865: PPUSH
2866: CALL 1953 0 1
2870: PLUS
2871: ST_TO_ADDR
2872: GO 3003
2874: LD_INT 2
2876: DOUBLE
2877: EQUAL
2878: IFTRUE 2882
2880: GO 2906
2882: POP
// p2 := p2 + ScoreBoard ( un ) ; 3 :
2883: LD_ADDR_EXP 8
2887: PUSH
2888: LD_EXP 8
2892: PUSH
2893: LD_VAR 0 5
2897: PPUSH
2898: CALL 1953 0 1
2902: PLUS
2903: ST_TO_ADDR
2904: GO 3003
2906: LD_INT 3
2908: DOUBLE
2909: EQUAL
2910: IFTRUE 2914
2912: GO 2938
2914: POP
// p3 := p3 + ScoreBoard ( un ) ; 4 :
2915: LD_ADDR_EXP 9
2919: PUSH
2920: LD_EXP 9
2924: PUSH
2925: LD_VAR 0 5
2929: PPUSH
2930: CALL 1953 0 1
2934: PLUS
2935: ST_TO_ADDR
2936: GO 3003
2938: LD_INT 4
2940: DOUBLE
2941: EQUAL
2942: IFTRUE 2946
2944: GO 2970
2946: POP
// p4 := p4 + ScoreBoard ( un ) ; 5 :
2947: LD_ADDR_EXP 10
2951: PUSH
2952: LD_EXP 10
2956: PUSH
2957: LD_VAR 0 5
2961: PPUSH
2962: CALL 1953 0 1
2966: PLUS
2967: ST_TO_ADDR
2968: GO 3003
2970: LD_INT 5
2972: DOUBLE
2973: EQUAL
2974: IFTRUE 2978
2976: GO 3002
2978: POP
// p5 := p5 + ScoreBoard ( un ) ; end ;
2979: LD_ADDR_EXP 11
2983: PUSH
2984: LD_EXP 11
2988: PUSH
2989: LD_VAR 0 5
2993: PPUSH
2994: CALL 1953 0 1
2998: PLUS
2999: ST_TO_ADDR
3000: GO 3003
3002: POP
// end ;
3003: GO 2734
3005: POP
3006: POP
// case players of 3 :
3007: LD_EXP 3
3011: PUSH
3012: LD_INT 3
3014: DOUBLE
3015: EQUAL
3016: IFTRUE 3020
3018: GO 3070
3020: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 ] ;
3021: LD_ADDR_OWVAR 47
3025: PUSH
3026: LD_STRING #tick
3028: PUSH
3029: LD_EXP 5
3033: PUSH
3034: LD_STRING #player1
3036: PUSH
3037: LD_EXP 7
3041: PUSH
3042: LD_STRING #player2
3044: PUSH
3045: LD_EXP 8
3049: PUSH
3050: LD_STRING #player3
3052: PUSH
3053: LD_EXP 9
3057: PUSH
3058: EMPTY
3059: LIST
3060: LIST
3061: LIST
3062: LIST
3063: LIST
3064: LIST
3065: LIST
3066: LIST
3067: ST_TO_ADDR
// end ; 4 :
3068: GO 3217
3070: LD_INT 4
3072: DOUBLE
3073: EQUAL
3074: IFTRUE 3078
3076: GO 3138
3078: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 , #player4 , p4 ] ;
3079: LD_ADDR_OWVAR 47
3083: PUSH
3084: LD_STRING #tick
3086: PUSH
3087: LD_EXP 5
3091: PUSH
3092: LD_STRING #player1
3094: PUSH
3095: LD_EXP 7
3099: PUSH
3100: LD_STRING #player2
3102: PUSH
3103: LD_EXP 8
3107: PUSH
3108: LD_STRING #player3
3110: PUSH
3111: LD_EXP 9
3115: PUSH
3116: LD_STRING #player4
3118: PUSH
3119: LD_EXP 10
3123: PUSH
3124: EMPTY
3125: LIST
3126: LIST
3127: LIST
3128: LIST
3129: LIST
3130: LIST
3131: LIST
3132: LIST
3133: LIST
3134: LIST
3135: ST_TO_ADDR
// end ; 5 :
3136: GO 3217
3138: LD_INT 5
3140: DOUBLE
3141: EQUAL
3142: IFTRUE 3146
3144: GO 3216
3146: POP
// begin display_strings := [ #tick , time , #player1 , p1 , #player2 , p2 , #player3 , p3 , #player4 , p4 , #player5 , p5 ] ;
3147: LD_ADDR_OWVAR 47
3151: PUSH
3152: LD_STRING #tick
3154: PUSH
3155: LD_EXP 5
3159: PUSH
3160: LD_STRING #player1
3162: PUSH
3163: LD_EXP 7
3167: PUSH
3168: LD_STRING #player2
3170: PUSH
3171: LD_EXP 8
3175: PUSH
3176: LD_STRING #player3
3178: PUSH
3179: LD_EXP 9
3183: PUSH
3184: LD_STRING #player4
3186: PUSH
3187: LD_EXP 10
3191: PUSH
3192: LD_STRING #player5
3194: PUSH
3195: LD_EXP 11
3199: PUSH
3200: EMPTY
3201: LIST
3202: LIST
3203: LIST
3204: LIST
3205: LIST
3206: LIST
3207: LIST
3208: LIST
3209: LIST
3210: LIST
3211: LIST
3212: LIST
3213: ST_TO_ADDR
// end ; end ;
3214: GO 3217
3216: POP
// end ;
3217: PPOPN 5
3219: END
// every 0 0$05 trigger time do var chance , p ;
3220: LD_EXP 5
3224: IFFALSE 3371
3226: GO 3228
3228: DISABLE
3229: LD_INT 0
3231: PPUSH
3232: PPUSH
// begin enable ;
3233: ENABLE
// Wait ( Rand ( 0 0$01 , 0 0$06 ) ) ;
3234: LD_INT 35
3236: PPUSH
3237: LD_INT 210
3239: PPUSH
3240: CALL_OW 12
3244: PPUSH
3245: CALL_OW 67
// if FilterAllUnits ( [ f_type , unit_vehicle ] ) < veh_amount then
3249: LD_INT 21
3251: PUSH
3252: LD_INT 2
3254: PUSH
3255: EMPTY
3256: LIST
3257: LIST
3258: PPUSH
3259: CALL_OW 69
3263: PUSH
3264: LD_EXP 6
3268: LESS
3269: IFFALSE 3371
// begin SpawnCar ( false , veh_spawn ) ;
3271: LD_INT 0
3273: PPUSH
3274: LD_INT 5
3276: PPUSH
3277: CALL 946 0 2
// if sib_bomb and FilterAllUnits ( [ f_or , [ [ f_weapon , us_siberium_rocket ] , [ f_weapon , ru_siberium_rocket ] ] ] ) = 0 then
3281: LD_EXP 4
3285: PUSH
3286: LD_INT 2
3288: PUSH
3289: LD_INT 34
3291: PUSH
3292: LD_INT 8
3294: PUSH
3295: EMPTY
3296: LIST
3297: LIST
3298: PUSH
3299: LD_INT 34
3301: PUSH
3302: LD_INT 48
3304: PUSH
3305: EMPTY
3306: LIST
3307: LIST
3308: PUSH
3309: EMPTY
3310: LIST
3311: LIST
3312: PUSH
3313: EMPTY
3314: LIST
3315: LIST
3316: PPUSH
3317: CALL_OW 69
3321: PUSH
3322: LD_INT 0
3324: EQUAL
3325: AND
3326: IFFALSE 3371
// begin chance := 23 ;
3328: LD_ADDR_VAR 0 1
3332: PUSH
3333: LD_INT 23
3335: ST_TO_ADDR
// p := Rand ( 0 , 100 ) ;
3336: LD_ADDR_VAR 0 2
3340: PUSH
3341: LD_INT 0
3343: PPUSH
3344: LD_INT 100
3346: PPUSH
3347: CALL_OW 12
3351: ST_TO_ADDR
// if p < chance then
3352: LD_VAR 0 2
3356: PUSH
3357: LD_VAR 0 1
3361: LESS
3362: IFFALSE 3371
// SpawnSibRocket ( veh_spawn ) ;
3364: LD_INT 5
3366: PPUSH
3367: CALL 1784 0 1
// end ; end ; end ; end_of_file
3371: PPOPN 2
3373: END
// export function SOS_UnitDestroyed ( un ) ; var i , eff , side ; begin
3374: LD_INT 0
3376: PPUSH
3377: PPUSH
3378: PPUSH
3379: PPUSH
// if GetWeapon ( un ) = ar_bio_bomb then
3380: LD_VAR 0 1
3384: PPUSH
3385: CALL_OW 264
3389: PUSH
3390: LD_EXP 83
3394: EQUAL
3395: IFFALSE 3467
// begin if GetTech ( tech_bio3 , GetSide ( un ) ) = state_researched then
3397: LD_INT 68
3399: PPUSH
3400: LD_VAR 0 1
3404: PPUSH
3405: CALL_OW 255
3409: PPUSH
3410: CALL_OW 321
3414: PUSH
3415: LD_INT 2
3417: EQUAL
3418: IFFALSE 3430
// eff := 70 else
3420: LD_ADDR_VAR 0 4
3424: PUSH
3425: LD_INT 70
3427: ST_TO_ADDR
3428: GO 3438
// eff := 30 ;
3430: LD_ADDR_VAR 0 4
3434: PUSH
3435: LD_INT 30
3437: ST_TO_ADDR
// ArtContamination ( GetX ( un ) , GetY ( un ) , eff ) ;
3438: LD_VAR 0 1
3442: PPUSH
3443: CALL_OW 250
3447: PPUSH
3448: LD_VAR 0 1
3452: PPUSH
3453: CALL_OW 251
3457: PPUSH
3458: LD_VAR 0 4
3462: PPUSH
3463: CALL_OW 495
// end ; end ;
3467: LD_VAR 0 2
3471: RET
// export function SOS_UnitExtraDestroyed ( un , killerSide , killerUnit ) ; begin
3472: LD_INT 0
3474: PPUSH
// end ;
3475: LD_VAR 0 4
3479: RET
// export function SOS_Command ( cmd ) ; begin
3480: LD_INT 0
3482: PPUSH
// end ;
3483: LD_VAR 0 2
3487: RET
// export function SOS_CommandUnitXY ( cmd , un , target , x , y ) ; begin
3488: LD_INT 0
3490: PPUSH
// if cmd = 121 then
3491: LD_VAR 0 1
3495: PUSH
3496: LD_INT 121
3498: EQUAL
3499: IFFALSE 3501
// end ;
3501: LD_VAR 0 6
3505: RET
// export function SOS_TargetableSAIL ( cmd , unit , selectedUnit , x , y ) ; begin
3506: LD_INT 0
3508: PPUSH
// if cmd = 250 and GetWeapon ( unit ) = ar_miner then
3509: LD_VAR 0 1
3513: PUSH
3514: LD_INT 250
3516: EQUAL
3517: PUSH
3518: LD_VAR 0 2
3522: PPUSH
3523: CALL_OW 264
3527: PUSH
3528: LD_EXP 86
3532: EQUAL
3533: AND
3534: IFFALSE 3555
// MinerPlaceMine ( unit , x , y ) ;
3536: LD_VAR 0 2
3540: PPUSH
3541: LD_VAR 0 4
3545: PPUSH
3546: LD_VAR 0 5
3550: PPUSH
3551: CALL 5904 0 3
// if cmd = 251 and GetWeapon ( unit ) = ar_miner then
3555: LD_VAR 0 1
3559: PUSH
3560: LD_INT 251
3562: EQUAL
3563: PUSH
3564: LD_VAR 0 2
3568: PPUSH
3569: CALL_OW 264
3573: PUSH
3574: LD_EXP 86
3578: EQUAL
3579: AND
3580: IFFALSE 3601
// MinerDetonateMine ( unit , x , y ) ;
3582: LD_VAR 0 2
3586: PPUSH
3587: LD_VAR 0 4
3591: PPUSH
3592: LD_VAR 0 5
3596: PPUSH
3597: CALL 6181 0 3
// if cmd = 252 and GetWeapon ( unit ) = ar_miner then
3601: LD_VAR 0 1
3605: PUSH
3606: LD_INT 252
3608: EQUAL
3609: PUSH
3610: LD_VAR 0 2
3614: PPUSH
3615: CALL_OW 264
3619: PUSH
3620: LD_EXP 86
3624: EQUAL
3625: AND
3626: IFFALSE 3647
// MinerCreateMinefield ( unit , x , y ) ;
3628: LD_VAR 0 2
3632: PPUSH
3633: LD_VAR 0 4
3637: PPUSH
3638: LD_VAR 0 5
3642: PPUSH
3643: CALL 6598 0 3
// if cmd = 253 and GetClass ( unit ) = class_sniper then
3647: LD_VAR 0 1
3651: PUSH
3652: LD_INT 253
3654: EQUAL
3655: PUSH
3656: LD_VAR 0 2
3660: PPUSH
3661: CALL_OW 257
3665: PUSH
3666: LD_INT 5
3668: EQUAL
3669: AND
3670: IFFALSE 3691
// ComBinocular ( unit , x , y ) ;
3672: LD_VAR 0 2
3676: PPUSH
3677: LD_VAR 0 4
3681: PPUSH
3682: LD_VAR 0 5
3686: PPUSH
3687: CALL 6969 0 3
// if cmd = 254 and GetWeapon ( unit ) = us_hack and GetControl ( selectedUnit ) = control_computer then
3691: LD_VAR 0 1
3695: PUSH
3696: LD_INT 254
3698: EQUAL
3699: PUSH
3700: LD_VAR 0 2
3704: PPUSH
3705: CALL_OW 264
3709: PUSH
3710: LD_EXP 81
3714: EQUAL
3715: AND
3716: PUSH
3717: LD_VAR 0 3
3721: PPUSH
3722: CALL_OW 263
3726: PUSH
3727: LD_INT 3
3729: EQUAL
3730: AND
3731: IFFALSE 3747
// HackDestroyVehicle ( unit , selectedUnit ) ;
3733: LD_VAR 0 2
3737: PPUSH
3738: LD_VAR 0 3
3742: PPUSH
3743: CALL 5264 0 2
// if cmd = 255 and GetWeapon ( unit ) in [ us_bulldozer , ru_bulldozer ] and ValidHex ( x , y ) then
3747: LD_VAR 0 1
3751: PUSH
3752: LD_INT 255
3754: EQUAL
3755: PUSH
3756: LD_VAR 0 2
3760: PPUSH
3761: CALL_OW 264
3765: PUSH
3766: LD_INT 14
3768: PUSH
3769: LD_INT 53
3771: PUSH
3772: EMPTY
3773: LIST
3774: LIST
3775: IN
3776: AND
3777: PUSH
3778: LD_VAR 0 4
3782: PPUSH
3783: LD_VAR 0 5
3787: PPUSH
3788: CALL_OW 488
3792: AND
3793: IFFALSE 3817
// CutTreeXYR ( unit , x , y , 12 ) ;
3795: LD_VAR 0 2
3799: PPUSH
3800: LD_VAR 0 4
3804: PPUSH
3805: LD_VAR 0 5
3809: PPUSH
3810: LD_INT 12
3812: PPUSH
3813: CALL 3830 0 4
// end ;
3817: LD_VAR 0 6
3821: RET
// export initPlantMineScript , plantMineList ; export function ComGroupPlantMineXY ( units , x , y ) ; begin
3822: LD_INT 0
3824: PPUSH
// end ;
3825: LD_VAR 0 4
3829: RET
// function CutTreeXYR ( bulldozer , x , y , r ) ; var i , min_x , min_y , max_x , max_y , _x , _y , list ; begin
3830: LD_INT 0
3832: PPUSH
3833: PPUSH
3834: PPUSH
3835: PPUSH
3836: PPUSH
3837: PPUSH
3838: PPUSH
3839: PPUSH
3840: PPUSH
// if not bulldozer or not ValidHex ( x , y ) or not r then
3841: LD_VAR 0 1
3845: NOT
3846: PUSH
3847: LD_VAR 0 2
3851: PPUSH
3852: LD_VAR 0 3
3856: PPUSH
3857: CALL_OW 488
3861: NOT
3862: OR
3863: PUSH
3864: LD_VAR 0 4
3868: NOT
3869: OR
3870: IFFALSE 3874
// exit ;
3872: GO 4214
// list := [ ] ;
3874: LD_ADDR_VAR 0 13
3878: PUSH
3879: EMPTY
3880: ST_TO_ADDR
// if x - r < 0 then
3881: LD_VAR 0 2
3885: PUSH
3886: LD_VAR 0 4
3890: MINUS
3891: PUSH
3892: LD_INT 0
3894: LESS
3895: IFFALSE 3907
// min_x := 0 else
3897: LD_ADDR_VAR 0 7
3901: PUSH
3902: LD_INT 0
3904: ST_TO_ADDR
3905: GO 3923
// min_x := x - r ;
3907: LD_ADDR_VAR 0 7
3911: PUSH
3912: LD_VAR 0 2
3916: PUSH
3917: LD_VAR 0 4
3921: MINUS
3922: ST_TO_ADDR
// if y - r < 0 then
3923: LD_VAR 0 3
3927: PUSH
3928: LD_VAR 0 4
3932: MINUS
3933: PUSH
3934: LD_INT 0
3936: LESS
3937: IFFALSE 3949
// min_y := 0 else
3939: LD_ADDR_VAR 0 8
3943: PUSH
3944: LD_INT 0
3946: ST_TO_ADDR
3947: GO 3965
// min_y := y - r ;
3949: LD_ADDR_VAR 0 8
3953: PUSH
3954: LD_VAR 0 3
3958: PUSH
3959: LD_VAR 0 4
3963: MINUS
3964: ST_TO_ADDR
// max_x := x + r ;
3965: LD_ADDR_VAR 0 9
3969: PUSH
3970: LD_VAR 0 2
3974: PUSH
3975: LD_VAR 0 4
3979: PLUS
3980: ST_TO_ADDR
// max_y := y + r ;
3981: LD_ADDR_VAR 0 10
3985: PUSH
3986: LD_VAR 0 3
3990: PUSH
3991: LD_VAR 0 4
3995: PLUS
3996: ST_TO_ADDR
// for _x = min_x to max_x do
3997: LD_ADDR_VAR 0 11
4001: PUSH
4002: DOUBLE
4003: LD_VAR 0 7
4007: DEC
4008: ST_TO_ADDR
4009: LD_VAR 0 9
4013: PUSH
4014: FOR_TO
4015: IFFALSE 4132
// for _y = min_y to max_y do
4017: LD_ADDR_VAR 0 12
4021: PUSH
4022: DOUBLE
4023: LD_VAR 0 8
4027: DEC
4028: ST_TO_ADDR
4029: LD_VAR 0 10
4033: PUSH
4034: FOR_TO
4035: IFFALSE 4128
// begin if not ValidHex ( _x , _y ) then
4037: LD_VAR 0 11
4041: PPUSH
4042: LD_VAR 0 12
4046: PPUSH
4047: CALL_OW 488
4051: NOT
4052: IFFALSE 4056
// continue ;
4054: GO 4034
// if IsEnvironment ( _x , _y ) and IsEnvironmentDestroyable ( _x , _y ) then
4056: LD_VAR 0 11
4060: PPUSH
4061: LD_VAR 0 12
4065: PPUSH
4066: CALL_OW 351
4070: PUSH
4071: LD_VAR 0 11
4075: PPUSH
4076: LD_VAR 0 12
4080: PPUSH
4081: CALL_OW 554
4085: AND
4086: IFFALSE 4126
// list := Insert ( list , list + 1 , [ _x , _y ] ) ;
4088: LD_ADDR_VAR 0 13
4092: PUSH
4093: LD_VAR 0 13
4097: PPUSH
4098: LD_VAR 0 13
4102: PUSH
4103: LD_INT 1
4105: PLUS
4106: PPUSH
4107: LD_VAR 0 11
4111: PUSH
4112: LD_VAR 0 12
4116: PUSH
4117: EMPTY
4118: LIST
4119: LIST
4120: PPUSH
4121: CALL_OW 2
4125: ST_TO_ADDR
// end ;
4126: GO 4034
4128: POP
4129: POP
4130: GO 4014
4132: POP
4133: POP
// if not list then
4134: LD_VAR 0 13
4138: NOT
4139: IFFALSE 4143
// exit ;
4141: GO 4214
// for i in list do
4143: LD_ADDR_VAR 0 6
4147: PUSH
4148: LD_VAR 0 13
4152: PUSH
4153: FOR_IN
4154: IFFALSE 4212
// AddTaskList ( bulldozer , [ [ M , i [ 1 ] , i [ 2 ] , 0 , 0 , 0 , 0 ] ] ) ;
4156: LD_VAR 0 1
4160: PPUSH
4161: LD_STRING M
4163: PUSH
4164: LD_VAR 0 6
4168: PUSH
4169: LD_INT 1
4171: ARRAY
4172: PUSH
4173: LD_VAR 0 6
4177: PUSH
4178: LD_INT 2
4180: ARRAY
4181: PUSH
4182: LD_INT 0
4184: PUSH
4185: LD_INT 0
4187: PUSH
4188: LD_INT 0
4190: PUSH
4191: LD_INT 0
4193: PUSH
4194: EMPTY
4195: LIST
4196: LIST
4197: LIST
4198: LIST
4199: LIST
4200: LIST
4201: LIST
4202: PUSH
4203: EMPTY
4204: LIST
4205: PPUSH
4206: CALL_OW 447
4210: GO 4153
4212: POP
4213: POP
// end ;
4214: LD_VAR 0 5
4218: RET
// export initHack , hackTanks , hackTanksCaptured , hackLimit , hackDist , hackCounter ; every 0 0$1 trigger not initHack do
4219: LD_EXP 14
4223: NOT
4224: IFFALSE 4274
4226: GO 4228
4228: DISABLE
// begin initHack := true ;
4229: LD_ADDR_EXP 14
4233: PUSH
4234: LD_INT 1
4236: ST_TO_ADDR
// hackTanks := [ ] ;
4237: LD_ADDR_EXP 15
4241: PUSH
4242: EMPTY
4243: ST_TO_ADDR
// hackTanksCaptured := [ ] ;
4244: LD_ADDR_EXP 16
4248: PUSH
4249: EMPTY
4250: ST_TO_ADDR
// hackLimit := 3 ;
4251: LD_ADDR_EXP 17
4255: PUSH
4256: LD_INT 3
4258: ST_TO_ADDR
// hackDist := 12 ;
4259: LD_ADDR_EXP 18
4263: PUSH
4264: LD_INT 12
4266: ST_TO_ADDR
// hackCounter := [ ] ;
4267: LD_ADDR_EXP 19
4271: PUSH
4272: EMPTY
4273: ST_TO_ADDR
// end ;
4274: END
// every 0 0$1 trigger initHack and FilterAllUnits ( [ f_weapon , us_hack ] ) do var i , tmp ;
4275: LD_EXP 14
4279: PUSH
4280: LD_INT 34
4282: PUSH
4283: LD_EXP 81
4287: PUSH
4288: EMPTY
4289: LIST
4290: LIST
4291: PPUSH
4292: CALL_OW 69
4296: AND
4297: IFFALSE 4552
4299: GO 4301
4301: DISABLE
4302: LD_INT 0
4304: PPUSH
4305: PPUSH
// begin enable ;
4306: ENABLE
// for i in FilterAllUnits ( [ f_weapon , us_hack ] ) do
4307: LD_ADDR_VAR 0 1
4311: PUSH
4312: LD_INT 34
4314: PUSH
4315: LD_EXP 81
4319: PUSH
4320: EMPTY
4321: LIST
4322: LIST
4323: PPUSH
4324: CALL_OW 69
4328: PUSH
4329: FOR_IN
4330: IFFALSE 4550
// begin if not i in hackTanks then
4332: LD_VAR 0 1
4336: PUSH
4337: LD_EXP 15
4341: IN
4342: NOT
4343: IFFALSE 4426
// begin hackTanks := Replace ( hackTanks , hackTanks + 1 , i ) ;
4345: LD_ADDR_EXP 15
4349: PUSH
4350: LD_EXP 15
4354: PPUSH
4355: LD_EXP 15
4359: PUSH
4360: LD_INT 1
4362: PLUS
4363: PPUSH
4364: LD_VAR 0 1
4368: PPUSH
4369: CALL_OW 1
4373: ST_TO_ADDR
// hackTanksCaptured := Replace ( hackTanksCaptured , hackTanksCaptured + 1 , [ ] ) ;
4374: LD_ADDR_EXP 16
4378: PUSH
4379: LD_EXP 16
4383: PPUSH
4384: LD_EXP 16
4388: PUSH
4389: LD_INT 1
4391: PLUS
4392: PPUSH
4393: EMPTY
4394: PPUSH
4395: CALL_OW 1
4399: ST_TO_ADDR
// hackCounter := Replace ( hackCounter , hackCounter + 1 , [ ] ) ;
4400: LD_ADDR_EXP 19
4404: PUSH
4405: LD_EXP 19
4409: PPUSH
4410: LD_EXP 19
4414: PUSH
4415: LD_INT 1
4417: PLUS
4418: PPUSH
4419: EMPTY
4420: PPUSH
4421: CALL_OW 1
4425: ST_TO_ADDR
// end ; if not IsOk ( i ) then
4426: LD_VAR 0 1
4430: PPUSH
4431: CALL_OW 302
4435: NOT
4436: IFFALSE 4449
// begin HackUnlinkAll ( i ) ;
4438: LD_VAR 0 1
4442: PPUSH
4443: CALL 4555 0 1
// continue ;
4447: GO 4329
// end ; HackCheckCapturedStatus ( i ) ;
4449: LD_VAR 0 1
4453: PPUSH
4454: CALL 4998 0 1
// tmp := FilterAllUnits ( [ [ f_enemy , GetSide ( i ) ] , [ f_control , control_computer ] , [ f_dist , i , hackDist ] , [ f_ok ] ] ) ;
4458: LD_ADDR_VAR 0 2
4462: PUSH
4463: LD_INT 81
4465: PUSH
4466: LD_VAR 0 1
4470: PPUSH
4471: CALL_OW 255
4475: PUSH
4476: EMPTY
4477: LIST
4478: LIST
4479: PUSH
4480: LD_INT 33
4482: PUSH
4483: LD_INT 3
4485: PUSH
4486: EMPTY
4487: LIST
4488: LIST
4489: PUSH
4490: LD_INT 91
4492: PUSH
4493: LD_VAR 0 1
4497: PUSH
4498: LD_EXP 18
4502: PUSH
4503: EMPTY
4504: LIST
4505: LIST
4506: LIST
4507: PUSH
4508: LD_INT 50
4510: PUSH
4511: EMPTY
4512: LIST
4513: PUSH
4514: EMPTY
4515: LIST
4516: LIST
4517: LIST
4518: LIST
4519: PPUSH
4520: CALL_OW 69
4524: ST_TO_ADDR
// if not tmp then
4525: LD_VAR 0 2
4529: NOT
4530: IFFALSE 4534
// continue ;
4532: GO 4329
// HackLink ( i , tmp ) ;
4534: LD_VAR 0 1
4538: PPUSH
4539: LD_VAR 0 2
4543: PPUSH
4544: CALL 4691 0 2
// end ;
4548: GO 4329
4550: POP
4551: POP
// end ;
4552: PPOPN 2
4554: END
// function HackUnlinkAll ( hack ) ; var i , index ; begin
4555: LD_INT 0
4557: PPUSH
4558: PPUSH
4559: PPUSH
// if not hack in hackTanks then
4560: LD_VAR 0 1
4564: PUSH
4565: LD_EXP 15
4569: IN
4570: NOT
4571: IFFALSE 4575
// exit ;
4573: GO 4686
// index := GetElementIndex ( hackTanks , hack ) ;
4575: LD_ADDR_VAR 0 4
4579: PUSH
4580: LD_EXP 15
4584: PPUSH
4585: LD_VAR 0 1
4589: PPUSH
4590: CALL 25431 0 2
4594: ST_TO_ADDR
// if hackTanksCaptured [ index ] then
4595: LD_EXP 16
4599: PUSH
4600: LD_VAR 0 4
4604: ARRAY
4605: IFFALSE 4686
// begin for i in hackTanksCaptured [ index ] do
4607: LD_ADDR_VAR 0 3
4611: PUSH
4612: LD_EXP 16
4616: PUSH
4617: LD_VAR 0 4
4621: ARRAY
4622: PUSH
4623: FOR_IN
4624: IFFALSE 4650
// SetSide ( i [ 1 ] , i [ 2 ] ) ;
4626: LD_VAR 0 3
4630: PUSH
4631: LD_INT 1
4633: ARRAY
4634: PPUSH
4635: LD_VAR 0 3
4639: PUSH
4640: LD_INT 2
4642: ARRAY
4643: PPUSH
4644: CALL_OW 235
4648: GO 4623
4650: POP
4651: POP
// hackTanksCaptured := Replace ( hackTanksCaptured , index , [ ] ) ;
4652: LD_ADDR_EXP 16
4656: PUSH
4657: LD_EXP 16
4661: PPUSH
4662: LD_VAR 0 4
4666: PPUSH
4667: EMPTY
4668: PPUSH
4669: CALL_OW 1
4673: ST_TO_ADDR
// SetUnitDisplayNumber ( hack , 0 ) ;
4674: LD_VAR 0 1
4678: PPUSH
4679: LD_INT 0
4681: PPUSH
4682: CALL_OW 505
// end ; end ;
4686: LD_VAR 0 2
4690: RET
// function HackLink ( hack , vehicles ) ; var i , index ; begin
4691: LD_INT 0
4693: PPUSH
4694: PPUSH
4695: PPUSH
// if not hack in hackTanks or not vehicles then
4696: LD_VAR 0 1
4700: PUSH
4701: LD_EXP 15
4705: IN
4706: NOT
4707: PUSH
4708: LD_VAR 0 2
4712: NOT
4713: OR
4714: IFFALSE 4718
// exit ;
4716: GO 4993
// vehicles := SortByDistanceUnit ( hack , vehicles , true , true ) ;
4718: LD_ADDR_VAR 0 2
4722: PUSH
4723: LD_VAR 0 1
4727: PPUSH
4728: LD_VAR 0 2
4732: PPUSH
4733: LD_INT 1
4735: PPUSH
4736: LD_INT 1
4738: PPUSH
4739: CALL 26081 0 4
4743: ST_TO_ADDR
// index := GetElementIndex ( hackTanks , hack ) ;
4744: LD_ADDR_VAR 0 5
4748: PUSH
4749: LD_EXP 15
4753: PPUSH
4754: LD_VAR 0 1
4758: PPUSH
4759: CALL 25431 0 2
4763: ST_TO_ADDR
// if hackTanksCaptured [ index ] < hackLimit then
4764: LD_EXP 16
4768: PUSH
4769: LD_VAR 0 5
4773: ARRAY
4774: PUSH
4775: LD_EXP 17
4779: LESS
4780: IFFALSE 4969
// begin for i := 1 to vehicles do
4782: LD_ADDR_VAR 0 4
4786: PUSH
4787: DOUBLE
4788: LD_INT 1
4790: DEC
4791: ST_TO_ADDR
4792: LD_VAR 0 2
4796: PUSH
4797: FOR_TO
4798: IFFALSE 4967
// begin if hackTanksCaptured [ index ] = hackLimit then
4800: LD_EXP 16
4804: PUSH
4805: LD_VAR 0 5
4809: ARRAY
4810: PUSH
4811: LD_EXP 17
4815: EQUAL
4816: IFFALSE 4820
// break ;
4818: GO 4967
// hackCounter := Replace ( hackCounter , index , hackCounter [ index ] + 1 ) ;
4820: LD_ADDR_EXP 19
4824: PUSH
4825: LD_EXP 19
4829: PPUSH
4830: LD_VAR 0 5
4834: PPUSH
4835: LD_EXP 19
4839: PUSH
4840: LD_VAR 0 5
4844: ARRAY
4845: PUSH
4846: LD_INT 1
4848: PLUS
4849: PPUSH
4850: CALL_OW 1
4854: ST_TO_ADDR
// hackTanksCaptured := ReplaceIn ( hackTanksCaptured , [ index , hackTanksCaptured [ index ] + 1 ] , [ vehicles [ i ] , GetSide ( vehicles [ i ] ) ] ) ;
4855: LD_ADDR_EXP 16
4859: PUSH
4860: LD_EXP 16
4864: PPUSH
4865: LD_VAR 0 5
4869: PUSH
4870: LD_EXP 16
4874: PUSH
4875: LD_VAR 0 5
4879: ARRAY
4880: PUSH
4881: LD_INT 1
4883: PLUS
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: PPUSH
4889: LD_VAR 0 2
4893: PUSH
4894: LD_VAR 0 4
4898: ARRAY
4899: PUSH
4900: LD_VAR 0 2
4904: PUSH
4905: LD_VAR 0 4
4909: ARRAY
4910: PPUSH
4911: CALL_OW 255
4915: PUSH
4916: EMPTY
4917: LIST
4918: LIST
4919: PPUSH
4920: CALL 25646 0 3
4924: ST_TO_ADDR
// SetSide ( vehicles [ i ] , GetSide ( hack ) ) ;
4925: LD_VAR 0 2
4929: PUSH
4930: LD_VAR 0 4
4934: ARRAY
4935: PPUSH
4936: LD_VAR 0 1
4940: PPUSH
4941: CALL_OW 255
4945: PPUSH
4946: CALL_OW 235
// ComStop ( vehicles [ i ] ) ;
4950: LD_VAR 0 2
4954: PUSH
4955: LD_VAR 0 4
4959: ARRAY
4960: PPUSH
4961: CALL_OW 141
// end ;
4965: GO 4797
4967: POP
4968: POP
// end ; SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
4969: LD_VAR 0 1
4973: PPUSH
4974: LD_EXP 16
4978: PUSH
4979: LD_VAR 0 5
4983: ARRAY
4984: PUSH
4985: LD_INT 0
4987: PLUS
4988: PPUSH
4989: CALL_OW 505
// end ;
4993: LD_VAR 0 3
4997: RET
// function HackCheckCapturedStatus ( hack ) ; var i , index , tmp ; begin
4998: LD_INT 0
5000: PPUSH
5001: PPUSH
5002: PPUSH
5003: PPUSH
// if not hack in hackTanks then
5004: LD_VAR 0 1
5008: PUSH
5009: LD_EXP 15
5013: IN
5014: NOT
5015: IFFALSE 5019
// exit ;
5017: GO 5259
// index := GetElementIndex ( hackTanks , hack ) ;
5019: LD_ADDR_VAR 0 4
5023: PUSH
5024: LD_EXP 15
5028: PPUSH
5029: LD_VAR 0 1
5033: PPUSH
5034: CALL 25431 0 2
5038: ST_TO_ADDR
// for i := hackTanksCaptured [ index ] downto 1 do
5039: LD_ADDR_VAR 0 3
5043: PUSH
5044: DOUBLE
5045: LD_EXP 16
5049: PUSH
5050: LD_VAR 0 4
5054: ARRAY
5055: INC
5056: ST_TO_ADDR
5057: LD_INT 1
5059: PUSH
5060: FOR_DOWNTO
5061: IFFALSE 5233
// begin tmp := hackTanksCaptured [ index ] [ i ] ;
5063: LD_ADDR_VAR 0 5
5067: PUSH
5068: LD_EXP 16
5072: PUSH
5073: LD_VAR 0 4
5077: ARRAY
5078: PUSH
5079: LD_VAR 0 3
5083: ARRAY
5084: ST_TO_ADDR
// if not IsOk ( tmp [ 1 ] ) or GetSide ( tmp [ 1 ] ) <> GetSide ( hack ) then
5085: LD_VAR 0 5
5089: PUSH
5090: LD_INT 1
5092: ARRAY
5093: PPUSH
5094: CALL_OW 302
5098: NOT
5099: PUSH
5100: LD_VAR 0 5
5104: PUSH
5105: LD_INT 1
5107: ARRAY
5108: PPUSH
5109: CALL_OW 255
5113: PUSH
5114: LD_VAR 0 1
5118: PPUSH
5119: CALL_OW 255
5123: NONEQUAL
5124: OR
5125: IFFALSE 5231
// begin if IsPlaced ( tmp [ 1 ] ) and GetSide ( tmp [ 1 ] ) = GetSide ( hack ) then
5127: LD_VAR 0 5
5131: PUSH
5132: LD_INT 1
5134: ARRAY
5135: PPUSH
5136: CALL_OW 305
5140: PUSH
5141: LD_VAR 0 5
5145: PUSH
5146: LD_INT 1
5148: ARRAY
5149: PPUSH
5150: CALL_OW 255
5154: PUSH
5155: LD_VAR 0 1
5159: PPUSH
5160: CALL_OW 255
5164: EQUAL
5165: AND
5166: IFFALSE 5190
// SetSide ( tmp [ 1 ] , tmp [ 2 ] ) ;
5168: LD_VAR 0 5
5172: PUSH
5173: LD_INT 1
5175: ARRAY
5176: PPUSH
5177: LD_VAR 0 5
5181: PUSH
5182: LD_INT 2
5184: ARRAY
5185: PPUSH
5186: CALL_OW 235
// hackTanksCaptured := Replace ( hackTanksCaptured , index , Delete ( hackTanksCaptured [ index ] , i ) ) ;
5190: LD_ADDR_EXP 16
5194: PUSH
5195: LD_EXP 16
5199: PPUSH
5200: LD_VAR 0 4
5204: PPUSH
5205: LD_EXP 16
5209: PUSH
5210: LD_VAR 0 4
5214: ARRAY
5215: PPUSH
5216: LD_VAR 0 3
5220: PPUSH
5221: CALL_OW 3
5225: PPUSH
5226: CALL_OW 1
5230: ST_TO_ADDR
// end ; end ;
5231: GO 5060
5233: POP
5234: POP
// SetUnitDisplayNumber ( hack , hackTanksCaptured [ index ] + 0 ) ;
5235: LD_VAR 0 1
5239: PPUSH
5240: LD_EXP 16
5244: PUSH
5245: LD_VAR 0 4
5249: ARRAY
5250: PUSH
5251: LD_INT 0
5253: PLUS
5254: PPUSH
5255: CALL_OW 505
// end ;
5259: LD_VAR 0 2
5263: RET
// export function HackDestroyVehicle ( hack , vehicle ) ; var i , index , tmp ; begin
5264: LD_INT 0
5266: PPUSH
5267: PPUSH
5268: PPUSH
5269: PPUSH
// if not hack in hackTanks then
5270: LD_VAR 0 1
5274: PUSH
5275: LD_EXP 15
5279: IN
5280: NOT
5281: IFFALSE 5285
// exit ;
5283: GO 5370
// index := GetElementIndex ( hackTanks , hack ) ;
5285: LD_ADDR_VAR 0 5
5289: PUSH
5290: LD_EXP 15
5294: PPUSH
5295: LD_VAR 0 1
5299: PPUSH
5300: CALL 25431 0 2
5304: ST_TO_ADDR
// for i := 1 to hackTanksCaptured [ index ] do
5305: LD_ADDR_VAR 0 4
5309: PUSH
5310: DOUBLE
5311: LD_INT 1
5313: DEC
5314: ST_TO_ADDR
5315: LD_EXP 16
5319: PUSH
5320: LD_VAR 0 5
5324: ARRAY
5325: PUSH
5326: FOR_TO
5327: IFFALSE 5368
// if hackTanksCaptured [ index ] [ i ] [ 1 ] = vehicle then
5329: LD_EXP 16
5333: PUSH
5334: LD_VAR 0 5
5338: ARRAY
5339: PUSH
5340: LD_VAR 0 4
5344: ARRAY
5345: PUSH
5346: LD_INT 1
5348: ARRAY
5349: PUSH
5350: LD_VAR 0 2
5354: EQUAL
5355: IFFALSE 5366
// KillUnit ( vehicle ) ;
5357: LD_VAR 0 2
5361: PPUSH
5362: CALL_OW 66
5366: GO 5326
5368: POP
5369: POP
// end ;
5370: LD_VAR 0 3
5374: RET
// export initMiner , minersList , minerMinesList , minesLimitPerVehicle ; every 0 0$1 trigger not initMiner do
5375: LD_EXP 20
5379: NOT
5380: IFFALSE 5415
5382: GO 5384
5384: DISABLE
// begin initMiner := true ;
5385: LD_ADDR_EXP 20
5389: PUSH
5390: LD_INT 1
5392: ST_TO_ADDR
// minersList := [ ] ;
5393: LD_ADDR_EXP 21
5397: PUSH
5398: EMPTY
5399: ST_TO_ADDR
// minerMinesList := [ ] ;
5400: LD_ADDR_EXP 22
5404: PUSH
5405: EMPTY
5406: ST_TO_ADDR
// minesLimitPerVehicle := 5 ;
5407: LD_ADDR_EXP 23
5411: PUSH
5412: LD_INT 5
5414: ST_TO_ADDR
// end ;
5415: END
// every 0 0$1 trigger initMiner and FilterAllUnits ( [ f_weapon , ar_miner ] ) do var i , j , side , tmp ;
5416: LD_EXP 20
5420: PUSH
5421: LD_INT 34
5423: PUSH
5424: LD_EXP 86
5428: PUSH
5429: EMPTY
5430: LIST
5431: LIST
5432: PPUSH
5433: CALL_OW 69
5437: AND
5438: IFFALSE 5901
5440: GO 5442
5442: DISABLE
5443: LD_INT 0
5445: PPUSH
5446: PPUSH
5447: PPUSH
5448: PPUSH
// begin enable ;
5449: ENABLE
// for i in FilterAllUnits ( [ f_weapon , ar_miner ] ) do
5450: LD_ADDR_VAR 0 1
5454: PUSH
5455: LD_INT 34
5457: PUSH
5458: LD_EXP 86
5462: PUSH
5463: EMPTY
5464: LIST
5465: LIST
5466: PPUSH
5467: CALL_OW 69
5471: PUSH
5472: FOR_IN
5473: IFFALSE 5545
// begin if not i in minersList then
5475: LD_VAR 0 1
5479: PUSH
5480: LD_EXP 21
5484: IN
5485: NOT
5486: IFFALSE 5543
// begin minersList := Replace ( minersList , minersList + 1 , i ) ;
5488: LD_ADDR_EXP 21
5492: PUSH
5493: LD_EXP 21
5497: PPUSH
5498: LD_EXP 21
5502: PUSH
5503: LD_INT 1
5505: PLUS
5506: PPUSH
5507: LD_VAR 0 1
5511: PPUSH
5512: CALL_OW 1
5516: ST_TO_ADDR
// minerMinesList := Replace ( minerMinesList , minerMinesList + 1 , [ ] ) ;
5517: LD_ADDR_EXP 22
5521: PUSH
5522: LD_EXP 22
5526: PPUSH
5527: LD_EXP 22
5531: PUSH
5532: LD_INT 1
5534: PLUS
5535: PPUSH
5536: EMPTY
5537: PPUSH
5538: CALL_OW 1
5542: ST_TO_ADDR
// end end ;
5543: GO 5472
5545: POP
5546: POP
// for i := minerMinesList downto 1 do
5547: LD_ADDR_VAR 0 1
5551: PUSH
5552: DOUBLE
5553: LD_EXP 22
5557: INC
5558: ST_TO_ADDR
5559: LD_INT 1
5561: PUSH
5562: FOR_DOWNTO
5563: IFFALSE 5899
// begin if IsLive ( minersList [ i ] ) then
5565: LD_EXP 21
5569: PUSH
5570: LD_VAR 0 1
5574: ARRAY
5575: PPUSH
5576: CALL_OW 300
5580: IFFALSE 5608
// SetUnitDisplayNumber ( minersList [ i ] , minerMinesList [ i ] ) ;
5582: LD_EXP 21
5586: PUSH
5587: LD_VAR 0 1
5591: ARRAY
5592: PPUSH
5593: LD_EXP 22
5597: PUSH
5598: LD_VAR 0 1
5602: ARRAY
5603: PPUSH
5604: CALL_OW 505
// if not minerMinesList [ i ] then
5608: LD_EXP 22
5612: PUSH
5613: LD_VAR 0 1
5617: ARRAY
5618: NOT
5619: IFFALSE 5623
// continue ;
5621: GO 5562
// for j := minerMinesList [ i ] downto 1 do
5623: LD_ADDR_VAR 0 2
5627: PUSH
5628: DOUBLE
5629: LD_EXP 22
5633: PUSH
5634: LD_VAR 0 1
5638: ARRAY
5639: INC
5640: ST_TO_ADDR
5641: LD_INT 1
5643: PUSH
5644: FOR_DOWNTO
5645: IFFALSE 5895
// begin side := GetSide ( minersList [ i ] ) ;
5647: LD_ADDR_VAR 0 3
5651: PUSH
5652: LD_EXP 21
5656: PUSH
5657: LD_VAR 0 1
5661: ARRAY
5662: PPUSH
5663: CALL_OW 255
5667: ST_TO_ADDR
// tmp := HexInfo ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) ;
5668: LD_ADDR_VAR 0 4
5672: PUSH
5673: LD_EXP 22
5677: PUSH
5678: LD_VAR 0 1
5682: ARRAY
5683: PUSH
5684: LD_VAR 0 2
5688: ARRAY
5689: PUSH
5690: LD_INT 1
5692: ARRAY
5693: PPUSH
5694: LD_EXP 22
5698: PUSH
5699: LD_VAR 0 1
5703: ARRAY
5704: PUSH
5705: LD_VAR 0 2
5709: ARRAY
5710: PUSH
5711: LD_INT 2
5713: ARRAY
5714: PPUSH
5715: CALL_OW 428
5719: ST_TO_ADDR
// if not tmp then
5720: LD_VAR 0 4
5724: NOT
5725: IFFALSE 5729
// continue ;
5727: GO 5644
// if tmp in FilterAllUnits ( [ f_enemy , side ] ) and MineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] ) then
5729: LD_VAR 0 4
5733: PUSH
5734: LD_INT 81
5736: PUSH
5737: LD_VAR 0 3
5741: PUSH
5742: EMPTY
5743: LIST
5744: LIST
5745: PPUSH
5746: CALL_OW 69
5750: IN
5751: PUSH
5752: LD_EXP 22
5756: PUSH
5757: LD_VAR 0 1
5761: ARRAY
5762: PUSH
5763: LD_VAR 0 2
5767: ARRAY
5768: PUSH
5769: LD_INT 1
5771: ARRAY
5772: PPUSH
5773: LD_EXP 22
5777: PUSH
5778: LD_VAR 0 1
5782: ARRAY
5783: PUSH
5784: LD_VAR 0 2
5788: ARRAY
5789: PUSH
5790: LD_INT 2
5792: ARRAY
5793: PPUSH
5794: CALL_OW 458
5798: AND
5799: IFFALSE 5893
// begin LaunchMineAtPos ( minerMinesList [ i ] [ j ] [ 1 ] , minerMinesList [ i ] [ j ] [ 2 ] , side ) ;
5801: LD_EXP 22
5805: PUSH
5806: LD_VAR 0 1
5810: ARRAY
5811: PUSH
5812: LD_VAR 0 2
5816: ARRAY
5817: PUSH
5818: LD_INT 1
5820: ARRAY
5821: PPUSH
5822: LD_EXP 22
5826: PUSH
5827: LD_VAR 0 1
5831: ARRAY
5832: PUSH
5833: LD_VAR 0 2
5837: ARRAY
5838: PUSH
5839: LD_INT 2
5841: ARRAY
5842: PPUSH
5843: LD_VAR 0 3
5847: PPUSH
5848: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , i , Delete ( minerMinesList [ i ] , j ) ) ;
5852: LD_ADDR_EXP 22
5856: PUSH
5857: LD_EXP 22
5861: PPUSH
5862: LD_VAR 0 1
5866: PPUSH
5867: LD_EXP 22
5871: PUSH
5872: LD_VAR 0 1
5876: ARRAY
5877: PPUSH
5878: LD_VAR 0 2
5882: PPUSH
5883: CALL_OW 3
5887: PPUSH
5888: CALL_OW 1
5892: ST_TO_ADDR
// end ; end ;
5893: GO 5644
5895: POP
5896: POP
// end ;
5897: GO 5562
5899: POP
5900: POP
// end ;
5901: PPOPN 4
5903: END
// export function MinerPlaceMine ( unit , x , y ) ; var index ; begin
5904: LD_INT 0
5906: PPUSH
5907: PPUSH
// result := false ;
5908: LD_ADDR_VAR 0 4
5912: PUSH
5913: LD_INT 0
5915: ST_TO_ADDR
// if not GetWeapon ( unit ) = ar_miner then
5916: LD_VAR 0 1
5920: PPUSH
5921: CALL_OW 264
5925: PUSH
5926: LD_EXP 86
5930: EQUAL
5931: NOT
5932: IFFALSE 5936
// exit ;
5934: GO 6176
// index := GetElementIndex ( minersList , unit ) ;
5936: LD_ADDR_VAR 0 5
5940: PUSH
5941: LD_EXP 21
5945: PPUSH
5946: LD_VAR 0 1
5950: PPUSH
5951: CALL 25431 0 2
5955: ST_TO_ADDR
// if minerMinesList [ index ] >= minesLimitPerVehicle then
5956: LD_EXP 22
5960: PUSH
5961: LD_VAR 0 5
5965: ARRAY
5966: PUSH
5967: LD_EXP 23
5971: GREATEREQUAL
5972: IFFALSE 5976
// exit ;
5974: GO 6176
// ComMoveXY ( unit , x , y ) ;
5976: LD_VAR 0 1
5980: PPUSH
5981: LD_VAR 0 2
5985: PPUSH
5986: LD_VAR 0 3
5990: PPUSH
5991: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
5995: LD_INT 35
5997: PPUSH
5998: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) and HasTask ( unit ) then
6002: LD_VAR 0 1
6006: PPUSH
6007: LD_VAR 0 2
6011: PPUSH
6012: LD_VAR 0 3
6016: PPUSH
6017: CALL 55828 0 3
6021: NOT
6022: PUSH
6023: LD_VAR 0 1
6027: PPUSH
6028: CALL_OW 314
6032: AND
6033: IFFALSE 6037
// exit ;
6035: GO 6176
// until HexInfo ( x , y ) = unit and not HasTask ( unit ) ;
6037: LD_VAR 0 2
6041: PPUSH
6042: LD_VAR 0 3
6046: PPUSH
6047: CALL_OW 428
6051: PUSH
6052: LD_VAR 0 1
6056: EQUAL
6057: PUSH
6058: LD_VAR 0 1
6062: PPUSH
6063: CALL_OW 314
6067: NOT
6068: AND
6069: IFFALSE 5995
// PlaySoundXY ( x , y , PlantMine ) ;
6071: LD_VAR 0 2
6075: PPUSH
6076: LD_VAR 0 3
6080: PPUSH
6081: LD_STRING PlantMine
6083: PPUSH
6084: CALL_OW 366
// PlaceMine ( x , y , GetSide ( unit ) , 0 ) ;
6088: LD_VAR 0 2
6092: PPUSH
6093: LD_VAR 0 3
6097: PPUSH
6098: LD_VAR 0 1
6102: PPUSH
6103: CALL_OW 255
6107: PPUSH
6108: LD_INT 0
6110: PPUSH
6111: CALL_OW 454
// minerMinesList := ReplaceIn ( minerMinesList , [ index , minerMinesList [ index ] + 1 ] , [ x , y ] ) ;
6115: LD_ADDR_EXP 22
6119: PUSH
6120: LD_EXP 22
6124: PPUSH
6125: LD_VAR 0 5
6129: PUSH
6130: LD_EXP 22
6134: PUSH
6135: LD_VAR 0 5
6139: ARRAY
6140: PUSH
6141: LD_INT 1
6143: PLUS
6144: PUSH
6145: EMPTY
6146: LIST
6147: LIST
6148: PPUSH
6149: LD_VAR 0 2
6153: PUSH
6154: LD_VAR 0 3
6158: PUSH
6159: EMPTY
6160: LIST
6161: LIST
6162: PPUSH
6163: CALL 25646 0 3
6167: ST_TO_ADDR
// result := true ;
6168: LD_ADDR_VAR 0 4
6172: PUSH
6173: LD_INT 1
6175: ST_TO_ADDR
// end ;
6176: LD_VAR 0 4
6180: RET
// export function MinerDetonateMine ( unit , x , y ) ; var i , index ; begin
6181: LD_INT 0
6183: PPUSH
6184: PPUSH
6185: PPUSH
// if not unit in minersList then
6186: LD_VAR 0 1
6190: PUSH
6191: LD_EXP 21
6195: IN
6196: NOT
6197: IFFALSE 6201
// exit ;
6199: GO 6593
// index := GetElementIndex ( minersList , unit ) ;
6201: LD_ADDR_VAR 0 6
6205: PUSH
6206: LD_EXP 21
6210: PPUSH
6211: LD_VAR 0 1
6215: PPUSH
6216: CALL 25431 0 2
6220: ST_TO_ADDR
// for i := minerMinesList [ index ] downto 1 do
6221: LD_ADDR_VAR 0 5
6225: PUSH
6226: DOUBLE
6227: LD_EXP 22
6231: PUSH
6232: LD_VAR 0 6
6236: ARRAY
6237: INC
6238: ST_TO_ADDR
6239: LD_INT 1
6241: PUSH
6242: FOR_DOWNTO
6243: IFFALSE 6404
// begin if minerMinesList [ index ] [ i ] [ 1 ] = x and minerMinesList [ index ] [ i ] [ 2 ] = y then
6245: LD_EXP 22
6249: PUSH
6250: LD_VAR 0 6
6254: ARRAY
6255: PUSH
6256: LD_VAR 0 5
6260: ARRAY
6261: PUSH
6262: LD_INT 1
6264: ARRAY
6265: PUSH
6266: LD_VAR 0 2
6270: EQUAL
6271: PUSH
6272: LD_EXP 22
6276: PUSH
6277: LD_VAR 0 6
6281: ARRAY
6282: PUSH
6283: LD_VAR 0 5
6287: ARRAY
6288: PUSH
6289: LD_INT 2
6291: ARRAY
6292: PUSH
6293: LD_VAR 0 3
6297: EQUAL
6298: AND
6299: IFFALSE 6402
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
6301: LD_EXP 22
6305: PUSH
6306: LD_VAR 0 6
6310: ARRAY
6311: PUSH
6312: LD_VAR 0 5
6316: ARRAY
6317: PUSH
6318: LD_INT 1
6320: ARRAY
6321: PPUSH
6322: LD_EXP 22
6326: PUSH
6327: LD_VAR 0 6
6331: ARRAY
6332: PUSH
6333: LD_VAR 0 5
6337: ARRAY
6338: PUSH
6339: LD_INT 2
6341: ARRAY
6342: PPUSH
6343: LD_VAR 0 1
6347: PPUSH
6348: CALL_OW 255
6352: PPUSH
6353: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
6357: LD_ADDR_EXP 22
6361: PUSH
6362: LD_EXP 22
6366: PPUSH
6367: LD_VAR 0 6
6371: PPUSH
6372: LD_EXP 22
6376: PUSH
6377: LD_VAR 0 6
6381: ARRAY
6382: PPUSH
6383: LD_VAR 0 5
6387: PPUSH
6388: CALL_OW 3
6392: PPUSH
6393: CALL_OW 1
6397: ST_TO_ADDR
// exit ;
6398: POP
6399: POP
6400: GO 6593
// end ; end ;
6402: GO 6242
6404: POP
6405: POP
// for i := minerMinesList [ index ] downto 1 do
6406: LD_ADDR_VAR 0 5
6410: PUSH
6411: DOUBLE
6412: LD_EXP 22
6416: PUSH
6417: LD_VAR 0 6
6421: ARRAY
6422: INC
6423: ST_TO_ADDR
6424: LD_INT 1
6426: PUSH
6427: FOR_DOWNTO
6428: IFFALSE 6591
// begin if GetDistXY ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , x , y ) < 6 then
6430: LD_EXP 22
6434: PUSH
6435: LD_VAR 0 6
6439: ARRAY
6440: PUSH
6441: LD_VAR 0 5
6445: ARRAY
6446: PUSH
6447: LD_INT 1
6449: ARRAY
6450: PPUSH
6451: LD_EXP 22
6455: PUSH
6456: LD_VAR 0 6
6460: ARRAY
6461: PUSH
6462: LD_VAR 0 5
6466: ARRAY
6467: PUSH
6468: LD_INT 2
6470: ARRAY
6471: PPUSH
6472: LD_VAR 0 2
6476: PPUSH
6477: LD_VAR 0 3
6481: PPUSH
6482: CALL_OW 298
6486: PUSH
6487: LD_INT 6
6489: LESS
6490: IFFALSE 6589
// begin LaunchMineAtPos ( minerMinesList [ index ] [ i ] [ 1 ] , minerMinesList [ index ] [ i ] [ 2 ] , GetSide ( unit ) ) ;
6492: LD_EXP 22
6496: PUSH
6497: LD_VAR 0 6
6501: ARRAY
6502: PUSH
6503: LD_VAR 0 5
6507: ARRAY
6508: PUSH
6509: LD_INT 1
6511: ARRAY
6512: PPUSH
6513: LD_EXP 22
6517: PUSH
6518: LD_VAR 0 6
6522: ARRAY
6523: PUSH
6524: LD_VAR 0 5
6528: ARRAY
6529: PUSH
6530: LD_INT 2
6532: ARRAY
6533: PPUSH
6534: LD_VAR 0 1
6538: PPUSH
6539: CALL_OW 255
6543: PPUSH
6544: CALL_OW 456
// minerMinesList := Replace ( minerMinesList , index , Delete ( minerMinesList [ index ] , i ) ) ;
6548: LD_ADDR_EXP 22
6552: PUSH
6553: LD_EXP 22
6557: PPUSH
6558: LD_VAR 0 6
6562: PPUSH
6563: LD_EXP 22
6567: PUSH
6568: LD_VAR 0 6
6572: ARRAY
6573: PPUSH
6574: LD_VAR 0 5
6578: PPUSH
6579: CALL_OW 3
6583: PPUSH
6584: CALL_OW 1
6588: ST_TO_ADDR
// end ; end ;
6589: GO 6427
6591: POP
6592: POP
// end ;
6593: LD_VAR 0 4
6597: RET
// export function MinerCreateMinefield ( unit , x , y ) ; var i , index , tmp , minesFreeAmount , _x , _y , _d , _r ; begin
6598: LD_INT 0
6600: PPUSH
6601: PPUSH
6602: PPUSH
6603: PPUSH
6604: PPUSH
6605: PPUSH
6606: PPUSH
6607: PPUSH
6608: PPUSH
// if not GetWeapon ( unit ) = ar_miner or not unit in minersList then
6609: LD_VAR 0 1
6613: PPUSH
6614: CALL_OW 264
6618: PUSH
6619: LD_EXP 86
6623: EQUAL
6624: NOT
6625: PUSH
6626: LD_VAR 0 1
6630: PUSH
6631: LD_EXP 21
6635: IN
6636: NOT
6637: OR
6638: IFFALSE 6642
// exit ;
6640: GO 6964
// index := GetElementIndex ( minersList , unit ) ;
6642: LD_ADDR_VAR 0 6
6646: PUSH
6647: LD_EXP 21
6651: PPUSH
6652: LD_VAR 0 1
6656: PPUSH
6657: CALL 25431 0 2
6661: ST_TO_ADDR
// minesFreeAmount := minesLimitPerVehicle - minerMinesList [ index ] ;
6662: LD_ADDR_VAR 0 8
6666: PUSH
6667: LD_EXP 23
6671: PUSH
6672: LD_EXP 22
6676: PUSH
6677: LD_VAR 0 6
6681: ARRAY
6682: MINUS
6683: ST_TO_ADDR
// if not minesFreeAmount then
6684: LD_VAR 0 8
6688: NOT
6689: IFFALSE 6693
// exit ;
6691: GO 6964
// tmp := [ ] ;
6693: LD_ADDR_VAR 0 7
6697: PUSH
6698: EMPTY
6699: ST_TO_ADDR
// for i := 1 to minesFreeAmount do
6700: LD_ADDR_VAR 0 5
6704: PUSH
6705: DOUBLE
6706: LD_INT 1
6708: DEC
6709: ST_TO_ADDR
6710: LD_VAR 0 8
6714: PUSH
6715: FOR_TO
6716: IFFALSE 6911
// begin _d := rand ( 0 , 5 ) ;
6718: LD_ADDR_VAR 0 11
6722: PUSH
6723: LD_INT 0
6725: PPUSH
6726: LD_INT 5
6728: PPUSH
6729: CALL_OW 12
6733: ST_TO_ADDR
// _r := rand ( 2 , 6 ) ;
6734: LD_ADDR_VAR 0 12
6738: PUSH
6739: LD_INT 2
6741: PPUSH
6742: LD_INT 6
6744: PPUSH
6745: CALL_OW 12
6749: ST_TO_ADDR
// _x := ShiftX ( x , _d , _r ) ;
6750: LD_ADDR_VAR 0 9
6754: PUSH
6755: LD_VAR 0 2
6759: PPUSH
6760: LD_VAR 0 11
6764: PPUSH
6765: LD_VAR 0 12
6769: PPUSH
6770: CALL_OW 272
6774: ST_TO_ADDR
// _y := ShiftY ( y , _d , _r ) ;
6775: LD_ADDR_VAR 0 10
6779: PUSH
6780: LD_VAR 0 3
6784: PPUSH
6785: LD_VAR 0 11
6789: PPUSH
6790: LD_VAR 0 12
6794: PPUSH
6795: CALL_OW 273
6799: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not [ _x , _y ] in tmp and not MineAtPos ( _x , _y ) then
6800: LD_VAR 0 9
6804: PPUSH
6805: LD_VAR 0 10
6809: PPUSH
6810: CALL_OW 488
6814: PUSH
6815: LD_VAR 0 9
6819: PUSH
6820: LD_VAR 0 10
6824: PUSH
6825: EMPTY
6826: LIST
6827: LIST
6828: PUSH
6829: LD_VAR 0 7
6833: IN
6834: NOT
6835: AND
6836: PUSH
6837: LD_VAR 0 9
6841: PPUSH
6842: LD_VAR 0 10
6846: PPUSH
6847: CALL_OW 458
6851: NOT
6852: AND
6853: IFFALSE 6895
// tmp := Replace ( tmp , tmp + 1 , [ _x , _y ] ) else
6855: LD_ADDR_VAR 0 7
6859: PUSH
6860: LD_VAR 0 7
6864: PPUSH
6865: LD_VAR 0 7
6869: PUSH
6870: LD_INT 1
6872: PLUS
6873: PPUSH
6874: LD_VAR 0 9
6878: PUSH
6879: LD_VAR 0 10
6883: PUSH
6884: EMPTY
6885: LIST
6886: LIST
6887: PPUSH
6888: CALL_OW 1
6892: ST_TO_ADDR
6893: GO 6909
// i := i - 1 ;
6895: LD_ADDR_VAR 0 5
6899: PUSH
6900: LD_VAR 0 5
6904: PUSH
6905: LD_INT 1
6907: MINUS
6908: ST_TO_ADDR
// end ;
6909: GO 6715
6911: POP
6912: POP
// for i in tmp do
6913: LD_ADDR_VAR 0 5
6917: PUSH
6918: LD_VAR 0 7
6922: PUSH
6923: FOR_IN
6924: IFFALSE 6962
// if not MinerPlaceMine ( unit , i [ 1 ] , i [ 2 ] ) then
6926: LD_VAR 0 1
6930: PPUSH
6931: LD_VAR 0 5
6935: PUSH
6936: LD_INT 1
6938: ARRAY
6939: PPUSH
6940: LD_VAR 0 5
6944: PUSH
6945: LD_INT 2
6947: ARRAY
6948: PPUSH
6949: CALL 5904 0 3
6953: NOT
6954: IFFALSE 6960
// exit ;
6956: POP
6957: POP
6958: GO 6964
6960: GO 6923
6962: POP
6963: POP
// end ;
6964: LD_VAR 0 4
6968: RET
// export function ComBinocular ( unit , x , y ) ; var dist , side , viewRange , _x , _y , _d ; begin
6969: LD_INT 0
6971: PPUSH
6972: PPUSH
6973: PPUSH
6974: PPUSH
6975: PPUSH
6976: PPUSH
6977: PPUSH
// if not GetClass ( unit ) = class_sniper then
6978: LD_VAR 0 1
6982: PPUSH
6983: CALL_OW 257
6987: PUSH
6988: LD_INT 5
6990: EQUAL
6991: NOT
6992: IFFALSE 6996
// exit ;
6994: GO 7384
// dist := 8 ;
6996: LD_ADDR_VAR 0 5
7000: PUSH
7001: LD_INT 8
7003: ST_TO_ADDR
// viewRange := 12 ;
7004: LD_ADDR_VAR 0 7
7008: PUSH
7009: LD_INT 12
7011: ST_TO_ADDR
// side := GetSide ( unit ) ;
7012: LD_ADDR_VAR 0 6
7016: PUSH
7017: LD_VAR 0 1
7021: PPUSH
7022: CALL_OW 255
7026: ST_TO_ADDR
// if GetTech ( tech_opto2 , side ) = state_researched then
7027: LD_INT 61
7029: PPUSH
7030: LD_VAR 0 6
7034: PPUSH
7035: CALL_OW 321
7039: PUSH
7040: LD_INT 2
7042: EQUAL
7043: IFFALSE 7053
// viewRange := 16 ;
7045: LD_ADDR_VAR 0 7
7049: PUSH
7050: LD_INT 16
7052: ST_TO_ADDR
// if GetDistUnitXY ( unit , x , y ) > dist then
7053: LD_VAR 0 1
7057: PPUSH
7058: LD_VAR 0 2
7062: PPUSH
7063: LD_VAR 0 3
7067: PPUSH
7068: CALL_OW 297
7072: PUSH
7073: LD_VAR 0 5
7077: GREATER
7078: IFFALSE 7157
// begin ComMoveXY ( unit , x , y ) ;
7080: LD_VAR 0 1
7084: PPUSH
7085: LD_VAR 0 2
7089: PPUSH
7090: LD_VAR 0 3
7094: PPUSH
7095: CALL_OW 111
// repeat wait ( 0 0$1 ) ;
7099: LD_INT 35
7101: PPUSH
7102: CALL_OW 67
// if not UnitGoingToXY ( unit , x , y ) then
7106: LD_VAR 0 1
7110: PPUSH
7111: LD_VAR 0 2
7115: PPUSH
7116: LD_VAR 0 3
7120: PPUSH
7121: CALL 55828 0 3
7125: NOT
7126: IFFALSE 7130
// exit ;
7128: GO 7384
// until GetDistUnitXY ( unit , x , y ) < dist ;
7130: LD_VAR 0 1
7134: PPUSH
7135: LD_VAR 0 2
7139: PPUSH
7140: LD_VAR 0 3
7144: PPUSH
7145: CALL_OW 297
7149: PUSH
7150: LD_VAR 0 5
7154: LESS
7155: IFFALSE 7099
// end ; ComTurnXY ( unit , x , y ) ;
7157: LD_VAR 0 1
7161: PPUSH
7162: LD_VAR 0 2
7166: PPUSH
7167: LD_VAR 0 3
7171: PPUSH
7172: CALL_OW 118
// wait ( 5 ) ;
7176: LD_INT 5
7178: PPUSH
7179: CALL_OW 67
// _d := GetDir ( unit ) ;
7183: LD_ADDR_VAR 0 10
7187: PUSH
7188: LD_VAR 0 1
7192: PPUSH
7193: CALL_OW 254
7197: ST_TO_ADDR
// _x := ShiftX ( GetX ( unit ) , _d , dist ) ;
7198: LD_ADDR_VAR 0 8
7202: PUSH
7203: LD_VAR 0 1
7207: PPUSH
7208: CALL_OW 250
7212: PPUSH
7213: LD_VAR 0 10
7217: PPUSH
7218: LD_VAR 0 5
7222: PPUSH
7223: CALL_OW 272
7227: ST_TO_ADDR
// _y := ShiftY ( GetY ( unit ) , _d , dist ) ;
7228: LD_ADDR_VAR 0 9
7232: PUSH
7233: LD_VAR 0 1
7237: PPUSH
7238: CALL_OW 251
7242: PPUSH
7243: LD_VAR 0 10
7247: PPUSH
7248: LD_VAR 0 5
7252: PPUSH
7253: CALL_OW 273
7257: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
7258: LD_VAR 0 8
7262: PPUSH
7263: LD_VAR 0 9
7267: PPUSH
7268: CALL_OW 488
7272: NOT
7273: IFFALSE 7277
// exit ;
7275: GO 7384
// ComAnimCustom ( unit , 1 ) ;
7277: LD_VAR 0 1
7281: PPUSH
7282: LD_INT 1
7284: PPUSH
7285: CALL_OW 592
// PlaceSeeing ( _x , _y , side , viewRange ) ;
7289: LD_VAR 0 8
7293: PPUSH
7294: LD_VAR 0 9
7298: PPUSH
7299: LD_VAR 0 6
7303: PPUSH
7304: LD_VAR 0 7
7308: PPUSH
7309: CALL_OW 330
// repeat wait ( 1 ) ;
7313: LD_INT 1
7315: PPUSH
7316: CALL_OW 67
// until IsIdle ( unit ) or HasTask ( unit ) or not IsOk ( unit ) or IsDead ( unit ) ;
7320: LD_VAR 0 1
7324: PPUSH
7325: CALL_OW 316
7329: PUSH
7330: LD_VAR 0 1
7334: PPUSH
7335: CALL_OW 314
7339: OR
7340: PUSH
7341: LD_VAR 0 1
7345: PPUSH
7346: CALL_OW 302
7350: NOT
7351: OR
7352: PUSH
7353: LD_VAR 0 1
7357: PPUSH
7358: CALL_OW 301
7362: OR
7363: IFFALSE 7313
// RemoveSeeing ( _x , _y , side ) ;
7365: LD_VAR 0 8
7369: PPUSH
7370: LD_VAR 0 9
7374: PPUSH
7375: LD_VAR 0 6
7379: PPUSH
7380: CALL_OW 331
// end ; end_of_file
7384: LD_VAR 0 4
7388: RET
// on CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) do begin if p2 = 100 then
7389: LD_VAR 0 2
7393: PUSH
7394: LD_INT 100
7396: EQUAL
7397: IFFALSE 8346
// begin if not StreamModeActive then
7399: LD_EXP 24
7403: NOT
7404: IFFALSE 7414
// StreamModeActive := true ;
7406: LD_ADDR_EXP 24
7410: PUSH
7411: LD_INT 1
7413: ST_TO_ADDR
// if p3 = 0 then
7414: LD_VAR 0 3
7418: PUSH
7419: LD_INT 0
7421: EQUAL
7422: IFFALSE 7428
// InitStreamMode ;
7424: CALL 8504 0 0
// if p3 = 1 then
7428: LD_VAR 0 3
7432: PUSH
7433: LD_INT 1
7435: EQUAL
7436: IFFALSE 7446
// sRocket := true ;
7438: LD_ADDR_EXP 29
7442: PUSH
7443: LD_INT 1
7445: ST_TO_ADDR
// if p3 = 2 then
7446: LD_VAR 0 3
7450: PUSH
7451: LD_INT 2
7453: EQUAL
7454: IFFALSE 7464
// sSpeed := true ;
7456: LD_ADDR_EXP 28
7460: PUSH
7461: LD_INT 1
7463: ST_TO_ADDR
// if p3 = 3 then
7464: LD_VAR 0 3
7468: PUSH
7469: LD_INT 3
7471: EQUAL
7472: IFFALSE 7482
// sEngine := true ;
7474: LD_ADDR_EXP 30
7478: PUSH
7479: LD_INT 1
7481: ST_TO_ADDR
// if p3 = 4 then
7482: LD_VAR 0 3
7486: PUSH
7487: LD_INT 4
7489: EQUAL
7490: IFFALSE 7500
// sSpec := true ;
7492: LD_ADDR_EXP 27
7496: PUSH
7497: LD_INT 1
7499: ST_TO_ADDR
// if p3 = 5 then
7500: LD_VAR 0 3
7504: PUSH
7505: LD_INT 5
7507: EQUAL
7508: IFFALSE 7518
// sLevel := true ;
7510: LD_ADDR_EXP 31
7514: PUSH
7515: LD_INT 1
7517: ST_TO_ADDR
// if p3 = 6 then
7518: LD_VAR 0 3
7522: PUSH
7523: LD_INT 6
7525: EQUAL
7526: IFFALSE 7536
// sArmoury := true ;
7528: LD_ADDR_EXP 32
7532: PUSH
7533: LD_INT 1
7535: ST_TO_ADDR
// if p3 = 7 then
7536: LD_VAR 0 3
7540: PUSH
7541: LD_INT 7
7543: EQUAL
7544: IFFALSE 7554
// sRadar := true ;
7546: LD_ADDR_EXP 33
7550: PUSH
7551: LD_INT 1
7553: ST_TO_ADDR
// if p3 = 8 then
7554: LD_VAR 0 3
7558: PUSH
7559: LD_INT 8
7561: EQUAL
7562: IFFALSE 7572
// sBunker := true ;
7564: LD_ADDR_EXP 34
7568: PUSH
7569: LD_INT 1
7571: ST_TO_ADDR
// if p3 = 9 then
7572: LD_VAR 0 3
7576: PUSH
7577: LD_INT 9
7579: EQUAL
7580: IFFALSE 7590
// sHack := true ;
7582: LD_ADDR_EXP 35
7586: PUSH
7587: LD_INT 1
7589: ST_TO_ADDR
// if p3 = 10 then
7590: LD_VAR 0 3
7594: PUSH
7595: LD_INT 10
7597: EQUAL
7598: IFFALSE 7608
// sFire := true ;
7600: LD_ADDR_EXP 36
7604: PUSH
7605: LD_INT 1
7607: ST_TO_ADDR
// if p3 = 11 then
7608: LD_VAR 0 3
7612: PUSH
7613: LD_INT 11
7615: EQUAL
7616: IFFALSE 7626
// sRefresh := true ;
7618: LD_ADDR_EXP 37
7622: PUSH
7623: LD_INT 1
7625: ST_TO_ADDR
// if p3 = 12 then
7626: LD_VAR 0 3
7630: PUSH
7631: LD_INT 12
7633: EQUAL
7634: IFFALSE 7644
// sExp := true ;
7636: LD_ADDR_EXP 38
7640: PUSH
7641: LD_INT 1
7643: ST_TO_ADDR
// if p3 = 13 then
7644: LD_VAR 0 3
7648: PUSH
7649: LD_INT 13
7651: EQUAL
7652: IFFALSE 7662
// sDepot := true ;
7654: LD_ADDR_EXP 39
7658: PUSH
7659: LD_INT 1
7661: ST_TO_ADDR
// if p3 = 14 then
7662: LD_VAR 0 3
7666: PUSH
7667: LD_INT 14
7669: EQUAL
7670: IFFALSE 7680
// sFlag := true ;
7672: LD_ADDR_EXP 40
7676: PUSH
7677: LD_INT 1
7679: ST_TO_ADDR
// if p3 = 15 then
7680: LD_VAR 0 3
7684: PUSH
7685: LD_INT 15
7687: EQUAL
7688: IFFALSE 7698
// sKamikadze := true ;
7690: LD_ADDR_EXP 48
7694: PUSH
7695: LD_INT 1
7697: ST_TO_ADDR
// if p3 = 16 then
7698: LD_VAR 0 3
7702: PUSH
7703: LD_INT 16
7705: EQUAL
7706: IFFALSE 7716
// sTroll := true ;
7708: LD_ADDR_EXP 49
7712: PUSH
7713: LD_INT 1
7715: ST_TO_ADDR
// if p3 = 17 then
7716: LD_VAR 0 3
7720: PUSH
7721: LD_INT 17
7723: EQUAL
7724: IFFALSE 7734
// sSlow := true ;
7726: LD_ADDR_EXP 50
7730: PUSH
7731: LD_INT 1
7733: ST_TO_ADDR
// if p3 = 18 then
7734: LD_VAR 0 3
7738: PUSH
7739: LD_INT 18
7741: EQUAL
7742: IFFALSE 7752
// sLack := true ;
7744: LD_ADDR_EXP 51
7748: PUSH
7749: LD_INT 1
7751: ST_TO_ADDR
// if p3 = 19 then
7752: LD_VAR 0 3
7756: PUSH
7757: LD_INT 19
7759: EQUAL
7760: IFFALSE 7770
// sTank := true ;
7762: LD_ADDR_EXP 53
7766: PUSH
7767: LD_INT 1
7769: ST_TO_ADDR
// if p3 = 20 then
7770: LD_VAR 0 3
7774: PUSH
7775: LD_INT 20
7777: EQUAL
7778: IFFALSE 7788
// sRemote := true ;
7780: LD_ADDR_EXP 54
7784: PUSH
7785: LD_INT 1
7787: ST_TO_ADDR
// if p3 = 21 then
7788: LD_VAR 0 3
7792: PUSH
7793: LD_INT 21
7795: EQUAL
7796: IFFALSE 7806
// sPowell := true ;
7798: LD_ADDR_EXP 55
7802: PUSH
7803: LD_INT 1
7805: ST_TO_ADDR
// if p3 = 22 then
7806: LD_VAR 0 3
7810: PUSH
7811: LD_INT 22
7813: EQUAL
7814: IFFALSE 7824
// sTeleport := true ;
7816: LD_ADDR_EXP 58
7820: PUSH
7821: LD_INT 1
7823: ST_TO_ADDR
// if p3 = 23 then
7824: LD_VAR 0 3
7828: PUSH
7829: LD_INT 23
7831: EQUAL
7832: IFFALSE 7842
// sOilTower := true ;
7834: LD_ADDR_EXP 60
7838: PUSH
7839: LD_INT 1
7841: ST_TO_ADDR
// if p3 = 24 then
7842: LD_VAR 0 3
7846: PUSH
7847: LD_INT 24
7849: EQUAL
7850: IFFALSE 7860
// sShovel := true ;
7852: LD_ADDR_EXP 61
7856: PUSH
7857: LD_INT 1
7859: ST_TO_ADDR
// if p3 = 25 then
7860: LD_VAR 0 3
7864: PUSH
7865: LD_INT 25
7867: EQUAL
7868: IFFALSE 7878
// sSheik := true ;
7870: LD_ADDR_EXP 62
7874: PUSH
7875: LD_INT 1
7877: ST_TO_ADDR
// if p3 = 26 then
7878: LD_VAR 0 3
7882: PUSH
7883: LD_INT 26
7885: EQUAL
7886: IFFALSE 7896
// sEarthquake := true ;
7888: LD_ADDR_EXP 64
7892: PUSH
7893: LD_INT 1
7895: ST_TO_ADDR
// if p3 = 27 then
7896: LD_VAR 0 3
7900: PUSH
7901: LD_INT 27
7903: EQUAL
7904: IFFALSE 7914
// sAI := true ;
7906: LD_ADDR_EXP 65
7910: PUSH
7911: LD_INT 1
7913: ST_TO_ADDR
// if p3 = 28 then
7914: LD_VAR 0 3
7918: PUSH
7919: LD_INT 28
7921: EQUAL
7922: IFFALSE 7932
// sCargo := true ;
7924: LD_ADDR_EXP 68
7928: PUSH
7929: LD_INT 1
7931: ST_TO_ADDR
// if p3 = 29 then
7932: LD_VAR 0 3
7936: PUSH
7937: LD_INT 29
7939: EQUAL
7940: IFFALSE 7950
// sDLaser := true ;
7942: LD_ADDR_EXP 69
7946: PUSH
7947: LD_INT 1
7949: ST_TO_ADDR
// if p3 = 30 then
7950: LD_VAR 0 3
7954: PUSH
7955: LD_INT 30
7957: EQUAL
7958: IFFALSE 7968
// sExchange := true ;
7960: LD_ADDR_EXP 70
7964: PUSH
7965: LD_INT 1
7967: ST_TO_ADDR
// if p3 = 31 then
7968: LD_VAR 0 3
7972: PUSH
7973: LD_INT 31
7975: EQUAL
7976: IFFALSE 7986
// sFac := true ;
7978: LD_ADDR_EXP 71
7982: PUSH
7983: LD_INT 1
7985: ST_TO_ADDR
// if p3 = 32 then
7986: LD_VAR 0 3
7990: PUSH
7991: LD_INT 32
7993: EQUAL
7994: IFFALSE 8004
// sPower := true ;
7996: LD_ADDR_EXP 72
8000: PUSH
8001: LD_INT 1
8003: ST_TO_ADDR
// if p3 = 33 then
8004: LD_VAR 0 3
8008: PUSH
8009: LD_INT 33
8011: EQUAL
8012: IFFALSE 8022
// sRandom := true ;
8014: LD_ADDR_EXP 73
8018: PUSH
8019: LD_INT 1
8021: ST_TO_ADDR
// if p3 = 34 then
8022: LD_VAR 0 3
8026: PUSH
8027: LD_INT 34
8029: EQUAL
8030: IFFALSE 8040
// sShield := true ;
8032: LD_ADDR_EXP 74
8036: PUSH
8037: LD_INT 1
8039: ST_TO_ADDR
// if p3 = 35 then
8040: LD_VAR 0 3
8044: PUSH
8045: LD_INT 35
8047: EQUAL
8048: IFFALSE 8058
// sTime := true ;
8050: LD_ADDR_EXP 75
8054: PUSH
8055: LD_INT 1
8057: ST_TO_ADDR
// if p3 = 36 then
8058: LD_VAR 0 3
8062: PUSH
8063: LD_INT 36
8065: EQUAL
8066: IFFALSE 8076
// sTools := true ;
8068: LD_ADDR_EXP 76
8072: PUSH
8073: LD_INT 1
8075: ST_TO_ADDR
// if p3 = 101 then
8076: LD_VAR 0 3
8080: PUSH
8081: LD_INT 101
8083: EQUAL
8084: IFFALSE 8094
// sSold := true ;
8086: LD_ADDR_EXP 41
8090: PUSH
8091: LD_INT 1
8093: ST_TO_ADDR
// if p3 = 102 then
8094: LD_VAR 0 3
8098: PUSH
8099: LD_INT 102
8101: EQUAL
8102: IFFALSE 8112
// sDiff := true ;
8104: LD_ADDR_EXP 42
8108: PUSH
8109: LD_INT 1
8111: ST_TO_ADDR
// if p3 = 103 then
8112: LD_VAR 0 3
8116: PUSH
8117: LD_INT 103
8119: EQUAL
8120: IFFALSE 8130
// sFog := true ;
8122: LD_ADDR_EXP 45
8126: PUSH
8127: LD_INT 1
8129: ST_TO_ADDR
// if p3 = 104 then
8130: LD_VAR 0 3
8134: PUSH
8135: LD_INT 104
8137: EQUAL
8138: IFFALSE 8148
// sReset := true ;
8140: LD_ADDR_EXP 46
8144: PUSH
8145: LD_INT 1
8147: ST_TO_ADDR
// if p3 = 105 then
8148: LD_VAR 0 3
8152: PUSH
8153: LD_INT 105
8155: EQUAL
8156: IFFALSE 8166
// sSun := true ;
8158: LD_ADDR_EXP 47
8162: PUSH
8163: LD_INT 1
8165: ST_TO_ADDR
// if p3 = 106 then
8166: LD_VAR 0 3
8170: PUSH
8171: LD_INT 106
8173: EQUAL
8174: IFFALSE 8184
// sTiger := true ;
8176: LD_ADDR_EXP 43
8180: PUSH
8181: LD_INT 1
8183: ST_TO_ADDR
// if p3 = 107 then
8184: LD_VAR 0 3
8188: PUSH
8189: LD_INT 107
8191: EQUAL
8192: IFFALSE 8202
// sBomb := true ;
8194: LD_ADDR_EXP 44
8198: PUSH
8199: LD_INT 1
8201: ST_TO_ADDR
// if p3 = 108 then
8202: LD_VAR 0 3
8206: PUSH
8207: LD_INT 108
8209: EQUAL
8210: IFFALSE 8220
// sWound := true ;
8212: LD_ADDR_EXP 52
8216: PUSH
8217: LD_INT 1
8219: ST_TO_ADDR
// if p3 = 109 then
8220: LD_VAR 0 3
8224: PUSH
8225: LD_INT 109
8227: EQUAL
8228: IFFALSE 8238
// sBetray := true ;
8230: LD_ADDR_EXP 56
8234: PUSH
8235: LD_INT 1
8237: ST_TO_ADDR
// if p3 = 110 then
8238: LD_VAR 0 3
8242: PUSH
8243: LD_INT 110
8245: EQUAL
8246: IFFALSE 8256
// sContamin := true ;
8248: LD_ADDR_EXP 57
8252: PUSH
8253: LD_INT 1
8255: ST_TO_ADDR
// if p3 = 111 then
8256: LD_VAR 0 3
8260: PUSH
8261: LD_INT 111
8263: EQUAL
8264: IFFALSE 8274
// sOil := true ;
8266: LD_ADDR_EXP 59
8270: PUSH
8271: LD_INT 1
8273: ST_TO_ADDR
// if p3 = 112 then
8274: LD_VAR 0 3
8278: PUSH
8279: LD_INT 112
8281: EQUAL
8282: IFFALSE 8292
// sStu := true ;
8284: LD_ADDR_EXP 63
8288: PUSH
8289: LD_INT 1
8291: ST_TO_ADDR
// if p3 = 113 then
8292: LD_VAR 0 3
8296: PUSH
8297: LD_INT 113
8299: EQUAL
8300: IFFALSE 8310
// sBazooka := true ;
8302: LD_ADDR_EXP 66
8306: PUSH
8307: LD_INT 1
8309: ST_TO_ADDR
// if p3 = 114 then
8310: LD_VAR 0 3
8314: PUSH
8315: LD_INT 114
8317: EQUAL
8318: IFFALSE 8328
// sMortar := true ;
8320: LD_ADDR_EXP 67
8324: PUSH
8325: LD_INT 1
8327: ST_TO_ADDR
// if p3 = 115 then
8328: LD_VAR 0 3
8332: PUSH
8333: LD_INT 115
8335: EQUAL
8336: IFFALSE 8346
// sRanger := true ;
8338: LD_ADDR_EXP 77
8342: PUSH
8343: LD_INT 1
8345: ST_TO_ADDR
// end ; if p2 = 101 then
8346: LD_VAR 0 2
8350: PUSH
8351: LD_INT 101
8353: EQUAL
8354: IFFALSE 8482
// begin case p3 of 1 :
8356: LD_VAR 0 3
8360: PUSH
8361: LD_INT 1
8363: DOUBLE
8364: EQUAL
8365: IFTRUE 8369
8367: GO 8376
8369: POP
// hHackUnlimitedResources ; 2 :
8370: CALL 19517 0 0
8374: GO 8482
8376: LD_INT 2
8378: DOUBLE
8379: EQUAL
8380: IFTRUE 8384
8382: GO 8391
8384: POP
// hHackSetLevel10 ; 3 :
8385: CALL 19650 0 0
8389: GO 8482
8391: LD_INT 3
8393: DOUBLE
8394: EQUAL
8395: IFTRUE 8399
8397: GO 8406
8399: POP
// hHackSetLevel10YourUnits ; 4 :
8400: CALL 19735 0 0
8404: GO 8482
8406: LD_INT 4
8408: DOUBLE
8409: EQUAL
8410: IFTRUE 8414
8412: GO 8421
8414: POP
// hHackInvincible ; 5 :
8415: CALL 20183 0 0
8419: GO 8482
8421: LD_INT 5
8423: DOUBLE
8424: EQUAL
8425: IFTRUE 8429
8427: GO 8436
8429: POP
// hHackInvisible ; 6 :
8430: CALL 20294 0 0
8434: GO 8482
8436: LD_INT 6
8438: DOUBLE
8439: EQUAL
8440: IFTRUE 8444
8442: GO 8451
8444: POP
// hHackChangeYourSide ; 7 :
8445: CALL 20351 0 0
8449: GO 8482
8451: LD_INT 7
8453: DOUBLE
8454: EQUAL
8455: IFTRUE 8459
8457: GO 8466
8459: POP
// hHackChangeUnitSide ; 8 :
8460: CALL 20393 0 0
8464: GO 8482
8466: LD_INT 8
8468: DOUBLE
8469: EQUAL
8470: IFTRUE 8474
8472: GO 8481
8474: POP
// hHackFog ; end ;
8475: CALL 20494 0 0
8479: GO 8482
8481: POP
// end ; end ;
8482: PPOPN 6
8484: END
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger ; every 0 0$1 do
8485: GO 8487
8487: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
8488: LD_STRING initStreamRollete();
8490: PPUSH
8491: CALL_OW 559
// InitStreamMode ;
8495: CALL 8504 0 0
// DefineStreamItems ( ) ;
8499: CALL 8944 0 0
// end ;
8503: END
// function InitStreamMode ; begin
8504: LD_INT 0
8506: PPUSH
// streamModeActive := false ;
8507: LD_ADDR_EXP 24
8511: PUSH
8512: LD_INT 0
8514: ST_TO_ADDR
// normalCounter := 36 ;
8515: LD_ADDR_EXP 25
8519: PUSH
8520: LD_INT 36
8522: ST_TO_ADDR
// hardcoreCounter := 16 ;
8523: LD_ADDR_EXP 26
8527: PUSH
8528: LD_INT 16
8530: ST_TO_ADDR
// sRocket := false ;
8531: LD_ADDR_EXP 29
8535: PUSH
8536: LD_INT 0
8538: ST_TO_ADDR
// sSpeed := false ;
8539: LD_ADDR_EXP 28
8543: PUSH
8544: LD_INT 0
8546: ST_TO_ADDR
// sEngine := false ;
8547: LD_ADDR_EXP 30
8551: PUSH
8552: LD_INT 0
8554: ST_TO_ADDR
// sSpec := false ;
8555: LD_ADDR_EXP 27
8559: PUSH
8560: LD_INT 0
8562: ST_TO_ADDR
// sLevel := false ;
8563: LD_ADDR_EXP 31
8567: PUSH
8568: LD_INT 0
8570: ST_TO_ADDR
// sArmoury := false ;
8571: LD_ADDR_EXP 32
8575: PUSH
8576: LD_INT 0
8578: ST_TO_ADDR
// sRadar := false ;
8579: LD_ADDR_EXP 33
8583: PUSH
8584: LD_INT 0
8586: ST_TO_ADDR
// sBunker := false ;
8587: LD_ADDR_EXP 34
8591: PUSH
8592: LD_INT 0
8594: ST_TO_ADDR
// sHack := false ;
8595: LD_ADDR_EXP 35
8599: PUSH
8600: LD_INT 0
8602: ST_TO_ADDR
// sFire := false ;
8603: LD_ADDR_EXP 36
8607: PUSH
8608: LD_INT 0
8610: ST_TO_ADDR
// sRefresh := false ;
8611: LD_ADDR_EXP 37
8615: PUSH
8616: LD_INT 0
8618: ST_TO_ADDR
// sExp := false ;
8619: LD_ADDR_EXP 38
8623: PUSH
8624: LD_INT 0
8626: ST_TO_ADDR
// sDepot := false ;
8627: LD_ADDR_EXP 39
8631: PUSH
8632: LD_INT 0
8634: ST_TO_ADDR
// sFlag := false ;
8635: LD_ADDR_EXP 40
8639: PUSH
8640: LD_INT 0
8642: ST_TO_ADDR
// sKamikadze := false ;
8643: LD_ADDR_EXP 48
8647: PUSH
8648: LD_INT 0
8650: ST_TO_ADDR
// sTroll := false ;
8651: LD_ADDR_EXP 49
8655: PUSH
8656: LD_INT 0
8658: ST_TO_ADDR
// sSlow := false ;
8659: LD_ADDR_EXP 50
8663: PUSH
8664: LD_INT 0
8666: ST_TO_ADDR
// sLack := false ;
8667: LD_ADDR_EXP 51
8671: PUSH
8672: LD_INT 0
8674: ST_TO_ADDR
// sTank := false ;
8675: LD_ADDR_EXP 53
8679: PUSH
8680: LD_INT 0
8682: ST_TO_ADDR
// sRemote := false ;
8683: LD_ADDR_EXP 54
8687: PUSH
8688: LD_INT 0
8690: ST_TO_ADDR
// sPowell := false ;
8691: LD_ADDR_EXP 55
8695: PUSH
8696: LD_INT 0
8698: ST_TO_ADDR
// sTeleport := false ;
8699: LD_ADDR_EXP 58
8703: PUSH
8704: LD_INT 0
8706: ST_TO_ADDR
// sOilTower := false ;
8707: LD_ADDR_EXP 60
8711: PUSH
8712: LD_INT 0
8714: ST_TO_ADDR
// sShovel := false ;
8715: LD_ADDR_EXP 61
8719: PUSH
8720: LD_INT 0
8722: ST_TO_ADDR
// sSheik := false ;
8723: LD_ADDR_EXP 62
8727: PUSH
8728: LD_INT 0
8730: ST_TO_ADDR
// sEarthquake := false ;
8731: LD_ADDR_EXP 64
8735: PUSH
8736: LD_INT 0
8738: ST_TO_ADDR
// sAI := false ;
8739: LD_ADDR_EXP 65
8743: PUSH
8744: LD_INT 0
8746: ST_TO_ADDR
// sCargo := false ;
8747: LD_ADDR_EXP 68
8751: PUSH
8752: LD_INT 0
8754: ST_TO_ADDR
// sDLaser := false ;
8755: LD_ADDR_EXP 69
8759: PUSH
8760: LD_INT 0
8762: ST_TO_ADDR
// sExchange := false ;
8763: LD_ADDR_EXP 70
8767: PUSH
8768: LD_INT 0
8770: ST_TO_ADDR
// sFac := false ;
8771: LD_ADDR_EXP 71
8775: PUSH
8776: LD_INT 0
8778: ST_TO_ADDR
// sPower := false ;
8779: LD_ADDR_EXP 72
8783: PUSH
8784: LD_INT 0
8786: ST_TO_ADDR
// sRandom := false ;
8787: LD_ADDR_EXP 73
8791: PUSH
8792: LD_INT 0
8794: ST_TO_ADDR
// sShield := false ;
8795: LD_ADDR_EXP 74
8799: PUSH
8800: LD_INT 0
8802: ST_TO_ADDR
// sTime := false ;
8803: LD_ADDR_EXP 75
8807: PUSH
8808: LD_INT 0
8810: ST_TO_ADDR
// sTools := false ;
8811: LD_ADDR_EXP 76
8815: PUSH
8816: LD_INT 0
8818: ST_TO_ADDR
// sSold := false ;
8819: LD_ADDR_EXP 41
8823: PUSH
8824: LD_INT 0
8826: ST_TO_ADDR
// sDiff := false ;
8827: LD_ADDR_EXP 42
8831: PUSH
8832: LD_INT 0
8834: ST_TO_ADDR
// sFog := false ;
8835: LD_ADDR_EXP 45
8839: PUSH
8840: LD_INT 0
8842: ST_TO_ADDR
// sReset := false ;
8843: LD_ADDR_EXP 46
8847: PUSH
8848: LD_INT 0
8850: ST_TO_ADDR
// sSun := false ;
8851: LD_ADDR_EXP 47
8855: PUSH
8856: LD_INT 0
8858: ST_TO_ADDR
// sTiger := false ;
8859: LD_ADDR_EXP 43
8863: PUSH
8864: LD_INT 0
8866: ST_TO_ADDR
// sBomb := false ;
8867: LD_ADDR_EXP 44
8871: PUSH
8872: LD_INT 0
8874: ST_TO_ADDR
// sWound := false ;
8875: LD_ADDR_EXP 52
8879: PUSH
8880: LD_INT 0
8882: ST_TO_ADDR
// sBetray := false ;
8883: LD_ADDR_EXP 56
8887: PUSH
8888: LD_INT 0
8890: ST_TO_ADDR
// sContamin := false ;
8891: LD_ADDR_EXP 57
8895: PUSH
8896: LD_INT 0
8898: ST_TO_ADDR
// sOil := false ;
8899: LD_ADDR_EXP 59
8903: PUSH
8904: LD_INT 0
8906: ST_TO_ADDR
// sStu := false ;
8907: LD_ADDR_EXP 63
8911: PUSH
8912: LD_INT 0
8914: ST_TO_ADDR
// sBazooka := false ;
8915: LD_ADDR_EXP 66
8919: PUSH
8920: LD_INT 0
8922: ST_TO_ADDR
// sMortar := false ;
8923: LD_ADDR_EXP 67
8927: PUSH
8928: LD_INT 0
8930: ST_TO_ADDR
// sRanger := false ;
8931: LD_ADDR_EXP 77
8935: PUSH
8936: LD_INT 0
8938: ST_TO_ADDR
// end ;
8939: LD_VAR 0 1
8943: RET
// function DefineStreamItems ( ) ; var tmp , normal , hardcore , i ; begin
8944: LD_INT 0
8946: PPUSH
8947: PPUSH
8948: PPUSH
8949: PPUSH
8950: PPUSH
// result := [ ] ;
8951: LD_ADDR_VAR 0 1
8955: PUSH
8956: EMPTY
8957: ST_TO_ADDR
// if campaign_id = 1 then
8958: LD_OWVAR 69
8962: PUSH
8963: LD_INT 1
8965: EQUAL
8966: IFFALSE 11904
// begin case mission_number of 1 :
8968: LD_OWVAR 70
8972: PUSH
8973: LD_INT 1
8975: DOUBLE
8976: EQUAL
8977: IFTRUE 8981
8979: GO 9045
8981: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 ] ] ; 2 :
8982: LD_ADDR_VAR 0 1
8986: PUSH
8987: LD_INT 2
8989: PUSH
8990: LD_INT 4
8992: PUSH
8993: LD_INT 11
8995: PUSH
8996: LD_INT 12
8998: PUSH
8999: LD_INT 15
9001: PUSH
9002: LD_INT 16
9004: PUSH
9005: LD_INT 22
9007: PUSH
9008: LD_INT 23
9010: PUSH
9011: LD_INT 26
9013: PUSH
9014: EMPTY
9015: LIST
9016: LIST
9017: LIST
9018: LIST
9019: LIST
9020: LIST
9021: LIST
9022: LIST
9023: LIST
9024: PUSH
9025: LD_INT 101
9027: PUSH
9028: LD_INT 102
9030: PUSH
9031: LD_INT 106
9033: PUSH
9034: EMPTY
9035: LIST
9036: LIST
9037: LIST
9038: PUSH
9039: EMPTY
9040: LIST
9041: LIST
9042: ST_TO_ADDR
9043: GO 11902
9045: LD_INT 2
9047: DOUBLE
9048: EQUAL
9049: IFTRUE 9053
9051: GO 9125
9053: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 3 :
9054: LD_ADDR_VAR 0 1
9058: PUSH
9059: LD_INT 2
9061: PUSH
9062: LD_INT 4
9064: PUSH
9065: LD_INT 11
9067: PUSH
9068: LD_INT 12
9070: PUSH
9071: LD_INT 15
9073: PUSH
9074: LD_INT 16
9076: PUSH
9077: LD_INT 22
9079: PUSH
9080: LD_INT 23
9082: PUSH
9083: LD_INT 26
9085: PUSH
9086: EMPTY
9087: LIST
9088: LIST
9089: LIST
9090: LIST
9091: LIST
9092: LIST
9093: LIST
9094: LIST
9095: LIST
9096: PUSH
9097: LD_INT 101
9099: PUSH
9100: LD_INT 102
9102: PUSH
9103: LD_INT 105
9105: PUSH
9106: LD_INT 106
9108: PUSH
9109: LD_INT 108
9111: PUSH
9112: EMPTY
9113: LIST
9114: LIST
9115: LIST
9116: LIST
9117: LIST
9118: PUSH
9119: EMPTY
9120: LIST
9121: LIST
9122: ST_TO_ADDR
9123: GO 11902
9125: LD_INT 3
9127: DOUBLE
9128: EQUAL
9129: IFTRUE 9133
9131: GO 9209
9133: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 4 :
9134: LD_ADDR_VAR 0 1
9138: PUSH
9139: LD_INT 2
9141: PUSH
9142: LD_INT 4
9144: PUSH
9145: LD_INT 5
9147: PUSH
9148: LD_INT 11
9150: PUSH
9151: LD_INT 12
9153: PUSH
9154: LD_INT 15
9156: PUSH
9157: LD_INT 16
9159: PUSH
9160: LD_INT 22
9162: PUSH
9163: LD_INT 26
9165: PUSH
9166: LD_INT 36
9168: PUSH
9169: EMPTY
9170: LIST
9171: LIST
9172: LIST
9173: LIST
9174: LIST
9175: LIST
9176: LIST
9177: LIST
9178: LIST
9179: LIST
9180: PUSH
9181: LD_INT 101
9183: PUSH
9184: LD_INT 102
9186: PUSH
9187: LD_INT 105
9189: PUSH
9190: LD_INT 106
9192: PUSH
9193: LD_INT 108
9195: PUSH
9196: EMPTY
9197: LIST
9198: LIST
9199: LIST
9200: LIST
9201: LIST
9202: PUSH
9203: EMPTY
9204: LIST
9205: LIST
9206: ST_TO_ADDR
9207: GO 11902
9209: LD_INT 4
9211: DOUBLE
9212: EQUAL
9213: IFTRUE 9217
9215: GO 9301
9217: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 ] ] ; 5 :
9218: LD_ADDR_VAR 0 1
9222: PUSH
9223: LD_INT 2
9225: PUSH
9226: LD_INT 4
9228: PUSH
9229: LD_INT 5
9231: PUSH
9232: LD_INT 8
9234: PUSH
9235: LD_INT 11
9237: PUSH
9238: LD_INT 12
9240: PUSH
9241: LD_INT 15
9243: PUSH
9244: LD_INT 16
9246: PUSH
9247: LD_INT 22
9249: PUSH
9250: LD_INT 23
9252: PUSH
9253: LD_INT 26
9255: PUSH
9256: LD_INT 36
9258: PUSH
9259: EMPTY
9260: LIST
9261: LIST
9262: LIST
9263: LIST
9264: LIST
9265: LIST
9266: LIST
9267: LIST
9268: LIST
9269: LIST
9270: LIST
9271: LIST
9272: PUSH
9273: LD_INT 101
9275: PUSH
9276: LD_INT 102
9278: PUSH
9279: LD_INT 105
9281: PUSH
9282: LD_INT 106
9284: PUSH
9285: LD_INT 108
9287: PUSH
9288: EMPTY
9289: LIST
9290: LIST
9291: LIST
9292: LIST
9293: LIST
9294: PUSH
9295: EMPTY
9296: LIST
9297: LIST
9298: ST_TO_ADDR
9299: GO 11902
9301: LD_INT 5
9303: DOUBLE
9304: EQUAL
9305: IFTRUE 9309
9307: GO 9409
9309: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 6 :
9310: LD_ADDR_VAR 0 1
9314: PUSH
9315: LD_INT 2
9317: PUSH
9318: LD_INT 4
9320: PUSH
9321: LD_INT 5
9323: PUSH
9324: LD_INT 6
9326: PUSH
9327: LD_INT 8
9329: PUSH
9330: LD_INT 11
9332: PUSH
9333: LD_INT 12
9335: PUSH
9336: LD_INT 15
9338: PUSH
9339: LD_INT 16
9341: PUSH
9342: LD_INT 22
9344: PUSH
9345: LD_INT 23
9347: PUSH
9348: LD_INT 25
9350: PUSH
9351: LD_INT 26
9353: PUSH
9354: LD_INT 36
9356: PUSH
9357: EMPTY
9358: LIST
9359: LIST
9360: LIST
9361: LIST
9362: LIST
9363: LIST
9364: LIST
9365: LIST
9366: LIST
9367: LIST
9368: LIST
9369: LIST
9370: LIST
9371: LIST
9372: PUSH
9373: LD_INT 101
9375: PUSH
9376: LD_INT 102
9378: PUSH
9379: LD_INT 105
9381: PUSH
9382: LD_INT 106
9384: PUSH
9385: LD_INT 108
9387: PUSH
9388: LD_INT 109
9390: PUSH
9391: LD_INT 112
9393: PUSH
9394: EMPTY
9395: LIST
9396: LIST
9397: LIST
9398: LIST
9399: LIST
9400: LIST
9401: LIST
9402: PUSH
9403: EMPTY
9404: LIST
9405: LIST
9406: ST_TO_ADDR
9407: GO 11902
9409: LD_INT 6
9411: DOUBLE
9412: EQUAL
9413: IFTRUE 9417
9415: GO 9537
9417: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 ] ] ; 7 :
9418: LD_ADDR_VAR 0 1
9422: PUSH
9423: LD_INT 2
9425: PUSH
9426: LD_INT 4
9428: PUSH
9429: LD_INT 5
9431: PUSH
9432: LD_INT 6
9434: PUSH
9435: LD_INT 8
9437: PUSH
9438: LD_INT 11
9440: PUSH
9441: LD_INT 12
9443: PUSH
9444: LD_INT 15
9446: PUSH
9447: LD_INT 16
9449: PUSH
9450: LD_INT 20
9452: PUSH
9453: LD_INT 21
9455: PUSH
9456: LD_INT 22
9458: PUSH
9459: LD_INT 23
9461: PUSH
9462: LD_INT 25
9464: PUSH
9465: LD_INT 26
9467: PUSH
9468: LD_INT 30
9470: PUSH
9471: LD_INT 31
9473: PUSH
9474: LD_INT 32
9476: PUSH
9477: LD_INT 36
9479: PUSH
9480: EMPTY
9481: LIST
9482: LIST
9483: LIST
9484: LIST
9485: LIST
9486: LIST
9487: LIST
9488: LIST
9489: LIST
9490: LIST
9491: LIST
9492: LIST
9493: LIST
9494: LIST
9495: LIST
9496: LIST
9497: LIST
9498: LIST
9499: LIST
9500: PUSH
9501: LD_INT 101
9503: PUSH
9504: LD_INT 102
9506: PUSH
9507: LD_INT 105
9509: PUSH
9510: LD_INT 106
9512: PUSH
9513: LD_INT 108
9515: PUSH
9516: LD_INT 109
9518: PUSH
9519: LD_INT 112
9521: PUSH
9522: EMPTY
9523: LIST
9524: LIST
9525: LIST
9526: LIST
9527: LIST
9528: LIST
9529: LIST
9530: PUSH
9531: EMPTY
9532: LIST
9533: LIST
9534: ST_TO_ADDR
9535: GO 11902
9537: LD_INT 7
9539: DOUBLE
9540: EQUAL
9541: IFTRUE 9545
9543: GO 9645
9545: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 ] ] ; 8 :
9546: LD_ADDR_VAR 0 1
9550: PUSH
9551: LD_INT 2
9553: PUSH
9554: LD_INT 4
9556: PUSH
9557: LD_INT 5
9559: PUSH
9560: LD_INT 7
9562: PUSH
9563: LD_INT 11
9565: PUSH
9566: LD_INT 12
9568: PUSH
9569: LD_INT 15
9571: PUSH
9572: LD_INT 16
9574: PUSH
9575: LD_INT 20
9577: PUSH
9578: LD_INT 21
9580: PUSH
9581: LD_INT 22
9583: PUSH
9584: LD_INT 23
9586: PUSH
9587: LD_INT 25
9589: PUSH
9590: LD_INT 26
9592: PUSH
9593: EMPTY
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: PUSH
9609: LD_INT 101
9611: PUSH
9612: LD_INT 102
9614: PUSH
9615: LD_INT 103
9617: PUSH
9618: LD_INT 105
9620: PUSH
9621: LD_INT 106
9623: PUSH
9624: LD_INT 108
9626: PUSH
9627: LD_INT 112
9629: PUSH
9630: EMPTY
9631: LIST
9632: LIST
9633: LIST
9634: LIST
9635: LIST
9636: LIST
9637: LIST
9638: PUSH
9639: EMPTY
9640: LIST
9641: LIST
9642: ST_TO_ADDR
9643: GO 11902
9645: LD_INT 8
9647: DOUBLE
9648: EQUAL
9649: IFTRUE 9653
9651: GO 9781
9653: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 ] ] ; 9 :
9654: LD_ADDR_VAR 0 1
9658: PUSH
9659: LD_INT 2
9661: PUSH
9662: LD_INT 4
9664: PUSH
9665: LD_INT 5
9667: PUSH
9668: LD_INT 6
9670: PUSH
9671: LD_INT 7
9673: PUSH
9674: LD_INT 8
9676: PUSH
9677: LD_INT 11
9679: PUSH
9680: LD_INT 12
9682: PUSH
9683: LD_INT 15
9685: PUSH
9686: LD_INT 16
9688: PUSH
9689: LD_INT 20
9691: PUSH
9692: LD_INT 21
9694: PUSH
9695: LD_INT 22
9697: PUSH
9698: LD_INT 23
9700: PUSH
9701: LD_INT 25
9703: PUSH
9704: LD_INT 26
9706: PUSH
9707: LD_INT 30
9709: PUSH
9710: LD_INT 31
9712: PUSH
9713: LD_INT 32
9715: PUSH
9716: LD_INT 36
9718: PUSH
9719: EMPTY
9720: LIST
9721: LIST
9722: LIST
9723: LIST
9724: LIST
9725: LIST
9726: LIST
9727: LIST
9728: LIST
9729: LIST
9730: LIST
9731: LIST
9732: LIST
9733: LIST
9734: LIST
9735: LIST
9736: LIST
9737: LIST
9738: LIST
9739: LIST
9740: PUSH
9741: LD_INT 101
9743: PUSH
9744: LD_INT 102
9746: PUSH
9747: LD_INT 103
9749: PUSH
9750: LD_INT 105
9752: PUSH
9753: LD_INT 106
9755: PUSH
9756: LD_INT 108
9758: PUSH
9759: LD_INT 109
9761: PUSH
9762: LD_INT 112
9764: PUSH
9765: EMPTY
9766: LIST
9767: LIST
9768: LIST
9769: LIST
9770: LIST
9771: LIST
9772: LIST
9773: LIST
9774: PUSH
9775: EMPTY
9776: LIST
9777: LIST
9778: ST_TO_ADDR
9779: GO 11902
9781: LD_INT 9
9783: DOUBLE
9784: EQUAL
9785: IFTRUE 9789
9787: GO 9925
9789: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 ] ] ; 10 :
9790: LD_ADDR_VAR 0 1
9794: PUSH
9795: LD_INT 2
9797: PUSH
9798: LD_INT 4
9800: PUSH
9801: LD_INT 5
9803: PUSH
9804: LD_INT 6
9806: PUSH
9807: LD_INT 7
9809: PUSH
9810: LD_INT 8
9812: PUSH
9813: LD_INT 11
9815: PUSH
9816: LD_INT 12
9818: PUSH
9819: LD_INT 15
9821: PUSH
9822: LD_INT 16
9824: PUSH
9825: LD_INT 20
9827: PUSH
9828: LD_INT 21
9830: PUSH
9831: LD_INT 22
9833: PUSH
9834: LD_INT 23
9836: PUSH
9837: LD_INT 25
9839: PUSH
9840: LD_INT 26
9842: PUSH
9843: LD_INT 28
9845: PUSH
9846: LD_INT 30
9848: PUSH
9849: LD_INT 31
9851: PUSH
9852: LD_INT 32
9854: PUSH
9855: LD_INT 36
9857: PUSH
9858: EMPTY
9859: LIST
9860: LIST
9861: LIST
9862: LIST
9863: LIST
9864: LIST
9865: LIST
9866: LIST
9867: LIST
9868: LIST
9869: LIST
9870: LIST
9871: LIST
9872: LIST
9873: LIST
9874: LIST
9875: LIST
9876: LIST
9877: LIST
9878: LIST
9879: LIST
9880: PUSH
9881: LD_INT 101
9883: PUSH
9884: LD_INT 102
9886: PUSH
9887: LD_INT 103
9889: PUSH
9890: LD_INT 105
9892: PUSH
9893: LD_INT 106
9895: PUSH
9896: LD_INT 108
9898: PUSH
9899: LD_INT 109
9901: PUSH
9902: LD_INT 112
9904: PUSH
9905: LD_INT 114
9907: PUSH
9908: EMPTY
9909: LIST
9910: LIST
9911: LIST
9912: LIST
9913: LIST
9914: LIST
9915: LIST
9916: LIST
9917: LIST
9918: PUSH
9919: EMPTY
9920: LIST
9921: LIST
9922: ST_TO_ADDR
9923: GO 11902
9925: LD_INT 10
9927: DOUBLE
9928: EQUAL
9929: IFTRUE 9933
9931: GO 10117
9933: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 11 :
9934: LD_ADDR_VAR 0 1
9938: PUSH
9939: LD_INT 2
9941: PUSH
9942: LD_INT 4
9944: PUSH
9945: LD_INT 5
9947: PUSH
9948: LD_INT 6
9950: PUSH
9951: LD_INT 7
9953: PUSH
9954: LD_INT 8
9956: PUSH
9957: LD_INT 9
9959: PUSH
9960: LD_INT 10
9962: PUSH
9963: LD_INT 11
9965: PUSH
9966: LD_INT 12
9968: PUSH
9969: LD_INT 13
9971: PUSH
9972: LD_INT 14
9974: PUSH
9975: LD_INT 15
9977: PUSH
9978: LD_INT 16
9980: PUSH
9981: LD_INT 17
9983: PUSH
9984: LD_INT 18
9986: PUSH
9987: LD_INT 19
9989: PUSH
9990: LD_INT 20
9992: PUSH
9993: LD_INT 21
9995: PUSH
9996: LD_INT 22
9998: PUSH
9999: LD_INT 23
10001: PUSH
10002: LD_INT 24
10004: PUSH
10005: LD_INT 25
10007: PUSH
10008: LD_INT 26
10010: PUSH
10011: LD_INT 28
10013: PUSH
10014: LD_INT 30
10016: PUSH
10017: LD_INT 31
10019: PUSH
10020: LD_INT 32
10022: PUSH
10023: LD_INT 36
10025: PUSH
10026: EMPTY
10027: LIST
10028: LIST
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: LIST
10034: LIST
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: LIST
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: LIST
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: PUSH
10057: LD_INT 101
10059: PUSH
10060: LD_INT 102
10062: PUSH
10063: LD_INT 103
10065: PUSH
10066: LD_INT 104
10068: PUSH
10069: LD_INT 105
10071: PUSH
10072: LD_INT 106
10074: PUSH
10075: LD_INT 107
10077: PUSH
10078: LD_INT 108
10080: PUSH
10081: LD_INT 109
10083: PUSH
10084: LD_INT 110
10086: PUSH
10087: LD_INT 111
10089: PUSH
10090: LD_INT 112
10092: PUSH
10093: LD_INT 114
10095: PUSH
10096: EMPTY
10097: LIST
10098: LIST
10099: LIST
10100: LIST
10101: LIST
10102: LIST
10103: LIST
10104: LIST
10105: LIST
10106: LIST
10107: LIST
10108: LIST
10109: LIST
10110: PUSH
10111: EMPTY
10112: LIST
10113: LIST
10114: ST_TO_ADDR
10115: GO 11902
10117: LD_INT 11
10119: DOUBLE
10120: EQUAL
10121: IFTRUE 10125
10123: GO 10317
10125: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 ] ] ; 12 :
10126: LD_ADDR_VAR 0 1
10130: PUSH
10131: LD_INT 2
10133: PUSH
10134: LD_INT 3
10136: PUSH
10137: LD_INT 4
10139: PUSH
10140: LD_INT 5
10142: PUSH
10143: LD_INT 6
10145: PUSH
10146: LD_INT 7
10148: PUSH
10149: LD_INT 8
10151: PUSH
10152: LD_INT 9
10154: PUSH
10155: LD_INT 10
10157: PUSH
10158: LD_INT 11
10160: PUSH
10161: LD_INT 12
10163: PUSH
10164: LD_INT 13
10166: PUSH
10167: LD_INT 14
10169: PUSH
10170: LD_INT 15
10172: PUSH
10173: LD_INT 16
10175: PUSH
10176: LD_INT 17
10178: PUSH
10179: LD_INT 18
10181: PUSH
10182: LD_INT 19
10184: PUSH
10185: LD_INT 20
10187: PUSH
10188: LD_INT 21
10190: PUSH
10191: LD_INT 22
10193: PUSH
10194: LD_INT 23
10196: PUSH
10197: LD_INT 24
10199: PUSH
10200: LD_INT 25
10202: PUSH
10203: LD_INT 26
10205: PUSH
10206: LD_INT 28
10208: PUSH
10209: LD_INT 30
10211: PUSH
10212: LD_INT 31
10214: PUSH
10215: LD_INT 32
10217: PUSH
10218: LD_INT 34
10220: PUSH
10221: LD_INT 36
10223: PUSH
10224: EMPTY
10225: LIST
10226: LIST
10227: LIST
10228: LIST
10229: LIST
10230: LIST
10231: LIST
10232: LIST
10233: LIST
10234: LIST
10235: LIST
10236: LIST
10237: LIST
10238: LIST
10239: LIST
10240: LIST
10241: LIST
10242: LIST
10243: LIST
10244: LIST
10245: LIST
10246: LIST
10247: LIST
10248: LIST
10249: LIST
10250: LIST
10251: LIST
10252: LIST
10253: LIST
10254: LIST
10255: LIST
10256: PUSH
10257: LD_INT 101
10259: PUSH
10260: LD_INT 102
10262: PUSH
10263: LD_INT 103
10265: PUSH
10266: LD_INT 104
10268: PUSH
10269: LD_INT 105
10271: PUSH
10272: LD_INT 106
10274: PUSH
10275: LD_INT 107
10277: PUSH
10278: LD_INT 108
10280: PUSH
10281: LD_INT 109
10283: PUSH
10284: LD_INT 110
10286: PUSH
10287: LD_INT 111
10289: PUSH
10290: LD_INT 112
10292: PUSH
10293: LD_INT 114
10295: PUSH
10296: EMPTY
10297: LIST
10298: LIST
10299: LIST
10300: LIST
10301: LIST
10302: LIST
10303: LIST
10304: LIST
10305: LIST
10306: LIST
10307: LIST
10308: LIST
10309: LIST
10310: PUSH
10311: EMPTY
10312: LIST
10313: LIST
10314: ST_TO_ADDR
10315: GO 11902
10317: LD_INT 12
10319: DOUBLE
10320: EQUAL
10321: IFTRUE 10325
10323: GO 10533
10325: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 13 :
10326: LD_ADDR_VAR 0 1
10330: PUSH
10331: LD_INT 1
10333: PUSH
10334: LD_INT 2
10336: PUSH
10337: LD_INT 3
10339: PUSH
10340: LD_INT 4
10342: PUSH
10343: LD_INT 5
10345: PUSH
10346: LD_INT 6
10348: PUSH
10349: LD_INT 7
10351: PUSH
10352: LD_INT 8
10354: PUSH
10355: LD_INT 9
10357: PUSH
10358: LD_INT 10
10360: PUSH
10361: LD_INT 11
10363: PUSH
10364: LD_INT 12
10366: PUSH
10367: LD_INT 13
10369: PUSH
10370: LD_INT 14
10372: PUSH
10373: LD_INT 15
10375: PUSH
10376: LD_INT 16
10378: PUSH
10379: LD_INT 17
10381: PUSH
10382: LD_INT 18
10384: PUSH
10385: LD_INT 19
10387: PUSH
10388: LD_INT 20
10390: PUSH
10391: LD_INT 21
10393: PUSH
10394: LD_INT 22
10396: PUSH
10397: LD_INT 23
10399: PUSH
10400: LD_INT 24
10402: PUSH
10403: LD_INT 25
10405: PUSH
10406: LD_INT 26
10408: PUSH
10409: LD_INT 27
10411: PUSH
10412: LD_INT 28
10414: PUSH
10415: LD_INT 30
10417: PUSH
10418: LD_INT 31
10420: PUSH
10421: LD_INT 32
10423: PUSH
10424: LD_INT 33
10426: PUSH
10427: LD_INT 34
10429: PUSH
10430: LD_INT 36
10432: PUSH
10433: EMPTY
10434: LIST
10435: LIST
10436: LIST
10437: LIST
10438: LIST
10439: LIST
10440: LIST
10441: LIST
10442: LIST
10443: LIST
10444: LIST
10445: LIST
10446: LIST
10447: LIST
10448: LIST
10449: LIST
10450: LIST
10451: LIST
10452: LIST
10453: LIST
10454: LIST
10455: LIST
10456: LIST
10457: LIST
10458: LIST
10459: LIST
10460: LIST
10461: LIST
10462: LIST
10463: LIST
10464: LIST
10465: LIST
10466: LIST
10467: LIST
10468: PUSH
10469: LD_INT 101
10471: PUSH
10472: LD_INT 102
10474: PUSH
10475: LD_INT 103
10477: PUSH
10478: LD_INT 104
10480: PUSH
10481: LD_INT 105
10483: PUSH
10484: LD_INT 106
10486: PUSH
10487: LD_INT 107
10489: PUSH
10490: LD_INT 108
10492: PUSH
10493: LD_INT 109
10495: PUSH
10496: LD_INT 110
10498: PUSH
10499: LD_INT 111
10501: PUSH
10502: LD_INT 112
10504: PUSH
10505: LD_INT 113
10507: PUSH
10508: LD_INT 114
10510: PUSH
10511: EMPTY
10512: LIST
10513: LIST
10514: LIST
10515: LIST
10516: LIST
10517: LIST
10518: LIST
10519: LIST
10520: LIST
10521: LIST
10522: LIST
10523: LIST
10524: LIST
10525: LIST
10526: PUSH
10527: EMPTY
10528: LIST
10529: LIST
10530: ST_TO_ADDR
10531: GO 11902
10533: LD_INT 13
10535: DOUBLE
10536: EQUAL
10537: IFTRUE 10541
10539: GO 10737
10541: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 14 :
10542: LD_ADDR_VAR 0 1
10546: PUSH
10547: LD_INT 1
10549: PUSH
10550: LD_INT 2
10552: PUSH
10553: LD_INT 3
10555: PUSH
10556: LD_INT 4
10558: PUSH
10559: LD_INT 5
10561: PUSH
10562: LD_INT 8
10564: PUSH
10565: LD_INT 9
10567: PUSH
10568: LD_INT 10
10570: PUSH
10571: LD_INT 11
10573: PUSH
10574: LD_INT 12
10576: PUSH
10577: LD_INT 14
10579: PUSH
10580: LD_INT 15
10582: PUSH
10583: LD_INT 16
10585: PUSH
10586: LD_INT 17
10588: PUSH
10589: LD_INT 18
10591: PUSH
10592: LD_INT 19
10594: PUSH
10595: LD_INT 20
10597: PUSH
10598: LD_INT 21
10600: PUSH
10601: LD_INT 22
10603: PUSH
10604: LD_INT 23
10606: PUSH
10607: LD_INT 24
10609: PUSH
10610: LD_INT 25
10612: PUSH
10613: LD_INT 26
10615: PUSH
10616: LD_INT 27
10618: PUSH
10619: LD_INT 28
10621: PUSH
10622: LD_INT 30
10624: PUSH
10625: LD_INT 31
10627: PUSH
10628: LD_INT 32
10630: PUSH
10631: LD_INT 33
10633: PUSH
10634: LD_INT 34
10636: PUSH
10637: LD_INT 36
10639: PUSH
10640: EMPTY
10641: LIST
10642: LIST
10643: LIST
10644: LIST
10645: LIST
10646: LIST
10647: LIST
10648: LIST
10649: LIST
10650: LIST
10651: LIST
10652: LIST
10653: LIST
10654: LIST
10655: LIST
10656: LIST
10657: LIST
10658: LIST
10659: LIST
10660: LIST
10661: LIST
10662: LIST
10663: LIST
10664: LIST
10665: LIST
10666: LIST
10667: LIST
10668: LIST
10669: LIST
10670: LIST
10671: LIST
10672: PUSH
10673: LD_INT 101
10675: PUSH
10676: LD_INT 102
10678: PUSH
10679: LD_INT 103
10681: PUSH
10682: LD_INT 104
10684: PUSH
10685: LD_INT 105
10687: PUSH
10688: LD_INT 106
10690: PUSH
10691: LD_INT 107
10693: PUSH
10694: LD_INT 108
10696: PUSH
10697: LD_INT 109
10699: PUSH
10700: LD_INT 110
10702: PUSH
10703: LD_INT 111
10705: PUSH
10706: LD_INT 112
10708: PUSH
10709: LD_INT 113
10711: PUSH
10712: LD_INT 114
10714: PUSH
10715: EMPTY
10716: LIST
10717: LIST
10718: LIST
10719: LIST
10720: LIST
10721: LIST
10722: LIST
10723: LIST
10724: LIST
10725: LIST
10726: LIST
10727: LIST
10728: LIST
10729: LIST
10730: PUSH
10731: EMPTY
10732: LIST
10733: LIST
10734: ST_TO_ADDR
10735: GO 11902
10737: LD_INT 14
10739: DOUBLE
10740: EQUAL
10741: IFTRUE 10745
10743: GO 10957
10745: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 15 :
10746: LD_ADDR_VAR 0 1
10750: PUSH
10751: LD_INT 1
10753: PUSH
10754: LD_INT 2
10756: PUSH
10757: LD_INT 3
10759: PUSH
10760: LD_INT 4
10762: PUSH
10763: LD_INT 5
10765: PUSH
10766: LD_INT 6
10768: PUSH
10769: LD_INT 7
10771: PUSH
10772: LD_INT 8
10774: PUSH
10775: LD_INT 9
10777: PUSH
10778: LD_INT 10
10780: PUSH
10781: LD_INT 11
10783: PUSH
10784: LD_INT 12
10786: PUSH
10787: LD_INT 13
10789: PUSH
10790: LD_INT 14
10792: PUSH
10793: LD_INT 15
10795: PUSH
10796: LD_INT 16
10798: PUSH
10799: LD_INT 17
10801: PUSH
10802: LD_INT 18
10804: PUSH
10805: LD_INT 19
10807: PUSH
10808: LD_INT 20
10810: PUSH
10811: LD_INT 21
10813: PUSH
10814: LD_INT 22
10816: PUSH
10817: LD_INT 23
10819: PUSH
10820: LD_INT 24
10822: PUSH
10823: LD_INT 25
10825: PUSH
10826: LD_INT 26
10828: PUSH
10829: LD_INT 27
10831: PUSH
10832: LD_INT 28
10834: PUSH
10835: LD_INT 29
10837: PUSH
10838: LD_INT 30
10840: PUSH
10841: LD_INT 31
10843: PUSH
10844: LD_INT 32
10846: PUSH
10847: LD_INT 33
10849: PUSH
10850: LD_INT 34
10852: PUSH
10853: LD_INT 36
10855: PUSH
10856: EMPTY
10857: LIST
10858: LIST
10859: LIST
10860: LIST
10861: LIST
10862: LIST
10863: LIST
10864: LIST
10865: LIST
10866: LIST
10867: LIST
10868: LIST
10869: LIST
10870: LIST
10871: LIST
10872: LIST
10873: LIST
10874: LIST
10875: LIST
10876: LIST
10877: LIST
10878: LIST
10879: LIST
10880: LIST
10881: LIST
10882: LIST
10883: LIST
10884: LIST
10885: LIST
10886: LIST
10887: LIST
10888: LIST
10889: LIST
10890: LIST
10891: LIST
10892: PUSH
10893: LD_INT 101
10895: PUSH
10896: LD_INT 102
10898: PUSH
10899: LD_INT 103
10901: PUSH
10902: LD_INT 104
10904: PUSH
10905: LD_INT 105
10907: PUSH
10908: LD_INT 106
10910: PUSH
10911: LD_INT 107
10913: PUSH
10914: LD_INT 108
10916: PUSH
10917: LD_INT 109
10919: PUSH
10920: LD_INT 110
10922: PUSH
10923: LD_INT 111
10925: PUSH
10926: LD_INT 112
10928: PUSH
10929: LD_INT 113
10931: PUSH
10932: LD_INT 114
10934: PUSH
10935: EMPTY
10936: LIST
10937: LIST
10938: LIST
10939: LIST
10940: LIST
10941: LIST
10942: LIST
10943: LIST
10944: LIST
10945: LIST
10946: LIST
10947: LIST
10948: LIST
10949: LIST
10950: PUSH
10951: EMPTY
10952: LIST
10953: LIST
10954: ST_TO_ADDR
10955: GO 11902
10957: LD_INT 15
10959: DOUBLE
10960: EQUAL
10961: IFTRUE 10965
10963: GO 11177
10965: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 16 :
10966: LD_ADDR_VAR 0 1
10970: PUSH
10971: LD_INT 1
10973: PUSH
10974: LD_INT 2
10976: PUSH
10977: LD_INT 3
10979: PUSH
10980: LD_INT 4
10982: PUSH
10983: LD_INT 5
10985: PUSH
10986: LD_INT 6
10988: PUSH
10989: LD_INT 7
10991: PUSH
10992: LD_INT 8
10994: PUSH
10995: LD_INT 9
10997: PUSH
10998: LD_INT 10
11000: PUSH
11001: LD_INT 11
11003: PUSH
11004: LD_INT 12
11006: PUSH
11007: LD_INT 13
11009: PUSH
11010: LD_INT 14
11012: PUSH
11013: LD_INT 15
11015: PUSH
11016: LD_INT 16
11018: PUSH
11019: LD_INT 17
11021: PUSH
11022: LD_INT 18
11024: PUSH
11025: LD_INT 19
11027: PUSH
11028: LD_INT 20
11030: PUSH
11031: LD_INT 21
11033: PUSH
11034: LD_INT 22
11036: PUSH
11037: LD_INT 23
11039: PUSH
11040: LD_INT 24
11042: PUSH
11043: LD_INT 25
11045: PUSH
11046: LD_INT 26
11048: PUSH
11049: LD_INT 27
11051: PUSH
11052: LD_INT 28
11054: PUSH
11055: LD_INT 29
11057: PUSH
11058: LD_INT 30
11060: PUSH
11061: LD_INT 31
11063: PUSH
11064: LD_INT 32
11066: PUSH
11067: LD_INT 33
11069: PUSH
11070: LD_INT 34
11072: PUSH
11073: LD_INT 36
11075: PUSH
11076: EMPTY
11077: LIST
11078: LIST
11079: LIST
11080: LIST
11081: LIST
11082: LIST
11083: LIST
11084: LIST
11085: LIST
11086: LIST
11087: LIST
11088: LIST
11089: LIST
11090: LIST
11091: LIST
11092: LIST
11093: LIST
11094: LIST
11095: LIST
11096: LIST
11097: LIST
11098: LIST
11099: LIST
11100: LIST
11101: LIST
11102: LIST
11103: LIST
11104: LIST
11105: LIST
11106: LIST
11107: LIST
11108: LIST
11109: LIST
11110: LIST
11111: LIST
11112: PUSH
11113: LD_INT 101
11115: PUSH
11116: LD_INT 102
11118: PUSH
11119: LD_INT 103
11121: PUSH
11122: LD_INT 104
11124: PUSH
11125: LD_INT 105
11127: PUSH
11128: LD_INT 106
11130: PUSH
11131: LD_INT 107
11133: PUSH
11134: LD_INT 108
11136: PUSH
11137: LD_INT 109
11139: PUSH
11140: LD_INT 110
11142: PUSH
11143: LD_INT 111
11145: PUSH
11146: LD_INT 112
11148: PUSH
11149: LD_INT 113
11151: PUSH
11152: LD_INT 114
11154: PUSH
11155: EMPTY
11156: LIST
11157: LIST
11158: LIST
11159: LIST
11160: LIST
11161: LIST
11162: LIST
11163: LIST
11164: LIST
11165: LIST
11166: LIST
11167: LIST
11168: LIST
11169: LIST
11170: PUSH
11171: EMPTY
11172: LIST
11173: LIST
11174: ST_TO_ADDR
11175: GO 11902
11177: LD_INT 16
11179: DOUBLE
11180: EQUAL
11181: IFTRUE 11185
11183: GO 11309
11185: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 ] ] ; 17 :
11186: LD_ADDR_VAR 0 1
11190: PUSH
11191: LD_INT 2
11193: PUSH
11194: LD_INT 4
11196: PUSH
11197: LD_INT 5
11199: PUSH
11200: LD_INT 7
11202: PUSH
11203: LD_INT 11
11205: PUSH
11206: LD_INT 12
11208: PUSH
11209: LD_INT 15
11211: PUSH
11212: LD_INT 16
11214: PUSH
11215: LD_INT 20
11217: PUSH
11218: LD_INT 21
11220: PUSH
11221: LD_INT 22
11223: PUSH
11224: LD_INT 23
11226: PUSH
11227: LD_INT 25
11229: PUSH
11230: LD_INT 26
11232: PUSH
11233: LD_INT 30
11235: PUSH
11236: LD_INT 31
11238: PUSH
11239: LD_INT 32
11241: PUSH
11242: LD_INT 33
11244: PUSH
11245: LD_INT 34
11247: PUSH
11248: EMPTY
11249: LIST
11250: LIST
11251: LIST
11252: LIST
11253: LIST
11254: LIST
11255: LIST
11256: LIST
11257: LIST
11258: LIST
11259: LIST
11260: LIST
11261: LIST
11262: LIST
11263: LIST
11264: LIST
11265: LIST
11266: LIST
11267: LIST
11268: PUSH
11269: LD_INT 101
11271: PUSH
11272: LD_INT 102
11274: PUSH
11275: LD_INT 103
11277: PUSH
11278: LD_INT 106
11280: PUSH
11281: LD_INT 108
11283: PUSH
11284: LD_INT 112
11286: PUSH
11287: LD_INT 113
11289: PUSH
11290: LD_INT 114
11292: PUSH
11293: EMPTY
11294: LIST
11295: LIST
11296: LIST
11297: LIST
11298: LIST
11299: LIST
11300: LIST
11301: LIST
11302: PUSH
11303: EMPTY
11304: LIST
11305: LIST
11306: ST_TO_ADDR
11307: GO 11902
11309: LD_INT 17
11311: DOUBLE
11312: EQUAL
11313: IFTRUE 11317
11315: GO 11529
11317: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 ] ] ; 18 :
11318: LD_ADDR_VAR 0 1
11322: PUSH
11323: LD_INT 1
11325: PUSH
11326: LD_INT 2
11328: PUSH
11329: LD_INT 3
11331: PUSH
11332: LD_INT 4
11334: PUSH
11335: LD_INT 5
11337: PUSH
11338: LD_INT 6
11340: PUSH
11341: LD_INT 7
11343: PUSH
11344: LD_INT 8
11346: PUSH
11347: LD_INT 9
11349: PUSH
11350: LD_INT 10
11352: PUSH
11353: LD_INT 11
11355: PUSH
11356: LD_INT 12
11358: PUSH
11359: LD_INT 13
11361: PUSH
11362: LD_INT 14
11364: PUSH
11365: LD_INT 15
11367: PUSH
11368: LD_INT 16
11370: PUSH
11371: LD_INT 17
11373: PUSH
11374: LD_INT 18
11376: PUSH
11377: LD_INT 19
11379: PUSH
11380: LD_INT 20
11382: PUSH
11383: LD_INT 21
11385: PUSH
11386: LD_INT 22
11388: PUSH
11389: LD_INT 23
11391: PUSH
11392: LD_INT 24
11394: PUSH
11395: LD_INT 25
11397: PUSH
11398: LD_INT 26
11400: PUSH
11401: LD_INT 27
11403: PUSH
11404: LD_INT 28
11406: PUSH
11407: LD_INT 29
11409: PUSH
11410: LD_INT 30
11412: PUSH
11413: LD_INT 31
11415: PUSH
11416: LD_INT 32
11418: PUSH
11419: LD_INT 33
11421: PUSH
11422: LD_INT 34
11424: PUSH
11425: LD_INT 36
11427: PUSH
11428: EMPTY
11429: LIST
11430: LIST
11431: LIST
11432: LIST
11433: LIST
11434: LIST
11435: LIST
11436: LIST
11437: LIST
11438: LIST
11439: LIST
11440: LIST
11441: LIST
11442: LIST
11443: LIST
11444: LIST
11445: LIST
11446: LIST
11447: LIST
11448: LIST
11449: LIST
11450: LIST
11451: LIST
11452: LIST
11453: LIST
11454: LIST
11455: LIST
11456: LIST
11457: LIST
11458: LIST
11459: LIST
11460: LIST
11461: LIST
11462: LIST
11463: LIST
11464: PUSH
11465: LD_INT 101
11467: PUSH
11468: LD_INT 102
11470: PUSH
11471: LD_INT 103
11473: PUSH
11474: LD_INT 104
11476: PUSH
11477: LD_INT 105
11479: PUSH
11480: LD_INT 106
11482: PUSH
11483: LD_INT 107
11485: PUSH
11486: LD_INT 108
11488: PUSH
11489: LD_INT 109
11491: PUSH
11492: LD_INT 110
11494: PUSH
11495: LD_INT 111
11497: PUSH
11498: LD_INT 112
11500: PUSH
11501: LD_INT 113
11503: PUSH
11504: LD_INT 114
11506: PUSH
11507: EMPTY
11508: LIST
11509: LIST
11510: LIST
11511: LIST
11512: LIST
11513: LIST
11514: LIST
11515: LIST
11516: LIST
11517: LIST
11518: LIST
11519: LIST
11520: LIST
11521: LIST
11522: PUSH
11523: EMPTY
11524: LIST
11525: LIST
11526: ST_TO_ADDR
11527: GO 11902
11529: LD_INT 18
11531: DOUBLE
11532: EQUAL
11533: IFTRUE 11537
11535: GO 11673
11537: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 ] ] ; 19 :
11538: LD_ADDR_VAR 0 1
11542: PUSH
11543: LD_INT 2
11545: PUSH
11546: LD_INT 4
11548: PUSH
11549: LD_INT 5
11551: PUSH
11552: LD_INT 7
11554: PUSH
11555: LD_INT 11
11557: PUSH
11558: LD_INT 12
11560: PUSH
11561: LD_INT 15
11563: PUSH
11564: LD_INT 16
11566: PUSH
11567: LD_INT 20
11569: PUSH
11570: LD_INT 21
11572: PUSH
11573: LD_INT 22
11575: PUSH
11576: LD_INT 23
11578: PUSH
11579: LD_INT 25
11581: PUSH
11582: LD_INT 26
11584: PUSH
11585: LD_INT 30
11587: PUSH
11588: LD_INT 31
11590: PUSH
11591: LD_INT 32
11593: PUSH
11594: LD_INT 33
11596: PUSH
11597: LD_INT 34
11599: PUSH
11600: LD_INT 35
11602: PUSH
11603: LD_INT 36
11605: PUSH
11606: EMPTY
11607: LIST
11608: LIST
11609: LIST
11610: LIST
11611: LIST
11612: LIST
11613: LIST
11614: LIST
11615: LIST
11616: LIST
11617: LIST
11618: LIST
11619: LIST
11620: LIST
11621: LIST
11622: LIST
11623: LIST
11624: LIST
11625: LIST
11626: LIST
11627: LIST
11628: PUSH
11629: LD_INT 101
11631: PUSH
11632: LD_INT 102
11634: PUSH
11635: LD_INT 103
11637: PUSH
11638: LD_INT 106
11640: PUSH
11641: LD_INT 108
11643: PUSH
11644: LD_INT 112
11646: PUSH
11647: LD_INT 113
11649: PUSH
11650: LD_INT 114
11652: PUSH
11653: LD_INT 115
11655: PUSH
11656: EMPTY
11657: LIST
11658: LIST
11659: LIST
11660: LIST
11661: LIST
11662: LIST
11663: LIST
11664: LIST
11665: LIST
11666: PUSH
11667: EMPTY
11668: LIST
11669: LIST
11670: ST_TO_ADDR
11671: GO 11902
11673: LD_INT 19
11675: DOUBLE
11676: EQUAL
11677: IFTRUE 11681
11679: GO 11901
11681: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ; end ;
11682: LD_ADDR_VAR 0 1
11686: PUSH
11687: LD_INT 1
11689: PUSH
11690: LD_INT 2
11692: PUSH
11693: LD_INT 3
11695: PUSH
11696: LD_INT 4
11698: PUSH
11699: LD_INT 5
11701: PUSH
11702: LD_INT 6
11704: PUSH
11705: LD_INT 7
11707: PUSH
11708: LD_INT 8
11710: PUSH
11711: LD_INT 9
11713: PUSH
11714: LD_INT 10
11716: PUSH
11717: LD_INT 11
11719: PUSH
11720: LD_INT 12
11722: PUSH
11723: LD_INT 13
11725: PUSH
11726: LD_INT 14
11728: PUSH
11729: LD_INT 15
11731: PUSH
11732: LD_INT 16
11734: PUSH
11735: LD_INT 17
11737: PUSH
11738: LD_INT 18
11740: PUSH
11741: LD_INT 19
11743: PUSH
11744: LD_INT 20
11746: PUSH
11747: LD_INT 21
11749: PUSH
11750: LD_INT 22
11752: PUSH
11753: LD_INT 23
11755: PUSH
11756: LD_INT 24
11758: PUSH
11759: LD_INT 25
11761: PUSH
11762: LD_INT 26
11764: PUSH
11765: LD_INT 27
11767: PUSH
11768: LD_INT 28
11770: PUSH
11771: LD_INT 29
11773: PUSH
11774: LD_INT 30
11776: PUSH
11777: LD_INT 31
11779: PUSH
11780: LD_INT 32
11782: PUSH
11783: LD_INT 33
11785: PUSH
11786: LD_INT 34
11788: PUSH
11789: LD_INT 35
11791: PUSH
11792: LD_INT 36
11794: PUSH
11795: EMPTY
11796: LIST
11797: LIST
11798: LIST
11799: LIST
11800: LIST
11801: LIST
11802: LIST
11803: LIST
11804: LIST
11805: LIST
11806: LIST
11807: LIST
11808: LIST
11809: LIST
11810: LIST
11811: LIST
11812: LIST
11813: LIST
11814: LIST
11815: LIST
11816: LIST
11817: LIST
11818: LIST
11819: LIST
11820: LIST
11821: LIST
11822: LIST
11823: LIST
11824: LIST
11825: LIST
11826: LIST
11827: LIST
11828: LIST
11829: LIST
11830: LIST
11831: LIST
11832: PUSH
11833: LD_INT 101
11835: PUSH
11836: LD_INT 102
11838: PUSH
11839: LD_INT 103
11841: PUSH
11842: LD_INT 104
11844: PUSH
11845: LD_INT 105
11847: PUSH
11848: LD_INT 106
11850: PUSH
11851: LD_INT 107
11853: PUSH
11854: LD_INT 108
11856: PUSH
11857: LD_INT 109
11859: PUSH
11860: LD_INT 110
11862: PUSH
11863: LD_INT 111
11865: PUSH
11866: LD_INT 112
11868: PUSH
11869: LD_INT 113
11871: PUSH
11872: LD_INT 114
11874: PUSH
11875: LD_INT 115
11877: PUSH
11878: EMPTY
11879: LIST
11880: LIST
11881: LIST
11882: LIST
11883: LIST
11884: LIST
11885: LIST
11886: LIST
11887: LIST
11888: LIST
11889: LIST
11890: LIST
11891: LIST
11892: LIST
11893: LIST
11894: PUSH
11895: EMPTY
11896: LIST
11897: LIST
11898: ST_TO_ADDR
11899: GO 11902
11901: POP
// end else
11902: GO 12121
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 ] ] ;
11904: LD_ADDR_VAR 0 1
11908: PUSH
11909: LD_INT 1
11911: PUSH
11912: LD_INT 2
11914: PUSH
11915: LD_INT 3
11917: PUSH
11918: LD_INT 4
11920: PUSH
11921: LD_INT 5
11923: PUSH
11924: LD_INT 6
11926: PUSH
11927: LD_INT 7
11929: PUSH
11930: LD_INT 8
11932: PUSH
11933: LD_INT 9
11935: PUSH
11936: LD_INT 10
11938: PUSH
11939: LD_INT 11
11941: PUSH
11942: LD_INT 12
11944: PUSH
11945: LD_INT 13
11947: PUSH
11948: LD_INT 14
11950: PUSH
11951: LD_INT 15
11953: PUSH
11954: LD_INT 16
11956: PUSH
11957: LD_INT 17
11959: PUSH
11960: LD_INT 18
11962: PUSH
11963: LD_INT 19
11965: PUSH
11966: LD_INT 20
11968: PUSH
11969: LD_INT 21
11971: PUSH
11972: LD_INT 22
11974: PUSH
11975: LD_INT 23
11977: PUSH
11978: LD_INT 24
11980: PUSH
11981: LD_INT 25
11983: PUSH
11984: LD_INT 26
11986: PUSH
11987: LD_INT 27
11989: PUSH
11990: LD_INT 28
11992: PUSH
11993: LD_INT 29
11995: PUSH
11996: LD_INT 30
11998: PUSH
11999: LD_INT 31
12001: PUSH
12002: LD_INT 32
12004: PUSH
12005: LD_INT 33
12007: PUSH
12008: LD_INT 34
12010: PUSH
12011: LD_INT 35
12013: PUSH
12014: LD_INT 36
12016: PUSH
12017: EMPTY
12018: LIST
12019: LIST
12020: LIST
12021: LIST
12022: LIST
12023: LIST
12024: LIST
12025: LIST
12026: LIST
12027: LIST
12028: LIST
12029: LIST
12030: LIST
12031: LIST
12032: LIST
12033: LIST
12034: LIST
12035: LIST
12036: LIST
12037: LIST
12038: LIST
12039: LIST
12040: LIST
12041: LIST
12042: LIST
12043: LIST
12044: LIST
12045: LIST
12046: LIST
12047: LIST
12048: LIST
12049: LIST
12050: LIST
12051: LIST
12052: LIST
12053: LIST
12054: PUSH
12055: LD_INT 101
12057: PUSH
12058: LD_INT 102
12060: PUSH
12061: LD_INT 103
12063: PUSH
12064: LD_INT 104
12066: PUSH
12067: LD_INT 105
12069: PUSH
12070: LD_INT 106
12072: PUSH
12073: LD_INT 107
12075: PUSH
12076: LD_INT 108
12078: PUSH
12079: LD_INT 109
12081: PUSH
12082: LD_INT 110
12084: PUSH
12085: LD_INT 111
12087: PUSH
12088: LD_INT 112
12090: PUSH
12091: LD_INT 113
12093: PUSH
12094: LD_INT 114
12096: PUSH
12097: LD_INT 115
12099: PUSH
12100: EMPTY
12101: LIST
12102: LIST
12103: LIST
12104: LIST
12105: LIST
12106: LIST
12107: LIST
12108: LIST
12109: LIST
12110: LIST
12111: LIST
12112: LIST
12113: LIST
12114: LIST
12115: LIST
12116: PUSH
12117: EMPTY
12118: LIST
12119: LIST
12120: ST_TO_ADDR
// if result then
12121: LD_VAR 0 1
12125: IFFALSE 12414
// begin normal :=  ;
12127: LD_ADDR_VAR 0 3
12131: PUSH
12132: LD_STRING 
12134: ST_TO_ADDR
// hardcore :=  ;
12135: LD_ADDR_VAR 0 4
12139: PUSH
12140: LD_STRING 
12142: ST_TO_ADDR
// for i = 1 to normalCounter do
12143: LD_ADDR_VAR 0 5
12147: PUSH
12148: DOUBLE
12149: LD_INT 1
12151: DEC
12152: ST_TO_ADDR
12153: LD_EXP 25
12157: PUSH
12158: FOR_TO
12159: IFFALSE 12260
// begin tmp := 0 ;
12161: LD_ADDR_VAR 0 2
12165: PUSH
12166: LD_STRING 0
12168: ST_TO_ADDR
// if result [ 1 ] then
12169: LD_VAR 0 1
12173: PUSH
12174: LD_INT 1
12176: ARRAY
12177: IFFALSE 12242
// if result [ 1 ] [ 1 ] = i then
12179: LD_VAR 0 1
12183: PUSH
12184: LD_INT 1
12186: ARRAY
12187: PUSH
12188: LD_INT 1
12190: ARRAY
12191: PUSH
12192: LD_VAR 0 5
12196: EQUAL
12197: IFFALSE 12242
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
12199: LD_ADDR_VAR 0 1
12203: PUSH
12204: LD_VAR 0 1
12208: PPUSH
12209: LD_INT 1
12211: PPUSH
12212: LD_VAR 0 1
12216: PUSH
12217: LD_INT 1
12219: ARRAY
12220: PPUSH
12221: LD_INT 1
12223: PPUSH
12224: CALL_OW 3
12228: PPUSH
12229: CALL_OW 1
12233: ST_TO_ADDR
// tmp := 1 ;
12234: LD_ADDR_VAR 0 2
12238: PUSH
12239: LD_STRING 1
12241: ST_TO_ADDR
// end ; normal := normal & tmp ;
12242: LD_ADDR_VAR 0 3
12246: PUSH
12247: LD_VAR 0 3
12251: PUSH
12252: LD_VAR 0 2
12256: STR
12257: ST_TO_ADDR
// end ;
12258: GO 12158
12260: POP
12261: POP
// for i = 1 to hardcoreCounter do
12262: LD_ADDR_VAR 0 5
12266: PUSH
12267: DOUBLE
12268: LD_INT 1
12270: DEC
12271: ST_TO_ADDR
12272: LD_EXP 26
12276: PUSH
12277: FOR_TO
12278: IFFALSE 12383
// begin tmp := 0 ;
12280: LD_ADDR_VAR 0 2
12284: PUSH
12285: LD_STRING 0
12287: ST_TO_ADDR
// if result [ 2 ] then
12288: LD_VAR 0 1
12292: PUSH
12293: LD_INT 2
12295: ARRAY
12296: IFFALSE 12365
// if result [ 2 ] [ 1 ] = 100 + i then
12298: LD_VAR 0 1
12302: PUSH
12303: LD_INT 2
12305: ARRAY
12306: PUSH
12307: LD_INT 1
12309: ARRAY
12310: PUSH
12311: LD_INT 100
12313: PUSH
12314: LD_VAR 0 5
12318: PLUS
12319: EQUAL
12320: IFFALSE 12365
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
12322: LD_ADDR_VAR 0 1
12326: PUSH
12327: LD_VAR 0 1
12331: PPUSH
12332: LD_INT 2
12334: PPUSH
12335: LD_VAR 0 1
12339: PUSH
12340: LD_INT 2
12342: ARRAY
12343: PPUSH
12344: LD_INT 1
12346: PPUSH
12347: CALL_OW 3
12351: PPUSH
12352: CALL_OW 1
12356: ST_TO_ADDR
// tmp := 1 ;
12357: LD_ADDR_VAR 0 2
12361: PUSH
12362: LD_STRING 1
12364: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
12365: LD_ADDR_VAR 0 4
12369: PUSH
12370: LD_VAR 0 4
12374: PUSH
12375: LD_VAR 0 2
12379: STR
12380: ST_TO_ADDR
// end ;
12381: GO 12277
12383: POP
12384: POP
// ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & ") ) ;
12385: LD_STRING getStreamItemsFromMission("
12387: PUSH
12388: LD_VAR 0 3
12392: STR
12393: PUSH
12394: LD_STRING ","
12396: STR
12397: PUSH
12398: LD_VAR 0 4
12402: STR
12403: PUSH
12404: LD_STRING ")
12406: STR
12407: PPUSH
12408: CALL_OW 559
// end else
12412: GO 12421
// ToLua ( getStreamItemsFromMission("","") ) ;
12414: LD_STRING getStreamItemsFromMission("","")
12416: PPUSH
12417: CALL_OW 559
// end ;
12421: LD_VAR 0 1
12425: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
12426: LD_EXP 24
12430: PUSH
12431: LD_EXP 29
12435: AND
12436: IFFALSE 12560
12438: GO 12440
12440: DISABLE
12441: LD_INT 0
12443: PPUSH
12444: PPUSH
// begin enable ;
12445: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
12446: LD_ADDR_VAR 0 2
12450: PUSH
12451: LD_INT 22
12453: PUSH
12454: LD_OWVAR 2
12458: PUSH
12459: EMPTY
12460: LIST
12461: LIST
12462: PUSH
12463: LD_INT 2
12465: PUSH
12466: LD_INT 34
12468: PUSH
12469: LD_INT 7
12471: PUSH
12472: EMPTY
12473: LIST
12474: LIST
12475: PUSH
12476: LD_INT 34
12478: PUSH
12479: LD_INT 45
12481: PUSH
12482: EMPTY
12483: LIST
12484: LIST
12485: PUSH
12486: LD_INT 34
12488: PUSH
12489: LD_INT 28
12491: PUSH
12492: EMPTY
12493: LIST
12494: LIST
12495: PUSH
12496: LD_INT 34
12498: PUSH
12499: LD_INT 47
12501: PUSH
12502: EMPTY
12503: LIST
12504: LIST
12505: PUSH
12506: EMPTY
12507: LIST
12508: LIST
12509: LIST
12510: LIST
12511: LIST
12512: PUSH
12513: EMPTY
12514: LIST
12515: LIST
12516: PPUSH
12517: CALL_OW 69
12521: ST_TO_ADDR
// if not tmp then
12522: LD_VAR 0 2
12526: NOT
12527: IFFALSE 12531
// exit ;
12529: GO 12560
// for i in tmp do
12531: LD_ADDR_VAR 0 1
12535: PUSH
12536: LD_VAR 0 2
12540: PUSH
12541: FOR_IN
12542: IFFALSE 12558
// begin SetLives ( i , 0 ) ;
12544: LD_VAR 0 1
12548: PPUSH
12549: LD_INT 0
12551: PPUSH
12552: CALL_OW 234
// end ;
12556: GO 12541
12558: POP
12559: POP
// end ;
12560: PPOPN 2
12562: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
12563: LD_EXP 24
12567: PUSH
12568: LD_EXP 30
12572: AND
12573: IFFALSE 12657
12575: GO 12577
12577: DISABLE
12578: LD_INT 0
12580: PPUSH
12581: PPUSH
// begin enable ;
12582: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
12583: LD_ADDR_VAR 0 2
12587: PUSH
12588: LD_INT 22
12590: PUSH
12591: LD_OWVAR 2
12595: PUSH
12596: EMPTY
12597: LIST
12598: LIST
12599: PUSH
12600: LD_INT 32
12602: PUSH
12603: LD_INT 3
12605: PUSH
12606: EMPTY
12607: LIST
12608: LIST
12609: PUSH
12610: EMPTY
12611: LIST
12612: LIST
12613: PPUSH
12614: CALL_OW 69
12618: ST_TO_ADDR
// if not tmp then
12619: LD_VAR 0 2
12623: NOT
12624: IFFALSE 12628
// exit ;
12626: GO 12657
// for i in tmp do
12628: LD_ADDR_VAR 0 1
12632: PUSH
12633: LD_VAR 0 2
12637: PUSH
12638: FOR_IN
12639: IFFALSE 12655
// begin SetLives ( i , 0 ) ;
12641: LD_VAR 0 1
12645: PPUSH
12646: LD_INT 0
12648: PPUSH
12649: CALL_OW 234
// end ;
12653: GO 12638
12655: POP
12656: POP
// end ;
12657: PPOPN 2
12659: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
12660: LD_EXP 24
12664: PUSH
12665: LD_EXP 27
12669: AND
12670: IFFALSE 12763
12672: GO 12674
12674: DISABLE
12675: LD_INT 0
12677: PPUSH
// begin enable ;
12678: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
12679: LD_ADDR_VAR 0 1
12683: PUSH
12684: LD_INT 22
12686: PUSH
12687: LD_OWVAR 2
12691: PUSH
12692: EMPTY
12693: LIST
12694: LIST
12695: PUSH
12696: LD_INT 2
12698: PUSH
12699: LD_INT 25
12701: PUSH
12702: LD_INT 5
12704: PUSH
12705: EMPTY
12706: LIST
12707: LIST
12708: PUSH
12709: LD_INT 25
12711: PUSH
12712: LD_INT 9
12714: PUSH
12715: EMPTY
12716: LIST
12717: LIST
12718: PUSH
12719: LD_INT 25
12721: PUSH
12722: LD_INT 8
12724: PUSH
12725: EMPTY
12726: LIST
12727: LIST
12728: PUSH
12729: EMPTY
12730: LIST
12731: LIST
12732: LIST
12733: LIST
12734: PUSH
12735: EMPTY
12736: LIST
12737: LIST
12738: PPUSH
12739: CALL_OW 69
12743: PUSH
12744: FOR_IN
12745: IFFALSE 12761
// begin SetClass ( i , 1 ) ;
12747: LD_VAR 0 1
12751: PPUSH
12752: LD_INT 1
12754: PPUSH
12755: CALL_OW 336
// end ;
12759: GO 12744
12761: POP
12762: POP
// end ;
12763: PPOPN 1
12765: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
12766: LD_EXP 24
12770: PUSH
12771: LD_EXP 28
12775: AND
12776: PUSH
12777: LD_OWVAR 65
12781: PUSH
12782: LD_INT 7
12784: LESS
12785: AND
12786: IFFALSE 12800
12788: GO 12790
12790: DISABLE
// begin enable ;
12791: ENABLE
// game_speed := 7 ;
12792: LD_ADDR_OWVAR 65
12796: PUSH
12797: LD_INT 7
12799: ST_TO_ADDR
// end ;
12800: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
12801: LD_EXP 24
12805: PUSH
12806: LD_EXP 31
12810: AND
12811: IFFALSE 13013
12813: GO 12815
12815: DISABLE
12816: LD_INT 0
12818: PPUSH
12819: PPUSH
12820: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
12821: LD_ADDR_VAR 0 3
12825: PUSH
12826: LD_INT 81
12828: PUSH
12829: LD_OWVAR 2
12833: PUSH
12834: EMPTY
12835: LIST
12836: LIST
12837: PUSH
12838: LD_INT 21
12840: PUSH
12841: LD_INT 1
12843: PUSH
12844: EMPTY
12845: LIST
12846: LIST
12847: PUSH
12848: EMPTY
12849: LIST
12850: LIST
12851: PPUSH
12852: CALL_OW 69
12856: ST_TO_ADDR
// if not tmp then
12857: LD_VAR 0 3
12861: NOT
12862: IFFALSE 12866
// exit ;
12864: GO 13013
// if tmp > 5 then
12866: LD_VAR 0 3
12870: PUSH
12871: LD_INT 5
12873: GREATER
12874: IFFALSE 12886
// k := 5 else
12876: LD_ADDR_VAR 0 2
12880: PUSH
12881: LD_INT 5
12883: ST_TO_ADDR
12884: GO 12896
// k := tmp ;
12886: LD_ADDR_VAR 0 2
12890: PUSH
12891: LD_VAR 0 3
12895: ST_TO_ADDR
// for i := 1 to k do
12896: LD_ADDR_VAR 0 1
12900: PUSH
12901: DOUBLE
12902: LD_INT 1
12904: DEC
12905: ST_TO_ADDR
12906: LD_VAR 0 2
12910: PUSH
12911: FOR_TO
12912: IFFALSE 13011
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
12914: LD_VAR 0 3
12918: PUSH
12919: LD_VAR 0 1
12923: ARRAY
12924: PPUSH
12925: LD_VAR 0 1
12929: PUSH
12930: LD_INT 4
12932: MOD
12933: PUSH
12934: LD_INT 1
12936: PLUS
12937: PPUSH
12938: CALL_OW 259
12942: PUSH
12943: LD_INT 10
12945: LESS
12946: IFFALSE 13009
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
12948: LD_VAR 0 3
12952: PUSH
12953: LD_VAR 0 1
12957: ARRAY
12958: PPUSH
12959: LD_VAR 0 1
12963: PUSH
12964: LD_INT 4
12966: MOD
12967: PUSH
12968: LD_INT 1
12970: PLUS
12971: PPUSH
12972: LD_VAR 0 3
12976: PUSH
12977: LD_VAR 0 1
12981: ARRAY
12982: PPUSH
12983: LD_VAR 0 1
12987: PUSH
12988: LD_INT 4
12990: MOD
12991: PUSH
12992: LD_INT 1
12994: PLUS
12995: PPUSH
12996: CALL_OW 259
13000: PUSH
13001: LD_INT 1
13003: PLUS
13004: PPUSH
13005: CALL_OW 237
13009: GO 12911
13011: POP
13012: POP
// end ;
13013: PPOPN 3
13015: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
13016: LD_EXP 24
13020: PUSH
13021: LD_EXP 32
13025: AND
13026: IFFALSE 13046
13028: GO 13030
13030: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
13031: LD_INT 4
13033: PPUSH
13034: LD_OWVAR 2
13038: PPUSH
13039: LD_INT 0
13041: PPUSH
13042: CALL_OW 324
13046: END
// every 0 0$1 trigger StreamModeActive and sShovel do
13047: LD_EXP 24
13051: PUSH
13052: LD_EXP 61
13056: AND
13057: IFFALSE 13077
13059: GO 13061
13061: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
13062: LD_INT 19
13064: PPUSH
13065: LD_OWVAR 2
13069: PPUSH
13070: LD_INT 0
13072: PPUSH
13073: CALL_OW 324
13077: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
13078: LD_EXP 24
13082: PUSH
13083: LD_EXP 33
13087: AND
13088: IFFALSE 13190
13090: GO 13092
13092: DISABLE
13093: LD_INT 0
13095: PPUSH
13096: PPUSH
// begin enable ;
13097: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
13098: LD_ADDR_VAR 0 2
13102: PUSH
13103: LD_INT 22
13105: PUSH
13106: LD_OWVAR 2
13110: PUSH
13111: EMPTY
13112: LIST
13113: LIST
13114: PUSH
13115: LD_INT 2
13117: PUSH
13118: LD_INT 34
13120: PUSH
13121: LD_INT 11
13123: PUSH
13124: EMPTY
13125: LIST
13126: LIST
13127: PUSH
13128: LD_INT 34
13130: PUSH
13131: LD_INT 30
13133: PUSH
13134: EMPTY
13135: LIST
13136: LIST
13137: PUSH
13138: EMPTY
13139: LIST
13140: LIST
13141: LIST
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: PPUSH
13147: CALL_OW 69
13151: ST_TO_ADDR
// if not tmp then
13152: LD_VAR 0 2
13156: NOT
13157: IFFALSE 13161
// exit ;
13159: GO 13190
// for i in tmp do
13161: LD_ADDR_VAR 0 1
13165: PUSH
13166: LD_VAR 0 2
13170: PUSH
13171: FOR_IN
13172: IFFALSE 13188
// begin SetLives ( i , 0 ) ;
13174: LD_VAR 0 1
13178: PPUSH
13179: LD_INT 0
13181: PPUSH
13182: CALL_OW 234
// end ;
13186: GO 13171
13188: POP
13189: POP
// end ;
13190: PPOPN 2
13192: END
// every 0 0$1 trigger StreamModeActive and sBunker do
13193: LD_EXP 24
13197: PUSH
13198: LD_EXP 34
13202: AND
13203: IFFALSE 13223
13205: GO 13207
13207: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
13208: LD_INT 32
13210: PPUSH
13211: LD_OWVAR 2
13215: PPUSH
13216: LD_INT 0
13218: PPUSH
13219: CALL_OW 324
13223: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
13224: LD_EXP 24
13228: PUSH
13229: LD_EXP 35
13233: AND
13234: IFFALSE 13415
13236: GO 13238
13238: DISABLE
13239: LD_INT 0
13241: PPUSH
13242: PPUSH
13243: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
13244: LD_ADDR_VAR 0 2
13248: PUSH
13249: LD_INT 22
13251: PUSH
13252: LD_OWVAR 2
13256: PUSH
13257: EMPTY
13258: LIST
13259: LIST
13260: PUSH
13261: LD_INT 33
13263: PUSH
13264: LD_INT 3
13266: PUSH
13267: EMPTY
13268: LIST
13269: LIST
13270: PUSH
13271: EMPTY
13272: LIST
13273: LIST
13274: PPUSH
13275: CALL_OW 69
13279: ST_TO_ADDR
// if not tmp then
13280: LD_VAR 0 2
13284: NOT
13285: IFFALSE 13289
// exit ;
13287: GO 13415
// side := 0 ;
13289: LD_ADDR_VAR 0 3
13293: PUSH
13294: LD_INT 0
13296: ST_TO_ADDR
// for i := 1 to 8 do
13297: LD_ADDR_VAR 0 1
13301: PUSH
13302: DOUBLE
13303: LD_INT 1
13305: DEC
13306: ST_TO_ADDR
13307: LD_INT 8
13309: PUSH
13310: FOR_TO
13311: IFFALSE 13359
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
13313: LD_OWVAR 2
13317: PUSH
13318: LD_VAR 0 1
13322: NONEQUAL
13323: PUSH
13324: LD_OWVAR 2
13328: PPUSH
13329: LD_VAR 0 1
13333: PPUSH
13334: CALL_OW 81
13338: PUSH
13339: LD_INT 2
13341: EQUAL
13342: AND
13343: IFFALSE 13357
// begin side := i ;
13345: LD_ADDR_VAR 0 3
13349: PUSH
13350: LD_VAR 0 1
13354: ST_TO_ADDR
// break ;
13355: GO 13359
// end ;
13357: GO 13310
13359: POP
13360: POP
// if not side then
13361: LD_VAR 0 3
13365: NOT
13366: IFFALSE 13370
// exit ;
13368: GO 13415
// for i := 1 to tmp do
13370: LD_ADDR_VAR 0 1
13374: PUSH
13375: DOUBLE
13376: LD_INT 1
13378: DEC
13379: ST_TO_ADDR
13380: LD_VAR 0 2
13384: PUSH
13385: FOR_TO
13386: IFFALSE 13413
// if Prob ( 60 ) then
13388: LD_INT 60
13390: PPUSH
13391: CALL_OW 13
13395: IFFALSE 13411
// SetSide ( i , side ) ;
13397: LD_VAR 0 1
13401: PPUSH
13402: LD_VAR 0 3
13406: PPUSH
13407: CALL_OW 235
13411: GO 13385
13413: POP
13414: POP
// end ;
13415: PPOPN 3
13417: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
13418: LD_EXP 24
13422: PUSH
13423: LD_EXP 37
13427: AND
13428: IFFALSE 13547
13430: GO 13432
13432: DISABLE
13433: LD_INT 0
13435: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
13436: LD_ADDR_VAR 0 1
13440: PUSH
13441: LD_INT 22
13443: PUSH
13444: LD_OWVAR 2
13448: PUSH
13449: EMPTY
13450: LIST
13451: LIST
13452: PUSH
13453: LD_INT 21
13455: PUSH
13456: LD_INT 1
13458: PUSH
13459: EMPTY
13460: LIST
13461: LIST
13462: PUSH
13463: LD_INT 3
13465: PUSH
13466: LD_INT 23
13468: PUSH
13469: LD_INT 0
13471: PUSH
13472: EMPTY
13473: LIST
13474: LIST
13475: PUSH
13476: EMPTY
13477: LIST
13478: LIST
13479: PUSH
13480: EMPTY
13481: LIST
13482: LIST
13483: LIST
13484: PPUSH
13485: CALL_OW 69
13489: PUSH
13490: FOR_IN
13491: IFFALSE 13545
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
13493: LD_VAR 0 1
13497: PPUSH
13498: CALL_OW 257
13502: PUSH
13503: LD_INT 1
13505: PUSH
13506: LD_INT 2
13508: PUSH
13509: LD_INT 3
13511: PUSH
13512: LD_INT 4
13514: PUSH
13515: EMPTY
13516: LIST
13517: LIST
13518: LIST
13519: LIST
13520: IN
13521: IFFALSE 13543
// SetClass ( un , rand ( 1 , 4 ) ) ;
13523: LD_VAR 0 1
13527: PPUSH
13528: LD_INT 1
13530: PPUSH
13531: LD_INT 4
13533: PPUSH
13534: CALL_OW 12
13538: PPUSH
13539: CALL_OW 336
13543: GO 13490
13545: POP
13546: POP
// end ;
13547: PPOPN 1
13549: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
13550: LD_EXP 24
13554: PUSH
13555: LD_EXP 36
13559: AND
13560: IFFALSE 13639
13562: GO 13564
13564: DISABLE
13565: LD_INT 0
13567: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13568: LD_ADDR_VAR 0 1
13572: PUSH
13573: LD_INT 22
13575: PUSH
13576: LD_OWVAR 2
13580: PUSH
13581: EMPTY
13582: LIST
13583: LIST
13584: PUSH
13585: LD_INT 21
13587: PUSH
13588: LD_INT 3
13590: PUSH
13591: EMPTY
13592: LIST
13593: LIST
13594: PUSH
13595: EMPTY
13596: LIST
13597: LIST
13598: PPUSH
13599: CALL_OW 69
13603: ST_TO_ADDR
// if not tmp then
13604: LD_VAR 0 1
13608: NOT
13609: IFFALSE 13613
// exit ;
13611: GO 13639
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
13613: LD_VAR 0 1
13617: PUSH
13618: LD_INT 1
13620: PPUSH
13621: LD_VAR 0 1
13625: PPUSH
13626: CALL_OW 12
13630: ARRAY
13631: PPUSH
13632: LD_INT 100
13634: PPUSH
13635: CALL_OW 234
// end ;
13639: PPOPN 1
13641: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
13642: LD_EXP 24
13646: PUSH
13647: LD_EXP 38
13651: AND
13652: IFFALSE 13750
13654: GO 13656
13656: DISABLE
13657: LD_INT 0
13659: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
13660: LD_ADDR_VAR 0 1
13664: PUSH
13665: LD_INT 22
13667: PUSH
13668: LD_OWVAR 2
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: PUSH
13677: LD_INT 21
13679: PUSH
13680: LD_INT 1
13682: PUSH
13683: EMPTY
13684: LIST
13685: LIST
13686: PUSH
13687: EMPTY
13688: LIST
13689: LIST
13690: PPUSH
13691: CALL_OW 69
13695: ST_TO_ADDR
// if not tmp then
13696: LD_VAR 0 1
13700: NOT
13701: IFFALSE 13705
// exit ;
13703: GO 13750
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
13705: LD_VAR 0 1
13709: PUSH
13710: LD_INT 1
13712: PPUSH
13713: LD_VAR 0 1
13717: PPUSH
13718: CALL_OW 12
13722: ARRAY
13723: PPUSH
13724: LD_INT 1
13726: PPUSH
13727: LD_INT 4
13729: PPUSH
13730: CALL_OW 12
13734: PPUSH
13735: LD_INT 3000
13737: PPUSH
13738: LD_INT 9000
13740: PPUSH
13741: CALL_OW 12
13745: PPUSH
13746: CALL_OW 492
// end ;
13750: PPOPN 1
13752: END
// every 0 0$1 trigger StreamModeActive and sDepot do
13753: LD_EXP 24
13757: PUSH
13758: LD_EXP 39
13762: AND
13763: IFFALSE 13783
13765: GO 13767
13767: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
13768: LD_INT 1
13770: PPUSH
13771: LD_OWVAR 2
13775: PPUSH
13776: LD_INT 0
13778: PPUSH
13779: CALL_OW 324
13783: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
13784: LD_EXP 24
13788: PUSH
13789: LD_EXP 40
13793: AND
13794: IFFALSE 13877
13796: GO 13798
13798: DISABLE
13799: LD_INT 0
13801: PPUSH
13802: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
13803: LD_ADDR_VAR 0 2
13807: PUSH
13808: LD_INT 22
13810: PUSH
13811: LD_OWVAR 2
13815: PUSH
13816: EMPTY
13817: LIST
13818: LIST
13819: PUSH
13820: LD_INT 21
13822: PUSH
13823: LD_INT 3
13825: PUSH
13826: EMPTY
13827: LIST
13828: LIST
13829: PUSH
13830: EMPTY
13831: LIST
13832: LIST
13833: PPUSH
13834: CALL_OW 69
13838: ST_TO_ADDR
// if not tmp then
13839: LD_VAR 0 2
13843: NOT
13844: IFFALSE 13848
// exit ;
13846: GO 13877
// for i in tmp do
13848: LD_ADDR_VAR 0 1
13852: PUSH
13853: LD_VAR 0 2
13857: PUSH
13858: FOR_IN
13859: IFFALSE 13875
// SetBLevel ( i , 10 ) ;
13861: LD_VAR 0 1
13865: PPUSH
13866: LD_INT 10
13868: PPUSH
13869: CALL_OW 241
13873: GO 13858
13875: POP
13876: POP
// end ;
13877: PPOPN 2
13879: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
13880: LD_EXP 24
13884: PUSH
13885: LD_EXP 41
13889: AND
13890: IFFALSE 14001
13892: GO 13894
13894: DISABLE
13895: LD_INT 0
13897: PPUSH
13898: PPUSH
13899: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
13900: LD_ADDR_VAR 0 3
13904: PUSH
13905: LD_INT 22
13907: PUSH
13908: LD_OWVAR 2
13912: PUSH
13913: EMPTY
13914: LIST
13915: LIST
13916: PUSH
13917: LD_INT 25
13919: PUSH
13920: LD_INT 1
13922: PUSH
13923: EMPTY
13924: LIST
13925: LIST
13926: PUSH
13927: EMPTY
13928: LIST
13929: LIST
13930: PPUSH
13931: CALL_OW 69
13935: ST_TO_ADDR
// if not tmp then
13936: LD_VAR 0 3
13940: NOT
13941: IFFALSE 13945
// exit ;
13943: GO 14001
// un := tmp [ rand ( 1 , tmp ) ] ;
13945: LD_ADDR_VAR 0 2
13949: PUSH
13950: LD_VAR 0 3
13954: PUSH
13955: LD_INT 1
13957: PPUSH
13958: LD_VAR 0 3
13962: PPUSH
13963: CALL_OW 12
13967: ARRAY
13968: ST_TO_ADDR
// if Crawls ( un ) then
13969: LD_VAR 0 2
13973: PPUSH
13974: CALL_OW 318
13978: IFFALSE 13989
// ComWalk ( un ) ;
13980: LD_VAR 0 2
13984: PPUSH
13985: CALL_OW 138
// SetClass ( un , class_sniper ) ;
13989: LD_VAR 0 2
13993: PPUSH
13994: LD_INT 5
13996: PPUSH
13997: CALL_OW 336
// end ;
14001: PPOPN 3
14003: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 3 do
14004: LD_EXP 24
14008: PUSH
14009: LD_EXP 42
14013: AND
14014: PUSH
14015: LD_OWVAR 67
14019: PUSH
14020: LD_INT 3
14022: LESS
14023: AND
14024: IFFALSE 14043
14026: GO 14028
14028: DISABLE
// Difficulty := Difficulty + 1 ;
14029: LD_ADDR_OWVAR 67
14033: PUSH
14034: LD_OWVAR 67
14038: PUSH
14039: LD_INT 1
14041: PLUS
14042: ST_TO_ADDR
14043: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
14044: LD_EXP 24
14048: PUSH
14049: LD_EXP 43
14053: AND
14054: IFFALSE 14157
14056: GO 14058
14058: DISABLE
14059: LD_INT 0
14061: PPUSH
// begin for i := 1 to 5 do
14062: LD_ADDR_VAR 0 1
14066: PUSH
14067: DOUBLE
14068: LD_INT 1
14070: DEC
14071: ST_TO_ADDR
14072: LD_INT 5
14074: PUSH
14075: FOR_TO
14076: IFFALSE 14155
// begin uc_nation := nation_nature ;
14078: LD_ADDR_OWVAR 21
14082: PUSH
14083: LD_INT 0
14085: ST_TO_ADDR
// uc_side := 0 ;
14086: LD_ADDR_OWVAR 20
14090: PUSH
14091: LD_INT 0
14093: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14094: LD_ADDR_OWVAR 29
14098: PUSH
14099: LD_INT 12
14101: PUSH
14102: LD_INT 12
14104: PUSH
14105: EMPTY
14106: LIST
14107: LIST
14108: ST_TO_ADDR
// hc_agressivity := 20 ;
14109: LD_ADDR_OWVAR 35
14113: PUSH
14114: LD_INT 20
14116: ST_TO_ADDR
// hc_class := class_tiger ;
14117: LD_ADDR_OWVAR 28
14121: PUSH
14122: LD_INT 14
14124: ST_TO_ADDR
// hc_gallery :=  ;
14125: LD_ADDR_OWVAR 33
14129: PUSH
14130: LD_STRING 
14132: ST_TO_ADDR
// hc_name :=  ;
14133: LD_ADDR_OWVAR 26
14137: PUSH
14138: LD_STRING 
14140: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
14141: CALL_OW 44
14145: PPUSH
14146: LD_INT 0
14148: PPUSH
14149: CALL_OW 51
// end ;
14153: GO 14075
14155: POP
14156: POP
// end ;
14157: PPOPN 1
14159: END
// every 0 0$1 trigger StreamModeActive and sBomb do
14160: LD_EXP 24
14164: PUSH
14165: LD_EXP 44
14169: AND
14170: IFFALSE 14179
14172: GO 14174
14174: DISABLE
// StreamSibBomb ;
14175: CALL 14180 0 0
14179: END
// export function StreamSibBomb ; var i , x , y ; begin
14180: LD_INT 0
14182: PPUSH
14183: PPUSH
14184: PPUSH
14185: PPUSH
// result := false ;
14186: LD_ADDR_VAR 0 1
14190: PUSH
14191: LD_INT 0
14193: ST_TO_ADDR
// for i := 1 to 16 do
14194: LD_ADDR_VAR 0 2
14198: PUSH
14199: DOUBLE
14200: LD_INT 1
14202: DEC
14203: ST_TO_ADDR
14204: LD_INT 16
14206: PUSH
14207: FOR_TO
14208: IFFALSE 14407
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14210: LD_ADDR_VAR 0 3
14214: PUSH
14215: LD_INT 10
14217: PUSH
14218: LD_INT 20
14220: PUSH
14221: LD_INT 30
14223: PUSH
14224: LD_INT 40
14226: PUSH
14227: LD_INT 50
14229: PUSH
14230: LD_INT 60
14232: PUSH
14233: LD_INT 70
14235: PUSH
14236: LD_INT 80
14238: PUSH
14239: LD_INT 90
14241: PUSH
14242: LD_INT 100
14244: PUSH
14245: LD_INT 110
14247: PUSH
14248: LD_INT 120
14250: PUSH
14251: LD_INT 130
14253: PUSH
14254: LD_INT 140
14256: PUSH
14257: LD_INT 150
14259: PUSH
14260: EMPTY
14261: LIST
14262: LIST
14263: LIST
14264: LIST
14265: LIST
14266: LIST
14267: LIST
14268: LIST
14269: LIST
14270: LIST
14271: LIST
14272: LIST
14273: LIST
14274: LIST
14275: LIST
14276: PUSH
14277: LD_INT 1
14279: PPUSH
14280: LD_INT 15
14282: PPUSH
14283: CALL_OW 12
14287: ARRAY
14288: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
14289: LD_ADDR_VAR 0 4
14293: PUSH
14294: LD_INT 10
14296: PUSH
14297: LD_INT 20
14299: PUSH
14300: LD_INT 30
14302: PUSH
14303: LD_INT 40
14305: PUSH
14306: LD_INT 50
14308: PUSH
14309: LD_INT 60
14311: PUSH
14312: LD_INT 70
14314: PUSH
14315: LD_INT 80
14317: PUSH
14318: LD_INT 90
14320: PUSH
14321: LD_INT 100
14323: PUSH
14324: LD_INT 110
14326: PUSH
14327: LD_INT 120
14329: PUSH
14330: LD_INT 130
14332: PUSH
14333: LD_INT 140
14335: PUSH
14336: LD_INT 150
14338: PUSH
14339: EMPTY
14340: LIST
14341: LIST
14342: LIST
14343: LIST
14344: LIST
14345: LIST
14346: LIST
14347: LIST
14348: LIST
14349: LIST
14350: LIST
14351: LIST
14352: LIST
14353: LIST
14354: LIST
14355: PUSH
14356: LD_INT 1
14358: PPUSH
14359: LD_INT 15
14361: PPUSH
14362: CALL_OW 12
14366: ARRAY
14367: ST_TO_ADDR
// if ValidHex ( x , y ) then
14368: LD_VAR 0 3
14372: PPUSH
14373: LD_VAR 0 4
14377: PPUSH
14378: CALL_OW 488
14382: IFFALSE 14405
// begin result := [ x , y ] ;
14384: LD_ADDR_VAR 0 1
14388: PUSH
14389: LD_VAR 0 3
14393: PUSH
14394: LD_VAR 0 4
14398: PUSH
14399: EMPTY
14400: LIST
14401: LIST
14402: ST_TO_ADDR
// break ;
14403: GO 14407
// end ; end ;
14405: GO 14207
14407: POP
14408: POP
// if result then
14409: LD_VAR 0 1
14413: IFFALSE 14473
// begin ToLua ( playSibBomb() ) ;
14415: LD_STRING playSibBomb()
14417: PPUSH
14418: CALL_OW 559
// wait ( 0 0$14 ) ;
14422: LD_INT 490
14424: PPUSH
14425: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
14429: LD_VAR 0 1
14433: PUSH
14434: LD_INT 1
14436: ARRAY
14437: PPUSH
14438: LD_VAR 0 1
14442: PUSH
14443: LD_INT 2
14445: ARRAY
14446: PPUSH
14447: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
14451: LD_VAR 0 1
14455: PUSH
14456: LD_INT 1
14458: ARRAY
14459: PPUSH
14460: LD_VAR 0 1
14464: PUSH
14465: LD_INT 2
14467: ARRAY
14468: PPUSH
14469: CALL_OW 429
// end ; end ;
14473: LD_VAR 0 1
14477: RET
// every 0 0$1 trigger StreamModeActive and sReset do
14478: LD_EXP 24
14482: PUSH
14483: LD_EXP 46
14487: AND
14488: IFFALSE 14500
14490: GO 14492
14492: DISABLE
// YouLost (  ) ;
14493: LD_STRING 
14495: PPUSH
14496: CALL_OW 104
14500: END
// every 0 0$1 trigger StreamModeActive and sFog do
14501: LD_EXP 24
14505: PUSH
14506: LD_EXP 45
14510: AND
14511: IFFALSE 14525
14513: GO 14515
14515: DISABLE
// FogOff ( your_side ) ;
14516: LD_OWVAR 2
14520: PPUSH
14521: CALL_OW 344
14525: END
// every 0 0$1 trigger StreamModeActive and sSun do
14526: LD_EXP 24
14530: PUSH
14531: LD_EXP 47
14535: AND
14536: IFFALSE 14564
14538: GO 14540
14540: DISABLE
// begin solar_recharge_percent := 0 ;
14541: LD_ADDR_OWVAR 79
14545: PUSH
14546: LD_INT 0
14548: ST_TO_ADDR
// wait ( 5 5$00 ) ;
14549: LD_INT 10500
14551: PPUSH
14552: CALL_OW 67
// solar_recharge_percent := 100 ;
14556: LD_ADDR_OWVAR 79
14560: PUSH
14561: LD_INT 100
14563: ST_TO_ADDR
// end ;
14564: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
14565: LD_EXP 24
14569: PUSH
14570: LD_EXP 48
14574: AND
14575: IFFALSE 14814
14577: GO 14579
14579: DISABLE
14580: LD_INT 0
14582: PPUSH
14583: PPUSH
14584: PPUSH
// begin tmp := [ ] ;
14585: LD_ADDR_VAR 0 3
14589: PUSH
14590: EMPTY
14591: ST_TO_ADDR
// for i := 1 to 6 do
14592: LD_ADDR_VAR 0 1
14596: PUSH
14597: DOUBLE
14598: LD_INT 1
14600: DEC
14601: ST_TO_ADDR
14602: LD_INT 6
14604: PUSH
14605: FOR_TO
14606: IFFALSE 14711
// begin uc_nation := nation_nature ;
14608: LD_ADDR_OWVAR 21
14612: PUSH
14613: LD_INT 0
14615: ST_TO_ADDR
// uc_side := 0 ;
14616: LD_ADDR_OWVAR 20
14620: PUSH
14621: LD_INT 0
14623: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
14624: LD_ADDR_OWVAR 29
14628: PUSH
14629: LD_INT 12
14631: PUSH
14632: LD_INT 12
14634: PUSH
14635: EMPTY
14636: LIST
14637: LIST
14638: ST_TO_ADDR
// hc_agressivity := 20 ;
14639: LD_ADDR_OWVAR 35
14643: PUSH
14644: LD_INT 20
14646: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
14647: LD_ADDR_OWVAR 28
14651: PUSH
14652: LD_INT 17
14654: ST_TO_ADDR
// hc_gallery :=  ;
14655: LD_ADDR_OWVAR 33
14659: PUSH
14660: LD_STRING 
14662: ST_TO_ADDR
// hc_name :=  ;
14663: LD_ADDR_OWVAR 26
14667: PUSH
14668: LD_STRING 
14670: ST_TO_ADDR
// un := CreateHuman ;
14671: LD_ADDR_VAR 0 2
14675: PUSH
14676: CALL_OW 44
14680: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
14681: LD_VAR 0 2
14685: PPUSH
14686: LD_INT 1
14688: PPUSH
14689: CALL_OW 51
// tmp := tmp ^ un ;
14693: LD_ADDR_VAR 0 3
14697: PUSH
14698: LD_VAR 0 3
14702: PUSH
14703: LD_VAR 0 2
14707: ADD
14708: ST_TO_ADDR
// end ;
14709: GO 14605
14711: POP
14712: POP
// repeat wait ( 0 0$1 ) ;
14713: LD_INT 35
14715: PPUSH
14716: CALL_OW 67
// for un in tmp do
14720: LD_ADDR_VAR 0 2
14724: PUSH
14725: LD_VAR 0 3
14729: PUSH
14730: FOR_IN
14731: IFFALSE 14805
// begin if IsDead ( un ) then
14733: LD_VAR 0 2
14737: PPUSH
14738: CALL_OW 301
14742: IFFALSE 14762
// begin tmp := tmp diff un ;
14744: LD_ADDR_VAR 0 3
14748: PUSH
14749: LD_VAR 0 3
14753: PUSH
14754: LD_VAR 0 2
14758: DIFF
14759: ST_TO_ADDR
// continue ;
14760: GO 14730
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
14762: LD_VAR 0 2
14766: PPUSH
14767: LD_INT 3
14769: PUSH
14770: LD_INT 22
14772: PUSH
14773: LD_INT 0
14775: PUSH
14776: EMPTY
14777: LIST
14778: LIST
14779: PUSH
14780: EMPTY
14781: LIST
14782: LIST
14783: PPUSH
14784: CALL_OW 69
14788: PPUSH
14789: LD_VAR 0 2
14793: PPUSH
14794: CALL_OW 74
14798: PPUSH
14799: CALL_OW 115
// end ;
14803: GO 14730
14805: POP
14806: POP
// until not tmp ;
14807: LD_VAR 0 3
14811: NOT
14812: IFFALSE 14713
// end ;
14814: PPOPN 3
14816: END
// every 0 0$1 trigger StreamModeActive and sTroll do
14817: LD_EXP 24
14821: PUSH
14822: LD_EXP 49
14826: AND
14827: IFFALSE 14881
14829: GO 14831
14831: DISABLE
// begin ToLua ( displayTroll(); ) ;
14832: LD_STRING displayTroll();
14834: PPUSH
14835: CALL_OW 559
// wait ( 3 3$00 ) ;
14839: LD_INT 6300
14841: PPUSH
14842: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14846: LD_STRING hideTroll();
14848: PPUSH
14849: CALL_OW 559
// wait ( 1 1$00 ) ;
14853: LD_INT 2100
14855: PPUSH
14856: CALL_OW 67
// ToLua ( displayTroll(); ) ;
14860: LD_STRING displayTroll();
14862: PPUSH
14863: CALL_OW 559
// wait ( 1 1$00 ) ;
14867: LD_INT 2100
14869: PPUSH
14870: CALL_OW 67
// ToLua ( hideTroll(); ) ;
14874: LD_STRING hideTroll();
14876: PPUSH
14877: CALL_OW 559
// end ;
14881: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
14882: LD_EXP 24
14886: PUSH
14887: LD_EXP 50
14891: AND
14892: IFFALSE 14955
14894: GO 14896
14896: DISABLE
14897: LD_INT 0
14899: PPUSH
// begin p := 0 ;
14900: LD_ADDR_VAR 0 1
14904: PUSH
14905: LD_INT 0
14907: ST_TO_ADDR
// repeat game_speed := 1 ;
14908: LD_ADDR_OWVAR 65
14912: PUSH
14913: LD_INT 1
14915: ST_TO_ADDR
// wait ( 0 0$1 ) ;
14916: LD_INT 35
14918: PPUSH
14919: CALL_OW 67
// p := p + 1 ;
14923: LD_ADDR_VAR 0 1
14927: PUSH
14928: LD_VAR 0 1
14932: PUSH
14933: LD_INT 1
14935: PLUS
14936: ST_TO_ADDR
// until p >= 60 ;
14937: LD_VAR 0 1
14941: PUSH
14942: LD_INT 60
14944: GREATEREQUAL
14945: IFFALSE 14908
// game_speed := 4 ;
14947: LD_ADDR_OWVAR 65
14951: PUSH
14952: LD_INT 4
14954: ST_TO_ADDR
// end ;
14955: PPOPN 1
14957: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
14958: LD_EXP 24
14962: PUSH
14963: LD_EXP 51
14967: AND
14968: IFFALSE 15114
14970: GO 14972
14972: DISABLE
14973: LD_INT 0
14975: PPUSH
14976: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
14977: LD_ADDR_VAR 0 1
14981: PUSH
14982: LD_INT 22
14984: PUSH
14985: LD_OWVAR 2
14989: PUSH
14990: EMPTY
14991: LIST
14992: LIST
14993: PUSH
14994: LD_INT 2
14996: PUSH
14997: LD_INT 30
14999: PUSH
15000: LD_INT 0
15002: PUSH
15003: EMPTY
15004: LIST
15005: LIST
15006: PUSH
15007: LD_INT 30
15009: PUSH
15010: LD_INT 1
15012: PUSH
15013: EMPTY
15014: LIST
15015: LIST
15016: PUSH
15017: EMPTY
15018: LIST
15019: LIST
15020: LIST
15021: PUSH
15022: EMPTY
15023: LIST
15024: LIST
15025: PPUSH
15026: CALL_OW 69
15030: ST_TO_ADDR
// if not depot then
15031: LD_VAR 0 1
15035: NOT
15036: IFFALSE 15040
// exit ;
15038: GO 15114
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
15040: LD_ADDR_VAR 0 2
15044: PUSH
15045: LD_VAR 0 1
15049: PUSH
15050: LD_INT 1
15052: PPUSH
15053: LD_VAR 0 1
15057: PPUSH
15058: CALL_OW 12
15062: ARRAY
15063: PPUSH
15064: CALL_OW 274
15068: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
15069: LD_VAR 0 2
15073: PPUSH
15074: LD_INT 1
15076: PPUSH
15077: LD_INT 0
15079: PPUSH
15080: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
15084: LD_VAR 0 2
15088: PPUSH
15089: LD_INT 2
15091: PPUSH
15092: LD_INT 0
15094: PPUSH
15095: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
15099: LD_VAR 0 2
15103: PPUSH
15104: LD_INT 3
15106: PPUSH
15107: LD_INT 0
15109: PPUSH
15110: CALL_OW 277
// end ;
15114: PPOPN 2
15116: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
15117: LD_EXP 24
15121: PUSH
15122: LD_EXP 52
15126: AND
15127: IFFALSE 15224
15129: GO 15131
15131: DISABLE
15132: LD_INT 0
15134: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
15135: LD_ADDR_VAR 0 1
15139: PUSH
15140: LD_INT 22
15142: PUSH
15143: LD_OWVAR 2
15147: PUSH
15148: EMPTY
15149: LIST
15150: LIST
15151: PUSH
15152: LD_INT 21
15154: PUSH
15155: LD_INT 1
15157: PUSH
15158: EMPTY
15159: LIST
15160: LIST
15161: PUSH
15162: LD_INT 3
15164: PUSH
15165: LD_INT 23
15167: PUSH
15168: LD_INT 0
15170: PUSH
15171: EMPTY
15172: LIST
15173: LIST
15174: PUSH
15175: EMPTY
15176: LIST
15177: LIST
15178: PUSH
15179: EMPTY
15180: LIST
15181: LIST
15182: LIST
15183: PPUSH
15184: CALL_OW 69
15188: ST_TO_ADDR
// if not tmp then
15189: LD_VAR 0 1
15193: NOT
15194: IFFALSE 15198
// exit ;
15196: GO 15224
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
15198: LD_VAR 0 1
15202: PUSH
15203: LD_INT 1
15205: PPUSH
15206: LD_VAR 0 1
15210: PPUSH
15211: CALL_OW 12
15215: ARRAY
15216: PPUSH
15217: LD_INT 200
15219: PPUSH
15220: CALL_OW 234
// end ;
15224: PPOPN 1
15226: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
15227: LD_EXP 24
15231: PUSH
15232: LD_EXP 53
15236: AND
15237: IFFALSE 15316
15239: GO 15241
15241: DISABLE
15242: LD_INT 0
15244: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
15245: LD_ADDR_VAR 0 1
15249: PUSH
15250: LD_INT 22
15252: PUSH
15253: LD_OWVAR 2
15257: PUSH
15258: EMPTY
15259: LIST
15260: LIST
15261: PUSH
15262: LD_INT 21
15264: PUSH
15265: LD_INT 2
15267: PUSH
15268: EMPTY
15269: LIST
15270: LIST
15271: PUSH
15272: EMPTY
15273: LIST
15274: LIST
15275: PPUSH
15276: CALL_OW 69
15280: ST_TO_ADDR
// if not tmp then
15281: LD_VAR 0 1
15285: NOT
15286: IFFALSE 15290
// exit ;
15288: GO 15316
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
15290: LD_VAR 0 1
15294: PUSH
15295: LD_INT 1
15297: PPUSH
15298: LD_VAR 0 1
15302: PPUSH
15303: CALL_OW 12
15307: ARRAY
15308: PPUSH
15309: LD_INT 60
15311: PPUSH
15312: CALL_OW 234
// end ;
15316: PPOPN 1
15318: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
15319: LD_EXP 24
15323: PUSH
15324: LD_EXP 54
15328: AND
15329: IFFALSE 15428
15331: GO 15333
15333: DISABLE
15334: LD_INT 0
15336: PPUSH
15337: PPUSH
// begin enable ;
15338: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
15339: LD_ADDR_VAR 0 1
15343: PUSH
15344: LD_INT 22
15346: PUSH
15347: LD_OWVAR 2
15351: PUSH
15352: EMPTY
15353: LIST
15354: LIST
15355: PUSH
15356: LD_INT 61
15358: PUSH
15359: EMPTY
15360: LIST
15361: PUSH
15362: LD_INT 33
15364: PUSH
15365: LD_INT 2
15367: PUSH
15368: EMPTY
15369: LIST
15370: LIST
15371: PUSH
15372: EMPTY
15373: LIST
15374: LIST
15375: LIST
15376: PPUSH
15377: CALL_OW 69
15381: ST_TO_ADDR
// if not tmp then
15382: LD_VAR 0 1
15386: NOT
15387: IFFALSE 15391
// exit ;
15389: GO 15428
// for i in tmp do
15391: LD_ADDR_VAR 0 2
15395: PUSH
15396: LD_VAR 0 1
15400: PUSH
15401: FOR_IN
15402: IFFALSE 15426
// if IsControledBy ( i ) then
15404: LD_VAR 0 2
15408: PPUSH
15409: CALL_OW 312
15413: IFFALSE 15424
// ComUnlink ( i ) ;
15415: LD_VAR 0 2
15419: PPUSH
15420: CALL_OW 136
15424: GO 15401
15426: POP
15427: POP
// end ;
15428: PPOPN 2
15430: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
15431: LD_EXP 24
15435: PUSH
15436: LD_EXP 55
15440: AND
15441: IFFALSE 15581
15443: GO 15445
15445: DISABLE
15446: LD_INT 0
15448: PPUSH
15449: PPUSH
// begin ToLua ( displayPowell(); ) ;
15450: LD_STRING displayPowell();
15452: PPUSH
15453: CALL_OW 559
// uc_side := 0 ;
15457: LD_ADDR_OWVAR 20
15461: PUSH
15462: LD_INT 0
15464: ST_TO_ADDR
// uc_nation := 2 ;
15465: LD_ADDR_OWVAR 21
15469: PUSH
15470: LD_INT 2
15472: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
15473: LD_ADDR_OWVAR 37
15477: PUSH
15478: LD_INT 14
15480: ST_TO_ADDR
// vc_engine := engine_siberite ;
15481: LD_ADDR_OWVAR 39
15485: PUSH
15486: LD_INT 3
15488: ST_TO_ADDR
// vc_control := control_apeman ;
15489: LD_ADDR_OWVAR 38
15493: PUSH
15494: LD_INT 5
15496: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
15497: LD_ADDR_OWVAR 40
15501: PUSH
15502: LD_INT 29
15504: ST_TO_ADDR
// un := CreateVehicle ;
15505: LD_ADDR_VAR 0 2
15509: PUSH
15510: CALL_OW 45
15514: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
15515: LD_VAR 0 2
15519: PPUSH
15520: LD_INT 1
15522: PPUSH
15523: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
15527: LD_INT 35
15529: PPUSH
15530: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
15534: LD_VAR 0 2
15538: PPUSH
15539: LD_INT 22
15541: PUSH
15542: LD_OWVAR 2
15546: PUSH
15547: EMPTY
15548: LIST
15549: LIST
15550: PPUSH
15551: CALL_OW 69
15555: PPUSH
15556: LD_VAR 0 2
15560: PPUSH
15561: CALL_OW 74
15565: PPUSH
15566: CALL_OW 115
// until IsDead ( un ) ;
15570: LD_VAR 0 2
15574: PPUSH
15575: CALL_OW 301
15579: IFFALSE 15527
// end ;
15581: PPOPN 2
15583: END
// every 0 0$1 trigger StreamModeActive and sStu do
15584: LD_EXP 24
15588: PUSH
15589: LD_EXP 63
15593: AND
15594: IFFALSE 15610
15596: GO 15598
15598: DISABLE
// begin ToLua ( displayStucuk(); ) ;
15599: LD_STRING displayStucuk();
15601: PPUSH
15602: CALL_OW 559
// ResetFog ;
15606: CALL_OW 335
// end ;
15610: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
15611: LD_EXP 24
15615: PUSH
15616: LD_EXP 56
15620: AND
15621: IFFALSE 15762
15623: GO 15625
15625: DISABLE
15626: LD_INT 0
15628: PPUSH
15629: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15630: LD_ADDR_VAR 0 2
15634: PUSH
15635: LD_INT 22
15637: PUSH
15638: LD_OWVAR 2
15642: PUSH
15643: EMPTY
15644: LIST
15645: LIST
15646: PUSH
15647: LD_INT 21
15649: PUSH
15650: LD_INT 1
15652: PUSH
15653: EMPTY
15654: LIST
15655: LIST
15656: PUSH
15657: EMPTY
15658: LIST
15659: LIST
15660: PPUSH
15661: CALL_OW 69
15665: ST_TO_ADDR
// if not tmp then
15666: LD_VAR 0 2
15670: NOT
15671: IFFALSE 15675
// exit ;
15673: GO 15762
// un := tmp [ rand ( 1 , tmp ) ] ;
15675: LD_ADDR_VAR 0 1
15679: PUSH
15680: LD_VAR 0 2
15684: PUSH
15685: LD_INT 1
15687: PPUSH
15688: LD_VAR 0 2
15692: PPUSH
15693: CALL_OW 12
15697: ARRAY
15698: ST_TO_ADDR
// SetSide ( un , 0 ) ;
15699: LD_VAR 0 1
15703: PPUSH
15704: LD_INT 0
15706: PPUSH
15707: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
15711: LD_VAR 0 1
15715: PPUSH
15716: LD_OWVAR 3
15720: PUSH
15721: LD_VAR 0 1
15725: DIFF
15726: PPUSH
15727: LD_VAR 0 1
15731: PPUSH
15732: CALL_OW 74
15736: PPUSH
15737: CALL_OW 115
// wait ( 0 0$20 ) ;
15741: LD_INT 700
15743: PPUSH
15744: CALL_OW 67
// SetSide ( un , your_side ) ;
15748: LD_VAR 0 1
15752: PPUSH
15753: LD_OWVAR 2
15757: PPUSH
15758: CALL_OW 235
// end ;
15762: PPOPN 2
15764: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
15765: LD_EXP 24
15769: PUSH
15770: LD_EXP 57
15774: AND
15775: IFFALSE 15881
15777: GO 15779
15779: DISABLE
15780: LD_INT 0
15782: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
15783: LD_ADDR_VAR 0 1
15787: PUSH
15788: LD_INT 22
15790: PUSH
15791: LD_OWVAR 2
15795: PUSH
15796: EMPTY
15797: LIST
15798: LIST
15799: PUSH
15800: LD_INT 2
15802: PUSH
15803: LD_INT 30
15805: PUSH
15806: LD_INT 0
15808: PUSH
15809: EMPTY
15810: LIST
15811: LIST
15812: PUSH
15813: LD_INT 30
15815: PUSH
15816: LD_INT 1
15818: PUSH
15819: EMPTY
15820: LIST
15821: LIST
15822: PUSH
15823: EMPTY
15824: LIST
15825: LIST
15826: LIST
15827: PUSH
15828: EMPTY
15829: LIST
15830: LIST
15831: PPUSH
15832: CALL_OW 69
15836: ST_TO_ADDR
// if not depot then
15837: LD_VAR 0 1
15841: NOT
15842: IFFALSE 15846
// exit ;
15844: GO 15881
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
15846: LD_VAR 0 1
15850: PUSH
15851: LD_INT 1
15853: ARRAY
15854: PPUSH
15855: CALL_OW 250
15859: PPUSH
15860: LD_VAR 0 1
15864: PUSH
15865: LD_INT 1
15867: ARRAY
15868: PPUSH
15869: CALL_OW 251
15873: PPUSH
15874: LD_INT 70
15876: PPUSH
15877: CALL_OW 495
// end ;
15881: PPOPN 1
15883: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
15884: LD_EXP 24
15888: PUSH
15889: LD_EXP 58
15893: AND
15894: IFFALSE 16105
15896: GO 15898
15898: DISABLE
15899: LD_INT 0
15901: PPUSH
15902: PPUSH
15903: PPUSH
15904: PPUSH
15905: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
15906: LD_ADDR_VAR 0 5
15910: PUSH
15911: LD_INT 22
15913: PUSH
15914: LD_OWVAR 2
15918: PUSH
15919: EMPTY
15920: LIST
15921: LIST
15922: PUSH
15923: LD_INT 21
15925: PUSH
15926: LD_INT 1
15928: PUSH
15929: EMPTY
15930: LIST
15931: LIST
15932: PUSH
15933: EMPTY
15934: LIST
15935: LIST
15936: PPUSH
15937: CALL_OW 69
15941: ST_TO_ADDR
// if not tmp then
15942: LD_VAR 0 5
15946: NOT
15947: IFFALSE 15951
// exit ;
15949: GO 16105
// for i in tmp do
15951: LD_ADDR_VAR 0 1
15955: PUSH
15956: LD_VAR 0 5
15960: PUSH
15961: FOR_IN
15962: IFFALSE 16103
// begin d := rand ( 0 , 5 ) ;
15964: LD_ADDR_VAR 0 4
15968: PUSH
15969: LD_INT 0
15971: PPUSH
15972: LD_INT 5
15974: PPUSH
15975: CALL_OW 12
15979: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
15980: LD_ADDR_VAR 0 2
15984: PUSH
15985: LD_VAR 0 1
15989: PPUSH
15990: CALL_OW 250
15994: PPUSH
15995: LD_VAR 0 4
15999: PPUSH
16000: LD_INT 3
16002: PPUSH
16003: LD_INT 12
16005: PPUSH
16006: CALL_OW 12
16010: PPUSH
16011: CALL_OW 272
16015: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
16016: LD_ADDR_VAR 0 3
16020: PUSH
16021: LD_VAR 0 1
16025: PPUSH
16026: CALL_OW 251
16030: PPUSH
16031: LD_VAR 0 4
16035: PPUSH
16036: LD_INT 3
16038: PPUSH
16039: LD_INT 12
16041: PPUSH
16042: CALL_OW 12
16046: PPUSH
16047: CALL_OW 273
16051: ST_TO_ADDR
// if ValidHex ( x , y ) then
16052: LD_VAR 0 2
16056: PPUSH
16057: LD_VAR 0 3
16061: PPUSH
16062: CALL_OW 488
16066: IFFALSE 16101
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
16068: LD_VAR 0 1
16072: PPUSH
16073: LD_VAR 0 2
16077: PPUSH
16078: LD_VAR 0 3
16082: PPUSH
16083: LD_INT 3
16085: PPUSH
16086: LD_INT 6
16088: PPUSH
16089: CALL_OW 12
16093: PPUSH
16094: LD_INT 1
16096: PPUSH
16097: CALL_OW 483
// end ;
16101: GO 15961
16103: POP
16104: POP
// end ;
16105: PPOPN 5
16107: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
16108: LD_EXP 24
16112: PUSH
16113: LD_EXP 59
16117: AND
16118: IFFALSE 16212
16120: GO 16122
16122: DISABLE
16123: LD_INT 0
16125: PPUSH
16126: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
16127: LD_ADDR_VAR 0 2
16131: PUSH
16132: LD_INT 22
16134: PUSH
16135: LD_OWVAR 2
16139: PUSH
16140: EMPTY
16141: LIST
16142: LIST
16143: PUSH
16144: LD_INT 32
16146: PUSH
16147: LD_INT 1
16149: PUSH
16150: EMPTY
16151: LIST
16152: LIST
16153: PUSH
16154: LD_INT 21
16156: PUSH
16157: LD_INT 2
16159: PUSH
16160: EMPTY
16161: LIST
16162: LIST
16163: PUSH
16164: EMPTY
16165: LIST
16166: LIST
16167: LIST
16168: PPUSH
16169: CALL_OW 69
16173: ST_TO_ADDR
// if not tmp then
16174: LD_VAR 0 2
16178: NOT
16179: IFFALSE 16183
// exit ;
16181: GO 16212
// for i in tmp do
16183: LD_ADDR_VAR 0 1
16187: PUSH
16188: LD_VAR 0 2
16192: PUSH
16193: FOR_IN
16194: IFFALSE 16210
// SetFuel ( i , 0 ) ;
16196: LD_VAR 0 1
16200: PPUSH
16201: LD_INT 0
16203: PPUSH
16204: CALL_OW 240
16208: GO 16193
16210: POP
16211: POP
// end ;
16212: PPOPN 2
16214: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
16215: LD_EXP 24
16219: PUSH
16220: LD_EXP 60
16224: AND
16225: IFFALSE 16291
16227: GO 16229
16229: DISABLE
16230: LD_INT 0
16232: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
16233: LD_ADDR_VAR 0 1
16237: PUSH
16238: LD_INT 22
16240: PUSH
16241: LD_OWVAR 2
16245: PUSH
16246: EMPTY
16247: LIST
16248: LIST
16249: PUSH
16250: LD_INT 30
16252: PUSH
16253: LD_INT 29
16255: PUSH
16256: EMPTY
16257: LIST
16258: LIST
16259: PUSH
16260: EMPTY
16261: LIST
16262: LIST
16263: PPUSH
16264: CALL_OW 69
16268: ST_TO_ADDR
// if not tmp then
16269: LD_VAR 0 1
16273: NOT
16274: IFFALSE 16278
// exit ;
16276: GO 16291
// DestroyUnit ( tmp [ 1 ] ) ;
16278: LD_VAR 0 1
16282: PUSH
16283: LD_INT 1
16285: ARRAY
16286: PPUSH
16287: CALL_OW 65
// end ;
16291: PPOPN 1
16293: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
16294: LD_EXP 24
16298: PUSH
16299: LD_EXP 62
16303: AND
16304: IFFALSE 16433
16306: GO 16308
16308: DISABLE
16309: LD_INT 0
16311: PPUSH
// begin uc_side := 0 ;
16312: LD_ADDR_OWVAR 20
16316: PUSH
16317: LD_INT 0
16319: ST_TO_ADDR
// uc_nation := nation_arabian ;
16320: LD_ADDR_OWVAR 21
16324: PUSH
16325: LD_INT 2
16327: ST_TO_ADDR
// hc_gallery :=  ;
16328: LD_ADDR_OWVAR 33
16332: PUSH
16333: LD_STRING 
16335: ST_TO_ADDR
// hc_name :=  ;
16336: LD_ADDR_OWVAR 26
16340: PUSH
16341: LD_STRING 
16343: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
16344: LD_INT 1
16346: PPUSH
16347: LD_INT 11
16349: PPUSH
16350: LD_INT 10
16352: PPUSH
16353: CALL_OW 380
// un := CreateHuman ;
16357: LD_ADDR_VAR 0 1
16361: PUSH
16362: CALL_OW 44
16366: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
16367: LD_VAR 0 1
16371: PPUSH
16372: LD_INT 1
16374: PPUSH
16375: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
16379: LD_INT 35
16381: PPUSH
16382: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
16386: LD_VAR 0 1
16390: PPUSH
16391: LD_INT 22
16393: PUSH
16394: LD_OWVAR 2
16398: PUSH
16399: EMPTY
16400: LIST
16401: LIST
16402: PPUSH
16403: CALL_OW 69
16407: PPUSH
16408: LD_VAR 0 1
16412: PPUSH
16413: CALL_OW 74
16417: PPUSH
16418: CALL_OW 115
// until IsDead ( un ) ;
16422: LD_VAR 0 1
16426: PPUSH
16427: CALL_OW 301
16431: IFFALSE 16379
// end ;
16433: PPOPN 1
16435: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
16436: LD_EXP 24
16440: PUSH
16441: LD_EXP 64
16445: AND
16446: IFFALSE 16458
16448: GO 16450
16450: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
16451: LD_STRING earthquake(getX(game), 0, 32)
16453: PPUSH
16454: CALL_OW 559
16458: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
16459: LD_EXP 24
16463: PUSH
16464: LD_EXP 65
16468: AND
16469: IFFALSE 16560
16471: GO 16473
16473: DISABLE
16474: LD_INT 0
16476: PPUSH
// begin enable ;
16477: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
16478: LD_ADDR_VAR 0 1
16482: PUSH
16483: LD_INT 22
16485: PUSH
16486: LD_OWVAR 2
16490: PUSH
16491: EMPTY
16492: LIST
16493: LIST
16494: PUSH
16495: LD_INT 21
16497: PUSH
16498: LD_INT 2
16500: PUSH
16501: EMPTY
16502: LIST
16503: LIST
16504: PUSH
16505: LD_INT 33
16507: PUSH
16508: LD_INT 3
16510: PUSH
16511: EMPTY
16512: LIST
16513: LIST
16514: PUSH
16515: EMPTY
16516: LIST
16517: LIST
16518: LIST
16519: PPUSH
16520: CALL_OW 69
16524: ST_TO_ADDR
// if not tmp then
16525: LD_VAR 0 1
16529: NOT
16530: IFFALSE 16534
// exit ;
16532: GO 16560
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
16534: LD_VAR 0 1
16538: PUSH
16539: LD_INT 1
16541: PPUSH
16542: LD_VAR 0 1
16546: PPUSH
16547: CALL_OW 12
16551: ARRAY
16552: PPUSH
16553: LD_INT 1
16555: PPUSH
16556: CALL_OW 234
// end ;
16560: PPOPN 1
16562: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
16563: LD_EXP 24
16567: PUSH
16568: LD_EXP 66
16572: AND
16573: IFFALSE 16714
16575: GO 16577
16577: DISABLE
16578: LD_INT 0
16580: PPUSH
16581: PPUSH
16582: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16583: LD_ADDR_VAR 0 3
16587: PUSH
16588: LD_INT 22
16590: PUSH
16591: LD_OWVAR 2
16595: PUSH
16596: EMPTY
16597: LIST
16598: LIST
16599: PUSH
16600: LD_INT 25
16602: PUSH
16603: LD_INT 1
16605: PUSH
16606: EMPTY
16607: LIST
16608: LIST
16609: PUSH
16610: EMPTY
16611: LIST
16612: LIST
16613: PPUSH
16614: CALL_OW 69
16618: ST_TO_ADDR
// if not tmp then
16619: LD_VAR 0 3
16623: NOT
16624: IFFALSE 16628
// exit ;
16626: GO 16714
// un := tmp [ rand ( 1 , tmp ) ] ;
16628: LD_ADDR_VAR 0 2
16632: PUSH
16633: LD_VAR 0 3
16637: PUSH
16638: LD_INT 1
16640: PPUSH
16641: LD_VAR 0 3
16645: PPUSH
16646: CALL_OW 12
16650: ARRAY
16651: ST_TO_ADDR
// if Crawls ( un ) then
16652: LD_VAR 0 2
16656: PPUSH
16657: CALL_OW 318
16661: IFFALSE 16672
// ComWalk ( un ) ;
16663: LD_VAR 0 2
16667: PPUSH
16668: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
16672: LD_VAR 0 2
16676: PPUSH
16677: LD_INT 9
16679: PPUSH
16680: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
16684: LD_INT 28
16686: PPUSH
16687: LD_OWVAR 2
16691: PPUSH
16692: LD_INT 2
16694: PPUSH
16695: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
16699: LD_INT 29
16701: PPUSH
16702: LD_OWVAR 2
16706: PPUSH
16707: LD_INT 2
16709: PPUSH
16710: CALL_OW 322
// end ;
16714: PPOPN 3
16716: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
16717: LD_EXP 24
16721: PUSH
16722: LD_EXP 67
16726: AND
16727: IFFALSE 16838
16729: GO 16731
16731: DISABLE
16732: LD_INT 0
16734: PPUSH
16735: PPUSH
16736: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
16737: LD_ADDR_VAR 0 3
16741: PUSH
16742: LD_INT 22
16744: PUSH
16745: LD_OWVAR 2
16749: PUSH
16750: EMPTY
16751: LIST
16752: LIST
16753: PUSH
16754: LD_INT 25
16756: PUSH
16757: LD_INT 1
16759: PUSH
16760: EMPTY
16761: LIST
16762: LIST
16763: PUSH
16764: EMPTY
16765: LIST
16766: LIST
16767: PPUSH
16768: CALL_OW 69
16772: ST_TO_ADDR
// if not tmp then
16773: LD_VAR 0 3
16777: NOT
16778: IFFALSE 16782
// exit ;
16780: GO 16838
// un := tmp [ rand ( 1 , tmp ) ] ;
16782: LD_ADDR_VAR 0 2
16786: PUSH
16787: LD_VAR 0 3
16791: PUSH
16792: LD_INT 1
16794: PPUSH
16795: LD_VAR 0 3
16799: PPUSH
16800: CALL_OW 12
16804: ARRAY
16805: ST_TO_ADDR
// if Crawls ( un ) then
16806: LD_VAR 0 2
16810: PPUSH
16811: CALL_OW 318
16815: IFFALSE 16826
// ComWalk ( un ) ;
16817: LD_VAR 0 2
16821: PPUSH
16822: CALL_OW 138
// SetClass ( un , class_mortar ) ;
16826: LD_VAR 0 2
16830: PPUSH
16831: LD_INT 8
16833: PPUSH
16834: CALL_OW 336
// end ;
16838: PPOPN 3
16840: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
16841: LD_EXP 24
16845: PUSH
16846: LD_EXP 68
16850: AND
16851: IFFALSE 16995
16853: GO 16855
16855: DISABLE
16856: LD_INT 0
16858: PPUSH
16859: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
16860: LD_ADDR_VAR 0 2
16864: PUSH
16865: LD_INT 22
16867: PUSH
16868: LD_OWVAR 2
16872: PUSH
16873: EMPTY
16874: LIST
16875: LIST
16876: PUSH
16877: LD_INT 21
16879: PUSH
16880: LD_INT 2
16882: PUSH
16883: EMPTY
16884: LIST
16885: LIST
16886: PUSH
16887: LD_INT 2
16889: PUSH
16890: LD_INT 34
16892: PUSH
16893: LD_INT 12
16895: PUSH
16896: EMPTY
16897: LIST
16898: LIST
16899: PUSH
16900: LD_INT 34
16902: PUSH
16903: LD_INT 51
16905: PUSH
16906: EMPTY
16907: LIST
16908: LIST
16909: PUSH
16910: LD_INT 34
16912: PUSH
16913: LD_INT 32
16915: PUSH
16916: EMPTY
16917: LIST
16918: LIST
16919: PUSH
16920: EMPTY
16921: LIST
16922: LIST
16923: LIST
16924: LIST
16925: PUSH
16926: EMPTY
16927: LIST
16928: LIST
16929: LIST
16930: PPUSH
16931: CALL_OW 69
16935: ST_TO_ADDR
// if not tmp then
16936: LD_VAR 0 2
16940: NOT
16941: IFFALSE 16945
// exit ;
16943: GO 16995
// for i in tmp do
16945: LD_ADDR_VAR 0 1
16949: PUSH
16950: LD_VAR 0 2
16954: PUSH
16955: FOR_IN
16956: IFFALSE 16993
// if GetCargo ( i , mat_artifact ) = 0 then
16958: LD_VAR 0 1
16962: PPUSH
16963: LD_INT 4
16965: PPUSH
16966: CALL_OW 289
16970: PUSH
16971: LD_INT 0
16973: EQUAL
16974: IFFALSE 16991
// SetCargo ( i , mat_siberit , 100 ) ;
16976: LD_VAR 0 1
16980: PPUSH
16981: LD_INT 3
16983: PPUSH
16984: LD_INT 100
16986: PPUSH
16987: CALL_OW 290
16991: GO 16955
16993: POP
16994: POP
// end ;
16995: PPOPN 2
16997: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
16998: LD_EXP 24
17002: PUSH
17003: LD_EXP 69
17007: AND
17008: IFFALSE 17191
17010: GO 17012
17012: DISABLE
17013: LD_INT 0
17015: PPUSH
17016: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
17017: LD_ADDR_VAR 0 2
17021: PUSH
17022: LD_INT 22
17024: PUSH
17025: LD_OWVAR 2
17029: PUSH
17030: EMPTY
17031: LIST
17032: LIST
17033: PPUSH
17034: CALL_OW 69
17038: ST_TO_ADDR
// if not tmp then
17039: LD_VAR 0 2
17043: NOT
17044: IFFALSE 17048
// exit ;
17046: GO 17191
// for i := 1 to 2 do
17048: LD_ADDR_VAR 0 1
17052: PUSH
17053: DOUBLE
17054: LD_INT 1
17056: DEC
17057: ST_TO_ADDR
17058: LD_INT 2
17060: PUSH
17061: FOR_TO
17062: IFFALSE 17189
// begin uc_side := your_side ;
17064: LD_ADDR_OWVAR 20
17068: PUSH
17069: LD_OWVAR 2
17073: ST_TO_ADDR
// uc_nation := nation_american ;
17074: LD_ADDR_OWVAR 21
17078: PUSH
17079: LD_INT 1
17081: ST_TO_ADDR
// vc_chassis := us_morphling ;
17082: LD_ADDR_OWVAR 37
17086: PUSH
17087: LD_INT 5
17089: ST_TO_ADDR
// vc_engine := engine_siberite ;
17090: LD_ADDR_OWVAR 39
17094: PUSH
17095: LD_INT 3
17097: ST_TO_ADDR
// vc_control := control_computer ;
17098: LD_ADDR_OWVAR 38
17102: PUSH
17103: LD_INT 3
17105: ST_TO_ADDR
// vc_weapon := us_double_laser ;
17106: LD_ADDR_OWVAR 40
17110: PUSH
17111: LD_INT 10
17113: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
17114: LD_VAR 0 2
17118: PUSH
17119: LD_INT 1
17121: ARRAY
17122: PPUSH
17123: CALL_OW 310
17127: NOT
17128: IFFALSE 17175
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
17130: CALL_OW 45
17134: PPUSH
17135: LD_VAR 0 2
17139: PUSH
17140: LD_INT 1
17142: ARRAY
17143: PPUSH
17144: CALL_OW 250
17148: PPUSH
17149: LD_VAR 0 2
17153: PUSH
17154: LD_INT 1
17156: ARRAY
17157: PPUSH
17158: CALL_OW 251
17162: PPUSH
17163: LD_INT 12
17165: PPUSH
17166: LD_INT 1
17168: PPUSH
17169: CALL_OW 50
17173: GO 17187
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
17175: CALL_OW 45
17179: PPUSH
17180: LD_INT 1
17182: PPUSH
17183: CALL_OW 51
// end ;
17187: GO 17061
17189: POP
17190: POP
// end ;
17191: PPOPN 2
17193: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
17194: LD_EXP 24
17198: PUSH
17199: LD_EXP 70
17203: AND
17204: IFFALSE 17426
17206: GO 17208
17208: DISABLE
17209: LD_INT 0
17211: PPUSH
17212: PPUSH
17213: PPUSH
17214: PPUSH
17215: PPUSH
17216: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
17217: LD_ADDR_VAR 0 6
17221: PUSH
17222: LD_INT 22
17224: PUSH
17225: LD_OWVAR 2
17229: PUSH
17230: EMPTY
17231: LIST
17232: LIST
17233: PUSH
17234: LD_INT 21
17236: PUSH
17237: LD_INT 1
17239: PUSH
17240: EMPTY
17241: LIST
17242: LIST
17243: PUSH
17244: LD_INT 3
17246: PUSH
17247: LD_INT 23
17249: PUSH
17250: LD_INT 0
17252: PUSH
17253: EMPTY
17254: LIST
17255: LIST
17256: PUSH
17257: EMPTY
17258: LIST
17259: LIST
17260: PUSH
17261: EMPTY
17262: LIST
17263: LIST
17264: LIST
17265: PPUSH
17266: CALL_OW 69
17270: ST_TO_ADDR
// if not tmp then
17271: LD_VAR 0 6
17275: NOT
17276: IFFALSE 17280
// exit ;
17278: GO 17426
// s1 := rand ( 1 , 4 ) ;
17280: LD_ADDR_VAR 0 2
17284: PUSH
17285: LD_INT 1
17287: PPUSH
17288: LD_INT 4
17290: PPUSH
17291: CALL_OW 12
17295: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
17296: LD_ADDR_VAR 0 4
17300: PUSH
17301: LD_VAR 0 6
17305: PUSH
17306: LD_INT 1
17308: ARRAY
17309: PPUSH
17310: LD_VAR 0 2
17314: PPUSH
17315: CALL_OW 259
17319: ST_TO_ADDR
// if s1 = 1 then
17320: LD_VAR 0 2
17324: PUSH
17325: LD_INT 1
17327: EQUAL
17328: IFFALSE 17348
// s2 := rand ( 2 , 4 ) else
17330: LD_ADDR_VAR 0 3
17334: PUSH
17335: LD_INT 2
17337: PPUSH
17338: LD_INT 4
17340: PPUSH
17341: CALL_OW 12
17345: ST_TO_ADDR
17346: GO 17356
// s2 := 1 ;
17348: LD_ADDR_VAR 0 3
17352: PUSH
17353: LD_INT 1
17355: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
17356: LD_ADDR_VAR 0 5
17360: PUSH
17361: LD_VAR 0 6
17365: PUSH
17366: LD_INT 1
17368: ARRAY
17369: PPUSH
17370: LD_VAR 0 3
17374: PPUSH
17375: CALL_OW 259
17379: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
17380: LD_VAR 0 6
17384: PUSH
17385: LD_INT 1
17387: ARRAY
17388: PPUSH
17389: LD_VAR 0 2
17393: PPUSH
17394: LD_VAR 0 5
17398: PPUSH
17399: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
17403: LD_VAR 0 6
17407: PUSH
17408: LD_INT 1
17410: ARRAY
17411: PPUSH
17412: LD_VAR 0 3
17416: PPUSH
17417: LD_VAR 0 4
17421: PPUSH
17422: CALL_OW 237
// end ;
17426: PPOPN 6
17428: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
17429: LD_EXP 24
17433: PUSH
17434: LD_EXP 71
17438: AND
17439: IFFALSE 17518
17441: GO 17443
17443: DISABLE
17444: LD_INT 0
17446: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
17447: LD_ADDR_VAR 0 1
17451: PUSH
17452: LD_INT 22
17454: PUSH
17455: LD_OWVAR 2
17459: PUSH
17460: EMPTY
17461: LIST
17462: LIST
17463: PUSH
17464: LD_INT 30
17466: PUSH
17467: LD_INT 3
17469: PUSH
17470: EMPTY
17471: LIST
17472: LIST
17473: PUSH
17474: EMPTY
17475: LIST
17476: LIST
17477: PPUSH
17478: CALL_OW 69
17482: ST_TO_ADDR
// if not tmp then
17483: LD_VAR 0 1
17487: NOT
17488: IFFALSE 17492
// exit ;
17490: GO 17518
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
17492: LD_VAR 0 1
17496: PUSH
17497: LD_INT 1
17499: PPUSH
17500: LD_VAR 0 1
17504: PPUSH
17505: CALL_OW 12
17509: ARRAY
17510: PPUSH
17511: LD_INT 1
17513: PPUSH
17514: CALL_OW 234
// end ;
17518: PPOPN 1
17520: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
17521: LD_EXP 24
17525: PUSH
17526: LD_EXP 72
17530: AND
17531: IFFALSE 17643
17533: GO 17535
17535: DISABLE
17536: LD_INT 0
17538: PPUSH
17539: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
17540: LD_ADDR_VAR 0 2
17544: PUSH
17545: LD_INT 22
17547: PUSH
17548: LD_OWVAR 2
17552: PUSH
17553: EMPTY
17554: LIST
17555: LIST
17556: PUSH
17557: LD_INT 2
17559: PUSH
17560: LD_INT 30
17562: PUSH
17563: LD_INT 27
17565: PUSH
17566: EMPTY
17567: LIST
17568: LIST
17569: PUSH
17570: LD_INT 30
17572: PUSH
17573: LD_INT 26
17575: PUSH
17576: EMPTY
17577: LIST
17578: LIST
17579: PUSH
17580: LD_INT 30
17582: PUSH
17583: LD_INT 28
17585: PUSH
17586: EMPTY
17587: LIST
17588: LIST
17589: PUSH
17590: EMPTY
17591: LIST
17592: LIST
17593: LIST
17594: LIST
17595: PUSH
17596: EMPTY
17597: LIST
17598: LIST
17599: PPUSH
17600: CALL_OW 69
17604: ST_TO_ADDR
// if not tmp then
17605: LD_VAR 0 2
17609: NOT
17610: IFFALSE 17614
// exit ;
17612: GO 17643
// for i in tmp do
17614: LD_ADDR_VAR 0 1
17618: PUSH
17619: LD_VAR 0 2
17623: PUSH
17624: FOR_IN
17625: IFFALSE 17641
// SetLives ( i , 1 ) ;
17627: LD_VAR 0 1
17631: PPUSH
17632: LD_INT 1
17634: PPUSH
17635: CALL_OW 234
17639: GO 17624
17641: POP
17642: POP
// end ;
17643: PPOPN 2
17645: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
17646: LD_EXP 24
17650: PUSH
17651: LD_EXP 73
17655: AND
17656: IFFALSE 17930
17658: GO 17660
17660: DISABLE
17661: LD_INT 0
17663: PPUSH
17664: PPUSH
17665: PPUSH
// begin i := rand ( 1 , 7 ) ;
17666: LD_ADDR_VAR 0 1
17670: PUSH
17671: LD_INT 1
17673: PPUSH
17674: LD_INT 7
17676: PPUSH
17677: CALL_OW 12
17681: ST_TO_ADDR
// case i of 1 :
17682: LD_VAR 0 1
17686: PUSH
17687: LD_INT 1
17689: DOUBLE
17690: EQUAL
17691: IFTRUE 17695
17693: GO 17705
17695: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
17696: LD_STRING earthquake(getX(game), 0, 32)
17698: PPUSH
17699: CALL_OW 559
17703: GO 17930
17705: LD_INT 2
17707: DOUBLE
17708: EQUAL
17709: IFTRUE 17713
17711: GO 17727
17713: POP
// begin ToLua ( displayStucuk(); ) ;
17714: LD_STRING displayStucuk();
17716: PPUSH
17717: CALL_OW 559
// ResetFog ;
17721: CALL_OW 335
// end ; 3 :
17725: GO 17930
17727: LD_INT 3
17729: DOUBLE
17730: EQUAL
17731: IFTRUE 17735
17733: GO 17839
17735: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
17736: LD_ADDR_VAR 0 2
17740: PUSH
17741: LD_INT 22
17743: PUSH
17744: LD_OWVAR 2
17748: PUSH
17749: EMPTY
17750: LIST
17751: LIST
17752: PUSH
17753: LD_INT 25
17755: PUSH
17756: LD_INT 1
17758: PUSH
17759: EMPTY
17760: LIST
17761: LIST
17762: PUSH
17763: EMPTY
17764: LIST
17765: LIST
17766: PPUSH
17767: CALL_OW 69
17771: ST_TO_ADDR
// if not tmp then
17772: LD_VAR 0 2
17776: NOT
17777: IFFALSE 17781
// exit ;
17779: GO 17930
// un := tmp [ rand ( 1 , tmp ) ] ;
17781: LD_ADDR_VAR 0 3
17785: PUSH
17786: LD_VAR 0 2
17790: PUSH
17791: LD_INT 1
17793: PPUSH
17794: LD_VAR 0 2
17798: PPUSH
17799: CALL_OW 12
17803: ARRAY
17804: ST_TO_ADDR
// if Crawls ( un ) then
17805: LD_VAR 0 3
17809: PPUSH
17810: CALL_OW 318
17814: IFFALSE 17825
// ComWalk ( un ) ;
17816: LD_VAR 0 3
17820: PPUSH
17821: CALL_OW 138
// SetClass ( un , class_mortar ) ;
17825: LD_VAR 0 3
17829: PPUSH
17830: LD_INT 8
17832: PPUSH
17833: CALL_OW 336
// end ; 4 :
17837: GO 17930
17839: LD_INT 4
17841: DOUBLE
17842: EQUAL
17843: IFTRUE 17847
17845: GO 17908
17847: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
17848: LD_ADDR_VAR 0 2
17852: PUSH
17853: LD_INT 22
17855: PUSH
17856: LD_OWVAR 2
17860: PUSH
17861: EMPTY
17862: LIST
17863: LIST
17864: PUSH
17865: LD_INT 30
17867: PUSH
17868: LD_INT 29
17870: PUSH
17871: EMPTY
17872: LIST
17873: LIST
17874: PUSH
17875: EMPTY
17876: LIST
17877: LIST
17878: PPUSH
17879: CALL_OW 69
17883: ST_TO_ADDR
// if not tmp then
17884: LD_VAR 0 2
17888: NOT
17889: IFFALSE 17893
// exit ;
17891: GO 17930
// DestroyUnit ( tmp [ 1 ] ) ;
17893: LD_VAR 0 2
17897: PUSH
17898: LD_INT 1
17900: ARRAY
17901: PPUSH
17902: CALL_OW 65
// end ; 5 .. 7 :
17906: GO 17930
17908: LD_INT 5
17910: DOUBLE
17911: GREATEREQUAL
17912: IFFALSE 17920
17914: LD_INT 7
17916: DOUBLE
17917: LESSEQUAL
17918: IFTRUE 17922
17920: GO 17929
17922: POP
// StreamSibBomb ; end ;
17923: CALL 14180 0 0
17927: GO 17930
17929: POP
// end ;
17930: PPOPN 3
17932: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
17933: LD_EXP 24
17937: PUSH
17938: LD_EXP 74
17942: AND
17943: IFFALSE 18099
17945: GO 17947
17947: DISABLE
17948: LD_INT 0
17950: PPUSH
17951: PPUSH
17952: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
17953: LD_ADDR_VAR 0 2
17957: PUSH
17958: LD_INT 81
17960: PUSH
17961: LD_OWVAR 2
17965: PUSH
17966: EMPTY
17967: LIST
17968: LIST
17969: PUSH
17970: LD_INT 2
17972: PUSH
17973: LD_INT 21
17975: PUSH
17976: LD_INT 1
17978: PUSH
17979: EMPTY
17980: LIST
17981: LIST
17982: PUSH
17983: LD_INT 21
17985: PUSH
17986: LD_INT 2
17988: PUSH
17989: EMPTY
17990: LIST
17991: LIST
17992: PUSH
17993: EMPTY
17994: LIST
17995: LIST
17996: LIST
17997: PUSH
17998: EMPTY
17999: LIST
18000: LIST
18001: PPUSH
18002: CALL_OW 69
18006: ST_TO_ADDR
// if not tmp then
18007: LD_VAR 0 2
18011: NOT
18012: IFFALSE 18016
// exit ;
18014: GO 18099
// p := 0 ;
18016: LD_ADDR_VAR 0 3
18020: PUSH
18021: LD_INT 0
18023: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18024: LD_INT 35
18026: PPUSH
18027: CALL_OW 67
// p := p + 1 ;
18031: LD_ADDR_VAR 0 3
18035: PUSH
18036: LD_VAR 0 3
18040: PUSH
18041: LD_INT 1
18043: PLUS
18044: ST_TO_ADDR
// for i in tmp do
18045: LD_ADDR_VAR 0 1
18049: PUSH
18050: LD_VAR 0 2
18054: PUSH
18055: FOR_IN
18056: IFFALSE 18087
// if GetLives ( i ) < 1000 then
18058: LD_VAR 0 1
18062: PPUSH
18063: CALL_OW 256
18067: PUSH
18068: LD_INT 1000
18070: LESS
18071: IFFALSE 18085
// SetLives ( i , 1000 ) ;
18073: LD_VAR 0 1
18077: PPUSH
18078: LD_INT 1000
18080: PPUSH
18081: CALL_OW 234
18085: GO 18055
18087: POP
18088: POP
// until p > 20 ;
18089: LD_VAR 0 3
18093: PUSH
18094: LD_INT 20
18096: GREATER
18097: IFFALSE 18024
// end ;
18099: PPOPN 3
18101: END
// every 0 0$1 trigger StreamModeActive and sTime do
18102: LD_EXP 24
18106: PUSH
18107: LD_EXP 75
18111: AND
18112: IFFALSE 18147
18114: GO 18116
18116: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
18117: LD_INT 28
18119: PPUSH
18120: LD_OWVAR 2
18124: PPUSH
18125: LD_INT 2
18127: PPUSH
18128: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
18132: LD_INT 30
18134: PPUSH
18135: LD_OWVAR 2
18139: PPUSH
18140: LD_INT 2
18142: PPUSH
18143: CALL_OW 322
// end ;
18147: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
18148: LD_EXP 24
18152: PUSH
18153: LD_EXP 76
18157: AND
18158: IFFALSE 18279
18160: GO 18162
18162: DISABLE
18163: LD_INT 0
18165: PPUSH
18166: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
18167: LD_ADDR_VAR 0 2
18171: PUSH
18172: LD_INT 22
18174: PUSH
18175: LD_OWVAR 2
18179: PUSH
18180: EMPTY
18181: LIST
18182: LIST
18183: PUSH
18184: LD_INT 21
18186: PUSH
18187: LD_INT 1
18189: PUSH
18190: EMPTY
18191: LIST
18192: LIST
18193: PUSH
18194: LD_INT 3
18196: PUSH
18197: LD_INT 23
18199: PUSH
18200: LD_INT 0
18202: PUSH
18203: EMPTY
18204: LIST
18205: LIST
18206: PUSH
18207: EMPTY
18208: LIST
18209: LIST
18210: PUSH
18211: EMPTY
18212: LIST
18213: LIST
18214: LIST
18215: PPUSH
18216: CALL_OW 69
18220: ST_TO_ADDR
// if not tmp then
18221: LD_VAR 0 2
18225: NOT
18226: IFFALSE 18230
// exit ;
18228: GO 18279
// for i in tmp do
18230: LD_ADDR_VAR 0 1
18234: PUSH
18235: LD_VAR 0 2
18239: PUSH
18240: FOR_IN
18241: IFFALSE 18277
// begin if Crawls ( i ) then
18243: LD_VAR 0 1
18247: PPUSH
18248: CALL_OW 318
18252: IFFALSE 18263
// ComWalk ( i ) ;
18254: LD_VAR 0 1
18258: PPUSH
18259: CALL_OW 138
// SetClass ( i , 2 ) ;
18263: LD_VAR 0 1
18267: PPUSH
18268: LD_INT 2
18270: PPUSH
18271: CALL_OW 336
// end ;
18275: GO 18240
18277: POP
18278: POP
// end ;
18279: PPOPN 2
18281: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
18282: LD_EXP 24
18286: PUSH
18287: LD_EXP 77
18291: AND
18292: IFFALSE 18573
18294: GO 18296
18296: DISABLE
18297: LD_INT 0
18299: PPUSH
18300: PPUSH
18301: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
18302: LD_OWVAR 2
18306: PPUSH
18307: LD_INT 9
18309: PPUSH
18310: LD_INT 1
18312: PPUSH
18313: LD_INT 1
18315: PPUSH
18316: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
18320: LD_INT 9
18322: PPUSH
18323: LD_OWVAR 2
18327: PPUSH
18328: CALL_OW 343
// uc_side := 9 ;
18332: LD_ADDR_OWVAR 20
18336: PUSH
18337: LD_INT 9
18339: ST_TO_ADDR
// uc_nation := 2 ;
18340: LD_ADDR_OWVAR 21
18344: PUSH
18345: LD_INT 2
18347: ST_TO_ADDR
// hc_name := Dark Warrior ;
18348: LD_ADDR_OWVAR 26
18352: PUSH
18353: LD_STRING Dark Warrior
18355: ST_TO_ADDR
// hc_gallery :=  ;
18356: LD_ADDR_OWVAR 33
18360: PUSH
18361: LD_STRING 
18363: ST_TO_ADDR
// hc_noskilllimit := true ;
18364: LD_ADDR_OWVAR 76
18368: PUSH
18369: LD_INT 1
18371: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
18372: LD_ADDR_OWVAR 31
18376: PUSH
18377: LD_INT 30
18379: PUSH
18380: LD_INT 30
18382: PUSH
18383: LD_INT 30
18385: PUSH
18386: LD_INT 30
18388: PUSH
18389: EMPTY
18390: LIST
18391: LIST
18392: LIST
18393: LIST
18394: ST_TO_ADDR
// un := CreateHuman ;
18395: LD_ADDR_VAR 0 3
18399: PUSH
18400: CALL_OW 44
18404: ST_TO_ADDR
// hc_noskilllimit := false ;
18405: LD_ADDR_OWVAR 76
18409: PUSH
18410: LD_INT 0
18412: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
18413: LD_VAR 0 3
18417: PPUSH
18418: LD_INT 1
18420: PPUSH
18421: CALL_OW 51
// p := 0 ;
18425: LD_ADDR_VAR 0 2
18429: PUSH
18430: LD_INT 0
18432: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
18433: LD_INT 35
18435: PPUSH
18436: CALL_OW 67
// p := p + 1 ;
18440: LD_ADDR_VAR 0 2
18444: PUSH
18445: LD_VAR 0 2
18449: PUSH
18450: LD_INT 1
18452: PLUS
18453: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
18454: LD_VAR 0 3
18458: PPUSH
18459: CALL_OW 256
18463: PUSH
18464: LD_INT 1000
18466: LESS
18467: IFFALSE 18481
// SetLives ( un , 1000 ) ;
18469: LD_VAR 0 3
18473: PPUSH
18474: LD_INT 1000
18476: PPUSH
18477: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
18481: LD_VAR 0 3
18485: PPUSH
18486: LD_INT 81
18488: PUSH
18489: LD_OWVAR 2
18493: PUSH
18494: EMPTY
18495: LIST
18496: LIST
18497: PUSH
18498: LD_INT 91
18500: PUSH
18501: LD_VAR 0 3
18505: PUSH
18506: LD_INT 30
18508: PUSH
18509: EMPTY
18510: LIST
18511: LIST
18512: LIST
18513: PUSH
18514: EMPTY
18515: LIST
18516: LIST
18517: PPUSH
18518: CALL_OW 69
18522: PPUSH
18523: LD_VAR 0 3
18527: PPUSH
18528: CALL_OW 74
18532: PPUSH
18533: CALL_OW 115
// until p > 60 or IsDead ( un ) ;
18537: LD_VAR 0 2
18541: PUSH
18542: LD_INT 60
18544: GREATER
18545: PUSH
18546: LD_VAR 0 3
18550: PPUSH
18551: CALL_OW 301
18555: OR
18556: IFFALSE 18433
// if un then
18558: LD_VAR 0 3
18562: IFFALSE 18573
// RemoveUnit ( un ) ;
18564: LD_VAR 0 3
18568: PPUSH
18569: CALL_OW 64
// end ;
18573: PPOPN 3
18575: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
18576: LD_INT 0
18578: PPUSH
// case cmd of 301 :
18579: LD_VAR 0 1
18583: PUSH
18584: LD_INT 301
18586: DOUBLE
18587: EQUAL
18588: IFTRUE 18592
18590: GO 18624
18592: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
18593: LD_VAR 0 6
18597: PPUSH
18598: LD_VAR 0 7
18602: PPUSH
18603: LD_VAR 0 8
18607: PPUSH
18608: LD_VAR 0 4
18612: PPUSH
18613: LD_VAR 0 5
18617: PPUSH
18618: CALL 19825 0 5
18622: GO 18745
18624: LD_INT 302
18626: DOUBLE
18627: EQUAL
18628: IFTRUE 18632
18630: GO 18669
18632: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
18633: LD_VAR 0 6
18637: PPUSH
18638: LD_VAR 0 7
18642: PPUSH
18643: LD_VAR 0 8
18647: PPUSH
18648: LD_VAR 0 9
18652: PPUSH
18653: LD_VAR 0 4
18657: PPUSH
18658: LD_VAR 0 5
18662: PPUSH
18663: CALL 19916 0 6
18667: GO 18745
18669: LD_INT 303
18671: DOUBLE
18672: EQUAL
18673: IFTRUE 18677
18675: GO 18714
18677: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
18678: LD_VAR 0 6
18682: PPUSH
18683: LD_VAR 0 7
18687: PPUSH
18688: LD_VAR 0 8
18692: PPUSH
18693: LD_VAR 0 9
18697: PPUSH
18698: LD_VAR 0 4
18702: PPUSH
18703: LD_VAR 0 5
18707: PPUSH
18708: CALL 18750 0 6
18712: GO 18745
18714: LD_INT 304
18716: DOUBLE
18717: EQUAL
18718: IFTRUE 18722
18720: GO 18744
18722: POP
// hHackTeleport ( unit , x , y ) ; end ;
18723: LD_VAR 0 2
18727: PPUSH
18728: LD_VAR 0 4
18732: PPUSH
18733: LD_VAR 0 5
18737: PPUSH
18738: CALL 20509 0 3
18742: GO 18745
18744: POP
// end ;
18745: LD_VAR 0 12
18749: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
18750: LD_INT 0
18752: PPUSH
18753: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
18754: LD_VAR 0 1
18758: PUSH
18759: LD_INT 1
18761: LESS
18762: PUSH
18763: LD_VAR 0 1
18767: PUSH
18768: LD_INT 3
18770: GREATER
18771: OR
18772: PUSH
18773: LD_VAR 0 5
18777: PPUSH
18778: LD_VAR 0 6
18782: PPUSH
18783: CALL_OW 428
18787: OR
18788: IFFALSE 18792
// exit ;
18790: GO 19512
// uc_side := your_side ;
18792: LD_ADDR_OWVAR 20
18796: PUSH
18797: LD_OWVAR 2
18801: ST_TO_ADDR
// uc_nation := nation ;
18802: LD_ADDR_OWVAR 21
18806: PUSH
18807: LD_VAR 0 1
18811: ST_TO_ADDR
// bc_level = 1 ;
18812: LD_ADDR_OWVAR 43
18816: PUSH
18817: LD_INT 1
18819: ST_TO_ADDR
// case btype of 1 :
18820: LD_VAR 0 2
18824: PUSH
18825: LD_INT 1
18827: DOUBLE
18828: EQUAL
18829: IFTRUE 18833
18831: GO 18844
18833: POP
// bc_type := b_depot ; 2 :
18834: LD_ADDR_OWVAR 42
18838: PUSH
18839: LD_INT 0
18841: ST_TO_ADDR
18842: GO 19456
18844: LD_INT 2
18846: DOUBLE
18847: EQUAL
18848: IFTRUE 18852
18850: GO 18863
18852: POP
// bc_type := b_warehouse ; 3 :
18853: LD_ADDR_OWVAR 42
18857: PUSH
18858: LD_INT 1
18860: ST_TO_ADDR
18861: GO 19456
18863: LD_INT 3
18865: DOUBLE
18866: EQUAL
18867: IFTRUE 18871
18869: GO 18882
18871: POP
// bc_type := b_lab ; 4 .. 9 :
18872: LD_ADDR_OWVAR 42
18876: PUSH
18877: LD_INT 6
18879: ST_TO_ADDR
18880: GO 19456
18882: LD_INT 4
18884: DOUBLE
18885: GREATEREQUAL
18886: IFFALSE 18894
18888: LD_INT 9
18890: DOUBLE
18891: LESSEQUAL
18892: IFTRUE 18896
18894: GO 18948
18896: POP
// begin bc_type := b_lab_half ;
18897: LD_ADDR_OWVAR 42
18901: PUSH
18902: LD_INT 7
18904: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
18905: LD_ADDR_OWVAR 44
18909: PUSH
18910: LD_INT 10
18912: PUSH
18913: LD_INT 11
18915: PUSH
18916: LD_INT 12
18918: PUSH
18919: LD_INT 15
18921: PUSH
18922: LD_INT 14
18924: PUSH
18925: LD_INT 13
18927: PUSH
18928: EMPTY
18929: LIST
18930: LIST
18931: LIST
18932: LIST
18933: LIST
18934: LIST
18935: PUSH
18936: LD_VAR 0 2
18940: PUSH
18941: LD_INT 3
18943: MINUS
18944: ARRAY
18945: ST_TO_ADDR
// end ; 10 .. 13 :
18946: GO 19456
18948: LD_INT 10
18950: DOUBLE
18951: GREATEREQUAL
18952: IFFALSE 18960
18954: LD_INT 13
18956: DOUBLE
18957: LESSEQUAL
18958: IFTRUE 18962
18960: GO 19039
18962: POP
// begin bc_type := b_lab_full ;
18963: LD_ADDR_OWVAR 42
18967: PUSH
18968: LD_INT 8
18970: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
18971: LD_ADDR_OWVAR 44
18975: PUSH
18976: LD_INT 10
18978: PUSH
18979: LD_INT 12
18981: PUSH
18982: LD_INT 14
18984: PUSH
18985: LD_INT 13
18987: PUSH
18988: EMPTY
18989: LIST
18990: LIST
18991: LIST
18992: LIST
18993: PUSH
18994: LD_VAR 0 2
18998: PUSH
18999: LD_INT 9
19001: MINUS
19002: ARRAY
19003: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
19004: LD_ADDR_OWVAR 45
19008: PUSH
19009: LD_INT 11
19011: PUSH
19012: LD_INT 15
19014: PUSH
19015: LD_INT 12
19017: PUSH
19018: LD_INT 15
19020: PUSH
19021: EMPTY
19022: LIST
19023: LIST
19024: LIST
19025: LIST
19026: PUSH
19027: LD_VAR 0 2
19031: PUSH
19032: LD_INT 9
19034: MINUS
19035: ARRAY
19036: ST_TO_ADDR
// end ; 14 :
19037: GO 19456
19039: LD_INT 14
19041: DOUBLE
19042: EQUAL
19043: IFTRUE 19047
19045: GO 19058
19047: POP
// bc_type := b_workshop ; 15 :
19048: LD_ADDR_OWVAR 42
19052: PUSH
19053: LD_INT 2
19055: ST_TO_ADDR
19056: GO 19456
19058: LD_INT 15
19060: DOUBLE
19061: EQUAL
19062: IFTRUE 19066
19064: GO 19077
19066: POP
// bc_type := b_factory ; 16 :
19067: LD_ADDR_OWVAR 42
19071: PUSH
19072: LD_INT 3
19074: ST_TO_ADDR
19075: GO 19456
19077: LD_INT 16
19079: DOUBLE
19080: EQUAL
19081: IFTRUE 19085
19083: GO 19096
19085: POP
// bc_type := b_ext_gun ; 17 :
19086: LD_ADDR_OWVAR 42
19090: PUSH
19091: LD_INT 17
19093: ST_TO_ADDR
19094: GO 19456
19096: LD_INT 17
19098: DOUBLE
19099: EQUAL
19100: IFTRUE 19104
19102: GO 19132
19104: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
19105: LD_ADDR_OWVAR 42
19109: PUSH
19110: LD_INT 19
19112: PUSH
19113: LD_INT 23
19115: PUSH
19116: LD_INT 19
19118: PUSH
19119: EMPTY
19120: LIST
19121: LIST
19122: LIST
19123: PUSH
19124: LD_VAR 0 1
19128: ARRAY
19129: ST_TO_ADDR
19130: GO 19456
19132: LD_INT 18
19134: DOUBLE
19135: EQUAL
19136: IFTRUE 19140
19138: GO 19151
19140: POP
// bc_type := b_ext_radar ; 19 :
19141: LD_ADDR_OWVAR 42
19145: PUSH
19146: LD_INT 20
19148: ST_TO_ADDR
19149: GO 19456
19151: LD_INT 19
19153: DOUBLE
19154: EQUAL
19155: IFTRUE 19159
19157: GO 19170
19159: POP
// bc_type := b_ext_radio ; 20 :
19160: LD_ADDR_OWVAR 42
19164: PUSH
19165: LD_INT 22
19167: ST_TO_ADDR
19168: GO 19456
19170: LD_INT 20
19172: DOUBLE
19173: EQUAL
19174: IFTRUE 19178
19176: GO 19189
19178: POP
// bc_type := b_ext_siberium ; 21 :
19179: LD_ADDR_OWVAR 42
19183: PUSH
19184: LD_INT 21
19186: ST_TO_ADDR
19187: GO 19456
19189: LD_INT 21
19191: DOUBLE
19192: EQUAL
19193: IFTRUE 19197
19195: GO 19208
19197: POP
// bc_type := b_ext_computer ; 22 :
19198: LD_ADDR_OWVAR 42
19202: PUSH
19203: LD_INT 24
19205: ST_TO_ADDR
19206: GO 19456
19208: LD_INT 22
19210: DOUBLE
19211: EQUAL
19212: IFTRUE 19216
19214: GO 19227
19216: POP
// bc_type := b_ext_track ; 23 :
19217: LD_ADDR_OWVAR 42
19221: PUSH
19222: LD_INT 16
19224: ST_TO_ADDR
19225: GO 19456
19227: LD_INT 23
19229: DOUBLE
19230: EQUAL
19231: IFTRUE 19235
19233: GO 19246
19235: POP
// bc_type := b_ext_laser ; 24 :
19236: LD_ADDR_OWVAR 42
19240: PUSH
19241: LD_INT 25
19243: ST_TO_ADDR
19244: GO 19456
19246: LD_INT 24
19248: DOUBLE
19249: EQUAL
19250: IFTRUE 19254
19252: GO 19265
19254: POP
// bc_type := b_control_tower ; 25 :
19255: LD_ADDR_OWVAR 42
19259: PUSH
19260: LD_INT 36
19262: ST_TO_ADDR
19263: GO 19456
19265: LD_INT 25
19267: DOUBLE
19268: EQUAL
19269: IFTRUE 19273
19271: GO 19284
19273: POP
// bc_type := b_breastwork ; 26 :
19274: LD_ADDR_OWVAR 42
19278: PUSH
19279: LD_INT 31
19281: ST_TO_ADDR
19282: GO 19456
19284: LD_INT 26
19286: DOUBLE
19287: EQUAL
19288: IFTRUE 19292
19290: GO 19303
19292: POP
// bc_type := b_bunker ; 27 :
19293: LD_ADDR_OWVAR 42
19297: PUSH
19298: LD_INT 32
19300: ST_TO_ADDR
19301: GO 19456
19303: LD_INT 27
19305: DOUBLE
19306: EQUAL
19307: IFTRUE 19311
19309: GO 19322
19311: POP
// bc_type := b_turret ; 28 :
19312: LD_ADDR_OWVAR 42
19316: PUSH
19317: LD_INT 33
19319: ST_TO_ADDR
19320: GO 19456
19322: LD_INT 28
19324: DOUBLE
19325: EQUAL
19326: IFTRUE 19330
19328: GO 19341
19330: POP
// bc_type := b_armoury ; 29 :
19331: LD_ADDR_OWVAR 42
19335: PUSH
19336: LD_INT 4
19338: ST_TO_ADDR
19339: GO 19456
19341: LD_INT 29
19343: DOUBLE
19344: EQUAL
19345: IFTRUE 19349
19347: GO 19360
19349: POP
// bc_type := b_barracks ; 30 :
19350: LD_ADDR_OWVAR 42
19354: PUSH
19355: LD_INT 5
19357: ST_TO_ADDR
19358: GO 19456
19360: LD_INT 30
19362: DOUBLE
19363: EQUAL
19364: IFTRUE 19368
19366: GO 19379
19368: POP
// bc_type := b_solar_power ; 31 :
19369: LD_ADDR_OWVAR 42
19373: PUSH
19374: LD_INT 27
19376: ST_TO_ADDR
19377: GO 19456
19379: LD_INT 31
19381: DOUBLE
19382: EQUAL
19383: IFTRUE 19387
19385: GO 19398
19387: POP
// bc_type := b_oil_power ; 32 :
19388: LD_ADDR_OWVAR 42
19392: PUSH
19393: LD_INT 26
19395: ST_TO_ADDR
19396: GO 19456
19398: LD_INT 32
19400: DOUBLE
19401: EQUAL
19402: IFTRUE 19406
19404: GO 19417
19406: POP
// bc_type := b_siberite_power ; 33 :
19407: LD_ADDR_OWVAR 42
19411: PUSH
19412: LD_INT 28
19414: ST_TO_ADDR
19415: GO 19456
19417: LD_INT 33
19419: DOUBLE
19420: EQUAL
19421: IFTRUE 19425
19423: GO 19436
19425: POP
// bc_type := b_oil_mine ; 34 :
19426: LD_ADDR_OWVAR 42
19430: PUSH
19431: LD_INT 29
19433: ST_TO_ADDR
19434: GO 19456
19436: LD_INT 34
19438: DOUBLE
19439: EQUAL
19440: IFTRUE 19444
19442: GO 19455
19444: POP
// bc_type := b_siberite_mine ; end ;
19445: LD_ADDR_OWVAR 42
19449: PUSH
19450: LD_INT 30
19452: ST_TO_ADDR
19453: GO 19456
19455: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
19456: LD_ADDR_VAR 0 8
19460: PUSH
19461: LD_VAR 0 5
19465: PPUSH
19466: LD_VAR 0 6
19470: PPUSH
19471: LD_VAR 0 3
19475: PPUSH
19476: CALL_OW 47
19480: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
19481: LD_OWVAR 42
19485: PUSH
19486: LD_INT 32
19488: PUSH
19489: LD_INT 33
19491: PUSH
19492: EMPTY
19493: LIST
19494: LIST
19495: IN
19496: IFFALSE 19512
// PlaceWeaponTurret ( b , weapon ) ;
19498: LD_VAR 0 8
19502: PPUSH
19503: LD_VAR 0 4
19507: PPUSH
19508: CALL_OW 431
// end ;
19512: LD_VAR 0 7
19516: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
19517: LD_INT 0
19519: PPUSH
19520: PPUSH
19521: PPUSH
19522: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
19523: LD_ADDR_VAR 0 4
19527: PUSH
19528: LD_INT 22
19530: PUSH
19531: LD_OWVAR 2
19535: PUSH
19536: EMPTY
19537: LIST
19538: LIST
19539: PUSH
19540: LD_INT 2
19542: PUSH
19543: LD_INT 30
19545: PUSH
19546: LD_INT 0
19548: PUSH
19549: EMPTY
19550: LIST
19551: LIST
19552: PUSH
19553: LD_INT 30
19555: PUSH
19556: LD_INT 1
19558: PUSH
19559: EMPTY
19560: LIST
19561: LIST
19562: PUSH
19563: EMPTY
19564: LIST
19565: LIST
19566: LIST
19567: PUSH
19568: EMPTY
19569: LIST
19570: LIST
19571: PPUSH
19572: CALL_OW 69
19576: ST_TO_ADDR
// if not tmp then
19577: LD_VAR 0 4
19581: NOT
19582: IFFALSE 19586
// exit ;
19584: GO 19645
// for i in tmp do
19586: LD_ADDR_VAR 0 2
19590: PUSH
19591: LD_VAR 0 4
19595: PUSH
19596: FOR_IN
19597: IFFALSE 19643
// for j = 1 to 3 do
19599: LD_ADDR_VAR 0 3
19603: PUSH
19604: DOUBLE
19605: LD_INT 1
19607: DEC
19608: ST_TO_ADDR
19609: LD_INT 3
19611: PUSH
19612: FOR_TO
19613: IFFALSE 19639
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
19615: LD_VAR 0 2
19619: PPUSH
19620: CALL_OW 274
19624: PPUSH
19625: LD_VAR 0 3
19629: PPUSH
19630: LD_INT 99999
19632: PPUSH
19633: CALL_OW 277
19637: GO 19612
19639: POP
19640: POP
19641: GO 19596
19643: POP
19644: POP
// end ;
19645: LD_VAR 0 1
19649: RET
// export function hHackSetLevel10 ; var i , j ; begin
19650: LD_INT 0
19652: PPUSH
19653: PPUSH
19654: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
19655: LD_ADDR_VAR 0 2
19659: PUSH
19660: LD_INT 21
19662: PUSH
19663: LD_INT 1
19665: PUSH
19666: EMPTY
19667: LIST
19668: LIST
19669: PPUSH
19670: CALL_OW 69
19674: PUSH
19675: FOR_IN
19676: IFFALSE 19728
// if IsSelected ( i ) then
19678: LD_VAR 0 2
19682: PPUSH
19683: CALL_OW 306
19687: IFFALSE 19726
// begin for j := 1 to 4 do
19689: LD_ADDR_VAR 0 3
19693: PUSH
19694: DOUBLE
19695: LD_INT 1
19697: DEC
19698: ST_TO_ADDR
19699: LD_INT 4
19701: PUSH
19702: FOR_TO
19703: IFFALSE 19724
// SetSkill ( i , j , 10 ) ;
19705: LD_VAR 0 2
19709: PPUSH
19710: LD_VAR 0 3
19714: PPUSH
19715: LD_INT 10
19717: PPUSH
19718: CALL_OW 237
19722: GO 19702
19724: POP
19725: POP
// end ;
19726: GO 19675
19728: POP
19729: POP
// end ;
19730: LD_VAR 0 1
19734: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
19735: LD_INT 0
19737: PPUSH
19738: PPUSH
19739: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
19740: LD_ADDR_VAR 0 2
19744: PUSH
19745: LD_INT 22
19747: PUSH
19748: LD_OWVAR 2
19752: PUSH
19753: EMPTY
19754: LIST
19755: LIST
19756: PUSH
19757: LD_INT 21
19759: PUSH
19760: LD_INT 1
19762: PUSH
19763: EMPTY
19764: LIST
19765: LIST
19766: PUSH
19767: EMPTY
19768: LIST
19769: LIST
19770: PPUSH
19771: CALL_OW 69
19775: PUSH
19776: FOR_IN
19777: IFFALSE 19818
// begin for j := 1 to 4 do
19779: LD_ADDR_VAR 0 3
19783: PUSH
19784: DOUBLE
19785: LD_INT 1
19787: DEC
19788: ST_TO_ADDR
19789: LD_INT 4
19791: PUSH
19792: FOR_TO
19793: IFFALSE 19814
// SetSkill ( i , j , 10 ) ;
19795: LD_VAR 0 2
19799: PPUSH
19800: LD_VAR 0 3
19804: PPUSH
19805: LD_INT 10
19807: PPUSH
19808: CALL_OW 237
19812: GO 19792
19814: POP
19815: POP
// end ;
19816: GO 19776
19818: POP
19819: POP
// end ;
19820: LD_VAR 0 1
19824: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
19825: LD_INT 0
19827: PPUSH
// uc_side := your_side ;
19828: LD_ADDR_OWVAR 20
19832: PUSH
19833: LD_OWVAR 2
19837: ST_TO_ADDR
// uc_nation := nation ;
19838: LD_ADDR_OWVAR 21
19842: PUSH
19843: LD_VAR 0 1
19847: ST_TO_ADDR
// InitHc ;
19848: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
19852: LD_INT 0
19854: PPUSH
19855: LD_VAR 0 2
19859: PPUSH
19860: LD_VAR 0 3
19864: PPUSH
19865: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
19869: LD_VAR 0 4
19873: PPUSH
19874: LD_VAR 0 5
19878: PPUSH
19879: CALL_OW 428
19883: PUSH
19884: LD_INT 0
19886: EQUAL
19887: IFFALSE 19911
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
19889: CALL_OW 44
19893: PPUSH
19894: LD_VAR 0 4
19898: PPUSH
19899: LD_VAR 0 5
19903: PPUSH
19904: LD_INT 1
19906: PPUSH
19907: CALL_OW 48
// end ;
19911: LD_VAR 0 6
19915: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
19916: LD_INT 0
19918: PPUSH
19919: PPUSH
// uc_side := your_side ;
19920: LD_ADDR_OWVAR 20
19924: PUSH
19925: LD_OWVAR 2
19929: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
19930: LD_VAR 0 1
19934: PUSH
19935: LD_INT 1
19937: PUSH
19938: LD_INT 2
19940: PUSH
19941: LD_INT 3
19943: PUSH
19944: LD_INT 4
19946: PUSH
19947: LD_INT 5
19949: PUSH
19950: EMPTY
19951: LIST
19952: LIST
19953: LIST
19954: LIST
19955: LIST
19956: IN
19957: IFFALSE 19969
// uc_nation := nation_american else
19959: LD_ADDR_OWVAR 21
19963: PUSH
19964: LD_INT 1
19966: ST_TO_ADDR
19967: GO 20012
// if chassis in [ 11 , 12 , 13 , 14 ] then
19969: LD_VAR 0 1
19973: PUSH
19974: LD_INT 11
19976: PUSH
19977: LD_INT 12
19979: PUSH
19980: LD_INT 13
19982: PUSH
19983: LD_INT 14
19985: PUSH
19986: EMPTY
19987: LIST
19988: LIST
19989: LIST
19990: LIST
19991: IN
19992: IFFALSE 20004
// uc_nation := nation_arabian else
19994: LD_ADDR_OWVAR 21
19998: PUSH
19999: LD_INT 2
20001: ST_TO_ADDR
20002: GO 20012
// uc_nation := nation_russian ;
20004: LD_ADDR_OWVAR 21
20008: PUSH
20009: LD_INT 3
20011: ST_TO_ADDR
// vc_chassis := chassis ;
20012: LD_ADDR_OWVAR 37
20016: PUSH
20017: LD_VAR 0 1
20021: ST_TO_ADDR
// vc_engine := engine ;
20022: LD_ADDR_OWVAR 39
20026: PUSH
20027: LD_VAR 0 2
20031: ST_TO_ADDR
// vc_control := control ;
20032: LD_ADDR_OWVAR 38
20036: PUSH
20037: LD_VAR 0 3
20041: ST_TO_ADDR
// vc_weapon := weapon ;
20042: LD_ADDR_OWVAR 40
20046: PUSH
20047: LD_VAR 0 4
20051: ST_TO_ADDR
// un := CreateVehicle ;
20052: LD_ADDR_VAR 0 8
20056: PUSH
20057: CALL_OW 45
20061: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
20062: LD_VAR 0 8
20066: PPUSH
20067: LD_INT 0
20069: PPUSH
20070: LD_INT 5
20072: PPUSH
20073: CALL_OW 12
20077: PPUSH
20078: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
20082: LD_VAR 0 8
20086: PPUSH
20087: LD_VAR 0 5
20091: PPUSH
20092: LD_VAR 0 6
20096: PPUSH
20097: LD_INT 1
20099: PPUSH
20100: CALL_OW 48
// end ;
20104: LD_VAR 0 7
20108: RET
// export hInvincible ; every 1 do
20109: GO 20111
20111: DISABLE
// hInvincible := [ ] ;
20112: LD_ADDR_EXP 78
20116: PUSH
20117: EMPTY
20118: ST_TO_ADDR
20119: END
// every 10 do var i ;
20120: GO 20122
20122: DISABLE
20123: LD_INT 0
20125: PPUSH
// begin enable ;
20126: ENABLE
// if not hInvincible then
20127: LD_EXP 78
20131: NOT
20132: IFFALSE 20136
// exit ;
20134: GO 20180
// for i in hInvincible do
20136: LD_ADDR_VAR 0 1
20140: PUSH
20141: LD_EXP 78
20145: PUSH
20146: FOR_IN
20147: IFFALSE 20178
// if GetLives ( i ) < 1000 then
20149: LD_VAR 0 1
20153: PPUSH
20154: CALL_OW 256
20158: PUSH
20159: LD_INT 1000
20161: LESS
20162: IFFALSE 20176
// SetLives ( i , 1000 ) ;
20164: LD_VAR 0 1
20168: PPUSH
20169: LD_INT 1000
20171: PPUSH
20172: CALL_OW 234
20176: GO 20146
20178: POP
20179: POP
// end ;
20180: PPOPN 1
20182: END
// export function hHackInvincible ; var i ; begin
20183: LD_INT 0
20185: PPUSH
20186: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
20187: LD_ADDR_VAR 0 2
20191: PUSH
20192: LD_INT 2
20194: PUSH
20195: LD_INT 21
20197: PUSH
20198: LD_INT 1
20200: PUSH
20201: EMPTY
20202: LIST
20203: LIST
20204: PUSH
20205: LD_INT 21
20207: PUSH
20208: LD_INT 2
20210: PUSH
20211: EMPTY
20212: LIST
20213: LIST
20214: PUSH
20215: EMPTY
20216: LIST
20217: LIST
20218: LIST
20219: PPUSH
20220: CALL_OW 69
20224: PUSH
20225: FOR_IN
20226: IFFALSE 20287
// if IsSelected ( i ) then
20228: LD_VAR 0 2
20232: PPUSH
20233: CALL_OW 306
20237: IFFALSE 20285
// begin if i in hInvincible then
20239: LD_VAR 0 2
20243: PUSH
20244: LD_EXP 78
20248: IN
20249: IFFALSE 20269
// hInvincible := hInvincible diff i else
20251: LD_ADDR_EXP 78
20255: PUSH
20256: LD_EXP 78
20260: PUSH
20261: LD_VAR 0 2
20265: DIFF
20266: ST_TO_ADDR
20267: GO 20285
// hInvincible := hInvincible union i ;
20269: LD_ADDR_EXP 78
20273: PUSH
20274: LD_EXP 78
20278: PUSH
20279: LD_VAR 0 2
20283: UNION
20284: ST_TO_ADDR
// end ;
20285: GO 20225
20287: POP
20288: POP
// end ;
20289: LD_VAR 0 1
20293: RET
// export function hHackInvisible ; var i , j ; begin
20294: LD_INT 0
20296: PPUSH
20297: PPUSH
20298: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
20299: LD_ADDR_VAR 0 2
20303: PUSH
20304: LD_INT 21
20306: PUSH
20307: LD_INT 1
20309: PUSH
20310: EMPTY
20311: LIST
20312: LIST
20313: PPUSH
20314: CALL_OW 69
20318: PUSH
20319: FOR_IN
20320: IFFALSE 20344
// if IsSelected ( i ) then
20322: LD_VAR 0 2
20326: PPUSH
20327: CALL_OW 306
20331: IFFALSE 20342
// ComForceInvisible ( i ) ;
20333: LD_VAR 0 2
20337: PPUSH
20338: CALL_OW 496
20342: GO 20319
20344: POP
20345: POP
// end ;
20346: LD_VAR 0 1
20350: RET
// export function hHackChangeYourSide ; begin
20351: LD_INT 0
20353: PPUSH
// if your_side = 8 then
20354: LD_OWVAR 2
20358: PUSH
20359: LD_INT 8
20361: EQUAL
20362: IFFALSE 20374
// your_side := 0 else
20364: LD_ADDR_OWVAR 2
20368: PUSH
20369: LD_INT 0
20371: ST_TO_ADDR
20372: GO 20388
// your_side := your_side + 1 ;
20374: LD_ADDR_OWVAR 2
20378: PUSH
20379: LD_OWVAR 2
20383: PUSH
20384: LD_INT 1
20386: PLUS
20387: ST_TO_ADDR
// end ;
20388: LD_VAR 0 1
20392: RET
// export function hHackChangeUnitSide ; var i , j ; begin
20393: LD_INT 0
20395: PPUSH
20396: PPUSH
20397: PPUSH
// for i in all_units do
20398: LD_ADDR_VAR 0 2
20402: PUSH
20403: LD_OWVAR 3
20407: PUSH
20408: FOR_IN
20409: IFFALSE 20487
// if IsSelected ( i ) then
20411: LD_VAR 0 2
20415: PPUSH
20416: CALL_OW 306
20420: IFFALSE 20485
// begin j := GetSide ( i ) ;
20422: LD_ADDR_VAR 0 3
20426: PUSH
20427: LD_VAR 0 2
20431: PPUSH
20432: CALL_OW 255
20436: ST_TO_ADDR
// if j = 8 then
20437: LD_VAR 0 3
20441: PUSH
20442: LD_INT 8
20444: EQUAL
20445: IFFALSE 20457
// j := 0 else
20447: LD_ADDR_VAR 0 3
20451: PUSH
20452: LD_INT 0
20454: ST_TO_ADDR
20455: GO 20471
// j := j + 1 ;
20457: LD_ADDR_VAR 0 3
20461: PUSH
20462: LD_VAR 0 3
20466: PUSH
20467: LD_INT 1
20469: PLUS
20470: ST_TO_ADDR
// SetSide ( i , j ) ;
20471: LD_VAR 0 2
20475: PPUSH
20476: LD_VAR 0 3
20480: PPUSH
20481: CALL_OW 235
// end ;
20485: GO 20408
20487: POP
20488: POP
// end ;
20489: LD_VAR 0 1
20493: RET
// export function hHackFog ; begin
20494: LD_INT 0
20496: PPUSH
// FogOff ( true ) ;
20497: LD_INT 1
20499: PPUSH
20500: CALL_OW 344
// end ;
20504: LD_VAR 0 1
20508: RET
// export function hHackTeleport ( unit , x , y ) ; begin
20509: LD_INT 0
20511: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
20512: LD_VAR 0 1
20516: PPUSH
20517: LD_VAR 0 2
20521: PPUSH
20522: LD_VAR 0 3
20526: PPUSH
20527: LD_INT 1
20529: PPUSH
20530: LD_INT 1
20532: PPUSH
20533: CALL_OW 483
// CenterOnXY ( x , y ) ;
20537: LD_VAR 0 2
20541: PPUSH
20542: LD_VAR 0 3
20546: PPUSH
20547: CALL_OW 84
// end ; end_of_file end_of_file
20551: LD_VAR 0 4
20555: RET
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_heavy_mortar , ar_crane , ar_miner ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft ; export function InitGlobalVariables ; begin
20556: LD_INT 0
20558: PPUSH
// ar_miner := 81 ;
20559: LD_ADDR_EXP 86
20563: PUSH
20564: LD_INT 81
20566: ST_TO_ADDR
// ar_crane := 88 ;
20567: LD_ADDR_EXP 85
20571: PUSH
20572: LD_INT 88
20574: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
20575: LD_ADDR_EXP 80
20579: PUSH
20580: LD_INT 89
20582: ST_TO_ADDR
// us_hack := 99 ;
20583: LD_ADDR_EXP 81
20587: PUSH
20588: LD_INT 99
20590: ST_TO_ADDR
// us_artillery := 97 ;
20591: LD_ADDR_EXP 82
20595: PUSH
20596: LD_INT 97
20598: ST_TO_ADDR
// ar_bio_bomb := 91 ;
20599: LD_ADDR_EXP 83
20603: PUSH
20604: LD_INT 91
20606: ST_TO_ADDR
// ar_heavy_mortar := 92 ;
20607: LD_ADDR_EXP 84
20611: PUSH
20612: LD_INT 92
20614: ST_TO_ADDR
// ru_radar := 98 ;
20615: LD_ADDR_EXP 79
20619: PUSH
20620: LD_INT 98
20622: ST_TO_ADDR
// tech_Artillery := 80 ;
20623: LD_ADDR_EXP 87
20627: PUSH
20628: LD_INT 80
20630: ST_TO_ADDR
// tech_RadMat := 81 ;
20631: LD_ADDR_EXP 88
20635: PUSH
20636: LD_INT 81
20638: ST_TO_ADDR
// tech_BasicTools := 82 ;
20639: LD_ADDR_EXP 89
20643: PUSH
20644: LD_INT 82
20646: ST_TO_ADDR
// tech_Cargo := 83 ;
20647: LD_ADDR_EXP 90
20651: PUSH
20652: LD_INT 83
20654: ST_TO_ADDR
// tech_Track := 84 ;
20655: LD_ADDR_EXP 91
20659: PUSH
20660: LD_INT 84
20662: ST_TO_ADDR
// tech_Crane := 85 ;
20663: LD_ADDR_EXP 92
20667: PUSH
20668: LD_INT 85
20670: ST_TO_ADDR
// tech_Bulldozer := 86 ;
20671: LD_ADDR_EXP 93
20675: PUSH
20676: LD_INT 86
20678: ST_TO_ADDR
// tech_Hovercraft := 87 ;
20679: LD_ADDR_EXP 94
20683: PUSH
20684: LD_INT 87
20686: ST_TO_ADDR
// end ;
20687: LD_VAR 0 1
20691: RET
// every 1 do
20692: GO 20694
20694: DISABLE
// InitGlobalVariables ; end_of_file
20695: CALL 20556 0 0
20699: END
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
20700: LD_INT 0
20702: PPUSH
20703: PPUSH
// if exist_mode then
20704: LD_VAR 0 2
20708: IFFALSE 20733
// unit := CreateCharacter ( prefix & ident ) else
20710: LD_ADDR_VAR 0 5
20714: PUSH
20715: LD_VAR 0 3
20719: PUSH
20720: LD_VAR 0 1
20724: STR
20725: PPUSH
20726: CALL_OW 34
20730: ST_TO_ADDR
20731: GO 20748
// unit := NewCharacter ( ident ) ;
20733: LD_ADDR_VAR 0 5
20737: PUSH
20738: LD_VAR 0 1
20742: PPUSH
20743: CALL_OW 25
20747: ST_TO_ADDR
// result := unit ;
20748: LD_ADDR_VAR 0 4
20752: PUSH
20753: LD_VAR 0 5
20757: ST_TO_ADDR
// end ;
20758: LD_VAR 0 4
20762: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
20763: LD_INT 0
20765: PPUSH
20766: PPUSH
// if not side or not nation then
20767: LD_VAR 0 1
20771: NOT
20772: PUSH
20773: LD_VAR 0 2
20777: NOT
20778: OR
20779: IFFALSE 20783
// exit ;
20781: GO 21547
// case nation of nation_american :
20783: LD_VAR 0 2
20787: PUSH
20788: LD_INT 1
20790: DOUBLE
20791: EQUAL
20792: IFTRUE 20796
20794: GO 21010
20796: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
20797: LD_ADDR_VAR 0 4
20801: PUSH
20802: LD_INT 35
20804: PUSH
20805: LD_INT 45
20807: PUSH
20808: LD_INT 46
20810: PUSH
20811: LD_INT 47
20813: PUSH
20814: LD_INT 82
20816: PUSH
20817: LD_INT 83
20819: PUSH
20820: LD_INT 84
20822: PUSH
20823: LD_INT 85
20825: PUSH
20826: LD_INT 86
20828: PUSH
20829: LD_INT 1
20831: PUSH
20832: LD_INT 2
20834: PUSH
20835: LD_INT 6
20837: PUSH
20838: LD_INT 15
20840: PUSH
20841: LD_INT 16
20843: PUSH
20844: LD_INT 7
20846: PUSH
20847: LD_INT 12
20849: PUSH
20850: LD_INT 13
20852: PUSH
20853: LD_INT 10
20855: PUSH
20856: LD_INT 14
20858: PUSH
20859: LD_INT 20
20861: PUSH
20862: LD_INT 21
20864: PUSH
20865: LD_INT 22
20867: PUSH
20868: LD_INT 25
20870: PUSH
20871: LD_INT 32
20873: PUSH
20874: LD_INT 27
20876: PUSH
20877: LD_INT 36
20879: PUSH
20880: LD_INT 69
20882: PUSH
20883: LD_INT 39
20885: PUSH
20886: LD_INT 34
20888: PUSH
20889: LD_INT 40
20891: PUSH
20892: LD_INT 48
20894: PUSH
20895: LD_INT 49
20897: PUSH
20898: LD_INT 50
20900: PUSH
20901: LD_INT 51
20903: PUSH
20904: LD_INT 52
20906: PUSH
20907: LD_INT 53
20909: PUSH
20910: LD_INT 54
20912: PUSH
20913: LD_INT 55
20915: PUSH
20916: LD_INT 56
20918: PUSH
20919: LD_INT 57
20921: PUSH
20922: LD_INT 58
20924: PUSH
20925: LD_INT 59
20927: PUSH
20928: LD_INT 60
20930: PUSH
20931: LD_INT 61
20933: PUSH
20934: LD_INT 62
20936: PUSH
20937: LD_INT 80
20939: PUSH
20940: LD_INT 82
20942: PUSH
20943: LD_INT 83
20945: PUSH
20946: LD_INT 84
20948: PUSH
20949: LD_INT 85
20951: PUSH
20952: LD_INT 86
20954: PUSH
20955: EMPTY
20956: LIST
20957: LIST
20958: LIST
20959: LIST
20960: LIST
20961: LIST
20962: LIST
20963: LIST
20964: LIST
20965: LIST
20966: LIST
20967: LIST
20968: LIST
20969: LIST
20970: LIST
20971: LIST
20972: LIST
20973: LIST
20974: LIST
20975: LIST
20976: LIST
20977: LIST
20978: LIST
20979: LIST
20980: LIST
20981: LIST
20982: LIST
20983: LIST
20984: LIST
20985: LIST
20986: LIST
20987: LIST
20988: LIST
20989: LIST
20990: LIST
20991: LIST
20992: LIST
20993: LIST
20994: LIST
20995: LIST
20996: LIST
20997: LIST
20998: LIST
20999: LIST
21000: LIST
21001: LIST
21002: LIST
21003: LIST
21004: LIST
21005: LIST
21006: LIST
21007: ST_TO_ADDR
21008: GO 21471
21010: LD_INT 2
21012: DOUBLE
21013: EQUAL
21014: IFTRUE 21018
21016: GO 21240
21018: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 ] ; nation_russian :
21019: LD_ADDR_VAR 0 4
21023: PUSH
21024: LD_INT 35
21026: PUSH
21027: LD_INT 45
21029: PUSH
21030: LD_INT 46
21032: PUSH
21033: LD_INT 47
21035: PUSH
21036: LD_INT 82
21038: PUSH
21039: LD_INT 83
21041: PUSH
21042: LD_INT 84
21044: PUSH
21045: LD_INT 85
21047: PUSH
21048: LD_INT 87
21050: PUSH
21051: LD_INT 70
21053: PUSH
21054: LD_INT 1
21056: PUSH
21057: LD_INT 11
21059: PUSH
21060: LD_INT 3
21062: PUSH
21063: LD_INT 4
21065: PUSH
21066: LD_INT 5
21068: PUSH
21069: LD_INT 6
21071: PUSH
21072: LD_INT 15
21074: PUSH
21075: LD_INT 18
21077: PUSH
21078: LD_INT 7
21080: PUSH
21081: LD_INT 17
21083: PUSH
21084: LD_INT 8
21086: PUSH
21087: LD_INT 20
21089: PUSH
21090: LD_INT 21
21092: PUSH
21093: LD_INT 22
21095: PUSH
21096: LD_INT 72
21098: PUSH
21099: LD_INT 26
21101: PUSH
21102: LD_INT 69
21104: PUSH
21105: LD_INT 39
21107: PUSH
21108: LD_INT 40
21110: PUSH
21111: LD_INT 41
21113: PUSH
21114: LD_INT 42
21116: PUSH
21117: LD_INT 43
21119: PUSH
21120: LD_INT 48
21122: PUSH
21123: LD_INT 49
21125: PUSH
21126: LD_INT 50
21128: PUSH
21129: LD_INT 51
21131: PUSH
21132: LD_INT 52
21134: PUSH
21135: LD_INT 53
21137: PUSH
21138: LD_INT 54
21140: PUSH
21141: LD_INT 55
21143: PUSH
21144: LD_INT 56
21146: PUSH
21147: LD_INT 60
21149: PUSH
21150: LD_INT 61
21152: PUSH
21153: LD_INT 62
21155: PUSH
21156: LD_INT 66
21158: PUSH
21159: LD_INT 67
21161: PUSH
21162: LD_INT 68
21164: PUSH
21165: LD_INT 81
21167: PUSH
21168: LD_INT 82
21170: PUSH
21171: LD_INT 83
21173: PUSH
21174: LD_INT 84
21176: PUSH
21177: LD_INT 85
21179: PUSH
21180: LD_INT 87
21182: PUSH
21183: EMPTY
21184: LIST
21185: LIST
21186: LIST
21187: LIST
21188: LIST
21189: LIST
21190: LIST
21191: LIST
21192: LIST
21193: LIST
21194: LIST
21195: LIST
21196: LIST
21197: LIST
21198: LIST
21199: LIST
21200: LIST
21201: LIST
21202: LIST
21203: LIST
21204: LIST
21205: LIST
21206: LIST
21207: LIST
21208: LIST
21209: LIST
21210: LIST
21211: LIST
21212: LIST
21213: LIST
21214: LIST
21215: LIST
21216: LIST
21217: LIST
21218: LIST
21219: LIST
21220: LIST
21221: LIST
21222: LIST
21223: LIST
21224: LIST
21225: LIST
21226: LIST
21227: LIST
21228: LIST
21229: LIST
21230: LIST
21231: LIST
21232: LIST
21233: LIST
21234: LIST
21235: LIST
21236: LIST
21237: ST_TO_ADDR
21238: GO 21471
21240: LD_INT 3
21242: DOUBLE
21243: EQUAL
21244: IFTRUE 21248
21246: GO 21470
21248: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
21249: LD_ADDR_VAR 0 4
21253: PUSH
21254: LD_INT 46
21256: PUSH
21257: LD_INT 47
21259: PUSH
21260: LD_INT 1
21262: PUSH
21263: LD_INT 2
21265: PUSH
21266: LD_INT 82
21268: PUSH
21269: LD_INT 83
21271: PUSH
21272: LD_INT 84
21274: PUSH
21275: LD_INT 85
21277: PUSH
21278: LD_INT 86
21280: PUSH
21281: LD_INT 11
21283: PUSH
21284: LD_INT 9
21286: PUSH
21287: LD_INT 20
21289: PUSH
21290: LD_INT 19
21292: PUSH
21293: LD_INT 21
21295: PUSH
21296: LD_INT 24
21298: PUSH
21299: LD_INT 22
21301: PUSH
21302: LD_INT 25
21304: PUSH
21305: LD_INT 28
21307: PUSH
21308: LD_INT 29
21310: PUSH
21311: LD_INT 30
21313: PUSH
21314: LD_INT 31
21316: PUSH
21317: LD_INT 37
21319: PUSH
21320: LD_INT 38
21322: PUSH
21323: LD_INT 32
21325: PUSH
21326: LD_INT 27
21328: PUSH
21329: LD_INT 33
21331: PUSH
21332: LD_INT 69
21334: PUSH
21335: LD_INT 39
21337: PUSH
21338: LD_INT 34
21340: PUSH
21341: LD_INT 40
21343: PUSH
21344: LD_INT 71
21346: PUSH
21347: LD_INT 23
21349: PUSH
21350: LD_INT 44
21352: PUSH
21353: LD_INT 48
21355: PUSH
21356: LD_INT 49
21358: PUSH
21359: LD_INT 50
21361: PUSH
21362: LD_INT 51
21364: PUSH
21365: LD_INT 52
21367: PUSH
21368: LD_INT 53
21370: PUSH
21371: LD_INT 54
21373: PUSH
21374: LD_INT 55
21376: PUSH
21377: LD_INT 56
21379: PUSH
21380: LD_INT 57
21382: PUSH
21383: LD_INT 58
21385: PUSH
21386: LD_INT 59
21388: PUSH
21389: LD_INT 63
21391: PUSH
21392: LD_INT 64
21394: PUSH
21395: LD_INT 65
21397: PUSH
21398: LD_INT 82
21400: PUSH
21401: LD_INT 83
21403: PUSH
21404: LD_INT 84
21406: PUSH
21407: LD_INT 85
21409: PUSH
21410: LD_INT 86
21412: PUSH
21413: EMPTY
21414: LIST
21415: LIST
21416: LIST
21417: LIST
21418: LIST
21419: LIST
21420: LIST
21421: LIST
21422: LIST
21423: LIST
21424: LIST
21425: LIST
21426: LIST
21427: LIST
21428: LIST
21429: LIST
21430: LIST
21431: LIST
21432: LIST
21433: LIST
21434: LIST
21435: LIST
21436: LIST
21437: LIST
21438: LIST
21439: LIST
21440: LIST
21441: LIST
21442: LIST
21443: LIST
21444: LIST
21445: LIST
21446: LIST
21447: LIST
21448: LIST
21449: LIST
21450: LIST
21451: LIST
21452: LIST
21453: LIST
21454: LIST
21455: LIST
21456: LIST
21457: LIST
21458: LIST
21459: LIST
21460: LIST
21461: LIST
21462: LIST
21463: LIST
21464: LIST
21465: LIST
21466: LIST
21467: ST_TO_ADDR
21468: GO 21471
21470: POP
// if state > - 1 and state < 3 then
21471: LD_VAR 0 3
21475: PUSH
21476: LD_INT 1
21478: NEG
21479: GREATER
21480: PUSH
21481: LD_VAR 0 3
21485: PUSH
21486: LD_INT 3
21488: LESS
21489: AND
21490: IFFALSE 21547
// for i in result do
21492: LD_ADDR_VAR 0 5
21496: PUSH
21497: LD_VAR 0 4
21501: PUSH
21502: FOR_IN
21503: IFFALSE 21545
// if GetTech ( i , side ) <> state then
21505: LD_VAR 0 5
21509: PPUSH
21510: LD_VAR 0 1
21514: PPUSH
21515: CALL_OW 321
21519: PUSH
21520: LD_VAR 0 3
21524: NONEQUAL
21525: IFFALSE 21543
// result := result diff i ;
21527: LD_ADDR_VAR 0 4
21531: PUSH
21532: LD_VAR 0 4
21536: PUSH
21537: LD_VAR 0 5
21541: DIFF
21542: ST_TO_ADDR
21543: GO 21502
21545: POP
21546: POP
// end ;
21547: LD_VAR 0 4
21551: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
21552: LD_INT 0
21554: PPUSH
21555: PPUSH
21556: PPUSH
// result := true ;
21557: LD_ADDR_VAR 0 3
21561: PUSH
21562: LD_INT 1
21564: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
21565: LD_ADDR_VAR 0 5
21569: PUSH
21570: LD_VAR 0 2
21574: PPUSH
21575: CALL_OW 480
21579: ST_TO_ADDR
// if not tmp then
21580: LD_VAR 0 5
21584: NOT
21585: IFFALSE 21589
// exit ;
21587: GO 21638
// for i in tmp do
21589: LD_ADDR_VAR 0 4
21593: PUSH
21594: LD_VAR 0 5
21598: PUSH
21599: FOR_IN
21600: IFFALSE 21636
// if GetTech ( i , side ) <> state_researched then
21602: LD_VAR 0 4
21606: PPUSH
21607: LD_VAR 0 1
21611: PPUSH
21612: CALL_OW 321
21616: PUSH
21617: LD_INT 2
21619: NONEQUAL
21620: IFFALSE 21634
// begin result := false ;
21622: LD_ADDR_VAR 0 3
21626: PUSH
21627: LD_INT 0
21629: ST_TO_ADDR
// exit ;
21630: POP
21631: POP
21632: GO 21638
// end ;
21634: GO 21599
21636: POP
21637: POP
// end ;
21638: LD_VAR 0 3
21642: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
21643: LD_INT 0
21645: PPUSH
21646: PPUSH
21647: PPUSH
21648: PPUSH
21649: PPUSH
21650: PPUSH
21651: PPUSH
21652: PPUSH
21653: PPUSH
21654: PPUSH
21655: PPUSH
21656: PPUSH
21657: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
21658: LD_VAR 0 1
21662: NOT
21663: PUSH
21664: LD_VAR 0 1
21668: PPUSH
21669: CALL_OW 257
21673: PUSH
21674: LD_INT 9
21676: NONEQUAL
21677: OR
21678: IFFALSE 21682
// exit ;
21680: GO 22255
// side := GetSide ( unit ) ;
21682: LD_ADDR_VAR 0 9
21686: PUSH
21687: LD_VAR 0 1
21691: PPUSH
21692: CALL_OW 255
21696: ST_TO_ADDR
// tech_space := tech_spacanom ;
21697: LD_ADDR_VAR 0 12
21701: PUSH
21702: LD_INT 29
21704: ST_TO_ADDR
// tech_time := tech_taurad ;
21705: LD_ADDR_VAR 0 13
21709: PUSH
21710: LD_INT 28
21712: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
21713: LD_ADDR_VAR 0 11
21717: PUSH
21718: LD_VAR 0 1
21722: PPUSH
21723: CALL_OW 310
21727: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
21728: LD_VAR 0 11
21732: PPUSH
21733: CALL_OW 247
21737: PUSH
21738: LD_INT 2
21740: EQUAL
21741: IFFALSE 21745
// exit ;
21743: GO 22255
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
21745: LD_ADDR_VAR 0 8
21749: PUSH
21750: LD_INT 81
21752: PUSH
21753: LD_VAR 0 9
21757: PUSH
21758: EMPTY
21759: LIST
21760: LIST
21761: PUSH
21762: LD_INT 3
21764: PUSH
21765: LD_INT 21
21767: PUSH
21768: LD_INT 3
21770: PUSH
21771: EMPTY
21772: LIST
21773: LIST
21774: PUSH
21775: EMPTY
21776: LIST
21777: LIST
21778: PUSH
21779: EMPTY
21780: LIST
21781: LIST
21782: PPUSH
21783: CALL_OW 69
21787: ST_TO_ADDR
// if not tmp then
21788: LD_VAR 0 8
21792: NOT
21793: IFFALSE 21797
// exit ;
21795: GO 22255
// if in_unit then
21797: LD_VAR 0 11
21801: IFFALSE 21825
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
21803: LD_ADDR_VAR 0 10
21807: PUSH
21808: LD_VAR 0 8
21812: PPUSH
21813: LD_VAR 0 11
21817: PPUSH
21818: CALL_OW 74
21822: ST_TO_ADDR
21823: GO 21845
// enemy := NearestUnitToUnit ( tmp , unit ) ;
21825: LD_ADDR_VAR 0 10
21829: PUSH
21830: LD_VAR 0 8
21834: PPUSH
21835: LD_VAR 0 1
21839: PPUSH
21840: CALL_OW 74
21844: ST_TO_ADDR
// if not enemy then
21845: LD_VAR 0 10
21849: NOT
21850: IFFALSE 21854
// exit ;
21852: GO 22255
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
21854: LD_VAR 0 11
21858: PUSH
21859: LD_VAR 0 11
21863: PPUSH
21864: LD_VAR 0 10
21868: PPUSH
21869: CALL_OW 296
21873: PUSH
21874: LD_INT 13
21876: GREATER
21877: AND
21878: PUSH
21879: LD_VAR 0 1
21883: PPUSH
21884: LD_VAR 0 10
21888: PPUSH
21889: CALL_OW 296
21893: PUSH
21894: LD_INT 12
21896: GREATER
21897: OR
21898: IFFALSE 21902
// exit ;
21900: GO 22255
// missile := [ 1 ] ;
21902: LD_ADDR_VAR 0 14
21906: PUSH
21907: LD_INT 1
21909: PUSH
21910: EMPTY
21911: LIST
21912: ST_TO_ADDR
// if Researched ( side , tech_space ) then
21913: LD_VAR 0 9
21917: PPUSH
21918: LD_VAR 0 12
21922: PPUSH
21923: CALL_OW 325
21927: IFFALSE 21956
// missile := Insert ( missile , missile + 1 , 2 ) ;
21929: LD_ADDR_VAR 0 14
21933: PUSH
21934: LD_VAR 0 14
21938: PPUSH
21939: LD_VAR 0 14
21943: PUSH
21944: LD_INT 1
21946: PLUS
21947: PPUSH
21948: LD_INT 2
21950: PPUSH
21951: CALL_OW 2
21955: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
21956: LD_VAR 0 9
21960: PPUSH
21961: LD_VAR 0 13
21965: PPUSH
21966: CALL_OW 325
21970: PUSH
21971: LD_VAR 0 10
21975: PPUSH
21976: CALL_OW 255
21980: PPUSH
21981: LD_VAR 0 13
21985: PPUSH
21986: CALL_OW 325
21990: NOT
21991: AND
21992: IFFALSE 22021
// missile := Insert ( missile , missile + 1 , 3 ) ;
21994: LD_ADDR_VAR 0 14
21998: PUSH
21999: LD_VAR 0 14
22003: PPUSH
22004: LD_VAR 0 14
22008: PUSH
22009: LD_INT 1
22011: PLUS
22012: PPUSH
22013: LD_INT 3
22015: PPUSH
22016: CALL_OW 2
22020: ST_TO_ADDR
// if missile < 2 then
22021: LD_VAR 0 14
22025: PUSH
22026: LD_INT 2
22028: LESS
22029: IFFALSE 22033
// exit ;
22031: GO 22255
// x := GetX ( enemy ) ;
22033: LD_ADDR_VAR 0 4
22037: PUSH
22038: LD_VAR 0 10
22042: PPUSH
22043: CALL_OW 250
22047: ST_TO_ADDR
// y := GetY ( enemy ) ;
22048: LD_ADDR_VAR 0 5
22052: PUSH
22053: LD_VAR 0 10
22057: PPUSH
22058: CALL_OW 251
22062: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
22063: LD_ADDR_VAR 0 6
22067: PUSH
22068: LD_VAR 0 4
22072: PUSH
22073: LD_INT 1
22075: NEG
22076: PPUSH
22077: LD_INT 1
22079: PPUSH
22080: CALL_OW 12
22084: PLUS
22085: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
22086: LD_ADDR_VAR 0 7
22090: PUSH
22091: LD_VAR 0 5
22095: PUSH
22096: LD_INT 1
22098: NEG
22099: PPUSH
22100: LD_INT 1
22102: PPUSH
22103: CALL_OW 12
22107: PLUS
22108: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22109: LD_VAR 0 6
22113: PPUSH
22114: LD_VAR 0 7
22118: PPUSH
22119: CALL_OW 488
22123: NOT
22124: IFFALSE 22146
// begin _x := x ;
22126: LD_ADDR_VAR 0 6
22130: PUSH
22131: LD_VAR 0 4
22135: ST_TO_ADDR
// _y := y ;
22136: LD_ADDR_VAR 0 7
22140: PUSH
22141: LD_VAR 0 5
22145: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
22146: LD_ADDR_VAR 0 3
22150: PUSH
22151: LD_INT 1
22153: PPUSH
22154: LD_VAR 0 14
22158: PPUSH
22159: CALL_OW 12
22163: ST_TO_ADDR
// case i of 1 :
22164: LD_VAR 0 3
22168: PUSH
22169: LD_INT 1
22171: DOUBLE
22172: EQUAL
22173: IFTRUE 22177
22175: GO 22194
22177: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
22178: LD_VAR 0 1
22182: PPUSH
22183: LD_VAR 0 10
22187: PPUSH
22188: CALL_OW 115
22192: GO 22255
22194: LD_INT 2
22196: DOUBLE
22197: EQUAL
22198: IFTRUE 22202
22200: GO 22224
22202: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
22203: LD_VAR 0 1
22207: PPUSH
22208: LD_VAR 0 6
22212: PPUSH
22213: LD_VAR 0 7
22217: PPUSH
22218: CALL_OW 153
22222: GO 22255
22224: LD_INT 3
22226: DOUBLE
22227: EQUAL
22228: IFTRUE 22232
22230: GO 22254
22232: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
22233: LD_VAR 0 1
22237: PPUSH
22238: LD_VAR 0 6
22242: PPUSH
22243: LD_VAR 0 7
22247: PPUSH
22248: CALL_OW 154
22252: GO 22255
22254: POP
// end ;
22255: LD_VAR 0 2
22259: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
22260: LD_INT 0
22262: PPUSH
22263: PPUSH
22264: PPUSH
22265: PPUSH
22266: PPUSH
22267: PPUSH
// if not unit or not building then
22268: LD_VAR 0 1
22272: NOT
22273: PUSH
22274: LD_VAR 0 2
22278: NOT
22279: OR
22280: IFFALSE 22284
// exit ;
22282: GO 22442
// x := GetX ( building ) ;
22284: LD_ADDR_VAR 0 5
22288: PUSH
22289: LD_VAR 0 2
22293: PPUSH
22294: CALL_OW 250
22298: ST_TO_ADDR
// y := GetY ( building ) ;
22299: LD_ADDR_VAR 0 6
22303: PUSH
22304: LD_VAR 0 2
22308: PPUSH
22309: CALL_OW 251
22313: ST_TO_ADDR
// for i = 0 to 5 do
22314: LD_ADDR_VAR 0 4
22318: PUSH
22319: DOUBLE
22320: LD_INT 0
22322: DEC
22323: ST_TO_ADDR
22324: LD_INT 5
22326: PUSH
22327: FOR_TO
22328: IFFALSE 22440
// begin _x := ShiftX ( x , i , 3 ) ;
22330: LD_ADDR_VAR 0 7
22334: PUSH
22335: LD_VAR 0 5
22339: PPUSH
22340: LD_VAR 0 4
22344: PPUSH
22345: LD_INT 3
22347: PPUSH
22348: CALL_OW 272
22352: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
22353: LD_ADDR_VAR 0 8
22357: PUSH
22358: LD_VAR 0 6
22362: PPUSH
22363: LD_VAR 0 4
22367: PPUSH
22368: LD_INT 3
22370: PPUSH
22371: CALL_OW 273
22375: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
22376: LD_VAR 0 7
22380: PPUSH
22381: LD_VAR 0 8
22385: PPUSH
22386: CALL_OW 488
22390: NOT
22391: IFFALSE 22395
// continue ;
22393: GO 22327
// if HexInfo ( _x , _y ) = 0 then
22395: LD_VAR 0 7
22399: PPUSH
22400: LD_VAR 0 8
22404: PPUSH
22405: CALL_OW 428
22409: PUSH
22410: LD_INT 0
22412: EQUAL
22413: IFFALSE 22438
// begin ComMoveXY ( unit , _x , _y ) ;
22415: LD_VAR 0 1
22419: PPUSH
22420: LD_VAR 0 7
22424: PPUSH
22425: LD_VAR 0 8
22429: PPUSH
22430: CALL_OW 111
// exit ;
22434: POP
22435: POP
22436: GO 22442
// end ; end ;
22438: GO 22327
22440: POP
22441: POP
// end ;
22442: LD_VAR 0 3
22446: RET
// export function ScanBase ( side , base_area ) ; begin
22447: LD_INT 0
22449: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
22450: LD_ADDR_VAR 0 3
22454: PUSH
22455: LD_VAR 0 2
22459: PPUSH
22460: LD_INT 81
22462: PUSH
22463: LD_VAR 0 1
22467: PUSH
22468: EMPTY
22469: LIST
22470: LIST
22471: PPUSH
22472: CALL_OW 70
22476: ST_TO_ADDR
// end ;
22477: LD_VAR 0 3
22481: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
22482: LD_INT 0
22484: PPUSH
22485: PPUSH
22486: PPUSH
22487: PPUSH
// result := false ;
22488: LD_ADDR_VAR 0 2
22492: PUSH
22493: LD_INT 0
22495: ST_TO_ADDR
// side := GetSide ( unit ) ;
22496: LD_ADDR_VAR 0 3
22500: PUSH
22501: LD_VAR 0 1
22505: PPUSH
22506: CALL_OW 255
22510: ST_TO_ADDR
// nat := GetNation ( unit ) ;
22511: LD_ADDR_VAR 0 4
22515: PUSH
22516: LD_VAR 0 1
22520: PPUSH
22521: CALL_OW 248
22525: ST_TO_ADDR
// case nat of 1 :
22526: LD_VAR 0 4
22530: PUSH
22531: LD_INT 1
22533: DOUBLE
22534: EQUAL
22535: IFTRUE 22539
22537: GO 22550
22539: POP
// tech := tech_lassight ; 2 :
22540: LD_ADDR_VAR 0 5
22544: PUSH
22545: LD_INT 12
22547: ST_TO_ADDR
22548: GO 22589
22550: LD_INT 2
22552: DOUBLE
22553: EQUAL
22554: IFTRUE 22558
22556: GO 22569
22558: POP
// tech := tech_mortar ; 3 :
22559: LD_ADDR_VAR 0 5
22563: PUSH
22564: LD_INT 41
22566: ST_TO_ADDR
22567: GO 22589
22569: LD_INT 3
22571: DOUBLE
22572: EQUAL
22573: IFTRUE 22577
22575: GO 22588
22577: POP
// tech := tech_bazooka ; end ;
22578: LD_ADDR_VAR 0 5
22582: PUSH
22583: LD_INT 44
22585: ST_TO_ADDR
22586: GO 22589
22588: POP
// if Researched ( side , tech ) then
22589: LD_VAR 0 3
22593: PPUSH
22594: LD_VAR 0 5
22598: PPUSH
22599: CALL_OW 325
22603: IFFALSE 22630
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
22605: LD_ADDR_VAR 0 2
22609: PUSH
22610: LD_INT 5
22612: PUSH
22613: LD_INT 8
22615: PUSH
22616: LD_INT 9
22618: PUSH
22619: EMPTY
22620: LIST
22621: LIST
22622: LIST
22623: PUSH
22624: LD_VAR 0 4
22628: ARRAY
22629: ST_TO_ADDR
// end ;
22630: LD_VAR 0 2
22634: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
22635: LD_INT 0
22637: PPUSH
22638: PPUSH
22639: PPUSH
// if not mines then
22640: LD_VAR 0 2
22644: NOT
22645: IFFALSE 22649
// exit ;
22647: GO 22793
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
22649: LD_ADDR_VAR 0 5
22653: PUSH
22654: LD_INT 81
22656: PUSH
22657: LD_VAR 0 1
22661: PUSH
22662: EMPTY
22663: LIST
22664: LIST
22665: PUSH
22666: LD_INT 3
22668: PUSH
22669: LD_INT 21
22671: PUSH
22672: LD_INT 3
22674: PUSH
22675: EMPTY
22676: LIST
22677: LIST
22678: PUSH
22679: EMPTY
22680: LIST
22681: LIST
22682: PUSH
22683: EMPTY
22684: LIST
22685: LIST
22686: PPUSH
22687: CALL_OW 69
22691: ST_TO_ADDR
// for i in mines do
22692: LD_ADDR_VAR 0 4
22696: PUSH
22697: LD_VAR 0 2
22701: PUSH
22702: FOR_IN
22703: IFFALSE 22791
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
22705: LD_VAR 0 4
22709: PUSH
22710: LD_INT 1
22712: ARRAY
22713: PPUSH
22714: LD_VAR 0 4
22718: PUSH
22719: LD_INT 2
22721: ARRAY
22722: PPUSH
22723: CALL_OW 458
22727: NOT
22728: IFFALSE 22732
// continue ;
22730: GO 22702
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
22732: LD_VAR 0 4
22736: PUSH
22737: LD_INT 1
22739: ARRAY
22740: PPUSH
22741: LD_VAR 0 4
22745: PUSH
22746: LD_INT 2
22748: ARRAY
22749: PPUSH
22750: CALL_OW 428
22754: PUSH
22755: LD_VAR 0 5
22759: IN
22760: IFFALSE 22789
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
22762: LD_VAR 0 4
22766: PUSH
22767: LD_INT 1
22769: ARRAY
22770: PPUSH
22771: LD_VAR 0 4
22775: PUSH
22776: LD_INT 2
22778: ARRAY
22779: PPUSH
22780: LD_VAR 0 1
22784: PPUSH
22785: CALL_OW 456
// end ;
22789: GO 22702
22791: POP
22792: POP
// end ;
22793: LD_VAR 0 3
22797: RET
// export function Count ( array ) ; var i ; begin
22798: LD_INT 0
22800: PPUSH
22801: PPUSH
// result := 0 ;
22802: LD_ADDR_VAR 0 2
22806: PUSH
22807: LD_INT 0
22809: ST_TO_ADDR
// for i in array do
22810: LD_ADDR_VAR 0 3
22814: PUSH
22815: LD_VAR 0 1
22819: PUSH
22820: FOR_IN
22821: IFFALSE 22845
// if i then
22823: LD_VAR 0 3
22827: IFFALSE 22843
// result := result + 1 ;
22829: LD_ADDR_VAR 0 2
22833: PUSH
22834: LD_VAR 0 2
22838: PUSH
22839: LD_INT 1
22841: PLUS
22842: ST_TO_ADDR
22843: GO 22820
22845: POP
22846: POP
// end ;
22847: LD_VAR 0 2
22851: RET
// export function IsEmpty ( building ) ; begin
22852: LD_INT 0
22854: PPUSH
// if not building then
22855: LD_VAR 0 1
22859: NOT
22860: IFFALSE 22864
// exit ;
22862: GO 22907
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
22864: LD_ADDR_VAR 0 2
22868: PUSH
22869: LD_VAR 0 1
22873: PUSH
22874: LD_INT 22
22876: PUSH
22877: LD_VAR 0 1
22881: PPUSH
22882: CALL_OW 255
22886: PUSH
22887: EMPTY
22888: LIST
22889: LIST
22890: PUSH
22891: LD_INT 58
22893: PUSH
22894: EMPTY
22895: LIST
22896: PUSH
22897: EMPTY
22898: LIST
22899: LIST
22900: PPUSH
22901: CALL_OW 69
22905: IN
22906: ST_TO_ADDR
// end ;
22907: LD_VAR 0 2
22911: RET
// export function IsNotFull ( building ) ; begin
22912: LD_INT 0
22914: PPUSH
// if not building then
22915: LD_VAR 0 1
22919: NOT
22920: IFFALSE 22924
// exit ;
22922: GO 22943
// result := UnitsInside ( building ) < 6 ;
22924: LD_ADDR_VAR 0 2
22928: PUSH
22929: LD_VAR 0 1
22933: PPUSH
22934: CALL_OW 313
22938: PUSH
22939: LD_INT 6
22941: LESS
22942: ST_TO_ADDR
// end ;
22943: LD_VAR 0 2
22947: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
22948: LD_INT 0
22950: PPUSH
22951: PPUSH
22952: PPUSH
22953: PPUSH
// tmp := [ ] ;
22954: LD_ADDR_VAR 0 3
22958: PUSH
22959: EMPTY
22960: ST_TO_ADDR
// list := [ ] ;
22961: LD_ADDR_VAR 0 5
22965: PUSH
22966: EMPTY
22967: ST_TO_ADDR
// for i = 16 to 25 do
22968: LD_ADDR_VAR 0 4
22972: PUSH
22973: DOUBLE
22974: LD_INT 16
22976: DEC
22977: ST_TO_ADDR
22978: LD_INT 25
22980: PUSH
22981: FOR_TO
22982: IFFALSE 23055
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
22984: LD_ADDR_VAR 0 3
22988: PUSH
22989: LD_VAR 0 3
22993: PUSH
22994: LD_INT 22
22996: PUSH
22997: LD_VAR 0 1
23001: PPUSH
23002: CALL_OW 255
23006: PUSH
23007: EMPTY
23008: LIST
23009: LIST
23010: PUSH
23011: LD_INT 91
23013: PUSH
23014: LD_VAR 0 1
23018: PUSH
23019: LD_INT 6
23021: PUSH
23022: EMPTY
23023: LIST
23024: LIST
23025: LIST
23026: PUSH
23027: LD_INT 30
23029: PUSH
23030: LD_VAR 0 4
23034: PUSH
23035: EMPTY
23036: LIST
23037: LIST
23038: PUSH
23039: EMPTY
23040: LIST
23041: LIST
23042: LIST
23043: PUSH
23044: EMPTY
23045: LIST
23046: PPUSH
23047: CALL_OW 69
23051: ADD
23052: ST_TO_ADDR
23053: GO 22981
23055: POP
23056: POP
// for i = 1 to tmp do
23057: LD_ADDR_VAR 0 4
23061: PUSH
23062: DOUBLE
23063: LD_INT 1
23065: DEC
23066: ST_TO_ADDR
23067: LD_VAR 0 3
23071: PUSH
23072: FOR_TO
23073: IFFALSE 23161
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
23075: LD_ADDR_VAR 0 5
23079: PUSH
23080: LD_VAR 0 5
23084: PUSH
23085: LD_VAR 0 3
23089: PUSH
23090: LD_VAR 0 4
23094: ARRAY
23095: PPUSH
23096: CALL_OW 266
23100: PUSH
23101: LD_VAR 0 3
23105: PUSH
23106: LD_VAR 0 4
23110: ARRAY
23111: PPUSH
23112: CALL_OW 250
23116: PUSH
23117: LD_VAR 0 3
23121: PUSH
23122: LD_VAR 0 4
23126: ARRAY
23127: PPUSH
23128: CALL_OW 251
23132: PUSH
23133: LD_VAR 0 3
23137: PUSH
23138: LD_VAR 0 4
23142: ARRAY
23143: PPUSH
23144: CALL_OW 254
23148: PUSH
23149: EMPTY
23150: LIST
23151: LIST
23152: LIST
23153: LIST
23154: PUSH
23155: EMPTY
23156: LIST
23157: ADD
23158: ST_TO_ADDR
23159: GO 23072
23161: POP
23162: POP
// result := list ;
23163: LD_ADDR_VAR 0 2
23167: PUSH
23168: LD_VAR 0 5
23172: ST_TO_ADDR
// end ;
23173: LD_VAR 0 2
23177: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
23178: LD_INT 0
23180: PPUSH
23181: PPUSH
23182: PPUSH
23183: PPUSH
23184: PPUSH
23185: PPUSH
23186: PPUSH
// if not factory then
23187: LD_VAR 0 1
23191: NOT
23192: IFFALSE 23196
// exit ;
23194: GO 23789
// if control = control_apeman then
23196: LD_VAR 0 4
23200: PUSH
23201: LD_INT 5
23203: EQUAL
23204: IFFALSE 23313
// begin tmp := UnitsInside ( factory ) ;
23206: LD_ADDR_VAR 0 8
23210: PUSH
23211: LD_VAR 0 1
23215: PPUSH
23216: CALL_OW 313
23220: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
23221: LD_VAR 0 8
23225: PPUSH
23226: LD_INT 25
23228: PUSH
23229: LD_INT 12
23231: PUSH
23232: EMPTY
23233: LIST
23234: LIST
23235: PPUSH
23236: CALL_OW 72
23240: NOT
23241: IFFALSE 23251
// control := control_manual ;
23243: LD_ADDR_VAR 0 4
23247: PUSH
23248: LD_INT 1
23250: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
23251: LD_ADDR_VAR 0 8
23255: PUSH
23256: LD_VAR 0 1
23260: PPUSH
23261: CALL 22948 0 1
23265: ST_TO_ADDR
// if tmp then
23266: LD_VAR 0 8
23270: IFFALSE 23313
// begin for i in tmp do
23272: LD_ADDR_VAR 0 7
23276: PUSH
23277: LD_VAR 0 8
23281: PUSH
23282: FOR_IN
23283: IFFALSE 23311
// if i [ 1 ] = b_ext_radio then
23285: LD_VAR 0 7
23289: PUSH
23290: LD_INT 1
23292: ARRAY
23293: PUSH
23294: LD_INT 22
23296: EQUAL
23297: IFFALSE 23309
// begin control := control_remote ;
23299: LD_ADDR_VAR 0 4
23303: PUSH
23304: LD_INT 2
23306: ST_TO_ADDR
// break ;
23307: GO 23311
// end ;
23309: GO 23282
23311: POP
23312: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23313: LD_VAR 0 1
23317: PPUSH
23318: LD_VAR 0 2
23322: PPUSH
23323: LD_VAR 0 3
23327: PPUSH
23328: LD_VAR 0 4
23332: PPUSH
23333: LD_VAR 0 5
23337: PPUSH
23338: CALL_OW 448
23342: IFFALSE 23377
// begin result := [ chassis , engine , control , weapon ] ;
23344: LD_ADDR_VAR 0 6
23348: PUSH
23349: LD_VAR 0 2
23353: PUSH
23354: LD_VAR 0 3
23358: PUSH
23359: LD_VAR 0 4
23363: PUSH
23364: LD_VAR 0 5
23368: PUSH
23369: EMPTY
23370: LIST
23371: LIST
23372: LIST
23373: LIST
23374: ST_TO_ADDR
// exit ;
23375: GO 23789
// end ; _chassis := AvailableChassisList ( factory ) ;
23377: LD_ADDR_VAR 0 9
23381: PUSH
23382: LD_VAR 0 1
23386: PPUSH
23387: CALL_OW 475
23391: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
23392: LD_ADDR_VAR 0 11
23396: PUSH
23397: LD_VAR 0 1
23401: PPUSH
23402: CALL_OW 476
23406: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
23407: LD_ADDR_VAR 0 12
23411: PUSH
23412: LD_VAR 0 1
23416: PPUSH
23417: CALL_OW 477
23421: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
23422: LD_ADDR_VAR 0 10
23426: PUSH
23427: LD_VAR 0 1
23431: PPUSH
23432: CALL_OW 478
23436: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
23437: LD_VAR 0 9
23441: NOT
23442: PUSH
23443: LD_VAR 0 11
23447: NOT
23448: OR
23449: PUSH
23450: LD_VAR 0 12
23454: NOT
23455: OR
23456: PUSH
23457: LD_VAR 0 10
23461: NOT
23462: OR
23463: IFFALSE 23498
// begin result := [ chassis , engine , control , weapon ] ;
23465: LD_ADDR_VAR 0 6
23469: PUSH
23470: LD_VAR 0 2
23474: PUSH
23475: LD_VAR 0 3
23479: PUSH
23480: LD_VAR 0 4
23484: PUSH
23485: LD_VAR 0 5
23489: PUSH
23490: EMPTY
23491: LIST
23492: LIST
23493: LIST
23494: LIST
23495: ST_TO_ADDR
// exit ;
23496: GO 23789
// end ; if not chassis in _chassis then
23498: LD_VAR 0 2
23502: PUSH
23503: LD_VAR 0 9
23507: IN
23508: NOT
23509: IFFALSE 23535
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
23511: LD_ADDR_VAR 0 2
23515: PUSH
23516: LD_VAR 0 9
23520: PUSH
23521: LD_INT 1
23523: PPUSH
23524: LD_VAR 0 9
23528: PPUSH
23529: CALL_OW 12
23533: ARRAY
23534: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
23535: LD_VAR 0 2
23539: PPUSH
23540: LD_VAR 0 3
23544: PPUSH
23545: CALL 23794 0 2
23549: NOT
23550: IFFALSE 23609
// repeat engine := _engine [ 1 ] ;
23552: LD_ADDR_VAR 0 3
23556: PUSH
23557: LD_VAR 0 11
23561: PUSH
23562: LD_INT 1
23564: ARRAY
23565: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
23566: LD_ADDR_VAR 0 11
23570: PUSH
23571: LD_VAR 0 11
23575: PPUSH
23576: LD_INT 1
23578: PPUSH
23579: CALL_OW 3
23583: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
23584: LD_VAR 0 2
23588: PPUSH
23589: LD_VAR 0 3
23593: PPUSH
23594: CALL 23794 0 2
23598: PUSH
23599: LD_VAR 0 11
23603: PUSH
23604: EMPTY
23605: EQUAL
23606: OR
23607: IFFALSE 23552
// if not control in _control then
23609: LD_VAR 0 4
23613: PUSH
23614: LD_VAR 0 12
23618: IN
23619: NOT
23620: IFFALSE 23646
// control := _control [ rand ( 1 , _control ) ] ;
23622: LD_ADDR_VAR 0 4
23626: PUSH
23627: LD_VAR 0 12
23631: PUSH
23632: LD_INT 1
23634: PPUSH
23635: LD_VAR 0 12
23639: PPUSH
23640: CALL_OW 12
23644: ARRAY
23645: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
23646: LD_VAR 0 2
23650: PPUSH
23651: LD_VAR 0 5
23655: PPUSH
23656: CALL 24014 0 2
23660: NOT
23661: IFFALSE 23720
// repeat weapon := _weapon [ 1 ] ;
23663: LD_ADDR_VAR 0 5
23667: PUSH
23668: LD_VAR 0 10
23672: PUSH
23673: LD_INT 1
23675: ARRAY
23676: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
23677: LD_ADDR_VAR 0 10
23681: PUSH
23682: LD_VAR 0 10
23686: PPUSH
23687: LD_INT 1
23689: PPUSH
23690: CALL_OW 3
23694: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
23695: LD_VAR 0 2
23699: PPUSH
23700: LD_VAR 0 5
23704: PPUSH
23705: CALL 24014 0 2
23709: PUSH
23710: LD_VAR 0 10
23714: PUSH
23715: EMPTY
23716: EQUAL
23717: OR
23718: IFFALSE 23663
// result := [ ] ;
23720: LD_ADDR_VAR 0 6
23724: PUSH
23725: EMPTY
23726: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
23727: LD_VAR 0 1
23731: PPUSH
23732: LD_VAR 0 2
23736: PPUSH
23737: LD_VAR 0 3
23741: PPUSH
23742: LD_VAR 0 4
23746: PPUSH
23747: LD_VAR 0 5
23751: PPUSH
23752: CALL_OW 448
23756: IFFALSE 23789
// result := [ chassis , engine , control , weapon ] ;
23758: LD_ADDR_VAR 0 6
23762: PUSH
23763: LD_VAR 0 2
23767: PUSH
23768: LD_VAR 0 3
23772: PUSH
23773: LD_VAR 0 4
23777: PUSH
23778: LD_VAR 0 5
23782: PUSH
23783: EMPTY
23784: LIST
23785: LIST
23786: LIST
23787: LIST
23788: ST_TO_ADDR
// end ;
23789: LD_VAR 0 6
23793: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
23794: LD_INT 0
23796: PPUSH
// if not chassis or not engine then
23797: LD_VAR 0 1
23801: NOT
23802: PUSH
23803: LD_VAR 0 2
23807: NOT
23808: OR
23809: IFFALSE 23813
// exit ;
23811: GO 24009
// case engine of engine_solar :
23813: LD_VAR 0 2
23817: PUSH
23818: LD_INT 2
23820: DOUBLE
23821: EQUAL
23822: IFTRUE 23826
23824: GO 23864
23826: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
23827: LD_ADDR_VAR 0 3
23831: PUSH
23832: LD_INT 11
23834: PUSH
23835: LD_INT 12
23837: PUSH
23838: LD_INT 13
23840: PUSH
23841: LD_INT 14
23843: PUSH
23844: LD_INT 1
23846: PUSH
23847: LD_INT 2
23849: PUSH
23850: LD_INT 3
23852: PUSH
23853: EMPTY
23854: LIST
23855: LIST
23856: LIST
23857: LIST
23858: LIST
23859: LIST
23860: LIST
23861: ST_TO_ADDR
23862: GO 23993
23864: LD_INT 1
23866: DOUBLE
23867: EQUAL
23868: IFTRUE 23872
23870: GO 23934
23872: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
23873: LD_ADDR_VAR 0 3
23877: PUSH
23878: LD_INT 11
23880: PUSH
23881: LD_INT 12
23883: PUSH
23884: LD_INT 13
23886: PUSH
23887: LD_INT 14
23889: PUSH
23890: LD_INT 1
23892: PUSH
23893: LD_INT 2
23895: PUSH
23896: LD_INT 3
23898: PUSH
23899: LD_INT 4
23901: PUSH
23902: LD_INT 5
23904: PUSH
23905: LD_INT 21
23907: PUSH
23908: LD_INT 23
23910: PUSH
23911: LD_INT 22
23913: PUSH
23914: LD_INT 24
23916: PUSH
23917: EMPTY
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: ST_TO_ADDR
23932: GO 23993
23934: LD_INT 3
23936: DOUBLE
23937: EQUAL
23938: IFTRUE 23942
23940: GO 23992
23942: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
23943: LD_ADDR_VAR 0 3
23947: PUSH
23948: LD_INT 13
23950: PUSH
23951: LD_INT 14
23953: PUSH
23954: LD_INT 2
23956: PUSH
23957: LD_INT 3
23959: PUSH
23960: LD_INT 4
23962: PUSH
23963: LD_INT 5
23965: PUSH
23966: LD_INT 21
23968: PUSH
23969: LD_INT 22
23971: PUSH
23972: LD_INT 23
23974: PUSH
23975: LD_INT 24
23977: PUSH
23978: EMPTY
23979: LIST
23980: LIST
23981: LIST
23982: LIST
23983: LIST
23984: LIST
23985: LIST
23986: LIST
23987: LIST
23988: LIST
23989: ST_TO_ADDR
23990: GO 23993
23992: POP
// result := ( chassis in result ) ;
23993: LD_ADDR_VAR 0 3
23997: PUSH
23998: LD_VAR 0 1
24002: PUSH
24003: LD_VAR 0 3
24007: IN
24008: ST_TO_ADDR
// end ;
24009: LD_VAR 0 3
24013: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
24014: LD_INT 0
24016: PPUSH
// if not chassis or not weapon then
24017: LD_VAR 0 1
24021: NOT
24022: PUSH
24023: LD_VAR 0 2
24027: NOT
24028: OR
24029: IFFALSE 24033
// exit ;
24031: GO 25059
// case weapon of us_machine_gun :
24033: LD_VAR 0 2
24037: PUSH
24038: LD_INT 2
24040: DOUBLE
24041: EQUAL
24042: IFTRUE 24046
24044: GO 24076
24046: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
24047: LD_ADDR_VAR 0 3
24051: PUSH
24052: LD_INT 1
24054: PUSH
24055: LD_INT 2
24057: PUSH
24058: LD_INT 3
24060: PUSH
24061: LD_INT 4
24063: PUSH
24064: LD_INT 5
24066: PUSH
24067: EMPTY
24068: LIST
24069: LIST
24070: LIST
24071: LIST
24072: LIST
24073: ST_TO_ADDR
24074: GO 25043
24076: LD_INT 3
24078: DOUBLE
24079: EQUAL
24080: IFTRUE 24084
24082: GO 24114
24084: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
24085: LD_ADDR_VAR 0 3
24089: PUSH
24090: LD_INT 1
24092: PUSH
24093: LD_INT 2
24095: PUSH
24096: LD_INT 3
24098: PUSH
24099: LD_INT 4
24101: PUSH
24102: LD_INT 5
24104: PUSH
24105: EMPTY
24106: LIST
24107: LIST
24108: LIST
24109: LIST
24110: LIST
24111: ST_TO_ADDR
24112: GO 25043
24114: LD_INT 11
24116: DOUBLE
24117: EQUAL
24118: IFTRUE 24122
24120: GO 24152
24122: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
24123: LD_ADDR_VAR 0 3
24127: PUSH
24128: LD_INT 1
24130: PUSH
24131: LD_INT 2
24133: PUSH
24134: LD_INT 3
24136: PUSH
24137: LD_INT 4
24139: PUSH
24140: LD_INT 5
24142: PUSH
24143: EMPTY
24144: LIST
24145: LIST
24146: LIST
24147: LIST
24148: LIST
24149: ST_TO_ADDR
24150: GO 25043
24152: LD_INT 4
24154: DOUBLE
24155: EQUAL
24156: IFTRUE 24160
24158: GO 24186
24160: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
24161: LD_ADDR_VAR 0 3
24165: PUSH
24166: LD_INT 2
24168: PUSH
24169: LD_INT 3
24171: PUSH
24172: LD_INT 4
24174: PUSH
24175: LD_INT 5
24177: PUSH
24178: EMPTY
24179: LIST
24180: LIST
24181: LIST
24182: LIST
24183: ST_TO_ADDR
24184: GO 25043
24186: LD_INT 5
24188: DOUBLE
24189: EQUAL
24190: IFTRUE 24194
24192: GO 24220
24194: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
24195: LD_ADDR_VAR 0 3
24199: PUSH
24200: LD_INT 2
24202: PUSH
24203: LD_INT 3
24205: PUSH
24206: LD_INT 4
24208: PUSH
24209: LD_INT 5
24211: PUSH
24212: EMPTY
24213: LIST
24214: LIST
24215: LIST
24216: LIST
24217: ST_TO_ADDR
24218: GO 25043
24220: LD_INT 9
24222: DOUBLE
24223: EQUAL
24224: IFTRUE 24228
24226: GO 24254
24228: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
24229: LD_ADDR_VAR 0 3
24233: PUSH
24234: LD_INT 2
24236: PUSH
24237: LD_INT 3
24239: PUSH
24240: LD_INT 4
24242: PUSH
24243: LD_INT 5
24245: PUSH
24246: EMPTY
24247: LIST
24248: LIST
24249: LIST
24250: LIST
24251: ST_TO_ADDR
24252: GO 25043
24254: LD_INT 7
24256: DOUBLE
24257: EQUAL
24258: IFTRUE 24262
24260: GO 24288
24262: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
24263: LD_ADDR_VAR 0 3
24267: PUSH
24268: LD_INT 2
24270: PUSH
24271: LD_INT 3
24273: PUSH
24274: LD_INT 4
24276: PUSH
24277: LD_INT 5
24279: PUSH
24280: EMPTY
24281: LIST
24282: LIST
24283: LIST
24284: LIST
24285: ST_TO_ADDR
24286: GO 25043
24288: LD_INT 12
24290: DOUBLE
24291: EQUAL
24292: IFTRUE 24296
24294: GO 24322
24296: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
24297: LD_ADDR_VAR 0 3
24301: PUSH
24302: LD_INT 2
24304: PUSH
24305: LD_INT 3
24307: PUSH
24308: LD_INT 4
24310: PUSH
24311: LD_INT 5
24313: PUSH
24314: EMPTY
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: ST_TO_ADDR
24320: GO 25043
24322: LD_INT 13
24324: DOUBLE
24325: EQUAL
24326: IFTRUE 24330
24328: GO 24356
24330: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
24331: LD_ADDR_VAR 0 3
24335: PUSH
24336: LD_INT 2
24338: PUSH
24339: LD_INT 3
24341: PUSH
24342: LD_INT 4
24344: PUSH
24345: LD_INT 5
24347: PUSH
24348: EMPTY
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: ST_TO_ADDR
24354: GO 25043
24356: LD_INT 14
24358: DOUBLE
24359: EQUAL
24360: IFTRUE 24364
24362: GO 24382
24364: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
24365: LD_ADDR_VAR 0 3
24369: PUSH
24370: LD_INT 4
24372: PUSH
24373: LD_INT 5
24375: PUSH
24376: EMPTY
24377: LIST
24378: LIST
24379: ST_TO_ADDR
24380: GO 25043
24382: LD_INT 6
24384: DOUBLE
24385: EQUAL
24386: IFTRUE 24390
24388: GO 24408
24390: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
24391: LD_ADDR_VAR 0 3
24395: PUSH
24396: LD_INT 4
24398: PUSH
24399: LD_INT 5
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: ST_TO_ADDR
24406: GO 25043
24408: LD_INT 10
24410: DOUBLE
24411: EQUAL
24412: IFTRUE 24416
24414: GO 24434
24416: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
24417: LD_ADDR_VAR 0 3
24421: PUSH
24422: LD_INT 4
24424: PUSH
24425: LD_INT 5
24427: PUSH
24428: EMPTY
24429: LIST
24430: LIST
24431: ST_TO_ADDR
24432: GO 25043
24434: LD_INT 22
24436: DOUBLE
24437: EQUAL
24438: IFTRUE 24442
24440: GO 24468
24442: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
24443: LD_ADDR_VAR 0 3
24447: PUSH
24448: LD_INT 11
24450: PUSH
24451: LD_INT 12
24453: PUSH
24454: LD_INT 13
24456: PUSH
24457: LD_INT 14
24459: PUSH
24460: EMPTY
24461: LIST
24462: LIST
24463: LIST
24464: LIST
24465: ST_TO_ADDR
24466: GO 25043
24468: LD_INT 23
24470: DOUBLE
24471: EQUAL
24472: IFTRUE 24476
24474: GO 24502
24476: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
24477: LD_ADDR_VAR 0 3
24481: PUSH
24482: LD_INT 11
24484: PUSH
24485: LD_INT 12
24487: PUSH
24488: LD_INT 13
24490: PUSH
24491: LD_INT 14
24493: PUSH
24494: EMPTY
24495: LIST
24496: LIST
24497: LIST
24498: LIST
24499: ST_TO_ADDR
24500: GO 25043
24502: LD_INT 24
24504: DOUBLE
24505: EQUAL
24506: IFTRUE 24510
24508: GO 24536
24510: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
24511: LD_ADDR_VAR 0 3
24515: PUSH
24516: LD_INT 11
24518: PUSH
24519: LD_INT 12
24521: PUSH
24522: LD_INT 13
24524: PUSH
24525: LD_INT 14
24527: PUSH
24528: EMPTY
24529: LIST
24530: LIST
24531: LIST
24532: LIST
24533: ST_TO_ADDR
24534: GO 25043
24536: LD_INT 30
24538: DOUBLE
24539: EQUAL
24540: IFTRUE 24544
24542: GO 24570
24544: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
24545: LD_ADDR_VAR 0 3
24549: PUSH
24550: LD_INT 11
24552: PUSH
24553: LD_INT 12
24555: PUSH
24556: LD_INT 13
24558: PUSH
24559: LD_INT 14
24561: PUSH
24562: EMPTY
24563: LIST
24564: LIST
24565: LIST
24566: LIST
24567: ST_TO_ADDR
24568: GO 25043
24570: LD_INT 25
24572: DOUBLE
24573: EQUAL
24574: IFTRUE 24578
24576: GO 24596
24578: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
24579: LD_ADDR_VAR 0 3
24583: PUSH
24584: LD_INT 13
24586: PUSH
24587: LD_INT 14
24589: PUSH
24590: EMPTY
24591: LIST
24592: LIST
24593: ST_TO_ADDR
24594: GO 25043
24596: LD_INT 27
24598: DOUBLE
24599: EQUAL
24600: IFTRUE 24604
24602: GO 24622
24604: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
24605: LD_ADDR_VAR 0 3
24609: PUSH
24610: LD_INT 13
24612: PUSH
24613: LD_INT 14
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: ST_TO_ADDR
24620: GO 25043
24622: LD_INT 28
24624: DOUBLE
24625: EQUAL
24626: IFTRUE 24630
24628: GO 24648
24630: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
24631: LD_ADDR_VAR 0 3
24635: PUSH
24636: LD_INT 13
24638: PUSH
24639: LD_INT 14
24641: PUSH
24642: EMPTY
24643: LIST
24644: LIST
24645: ST_TO_ADDR
24646: GO 25043
24648: LD_INT 29
24650: DOUBLE
24651: EQUAL
24652: IFTRUE 24656
24654: GO 24674
24656: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
24657: LD_ADDR_VAR 0 3
24661: PUSH
24662: LD_INT 13
24664: PUSH
24665: LD_INT 14
24667: PUSH
24668: EMPTY
24669: LIST
24670: LIST
24671: ST_TO_ADDR
24672: GO 25043
24674: LD_INT 31
24676: DOUBLE
24677: EQUAL
24678: IFTRUE 24682
24680: GO 24700
24682: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
24683: LD_ADDR_VAR 0 3
24687: PUSH
24688: LD_INT 13
24690: PUSH
24691: LD_INT 14
24693: PUSH
24694: EMPTY
24695: LIST
24696: LIST
24697: ST_TO_ADDR
24698: GO 25043
24700: LD_INT 26
24702: DOUBLE
24703: EQUAL
24704: IFTRUE 24708
24706: GO 24726
24708: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
24709: LD_ADDR_VAR 0 3
24713: PUSH
24714: LD_INT 13
24716: PUSH
24717: LD_INT 14
24719: PUSH
24720: EMPTY
24721: LIST
24722: LIST
24723: ST_TO_ADDR
24724: GO 25043
24726: LD_INT 42
24728: DOUBLE
24729: EQUAL
24730: IFTRUE 24734
24732: GO 24760
24734: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
24735: LD_ADDR_VAR 0 3
24739: PUSH
24740: LD_INT 21
24742: PUSH
24743: LD_INT 22
24745: PUSH
24746: LD_INT 23
24748: PUSH
24749: LD_INT 24
24751: PUSH
24752: EMPTY
24753: LIST
24754: LIST
24755: LIST
24756: LIST
24757: ST_TO_ADDR
24758: GO 25043
24760: LD_INT 43
24762: DOUBLE
24763: EQUAL
24764: IFTRUE 24768
24766: GO 24794
24768: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
24769: LD_ADDR_VAR 0 3
24773: PUSH
24774: LD_INT 21
24776: PUSH
24777: LD_INT 22
24779: PUSH
24780: LD_INT 23
24782: PUSH
24783: LD_INT 24
24785: PUSH
24786: EMPTY
24787: LIST
24788: LIST
24789: LIST
24790: LIST
24791: ST_TO_ADDR
24792: GO 25043
24794: LD_INT 44
24796: DOUBLE
24797: EQUAL
24798: IFTRUE 24802
24800: GO 24828
24802: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
24803: LD_ADDR_VAR 0 3
24807: PUSH
24808: LD_INT 21
24810: PUSH
24811: LD_INT 22
24813: PUSH
24814: LD_INT 23
24816: PUSH
24817: LD_INT 24
24819: PUSH
24820: EMPTY
24821: LIST
24822: LIST
24823: LIST
24824: LIST
24825: ST_TO_ADDR
24826: GO 25043
24828: LD_INT 45
24830: DOUBLE
24831: EQUAL
24832: IFTRUE 24836
24834: GO 24862
24836: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
24837: LD_ADDR_VAR 0 3
24841: PUSH
24842: LD_INT 21
24844: PUSH
24845: LD_INT 22
24847: PUSH
24848: LD_INT 23
24850: PUSH
24851: LD_INT 24
24853: PUSH
24854: EMPTY
24855: LIST
24856: LIST
24857: LIST
24858: LIST
24859: ST_TO_ADDR
24860: GO 25043
24862: LD_INT 49
24864: DOUBLE
24865: EQUAL
24866: IFTRUE 24870
24868: GO 24896
24870: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
24871: LD_ADDR_VAR 0 3
24875: PUSH
24876: LD_INT 21
24878: PUSH
24879: LD_INT 22
24881: PUSH
24882: LD_INT 23
24884: PUSH
24885: LD_INT 24
24887: PUSH
24888: EMPTY
24889: LIST
24890: LIST
24891: LIST
24892: LIST
24893: ST_TO_ADDR
24894: GO 25043
24896: LD_INT 51
24898: DOUBLE
24899: EQUAL
24900: IFTRUE 24904
24902: GO 24930
24904: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
24905: LD_ADDR_VAR 0 3
24909: PUSH
24910: LD_INT 21
24912: PUSH
24913: LD_INT 22
24915: PUSH
24916: LD_INT 23
24918: PUSH
24919: LD_INT 24
24921: PUSH
24922: EMPTY
24923: LIST
24924: LIST
24925: LIST
24926: LIST
24927: ST_TO_ADDR
24928: GO 25043
24930: LD_INT 52
24932: DOUBLE
24933: EQUAL
24934: IFTRUE 24938
24936: GO 24964
24938: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
24939: LD_ADDR_VAR 0 3
24943: PUSH
24944: LD_INT 21
24946: PUSH
24947: LD_INT 22
24949: PUSH
24950: LD_INT 23
24952: PUSH
24953: LD_INT 24
24955: PUSH
24956: EMPTY
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: ST_TO_ADDR
24962: GO 25043
24964: LD_INT 53
24966: DOUBLE
24967: EQUAL
24968: IFTRUE 24972
24970: GO 24990
24972: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
24973: LD_ADDR_VAR 0 3
24977: PUSH
24978: LD_INT 23
24980: PUSH
24981: LD_INT 24
24983: PUSH
24984: EMPTY
24985: LIST
24986: LIST
24987: ST_TO_ADDR
24988: GO 25043
24990: LD_INT 46
24992: DOUBLE
24993: EQUAL
24994: IFTRUE 24998
24996: GO 25016
24998: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
24999: LD_ADDR_VAR 0 3
25003: PUSH
25004: LD_INT 23
25006: PUSH
25007: LD_INT 24
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: ST_TO_ADDR
25014: GO 25043
25016: LD_INT 47
25018: DOUBLE
25019: EQUAL
25020: IFTRUE 25024
25022: GO 25042
25024: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
25025: LD_ADDR_VAR 0 3
25029: PUSH
25030: LD_INT 23
25032: PUSH
25033: LD_INT 24
25035: PUSH
25036: EMPTY
25037: LIST
25038: LIST
25039: ST_TO_ADDR
25040: GO 25043
25042: POP
// result := ( chassis in result ) ;
25043: LD_ADDR_VAR 0 3
25047: PUSH
25048: LD_VAR 0 1
25052: PUSH
25053: LD_VAR 0 3
25057: IN
25058: ST_TO_ADDR
// end ;
25059: LD_VAR 0 3
25063: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
25064: LD_INT 0
25066: PPUSH
25067: PPUSH
25068: PPUSH
25069: PPUSH
25070: PPUSH
25071: PPUSH
25072: PPUSH
// result := array ;
25073: LD_ADDR_VAR 0 5
25077: PUSH
25078: LD_VAR 0 1
25082: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
25083: LD_VAR 0 1
25087: NOT
25088: PUSH
25089: LD_VAR 0 2
25093: NOT
25094: OR
25095: PUSH
25096: LD_VAR 0 3
25100: NOT
25101: OR
25102: PUSH
25103: LD_VAR 0 2
25107: PUSH
25108: LD_VAR 0 1
25112: GREATER
25113: OR
25114: PUSH
25115: LD_VAR 0 3
25119: PUSH
25120: LD_VAR 0 1
25124: GREATER
25125: OR
25126: IFFALSE 25130
// exit ;
25128: GO 25426
// if direction then
25130: LD_VAR 0 4
25134: IFFALSE 25198
// begin d := 1 ;
25136: LD_ADDR_VAR 0 9
25140: PUSH
25141: LD_INT 1
25143: ST_TO_ADDR
// if i_from > i_to then
25144: LD_VAR 0 2
25148: PUSH
25149: LD_VAR 0 3
25153: GREATER
25154: IFFALSE 25180
// length := ( array - i_from ) + i_to else
25156: LD_ADDR_VAR 0 11
25160: PUSH
25161: LD_VAR 0 1
25165: PUSH
25166: LD_VAR 0 2
25170: MINUS
25171: PUSH
25172: LD_VAR 0 3
25176: PLUS
25177: ST_TO_ADDR
25178: GO 25196
// length := i_to - i_from ;
25180: LD_ADDR_VAR 0 11
25184: PUSH
25185: LD_VAR 0 3
25189: PUSH
25190: LD_VAR 0 2
25194: MINUS
25195: ST_TO_ADDR
// end else
25196: GO 25259
// begin d := - 1 ;
25198: LD_ADDR_VAR 0 9
25202: PUSH
25203: LD_INT 1
25205: NEG
25206: ST_TO_ADDR
// if i_from > i_to then
25207: LD_VAR 0 2
25211: PUSH
25212: LD_VAR 0 3
25216: GREATER
25217: IFFALSE 25237
// length := i_from - i_to else
25219: LD_ADDR_VAR 0 11
25223: PUSH
25224: LD_VAR 0 2
25228: PUSH
25229: LD_VAR 0 3
25233: MINUS
25234: ST_TO_ADDR
25235: GO 25259
// length := ( array - i_to ) + i_from ;
25237: LD_ADDR_VAR 0 11
25241: PUSH
25242: LD_VAR 0 1
25246: PUSH
25247: LD_VAR 0 3
25251: MINUS
25252: PUSH
25253: LD_VAR 0 2
25257: PLUS
25258: ST_TO_ADDR
// end ; if not length then
25259: LD_VAR 0 11
25263: NOT
25264: IFFALSE 25268
// exit ;
25266: GO 25426
// tmp := array ;
25268: LD_ADDR_VAR 0 10
25272: PUSH
25273: LD_VAR 0 1
25277: ST_TO_ADDR
// for i = 1 to length do
25278: LD_ADDR_VAR 0 6
25282: PUSH
25283: DOUBLE
25284: LD_INT 1
25286: DEC
25287: ST_TO_ADDR
25288: LD_VAR 0 11
25292: PUSH
25293: FOR_TO
25294: IFFALSE 25414
// begin for j = 1 to array do
25296: LD_ADDR_VAR 0 7
25300: PUSH
25301: DOUBLE
25302: LD_INT 1
25304: DEC
25305: ST_TO_ADDR
25306: LD_VAR 0 1
25310: PUSH
25311: FOR_TO
25312: IFFALSE 25400
// begin k := j + d ;
25314: LD_ADDR_VAR 0 8
25318: PUSH
25319: LD_VAR 0 7
25323: PUSH
25324: LD_VAR 0 9
25328: PLUS
25329: ST_TO_ADDR
// if k > array then
25330: LD_VAR 0 8
25334: PUSH
25335: LD_VAR 0 1
25339: GREATER
25340: IFFALSE 25350
// k := 1 ;
25342: LD_ADDR_VAR 0 8
25346: PUSH
25347: LD_INT 1
25349: ST_TO_ADDR
// if not k then
25350: LD_VAR 0 8
25354: NOT
25355: IFFALSE 25367
// k := array ;
25357: LD_ADDR_VAR 0 8
25361: PUSH
25362: LD_VAR 0 1
25366: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
25367: LD_ADDR_VAR 0 10
25371: PUSH
25372: LD_VAR 0 10
25376: PPUSH
25377: LD_VAR 0 8
25381: PPUSH
25382: LD_VAR 0 1
25386: PUSH
25387: LD_VAR 0 7
25391: ARRAY
25392: PPUSH
25393: CALL_OW 1
25397: ST_TO_ADDR
// end ;
25398: GO 25311
25400: POP
25401: POP
// array := tmp ;
25402: LD_ADDR_VAR 0 1
25406: PUSH
25407: LD_VAR 0 10
25411: ST_TO_ADDR
// end ;
25412: GO 25293
25414: POP
25415: POP
// result := array ;
25416: LD_ADDR_VAR 0 5
25420: PUSH
25421: LD_VAR 0 1
25425: ST_TO_ADDR
// end ;
25426: LD_VAR 0 5
25430: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
25431: LD_INT 0
25433: PPUSH
25434: PPUSH
// result := 0 ;
25435: LD_ADDR_VAR 0 3
25439: PUSH
25440: LD_INT 0
25442: ST_TO_ADDR
// if not array or not value in array then
25443: LD_VAR 0 1
25447: NOT
25448: PUSH
25449: LD_VAR 0 2
25453: PUSH
25454: LD_VAR 0 1
25458: IN
25459: NOT
25460: OR
25461: IFFALSE 25465
// exit ;
25463: GO 25519
// for i = 1 to array do
25465: LD_ADDR_VAR 0 4
25469: PUSH
25470: DOUBLE
25471: LD_INT 1
25473: DEC
25474: ST_TO_ADDR
25475: LD_VAR 0 1
25479: PUSH
25480: FOR_TO
25481: IFFALSE 25517
// if value = array [ i ] then
25483: LD_VAR 0 2
25487: PUSH
25488: LD_VAR 0 1
25492: PUSH
25493: LD_VAR 0 4
25497: ARRAY
25498: EQUAL
25499: IFFALSE 25515
// begin result := i ;
25501: LD_ADDR_VAR 0 3
25505: PUSH
25506: LD_VAR 0 4
25510: ST_TO_ADDR
// exit ;
25511: POP
25512: POP
25513: GO 25519
// end ;
25515: GO 25480
25517: POP
25518: POP
// end ;
25519: LD_VAR 0 3
25523: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
25524: LD_INT 0
25526: PPUSH
// vc_chassis := chassis ;
25527: LD_ADDR_OWVAR 37
25531: PUSH
25532: LD_VAR 0 1
25536: ST_TO_ADDR
// vc_engine := engine ;
25537: LD_ADDR_OWVAR 39
25541: PUSH
25542: LD_VAR 0 2
25546: ST_TO_ADDR
// vc_control := control ;
25547: LD_ADDR_OWVAR 38
25551: PUSH
25552: LD_VAR 0 3
25556: ST_TO_ADDR
// vc_weapon := weapon ;
25557: LD_ADDR_OWVAR 40
25561: PUSH
25562: LD_VAR 0 4
25566: ST_TO_ADDR
// vc_fuel_battery := fuel ;
25567: LD_ADDR_OWVAR 41
25571: PUSH
25572: LD_VAR 0 5
25576: ST_TO_ADDR
// end ;
25577: LD_VAR 0 6
25581: RET
// export function WantPlant ( unit ) ; var task ; begin
25582: LD_INT 0
25584: PPUSH
25585: PPUSH
// result := false ;
25586: LD_ADDR_VAR 0 2
25590: PUSH
25591: LD_INT 0
25593: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
25594: LD_ADDR_VAR 0 3
25598: PUSH
25599: LD_VAR 0 1
25603: PPUSH
25604: CALL_OW 437
25608: ST_TO_ADDR
// if task then
25609: LD_VAR 0 3
25613: IFFALSE 25641
// if task [ 1 ] [ 1 ] = p then
25615: LD_VAR 0 3
25619: PUSH
25620: LD_INT 1
25622: ARRAY
25623: PUSH
25624: LD_INT 1
25626: ARRAY
25627: PUSH
25628: LD_STRING p
25630: EQUAL
25631: IFFALSE 25641
// result := true ;
25633: LD_ADDR_VAR 0 2
25637: PUSH
25638: LD_INT 1
25640: ST_TO_ADDR
// end ;
25641: LD_VAR 0 2
25645: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
25646: LD_INT 0
25648: PPUSH
25649: PPUSH
25650: PPUSH
25651: PPUSH
// if pos < 1 then
25652: LD_VAR 0 2
25656: PUSH
25657: LD_INT 1
25659: LESS
25660: IFFALSE 25664
// exit ;
25662: GO 25967
// if pos = 1 then
25664: LD_VAR 0 2
25668: PUSH
25669: LD_INT 1
25671: EQUAL
25672: IFFALSE 25705
// result := Replace ( arr , pos [ 1 ] , value ) else
25674: LD_ADDR_VAR 0 4
25678: PUSH
25679: LD_VAR 0 1
25683: PPUSH
25684: LD_VAR 0 2
25688: PUSH
25689: LD_INT 1
25691: ARRAY
25692: PPUSH
25693: LD_VAR 0 3
25697: PPUSH
25698: CALL_OW 1
25702: ST_TO_ADDR
25703: GO 25967
// begin tmp := arr ;
25705: LD_ADDR_VAR 0 6
25709: PUSH
25710: LD_VAR 0 1
25714: ST_TO_ADDR
// s_arr := [ tmp ] ;
25715: LD_ADDR_VAR 0 7
25719: PUSH
25720: LD_VAR 0 6
25724: PUSH
25725: EMPTY
25726: LIST
25727: ST_TO_ADDR
// for i = 1 to pos - 1 do
25728: LD_ADDR_VAR 0 5
25732: PUSH
25733: DOUBLE
25734: LD_INT 1
25736: DEC
25737: ST_TO_ADDR
25738: LD_VAR 0 2
25742: PUSH
25743: LD_INT 1
25745: MINUS
25746: PUSH
25747: FOR_TO
25748: IFFALSE 25793
// begin tmp := tmp [ pos [ i ] ] ;
25750: LD_ADDR_VAR 0 6
25754: PUSH
25755: LD_VAR 0 6
25759: PUSH
25760: LD_VAR 0 2
25764: PUSH
25765: LD_VAR 0 5
25769: ARRAY
25770: ARRAY
25771: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
25772: LD_ADDR_VAR 0 7
25776: PUSH
25777: LD_VAR 0 7
25781: PUSH
25782: LD_VAR 0 6
25786: PUSH
25787: EMPTY
25788: LIST
25789: ADD
25790: ST_TO_ADDR
// end ;
25791: GO 25747
25793: POP
25794: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
25795: LD_ADDR_VAR 0 6
25799: PUSH
25800: LD_VAR 0 6
25804: PPUSH
25805: LD_VAR 0 2
25809: PUSH
25810: LD_VAR 0 2
25814: ARRAY
25815: PPUSH
25816: LD_VAR 0 3
25820: PPUSH
25821: CALL_OW 1
25825: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
25826: LD_ADDR_VAR 0 7
25830: PUSH
25831: LD_VAR 0 7
25835: PPUSH
25836: LD_VAR 0 7
25840: PPUSH
25841: LD_VAR 0 6
25845: PPUSH
25846: CALL_OW 1
25850: ST_TO_ADDR
// for i = s_arr downto 2 do
25851: LD_ADDR_VAR 0 5
25855: PUSH
25856: DOUBLE
25857: LD_VAR 0 7
25861: INC
25862: ST_TO_ADDR
25863: LD_INT 2
25865: PUSH
25866: FOR_DOWNTO
25867: IFFALSE 25951
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
25869: LD_ADDR_VAR 0 6
25873: PUSH
25874: LD_VAR 0 7
25878: PUSH
25879: LD_VAR 0 5
25883: PUSH
25884: LD_INT 1
25886: MINUS
25887: ARRAY
25888: PPUSH
25889: LD_VAR 0 2
25893: PUSH
25894: LD_VAR 0 5
25898: PUSH
25899: LD_INT 1
25901: MINUS
25902: ARRAY
25903: PPUSH
25904: LD_VAR 0 7
25908: PUSH
25909: LD_VAR 0 5
25913: ARRAY
25914: PPUSH
25915: CALL_OW 1
25919: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
25920: LD_ADDR_VAR 0 7
25924: PUSH
25925: LD_VAR 0 7
25929: PPUSH
25930: LD_VAR 0 5
25934: PUSH
25935: LD_INT 1
25937: MINUS
25938: PPUSH
25939: LD_VAR 0 6
25943: PPUSH
25944: CALL_OW 1
25948: ST_TO_ADDR
// end ;
25949: GO 25866
25951: POP
25952: POP
// result := s_arr [ 1 ] ;
25953: LD_ADDR_VAR 0 4
25957: PUSH
25958: LD_VAR 0 7
25962: PUSH
25963: LD_INT 1
25965: ARRAY
25966: ST_TO_ADDR
// end ; end ;
25967: LD_VAR 0 4
25971: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
25972: LD_INT 0
25974: PPUSH
25975: PPUSH
// if not list then
25976: LD_VAR 0 1
25980: NOT
25981: IFFALSE 25985
// exit ;
25983: GO 26076
// i := list [ pos1 ] ;
25985: LD_ADDR_VAR 0 5
25989: PUSH
25990: LD_VAR 0 1
25994: PUSH
25995: LD_VAR 0 2
25999: ARRAY
26000: ST_TO_ADDR
// if not i then
26001: LD_VAR 0 5
26005: NOT
26006: IFFALSE 26010
// exit ;
26008: GO 26076
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
26010: LD_ADDR_VAR 0 1
26014: PUSH
26015: LD_VAR 0 1
26019: PPUSH
26020: LD_VAR 0 2
26024: PPUSH
26025: LD_VAR 0 1
26029: PUSH
26030: LD_VAR 0 3
26034: ARRAY
26035: PPUSH
26036: CALL_OW 1
26040: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
26041: LD_ADDR_VAR 0 1
26045: PUSH
26046: LD_VAR 0 1
26050: PPUSH
26051: LD_VAR 0 3
26055: PPUSH
26056: LD_VAR 0 5
26060: PPUSH
26061: CALL_OW 1
26065: ST_TO_ADDR
// result := list ;
26066: LD_ADDR_VAR 0 4
26070: PUSH
26071: LD_VAR 0 1
26075: ST_TO_ADDR
// end ;
26076: LD_VAR 0 4
26080: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
26081: LD_INT 0
26083: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
26084: LD_ADDR_VAR 0 5
26088: PUSH
26089: LD_VAR 0 1
26093: PPUSH
26094: CALL_OW 250
26098: PPUSH
26099: LD_VAR 0 1
26103: PPUSH
26104: CALL_OW 251
26108: PPUSH
26109: LD_VAR 0 2
26113: PPUSH
26114: LD_VAR 0 3
26118: PPUSH
26119: LD_VAR 0 4
26123: PPUSH
26124: CALL 26134 0 5
26128: ST_TO_ADDR
// end ;
26129: LD_VAR 0 5
26133: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
26134: LD_INT 0
26136: PPUSH
26137: PPUSH
26138: PPUSH
26139: PPUSH
// if not list then
26140: LD_VAR 0 3
26144: NOT
26145: IFFALSE 26149
// exit ;
26147: GO 26537
// result := [ ] ;
26149: LD_ADDR_VAR 0 6
26153: PUSH
26154: EMPTY
26155: ST_TO_ADDR
// for i in list do
26156: LD_ADDR_VAR 0 7
26160: PUSH
26161: LD_VAR 0 3
26165: PUSH
26166: FOR_IN
26167: IFFALSE 26369
// begin tmp := GetDistUnitXY ( i , x , y ) ;
26169: LD_ADDR_VAR 0 9
26173: PUSH
26174: LD_VAR 0 7
26178: PPUSH
26179: LD_VAR 0 1
26183: PPUSH
26184: LD_VAR 0 2
26188: PPUSH
26189: CALL_OW 297
26193: ST_TO_ADDR
// if not result then
26194: LD_VAR 0 6
26198: NOT
26199: IFFALSE 26225
// result := [ [ i , tmp ] ] else
26201: LD_ADDR_VAR 0 6
26205: PUSH
26206: LD_VAR 0 7
26210: PUSH
26211: LD_VAR 0 9
26215: PUSH
26216: EMPTY
26217: LIST
26218: LIST
26219: PUSH
26220: EMPTY
26221: LIST
26222: ST_TO_ADDR
26223: GO 26367
// begin if result [ result ] [ 2 ] < tmp then
26225: LD_VAR 0 6
26229: PUSH
26230: LD_VAR 0 6
26234: ARRAY
26235: PUSH
26236: LD_INT 2
26238: ARRAY
26239: PUSH
26240: LD_VAR 0 9
26244: LESS
26245: IFFALSE 26287
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
26247: LD_ADDR_VAR 0 6
26251: PUSH
26252: LD_VAR 0 6
26256: PPUSH
26257: LD_VAR 0 6
26261: PUSH
26262: LD_INT 1
26264: PLUS
26265: PPUSH
26266: LD_VAR 0 7
26270: PUSH
26271: LD_VAR 0 9
26275: PUSH
26276: EMPTY
26277: LIST
26278: LIST
26279: PPUSH
26280: CALL_OW 2
26284: ST_TO_ADDR
26285: GO 26367
// for j = 1 to result do
26287: LD_ADDR_VAR 0 8
26291: PUSH
26292: DOUBLE
26293: LD_INT 1
26295: DEC
26296: ST_TO_ADDR
26297: LD_VAR 0 6
26301: PUSH
26302: FOR_TO
26303: IFFALSE 26365
// begin if tmp < result [ j ] [ 2 ] then
26305: LD_VAR 0 9
26309: PUSH
26310: LD_VAR 0 6
26314: PUSH
26315: LD_VAR 0 8
26319: ARRAY
26320: PUSH
26321: LD_INT 2
26323: ARRAY
26324: LESS
26325: IFFALSE 26363
// begin result := Insert ( result , j , [ i , tmp ] ) ;
26327: LD_ADDR_VAR 0 6
26331: PUSH
26332: LD_VAR 0 6
26336: PPUSH
26337: LD_VAR 0 8
26341: PPUSH
26342: LD_VAR 0 7
26346: PUSH
26347: LD_VAR 0 9
26351: PUSH
26352: EMPTY
26353: LIST
26354: LIST
26355: PPUSH
26356: CALL_OW 2
26360: ST_TO_ADDR
// break ;
26361: GO 26365
// end ; end ;
26363: GO 26302
26365: POP
26366: POP
// end ; end ;
26367: GO 26166
26369: POP
26370: POP
// if result and not asc then
26371: LD_VAR 0 6
26375: PUSH
26376: LD_VAR 0 4
26380: NOT
26381: AND
26382: IFFALSE 26457
// begin tmp := result ;
26384: LD_ADDR_VAR 0 9
26388: PUSH
26389: LD_VAR 0 6
26393: ST_TO_ADDR
// for i = tmp downto 1 do
26394: LD_ADDR_VAR 0 7
26398: PUSH
26399: DOUBLE
26400: LD_VAR 0 9
26404: INC
26405: ST_TO_ADDR
26406: LD_INT 1
26408: PUSH
26409: FOR_DOWNTO
26410: IFFALSE 26455
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
26412: LD_ADDR_VAR 0 6
26416: PUSH
26417: LD_VAR 0 6
26421: PPUSH
26422: LD_VAR 0 9
26426: PUSH
26427: LD_VAR 0 7
26431: MINUS
26432: PUSH
26433: LD_INT 1
26435: PLUS
26436: PPUSH
26437: LD_VAR 0 9
26441: PUSH
26442: LD_VAR 0 7
26446: ARRAY
26447: PPUSH
26448: CALL_OW 1
26452: ST_TO_ADDR
26453: GO 26409
26455: POP
26456: POP
// end ; tmp := [ ] ;
26457: LD_ADDR_VAR 0 9
26461: PUSH
26462: EMPTY
26463: ST_TO_ADDR
// if mode then
26464: LD_VAR 0 5
26468: IFFALSE 26537
// begin for i = 1 to result do
26470: LD_ADDR_VAR 0 7
26474: PUSH
26475: DOUBLE
26476: LD_INT 1
26478: DEC
26479: ST_TO_ADDR
26480: LD_VAR 0 6
26484: PUSH
26485: FOR_TO
26486: IFFALSE 26525
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
26488: LD_ADDR_VAR 0 9
26492: PUSH
26493: LD_VAR 0 9
26497: PPUSH
26498: LD_VAR 0 7
26502: PPUSH
26503: LD_VAR 0 6
26507: PUSH
26508: LD_VAR 0 7
26512: ARRAY
26513: PUSH
26514: LD_INT 1
26516: ARRAY
26517: PPUSH
26518: CALL_OW 1
26522: ST_TO_ADDR
26523: GO 26485
26525: POP
26526: POP
// result := tmp ;
26527: LD_ADDR_VAR 0 6
26531: PUSH
26532: LD_VAR 0 9
26536: ST_TO_ADDR
// end ; end ;
26537: LD_VAR 0 6
26541: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
26542: LD_INT 0
26544: PPUSH
26545: PPUSH
26546: PPUSH
26547: PPUSH
26548: PPUSH
26549: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
26550: LD_ADDR_VAR 0 5
26554: PUSH
26555: LD_INT 0
26557: PUSH
26558: LD_INT 0
26560: PUSH
26561: LD_INT 0
26563: PUSH
26564: EMPTY
26565: PUSH
26566: EMPTY
26567: LIST
26568: LIST
26569: LIST
26570: LIST
26571: ST_TO_ADDR
// if not x or not y then
26572: LD_VAR 0 2
26576: NOT
26577: PUSH
26578: LD_VAR 0 3
26582: NOT
26583: OR
26584: IFFALSE 26588
// exit ;
26586: GO 28234
// if not range then
26588: LD_VAR 0 4
26592: NOT
26593: IFFALSE 26603
// range := 10 ;
26595: LD_ADDR_VAR 0 4
26599: PUSH
26600: LD_INT 10
26602: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
26603: LD_ADDR_VAR 0 8
26607: PUSH
26608: LD_INT 81
26610: PUSH
26611: LD_VAR 0 1
26615: PUSH
26616: EMPTY
26617: LIST
26618: LIST
26619: PUSH
26620: LD_INT 92
26622: PUSH
26623: LD_VAR 0 2
26627: PUSH
26628: LD_VAR 0 3
26632: PUSH
26633: LD_VAR 0 4
26637: PUSH
26638: EMPTY
26639: LIST
26640: LIST
26641: LIST
26642: LIST
26643: PUSH
26644: LD_INT 3
26646: PUSH
26647: LD_INT 21
26649: PUSH
26650: LD_INT 3
26652: PUSH
26653: EMPTY
26654: LIST
26655: LIST
26656: PUSH
26657: EMPTY
26658: LIST
26659: LIST
26660: PUSH
26661: EMPTY
26662: LIST
26663: LIST
26664: LIST
26665: PPUSH
26666: CALL_OW 69
26670: ST_TO_ADDR
// if not tmp then
26671: LD_VAR 0 8
26675: NOT
26676: IFFALSE 26680
// exit ;
26678: GO 28234
// for i in tmp do
26680: LD_ADDR_VAR 0 6
26684: PUSH
26685: LD_VAR 0 8
26689: PUSH
26690: FOR_IN
26691: IFFALSE 28209
// begin points := [ 0 , 0 , 0 ] ;
26693: LD_ADDR_VAR 0 9
26697: PUSH
26698: LD_INT 0
26700: PUSH
26701: LD_INT 0
26703: PUSH
26704: LD_INT 0
26706: PUSH
26707: EMPTY
26708: LIST
26709: LIST
26710: LIST
26711: ST_TO_ADDR
// bpoints := 1 ;
26712: LD_ADDR_VAR 0 10
26716: PUSH
26717: LD_INT 1
26719: ST_TO_ADDR
// case GetType ( i ) of unit_human :
26720: LD_VAR 0 6
26724: PPUSH
26725: CALL_OW 247
26729: PUSH
26730: LD_INT 1
26732: DOUBLE
26733: EQUAL
26734: IFTRUE 26738
26736: GO 27316
26738: POP
// begin if GetClass ( i ) = 1 then
26739: LD_VAR 0 6
26743: PPUSH
26744: CALL_OW 257
26748: PUSH
26749: LD_INT 1
26751: EQUAL
26752: IFFALSE 26773
// points := [ 10 , 5 , 3 ] ;
26754: LD_ADDR_VAR 0 9
26758: PUSH
26759: LD_INT 10
26761: PUSH
26762: LD_INT 5
26764: PUSH
26765: LD_INT 3
26767: PUSH
26768: EMPTY
26769: LIST
26770: LIST
26771: LIST
26772: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
26773: LD_VAR 0 6
26777: PPUSH
26778: CALL_OW 257
26782: PUSH
26783: LD_INT 2
26785: PUSH
26786: LD_INT 3
26788: PUSH
26789: LD_INT 4
26791: PUSH
26792: EMPTY
26793: LIST
26794: LIST
26795: LIST
26796: IN
26797: IFFALSE 26818
// points := [ 3 , 2 , 1 ] ;
26799: LD_ADDR_VAR 0 9
26803: PUSH
26804: LD_INT 3
26806: PUSH
26807: LD_INT 2
26809: PUSH
26810: LD_INT 1
26812: PUSH
26813: EMPTY
26814: LIST
26815: LIST
26816: LIST
26817: ST_TO_ADDR
// if GetClass ( i ) = 5 then
26818: LD_VAR 0 6
26822: PPUSH
26823: CALL_OW 257
26827: PUSH
26828: LD_INT 5
26830: EQUAL
26831: IFFALSE 26852
// points := [ 130 , 5 , 2 ] ;
26833: LD_ADDR_VAR 0 9
26837: PUSH
26838: LD_INT 130
26840: PUSH
26841: LD_INT 5
26843: PUSH
26844: LD_INT 2
26846: PUSH
26847: EMPTY
26848: LIST
26849: LIST
26850: LIST
26851: ST_TO_ADDR
// if GetClass ( i ) = 8 then
26852: LD_VAR 0 6
26856: PPUSH
26857: CALL_OW 257
26861: PUSH
26862: LD_INT 8
26864: EQUAL
26865: IFFALSE 26886
// points := [ 35 , 35 , 30 ] ;
26867: LD_ADDR_VAR 0 9
26871: PUSH
26872: LD_INT 35
26874: PUSH
26875: LD_INT 35
26877: PUSH
26878: LD_INT 30
26880: PUSH
26881: EMPTY
26882: LIST
26883: LIST
26884: LIST
26885: ST_TO_ADDR
// if GetClass ( i ) = 9 then
26886: LD_VAR 0 6
26890: PPUSH
26891: CALL_OW 257
26895: PUSH
26896: LD_INT 9
26898: EQUAL
26899: IFFALSE 26920
// points := [ 20 , 55 , 40 ] ;
26901: LD_ADDR_VAR 0 9
26905: PUSH
26906: LD_INT 20
26908: PUSH
26909: LD_INT 55
26911: PUSH
26912: LD_INT 40
26914: PUSH
26915: EMPTY
26916: LIST
26917: LIST
26918: LIST
26919: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
26920: LD_VAR 0 6
26924: PPUSH
26925: CALL_OW 257
26929: PUSH
26930: LD_INT 12
26932: PUSH
26933: LD_INT 16
26935: PUSH
26936: EMPTY
26937: LIST
26938: LIST
26939: IN
26940: IFFALSE 26961
// points := [ 5 , 3 , 2 ] ;
26942: LD_ADDR_VAR 0 9
26946: PUSH
26947: LD_INT 5
26949: PUSH
26950: LD_INT 3
26952: PUSH
26953: LD_INT 2
26955: PUSH
26956: EMPTY
26957: LIST
26958: LIST
26959: LIST
26960: ST_TO_ADDR
// if GetClass ( i ) = 17 then
26961: LD_VAR 0 6
26965: PPUSH
26966: CALL_OW 257
26970: PUSH
26971: LD_INT 17
26973: EQUAL
26974: IFFALSE 26995
// points := [ 100 , 50 , 75 ] ;
26976: LD_ADDR_VAR 0 9
26980: PUSH
26981: LD_INT 100
26983: PUSH
26984: LD_INT 50
26986: PUSH
26987: LD_INT 75
26989: PUSH
26990: EMPTY
26991: LIST
26992: LIST
26993: LIST
26994: ST_TO_ADDR
// if GetClass ( i ) = 15 then
26995: LD_VAR 0 6
26999: PPUSH
27000: CALL_OW 257
27004: PUSH
27005: LD_INT 15
27007: EQUAL
27008: IFFALSE 27029
// points := [ 10 , 5 , 3 ] ;
27010: LD_ADDR_VAR 0 9
27014: PUSH
27015: LD_INT 10
27017: PUSH
27018: LD_INT 5
27020: PUSH
27021: LD_INT 3
27023: PUSH
27024: EMPTY
27025: LIST
27026: LIST
27027: LIST
27028: ST_TO_ADDR
// if GetClass ( i ) = 14 then
27029: LD_VAR 0 6
27033: PPUSH
27034: CALL_OW 257
27038: PUSH
27039: LD_INT 14
27041: EQUAL
27042: IFFALSE 27063
// points := [ 10 , 0 , 0 ] ;
27044: LD_ADDR_VAR 0 9
27048: PUSH
27049: LD_INT 10
27051: PUSH
27052: LD_INT 0
27054: PUSH
27055: LD_INT 0
27057: PUSH
27058: EMPTY
27059: LIST
27060: LIST
27061: LIST
27062: ST_TO_ADDR
// if GetClass ( i ) = 11 then
27063: LD_VAR 0 6
27067: PPUSH
27068: CALL_OW 257
27072: PUSH
27073: LD_INT 11
27075: EQUAL
27076: IFFALSE 27097
// points := [ 30 , 10 , 5 ] ;
27078: LD_ADDR_VAR 0 9
27082: PUSH
27083: LD_INT 30
27085: PUSH
27086: LD_INT 10
27088: PUSH
27089: LD_INT 5
27091: PUSH
27092: EMPTY
27093: LIST
27094: LIST
27095: LIST
27096: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
27097: LD_VAR 0 1
27101: PPUSH
27102: LD_INT 5
27104: PPUSH
27105: CALL_OW 321
27109: PUSH
27110: LD_INT 2
27112: EQUAL
27113: IFFALSE 27130
// bpoints := bpoints * 1.8 ;
27115: LD_ADDR_VAR 0 10
27119: PUSH
27120: LD_VAR 0 10
27124: PUSH
27125: LD_REAL  1.80000000000000E+0000
27128: MUL
27129: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
27130: LD_VAR 0 6
27134: PPUSH
27135: CALL_OW 257
27139: PUSH
27140: LD_INT 1
27142: PUSH
27143: LD_INT 2
27145: PUSH
27146: LD_INT 3
27148: PUSH
27149: LD_INT 4
27151: PUSH
27152: EMPTY
27153: LIST
27154: LIST
27155: LIST
27156: LIST
27157: IN
27158: PUSH
27159: LD_VAR 0 1
27163: PPUSH
27164: LD_INT 51
27166: PPUSH
27167: CALL_OW 321
27171: PUSH
27172: LD_INT 2
27174: EQUAL
27175: AND
27176: IFFALSE 27193
// bpoints := bpoints * 1.2 ;
27178: LD_ADDR_VAR 0 10
27182: PUSH
27183: LD_VAR 0 10
27187: PUSH
27188: LD_REAL  1.20000000000000E+0000
27191: MUL
27192: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
27193: LD_VAR 0 6
27197: PPUSH
27198: CALL_OW 257
27202: PUSH
27203: LD_INT 5
27205: PUSH
27206: LD_INT 7
27208: PUSH
27209: LD_INT 9
27211: PUSH
27212: EMPTY
27213: LIST
27214: LIST
27215: LIST
27216: IN
27217: PUSH
27218: LD_VAR 0 1
27222: PPUSH
27223: LD_INT 52
27225: PPUSH
27226: CALL_OW 321
27230: PUSH
27231: LD_INT 2
27233: EQUAL
27234: AND
27235: IFFALSE 27252
// bpoints := bpoints * 1.5 ;
27237: LD_ADDR_VAR 0 10
27241: PUSH
27242: LD_VAR 0 10
27246: PUSH
27247: LD_REAL  1.50000000000000E+0000
27250: MUL
27251: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
27252: LD_VAR 0 1
27256: PPUSH
27257: LD_INT 66
27259: PPUSH
27260: CALL_OW 321
27264: PUSH
27265: LD_INT 2
27267: EQUAL
27268: IFFALSE 27285
// bpoints := bpoints * 1.1 ;
27270: LD_ADDR_VAR 0 10
27274: PUSH
27275: LD_VAR 0 10
27279: PUSH
27280: LD_REAL  1.10000000000000E+0000
27283: MUL
27284: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
27285: LD_ADDR_VAR 0 10
27289: PUSH
27290: LD_VAR 0 10
27294: PUSH
27295: LD_VAR 0 6
27299: PPUSH
27300: LD_INT 1
27302: PPUSH
27303: CALL_OW 259
27307: PUSH
27308: LD_REAL  1.15000000000000E+0000
27311: MUL
27312: MUL
27313: ST_TO_ADDR
// end ; unit_vehicle :
27314: GO 28138
27316: LD_INT 2
27318: DOUBLE
27319: EQUAL
27320: IFTRUE 27324
27322: GO 28126
27324: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
27325: LD_VAR 0 6
27329: PPUSH
27330: CALL_OW 264
27334: PUSH
27335: LD_INT 2
27337: PUSH
27338: LD_INT 42
27340: PUSH
27341: LD_INT 24
27343: PUSH
27344: EMPTY
27345: LIST
27346: LIST
27347: LIST
27348: IN
27349: IFFALSE 27370
// points := [ 25 , 5 , 3 ] ;
27351: LD_ADDR_VAR 0 9
27355: PUSH
27356: LD_INT 25
27358: PUSH
27359: LD_INT 5
27361: PUSH
27362: LD_INT 3
27364: PUSH
27365: EMPTY
27366: LIST
27367: LIST
27368: LIST
27369: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
27370: LD_VAR 0 6
27374: PPUSH
27375: CALL_OW 264
27379: PUSH
27380: LD_INT 4
27382: PUSH
27383: LD_INT 43
27385: PUSH
27386: LD_INT 25
27388: PUSH
27389: EMPTY
27390: LIST
27391: LIST
27392: LIST
27393: IN
27394: IFFALSE 27415
// points := [ 40 , 15 , 5 ] ;
27396: LD_ADDR_VAR 0 9
27400: PUSH
27401: LD_INT 40
27403: PUSH
27404: LD_INT 15
27406: PUSH
27407: LD_INT 5
27409: PUSH
27410: EMPTY
27411: LIST
27412: LIST
27413: LIST
27414: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
27415: LD_VAR 0 6
27419: PPUSH
27420: CALL_OW 264
27424: PUSH
27425: LD_INT 3
27427: PUSH
27428: LD_INT 23
27430: PUSH
27431: EMPTY
27432: LIST
27433: LIST
27434: IN
27435: IFFALSE 27456
// points := [ 7 , 25 , 8 ] ;
27437: LD_ADDR_VAR 0 9
27441: PUSH
27442: LD_INT 7
27444: PUSH
27445: LD_INT 25
27447: PUSH
27448: LD_INT 8
27450: PUSH
27451: EMPTY
27452: LIST
27453: LIST
27454: LIST
27455: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
27456: LD_VAR 0 6
27460: PPUSH
27461: CALL_OW 264
27465: PUSH
27466: LD_INT 5
27468: PUSH
27469: LD_INT 27
27471: PUSH
27472: LD_INT 44
27474: PUSH
27475: EMPTY
27476: LIST
27477: LIST
27478: LIST
27479: IN
27480: IFFALSE 27501
// points := [ 14 , 50 , 16 ] ;
27482: LD_ADDR_VAR 0 9
27486: PUSH
27487: LD_INT 14
27489: PUSH
27490: LD_INT 50
27492: PUSH
27493: LD_INT 16
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: LIST
27500: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
27501: LD_VAR 0 6
27505: PPUSH
27506: CALL_OW 264
27510: PUSH
27511: LD_INT 6
27513: PUSH
27514: LD_INT 46
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: IN
27521: IFFALSE 27542
// points := [ 32 , 120 , 70 ] ;
27523: LD_ADDR_VAR 0 9
27527: PUSH
27528: LD_INT 32
27530: PUSH
27531: LD_INT 120
27533: PUSH
27534: LD_INT 70
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: LIST
27541: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] then
27542: LD_VAR 0 6
27546: PPUSH
27547: CALL_OW 264
27551: PUSH
27552: LD_INT 7
27554: PUSH
27555: LD_INT 28
27557: PUSH
27558: LD_INT 45
27560: PUSH
27561: EMPTY
27562: LIST
27563: LIST
27564: LIST
27565: IN
27566: IFFALSE 27587
// points := [ 35 , 20 , 45 ] ;
27568: LD_ADDR_VAR 0 9
27572: PUSH
27573: LD_INT 35
27575: PUSH
27576: LD_INT 20
27578: PUSH
27579: LD_INT 45
27581: PUSH
27582: EMPTY
27583: LIST
27584: LIST
27585: LIST
27586: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
27587: LD_VAR 0 6
27591: PPUSH
27592: CALL_OW 264
27596: PUSH
27597: LD_INT 47
27599: PUSH
27600: EMPTY
27601: LIST
27602: IN
27603: IFFALSE 27624
// points := [ 67 , 45 , 75 ] ;
27605: LD_ADDR_VAR 0 9
27609: PUSH
27610: LD_INT 67
27612: PUSH
27613: LD_INT 45
27615: PUSH
27616: LD_INT 75
27618: PUSH
27619: EMPTY
27620: LIST
27621: LIST
27622: LIST
27623: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
27624: LD_VAR 0 6
27628: PPUSH
27629: CALL_OW 264
27633: PUSH
27634: LD_INT 26
27636: PUSH
27637: EMPTY
27638: LIST
27639: IN
27640: IFFALSE 27661
// points := [ 120 , 30 , 80 ] ;
27642: LD_ADDR_VAR 0 9
27646: PUSH
27647: LD_INT 120
27649: PUSH
27650: LD_INT 30
27652: PUSH
27653: LD_INT 80
27655: PUSH
27656: EMPTY
27657: LIST
27658: LIST
27659: LIST
27660: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
27661: LD_VAR 0 6
27665: PPUSH
27666: CALL_OW 264
27670: PUSH
27671: LD_INT 22
27673: PUSH
27674: EMPTY
27675: LIST
27676: IN
27677: IFFALSE 27698
// points := [ 40 , 1 , 1 ] ;
27679: LD_ADDR_VAR 0 9
27683: PUSH
27684: LD_INT 40
27686: PUSH
27687: LD_INT 1
27689: PUSH
27690: LD_INT 1
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: LIST
27697: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
27698: LD_VAR 0 6
27702: PPUSH
27703: CALL_OW 264
27707: PUSH
27708: LD_INT 29
27710: PUSH
27711: EMPTY
27712: LIST
27713: IN
27714: IFFALSE 27735
// points := [ 70 , 200 , 400 ] ;
27716: LD_ADDR_VAR 0 9
27720: PUSH
27721: LD_INT 70
27723: PUSH
27724: LD_INT 200
27726: PUSH
27727: LD_INT 400
27729: PUSH
27730: EMPTY
27731: LIST
27732: LIST
27733: LIST
27734: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
27735: LD_VAR 0 6
27739: PPUSH
27740: CALL_OW 264
27744: PUSH
27745: LD_INT 14
27747: PUSH
27748: LD_INT 53
27750: PUSH
27751: EMPTY
27752: LIST
27753: LIST
27754: IN
27755: IFFALSE 27776
// points := [ 40 , 10 , 20 ] ;
27757: LD_ADDR_VAR 0 9
27761: PUSH
27762: LD_INT 40
27764: PUSH
27765: LD_INT 10
27767: PUSH
27768: LD_INT 20
27770: PUSH
27771: EMPTY
27772: LIST
27773: LIST
27774: LIST
27775: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
27776: LD_VAR 0 6
27780: PPUSH
27781: CALL_OW 264
27785: PUSH
27786: LD_INT 9
27788: PUSH
27789: EMPTY
27790: LIST
27791: IN
27792: IFFALSE 27813
// points := [ 5 , 70 , 20 ] ;
27794: LD_ADDR_VAR 0 9
27798: PUSH
27799: LD_INT 5
27801: PUSH
27802: LD_INT 70
27804: PUSH
27805: LD_INT 20
27807: PUSH
27808: EMPTY
27809: LIST
27810: LIST
27811: LIST
27812: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
27813: LD_VAR 0 6
27817: PPUSH
27818: CALL_OW 264
27822: PUSH
27823: LD_INT 10
27825: PUSH
27826: EMPTY
27827: LIST
27828: IN
27829: IFFALSE 27850
// points := [ 35 , 110 , 70 ] ;
27831: LD_ADDR_VAR 0 9
27835: PUSH
27836: LD_INT 35
27838: PUSH
27839: LD_INT 110
27841: PUSH
27842: LD_INT 70
27844: PUSH
27845: EMPTY
27846: LIST
27847: LIST
27848: LIST
27849: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
27850: LD_VAR 0 6
27854: PPUSH
27855: CALL_OW 265
27859: PUSH
27860: LD_INT 25
27862: EQUAL
27863: IFFALSE 27884
// points := [ 80 , 65 , 100 ] ;
27865: LD_ADDR_VAR 0 9
27869: PUSH
27870: LD_INT 80
27872: PUSH
27873: LD_INT 65
27875: PUSH
27876: LD_INT 100
27878: PUSH
27879: EMPTY
27880: LIST
27881: LIST
27882: LIST
27883: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
27884: LD_VAR 0 6
27888: PPUSH
27889: CALL_OW 263
27893: PUSH
27894: LD_INT 1
27896: EQUAL
27897: IFFALSE 27932
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
27899: LD_ADDR_VAR 0 10
27903: PUSH
27904: LD_VAR 0 10
27908: PUSH
27909: LD_VAR 0 6
27913: PPUSH
27914: CALL_OW 311
27918: PPUSH
27919: LD_INT 3
27921: PPUSH
27922: CALL_OW 259
27926: PUSH
27927: LD_INT 4
27929: MUL
27930: MUL
27931: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
27932: LD_VAR 0 6
27936: PPUSH
27937: CALL_OW 263
27941: PUSH
27942: LD_INT 2
27944: EQUAL
27945: IFFALSE 27996
// begin j := IsControledBy ( i ) ;
27947: LD_ADDR_VAR 0 7
27951: PUSH
27952: LD_VAR 0 6
27956: PPUSH
27957: CALL_OW 312
27961: ST_TO_ADDR
// if j then
27962: LD_VAR 0 7
27966: IFFALSE 27996
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
27968: LD_ADDR_VAR 0 10
27972: PUSH
27973: LD_VAR 0 10
27977: PUSH
27978: LD_VAR 0 7
27982: PPUSH
27983: LD_INT 3
27985: PPUSH
27986: CALL_OW 259
27990: PUSH
27991: LD_INT 3
27993: MUL
27994: MUL
27995: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
27996: LD_VAR 0 6
28000: PPUSH
28001: CALL_OW 264
28005: PUSH
28006: LD_INT 5
28008: PUSH
28009: LD_INT 6
28011: PUSH
28012: LD_INT 46
28014: PUSH
28015: LD_INT 44
28017: PUSH
28018: LD_INT 47
28020: PUSH
28021: LD_INT 45
28023: PUSH
28024: LD_INT 28
28026: PUSH
28027: LD_INT 7
28029: PUSH
28030: LD_INT 27
28032: PUSH
28033: LD_INT 29
28035: PUSH
28036: EMPTY
28037: LIST
28038: LIST
28039: LIST
28040: LIST
28041: LIST
28042: LIST
28043: LIST
28044: LIST
28045: LIST
28046: LIST
28047: IN
28048: PUSH
28049: LD_VAR 0 1
28053: PPUSH
28054: LD_INT 52
28056: PPUSH
28057: CALL_OW 321
28061: PUSH
28062: LD_INT 2
28064: EQUAL
28065: AND
28066: IFFALSE 28083
// bpoints := bpoints * 1.2 ;
28068: LD_ADDR_VAR 0 10
28072: PUSH
28073: LD_VAR 0 10
28077: PUSH
28078: LD_REAL  1.20000000000000E+0000
28081: MUL
28082: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
28083: LD_VAR 0 6
28087: PPUSH
28088: CALL_OW 264
28092: PUSH
28093: LD_INT 6
28095: PUSH
28096: LD_INT 46
28098: PUSH
28099: LD_INT 47
28101: PUSH
28102: EMPTY
28103: LIST
28104: LIST
28105: LIST
28106: IN
28107: IFFALSE 28124
// bpoints := bpoints * 1.2 ;
28109: LD_ADDR_VAR 0 10
28113: PUSH
28114: LD_VAR 0 10
28118: PUSH
28119: LD_REAL  1.20000000000000E+0000
28122: MUL
28123: ST_TO_ADDR
// end ; unit_building :
28124: GO 28138
28126: LD_INT 3
28128: DOUBLE
28129: EQUAL
28130: IFTRUE 28134
28132: GO 28137
28134: POP
// ; end ;
28135: GO 28138
28137: POP
// for j = 1 to 3 do
28138: LD_ADDR_VAR 0 7
28142: PUSH
28143: DOUBLE
28144: LD_INT 1
28146: DEC
28147: ST_TO_ADDR
28148: LD_INT 3
28150: PUSH
28151: FOR_TO
28152: IFFALSE 28205
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
28154: LD_ADDR_VAR 0 5
28158: PUSH
28159: LD_VAR 0 5
28163: PPUSH
28164: LD_VAR 0 7
28168: PPUSH
28169: LD_VAR 0 5
28173: PUSH
28174: LD_VAR 0 7
28178: ARRAY
28179: PUSH
28180: LD_VAR 0 9
28184: PUSH
28185: LD_VAR 0 7
28189: ARRAY
28190: PUSH
28191: LD_VAR 0 10
28195: MUL
28196: PLUS
28197: PPUSH
28198: CALL_OW 1
28202: ST_TO_ADDR
28203: GO 28151
28205: POP
28206: POP
// end ;
28207: GO 26690
28209: POP
28210: POP
// result := Replace ( result , 4 , tmp ) ;
28211: LD_ADDR_VAR 0 5
28215: PUSH
28216: LD_VAR 0 5
28220: PPUSH
28221: LD_INT 4
28223: PPUSH
28224: LD_VAR 0 8
28228: PPUSH
28229: CALL_OW 1
28233: ST_TO_ADDR
// end ;
28234: LD_VAR 0 5
28238: RET
// export function DangerAtRange ( unit , range ) ; begin
28239: LD_INT 0
28241: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
28242: LD_ADDR_VAR 0 3
28246: PUSH
28247: LD_VAR 0 1
28251: PPUSH
28252: CALL_OW 255
28256: PPUSH
28257: LD_VAR 0 1
28261: PPUSH
28262: CALL_OW 250
28266: PPUSH
28267: LD_VAR 0 1
28271: PPUSH
28272: CALL_OW 251
28276: PPUSH
28277: LD_VAR 0 2
28281: PPUSH
28282: CALL 26542 0 4
28286: ST_TO_ADDR
// end ;
28287: LD_VAR 0 3
28291: RET
// export function DangerInArea ( side , area ) ; begin
28292: LD_INT 0
28294: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
28295: LD_ADDR_VAR 0 3
28299: PUSH
28300: LD_VAR 0 2
28304: PPUSH
28305: LD_INT 81
28307: PUSH
28308: LD_VAR 0 1
28312: PUSH
28313: EMPTY
28314: LIST
28315: LIST
28316: PPUSH
28317: CALL_OW 70
28321: ST_TO_ADDR
// end ;
28322: LD_VAR 0 3
28326: RET
// export function IsExtension ( b ) ; begin
28327: LD_INT 0
28329: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
28330: LD_ADDR_VAR 0 2
28334: PUSH
28335: LD_VAR 0 1
28339: PUSH
28340: LD_INT 23
28342: PUSH
28343: LD_INT 20
28345: PUSH
28346: LD_INT 22
28348: PUSH
28349: LD_INT 17
28351: PUSH
28352: LD_INT 24
28354: PUSH
28355: LD_INT 21
28357: PUSH
28358: LD_INT 19
28360: PUSH
28361: LD_INT 16
28363: PUSH
28364: LD_INT 25
28366: PUSH
28367: LD_INT 18
28369: PUSH
28370: EMPTY
28371: LIST
28372: LIST
28373: LIST
28374: LIST
28375: LIST
28376: LIST
28377: LIST
28378: LIST
28379: LIST
28380: LIST
28381: IN
28382: ST_TO_ADDR
// end ;
28383: LD_VAR 0 2
28387: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
28388: LD_INT 0
28390: PPUSH
28391: PPUSH
28392: PPUSH
// result := [ ] ;
28393: LD_ADDR_VAR 0 4
28397: PUSH
28398: EMPTY
28399: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
28400: LD_ADDR_VAR 0 5
28404: PUSH
28405: LD_VAR 0 2
28409: PPUSH
28410: LD_INT 21
28412: PUSH
28413: LD_INT 3
28415: PUSH
28416: EMPTY
28417: LIST
28418: LIST
28419: PPUSH
28420: CALL_OW 70
28424: ST_TO_ADDR
// if not tmp then
28425: LD_VAR 0 5
28429: NOT
28430: IFFALSE 28434
// exit ;
28432: GO 28498
// if checkLink then
28434: LD_VAR 0 3
28438: IFFALSE 28488
// begin for i in tmp do
28440: LD_ADDR_VAR 0 6
28444: PUSH
28445: LD_VAR 0 5
28449: PUSH
28450: FOR_IN
28451: IFFALSE 28486
// if GetBase ( i ) <> base then
28453: LD_VAR 0 6
28457: PPUSH
28458: CALL_OW 274
28462: PUSH
28463: LD_VAR 0 1
28467: NONEQUAL
28468: IFFALSE 28484
// ComLinkToBase ( base , i ) ;
28470: LD_VAR 0 1
28474: PPUSH
28475: LD_VAR 0 6
28479: PPUSH
28480: CALL_OW 169
28484: GO 28450
28486: POP
28487: POP
// end ; result := tmp ;
28488: LD_ADDR_VAR 0 4
28492: PUSH
28493: LD_VAR 0 5
28497: ST_TO_ADDR
// end ;
28498: LD_VAR 0 4
28502: RET
// export function ComComplete ( units , b ) ; var i ; begin
28503: LD_INT 0
28505: PPUSH
28506: PPUSH
// if not units then
28507: LD_VAR 0 1
28511: NOT
28512: IFFALSE 28516
// exit ;
28514: GO 28606
// for i in units do
28516: LD_ADDR_VAR 0 4
28520: PUSH
28521: LD_VAR 0 1
28525: PUSH
28526: FOR_IN
28527: IFFALSE 28604
// if BuildingStatus ( b ) = bs_build then
28529: LD_VAR 0 2
28533: PPUSH
28534: CALL_OW 461
28538: PUSH
28539: LD_INT 1
28541: EQUAL
28542: IFFALSE 28602
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
28544: LD_VAR 0 4
28548: PPUSH
28549: LD_STRING h
28551: PUSH
28552: LD_VAR 0 2
28556: PPUSH
28557: CALL_OW 250
28561: PUSH
28562: LD_VAR 0 2
28566: PPUSH
28567: CALL_OW 251
28571: PUSH
28572: LD_VAR 0 2
28576: PUSH
28577: LD_INT 0
28579: PUSH
28580: LD_INT 0
28582: PUSH
28583: LD_INT 0
28585: PUSH
28586: EMPTY
28587: LIST
28588: LIST
28589: LIST
28590: LIST
28591: LIST
28592: LIST
28593: LIST
28594: PUSH
28595: EMPTY
28596: LIST
28597: PPUSH
28598: CALL_OW 446
28602: GO 28526
28604: POP
28605: POP
// end ;
28606: LD_VAR 0 3
28610: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
28611: LD_INT 0
28613: PPUSH
28614: PPUSH
28615: PPUSH
28616: PPUSH
28617: PPUSH
28618: PPUSH
// if not vehicle or not GetControl ( vehicle ) = control_remote then
28619: LD_VAR 0 1
28623: NOT
28624: PUSH
28625: LD_VAR 0 1
28629: PPUSH
28630: CALL_OW 263
28634: PUSH
28635: LD_INT 2
28637: EQUAL
28638: NOT
28639: OR
28640: IFFALSE 28644
// exit ;
28642: GO 28960
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
28644: LD_ADDR_VAR 0 6
28648: PUSH
28649: LD_INT 22
28651: PUSH
28652: LD_VAR 0 1
28656: PPUSH
28657: CALL_OW 255
28661: PUSH
28662: EMPTY
28663: LIST
28664: LIST
28665: PUSH
28666: LD_INT 2
28668: PUSH
28669: LD_INT 30
28671: PUSH
28672: LD_INT 36
28674: PUSH
28675: EMPTY
28676: LIST
28677: LIST
28678: PUSH
28679: LD_INT 34
28681: PUSH
28682: LD_INT 31
28684: PUSH
28685: EMPTY
28686: LIST
28687: LIST
28688: PUSH
28689: EMPTY
28690: LIST
28691: LIST
28692: LIST
28693: PUSH
28694: EMPTY
28695: LIST
28696: LIST
28697: PPUSH
28698: CALL_OW 69
28702: ST_TO_ADDR
// if not tmp then
28703: LD_VAR 0 6
28707: NOT
28708: IFFALSE 28712
// exit ;
28710: GO 28960
// result := [ ] ;
28712: LD_ADDR_VAR 0 2
28716: PUSH
28717: EMPTY
28718: ST_TO_ADDR
// for i in tmp do
28719: LD_ADDR_VAR 0 3
28723: PUSH
28724: LD_VAR 0 6
28728: PUSH
28729: FOR_IN
28730: IFFALSE 28801
// begin t := UnitsInside ( i ) ;
28732: LD_ADDR_VAR 0 4
28736: PUSH
28737: LD_VAR 0 3
28741: PPUSH
28742: CALL_OW 313
28746: ST_TO_ADDR
// if t then
28747: LD_VAR 0 4
28751: IFFALSE 28799
// for j in t do
28753: LD_ADDR_VAR 0 7
28757: PUSH
28758: LD_VAR 0 4
28762: PUSH
28763: FOR_IN
28764: IFFALSE 28797
// result := Insert ( result , result + 1 , j ) ;
28766: LD_ADDR_VAR 0 2
28770: PUSH
28771: LD_VAR 0 2
28775: PPUSH
28776: LD_VAR 0 2
28780: PUSH
28781: LD_INT 1
28783: PLUS
28784: PPUSH
28785: LD_VAR 0 7
28789: PPUSH
28790: CALL_OW 2
28794: ST_TO_ADDR
28795: GO 28763
28797: POP
28798: POP
// end ;
28799: GO 28729
28801: POP
28802: POP
// if not result then
28803: LD_VAR 0 2
28807: NOT
28808: IFFALSE 28812
// exit ;
28810: GO 28960
// mech := result [ 1 ] ;
28812: LD_ADDR_VAR 0 5
28816: PUSH
28817: LD_VAR 0 2
28821: PUSH
28822: LD_INT 1
28824: ARRAY
28825: ST_TO_ADDR
// if result > 1 then
28826: LD_VAR 0 2
28830: PUSH
28831: LD_INT 1
28833: GREATER
28834: IFFALSE 28946
// for i = 2 to result do
28836: LD_ADDR_VAR 0 3
28840: PUSH
28841: DOUBLE
28842: LD_INT 2
28844: DEC
28845: ST_TO_ADDR
28846: LD_VAR 0 2
28850: PUSH
28851: FOR_TO
28852: IFFALSE 28944
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
28854: LD_ADDR_VAR 0 4
28858: PUSH
28859: LD_VAR 0 2
28863: PUSH
28864: LD_VAR 0 3
28868: ARRAY
28869: PPUSH
28870: LD_INT 3
28872: PPUSH
28873: CALL_OW 259
28877: PUSH
28878: LD_VAR 0 2
28882: PUSH
28883: LD_VAR 0 3
28887: ARRAY
28888: PPUSH
28889: CALL_OW 432
28893: MINUS
28894: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
28895: LD_VAR 0 4
28899: PUSH
28900: LD_VAR 0 5
28904: PPUSH
28905: LD_INT 3
28907: PPUSH
28908: CALL_OW 259
28912: PUSH
28913: LD_VAR 0 5
28917: PPUSH
28918: CALL_OW 432
28922: MINUS
28923: GREATEREQUAL
28924: IFFALSE 28942
// mech := result [ i ] ;
28926: LD_ADDR_VAR 0 5
28930: PUSH
28931: LD_VAR 0 2
28935: PUSH
28936: LD_VAR 0 3
28940: ARRAY
28941: ST_TO_ADDR
// end ;
28942: GO 28851
28944: POP
28945: POP
// ComLinkTo ( vehicle , mech ) ;
28946: LD_VAR 0 1
28950: PPUSH
28951: LD_VAR 0 5
28955: PPUSH
28956: CALL_OW 135
// end ;
28960: LD_VAR 0 2
28964: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
28965: LD_INT 0
28967: PPUSH
28968: PPUSH
28969: PPUSH
28970: PPUSH
28971: PPUSH
28972: PPUSH
28973: PPUSH
28974: PPUSH
28975: PPUSH
28976: PPUSH
28977: PPUSH
28978: PPUSH
28979: PPUSH
// result := [ ] ;
28980: LD_ADDR_VAR 0 7
28984: PUSH
28985: EMPTY
28986: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
28987: LD_VAR 0 1
28991: PPUSH
28992: CALL_OW 266
28996: PUSH
28997: LD_INT 0
28999: PUSH
29000: LD_INT 1
29002: PUSH
29003: EMPTY
29004: LIST
29005: LIST
29006: IN
29007: NOT
29008: IFFALSE 29012
// exit ;
29010: GO 30646
// if name then
29012: LD_VAR 0 3
29016: IFFALSE 29032
// SetBName ( base_dep , name ) ;
29018: LD_VAR 0 1
29022: PPUSH
29023: LD_VAR 0 3
29027: PPUSH
29028: CALL_OW 500
// base := GetBase ( base_dep ) ;
29032: LD_ADDR_VAR 0 15
29036: PUSH
29037: LD_VAR 0 1
29041: PPUSH
29042: CALL_OW 274
29046: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
29047: LD_ADDR_VAR 0 16
29051: PUSH
29052: LD_VAR 0 1
29056: PPUSH
29057: CALL_OW 255
29061: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
29062: LD_ADDR_VAR 0 17
29066: PUSH
29067: LD_VAR 0 1
29071: PPUSH
29072: CALL_OW 248
29076: ST_TO_ADDR
// if sources then
29077: LD_VAR 0 5
29081: IFFALSE 29128
// for i = 1 to 3 do
29083: LD_ADDR_VAR 0 8
29087: PUSH
29088: DOUBLE
29089: LD_INT 1
29091: DEC
29092: ST_TO_ADDR
29093: LD_INT 3
29095: PUSH
29096: FOR_TO
29097: IFFALSE 29126
// AddResourceType ( base , i , sources [ i ] ) ;
29099: LD_VAR 0 15
29103: PPUSH
29104: LD_VAR 0 8
29108: PPUSH
29109: LD_VAR 0 5
29113: PUSH
29114: LD_VAR 0 8
29118: ARRAY
29119: PPUSH
29120: CALL_OW 276
29124: GO 29096
29126: POP
29127: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
29128: LD_ADDR_VAR 0 18
29132: PUSH
29133: LD_VAR 0 15
29137: PPUSH
29138: LD_VAR 0 2
29142: PPUSH
29143: LD_INT 1
29145: PPUSH
29146: CALL 28388 0 3
29150: ST_TO_ADDR
// InitHc ;
29151: CALL_OW 19
// InitUc ;
29155: CALL_OW 18
// uc_side := side ;
29159: LD_ADDR_OWVAR 20
29163: PUSH
29164: LD_VAR 0 16
29168: ST_TO_ADDR
// uc_nation := nation ;
29169: LD_ADDR_OWVAR 21
29173: PUSH
29174: LD_VAR 0 17
29178: ST_TO_ADDR
// if buildings then
29179: LD_VAR 0 18
29183: IFFALSE 30505
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
29185: LD_ADDR_VAR 0 19
29189: PUSH
29190: LD_VAR 0 18
29194: PPUSH
29195: LD_INT 2
29197: PUSH
29198: LD_INT 30
29200: PUSH
29201: LD_INT 29
29203: PUSH
29204: EMPTY
29205: LIST
29206: LIST
29207: PUSH
29208: LD_INT 30
29210: PUSH
29211: LD_INT 30
29213: PUSH
29214: EMPTY
29215: LIST
29216: LIST
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: LIST
29222: PPUSH
29223: CALL_OW 72
29227: ST_TO_ADDR
// if tmp then
29228: LD_VAR 0 19
29232: IFFALSE 29280
// for i in tmp do
29234: LD_ADDR_VAR 0 8
29238: PUSH
29239: LD_VAR 0 19
29243: PUSH
29244: FOR_IN
29245: IFFALSE 29278
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
29247: LD_VAR 0 8
29251: PPUSH
29252: CALL_OW 250
29256: PPUSH
29257: LD_VAR 0 8
29261: PPUSH
29262: CALL_OW 251
29266: PPUSH
29267: LD_VAR 0 16
29271: PPUSH
29272: CALL_OW 441
29276: GO 29244
29278: POP
29279: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
29280: LD_VAR 0 18
29284: PPUSH
29285: LD_INT 2
29287: PUSH
29288: LD_INT 30
29290: PUSH
29291: LD_INT 32
29293: PUSH
29294: EMPTY
29295: LIST
29296: LIST
29297: PUSH
29298: LD_INT 30
29300: PUSH
29301: LD_INT 33
29303: PUSH
29304: EMPTY
29305: LIST
29306: LIST
29307: PUSH
29308: EMPTY
29309: LIST
29310: LIST
29311: LIST
29312: PPUSH
29313: CALL_OW 72
29317: IFFALSE 29405
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
29319: LD_ADDR_VAR 0 8
29323: PUSH
29324: LD_VAR 0 18
29328: PPUSH
29329: LD_INT 2
29331: PUSH
29332: LD_INT 30
29334: PUSH
29335: LD_INT 32
29337: PUSH
29338: EMPTY
29339: LIST
29340: LIST
29341: PUSH
29342: LD_INT 30
29344: PUSH
29345: LD_INT 33
29347: PUSH
29348: EMPTY
29349: LIST
29350: LIST
29351: PUSH
29352: EMPTY
29353: LIST
29354: LIST
29355: LIST
29356: PPUSH
29357: CALL_OW 72
29361: PUSH
29362: FOR_IN
29363: IFFALSE 29403
// begin if not GetBWeapon ( i ) then
29365: LD_VAR 0 8
29369: PPUSH
29370: CALL_OW 269
29374: NOT
29375: IFFALSE 29401
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
29377: LD_VAR 0 8
29381: PPUSH
29382: LD_VAR 0 8
29386: PPUSH
29387: LD_VAR 0 2
29391: PPUSH
29392: CALL 30651 0 2
29396: PPUSH
29397: CALL_OW 431
// end ;
29401: GO 29362
29403: POP
29404: POP
// end ; for i = 1 to personel do
29405: LD_ADDR_VAR 0 8
29409: PUSH
29410: DOUBLE
29411: LD_INT 1
29413: DEC
29414: ST_TO_ADDR
29415: LD_VAR 0 6
29419: PUSH
29420: FOR_TO
29421: IFFALSE 30485
// begin if i > 4 then
29423: LD_VAR 0 8
29427: PUSH
29428: LD_INT 4
29430: GREATER
29431: IFFALSE 29435
// break ;
29433: GO 30485
// case i of 1 :
29435: LD_VAR 0 8
29439: PUSH
29440: LD_INT 1
29442: DOUBLE
29443: EQUAL
29444: IFTRUE 29448
29446: GO 29528
29448: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
29449: LD_ADDR_VAR 0 12
29453: PUSH
29454: LD_VAR 0 18
29458: PPUSH
29459: LD_INT 22
29461: PUSH
29462: LD_VAR 0 16
29466: PUSH
29467: EMPTY
29468: LIST
29469: LIST
29470: PUSH
29471: LD_INT 58
29473: PUSH
29474: EMPTY
29475: LIST
29476: PUSH
29477: LD_INT 2
29479: PUSH
29480: LD_INT 30
29482: PUSH
29483: LD_INT 32
29485: PUSH
29486: EMPTY
29487: LIST
29488: LIST
29489: PUSH
29490: LD_INT 30
29492: PUSH
29493: LD_INT 4
29495: PUSH
29496: EMPTY
29497: LIST
29498: LIST
29499: PUSH
29500: LD_INT 30
29502: PUSH
29503: LD_INT 5
29505: PUSH
29506: EMPTY
29507: LIST
29508: LIST
29509: PUSH
29510: EMPTY
29511: LIST
29512: LIST
29513: LIST
29514: LIST
29515: PUSH
29516: EMPTY
29517: LIST
29518: LIST
29519: LIST
29520: PPUSH
29521: CALL_OW 72
29525: ST_TO_ADDR
29526: GO 29750
29528: LD_INT 2
29530: DOUBLE
29531: EQUAL
29532: IFTRUE 29536
29534: GO 29598
29536: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
29537: LD_ADDR_VAR 0 12
29541: PUSH
29542: LD_VAR 0 18
29546: PPUSH
29547: LD_INT 22
29549: PUSH
29550: LD_VAR 0 16
29554: PUSH
29555: EMPTY
29556: LIST
29557: LIST
29558: PUSH
29559: LD_INT 2
29561: PUSH
29562: LD_INT 30
29564: PUSH
29565: LD_INT 0
29567: PUSH
29568: EMPTY
29569: LIST
29570: LIST
29571: PUSH
29572: LD_INT 30
29574: PUSH
29575: LD_INT 1
29577: PUSH
29578: EMPTY
29579: LIST
29580: LIST
29581: PUSH
29582: EMPTY
29583: LIST
29584: LIST
29585: LIST
29586: PUSH
29587: EMPTY
29588: LIST
29589: LIST
29590: PPUSH
29591: CALL_OW 72
29595: ST_TO_ADDR
29596: GO 29750
29598: LD_INT 3
29600: DOUBLE
29601: EQUAL
29602: IFTRUE 29606
29604: GO 29668
29606: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
29607: LD_ADDR_VAR 0 12
29611: PUSH
29612: LD_VAR 0 18
29616: PPUSH
29617: LD_INT 22
29619: PUSH
29620: LD_VAR 0 16
29624: PUSH
29625: EMPTY
29626: LIST
29627: LIST
29628: PUSH
29629: LD_INT 2
29631: PUSH
29632: LD_INT 30
29634: PUSH
29635: LD_INT 2
29637: PUSH
29638: EMPTY
29639: LIST
29640: LIST
29641: PUSH
29642: LD_INT 30
29644: PUSH
29645: LD_INT 3
29647: PUSH
29648: EMPTY
29649: LIST
29650: LIST
29651: PUSH
29652: EMPTY
29653: LIST
29654: LIST
29655: LIST
29656: PUSH
29657: EMPTY
29658: LIST
29659: LIST
29660: PPUSH
29661: CALL_OW 72
29665: ST_TO_ADDR
29666: GO 29750
29668: LD_INT 4
29670: DOUBLE
29671: EQUAL
29672: IFTRUE 29676
29674: GO 29749
29676: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
29677: LD_ADDR_VAR 0 12
29681: PUSH
29682: LD_VAR 0 18
29686: PPUSH
29687: LD_INT 22
29689: PUSH
29690: LD_VAR 0 16
29694: PUSH
29695: EMPTY
29696: LIST
29697: LIST
29698: PUSH
29699: LD_INT 2
29701: PUSH
29702: LD_INT 30
29704: PUSH
29705: LD_INT 6
29707: PUSH
29708: EMPTY
29709: LIST
29710: LIST
29711: PUSH
29712: LD_INT 30
29714: PUSH
29715: LD_INT 7
29717: PUSH
29718: EMPTY
29719: LIST
29720: LIST
29721: PUSH
29722: LD_INT 30
29724: PUSH
29725: LD_INT 8
29727: PUSH
29728: EMPTY
29729: LIST
29730: LIST
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: LIST
29736: LIST
29737: PUSH
29738: EMPTY
29739: LIST
29740: LIST
29741: PPUSH
29742: CALL_OW 72
29746: ST_TO_ADDR
29747: GO 29750
29749: POP
// if i = 1 then
29750: LD_VAR 0 8
29754: PUSH
29755: LD_INT 1
29757: EQUAL
29758: IFFALSE 29869
// begin tmp := [ ] ;
29760: LD_ADDR_VAR 0 19
29764: PUSH
29765: EMPTY
29766: ST_TO_ADDR
// for j in f do
29767: LD_ADDR_VAR 0 9
29771: PUSH
29772: LD_VAR 0 12
29776: PUSH
29777: FOR_IN
29778: IFFALSE 29851
// if GetBType ( j ) = b_bunker then
29780: LD_VAR 0 9
29784: PPUSH
29785: CALL_OW 266
29789: PUSH
29790: LD_INT 32
29792: EQUAL
29793: IFFALSE 29820
// tmp := Insert ( tmp , 1 , j ) else
29795: LD_ADDR_VAR 0 19
29799: PUSH
29800: LD_VAR 0 19
29804: PPUSH
29805: LD_INT 1
29807: PPUSH
29808: LD_VAR 0 9
29812: PPUSH
29813: CALL_OW 2
29817: ST_TO_ADDR
29818: GO 29849
// tmp := Insert ( tmp , tmp + 1 , j ) ;
29820: LD_ADDR_VAR 0 19
29824: PUSH
29825: LD_VAR 0 19
29829: PPUSH
29830: LD_VAR 0 19
29834: PUSH
29835: LD_INT 1
29837: PLUS
29838: PPUSH
29839: LD_VAR 0 9
29843: PPUSH
29844: CALL_OW 2
29848: ST_TO_ADDR
29849: GO 29777
29851: POP
29852: POP
// if tmp then
29853: LD_VAR 0 19
29857: IFFALSE 29869
// f := tmp ;
29859: LD_ADDR_VAR 0 12
29863: PUSH
29864: LD_VAR 0 19
29868: ST_TO_ADDR
// end ; x := personel [ i ] ;
29869: LD_ADDR_VAR 0 13
29873: PUSH
29874: LD_VAR 0 6
29878: PUSH
29879: LD_VAR 0 8
29883: ARRAY
29884: ST_TO_ADDR
// if x = - 1 then
29885: LD_VAR 0 13
29889: PUSH
29890: LD_INT 1
29892: NEG
29893: EQUAL
29894: IFFALSE 30103
// begin for j in f do
29896: LD_ADDR_VAR 0 9
29900: PUSH
29901: LD_VAR 0 12
29905: PUSH
29906: FOR_IN
29907: IFFALSE 30099
// repeat InitHc ;
29909: CALL_OW 19
// if GetBType ( j ) = b_barracks then
29913: LD_VAR 0 9
29917: PPUSH
29918: CALL_OW 266
29922: PUSH
29923: LD_INT 5
29925: EQUAL
29926: IFFALSE 29996
// begin if UnitsInside ( j ) < 3 then
29928: LD_VAR 0 9
29932: PPUSH
29933: CALL_OW 313
29937: PUSH
29938: LD_INT 3
29940: LESS
29941: IFFALSE 29977
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
29943: LD_INT 0
29945: PPUSH
29946: LD_INT 5
29948: PUSH
29949: LD_INT 8
29951: PUSH
29952: LD_INT 9
29954: PUSH
29955: EMPTY
29956: LIST
29957: LIST
29958: LIST
29959: PUSH
29960: LD_VAR 0 17
29964: ARRAY
29965: PPUSH
29966: LD_VAR 0 4
29970: PPUSH
29971: CALL_OW 380
29975: GO 29994
// PrepareHuman ( false , i , skill ) ;
29977: LD_INT 0
29979: PPUSH
29980: LD_VAR 0 8
29984: PPUSH
29985: LD_VAR 0 4
29989: PPUSH
29990: CALL_OW 380
// end else
29994: GO 30013
// PrepareHuman ( false , i , skill ) ;
29996: LD_INT 0
29998: PPUSH
29999: LD_VAR 0 8
30003: PPUSH
30004: LD_VAR 0 4
30008: PPUSH
30009: CALL_OW 380
// un := CreateHuman ;
30013: LD_ADDR_VAR 0 14
30017: PUSH
30018: CALL_OW 44
30022: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30023: LD_ADDR_VAR 0 7
30027: PUSH
30028: LD_VAR 0 7
30032: PPUSH
30033: LD_INT 1
30035: PPUSH
30036: LD_VAR 0 14
30040: PPUSH
30041: CALL_OW 2
30045: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
30046: LD_VAR 0 14
30050: PPUSH
30051: LD_VAR 0 9
30055: PPUSH
30056: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
30060: LD_VAR 0 9
30064: PPUSH
30065: CALL_OW 313
30069: PUSH
30070: LD_INT 6
30072: EQUAL
30073: PUSH
30074: LD_VAR 0 9
30078: PPUSH
30079: CALL_OW 266
30083: PUSH
30084: LD_INT 32
30086: PUSH
30087: LD_INT 31
30089: PUSH
30090: EMPTY
30091: LIST
30092: LIST
30093: IN
30094: OR
30095: IFFALSE 29909
30097: GO 29906
30099: POP
30100: POP
// end else
30101: GO 30483
// for j = 1 to x do
30103: LD_ADDR_VAR 0 9
30107: PUSH
30108: DOUBLE
30109: LD_INT 1
30111: DEC
30112: ST_TO_ADDR
30113: LD_VAR 0 13
30117: PUSH
30118: FOR_TO
30119: IFFALSE 30481
// begin InitHc ;
30121: CALL_OW 19
// if not f then
30125: LD_VAR 0 12
30129: NOT
30130: IFFALSE 30219
// begin PrepareHuman ( false , i , skill ) ;
30132: LD_INT 0
30134: PPUSH
30135: LD_VAR 0 8
30139: PPUSH
30140: LD_VAR 0 4
30144: PPUSH
30145: CALL_OW 380
// un := CreateHuman ;
30149: LD_ADDR_VAR 0 14
30153: PUSH
30154: CALL_OW 44
30158: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30159: LD_ADDR_VAR 0 7
30163: PUSH
30164: LD_VAR 0 7
30168: PPUSH
30169: LD_INT 1
30171: PPUSH
30172: LD_VAR 0 14
30176: PPUSH
30177: CALL_OW 2
30181: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30182: LD_VAR 0 14
30186: PPUSH
30187: LD_VAR 0 1
30191: PPUSH
30192: CALL_OW 250
30196: PPUSH
30197: LD_VAR 0 1
30201: PPUSH
30202: CALL_OW 251
30206: PPUSH
30207: LD_INT 10
30209: PPUSH
30210: LD_INT 0
30212: PPUSH
30213: CALL_OW 50
// continue ;
30217: GO 30118
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
30219: LD_VAR 0 12
30223: PUSH
30224: LD_INT 1
30226: ARRAY
30227: PPUSH
30228: CALL_OW 313
30232: PUSH
30233: LD_VAR 0 12
30237: PUSH
30238: LD_INT 1
30240: ARRAY
30241: PPUSH
30242: CALL_OW 266
30246: PUSH
30247: LD_INT 32
30249: PUSH
30250: LD_INT 31
30252: PUSH
30253: EMPTY
30254: LIST
30255: LIST
30256: IN
30257: AND
30258: PUSH
30259: LD_VAR 0 12
30263: PUSH
30264: LD_INT 1
30266: ARRAY
30267: PPUSH
30268: CALL_OW 313
30272: PUSH
30273: LD_INT 6
30275: EQUAL
30276: OR
30277: IFFALSE 30297
// f := Delete ( f , 1 ) ;
30279: LD_ADDR_VAR 0 12
30283: PUSH
30284: LD_VAR 0 12
30288: PPUSH
30289: LD_INT 1
30291: PPUSH
30292: CALL_OW 3
30296: ST_TO_ADDR
// if not f then
30297: LD_VAR 0 12
30301: NOT
30302: IFFALSE 30320
// begin x := x + 2 ;
30304: LD_ADDR_VAR 0 13
30308: PUSH
30309: LD_VAR 0 13
30313: PUSH
30314: LD_INT 2
30316: PLUS
30317: ST_TO_ADDR
// continue ;
30318: GO 30118
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
30320: LD_VAR 0 12
30324: PUSH
30325: LD_INT 1
30327: ARRAY
30328: PPUSH
30329: CALL_OW 266
30333: PUSH
30334: LD_INT 5
30336: EQUAL
30337: IFFALSE 30411
// begin if UnitsInside ( f [ 1 ] ) < 3 then
30339: LD_VAR 0 12
30343: PUSH
30344: LD_INT 1
30346: ARRAY
30347: PPUSH
30348: CALL_OW 313
30352: PUSH
30353: LD_INT 3
30355: LESS
30356: IFFALSE 30392
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
30358: LD_INT 0
30360: PPUSH
30361: LD_INT 5
30363: PUSH
30364: LD_INT 8
30366: PUSH
30367: LD_INT 9
30369: PUSH
30370: EMPTY
30371: LIST
30372: LIST
30373: LIST
30374: PUSH
30375: LD_VAR 0 17
30379: ARRAY
30380: PPUSH
30381: LD_VAR 0 4
30385: PPUSH
30386: CALL_OW 380
30390: GO 30409
// PrepareHuman ( false , i , skill ) ;
30392: LD_INT 0
30394: PPUSH
30395: LD_VAR 0 8
30399: PPUSH
30400: LD_VAR 0 4
30404: PPUSH
30405: CALL_OW 380
// end else
30409: GO 30428
// PrepareHuman ( false , i , skill ) ;
30411: LD_INT 0
30413: PPUSH
30414: LD_VAR 0 8
30418: PPUSH
30419: LD_VAR 0 4
30423: PPUSH
30424: CALL_OW 380
// un := CreateHuman ;
30428: LD_ADDR_VAR 0 14
30432: PUSH
30433: CALL_OW 44
30437: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
30438: LD_ADDR_VAR 0 7
30442: PUSH
30443: LD_VAR 0 7
30447: PPUSH
30448: LD_INT 1
30450: PPUSH
30451: LD_VAR 0 14
30455: PPUSH
30456: CALL_OW 2
30460: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
30461: LD_VAR 0 14
30465: PPUSH
30466: LD_VAR 0 12
30470: PUSH
30471: LD_INT 1
30473: ARRAY
30474: PPUSH
30475: CALL_OW 52
// end ;
30479: GO 30118
30481: POP
30482: POP
// end ;
30483: GO 29420
30485: POP
30486: POP
// result := result ^ buildings ;
30487: LD_ADDR_VAR 0 7
30491: PUSH
30492: LD_VAR 0 7
30496: PUSH
30497: LD_VAR 0 18
30501: ADD
30502: ST_TO_ADDR
// end else
30503: GO 30646
// begin for i = 1 to personel do
30505: LD_ADDR_VAR 0 8
30509: PUSH
30510: DOUBLE
30511: LD_INT 1
30513: DEC
30514: ST_TO_ADDR
30515: LD_VAR 0 6
30519: PUSH
30520: FOR_TO
30521: IFFALSE 30644
// begin if i > 4 then
30523: LD_VAR 0 8
30527: PUSH
30528: LD_INT 4
30530: GREATER
30531: IFFALSE 30535
// break ;
30533: GO 30644
// x := personel [ i ] ;
30535: LD_ADDR_VAR 0 13
30539: PUSH
30540: LD_VAR 0 6
30544: PUSH
30545: LD_VAR 0 8
30549: ARRAY
30550: ST_TO_ADDR
// if x = - 1 then
30551: LD_VAR 0 13
30555: PUSH
30556: LD_INT 1
30558: NEG
30559: EQUAL
30560: IFFALSE 30564
// continue ;
30562: GO 30520
// PrepareHuman ( false , i , skill ) ;
30564: LD_INT 0
30566: PPUSH
30567: LD_VAR 0 8
30571: PPUSH
30572: LD_VAR 0 4
30576: PPUSH
30577: CALL_OW 380
// un := CreateHuman ;
30581: LD_ADDR_VAR 0 14
30585: PUSH
30586: CALL_OW 44
30590: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
30591: LD_VAR 0 14
30595: PPUSH
30596: LD_VAR 0 1
30600: PPUSH
30601: CALL_OW 250
30605: PPUSH
30606: LD_VAR 0 1
30610: PPUSH
30611: CALL_OW 251
30615: PPUSH
30616: LD_INT 10
30618: PPUSH
30619: LD_INT 0
30621: PPUSH
30622: CALL_OW 50
// result := result ^ un ;
30626: LD_ADDR_VAR 0 7
30630: PUSH
30631: LD_VAR 0 7
30635: PUSH
30636: LD_VAR 0 14
30640: ADD
30641: ST_TO_ADDR
// end ;
30642: GO 30520
30644: POP
30645: POP
// end ; end ;
30646: LD_VAR 0 7
30650: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
30651: LD_INT 0
30653: PPUSH
30654: PPUSH
30655: PPUSH
30656: PPUSH
30657: PPUSH
30658: PPUSH
30659: PPUSH
30660: PPUSH
30661: PPUSH
30662: PPUSH
30663: PPUSH
30664: PPUSH
30665: PPUSH
30666: PPUSH
30667: PPUSH
30668: PPUSH
// result := false ;
30669: LD_ADDR_VAR 0 3
30673: PUSH
30674: LD_INT 0
30676: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
30677: LD_VAR 0 1
30681: NOT
30682: PUSH
30683: LD_VAR 0 1
30687: PPUSH
30688: CALL_OW 266
30692: PUSH
30693: LD_INT 32
30695: PUSH
30696: LD_INT 33
30698: PUSH
30699: EMPTY
30700: LIST
30701: LIST
30702: IN
30703: NOT
30704: OR
30705: IFFALSE 30709
// exit ;
30707: GO 31848
// nat := GetNation ( tower ) ;
30709: LD_ADDR_VAR 0 12
30713: PUSH
30714: LD_VAR 0 1
30718: PPUSH
30719: CALL_OW 248
30723: ST_TO_ADDR
// side := GetSide ( tower ) ;
30724: LD_ADDR_VAR 0 16
30728: PUSH
30729: LD_VAR 0 1
30733: PPUSH
30734: CALL_OW 255
30738: ST_TO_ADDR
// x := GetX ( tower ) ;
30739: LD_ADDR_VAR 0 10
30743: PUSH
30744: LD_VAR 0 1
30748: PPUSH
30749: CALL_OW 250
30753: ST_TO_ADDR
// y := GetY ( tower ) ;
30754: LD_ADDR_VAR 0 11
30758: PUSH
30759: LD_VAR 0 1
30763: PPUSH
30764: CALL_OW 251
30768: ST_TO_ADDR
// if not x or not y then
30769: LD_VAR 0 10
30773: NOT
30774: PUSH
30775: LD_VAR 0 11
30779: NOT
30780: OR
30781: IFFALSE 30785
// exit ;
30783: GO 31848
// weapon := 0 ;
30785: LD_ADDR_VAR 0 18
30789: PUSH
30790: LD_INT 0
30792: ST_TO_ADDR
// fac_list := [ ] ;
30793: LD_ADDR_VAR 0 17
30797: PUSH
30798: EMPTY
30799: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
30800: LD_ADDR_VAR 0 6
30804: PUSH
30805: LD_VAR 0 1
30809: PPUSH
30810: CALL_OW 274
30814: PPUSH
30815: LD_VAR 0 2
30819: PPUSH
30820: LD_INT 0
30822: PPUSH
30823: CALL 28388 0 3
30827: PPUSH
30828: LD_INT 30
30830: PUSH
30831: LD_INT 3
30833: PUSH
30834: EMPTY
30835: LIST
30836: LIST
30837: PPUSH
30838: CALL_OW 72
30842: ST_TO_ADDR
// if not factories then
30843: LD_VAR 0 6
30847: NOT
30848: IFFALSE 30852
// exit ;
30850: GO 31848
// for i in factories do
30852: LD_ADDR_VAR 0 8
30856: PUSH
30857: LD_VAR 0 6
30861: PUSH
30862: FOR_IN
30863: IFFALSE 30888
// fac_list := fac_list union AvailableWeaponList ( i ) ;
30865: LD_ADDR_VAR 0 17
30869: PUSH
30870: LD_VAR 0 17
30874: PUSH
30875: LD_VAR 0 8
30879: PPUSH
30880: CALL_OW 478
30884: UNION
30885: ST_TO_ADDR
30886: GO 30862
30888: POP
30889: POP
// if not fac_list then
30890: LD_VAR 0 17
30894: NOT
30895: IFFALSE 30899
// exit ;
30897: GO 31848
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
30899: LD_ADDR_VAR 0 5
30903: PUSH
30904: LD_INT 4
30906: PUSH
30907: LD_INT 5
30909: PUSH
30910: LD_INT 9
30912: PUSH
30913: LD_INT 10
30915: PUSH
30916: LD_INT 6
30918: PUSH
30919: LD_INT 7
30921: PUSH
30922: LD_INT 11
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: LIST
30929: LIST
30930: LIST
30931: LIST
30932: LIST
30933: PUSH
30934: LD_INT 27
30936: PUSH
30937: LD_INT 28
30939: PUSH
30940: LD_INT 26
30942: PUSH
30943: LD_INT 30
30945: PUSH
30946: EMPTY
30947: LIST
30948: LIST
30949: LIST
30950: LIST
30951: PUSH
30952: LD_INT 43
30954: PUSH
30955: LD_INT 44
30957: PUSH
30958: LD_INT 46
30960: PUSH
30961: LD_INT 45
30963: PUSH
30964: LD_INT 47
30966: PUSH
30967: LD_INT 49
30969: PUSH
30970: EMPTY
30971: LIST
30972: LIST
30973: LIST
30974: LIST
30975: LIST
30976: LIST
30977: PUSH
30978: EMPTY
30979: LIST
30980: LIST
30981: LIST
30982: PUSH
30983: LD_VAR 0 12
30987: ARRAY
30988: ST_TO_ADDR
// for i in list do
30989: LD_ADDR_VAR 0 8
30993: PUSH
30994: LD_VAR 0 5
30998: PUSH
30999: FOR_IN
31000: IFFALSE 31033
// if not i in fac_list then
31002: LD_VAR 0 8
31006: PUSH
31007: LD_VAR 0 17
31011: IN
31012: NOT
31013: IFFALSE 31031
// list := list diff i ;
31015: LD_ADDR_VAR 0 5
31019: PUSH
31020: LD_VAR 0 5
31024: PUSH
31025: LD_VAR 0 8
31029: DIFF
31030: ST_TO_ADDR
31031: GO 30999
31033: POP
31034: POP
// if not list then
31035: LD_VAR 0 5
31039: NOT
31040: IFFALSE 31044
// exit ;
31042: GO 31848
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
31044: LD_VAR 0 12
31048: PUSH
31049: LD_INT 3
31051: EQUAL
31052: PUSH
31053: LD_INT 49
31055: PUSH
31056: LD_VAR 0 5
31060: IN
31061: AND
31062: PUSH
31063: LD_INT 31
31065: PPUSH
31066: LD_VAR 0 16
31070: PPUSH
31071: CALL_OW 321
31075: PUSH
31076: LD_INT 2
31078: EQUAL
31079: AND
31080: IFFALSE 31140
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
31082: LD_INT 22
31084: PUSH
31085: LD_VAR 0 16
31089: PUSH
31090: EMPTY
31091: LIST
31092: LIST
31093: PUSH
31094: LD_INT 35
31096: PUSH
31097: LD_INT 49
31099: PUSH
31100: EMPTY
31101: LIST
31102: LIST
31103: PUSH
31104: LD_INT 91
31106: PUSH
31107: LD_VAR 0 1
31111: PUSH
31112: LD_INT 10
31114: PUSH
31115: EMPTY
31116: LIST
31117: LIST
31118: LIST
31119: PUSH
31120: EMPTY
31121: LIST
31122: LIST
31123: LIST
31124: PPUSH
31125: CALL_OW 69
31129: NOT
31130: IFFALSE 31140
// weapon := ru_time_lapser ;
31132: LD_ADDR_VAR 0 18
31136: PUSH
31137: LD_INT 49
31139: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
31140: LD_VAR 0 12
31144: PUSH
31145: LD_INT 1
31147: PUSH
31148: LD_INT 2
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: IN
31155: PUSH
31156: LD_INT 11
31158: PUSH
31159: LD_VAR 0 5
31163: IN
31164: PUSH
31165: LD_INT 30
31167: PUSH
31168: LD_VAR 0 5
31172: IN
31173: OR
31174: AND
31175: PUSH
31176: LD_INT 6
31178: PPUSH
31179: LD_VAR 0 16
31183: PPUSH
31184: CALL_OW 321
31188: PUSH
31189: LD_INT 2
31191: EQUAL
31192: AND
31193: IFFALSE 31358
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
31195: LD_INT 22
31197: PUSH
31198: LD_VAR 0 16
31202: PUSH
31203: EMPTY
31204: LIST
31205: LIST
31206: PUSH
31207: LD_INT 2
31209: PUSH
31210: LD_INT 35
31212: PUSH
31213: LD_INT 11
31215: PUSH
31216: EMPTY
31217: LIST
31218: LIST
31219: PUSH
31220: LD_INT 35
31222: PUSH
31223: LD_INT 30
31225: PUSH
31226: EMPTY
31227: LIST
31228: LIST
31229: PUSH
31230: EMPTY
31231: LIST
31232: LIST
31233: LIST
31234: PUSH
31235: LD_INT 91
31237: PUSH
31238: LD_VAR 0 1
31242: PUSH
31243: LD_INT 18
31245: PUSH
31246: EMPTY
31247: LIST
31248: LIST
31249: LIST
31250: PUSH
31251: EMPTY
31252: LIST
31253: LIST
31254: LIST
31255: PPUSH
31256: CALL_OW 69
31260: NOT
31261: PUSH
31262: LD_INT 22
31264: PUSH
31265: LD_VAR 0 16
31269: PUSH
31270: EMPTY
31271: LIST
31272: LIST
31273: PUSH
31274: LD_INT 2
31276: PUSH
31277: LD_INT 30
31279: PUSH
31280: LD_INT 32
31282: PUSH
31283: EMPTY
31284: LIST
31285: LIST
31286: PUSH
31287: LD_INT 30
31289: PUSH
31290: LD_INT 33
31292: PUSH
31293: EMPTY
31294: LIST
31295: LIST
31296: PUSH
31297: EMPTY
31298: LIST
31299: LIST
31300: LIST
31301: PUSH
31302: LD_INT 91
31304: PUSH
31305: LD_VAR 0 1
31309: PUSH
31310: LD_INT 12
31312: PUSH
31313: EMPTY
31314: LIST
31315: LIST
31316: LIST
31317: PUSH
31318: EMPTY
31319: LIST
31320: LIST
31321: LIST
31322: PUSH
31323: EMPTY
31324: LIST
31325: PPUSH
31326: CALL_OW 69
31330: PUSH
31331: LD_INT 2
31333: GREATER
31334: AND
31335: IFFALSE 31358
// weapon := [ us_radar , ar_radar ] [ nat ] ;
31337: LD_ADDR_VAR 0 18
31341: PUSH
31342: LD_INT 11
31344: PUSH
31345: LD_INT 30
31347: PUSH
31348: EMPTY
31349: LIST
31350: LIST
31351: PUSH
31352: LD_VAR 0 12
31356: ARRAY
31357: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
31358: LD_VAR 0 18
31362: NOT
31363: PUSH
31364: LD_INT 40
31366: PPUSH
31367: LD_VAR 0 16
31371: PPUSH
31372: CALL_OW 321
31376: PUSH
31377: LD_INT 2
31379: EQUAL
31380: AND
31381: PUSH
31382: LD_INT 7
31384: PUSH
31385: LD_VAR 0 5
31389: IN
31390: PUSH
31391: LD_INT 28
31393: PUSH
31394: LD_VAR 0 5
31398: IN
31399: OR
31400: PUSH
31401: LD_INT 45
31403: PUSH
31404: LD_VAR 0 5
31408: IN
31409: OR
31410: AND
31411: IFFALSE 31665
// begin hex := GetHexInfo ( x , y ) ;
31413: LD_ADDR_VAR 0 4
31417: PUSH
31418: LD_VAR 0 10
31422: PPUSH
31423: LD_VAR 0 11
31427: PPUSH
31428: CALL_OW 546
31432: ST_TO_ADDR
// if hex [ 1 ] then
31433: LD_VAR 0 4
31437: PUSH
31438: LD_INT 1
31440: ARRAY
31441: IFFALSE 31445
// exit ;
31443: GO 31848
// height := hex [ 2 ] ;
31445: LD_ADDR_VAR 0 15
31449: PUSH
31450: LD_VAR 0 4
31454: PUSH
31455: LD_INT 2
31457: ARRAY
31458: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
31459: LD_ADDR_VAR 0 14
31463: PUSH
31464: LD_INT 0
31466: PUSH
31467: LD_INT 2
31469: PUSH
31470: LD_INT 3
31472: PUSH
31473: LD_INT 5
31475: PUSH
31476: EMPTY
31477: LIST
31478: LIST
31479: LIST
31480: LIST
31481: ST_TO_ADDR
// for i in tmp do
31482: LD_ADDR_VAR 0 8
31486: PUSH
31487: LD_VAR 0 14
31491: PUSH
31492: FOR_IN
31493: IFFALSE 31663
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
31495: LD_ADDR_VAR 0 9
31499: PUSH
31500: LD_VAR 0 10
31504: PPUSH
31505: LD_VAR 0 8
31509: PPUSH
31510: LD_INT 5
31512: PPUSH
31513: CALL_OW 272
31517: PUSH
31518: LD_VAR 0 11
31522: PPUSH
31523: LD_VAR 0 8
31527: PPUSH
31528: LD_INT 5
31530: PPUSH
31531: CALL_OW 273
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
31540: LD_VAR 0 9
31544: PUSH
31545: LD_INT 1
31547: ARRAY
31548: PPUSH
31549: LD_VAR 0 9
31553: PUSH
31554: LD_INT 2
31556: ARRAY
31557: PPUSH
31558: CALL_OW 488
31562: IFFALSE 31661
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
31564: LD_ADDR_VAR 0 4
31568: PUSH
31569: LD_VAR 0 9
31573: PUSH
31574: LD_INT 1
31576: ARRAY
31577: PPUSH
31578: LD_VAR 0 9
31582: PUSH
31583: LD_INT 2
31585: ARRAY
31586: PPUSH
31587: CALL_OW 546
31591: ST_TO_ADDR
// if hex [ 1 ] then
31592: LD_VAR 0 4
31596: PUSH
31597: LD_INT 1
31599: ARRAY
31600: IFFALSE 31604
// continue ;
31602: GO 31492
// h := hex [ 2 ] ;
31604: LD_ADDR_VAR 0 13
31608: PUSH
31609: LD_VAR 0 4
31613: PUSH
31614: LD_INT 2
31616: ARRAY
31617: ST_TO_ADDR
// if h + 7 < height then
31618: LD_VAR 0 13
31622: PUSH
31623: LD_INT 7
31625: PLUS
31626: PUSH
31627: LD_VAR 0 15
31631: LESS
31632: IFFALSE 31661
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
31634: LD_ADDR_VAR 0 18
31638: PUSH
31639: LD_INT 7
31641: PUSH
31642: LD_INT 28
31644: PUSH
31645: LD_INT 45
31647: PUSH
31648: EMPTY
31649: LIST
31650: LIST
31651: LIST
31652: PUSH
31653: LD_VAR 0 12
31657: ARRAY
31658: ST_TO_ADDR
// break ;
31659: GO 31663
// end ; end ; end ;
31661: GO 31492
31663: POP
31664: POP
// end ; if not weapon then
31665: LD_VAR 0 18
31669: NOT
31670: IFFALSE 31730
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
31672: LD_ADDR_VAR 0 5
31676: PUSH
31677: LD_VAR 0 5
31681: PUSH
31682: LD_INT 11
31684: PUSH
31685: LD_INT 30
31687: PUSH
31688: LD_INT 49
31690: PUSH
31691: EMPTY
31692: LIST
31693: LIST
31694: LIST
31695: DIFF
31696: ST_TO_ADDR
// if not list then
31697: LD_VAR 0 5
31701: NOT
31702: IFFALSE 31706
// exit ;
31704: GO 31848
// weapon := list [ rand ( 1 , list ) ] ;
31706: LD_ADDR_VAR 0 18
31710: PUSH
31711: LD_VAR 0 5
31715: PUSH
31716: LD_INT 1
31718: PPUSH
31719: LD_VAR 0 5
31723: PPUSH
31724: CALL_OW 12
31728: ARRAY
31729: ST_TO_ADDR
// end ; if weapon then
31730: LD_VAR 0 18
31734: IFFALSE 31848
// begin tmp := CostOfWeapon ( weapon ) ;
31736: LD_ADDR_VAR 0 14
31740: PUSH
31741: LD_VAR 0 18
31745: PPUSH
31746: CALL_OW 451
31750: ST_TO_ADDR
// j := GetBase ( tower ) ;
31751: LD_ADDR_VAR 0 9
31755: PUSH
31756: LD_VAR 0 1
31760: PPUSH
31761: CALL_OW 274
31765: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
31766: LD_VAR 0 9
31770: PPUSH
31771: LD_INT 1
31773: PPUSH
31774: CALL_OW 275
31778: PUSH
31779: LD_VAR 0 14
31783: PUSH
31784: LD_INT 1
31786: ARRAY
31787: GREATEREQUAL
31788: PUSH
31789: LD_VAR 0 9
31793: PPUSH
31794: LD_INT 2
31796: PPUSH
31797: CALL_OW 275
31801: PUSH
31802: LD_VAR 0 14
31806: PUSH
31807: LD_INT 2
31809: ARRAY
31810: GREATEREQUAL
31811: AND
31812: PUSH
31813: LD_VAR 0 9
31817: PPUSH
31818: LD_INT 3
31820: PPUSH
31821: CALL_OW 275
31825: PUSH
31826: LD_VAR 0 14
31830: PUSH
31831: LD_INT 3
31833: ARRAY
31834: GREATEREQUAL
31835: AND
31836: IFFALSE 31848
// result := weapon ;
31838: LD_ADDR_VAR 0 3
31842: PUSH
31843: LD_VAR 0 18
31847: ST_TO_ADDR
// end ; end ;
31848: LD_VAR 0 3
31852: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
31853: LD_INT 0
31855: PPUSH
31856: PPUSH
// result := true ;
31857: LD_ADDR_VAR 0 3
31861: PUSH
31862: LD_INT 1
31864: ST_TO_ADDR
// if array1 = array2 then
31865: LD_VAR 0 1
31869: PUSH
31870: LD_VAR 0 2
31874: EQUAL
31875: IFFALSE 31935
// begin for i = 1 to array1 do
31877: LD_ADDR_VAR 0 4
31881: PUSH
31882: DOUBLE
31883: LD_INT 1
31885: DEC
31886: ST_TO_ADDR
31887: LD_VAR 0 1
31891: PUSH
31892: FOR_TO
31893: IFFALSE 31931
// if array1 [ i ] <> array2 [ i ] then
31895: LD_VAR 0 1
31899: PUSH
31900: LD_VAR 0 4
31904: ARRAY
31905: PUSH
31906: LD_VAR 0 2
31910: PUSH
31911: LD_VAR 0 4
31915: ARRAY
31916: NONEQUAL
31917: IFFALSE 31929
// begin result := false ;
31919: LD_ADDR_VAR 0 3
31923: PUSH
31924: LD_INT 0
31926: ST_TO_ADDR
// break ;
31927: GO 31931
// end ;
31929: GO 31892
31931: POP
31932: POP
// end else
31933: GO 31943
// result := false ;
31935: LD_ADDR_VAR 0 3
31939: PUSH
31940: LD_INT 0
31942: ST_TO_ADDR
// end ;
31943: LD_VAR 0 3
31947: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
31948: LD_INT 0
31950: PPUSH
31951: PPUSH
// if not array1 or not array2 then
31952: LD_VAR 0 1
31956: NOT
31957: PUSH
31958: LD_VAR 0 2
31962: NOT
31963: OR
31964: IFFALSE 31968
// exit ;
31966: GO 32032
// result := true ;
31968: LD_ADDR_VAR 0 3
31972: PUSH
31973: LD_INT 1
31975: ST_TO_ADDR
// for i = 1 to array1 do
31976: LD_ADDR_VAR 0 4
31980: PUSH
31981: DOUBLE
31982: LD_INT 1
31984: DEC
31985: ST_TO_ADDR
31986: LD_VAR 0 1
31990: PUSH
31991: FOR_TO
31992: IFFALSE 32030
// if array1 [ i ] <> array2 [ i ] then
31994: LD_VAR 0 1
31998: PUSH
31999: LD_VAR 0 4
32003: ARRAY
32004: PUSH
32005: LD_VAR 0 2
32009: PUSH
32010: LD_VAR 0 4
32014: ARRAY
32015: NONEQUAL
32016: IFFALSE 32028
// begin result := false ;
32018: LD_ADDR_VAR 0 3
32022: PUSH
32023: LD_INT 0
32025: ST_TO_ADDR
// break ;
32026: GO 32030
// end ;
32028: GO 31991
32030: POP
32031: POP
// end ;
32032: LD_VAR 0 3
32036: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
32037: LD_INT 0
32039: PPUSH
32040: PPUSH
32041: PPUSH
// pom := GetBase ( fac ) ;
32042: LD_ADDR_VAR 0 5
32046: PUSH
32047: LD_VAR 0 1
32051: PPUSH
32052: CALL_OW 274
32056: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
32057: LD_ADDR_VAR 0 4
32061: PUSH
32062: LD_VAR 0 2
32066: PUSH
32067: LD_INT 1
32069: ARRAY
32070: PPUSH
32071: LD_VAR 0 2
32075: PUSH
32076: LD_INT 2
32078: ARRAY
32079: PPUSH
32080: LD_VAR 0 2
32084: PUSH
32085: LD_INT 3
32087: ARRAY
32088: PPUSH
32089: LD_VAR 0 2
32093: PUSH
32094: LD_INT 4
32096: ARRAY
32097: PPUSH
32098: CALL_OW 449
32102: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32103: LD_ADDR_VAR 0 3
32107: PUSH
32108: LD_VAR 0 5
32112: PPUSH
32113: LD_INT 1
32115: PPUSH
32116: CALL_OW 275
32120: PUSH
32121: LD_VAR 0 4
32125: PUSH
32126: LD_INT 1
32128: ARRAY
32129: GREATEREQUAL
32130: PUSH
32131: LD_VAR 0 5
32135: PPUSH
32136: LD_INT 2
32138: PPUSH
32139: CALL_OW 275
32143: PUSH
32144: LD_VAR 0 4
32148: PUSH
32149: LD_INT 2
32151: ARRAY
32152: GREATEREQUAL
32153: AND
32154: PUSH
32155: LD_VAR 0 5
32159: PPUSH
32160: LD_INT 3
32162: PPUSH
32163: CALL_OW 275
32167: PUSH
32168: LD_VAR 0 4
32172: PUSH
32173: LD_INT 3
32175: ARRAY
32176: GREATEREQUAL
32177: AND
32178: ST_TO_ADDR
// end ;
32179: LD_VAR 0 3
32183: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
32184: LD_INT 0
32186: PPUSH
32187: PPUSH
32188: PPUSH
32189: PPUSH
// pom := GetBase ( building ) ;
32190: LD_ADDR_VAR 0 3
32194: PUSH
32195: LD_VAR 0 1
32199: PPUSH
32200: CALL_OW 274
32204: ST_TO_ADDR
// if not pom then
32205: LD_VAR 0 3
32209: NOT
32210: IFFALSE 32214
// exit ;
32212: GO 32384
// btype := GetBType ( building ) ;
32214: LD_ADDR_VAR 0 5
32218: PUSH
32219: LD_VAR 0 1
32223: PPUSH
32224: CALL_OW 266
32228: ST_TO_ADDR
// if btype = b_armoury then
32229: LD_VAR 0 5
32233: PUSH
32234: LD_INT 4
32236: EQUAL
32237: IFFALSE 32247
// btype := b_barracks ;
32239: LD_ADDR_VAR 0 5
32243: PUSH
32244: LD_INT 5
32246: ST_TO_ADDR
// if btype = b_depot then
32247: LD_VAR 0 5
32251: PUSH
32252: LD_INT 0
32254: EQUAL
32255: IFFALSE 32265
// btype := b_warehouse ;
32257: LD_ADDR_VAR 0 5
32261: PUSH
32262: LD_INT 1
32264: ST_TO_ADDR
// if btype = b_workshop then
32265: LD_VAR 0 5
32269: PUSH
32270: LD_INT 2
32272: EQUAL
32273: IFFALSE 32283
// btype := b_factory ;
32275: LD_ADDR_VAR 0 5
32279: PUSH
32280: LD_INT 3
32282: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32283: LD_ADDR_VAR 0 4
32287: PUSH
32288: LD_VAR 0 5
32292: PPUSH
32293: LD_VAR 0 1
32297: PPUSH
32298: CALL_OW 248
32302: PPUSH
32303: CALL_OW 450
32307: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32308: LD_ADDR_VAR 0 2
32312: PUSH
32313: LD_VAR 0 3
32317: PPUSH
32318: LD_INT 1
32320: PPUSH
32321: CALL_OW 275
32325: PUSH
32326: LD_VAR 0 4
32330: PUSH
32331: LD_INT 1
32333: ARRAY
32334: GREATEREQUAL
32335: PUSH
32336: LD_VAR 0 3
32340: PPUSH
32341: LD_INT 2
32343: PPUSH
32344: CALL_OW 275
32348: PUSH
32349: LD_VAR 0 4
32353: PUSH
32354: LD_INT 2
32356: ARRAY
32357: GREATEREQUAL
32358: AND
32359: PUSH
32360: LD_VAR 0 3
32364: PPUSH
32365: LD_INT 3
32367: PPUSH
32368: CALL_OW 275
32372: PUSH
32373: LD_VAR 0 4
32377: PUSH
32378: LD_INT 3
32380: ARRAY
32381: GREATEREQUAL
32382: AND
32383: ST_TO_ADDR
// end ;
32384: LD_VAR 0 2
32388: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
32389: LD_INT 0
32391: PPUSH
32392: PPUSH
32393: PPUSH
// pom := GetBase ( building ) ;
32394: LD_ADDR_VAR 0 4
32398: PUSH
32399: LD_VAR 0 1
32403: PPUSH
32404: CALL_OW 274
32408: ST_TO_ADDR
// if not pom then
32409: LD_VAR 0 4
32413: NOT
32414: IFFALSE 32418
// exit ;
32416: GO 32519
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
32418: LD_ADDR_VAR 0 5
32422: PUSH
32423: LD_VAR 0 2
32427: PPUSH
32428: LD_VAR 0 1
32432: PPUSH
32433: CALL_OW 248
32437: PPUSH
32438: CALL_OW 450
32442: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
32443: LD_ADDR_VAR 0 3
32447: PUSH
32448: LD_VAR 0 4
32452: PPUSH
32453: LD_INT 1
32455: PPUSH
32456: CALL_OW 275
32460: PUSH
32461: LD_VAR 0 5
32465: PUSH
32466: LD_INT 1
32468: ARRAY
32469: GREATEREQUAL
32470: PUSH
32471: LD_VAR 0 4
32475: PPUSH
32476: LD_INT 2
32478: PPUSH
32479: CALL_OW 275
32483: PUSH
32484: LD_VAR 0 5
32488: PUSH
32489: LD_INT 2
32491: ARRAY
32492: GREATEREQUAL
32493: AND
32494: PUSH
32495: LD_VAR 0 4
32499: PPUSH
32500: LD_INT 3
32502: PPUSH
32503: CALL_OW 275
32507: PUSH
32508: LD_VAR 0 5
32512: PUSH
32513: LD_INT 3
32515: ARRAY
32516: GREATEREQUAL
32517: AND
32518: ST_TO_ADDR
// end ;
32519: LD_VAR 0 3
32523: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
32524: LD_INT 0
32526: PPUSH
32527: PPUSH
32528: PPUSH
32529: PPUSH
32530: PPUSH
32531: PPUSH
32532: PPUSH
32533: PPUSH
32534: PPUSH
32535: PPUSH
32536: PPUSH
// result := false ;
32537: LD_ADDR_VAR 0 8
32541: PUSH
32542: LD_INT 0
32544: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
32545: LD_VAR 0 5
32549: NOT
32550: PUSH
32551: LD_VAR 0 1
32555: NOT
32556: OR
32557: PUSH
32558: LD_VAR 0 2
32562: NOT
32563: OR
32564: PUSH
32565: LD_VAR 0 3
32569: NOT
32570: OR
32571: IFFALSE 32575
// exit ;
32573: GO 33389
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
32575: LD_ADDR_VAR 0 14
32579: PUSH
32580: LD_VAR 0 1
32584: PPUSH
32585: LD_VAR 0 2
32589: PPUSH
32590: LD_VAR 0 3
32594: PPUSH
32595: LD_VAR 0 4
32599: PPUSH
32600: LD_VAR 0 5
32604: PUSH
32605: LD_INT 1
32607: ARRAY
32608: PPUSH
32609: CALL_OW 248
32613: PPUSH
32614: LD_INT 0
32616: PPUSH
32617: CALL 34226 0 6
32621: ST_TO_ADDR
// if not hexes then
32622: LD_VAR 0 14
32626: NOT
32627: IFFALSE 32631
// exit ;
32629: GO 33389
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
32631: LD_ADDR_VAR 0 17
32635: PUSH
32636: LD_VAR 0 5
32640: PPUSH
32641: LD_INT 22
32643: PUSH
32644: LD_VAR 0 13
32648: PPUSH
32649: CALL_OW 255
32653: PUSH
32654: EMPTY
32655: LIST
32656: LIST
32657: PUSH
32658: LD_INT 2
32660: PUSH
32661: LD_INT 30
32663: PUSH
32664: LD_INT 0
32666: PUSH
32667: EMPTY
32668: LIST
32669: LIST
32670: PUSH
32671: LD_INT 30
32673: PUSH
32674: LD_INT 1
32676: PUSH
32677: EMPTY
32678: LIST
32679: LIST
32680: PUSH
32681: EMPTY
32682: LIST
32683: LIST
32684: LIST
32685: PUSH
32686: EMPTY
32687: LIST
32688: LIST
32689: PPUSH
32690: CALL_OW 72
32694: ST_TO_ADDR
// for i = 1 to hexes do
32695: LD_ADDR_VAR 0 9
32699: PUSH
32700: DOUBLE
32701: LD_INT 1
32703: DEC
32704: ST_TO_ADDR
32705: LD_VAR 0 14
32709: PUSH
32710: FOR_TO
32711: IFFALSE 33387
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
32713: LD_ADDR_VAR 0 13
32717: PUSH
32718: LD_VAR 0 14
32722: PUSH
32723: LD_VAR 0 9
32727: ARRAY
32728: PUSH
32729: LD_INT 1
32731: ARRAY
32732: PPUSH
32733: LD_VAR 0 14
32737: PUSH
32738: LD_VAR 0 9
32742: ARRAY
32743: PUSH
32744: LD_INT 2
32746: ARRAY
32747: PPUSH
32748: CALL_OW 428
32752: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
32753: LD_VAR 0 14
32757: PUSH
32758: LD_VAR 0 9
32762: ARRAY
32763: PUSH
32764: LD_INT 1
32766: ARRAY
32767: PPUSH
32768: LD_VAR 0 14
32772: PUSH
32773: LD_VAR 0 9
32777: ARRAY
32778: PUSH
32779: LD_INT 2
32781: ARRAY
32782: PPUSH
32783: CALL_OW 351
32787: PUSH
32788: LD_VAR 0 14
32792: PUSH
32793: LD_VAR 0 9
32797: ARRAY
32798: PUSH
32799: LD_INT 1
32801: ARRAY
32802: PPUSH
32803: LD_VAR 0 14
32807: PUSH
32808: LD_VAR 0 9
32812: ARRAY
32813: PUSH
32814: LD_INT 2
32816: ARRAY
32817: PPUSH
32818: CALL_OW 488
32822: NOT
32823: OR
32824: PUSH
32825: LD_VAR 0 13
32829: PPUSH
32830: CALL_OW 247
32834: PUSH
32835: LD_INT 3
32837: EQUAL
32838: OR
32839: IFFALSE 32845
// exit ;
32841: POP
32842: POP
32843: GO 33389
// if not tmp then
32845: LD_VAR 0 13
32849: NOT
32850: IFFALSE 32854
// continue ;
32852: GO 32710
// result := true ;
32854: LD_ADDR_VAR 0 8
32858: PUSH
32859: LD_INT 1
32861: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
32862: LD_VAR 0 6
32866: PUSH
32867: LD_VAR 0 13
32871: PPUSH
32872: CALL_OW 247
32876: PUSH
32877: LD_INT 2
32879: EQUAL
32880: AND
32881: PUSH
32882: LD_VAR 0 13
32886: PPUSH
32887: CALL_OW 263
32891: PUSH
32892: LD_INT 1
32894: EQUAL
32895: AND
32896: IFFALSE 33060
// begin if IsDrivenBy ( tmp ) then
32898: LD_VAR 0 13
32902: PPUSH
32903: CALL_OW 311
32907: IFFALSE 32911
// continue ;
32909: GO 32710
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
32911: LD_VAR 0 6
32915: PPUSH
32916: LD_INT 3
32918: PUSH
32919: LD_INT 60
32921: PUSH
32922: EMPTY
32923: LIST
32924: PUSH
32925: EMPTY
32926: LIST
32927: LIST
32928: PUSH
32929: LD_INT 3
32931: PUSH
32932: LD_INT 55
32934: PUSH
32935: EMPTY
32936: LIST
32937: PUSH
32938: EMPTY
32939: LIST
32940: LIST
32941: PUSH
32942: EMPTY
32943: LIST
32944: LIST
32945: PPUSH
32946: CALL_OW 72
32950: IFFALSE 33058
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
32952: LD_ADDR_VAR 0 18
32956: PUSH
32957: LD_VAR 0 6
32961: PPUSH
32962: LD_INT 3
32964: PUSH
32965: LD_INT 60
32967: PUSH
32968: EMPTY
32969: LIST
32970: PUSH
32971: EMPTY
32972: LIST
32973: LIST
32974: PUSH
32975: LD_INT 3
32977: PUSH
32978: LD_INT 55
32980: PUSH
32981: EMPTY
32982: LIST
32983: PUSH
32984: EMPTY
32985: LIST
32986: LIST
32987: PUSH
32988: EMPTY
32989: LIST
32990: LIST
32991: PPUSH
32992: CALL_OW 72
32996: PUSH
32997: LD_INT 1
32999: ARRAY
33000: ST_TO_ADDR
// if IsInUnit ( driver ) then
33001: LD_VAR 0 18
33005: PPUSH
33006: CALL_OW 310
33010: IFFALSE 33021
// ComExit ( driver ) ;
33012: LD_VAR 0 18
33016: PPUSH
33017: CALL 57410 0 1
// AddComEnterUnit ( driver , tmp ) ;
33021: LD_VAR 0 18
33025: PPUSH
33026: LD_VAR 0 13
33030: PPUSH
33031: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
33035: LD_VAR 0 18
33039: PPUSH
33040: LD_VAR 0 7
33044: PPUSH
33045: CALL_OW 173
// AddComExitVehicle ( driver ) ;
33049: LD_VAR 0 18
33053: PPUSH
33054: CALL_OW 181
// end ; continue ;
33058: GO 32710
// end ; if not cleaners or not tmp in cleaners then
33060: LD_VAR 0 6
33064: NOT
33065: PUSH
33066: LD_VAR 0 13
33070: PUSH
33071: LD_VAR 0 6
33075: IN
33076: NOT
33077: OR
33078: IFFALSE 33385
// begin if dep then
33080: LD_VAR 0 17
33084: IFFALSE 33220
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
33086: LD_ADDR_VAR 0 16
33090: PUSH
33091: LD_VAR 0 17
33095: PUSH
33096: LD_INT 1
33098: ARRAY
33099: PPUSH
33100: CALL_OW 250
33104: PPUSH
33105: LD_VAR 0 17
33109: PUSH
33110: LD_INT 1
33112: ARRAY
33113: PPUSH
33114: CALL_OW 254
33118: PPUSH
33119: LD_INT 5
33121: PPUSH
33122: CALL_OW 272
33126: PUSH
33127: LD_VAR 0 17
33131: PUSH
33132: LD_INT 1
33134: ARRAY
33135: PPUSH
33136: CALL_OW 251
33140: PPUSH
33141: LD_VAR 0 17
33145: PUSH
33146: LD_INT 1
33148: ARRAY
33149: PPUSH
33150: CALL_OW 254
33154: PPUSH
33155: LD_INT 5
33157: PPUSH
33158: CALL_OW 273
33162: PUSH
33163: EMPTY
33164: LIST
33165: LIST
33166: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
33167: LD_VAR 0 16
33171: PUSH
33172: LD_INT 1
33174: ARRAY
33175: PPUSH
33176: LD_VAR 0 16
33180: PUSH
33181: LD_INT 2
33183: ARRAY
33184: PPUSH
33185: CALL_OW 488
33189: IFFALSE 33220
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
33191: LD_VAR 0 13
33195: PPUSH
33196: LD_VAR 0 16
33200: PUSH
33201: LD_INT 1
33203: ARRAY
33204: PPUSH
33205: LD_VAR 0 16
33209: PUSH
33210: LD_INT 2
33212: ARRAY
33213: PPUSH
33214: CALL_OW 111
// continue ;
33218: GO 32710
// end ; end ; r := GetDir ( tmp ) ;
33220: LD_ADDR_VAR 0 15
33224: PUSH
33225: LD_VAR 0 13
33229: PPUSH
33230: CALL_OW 254
33234: ST_TO_ADDR
// if r = 5 then
33235: LD_VAR 0 15
33239: PUSH
33240: LD_INT 5
33242: EQUAL
33243: IFFALSE 33253
// r := 0 ;
33245: LD_ADDR_VAR 0 15
33249: PUSH
33250: LD_INT 0
33252: ST_TO_ADDR
// for j = r to 5 do
33253: LD_ADDR_VAR 0 10
33257: PUSH
33258: DOUBLE
33259: LD_VAR 0 15
33263: DEC
33264: ST_TO_ADDR
33265: LD_INT 5
33267: PUSH
33268: FOR_TO
33269: IFFALSE 33383
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
33271: LD_ADDR_VAR 0 11
33275: PUSH
33276: LD_VAR 0 13
33280: PPUSH
33281: CALL_OW 250
33285: PPUSH
33286: LD_VAR 0 10
33290: PPUSH
33291: LD_INT 2
33293: PPUSH
33294: CALL_OW 272
33298: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
33299: LD_ADDR_VAR 0 12
33303: PUSH
33304: LD_VAR 0 13
33308: PPUSH
33309: CALL_OW 251
33313: PPUSH
33314: LD_VAR 0 10
33318: PPUSH
33319: LD_INT 2
33321: PPUSH
33322: CALL_OW 273
33326: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
33327: LD_VAR 0 11
33331: PPUSH
33332: LD_VAR 0 12
33336: PPUSH
33337: CALL_OW 488
33341: PUSH
33342: LD_VAR 0 11
33346: PPUSH
33347: LD_VAR 0 12
33351: PPUSH
33352: CALL_OW 428
33356: NOT
33357: AND
33358: IFFALSE 33381
// begin ComMoveXY ( tmp , _x , _y ) ;
33360: LD_VAR 0 13
33364: PPUSH
33365: LD_VAR 0 11
33369: PPUSH
33370: LD_VAR 0 12
33374: PPUSH
33375: CALL_OW 111
// break ;
33379: GO 33383
// end ; end ;
33381: GO 33268
33383: POP
33384: POP
// end ; end ;
33385: GO 32710
33387: POP
33388: POP
// end ;
33389: LD_VAR 0 8
33393: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex ; begin
33394: LD_INT 0
33396: PPUSH
33397: PPUSH
33398: PPUSH
33399: PPUSH
33400: PPUSH
33401: PPUSH
33402: PPUSH
33403: PPUSH
33404: PPUSH
33405: PPUSH
// result := false ;
33406: LD_ADDR_VAR 0 6
33410: PUSH
33411: LD_INT 0
33413: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
33414: LD_VAR 0 1
33418: NOT
33419: PUSH
33420: LD_VAR 0 1
33424: PPUSH
33425: CALL_OW 266
33429: PUSH
33430: LD_INT 0
33432: PUSH
33433: LD_INT 1
33435: PUSH
33436: EMPTY
33437: LIST
33438: LIST
33439: IN
33440: NOT
33441: OR
33442: PUSH
33443: LD_VAR 0 2
33447: NOT
33448: OR
33449: PUSH
33450: LD_VAR 0 5
33454: PUSH
33455: LD_INT 0
33457: PUSH
33458: LD_INT 1
33460: PUSH
33461: LD_INT 2
33463: PUSH
33464: LD_INT 3
33466: PUSH
33467: LD_INT 4
33469: PUSH
33470: LD_INT 5
33472: PUSH
33473: EMPTY
33474: LIST
33475: LIST
33476: LIST
33477: LIST
33478: LIST
33479: LIST
33480: IN
33481: NOT
33482: OR
33483: PUSH
33484: LD_VAR 0 3
33488: PPUSH
33489: LD_VAR 0 4
33493: PPUSH
33494: CALL_OW 488
33498: NOT
33499: OR
33500: IFFALSE 33504
// exit ;
33502: GO 34221
// pom := GetBase ( depot ) ;
33504: LD_ADDR_VAR 0 10
33508: PUSH
33509: LD_VAR 0 1
33513: PPUSH
33514: CALL_OW 274
33518: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
33519: LD_ADDR_VAR 0 11
33523: PUSH
33524: LD_VAR 0 2
33528: PPUSH
33529: LD_VAR 0 1
33533: PPUSH
33534: CALL_OW 248
33538: PPUSH
33539: CALL_OW 450
33543: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
33544: LD_VAR 0 10
33548: PPUSH
33549: LD_INT 1
33551: PPUSH
33552: CALL_OW 275
33556: PUSH
33557: LD_VAR 0 11
33561: PUSH
33562: LD_INT 1
33564: ARRAY
33565: GREATEREQUAL
33566: PUSH
33567: LD_VAR 0 10
33571: PPUSH
33572: LD_INT 2
33574: PPUSH
33575: CALL_OW 275
33579: PUSH
33580: LD_VAR 0 11
33584: PUSH
33585: LD_INT 2
33587: ARRAY
33588: GREATEREQUAL
33589: AND
33590: PUSH
33591: LD_VAR 0 10
33595: PPUSH
33596: LD_INT 3
33598: PPUSH
33599: CALL_OW 275
33603: PUSH
33604: LD_VAR 0 11
33608: PUSH
33609: LD_INT 3
33611: ARRAY
33612: GREATEREQUAL
33613: AND
33614: NOT
33615: IFFALSE 33619
// exit ;
33617: GO 34221
// if GetBType ( depot ) = b_depot then
33619: LD_VAR 0 1
33623: PPUSH
33624: CALL_OW 266
33628: PUSH
33629: LD_INT 0
33631: EQUAL
33632: IFFALSE 33644
// dist := 28 else
33634: LD_ADDR_VAR 0 14
33638: PUSH
33639: LD_INT 28
33641: ST_TO_ADDR
33642: GO 33652
// dist := 36 ;
33644: LD_ADDR_VAR 0 14
33648: PUSH
33649: LD_INT 36
33651: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
33652: LD_VAR 0 1
33656: PPUSH
33657: LD_VAR 0 3
33661: PPUSH
33662: LD_VAR 0 4
33666: PPUSH
33667: CALL_OW 297
33671: PUSH
33672: LD_VAR 0 14
33676: GREATER
33677: IFFALSE 33681
// exit ;
33679: GO 34221
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
33681: LD_ADDR_VAR 0 12
33685: PUSH
33686: LD_VAR 0 2
33690: PPUSH
33691: LD_VAR 0 3
33695: PPUSH
33696: LD_VAR 0 4
33700: PPUSH
33701: LD_VAR 0 5
33705: PPUSH
33706: LD_VAR 0 1
33710: PPUSH
33711: CALL_OW 248
33715: PPUSH
33716: LD_INT 0
33718: PPUSH
33719: CALL 34226 0 6
33723: ST_TO_ADDR
// if not hexes then
33724: LD_VAR 0 12
33728: NOT
33729: IFFALSE 33733
// exit ;
33731: GO 34221
// hex := GetHexInfo ( x , y ) ;
33733: LD_ADDR_VAR 0 15
33737: PUSH
33738: LD_VAR 0 3
33742: PPUSH
33743: LD_VAR 0 4
33747: PPUSH
33748: CALL_OW 546
33752: ST_TO_ADDR
// if hex [ 1 ] then
33753: LD_VAR 0 15
33757: PUSH
33758: LD_INT 1
33760: ARRAY
33761: IFFALSE 33765
// exit ;
33763: GO 34221
// height := hex [ 2 ] ;
33765: LD_ADDR_VAR 0 13
33769: PUSH
33770: LD_VAR 0 15
33774: PUSH
33775: LD_INT 2
33777: ARRAY
33778: ST_TO_ADDR
// for i = 1 to hexes do
33779: LD_ADDR_VAR 0 7
33783: PUSH
33784: DOUBLE
33785: LD_INT 1
33787: DEC
33788: ST_TO_ADDR
33789: LD_VAR 0 12
33793: PUSH
33794: FOR_TO
33795: IFFALSE 34125
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
33797: LD_VAR 0 12
33801: PUSH
33802: LD_VAR 0 7
33806: ARRAY
33807: PUSH
33808: LD_INT 1
33810: ARRAY
33811: PPUSH
33812: LD_VAR 0 12
33816: PUSH
33817: LD_VAR 0 7
33821: ARRAY
33822: PUSH
33823: LD_INT 2
33825: ARRAY
33826: PPUSH
33827: CALL_OW 488
33831: NOT
33832: PUSH
33833: LD_VAR 0 12
33837: PUSH
33838: LD_VAR 0 7
33842: ARRAY
33843: PUSH
33844: LD_INT 1
33846: ARRAY
33847: PPUSH
33848: LD_VAR 0 12
33852: PUSH
33853: LD_VAR 0 7
33857: ARRAY
33858: PUSH
33859: LD_INT 2
33861: ARRAY
33862: PPUSH
33863: CALL_OW 428
33867: PUSH
33868: LD_INT 0
33870: GREATER
33871: OR
33872: PUSH
33873: LD_VAR 0 12
33877: PUSH
33878: LD_VAR 0 7
33882: ARRAY
33883: PUSH
33884: LD_INT 1
33886: ARRAY
33887: PPUSH
33888: LD_VAR 0 12
33892: PUSH
33893: LD_VAR 0 7
33897: ARRAY
33898: PUSH
33899: LD_INT 2
33901: ARRAY
33902: PPUSH
33903: CALL_OW 351
33907: OR
33908: IFFALSE 33914
// exit ;
33910: POP
33911: POP
33912: GO 34221
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
33914: LD_ADDR_VAR 0 8
33918: PUSH
33919: LD_VAR 0 12
33923: PUSH
33924: LD_VAR 0 7
33928: ARRAY
33929: PUSH
33930: LD_INT 1
33932: ARRAY
33933: PPUSH
33934: LD_VAR 0 12
33938: PUSH
33939: LD_VAR 0 7
33943: ARRAY
33944: PUSH
33945: LD_INT 2
33947: ARRAY
33948: PPUSH
33949: CALL_OW 546
33953: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
33954: LD_VAR 0 8
33958: PUSH
33959: LD_INT 1
33961: ARRAY
33962: PUSH
33963: LD_VAR 0 8
33967: PUSH
33968: LD_INT 2
33970: ARRAY
33971: PUSH
33972: LD_VAR 0 13
33976: PUSH
33977: LD_INT 2
33979: PLUS
33980: GREATER
33981: OR
33982: PUSH
33983: LD_VAR 0 8
33987: PUSH
33988: LD_INT 2
33990: ARRAY
33991: PUSH
33992: LD_VAR 0 13
33996: PUSH
33997: LD_INT 2
33999: MINUS
34000: LESS
34001: OR
34002: PUSH
34003: LD_VAR 0 8
34007: PUSH
34008: LD_INT 3
34010: ARRAY
34011: PUSH
34012: LD_INT 0
34014: PUSH
34015: LD_INT 8
34017: PUSH
34018: LD_INT 9
34020: PUSH
34021: LD_INT 10
34023: PUSH
34024: LD_INT 11
34026: PUSH
34027: LD_INT 12
34029: PUSH
34030: LD_INT 13
34032: PUSH
34033: LD_INT 16
34035: PUSH
34036: LD_INT 17
34038: PUSH
34039: LD_INT 18
34041: PUSH
34042: LD_INT 19
34044: PUSH
34045: LD_INT 20
34047: PUSH
34048: LD_INT 21
34050: PUSH
34051: EMPTY
34052: LIST
34053: LIST
34054: LIST
34055: LIST
34056: LIST
34057: LIST
34058: LIST
34059: LIST
34060: LIST
34061: LIST
34062: LIST
34063: LIST
34064: LIST
34065: IN
34066: NOT
34067: OR
34068: PUSH
34069: LD_VAR 0 8
34073: PUSH
34074: LD_INT 5
34076: ARRAY
34077: NOT
34078: OR
34079: PUSH
34080: LD_VAR 0 8
34084: PUSH
34085: LD_INT 6
34087: ARRAY
34088: PUSH
34089: LD_INT 1
34091: PUSH
34092: LD_INT 2
34094: PUSH
34095: LD_INT 7
34097: PUSH
34098: LD_INT 9
34100: PUSH
34101: LD_INT 10
34103: PUSH
34104: LD_INT 11
34106: PUSH
34107: EMPTY
34108: LIST
34109: LIST
34110: LIST
34111: LIST
34112: LIST
34113: LIST
34114: IN
34115: NOT
34116: OR
34117: IFFALSE 34123
// exit ;
34119: POP
34120: POP
34121: GO 34221
// end ;
34123: GO 33794
34125: POP
34126: POP
// side := GetSide ( depot ) ;
34127: LD_ADDR_VAR 0 9
34131: PUSH
34132: LD_VAR 0 1
34136: PPUSH
34137: CALL_OW 255
34141: ST_TO_ADDR
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
34142: LD_VAR 0 9
34146: PPUSH
34147: LD_VAR 0 3
34151: PPUSH
34152: LD_VAR 0 4
34156: PPUSH
34157: LD_INT 20
34159: PPUSH
34160: CALL 26542 0 4
34164: PUSH
34165: LD_INT 4
34167: ARRAY
34168: IFFALSE 34172
// exit ;
34170: GO 34221
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
34172: LD_VAR 0 2
34176: PUSH
34177: LD_INT 29
34179: PUSH
34180: LD_INT 30
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: IN
34187: PUSH
34188: LD_VAR 0 3
34192: PPUSH
34193: LD_VAR 0 4
34197: PPUSH
34198: LD_VAR 0 9
34202: PPUSH
34203: CALL_OW 440
34207: NOT
34208: AND
34209: IFFALSE 34213
// exit ;
34211: GO 34221
// result := true ;
34213: LD_ADDR_VAR 0 6
34217: PUSH
34218: LD_INT 1
34220: ST_TO_ADDR
// end ;
34221: LD_VAR 0 6
34225: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
34226: LD_INT 0
34228: PPUSH
34229: PPUSH
34230: PPUSH
34231: PPUSH
34232: PPUSH
34233: PPUSH
34234: PPUSH
34235: PPUSH
34236: PPUSH
34237: PPUSH
34238: PPUSH
34239: PPUSH
34240: PPUSH
34241: PPUSH
34242: PPUSH
34243: PPUSH
34244: PPUSH
34245: PPUSH
34246: PPUSH
34247: PPUSH
34248: PPUSH
34249: PPUSH
34250: PPUSH
34251: PPUSH
34252: PPUSH
34253: PPUSH
34254: PPUSH
34255: PPUSH
34256: PPUSH
34257: PPUSH
34258: PPUSH
34259: PPUSH
34260: PPUSH
34261: PPUSH
34262: PPUSH
34263: PPUSH
34264: PPUSH
34265: PPUSH
34266: PPUSH
34267: PPUSH
34268: PPUSH
34269: PPUSH
34270: PPUSH
34271: PPUSH
34272: PPUSH
34273: PPUSH
34274: PPUSH
34275: PPUSH
34276: PPUSH
34277: PPUSH
34278: PPUSH
34279: PPUSH
34280: PPUSH
34281: PPUSH
34282: PPUSH
34283: PPUSH
34284: PPUSH
34285: PPUSH
// result = [ ] ;
34286: LD_ADDR_VAR 0 7
34290: PUSH
34291: EMPTY
34292: ST_TO_ADDR
// temp_list = [ ] ;
34293: LD_ADDR_VAR 0 9
34297: PUSH
34298: EMPTY
34299: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
34300: LD_VAR 0 4
34304: PUSH
34305: LD_INT 0
34307: PUSH
34308: LD_INT 1
34310: PUSH
34311: LD_INT 2
34313: PUSH
34314: LD_INT 3
34316: PUSH
34317: LD_INT 4
34319: PUSH
34320: LD_INT 5
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: LIST
34327: LIST
34328: LIST
34329: LIST
34330: IN
34331: NOT
34332: PUSH
34333: LD_VAR 0 1
34337: PUSH
34338: LD_INT 0
34340: PUSH
34341: LD_INT 1
34343: PUSH
34344: EMPTY
34345: LIST
34346: LIST
34347: IN
34348: PUSH
34349: LD_VAR 0 5
34353: PUSH
34354: LD_INT 1
34356: PUSH
34357: LD_INT 2
34359: PUSH
34360: LD_INT 3
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: LIST
34367: IN
34368: NOT
34369: AND
34370: OR
34371: IFFALSE 34375
// exit ;
34373: GO 52766
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
34375: LD_VAR 0 1
34379: PUSH
34380: LD_INT 6
34382: PUSH
34383: LD_INT 7
34385: PUSH
34386: LD_INT 8
34388: PUSH
34389: LD_INT 13
34391: PUSH
34392: LD_INT 12
34394: PUSH
34395: LD_INT 15
34397: PUSH
34398: LD_INT 11
34400: PUSH
34401: LD_INT 14
34403: PUSH
34404: LD_INT 10
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: LIST
34411: LIST
34412: LIST
34413: LIST
34414: LIST
34415: LIST
34416: LIST
34417: IN
34418: IFFALSE 34428
// btype = b_lab ;
34420: LD_ADDR_VAR 0 1
34424: PUSH
34425: LD_INT 6
34427: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
34428: LD_VAR 0 6
34432: PUSH
34433: LD_INT 0
34435: PUSH
34436: LD_INT 1
34438: PUSH
34439: LD_INT 2
34441: PUSH
34442: EMPTY
34443: LIST
34444: LIST
34445: LIST
34446: IN
34447: NOT
34448: PUSH
34449: LD_VAR 0 1
34453: PUSH
34454: LD_INT 0
34456: PUSH
34457: LD_INT 1
34459: PUSH
34460: LD_INT 2
34462: PUSH
34463: LD_INT 3
34465: PUSH
34466: LD_INT 6
34468: PUSH
34469: LD_INT 36
34471: PUSH
34472: LD_INT 4
34474: PUSH
34475: LD_INT 5
34477: PUSH
34478: LD_INT 31
34480: PUSH
34481: LD_INT 32
34483: PUSH
34484: LD_INT 33
34486: PUSH
34487: EMPTY
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: LIST
34495: LIST
34496: LIST
34497: LIST
34498: LIST
34499: IN
34500: NOT
34501: PUSH
34502: LD_VAR 0 6
34506: PUSH
34507: LD_INT 1
34509: EQUAL
34510: AND
34511: OR
34512: PUSH
34513: LD_VAR 0 1
34517: PUSH
34518: LD_INT 2
34520: PUSH
34521: LD_INT 3
34523: PUSH
34524: EMPTY
34525: LIST
34526: LIST
34527: IN
34528: NOT
34529: PUSH
34530: LD_VAR 0 6
34534: PUSH
34535: LD_INT 2
34537: EQUAL
34538: AND
34539: OR
34540: IFFALSE 34550
// mode = 0 ;
34542: LD_ADDR_VAR 0 6
34546: PUSH
34547: LD_INT 0
34549: ST_TO_ADDR
// case mode of 0 :
34550: LD_VAR 0 6
34554: PUSH
34555: LD_INT 0
34557: DOUBLE
34558: EQUAL
34559: IFTRUE 34563
34561: GO 46016
34563: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
34564: LD_ADDR_VAR 0 11
34568: PUSH
34569: LD_INT 0
34571: PUSH
34572: LD_INT 0
34574: PUSH
34575: EMPTY
34576: LIST
34577: LIST
34578: PUSH
34579: LD_INT 0
34581: PUSH
34582: LD_INT 1
34584: NEG
34585: PUSH
34586: EMPTY
34587: LIST
34588: LIST
34589: PUSH
34590: LD_INT 1
34592: PUSH
34593: LD_INT 0
34595: PUSH
34596: EMPTY
34597: LIST
34598: LIST
34599: PUSH
34600: LD_INT 1
34602: PUSH
34603: LD_INT 1
34605: PUSH
34606: EMPTY
34607: LIST
34608: LIST
34609: PUSH
34610: LD_INT 0
34612: PUSH
34613: LD_INT 1
34615: PUSH
34616: EMPTY
34617: LIST
34618: LIST
34619: PUSH
34620: LD_INT 1
34622: NEG
34623: PUSH
34624: LD_INT 0
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: PUSH
34631: LD_INT 1
34633: NEG
34634: PUSH
34635: LD_INT 1
34637: NEG
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PUSH
34643: LD_INT 1
34645: NEG
34646: PUSH
34647: LD_INT 2
34649: NEG
34650: PUSH
34651: EMPTY
34652: LIST
34653: LIST
34654: PUSH
34655: LD_INT 0
34657: PUSH
34658: LD_INT 2
34660: NEG
34661: PUSH
34662: EMPTY
34663: LIST
34664: LIST
34665: PUSH
34666: LD_INT 1
34668: PUSH
34669: LD_INT 1
34671: NEG
34672: PUSH
34673: EMPTY
34674: LIST
34675: LIST
34676: PUSH
34677: LD_INT 1
34679: PUSH
34680: LD_INT 2
34682: PUSH
34683: EMPTY
34684: LIST
34685: LIST
34686: PUSH
34687: LD_INT 0
34689: PUSH
34690: LD_INT 2
34692: PUSH
34693: EMPTY
34694: LIST
34695: LIST
34696: PUSH
34697: LD_INT 1
34699: NEG
34700: PUSH
34701: LD_INT 1
34703: PUSH
34704: EMPTY
34705: LIST
34706: LIST
34707: PUSH
34708: LD_INT 1
34710: PUSH
34711: LD_INT 3
34713: PUSH
34714: EMPTY
34715: LIST
34716: LIST
34717: PUSH
34718: LD_INT 0
34720: PUSH
34721: LD_INT 3
34723: PUSH
34724: EMPTY
34725: LIST
34726: LIST
34727: PUSH
34728: LD_INT 1
34730: NEG
34731: PUSH
34732: LD_INT 2
34734: PUSH
34735: EMPTY
34736: LIST
34737: LIST
34738: PUSH
34739: EMPTY
34740: LIST
34741: LIST
34742: LIST
34743: LIST
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: LIST
34752: LIST
34753: LIST
34754: LIST
34755: LIST
34756: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
34757: LD_ADDR_VAR 0 12
34761: PUSH
34762: LD_INT 0
34764: PUSH
34765: LD_INT 0
34767: PUSH
34768: EMPTY
34769: LIST
34770: LIST
34771: PUSH
34772: LD_INT 0
34774: PUSH
34775: LD_INT 1
34777: NEG
34778: PUSH
34779: EMPTY
34780: LIST
34781: LIST
34782: PUSH
34783: LD_INT 1
34785: PUSH
34786: LD_INT 0
34788: PUSH
34789: EMPTY
34790: LIST
34791: LIST
34792: PUSH
34793: LD_INT 1
34795: PUSH
34796: LD_INT 1
34798: PUSH
34799: EMPTY
34800: LIST
34801: LIST
34802: PUSH
34803: LD_INT 0
34805: PUSH
34806: LD_INT 1
34808: PUSH
34809: EMPTY
34810: LIST
34811: LIST
34812: PUSH
34813: LD_INT 1
34815: NEG
34816: PUSH
34817: LD_INT 0
34819: PUSH
34820: EMPTY
34821: LIST
34822: LIST
34823: PUSH
34824: LD_INT 1
34826: NEG
34827: PUSH
34828: LD_INT 1
34830: NEG
34831: PUSH
34832: EMPTY
34833: LIST
34834: LIST
34835: PUSH
34836: LD_INT 1
34838: PUSH
34839: LD_INT 1
34841: NEG
34842: PUSH
34843: EMPTY
34844: LIST
34845: LIST
34846: PUSH
34847: LD_INT 2
34849: PUSH
34850: LD_INT 0
34852: PUSH
34853: EMPTY
34854: LIST
34855: LIST
34856: PUSH
34857: LD_INT 2
34859: PUSH
34860: LD_INT 1
34862: PUSH
34863: EMPTY
34864: LIST
34865: LIST
34866: PUSH
34867: LD_INT 1
34869: NEG
34870: PUSH
34871: LD_INT 1
34873: PUSH
34874: EMPTY
34875: LIST
34876: LIST
34877: PUSH
34878: LD_INT 2
34880: NEG
34881: PUSH
34882: LD_INT 0
34884: PUSH
34885: EMPTY
34886: LIST
34887: LIST
34888: PUSH
34889: LD_INT 2
34891: NEG
34892: PUSH
34893: LD_INT 1
34895: NEG
34896: PUSH
34897: EMPTY
34898: LIST
34899: LIST
34900: PUSH
34901: LD_INT 2
34903: NEG
34904: PUSH
34905: LD_INT 1
34907: PUSH
34908: EMPTY
34909: LIST
34910: LIST
34911: PUSH
34912: LD_INT 3
34914: NEG
34915: PUSH
34916: LD_INT 0
34918: PUSH
34919: EMPTY
34920: LIST
34921: LIST
34922: PUSH
34923: LD_INT 3
34925: NEG
34926: PUSH
34927: LD_INT 1
34929: NEG
34930: PUSH
34931: EMPTY
34932: LIST
34933: LIST
34934: PUSH
34935: EMPTY
34936: LIST
34937: LIST
34938: LIST
34939: LIST
34940: LIST
34941: LIST
34942: LIST
34943: LIST
34944: LIST
34945: LIST
34946: LIST
34947: LIST
34948: LIST
34949: LIST
34950: LIST
34951: LIST
34952: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
34953: LD_ADDR_VAR 0 13
34957: PUSH
34958: LD_INT 0
34960: PUSH
34961: LD_INT 0
34963: PUSH
34964: EMPTY
34965: LIST
34966: LIST
34967: PUSH
34968: LD_INT 0
34970: PUSH
34971: LD_INT 1
34973: NEG
34974: PUSH
34975: EMPTY
34976: LIST
34977: LIST
34978: PUSH
34979: LD_INT 1
34981: PUSH
34982: LD_INT 0
34984: PUSH
34985: EMPTY
34986: LIST
34987: LIST
34988: PUSH
34989: LD_INT 1
34991: PUSH
34992: LD_INT 1
34994: PUSH
34995: EMPTY
34996: LIST
34997: LIST
34998: PUSH
34999: LD_INT 0
35001: PUSH
35002: LD_INT 1
35004: PUSH
35005: EMPTY
35006: LIST
35007: LIST
35008: PUSH
35009: LD_INT 1
35011: NEG
35012: PUSH
35013: LD_INT 0
35015: PUSH
35016: EMPTY
35017: LIST
35018: LIST
35019: PUSH
35020: LD_INT 1
35022: NEG
35023: PUSH
35024: LD_INT 1
35026: NEG
35027: PUSH
35028: EMPTY
35029: LIST
35030: LIST
35031: PUSH
35032: LD_INT 1
35034: NEG
35035: PUSH
35036: LD_INT 2
35038: NEG
35039: PUSH
35040: EMPTY
35041: LIST
35042: LIST
35043: PUSH
35044: LD_INT 2
35046: PUSH
35047: LD_INT 1
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: PUSH
35054: LD_INT 2
35056: PUSH
35057: LD_INT 2
35059: PUSH
35060: EMPTY
35061: LIST
35062: LIST
35063: PUSH
35064: LD_INT 1
35066: PUSH
35067: LD_INT 2
35069: PUSH
35070: EMPTY
35071: LIST
35072: LIST
35073: PUSH
35074: LD_INT 2
35076: NEG
35077: PUSH
35078: LD_INT 1
35080: NEG
35081: PUSH
35082: EMPTY
35083: LIST
35084: LIST
35085: PUSH
35086: LD_INT 2
35088: NEG
35089: PUSH
35090: LD_INT 2
35092: NEG
35093: PUSH
35094: EMPTY
35095: LIST
35096: LIST
35097: PUSH
35098: LD_INT 2
35100: NEG
35101: PUSH
35102: LD_INT 3
35104: NEG
35105: PUSH
35106: EMPTY
35107: LIST
35108: LIST
35109: PUSH
35110: LD_INT 3
35112: NEG
35113: PUSH
35114: LD_INT 2
35116: NEG
35117: PUSH
35118: EMPTY
35119: LIST
35120: LIST
35121: PUSH
35122: LD_INT 3
35124: NEG
35125: PUSH
35126: LD_INT 3
35128: NEG
35129: PUSH
35130: EMPTY
35131: LIST
35132: LIST
35133: PUSH
35134: EMPTY
35135: LIST
35136: LIST
35137: LIST
35138: LIST
35139: LIST
35140: LIST
35141: LIST
35142: LIST
35143: LIST
35144: LIST
35145: LIST
35146: LIST
35147: LIST
35148: LIST
35149: LIST
35150: LIST
35151: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35152: LD_ADDR_VAR 0 14
35156: PUSH
35157: LD_INT 0
35159: PUSH
35160: LD_INT 0
35162: PUSH
35163: EMPTY
35164: LIST
35165: LIST
35166: PUSH
35167: LD_INT 0
35169: PUSH
35170: LD_INT 1
35172: NEG
35173: PUSH
35174: EMPTY
35175: LIST
35176: LIST
35177: PUSH
35178: LD_INT 1
35180: PUSH
35181: LD_INT 0
35183: PUSH
35184: EMPTY
35185: LIST
35186: LIST
35187: PUSH
35188: LD_INT 1
35190: PUSH
35191: LD_INT 1
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: PUSH
35198: LD_INT 0
35200: PUSH
35201: LD_INT 1
35203: PUSH
35204: EMPTY
35205: LIST
35206: LIST
35207: PUSH
35208: LD_INT 1
35210: NEG
35211: PUSH
35212: LD_INT 0
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: PUSH
35219: LD_INT 1
35221: NEG
35222: PUSH
35223: LD_INT 1
35225: NEG
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: PUSH
35231: LD_INT 1
35233: NEG
35234: PUSH
35235: LD_INT 2
35237: NEG
35238: PUSH
35239: EMPTY
35240: LIST
35241: LIST
35242: PUSH
35243: LD_INT 0
35245: PUSH
35246: LD_INT 2
35248: NEG
35249: PUSH
35250: EMPTY
35251: LIST
35252: LIST
35253: PUSH
35254: LD_INT 1
35256: PUSH
35257: LD_INT 1
35259: NEG
35260: PUSH
35261: EMPTY
35262: LIST
35263: LIST
35264: PUSH
35265: LD_INT 1
35267: PUSH
35268: LD_INT 2
35270: PUSH
35271: EMPTY
35272: LIST
35273: LIST
35274: PUSH
35275: LD_INT 0
35277: PUSH
35278: LD_INT 2
35280: PUSH
35281: EMPTY
35282: LIST
35283: LIST
35284: PUSH
35285: LD_INT 1
35287: NEG
35288: PUSH
35289: LD_INT 1
35291: PUSH
35292: EMPTY
35293: LIST
35294: LIST
35295: PUSH
35296: LD_INT 1
35298: NEG
35299: PUSH
35300: LD_INT 3
35302: NEG
35303: PUSH
35304: EMPTY
35305: LIST
35306: LIST
35307: PUSH
35308: LD_INT 0
35310: PUSH
35311: LD_INT 3
35313: NEG
35314: PUSH
35315: EMPTY
35316: LIST
35317: LIST
35318: PUSH
35319: LD_INT 1
35321: PUSH
35322: LD_INT 2
35324: NEG
35325: PUSH
35326: EMPTY
35327: LIST
35328: LIST
35329: PUSH
35330: EMPTY
35331: LIST
35332: LIST
35333: LIST
35334: LIST
35335: LIST
35336: LIST
35337: LIST
35338: LIST
35339: LIST
35340: LIST
35341: LIST
35342: LIST
35343: LIST
35344: LIST
35345: LIST
35346: LIST
35347: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35348: LD_ADDR_VAR 0 15
35352: PUSH
35353: LD_INT 0
35355: PUSH
35356: LD_INT 0
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: PUSH
35363: LD_INT 0
35365: PUSH
35366: LD_INT 1
35368: NEG
35369: PUSH
35370: EMPTY
35371: LIST
35372: LIST
35373: PUSH
35374: LD_INT 1
35376: PUSH
35377: LD_INT 0
35379: PUSH
35380: EMPTY
35381: LIST
35382: LIST
35383: PUSH
35384: LD_INT 1
35386: PUSH
35387: LD_INT 1
35389: PUSH
35390: EMPTY
35391: LIST
35392: LIST
35393: PUSH
35394: LD_INT 0
35396: PUSH
35397: LD_INT 1
35399: PUSH
35400: EMPTY
35401: LIST
35402: LIST
35403: PUSH
35404: LD_INT 1
35406: NEG
35407: PUSH
35408: LD_INT 0
35410: PUSH
35411: EMPTY
35412: LIST
35413: LIST
35414: PUSH
35415: LD_INT 1
35417: NEG
35418: PUSH
35419: LD_INT 1
35421: NEG
35422: PUSH
35423: EMPTY
35424: LIST
35425: LIST
35426: PUSH
35427: LD_INT 1
35429: PUSH
35430: LD_INT 1
35432: NEG
35433: PUSH
35434: EMPTY
35435: LIST
35436: LIST
35437: PUSH
35438: LD_INT 2
35440: PUSH
35441: LD_INT 0
35443: PUSH
35444: EMPTY
35445: LIST
35446: LIST
35447: PUSH
35448: LD_INT 2
35450: PUSH
35451: LD_INT 1
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: PUSH
35458: LD_INT 1
35460: NEG
35461: PUSH
35462: LD_INT 1
35464: PUSH
35465: EMPTY
35466: LIST
35467: LIST
35468: PUSH
35469: LD_INT 2
35471: NEG
35472: PUSH
35473: LD_INT 0
35475: PUSH
35476: EMPTY
35477: LIST
35478: LIST
35479: PUSH
35480: LD_INT 2
35482: NEG
35483: PUSH
35484: LD_INT 1
35486: NEG
35487: PUSH
35488: EMPTY
35489: LIST
35490: LIST
35491: PUSH
35492: LD_INT 2
35494: PUSH
35495: LD_INT 1
35497: NEG
35498: PUSH
35499: EMPTY
35500: LIST
35501: LIST
35502: PUSH
35503: LD_INT 3
35505: PUSH
35506: LD_INT 0
35508: PUSH
35509: EMPTY
35510: LIST
35511: LIST
35512: PUSH
35513: LD_INT 3
35515: PUSH
35516: LD_INT 1
35518: PUSH
35519: EMPTY
35520: LIST
35521: LIST
35522: PUSH
35523: EMPTY
35524: LIST
35525: LIST
35526: LIST
35527: LIST
35528: LIST
35529: LIST
35530: LIST
35531: LIST
35532: LIST
35533: LIST
35534: LIST
35535: LIST
35536: LIST
35537: LIST
35538: LIST
35539: LIST
35540: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35541: LD_ADDR_VAR 0 16
35545: PUSH
35546: LD_INT 0
35548: PUSH
35549: LD_INT 0
35551: PUSH
35552: EMPTY
35553: LIST
35554: LIST
35555: PUSH
35556: LD_INT 0
35558: PUSH
35559: LD_INT 1
35561: NEG
35562: PUSH
35563: EMPTY
35564: LIST
35565: LIST
35566: PUSH
35567: LD_INT 1
35569: PUSH
35570: LD_INT 0
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: PUSH
35577: LD_INT 1
35579: PUSH
35580: LD_INT 1
35582: PUSH
35583: EMPTY
35584: LIST
35585: LIST
35586: PUSH
35587: LD_INT 0
35589: PUSH
35590: LD_INT 1
35592: PUSH
35593: EMPTY
35594: LIST
35595: LIST
35596: PUSH
35597: LD_INT 1
35599: NEG
35600: PUSH
35601: LD_INT 0
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: PUSH
35608: LD_INT 1
35610: NEG
35611: PUSH
35612: LD_INT 1
35614: NEG
35615: PUSH
35616: EMPTY
35617: LIST
35618: LIST
35619: PUSH
35620: LD_INT 1
35622: NEG
35623: PUSH
35624: LD_INT 2
35626: NEG
35627: PUSH
35628: EMPTY
35629: LIST
35630: LIST
35631: PUSH
35632: LD_INT 2
35634: PUSH
35635: LD_INT 1
35637: PUSH
35638: EMPTY
35639: LIST
35640: LIST
35641: PUSH
35642: LD_INT 2
35644: PUSH
35645: LD_INT 2
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: PUSH
35652: LD_INT 1
35654: PUSH
35655: LD_INT 2
35657: PUSH
35658: EMPTY
35659: LIST
35660: LIST
35661: PUSH
35662: LD_INT 2
35664: NEG
35665: PUSH
35666: LD_INT 1
35668: NEG
35669: PUSH
35670: EMPTY
35671: LIST
35672: LIST
35673: PUSH
35674: LD_INT 2
35676: NEG
35677: PUSH
35678: LD_INT 2
35680: NEG
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: LD_INT 3
35688: PUSH
35689: LD_INT 2
35691: PUSH
35692: EMPTY
35693: LIST
35694: LIST
35695: PUSH
35696: LD_INT 3
35698: PUSH
35699: LD_INT 3
35701: PUSH
35702: EMPTY
35703: LIST
35704: LIST
35705: PUSH
35706: LD_INT 2
35708: PUSH
35709: LD_INT 3
35711: PUSH
35712: EMPTY
35713: LIST
35714: LIST
35715: PUSH
35716: EMPTY
35717: LIST
35718: LIST
35719: LIST
35720: LIST
35721: LIST
35722: LIST
35723: LIST
35724: LIST
35725: LIST
35726: LIST
35727: LIST
35728: LIST
35729: LIST
35730: LIST
35731: LIST
35732: LIST
35733: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35734: LD_ADDR_VAR 0 17
35738: PUSH
35739: LD_INT 0
35741: PUSH
35742: LD_INT 0
35744: PUSH
35745: EMPTY
35746: LIST
35747: LIST
35748: PUSH
35749: LD_INT 0
35751: PUSH
35752: LD_INT 1
35754: NEG
35755: PUSH
35756: EMPTY
35757: LIST
35758: LIST
35759: PUSH
35760: LD_INT 1
35762: PUSH
35763: LD_INT 0
35765: PUSH
35766: EMPTY
35767: LIST
35768: LIST
35769: PUSH
35770: LD_INT 1
35772: PUSH
35773: LD_INT 1
35775: PUSH
35776: EMPTY
35777: LIST
35778: LIST
35779: PUSH
35780: LD_INT 0
35782: PUSH
35783: LD_INT 1
35785: PUSH
35786: EMPTY
35787: LIST
35788: LIST
35789: PUSH
35790: LD_INT 1
35792: NEG
35793: PUSH
35794: LD_INT 0
35796: PUSH
35797: EMPTY
35798: LIST
35799: LIST
35800: PUSH
35801: LD_INT 1
35803: NEG
35804: PUSH
35805: LD_INT 1
35807: NEG
35808: PUSH
35809: EMPTY
35810: LIST
35811: LIST
35812: PUSH
35813: LD_INT 1
35815: NEG
35816: PUSH
35817: LD_INT 2
35819: NEG
35820: PUSH
35821: EMPTY
35822: LIST
35823: LIST
35824: PUSH
35825: LD_INT 0
35827: PUSH
35828: LD_INT 2
35830: NEG
35831: PUSH
35832: EMPTY
35833: LIST
35834: LIST
35835: PUSH
35836: LD_INT 1
35838: PUSH
35839: LD_INT 1
35841: NEG
35842: PUSH
35843: EMPTY
35844: LIST
35845: LIST
35846: PUSH
35847: LD_INT 2
35849: PUSH
35850: LD_INT 0
35852: PUSH
35853: EMPTY
35854: LIST
35855: LIST
35856: PUSH
35857: LD_INT 2
35859: PUSH
35860: LD_INT 1
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: LD_INT 2
35869: PUSH
35870: LD_INT 2
35872: PUSH
35873: EMPTY
35874: LIST
35875: LIST
35876: PUSH
35877: LD_INT 1
35879: PUSH
35880: LD_INT 2
35882: PUSH
35883: EMPTY
35884: LIST
35885: LIST
35886: PUSH
35887: LD_INT 0
35889: PUSH
35890: LD_INT 2
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: LD_INT 1
35899: NEG
35900: PUSH
35901: LD_INT 1
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: LD_INT 2
35910: NEG
35911: PUSH
35912: LD_INT 0
35914: PUSH
35915: EMPTY
35916: LIST
35917: LIST
35918: PUSH
35919: LD_INT 2
35921: NEG
35922: PUSH
35923: LD_INT 1
35925: NEG
35926: PUSH
35927: EMPTY
35928: LIST
35929: LIST
35930: PUSH
35931: LD_INT 2
35933: NEG
35934: PUSH
35935: LD_INT 2
35937: NEG
35938: PUSH
35939: EMPTY
35940: LIST
35941: LIST
35942: PUSH
35943: EMPTY
35944: LIST
35945: LIST
35946: LIST
35947: LIST
35948: LIST
35949: LIST
35950: LIST
35951: LIST
35952: LIST
35953: LIST
35954: LIST
35955: LIST
35956: LIST
35957: LIST
35958: LIST
35959: LIST
35960: LIST
35961: LIST
35962: LIST
35963: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
35964: LD_ADDR_VAR 0 18
35968: PUSH
35969: LD_INT 0
35971: PUSH
35972: LD_INT 0
35974: PUSH
35975: EMPTY
35976: LIST
35977: LIST
35978: PUSH
35979: LD_INT 0
35981: PUSH
35982: LD_INT 1
35984: NEG
35985: PUSH
35986: EMPTY
35987: LIST
35988: LIST
35989: PUSH
35990: LD_INT 1
35992: PUSH
35993: LD_INT 0
35995: PUSH
35996: EMPTY
35997: LIST
35998: LIST
35999: PUSH
36000: LD_INT 1
36002: PUSH
36003: LD_INT 1
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: PUSH
36010: LD_INT 0
36012: PUSH
36013: LD_INT 1
36015: PUSH
36016: EMPTY
36017: LIST
36018: LIST
36019: PUSH
36020: LD_INT 1
36022: NEG
36023: PUSH
36024: LD_INT 0
36026: PUSH
36027: EMPTY
36028: LIST
36029: LIST
36030: PUSH
36031: LD_INT 1
36033: NEG
36034: PUSH
36035: LD_INT 1
36037: NEG
36038: PUSH
36039: EMPTY
36040: LIST
36041: LIST
36042: PUSH
36043: LD_INT 1
36045: NEG
36046: PUSH
36047: LD_INT 2
36049: NEG
36050: PUSH
36051: EMPTY
36052: LIST
36053: LIST
36054: PUSH
36055: LD_INT 0
36057: PUSH
36058: LD_INT 2
36060: NEG
36061: PUSH
36062: EMPTY
36063: LIST
36064: LIST
36065: PUSH
36066: LD_INT 1
36068: PUSH
36069: LD_INT 1
36071: NEG
36072: PUSH
36073: EMPTY
36074: LIST
36075: LIST
36076: PUSH
36077: LD_INT 2
36079: PUSH
36080: LD_INT 0
36082: PUSH
36083: EMPTY
36084: LIST
36085: LIST
36086: PUSH
36087: LD_INT 2
36089: PUSH
36090: LD_INT 1
36092: PUSH
36093: EMPTY
36094: LIST
36095: LIST
36096: PUSH
36097: LD_INT 2
36099: PUSH
36100: LD_INT 2
36102: PUSH
36103: EMPTY
36104: LIST
36105: LIST
36106: PUSH
36107: LD_INT 1
36109: PUSH
36110: LD_INT 2
36112: PUSH
36113: EMPTY
36114: LIST
36115: LIST
36116: PUSH
36117: LD_INT 0
36119: PUSH
36120: LD_INT 2
36122: PUSH
36123: EMPTY
36124: LIST
36125: LIST
36126: PUSH
36127: LD_INT 1
36129: NEG
36130: PUSH
36131: LD_INT 1
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: PUSH
36138: LD_INT 2
36140: NEG
36141: PUSH
36142: LD_INT 0
36144: PUSH
36145: EMPTY
36146: LIST
36147: LIST
36148: PUSH
36149: LD_INT 2
36151: NEG
36152: PUSH
36153: LD_INT 1
36155: NEG
36156: PUSH
36157: EMPTY
36158: LIST
36159: LIST
36160: PUSH
36161: LD_INT 2
36163: NEG
36164: PUSH
36165: LD_INT 2
36167: NEG
36168: PUSH
36169: EMPTY
36170: LIST
36171: LIST
36172: PUSH
36173: EMPTY
36174: LIST
36175: LIST
36176: LIST
36177: LIST
36178: LIST
36179: LIST
36180: LIST
36181: LIST
36182: LIST
36183: LIST
36184: LIST
36185: LIST
36186: LIST
36187: LIST
36188: LIST
36189: LIST
36190: LIST
36191: LIST
36192: LIST
36193: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36194: LD_ADDR_VAR 0 19
36198: PUSH
36199: LD_INT 0
36201: PUSH
36202: LD_INT 0
36204: PUSH
36205: EMPTY
36206: LIST
36207: LIST
36208: PUSH
36209: LD_INT 0
36211: PUSH
36212: LD_INT 1
36214: NEG
36215: PUSH
36216: EMPTY
36217: LIST
36218: LIST
36219: PUSH
36220: LD_INT 1
36222: PUSH
36223: LD_INT 0
36225: PUSH
36226: EMPTY
36227: LIST
36228: LIST
36229: PUSH
36230: LD_INT 1
36232: PUSH
36233: LD_INT 1
36235: PUSH
36236: EMPTY
36237: LIST
36238: LIST
36239: PUSH
36240: LD_INT 0
36242: PUSH
36243: LD_INT 1
36245: PUSH
36246: EMPTY
36247: LIST
36248: LIST
36249: PUSH
36250: LD_INT 1
36252: NEG
36253: PUSH
36254: LD_INT 0
36256: PUSH
36257: EMPTY
36258: LIST
36259: LIST
36260: PUSH
36261: LD_INT 1
36263: NEG
36264: PUSH
36265: LD_INT 1
36267: NEG
36268: PUSH
36269: EMPTY
36270: LIST
36271: LIST
36272: PUSH
36273: LD_INT 1
36275: NEG
36276: PUSH
36277: LD_INT 2
36279: NEG
36280: PUSH
36281: EMPTY
36282: LIST
36283: LIST
36284: PUSH
36285: LD_INT 0
36287: PUSH
36288: LD_INT 2
36290: NEG
36291: PUSH
36292: EMPTY
36293: LIST
36294: LIST
36295: PUSH
36296: LD_INT 1
36298: PUSH
36299: LD_INT 1
36301: NEG
36302: PUSH
36303: EMPTY
36304: LIST
36305: LIST
36306: PUSH
36307: LD_INT 2
36309: PUSH
36310: LD_INT 0
36312: PUSH
36313: EMPTY
36314: LIST
36315: LIST
36316: PUSH
36317: LD_INT 2
36319: PUSH
36320: LD_INT 1
36322: PUSH
36323: EMPTY
36324: LIST
36325: LIST
36326: PUSH
36327: LD_INT 2
36329: PUSH
36330: LD_INT 2
36332: PUSH
36333: EMPTY
36334: LIST
36335: LIST
36336: PUSH
36337: LD_INT 1
36339: PUSH
36340: LD_INT 2
36342: PUSH
36343: EMPTY
36344: LIST
36345: LIST
36346: PUSH
36347: LD_INT 0
36349: PUSH
36350: LD_INT 2
36352: PUSH
36353: EMPTY
36354: LIST
36355: LIST
36356: PUSH
36357: LD_INT 1
36359: NEG
36360: PUSH
36361: LD_INT 1
36363: PUSH
36364: EMPTY
36365: LIST
36366: LIST
36367: PUSH
36368: LD_INT 2
36370: NEG
36371: PUSH
36372: LD_INT 0
36374: PUSH
36375: EMPTY
36376: LIST
36377: LIST
36378: PUSH
36379: LD_INT 2
36381: NEG
36382: PUSH
36383: LD_INT 1
36385: NEG
36386: PUSH
36387: EMPTY
36388: LIST
36389: LIST
36390: PUSH
36391: LD_INT 2
36393: NEG
36394: PUSH
36395: LD_INT 2
36397: NEG
36398: PUSH
36399: EMPTY
36400: LIST
36401: LIST
36402: PUSH
36403: EMPTY
36404: LIST
36405: LIST
36406: LIST
36407: LIST
36408: LIST
36409: LIST
36410: LIST
36411: LIST
36412: LIST
36413: LIST
36414: LIST
36415: LIST
36416: LIST
36417: LIST
36418: LIST
36419: LIST
36420: LIST
36421: LIST
36422: LIST
36423: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36424: LD_ADDR_VAR 0 20
36428: PUSH
36429: LD_INT 0
36431: PUSH
36432: LD_INT 0
36434: PUSH
36435: EMPTY
36436: LIST
36437: LIST
36438: PUSH
36439: LD_INT 0
36441: PUSH
36442: LD_INT 1
36444: NEG
36445: PUSH
36446: EMPTY
36447: LIST
36448: LIST
36449: PUSH
36450: LD_INT 1
36452: PUSH
36453: LD_INT 0
36455: PUSH
36456: EMPTY
36457: LIST
36458: LIST
36459: PUSH
36460: LD_INT 1
36462: PUSH
36463: LD_INT 1
36465: PUSH
36466: EMPTY
36467: LIST
36468: LIST
36469: PUSH
36470: LD_INT 0
36472: PUSH
36473: LD_INT 1
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: PUSH
36480: LD_INT 1
36482: NEG
36483: PUSH
36484: LD_INT 0
36486: PUSH
36487: EMPTY
36488: LIST
36489: LIST
36490: PUSH
36491: LD_INT 1
36493: NEG
36494: PUSH
36495: LD_INT 1
36497: NEG
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: PUSH
36503: LD_INT 1
36505: NEG
36506: PUSH
36507: LD_INT 2
36509: NEG
36510: PUSH
36511: EMPTY
36512: LIST
36513: LIST
36514: PUSH
36515: LD_INT 0
36517: PUSH
36518: LD_INT 2
36520: NEG
36521: PUSH
36522: EMPTY
36523: LIST
36524: LIST
36525: PUSH
36526: LD_INT 1
36528: PUSH
36529: LD_INT 1
36531: NEG
36532: PUSH
36533: EMPTY
36534: LIST
36535: LIST
36536: PUSH
36537: LD_INT 2
36539: PUSH
36540: LD_INT 0
36542: PUSH
36543: EMPTY
36544: LIST
36545: LIST
36546: PUSH
36547: LD_INT 2
36549: PUSH
36550: LD_INT 1
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PUSH
36557: LD_INT 2
36559: PUSH
36560: LD_INT 2
36562: PUSH
36563: EMPTY
36564: LIST
36565: LIST
36566: PUSH
36567: LD_INT 1
36569: PUSH
36570: LD_INT 2
36572: PUSH
36573: EMPTY
36574: LIST
36575: LIST
36576: PUSH
36577: LD_INT 0
36579: PUSH
36580: LD_INT 2
36582: PUSH
36583: EMPTY
36584: LIST
36585: LIST
36586: PUSH
36587: LD_INT 1
36589: NEG
36590: PUSH
36591: LD_INT 1
36593: PUSH
36594: EMPTY
36595: LIST
36596: LIST
36597: PUSH
36598: LD_INT 2
36600: NEG
36601: PUSH
36602: LD_INT 0
36604: PUSH
36605: EMPTY
36606: LIST
36607: LIST
36608: PUSH
36609: LD_INT 2
36611: NEG
36612: PUSH
36613: LD_INT 1
36615: NEG
36616: PUSH
36617: EMPTY
36618: LIST
36619: LIST
36620: PUSH
36621: LD_INT 2
36623: NEG
36624: PUSH
36625: LD_INT 2
36627: NEG
36628: PUSH
36629: EMPTY
36630: LIST
36631: LIST
36632: PUSH
36633: EMPTY
36634: LIST
36635: LIST
36636: LIST
36637: LIST
36638: LIST
36639: LIST
36640: LIST
36641: LIST
36642: LIST
36643: LIST
36644: LIST
36645: LIST
36646: LIST
36647: LIST
36648: LIST
36649: LIST
36650: LIST
36651: LIST
36652: LIST
36653: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36654: LD_ADDR_VAR 0 21
36658: PUSH
36659: LD_INT 0
36661: PUSH
36662: LD_INT 0
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: PUSH
36669: LD_INT 0
36671: PUSH
36672: LD_INT 1
36674: NEG
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: PUSH
36680: LD_INT 1
36682: PUSH
36683: LD_INT 0
36685: PUSH
36686: EMPTY
36687: LIST
36688: LIST
36689: PUSH
36690: LD_INT 1
36692: PUSH
36693: LD_INT 1
36695: PUSH
36696: EMPTY
36697: LIST
36698: LIST
36699: PUSH
36700: LD_INT 0
36702: PUSH
36703: LD_INT 1
36705: PUSH
36706: EMPTY
36707: LIST
36708: LIST
36709: PUSH
36710: LD_INT 1
36712: NEG
36713: PUSH
36714: LD_INT 0
36716: PUSH
36717: EMPTY
36718: LIST
36719: LIST
36720: PUSH
36721: LD_INT 1
36723: NEG
36724: PUSH
36725: LD_INT 1
36727: NEG
36728: PUSH
36729: EMPTY
36730: LIST
36731: LIST
36732: PUSH
36733: LD_INT 1
36735: NEG
36736: PUSH
36737: LD_INT 2
36739: NEG
36740: PUSH
36741: EMPTY
36742: LIST
36743: LIST
36744: PUSH
36745: LD_INT 0
36747: PUSH
36748: LD_INT 2
36750: NEG
36751: PUSH
36752: EMPTY
36753: LIST
36754: LIST
36755: PUSH
36756: LD_INT 1
36758: PUSH
36759: LD_INT 1
36761: NEG
36762: PUSH
36763: EMPTY
36764: LIST
36765: LIST
36766: PUSH
36767: LD_INT 2
36769: PUSH
36770: LD_INT 0
36772: PUSH
36773: EMPTY
36774: LIST
36775: LIST
36776: PUSH
36777: LD_INT 2
36779: PUSH
36780: LD_INT 1
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: PUSH
36787: LD_INT 2
36789: PUSH
36790: LD_INT 2
36792: PUSH
36793: EMPTY
36794: LIST
36795: LIST
36796: PUSH
36797: LD_INT 1
36799: PUSH
36800: LD_INT 2
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: PUSH
36807: LD_INT 0
36809: PUSH
36810: LD_INT 2
36812: PUSH
36813: EMPTY
36814: LIST
36815: LIST
36816: PUSH
36817: LD_INT 1
36819: NEG
36820: PUSH
36821: LD_INT 1
36823: PUSH
36824: EMPTY
36825: LIST
36826: LIST
36827: PUSH
36828: LD_INT 2
36830: NEG
36831: PUSH
36832: LD_INT 0
36834: PUSH
36835: EMPTY
36836: LIST
36837: LIST
36838: PUSH
36839: LD_INT 2
36841: NEG
36842: PUSH
36843: LD_INT 1
36845: NEG
36846: PUSH
36847: EMPTY
36848: LIST
36849: LIST
36850: PUSH
36851: LD_INT 2
36853: NEG
36854: PUSH
36855: LD_INT 2
36857: NEG
36858: PUSH
36859: EMPTY
36860: LIST
36861: LIST
36862: PUSH
36863: EMPTY
36864: LIST
36865: LIST
36866: LIST
36867: LIST
36868: LIST
36869: LIST
36870: LIST
36871: LIST
36872: LIST
36873: LIST
36874: LIST
36875: LIST
36876: LIST
36877: LIST
36878: LIST
36879: LIST
36880: LIST
36881: LIST
36882: LIST
36883: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
36884: LD_ADDR_VAR 0 22
36888: PUSH
36889: LD_INT 0
36891: PUSH
36892: LD_INT 0
36894: PUSH
36895: EMPTY
36896: LIST
36897: LIST
36898: PUSH
36899: LD_INT 0
36901: PUSH
36902: LD_INT 1
36904: NEG
36905: PUSH
36906: EMPTY
36907: LIST
36908: LIST
36909: PUSH
36910: LD_INT 1
36912: PUSH
36913: LD_INT 0
36915: PUSH
36916: EMPTY
36917: LIST
36918: LIST
36919: PUSH
36920: LD_INT 1
36922: PUSH
36923: LD_INT 1
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PUSH
36930: LD_INT 0
36932: PUSH
36933: LD_INT 1
36935: PUSH
36936: EMPTY
36937: LIST
36938: LIST
36939: PUSH
36940: LD_INT 1
36942: NEG
36943: PUSH
36944: LD_INT 0
36946: PUSH
36947: EMPTY
36948: LIST
36949: LIST
36950: PUSH
36951: LD_INT 1
36953: NEG
36954: PUSH
36955: LD_INT 1
36957: NEG
36958: PUSH
36959: EMPTY
36960: LIST
36961: LIST
36962: PUSH
36963: LD_INT 1
36965: NEG
36966: PUSH
36967: LD_INT 2
36969: NEG
36970: PUSH
36971: EMPTY
36972: LIST
36973: LIST
36974: PUSH
36975: LD_INT 0
36977: PUSH
36978: LD_INT 2
36980: NEG
36981: PUSH
36982: EMPTY
36983: LIST
36984: LIST
36985: PUSH
36986: LD_INT 1
36988: PUSH
36989: LD_INT 1
36991: NEG
36992: PUSH
36993: EMPTY
36994: LIST
36995: LIST
36996: PUSH
36997: LD_INT 2
36999: PUSH
37000: LD_INT 0
37002: PUSH
37003: EMPTY
37004: LIST
37005: LIST
37006: PUSH
37007: LD_INT 2
37009: PUSH
37010: LD_INT 1
37012: PUSH
37013: EMPTY
37014: LIST
37015: LIST
37016: PUSH
37017: LD_INT 2
37019: PUSH
37020: LD_INT 2
37022: PUSH
37023: EMPTY
37024: LIST
37025: LIST
37026: PUSH
37027: LD_INT 1
37029: PUSH
37030: LD_INT 2
37032: PUSH
37033: EMPTY
37034: LIST
37035: LIST
37036: PUSH
37037: LD_INT 0
37039: PUSH
37040: LD_INT 2
37042: PUSH
37043: EMPTY
37044: LIST
37045: LIST
37046: PUSH
37047: LD_INT 1
37049: NEG
37050: PUSH
37051: LD_INT 1
37053: PUSH
37054: EMPTY
37055: LIST
37056: LIST
37057: PUSH
37058: LD_INT 2
37060: NEG
37061: PUSH
37062: LD_INT 0
37064: PUSH
37065: EMPTY
37066: LIST
37067: LIST
37068: PUSH
37069: LD_INT 2
37071: NEG
37072: PUSH
37073: LD_INT 1
37075: NEG
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: PUSH
37081: LD_INT 2
37083: NEG
37084: PUSH
37085: LD_INT 2
37087: NEG
37088: PUSH
37089: EMPTY
37090: LIST
37091: LIST
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: LIST
37097: LIST
37098: LIST
37099: LIST
37100: LIST
37101: LIST
37102: LIST
37103: LIST
37104: LIST
37105: LIST
37106: LIST
37107: LIST
37108: LIST
37109: LIST
37110: LIST
37111: LIST
37112: LIST
37113: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37114: LD_ADDR_VAR 0 23
37118: PUSH
37119: LD_INT 0
37121: PUSH
37122: LD_INT 0
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: PUSH
37129: LD_INT 0
37131: PUSH
37132: LD_INT 1
37134: NEG
37135: PUSH
37136: EMPTY
37137: LIST
37138: LIST
37139: PUSH
37140: LD_INT 1
37142: PUSH
37143: LD_INT 0
37145: PUSH
37146: EMPTY
37147: LIST
37148: LIST
37149: PUSH
37150: LD_INT 1
37152: PUSH
37153: LD_INT 1
37155: PUSH
37156: EMPTY
37157: LIST
37158: LIST
37159: PUSH
37160: LD_INT 0
37162: PUSH
37163: LD_INT 1
37165: PUSH
37166: EMPTY
37167: LIST
37168: LIST
37169: PUSH
37170: LD_INT 1
37172: NEG
37173: PUSH
37174: LD_INT 0
37176: PUSH
37177: EMPTY
37178: LIST
37179: LIST
37180: PUSH
37181: LD_INT 1
37183: NEG
37184: PUSH
37185: LD_INT 1
37187: NEG
37188: PUSH
37189: EMPTY
37190: LIST
37191: LIST
37192: PUSH
37193: LD_INT 1
37195: NEG
37196: PUSH
37197: LD_INT 2
37199: NEG
37200: PUSH
37201: EMPTY
37202: LIST
37203: LIST
37204: PUSH
37205: LD_INT 0
37207: PUSH
37208: LD_INT 2
37210: NEG
37211: PUSH
37212: EMPTY
37213: LIST
37214: LIST
37215: PUSH
37216: LD_INT 1
37218: PUSH
37219: LD_INT 1
37221: NEG
37222: PUSH
37223: EMPTY
37224: LIST
37225: LIST
37226: PUSH
37227: LD_INT 2
37229: PUSH
37230: LD_INT 0
37232: PUSH
37233: EMPTY
37234: LIST
37235: LIST
37236: PUSH
37237: LD_INT 2
37239: PUSH
37240: LD_INT 1
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: PUSH
37247: LD_INT 2
37249: PUSH
37250: LD_INT 2
37252: PUSH
37253: EMPTY
37254: LIST
37255: LIST
37256: PUSH
37257: LD_INT 1
37259: PUSH
37260: LD_INT 2
37262: PUSH
37263: EMPTY
37264: LIST
37265: LIST
37266: PUSH
37267: LD_INT 0
37269: PUSH
37270: LD_INT 2
37272: PUSH
37273: EMPTY
37274: LIST
37275: LIST
37276: PUSH
37277: LD_INT 1
37279: NEG
37280: PUSH
37281: LD_INT 1
37283: PUSH
37284: EMPTY
37285: LIST
37286: LIST
37287: PUSH
37288: LD_INT 2
37290: NEG
37291: PUSH
37292: LD_INT 0
37294: PUSH
37295: EMPTY
37296: LIST
37297: LIST
37298: PUSH
37299: LD_INT 2
37301: NEG
37302: PUSH
37303: LD_INT 1
37305: NEG
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: PUSH
37311: LD_INT 2
37313: NEG
37314: PUSH
37315: LD_INT 2
37317: NEG
37318: PUSH
37319: EMPTY
37320: LIST
37321: LIST
37322: PUSH
37323: LD_INT 2
37325: NEG
37326: PUSH
37327: LD_INT 3
37329: NEG
37330: PUSH
37331: EMPTY
37332: LIST
37333: LIST
37334: PUSH
37335: LD_INT 1
37337: NEG
37338: PUSH
37339: LD_INT 3
37341: NEG
37342: PUSH
37343: EMPTY
37344: LIST
37345: LIST
37346: PUSH
37347: LD_INT 1
37349: PUSH
37350: LD_INT 2
37352: NEG
37353: PUSH
37354: EMPTY
37355: LIST
37356: LIST
37357: PUSH
37358: LD_INT 2
37360: PUSH
37361: LD_INT 1
37363: NEG
37364: PUSH
37365: EMPTY
37366: LIST
37367: LIST
37368: PUSH
37369: EMPTY
37370: LIST
37371: LIST
37372: LIST
37373: LIST
37374: LIST
37375: LIST
37376: LIST
37377: LIST
37378: LIST
37379: LIST
37380: LIST
37381: LIST
37382: LIST
37383: LIST
37384: LIST
37385: LIST
37386: LIST
37387: LIST
37388: LIST
37389: LIST
37390: LIST
37391: LIST
37392: LIST
37393: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
37394: LD_ADDR_VAR 0 24
37398: PUSH
37399: LD_INT 0
37401: PUSH
37402: LD_INT 0
37404: PUSH
37405: EMPTY
37406: LIST
37407: LIST
37408: PUSH
37409: LD_INT 0
37411: PUSH
37412: LD_INT 1
37414: NEG
37415: PUSH
37416: EMPTY
37417: LIST
37418: LIST
37419: PUSH
37420: LD_INT 1
37422: PUSH
37423: LD_INT 0
37425: PUSH
37426: EMPTY
37427: LIST
37428: LIST
37429: PUSH
37430: LD_INT 1
37432: PUSH
37433: LD_INT 1
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: LD_INT 0
37442: PUSH
37443: LD_INT 1
37445: PUSH
37446: EMPTY
37447: LIST
37448: LIST
37449: PUSH
37450: LD_INT 1
37452: NEG
37453: PUSH
37454: LD_INT 0
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: LD_INT 1
37463: NEG
37464: PUSH
37465: LD_INT 1
37467: NEG
37468: PUSH
37469: EMPTY
37470: LIST
37471: LIST
37472: PUSH
37473: LD_INT 1
37475: NEG
37476: PUSH
37477: LD_INT 2
37479: NEG
37480: PUSH
37481: EMPTY
37482: LIST
37483: LIST
37484: PUSH
37485: LD_INT 0
37487: PUSH
37488: LD_INT 2
37490: NEG
37491: PUSH
37492: EMPTY
37493: LIST
37494: LIST
37495: PUSH
37496: LD_INT 1
37498: PUSH
37499: LD_INT 1
37501: NEG
37502: PUSH
37503: EMPTY
37504: LIST
37505: LIST
37506: PUSH
37507: LD_INT 2
37509: PUSH
37510: LD_INT 0
37512: PUSH
37513: EMPTY
37514: LIST
37515: LIST
37516: PUSH
37517: LD_INT 2
37519: PUSH
37520: LD_INT 1
37522: PUSH
37523: EMPTY
37524: LIST
37525: LIST
37526: PUSH
37527: LD_INT 2
37529: PUSH
37530: LD_INT 2
37532: PUSH
37533: EMPTY
37534: LIST
37535: LIST
37536: PUSH
37537: LD_INT 1
37539: PUSH
37540: LD_INT 2
37542: PUSH
37543: EMPTY
37544: LIST
37545: LIST
37546: PUSH
37547: LD_INT 0
37549: PUSH
37550: LD_INT 2
37552: PUSH
37553: EMPTY
37554: LIST
37555: LIST
37556: PUSH
37557: LD_INT 1
37559: NEG
37560: PUSH
37561: LD_INT 1
37563: PUSH
37564: EMPTY
37565: LIST
37566: LIST
37567: PUSH
37568: LD_INT 2
37570: NEG
37571: PUSH
37572: LD_INT 0
37574: PUSH
37575: EMPTY
37576: LIST
37577: LIST
37578: PUSH
37579: LD_INT 2
37581: NEG
37582: PUSH
37583: LD_INT 1
37585: NEG
37586: PUSH
37587: EMPTY
37588: LIST
37589: LIST
37590: PUSH
37591: LD_INT 2
37593: NEG
37594: PUSH
37595: LD_INT 2
37597: NEG
37598: PUSH
37599: EMPTY
37600: LIST
37601: LIST
37602: PUSH
37603: LD_INT 1
37605: PUSH
37606: LD_INT 2
37608: NEG
37609: PUSH
37610: EMPTY
37611: LIST
37612: LIST
37613: PUSH
37614: LD_INT 2
37616: PUSH
37617: LD_INT 1
37619: NEG
37620: PUSH
37621: EMPTY
37622: LIST
37623: LIST
37624: PUSH
37625: LD_INT 3
37627: PUSH
37628: LD_INT 1
37630: PUSH
37631: EMPTY
37632: LIST
37633: LIST
37634: PUSH
37635: LD_INT 3
37637: PUSH
37638: LD_INT 2
37640: PUSH
37641: EMPTY
37642: LIST
37643: LIST
37644: PUSH
37645: EMPTY
37646: LIST
37647: LIST
37648: LIST
37649: LIST
37650: LIST
37651: LIST
37652: LIST
37653: LIST
37654: LIST
37655: LIST
37656: LIST
37657: LIST
37658: LIST
37659: LIST
37660: LIST
37661: LIST
37662: LIST
37663: LIST
37664: LIST
37665: LIST
37666: LIST
37667: LIST
37668: LIST
37669: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
37670: LD_ADDR_VAR 0 25
37674: PUSH
37675: LD_INT 0
37677: PUSH
37678: LD_INT 0
37680: PUSH
37681: EMPTY
37682: LIST
37683: LIST
37684: PUSH
37685: LD_INT 0
37687: PUSH
37688: LD_INT 1
37690: NEG
37691: PUSH
37692: EMPTY
37693: LIST
37694: LIST
37695: PUSH
37696: LD_INT 1
37698: PUSH
37699: LD_INT 0
37701: PUSH
37702: EMPTY
37703: LIST
37704: LIST
37705: PUSH
37706: LD_INT 1
37708: PUSH
37709: LD_INT 1
37711: PUSH
37712: EMPTY
37713: LIST
37714: LIST
37715: PUSH
37716: LD_INT 0
37718: PUSH
37719: LD_INT 1
37721: PUSH
37722: EMPTY
37723: LIST
37724: LIST
37725: PUSH
37726: LD_INT 1
37728: NEG
37729: PUSH
37730: LD_INT 0
37732: PUSH
37733: EMPTY
37734: LIST
37735: LIST
37736: PUSH
37737: LD_INT 1
37739: NEG
37740: PUSH
37741: LD_INT 1
37743: NEG
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: PUSH
37749: LD_INT 1
37751: NEG
37752: PUSH
37753: LD_INT 2
37755: NEG
37756: PUSH
37757: EMPTY
37758: LIST
37759: LIST
37760: PUSH
37761: LD_INT 0
37763: PUSH
37764: LD_INT 2
37766: NEG
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: PUSH
37772: LD_INT 1
37774: PUSH
37775: LD_INT 1
37777: NEG
37778: PUSH
37779: EMPTY
37780: LIST
37781: LIST
37782: PUSH
37783: LD_INT 2
37785: PUSH
37786: LD_INT 0
37788: PUSH
37789: EMPTY
37790: LIST
37791: LIST
37792: PUSH
37793: LD_INT 2
37795: PUSH
37796: LD_INT 1
37798: PUSH
37799: EMPTY
37800: LIST
37801: LIST
37802: PUSH
37803: LD_INT 2
37805: PUSH
37806: LD_INT 2
37808: PUSH
37809: EMPTY
37810: LIST
37811: LIST
37812: PUSH
37813: LD_INT 1
37815: PUSH
37816: LD_INT 2
37818: PUSH
37819: EMPTY
37820: LIST
37821: LIST
37822: PUSH
37823: LD_INT 0
37825: PUSH
37826: LD_INT 2
37828: PUSH
37829: EMPTY
37830: LIST
37831: LIST
37832: PUSH
37833: LD_INT 1
37835: NEG
37836: PUSH
37837: LD_INT 1
37839: PUSH
37840: EMPTY
37841: LIST
37842: LIST
37843: PUSH
37844: LD_INT 2
37846: NEG
37847: PUSH
37848: LD_INT 0
37850: PUSH
37851: EMPTY
37852: LIST
37853: LIST
37854: PUSH
37855: LD_INT 2
37857: NEG
37858: PUSH
37859: LD_INT 1
37861: NEG
37862: PUSH
37863: EMPTY
37864: LIST
37865: LIST
37866: PUSH
37867: LD_INT 2
37869: NEG
37870: PUSH
37871: LD_INT 2
37873: NEG
37874: PUSH
37875: EMPTY
37876: LIST
37877: LIST
37878: PUSH
37879: LD_INT 3
37881: PUSH
37882: LD_INT 1
37884: PUSH
37885: EMPTY
37886: LIST
37887: LIST
37888: PUSH
37889: LD_INT 3
37891: PUSH
37892: LD_INT 2
37894: PUSH
37895: EMPTY
37896: LIST
37897: LIST
37898: PUSH
37899: LD_INT 2
37901: PUSH
37902: LD_INT 3
37904: PUSH
37905: EMPTY
37906: LIST
37907: LIST
37908: PUSH
37909: LD_INT 1
37911: PUSH
37912: LD_INT 3
37914: PUSH
37915: EMPTY
37916: LIST
37917: LIST
37918: PUSH
37919: EMPTY
37920: LIST
37921: LIST
37922: LIST
37923: LIST
37924: LIST
37925: LIST
37926: LIST
37927: LIST
37928: LIST
37929: LIST
37930: LIST
37931: LIST
37932: LIST
37933: LIST
37934: LIST
37935: LIST
37936: LIST
37937: LIST
37938: LIST
37939: LIST
37940: LIST
37941: LIST
37942: LIST
37943: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37944: LD_ADDR_VAR 0 26
37948: PUSH
37949: LD_INT 0
37951: PUSH
37952: LD_INT 0
37954: PUSH
37955: EMPTY
37956: LIST
37957: LIST
37958: PUSH
37959: LD_INT 0
37961: PUSH
37962: LD_INT 1
37964: NEG
37965: PUSH
37966: EMPTY
37967: LIST
37968: LIST
37969: PUSH
37970: LD_INT 1
37972: PUSH
37973: LD_INT 0
37975: PUSH
37976: EMPTY
37977: LIST
37978: LIST
37979: PUSH
37980: LD_INT 1
37982: PUSH
37983: LD_INT 1
37985: PUSH
37986: EMPTY
37987: LIST
37988: LIST
37989: PUSH
37990: LD_INT 0
37992: PUSH
37993: LD_INT 1
37995: PUSH
37996: EMPTY
37997: LIST
37998: LIST
37999: PUSH
38000: LD_INT 1
38002: NEG
38003: PUSH
38004: LD_INT 0
38006: PUSH
38007: EMPTY
38008: LIST
38009: LIST
38010: PUSH
38011: LD_INT 1
38013: NEG
38014: PUSH
38015: LD_INT 1
38017: NEG
38018: PUSH
38019: EMPTY
38020: LIST
38021: LIST
38022: PUSH
38023: LD_INT 1
38025: NEG
38026: PUSH
38027: LD_INT 2
38029: NEG
38030: PUSH
38031: EMPTY
38032: LIST
38033: LIST
38034: PUSH
38035: LD_INT 0
38037: PUSH
38038: LD_INT 2
38040: NEG
38041: PUSH
38042: EMPTY
38043: LIST
38044: LIST
38045: PUSH
38046: LD_INT 1
38048: PUSH
38049: LD_INT 1
38051: NEG
38052: PUSH
38053: EMPTY
38054: LIST
38055: LIST
38056: PUSH
38057: LD_INT 2
38059: PUSH
38060: LD_INT 0
38062: PUSH
38063: EMPTY
38064: LIST
38065: LIST
38066: PUSH
38067: LD_INT 2
38069: PUSH
38070: LD_INT 1
38072: PUSH
38073: EMPTY
38074: LIST
38075: LIST
38076: PUSH
38077: LD_INT 2
38079: PUSH
38080: LD_INT 2
38082: PUSH
38083: EMPTY
38084: LIST
38085: LIST
38086: PUSH
38087: LD_INT 1
38089: PUSH
38090: LD_INT 2
38092: PUSH
38093: EMPTY
38094: LIST
38095: LIST
38096: PUSH
38097: LD_INT 0
38099: PUSH
38100: LD_INT 2
38102: PUSH
38103: EMPTY
38104: LIST
38105: LIST
38106: PUSH
38107: LD_INT 1
38109: NEG
38110: PUSH
38111: LD_INT 1
38113: PUSH
38114: EMPTY
38115: LIST
38116: LIST
38117: PUSH
38118: LD_INT 2
38120: NEG
38121: PUSH
38122: LD_INT 0
38124: PUSH
38125: EMPTY
38126: LIST
38127: LIST
38128: PUSH
38129: LD_INT 2
38131: NEG
38132: PUSH
38133: LD_INT 1
38135: NEG
38136: PUSH
38137: EMPTY
38138: LIST
38139: LIST
38140: PUSH
38141: LD_INT 2
38143: NEG
38144: PUSH
38145: LD_INT 2
38147: NEG
38148: PUSH
38149: EMPTY
38150: LIST
38151: LIST
38152: PUSH
38153: LD_INT 2
38155: PUSH
38156: LD_INT 3
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: PUSH
38163: LD_INT 1
38165: PUSH
38166: LD_INT 3
38168: PUSH
38169: EMPTY
38170: LIST
38171: LIST
38172: PUSH
38173: LD_INT 1
38175: NEG
38176: PUSH
38177: LD_INT 2
38179: PUSH
38180: EMPTY
38181: LIST
38182: LIST
38183: PUSH
38184: LD_INT 2
38186: NEG
38187: PUSH
38188: LD_INT 1
38190: PUSH
38191: EMPTY
38192: LIST
38193: LIST
38194: PUSH
38195: EMPTY
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: LIST
38206: LIST
38207: LIST
38208: LIST
38209: LIST
38210: LIST
38211: LIST
38212: LIST
38213: LIST
38214: LIST
38215: LIST
38216: LIST
38217: LIST
38218: LIST
38219: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38220: LD_ADDR_VAR 0 27
38224: PUSH
38225: LD_INT 0
38227: PUSH
38228: LD_INT 0
38230: PUSH
38231: EMPTY
38232: LIST
38233: LIST
38234: PUSH
38235: LD_INT 0
38237: PUSH
38238: LD_INT 1
38240: NEG
38241: PUSH
38242: EMPTY
38243: LIST
38244: LIST
38245: PUSH
38246: LD_INT 1
38248: PUSH
38249: LD_INT 0
38251: PUSH
38252: EMPTY
38253: LIST
38254: LIST
38255: PUSH
38256: LD_INT 1
38258: PUSH
38259: LD_INT 1
38261: PUSH
38262: EMPTY
38263: LIST
38264: LIST
38265: PUSH
38266: LD_INT 0
38268: PUSH
38269: LD_INT 1
38271: PUSH
38272: EMPTY
38273: LIST
38274: LIST
38275: PUSH
38276: LD_INT 1
38278: NEG
38279: PUSH
38280: LD_INT 0
38282: PUSH
38283: EMPTY
38284: LIST
38285: LIST
38286: PUSH
38287: LD_INT 1
38289: NEG
38290: PUSH
38291: LD_INT 1
38293: NEG
38294: PUSH
38295: EMPTY
38296: LIST
38297: LIST
38298: PUSH
38299: LD_INT 1
38301: NEG
38302: PUSH
38303: LD_INT 2
38305: NEG
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: PUSH
38311: LD_INT 0
38313: PUSH
38314: LD_INT 2
38316: NEG
38317: PUSH
38318: EMPTY
38319: LIST
38320: LIST
38321: PUSH
38322: LD_INT 1
38324: PUSH
38325: LD_INT 1
38327: NEG
38328: PUSH
38329: EMPTY
38330: LIST
38331: LIST
38332: PUSH
38333: LD_INT 2
38335: PUSH
38336: LD_INT 0
38338: PUSH
38339: EMPTY
38340: LIST
38341: LIST
38342: PUSH
38343: LD_INT 2
38345: PUSH
38346: LD_INT 1
38348: PUSH
38349: EMPTY
38350: LIST
38351: LIST
38352: PUSH
38353: LD_INT 2
38355: PUSH
38356: LD_INT 2
38358: PUSH
38359: EMPTY
38360: LIST
38361: LIST
38362: PUSH
38363: LD_INT 1
38365: PUSH
38366: LD_INT 2
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 0
38375: PUSH
38376: LD_INT 2
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: LD_INT 1
38385: NEG
38386: PUSH
38387: LD_INT 1
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: LD_INT 2
38396: NEG
38397: PUSH
38398: LD_INT 0
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 2
38407: NEG
38408: PUSH
38409: LD_INT 1
38411: NEG
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: LD_INT 2
38419: NEG
38420: PUSH
38421: LD_INT 2
38423: NEG
38424: PUSH
38425: EMPTY
38426: LIST
38427: LIST
38428: PUSH
38429: LD_INT 1
38431: NEG
38432: PUSH
38433: LD_INT 2
38435: PUSH
38436: EMPTY
38437: LIST
38438: LIST
38439: PUSH
38440: LD_INT 2
38442: NEG
38443: PUSH
38444: LD_INT 1
38446: PUSH
38447: EMPTY
38448: LIST
38449: LIST
38450: PUSH
38451: LD_INT 3
38453: NEG
38454: PUSH
38455: LD_INT 1
38457: NEG
38458: PUSH
38459: EMPTY
38460: LIST
38461: LIST
38462: PUSH
38463: LD_INT 3
38465: NEG
38466: PUSH
38467: LD_INT 2
38469: NEG
38470: PUSH
38471: EMPTY
38472: LIST
38473: LIST
38474: PUSH
38475: EMPTY
38476: LIST
38477: LIST
38478: LIST
38479: LIST
38480: LIST
38481: LIST
38482: LIST
38483: LIST
38484: LIST
38485: LIST
38486: LIST
38487: LIST
38488: LIST
38489: LIST
38490: LIST
38491: LIST
38492: LIST
38493: LIST
38494: LIST
38495: LIST
38496: LIST
38497: LIST
38498: LIST
38499: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
38500: LD_ADDR_VAR 0 28
38504: PUSH
38505: LD_INT 0
38507: PUSH
38508: LD_INT 0
38510: PUSH
38511: EMPTY
38512: LIST
38513: LIST
38514: PUSH
38515: LD_INT 0
38517: PUSH
38518: LD_INT 1
38520: NEG
38521: PUSH
38522: EMPTY
38523: LIST
38524: LIST
38525: PUSH
38526: LD_INT 1
38528: PUSH
38529: LD_INT 0
38531: PUSH
38532: EMPTY
38533: LIST
38534: LIST
38535: PUSH
38536: LD_INT 1
38538: PUSH
38539: LD_INT 1
38541: PUSH
38542: EMPTY
38543: LIST
38544: LIST
38545: PUSH
38546: LD_INT 0
38548: PUSH
38549: LD_INT 1
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: PUSH
38556: LD_INT 1
38558: NEG
38559: PUSH
38560: LD_INT 0
38562: PUSH
38563: EMPTY
38564: LIST
38565: LIST
38566: PUSH
38567: LD_INT 1
38569: NEG
38570: PUSH
38571: LD_INT 1
38573: NEG
38574: PUSH
38575: EMPTY
38576: LIST
38577: LIST
38578: PUSH
38579: LD_INT 1
38581: NEG
38582: PUSH
38583: LD_INT 2
38585: NEG
38586: PUSH
38587: EMPTY
38588: LIST
38589: LIST
38590: PUSH
38591: LD_INT 0
38593: PUSH
38594: LD_INT 2
38596: NEG
38597: PUSH
38598: EMPTY
38599: LIST
38600: LIST
38601: PUSH
38602: LD_INT 1
38604: PUSH
38605: LD_INT 1
38607: NEG
38608: PUSH
38609: EMPTY
38610: LIST
38611: LIST
38612: PUSH
38613: LD_INT 2
38615: PUSH
38616: LD_INT 0
38618: PUSH
38619: EMPTY
38620: LIST
38621: LIST
38622: PUSH
38623: LD_INT 2
38625: PUSH
38626: LD_INT 1
38628: PUSH
38629: EMPTY
38630: LIST
38631: LIST
38632: PUSH
38633: LD_INT 2
38635: PUSH
38636: LD_INT 2
38638: PUSH
38639: EMPTY
38640: LIST
38641: LIST
38642: PUSH
38643: LD_INT 1
38645: PUSH
38646: LD_INT 2
38648: PUSH
38649: EMPTY
38650: LIST
38651: LIST
38652: PUSH
38653: LD_INT 0
38655: PUSH
38656: LD_INT 2
38658: PUSH
38659: EMPTY
38660: LIST
38661: LIST
38662: PUSH
38663: LD_INT 1
38665: NEG
38666: PUSH
38667: LD_INT 1
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: PUSH
38674: LD_INT 2
38676: NEG
38677: PUSH
38678: LD_INT 0
38680: PUSH
38681: EMPTY
38682: LIST
38683: LIST
38684: PUSH
38685: LD_INT 2
38687: NEG
38688: PUSH
38689: LD_INT 1
38691: NEG
38692: PUSH
38693: EMPTY
38694: LIST
38695: LIST
38696: PUSH
38697: LD_INT 2
38699: NEG
38700: PUSH
38701: LD_INT 2
38703: NEG
38704: PUSH
38705: EMPTY
38706: LIST
38707: LIST
38708: PUSH
38709: LD_INT 2
38711: NEG
38712: PUSH
38713: LD_INT 3
38715: NEG
38716: PUSH
38717: EMPTY
38718: LIST
38719: LIST
38720: PUSH
38721: LD_INT 1
38723: NEG
38724: PUSH
38725: LD_INT 3
38727: NEG
38728: PUSH
38729: EMPTY
38730: LIST
38731: LIST
38732: PUSH
38733: LD_INT 3
38735: NEG
38736: PUSH
38737: LD_INT 1
38739: NEG
38740: PUSH
38741: EMPTY
38742: LIST
38743: LIST
38744: PUSH
38745: LD_INT 3
38747: NEG
38748: PUSH
38749: LD_INT 2
38751: NEG
38752: PUSH
38753: EMPTY
38754: LIST
38755: LIST
38756: PUSH
38757: EMPTY
38758: LIST
38759: LIST
38760: LIST
38761: LIST
38762: LIST
38763: LIST
38764: LIST
38765: LIST
38766: LIST
38767: LIST
38768: LIST
38769: LIST
38770: LIST
38771: LIST
38772: LIST
38773: LIST
38774: LIST
38775: LIST
38776: LIST
38777: LIST
38778: LIST
38779: LIST
38780: LIST
38781: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
38782: LD_ADDR_VAR 0 29
38786: PUSH
38787: LD_INT 0
38789: PUSH
38790: LD_INT 0
38792: PUSH
38793: EMPTY
38794: LIST
38795: LIST
38796: PUSH
38797: LD_INT 0
38799: PUSH
38800: LD_INT 1
38802: NEG
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: PUSH
38808: LD_INT 1
38810: PUSH
38811: LD_INT 0
38813: PUSH
38814: EMPTY
38815: LIST
38816: LIST
38817: PUSH
38818: LD_INT 1
38820: PUSH
38821: LD_INT 1
38823: PUSH
38824: EMPTY
38825: LIST
38826: LIST
38827: PUSH
38828: LD_INT 0
38830: PUSH
38831: LD_INT 1
38833: PUSH
38834: EMPTY
38835: LIST
38836: LIST
38837: PUSH
38838: LD_INT 1
38840: NEG
38841: PUSH
38842: LD_INT 0
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: LD_INT 1
38851: NEG
38852: PUSH
38853: LD_INT 1
38855: NEG
38856: PUSH
38857: EMPTY
38858: LIST
38859: LIST
38860: PUSH
38861: LD_INT 1
38863: NEG
38864: PUSH
38865: LD_INT 2
38867: NEG
38868: PUSH
38869: EMPTY
38870: LIST
38871: LIST
38872: PUSH
38873: LD_INT 0
38875: PUSH
38876: LD_INT 2
38878: NEG
38879: PUSH
38880: EMPTY
38881: LIST
38882: LIST
38883: PUSH
38884: LD_INT 1
38886: PUSH
38887: LD_INT 1
38889: NEG
38890: PUSH
38891: EMPTY
38892: LIST
38893: LIST
38894: PUSH
38895: LD_INT 2
38897: PUSH
38898: LD_INT 0
38900: PUSH
38901: EMPTY
38902: LIST
38903: LIST
38904: PUSH
38905: LD_INT 2
38907: PUSH
38908: LD_INT 1
38910: PUSH
38911: EMPTY
38912: LIST
38913: LIST
38914: PUSH
38915: LD_INT 1
38917: PUSH
38918: LD_INT 2
38920: PUSH
38921: EMPTY
38922: LIST
38923: LIST
38924: PUSH
38925: LD_INT 0
38927: PUSH
38928: LD_INT 2
38930: PUSH
38931: EMPTY
38932: LIST
38933: LIST
38934: PUSH
38935: LD_INT 1
38937: NEG
38938: PUSH
38939: LD_INT 1
38941: PUSH
38942: EMPTY
38943: LIST
38944: LIST
38945: PUSH
38946: LD_INT 2
38948: NEG
38949: PUSH
38950: LD_INT 1
38952: NEG
38953: PUSH
38954: EMPTY
38955: LIST
38956: LIST
38957: PUSH
38958: LD_INT 2
38960: NEG
38961: PUSH
38962: LD_INT 2
38964: NEG
38965: PUSH
38966: EMPTY
38967: LIST
38968: LIST
38969: PUSH
38970: LD_INT 2
38972: NEG
38973: PUSH
38974: LD_INT 3
38976: NEG
38977: PUSH
38978: EMPTY
38979: LIST
38980: LIST
38981: PUSH
38982: LD_INT 2
38984: PUSH
38985: LD_INT 1
38987: NEG
38988: PUSH
38989: EMPTY
38990: LIST
38991: LIST
38992: PUSH
38993: LD_INT 3
38995: PUSH
38996: LD_INT 1
38998: PUSH
38999: EMPTY
39000: LIST
39001: LIST
39002: PUSH
39003: LD_INT 1
39005: PUSH
39006: LD_INT 3
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PUSH
39013: LD_INT 1
39015: NEG
39016: PUSH
39017: LD_INT 2
39019: PUSH
39020: EMPTY
39021: LIST
39022: LIST
39023: PUSH
39024: LD_INT 3
39026: NEG
39027: PUSH
39028: LD_INT 2
39030: NEG
39031: PUSH
39032: EMPTY
39033: LIST
39034: LIST
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: LIST
39040: LIST
39041: LIST
39042: LIST
39043: LIST
39044: LIST
39045: LIST
39046: LIST
39047: LIST
39048: LIST
39049: LIST
39050: LIST
39051: LIST
39052: LIST
39053: LIST
39054: LIST
39055: LIST
39056: LIST
39057: LIST
39058: LIST
39059: LIST
39060: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39061: LD_ADDR_VAR 0 30
39065: PUSH
39066: LD_INT 0
39068: PUSH
39069: LD_INT 0
39071: PUSH
39072: EMPTY
39073: LIST
39074: LIST
39075: PUSH
39076: LD_INT 0
39078: PUSH
39079: LD_INT 1
39081: NEG
39082: PUSH
39083: EMPTY
39084: LIST
39085: LIST
39086: PUSH
39087: LD_INT 1
39089: PUSH
39090: LD_INT 0
39092: PUSH
39093: EMPTY
39094: LIST
39095: LIST
39096: PUSH
39097: LD_INT 1
39099: PUSH
39100: LD_INT 1
39102: PUSH
39103: EMPTY
39104: LIST
39105: LIST
39106: PUSH
39107: LD_INT 0
39109: PUSH
39110: LD_INT 1
39112: PUSH
39113: EMPTY
39114: LIST
39115: LIST
39116: PUSH
39117: LD_INT 1
39119: NEG
39120: PUSH
39121: LD_INT 0
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PUSH
39128: LD_INT 1
39130: NEG
39131: PUSH
39132: LD_INT 1
39134: NEG
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 1
39142: NEG
39143: PUSH
39144: LD_INT 2
39146: NEG
39147: PUSH
39148: EMPTY
39149: LIST
39150: LIST
39151: PUSH
39152: LD_INT 0
39154: PUSH
39155: LD_INT 2
39157: NEG
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: LD_INT 1
39165: PUSH
39166: LD_INT 1
39168: NEG
39169: PUSH
39170: EMPTY
39171: LIST
39172: LIST
39173: PUSH
39174: LD_INT 2
39176: PUSH
39177: LD_INT 0
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 2
39186: PUSH
39187: LD_INT 1
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 2
39196: PUSH
39197: LD_INT 2
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 1
39206: PUSH
39207: LD_INT 2
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: LD_INT 1
39216: NEG
39217: PUSH
39218: LD_INT 1
39220: PUSH
39221: EMPTY
39222: LIST
39223: LIST
39224: PUSH
39225: LD_INT 2
39227: NEG
39228: PUSH
39229: LD_INT 0
39231: PUSH
39232: EMPTY
39233: LIST
39234: LIST
39235: PUSH
39236: LD_INT 2
39238: NEG
39239: PUSH
39240: LD_INT 1
39242: NEG
39243: PUSH
39244: EMPTY
39245: LIST
39246: LIST
39247: PUSH
39248: LD_INT 1
39250: NEG
39251: PUSH
39252: LD_INT 3
39254: NEG
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 1
39262: PUSH
39263: LD_INT 2
39265: NEG
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: PUSH
39271: LD_INT 3
39273: PUSH
39274: LD_INT 2
39276: PUSH
39277: EMPTY
39278: LIST
39279: LIST
39280: PUSH
39281: LD_INT 2
39283: PUSH
39284: LD_INT 3
39286: PUSH
39287: EMPTY
39288: LIST
39289: LIST
39290: PUSH
39291: LD_INT 2
39293: NEG
39294: PUSH
39295: LD_INT 1
39297: PUSH
39298: EMPTY
39299: LIST
39300: LIST
39301: PUSH
39302: LD_INT 3
39304: NEG
39305: PUSH
39306: LD_INT 1
39308: NEG
39309: PUSH
39310: EMPTY
39311: LIST
39312: LIST
39313: PUSH
39314: EMPTY
39315: LIST
39316: LIST
39317: LIST
39318: LIST
39319: LIST
39320: LIST
39321: LIST
39322: LIST
39323: LIST
39324: LIST
39325: LIST
39326: LIST
39327: LIST
39328: LIST
39329: LIST
39330: LIST
39331: LIST
39332: LIST
39333: LIST
39334: LIST
39335: LIST
39336: LIST
39337: LIST
39338: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39339: LD_ADDR_VAR 0 31
39343: PUSH
39344: LD_INT 0
39346: PUSH
39347: LD_INT 0
39349: PUSH
39350: EMPTY
39351: LIST
39352: LIST
39353: PUSH
39354: LD_INT 0
39356: PUSH
39357: LD_INT 1
39359: NEG
39360: PUSH
39361: EMPTY
39362: LIST
39363: LIST
39364: PUSH
39365: LD_INT 1
39367: PUSH
39368: LD_INT 0
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PUSH
39375: LD_INT 1
39377: PUSH
39378: LD_INT 1
39380: PUSH
39381: EMPTY
39382: LIST
39383: LIST
39384: PUSH
39385: LD_INT 0
39387: PUSH
39388: LD_INT 1
39390: PUSH
39391: EMPTY
39392: LIST
39393: LIST
39394: PUSH
39395: LD_INT 1
39397: NEG
39398: PUSH
39399: LD_INT 0
39401: PUSH
39402: EMPTY
39403: LIST
39404: LIST
39405: PUSH
39406: LD_INT 1
39408: NEG
39409: PUSH
39410: LD_INT 1
39412: NEG
39413: PUSH
39414: EMPTY
39415: LIST
39416: LIST
39417: PUSH
39418: LD_INT 1
39420: NEG
39421: PUSH
39422: LD_INT 2
39424: NEG
39425: PUSH
39426: EMPTY
39427: LIST
39428: LIST
39429: PUSH
39430: LD_INT 1
39432: PUSH
39433: LD_INT 1
39435: NEG
39436: PUSH
39437: EMPTY
39438: LIST
39439: LIST
39440: PUSH
39441: LD_INT 2
39443: PUSH
39444: LD_INT 0
39446: PUSH
39447: EMPTY
39448: LIST
39449: LIST
39450: PUSH
39451: LD_INT 2
39453: PUSH
39454: LD_INT 1
39456: PUSH
39457: EMPTY
39458: LIST
39459: LIST
39460: PUSH
39461: LD_INT 2
39463: PUSH
39464: LD_INT 2
39466: PUSH
39467: EMPTY
39468: LIST
39469: LIST
39470: PUSH
39471: LD_INT 1
39473: PUSH
39474: LD_INT 2
39476: PUSH
39477: EMPTY
39478: LIST
39479: LIST
39480: PUSH
39481: LD_INT 0
39483: PUSH
39484: LD_INT 2
39486: PUSH
39487: EMPTY
39488: LIST
39489: LIST
39490: PUSH
39491: LD_INT 1
39493: NEG
39494: PUSH
39495: LD_INT 1
39497: PUSH
39498: EMPTY
39499: LIST
39500: LIST
39501: PUSH
39502: LD_INT 2
39504: NEG
39505: PUSH
39506: LD_INT 1
39508: NEG
39509: PUSH
39510: EMPTY
39511: LIST
39512: LIST
39513: PUSH
39514: LD_INT 2
39516: NEG
39517: PUSH
39518: LD_INT 2
39520: NEG
39521: PUSH
39522: EMPTY
39523: LIST
39524: LIST
39525: PUSH
39526: LD_INT 2
39528: NEG
39529: PUSH
39530: LD_INT 3
39532: NEG
39533: PUSH
39534: EMPTY
39535: LIST
39536: LIST
39537: PUSH
39538: LD_INT 2
39540: PUSH
39541: LD_INT 1
39543: NEG
39544: PUSH
39545: EMPTY
39546: LIST
39547: LIST
39548: PUSH
39549: LD_INT 3
39551: PUSH
39552: LD_INT 1
39554: PUSH
39555: EMPTY
39556: LIST
39557: LIST
39558: PUSH
39559: LD_INT 1
39561: PUSH
39562: LD_INT 3
39564: PUSH
39565: EMPTY
39566: LIST
39567: LIST
39568: PUSH
39569: LD_INT 1
39571: NEG
39572: PUSH
39573: LD_INT 2
39575: PUSH
39576: EMPTY
39577: LIST
39578: LIST
39579: PUSH
39580: LD_INT 3
39582: NEG
39583: PUSH
39584: LD_INT 2
39586: NEG
39587: PUSH
39588: EMPTY
39589: LIST
39590: LIST
39591: PUSH
39592: EMPTY
39593: LIST
39594: LIST
39595: LIST
39596: LIST
39597: LIST
39598: LIST
39599: LIST
39600: LIST
39601: LIST
39602: LIST
39603: LIST
39604: LIST
39605: LIST
39606: LIST
39607: LIST
39608: LIST
39609: LIST
39610: LIST
39611: LIST
39612: LIST
39613: LIST
39614: LIST
39615: LIST
39616: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
39617: LD_ADDR_VAR 0 32
39621: PUSH
39622: LD_INT 0
39624: PUSH
39625: LD_INT 0
39627: PUSH
39628: EMPTY
39629: LIST
39630: LIST
39631: PUSH
39632: LD_INT 0
39634: PUSH
39635: LD_INT 1
39637: NEG
39638: PUSH
39639: EMPTY
39640: LIST
39641: LIST
39642: PUSH
39643: LD_INT 1
39645: PUSH
39646: LD_INT 0
39648: PUSH
39649: EMPTY
39650: LIST
39651: LIST
39652: PUSH
39653: LD_INT 1
39655: PUSH
39656: LD_INT 1
39658: PUSH
39659: EMPTY
39660: LIST
39661: LIST
39662: PUSH
39663: LD_INT 0
39665: PUSH
39666: LD_INT 1
39668: PUSH
39669: EMPTY
39670: LIST
39671: LIST
39672: PUSH
39673: LD_INT 1
39675: NEG
39676: PUSH
39677: LD_INT 0
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: PUSH
39684: LD_INT 1
39686: NEG
39687: PUSH
39688: LD_INT 1
39690: NEG
39691: PUSH
39692: EMPTY
39693: LIST
39694: LIST
39695: PUSH
39696: LD_INT 1
39698: NEG
39699: PUSH
39700: LD_INT 2
39702: NEG
39703: PUSH
39704: EMPTY
39705: LIST
39706: LIST
39707: PUSH
39708: LD_INT 0
39710: PUSH
39711: LD_INT 2
39713: NEG
39714: PUSH
39715: EMPTY
39716: LIST
39717: LIST
39718: PUSH
39719: LD_INT 1
39721: PUSH
39722: LD_INT 1
39724: NEG
39725: PUSH
39726: EMPTY
39727: LIST
39728: LIST
39729: PUSH
39730: LD_INT 2
39732: PUSH
39733: LD_INT 1
39735: PUSH
39736: EMPTY
39737: LIST
39738: LIST
39739: PUSH
39740: LD_INT 2
39742: PUSH
39743: LD_INT 2
39745: PUSH
39746: EMPTY
39747: LIST
39748: LIST
39749: PUSH
39750: LD_INT 1
39752: PUSH
39753: LD_INT 2
39755: PUSH
39756: EMPTY
39757: LIST
39758: LIST
39759: PUSH
39760: LD_INT 0
39762: PUSH
39763: LD_INT 2
39765: PUSH
39766: EMPTY
39767: LIST
39768: LIST
39769: PUSH
39770: LD_INT 1
39772: NEG
39773: PUSH
39774: LD_INT 1
39776: PUSH
39777: EMPTY
39778: LIST
39779: LIST
39780: PUSH
39781: LD_INT 2
39783: NEG
39784: PUSH
39785: LD_INT 0
39787: PUSH
39788: EMPTY
39789: LIST
39790: LIST
39791: PUSH
39792: LD_INT 2
39794: NEG
39795: PUSH
39796: LD_INT 1
39798: NEG
39799: PUSH
39800: EMPTY
39801: LIST
39802: LIST
39803: PUSH
39804: LD_INT 1
39806: NEG
39807: PUSH
39808: LD_INT 3
39810: NEG
39811: PUSH
39812: EMPTY
39813: LIST
39814: LIST
39815: PUSH
39816: LD_INT 1
39818: PUSH
39819: LD_INT 2
39821: NEG
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: PUSH
39827: LD_INT 3
39829: PUSH
39830: LD_INT 2
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: PUSH
39837: LD_INT 2
39839: PUSH
39840: LD_INT 3
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: PUSH
39847: LD_INT 2
39849: NEG
39850: PUSH
39851: LD_INT 1
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: PUSH
39858: LD_INT 3
39860: NEG
39861: PUSH
39862: LD_INT 1
39864: NEG
39865: PUSH
39866: EMPTY
39867: LIST
39868: LIST
39869: PUSH
39870: EMPTY
39871: LIST
39872: LIST
39873: LIST
39874: LIST
39875: LIST
39876: LIST
39877: LIST
39878: LIST
39879: LIST
39880: LIST
39881: LIST
39882: LIST
39883: LIST
39884: LIST
39885: LIST
39886: LIST
39887: LIST
39888: LIST
39889: LIST
39890: LIST
39891: LIST
39892: LIST
39893: LIST
39894: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
39895: LD_ADDR_VAR 0 33
39899: PUSH
39900: LD_INT 0
39902: PUSH
39903: LD_INT 0
39905: PUSH
39906: EMPTY
39907: LIST
39908: LIST
39909: PUSH
39910: LD_INT 0
39912: PUSH
39913: LD_INT 1
39915: NEG
39916: PUSH
39917: EMPTY
39918: LIST
39919: LIST
39920: PUSH
39921: LD_INT 1
39923: PUSH
39924: LD_INT 0
39926: PUSH
39927: EMPTY
39928: LIST
39929: LIST
39930: PUSH
39931: LD_INT 1
39933: PUSH
39934: LD_INT 1
39936: PUSH
39937: EMPTY
39938: LIST
39939: LIST
39940: PUSH
39941: LD_INT 0
39943: PUSH
39944: LD_INT 1
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: PUSH
39951: LD_INT 1
39953: NEG
39954: PUSH
39955: LD_INT 0
39957: PUSH
39958: EMPTY
39959: LIST
39960: LIST
39961: PUSH
39962: LD_INT 1
39964: NEG
39965: PUSH
39966: LD_INT 1
39968: NEG
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 1
39976: NEG
39977: PUSH
39978: LD_INT 2
39980: NEG
39981: PUSH
39982: EMPTY
39983: LIST
39984: LIST
39985: PUSH
39986: LD_INT 1
39988: PUSH
39989: LD_INT 1
39991: NEG
39992: PUSH
39993: EMPTY
39994: LIST
39995: LIST
39996: PUSH
39997: LD_INT 2
39999: PUSH
40000: LD_INT 0
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: LD_INT 2
40009: PUSH
40010: LD_INT 1
40012: PUSH
40013: EMPTY
40014: LIST
40015: LIST
40016: PUSH
40017: LD_INT 1
40019: PUSH
40020: LD_INT 2
40022: PUSH
40023: EMPTY
40024: LIST
40025: LIST
40026: PUSH
40027: LD_INT 0
40029: PUSH
40030: LD_INT 2
40032: PUSH
40033: EMPTY
40034: LIST
40035: LIST
40036: PUSH
40037: LD_INT 1
40039: NEG
40040: PUSH
40041: LD_INT 1
40043: PUSH
40044: EMPTY
40045: LIST
40046: LIST
40047: PUSH
40048: LD_INT 2
40050: NEG
40051: PUSH
40052: LD_INT 0
40054: PUSH
40055: EMPTY
40056: LIST
40057: LIST
40058: PUSH
40059: LD_INT 2
40061: NEG
40062: PUSH
40063: LD_INT 1
40065: NEG
40066: PUSH
40067: EMPTY
40068: LIST
40069: LIST
40070: PUSH
40071: LD_INT 2
40073: NEG
40074: PUSH
40075: LD_INT 2
40077: NEG
40078: PUSH
40079: EMPTY
40080: LIST
40081: LIST
40082: PUSH
40083: LD_INT 2
40085: NEG
40086: PUSH
40087: LD_INT 3
40089: NEG
40090: PUSH
40091: EMPTY
40092: LIST
40093: LIST
40094: PUSH
40095: LD_INT 2
40097: PUSH
40098: LD_INT 1
40100: NEG
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 3
40108: PUSH
40109: LD_INT 1
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: PUSH
40116: LD_INT 1
40118: PUSH
40119: LD_INT 3
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PUSH
40126: LD_INT 1
40128: NEG
40129: PUSH
40130: LD_INT 2
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: PUSH
40137: LD_INT 3
40139: NEG
40140: PUSH
40141: LD_INT 2
40143: NEG
40144: PUSH
40145: EMPTY
40146: LIST
40147: LIST
40148: PUSH
40149: EMPTY
40150: LIST
40151: LIST
40152: LIST
40153: LIST
40154: LIST
40155: LIST
40156: LIST
40157: LIST
40158: LIST
40159: LIST
40160: LIST
40161: LIST
40162: LIST
40163: LIST
40164: LIST
40165: LIST
40166: LIST
40167: LIST
40168: LIST
40169: LIST
40170: LIST
40171: LIST
40172: LIST
40173: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
40174: LD_ADDR_VAR 0 34
40178: PUSH
40179: LD_INT 0
40181: PUSH
40182: LD_INT 0
40184: PUSH
40185: EMPTY
40186: LIST
40187: LIST
40188: PUSH
40189: LD_INT 0
40191: PUSH
40192: LD_INT 1
40194: NEG
40195: PUSH
40196: EMPTY
40197: LIST
40198: LIST
40199: PUSH
40200: LD_INT 1
40202: PUSH
40203: LD_INT 0
40205: PUSH
40206: EMPTY
40207: LIST
40208: LIST
40209: PUSH
40210: LD_INT 1
40212: PUSH
40213: LD_INT 1
40215: PUSH
40216: EMPTY
40217: LIST
40218: LIST
40219: PUSH
40220: LD_INT 0
40222: PUSH
40223: LD_INT 1
40225: PUSH
40226: EMPTY
40227: LIST
40228: LIST
40229: PUSH
40230: LD_INT 1
40232: NEG
40233: PUSH
40234: LD_INT 0
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 1
40243: NEG
40244: PUSH
40245: LD_INT 1
40247: NEG
40248: PUSH
40249: EMPTY
40250: LIST
40251: LIST
40252: PUSH
40253: LD_INT 1
40255: NEG
40256: PUSH
40257: LD_INT 2
40259: NEG
40260: PUSH
40261: EMPTY
40262: LIST
40263: LIST
40264: PUSH
40265: LD_INT 0
40267: PUSH
40268: LD_INT 2
40270: NEG
40271: PUSH
40272: EMPTY
40273: LIST
40274: LIST
40275: PUSH
40276: LD_INT 1
40278: PUSH
40279: LD_INT 1
40281: NEG
40282: PUSH
40283: EMPTY
40284: LIST
40285: LIST
40286: PUSH
40287: LD_INT 2
40289: PUSH
40290: LD_INT 1
40292: PUSH
40293: EMPTY
40294: LIST
40295: LIST
40296: PUSH
40297: LD_INT 2
40299: PUSH
40300: LD_INT 2
40302: PUSH
40303: EMPTY
40304: LIST
40305: LIST
40306: PUSH
40307: LD_INT 1
40309: PUSH
40310: LD_INT 2
40312: PUSH
40313: EMPTY
40314: LIST
40315: LIST
40316: PUSH
40317: LD_INT 1
40319: NEG
40320: PUSH
40321: LD_INT 1
40323: PUSH
40324: EMPTY
40325: LIST
40326: LIST
40327: PUSH
40328: LD_INT 2
40330: NEG
40331: PUSH
40332: LD_INT 0
40334: PUSH
40335: EMPTY
40336: LIST
40337: LIST
40338: PUSH
40339: LD_INT 2
40341: NEG
40342: PUSH
40343: LD_INT 1
40345: NEG
40346: PUSH
40347: EMPTY
40348: LIST
40349: LIST
40350: PUSH
40351: LD_INT 2
40353: NEG
40354: PUSH
40355: LD_INT 2
40357: NEG
40358: PUSH
40359: EMPTY
40360: LIST
40361: LIST
40362: PUSH
40363: LD_INT 1
40365: NEG
40366: PUSH
40367: LD_INT 3
40369: NEG
40370: PUSH
40371: EMPTY
40372: LIST
40373: LIST
40374: PUSH
40375: LD_INT 1
40377: PUSH
40378: LD_INT 2
40380: NEG
40381: PUSH
40382: EMPTY
40383: LIST
40384: LIST
40385: PUSH
40386: LD_INT 3
40388: PUSH
40389: LD_INT 2
40391: PUSH
40392: EMPTY
40393: LIST
40394: LIST
40395: PUSH
40396: LD_INT 2
40398: PUSH
40399: LD_INT 3
40401: PUSH
40402: EMPTY
40403: LIST
40404: LIST
40405: PUSH
40406: LD_INT 2
40408: NEG
40409: PUSH
40410: LD_INT 1
40412: PUSH
40413: EMPTY
40414: LIST
40415: LIST
40416: PUSH
40417: LD_INT 3
40419: NEG
40420: PUSH
40421: LD_INT 1
40423: NEG
40424: PUSH
40425: EMPTY
40426: LIST
40427: LIST
40428: PUSH
40429: EMPTY
40430: LIST
40431: LIST
40432: LIST
40433: LIST
40434: LIST
40435: LIST
40436: LIST
40437: LIST
40438: LIST
40439: LIST
40440: LIST
40441: LIST
40442: LIST
40443: LIST
40444: LIST
40445: LIST
40446: LIST
40447: LIST
40448: LIST
40449: LIST
40450: LIST
40451: LIST
40452: LIST
40453: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40454: LD_ADDR_VAR 0 35
40458: PUSH
40459: LD_INT 0
40461: PUSH
40462: LD_INT 0
40464: PUSH
40465: EMPTY
40466: LIST
40467: LIST
40468: PUSH
40469: LD_INT 0
40471: PUSH
40472: LD_INT 1
40474: NEG
40475: PUSH
40476: EMPTY
40477: LIST
40478: LIST
40479: PUSH
40480: LD_INT 1
40482: PUSH
40483: LD_INT 0
40485: PUSH
40486: EMPTY
40487: LIST
40488: LIST
40489: PUSH
40490: LD_INT 1
40492: PUSH
40493: LD_INT 1
40495: PUSH
40496: EMPTY
40497: LIST
40498: LIST
40499: PUSH
40500: LD_INT 0
40502: PUSH
40503: LD_INT 1
40505: PUSH
40506: EMPTY
40507: LIST
40508: LIST
40509: PUSH
40510: LD_INT 1
40512: NEG
40513: PUSH
40514: LD_INT 0
40516: PUSH
40517: EMPTY
40518: LIST
40519: LIST
40520: PUSH
40521: LD_INT 1
40523: NEG
40524: PUSH
40525: LD_INT 1
40527: NEG
40528: PUSH
40529: EMPTY
40530: LIST
40531: LIST
40532: PUSH
40533: LD_INT 2
40535: PUSH
40536: LD_INT 1
40538: PUSH
40539: EMPTY
40540: LIST
40541: LIST
40542: PUSH
40543: LD_INT 2
40545: NEG
40546: PUSH
40547: LD_INT 1
40549: NEG
40550: PUSH
40551: EMPTY
40552: LIST
40553: LIST
40554: PUSH
40555: EMPTY
40556: LIST
40557: LIST
40558: LIST
40559: LIST
40560: LIST
40561: LIST
40562: LIST
40563: LIST
40564: LIST
40565: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40566: LD_ADDR_VAR 0 36
40570: PUSH
40571: LD_INT 0
40573: PUSH
40574: LD_INT 0
40576: PUSH
40577: EMPTY
40578: LIST
40579: LIST
40580: PUSH
40581: LD_INT 0
40583: PUSH
40584: LD_INT 1
40586: NEG
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: PUSH
40592: LD_INT 1
40594: PUSH
40595: LD_INT 0
40597: PUSH
40598: EMPTY
40599: LIST
40600: LIST
40601: PUSH
40602: LD_INT 1
40604: PUSH
40605: LD_INT 1
40607: PUSH
40608: EMPTY
40609: LIST
40610: LIST
40611: PUSH
40612: LD_INT 0
40614: PUSH
40615: LD_INT 1
40617: PUSH
40618: EMPTY
40619: LIST
40620: LIST
40621: PUSH
40622: LD_INT 1
40624: NEG
40625: PUSH
40626: LD_INT 0
40628: PUSH
40629: EMPTY
40630: LIST
40631: LIST
40632: PUSH
40633: LD_INT 1
40635: NEG
40636: PUSH
40637: LD_INT 1
40639: NEG
40640: PUSH
40641: EMPTY
40642: LIST
40643: LIST
40644: PUSH
40645: LD_INT 1
40647: NEG
40648: PUSH
40649: LD_INT 2
40651: NEG
40652: PUSH
40653: EMPTY
40654: LIST
40655: LIST
40656: PUSH
40657: LD_INT 1
40659: PUSH
40660: LD_INT 2
40662: PUSH
40663: EMPTY
40664: LIST
40665: LIST
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: LIST
40671: LIST
40672: LIST
40673: LIST
40674: LIST
40675: LIST
40676: LIST
40677: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
40678: LD_ADDR_VAR 0 37
40682: PUSH
40683: LD_INT 0
40685: PUSH
40686: LD_INT 0
40688: PUSH
40689: EMPTY
40690: LIST
40691: LIST
40692: PUSH
40693: LD_INT 0
40695: PUSH
40696: LD_INT 1
40698: NEG
40699: PUSH
40700: EMPTY
40701: LIST
40702: LIST
40703: PUSH
40704: LD_INT 1
40706: PUSH
40707: LD_INT 0
40709: PUSH
40710: EMPTY
40711: LIST
40712: LIST
40713: PUSH
40714: LD_INT 1
40716: PUSH
40717: LD_INT 1
40719: PUSH
40720: EMPTY
40721: LIST
40722: LIST
40723: PUSH
40724: LD_INT 0
40726: PUSH
40727: LD_INT 1
40729: PUSH
40730: EMPTY
40731: LIST
40732: LIST
40733: PUSH
40734: LD_INT 1
40736: NEG
40737: PUSH
40738: LD_INT 0
40740: PUSH
40741: EMPTY
40742: LIST
40743: LIST
40744: PUSH
40745: LD_INT 1
40747: NEG
40748: PUSH
40749: LD_INT 1
40751: NEG
40752: PUSH
40753: EMPTY
40754: LIST
40755: LIST
40756: PUSH
40757: LD_INT 1
40759: PUSH
40760: LD_INT 1
40762: NEG
40763: PUSH
40764: EMPTY
40765: LIST
40766: LIST
40767: PUSH
40768: LD_INT 1
40770: NEG
40771: PUSH
40772: LD_INT 1
40774: PUSH
40775: EMPTY
40776: LIST
40777: LIST
40778: PUSH
40779: EMPTY
40780: LIST
40781: LIST
40782: LIST
40783: LIST
40784: LIST
40785: LIST
40786: LIST
40787: LIST
40788: LIST
40789: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
40790: LD_ADDR_VAR 0 38
40794: PUSH
40795: LD_INT 0
40797: PUSH
40798: LD_INT 0
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: LD_INT 0
40807: PUSH
40808: LD_INT 1
40810: NEG
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 1
40818: PUSH
40819: LD_INT 0
40821: PUSH
40822: EMPTY
40823: LIST
40824: LIST
40825: PUSH
40826: LD_INT 1
40828: PUSH
40829: LD_INT 1
40831: PUSH
40832: EMPTY
40833: LIST
40834: LIST
40835: PUSH
40836: LD_INT 0
40838: PUSH
40839: LD_INT 1
40841: PUSH
40842: EMPTY
40843: LIST
40844: LIST
40845: PUSH
40846: LD_INT 1
40848: NEG
40849: PUSH
40850: LD_INT 0
40852: PUSH
40853: EMPTY
40854: LIST
40855: LIST
40856: PUSH
40857: LD_INT 1
40859: NEG
40860: PUSH
40861: LD_INT 1
40863: NEG
40864: PUSH
40865: EMPTY
40866: LIST
40867: LIST
40868: PUSH
40869: LD_INT 2
40871: PUSH
40872: LD_INT 1
40874: PUSH
40875: EMPTY
40876: LIST
40877: LIST
40878: PUSH
40879: LD_INT 2
40881: NEG
40882: PUSH
40883: LD_INT 1
40885: NEG
40886: PUSH
40887: EMPTY
40888: LIST
40889: LIST
40890: PUSH
40891: EMPTY
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
40902: LD_ADDR_VAR 0 39
40906: PUSH
40907: LD_INT 0
40909: PUSH
40910: LD_INT 0
40912: PUSH
40913: EMPTY
40914: LIST
40915: LIST
40916: PUSH
40917: LD_INT 0
40919: PUSH
40920: LD_INT 1
40922: NEG
40923: PUSH
40924: EMPTY
40925: LIST
40926: LIST
40927: PUSH
40928: LD_INT 1
40930: PUSH
40931: LD_INT 0
40933: PUSH
40934: EMPTY
40935: LIST
40936: LIST
40937: PUSH
40938: LD_INT 1
40940: PUSH
40941: LD_INT 1
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 0
40950: PUSH
40951: LD_INT 1
40953: PUSH
40954: EMPTY
40955: LIST
40956: LIST
40957: PUSH
40958: LD_INT 1
40960: NEG
40961: PUSH
40962: LD_INT 0
40964: PUSH
40965: EMPTY
40966: LIST
40967: LIST
40968: PUSH
40969: LD_INT 1
40971: NEG
40972: PUSH
40973: LD_INT 1
40975: NEG
40976: PUSH
40977: EMPTY
40978: LIST
40979: LIST
40980: PUSH
40981: LD_INT 1
40983: NEG
40984: PUSH
40985: LD_INT 2
40987: NEG
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 1
40995: PUSH
40996: LD_INT 2
40998: PUSH
40999: EMPTY
41000: LIST
41001: LIST
41002: PUSH
41003: EMPTY
41004: LIST
41005: LIST
41006: LIST
41007: LIST
41008: LIST
41009: LIST
41010: LIST
41011: LIST
41012: LIST
41013: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
41014: LD_ADDR_VAR 0 40
41018: PUSH
41019: LD_INT 0
41021: PUSH
41022: LD_INT 0
41024: PUSH
41025: EMPTY
41026: LIST
41027: LIST
41028: PUSH
41029: LD_INT 0
41031: PUSH
41032: LD_INT 1
41034: NEG
41035: PUSH
41036: EMPTY
41037: LIST
41038: LIST
41039: PUSH
41040: LD_INT 1
41042: PUSH
41043: LD_INT 0
41045: PUSH
41046: EMPTY
41047: LIST
41048: LIST
41049: PUSH
41050: LD_INT 1
41052: PUSH
41053: LD_INT 1
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: PUSH
41060: LD_INT 0
41062: PUSH
41063: LD_INT 1
41065: PUSH
41066: EMPTY
41067: LIST
41068: LIST
41069: PUSH
41070: LD_INT 1
41072: NEG
41073: PUSH
41074: LD_INT 0
41076: PUSH
41077: EMPTY
41078: LIST
41079: LIST
41080: PUSH
41081: LD_INT 1
41083: NEG
41084: PUSH
41085: LD_INT 1
41087: NEG
41088: PUSH
41089: EMPTY
41090: LIST
41091: LIST
41092: PUSH
41093: LD_INT 1
41095: PUSH
41096: LD_INT 1
41098: NEG
41099: PUSH
41100: EMPTY
41101: LIST
41102: LIST
41103: PUSH
41104: LD_INT 1
41106: NEG
41107: PUSH
41108: LD_INT 1
41110: PUSH
41111: EMPTY
41112: LIST
41113: LIST
41114: PUSH
41115: EMPTY
41116: LIST
41117: LIST
41118: LIST
41119: LIST
41120: LIST
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41126: LD_ADDR_VAR 0 41
41130: PUSH
41131: LD_INT 0
41133: PUSH
41134: LD_INT 0
41136: PUSH
41137: EMPTY
41138: LIST
41139: LIST
41140: PUSH
41141: LD_INT 0
41143: PUSH
41144: LD_INT 1
41146: NEG
41147: PUSH
41148: EMPTY
41149: LIST
41150: LIST
41151: PUSH
41152: LD_INT 1
41154: PUSH
41155: LD_INT 0
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: PUSH
41162: LD_INT 1
41164: PUSH
41165: LD_INT 1
41167: PUSH
41168: EMPTY
41169: LIST
41170: LIST
41171: PUSH
41172: LD_INT 0
41174: PUSH
41175: LD_INT 1
41177: PUSH
41178: EMPTY
41179: LIST
41180: LIST
41181: PUSH
41182: LD_INT 1
41184: NEG
41185: PUSH
41186: LD_INT 0
41188: PUSH
41189: EMPTY
41190: LIST
41191: LIST
41192: PUSH
41193: LD_INT 1
41195: NEG
41196: PUSH
41197: LD_INT 1
41199: NEG
41200: PUSH
41201: EMPTY
41202: LIST
41203: LIST
41204: PUSH
41205: LD_INT 1
41207: NEG
41208: PUSH
41209: LD_INT 2
41211: NEG
41212: PUSH
41213: EMPTY
41214: LIST
41215: LIST
41216: PUSH
41217: LD_INT 1
41219: PUSH
41220: LD_INT 1
41222: NEG
41223: PUSH
41224: EMPTY
41225: LIST
41226: LIST
41227: PUSH
41228: LD_INT 2
41230: PUSH
41231: LD_INT 0
41233: PUSH
41234: EMPTY
41235: LIST
41236: LIST
41237: PUSH
41238: LD_INT 2
41240: PUSH
41241: LD_INT 1
41243: PUSH
41244: EMPTY
41245: LIST
41246: LIST
41247: PUSH
41248: LD_INT 2
41250: PUSH
41251: LD_INT 2
41253: PUSH
41254: EMPTY
41255: LIST
41256: LIST
41257: PUSH
41258: LD_INT 1
41260: PUSH
41261: LD_INT 2
41263: PUSH
41264: EMPTY
41265: LIST
41266: LIST
41267: PUSH
41268: LD_INT 1
41270: NEG
41271: PUSH
41272: LD_INT 1
41274: PUSH
41275: EMPTY
41276: LIST
41277: LIST
41278: PUSH
41279: LD_INT 2
41281: NEG
41282: PUSH
41283: LD_INT 0
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: PUSH
41290: LD_INT 2
41292: NEG
41293: PUSH
41294: LD_INT 1
41296: NEG
41297: PUSH
41298: EMPTY
41299: LIST
41300: LIST
41301: PUSH
41302: LD_INT 2
41304: NEG
41305: PUSH
41306: LD_INT 2
41308: NEG
41309: PUSH
41310: EMPTY
41311: LIST
41312: LIST
41313: PUSH
41314: LD_INT 2
41316: NEG
41317: PUSH
41318: LD_INT 3
41320: NEG
41321: PUSH
41322: EMPTY
41323: LIST
41324: LIST
41325: PUSH
41326: LD_INT 2
41328: PUSH
41329: LD_INT 1
41331: NEG
41332: PUSH
41333: EMPTY
41334: LIST
41335: LIST
41336: PUSH
41337: LD_INT 3
41339: PUSH
41340: LD_INT 0
41342: PUSH
41343: EMPTY
41344: LIST
41345: LIST
41346: PUSH
41347: LD_INT 3
41349: PUSH
41350: LD_INT 1
41352: PUSH
41353: EMPTY
41354: LIST
41355: LIST
41356: PUSH
41357: LD_INT 3
41359: PUSH
41360: LD_INT 2
41362: PUSH
41363: EMPTY
41364: LIST
41365: LIST
41366: PUSH
41367: LD_INT 3
41369: PUSH
41370: LD_INT 3
41372: PUSH
41373: EMPTY
41374: LIST
41375: LIST
41376: PUSH
41377: LD_INT 2
41379: PUSH
41380: LD_INT 3
41382: PUSH
41383: EMPTY
41384: LIST
41385: LIST
41386: PUSH
41387: LD_INT 2
41389: NEG
41390: PUSH
41391: LD_INT 1
41393: PUSH
41394: EMPTY
41395: LIST
41396: LIST
41397: PUSH
41398: LD_INT 3
41400: NEG
41401: PUSH
41402: LD_INT 0
41404: PUSH
41405: EMPTY
41406: LIST
41407: LIST
41408: PUSH
41409: LD_INT 3
41411: NEG
41412: PUSH
41413: LD_INT 1
41415: NEG
41416: PUSH
41417: EMPTY
41418: LIST
41419: LIST
41420: PUSH
41421: LD_INT 3
41423: NEG
41424: PUSH
41425: LD_INT 2
41427: NEG
41428: PUSH
41429: EMPTY
41430: LIST
41431: LIST
41432: PUSH
41433: LD_INT 3
41435: NEG
41436: PUSH
41437: LD_INT 3
41439: NEG
41440: PUSH
41441: EMPTY
41442: LIST
41443: LIST
41444: PUSH
41445: EMPTY
41446: LIST
41447: LIST
41448: LIST
41449: LIST
41450: LIST
41451: LIST
41452: LIST
41453: LIST
41454: LIST
41455: LIST
41456: LIST
41457: LIST
41458: LIST
41459: LIST
41460: LIST
41461: LIST
41462: LIST
41463: LIST
41464: LIST
41465: LIST
41466: LIST
41467: LIST
41468: LIST
41469: LIST
41470: LIST
41471: LIST
41472: LIST
41473: LIST
41474: LIST
41475: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
41476: LD_ADDR_VAR 0 42
41480: PUSH
41481: LD_INT 0
41483: PUSH
41484: LD_INT 0
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: PUSH
41491: LD_INT 0
41493: PUSH
41494: LD_INT 1
41496: NEG
41497: PUSH
41498: EMPTY
41499: LIST
41500: LIST
41501: PUSH
41502: LD_INT 1
41504: PUSH
41505: LD_INT 0
41507: PUSH
41508: EMPTY
41509: LIST
41510: LIST
41511: PUSH
41512: LD_INT 1
41514: PUSH
41515: LD_INT 1
41517: PUSH
41518: EMPTY
41519: LIST
41520: LIST
41521: PUSH
41522: LD_INT 0
41524: PUSH
41525: LD_INT 1
41527: PUSH
41528: EMPTY
41529: LIST
41530: LIST
41531: PUSH
41532: LD_INT 1
41534: NEG
41535: PUSH
41536: LD_INT 0
41538: PUSH
41539: EMPTY
41540: LIST
41541: LIST
41542: PUSH
41543: LD_INT 1
41545: NEG
41546: PUSH
41547: LD_INT 1
41549: NEG
41550: PUSH
41551: EMPTY
41552: LIST
41553: LIST
41554: PUSH
41555: LD_INT 1
41557: NEG
41558: PUSH
41559: LD_INT 2
41561: NEG
41562: PUSH
41563: EMPTY
41564: LIST
41565: LIST
41566: PUSH
41567: LD_INT 0
41569: PUSH
41570: LD_INT 2
41572: NEG
41573: PUSH
41574: EMPTY
41575: LIST
41576: LIST
41577: PUSH
41578: LD_INT 1
41580: PUSH
41581: LD_INT 1
41583: NEG
41584: PUSH
41585: EMPTY
41586: LIST
41587: LIST
41588: PUSH
41589: LD_INT 2
41591: PUSH
41592: LD_INT 1
41594: PUSH
41595: EMPTY
41596: LIST
41597: LIST
41598: PUSH
41599: LD_INT 2
41601: PUSH
41602: LD_INT 2
41604: PUSH
41605: EMPTY
41606: LIST
41607: LIST
41608: PUSH
41609: LD_INT 1
41611: PUSH
41612: LD_INT 2
41614: PUSH
41615: EMPTY
41616: LIST
41617: LIST
41618: PUSH
41619: LD_INT 0
41621: PUSH
41622: LD_INT 2
41624: PUSH
41625: EMPTY
41626: LIST
41627: LIST
41628: PUSH
41629: LD_INT 1
41631: NEG
41632: PUSH
41633: LD_INT 1
41635: PUSH
41636: EMPTY
41637: LIST
41638: LIST
41639: PUSH
41640: LD_INT 2
41642: NEG
41643: PUSH
41644: LD_INT 1
41646: NEG
41647: PUSH
41648: EMPTY
41649: LIST
41650: LIST
41651: PUSH
41652: LD_INT 2
41654: NEG
41655: PUSH
41656: LD_INT 2
41658: NEG
41659: PUSH
41660: EMPTY
41661: LIST
41662: LIST
41663: PUSH
41664: LD_INT 2
41666: NEG
41667: PUSH
41668: LD_INT 3
41670: NEG
41671: PUSH
41672: EMPTY
41673: LIST
41674: LIST
41675: PUSH
41676: LD_INT 1
41678: NEG
41679: PUSH
41680: LD_INT 3
41682: NEG
41683: PUSH
41684: EMPTY
41685: LIST
41686: LIST
41687: PUSH
41688: LD_INT 0
41690: PUSH
41691: LD_INT 3
41693: NEG
41694: PUSH
41695: EMPTY
41696: LIST
41697: LIST
41698: PUSH
41699: LD_INT 1
41701: PUSH
41702: LD_INT 2
41704: NEG
41705: PUSH
41706: EMPTY
41707: LIST
41708: LIST
41709: PUSH
41710: LD_INT 3
41712: PUSH
41713: LD_INT 2
41715: PUSH
41716: EMPTY
41717: LIST
41718: LIST
41719: PUSH
41720: LD_INT 3
41722: PUSH
41723: LD_INT 3
41725: PUSH
41726: EMPTY
41727: LIST
41728: LIST
41729: PUSH
41730: LD_INT 2
41732: PUSH
41733: LD_INT 3
41735: PUSH
41736: EMPTY
41737: LIST
41738: LIST
41739: PUSH
41740: LD_INT 1
41742: PUSH
41743: LD_INT 3
41745: PUSH
41746: EMPTY
41747: LIST
41748: LIST
41749: PUSH
41750: LD_INT 0
41752: PUSH
41753: LD_INT 3
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: LD_INT 1
41762: NEG
41763: PUSH
41764: LD_INT 2
41766: PUSH
41767: EMPTY
41768: LIST
41769: LIST
41770: PUSH
41771: LD_INT 3
41773: NEG
41774: PUSH
41775: LD_INT 2
41777: NEG
41778: PUSH
41779: EMPTY
41780: LIST
41781: LIST
41782: PUSH
41783: LD_INT 3
41785: NEG
41786: PUSH
41787: LD_INT 3
41789: NEG
41790: PUSH
41791: EMPTY
41792: LIST
41793: LIST
41794: PUSH
41795: EMPTY
41796: LIST
41797: LIST
41798: LIST
41799: LIST
41800: LIST
41801: LIST
41802: LIST
41803: LIST
41804: LIST
41805: LIST
41806: LIST
41807: LIST
41808: LIST
41809: LIST
41810: LIST
41811: LIST
41812: LIST
41813: LIST
41814: LIST
41815: LIST
41816: LIST
41817: LIST
41818: LIST
41819: LIST
41820: LIST
41821: LIST
41822: LIST
41823: LIST
41824: LIST
41825: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
41826: LD_ADDR_VAR 0 43
41830: PUSH
41831: LD_INT 0
41833: PUSH
41834: LD_INT 0
41836: PUSH
41837: EMPTY
41838: LIST
41839: LIST
41840: PUSH
41841: LD_INT 0
41843: PUSH
41844: LD_INT 1
41846: NEG
41847: PUSH
41848: EMPTY
41849: LIST
41850: LIST
41851: PUSH
41852: LD_INT 1
41854: PUSH
41855: LD_INT 0
41857: PUSH
41858: EMPTY
41859: LIST
41860: LIST
41861: PUSH
41862: LD_INT 1
41864: PUSH
41865: LD_INT 1
41867: PUSH
41868: EMPTY
41869: LIST
41870: LIST
41871: PUSH
41872: LD_INT 0
41874: PUSH
41875: LD_INT 1
41877: PUSH
41878: EMPTY
41879: LIST
41880: LIST
41881: PUSH
41882: LD_INT 1
41884: NEG
41885: PUSH
41886: LD_INT 0
41888: PUSH
41889: EMPTY
41890: LIST
41891: LIST
41892: PUSH
41893: LD_INT 1
41895: NEG
41896: PUSH
41897: LD_INT 1
41899: NEG
41900: PUSH
41901: EMPTY
41902: LIST
41903: LIST
41904: PUSH
41905: LD_INT 1
41907: NEG
41908: PUSH
41909: LD_INT 2
41911: NEG
41912: PUSH
41913: EMPTY
41914: LIST
41915: LIST
41916: PUSH
41917: LD_INT 0
41919: PUSH
41920: LD_INT 2
41922: NEG
41923: PUSH
41924: EMPTY
41925: LIST
41926: LIST
41927: PUSH
41928: LD_INT 1
41930: PUSH
41931: LD_INT 1
41933: NEG
41934: PUSH
41935: EMPTY
41936: LIST
41937: LIST
41938: PUSH
41939: LD_INT 2
41941: PUSH
41942: LD_INT 0
41944: PUSH
41945: EMPTY
41946: LIST
41947: LIST
41948: PUSH
41949: LD_INT 2
41951: PUSH
41952: LD_INT 1
41954: PUSH
41955: EMPTY
41956: LIST
41957: LIST
41958: PUSH
41959: LD_INT 1
41961: PUSH
41962: LD_INT 2
41964: PUSH
41965: EMPTY
41966: LIST
41967: LIST
41968: PUSH
41969: LD_INT 0
41971: PUSH
41972: LD_INT 2
41974: PUSH
41975: EMPTY
41976: LIST
41977: LIST
41978: PUSH
41979: LD_INT 1
41981: NEG
41982: PUSH
41983: LD_INT 1
41985: PUSH
41986: EMPTY
41987: LIST
41988: LIST
41989: PUSH
41990: LD_INT 2
41992: NEG
41993: PUSH
41994: LD_INT 0
41996: PUSH
41997: EMPTY
41998: LIST
41999: LIST
42000: PUSH
42001: LD_INT 2
42003: NEG
42004: PUSH
42005: LD_INT 1
42007: NEG
42008: PUSH
42009: EMPTY
42010: LIST
42011: LIST
42012: PUSH
42013: LD_INT 1
42015: NEG
42016: PUSH
42017: LD_INT 3
42019: NEG
42020: PUSH
42021: EMPTY
42022: LIST
42023: LIST
42024: PUSH
42025: LD_INT 0
42027: PUSH
42028: LD_INT 3
42030: NEG
42031: PUSH
42032: EMPTY
42033: LIST
42034: LIST
42035: PUSH
42036: LD_INT 1
42038: PUSH
42039: LD_INT 2
42041: NEG
42042: PUSH
42043: EMPTY
42044: LIST
42045: LIST
42046: PUSH
42047: LD_INT 2
42049: PUSH
42050: LD_INT 1
42052: NEG
42053: PUSH
42054: EMPTY
42055: LIST
42056: LIST
42057: PUSH
42058: LD_INT 3
42060: PUSH
42061: LD_INT 0
42063: PUSH
42064: EMPTY
42065: LIST
42066: LIST
42067: PUSH
42068: LD_INT 3
42070: PUSH
42071: LD_INT 1
42073: PUSH
42074: EMPTY
42075: LIST
42076: LIST
42077: PUSH
42078: LD_INT 1
42080: PUSH
42081: LD_INT 3
42083: PUSH
42084: EMPTY
42085: LIST
42086: LIST
42087: PUSH
42088: LD_INT 0
42090: PUSH
42091: LD_INT 3
42093: PUSH
42094: EMPTY
42095: LIST
42096: LIST
42097: PUSH
42098: LD_INT 1
42100: NEG
42101: PUSH
42102: LD_INT 2
42104: PUSH
42105: EMPTY
42106: LIST
42107: LIST
42108: PUSH
42109: LD_INT 2
42111: NEG
42112: PUSH
42113: LD_INT 1
42115: PUSH
42116: EMPTY
42117: LIST
42118: LIST
42119: PUSH
42120: LD_INT 3
42122: NEG
42123: PUSH
42124: LD_INT 0
42126: PUSH
42127: EMPTY
42128: LIST
42129: LIST
42130: PUSH
42131: LD_INT 3
42133: NEG
42134: PUSH
42135: LD_INT 1
42137: NEG
42138: PUSH
42139: EMPTY
42140: LIST
42141: LIST
42142: PUSH
42143: EMPTY
42144: LIST
42145: LIST
42146: LIST
42147: LIST
42148: LIST
42149: LIST
42150: LIST
42151: LIST
42152: LIST
42153: LIST
42154: LIST
42155: LIST
42156: LIST
42157: LIST
42158: LIST
42159: LIST
42160: LIST
42161: LIST
42162: LIST
42163: LIST
42164: LIST
42165: LIST
42166: LIST
42167: LIST
42168: LIST
42169: LIST
42170: LIST
42171: LIST
42172: LIST
42173: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42174: LD_ADDR_VAR 0 44
42178: PUSH
42179: LD_INT 0
42181: PUSH
42182: LD_INT 0
42184: PUSH
42185: EMPTY
42186: LIST
42187: LIST
42188: PUSH
42189: LD_INT 0
42191: PUSH
42192: LD_INT 1
42194: NEG
42195: PUSH
42196: EMPTY
42197: LIST
42198: LIST
42199: PUSH
42200: LD_INT 1
42202: PUSH
42203: LD_INT 0
42205: PUSH
42206: EMPTY
42207: LIST
42208: LIST
42209: PUSH
42210: LD_INT 1
42212: PUSH
42213: LD_INT 1
42215: PUSH
42216: EMPTY
42217: LIST
42218: LIST
42219: PUSH
42220: LD_INT 0
42222: PUSH
42223: LD_INT 1
42225: PUSH
42226: EMPTY
42227: LIST
42228: LIST
42229: PUSH
42230: LD_INT 1
42232: NEG
42233: PUSH
42234: LD_INT 0
42236: PUSH
42237: EMPTY
42238: LIST
42239: LIST
42240: PUSH
42241: LD_INT 1
42243: NEG
42244: PUSH
42245: LD_INT 1
42247: NEG
42248: PUSH
42249: EMPTY
42250: LIST
42251: LIST
42252: PUSH
42253: LD_INT 1
42255: NEG
42256: PUSH
42257: LD_INT 2
42259: NEG
42260: PUSH
42261: EMPTY
42262: LIST
42263: LIST
42264: PUSH
42265: LD_INT 1
42267: PUSH
42268: LD_INT 1
42270: NEG
42271: PUSH
42272: EMPTY
42273: LIST
42274: LIST
42275: PUSH
42276: LD_INT 2
42278: PUSH
42279: LD_INT 0
42281: PUSH
42282: EMPTY
42283: LIST
42284: LIST
42285: PUSH
42286: LD_INT 2
42288: PUSH
42289: LD_INT 1
42291: PUSH
42292: EMPTY
42293: LIST
42294: LIST
42295: PUSH
42296: LD_INT 2
42298: PUSH
42299: LD_INT 2
42301: PUSH
42302: EMPTY
42303: LIST
42304: LIST
42305: PUSH
42306: LD_INT 1
42308: PUSH
42309: LD_INT 2
42311: PUSH
42312: EMPTY
42313: LIST
42314: LIST
42315: PUSH
42316: LD_INT 1
42318: NEG
42319: PUSH
42320: LD_INT 1
42322: PUSH
42323: EMPTY
42324: LIST
42325: LIST
42326: PUSH
42327: LD_INT 2
42329: NEG
42330: PUSH
42331: LD_INT 0
42333: PUSH
42334: EMPTY
42335: LIST
42336: LIST
42337: PUSH
42338: LD_INT 2
42340: NEG
42341: PUSH
42342: LD_INT 1
42344: NEG
42345: PUSH
42346: EMPTY
42347: LIST
42348: LIST
42349: PUSH
42350: LD_INT 2
42352: NEG
42353: PUSH
42354: LD_INT 2
42356: NEG
42357: PUSH
42358: EMPTY
42359: LIST
42360: LIST
42361: PUSH
42362: LD_INT 2
42364: NEG
42365: PUSH
42366: LD_INT 3
42368: NEG
42369: PUSH
42370: EMPTY
42371: LIST
42372: LIST
42373: PUSH
42374: LD_INT 2
42376: PUSH
42377: LD_INT 1
42379: NEG
42380: PUSH
42381: EMPTY
42382: LIST
42383: LIST
42384: PUSH
42385: LD_INT 3
42387: PUSH
42388: LD_INT 0
42390: PUSH
42391: EMPTY
42392: LIST
42393: LIST
42394: PUSH
42395: LD_INT 3
42397: PUSH
42398: LD_INT 1
42400: PUSH
42401: EMPTY
42402: LIST
42403: LIST
42404: PUSH
42405: LD_INT 3
42407: PUSH
42408: LD_INT 2
42410: PUSH
42411: EMPTY
42412: LIST
42413: LIST
42414: PUSH
42415: LD_INT 3
42417: PUSH
42418: LD_INT 3
42420: PUSH
42421: EMPTY
42422: LIST
42423: LIST
42424: PUSH
42425: LD_INT 2
42427: PUSH
42428: LD_INT 3
42430: PUSH
42431: EMPTY
42432: LIST
42433: LIST
42434: PUSH
42435: LD_INT 2
42437: NEG
42438: PUSH
42439: LD_INT 1
42441: PUSH
42442: EMPTY
42443: LIST
42444: LIST
42445: PUSH
42446: LD_INT 3
42448: NEG
42449: PUSH
42450: LD_INT 0
42452: PUSH
42453: EMPTY
42454: LIST
42455: LIST
42456: PUSH
42457: LD_INT 3
42459: NEG
42460: PUSH
42461: LD_INT 1
42463: NEG
42464: PUSH
42465: EMPTY
42466: LIST
42467: LIST
42468: PUSH
42469: LD_INT 3
42471: NEG
42472: PUSH
42473: LD_INT 2
42475: NEG
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: LD_INT 3
42483: NEG
42484: PUSH
42485: LD_INT 3
42487: NEG
42488: PUSH
42489: EMPTY
42490: LIST
42491: LIST
42492: PUSH
42493: EMPTY
42494: LIST
42495: LIST
42496: LIST
42497: LIST
42498: LIST
42499: LIST
42500: LIST
42501: LIST
42502: LIST
42503: LIST
42504: LIST
42505: LIST
42506: LIST
42507: LIST
42508: LIST
42509: LIST
42510: LIST
42511: LIST
42512: LIST
42513: LIST
42514: LIST
42515: LIST
42516: LIST
42517: LIST
42518: LIST
42519: LIST
42520: LIST
42521: LIST
42522: LIST
42523: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
42524: LD_ADDR_VAR 0 45
42528: PUSH
42529: LD_INT 0
42531: PUSH
42532: LD_INT 0
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: PUSH
42539: LD_INT 0
42541: PUSH
42542: LD_INT 1
42544: NEG
42545: PUSH
42546: EMPTY
42547: LIST
42548: LIST
42549: PUSH
42550: LD_INT 1
42552: PUSH
42553: LD_INT 0
42555: PUSH
42556: EMPTY
42557: LIST
42558: LIST
42559: PUSH
42560: LD_INT 1
42562: PUSH
42563: LD_INT 1
42565: PUSH
42566: EMPTY
42567: LIST
42568: LIST
42569: PUSH
42570: LD_INT 0
42572: PUSH
42573: LD_INT 1
42575: PUSH
42576: EMPTY
42577: LIST
42578: LIST
42579: PUSH
42580: LD_INT 1
42582: NEG
42583: PUSH
42584: LD_INT 0
42586: PUSH
42587: EMPTY
42588: LIST
42589: LIST
42590: PUSH
42591: LD_INT 1
42593: NEG
42594: PUSH
42595: LD_INT 1
42597: NEG
42598: PUSH
42599: EMPTY
42600: LIST
42601: LIST
42602: PUSH
42603: LD_INT 1
42605: NEG
42606: PUSH
42607: LD_INT 2
42609: NEG
42610: PUSH
42611: EMPTY
42612: LIST
42613: LIST
42614: PUSH
42615: LD_INT 0
42617: PUSH
42618: LD_INT 2
42620: NEG
42621: PUSH
42622: EMPTY
42623: LIST
42624: LIST
42625: PUSH
42626: LD_INT 1
42628: PUSH
42629: LD_INT 1
42631: NEG
42632: PUSH
42633: EMPTY
42634: LIST
42635: LIST
42636: PUSH
42637: LD_INT 2
42639: PUSH
42640: LD_INT 1
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: LD_INT 2
42649: PUSH
42650: LD_INT 2
42652: PUSH
42653: EMPTY
42654: LIST
42655: LIST
42656: PUSH
42657: LD_INT 1
42659: PUSH
42660: LD_INT 2
42662: PUSH
42663: EMPTY
42664: LIST
42665: LIST
42666: PUSH
42667: LD_INT 0
42669: PUSH
42670: LD_INT 2
42672: PUSH
42673: EMPTY
42674: LIST
42675: LIST
42676: PUSH
42677: LD_INT 1
42679: NEG
42680: PUSH
42681: LD_INT 1
42683: PUSH
42684: EMPTY
42685: LIST
42686: LIST
42687: PUSH
42688: LD_INT 2
42690: NEG
42691: PUSH
42692: LD_INT 1
42694: NEG
42695: PUSH
42696: EMPTY
42697: LIST
42698: LIST
42699: PUSH
42700: LD_INT 2
42702: NEG
42703: PUSH
42704: LD_INT 2
42706: NEG
42707: PUSH
42708: EMPTY
42709: LIST
42710: LIST
42711: PUSH
42712: LD_INT 2
42714: NEG
42715: PUSH
42716: LD_INT 3
42718: NEG
42719: PUSH
42720: EMPTY
42721: LIST
42722: LIST
42723: PUSH
42724: LD_INT 1
42726: NEG
42727: PUSH
42728: LD_INT 3
42730: NEG
42731: PUSH
42732: EMPTY
42733: LIST
42734: LIST
42735: PUSH
42736: LD_INT 0
42738: PUSH
42739: LD_INT 3
42741: NEG
42742: PUSH
42743: EMPTY
42744: LIST
42745: LIST
42746: PUSH
42747: LD_INT 1
42749: PUSH
42750: LD_INT 2
42752: NEG
42753: PUSH
42754: EMPTY
42755: LIST
42756: LIST
42757: PUSH
42758: LD_INT 3
42760: PUSH
42761: LD_INT 2
42763: PUSH
42764: EMPTY
42765: LIST
42766: LIST
42767: PUSH
42768: LD_INT 3
42770: PUSH
42771: LD_INT 3
42773: PUSH
42774: EMPTY
42775: LIST
42776: LIST
42777: PUSH
42778: LD_INT 2
42780: PUSH
42781: LD_INT 3
42783: PUSH
42784: EMPTY
42785: LIST
42786: LIST
42787: PUSH
42788: LD_INT 1
42790: PUSH
42791: LD_INT 3
42793: PUSH
42794: EMPTY
42795: LIST
42796: LIST
42797: PUSH
42798: LD_INT 0
42800: PUSH
42801: LD_INT 3
42803: PUSH
42804: EMPTY
42805: LIST
42806: LIST
42807: PUSH
42808: LD_INT 1
42810: NEG
42811: PUSH
42812: LD_INT 2
42814: PUSH
42815: EMPTY
42816: LIST
42817: LIST
42818: PUSH
42819: LD_INT 3
42821: NEG
42822: PUSH
42823: LD_INT 2
42825: NEG
42826: PUSH
42827: EMPTY
42828: LIST
42829: LIST
42830: PUSH
42831: LD_INT 3
42833: NEG
42834: PUSH
42835: LD_INT 3
42837: NEG
42838: PUSH
42839: EMPTY
42840: LIST
42841: LIST
42842: PUSH
42843: EMPTY
42844: LIST
42845: LIST
42846: LIST
42847: LIST
42848: LIST
42849: LIST
42850: LIST
42851: LIST
42852: LIST
42853: LIST
42854: LIST
42855: LIST
42856: LIST
42857: LIST
42858: LIST
42859: LIST
42860: LIST
42861: LIST
42862: LIST
42863: LIST
42864: LIST
42865: LIST
42866: LIST
42867: LIST
42868: LIST
42869: LIST
42870: LIST
42871: LIST
42872: LIST
42873: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
42874: LD_ADDR_VAR 0 46
42878: PUSH
42879: LD_INT 0
42881: PUSH
42882: LD_INT 0
42884: PUSH
42885: EMPTY
42886: LIST
42887: LIST
42888: PUSH
42889: LD_INT 0
42891: PUSH
42892: LD_INT 1
42894: NEG
42895: PUSH
42896: EMPTY
42897: LIST
42898: LIST
42899: PUSH
42900: LD_INT 1
42902: PUSH
42903: LD_INT 0
42905: PUSH
42906: EMPTY
42907: LIST
42908: LIST
42909: PUSH
42910: LD_INT 1
42912: PUSH
42913: LD_INT 1
42915: PUSH
42916: EMPTY
42917: LIST
42918: LIST
42919: PUSH
42920: LD_INT 0
42922: PUSH
42923: LD_INT 1
42925: PUSH
42926: EMPTY
42927: LIST
42928: LIST
42929: PUSH
42930: LD_INT 1
42932: NEG
42933: PUSH
42934: LD_INT 0
42936: PUSH
42937: EMPTY
42938: LIST
42939: LIST
42940: PUSH
42941: LD_INT 1
42943: NEG
42944: PUSH
42945: LD_INT 1
42947: NEG
42948: PUSH
42949: EMPTY
42950: LIST
42951: LIST
42952: PUSH
42953: LD_INT 1
42955: NEG
42956: PUSH
42957: LD_INT 2
42959: NEG
42960: PUSH
42961: EMPTY
42962: LIST
42963: LIST
42964: PUSH
42965: LD_INT 0
42967: PUSH
42968: LD_INT 2
42970: NEG
42971: PUSH
42972: EMPTY
42973: LIST
42974: LIST
42975: PUSH
42976: LD_INT 1
42978: PUSH
42979: LD_INT 1
42981: NEG
42982: PUSH
42983: EMPTY
42984: LIST
42985: LIST
42986: PUSH
42987: LD_INT 2
42989: PUSH
42990: LD_INT 0
42992: PUSH
42993: EMPTY
42994: LIST
42995: LIST
42996: PUSH
42997: LD_INT 2
42999: PUSH
43000: LD_INT 1
43002: PUSH
43003: EMPTY
43004: LIST
43005: LIST
43006: PUSH
43007: LD_INT 1
43009: PUSH
43010: LD_INT 2
43012: PUSH
43013: EMPTY
43014: LIST
43015: LIST
43016: PUSH
43017: LD_INT 0
43019: PUSH
43020: LD_INT 2
43022: PUSH
43023: EMPTY
43024: LIST
43025: LIST
43026: PUSH
43027: LD_INT 1
43029: NEG
43030: PUSH
43031: LD_INT 1
43033: PUSH
43034: EMPTY
43035: LIST
43036: LIST
43037: PUSH
43038: LD_INT 2
43040: NEG
43041: PUSH
43042: LD_INT 0
43044: PUSH
43045: EMPTY
43046: LIST
43047: LIST
43048: PUSH
43049: LD_INT 2
43051: NEG
43052: PUSH
43053: LD_INT 1
43055: NEG
43056: PUSH
43057: EMPTY
43058: LIST
43059: LIST
43060: PUSH
43061: LD_INT 1
43063: NEG
43064: PUSH
43065: LD_INT 3
43067: NEG
43068: PUSH
43069: EMPTY
43070: LIST
43071: LIST
43072: PUSH
43073: LD_INT 0
43075: PUSH
43076: LD_INT 3
43078: NEG
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: PUSH
43084: LD_INT 1
43086: PUSH
43087: LD_INT 2
43089: NEG
43090: PUSH
43091: EMPTY
43092: LIST
43093: LIST
43094: PUSH
43095: LD_INT 2
43097: PUSH
43098: LD_INT 1
43100: NEG
43101: PUSH
43102: EMPTY
43103: LIST
43104: LIST
43105: PUSH
43106: LD_INT 3
43108: PUSH
43109: LD_INT 0
43111: PUSH
43112: EMPTY
43113: LIST
43114: LIST
43115: PUSH
43116: LD_INT 3
43118: PUSH
43119: LD_INT 1
43121: PUSH
43122: EMPTY
43123: LIST
43124: LIST
43125: PUSH
43126: LD_INT 1
43128: PUSH
43129: LD_INT 3
43131: PUSH
43132: EMPTY
43133: LIST
43134: LIST
43135: PUSH
43136: LD_INT 0
43138: PUSH
43139: LD_INT 3
43141: PUSH
43142: EMPTY
43143: LIST
43144: LIST
43145: PUSH
43146: LD_INT 1
43148: NEG
43149: PUSH
43150: LD_INT 2
43152: PUSH
43153: EMPTY
43154: LIST
43155: LIST
43156: PUSH
43157: LD_INT 2
43159: NEG
43160: PUSH
43161: LD_INT 1
43163: PUSH
43164: EMPTY
43165: LIST
43166: LIST
43167: PUSH
43168: LD_INT 3
43170: NEG
43171: PUSH
43172: LD_INT 0
43174: PUSH
43175: EMPTY
43176: LIST
43177: LIST
43178: PUSH
43179: LD_INT 3
43181: NEG
43182: PUSH
43183: LD_INT 1
43185: NEG
43186: PUSH
43187: EMPTY
43188: LIST
43189: LIST
43190: PUSH
43191: EMPTY
43192: LIST
43193: LIST
43194: LIST
43195: LIST
43196: LIST
43197: LIST
43198: LIST
43199: LIST
43200: LIST
43201: LIST
43202: LIST
43203: LIST
43204: LIST
43205: LIST
43206: LIST
43207: LIST
43208: LIST
43209: LIST
43210: LIST
43211: LIST
43212: LIST
43213: LIST
43214: LIST
43215: LIST
43216: LIST
43217: LIST
43218: LIST
43219: LIST
43220: LIST
43221: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43222: LD_ADDR_VAR 0 47
43226: PUSH
43227: LD_INT 0
43229: PUSH
43230: LD_INT 0
43232: PUSH
43233: EMPTY
43234: LIST
43235: LIST
43236: PUSH
43237: LD_INT 0
43239: PUSH
43240: LD_INT 1
43242: NEG
43243: PUSH
43244: EMPTY
43245: LIST
43246: LIST
43247: PUSH
43248: LD_INT 1
43250: PUSH
43251: LD_INT 0
43253: PUSH
43254: EMPTY
43255: LIST
43256: LIST
43257: PUSH
43258: LD_INT 1
43260: PUSH
43261: LD_INT 1
43263: PUSH
43264: EMPTY
43265: LIST
43266: LIST
43267: PUSH
43268: LD_INT 0
43270: PUSH
43271: LD_INT 1
43273: PUSH
43274: EMPTY
43275: LIST
43276: LIST
43277: PUSH
43278: LD_INT 1
43280: NEG
43281: PUSH
43282: LD_INT 0
43284: PUSH
43285: EMPTY
43286: LIST
43287: LIST
43288: PUSH
43289: LD_INT 1
43291: NEG
43292: PUSH
43293: LD_INT 1
43295: NEG
43296: PUSH
43297: EMPTY
43298: LIST
43299: LIST
43300: PUSH
43301: LD_INT 1
43303: NEG
43304: PUSH
43305: LD_INT 2
43307: NEG
43308: PUSH
43309: EMPTY
43310: LIST
43311: LIST
43312: PUSH
43313: LD_INT 0
43315: PUSH
43316: LD_INT 2
43318: NEG
43319: PUSH
43320: EMPTY
43321: LIST
43322: LIST
43323: PUSH
43324: LD_INT 1
43326: PUSH
43327: LD_INT 1
43329: NEG
43330: PUSH
43331: EMPTY
43332: LIST
43333: LIST
43334: PUSH
43335: LD_INT 2
43337: NEG
43338: PUSH
43339: LD_INT 1
43341: NEG
43342: PUSH
43343: EMPTY
43344: LIST
43345: LIST
43346: PUSH
43347: LD_INT 2
43349: NEG
43350: PUSH
43351: LD_INT 2
43353: NEG
43354: PUSH
43355: EMPTY
43356: LIST
43357: LIST
43358: PUSH
43359: EMPTY
43360: LIST
43361: LIST
43362: LIST
43363: LIST
43364: LIST
43365: LIST
43366: LIST
43367: LIST
43368: LIST
43369: LIST
43370: LIST
43371: LIST
43372: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
43373: LD_ADDR_VAR 0 48
43377: PUSH
43378: LD_INT 0
43380: PUSH
43381: LD_INT 0
43383: PUSH
43384: EMPTY
43385: LIST
43386: LIST
43387: PUSH
43388: LD_INT 0
43390: PUSH
43391: LD_INT 1
43393: NEG
43394: PUSH
43395: EMPTY
43396: LIST
43397: LIST
43398: PUSH
43399: LD_INT 1
43401: PUSH
43402: LD_INT 0
43404: PUSH
43405: EMPTY
43406: LIST
43407: LIST
43408: PUSH
43409: LD_INT 1
43411: PUSH
43412: LD_INT 1
43414: PUSH
43415: EMPTY
43416: LIST
43417: LIST
43418: PUSH
43419: LD_INT 0
43421: PUSH
43422: LD_INT 1
43424: PUSH
43425: EMPTY
43426: LIST
43427: LIST
43428: PUSH
43429: LD_INT 1
43431: NEG
43432: PUSH
43433: LD_INT 0
43435: PUSH
43436: EMPTY
43437: LIST
43438: LIST
43439: PUSH
43440: LD_INT 1
43442: NEG
43443: PUSH
43444: LD_INT 1
43446: NEG
43447: PUSH
43448: EMPTY
43449: LIST
43450: LIST
43451: PUSH
43452: LD_INT 1
43454: NEG
43455: PUSH
43456: LD_INT 2
43458: NEG
43459: PUSH
43460: EMPTY
43461: LIST
43462: LIST
43463: PUSH
43464: LD_INT 0
43466: PUSH
43467: LD_INT 2
43469: NEG
43470: PUSH
43471: EMPTY
43472: LIST
43473: LIST
43474: PUSH
43475: LD_INT 1
43477: PUSH
43478: LD_INT 1
43480: NEG
43481: PUSH
43482: EMPTY
43483: LIST
43484: LIST
43485: PUSH
43486: LD_INT 2
43488: PUSH
43489: LD_INT 0
43491: PUSH
43492: EMPTY
43493: LIST
43494: LIST
43495: PUSH
43496: LD_INT 2
43498: PUSH
43499: LD_INT 1
43501: PUSH
43502: EMPTY
43503: LIST
43504: LIST
43505: PUSH
43506: EMPTY
43507: LIST
43508: LIST
43509: LIST
43510: LIST
43511: LIST
43512: LIST
43513: LIST
43514: LIST
43515: LIST
43516: LIST
43517: LIST
43518: LIST
43519: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
43520: LD_ADDR_VAR 0 49
43524: PUSH
43525: LD_INT 0
43527: PUSH
43528: LD_INT 0
43530: PUSH
43531: EMPTY
43532: LIST
43533: LIST
43534: PUSH
43535: LD_INT 0
43537: PUSH
43538: LD_INT 1
43540: NEG
43541: PUSH
43542: EMPTY
43543: LIST
43544: LIST
43545: PUSH
43546: LD_INT 1
43548: PUSH
43549: LD_INT 0
43551: PUSH
43552: EMPTY
43553: LIST
43554: LIST
43555: PUSH
43556: LD_INT 1
43558: PUSH
43559: LD_INT 1
43561: PUSH
43562: EMPTY
43563: LIST
43564: LIST
43565: PUSH
43566: LD_INT 0
43568: PUSH
43569: LD_INT 1
43571: PUSH
43572: EMPTY
43573: LIST
43574: LIST
43575: PUSH
43576: LD_INT 1
43578: NEG
43579: PUSH
43580: LD_INT 0
43582: PUSH
43583: EMPTY
43584: LIST
43585: LIST
43586: PUSH
43587: LD_INT 1
43589: NEG
43590: PUSH
43591: LD_INT 1
43593: NEG
43594: PUSH
43595: EMPTY
43596: LIST
43597: LIST
43598: PUSH
43599: LD_INT 1
43601: PUSH
43602: LD_INT 1
43604: NEG
43605: PUSH
43606: EMPTY
43607: LIST
43608: LIST
43609: PUSH
43610: LD_INT 2
43612: PUSH
43613: LD_INT 0
43615: PUSH
43616: EMPTY
43617: LIST
43618: LIST
43619: PUSH
43620: LD_INT 2
43622: PUSH
43623: LD_INT 1
43625: PUSH
43626: EMPTY
43627: LIST
43628: LIST
43629: PUSH
43630: LD_INT 2
43632: PUSH
43633: LD_INT 2
43635: PUSH
43636: EMPTY
43637: LIST
43638: LIST
43639: PUSH
43640: LD_INT 1
43642: PUSH
43643: LD_INT 2
43645: PUSH
43646: EMPTY
43647: LIST
43648: LIST
43649: PUSH
43650: EMPTY
43651: LIST
43652: LIST
43653: LIST
43654: LIST
43655: LIST
43656: LIST
43657: LIST
43658: LIST
43659: LIST
43660: LIST
43661: LIST
43662: LIST
43663: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
43664: LD_ADDR_VAR 0 50
43668: PUSH
43669: LD_INT 0
43671: PUSH
43672: LD_INT 0
43674: PUSH
43675: EMPTY
43676: LIST
43677: LIST
43678: PUSH
43679: LD_INT 0
43681: PUSH
43682: LD_INT 1
43684: NEG
43685: PUSH
43686: EMPTY
43687: LIST
43688: LIST
43689: PUSH
43690: LD_INT 1
43692: PUSH
43693: LD_INT 0
43695: PUSH
43696: EMPTY
43697: LIST
43698: LIST
43699: PUSH
43700: LD_INT 1
43702: PUSH
43703: LD_INT 1
43705: PUSH
43706: EMPTY
43707: LIST
43708: LIST
43709: PUSH
43710: LD_INT 0
43712: PUSH
43713: LD_INT 1
43715: PUSH
43716: EMPTY
43717: LIST
43718: LIST
43719: PUSH
43720: LD_INT 1
43722: NEG
43723: PUSH
43724: LD_INT 0
43726: PUSH
43727: EMPTY
43728: LIST
43729: LIST
43730: PUSH
43731: LD_INT 1
43733: NEG
43734: PUSH
43735: LD_INT 1
43737: NEG
43738: PUSH
43739: EMPTY
43740: LIST
43741: LIST
43742: PUSH
43743: LD_INT 2
43745: PUSH
43746: LD_INT 1
43748: PUSH
43749: EMPTY
43750: LIST
43751: LIST
43752: PUSH
43753: LD_INT 2
43755: PUSH
43756: LD_INT 2
43758: PUSH
43759: EMPTY
43760: LIST
43761: LIST
43762: PUSH
43763: LD_INT 1
43765: PUSH
43766: LD_INT 2
43768: PUSH
43769: EMPTY
43770: LIST
43771: LIST
43772: PUSH
43773: LD_INT 0
43775: PUSH
43776: LD_INT 2
43778: PUSH
43779: EMPTY
43780: LIST
43781: LIST
43782: PUSH
43783: LD_INT 1
43785: NEG
43786: PUSH
43787: LD_INT 1
43789: PUSH
43790: EMPTY
43791: LIST
43792: LIST
43793: PUSH
43794: EMPTY
43795: LIST
43796: LIST
43797: LIST
43798: LIST
43799: LIST
43800: LIST
43801: LIST
43802: LIST
43803: LIST
43804: LIST
43805: LIST
43806: LIST
43807: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
43808: LD_ADDR_VAR 0 51
43812: PUSH
43813: LD_INT 0
43815: PUSH
43816: LD_INT 0
43818: PUSH
43819: EMPTY
43820: LIST
43821: LIST
43822: PUSH
43823: LD_INT 0
43825: PUSH
43826: LD_INT 1
43828: NEG
43829: PUSH
43830: EMPTY
43831: LIST
43832: LIST
43833: PUSH
43834: LD_INT 1
43836: PUSH
43837: LD_INT 0
43839: PUSH
43840: EMPTY
43841: LIST
43842: LIST
43843: PUSH
43844: LD_INT 1
43846: PUSH
43847: LD_INT 1
43849: PUSH
43850: EMPTY
43851: LIST
43852: LIST
43853: PUSH
43854: LD_INT 0
43856: PUSH
43857: LD_INT 1
43859: PUSH
43860: EMPTY
43861: LIST
43862: LIST
43863: PUSH
43864: LD_INT 1
43866: NEG
43867: PUSH
43868: LD_INT 0
43870: PUSH
43871: EMPTY
43872: LIST
43873: LIST
43874: PUSH
43875: LD_INT 1
43877: NEG
43878: PUSH
43879: LD_INT 1
43881: NEG
43882: PUSH
43883: EMPTY
43884: LIST
43885: LIST
43886: PUSH
43887: LD_INT 1
43889: PUSH
43890: LD_INT 2
43892: PUSH
43893: EMPTY
43894: LIST
43895: LIST
43896: PUSH
43897: LD_INT 0
43899: PUSH
43900: LD_INT 2
43902: PUSH
43903: EMPTY
43904: LIST
43905: LIST
43906: PUSH
43907: LD_INT 1
43909: NEG
43910: PUSH
43911: LD_INT 1
43913: PUSH
43914: EMPTY
43915: LIST
43916: LIST
43917: PUSH
43918: LD_INT 2
43920: NEG
43921: PUSH
43922: LD_INT 0
43924: PUSH
43925: EMPTY
43926: LIST
43927: LIST
43928: PUSH
43929: LD_INT 2
43931: NEG
43932: PUSH
43933: LD_INT 1
43935: NEG
43936: PUSH
43937: EMPTY
43938: LIST
43939: LIST
43940: PUSH
43941: EMPTY
43942: LIST
43943: LIST
43944: LIST
43945: LIST
43946: LIST
43947: LIST
43948: LIST
43949: LIST
43950: LIST
43951: LIST
43952: LIST
43953: LIST
43954: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
43955: LD_ADDR_VAR 0 52
43959: PUSH
43960: LD_INT 0
43962: PUSH
43963: LD_INT 0
43965: PUSH
43966: EMPTY
43967: LIST
43968: LIST
43969: PUSH
43970: LD_INT 0
43972: PUSH
43973: LD_INT 1
43975: NEG
43976: PUSH
43977: EMPTY
43978: LIST
43979: LIST
43980: PUSH
43981: LD_INT 1
43983: PUSH
43984: LD_INT 0
43986: PUSH
43987: EMPTY
43988: LIST
43989: LIST
43990: PUSH
43991: LD_INT 1
43993: PUSH
43994: LD_INT 1
43996: PUSH
43997: EMPTY
43998: LIST
43999: LIST
44000: PUSH
44001: LD_INT 0
44003: PUSH
44004: LD_INT 1
44006: PUSH
44007: EMPTY
44008: LIST
44009: LIST
44010: PUSH
44011: LD_INT 1
44013: NEG
44014: PUSH
44015: LD_INT 0
44017: PUSH
44018: EMPTY
44019: LIST
44020: LIST
44021: PUSH
44022: LD_INT 1
44024: NEG
44025: PUSH
44026: LD_INT 1
44028: NEG
44029: PUSH
44030: EMPTY
44031: LIST
44032: LIST
44033: PUSH
44034: LD_INT 1
44036: NEG
44037: PUSH
44038: LD_INT 2
44040: NEG
44041: PUSH
44042: EMPTY
44043: LIST
44044: LIST
44045: PUSH
44046: LD_INT 1
44048: NEG
44049: PUSH
44050: LD_INT 1
44052: PUSH
44053: EMPTY
44054: LIST
44055: LIST
44056: PUSH
44057: LD_INT 2
44059: NEG
44060: PUSH
44061: LD_INT 0
44063: PUSH
44064: EMPTY
44065: LIST
44066: LIST
44067: PUSH
44068: LD_INT 2
44070: NEG
44071: PUSH
44072: LD_INT 1
44074: NEG
44075: PUSH
44076: EMPTY
44077: LIST
44078: LIST
44079: PUSH
44080: LD_INT 2
44082: NEG
44083: PUSH
44084: LD_INT 2
44086: NEG
44087: PUSH
44088: EMPTY
44089: LIST
44090: LIST
44091: PUSH
44092: EMPTY
44093: LIST
44094: LIST
44095: LIST
44096: LIST
44097: LIST
44098: LIST
44099: LIST
44100: LIST
44101: LIST
44102: LIST
44103: LIST
44104: LIST
44105: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44106: LD_ADDR_VAR 0 53
44110: PUSH
44111: LD_INT 0
44113: PUSH
44114: LD_INT 0
44116: PUSH
44117: EMPTY
44118: LIST
44119: LIST
44120: PUSH
44121: LD_INT 0
44123: PUSH
44124: LD_INT 1
44126: NEG
44127: PUSH
44128: EMPTY
44129: LIST
44130: LIST
44131: PUSH
44132: LD_INT 1
44134: PUSH
44135: LD_INT 0
44137: PUSH
44138: EMPTY
44139: LIST
44140: LIST
44141: PUSH
44142: LD_INT 1
44144: PUSH
44145: LD_INT 1
44147: PUSH
44148: EMPTY
44149: LIST
44150: LIST
44151: PUSH
44152: LD_INT 0
44154: PUSH
44155: LD_INT 1
44157: PUSH
44158: EMPTY
44159: LIST
44160: LIST
44161: PUSH
44162: LD_INT 1
44164: NEG
44165: PUSH
44166: LD_INT 0
44168: PUSH
44169: EMPTY
44170: LIST
44171: LIST
44172: PUSH
44173: LD_INT 1
44175: NEG
44176: PUSH
44177: LD_INT 1
44179: NEG
44180: PUSH
44181: EMPTY
44182: LIST
44183: LIST
44184: PUSH
44185: LD_INT 1
44187: NEG
44188: PUSH
44189: LD_INT 2
44191: NEG
44192: PUSH
44193: EMPTY
44194: LIST
44195: LIST
44196: PUSH
44197: LD_INT 0
44199: PUSH
44200: LD_INT 2
44202: NEG
44203: PUSH
44204: EMPTY
44205: LIST
44206: LIST
44207: PUSH
44208: LD_INT 1
44210: PUSH
44211: LD_INT 1
44213: NEG
44214: PUSH
44215: EMPTY
44216: LIST
44217: LIST
44218: PUSH
44219: LD_INT 2
44221: PUSH
44222: LD_INT 0
44224: PUSH
44225: EMPTY
44226: LIST
44227: LIST
44228: PUSH
44229: LD_INT 2
44231: PUSH
44232: LD_INT 1
44234: PUSH
44235: EMPTY
44236: LIST
44237: LIST
44238: PUSH
44239: LD_INT 2
44241: PUSH
44242: LD_INT 2
44244: PUSH
44245: EMPTY
44246: LIST
44247: LIST
44248: PUSH
44249: LD_INT 1
44251: PUSH
44252: LD_INT 2
44254: PUSH
44255: EMPTY
44256: LIST
44257: LIST
44258: PUSH
44259: LD_INT 0
44261: PUSH
44262: LD_INT 2
44264: PUSH
44265: EMPTY
44266: LIST
44267: LIST
44268: PUSH
44269: LD_INT 1
44271: NEG
44272: PUSH
44273: LD_INT 1
44275: PUSH
44276: EMPTY
44277: LIST
44278: LIST
44279: PUSH
44280: LD_INT 2
44282: NEG
44283: PUSH
44284: LD_INT 0
44286: PUSH
44287: EMPTY
44288: LIST
44289: LIST
44290: PUSH
44291: LD_INT 2
44293: NEG
44294: PUSH
44295: LD_INT 1
44297: NEG
44298: PUSH
44299: EMPTY
44300: LIST
44301: LIST
44302: PUSH
44303: LD_INT 2
44305: NEG
44306: PUSH
44307: LD_INT 2
44309: NEG
44310: PUSH
44311: EMPTY
44312: LIST
44313: LIST
44314: PUSH
44315: EMPTY
44316: LIST
44317: LIST
44318: LIST
44319: LIST
44320: LIST
44321: LIST
44322: LIST
44323: LIST
44324: LIST
44325: LIST
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: LIST
44332: LIST
44333: LIST
44334: LIST
44335: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44336: LD_ADDR_VAR 0 54
44340: PUSH
44341: LD_INT 0
44343: PUSH
44344: LD_INT 0
44346: PUSH
44347: EMPTY
44348: LIST
44349: LIST
44350: PUSH
44351: LD_INT 0
44353: PUSH
44354: LD_INT 1
44356: NEG
44357: PUSH
44358: EMPTY
44359: LIST
44360: LIST
44361: PUSH
44362: LD_INT 1
44364: PUSH
44365: LD_INT 0
44367: PUSH
44368: EMPTY
44369: LIST
44370: LIST
44371: PUSH
44372: LD_INT 1
44374: PUSH
44375: LD_INT 1
44377: PUSH
44378: EMPTY
44379: LIST
44380: LIST
44381: PUSH
44382: LD_INT 0
44384: PUSH
44385: LD_INT 1
44387: PUSH
44388: EMPTY
44389: LIST
44390: LIST
44391: PUSH
44392: LD_INT 1
44394: NEG
44395: PUSH
44396: LD_INT 0
44398: PUSH
44399: EMPTY
44400: LIST
44401: LIST
44402: PUSH
44403: LD_INT 1
44405: NEG
44406: PUSH
44407: LD_INT 1
44409: NEG
44410: PUSH
44411: EMPTY
44412: LIST
44413: LIST
44414: PUSH
44415: LD_INT 1
44417: NEG
44418: PUSH
44419: LD_INT 2
44421: NEG
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: PUSH
44427: LD_INT 0
44429: PUSH
44430: LD_INT 2
44432: NEG
44433: PUSH
44434: EMPTY
44435: LIST
44436: LIST
44437: PUSH
44438: LD_INT 1
44440: PUSH
44441: LD_INT 1
44443: NEG
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: PUSH
44449: LD_INT 2
44451: PUSH
44452: LD_INT 0
44454: PUSH
44455: EMPTY
44456: LIST
44457: LIST
44458: PUSH
44459: LD_INT 2
44461: PUSH
44462: LD_INT 1
44464: PUSH
44465: EMPTY
44466: LIST
44467: LIST
44468: PUSH
44469: LD_INT 2
44471: PUSH
44472: LD_INT 2
44474: PUSH
44475: EMPTY
44476: LIST
44477: LIST
44478: PUSH
44479: LD_INT 1
44481: PUSH
44482: LD_INT 2
44484: PUSH
44485: EMPTY
44486: LIST
44487: LIST
44488: PUSH
44489: LD_INT 0
44491: PUSH
44492: LD_INT 2
44494: PUSH
44495: EMPTY
44496: LIST
44497: LIST
44498: PUSH
44499: LD_INT 1
44501: NEG
44502: PUSH
44503: LD_INT 1
44505: PUSH
44506: EMPTY
44507: LIST
44508: LIST
44509: PUSH
44510: LD_INT 2
44512: NEG
44513: PUSH
44514: LD_INT 0
44516: PUSH
44517: EMPTY
44518: LIST
44519: LIST
44520: PUSH
44521: LD_INT 2
44523: NEG
44524: PUSH
44525: LD_INT 1
44527: NEG
44528: PUSH
44529: EMPTY
44530: LIST
44531: LIST
44532: PUSH
44533: LD_INT 2
44535: NEG
44536: PUSH
44537: LD_INT 2
44539: NEG
44540: PUSH
44541: EMPTY
44542: LIST
44543: LIST
44544: PUSH
44545: EMPTY
44546: LIST
44547: LIST
44548: LIST
44549: LIST
44550: LIST
44551: LIST
44552: LIST
44553: LIST
44554: LIST
44555: LIST
44556: LIST
44557: LIST
44558: LIST
44559: LIST
44560: LIST
44561: LIST
44562: LIST
44563: LIST
44564: LIST
44565: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44566: LD_ADDR_VAR 0 55
44570: PUSH
44571: LD_INT 0
44573: PUSH
44574: LD_INT 0
44576: PUSH
44577: EMPTY
44578: LIST
44579: LIST
44580: PUSH
44581: LD_INT 0
44583: PUSH
44584: LD_INT 1
44586: NEG
44587: PUSH
44588: EMPTY
44589: LIST
44590: LIST
44591: PUSH
44592: LD_INT 1
44594: PUSH
44595: LD_INT 0
44597: PUSH
44598: EMPTY
44599: LIST
44600: LIST
44601: PUSH
44602: LD_INT 1
44604: PUSH
44605: LD_INT 1
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: PUSH
44612: LD_INT 0
44614: PUSH
44615: LD_INT 1
44617: PUSH
44618: EMPTY
44619: LIST
44620: LIST
44621: PUSH
44622: LD_INT 1
44624: NEG
44625: PUSH
44626: LD_INT 0
44628: PUSH
44629: EMPTY
44630: LIST
44631: LIST
44632: PUSH
44633: LD_INT 1
44635: NEG
44636: PUSH
44637: LD_INT 1
44639: NEG
44640: PUSH
44641: EMPTY
44642: LIST
44643: LIST
44644: PUSH
44645: LD_INT 1
44647: NEG
44648: PUSH
44649: LD_INT 2
44651: NEG
44652: PUSH
44653: EMPTY
44654: LIST
44655: LIST
44656: PUSH
44657: LD_INT 0
44659: PUSH
44660: LD_INT 2
44662: NEG
44663: PUSH
44664: EMPTY
44665: LIST
44666: LIST
44667: PUSH
44668: LD_INT 1
44670: PUSH
44671: LD_INT 1
44673: NEG
44674: PUSH
44675: EMPTY
44676: LIST
44677: LIST
44678: PUSH
44679: LD_INT 2
44681: PUSH
44682: LD_INT 0
44684: PUSH
44685: EMPTY
44686: LIST
44687: LIST
44688: PUSH
44689: LD_INT 2
44691: PUSH
44692: LD_INT 1
44694: PUSH
44695: EMPTY
44696: LIST
44697: LIST
44698: PUSH
44699: LD_INT 2
44701: PUSH
44702: LD_INT 2
44704: PUSH
44705: EMPTY
44706: LIST
44707: LIST
44708: PUSH
44709: LD_INT 1
44711: PUSH
44712: LD_INT 2
44714: PUSH
44715: EMPTY
44716: LIST
44717: LIST
44718: PUSH
44719: LD_INT 0
44721: PUSH
44722: LD_INT 2
44724: PUSH
44725: EMPTY
44726: LIST
44727: LIST
44728: PUSH
44729: LD_INT 1
44731: NEG
44732: PUSH
44733: LD_INT 1
44735: PUSH
44736: EMPTY
44737: LIST
44738: LIST
44739: PUSH
44740: LD_INT 2
44742: NEG
44743: PUSH
44744: LD_INT 0
44746: PUSH
44747: EMPTY
44748: LIST
44749: LIST
44750: PUSH
44751: LD_INT 2
44753: NEG
44754: PUSH
44755: LD_INT 1
44757: NEG
44758: PUSH
44759: EMPTY
44760: LIST
44761: LIST
44762: PUSH
44763: LD_INT 2
44765: NEG
44766: PUSH
44767: LD_INT 2
44769: NEG
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: PUSH
44775: EMPTY
44776: LIST
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: LIST
44783: LIST
44784: LIST
44785: LIST
44786: LIST
44787: LIST
44788: LIST
44789: LIST
44790: LIST
44791: LIST
44792: LIST
44793: LIST
44794: LIST
44795: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
44796: LD_ADDR_VAR 0 56
44800: PUSH
44801: LD_INT 0
44803: PUSH
44804: LD_INT 0
44806: PUSH
44807: EMPTY
44808: LIST
44809: LIST
44810: PUSH
44811: LD_INT 0
44813: PUSH
44814: LD_INT 1
44816: NEG
44817: PUSH
44818: EMPTY
44819: LIST
44820: LIST
44821: PUSH
44822: LD_INT 1
44824: PUSH
44825: LD_INT 0
44827: PUSH
44828: EMPTY
44829: LIST
44830: LIST
44831: PUSH
44832: LD_INT 1
44834: PUSH
44835: LD_INT 1
44837: PUSH
44838: EMPTY
44839: LIST
44840: LIST
44841: PUSH
44842: LD_INT 0
44844: PUSH
44845: LD_INT 1
44847: PUSH
44848: EMPTY
44849: LIST
44850: LIST
44851: PUSH
44852: LD_INT 1
44854: NEG
44855: PUSH
44856: LD_INT 0
44858: PUSH
44859: EMPTY
44860: LIST
44861: LIST
44862: PUSH
44863: LD_INT 1
44865: NEG
44866: PUSH
44867: LD_INT 1
44869: NEG
44870: PUSH
44871: EMPTY
44872: LIST
44873: LIST
44874: PUSH
44875: LD_INT 1
44877: NEG
44878: PUSH
44879: LD_INT 2
44881: NEG
44882: PUSH
44883: EMPTY
44884: LIST
44885: LIST
44886: PUSH
44887: LD_INT 0
44889: PUSH
44890: LD_INT 2
44892: NEG
44893: PUSH
44894: EMPTY
44895: LIST
44896: LIST
44897: PUSH
44898: LD_INT 1
44900: PUSH
44901: LD_INT 1
44903: NEG
44904: PUSH
44905: EMPTY
44906: LIST
44907: LIST
44908: PUSH
44909: LD_INT 2
44911: PUSH
44912: LD_INT 0
44914: PUSH
44915: EMPTY
44916: LIST
44917: LIST
44918: PUSH
44919: LD_INT 2
44921: PUSH
44922: LD_INT 1
44924: PUSH
44925: EMPTY
44926: LIST
44927: LIST
44928: PUSH
44929: LD_INT 2
44931: PUSH
44932: LD_INT 2
44934: PUSH
44935: EMPTY
44936: LIST
44937: LIST
44938: PUSH
44939: LD_INT 1
44941: PUSH
44942: LD_INT 2
44944: PUSH
44945: EMPTY
44946: LIST
44947: LIST
44948: PUSH
44949: LD_INT 0
44951: PUSH
44952: LD_INT 2
44954: PUSH
44955: EMPTY
44956: LIST
44957: LIST
44958: PUSH
44959: LD_INT 1
44961: NEG
44962: PUSH
44963: LD_INT 1
44965: PUSH
44966: EMPTY
44967: LIST
44968: LIST
44969: PUSH
44970: LD_INT 2
44972: NEG
44973: PUSH
44974: LD_INT 0
44976: PUSH
44977: EMPTY
44978: LIST
44979: LIST
44980: PUSH
44981: LD_INT 2
44983: NEG
44984: PUSH
44985: LD_INT 1
44987: NEG
44988: PUSH
44989: EMPTY
44990: LIST
44991: LIST
44992: PUSH
44993: LD_INT 2
44995: NEG
44996: PUSH
44997: LD_INT 2
44999: NEG
45000: PUSH
45001: EMPTY
45002: LIST
45003: LIST
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: LIST
45009: LIST
45010: LIST
45011: LIST
45012: LIST
45013: LIST
45014: LIST
45015: LIST
45016: LIST
45017: LIST
45018: LIST
45019: LIST
45020: LIST
45021: LIST
45022: LIST
45023: LIST
45024: LIST
45025: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45026: LD_ADDR_VAR 0 57
45030: PUSH
45031: LD_INT 0
45033: PUSH
45034: LD_INT 0
45036: PUSH
45037: EMPTY
45038: LIST
45039: LIST
45040: PUSH
45041: LD_INT 0
45043: PUSH
45044: LD_INT 1
45046: NEG
45047: PUSH
45048: EMPTY
45049: LIST
45050: LIST
45051: PUSH
45052: LD_INT 1
45054: PUSH
45055: LD_INT 0
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: PUSH
45062: LD_INT 1
45064: PUSH
45065: LD_INT 1
45067: PUSH
45068: EMPTY
45069: LIST
45070: LIST
45071: PUSH
45072: LD_INT 0
45074: PUSH
45075: LD_INT 1
45077: PUSH
45078: EMPTY
45079: LIST
45080: LIST
45081: PUSH
45082: LD_INT 1
45084: NEG
45085: PUSH
45086: LD_INT 0
45088: PUSH
45089: EMPTY
45090: LIST
45091: LIST
45092: PUSH
45093: LD_INT 1
45095: NEG
45096: PUSH
45097: LD_INT 1
45099: NEG
45100: PUSH
45101: EMPTY
45102: LIST
45103: LIST
45104: PUSH
45105: LD_INT 1
45107: NEG
45108: PUSH
45109: LD_INT 2
45111: NEG
45112: PUSH
45113: EMPTY
45114: LIST
45115: LIST
45116: PUSH
45117: LD_INT 0
45119: PUSH
45120: LD_INT 2
45122: NEG
45123: PUSH
45124: EMPTY
45125: LIST
45126: LIST
45127: PUSH
45128: LD_INT 1
45130: PUSH
45131: LD_INT 1
45133: NEG
45134: PUSH
45135: EMPTY
45136: LIST
45137: LIST
45138: PUSH
45139: LD_INT 2
45141: PUSH
45142: LD_INT 0
45144: PUSH
45145: EMPTY
45146: LIST
45147: LIST
45148: PUSH
45149: LD_INT 2
45151: PUSH
45152: LD_INT 1
45154: PUSH
45155: EMPTY
45156: LIST
45157: LIST
45158: PUSH
45159: LD_INT 2
45161: PUSH
45162: LD_INT 2
45164: PUSH
45165: EMPTY
45166: LIST
45167: LIST
45168: PUSH
45169: LD_INT 1
45171: PUSH
45172: LD_INT 2
45174: PUSH
45175: EMPTY
45176: LIST
45177: LIST
45178: PUSH
45179: LD_INT 0
45181: PUSH
45182: LD_INT 2
45184: PUSH
45185: EMPTY
45186: LIST
45187: LIST
45188: PUSH
45189: LD_INT 1
45191: NEG
45192: PUSH
45193: LD_INT 1
45195: PUSH
45196: EMPTY
45197: LIST
45198: LIST
45199: PUSH
45200: LD_INT 2
45202: NEG
45203: PUSH
45204: LD_INT 0
45206: PUSH
45207: EMPTY
45208: LIST
45209: LIST
45210: PUSH
45211: LD_INT 2
45213: NEG
45214: PUSH
45215: LD_INT 1
45217: NEG
45218: PUSH
45219: EMPTY
45220: LIST
45221: LIST
45222: PUSH
45223: LD_INT 2
45225: NEG
45226: PUSH
45227: LD_INT 2
45229: NEG
45230: PUSH
45231: EMPTY
45232: LIST
45233: LIST
45234: PUSH
45235: EMPTY
45236: LIST
45237: LIST
45238: LIST
45239: LIST
45240: LIST
45241: LIST
45242: LIST
45243: LIST
45244: LIST
45245: LIST
45246: LIST
45247: LIST
45248: LIST
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: LIST
45254: LIST
45255: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
45256: LD_ADDR_VAR 0 58
45260: PUSH
45261: LD_INT 0
45263: PUSH
45264: LD_INT 0
45266: PUSH
45267: EMPTY
45268: LIST
45269: LIST
45270: PUSH
45271: LD_INT 0
45273: PUSH
45274: LD_INT 1
45276: NEG
45277: PUSH
45278: EMPTY
45279: LIST
45280: LIST
45281: PUSH
45282: LD_INT 1
45284: PUSH
45285: LD_INT 0
45287: PUSH
45288: EMPTY
45289: LIST
45290: LIST
45291: PUSH
45292: LD_INT 1
45294: PUSH
45295: LD_INT 1
45297: PUSH
45298: EMPTY
45299: LIST
45300: LIST
45301: PUSH
45302: LD_INT 0
45304: PUSH
45305: LD_INT 1
45307: PUSH
45308: EMPTY
45309: LIST
45310: LIST
45311: PUSH
45312: LD_INT 1
45314: NEG
45315: PUSH
45316: LD_INT 0
45318: PUSH
45319: EMPTY
45320: LIST
45321: LIST
45322: PUSH
45323: LD_INT 1
45325: NEG
45326: PUSH
45327: LD_INT 1
45329: NEG
45330: PUSH
45331: EMPTY
45332: LIST
45333: LIST
45334: PUSH
45335: LD_INT 1
45337: NEG
45338: PUSH
45339: LD_INT 2
45341: NEG
45342: PUSH
45343: EMPTY
45344: LIST
45345: LIST
45346: PUSH
45347: LD_INT 0
45349: PUSH
45350: LD_INT 2
45352: NEG
45353: PUSH
45354: EMPTY
45355: LIST
45356: LIST
45357: PUSH
45358: LD_INT 1
45360: PUSH
45361: LD_INT 1
45363: NEG
45364: PUSH
45365: EMPTY
45366: LIST
45367: LIST
45368: PUSH
45369: LD_INT 2
45371: PUSH
45372: LD_INT 0
45374: PUSH
45375: EMPTY
45376: LIST
45377: LIST
45378: PUSH
45379: LD_INT 2
45381: PUSH
45382: LD_INT 1
45384: PUSH
45385: EMPTY
45386: LIST
45387: LIST
45388: PUSH
45389: LD_INT 2
45391: PUSH
45392: LD_INT 2
45394: PUSH
45395: EMPTY
45396: LIST
45397: LIST
45398: PUSH
45399: LD_INT 1
45401: PUSH
45402: LD_INT 2
45404: PUSH
45405: EMPTY
45406: LIST
45407: LIST
45408: PUSH
45409: LD_INT 0
45411: PUSH
45412: LD_INT 2
45414: PUSH
45415: EMPTY
45416: LIST
45417: LIST
45418: PUSH
45419: LD_INT 1
45421: NEG
45422: PUSH
45423: LD_INT 1
45425: PUSH
45426: EMPTY
45427: LIST
45428: LIST
45429: PUSH
45430: LD_INT 2
45432: NEG
45433: PUSH
45434: LD_INT 0
45436: PUSH
45437: EMPTY
45438: LIST
45439: LIST
45440: PUSH
45441: LD_INT 2
45443: NEG
45444: PUSH
45445: LD_INT 1
45447: NEG
45448: PUSH
45449: EMPTY
45450: LIST
45451: LIST
45452: PUSH
45453: LD_INT 2
45455: NEG
45456: PUSH
45457: LD_INT 2
45459: NEG
45460: PUSH
45461: EMPTY
45462: LIST
45463: LIST
45464: PUSH
45465: EMPTY
45466: LIST
45467: LIST
45468: LIST
45469: LIST
45470: LIST
45471: LIST
45472: LIST
45473: LIST
45474: LIST
45475: LIST
45476: LIST
45477: LIST
45478: LIST
45479: LIST
45480: LIST
45481: LIST
45482: LIST
45483: LIST
45484: LIST
45485: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45486: LD_ADDR_VAR 0 59
45490: PUSH
45491: LD_INT 0
45493: PUSH
45494: LD_INT 0
45496: PUSH
45497: EMPTY
45498: LIST
45499: LIST
45500: PUSH
45501: LD_INT 0
45503: PUSH
45504: LD_INT 1
45506: NEG
45507: PUSH
45508: EMPTY
45509: LIST
45510: LIST
45511: PUSH
45512: LD_INT 1
45514: PUSH
45515: LD_INT 0
45517: PUSH
45518: EMPTY
45519: LIST
45520: LIST
45521: PUSH
45522: LD_INT 1
45524: PUSH
45525: LD_INT 1
45527: PUSH
45528: EMPTY
45529: LIST
45530: LIST
45531: PUSH
45532: LD_INT 0
45534: PUSH
45535: LD_INT 1
45537: PUSH
45538: EMPTY
45539: LIST
45540: LIST
45541: PUSH
45542: LD_INT 1
45544: NEG
45545: PUSH
45546: LD_INT 0
45548: PUSH
45549: EMPTY
45550: LIST
45551: LIST
45552: PUSH
45553: LD_INT 1
45555: NEG
45556: PUSH
45557: LD_INT 1
45559: NEG
45560: PUSH
45561: EMPTY
45562: LIST
45563: LIST
45564: PUSH
45565: EMPTY
45566: LIST
45567: LIST
45568: LIST
45569: LIST
45570: LIST
45571: LIST
45572: LIST
45573: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45574: LD_ADDR_VAR 0 60
45578: PUSH
45579: LD_INT 0
45581: PUSH
45582: LD_INT 0
45584: PUSH
45585: EMPTY
45586: LIST
45587: LIST
45588: PUSH
45589: LD_INT 0
45591: PUSH
45592: LD_INT 1
45594: NEG
45595: PUSH
45596: EMPTY
45597: LIST
45598: LIST
45599: PUSH
45600: LD_INT 1
45602: PUSH
45603: LD_INT 0
45605: PUSH
45606: EMPTY
45607: LIST
45608: LIST
45609: PUSH
45610: LD_INT 1
45612: PUSH
45613: LD_INT 1
45615: PUSH
45616: EMPTY
45617: LIST
45618: LIST
45619: PUSH
45620: LD_INT 0
45622: PUSH
45623: LD_INT 1
45625: PUSH
45626: EMPTY
45627: LIST
45628: LIST
45629: PUSH
45630: LD_INT 1
45632: NEG
45633: PUSH
45634: LD_INT 0
45636: PUSH
45637: EMPTY
45638: LIST
45639: LIST
45640: PUSH
45641: LD_INT 1
45643: NEG
45644: PUSH
45645: LD_INT 1
45647: NEG
45648: PUSH
45649: EMPTY
45650: LIST
45651: LIST
45652: PUSH
45653: EMPTY
45654: LIST
45655: LIST
45656: LIST
45657: LIST
45658: LIST
45659: LIST
45660: LIST
45661: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45662: LD_ADDR_VAR 0 61
45666: PUSH
45667: LD_INT 0
45669: PUSH
45670: LD_INT 0
45672: PUSH
45673: EMPTY
45674: LIST
45675: LIST
45676: PUSH
45677: LD_INT 0
45679: PUSH
45680: LD_INT 1
45682: NEG
45683: PUSH
45684: EMPTY
45685: LIST
45686: LIST
45687: PUSH
45688: LD_INT 1
45690: PUSH
45691: LD_INT 0
45693: PUSH
45694: EMPTY
45695: LIST
45696: LIST
45697: PUSH
45698: LD_INT 1
45700: PUSH
45701: LD_INT 1
45703: PUSH
45704: EMPTY
45705: LIST
45706: LIST
45707: PUSH
45708: LD_INT 0
45710: PUSH
45711: LD_INT 1
45713: PUSH
45714: EMPTY
45715: LIST
45716: LIST
45717: PUSH
45718: LD_INT 1
45720: NEG
45721: PUSH
45722: LD_INT 0
45724: PUSH
45725: EMPTY
45726: LIST
45727: LIST
45728: PUSH
45729: LD_INT 1
45731: NEG
45732: PUSH
45733: LD_INT 1
45735: NEG
45736: PUSH
45737: EMPTY
45738: LIST
45739: LIST
45740: PUSH
45741: EMPTY
45742: LIST
45743: LIST
45744: LIST
45745: LIST
45746: LIST
45747: LIST
45748: LIST
45749: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45750: LD_ADDR_VAR 0 62
45754: PUSH
45755: LD_INT 0
45757: PUSH
45758: LD_INT 0
45760: PUSH
45761: EMPTY
45762: LIST
45763: LIST
45764: PUSH
45765: LD_INT 0
45767: PUSH
45768: LD_INT 1
45770: NEG
45771: PUSH
45772: EMPTY
45773: LIST
45774: LIST
45775: PUSH
45776: LD_INT 1
45778: PUSH
45779: LD_INT 0
45781: PUSH
45782: EMPTY
45783: LIST
45784: LIST
45785: PUSH
45786: LD_INT 1
45788: PUSH
45789: LD_INT 1
45791: PUSH
45792: EMPTY
45793: LIST
45794: LIST
45795: PUSH
45796: LD_INT 0
45798: PUSH
45799: LD_INT 1
45801: PUSH
45802: EMPTY
45803: LIST
45804: LIST
45805: PUSH
45806: LD_INT 1
45808: NEG
45809: PUSH
45810: LD_INT 0
45812: PUSH
45813: EMPTY
45814: LIST
45815: LIST
45816: PUSH
45817: LD_INT 1
45819: NEG
45820: PUSH
45821: LD_INT 1
45823: NEG
45824: PUSH
45825: EMPTY
45826: LIST
45827: LIST
45828: PUSH
45829: EMPTY
45830: LIST
45831: LIST
45832: LIST
45833: LIST
45834: LIST
45835: LIST
45836: LIST
45837: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45838: LD_ADDR_VAR 0 63
45842: PUSH
45843: LD_INT 0
45845: PUSH
45846: LD_INT 0
45848: PUSH
45849: EMPTY
45850: LIST
45851: LIST
45852: PUSH
45853: LD_INT 0
45855: PUSH
45856: LD_INT 1
45858: NEG
45859: PUSH
45860: EMPTY
45861: LIST
45862: LIST
45863: PUSH
45864: LD_INT 1
45866: PUSH
45867: LD_INT 0
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PUSH
45874: LD_INT 1
45876: PUSH
45877: LD_INT 1
45879: PUSH
45880: EMPTY
45881: LIST
45882: LIST
45883: PUSH
45884: LD_INT 0
45886: PUSH
45887: LD_INT 1
45889: PUSH
45890: EMPTY
45891: LIST
45892: LIST
45893: PUSH
45894: LD_INT 1
45896: NEG
45897: PUSH
45898: LD_INT 0
45900: PUSH
45901: EMPTY
45902: LIST
45903: LIST
45904: PUSH
45905: LD_INT 1
45907: NEG
45908: PUSH
45909: LD_INT 1
45911: NEG
45912: PUSH
45913: EMPTY
45914: LIST
45915: LIST
45916: PUSH
45917: EMPTY
45918: LIST
45919: LIST
45920: LIST
45921: LIST
45922: LIST
45923: LIST
45924: LIST
45925: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
45926: LD_ADDR_VAR 0 64
45930: PUSH
45931: LD_INT 0
45933: PUSH
45934: LD_INT 0
45936: PUSH
45937: EMPTY
45938: LIST
45939: LIST
45940: PUSH
45941: LD_INT 0
45943: PUSH
45944: LD_INT 1
45946: NEG
45947: PUSH
45948: EMPTY
45949: LIST
45950: LIST
45951: PUSH
45952: LD_INT 1
45954: PUSH
45955: LD_INT 0
45957: PUSH
45958: EMPTY
45959: LIST
45960: LIST
45961: PUSH
45962: LD_INT 1
45964: PUSH
45965: LD_INT 1
45967: PUSH
45968: EMPTY
45969: LIST
45970: LIST
45971: PUSH
45972: LD_INT 0
45974: PUSH
45975: LD_INT 1
45977: PUSH
45978: EMPTY
45979: LIST
45980: LIST
45981: PUSH
45982: LD_INT 1
45984: NEG
45985: PUSH
45986: LD_INT 0
45988: PUSH
45989: EMPTY
45990: LIST
45991: LIST
45992: PUSH
45993: LD_INT 1
45995: NEG
45996: PUSH
45997: LD_INT 1
45999: NEG
46000: PUSH
46001: EMPTY
46002: LIST
46003: LIST
46004: PUSH
46005: EMPTY
46006: LIST
46007: LIST
46008: LIST
46009: LIST
46010: LIST
46011: LIST
46012: LIST
46013: ST_TO_ADDR
// end ; 1 :
46014: GO 51911
46016: LD_INT 1
46018: DOUBLE
46019: EQUAL
46020: IFTRUE 46024
46022: GO 48647
46024: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46025: LD_ADDR_VAR 0 11
46029: PUSH
46030: LD_INT 1
46032: NEG
46033: PUSH
46034: LD_INT 3
46036: NEG
46037: PUSH
46038: EMPTY
46039: LIST
46040: LIST
46041: PUSH
46042: LD_INT 0
46044: PUSH
46045: LD_INT 3
46047: NEG
46048: PUSH
46049: EMPTY
46050: LIST
46051: LIST
46052: PUSH
46053: LD_INT 1
46055: PUSH
46056: LD_INT 2
46058: NEG
46059: PUSH
46060: EMPTY
46061: LIST
46062: LIST
46063: PUSH
46064: EMPTY
46065: LIST
46066: LIST
46067: LIST
46068: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46069: LD_ADDR_VAR 0 12
46073: PUSH
46074: LD_INT 2
46076: PUSH
46077: LD_INT 1
46079: NEG
46080: PUSH
46081: EMPTY
46082: LIST
46083: LIST
46084: PUSH
46085: LD_INT 3
46087: PUSH
46088: LD_INT 0
46090: PUSH
46091: EMPTY
46092: LIST
46093: LIST
46094: PUSH
46095: LD_INT 3
46097: PUSH
46098: LD_INT 1
46100: PUSH
46101: EMPTY
46102: LIST
46103: LIST
46104: PUSH
46105: EMPTY
46106: LIST
46107: LIST
46108: LIST
46109: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46110: LD_ADDR_VAR 0 13
46114: PUSH
46115: LD_INT 3
46117: PUSH
46118: LD_INT 2
46120: PUSH
46121: EMPTY
46122: LIST
46123: LIST
46124: PUSH
46125: LD_INT 3
46127: PUSH
46128: LD_INT 3
46130: PUSH
46131: EMPTY
46132: LIST
46133: LIST
46134: PUSH
46135: LD_INT 2
46137: PUSH
46138: LD_INT 3
46140: PUSH
46141: EMPTY
46142: LIST
46143: LIST
46144: PUSH
46145: EMPTY
46146: LIST
46147: LIST
46148: LIST
46149: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46150: LD_ADDR_VAR 0 14
46154: PUSH
46155: LD_INT 1
46157: PUSH
46158: LD_INT 3
46160: PUSH
46161: EMPTY
46162: LIST
46163: LIST
46164: PUSH
46165: LD_INT 0
46167: PUSH
46168: LD_INT 3
46170: PUSH
46171: EMPTY
46172: LIST
46173: LIST
46174: PUSH
46175: LD_INT 1
46177: NEG
46178: PUSH
46179: LD_INT 2
46181: PUSH
46182: EMPTY
46183: LIST
46184: LIST
46185: PUSH
46186: EMPTY
46187: LIST
46188: LIST
46189: LIST
46190: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46191: LD_ADDR_VAR 0 15
46195: PUSH
46196: LD_INT 2
46198: NEG
46199: PUSH
46200: LD_INT 1
46202: PUSH
46203: EMPTY
46204: LIST
46205: LIST
46206: PUSH
46207: LD_INT 3
46209: NEG
46210: PUSH
46211: LD_INT 0
46213: PUSH
46214: EMPTY
46215: LIST
46216: LIST
46217: PUSH
46218: LD_INT 3
46220: NEG
46221: PUSH
46222: LD_INT 1
46224: NEG
46225: PUSH
46226: EMPTY
46227: LIST
46228: LIST
46229: PUSH
46230: EMPTY
46231: LIST
46232: LIST
46233: LIST
46234: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46235: LD_ADDR_VAR 0 16
46239: PUSH
46240: LD_INT 2
46242: NEG
46243: PUSH
46244: LD_INT 3
46246: NEG
46247: PUSH
46248: EMPTY
46249: LIST
46250: LIST
46251: PUSH
46252: LD_INT 3
46254: NEG
46255: PUSH
46256: LD_INT 2
46258: NEG
46259: PUSH
46260: EMPTY
46261: LIST
46262: LIST
46263: PUSH
46264: LD_INT 3
46266: NEG
46267: PUSH
46268: LD_INT 3
46270: NEG
46271: PUSH
46272: EMPTY
46273: LIST
46274: LIST
46275: PUSH
46276: EMPTY
46277: LIST
46278: LIST
46279: LIST
46280: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
46281: LD_ADDR_VAR 0 17
46285: PUSH
46286: LD_INT 1
46288: NEG
46289: PUSH
46290: LD_INT 3
46292: NEG
46293: PUSH
46294: EMPTY
46295: LIST
46296: LIST
46297: PUSH
46298: LD_INT 0
46300: PUSH
46301: LD_INT 3
46303: NEG
46304: PUSH
46305: EMPTY
46306: LIST
46307: LIST
46308: PUSH
46309: LD_INT 1
46311: PUSH
46312: LD_INT 2
46314: NEG
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: LIST
46324: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
46325: LD_ADDR_VAR 0 18
46329: PUSH
46330: LD_INT 2
46332: PUSH
46333: LD_INT 1
46335: NEG
46336: PUSH
46337: EMPTY
46338: LIST
46339: LIST
46340: PUSH
46341: LD_INT 3
46343: PUSH
46344: LD_INT 0
46346: PUSH
46347: EMPTY
46348: LIST
46349: LIST
46350: PUSH
46351: LD_INT 3
46353: PUSH
46354: LD_INT 1
46356: PUSH
46357: EMPTY
46358: LIST
46359: LIST
46360: PUSH
46361: EMPTY
46362: LIST
46363: LIST
46364: LIST
46365: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
46366: LD_ADDR_VAR 0 19
46370: PUSH
46371: LD_INT 3
46373: PUSH
46374: LD_INT 2
46376: PUSH
46377: EMPTY
46378: LIST
46379: LIST
46380: PUSH
46381: LD_INT 3
46383: PUSH
46384: LD_INT 3
46386: PUSH
46387: EMPTY
46388: LIST
46389: LIST
46390: PUSH
46391: LD_INT 2
46393: PUSH
46394: LD_INT 3
46396: PUSH
46397: EMPTY
46398: LIST
46399: LIST
46400: PUSH
46401: EMPTY
46402: LIST
46403: LIST
46404: LIST
46405: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
46406: LD_ADDR_VAR 0 20
46410: PUSH
46411: LD_INT 1
46413: PUSH
46414: LD_INT 3
46416: PUSH
46417: EMPTY
46418: LIST
46419: LIST
46420: PUSH
46421: LD_INT 0
46423: PUSH
46424: LD_INT 3
46426: PUSH
46427: EMPTY
46428: LIST
46429: LIST
46430: PUSH
46431: LD_INT 1
46433: NEG
46434: PUSH
46435: LD_INT 2
46437: PUSH
46438: EMPTY
46439: LIST
46440: LIST
46441: PUSH
46442: EMPTY
46443: LIST
46444: LIST
46445: LIST
46446: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
46447: LD_ADDR_VAR 0 21
46451: PUSH
46452: LD_INT 2
46454: NEG
46455: PUSH
46456: LD_INT 1
46458: PUSH
46459: EMPTY
46460: LIST
46461: LIST
46462: PUSH
46463: LD_INT 3
46465: NEG
46466: PUSH
46467: LD_INT 0
46469: PUSH
46470: EMPTY
46471: LIST
46472: LIST
46473: PUSH
46474: LD_INT 3
46476: NEG
46477: PUSH
46478: LD_INT 1
46480: NEG
46481: PUSH
46482: EMPTY
46483: LIST
46484: LIST
46485: PUSH
46486: EMPTY
46487: LIST
46488: LIST
46489: LIST
46490: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
46491: LD_ADDR_VAR 0 22
46495: PUSH
46496: LD_INT 2
46498: NEG
46499: PUSH
46500: LD_INT 3
46502: NEG
46503: PUSH
46504: EMPTY
46505: LIST
46506: LIST
46507: PUSH
46508: LD_INT 3
46510: NEG
46511: PUSH
46512: LD_INT 2
46514: NEG
46515: PUSH
46516: EMPTY
46517: LIST
46518: LIST
46519: PUSH
46520: LD_INT 3
46522: NEG
46523: PUSH
46524: LD_INT 3
46526: NEG
46527: PUSH
46528: EMPTY
46529: LIST
46530: LIST
46531: PUSH
46532: EMPTY
46533: LIST
46534: LIST
46535: LIST
46536: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
46537: LD_ADDR_VAR 0 23
46541: PUSH
46542: LD_INT 0
46544: PUSH
46545: LD_INT 3
46547: NEG
46548: PUSH
46549: EMPTY
46550: LIST
46551: LIST
46552: PUSH
46553: LD_INT 1
46555: NEG
46556: PUSH
46557: LD_INT 4
46559: NEG
46560: PUSH
46561: EMPTY
46562: LIST
46563: LIST
46564: PUSH
46565: LD_INT 1
46567: PUSH
46568: LD_INT 3
46570: NEG
46571: PUSH
46572: EMPTY
46573: LIST
46574: LIST
46575: PUSH
46576: EMPTY
46577: LIST
46578: LIST
46579: LIST
46580: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
46581: LD_ADDR_VAR 0 24
46585: PUSH
46586: LD_INT 3
46588: PUSH
46589: LD_INT 0
46591: PUSH
46592: EMPTY
46593: LIST
46594: LIST
46595: PUSH
46596: LD_INT 3
46598: PUSH
46599: LD_INT 1
46601: NEG
46602: PUSH
46603: EMPTY
46604: LIST
46605: LIST
46606: PUSH
46607: LD_INT 4
46609: PUSH
46610: LD_INT 1
46612: PUSH
46613: EMPTY
46614: LIST
46615: LIST
46616: PUSH
46617: EMPTY
46618: LIST
46619: LIST
46620: LIST
46621: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
46622: LD_ADDR_VAR 0 25
46626: PUSH
46627: LD_INT 3
46629: PUSH
46630: LD_INT 3
46632: PUSH
46633: EMPTY
46634: LIST
46635: LIST
46636: PUSH
46637: LD_INT 4
46639: PUSH
46640: LD_INT 3
46642: PUSH
46643: EMPTY
46644: LIST
46645: LIST
46646: PUSH
46647: LD_INT 3
46649: PUSH
46650: LD_INT 4
46652: PUSH
46653: EMPTY
46654: LIST
46655: LIST
46656: PUSH
46657: EMPTY
46658: LIST
46659: LIST
46660: LIST
46661: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
46662: LD_ADDR_VAR 0 26
46666: PUSH
46667: LD_INT 0
46669: PUSH
46670: LD_INT 3
46672: PUSH
46673: EMPTY
46674: LIST
46675: LIST
46676: PUSH
46677: LD_INT 1
46679: PUSH
46680: LD_INT 4
46682: PUSH
46683: EMPTY
46684: LIST
46685: LIST
46686: PUSH
46687: LD_INT 1
46689: NEG
46690: PUSH
46691: LD_INT 3
46693: PUSH
46694: EMPTY
46695: LIST
46696: LIST
46697: PUSH
46698: EMPTY
46699: LIST
46700: LIST
46701: LIST
46702: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
46703: LD_ADDR_VAR 0 27
46707: PUSH
46708: LD_INT 3
46710: NEG
46711: PUSH
46712: LD_INT 0
46714: PUSH
46715: EMPTY
46716: LIST
46717: LIST
46718: PUSH
46719: LD_INT 3
46721: NEG
46722: PUSH
46723: LD_INT 1
46725: PUSH
46726: EMPTY
46727: LIST
46728: LIST
46729: PUSH
46730: LD_INT 4
46732: NEG
46733: PUSH
46734: LD_INT 1
46736: NEG
46737: PUSH
46738: EMPTY
46739: LIST
46740: LIST
46741: PUSH
46742: EMPTY
46743: LIST
46744: LIST
46745: LIST
46746: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
46747: LD_ADDR_VAR 0 28
46751: PUSH
46752: LD_INT 3
46754: NEG
46755: PUSH
46756: LD_INT 3
46758: NEG
46759: PUSH
46760: EMPTY
46761: LIST
46762: LIST
46763: PUSH
46764: LD_INT 3
46766: NEG
46767: PUSH
46768: LD_INT 4
46770: NEG
46771: PUSH
46772: EMPTY
46773: LIST
46774: LIST
46775: PUSH
46776: LD_INT 4
46778: NEG
46779: PUSH
46780: LD_INT 3
46782: NEG
46783: PUSH
46784: EMPTY
46785: LIST
46786: LIST
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: LIST
46792: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
46793: LD_ADDR_VAR 0 29
46797: PUSH
46798: LD_INT 1
46800: NEG
46801: PUSH
46802: LD_INT 3
46804: NEG
46805: PUSH
46806: EMPTY
46807: LIST
46808: LIST
46809: PUSH
46810: LD_INT 0
46812: PUSH
46813: LD_INT 3
46815: NEG
46816: PUSH
46817: EMPTY
46818: LIST
46819: LIST
46820: PUSH
46821: LD_INT 1
46823: PUSH
46824: LD_INT 2
46826: NEG
46827: PUSH
46828: EMPTY
46829: LIST
46830: LIST
46831: PUSH
46832: LD_INT 1
46834: NEG
46835: PUSH
46836: LD_INT 4
46838: NEG
46839: PUSH
46840: EMPTY
46841: LIST
46842: LIST
46843: PUSH
46844: LD_INT 0
46846: PUSH
46847: LD_INT 4
46849: NEG
46850: PUSH
46851: EMPTY
46852: LIST
46853: LIST
46854: PUSH
46855: LD_INT 1
46857: PUSH
46858: LD_INT 3
46860: NEG
46861: PUSH
46862: EMPTY
46863: LIST
46864: LIST
46865: PUSH
46866: LD_INT 1
46868: NEG
46869: PUSH
46870: LD_INT 5
46872: NEG
46873: PUSH
46874: EMPTY
46875: LIST
46876: LIST
46877: PUSH
46878: LD_INT 0
46880: PUSH
46881: LD_INT 5
46883: NEG
46884: PUSH
46885: EMPTY
46886: LIST
46887: LIST
46888: PUSH
46889: LD_INT 1
46891: PUSH
46892: LD_INT 4
46894: NEG
46895: PUSH
46896: EMPTY
46897: LIST
46898: LIST
46899: PUSH
46900: LD_INT 1
46902: NEG
46903: PUSH
46904: LD_INT 6
46906: NEG
46907: PUSH
46908: EMPTY
46909: LIST
46910: LIST
46911: PUSH
46912: LD_INT 0
46914: PUSH
46915: LD_INT 6
46917: NEG
46918: PUSH
46919: EMPTY
46920: LIST
46921: LIST
46922: PUSH
46923: LD_INT 1
46925: PUSH
46926: LD_INT 5
46928: NEG
46929: PUSH
46930: EMPTY
46931: LIST
46932: LIST
46933: PUSH
46934: EMPTY
46935: LIST
46936: LIST
46937: LIST
46938: LIST
46939: LIST
46940: LIST
46941: LIST
46942: LIST
46943: LIST
46944: LIST
46945: LIST
46946: LIST
46947: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
46948: LD_ADDR_VAR 0 30
46952: PUSH
46953: LD_INT 2
46955: PUSH
46956: LD_INT 1
46958: NEG
46959: PUSH
46960: EMPTY
46961: LIST
46962: LIST
46963: PUSH
46964: LD_INT 3
46966: PUSH
46967: LD_INT 0
46969: PUSH
46970: EMPTY
46971: LIST
46972: LIST
46973: PUSH
46974: LD_INT 3
46976: PUSH
46977: LD_INT 1
46979: PUSH
46980: EMPTY
46981: LIST
46982: LIST
46983: PUSH
46984: LD_INT 3
46986: PUSH
46987: LD_INT 1
46989: NEG
46990: PUSH
46991: EMPTY
46992: LIST
46993: LIST
46994: PUSH
46995: LD_INT 4
46997: PUSH
46998: LD_INT 0
47000: PUSH
47001: EMPTY
47002: LIST
47003: LIST
47004: PUSH
47005: LD_INT 4
47007: PUSH
47008: LD_INT 1
47010: PUSH
47011: EMPTY
47012: LIST
47013: LIST
47014: PUSH
47015: LD_INT 4
47017: PUSH
47018: LD_INT 1
47020: NEG
47021: PUSH
47022: EMPTY
47023: LIST
47024: LIST
47025: PUSH
47026: LD_INT 5
47028: PUSH
47029: LD_INT 0
47031: PUSH
47032: EMPTY
47033: LIST
47034: LIST
47035: PUSH
47036: LD_INT 5
47038: PUSH
47039: LD_INT 1
47041: PUSH
47042: EMPTY
47043: LIST
47044: LIST
47045: PUSH
47046: LD_INT 5
47048: PUSH
47049: LD_INT 1
47051: NEG
47052: PUSH
47053: EMPTY
47054: LIST
47055: LIST
47056: PUSH
47057: LD_INT 6
47059: PUSH
47060: LD_INT 0
47062: PUSH
47063: EMPTY
47064: LIST
47065: LIST
47066: PUSH
47067: LD_INT 6
47069: PUSH
47070: LD_INT 1
47072: PUSH
47073: EMPTY
47074: LIST
47075: LIST
47076: PUSH
47077: EMPTY
47078: LIST
47079: LIST
47080: LIST
47081: LIST
47082: LIST
47083: LIST
47084: LIST
47085: LIST
47086: LIST
47087: LIST
47088: LIST
47089: LIST
47090: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
47091: LD_ADDR_VAR 0 31
47095: PUSH
47096: LD_INT 3
47098: PUSH
47099: LD_INT 2
47101: PUSH
47102: EMPTY
47103: LIST
47104: LIST
47105: PUSH
47106: LD_INT 3
47108: PUSH
47109: LD_INT 3
47111: PUSH
47112: EMPTY
47113: LIST
47114: LIST
47115: PUSH
47116: LD_INT 2
47118: PUSH
47119: LD_INT 3
47121: PUSH
47122: EMPTY
47123: LIST
47124: LIST
47125: PUSH
47126: LD_INT 4
47128: PUSH
47129: LD_INT 3
47131: PUSH
47132: EMPTY
47133: LIST
47134: LIST
47135: PUSH
47136: LD_INT 4
47138: PUSH
47139: LD_INT 4
47141: PUSH
47142: EMPTY
47143: LIST
47144: LIST
47145: PUSH
47146: LD_INT 3
47148: PUSH
47149: LD_INT 4
47151: PUSH
47152: EMPTY
47153: LIST
47154: LIST
47155: PUSH
47156: LD_INT 5
47158: PUSH
47159: LD_INT 4
47161: PUSH
47162: EMPTY
47163: LIST
47164: LIST
47165: PUSH
47166: LD_INT 5
47168: PUSH
47169: LD_INT 5
47171: PUSH
47172: EMPTY
47173: LIST
47174: LIST
47175: PUSH
47176: LD_INT 4
47178: PUSH
47179: LD_INT 5
47181: PUSH
47182: EMPTY
47183: LIST
47184: LIST
47185: PUSH
47186: LD_INT 6
47188: PUSH
47189: LD_INT 5
47191: PUSH
47192: EMPTY
47193: LIST
47194: LIST
47195: PUSH
47196: LD_INT 6
47198: PUSH
47199: LD_INT 6
47201: PUSH
47202: EMPTY
47203: LIST
47204: LIST
47205: PUSH
47206: LD_INT 5
47208: PUSH
47209: LD_INT 6
47211: PUSH
47212: EMPTY
47213: LIST
47214: LIST
47215: PUSH
47216: EMPTY
47217: LIST
47218: LIST
47219: LIST
47220: LIST
47221: LIST
47222: LIST
47223: LIST
47224: LIST
47225: LIST
47226: LIST
47227: LIST
47228: LIST
47229: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
47230: LD_ADDR_VAR 0 32
47234: PUSH
47235: LD_INT 1
47237: PUSH
47238: LD_INT 3
47240: PUSH
47241: EMPTY
47242: LIST
47243: LIST
47244: PUSH
47245: LD_INT 0
47247: PUSH
47248: LD_INT 3
47250: PUSH
47251: EMPTY
47252: LIST
47253: LIST
47254: PUSH
47255: LD_INT 1
47257: NEG
47258: PUSH
47259: LD_INT 2
47261: PUSH
47262: EMPTY
47263: LIST
47264: LIST
47265: PUSH
47266: LD_INT 1
47268: PUSH
47269: LD_INT 4
47271: PUSH
47272: EMPTY
47273: LIST
47274: LIST
47275: PUSH
47276: LD_INT 0
47278: PUSH
47279: LD_INT 4
47281: PUSH
47282: EMPTY
47283: LIST
47284: LIST
47285: PUSH
47286: LD_INT 1
47288: NEG
47289: PUSH
47290: LD_INT 3
47292: PUSH
47293: EMPTY
47294: LIST
47295: LIST
47296: PUSH
47297: LD_INT 1
47299: PUSH
47300: LD_INT 5
47302: PUSH
47303: EMPTY
47304: LIST
47305: LIST
47306: PUSH
47307: LD_INT 0
47309: PUSH
47310: LD_INT 5
47312: PUSH
47313: EMPTY
47314: LIST
47315: LIST
47316: PUSH
47317: LD_INT 1
47319: NEG
47320: PUSH
47321: LD_INT 4
47323: PUSH
47324: EMPTY
47325: LIST
47326: LIST
47327: PUSH
47328: LD_INT 1
47330: PUSH
47331: LD_INT 6
47333: PUSH
47334: EMPTY
47335: LIST
47336: LIST
47337: PUSH
47338: LD_INT 0
47340: PUSH
47341: LD_INT 6
47343: PUSH
47344: EMPTY
47345: LIST
47346: LIST
47347: PUSH
47348: LD_INT 1
47350: NEG
47351: PUSH
47352: LD_INT 5
47354: PUSH
47355: EMPTY
47356: LIST
47357: LIST
47358: PUSH
47359: EMPTY
47360: LIST
47361: LIST
47362: LIST
47363: LIST
47364: LIST
47365: LIST
47366: LIST
47367: LIST
47368: LIST
47369: LIST
47370: LIST
47371: LIST
47372: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
47373: LD_ADDR_VAR 0 33
47377: PUSH
47378: LD_INT 2
47380: NEG
47381: PUSH
47382: LD_INT 1
47384: PUSH
47385: EMPTY
47386: LIST
47387: LIST
47388: PUSH
47389: LD_INT 3
47391: NEG
47392: PUSH
47393: LD_INT 0
47395: PUSH
47396: EMPTY
47397: LIST
47398: LIST
47399: PUSH
47400: LD_INT 3
47402: NEG
47403: PUSH
47404: LD_INT 1
47406: NEG
47407: PUSH
47408: EMPTY
47409: LIST
47410: LIST
47411: PUSH
47412: LD_INT 3
47414: NEG
47415: PUSH
47416: LD_INT 1
47418: PUSH
47419: EMPTY
47420: LIST
47421: LIST
47422: PUSH
47423: LD_INT 4
47425: NEG
47426: PUSH
47427: LD_INT 0
47429: PUSH
47430: EMPTY
47431: LIST
47432: LIST
47433: PUSH
47434: LD_INT 4
47436: NEG
47437: PUSH
47438: LD_INT 1
47440: NEG
47441: PUSH
47442: EMPTY
47443: LIST
47444: LIST
47445: PUSH
47446: LD_INT 4
47448: NEG
47449: PUSH
47450: LD_INT 1
47452: PUSH
47453: EMPTY
47454: LIST
47455: LIST
47456: PUSH
47457: LD_INT 5
47459: NEG
47460: PUSH
47461: LD_INT 0
47463: PUSH
47464: EMPTY
47465: LIST
47466: LIST
47467: PUSH
47468: LD_INT 5
47470: NEG
47471: PUSH
47472: LD_INT 1
47474: NEG
47475: PUSH
47476: EMPTY
47477: LIST
47478: LIST
47479: PUSH
47480: LD_INT 5
47482: NEG
47483: PUSH
47484: LD_INT 1
47486: PUSH
47487: EMPTY
47488: LIST
47489: LIST
47490: PUSH
47491: LD_INT 6
47493: NEG
47494: PUSH
47495: LD_INT 0
47497: PUSH
47498: EMPTY
47499: LIST
47500: LIST
47501: PUSH
47502: LD_INT 6
47504: NEG
47505: PUSH
47506: LD_INT 1
47508: NEG
47509: PUSH
47510: EMPTY
47511: LIST
47512: LIST
47513: PUSH
47514: EMPTY
47515: LIST
47516: LIST
47517: LIST
47518: LIST
47519: LIST
47520: LIST
47521: LIST
47522: LIST
47523: LIST
47524: LIST
47525: LIST
47526: LIST
47527: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
47528: LD_ADDR_VAR 0 34
47532: PUSH
47533: LD_INT 2
47535: NEG
47536: PUSH
47537: LD_INT 3
47539: NEG
47540: PUSH
47541: EMPTY
47542: LIST
47543: LIST
47544: PUSH
47545: LD_INT 3
47547: NEG
47548: PUSH
47549: LD_INT 2
47551: NEG
47552: PUSH
47553: EMPTY
47554: LIST
47555: LIST
47556: PUSH
47557: LD_INT 3
47559: NEG
47560: PUSH
47561: LD_INT 3
47563: NEG
47564: PUSH
47565: EMPTY
47566: LIST
47567: LIST
47568: PUSH
47569: LD_INT 3
47571: NEG
47572: PUSH
47573: LD_INT 4
47575: NEG
47576: PUSH
47577: EMPTY
47578: LIST
47579: LIST
47580: PUSH
47581: LD_INT 4
47583: NEG
47584: PUSH
47585: LD_INT 3
47587: NEG
47588: PUSH
47589: EMPTY
47590: LIST
47591: LIST
47592: PUSH
47593: LD_INT 4
47595: NEG
47596: PUSH
47597: LD_INT 4
47599: NEG
47600: PUSH
47601: EMPTY
47602: LIST
47603: LIST
47604: PUSH
47605: LD_INT 4
47607: NEG
47608: PUSH
47609: LD_INT 5
47611: NEG
47612: PUSH
47613: EMPTY
47614: LIST
47615: LIST
47616: PUSH
47617: LD_INT 5
47619: NEG
47620: PUSH
47621: LD_INT 4
47623: NEG
47624: PUSH
47625: EMPTY
47626: LIST
47627: LIST
47628: PUSH
47629: LD_INT 5
47631: NEG
47632: PUSH
47633: LD_INT 5
47635: NEG
47636: PUSH
47637: EMPTY
47638: LIST
47639: LIST
47640: PUSH
47641: LD_INT 5
47643: NEG
47644: PUSH
47645: LD_INT 6
47647: NEG
47648: PUSH
47649: EMPTY
47650: LIST
47651: LIST
47652: PUSH
47653: LD_INT 6
47655: NEG
47656: PUSH
47657: LD_INT 5
47659: NEG
47660: PUSH
47661: EMPTY
47662: LIST
47663: LIST
47664: PUSH
47665: LD_INT 6
47667: NEG
47668: PUSH
47669: LD_INT 6
47671: NEG
47672: PUSH
47673: EMPTY
47674: LIST
47675: LIST
47676: PUSH
47677: EMPTY
47678: LIST
47679: LIST
47680: LIST
47681: LIST
47682: LIST
47683: LIST
47684: LIST
47685: LIST
47686: LIST
47687: LIST
47688: LIST
47689: LIST
47690: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
47691: LD_ADDR_VAR 0 41
47695: PUSH
47696: LD_INT 0
47698: PUSH
47699: LD_INT 2
47701: NEG
47702: PUSH
47703: EMPTY
47704: LIST
47705: LIST
47706: PUSH
47707: LD_INT 1
47709: NEG
47710: PUSH
47711: LD_INT 3
47713: NEG
47714: PUSH
47715: EMPTY
47716: LIST
47717: LIST
47718: PUSH
47719: LD_INT 1
47721: PUSH
47722: LD_INT 2
47724: NEG
47725: PUSH
47726: EMPTY
47727: LIST
47728: LIST
47729: PUSH
47730: EMPTY
47731: LIST
47732: LIST
47733: LIST
47734: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
47735: LD_ADDR_VAR 0 42
47739: PUSH
47740: LD_INT 2
47742: PUSH
47743: LD_INT 0
47745: PUSH
47746: EMPTY
47747: LIST
47748: LIST
47749: PUSH
47750: LD_INT 2
47752: PUSH
47753: LD_INT 1
47755: NEG
47756: PUSH
47757: EMPTY
47758: LIST
47759: LIST
47760: PUSH
47761: LD_INT 3
47763: PUSH
47764: LD_INT 1
47766: PUSH
47767: EMPTY
47768: LIST
47769: LIST
47770: PUSH
47771: EMPTY
47772: LIST
47773: LIST
47774: LIST
47775: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
47776: LD_ADDR_VAR 0 43
47780: PUSH
47781: LD_INT 2
47783: PUSH
47784: LD_INT 2
47786: PUSH
47787: EMPTY
47788: LIST
47789: LIST
47790: PUSH
47791: LD_INT 3
47793: PUSH
47794: LD_INT 2
47796: PUSH
47797: EMPTY
47798: LIST
47799: LIST
47800: PUSH
47801: LD_INT 2
47803: PUSH
47804: LD_INT 3
47806: PUSH
47807: EMPTY
47808: LIST
47809: LIST
47810: PUSH
47811: EMPTY
47812: LIST
47813: LIST
47814: LIST
47815: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
47816: LD_ADDR_VAR 0 44
47820: PUSH
47821: LD_INT 0
47823: PUSH
47824: LD_INT 2
47826: PUSH
47827: EMPTY
47828: LIST
47829: LIST
47830: PUSH
47831: LD_INT 1
47833: PUSH
47834: LD_INT 3
47836: PUSH
47837: EMPTY
47838: LIST
47839: LIST
47840: PUSH
47841: LD_INT 1
47843: NEG
47844: PUSH
47845: LD_INT 2
47847: PUSH
47848: EMPTY
47849: LIST
47850: LIST
47851: PUSH
47852: EMPTY
47853: LIST
47854: LIST
47855: LIST
47856: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
47857: LD_ADDR_VAR 0 45
47861: PUSH
47862: LD_INT 2
47864: NEG
47865: PUSH
47866: LD_INT 0
47868: PUSH
47869: EMPTY
47870: LIST
47871: LIST
47872: PUSH
47873: LD_INT 2
47875: NEG
47876: PUSH
47877: LD_INT 1
47879: PUSH
47880: EMPTY
47881: LIST
47882: LIST
47883: PUSH
47884: LD_INT 3
47886: NEG
47887: PUSH
47888: LD_INT 1
47890: NEG
47891: PUSH
47892: EMPTY
47893: LIST
47894: LIST
47895: PUSH
47896: EMPTY
47897: LIST
47898: LIST
47899: LIST
47900: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
47901: LD_ADDR_VAR 0 46
47905: PUSH
47906: LD_INT 2
47908: NEG
47909: PUSH
47910: LD_INT 2
47912: NEG
47913: PUSH
47914: EMPTY
47915: LIST
47916: LIST
47917: PUSH
47918: LD_INT 2
47920: NEG
47921: PUSH
47922: LD_INT 3
47924: NEG
47925: PUSH
47926: EMPTY
47927: LIST
47928: LIST
47929: PUSH
47930: LD_INT 3
47932: NEG
47933: PUSH
47934: LD_INT 2
47936: NEG
47937: PUSH
47938: EMPTY
47939: LIST
47940: LIST
47941: PUSH
47942: EMPTY
47943: LIST
47944: LIST
47945: LIST
47946: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
47947: LD_ADDR_VAR 0 47
47951: PUSH
47952: LD_INT 2
47954: NEG
47955: PUSH
47956: LD_INT 3
47958: NEG
47959: PUSH
47960: EMPTY
47961: LIST
47962: LIST
47963: PUSH
47964: LD_INT 1
47966: NEG
47967: PUSH
47968: LD_INT 3
47970: NEG
47971: PUSH
47972: EMPTY
47973: LIST
47974: LIST
47975: PUSH
47976: EMPTY
47977: LIST
47978: LIST
47979: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
47980: LD_ADDR_VAR 0 48
47984: PUSH
47985: LD_INT 1
47987: PUSH
47988: LD_INT 2
47990: NEG
47991: PUSH
47992: EMPTY
47993: LIST
47994: LIST
47995: PUSH
47996: LD_INT 2
47998: PUSH
47999: LD_INT 1
48001: NEG
48002: PUSH
48003: EMPTY
48004: LIST
48005: LIST
48006: PUSH
48007: EMPTY
48008: LIST
48009: LIST
48010: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
48011: LD_ADDR_VAR 0 49
48015: PUSH
48016: LD_INT 3
48018: PUSH
48019: LD_INT 1
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 3
48028: PUSH
48029: LD_INT 2
48031: PUSH
48032: EMPTY
48033: LIST
48034: LIST
48035: PUSH
48036: EMPTY
48037: LIST
48038: LIST
48039: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
48040: LD_ADDR_VAR 0 50
48044: PUSH
48045: LD_INT 2
48047: PUSH
48048: LD_INT 3
48050: PUSH
48051: EMPTY
48052: LIST
48053: LIST
48054: PUSH
48055: LD_INT 1
48057: PUSH
48058: LD_INT 3
48060: PUSH
48061: EMPTY
48062: LIST
48063: LIST
48064: PUSH
48065: EMPTY
48066: LIST
48067: LIST
48068: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
48069: LD_ADDR_VAR 0 51
48073: PUSH
48074: LD_INT 1
48076: NEG
48077: PUSH
48078: LD_INT 2
48080: PUSH
48081: EMPTY
48082: LIST
48083: LIST
48084: PUSH
48085: LD_INT 2
48087: NEG
48088: PUSH
48089: LD_INT 1
48091: PUSH
48092: EMPTY
48093: LIST
48094: LIST
48095: PUSH
48096: EMPTY
48097: LIST
48098: LIST
48099: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
48100: LD_ADDR_VAR 0 52
48104: PUSH
48105: LD_INT 3
48107: NEG
48108: PUSH
48109: LD_INT 1
48111: NEG
48112: PUSH
48113: EMPTY
48114: LIST
48115: LIST
48116: PUSH
48117: LD_INT 3
48119: NEG
48120: PUSH
48121: LD_INT 2
48123: NEG
48124: PUSH
48125: EMPTY
48126: LIST
48127: LIST
48128: PUSH
48129: EMPTY
48130: LIST
48131: LIST
48132: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
48133: LD_ADDR_VAR 0 53
48137: PUSH
48138: LD_INT 1
48140: NEG
48141: PUSH
48142: LD_INT 3
48144: NEG
48145: PUSH
48146: EMPTY
48147: LIST
48148: LIST
48149: PUSH
48150: LD_INT 0
48152: PUSH
48153: LD_INT 3
48155: NEG
48156: PUSH
48157: EMPTY
48158: LIST
48159: LIST
48160: PUSH
48161: LD_INT 1
48163: PUSH
48164: LD_INT 2
48166: NEG
48167: PUSH
48168: EMPTY
48169: LIST
48170: LIST
48171: PUSH
48172: EMPTY
48173: LIST
48174: LIST
48175: LIST
48176: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
48177: LD_ADDR_VAR 0 54
48181: PUSH
48182: LD_INT 2
48184: PUSH
48185: LD_INT 1
48187: NEG
48188: PUSH
48189: EMPTY
48190: LIST
48191: LIST
48192: PUSH
48193: LD_INT 3
48195: PUSH
48196: LD_INT 0
48198: PUSH
48199: EMPTY
48200: LIST
48201: LIST
48202: PUSH
48203: LD_INT 3
48205: PUSH
48206: LD_INT 1
48208: PUSH
48209: EMPTY
48210: LIST
48211: LIST
48212: PUSH
48213: EMPTY
48214: LIST
48215: LIST
48216: LIST
48217: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
48218: LD_ADDR_VAR 0 55
48222: PUSH
48223: LD_INT 3
48225: PUSH
48226: LD_INT 2
48228: PUSH
48229: EMPTY
48230: LIST
48231: LIST
48232: PUSH
48233: LD_INT 3
48235: PUSH
48236: LD_INT 3
48238: PUSH
48239: EMPTY
48240: LIST
48241: LIST
48242: PUSH
48243: LD_INT 2
48245: PUSH
48246: LD_INT 3
48248: PUSH
48249: EMPTY
48250: LIST
48251: LIST
48252: PUSH
48253: EMPTY
48254: LIST
48255: LIST
48256: LIST
48257: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
48258: LD_ADDR_VAR 0 56
48262: PUSH
48263: LD_INT 1
48265: PUSH
48266: LD_INT 3
48268: PUSH
48269: EMPTY
48270: LIST
48271: LIST
48272: PUSH
48273: LD_INT 0
48275: PUSH
48276: LD_INT 3
48278: PUSH
48279: EMPTY
48280: LIST
48281: LIST
48282: PUSH
48283: LD_INT 1
48285: NEG
48286: PUSH
48287: LD_INT 2
48289: PUSH
48290: EMPTY
48291: LIST
48292: LIST
48293: PUSH
48294: EMPTY
48295: LIST
48296: LIST
48297: LIST
48298: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
48299: LD_ADDR_VAR 0 57
48303: PUSH
48304: LD_INT 2
48306: NEG
48307: PUSH
48308: LD_INT 1
48310: PUSH
48311: EMPTY
48312: LIST
48313: LIST
48314: PUSH
48315: LD_INT 3
48317: NEG
48318: PUSH
48319: LD_INT 0
48321: PUSH
48322: EMPTY
48323: LIST
48324: LIST
48325: PUSH
48326: LD_INT 3
48328: NEG
48329: PUSH
48330: LD_INT 1
48332: NEG
48333: PUSH
48334: EMPTY
48335: LIST
48336: LIST
48337: PUSH
48338: EMPTY
48339: LIST
48340: LIST
48341: LIST
48342: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
48343: LD_ADDR_VAR 0 58
48347: PUSH
48348: LD_INT 2
48350: NEG
48351: PUSH
48352: LD_INT 3
48354: NEG
48355: PUSH
48356: EMPTY
48357: LIST
48358: LIST
48359: PUSH
48360: LD_INT 3
48362: NEG
48363: PUSH
48364: LD_INT 2
48366: NEG
48367: PUSH
48368: EMPTY
48369: LIST
48370: LIST
48371: PUSH
48372: LD_INT 3
48374: NEG
48375: PUSH
48376: LD_INT 3
48378: NEG
48379: PUSH
48380: EMPTY
48381: LIST
48382: LIST
48383: PUSH
48384: EMPTY
48385: LIST
48386: LIST
48387: LIST
48388: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
48389: LD_ADDR_VAR 0 59
48393: PUSH
48394: LD_INT 1
48396: NEG
48397: PUSH
48398: LD_INT 2
48400: NEG
48401: PUSH
48402: EMPTY
48403: LIST
48404: LIST
48405: PUSH
48406: LD_INT 0
48408: PUSH
48409: LD_INT 2
48411: NEG
48412: PUSH
48413: EMPTY
48414: LIST
48415: LIST
48416: PUSH
48417: LD_INT 1
48419: PUSH
48420: LD_INT 1
48422: NEG
48423: PUSH
48424: EMPTY
48425: LIST
48426: LIST
48427: PUSH
48428: EMPTY
48429: LIST
48430: LIST
48431: LIST
48432: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
48433: LD_ADDR_VAR 0 60
48437: PUSH
48438: LD_INT 1
48440: PUSH
48441: LD_INT 1
48443: NEG
48444: PUSH
48445: EMPTY
48446: LIST
48447: LIST
48448: PUSH
48449: LD_INT 2
48451: PUSH
48452: LD_INT 0
48454: PUSH
48455: EMPTY
48456: LIST
48457: LIST
48458: PUSH
48459: LD_INT 2
48461: PUSH
48462: LD_INT 1
48464: PUSH
48465: EMPTY
48466: LIST
48467: LIST
48468: PUSH
48469: EMPTY
48470: LIST
48471: LIST
48472: LIST
48473: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
48474: LD_ADDR_VAR 0 61
48478: PUSH
48479: LD_INT 2
48481: PUSH
48482: LD_INT 1
48484: PUSH
48485: EMPTY
48486: LIST
48487: LIST
48488: PUSH
48489: LD_INT 2
48491: PUSH
48492: LD_INT 2
48494: PUSH
48495: EMPTY
48496: LIST
48497: LIST
48498: PUSH
48499: LD_INT 1
48501: PUSH
48502: LD_INT 2
48504: PUSH
48505: EMPTY
48506: LIST
48507: LIST
48508: PUSH
48509: EMPTY
48510: LIST
48511: LIST
48512: LIST
48513: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
48514: LD_ADDR_VAR 0 62
48518: PUSH
48519: LD_INT 1
48521: PUSH
48522: LD_INT 2
48524: PUSH
48525: EMPTY
48526: LIST
48527: LIST
48528: PUSH
48529: LD_INT 0
48531: PUSH
48532: LD_INT 2
48534: PUSH
48535: EMPTY
48536: LIST
48537: LIST
48538: PUSH
48539: LD_INT 1
48541: NEG
48542: PUSH
48543: LD_INT 1
48545: PUSH
48546: EMPTY
48547: LIST
48548: LIST
48549: PUSH
48550: EMPTY
48551: LIST
48552: LIST
48553: LIST
48554: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
48555: LD_ADDR_VAR 0 63
48559: PUSH
48560: LD_INT 1
48562: NEG
48563: PUSH
48564: LD_INT 1
48566: PUSH
48567: EMPTY
48568: LIST
48569: LIST
48570: PUSH
48571: LD_INT 2
48573: NEG
48574: PUSH
48575: LD_INT 0
48577: PUSH
48578: EMPTY
48579: LIST
48580: LIST
48581: PUSH
48582: LD_INT 2
48584: NEG
48585: PUSH
48586: LD_INT 1
48588: NEG
48589: PUSH
48590: EMPTY
48591: LIST
48592: LIST
48593: PUSH
48594: EMPTY
48595: LIST
48596: LIST
48597: LIST
48598: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
48599: LD_ADDR_VAR 0 64
48603: PUSH
48604: LD_INT 1
48606: NEG
48607: PUSH
48608: LD_INT 2
48610: NEG
48611: PUSH
48612: EMPTY
48613: LIST
48614: LIST
48615: PUSH
48616: LD_INT 2
48618: NEG
48619: PUSH
48620: LD_INT 1
48622: NEG
48623: PUSH
48624: EMPTY
48625: LIST
48626: LIST
48627: PUSH
48628: LD_INT 2
48630: NEG
48631: PUSH
48632: LD_INT 2
48634: NEG
48635: PUSH
48636: EMPTY
48637: LIST
48638: LIST
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: LIST
48644: ST_TO_ADDR
// end ; 2 :
48645: GO 51911
48647: LD_INT 2
48649: DOUBLE
48650: EQUAL
48651: IFTRUE 48655
48653: GO 51910
48655: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
48656: LD_ADDR_VAR 0 29
48660: PUSH
48661: LD_INT 4
48663: PUSH
48664: LD_INT 0
48666: PUSH
48667: EMPTY
48668: LIST
48669: LIST
48670: PUSH
48671: LD_INT 4
48673: PUSH
48674: LD_INT 1
48676: NEG
48677: PUSH
48678: EMPTY
48679: LIST
48680: LIST
48681: PUSH
48682: LD_INT 5
48684: PUSH
48685: LD_INT 0
48687: PUSH
48688: EMPTY
48689: LIST
48690: LIST
48691: PUSH
48692: LD_INT 5
48694: PUSH
48695: LD_INT 1
48697: PUSH
48698: EMPTY
48699: LIST
48700: LIST
48701: PUSH
48702: LD_INT 4
48704: PUSH
48705: LD_INT 1
48707: PUSH
48708: EMPTY
48709: LIST
48710: LIST
48711: PUSH
48712: LD_INT 3
48714: PUSH
48715: LD_INT 0
48717: PUSH
48718: EMPTY
48719: LIST
48720: LIST
48721: PUSH
48722: LD_INT 3
48724: PUSH
48725: LD_INT 1
48727: NEG
48728: PUSH
48729: EMPTY
48730: LIST
48731: LIST
48732: PUSH
48733: LD_INT 3
48735: PUSH
48736: LD_INT 2
48738: NEG
48739: PUSH
48740: EMPTY
48741: LIST
48742: LIST
48743: PUSH
48744: LD_INT 5
48746: PUSH
48747: LD_INT 2
48749: PUSH
48750: EMPTY
48751: LIST
48752: LIST
48753: PUSH
48754: LD_INT 3
48756: PUSH
48757: LD_INT 3
48759: PUSH
48760: EMPTY
48761: LIST
48762: LIST
48763: PUSH
48764: LD_INT 3
48766: PUSH
48767: LD_INT 2
48769: PUSH
48770: EMPTY
48771: LIST
48772: LIST
48773: PUSH
48774: LD_INT 4
48776: PUSH
48777: LD_INT 3
48779: PUSH
48780: EMPTY
48781: LIST
48782: LIST
48783: PUSH
48784: LD_INT 4
48786: PUSH
48787: LD_INT 4
48789: PUSH
48790: EMPTY
48791: LIST
48792: LIST
48793: PUSH
48794: LD_INT 3
48796: PUSH
48797: LD_INT 4
48799: PUSH
48800: EMPTY
48801: LIST
48802: LIST
48803: PUSH
48804: LD_INT 2
48806: PUSH
48807: LD_INT 3
48809: PUSH
48810: EMPTY
48811: LIST
48812: LIST
48813: PUSH
48814: LD_INT 2
48816: PUSH
48817: LD_INT 2
48819: PUSH
48820: EMPTY
48821: LIST
48822: LIST
48823: PUSH
48824: LD_INT 4
48826: PUSH
48827: LD_INT 2
48829: PUSH
48830: EMPTY
48831: LIST
48832: LIST
48833: PUSH
48834: LD_INT 2
48836: PUSH
48837: LD_INT 4
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: PUSH
48844: LD_INT 0
48846: PUSH
48847: LD_INT 4
48849: PUSH
48850: EMPTY
48851: LIST
48852: LIST
48853: PUSH
48854: LD_INT 0
48856: PUSH
48857: LD_INT 3
48859: PUSH
48860: EMPTY
48861: LIST
48862: LIST
48863: PUSH
48864: LD_INT 1
48866: PUSH
48867: LD_INT 4
48869: PUSH
48870: EMPTY
48871: LIST
48872: LIST
48873: PUSH
48874: LD_INT 1
48876: PUSH
48877: LD_INT 5
48879: PUSH
48880: EMPTY
48881: LIST
48882: LIST
48883: PUSH
48884: LD_INT 0
48886: PUSH
48887: LD_INT 5
48889: PUSH
48890: EMPTY
48891: LIST
48892: LIST
48893: PUSH
48894: LD_INT 1
48896: NEG
48897: PUSH
48898: LD_INT 4
48900: PUSH
48901: EMPTY
48902: LIST
48903: LIST
48904: PUSH
48905: LD_INT 1
48907: NEG
48908: PUSH
48909: LD_INT 3
48911: PUSH
48912: EMPTY
48913: LIST
48914: LIST
48915: PUSH
48916: LD_INT 2
48918: PUSH
48919: LD_INT 5
48921: PUSH
48922: EMPTY
48923: LIST
48924: LIST
48925: PUSH
48926: LD_INT 2
48928: NEG
48929: PUSH
48930: LD_INT 3
48932: PUSH
48933: EMPTY
48934: LIST
48935: LIST
48936: PUSH
48937: LD_INT 3
48939: NEG
48940: PUSH
48941: LD_INT 0
48943: PUSH
48944: EMPTY
48945: LIST
48946: LIST
48947: PUSH
48948: LD_INT 3
48950: NEG
48951: PUSH
48952: LD_INT 1
48954: NEG
48955: PUSH
48956: EMPTY
48957: LIST
48958: LIST
48959: PUSH
48960: LD_INT 2
48962: NEG
48963: PUSH
48964: LD_INT 0
48966: PUSH
48967: EMPTY
48968: LIST
48969: LIST
48970: PUSH
48971: LD_INT 2
48973: NEG
48974: PUSH
48975: LD_INT 1
48977: PUSH
48978: EMPTY
48979: LIST
48980: LIST
48981: PUSH
48982: LD_INT 3
48984: NEG
48985: PUSH
48986: LD_INT 1
48988: PUSH
48989: EMPTY
48990: LIST
48991: LIST
48992: PUSH
48993: LD_INT 4
48995: NEG
48996: PUSH
48997: LD_INT 0
48999: PUSH
49000: EMPTY
49001: LIST
49002: LIST
49003: PUSH
49004: LD_INT 4
49006: NEG
49007: PUSH
49008: LD_INT 1
49010: NEG
49011: PUSH
49012: EMPTY
49013: LIST
49014: LIST
49015: PUSH
49016: LD_INT 4
49018: NEG
49019: PUSH
49020: LD_INT 2
49022: NEG
49023: PUSH
49024: EMPTY
49025: LIST
49026: LIST
49027: PUSH
49028: LD_INT 2
49030: NEG
49031: PUSH
49032: LD_INT 2
49034: PUSH
49035: EMPTY
49036: LIST
49037: LIST
49038: PUSH
49039: LD_INT 4
49041: NEG
49042: PUSH
49043: LD_INT 4
49045: NEG
49046: PUSH
49047: EMPTY
49048: LIST
49049: LIST
49050: PUSH
49051: LD_INT 4
49053: NEG
49054: PUSH
49055: LD_INT 5
49057: NEG
49058: PUSH
49059: EMPTY
49060: LIST
49061: LIST
49062: PUSH
49063: LD_INT 3
49065: NEG
49066: PUSH
49067: LD_INT 4
49069: NEG
49070: PUSH
49071: EMPTY
49072: LIST
49073: LIST
49074: PUSH
49075: LD_INT 3
49077: NEG
49078: PUSH
49079: LD_INT 3
49081: NEG
49082: PUSH
49083: EMPTY
49084: LIST
49085: LIST
49086: PUSH
49087: LD_INT 4
49089: NEG
49090: PUSH
49091: LD_INT 3
49093: NEG
49094: PUSH
49095: EMPTY
49096: LIST
49097: LIST
49098: PUSH
49099: LD_INT 5
49101: NEG
49102: PUSH
49103: LD_INT 4
49105: NEG
49106: PUSH
49107: EMPTY
49108: LIST
49109: LIST
49110: PUSH
49111: LD_INT 5
49113: NEG
49114: PUSH
49115: LD_INT 5
49117: NEG
49118: PUSH
49119: EMPTY
49120: LIST
49121: LIST
49122: PUSH
49123: LD_INT 3
49125: NEG
49126: PUSH
49127: LD_INT 5
49129: NEG
49130: PUSH
49131: EMPTY
49132: LIST
49133: LIST
49134: PUSH
49135: LD_INT 5
49137: NEG
49138: PUSH
49139: LD_INT 3
49141: NEG
49142: PUSH
49143: EMPTY
49144: LIST
49145: LIST
49146: PUSH
49147: EMPTY
49148: LIST
49149: LIST
49150: LIST
49151: LIST
49152: LIST
49153: LIST
49154: LIST
49155: LIST
49156: LIST
49157: LIST
49158: LIST
49159: LIST
49160: LIST
49161: LIST
49162: LIST
49163: LIST
49164: LIST
49165: LIST
49166: LIST
49167: LIST
49168: LIST
49169: LIST
49170: LIST
49171: LIST
49172: LIST
49173: LIST
49174: LIST
49175: LIST
49176: LIST
49177: LIST
49178: LIST
49179: LIST
49180: LIST
49181: LIST
49182: LIST
49183: LIST
49184: LIST
49185: LIST
49186: LIST
49187: LIST
49188: LIST
49189: LIST
49190: LIST
49191: LIST
49192: LIST
49193: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
49194: LD_ADDR_VAR 0 30
49198: PUSH
49199: LD_INT 4
49201: PUSH
49202: LD_INT 4
49204: PUSH
49205: EMPTY
49206: LIST
49207: LIST
49208: PUSH
49209: LD_INT 4
49211: PUSH
49212: LD_INT 3
49214: PUSH
49215: EMPTY
49216: LIST
49217: LIST
49218: PUSH
49219: LD_INT 5
49221: PUSH
49222: LD_INT 4
49224: PUSH
49225: EMPTY
49226: LIST
49227: LIST
49228: PUSH
49229: LD_INT 5
49231: PUSH
49232: LD_INT 5
49234: PUSH
49235: EMPTY
49236: LIST
49237: LIST
49238: PUSH
49239: LD_INT 4
49241: PUSH
49242: LD_INT 5
49244: PUSH
49245: EMPTY
49246: LIST
49247: LIST
49248: PUSH
49249: LD_INT 3
49251: PUSH
49252: LD_INT 4
49254: PUSH
49255: EMPTY
49256: LIST
49257: LIST
49258: PUSH
49259: LD_INT 3
49261: PUSH
49262: LD_INT 3
49264: PUSH
49265: EMPTY
49266: LIST
49267: LIST
49268: PUSH
49269: LD_INT 5
49271: PUSH
49272: LD_INT 3
49274: PUSH
49275: EMPTY
49276: LIST
49277: LIST
49278: PUSH
49279: LD_INT 3
49281: PUSH
49282: LD_INT 5
49284: PUSH
49285: EMPTY
49286: LIST
49287: LIST
49288: PUSH
49289: LD_INT 0
49291: PUSH
49292: LD_INT 3
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PUSH
49299: LD_INT 0
49301: PUSH
49302: LD_INT 2
49304: PUSH
49305: EMPTY
49306: LIST
49307: LIST
49308: PUSH
49309: LD_INT 1
49311: PUSH
49312: LD_INT 3
49314: PUSH
49315: EMPTY
49316: LIST
49317: LIST
49318: PUSH
49319: LD_INT 1
49321: PUSH
49322: LD_INT 4
49324: PUSH
49325: EMPTY
49326: LIST
49327: LIST
49328: PUSH
49329: LD_INT 0
49331: PUSH
49332: LD_INT 4
49334: PUSH
49335: EMPTY
49336: LIST
49337: LIST
49338: PUSH
49339: LD_INT 1
49341: NEG
49342: PUSH
49343: LD_INT 3
49345: PUSH
49346: EMPTY
49347: LIST
49348: LIST
49349: PUSH
49350: LD_INT 1
49352: NEG
49353: PUSH
49354: LD_INT 2
49356: PUSH
49357: EMPTY
49358: LIST
49359: LIST
49360: PUSH
49361: LD_INT 2
49363: PUSH
49364: LD_INT 4
49366: PUSH
49367: EMPTY
49368: LIST
49369: LIST
49370: PUSH
49371: LD_INT 2
49373: NEG
49374: PUSH
49375: LD_INT 2
49377: PUSH
49378: EMPTY
49379: LIST
49380: LIST
49381: PUSH
49382: LD_INT 4
49384: NEG
49385: PUSH
49386: LD_INT 0
49388: PUSH
49389: EMPTY
49390: LIST
49391: LIST
49392: PUSH
49393: LD_INT 4
49395: NEG
49396: PUSH
49397: LD_INT 1
49399: NEG
49400: PUSH
49401: EMPTY
49402: LIST
49403: LIST
49404: PUSH
49405: LD_INT 3
49407: NEG
49408: PUSH
49409: LD_INT 0
49411: PUSH
49412: EMPTY
49413: LIST
49414: LIST
49415: PUSH
49416: LD_INT 3
49418: NEG
49419: PUSH
49420: LD_INT 1
49422: PUSH
49423: EMPTY
49424: LIST
49425: LIST
49426: PUSH
49427: LD_INT 4
49429: NEG
49430: PUSH
49431: LD_INT 1
49433: PUSH
49434: EMPTY
49435: LIST
49436: LIST
49437: PUSH
49438: LD_INT 5
49440: NEG
49441: PUSH
49442: LD_INT 0
49444: PUSH
49445: EMPTY
49446: LIST
49447: LIST
49448: PUSH
49449: LD_INT 5
49451: NEG
49452: PUSH
49453: LD_INT 1
49455: NEG
49456: PUSH
49457: EMPTY
49458: LIST
49459: LIST
49460: PUSH
49461: LD_INT 5
49463: NEG
49464: PUSH
49465: LD_INT 2
49467: NEG
49468: PUSH
49469: EMPTY
49470: LIST
49471: LIST
49472: PUSH
49473: LD_INT 3
49475: NEG
49476: PUSH
49477: LD_INT 2
49479: PUSH
49480: EMPTY
49481: LIST
49482: LIST
49483: PUSH
49484: LD_INT 3
49486: NEG
49487: PUSH
49488: LD_INT 3
49490: NEG
49491: PUSH
49492: EMPTY
49493: LIST
49494: LIST
49495: PUSH
49496: LD_INT 3
49498: NEG
49499: PUSH
49500: LD_INT 4
49502: NEG
49503: PUSH
49504: EMPTY
49505: LIST
49506: LIST
49507: PUSH
49508: LD_INT 2
49510: NEG
49511: PUSH
49512: LD_INT 3
49514: NEG
49515: PUSH
49516: EMPTY
49517: LIST
49518: LIST
49519: PUSH
49520: LD_INT 2
49522: NEG
49523: PUSH
49524: LD_INT 2
49526: NEG
49527: PUSH
49528: EMPTY
49529: LIST
49530: LIST
49531: PUSH
49532: LD_INT 3
49534: NEG
49535: PUSH
49536: LD_INT 2
49538: NEG
49539: PUSH
49540: EMPTY
49541: LIST
49542: LIST
49543: PUSH
49544: LD_INT 4
49546: NEG
49547: PUSH
49548: LD_INT 3
49550: NEG
49551: PUSH
49552: EMPTY
49553: LIST
49554: LIST
49555: PUSH
49556: LD_INT 4
49558: NEG
49559: PUSH
49560: LD_INT 4
49562: NEG
49563: PUSH
49564: EMPTY
49565: LIST
49566: LIST
49567: PUSH
49568: LD_INT 2
49570: NEG
49571: PUSH
49572: LD_INT 4
49574: NEG
49575: PUSH
49576: EMPTY
49577: LIST
49578: LIST
49579: PUSH
49580: LD_INT 4
49582: NEG
49583: PUSH
49584: LD_INT 2
49586: NEG
49587: PUSH
49588: EMPTY
49589: LIST
49590: LIST
49591: PUSH
49592: LD_INT 0
49594: PUSH
49595: LD_INT 4
49597: NEG
49598: PUSH
49599: EMPTY
49600: LIST
49601: LIST
49602: PUSH
49603: LD_INT 0
49605: PUSH
49606: LD_INT 5
49608: NEG
49609: PUSH
49610: EMPTY
49611: LIST
49612: LIST
49613: PUSH
49614: LD_INT 1
49616: PUSH
49617: LD_INT 4
49619: NEG
49620: PUSH
49621: EMPTY
49622: LIST
49623: LIST
49624: PUSH
49625: LD_INT 1
49627: PUSH
49628: LD_INT 3
49630: NEG
49631: PUSH
49632: EMPTY
49633: LIST
49634: LIST
49635: PUSH
49636: LD_INT 0
49638: PUSH
49639: LD_INT 3
49641: NEG
49642: PUSH
49643: EMPTY
49644: LIST
49645: LIST
49646: PUSH
49647: LD_INT 1
49649: NEG
49650: PUSH
49651: LD_INT 4
49653: NEG
49654: PUSH
49655: EMPTY
49656: LIST
49657: LIST
49658: PUSH
49659: LD_INT 1
49661: NEG
49662: PUSH
49663: LD_INT 5
49665: NEG
49666: PUSH
49667: EMPTY
49668: LIST
49669: LIST
49670: PUSH
49671: LD_INT 2
49673: PUSH
49674: LD_INT 3
49676: NEG
49677: PUSH
49678: EMPTY
49679: LIST
49680: LIST
49681: PUSH
49682: LD_INT 2
49684: NEG
49685: PUSH
49686: LD_INT 5
49688: NEG
49689: PUSH
49690: EMPTY
49691: LIST
49692: LIST
49693: PUSH
49694: EMPTY
49695: LIST
49696: LIST
49697: LIST
49698: LIST
49699: LIST
49700: LIST
49701: LIST
49702: LIST
49703: LIST
49704: LIST
49705: LIST
49706: LIST
49707: LIST
49708: LIST
49709: LIST
49710: LIST
49711: LIST
49712: LIST
49713: LIST
49714: LIST
49715: LIST
49716: LIST
49717: LIST
49718: LIST
49719: LIST
49720: LIST
49721: LIST
49722: LIST
49723: LIST
49724: LIST
49725: LIST
49726: LIST
49727: LIST
49728: LIST
49729: LIST
49730: LIST
49731: LIST
49732: LIST
49733: LIST
49734: LIST
49735: LIST
49736: LIST
49737: LIST
49738: LIST
49739: LIST
49740: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
49741: LD_ADDR_VAR 0 31
49745: PUSH
49746: LD_INT 0
49748: PUSH
49749: LD_INT 4
49751: PUSH
49752: EMPTY
49753: LIST
49754: LIST
49755: PUSH
49756: LD_INT 0
49758: PUSH
49759: LD_INT 3
49761: PUSH
49762: EMPTY
49763: LIST
49764: LIST
49765: PUSH
49766: LD_INT 1
49768: PUSH
49769: LD_INT 4
49771: PUSH
49772: EMPTY
49773: LIST
49774: LIST
49775: PUSH
49776: LD_INT 1
49778: PUSH
49779: LD_INT 5
49781: PUSH
49782: EMPTY
49783: LIST
49784: LIST
49785: PUSH
49786: LD_INT 0
49788: PUSH
49789: LD_INT 5
49791: PUSH
49792: EMPTY
49793: LIST
49794: LIST
49795: PUSH
49796: LD_INT 1
49798: NEG
49799: PUSH
49800: LD_INT 4
49802: PUSH
49803: EMPTY
49804: LIST
49805: LIST
49806: PUSH
49807: LD_INT 1
49809: NEG
49810: PUSH
49811: LD_INT 3
49813: PUSH
49814: EMPTY
49815: LIST
49816: LIST
49817: PUSH
49818: LD_INT 2
49820: PUSH
49821: LD_INT 5
49823: PUSH
49824: EMPTY
49825: LIST
49826: LIST
49827: PUSH
49828: LD_INT 2
49830: NEG
49831: PUSH
49832: LD_INT 3
49834: PUSH
49835: EMPTY
49836: LIST
49837: LIST
49838: PUSH
49839: LD_INT 3
49841: NEG
49842: PUSH
49843: LD_INT 0
49845: PUSH
49846: EMPTY
49847: LIST
49848: LIST
49849: PUSH
49850: LD_INT 3
49852: NEG
49853: PUSH
49854: LD_INT 1
49856: NEG
49857: PUSH
49858: EMPTY
49859: LIST
49860: LIST
49861: PUSH
49862: LD_INT 2
49864: NEG
49865: PUSH
49866: LD_INT 0
49868: PUSH
49869: EMPTY
49870: LIST
49871: LIST
49872: PUSH
49873: LD_INT 2
49875: NEG
49876: PUSH
49877: LD_INT 1
49879: PUSH
49880: EMPTY
49881: LIST
49882: LIST
49883: PUSH
49884: LD_INT 3
49886: NEG
49887: PUSH
49888: LD_INT 1
49890: PUSH
49891: EMPTY
49892: LIST
49893: LIST
49894: PUSH
49895: LD_INT 4
49897: NEG
49898: PUSH
49899: LD_INT 0
49901: PUSH
49902: EMPTY
49903: LIST
49904: LIST
49905: PUSH
49906: LD_INT 4
49908: NEG
49909: PUSH
49910: LD_INT 1
49912: NEG
49913: PUSH
49914: EMPTY
49915: LIST
49916: LIST
49917: PUSH
49918: LD_INT 4
49920: NEG
49921: PUSH
49922: LD_INT 2
49924: NEG
49925: PUSH
49926: EMPTY
49927: LIST
49928: LIST
49929: PUSH
49930: LD_INT 2
49932: NEG
49933: PUSH
49934: LD_INT 2
49936: PUSH
49937: EMPTY
49938: LIST
49939: LIST
49940: PUSH
49941: LD_INT 4
49943: NEG
49944: PUSH
49945: LD_INT 4
49947: NEG
49948: PUSH
49949: EMPTY
49950: LIST
49951: LIST
49952: PUSH
49953: LD_INT 4
49955: NEG
49956: PUSH
49957: LD_INT 5
49959: NEG
49960: PUSH
49961: EMPTY
49962: LIST
49963: LIST
49964: PUSH
49965: LD_INT 3
49967: NEG
49968: PUSH
49969: LD_INT 4
49971: NEG
49972: PUSH
49973: EMPTY
49974: LIST
49975: LIST
49976: PUSH
49977: LD_INT 3
49979: NEG
49980: PUSH
49981: LD_INT 3
49983: NEG
49984: PUSH
49985: EMPTY
49986: LIST
49987: LIST
49988: PUSH
49989: LD_INT 4
49991: NEG
49992: PUSH
49993: LD_INT 3
49995: NEG
49996: PUSH
49997: EMPTY
49998: LIST
49999: LIST
50000: PUSH
50001: LD_INT 5
50003: NEG
50004: PUSH
50005: LD_INT 4
50007: NEG
50008: PUSH
50009: EMPTY
50010: LIST
50011: LIST
50012: PUSH
50013: LD_INT 5
50015: NEG
50016: PUSH
50017: LD_INT 5
50019: NEG
50020: PUSH
50021: EMPTY
50022: LIST
50023: LIST
50024: PUSH
50025: LD_INT 3
50027: NEG
50028: PUSH
50029: LD_INT 5
50031: NEG
50032: PUSH
50033: EMPTY
50034: LIST
50035: LIST
50036: PUSH
50037: LD_INT 5
50039: NEG
50040: PUSH
50041: LD_INT 3
50043: NEG
50044: PUSH
50045: EMPTY
50046: LIST
50047: LIST
50048: PUSH
50049: LD_INT 0
50051: PUSH
50052: LD_INT 3
50054: NEG
50055: PUSH
50056: EMPTY
50057: LIST
50058: LIST
50059: PUSH
50060: LD_INT 0
50062: PUSH
50063: LD_INT 4
50065: NEG
50066: PUSH
50067: EMPTY
50068: LIST
50069: LIST
50070: PUSH
50071: LD_INT 1
50073: PUSH
50074: LD_INT 3
50076: NEG
50077: PUSH
50078: EMPTY
50079: LIST
50080: LIST
50081: PUSH
50082: LD_INT 1
50084: PUSH
50085: LD_INT 2
50087: NEG
50088: PUSH
50089: EMPTY
50090: LIST
50091: LIST
50092: PUSH
50093: LD_INT 0
50095: PUSH
50096: LD_INT 2
50098: NEG
50099: PUSH
50100: EMPTY
50101: LIST
50102: LIST
50103: PUSH
50104: LD_INT 1
50106: NEG
50107: PUSH
50108: LD_INT 3
50110: NEG
50111: PUSH
50112: EMPTY
50113: LIST
50114: LIST
50115: PUSH
50116: LD_INT 1
50118: NEG
50119: PUSH
50120: LD_INT 4
50122: NEG
50123: PUSH
50124: EMPTY
50125: LIST
50126: LIST
50127: PUSH
50128: LD_INT 2
50130: PUSH
50131: LD_INT 2
50133: NEG
50134: PUSH
50135: EMPTY
50136: LIST
50137: LIST
50138: PUSH
50139: LD_INT 2
50141: NEG
50142: PUSH
50143: LD_INT 4
50145: NEG
50146: PUSH
50147: EMPTY
50148: LIST
50149: LIST
50150: PUSH
50151: LD_INT 4
50153: PUSH
50154: LD_INT 0
50156: PUSH
50157: EMPTY
50158: LIST
50159: LIST
50160: PUSH
50161: LD_INT 4
50163: PUSH
50164: LD_INT 1
50166: NEG
50167: PUSH
50168: EMPTY
50169: LIST
50170: LIST
50171: PUSH
50172: LD_INT 5
50174: PUSH
50175: LD_INT 0
50177: PUSH
50178: EMPTY
50179: LIST
50180: LIST
50181: PUSH
50182: LD_INT 5
50184: PUSH
50185: LD_INT 1
50187: PUSH
50188: EMPTY
50189: LIST
50190: LIST
50191: PUSH
50192: LD_INT 4
50194: PUSH
50195: LD_INT 1
50197: PUSH
50198: EMPTY
50199: LIST
50200: LIST
50201: PUSH
50202: LD_INT 3
50204: PUSH
50205: LD_INT 0
50207: PUSH
50208: EMPTY
50209: LIST
50210: LIST
50211: PUSH
50212: LD_INT 3
50214: PUSH
50215: LD_INT 1
50217: NEG
50218: PUSH
50219: EMPTY
50220: LIST
50221: LIST
50222: PUSH
50223: LD_INT 3
50225: PUSH
50226: LD_INT 2
50228: NEG
50229: PUSH
50230: EMPTY
50231: LIST
50232: LIST
50233: PUSH
50234: LD_INT 5
50236: PUSH
50237: LD_INT 2
50239: PUSH
50240: EMPTY
50241: LIST
50242: LIST
50243: PUSH
50244: EMPTY
50245: LIST
50246: LIST
50247: LIST
50248: LIST
50249: LIST
50250: LIST
50251: LIST
50252: LIST
50253: LIST
50254: LIST
50255: LIST
50256: LIST
50257: LIST
50258: LIST
50259: LIST
50260: LIST
50261: LIST
50262: LIST
50263: LIST
50264: LIST
50265: LIST
50266: LIST
50267: LIST
50268: LIST
50269: LIST
50270: LIST
50271: LIST
50272: LIST
50273: LIST
50274: LIST
50275: LIST
50276: LIST
50277: LIST
50278: LIST
50279: LIST
50280: LIST
50281: LIST
50282: LIST
50283: LIST
50284: LIST
50285: LIST
50286: LIST
50287: LIST
50288: LIST
50289: LIST
50290: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
50291: LD_ADDR_VAR 0 32
50295: PUSH
50296: LD_INT 4
50298: NEG
50299: PUSH
50300: LD_INT 0
50302: PUSH
50303: EMPTY
50304: LIST
50305: LIST
50306: PUSH
50307: LD_INT 4
50309: NEG
50310: PUSH
50311: LD_INT 1
50313: NEG
50314: PUSH
50315: EMPTY
50316: LIST
50317: LIST
50318: PUSH
50319: LD_INT 3
50321: NEG
50322: PUSH
50323: LD_INT 0
50325: PUSH
50326: EMPTY
50327: LIST
50328: LIST
50329: PUSH
50330: LD_INT 3
50332: NEG
50333: PUSH
50334: LD_INT 1
50336: PUSH
50337: EMPTY
50338: LIST
50339: LIST
50340: PUSH
50341: LD_INT 4
50343: NEG
50344: PUSH
50345: LD_INT 1
50347: PUSH
50348: EMPTY
50349: LIST
50350: LIST
50351: PUSH
50352: LD_INT 5
50354: NEG
50355: PUSH
50356: LD_INT 0
50358: PUSH
50359: EMPTY
50360: LIST
50361: LIST
50362: PUSH
50363: LD_INT 5
50365: NEG
50366: PUSH
50367: LD_INT 1
50369: NEG
50370: PUSH
50371: EMPTY
50372: LIST
50373: LIST
50374: PUSH
50375: LD_INT 5
50377: NEG
50378: PUSH
50379: LD_INT 2
50381: NEG
50382: PUSH
50383: EMPTY
50384: LIST
50385: LIST
50386: PUSH
50387: LD_INT 3
50389: NEG
50390: PUSH
50391: LD_INT 2
50393: PUSH
50394: EMPTY
50395: LIST
50396: LIST
50397: PUSH
50398: LD_INT 3
50400: NEG
50401: PUSH
50402: LD_INT 3
50404: NEG
50405: PUSH
50406: EMPTY
50407: LIST
50408: LIST
50409: PUSH
50410: LD_INT 3
50412: NEG
50413: PUSH
50414: LD_INT 4
50416: NEG
50417: PUSH
50418: EMPTY
50419: LIST
50420: LIST
50421: PUSH
50422: LD_INT 2
50424: NEG
50425: PUSH
50426: LD_INT 3
50428: NEG
50429: PUSH
50430: EMPTY
50431: LIST
50432: LIST
50433: PUSH
50434: LD_INT 2
50436: NEG
50437: PUSH
50438: LD_INT 2
50440: NEG
50441: PUSH
50442: EMPTY
50443: LIST
50444: LIST
50445: PUSH
50446: LD_INT 3
50448: NEG
50449: PUSH
50450: LD_INT 2
50452: NEG
50453: PUSH
50454: EMPTY
50455: LIST
50456: LIST
50457: PUSH
50458: LD_INT 4
50460: NEG
50461: PUSH
50462: LD_INT 3
50464: NEG
50465: PUSH
50466: EMPTY
50467: LIST
50468: LIST
50469: PUSH
50470: LD_INT 4
50472: NEG
50473: PUSH
50474: LD_INT 4
50476: NEG
50477: PUSH
50478: EMPTY
50479: LIST
50480: LIST
50481: PUSH
50482: LD_INT 2
50484: NEG
50485: PUSH
50486: LD_INT 4
50488: NEG
50489: PUSH
50490: EMPTY
50491: LIST
50492: LIST
50493: PUSH
50494: LD_INT 4
50496: NEG
50497: PUSH
50498: LD_INT 2
50500: NEG
50501: PUSH
50502: EMPTY
50503: LIST
50504: LIST
50505: PUSH
50506: LD_INT 0
50508: PUSH
50509: LD_INT 4
50511: NEG
50512: PUSH
50513: EMPTY
50514: LIST
50515: LIST
50516: PUSH
50517: LD_INT 0
50519: PUSH
50520: LD_INT 5
50522: NEG
50523: PUSH
50524: EMPTY
50525: LIST
50526: LIST
50527: PUSH
50528: LD_INT 1
50530: PUSH
50531: LD_INT 4
50533: NEG
50534: PUSH
50535: EMPTY
50536: LIST
50537: LIST
50538: PUSH
50539: LD_INT 1
50541: PUSH
50542: LD_INT 3
50544: NEG
50545: PUSH
50546: EMPTY
50547: LIST
50548: LIST
50549: PUSH
50550: LD_INT 0
50552: PUSH
50553: LD_INT 3
50555: NEG
50556: PUSH
50557: EMPTY
50558: LIST
50559: LIST
50560: PUSH
50561: LD_INT 1
50563: NEG
50564: PUSH
50565: LD_INT 4
50567: NEG
50568: PUSH
50569: EMPTY
50570: LIST
50571: LIST
50572: PUSH
50573: LD_INT 1
50575: NEG
50576: PUSH
50577: LD_INT 5
50579: NEG
50580: PUSH
50581: EMPTY
50582: LIST
50583: LIST
50584: PUSH
50585: LD_INT 2
50587: PUSH
50588: LD_INT 3
50590: NEG
50591: PUSH
50592: EMPTY
50593: LIST
50594: LIST
50595: PUSH
50596: LD_INT 2
50598: NEG
50599: PUSH
50600: LD_INT 5
50602: NEG
50603: PUSH
50604: EMPTY
50605: LIST
50606: LIST
50607: PUSH
50608: LD_INT 3
50610: PUSH
50611: LD_INT 0
50613: PUSH
50614: EMPTY
50615: LIST
50616: LIST
50617: PUSH
50618: LD_INT 3
50620: PUSH
50621: LD_INT 1
50623: NEG
50624: PUSH
50625: EMPTY
50626: LIST
50627: LIST
50628: PUSH
50629: LD_INT 4
50631: PUSH
50632: LD_INT 0
50634: PUSH
50635: EMPTY
50636: LIST
50637: LIST
50638: PUSH
50639: LD_INT 4
50641: PUSH
50642: LD_INT 1
50644: PUSH
50645: EMPTY
50646: LIST
50647: LIST
50648: PUSH
50649: LD_INT 3
50651: PUSH
50652: LD_INT 1
50654: PUSH
50655: EMPTY
50656: LIST
50657: LIST
50658: PUSH
50659: LD_INT 2
50661: PUSH
50662: LD_INT 0
50664: PUSH
50665: EMPTY
50666: LIST
50667: LIST
50668: PUSH
50669: LD_INT 2
50671: PUSH
50672: LD_INT 1
50674: NEG
50675: PUSH
50676: EMPTY
50677: LIST
50678: LIST
50679: PUSH
50680: LD_INT 2
50682: PUSH
50683: LD_INT 2
50685: NEG
50686: PUSH
50687: EMPTY
50688: LIST
50689: LIST
50690: PUSH
50691: LD_INT 4
50693: PUSH
50694: LD_INT 2
50696: PUSH
50697: EMPTY
50698: LIST
50699: LIST
50700: PUSH
50701: LD_INT 4
50703: PUSH
50704: LD_INT 4
50706: PUSH
50707: EMPTY
50708: LIST
50709: LIST
50710: PUSH
50711: LD_INT 4
50713: PUSH
50714: LD_INT 3
50716: PUSH
50717: EMPTY
50718: LIST
50719: LIST
50720: PUSH
50721: LD_INT 5
50723: PUSH
50724: LD_INT 4
50726: PUSH
50727: EMPTY
50728: LIST
50729: LIST
50730: PUSH
50731: LD_INT 5
50733: PUSH
50734: LD_INT 5
50736: PUSH
50737: EMPTY
50738: LIST
50739: LIST
50740: PUSH
50741: LD_INT 4
50743: PUSH
50744: LD_INT 5
50746: PUSH
50747: EMPTY
50748: LIST
50749: LIST
50750: PUSH
50751: LD_INT 3
50753: PUSH
50754: LD_INT 4
50756: PUSH
50757: EMPTY
50758: LIST
50759: LIST
50760: PUSH
50761: LD_INT 3
50763: PUSH
50764: LD_INT 3
50766: PUSH
50767: EMPTY
50768: LIST
50769: LIST
50770: PUSH
50771: LD_INT 5
50773: PUSH
50774: LD_INT 3
50776: PUSH
50777: EMPTY
50778: LIST
50779: LIST
50780: PUSH
50781: LD_INT 3
50783: PUSH
50784: LD_INT 5
50786: PUSH
50787: EMPTY
50788: LIST
50789: LIST
50790: PUSH
50791: EMPTY
50792: LIST
50793: LIST
50794: LIST
50795: LIST
50796: LIST
50797: LIST
50798: LIST
50799: LIST
50800: LIST
50801: LIST
50802: LIST
50803: LIST
50804: LIST
50805: LIST
50806: LIST
50807: LIST
50808: LIST
50809: LIST
50810: LIST
50811: LIST
50812: LIST
50813: LIST
50814: LIST
50815: LIST
50816: LIST
50817: LIST
50818: LIST
50819: LIST
50820: LIST
50821: LIST
50822: LIST
50823: LIST
50824: LIST
50825: LIST
50826: LIST
50827: LIST
50828: LIST
50829: LIST
50830: LIST
50831: LIST
50832: LIST
50833: LIST
50834: LIST
50835: LIST
50836: LIST
50837: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
50838: LD_ADDR_VAR 0 33
50842: PUSH
50843: LD_INT 4
50845: NEG
50846: PUSH
50847: LD_INT 4
50849: NEG
50850: PUSH
50851: EMPTY
50852: LIST
50853: LIST
50854: PUSH
50855: LD_INT 4
50857: NEG
50858: PUSH
50859: LD_INT 5
50861: NEG
50862: PUSH
50863: EMPTY
50864: LIST
50865: LIST
50866: PUSH
50867: LD_INT 3
50869: NEG
50870: PUSH
50871: LD_INT 4
50873: NEG
50874: PUSH
50875: EMPTY
50876: LIST
50877: LIST
50878: PUSH
50879: LD_INT 3
50881: NEG
50882: PUSH
50883: LD_INT 3
50885: NEG
50886: PUSH
50887: EMPTY
50888: LIST
50889: LIST
50890: PUSH
50891: LD_INT 4
50893: NEG
50894: PUSH
50895: LD_INT 3
50897: NEG
50898: PUSH
50899: EMPTY
50900: LIST
50901: LIST
50902: PUSH
50903: LD_INT 5
50905: NEG
50906: PUSH
50907: LD_INT 4
50909: NEG
50910: PUSH
50911: EMPTY
50912: LIST
50913: LIST
50914: PUSH
50915: LD_INT 5
50917: NEG
50918: PUSH
50919: LD_INT 5
50921: NEG
50922: PUSH
50923: EMPTY
50924: LIST
50925: LIST
50926: PUSH
50927: LD_INT 3
50929: NEG
50930: PUSH
50931: LD_INT 5
50933: NEG
50934: PUSH
50935: EMPTY
50936: LIST
50937: LIST
50938: PUSH
50939: LD_INT 5
50941: NEG
50942: PUSH
50943: LD_INT 3
50945: NEG
50946: PUSH
50947: EMPTY
50948: LIST
50949: LIST
50950: PUSH
50951: LD_INT 0
50953: PUSH
50954: LD_INT 3
50956: NEG
50957: PUSH
50958: EMPTY
50959: LIST
50960: LIST
50961: PUSH
50962: LD_INT 0
50964: PUSH
50965: LD_INT 4
50967: NEG
50968: PUSH
50969: EMPTY
50970: LIST
50971: LIST
50972: PUSH
50973: LD_INT 1
50975: PUSH
50976: LD_INT 3
50978: NEG
50979: PUSH
50980: EMPTY
50981: LIST
50982: LIST
50983: PUSH
50984: LD_INT 1
50986: PUSH
50987: LD_INT 2
50989: NEG
50990: PUSH
50991: EMPTY
50992: LIST
50993: LIST
50994: PUSH
50995: LD_INT 0
50997: PUSH
50998: LD_INT 2
51000: NEG
51001: PUSH
51002: EMPTY
51003: LIST
51004: LIST
51005: PUSH
51006: LD_INT 1
51008: NEG
51009: PUSH
51010: LD_INT 3
51012: NEG
51013: PUSH
51014: EMPTY
51015: LIST
51016: LIST
51017: PUSH
51018: LD_INT 1
51020: NEG
51021: PUSH
51022: LD_INT 4
51024: NEG
51025: PUSH
51026: EMPTY
51027: LIST
51028: LIST
51029: PUSH
51030: LD_INT 2
51032: PUSH
51033: LD_INT 2
51035: NEG
51036: PUSH
51037: EMPTY
51038: LIST
51039: LIST
51040: PUSH
51041: LD_INT 2
51043: NEG
51044: PUSH
51045: LD_INT 4
51047: NEG
51048: PUSH
51049: EMPTY
51050: LIST
51051: LIST
51052: PUSH
51053: LD_INT 4
51055: PUSH
51056: LD_INT 0
51058: PUSH
51059: EMPTY
51060: LIST
51061: LIST
51062: PUSH
51063: LD_INT 4
51065: PUSH
51066: LD_INT 1
51068: NEG
51069: PUSH
51070: EMPTY
51071: LIST
51072: LIST
51073: PUSH
51074: LD_INT 5
51076: PUSH
51077: LD_INT 0
51079: PUSH
51080: EMPTY
51081: LIST
51082: LIST
51083: PUSH
51084: LD_INT 5
51086: PUSH
51087: LD_INT 1
51089: PUSH
51090: EMPTY
51091: LIST
51092: LIST
51093: PUSH
51094: LD_INT 4
51096: PUSH
51097: LD_INT 1
51099: PUSH
51100: EMPTY
51101: LIST
51102: LIST
51103: PUSH
51104: LD_INT 3
51106: PUSH
51107: LD_INT 0
51109: PUSH
51110: EMPTY
51111: LIST
51112: LIST
51113: PUSH
51114: LD_INT 3
51116: PUSH
51117: LD_INT 1
51119: NEG
51120: PUSH
51121: EMPTY
51122: LIST
51123: LIST
51124: PUSH
51125: LD_INT 3
51127: PUSH
51128: LD_INT 2
51130: NEG
51131: PUSH
51132: EMPTY
51133: LIST
51134: LIST
51135: PUSH
51136: LD_INT 5
51138: PUSH
51139: LD_INT 2
51141: PUSH
51142: EMPTY
51143: LIST
51144: LIST
51145: PUSH
51146: LD_INT 3
51148: PUSH
51149: LD_INT 3
51151: PUSH
51152: EMPTY
51153: LIST
51154: LIST
51155: PUSH
51156: LD_INT 3
51158: PUSH
51159: LD_INT 2
51161: PUSH
51162: EMPTY
51163: LIST
51164: LIST
51165: PUSH
51166: LD_INT 4
51168: PUSH
51169: LD_INT 3
51171: PUSH
51172: EMPTY
51173: LIST
51174: LIST
51175: PUSH
51176: LD_INT 4
51178: PUSH
51179: LD_INT 4
51181: PUSH
51182: EMPTY
51183: LIST
51184: LIST
51185: PUSH
51186: LD_INT 3
51188: PUSH
51189: LD_INT 4
51191: PUSH
51192: EMPTY
51193: LIST
51194: LIST
51195: PUSH
51196: LD_INT 2
51198: PUSH
51199: LD_INT 3
51201: PUSH
51202: EMPTY
51203: LIST
51204: LIST
51205: PUSH
51206: LD_INT 2
51208: PUSH
51209: LD_INT 2
51211: PUSH
51212: EMPTY
51213: LIST
51214: LIST
51215: PUSH
51216: LD_INT 4
51218: PUSH
51219: LD_INT 2
51221: PUSH
51222: EMPTY
51223: LIST
51224: LIST
51225: PUSH
51226: LD_INT 2
51228: PUSH
51229: LD_INT 4
51231: PUSH
51232: EMPTY
51233: LIST
51234: LIST
51235: PUSH
51236: LD_INT 0
51238: PUSH
51239: LD_INT 4
51241: PUSH
51242: EMPTY
51243: LIST
51244: LIST
51245: PUSH
51246: LD_INT 0
51248: PUSH
51249: LD_INT 3
51251: PUSH
51252: EMPTY
51253: LIST
51254: LIST
51255: PUSH
51256: LD_INT 1
51258: PUSH
51259: LD_INT 4
51261: PUSH
51262: EMPTY
51263: LIST
51264: LIST
51265: PUSH
51266: LD_INT 1
51268: PUSH
51269: LD_INT 5
51271: PUSH
51272: EMPTY
51273: LIST
51274: LIST
51275: PUSH
51276: LD_INT 0
51278: PUSH
51279: LD_INT 5
51281: PUSH
51282: EMPTY
51283: LIST
51284: LIST
51285: PUSH
51286: LD_INT 1
51288: NEG
51289: PUSH
51290: LD_INT 4
51292: PUSH
51293: EMPTY
51294: LIST
51295: LIST
51296: PUSH
51297: LD_INT 1
51299: NEG
51300: PUSH
51301: LD_INT 3
51303: PUSH
51304: EMPTY
51305: LIST
51306: LIST
51307: PUSH
51308: LD_INT 2
51310: PUSH
51311: LD_INT 5
51313: PUSH
51314: EMPTY
51315: LIST
51316: LIST
51317: PUSH
51318: LD_INT 2
51320: NEG
51321: PUSH
51322: LD_INT 3
51324: PUSH
51325: EMPTY
51326: LIST
51327: LIST
51328: PUSH
51329: EMPTY
51330: LIST
51331: LIST
51332: LIST
51333: LIST
51334: LIST
51335: LIST
51336: LIST
51337: LIST
51338: LIST
51339: LIST
51340: LIST
51341: LIST
51342: LIST
51343: LIST
51344: LIST
51345: LIST
51346: LIST
51347: LIST
51348: LIST
51349: LIST
51350: LIST
51351: LIST
51352: LIST
51353: LIST
51354: LIST
51355: LIST
51356: LIST
51357: LIST
51358: LIST
51359: LIST
51360: LIST
51361: LIST
51362: LIST
51363: LIST
51364: LIST
51365: LIST
51366: LIST
51367: LIST
51368: LIST
51369: LIST
51370: LIST
51371: LIST
51372: LIST
51373: LIST
51374: LIST
51375: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
51376: LD_ADDR_VAR 0 34
51380: PUSH
51381: LD_INT 0
51383: PUSH
51384: LD_INT 4
51386: NEG
51387: PUSH
51388: EMPTY
51389: LIST
51390: LIST
51391: PUSH
51392: LD_INT 0
51394: PUSH
51395: LD_INT 5
51397: NEG
51398: PUSH
51399: EMPTY
51400: LIST
51401: LIST
51402: PUSH
51403: LD_INT 1
51405: PUSH
51406: LD_INT 4
51408: NEG
51409: PUSH
51410: EMPTY
51411: LIST
51412: LIST
51413: PUSH
51414: LD_INT 1
51416: PUSH
51417: LD_INT 3
51419: NEG
51420: PUSH
51421: EMPTY
51422: LIST
51423: LIST
51424: PUSH
51425: LD_INT 0
51427: PUSH
51428: LD_INT 3
51430: NEG
51431: PUSH
51432: EMPTY
51433: LIST
51434: LIST
51435: PUSH
51436: LD_INT 1
51438: NEG
51439: PUSH
51440: LD_INT 4
51442: NEG
51443: PUSH
51444: EMPTY
51445: LIST
51446: LIST
51447: PUSH
51448: LD_INT 1
51450: NEG
51451: PUSH
51452: LD_INT 5
51454: NEG
51455: PUSH
51456: EMPTY
51457: LIST
51458: LIST
51459: PUSH
51460: LD_INT 2
51462: PUSH
51463: LD_INT 3
51465: NEG
51466: PUSH
51467: EMPTY
51468: LIST
51469: LIST
51470: PUSH
51471: LD_INT 2
51473: NEG
51474: PUSH
51475: LD_INT 5
51477: NEG
51478: PUSH
51479: EMPTY
51480: LIST
51481: LIST
51482: PUSH
51483: LD_INT 3
51485: PUSH
51486: LD_INT 0
51488: PUSH
51489: EMPTY
51490: LIST
51491: LIST
51492: PUSH
51493: LD_INT 3
51495: PUSH
51496: LD_INT 1
51498: NEG
51499: PUSH
51500: EMPTY
51501: LIST
51502: LIST
51503: PUSH
51504: LD_INT 4
51506: PUSH
51507: LD_INT 0
51509: PUSH
51510: EMPTY
51511: LIST
51512: LIST
51513: PUSH
51514: LD_INT 4
51516: PUSH
51517: LD_INT 1
51519: PUSH
51520: EMPTY
51521: LIST
51522: LIST
51523: PUSH
51524: LD_INT 3
51526: PUSH
51527: LD_INT 1
51529: PUSH
51530: EMPTY
51531: LIST
51532: LIST
51533: PUSH
51534: LD_INT 2
51536: PUSH
51537: LD_INT 0
51539: PUSH
51540: EMPTY
51541: LIST
51542: LIST
51543: PUSH
51544: LD_INT 2
51546: PUSH
51547: LD_INT 1
51549: NEG
51550: PUSH
51551: EMPTY
51552: LIST
51553: LIST
51554: PUSH
51555: LD_INT 2
51557: PUSH
51558: LD_INT 2
51560: NEG
51561: PUSH
51562: EMPTY
51563: LIST
51564: LIST
51565: PUSH
51566: LD_INT 4
51568: PUSH
51569: LD_INT 2
51571: PUSH
51572: EMPTY
51573: LIST
51574: LIST
51575: PUSH
51576: LD_INT 4
51578: PUSH
51579: LD_INT 4
51581: PUSH
51582: EMPTY
51583: LIST
51584: LIST
51585: PUSH
51586: LD_INT 4
51588: PUSH
51589: LD_INT 3
51591: PUSH
51592: EMPTY
51593: LIST
51594: LIST
51595: PUSH
51596: LD_INT 5
51598: PUSH
51599: LD_INT 4
51601: PUSH
51602: EMPTY
51603: LIST
51604: LIST
51605: PUSH
51606: LD_INT 5
51608: PUSH
51609: LD_INT 5
51611: PUSH
51612: EMPTY
51613: LIST
51614: LIST
51615: PUSH
51616: LD_INT 4
51618: PUSH
51619: LD_INT 5
51621: PUSH
51622: EMPTY
51623: LIST
51624: LIST
51625: PUSH
51626: LD_INT 3
51628: PUSH
51629: LD_INT 4
51631: PUSH
51632: EMPTY
51633: LIST
51634: LIST
51635: PUSH
51636: LD_INT 3
51638: PUSH
51639: LD_INT 3
51641: PUSH
51642: EMPTY
51643: LIST
51644: LIST
51645: PUSH
51646: LD_INT 5
51648: PUSH
51649: LD_INT 3
51651: PUSH
51652: EMPTY
51653: LIST
51654: LIST
51655: PUSH
51656: LD_INT 3
51658: PUSH
51659: LD_INT 5
51661: PUSH
51662: EMPTY
51663: LIST
51664: LIST
51665: PUSH
51666: LD_INT 0
51668: PUSH
51669: LD_INT 3
51671: PUSH
51672: EMPTY
51673: LIST
51674: LIST
51675: PUSH
51676: LD_INT 0
51678: PUSH
51679: LD_INT 2
51681: PUSH
51682: EMPTY
51683: LIST
51684: LIST
51685: PUSH
51686: LD_INT 1
51688: PUSH
51689: LD_INT 3
51691: PUSH
51692: EMPTY
51693: LIST
51694: LIST
51695: PUSH
51696: LD_INT 1
51698: PUSH
51699: LD_INT 4
51701: PUSH
51702: EMPTY
51703: LIST
51704: LIST
51705: PUSH
51706: LD_INT 0
51708: PUSH
51709: LD_INT 4
51711: PUSH
51712: EMPTY
51713: LIST
51714: LIST
51715: PUSH
51716: LD_INT 1
51718: NEG
51719: PUSH
51720: LD_INT 3
51722: PUSH
51723: EMPTY
51724: LIST
51725: LIST
51726: PUSH
51727: LD_INT 1
51729: NEG
51730: PUSH
51731: LD_INT 2
51733: PUSH
51734: EMPTY
51735: LIST
51736: LIST
51737: PUSH
51738: LD_INT 2
51740: PUSH
51741: LD_INT 4
51743: PUSH
51744: EMPTY
51745: LIST
51746: LIST
51747: PUSH
51748: LD_INT 2
51750: NEG
51751: PUSH
51752: LD_INT 2
51754: PUSH
51755: EMPTY
51756: LIST
51757: LIST
51758: PUSH
51759: LD_INT 4
51761: NEG
51762: PUSH
51763: LD_INT 0
51765: PUSH
51766: EMPTY
51767: LIST
51768: LIST
51769: PUSH
51770: LD_INT 4
51772: NEG
51773: PUSH
51774: LD_INT 1
51776: NEG
51777: PUSH
51778: EMPTY
51779: LIST
51780: LIST
51781: PUSH
51782: LD_INT 3
51784: NEG
51785: PUSH
51786: LD_INT 0
51788: PUSH
51789: EMPTY
51790: LIST
51791: LIST
51792: PUSH
51793: LD_INT 3
51795: NEG
51796: PUSH
51797: LD_INT 1
51799: PUSH
51800: EMPTY
51801: LIST
51802: LIST
51803: PUSH
51804: LD_INT 4
51806: NEG
51807: PUSH
51808: LD_INT 1
51810: PUSH
51811: EMPTY
51812: LIST
51813: LIST
51814: PUSH
51815: LD_INT 5
51817: NEG
51818: PUSH
51819: LD_INT 0
51821: PUSH
51822: EMPTY
51823: LIST
51824: LIST
51825: PUSH
51826: LD_INT 5
51828: NEG
51829: PUSH
51830: LD_INT 1
51832: NEG
51833: PUSH
51834: EMPTY
51835: LIST
51836: LIST
51837: PUSH
51838: LD_INT 5
51840: NEG
51841: PUSH
51842: LD_INT 2
51844: NEG
51845: PUSH
51846: EMPTY
51847: LIST
51848: LIST
51849: PUSH
51850: LD_INT 3
51852: NEG
51853: PUSH
51854: LD_INT 2
51856: PUSH
51857: EMPTY
51858: LIST
51859: LIST
51860: PUSH
51861: EMPTY
51862: LIST
51863: LIST
51864: LIST
51865: LIST
51866: LIST
51867: LIST
51868: LIST
51869: LIST
51870: LIST
51871: LIST
51872: LIST
51873: LIST
51874: LIST
51875: LIST
51876: LIST
51877: LIST
51878: LIST
51879: LIST
51880: LIST
51881: LIST
51882: LIST
51883: LIST
51884: LIST
51885: LIST
51886: LIST
51887: LIST
51888: LIST
51889: LIST
51890: LIST
51891: LIST
51892: LIST
51893: LIST
51894: LIST
51895: LIST
51896: LIST
51897: LIST
51898: LIST
51899: LIST
51900: LIST
51901: LIST
51902: LIST
51903: LIST
51904: LIST
51905: LIST
51906: LIST
51907: ST_TO_ADDR
// end ; end ;
51908: GO 51911
51910: POP
// case btype of b_depot , b_warehouse :
51911: LD_VAR 0 1
51915: PUSH
51916: LD_INT 0
51918: DOUBLE
51919: EQUAL
51920: IFTRUE 51930
51922: LD_INT 1
51924: DOUBLE
51925: EQUAL
51926: IFTRUE 51930
51928: GO 52131
51930: POP
// case nation of nation_american :
51931: LD_VAR 0 5
51935: PUSH
51936: LD_INT 1
51938: DOUBLE
51939: EQUAL
51940: IFTRUE 51944
51942: GO 52000
51944: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
51945: LD_ADDR_VAR 0 9
51949: PUSH
51950: LD_VAR 0 11
51954: PUSH
51955: LD_VAR 0 12
51959: PUSH
51960: LD_VAR 0 13
51964: PUSH
51965: LD_VAR 0 14
51969: PUSH
51970: LD_VAR 0 15
51974: PUSH
51975: LD_VAR 0 16
51979: PUSH
51980: EMPTY
51981: LIST
51982: LIST
51983: LIST
51984: LIST
51985: LIST
51986: LIST
51987: PUSH
51988: LD_VAR 0 4
51992: PUSH
51993: LD_INT 1
51995: PLUS
51996: ARRAY
51997: ST_TO_ADDR
51998: GO 52129
52000: LD_INT 2
52002: DOUBLE
52003: EQUAL
52004: IFTRUE 52008
52006: GO 52064
52008: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
52009: LD_ADDR_VAR 0 9
52013: PUSH
52014: LD_VAR 0 17
52018: PUSH
52019: LD_VAR 0 18
52023: PUSH
52024: LD_VAR 0 19
52028: PUSH
52029: LD_VAR 0 20
52033: PUSH
52034: LD_VAR 0 21
52038: PUSH
52039: LD_VAR 0 22
52043: PUSH
52044: EMPTY
52045: LIST
52046: LIST
52047: LIST
52048: LIST
52049: LIST
52050: LIST
52051: PUSH
52052: LD_VAR 0 4
52056: PUSH
52057: LD_INT 1
52059: PLUS
52060: ARRAY
52061: ST_TO_ADDR
52062: GO 52129
52064: LD_INT 3
52066: DOUBLE
52067: EQUAL
52068: IFTRUE 52072
52070: GO 52128
52072: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
52073: LD_ADDR_VAR 0 9
52077: PUSH
52078: LD_VAR 0 23
52082: PUSH
52083: LD_VAR 0 24
52087: PUSH
52088: LD_VAR 0 25
52092: PUSH
52093: LD_VAR 0 26
52097: PUSH
52098: LD_VAR 0 27
52102: PUSH
52103: LD_VAR 0 28
52107: PUSH
52108: EMPTY
52109: LIST
52110: LIST
52111: LIST
52112: LIST
52113: LIST
52114: LIST
52115: PUSH
52116: LD_VAR 0 4
52120: PUSH
52121: LD_INT 1
52123: PLUS
52124: ARRAY
52125: ST_TO_ADDR
52126: GO 52129
52128: POP
52129: GO 52684
52131: LD_INT 2
52133: DOUBLE
52134: EQUAL
52135: IFTRUE 52145
52137: LD_INT 3
52139: DOUBLE
52140: EQUAL
52141: IFTRUE 52145
52143: GO 52201
52145: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
52146: LD_ADDR_VAR 0 9
52150: PUSH
52151: LD_VAR 0 29
52155: PUSH
52156: LD_VAR 0 30
52160: PUSH
52161: LD_VAR 0 31
52165: PUSH
52166: LD_VAR 0 32
52170: PUSH
52171: LD_VAR 0 33
52175: PUSH
52176: LD_VAR 0 34
52180: PUSH
52181: EMPTY
52182: LIST
52183: LIST
52184: LIST
52185: LIST
52186: LIST
52187: LIST
52188: PUSH
52189: LD_VAR 0 4
52193: PUSH
52194: LD_INT 1
52196: PLUS
52197: ARRAY
52198: ST_TO_ADDR
52199: GO 52684
52201: LD_INT 16
52203: DOUBLE
52204: EQUAL
52205: IFTRUE 52263
52207: LD_INT 17
52209: DOUBLE
52210: EQUAL
52211: IFTRUE 52263
52213: LD_INT 18
52215: DOUBLE
52216: EQUAL
52217: IFTRUE 52263
52219: LD_INT 19
52221: DOUBLE
52222: EQUAL
52223: IFTRUE 52263
52225: LD_INT 22
52227: DOUBLE
52228: EQUAL
52229: IFTRUE 52263
52231: LD_INT 20
52233: DOUBLE
52234: EQUAL
52235: IFTRUE 52263
52237: LD_INT 21
52239: DOUBLE
52240: EQUAL
52241: IFTRUE 52263
52243: LD_INT 23
52245: DOUBLE
52246: EQUAL
52247: IFTRUE 52263
52249: LD_INT 24
52251: DOUBLE
52252: EQUAL
52253: IFTRUE 52263
52255: LD_INT 25
52257: DOUBLE
52258: EQUAL
52259: IFTRUE 52263
52261: GO 52319
52263: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
52264: LD_ADDR_VAR 0 9
52268: PUSH
52269: LD_VAR 0 35
52273: PUSH
52274: LD_VAR 0 36
52278: PUSH
52279: LD_VAR 0 37
52283: PUSH
52284: LD_VAR 0 38
52288: PUSH
52289: LD_VAR 0 39
52293: PUSH
52294: LD_VAR 0 40
52298: PUSH
52299: EMPTY
52300: LIST
52301: LIST
52302: LIST
52303: LIST
52304: LIST
52305: LIST
52306: PUSH
52307: LD_VAR 0 4
52311: PUSH
52312: LD_INT 1
52314: PLUS
52315: ARRAY
52316: ST_TO_ADDR
52317: GO 52684
52319: LD_INT 6
52321: DOUBLE
52322: EQUAL
52323: IFTRUE 52375
52325: LD_INT 7
52327: DOUBLE
52328: EQUAL
52329: IFTRUE 52375
52331: LD_INT 8
52333: DOUBLE
52334: EQUAL
52335: IFTRUE 52375
52337: LD_INT 13
52339: DOUBLE
52340: EQUAL
52341: IFTRUE 52375
52343: LD_INT 12
52345: DOUBLE
52346: EQUAL
52347: IFTRUE 52375
52349: LD_INT 15
52351: DOUBLE
52352: EQUAL
52353: IFTRUE 52375
52355: LD_INT 11
52357: DOUBLE
52358: EQUAL
52359: IFTRUE 52375
52361: LD_INT 14
52363: DOUBLE
52364: EQUAL
52365: IFTRUE 52375
52367: LD_INT 10
52369: DOUBLE
52370: EQUAL
52371: IFTRUE 52375
52373: GO 52431
52375: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
52376: LD_ADDR_VAR 0 9
52380: PUSH
52381: LD_VAR 0 41
52385: PUSH
52386: LD_VAR 0 42
52390: PUSH
52391: LD_VAR 0 43
52395: PUSH
52396: LD_VAR 0 44
52400: PUSH
52401: LD_VAR 0 45
52405: PUSH
52406: LD_VAR 0 46
52410: PUSH
52411: EMPTY
52412: LIST
52413: LIST
52414: LIST
52415: LIST
52416: LIST
52417: LIST
52418: PUSH
52419: LD_VAR 0 4
52423: PUSH
52424: LD_INT 1
52426: PLUS
52427: ARRAY
52428: ST_TO_ADDR
52429: GO 52684
52431: LD_INT 36
52433: DOUBLE
52434: EQUAL
52435: IFTRUE 52439
52437: GO 52495
52439: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
52440: LD_ADDR_VAR 0 9
52444: PUSH
52445: LD_VAR 0 47
52449: PUSH
52450: LD_VAR 0 48
52454: PUSH
52455: LD_VAR 0 49
52459: PUSH
52460: LD_VAR 0 50
52464: PUSH
52465: LD_VAR 0 51
52469: PUSH
52470: LD_VAR 0 52
52474: PUSH
52475: EMPTY
52476: LIST
52477: LIST
52478: LIST
52479: LIST
52480: LIST
52481: LIST
52482: PUSH
52483: LD_VAR 0 4
52487: PUSH
52488: LD_INT 1
52490: PLUS
52491: ARRAY
52492: ST_TO_ADDR
52493: GO 52684
52495: LD_INT 4
52497: DOUBLE
52498: EQUAL
52499: IFTRUE 52521
52501: LD_INT 5
52503: DOUBLE
52504: EQUAL
52505: IFTRUE 52521
52507: LD_INT 34
52509: DOUBLE
52510: EQUAL
52511: IFTRUE 52521
52513: LD_INT 37
52515: DOUBLE
52516: EQUAL
52517: IFTRUE 52521
52519: GO 52577
52521: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
52522: LD_ADDR_VAR 0 9
52526: PUSH
52527: LD_VAR 0 53
52531: PUSH
52532: LD_VAR 0 54
52536: PUSH
52537: LD_VAR 0 55
52541: PUSH
52542: LD_VAR 0 56
52546: PUSH
52547: LD_VAR 0 57
52551: PUSH
52552: LD_VAR 0 58
52556: PUSH
52557: EMPTY
52558: LIST
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: PUSH
52565: LD_VAR 0 4
52569: PUSH
52570: LD_INT 1
52572: PLUS
52573: ARRAY
52574: ST_TO_ADDR
52575: GO 52684
52577: LD_INT 31
52579: DOUBLE
52580: EQUAL
52581: IFTRUE 52627
52583: LD_INT 32
52585: DOUBLE
52586: EQUAL
52587: IFTRUE 52627
52589: LD_INT 33
52591: DOUBLE
52592: EQUAL
52593: IFTRUE 52627
52595: LD_INT 27
52597: DOUBLE
52598: EQUAL
52599: IFTRUE 52627
52601: LD_INT 26
52603: DOUBLE
52604: EQUAL
52605: IFTRUE 52627
52607: LD_INT 28
52609: DOUBLE
52610: EQUAL
52611: IFTRUE 52627
52613: LD_INT 29
52615: DOUBLE
52616: EQUAL
52617: IFTRUE 52627
52619: LD_INT 30
52621: DOUBLE
52622: EQUAL
52623: IFTRUE 52627
52625: GO 52683
52627: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
52628: LD_ADDR_VAR 0 9
52632: PUSH
52633: LD_VAR 0 59
52637: PUSH
52638: LD_VAR 0 60
52642: PUSH
52643: LD_VAR 0 61
52647: PUSH
52648: LD_VAR 0 62
52652: PUSH
52653: LD_VAR 0 63
52657: PUSH
52658: LD_VAR 0 64
52662: PUSH
52663: EMPTY
52664: LIST
52665: LIST
52666: LIST
52667: LIST
52668: LIST
52669: LIST
52670: PUSH
52671: LD_VAR 0 4
52675: PUSH
52676: LD_INT 1
52678: PLUS
52679: ARRAY
52680: ST_TO_ADDR
52681: GO 52684
52683: POP
// temp_list2 = [ ] ;
52684: LD_ADDR_VAR 0 10
52688: PUSH
52689: EMPTY
52690: ST_TO_ADDR
// for i in temp_list do
52691: LD_ADDR_VAR 0 8
52695: PUSH
52696: LD_VAR 0 9
52700: PUSH
52701: FOR_IN
52702: IFFALSE 52754
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
52704: LD_ADDR_VAR 0 10
52708: PUSH
52709: LD_VAR 0 10
52713: PUSH
52714: LD_VAR 0 8
52718: PUSH
52719: LD_INT 1
52721: ARRAY
52722: PUSH
52723: LD_VAR 0 2
52727: PLUS
52728: PUSH
52729: LD_VAR 0 8
52733: PUSH
52734: LD_INT 2
52736: ARRAY
52737: PUSH
52738: LD_VAR 0 3
52742: PLUS
52743: PUSH
52744: EMPTY
52745: LIST
52746: LIST
52747: PUSH
52748: EMPTY
52749: LIST
52750: ADD
52751: ST_TO_ADDR
52752: GO 52701
52754: POP
52755: POP
// result = temp_list2 ;
52756: LD_ADDR_VAR 0 7
52760: PUSH
52761: LD_VAR 0 10
52765: ST_TO_ADDR
// end ;
52766: LD_VAR 0 7
52770: RET
// export function EnemyInRange ( unit , dist ) ; begin
52771: LD_INT 0
52773: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
52774: LD_ADDR_VAR 0 3
52778: PUSH
52779: LD_VAR 0 1
52783: PPUSH
52784: CALL_OW 255
52788: PPUSH
52789: LD_VAR 0 1
52793: PPUSH
52794: CALL_OW 250
52798: PPUSH
52799: LD_VAR 0 1
52803: PPUSH
52804: CALL_OW 251
52808: PPUSH
52809: LD_VAR 0 2
52813: PPUSH
52814: CALL 26542 0 4
52818: PUSH
52819: LD_INT 4
52821: ARRAY
52822: ST_TO_ADDR
// end ;
52823: LD_VAR 0 3
52827: RET
// export function PlayerSeeMe ( unit ) ; begin
52828: LD_INT 0
52830: PPUSH
// result := See ( your_side , unit ) ;
52831: LD_ADDR_VAR 0 2
52835: PUSH
52836: LD_OWVAR 2
52840: PPUSH
52841: LD_VAR 0 1
52845: PPUSH
52846: CALL_OW 292
52850: ST_TO_ADDR
// end ;
52851: LD_VAR 0 2
52855: RET
// export function ReverseDir ( unit ) ; begin
52856: LD_INT 0
52858: PPUSH
// if not unit then
52859: LD_VAR 0 1
52863: NOT
52864: IFFALSE 52868
// exit ;
52866: GO 52891
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
52868: LD_ADDR_VAR 0 2
52872: PUSH
52873: LD_VAR 0 1
52877: PPUSH
52878: CALL_OW 254
52882: PUSH
52883: LD_INT 3
52885: PLUS
52886: PUSH
52887: LD_INT 6
52889: MOD
52890: ST_TO_ADDR
// end ;
52891: LD_VAR 0 2
52895: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
52896: LD_INT 0
52898: PPUSH
52899: PPUSH
52900: PPUSH
52901: PPUSH
52902: PPUSH
// if not hexes then
52903: LD_VAR 0 2
52907: NOT
52908: IFFALSE 52912
// exit ;
52910: GO 53060
// dist := 9999 ;
52912: LD_ADDR_VAR 0 5
52916: PUSH
52917: LD_INT 9999
52919: ST_TO_ADDR
// for i = 1 to hexes do
52920: LD_ADDR_VAR 0 4
52924: PUSH
52925: DOUBLE
52926: LD_INT 1
52928: DEC
52929: ST_TO_ADDR
52930: LD_VAR 0 2
52934: PUSH
52935: FOR_TO
52936: IFFALSE 53048
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
52938: LD_VAR 0 1
52942: PPUSH
52943: LD_VAR 0 2
52947: PUSH
52948: LD_VAR 0 4
52952: ARRAY
52953: PUSH
52954: LD_INT 1
52956: ARRAY
52957: PPUSH
52958: LD_VAR 0 2
52962: PUSH
52963: LD_VAR 0 4
52967: ARRAY
52968: PUSH
52969: LD_INT 2
52971: ARRAY
52972: PPUSH
52973: CALL_OW 297
52977: PUSH
52978: LD_VAR 0 5
52982: LESS
52983: IFFALSE 53046
// begin hex := hexes [ i ] ;
52985: LD_ADDR_VAR 0 7
52989: PUSH
52990: LD_VAR 0 2
52994: PUSH
52995: LD_VAR 0 4
52999: ARRAY
53000: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
53001: LD_ADDR_VAR 0 5
53005: PUSH
53006: LD_VAR 0 1
53010: PPUSH
53011: LD_VAR 0 2
53015: PUSH
53016: LD_VAR 0 4
53020: ARRAY
53021: PUSH
53022: LD_INT 1
53024: ARRAY
53025: PPUSH
53026: LD_VAR 0 2
53030: PUSH
53031: LD_VAR 0 4
53035: ARRAY
53036: PUSH
53037: LD_INT 2
53039: ARRAY
53040: PPUSH
53041: CALL_OW 297
53045: ST_TO_ADDR
// end ; end ;
53046: GO 52935
53048: POP
53049: POP
// result := hex ;
53050: LD_ADDR_VAR 0 3
53054: PUSH
53055: LD_VAR 0 7
53059: ST_TO_ADDR
// end ;
53060: LD_VAR 0 3
53064: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
53065: LD_INT 0
53067: PPUSH
53068: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
53069: LD_VAR 0 1
53073: NOT
53074: PUSH
53075: LD_VAR 0 1
53079: PUSH
53080: LD_INT 21
53082: PUSH
53083: LD_INT 2
53085: PUSH
53086: EMPTY
53087: LIST
53088: LIST
53089: PUSH
53090: LD_INT 23
53092: PUSH
53093: LD_INT 2
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: PUSH
53100: EMPTY
53101: LIST
53102: LIST
53103: PPUSH
53104: CALL_OW 69
53108: IN
53109: NOT
53110: OR
53111: IFFALSE 53115
// exit ;
53113: GO 53162
// for i = 1 to 3 do
53115: LD_ADDR_VAR 0 3
53119: PUSH
53120: DOUBLE
53121: LD_INT 1
53123: DEC
53124: ST_TO_ADDR
53125: LD_INT 3
53127: PUSH
53128: FOR_TO
53129: IFFALSE 53160
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
53131: LD_VAR 0 1
53135: PPUSH
53136: CALL_OW 250
53140: PPUSH
53141: LD_VAR 0 1
53145: PPUSH
53146: CALL_OW 251
53150: PPUSH
53151: LD_INT 1
53153: PPUSH
53154: CALL_OW 453
53158: GO 53128
53160: POP
53161: POP
// end ;
53162: LD_VAR 0 2
53166: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
53167: LD_INT 0
53169: PPUSH
53170: PPUSH
53171: PPUSH
53172: PPUSH
53173: PPUSH
53174: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
53175: LD_VAR 0 1
53179: NOT
53180: PUSH
53181: LD_VAR 0 2
53185: NOT
53186: OR
53187: PUSH
53188: LD_VAR 0 1
53192: PPUSH
53193: CALL_OW 314
53197: OR
53198: IFFALSE 53202
// exit ;
53200: GO 53643
// x := GetX ( enemy_unit ) ;
53202: LD_ADDR_VAR 0 7
53206: PUSH
53207: LD_VAR 0 2
53211: PPUSH
53212: CALL_OW 250
53216: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
53217: LD_ADDR_VAR 0 8
53221: PUSH
53222: LD_VAR 0 2
53226: PPUSH
53227: CALL_OW 251
53231: ST_TO_ADDR
// if not x or not y then
53232: LD_VAR 0 7
53236: NOT
53237: PUSH
53238: LD_VAR 0 8
53242: NOT
53243: OR
53244: IFFALSE 53248
// exit ;
53246: GO 53643
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
53248: LD_ADDR_VAR 0 6
53252: PUSH
53253: LD_VAR 0 7
53257: PPUSH
53258: LD_INT 0
53260: PPUSH
53261: LD_INT 4
53263: PPUSH
53264: CALL_OW 272
53268: PUSH
53269: LD_VAR 0 8
53273: PPUSH
53274: LD_INT 0
53276: PPUSH
53277: LD_INT 4
53279: PPUSH
53280: CALL_OW 273
53284: PUSH
53285: EMPTY
53286: LIST
53287: LIST
53288: PUSH
53289: LD_VAR 0 7
53293: PPUSH
53294: LD_INT 1
53296: PPUSH
53297: LD_INT 4
53299: PPUSH
53300: CALL_OW 272
53304: PUSH
53305: LD_VAR 0 8
53309: PPUSH
53310: LD_INT 1
53312: PPUSH
53313: LD_INT 4
53315: PPUSH
53316: CALL_OW 273
53320: PUSH
53321: EMPTY
53322: LIST
53323: LIST
53324: PUSH
53325: LD_VAR 0 7
53329: PPUSH
53330: LD_INT 2
53332: PPUSH
53333: LD_INT 4
53335: PPUSH
53336: CALL_OW 272
53340: PUSH
53341: LD_VAR 0 8
53345: PPUSH
53346: LD_INT 2
53348: PPUSH
53349: LD_INT 4
53351: PPUSH
53352: CALL_OW 273
53356: PUSH
53357: EMPTY
53358: LIST
53359: LIST
53360: PUSH
53361: LD_VAR 0 7
53365: PPUSH
53366: LD_INT 3
53368: PPUSH
53369: LD_INT 4
53371: PPUSH
53372: CALL_OW 272
53376: PUSH
53377: LD_VAR 0 8
53381: PPUSH
53382: LD_INT 3
53384: PPUSH
53385: LD_INT 4
53387: PPUSH
53388: CALL_OW 273
53392: PUSH
53393: EMPTY
53394: LIST
53395: LIST
53396: PUSH
53397: LD_VAR 0 7
53401: PPUSH
53402: LD_INT 4
53404: PPUSH
53405: LD_INT 4
53407: PPUSH
53408: CALL_OW 272
53412: PUSH
53413: LD_VAR 0 8
53417: PPUSH
53418: LD_INT 4
53420: PPUSH
53421: LD_INT 4
53423: PPUSH
53424: CALL_OW 273
53428: PUSH
53429: EMPTY
53430: LIST
53431: LIST
53432: PUSH
53433: LD_VAR 0 7
53437: PPUSH
53438: LD_INT 5
53440: PPUSH
53441: LD_INT 4
53443: PPUSH
53444: CALL_OW 272
53448: PUSH
53449: LD_VAR 0 8
53453: PPUSH
53454: LD_INT 5
53456: PPUSH
53457: LD_INT 4
53459: PPUSH
53460: CALL_OW 273
53464: PUSH
53465: EMPTY
53466: LIST
53467: LIST
53468: PUSH
53469: EMPTY
53470: LIST
53471: LIST
53472: LIST
53473: LIST
53474: LIST
53475: LIST
53476: ST_TO_ADDR
// for i = tmp downto 1 do
53477: LD_ADDR_VAR 0 4
53481: PUSH
53482: DOUBLE
53483: LD_VAR 0 6
53487: INC
53488: ST_TO_ADDR
53489: LD_INT 1
53491: PUSH
53492: FOR_DOWNTO
53493: IFFALSE 53594
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
53495: LD_VAR 0 6
53499: PUSH
53500: LD_VAR 0 4
53504: ARRAY
53505: PUSH
53506: LD_INT 1
53508: ARRAY
53509: PPUSH
53510: LD_VAR 0 6
53514: PUSH
53515: LD_VAR 0 4
53519: ARRAY
53520: PUSH
53521: LD_INT 2
53523: ARRAY
53524: PPUSH
53525: CALL_OW 488
53529: NOT
53530: PUSH
53531: LD_VAR 0 6
53535: PUSH
53536: LD_VAR 0 4
53540: ARRAY
53541: PUSH
53542: LD_INT 1
53544: ARRAY
53545: PPUSH
53546: LD_VAR 0 6
53550: PUSH
53551: LD_VAR 0 4
53555: ARRAY
53556: PUSH
53557: LD_INT 2
53559: ARRAY
53560: PPUSH
53561: CALL_OW 428
53565: PUSH
53566: LD_INT 0
53568: NONEQUAL
53569: OR
53570: IFFALSE 53592
// tmp := Delete ( tmp , i ) ;
53572: LD_ADDR_VAR 0 6
53576: PUSH
53577: LD_VAR 0 6
53581: PPUSH
53582: LD_VAR 0 4
53586: PPUSH
53587: CALL_OW 3
53591: ST_TO_ADDR
53592: GO 53492
53594: POP
53595: POP
// j := GetClosestHex ( unit , tmp ) ;
53596: LD_ADDR_VAR 0 5
53600: PUSH
53601: LD_VAR 0 1
53605: PPUSH
53606: LD_VAR 0 6
53610: PPUSH
53611: CALL 52896 0 2
53615: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
53616: LD_VAR 0 1
53620: PPUSH
53621: LD_VAR 0 5
53625: PUSH
53626: LD_INT 1
53628: ARRAY
53629: PPUSH
53630: LD_VAR 0 5
53634: PUSH
53635: LD_INT 2
53637: ARRAY
53638: PPUSH
53639: CALL_OW 111
// end ;
53643: LD_VAR 0 3
53647: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
53648: LD_INT 0
53650: PPUSH
53651: PPUSH
53652: PPUSH
// uc_side = 0 ;
53653: LD_ADDR_OWVAR 20
53657: PUSH
53658: LD_INT 0
53660: ST_TO_ADDR
// uc_nation = 0 ;
53661: LD_ADDR_OWVAR 21
53665: PUSH
53666: LD_INT 0
53668: ST_TO_ADDR
// InitHc_All ( ) ;
53669: CALL_OW 584
// InitVc ;
53673: CALL_OW 20
// if mastodonts then
53677: LD_VAR 0 6
53681: IFFALSE 53748
// for i = 1 to mastodonts do
53683: LD_ADDR_VAR 0 11
53687: PUSH
53688: DOUBLE
53689: LD_INT 1
53691: DEC
53692: ST_TO_ADDR
53693: LD_VAR 0 6
53697: PUSH
53698: FOR_TO
53699: IFFALSE 53746
// begin vc_chassis := 31 ;
53701: LD_ADDR_OWVAR 37
53705: PUSH
53706: LD_INT 31
53708: ST_TO_ADDR
// vc_control := control_rider ;
53709: LD_ADDR_OWVAR 38
53713: PUSH
53714: LD_INT 4
53716: ST_TO_ADDR
// animal := CreateVehicle ;
53717: LD_ADDR_VAR 0 12
53721: PUSH
53722: CALL_OW 45
53726: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53727: LD_VAR 0 12
53731: PPUSH
53732: LD_VAR 0 8
53736: PPUSH
53737: LD_INT 0
53739: PPUSH
53740: CALL 55936 0 3
// end ;
53744: GO 53698
53746: POP
53747: POP
// if horses then
53748: LD_VAR 0 5
53752: IFFALSE 53819
// for i = 1 to horses do
53754: LD_ADDR_VAR 0 11
53758: PUSH
53759: DOUBLE
53760: LD_INT 1
53762: DEC
53763: ST_TO_ADDR
53764: LD_VAR 0 5
53768: PUSH
53769: FOR_TO
53770: IFFALSE 53817
// begin hc_class := 21 ;
53772: LD_ADDR_OWVAR 28
53776: PUSH
53777: LD_INT 21
53779: ST_TO_ADDR
// hc_gallery :=  ;
53780: LD_ADDR_OWVAR 33
53784: PUSH
53785: LD_STRING 
53787: ST_TO_ADDR
// animal := CreateHuman ;
53788: LD_ADDR_VAR 0 12
53792: PUSH
53793: CALL_OW 44
53797: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53798: LD_VAR 0 12
53802: PPUSH
53803: LD_VAR 0 8
53807: PPUSH
53808: LD_INT 0
53810: PPUSH
53811: CALL 55936 0 3
// end ;
53815: GO 53769
53817: POP
53818: POP
// if birds then
53819: LD_VAR 0 1
53823: IFFALSE 53890
// for i = 1 to birds do
53825: LD_ADDR_VAR 0 11
53829: PUSH
53830: DOUBLE
53831: LD_INT 1
53833: DEC
53834: ST_TO_ADDR
53835: LD_VAR 0 1
53839: PUSH
53840: FOR_TO
53841: IFFALSE 53888
// begin hc_class = 18 ;
53843: LD_ADDR_OWVAR 28
53847: PUSH
53848: LD_INT 18
53850: ST_TO_ADDR
// hc_gallery =  ;
53851: LD_ADDR_OWVAR 33
53855: PUSH
53856: LD_STRING 
53858: ST_TO_ADDR
// animal := CreateHuman ;
53859: LD_ADDR_VAR 0 12
53863: PUSH
53864: CALL_OW 44
53868: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53869: LD_VAR 0 12
53873: PPUSH
53874: LD_VAR 0 8
53878: PPUSH
53879: LD_INT 0
53881: PPUSH
53882: CALL 55936 0 3
// end ;
53886: GO 53840
53888: POP
53889: POP
// if tigers then
53890: LD_VAR 0 2
53894: IFFALSE 53978
// for i = 1 to tigers do
53896: LD_ADDR_VAR 0 11
53900: PUSH
53901: DOUBLE
53902: LD_INT 1
53904: DEC
53905: ST_TO_ADDR
53906: LD_VAR 0 2
53910: PUSH
53911: FOR_TO
53912: IFFALSE 53976
// begin hc_class = class_tiger ;
53914: LD_ADDR_OWVAR 28
53918: PUSH
53919: LD_INT 14
53921: ST_TO_ADDR
// hc_gallery =  ;
53922: LD_ADDR_OWVAR 33
53926: PUSH
53927: LD_STRING 
53929: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
53930: LD_ADDR_OWVAR 35
53934: PUSH
53935: LD_INT 7
53937: NEG
53938: PPUSH
53939: LD_INT 7
53941: PPUSH
53942: CALL_OW 12
53946: ST_TO_ADDR
// animal := CreateHuman ;
53947: LD_ADDR_VAR 0 12
53951: PUSH
53952: CALL_OW 44
53956: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
53957: LD_VAR 0 12
53961: PPUSH
53962: LD_VAR 0 8
53966: PPUSH
53967: LD_INT 0
53969: PPUSH
53970: CALL 55936 0 3
// end ;
53974: GO 53911
53976: POP
53977: POP
// if apemans then
53978: LD_VAR 0 3
53982: IFFALSE 54105
// for i = 1 to apemans do
53984: LD_ADDR_VAR 0 11
53988: PUSH
53989: DOUBLE
53990: LD_INT 1
53992: DEC
53993: ST_TO_ADDR
53994: LD_VAR 0 3
53998: PUSH
53999: FOR_TO
54000: IFFALSE 54103
// begin hc_class = class_apeman ;
54002: LD_ADDR_OWVAR 28
54006: PUSH
54007: LD_INT 12
54009: ST_TO_ADDR
// hc_gallery =  ;
54010: LD_ADDR_OWVAR 33
54014: PUSH
54015: LD_STRING 
54017: ST_TO_ADDR
// hc_agressivity = rand ( - 5 , 5 ) ;
54018: LD_ADDR_OWVAR 35
54022: PUSH
54023: LD_INT 5
54025: NEG
54026: PPUSH
54027: LD_INT 5
54029: PPUSH
54030: CALL_OW 12
54034: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
54035: LD_ADDR_OWVAR 31
54039: PUSH
54040: LD_INT 1
54042: PPUSH
54043: LD_INT 3
54045: PPUSH
54046: CALL_OW 12
54050: PUSH
54051: LD_INT 1
54053: PPUSH
54054: LD_INT 3
54056: PPUSH
54057: CALL_OW 12
54061: PUSH
54062: LD_INT 0
54064: PUSH
54065: LD_INT 0
54067: PUSH
54068: EMPTY
54069: LIST
54070: LIST
54071: LIST
54072: LIST
54073: ST_TO_ADDR
// animal := CreateHuman ;
54074: LD_ADDR_VAR 0 12
54078: PUSH
54079: CALL_OW 44
54083: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54084: LD_VAR 0 12
54088: PPUSH
54089: LD_VAR 0 8
54093: PPUSH
54094: LD_INT 0
54096: PPUSH
54097: CALL 55936 0 3
// end ;
54101: GO 53999
54103: POP
54104: POP
// if enchidnas then
54105: LD_VAR 0 4
54109: IFFALSE 54176
// for i = 1 to enchidnas do
54111: LD_ADDR_VAR 0 11
54115: PUSH
54116: DOUBLE
54117: LD_INT 1
54119: DEC
54120: ST_TO_ADDR
54121: LD_VAR 0 4
54125: PUSH
54126: FOR_TO
54127: IFFALSE 54174
// begin hc_class = 13 ;
54129: LD_ADDR_OWVAR 28
54133: PUSH
54134: LD_INT 13
54136: ST_TO_ADDR
// hc_gallery =  ;
54137: LD_ADDR_OWVAR 33
54141: PUSH
54142: LD_STRING 
54144: ST_TO_ADDR
// animal := CreateHuman ;
54145: LD_ADDR_VAR 0 12
54149: PUSH
54150: CALL_OW 44
54154: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
54155: LD_VAR 0 12
54159: PPUSH
54160: LD_VAR 0 8
54164: PPUSH
54165: LD_INT 0
54167: PPUSH
54168: CALL 55936 0 3
// end ;
54172: GO 54126
54174: POP
54175: POP
// if fishes then
54176: LD_VAR 0 7
54180: IFFALSE 54247
// for i = 1 to fishes do
54182: LD_ADDR_VAR 0 11
54186: PUSH
54187: DOUBLE
54188: LD_INT 1
54190: DEC
54191: ST_TO_ADDR
54192: LD_VAR 0 7
54196: PUSH
54197: FOR_TO
54198: IFFALSE 54245
// begin hc_class = 20 ;
54200: LD_ADDR_OWVAR 28
54204: PUSH
54205: LD_INT 20
54207: ST_TO_ADDR
// hc_gallery =  ;
54208: LD_ADDR_OWVAR 33
54212: PUSH
54213: LD_STRING 
54215: ST_TO_ADDR
// animal := CreateHuman ;
54216: LD_ADDR_VAR 0 12
54220: PUSH
54221: CALL_OW 44
54225: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
54226: LD_VAR 0 12
54230: PPUSH
54231: LD_VAR 0 9
54235: PPUSH
54236: LD_INT 0
54238: PPUSH
54239: CALL 55936 0 3
// end ;
54243: GO 54197
54245: POP
54246: POP
// end ;
54247: LD_VAR 0 10
54251: RET
// export function WantHeal ( sci , unit ) ; begin
54252: LD_INT 0
54254: PPUSH
// if GetTaskList ( sci ) > 0 then
54255: LD_VAR 0 1
54259: PPUSH
54260: CALL_OW 437
54264: PUSH
54265: LD_INT 0
54267: GREATER
54268: IFFALSE 54338
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
54270: LD_VAR 0 1
54274: PPUSH
54275: CALL_OW 437
54279: PUSH
54280: LD_INT 1
54282: ARRAY
54283: PUSH
54284: LD_INT 1
54286: ARRAY
54287: PUSH
54288: LD_STRING l
54290: EQUAL
54291: PUSH
54292: LD_VAR 0 1
54296: PPUSH
54297: CALL_OW 437
54301: PUSH
54302: LD_INT 1
54304: ARRAY
54305: PUSH
54306: LD_INT 4
54308: ARRAY
54309: PUSH
54310: LD_VAR 0 2
54314: EQUAL
54315: AND
54316: IFFALSE 54328
// result := true else
54318: LD_ADDR_VAR 0 3
54322: PUSH
54323: LD_INT 1
54325: ST_TO_ADDR
54326: GO 54336
// result := false ;
54328: LD_ADDR_VAR 0 3
54332: PUSH
54333: LD_INT 0
54335: ST_TO_ADDR
// end else
54336: GO 54346
// result := false ;
54338: LD_ADDR_VAR 0 3
54342: PUSH
54343: LD_INT 0
54345: ST_TO_ADDR
// end ;
54346: LD_VAR 0 3
54350: RET
// export function HealTarget ( sci ) ; begin
54351: LD_INT 0
54353: PPUSH
// if not sci then
54354: LD_VAR 0 1
54358: NOT
54359: IFFALSE 54363
// exit ;
54361: GO 54428
// result := 0 ;
54363: LD_ADDR_VAR 0 2
54367: PUSH
54368: LD_INT 0
54370: ST_TO_ADDR
// if GetTaskList ( sci ) then
54371: LD_VAR 0 1
54375: PPUSH
54376: CALL_OW 437
54380: IFFALSE 54428
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
54382: LD_VAR 0 1
54386: PPUSH
54387: CALL_OW 437
54391: PUSH
54392: LD_INT 1
54394: ARRAY
54395: PUSH
54396: LD_INT 1
54398: ARRAY
54399: PUSH
54400: LD_STRING l
54402: EQUAL
54403: IFFALSE 54428
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
54405: LD_ADDR_VAR 0 2
54409: PUSH
54410: LD_VAR 0 1
54414: PPUSH
54415: CALL_OW 437
54419: PUSH
54420: LD_INT 1
54422: ARRAY
54423: PUSH
54424: LD_INT 4
54426: ARRAY
54427: ST_TO_ADDR
// end ;
54428: LD_VAR 0 2
54432: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
54433: LD_INT 0
54435: PPUSH
54436: PPUSH
54437: PPUSH
54438: PPUSH
// if not base_units then
54439: LD_VAR 0 1
54443: NOT
54444: IFFALSE 54448
// exit ;
54446: GO 54535
// result := false ;
54448: LD_ADDR_VAR 0 2
54452: PUSH
54453: LD_INT 0
54455: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
54456: LD_ADDR_VAR 0 5
54460: PUSH
54461: LD_VAR 0 1
54465: PPUSH
54466: LD_INT 21
54468: PUSH
54469: LD_INT 3
54471: PUSH
54472: EMPTY
54473: LIST
54474: LIST
54475: PPUSH
54476: CALL_OW 72
54480: ST_TO_ADDR
// if not tmp then
54481: LD_VAR 0 5
54485: NOT
54486: IFFALSE 54490
// exit ;
54488: GO 54535
// for i in tmp do
54490: LD_ADDR_VAR 0 3
54494: PUSH
54495: LD_VAR 0 5
54499: PUSH
54500: FOR_IN
54501: IFFALSE 54533
// begin result := EnemyInRange ( i , 22 ) ;
54503: LD_ADDR_VAR 0 2
54507: PUSH
54508: LD_VAR 0 3
54512: PPUSH
54513: LD_INT 22
54515: PPUSH
54516: CALL 52771 0 2
54520: ST_TO_ADDR
// if result then
54521: LD_VAR 0 2
54525: IFFALSE 54531
// exit ;
54527: POP
54528: POP
54529: GO 54535
// end ;
54531: GO 54500
54533: POP
54534: POP
// end ;
54535: LD_VAR 0 2
54539: RET
// export function FilterByTag ( units , tag ) ; var i ; begin
54540: LD_INT 0
54542: PPUSH
54543: PPUSH
// if not units then
54544: LD_VAR 0 1
54548: NOT
54549: IFFALSE 54553
// exit ;
54551: GO 54623
// result := [ ] ;
54553: LD_ADDR_VAR 0 3
54557: PUSH
54558: EMPTY
54559: ST_TO_ADDR
// for i in units do
54560: LD_ADDR_VAR 0 4
54564: PUSH
54565: LD_VAR 0 1
54569: PUSH
54570: FOR_IN
54571: IFFALSE 54621
// if GetTag ( i ) = tag then
54573: LD_VAR 0 4
54577: PPUSH
54578: CALL_OW 110
54582: PUSH
54583: LD_VAR 0 2
54587: EQUAL
54588: IFFALSE 54619
// result := Insert ( result , result + 1 , i ) ;
54590: LD_ADDR_VAR 0 3
54594: PUSH
54595: LD_VAR 0 3
54599: PPUSH
54600: LD_VAR 0 3
54604: PUSH
54605: LD_INT 1
54607: PLUS
54608: PPUSH
54609: LD_VAR 0 4
54613: PPUSH
54614: CALL_OW 2
54618: ST_TO_ADDR
54619: GO 54570
54621: POP
54622: POP
// end ;
54623: LD_VAR 0 3
54627: RET
// export function IsDriver ( un ) ; begin
54628: LD_INT 0
54630: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
54631: LD_ADDR_VAR 0 2
54635: PUSH
54636: LD_VAR 0 1
54640: PUSH
54641: LD_INT 55
54643: PUSH
54644: EMPTY
54645: LIST
54646: PPUSH
54647: CALL_OW 69
54651: IN
54652: ST_TO_ADDR
// end ;
54653: LD_VAR 0 2
54657: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
54658: LD_INT 0
54660: PPUSH
54661: PPUSH
// list := [ ] ;
54662: LD_ADDR_VAR 0 5
54666: PUSH
54667: EMPTY
54668: ST_TO_ADDR
// case d of 0 :
54669: LD_VAR 0 3
54673: PUSH
54674: LD_INT 0
54676: DOUBLE
54677: EQUAL
54678: IFTRUE 54682
54680: GO 54815
54682: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
54683: LD_ADDR_VAR 0 5
54687: PUSH
54688: LD_VAR 0 1
54692: PUSH
54693: LD_INT 4
54695: MINUS
54696: PUSH
54697: LD_VAR 0 2
54701: PUSH
54702: LD_INT 4
54704: MINUS
54705: PUSH
54706: LD_INT 2
54708: PUSH
54709: EMPTY
54710: LIST
54711: LIST
54712: LIST
54713: PUSH
54714: LD_VAR 0 1
54718: PUSH
54719: LD_INT 3
54721: MINUS
54722: PUSH
54723: LD_VAR 0 2
54727: PUSH
54728: LD_INT 1
54730: PUSH
54731: EMPTY
54732: LIST
54733: LIST
54734: LIST
54735: PUSH
54736: LD_VAR 0 1
54740: PUSH
54741: LD_INT 4
54743: PLUS
54744: PUSH
54745: LD_VAR 0 2
54749: PUSH
54750: LD_INT 4
54752: PUSH
54753: EMPTY
54754: LIST
54755: LIST
54756: LIST
54757: PUSH
54758: LD_VAR 0 1
54762: PUSH
54763: LD_INT 3
54765: PLUS
54766: PUSH
54767: LD_VAR 0 2
54771: PUSH
54772: LD_INT 3
54774: PLUS
54775: PUSH
54776: LD_INT 5
54778: PUSH
54779: EMPTY
54780: LIST
54781: LIST
54782: LIST
54783: PUSH
54784: LD_VAR 0 1
54788: PUSH
54789: LD_VAR 0 2
54793: PUSH
54794: LD_INT 4
54796: PLUS
54797: PUSH
54798: LD_INT 0
54800: PUSH
54801: EMPTY
54802: LIST
54803: LIST
54804: LIST
54805: PUSH
54806: EMPTY
54807: LIST
54808: LIST
54809: LIST
54810: LIST
54811: LIST
54812: ST_TO_ADDR
// end ; 1 :
54813: GO 55513
54815: LD_INT 1
54817: DOUBLE
54818: EQUAL
54819: IFTRUE 54823
54821: GO 54956
54823: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
54824: LD_ADDR_VAR 0 5
54828: PUSH
54829: LD_VAR 0 1
54833: PUSH
54834: LD_VAR 0 2
54838: PUSH
54839: LD_INT 4
54841: MINUS
54842: PUSH
54843: LD_INT 3
54845: PUSH
54846: EMPTY
54847: LIST
54848: LIST
54849: LIST
54850: PUSH
54851: LD_VAR 0 1
54855: PUSH
54856: LD_INT 3
54858: MINUS
54859: PUSH
54860: LD_VAR 0 2
54864: PUSH
54865: LD_INT 3
54867: MINUS
54868: PUSH
54869: LD_INT 2
54871: PUSH
54872: EMPTY
54873: LIST
54874: LIST
54875: LIST
54876: PUSH
54877: LD_VAR 0 1
54881: PUSH
54882: LD_INT 4
54884: MINUS
54885: PUSH
54886: LD_VAR 0 2
54890: PUSH
54891: LD_INT 1
54893: PUSH
54894: EMPTY
54895: LIST
54896: LIST
54897: LIST
54898: PUSH
54899: LD_VAR 0 1
54903: PUSH
54904: LD_VAR 0 2
54908: PUSH
54909: LD_INT 3
54911: PLUS
54912: PUSH
54913: LD_INT 0
54915: PUSH
54916: EMPTY
54917: LIST
54918: LIST
54919: LIST
54920: PUSH
54921: LD_VAR 0 1
54925: PUSH
54926: LD_INT 4
54928: PLUS
54929: PUSH
54930: LD_VAR 0 2
54934: PUSH
54935: LD_INT 4
54937: PLUS
54938: PUSH
54939: LD_INT 5
54941: PUSH
54942: EMPTY
54943: LIST
54944: LIST
54945: LIST
54946: PUSH
54947: EMPTY
54948: LIST
54949: LIST
54950: LIST
54951: LIST
54952: LIST
54953: ST_TO_ADDR
// end ; 2 :
54954: GO 55513
54956: LD_INT 2
54958: DOUBLE
54959: EQUAL
54960: IFTRUE 54964
54962: GO 55093
54964: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
54965: LD_ADDR_VAR 0 5
54969: PUSH
54970: LD_VAR 0 1
54974: PUSH
54975: LD_VAR 0 2
54979: PUSH
54980: LD_INT 3
54982: MINUS
54983: PUSH
54984: LD_INT 3
54986: PUSH
54987: EMPTY
54988: LIST
54989: LIST
54990: LIST
54991: PUSH
54992: LD_VAR 0 1
54996: PUSH
54997: LD_INT 4
54999: PLUS
55000: PUSH
55001: LD_VAR 0 2
55005: PUSH
55006: LD_INT 4
55008: PUSH
55009: EMPTY
55010: LIST
55011: LIST
55012: LIST
55013: PUSH
55014: LD_VAR 0 1
55018: PUSH
55019: LD_VAR 0 2
55023: PUSH
55024: LD_INT 4
55026: PLUS
55027: PUSH
55028: LD_INT 0
55030: PUSH
55031: EMPTY
55032: LIST
55033: LIST
55034: LIST
55035: PUSH
55036: LD_VAR 0 1
55040: PUSH
55041: LD_INT 3
55043: MINUS
55044: PUSH
55045: LD_VAR 0 2
55049: PUSH
55050: LD_INT 1
55052: PUSH
55053: EMPTY
55054: LIST
55055: LIST
55056: LIST
55057: PUSH
55058: LD_VAR 0 1
55062: PUSH
55063: LD_INT 4
55065: MINUS
55066: PUSH
55067: LD_VAR 0 2
55071: PUSH
55072: LD_INT 4
55074: MINUS
55075: PUSH
55076: LD_INT 2
55078: PUSH
55079: EMPTY
55080: LIST
55081: LIST
55082: LIST
55083: PUSH
55084: EMPTY
55085: LIST
55086: LIST
55087: LIST
55088: LIST
55089: LIST
55090: ST_TO_ADDR
// end ; 3 :
55091: GO 55513
55093: LD_INT 3
55095: DOUBLE
55096: EQUAL
55097: IFTRUE 55101
55099: GO 55234
55101: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
55102: LD_ADDR_VAR 0 5
55106: PUSH
55107: LD_VAR 0 1
55111: PUSH
55112: LD_INT 3
55114: PLUS
55115: PUSH
55116: LD_VAR 0 2
55120: PUSH
55121: LD_INT 4
55123: PUSH
55124: EMPTY
55125: LIST
55126: LIST
55127: LIST
55128: PUSH
55129: LD_VAR 0 1
55133: PUSH
55134: LD_INT 4
55136: PLUS
55137: PUSH
55138: LD_VAR 0 2
55142: PUSH
55143: LD_INT 4
55145: PLUS
55146: PUSH
55147: LD_INT 5
55149: PUSH
55150: EMPTY
55151: LIST
55152: LIST
55153: LIST
55154: PUSH
55155: LD_VAR 0 1
55159: PUSH
55160: LD_INT 4
55162: MINUS
55163: PUSH
55164: LD_VAR 0 2
55168: PUSH
55169: LD_INT 1
55171: PUSH
55172: EMPTY
55173: LIST
55174: LIST
55175: LIST
55176: PUSH
55177: LD_VAR 0 1
55181: PUSH
55182: LD_VAR 0 2
55186: PUSH
55187: LD_INT 4
55189: MINUS
55190: PUSH
55191: LD_INT 3
55193: PUSH
55194: EMPTY
55195: LIST
55196: LIST
55197: LIST
55198: PUSH
55199: LD_VAR 0 1
55203: PUSH
55204: LD_INT 3
55206: MINUS
55207: PUSH
55208: LD_VAR 0 2
55212: PUSH
55213: LD_INT 3
55215: MINUS
55216: PUSH
55217: LD_INT 2
55219: PUSH
55220: EMPTY
55221: LIST
55222: LIST
55223: LIST
55224: PUSH
55225: EMPTY
55226: LIST
55227: LIST
55228: LIST
55229: LIST
55230: LIST
55231: ST_TO_ADDR
// end ; 4 :
55232: GO 55513
55234: LD_INT 4
55236: DOUBLE
55237: EQUAL
55238: IFTRUE 55242
55240: GO 55375
55242: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
55243: LD_ADDR_VAR 0 5
55247: PUSH
55248: LD_VAR 0 1
55252: PUSH
55253: LD_VAR 0 2
55257: PUSH
55258: LD_INT 4
55260: PLUS
55261: PUSH
55262: LD_INT 0
55264: PUSH
55265: EMPTY
55266: LIST
55267: LIST
55268: LIST
55269: PUSH
55270: LD_VAR 0 1
55274: PUSH
55275: LD_INT 3
55277: PLUS
55278: PUSH
55279: LD_VAR 0 2
55283: PUSH
55284: LD_INT 3
55286: PLUS
55287: PUSH
55288: LD_INT 5
55290: PUSH
55291: EMPTY
55292: LIST
55293: LIST
55294: LIST
55295: PUSH
55296: LD_VAR 0 1
55300: PUSH
55301: LD_INT 4
55303: PLUS
55304: PUSH
55305: LD_VAR 0 2
55309: PUSH
55310: LD_INT 4
55312: PUSH
55313: EMPTY
55314: LIST
55315: LIST
55316: LIST
55317: PUSH
55318: LD_VAR 0 1
55322: PUSH
55323: LD_VAR 0 2
55327: PUSH
55328: LD_INT 3
55330: MINUS
55331: PUSH
55332: LD_INT 3
55334: PUSH
55335: EMPTY
55336: LIST
55337: LIST
55338: LIST
55339: PUSH
55340: LD_VAR 0 1
55344: PUSH
55345: LD_INT 4
55347: MINUS
55348: PUSH
55349: LD_VAR 0 2
55353: PUSH
55354: LD_INT 4
55356: MINUS
55357: PUSH
55358: LD_INT 2
55360: PUSH
55361: EMPTY
55362: LIST
55363: LIST
55364: LIST
55365: PUSH
55366: EMPTY
55367: LIST
55368: LIST
55369: LIST
55370: LIST
55371: LIST
55372: ST_TO_ADDR
// end ; 5 :
55373: GO 55513
55375: LD_INT 5
55377: DOUBLE
55378: EQUAL
55379: IFTRUE 55383
55381: GO 55512
55383: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
55384: LD_ADDR_VAR 0 5
55388: PUSH
55389: LD_VAR 0 1
55393: PUSH
55394: LD_INT 4
55396: MINUS
55397: PUSH
55398: LD_VAR 0 2
55402: PUSH
55403: LD_INT 1
55405: PUSH
55406: EMPTY
55407: LIST
55408: LIST
55409: LIST
55410: PUSH
55411: LD_VAR 0 1
55415: PUSH
55416: LD_VAR 0 2
55420: PUSH
55421: LD_INT 4
55423: MINUS
55424: PUSH
55425: LD_INT 3
55427: PUSH
55428: EMPTY
55429: LIST
55430: LIST
55431: LIST
55432: PUSH
55433: LD_VAR 0 1
55437: PUSH
55438: LD_INT 4
55440: PLUS
55441: PUSH
55442: LD_VAR 0 2
55446: PUSH
55447: LD_INT 4
55449: PLUS
55450: PUSH
55451: LD_INT 5
55453: PUSH
55454: EMPTY
55455: LIST
55456: LIST
55457: LIST
55458: PUSH
55459: LD_VAR 0 1
55463: PUSH
55464: LD_INT 3
55466: PLUS
55467: PUSH
55468: LD_VAR 0 2
55472: PUSH
55473: LD_INT 4
55475: PUSH
55476: EMPTY
55477: LIST
55478: LIST
55479: LIST
55480: PUSH
55481: LD_VAR 0 1
55485: PUSH
55486: LD_VAR 0 2
55490: PUSH
55491: LD_INT 3
55493: PLUS
55494: PUSH
55495: LD_INT 0
55497: PUSH
55498: EMPTY
55499: LIST
55500: LIST
55501: LIST
55502: PUSH
55503: EMPTY
55504: LIST
55505: LIST
55506: LIST
55507: LIST
55508: LIST
55509: ST_TO_ADDR
// end ; end ;
55510: GO 55513
55512: POP
// result := list ;
55513: LD_ADDR_VAR 0 4
55517: PUSH
55518: LD_VAR 0 5
55522: ST_TO_ADDR
// end ;
55523: LD_VAR 0 4
55527: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
55528: LD_INT 0
55530: PPUSH
55531: PPUSH
55532: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
55533: LD_VAR 0 1
55537: NOT
55538: PUSH
55539: LD_VAR 0 2
55543: PUSH
55544: LD_INT 1
55546: PUSH
55547: LD_INT 2
55549: PUSH
55550: LD_INT 3
55552: PUSH
55553: LD_INT 4
55555: PUSH
55556: EMPTY
55557: LIST
55558: LIST
55559: LIST
55560: LIST
55561: IN
55562: NOT
55563: OR
55564: IFFALSE 55568
// exit ;
55566: GO 55660
// tmp := [ ] ;
55568: LD_ADDR_VAR 0 5
55572: PUSH
55573: EMPTY
55574: ST_TO_ADDR
// for i in units do
55575: LD_ADDR_VAR 0 4
55579: PUSH
55580: LD_VAR 0 1
55584: PUSH
55585: FOR_IN
55586: IFFALSE 55629
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
55588: LD_ADDR_VAR 0 5
55592: PUSH
55593: LD_VAR 0 5
55597: PPUSH
55598: LD_VAR 0 5
55602: PUSH
55603: LD_INT 1
55605: PLUS
55606: PPUSH
55607: LD_VAR 0 4
55611: PPUSH
55612: LD_VAR 0 2
55616: PPUSH
55617: CALL_OW 259
55621: PPUSH
55622: CALL_OW 2
55626: ST_TO_ADDR
55627: GO 55585
55629: POP
55630: POP
// if not tmp then
55631: LD_VAR 0 5
55635: NOT
55636: IFFALSE 55640
// exit ;
55638: GO 55660
// result := SortListByListDesc ( units , tmp ) ;
55640: LD_ADDR_VAR 0 3
55644: PUSH
55645: LD_VAR 0 1
55649: PPUSH
55650: LD_VAR 0 5
55654: PPUSH
55655: CALL_OW 77
55659: ST_TO_ADDR
// end ;
55660: LD_VAR 0 3
55664: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
55665: LD_INT 0
55667: PPUSH
55668: PPUSH
55669: PPUSH
// result := false ;
55670: LD_ADDR_VAR 0 3
55674: PUSH
55675: LD_INT 0
55677: ST_TO_ADDR
// x := GetX ( building ) ;
55678: LD_ADDR_VAR 0 4
55682: PUSH
55683: LD_VAR 0 2
55687: PPUSH
55688: CALL_OW 250
55692: ST_TO_ADDR
// y := GetY ( building ) ;
55693: LD_ADDR_VAR 0 5
55697: PUSH
55698: LD_VAR 0 2
55702: PPUSH
55703: CALL_OW 251
55707: ST_TO_ADDR
// if not building or not x or not y then
55708: LD_VAR 0 2
55712: NOT
55713: PUSH
55714: LD_VAR 0 4
55718: NOT
55719: OR
55720: PUSH
55721: LD_VAR 0 5
55725: NOT
55726: OR
55727: IFFALSE 55731
// exit ;
55729: GO 55823
// if GetTaskList ( unit ) then
55731: LD_VAR 0 1
55735: PPUSH
55736: CALL_OW 437
55740: IFFALSE 55823
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
55742: LD_STRING e
55744: PUSH
55745: LD_VAR 0 1
55749: PPUSH
55750: CALL_OW 437
55754: PUSH
55755: LD_INT 1
55757: ARRAY
55758: PUSH
55759: LD_INT 1
55761: ARRAY
55762: EQUAL
55763: PUSH
55764: LD_VAR 0 4
55768: PUSH
55769: LD_VAR 0 1
55773: PPUSH
55774: CALL_OW 437
55778: PUSH
55779: LD_INT 1
55781: ARRAY
55782: PUSH
55783: LD_INT 2
55785: ARRAY
55786: EQUAL
55787: AND
55788: PUSH
55789: LD_VAR 0 5
55793: PUSH
55794: LD_VAR 0 1
55798: PPUSH
55799: CALL_OW 437
55803: PUSH
55804: LD_INT 1
55806: ARRAY
55807: PUSH
55808: LD_INT 3
55810: ARRAY
55811: EQUAL
55812: AND
55813: IFFALSE 55823
// result := true end ;
55815: LD_ADDR_VAR 0 3
55819: PUSH
55820: LD_INT 1
55822: ST_TO_ADDR
// end ;
55823: LD_VAR 0 3
55827: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
55828: LD_INT 0
55830: PPUSH
// result := false ;
55831: LD_ADDR_VAR 0 4
55835: PUSH
55836: LD_INT 0
55838: ST_TO_ADDR
// if GetTaskList ( unit ) then
55839: LD_VAR 0 1
55843: PPUSH
55844: CALL_OW 437
55848: IFFALSE 55931
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
55850: LD_STRING M
55852: PUSH
55853: LD_VAR 0 1
55857: PPUSH
55858: CALL_OW 437
55862: PUSH
55863: LD_INT 1
55865: ARRAY
55866: PUSH
55867: LD_INT 1
55869: ARRAY
55870: EQUAL
55871: PUSH
55872: LD_VAR 0 2
55876: PUSH
55877: LD_VAR 0 1
55881: PPUSH
55882: CALL_OW 437
55886: PUSH
55887: LD_INT 1
55889: ARRAY
55890: PUSH
55891: LD_INT 2
55893: ARRAY
55894: EQUAL
55895: AND
55896: PUSH
55897: LD_VAR 0 3
55901: PUSH
55902: LD_VAR 0 1
55906: PPUSH
55907: CALL_OW 437
55911: PUSH
55912: LD_INT 1
55914: ARRAY
55915: PUSH
55916: LD_INT 3
55918: ARRAY
55919: EQUAL
55920: AND
55921: IFFALSE 55931
// result := true ;
55923: LD_ADDR_VAR 0 4
55927: PUSH
55928: LD_INT 1
55930: ST_TO_ADDR
// end ; end ;
55931: LD_VAR 0 4
55935: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
55936: LD_INT 0
55938: PPUSH
55939: PPUSH
55940: PPUSH
55941: PPUSH
// if not unit or not area then
55942: LD_VAR 0 1
55946: NOT
55947: PUSH
55948: LD_VAR 0 2
55952: NOT
55953: OR
55954: IFFALSE 55958
// exit ;
55956: GO 56122
// tmp := AreaToList ( area , i ) ;
55958: LD_ADDR_VAR 0 6
55962: PUSH
55963: LD_VAR 0 2
55967: PPUSH
55968: LD_VAR 0 5
55972: PPUSH
55973: CALL_OW 517
55977: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
55978: LD_ADDR_VAR 0 5
55982: PUSH
55983: DOUBLE
55984: LD_INT 1
55986: DEC
55987: ST_TO_ADDR
55988: LD_VAR 0 6
55992: PUSH
55993: LD_INT 1
55995: ARRAY
55996: PUSH
55997: FOR_TO
55998: IFFALSE 56120
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
56000: LD_ADDR_VAR 0 7
56004: PUSH
56005: LD_VAR 0 6
56009: PUSH
56010: LD_INT 1
56012: ARRAY
56013: PUSH
56014: LD_VAR 0 5
56018: ARRAY
56019: PUSH
56020: LD_VAR 0 6
56024: PUSH
56025: LD_INT 2
56027: ARRAY
56028: PUSH
56029: LD_VAR 0 5
56033: ARRAY
56034: PUSH
56035: EMPTY
56036: LIST
56037: LIST
56038: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
56039: LD_VAR 0 7
56043: PUSH
56044: LD_INT 1
56046: ARRAY
56047: PPUSH
56048: LD_VAR 0 7
56052: PUSH
56053: LD_INT 2
56055: ARRAY
56056: PPUSH
56057: CALL_OW 428
56061: PUSH
56062: LD_INT 0
56064: EQUAL
56065: IFFALSE 56118
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
56067: LD_VAR 0 1
56071: PPUSH
56072: LD_VAR 0 7
56076: PUSH
56077: LD_INT 1
56079: ARRAY
56080: PPUSH
56081: LD_VAR 0 7
56085: PUSH
56086: LD_INT 2
56088: ARRAY
56089: PPUSH
56090: LD_VAR 0 3
56094: PPUSH
56095: CALL_OW 48
// result := IsPlaced ( unit ) ;
56099: LD_ADDR_VAR 0 4
56103: PUSH
56104: LD_VAR 0 1
56108: PPUSH
56109: CALL_OW 305
56113: ST_TO_ADDR
// exit ;
56114: POP
56115: POP
56116: GO 56122
// end ; end ;
56118: GO 55997
56120: POP
56121: POP
// end ;
56122: LD_VAR 0 4
56126: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
56127: LD_INT 0
56129: PPUSH
56130: PPUSH
56131: PPUSH
// if not side or side > 8 then
56132: LD_VAR 0 1
56136: NOT
56137: PUSH
56138: LD_VAR 0 1
56142: PUSH
56143: LD_INT 8
56145: GREATER
56146: OR
56147: IFFALSE 56151
// exit ;
56149: GO 56338
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
56151: LD_ADDR_VAR 0 4
56155: PUSH
56156: LD_INT 22
56158: PUSH
56159: LD_VAR 0 1
56163: PUSH
56164: EMPTY
56165: LIST
56166: LIST
56167: PUSH
56168: LD_INT 21
56170: PUSH
56171: LD_INT 3
56173: PUSH
56174: EMPTY
56175: LIST
56176: LIST
56177: PUSH
56178: EMPTY
56179: LIST
56180: LIST
56181: PPUSH
56182: CALL_OW 69
56186: ST_TO_ADDR
// if not tmp then
56187: LD_VAR 0 4
56191: NOT
56192: IFFALSE 56196
// exit ;
56194: GO 56338
// enable_addtolog := true ;
56196: LD_ADDR_OWVAR 81
56200: PUSH
56201: LD_INT 1
56203: ST_TO_ADDR
// AddToLog ( [ ) ;
56204: LD_STRING [
56206: PPUSH
56207: CALL_OW 561
// for i in tmp do
56211: LD_ADDR_VAR 0 3
56215: PUSH
56216: LD_VAR 0 4
56220: PUSH
56221: FOR_IN
56222: IFFALSE 56329
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
56224: LD_STRING [
56226: PUSH
56227: LD_VAR 0 3
56231: PPUSH
56232: CALL_OW 266
56236: STR
56237: PUSH
56238: LD_STRING , 
56240: STR
56241: PUSH
56242: LD_VAR 0 3
56246: PPUSH
56247: CALL_OW 250
56251: STR
56252: PUSH
56253: LD_STRING , 
56255: STR
56256: PUSH
56257: LD_VAR 0 3
56261: PPUSH
56262: CALL_OW 251
56266: STR
56267: PUSH
56268: LD_STRING , 
56270: STR
56271: PUSH
56272: LD_VAR 0 3
56276: PPUSH
56277: CALL_OW 254
56281: STR
56282: PUSH
56283: LD_STRING , 
56285: STR
56286: PUSH
56287: LD_VAR 0 3
56291: PPUSH
56292: LD_INT 1
56294: PPUSH
56295: CALL_OW 268
56299: STR
56300: PUSH
56301: LD_STRING , 
56303: STR
56304: PUSH
56305: LD_VAR 0 3
56309: PPUSH
56310: LD_INT 2
56312: PPUSH
56313: CALL_OW 268
56317: STR
56318: PUSH
56319: LD_STRING ],
56321: STR
56322: PPUSH
56323: CALL_OW 561
// end ;
56327: GO 56221
56329: POP
56330: POP
// AddToLog ( ]; ) ;
56331: LD_STRING ];
56333: PPUSH
56334: CALL_OW 561
// end ;
56338: LD_VAR 0 2
56342: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
56343: LD_INT 0
56345: PPUSH
56346: PPUSH
56347: PPUSH
56348: PPUSH
56349: PPUSH
// if not area or not rate or not max then
56350: LD_VAR 0 1
56354: NOT
56355: PUSH
56356: LD_VAR 0 2
56360: NOT
56361: OR
56362: PUSH
56363: LD_VAR 0 4
56367: NOT
56368: OR
56369: IFFALSE 56373
// exit ;
56371: GO 56565
// while 1 do
56373: LD_INT 1
56375: IFFALSE 56565
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
56377: LD_ADDR_VAR 0 9
56381: PUSH
56382: LD_VAR 0 1
56386: PPUSH
56387: LD_INT 1
56389: PPUSH
56390: CALL_OW 287
56394: PUSH
56395: LD_INT 10
56397: MUL
56398: ST_TO_ADDR
// r := rate / 10 ;
56399: LD_ADDR_VAR 0 7
56403: PUSH
56404: LD_VAR 0 2
56408: PUSH
56409: LD_INT 10
56411: DIVREAL
56412: ST_TO_ADDR
// time := 1 1$00 ;
56413: LD_ADDR_VAR 0 8
56417: PUSH
56418: LD_INT 2100
56420: ST_TO_ADDR
// if amount < min then
56421: LD_VAR 0 9
56425: PUSH
56426: LD_VAR 0 3
56430: LESS
56431: IFFALSE 56449
// r := r * 2 else
56433: LD_ADDR_VAR 0 7
56437: PUSH
56438: LD_VAR 0 7
56442: PUSH
56443: LD_INT 2
56445: MUL
56446: ST_TO_ADDR
56447: GO 56475
// if amount > max then
56449: LD_VAR 0 9
56453: PUSH
56454: LD_VAR 0 4
56458: GREATER
56459: IFFALSE 56475
// r := r / 2 ;
56461: LD_ADDR_VAR 0 7
56465: PUSH
56466: LD_VAR 0 7
56470: PUSH
56471: LD_INT 2
56473: DIVREAL
56474: ST_TO_ADDR
// time := time / r ;
56475: LD_ADDR_VAR 0 8
56479: PUSH
56480: LD_VAR 0 8
56484: PUSH
56485: LD_VAR 0 7
56489: DIVREAL
56490: ST_TO_ADDR
// if time < 0 then
56491: LD_VAR 0 8
56495: PUSH
56496: LD_INT 0
56498: LESS
56499: IFFALSE 56516
// time := time * - 1 ;
56501: LD_ADDR_VAR 0 8
56505: PUSH
56506: LD_VAR 0 8
56510: PUSH
56511: LD_INT 1
56513: NEG
56514: MUL
56515: ST_TO_ADDR
// wait ( time ) ;
56516: LD_VAR 0 8
56520: PPUSH
56521: CALL_OW 67
// wait ( rand ( 0 0$01 , 0 0$25 ) ) ;
56525: LD_INT 35
56527: PPUSH
56528: LD_INT 875
56530: PPUSH
56531: CALL_OW 12
56535: PPUSH
56536: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
56540: LD_INT 1
56542: PPUSH
56543: LD_INT 5
56545: PPUSH
56546: CALL_OW 12
56550: PPUSH
56551: LD_VAR 0 1
56555: PPUSH
56556: LD_INT 1
56558: PPUSH
56559: CALL_OW 55
// end ;
56563: GO 56373
// end ;
56565: LD_VAR 0 5
56569: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
56570: LD_INT 0
56572: PPUSH
56573: PPUSH
56574: PPUSH
56575: PPUSH
56576: PPUSH
56577: PPUSH
56578: PPUSH
56579: PPUSH
// if not turrets or not factories then
56580: LD_VAR 0 1
56584: NOT
56585: PUSH
56586: LD_VAR 0 2
56590: NOT
56591: OR
56592: IFFALSE 56596
// exit ;
56594: GO 56903
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
56596: LD_ADDR_VAR 0 10
56600: PUSH
56601: LD_INT 5
56603: PUSH
56604: LD_INT 6
56606: PUSH
56607: EMPTY
56608: LIST
56609: LIST
56610: PUSH
56611: LD_INT 2
56613: PUSH
56614: LD_INT 4
56616: PUSH
56617: EMPTY
56618: LIST
56619: LIST
56620: PUSH
56621: LD_INT 3
56623: PUSH
56624: LD_INT 5
56626: PUSH
56627: EMPTY
56628: LIST
56629: LIST
56630: PUSH
56631: EMPTY
56632: LIST
56633: LIST
56634: LIST
56635: PUSH
56636: LD_INT 24
56638: PUSH
56639: LD_INT 25
56641: PUSH
56642: EMPTY
56643: LIST
56644: LIST
56645: PUSH
56646: LD_INT 23
56648: PUSH
56649: LD_INT 27
56651: PUSH
56652: EMPTY
56653: LIST
56654: LIST
56655: PUSH
56656: EMPTY
56657: LIST
56658: LIST
56659: PUSH
56660: LD_INT 42
56662: PUSH
56663: LD_INT 43
56665: PUSH
56666: EMPTY
56667: LIST
56668: LIST
56669: PUSH
56670: LD_INT 44
56672: PUSH
56673: LD_INT 46
56675: PUSH
56676: EMPTY
56677: LIST
56678: LIST
56679: PUSH
56680: LD_INT 45
56682: PUSH
56683: LD_INT 47
56685: PUSH
56686: EMPTY
56687: LIST
56688: LIST
56689: PUSH
56690: EMPTY
56691: LIST
56692: LIST
56693: LIST
56694: PUSH
56695: EMPTY
56696: LIST
56697: LIST
56698: LIST
56699: ST_TO_ADDR
// result := [ ] ;
56700: LD_ADDR_VAR 0 3
56704: PUSH
56705: EMPTY
56706: ST_TO_ADDR
// for i in turrets do
56707: LD_ADDR_VAR 0 4
56711: PUSH
56712: LD_VAR 0 1
56716: PUSH
56717: FOR_IN
56718: IFFALSE 56901
// begin nat := GetNation ( i ) ;
56720: LD_ADDR_VAR 0 7
56724: PUSH
56725: LD_VAR 0 4
56729: PPUSH
56730: CALL_OW 248
56734: ST_TO_ADDR
// weapon := 0 ;
56735: LD_ADDR_VAR 0 8
56739: PUSH
56740: LD_INT 0
56742: ST_TO_ADDR
// if not nat then
56743: LD_VAR 0 7
56747: NOT
56748: IFFALSE 56752
// continue ;
56750: GO 56717
// for j in list [ nat ] do
56752: LD_ADDR_VAR 0 5
56756: PUSH
56757: LD_VAR 0 10
56761: PUSH
56762: LD_VAR 0 7
56766: ARRAY
56767: PUSH
56768: FOR_IN
56769: IFFALSE 56810
// if GetBWeapon ( i ) = j [ 1 ] then
56771: LD_VAR 0 4
56775: PPUSH
56776: CALL_OW 269
56780: PUSH
56781: LD_VAR 0 5
56785: PUSH
56786: LD_INT 1
56788: ARRAY
56789: EQUAL
56790: IFFALSE 56808
// begin weapon := j [ 2 ] ;
56792: LD_ADDR_VAR 0 8
56796: PUSH
56797: LD_VAR 0 5
56801: PUSH
56802: LD_INT 2
56804: ARRAY
56805: ST_TO_ADDR
// break ;
56806: GO 56810
// end ;
56808: GO 56768
56810: POP
56811: POP
// if not weapon then
56812: LD_VAR 0 8
56816: NOT
56817: IFFALSE 56821
// continue ;
56819: GO 56717
// for k in factories do
56821: LD_ADDR_VAR 0 6
56825: PUSH
56826: LD_VAR 0 2
56830: PUSH
56831: FOR_IN
56832: IFFALSE 56897
// begin weapons := AvailableWeaponList ( k ) ;
56834: LD_ADDR_VAR 0 9
56838: PUSH
56839: LD_VAR 0 6
56843: PPUSH
56844: CALL_OW 478
56848: ST_TO_ADDR
// if not weapons then
56849: LD_VAR 0 9
56853: NOT
56854: IFFALSE 56858
// continue ;
56856: GO 56831
// if weapon in weapons then
56858: LD_VAR 0 8
56862: PUSH
56863: LD_VAR 0 9
56867: IN
56868: IFFALSE 56895
// begin result := [ i , weapon ] ;
56870: LD_ADDR_VAR 0 3
56874: PUSH
56875: LD_VAR 0 4
56879: PUSH
56880: LD_VAR 0 8
56884: PUSH
56885: EMPTY
56886: LIST
56887: LIST
56888: ST_TO_ADDR
// exit ;
56889: POP
56890: POP
56891: POP
56892: POP
56893: GO 56903
// end ; end ;
56895: GO 56831
56897: POP
56898: POP
// end ;
56899: GO 56717
56901: POP
56902: POP
// end ;
56903: LD_VAR 0 3
56907: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
56908: LD_INT 0
56910: PPUSH
// if not side or side > 8 then
56911: LD_VAR 0 3
56915: NOT
56916: PUSH
56917: LD_VAR 0 3
56921: PUSH
56922: LD_INT 8
56924: GREATER
56925: OR
56926: IFFALSE 56930
// exit ;
56928: GO 56989
// if not range then
56930: LD_VAR 0 4
56934: NOT
56935: IFFALSE 56946
// range := - 12 ;
56937: LD_ADDR_VAR 0 4
56941: PUSH
56942: LD_INT 12
56944: NEG
56945: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
56946: LD_VAR 0 1
56950: PPUSH
56951: LD_VAR 0 2
56955: PPUSH
56956: LD_VAR 0 3
56960: PPUSH
56961: LD_VAR 0 4
56965: PPUSH
56966: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
56970: LD_VAR 0 1
56974: PPUSH
56975: LD_VAR 0 2
56979: PPUSH
56980: LD_VAR 0 3
56984: PPUSH
56985: CALL_OW 331
// end ;
56989: LD_VAR 0 5
56993: RET
// export function Video ( mode ) ; begin
56994: LD_INT 0
56996: PPUSH
// ingame_video = mode ;
56997: LD_ADDR_OWVAR 52
57001: PUSH
57002: LD_VAR 0 1
57006: ST_TO_ADDR
// interface_hidden = mode ;
57007: LD_ADDR_OWVAR 54
57011: PUSH
57012: LD_VAR 0 1
57016: ST_TO_ADDR
// end ;
57017: LD_VAR 0 2
57021: RET
// export function Join ( array , element ) ; begin
57022: LD_INT 0
57024: PPUSH
// result := Replace ( array , array + 1 , element ) ;
57025: LD_ADDR_VAR 0 3
57029: PUSH
57030: LD_VAR 0 1
57034: PPUSH
57035: LD_VAR 0 1
57039: PUSH
57040: LD_INT 1
57042: PLUS
57043: PPUSH
57044: LD_VAR 0 2
57048: PPUSH
57049: CALL_OW 1
57053: ST_TO_ADDR
// end ;
57054: LD_VAR 0 3
57058: RET
// export function JoinUnion ( array , element ) ; begin
57059: LD_INT 0
57061: PPUSH
// result := array union element ;
57062: LD_ADDR_VAR 0 3
57066: PUSH
57067: LD_VAR 0 1
57071: PUSH
57072: LD_VAR 0 2
57076: UNION
57077: ST_TO_ADDR
// end ;
57078: LD_VAR 0 3
57082: RET
// export function GetBehemoths ( side ) ; begin
57083: LD_INT 0
57085: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
57086: LD_ADDR_VAR 0 2
57090: PUSH
57091: LD_INT 22
57093: PUSH
57094: LD_VAR 0 1
57098: PUSH
57099: EMPTY
57100: LIST
57101: LIST
57102: PUSH
57103: LD_INT 31
57105: PUSH
57106: LD_INT 25
57108: PUSH
57109: EMPTY
57110: LIST
57111: LIST
57112: PUSH
57113: EMPTY
57114: LIST
57115: LIST
57116: PPUSH
57117: CALL_OW 69
57121: ST_TO_ADDR
// end ;
57122: LD_VAR 0 2
57126: RET
// export function Shuffle ( array ) ; var i , index ; begin
57127: LD_INT 0
57129: PPUSH
57130: PPUSH
57131: PPUSH
// result := [ ] ;
57132: LD_ADDR_VAR 0 2
57136: PUSH
57137: EMPTY
57138: ST_TO_ADDR
// if not array then
57139: LD_VAR 0 1
57143: NOT
57144: IFFALSE 57148
// exit ;
57146: GO 57247
// Randomize ;
57148: CALL_OW 10
// for i = array downto 1 do
57152: LD_ADDR_VAR 0 3
57156: PUSH
57157: DOUBLE
57158: LD_VAR 0 1
57162: INC
57163: ST_TO_ADDR
57164: LD_INT 1
57166: PUSH
57167: FOR_DOWNTO
57168: IFFALSE 57245
// begin index := rand ( 1 , array ) ;
57170: LD_ADDR_VAR 0 4
57174: PUSH
57175: LD_INT 1
57177: PPUSH
57178: LD_VAR 0 1
57182: PPUSH
57183: CALL_OW 12
57187: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
57188: LD_ADDR_VAR 0 2
57192: PUSH
57193: LD_VAR 0 2
57197: PPUSH
57198: LD_VAR 0 2
57202: PUSH
57203: LD_INT 1
57205: PLUS
57206: PPUSH
57207: LD_VAR 0 1
57211: PUSH
57212: LD_VAR 0 4
57216: ARRAY
57217: PPUSH
57218: CALL_OW 2
57222: ST_TO_ADDR
// array := Delete ( array , index ) ;
57223: LD_ADDR_VAR 0 1
57227: PUSH
57228: LD_VAR 0 1
57232: PPUSH
57233: LD_VAR 0 4
57237: PPUSH
57238: CALL_OW 3
57242: ST_TO_ADDR
// end ;
57243: GO 57167
57245: POP
57246: POP
// end ;
57247: LD_VAR 0 2
57251: RET
// export function GetBaseMaterials ( base ) ; begin
57252: LD_INT 0
57254: PPUSH
// result := [ 0 , 0 , 0 ] ;
57255: LD_ADDR_VAR 0 2
57259: PUSH
57260: LD_INT 0
57262: PUSH
57263: LD_INT 0
57265: PUSH
57266: LD_INT 0
57268: PUSH
57269: EMPTY
57270: LIST
57271: LIST
57272: LIST
57273: ST_TO_ADDR
// if not base then
57274: LD_VAR 0 1
57278: NOT
57279: IFFALSE 57283
// exit ;
57281: GO 57332
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
57283: LD_ADDR_VAR 0 2
57287: PUSH
57288: LD_VAR 0 1
57292: PPUSH
57293: LD_INT 1
57295: PPUSH
57296: CALL_OW 275
57300: PUSH
57301: LD_VAR 0 1
57305: PPUSH
57306: LD_INT 2
57308: PPUSH
57309: CALL_OW 275
57313: PUSH
57314: LD_VAR 0 1
57318: PPUSH
57319: LD_INT 3
57321: PPUSH
57322: CALL_OW 275
57326: PUSH
57327: EMPTY
57328: LIST
57329: LIST
57330: LIST
57331: ST_TO_ADDR
// end ;
57332: LD_VAR 0 2
57336: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
57337: LD_INT 0
57339: PPUSH
57340: PPUSH
// result := array ;
57341: LD_ADDR_VAR 0 3
57345: PUSH
57346: LD_VAR 0 1
57350: ST_TO_ADDR
// if size > 0 then
57351: LD_VAR 0 2
57355: PUSH
57356: LD_INT 0
57358: GREATER
57359: IFFALSE 57405
// for i := array downto size do
57361: LD_ADDR_VAR 0 4
57365: PUSH
57366: DOUBLE
57367: LD_VAR 0 1
57371: INC
57372: ST_TO_ADDR
57373: LD_VAR 0 2
57377: PUSH
57378: FOR_DOWNTO
57379: IFFALSE 57403
// result := Delete ( result , result ) ;
57381: LD_ADDR_VAR 0 3
57385: PUSH
57386: LD_VAR 0 3
57390: PPUSH
57391: LD_VAR 0 3
57395: PPUSH
57396: CALL_OW 3
57400: ST_TO_ADDR
57401: GO 57378
57403: POP
57404: POP
// end ;
57405: LD_VAR 0 3
57409: RET
// export function ComExit ( unit ) ; var tmp ; begin
57410: LD_INT 0
57412: PPUSH
57413: PPUSH
// if not IsInUnit ( unit ) then
57414: LD_VAR 0 1
57418: PPUSH
57419: CALL_OW 310
57423: NOT
57424: IFFALSE 57428
// exit ;
57426: GO 57488
// tmp := IsInUnit ( unit ) ;
57428: LD_ADDR_VAR 0 3
57432: PUSH
57433: LD_VAR 0 1
57437: PPUSH
57438: CALL_OW 310
57442: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
57443: LD_VAR 0 3
57447: PPUSH
57448: CALL_OW 247
57452: PUSH
57453: LD_INT 2
57455: EQUAL
57456: IFFALSE 57469
// ComExitVehicle ( unit ) else
57458: LD_VAR 0 1
57462: PPUSH
57463: CALL_OW 121
57467: GO 57478
// ComExitBuilding ( unit ) ;
57469: LD_VAR 0 1
57473: PPUSH
57474: CALL_OW 122
// result := tmp ;
57478: LD_ADDR_VAR 0 2
57482: PUSH
57483: LD_VAR 0 3
57487: ST_TO_ADDR
// end ;
57488: LD_VAR 0 2
57492: RET
// export function ComExitAll ( units ) ; var i ; begin
57493: LD_INT 0
57495: PPUSH
57496: PPUSH
// if not units then
57497: LD_VAR 0 1
57501: NOT
57502: IFFALSE 57506
// exit ;
57504: GO 57532
// for i in units do
57506: LD_ADDR_VAR 0 3
57510: PUSH
57511: LD_VAR 0 1
57515: PUSH
57516: FOR_IN
57517: IFFALSE 57530
// ComExit ( i ) ;
57519: LD_VAR 0 3
57523: PPUSH
57524: CALL 57410 0 1
57528: GO 57516
57530: POP
57531: POP
// end ;
57532: LD_VAR 0 2
57536: RET
// export function ResetHc ; begin
57537: LD_INT 0
57539: PPUSH
// InitHc ;
57540: CALL_OW 19
// hc_importance := 0 ;
57544: LD_ADDR_OWVAR 32
57548: PUSH
57549: LD_INT 0
57551: ST_TO_ADDR
// end ;
57552: LD_VAR 0 1
57556: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
57557: LD_INT 0
57559: PPUSH
57560: PPUSH
57561: PPUSH
// _x := ( x1 + x2 ) div 2 ;
57562: LD_ADDR_VAR 0 6
57566: PUSH
57567: LD_VAR 0 1
57571: PUSH
57572: LD_VAR 0 3
57576: PLUS
57577: PUSH
57578: LD_INT 2
57580: DIV
57581: ST_TO_ADDR
// if _x < 0 then
57582: LD_VAR 0 6
57586: PUSH
57587: LD_INT 0
57589: LESS
57590: IFFALSE 57607
// _x := _x * - 1 ;
57592: LD_ADDR_VAR 0 6
57596: PUSH
57597: LD_VAR 0 6
57601: PUSH
57602: LD_INT 1
57604: NEG
57605: MUL
57606: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
57607: LD_ADDR_VAR 0 7
57611: PUSH
57612: LD_VAR 0 2
57616: PUSH
57617: LD_VAR 0 4
57621: PLUS
57622: PUSH
57623: LD_INT 2
57625: DIV
57626: ST_TO_ADDR
// if _y < 0 then
57627: LD_VAR 0 7
57631: PUSH
57632: LD_INT 0
57634: LESS
57635: IFFALSE 57652
// _y := _y * - 1 ;
57637: LD_ADDR_VAR 0 7
57641: PUSH
57642: LD_VAR 0 7
57646: PUSH
57647: LD_INT 1
57649: NEG
57650: MUL
57651: ST_TO_ADDR
// result := [ _x , _y ] ;
57652: LD_ADDR_VAR 0 5
57656: PUSH
57657: LD_VAR 0 6
57661: PUSH
57662: LD_VAR 0 7
57666: PUSH
57667: EMPTY
57668: LIST
57669: LIST
57670: ST_TO_ADDR
// end ;
57671: LD_VAR 0 5
57675: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
57676: LD_INT 0
57678: PPUSH
57679: PPUSH
57680: PPUSH
57681: PPUSH
// task := GetTaskList ( unit ) ;
57682: LD_ADDR_VAR 0 7
57686: PUSH
57687: LD_VAR 0 1
57691: PPUSH
57692: CALL_OW 437
57696: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
57697: LD_VAR 0 7
57701: NOT
57702: PUSH
57703: LD_VAR 0 1
57707: PPUSH
57708: LD_VAR 0 2
57712: PPUSH
57713: CALL_OW 308
57717: NOT
57718: AND
57719: IFFALSE 57723
// exit ;
57721: GO 57841
// if IsInArea ( unit , area ) then
57723: LD_VAR 0 1
57727: PPUSH
57728: LD_VAR 0 2
57732: PPUSH
57733: CALL_OW 308
57737: IFFALSE 57755
// begin ComMoveToArea ( unit , goAway ) ;
57739: LD_VAR 0 1
57743: PPUSH
57744: LD_VAR 0 3
57748: PPUSH
57749: CALL_OW 113
// exit ;
57753: GO 57841
// end ; if task [ 1 ] [ 1 ] <> M then
57755: LD_VAR 0 7
57759: PUSH
57760: LD_INT 1
57762: ARRAY
57763: PUSH
57764: LD_INT 1
57766: ARRAY
57767: PUSH
57768: LD_STRING M
57770: NONEQUAL
57771: IFFALSE 57775
// exit ;
57773: GO 57841
// x := task [ 1 ] [ 2 ] ;
57775: LD_ADDR_VAR 0 5
57779: PUSH
57780: LD_VAR 0 7
57784: PUSH
57785: LD_INT 1
57787: ARRAY
57788: PUSH
57789: LD_INT 2
57791: ARRAY
57792: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
57793: LD_ADDR_VAR 0 6
57797: PUSH
57798: LD_VAR 0 7
57802: PUSH
57803: LD_INT 1
57805: ARRAY
57806: PUSH
57807: LD_INT 3
57809: ARRAY
57810: ST_TO_ADDR
// if InArea ( x , y , area ) then
57811: LD_VAR 0 5
57815: PPUSH
57816: LD_VAR 0 6
57820: PPUSH
57821: LD_VAR 0 2
57825: PPUSH
57826: CALL_OW 309
57830: IFFALSE 57841
// ComStop ( unit ) ;
57832: LD_VAR 0 1
57836: PPUSH
57837: CALL_OW 141
// end ;
57841: LD_VAR 0 4
57845: RET
// export function Abs ( value ) ; begin
57846: LD_INT 0
57848: PPUSH
// result := value ;
57849: LD_ADDR_VAR 0 2
57853: PUSH
57854: LD_VAR 0 1
57858: ST_TO_ADDR
// if value < 0 then
57859: LD_VAR 0 1
57863: PUSH
57864: LD_INT 0
57866: LESS
57867: IFFALSE 57884
// result := value * - 1 ;
57869: LD_ADDR_VAR 0 2
57873: PUSH
57874: LD_VAR 0 1
57878: PUSH
57879: LD_INT 1
57881: NEG
57882: MUL
57883: ST_TO_ADDR
// end ;
57884: LD_VAR 0 2
57888: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
57889: LD_INT 0
57891: PPUSH
57892: PPUSH
57893: PPUSH
57894: PPUSH
57895: PPUSH
57896: PPUSH
57897: PPUSH
57898: PPUSH
// if not unit or not building then
57899: LD_VAR 0 1
57903: NOT
57904: PUSH
57905: LD_VAR 0 2
57909: NOT
57910: OR
57911: IFFALSE 57915
// exit ;
57913: GO 58141
// x := GetX ( building ) ;
57915: LD_ADDR_VAR 0 4
57919: PUSH
57920: LD_VAR 0 2
57924: PPUSH
57925: CALL_OW 250
57929: ST_TO_ADDR
// y := GetY ( building ) ;
57930: LD_ADDR_VAR 0 6
57934: PUSH
57935: LD_VAR 0 2
57939: PPUSH
57940: CALL_OW 251
57944: ST_TO_ADDR
// d := GetDir ( building ) ;
57945: LD_ADDR_VAR 0 8
57949: PUSH
57950: LD_VAR 0 2
57954: PPUSH
57955: CALL_OW 254
57959: ST_TO_ADDR
// r := 4 ;
57960: LD_ADDR_VAR 0 9
57964: PUSH
57965: LD_INT 4
57967: ST_TO_ADDR
// for i := 1 to 5 do
57968: LD_ADDR_VAR 0 10
57972: PUSH
57973: DOUBLE
57974: LD_INT 1
57976: DEC
57977: ST_TO_ADDR
57978: LD_INT 5
57980: PUSH
57981: FOR_TO
57982: IFFALSE 58139
// begin _x := ShiftX ( x , d , r + i ) ;
57984: LD_ADDR_VAR 0 5
57988: PUSH
57989: LD_VAR 0 4
57993: PPUSH
57994: LD_VAR 0 8
57998: PPUSH
57999: LD_VAR 0 9
58003: PUSH
58004: LD_VAR 0 10
58008: PLUS
58009: PPUSH
58010: CALL_OW 272
58014: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
58015: LD_ADDR_VAR 0 7
58019: PUSH
58020: LD_VAR 0 6
58024: PPUSH
58025: LD_VAR 0 8
58029: PPUSH
58030: LD_VAR 0 9
58034: PUSH
58035: LD_VAR 0 10
58039: PLUS
58040: PPUSH
58041: CALL_OW 273
58045: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
58046: LD_VAR 0 5
58050: PPUSH
58051: LD_VAR 0 7
58055: PPUSH
58056: CALL_OW 488
58060: PUSH
58061: LD_VAR 0 5
58065: PPUSH
58066: LD_VAR 0 7
58070: PPUSH
58071: CALL_OW 428
58075: PPUSH
58076: CALL_OW 247
58080: PUSH
58081: LD_INT 3
58083: PUSH
58084: LD_INT 2
58086: PUSH
58087: EMPTY
58088: LIST
58089: LIST
58090: IN
58091: NOT
58092: AND
58093: IFFALSE 58137
// begin ComMoveXY ( unit , _x , _y ) ;
58095: LD_VAR 0 1
58099: PPUSH
58100: LD_VAR 0 5
58104: PPUSH
58105: LD_VAR 0 7
58109: PPUSH
58110: CALL_OW 111
// result := [ _x , _y ] ;
58114: LD_ADDR_VAR 0 3
58118: PUSH
58119: LD_VAR 0 5
58123: PUSH
58124: LD_VAR 0 7
58128: PUSH
58129: EMPTY
58130: LIST
58131: LIST
58132: ST_TO_ADDR
// exit ;
58133: POP
58134: POP
58135: GO 58141
// end ; end ;
58137: GO 57981
58139: POP
58140: POP
// end ;
58141: LD_VAR 0 3
58145: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
58146: LD_INT 0
58148: PPUSH
58149: PPUSH
58150: PPUSH
// result := 0 ;
58151: LD_ADDR_VAR 0 3
58155: PUSH
58156: LD_INT 0
58158: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
58159: LD_VAR 0 1
58163: PUSH
58164: LD_INT 0
58166: LESS
58167: PUSH
58168: LD_VAR 0 1
58172: PUSH
58173: LD_INT 8
58175: GREATER
58176: OR
58177: PUSH
58178: LD_VAR 0 2
58182: PUSH
58183: LD_INT 0
58185: LESS
58186: OR
58187: PUSH
58188: LD_VAR 0 2
58192: PUSH
58193: LD_INT 8
58195: GREATER
58196: OR
58197: IFFALSE 58201
// exit ;
58199: GO 58276
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
58201: LD_ADDR_VAR 0 4
58205: PUSH
58206: LD_INT 22
58208: PUSH
58209: LD_VAR 0 2
58213: PUSH
58214: EMPTY
58215: LIST
58216: LIST
58217: PPUSH
58218: CALL_OW 69
58222: PUSH
58223: FOR_IN
58224: IFFALSE 58274
// begin un := UnitShoot ( i ) ;
58226: LD_ADDR_VAR 0 5
58230: PUSH
58231: LD_VAR 0 4
58235: PPUSH
58236: CALL_OW 504
58240: ST_TO_ADDR
// if GetSide ( un ) = side1 then
58241: LD_VAR 0 5
58245: PPUSH
58246: CALL_OW 255
58250: PUSH
58251: LD_VAR 0 1
58255: EQUAL
58256: IFFALSE 58272
// begin result := un ;
58258: LD_ADDR_VAR 0 3
58262: PUSH
58263: LD_VAR 0 5
58267: ST_TO_ADDR
// exit ;
58268: POP
58269: POP
58270: GO 58276
// end ; end ;
58272: GO 58223
58274: POP
58275: POP
// end ;
58276: LD_VAR 0 3
58280: RET
// export function GetCargoBay ( units ) ; begin
58281: LD_INT 0
58283: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
58284: LD_ADDR_VAR 0 2
58288: PUSH
58289: LD_VAR 0 1
58293: PPUSH
58294: LD_INT 2
58296: PUSH
58297: LD_INT 34
58299: PUSH
58300: LD_INT 12
58302: PUSH
58303: EMPTY
58304: LIST
58305: LIST
58306: PUSH
58307: LD_INT 34
58309: PUSH
58310: LD_INT 51
58312: PUSH
58313: EMPTY
58314: LIST
58315: LIST
58316: PUSH
58317: LD_INT 34
58319: PUSH
58320: LD_INT 32
58322: PUSH
58323: EMPTY
58324: LIST
58325: LIST
58326: PUSH
58327: LD_INT 34
58329: PUSH
58330: LD_EXP 80
58334: PUSH
58335: EMPTY
58336: LIST
58337: LIST
58338: PUSH
58339: EMPTY
58340: LIST
58341: LIST
58342: LIST
58343: LIST
58344: LIST
58345: PPUSH
58346: CALL_OW 72
58350: ST_TO_ADDR
// end ;
58351: LD_VAR 0 2
58355: RET
